
sound_treatment.elf:     file format elf32-littlenios2
sound_treatment.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00006d7c memsz 0x00006d7c flags r-x
    LOAD off    0x00007d9c vaddr 0x00026d9c paddr 0x00028934 align 2**12
         filesz 0x00001b98 memsz 0x00001b98 flags rw-
    LOAD off    0x0000a4cc vaddr 0x0002a4cc paddr 0x0002a4cc align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006ad0  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  00026d14  00026d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b98  00026d9c  00028934  00007d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0002a4cc  0002a4cc  0000a4cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory_nios2_FFT 00000000  0002a620  0002a620  00009934  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009934  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ad0  00000000  00000000  00009958  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017f0d  00000000  00000000  0000a428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006929  00000000  00000000  00022335  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000720f  00000000  00000000  00028c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a98  00000000  00000000  0002fe70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c9e  00000000  00000000  00031908  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  000345a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00038ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00039028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c226  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0003c229  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c232  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c233  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003c234  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003c23f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003c24a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003c255  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  0003c260  2**0
                  CONTENTS, READONLY
 26 .jdi          0000b994  00000000  00000000  0003c29c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000b626c  00000000  00000000  00047c30  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00026d14 l    d  .rodata	00000000 .rodata
00026d9c l    d  .rwdata	00000000 .rwdata
0002a4cc l    d  .bss	00000000 .bss
0002a620 l    d  .onchip_memory_nios2_FFT	00000000 .onchip_memory_nios2_FFT
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/vm/Final-Project-Real-Time-Embedded-Systems/sw/nios/sound_treatment_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020430 l     F .text	00000008 __fp_unlock
00020444 l     F .text	0000019c __sinit.part.1
000205e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00026d9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0002308c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000231c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000232b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023390 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002347c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00028914 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000239d0 l     F .text	00000034 alt_dev_reg
00023a04 l     F .text	0000003c alt_get_errno
00023a40 l     F .text	00000068 alt_avalon_mutex_reg
00027770 l     O .rwdata	00001060 jtag_uart_1
000287d0 l     O .rwdata	00000048 mailbox_simple_0
00028818 l     O .rwdata	00000010 mutex_SDRAM
00028828 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023d8c l     F .text	0000020c altera_avalon_jtag_uart_irq
00023f98 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
000245d0 l     F .text	00000090 altera_avalon_mailbox_identify
00024660 l     F .text	00000078 altera_avalon_mailbox_post
000246d8 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
00024810 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00024f30 l     F .text	0000003c alt_get_errno
00024f6c l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000253b8 l     F .text	0000009c altera_avalon_uart_irq
00025454 l     F .text	000000e4 altera_avalon_uart_rxirq
00025538 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000256d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000258ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00025c48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002614c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002628c l     F .text	0000003c alt_get_errno
000262c8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002a4f4 g     O .bss	00000004 alt_instruction_exception_handler
00024ca4 g     F .text	00000150 altera_avalon_mailbox_send
00022e84 g     F .text	00000054 _isatty_r
0002358c g     F .text	0000007c alt_main
000202c4 g     F .text	000000c0 _puts_r
0002a520 g     O .bss	00000100 alt_irq
00022bac g     F .text	00000060 _lseek_r
00028934 g       *ABS*	00000000 __flash_rwdata_start
0002a620 g       *ABS*	00000000 __alt_heap_start
00022160 g     F .text	0000005c __sseek
00020780 g     F .text	00000010 __sinit
000205e8 g     F .text	00000068 __sfmoreglue
0002362c g     F .text	00000024 __malloc_unlock
0002184c g     F .text	0000015c memmove
00020768 g     F .text	00000018 _cleanup
000250a4 g     F .text	00000040 altera_avalon_mutex_trylock
00026684 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00025138 g     F .text	00000074 altera_avalon_mutex_is_mine
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022e28 g     F .text	0000005c _fstat_r
0002a4d8 g     O .bss	00000004 errno
000220dc g     F .text	00000008 __seofread
0002a4e0 g     O .bss	00000004 alt_argv
000308ec g       *ABS*	00000000 _gp
00024df4 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
000275f0 g     O .rwdata	00000180 alt_fd_list
00025de8 g     F .text	00000090 alt_find_dev
00021704 g     F .text	00000148 memcpy
00020438 g     F .text	0000000c _cleanup_r
00026210 g     F .text	0000007c alt_io_redirect
00026d14 g       *ABS*	00000000 __DTOR_END__
00020384 g     F .text	00000014 puts
000268e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000248b8 g     F .text	00000078 altera_avalon_mailbox_simple_init
00024190 g     F .text	0000021c altera_avalon_jtag_uart_read
00022fd0 g     F .text	00000064 .hidden __udivsi3
000232ec g     F .text	000000a4 isatty
00024c2c g     F .text	00000078 altera_avalon_mailbox_status
00024b14 g     F .text	00000118 altera_avalon_mailbox_close
00026854 g     F .text	00000090 alt_icache_flush
0002a4d4 g     O .bss	00000004 __malloc_top_pad
000207d0 g     F .text	000004bc __sfvwrite_r
00022034 g     F .text	00000054 _sbrk_r
00022dc8 g     F .text	00000060 _read_r
0002890c g     O .rwdata	00000004 alt_max_fd
000223cc g     F .text	000000f0 _fclose_r
00022748 g     F .text	00000030 fflush
0002a4d0 g     O .bss	00000004 __malloc_max_sbrked_mem
000234b8 g     F .text	000000d4 lseek
000251ac g     F .text	00000050 altera_avalon_mutex_first_lock
000288ec g     O .rwdata	00000004 _global_impure_ptr
00021ad0 g     F .text	00000564 _realloc_r
0002a620 g       *ABS*	00000000 __bss_end
0002605c g     F .text	000000f0 alt_iic_isr_register
0002657c g     F .text	00000108 alt_tick
0002530c g     F .text	000000ac altera_avalon_uart_init
000207a0 g     F .text	00000018 __fp_lock_all
00026010 g     F .text	0000004c alt_ic_irq_enabled
000264e0 g     F .text	0000009c alt_alarm_stop
0002a4e8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000275c8 g     O .rwdata	00000028 alt_dev_null
00024fe8 g     F .text	00000054 altera_avalon_mutex_open
00025c00 g     F .text	00000048 alt_dcache_flush_all
00028934 g       *ABS*	00000000 __ram_rwdata_end
00028904 g     O .rwdata	00000008 alt_dev_list
000238d8 g     F .text	000000f8 write
00028920 g     O .rwdata	00000008 alt_mutex_list
00026d9c g       *ABS*	00000000 __ram_rodata_end
00023200 g     F .text	000000b0 fstat
00023034 g     F .text	00000058 .hidden __umodsi3
0002a620 g       *ABS*	00000000 end
00025928 g     F .text	000001ac altera_avalon_uart_write
00023ccc g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00026d14 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002525c g     F .text	00000060 altera_avalon_uart_write_fd
000252bc g     F .text	00000050 altera_avalon_uart_close_fd
000243ac g     F .text	00000224 altera_avalon_jtag_uart_write
00020790 g     F .text	00000004 __sfp_lock_acquire
00021620 g     F .text	000000e4 memchr
0002289c g     F .text	00000310 _free_r
00026b60 g     F .text	00000180 __call_exitprocs
000288f4 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
0002a4ec g     O .bss	00000004 _alt_tick_rate
0002a4f0 g     O .bss	00000004 _alt_nticks
0002368c g     F .text	000000fc read
00023ae0 g     F .text	00000088 alt_sys_init
00026a48 g     F .text	00000118 __register_exitproc
000250e4 g     F .text	00000054 altera_avalon_mutex_unlock
00024038 g     F .text	00000068 altera_avalon_jtag_uart_close
00026d9c g       *ABS*	00000000 __ram_rwdata_start
00026d14 g       *ABS*	00000000 __ram_rodata_start
0002a4f8 g     O .bss	00000028 __malloc_current_mallinfo
00023b68 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000267b0 g     F .text	000000a4 alt_get_fd
00022378 g     F .text	00000054 _close_r
000269cc g     F .text	0000007c memcmp
00023c28 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a620 g       *ABS*	00000000 __alt_stack_base
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios2_FFT
00023c78 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022224 g     F .text	00000154 __swsetup_r
00020650 g     F .text	00000118 __sfp
000271c0 g     O .rwdata	00000408 __malloc_av_
0002079c g     F .text	00000004 __sinit_lock_release
00022088 g     F .text	00000054 __sread
000266a8 g     F .text	00000108 alt_find_file
00025c84 g     F .text	000000a4 alt_dev_llist_insert
00023608 g     F .text	00000024 __malloc_lock
000237ec g     F .text	000000b0 sbrk
000226ec g     F .text	0000005c _fflush_r
0002a4cc g       *ABS*	00000000 __bss_start
000219a8 g     F .text	00000128 memset
00020290 g     F .text	00000034 main
0002a4e4 g     O .bss	00000004 alt_envp
0002a4cc g     O .bss	00000004 __malloc_max_total_mem
00023bc8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000221bc g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
000224bc g     F .text	00000014 fclose
00025060 g     F .text	00000044 altera_avalon_mutex_lock
00020e14 g     F .text	0000080c _malloc_r
00028910 g     O .rwdata	00000004 alt_errno
00020c8c g     F .text	000000c4 _fwalk
00022ed8 g     F .text	00000084 .hidden __divsi3
00022778 g     F .text	00000124 _malloc_trim_r
00026d14 g       *ABS*	00000000 __CTOR_END__
00026d14 g       *ABS*	00000000 __flash_rodata_start
00026d14 g       *ABS*	00000000 __DTOR_LIST__
00023aa8 g     F .text	00000038 alt_irq_init
00023788 g     F .text	00000064 alt_release_fd
00026980 g     F .text	00000014 atexit
000221c4 g     F .text	00000060 _write_r
000288f0 g     O .rwdata	00000004 _impure_ptr
0002a4dc g     O .bss	00000004 alt_argc
000224d0 g     F .text	0000021c __sflush_r
00025d88 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000207b8 g     F .text	00000018 __fp_unlock_all
000288fc g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025eac g     F .text	00000050 alt_ic_isr_register
00028934 g       *ABS*	00000000 _edata
000251fc g     F .text	00000060 altera_avalon_uart_read_fd
0002a620 g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
000240a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00025f84 g     F .text	0000008c alt_ic_irq_disable
00028918 g     O .rwdata	00000008 alt_mailbox_simple_list
000220e4 g     F .text	0000007c __swrite
000288f8 g     O .rwdata	00000004 __malloc_trim_threshold
00026994 g     F .text	00000038 exit
00020d50 g     F .text	000000c4 _fwalk_reent
00022f5c g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020794 g     F .text	00000004 __sfp_lock_release
00025680 g     F .text	00000054 altera_avalon_uart_close
00024930 g     F .text	000001e4 altera_avalon_mailbox_open
00026ce0 g     F .text	00000034 _exit
00025ad4 g     F .text	0000012c alt_alarm_start
00022c0c g     F .text	000001bc __smakebuf_r
00020398 g     F .text	00000098 strlen
0002638c g     F .text	00000154 open
00025e78 g     F .text	00000034 alt_icache_flush_all
00028928 g     O .rwdata	00000004 alt_priority_mask
00025efc g     F .text	00000088 alt_ic_irq_enable
0002503c g     F .text	00000024 altera_avalon_mutex_close
00025710 g     F .text	000001dc altera_avalon_uart_read
0002892c g     O .rwdata	00000008 alt_alarm_list
00025d28 g     F .text	00000060 _do_ctors
000230c8 g     F .text	000000d0 close
000233f8 g     F .text	00000084 alt_load
00020798 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a94804 	addi	r2,r2,-23264
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a94804 	addi	r2,r2,-23264
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a70217 	ldw	r2,-25592(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a70217 	ldw	r2,-25592(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6823b14 	ori	gp,gp,2284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	10a93314 	ori	r2,r2,42188

    movhi r3, %hi(__bss_end)
   2026c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20270:	18e98814 	ori	r3,r3,42528

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00233f80 	call	233f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002358c0 	call	2358c <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <alt_after_alt_main>

00020290 <main>:
 */

#include <stdio.h>

int main()
{
   20290:	defffe04 	addi	sp,sp,-8
   20294:	dfc00115 	stw	ra,4(sp)
   20298:	df000015 	stw	fp,0(sp)
   2029c:	d839883a 	mov	fp,sp
  printf("Hello from Nios I!\n");
   202a0:	010000b4 	movhi	r4,2
   202a4:	211b4504 	addi	r4,r4,27924
   202a8:	00203840 	call	20384 <puts>

  return 0;
   202ac:	0005883a 	mov	r2,zero
}
   202b0:	e037883a 	mov	sp,fp
   202b4:	dfc00117 	ldw	ra,4(sp)
   202b8:	df000017 	ldw	fp,0(sp)
   202bc:	dec00204 	addi	sp,sp,8
   202c0:	f800283a 	ret

000202c4 <_puts_r>:
   202c4:	defff604 	addi	sp,sp,-40
   202c8:	dc000715 	stw	r16,28(sp)
   202cc:	2021883a 	mov	r16,r4
   202d0:	2809883a 	mov	r4,r5
   202d4:	dc400815 	stw	r17,32(sp)
   202d8:	dfc00915 	stw	ra,36(sp)
   202dc:	2823883a 	mov	r17,r5
   202e0:	00203980 	call	20398 <strlen>
   202e4:	10c00044 	addi	r3,r2,1
   202e8:	d8800115 	stw	r2,4(sp)
   202ec:	008000b4 	movhi	r2,2
   202f0:	109b4a04 	addi	r2,r2,27944
   202f4:	d8800215 	stw	r2,8(sp)
   202f8:	00800044 	movi	r2,1
   202fc:	d8800315 	stw	r2,12(sp)
   20300:	00800084 	movi	r2,2
   20304:	dc400015 	stw	r17,0(sp)
   20308:	d8c00615 	stw	r3,24(sp)
   2030c:	dec00415 	stw	sp,16(sp)
   20310:	d8800515 	stw	r2,20(sp)
   20314:	80000226 	beq	r16,zero,20320 <_puts_r+0x5c>
   20318:	80800e17 	ldw	r2,56(r16)
   2031c:	10001426 	beq	r2,zero,20370 <_puts_r+0xac>
   20320:	81400217 	ldw	r5,8(r16)
   20324:	2880030b 	ldhu	r2,12(r5)
   20328:	10c8000c 	andi	r3,r2,8192
   2032c:	1800061e 	bne	r3,zero,20348 <_puts_r+0x84>
   20330:	29001917 	ldw	r4,100(r5)
   20334:	00f7ffc4 	movi	r3,-8193
   20338:	10880014 	ori	r2,r2,8192
   2033c:	20c6703a 	and	r3,r4,r3
   20340:	2880030d 	sth	r2,12(r5)
   20344:	28c01915 	stw	r3,100(r5)
   20348:	d9800404 	addi	r6,sp,16
   2034c:	8009883a 	mov	r4,r16
   20350:	00207d00 	call	207d0 <__sfvwrite_r>
   20354:	1000091e 	bne	r2,zero,2037c <_puts_r+0xb8>
   20358:	00800284 	movi	r2,10
   2035c:	dfc00917 	ldw	ra,36(sp)
   20360:	dc400817 	ldw	r17,32(sp)
   20364:	dc000717 	ldw	r16,28(sp)
   20368:	dec00a04 	addi	sp,sp,40
   2036c:	f800283a 	ret
   20370:	8009883a 	mov	r4,r16
   20374:	00207800 	call	20780 <__sinit>
   20378:	003fe906 	br	20320 <_puts_r+0x5c>
   2037c:	00bfffc4 	movi	r2,-1
   20380:	003ff606 	br	2035c <_puts_r+0x98>

00020384 <puts>:
   20384:	008000f4 	movhi	r2,3
   20388:	10a23c04 	addi	r2,r2,-30480
   2038c:	200b883a 	mov	r5,r4
   20390:	11000017 	ldw	r4,0(r2)
   20394:	00202c41 	jmpi	202c4 <_puts_r>

00020398 <strlen>:
   20398:	208000cc 	andi	r2,r4,3
   2039c:	10002026 	beq	r2,zero,20420 <strlen+0x88>
   203a0:	20800007 	ldb	r2,0(r4)
   203a4:	10002026 	beq	r2,zero,20428 <strlen+0x90>
   203a8:	2005883a 	mov	r2,r4
   203ac:	00000206 	br	203b8 <strlen+0x20>
   203b0:	10c00007 	ldb	r3,0(r2)
   203b4:	18001826 	beq	r3,zero,20418 <strlen+0x80>
   203b8:	10800044 	addi	r2,r2,1
   203bc:	10c000cc 	andi	r3,r2,3
   203c0:	183ffb1e 	bne	r3,zero,203b0 <strlen+0x18>
   203c4:	10c00017 	ldw	r3,0(r2)
   203c8:	01ffbff4 	movhi	r7,65279
   203cc:	39ffbfc4 	addi	r7,r7,-257
   203d0:	00ca303a 	nor	r5,zero,r3
   203d4:	01a02074 	movhi	r6,32897
   203d8:	19c7883a 	add	r3,r3,r7
   203dc:	31a02004 	addi	r6,r6,-32640
   203e0:	1946703a 	and	r3,r3,r5
   203e4:	1986703a 	and	r3,r3,r6
   203e8:	1800091e 	bne	r3,zero,20410 <strlen+0x78>
   203ec:	10800104 	addi	r2,r2,4
   203f0:	10c00017 	ldw	r3,0(r2)
   203f4:	19cb883a 	add	r5,r3,r7
   203f8:	00c6303a 	nor	r3,zero,r3
   203fc:	28c6703a 	and	r3,r5,r3
   20400:	1986703a 	and	r3,r3,r6
   20404:	183ff926 	beq	r3,zero,203ec <strlen+0x54>
   20408:	00000106 	br	20410 <strlen+0x78>
   2040c:	10800044 	addi	r2,r2,1
   20410:	10c00007 	ldb	r3,0(r2)
   20414:	183ffd1e 	bne	r3,zero,2040c <strlen+0x74>
   20418:	1105c83a 	sub	r2,r2,r4
   2041c:	f800283a 	ret
   20420:	2005883a 	mov	r2,r4
   20424:	003fe706 	br	203c4 <strlen+0x2c>
   20428:	0005883a 	mov	r2,zero
   2042c:	f800283a 	ret

00020430 <__fp_unlock>:
   20430:	0005883a 	mov	r2,zero
   20434:	f800283a 	ret

00020438 <_cleanup_r>:
   20438:	014000b4 	movhi	r5,2
   2043c:	2948f304 	addi	r5,r5,9164
   20440:	0020d501 	jmpi	20d50 <_fwalk_reent>

00020444 <__sinit.part.1>:
   20444:	defff704 	addi	sp,sp,-36
   20448:	00c000b4 	movhi	r3,2
   2044c:	dfc00815 	stw	ra,32(sp)
   20450:	ddc00715 	stw	r23,28(sp)
   20454:	dd800615 	stw	r22,24(sp)
   20458:	dd400515 	stw	r21,20(sp)
   2045c:	dd000415 	stw	r20,16(sp)
   20460:	dcc00315 	stw	r19,12(sp)
   20464:	dc800215 	stw	r18,8(sp)
   20468:	dc400115 	stw	r17,4(sp)
   2046c:	dc000015 	stw	r16,0(sp)
   20470:	18c10e04 	addi	r3,r3,1080
   20474:	24000117 	ldw	r16,4(r4)
   20478:	20c00f15 	stw	r3,60(r4)
   2047c:	2080bb04 	addi	r2,r4,748
   20480:	00c000c4 	movi	r3,3
   20484:	20c0b915 	stw	r3,740(r4)
   20488:	2080ba15 	stw	r2,744(r4)
   2048c:	2000b815 	stw	zero,736(r4)
   20490:	05c00204 	movi	r23,8
   20494:	00800104 	movi	r2,4
   20498:	2025883a 	mov	r18,r4
   2049c:	b80d883a 	mov	r6,r23
   204a0:	81001704 	addi	r4,r16,92
   204a4:	000b883a 	mov	r5,zero
   204a8:	80000015 	stw	zero,0(r16)
   204ac:	80000115 	stw	zero,4(r16)
   204b0:	80000215 	stw	zero,8(r16)
   204b4:	8080030d 	sth	r2,12(r16)
   204b8:	80001915 	stw	zero,100(r16)
   204bc:	8000038d 	sth	zero,14(r16)
   204c0:	80000415 	stw	zero,16(r16)
   204c4:	80000515 	stw	zero,20(r16)
   204c8:	80000615 	stw	zero,24(r16)
   204cc:	00219a80 	call	219a8 <memset>
   204d0:	058000b4 	movhi	r22,2
   204d4:	94400217 	ldw	r17,8(r18)
   204d8:	054000b4 	movhi	r21,2
   204dc:	050000b4 	movhi	r20,2
   204e0:	04c000b4 	movhi	r19,2
   204e4:	b5882204 	addi	r22,r22,8328
   204e8:	ad483904 	addi	r21,r21,8420
   204ec:	a5085804 	addi	r20,r20,8544
   204f0:	9cc86f04 	addi	r19,r19,8636
   204f4:	85800815 	stw	r22,32(r16)
   204f8:	85400915 	stw	r21,36(r16)
   204fc:	85000a15 	stw	r20,40(r16)
   20500:	84c00b15 	stw	r19,44(r16)
   20504:	84000715 	stw	r16,28(r16)
   20508:	00800284 	movi	r2,10
   2050c:	8880030d 	sth	r2,12(r17)
   20510:	00800044 	movi	r2,1
   20514:	b80d883a 	mov	r6,r23
   20518:	89001704 	addi	r4,r17,92
   2051c:	000b883a 	mov	r5,zero
   20520:	88000015 	stw	zero,0(r17)
   20524:	88000115 	stw	zero,4(r17)
   20528:	88000215 	stw	zero,8(r17)
   2052c:	88001915 	stw	zero,100(r17)
   20530:	8880038d 	sth	r2,14(r17)
   20534:	88000415 	stw	zero,16(r17)
   20538:	88000515 	stw	zero,20(r17)
   2053c:	88000615 	stw	zero,24(r17)
   20540:	00219a80 	call	219a8 <memset>
   20544:	94000317 	ldw	r16,12(r18)
   20548:	00800484 	movi	r2,18
   2054c:	8c400715 	stw	r17,28(r17)
   20550:	8d800815 	stw	r22,32(r17)
   20554:	8d400915 	stw	r21,36(r17)
   20558:	8d000a15 	stw	r20,40(r17)
   2055c:	8cc00b15 	stw	r19,44(r17)
   20560:	8080030d 	sth	r2,12(r16)
   20564:	00800084 	movi	r2,2
   20568:	80000015 	stw	zero,0(r16)
   2056c:	80000115 	stw	zero,4(r16)
   20570:	80000215 	stw	zero,8(r16)
   20574:	80001915 	stw	zero,100(r16)
   20578:	8080038d 	sth	r2,14(r16)
   2057c:	80000415 	stw	zero,16(r16)
   20580:	80000515 	stw	zero,20(r16)
   20584:	80000615 	stw	zero,24(r16)
   20588:	b80d883a 	mov	r6,r23
   2058c:	000b883a 	mov	r5,zero
   20590:	81001704 	addi	r4,r16,92
   20594:	00219a80 	call	219a8 <memset>
   20598:	00800044 	movi	r2,1
   2059c:	84000715 	stw	r16,28(r16)
   205a0:	85800815 	stw	r22,32(r16)
   205a4:	85400915 	stw	r21,36(r16)
   205a8:	85000a15 	stw	r20,40(r16)
   205ac:	84c00b15 	stw	r19,44(r16)
   205b0:	90800e15 	stw	r2,56(r18)
   205b4:	dfc00817 	ldw	ra,32(sp)
   205b8:	ddc00717 	ldw	r23,28(sp)
   205bc:	dd800617 	ldw	r22,24(sp)
   205c0:	dd400517 	ldw	r21,20(sp)
   205c4:	dd000417 	ldw	r20,16(sp)
   205c8:	dcc00317 	ldw	r19,12(sp)
   205cc:	dc800217 	ldw	r18,8(sp)
   205d0:	dc400117 	ldw	r17,4(sp)
   205d4:	dc000017 	ldw	r16,0(sp)
   205d8:	dec00904 	addi	sp,sp,36
   205dc:	f800283a 	ret

000205e0 <__fp_lock>:
   205e0:	0005883a 	mov	r2,zero
   205e4:	f800283a 	ret

000205e8 <__sfmoreglue>:
   205e8:	defffc04 	addi	sp,sp,-16
   205ec:	dc400115 	stw	r17,4(sp)
   205f0:	2c7fffc4 	addi	r17,r5,-1
   205f4:	8c401a24 	muli	r17,r17,104
   205f8:	dc800215 	stw	r18,8(sp)
   205fc:	2825883a 	mov	r18,r5
   20600:	89401d04 	addi	r5,r17,116
   20604:	dc000015 	stw	r16,0(sp)
   20608:	dfc00315 	stw	ra,12(sp)
   2060c:	0020e140 	call	20e14 <_malloc_r>
   20610:	1021883a 	mov	r16,r2
   20614:	10000726 	beq	r2,zero,20634 <__sfmoreglue+0x4c>
   20618:	11000304 	addi	r4,r2,12
   2061c:	10000015 	stw	zero,0(r2)
   20620:	14800115 	stw	r18,4(r2)
   20624:	11000215 	stw	r4,8(r2)
   20628:	89801a04 	addi	r6,r17,104
   2062c:	000b883a 	mov	r5,zero
   20630:	00219a80 	call	219a8 <memset>
   20634:	8005883a 	mov	r2,r16
   20638:	dfc00317 	ldw	ra,12(sp)
   2063c:	dc800217 	ldw	r18,8(sp)
   20640:	dc400117 	ldw	r17,4(sp)
   20644:	dc000017 	ldw	r16,0(sp)
   20648:	dec00404 	addi	sp,sp,16
   2064c:	f800283a 	ret

00020650 <__sfp>:
   20650:	defffb04 	addi	sp,sp,-20
   20654:	dc000015 	stw	r16,0(sp)
   20658:	040000f4 	movhi	r16,3
   2065c:	84223b04 	addi	r16,r16,-30484
   20660:	dcc00315 	stw	r19,12(sp)
   20664:	2027883a 	mov	r19,r4
   20668:	81000017 	ldw	r4,0(r16)
   2066c:	dfc00415 	stw	ra,16(sp)
   20670:	dc800215 	stw	r18,8(sp)
   20674:	20800e17 	ldw	r2,56(r4)
   20678:	dc400115 	stw	r17,4(sp)
   2067c:	1000021e 	bne	r2,zero,20688 <__sfp+0x38>
   20680:	00204440 	call	20444 <__sinit.part.1>
   20684:	81000017 	ldw	r4,0(r16)
   20688:	2480b804 	addi	r18,r4,736
   2068c:	047fffc4 	movi	r17,-1
   20690:	91000117 	ldw	r4,4(r18)
   20694:	94000217 	ldw	r16,8(r18)
   20698:	213fffc4 	addi	r4,r4,-1
   2069c:	20000a16 	blt	r4,zero,206c8 <__sfp+0x78>
   206a0:	8080030f 	ldh	r2,12(r16)
   206a4:	10000c26 	beq	r2,zero,206d8 <__sfp+0x88>
   206a8:	80c01d04 	addi	r3,r16,116
   206ac:	00000206 	br	206b8 <__sfp+0x68>
   206b0:	18bfe60f 	ldh	r2,-104(r3)
   206b4:	10000826 	beq	r2,zero,206d8 <__sfp+0x88>
   206b8:	213fffc4 	addi	r4,r4,-1
   206bc:	1c3ffd04 	addi	r16,r3,-12
   206c0:	18c01a04 	addi	r3,r3,104
   206c4:	247ffa1e 	bne	r4,r17,206b0 <__sfp+0x60>
   206c8:	90800017 	ldw	r2,0(r18)
   206cc:	10001d26 	beq	r2,zero,20744 <__sfp+0xf4>
   206d0:	1025883a 	mov	r18,r2
   206d4:	003fee06 	br	20690 <__sfp+0x40>
   206d8:	00bfffc4 	movi	r2,-1
   206dc:	8080038d 	sth	r2,14(r16)
   206e0:	00800044 	movi	r2,1
   206e4:	8080030d 	sth	r2,12(r16)
   206e8:	80001915 	stw	zero,100(r16)
   206ec:	80000015 	stw	zero,0(r16)
   206f0:	80000215 	stw	zero,8(r16)
   206f4:	80000115 	stw	zero,4(r16)
   206f8:	80000415 	stw	zero,16(r16)
   206fc:	80000515 	stw	zero,20(r16)
   20700:	80000615 	stw	zero,24(r16)
   20704:	01800204 	movi	r6,8
   20708:	000b883a 	mov	r5,zero
   2070c:	81001704 	addi	r4,r16,92
   20710:	00219a80 	call	219a8 <memset>
   20714:	8005883a 	mov	r2,r16
   20718:	80000c15 	stw	zero,48(r16)
   2071c:	80000d15 	stw	zero,52(r16)
   20720:	80001115 	stw	zero,68(r16)
   20724:	80001215 	stw	zero,72(r16)
   20728:	dfc00417 	ldw	ra,16(sp)
   2072c:	dcc00317 	ldw	r19,12(sp)
   20730:	dc800217 	ldw	r18,8(sp)
   20734:	dc400117 	ldw	r17,4(sp)
   20738:	dc000017 	ldw	r16,0(sp)
   2073c:	dec00504 	addi	sp,sp,20
   20740:	f800283a 	ret
   20744:	01400104 	movi	r5,4
   20748:	9809883a 	mov	r4,r19
   2074c:	00205e80 	call	205e8 <__sfmoreglue>
   20750:	90800015 	stw	r2,0(r18)
   20754:	103fde1e 	bne	r2,zero,206d0 <__sfp+0x80>
   20758:	00800304 	movi	r2,12
   2075c:	98800015 	stw	r2,0(r19)
   20760:	0005883a 	mov	r2,zero
   20764:	003ff006 	br	20728 <__sfp+0xd8>

00020768 <_cleanup>:
   20768:	008000f4 	movhi	r2,3
   2076c:	10a23b04 	addi	r2,r2,-30484
   20770:	11000017 	ldw	r4,0(r2)
   20774:	014000b4 	movhi	r5,2
   20778:	2948f304 	addi	r5,r5,9164
   2077c:	0020d501 	jmpi	20d50 <_fwalk_reent>

00020780 <__sinit>:
   20780:	20800e17 	ldw	r2,56(r4)
   20784:	10000126 	beq	r2,zero,2078c <__sinit+0xc>
   20788:	f800283a 	ret
   2078c:	00204441 	jmpi	20444 <__sinit.part.1>

00020790 <__sfp_lock_acquire>:
   20790:	f800283a 	ret

00020794 <__sfp_lock_release>:
   20794:	f800283a 	ret

00020798 <__sinit_lock_acquire>:
   20798:	f800283a 	ret

0002079c <__sinit_lock_release>:
   2079c:	f800283a 	ret

000207a0 <__fp_lock_all>:
   207a0:	008000f4 	movhi	r2,3
   207a4:	10a23c04 	addi	r2,r2,-30480
   207a8:	11000017 	ldw	r4,0(r2)
   207ac:	014000b4 	movhi	r5,2
   207b0:	29417804 	addi	r5,r5,1504
   207b4:	0020c8c1 	jmpi	20c8c <_fwalk>

000207b8 <__fp_unlock_all>:
   207b8:	008000f4 	movhi	r2,3
   207bc:	10a23c04 	addi	r2,r2,-30480
   207c0:	11000017 	ldw	r4,0(r2)
   207c4:	014000b4 	movhi	r5,2
   207c8:	29410c04 	addi	r5,r5,1072
   207cc:	0020c8c1 	jmpi	20c8c <_fwalk>

000207d0 <__sfvwrite_r>:
   207d0:	30800217 	ldw	r2,8(r6)
   207d4:	10006726 	beq	r2,zero,20974 <__sfvwrite_r+0x1a4>
   207d8:	28c0030b 	ldhu	r3,12(r5)
   207dc:	defff404 	addi	sp,sp,-48
   207e0:	dd400715 	stw	r21,28(sp)
   207e4:	dd000615 	stw	r20,24(sp)
   207e8:	dc000215 	stw	r16,8(sp)
   207ec:	dfc00b15 	stw	ra,44(sp)
   207f0:	df000a15 	stw	fp,40(sp)
   207f4:	ddc00915 	stw	r23,36(sp)
   207f8:	dd800815 	stw	r22,32(sp)
   207fc:	dcc00515 	stw	r19,20(sp)
   20800:	dc800415 	stw	r18,16(sp)
   20804:	dc400315 	stw	r17,12(sp)
   20808:	1880020c 	andi	r2,r3,8
   2080c:	2821883a 	mov	r16,r5
   20810:	202b883a 	mov	r21,r4
   20814:	3029883a 	mov	r20,r6
   20818:	10002726 	beq	r2,zero,208b8 <__sfvwrite_r+0xe8>
   2081c:	28800417 	ldw	r2,16(r5)
   20820:	10002526 	beq	r2,zero,208b8 <__sfvwrite_r+0xe8>
   20824:	1880008c 	andi	r2,r3,2
   20828:	a4400017 	ldw	r17,0(r20)
   2082c:	10002a26 	beq	r2,zero,208d8 <__sfvwrite_r+0x108>
   20830:	05a00034 	movhi	r22,32768
   20834:	0027883a 	mov	r19,zero
   20838:	0025883a 	mov	r18,zero
   2083c:	b5bf0004 	addi	r22,r22,-1024
   20840:	980d883a 	mov	r6,r19
   20844:	a809883a 	mov	r4,r21
   20848:	90004626 	beq	r18,zero,20964 <__sfvwrite_r+0x194>
   2084c:	900f883a 	mov	r7,r18
   20850:	b480022e 	bgeu	r22,r18,2085c <__sfvwrite_r+0x8c>
   20854:	01e00034 	movhi	r7,32768
   20858:	39ff0004 	addi	r7,r7,-1024
   2085c:	80800917 	ldw	r2,36(r16)
   20860:	81400717 	ldw	r5,28(r16)
   20864:	103ee83a 	callr	r2
   20868:	0080570e 	bge	zero,r2,209c8 <__sfvwrite_r+0x1f8>
   2086c:	a0c00217 	ldw	r3,8(r20)
   20870:	98a7883a 	add	r19,r19,r2
   20874:	90a5c83a 	sub	r18,r18,r2
   20878:	1885c83a 	sub	r2,r3,r2
   2087c:	a0800215 	stw	r2,8(r20)
   20880:	103fef1e 	bne	r2,zero,20840 <__sfvwrite_r+0x70>
   20884:	0005883a 	mov	r2,zero
   20888:	dfc00b17 	ldw	ra,44(sp)
   2088c:	df000a17 	ldw	fp,40(sp)
   20890:	ddc00917 	ldw	r23,36(sp)
   20894:	dd800817 	ldw	r22,32(sp)
   20898:	dd400717 	ldw	r21,28(sp)
   2089c:	dd000617 	ldw	r20,24(sp)
   208a0:	dcc00517 	ldw	r19,20(sp)
   208a4:	dc800417 	ldw	r18,16(sp)
   208a8:	dc400317 	ldw	r17,12(sp)
   208ac:	dc000217 	ldw	r16,8(sp)
   208b0:	dec00c04 	addi	sp,sp,48
   208b4:	f800283a 	ret
   208b8:	800b883a 	mov	r5,r16
   208bc:	a809883a 	mov	r4,r21
   208c0:	00222240 	call	22224 <__swsetup_r>
   208c4:	1000eb1e 	bne	r2,zero,20c74 <__sfvwrite_r+0x4a4>
   208c8:	80c0030b 	ldhu	r3,12(r16)
   208cc:	a4400017 	ldw	r17,0(r20)
   208d0:	1880008c 	andi	r2,r3,2
   208d4:	103fd61e 	bne	r2,zero,20830 <__sfvwrite_r+0x60>
   208d8:	1880004c 	andi	r2,r3,1
   208dc:	10003f1e 	bne	r2,zero,209dc <__sfvwrite_r+0x20c>
   208e0:	0039883a 	mov	fp,zero
   208e4:	0025883a 	mov	r18,zero
   208e8:	90001a26 	beq	r18,zero,20954 <__sfvwrite_r+0x184>
   208ec:	1880800c 	andi	r2,r3,512
   208f0:	84c00217 	ldw	r19,8(r16)
   208f4:	10002126 	beq	r2,zero,2097c <__sfvwrite_r+0x1ac>
   208f8:	982f883a 	mov	r23,r19
   208fc:	94c09336 	bltu	r18,r19,20b4c <__sfvwrite_r+0x37c>
   20900:	1881200c 	andi	r2,r3,1152
   20904:	10009e1e 	bne	r2,zero,20b80 <__sfvwrite_r+0x3b0>
   20908:	81000017 	ldw	r4,0(r16)
   2090c:	b80d883a 	mov	r6,r23
   20910:	e00b883a 	mov	r5,fp
   20914:	002184c0 	call	2184c <memmove>
   20918:	80c00217 	ldw	r3,8(r16)
   2091c:	81000017 	ldw	r4,0(r16)
   20920:	9005883a 	mov	r2,r18
   20924:	1ce7c83a 	sub	r19,r3,r19
   20928:	25cf883a 	add	r7,r4,r23
   2092c:	84c00215 	stw	r19,8(r16)
   20930:	81c00015 	stw	r7,0(r16)
   20934:	a0c00217 	ldw	r3,8(r20)
   20938:	e0b9883a 	add	fp,fp,r2
   2093c:	90a5c83a 	sub	r18,r18,r2
   20940:	18a7c83a 	sub	r19,r3,r2
   20944:	a4c00215 	stw	r19,8(r20)
   20948:	983fce26 	beq	r19,zero,20884 <__sfvwrite_r+0xb4>
   2094c:	80c0030b 	ldhu	r3,12(r16)
   20950:	903fe61e 	bne	r18,zero,208ec <__sfvwrite_r+0x11c>
   20954:	8f000017 	ldw	fp,0(r17)
   20958:	8c800117 	ldw	r18,4(r17)
   2095c:	8c400204 	addi	r17,r17,8
   20960:	003fe106 	br	208e8 <__sfvwrite_r+0x118>
   20964:	8cc00017 	ldw	r19,0(r17)
   20968:	8c800117 	ldw	r18,4(r17)
   2096c:	8c400204 	addi	r17,r17,8
   20970:	003fb306 	br	20840 <__sfvwrite_r+0x70>
   20974:	0005883a 	mov	r2,zero
   20978:	f800283a 	ret
   2097c:	81000017 	ldw	r4,0(r16)
   20980:	80800417 	ldw	r2,16(r16)
   20984:	11005736 	bltu	r2,r4,20ae4 <__sfvwrite_r+0x314>
   20988:	85c00517 	ldw	r23,20(r16)
   2098c:	95c05536 	bltu	r18,r23,20ae4 <__sfvwrite_r+0x314>
   20990:	00a00034 	movhi	r2,32768
   20994:	10bfffc4 	addi	r2,r2,-1
   20998:	9009883a 	mov	r4,r18
   2099c:	1480012e 	bgeu	r2,r18,209a4 <__sfvwrite_r+0x1d4>
   209a0:	1009883a 	mov	r4,r2
   209a4:	b80b883a 	mov	r5,r23
   209a8:	0022ed80 	call	22ed8 <__divsi3>
   209ac:	15cf383a 	mul	r7,r2,r23
   209b0:	81400717 	ldw	r5,28(r16)
   209b4:	80800917 	ldw	r2,36(r16)
   209b8:	e00d883a 	mov	r6,fp
   209bc:	a809883a 	mov	r4,r21
   209c0:	103ee83a 	callr	r2
   209c4:	00bfdb16 	blt	zero,r2,20934 <__sfvwrite_r+0x164>
   209c8:	8080030b 	ldhu	r2,12(r16)
   209cc:	10801014 	ori	r2,r2,64
   209d0:	8080030d 	sth	r2,12(r16)
   209d4:	00bfffc4 	movi	r2,-1
   209d8:	003fab06 	br	20888 <__sfvwrite_r+0xb8>
   209dc:	0027883a 	mov	r19,zero
   209e0:	0011883a 	mov	r8,zero
   209e4:	0039883a 	mov	fp,zero
   209e8:	0025883a 	mov	r18,zero
   209ec:	90001f26 	beq	r18,zero,20a6c <__sfvwrite_r+0x29c>
   209f0:	40005a26 	beq	r8,zero,20b5c <__sfvwrite_r+0x38c>
   209f4:	982d883a 	mov	r22,r19
   209f8:	94c0012e 	bgeu	r18,r19,20a00 <__sfvwrite_r+0x230>
   209fc:	902d883a 	mov	r22,r18
   20a00:	81000017 	ldw	r4,0(r16)
   20a04:	80800417 	ldw	r2,16(r16)
   20a08:	b02f883a 	mov	r23,r22
   20a0c:	81c00517 	ldw	r7,20(r16)
   20a10:	1100032e 	bgeu	r2,r4,20a20 <__sfvwrite_r+0x250>
   20a14:	80c00217 	ldw	r3,8(r16)
   20a18:	38c7883a 	add	r3,r7,r3
   20a1c:	1d801816 	blt	r3,r22,20a80 <__sfvwrite_r+0x2b0>
   20a20:	b1c03e16 	blt	r22,r7,20b1c <__sfvwrite_r+0x34c>
   20a24:	80800917 	ldw	r2,36(r16)
   20a28:	81400717 	ldw	r5,28(r16)
   20a2c:	e00d883a 	mov	r6,fp
   20a30:	da000115 	stw	r8,4(sp)
   20a34:	a809883a 	mov	r4,r21
   20a38:	103ee83a 	callr	r2
   20a3c:	102f883a 	mov	r23,r2
   20a40:	da000117 	ldw	r8,4(sp)
   20a44:	00bfe00e 	bge	zero,r2,209c8 <__sfvwrite_r+0x1f8>
   20a48:	9de7c83a 	sub	r19,r19,r23
   20a4c:	98001f26 	beq	r19,zero,20acc <__sfvwrite_r+0x2fc>
   20a50:	a0800217 	ldw	r2,8(r20)
   20a54:	e5f9883a 	add	fp,fp,r23
   20a58:	95e5c83a 	sub	r18,r18,r23
   20a5c:	15efc83a 	sub	r23,r2,r23
   20a60:	a5c00215 	stw	r23,8(r20)
   20a64:	b83f8726 	beq	r23,zero,20884 <__sfvwrite_r+0xb4>
   20a68:	903fe11e 	bne	r18,zero,209f0 <__sfvwrite_r+0x220>
   20a6c:	8f000017 	ldw	fp,0(r17)
   20a70:	8c800117 	ldw	r18,4(r17)
   20a74:	0011883a 	mov	r8,zero
   20a78:	8c400204 	addi	r17,r17,8
   20a7c:	003fdb06 	br	209ec <__sfvwrite_r+0x21c>
   20a80:	180d883a 	mov	r6,r3
   20a84:	e00b883a 	mov	r5,fp
   20a88:	da000115 	stw	r8,4(sp)
   20a8c:	d8c00015 	stw	r3,0(sp)
   20a90:	002184c0 	call	2184c <memmove>
   20a94:	d8c00017 	ldw	r3,0(sp)
   20a98:	80800017 	ldw	r2,0(r16)
   20a9c:	800b883a 	mov	r5,r16
   20aa0:	a809883a 	mov	r4,r21
   20aa4:	10c5883a 	add	r2,r2,r3
   20aa8:	80800015 	stw	r2,0(r16)
   20aac:	d8c00015 	stw	r3,0(sp)
   20ab0:	00226ec0 	call	226ec <_fflush_r>
   20ab4:	d8c00017 	ldw	r3,0(sp)
   20ab8:	da000117 	ldw	r8,4(sp)
   20abc:	103fc21e 	bne	r2,zero,209c8 <__sfvwrite_r+0x1f8>
   20ac0:	182f883a 	mov	r23,r3
   20ac4:	9de7c83a 	sub	r19,r19,r23
   20ac8:	983fe11e 	bne	r19,zero,20a50 <__sfvwrite_r+0x280>
   20acc:	800b883a 	mov	r5,r16
   20ad0:	a809883a 	mov	r4,r21
   20ad4:	00226ec0 	call	226ec <_fflush_r>
   20ad8:	103fbb1e 	bne	r2,zero,209c8 <__sfvwrite_r+0x1f8>
   20adc:	0011883a 	mov	r8,zero
   20ae0:	003fdb06 	br	20a50 <__sfvwrite_r+0x280>
   20ae4:	94c0012e 	bgeu	r18,r19,20aec <__sfvwrite_r+0x31c>
   20ae8:	9027883a 	mov	r19,r18
   20aec:	980d883a 	mov	r6,r19
   20af0:	e00b883a 	mov	r5,fp
   20af4:	002184c0 	call	2184c <memmove>
   20af8:	80800217 	ldw	r2,8(r16)
   20afc:	80c00017 	ldw	r3,0(r16)
   20b00:	14c5c83a 	sub	r2,r2,r19
   20b04:	1cc7883a 	add	r3,r3,r19
   20b08:	80800215 	stw	r2,8(r16)
   20b0c:	80c00015 	stw	r3,0(r16)
   20b10:	10004326 	beq	r2,zero,20c20 <__sfvwrite_r+0x450>
   20b14:	9805883a 	mov	r2,r19
   20b18:	003f8606 	br	20934 <__sfvwrite_r+0x164>
   20b1c:	b00d883a 	mov	r6,r22
   20b20:	e00b883a 	mov	r5,fp
   20b24:	da000115 	stw	r8,4(sp)
   20b28:	002184c0 	call	2184c <memmove>
   20b2c:	80800217 	ldw	r2,8(r16)
   20b30:	80c00017 	ldw	r3,0(r16)
   20b34:	da000117 	ldw	r8,4(sp)
   20b38:	1585c83a 	sub	r2,r2,r22
   20b3c:	1dad883a 	add	r22,r3,r22
   20b40:	80800215 	stw	r2,8(r16)
   20b44:	85800015 	stw	r22,0(r16)
   20b48:	003fbf06 	br	20a48 <__sfvwrite_r+0x278>
   20b4c:	81000017 	ldw	r4,0(r16)
   20b50:	9027883a 	mov	r19,r18
   20b54:	902f883a 	mov	r23,r18
   20b58:	003f6c06 	br	2090c <__sfvwrite_r+0x13c>
   20b5c:	900d883a 	mov	r6,r18
   20b60:	01400284 	movi	r5,10
   20b64:	e009883a 	mov	r4,fp
   20b68:	00216200 	call	21620 <memchr>
   20b6c:	10003e26 	beq	r2,zero,20c68 <__sfvwrite_r+0x498>
   20b70:	10800044 	addi	r2,r2,1
   20b74:	1727c83a 	sub	r19,r2,fp
   20b78:	02000044 	movi	r8,1
   20b7c:	003f9d06 	br	209f4 <__sfvwrite_r+0x224>
   20b80:	80800517 	ldw	r2,20(r16)
   20b84:	81400417 	ldw	r5,16(r16)
   20b88:	81c00017 	ldw	r7,0(r16)
   20b8c:	10a7883a 	add	r19,r2,r2
   20b90:	9885883a 	add	r2,r19,r2
   20b94:	1026d7fa 	srli	r19,r2,31
   20b98:	396dc83a 	sub	r22,r7,r5
   20b9c:	b1000044 	addi	r4,r22,1
   20ba0:	9885883a 	add	r2,r19,r2
   20ba4:	1027d07a 	srai	r19,r2,1
   20ba8:	2485883a 	add	r2,r4,r18
   20bac:	980d883a 	mov	r6,r19
   20bb0:	9880022e 	bgeu	r19,r2,20bbc <__sfvwrite_r+0x3ec>
   20bb4:	1027883a 	mov	r19,r2
   20bb8:	100d883a 	mov	r6,r2
   20bbc:	18c1000c 	andi	r3,r3,1024
   20bc0:	18001c26 	beq	r3,zero,20c34 <__sfvwrite_r+0x464>
   20bc4:	300b883a 	mov	r5,r6
   20bc8:	a809883a 	mov	r4,r21
   20bcc:	0020e140 	call	20e14 <_malloc_r>
   20bd0:	102f883a 	mov	r23,r2
   20bd4:	10002926 	beq	r2,zero,20c7c <__sfvwrite_r+0x4ac>
   20bd8:	81400417 	ldw	r5,16(r16)
   20bdc:	b00d883a 	mov	r6,r22
   20be0:	1009883a 	mov	r4,r2
   20be4:	00217040 	call	21704 <memcpy>
   20be8:	8080030b 	ldhu	r2,12(r16)
   20bec:	00fedfc4 	movi	r3,-1153
   20bf0:	10c4703a 	and	r2,r2,r3
   20bf4:	10802014 	ori	r2,r2,128
   20bf8:	8080030d 	sth	r2,12(r16)
   20bfc:	bd89883a 	add	r4,r23,r22
   20c00:	9d8fc83a 	sub	r7,r19,r22
   20c04:	85c00415 	stw	r23,16(r16)
   20c08:	84c00515 	stw	r19,20(r16)
   20c0c:	81000015 	stw	r4,0(r16)
   20c10:	9027883a 	mov	r19,r18
   20c14:	81c00215 	stw	r7,8(r16)
   20c18:	902f883a 	mov	r23,r18
   20c1c:	003f3b06 	br	2090c <__sfvwrite_r+0x13c>
   20c20:	800b883a 	mov	r5,r16
   20c24:	a809883a 	mov	r4,r21
   20c28:	00226ec0 	call	226ec <_fflush_r>
   20c2c:	103fb926 	beq	r2,zero,20b14 <__sfvwrite_r+0x344>
   20c30:	003f6506 	br	209c8 <__sfvwrite_r+0x1f8>
   20c34:	a809883a 	mov	r4,r21
   20c38:	0021ad00 	call	21ad0 <_realloc_r>
   20c3c:	102f883a 	mov	r23,r2
   20c40:	103fee1e 	bne	r2,zero,20bfc <__sfvwrite_r+0x42c>
   20c44:	81400417 	ldw	r5,16(r16)
   20c48:	a809883a 	mov	r4,r21
   20c4c:	002289c0 	call	2289c <_free_r>
   20c50:	8080030b 	ldhu	r2,12(r16)
   20c54:	00ffdfc4 	movi	r3,-129
   20c58:	1884703a 	and	r2,r3,r2
   20c5c:	00c00304 	movi	r3,12
   20c60:	a8c00015 	stw	r3,0(r21)
   20c64:	003f5906 	br	209cc <__sfvwrite_r+0x1fc>
   20c68:	94c00044 	addi	r19,r18,1
   20c6c:	02000044 	movi	r8,1
   20c70:	003f6006 	br	209f4 <__sfvwrite_r+0x224>
   20c74:	00bfffc4 	movi	r2,-1
   20c78:	003f0306 	br	20888 <__sfvwrite_r+0xb8>
   20c7c:	00800304 	movi	r2,12
   20c80:	a8800015 	stw	r2,0(r21)
   20c84:	8080030b 	ldhu	r2,12(r16)
   20c88:	003f5006 	br	209cc <__sfvwrite_r+0x1fc>

00020c8c <_fwalk>:
   20c8c:	defff704 	addi	sp,sp,-36
   20c90:	dd000415 	stw	r20,16(sp)
   20c94:	dfc00815 	stw	ra,32(sp)
   20c98:	ddc00715 	stw	r23,28(sp)
   20c9c:	dd800615 	stw	r22,24(sp)
   20ca0:	dd400515 	stw	r21,20(sp)
   20ca4:	dcc00315 	stw	r19,12(sp)
   20ca8:	dc800215 	stw	r18,8(sp)
   20cac:	dc400115 	stw	r17,4(sp)
   20cb0:	dc000015 	stw	r16,0(sp)
   20cb4:	2500b804 	addi	r20,r4,736
   20cb8:	a0002326 	beq	r20,zero,20d48 <_fwalk+0xbc>
   20cbc:	282b883a 	mov	r21,r5
   20cc0:	002f883a 	mov	r23,zero
   20cc4:	05800044 	movi	r22,1
   20cc8:	04ffffc4 	movi	r19,-1
   20ccc:	a4400117 	ldw	r17,4(r20)
   20cd0:	a4800217 	ldw	r18,8(r20)
   20cd4:	8c7fffc4 	addi	r17,r17,-1
   20cd8:	88000d16 	blt	r17,zero,20d10 <_fwalk+0x84>
   20cdc:	94000304 	addi	r16,r18,12
   20ce0:	94800384 	addi	r18,r18,14
   20ce4:	8080000b 	ldhu	r2,0(r16)
   20ce8:	8c7fffc4 	addi	r17,r17,-1
   20cec:	813ffd04 	addi	r4,r16,-12
   20cf0:	b080042e 	bgeu	r22,r2,20d04 <_fwalk+0x78>
   20cf4:	9080000f 	ldh	r2,0(r18)
   20cf8:	14c00226 	beq	r2,r19,20d04 <_fwalk+0x78>
   20cfc:	a83ee83a 	callr	r21
   20d00:	b8aeb03a 	or	r23,r23,r2
   20d04:	84001a04 	addi	r16,r16,104
   20d08:	94801a04 	addi	r18,r18,104
   20d0c:	8cfff51e 	bne	r17,r19,20ce4 <_fwalk+0x58>
   20d10:	a5000017 	ldw	r20,0(r20)
   20d14:	a03fed1e 	bne	r20,zero,20ccc <_fwalk+0x40>
   20d18:	b805883a 	mov	r2,r23
   20d1c:	dfc00817 	ldw	ra,32(sp)
   20d20:	ddc00717 	ldw	r23,28(sp)
   20d24:	dd800617 	ldw	r22,24(sp)
   20d28:	dd400517 	ldw	r21,20(sp)
   20d2c:	dd000417 	ldw	r20,16(sp)
   20d30:	dcc00317 	ldw	r19,12(sp)
   20d34:	dc800217 	ldw	r18,8(sp)
   20d38:	dc400117 	ldw	r17,4(sp)
   20d3c:	dc000017 	ldw	r16,0(sp)
   20d40:	dec00904 	addi	sp,sp,36
   20d44:	f800283a 	ret
   20d48:	002f883a 	mov	r23,zero
   20d4c:	003ff206 	br	20d18 <_fwalk+0x8c>

00020d50 <_fwalk_reent>:
   20d50:	defff704 	addi	sp,sp,-36
   20d54:	dd000415 	stw	r20,16(sp)
   20d58:	dfc00815 	stw	ra,32(sp)
   20d5c:	ddc00715 	stw	r23,28(sp)
   20d60:	dd800615 	stw	r22,24(sp)
   20d64:	dd400515 	stw	r21,20(sp)
   20d68:	dcc00315 	stw	r19,12(sp)
   20d6c:	dc800215 	stw	r18,8(sp)
   20d70:	dc400115 	stw	r17,4(sp)
   20d74:	dc000015 	stw	r16,0(sp)
   20d78:	2500b804 	addi	r20,r4,736
   20d7c:	a0002326 	beq	r20,zero,20e0c <_fwalk_reent+0xbc>
   20d80:	282b883a 	mov	r21,r5
   20d84:	2027883a 	mov	r19,r4
   20d88:	002f883a 	mov	r23,zero
   20d8c:	05800044 	movi	r22,1
   20d90:	04bfffc4 	movi	r18,-1
   20d94:	a4400117 	ldw	r17,4(r20)
   20d98:	a4000217 	ldw	r16,8(r20)
   20d9c:	8c7fffc4 	addi	r17,r17,-1
   20da0:	88000c16 	blt	r17,zero,20dd4 <_fwalk_reent+0x84>
   20da4:	84000304 	addi	r16,r16,12
   20da8:	8080000b 	ldhu	r2,0(r16)
   20dac:	8c7fffc4 	addi	r17,r17,-1
   20db0:	817ffd04 	addi	r5,r16,-12
   20db4:	b080052e 	bgeu	r22,r2,20dcc <_fwalk_reent+0x7c>
   20db8:	8080008f 	ldh	r2,2(r16)
   20dbc:	9809883a 	mov	r4,r19
   20dc0:	14800226 	beq	r2,r18,20dcc <_fwalk_reent+0x7c>
   20dc4:	a83ee83a 	callr	r21
   20dc8:	b8aeb03a 	or	r23,r23,r2
   20dcc:	84001a04 	addi	r16,r16,104
   20dd0:	8cbff51e 	bne	r17,r18,20da8 <_fwalk_reent+0x58>
   20dd4:	a5000017 	ldw	r20,0(r20)
   20dd8:	a03fee1e 	bne	r20,zero,20d94 <_fwalk_reent+0x44>
   20ddc:	b805883a 	mov	r2,r23
   20de0:	dfc00817 	ldw	ra,32(sp)
   20de4:	ddc00717 	ldw	r23,28(sp)
   20de8:	dd800617 	ldw	r22,24(sp)
   20dec:	dd400517 	ldw	r21,20(sp)
   20df0:	dd000417 	ldw	r20,16(sp)
   20df4:	dcc00317 	ldw	r19,12(sp)
   20df8:	dc800217 	ldw	r18,8(sp)
   20dfc:	dc400117 	ldw	r17,4(sp)
   20e00:	dc000017 	ldw	r16,0(sp)
   20e04:	dec00904 	addi	sp,sp,36
   20e08:	f800283a 	ret
   20e0c:	002f883a 	mov	r23,zero
   20e10:	003ff206 	br	20ddc <_fwalk_reent+0x8c>

00020e14 <_malloc_r>:
   20e14:	defff504 	addi	sp,sp,-44
   20e18:	dc800315 	stw	r18,12(sp)
   20e1c:	dfc00a15 	stw	ra,40(sp)
   20e20:	df000915 	stw	fp,36(sp)
   20e24:	ddc00815 	stw	r23,32(sp)
   20e28:	dd800715 	stw	r22,28(sp)
   20e2c:	dd400615 	stw	r21,24(sp)
   20e30:	dd000515 	stw	r20,20(sp)
   20e34:	dcc00415 	stw	r19,16(sp)
   20e38:	dc400215 	stw	r17,8(sp)
   20e3c:	dc000115 	stw	r16,4(sp)
   20e40:	288002c4 	addi	r2,r5,11
   20e44:	00c00584 	movi	r3,22
   20e48:	2025883a 	mov	r18,r4
   20e4c:	18807f2e 	bgeu	r3,r2,2104c <_malloc_r+0x238>
   20e50:	047ffe04 	movi	r17,-8
   20e54:	1462703a 	and	r17,r2,r17
   20e58:	8800a316 	blt	r17,zero,210e8 <_malloc_r+0x2d4>
   20e5c:	8940a236 	bltu	r17,r5,210e8 <_malloc_r+0x2d4>
   20e60:	00236080 	call	23608 <__malloc_lock>
   20e64:	00807dc4 	movi	r2,503
   20e68:	1441e92e 	bgeu	r2,r17,21610 <_malloc_r+0x7fc>
   20e6c:	8804d27a 	srli	r2,r17,9
   20e70:	1000a126 	beq	r2,zero,210f8 <_malloc_r+0x2e4>
   20e74:	00c00104 	movi	r3,4
   20e78:	18811e36 	bltu	r3,r2,212f4 <_malloc_r+0x4e0>
   20e7c:	8804d1ba 	srli	r2,r17,6
   20e80:	12000e44 	addi	r8,r2,57
   20e84:	11c00e04 	addi	r7,r2,56
   20e88:	4209883a 	add	r4,r8,r8
   20e8c:	04c000b4 	movhi	r19,2
   20e90:	2109883a 	add	r4,r4,r4
   20e94:	9cdc7004 	addi	r19,r19,29120
   20e98:	2109883a 	add	r4,r4,r4
   20e9c:	9909883a 	add	r4,r19,r4
   20ea0:	24000117 	ldw	r16,4(r4)
   20ea4:	213ffe04 	addi	r4,r4,-8
   20ea8:	24009726 	beq	r4,r16,21108 <_malloc_r+0x2f4>
   20eac:	80800117 	ldw	r2,4(r16)
   20eb0:	01bfff04 	movi	r6,-4
   20eb4:	014003c4 	movi	r5,15
   20eb8:	1184703a 	and	r2,r2,r6
   20ebc:	1447c83a 	sub	r3,r2,r17
   20ec0:	28c00716 	blt	r5,r3,20ee0 <_malloc_r+0xcc>
   20ec4:	1800920e 	bge	r3,zero,21110 <_malloc_r+0x2fc>
   20ec8:	84000317 	ldw	r16,12(r16)
   20ecc:	24008e26 	beq	r4,r16,21108 <_malloc_r+0x2f4>
   20ed0:	80800117 	ldw	r2,4(r16)
   20ed4:	1184703a 	and	r2,r2,r6
   20ed8:	1447c83a 	sub	r3,r2,r17
   20edc:	28fff90e 	bge	r5,r3,20ec4 <_malloc_r+0xb0>
   20ee0:	3809883a 	mov	r4,r7
   20ee4:	018000b4 	movhi	r6,2
   20ee8:	9c000417 	ldw	r16,16(r19)
   20eec:	319c7004 	addi	r6,r6,29120
   20ef0:	32000204 	addi	r8,r6,8
   20ef4:	82013426 	beq	r16,r8,213c8 <_malloc_r+0x5b4>
   20ef8:	80c00117 	ldw	r3,4(r16)
   20efc:	00bfff04 	movi	r2,-4
   20f00:	188e703a 	and	r7,r3,r2
   20f04:	3c45c83a 	sub	r2,r7,r17
   20f08:	00c003c4 	movi	r3,15
   20f0c:	18811f16 	blt	r3,r2,2138c <_malloc_r+0x578>
   20f10:	32000515 	stw	r8,20(r6)
   20f14:	32000415 	stw	r8,16(r6)
   20f18:	10007f0e 	bge	r2,zero,21118 <_malloc_r+0x304>
   20f1c:	00807fc4 	movi	r2,511
   20f20:	11c0fd36 	bltu	r2,r7,21318 <_malloc_r+0x504>
   20f24:	3806d0fa 	srli	r3,r7,3
   20f28:	01c00044 	movi	r7,1
   20f2c:	30800117 	ldw	r2,4(r6)
   20f30:	19400044 	addi	r5,r3,1
   20f34:	294b883a 	add	r5,r5,r5
   20f38:	1807d0ba 	srai	r3,r3,2
   20f3c:	294b883a 	add	r5,r5,r5
   20f40:	294b883a 	add	r5,r5,r5
   20f44:	298b883a 	add	r5,r5,r6
   20f48:	38c6983a 	sll	r3,r7,r3
   20f4c:	29c00017 	ldw	r7,0(r5)
   20f50:	2a7ffe04 	addi	r9,r5,-8
   20f54:	1886b03a 	or	r3,r3,r2
   20f58:	82400315 	stw	r9,12(r16)
   20f5c:	81c00215 	stw	r7,8(r16)
   20f60:	30c00115 	stw	r3,4(r6)
   20f64:	2c000015 	stw	r16,0(r5)
   20f68:	3c000315 	stw	r16,12(r7)
   20f6c:	2005d0ba 	srai	r2,r4,2
   20f70:	01400044 	movi	r5,1
   20f74:	288a983a 	sll	r5,r5,r2
   20f78:	19406f36 	bltu	r3,r5,21138 <_malloc_r+0x324>
   20f7c:	28c4703a 	and	r2,r5,r3
   20f80:	10000a1e 	bne	r2,zero,20fac <_malloc_r+0x198>
   20f84:	00bfff04 	movi	r2,-4
   20f88:	294b883a 	add	r5,r5,r5
   20f8c:	2088703a 	and	r4,r4,r2
   20f90:	28c4703a 	and	r2,r5,r3
   20f94:	21000104 	addi	r4,r4,4
   20f98:	1000041e 	bne	r2,zero,20fac <_malloc_r+0x198>
   20f9c:	294b883a 	add	r5,r5,r5
   20fa0:	28c4703a 	and	r2,r5,r3
   20fa4:	21000104 	addi	r4,r4,4
   20fa8:	103ffc26 	beq	r2,zero,20f9c <_malloc_r+0x188>
   20fac:	02bfff04 	movi	r10,-4
   20fb0:	024003c4 	movi	r9,15
   20fb4:	21800044 	addi	r6,r4,1
   20fb8:	318d883a 	add	r6,r6,r6
   20fbc:	318d883a 	add	r6,r6,r6
   20fc0:	318d883a 	add	r6,r6,r6
   20fc4:	998d883a 	add	r6,r19,r6
   20fc8:	333ffe04 	addi	r12,r6,-8
   20fcc:	2017883a 	mov	r11,r4
   20fd0:	31800104 	addi	r6,r6,4
   20fd4:	34000017 	ldw	r16,0(r6)
   20fd8:	31fffd04 	addi	r7,r6,-12
   20fdc:	81c0041e 	bne	r16,r7,20ff0 <_malloc_r+0x1dc>
   20fe0:	0000fb06 	br	213d0 <_malloc_r+0x5bc>
   20fe4:	1801030e 	bge	r3,zero,213f4 <_malloc_r+0x5e0>
   20fe8:	84000317 	ldw	r16,12(r16)
   20fec:	81c0f826 	beq	r16,r7,213d0 <_malloc_r+0x5bc>
   20ff0:	80800117 	ldw	r2,4(r16)
   20ff4:	1284703a 	and	r2,r2,r10
   20ff8:	1447c83a 	sub	r3,r2,r17
   20ffc:	48fff90e 	bge	r9,r3,20fe4 <_malloc_r+0x1d0>
   21000:	80800317 	ldw	r2,12(r16)
   21004:	81000217 	ldw	r4,8(r16)
   21008:	89400054 	ori	r5,r17,1
   2100c:	81400115 	stw	r5,4(r16)
   21010:	20800315 	stw	r2,12(r4)
   21014:	11000215 	stw	r4,8(r2)
   21018:	8463883a 	add	r17,r16,r17
   2101c:	9c400515 	stw	r17,20(r19)
   21020:	9c400415 	stw	r17,16(r19)
   21024:	18800054 	ori	r2,r3,1
   21028:	88800115 	stw	r2,4(r17)
   2102c:	8a000315 	stw	r8,12(r17)
   21030:	8a000215 	stw	r8,8(r17)
   21034:	88e3883a 	add	r17,r17,r3
   21038:	88c00015 	stw	r3,0(r17)
   2103c:	9009883a 	mov	r4,r18
   21040:	002362c0 	call	2362c <__malloc_unlock>
   21044:	80800204 	addi	r2,r16,8
   21048:	00001b06 	br	210b8 <_malloc_r+0x2a4>
   2104c:	04400404 	movi	r17,16
   21050:	89402536 	bltu	r17,r5,210e8 <_malloc_r+0x2d4>
   21054:	00236080 	call	23608 <__malloc_lock>
   21058:	00800184 	movi	r2,6
   2105c:	01000084 	movi	r4,2
   21060:	04c000b4 	movhi	r19,2
   21064:	1085883a 	add	r2,r2,r2
   21068:	9cdc7004 	addi	r19,r19,29120
   2106c:	1085883a 	add	r2,r2,r2
   21070:	9885883a 	add	r2,r19,r2
   21074:	14000117 	ldw	r16,4(r2)
   21078:	10fffe04 	addi	r3,r2,-8
   2107c:	80c0d926 	beq	r16,r3,213e4 <_malloc_r+0x5d0>
   21080:	80c00117 	ldw	r3,4(r16)
   21084:	81000317 	ldw	r4,12(r16)
   21088:	00bfff04 	movi	r2,-4
   2108c:	1884703a 	and	r2,r3,r2
   21090:	81400217 	ldw	r5,8(r16)
   21094:	8085883a 	add	r2,r16,r2
   21098:	10c00117 	ldw	r3,4(r2)
   2109c:	29000315 	stw	r4,12(r5)
   210a0:	21400215 	stw	r5,8(r4)
   210a4:	18c00054 	ori	r3,r3,1
   210a8:	10c00115 	stw	r3,4(r2)
   210ac:	9009883a 	mov	r4,r18
   210b0:	002362c0 	call	2362c <__malloc_unlock>
   210b4:	80800204 	addi	r2,r16,8
   210b8:	dfc00a17 	ldw	ra,40(sp)
   210bc:	df000917 	ldw	fp,36(sp)
   210c0:	ddc00817 	ldw	r23,32(sp)
   210c4:	dd800717 	ldw	r22,28(sp)
   210c8:	dd400617 	ldw	r21,24(sp)
   210cc:	dd000517 	ldw	r20,20(sp)
   210d0:	dcc00417 	ldw	r19,16(sp)
   210d4:	dc800317 	ldw	r18,12(sp)
   210d8:	dc400217 	ldw	r17,8(sp)
   210dc:	dc000117 	ldw	r16,4(sp)
   210e0:	dec00b04 	addi	sp,sp,44
   210e4:	f800283a 	ret
   210e8:	00800304 	movi	r2,12
   210ec:	90800015 	stw	r2,0(r18)
   210f0:	0005883a 	mov	r2,zero
   210f4:	003ff006 	br	210b8 <_malloc_r+0x2a4>
   210f8:	01002004 	movi	r4,128
   210fc:	02001004 	movi	r8,64
   21100:	01c00fc4 	movi	r7,63
   21104:	003f6106 	br	20e8c <_malloc_r+0x78>
   21108:	4009883a 	mov	r4,r8
   2110c:	003f7506 	br	20ee4 <_malloc_r+0xd0>
   21110:	81000317 	ldw	r4,12(r16)
   21114:	003fde06 	br	21090 <_malloc_r+0x27c>
   21118:	81c5883a 	add	r2,r16,r7
   2111c:	11400117 	ldw	r5,4(r2)
   21120:	9009883a 	mov	r4,r18
   21124:	29400054 	ori	r5,r5,1
   21128:	11400115 	stw	r5,4(r2)
   2112c:	002362c0 	call	2362c <__malloc_unlock>
   21130:	80800204 	addi	r2,r16,8
   21134:	003fe006 	br	210b8 <_malloc_r+0x2a4>
   21138:	9c000217 	ldw	r16,8(r19)
   2113c:	00bfff04 	movi	r2,-4
   21140:	85800117 	ldw	r22,4(r16)
   21144:	b0ac703a 	and	r22,r22,r2
   21148:	b4400336 	bltu	r22,r17,21158 <_malloc_r+0x344>
   2114c:	b445c83a 	sub	r2,r22,r17
   21150:	00c003c4 	movi	r3,15
   21154:	18805d16 	blt	r3,r2,212cc <_malloc_r+0x4b8>
   21158:	05c000f4 	movhi	r23,3
   2115c:	008000f4 	movhi	r2,3
   21160:	10a93504 	addi	r2,r2,-23340
   21164:	bde23d04 	addi	r23,r23,-30476
   21168:	15400017 	ldw	r21,0(r2)
   2116c:	b8c00017 	ldw	r3,0(r23)
   21170:	00bfffc4 	movi	r2,-1
   21174:	858d883a 	add	r6,r16,r22
   21178:	8d6b883a 	add	r21,r17,r21
   2117c:	1880ea26 	beq	r3,r2,21528 <_malloc_r+0x714>
   21180:	ad4403c4 	addi	r21,r21,4111
   21184:	00bc0004 	movi	r2,-4096
   21188:	a8aa703a 	and	r21,r21,r2
   2118c:	a80b883a 	mov	r5,r21
   21190:	9009883a 	mov	r4,r18
   21194:	d9800015 	stw	r6,0(sp)
   21198:	00220340 	call	22034 <_sbrk_r>
   2119c:	1029883a 	mov	r20,r2
   211a0:	00bfffc4 	movi	r2,-1
   211a4:	d9800017 	ldw	r6,0(sp)
   211a8:	a080e826 	beq	r20,r2,2154c <_malloc_r+0x738>
   211ac:	a180a636 	bltu	r20,r6,21448 <_malloc_r+0x634>
   211b0:	070000f4 	movhi	fp,3
   211b4:	e7293e04 	addi	fp,fp,-23304
   211b8:	e0800017 	ldw	r2,0(fp)
   211bc:	a887883a 	add	r3,r21,r2
   211c0:	e0c00015 	stw	r3,0(fp)
   211c4:	3500e626 	beq	r6,r20,21560 <_malloc_r+0x74c>
   211c8:	b9000017 	ldw	r4,0(r23)
   211cc:	00bfffc4 	movi	r2,-1
   211d0:	2080ee26 	beq	r4,r2,2158c <_malloc_r+0x778>
   211d4:	a185c83a 	sub	r2,r20,r6
   211d8:	10c5883a 	add	r2,r2,r3
   211dc:	e0800015 	stw	r2,0(fp)
   211e0:	a0c001cc 	andi	r3,r20,7
   211e4:	1800bc26 	beq	r3,zero,214d8 <_malloc_r+0x6c4>
   211e8:	a0e9c83a 	sub	r20,r20,r3
   211ec:	00840204 	movi	r2,4104
   211f0:	a5000204 	addi	r20,r20,8
   211f4:	10c7c83a 	sub	r3,r2,r3
   211f8:	a545883a 	add	r2,r20,r21
   211fc:	1083ffcc 	andi	r2,r2,4095
   21200:	18abc83a 	sub	r21,r3,r2
   21204:	a80b883a 	mov	r5,r21
   21208:	9009883a 	mov	r4,r18
   2120c:	00220340 	call	22034 <_sbrk_r>
   21210:	00ffffc4 	movi	r3,-1
   21214:	10c0e126 	beq	r2,r3,2159c <_malloc_r+0x788>
   21218:	1505c83a 	sub	r2,r2,r20
   2121c:	1545883a 	add	r2,r2,r21
   21220:	10800054 	ori	r2,r2,1
   21224:	e0c00017 	ldw	r3,0(fp)
   21228:	9d000215 	stw	r20,8(r19)
   2122c:	a0800115 	stw	r2,4(r20)
   21230:	a8c7883a 	add	r3,r21,r3
   21234:	e0c00015 	stw	r3,0(fp)
   21238:	84c00e26 	beq	r16,r19,21274 <_malloc_r+0x460>
   2123c:	018003c4 	movi	r6,15
   21240:	3580a72e 	bgeu	r6,r22,214e0 <_malloc_r+0x6cc>
   21244:	81400117 	ldw	r5,4(r16)
   21248:	013ffe04 	movi	r4,-8
   2124c:	b0bffd04 	addi	r2,r22,-12
   21250:	1104703a 	and	r2,r2,r4
   21254:	2900004c 	andi	r4,r5,1
   21258:	2088b03a 	or	r4,r4,r2
   2125c:	81000115 	stw	r4,4(r16)
   21260:	01400144 	movi	r5,5
   21264:	8089883a 	add	r4,r16,r2
   21268:	21400115 	stw	r5,4(r4)
   2126c:	21400215 	stw	r5,8(r4)
   21270:	3080cd36 	bltu	r6,r2,215a8 <_malloc_r+0x794>
   21274:	008000f4 	movhi	r2,3
   21278:	10a93404 	addi	r2,r2,-23344
   2127c:	11000017 	ldw	r4,0(r2)
   21280:	20c0012e 	bgeu	r4,r3,21288 <_malloc_r+0x474>
   21284:	10c00015 	stw	r3,0(r2)
   21288:	008000f4 	movhi	r2,3
   2128c:	10a93304 	addi	r2,r2,-23348
   21290:	11000017 	ldw	r4,0(r2)
   21294:	9c000217 	ldw	r16,8(r19)
   21298:	20c0012e 	bgeu	r4,r3,212a0 <_malloc_r+0x48c>
   2129c:	10c00015 	stw	r3,0(r2)
   212a0:	80c00117 	ldw	r3,4(r16)
   212a4:	00bfff04 	movi	r2,-4
   212a8:	1886703a 	and	r3,r3,r2
   212ac:	1c45c83a 	sub	r2,r3,r17
   212b0:	1c400236 	bltu	r3,r17,212bc <_malloc_r+0x4a8>
   212b4:	00c003c4 	movi	r3,15
   212b8:	18800416 	blt	r3,r2,212cc <_malloc_r+0x4b8>
   212bc:	9009883a 	mov	r4,r18
   212c0:	002362c0 	call	2362c <__malloc_unlock>
   212c4:	0005883a 	mov	r2,zero
   212c8:	003f7b06 	br	210b8 <_malloc_r+0x2a4>
   212cc:	88c00054 	ori	r3,r17,1
   212d0:	80c00115 	stw	r3,4(r16)
   212d4:	8463883a 	add	r17,r16,r17
   212d8:	10800054 	ori	r2,r2,1
   212dc:	9c400215 	stw	r17,8(r19)
   212e0:	88800115 	stw	r2,4(r17)
   212e4:	9009883a 	mov	r4,r18
   212e8:	002362c0 	call	2362c <__malloc_unlock>
   212ec:	80800204 	addi	r2,r16,8
   212f0:	003f7106 	br	210b8 <_malloc_r+0x2a4>
   212f4:	00c00504 	movi	r3,20
   212f8:	18804a2e 	bgeu	r3,r2,21424 <_malloc_r+0x610>
   212fc:	00c01504 	movi	r3,84
   21300:	18806e36 	bltu	r3,r2,214bc <_malloc_r+0x6a8>
   21304:	8804d33a 	srli	r2,r17,12
   21308:	12001bc4 	addi	r8,r2,111
   2130c:	11c01b84 	addi	r7,r2,110
   21310:	4209883a 	add	r4,r8,r8
   21314:	003edd06 	br	20e8c <_malloc_r+0x78>
   21318:	3804d27a 	srli	r2,r7,9
   2131c:	00c00104 	movi	r3,4
   21320:	1880442e 	bgeu	r3,r2,21434 <_malloc_r+0x620>
   21324:	00c00504 	movi	r3,20
   21328:	18808136 	bltu	r3,r2,21530 <_malloc_r+0x71c>
   2132c:	11401704 	addi	r5,r2,92
   21330:	10c016c4 	addi	r3,r2,91
   21334:	294b883a 	add	r5,r5,r5
   21338:	294b883a 	add	r5,r5,r5
   2133c:	294b883a 	add	r5,r5,r5
   21340:	994b883a 	add	r5,r19,r5
   21344:	28800017 	ldw	r2,0(r5)
   21348:	018000b4 	movhi	r6,2
   2134c:	297ffe04 	addi	r5,r5,-8
   21350:	319c7004 	addi	r6,r6,29120
   21354:	28806526 	beq	r5,r2,214ec <_malloc_r+0x6d8>
   21358:	01bfff04 	movi	r6,-4
   2135c:	10c00117 	ldw	r3,4(r2)
   21360:	1986703a 	and	r3,r3,r6
   21364:	38c0022e 	bgeu	r7,r3,21370 <_malloc_r+0x55c>
   21368:	10800217 	ldw	r2,8(r2)
   2136c:	28bffb1e 	bne	r5,r2,2135c <_malloc_r+0x548>
   21370:	11400317 	ldw	r5,12(r2)
   21374:	98c00117 	ldw	r3,4(r19)
   21378:	81400315 	stw	r5,12(r16)
   2137c:	80800215 	stw	r2,8(r16)
   21380:	2c000215 	stw	r16,8(r5)
   21384:	14000315 	stw	r16,12(r2)
   21388:	003ef806 	br	20f6c <_malloc_r+0x158>
   2138c:	88c00054 	ori	r3,r17,1
   21390:	80c00115 	stw	r3,4(r16)
   21394:	8463883a 	add	r17,r16,r17
   21398:	34400515 	stw	r17,20(r6)
   2139c:	34400415 	stw	r17,16(r6)
   213a0:	10c00054 	ori	r3,r2,1
   213a4:	8a000315 	stw	r8,12(r17)
   213a8:	8a000215 	stw	r8,8(r17)
   213ac:	88c00115 	stw	r3,4(r17)
   213b0:	88a3883a 	add	r17,r17,r2
   213b4:	88800015 	stw	r2,0(r17)
   213b8:	9009883a 	mov	r4,r18
   213bc:	002362c0 	call	2362c <__malloc_unlock>
   213c0:	80800204 	addi	r2,r16,8
   213c4:	003f3c06 	br	210b8 <_malloc_r+0x2a4>
   213c8:	30c00117 	ldw	r3,4(r6)
   213cc:	003ee706 	br	20f6c <_malloc_r+0x158>
   213d0:	5ac00044 	addi	r11,r11,1
   213d4:	588000cc 	andi	r2,r11,3
   213d8:	31800204 	addi	r6,r6,8
   213dc:	103efd1e 	bne	r2,zero,20fd4 <_malloc_r+0x1c0>
   213e0:	00002406 	br	21474 <_malloc_r+0x660>
   213e4:	14000317 	ldw	r16,12(r2)
   213e8:	143f251e 	bne	r2,r16,21080 <_malloc_r+0x26c>
   213ec:	21000084 	addi	r4,r4,2
   213f0:	003ebc06 	br	20ee4 <_malloc_r+0xd0>
   213f4:	8085883a 	add	r2,r16,r2
   213f8:	10c00117 	ldw	r3,4(r2)
   213fc:	81000317 	ldw	r4,12(r16)
   21400:	81400217 	ldw	r5,8(r16)
   21404:	18c00054 	ori	r3,r3,1
   21408:	10c00115 	stw	r3,4(r2)
   2140c:	29000315 	stw	r4,12(r5)
   21410:	21400215 	stw	r5,8(r4)
   21414:	9009883a 	mov	r4,r18
   21418:	002362c0 	call	2362c <__malloc_unlock>
   2141c:	80800204 	addi	r2,r16,8
   21420:	003f2506 	br	210b8 <_malloc_r+0x2a4>
   21424:	12001704 	addi	r8,r2,92
   21428:	11c016c4 	addi	r7,r2,91
   2142c:	4209883a 	add	r4,r8,r8
   21430:	003e9606 	br	20e8c <_malloc_r+0x78>
   21434:	3804d1ba 	srli	r2,r7,6
   21438:	11400e44 	addi	r5,r2,57
   2143c:	10c00e04 	addi	r3,r2,56
   21440:	294b883a 	add	r5,r5,r5
   21444:	003fbc06 	br	21338 <_malloc_r+0x524>
   21448:	84ff5926 	beq	r16,r19,211b0 <_malloc_r+0x39c>
   2144c:	008000b4 	movhi	r2,2
   21450:	109c7004 	addi	r2,r2,29120
   21454:	14000217 	ldw	r16,8(r2)
   21458:	00bfff04 	movi	r2,-4
   2145c:	80c00117 	ldw	r3,4(r16)
   21460:	1886703a 	and	r3,r3,r2
   21464:	003f9106 	br	212ac <_malloc_r+0x498>
   21468:	60800217 	ldw	r2,8(r12)
   2146c:	213fffc4 	addi	r4,r4,-1
   21470:	1300651e 	bne	r2,r12,21608 <_malloc_r+0x7f4>
   21474:	208000cc 	andi	r2,r4,3
   21478:	633ffe04 	addi	r12,r12,-8
   2147c:	103ffa1e 	bne	r2,zero,21468 <_malloc_r+0x654>
   21480:	98800117 	ldw	r2,4(r19)
   21484:	0146303a 	nor	r3,zero,r5
   21488:	1884703a 	and	r2,r3,r2
   2148c:	98800115 	stw	r2,4(r19)
   21490:	294b883a 	add	r5,r5,r5
   21494:	117f2836 	bltu	r2,r5,21138 <_malloc_r+0x324>
   21498:	283f2726 	beq	r5,zero,21138 <_malloc_r+0x324>
   2149c:	2886703a 	and	r3,r5,r2
   214a0:	5809883a 	mov	r4,r11
   214a4:	183ec31e 	bne	r3,zero,20fb4 <_malloc_r+0x1a0>
   214a8:	294b883a 	add	r5,r5,r5
   214ac:	2886703a 	and	r3,r5,r2
   214b0:	21000104 	addi	r4,r4,4
   214b4:	183ffc26 	beq	r3,zero,214a8 <_malloc_r+0x694>
   214b8:	003ebe06 	br	20fb4 <_malloc_r+0x1a0>
   214bc:	00c05504 	movi	r3,340
   214c0:	18801236 	bltu	r3,r2,2150c <_malloc_r+0x6f8>
   214c4:	8804d3fa 	srli	r2,r17,15
   214c8:	12001e04 	addi	r8,r2,120
   214cc:	11c01dc4 	addi	r7,r2,119
   214d0:	4209883a 	add	r4,r8,r8
   214d4:	003e6d06 	br	20e8c <_malloc_r+0x78>
   214d8:	00c40004 	movi	r3,4096
   214dc:	003f4606 	br	211f8 <_malloc_r+0x3e4>
   214e0:	00800044 	movi	r2,1
   214e4:	a0800115 	stw	r2,4(r20)
   214e8:	003f7406 	br	212bc <_malloc_r+0x4a8>
   214ec:	1805d0ba 	srai	r2,r3,2
   214f0:	01c00044 	movi	r7,1
   214f4:	30c00117 	ldw	r3,4(r6)
   214f8:	388e983a 	sll	r7,r7,r2
   214fc:	2805883a 	mov	r2,r5
   21500:	38c6b03a 	or	r3,r7,r3
   21504:	30c00115 	stw	r3,4(r6)
   21508:	003f9b06 	br	21378 <_malloc_r+0x564>
   2150c:	00c15504 	movi	r3,1364
   21510:	18801a36 	bltu	r3,r2,2157c <_malloc_r+0x768>
   21514:	8804d4ba 	srli	r2,r17,18
   21518:	12001f44 	addi	r8,r2,125
   2151c:	11c01f04 	addi	r7,r2,124
   21520:	4209883a 	add	r4,r8,r8
   21524:	003e5906 	br	20e8c <_malloc_r+0x78>
   21528:	ad400404 	addi	r21,r21,16
   2152c:	003f1706 	br	2118c <_malloc_r+0x378>
   21530:	00c01504 	movi	r3,84
   21534:	18802336 	bltu	r3,r2,215c4 <_malloc_r+0x7b0>
   21538:	3804d33a 	srli	r2,r7,12
   2153c:	11401bc4 	addi	r5,r2,111
   21540:	10c01b84 	addi	r3,r2,110
   21544:	294b883a 	add	r5,r5,r5
   21548:	003f7b06 	br	21338 <_malloc_r+0x524>
   2154c:	9c000217 	ldw	r16,8(r19)
   21550:	00bfff04 	movi	r2,-4
   21554:	80c00117 	ldw	r3,4(r16)
   21558:	1886703a 	and	r3,r3,r2
   2155c:	003f5306 	br	212ac <_malloc_r+0x498>
   21560:	3083ffcc 	andi	r2,r6,4095
   21564:	103f181e 	bne	r2,zero,211c8 <_malloc_r+0x3b4>
   21568:	99000217 	ldw	r4,8(r19)
   2156c:	b545883a 	add	r2,r22,r21
   21570:	10800054 	ori	r2,r2,1
   21574:	20800115 	stw	r2,4(r4)
   21578:	003f3e06 	br	21274 <_malloc_r+0x460>
   2157c:	01003f84 	movi	r4,254
   21580:	02001fc4 	movi	r8,127
   21584:	01c01f84 	movi	r7,126
   21588:	003e4006 	br	20e8c <_malloc_r+0x78>
   2158c:	008000f4 	movhi	r2,3
   21590:	10a23d04 	addi	r2,r2,-30476
   21594:	15000015 	stw	r20,0(r2)
   21598:	003f1106 	br	211e0 <_malloc_r+0x3cc>
   2159c:	00800044 	movi	r2,1
   215a0:	002b883a 	mov	r21,zero
   215a4:	003f1f06 	br	21224 <_malloc_r+0x410>
   215a8:	81400204 	addi	r5,r16,8
   215ac:	9009883a 	mov	r4,r18
   215b0:	002289c0 	call	2289c <_free_r>
   215b4:	008000f4 	movhi	r2,3
   215b8:	10a93e04 	addi	r2,r2,-23304
   215bc:	10c00017 	ldw	r3,0(r2)
   215c0:	003f2c06 	br	21274 <_malloc_r+0x460>
   215c4:	00c05504 	movi	r3,340
   215c8:	18800536 	bltu	r3,r2,215e0 <_malloc_r+0x7cc>
   215cc:	3804d3fa 	srli	r2,r7,15
   215d0:	11401e04 	addi	r5,r2,120
   215d4:	10c01dc4 	addi	r3,r2,119
   215d8:	294b883a 	add	r5,r5,r5
   215dc:	003f5606 	br	21338 <_malloc_r+0x524>
   215e0:	00c15504 	movi	r3,1364
   215e4:	18800536 	bltu	r3,r2,215fc <_malloc_r+0x7e8>
   215e8:	3804d4ba 	srli	r2,r7,18
   215ec:	11401f44 	addi	r5,r2,125
   215f0:	10c01f04 	addi	r3,r2,124
   215f4:	294b883a 	add	r5,r5,r5
   215f8:	003f4f06 	br	21338 <_malloc_r+0x524>
   215fc:	01403f84 	movi	r5,254
   21600:	00c01f84 	movi	r3,126
   21604:	003f4c06 	br	21338 <_malloc_r+0x524>
   21608:	98800117 	ldw	r2,4(r19)
   2160c:	003fa006 	br	21490 <_malloc_r+0x67c>
   21610:	8808d0fa 	srli	r4,r17,3
   21614:	20800044 	addi	r2,r4,1
   21618:	1085883a 	add	r2,r2,r2
   2161c:	003e9006 	br	21060 <_malloc_r+0x24c>

00021620 <memchr>:
   21620:	208000cc 	andi	r2,r4,3
   21624:	280f883a 	mov	r7,r5
   21628:	10003426 	beq	r2,zero,216fc <memchr+0xdc>
   2162c:	30bfffc4 	addi	r2,r6,-1
   21630:	30001a26 	beq	r6,zero,2169c <memchr+0x7c>
   21634:	20c00003 	ldbu	r3,0(r4)
   21638:	29803fcc 	andi	r6,r5,255
   2163c:	30c0051e 	bne	r6,r3,21654 <memchr+0x34>
   21640:	00001806 	br	216a4 <memchr+0x84>
   21644:	10001526 	beq	r2,zero,2169c <memchr+0x7c>
   21648:	20c00003 	ldbu	r3,0(r4)
   2164c:	10bfffc4 	addi	r2,r2,-1
   21650:	30c01426 	beq	r6,r3,216a4 <memchr+0x84>
   21654:	21000044 	addi	r4,r4,1
   21658:	20c000cc 	andi	r3,r4,3
   2165c:	183ff91e 	bne	r3,zero,21644 <memchr+0x24>
   21660:	020000c4 	movi	r8,3
   21664:	40801136 	bltu	r8,r2,216ac <memchr+0x8c>
   21668:	10000c26 	beq	r2,zero,2169c <memchr+0x7c>
   2166c:	20c00003 	ldbu	r3,0(r4)
   21670:	29403fcc 	andi	r5,r5,255
   21674:	28c00b26 	beq	r5,r3,216a4 <memchr+0x84>
   21678:	20c00044 	addi	r3,r4,1
   2167c:	39803fcc 	andi	r6,r7,255
   21680:	2089883a 	add	r4,r4,r2
   21684:	00000306 	br	21694 <memchr+0x74>
   21688:	18c00044 	addi	r3,r3,1
   2168c:	197fffc3 	ldbu	r5,-1(r3)
   21690:	31400526 	beq	r6,r5,216a8 <memchr+0x88>
   21694:	1805883a 	mov	r2,r3
   21698:	20fffb1e 	bne	r4,r3,21688 <memchr+0x68>
   2169c:	0005883a 	mov	r2,zero
   216a0:	f800283a 	ret
   216a4:	2005883a 	mov	r2,r4
   216a8:	f800283a 	ret
   216ac:	28c03fcc 	andi	r3,r5,255
   216b0:	1812923a 	slli	r9,r3,8
   216b4:	02ffbff4 	movhi	r11,65279
   216b8:	02a02074 	movhi	r10,32897
   216bc:	48d2b03a 	or	r9,r9,r3
   216c0:	4806943a 	slli	r3,r9,16
   216c4:	5affbfc4 	addi	r11,r11,-257
   216c8:	52a02004 	addi	r10,r10,-32640
   216cc:	48d2b03a 	or	r9,r9,r3
   216d0:	20c00017 	ldw	r3,0(r4)
   216d4:	48c6f03a 	xor	r3,r9,r3
   216d8:	1acd883a 	add	r6,r3,r11
   216dc:	00c6303a 	nor	r3,zero,r3
   216e0:	30c6703a 	and	r3,r6,r3
   216e4:	1a86703a 	and	r3,r3,r10
   216e8:	183fe01e 	bne	r3,zero,2166c <memchr+0x4c>
   216ec:	10bfff04 	addi	r2,r2,-4
   216f0:	21000104 	addi	r4,r4,4
   216f4:	40bff636 	bltu	r8,r2,216d0 <memchr+0xb0>
   216f8:	003fdb06 	br	21668 <memchr+0x48>
   216fc:	3005883a 	mov	r2,r6
   21700:	003fd706 	br	21660 <memchr+0x40>

00021704 <memcpy>:
   21704:	defffd04 	addi	sp,sp,-12
   21708:	dfc00215 	stw	ra,8(sp)
   2170c:	dc400115 	stw	r17,4(sp)
   21710:	dc000015 	stw	r16,0(sp)
   21714:	00c003c4 	movi	r3,15
   21718:	2005883a 	mov	r2,r4
   2171c:	1980452e 	bgeu	r3,r6,21834 <memcpy+0x130>
   21720:	2906b03a 	or	r3,r5,r4
   21724:	18c000cc 	andi	r3,r3,3
   21728:	1800441e 	bne	r3,zero,2183c <memcpy+0x138>
   2172c:	347ffc04 	addi	r17,r6,-16
   21730:	8822d13a 	srli	r17,r17,4
   21734:	28c00104 	addi	r3,r5,4
   21738:	23400104 	addi	r13,r4,4
   2173c:	8820913a 	slli	r16,r17,4
   21740:	2b000204 	addi	r12,r5,8
   21744:	22c00204 	addi	r11,r4,8
   21748:	84000504 	addi	r16,r16,20
   2174c:	2a800304 	addi	r10,r5,12
   21750:	22400304 	addi	r9,r4,12
   21754:	2c21883a 	add	r16,r5,r16
   21758:	2811883a 	mov	r8,r5
   2175c:	200f883a 	mov	r7,r4
   21760:	41000017 	ldw	r4,0(r8)
   21764:	1fc00017 	ldw	ra,0(r3)
   21768:	63c00017 	ldw	r15,0(r12)
   2176c:	39000015 	stw	r4,0(r7)
   21770:	53800017 	ldw	r14,0(r10)
   21774:	6fc00015 	stw	ra,0(r13)
   21778:	5bc00015 	stw	r15,0(r11)
   2177c:	4b800015 	stw	r14,0(r9)
   21780:	18c00404 	addi	r3,r3,16
   21784:	39c00404 	addi	r7,r7,16
   21788:	42000404 	addi	r8,r8,16
   2178c:	6b400404 	addi	r13,r13,16
   21790:	63000404 	addi	r12,r12,16
   21794:	5ac00404 	addi	r11,r11,16
   21798:	52800404 	addi	r10,r10,16
   2179c:	4a400404 	addi	r9,r9,16
   217a0:	1c3fef1e 	bne	r3,r16,21760 <memcpy+0x5c>
   217a4:	89c00044 	addi	r7,r17,1
   217a8:	380e913a 	slli	r7,r7,4
   217ac:	310003cc 	andi	r4,r6,15
   217b0:	02c000c4 	movi	r11,3
   217b4:	11c7883a 	add	r3,r2,r7
   217b8:	29cb883a 	add	r5,r5,r7
   217bc:	5900212e 	bgeu	r11,r4,21844 <memcpy+0x140>
   217c0:	1813883a 	mov	r9,r3
   217c4:	2811883a 	mov	r8,r5
   217c8:	200f883a 	mov	r7,r4
   217cc:	42800017 	ldw	r10,0(r8)
   217d0:	4a400104 	addi	r9,r9,4
   217d4:	39ffff04 	addi	r7,r7,-4
   217d8:	4abfff15 	stw	r10,-4(r9)
   217dc:	42000104 	addi	r8,r8,4
   217e0:	59fffa36 	bltu	r11,r7,217cc <memcpy+0xc8>
   217e4:	213fff04 	addi	r4,r4,-4
   217e8:	2008d0ba 	srli	r4,r4,2
   217ec:	318000cc 	andi	r6,r6,3
   217f0:	21000044 	addi	r4,r4,1
   217f4:	2109883a 	add	r4,r4,r4
   217f8:	2109883a 	add	r4,r4,r4
   217fc:	1907883a 	add	r3,r3,r4
   21800:	290b883a 	add	r5,r5,r4
   21804:	30000626 	beq	r6,zero,21820 <memcpy+0x11c>
   21808:	198d883a 	add	r6,r3,r6
   2180c:	29c00003 	ldbu	r7,0(r5)
   21810:	18c00044 	addi	r3,r3,1
   21814:	29400044 	addi	r5,r5,1
   21818:	19ffffc5 	stb	r7,-1(r3)
   2181c:	19bffb1e 	bne	r3,r6,2180c <memcpy+0x108>
   21820:	dfc00217 	ldw	ra,8(sp)
   21824:	dc400117 	ldw	r17,4(sp)
   21828:	dc000017 	ldw	r16,0(sp)
   2182c:	dec00304 	addi	sp,sp,12
   21830:	f800283a 	ret
   21834:	2007883a 	mov	r3,r4
   21838:	003ff206 	br	21804 <memcpy+0x100>
   2183c:	2007883a 	mov	r3,r4
   21840:	003ff106 	br	21808 <memcpy+0x104>
   21844:	200d883a 	mov	r6,r4
   21848:	003fee06 	br	21804 <memcpy+0x100>

0002184c <memmove>:
   2184c:	2005883a 	mov	r2,r4
   21850:	29000b2e 	bgeu	r5,r4,21880 <memmove+0x34>
   21854:	298f883a 	add	r7,r5,r6
   21858:	21c0092e 	bgeu	r4,r7,21880 <memmove+0x34>
   2185c:	2187883a 	add	r3,r4,r6
   21860:	198bc83a 	sub	r5,r3,r6
   21864:	30004826 	beq	r6,zero,21988 <memmove+0x13c>
   21868:	39ffffc4 	addi	r7,r7,-1
   2186c:	39000003 	ldbu	r4,0(r7)
   21870:	18ffffc4 	addi	r3,r3,-1
   21874:	19000005 	stb	r4,0(r3)
   21878:	28fffb1e 	bne	r5,r3,21868 <memmove+0x1c>
   2187c:	f800283a 	ret
   21880:	00c003c4 	movi	r3,15
   21884:	1980412e 	bgeu	r3,r6,2198c <memmove+0x140>
   21888:	2886b03a 	or	r3,r5,r2
   2188c:	18c000cc 	andi	r3,r3,3
   21890:	1800401e 	bne	r3,zero,21994 <memmove+0x148>
   21894:	33fffc04 	addi	r15,r6,-16
   21898:	781ed13a 	srli	r15,r15,4
   2189c:	28c00104 	addi	r3,r5,4
   218a0:	13400104 	addi	r13,r2,4
   218a4:	781c913a 	slli	r14,r15,4
   218a8:	2b000204 	addi	r12,r5,8
   218ac:	12c00204 	addi	r11,r2,8
   218b0:	73800504 	addi	r14,r14,20
   218b4:	2a800304 	addi	r10,r5,12
   218b8:	12400304 	addi	r9,r2,12
   218bc:	2b9d883a 	add	r14,r5,r14
   218c0:	2811883a 	mov	r8,r5
   218c4:	100f883a 	mov	r7,r2
   218c8:	41000017 	ldw	r4,0(r8)
   218cc:	39c00404 	addi	r7,r7,16
   218d0:	18c00404 	addi	r3,r3,16
   218d4:	393ffc15 	stw	r4,-16(r7)
   218d8:	193ffc17 	ldw	r4,-16(r3)
   218dc:	6b400404 	addi	r13,r13,16
   218e0:	5ac00404 	addi	r11,r11,16
   218e4:	693ffc15 	stw	r4,-16(r13)
   218e8:	61000017 	ldw	r4,0(r12)
   218ec:	4a400404 	addi	r9,r9,16
   218f0:	42000404 	addi	r8,r8,16
   218f4:	593ffc15 	stw	r4,-16(r11)
   218f8:	51000017 	ldw	r4,0(r10)
   218fc:	63000404 	addi	r12,r12,16
   21900:	52800404 	addi	r10,r10,16
   21904:	493ffc15 	stw	r4,-16(r9)
   21908:	1bbfef1e 	bne	r3,r14,218c8 <memmove+0x7c>
   2190c:	79000044 	addi	r4,r15,1
   21910:	2008913a 	slli	r4,r4,4
   21914:	328003cc 	andi	r10,r6,15
   21918:	02c000c4 	movi	r11,3
   2191c:	1107883a 	add	r3,r2,r4
   21920:	290b883a 	add	r5,r5,r4
   21924:	5a801e2e 	bgeu	r11,r10,219a0 <memmove+0x154>
   21928:	1813883a 	mov	r9,r3
   2192c:	2811883a 	mov	r8,r5
   21930:	500f883a 	mov	r7,r10
   21934:	41000017 	ldw	r4,0(r8)
   21938:	4a400104 	addi	r9,r9,4
   2193c:	39ffff04 	addi	r7,r7,-4
   21940:	493fff15 	stw	r4,-4(r9)
   21944:	42000104 	addi	r8,r8,4
   21948:	59fffa36 	bltu	r11,r7,21934 <memmove+0xe8>
   2194c:	513fff04 	addi	r4,r10,-4
   21950:	2008d0ba 	srli	r4,r4,2
   21954:	318000cc 	andi	r6,r6,3
   21958:	21000044 	addi	r4,r4,1
   2195c:	2109883a 	add	r4,r4,r4
   21960:	2109883a 	add	r4,r4,r4
   21964:	1907883a 	add	r3,r3,r4
   21968:	290b883a 	add	r5,r5,r4
   2196c:	30000b26 	beq	r6,zero,2199c <memmove+0x150>
   21970:	198d883a 	add	r6,r3,r6
   21974:	29c00003 	ldbu	r7,0(r5)
   21978:	18c00044 	addi	r3,r3,1
   2197c:	29400044 	addi	r5,r5,1
   21980:	19ffffc5 	stb	r7,-1(r3)
   21984:	19bffb1e 	bne	r3,r6,21974 <memmove+0x128>
   21988:	f800283a 	ret
   2198c:	1007883a 	mov	r3,r2
   21990:	003ff606 	br	2196c <memmove+0x120>
   21994:	1007883a 	mov	r3,r2
   21998:	003ff506 	br	21970 <memmove+0x124>
   2199c:	f800283a 	ret
   219a0:	500d883a 	mov	r6,r10
   219a4:	003ff106 	br	2196c <memmove+0x120>

000219a8 <memset>:
   219a8:	20c000cc 	andi	r3,r4,3
   219ac:	2005883a 	mov	r2,r4
   219b0:	18004426 	beq	r3,zero,21ac4 <memset+0x11c>
   219b4:	31ffffc4 	addi	r7,r6,-1
   219b8:	30004026 	beq	r6,zero,21abc <memset+0x114>
   219bc:	2813883a 	mov	r9,r5
   219c0:	200d883a 	mov	r6,r4
   219c4:	2007883a 	mov	r3,r4
   219c8:	00000406 	br	219dc <memset+0x34>
   219cc:	3a3fffc4 	addi	r8,r7,-1
   219d0:	31800044 	addi	r6,r6,1
   219d4:	38003926 	beq	r7,zero,21abc <memset+0x114>
   219d8:	400f883a 	mov	r7,r8
   219dc:	18c00044 	addi	r3,r3,1
   219e0:	32400005 	stb	r9,0(r6)
   219e4:	1a0000cc 	andi	r8,r3,3
   219e8:	403ff81e 	bne	r8,zero,219cc <memset+0x24>
   219ec:	010000c4 	movi	r4,3
   219f0:	21c02d2e 	bgeu	r4,r7,21aa8 <memset+0x100>
   219f4:	29003fcc 	andi	r4,r5,255
   219f8:	200c923a 	slli	r6,r4,8
   219fc:	3108b03a 	or	r4,r6,r4
   21a00:	200c943a 	slli	r6,r4,16
   21a04:	218cb03a 	or	r6,r4,r6
   21a08:	010003c4 	movi	r4,15
   21a0c:	21c0182e 	bgeu	r4,r7,21a70 <memset+0xc8>
   21a10:	3b3ffc04 	addi	r12,r7,-16
   21a14:	6018d13a 	srli	r12,r12,4
   21a18:	1a000104 	addi	r8,r3,4
   21a1c:	1ac00204 	addi	r11,r3,8
   21a20:	6008913a 	slli	r4,r12,4
   21a24:	1a800304 	addi	r10,r3,12
   21a28:	1813883a 	mov	r9,r3
   21a2c:	21000504 	addi	r4,r4,20
   21a30:	1909883a 	add	r4,r3,r4
   21a34:	49800015 	stw	r6,0(r9)
   21a38:	41800015 	stw	r6,0(r8)
   21a3c:	59800015 	stw	r6,0(r11)
   21a40:	51800015 	stw	r6,0(r10)
   21a44:	42000404 	addi	r8,r8,16
   21a48:	4a400404 	addi	r9,r9,16
   21a4c:	5ac00404 	addi	r11,r11,16
   21a50:	52800404 	addi	r10,r10,16
   21a54:	413ff71e 	bne	r8,r4,21a34 <memset+0x8c>
   21a58:	63000044 	addi	r12,r12,1
   21a5c:	6018913a 	slli	r12,r12,4
   21a60:	39c003cc 	andi	r7,r7,15
   21a64:	010000c4 	movi	r4,3
   21a68:	1b07883a 	add	r3,r3,r12
   21a6c:	21c00e2e 	bgeu	r4,r7,21aa8 <memset+0x100>
   21a70:	1813883a 	mov	r9,r3
   21a74:	3811883a 	mov	r8,r7
   21a78:	010000c4 	movi	r4,3
   21a7c:	49800015 	stw	r6,0(r9)
   21a80:	423fff04 	addi	r8,r8,-4
   21a84:	4a400104 	addi	r9,r9,4
   21a88:	223ffc36 	bltu	r4,r8,21a7c <memset+0xd4>
   21a8c:	393fff04 	addi	r4,r7,-4
   21a90:	2008d0ba 	srli	r4,r4,2
   21a94:	39c000cc 	andi	r7,r7,3
   21a98:	21000044 	addi	r4,r4,1
   21a9c:	2109883a 	add	r4,r4,r4
   21aa0:	2109883a 	add	r4,r4,r4
   21aa4:	1907883a 	add	r3,r3,r4
   21aa8:	38000526 	beq	r7,zero,21ac0 <memset+0x118>
   21aac:	19cf883a 	add	r7,r3,r7
   21ab0:	19400005 	stb	r5,0(r3)
   21ab4:	18c00044 	addi	r3,r3,1
   21ab8:	38fffd1e 	bne	r7,r3,21ab0 <memset+0x108>
   21abc:	f800283a 	ret
   21ac0:	f800283a 	ret
   21ac4:	2007883a 	mov	r3,r4
   21ac8:	300f883a 	mov	r7,r6
   21acc:	003fc706 	br	219ec <memset+0x44>

00021ad0 <_realloc_r>:
   21ad0:	defff604 	addi	sp,sp,-40
   21ad4:	dc800215 	stw	r18,8(sp)
   21ad8:	dfc00915 	stw	ra,36(sp)
   21adc:	df000815 	stw	fp,32(sp)
   21ae0:	ddc00715 	stw	r23,28(sp)
   21ae4:	dd800615 	stw	r22,24(sp)
   21ae8:	dd400515 	stw	r21,20(sp)
   21aec:	dd000415 	stw	r20,16(sp)
   21af0:	dcc00315 	stw	r19,12(sp)
   21af4:	dc400115 	stw	r17,4(sp)
   21af8:	dc000015 	stw	r16,0(sp)
   21afc:	3025883a 	mov	r18,r6
   21b00:	2800b726 	beq	r5,zero,21de0 <_realloc_r+0x310>
   21b04:	282b883a 	mov	r21,r5
   21b08:	2029883a 	mov	r20,r4
   21b0c:	00236080 	call	23608 <__malloc_lock>
   21b10:	a8bfff17 	ldw	r2,-4(r21)
   21b14:	043fff04 	movi	r16,-4
   21b18:	90c002c4 	addi	r3,r18,11
   21b1c:	01000584 	movi	r4,22
   21b20:	acfffe04 	addi	r19,r21,-8
   21b24:	1420703a 	and	r16,r2,r16
   21b28:	20c0332e 	bgeu	r4,r3,21bf8 <_realloc_r+0x128>
   21b2c:	047ffe04 	movi	r17,-8
   21b30:	1c62703a 	and	r17,r3,r17
   21b34:	8807883a 	mov	r3,r17
   21b38:	88005816 	blt	r17,zero,21c9c <_realloc_r+0x1cc>
   21b3c:	8c805736 	bltu	r17,r18,21c9c <_realloc_r+0x1cc>
   21b40:	80c0300e 	bge	r16,r3,21c04 <_realloc_r+0x134>
   21b44:	070000b4 	movhi	fp,2
   21b48:	e71c7004 	addi	fp,fp,29120
   21b4c:	e1c00217 	ldw	r7,8(fp)
   21b50:	9c09883a 	add	r4,r19,r16
   21b54:	22000117 	ldw	r8,4(r4)
   21b58:	21c06326 	beq	r4,r7,21ce8 <_realloc_r+0x218>
   21b5c:	017fff84 	movi	r5,-2
   21b60:	414a703a 	and	r5,r8,r5
   21b64:	214b883a 	add	r5,r4,r5
   21b68:	29800117 	ldw	r6,4(r5)
   21b6c:	3180004c 	andi	r6,r6,1
   21b70:	30003f26 	beq	r6,zero,21c70 <_realloc_r+0x1a0>
   21b74:	1080004c 	andi	r2,r2,1
   21b78:	10008326 	beq	r2,zero,21d88 <_realloc_r+0x2b8>
   21b7c:	900b883a 	mov	r5,r18
   21b80:	a009883a 	mov	r4,r20
   21b84:	0020e140 	call	20e14 <_malloc_r>
   21b88:	1025883a 	mov	r18,r2
   21b8c:	10011e26 	beq	r2,zero,22008 <_realloc_r+0x538>
   21b90:	a93fff17 	ldw	r4,-4(r21)
   21b94:	10fffe04 	addi	r3,r2,-8
   21b98:	00bfff84 	movi	r2,-2
   21b9c:	2084703a 	and	r2,r4,r2
   21ba0:	9885883a 	add	r2,r19,r2
   21ba4:	1880ee26 	beq	r3,r2,21f60 <_realloc_r+0x490>
   21ba8:	81bfff04 	addi	r6,r16,-4
   21bac:	00800904 	movi	r2,36
   21bb0:	1180b836 	bltu	r2,r6,21e94 <_realloc_r+0x3c4>
   21bb4:	00c004c4 	movi	r3,19
   21bb8:	19809636 	bltu	r3,r6,21e14 <_realloc_r+0x344>
   21bbc:	9005883a 	mov	r2,r18
   21bc0:	a807883a 	mov	r3,r21
   21bc4:	19000017 	ldw	r4,0(r3)
   21bc8:	11000015 	stw	r4,0(r2)
   21bcc:	19000117 	ldw	r4,4(r3)
   21bd0:	11000115 	stw	r4,4(r2)
   21bd4:	18c00217 	ldw	r3,8(r3)
   21bd8:	10c00215 	stw	r3,8(r2)
   21bdc:	a80b883a 	mov	r5,r21
   21be0:	a009883a 	mov	r4,r20
   21be4:	002289c0 	call	2289c <_free_r>
   21be8:	a009883a 	mov	r4,r20
   21bec:	002362c0 	call	2362c <__malloc_unlock>
   21bf0:	9005883a 	mov	r2,r18
   21bf4:	00001206 	br	21c40 <_realloc_r+0x170>
   21bf8:	00c00404 	movi	r3,16
   21bfc:	1823883a 	mov	r17,r3
   21c00:	003fce06 	br	21b3c <_realloc_r+0x6c>
   21c04:	a825883a 	mov	r18,r21
   21c08:	8445c83a 	sub	r2,r16,r17
   21c0c:	00c003c4 	movi	r3,15
   21c10:	18802636 	bltu	r3,r2,21cac <_realloc_r+0x1dc>
   21c14:	99800117 	ldw	r6,4(r19)
   21c18:	9c07883a 	add	r3,r19,r16
   21c1c:	3180004c 	andi	r6,r6,1
   21c20:	3420b03a 	or	r16,r6,r16
   21c24:	9c000115 	stw	r16,4(r19)
   21c28:	18800117 	ldw	r2,4(r3)
   21c2c:	10800054 	ori	r2,r2,1
   21c30:	18800115 	stw	r2,4(r3)
   21c34:	a009883a 	mov	r4,r20
   21c38:	002362c0 	call	2362c <__malloc_unlock>
   21c3c:	9005883a 	mov	r2,r18
   21c40:	dfc00917 	ldw	ra,36(sp)
   21c44:	df000817 	ldw	fp,32(sp)
   21c48:	ddc00717 	ldw	r23,28(sp)
   21c4c:	dd800617 	ldw	r22,24(sp)
   21c50:	dd400517 	ldw	r21,20(sp)
   21c54:	dd000417 	ldw	r20,16(sp)
   21c58:	dcc00317 	ldw	r19,12(sp)
   21c5c:	dc800217 	ldw	r18,8(sp)
   21c60:	dc400117 	ldw	r17,4(sp)
   21c64:	dc000017 	ldw	r16,0(sp)
   21c68:	dec00a04 	addi	sp,sp,40
   21c6c:	f800283a 	ret
   21c70:	017fff04 	movi	r5,-4
   21c74:	414a703a 	and	r5,r8,r5
   21c78:	814d883a 	add	r6,r16,r5
   21c7c:	30c01f16 	blt	r6,r3,21cfc <_realloc_r+0x22c>
   21c80:	20800317 	ldw	r2,12(r4)
   21c84:	20c00217 	ldw	r3,8(r4)
   21c88:	a825883a 	mov	r18,r21
   21c8c:	3021883a 	mov	r16,r6
   21c90:	18800315 	stw	r2,12(r3)
   21c94:	10c00215 	stw	r3,8(r2)
   21c98:	003fdb06 	br	21c08 <_realloc_r+0x138>
   21c9c:	00800304 	movi	r2,12
   21ca0:	a0800015 	stw	r2,0(r20)
   21ca4:	0005883a 	mov	r2,zero
   21ca8:	003fe506 	br	21c40 <_realloc_r+0x170>
   21cac:	98c00117 	ldw	r3,4(r19)
   21cb0:	9c4b883a 	add	r5,r19,r17
   21cb4:	11000054 	ori	r4,r2,1
   21cb8:	18c0004c 	andi	r3,r3,1
   21cbc:	1c62b03a 	or	r17,r3,r17
   21cc0:	9c400115 	stw	r17,4(r19)
   21cc4:	29000115 	stw	r4,4(r5)
   21cc8:	2885883a 	add	r2,r5,r2
   21ccc:	10c00117 	ldw	r3,4(r2)
   21cd0:	29400204 	addi	r5,r5,8
   21cd4:	a009883a 	mov	r4,r20
   21cd8:	18c00054 	ori	r3,r3,1
   21cdc:	10c00115 	stw	r3,4(r2)
   21ce0:	002289c0 	call	2289c <_free_r>
   21ce4:	003fd306 	br	21c34 <_realloc_r+0x164>
   21ce8:	017fff04 	movi	r5,-4
   21cec:	414a703a 	and	r5,r8,r5
   21cf0:	89800404 	addi	r6,r17,16
   21cf4:	8151883a 	add	r8,r16,r5
   21cf8:	4180590e 	bge	r8,r6,21e60 <_realloc_r+0x390>
   21cfc:	1080004c 	andi	r2,r2,1
   21d00:	103f9e1e 	bne	r2,zero,21b7c <_realloc_r+0xac>
   21d04:	adbffe17 	ldw	r22,-8(r21)
   21d08:	00bfff04 	movi	r2,-4
   21d0c:	9dadc83a 	sub	r22,r19,r22
   21d10:	b1800117 	ldw	r6,4(r22)
   21d14:	3084703a 	and	r2,r6,r2
   21d18:	20002026 	beq	r4,zero,21d9c <_realloc_r+0x2cc>
   21d1c:	80af883a 	add	r23,r16,r2
   21d20:	b96f883a 	add	r23,r23,r5
   21d24:	21c05f26 	beq	r4,r7,21ea4 <_realloc_r+0x3d4>
   21d28:	b8c01c16 	blt	r23,r3,21d9c <_realloc_r+0x2cc>
   21d2c:	20800317 	ldw	r2,12(r4)
   21d30:	20c00217 	ldw	r3,8(r4)
   21d34:	81bfff04 	addi	r6,r16,-4
   21d38:	01000904 	movi	r4,36
   21d3c:	18800315 	stw	r2,12(r3)
   21d40:	10c00215 	stw	r3,8(r2)
   21d44:	b0c00217 	ldw	r3,8(r22)
   21d48:	b0800317 	ldw	r2,12(r22)
   21d4c:	b4800204 	addi	r18,r22,8
   21d50:	18800315 	stw	r2,12(r3)
   21d54:	10c00215 	stw	r3,8(r2)
   21d58:	21801b36 	bltu	r4,r6,21dc8 <_realloc_r+0x2f8>
   21d5c:	008004c4 	movi	r2,19
   21d60:	1180352e 	bgeu	r2,r6,21e38 <_realloc_r+0x368>
   21d64:	a8800017 	ldw	r2,0(r21)
   21d68:	b0800215 	stw	r2,8(r22)
   21d6c:	a8800117 	ldw	r2,4(r21)
   21d70:	b0800315 	stw	r2,12(r22)
   21d74:	008006c4 	movi	r2,27
   21d78:	11807f36 	bltu	r2,r6,21f78 <_realloc_r+0x4a8>
   21d7c:	b0800404 	addi	r2,r22,16
   21d80:	ad400204 	addi	r21,r21,8
   21d84:	00002d06 	br	21e3c <_realloc_r+0x36c>
   21d88:	adbffe17 	ldw	r22,-8(r21)
   21d8c:	00bfff04 	movi	r2,-4
   21d90:	9dadc83a 	sub	r22,r19,r22
   21d94:	b1000117 	ldw	r4,4(r22)
   21d98:	2084703a 	and	r2,r4,r2
   21d9c:	b03f7726 	beq	r22,zero,21b7c <_realloc_r+0xac>
   21da0:	80af883a 	add	r23,r16,r2
   21da4:	b8ff7516 	blt	r23,r3,21b7c <_realloc_r+0xac>
   21da8:	b0800317 	ldw	r2,12(r22)
   21dac:	b0c00217 	ldw	r3,8(r22)
   21db0:	81bfff04 	addi	r6,r16,-4
   21db4:	01000904 	movi	r4,36
   21db8:	18800315 	stw	r2,12(r3)
   21dbc:	10c00215 	stw	r3,8(r2)
   21dc0:	b4800204 	addi	r18,r22,8
   21dc4:	21bfe52e 	bgeu	r4,r6,21d5c <_realloc_r+0x28c>
   21dc8:	a80b883a 	mov	r5,r21
   21dcc:	9009883a 	mov	r4,r18
   21dd0:	002184c0 	call	2184c <memmove>
   21dd4:	b821883a 	mov	r16,r23
   21dd8:	b027883a 	mov	r19,r22
   21ddc:	003f8a06 	br	21c08 <_realloc_r+0x138>
   21de0:	300b883a 	mov	r5,r6
   21de4:	dfc00917 	ldw	ra,36(sp)
   21de8:	df000817 	ldw	fp,32(sp)
   21dec:	ddc00717 	ldw	r23,28(sp)
   21df0:	dd800617 	ldw	r22,24(sp)
   21df4:	dd400517 	ldw	r21,20(sp)
   21df8:	dd000417 	ldw	r20,16(sp)
   21dfc:	dcc00317 	ldw	r19,12(sp)
   21e00:	dc800217 	ldw	r18,8(sp)
   21e04:	dc400117 	ldw	r17,4(sp)
   21e08:	dc000017 	ldw	r16,0(sp)
   21e0c:	dec00a04 	addi	sp,sp,40
   21e10:	0020e141 	jmpi	20e14 <_malloc_r>
   21e14:	a8c00017 	ldw	r3,0(r21)
   21e18:	90c00015 	stw	r3,0(r18)
   21e1c:	a8c00117 	ldw	r3,4(r21)
   21e20:	90c00115 	stw	r3,4(r18)
   21e24:	00c006c4 	movi	r3,27
   21e28:	19804536 	bltu	r3,r6,21f40 <_realloc_r+0x470>
   21e2c:	90800204 	addi	r2,r18,8
   21e30:	a8c00204 	addi	r3,r21,8
   21e34:	003f6306 	br	21bc4 <_realloc_r+0xf4>
   21e38:	9005883a 	mov	r2,r18
   21e3c:	a8c00017 	ldw	r3,0(r21)
   21e40:	b821883a 	mov	r16,r23
   21e44:	b027883a 	mov	r19,r22
   21e48:	10c00015 	stw	r3,0(r2)
   21e4c:	a8c00117 	ldw	r3,4(r21)
   21e50:	10c00115 	stw	r3,4(r2)
   21e54:	a8c00217 	ldw	r3,8(r21)
   21e58:	10c00215 	stw	r3,8(r2)
   21e5c:	003f6a06 	br	21c08 <_realloc_r+0x138>
   21e60:	9c67883a 	add	r19,r19,r17
   21e64:	4445c83a 	sub	r2,r8,r17
   21e68:	e4c00215 	stw	r19,8(fp)
   21e6c:	10800054 	ori	r2,r2,1
   21e70:	98800115 	stw	r2,4(r19)
   21e74:	a8bfff17 	ldw	r2,-4(r21)
   21e78:	a009883a 	mov	r4,r20
   21e7c:	1080004c 	andi	r2,r2,1
   21e80:	1462b03a 	or	r17,r2,r17
   21e84:	ac7fff15 	stw	r17,-4(r21)
   21e88:	002362c0 	call	2362c <__malloc_unlock>
   21e8c:	a805883a 	mov	r2,r21
   21e90:	003f6b06 	br	21c40 <_realloc_r+0x170>
   21e94:	a80b883a 	mov	r5,r21
   21e98:	9009883a 	mov	r4,r18
   21e9c:	002184c0 	call	2184c <memmove>
   21ea0:	003f4e06 	br	21bdc <_realloc_r+0x10c>
   21ea4:	89000404 	addi	r4,r17,16
   21ea8:	b93fbc16 	blt	r23,r4,21d9c <_realloc_r+0x2cc>
   21eac:	b0800317 	ldw	r2,12(r22)
   21eb0:	b0c00217 	ldw	r3,8(r22)
   21eb4:	81bfff04 	addi	r6,r16,-4
   21eb8:	01000904 	movi	r4,36
   21ebc:	18800315 	stw	r2,12(r3)
   21ec0:	10c00215 	stw	r3,8(r2)
   21ec4:	b4800204 	addi	r18,r22,8
   21ec8:	21804336 	bltu	r4,r6,21fd8 <_realloc_r+0x508>
   21ecc:	008004c4 	movi	r2,19
   21ed0:	11803f2e 	bgeu	r2,r6,21fd0 <_realloc_r+0x500>
   21ed4:	a8800017 	ldw	r2,0(r21)
   21ed8:	b0800215 	stw	r2,8(r22)
   21edc:	a8800117 	ldw	r2,4(r21)
   21ee0:	b0800315 	stw	r2,12(r22)
   21ee4:	008006c4 	movi	r2,27
   21ee8:	11803f36 	bltu	r2,r6,21fe8 <_realloc_r+0x518>
   21eec:	b0800404 	addi	r2,r22,16
   21ef0:	ad400204 	addi	r21,r21,8
   21ef4:	a8c00017 	ldw	r3,0(r21)
   21ef8:	10c00015 	stw	r3,0(r2)
   21efc:	a8c00117 	ldw	r3,4(r21)
   21f00:	10c00115 	stw	r3,4(r2)
   21f04:	a8c00217 	ldw	r3,8(r21)
   21f08:	10c00215 	stw	r3,8(r2)
   21f0c:	b447883a 	add	r3,r22,r17
   21f10:	bc45c83a 	sub	r2,r23,r17
   21f14:	e0c00215 	stw	r3,8(fp)
   21f18:	10800054 	ori	r2,r2,1
   21f1c:	18800115 	stw	r2,4(r3)
   21f20:	b0800117 	ldw	r2,4(r22)
   21f24:	a009883a 	mov	r4,r20
   21f28:	1080004c 	andi	r2,r2,1
   21f2c:	1462b03a 	or	r17,r2,r17
   21f30:	b4400115 	stw	r17,4(r22)
   21f34:	002362c0 	call	2362c <__malloc_unlock>
   21f38:	9005883a 	mov	r2,r18
   21f3c:	003f4006 	br	21c40 <_realloc_r+0x170>
   21f40:	a8c00217 	ldw	r3,8(r21)
   21f44:	90c00215 	stw	r3,8(r18)
   21f48:	a8c00317 	ldw	r3,12(r21)
   21f4c:	90c00315 	stw	r3,12(r18)
   21f50:	30801126 	beq	r6,r2,21f98 <_realloc_r+0x4c8>
   21f54:	90800404 	addi	r2,r18,16
   21f58:	a8c00404 	addi	r3,r21,16
   21f5c:	003f1906 	br	21bc4 <_realloc_r+0xf4>
   21f60:	90ffff17 	ldw	r3,-4(r18)
   21f64:	00bfff04 	movi	r2,-4
   21f68:	a825883a 	mov	r18,r21
   21f6c:	1884703a 	and	r2,r3,r2
   21f70:	80a1883a 	add	r16,r16,r2
   21f74:	003f2406 	br	21c08 <_realloc_r+0x138>
   21f78:	a8800217 	ldw	r2,8(r21)
   21f7c:	b0800415 	stw	r2,16(r22)
   21f80:	a8800317 	ldw	r2,12(r21)
   21f84:	b0800515 	stw	r2,20(r22)
   21f88:	31000a26 	beq	r6,r4,21fb4 <_realloc_r+0x4e4>
   21f8c:	b0800604 	addi	r2,r22,24
   21f90:	ad400404 	addi	r21,r21,16
   21f94:	003fa906 	br	21e3c <_realloc_r+0x36c>
   21f98:	a9000417 	ldw	r4,16(r21)
   21f9c:	90800604 	addi	r2,r18,24
   21fa0:	a8c00604 	addi	r3,r21,24
   21fa4:	91000415 	stw	r4,16(r18)
   21fa8:	a9000517 	ldw	r4,20(r21)
   21fac:	91000515 	stw	r4,20(r18)
   21fb0:	003f0406 	br	21bc4 <_realloc_r+0xf4>
   21fb4:	a8c00417 	ldw	r3,16(r21)
   21fb8:	ad400604 	addi	r21,r21,24
   21fbc:	b0800804 	addi	r2,r22,32
   21fc0:	b0c00615 	stw	r3,24(r22)
   21fc4:	a8ffff17 	ldw	r3,-4(r21)
   21fc8:	b0c00715 	stw	r3,28(r22)
   21fcc:	003f9b06 	br	21e3c <_realloc_r+0x36c>
   21fd0:	9005883a 	mov	r2,r18
   21fd4:	003fc706 	br	21ef4 <_realloc_r+0x424>
   21fd8:	a80b883a 	mov	r5,r21
   21fdc:	9009883a 	mov	r4,r18
   21fe0:	002184c0 	call	2184c <memmove>
   21fe4:	003fc906 	br	21f0c <_realloc_r+0x43c>
   21fe8:	a8800217 	ldw	r2,8(r21)
   21fec:	b0800415 	stw	r2,16(r22)
   21ff0:	a8800317 	ldw	r2,12(r21)
   21ff4:	b0800515 	stw	r2,20(r22)
   21ff8:	31000726 	beq	r6,r4,22018 <_realloc_r+0x548>
   21ffc:	b0800604 	addi	r2,r22,24
   22000:	ad400404 	addi	r21,r21,16
   22004:	003fbb06 	br	21ef4 <_realloc_r+0x424>
   22008:	a009883a 	mov	r4,r20
   2200c:	002362c0 	call	2362c <__malloc_unlock>
   22010:	0005883a 	mov	r2,zero
   22014:	003f0a06 	br	21c40 <_realloc_r+0x170>
   22018:	a8c00417 	ldw	r3,16(r21)
   2201c:	ad400604 	addi	r21,r21,24
   22020:	b0800804 	addi	r2,r22,32
   22024:	b0c00615 	stw	r3,24(r22)
   22028:	a8ffff17 	ldw	r3,-4(r21)
   2202c:	b0c00715 	stw	r3,28(r22)
   22030:	003fb006 	br	21ef4 <_realloc_r+0x424>

00022034 <_sbrk_r>:
   22034:	defffd04 	addi	sp,sp,-12
   22038:	dc000015 	stw	r16,0(sp)
   2203c:	040000f4 	movhi	r16,3
   22040:	dc400115 	stw	r17,4(sp)
   22044:	84293604 	addi	r16,r16,-23336
   22048:	2023883a 	mov	r17,r4
   2204c:	2809883a 	mov	r4,r5
   22050:	dfc00215 	stw	ra,8(sp)
   22054:	80000015 	stw	zero,0(r16)
   22058:	00237ec0 	call	237ec <sbrk>
   2205c:	00ffffc4 	movi	r3,-1
   22060:	10c00526 	beq	r2,r3,22078 <_sbrk_r+0x44>
   22064:	dfc00217 	ldw	ra,8(sp)
   22068:	dc400117 	ldw	r17,4(sp)
   2206c:	dc000017 	ldw	r16,0(sp)
   22070:	dec00304 	addi	sp,sp,12
   22074:	f800283a 	ret
   22078:	80c00017 	ldw	r3,0(r16)
   2207c:	183ff926 	beq	r3,zero,22064 <_sbrk_r+0x30>
   22080:	88c00015 	stw	r3,0(r17)
   22084:	003ff706 	br	22064 <_sbrk_r+0x30>

00022088 <__sread>:
   22088:	defffe04 	addi	sp,sp,-8
   2208c:	dc000015 	stw	r16,0(sp)
   22090:	2821883a 	mov	r16,r5
   22094:	2940038f 	ldh	r5,14(r5)
   22098:	dfc00115 	stw	ra,4(sp)
   2209c:	0022dc80 	call	22dc8 <_read_r>
   220a0:	10000716 	blt	r2,zero,220c0 <__sread+0x38>
   220a4:	80c01417 	ldw	r3,80(r16)
   220a8:	1887883a 	add	r3,r3,r2
   220ac:	80c01415 	stw	r3,80(r16)
   220b0:	dfc00117 	ldw	ra,4(sp)
   220b4:	dc000017 	ldw	r16,0(sp)
   220b8:	dec00204 	addi	sp,sp,8
   220bc:	f800283a 	ret
   220c0:	80c0030b 	ldhu	r3,12(r16)
   220c4:	18fbffcc 	andi	r3,r3,61439
   220c8:	80c0030d 	sth	r3,12(r16)
   220cc:	dfc00117 	ldw	ra,4(sp)
   220d0:	dc000017 	ldw	r16,0(sp)
   220d4:	dec00204 	addi	sp,sp,8
   220d8:	f800283a 	ret

000220dc <__seofread>:
   220dc:	0005883a 	mov	r2,zero
   220e0:	f800283a 	ret

000220e4 <__swrite>:
   220e4:	2880030b 	ldhu	r2,12(r5)
   220e8:	defffb04 	addi	sp,sp,-20
   220ec:	dcc00315 	stw	r19,12(sp)
   220f0:	dc800215 	stw	r18,8(sp)
   220f4:	dc400115 	stw	r17,4(sp)
   220f8:	dc000015 	stw	r16,0(sp)
   220fc:	dfc00415 	stw	ra,16(sp)
   22100:	10c0400c 	andi	r3,r2,256
   22104:	2821883a 	mov	r16,r5
   22108:	2023883a 	mov	r17,r4
   2210c:	3025883a 	mov	r18,r6
   22110:	3827883a 	mov	r19,r7
   22114:	18000526 	beq	r3,zero,2212c <__swrite+0x48>
   22118:	2940038f 	ldh	r5,14(r5)
   2211c:	01c00084 	movi	r7,2
   22120:	000d883a 	mov	r6,zero
   22124:	0022bac0 	call	22bac <_lseek_r>
   22128:	8080030b 	ldhu	r2,12(r16)
   2212c:	8140038f 	ldh	r5,14(r16)
   22130:	10bbffcc 	andi	r2,r2,61439
   22134:	980f883a 	mov	r7,r19
   22138:	900d883a 	mov	r6,r18
   2213c:	8809883a 	mov	r4,r17
   22140:	8080030d 	sth	r2,12(r16)
   22144:	dfc00417 	ldw	ra,16(sp)
   22148:	dcc00317 	ldw	r19,12(sp)
   2214c:	dc800217 	ldw	r18,8(sp)
   22150:	dc400117 	ldw	r17,4(sp)
   22154:	dc000017 	ldw	r16,0(sp)
   22158:	dec00504 	addi	sp,sp,20
   2215c:	00221c41 	jmpi	221c4 <_write_r>

00022160 <__sseek>:
   22160:	defffe04 	addi	sp,sp,-8
   22164:	dc000015 	stw	r16,0(sp)
   22168:	2821883a 	mov	r16,r5
   2216c:	2940038f 	ldh	r5,14(r5)
   22170:	dfc00115 	stw	ra,4(sp)
   22174:	0022bac0 	call	22bac <_lseek_r>
   22178:	00ffffc4 	movi	r3,-1
   2217c:	10c00826 	beq	r2,r3,221a0 <__sseek+0x40>
   22180:	80c0030b 	ldhu	r3,12(r16)
   22184:	80801415 	stw	r2,80(r16)
   22188:	18c40014 	ori	r3,r3,4096
   2218c:	80c0030d 	sth	r3,12(r16)
   22190:	dfc00117 	ldw	ra,4(sp)
   22194:	dc000017 	ldw	r16,0(sp)
   22198:	dec00204 	addi	sp,sp,8
   2219c:	f800283a 	ret
   221a0:	80c0030b 	ldhu	r3,12(r16)
   221a4:	18fbffcc 	andi	r3,r3,61439
   221a8:	80c0030d 	sth	r3,12(r16)
   221ac:	dfc00117 	ldw	ra,4(sp)
   221b0:	dc000017 	ldw	r16,0(sp)
   221b4:	dec00204 	addi	sp,sp,8
   221b8:	f800283a 	ret

000221bc <__sclose>:
   221bc:	2940038f 	ldh	r5,14(r5)
   221c0:	00223781 	jmpi	22378 <_close_r>

000221c4 <_write_r>:
   221c4:	defffd04 	addi	sp,sp,-12
   221c8:	2805883a 	mov	r2,r5
   221cc:	dc000015 	stw	r16,0(sp)
   221d0:	040000f4 	movhi	r16,3
   221d4:	dc400115 	stw	r17,4(sp)
   221d8:	300b883a 	mov	r5,r6
   221dc:	84293604 	addi	r16,r16,-23336
   221e0:	2023883a 	mov	r17,r4
   221e4:	380d883a 	mov	r6,r7
   221e8:	1009883a 	mov	r4,r2
   221ec:	dfc00215 	stw	ra,8(sp)
   221f0:	80000015 	stw	zero,0(r16)
   221f4:	00238d80 	call	238d8 <write>
   221f8:	00ffffc4 	movi	r3,-1
   221fc:	10c00526 	beq	r2,r3,22214 <_write_r+0x50>
   22200:	dfc00217 	ldw	ra,8(sp)
   22204:	dc400117 	ldw	r17,4(sp)
   22208:	dc000017 	ldw	r16,0(sp)
   2220c:	dec00304 	addi	sp,sp,12
   22210:	f800283a 	ret
   22214:	80c00017 	ldw	r3,0(r16)
   22218:	183ff926 	beq	r3,zero,22200 <_write_r+0x3c>
   2221c:	88c00015 	stw	r3,0(r17)
   22220:	003ff706 	br	22200 <_write_r+0x3c>

00022224 <__swsetup_r>:
   22224:	008000f4 	movhi	r2,3
   22228:	defffd04 	addi	sp,sp,-12
   2222c:	10a23c04 	addi	r2,r2,-30480
   22230:	dc400115 	stw	r17,4(sp)
   22234:	2023883a 	mov	r17,r4
   22238:	11000017 	ldw	r4,0(r2)
   2223c:	dc000015 	stw	r16,0(sp)
   22240:	dfc00215 	stw	ra,8(sp)
   22244:	2821883a 	mov	r16,r5
   22248:	20000226 	beq	r4,zero,22254 <__swsetup_r+0x30>
   2224c:	20800e17 	ldw	r2,56(r4)
   22250:	10003126 	beq	r2,zero,22318 <__swsetup_r+0xf4>
   22254:	8080030b 	ldhu	r2,12(r16)
   22258:	10c0020c 	andi	r3,r2,8
   2225c:	1009883a 	mov	r4,r2
   22260:	18000f26 	beq	r3,zero,222a0 <__swsetup_r+0x7c>
   22264:	80c00417 	ldw	r3,16(r16)
   22268:	18001526 	beq	r3,zero,222c0 <__swsetup_r+0x9c>
   2226c:	1100004c 	andi	r4,r2,1
   22270:	20001c1e 	bne	r4,zero,222e4 <__swsetup_r+0xc0>
   22274:	1080008c 	andi	r2,r2,2
   22278:	1000291e 	bne	r2,zero,22320 <__swsetup_r+0xfc>
   2227c:	80800517 	ldw	r2,20(r16)
   22280:	80800215 	stw	r2,8(r16)
   22284:	18001c26 	beq	r3,zero,222f8 <__swsetup_r+0xd4>
   22288:	0005883a 	mov	r2,zero
   2228c:	dfc00217 	ldw	ra,8(sp)
   22290:	dc400117 	ldw	r17,4(sp)
   22294:	dc000017 	ldw	r16,0(sp)
   22298:	dec00304 	addi	sp,sp,12
   2229c:	f800283a 	ret
   222a0:	2080040c 	andi	r2,r4,16
   222a4:	10002e26 	beq	r2,zero,22360 <__swsetup_r+0x13c>
   222a8:	2080010c 	andi	r2,r4,4
   222ac:	10001e1e 	bne	r2,zero,22328 <__swsetup_r+0x104>
   222b0:	80c00417 	ldw	r3,16(r16)
   222b4:	20800214 	ori	r2,r4,8
   222b8:	8080030d 	sth	r2,12(r16)
   222bc:	183feb1e 	bne	r3,zero,2226c <__swsetup_r+0x48>
   222c0:	1100a00c 	andi	r4,r2,640
   222c4:	01408004 	movi	r5,512
   222c8:	217fe826 	beq	r4,r5,2226c <__swsetup_r+0x48>
   222cc:	800b883a 	mov	r5,r16
   222d0:	8809883a 	mov	r4,r17
   222d4:	0022c0c0 	call	22c0c <__smakebuf_r>
   222d8:	8080030b 	ldhu	r2,12(r16)
   222dc:	80c00417 	ldw	r3,16(r16)
   222e0:	003fe206 	br	2226c <__swsetup_r+0x48>
   222e4:	80800517 	ldw	r2,20(r16)
   222e8:	80000215 	stw	zero,8(r16)
   222ec:	0085c83a 	sub	r2,zero,r2
   222f0:	80800615 	stw	r2,24(r16)
   222f4:	183fe41e 	bne	r3,zero,22288 <__swsetup_r+0x64>
   222f8:	80c0030b 	ldhu	r3,12(r16)
   222fc:	0005883a 	mov	r2,zero
   22300:	1900200c 	andi	r4,r3,128
   22304:	203fe126 	beq	r4,zero,2228c <__swsetup_r+0x68>
   22308:	18c01014 	ori	r3,r3,64
   2230c:	80c0030d 	sth	r3,12(r16)
   22310:	00bfffc4 	movi	r2,-1
   22314:	003fdd06 	br	2228c <__swsetup_r+0x68>
   22318:	00207800 	call	20780 <__sinit>
   2231c:	003fcd06 	br	22254 <__swsetup_r+0x30>
   22320:	0005883a 	mov	r2,zero
   22324:	003fd606 	br	22280 <__swsetup_r+0x5c>
   22328:	81400c17 	ldw	r5,48(r16)
   2232c:	28000626 	beq	r5,zero,22348 <__swsetup_r+0x124>
   22330:	80801004 	addi	r2,r16,64
   22334:	28800326 	beq	r5,r2,22344 <__swsetup_r+0x120>
   22338:	8809883a 	mov	r4,r17
   2233c:	002289c0 	call	2289c <_free_r>
   22340:	8100030b 	ldhu	r4,12(r16)
   22344:	80000c15 	stw	zero,48(r16)
   22348:	80c00417 	ldw	r3,16(r16)
   2234c:	00bff6c4 	movi	r2,-37
   22350:	1108703a 	and	r4,r2,r4
   22354:	80000115 	stw	zero,4(r16)
   22358:	80c00015 	stw	r3,0(r16)
   2235c:	003fd506 	br	222b4 <__swsetup_r+0x90>
   22360:	00800244 	movi	r2,9
   22364:	88800015 	stw	r2,0(r17)
   22368:	20801014 	ori	r2,r4,64
   2236c:	8080030d 	sth	r2,12(r16)
   22370:	00bfffc4 	movi	r2,-1
   22374:	003fc506 	br	2228c <__swsetup_r+0x68>

00022378 <_close_r>:
   22378:	defffd04 	addi	sp,sp,-12
   2237c:	dc000015 	stw	r16,0(sp)
   22380:	040000f4 	movhi	r16,3
   22384:	dc400115 	stw	r17,4(sp)
   22388:	84293604 	addi	r16,r16,-23336
   2238c:	2023883a 	mov	r17,r4
   22390:	2809883a 	mov	r4,r5
   22394:	dfc00215 	stw	ra,8(sp)
   22398:	80000015 	stw	zero,0(r16)
   2239c:	00230c80 	call	230c8 <close>
   223a0:	00ffffc4 	movi	r3,-1
   223a4:	10c00526 	beq	r2,r3,223bc <_close_r+0x44>
   223a8:	dfc00217 	ldw	ra,8(sp)
   223ac:	dc400117 	ldw	r17,4(sp)
   223b0:	dc000017 	ldw	r16,0(sp)
   223b4:	dec00304 	addi	sp,sp,12
   223b8:	f800283a 	ret
   223bc:	80c00017 	ldw	r3,0(r16)
   223c0:	183ff926 	beq	r3,zero,223a8 <_close_r+0x30>
   223c4:	88c00015 	stw	r3,0(r17)
   223c8:	003ff706 	br	223a8 <_close_r+0x30>

000223cc <_fclose_r>:
   223cc:	28003926 	beq	r5,zero,224b4 <_fclose_r+0xe8>
   223d0:	defffc04 	addi	sp,sp,-16
   223d4:	dc400115 	stw	r17,4(sp)
   223d8:	dc000015 	stw	r16,0(sp)
   223dc:	dfc00315 	stw	ra,12(sp)
   223e0:	dc800215 	stw	r18,8(sp)
   223e4:	2023883a 	mov	r17,r4
   223e8:	2821883a 	mov	r16,r5
   223ec:	20000226 	beq	r4,zero,223f8 <_fclose_r+0x2c>
   223f0:	20800e17 	ldw	r2,56(r4)
   223f4:	10002726 	beq	r2,zero,22494 <_fclose_r+0xc8>
   223f8:	8080030f 	ldh	r2,12(r16)
   223fc:	1000071e 	bne	r2,zero,2241c <_fclose_r+0x50>
   22400:	0005883a 	mov	r2,zero
   22404:	dfc00317 	ldw	ra,12(sp)
   22408:	dc800217 	ldw	r18,8(sp)
   2240c:	dc400117 	ldw	r17,4(sp)
   22410:	dc000017 	ldw	r16,0(sp)
   22414:	dec00404 	addi	sp,sp,16
   22418:	f800283a 	ret
   2241c:	800b883a 	mov	r5,r16
   22420:	8809883a 	mov	r4,r17
   22424:	00224d00 	call	224d0 <__sflush_r>
   22428:	1025883a 	mov	r18,r2
   2242c:	80800b17 	ldw	r2,44(r16)
   22430:	10000426 	beq	r2,zero,22444 <_fclose_r+0x78>
   22434:	81400717 	ldw	r5,28(r16)
   22438:	8809883a 	mov	r4,r17
   2243c:	103ee83a 	callr	r2
   22440:	10001616 	blt	r2,zero,2249c <_fclose_r+0xd0>
   22444:	8080030b 	ldhu	r2,12(r16)
   22448:	1080200c 	andi	r2,r2,128
   2244c:	1000151e 	bne	r2,zero,224a4 <_fclose_r+0xd8>
   22450:	81400c17 	ldw	r5,48(r16)
   22454:	28000526 	beq	r5,zero,2246c <_fclose_r+0xa0>
   22458:	80801004 	addi	r2,r16,64
   2245c:	28800226 	beq	r5,r2,22468 <_fclose_r+0x9c>
   22460:	8809883a 	mov	r4,r17
   22464:	002289c0 	call	2289c <_free_r>
   22468:	80000c15 	stw	zero,48(r16)
   2246c:	81401117 	ldw	r5,68(r16)
   22470:	28000326 	beq	r5,zero,22480 <_fclose_r+0xb4>
   22474:	8809883a 	mov	r4,r17
   22478:	002289c0 	call	2289c <_free_r>
   2247c:	80001115 	stw	zero,68(r16)
   22480:	00207900 	call	20790 <__sfp_lock_acquire>
   22484:	8000030d 	sth	zero,12(r16)
   22488:	00207940 	call	20794 <__sfp_lock_release>
   2248c:	9005883a 	mov	r2,r18
   22490:	003fdc06 	br	22404 <_fclose_r+0x38>
   22494:	00207800 	call	20780 <__sinit>
   22498:	003fd706 	br	223f8 <_fclose_r+0x2c>
   2249c:	04bfffc4 	movi	r18,-1
   224a0:	003fe806 	br	22444 <_fclose_r+0x78>
   224a4:	81400417 	ldw	r5,16(r16)
   224a8:	8809883a 	mov	r4,r17
   224ac:	002289c0 	call	2289c <_free_r>
   224b0:	003fe706 	br	22450 <_fclose_r+0x84>
   224b4:	0005883a 	mov	r2,zero
   224b8:	f800283a 	ret

000224bc <fclose>:
   224bc:	008000f4 	movhi	r2,3
   224c0:	10a23c04 	addi	r2,r2,-30480
   224c4:	200b883a 	mov	r5,r4
   224c8:	11000017 	ldw	r4,0(r2)
   224cc:	00223cc1 	jmpi	223cc <_fclose_r>

000224d0 <__sflush_r>:
   224d0:	2880030b 	ldhu	r2,12(r5)
   224d4:	defffb04 	addi	sp,sp,-20
   224d8:	dcc00315 	stw	r19,12(sp)
   224dc:	dc400115 	stw	r17,4(sp)
   224e0:	dfc00415 	stw	ra,16(sp)
   224e4:	dc800215 	stw	r18,8(sp)
   224e8:	dc000015 	stw	r16,0(sp)
   224ec:	10c0020c 	andi	r3,r2,8
   224f0:	2823883a 	mov	r17,r5
   224f4:	2027883a 	mov	r19,r4
   224f8:	1800311e 	bne	r3,zero,225c0 <__sflush_r+0xf0>
   224fc:	28c00117 	ldw	r3,4(r5)
   22500:	10820014 	ori	r2,r2,2048
   22504:	2880030d 	sth	r2,12(r5)
   22508:	00c04b0e 	bge	zero,r3,22638 <__sflush_r+0x168>
   2250c:	8a000a17 	ldw	r8,40(r17)
   22510:	40002326 	beq	r8,zero,225a0 <__sflush_r+0xd0>
   22514:	9c000017 	ldw	r16,0(r19)
   22518:	10c4000c 	andi	r3,r2,4096
   2251c:	98000015 	stw	zero,0(r19)
   22520:	18004826 	beq	r3,zero,22644 <__sflush_r+0x174>
   22524:	89801417 	ldw	r6,80(r17)
   22528:	10c0010c 	andi	r3,r2,4
   2252c:	18000626 	beq	r3,zero,22548 <__sflush_r+0x78>
   22530:	88c00117 	ldw	r3,4(r17)
   22534:	88800c17 	ldw	r2,48(r17)
   22538:	30cdc83a 	sub	r6,r6,r3
   2253c:	10000226 	beq	r2,zero,22548 <__sflush_r+0x78>
   22540:	88800f17 	ldw	r2,60(r17)
   22544:	308dc83a 	sub	r6,r6,r2
   22548:	89400717 	ldw	r5,28(r17)
   2254c:	000f883a 	mov	r7,zero
   22550:	9809883a 	mov	r4,r19
   22554:	403ee83a 	callr	r8
   22558:	00ffffc4 	movi	r3,-1
   2255c:	10c04426 	beq	r2,r3,22670 <__sflush_r+0x1a0>
   22560:	88c0030b 	ldhu	r3,12(r17)
   22564:	89000417 	ldw	r4,16(r17)
   22568:	88000115 	stw	zero,4(r17)
   2256c:	197dffcc 	andi	r5,r3,63487
   22570:	8940030d 	sth	r5,12(r17)
   22574:	89000015 	stw	r4,0(r17)
   22578:	18c4000c 	andi	r3,r3,4096
   2257c:	18002c1e 	bne	r3,zero,22630 <__sflush_r+0x160>
   22580:	89400c17 	ldw	r5,48(r17)
   22584:	9c000015 	stw	r16,0(r19)
   22588:	28000526 	beq	r5,zero,225a0 <__sflush_r+0xd0>
   2258c:	88801004 	addi	r2,r17,64
   22590:	28800226 	beq	r5,r2,2259c <__sflush_r+0xcc>
   22594:	9809883a 	mov	r4,r19
   22598:	002289c0 	call	2289c <_free_r>
   2259c:	88000c15 	stw	zero,48(r17)
   225a0:	0005883a 	mov	r2,zero
   225a4:	dfc00417 	ldw	ra,16(sp)
   225a8:	dcc00317 	ldw	r19,12(sp)
   225ac:	dc800217 	ldw	r18,8(sp)
   225b0:	dc400117 	ldw	r17,4(sp)
   225b4:	dc000017 	ldw	r16,0(sp)
   225b8:	dec00504 	addi	sp,sp,20
   225bc:	f800283a 	ret
   225c0:	2c800417 	ldw	r18,16(r5)
   225c4:	903ff626 	beq	r18,zero,225a0 <__sflush_r+0xd0>
   225c8:	2c000017 	ldw	r16,0(r5)
   225cc:	108000cc 	andi	r2,r2,3
   225d0:	2c800015 	stw	r18,0(r5)
   225d4:	84a1c83a 	sub	r16,r16,r18
   225d8:	1000131e 	bne	r2,zero,22628 <__sflush_r+0x158>
   225dc:	28800517 	ldw	r2,20(r5)
   225e0:	88800215 	stw	r2,8(r17)
   225e4:	04000316 	blt	zero,r16,225f4 <__sflush_r+0x124>
   225e8:	003fed06 	br	225a0 <__sflush_r+0xd0>
   225ec:	90a5883a 	add	r18,r18,r2
   225f0:	043feb0e 	bge	zero,r16,225a0 <__sflush_r+0xd0>
   225f4:	88800917 	ldw	r2,36(r17)
   225f8:	89400717 	ldw	r5,28(r17)
   225fc:	800f883a 	mov	r7,r16
   22600:	900d883a 	mov	r6,r18
   22604:	9809883a 	mov	r4,r19
   22608:	103ee83a 	callr	r2
   2260c:	80a1c83a 	sub	r16,r16,r2
   22610:	00bff616 	blt	zero,r2,225ec <__sflush_r+0x11c>
   22614:	88c0030b 	ldhu	r3,12(r17)
   22618:	00bfffc4 	movi	r2,-1
   2261c:	18c01014 	ori	r3,r3,64
   22620:	88c0030d 	sth	r3,12(r17)
   22624:	003fdf06 	br	225a4 <__sflush_r+0xd4>
   22628:	0005883a 	mov	r2,zero
   2262c:	003fec06 	br	225e0 <__sflush_r+0x110>
   22630:	88801415 	stw	r2,80(r17)
   22634:	003fd206 	br	22580 <__sflush_r+0xb0>
   22638:	28c00f17 	ldw	r3,60(r5)
   2263c:	00ffb316 	blt	zero,r3,2250c <__sflush_r+0x3c>
   22640:	003fd706 	br	225a0 <__sflush_r+0xd0>
   22644:	89400717 	ldw	r5,28(r17)
   22648:	000d883a 	mov	r6,zero
   2264c:	01c00044 	movi	r7,1
   22650:	9809883a 	mov	r4,r19
   22654:	403ee83a 	callr	r8
   22658:	100d883a 	mov	r6,r2
   2265c:	00bfffc4 	movi	r2,-1
   22660:	30801426 	beq	r6,r2,226b4 <__sflush_r+0x1e4>
   22664:	8880030b 	ldhu	r2,12(r17)
   22668:	8a000a17 	ldw	r8,40(r17)
   2266c:	003fae06 	br	22528 <__sflush_r+0x58>
   22670:	98c00017 	ldw	r3,0(r19)
   22674:	183fba26 	beq	r3,zero,22560 <__sflush_r+0x90>
   22678:	01000744 	movi	r4,29
   2267c:	19000626 	beq	r3,r4,22698 <__sflush_r+0x1c8>
   22680:	01000584 	movi	r4,22
   22684:	19000426 	beq	r3,r4,22698 <__sflush_r+0x1c8>
   22688:	88c0030b 	ldhu	r3,12(r17)
   2268c:	18c01014 	ori	r3,r3,64
   22690:	88c0030d 	sth	r3,12(r17)
   22694:	003fc306 	br	225a4 <__sflush_r+0xd4>
   22698:	8880030b 	ldhu	r2,12(r17)
   2269c:	88c00417 	ldw	r3,16(r17)
   226a0:	88000115 	stw	zero,4(r17)
   226a4:	10bdffcc 	andi	r2,r2,63487
   226a8:	8880030d 	sth	r2,12(r17)
   226ac:	88c00015 	stw	r3,0(r17)
   226b0:	003fb306 	br	22580 <__sflush_r+0xb0>
   226b4:	98800017 	ldw	r2,0(r19)
   226b8:	103fea26 	beq	r2,zero,22664 <__sflush_r+0x194>
   226bc:	00c00744 	movi	r3,29
   226c0:	10c00226 	beq	r2,r3,226cc <__sflush_r+0x1fc>
   226c4:	00c00584 	movi	r3,22
   226c8:	10c0031e 	bne	r2,r3,226d8 <__sflush_r+0x208>
   226cc:	9c000015 	stw	r16,0(r19)
   226d0:	0005883a 	mov	r2,zero
   226d4:	003fb306 	br	225a4 <__sflush_r+0xd4>
   226d8:	88c0030b 	ldhu	r3,12(r17)
   226dc:	3005883a 	mov	r2,r6
   226e0:	18c01014 	ori	r3,r3,64
   226e4:	88c0030d 	sth	r3,12(r17)
   226e8:	003fae06 	br	225a4 <__sflush_r+0xd4>

000226ec <_fflush_r>:
   226ec:	defffd04 	addi	sp,sp,-12
   226f0:	dc000115 	stw	r16,4(sp)
   226f4:	dfc00215 	stw	ra,8(sp)
   226f8:	2021883a 	mov	r16,r4
   226fc:	20000226 	beq	r4,zero,22708 <_fflush_r+0x1c>
   22700:	20800e17 	ldw	r2,56(r4)
   22704:	10000c26 	beq	r2,zero,22738 <_fflush_r+0x4c>
   22708:	2880030f 	ldh	r2,12(r5)
   2270c:	1000051e 	bne	r2,zero,22724 <_fflush_r+0x38>
   22710:	0005883a 	mov	r2,zero
   22714:	dfc00217 	ldw	ra,8(sp)
   22718:	dc000117 	ldw	r16,4(sp)
   2271c:	dec00304 	addi	sp,sp,12
   22720:	f800283a 	ret
   22724:	8009883a 	mov	r4,r16
   22728:	dfc00217 	ldw	ra,8(sp)
   2272c:	dc000117 	ldw	r16,4(sp)
   22730:	dec00304 	addi	sp,sp,12
   22734:	00224d01 	jmpi	224d0 <__sflush_r>
   22738:	d9400015 	stw	r5,0(sp)
   2273c:	00207800 	call	20780 <__sinit>
   22740:	d9400017 	ldw	r5,0(sp)
   22744:	003ff006 	br	22708 <_fflush_r+0x1c>

00022748 <fflush>:
   22748:	20000526 	beq	r4,zero,22760 <fflush+0x18>
   2274c:	008000f4 	movhi	r2,3
   22750:	10a23c04 	addi	r2,r2,-30480
   22754:	200b883a 	mov	r5,r4
   22758:	11000017 	ldw	r4,0(r2)
   2275c:	00226ec1 	jmpi	226ec <_fflush_r>
   22760:	008000f4 	movhi	r2,3
   22764:	10a23b04 	addi	r2,r2,-30484
   22768:	11000017 	ldw	r4,0(r2)
   2276c:	014000b4 	movhi	r5,2
   22770:	2949bb04 	addi	r5,r5,9964
   22774:	0020d501 	jmpi	20d50 <_fwalk_reent>

00022778 <_malloc_trim_r>:
   22778:	defffb04 	addi	sp,sp,-20
   2277c:	dcc00315 	stw	r19,12(sp)
   22780:	04c000b4 	movhi	r19,2
   22784:	dc800215 	stw	r18,8(sp)
   22788:	dc400115 	stw	r17,4(sp)
   2278c:	dc000015 	stw	r16,0(sp)
   22790:	dfc00415 	stw	ra,16(sp)
   22794:	2821883a 	mov	r16,r5
   22798:	9cdc7004 	addi	r19,r19,29120
   2279c:	2025883a 	mov	r18,r4
   227a0:	00236080 	call	23608 <__malloc_lock>
   227a4:	98800217 	ldw	r2,8(r19)
   227a8:	14400117 	ldw	r17,4(r2)
   227ac:	00bfff04 	movi	r2,-4
   227b0:	88a2703a 	and	r17,r17,r2
   227b4:	8c21c83a 	sub	r16,r17,r16
   227b8:	8403fbc4 	addi	r16,r16,4079
   227bc:	8020d33a 	srli	r16,r16,12
   227c0:	0083ffc4 	movi	r2,4095
   227c4:	843fffc4 	addi	r16,r16,-1
   227c8:	8020933a 	slli	r16,r16,12
   227cc:	1400060e 	bge	r2,r16,227e8 <_malloc_trim_r+0x70>
   227d0:	000b883a 	mov	r5,zero
   227d4:	9009883a 	mov	r4,r18
   227d8:	00220340 	call	22034 <_sbrk_r>
   227dc:	98c00217 	ldw	r3,8(r19)
   227e0:	1c47883a 	add	r3,r3,r17
   227e4:	10c00a26 	beq	r2,r3,22810 <_malloc_trim_r+0x98>
   227e8:	9009883a 	mov	r4,r18
   227ec:	002362c0 	call	2362c <__malloc_unlock>
   227f0:	0005883a 	mov	r2,zero
   227f4:	dfc00417 	ldw	ra,16(sp)
   227f8:	dcc00317 	ldw	r19,12(sp)
   227fc:	dc800217 	ldw	r18,8(sp)
   22800:	dc400117 	ldw	r17,4(sp)
   22804:	dc000017 	ldw	r16,0(sp)
   22808:	dec00504 	addi	sp,sp,20
   2280c:	f800283a 	ret
   22810:	040bc83a 	sub	r5,zero,r16
   22814:	9009883a 	mov	r4,r18
   22818:	00220340 	call	22034 <_sbrk_r>
   2281c:	00ffffc4 	movi	r3,-1
   22820:	10c00d26 	beq	r2,r3,22858 <_malloc_trim_r+0xe0>
   22824:	00c000f4 	movhi	r3,3
   22828:	18e93e04 	addi	r3,r3,-23304
   2282c:	18800017 	ldw	r2,0(r3)
   22830:	99000217 	ldw	r4,8(r19)
   22834:	8c23c83a 	sub	r17,r17,r16
   22838:	8c400054 	ori	r17,r17,1
   2283c:	1421c83a 	sub	r16,r2,r16
   22840:	24400115 	stw	r17,4(r4)
   22844:	9009883a 	mov	r4,r18
   22848:	1c000015 	stw	r16,0(r3)
   2284c:	002362c0 	call	2362c <__malloc_unlock>
   22850:	00800044 	movi	r2,1
   22854:	003fe706 	br	227f4 <_malloc_trim_r+0x7c>
   22858:	000b883a 	mov	r5,zero
   2285c:	9009883a 	mov	r4,r18
   22860:	00220340 	call	22034 <_sbrk_r>
   22864:	99000217 	ldw	r4,8(r19)
   22868:	014003c4 	movi	r5,15
   2286c:	1107c83a 	sub	r3,r2,r4
   22870:	28ffdd0e 	bge	r5,r3,227e8 <_malloc_trim_r+0x70>
   22874:	014000f4 	movhi	r5,3
   22878:	29623d04 	addi	r5,r5,-30476
   2287c:	29400017 	ldw	r5,0(r5)
   22880:	18c00054 	ori	r3,r3,1
   22884:	20c00115 	stw	r3,4(r4)
   22888:	00c000f4 	movhi	r3,3
   2288c:	1145c83a 	sub	r2,r2,r5
   22890:	18e93e04 	addi	r3,r3,-23304
   22894:	18800015 	stw	r2,0(r3)
   22898:	003fd306 	br	227e8 <_malloc_trim_r+0x70>

0002289c <_free_r>:
   2289c:	28004126 	beq	r5,zero,229a4 <_free_r+0x108>
   228a0:	defffd04 	addi	sp,sp,-12
   228a4:	dc400115 	stw	r17,4(sp)
   228a8:	dc000015 	stw	r16,0(sp)
   228ac:	2023883a 	mov	r17,r4
   228b0:	2821883a 	mov	r16,r5
   228b4:	dfc00215 	stw	ra,8(sp)
   228b8:	00236080 	call	23608 <__malloc_lock>
   228bc:	81ffff17 	ldw	r7,-4(r16)
   228c0:	00bfff84 	movi	r2,-2
   228c4:	010000b4 	movhi	r4,2
   228c8:	81bffe04 	addi	r6,r16,-8
   228cc:	3884703a 	and	r2,r7,r2
   228d0:	211c7004 	addi	r4,r4,29120
   228d4:	308b883a 	add	r5,r6,r2
   228d8:	2a400117 	ldw	r9,4(r5)
   228dc:	22000217 	ldw	r8,8(r4)
   228e0:	00ffff04 	movi	r3,-4
   228e4:	48c6703a 	and	r3,r9,r3
   228e8:	2a005726 	beq	r5,r8,22a48 <_free_r+0x1ac>
   228ec:	28c00115 	stw	r3,4(r5)
   228f0:	39c0004c 	andi	r7,r7,1
   228f4:	3800091e 	bne	r7,zero,2291c <_free_r+0x80>
   228f8:	823ffe17 	ldw	r8,-8(r16)
   228fc:	22400204 	addi	r9,r4,8
   22900:	320dc83a 	sub	r6,r6,r8
   22904:	31c00217 	ldw	r7,8(r6)
   22908:	1205883a 	add	r2,r2,r8
   2290c:	3a406526 	beq	r7,r9,22aa4 <_free_r+0x208>
   22910:	32000317 	ldw	r8,12(r6)
   22914:	3a000315 	stw	r8,12(r7)
   22918:	41c00215 	stw	r7,8(r8)
   2291c:	28cf883a 	add	r7,r5,r3
   22920:	39c00117 	ldw	r7,4(r7)
   22924:	39c0004c 	andi	r7,r7,1
   22928:	38003a26 	beq	r7,zero,22a14 <_free_r+0x178>
   2292c:	10c00054 	ori	r3,r2,1
   22930:	30c00115 	stw	r3,4(r6)
   22934:	3087883a 	add	r3,r6,r2
   22938:	18800015 	stw	r2,0(r3)
   2293c:	00c07fc4 	movi	r3,511
   22940:	18801936 	bltu	r3,r2,229a8 <_free_r+0x10c>
   22944:	1004d0fa 	srli	r2,r2,3
   22948:	01c00044 	movi	r7,1
   2294c:	21400117 	ldw	r5,4(r4)
   22950:	10c00044 	addi	r3,r2,1
   22954:	18c7883a 	add	r3,r3,r3
   22958:	1005d0ba 	srai	r2,r2,2
   2295c:	18c7883a 	add	r3,r3,r3
   22960:	18c7883a 	add	r3,r3,r3
   22964:	1907883a 	add	r3,r3,r4
   22968:	3884983a 	sll	r2,r7,r2
   2296c:	19c00017 	ldw	r7,0(r3)
   22970:	1a3ffe04 	addi	r8,r3,-8
   22974:	1144b03a 	or	r2,r2,r5
   22978:	32000315 	stw	r8,12(r6)
   2297c:	31c00215 	stw	r7,8(r6)
   22980:	20800115 	stw	r2,4(r4)
   22984:	19800015 	stw	r6,0(r3)
   22988:	39800315 	stw	r6,12(r7)
   2298c:	8809883a 	mov	r4,r17
   22990:	dfc00217 	ldw	ra,8(sp)
   22994:	dc400117 	ldw	r17,4(sp)
   22998:	dc000017 	ldw	r16,0(sp)
   2299c:	dec00304 	addi	sp,sp,12
   229a0:	002362c1 	jmpi	2362c <__malloc_unlock>
   229a4:	f800283a 	ret
   229a8:	100ad27a 	srli	r5,r2,9
   229ac:	00c00104 	movi	r3,4
   229b0:	19404a36 	bltu	r3,r5,22adc <_free_r+0x240>
   229b4:	100ad1ba 	srli	r5,r2,6
   229b8:	28c00e44 	addi	r3,r5,57
   229bc:	18c7883a 	add	r3,r3,r3
   229c0:	29400e04 	addi	r5,r5,56
   229c4:	18c7883a 	add	r3,r3,r3
   229c8:	18c7883a 	add	r3,r3,r3
   229cc:	1909883a 	add	r4,r3,r4
   229d0:	20c00017 	ldw	r3,0(r4)
   229d4:	01c000b4 	movhi	r7,2
   229d8:	213ffe04 	addi	r4,r4,-8
   229dc:	39dc7004 	addi	r7,r7,29120
   229e0:	20c04426 	beq	r4,r3,22af4 <_free_r+0x258>
   229e4:	01ffff04 	movi	r7,-4
   229e8:	19400117 	ldw	r5,4(r3)
   229ec:	29ca703a 	and	r5,r5,r7
   229f0:	1140022e 	bgeu	r2,r5,229fc <_free_r+0x160>
   229f4:	18c00217 	ldw	r3,8(r3)
   229f8:	20fffb1e 	bne	r4,r3,229e8 <_free_r+0x14c>
   229fc:	19000317 	ldw	r4,12(r3)
   22a00:	31000315 	stw	r4,12(r6)
   22a04:	30c00215 	stw	r3,8(r6)
   22a08:	21800215 	stw	r6,8(r4)
   22a0c:	19800315 	stw	r6,12(r3)
   22a10:	003fde06 	br	2298c <_free_r+0xf0>
   22a14:	29c00217 	ldw	r7,8(r5)
   22a18:	10c5883a 	add	r2,r2,r3
   22a1c:	00c000b4 	movhi	r3,2
   22a20:	18dc7204 	addi	r3,r3,29128
   22a24:	38c03b26 	beq	r7,r3,22b14 <_free_r+0x278>
   22a28:	2a000317 	ldw	r8,12(r5)
   22a2c:	11400054 	ori	r5,r2,1
   22a30:	3087883a 	add	r3,r6,r2
   22a34:	3a000315 	stw	r8,12(r7)
   22a38:	41c00215 	stw	r7,8(r8)
   22a3c:	31400115 	stw	r5,4(r6)
   22a40:	18800015 	stw	r2,0(r3)
   22a44:	003fbd06 	br	2293c <_free_r+0xa0>
   22a48:	39c0004c 	andi	r7,r7,1
   22a4c:	10c5883a 	add	r2,r2,r3
   22a50:	3800071e 	bne	r7,zero,22a70 <_free_r+0x1d4>
   22a54:	81fffe17 	ldw	r7,-8(r16)
   22a58:	31cdc83a 	sub	r6,r6,r7
   22a5c:	30c00317 	ldw	r3,12(r6)
   22a60:	31400217 	ldw	r5,8(r6)
   22a64:	11c5883a 	add	r2,r2,r7
   22a68:	28c00315 	stw	r3,12(r5)
   22a6c:	19400215 	stw	r5,8(r3)
   22a70:	10c00054 	ori	r3,r2,1
   22a74:	30c00115 	stw	r3,4(r6)
   22a78:	00c000f4 	movhi	r3,3
   22a7c:	18e23e04 	addi	r3,r3,-30472
   22a80:	18c00017 	ldw	r3,0(r3)
   22a84:	21800215 	stw	r6,8(r4)
   22a88:	10ffc036 	bltu	r2,r3,2298c <_free_r+0xf0>
   22a8c:	008000f4 	movhi	r2,3
   22a90:	10a93504 	addi	r2,r2,-23340
   22a94:	11400017 	ldw	r5,0(r2)
   22a98:	8809883a 	mov	r4,r17
   22a9c:	00227780 	call	22778 <_malloc_trim_r>
   22aa0:	003fba06 	br	2298c <_free_r+0xf0>
   22aa4:	28c9883a 	add	r4,r5,r3
   22aa8:	21000117 	ldw	r4,4(r4)
   22aac:	2100004c 	andi	r4,r4,1
   22ab0:	2000391e 	bne	r4,zero,22b98 <_free_r+0x2fc>
   22ab4:	29c00217 	ldw	r7,8(r5)
   22ab8:	29000317 	ldw	r4,12(r5)
   22abc:	1885883a 	add	r2,r3,r2
   22ac0:	10c00054 	ori	r3,r2,1
   22ac4:	39000315 	stw	r4,12(r7)
   22ac8:	21c00215 	stw	r7,8(r4)
   22acc:	30c00115 	stw	r3,4(r6)
   22ad0:	308d883a 	add	r6,r6,r2
   22ad4:	30800015 	stw	r2,0(r6)
   22ad8:	003fac06 	br	2298c <_free_r+0xf0>
   22adc:	00c00504 	movi	r3,20
   22ae0:	19401536 	bltu	r3,r5,22b38 <_free_r+0x29c>
   22ae4:	28c01704 	addi	r3,r5,92
   22ae8:	18c7883a 	add	r3,r3,r3
   22aec:	294016c4 	addi	r5,r5,91
   22af0:	003fb406 	br	229c4 <_free_r+0x128>
   22af4:	280bd0ba 	srai	r5,r5,2
   22af8:	00c00044 	movi	r3,1
   22afc:	38800117 	ldw	r2,4(r7)
   22b00:	194a983a 	sll	r5,r3,r5
   22b04:	2007883a 	mov	r3,r4
   22b08:	2884b03a 	or	r2,r5,r2
   22b0c:	38800115 	stw	r2,4(r7)
   22b10:	003fbb06 	br	22a00 <_free_r+0x164>
   22b14:	21800515 	stw	r6,20(r4)
   22b18:	21800415 	stw	r6,16(r4)
   22b1c:	10c00054 	ori	r3,r2,1
   22b20:	31c00315 	stw	r7,12(r6)
   22b24:	31c00215 	stw	r7,8(r6)
   22b28:	30c00115 	stw	r3,4(r6)
   22b2c:	308d883a 	add	r6,r6,r2
   22b30:	30800015 	stw	r2,0(r6)
   22b34:	003f9506 	br	2298c <_free_r+0xf0>
   22b38:	00c01504 	movi	r3,84
   22b3c:	19400536 	bltu	r3,r5,22b54 <_free_r+0x2b8>
   22b40:	100ad33a 	srli	r5,r2,12
   22b44:	28c01bc4 	addi	r3,r5,111
   22b48:	18c7883a 	add	r3,r3,r3
   22b4c:	29401b84 	addi	r5,r5,110
   22b50:	003f9c06 	br	229c4 <_free_r+0x128>
   22b54:	00c05504 	movi	r3,340
   22b58:	19400536 	bltu	r3,r5,22b70 <_free_r+0x2d4>
   22b5c:	100ad3fa 	srli	r5,r2,15
   22b60:	28c01e04 	addi	r3,r5,120
   22b64:	18c7883a 	add	r3,r3,r3
   22b68:	29401dc4 	addi	r5,r5,119
   22b6c:	003f9506 	br	229c4 <_free_r+0x128>
   22b70:	00c15504 	movi	r3,1364
   22b74:	19400536 	bltu	r3,r5,22b8c <_free_r+0x2f0>
   22b78:	100ad4ba 	srli	r5,r2,18
   22b7c:	28c01f44 	addi	r3,r5,125
   22b80:	18c7883a 	add	r3,r3,r3
   22b84:	29401f04 	addi	r5,r5,124
   22b88:	003f8e06 	br	229c4 <_free_r+0x128>
   22b8c:	00c03f84 	movi	r3,254
   22b90:	01401f84 	movi	r5,126
   22b94:	003f8b06 	br	229c4 <_free_r+0x128>
   22b98:	10c00054 	ori	r3,r2,1
   22b9c:	30c00115 	stw	r3,4(r6)
   22ba0:	308d883a 	add	r6,r6,r2
   22ba4:	30800015 	stw	r2,0(r6)
   22ba8:	003f7806 	br	2298c <_free_r+0xf0>

00022bac <_lseek_r>:
   22bac:	defffd04 	addi	sp,sp,-12
   22bb0:	2805883a 	mov	r2,r5
   22bb4:	dc000015 	stw	r16,0(sp)
   22bb8:	040000f4 	movhi	r16,3
   22bbc:	dc400115 	stw	r17,4(sp)
   22bc0:	300b883a 	mov	r5,r6
   22bc4:	84293604 	addi	r16,r16,-23336
   22bc8:	2023883a 	mov	r17,r4
   22bcc:	380d883a 	mov	r6,r7
   22bd0:	1009883a 	mov	r4,r2
   22bd4:	dfc00215 	stw	ra,8(sp)
   22bd8:	80000015 	stw	zero,0(r16)
   22bdc:	00234b80 	call	234b8 <lseek>
   22be0:	00ffffc4 	movi	r3,-1
   22be4:	10c00526 	beq	r2,r3,22bfc <_lseek_r+0x50>
   22be8:	dfc00217 	ldw	ra,8(sp)
   22bec:	dc400117 	ldw	r17,4(sp)
   22bf0:	dc000017 	ldw	r16,0(sp)
   22bf4:	dec00304 	addi	sp,sp,12
   22bf8:	f800283a 	ret
   22bfc:	80c00017 	ldw	r3,0(r16)
   22c00:	183ff926 	beq	r3,zero,22be8 <_lseek_r+0x3c>
   22c04:	88c00015 	stw	r3,0(r17)
   22c08:	003ff706 	br	22be8 <_lseek_r+0x3c>

00022c0c <__smakebuf_r>:
   22c0c:	2880030b 	ldhu	r2,12(r5)
   22c10:	10c0008c 	andi	r3,r2,2
   22c14:	1800411e 	bne	r3,zero,22d1c <__smakebuf_r+0x110>
   22c18:	deffec04 	addi	sp,sp,-80
   22c1c:	dc000f15 	stw	r16,60(sp)
   22c20:	2821883a 	mov	r16,r5
   22c24:	2940038f 	ldh	r5,14(r5)
   22c28:	dc401015 	stw	r17,64(sp)
   22c2c:	dfc01315 	stw	ra,76(sp)
   22c30:	dcc01215 	stw	r19,72(sp)
   22c34:	dc801115 	stw	r18,68(sp)
   22c38:	2023883a 	mov	r17,r4
   22c3c:	28001c16 	blt	r5,zero,22cb0 <__smakebuf_r+0xa4>
   22c40:	d80d883a 	mov	r6,sp
   22c44:	0022e280 	call	22e28 <_fstat_r>
   22c48:	10001816 	blt	r2,zero,22cac <__smakebuf_r+0xa0>
   22c4c:	d8800117 	ldw	r2,4(sp)
   22c50:	00e00014 	movui	r3,32768
   22c54:	10bc000c 	andi	r2,r2,61440
   22c58:	14c80020 	cmpeqi	r19,r2,8192
   22c5c:	10c03726 	beq	r2,r3,22d3c <__smakebuf_r+0x130>
   22c60:	80c0030b 	ldhu	r3,12(r16)
   22c64:	18c20014 	ori	r3,r3,2048
   22c68:	80c0030d 	sth	r3,12(r16)
   22c6c:	00c80004 	movi	r3,8192
   22c70:	10c0521e 	bne	r2,r3,22dbc <__smakebuf_r+0x1b0>
   22c74:	8140038f 	ldh	r5,14(r16)
   22c78:	8809883a 	mov	r4,r17
   22c7c:	0022e840 	call	22e84 <_isatty_r>
   22c80:	10004c26 	beq	r2,zero,22db4 <__smakebuf_r+0x1a8>
   22c84:	8080030b 	ldhu	r2,12(r16)
   22c88:	80c010c4 	addi	r3,r16,67
   22c8c:	80c00015 	stw	r3,0(r16)
   22c90:	10800054 	ori	r2,r2,1
   22c94:	8080030d 	sth	r2,12(r16)
   22c98:	00800044 	movi	r2,1
   22c9c:	80c00415 	stw	r3,16(r16)
   22ca0:	80800515 	stw	r2,20(r16)
   22ca4:	04810004 	movi	r18,1024
   22ca8:	00000706 	br	22cc8 <__smakebuf_r+0xbc>
   22cac:	8080030b 	ldhu	r2,12(r16)
   22cb0:	10c0200c 	andi	r3,r2,128
   22cb4:	18001f1e 	bne	r3,zero,22d34 <__smakebuf_r+0x128>
   22cb8:	04810004 	movi	r18,1024
   22cbc:	10820014 	ori	r2,r2,2048
   22cc0:	8080030d 	sth	r2,12(r16)
   22cc4:	0027883a 	mov	r19,zero
   22cc8:	900b883a 	mov	r5,r18
   22ccc:	8809883a 	mov	r4,r17
   22cd0:	0020e140 	call	20e14 <_malloc_r>
   22cd4:	10002c26 	beq	r2,zero,22d88 <__smakebuf_r+0x17c>
   22cd8:	80c0030b 	ldhu	r3,12(r16)
   22cdc:	010000b4 	movhi	r4,2
   22ce0:	21010e04 	addi	r4,r4,1080
   22ce4:	89000f15 	stw	r4,60(r17)
   22ce8:	18c02014 	ori	r3,r3,128
   22cec:	80c0030d 	sth	r3,12(r16)
   22cf0:	80800015 	stw	r2,0(r16)
   22cf4:	80800415 	stw	r2,16(r16)
   22cf8:	84800515 	stw	r18,20(r16)
   22cfc:	98001a1e 	bne	r19,zero,22d68 <__smakebuf_r+0x15c>
   22d00:	dfc01317 	ldw	ra,76(sp)
   22d04:	dcc01217 	ldw	r19,72(sp)
   22d08:	dc801117 	ldw	r18,68(sp)
   22d0c:	dc401017 	ldw	r17,64(sp)
   22d10:	dc000f17 	ldw	r16,60(sp)
   22d14:	dec01404 	addi	sp,sp,80
   22d18:	f800283a 	ret
   22d1c:	288010c4 	addi	r2,r5,67
   22d20:	28800015 	stw	r2,0(r5)
   22d24:	28800415 	stw	r2,16(r5)
   22d28:	00800044 	movi	r2,1
   22d2c:	28800515 	stw	r2,20(r5)
   22d30:	f800283a 	ret
   22d34:	04801004 	movi	r18,64
   22d38:	003fe006 	br	22cbc <__smakebuf_r+0xb0>
   22d3c:	81000a17 	ldw	r4,40(r16)
   22d40:	00c000b4 	movhi	r3,2
   22d44:	18c85804 	addi	r3,r3,8544
   22d48:	20ffc51e 	bne	r4,r3,22c60 <__smakebuf_r+0x54>
   22d4c:	8080030b 	ldhu	r2,12(r16)
   22d50:	04810004 	movi	r18,1024
   22d54:	84801315 	stw	r18,76(r16)
   22d58:	1484b03a 	or	r2,r2,r18
   22d5c:	8080030d 	sth	r2,12(r16)
   22d60:	0027883a 	mov	r19,zero
   22d64:	003fd806 	br	22cc8 <__smakebuf_r+0xbc>
   22d68:	8140038f 	ldh	r5,14(r16)
   22d6c:	8809883a 	mov	r4,r17
   22d70:	0022e840 	call	22e84 <_isatty_r>
   22d74:	103fe226 	beq	r2,zero,22d00 <__smakebuf_r+0xf4>
   22d78:	8080030b 	ldhu	r2,12(r16)
   22d7c:	10800054 	ori	r2,r2,1
   22d80:	8080030d 	sth	r2,12(r16)
   22d84:	003fde06 	br	22d00 <__smakebuf_r+0xf4>
   22d88:	8080030b 	ldhu	r2,12(r16)
   22d8c:	10c0800c 	andi	r3,r2,512
   22d90:	183fdb1e 	bne	r3,zero,22d00 <__smakebuf_r+0xf4>
   22d94:	10800094 	ori	r2,r2,2
   22d98:	80c010c4 	addi	r3,r16,67
   22d9c:	8080030d 	sth	r2,12(r16)
   22da0:	00800044 	movi	r2,1
   22da4:	80c00015 	stw	r3,0(r16)
   22da8:	80c00415 	stw	r3,16(r16)
   22dac:	80800515 	stw	r2,20(r16)
   22db0:	003fd306 	br	22d00 <__smakebuf_r+0xf4>
   22db4:	04810004 	movi	r18,1024
   22db8:	003fc306 	br	22cc8 <__smakebuf_r+0xbc>
   22dbc:	0027883a 	mov	r19,zero
   22dc0:	04810004 	movi	r18,1024
   22dc4:	003fc006 	br	22cc8 <__smakebuf_r+0xbc>

00022dc8 <_read_r>:
   22dc8:	defffd04 	addi	sp,sp,-12
   22dcc:	2805883a 	mov	r2,r5
   22dd0:	dc000015 	stw	r16,0(sp)
   22dd4:	040000f4 	movhi	r16,3
   22dd8:	dc400115 	stw	r17,4(sp)
   22ddc:	300b883a 	mov	r5,r6
   22de0:	84293604 	addi	r16,r16,-23336
   22de4:	2023883a 	mov	r17,r4
   22de8:	380d883a 	mov	r6,r7
   22dec:	1009883a 	mov	r4,r2
   22df0:	dfc00215 	stw	ra,8(sp)
   22df4:	80000015 	stw	zero,0(r16)
   22df8:	002368c0 	call	2368c <read>
   22dfc:	00ffffc4 	movi	r3,-1
   22e00:	10c00526 	beq	r2,r3,22e18 <_read_r+0x50>
   22e04:	dfc00217 	ldw	ra,8(sp)
   22e08:	dc400117 	ldw	r17,4(sp)
   22e0c:	dc000017 	ldw	r16,0(sp)
   22e10:	dec00304 	addi	sp,sp,12
   22e14:	f800283a 	ret
   22e18:	80c00017 	ldw	r3,0(r16)
   22e1c:	183ff926 	beq	r3,zero,22e04 <_read_r+0x3c>
   22e20:	88c00015 	stw	r3,0(r17)
   22e24:	003ff706 	br	22e04 <_read_r+0x3c>

00022e28 <_fstat_r>:
   22e28:	defffd04 	addi	sp,sp,-12
   22e2c:	2805883a 	mov	r2,r5
   22e30:	dc000015 	stw	r16,0(sp)
   22e34:	040000f4 	movhi	r16,3
   22e38:	dc400115 	stw	r17,4(sp)
   22e3c:	84293604 	addi	r16,r16,-23336
   22e40:	2023883a 	mov	r17,r4
   22e44:	300b883a 	mov	r5,r6
   22e48:	1009883a 	mov	r4,r2
   22e4c:	dfc00215 	stw	ra,8(sp)
   22e50:	80000015 	stw	zero,0(r16)
   22e54:	00232000 	call	23200 <fstat>
   22e58:	00ffffc4 	movi	r3,-1
   22e5c:	10c00526 	beq	r2,r3,22e74 <_fstat_r+0x4c>
   22e60:	dfc00217 	ldw	ra,8(sp)
   22e64:	dc400117 	ldw	r17,4(sp)
   22e68:	dc000017 	ldw	r16,0(sp)
   22e6c:	dec00304 	addi	sp,sp,12
   22e70:	f800283a 	ret
   22e74:	80c00017 	ldw	r3,0(r16)
   22e78:	183ff926 	beq	r3,zero,22e60 <_fstat_r+0x38>
   22e7c:	88c00015 	stw	r3,0(r17)
   22e80:	003ff706 	br	22e60 <_fstat_r+0x38>

00022e84 <_isatty_r>:
   22e84:	defffd04 	addi	sp,sp,-12
   22e88:	dc000015 	stw	r16,0(sp)
   22e8c:	040000f4 	movhi	r16,3
   22e90:	dc400115 	stw	r17,4(sp)
   22e94:	84293604 	addi	r16,r16,-23336
   22e98:	2023883a 	mov	r17,r4
   22e9c:	2809883a 	mov	r4,r5
   22ea0:	dfc00215 	stw	ra,8(sp)
   22ea4:	80000015 	stw	zero,0(r16)
   22ea8:	00232ec0 	call	232ec <isatty>
   22eac:	00ffffc4 	movi	r3,-1
   22eb0:	10c00526 	beq	r2,r3,22ec8 <_isatty_r+0x44>
   22eb4:	dfc00217 	ldw	ra,8(sp)
   22eb8:	dc400117 	ldw	r17,4(sp)
   22ebc:	dc000017 	ldw	r16,0(sp)
   22ec0:	dec00304 	addi	sp,sp,12
   22ec4:	f800283a 	ret
   22ec8:	80c00017 	ldw	r3,0(r16)
   22ecc:	183ff926 	beq	r3,zero,22eb4 <_isatty_r+0x30>
   22ed0:	88c00015 	stw	r3,0(r17)
   22ed4:	003ff706 	br	22eb4 <_isatty_r+0x30>

00022ed8 <__divsi3>:
   22ed8:	20001b16 	blt	r4,zero,22f48 <__divsi3+0x70>
   22edc:	000f883a 	mov	r7,zero
   22ee0:	28001616 	blt	r5,zero,22f3c <__divsi3+0x64>
   22ee4:	200d883a 	mov	r6,r4
   22ee8:	29001a2e 	bgeu	r5,r4,22f54 <__divsi3+0x7c>
   22eec:	00800804 	movi	r2,32
   22ef0:	00c00044 	movi	r3,1
   22ef4:	00000106 	br	22efc <__divsi3+0x24>
   22ef8:	10000d26 	beq	r2,zero,22f30 <__divsi3+0x58>
   22efc:	294b883a 	add	r5,r5,r5
   22f00:	10bfffc4 	addi	r2,r2,-1
   22f04:	18c7883a 	add	r3,r3,r3
   22f08:	293ffb36 	bltu	r5,r4,22ef8 <__divsi3+0x20>
   22f0c:	0005883a 	mov	r2,zero
   22f10:	18000726 	beq	r3,zero,22f30 <__divsi3+0x58>
   22f14:	0005883a 	mov	r2,zero
   22f18:	31400236 	bltu	r6,r5,22f24 <__divsi3+0x4c>
   22f1c:	314dc83a 	sub	r6,r6,r5
   22f20:	10c4b03a 	or	r2,r2,r3
   22f24:	1806d07a 	srli	r3,r3,1
   22f28:	280ad07a 	srli	r5,r5,1
   22f2c:	183ffa1e 	bne	r3,zero,22f18 <__divsi3+0x40>
   22f30:	38000126 	beq	r7,zero,22f38 <__divsi3+0x60>
   22f34:	0085c83a 	sub	r2,zero,r2
   22f38:	f800283a 	ret
   22f3c:	014bc83a 	sub	r5,zero,r5
   22f40:	39c0005c 	xori	r7,r7,1
   22f44:	003fe706 	br	22ee4 <__divsi3+0xc>
   22f48:	0109c83a 	sub	r4,zero,r4
   22f4c:	01c00044 	movi	r7,1
   22f50:	003fe306 	br	22ee0 <__divsi3+0x8>
   22f54:	00c00044 	movi	r3,1
   22f58:	003fee06 	br	22f14 <__divsi3+0x3c>

00022f5c <__modsi3>:
   22f5c:	20001716 	blt	r4,zero,22fbc <__modsi3+0x60>
   22f60:	000f883a 	mov	r7,zero
   22f64:	2005883a 	mov	r2,r4
   22f68:	28001216 	blt	r5,zero,22fb4 <__modsi3+0x58>
   22f6c:	2900162e 	bgeu	r5,r4,22fc8 <__modsi3+0x6c>
   22f70:	01800804 	movi	r6,32
   22f74:	00c00044 	movi	r3,1
   22f78:	00000106 	br	22f80 <__modsi3+0x24>
   22f7c:	30000a26 	beq	r6,zero,22fa8 <__modsi3+0x4c>
   22f80:	294b883a 	add	r5,r5,r5
   22f84:	31bfffc4 	addi	r6,r6,-1
   22f88:	18c7883a 	add	r3,r3,r3
   22f8c:	293ffb36 	bltu	r5,r4,22f7c <__modsi3+0x20>
   22f90:	18000526 	beq	r3,zero,22fa8 <__modsi3+0x4c>
   22f94:	1806d07a 	srli	r3,r3,1
   22f98:	11400136 	bltu	r2,r5,22fa0 <__modsi3+0x44>
   22f9c:	1145c83a 	sub	r2,r2,r5
   22fa0:	280ad07a 	srli	r5,r5,1
   22fa4:	183ffb1e 	bne	r3,zero,22f94 <__modsi3+0x38>
   22fa8:	38000126 	beq	r7,zero,22fb0 <__modsi3+0x54>
   22fac:	0085c83a 	sub	r2,zero,r2
   22fb0:	f800283a 	ret
   22fb4:	014bc83a 	sub	r5,zero,r5
   22fb8:	003fec06 	br	22f6c <__modsi3+0x10>
   22fbc:	0109c83a 	sub	r4,zero,r4
   22fc0:	01c00044 	movi	r7,1
   22fc4:	003fe706 	br	22f64 <__modsi3+0x8>
   22fc8:	00c00044 	movi	r3,1
   22fcc:	003ff106 	br	22f94 <__modsi3+0x38>

00022fd0 <__udivsi3>:
   22fd0:	200d883a 	mov	r6,r4
   22fd4:	2900152e 	bgeu	r5,r4,2302c <__udivsi3+0x5c>
   22fd8:	28001416 	blt	r5,zero,2302c <__udivsi3+0x5c>
   22fdc:	00800804 	movi	r2,32
   22fe0:	00c00044 	movi	r3,1
   22fe4:	00000206 	br	22ff0 <__udivsi3+0x20>
   22fe8:	10000e26 	beq	r2,zero,23024 <__udivsi3+0x54>
   22fec:	28000516 	blt	r5,zero,23004 <__udivsi3+0x34>
   22ff0:	294b883a 	add	r5,r5,r5
   22ff4:	10bfffc4 	addi	r2,r2,-1
   22ff8:	18c7883a 	add	r3,r3,r3
   22ffc:	293ffa36 	bltu	r5,r4,22fe8 <__udivsi3+0x18>
   23000:	18000826 	beq	r3,zero,23024 <__udivsi3+0x54>
   23004:	0005883a 	mov	r2,zero
   23008:	31400236 	bltu	r6,r5,23014 <__udivsi3+0x44>
   2300c:	314dc83a 	sub	r6,r6,r5
   23010:	10c4b03a 	or	r2,r2,r3
   23014:	1806d07a 	srli	r3,r3,1
   23018:	280ad07a 	srli	r5,r5,1
   2301c:	183ffa1e 	bne	r3,zero,23008 <__udivsi3+0x38>
   23020:	f800283a 	ret
   23024:	0005883a 	mov	r2,zero
   23028:	f800283a 	ret
   2302c:	00c00044 	movi	r3,1
   23030:	003ff406 	br	23004 <__udivsi3+0x34>

00023034 <__umodsi3>:
   23034:	2005883a 	mov	r2,r4
   23038:	2900122e 	bgeu	r5,r4,23084 <__umodsi3+0x50>
   2303c:	28001116 	blt	r5,zero,23084 <__umodsi3+0x50>
   23040:	01800804 	movi	r6,32
   23044:	00c00044 	movi	r3,1
   23048:	00000206 	br	23054 <__umodsi3+0x20>
   2304c:	30000c26 	beq	r6,zero,23080 <__umodsi3+0x4c>
   23050:	28000516 	blt	r5,zero,23068 <__umodsi3+0x34>
   23054:	294b883a 	add	r5,r5,r5
   23058:	31bfffc4 	addi	r6,r6,-1
   2305c:	18c7883a 	add	r3,r3,r3
   23060:	293ffa36 	bltu	r5,r4,2304c <__umodsi3+0x18>
   23064:	18000626 	beq	r3,zero,23080 <__umodsi3+0x4c>
   23068:	1806d07a 	srli	r3,r3,1
   2306c:	11400136 	bltu	r2,r5,23074 <__umodsi3+0x40>
   23070:	1145c83a 	sub	r2,r2,r5
   23074:	280ad07a 	srli	r5,r5,1
   23078:	183ffb1e 	bne	r3,zero,23068 <__umodsi3+0x34>
   2307c:	f800283a 	ret
   23080:	f800283a 	ret
   23084:	00c00044 	movi	r3,1
   23088:	003ff706 	br	23068 <__umodsi3+0x34>

0002308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2308c:	defffe04 	addi	sp,sp,-8
   23090:	dfc00115 	stw	ra,4(sp)
   23094:	df000015 	stw	fp,0(sp)
   23098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2309c:	d0a00917 	ldw	r2,-32732(gp)
   230a0:	10000326 	beq	r2,zero,230b0 <alt_get_errno+0x24>
   230a4:	d0a00917 	ldw	r2,-32732(gp)
   230a8:	103ee83a 	callr	r2
   230ac:	00000106 	br	230b4 <alt_get_errno+0x28>
   230b0:	d0a6fb04 	addi	r2,gp,-25620
}
   230b4:	e037883a 	mov	sp,fp
   230b8:	dfc00117 	ldw	ra,4(sp)
   230bc:	df000017 	ldw	fp,0(sp)
   230c0:	dec00204 	addi	sp,sp,8
   230c4:	f800283a 	ret

000230c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   230c8:	defffb04 	addi	sp,sp,-20
   230cc:	dfc00415 	stw	ra,16(sp)
   230d0:	df000315 	stw	fp,12(sp)
   230d4:	df000304 	addi	fp,sp,12
   230d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   230dc:	e0bfff17 	ldw	r2,-4(fp)
   230e0:	10000616 	blt	r2,zero,230fc <close+0x34>
   230e4:	e0bfff17 	ldw	r2,-4(fp)
   230e8:	10c00324 	muli	r3,r2,12
   230ec:	008000b4 	movhi	r2,2
   230f0:	109d7c04 	addi	r2,r2,30192
   230f4:	1885883a 	add	r2,r3,r2
   230f8:	00000106 	br	23100 <close+0x38>
   230fc:	0005883a 	mov	r2,zero
   23100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23104:	e0bffd17 	ldw	r2,-12(fp)
   23108:	10001926 	beq	r2,zero,23170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2310c:	e0bffd17 	ldw	r2,-12(fp)
   23110:	10800017 	ldw	r2,0(r2)
   23114:	10800417 	ldw	r2,16(r2)
   23118:	10000626 	beq	r2,zero,23134 <close+0x6c>
   2311c:	e0bffd17 	ldw	r2,-12(fp)
   23120:	10800017 	ldw	r2,0(r2)
   23124:	10800417 	ldw	r2,16(r2)
   23128:	e13ffd17 	ldw	r4,-12(fp)
   2312c:	103ee83a 	callr	r2
   23130:	00000106 	br	23138 <close+0x70>
   23134:	0005883a 	mov	r2,zero
   23138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2313c:	e13fff17 	ldw	r4,-4(fp)
   23140:	00237880 	call	23788 <alt_release_fd>
    if (rval < 0)
   23144:	e0bffe17 	ldw	r2,-8(fp)
   23148:	1000070e 	bge	r2,zero,23168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2314c:	002308c0 	call	2308c <alt_get_errno>
   23150:	1007883a 	mov	r3,r2
   23154:	e0bffe17 	ldw	r2,-8(fp)
   23158:	0085c83a 	sub	r2,zero,r2
   2315c:	18800015 	stw	r2,0(r3)
      return -1;
   23160:	00bfffc4 	movi	r2,-1
   23164:	00000706 	br	23184 <close+0xbc>
    }
    return 0;
   23168:	0005883a 	mov	r2,zero
   2316c:	00000506 	br	23184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23170:	002308c0 	call	2308c <alt_get_errno>
   23174:	1007883a 	mov	r3,r2
   23178:	00801444 	movi	r2,81
   2317c:	18800015 	stw	r2,0(r3)
    return -1;
   23180:	00bfffc4 	movi	r2,-1
  }
}
   23184:	e037883a 	mov	sp,fp
   23188:	dfc00117 	ldw	ra,4(sp)
   2318c:	df000017 	ldw	fp,0(sp)
   23190:	dec00204 	addi	sp,sp,8
   23194:	f800283a 	ret

00023198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23198:	defffc04 	addi	sp,sp,-16
   2319c:	df000315 	stw	fp,12(sp)
   231a0:	df000304 	addi	fp,sp,12
   231a4:	e13ffd15 	stw	r4,-12(fp)
   231a8:	e17ffe15 	stw	r5,-8(fp)
   231ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   231b0:	e0bfff17 	ldw	r2,-4(fp)
}
   231b4:	e037883a 	mov	sp,fp
   231b8:	df000017 	ldw	fp,0(sp)
   231bc:	dec00104 	addi	sp,sp,4
   231c0:	f800283a 	ret

000231c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231c4:	defffe04 	addi	sp,sp,-8
   231c8:	dfc00115 	stw	ra,4(sp)
   231cc:	df000015 	stw	fp,0(sp)
   231d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231d4:	d0a00917 	ldw	r2,-32732(gp)
   231d8:	10000326 	beq	r2,zero,231e8 <alt_get_errno+0x24>
   231dc:	d0a00917 	ldw	r2,-32732(gp)
   231e0:	103ee83a 	callr	r2
   231e4:	00000106 	br	231ec <alt_get_errno+0x28>
   231e8:	d0a6fb04 	addi	r2,gp,-25620
}
   231ec:	e037883a 	mov	sp,fp
   231f0:	dfc00117 	ldw	ra,4(sp)
   231f4:	df000017 	ldw	fp,0(sp)
   231f8:	dec00204 	addi	sp,sp,8
   231fc:	f800283a 	ret

00023200 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23200:	defffb04 	addi	sp,sp,-20
   23204:	dfc00415 	stw	ra,16(sp)
   23208:	df000315 	stw	fp,12(sp)
   2320c:	df000304 	addi	fp,sp,12
   23210:	e13ffe15 	stw	r4,-8(fp)
   23214:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23218:	e0bffe17 	ldw	r2,-8(fp)
   2321c:	10000616 	blt	r2,zero,23238 <fstat+0x38>
   23220:	e0bffe17 	ldw	r2,-8(fp)
   23224:	10c00324 	muli	r3,r2,12
   23228:	008000b4 	movhi	r2,2
   2322c:	109d7c04 	addi	r2,r2,30192
   23230:	1885883a 	add	r2,r3,r2
   23234:	00000106 	br	2323c <fstat+0x3c>
   23238:	0005883a 	mov	r2,zero
   2323c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23240:	e0bffd17 	ldw	r2,-12(fp)
   23244:	10001026 	beq	r2,zero,23288 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23248:	e0bffd17 	ldw	r2,-12(fp)
   2324c:	10800017 	ldw	r2,0(r2)
   23250:	10800817 	ldw	r2,32(r2)
   23254:	10000726 	beq	r2,zero,23274 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   23258:	e0bffd17 	ldw	r2,-12(fp)
   2325c:	10800017 	ldw	r2,0(r2)
   23260:	10800817 	ldw	r2,32(r2)
   23264:	e17fff17 	ldw	r5,-4(fp)
   23268:	e13ffd17 	ldw	r4,-12(fp)
   2326c:	103ee83a 	callr	r2
   23270:	00000a06 	br	2329c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23274:	e0bfff17 	ldw	r2,-4(fp)
   23278:	00c80004 	movi	r3,8192
   2327c:	10c00115 	stw	r3,4(r2)
      return 0;
   23280:	0005883a 	mov	r2,zero
   23284:	00000506 	br	2329c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23288:	00231c40 	call	231c4 <alt_get_errno>
   2328c:	1007883a 	mov	r3,r2
   23290:	00801444 	movi	r2,81
   23294:	18800015 	stw	r2,0(r3)
    return -1;
   23298:	00bfffc4 	movi	r2,-1
  }
}
   2329c:	e037883a 	mov	sp,fp
   232a0:	dfc00117 	ldw	ra,4(sp)
   232a4:	df000017 	ldw	fp,0(sp)
   232a8:	dec00204 	addi	sp,sp,8
   232ac:	f800283a 	ret

000232b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   232b0:	defffe04 	addi	sp,sp,-8
   232b4:	dfc00115 	stw	ra,4(sp)
   232b8:	df000015 	stw	fp,0(sp)
   232bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232c0:	d0a00917 	ldw	r2,-32732(gp)
   232c4:	10000326 	beq	r2,zero,232d4 <alt_get_errno+0x24>
   232c8:	d0a00917 	ldw	r2,-32732(gp)
   232cc:	103ee83a 	callr	r2
   232d0:	00000106 	br	232d8 <alt_get_errno+0x28>
   232d4:	d0a6fb04 	addi	r2,gp,-25620
}
   232d8:	e037883a 	mov	sp,fp
   232dc:	dfc00117 	ldw	ra,4(sp)
   232e0:	df000017 	ldw	fp,0(sp)
   232e4:	dec00204 	addi	sp,sp,8
   232e8:	f800283a 	ret

000232ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   232ec:	deffed04 	addi	sp,sp,-76
   232f0:	dfc01215 	stw	ra,72(sp)
   232f4:	df001115 	stw	fp,68(sp)
   232f8:	df001104 	addi	fp,sp,68
   232fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23300:	e0bfff17 	ldw	r2,-4(fp)
   23304:	10000616 	blt	r2,zero,23320 <isatty+0x34>
   23308:	e0bfff17 	ldw	r2,-4(fp)
   2330c:	10c00324 	muli	r3,r2,12
   23310:	008000b4 	movhi	r2,2
   23314:	109d7c04 	addi	r2,r2,30192
   23318:	1885883a 	add	r2,r3,r2
   2331c:	00000106 	br	23324 <isatty+0x38>
   23320:	0005883a 	mov	r2,zero
   23324:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23328:	e0bfef17 	ldw	r2,-68(fp)
   2332c:	10000e26 	beq	r2,zero,23368 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23330:	e0bfef17 	ldw	r2,-68(fp)
   23334:	10800017 	ldw	r2,0(r2)
   23338:	10800817 	ldw	r2,32(r2)
   2333c:	1000021e 	bne	r2,zero,23348 <isatty+0x5c>
    {
      return 1;
   23340:	00800044 	movi	r2,1
   23344:	00000d06 	br	2337c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23348:	e0bff004 	addi	r2,fp,-64
   2334c:	100b883a 	mov	r5,r2
   23350:	e13fff17 	ldw	r4,-4(fp)
   23354:	00232000 	call	23200 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23358:	e0bff117 	ldw	r2,-60(fp)
   2335c:	10880020 	cmpeqi	r2,r2,8192
   23360:	10803fcc 	andi	r2,r2,255
   23364:	00000506 	br	2337c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23368:	00232b00 	call	232b0 <alt_get_errno>
   2336c:	1007883a 	mov	r3,r2
   23370:	00801444 	movi	r2,81
   23374:	18800015 	stw	r2,0(r3)
    return 0;
   23378:	0005883a 	mov	r2,zero
  }
}
   2337c:	e037883a 	mov	sp,fp
   23380:	dfc00117 	ldw	ra,4(sp)
   23384:	df000017 	ldw	fp,0(sp)
   23388:	dec00204 	addi	sp,sp,8
   2338c:	f800283a 	ret

00023390 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23390:	defffc04 	addi	sp,sp,-16
   23394:	df000315 	stw	fp,12(sp)
   23398:	df000304 	addi	fp,sp,12
   2339c:	e13ffd15 	stw	r4,-12(fp)
   233a0:	e17ffe15 	stw	r5,-8(fp)
   233a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   233a8:	e0fffe17 	ldw	r3,-8(fp)
   233ac:	e0bffd17 	ldw	r2,-12(fp)
   233b0:	18800c26 	beq	r3,r2,233e4 <alt_load_section+0x54>
  {
    while( to != end )
   233b4:	00000806 	br	233d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   233b8:	e0bffe17 	ldw	r2,-8(fp)
   233bc:	10c00104 	addi	r3,r2,4
   233c0:	e0fffe15 	stw	r3,-8(fp)
   233c4:	e0fffd17 	ldw	r3,-12(fp)
   233c8:	19000104 	addi	r4,r3,4
   233cc:	e13ffd15 	stw	r4,-12(fp)
   233d0:	18c00017 	ldw	r3,0(r3)
   233d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   233d8:	e0fffe17 	ldw	r3,-8(fp)
   233dc:	e0bfff17 	ldw	r2,-4(fp)
   233e0:	18bff51e 	bne	r3,r2,233b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   233e4:	0001883a 	nop
   233e8:	e037883a 	mov	sp,fp
   233ec:	df000017 	ldw	fp,0(sp)
   233f0:	dec00104 	addi	sp,sp,4
   233f4:	f800283a 	ret

000233f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   233f8:	defffe04 	addi	sp,sp,-8
   233fc:	dfc00115 	stw	ra,4(sp)
   23400:	df000015 	stw	fp,0(sp)
   23404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23408:	018000f4 	movhi	r6,3
   2340c:	31a24d04 	addi	r6,r6,-30412
   23410:	014000b4 	movhi	r5,2
   23414:	295b6704 	addi	r5,r5,28060
   23418:	010000f4 	movhi	r4,3
   2341c:	21224d04 	addi	r4,r4,-30412
   23420:	00233900 	call	23390 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23424:	018000b4 	movhi	r6,2
   23428:	31809104 	addi	r6,r6,580
   2342c:	014000b4 	movhi	r5,2
   23430:	29400804 	addi	r5,r5,32
   23434:	010000b4 	movhi	r4,2
   23438:	21000804 	addi	r4,r4,32
   2343c:	00233900 	call	23390 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23440:	018000b4 	movhi	r6,2
   23444:	319b6704 	addi	r6,r6,28060
   23448:	014000b4 	movhi	r5,2
   2344c:	295b4504 	addi	r5,r5,27924
   23450:	010000b4 	movhi	r4,2
   23454:	211b4504 	addi	r4,r4,27924
   23458:	00233900 	call	23390 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2345c:	0025c000 	call	25c00 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23460:	0025e780 	call	25e78 <alt_icache_flush_all>
}
   23464:	0001883a 	nop
   23468:	e037883a 	mov	sp,fp
   2346c:	dfc00117 	ldw	ra,4(sp)
   23470:	df000017 	ldw	fp,0(sp)
   23474:	dec00204 	addi	sp,sp,8
   23478:	f800283a 	ret

0002347c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2347c:	defffe04 	addi	sp,sp,-8
   23480:	dfc00115 	stw	ra,4(sp)
   23484:	df000015 	stw	fp,0(sp)
   23488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2348c:	d0a00917 	ldw	r2,-32732(gp)
   23490:	10000326 	beq	r2,zero,234a0 <alt_get_errno+0x24>
   23494:	d0a00917 	ldw	r2,-32732(gp)
   23498:	103ee83a 	callr	r2
   2349c:	00000106 	br	234a4 <alt_get_errno+0x28>
   234a0:	d0a6fb04 	addi	r2,gp,-25620
}
   234a4:	e037883a 	mov	sp,fp
   234a8:	dfc00117 	ldw	ra,4(sp)
   234ac:	df000017 	ldw	fp,0(sp)
   234b0:	dec00204 	addi	sp,sp,8
   234b4:	f800283a 	ret

000234b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   234b8:	defff904 	addi	sp,sp,-28
   234bc:	dfc00615 	stw	ra,24(sp)
   234c0:	df000515 	stw	fp,20(sp)
   234c4:	df000504 	addi	fp,sp,20
   234c8:	e13ffd15 	stw	r4,-12(fp)
   234cc:	e17ffe15 	stw	r5,-8(fp)
   234d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   234d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   234d8:	e0bffd17 	ldw	r2,-12(fp)
   234dc:	10000616 	blt	r2,zero,234f8 <lseek+0x40>
   234e0:	e0bffd17 	ldw	r2,-12(fp)
   234e4:	10c00324 	muli	r3,r2,12
   234e8:	008000b4 	movhi	r2,2
   234ec:	109d7c04 	addi	r2,r2,30192
   234f0:	1885883a 	add	r2,r3,r2
   234f4:	00000106 	br	234fc <lseek+0x44>
   234f8:	0005883a 	mov	r2,zero
   234fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23500:	e0bffc17 	ldw	r2,-16(fp)
   23504:	10001026 	beq	r2,zero,23548 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23508:	e0bffc17 	ldw	r2,-16(fp)
   2350c:	10800017 	ldw	r2,0(r2)
   23510:	10800717 	ldw	r2,28(r2)
   23514:	10000926 	beq	r2,zero,2353c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23518:	e0bffc17 	ldw	r2,-16(fp)
   2351c:	10800017 	ldw	r2,0(r2)
   23520:	10800717 	ldw	r2,28(r2)
   23524:	e1bfff17 	ldw	r6,-4(fp)
   23528:	e17ffe17 	ldw	r5,-8(fp)
   2352c:	e13ffc17 	ldw	r4,-16(fp)
   23530:	103ee83a 	callr	r2
   23534:	e0bffb15 	stw	r2,-20(fp)
   23538:	00000506 	br	23550 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2353c:	00bfde84 	movi	r2,-134
   23540:	e0bffb15 	stw	r2,-20(fp)
   23544:	00000206 	br	23550 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   23548:	00bfebc4 	movi	r2,-81
   2354c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23550:	e0bffb17 	ldw	r2,-20(fp)
   23554:	1000070e 	bge	r2,zero,23574 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   23558:	002347c0 	call	2347c <alt_get_errno>
   2355c:	1007883a 	mov	r3,r2
   23560:	e0bffb17 	ldw	r2,-20(fp)
   23564:	0085c83a 	sub	r2,zero,r2
   23568:	18800015 	stw	r2,0(r3)
    rc = -1;
   2356c:	00bfffc4 	movi	r2,-1
   23570:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23574:	e0bffb17 	ldw	r2,-20(fp)
}
   23578:	e037883a 	mov	sp,fp
   2357c:	dfc00117 	ldw	ra,4(sp)
   23580:	df000017 	ldw	fp,0(sp)
   23584:	dec00204 	addi	sp,sp,8
   23588:	f800283a 	ret

0002358c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2358c:	defffd04 	addi	sp,sp,-12
   23590:	dfc00215 	stw	ra,8(sp)
   23594:	df000115 	stw	fp,4(sp)
   23598:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2359c:	0009883a 	mov	r4,zero
   235a0:	0023aa80 	call	23aa8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   235a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   235a8:	0023ae00 	call	23ae0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   235ac:	018000b4 	movhi	r6,2
   235b0:	319b4f04 	addi	r6,r6,27964
   235b4:	014000b4 	movhi	r5,2
   235b8:	295b4f04 	addi	r5,r5,27964
   235bc:	010000b4 	movhi	r4,2
   235c0:	211b4f04 	addi	r4,r4,27964
   235c4:	00262100 	call	26210 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   235c8:	0025d280 	call	25d28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   235cc:	010000b4 	movhi	r4,2
   235d0:	21176204 	addi	r4,r4,23944
   235d4:	00269800 	call	26980 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   235d8:	d0a6fc17 	ldw	r2,-25616(gp)
   235dc:	d0e6fd17 	ldw	r3,-25612(gp)
   235e0:	d126fe17 	ldw	r4,-25608(gp)
   235e4:	200d883a 	mov	r6,r4
   235e8:	180b883a 	mov	r5,r3
   235ec:	1009883a 	mov	r4,r2
   235f0:	00202900 	call	20290 <main>
   235f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   235f8:	01000044 	movi	r4,1
   235fc:	00230c80 	call	230c8 <close>
  exit (result);
   23600:	e13fff17 	ldw	r4,-4(fp)
   23604:	00269940 	call	26994 <exit>

00023608 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23608:	defffe04 	addi	sp,sp,-8
   2360c:	df000115 	stw	fp,4(sp)
   23610:	df000104 	addi	fp,sp,4
   23614:	e13fff15 	stw	r4,-4(fp)
}
   23618:	0001883a 	nop
   2361c:	e037883a 	mov	sp,fp
   23620:	df000017 	ldw	fp,0(sp)
   23624:	dec00104 	addi	sp,sp,4
   23628:	f800283a 	ret

0002362c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2362c:	defffe04 	addi	sp,sp,-8
   23630:	df000115 	stw	fp,4(sp)
   23634:	df000104 	addi	fp,sp,4
   23638:	e13fff15 	stw	r4,-4(fp)
}
   2363c:	0001883a 	nop
   23640:	e037883a 	mov	sp,fp
   23644:	df000017 	ldw	fp,0(sp)
   23648:	dec00104 	addi	sp,sp,4
   2364c:	f800283a 	ret

00023650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23650:	defffe04 	addi	sp,sp,-8
   23654:	dfc00115 	stw	ra,4(sp)
   23658:	df000015 	stw	fp,0(sp)
   2365c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23660:	d0a00917 	ldw	r2,-32732(gp)
   23664:	10000326 	beq	r2,zero,23674 <alt_get_errno+0x24>
   23668:	d0a00917 	ldw	r2,-32732(gp)
   2366c:	103ee83a 	callr	r2
   23670:	00000106 	br	23678 <alt_get_errno+0x28>
   23674:	d0a6fb04 	addi	r2,gp,-25620
}
   23678:	e037883a 	mov	sp,fp
   2367c:	dfc00117 	ldw	ra,4(sp)
   23680:	df000017 	ldw	fp,0(sp)
   23684:	dec00204 	addi	sp,sp,8
   23688:	f800283a 	ret

0002368c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2368c:	defff904 	addi	sp,sp,-28
   23690:	dfc00615 	stw	ra,24(sp)
   23694:	df000515 	stw	fp,20(sp)
   23698:	df000504 	addi	fp,sp,20
   2369c:	e13ffd15 	stw	r4,-12(fp)
   236a0:	e17ffe15 	stw	r5,-8(fp)
   236a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   236a8:	e0bffd17 	ldw	r2,-12(fp)
   236ac:	10000616 	blt	r2,zero,236c8 <read+0x3c>
   236b0:	e0bffd17 	ldw	r2,-12(fp)
   236b4:	10c00324 	muli	r3,r2,12
   236b8:	008000b4 	movhi	r2,2
   236bc:	109d7c04 	addi	r2,r2,30192
   236c0:	1885883a 	add	r2,r3,r2
   236c4:	00000106 	br	236cc <read+0x40>
   236c8:	0005883a 	mov	r2,zero
   236cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   236d0:	e0bffb17 	ldw	r2,-20(fp)
   236d4:	10002226 	beq	r2,zero,23760 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   236d8:	e0bffb17 	ldw	r2,-20(fp)
   236dc:	10800217 	ldw	r2,8(r2)
   236e0:	108000cc 	andi	r2,r2,3
   236e4:	10800060 	cmpeqi	r2,r2,1
   236e8:	1000181e 	bne	r2,zero,2374c <read+0xc0>
        (fd->dev->read))
   236ec:	e0bffb17 	ldw	r2,-20(fp)
   236f0:	10800017 	ldw	r2,0(r2)
   236f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   236f8:	10001426 	beq	r2,zero,2374c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   236fc:	e0bffb17 	ldw	r2,-20(fp)
   23700:	10800017 	ldw	r2,0(r2)
   23704:	10800517 	ldw	r2,20(r2)
   23708:	e0ffff17 	ldw	r3,-4(fp)
   2370c:	180d883a 	mov	r6,r3
   23710:	e17ffe17 	ldw	r5,-8(fp)
   23714:	e13ffb17 	ldw	r4,-20(fp)
   23718:	103ee83a 	callr	r2
   2371c:	e0bffc15 	stw	r2,-16(fp)
   23720:	e0bffc17 	ldw	r2,-16(fp)
   23724:	1000070e 	bge	r2,zero,23744 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   23728:	00236500 	call	23650 <alt_get_errno>
   2372c:	1007883a 	mov	r3,r2
   23730:	e0bffc17 	ldw	r2,-16(fp)
   23734:	0085c83a 	sub	r2,zero,r2
   23738:	18800015 	stw	r2,0(r3)
          return -1;
   2373c:	00bfffc4 	movi	r2,-1
   23740:	00000c06 	br	23774 <read+0xe8>
        }
        return rval;
   23744:	e0bffc17 	ldw	r2,-16(fp)
   23748:	00000a06 	br	23774 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2374c:	00236500 	call	23650 <alt_get_errno>
   23750:	1007883a 	mov	r3,r2
   23754:	00800344 	movi	r2,13
   23758:	18800015 	stw	r2,0(r3)
   2375c:	00000406 	br	23770 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23760:	00236500 	call	23650 <alt_get_errno>
   23764:	1007883a 	mov	r3,r2
   23768:	00801444 	movi	r2,81
   2376c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23770:	00bfffc4 	movi	r2,-1
}
   23774:	e037883a 	mov	sp,fp
   23778:	dfc00117 	ldw	ra,4(sp)
   2377c:	df000017 	ldw	fp,0(sp)
   23780:	dec00204 	addi	sp,sp,8
   23784:	f800283a 	ret

00023788 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23788:	defffe04 	addi	sp,sp,-8
   2378c:	df000115 	stw	fp,4(sp)
   23790:	df000104 	addi	fp,sp,4
   23794:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   23798:	e0bfff17 	ldw	r2,-4(fp)
   2379c:	108000d0 	cmplti	r2,r2,3
   237a0:	10000d1e 	bne	r2,zero,237d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   237a4:	008000b4 	movhi	r2,2
   237a8:	109d7c04 	addi	r2,r2,30192
   237ac:	e0ffff17 	ldw	r3,-4(fp)
   237b0:	18c00324 	muli	r3,r3,12
   237b4:	10c5883a 	add	r2,r2,r3
   237b8:	10800204 	addi	r2,r2,8
   237bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   237c0:	008000b4 	movhi	r2,2
   237c4:	109d7c04 	addi	r2,r2,30192
   237c8:	e0ffff17 	ldw	r3,-4(fp)
   237cc:	18c00324 	muli	r3,r3,12
   237d0:	10c5883a 	add	r2,r2,r3
   237d4:	10000015 	stw	zero,0(r2)
  }
}
   237d8:	0001883a 	nop
   237dc:	e037883a 	mov	sp,fp
   237e0:	df000017 	ldw	fp,0(sp)
   237e4:	dec00104 	addi	sp,sp,4
   237e8:	f800283a 	ret

000237ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   237ec:	defff904 	addi	sp,sp,-28
   237f0:	df000615 	stw	fp,24(sp)
   237f4:	df000604 	addi	fp,sp,24
   237f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   237fc:	0005303a 	rdctl	r2,status
   23800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23804:	e0fffe17 	ldw	r3,-8(fp)
   23808:	00bfff84 	movi	r2,-2
   2380c:	1884703a 	and	r2,r3,r2
   23810:	1001703a 	wrctl	status,r2
  
  return context;
   23814:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23818:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2381c:	d0a00a17 	ldw	r2,-32728(gp)
   23820:	10c000c4 	addi	r3,r2,3
   23824:	00bfff04 	movi	r2,-4
   23828:	1884703a 	and	r2,r3,r2
   2382c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23830:	d0e00a17 	ldw	r3,-32728(gp)
   23834:	e0bfff17 	ldw	r2,-4(fp)
   23838:	1887883a 	add	r3,r3,r2
   2383c:	00800134 	movhi	r2,4
   23840:	10800004 	addi	r2,r2,0
   23844:	10c0062e 	bgeu	r2,r3,23860 <sbrk+0x74>
   23848:	e0bffb17 	ldw	r2,-20(fp)
   2384c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23850:	e0bffa17 	ldw	r2,-24(fp)
   23854:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23858:	00bfffc4 	movi	r2,-1
   2385c:	00000b06 	br	2388c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23860:	d0a00a17 	ldw	r2,-32728(gp)
   23864:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23868:	d0e00a17 	ldw	r3,-32728(gp)
   2386c:	e0bfff17 	ldw	r2,-4(fp)
   23870:	1885883a 	add	r2,r3,r2
   23874:	d0a00a15 	stw	r2,-32728(gp)
   23878:	e0bffb17 	ldw	r2,-20(fp)
   2387c:	e0bffc15 	stw	r2,-16(fp)
   23880:	e0bffc17 	ldw	r2,-16(fp)
   23884:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23888:	e0bffd17 	ldw	r2,-12(fp)
} 
   2388c:	e037883a 	mov	sp,fp
   23890:	df000017 	ldw	fp,0(sp)
   23894:	dec00104 	addi	sp,sp,4
   23898:	f800283a 	ret

0002389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2389c:	defffe04 	addi	sp,sp,-8
   238a0:	dfc00115 	stw	ra,4(sp)
   238a4:	df000015 	stw	fp,0(sp)
   238a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   238ac:	d0a00917 	ldw	r2,-32732(gp)
   238b0:	10000326 	beq	r2,zero,238c0 <alt_get_errno+0x24>
   238b4:	d0a00917 	ldw	r2,-32732(gp)
   238b8:	103ee83a 	callr	r2
   238bc:	00000106 	br	238c4 <alt_get_errno+0x28>
   238c0:	d0a6fb04 	addi	r2,gp,-25620
}
   238c4:	e037883a 	mov	sp,fp
   238c8:	dfc00117 	ldw	ra,4(sp)
   238cc:	df000017 	ldw	fp,0(sp)
   238d0:	dec00204 	addi	sp,sp,8
   238d4:	f800283a 	ret

000238d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   238d8:	defff904 	addi	sp,sp,-28
   238dc:	dfc00615 	stw	ra,24(sp)
   238e0:	df000515 	stw	fp,20(sp)
   238e4:	df000504 	addi	fp,sp,20
   238e8:	e13ffd15 	stw	r4,-12(fp)
   238ec:	e17ffe15 	stw	r5,-8(fp)
   238f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238f4:	e0bffd17 	ldw	r2,-12(fp)
   238f8:	10000616 	blt	r2,zero,23914 <write+0x3c>
   238fc:	e0bffd17 	ldw	r2,-12(fp)
   23900:	10c00324 	muli	r3,r2,12
   23904:	008000b4 	movhi	r2,2
   23908:	109d7c04 	addi	r2,r2,30192
   2390c:	1885883a 	add	r2,r3,r2
   23910:	00000106 	br	23918 <write+0x40>
   23914:	0005883a 	mov	r2,zero
   23918:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2391c:	e0bffb17 	ldw	r2,-20(fp)
   23920:	10002126 	beq	r2,zero,239a8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23924:	e0bffb17 	ldw	r2,-20(fp)
   23928:	10800217 	ldw	r2,8(r2)
   2392c:	108000cc 	andi	r2,r2,3
   23930:	10001826 	beq	r2,zero,23994 <write+0xbc>
   23934:	e0bffb17 	ldw	r2,-20(fp)
   23938:	10800017 	ldw	r2,0(r2)
   2393c:	10800617 	ldw	r2,24(r2)
   23940:	10001426 	beq	r2,zero,23994 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23944:	e0bffb17 	ldw	r2,-20(fp)
   23948:	10800017 	ldw	r2,0(r2)
   2394c:	10800617 	ldw	r2,24(r2)
   23950:	e0ffff17 	ldw	r3,-4(fp)
   23954:	180d883a 	mov	r6,r3
   23958:	e17ffe17 	ldw	r5,-8(fp)
   2395c:	e13ffb17 	ldw	r4,-20(fp)
   23960:	103ee83a 	callr	r2
   23964:	e0bffc15 	stw	r2,-16(fp)
   23968:	e0bffc17 	ldw	r2,-16(fp)
   2396c:	1000070e 	bge	r2,zero,2398c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   23970:	002389c0 	call	2389c <alt_get_errno>
   23974:	1007883a 	mov	r3,r2
   23978:	e0bffc17 	ldw	r2,-16(fp)
   2397c:	0085c83a 	sub	r2,zero,r2
   23980:	18800015 	stw	r2,0(r3)
        return -1;
   23984:	00bfffc4 	movi	r2,-1
   23988:	00000c06 	br	239bc <write+0xe4>
      }
      return rval;
   2398c:	e0bffc17 	ldw	r2,-16(fp)
   23990:	00000a06 	br	239bc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23994:	002389c0 	call	2389c <alt_get_errno>
   23998:	1007883a 	mov	r3,r2
   2399c:	00800344 	movi	r2,13
   239a0:	18800015 	stw	r2,0(r3)
   239a4:	00000406 	br	239b8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   239a8:	002389c0 	call	2389c <alt_get_errno>
   239ac:	1007883a 	mov	r3,r2
   239b0:	00801444 	movi	r2,81
   239b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   239b8:	00bfffc4 	movi	r2,-1
}
   239bc:	e037883a 	mov	sp,fp
   239c0:	dfc00117 	ldw	ra,4(sp)
   239c4:	df000017 	ldw	fp,0(sp)
   239c8:	dec00204 	addi	sp,sp,8
   239cc:	f800283a 	ret

000239d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   239d0:	defffd04 	addi	sp,sp,-12
   239d4:	dfc00215 	stw	ra,8(sp)
   239d8:	df000115 	stw	fp,4(sp)
   239dc:	df000104 	addi	fp,sp,4
   239e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   239e4:	d1600604 	addi	r5,gp,-32744
   239e8:	e13fff17 	ldw	r4,-4(fp)
   239ec:	0025c840 	call	25c84 <alt_dev_llist_insert>
}
   239f0:	e037883a 	mov	sp,fp
   239f4:	dfc00117 	ldw	ra,4(sp)
   239f8:	df000017 	ldw	fp,0(sp)
   239fc:	dec00204 	addi	sp,sp,8
   23a00:	f800283a 	ret

00023a04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23a04:	defffe04 	addi	sp,sp,-8
   23a08:	dfc00115 	stw	ra,4(sp)
   23a0c:	df000015 	stw	fp,0(sp)
   23a10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23a14:	d0a00917 	ldw	r2,-32732(gp)
   23a18:	10000326 	beq	r2,zero,23a28 <alt_get_errno+0x24>
   23a1c:	d0a00917 	ldw	r2,-32732(gp)
   23a20:	103ee83a 	callr	r2
   23a24:	00000106 	br	23a2c <alt_get_errno+0x28>
   23a28:	d0a6fb04 	addi	r2,gp,-25620
}
   23a2c:	e037883a 	mov	sp,fp
   23a30:	dfc00117 	ldw	ra,4(sp)
   23a34:	df000017 	ldw	fp,0(sp)
   23a38:	dec00204 	addi	sp,sp,8
   23a3c:	f800283a 	ret

00023a40 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
   23a40:	defffc04 	addi	sp,sp,-16
   23a44:	dfc00315 	stw	ra,12(sp)
   23a48:	df000215 	stw	fp,8(sp)
   23a4c:	df000204 	addi	fp,sp,8
   23a50:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   23a54:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
   23a58:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
   23a5c:	e0bffe17 	ldw	r2,-8(fp)
   23a60:	1000051e 	bne	r2,zero,23a78 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   23a64:	d1600d04 	addi	r5,gp,-32716
   23a68:	e13fff17 	ldw	r4,-4(fp)
   23a6c:	0025c840 	call	25c84 <alt_dev_llist_insert>
   23a70:	e0bffe15 	stw	r2,-8(fp)
   23a74:	00000606 	br	23a90 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
   23a78:	0023a040 	call	23a04 <alt_get_errno>
   23a7c:	1007883a 	mov	r3,r2
   23a80:	00800304 	movi	r2,12
   23a84:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
   23a88:	00bffd04 	movi	r2,-12
   23a8c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
   23a90:	e0bffe17 	ldw	r2,-8(fp)
}
   23a94:	e037883a 	mov	sp,fp
   23a98:	dfc00117 	ldw	ra,4(sp)
   23a9c:	df000017 	ldw	fp,0(sp)
   23aa0:	dec00204 	addi	sp,sp,8
   23aa4:	f800283a 	ret

00023aa8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23aa8:	defffd04 	addi	sp,sp,-12
   23aac:	dfc00215 	stw	ra,8(sp)
   23ab0:	df000115 	stw	fp,4(sp)
   23ab4:	df000104 	addi	fp,sp,4
   23ab8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_FFT, nios2_FFT);
   23abc:	00266840 	call	26684 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23ac0:	00800044 	movi	r2,1
   23ac4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23ac8:	0001883a 	nop
   23acc:	e037883a 	mov	sp,fp
   23ad0:	dfc00117 	ldw	ra,4(sp)
   23ad4:	df000017 	ldw	fp,0(sp)
   23ad8:	dec00204 	addi	sp,sp,8
   23adc:	f800283a 	ret

00023ae0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23ae0:	defffe04 	addi	sp,sp,-8
   23ae4:	dfc00115 	stw	ra,4(sp)
   23ae8:	df000015 	stw	fp,0(sp)
   23aec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   23af0:	01800084 	movi	r6,2
   23af4:	000b883a 	mov	r5,zero
   23af8:	010000b4 	movhi	r4,2
   23afc:	211de604 	addi	r4,r4,30616
   23b00:	0023ccc0 	call	23ccc <altera_avalon_jtag_uart_init>
   23b04:	010000b4 	movhi	r4,2
   23b08:	211ddc04 	addi	r4,r4,30576
   23b0c:	00239d00 	call	239d0 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
   23b10:	000d883a 	mov	r6,zero
   23b14:	000b883a 	mov	r5,zero
   23b18:	010000f4 	movhi	r4,3
   23b1c:	2121f404 	addi	r4,r4,-30768
   23b20:	00248b80 	call	248b8 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
   23b24:	010000f4 	movhi	r4,3
   23b28:	21220604 	addi	r4,r4,-30696
   23b2c:	0023a400 	call	23a40 <alt_avalon_mutex_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   23b30:	01800044 	movi	r6,1
   23b34:	000b883a 	mov	r5,zero
   23b38:	010000f4 	movhi	r4,3
   23b3c:	21221404 	addi	r4,r4,-30640
   23b40:	002530c0 	call	2530c <altera_avalon_uart_init>
   23b44:	010000f4 	movhi	r4,3
   23b48:	21220a04 	addi	r4,r4,-30680
   23b4c:	00239d00 	call	239d0 <alt_dev_reg>
}
   23b50:	0001883a 	nop
   23b54:	e037883a 	mov	sp,fp
   23b58:	dfc00117 	ldw	ra,4(sp)
   23b5c:	df000017 	ldw	fp,0(sp)
   23b60:	dec00204 	addi	sp,sp,8
   23b64:	f800283a 	ret

00023b68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23b68:	defffa04 	addi	sp,sp,-24
   23b6c:	dfc00515 	stw	ra,20(sp)
   23b70:	df000415 	stw	fp,16(sp)
   23b74:	df000404 	addi	fp,sp,16
   23b78:	e13ffd15 	stw	r4,-12(fp)
   23b7c:	e17ffe15 	stw	r5,-8(fp)
   23b80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23b84:	e0bffd17 	ldw	r2,-12(fp)
   23b88:	10800017 	ldw	r2,0(r2)
   23b8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23b90:	e0bffc17 	ldw	r2,-16(fp)
   23b94:	10c00a04 	addi	r3,r2,40
   23b98:	e0bffd17 	ldw	r2,-12(fp)
   23b9c:	10800217 	ldw	r2,8(r2)
   23ba0:	100f883a 	mov	r7,r2
   23ba4:	e1bfff17 	ldw	r6,-4(fp)
   23ba8:	e17ffe17 	ldw	r5,-8(fp)
   23bac:	1809883a 	mov	r4,r3
   23bb0:	00241900 	call	24190 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23bb4:	e037883a 	mov	sp,fp
   23bb8:	dfc00117 	ldw	ra,4(sp)
   23bbc:	df000017 	ldw	fp,0(sp)
   23bc0:	dec00204 	addi	sp,sp,8
   23bc4:	f800283a 	ret

00023bc8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23bc8:	defffa04 	addi	sp,sp,-24
   23bcc:	dfc00515 	stw	ra,20(sp)
   23bd0:	df000415 	stw	fp,16(sp)
   23bd4:	df000404 	addi	fp,sp,16
   23bd8:	e13ffd15 	stw	r4,-12(fp)
   23bdc:	e17ffe15 	stw	r5,-8(fp)
   23be0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23be4:	e0bffd17 	ldw	r2,-12(fp)
   23be8:	10800017 	ldw	r2,0(r2)
   23bec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23bf0:	e0bffc17 	ldw	r2,-16(fp)
   23bf4:	10c00a04 	addi	r3,r2,40
   23bf8:	e0bffd17 	ldw	r2,-12(fp)
   23bfc:	10800217 	ldw	r2,8(r2)
   23c00:	100f883a 	mov	r7,r2
   23c04:	e1bfff17 	ldw	r6,-4(fp)
   23c08:	e17ffe17 	ldw	r5,-8(fp)
   23c0c:	1809883a 	mov	r4,r3
   23c10:	00243ac0 	call	243ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23c14:	e037883a 	mov	sp,fp
   23c18:	dfc00117 	ldw	ra,4(sp)
   23c1c:	df000017 	ldw	fp,0(sp)
   23c20:	dec00204 	addi	sp,sp,8
   23c24:	f800283a 	ret

00023c28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23c28:	defffc04 	addi	sp,sp,-16
   23c2c:	dfc00315 	stw	ra,12(sp)
   23c30:	df000215 	stw	fp,8(sp)
   23c34:	df000204 	addi	fp,sp,8
   23c38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23c3c:	e0bfff17 	ldw	r2,-4(fp)
   23c40:	10800017 	ldw	r2,0(r2)
   23c44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23c48:	e0bffe17 	ldw	r2,-8(fp)
   23c4c:	10c00a04 	addi	r3,r2,40
   23c50:	e0bfff17 	ldw	r2,-4(fp)
   23c54:	10800217 	ldw	r2,8(r2)
   23c58:	100b883a 	mov	r5,r2
   23c5c:	1809883a 	mov	r4,r3
   23c60:	00240380 	call	24038 <altera_avalon_jtag_uart_close>
}
   23c64:	e037883a 	mov	sp,fp
   23c68:	dfc00117 	ldw	ra,4(sp)
   23c6c:	df000017 	ldw	fp,0(sp)
   23c70:	dec00204 	addi	sp,sp,8
   23c74:	f800283a 	ret

00023c78 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23c78:	defffa04 	addi	sp,sp,-24
   23c7c:	dfc00515 	stw	ra,20(sp)
   23c80:	df000415 	stw	fp,16(sp)
   23c84:	df000404 	addi	fp,sp,16
   23c88:	e13ffd15 	stw	r4,-12(fp)
   23c8c:	e17ffe15 	stw	r5,-8(fp)
   23c90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23c94:	e0bffd17 	ldw	r2,-12(fp)
   23c98:	10800017 	ldw	r2,0(r2)
   23c9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23ca0:	e0bffc17 	ldw	r2,-16(fp)
   23ca4:	10800a04 	addi	r2,r2,40
   23ca8:	e1bfff17 	ldw	r6,-4(fp)
   23cac:	e17ffe17 	ldw	r5,-8(fp)
   23cb0:	1009883a 	mov	r4,r2
   23cb4:	00240a00 	call	240a0 <altera_avalon_jtag_uart_ioctl>
}
   23cb8:	e037883a 	mov	sp,fp
   23cbc:	dfc00117 	ldw	ra,4(sp)
   23cc0:	df000017 	ldw	fp,0(sp)
   23cc4:	dec00204 	addi	sp,sp,8
   23cc8:	f800283a 	ret

00023ccc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23ccc:	defffa04 	addi	sp,sp,-24
   23cd0:	dfc00515 	stw	ra,20(sp)
   23cd4:	df000415 	stw	fp,16(sp)
   23cd8:	df000404 	addi	fp,sp,16
   23cdc:	e13ffd15 	stw	r4,-12(fp)
   23ce0:	e17ffe15 	stw	r5,-8(fp)
   23ce4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23ce8:	e0bffd17 	ldw	r2,-12(fp)
   23cec:	00c00044 	movi	r3,1
   23cf0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23cf4:	e0bffd17 	ldw	r2,-12(fp)
   23cf8:	10800017 	ldw	r2,0(r2)
   23cfc:	10800104 	addi	r2,r2,4
   23d00:	1007883a 	mov	r3,r2
   23d04:	e0bffd17 	ldw	r2,-12(fp)
   23d08:	10800817 	ldw	r2,32(r2)
   23d0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   23d10:	e0bffe17 	ldw	r2,-8(fp)
   23d14:	e0ffff17 	ldw	r3,-4(fp)
   23d18:	d8000015 	stw	zero,0(sp)
   23d1c:	e1fffd17 	ldw	r7,-12(fp)
   23d20:	018000b4 	movhi	r6,2
   23d24:	318f6304 	addi	r6,r6,15756
   23d28:	180b883a 	mov	r5,r3
   23d2c:	1009883a 	mov	r4,r2
   23d30:	0025eac0 	call	25eac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23d34:	e0bffd17 	ldw	r2,-12(fp)
   23d38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23d3c:	e0bffd17 	ldw	r2,-12(fp)
   23d40:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23d44:	d0e70017 	ldw	r3,-25600(gp)
   23d48:	e1fffd17 	ldw	r7,-12(fp)
   23d4c:	018000b4 	movhi	r6,2
   23d50:	318fe604 	addi	r6,r6,16280
   23d54:	180b883a 	mov	r5,r3
   23d58:	1009883a 	mov	r4,r2
   23d5c:	0025ad40 	call	25ad4 <alt_alarm_start>
   23d60:	1000040e 	bge	r2,zero,23d74 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23d64:	e0fffd17 	ldw	r3,-12(fp)
   23d68:	00a00034 	movhi	r2,32768
   23d6c:	10bfffc4 	addi	r2,r2,-1
   23d70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23d74:	0001883a 	nop
   23d78:	e037883a 	mov	sp,fp
   23d7c:	dfc00117 	ldw	ra,4(sp)
   23d80:	df000017 	ldw	fp,0(sp)
   23d84:	dec00204 	addi	sp,sp,8
   23d88:	f800283a 	ret

00023d8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23d8c:	defff804 	addi	sp,sp,-32
   23d90:	df000715 	stw	fp,28(sp)
   23d94:	df000704 	addi	fp,sp,28
   23d98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23d9c:	e0bfff17 	ldw	r2,-4(fp)
   23da0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23da4:	e0bffb17 	ldw	r2,-20(fp)
   23da8:	10800017 	ldw	r2,0(r2)
   23dac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23db0:	e0bffc17 	ldw	r2,-16(fp)
   23db4:	10800104 	addi	r2,r2,4
   23db8:	10800037 	ldwio	r2,0(r2)
   23dbc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23dc0:	e0bffd17 	ldw	r2,-12(fp)
   23dc4:	1080c00c 	andi	r2,r2,768
   23dc8:	10006d26 	beq	r2,zero,23f80 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23dcc:	e0bffd17 	ldw	r2,-12(fp)
   23dd0:	1080400c 	andi	r2,r2,256
   23dd4:	10003526 	beq	r2,zero,23eac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23dd8:	00800074 	movhi	r2,1
   23ddc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23de0:	e0bffb17 	ldw	r2,-20(fp)
   23de4:	10800a17 	ldw	r2,40(r2)
   23de8:	10800044 	addi	r2,r2,1
   23dec:	1081ffcc 	andi	r2,r2,2047
   23df0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23df4:	e0bffb17 	ldw	r2,-20(fp)
   23df8:	10c00b17 	ldw	r3,44(r2)
   23dfc:	e0bffe17 	ldw	r2,-8(fp)
   23e00:	18801526 	beq	r3,r2,23e58 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23e04:	e0bffc17 	ldw	r2,-16(fp)
   23e08:	10800037 	ldwio	r2,0(r2)
   23e0c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23e10:	e0bff917 	ldw	r2,-28(fp)
   23e14:	10a0000c 	andi	r2,r2,32768
   23e18:	10001126 	beq	r2,zero,23e60 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23e1c:	e0bffb17 	ldw	r2,-20(fp)
   23e20:	10800a17 	ldw	r2,40(r2)
   23e24:	e0fff917 	ldw	r3,-28(fp)
   23e28:	1809883a 	mov	r4,r3
   23e2c:	e0fffb17 	ldw	r3,-20(fp)
   23e30:	1885883a 	add	r2,r3,r2
   23e34:	10800e04 	addi	r2,r2,56
   23e38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23e3c:	e0bffb17 	ldw	r2,-20(fp)
   23e40:	10800a17 	ldw	r2,40(r2)
   23e44:	10800044 	addi	r2,r2,1
   23e48:	10c1ffcc 	andi	r3,r2,2047
   23e4c:	e0bffb17 	ldw	r2,-20(fp)
   23e50:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23e54:	003fe206 	br	23de0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   23e58:	0001883a 	nop
   23e5c:	00000106 	br	23e64 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   23e60:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23e64:	e0bff917 	ldw	r2,-28(fp)
   23e68:	10bfffec 	andhi	r2,r2,65535
   23e6c:	10000f26 	beq	r2,zero,23eac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23e70:	e0bffb17 	ldw	r2,-20(fp)
   23e74:	10c00817 	ldw	r3,32(r2)
   23e78:	00bfff84 	movi	r2,-2
   23e7c:	1886703a 	and	r3,r3,r2
   23e80:	e0bffb17 	ldw	r2,-20(fp)
   23e84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23e88:	e0bffc17 	ldw	r2,-16(fp)
   23e8c:	10800104 	addi	r2,r2,4
   23e90:	1007883a 	mov	r3,r2
   23e94:	e0bffb17 	ldw	r2,-20(fp)
   23e98:	10800817 	ldw	r2,32(r2)
   23e9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23ea0:	e0bffc17 	ldw	r2,-16(fp)
   23ea4:	10800104 	addi	r2,r2,4
   23ea8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23eac:	e0bffd17 	ldw	r2,-12(fp)
   23eb0:	1080800c 	andi	r2,r2,512
   23eb4:	103fbe26 	beq	r2,zero,23db0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23eb8:	e0bffd17 	ldw	r2,-12(fp)
   23ebc:	1004d43a 	srli	r2,r2,16
   23ec0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23ec4:	00001406 	br	23f18 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23ec8:	e0bffc17 	ldw	r2,-16(fp)
   23ecc:	e0fffb17 	ldw	r3,-20(fp)
   23ed0:	18c00d17 	ldw	r3,52(r3)
   23ed4:	e13ffb17 	ldw	r4,-20(fp)
   23ed8:	20c7883a 	add	r3,r4,r3
   23edc:	18c20e04 	addi	r3,r3,2104
   23ee0:	18c00003 	ldbu	r3,0(r3)
   23ee4:	18c03fcc 	andi	r3,r3,255
   23ee8:	18c0201c 	xori	r3,r3,128
   23eec:	18ffe004 	addi	r3,r3,-128
   23ef0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23ef4:	e0bffb17 	ldw	r2,-20(fp)
   23ef8:	10800d17 	ldw	r2,52(r2)
   23efc:	10800044 	addi	r2,r2,1
   23f00:	10c1ffcc 	andi	r3,r2,2047
   23f04:	e0bffb17 	ldw	r2,-20(fp)
   23f08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23f0c:	e0bffa17 	ldw	r2,-24(fp)
   23f10:	10bfffc4 	addi	r2,r2,-1
   23f14:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23f18:	e0bffa17 	ldw	r2,-24(fp)
   23f1c:	10000526 	beq	r2,zero,23f34 <altera_avalon_jtag_uart_irq+0x1a8>
   23f20:	e0bffb17 	ldw	r2,-20(fp)
   23f24:	10c00d17 	ldw	r3,52(r2)
   23f28:	e0bffb17 	ldw	r2,-20(fp)
   23f2c:	10800c17 	ldw	r2,48(r2)
   23f30:	18bfe51e 	bne	r3,r2,23ec8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23f34:	e0bffa17 	ldw	r2,-24(fp)
   23f38:	103f9d26 	beq	r2,zero,23db0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23f3c:	e0bffb17 	ldw	r2,-20(fp)
   23f40:	10c00817 	ldw	r3,32(r2)
   23f44:	00bfff44 	movi	r2,-3
   23f48:	1886703a 	and	r3,r3,r2
   23f4c:	e0bffb17 	ldw	r2,-20(fp)
   23f50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23f54:	e0bffb17 	ldw	r2,-20(fp)
   23f58:	10800017 	ldw	r2,0(r2)
   23f5c:	10800104 	addi	r2,r2,4
   23f60:	1007883a 	mov	r3,r2
   23f64:	e0bffb17 	ldw	r2,-20(fp)
   23f68:	10800817 	ldw	r2,32(r2)
   23f6c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23f70:	e0bffc17 	ldw	r2,-16(fp)
   23f74:	10800104 	addi	r2,r2,4
   23f78:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23f7c:	003f8c06 	br	23db0 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   23f80:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   23f84:	0001883a 	nop
   23f88:	e037883a 	mov	sp,fp
   23f8c:	df000017 	ldw	fp,0(sp)
   23f90:	dec00104 	addi	sp,sp,4
   23f94:	f800283a 	ret

00023f98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23f98:	defff804 	addi	sp,sp,-32
   23f9c:	df000715 	stw	fp,28(sp)
   23fa0:	df000704 	addi	fp,sp,28
   23fa4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23fa8:	e0bffb17 	ldw	r2,-20(fp)
   23fac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23fb0:	e0bff917 	ldw	r2,-28(fp)
   23fb4:	10800017 	ldw	r2,0(r2)
   23fb8:	10800104 	addi	r2,r2,4
   23fbc:	10800037 	ldwio	r2,0(r2)
   23fc0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23fc4:	e0bffa17 	ldw	r2,-24(fp)
   23fc8:	1081000c 	andi	r2,r2,1024
   23fcc:	10000b26 	beq	r2,zero,23ffc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23fd0:	e0bff917 	ldw	r2,-28(fp)
   23fd4:	10800017 	ldw	r2,0(r2)
   23fd8:	10800104 	addi	r2,r2,4
   23fdc:	1007883a 	mov	r3,r2
   23fe0:	e0bff917 	ldw	r2,-28(fp)
   23fe4:	10800817 	ldw	r2,32(r2)
   23fe8:	10810014 	ori	r2,r2,1024
   23fec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23ff0:	e0bff917 	ldw	r2,-28(fp)
   23ff4:	10000915 	stw	zero,36(r2)
   23ff8:	00000a06 	br	24024 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23ffc:	e0bff917 	ldw	r2,-28(fp)
   24000:	10c00917 	ldw	r3,36(r2)
   24004:	00a00034 	movhi	r2,32768
   24008:	10bfff04 	addi	r2,r2,-4
   2400c:	10c00536 	bltu	r2,r3,24024 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24010:	e0bff917 	ldw	r2,-28(fp)
   24014:	10800917 	ldw	r2,36(r2)
   24018:	10c00044 	addi	r3,r2,1
   2401c:	e0bff917 	ldw	r2,-28(fp)
   24020:	10c00915 	stw	r3,36(r2)
   24024:	d0a70017 	ldw	r2,-25600(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   24028:	e037883a 	mov	sp,fp
   2402c:	df000017 	ldw	fp,0(sp)
   24030:	dec00104 	addi	sp,sp,4
   24034:	f800283a 	ret

00024038 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   24038:	defffd04 	addi	sp,sp,-12
   2403c:	df000215 	stw	fp,8(sp)
   24040:	df000204 	addi	fp,sp,8
   24044:	e13ffe15 	stw	r4,-8(fp)
   24048:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2404c:	00000506 	br	24064 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24050:	e0bfff17 	ldw	r2,-4(fp)
   24054:	1090000c 	andi	r2,r2,16384
   24058:	10000226 	beq	r2,zero,24064 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2405c:	00bffd44 	movi	r2,-11
   24060:	00000b06 	br	24090 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24064:	e0bffe17 	ldw	r2,-8(fp)
   24068:	10c00d17 	ldw	r3,52(r2)
   2406c:	e0bffe17 	ldw	r2,-8(fp)
   24070:	10800c17 	ldw	r2,48(r2)
   24074:	18800526 	beq	r3,r2,2408c <altera_avalon_jtag_uart_close+0x54>
   24078:	e0bffe17 	ldw	r2,-8(fp)
   2407c:	10c00917 	ldw	r3,36(r2)
   24080:	e0bffe17 	ldw	r2,-8(fp)
   24084:	10800117 	ldw	r2,4(r2)
   24088:	18bff136 	bltu	r3,r2,24050 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2408c:	0005883a 	mov	r2,zero
}
   24090:	e037883a 	mov	sp,fp
   24094:	df000017 	ldw	fp,0(sp)
   24098:	dec00104 	addi	sp,sp,4
   2409c:	f800283a 	ret

000240a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   240a0:	defffa04 	addi	sp,sp,-24
   240a4:	df000515 	stw	fp,20(sp)
   240a8:	df000504 	addi	fp,sp,20
   240ac:	e13ffd15 	stw	r4,-12(fp)
   240b0:	e17ffe15 	stw	r5,-8(fp)
   240b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   240b8:	00bff9c4 	movi	r2,-25
   240bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   240c0:	e0bffe17 	ldw	r2,-8(fp)
   240c4:	10da8060 	cmpeqi	r3,r2,27137
   240c8:	1800031e 	bne	r3,zero,240d8 <altera_avalon_jtag_uart_ioctl+0x38>
   240cc:	109a80a0 	cmpeqi	r2,r2,27138
   240d0:	1000181e 	bne	r2,zero,24134 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   240d4:	00002906 	br	2417c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   240d8:	e0bffd17 	ldw	r2,-12(fp)
   240dc:	10c00117 	ldw	r3,4(r2)
   240e0:	00a00034 	movhi	r2,32768
   240e4:	10bfffc4 	addi	r2,r2,-1
   240e8:	18802126 	beq	r3,r2,24170 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   240ec:	e0bfff17 	ldw	r2,-4(fp)
   240f0:	10800017 	ldw	r2,0(r2)
   240f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   240f8:	e0bffc17 	ldw	r2,-16(fp)
   240fc:	10800090 	cmplti	r2,r2,2
   24100:	1000061e 	bne	r2,zero,2411c <altera_avalon_jtag_uart_ioctl+0x7c>
   24104:	e0fffc17 	ldw	r3,-16(fp)
   24108:	00a00034 	movhi	r2,32768
   2410c:	10bfffc4 	addi	r2,r2,-1
   24110:	18800226 	beq	r3,r2,2411c <altera_avalon_jtag_uart_ioctl+0x7c>
   24114:	e0bffc17 	ldw	r2,-16(fp)
   24118:	00000206 	br	24124 <altera_avalon_jtag_uart_ioctl+0x84>
   2411c:	00a00034 	movhi	r2,32768
   24120:	10bfff84 	addi	r2,r2,-2
   24124:	e0fffd17 	ldw	r3,-12(fp)
   24128:	18800115 	stw	r2,4(r3)
      rc = 0;
   2412c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24130:	00000f06 	br	24170 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   24134:	e0bffd17 	ldw	r2,-12(fp)
   24138:	10c00117 	ldw	r3,4(r2)
   2413c:	00a00034 	movhi	r2,32768
   24140:	10bfffc4 	addi	r2,r2,-1
   24144:	18800c26 	beq	r3,r2,24178 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24148:	e0bffd17 	ldw	r2,-12(fp)
   2414c:	10c00917 	ldw	r3,36(r2)
   24150:	e0bffd17 	ldw	r2,-12(fp)
   24154:	10800117 	ldw	r2,4(r2)
   24158:	1885803a 	cmpltu	r2,r3,r2
   2415c:	10c03fcc 	andi	r3,r2,255
   24160:	e0bfff17 	ldw	r2,-4(fp)
   24164:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24168:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2416c:	00000206 	br	24178 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   24170:	0001883a 	nop
   24174:	00000106 	br	2417c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   24178:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2417c:	e0bffb17 	ldw	r2,-20(fp)
}
   24180:	e037883a 	mov	sp,fp
   24184:	df000017 	ldw	fp,0(sp)
   24188:	dec00104 	addi	sp,sp,4
   2418c:	f800283a 	ret

00024190 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24190:	defff304 	addi	sp,sp,-52
   24194:	dfc00c15 	stw	ra,48(sp)
   24198:	df000b15 	stw	fp,44(sp)
   2419c:	df000b04 	addi	fp,sp,44
   241a0:	e13ffc15 	stw	r4,-16(fp)
   241a4:	e17ffd15 	stw	r5,-12(fp)
   241a8:	e1bffe15 	stw	r6,-8(fp)
   241ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   241b0:	e0bffd17 	ldw	r2,-12(fp)
   241b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   241b8:	00004706 	br	242d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   241bc:	e0bffc17 	ldw	r2,-16(fp)
   241c0:	10800a17 	ldw	r2,40(r2)
   241c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   241c8:	e0bffc17 	ldw	r2,-16(fp)
   241cc:	10800b17 	ldw	r2,44(r2)
   241d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   241d4:	e0fff717 	ldw	r3,-36(fp)
   241d8:	e0bff817 	ldw	r2,-32(fp)
   241dc:	18800536 	bltu	r3,r2,241f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   241e0:	e0fff717 	ldw	r3,-36(fp)
   241e4:	e0bff817 	ldw	r2,-32(fp)
   241e8:	1885c83a 	sub	r2,r3,r2
   241ec:	e0bff615 	stw	r2,-40(fp)
   241f0:	00000406 	br	24204 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   241f4:	00c20004 	movi	r3,2048
   241f8:	e0bff817 	ldw	r2,-32(fp)
   241fc:	1885c83a 	sub	r2,r3,r2
   24200:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24204:	e0bff617 	ldw	r2,-40(fp)
   24208:	10001e26 	beq	r2,zero,24284 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2420c:	e0fffe17 	ldw	r3,-8(fp)
   24210:	e0bff617 	ldw	r2,-40(fp)
   24214:	1880022e 	bgeu	r3,r2,24220 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24218:	e0bffe17 	ldw	r2,-8(fp)
   2421c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24220:	e0bffc17 	ldw	r2,-16(fp)
   24224:	10c00e04 	addi	r3,r2,56
   24228:	e0bff817 	ldw	r2,-32(fp)
   2422c:	1885883a 	add	r2,r3,r2
   24230:	e1bff617 	ldw	r6,-40(fp)
   24234:	100b883a 	mov	r5,r2
   24238:	e13ff517 	ldw	r4,-44(fp)
   2423c:	00217040 	call	21704 <memcpy>
      ptr   += n;
   24240:	e0fff517 	ldw	r3,-44(fp)
   24244:	e0bff617 	ldw	r2,-40(fp)
   24248:	1885883a 	add	r2,r3,r2
   2424c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   24250:	e0fffe17 	ldw	r3,-8(fp)
   24254:	e0bff617 	ldw	r2,-40(fp)
   24258:	1885c83a 	sub	r2,r3,r2
   2425c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24260:	e0fff817 	ldw	r3,-32(fp)
   24264:	e0bff617 	ldw	r2,-40(fp)
   24268:	1885883a 	add	r2,r3,r2
   2426c:	10c1ffcc 	andi	r3,r2,2047
   24270:	e0bffc17 	ldw	r2,-16(fp)
   24274:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24278:	e0bffe17 	ldw	r2,-8(fp)
   2427c:	00bfcf16 	blt	zero,r2,241bc <altera_avalon_jtag_uart_read+0x2c>
   24280:	00000106 	br	24288 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   24284:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   24288:	e0fff517 	ldw	r3,-44(fp)
   2428c:	e0bffd17 	ldw	r2,-12(fp)
   24290:	1880141e 	bne	r3,r2,242e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24294:	e0bfff17 	ldw	r2,-4(fp)
   24298:	1090000c 	andi	r2,r2,16384
   2429c:	1000131e 	bne	r2,zero,242ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   242a0:	0001883a 	nop
   242a4:	e0bffc17 	ldw	r2,-16(fp)
   242a8:	10c00a17 	ldw	r3,40(r2)
   242ac:	e0bff717 	ldw	r2,-36(fp)
   242b0:	1880051e 	bne	r3,r2,242c8 <altera_avalon_jtag_uart_read+0x138>
   242b4:	e0bffc17 	ldw	r2,-16(fp)
   242b8:	10c00917 	ldw	r3,36(r2)
   242bc:	e0bffc17 	ldw	r2,-16(fp)
   242c0:	10800117 	ldw	r2,4(r2)
   242c4:	18bff736 	bltu	r3,r2,242a4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   242c8:	e0bffc17 	ldw	r2,-16(fp)
   242cc:	10c00a17 	ldw	r3,40(r2)
   242d0:	e0bff717 	ldw	r2,-36(fp)
   242d4:	18800726 	beq	r3,r2,242f4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   242d8:	e0bffe17 	ldw	r2,-8(fp)
   242dc:	00bfb716 	blt	zero,r2,241bc <altera_avalon_jtag_uart_read+0x2c>
   242e0:	00000506 	br	242f8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   242e4:	0001883a 	nop
   242e8:	00000306 	br	242f8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   242ec:	0001883a 	nop
   242f0:	00000106 	br	242f8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   242f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   242f8:	e0fff517 	ldw	r3,-44(fp)
   242fc:	e0bffd17 	ldw	r2,-12(fp)
   24300:	18801826 	beq	r3,r2,24364 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24304:	0005303a 	rdctl	r2,status
   24308:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2430c:	e0fffb17 	ldw	r3,-20(fp)
   24310:	00bfff84 	movi	r2,-2
   24314:	1884703a 	and	r2,r3,r2
   24318:	1001703a 	wrctl	status,r2
  
  return context;
   2431c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24320:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24324:	e0bffc17 	ldw	r2,-16(fp)
   24328:	10800817 	ldw	r2,32(r2)
   2432c:	10c00054 	ori	r3,r2,1
   24330:	e0bffc17 	ldw	r2,-16(fp)
   24334:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24338:	e0bffc17 	ldw	r2,-16(fp)
   2433c:	10800017 	ldw	r2,0(r2)
   24340:	10800104 	addi	r2,r2,4
   24344:	1007883a 	mov	r3,r2
   24348:	e0bffc17 	ldw	r2,-16(fp)
   2434c:	10800817 	ldw	r2,32(r2)
   24350:	18800035 	stwio	r2,0(r3)
   24354:	e0bffa17 	ldw	r2,-24(fp)
   24358:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2435c:	e0bff917 	ldw	r2,-28(fp)
   24360:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24364:	e0fff517 	ldw	r3,-44(fp)
   24368:	e0bffd17 	ldw	r2,-12(fp)
   2436c:	18800426 	beq	r3,r2,24380 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   24370:	e0fff517 	ldw	r3,-44(fp)
   24374:	e0bffd17 	ldw	r2,-12(fp)
   24378:	1885c83a 	sub	r2,r3,r2
   2437c:	00000606 	br	24398 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   24380:	e0bfff17 	ldw	r2,-4(fp)
   24384:	1090000c 	andi	r2,r2,16384
   24388:	10000226 	beq	r2,zero,24394 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2438c:	00bffd44 	movi	r2,-11
   24390:	00000106 	br	24398 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   24394:	00bffec4 	movi	r2,-5
}
   24398:	e037883a 	mov	sp,fp
   2439c:	dfc00117 	ldw	ra,4(sp)
   243a0:	df000017 	ldw	fp,0(sp)
   243a4:	dec00204 	addi	sp,sp,8
   243a8:	f800283a 	ret

000243ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   243ac:	defff304 	addi	sp,sp,-52
   243b0:	dfc00c15 	stw	ra,48(sp)
   243b4:	df000b15 	stw	fp,44(sp)
   243b8:	df000b04 	addi	fp,sp,44
   243bc:	e13ffc15 	stw	r4,-16(fp)
   243c0:	e17ffd15 	stw	r5,-12(fp)
   243c4:	e1bffe15 	stw	r6,-8(fp)
   243c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   243cc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   243d0:	e0bffd17 	ldw	r2,-12(fp)
   243d4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   243d8:	00003706 	br	244b8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   243dc:	e0bffc17 	ldw	r2,-16(fp)
   243e0:	10800c17 	ldw	r2,48(r2)
   243e4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   243e8:	e0bffc17 	ldw	r2,-16(fp)
   243ec:	10800d17 	ldw	r2,52(r2)
   243f0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   243f4:	e0fff917 	ldw	r3,-28(fp)
   243f8:	e0bff517 	ldw	r2,-44(fp)
   243fc:	1880062e 	bgeu	r3,r2,24418 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24400:	e0fff517 	ldw	r3,-44(fp)
   24404:	e0bff917 	ldw	r2,-28(fp)
   24408:	1885c83a 	sub	r2,r3,r2
   2440c:	10bfffc4 	addi	r2,r2,-1
   24410:	e0bff615 	stw	r2,-40(fp)
   24414:	00000b06 	br	24444 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24418:	e0bff517 	ldw	r2,-44(fp)
   2441c:	10000526 	beq	r2,zero,24434 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24420:	00c20004 	movi	r3,2048
   24424:	e0bff917 	ldw	r2,-28(fp)
   24428:	1885c83a 	sub	r2,r3,r2
   2442c:	e0bff615 	stw	r2,-40(fp)
   24430:	00000406 	br	24444 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24434:	00c1ffc4 	movi	r3,2047
   24438:	e0bff917 	ldw	r2,-28(fp)
   2443c:	1885c83a 	sub	r2,r3,r2
   24440:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24444:	e0bff617 	ldw	r2,-40(fp)
   24448:	10001e26 	beq	r2,zero,244c4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2444c:	e0fffe17 	ldw	r3,-8(fp)
   24450:	e0bff617 	ldw	r2,-40(fp)
   24454:	1880022e 	bgeu	r3,r2,24460 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   24458:	e0bffe17 	ldw	r2,-8(fp)
   2445c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24460:	e0bffc17 	ldw	r2,-16(fp)
   24464:	10c20e04 	addi	r3,r2,2104
   24468:	e0bff917 	ldw	r2,-28(fp)
   2446c:	1885883a 	add	r2,r3,r2
   24470:	e1bff617 	ldw	r6,-40(fp)
   24474:	e17ffd17 	ldw	r5,-12(fp)
   24478:	1009883a 	mov	r4,r2
   2447c:	00217040 	call	21704 <memcpy>
      ptr   += n;
   24480:	e0fffd17 	ldw	r3,-12(fp)
   24484:	e0bff617 	ldw	r2,-40(fp)
   24488:	1885883a 	add	r2,r3,r2
   2448c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24490:	e0fffe17 	ldw	r3,-8(fp)
   24494:	e0bff617 	ldw	r2,-40(fp)
   24498:	1885c83a 	sub	r2,r3,r2
   2449c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   244a0:	e0fff917 	ldw	r3,-28(fp)
   244a4:	e0bff617 	ldw	r2,-40(fp)
   244a8:	1885883a 	add	r2,r3,r2
   244ac:	10c1ffcc 	andi	r3,r2,2047
   244b0:	e0bffc17 	ldw	r2,-16(fp)
   244b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   244b8:	e0bffe17 	ldw	r2,-8(fp)
   244bc:	00bfc716 	blt	zero,r2,243dc <altera_avalon_jtag_uart_write+0x30>
   244c0:	00000106 	br	244c8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   244c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   244c8:	0005303a 	rdctl	r2,status
   244cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244d0:	e0fffb17 	ldw	r3,-20(fp)
   244d4:	00bfff84 	movi	r2,-2
   244d8:	1884703a 	and	r2,r3,r2
   244dc:	1001703a 	wrctl	status,r2
  
  return context;
   244e0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   244e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   244e8:	e0bffc17 	ldw	r2,-16(fp)
   244ec:	10800817 	ldw	r2,32(r2)
   244f0:	10c00094 	ori	r3,r2,2
   244f4:	e0bffc17 	ldw	r2,-16(fp)
   244f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   244fc:	e0bffc17 	ldw	r2,-16(fp)
   24500:	10800017 	ldw	r2,0(r2)
   24504:	10800104 	addi	r2,r2,4
   24508:	1007883a 	mov	r3,r2
   2450c:	e0bffc17 	ldw	r2,-16(fp)
   24510:	10800817 	ldw	r2,32(r2)
   24514:	18800035 	stwio	r2,0(r3)
   24518:	e0bffa17 	ldw	r2,-24(fp)
   2451c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24520:	e0bff817 	ldw	r2,-32(fp)
   24524:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24528:	e0bffe17 	ldw	r2,-8(fp)
   2452c:	0080100e 	bge	zero,r2,24570 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   24530:	e0bfff17 	ldw	r2,-4(fp)
   24534:	1090000c 	andi	r2,r2,16384
   24538:	1000101e 	bne	r2,zero,2457c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2453c:	0001883a 	nop
   24540:	e0bffc17 	ldw	r2,-16(fp)
   24544:	10c00d17 	ldw	r3,52(r2)
   24548:	e0bff517 	ldw	r2,-44(fp)
   2454c:	1880051e 	bne	r3,r2,24564 <altera_avalon_jtag_uart_write+0x1b8>
   24550:	e0bffc17 	ldw	r2,-16(fp)
   24554:	10c00917 	ldw	r3,36(r2)
   24558:	e0bffc17 	ldw	r2,-16(fp)
   2455c:	10800117 	ldw	r2,4(r2)
   24560:	18bff736 	bltu	r3,r2,24540 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24564:	e0bffc17 	ldw	r2,-16(fp)
   24568:	10800917 	ldw	r2,36(r2)
   2456c:	1000051e 	bne	r2,zero,24584 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   24570:	e0bffe17 	ldw	r2,-8(fp)
   24574:	00bfd016 	blt	zero,r2,244b8 <altera_avalon_jtag_uart_write+0x10c>
   24578:	00000306 	br	24588 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2457c:	0001883a 	nop
   24580:	00000106 	br	24588 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   24584:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24588:	e0fffd17 	ldw	r3,-12(fp)
   2458c:	e0bff717 	ldw	r2,-36(fp)
   24590:	18800426 	beq	r3,r2,245a4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24594:	e0fffd17 	ldw	r3,-12(fp)
   24598:	e0bff717 	ldw	r2,-36(fp)
   2459c:	1885c83a 	sub	r2,r3,r2
   245a0:	00000606 	br	245bc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   245a4:	e0bfff17 	ldw	r2,-4(fp)
   245a8:	1090000c 	andi	r2,r2,16384
   245ac:	10000226 	beq	r2,zero,245b8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   245b0:	00bffd44 	movi	r2,-11
   245b4:	00000106 	br	245bc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   245b8:	00bffec4 	movi	r2,-5
}
   245bc:	e037883a 	mov	sp,fp
   245c0:	dfc00117 	ldw	ra,4(sp)
   245c4:	df000017 	ldw	fp,0(sp)
   245c8:	dec00204 	addi	sp,sp,8
   245cc:	f800283a 	ret

000245d0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
   245d0:	defffd04 	addi	sp,sp,-12
   245d4:	df000215 	stw	fp,8(sp)
   245d8:	df000204 	addi	fp,sp,8
   245dc:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
   245e0:	008e84b4 	movhi	r2,14866
   245e4:	10ac1144 	addi	r2,r2,-20411
   245e8:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
   245ec:	e0bfff17 	ldw	r2,-4(fp)
   245f0:	10800a17 	ldw	r2,40(r2)
   245f4:	10800104 	addi	r2,r2,4
   245f8:	1007883a 	mov	r3,r2
   245fc:	e0bffe17 	ldw	r2,-8(fp)
   24600:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
   24604:	e0bfff17 	ldw	r2,-4(fp)
   24608:	10800a17 	ldw	r2,40(r2)
   2460c:	10800104 	addi	r2,r2,4
   24610:	10800037 	ldwio	r2,0(r2)
   24614:	1007883a 	mov	r3,r2
   24618:	e0bffe17 	ldw	r2,-8(fp)
   2461c:	1880081e 	bne	r3,r2,24640 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
   24620:	e0bfff17 	ldw	r2,-4(fp)
   24624:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
   24628:	e0bfff17 	ldw	r2,-4(fp)
   2462c:	10800a17 	ldw	r2,40(r2)
   24630:	10800104 	addi	r2,r2,4
   24634:	0007883a 	mov	r3,zero
   24638:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
   2463c:	00000306 	br	2464c <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
   24640:	e0bfff17 	ldw	r2,-4(fp)
   24644:	00c00044 	movi	r3,1
   24648:	10c00f15 	stw	r3,60(r2)
    }
}
   2464c:	0001883a 	nop
   24650:	e037883a 	mov	sp,fp
   24654:	df000017 	ldw	fp,0(sp)
   24658:	dec00104 	addi	sp,sp,4
   2465c:	f800283a 	ret

00024660 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
   24660:	defffc04 	addi	sp,sp,-16
   24664:	df000315 	stw	fp,12(sp)
   24668:	df000304 	addi	fp,sp,12
   2466c:	e13ffe15 	stw	r4,-8(fp)
   24670:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
   24674:	e0bfff17 	ldw	r2,-4(fp)
   24678:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
   2467c:	e0bffd17 	ldw	r2,-12(fp)
   24680:	10001026 	beq	r2,zero,246c4 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
   24684:	e0bffe17 	ldw	r2,-8(fp)
   24688:	10800a17 	ldw	r2,40(r2)
   2468c:	10800104 	addi	r2,r2,4
   24690:	1007883a 	mov	r3,r2
   24694:	e0bffd17 	ldw	r2,-12(fp)
   24698:	10800104 	addi	r2,r2,4
   2469c:	10800017 	ldw	r2,0(r2)
   246a0:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
   246a4:	e0bffe17 	ldw	r2,-8(fp)
   246a8:	10800a17 	ldw	r2,40(r2)
   246ac:	1007883a 	mov	r3,r2
   246b0:	e0bffd17 	ldw	r2,-12(fp)
   246b4:	10800017 	ldw	r2,0(r2)
   246b8:	18800035 	stwio	r2,0(r3)
        return 0;
   246bc:	0005883a 	mov	r2,zero
   246c0:	00000106 	br	246c8 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
   246c4:	00bffa84 	movi	r2,-22
}
   246c8:	e037883a 	mov	sp,fp
   246cc:	df000017 	ldw	fp,0(sp)
   246d0:	dec00104 	addi	sp,sp,4
   246d4:	f800283a 	ret

000246d8 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
   246d8:	defff604 	addi	sp,sp,-40
   246dc:	dfc00915 	stw	ra,36(sp)
   246e0:	df000815 	stw	fp,32(sp)
   246e4:	df000804 	addi	fp,sp,32
   246e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   246ec:	e0bfff17 	ldw	r2,-4(fp)
   246f0:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
   246f4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
   246f8:	e0bff817 	ldw	r2,-32(fp)
   246fc:	10801017 	ldw	r2,64(r2)
   24700:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   24704:	e0bff817 	ldw	r2,-32(fp)
   24708:	10800a17 	ldw	r2,40(r2)
   2470c:	10800304 	addi	r2,r2,12
   24710:	10800037 	ldwio	r2,0(r2)
   24714:	1007883a 	mov	r3,r2
   24718:	00bfff44 	movi	r2,-3
   2471c:	1884703a 	and	r2,r3,r2
   24720:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   24724:	e0bff817 	ldw	r2,-32(fp)
   24728:	10800a17 	ldw	r2,40(r2)
   2472c:	10800304 	addi	r2,r2,12
   24730:	1007883a 	mov	r3,r2
   24734:	e0bffb17 	ldw	r2,-20(fp)
   24738:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
   2473c:	e0bffa17 	ldw	r2,-24(fp)
   24740:	10002d26 	beq	r2,zero,247f8 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
   24744:	e0bff817 	ldw	r2,-32(fp)
   24748:	10800a17 	ldw	r2,40(r2)
   2474c:	10800104 	addi	r2,r2,4
   24750:	1007883a 	mov	r3,r2
   24754:	e0bffa17 	ldw	r2,-24(fp)
   24758:	10800104 	addi	r2,r2,4
   2475c:	10800017 	ldw	r2,0(r2)
   24760:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
   24764:	e0bff817 	ldw	r2,-32(fp)
   24768:	10800a17 	ldw	r2,40(r2)
   2476c:	1007883a 	mov	r3,r2
   24770:	e0bffa17 	ldw	r2,-24(fp)
   24774:	10800017 	ldw	r2,0(r2)
   24778:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2477c:	e0bff817 	ldw	r2,-32(fp)
   24780:	10800a17 	ldw	r2,40(r2)
   24784:	10800204 	addi	r2,r2,8
   24788:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   2478c:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   24790:	1005d07a 	srai	r2,r2,1
   24794:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
   24798:	e0bff817 	ldw	r2,-32(fp)
   2479c:	10800d17 	ldw	r2,52(r2)
   247a0:	10001126 	beq	r2,zero,247e8 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   247a4:	0005303a 	rdctl	r2,status
   247a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   247ac:	e0fffd17 	ldw	r3,-12(fp)
   247b0:	00bfff84 	movi	r2,-2
   247b4:	1884703a 	and	r2,r3,r2
   247b8:	1001703a 	wrctl	status,r2
  
  return context;
   247bc:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
   247c0:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
   247c4:	e0bff817 	ldw	r2,-32(fp)
   247c8:	10800d17 	ldw	r2,52(r2)
   247cc:	e17ff917 	ldw	r5,-28(fp)
   247d0:	e13ffa17 	ldw	r4,-24(fp)
   247d4:	103ee83a 	callr	r2
   247d8:	e0bffc17 	ldw	r2,-16(fp)
   247dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   247e0:	e0bffe17 	ldw	r2,-8(fp)
   247e4:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   247e8:	e0bff817 	ldw	r2,-32(fp)
   247ec:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
   247f0:	e0bff817 	ldw	r2,-32(fp)
   247f4:	10001105 	stb	zero,68(r2)
    }
}
   247f8:	0001883a 	nop
   247fc:	e037883a 	mov	sp,fp
   24800:	dfc00117 	ldw	ra,4(sp)
   24804:	df000017 	ldw	fp,0(sp)
   24808:	dec00204 	addi	sp,sp,8
   2480c:	f800283a 	ret

00024810 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
   24810:	defff704 	addi	sp,sp,-36
   24814:	dfc00815 	stw	ra,32(sp)
   24818:	df000715 	stw	fp,28(sp)
   2481c:	df000704 	addi	fp,sp,28
   24820:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   24824:	e0bfff17 	ldw	r2,-4(fp)
   24828:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   2482c:	e0bff917 	ldw	r2,-28(fp)
   24830:	10800a17 	ldw	r2,40(r2)
   24834:	10800104 	addi	r2,r2,4
   24838:	10800037 	ldwio	r2,0(r2)
   2483c:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   24840:	e0bff917 	ldw	r2,-28(fp)
   24844:	10800a17 	ldw	r2,40(r2)
   24848:	10800037 	ldwio	r2,0(r2)
   2484c:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
   24850:	e0bff917 	ldw	r2,-28(fp)
   24854:	10800e17 	ldw	r2,56(r2)
   24858:	10001126 	beq	r2,zero,248a0 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2485c:	0005303a 	rdctl	r2,status
   24860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24864:	e0fffb17 	ldw	r3,-20(fp)
   24868:	00bfff84 	movi	r2,-2
   2486c:	1884703a 	and	r2,r3,r2
   24870:	1001703a 	wrctl	status,r2
  
  return context;
   24874:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
   24878:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
   2487c:	e0bff917 	ldw	r2,-28(fp)
   24880:	10800e17 	ldw	r2,56(r2)
   24884:	e0fffd04 	addi	r3,fp,-12
   24888:	1809883a 	mov	r4,r3
   2488c:	103ee83a 	callr	r2
   24890:	e0bffa17 	ldw	r2,-24(fp)
   24894:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24898:	e0bffc17 	ldw	r2,-16(fp)
   2489c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
   248a0:	0001883a 	nop
   248a4:	e037883a 	mov	sp,fp
   248a8:	dfc00117 	ldw	ra,4(sp)
   248ac:	df000017 	ldw	fp,0(sp)
   248b0:	dec00204 	addi	sp,sp,8
   248b4:	f800283a 	ret

000248b8 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
   248b8:	defffb04 	addi	sp,sp,-20
   248bc:	dfc00415 	stw	ra,16(sp)
   248c0:	df000315 	stw	fp,12(sp)
   248c4:	df000304 	addi	fp,sp,12
   248c8:	e13ffd15 	stw	r4,-12(fp)
   248cc:	e17ffe15 	stw	r5,-8(fp)
   248d0:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
   248d4:	d1600b04 	addi	r5,gp,-32724
   248d8:	e13ffd17 	ldw	r4,-12(fp)
   248dc:	0025c840 	call	25c84 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
   248e0:	e0ffff17 	ldw	r3,-4(fp)
   248e4:	e0bffd17 	ldw	r2,-12(fp)
   248e8:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
   248ec:	e0fffe17 	ldw	r3,-8(fp)
   248f0:	e0bffd17 	ldw	r2,-12(fp)
   248f4:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
   248f8:	e0bffd17 	ldw	r2,-12(fp)
   248fc:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
   24900:	e0bffd17 	ldw	r2,-12(fp)
   24904:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
   24908:	e0bffd17 	ldw	r2,-12(fp)
   2490c:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
   24910:	e13ffd17 	ldw	r4,-12(fp)
   24914:	00245d00 	call	245d0 <altera_avalon_mailbox_identify>
}
   24918:	0001883a 	nop
   2491c:	e037883a 	mov	sp,fp
   24920:	dfc00117 	ldw	ra,4(sp)
   24924:	df000017 	ldw	fp,0(sp)
   24928:	dec00204 	addi	sp,sp,8
   2492c:	f800283a 	ret

00024930 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
   24930:	defff804 	addi	sp,sp,-32
   24934:	dfc00715 	stw	ra,28(sp)
   24938:	df000615 	stw	fp,24(sp)
   2493c:	df000604 	addi	fp,sp,24
   24940:	e13ffd15 	stw	r4,-12(fp)
   24944:	e17ffe15 	stw	r5,-8(fp)
   24948:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
   2494c:	d1600b04 	addi	r5,gp,-32724
   24950:	e13ffd17 	ldw	r4,-12(fp)
   24954:	0025de80 	call	25de8 <alt_find_dev>
   24958:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
   2495c:	e0bffb17 	ldw	r2,-20(fp)
   24960:	1000021e 	bne	r2,zero,2496c <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
   24964:	0005883a 	mov	r2,zero
   24968:	00006506 	br	24b00 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   2496c:	e0bffb17 	ldw	r2,-20(fp)
   24970:	10800a17 	ldw	r2,40(r2)
   24974:	10800304 	addi	r2,r2,12
   24978:	10800037 	ldwio	r2,0(r2)
   2497c:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
   24980:	e0bffb17 	ldw	r2,-20(fp)
   24984:	10800f17 	ldw	r2,60(r2)
   24988:	1000081e 	bne	r2,zero,249ac <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   2498c:	e0bffb17 	ldw	r2,-20(fp)
   24990:	10800a17 	ldw	r2,40(r2)
   24994:	10800304 	addi	r2,r2,12
   24998:	1009883a 	mov	r4,r2
   2499c:	e0fffc17 	ldw	r3,-16(fp)
   249a0:	00bfff44 	movi	r2,-3
   249a4:	1884703a 	and	r2,r3,r2
   249a8:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
   249ac:	e0bffb17 	ldw	r2,-20(fp)
   249b0:	10800f17 	ldw	r2,60(r2)
   249b4:	10800058 	cmpnei	r2,r2,1
   249b8:	1000081e 	bne	r2,zero,249dc <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   249bc:	e0bffb17 	ldw	r2,-20(fp)
   249c0:	10800a17 	ldw	r2,40(r2)
   249c4:	10800304 	addi	r2,r2,12
   249c8:	1009883a 	mov	r4,r2
   249cc:	e0fffc17 	ldw	r3,-16(fp)
   249d0:	00bfff84 	movi	r2,-2
   249d4:	1884703a 	and	r2,r3,r2
   249d8:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
   249dc:	e0bffb17 	ldw	r2,-20(fp)
   249e0:	10800b17 	ldw	r2,44(r2)
   249e4:	10bfffd8 	cmpnei	r2,r2,-1
   249e8:	1000021e 	bne	r2,zero,249f4 <altera_avalon_mailbox_open+0xc4>
        return dev;
   249ec:	e0bffb17 	ldw	r2,-20(fp)
   249f0:	00004306 	br	24b00 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
   249f4:	e0bffe17 	ldw	r2,-8(fp)
   249f8:	1000041e 	bne	r2,zero,24a0c <altera_avalon_mailbox_open+0xdc>
   249fc:	e0bfff17 	ldw	r2,-4(fp)
   24a00:	1000021e 	bne	r2,zero,24a0c <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
   24a04:	e0bffb17 	ldw	r2,-20(fp)
   24a08:	00003d06 	br	24b00 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   24a0c:	e0bffb17 	ldw	r2,-20(fp)
   24a10:	10800f17 	ldw	r2,60(r2)
   24a14:	1000021e 	bne	r2,zero,24a20 <altera_avalon_mailbox_open+0xf0>
   24a18:	e0bfff17 	ldw	r2,-4(fp)
   24a1c:	1000061e 	bne	r2,zero,24a38 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   24a20:	e0bffb17 	ldw	r2,-20(fp)
   24a24:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   24a28:	10800058 	cmpnei	r2,r2,1
   24a2c:	1000041e 	bne	r2,zero,24a40 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   24a30:	e0bffe17 	ldw	r2,-8(fp)
   24a34:	10000226 	beq	r2,zero,24a40 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
   24a38:	0005883a 	mov	r2,zero
   24a3c:	00003006 	br	24b00 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
   24a40:	e0bffb17 	ldw	r2,-20(fp)
   24a44:	e0fffe17 	ldw	r3,-8(fp)
   24a48:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
   24a4c:	e0bffb17 	ldw	r2,-20(fp)
   24a50:	e0ffff17 	ldw	r3,-4(fp)
   24a54:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
   24a58:	e0bffb17 	ldw	r2,-20(fp)
   24a5c:	10800f17 	ldw	r2,60(r2)
   24a60:	10000b1e 	bne	r2,zero,24a90 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
   24a64:	e0bffb17 	ldw	r2,-20(fp)
   24a68:	10c00c17 	ldw	r3,48(r2)
   24a6c:	e0bffb17 	ldw	r2,-20(fp)
   24a70:	10800b17 	ldw	r2,44(r2)
   24a74:	d8000015 	stw	zero,0(sp)
   24a78:	e1fffb17 	ldw	r7,-20(fp)
   24a7c:	018000b4 	movhi	r6,2
   24a80:	3191b604 	addi	r6,r6,18136
   24a84:	100b883a 	mov	r5,r2
   24a88:	1809883a 	mov	r4,r3
   24a8c:	0025eac0 	call	25eac <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
   24a90:	e0bffb17 	ldw	r2,-20(fp)
   24a94:	10800f17 	ldw	r2,60(r2)
   24a98:	10800058 	cmpnei	r2,r2,1
   24a9c:	1000171e 	bne	r2,zero,24afc <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
   24aa0:	e0bffb17 	ldw	r2,-20(fp)
   24aa4:	10c00c17 	ldw	r3,48(r2)
   24aa8:	e0bffb17 	ldw	r2,-20(fp)
   24aac:	10800b17 	ldw	r2,44(r2)
   24ab0:	d8000015 	stw	zero,0(sp)
   24ab4:	e1fffb17 	ldw	r7,-20(fp)
   24ab8:	018000b4 	movhi	r6,2
   24abc:	31920404 	addi	r6,r6,18448
   24ac0:	100b883a 	mov	r5,r2
   24ac4:	1809883a 	mov	r4,r3
   24ac8:	0025eac0 	call	25eac <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   24acc:	e0bffb17 	ldw	r2,-20(fp)
   24ad0:	10800a17 	ldw	r2,40(r2)
   24ad4:	10800304 	addi	r2,r2,12
   24ad8:	10800037 	ldwio	r2,0(r2)
   24adc:	10800054 	ori	r2,r2,1
   24ae0:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   24ae4:	e0bffb17 	ldw	r2,-20(fp)
   24ae8:	10800a17 	ldw	r2,40(r2)
   24aec:	10800304 	addi	r2,r2,12
   24af0:	1007883a 	mov	r3,r2
   24af4:	e0bffc17 	ldw	r2,-16(fp)
   24af8:	18800035 	stwio	r2,0(r3)
    }
    return dev;
   24afc:	e0bffb17 	ldw	r2,-20(fp)
}
   24b00:	e037883a 	mov	sp,fp
   24b04:	dfc00117 	ldw	ra,4(sp)
   24b08:	df000017 	ldw	fp,0(sp)
   24b0c:	dec00204 	addi	sp,sp,8
   24b10:	f800283a 	ret

00024b14 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
   24b14:	defffb04 	addi	sp,sp,-20
   24b18:	dfc00415 	stw	ra,16(sp)
   24b1c:	df000315 	stw	fp,12(sp)
   24b20:	df000304 	addi	fp,sp,12
   24b24:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
   24b28:	e0bfff17 	ldw	r2,-4(fp)
   24b2c:	10003926 	beq	r2,zero,24c14 <altera_avalon_mailbox_close+0x100>
   24b30:	e0bfff17 	ldw	r2,-4(fp)
   24b34:	10800b17 	ldw	r2,44(r2)
   24b38:	10bfffe0 	cmpeqi	r2,r2,-1
   24b3c:	1000351e 	bne	r2,zero,24c14 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
   24b40:	e0bfff17 	ldw	r2,-4(fp)
   24b44:	10800f17 	ldw	r2,60(r2)
   24b48:	10000e1e 	bne	r2,zero,24b84 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   24b4c:	e0bfff17 	ldw	r2,-4(fp)
   24b50:	10800a17 	ldw	r2,40(r2)
   24b54:	10800304 	addi	r2,r2,12
   24b58:	10800037 	ldwio	r2,0(r2)
   24b5c:	1007883a 	mov	r3,r2
   24b60:	00bfff44 	movi	r2,-3
   24b64:	1884703a 	and	r2,r3,r2
   24b68:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   24b6c:	e0bfff17 	ldw	r2,-4(fp)
   24b70:	10800a17 	ldw	r2,40(r2)
   24b74:	10800304 	addi	r2,r2,12
   24b78:	1007883a 	mov	r3,r2
   24b7c:	e0bffe17 	ldw	r2,-8(fp)
   24b80:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
   24b84:	e0bfff17 	ldw	r2,-4(fp)
   24b88:	10800f17 	ldw	r2,60(r2)
   24b8c:	10800058 	cmpnei	r2,r2,1
   24b90:	10000e1e 	bne	r2,zero,24bcc <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   24b94:	e0bfff17 	ldw	r2,-4(fp)
   24b98:	10800a17 	ldw	r2,40(r2)
   24b9c:	10800304 	addi	r2,r2,12
   24ba0:	10800037 	ldwio	r2,0(r2)
   24ba4:	1007883a 	mov	r3,r2
   24ba8:	00bfff84 	movi	r2,-2
   24bac:	1884703a 	and	r2,r3,r2
   24bb0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   24bb4:	e0bfff17 	ldw	r2,-4(fp)
   24bb8:	10800a17 	ldw	r2,40(r2)
   24bbc:	10800304 	addi	r2,r2,12
   24bc0:	1007883a 	mov	r3,r2
   24bc4:	e0bffe17 	ldw	r2,-8(fp)
   24bc8:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
   24bcc:	e0bfff17 	ldw	r2,-4(fp)
   24bd0:	10800b17 	ldw	r2,44(r2)
   24bd4:	10bfffe0 	cmpeqi	r2,r2,-1
   24bd8:	10000a1e 	bne	r2,zero,24c04 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
   24bdc:	e0bfff17 	ldw	r2,-4(fp)
   24be0:	10c00c17 	ldw	r3,48(r2)
   24be4:	e0bfff17 	ldw	r2,-4(fp)
   24be8:	10800b17 	ldw	r2,44(r2)
   24bec:	d8000015 	stw	zero,0(sp)
   24bf0:	e1ffff17 	ldw	r7,-4(fp)
   24bf4:	000d883a 	mov	r6,zero
   24bf8:	100b883a 	mov	r5,r2
   24bfc:	1809883a 	mov	r4,r3
   24c00:	0025eac0 	call	25eac <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
   24c04:	e0bfff17 	ldw	r2,-4(fp)
   24c08:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
   24c0c:	e0bfff17 	ldw	r2,-4(fp)
   24c10:	10000e15 	stw	zero,56(r2)
    }
}
   24c14:	0001883a 	nop
   24c18:	e037883a 	mov	sp,fp
   24c1c:	dfc00117 	ldw	ra,4(sp)
   24c20:	df000017 	ldw	fp,0(sp)
   24c24:	dec00204 	addi	sp,sp,8
   24c28:	f800283a 	ret

00024c2c <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
   24c2c:	defffd04 	addi	sp,sp,-12
   24c30:	df000215 	stw	fp,8(sp)
   24c34:	df000204 	addi	fp,sp,8
   24c38:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
   24c3c:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
   24c40:	e0bfff17 	ldw	r2,-4(fp)
   24c44:	10800a17 	ldw	r2,40(r2)
   24c48:	10800204 	addi	r2,r2,8
   24c4c:	10800037 	ldwio	r2,0(r2)
   24c50:	108000cc 	andi	r2,r2,3
   24c54:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
   24c58:	e0bfff17 	ldw	r2,-4(fp)
   24c5c:	10800f17 	ldw	r2,60(r2)
   24c60:	1000041e 	bne	r2,zero,24c74 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   24c64:	e0bffe17 	ldw	r2,-8(fp)
   24c68:	1080008c 	andi	r2,r2,2
   24c6c:	1004d07a 	srli	r2,r2,1
   24c70:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
   24c74:	e0bfff17 	ldw	r2,-4(fp)
   24c78:	10800f17 	ldw	r2,60(r2)
   24c7c:	10800058 	cmpnei	r2,r2,1
   24c80:	1000031e 	bne	r2,zero,24c90 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
   24c84:	e0bffe17 	ldw	r2,-8(fp)
   24c88:	1080004c 	andi	r2,r2,1
   24c8c:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
   24c90:	e0bffe17 	ldw	r2,-8(fp)
}
   24c94:	e037883a 	mov	sp,fp
   24c98:	df000017 	ldw	fp,0(sp)
   24c9c:	dec00104 	addi	sp,sp,4
   24ca0:	f800283a 	ret

00024ca4 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
   24ca4:	defff704 	addi	sp,sp,-36
   24ca8:	dfc00815 	stw	ra,32(sp)
   24cac:	df000715 	stw	fp,28(sp)
   24cb0:	df000704 	addi	fp,sp,28
   24cb4:	e13ffc15 	stw	r4,-16(fp)
   24cb8:	e17ffd15 	stw	r5,-12(fp)
   24cbc:	e1bffe15 	stw	r6,-8(fp)
   24cc0:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
   24cc4:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   24cc8:	e0bffc17 	ldw	r2,-16(fp)
   24ccc:	10801103 	ldbu	r2,68(r2)
   24cd0:	10803fcc 	andi	r2,r2,255
   24cd4:	1000061e 	bne	r2,zero,24cf0 <altera_avalon_mailbox_send+0x4c>
   24cd8:	e0bffc17 	ldw	r2,-16(fp)
   24cdc:	10800a17 	ldw	r2,40(r2)
   24ce0:	10800204 	addi	r2,r2,8
   24ce4:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
   24ce8:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   24cec:	10000226 	beq	r2,zero,24cf8 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
   24cf0:	00bfffc4 	movi	r2,-1
   24cf4:	00003a06 	br	24de0 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
   24cf8:	e0bffc17 	ldw	r2,-16(fp)
   24cfc:	e0fffd17 	ldw	r3,-12(fp)
   24d00:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
   24d04:	e0bffc17 	ldw	r2,-16(fp)
   24d08:	00c00044 	movi	r3,1
   24d0c:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
   24d10:	e0bffc17 	ldw	r2,-16(fp)
   24d14:	10800b17 	ldw	r2,44(r2)
   24d18:	10bfffe0 	cmpeqi	r2,r2,-1
   24d1c:	1000031e 	bne	r2,zero,24d2c <altera_avalon_mailbox_send+0x88>
   24d20:	e0bfff17 	ldw	r2,-4(fp)
   24d24:	10800058 	cmpnei	r2,r2,1
   24d28:	1000201e 	bne	r2,zero,24dac <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
   24d2c:	e0bffe17 	ldw	r2,-8(fp)
   24d30:	1000061e 	bne	r2,zero,24d4c <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   24d34:	e13ffc17 	ldw	r4,-16(fp)
   24d38:	0024c2c0 	call	24c2c <altera_avalon_mailbox_status>
   24d3c:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
   24d40:	e0bffb17 	ldw	r2,-20(fp)
   24d44:	103ffb1e 	bne	r2,zero,24d34 <altera_avalon_mailbox_send+0x90>
   24d48:	00000e06 	br	24d84 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   24d4c:	e13ffc17 	ldw	r4,-16(fp)
   24d50:	0024c2c0 	call	24c2c <altera_avalon_mailbox_status>
   24d54:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
   24d58:	e0bffe17 	ldw	r2,-8(fp)
   24d5c:	10bfffc4 	addi	r2,r2,-1
   24d60:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
   24d64:	e0bffb17 	ldw	r2,-20(fp)
   24d68:	10000226 	beq	r2,zero,24d74 <altera_avalon_mailbox_send+0xd0>
   24d6c:	e0bffe17 	ldw	r2,-8(fp)
   24d70:	103ff61e 	bne	r2,zero,24d4c <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
   24d74:	e0bffe17 	ldw	r2,-8(fp)
   24d78:	1000021e 	bne	r2,zero,24d84 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
   24d7c:	00bff084 	movi	r2,-62
   24d80:	00001706 	br	24de0 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
   24d84:	e17ffd17 	ldw	r5,-12(fp)
   24d88:	e13ffc17 	ldw	r4,-16(fp)
   24d8c:	00246600 	call	24660 <altera_avalon_mailbox_post>
   24d90:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   24d94:	e0bffc17 	ldw	r2,-16(fp)
   24d98:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
   24d9c:	e0bffc17 	ldw	r2,-16(fp)
   24da0:	10001105 	stb	zero,68(r2)
        return status;
   24da4:	e0bff917 	ldw	r2,-28(fp)
   24da8:	00000d06 	br	24de0 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   24dac:	e0bffc17 	ldw	r2,-16(fp)
   24db0:	10800a17 	ldw	r2,40(r2)
   24db4:	10800304 	addi	r2,r2,12
   24db8:	10800037 	ldwio	r2,0(r2)
   24dbc:	10800094 	ori	r2,r2,2
   24dc0:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   24dc4:	e0bffc17 	ldw	r2,-16(fp)
   24dc8:	10800a17 	ldw	r2,40(r2)
   24dcc:	10800304 	addi	r2,r2,12
   24dd0:	1007883a 	mov	r3,r2
   24dd4:	e0bffa17 	ldw	r2,-24(fp)
   24dd8:	18800035 	stwio	r2,0(r3)
    }
  return 0;
   24ddc:	0005883a 	mov	r2,zero
}
   24de0:	e037883a 	mov	sp,fp
   24de4:	dfc00117 	ldw	ra,4(sp)
   24de8:	df000017 	ldw	fp,0(sp)
   24dec:	dec00204 	addi	sp,sp,8
   24df0:	f800283a 	ret

00024df4 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
   24df4:	defff904 	addi	sp,sp,-28
   24df8:	dfc00615 	stw	ra,24(sp)
   24dfc:	df000515 	stw	fp,20(sp)
   24e00:	df000504 	addi	fp,sp,20
   24e04:	e13ffd15 	stw	r4,-12(fp)
   24e08:	e17ffe15 	stw	r5,-8(fp)
   24e0c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
   24e10:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
   24e14:	e0bffd17 	ldw	r2,-12(fp)
   24e18:	10003a26 	beq	r2,zero,24f04 <altera_avalon_mailbox_retrieve_poll+0x110>
   24e1c:	e0bffe17 	ldw	r2,-8(fp)
   24e20:	10003826 	beq	r2,zero,24f04 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   24e24:	e0bffd17 	ldw	r2,-12(fp)
   24e28:	10800a17 	ldw	r2,40(r2)
   24e2c:	10800304 	addi	r2,r2,12
   24e30:	10800037 	ldwio	r2,0(r2)
   24e34:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
   24e38:	e0bffd17 	ldw	r2,-12(fp)
   24e3c:	10800a17 	ldw	r2,40(r2)
   24e40:	10800304 	addi	r2,r2,12
   24e44:	1009883a 	mov	r4,r2
   24e48:	e0fffc17 	ldw	r3,-16(fp)
   24e4c:	00bfff84 	movi	r2,-2
   24e50:	1884703a 	and	r2,r3,r2
   24e54:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
   24e58:	e0bfff17 	ldw	r2,-4(fp)
   24e5c:	1000061e 	bne	r2,zero,24e78 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
   24e60:	e13ffd17 	ldw	r4,-12(fp)
   24e64:	0024c2c0 	call	24c2c <altera_avalon_mailbox_status>
   24e68:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
   24e6c:	e0bffb17 	ldw	r2,-20(fp)
   24e70:	103ffb26 	beq	r2,zero,24e60 <altera_avalon_mailbox_retrieve_poll+0x6c>
   24e74:	00000a06 	br	24ea0 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
   24e78:	e13ffd17 	ldw	r4,-12(fp)
   24e7c:	0024c2c0 	call	24c2c <altera_avalon_mailbox_status>
   24e80:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
   24e84:	e0bfff17 	ldw	r2,-4(fp)
   24e88:	10bfffc4 	addi	r2,r2,-1
   24e8c:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
   24e90:	e0bffb17 	ldw	r2,-20(fp)
   24e94:	1000021e 	bne	r2,zero,24ea0 <altera_avalon_mailbox_retrieve_poll+0xac>
   24e98:	e0bfff17 	ldw	r2,-4(fp)
   24e9c:	103ff61e 	bne	r2,zero,24e78 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
   24ea0:	e0bffb17 	ldw	r2,-20(fp)
   24ea4:	10000d26 	beq	r2,zero,24edc <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   24ea8:	e0bffe17 	ldw	r2,-8(fp)
   24eac:	10800104 	addi	r2,r2,4
   24eb0:	e0fffd17 	ldw	r3,-12(fp)
   24eb4:	18c00a17 	ldw	r3,40(r3)
   24eb8:	18c00104 	addi	r3,r3,4
   24ebc:	18c00037 	ldwio	r3,0(r3)
   24ec0:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   24ec4:	e0bffd17 	ldw	r2,-12(fp)
   24ec8:	10800a17 	ldw	r2,40(r2)
   24ecc:	10800037 	ldwio	r2,0(r2)
   24ed0:	1007883a 	mov	r3,r2
   24ed4:	e0bffe17 	ldw	r2,-8(fp)
   24ed8:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   24edc:	e0bffd17 	ldw	r2,-12(fp)
   24ee0:	10800a17 	ldw	r2,40(r2)
   24ee4:	10800304 	addi	r2,r2,12
   24ee8:	1007883a 	mov	r3,r2
   24eec:	e0bffc17 	ldw	r2,-16(fp)
   24ef0:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
   24ef4:	e0bffb17 	ldw	r2,-20(fp)
   24ef8:	10000226 	beq	r2,zero,24f04 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
   24efc:	0005883a 	mov	r2,zero
   24f00:	00000606 	br	24f1c <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
   24f04:	e0bffe17 	ldw	r2,-8(fp)
   24f08:	10800104 	addi	r2,r2,4
   24f0c:	10000015 	stw	zero,0(r2)
      message[0] = 0;
   24f10:	e0bffe17 	ldw	r2,-8(fp)
   24f14:	10000015 	stw	zero,0(r2)
      return -EINVAL;
   24f18:	00bffa84 	movi	r2,-22
}
   24f1c:	e037883a 	mov	sp,fp
   24f20:	dfc00117 	ldw	ra,4(sp)
   24f24:	df000017 	ldw	fp,0(sp)
   24f28:	dec00204 	addi	sp,sp,8
   24f2c:	f800283a 	ret

00024f30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24f30:	defffe04 	addi	sp,sp,-8
   24f34:	dfc00115 	stw	ra,4(sp)
   24f38:	df000015 	stw	fp,0(sp)
   24f3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24f40:	d0a00917 	ldw	r2,-32732(gp)
   24f44:	10000326 	beq	r2,zero,24f54 <alt_get_errno+0x24>
   24f48:	d0a00917 	ldw	r2,-32732(gp)
   24f4c:	103ee83a 	callr	r2
   24f50:	00000106 	br	24f58 <alt_get_errno+0x28>
   24f54:	d0a6fb04 	addi	r2,gp,-25620
}
   24f58:	e037883a 	mov	sp,fp
   24f5c:	dfc00117 	ldw	ra,4(sp)
   24f60:	df000017 	ldw	fp,0(sp)
   24f64:	dec00204 	addi	sp,sp,8
   24f68:	f800283a 	ret

00024f6c <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   24f6c:	defff904 	addi	sp,sp,-28
   24f70:	df000615 	stw	fp,24(sp)
   24f74:	df000604 	addi	fp,sp,24
   24f78:	e13ffe15 	stw	r4,-8(fp)
   24f7c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
   24f80:	00bfffc4 	movi	r2,-1
   24f84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
   24f88:	0005317a 	rdctl	r2,cpuid
   24f8c:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   24f90:	e0bffb17 	ldw	r2,-20(fp)
   24f94:	1006943a 	slli	r3,r2,16
   24f98:	e0bfff17 	ldw	r2,-4(fp)
   24f9c:	1884b03a 	or	r2,r3,r2
   24fa0:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   24fa4:	e0bffe17 	ldw	r2,-8(fp)
   24fa8:	10800317 	ldw	r2,12(r2)
   24fac:	e0fffc17 	ldw	r3,-16(fp)
   24fb0:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   24fb4:	e0bffe17 	ldw	r2,-8(fp)
   24fb8:	10800317 	ldw	r2,12(r2)
   24fbc:	10800037 	ldwio	r2,0(r2)
   24fc0:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
   24fc4:	e0fffd17 	ldw	r3,-12(fp)
   24fc8:	e0bffc17 	ldw	r2,-16(fp)
   24fcc:	1880011e 	bne	r3,r2,24fd4 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
   24fd0:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
   24fd4:	e0bffa17 	ldw	r2,-24(fp)
}
   24fd8:	e037883a 	mov	sp,fp
   24fdc:	df000017 	ldw	fp,0(sp)
   24fe0:	dec00104 	addi	sp,sp,4
   24fe4:	f800283a 	ret

00024fe8 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   24fe8:	defffc04 	addi	sp,sp,-16
   24fec:	dfc00315 	stw	ra,12(sp)
   24ff0:	df000215 	stw	fp,8(sp)
   24ff4:	df000204 	addi	fp,sp,8
   24ff8:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   24ffc:	d1600d04 	addi	r5,gp,-32716
   25000:	e13fff17 	ldw	r4,-4(fp)
   25004:	0025de80 	call	25de8 <alt_find_dev>
   25008:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
   2500c:	e0bffe17 	ldw	r2,-8(fp)
   25010:	1000041e 	bne	r2,zero,25024 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   25014:	0024f300 	call	24f30 <alt_get_errno>
   25018:	1007883a 	mov	r3,r2
   2501c:	008004c4 	movi	r2,19
   25020:	18800015 	stw	r2,0(r3)
  }

  return dev;
   25024:	e0bffe17 	ldw	r2,-8(fp)
}
   25028:	e037883a 	mov	sp,fp
   2502c:	dfc00117 	ldw	ra,4(sp)
   25030:	df000017 	ldw	fp,0(sp)
   25034:	dec00204 	addi	sp,sp,8
   25038:	f800283a 	ret

0002503c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
   2503c:	defffe04 	addi	sp,sp,-8
   25040:	df000115 	stw	fp,4(sp)
   25044:	df000104 	addi	fp,sp,4
   25048:	e13fff15 	stw	r4,-4(fp)
  return;
   2504c:	0001883a 	nop
}
   25050:	e037883a 	mov	sp,fp
   25054:	df000017 	ldw	fp,0(sp)
   25058:	dec00104 	addi	sp,sp,4
   2505c:	f800283a 	ret

00025060 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   25060:	defffc04 	addi	sp,sp,-16
   25064:	dfc00315 	stw	ra,12(sp)
   25068:	df000215 	stw	fp,8(sp)
   2506c:	df000204 	addi	fp,sp,8
   25070:	e13ffe15 	stw	r4,-8(fp)
   25074:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   25078:	0001883a 	nop
   2507c:	e17fff17 	ldw	r5,-4(fp)
   25080:	e13ffe17 	ldw	r4,-8(fp)
   25084:	0024f6c0 	call	24f6c <alt_mutex_trylock>
   25088:	103ffc1e 	bne	r2,zero,2507c <altera_avalon_mutex_lock+0x1c>
}
   2508c:	0001883a 	nop
   25090:	e037883a 	mov	sp,fp
   25094:	dfc00117 	ldw	ra,4(sp)
   25098:	df000017 	ldw	fp,0(sp)
   2509c:	dec00204 	addi	sp,sp,8
   250a0:	f800283a 	ret

000250a4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   250a4:	defffa04 	addi	sp,sp,-24
   250a8:	dfc00515 	stw	ra,20(sp)
   250ac:	df000415 	stw	fp,16(sp)
   250b0:	df000404 	addi	fp,sp,16
   250b4:	e13ffd15 	stw	r4,-12(fp)
   250b8:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   250bc:	e17ffe17 	ldw	r5,-8(fp)
   250c0:	e13ffd17 	ldw	r4,-12(fp)
   250c4:	0024f6c0 	call	24f6c <alt_mutex_trylock>
   250c8:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
   250cc:	e0bffc17 	ldw	r2,-16(fp)
}
   250d0:	e037883a 	mov	sp,fp
   250d4:	dfc00117 	ldw	ra,4(sp)
   250d8:	df000017 	ldw	fp,0(sp)
   250dc:	dec00204 	addi	sp,sp,8
   250e0:	f800283a 	ret

000250e4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
   250e4:	defffd04 	addi	sp,sp,-12
   250e8:	df000215 	stw	fp,8(sp)
   250ec:	df000204 	addi	fp,sp,8
   250f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   250f4:	0005317a 	rdctl	r2,cpuid
   250f8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   250fc:	e0bfff17 	ldw	r2,-4(fp)
   25100:	10800317 	ldw	r2,12(r2)
   25104:	10800104 	addi	r2,r2,4
   25108:	00c00044 	movi	r3,1
   2510c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   25110:	e0bfff17 	ldw	r2,-4(fp)
   25114:	10800317 	ldw	r2,12(r2)
   25118:	e0fffe17 	ldw	r3,-8(fp)
   2511c:	1806943a 	slli	r3,r3,16
   25120:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   25124:	0001883a 	nop
   25128:	e037883a 	mov	sp,fp
   2512c:	df000017 	ldw	fp,0(sp)
   25130:	dec00104 	addi	sp,sp,4
   25134:	f800283a 	ret

00025138 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
   25138:	defff904 	addi	sp,sp,-28
   2513c:	df000615 	stw	fp,24(sp)
   25140:	df000604 	addi	fp,sp,24
   25144:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
   25148:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
   2514c:	0005317a 	rdctl	r2,cpuid
   25150:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   25154:	e0bfff17 	ldw	r2,-4(fp)
   25158:	10800317 	ldw	r2,12(r2)
   2515c:	10800037 	ldwio	r2,0(r2)
   25160:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
   25164:	e0bffc17 	ldw	r2,-16(fp)
   25168:	1004d43a 	srli	r2,r2,16
   2516c:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   25170:	e0fffd17 	ldw	r3,-12(fp)
   25174:	e0bffb17 	ldw	r2,-20(fp)
   25178:	1880071e 	bne	r3,r2,25198 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
   2517c:	e0bffc17 	ldw	r2,-16(fp)
   25180:	10bfffcc 	andi	r2,r2,65535
   25184:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
   25188:	e0bffe17 	ldw	r2,-8(fp)
   2518c:	10000226 	beq	r2,zero,25198 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
   25190:	00800044 	movi	r2,1
   25194:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
   25198:	e0bffa17 	ldw	r2,-24(fp)
}
   2519c:	e037883a 	mov	sp,fp
   251a0:	df000017 	ldw	fp,0(sp)
   251a4:	dec00104 	addi	sp,sp,4
   251a8:	f800283a 	ret

000251ac <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
   251ac:	defffc04 	addi	sp,sp,-16
   251b0:	df000315 	stw	fp,12(sp)
   251b4:	df000304 	addi	fp,sp,12
   251b8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
   251bc:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   251c0:	e0bfff17 	ldw	r2,-4(fp)
   251c4:	10800317 	ldw	r2,12(r2)
   251c8:	10800104 	addi	r2,r2,4
   251cc:	10800037 	ldwio	r2,0(r2)
   251d0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
   251d4:	e0bffe17 	ldw	r2,-8(fp)
   251d8:	1080004c 	andi	r2,r2,1
   251dc:	10000226 	beq	r2,zero,251e8 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
   251e0:	00800044 	movi	r2,1
   251e4:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
   251e8:	e0bffd17 	ldw	r2,-12(fp)
}
   251ec:	e037883a 	mov	sp,fp
   251f0:	df000017 	ldw	fp,0(sp)
   251f4:	dec00104 	addi	sp,sp,4
   251f8:	f800283a 	ret

000251fc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   251fc:	defffa04 	addi	sp,sp,-24
   25200:	dfc00515 	stw	ra,20(sp)
   25204:	df000415 	stw	fp,16(sp)
   25208:	df000404 	addi	fp,sp,16
   2520c:	e13ffd15 	stw	r4,-12(fp)
   25210:	e17ffe15 	stw	r5,-8(fp)
   25214:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   25218:	e0bffd17 	ldw	r2,-12(fp)
   2521c:	10800017 	ldw	r2,0(r2)
   25220:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   25224:	e0bffc17 	ldw	r2,-16(fp)
   25228:	10c00a04 	addi	r3,r2,40
   2522c:	e0bffd17 	ldw	r2,-12(fp)
   25230:	10800217 	ldw	r2,8(r2)
   25234:	100f883a 	mov	r7,r2
   25238:	e1bfff17 	ldw	r6,-4(fp)
   2523c:	e17ffe17 	ldw	r5,-8(fp)
   25240:	1809883a 	mov	r4,r3
   25244:	00257100 	call	25710 <altera_avalon_uart_read>
      fd->fd_flags);
}
   25248:	e037883a 	mov	sp,fp
   2524c:	dfc00117 	ldw	ra,4(sp)
   25250:	df000017 	ldw	fp,0(sp)
   25254:	dec00204 	addi	sp,sp,8
   25258:	f800283a 	ret

0002525c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2525c:	defffa04 	addi	sp,sp,-24
   25260:	dfc00515 	stw	ra,20(sp)
   25264:	df000415 	stw	fp,16(sp)
   25268:	df000404 	addi	fp,sp,16
   2526c:	e13ffd15 	stw	r4,-12(fp)
   25270:	e17ffe15 	stw	r5,-8(fp)
   25274:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   25278:	e0bffd17 	ldw	r2,-12(fp)
   2527c:	10800017 	ldw	r2,0(r2)
   25280:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   25284:	e0bffc17 	ldw	r2,-16(fp)
   25288:	10c00a04 	addi	r3,r2,40
   2528c:	e0bffd17 	ldw	r2,-12(fp)
   25290:	10800217 	ldw	r2,8(r2)
   25294:	100f883a 	mov	r7,r2
   25298:	e1bfff17 	ldw	r6,-4(fp)
   2529c:	e17ffe17 	ldw	r5,-8(fp)
   252a0:	1809883a 	mov	r4,r3
   252a4:	00259280 	call	25928 <altera_avalon_uart_write>
      fd->fd_flags);
}
   252a8:	e037883a 	mov	sp,fp
   252ac:	dfc00117 	ldw	ra,4(sp)
   252b0:	df000017 	ldw	fp,0(sp)
   252b4:	dec00204 	addi	sp,sp,8
   252b8:	f800283a 	ret

000252bc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   252bc:	defffc04 	addi	sp,sp,-16
   252c0:	dfc00315 	stw	ra,12(sp)
   252c4:	df000215 	stw	fp,8(sp)
   252c8:	df000204 	addi	fp,sp,8
   252cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   252d0:	e0bfff17 	ldw	r2,-4(fp)
   252d4:	10800017 	ldw	r2,0(r2)
   252d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   252dc:	e0bffe17 	ldw	r2,-8(fp)
   252e0:	10c00a04 	addi	r3,r2,40
   252e4:	e0bfff17 	ldw	r2,-4(fp)
   252e8:	10800217 	ldw	r2,8(r2)
   252ec:	100b883a 	mov	r5,r2
   252f0:	1809883a 	mov	r4,r3
   252f4:	00256800 	call	25680 <altera_avalon_uart_close>
}
   252f8:	e037883a 	mov	sp,fp
   252fc:	dfc00117 	ldw	ra,4(sp)
   25300:	df000017 	ldw	fp,0(sp)
   25304:	dec00204 	addi	sp,sp,8
   25308:	f800283a 	ret

0002530c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2530c:	defff804 	addi	sp,sp,-32
   25310:	dfc00715 	stw	ra,28(sp)
   25314:	df000615 	stw	fp,24(sp)
   25318:	df000604 	addi	fp,sp,24
   2531c:	e13ffd15 	stw	r4,-12(fp)
   25320:	e17ffe15 	stw	r5,-8(fp)
   25324:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   25328:	e0bffd17 	ldw	r2,-12(fp)
   2532c:	10800017 	ldw	r2,0(r2)
   25330:	e0bffb15 	stw	r2,-20(fp)
   25334:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   25338:	1000041e 	bne	r2,zero,2534c <altera_avalon_uart_init+0x40>
   2533c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   25340:	1000021e 	bne	r2,zero,2534c <altera_avalon_uart_init+0x40>
   25344:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   25348:	10000226 	beq	r2,zero,25354 <altera_avalon_uart_init+0x48>
   2534c:	00800044 	movi	r2,1
   25350:	00000106 	br	25358 <altera_avalon_uart_init+0x4c>
   25354:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   25358:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2535c:	e0bffc17 	ldw	r2,-16(fp)
   25360:	10000f1e 	bne	r2,zero,253a0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   25364:	e0bffd17 	ldw	r2,-12(fp)
   25368:	00c32004 	movi	r3,3200
   2536c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   25370:	e0bffb17 	ldw	r2,-20(fp)
   25374:	10800304 	addi	r2,r2,12
   25378:	e0fffd17 	ldw	r3,-12(fp)
   2537c:	18c00117 	ldw	r3,4(r3)
   25380:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   25384:	d8000015 	stw	zero,0(sp)
   25388:	e1fffd17 	ldw	r7,-12(fp)
   2538c:	018000b4 	movhi	r6,2
   25390:	3194ee04 	addi	r6,r6,21432
   25394:	e17fff17 	ldw	r5,-4(fp)
   25398:	e13ffe17 	ldw	r4,-8(fp)
   2539c:	0025eac0 	call	25eac <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   253a0:	0001883a 	nop
   253a4:	e037883a 	mov	sp,fp
   253a8:	dfc00117 	ldw	ra,4(sp)
   253ac:	df000017 	ldw	fp,0(sp)
   253b0:	dec00204 	addi	sp,sp,8
   253b4:	f800283a 	ret

000253b8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   253b8:	defffa04 	addi	sp,sp,-24
   253bc:	dfc00515 	stw	ra,20(sp)
   253c0:	df000415 	stw	fp,16(sp)
   253c4:	df000404 	addi	fp,sp,16
   253c8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   253cc:	e0bfff17 	ldw	r2,-4(fp)
   253d0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   253d4:	e0bffc17 	ldw	r2,-16(fp)
   253d8:	10800017 	ldw	r2,0(r2)
   253dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   253e0:	e0bffd17 	ldw	r2,-12(fp)
   253e4:	10800204 	addi	r2,r2,8
   253e8:	10800037 	ldwio	r2,0(r2)
   253ec:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   253f0:	e0bffd17 	ldw	r2,-12(fp)
   253f4:	10800204 	addi	r2,r2,8
   253f8:	0007883a 	mov	r3,zero
   253fc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   25400:	e0bffd17 	ldw	r2,-12(fp)
   25404:	10800204 	addi	r2,r2,8
   25408:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2540c:	e0bffe17 	ldw	r2,-8(fp)
   25410:	1080200c 	andi	r2,r2,128
   25414:	10000326 	beq	r2,zero,25424 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   25418:	e17ffe17 	ldw	r5,-8(fp)
   2541c:	e13ffc17 	ldw	r4,-16(fp)
   25420:	00254540 	call	25454 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   25424:	e0bffe17 	ldw	r2,-8(fp)
   25428:	1081100c 	andi	r2,r2,1088
   2542c:	10000326 	beq	r2,zero,2543c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   25430:	e17ffe17 	ldw	r5,-8(fp)
   25434:	e13ffc17 	ldw	r4,-16(fp)
   25438:	00255380 	call	25538 <altera_avalon_uart_txirq>
  }
  

}
   2543c:	0001883a 	nop
   25440:	e037883a 	mov	sp,fp
   25444:	dfc00117 	ldw	ra,4(sp)
   25448:	df000017 	ldw	fp,0(sp)
   2544c:	dec00204 	addi	sp,sp,8
   25450:	f800283a 	ret

00025454 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   25454:	defffc04 	addi	sp,sp,-16
   25458:	df000315 	stw	fp,12(sp)
   2545c:	df000304 	addi	fp,sp,12
   25460:	e13ffe15 	stw	r4,-8(fp)
   25464:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   25468:	e0bfff17 	ldw	r2,-4(fp)
   2546c:	108000cc 	andi	r2,r2,3
   25470:	10002c1e 	bne	r2,zero,25524 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   25474:	e0bffe17 	ldw	r2,-8(fp)
   25478:	10800317 	ldw	r2,12(r2)
   2547c:	e0bffe17 	ldw	r2,-8(fp)
   25480:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   25484:	e0bffe17 	ldw	r2,-8(fp)
   25488:	10800317 	ldw	r2,12(r2)
   2548c:	10800044 	addi	r2,r2,1
   25490:	10800fcc 	andi	r2,r2,63
   25494:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   25498:	e0bffe17 	ldw	r2,-8(fp)
   2549c:	10800317 	ldw	r2,12(r2)
   254a0:	e0fffe17 	ldw	r3,-8(fp)
   254a4:	18c00017 	ldw	r3,0(r3)
   254a8:	18c00037 	ldwio	r3,0(r3)
   254ac:	1809883a 	mov	r4,r3
   254b0:	e0fffe17 	ldw	r3,-8(fp)
   254b4:	1885883a 	add	r2,r3,r2
   254b8:	10800704 	addi	r2,r2,28
   254bc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   254c0:	e0bffe17 	ldw	r2,-8(fp)
   254c4:	e0fffd17 	ldw	r3,-12(fp)
   254c8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   254cc:	e0bffe17 	ldw	r2,-8(fp)
   254d0:	10800317 	ldw	r2,12(r2)
   254d4:	10800044 	addi	r2,r2,1
   254d8:	10800fcc 	andi	r2,r2,63
   254dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   254e0:	e0bffe17 	ldw	r2,-8(fp)
   254e4:	10c00217 	ldw	r3,8(r2)
   254e8:	e0bffd17 	ldw	r2,-12(fp)
   254ec:	18800e1e 	bne	r3,r2,25528 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   254f0:	e0bffe17 	ldw	r2,-8(fp)
   254f4:	10c00117 	ldw	r3,4(r2)
   254f8:	00bfdfc4 	movi	r2,-129
   254fc:	1886703a 	and	r3,r3,r2
   25500:	e0bffe17 	ldw	r2,-8(fp)
   25504:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   25508:	e0bffe17 	ldw	r2,-8(fp)
   2550c:	10800017 	ldw	r2,0(r2)
   25510:	10800304 	addi	r2,r2,12
   25514:	e0fffe17 	ldw	r3,-8(fp)
   25518:	18c00117 	ldw	r3,4(r3)
   2551c:	10c00035 	stwio	r3,0(r2)
   25520:	00000106 	br	25528 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   25524:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   25528:	e037883a 	mov	sp,fp
   2552c:	df000017 	ldw	fp,0(sp)
   25530:	dec00104 	addi	sp,sp,4
   25534:	f800283a 	ret

00025538 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   25538:	defffb04 	addi	sp,sp,-20
   2553c:	df000415 	stw	fp,16(sp)
   25540:	df000404 	addi	fp,sp,16
   25544:	e13ffc15 	stw	r4,-16(fp)
   25548:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2554c:	e0bffc17 	ldw	r2,-16(fp)
   25550:	10c00417 	ldw	r3,16(r2)
   25554:	e0bffc17 	ldw	r2,-16(fp)
   25558:	10800517 	ldw	r2,20(r2)
   2555c:	18803226 	beq	r3,r2,25628 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   25560:	e0bffc17 	ldw	r2,-16(fp)
   25564:	10800617 	ldw	r2,24(r2)
   25568:	1080008c 	andi	r2,r2,2
   2556c:	10000326 	beq	r2,zero,2557c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   25570:	e0bffd17 	ldw	r2,-12(fp)
   25574:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   25578:	10001d26 	beq	r2,zero,255f0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2557c:	e0bffc17 	ldw	r2,-16(fp)
   25580:	10800417 	ldw	r2,16(r2)
   25584:	e0bffc17 	ldw	r2,-16(fp)
   25588:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2558c:	e0bffc17 	ldw	r2,-16(fp)
   25590:	10800017 	ldw	r2,0(r2)
   25594:	10800104 	addi	r2,r2,4
   25598:	e0fffc17 	ldw	r3,-16(fp)
   2559c:	18c00417 	ldw	r3,16(r3)
   255a0:	e13ffc17 	ldw	r4,-16(fp)
   255a4:	20c7883a 	add	r3,r4,r3
   255a8:	18c01704 	addi	r3,r3,92
   255ac:	18c00003 	ldbu	r3,0(r3)
   255b0:	18c03fcc 	andi	r3,r3,255
   255b4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   255b8:	e0bffc17 	ldw	r2,-16(fp)
   255bc:	10800417 	ldw	r2,16(r2)
   255c0:	10800044 	addi	r2,r2,1
   255c4:	e0fffc17 	ldw	r3,-16(fp)
   255c8:	18800415 	stw	r2,16(r3)
   255cc:	10c00fcc 	andi	r3,r2,63
   255d0:	e0bffc17 	ldw	r2,-16(fp)
   255d4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   255d8:	e0bffc17 	ldw	r2,-16(fp)
   255dc:	10800117 	ldw	r2,4(r2)
   255e0:	10c01014 	ori	r3,r2,64
   255e4:	e0bffc17 	ldw	r2,-16(fp)
   255e8:	10c00115 	stw	r3,4(r2)
   255ec:	00000e06 	br	25628 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   255f0:	e0bffc17 	ldw	r2,-16(fp)
   255f4:	10800017 	ldw	r2,0(r2)
   255f8:	10800204 	addi	r2,r2,8
   255fc:	10800037 	ldwio	r2,0(r2)
   25600:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   25604:	e0bffd17 	ldw	r2,-12(fp)
   25608:	1082000c 	andi	r2,r2,2048
   2560c:	1000061e 	bne	r2,zero,25628 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   25610:	e0bffc17 	ldw	r2,-16(fp)
   25614:	10c00117 	ldw	r3,4(r2)
   25618:	00bfefc4 	movi	r2,-65
   2561c:	1886703a 	and	r3,r3,r2
   25620:	e0bffc17 	ldw	r2,-16(fp)
   25624:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   25628:	e0bffc17 	ldw	r2,-16(fp)
   2562c:	10c00417 	ldw	r3,16(r2)
   25630:	e0bffc17 	ldw	r2,-16(fp)
   25634:	10800517 	ldw	r2,20(r2)
   25638:	1880061e 	bne	r3,r2,25654 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2563c:	e0bffc17 	ldw	r2,-16(fp)
   25640:	10c00117 	ldw	r3,4(r2)
   25644:	00beefc4 	movi	r2,-1089
   25648:	1886703a 	and	r3,r3,r2
   2564c:	e0bffc17 	ldw	r2,-16(fp)
   25650:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   25654:	e0bffc17 	ldw	r2,-16(fp)
   25658:	10800017 	ldw	r2,0(r2)
   2565c:	10800304 	addi	r2,r2,12
   25660:	e0fffc17 	ldw	r3,-16(fp)
   25664:	18c00117 	ldw	r3,4(r3)
   25668:	10c00035 	stwio	r3,0(r2)
}
   2566c:	0001883a 	nop
   25670:	e037883a 	mov	sp,fp
   25674:	df000017 	ldw	fp,0(sp)
   25678:	dec00104 	addi	sp,sp,4
   2567c:	f800283a 	ret

00025680 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   25680:	defffd04 	addi	sp,sp,-12
   25684:	df000215 	stw	fp,8(sp)
   25688:	df000204 	addi	fp,sp,8
   2568c:	e13ffe15 	stw	r4,-8(fp)
   25690:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   25694:	00000506 	br	256ac <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   25698:	e0bfff17 	ldw	r2,-4(fp)
   2569c:	1090000c 	andi	r2,r2,16384
   256a0:	10000226 	beq	r2,zero,256ac <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   256a4:	00bffd44 	movi	r2,-11
   256a8:	00000606 	br	256c4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   256ac:	e0bffe17 	ldw	r2,-8(fp)
   256b0:	10c00417 	ldw	r3,16(r2)
   256b4:	e0bffe17 	ldw	r2,-8(fp)
   256b8:	10800517 	ldw	r2,20(r2)
   256bc:	18bff61e 	bne	r3,r2,25698 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   256c0:	0005883a 	mov	r2,zero
}
   256c4:	e037883a 	mov	sp,fp
   256c8:	df000017 	ldw	fp,0(sp)
   256cc:	dec00104 	addi	sp,sp,4
   256d0:	f800283a 	ret

000256d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   256d4:	defffe04 	addi	sp,sp,-8
   256d8:	dfc00115 	stw	ra,4(sp)
   256dc:	df000015 	stw	fp,0(sp)
   256e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   256e4:	d0a00917 	ldw	r2,-32732(gp)
   256e8:	10000326 	beq	r2,zero,256f8 <alt_get_errno+0x24>
   256ec:	d0a00917 	ldw	r2,-32732(gp)
   256f0:	103ee83a 	callr	r2
   256f4:	00000106 	br	256fc <alt_get_errno+0x28>
   256f8:	d0a6fb04 	addi	r2,gp,-25620
}
   256fc:	e037883a 	mov	sp,fp
   25700:	dfc00117 	ldw	ra,4(sp)
   25704:	df000017 	ldw	fp,0(sp)
   25708:	dec00204 	addi	sp,sp,8
   2570c:	f800283a 	ret

00025710 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   25710:	defff204 	addi	sp,sp,-56
   25714:	dfc00d15 	stw	ra,52(sp)
   25718:	df000c15 	stw	fp,48(sp)
   2571c:	df000c04 	addi	fp,sp,48
   25720:	e13ffc15 	stw	r4,-16(fp)
   25724:	e17ffd15 	stw	r5,-12(fp)
   25728:	e1bffe15 	stw	r6,-8(fp)
   2572c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   25730:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   25734:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   25738:	e0bfff17 	ldw	r2,-4(fp)
   2573c:	1090000c 	andi	r2,r2,16384
   25740:	1005003a 	cmpeq	r2,r2,zero
   25744:	10803fcc 	andi	r2,r2,255
   25748:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2574c:	00001306 	br	2579c <altera_avalon_uart_read+0x8c>
    {
      count++;
   25750:	e0bff517 	ldw	r2,-44(fp)
   25754:	10800044 	addi	r2,r2,1
   25758:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2575c:	e0bffd17 	ldw	r2,-12(fp)
   25760:	10c00044 	addi	r3,r2,1
   25764:	e0fffd15 	stw	r3,-12(fp)
   25768:	e0fffc17 	ldw	r3,-16(fp)
   2576c:	18c00217 	ldw	r3,8(r3)
   25770:	e13ffc17 	ldw	r4,-16(fp)
   25774:	20c7883a 	add	r3,r4,r3
   25778:	18c00704 	addi	r3,r3,28
   2577c:	18c00003 	ldbu	r3,0(r3)
   25780:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   25784:	e0bffc17 	ldw	r2,-16(fp)
   25788:	10800217 	ldw	r2,8(r2)
   2578c:	10800044 	addi	r2,r2,1
   25790:	10c00fcc 	andi	r3,r2,63
   25794:	e0bffc17 	ldw	r2,-16(fp)
   25798:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2579c:	e0fff517 	ldw	r3,-44(fp)
   257a0:	e0bffe17 	ldw	r2,-8(fp)
   257a4:	1880050e 	bge	r3,r2,257bc <altera_avalon_uart_read+0xac>
   257a8:	e0bffc17 	ldw	r2,-16(fp)
   257ac:	10c00217 	ldw	r3,8(r2)
   257b0:	e0bffc17 	ldw	r2,-16(fp)
   257b4:	10800317 	ldw	r2,12(r2)
   257b8:	18bfe51e 	bne	r3,r2,25750 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   257bc:	e0bff517 	ldw	r2,-44(fp)
   257c0:	1000251e 	bne	r2,zero,25858 <altera_avalon_uart_read+0x148>
   257c4:	e0bffc17 	ldw	r2,-16(fp)
   257c8:	10c00217 	ldw	r3,8(r2)
   257cc:	e0bffc17 	ldw	r2,-16(fp)
   257d0:	10800317 	ldw	r2,12(r2)
   257d4:	1880201e 	bne	r3,r2,25858 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   257d8:	e0bff617 	ldw	r2,-40(fp)
   257dc:	1000071e 	bne	r2,zero,257fc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   257e0:	00256d40 	call	256d4 <alt_get_errno>
   257e4:	1007883a 	mov	r3,r2
   257e8:	008002c4 	movi	r2,11
   257ec:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   257f0:	00800044 	movi	r2,1
   257f4:	e0bff405 	stb	r2,-48(fp)
        break;
   257f8:	00001b06 	br	25868 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   257fc:	0005303a 	rdctl	r2,status
   25800:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25804:	e0fff917 	ldw	r3,-28(fp)
   25808:	00bfff84 	movi	r2,-2
   2580c:	1884703a 	and	r2,r3,r2
   25810:	1001703a 	wrctl	status,r2
  
  return context;
   25814:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   25818:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2581c:	e0bffc17 	ldw	r2,-16(fp)
   25820:	10800117 	ldw	r2,4(r2)
   25824:	10c02014 	ori	r3,r2,128
   25828:	e0bffc17 	ldw	r2,-16(fp)
   2582c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   25830:	e0bffc17 	ldw	r2,-16(fp)
   25834:	10800017 	ldw	r2,0(r2)
   25838:	10800304 	addi	r2,r2,12
   2583c:	e0fffc17 	ldw	r3,-16(fp)
   25840:	18c00117 	ldw	r3,4(r3)
   25844:	10c00035 	stwio	r3,0(r2)
   25848:	e0bff817 	ldw	r2,-32(fp)
   2584c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25850:	e0bffa17 	ldw	r2,-24(fp)
   25854:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   25858:	e0bff517 	ldw	r2,-44(fp)
   2585c:	1000021e 	bne	r2,zero,25868 <altera_avalon_uart_read+0x158>
   25860:	e0bffe17 	ldw	r2,-8(fp)
   25864:	103fcd1e 	bne	r2,zero,2579c <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25868:	0005303a 	rdctl	r2,status
   2586c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25870:	e0fffb17 	ldw	r3,-20(fp)
   25874:	00bfff84 	movi	r2,-2
   25878:	1884703a 	and	r2,r3,r2
   2587c:	1001703a 	wrctl	status,r2
  
  return context;
   25880:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   25884:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   25888:	e0bffc17 	ldw	r2,-16(fp)
   2588c:	10800117 	ldw	r2,4(r2)
   25890:	10c02014 	ori	r3,r2,128
   25894:	e0bffc17 	ldw	r2,-16(fp)
   25898:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2589c:	e0bffc17 	ldw	r2,-16(fp)
   258a0:	10800017 	ldw	r2,0(r2)
   258a4:	10800304 	addi	r2,r2,12
   258a8:	e0fffc17 	ldw	r3,-16(fp)
   258ac:	18c00117 	ldw	r3,4(r3)
   258b0:	10c00035 	stwio	r3,0(r2)
   258b4:	e0bff817 	ldw	r2,-32(fp)
   258b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   258bc:	e0bff717 	ldw	r2,-36(fp)
   258c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   258c4:	e0bff403 	ldbu	r2,-48(fp)
   258c8:	10000226 	beq	r2,zero,258d4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   258cc:	00bffd44 	movi	r2,-11
   258d0:	00000106 	br	258d8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   258d4:	e0bff517 	ldw	r2,-44(fp)
  }
}
   258d8:	e037883a 	mov	sp,fp
   258dc:	dfc00117 	ldw	ra,4(sp)
   258e0:	df000017 	ldw	fp,0(sp)
   258e4:	dec00204 	addi	sp,sp,8
   258e8:	f800283a 	ret

000258ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   258ec:	defffe04 	addi	sp,sp,-8
   258f0:	dfc00115 	stw	ra,4(sp)
   258f4:	df000015 	stw	fp,0(sp)
   258f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   258fc:	d0a00917 	ldw	r2,-32732(gp)
   25900:	10000326 	beq	r2,zero,25910 <alt_get_errno+0x24>
   25904:	d0a00917 	ldw	r2,-32732(gp)
   25908:	103ee83a 	callr	r2
   2590c:	00000106 	br	25914 <alt_get_errno+0x28>
   25910:	d0a6fb04 	addi	r2,gp,-25620
}
   25914:	e037883a 	mov	sp,fp
   25918:	dfc00117 	ldw	ra,4(sp)
   2591c:	df000017 	ldw	fp,0(sp)
   25920:	dec00204 	addi	sp,sp,8
   25924:	f800283a 	ret

00025928 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   25928:	defff204 	addi	sp,sp,-56
   2592c:	dfc00d15 	stw	ra,52(sp)
   25930:	df000c15 	stw	fp,48(sp)
   25934:	df000c04 	addi	fp,sp,48
   25938:	e13ffc15 	stw	r4,-16(fp)
   2593c:	e17ffd15 	stw	r5,-12(fp)
   25940:	e1bffe15 	stw	r6,-8(fp)
   25944:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   25948:	e0bffe17 	ldw	r2,-8(fp)
   2594c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   25950:	e0bfff17 	ldw	r2,-4(fp)
   25954:	1090000c 	andi	r2,r2,16384
   25958:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2595c:	00003c06 	br	25a50 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   25960:	e0bffc17 	ldw	r2,-16(fp)
   25964:	10800517 	ldw	r2,20(r2)
   25968:	10800044 	addi	r2,r2,1
   2596c:	10800fcc 	andi	r2,r2,63
   25970:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   25974:	e0bffc17 	ldw	r2,-16(fp)
   25978:	10c00417 	ldw	r3,16(r2)
   2597c:	e0bff717 	ldw	r2,-36(fp)
   25980:	1880221e 	bne	r3,r2,25a0c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   25984:	e0bff517 	ldw	r2,-44(fp)
   25988:	10000526 	beq	r2,zero,259a0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2598c:	00258ec0 	call	258ec <alt_get_errno>
   25990:	1007883a 	mov	r3,r2
   25994:	008002c4 	movi	r2,11
   25998:	18800015 	stw	r2,0(r3)
        break;
   2599c:	00002e06 	br	25a58 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   259a0:	0005303a 	rdctl	r2,status
   259a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   259a8:	e0fff917 	ldw	r3,-28(fp)
   259ac:	00bfff84 	movi	r2,-2
   259b0:	1884703a 	and	r2,r3,r2
   259b4:	1001703a 	wrctl	status,r2
  
  return context;
   259b8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   259bc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   259c0:	e0bffc17 	ldw	r2,-16(fp)
   259c4:	10800117 	ldw	r2,4(r2)
   259c8:	10c11014 	ori	r3,r2,1088
   259cc:	e0bffc17 	ldw	r2,-16(fp)
   259d0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   259d4:	e0bffc17 	ldw	r2,-16(fp)
   259d8:	10800017 	ldw	r2,0(r2)
   259dc:	10800304 	addi	r2,r2,12
   259e0:	e0fffc17 	ldw	r3,-16(fp)
   259e4:	18c00117 	ldw	r3,4(r3)
   259e8:	10c00035 	stwio	r3,0(r2)
   259ec:	e0bff817 	ldw	r2,-32(fp)
   259f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   259f4:	e0bff617 	ldw	r2,-40(fp)
   259f8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   259fc:	e0bffc17 	ldw	r2,-16(fp)
   25a00:	10c00417 	ldw	r3,16(r2)
   25a04:	e0bff717 	ldw	r2,-36(fp)
   25a08:	18bffc26 	beq	r3,r2,259fc <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
   25a0c:	e0bff417 	ldw	r2,-48(fp)
   25a10:	10bfffc4 	addi	r2,r2,-1
   25a14:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   25a18:	e0bffc17 	ldw	r2,-16(fp)
   25a1c:	10c00517 	ldw	r3,20(r2)
   25a20:	e0bffd17 	ldw	r2,-12(fp)
   25a24:	11000044 	addi	r4,r2,1
   25a28:	e13ffd15 	stw	r4,-12(fp)
   25a2c:	10800003 	ldbu	r2,0(r2)
   25a30:	1009883a 	mov	r4,r2
   25a34:	e0bffc17 	ldw	r2,-16(fp)
   25a38:	10c5883a 	add	r2,r2,r3
   25a3c:	10801704 	addi	r2,r2,92
   25a40:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   25a44:	e0bffc17 	ldw	r2,-16(fp)
   25a48:	e0fff717 	ldw	r3,-36(fp)
   25a4c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   25a50:	e0bff417 	ldw	r2,-48(fp)
   25a54:	103fc21e 	bne	r2,zero,25960 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25a58:	0005303a 	rdctl	r2,status
   25a5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25a60:	e0fffb17 	ldw	r3,-20(fp)
   25a64:	00bfff84 	movi	r2,-2
   25a68:	1884703a 	and	r2,r3,r2
   25a6c:	1001703a 	wrctl	status,r2
  
  return context;
   25a70:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   25a74:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   25a78:	e0bffc17 	ldw	r2,-16(fp)
   25a7c:	10800117 	ldw	r2,4(r2)
   25a80:	10c11014 	ori	r3,r2,1088
   25a84:	e0bffc17 	ldw	r2,-16(fp)
   25a88:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   25a8c:	e0bffc17 	ldw	r2,-16(fp)
   25a90:	10800017 	ldw	r2,0(r2)
   25a94:	10800304 	addi	r2,r2,12
   25a98:	e0fffc17 	ldw	r3,-16(fp)
   25a9c:	18c00117 	ldw	r3,4(r3)
   25aa0:	10c00035 	stwio	r3,0(r2)
   25aa4:	e0bff817 	ldw	r2,-32(fp)
   25aa8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25aac:	e0bffa17 	ldw	r2,-24(fp)
   25ab0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   25ab4:	e0fffe17 	ldw	r3,-8(fp)
   25ab8:	e0bff417 	ldw	r2,-48(fp)
   25abc:	1885c83a 	sub	r2,r3,r2
}
   25ac0:	e037883a 	mov	sp,fp
   25ac4:	dfc00117 	ldw	ra,4(sp)
   25ac8:	df000017 	ldw	fp,0(sp)
   25acc:	dec00204 	addi	sp,sp,8
   25ad0:	f800283a 	ret

00025ad4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   25ad4:	defff504 	addi	sp,sp,-44
   25ad8:	df000a15 	stw	fp,40(sp)
   25adc:	df000a04 	addi	fp,sp,40
   25ae0:	e13ffc15 	stw	r4,-16(fp)
   25ae4:	e17ffd15 	stw	r5,-12(fp)
   25ae8:	e1bffe15 	stw	r6,-8(fp)
   25aec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   25af0:	e03ff615 	stw	zero,-40(fp)
   25af4:	d0a70017 	ldw	r2,-25600(gp)
  
  if (alt_ticks_per_second ())
   25af8:	10003c26 	beq	r2,zero,25bec <alt_alarm_start+0x118>
  {
    if (alarm)
   25afc:	e0bffc17 	ldw	r2,-16(fp)
   25b00:	10003826 	beq	r2,zero,25be4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   25b04:	e0bffc17 	ldw	r2,-16(fp)
   25b08:	e0fffe17 	ldw	r3,-8(fp)
   25b0c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   25b10:	e0bffc17 	ldw	r2,-16(fp)
   25b14:	e0ffff17 	ldw	r3,-4(fp)
   25b18:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25b1c:	0005303a 	rdctl	r2,status
   25b20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25b24:	e0fff917 	ldw	r3,-28(fp)
   25b28:	00bfff84 	movi	r2,-2
   25b2c:	1884703a 	and	r2,r3,r2
   25b30:	1001703a 	wrctl	status,r2
  
  return context;
   25b34:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   25b38:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   25b3c:	d0a70117 	ldw	r2,-25596(gp)
      
      current_nticks = alt_nticks();
   25b40:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   25b44:	e0fffd17 	ldw	r3,-12(fp)
   25b48:	e0bff617 	ldw	r2,-40(fp)
   25b4c:	1885883a 	add	r2,r3,r2
   25b50:	10c00044 	addi	r3,r2,1
   25b54:	e0bffc17 	ldw	r2,-16(fp)
   25b58:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   25b5c:	e0bffc17 	ldw	r2,-16(fp)
   25b60:	10c00217 	ldw	r3,8(r2)
   25b64:	e0bff617 	ldw	r2,-40(fp)
   25b68:	1880042e 	bgeu	r3,r2,25b7c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   25b6c:	e0bffc17 	ldw	r2,-16(fp)
   25b70:	00c00044 	movi	r3,1
   25b74:	10c00405 	stb	r3,16(r2)
   25b78:	00000206 	br	25b84 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   25b7c:	e0bffc17 	ldw	r2,-16(fp)
   25b80:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   25b84:	e0bffc17 	ldw	r2,-16(fp)
   25b88:	d0e01004 	addi	r3,gp,-32704
   25b8c:	e0fffa15 	stw	r3,-24(fp)
   25b90:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25b94:	e0bffb17 	ldw	r2,-20(fp)
   25b98:	e0fffa17 	ldw	r3,-24(fp)
   25b9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25ba0:	e0bffa17 	ldw	r2,-24(fp)
   25ba4:	10c00017 	ldw	r3,0(r2)
   25ba8:	e0bffb17 	ldw	r2,-20(fp)
   25bac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25bb0:	e0bffa17 	ldw	r2,-24(fp)
   25bb4:	10800017 	ldw	r2,0(r2)
   25bb8:	e0fffb17 	ldw	r3,-20(fp)
   25bbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25bc0:	e0bffa17 	ldw	r2,-24(fp)
   25bc4:	e0fffb17 	ldw	r3,-20(fp)
   25bc8:	10c00015 	stw	r3,0(r2)
   25bcc:	e0bff817 	ldw	r2,-32(fp)
   25bd0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25bd4:	e0bff717 	ldw	r2,-36(fp)
   25bd8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   25bdc:	0005883a 	mov	r2,zero
   25be0:	00000306 	br	25bf0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   25be4:	00bffa84 	movi	r2,-22
   25be8:	00000106 	br	25bf0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   25bec:	00bfde84 	movi	r2,-134
  }
}
   25bf0:	e037883a 	mov	sp,fp
   25bf4:	df000017 	ldw	fp,0(sp)
   25bf8:	dec00104 	addi	sp,sp,4
   25bfc:	f800283a 	ret

00025c00 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25c00:	defffe04 	addi	sp,sp,-8
   25c04:	df000115 	stw	fp,4(sp)
   25c08:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   25c0c:	e03fff15 	stw	zero,-4(fp)
   25c10:	00000506 	br	25c28 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   25c14:	e0bfff17 	ldw	r2,-4(fp)
   25c18:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   25c1c:	e0bfff17 	ldw	r2,-4(fp)
   25c20:	10800804 	addi	r2,r2,32
   25c24:	e0bfff15 	stw	r2,-4(fp)
   25c28:	e0bfff17 	ldw	r2,-4(fp)
   25c2c:	10820030 	cmpltui	r2,r2,2048
   25c30:	103ff81e 	bne	r2,zero,25c14 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25c34:	0001883a 	nop
   25c38:	e037883a 	mov	sp,fp
   25c3c:	df000017 	ldw	fp,0(sp)
   25c40:	dec00104 	addi	sp,sp,4
   25c44:	f800283a 	ret

00025c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25c48:	defffe04 	addi	sp,sp,-8
   25c4c:	dfc00115 	stw	ra,4(sp)
   25c50:	df000015 	stw	fp,0(sp)
   25c54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25c58:	d0a00917 	ldw	r2,-32732(gp)
   25c5c:	10000326 	beq	r2,zero,25c6c <alt_get_errno+0x24>
   25c60:	d0a00917 	ldw	r2,-32732(gp)
   25c64:	103ee83a 	callr	r2
   25c68:	00000106 	br	25c70 <alt_get_errno+0x28>
   25c6c:	d0a6fb04 	addi	r2,gp,-25620
}
   25c70:	e037883a 	mov	sp,fp
   25c74:	dfc00117 	ldw	ra,4(sp)
   25c78:	df000017 	ldw	fp,0(sp)
   25c7c:	dec00204 	addi	sp,sp,8
   25c80:	f800283a 	ret

00025c84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25c84:	defffa04 	addi	sp,sp,-24
   25c88:	dfc00515 	stw	ra,20(sp)
   25c8c:	df000415 	stw	fp,16(sp)
   25c90:	df000404 	addi	fp,sp,16
   25c94:	e13ffe15 	stw	r4,-8(fp)
   25c98:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   25c9c:	e0bffe17 	ldw	r2,-8(fp)
   25ca0:	10000326 	beq	r2,zero,25cb0 <alt_dev_llist_insert+0x2c>
   25ca4:	e0bffe17 	ldw	r2,-8(fp)
   25ca8:	10800217 	ldw	r2,8(r2)
   25cac:	1000061e 	bne	r2,zero,25cc8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   25cb0:	0025c480 	call	25c48 <alt_get_errno>
   25cb4:	1007883a 	mov	r3,r2
   25cb8:	00800584 	movi	r2,22
   25cbc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   25cc0:	00bffa84 	movi	r2,-22
   25cc4:	00001306 	br	25d14 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25cc8:	e0bffe17 	ldw	r2,-8(fp)
   25ccc:	e0ffff17 	ldw	r3,-4(fp)
   25cd0:	e0fffc15 	stw	r3,-16(fp)
   25cd4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   25cd8:	e0bffd17 	ldw	r2,-12(fp)
   25cdc:	e0fffc17 	ldw	r3,-16(fp)
   25ce0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25ce4:	e0bffc17 	ldw	r2,-16(fp)
   25ce8:	10c00017 	ldw	r3,0(r2)
   25cec:	e0bffd17 	ldw	r2,-12(fp)
   25cf0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25cf4:	e0bffc17 	ldw	r2,-16(fp)
   25cf8:	10800017 	ldw	r2,0(r2)
   25cfc:	e0fffd17 	ldw	r3,-12(fp)
   25d00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25d04:	e0bffc17 	ldw	r2,-16(fp)
   25d08:	e0fffd17 	ldw	r3,-12(fp)
   25d0c:	10c00015 	stw	r3,0(r2)

  return 0;  
   25d10:	0005883a 	mov	r2,zero
}
   25d14:	e037883a 	mov	sp,fp
   25d18:	dfc00117 	ldw	ra,4(sp)
   25d1c:	df000017 	ldw	fp,0(sp)
   25d20:	dec00204 	addi	sp,sp,8
   25d24:	f800283a 	ret

00025d28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   25d28:	defffd04 	addi	sp,sp,-12
   25d2c:	dfc00215 	stw	ra,8(sp)
   25d30:	df000115 	stw	fp,4(sp)
   25d34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25d38:	008000b4 	movhi	r2,2
   25d3c:	109b4404 	addi	r2,r2,27920
   25d40:	e0bfff15 	stw	r2,-4(fp)
   25d44:	00000606 	br	25d60 <_do_ctors+0x38>
        (*ctor) (); 
   25d48:	e0bfff17 	ldw	r2,-4(fp)
   25d4c:	10800017 	ldw	r2,0(r2)
   25d50:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25d54:	e0bfff17 	ldw	r2,-4(fp)
   25d58:	10bfff04 	addi	r2,r2,-4
   25d5c:	e0bfff15 	stw	r2,-4(fp)
   25d60:	e0ffff17 	ldw	r3,-4(fp)
   25d64:	008000b4 	movhi	r2,2
   25d68:	109b4504 	addi	r2,r2,27924
   25d6c:	18bff62e 	bgeu	r3,r2,25d48 <_do_ctors+0x20>
        (*ctor) (); 
}
   25d70:	0001883a 	nop
   25d74:	e037883a 	mov	sp,fp
   25d78:	dfc00117 	ldw	ra,4(sp)
   25d7c:	df000017 	ldw	fp,0(sp)
   25d80:	dec00204 	addi	sp,sp,8
   25d84:	f800283a 	ret

00025d88 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   25d88:	defffd04 	addi	sp,sp,-12
   25d8c:	dfc00215 	stw	ra,8(sp)
   25d90:	df000115 	stw	fp,4(sp)
   25d94:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25d98:	008000b4 	movhi	r2,2
   25d9c:	109b4404 	addi	r2,r2,27920
   25da0:	e0bfff15 	stw	r2,-4(fp)
   25da4:	00000606 	br	25dc0 <_do_dtors+0x38>
        (*dtor) (); 
   25da8:	e0bfff17 	ldw	r2,-4(fp)
   25dac:	10800017 	ldw	r2,0(r2)
   25db0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25db4:	e0bfff17 	ldw	r2,-4(fp)
   25db8:	10bfff04 	addi	r2,r2,-4
   25dbc:	e0bfff15 	stw	r2,-4(fp)
   25dc0:	e0ffff17 	ldw	r3,-4(fp)
   25dc4:	008000b4 	movhi	r2,2
   25dc8:	109b4504 	addi	r2,r2,27924
   25dcc:	18bff62e 	bgeu	r3,r2,25da8 <_do_dtors+0x20>
        (*dtor) (); 
}
   25dd0:	0001883a 	nop
   25dd4:	e037883a 	mov	sp,fp
   25dd8:	dfc00117 	ldw	ra,4(sp)
   25ddc:	df000017 	ldw	fp,0(sp)
   25de0:	dec00204 	addi	sp,sp,8
   25de4:	f800283a 	ret

00025de8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   25de8:	defffa04 	addi	sp,sp,-24
   25dec:	dfc00515 	stw	ra,20(sp)
   25df0:	df000415 	stw	fp,16(sp)
   25df4:	df000404 	addi	fp,sp,16
   25df8:	e13ffe15 	stw	r4,-8(fp)
   25dfc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   25e00:	e0bfff17 	ldw	r2,-4(fp)
   25e04:	10800017 	ldw	r2,0(r2)
   25e08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   25e0c:	e13ffe17 	ldw	r4,-8(fp)
   25e10:	00203980 	call	20398 <strlen>
   25e14:	10800044 	addi	r2,r2,1
   25e18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25e1c:	00000d06 	br	25e54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25e20:	e0bffc17 	ldw	r2,-16(fp)
   25e24:	10800217 	ldw	r2,8(r2)
   25e28:	e0fffd17 	ldw	r3,-12(fp)
   25e2c:	180d883a 	mov	r6,r3
   25e30:	e17ffe17 	ldw	r5,-8(fp)
   25e34:	1009883a 	mov	r4,r2
   25e38:	00269cc0 	call	269cc <memcmp>
   25e3c:	1000021e 	bne	r2,zero,25e48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25e40:	e0bffc17 	ldw	r2,-16(fp)
   25e44:	00000706 	br	25e64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25e48:	e0bffc17 	ldw	r2,-16(fp)
   25e4c:	10800017 	ldw	r2,0(r2)
   25e50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25e54:	e0fffc17 	ldw	r3,-16(fp)
   25e58:	e0bfff17 	ldw	r2,-4(fp)
   25e5c:	18bff01e 	bne	r3,r2,25e20 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   25e60:	0005883a 	mov	r2,zero
}
   25e64:	e037883a 	mov	sp,fp
   25e68:	dfc00117 	ldw	ra,4(sp)
   25e6c:	df000017 	ldw	fp,0(sp)
   25e70:	dec00204 	addi	sp,sp,8
   25e74:	f800283a 	ret

00025e78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25e78:	defffe04 	addi	sp,sp,-8
   25e7c:	dfc00115 	stw	ra,4(sp)
   25e80:	df000015 	stw	fp,0(sp)
   25e84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   25e88:	01440004 	movi	r5,4096
   25e8c:	0009883a 	mov	r4,zero
   25e90:	00268540 	call	26854 <alt_icache_flush>
#endif
}
   25e94:	0001883a 	nop
   25e98:	e037883a 	mov	sp,fp
   25e9c:	dfc00117 	ldw	ra,4(sp)
   25ea0:	df000017 	ldw	fp,0(sp)
   25ea4:	dec00204 	addi	sp,sp,8
   25ea8:	f800283a 	ret

00025eac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25eac:	defff904 	addi	sp,sp,-28
   25eb0:	dfc00615 	stw	ra,24(sp)
   25eb4:	df000515 	stw	fp,20(sp)
   25eb8:	df000504 	addi	fp,sp,20
   25ebc:	e13ffc15 	stw	r4,-16(fp)
   25ec0:	e17ffd15 	stw	r5,-12(fp)
   25ec4:	e1bffe15 	stw	r6,-8(fp)
   25ec8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   25ecc:	e0800217 	ldw	r2,8(fp)
   25ed0:	d8800015 	stw	r2,0(sp)
   25ed4:	e1ffff17 	ldw	r7,-4(fp)
   25ed8:	e1bffe17 	ldw	r6,-8(fp)
   25edc:	e17ffd17 	ldw	r5,-12(fp)
   25ee0:	e13ffc17 	ldw	r4,-16(fp)
   25ee4:	002605c0 	call	2605c <alt_iic_isr_register>
}  
   25ee8:	e037883a 	mov	sp,fp
   25eec:	dfc00117 	ldw	ra,4(sp)
   25ef0:	df000017 	ldw	fp,0(sp)
   25ef4:	dec00204 	addi	sp,sp,8
   25ef8:	f800283a 	ret

00025efc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   25efc:	defff904 	addi	sp,sp,-28
   25f00:	df000615 	stw	fp,24(sp)
   25f04:	df000604 	addi	fp,sp,24
   25f08:	e13ffe15 	stw	r4,-8(fp)
   25f0c:	e17fff15 	stw	r5,-4(fp)
   25f10:	e0bfff17 	ldw	r2,-4(fp)
   25f14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25f18:	0005303a 	rdctl	r2,status
   25f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25f20:	e0fffb17 	ldw	r3,-20(fp)
   25f24:	00bfff84 	movi	r2,-2
   25f28:	1884703a 	and	r2,r3,r2
   25f2c:	1001703a 	wrctl	status,r2
  
  return context;
   25f30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25f34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   25f38:	00c00044 	movi	r3,1
   25f3c:	e0bffa17 	ldw	r2,-24(fp)
   25f40:	1884983a 	sll	r2,r3,r2
   25f44:	1007883a 	mov	r3,r2
   25f48:	d0a6ff17 	ldw	r2,-25604(gp)
   25f4c:	1884b03a 	or	r2,r3,r2
   25f50:	d0a6ff15 	stw	r2,-25604(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25f54:	d0a6ff17 	ldw	r2,-25604(gp)
   25f58:	100170fa 	wrctl	ienable,r2
   25f5c:	e0bffc17 	ldw	r2,-16(fp)
   25f60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25f64:	e0bffd17 	ldw	r2,-12(fp)
   25f68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25f6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   25f70:	0001883a 	nop
}
   25f74:	e037883a 	mov	sp,fp
   25f78:	df000017 	ldw	fp,0(sp)
   25f7c:	dec00104 	addi	sp,sp,4
   25f80:	f800283a 	ret

00025f84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   25f84:	defff904 	addi	sp,sp,-28
   25f88:	df000615 	stw	fp,24(sp)
   25f8c:	df000604 	addi	fp,sp,24
   25f90:	e13ffe15 	stw	r4,-8(fp)
   25f94:	e17fff15 	stw	r5,-4(fp)
   25f98:	e0bfff17 	ldw	r2,-4(fp)
   25f9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25fa0:	0005303a 	rdctl	r2,status
   25fa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25fa8:	e0fffb17 	ldw	r3,-20(fp)
   25fac:	00bfff84 	movi	r2,-2
   25fb0:	1884703a 	and	r2,r3,r2
   25fb4:	1001703a 	wrctl	status,r2
  
  return context;
   25fb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25fbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   25fc0:	00c00044 	movi	r3,1
   25fc4:	e0bffa17 	ldw	r2,-24(fp)
   25fc8:	1884983a 	sll	r2,r3,r2
   25fcc:	0084303a 	nor	r2,zero,r2
   25fd0:	1007883a 	mov	r3,r2
   25fd4:	d0a6ff17 	ldw	r2,-25604(gp)
   25fd8:	1884703a 	and	r2,r3,r2
   25fdc:	d0a6ff15 	stw	r2,-25604(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25fe0:	d0a6ff17 	ldw	r2,-25604(gp)
   25fe4:	100170fa 	wrctl	ienable,r2
   25fe8:	e0bffc17 	ldw	r2,-16(fp)
   25fec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25ff0:	e0bffd17 	ldw	r2,-12(fp)
   25ff4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25ff8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   25ffc:	0001883a 	nop
}
   26000:	e037883a 	mov	sp,fp
   26004:	df000017 	ldw	fp,0(sp)
   26008:	dec00104 	addi	sp,sp,4
   2600c:	f800283a 	ret

00026010 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   26010:	defffc04 	addi	sp,sp,-16
   26014:	df000315 	stw	fp,12(sp)
   26018:	df000304 	addi	fp,sp,12
   2601c:	e13ffe15 	stw	r4,-8(fp)
   26020:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   26024:	000530fa 	rdctl	r2,ienable
   26028:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2602c:	00c00044 	movi	r3,1
   26030:	e0bfff17 	ldw	r2,-4(fp)
   26034:	1884983a 	sll	r2,r3,r2
   26038:	1007883a 	mov	r3,r2
   2603c:	e0bffd17 	ldw	r2,-12(fp)
   26040:	1884703a 	and	r2,r3,r2
   26044:	1004c03a 	cmpne	r2,r2,zero
   26048:	10803fcc 	andi	r2,r2,255
}
   2604c:	e037883a 	mov	sp,fp
   26050:	df000017 	ldw	fp,0(sp)
   26054:	dec00104 	addi	sp,sp,4
   26058:	f800283a 	ret

0002605c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2605c:	defff504 	addi	sp,sp,-44
   26060:	dfc00a15 	stw	ra,40(sp)
   26064:	df000915 	stw	fp,36(sp)
   26068:	df000904 	addi	fp,sp,36
   2606c:	e13ffc15 	stw	r4,-16(fp)
   26070:	e17ffd15 	stw	r5,-12(fp)
   26074:	e1bffe15 	stw	r6,-8(fp)
   26078:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2607c:	00bffa84 	movi	r2,-22
   26080:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   26084:	e0bffd17 	ldw	r2,-12(fp)
   26088:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2608c:	e0bff817 	ldw	r2,-32(fp)
   26090:	10800808 	cmpgei	r2,r2,32
   26094:	1000271e 	bne	r2,zero,26134 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26098:	0005303a 	rdctl	r2,status
   2609c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   260a0:	e0fffb17 	ldw	r3,-20(fp)
   260a4:	00bfff84 	movi	r2,-2
   260a8:	1884703a 	and	r2,r3,r2
   260ac:	1001703a 	wrctl	status,r2
  
  return context;
   260b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   260b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   260b8:	008000f4 	movhi	r2,3
   260bc:	10a94804 	addi	r2,r2,-23264
   260c0:	e0fff817 	ldw	r3,-32(fp)
   260c4:	180690fa 	slli	r3,r3,3
   260c8:	10c5883a 	add	r2,r2,r3
   260cc:	e0fffe17 	ldw	r3,-8(fp)
   260d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   260d4:	008000f4 	movhi	r2,3
   260d8:	10a94804 	addi	r2,r2,-23264
   260dc:	e0fff817 	ldw	r3,-32(fp)
   260e0:	180690fa 	slli	r3,r3,3
   260e4:	10c5883a 	add	r2,r2,r3
   260e8:	10800104 	addi	r2,r2,4
   260ec:	e0ffff17 	ldw	r3,-4(fp)
   260f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   260f4:	e0bffe17 	ldw	r2,-8(fp)
   260f8:	10000526 	beq	r2,zero,26110 <alt_iic_isr_register+0xb4>
   260fc:	e0bff817 	ldw	r2,-32(fp)
   26100:	100b883a 	mov	r5,r2
   26104:	e13ffc17 	ldw	r4,-16(fp)
   26108:	0025efc0 	call	25efc <alt_ic_irq_enable>
   2610c:	00000406 	br	26120 <alt_iic_isr_register+0xc4>
   26110:	e0bff817 	ldw	r2,-32(fp)
   26114:	100b883a 	mov	r5,r2
   26118:	e13ffc17 	ldw	r4,-16(fp)
   2611c:	0025f840 	call	25f84 <alt_ic_irq_disable>
   26120:	e0bff715 	stw	r2,-36(fp)
   26124:	e0bffa17 	ldw	r2,-24(fp)
   26128:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2612c:	e0bff917 	ldw	r2,-28(fp)
   26130:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   26134:	e0bff717 	ldw	r2,-36(fp)
}
   26138:	e037883a 	mov	sp,fp
   2613c:	dfc00117 	ldw	ra,4(sp)
   26140:	df000017 	ldw	fp,0(sp)
   26144:	dec00204 	addi	sp,sp,8
   26148:	f800283a 	ret

0002614c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2614c:	defff904 	addi	sp,sp,-28
   26150:	dfc00615 	stw	ra,24(sp)
   26154:	df000515 	stw	fp,20(sp)
   26158:	df000504 	addi	fp,sp,20
   2615c:	e13ffc15 	stw	r4,-16(fp)
   26160:	e17ffd15 	stw	r5,-12(fp)
   26164:	e1bffe15 	stw	r6,-8(fp)
   26168:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2616c:	e1bfff17 	ldw	r6,-4(fp)
   26170:	e17ffe17 	ldw	r5,-8(fp)
   26174:	e13ffd17 	ldw	r4,-12(fp)
   26178:	002638c0 	call	2638c <open>
   2617c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   26180:	e0bffb17 	ldw	r2,-20(fp)
   26184:	10001c16 	blt	r2,zero,261f8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   26188:	008000b4 	movhi	r2,2
   2618c:	109d7c04 	addi	r2,r2,30192
   26190:	e0fffb17 	ldw	r3,-20(fp)
   26194:	18c00324 	muli	r3,r3,12
   26198:	10c5883a 	add	r2,r2,r3
   2619c:	10c00017 	ldw	r3,0(r2)
   261a0:	e0bffc17 	ldw	r2,-16(fp)
   261a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   261a8:	008000b4 	movhi	r2,2
   261ac:	109d7c04 	addi	r2,r2,30192
   261b0:	e0fffb17 	ldw	r3,-20(fp)
   261b4:	18c00324 	muli	r3,r3,12
   261b8:	10c5883a 	add	r2,r2,r3
   261bc:	10800104 	addi	r2,r2,4
   261c0:	10c00017 	ldw	r3,0(r2)
   261c4:	e0bffc17 	ldw	r2,-16(fp)
   261c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   261cc:	008000b4 	movhi	r2,2
   261d0:	109d7c04 	addi	r2,r2,30192
   261d4:	e0fffb17 	ldw	r3,-20(fp)
   261d8:	18c00324 	muli	r3,r3,12
   261dc:	10c5883a 	add	r2,r2,r3
   261e0:	10800204 	addi	r2,r2,8
   261e4:	10c00017 	ldw	r3,0(r2)
   261e8:	e0bffc17 	ldw	r2,-16(fp)
   261ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   261f0:	e13ffb17 	ldw	r4,-20(fp)
   261f4:	00237880 	call	23788 <alt_release_fd>
  }
} 
   261f8:	0001883a 	nop
   261fc:	e037883a 	mov	sp,fp
   26200:	dfc00117 	ldw	ra,4(sp)
   26204:	df000017 	ldw	fp,0(sp)
   26208:	dec00204 	addi	sp,sp,8
   2620c:	f800283a 	ret

00026210 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   26210:	defffb04 	addi	sp,sp,-20
   26214:	dfc00415 	stw	ra,16(sp)
   26218:	df000315 	stw	fp,12(sp)
   2621c:	df000304 	addi	fp,sp,12
   26220:	e13ffd15 	stw	r4,-12(fp)
   26224:	e17ffe15 	stw	r5,-8(fp)
   26228:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2622c:	01c07fc4 	movi	r7,511
   26230:	01800044 	movi	r6,1
   26234:	e17ffd17 	ldw	r5,-12(fp)
   26238:	010000b4 	movhi	r4,2
   2623c:	211d7f04 	addi	r4,r4,30204
   26240:	002614c0 	call	2614c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   26244:	01c07fc4 	movi	r7,511
   26248:	000d883a 	mov	r6,zero
   2624c:	e17ffe17 	ldw	r5,-8(fp)
   26250:	010000b4 	movhi	r4,2
   26254:	211d7c04 	addi	r4,r4,30192
   26258:	002614c0 	call	2614c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2625c:	01c07fc4 	movi	r7,511
   26260:	01800044 	movi	r6,1
   26264:	e17fff17 	ldw	r5,-4(fp)
   26268:	010000b4 	movhi	r4,2
   2626c:	211d8204 	addi	r4,r4,30216
   26270:	002614c0 	call	2614c <alt_open_fd>
}  
   26274:	0001883a 	nop
   26278:	e037883a 	mov	sp,fp
   2627c:	dfc00117 	ldw	ra,4(sp)
   26280:	df000017 	ldw	fp,0(sp)
   26284:	dec00204 	addi	sp,sp,8
   26288:	f800283a 	ret

0002628c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2628c:	defffe04 	addi	sp,sp,-8
   26290:	dfc00115 	stw	ra,4(sp)
   26294:	df000015 	stw	fp,0(sp)
   26298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2629c:	d0a00917 	ldw	r2,-32732(gp)
   262a0:	10000326 	beq	r2,zero,262b0 <alt_get_errno+0x24>
   262a4:	d0a00917 	ldw	r2,-32732(gp)
   262a8:	103ee83a 	callr	r2
   262ac:	00000106 	br	262b4 <alt_get_errno+0x28>
   262b0:	d0a6fb04 	addi	r2,gp,-25620
}
   262b4:	e037883a 	mov	sp,fp
   262b8:	dfc00117 	ldw	ra,4(sp)
   262bc:	df000017 	ldw	fp,0(sp)
   262c0:	dec00204 	addi	sp,sp,8
   262c4:	f800283a 	ret

000262c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   262c8:	defffd04 	addi	sp,sp,-12
   262cc:	df000215 	stw	fp,8(sp)
   262d0:	df000204 	addi	fp,sp,8
   262d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   262d8:	e0bfff17 	ldw	r2,-4(fp)
   262dc:	10800217 	ldw	r2,8(r2)
   262e0:	10d00034 	orhi	r3,r2,16384
   262e4:	e0bfff17 	ldw	r2,-4(fp)
   262e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   262ec:	e03ffe15 	stw	zero,-8(fp)
   262f0:	00001d06 	br	26368 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   262f4:	008000b4 	movhi	r2,2
   262f8:	109d7c04 	addi	r2,r2,30192
   262fc:	e0fffe17 	ldw	r3,-8(fp)
   26300:	18c00324 	muli	r3,r3,12
   26304:	10c5883a 	add	r2,r2,r3
   26308:	10c00017 	ldw	r3,0(r2)
   2630c:	e0bfff17 	ldw	r2,-4(fp)
   26310:	10800017 	ldw	r2,0(r2)
   26314:	1880111e 	bne	r3,r2,2635c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26318:	008000b4 	movhi	r2,2
   2631c:	109d7c04 	addi	r2,r2,30192
   26320:	e0fffe17 	ldw	r3,-8(fp)
   26324:	18c00324 	muli	r3,r3,12
   26328:	10c5883a 	add	r2,r2,r3
   2632c:	10800204 	addi	r2,r2,8
   26330:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   26334:	1000090e 	bge	r2,zero,2635c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   26338:	e0bffe17 	ldw	r2,-8(fp)
   2633c:	10c00324 	muli	r3,r2,12
   26340:	008000b4 	movhi	r2,2
   26344:	109d7c04 	addi	r2,r2,30192
   26348:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2634c:	e0bfff17 	ldw	r2,-4(fp)
   26350:	18800226 	beq	r3,r2,2635c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   26354:	00bffcc4 	movi	r2,-13
   26358:	00000806 	br	2637c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2635c:	e0bffe17 	ldw	r2,-8(fp)
   26360:	10800044 	addi	r2,r2,1
   26364:	e0bffe15 	stw	r2,-8(fp)
   26368:	d0a00817 	ldw	r2,-32736(gp)
   2636c:	1007883a 	mov	r3,r2
   26370:	e0bffe17 	ldw	r2,-8(fp)
   26374:	18bfdf2e 	bgeu	r3,r2,262f4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   26378:	0005883a 	mov	r2,zero
}
   2637c:	e037883a 	mov	sp,fp
   26380:	df000017 	ldw	fp,0(sp)
   26384:	dec00104 	addi	sp,sp,4
   26388:	f800283a 	ret

0002638c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2638c:	defff604 	addi	sp,sp,-40
   26390:	dfc00915 	stw	ra,36(sp)
   26394:	df000815 	stw	fp,32(sp)
   26398:	df000804 	addi	fp,sp,32
   2639c:	e13ffd15 	stw	r4,-12(fp)
   263a0:	e17ffe15 	stw	r5,-8(fp)
   263a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   263a8:	00bfffc4 	movi	r2,-1
   263ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   263b0:	00bffb44 	movi	r2,-19
   263b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   263b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   263bc:	d1600604 	addi	r5,gp,-32744
   263c0:	e13ffd17 	ldw	r4,-12(fp)
   263c4:	0025de80 	call	25de8 <alt_find_dev>
   263c8:	e0bff815 	stw	r2,-32(fp)
   263cc:	e0bff817 	ldw	r2,-32(fp)
   263d0:	1000051e 	bne	r2,zero,263e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   263d4:	e13ffd17 	ldw	r4,-12(fp)
   263d8:	00266a80 	call	266a8 <alt_find_file>
   263dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   263e0:	00800044 	movi	r2,1
   263e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   263e8:	e0bff817 	ldw	r2,-32(fp)
   263ec:	10002926 	beq	r2,zero,26494 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   263f0:	e13ff817 	ldw	r4,-32(fp)
   263f4:	00267b00 	call	267b0 <alt_get_fd>
   263f8:	e0bff915 	stw	r2,-28(fp)
   263fc:	e0bff917 	ldw	r2,-28(fp)
   26400:	1000030e 	bge	r2,zero,26410 <open+0x84>
    {
      status = index;
   26404:	e0bff917 	ldw	r2,-28(fp)
   26408:	e0bffa15 	stw	r2,-24(fp)
   2640c:	00002306 	br	2649c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   26410:	e0bff917 	ldw	r2,-28(fp)
   26414:	10c00324 	muli	r3,r2,12
   26418:	008000b4 	movhi	r2,2
   2641c:	109d7c04 	addi	r2,r2,30192
   26420:	1885883a 	add	r2,r3,r2
   26424:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   26428:	e0fffe17 	ldw	r3,-8(fp)
   2642c:	00900034 	movhi	r2,16384
   26430:	10bfffc4 	addi	r2,r2,-1
   26434:	1886703a 	and	r3,r3,r2
   26438:	e0bffc17 	ldw	r2,-16(fp)
   2643c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   26440:	e0bffb17 	ldw	r2,-20(fp)
   26444:	1000051e 	bne	r2,zero,2645c <open+0xd0>
   26448:	e13ffc17 	ldw	r4,-16(fp)
   2644c:	00262c80 	call	262c8 <alt_file_locked>
   26450:	e0bffa15 	stw	r2,-24(fp)
   26454:	e0bffa17 	ldw	r2,-24(fp)
   26458:	10001016 	blt	r2,zero,2649c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2645c:	e0bff817 	ldw	r2,-32(fp)
   26460:	10800317 	ldw	r2,12(r2)
   26464:	10000826 	beq	r2,zero,26488 <open+0xfc>
   26468:	e0bff817 	ldw	r2,-32(fp)
   2646c:	10800317 	ldw	r2,12(r2)
   26470:	e1ffff17 	ldw	r7,-4(fp)
   26474:	e1bffe17 	ldw	r6,-8(fp)
   26478:	e17ffd17 	ldw	r5,-12(fp)
   2647c:	e13ffc17 	ldw	r4,-16(fp)
   26480:	103ee83a 	callr	r2
   26484:	00000106 	br	2648c <open+0x100>
   26488:	0005883a 	mov	r2,zero
   2648c:	e0bffa15 	stw	r2,-24(fp)
   26490:	00000206 	br	2649c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   26494:	00bffb44 	movi	r2,-19
   26498:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2649c:	e0bffa17 	ldw	r2,-24(fp)
   264a0:	1000090e 	bge	r2,zero,264c8 <open+0x13c>
  {
    alt_release_fd (index);  
   264a4:	e13ff917 	ldw	r4,-28(fp)
   264a8:	00237880 	call	23788 <alt_release_fd>
    ALT_ERRNO = -status;
   264ac:	002628c0 	call	2628c <alt_get_errno>
   264b0:	1007883a 	mov	r3,r2
   264b4:	e0bffa17 	ldw	r2,-24(fp)
   264b8:	0085c83a 	sub	r2,zero,r2
   264bc:	18800015 	stw	r2,0(r3)
    return -1;
   264c0:	00bfffc4 	movi	r2,-1
   264c4:	00000106 	br	264cc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   264c8:	e0bff917 	ldw	r2,-28(fp)
}
   264cc:	e037883a 	mov	sp,fp
   264d0:	dfc00117 	ldw	ra,4(sp)
   264d4:	df000017 	ldw	fp,0(sp)
   264d8:	dec00204 	addi	sp,sp,8
   264dc:	f800283a 	ret

000264e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   264e0:	defffa04 	addi	sp,sp,-24
   264e4:	df000515 	stw	fp,20(sp)
   264e8:	df000504 	addi	fp,sp,20
   264ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   264f0:	0005303a 	rdctl	r2,status
   264f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   264f8:	e0fffc17 	ldw	r3,-16(fp)
   264fc:	00bfff84 	movi	r2,-2
   26500:	1884703a 	and	r2,r3,r2
   26504:	1001703a 	wrctl	status,r2
  
  return context;
   26508:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2650c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   26510:	e0bfff17 	ldw	r2,-4(fp)
   26514:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   26518:	e0bffd17 	ldw	r2,-12(fp)
   2651c:	10800017 	ldw	r2,0(r2)
   26520:	e0fffd17 	ldw	r3,-12(fp)
   26524:	18c00117 	ldw	r3,4(r3)
   26528:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2652c:	e0bffd17 	ldw	r2,-12(fp)
   26530:	10800117 	ldw	r2,4(r2)
   26534:	e0fffd17 	ldw	r3,-12(fp)
   26538:	18c00017 	ldw	r3,0(r3)
   2653c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   26540:	e0bffd17 	ldw	r2,-12(fp)
   26544:	e0fffd17 	ldw	r3,-12(fp)
   26548:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2654c:	e0bffd17 	ldw	r2,-12(fp)
   26550:	e0fffd17 	ldw	r3,-12(fp)
   26554:	10c00015 	stw	r3,0(r2)
   26558:	e0bffb17 	ldw	r2,-20(fp)
   2655c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26560:	e0bffe17 	ldw	r2,-8(fp)
   26564:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   26568:	0001883a 	nop
   2656c:	e037883a 	mov	sp,fp
   26570:	df000017 	ldw	fp,0(sp)
   26574:	dec00104 	addi	sp,sp,4
   26578:	f800283a 	ret

0002657c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2657c:	defffb04 	addi	sp,sp,-20
   26580:	dfc00415 	stw	ra,16(sp)
   26584:	df000315 	stw	fp,12(sp)
   26588:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2658c:	d0a01017 	ldw	r2,-32704(gp)
   26590:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   26594:	d0a70117 	ldw	r2,-25596(gp)
   26598:	10800044 	addi	r2,r2,1
   2659c:	d0a70115 	stw	r2,-25596(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   265a0:	00002e06 	br	2665c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   265a4:	e0bffd17 	ldw	r2,-12(fp)
   265a8:	10800017 	ldw	r2,0(r2)
   265ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   265b0:	e0bffd17 	ldw	r2,-12(fp)
   265b4:	10800403 	ldbu	r2,16(r2)
   265b8:	10803fcc 	andi	r2,r2,255
   265bc:	10000426 	beq	r2,zero,265d0 <alt_tick+0x54>
   265c0:	d0a70117 	ldw	r2,-25596(gp)
   265c4:	1000021e 	bne	r2,zero,265d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   265c8:	e0bffd17 	ldw	r2,-12(fp)
   265cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   265d0:	e0bffd17 	ldw	r2,-12(fp)
   265d4:	10800217 	ldw	r2,8(r2)
   265d8:	d0e70117 	ldw	r3,-25596(gp)
   265dc:	18801d36 	bltu	r3,r2,26654 <alt_tick+0xd8>
   265e0:	e0bffd17 	ldw	r2,-12(fp)
   265e4:	10800403 	ldbu	r2,16(r2)
   265e8:	10803fcc 	andi	r2,r2,255
   265ec:	1000191e 	bne	r2,zero,26654 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   265f0:	e0bffd17 	ldw	r2,-12(fp)
   265f4:	10800317 	ldw	r2,12(r2)
   265f8:	e0fffd17 	ldw	r3,-12(fp)
   265fc:	18c00517 	ldw	r3,20(r3)
   26600:	1809883a 	mov	r4,r3
   26604:	103ee83a 	callr	r2
   26608:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2660c:	e0bfff17 	ldw	r2,-4(fp)
   26610:	1000031e 	bne	r2,zero,26620 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   26614:	e13ffd17 	ldw	r4,-12(fp)
   26618:	00264e00 	call	264e0 <alt_alarm_stop>
   2661c:	00000d06 	br	26654 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   26620:	e0bffd17 	ldw	r2,-12(fp)
   26624:	10c00217 	ldw	r3,8(r2)
   26628:	e0bfff17 	ldw	r2,-4(fp)
   2662c:	1887883a 	add	r3,r3,r2
   26630:	e0bffd17 	ldw	r2,-12(fp)
   26634:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   26638:	e0bffd17 	ldw	r2,-12(fp)
   2663c:	10c00217 	ldw	r3,8(r2)
   26640:	d0a70117 	ldw	r2,-25596(gp)
   26644:	1880032e 	bgeu	r3,r2,26654 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   26648:	e0bffd17 	ldw	r2,-12(fp)
   2664c:	00c00044 	movi	r3,1
   26650:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   26654:	e0bffe17 	ldw	r2,-8(fp)
   26658:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2665c:	e0fffd17 	ldw	r3,-12(fp)
   26660:	d0a01004 	addi	r2,gp,-32704
   26664:	18bfcf1e 	bne	r3,r2,265a4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   26668:	0001883a 	nop
}
   2666c:	0001883a 	nop
   26670:	e037883a 	mov	sp,fp
   26674:	dfc00117 	ldw	ra,4(sp)
   26678:	df000017 	ldw	fp,0(sp)
   2667c:	dec00204 	addi	sp,sp,8
   26680:	f800283a 	ret

00026684 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   26684:	deffff04 	addi	sp,sp,-4
   26688:	df000015 	stw	fp,0(sp)
   2668c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   26690:	000170fa 	wrctl	ienable,zero
}
   26694:	0001883a 	nop
   26698:	e037883a 	mov	sp,fp
   2669c:	df000017 	ldw	fp,0(sp)
   266a0:	dec00104 	addi	sp,sp,4
   266a4:	f800283a 	ret

000266a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   266a8:	defffb04 	addi	sp,sp,-20
   266ac:	dfc00415 	stw	ra,16(sp)
   266b0:	df000315 	stw	fp,12(sp)
   266b4:	df000304 	addi	fp,sp,12
   266b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   266bc:	d0a00417 	ldw	r2,-32752(gp)
   266c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   266c4:	00003106 	br	2678c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   266c8:	e0bffd17 	ldw	r2,-12(fp)
   266cc:	10800217 	ldw	r2,8(r2)
   266d0:	1009883a 	mov	r4,r2
   266d4:	00203980 	call	20398 <strlen>
   266d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   266dc:	e0bffd17 	ldw	r2,-12(fp)
   266e0:	10c00217 	ldw	r3,8(r2)
   266e4:	e0bffe17 	ldw	r2,-8(fp)
   266e8:	10bfffc4 	addi	r2,r2,-1
   266ec:	1885883a 	add	r2,r3,r2
   266f0:	10800003 	ldbu	r2,0(r2)
   266f4:	10803fcc 	andi	r2,r2,255
   266f8:	1080201c 	xori	r2,r2,128
   266fc:	10bfe004 	addi	r2,r2,-128
   26700:	10800bd8 	cmpnei	r2,r2,47
   26704:	1000031e 	bne	r2,zero,26714 <alt_find_file+0x6c>
    {
      len -= 1;
   26708:	e0bffe17 	ldw	r2,-8(fp)
   2670c:	10bfffc4 	addi	r2,r2,-1
   26710:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26714:	e0bffe17 	ldw	r2,-8(fp)
   26718:	e0ffff17 	ldw	r3,-4(fp)
   2671c:	1885883a 	add	r2,r3,r2
   26720:	10800003 	ldbu	r2,0(r2)
   26724:	10803fcc 	andi	r2,r2,255
   26728:	1080201c 	xori	r2,r2,128
   2672c:	10bfe004 	addi	r2,r2,-128
   26730:	10800be0 	cmpeqi	r2,r2,47
   26734:	1000081e 	bne	r2,zero,26758 <alt_find_file+0xb0>
   26738:	e0bffe17 	ldw	r2,-8(fp)
   2673c:	e0ffff17 	ldw	r3,-4(fp)
   26740:	1885883a 	add	r2,r3,r2
   26744:	10800003 	ldbu	r2,0(r2)
   26748:	10803fcc 	andi	r2,r2,255
   2674c:	1080201c 	xori	r2,r2,128
   26750:	10bfe004 	addi	r2,r2,-128
   26754:	10000a1e 	bne	r2,zero,26780 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   26758:	e0bffd17 	ldw	r2,-12(fp)
   2675c:	10800217 	ldw	r2,8(r2)
   26760:	e0fffe17 	ldw	r3,-8(fp)
   26764:	180d883a 	mov	r6,r3
   26768:	e17fff17 	ldw	r5,-4(fp)
   2676c:	1009883a 	mov	r4,r2
   26770:	00269cc0 	call	269cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26774:	1000021e 	bne	r2,zero,26780 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   26778:	e0bffd17 	ldw	r2,-12(fp)
   2677c:	00000706 	br	2679c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   26780:	e0bffd17 	ldw	r2,-12(fp)
   26784:	10800017 	ldw	r2,0(r2)
   26788:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2678c:	e0fffd17 	ldw	r3,-12(fp)
   26790:	d0a00404 	addi	r2,gp,-32752
   26794:	18bfcc1e 	bne	r3,r2,266c8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   26798:	0005883a 	mov	r2,zero
}
   2679c:	e037883a 	mov	sp,fp
   267a0:	dfc00117 	ldw	ra,4(sp)
   267a4:	df000017 	ldw	fp,0(sp)
   267a8:	dec00204 	addi	sp,sp,8
   267ac:	f800283a 	ret

000267b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   267b0:	defffc04 	addi	sp,sp,-16
   267b4:	df000315 	stw	fp,12(sp)
   267b8:	df000304 	addi	fp,sp,12
   267bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   267c0:	00bffa04 	movi	r2,-24
   267c4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   267c8:	e03ffd15 	stw	zero,-12(fp)
   267cc:	00001906 	br	26834 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   267d0:	008000b4 	movhi	r2,2
   267d4:	109d7c04 	addi	r2,r2,30192
   267d8:	e0fffd17 	ldw	r3,-12(fp)
   267dc:	18c00324 	muli	r3,r3,12
   267e0:	10c5883a 	add	r2,r2,r3
   267e4:	10800017 	ldw	r2,0(r2)
   267e8:	10000f1e 	bne	r2,zero,26828 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   267ec:	008000b4 	movhi	r2,2
   267f0:	109d7c04 	addi	r2,r2,30192
   267f4:	e0fffd17 	ldw	r3,-12(fp)
   267f8:	18c00324 	muli	r3,r3,12
   267fc:	10c5883a 	add	r2,r2,r3
   26800:	e0ffff17 	ldw	r3,-4(fp)
   26804:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   26808:	d0e00817 	ldw	r3,-32736(gp)
   2680c:	e0bffd17 	ldw	r2,-12(fp)
   26810:	1880020e 	bge	r3,r2,2681c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   26814:	e0bffd17 	ldw	r2,-12(fp)
   26818:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   2681c:	e0bffd17 	ldw	r2,-12(fp)
   26820:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   26824:	00000606 	br	26840 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26828:	e0bffd17 	ldw	r2,-12(fp)
   2682c:	10800044 	addi	r2,r2,1
   26830:	e0bffd15 	stw	r2,-12(fp)
   26834:	e0bffd17 	ldw	r2,-12(fp)
   26838:	10800810 	cmplti	r2,r2,32
   2683c:	103fe41e 	bne	r2,zero,267d0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   26840:	e0bffe17 	ldw	r2,-8(fp)
}
   26844:	e037883a 	mov	sp,fp
   26848:	df000017 	ldw	fp,0(sp)
   2684c:	dec00104 	addi	sp,sp,4
   26850:	f800283a 	ret

00026854 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   26854:	defffb04 	addi	sp,sp,-20
   26858:	df000415 	stw	fp,16(sp)
   2685c:	df000404 	addi	fp,sp,16
   26860:	e13ffe15 	stw	r4,-8(fp)
   26864:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   26868:	e0bfff17 	ldw	r2,-4(fp)
   2686c:	10840070 	cmpltui	r2,r2,4097
   26870:	1000021e 	bne	r2,zero,2687c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   26874:	00840004 	movi	r2,4096
   26878:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2687c:	e0fffe17 	ldw	r3,-8(fp)
   26880:	e0bfff17 	ldw	r2,-4(fp)
   26884:	1885883a 	add	r2,r3,r2
   26888:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2688c:	e0bffe17 	ldw	r2,-8(fp)
   26890:	e0bffc15 	stw	r2,-16(fp)
   26894:	00000506 	br	268ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   26898:	e0bffc17 	ldw	r2,-16(fp)
   2689c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   268a0:	e0bffc17 	ldw	r2,-16(fp)
   268a4:	10800804 	addi	r2,r2,32
   268a8:	e0bffc15 	stw	r2,-16(fp)
   268ac:	e0fffc17 	ldw	r3,-16(fp)
   268b0:	e0bffd17 	ldw	r2,-12(fp)
   268b4:	18bff836 	bltu	r3,r2,26898 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   268b8:	e0bffe17 	ldw	r2,-8(fp)
   268bc:	108007cc 	andi	r2,r2,31
   268c0:	10000226 	beq	r2,zero,268cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   268c4:	e0bffc17 	ldw	r2,-16(fp)
   268c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   268cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   268d0:	0001883a 	nop
   268d4:	e037883a 	mov	sp,fp
   268d8:	df000017 	ldw	fp,0(sp)
   268dc:	dec00104 	addi	sp,sp,4
   268e0:	f800283a 	ret

000268e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   268e4:	defffe04 	addi	sp,sp,-8
   268e8:	df000115 	stw	fp,4(sp)
   268ec:	df000104 	addi	fp,sp,4
   268f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   268f4:	e0bfff17 	ldw	r2,-4(fp)
   268f8:	10bffe84 	addi	r2,r2,-6
   268fc:	10c00428 	cmpgeui	r3,r2,16
   26900:	18001a1e 	bne	r3,zero,2696c <alt_exception_cause_generated_bad_addr+0x88>
   26904:	100690ba 	slli	r3,r2,2
   26908:	008000b4 	movhi	r2,2
   2690c:	109a4704 	addi	r2,r2,26908
   26910:	1885883a 	add	r2,r3,r2
   26914:	10800017 	ldw	r2,0(r2)
   26918:	1000683a 	jmp	r2
   2691c:	0002695c 	xori	zero,zero,2469
   26920:	0002695c 	xori	zero,zero,2469
   26924:	0002696c 	andhi	zero,zero,2469
   26928:	0002696c 	andhi	zero,zero,2469
   2692c:	0002696c 	andhi	zero,zero,2469
   26930:	0002695c 	xori	zero,zero,2469
   26934:	00026964 	muli	zero,zero,2469
   26938:	0002696c 	andhi	zero,zero,2469
   2693c:	0002695c 	xori	zero,zero,2469
   26940:	0002695c 	xori	zero,zero,2469
   26944:	0002696c 	andhi	zero,zero,2469
   26948:	0002695c 	xori	zero,zero,2469
   2694c:	00026964 	muli	zero,zero,2469
   26950:	0002696c 	andhi	zero,zero,2469
   26954:	0002696c 	andhi	zero,zero,2469
   26958:	0002695c 	xori	zero,zero,2469
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2695c:	00800044 	movi	r2,1
   26960:	00000306 	br	26970 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   26964:	0005883a 	mov	r2,zero
   26968:	00000106 	br	26970 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2696c:	0005883a 	mov	r2,zero
  }
}
   26970:	e037883a 	mov	sp,fp
   26974:	df000017 	ldw	fp,0(sp)
   26978:	dec00104 	addi	sp,sp,4
   2697c:	f800283a 	ret

00026980 <atexit>:
   26980:	200b883a 	mov	r5,r4
   26984:	000f883a 	mov	r7,zero
   26988:	000d883a 	mov	r6,zero
   2698c:	0009883a 	mov	r4,zero
   26990:	0026a481 	jmpi	26a48 <__register_exitproc>

00026994 <exit>:
   26994:	defffe04 	addi	sp,sp,-8
   26998:	000b883a 	mov	r5,zero
   2699c:	dc000015 	stw	r16,0(sp)
   269a0:	dfc00115 	stw	ra,4(sp)
   269a4:	2021883a 	mov	r16,r4
   269a8:	0026b600 	call	26b60 <__call_exitprocs>
   269ac:	008000f4 	movhi	r2,3
   269b0:	10a23b04 	addi	r2,r2,-30484
   269b4:	11000017 	ldw	r4,0(r2)
   269b8:	20800f17 	ldw	r2,60(r4)
   269bc:	10000126 	beq	r2,zero,269c4 <exit+0x30>
   269c0:	103ee83a 	callr	r2
   269c4:	8009883a 	mov	r4,r16
   269c8:	0026ce00 	call	26ce0 <_exit>

000269cc <memcmp>:
   269cc:	01c000c4 	movi	r7,3
   269d0:	3980192e 	bgeu	r7,r6,26a38 <memcmp+0x6c>
   269d4:	2144b03a 	or	r2,r4,r5
   269d8:	11c4703a 	and	r2,r2,r7
   269dc:	10000f26 	beq	r2,zero,26a1c <memcmp+0x50>
   269e0:	20800003 	ldbu	r2,0(r4)
   269e4:	28c00003 	ldbu	r3,0(r5)
   269e8:	10c0151e 	bne	r2,r3,26a40 <memcmp+0x74>
   269ec:	31bfff84 	addi	r6,r6,-2
   269f0:	01ffffc4 	movi	r7,-1
   269f4:	00000406 	br	26a08 <memcmp+0x3c>
   269f8:	20800003 	ldbu	r2,0(r4)
   269fc:	28c00003 	ldbu	r3,0(r5)
   26a00:	31bfffc4 	addi	r6,r6,-1
   26a04:	10c00e1e 	bne	r2,r3,26a40 <memcmp+0x74>
   26a08:	21000044 	addi	r4,r4,1
   26a0c:	29400044 	addi	r5,r5,1
   26a10:	31fff91e 	bne	r6,r7,269f8 <memcmp+0x2c>
   26a14:	0005883a 	mov	r2,zero
   26a18:	f800283a 	ret
   26a1c:	20c00017 	ldw	r3,0(r4)
   26a20:	28800017 	ldw	r2,0(r5)
   26a24:	18bfee1e 	bne	r3,r2,269e0 <memcmp+0x14>
   26a28:	31bfff04 	addi	r6,r6,-4
   26a2c:	21000104 	addi	r4,r4,4
   26a30:	29400104 	addi	r5,r5,4
   26a34:	39bff936 	bltu	r7,r6,26a1c <memcmp+0x50>
   26a38:	303fe91e 	bne	r6,zero,269e0 <memcmp+0x14>
   26a3c:	003ff506 	br	26a14 <memcmp+0x48>
   26a40:	10c5c83a 	sub	r2,r2,r3
   26a44:	f800283a 	ret

00026a48 <__register_exitproc>:
   26a48:	defffa04 	addi	sp,sp,-24
   26a4c:	dc000315 	stw	r16,12(sp)
   26a50:	040000f4 	movhi	r16,3
   26a54:	84223b04 	addi	r16,r16,-30484
   26a58:	80c00017 	ldw	r3,0(r16)
   26a5c:	dc400415 	stw	r17,16(sp)
   26a60:	dfc00515 	stw	ra,20(sp)
   26a64:	18805217 	ldw	r2,328(r3)
   26a68:	2023883a 	mov	r17,r4
   26a6c:	10003726 	beq	r2,zero,26b4c <__register_exitproc+0x104>
   26a70:	10c00117 	ldw	r3,4(r2)
   26a74:	010007c4 	movi	r4,31
   26a78:	20c00e16 	blt	r4,r3,26ab4 <__register_exitproc+0x6c>
   26a7c:	1a000044 	addi	r8,r3,1
   26a80:	8800221e 	bne	r17,zero,26b0c <__register_exitproc+0xc4>
   26a84:	18c00084 	addi	r3,r3,2
   26a88:	18c7883a 	add	r3,r3,r3
   26a8c:	18c7883a 	add	r3,r3,r3
   26a90:	12000115 	stw	r8,4(r2)
   26a94:	10c7883a 	add	r3,r2,r3
   26a98:	19400015 	stw	r5,0(r3)
   26a9c:	0005883a 	mov	r2,zero
   26aa0:	dfc00517 	ldw	ra,20(sp)
   26aa4:	dc400417 	ldw	r17,16(sp)
   26aa8:	dc000317 	ldw	r16,12(sp)
   26aac:	dec00604 	addi	sp,sp,24
   26ab0:	f800283a 	ret
   26ab4:	00800034 	movhi	r2,0
   26ab8:	10800004 	addi	r2,r2,0
   26abc:	10002626 	beq	r2,zero,26b58 <__register_exitproc+0x110>
   26ac0:	01006404 	movi	r4,400
   26ac4:	d9400015 	stw	r5,0(sp)
   26ac8:	d9800115 	stw	r6,4(sp)
   26acc:	d9c00215 	stw	r7,8(sp)
   26ad0:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>
   26ad4:	d9400017 	ldw	r5,0(sp)
   26ad8:	d9800117 	ldw	r6,4(sp)
   26adc:	d9c00217 	ldw	r7,8(sp)
   26ae0:	10001d26 	beq	r2,zero,26b58 <__register_exitproc+0x110>
   26ae4:	81000017 	ldw	r4,0(r16)
   26ae8:	10000115 	stw	zero,4(r2)
   26aec:	02000044 	movi	r8,1
   26af0:	22405217 	ldw	r9,328(r4)
   26af4:	0007883a 	mov	r3,zero
   26af8:	12400015 	stw	r9,0(r2)
   26afc:	20805215 	stw	r2,328(r4)
   26b00:	10006215 	stw	zero,392(r2)
   26b04:	10006315 	stw	zero,396(r2)
   26b08:	883fde26 	beq	r17,zero,26a84 <__register_exitproc+0x3c>
   26b0c:	18c9883a 	add	r4,r3,r3
   26b10:	2109883a 	add	r4,r4,r4
   26b14:	1109883a 	add	r4,r2,r4
   26b18:	21802215 	stw	r6,136(r4)
   26b1c:	01800044 	movi	r6,1
   26b20:	12406217 	ldw	r9,392(r2)
   26b24:	30cc983a 	sll	r6,r6,r3
   26b28:	4992b03a 	or	r9,r9,r6
   26b2c:	12406215 	stw	r9,392(r2)
   26b30:	21c04215 	stw	r7,264(r4)
   26b34:	01000084 	movi	r4,2
   26b38:	893fd21e 	bne	r17,r4,26a84 <__register_exitproc+0x3c>
   26b3c:	11006317 	ldw	r4,396(r2)
   26b40:	218cb03a 	or	r6,r4,r6
   26b44:	11806315 	stw	r6,396(r2)
   26b48:	003fce06 	br	26a84 <__register_exitproc+0x3c>
   26b4c:	18805304 	addi	r2,r3,332
   26b50:	18805215 	stw	r2,328(r3)
   26b54:	003fc606 	br	26a70 <__register_exitproc+0x28>
   26b58:	00bfffc4 	movi	r2,-1
   26b5c:	003fd006 	br	26aa0 <__register_exitproc+0x58>

00026b60 <__call_exitprocs>:
   26b60:	defff504 	addi	sp,sp,-44
   26b64:	df000915 	stw	fp,36(sp)
   26b68:	dd400615 	stw	r21,24(sp)
   26b6c:	dc800315 	stw	r18,12(sp)
   26b70:	dfc00a15 	stw	ra,40(sp)
   26b74:	ddc00815 	stw	r23,32(sp)
   26b78:	dd800715 	stw	r22,28(sp)
   26b7c:	dd000515 	stw	r20,20(sp)
   26b80:	dcc00415 	stw	r19,16(sp)
   26b84:	dc400215 	stw	r17,8(sp)
   26b88:	dc000115 	stw	r16,4(sp)
   26b8c:	d9000015 	stw	r4,0(sp)
   26b90:	2839883a 	mov	fp,r5
   26b94:	04800044 	movi	r18,1
   26b98:	057fffc4 	movi	r21,-1
   26b9c:	008000f4 	movhi	r2,3
   26ba0:	10a23b04 	addi	r2,r2,-30484
   26ba4:	12000017 	ldw	r8,0(r2)
   26ba8:	45005217 	ldw	r20,328(r8)
   26bac:	44c05204 	addi	r19,r8,328
   26bb0:	a0001c26 	beq	r20,zero,26c24 <__call_exitprocs+0xc4>
   26bb4:	a0800117 	ldw	r2,4(r20)
   26bb8:	15ffffc4 	addi	r23,r2,-1
   26bbc:	b8000d16 	blt	r23,zero,26bf4 <__call_exitprocs+0x94>
   26bc0:	14000044 	addi	r16,r2,1
   26bc4:	8421883a 	add	r16,r16,r16
   26bc8:	8421883a 	add	r16,r16,r16
   26bcc:	84402004 	addi	r17,r16,128
   26bd0:	a463883a 	add	r17,r20,r17
   26bd4:	a421883a 	add	r16,r20,r16
   26bd8:	e0001e26 	beq	fp,zero,26c54 <__call_exitprocs+0xf4>
   26bdc:	80804017 	ldw	r2,256(r16)
   26be0:	e0801c26 	beq	fp,r2,26c54 <__call_exitprocs+0xf4>
   26be4:	bdffffc4 	addi	r23,r23,-1
   26be8:	843fff04 	addi	r16,r16,-4
   26bec:	8c7fff04 	addi	r17,r17,-4
   26bf0:	bd7ff91e 	bne	r23,r21,26bd8 <__call_exitprocs+0x78>
   26bf4:	00800034 	movhi	r2,0
   26bf8:	10800004 	addi	r2,r2,0
   26bfc:	10000926 	beq	r2,zero,26c24 <__call_exitprocs+0xc4>
   26c00:	a0800117 	ldw	r2,4(r20)
   26c04:	1000301e 	bne	r2,zero,26cc8 <__call_exitprocs+0x168>
   26c08:	a0800017 	ldw	r2,0(r20)
   26c0c:	10003226 	beq	r2,zero,26cd8 <__call_exitprocs+0x178>
   26c10:	a009883a 	mov	r4,r20
   26c14:	98800015 	stw	r2,0(r19)
   26c18:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>
   26c1c:	9d000017 	ldw	r20,0(r19)
   26c20:	a03fe41e 	bne	r20,zero,26bb4 <__call_exitprocs+0x54>
   26c24:	dfc00a17 	ldw	ra,40(sp)
   26c28:	df000917 	ldw	fp,36(sp)
   26c2c:	ddc00817 	ldw	r23,32(sp)
   26c30:	dd800717 	ldw	r22,28(sp)
   26c34:	dd400617 	ldw	r21,24(sp)
   26c38:	dd000517 	ldw	r20,20(sp)
   26c3c:	dcc00417 	ldw	r19,16(sp)
   26c40:	dc800317 	ldw	r18,12(sp)
   26c44:	dc400217 	ldw	r17,8(sp)
   26c48:	dc000117 	ldw	r16,4(sp)
   26c4c:	dec00b04 	addi	sp,sp,44
   26c50:	f800283a 	ret
   26c54:	a0800117 	ldw	r2,4(r20)
   26c58:	80c00017 	ldw	r3,0(r16)
   26c5c:	10bfffc4 	addi	r2,r2,-1
   26c60:	15c01426 	beq	r2,r23,26cb4 <__call_exitprocs+0x154>
   26c64:	80000015 	stw	zero,0(r16)
   26c68:	183fde26 	beq	r3,zero,26be4 <__call_exitprocs+0x84>
   26c6c:	95c8983a 	sll	r4,r18,r23
   26c70:	a0806217 	ldw	r2,392(r20)
   26c74:	a5800117 	ldw	r22,4(r20)
   26c78:	2084703a 	and	r2,r4,r2
   26c7c:	10000b26 	beq	r2,zero,26cac <__call_exitprocs+0x14c>
   26c80:	a0806317 	ldw	r2,396(r20)
   26c84:	2088703a 	and	r4,r4,r2
   26c88:	20000c1e 	bne	r4,zero,26cbc <__call_exitprocs+0x15c>
   26c8c:	89400017 	ldw	r5,0(r17)
   26c90:	d9000017 	ldw	r4,0(sp)
   26c94:	183ee83a 	callr	r3
   26c98:	a0800117 	ldw	r2,4(r20)
   26c9c:	15bfbf1e 	bne	r2,r22,26b9c <__call_exitprocs+0x3c>
   26ca0:	98800017 	ldw	r2,0(r19)
   26ca4:	153fcf26 	beq	r2,r20,26be4 <__call_exitprocs+0x84>
   26ca8:	003fbc06 	br	26b9c <__call_exitprocs+0x3c>
   26cac:	183ee83a 	callr	r3
   26cb0:	003ff906 	br	26c98 <__call_exitprocs+0x138>
   26cb4:	a5c00115 	stw	r23,4(r20)
   26cb8:	003feb06 	br	26c68 <__call_exitprocs+0x108>
   26cbc:	89000017 	ldw	r4,0(r17)
   26cc0:	183ee83a 	callr	r3
   26cc4:	003ff406 	br	26c98 <__call_exitprocs+0x138>
   26cc8:	a0800017 	ldw	r2,0(r20)
   26ccc:	a027883a 	mov	r19,r20
   26cd0:	1029883a 	mov	r20,r2
   26cd4:	003fb606 	br	26bb0 <__call_exitprocs+0x50>
   26cd8:	0005883a 	mov	r2,zero
   26cdc:	003ffb06 	br	26ccc <__call_exitprocs+0x16c>

00026ce0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26ce0:	defffd04 	addi	sp,sp,-12
   26ce4:	df000215 	stw	fp,8(sp)
   26ce8:	df000204 	addi	fp,sp,8
   26cec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26cf0:	0001883a 	nop
   26cf4:	e0bfff17 	ldw	r2,-4(fp)
   26cf8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26cfc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26d00:	10000226 	beq	r2,zero,26d0c <_exit+0x2c>
    ALT_SIM_FAIL();
   26d04:	002af070 	cmpltui	zero,zero,43969
   26d08:	00000106 	br	26d10 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26d0c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   26d10:	003fff06 	br	26d10 <_exit+0x30>
