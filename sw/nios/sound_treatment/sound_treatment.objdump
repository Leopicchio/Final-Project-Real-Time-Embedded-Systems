
sound_treatment.elf:     file format elf32-littlenios2
sound_treatment.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00018eec memsz 0x00018eec flags r-x
    LOAD off    0x00019f0c vaddr 0x00038f0c paddr 0x0003bac4 align 2**12
         filesz 0x00002bb8 memsz 0x00002bb8 flags rw-
    LOAD off    0x0001d67c vaddr 0x0003e67c paddr 0x0003e67c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017d20  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000fa8  00037f64  00037f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002bb8  00038f0c  0003bac4  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0003e67c  0003e67c  0001d67c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory_nios2_FFT 00000000  0003e7d4  0003e7d4  0001cac4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001cac4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000014a0  00000000  00000000  0001cae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000331c8  00000000  00000000  0001df88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000d2c3  00000000  00000000  00051150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010826  00000000  00000000  0005e413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000312c  00000000  00000000  0006ec3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004b56  00000000  00000000  00071d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001e990  00000000  00000000  000768be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00095250  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000020d8  00000000  00000000  00095280  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009b372  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0009b375  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009b37e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009b37f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  0009b380  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  0009b386  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  0009b38c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0009b392  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  0009b39d  2**0
                  CONTENTS, READONLY
 26 .jdi          000092fe  00000000  00000000  0009b3d9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000af5fd  00000000  00000000  000a46d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00037f64 l    d  .rodata	00000000 .rodata
00038f0c l    d  .rwdata	00000000 .rwdata
0003e67c l    d  .bss	00000000 .bss
0003e7d4 l    d  .onchip_memory_nios2_FFT	00000000 .onchip_memory_nios2_FFT
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/vm/Final-Project-Real-Time-Embedded-Systems/sw/nios/sound_treatment_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 data_processor.c
00020290 l     F .text	00000104 convert_to_freq
00020394 l     F .text	000000f8 complex_abs
0002048c l     F .text	000000e8 get_peak_pos
00020574 l     F .text	000000d0 get_peak_frequence
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 kiss_fft.c
00020e9c l     F .text	00000200 kf_bfly2
0002109c l     F .text	00000710 kf_bfly4
000217ac l     F .text	0000060c kf_bfly3
00021db8 l     F .text	00000b00 kf_bfly5
000228b8 l     F .text	00000344 kf_bfly_generic
00022bfc l     F .text	00000210 kf_work
00022e0c l     F .text	0000013c kf_factor
00000000 l    df *ABS*	00000000 wawfile.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00038114 l     O .rodata	00000108 two_over_pi
00038094 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0003825c l     O .rodata	00000010 init_jk
0003821c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00029c14 l     F .text	00000008 __fp_unlock
00029c28 l     F .text	0000019c __sinit.part.1
00029dc4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0003af0c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0002bc04 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00038aba l     O .rodata	00000010 zeroes.4404
0002eb8c l     F .text	000000bc __sbprintf
00038aca l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00038bdb l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0002efd0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0003b758 l     O .rwdata	00000020 lc_ctype_charset
0003b738 l     O .rwdata	00000020 lc_message_charset
0003b778 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00038d78 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00032ae8 l     F .text	000000fc __sprint_r.part.0
00038eac l     O .rodata	00000010 blanks.4348
00038e9c l     O .rodata	00000010 zeroes.4349
00034074 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000351ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000352f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00035358 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00035444 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00035524 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00035610 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000357e4 l     F .text	0000003c alt_get_errno
00035820 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00035a38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0003baac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00035c84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00035db8 l     F .text	00000034 alt_dev_reg
00035dec l     F .text	0000003c alt_get_errno
00035e28 l     F .text	00000068 alt_avalon_mutex_reg
0003b958 l     O .rwdata	00000048 mailbox_simple_0
0003b9a0 l     O .rwdata	00000010 mutex_SDRAM
0003b9b0 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
00035f30 l     F .text	00000090 altera_avalon_mailbox_identify
00035fc0 l     F .text	00000078 altera_avalon_mailbox_post
00036038 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
00036170 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00036890 l     F .text	0000003c alt_get_errno
000368cc l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00036d18 l     F .text	0000009c altera_avalon_uart_irq
00036db4 l     F .text	000000e4 altera_avalon_uart_rxirq
00036e98 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00037034 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0003724c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003747c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00037b2c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
0003e6a8 g     O .bss	00000004 alt_instruction_exception_handler
0002bb18 g     F .text	00000018 putchar
00032168 g     F .text	00000074 _mprec_log10
00036604 g     F .text	00000150 altera_avalon_mailbox_send
00032254 g     F .text	0000008c __any_on
00030f14 g     F .text	00000054 _isatty_r
00038d84 g     O .rodata	00000028 __mprec_tinytens
00035720 g     F .text	0000007c alt_main
0002bb30 g     F .text	000000c0 _puts_r
0003e6d4 g     O .bss	00000100 alt_irq
00025770 g     F .text	00000014 fabs
00031044 g     F .text	00000060 _lseek_r
0002374c g     F .text	00000130 sqrt
0003bac4 g       *ABS*	00000000 __flash_rwdata_start
00030858 g     F .text	000000ac __sflags
0002807c g     F .text	00000088 .hidden __eqdf2
0003e7d4 g       *ABS*	00000000 __alt_heap_start
0002bad4 g     F .text	0000003c printf
00034554 g     F .text	0000009c _wcrtomb_r
0002bfa8 g     F .text	0000005c __sseek
00029f64 g     F .text	00000010 __sinit
00034130 g     F .text	00000140 __swbuf_r
00030f68 g     F .text	0000007c _setlocale_r
00029dcc g     F .text	00000068 __sfmoreglue
000357c0 g     F .text	00000024 __malloc_unlock
00026034 g     F .text	00000440 .hidden __divsf3
0002c668 g     F .text	0000001c strerror
00031188 g     F .text	0000015c memmove
00029f4c g     F .text	00000018 _cleanup
00036a04 g     F .text	00000040 altera_avalon_mutex_trylock
000312e4 g     F .text	000000a8 _Balloc
00026d54 g     F .text	00000070 .hidden __fixsfsi
00028104 g     F .text	000000dc .hidden __gtdf2
00037c6c g     F .text	00000024 altera_nios2_gen2_irq_init
00029820 g     F .text	00000010 __errno
000208a0 g     F .text	000001a4 TestFft
00020000 g     F .entry	0000001c __reset
00036a98 g     F .text	00000074 altera_avalon_mutex_is_mine
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002a974 g     F .text	0000005c _fstat_r
0003e67c g     O .bss	00000004 errno
0002be68 g     F .text	00000014 __srget
00023470 g     F .text	000001ec floor
0002bf24 g     F .text	00000008 __seofread
0003e69c g     O .bss	00000004 alt_argv
00043a74 g       *ABS*	00000000 _gp
00036754 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
00026870 g     F .text	000004e4 .hidden __subsf3
0003b7d8 g     O .rwdata	00000180 alt_fd_list
0002ac58 g     F .text	00000070 _getc_r
0002387c g     F .text	0000076c __ieee754_rem_pio2
0002acc8 g     F .text	00000088 getc
0002bb10 g     F .text	00000008 _putchar_r
0003761c g     F .text	00000090 alt_find_dev
0002b740 g     F .text	00000148 memcpy
00029c1c g     F .text	0000000c _cleanup_r
00029368 g     F .text	000000dc .hidden __floatsidf
0002ba90 g     F .text	00000014 perror
00037bf0 g     F .text	0000007c alt_io_redirect
000281e0 g     F .text	000000f4 .hidden __ltdf2
00037f64 g       *ABS*	00000000 __DTOR_END__
0002bbf0 g     F .text	00000014 puts
00037d20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002c00c g     F .text	0000065c _strerror_r
00036218 g     F .text	00000078 altera_avalon_mailbox_simple_init
00025784 g     F .text	00000074 __fpclassifyd
000320c4 g     F .text	000000a4 __ratio
00034058 g     F .text	0000001c __vfiprintf_internal
0002af0c g     F .text	00000014 malloc
0002baa4 g     F .text	00000030 _printf_r
00025ab0 g     F .text	00000064 .hidden __udivsi3
00035480 g     F .text	000000a4 isatty
00038dd4 g     O .rodata	000000c8 __mprec_tens
0003658c g     F .text	00000078 altera_avalon_mailbox_status
00036474 g     F .text	00000118 altera_avalon_mailbox_close
00030fe4 g     F .text	0000000c __locale_charset
00024270 g     F .text	000004a4 __kernel_cos
00037c90 g     F .text	00000090 alt_icache_flush
0003e688 g     O .bss	00000004 __malloc_top_pad
0003ba8c g     O .rwdata	00000004 __mb_cur_max
00031014 g     F .text	0000000c _localeconv_r
000316f0 g     F .text	0000003c __i2b
00030a58 g     F .text	000004bc __sfvwrite_r
0002be7c g     F .text	00000054 _sbrk_r
00032448 g     F .text	00000060 _read_r
0003baa4 g     O .rwdata	00000004 alt_max_fd
00029868 g     F .text	000000f0 _fclose_r
00029be4 g     F .text	00000030 fflush
0003e684 g     O .bss	00000004 __malloc_max_sbrked_mem
000254a4 g     F .text	000002cc __kernel_sin
000294ec g     F .text	00000110 .hidden __extendsfdf2
00026ee8 g     F .text	000008ac .hidden __adddf3
00031e6c g     F .text	0000010c __b2d
00034cb4 g     F .text	00000538 .hidden __umoddi3
0003564c g     F .text	000000d4 lseek
00036b0c g     F .text	00000050 altera_avalon_mutex_first_lock
0003ba74 g     O .rwdata	00000004 __fdlib_version
0003ba78 g     O .rwdata	00000004 _global_impure_ptr
000324a8 g     F .text	00000564 _realloc_r
0003e7d4 g       *ABS*	00000000 __bss_end
00037a3c g     F .text	000000f0 alt_iic_isr_register
0003473c g     F .text	00000578 .hidden __udivdi3
000344b0 g     F .text	00000024 _fputwc_r
00038dac g     O .rodata	00000028 __mprec_bigtens
000314d4 g     F .text	00000104 __s2b
00029444 g     F .text	000000a8 .hidden __floatunsidf
00031bac g     F .text	00000060 __mcmp
00036c6c g     F .text	000000ac altera_avalon_uart_init
00029f84 g     F .text	00000018 __fp_lock_all
000379f0 g     F .text	0000004c alt_ic_irq_enabled
0002c954 g     F .text	0000001c strtol
0003e6a4 g     O .bss	00000004 alt_irq_active
0002a514 g     F .text	00000444 _fseeko_r
000200fc g     F .exceptions	000000d4 alt_irq_handler
0003b7b0 g     O .rwdata	00000028 alt_dev_null
00024714 g     F .text	00000d90 __kernel_rem_pio2
00036948 g     F .text	00000054 altera_avalon_mutex_open
00037434 g     F .text	00000048 alt_dcache_flush_all
000315d8 g     F .text	00000068 __hi0bits
000292e8 g     F .text	00000080 .hidden __fixdfsi
0003bac4 g       *ABS*	00000000 __ram_rwdata_end
0003ba9c g     O .rwdata	00000008 alt_dev_list
00030904 g     F .text	00000044 _fputc_r
00035cc0 g     F .text	000000f8 write
000322e0 g     F .text	000000a0 _putc_r
0003bab8 g     O .rwdata	00000008 alt_mutex_list
00038f0c g       *ABS*	00000000 __ram_rodata_end
00035394 g     F .text	000000b0 fstat
000281e0 g     F .text	000000f4 .hidden __ledf2
00031924 g     F .text	00000140 __pow5mult
00032bfc g     F .text	0000145c ___vfiprintf_internal_r
0003e694 g     O .bss	00000004 __nlocale_changed
00025b14 g     F .text	00000058 .hidden __umodsi3
00020780 g     F .text	000000bc data_processor_run
0003e7d4 g       *ABS*	00000000 end
0002a958 g     F .text	0000001c fseeko
00029814 g     F .text	0000000c _atoi_r
00037288 g     F .text	000001ac altera_avalon_uart_write
0002a4f8 g     F .text	0000001c fseek
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00037f64 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00036bbc g     F .text	00000060 altera_avalon_uart_write_fd
000297a4 g     F .text	00000064 .hidden __clzsi2
00036c1c g     F .text	00000050 altera_avalon_uart_close_fd
00023384 g     F .text	000000ec cos
00023178 g     F .text	000000d4 kiss_fft_stride
00029f74 g     F .text	00000004 __sfp_lock_acquire
000310a4 g     F .text	000000e4 memchr
0002324c g     F .text	00000048 kiss_fft
0002c978 g     F .text	000021f8 ___vfprintf_internal_r
0002a1e4 g     F .text	00000310 _free_r
00030ff0 g     F .text	00000010 __locale_mb_cur_max
0002bdf4 g     F .text	00000074 __srget_r
0002ee50 g     F .text	00000180 __call_exitprocs
00020a44 g     F .text	00000084 SilentFft
0003e690 g     O .bss	00000004 __mlocale_changed
0003ba80 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
0002365c g     F .text	000000f0 sin
0002c970 g     F .text	00000008 _user_strerror
00031a64 g     F .text	00000148 __lshift
00035a74 g     F .text	000000fc read
00035ec8 g     F .text	00000068 alt_sys_init
00026dc4 g     F .text	00000124 .hidden __floatsisf
0002b9b0 g     F .text	00000060 _open_r
00020644 g     F .text	0000013c data_processor_init
00037e4c g     F .text	00000118 __register_exitproc
0002083c g     F .text	00000064 data_processor_close
00036a44 g     F .text	00000054 altera_avalon_mutex_unlock
0003172c g     F .text	000001f8 __multiply
00038f0c g       *ABS*	00000000 __ram_rwdata_start
00037f64 g       *ABS*	00000000 __ram_rodata_start
0003e6ac g     O .bss	00000028 __malloc_current_mallinfo
00031f78 g     F .text	0000014c __d2b
000377b4 g     F .text	000000a4 alt_get_fd
0002edfc g     F .text	00000054 _close_r
00037dd0 g     F .text	0000007c memcmp
0003e7d4 g       *ABS*	00000000 __alt_stack_base
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios2_FFT
0002ab58 g     F .text	000000cc _fwrite_r
0002eca8 g     F .text	00000154 __swsetup_r
00027794 g     F .text	000008e8 .hidden __divdf3
00029e34 g     F .text	00000118 __sfp
000321dc g     F .text	00000078 __copybits
0003b330 g     O .rwdata	00000408 __malloc_av_
00029f80 g     F .text	00000004 __sinit_lock_release
000282d4 g     F .text	00000718 .hidden __muldf3
0002bed0 g     F .text	00000054 __sread
000376ac g     F .text	00000108 alt_find_file
000374b8 g     F .text	000000a4 alt_dev_llist_insert
0003579c g     F .text	00000024 __malloc_lock
00035bd4 g     F .text	000000b0 sbrk
00029b88 g     F .text	0000005c _fflush_r
00034288 g     F .text	000000c4 _calloc_r
0002a0a8 g     F .text	00000018 fopen
0003e67c g       *ABS*	00000000 __bss_start
0002b888 g     F .text	00000128 memset
00020ac8 g     F .text	000003d4 main
0003e6a0 g     O .bss	00000004 alt_envp
0003e680 g     O .bss	00000004 __malloc_max_total_mem
00034270 g     F .text	00000018 __swbuf
0002c004 g     F .text	00000008 __sclose
000257f8 g     F .text	00000008 matherr
00040000 g       *ABS*	00000000 __alt_heap_limit
00029958 g     F .text	00000014 fclose
0002c71c g     F .text	00000238 _strtol_r
000295fc g     F .text	000001a8 .hidden __truncdfsf2
000369c0 g     F .text	00000044 altera_avalon_mutex_lock
0002f1d0 g     F .text	00001688 _dtoa_r
0002af34 g     F .text	0000080c _malloc_r
000346b0 g     F .text	00000030 __ascii_wctomb
0003baa8 g     O .rwdata	00000004 alt_errno
0002a9d0 g     F .text	000000c4 _fwalk
00032380 g     F .text	000000c8 putc
000259b8 g     F .text	00000084 .hidden __divsi3
0002a0c0 g     F .text	00000124 _malloc_trim_r
00037f64 g       *ABS*	00000000 __CTOR_END__
00026474 g     F .text	000003fc .hidden __mulsf3
00032a0c g     F .text	000000dc strcmp
00037f64 g       *ABS*	00000000 __flash_rodata_start
00037f64 g       *ABS*	00000000 __DTOR_LIST__
0002599c g     F .text	0000001c copysign
0002807c g     F .text	00000088 .hidden __nedf2
00035e90 g     F .text	00000038 alt_irq_init
00035b70 g     F .text	00000064 alt_release_fd
0003826c g     O .rodata	00000100 .hidden __clz_tab
0003e68c g     O .bss	00000004 _PathLocale
00037dbc g     F .text	00000014 atexit
0002ec48 g     F .text	00000060 _write_r
00031020 g     F .text	00000018 setlocale
0003ba7c g     O .rwdata	00000004 _impure_ptr
0003e698 g     O .bss	00000004 alt_argc
0002996c g     F .text	0000021c __sflush_r
00025800 g     F .text	0000019c scalbn
000375bc g     F .text	00000060 _do_dtors
0003100c g     F .text	00000008 __locale_cjk_lang
0002a4f4 g     F .text	00000004 _fseek_r
0002bc20 g     F .text	000001d4 __srefill_r
00020020 g       .exceptions	00000000 alt_irq_entry
00031e08 g     F .text	00000064 __ulp
00029f9c g     F .text	00000018 __fp_unlock_all
00030948 g     F .text	0000005c fputc
0003ba94 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00031038 g     F .text	0000000c localeconv
00023fe8 g     F .text	00000288 __ieee754_sqrt
0003788c g     F .text	00000050 alt_ic_isr_register
0002ac24 g     F .text	00000034 fwrite
0003bac4 g       *ABS*	00000000 _edata
00036b5c g     F .text	00000060 altera_avalon_uart_read_fd
0003e7d4 g       *ABS*	00000000 _end
00038f0c g     O .rwdata	00002000 wawsound
0003434c g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
000309a4 g     F .text	0000009c _fputs_r
00037964 g     F .text	0000008c alt_ic_irq_disable
0003bab0 g     O .rwdata	00000008 alt_mailbox_simple_list
0002bf2c g     F .text	0000007c __swrite
0003ba84 g     O .rwdata	00000004 __malloc_trim_threshold
0002ba10 g     F .text	00000080 _perror_r
00031000 g     F .text	0000000c __locale_msgcharset
00029830 g     F .text	00000038 exit
0002aa94 g     F .text	000000c4 _fwalk_reent
00031c0c g     F .text	000001fc __mdiff
00023294 g     F .text	00000020 kiss_fft_cleanup
00025a3c g     F .text	00000074 .hidden __modsi3
0003ba88 g     O .rwdata	00000004 __ctype_ptr__
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00029f78 g     F .text	00000004 __sfp_lock_release
00029808 g     F .text	0000000c atoi
00038ada g     O .rodata	00000101 _ctype_
00036fe0 g     F .text	00000054 altera_avalon_uart_close
00036290 g     F .text	000001e4 altera_avalon_mailbox_open
00029fb4 g     F .text	000000f4 _fopen_r
00035324 g     F .text	00000034 _exit
0002ad50 g     F .text	000001bc __smakebuf_r
0002c684 g     F .text	00000098 strlen
000358e4 g     F .text	00000154 open
00028104 g     F .text	000000dc .hidden __gedf2
0003ba90 g     O .rwdata	00000004 __wctomb
00032be4 g     F .text	00000018 __sprint_r
00037858 g     F .text	00000034 alt_icache_flush_all
00030a40 g     F .text	00000018 fputs
0003bac0 g     O .rwdata	00000004 alt_priority_mask
000378dc g     F .text	00000088 alt_ic_irq_enable
0002eb70 g     F .text	0000001c __vfprintf_internal
0003699c g     F .text	00000024 altera_avalon_mutex_close
000232b4 g     F .text	000000d0 kiss_fft_next_fast_size
00037070 g     F .text	000001dc altera_avalon_uart_read
000346e0 g     F .text	0000005c _wctomb_r
00022f48 g     F .text	00000230 kiss_fft_alloc
000289ec g     F .text	000008fc .hidden __subdf3
00031640 g     F .text	000000b0 __lo0bits
0003755c g     F .text	00000060 _do_ctors
000345f0 g     F .text	000000c0 wcrtomb
00035228 g     F .text	000000d0 close
00025b6c g     F .text	000004c8 .hidden __addsf3
0003558c g     F .text	00000084 alt_load
000344d4 g     F .text	00000080 fputwc
0002af20 g     F .text	00000014 free
00029f7c g     F .text	00000004 __sinit_lock_acquire
000313b4 g     F .text	00000120 __multadd
0003138c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	10b9b504 	addi	r2,r2,-6444
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	10b9b504 	addi	r2,r2,-6444
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0ab0d17 	ldw	r2,-21452(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0ab0d17 	ldw	r2,-21452(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   20260:	d68e9d14 	ori	gp,gp,14964
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	10b99f14 	ori	r2,r2,59004

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18f9f514 	ori	r3,r3,59348

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	003558c0 	call	3558c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	00357200 	call	35720 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <alt_after_alt_main>

00020290 <convert_to_freq>:
#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include "data_processor.h"

static void convert_to_freq(kiss_fft_cpx *cout, int n) {
   20290:	defffb04 	addi	sp,sp,-20
   20294:	dfc00415 	stw	ra,16(sp)
   20298:	df000315 	stw	fp,12(sp)
   2029c:	df000304 	addi	fp,sp,12
   202a0:	e13ffe15 	stw	r4,-8(fp)
   202a4:	e17fff15 	stw	r5,-4(fp)
	const float NC = n/2.0 + 1;
   202a8:	e13fff17 	ldw	r4,-4(fp)
   202ac:	00293680 	call	29368 <__floatsidf>
   202b0:	1011883a 	mov	r8,r2
   202b4:	1813883a 	mov	r9,r3
   202b8:	000d883a 	mov	r6,zero
   202bc:	01d00034 	movhi	r7,16384
   202c0:	4009883a 	mov	r4,r8
   202c4:	480b883a 	mov	r5,r9
   202c8:	00277940 	call	27794 <__divdf3>
   202cc:	1009883a 	mov	r4,r2
   202d0:	180b883a 	mov	r5,r3
   202d4:	2005883a 	mov	r2,r4
   202d8:	2807883a 	mov	r3,r5
   202dc:	000d883a 	mov	r6,zero
   202e0:	01cffc34 	movhi	r7,16368
   202e4:	1009883a 	mov	r4,r2
   202e8:	180b883a 	mov	r5,r3
   202ec:	0026ee80 	call	26ee8 <__adddf3>
   202f0:	1009883a 	mov	r4,r2
   202f4:	180b883a 	mov	r5,r3
   202f8:	2005883a 	mov	r2,r4
   202fc:	2807883a 	mov	r3,r5
   20300:	1009883a 	mov	r4,r2
   20304:	180b883a 	mov	r5,r3
   20308:	00295fc0 	call	295fc <__truncdfsf2>
   2030c:	1007883a 	mov	r3,r2
   20310:	e0fffd15 	stw	r3,-12(fp)
	while (n-- > 0) {
   20314:	00001506 	br	2036c <convert_to_freq+0xdc>
		cout->r /= NC;
   20318:	e0bffe17 	ldw	r2,-8(fp)
   2031c:	10c00017 	ldw	r3,0(r2)
   20320:	e17ffd17 	ldw	r5,-12(fp)
   20324:	1809883a 	mov	r4,r3
   20328:	00260340 	call	26034 <__divsf3>
   2032c:	1009883a 	mov	r4,r2
   20330:	2007883a 	mov	r3,r4
   20334:	e0bffe17 	ldw	r2,-8(fp)
   20338:	10c00015 	stw	r3,0(r2)
		cout->i /= NC;
   2033c:	e0bffe17 	ldw	r2,-8(fp)
   20340:	10c00117 	ldw	r3,4(r2)
   20344:	e17ffd17 	ldw	r5,-12(fp)
   20348:	1809883a 	mov	r4,r3
   2034c:	00260340 	call	26034 <__divsf3>
   20350:	1009883a 	mov	r4,r2
   20354:	2007883a 	mov	r3,r4
   20358:	e0bffe17 	ldw	r2,-8(fp)
   2035c:	10c00115 	stw	r3,4(r2)
		cout++;
   20360:	e0bffe17 	ldw	r2,-8(fp)
   20364:	10800204 	addi	r2,r2,8
   20368:	e0bffe15 	stw	r2,-8(fp)
#include <unistd.h>
#include "data_processor.h"

static void convert_to_freq(kiss_fft_cpx *cout, int n) {
	const float NC = n/2.0 + 1;
	while (n-- > 0) {
   2036c:	e0bfff17 	ldw	r2,-4(fp)
   20370:	10ffffc4 	addi	r3,r2,-1
   20374:	e0ffff15 	stw	r3,-4(fp)
   20378:	00bfe716 	blt	zero,r2,20318 <convert_to_freq+0x88>
		cout->r /= NC;
		cout->i /= NC;
		cout++;
	}
}
   2037c:	0001883a 	nop
   20380:	e037883a 	mov	sp,fp
   20384:	dfc00117 	ldw	ra,4(sp)
   20388:	df000017 	ldw	fp,0(sp)
   2038c:	dec00204 	addi	sp,sp,8
   20390:	f800283a 	ret

00020394 <complex_abs>:

static void complex_abs(kiss_fft_cpx *cout, int n) {
   20394:	defffb04 	addi	sp,sp,-20
   20398:	dfc00415 	stw	ra,16(sp)
   2039c:	df000315 	stw	fp,12(sp)
   203a0:	dc000215 	stw	r16,8(sp)
   203a4:	df000304 	addi	fp,sp,12
   203a8:	e13ffd15 	stw	r4,-12(fp)
   203ac:	e17ffe15 	stw	r5,-8(fp)
	while (n-- > 0) {
   203b0:	00002b06 	br	20460 <complex_abs+0xcc>
		cout->r = sqrt(cout->r * cout->r + cout->i * cout->i);
   203b4:	e0bffd17 	ldw	r2,-12(fp)
   203b8:	10c00017 	ldw	r3,0(r2)
   203bc:	e0bffd17 	ldw	r2,-12(fp)
   203c0:	11000017 	ldw	r4,0(r2)
   203c4:	200b883a 	mov	r5,r4
   203c8:	1809883a 	mov	r4,r3
   203cc:	00264740 	call	26474 <__mulsf3>
   203d0:	1007883a 	mov	r3,r2
   203d4:	1821883a 	mov	r16,r3
   203d8:	e0bffd17 	ldw	r2,-12(fp)
   203dc:	10c00117 	ldw	r3,4(r2)
   203e0:	e0bffd17 	ldw	r2,-12(fp)
   203e4:	11000117 	ldw	r4,4(r2)
   203e8:	200b883a 	mov	r5,r4
   203ec:	1809883a 	mov	r4,r3
   203f0:	00264740 	call	26474 <__mulsf3>
   203f4:	1007883a 	mov	r3,r2
   203f8:	1805883a 	mov	r2,r3
   203fc:	100b883a 	mov	r5,r2
   20400:	8009883a 	mov	r4,r16
   20404:	0025b6c0 	call	25b6c <__addsf3>
   20408:	1007883a 	mov	r3,r2
   2040c:	1805883a 	mov	r2,r3
   20410:	1009883a 	mov	r4,r2
   20414:	00294ec0 	call	294ec <__extendsfdf2>
   20418:	100b883a 	mov	r5,r2
   2041c:	180d883a 	mov	r6,r3
   20420:	2809883a 	mov	r4,r5
   20424:	300b883a 	mov	r5,r6
   20428:	002374c0 	call	2374c <sqrt>
   2042c:	100b883a 	mov	r5,r2
   20430:	180d883a 	mov	r6,r3
   20434:	2809883a 	mov	r4,r5
   20438:	300b883a 	mov	r5,r6
   2043c:	00295fc0 	call	295fc <__truncdfsf2>
   20440:	1007883a 	mov	r3,r2
   20444:	e0bffd17 	ldw	r2,-12(fp)
   20448:	10c00015 	stw	r3,0(r2)
		cout->i = 0;
   2044c:	e0bffd17 	ldw	r2,-12(fp)
   20450:	10000115 	stw	zero,4(r2)
		cout++;
   20454:	e0bffd17 	ldw	r2,-12(fp)
   20458:	10800204 	addi	r2,r2,8
   2045c:	e0bffd15 	stw	r2,-12(fp)
		cout++;
	}
}

static void complex_abs(kiss_fft_cpx *cout, int n) {
	while (n-- > 0) {
   20460:	e0bffe17 	ldw	r2,-8(fp)
   20464:	10ffffc4 	addi	r3,r2,-1
   20468:	e0fffe15 	stw	r3,-8(fp)
   2046c:	00bfd116 	blt	zero,r2,203b4 <complex_abs+0x20>
		cout->r = sqrt(cout->r * cout->r + cout->i * cout->i);
		cout->i = 0;
		cout++;
	}
}
   20470:	0001883a 	nop
   20474:	e6ffff04 	addi	sp,fp,-4
   20478:	dfc00217 	ldw	ra,8(sp)
   2047c:	df000117 	ldw	fp,4(sp)
   20480:	dc000017 	ldw	r16,0(sp)
   20484:	dec00304 	addi	sp,sp,12
   20488:	f800283a 	ret

0002048c <get_peak_pos>:

static int get_peak_pos(const kiss_fft_cpx *cout, int nfft, int start_pos) {
   2048c:	defff804 	addi	sp,sp,-32
   20490:	dfc00715 	stw	ra,28(sp)
   20494:	df000615 	stw	fp,24(sp)
   20498:	df000604 	addi	fp,sp,24
   2049c:	e13ffd15 	stw	r4,-12(fp)
   204a0:	e17ffe15 	stw	r5,-8(fp)
   204a4:	e1bfff15 	stw	r6,-4(fp)
	int pos = 0;
   204a8:	e03ffa15 	stw	zero,-24(fp)
	float maxdata = 0;
   204ac:	e03ffb15 	stw	zero,-20(fp)
	int i;
	for (i = start_pos; i < nfft/2; i++) {
   204b0:	e0bfff17 	ldw	r2,-4(fp)
   204b4:	e0bffc15 	stw	r2,-16(fp)
   204b8:	00002106 	br	20540 <get_peak_pos+0xb4>
		if ((cout[i].r - maxdata) > 0.0001) {
   204bc:	e0bffc17 	ldw	r2,-16(fp)
   204c0:	100490fa 	slli	r2,r2,3
   204c4:	e0fffd17 	ldw	r3,-12(fp)
   204c8:	1885883a 	add	r2,r3,r2
   204cc:	10c00017 	ldw	r3,0(r2)
   204d0:	e17ffb17 	ldw	r5,-20(fp)
   204d4:	1809883a 	mov	r4,r3
   204d8:	00268700 	call	26870 <__subsf3>
   204dc:	1007883a 	mov	r3,r2
   204e0:	1805883a 	mov	r2,r3
   204e4:	1009883a 	mov	r4,r2
   204e8:	00294ec0 	call	294ec <__extendsfdf2>
   204ec:	1011883a 	mov	r8,r2
   204f0:	1813883a 	mov	r9,r3
   204f4:	01bac734 	movhi	r6,60188
   204f8:	3190cb44 	addi	r6,r6,17197
   204fc:	01cfc6b4 	movhi	r7,16154
   20500:	39cdb884 	addi	r7,r7,14050
   20504:	4009883a 	mov	r4,r8
   20508:	480b883a 	mov	r5,r9
   2050c:	00281040 	call	28104 <__gedf2>
   20510:	0080080e 	bge	zero,r2,20534 <get_peak_pos+0xa8>
			maxdata = cout[i].r;
   20514:	e0bffc17 	ldw	r2,-16(fp)
   20518:	100490fa 	slli	r2,r2,3
   2051c:	e0fffd17 	ldw	r3,-12(fp)
   20520:	1885883a 	add	r2,r3,r2
   20524:	10800017 	ldw	r2,0(r2)
   20528:	e0bffb15 	stw	r2,-20(fp)
			pos = i;
   2052c:	e0bffc17 	ldw	r2,-16(fp)
   20530:	e0bffa15 	stw	r2,-24(fp)

static int get_peak_pos(const kiss_fft_cpx *cout, int nfft, int start_pos) {
	int pos = 0;
	float maxdata = 0;
	int i;
	for (i = start_pos; i < nfft/2; i++) {
   20534:	e0bffc17 	ldw	r2,-16(fp)
   20538:	10800044 	addi	r2,r2,1
   2053c:	e0bffc15 	stw	r2,-16(fp)
   20540:	e0bffe17 	ldw	r2,-8(fp)
   20544:	1006d7fa 	srli	r3,r2,31
   20548:	1885883a 	add	r2,r3,r2
   2054c:	1005d07a 	srai	r2,r2,1
   20550:	1007883a 	mov	r3,r2
   20554:	e0bffc17 	ldw	r2,-16(fp)
   20558:	10ffd816 	blt	r2,r3,204bc <get_peak_pos+0x30>
		if ((cout[i].r - maxdata) > 0.0001) {
			maxdata = cout[i].r;
			pos = i;
		}
	}
	return pos;
   2055c:	e0bffa17 	ldw	r2,-24(fp)
}
   20560:	e037883a 	mov	sp,fp
   20564:	dfc00117 	ldw	ra,4(sp)
   20568:	df000017 	ldw	fp,0(sp)
   2056c:	dec00204 	addi	sp,sp,8
   20570:	f800283a 	ret

00020574 <get_peak_frequence>:

static float get_peak_frequence(const kiss_fft_cpx *cout, int nfft, float start_hz, float sample_hz) {
   20574:	defff804 	addi	sp,sp,-32
   20578:	dfc00715 	stw	ra,28(sp)
   2057c:	df000615 	stw	fp,24(sp)
   20580:	dc000515 	stw	r16,20(sp)
   20584:	df000604 	addi	fp,sp,24
   20588:	e13ffb15 	stw	r4,-20(fp)
   2058c:	e17ffc15 	stw	r5,-16(fp)
   20590:	e1bffd15 	stw	r6,-12(fp)
   20594:	e1fffe15 	stw	r7,-8(fp)
	int start_pos = start_hz * nfft / sample_hz;
   20598:	e13ffc17 	ldw	r4,-16(fp)
   2059c:	0026dc40 	call	26dc4 <__floatsisf>
   205a0:	1007883a 	mov	r3,r2
   205a4:	e17ffd17 	ldw	r5,-12(fp)
   205a8:	1809883a 	mov	r4,r3
   205ac:	00264740 	call	26474 <__mulsf3>
   205b0:	1007883a 	mov	r3,r2
   205b4:	1805883a 	mov	r2,r3
   205b8:	e17ffe17 	ldw	r5,-8(fp)
   205bc:	1009883a 	mov	r4,r2
   205c0:	00260340 	call	26034 <__divsf3>
   205c4:	1007883a 	mov	r3,r2
   205c8:	1805883a 	mov	r2,r3
   205cc:	1009883a 	mov	r4,r2
   205d0:	0026d540 	call	26d54 <__fixsfsi>
   205d4:	e0bffa15 	stw	r2,-24(fp)
	return get_peak_pos(cout, nfft, start_pos) * sample_hz / nfft;
   205d8:	e1bffa17 	ldw	r6,-24(fp)
   205dc:	e17ffc17 	ldw	r5,-16(fp)
   205e0:	e13ffb17 	ldw	r4,-20(fp)
   205e4:	002048c0 	call	2048c <get_peak_pos>
   205e8:	1009883a 	mov	r4,r2
   205ec:	0026dc40 	call	26dc4 <__floatsisf>
   205f0:	1007883a 	mov	r3,r2
   205f4:	e17ffe17 	ldw	r5,-8(fp)
   205f8:	1809883a 	mov	r4,r3
   205fc:	00264740 	call	26474 <__mulsf3>
   20600:	1007883a 	mov	r3,r2
   20604:	1821883a 	mov	r16,r3
   20608:	e13ffc17 	ldw	r4,-16(fp)
   2060c:	0026dc40 	call	26dc4 <__floatsisf>
   20610:	1007883a 	mov	r3,r2
   20614:	180b883a 	mov	r5,r3
   20618:	8009883a 	mov	r4,r16
   2061c:	00260340 	call	26034 <__divsf3>
   20620:	1009883a 	mov	r4,r2
   20624:	2007883a 	mov	r3,r4
   20628:	1805883a 	mov	r2,r3
}
   2062c:	e6ffff04 	addi	sp,fp,-4
   20630:	dfc00217 	ldw	ra,8(sp)
   20634:	df000117 	ldw	fp,4(sp)
   20638:	dc000017 	ldw	r16,0(sp)
   2063c:	dec00304 	addi	sp,sp,12
   20640:	f800283a 	ret

00020644 <data_processor_init>:


data_processor_t data_processor_init(int nfft, int hz) {
   20644:	defffb04 	addi	sp,sp,-20
   20648:	dfc00415 	stw	ra,16(sp)
   2064c:	df000315 	stw	fp,12(sp)
   20650:	df000304 	addi	fp,sp,12
   20654:	e13ffe15 	stw	r4,-8(fp)
   20658:	e17fff15 	stw	r5,-4(fp)
	data_processor_t dfft = NULL;
   2065c:	e03ffd15 	stw	zero,-12(fp)
	dfft = (data_processor_t)malloc(sizeof(struct data_processor));
   20660:	01000504 	movi	r4,20
   20664:	002af0c0 	call	2af0c <malloc>
   20668:	e0bffd15 	stw	r2,-12(fp)
	if (!dfft) {
   2066c:	e0bffd17 	ldw	r2,-12(fp)
   20670:	1000051e 	bne	r2,zero,20688 <data_processor_init+0x44>
		perror("malloc");
   20674:	010000f4 	movhi	r4,3
   20678:	211fd904 	addi	r4,r4,32612
   2067c:	002ba900 	call	2ba90 <perror>
		return NULL;
   20680:	0005883a 	mov	r2,zero
   20684:	00003906 	br	2076c <data_processor_init+0x128>
	}
	//printf("dfft len = %d\n", sizeof(*data_processor_t));
	dfft->sample_hz = hz;
   20688:	e13fff17 	ldw	r4,-4(fp)
   2068c:	0026dc40 	call	26dc4 <__floatsisf>
   20690:	1007883a 	mov	r3,r2
   20694:	e0bffd17 	ldw	r2,-12(fp)
   20698:	10c00015 	stw	r3,0(r2)
	dfft->nfft = nfft;
   2069c:	e0bffd17 	ldw	r2,-12(fp)
   206a0:	e0fffe17 	ldw	r3,-8(fp)
   206a4:	10c00115 	stw	r3,4(r2)
	dfft->cin = (kiss_fft_cpx *)malloc(sizeof(kiss_fft_cpx) * dfft->nfft);
   206a8:	e0bffd17 	ldw	r2,-12(fp)
   206ac:	10800117 	ldw	r2,4(r2)
   206b0:	100490fa 	slli	r2,r2,3
   206b4:	1009883a 	mov	r4,r2
   206b8:	002af0c0 	call	2af0c <malloc>
   206bc:	1007883a 	mov	r3,r2
   206c0:	e0bffd17 	ldw	r2,-12(fp)
   206c4:	10c00215 	stw	r3,8(r2)
	if (!dfft->cin) {
   206c8:	e0bffd17 	ldw	r2,-12(fp)
   206cc:	10800217 	ldw	r2,8(r2)
   206d0:	1000071e 	bne	r2,zero,206f0 <data_processor_init+0xac>
		perror("malloc cin");
   206d4:	010000f4 	movhi	r4,3
   206d8:	211fdb04 	addi	r4,r4,32620
   206dc:	002ba900 	call	2ba90 <perror>
		free(dfft);
   206e0:	e13ffd17 	ldw	r4,-12(fp)
   206e4:	002af200 	call	2af20 <free>
		return NULL;
   206e8:	0005883a 	mov	r2,zero
   206ec:	00001f06 	br	2076c <data_processor_init+0x128>
	}
	dfft->cout = (kiss_fft_cpx *)malloc(sizeof(kiss_fft_cpx) * dfft->nfft);
   206f0:	e0bffd17 	ldw	r2,-12(fp)
   206f4:	10800117 	ldw	r2,4(r2)
   206f8:	100490fa 	slli	r2,r2,3
   206fc:	1009883a 	mov	r4,r2
   20700:	002af0c0 	call	2af0c <malloc>
   20704:	1007883a 	mov	r3,r2
   20708:	e0bffd17 	ldw	r2,-12(fp)
   2070c:	10c00315 	stw	r3,12(r2)
	if (!dfft->cout) {
   20710:	e0bffd17 	ldw	r2,-12(fp)
   20714:	10800317 	ldw	r2,12(r2)
   20718:	10000b1e 	bne	r2,zero,20748 <data_processor_init+0x104>
		perror("malloc cout");
   2071c:	010000f4 	movhi	r4,3
   20720:	211fde04 	addi	r4,r4,32632
   20724:	002ba900 	call	2ba90 <perror>
		free(dfft->cin);
   20728:	e0bffd17 	ldw	r2,-12(fp)
   2072c:	10800217 	ldw	r2,8(r2)
   20730:	1009883a 	mov	r4,r2
   20734:	002af200 	call	2af20 <free>
		free(dfft);
   20738:	e13ffd17 	ldw	r4,-12(fp)
   2073c:	002af200 	call	2af20 <free>
		return NULL;
   20740:	0005883a 	mov	r2,zero
   20744:	00000906 	br	2076c <data_processor_init+0x128>
	}

	dfft->kiss_fft_state = kiss_fft_alloc(nfft,0,0,0);
   20748:	000f883a 	mov	r7,zero
   2074c:	000d883a 	mov	r6,zero
   20750:	000b883a 	mov	r5,zero
   20754:	e13ffe17 	ldw	r4,-8(fp)
   20758:	0022f480 	call	22f48 <kiss_fft_alloc>
   2075c:	1007883a 	mov	r3,r2
   20760:	e0bffd17 	ldw	r2,-12(fp)
   20764:	10c00415 	stw	r3,16(r2)

	return dfft;
   20768:	e0bffd17 	ldw	r2,-12(fp)
}
   2076c:	e037883a 	mov	sp,fp
   20770:	dfc00117 	ldw	ra,4(sp)
   20774:	df000017 	ldw	fp,0(sp)
   20778:	dec00204 	addi	sp,sp,8
   2077c:	f800283a 	ret

00020780 <data_processor_run>:

float data_processor_run(data_processor_t dfft) {
   20780:	defffd04 	addi	sp,sp,-12
   20784:	dfc00215 	stw	ra,8(sp)
   20788:	df000115 	stw	fp,4(sp)
   2078c:	df000104 	addi	fp,sp,4
   20790:	e13fff15 	stw	r4,-4(fp)
	kiss_fft(dfft->kiss_fft_state, dfft->cin, dfft->cout);
   20794:	e0bfff17 	ldw	r2,-4(fp)
   20798:	10c00417 	ldw	r3,16(r2)
   2079c:	e0bfff17 	ldw	r2,-4(fp)
   207a0:	11000217 	ldw	r4,8(r2)
   207a4:	e0bfff17 	ldw	r2,-4(fp)
   207a8:	10800317 	ldw	r2,12(r2)
   207ac:	100d883a 	mov	r6,r2
   207b0:	200b883a 	mov	r5,r4
   207b4:	1809883a 	mov	r4,r3
   207b8:	002324c0 	call	2324c <kiss_fft>
    convert_to_freq(dfft->cout, dfft->nfft);
   207bc:	e0bfff17 	ldw	r2,-4(fp)
   207c0:	10c00317 	ldw	r3,12(r2)
   207c4:	e0bfff17 	ldw	r2,-4(fp)
   207c8:	10800117 	ldw	r2,4(r2)
   207cc:	100b883a 	mov	r5,r2
   207d0:	1809883a 	mov	r4,r3
   207d4:	00202900 	call	20290 <convert_to_freq>
    complex_abs(dfft->cout, dfft->nfft);
   207d8:	e0bfff17 	ldw	r2,-4(fp)
   207dc:	10c00317 	ldw	r3,12(r2)
   207e0:	e0bfff17 	ldw	r2,-4(fp)
   207e4:	10800117 	ldw	r2,4(r2)
   207e8:	100b883a 	mov	r5,r2
   207ec:	1809883a 	mov	r4,r3
   207f0:	00203940 	call	20394 <complex_abs>
    return get_peak_frequence(dfft->cout, dfft->nfft, 500.0, dfft->sample_hz);
   207f4:	e0bfff17 	ldw	r2,-4(fp)
   207f8:	10c00317 	ldw	r3,12(r2)
   207fc:	e0bfff17 	ldw	r2,-4(fp)
   20800:	11000117 	ldw	r4,4(r2)
   20804:	e0bfff17 	ldw	r2,-4(fp)
   20808:	11400017 	ldw	r5,0(r2)
   2080c:	280f883a 	mov	r7,r5
   20810:	0190feb4 	movhi	r6,17402
   20814:	200b883a 	mov	r5,r4
   20818:	1809883a 	mov	r4,r3
   2081c:	00205740 	call	20574 <get_peak_frequence>
   20820:	1007883a 	mov	r3,r2
   20824:	1805883a 	mov	r2,r3
}
   20828:	e037883a 	mov	sp,fp
   2082c:	dfc00117 	ldw	ra,4(sp)
   20830:	df000017 	ldw	fp,0(sp)
   20834:	dec00204 	addi	sp,sp,8
   20838:	f800283a 	ret

0002083c <data_processor_close>:

void data_processor_close(data_processor_t dfft) {
   2083c:	defffd04 	addi	sp,sp,-12
   20840:	dfc00215 	stw	ra,8(sp)
   20844:	df000115 	stw	fp,4(sp)
   20848:	df000104 	addi	fp,sp,4
   2084c:	e13fff15 	stw	r4,-4(fp)
	free(dfft->cin);
   20850:	e0bfff17 	ldw	r2,-4(fp)
   20854:	10800217 	ldw	r2,8(r2)
   20858:	1009883a 	mov	r4,r2
   2085c:	002af200 	call	2af20 <free>
	free(dfft->cout);
   20860:	e0bfff17 	ldw	r2,-4(fp)
   20864:	10800317 	ldw	r2,12(r2)
   20868:	1009883a 	mov	r4,r2
   2086c:	002af200 	call	2af20 <free>
	free(dfft->kiss_fft_state);
   20870:	e0bfff17 	ldw	r2,-4(fp)
   20874:	10800417 	ldw	r2,16(r2)
   20878:	1009883a 	mov	r4,r2
   2087c:	002af200 	call	2af20 <free>
	free(dfft);
   20880:	e13fff17 	ldw	r4,-4(fp)
   20884:	002af200 	call	2af20 <free>
}
   20888:	0001883a 	nop
   2088c:	e037883a 	mov	sp,fp
   20890:	dfc00117 	ldw	ra,4(sp)
   20894:	df000017 	ldw	fp,0(sp)
   20898:	dec00204 	addi	sp,sp,8
   2089c:	f800283a 	ret

000208a0 <TestFft>:
#endif

#define N 16

void TestFft(const char* title, const kiss_fft_cpx in[N], kiss_fft_cpx out[N], int inverse)
{
   208a0:	deffeb04 	addi	sp,sp,-84
   208a4:	dfc01415 	stw	ra,80(sp)
   208a8:	df001315 	stw	fp,76(sp)
   208ac:	dd401215 	stw	r21,72(sp)
   208b0:	dd001115 	stw	r20,68(sp)
   208b4:	dcc01015 	stw	r19,64(sp)
   208b8:	dc800f15 	stw	r18,60(sp)
   208bc:	dc400e15 	stw	r17,56(sp)
   208c0:	dc000d15 	stw	r16,52(sp)
   208c4:	df001304 	addi	fp,sp,76
   208c8:	e13ff615 	stw	r4,-40(fp)
   208cc:	e17ff715 	stw	r5,-36(fp)
   208d0:	e1bff815 	stw	r6,-32(fp)
   208d4:	e1fff915 	stw	r7,-28(fp)
  kiss_fft_cfg cfg;

  printf("%s\n", title);
   208d8:	e13ff617 	ldw	r4,-40(fp)
   208dc:	002bbf00 	call	2bbf0 <puts>

  if ((cfg = kiss_fft_alloc(N, inverse/*is_inverse_fft*/, NULL, NULL)) != NULL)
   208e0:	000f883a 	mov	r7,zero
   208e4:	000d883a 	mov	r6,zero
   208e8:	e17ff917 	ldw	r5,-28(fp)
   208ec:	01000404 	movi	r4,16
   208f0:	0022f480 	call	22f48 <kiss_fft_alloc>
   208f4:	e0bff515 	stw	r2,-44(fp)
   208f8:	e0bff517 	ldw	r2,-44(fp)
   208fc:	10004126 	beq	r2,zero,20a04 <TestFft+0x164>
  {
    size_t i;

    kiss_fft(cfg, in, out);
   20900:	e1bff817 	ldw	r6,-32(fp)
   20904:	e17ff717 	ldw	r5,-36(fp)
   20908:	e13ff517 	ldw	r4,-44(fp)
   2090c:	002324c0 	call	2324c <kiss_fft>
    free(cfg);
   20910:	e13ff517 	ldw	r4,-44(fp)
   20914:	002af200 	call	2af20 <free>

    for (i = 0; i < N; i++)
   20918:	e03ff415 	stw	zero,-48(fp)
   2091c:	00003506 	br	209f4 <TestFft+0x154>
      printf(" in[%d] = %+f , %+f    "
             "out[%d] = %+f , %+f\n",
             i, in[i].r, in[i].i,
   20920:	e0bff417 	ldw	r2,-48(fp)
   20924:	100490fa 	slli	r2,r2,3
   20928:	e0fff717 	ldw	r3,-36(fp)
   2092c:	1885883a 	add	r2,r3,r2
   20930:	10c00017 	ldw	r3,0(r2)

    kiss_fft(cfg, in, out);
    free(cfg);

    for (i = 0; i < N; i++)
      printf(" in[%d] = %+f , %+f    "
   20934:	1809883a 	mov	r4,r3
   20938:	00294ec0 	call	294ec <__extendsfdf2>
   2093c:	1029883a 	mov	r20,r2
   20940:	182b883a 	mov	r21,r3
             "out[%d] = %+f , %+f\n",
             i, in[i].r, in[i].i,
   20944:	e0bff417 	ldw	r2,-48(fp)
   20948:	100490fa 	slli	r2,r2,3
   2094c:	e0fff717 	ldw	r3,-36(fp)
   20950:	1885883a 	add	r2,r3,r2
   20954:	10c00117 	ldw	r3,4(r2)

    kiss_fft(cfg, in, out);
    free(cfg);

    for (i = 0; i < N; i++)
      printf(" in[%d] = %+f , %+f    "
   20958:	1809883a 	mov	r4,r3
   2095c:	00294ec0 	call	294ec <__extendsfdf2>
   20960:	1021883a 	mov	r16,r2
   20964:	1823883a 	mov	r17,r3
             "out[%d] = %+f , %+f\n",
             i, in[i].r, in[i].i,
             i, out[i].r, out[i].i);
   20968:	e0bff417 	ldw	r2,-48(fp)
   2096c:	100490fa 	slli	r2,r2,3
   20970:	e0fff817 	ldw	r3,-32(fp)
   20974:	1885883a 	add	r2,r3,r2
   20978:	10c00017 	ldw	r3,0(r2)

    kiss_fft(cfg, in, out);
    free(cfg);

    for (i = 0; i < N; i++)
      printf(" in[%d] = %+f , %+f    "
   2097c:	1809883a 	mov	r4,r3
   20980:	00294ec0 	call	294ec <__extendsfdf2>
   20984:	1025883a 	mov	r18,r2
   20988:	1827883a 	mov	r19,r3
             "out[%d] = %+f , %+f\n",
             i, in[i].r, in[i].i,
             i, out[i].r, out[i].i);
   2098c:	e0bff417 	ldw	r2,-48(fp)
   20990:	100490fa 	slli	r2,r2,3
   20994:	e0fff817 	ldw	r3,-32(fp)
   20998:	1885883a 	add	r2,r3,r2
   2099c:	10c00117 	ldw	r3,4(r2)

    kiss_fft(cfg, in, out);
    free(cfg);

    for (i = 0; i < N; i++)
      printf(" in[%d] = %+f , %+f    "
   209a0:	1809883a 	mov	r4,r3
   209a4:	00294ec0 	call	294ec <__extendsfdf2>
   209a8:	1009883a 	mov	r4,r2
   209ac:	180b883a 	mov	r5,r3
   209b0:	d9000515 	stw	r4,20(sp)
   209b4:	d9400615 	stw	r5,24(sp)
   209b8:	dc800315 	stw	r18,12(sp)
   209bc:	dcc00415 	stw	r19,16(sp)
   209c0:	e0bff417 	ldw	r2,-48(fp)
   209c4:	d8800215 	stw	r2,8(sp)
   209c8:	dc000015 	stw	r16,0(sp)
   209cc:	dc400115 	stw	r17,4(sp)
   209d0:	a00d883a 	mov	r6,r20
   209d4:	a80f883a 	mov	r7,r21
   209d8:	e17ff417 	ldw	r5,-48(fp)
   209dc:	010000f4 	movhi	r4,3
   209e0:	211fe104 	addi	r4,r4,32644
   209e4:	002bad40 	call	2bad4 <printf>
    size_t i;

    kiss_fft(cfg, in, out);
    free(cfg);

    for (i = 0; i < N; i++)
   209e8:	e0bff417 	ldw	r2,-48(fp)
   209ec:	10800044 	addi	r2,r2,1
   209f0:	e0bff415 	stw	r2,-48(fp)
   209f4:	e0bff417 	ldw	r2,-48(fp)
   209f8:	10800430 	cmpltui	r2,r2,16
   209fc:	103fc81e 	bne	r2,zero,20920 <TestFft+0x80>
  else
  {
    printf("not enough memory?\n");
    exit(-1);
  }
}
   20a00:	00000506 	br	20a18 <TestFft+0x178>
             i, in[i].r, in[i].i,
             i, out[i].r, out[i].i);
  }
  else
  {
    printf("not enough memory?\n");
   20a04:	010000f4 	movhi	r4,3
   20a08:	211fec04 	addi	r4,r4,32688
   20a0c:	002bbf00 	call	2bbf0 <puts>
    exit(-1);
   20a10:	013fffc4 	movi	r4,-1
   20a14:	00298300 	call	29830 <exit>
  }
}
   20a18:	e6fffa04 	addi	sp,fp,-24
   20a1c:	dfc00717 	ldw	ra,28(sp)
   20a20:	df000617 	ldw	fp,24(sp)
   20a24:	dd400517 	ldw	r21,20(sp)
   20a28:	dd000417 	ldw	r20,16(sp)
   20a2c:	dcc00317 	ldw	r19,12(sp)
   20a30:	dc800217 	ldw	r18,8(sp)
   20a34:	dc400117 	ldw	r17,4(sp)
   20a38:	dc000017 	ldw	r16,0(sp)
   20a3c:	dec00804 	addi	sp,sp,32
   20a40:	f800283a 	ret

00020a44 <SilentFft>:

void SilentFft(const char* title, const kiss_fft_cpx in[N], kiss_fft_cpx out[N], int inverse)
{
   20a44:	defff904 	addi	sp,sp,-28
   20a48:	dfc00615 	stw	ra,24(sp)
   20a4c:	df000515 	stw	fp,20(sp)
   20a50:	df000504 	addi	fp,sp,20
   20a54:	e13ffc15 	stw	r4,-16(fp)
   20a58:	e17ffd15 	stw	r5,-12(fp)
   20a5c:	e1bffe15 	stw	r6,-8(fp)
   20a60:	e1ffff15 	stw	r7,-4(fp)
  kiss_fft_cfg cfg;

  //printf("%s\n", title);

  if ((cfg = kiss_fft_alloc(N, inverse/*is_inverse_fft*/, NULL, NULL)) != NULL)
   20a64:	000f883a 	mov	r7,zero
   20a68:	000d883a 	mov	r6,zero
   20a6c:	e17fff17 	ldw	r5,-4(fp)
   20a70:	01000404 	movi	r4,16
   20a74:	0022f480 	call	22f48 <kiss_fft_alloc>
   20a78:	e0bffb15 	stw	r2,-20(fp)
   20a7c:	e0bffb17 	ldw	r2,-20(fp)
   20a80:	10000726 	beq	r2,zero,20aa0 <SilentFft+0x5c>
  {
    size_t i;

    kiss_fft(cfg, in, out);
   20a84:	e1bffe17 	ldw	r6,-8(fp)
   20a88:	e17ffd17 	ldw	r5,-12(fp)
   20a8c:	e13ffb17 	ldw	r4,-20(fp)
   20a90:	002324c0 	call	2324c <kiss_fft>
    free(cfg);
   20a94:	e13ffb17 	ldw	r4,-20(fp)
   20a98:	002af200 	call	2af20 <free>
  else
  {
    printf("not enough memory?\n");
    exit(-1);
  }
}
   20a9c:	00000506 	br	20ab4 <SilentFft+0x70>
      //       i, in[i].r, in[i].i,
      //      i, out[i].r, out[i].i);
  }
  else
  {
    printf("not enough memory?\n");
   20aa0:	010000f4 	movhi	r4,3
   20aa4:	211fec04 	addi	r4,r4,32688
   20aa8:	002bbf00 	call	2bbf0 <puts>
    exit(-1);
   20aac:	013fffc4 	movi	r4,-1
   20ab0:	00298300 	call	29830 <exit>
  }
}
   20ab4:	e037883a 	mov	sp,fp
   20ab8:	dfc00117 	ldw	ra,4(sp)
   20abc:	df000017 	ldw	fp,0(sp)
   20ac0:	dec00204 	addi	sp,sp,8
   20ac4:	f800283a 	ret

00020ac8 <main>:



int main(void)
{
   20ac8:	deffa304 	addi	sp,sp,-372
   20acc:	dfc05c15 	stw	ra,368(sp)
   20ad0:	df005b15 	stw	fp,364(sp)
   20ad4:	df005b04 	addi	fp,sp,364
  printf("Sound treatment processor online !\n");
   20ad8:	010000f4 	movhi	r4,3
   20adc:	211ff104 	addi	r4,r4,32708
   20ae0:	002bbf00 	call	2bbf0 <puts>
  kiss_fft_cpx in[N], out[N];
  size_t i;

  for (i = 0; i < N; i++)
   20ae4:	e03fa515 	stw	zero,-364(fp)
   20ae8:	00001506 	br	20b40 <main+0x78>
    in[i].r = in[i].i = 0;
   20aec:	e0bfa517 	ldw	r2,-364(fp)
   20af0:	100490fa 	slli	r2,r2,3
   20af4:	e0ffa504 	addi	r3,fp,-364
   20af8:	1885883a 	add	r2,r3,r2
   20afc:	10800904 	addi	r2,r2,36
   20b00:	10000015 	stw	zero,0(r2)
   20b04:	e0bfa517 	ldw	r2,-364(fp)
   20b08:	100490fa 	slli	r2,r2,3
   20b0c:	e13fa504 	addi	r4,fp,-364
   20b10:	2085883a 	add	r2,r4,r2
   20b14:	10800904 	addi	r2,r2,36
   20b18:	10c00017 	ldw	r3,0(r2)
   20b1c:	e0bfa517 	ldw	r2,-364(fp)
   20b20:	100490fa 	slli	r2,r2,3
   20b24:	e13fa504 	addi	r4,fp,-364
   20b28:	2085883a 	add	r2,r4,r2
   20b2c:	10800804 	addi	r2,r2,32
   20b30:	10c00015 	stw	r3,0(r2)
{
  printf("Sound treatment processor online !\n");
  kiss_fft_cpx in[N], out[N];
  size_t i;

  for (i = 0; i < N; i++)
   20b34:	e0bfa517 	ldw	r2,-364(fp)
   20b38:	10800044 	addi	r2,r2,1
   20b3c:	e0bfa515 	stw	r2,-364(fp)
   20b40:	e0bfa517 	ldw	r2,-364(fp)
   20b44:	10800430 	cmpltui	r2,r2,16
   20b48:	103fe81e 	bne	r2,zero,20aec <main+0x24>
    in[i].r = in[i].i = 0;
  TestFft("Zeroes (complex)", in, out, 0);
   20b4c:	e0ffcd04 	addi	r3,fp,-204
   20b50:	e0bfad04 	addi	r2,fp,-332
   20b54:	000f883a 	mov	r7,zero
   20b58:	180d883a 	mov	r6,r3
   20b5c:	100b883a 	mov	r5,r2
   20b60:	010000f4 	movhi	r4,3
   20b64:	211ffa04 	addi	r4,r4,32744
   20b68:	00208a00 	call	208a0 <TestFft>

  for (i = 0; i < N; i++)
   20b6c:	e03fa515 	stw	zero,-364(fp)
   20b70:	00001006 	br	20bb4 <main+0xec>
    in[i].r = 1, in[i].i = 0;
   20b74:	e0bfa517 	ldw	r2,-364(fp)
   20b78:	100490fa 	slli	r2,r2,3
   20b7c:	e0ffa504 	addi	r3,fp,-364
   20b80:	1885883a 	add	r2,r3,r2
   20b84:	10800804 	addi	r2,r2,32
   20b88:	00cfe034 	movhi	r3,16256
   20b8c:	10c00015 	stw	r3,0(r2)
   20b90:	e0bfa517 	ldw	r2,-364(fp)
   20b94:	100490fa 	slli	r2,r2,3
   20b98:	e13fa504 	addi	r4,fp,-364
   20b9c:	2085883a 	add	r2,r4,r2
   20ba0:	10800904 	addi	r2,r2,36
   20ba4:	10000015 	stw	zero,0(r2)

  for (i = 0; i < N; i++)
    in[i].r = in[i].i = 0;
  TestFft("Zeroes (complex)", in, out, 0);

  for (i = 0; i < N; i++)
   20ba8:	e0bfa517 	ldw	r2,-364(fp)
   20bac:	10800044 	addi	r2,r2,1
   20bb0:	e0bfa515 	stw	r2,-364(fp)
   20bb4:	e0bfa517 	ldw	r2,-364(fp)
   20bb8:	10800430 	cmpltui	r2,r2,16
   20bbc:	103fed1e 	bne	r2,zero,20b74 <main+0xac>
    in[i].r = 1, in[i].i = 0;
  TestFft("Ones (complex)", in, out, 0);
   20bc0:	e0ffcd04 	addi	r3,fp,-204
   20bc4:	e0bfad04 	addi	r2,fp,-332
   20bc8:	000f883a 	mov	r7,zero
   20bcc:	180d883a 	mov	r6,r3
   20bd0:	100b883a 	mov	r5,r2
   20bd4:	010000f4 	movhi	r4,3
   20bd8:	211fff04 	addi	r4,r4,32764
   20bdc:	00208a00 	call	208a0 <TestFft>

  for (i = 0; i < N; i++)
   20be0:	e03fa515 	stw	zero,-364(fp)
   20be4:	00003006 	br	20ca8 <main+0x1e0>
    in[i].r = sin(2 * M_PI * 4 * i / N), in[i].i = 0;
   20be8:	e13fa517 	ldw	r4,-364(fp)
   20bec:	00294440 	call	29444 <__floatunsidf>
   20bf0:	1011883a 	mov	r8,r2
   20bf4:	1813883a 	mov	r9,r3
   20bf8:	01951134 	movhi	r6,21572
   20bfc:	318b4604 	addi	r6,r6,11544
   20c00:	01d00e74 	movhi	r7,16441
   20c04:	39c87ec4 	addi	r7,r7,8699
   20c08:	4009883a 	mov	r4,r8
   20c0c:	480b883a 	mov	r5,r9
   20c10:	00282d40 	call	282d4 <__muldf3>
   20c14:	1009883a 	mov	r4,r2
   20c18:	180b883a 	mov	r5,r3
   20c1c:	2005883a 	mov	r2,r4
   20c20:	2807883a 	mov	r3,r5
   20c24:	000d883a 	mov	r6,zero
   20c28:	01d00c34 	movhi	r7,16432
   20c2c:	1009883a 	mov	r4,r2
   20c30:	180b883a 	mov	r5,r3
   20c34:	00277940 	call	27794 <__divdf3>
   20c38:	1009883a 	mov	r4,r2
   20c3c:	180b883a 	mov	r5,r3
   20c40:	2005883a 	mov	r2,r4
   20c44:	2807883a 	mov	r3,r5
   20c48:	1009883a 	mov	r4,r2
   20c4c:	180b883a 	mov	r5,r3
   20c50:	002365c0 	call	2365c <sin>
   20c54:	100b883a 	mov	r5,r2
   20c58:	180d883a 	mov	r6,r3
   20c5c:	2809883a 	mov	r4,r5
   20c60:	300b883a 	mov	r5,r6
   20c64:	00295fc0 	call	295fc <__truncdfsf2>
   20c68:	1007883a 	mov	r3,r2
   20c6c:	e0bfa517 	ldw	r2,-364(fp)
   20c70:	100490fa 	slli	r2,r2,3
   20c74:	e13fa504 	addi	r4,fp,-364
   20c78:	2085883a 	add	r2,r4,r2
   20c7c:	10800804 	addi	r2,r2,32
   20c80:	10c00015 	stw	r3,0(r2)
   20c84:	e0bfa517 	ldw	r2,-364(fp)
   20c88:	100490fa 	slli	r2,r2,3
   20c8c:	e0ffa504 	addi	r3,fp,-364
   20c90:	1885883a 	add	r2,r3,r2
   20c94:	10800904 	addi	r2,r2,36
   20c98:	10000015 	stw	zero,0(r2)

  for (i = 0; i < N; i++)
    in[i].r = 1, in[i].i = 0;
  TestFft("Ones (complex)", in, out, 0);

  for (i = 0; i < N; i++)
   20c9c:	e0bfa517 	ldw	r2,-364(fp)
   20ca0:	10800044 	addi	r2,r2,1
   20ca4:	e0bfa515 	stw	r2,-364(fp)
   20ca8:	e0bfa517 	ldw	r2,-364(fp)
   20cac:	10800430 	cmpltui	r2,r2,16
   20cb0:	103fcd1e 	bne	r2,zero,20be8 <main+0x120>
    in[i].r = sin(2 * M_PI * 4 * i / N), in[i].i = 0;
  TestFft("SineWave (complex)", in, out, 0);
   20cb4:	e0ffcd04 	addi	r3,fp,-204
   20cb8:	e0bfad04 	addi	r2,fp,-332
   20cbc:	000f883a 	mov	r7,zero
   20cc0:	180d883a 	mov	r6,r3
   20cc4:	100b883a 	mov	r5,r2
   20cc8:	01000134 	movhi	r4,4
   20ccc:	21200304 	addi	r4,r4,-32756
   20cd0:	00208a00 	call	208a0 <TestFft>
//
//  for (i = 0; i < N; i++)
//        in[i].r = out[i].r, in[i].i = out[i].i;
//    TestFft("Wawfile reverse (complex)", in, out, 1);

    printf("starting UART stream\n");
   20cd4:	01000134 	movhi	r4,4
   20cd8:	21200804 	addi	r4,r4,-32736
   20cdc:	002bbf00 	call	2bbf0 <puts>
 	char* msg = "Detected the character 't'.\n";
   20ce0:	00800134 	movhi	r2,4
   20ce4:	10a00e04 	addi	r2,r2,-32712
   20ce8:	e0bfa915 	stw	r2,-348(fp)
    FILE* fp;
    char prompt = 0;
   20cec:	e03fa605 	stb	zero,-360(fp)
    fp = fopen ("/dev/uart_0", "r+"); //Open file for reading and writing
   20cf0:	01400134 	movhi	r5,4
   20cf4:	29601604 	addi	r5,r5,-32680
   20cf8:	01000134 	movhi	r4,4
   20cfc:	21201704 	addi	r4,r4,-32676
   20d00:	002a0a80 	call	2a0a8 <fopen>
   20d04:	e0bfaa15 	stw	r2,-344(fp)
    int datatofft[16];
    if (fp)
   20d08:	e0bfaa17 	ldw	r2,-344(fp)
   20d0c:	10005d26 	beq	r2,zero,20e84 <main+0x3bc>
    {
		while (prompt != 'v')
   20d10:	00005106 	br	20e58 <main+0x390>
		{ // Loop until we receive a 'v'.
			char* msg2 = "n\n";
   20d14:	00800134 	movhi	r2,4
   20d18:	10a01a04 	addi	r2,r2,-32664
   20d1c:	e0bfab15 	stw	r2,-340(fp)
			fwrite (msg2, strlen (msg2), 1, fp);//ready for next chunk of data
   20d20:	e13fab17 	ldw	r4,-340(fp)
   20d24:	002c6840 	call	2c684 <strlen>
   20d28:	e1ffaa17 	ldw	r7,-344(fp)
   20d2c:	01800044 	movi	r6,1
   20d30:	100b883a 	mov	r5,r2
   20d34:	e13fab17 	ldw	r4,-340(fp)
   20d38:	002ac240 	call	2ac24 <fwrite>

			char messageReceived[10] = "";
   20d3c:	e03ffd15 	stw	zero,-12(fp)
   20d40:	e03ffe15 	stw	zero,-8(fp)
   20d44:	e03fff0d 	sth	zero,-4(fp)
			prompt = getc(fp); // Get a character from the UART.
   20d48:	e13faa17 	ldw	r4,-344(fp)
   20d4c:	002acc80 	call	2acc8 <getc>
   20d50:	e0bfa605 	stb	r2,-360(fp)
			int j = 0;
   20d54:	e03fa715 	stw	zero,-356(fp)
			while(prompt != 'x')
   20d58:	00002706 	br	20df8 <main+0x330>
			{
				//printf("%c", prompt);
				//strcat(messageReceived, prompt);
				int i = 0;
   20d5c:	e03fa815 	stw	zero,-352(fp)
				while(prompt != 'a')
   20d60:	00000b06 	br	20d90 <main+0x2c8>
				{
					messageReceived[i] = prompt;
   20d64:	e0fffd04 	addi	r3,fp,-12
   20d68:	e0bfa817 	ldw	r2,-352(fp)
   20d6c:	1885883a 	add	r2,r3,r2
   20d70:	e0ffa603 	ldbu	r3,-360(fp)
   20d74:	10c00005 	stb	r3,0(r2)
					i += 1;
   20d78:	e0bfa817 	ldw	r2,-352(fp)
   20d7c:	10800044 	addi	r2,r2,1
   20d80:	e0bfa815 	stw	r2,-352(fp)
					prompt = getc(fp); // Get a character from the UART.
   20d84:	e13faa17 	ldw	r4,-344(fp)
   20d88:	002acc80 	call	2acc8 <getc>
   20d8c:	e0bfa605 	stb	r2,-360(fp)
			while(prompt != 'x')
			{
				//printf("%c", prompt);
				//strcat(messageReceived, prompt);
				int i = 0;
				while(prompt != 'a')
   20d90:	e0bfa607 	ldb	r2,-360(fp)
   20d94:	10801858 	cmpnei	r2,r2,97
   20d98:	103ff21e 	bne	r2,zero,20d64 <main+0x29c>
				{
					messageReceived[i] = prompt;
					i += 1;
					prompt = getc(fp); // Get a character from the UART.
				}
				prompt = getc(fp);
   20d9c:	e13faa17 	ldw	r4,-344(fp)
   20da0:	002acc80 	call	2acc8 <getc>
   20da4:	e0bfa605 	stb	r2,-360(fp)
				messageReceived[i] = '\0';
   20da8:	e0fffd04 	addi	r3,fp,-12
   20dac:	e0bfa817 	ldw	r2,-352(fp)
   20db0:	1885883a 	add	r2,r3,r2
   20db4:	10000005 	stb	zero,0(r2)
				int value = atoi(messageReceived);
   20db8:	e0bffd04 	addi	r2,fp,-12
   20dbc:	1009883a 	mov	r4,r2
   20dc0:	00298080 	call	29808 <atoi>
   20dc4:	e0bfac15 	stw	r2,-336(fp)
				//printf("%d\n", value);
				datatofft[j] = value-100;
   20dc8:	e0bfac17 	ldw	r2,-336(fp)
   20dcc:	10ffe704 	addi	r3,r2,-100
   20dd0:	e0bfa717 	ldw	r2,-356(fp)
   20dd4:	1085883a 	add	r2,r2,r2
   20dd8:	1085883a 	add	r2,r2,r2
   20ddc:	e13fa504 	addi	r4,fp,-364
   20de0:	2085883a 	add	r2,r4,r2
   20de4:	10804804 	addi	r2,r2,288
   20de8:	10c00015 	stw	r3,0(r2)
				j+=1;
   20dec:	e0bfa717 	ldw	r2,-356(fp)
   20df0:	10800044 	addi	r2,r2,1
   20df4:	e0bfa715 	stw	r2,-356(fp)
			fwrite (msg2, strlen (msg2), 1, fp);//ready for next chunk of data

			char messageReceived[10] = "";
			prompt = getc(fp); // Get a character from the UART.
			int j = 0;
			while(prompt != 'x')
   20df8:	e0bfa607 	ldb	r2,-360(fp)
   20dfc:	10801e18 	cmpnei	r2,r2,120
   20e00:	103fd61e 	bne	r2,zero,20d5c <main+0x294>
//			    in[i].r = datatofft[i], in[i].i = 0;
//			SilentFft("Signal (complex)", in, out, 0);
//			for (i = 0; i < N; i++)
//				printf("%f", out[i].r);
//			printf("\n");
			for (i = 0; i < N; i++)
   20e04:	e03fa515 	stw	zero,-364(fp)
   20e08:	00000e06 	br	20e44 <main+0x37c>
				printf("%d, ", datatofft[i]);
   20e0c:	e0bfa517 	ldw	r2,-364(fp)
   20e10:	1085883a 	add	r2,r2,r2
   20e14:	1085883a 	add	r2,r2,r2
   20e18:	e0ffa504 	addi	r3,fp,-364
   20e1c:	1885883a 	add	r2,r3,r2
   20e20:	10804804 	addi	r2,r2,288
   20e24:	10800017 	ldw	r2,0(r2)
   20e28:	100b883a 	mov	r5,r2
   20e2c:	01000134 	movhi	r4,4
   20e30:	21201b04 	addi	r4,r4,-32660
   20e34:	002bad40 	call	2bad4 <printf>
//			    in[i].r = datatofft[i], in[i].i = 0;
//			SilentFft("Signal (complex)", in, out, 0);
//			for (i = 0; i < N; i++)
//				printf("%f", out[i].r);
//			printf("\n");
			for (i = 0; i < N; i++)
   20e38:	e0bfa517 	ldw	r2,-364(fp)
   20e3c:	10800044 	addi	r2,r2,1
   20e40:	e0bfa515 	stw	r2,-364(fp)
   20e44:	e0bfa517 	ldw	r2,-364(fp)
   20e48:	10800430 	cmpltui	r2,r2,16
   20e4c:	103fef1e 	bne	r2,zero,20e0c <main+0x344>
				printf("%d, ", datatofft[i]);
			printf("\n");
   20e50:	01000284 	movi	r4,10
   20e54:	002bb180 	call	2bb18 <putchar>
    char prompt = 0;
    fp = fopen ("/dev/uart_0", "r+"); //Open file for reading and writing
    int datatofft[16];
    if (fp)
    {
		while (prompt != 'v')
   20e58:	e0bfa607 	ldb	r2,-360(fp)
   20e5c:	10801d98 	cmpnei	r2,r2,118
   20e60:	103fac1e 	bne	r2,zero,20d14 <main+0x24c>
			for (i = 0; i < N; i++)
				printf("%d, ", datatofft[i]);
			printf("\n");

		}
		fprintf(fp, "Closing the UART file.\n");
   20e64:	e1ffaa17 	ldw	r7,-344(fp)
   20e68:	018005c4 	movi	r6,23
   20e6c:	01400044 	movi	r5,1
   20e70:	01000134 	movhi	r4,4
   20e74:	21201d04 	addi	r4,r4,-32652
   20e78:	002ac240 	call	2ac24 <fwrite>
		fclose (fp);
   20e7c:	e13faa17 	ldw	r4,-344(fp)
   20e80:	00299580 	call	29958 <fclose>





  return 0;
   20e84:	0005883a 	mov	r2,zero
}
   20e88:	e037883a 	mov	sp,fp
   20e8c:	dfc00117 	ldw	ra,4(sp)
   20e90:	df000017 	ldw	fp,0(sp)
   20e94:	dec00204 	addi	sp,sp,8
   20e98:	f800283a 	ret

00020e9c <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
   20e9c:	defff504 	addi	sp,sp,-44
   20ea0:	dfc00a15 	stw	ra,40(sp)
   20ea4:	df000915 	stw	fp,36(sp)
   20ea8:	dc000815 	stw	r16,32(sp)
   20eac:	df000904 	addi	fp,sp,36
   20eb0:	e13ffb15 	stw	r4,-20(fp)
   20eb4:	e17ffc15 	stw	r5,-16(fp)
   20eb8:	e1bffd15 	stw	r6,-12(fp)
   20ebc:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
   20ec0:	e0bffd17 	ldw	r2,-12(fp)
   20ec4:	10804204 	addi	r2,r2,264
   20ec8:	e0bff815 	stw	r2,-32(fp)
    kiss_fft_cpx t;
    Fout2 = Fout + m;
   20ecc:	e0bffe17 	ldw	r2,-8(fp)
   20ed0:	100490fa 	slli	r2,r2,3
   20ed4:	e0fffb17 	ldw	r3,-20(fp)
   20ed8:	1885883a 	add	r2,r3,r2
   20edc:	e0bff715 	stw	r2,-36(fp)
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
   20ee0:	e0bff717 	ldw	r2,-36(fp)
   20ee4:	10c00017 	ldw	r3,0(r2)
   20ee8:	e0bff817 	ldw	r2,-32(fp)
   20eec:	11000017 	ldw	r4,0(r2)
   20ef0:	200b883a 	mov	r5,r4
   20ef4:	1809883a 	mov	r4,r3
   20ef8:	00264740 	call	26474 <__mulsf3>
   20efc:	1007883a 	mov	r3,r2
   20f00:	1821883a 	mov	r16,r3
   20f04:	e0bff717 	ldw	r2,-36(fp)
   20f08:	10c00117 	ldw	r3,4(r2)
   20f0c:	e0bff817 	ldw	r2,-32(fp)
   20f10:	11000117 	ldw	r4,4(r2)
   20f14:	200b883a 	mov	r5,r4
   20f18:	1809883a 	mov	r4,r3
   20f1c:	00264740 	call	26474 <__mulsf3>
   20f20:	1007883a 	mov	r3,r2
   20f24:	1805883a 	mov	r2,r3
   20f28:	100b883a 	mov	r5,r2
   20f2c:	8009883a 	mov	r4,r16
   20f30:	00268700 	call	26870 <__subsf3>
   20f34:	1007883a 	mov	r3,r2
   20f38:	1805883a 	mov	r2,r3
   20f3c:	e0bff915 	stw	r2,-28(fp)
   20f40:	e0bff717 	ldw	r2,-36(fp)
   20f44:	10c00017 	ldw	r3,0(r2)
   20f48:	e0bff817 	ldw	r2,-32(fp)
   20f4c:	11000117 	ldw	r4,4(r2)
   20f50:	200b883a 	mov	r5,r4
   20f54:	1809883a 	mov	r4,r3
   20f58:	00264740 	call	26474 <__mulsf3>
   20f5c:	1007883a 	mov	r3,r2
   20f60:	1821883a 	mov	r16,r3
   20f64:	e0bff717 	ldw	r2,-36(fp)
   20f68:	10c00117 	ldw	r3,4(r2)
   20f6c:	e0bff817 	ldw	r2,-32(fp)
   20f70:	11000017 	ldw	r4,0(r2)
   20f74:	200b883a 	mov	r5,r4
   20f78:	1809883a 	mov	r4,r3
   20f7c:	00264740 	call	26474 <__mulsf3>
   20f80:	1007883a 	mov	r3,r2
   20f84:	1805883a 	mov	r2,r3
   20f88:	100b883a 	mov	r5,r2
   20f8c:	8009883a 	mov	r4,r16
   20f90:	0025b6c0 	call	25b6c <__addsf3>
   20f94:	1007883a 	mov	r3,r2
   20f98:	1805883a 	mov	r2,r3
   20f9c:	e0bffa15 	stw	r2,-24(fp)
        tw1 += fstride;
   20fa0:	e0bffc17 	ldw	r2,-16(fp)
   20fa4:	100490fa 	slli	r2,r2,3
   20fa8:	e0fff817 	ldw	r3,-32(fp)
   20fac:	1885883a 	add	r2,r3,r2
   20fb0:	e0bff815 	stw	r2,-32(fp)
        C_SUB( *Fout2 ,  *Fout , t );
   20fb4:	e0bffb17 	ldw	r2,-20(fp)
   20fb8:	10c00017 	ldw	r3,0(r2)
   20fbc:	e0bff917 	ldw	r2,-28(fp)
   20fc0:	100b883a 	mov	r5,r2
   20fc4:	1809883a 	mov	r4,r3
   20fc8:	00268700 	call	26870 <__subsf3>
   20fcc:	1009883a 	mov	r4,r2
   20fd0:	2007883a 	mov	r3,r4
   20fd4:	e0bff717 	ldw	r2,-36(fp)
   20fd8:	10c00015 	stw	r3,0(r2)
   20fdc:	e0bffb17 	ldw	r2,-20(fp)
   20fe0:	10c00117 	ldw	r3,4(r2)
   20fe4:	e0bffa17 	ldw	r2,-24(fp)
   20fe8:	100b883a 	mov	r5,r2
   20fec:	1809883a 	mov	r4,r3
   20ff0:	00268700 	call	26870 <__subsf3>
   20ff4:	1009883a 	mov	r4,r2
   20ff8:	2007883a 	mov	r3,r4
   20ffc:	e0bff717 	ldw	r2,-36(fp)
   21000:	10c00115 	stw	r3,4(r2)
        C_ADDTO( *Fout ,  t );
   21004:	e0bffb17 	ldw	r2,-20(fp)
   21008:	10c00017 	ldw	r3,0(r2)
   2100c:	e0bff917 	ldw	r2,-28(fp)
   21010:	100b883a 	mov	r5,r2
   21014:	1809883a 	mov	r4,r3
   21018:	0025b6c0 	call	25b6c <__addsf3>
   2101c:	1009883a 	mov	r4,r2
   21020:	2007883a 	mov	r3,r4
   21024:	e0bffb17 	ldw	r2,-20(fp)
   21028:	10c00015 	stw	r3,0(r2)
   2102c:	e0bffb17 	ldw	r2,-20(fp)
   21030:	10c00117 	ldw	r3,4(r2)
   21034:	e0bffa17 	ldw	r2,-24(fp)
   21038:	100b883a 	mov	r5,r2
   2103c:	1809883a 	mov	r4,r3
   21040:	0025b6c0 	call	25b6c <__addsf3>
   21044:	1009883a 	mov	r4,r2
   21048:	2007883a 	mov	r3,r4
   2104c:	e0bffb17 	ldw	r2,-20(fp)
   21050:	10c00115 	stw	r3,4(r2)
        ++Fout2;
   21054:	e0bff717 	ldw	r2,-36(fp)
   21058:	10800204 	addi	r2,r2,8
   2105c:	e0bff715 	stw	r2,-36(fp)
        ++Fout;
   21060:	e0bffb17 	ldw	r2,-20(fp)
   21064:	10800204 	addi	r2,r2,8
   21068:	e0bffb15 	stw	r2,-20(fp)
    }while (--m);
   2106c:	e0bffe17 	ldw	r2,-8(fp)
   21070:	10bfffc4 	addi	r2,r2,-1
   21074:	e0bffe15 	stw	r2,-8(fp)
   21078:	e0bffe17 	ldw	r2,-8(fp)
   2107c:	103f981e 	bne	r2,zero,20ee0 <kf_bfly2+0x44>
}
   21080:	0001883a 	nop
   21084:	e6ffff04 	addi	sp,fp,-4
   21088:	dfc00217 	ldw	ra,8(sp)
   2108c:	df000117 	ldw	fp,4(sp)
   21090:	dc000017 	ldw	r16,0(sp)
   21094:	dec00304 	addi	sp,sp,12
   21098:	f800283a 	ret

0002109c <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
   2109c:	deffe704 	addi	sp,sp,-100
   210a0:	dfc01815 	stw	ra,96(sp)
   210a4:	df001715 	stw	fp,92(sp)
   210a8:	dc001615 	stw	r16,88(sp)
   210ac:	df001704 	addi	fp,sp,92
   210b0:	e13ffb15 	stw	r4,-20(fp)
   210b4:	e17ffc15 	stw	r5,-16(fp)
   210b8:	e1bffd15 	stw	r6,-12(fp)
   210bc:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
   210c0:	e0bffe17 	ldw	r2,-8(fp)
   210c4:	e0bfec15 	stw	r2,-80(fp)
    const size_t m2=2*m;
   210c8:	e0bffe17 	ldw	r2,-8(fp)
   210cc:	1085883a 	add	r2,r2,r2
   210d0:	e0bfed15 	stw	r2,-76(fp)
    const size_t m3=3*m;
   210d4:	e0fffe17 	ldw	r3,-8(fp)
   210d8:	1805883a 	mov	r2,r3
   210dc:	1085883a 	add	r2,r2,r2
   210e0:	10c5883a 	add	r2,r2,r3
   210e4:	e0bfee15 	stw	r2,-72(fp)


    tw3 = tw2 = tw1 = st->twiddles;
   210e8:	e0bffd17 	ldw	r2,-12(fp)
   210ec:	10804204 	addi	r2,r2,264
   210f0:	e0bfe915 	stw	r2,-92(fp)
   210f4:	e0bfe917 	ldw	r2,-92(fp)
   210f8:	e0bfea15 	stw	r2,-88(fp)
   210fc:	e0bfea17 	ldw	r2,-88(fp)
   21100:	e0bfeb15 	stw	r2,-84(fp)

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
   21104:	e0bffe17 	ldw	r2,-8(fp)
   21108:	100490fa 	slli	r2,r2,3
   2110c:	e0fffb17 	ldw	r3,-20(fp)
   21110:	1885883a 	add	r2,r3,r2
   21114:	10c00017 	ldw	r3,0(r2)
   21118:	e0bfe917 	ldw	r2,-92(fp)
   2111c:	11000017 	ldw	r4,0(r2)
   21120:	200b883a 	mov	r5,r4
   21124:	1809883a 	mov	r4,r3
   21128:	00264740 	call	26474 <__mulsf3>
   2112c:	1007883a 	mov	r3,r2
   21130:	1821883a 	mov	r16,r3
   21134:	e0bffe17 	ldw	r2,-8(fp)
   21138:	100490fa 	slli	r2,r2,3
   2113c:	e0fffb17 	ldw	r3,-20(fp)
   21140:	1885883a 	add	r2,r3,r2
   21144:	10c00117 	ldw	r3,4(r2)
   21148:	e0bfe917 	ldw	r2,-92(fp)
   2114c:	11000117 	ldw	r4,4(r2)
   21150:	200b883a 	mov	r5,r4
   21154:	1809883a 	mov	r4,r3
   21158:	00264740 	call	26474 <__mulsf3>
   2115c:	1007883a 	mov	r3,r2
   21160:	1805883a 	mov	r2,r3
   21164:	100b883a 	mov	r5,r2
   21168:	8009883a 	mov	r4,r16
   2116c:	00268700 	call	26870 <__subsf3>
   21170:	1007883a 	mov	r3,r2
   21174:	1805883a 	mov	r2,r3
   21178:	e0bfef15 	stw	r2,-68(fp)
   2117c:	e0bffe17 	ldw	r2,-8(fp)
   21180:	100490fa 	slli	r2,r2,3
   21184:	e0fffb17 	ldw	r3,-20(fp)
   21188:	1885883a 	add	r2,r3,r2
   2118c:	10c00017 	ldw	r3,0(r2)
   21190:	e0bfe917 	ldw	r2,-92(fp)
   21194:	11000117 	ldw	r4,4(r2)
   21198:	200b883a 	mov	r5,r4
   2119c:	1809883a 	mov	r4,r3
   211a0:	00264740 	call	26474 <__mulsf3>
   211a4:	1007883a 	mov	r3,r2
   211a8:	1821883a 	mov	r16,r3
   211ac:	e0bffe17 	ldw	r2,-8(fp)
   211b0:	100490fa 	slli	r2,r2,3
   211b4:	e0fffb17 	ldw	r3,-20(fp)
   211b8:	1885883a 	add	r2,r3,r2
   211bc:	10c00117 	ldw	r3,4(r2)
   211c0:	e0bfe917 	ldw	r2,-92(fp)
   211c4:	11000017 	ldw	r4,0(r2)
   211c8:	200b883a 	mov	r5,r4
   211cc:	1809883a 	mov	r4,r3
   211d0:	00264740 	call	26474 <__mulsf3>
   211d4:	1007883a 	mov	r3,r2
   211d8:	1805883a 	mov	r2,r3
   211dc:	100b883a 	mov	r5,r2
   211e0:	8009883a 	mov	r4,r16
   211e4:	0025b6c0 	call	25b6c <__addsf3>
   211e8:	1007883a 	mov	r3,r2
   211ec:	1805883a 	mov	r2,r3
   211f0:	e0bff015 	stw	r2,-64(fp)
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   211f4:	e0bfed17 	ldw	r2,-76(fp)
   211f8:	100490fa 	slli	r2,r2,3
   211fc:	e0fffb17 	ldw	r3,-20(fp)
   21200:	1885883a 	add	r2,r3,r2
   21204:	10c00017 	ldw	r3,0(r2)
   21208:	e0bfea17 	ldw	r2,-88(fp)
   2120c:	11000017 	ldw	r4,0(r2)
   21210:	200b883a 	mov	r5,r4
   21214:	1809883a 	mov	r4,r3
   21218:	00264740 	call	26474 <__mulsf3>
   2121c:	1007883a 	mov	r3,r2
   21220:	1821883a 	mov	r16,r3
   21224:	e0bfed17 	ldw	r2,-76(fp)
   21228:	100490fa 	slli	r2,r2,3
   2122c:	e0fffb17 	ldw	r3,-20(fp)
   21230:	1885883a 	add	r2,r3,r2
   21234:	10c00117 	ldw	r3,4(r2)
   21238:	e0bfea17 	ldw	r2,-88(fp)
   2123c:	11000117 	ldw	r4,4(r2)
   21240:	200b883a 	mov	r5,r4
   21244:	1809883a 	mov	r4,r3
   21248:	00264740 	call	26474 <__mulsf3>
   2124c:	1007883a 	mov	r3,r2
   21250:	1805883a 	mov	r2,r3
   21254:	100b883a 	mov	r5,r2
   21258:	8009883a 	mov	r4,r16
   2125c:	00268700 	call	26870 <__subsf3>
   21260:	1007883a 	mov	r3,r2
   21264:	1805883a 	mov	r2,r3
   21268:	e0bff115 	stw	r2,-60(fp)
   2126c:	e0bfed17 	ldw	r2,-76(fp)
   21270:	100490fa 	slli	r2,r2,3
   21274:	e0fffb17 	ldw	r3,-20(fp)
   21278:	1885883a 	add	r2,r3,r2
   2127c:	10c00017 	ldw	r3,0(r2)
   21280:	e0bfea17 	ldw	r2,-88(fp)
   21284:	11000117 	ldw	r4,4(r2)
   21288:	200b883a 	mov	r5,r4
   2128c:	1809883a 	mov	r4,r3
   21290:	00264740 	call	26474 <__mulsf3>
   21294:	1007883a 	mov	r3,r2
   21298:	1821883a 	mov	r16,r3
   2129c:	e0bfed17 	ldw	r2,-76(fp)
   212a0:	100490fa 	slli	r2,r2,3
   212a4:	e0fffb17 	ldw	r3,-20(fp)
   212a8:	1885883a 	add	r2,r3,r2
   212ac:	10c00117 	ldw	r3,4(r2)
   212b0:	e0bfea17 	ldw	r2,-88(fp)
   212b4:	11000017 	ldw	r4,0(r2)
   212b8:	200b883a 	mov	r5,r4
   212bc:	1809883a 	mov	r4,r3
   212c0:	00264740 	call	26474 <__mulsf3>
   212c4:	1007883a 	mov	r3,r2
   212c8:	1805883a 	mov	r2,r3
   212cc:	100b883a 	mov	r5,r2
   212d0:	8009883a 	mov	r4,r16
   212d4:	0025b6c0 	call	25b6c <__addsf3>
   212d8:	1007883a 	mov	r3,r2
   212dc:	1805883a 	mov	r2,r3
   212e0:	e0bff215 	stw	r2,-56(fp)
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   212e4:	e0bfee17 	ldw	r2,-72(fp)
   212e8:	100490fa 	slli	r2,r2,3
   212ec:	e0fffb17 	ldw	r3,-20(fp)
   212f0:	1885883a 	add	r2,r3,r2
   212f4:	10c00017 	ldw	r3,0(r2)
   212f8:	e0bfeb17 	ldw	r2,-84(fp)
   212fc:	11000017 	ldw	r4,0(r2)
   21300:	200b883a 	mov	r5,r4
   21304:	1809883a 	mov	r4,r3
   21308:	00264740 	call	26474 <__mulsf3>
   2130c:	1007883a 	mov	r3,r2
   21310:	1821883a 	mov	r16,r3
   21314:	e0bfee17 	ldw	r2,-72(fp)
   21318:	100490fa 	slli	r2,r2,3
   2131c:	e0fffb17 	ldw	r3,-20(fp)
   21320:	1885883a 	add	r2,r3,r2
   21324:	10c00117 	ldw	r3,4(r2)
   21328:	e0bfeb17 	ldw	r2,-84(fp)
   2132c:	11000117 	ldw	r4,4(r2)
   21330:	200b883a 	mov	r5,r4
   21334:	1809883a 	mov	r4,r3
   21338:	00264740 	call	26474 <__mulsf3>
   2133c:	1007883a 	mov	r3,r2
   21340:	1805883a 	mov	r2,r3
   21344:	100b883a 	mov	r5,r2
   21348:	8009883a 	mov	r4,r16
   2134c:	00268700 	call	26870 <__subsf3>
   21350:	1007883a 	mov	r3,r2
   21354:	1805883a 	mov	r2,r3
   21358:	e0bff315 	stw	r2,-52(fp)
   2135c:	e0bfee17 	ldw	r2,-72(fp)
   21360:	100490fa 	slli	r2,r2,3
   21364:	e0fffb17 	ldw	r3,-20(fp)
   21368:	1885883a 	add	r2,r3,r2
   2136c:	10c00017 	ldw	r3,0(r2)
   21370:	e0bfeb17 	ldw	r2,-84(fp)
   21374:	11000117 	ldw	r4,4(r2)
   21378:	200b883a 	mov	r5,r4
   2137c:	1809883a 	mov	r4,r3
   21380:	00264740 	call	26474 <__mulsf3>
   21384:	1007883a 	mov	r3,r2
   21388:	1821883a 	mov	r16,r3
   2138c:	e0bfee17 	ldw	r2,-72(fp)
   21390:	100490fa 	slli	r2,r2,3
   21394:	e0fffb17 	ldw	r3,-20(fp)
   21398:	1885883a 	add	r2,r3,r2
   2139c:	10c00117 	ldw	r3,4(r2)
   213a0:	e0bfeb17 	ldw	r2,-84(fp)
   213a4:	11000017 	ldw	r4,0(r2)
   213a8:	200b883a 	mov	r5,r4
   213ac:	1809883a 	mov	r4,r3
   213b0:	00264740 	call	26474 <__mulsf3>
   213b4:	1007883a 	mov	r3,r2
   213b8:	1805883a 	mov	r2,r3
   213bc:	100b883a 	mov	r5,r2
   213c0:	8009883a 	mov	r4,r16
   213c4:	0025b6c0 	call	25b6c <__addsf3>
   213c8:	1007883a 	mov	r3,r2
   213cc:	1805883a 	mov	r2,r3
   213d0:	e0bff415 	stw	r2,-48(fp)

        C_SUB( scratch[5] , *Fout, scratch[1] );
   213d4:	e0bffb17 	ldw	r2,-20(fp)
   213d8:	10c00017 	ldw	r3,0(r2)
   213dc:	e0bff117 	ldw	r2,-60(fp)
   213e0:	100b883a 	mov	r5,r2
   213e4:	1809883a 	mov	r4,r3
   213e8:	00268700 	call	26870 <__subsf3>
   213ec:	1007883a 	mov	r3,r2
   213f0:	1805883a 	mov	r2,r3
   213f4:	e0bff915 	stw	r2,-28(fp)
   213f8:	e0bffb17 	ldw	r2,-20(fp)
   213fc:	10c00117 	ldw	r3,4(r2)
   21400:	e0bff217 	ldw	r2,-56(fp)
   21404:	100b883a 	mov	r5,r2
   21408:	1809883a 	mov	r4,r3
   2140c:	00268700 	call	26870 <__subsf3>
   21410:	1007883a 	mov	r3,r2
   21414:	1805883a 	mov	r2,r3
   21418:	e0bffa15 	stw	r2,-24(fp)
        C_ADDTO(*Fout, scratch[1]);
   2141c:	e0bffb17 	ldw	r2,-20(fp)
   21420:	10c00017 	ldw	r3,0(r2)
   21424:	e0bff117 	ldw	r2,-60(fp)
   21428:	100b883a 	mov	r5,r2
   2142c:	1809883a 	mov	r4,r3
   21430:	0025b6c0 	call	25b6c <__addsf3>
   21434:	1009883a 	mov	r4,r2
   21438:	2007883a 	mov	r3,r4
   2143c:	e0bffb17 	ldw	r2,-20(fp)
   21440:	10c00015 	stw	r3,0(r2)
   21444:	e0bffb17 	ldw	r2,-20(fp)
   21448:	10c00117 	ldw	r3,4(r2)
   2144c:	e0bff217 	ldw	r2,-56(fp)
   21450:	100b883a 	mov	r5,r2
   21454:	1809883a 	mov	r4,r3
   21458:	0025b6c0 	call	25b6c <__addsf3>
   2145c:	1009883a 	mov	r4,r2
   21460:	2007883a 	mov	r3,r4
   21464:	e0bffb17 	ldw	r2,-20(fp)
   21468:	10c00115 	stw	r3,4(r2)
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   2146c:	e0bfef17 	ldw	r2,-68(fp)
   21470:	e0fff317 	ldw	r3,-52(fp)
   21474:	180b883a 	mov	r5,r3
   21478:	1009883a 	mov	r4,r2
   2147c:	0025b6c0 	call	25b6c <__addsf3>
   21480:	1007883a 	mov	r3,r2
   21484:	1805883a 	mov	r2,r3
   21488:	e0bff515 	stw	r2,-44(fp)
   2148c:	e0bff017 	ldw	r2,-64(fp)
   21490:	e0fff417 	ldw	r3,-48(fp)
   21494:	180b883a 	mov	r5,r3
   21498:	1009883a 	mov	r4,r2
   2149c:	0025b6c0 	call	25b6c <__addsf3>
   214a0:	1007883a 	mov	r3,r2
   214a4:	1805883a 	mov	r2,r3
   214a8:	e0bff615 	stw	r2,-40(fp)
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   214ac:	e0bfef17 	ldw	r2,-68(fp)
   214b0:	e0fff317 	ldw	r3,-52(fp)
   214b4:	180b883a 	mov	r5,r3
   214b8:	1009883a 	mov	r4,r2
   214bc:	00268700 	call	26870 <__subsf3>
   214c0:	1007883a 	mov	r3,r2
   214c4:	1805883a 	mov	r2,r3
   214c8:	e0bff715 	stw	r2,-36(fp)
   214cc:	e0bff017 	ldw	r2,-64(fp)
   214d0:	e0fff417 	ldw	r3,-48(fp)
   214d4:	180b883a 	mov	r5,r3
   214d8:	1009883a 	mov	r4,r2
   214dc:	00268700 	call	26870 <__subsf3>
   214e0:	1007883a 	mov	r3,r2
   214e4:	1805883a 	mov	r2,r3
   214e8:	e0bff815 	stw	r2,-32(fp)
        C_SUB( Fout[m2], *Fout, scratch[3] );
   214ec:	e0bfed17 	ldw	r2,-76(fp)
   214f0:	100490fa 	slli	r2,r2,3
   214f4:	e0fffb17 	ldw	r3,-20(fp)
   214f8:	18a1883a 	add	r16,r3,r2
   214fc:	e0bffb17 	ldw	r2,-20(fp)
   21500:	10c00017 	ldw	r3,0(r2)
   21504:	e0bff517 	ldw	r2,-44(fp)
   21508:	100b883a 	mov	r5,r2
   2150c:	1809883a 	mov	r4,r3
   21510:	00268700 	call	26870 <__subsf3>
   21514:	1007883a 	mov	r3,r2
   21518:	1805883a 	mov	r2,r3
   2151c:	80800015 	stw	r2,0(r16)
   21520:	e0bfed17 	ldw	r2,-76(fp)
   21524:	100490fa 	slli	r2,r2,3
   21528:	e0fffb17 	ldw	r3,-20(fp)
   2152c:	18a1883a 	add	r16,r3,r2
   21530:	e0bffb17 	ldw	r2,-20(fp)
   21534:	10c00117 	ldw	r3,4(r2)
   21538:	e0bff617 	ldw	r2,-40(fp)
   2153c:	100b883a 	mov	r5,r2
   21540:	1809883a 	mov	r4,r3
   21544:	00268700 	call	26870 <__subsf3>
   21548:	1007883a 	mov	r3,r2
   2154c:	1805883a 	mov	r2,r3
   21550:	80800115 	stw	r2,4(r16)
        tw1 += fstride;
   21554:	e0bffc17 	ldw	r2,-16(fp)
   21558:	100490fa 	slli	r2,r2,3
   2155c:	e0ffe917 	ldw	r3,-92(fp)
   21560:	1885883a 	add	r2,r3,r2
   21564:	e0bfe915 	stw	r2,-92(fp)
        tw2 += fstride*2;
   21568:	e0bffc17 	ldw	r2,-16(fp)
   2156c:	1004913a 	slli	r2,r2,4
   21570:	e0ffea17 	ldw	r3,-88(fp)
   21574:	1885883a 	add	r2,r3,r2
   21578:	e0bfea15 	stw	r2,-88(fp)
        tw3 += fstride*3;
   2157c:	e0bffc17 	ldw	r2,-16(fp)
   21580:	10800624 	muli	r2,r2,24
   21584:	e0ffeb17 	ldw	r3,-84(fp)
   21588:	1885883a 	add	r2,r3,r2
   2158c:	e0bfeb15 	stw	r2,-84(fp)
        C_ADDTO( *Fout , scratch[3] );
   21590:	e0bffb17 	ldw	r2,-20(fp)
   21594:	10c00017 	ldw	r3,0(r2)
   21598:	e0bff517 	ldw	r2,-44(fp)
   2159c:	100b883a 	mov	r5,r2
   215a0:	1809883a 	mov	r4,r3
   215a4:	0025b6c0 	call	25b6c <__addsf3>
   215a8:	1009883a 	mov	r4,r2
   215ac:	2007883a 	mov	r3,r4
   215b0:	e0bffb17 	ldw	r2,-20(fp)
   215b4:	10c00015 	stw	r3,0(r2)
   215b8:	e0bffb17 	ldw	r2,-20(fp)
   215bc:	10c00117 	ldw	r3,4(r2)
   215c0:	e0bff617 	ldw	r2,-40(fp)
   215c4:	100b883a 	mov	r5,r2
   215c8:	1809883a 	mov	r4,r3
   215cc:	0025b6c0 	call	25b6c <__addsf3>
   215d0:	1009883a 	mov	r4,r2
   215d4:	2007883a 	mov	r3,r4
   215d8:	e0bffb17 	ldw	r2,-20(fp)
   215dc:	10c00115 	stw	r3,4(r2)

        if(st->inverse) {
   215e0:	e0bffd17 	ldw	r2,-12(fp)
   215e4:	10800117 	ldw	r2,4(r2)
   215e8:	10003126 	beq	r2,zero,216b0 <kf_bfly4+0x614>
            Fout[m].r = scratch[5].r - scratch[4].i;
   215ec:	e0bffe17 	ldw	r2,-8(fp)
   215f0:	100490fa 	slli	r2,r2,3
   215f4:	e0fffb17 	ldw	r3,-20(fp)
   215f8:	18a1883a 	add	r16,r3,r2
   215fc:	e0bff917 	ldw	r2,-28(fp)
   21600:	e0fff817 	ldw	r3,-32(fp)
   21604:	180b883a 	mov	r5,r3
   21608:	1009883a 	mov	r4,r2
   2160c:	00268700 	call	26870 <__subsf3>
   21610:	1007883a 	mov	r3,r2
   21614:	1805883a 	mov	r2,r3
   21618:	80800015 	stw	r2,0(r16)
            Fout[m].i = scratch[5].i + scratch[4].r;
   2161c:	e0bffe17 	ldw	r2,-8(fp)
   21620:	100490fa 	slli	r2,r2,3
   21624:	e0fffb17 	ldw	r3,-20(fp)
   21628:	18a1883a 	add	r16,r3,r2
   2162c:	e0bffa17 	ldw	r2,-24(fp)
   21630:	e0fff717 	ldw	r3,-36(fp)
   21634:	180b883a 	mov	r5,r3
   21638:	1009883a 	mov	r4,r2
   2163c:	0025b6c0 	call	25b6c <__addsf3>
   21640:	1007883a 	mov	r3,r2
   21644:	1805883a 	mov	r2,r3
   21648:	80800115 	stw	r2,4(r16)
            Fout[m3].r = scratch[5].r + scratch[4].i;
   2164c:	e0bfee17 	ldw	r2,-72(fp)
   21650:	100490fa 	slli	r2,r2,3
   21654:	e0fffb17 	ldw	r3,-20(fp)
   21658:	18a1883a 	add	r16,r3,r2
   2165c:	e0bff917 	ldw	r2,-28(fp)
   21660:	e0fff817 	ldw	r3,-32(fp)
   21664:	180b883a 	mov	r5,r3
   21668:	1009883a 	mov	r4,r2
   2166c:	0025b6c0 	call	25b6c <__addsf3>
   21670:	1007883a 	mov	r3,r2
   21674:	1805883a 	mov	r2,r3
   21678:	80800015 	stw	r2,0(r16)
            Fout[m3].i = scratch[5].i - scratch[4].r;
   2167c:	e0bfee17 	ldw	r2,-72(fp)
   21680:	100490fa 	slli	r2,r2,3
   21684:	e0fffb17 	ldw	r3,-20(fp)
   21688:	18a1883a 	add	r16,r3,r2
   2168c:	e0bffa17 	ldw	r2,-24(fp)
   21690:	e0fff717 	ldw	r3,-36(fp)
   21694:	180b883a 	mov	r5,r3
   21698:	1009883a 	mov	r4,r2
   2169c:	00268700 	call	26870 <__subsf3>
   216a0:	1007883a 	mov	r3,r2
   216a4:	1805883a 	mov	r2,r3
   216a8:	80800115 	stw	r2,4(r16)
   216ac:	00003006 	br	21770 <kf_bfly4+0x6d4>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
   216b0:	e0bffe17 	ldw	r2,-8(fp)
   216b4:	100490fa 	slli	r2,r2,3
   216b8:	e0fffb17 	ldw	r3,-20(fp)
   216bc:	18a1883a 	add	r16,r3,r2
   216c0:	e0bff917 	ldw	r2,-28(fp)
   216c4:	e0fff817 	ldw	r3,-32(fp)
   216c8:	180b883a 	mov	r5,r3
   216cc:	1009883a 	mov	r4,r2
   216d0:	0025b6c0 	call	25b6c <__addsf3>
   216d4:	1007883a 	mov	r3,r2
   216d8:	1805883a 	mov	r2,r3
   216dc:	80800015 	stw	r2,0(r16)
            Fout[m].i = scratch[5].i - scratch[4].r;
   216e0:	e0bffe17 	ldw	r2,-8(fp)
   216e4:	100490fa 	slli	r2,r2,3
   216e8:	e0fffb17 	ldw	r3,-20(fp)
   216ec:	18a1883a 	add	r16,r3,r2
   216f0:	e0bffa17 	ldw	r2,-24(fp)
   216f4:	e0fff717 	ldw	r3,-36(fp)
   216f8:	180b883a 	mov	r5,r3
   216fc:	1009883a 	mov	r4,r2
   21700:	00268700 	call	26870 <__subsf3>
   21704:	1007883a 	mov	r3,r2
   21708:	1805883a 	mov	r2,r3
   2170c:	80800115 	stw	r2,4(r16)
            Fout[m3].r = scratch[5].r - scratch[4].i;
   21710:	e0bfee17 	ldw	r2,-72(fp)
   21714:	100490fa 	slli	r2,r2,3
   21718:	e0fffb17 	ldw	r3,-20(fp)
   2171c:	18a1883a 	add	r16,r3,r2
   21720:	e0bff917 	ldw	r2,-28(fp)
   21724:	e0fff817 	ldw	r3,-32(fp)
   21728:	180b883a 	mov	r5,r3
   2172c:	1009883a 	mov	r4,r2
   21730:	00268700 	call	26870 <__subsf3>
   21734:	1007883a 	mov	r3,r2
   21738:	1805883a 	mov	r2,r3
   2173c:	80800015 	stw	r2,0(r16)
            Fout[m3].i = scratch[5].i + scratch[4].r;
   21740:	e0bfee17 	ldw	r2,-72(fp)
   21744:	100490fa 	slli	r2,r2,3
   21748:	e0fffb17 	ldw	r3,-20(fp)
   2174c:	18a1883a 	add	r16,r3,r2
   21750:	e0bffa17 	ldw	r2,-24(fp)
   21754:	e0fff717 	ldw	r3,-36(fp)
   21758:	180b883a 	mov	r5,r3
   2175c:	1009883a 	mov	r4,r2
   21760:	0025b6c0 	call	25b6c <__addsf3>
   21764:	1007883a 	mov	r3,r2
   21768:	1805883a 	mov	r2,r3
   2176c:	80800115 	stw	r2,4(r16)
        }
        ++Fout;
   21770:	e0bffb17 	ldw	r2,-20(fp)
   21774:	10800204 	addi	r2,r2,8
   21778:	e0bffb15 	stw	r2,-20(fp)
    }while(--k);
   2177c:	e0bfec17 	ldw	r2,-80(fp)
   21780:	10bfffc4 	addi	r2,r2,-1
   21784:	e0bfec15 	stw	r2,-80(fp)
   21788:	e0bfec17 	ldw	r2,-80(fp)
   2178c:	103e5d1e 	bne	r2,zero,21104 <kf_bfly4+0x68>
}
   21790:	0001883a 	nop
   21794:	e6ffff04 	addi	sp,fp,-4
   21798:	dfc00217 	ldw	ra,8(sp)
   2179c:	df000117 	ldw	fp,4(sp)
   217a0:	dc000017 	ldw	r16,0(sp)
   217a4:	dec00304 	addi	sp,sp,12
   217a8:	f800283a 	ret

000217ac <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
   217ac:	deffe704 	addi	sp,sp,-100
   217b0:	dfc01815 	stw	ra,96(sp)
   217b4:	df001715 	stw	fp,92(sp)
   217b8:	dc801615 	stw	r18,88(sp)
   217bc:	dc401515 	stw	r17,84(sp)
   217c0:	dc001415 	stw	r16,80(sp)
   217c4:	df001704 	addi	fp,sp,92
   217c8:	e13ff915 	stw	r4,-28(fp)
   217cc:	e17ffa15 	stw	r5,-24(fp)
   217d0:	e1bffb15 	stw	r6,-20(fp)
   217d4:	e1fffc15 	stw	r7,-16(fp)
     size_t k=m;
   217d8:	e0bffc17 	ldw	r2,-16(fp)
   217dc:	e0bfe915 	stw	r2,-92(fp)
     const size_t m2 = 2*m;
   217e0:	e0bffc17 	ldw	r2,-16(fp)
   217e4:	1085883a 	add	r2,r2,r2
   217e8:	e0bfec15 	stw	r2,-80(fp)
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
   217ec:	e0fffa17 	ldw	r3,-24(fp)
   217f0:	e0bffc17 	ldw	r2,-16(fp)
   217f4:	1885383a 	mul	r2,r3,r2
   217f8:	e0fffb17 	ldw	r3,-20(fp)
   217fc:	10800844 	addi	r2,r2,33
   21800:	100490fa 	slli	r2,r2,3
   21804:	1885883a 	add	r2,r3,r2
   21808:	10c00017 	ldw	r3,0(r2)
   2180c:	e0fff715 	stw	r3,-36(fp)
   21810:	10800117 	ldw	r2,4(r2)
   21814:	e0bff815 	stw	r2,-32(fp)

     tw1=tw2=st->twiddles;
   21818:	e0bffb17 	ldw	r2,-20(fp)
   2181c:	10804204 	addi	r2,r2,264
   21820:	e0bfeb15 	stw	r2,-84(fp)
   21824:	e0bfeb17 	ldw	r2,-84(fp)
   21828:	e0bfea15 	stw	r2,-88(fp)

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
   2182c:	e0bffc17 	ldw	r2,-16(fp)
   21830:	100490fa 	slli	r2,r2,3
   21834:	e0fff917 	ldw	r3,-28(fp)
   21838:	1885883a 	add	r2,r3,r2
   2183c:	10c00017 	ldw	r3,0(r2)
   21840:	e0bfea17 	ldw	r2,-88(fp)
   21844:	11000017 	ldw	r4,0(r2)
   21848:	200b883a 	mov	r5,r4
   2184c:	1809883a 	mov	r4,r3
   21850:	00264740 	call	26474 <__mulsf3>
   21854:	1007883a 	mov	r3,r2
   21858:	1821883a 	mov	r16,r3
   2185c:	e0bffc17 	ldw	r2,-16(fp)
   21860:	100490fa 	slli	r2,r2,3
   21864:	e0fff917 	ldw	r3,-28(fp)
   21868:	1885883a 	add	r2,r3,r2
   2186c:	10c00117 	ldw	r3,4(r2)
   21870:	e0bfea17 	ldw	r2,-88(fp)
   21874:	11000117 	ldw	r4,4(r2)
   21878:	200b883a 	mov	r5,r4
   2187c:	1809883a 	mov	r4,r3
   21880:	00264740 	call	26474 <__mulsf3>
   21884:	1007883a 	mov	r3,r2
   21888:	1805883a 	mov	r2,r3
   2188c:	100b883a 	mov	r5,r2
   21890:	8009883a 	mov	r4,r16
   21894:	00268700 	call	26870 <__subsf3>
   21898:	1007883a 	mov	r3,r2
   2189c:	1805883a 	mov	r2,r3
   218a0:	e0bfef15 	stw	r2,-68(fp)
   218a4:	e0bffc17 	ldw	r2,-16(fp)
   218a8:	100490fa 	slli	r2,r2,3
   218ac:	e0fff917 	ldw	r3,-28(fp)
   218b0:	1885883a 	add	r2,r3,r2
   218b4:	10c00017 	ldw	r3,0(r2)
   218b8:	e0bfea17 	ldw	r2,-88(fp)
   218bc:	11000117 	ldw	r4,4(r2)
   218c0:	200b883a 	mov	r5,r4
   218c4:	1809883a 	mov	r4,r3
   218c8:	00264740 	call	26474 <__mulsf3>
   218cc:	1007883a 	mov	r3,r2
   218d0:	1821883a 	mov	r16,r3
   218d4:	e0bffc17 	ldw	r2,-16(fp)
   218d8:	100490fa 	slli	r2,r2,3
   218dc:	e0fff917 	ldw	r3,-28(fp)
   218e0:	1885883a 	add	r2,r3,r2
   218e4:	10c00117 	ldw	r3,4(r2)
   218e8:	e0bfea17 	ldw	r2,-88(fp)
   218ec:	11000017 	ldw	r4,0(r2)
   218f0:	200b883a 	mov	r5,r4
   218f4:	1809883a 	mov	r4,r3
   218f8:	00264740 	call	26474 <__mulsf3>
   218fc:	1007883a 	mov	r3,r2
   21900:	1805883a 	mov	r2,r3
   21904:	100b883a 	mov	r5,r2
   21908:	8009883a 	mov	r4,r16
   2190c:	0025b6c0 	call	25b6c <__addsf3>
   21910:	1007883a 	mov	r3,r2
   21914:	1805883a 	mov	r2,r3
   21918:	e0bff015 	stw	r2,-64(fp)
         C_MUL(scratch[2],Fout[m2] , *tw2);
   2191c:	e0bfec17 	ldw	r2,-80(fp)
   21920:	100490fa 	slli	r2,r2,3
   21924:	e0fff917 	ldw	r3,-28(fp)
   21928:	1885883a 	add	r2,r3,r2
   2192c:	10c00017 	ldw	r3,0(r2)
   21930:	e0bfeb17 	ldw	r2,-84(fp)
   21934:	11000017 	ldw	r4,0(r2)
   21938:	200b883a 	mov	r5,r4
   2193c:	1809883a 	mov	r4,r3
   21940:	00264740 	call	26474 <__mulsf3>
   21944:	1007883a 	mov	r3,r2
   21948:	1821883a 	mov	r16,r3
   2194c:	e0bfec17 	ldw	r2,-80(fp)
   21950:	100490fa 	slli	r2,r2,3
   21954:	e0fff917 	ldw	r3,-28(fp)
   21958:	1885883a 	add	r2,r3,r2
   2195c:	10c00117 	ldw	r3,4(r2)
   21960:	e0bfeb17 	ldw	r2,-84(fp)
   21964:	11000117 	ldw	r4,4(r2)
   21968:	200b883a 	mov	r5,r4
   2196c:	1809883a 	mov	r4,r3
   21970:	00264740 	call	26474 <__mulsf3>
   21974:	1007883a 	mov	r3,r2
   21978:	1805883a 	mov	r2,r3
   2197c:	100b883a 	mov	r5,r2
   21980:	8009883a 	mov	r4,r16
   21984:	00268700 	call	26870 <__subsf3>
   21988:	1007883a 	mov	r3,r2
   2198c:	1805883a 	mov	r2,r3
   21990:	e0bff115 	stw	r2,-60(fp)
   21994:	e0bfec17 	ldw	r2,-80(fp)
   21998:	100490fa 	slli	r2,r2,3
   2199c:	e0fff917 	ldw	r3,-28(fp)
   219a0:	1885883a 	add	r2,r3,r2
   219a4:	10c00017 	ldw	r3,0(r2)
   219a8:	e0bfeb17 	ldw	r2,-84(fp)
   219ac:	11000117 	ldw	r4,4(r2)
   219b0:	200b883a 	mov	r5,r4
   219b4:	1809883a 	mov	r4,r3
   219b8:	00264740 	call	26474 <__mulsf3>
   219bc:	1007883a 	mov	r3,r2
   219c0:	1821883a 	mov	r16,r3
   219c4:	e0bfec17 	ldw	r2,-80(fp)
   219c8:	100490fa 	slli	r2,r2,3
   219cc:	e0fff917 	ldw	r3,-28(fp)
   219d0:	1885883a 	add	r2,r3,r2
   219d4:	10c00117 	ldw	r3,4(r2)
   219d8:	e0bfeb17 	ldw	r2,-84(fp)
   219dc:	11000017 	ldw	r4,0(r2)
   219e0:	200b883a 	mov	r5,r4
   219e4:	1809883a 	mov	r4,r3
   219e8:	00264740 	call	26474 <__mulsf3>
   219ec:	1007883a 	mov	r3,r2
   219f0:	1805883a 	mov	r2,r3
   219f4:	100b883a 	mov	r5,r2
   219f8:	8009883a 	mov	r4,r16
   219fc:	0025b6c0 	call	25b6c <__addsf3>
   21a00:	1007883a 	mov	r3,r2
   21a04:	1805883a 	mov	r2,r3
   21a08:	e0bff215 	stw	r2,-56(fp)

         C_ADD(scratch[3],scratch[1],scratch[2]);
   21a0c:	e0bfef17 	ldw	r2,-68(fp)
   21a10:	e0fff117 	ldw	r3,-60(fp)
   21a14:	180b883a 	mov	r5,r3
   21a18:	1009883a 	mov	r4,r2
   21a1c:	0025b6c0 	call	25b6c <__addsf3>
   21a20:	1007883a 	mov	r3,r2
   21a24:	1805883a 	mov	r2,r3
   21a28:	e0bff315 	stw	r2,-52(fp)
   21a2c:	e0bff017 	ldw	r2,-64(fp)
   21a30:	e0fff217 	ldw	r3,-56(fp)
   21a34:	180b883a 	mov	r5,r3
   21a38:	1009883a 	mov	r4,r2
   21a3c:	0025b6c0 	call	25b6c <__addsf3>
   21a40:	1007883a 	mov	r3,r2
   21a44:	1805883a 	mov	r2,r3
   21a48:	e0bff415 	stw	r2,-48(fp)
         C_SUB(scratch[0],scratch[1],scratch[2]);
   21a4c:	e0bfef17 	ldw	r2,-68(fp)
   21a50:	e0fff117 	ldw	r3,-60(fp)
   21a54:	180b883a 	mov	r5,r3
   21a58:	1009883a 	mov	r4,r2
   21a5c:	00268700 	call	26870 <__subsf3>
   21a60:	1007883a 	mov	r3,r2
   21a64:	1805883a 	mov	r2,r3
   21a68:	e0bfed15 	stw	r2,-76(fp)
   21a6c:	e0bff017 	ldw	r2,-64(fp)
   21a70:	e0fff217 	ldw	r3,-56(fp)
   21a74:	180b883a 	mov	r5,r3
   21a78:	1009883a 	mov	r4,r2
   21a7c:	00268700 	call	26870 <__subsf3>
   21a80:	1007883a 	mov	r3,r2
   21a84:	1805883a 	mov	r2,r3
   21a88:	e0bfee15 	stw	r2,-72(fp)
         tw1 += fstride;
   21a8c:	e0bffa17 	ldw	r2,-24(fp)
   21a90:	100490fa 	slli	r2,r2,3
   21a94:	e0ffea17 	ldw	r3,-88(fp)
   21a98:	1885883a 	add	r2,r3,r2
   21a9c:	e0bfea15 	stw	r2,-88(fp)
         tw2 += fstride*2;
   21aa0:	e0bffa17 	ldw	r2,-24(fp)
   21aa4:	1004913a 	slli	r2,r2,4
   21aa8:	e0ffeb17 	ldw	r3,-84(fp)
   21aac:	1885883a 	add	r2,r3,r2
   21ab0:	e0bfeb15 	stw	r2,-84(fp)

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   21ab4:	e0bffc17 	ldw	r2,-16(fp)
   21ab8:	100490fa 	slli	r2,r2,3
   21abc:	e0fff917 	ldw	r3,-28(fp)
   21ac0:	18a5883a 	add	r18,r3,r2
   21ac4:	e0bff917 	ldw	r2,-28(fp)
   21ac8:	10c00017 	ldw	r3,0(r2)
   21acc:	1809883a 	mov	r4,r3
   21ad0:	00294ec0 	call	294ec <__extendsfdf2>
   21ad4:	1021883a 	mov	r16,r2
   21ad8:	1823883a 	mov	r17,r3
   21adc:	e0bff317 	ldw	r2,-52(fp)
   21ae0:	1009883a 	mov	r4,r2
   21ae4:	00294ec0 	call	294ec <__extendsfdf2>
   21ae8:	1011883a 	mov	r8,r2
   21aec:	1813883a 	mov	r9,r3
   21af0:	000d883a 	mov	r6,zero
   21af4:	01cff834 	movhi	r7,16352
   21af8:	4009883a 	mov	r4,r8
   21afc:	480b883a 	mov	r5,r9
   21b00:	00282d40 	call	282d4 <__muldf3>
   21b04:	1009883a 	mov	r4,r2
   21b08:	180b883a 	mov	r5,r3
   21b0c:	2005883a 	mov	r2,r4
   21b10:	2807883a 	mov	r3,r5
   21b14:	100d883a 	mov	r6,r2
   21b18:	180f883a 	mov	r7,r3
   21b1c:	8009883a 	mov	r4,r16
   21b20:	880b883a 	mov	r5,r17
   21b24:	00289ec0 	call	289ec <__subdf3>
   21b28:	1009883a 	mov	r4,r2
   21b2c:	180b883a 	mov	r5,r3
   21b30:	2005883a 	mov	r2,r4
   21b34:	2807883a 	mov	r3,r5
   21b38:	1009883a 	mov	r4,r2
   21b3c:	180b883a 	mov	r5,r3
   21b40:	00295fc0 	call	295fc <__truncdfsf2>
   21b44:	1007883a 	mov	r3,r2
   21b48:	90c00015 	stw	r3,0(r18)
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
   21b4c:	e0bffc17 	ldw	r2,-16(fp)
   21b50:	100490fa 	slli	r2,r2,3
   21b54:	e0fff917 	ldw	r3,-28(fp)
   21b58:	18a5883a 	add	r18,r3,r2
   21b5c:	e0bff917 	ldw	r2,-28(fp)
   21b60:	10c00117 	ldw	r3,4(r2)
   21b64:	1809883a 	mov	r4,r3
   21b68:	00294ec0 	call	294ec <__extendsfdf2>
   21b6c:	1021883a 	mov	r16,r2
   21b70:	1823883a 	mov	r17,r3
   21b74:	e0bff417 	ldw	r2,-48(fp)
   21b78:	1009883a 	mov	r4,r2
   21b7c:	00294ec0 	call	294ec <__extendsfdf2>
   21b80:	1011883a 	mov	r8,r2
   21b84:	1813883a 	mov	r9,r3
   21b88:	000d883a 	mov	r6,zero
   21b8c:	01cff834 	movhi	r7,16352
   21b90:	4009883a 	mov	r4,r8
   21b94:	480b883a 	mov	r5,r9
   21b98:	00282d40 	call	282d4 <__muldf3>
   21b9c:	1009883a 	mov	r4,r2
   21ba0:	180b883a 	mov	r5,r3
   21ba4:	2005883a 	mov	r2,r4
   21ba8:	2807883a 	mov	r3,r5
   21bac:	100d883a 	mov	r6,r2
   21bb0:	180f883a 	mov	r7,r3
   21bb4:	8009883a 	mov	r4,r16
   21bb8:	880b883a 	mov	r5,r17
   21bbc:	00289ec0 	call	289ec <__subdf3>
   21bc0:	1009883a 	mov	r4,r2
   21bc4:	180b883a 	mov	r5,r3
   21bc8:	2005883a 	mov	r2,r4
   21bcc:	2807883a 	mov	r3,r5
   21bd0:	1009883a 	mov	r4,r2
   21bd4:	180b883a 	mov	r5,r3
   21bd8:	00295fc0 	call	295fc <__truncdfsf2>
   21bdc:	1007883a 	mov	r3,r2
   21be0:	90c00115 	stw	r3,4(r18)

         C_MULBYSCALAR( scratch[0] , epi3.i );
   21be4:	e0bfed17 	ldw	r2,-76(fp)
   21be8:	e0fff817 	ldw	r3,-32(fp)
   21bec:	180b883a 	mov	r5,r3
   21bf0:	1009883a 	mov	r4,r2
   21bf4:	00264740 	call	26474 <__mulsf3>
   21bf8:	1007883a 	mov	r3,r2
   21bfc:	1805883a 	mov	r2,r3
   21c00:	e0bfed15 	stw	r2,-76(fp)
   21c04:	e0bfee17 	ldw	r2,-72(fp)
   21c08:	e0fff817 	ldw	r3,-32(fp)
   21c0c:	180b883a 	mov	r5,r3
   21c10:	1009883a 	mov	r4,r2
   21c14:	00264740 	call	26474 <__mulsf3>
   21c18:	1007883a 	mov	r3,r2
   21c1c:	1805883a 	mov	r2,r3
   21c20:	e0bfee15 	stw	r2,-72(fp)

         C_ADDTO(*Fout,scratch[3]);
   21c24:	e0bff917 	ldw	r2,-28(fp)
   21c28:	10c00017 	ldw	r3,0(r2)
   21c2c:	e0bff317 	ldw	r2,-52(fp)
   21c30:	100b883a 	mov	r5,r2
   21c34:	1809883a 	mov	r4,r3
   21c38:	0025b6c0 	call	25b6c <__addsf3>
   21c3c:	1009883a 	mov	r4,r2
   21c40:	2007883a 	mov	r3,r4
   21c44:	e0bff917 	ldw	r2,-28(fp)
   21c48:	10c00015 	stw	r3,0(r2)
   21c4c:	e0bff917 	ldw	r2,-28(fp)
   21c50:	10c00117 	ldw	r3,4(r2)
   21c54:	e0bff417 	ldw	r2,-48(fp)
   21c58:	100b883a 	mov	r5,r2
   21c5c:	1809883a 	mov	r4,r3
   21c60:	0025b6c0 	call	25b6c <__addsf3>
   21c64:	1009883a 	mov	r4,r2
   21c68:	2007883a 	mov	r3,r4
   21c6c:	e0bff917 	ldw	r2,-28(fp)
   21c70:	10c00115 	stw	r3,4(r2)

         Fout[m2].r = Fout[m].r + scratch[0].i;
   21c74:	e0bfec17 	ldw	r2,-80(fp)
   21c78:	100490fa 	slli	r2,r2,3
   21c7c:	e0fff917 	ldw	r3,-28(fp)
   21c80:	18a1883a 	add	r16,r3,r2
   21c84:	e0bffc17 	ldw	r2,-16(fp)
   21c88:	100490fa 	slli	r2,r2,3
   21c8c:	e0fff917 	ldw	r3,-28(fp)
   21c90:	1885883a 	add	r2,r3,r2
   21c94:	10c00017 	ldw	r3,0(r2)
   21c98:	e0bfee17 	ldw	r2,-72(fp)
   21c9c:	100b883a 	mov	r5,r2
   21ca0:	1809883a 	mov	r4,r3
   21ca4:	0025b6c0 	call	25b6c <__addsf3>
   21ca8:	1007883a 	mov	r3,r2
   21cac:	1805883a 	mov	r2,r3
   21cb0:	80800015 	stw	r2,0(r16)
         Fout[m2].i = Fout[m].i - scratch[0].r;
   21cb4:	e0bfec17 	ldw	r2,-80(fp)
   21cb8:	100490fa 	slli	r2,r2,3
   21cbc:	e0fff917 	ldw	r3,-28(fp)
   21cc0:	18a1883a 	add	r16,r3,r2
   21cc4:	e0bffc17 	ldw	r2,-16(fp)
   21cc8:	100490fa 	slli	r2,r2,3
   21ccc:	e0fff917 	ldw	r3,-28(fp)
   21cd0:	1885883a 	add	r2,r3,r2
   21cd4:	10c00117 	ldw	r3,4(r2)
   21cd8:	e0bfed17 	ldw	r2,-76(fp)
   21cdc:	100b883a 	mov	r5,r2
   21ce0:	1809883a 	mov	r4,r3
   21ce4:	00268700 	call	26870 <__subsf3>
   21ce8:	1007883a 	mov	r3,r2
   21cec:	1805883a 	mov	r2,r3
   21cf0:	80800115 	stw	r2,4(r16)

         Fout[m].r -= scratch[0].i;
   21cf4:	e0bffc17 	ldw	r2,-16(fp)
   21cf8:	100490fa 	slli	r2,r2,3
   21cfc:	e0fff917 	ldw	r3,-28(fp)
   21d00:	18a1883a 	add	r16,r3,r2
   21d04:	e0bffc17 	ldw	r2,-16(fp)
   21d08:	100490fa 	slli	r2,r2,3
   21d0c:	e0fff917 	ldw	r3,-28(fp)
   21d10:	1885883a 	add	r2,r3,r2
   21d14:	10c00017 	ldw	r3,0(r2)
   21d18:	e0bfee17 	ldw	r2,-72(fp)
   21d1c:	100b883a 	mov	r5,r2
   21d20:	1809883a 	mov	r4,r3
   21d24:	00268700 	call	26870 <__subsf3>
   21d28:	1007883a 	mov	r3,r2
   21d2c:	1805883a 	mov	r2,r3
   21d30:	80800015 	stw	r2,0(r16)
         Fout[m].i += scratch[0].r;
   21d34:	e0bffc17 	ldw	r2,-16(fp)
   21d38:	100490fa 	slli	r2,r2,3
   21d3c:	e0fff917 	ldw	r3,-28(fp)
   21d40:	18a1883a 	add	r16,r3,r2
   21d44:	e0bffc17 	ldw	r2,-16(fp)
   21d48:	100490fa 	slli	r2,r2,3
   21d4c:	e0fff917 	ldw	r3,-28(fp)
   21d50:	1885883a 	add	r2,r3,r2
   21d54:	10c00117 	ldw	r3,4(r2)
   21d58:	e0bfed17 	ldw	r2,-76(fp)
   21d5c:	100b883a 	mov	r5,r2
   21d60:	1809883a 	mov	r4,r3
   21d64:	0025b6c0 	call	25b6c <__addsf3>
   21d68:	1007883a 	mov	r3,r2
   21d6c:	1805883a 	mov	r2,r3
   21d70:	80800115 	stw	r2,4(r16)

         ++Fout;
   21d74:	e0bff917 	ldw	r2,-28(fp)
   21d78:	10800204 	addi	r2,r2,8
   21d7c:	e0bff915 	stw	r2,-28(fp)
     }while(--k);
   21d80:	e0bfe917 	ldw	r2,-92(fp)
   21d84:	10bfffc4 	addi	r2,r2,-1
   21d88:	e0bfe915 	stw	r2,-92(fp)
   21d8c:	e0bfe917 	ldw	r2,-92(fp)
   21d90:	103ea61e 	bne	r2,zero,2182c <kf_bfly3+0x80>
}
   21d94:	0001883a 	nop
   21d98:	e6fffd04 	addi	sp,fp,-12
   21d9c:	dfc00417 	ldw	ra,16(sp)
   21da0:	df000317 	ldw	fp,12(sp)
   21da4:	dc800217 	ldw	r18,8(sp)
   21da8:	dc400117 	ldw	r17,4(sp)
   21dac:	dc000017 	ldw	r16,0(sp)
   21db0:	dec00504 	addi	sp,sp,20
   21db4:	f800283a 	ret

00021db8 <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
   21db8:	deffd304 	addi	sp,sp,-180
   21dbc:	dfc02c15 	stw	ra,176(sp)
   21dc0:	df002b15 	stw	fp,172(sp)
   21dc4:	dc002a15 	stw	r16,168(sp)
   21dc8:	df002b04 	addi	fp,sp,172
   21dcc:	e13ffb15 	stw	r4,-20(fp)
   21dd0:	e17ffc15 	stw	r5,-16(fp)
   21dd4:	e1bffd15 	stw	r6,-12(fp)
   21dd8:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
   21ddc:	e0bffd17 	ldw	r2,-12(fp)
   21de0:	10804204 	addi	r2,r2,264
   21de4:	e0bfdb15 	stw	r2,-148(fp)
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
   21de8:	e0fffe17 	ldw	r3,-8(fp)
   21dec:	e0bffc17 	ldw	r2,-16(fp)
   21df0:	1885383a 	mul	r2,r3,r2
   21df4:	100490fa 	slli	r2,r2,3
   21df8:	e0ffdb17 	ldw	r3,-148(fp)
   21dfc:	1885883a 	add	r2,r3,r2
   21e00:	10c00017 	ldw	r3,0(r2)
   21e04:	e0fff715 	stw	r3,-36(fp)
   21e08:	10800117 	ldw	r2,4(r2)
   21e0c:	e0bff815 	stw	r2,-32(fp)
    yb = twiddles[fstride*2*m];
   21e10:	e0fffe17 	ldw	r3,-8(fp)
   21e14:	e0bffc17 	ldw	r2,-16(fp)
   21e18:	1885383a 	mul	r2,r3,r2
   21e1c:	1004913a 	slli	r2,r2,4
   21e20:	e0ffdb17 	ldw	r3,-148(fp)
   21e24:	1885883a 	add	r2,r3,r2
   21e28:	10c00017 	ldw	r3,0(r2)
   21e2c:	e0fff915 	stw	r3,-28(fp)
   21e30:	10800117 	ldw	r2,4(r2)
   21e34:	e0bffa15 	stw	r2,-24(fp)

    Fout0=Fout;
   21e38:	e0bffb17 	ldw	r2,-20(fp)
   21e3c:	e0bfd515 	stw	r2,-172(fp)
    Fout1=Fout0+m;
   21e40:	e0bffe17 	ldw	r2,-8(fp)
   21e44:	100490fa 	slli	r2,r2,3
   21e48:	e0ffd517 	ldw	r3,-172(fp)
   21e4c:	1885883a 	add	r2,r3,r2
   21e50:	e0bfd615 	stw	r2,-168(fp)
    Fout2=Fout0+2*m;
   21e54:	e0bffe17 	ldw	r2,-8(fp)
   21e58:	1004913a 	slli	r2,r2,4
   21e5c:	1007883a 	mov	r3,r2
   21e60:	e0bfd517 	ldw	r2,-172(fp)
   21e64:	10c5883a 	add	r2,r2,r3
   21e68:	e0bfd715 	stw	r2,-164(fp)
    Fout3=Fout0+3*m;
   21e6c:	e0bffe17 	ldw	r2,-8(fp)
   21e70:	10800624 	muli	r2,r2,24
   21e74:	1007883a 	mov	r3,r2
   21e78:	e0bfd517 	ldw	r2,-172(fp)
   21e7c:	10c5883a 	add	r2,r2,r3
   21e80:	e0bfd815 	stw	r2,-160(fp)
    Fout4=Fout0+4*m;
   21e84:	e0bffe17 	ldw	r2,-8(fp)
   21e88:	1004917a 	slli	r2,r2,5
   21e8c:	1007883a 	mov	r3,r2
   21e90:	e0bfd517 	ldw	r2,-172(fp)
   21e94:	10c5883a 	add	r2,r2,r3
   21e98:	e0bfd915 	stw	r2,-156(fp)

    tw=st->twiddles;
   21e9c:	e0bffd17 	ldw	r2,-12(fp)
   21ea0:	10804204 	addi	r2,r2,264
   21ea4:	e0bfdc15 	stw	r2,-144(fp)
    for ( u=0; u<m; ++u ) {
   21ea8:	e03fda15 	stw	zero,-152(fp)
   21eac:	00027806 	br	22890 <kf_bfly5+0xad8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
   21eb0:	e0bfd517 	ldw	r2,-172(fp)
   21eb4:	10c00017 	ldw	r3,0(r2)
   21eb8:	e0ffdd15 	stw	r3,-140(fp)
   21ebc:	10800117 	ldw	r2,4(r2)
   21ec0:	e0bfde15 	stw	r2,-136(fp)

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   21ec4:	e0bfd617 	ldw	r2,-168(fp)
   21ec8:	11000017 	ldw	r4,0(r2)
   21ecc:	e0ffda17 	ldw	r3,-152(fp)
   21ed0:	e0bffc17 	ldw	r2,-16(fp)
   21ed4:	1885383a 	mul	r2,r3,r2
   21ed8:	100490fa 	slli	r2,r2,3
   21edc:	e0ffdc17 	ldw	r3,-144(fp)
   21ee0:	1885883a 	add	r2,r3,r2
   21ee4:	10c00017 	ldw	r3,0(r2)
   21ee8:	180b883a 	mov	r5,r3
   21eec:	00264740 	call	26474 <__mulsf3>
   21ef0:	1007883a 	mov	r3,r2
   21ef4:	1821883a 	mov	r16,r3
   21ef8:	e0bfd617 	ldw	r2,-168(fp)
   21efc:	11000117 	ldw	r4,4(r2)
   21f00:	e0ffda17 	ldw	r3,-152(fp)
   21f04:	e0bffc17 	ldw	r2,-16(fp)
   21f08:	1885383a 	mul	r2,r3,r2
   21f0c:	100490fa 	slli	r2,r2,3
   21f10:	e0ffdc17 	ldw	r3,-144(fp)
   21f14:	1885883a 	add	r2,r3,r2
   21f18:	10c00117 	ldw	r3,4(r2)
   21f1c:	180b883a 	mov	r5,r3
   21f20:	00264740 	call	26474 <__mulsf3>
   21f24:	1007883a 	mov	r3,r2
   21f28:	1805883a 	mov	r2,r3
   21f2c:	100b883a 	mov	r5,r2
   21f30:	8009883a 	mov	r4,r16
   21f34:	00268700 	call	26870 <__subsf3>
   21f38:	1007883a 	mov	r3,r2
   21f3c:	1805883a 	mov	r2,r3
   21f40:	e0bfdf15 	stw	r2,-132(fp)
   21f44:	e0bfd617 	ldw	r2,-168(fp)
   21f48:	11000017 	ldw	r4,0(r2)
   21f4c:	e0ffda17 	ldw	r3,-152(fp)
   21f50:	e0bffc17 	ldw	r2,-16(fp)
   21f54:	1885383a 	mul	r2,r3,r2
   21f58:	100490fa 	slli	r2,r2,3
   21f5c:	e0ffdc17 	ldw	r3,-144(fp)
   21f60:	1885883a 	add	r2,r3,r2
   21f64:	10c00117 	ldw	r3,4(r2)
   21f68:	180b883a 	mov	r5,r3
   21f6c:	00264740 	call	26474 <__mulsf3>
   21f70:	1007883a 	mov	r3,r2
   21f74:	1821883a 	mov	r16,r3
   21f78:	e0bfd617 	ldw	r2,-168(fp)
   21f7c:	11000117 	ldw	r4,4(r2)
   21f80:	e0ffda17 	ldw	r3,-152(fp)
   21f84:	e0bffc17 	ldw	r2,-16(fp)
   21f88:	1885383a 	mul	r2,r3,r2
   21f8c:	100490fa 	slli	r2,r2,3
   21f90:	e0ffdc17 	ldw	r3,-144(fp)
   21f94:	1885883a 	add	r2,r3,r2
   21f98:	10c00017 	ldw	r3,0(r2)
   21f9c:	180b883a 	mov	r5,r3
   21fa0:	00264740 	call	26474 <__mulsf3>
   21fa4:	1007883a 	mov	r3,r2
   21fa8:	1805883a 	mov	r2,r3
   21fac:	100b883a 	mov	r5,r2
   21fb0:	8009883a 	mov	r4,r16
   21fb4:	0025b6c0 	call	25b6c <__addsf3>
   21fb8:	1007883a 	mov	r3,r2
   21fbc:	1805883a 	mov	r2,r3
   21fc0:	e0bfe015 	stw	r2,-128(fp)
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   21fc4:	e0bfd717 	ldw	r2,-164(fp)
   21fc8:	11000017 	ldw	r4,0(r2)
   21fcc:	e0ffda17 	ldw	r3,-152(fp)
   21fd0:	e0bffc17 	ldw	r2,-16(fp)
   21fd4:	1885383a 	mul	r2,r3,r2
   21fd8:	1004913a 	slli	r2,r2,4
   21fdc:	e0ffdc17 	ldw	r3,-144(fp)
   21fe0:	1885883a 	add	r2,r3,r2
   21fe4:	10c00017 	ldw	r3,0(r2)
   21fe8:	180b883a 	mov	r5,r3
   21fec:	00264740 	call	26474 <__mulsf3>
   21ff0:	1007883a 	mov	r3,r2
   21ff4:	1821883a 	mov	r16,r3
   21ff8:	e0bfd717 	ldw	r2,-164(fp)
   21ffc:	11000117 	ldw	r4,4(r2)
   22000:	e0ffda17 	ldw	r3,-152(fp)
   22004:	e0bffc17 	ldw	r2,-16(fp)
   22008:	1885383a 	mul	r2,r3,r2
   2200c:	1004913a 	slli	r2,r2,4
   22010:	e0ffdc17 	ldw	r3,-144(fp)
   22014:	1885883a 	add	r2,r3,r2
   22018:	10c00117 	ldw	r3,4(r2)
   2201c:	180b883a 	mov	r5,r3
   22020:	00264740 	call	26474 <__mulsf3>
   22024:	1007883a 	mov	r3,r2
   22028:	1805883a 	mov	r2,r3
   2202c:	100b883a 	mov	r5,r2
   22030:	8009883a 	mov	r4,r16
   22034:	00268700 	call	26870 <__subsf3>
   22038:	1007883a 	mov	r3,r2
   2203c:	1805883a 	mov	r2,r3
   22040:	e0bfe115 	stw	r2,-124(fp)
   22044:	e0bfd717 	ldw	r2,-164(fp)
   22048:	11000017 	ldw	r4,0(r2)
   2204c:	e0ffda17 	ldw	r3,-152(fp)
   22050:	e0bffc17 	ldw	r2,-16(fp)
   22054:	1885383a 	mul	r2,r3,r2
   22058:	1004913a 	slli	r2,r2,4
   2205c:	e0ffdc17 	ldw	r3,-144(fp)
   22060:	1885883a 	add	r2,r3,r2
   22064:	10c00117 	ldw	r3,4(r2)
   22068:	180b883a 	mov	r5,r3
   2206c:	00264740 	call	26474 <__mulsf3>
   22070:	1007883a 	mov	r3,r2
   22074:	1821883a 	mov	r16,r3
   22078:	e0bfd717 	ldw	r2,-164(fp)
   2207c:	11000117 	ldw	r4,4(r2)
   22080:	e0ffda17 	ldw	r3,-152(fp)
   22084:	e0bffc17 	ldw	r2,-16(fp)
   22088:	1885383a 	mul	r2,r3,r2
   2208c:	1004913a 	slli	r2,r2,4
   22090:	e0ffdc17 	ldw	r3,-144(fp)
   22094:	1885883a 	add	r2,r3,r2
   22098:	10c00017 	ldw	r3,0(r2)
   2209c:	180b883a 	mov	r5,r3
   220a0:	00264740 	call	26474 <__mulsf3>
   220a4:	1007883a 	mov	r3,r2
   220a8:	1805883a 	mov	r2,r3
   220ac:	100b883a 	mov	r5,r2
   220b0:	8009883a 	mov	r4,r16
   220b4:	0025b6c0 	call	25b6c <__addsf3>
   220b8:	1007883a 	mov	r3,r2
   220bc:	1805883a 	mov	r2,r3
   220c0:	e0bfe215 	stw	r2,-120(fp)
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   220c4:	e0bfd817 	ldw	r2,-160(fp)
   220c8:	11000017 	ldw	r4,0(r2)
   220cc:	e0ffda17 	ldw	r3,-152(fp)
   220d0:	e0bffc17 	ldw	r2,-16(fp)
   220d4:	1885383a 	mul	r2,r3,r2
   220d8:	10800624 	muli	r2,r2,24
   220dc:	e0ffdc17 	ldw	r3,-144(fp)
   220e0:	1885883a 	add	r2,r3,r2
   220e4:	10c00017 	ldw	r3,0(r2)
   220e8:	180b883a 	mov	r5,r3
   220ec:	00264740 	call	26474 <__mulsf3>
   220f0:	1007883a 	mov	r3,r2
   220f4:	1821883a 	mov	r16,r3
   220f8:	e0bfd817 	ldw	r2,-160(fp)
   220fc:	11000117 	ldw	r4,4(r2)
   22100:	e0ffda17 	ldw	r3,-152(fp)
   22104:	e0bffc17 	ldw	r2,-16(fp)
   22108:	1885383a 	mul	r2,r3,r2
   2210c:	10800624 	muli	r2,r2,24
   22110:	e0ffdc17 	ldw	r3,-144(fp)
   22114:	1885883a 	add	r2,r3,r2
   22118:	10c00117 	ldw	r3,4(r2)
   2211c:	180b883a 	mov	r5,r3
   22120:	00264740 	call	26474 <__mulsf3>
   22124:	1007883a 	mov	r3,r2
   22128:	1805883a 	mov	r2,r3
   2212c:	100b883a 	mov	r5,r2
   22130:	8009883a 	mov	r4,r16
   22134:	00268700 	call	26870 <__subsf3>
   22138:	1007883a 	mov	r3,r2
   2213c:	1805883a 	mov	r2,r3
   22140:	e0bfe315 	stw	r2,-116(fp)
   22144:	e0bfd817 	ldw	r2,-160(fp)
   22148:	11000017 	ldw	r4,0(r2)
   2214c:	e0ffda17 	ldw	r3,-152(fp)
   22150:	e0bffc17 	ldw	r2,-16(fp)
   22154:	1885383a 	mul	r2,r3,r2
   22158:	10800624 	muli	r2,r2,24
   2215c:	e0ffdc17 	ldw	r3,-144(fp)
   22160:	1885883a 	add	r2,r3,r2
   22164:	10c00117 	ldw	r3,4(r2)
   22168:	180b883a 	mov	r5,r3
   2216c:	00264740 	call	26474 <__mulsf3>
   22170:	1007883a 	mov	r3,r2
   22174:	1821883a 	mov	r16,r3
   22178:	e0bfd817 	ldw	r2,-160(fp)
   2217c:	11000117 	ldw	r4,4(r2)
   22180:	e0ffda17 	ldw	r3,-152(fp)
   22184:	e0bffc17 	ldw	r2,-16(fp)
   22188:	1885383a 	mul	r2,r3,r2
   2218c:	10800624 	muli	r2,r2,24
   22190:	e0ffdc17 	ldw	r3,-144(fp)
   22194:	1885883a 	add	r2,r3,r2
   22198:	10c00017 	ldw	r3,0(r2)
   2219c:	180b883a 	mov	r5,r3
   221a0:	00264740 	call	26474 <__mulsf3>
   221a4:	1007883a 	mov	r3,r2
   221a8:	1805883a 	mov	r2,r3
   221ac:	100b883a 	mov	r5,r2
   221b0:	8009883a 	mov	r4,r16
   221b4:	0025b6c0 	call	25b6c <__addsf3>
   221b8:	1007883a 	mov	r3,r2
   221bc:	1805883a 	mov	r2,r3
   221c0:	e0bfe415 	stw	r2,-112(fp)
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   221c4:	e0bfd917 	ldw	r2,-156(fp)
   221c8:	11000017 	ldw	r4,0(r2)
   221cc:	e0ffda17 	ldw	r3,-152(fp)
   221d0:	e0bffc17 	ldw	r2,-16(fp)
   221d4:	1885383a 	mul	r2,r3,r2
   221d8:	1004917a 	slli	r2,r2,5
   221dc:	e0ffdc17 	ldw	r3,-144(fp)
   221e0:	1885883a 	add	r2,r3,r2
   221e4:	10c00017 	ldw	r3,0(r2)
   221e8:	180b883a 	mov	r5,r3
   221ec:	00264740 	call	26474 <__mulsf3>
   221f0:	1007883a 	mov	r3,r2
   221f4:	1821883a 	mov	r16,r3
   221f8:	e0bfd917 	ldw	r2,-156(fp)
   221fc:	11000117 	ldw	r4,4(r2)
   22200:	e0ffda17 	ldw	r3,-152(fp)
   22204:	e0bffc17 	ldw	r2,-16(fp)
   22208:	1885383a 	mul	r2,r3,r2
   2220c:	1004917a 	slli	r2,r2,5
   22210:	e0ffdc17 	ldw	r3,-144(fp)
   22214:	1885883a 	add	r2,r3,r2
   22218:	10c00117 	ldw	r3,4(r2)
   2221c:	180b883a 	mov	r5,r3
   22220:	00264740 	call	26474 <__mulsf3>
   22224:	1007883a 	mov	r3,r2
   22228:	1805883a 	mov	r2,r3
   2222c:	100b883a 	mov	r5,r2
   22230:	8009883a 	mov	r4,r16
   22234:	00268700 	call	26870 <__subsf3>
   22238:	1007883a 	mov	r3,r2
   2223c:	1805883a 	mov	r2,r3
   22240:	e0bfe515 	stw	r2,-108(fp)
   22244:	e0bfd917 	ldw	r2,-156(fp)
   22248:	11000017 	ldw	r4,0(r2)
   2224c:	e0ffda17 	ldw	r3,-152(fp)
   22250:	e0bffc17 	ldw	r2,-16(fp)
   22254:	1885383a 	mul	r2,r3,r2
   22258:	1004917a 	slli	r2,r2,5
   2225c:	e0ffdc17 	ldw	r3,-144(fp)
   22260:	1885883a 	add	r2,r3,r2
   22264:	10c00117 	ldw	r3,4(r2)
   22268:	180b883a 	mov	r5,r3
   2226c:	00264740 	call	26474 <__mulsf3>
   22270:	1007883a 	mov	r3,r2
   22274:	1821883a 	mov	r16,r3
   22278:	e0bfd917 	ldw	r2,-156(fp)
   2227c:	11000117 	ldw	r4,4(r2)
   22280:	e0ffda17 	ldw	r3,-152(fp)
   22284:	e0bffc17 	ldw	r2,-16(fp)
   22288:	1885383a 	mul	r2,r3,r2
   2228c:	1004917a 	slli	r2,r2,5
   22290:	e0ffdc17 	ldw	r3,-144(fp)
   22294:	1885883a 	add	r2,r3,r2
   22298:	10c00017 	ldw	r3,0(r2)
   2229c:	180b883a 	mov	r5,r3
   222a0:	00264740 	call	26474 <__mulsf3>
   222a4:	1007883a 	mov	r3,r2
   222a8:	1805883a 	mov	r2,r3
   222ac:	100b883a 	mov	r5,r2
   222b0:	8009883a 	mov	r4,r16
   222b4:	0025b6c0 	call	25b6c <__addsf3>
   222b8:	1007883a 	mov	r3,r2
   222bc:	1805883a 	mov	r2,r3
   222c0:	e0bfe615 	stw	r2,-104(fp)

        C_ADD( scratch[7],scratch[1],scratch[4]);
   222c4:	e0bfdf17 	ldw	r2,-132(fp)
   222c8:	e0ffe517 	ldw	r3,-108(fp)
   222cc:	180b883a 	mov	r5,r3
   222d0:	1009883a 	mov	r4,r2
   222d4:	0025b6c0 	call	25b6c <__addsf3>
   222d8:	1007883a 	mov	r3,r2
   222dc:	1805883a 	mov	r2,r3
   222e0:	e0bfeb15 	stw	r2,-84(fp)
   222e4:	e0bfe017 	ldw	r2,-128(fp)
   222e8:	e0ffe617 	ldw	r3,-104(fp)
   222ec:	180b883a 	mov	r5,r3
   222f0:	1009883a 	mov	r4,r2
   222f4:	0025b6c0 	call	25b6c <__addsf3>
   222f8:	1007883a 	mov	r3,r2
   222fc:	1805883a 	mov	r2,r3
   22300:	e0bfec15 	stw	r2,-80(fp)
        C_SUB( scratch[10],scratch[1],scratch[4]);
   22304:	e0bfdf17 	ldw	r2,-132(fp)
   22308:	e0ffe517 	ldw	r3,-108(fp)
   2230c:	180b883a 	mov	r5,r3
   22310:	1009883a 	mov	r4,r2
   22314:	00268700 	call	26870 <__subsf3>
   22318:	1007883a 	mov	r3,r2
   2231c:	1805883a 	mov	r2,r3
   22320:	e0bff115 	stw	r2,-60(fp)
   22324:	e0bfe017 	ldw	r2,-128(fp)
   22328:	e0ffe617 	ldw	r3,-104(fp)
   2232c:	180b883a 	mov	r5,r3
   22330:	1009883a 	mov	r4,r2
   22334:	00268700 	call	26870 <__subsf3>
   22338:	1007883a 	mov	r3,r2
   2233c:	1805883a 	mov	r2,r3
   22340:	e0bff215 	stw	r2,-56(fp)
        C_ADD( scratch[8],scratch[2],scratch[3]);
   22344:	e0bfe117 	ldw	r2,-124(fp)
   22348:	e0ffe317 	ldw	r3,-116(fp)
   2234c:	180b883a 	mov	r5,r3
   22350:	1009883a 	mov	r4,r2
   22354:	0025b6c0 	call	25b6c <__addsf3>
   22358:	1007883a 	mov	r3,r2
   2235c:	1805883a 	mov	r2,r3
   22360:	e0bfed15 	stw	r2,-76(fp)
   22364:	e0bfe217 	ldw	r2,-120(fp)
   22368:	e0ffe417 	ldw	r3,-112(fp)
   2236c:	180b883a 	mov	r5,r3
   22370:	1009883a 	mov	r4,r2
   22374:	0025b6c0 	call	25b6c <__addsf3>
   22378:	1007883a 	mov	r3,r2
   2237c:	1805883a 	mov	r2,r3
   22380:	e0bfee15 	stw	r2,-72(fp)
        C_SUB( scratch[9],scratch[2],scratch[3]);
   22384:	e0bfe117 	ldw	r2,-124(fp)
   22388:	e0ffe317 	ldw	r3,-116(fp)
   2238c:	180b883a 	mov	r5,r3
   22390:	1009883a 	mov	r4,r2
   22394:	00268700 	call	26870 <__subsf3>
   22398:	1007883a 	mov	r3,r2
   2239c:	1805883a 	mov	r2,r3
   223a0:	e0bfef15 	stw	r2,-68(fp)
   223a4:	e0bfe217 	ldw	r2,-120(fp)
   223a8:	e0ffe417 	ldw	r3,-112(fp)
   223ac:	180b883a 	mov	r5,r3
   223b0:	1009883a 	mov	r4,r2
   223b4:	00268700 	call	26870 <__subsf3>
   223b8:	1007883a 	mov	r3,r2
   223bc:	1805883a 	mov	r2,r3
   223c0:	e0bff015 	stw	r2,-64(fp)

        Fout0->r += scratch[7].r + scratch[8].r;
   223c4:	e0bfd517 	ldw	r2,-172(fp)
   223c8:	14000017 	ldw	r16,0(r2)
   223cc:	e0bfeb17 	ldw	r2,-84(fp)
   223d0:	e0ffed17 	ldw	r3,-76(fp)
   223d4:	180b883a 	mov	r5,r3
   223d8:	1009883a 	mov	r4,r2
   223dc:	0025b6c0 	call	25b6c <__addsf3>
   223e0:	1007883a 	mov	r3,r2
   223e4:	1805883a 	mov	r2,r3
   223e8:	100b883a 	mov	r5,r2
   223ec:	8009883a 	mov	r4,r16
   223f0:	0025b6c0 	call	25b6c <__addsf3>
   223f4:	1009883a 	mov	r4,r2
   223f8:	2007883a 	mov	r3,r4
   223fc:	e0bfd517 	ldw	r2,-172(fp)
   22400:	10c00015 	stw	r3,0(r2)
        Fout0->i += scratch[7].i + scratch[8].i;
   22404:	e0bfd517 	ldw	r2,-172(fp)
   22408:	14000117 	ldw	r16,4(r2)
   2240c:	e0bfec17 	ldw	r2,-80(fp)
   22410:	e0ffee17 	ldw	r3,-72(fp)
   22414:	180b883a 	mov	r5,r3
   22418:	1009883a 	mov	r4,r2
   2241c:	0025b6c0 	call	25b6c <__addsf3>
   22420:	1007883a 	mov	r3,r2
   22424:	1805883a 	mov	r2,r3
   22428:	100b883a 	mov	r5,r2
   2242c:	8009883a 	mov	r4,r16
   22430:	0025b6c0 	call	25b6c <__addsf3>
   22434:	1009883a 	mov	r4,r2
   22438:	2007883a 	mov	r3,r4
   2243c:	e0bfd517 	ldw	r2,-172(fp)
   22440:	10c00115 	stw	r3,4(r2)

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   22444:	e43fdd17 	ldw	r16,-140(fp)
   22448:	e0bfeb17 	ldw	r2,-84(fp)
   2244c:	e0fff717 	ldw	r3,-36(fp)
   22450:	180b883a 	mov	r5,r3
   22454:	1009883a 	mov	r4,r2
   22458:	00264740 	call	26474 <__mulsf3>
   2245c:	1007883a 	mov	r3,r2
   22460:	1805883a 	mov	r2,r3
   22464:	100b883a 	mov	r5,r2
   22468:	8009883a 	mov	r4,r16
   2246c:	0025b6c0 	call	25b6c <__addsf3>
   22470:	1007883a 	mov	r3,r2
   22474:	1821883a 	mov	r16,r3
   22478:	e0bfed17 	ldw	r2,-76(fp)
   2247c:	e0fff917 	ldw	r3,-28(fp)
   22480:	180b883a 	mov	r5,r3
   22484:	1009883a 	mov	r4,r2
   22488:	00264740 	call	26474 <__mulsf3>
   2248c:	1007883a 	mov	r3,r2
   22490:	1805883a 	mov	r2,r3
   22494:	100b883a 	mov	r5,r2
   22498:	8009883a 	mov	r4,r16
   2249c:	0025b6c0 	call	25b6c <__addsf3>
   224a0:	1007883a 	mov	r3,r2
   224a4:	1805883a 	mov	r2,r3
   224a8:	e0bfe715 	stw	r2,-100(fp)
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   224ac:	e43fde17 	ldw	r16,-136(fp)
   224b0:	e0bfec17 	ldw	r2,-80(fp)
   224b4:	e0fff717 	ldw	r3,-36(fp)
   224b8:	180b883a 	mov	r5,r3
   224bc:	1009883a 	mov	r4,r2
   224c0:	00264740 	call	26474 <__mulsf3>
   224c4:	1007883a 	mov	r3,r2
   224c8:	1805883a 	mov	r2,r3
   224cc:	100b883a 	mov	r5,r2
   224d0:	8009883a 	mov	r4,r16
   224d4:	0025b6c0 	call	25b6c <__addsf3>
   224d8:	1007883a 	mov	r3,r2
   224dc:	1821883a 	mov	r16,r3
   224e0:	e0bfee17 	ldw	r2,-72(fp)
   224e4:	e0fff917 	ldw	r3,-28(fp)
   224e8:	180b883a 	mov	r5,r3
   224ec:	1009883a 	mov	r4,r2
   224f0:	00264740 	call	26474 <__mulsf3>
   224f4:	1007883a 	mov	r3,r2
   224f8:	1805883a 	mov	r2,r3
   224fc:	100b883a 	mov	r5,r2
   22500:	8009883a 	mov	r4,r16
   22504:	0025b6c0 	call	25b6c <__addsf3>
   22508:	1007883a 	mov	r3,r2
   2250c:	1805883a 	mov	r2,r3
   22510:	e0bfe815 	stw	r2,-96(fp)

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   22514:	e0bff217 	ldw	r2,-56(fp)
   22518:	e0fff817 	ldw	r3,-32(fp)
   2251c:	180b883a 	mov	r5,r3
   22520:	1009883a 	mov	r4,r2
   22524:	00264740 	call	26474 <__mulsf3>
   22528:	1007883a 	mov	r3,r2
   2252c:	1821883a 	mov	r16,r3
   22530:	e0bff017 	ldw	r2,-64(fp)
   22534:	e0fffa17 	ldw	r3,-24(fp)
   22538:	180b883a 	mov	r5,r3
   2253c:	1009883a 	mov	r4,r2
   22540:	00264740 	call	26474 <__mulsf3>
   22544:	1007883a 	mov	r3,r2
   22548:	1805883a 	mov	r2,r3
   2254c:	100b883a 	mov	r5,r2
   22550:	8009883a 	mov	r4,r16
   22554:	0025b6c0 	call	25b6c <__addsf3>
   22558:	1007883a 	mov	r3,r2
   2255c:	1805883a 	mov	r2,r3
   22560:	e0bfe915 	stw	r2,-92(fp)
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   22564:	e0bff117 	ldw	r2,-60(fp)
   22568:	e0fff817 	ldw	r3,-32(fp)
   2256c:	180b883a 	mov	r5,r3
   22570:	1009883a 	mov	r4,r2
   22574:	00264740 	call	26474 <__mulsf3>
   22578:	1007883a 	mov	r3,r2
   2257c:	1805883a 	mov	r2,r3
   22580:	1420003c 	xorhi	r16,r2,32768
   22584:	e0bfef17 	ldw	r2,-68(fp)
   22588:	e0fffa17 	ldw	r3,-24(fp)
   2258c:	180b883a 	mov	r5,r3
   22590:	1009883a 	mov	r4,r2
   22594:	00264740 	call	26474 <__mulsf3>
   22598:	1007883a 	mov	r3,r2
   2259c:	1805883a 	mov	r2,r3
   225a0:	100b883a 	mov	r5,r2
   225a4:	8009883a 	mov	r4,r16
   225a8:	00268700 	call	26870 <__subsf3>
   225ac:	1007883a 	mov	r3,r2
   225b0:	1805883a 	mov	r2,r3
   225b4:	e0bfea15 	stw	r2,-88(fp)

        C_SUB(*Fout1,scratch[5],scratch[6]);
   225b8:	e0bfe717 	ldw	r2,-100(fp)
   225bc:	e0ffe917 	ldw	r3,-92(fp)
   225c0:	180b883a 	mov	r5,r3
   225c4:	1009883a 	mov	r4,r2
   225c8:	00268700 	call	26870 <__subsf3>
   225cc:	1009883a 	mov	r4,r2
   225d0:	2007883a 	mov	r3,r4
   225d4:	e0bfd617 	ldw	r2,-168(fp)
   225d8:	10c00015 	stw	r3,0(r2)
   225dc:	e0bfe817 	ldw	r2,-96(fp)
   225e0:	e0ffea17 	ldw	r3,-88(fp)
   225e4:	180b883a 	mov	r5,r3
   225e8:	1009883a 	mov	r4,r2
   225ec:	00268700 	call	26870 <__subsf3>
   225f0:	1009883a 	mov	r4,r2
   225f4:	2007883a 	mov	r3,r4
   225f8:	e0bfd617 	ldw	r2,-168(fp)
   225fc:	10c00115 	stw	r3,4(r2)
        C_ADD(*Fout4,scratch[5],scratch[6]);
   22600:	e0bfe717 	ldw	r2,-100(fp)
   22604:	e0ffe917 	ldw	r3,-92(fp)
   22608:	180b883a 	mov	r5,r3
   2260c:	1009883a 	mov	r4,r2
   22610:	0025b6c0 	call	25b6c <__addsf3>
   22614:	1009883a 	mov	r4,r2
   22618:	2007883a 	mov	r3,r4
   2261c:	e0bfd917 	ldw	r2,-156(fp)
   22620:	10c00015 	stw	r3,0(r2)
   22624:	e0bfe817 	ldw	r2,-96(fp)
   22628:	e0ffea17 	ldw	r3,-88(fp)
   2262c:	180b883a 	mov	r5,r3
   22630:	1009883a 	mov	r4,r2
   22634:	0025b6c0 	call	25b6c <__addsf3>
   22638:	1009883a 	mov	r4,r2
   2263c:	2007883a 	mov	r3,r4
   22640:	e0bfd917 	ldw	r2,-156(fp)
   22644:	10c00115 	stw	r3,4(r2)

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   22648:	e43fdd17 	ldw	r16,-140(fp)
   2264c:	e0bfeb17 	ldw	r2,-84(fp)
   22650:	e0fff917 	ldw	r3,-28(fp)
   22654:	180b883a 	mov	r5,r3
   22658:	1009883a 	mov	r4,r2
   2265c:	00264740 	call	26474 <__mulsf3>
   22660:	1007883a 	mov	r3,r2
   22664:	1805883a 	mov	r2,r3
   22668:	100b883a 	mov	r5,r2
   2266c:	8009883a 	mov	r4,r16
   22670:	0025b6c0 	call	25b6c <__addsf3>
   22674:	1007883a 	mov	r3,r2
   22678:	1821883a 	mov	r16,r3
   2267c:	e0bfed17 	ldw	r2,-76(fp)
   22680:	e0fff717 	ldw	r3,-36(fp)
   22684:	180b883a 	mov	r5,r3
   22688:	1009883a 	mov	r4,r2
   2268c:	00264740 	call	26474 <__mulsf3>
   22690:	1007883a 	mov	r3,r2
   22694:	1805883a 	mov	r2,r3
   22698:	100b883a 	mov	r5,r2
   2269c:	8009883a 	mov	r4,r16
   226a0:	0025b6c0 	call	25b6c <__addsf3>
   226a4:	1007883a 	mov	r3,r2
   226a8:	1805883a 	mov	r2,r3
   226ac:	e0bff315 	stw	r2,-52(fp)
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   226b0:	e43fde17 	ldw	r16,-136(fp)
   226b4:	e0bfec17 	ldw	r2,-80(fp)
   226b8:	e0fff917 	ldw	r3,-28(fp)
   226bc:	180b883a 	mov	r5,r3
   226c0:	1009883a 	mov	r4,r2
   226c4:	00264740 	call	26474 <__mulsf3>
   226c8:	1007883a 	mov	r3,r2
   226cc:	1805883a 	mov	r2,r3
   226d0:	100b883a 	mov	r5,r2
   226d4:	8009883a 	mov	r4,r16
   226d8:	0025b6c0 	call	25b6c <__addsf3>
   226dc:	1007883a 	mov	r3,r2
   226e0:	1821883a 	mov	r16,r3
   226e4:	e0bfee17 	ldw	r2,-72(fp)
   226e8:	e0fff717 	ldw	r3,-36(fp)
   226ec:	180b883a 	mov	r5,r3
   226f0:	1009883a 	mov	r4,r2
   226f4:	00264740 	call	26474 <__mulsf3>
   226f8:	1007883a 	mov	r3,r2
   226fc:	1805883a 	mov	r2,r3
   22700:	100b883a 	mov	r5,r2
   22704:	8009883a 	mov	r4,r16
   22708:	0025b6c0 	call	25b6c <__addsf3>
   2270c:	1007883a 	mov	r3,r2
   22710:	1805883a 	mov	r2,r3
   22714:	e0bff415 	stw	r2,-48(fp)
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   22718:	e0bff017 	ldw	r2,-64(fp)
   2271c:	e0fff817 	ldw	r3,-32(fp)
   22720:	180b883a 	mov	r5,r3
   22724:	1009883a 	mov	r4,r2
   22728:	00264740 	call	26474 <__mulsf3>
   2272c:	1007883a 	mov	r3,r2
   22730:	1821883a 	mov	r16,r3
   22734:	e0bff217 	ldw	r2,-56(fp)
   22738:	e0fffa17 	ldw	r3,-24(fp)
   2273c:	180b883a 	mov	r5,r3
   22740:	1009883a 	mov	r4,r2
   22744:	00264740 	call	26474 <__mulsf3>
   22748:	1007883a 	mov	r3,r2
   2274c:	1805883a 	mov	r2,r3
   22750:	100b883a 	mov	r5,r2
   22754:	8009883a 	mov	r4,r16
   22758:	00268700 	call	26870 <__subsf3>
   2275c:	1007883a 	mov	r3,r2
   22760:	1805883a 	mov	r2,r3
   22764:	e0bff515 	stw	r2,-44(fp)
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   22768:	e0bff117 	ldw	r2,-60(fp)
   2276c:	e0fffa17 	ldw	r3,-24(fp)
   22770:	180b883a 	mov	r5,r3
   22774:	1009883a 	mov	r4,r2
   22778:	00264740 	call	26474 <__mulsf3>
   2277c:	1007883a 	mov	r3,r2
   22780:	1821883a 	mov	r16,r3
   22784:	e0bfef17 	ldw	r2,-68(fp)
   22788:	e0fff817 	ldw	r3,-32(fp)
   2278c:	180b883a 	mov	r5,r3
   22790:	1009883a 	mov	r4,r2
   22794:	00264740 	call	26474 <__mulsf3>
   22798:	1007883a 	mov	r3,r2
   2279c:	1805883a 	mov	r2,r3
   227a0:	100b883a 	mov	r5,r2
   227a4:	8009883a 	mov	r4,r16
   227a8:	00268700 	call	26870 <__subsf3>
   227ac:	1007883a 	mov	r3,r2
   227b0:	1805883a 	mov	r2,r3
   227b4:	e0bff615 	stw	r2,-40(fp)

        C_ADD(*Fout2,scratch[11],scratch[12]);
   227b8:	e0bff317 	ldw	r2,-52(fp)
   227bc:	e0fff517 	ldw	r3,-44(fp)
   227c0:	180b883a 	mov	r5,r3
   227c4:	1009883a 	mov	r4,r2
   227c8:	0025b6c0 	call	25b6c <__addsf3>
   227cc:	1009883a 	mov	r4,r2
   227d0:	2007883a 	mov	r3,r4
   227d4:	e0bfd717 	ldw	r2,-164(fp)
   227d8:	10c00015 	stw	r3,0(r2)
   227dc:	e0bff417 	ldw	r2,-48(fp)
   227e0:	e0fff617 	ldw	r3,-40(fp)
   227e4:	180b883a 	mov	r5,r3
   227e8:	1009883a 	mov	r4,r2
   227ec:	0025b6c0 	call	25b6c <__addsf3>
   227f0:	1009883a 	mov	r4,r2
   227f4:	2007883a 	mov	r3,r4
   227f8:	e0bfd717 	ldw	r2,-164(fp)
   227fc:	10c00115 	stw	r3,4(r2)
        C_SUB(*Fout3,scratch[11],scratch[12]);
   22800:	e0bff317 	ldw	r2,-52(fp)
   22804:	e0fff517 	ldw	r3,-44(fp)
   22808:	180b883a 	mov	r5,r3
   2280c:	1009883a 	mov	r4,r2
   22810:	00268700 	call	26870 <__subsf3>
   22814:	1009883a 	mov	r4,r2
   22818:	2007883a 	mov	r3,r4
   2281c:	e0bfd817 	ldw	r2,-160(fp)
   22820:	10c00015 	stw	r3,0(r2)
   22824:	e0bff417 	ldw	r2,-48(fp)
   22828:	e0fff617 	ldw	r3,-40(fp)
   2282c:	180b883a 	mov	r5,r3
   22830:	1009883a 	mov	r4,r2
   22834:	00268700 	call	26870 <__subsf3>
   22838:	1009883a 	mov	r4,r2
   2283c:	2007883a 	mov	r3,r4
   22840:	e0bfd817 	ldw	r2,-160(fp)
   22844:	10c00115 	stw	r3,4(r2)

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
   22848:	e0bfd517 	ldw	r2,-172(fp)
   2284c:	10800204 	addi	r2,r2,8
   22850:	e0bfd515 	stw	r2,-172(fp)
   22854:	e0bfd617 	ldw	r2,-168(fp)
   22858:	10800204 	addi	r2,r2,8
   2285c:	e0bfd615 	stw	r2,-168(fp)
   22860:	e0bfd717 	ldw	r2,-164(fp)
   22864:	10800204 	addi	r2,r2,8
   22868:	e0bfd715 	stw	r2,-164(fp)
   2286c:	e0bfd817 	ldw	r2,-160(fp)
   22870:	10800204 	addi	r2,r2,8
   22874:	e0bfd815 	stw	r2,-160(fp)
   22878:	e0bfd917 	ldw	r2,-156(fp)
   2287c:	10800204 	addi	r2,r2,8
   22880:	e0bfd915 	stw	r2,-156(fp)
    Fout2=Fout0+2*m;
    Fout3=Fout0+3*m;
    Fout4=Fout0+4*m;

    tw=st->twiddles;
    for ( u=0; u<m; ++u ) {
   22884:	e0bfda17 	ldw	r2,-152(fp)
   22888:	10800044 	addi	r2,r2,1
   2288c:	e0bfda15 	stw	r2,-152(fp)
   22890:	e0ffda17 	ldw	r3,-152(fp)
   22894:	e0bffe17 	ldw	r2,-8(fp)
   22898:	18bd8516 	blt	r3,r2,21eb0 <kf_bfly5+0xf8>
        C_ADD(*Fout2,scratch[11],scratch[12]);
        C_SUB(*Fout3,scratch[11],scratch[12]);

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
    }
}
   2289c:	0001883a 	nop
   228a0:	e6ffff04 	addi	sp,fp,-4
   228a4:	dfc00217 	ldw	ra,8(sp)
   228a8:	df000117 	ldw	fp,4(sp)
   228ac:	dc000017 	ldw	r16,0(sp)
   228b0:	dec00304 	addi	sp,sp,12
   228b4:	f800283a 	ret

000228b8 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
   228b8:	deffef04 	addi	sp,sp,-68
   228bc:	dfc01015 	stw	ra,64(sp)
   228c0:	df000f15 	stw	fp,60(sp)
   228c4:	dc000e15 	stw	r16,56(sp)
   228c8:	df000f04 	addi	fp,sp,60
   228cc:	e13ffb15 	stw	r4,-20(fp)
   228d0:	e17ffc15 	stw	r5,-16(fp)
   228d4:	e1bffd15 	stw	r6,-12(fp)
   228d8:	e1fffe15 	stw	r7,-8(fp)
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
   228dc:	e0bffd17 	ldw	r2,-12(fp)
   228e0:	10804204 	addi	r2,r2,264
   228e4:	e0bff615 	stw	r2,-40(fp)
    kiss_fft_cpx t;
    int Norig = st->nfft;
   228e8:	e0bffd17 	ldw	r2,-12(fp)
   228ec:	10800017 	ldw	r2,0(r2)
   228f0:	e0bff715 	stw	r2,-36(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
   228f4:	e0800217 	ldw	r2,8(fp)
   228f8:	100490fa 	slli	r2,r2,3
   228fc:	1009883a 	mov	r4,r2
   22900:	002af0c0 	call	2af0c <malloc>
   22904:	e0bff815 	stw	r2,-32(fp)

    for ( u=0; u<m; ++u ) {
   22908:	e03ff115 	stw	zero,-60(fp)
   2290c:	0000af06 	br	22bcc <kf_bfly_generic+0x314>
        k=u;
   22910:	e0bff117 	ldw	r2,-60(fp)
   22914:	e0bff215 	stw	r2,-56(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
   22918:	e03ff315 	stw	zero,-52(fp)
   2291c:	00001306 	br	2296c <kf_bfly_generic+0xb4>
            scratch[q1] = Fout[ k  ];
   22920:	e0bff317 	ldw	r2,-52(fp)
   22924:	100490fa 	slli	r2,r2,3
   22928:	e0fff817 	ldw	r3,-32(fp)
   2292c:	1885883a 	add	r2,r3,r2
   22930:	e0fff217 	ldw	r3,-56(fp)
   22934:	180690fa 	slli	r3,r3,3
   22938:	e13ffb17 	ldw	r4,-20(fp)
   2293c:	20c7883a 	add	r3,r4,r3
   22940:	19000017 	ldw	r4,0(r3)
   22944:	11000015 	stw	r4,0(r2)
   22948:	18c00117 	ldw	r3,4(r3)
   2294c:	10c00115 	stw	r3,4(r2)
            C_FIXDIV(scratch[q1],p);
            k += m;
   22950:	e0fff217 	ldw	r3,-56(fp)
   22954:	e0bffe17 	ldw	r2,-8(fp)
   22958:	1885883a 	add	r2,r3,r2
   2295c:	e0bff215 	stw	r2,-56(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);

    for ( u=0; u<m; ++u ) {
        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
   22960:	e0bff317 	ldw	r2,-52(fp)
   22964:	10800044 	addi	r2,r2,1
   22968:	e0bff315 	stw	r2,-52(fp)
   2296c:	e0fff317 	ldw	r3,-52(fp)
   22970:	e0800217 	ldw	r2,8(fp)
   22974:	18bfea16 	blt	r3,r2,22920 <kf_bfly_generic+0x68>
            scratch[q1] = Fout[ k  ];
            C_FIXDIV(scratch[q1],p);
            k += m;
        }

        k=u;
   22978:	e0bff117 	ldw	r2,-60(fp)
   2297c:	e0bff215 	stw	r2,-56(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
   22980:	e03ff315 	stw	zero,-52(fp)
   22984:	00008b06 	br	22bb4 <kf_bfly_generic+0x2fc>
            int twidx=0;
   22988:	e03ff515 	stw	zero,-44(fp)
            Fout[ k ] = scratch[0];
   2298c:	e0bff217 	ldw	r2,-56(fp)
   22990:	100490fa 	slli	r2,r2,3
   22994:	e0fffb17 	ldw	r3,-20(fp)
   22998:	1885883a 	add	r2,r3,r2
   2299c:	e0fff817 	ldw	r3,-32(fp)
   229a0:	19000017 	ldw	r4,0(r3)
   229a4:	11000015 	stw	r4,0(r2)
   229a8:	18c00117 	ldw	r3,4(r3)
   229ac:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
   229b0:	00800044 	movi	r2,1
   229b4:	e0bff415 	stw	r2,-48(fp)
   229b8:	00007406 	br	22b8c <kf_bfly_generic+0x2d4>
                twidx += fstride * k;
   229bc:	e0fff217 	ldw	r3,-56(fp)
   229c0:	e0bffc17 	ldw	r2,-16(fp)
   229c4:	1887383a 	mul	r3,r3,r2
   229c8:	e0bff517 	ldw	r2,-44(fp)
   229cc:	1885883a 	add	r2,r3,r2
   229d0:	e0bff515 	stw	r2,-44(fp)
                if (twidx>=Norig) twidx-=Norig;
   229d4:	e0fff517 	ldw	r3,-44(fp)
   229d8:	e0bff717 	ldw	r2,-36(fp)
   229dc:	18800416 	blt	r3,r2,229f0 <kf_bfly_generic+0x138>
   229e0:	e0fff517 	ldw	r3,-44(fp)
   229e4:	e0bff717 	ldw	r2,-36(fp)
   229e8:	1885c83a 	sub	r2,r3,r2
   229ec:	e0bff515 	stw	r2,-44(fp)
                C_MUL(t,scratch[q] , twiddles[twidx] );
   229f0:	e0bff417 	ldw	r2,-48(fp)
   229f4:	100490fa 	slli	r2,r2,3
   229f8:	e0fff817 	ldw	r3,-32(fp)
   229fc:	1885883a 	add	r2,r3,r2
   22a00:	11000017 	ldw	r4,0(r2)
   22a04:	e0bff517 	ldw	r2,-44(fp)
   22a08:	100490fa 	slli	r2,r2,3
   22a0c:	e0fff617 	ldw	r3,-40(fp)
   22a10:	1885883a 	add	r2,r3,r2
   22a14:	10c00017 	ldw	r3,0(r2)
   22a18:	180b883a 	mov	r5,r3
   22a1c:	00264740 	call	26474 <__mulsf3>
   22a20:	1007883a 	mov	r3,r2
   22a24:	1821883a 	mov	r16,r3
   22a28:	e0bff417 	ldw	r2,-48(fp)
   22a2c:	100490fa 	slli	r2,r2,3
   22a30:	e0fff817 	ldw	r3,-32(fp)
   22a34:	1885883a 	add	r2,r3,r2
   22a38:	11000117 	ldw	r4,4(r2)
   22a3c:	e0bff517 	ldw	r2,-44(fp)
   22a40:	100490fa 	slli	r2,r2,3
   22a44:	e0fff617 	ldw	r3,-40(fp)
   22a48:	1885883a 	add	r2,r3,r2
   22a4c:	10c00117 	ldw	r3,4(r2)
   22a50:	180b883a 	mov	r5,r3
   22a54:	00264740 	call	26474 <__mulsf3>
   22a58:	1007883a 	mov	r3,r2
   22a5c:	1805883a 	mov	r2,r3
   22a60:	100b883a 	mov	r5,r2
   22a64:	8009883a 	mov	r4,r16
   22a68:	00268700 	call	26870 <__subsf3>
   22a6c:	1007883a 	mov	r3,r2
   22a70:	1805883a 	mov	r2,r3
   22a74:	e0bff915 	stw	r2,-28(fp)
   22a78:	e0bff417 	ldw	r2,-48(fp)
   22a7c:	100490fa 	slli	r2,r2,3
   22a80:	e0fff817 	ldw	r3,-32(fp)
   22a84:	1885883a 	add	r2,r3,r2
   22a88:	11000017 	ldw	r4,0(r2)
   22a8c:	e0bff517 	ldw	r2,-44(fp)
   22a90:	100490fa 	slli	r2,r2,3
   22a94:	e0fff617 	ldw	r3,-40(fp)
   22a98:	1885883a 	add	r2,r3,r2
   22a9c:	10c00117 	ldw	r3,4(r2)
   22aa0:	180b883a 	mov	r5,r3
   22aa4:	00264740 	call	26474 <__mulsf3>
   22aa8:	1007883a 	mov	r3,r2
   22aac:	1821883a 	mov	r16,r3
   22ab0:	e0bff417 	ldw	r2,-48(fp)
   22ab4:	100490fa 	slli	r2,r2,3
   22ab8:	e0fff817 	ldw	r3,-32(fp)
   22abc:	1885883a 	add	r2,r3,r2
   22ac0:	11000117 	ldw	r4,4(r2)
   22ac4:	e0bff517 	ldw	r2,-44(fp)
   22ac8:	100490fa 	slli	r2,r2,3
   22acc:	e0fff617 	ldw	r3,-40(fp)
   22ad0:	1885883a 	add	r2,r3,r2
   22ad4:	10c00017 	ldw	r3,0(r2)
   22ad8:	180b883a 	mov	r5,r3
   22adc:	00264740 	call	26474 <__mulsf3>
   22ae0:	1007883a 	mov	r3,r2
   22ae4:	1805883a 	mov	r2,r3
   22ae8:	100b883a 	mov	r5,r2
   22aec:	8009883a 	mov	r4,r16
   22af0:	0025b6c0 	call	25b6c <__addsf3>
   22af4:	1007883a 	mov	r3,r2
   22af8:	1805883a 	mov	r2,r3
   22afc:	e0bffa15 	stw	r2,-24(fp)
                C_ADDTO( Fout[ k ] ,t);
   22b00:	e0bff217 	ldw	r2,-56(fp)
   22b04:	100490fa 	slli	r2,r2,3
   22b08:	e0fffb17 	ldw	r3,-20(fp)
   22b0c:	18a1883a 	add	r16,r3,r2
   22b10:	e0bff217 	ldw	r2,-56(fp)
   22b14:	100490fa 	slli	r2,r2,3
   22b18:	e0fffb17 	ldw	r3,-20(fp)
   22b1c:	1885883a 	add	r2,r3,r2
   22b20:	10c00017 	ldw	r3,0(r2)
   22b24:	e0bff917 	ldw	r2,-28(fp)
   22b28:	100b883a 	mov	r5,r2
   22b2c:	1809883a 	mov	r4,r3
   22b30:	0025b6c0 	call	25b6c <__addsf3>
   22b34:	1007883a 	mov	r3,r2
   22b38:	1805883a 	mov	r2,r3
   22b3c:	80800015 	stw	r2,0(r16)
   22b40:	e0bff217 	ldw	r2,-56(fp)
   22b44:	100490fa 	slli	r2,r2,3
   22b48:	e0fffb17 	ldw	r3,-20(fp)
   22b4c:	18a1883a 	add	r16,r3,r2
   22b50:	e0bff217 	ldw	r2,-56(fp)
   22b54:	100490fa 	slli	r2,r2,3
   22b58:	e0fffb17 	ldw	r3,-20(fp)
   22b5c:	1885883a 	add	r2,r3,r2
   22b60:	10c00117 	ldw	r3,4(r2)
   22b64:	e0bffa17 	ldw	r2,-24(fp)
   22b68:	100b883a 	mov	r5,r2
   22b6c:	1809883a 	mov	r4,r3
   22b70:	0025b6c0 	call	25b6c <__addsf3>
   22b74:	1007883a 	mov	r3,r2
   22b78:	1805883a 	mov	r2,r3
   22b7c:	80800115 	stw	r2,4(r16)

        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
            int twidx=0;
            Fout[ k ] = scratch[0];
            for (q=1;q<p;++q ) {
   22b80:	e0bff417 	ldw	r2,-48(fp)
   22b84:	10800044 	addi	r2,r2,1
   22b88:	e0bff415 	stw	r2,-48(fp)
   22b8c:	e0fff417 	ldw	r3,-48(fp)
   22b90:	e0800217 	ldw	r2,8(fp)
   22b94:	18bf8916 	blt	r3,r2,229bc <kf_bfly_generic+0x104>
                twidx += fstride * k;
                if (twidx>=Norig) twidx-=Norig;
                C_MUL(t,scratch[q] , twiddles[twidx] );
                C_ADDTO( Fout[ k ] ,t);
            }
            k += m;
   22b98:	e0fff217 	ldw	r3,-56(fp)
   22b9c:	e0bffe17 	ldw	r2,-8(fp)
   22ba0:	1885883a 	add	r2,r3,r2
   22ba4:	e0bff215 	stw	r2,-56(fp)
            C_FIXDIV(scratch[q1],p);
            k += m;
        }

        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
   22ba8:	e0bff317 	ldw	r2,-52(fp)
   22bac:	10800044 	addi	r2,r2,1
   22bb0:	e0bff315 	stw	r2,-52(fp)
   22bb4:	e0fff317 	ldw	r3,-52(fp)
   22bb8:	e0800217 	ldw	r2,8(fp)
   22bbc:	18bf7216 	blt	r3,r2,22988 <kf_bfly_generic+0xd0>
    kiss_fft_cpx t;
    int Norig = st->nfft;

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);

    for ( u=0; u<m; ++u ) {
   22bc0:	e0bff117 	ldw	r2,-60(fp)
   22bc4:	10800044 	addi	r2,r2,1
   22bc8:	e0bff115 	stw	r2,-60(fp)
   22bcc:	e0fff117 	ldw	r3,-60(fp)
   22bd0:	e0bffe17 	ldw	r2,-8(fp)
   22bd4:	18bf4e16 	blt	r3,r2,22910 <kf_bfly_generic+0x58>
                C_ADDTO( Fout[ k ] ,t);
            }
            k += m;
        }
    }
    KISS_FFT_TMP_FREE(scratch);
   22bd8:	e13ff817 	ldw	r4,-32(fp)
   22bdc:	002af200 	call	2af20 <free>
}
   22be0:	0001883a 	nop
   22be4:	e6ffff04 	addi	sp,fp,-4
   22be8:	dfc00217 	ldw	ra,8(sp)
   22bec:	df000117 	ldw	fp,4(sp)
   22bf0:	dc000017 	ldw	r16,0(sp)
   22bf4:	dec00304 	addi	sp,sp,12
   22bf8:	f800283a 	ret

00022bfc <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
   22bfc:	defff404 	addi	sp,sp,-48
   22c00:	dfc00b15 	stw	ra,44(sp)
   22c04:	df000a15 	stw	fp,40(sp)
   22c08:	df000a04 	addi	fp,sp,40
   22c0c:	e13ffc15 	stw	r4,-16(fp)
   22c10:	e17ffd15 	stw	r5,-12(fp)
   22c14:	e1bffe15 	stw	r6,-8(fp)
   22c18:	e1ffff15 	stw	r7,-4(fp)
    kiss_fft_cpx * Fout_beg=Fout;
   22c1c:	e0bffc17 	ldw	r2,-16(fp)
   22c20:	e0bff815 	stw	r2,-32(fp)
    const int p=*factors++; /* the radix  */
   22c24:	e0800217 	ldw	r2,8(fp)
   22c28:	10c00104 	addi	r3,r2,4
   22c2c:	e0c00215 	stw	r3,8(fp)
   22c30:	10800017 	ldw	r2,0(r2)
   22c34:	e0bff915 	stw	r2,-28(fp)
    const int m=*factors++; /* stage's fft length/p */
   22c38:	e0800217 	ldw	r2,8(fp)
   22c3c:	10c00104 	addi	r3,r2,4
   22c40:	e0c00215 	stw	r3,8(fp)
   22c44:	10800017 	ldw	r2,0(r2)
   22c48:	e0bffa15 	stw	r2,-24(fp)
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   22c4c:	e0fff917 	ldw	r3,-28(fp)
   22c50:	e0bffa17 	ldw	r2,-24(fp)
   22c54:	1885383a 	mul	r2,r3,r2
   22c58:	100490fa 	slli	r2,r2,3
   22c5c:	e0fffc17 	ldw	r3,-16(fp)
   22c60:	1885883a 	add	r2,r3,r2
   22c64:	e0bffb15 	stw	r2,-20(fp)
        }
        return;
    }
#endif

    if (m==1) {
   22c68:	e0bffa17 	ldw	r2,-24(fp)
   22c6c:	10800058 	cmpnei	r2,r2,1
   22c70:	1000141e 	bne	r2,zero,22cc4 <kf_work+0xc8>
        do{
            *Fout = *f;
   22c74:	e0bffc17 	ldw	r2,-16(fp)
   22c78:	e0fffd17 	ldw	r3,-12(fp)
   22c7c:	19000017 	ldw	r4,0(r3)
   22c80:	11000015 	stw	r4,0(r2)
   22c84:	18c00117 	ldw	r3,4(r3)
   22c88:	10c00115 	stw	r3,4(r2)
            f += fstride*in_stride;
   22c8c:	e0ffff17 	ldw	r3,-4(fp)
   22c90:	e0bffe17 	ldw	r2,-8(fp)
   22c94:	1885383a 	mul	r2,r3,r2
   22c98:	100490fa 	slli	r2,r2,3
   22c9c:	e0fffd17 	ldw	r3,-12(fp)
   22ca0:	1885883a 	add	r2,r3,r2
   22ca4:	e0bffd15 	stw	r2,-12(fp)
        }while(++Fout != Fout_end );
   22ca8:	e0bffc17 	ldw	r2,-16(fp)
   22cac:	10800204 	addi	r2,r2,8
   22cb0:	e0bffc15 	stw	r2,-16(fp)
   22cb4:	e0fffc17 	ldw	r3,-16(fp)
   22cb8:	e0bffb17 	ldw	r2,-20(fp)
   22cbc:	18bfed1e 	bne	r3,r2,22c74 <kf_work+0x78>
   22cc0:	00001b06 	br	22d30 <kf_work+0x134>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m, 
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   22cc4:	e0fff917 	ldw	r3,-28(fp)
   22cc8:	e0bffe17 	ldw	r2,-8(fp)
   22ccc:	1887383a 	mul	r3,r3,r2
   22cd0:	e0800317 	ldw	r2,12(fp)
   22cd4:	d8800115 	stw	r2,4(sp)
   22cd8:	e0800217 	ldw	r2,8(fp)
   22cdc:	d8800015 	stw	r2,0(sp)
   22ce0:	e1ffff17 	ldw	r7,-4(fp)
   22ce4:	180d883a 	mov	r6,r3
   22ce8:	e17ffd17 	ldw	r5,-12(fp)
   22cec:	e13ffc17 	ldw	r4,-16(fp)
   22cf0:	0022bfc0 	call	22bfc <kf_work>
            f += fstride*in_stride;
   22cf4:	e0ffff17 	ldw	r3,-4(fp)
   22cf8:	e0bffe17 	ldw	r2,-8(fp)
   22cfc:	1885383a 	mul	r2,r3,r2
   22d00:	100490fa 	slli	r2,r2,3
   22d04:	e0fffd17 	ldw	r3,-12(fp)
   22d08:	1885883a 	add	r2,r3,r2
   22d0c:	e0bffd15 	stw	r2,-12(fp)
        }while( (Fout += m) != Fout_end );
   22d10:	e0bffa17 	ldw	r2,-24(fp)
   22d14:	100490fa 	slli	r2,r2,3
   22d18:	e0fffc17 	ldw	r3,-16(fp)
   22d1c:	1885883a 	add	r2,r3,r2
   22d20:	e0bffc15 	stw	r2,-16(fp)
   22d24:	e0fffc17 	ldw	r3,-16(fp)
   22d28:	e0bffb17 	ldw	r2,-20(fp)
   22d2c:	18bfe51e 	bne	r3,r2,22cc4 <kf_work+0xc8>
    }

    Fout=Fout_beg;
   22d30:	e0bff817 	ldw	r2,-32(fp)
   22d34:	e0bffc15 	stw	r2,-16(fp)

    // recombine the p smaller DFTs 
    switch (p) {
   22d38:	e0bff917 	ldw	r2,-28(fp)
   22d3c:	10c000e0 	cmpeqi	r3,r2,3
   22d40:	1800101e 	bne	r3,zero,22d84 <kf_work+0x188>
   22d44:	10c00108 	cmpgei	r3,r2,4
   22d48:	1800031e 	bne	r3,zero,22d58 <kf_work+0x15c>
   22d4c:	108000a0 	cmpeqi	r2,r2,2
   22d50:	1000061e 	bne	r2,zero,22d6c <kf_work+0x170>
   22d54:	00001f06 	br	22dd4 <kf_work+0x1d8>
   22d58:	10c00120 	cmpeqi	r3,r2,4
   22d5c:	1800101e 	bne	r3,zero,22da0 <kf_work+0x1a4>
   22d60:	10800160 	cmpeqi	r2,r2,5
   22d64:	1000151e 	bne	r2,zero,22dbc <kf_work+0x1c0>
   22d68:	00001a06 	br	22dd4 <kf_work+0x1d8>
        case 2: kf_bfly2(Fout,fstride,st,m); break;
   22d6c:	e1fffa17 	ldw	r7,-24(fp)
   22d70:	e1800317 	ldw	r6,12(fp)
   22d74:	e17ffe17 	ldw	r5,-8(fp)
   22d78:	e13ffc17 	ldw	r4,-16(fp)
   22d7c:	0020e9c0 	call	20e9c <kf_bfly2>
   22d80:	00001c06 	br	22df4 <kf_work+0x1f8>
        case 3: kf_bfly3(Fout,fstride,st,m); break; 
   22d84:	e0bffa17 	ldw	r2,-24(fp)
   22d88:	100f883a 	mov	r7,r2
   22d8c:	e1800317 	ldw	r6,12(fp)
   22d90:	e17ffe17 	ldw	r5,-8(fp)
   22d94:	e13ffc17 	ldw	r4,-16(fp)
   22d98:	00217ac0 	call	217ac <kf_bfly3>
   22d9c:	00001506 	br	22df4 <kf_work+0x1f8>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
   22da0:	e0bffa17 	ldw	r2,-24(fp)
   22da4:	100f883a 	mov	r7,r2
   22da8:	e1800317 	ldw	r6,12(fp)
   22dac:	e17ffe17 	ldw	r5,-8(fp)
   22db0:	e13ffc17 	ldw	r4,-16(fp)
   22db4:	002109c0 	call	2109c <kf_bfly4>
   22db8:	00000e06 	br	22df4 <kf_work+0x1f8>
        case 5: kf_bfly5(Fout,fstride,st,m); break; 
   22dbc:	e1fffa17 	ldw	r7,-24(fp)
   22dc0:	e1800317 	ldw	r6,12(fp)
   22dc4:	e17ffe17 	ldw	r5,-8(fp)
   22dc8:	e13ffc17 	ldw	r4,-16(fp)
   22dcc:	0021db80 	call	21db8 <kf_bfly5>
   22dd0:	00000806 	br	22df4 <kf_work+0x1f8>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
   22dd4:	e0bff917 	ldw	r2,-28(fp)
   22dd8:	d8800015 	stw	r2,0(sp)
   22ddc:	e1fffa17 	ldw	r7,-24(fp)
   22de0:	e1800317 	ldw	r6,12(fp)
   22de4:	e17ffe17 	ldw	r5,-8(fp)
   22de8:	e13ffc17 	ldw	r4,-16(fp)
   22dec:	00228b80 	call	228b8 <kf_bfly_generic>
   22df0:	0001883a 	nop
    }
}
   22df4:	0001883a 	nop
   22df8:	e037883a 	mov	sp,fp
   22dfc:	dfc00117 	ldw	ra,4(sp)
   22e00:	df000017 	ldw	fp,0(sp)
   22e04:	dec00204 	addi	sp,sp,8
   22e08:	f800283a 	ret

00022e0c <kf_factor>:
    where 
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static 
void kf_factor(int n,int * facbuf)
{
   22e0c:	defff904 	addi	sp,sp,-28
   22e10:	dfc00615 	stw	ra,24(sp)
   22e14:	df000515 	stw	fp,20(sp)
   22e18:	df000504 	addi	fp,sp,20
   22e1c:	e13ffe15 	stw	r4,-8(fp)
   22e20:	e17fff15 	stw	r5,-4(fp)
    int p=4;
   22e24:	00800104 	movi	r2,4
   22e28:	e0bffb15 	stw	r2,-20(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
   22e2c:	e13ffe17 	ldw	r4,-8(fp)
   22e30:	00293680 	call	29368 <__floatsidf>
   22e34:	100b883a 	mov	r5,r2
   22e38:	180d883a 	mov	r6,r3
   22e3c:	2809883a 	mov	r4,r5
   22e40:	300b883a 	mov	r5,r6
   22e44:	002374c0 	call	2374c <sqrt>
   22e48:	100b883a 	mov	r5,r2
   22e4c:	180d883a 	mov	r6,r3
   22e50:	2809883a 	mov	r4,r5
   22e54:	300b883a 	mov	r5,r6
   22e58:	00234700 	call	23470 <floor>
   22e5c:	e0bffc15 	stw	r2,-16(fp)
   22e60:	e0fffd15 	stw	r3,-12(fp)

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
   22e64:	00001c06 	br	22ed8 <kf_factor+0xcc>
            switch (p) {
   22e68:	e0bffb17 	ldw	r2,-20(fp)
   22e6c:	10c000a0 	cmpeqi	r3,r2,2
   22e70:	1800051e 	bne	r3,zero,22e88 <kf_factor+0x7c>
   22e74:	10800120 	cmpeqi	r2,r2,4
   22e78:	10000626 	beq	r2,zero,22e94 <kf_factor+0x88>
                case 4: p = 2; break;
   22e7c:	00800084 	movi	r2,2
   22e80:	e0bffb15 	stw	r2,-20(fp)
   22e84:	00000706 	br	22ea4 <kf_factor+0x98>
                case 2: p = 3; break;
   22e88:	008000c4 	movi	r2,3
   22e8c:	e0bffb15 	stw	r2,-20(fp)
   22e90:	00000406 	br	22ea4 <kf_factor+0x98>
                default: p += 2; break;
   22e94:	e0bffb17 	ldw	r2,-20(fp)
   22e98:	10800084 	addi	r2,r2,2
   22e9c:	e0bffb15 	stw	r2,-20(fp)
   22ea0:	0001883a 	nop
            }
            if (p > floor_sqrt)
   22ea4:	e13ffb17 	ldw	r4,-20(fp)
   22ea8:	00293680 	call	29368 <__floatsidf>
   22eac:	1011883a 	mov	r8,r2
   22eb0:	1813883a 	mov	r9,r3
   22eb4:	e1bffc17 	ldw	r6,-16(fp)
   22eb8:	e1fffd17 	ldw	r7,-12(fp)
   22ebc:	4009883a 	mov	r4,r8
   22ec0:	480b883a 	mov	r5,r9
   22ec4:	00281040 	call	28104 <__gedf2>
   22ec8:	00800116 	blt	zero,r2,22ed0 <kf_factor+0xc4>
   22ecc:	00000206 	br	22ed8 <kf_factor+0xcc>
                p = n;          /* no more factors, skip to end */
   22ed0:	e0bffe17 	ldw	r2,-8(fp)
   22ed4:	e0bffb15 	stw	r2,-20(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
   22ed8:	e0bffe17 	ldw	r2,-8(fp)
   22edc:	e17ffb17 	ldw	r5,-20(fp)
   22ee0:	1009883a 	mov	r4,r2
   22ee4:	0025a3c0 	call	25a3c <__modsi3>
   22ee8:	103fdf1e 	bne	r2,zero,22e68 <kf_factor+0x5c>
                default: p += 2; break;
            }
            if (p > floor_sqrt)
                p = n;          /* no more factors, skip to end */
        }
        n /= p;
   22eec:	e17ffb17 	ldw	r5,-20(fp)
   22ef0:	e13ffe17 	ldw	r4,-8(fp)
   22ef4:	00259b80 	call	259b8 <__divsi3>
   22ef8:	e0bffe15 	stw	r2,-8(fp)
        *facbuf++ = p;
   22efc:	e0bfff17 	ldw	r2,-4(fp)
   22f00:	10c00104 	addi	r3,r2,4
   22f04:	e0ffff15 	stw	r3,-4(fp)
   22f08:	e0fffb17 	ldw	r3,-20(fp)
   22f0c:	10c00015 	stw	r3,0(r2)
        *facbuf++ = n;
   22f10:	e0bfff17 	ldw	r2,-4(fp)
   22f14:	10c00104 	addi	r3,r2,4
   22f18:	e0ffff15 	stw	r3,-4(fp)
   22f1c:	e0fffe17 	ldw	r3,-8(fp)
   22f20:	10c00015 	stw	r3,0(r2)
    } while (n > 1);
   22f24:	e0bffe17 	ldw	r2,-8(fp)
   22f28:	10800088 	cmpgei	r2,r2,2
   22f2c:	103fea1e 	bne	r2,zero,22ed8 <kf_factor+0xcc>
}
   22f30:	0001883a 	nop
   22f34:	e037883a 	mov	sp,fp
   22f38:	dfc00117 	ldw	ra,4(sp)
   22f3c:	df000017 	ldw	fp,0(sp)
   22f40:	dec00204 	addi	sp,sp,8
   22f44:	f800283a 	ret

00022f48 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
   22f48:	defff104 	addi	sp,sp,-60
   22f4c:	dfc00e15 	stw	ra,56(sp)
   22f50:	df000d15 	stw	fp,52(sp)
   22f54:	dc400c15 	stw	r17,48(sp)
   22f58:	dc000b15 	stw	r16,44(sp)
   22f5c:	df000d04 	addi	fp,sp,52
   22f60:	e13ffa15 	stw	r4,-24(fp)
   22f64:	e17ffb15 	stw	r5,-20(fp)
   22f68:	e1bffc15 	stw	r6,-16(fp)
   22f6c:	e1fffd15 	stw	r7,-12(fp)
    KISS_FFT_ALIGN_CHECK(mem)

    kiss_fft_cfg st=NULL;
   22f70:	e03ff315 	stw	zero,-52(fp)
    size_t memneeded = KISS_FFT_ALIGN_SIZE_UP(sizeof(struct kiss_fft_state)
   22f74:	e0bffa17 	ldw	r2,-24(fp)
   22f78:	10800844 	addi	r2,r2,33
   22f7c:	100490fa 	slli	r2,r2,3
   22f80:	e0bff715 	stw	r2,-36(fp)
        + sizeof(kiss_fft_cpx)*(nfft-1)); /* twiddle factors*/

    if ( lenmem==NULL ) {
   22f84:	e0bffd17 	ldw	r2,-12(fp)
   22f88:	1000041e 	bne	r2,zero,22f9c <kiss_fft_alloc+0x54>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
   22f8c:	e13ff717 	ldw	r4,-36(fp)
   22f90:	002af0c0 	call	2af0c <malloc>
   22f94:	e0bff315 	stw	r2,-52(fp)
   22f98:	00000b06 	br	22fc8 <kiss_fft_alloc+0x80>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
   22f9c:	e0bffc17 	ldw	r2,-16(fp)
   22fa0:	10000626 	beq	r2,zero,22fbc <kiss_fft_alloc+0x74>
   22fa4:	e0bffd17 	ldw	r2,-12(fp)
   22fa8:	10c00017 	ldw	r3,0(r2)
   22fac:	e0bff717 	ldw	r2,-36(fp)
   22fb0:	18800236 	bltu	r3,r2,22fbc <kiss_fft_alloc+0x74>
            st = (kiss_fft_cfg)mem;
   22fb4:	e0bffc17 	ldw	r2,-16(fp)
   22fb8:	e0bff315 	stw	r2,-52(fp)
        *lenmem = memneeded;
   22fbc:	e0bffd17 	ldw	r2,-12(fp)
   22fc0:	e0fff717 	ldw	r3,-36(fp)
   22fc4:	10c00015 	stw	r3,0(r2)
    }
    if (st) {
   22fc8:	e0bff317 	ldw	r2,-52(fp)
   22fcc:	10006226 	beq	r2,zero,23158 <kiss_fft_alloc+0x210>
        int i;
        st->nfft=nfft;
   22fd0:	e0bff317 	ldw	r2,-52(fp)
   22fd4:	e0fffa17 	ldw	r3,-24(fp)
   22fd8:	10c00015 	stw	r3,0(r2)
        st->inverse = inverse_fft;
   22fdc:	e0bff317 	ldw	r2,-52(fp)
   22fe0:	e0fffb17 	ldw	r3,-20(fp)
   22fe4:	10c00115 	stw	r3,4(r2)

        for (i=0;i<nfft;++i) {
   22fe8:	e03ff415 	stw	zero,-48(fp)
   22fec:	00005206 	br	23138 <kiss_fft_alloc+0x1f0>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
   22ff0:	00951134 	movhi	r2,21572
   22ff4:	108b4604 	addi	r2,r2,11544
   22ff8:	e0bff815 	stw	r2,-32(fp)
   22ffc:	00900274 	movhi	r2,16393
   23000:	10887ec4 	addi	r2,r2,8699
   23004:	e0bff915 	stw	r2,-28(fp)
            double phase = -2*pi*i / nfft;
   23008:	000d883a 	mov	r6,zero
   2300c:	01f00034 	movhi	r7,49152
   23010:	e13ff817 	ldw	r4,-32(fp)
   23014:	e17ff917 	ldw	r5,-28(fp)
   23018:	00282d40 	call	282d4 <__muldf3>
   2301c:	1009883a 	mov	r4,r2
   23020:	180b883a 	mov	r5,r3
   23024:	2021883a 	mov	r16,r4
   23028:	2823883a 	mov	r17,r5
   2302c:	e13ff417 	ldw	r4,-48(fp)
   23030:	00293680 	call	29368 <__floatsidf>
   23034:	1009883a 	mov	r4,r2
   23038:	180b883a 	mov	r5,r3
   2303c:	200d883a 	mov	r6,r4
   23040:	280f883a 	mov	r7,r5
   23044:	8009883a 	mov	r4,r16
   23048:	880b883a 	mov	r5,r17
   2304c:	00282d40 	call	282d4 <__muldf3>
   23050:	1009883a 	mov	r4,r2
   23054:	180b883a 	mov	r5,r3
   23058:	2021883a 	mov	r16,r4
   2305c:	2823883a 	mov	r17,r5
   23060:	e13ffa17 	ldw	r4,-24(fp)
   23064:	00293680 	call	29368 <__floatsidf>
   23068:	1009883a 	mov	r4,r2
   2306c:	180b883a 	mov	r5,r3
   23070:	200d883a 	mov	r6,r4
   23074:	280f883a 	mov	r7,r5
   23078:	8009883a 	mov	r4,r16
   2307c:	880b883a 	mov	r5,r17
   23080:	00277940 	call	27794 <__divdf3>
   23084:	1009883a 	mov	r4,r2
   23088:	180b883a 	mov	r5,r3
   2308c:	e13ff515 	stw	r4,-44(fp)
   23090:	e17ff615 	stw	r5,-40(fp)
            if (st->inverse)
   23094:	e0bff317 	ldw	r2,-52(fp)
   23098:	10800117 	ldw	r2,4(r2)
   2309c:	10000526 	beq	r2,zero,230b4 <kiss_fft_alloc+0x16c>
                phase *= -1;
   230a0:	e0bff517 	ldw	r2,-44(fp)
   230a4:	e0bff515 	stw	r2,-44(fp)
   230a8:	e0bff617 	ldw	r2,-40(fp)
   230ac:	10a0003c 	xorhi	r2,r2,32768
   230b0:	e0bff615 	stw	r2,-40(fp)
            kf_cexp(st->twiddles+i, phase );
   230b4:	e0bff317 	ldw	r2,-52(fp)
   230b8:	10c04204 	addi	r3,r2,264
   230bc:	e0bff417 	ldw	r2,-48(fp)
   230c0:	100490fa 	slli	r2,r2,3
   230c4:	18a1883a 	add	r16,r3,r2
   230c8:	e13ff517 	ldw	r4,-44(fp)
   230cc:	e17ff617 	ldw	r5,-40(fp)
   230d0:	00233840 	call	23384 <cos>
   230d4:	100b883a 	mov	r5,r2
   230d8:	180d883a 	mov	r6,r3
   230dc:	2809883a 	mov	r4,r5
   230e0:	300b883a 	mov	r5,r6
   230e4:	00295fc0 	call	295fc <__truncdfsf2>
   230e8:	1007883a 	mov	r3,r2
   230ec:	80c00015 	stw	r3,0(r16)
   230f0:	e0bff317 	ldw	r2,-52(fp)
   230f4:	10c04204 	addi	r3,r2,264
   230f8:	e0bff417 	ldw	r2,-48(fp)
   230fc:	100490fa 	slli	r2,r2,3
   23100:	18a1883a 	add	r16,r3,r2
   23104:	e13ff517 	ldw	r4,-44(fp)
   23108:	e17ff617 	ldw	r5,-40(fp)
   2310c:	002365c0 	call	2365c <sin>
   23110:	100b883a 	mov	r5,r2
   23114:	180d883a 	mov	r6,r3
   23118:	2809883a 	mov	r4,r5
   2311c:	300b883a 	mov	r5,r6
   23120:	00295fc0 	call	295fc <__truncdfsf2>
   23124:	1007883a 	mov	r3,r2
   23128:	80c00115 	stw	r3,4(r16)
    if (st) {
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;

        for (i=0;i<nfft;++i) {
   2312c:	e0bff417 	ldw	r2,-48(fp)
   23130:	10800044 	addi	r2,r2,1
   23134:	e0bff415 	stw	r2,-48(fp)
   23138:	e0fff417 	ldw	r3,-48(fp)
   2313c:	e0bffa17 	ldw	r2,-24(fp)
   23140:	18bfab16 	blt	r3,r2,22ff0 <kiss_fft_alloc+0xa8>
            if (st->inverse)
                phase *= -1;
            kf_cexp(st->twiddles+i, phase );
        }

        kf_factor(nfft,st->factors);
   23144:	e0bff317 	ldw	r2,-52(fp)
   23148:	10800204 	addi	r2,r2,8
   2314c:	100b883a 	mov	r5,r2
   23150:	e13ffa17 	ldw	r4,-24(fp)
   23154:	0022e0c0 	call	22e0c <kf_factor>
    }
    return st;
   23158:	e0bff317 	ldw	r2,-52(fp)
}
   2315c:	e6fffe04 	addi	sp,fp,-8
   23160:	dfc00317 	ldw	ra,12(sp)
   23164:	df000217 	ldw	fp,8(sp)
   23168:	dc400117 	ldw	r17,4(sp)
   2316c:	dc000017 	ldw	r16,0(sp)
   23170:	dec00404 	addi	sp,sp,16
   23174:	f800283a 	ret

00023178 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
   23178:	defff704 	addi	sp,sp,-36
   2317c:	dfc00815 	stw	ra,32(sp)
   23180:	df000715 	stw	fp,28(sp)
   23184:	df000704 	addi	fp,sp,28
   23188:	e13ffc15 	stw	r4,-16(fp)
   2318c:	e17ffd15 	stw	r5,-12(fp)
   23190:	e1bffe15 	stw	r6,-8(fp)
   23194:	e1ffff15 	stw	r7,-4(fp)
    if (fin == fout) {
   23198:	e0fffd17 	ldw	r3,-12(fp)
   2319c:	e0bffe17 	ldw	r2,-8(fp)
   231a0:	18801a1e 	bne	r3,r2,2320c <kiss_fft_stride+0x94>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   231a4:	e0bffc17 	ldw	r2,-16(fp)
   231a8:	10800017 	ldw	r2,0(r2)
   231ac:	100490fa 	slli	r2,r2,3
   231b0:	1009883a 	mov	r4,r2
   231b4:	002af0c0 	call	2af0c <malloc>
   231b8:	e0bffb15 	stw	r2,-20(fp)
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   231bc:	e0bffc17 	ldw	r2,-16(fp)
   231c0:	10800204 	addi	r2,r2,8
   231c4:	e0fffc17 	ldw	r3,-16(fp)
   231c8:	d8c00115 	stw	r3,4(sp)
   231cc:	d8800015 	stw	r2,0(sp)
   231d0:	e1ffff17 	ldw	r7,-4(fp)
   231d4:	01800044 	movi	r6,1
   231d8:	e17ffd17 	ldw	r5,-12(fp)
   231dc:	e13ffb17 	ldw	r4,-20(fp)
   231e0:	0022bfc0 	call	22bfc <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
   231e4:	e0bffc17 	ldw	r2,-16(fp)
   231e8:	10800017 	ldw	r2,0(r2)
   231ec:	100490fa 	slli	r2,r2,3
   231f0:	100d883a 	mov	r6,r2
   231f4:	e17ffb17 	ldw	r5,-20(fp)
   231f8:	e13ffe17 	ldw	r4,-8(fp)
   231fc:	002b7400 	call	2b740 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
   23200:	e13ffb17 	ldw	r4,-20(fp)
   23204:	002af200 	call	2af20 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
   23208:	00000a06 	br	23234 <kiss_fft_stride+0xbc>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
        KISS_FFT_TMP_FREE(tmpbuf);
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
   2320c:	e0bffc17 	ldw	r2,-16(fp)
   23210:	10800204 	addi	r2,r2,8
   23214:	e0fffc17 	ldw	r3,-16(fp)
   23218:	d8c00115 	stw	r3,4(sp)
   2321c:	d8800015 	stw	r2,0(sp)
   23220:	e1ffff17 	ldw	r7,-4(fp)
   23224:	01800044 	movi	r6,1
   23228:	e17ffd17 	ldw	r5,-12(fp)
   2322c:	e13ffe17 	ldw	r4,-8(fp)
   23230:	0022bfc0 	call	22bfc <kf_work>
    }
}
   23234:	0001883a 	nop
   23238:	e037883a 	mov	sp,fp
   2323c:	dfc00117 	ldw	ra,4(sp)
   23240:	df000017 	ldw	fp,0(sp)
   23244:	dec00204 	addi	sp,sp,8
   23248:	f800283a 	ret

0002324c <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
   2324c:	defffb04 	addi	sp,sp,-20
   23250:	dfc00415 	stw	ra,16(sp)
   23254:	df000315 	stw	fp,12(sp)
   23258:	df000304 	addi	fp,sp,12
   2325c:	e13ffd15 	stw	r4,-12(fp)
   23260:	e17ffe15 	stw	r5,-8(fp)
   23264:	e1bfff15 	stw	r6,-4(fp)
    kiss_fft_stride(cfg,fin,fout,1);
   23268:	01c00044 	movi	r7,1
   2326c:	e1bfff17 	ldw	r6,-4(fp)
   23270:	e17ffe17 	ldw	r5,-8(fp)
   23274:	e13ffd17 	ldw	r4,-12(fp)
   23278:	00231780 	call	23178 <kiss_fft_stride>
}
   2327c:	0001883a 	nop
   23280:	e037883a 	mov	sp,fp
   23284:	dfc00117 	ldw	ra,4(sp)
   23288:	df000017 	ldw	fp,0(sp)
   2328c:	dec00204 	addi	sp,sp,8
   23290:	f800283a 	ret

00023294 <kiss_fft_cleanup>:


void kiss_fft_cleanup(void)
{
   23294:	deffff04 	addi	sp,sp,-4
   23298:	df000015 	stw	fp,0(sp)
   2329c:	d839883a 	mov	fp,sp
    // nothing needed any more
}
   232a0:	0001883a 	nop
   232a4:	e037883a 	mov	sp,fp
   232a8:	df000017 	ldw	fp,0(sp)
   232ac:	dec00104 	addi	sp,sp,4
   232b0:	f800283a 	ret

000232b4 <kiss_fft_next_fast_size>:

int kiss_fft_next_fast_size(int n)
{
   232b4:	defffc04 	addi	sp,sp,-16
   232b8:	dfc00315 	stw	ra,12(sp)
   232bc:	df000215 	stw	fp,8(sp)
   232c0:	df000204 	addi	fp,sp,8
   232c4:	e13fff15 	stw	r4,-4(fp)
    while(1) {
        int m=n;
   232c8:	e0bfff17 	ldw	r2,-4(fp)
   232cc:	e0bffe15 	stw	r2,-8(fp)
        while ( (m%2) == 0 ) m/=2;
   232d0:	00000506 	br	232e8 <kiss_fft_next_fast_size+0x34>
   232d4:	e0bffe17 	ldw	r2,-8(fp)
   232d8:	1006d7fa 	srli	r3,r2,31
   232dc:	1885883a 	add	r2,r3,r2
   232e0:	1005d07a 	srai	r2,r2,1
   232e4:	e0bffe15 	stw	r2,-8(fp)
   232e8:	e0bffe17 	ldw	r2,-8(fp)
   232ec:	1080004c 	andi	r2,r2,1
   232f0:	103ff826 	beq	r2,zero,232d4 <kiss_fft_next_fast_size+0x20>
        while ( (m%3) == 0 ) m/=3;
   232f4:	00000506 	br	2330c <kiss_fft_next_fast_size+0x58>
   232f8:	e0bffe17 	ldw	r2,-8(fp)
   232fc:	014000c4 	movi	r5,3
   23300:	1009883a 	mov	r4,r2
   23304:	00259b80 	call	259b8 <__divsi3>
   23308:	e0bffe15 	stw	r2,-8(fp)
   2330c:	e0bffe17 	ldw	r2,-8(fp)
   23310:	014000c4 	movi	r5,3
   23314:	1009883a 	mov	r4,r2
   23318:	0025a3c0 	call	25a3c <__modsi3>
   2331c:	103ff626 	beq	r2,zero,232f8 <kiss_fft_next_fast_size+0x44>
        while ( (m%5) == 0 ) m/=5;
   23320:	00000506 	br	23338 <kiss_fft_next_fast_size+0x84>
   23324:	e0bffe17 	ldw	r2,-8(fp)
   23328:	01400144 	movi	r5,5
   2332c:	1009883a 	mov	r4,r2
   23330:	00259b80 	call	259b8 <__divsi3>
   23334:	e0bffe15 	stw	r2,-8(fp)
   23338:	e0bffe17 	ldw	r2,-8(fp)
   2333c:	01400144 	movi	r5,5
   23340:	1009883a 	mov	r4,r2
   23344:	0025a3c0 	call	25a3c <__modsi3>
   23348:	103ff626 	beq	r2,zero,23324 <kiss_fft_next_fast_size+0x70>
        if (m<=1)
   2334c:	e0bffe17 	ldw	r2,-8(fp)
   23350:	10800088 	cmpgei	r2,r2,2
   23354:	10000426 	beq	r2,zero,23368 <kiss_fft_next_fast_size+0xb4>
            break; /* n is completely factorable by twos, threes, and fives */
        n++;
   23358:	e0bfff17 	ldw	r2,-4(fp)
   2335c:	10800044 	addi	r2,r2,1
   23360:	e0bfff15 	stw	r2,-4(fp)
    }
   23364:	003fd806 	br	232c8 <kiss_fft_next_fast_size+0x14>
        int m=n;
        while ( (m%2) == 0 ) m/=2;
        while ( (m%3) == 0 ) m/=3;
        while ( (m%5) == 0 ) m/=5;
        if (m<=1)
            break; /* n is completely factorable by twos, threes, and fives */
   23368:	0001883a 	nop
        n++;
    }
    return n;
   2336c:	e0bfff17 	ldw	r2,-4(fp)
}
   23370:	e037883a 	mov	sp,fp
   23374:	dfc00117 	ldw	ra,4(sp)
   23378:	df000017 	ldw	fp,0(sp)
   2337c:	dec00204 	addi	sp,sp,8
   23380:	f800283a 	ret

00023384 <cos>:
   23384:	00a00034 	movhi	r2,32768
   23388:	defffa04 	addi	sp,sp,-24
   2338c:	10bfffc4 	addi	r2,r2,-1
   23390:	00cffa74 	movhi	r3,16361
   23394:	dfc00515 	stw	ra,20(sp)
   23398:	2884703a 	and	r2,r5,r2
   2339c:	18c87ec4 	addi	r3,r3,8699
   233a0:	1880180e 	bge	r3,r2,23404 <cos+0x80>
   233a4:	00dffc34 	movhi	r3,32752
   233a8:	18ffffc4 	addi	r3,r3,-1
   233ac:	1880060e 	bge	r3,r2,233c8 <cos+0x44>
   233b0:	280f883a 	mov	r7,r5
   233b4:	200d883a 	mov	r6,r4
   233b8:	00289ec0 	call	289ec <__subdf3>
   233bc:	dfc00517 	ldw	ra,20(sp)
   233c0:	dec00604 	addi	sp,sp,24
   233c4:	f800283a 	ret
   233c8:	d9800104 	addi	r6,sp,4
   233cc:	002387c0 	call	2387c <__ieee754_rem_pio2>
   233d0:	108000cc 	andi	r2,r2,3
   233d4:	00c00044 	movi	r3,1
   233d8:	10c01726 	beq	r2,r3,23438 <cos+0xb4>
   233dc:	01000084 	movi	r4,2
   233e0:	11000e26 	beq	r2,r4,2341c <cos+0x98>
   233e4:	10001c26 	beq	r2,zero,23458 <cos+0xd4>
   233e8:	d9800317 	ldw	r6,12(sp)
   233ec:	d9c00417 	ldw	r7,16(sp)
   233f0:	d9000117 	ldw	r4,4(sp)
   233f4:	d9400217 	ldw	r5,8(sp)
   233f8:	d8c00015 	stw	r3,0(sp)
   233fc:	00254a40 	call	254a4 <__kernel_sin>
   23400:	003fee06 	br	233bc <cos+0x38>
   23404:	000d883a 	mov	r6,zero
   23408:	000f883a 	mov	r7,zero
   2340c:	00242700 	call	24270 <__kernel_cos>
   23410:	dfc00517 	ldw	ra,20(sp)
   23414:	dec00604 	addi	sp,sp,24
   23418:	f800283a 	ret
   2341c:	d9800317 	ldw	r6,12(sp)
   23420:	d9c00417 	ldw	r7,16(sp)
   23424:	d9000117 	ldw	r4,4(sp)
   23428:	d9400217 	ldw	r5,8(sp)
   2342c:	00242700 	call	24270 <__kernel_cos>
   23430:	18e0003c 	xorhi	r3,r3,32768
   23434:	003fe106 	br	233bc <cos+0x38>
   23438:	d9800317 	ldw	r6,12(sp)
   2343c:	d9c00417 	ldw	r7,16(sp)
   23440:	d9000117 	ldw	r4,4(sp)
   23444:	d9400217 	ldw	r5,8(sp)
   23448:	d8800015 	stw	r2,0(sp)
   2344c:	00254a40 	call	254a4 <__kernel_sin>
   23450:	18e0003c 	xorhi	r3,r3,32768
   23454:	003fd906 	br	233bc <cos+0x38>
   23458:	d9800317 	ldw	r6,12(sp)
   2345c:	d9c00417 	ldw	r7,16(sp)
   23460:	d9000117 	ldw	r4,4(sp)
   23464:	d9400217 	ldw	r5,8(sp)
   23468:	00242700 	call	24270 <__kernel_cos>
   2346c:	003fd306 	br	233bc <cos+0x38>

00023470 <floor>:
   23470:	2811d53a 	srai	r8,r5,20
   23474:	defffa04 	addi	sp,sp,-24
   23478:	dcc00315 	stw	r19,12(sp)
   2347c:	4201ffcc 	andi	r8,r8,2047
   23480:	dc800215 	stw	r18,8(sp)
   23484:	dc400115 	stw	r17,4(sp)
   23488:	dc000015 	stw	r16,0(sp)
   2348c:	dfc00515 	stw	ra,20(sp)
   23490:	dd000415 	stw	r20,16(sp)
   23494:	44bf0044 	addi	r18,r8,-1023
   23498:	018004c4 	movi	r6,19
   2349c:	2821883a 	mov	r16,r5
   234a0:	2005883a 	mov	r2,r4
   234a4:	280f883a 	mov	r7,r5
   234a8:	2827883a 	mov	r19,r5
   234ac:	2023883a 	mov	r17,r4
   234b0:	34801916 	blt	r6,r18,23518 <floor+0xa8>
   234b4:	90003c16 	blt	r18,zero,235a8 <floor+0x138>
   234b8:	05000434 	movhi	r20,16
   234bc:	a53fffc4 	addi	r20,r20,-1
   234c0:	a4a9d83a 	sra	r20,r20,r18
   234c4:	2d0c703a 	and	r6,r5,r20
   234c8:	310cb03a 	or	r6,r6,r4
   234cc:	30001626 	beq	r6,zero,23528 <floor+0xb8>
   234d0:	01a20034 	movhi	r6,34816
   234d4:	01df8e34 	movhi	r7,32312
   234d8:	319d6704 	addi	r6,r6,30108
   234dc:	39f90f04 	addi	r7,r7,-7108
   234e0:	0026ee80 	call	26ee8 <__adddf3>
   234e4:	000d883a 	mov	r6,zero
   234e8:	000f883a 	mov	r7,zero
   234ec:	1009883a 	mov	r4,r2
   234f0:	180b883a 	mov	r5,r3
   234f4:	00281040 	call	28104 <__gedf2>
   234f8:	0080040e 	bge	zero,r2,2350c <floor+0x9c>
   234fc:	80003c16 	blt	r16,zero,235f0 <floor+0x180>
   23500:	0520303a 	nor	r16,zero,r20
   23504:	84e0703a 	and	r16,r16,r19
   23508:	0023883a 	mov	r17,zero
   2350c:	8805883a 	mov	r2,r17
   23510:	8007883a 	mov	r3,r16
   23514:	00000506 	br	2352c <floor+0xbc>
   23518:	01800cc4 	movi	r6,51
   2351c:	34800b0e 	bge	r6,r18,2354c <floor+0xdc>
   23520:	01810004 	movi	r6,1024
   23524:	91802f26 	beq	r18,r6,235e4 <floor+0x174>
   23528:	3807883a 	mov	r3,r7
   2352c:	dfc00517 	ldw	ra,20(sp)
   23530:	dd000417 	ldw	r20,16(sp)
   23534:	dcc00317 	ldw	r19,12(sp)
   23538:	dc800217 	ldw	r18,8(sp)
   2353c:	dc400117 	ldw	r17,4(sp)
   23540:	dc000017 	ldw	r16,0(sp)
   23544:	dec00604 	addi	sp,sp,24
   23548:	f800283a 	ret
   2354c:	423efb44 	addi	r8,r8,-1043
   23550:	053fffc4 	movi	r20,-1
   23554:	a228d83a 	srl	r20,r20,r8
   23558:	250c703a 	and	r6,r4,r20
   2355c:	303ff226 	beq	r6,zero,23528 <floor+0xb8>
   23560:	01a20034 	movhi	r6,34816
   23564:	01df8e34 	movhi	r7,32312
   23568:	319d6704 	addi	r6,r6,30108
   2356c:	39f90f04 	addi	r7,r7,-7108
   23570:	0026ee80 	call	26ee8 <__adddf3>
   23574:	000d883a 	mov	r6,zero
   23578:	000f883a 	mov	r7,zero
   2357c:	1009883a 	mov	r4,r2
   23580:	180b883a 	mov	r5,r3
   23584:	00281040 	call	28104 <__gedf2>
   23588:	00bfe00e 	bge	zero,r2,2350c <floor+0x9c>
   2358c:	80001c16 	blt	r16,zero,23600 <floor+0x190>
   23590:	0510303a 	nor	r8,zero,r20
   23594:	9821883a 	mov	r16,r19
   23598:	8a22703a 	and	r17,r17,r8
   2359c:	8805883a 	mov	r2,r17
   235a0:	8007883a 	mov	r3,r16
   235a4:	003fe106 	br	2352c <floor+0xbc>
   235a8:	01a20034 	movhi	r6,34816
   235ac:	01df8e34 	movhi	r7,32312
   235b0:	319d6704 	addi	r6,r6,30108
   235b4:	39f90f04 	addi	r7,r7,-7108
   235b8:	0026ee80 	call	26ee8 <__adddf3>
   235bc:	000d883a 	mov	r6,zero
   235c0:	000f883a 	mov	r7,zero
   235c4:	1009883a 	mov	r4,r2
   235c8:	180b883a 	mov	r5,r3
   235cc:	00281040 	call	28104 <__gedf2>
   235d0:	00bfce0e 	bge	zero,r2,2350c <floor+0x9c>
   235d4:	80001516 	blt	r16,zero,2362c <floor+0x1bc>
   235d8:	0023883a 	mov	r17,zero
   235dc:	0021883a 	mov	r16,zero
   235e0:	003fca06 	br	2350c <floor+0x9c>
   235e4:	200d883a 	mov	r6,r4
   235e8:	0026ee80 	call	26ee8 <__adddf3>
   235ec:	003fcf06 	br	2352c <floor+0xbc>
   235f0:	00800434 	movhi	r2,16
   235f4:	14a5d83a 	sra	r18,r2,r18
   235f8:	84a7883a 	add	r19,r16,r18
   235fc:	003fc006 	br	23500 <floor+0x90>
   23600:	00800504 	movi	r2,20
   23604:	90801326 	beq	r18,r2,23654 <floor+0x1e4>
   23608:	00800d04 	movi	r2,52
   2360c:	14a5c83a 	sub	r18,r2,r18
   23610:	00800044 	movi	r2,1
   23614:	1484983a 	sll	r2,r2,r18
   23618:	1445883a 	add	r2,r2,r17
   2361c:	14400b2e 	bgeu	r2,r17,2364c <floor+0x1dc>
   23620:	84c00044 	addi	r19,r16,1
   23624:	1023883a 	mov	r17,r2
   23628:	003fd906 	br	23590 <floor+0x120>
   2362c:	00a00034 	movhi	r2,32768
   23630:	10bfffc4 	addi	r2,r2,-1
   23634:	8084703a 	and	r2,r16,r2
   23638:	1462b03a 	or	r17,r2,r17
   2363c:	883fb326 	beq	r17,zero,2350c <floor+0x9c>
   23640:	0023883a 	mov	r17,zero
   23644:	042ffc34 	movhi	r16,49136
   23648:	003fb006 	br	2350c <floor+0x9c>
   2364c:	1023883a 	mov	r17,r2
   23650:	003fcf06 	br	23590 <floor+0x120>
   23654:	84c00044 	addi	r19,r16,1
   23658:	003fcd06 	br	23590 <floor+0x120>

0002365c <sin>:
   2365c:	00a00034 	movhi	r2,32768
   23660:	defffa04 	addi	sp,sp,-24
   23664:	10bfffc4 	addi	r2,r2,-1
   23668:	00cffa74 	movhi	r3,16361
   2366c:	dfc00515 	stw	ra,20(sp)
   23670:	2884703a 	and	r2,r5,r2
   23674:	18c87ec4 	addi	r3,r3,8699
   23678:	1880180e 	bge	r3,r2,236dc <sin+0x80>
   2367c:	00dffc34 	movhi	r3,32752
   23680:	18ffffc4 	addi	r3,r3,-1
   23684:	1880060e 	bge	r3,r2,236a0 <sin+0x44>
   23688:	280f883a 	mov	r7,r5
   2368c:	200d883a 	mov	r6,r4
   23690:	00289ec0 	call	289ec <__subdf3>
   23694:	dfc00517 	ldw	ra,20(sp)
   23698:	dec00604 	addi	sp,sp,24
   2369c:	f800283a 	ret
   236a0:	d9800104 	addi	r6,sp,4
   236a4:	002387c0 	call	2387c <__ieee754_rem_pio2>
   236a8:	108000cc 	andi	r2,r2,3
   236ac:	00c00044 	movi	r3,1
   236b0:	10c01926 	beq	r2,r3,23718 <sin+0xbc>
   236b4:	01000084 	movi	r4,2
   236b8:	11000f26 	beq	r2,r4,236f8 <sin+0x9c>
   236bc:	10001c26 	beq	r2,zero,23730 <sin+0xd4>
   236c0:	d9800317 	ldw	r6,12(sp)
   236c4:	d9c00417 	ldw	r7,16(sp)
   236c8:	d9000117 	ldw	r4,4(sp)
   236cc:	d9400217 	ldw	r5,8(sp)
   236d0:	00242700 	call	24270 <__kernel_cos>
   236d4:	18e0003c 	xorhi	r3,r3,32768
   236d8:	003fee06 	br	23694 <sin+0x38>
   236dc:	d8000015 	stw	zero,0(sp)
   236e0:	000d883a 	mov	r6,zero
   236e4:	000f883a 	mov	r7,zero
   236e8:	00254a40 	call	254a4 <__kernel_sin>
   236ec:	dfc00517 	ldw	ra,20(sp)
   236f0:	dec00604 	addi	sp,sp,24
   236f4:	f800283a 	ret
   236f8:	d9800317 	ldw	r6,12(sp)
   236fc:	d9c00417 	ldw	r7,16(sp)
   23700:	d9000117 	ldw	r4,4(sp)
   23704:	d9400217 	ldw	r5,8(sp)
   23708:	d8c00015 	stw	r3,0(sp)
   2370c:	00254a40 	call	254a4 <__kernel_sin>
   23710:	18e0003c 	xorhi	r3,r3,32768
   23714:	003fdf06 	br	23694 <sin+0x38>
   23718:	d9800317 	ldw	r6,12(sp)
   2371c:	d9c00417 	ldw	r7,16(sp)
   23720:	d9000117 	ldw	r4,4(sp)
   23724:	d9400217 	ldw	r5,8(sp)
   23728:	00242700 	call	24270 <__kernel_cos>
   2372c:	003fd906 	br	23694 <sin+0x38>
   23730:	d9800317 	ldw	r6,12(sp)
   23734:	d9c00417 	ldw	r7,16(sp)
   23738:	d9000117 	ldw	r4,4(sp)
   2373c:	d9400217 	ldw	r5,8(sp)
   23740:	d8c00015 	stw	r3,0(sp)
   23744:	00254a40 	call	254a4 <__kernel_sin>
   23748:	003fd206 	br	23694 <sin+0x38>

0002374c <sqrt>:
   2374c:	defff104 	addi	sp,sp,-60
   23750:	dd000d15 	stw	r20,52(sp)
   23754:	05000134 	movhi	r20,4
   23758:	dcc00c15 	stw	r19,48(sp)
   2375c:	dc800b15 	stw	r18,44(sp)
   23760:	dc400a15 	stw	r17,40(sp)
   23764:	dc000915 	stw	r16,36(sp)
   23768:	dfc00e15 	stw	ra,56(sp)
   2376c:	a52e9d04 	addi	r20,r20,-17804
   23770:	2027883a 	mov	r19,r4
   23774:	2825883a 	mov	r18,r5
   23778:	0023fe80 	call	23fe8 <__ieee754_sqrt>
   2377c:	1821883a 	mov	r16,r3
   23780:	a0c00017 	ldw	r3,0(r20)
   23784:	1023883a 	mov	r17,r2
   23788:	00bfffc4 	movi	r2,-1
   2378c:	18800a26 	beq	r3,r2,237b8 <sqrt+0x6c>
   23790:	9809883a 	mov	r4,r19
   23794:	900b883a 	mov	r5,r18
   23798:	00257840 	call	25784 <__fpclassifyd>
   2379c:	10000626 	beq	r2,zero,237b8 <sqrt+0x6c>
   237a0:	000d883a 	mov	r6,zero
   237a4:	000f883a 	mov	r7,zero
   237a8:	9809883a 	mov	r4,r19
   237ac:	900b883a 	mov	r5,r18
   237b0:	00281e00 	call	281e0 <__ledf2>
   237b4:	10000a16 	blt	r2,zero,237e0 <sqrt+0x94>
   237b8:	8805883a 	mov	r2,r17
   237bc:	8007883a 	mov	r3,r16
   237c0:	dfc00e17 	ldw	ra,56(sp)
   237c4:	dd000d17 	ldw	r20,52(sp)
   237c8:	dcc00c17 	ldw	r19,48(sp)
   237cc:	dc800b17 	ldw	r18,44(sp)
   237d0:	dc400a17 	ldw	r17,40(sp)
   237d4:	dc000917 	ldw	r16,36(sp)
   237d8:	dec00f04 	addi	sp,sp,60
   237dc:	f800283a 	ret
   237e0:	00800044 	movi	r2,1
   237e4:	d8800015 	stw	r2,0(sp)
   237e8:	a4000017 	ldw	r16,0(r20)
   237ec:	00800134 	movhi	r2,4
   237f0:	10a02304 	addi	r2,r2,-32628
   237f4:	d8800115 	stw	r2,4(sp)
   237f8:	d8000815 	stw	zero,32(sp)
   237fc:	dcc00415 	stw	r19,16(sp)
   23800:	dc800515 	stw	r18,20(sp)
   23804:	dcc00215 	stw	r19,8(sp)
   23808:	dc800315 	stw	r18,12(sp)
   2380c:	80000a1e 	bne	r16,zero,23838 <sqrt+0xec>
   23810:	d8000615 	stw	zero,24(sp)
   23814:	d8000715 	stw	zero,28(sp)
   23818:	d809883a 	mov	r4,sp
   2381c:	00257f80 	call	257f8 <matherr>
   23820:	10000e26 	beq	r2,zero,2385c <sqrt+0x110>
   23824:	d8800817 	ldw	r2,32(sp)
   23828:	1000101e 	bne	r2,zero,2386c <sqrt+0x120>
   2382c:	d8800617 	ldw	r2,24(sp)
   23830:	d8c00717 	ldw	r3,28(sp)
   23834:	003fe206 	br	237c0 <sqrt+0x74>
   23838:	000d883a 	mov	r6,zero
   2383c:	000f883a 	mov	r7,zero
   23840:	0009883a 	mov	r4,zero
   23844:	000b883a 	mov	r5,zero
   23848:	00277940 	call	27794 <__divdf3>
   2384c:	d8800615 	stw	r2,24(sp)
   23850:	d8c00715 	stw	r3,28(sp)
   23854:	00800084 	movi	r2,2
   23858:	80bfef1e 	bne	r16,r2,23818 <sqrt+0xcc>
   2385c:	00298200 	call	29820 <__errno>
   23860:	00c00844 	movi	r3,33
   23864:	10c00015 	stw	r3,0(r2)
   23868:	003fee06 	br	23824 <sqrt+0xd8>
   2386c:	00298200 	call	29820 <__errno>
   23870:	d8c00817 	ldw	r3,32(sp)
   23874:	10c00015 	stw	r3,0(r2)
   23878:	003fec06 	br	2382c <sqrt+0xe0>

0002387c <__ieee754_rem_pio2>:
   2387c:	02200034 	movhi	r8,32768
   23880:	deffea04 	addi	sp,sp,-88
   23884:	423fffc4 	addi	r8,r8,-1
   23888:	00cffa74 	movhi	r3,16361
   2388c:	ddc01315 	stw	r23,76(sp)
   23890:	dc400d15 	stw	r17,52(sp)
   23894:	dfc01515 	stw	ra,84(sp)
   23898:	df001415 	stw	fp,80(sp)
   2389c:	dd801215 	stw	r22,72(sp)
   238a0:	dd401115 	stw	r21,68(sp)
   238a4:	dd001015 	stw	r20,64(sp)
   238a8:	dcc00f15 	stw	r19,60(sp)
   238ac:	dc800e15 	stw	r18,56(sp)
   238b0:	dc000c15 	stw	r16,48(sp)
   238b4:	2a2e703a 	and	r23,r5,r8
   238b8:	18c87ec4 	addi	r3,r3,8699
   238bc:	2823883a 	mov	r17,r5
   238c0:	1dc0790e 	bge	r3,r23,23aa8 <__ieee754_rem_pio2+0x22c>
   238c4:	009000f4 	movhi	r2,16387
   238c8:	10b65ec4 	addi	r2,r2,-9861
   238cc:	3021883a 	mov	r16,r6
   238d0:	2027883a 	mov	r19,r4
   238d4:	15c02316 	blt	r2,r23,23964 <__ieee754_rem_pio2+0xe8>
   238d8:	01cffe74 	movhi	r7,16377
   238dc:	39c87ec4 	addi	r7,r7,8699
   238e0:	01951034 	movhi	r6,21568
   238e4:	01417a0e 	bge	zero,r5,23ed0 <__ieee754_rem_pio2+0x654>
   238e8:	00289ec0 	call	289ec <__subdf3>
   238ec:	1025883a 	mov	r18,r2
   238f0:	008ffe74 	movhi	r2,16377
   238f4:	10887ec4 	addi	r2,r2,8699
   238f8:	1823883a 	mov	r17,r3
   238fc:	b8808426 	beq	r23,r2,23b10 <__ieee754_rem_pio2+0x294>
   23900:	018698b4 	movhi	r6,6754
   23904:	01cf7474 	movhi	r7,15825
   23908:	3198cc44 	addi	r6,r6,25393
   2390c:	39ed1844 	addi	r7,r7,-19359
   23910:	9009883a 	mov	r4,r18
   23914:	180b883a 	mov	r5,r3
   23918:	00289ec0 	call	289ec <__subdf3>
   2391c:	100d883a 	mov	r6,r2
   23920:	180f883a 	mov	r7,r3
   23924:	9009883a 	mov	r4,r18
   23928:	880b883a 	mov	r5,r17
   2392c:	80800015 	stw	r2,0(r16)
   23930:	80c00115 	stw	r3,4(r16)
   23934:	00289ec0 	call	289ec <__subdf3>
   23938:	018698b4 	movhi	r6,6754
   2393c:	01cf7474 	movhi	r7,15825
   23940:	3198cc44 	addi	r6,r6,25393
   23944:	39ed1844 	addi	r7,r7,-19359
   23948:	1009883a 	mov	r4,r2
   2394c:	180b883a 	mov	r5,r3
   23950:	00289ec0 	call	289ec <__subdf3>
   23954:	80800215 	stw	r2,8(r16)
   23958:	80c00315 	stw	r3,12(r16)
   2395c:	00800044 	movi	r2,1
   23960:	00005606 	br	23abc <__ieee754_rem_pio2+0x240>
   23964:	00904e74 	movhi	r2,16697
   23968:	10887ec4 	addi	r2,r2,8699
   2396c:	15c0830e 	bge	r2,r23,23b7c <__ieee754_rem_pio2+0x300>
   23970:	009ffc34 	movhi	r2,32752
   23974:	10bfffc4 	addi	r2,r2,-1
   23978:	15c05c16 	blt	r2,r23,23aec <__ieee754_rem_pio2+0x270>
   2397c:	b829d53a 	srai	r20,r23,20
   23980:	a53efa84 	addi	r20,r20,-1046
   23984:	a024953a 	slli	r18,r20,20
   23988:	bca5c83a 	sub	r18,r23,r18
   2398c:	900b883a 	mov	r5,r18
   23990:	00292e80 	call	292e8 <__fixdfsi>
   23994:	1009883a 	mov	r4,r2
   23998:	00293680 	call	29368 <__floatsidf>
   2399c:	9809883a 	mov	r4,r19
   239a0:	900b883a 	mov	r5,r18
   239a4:	100d883a 	mov	r6,r2
   239a8:	180f883a 	mov	r7,r3
   239ac:	d8800215 	stw	r2,8(sp)
   239b0:	d8c00315 	stw	r3,12(sp)
   239b4:	00289ec0 	call	289ec <__subdf3>
   239b8:	000d883a 	mov	r6,zero
   239bc:	01d05c34 	movhi	r7,16752
   239c0:	1009883a 	mov	r4,r2
   239c4:	180b883a 	mov	r5,r3
   239c8:	00282d40 	call	282d4 <__muldf3>
   239cc:	180b883a 	mov	r5,r3
   239d0:	1009883a 	mov	r4,r2
   239d4:	182b883a 	mov	r21,r3
   239d8:	102d883a 	mov	r22,r2
   239dc:	00292e80 	call	292e8 <__fixdfsi>
   239e0:	1009883a 	mov	r4,r2
   239e4:	00293680 	call	29368 <__floatsidf>
   239e8:	100d883a 	mov	r6,r2
   239ec:	180f883a 	mov	r7,r3
   239f0:	b009883a 	mov	r4,r22
   239f4:	a80b883a 	mov	r5,r21
   239f8:	1027883a 	mov	r19,r2
   239fc:	1825883a 	mov	r18,r3
   23a00:	d8800415 	stw	r2,16(sp)
   23a04:	d8c00515 	stw	r3,20(sp)
   23a08:	00289ec0 	call	289ec <__subdf3>
   23a0c:	000d883a 	mov	r6,zero
   23a10:	01d05c34 	movhi	r7,16752
   23a14:	1009883a 	mov	r4,r2
   23a18:	180b883a 	mov	r5,r3
   23a1c:	00282d40 	call	282d4 <__muldf3>
   23a20:	000d883a 	mov	r6,zero
   23a24:	000f883a 	mov	r7,zero
   23a28:	1009883a 	mov	r4,r2
   23a2c:	180b883a 	mov	r5,r3
   23a30:	d8800615 	stw	r2,24(sp)
   23a34:	d8c00715 	stw	r3,28(sp)
   23a38:	002807c0 	call	2807c <__eqdf2>
   23a3c:	1001431e 	bne	r2,zero,23f4c <__ieee754_rem_pio2+0x6d0>
   23a40:	000f883a 	mov	r7,zero
   23a44:	000d883a 	mov	r6,zero
   23a48:	9809883a 	mov	r4,r19
   23a4c:	900b883a 	mov	r5,r18
   23a50:	002807c0 	call	2807c <__eqdf2>
   23a54:	100f003a 	cmpeq	r7,r2,zero
   23a58:	00800084 	movi	r2,2
   23a5c:	11cfc83a 	sub	r7,r2,r7
   23a60:	00800084 	movi	r2,2
   23a64:	d8800015 	stw	r2,0(sp)
   23a68:	00800134 	movhi	r2,4
   23a6c:	10a04504 	addi	r2,r2,-32492
   23a70:	d8800115 	stw	r2,4(sp)
   23a74:	a00d883a 	mov	r6,r20
   23a78:	800b883a 	mov	r5,r16
   23a7c:	d9000204 	addi	r4,sp,8
   23a80:	00247140 	call	24714 <__kernel_rem_pio2>
   23a84:	88000d0e 	bge	r17,zero,23abc <__ieee754_rem_pio2+0x240>
   23a88:	81000117 	ldw	r4,4(r16)
   23a8c:	80c00317 	ldw	r3,12(r16)
   23a90:	0085c83a 	sub	r2,zero,r2
   23a94:	2120003c 	xorhi	r4,r4,32768
   23a98:	18e0003c 	xorhi	r3,r3,32768
   23a9c:	81000115 	stw	r4,4(r16)
   23aa0:	80c00315 	stw	r3,12(r16)
   23aa4:	00000506 	br	23abc <__ieee754_rem_pio2+0x240>
   23aa8:	31000015 	stw	r4,0(r6)
   23aac:	31400115 	stw	r5,4(r6)
   23ab0:	30000215 	stw	zero,8(r6)
   23ab4:	30000315 	stw	zero,12(r6)
   23ab8:	0005883a 	mov	r2,zero
   23abc:	dfc01517 	ldw	ra,84(sp)
   23ac0:	df001417 	ldw	fp,80(sp)
   23ac4:	ddc01317 	ldw	r23,76(sp)
   23ac8:	dd801217 	ldw	r22,72(sp)
   23acc:	dd401117 	ldw	r21,68(sp)
   23ad0:	dd001017 	ldw	r20,64(sp)
   23ad4:	dcc00f17 	ldw	r19,60(sp)
   23ad8:	dc800e17 	ldw	r18,56(sp)
   23adc:	dc400d17 	ldw	r17,52(sp)
   23ae0:	dc000c17 	ldw	r16,48(sp)
   23ae4:	dec01604 	addi	sp,sp,88
   23ae8:	f800283a 	ret
   23aec:	200d883a 	mov	r6,r4
   23af0:	280f883a 	mov	r7,r5
   23af4:	00289ec0 	call	289ec <__subdf3>
   23af8:	80800215 	stw	r2,8(r16)
   23afc:	80800015 	stw	r2,0(r16)
   23b00:	80c00315 	stw	r3,12(r16)
   23b04:	80c00115 	stw	r3,4(r16)
   23b08:	0005883a 	mov	r2,zero
   23b0c:	003feb06 	br	23abc <__ieee754_rem_pio2+0x240>
   23b10:	01cf7474 	movhi	r7,15825
   23b14:	9009883a 	mov	r4,r18
   23b18:	39ed1844 	addi	r7,r7,-19359
   23b1c:	01869834 	movhi	r6,6752
   23b20:	180b883a 	mov	r5,r3
   23b24:	00289ec0 	call	289ec <__subdf3>
   23b28:	018b80f4 	movhi	r6,11779
   23b2c:	01cee8f4 	movhi	r7,15267
   23b30:	319c1cc4 	addi	r6,r6,28787
   23b34:	39c66284 	addi	r7,r7,6538
   23b38:	1009883a 	mov	r4,r2
   23b3c:	180b883a 	mov	r5,r3
   23b40:	1025883a 	mov	r18,r2
   23b44:	1823883a 	mov	r17,r3
   23b48:	00289ec0 	call	289ec <__subdf3>
   23b4c:	100d883a 	mov	r6,r2
   23b50:	180f883a 	mov	r7,r3
   23b54:	9009883a 	mov	r4,r18
   23b58:	880b883a 	mov	r5,r17
   23b5c:	80800015 	stw	r2,0(r16)
   23b60:	80c00115 	stw	r3,4(r16)
   23b64:	00289ec0 	call	289ec <__subdf3>
   23b68:	018b80f4 	movhi	r6,11779
   23b6c:	01cee8f4 	movhi	r7,15267
   23b70:	319c1cc4 	addi	r6,r6,28787
   23b74:	39c66284 	addi	r7,r7,6538
   23b78:	003f7306 	br	23948 <__ieee754_rem_pio2+0xcc>
   23b7c:	00257700 	call	25770 <fabs>
   23b80:	019b72b4 	movhi	r6,28106
   23b84:	01cff934 	movhi	r7,16356
   23b88:	31b220c4 	addi	r6,r6,-14205
   23b8c:	39d7cc04 	addi	r7,r7,24368
   23b90:	1009883a 	mov	r4,r2
   23b94:	180b883a 	mov	r5,r3
   23b98:	102d883a 	mov	r22,r2
   23b9c:	182b883a 	mov	r21,r3
   23ba0:	00282d40 	call	282d4 <__muldf3>
   23ba4:	000d883a 	mov	r6,zero
   23ba8:	01cff834 	movhi	r7,16352
   23bac:	1009883a 	mov	r4,r2
   23bb0:	180b883a 	mov	r5,r3
   23bb4:	0026ee80 	call	26ee8 <__adddf3>
   23bb8:	180b883a 	mov	r5,r3
   23bbc:	1009883a 	mov	r4,r2
   23bc0:	00292e80 	call	292e8 <__fixdfsi>
   23bc4:	1009883a 	mov	r4,r2
   23bc8:	1025883a 	mov	r18,r2
   23bcc:	00293680 	call	29368 <__floatsidf>
   23bd0:	01cffe74 	movhi	r7,16377
   23bd4:	39c87ec4 	addi	r7,r7,8699
   23bd8:	01951034 	movhi	r6,21568
   23bdc:	1009883a 	mov	r4,r2
   23be0:	180b883a 	mov	r5,r3
   23be4:	1029883a 	mov	r20,r2
   23be8:	1827883a 	mov	r19,r3
   23bec:	00282d40 	call	282d4 <__muldf3>
   23bf0:	b009883a 	mov	r4,r22
   23bf4:	a80b883a 	mov	r5,r21
   23bf8:	100d883a 	mov	r6,r2
   23bfc:	180f883a 	mov	r7,r3
   23c00:	00289ec0 	call	289ec <__subdf3>
   23c04:	018698b4 	movhi	r6,6754
   23c08:	01cf7474 	movhi	r7,15825
   23c0c:	a009883a 	mov	r4,r20
   23c10:	3198cc44 	addi	r6,r6,25393
   23c14:	39ed1844 	addi	r7,r7,-19359
   23c18:	980b883a 	mov	r5,r19
   23c1c:	1039883a 	mov	fp,r2
   23c20:	d8c00815 	stw	r3,32(sp)
   23c24:	00282d40 	call	282d4 <__muldf3>
   23c28:	010007c4 	movi	r4,31
   23c2c:	e017883a 	mov	r11,fp
   23c30:	da800817 	ldw	r10,32(sp)
   23c34:	102d883a 	mov	r22,r2
   23c38:	182b883a 	mov	r21,r3
   23c3c:	24802816 	blt	r4,r18,23ce0 <__ieee754_rem_pio2+0x464>
   23c40:	913fffc4 	addi	r4,r18,-1
   23c44:	2109883a 	add	r4,r4,r4
   23c48:	01400134 	movhi	r5,4
   23c4c:	2109883a 	add	r4,r4,r4
   23c50:	29602504 	addi	r5,r5,-32620
   23c54:	2909883a 	add	r4,r5,r4
   23c58:	21000017 	ldw	r4,0(r4)
   23c5c:	b9002026 	beq	r23,r4,23ce0 <__ieee754_rem_pio2+0x464>
   23c60:	100d883a 	mov	r6,r2
   23c64:	180f883a 	mov	r7,r3
   23c68:	e009883a 	mov	r4,fp
   23c6c:	500b883a 	mov	r5,r10
   23c70:	da800b15 	stw	r10,44(sp)
   23c74:	df000a15 	stw	fp,40(sp)
   23c78:	00289ec0 	call	289ec <__subdf3>
   23c7c:	da800b17 	ldw	r10,44(sp)
   23c80:	dac00a17 	ldw	r11,40(sp)
   23c84:	1019883a 	mov	r12,r2
   23c88:	1813883a 	mov	r9,r3
   23c8c:	80800015 	stw	r2,0(r16)
   23c90:	80c00115 	stw	r3,4(r16)
   23c94:	600d883a 	mov	r6,r12
   23c98:	480f883a 	mov	r7,r9
   23c9c:	5809883a 	mov	r4,r11
   23ca0:	500b883a 	mov	r5,r10
   23ca4:	da400b15 	stw	r9,44(sp)
   23ca8:	db000a15 	stw	r12,40(sp)
   23cac:	00289ec0 	call	289ec <__subdf3>
   23cb0:	b00d883a 	mov	r6,r22
   23cb4:	a80f883a 	mov	r7,r21
   23cb8:	1009883a 	mov	r4,r2
   23cbc:	180b883a 	mov	r5,r3
   23cc0:	00289ec0 	call	289ec <__subdf3>
   23cc4:	80800215 	stw	r2,8(r16)
   23cc8:	80c00315 	stw	r3,12(r16)
   23ccc:	da400b17 	ldw	r9,44(sp)
   23cd0:	db000a17 	ldw	r12,40(sp)
   23cd4:	88009f16 	blt	r17,zero,23f54 <__ieee754_rem_pio2+0x6d8>
   23cd8:	9005883a 	mov	r2,r18
   23cdc:	003f7706 	br	23abc <__ieee754_rem_pio2+0x240>
   23ce0:	d9400817 	ldw	r5,32(sp)
   23ce4:	100d883a 	mov	r6,r2
   23ce8:	180f883a 	mov	r7,r3
   23cec:	e009883a 	mov	r4,fp
   23cf0:	da800b15 	stw	r10,44(sp)
   23cf4:	dac00a15 	stw	r11,40(sp)
   23cf8:	00289ec0 	call	289ec <__subdf3>
   23cfc:	1019883a 	mov	r12,r2
   23d00:	1804d53a 	srli	r2,r3,20
   23d04:	b811d53a 	srai	r8,r23,20
   23d08:	1813883a 	mov	r9,r3
   23d0c:	1081ffcc 	andi	r2,r2,2047
   23d10:	80c00115 	stw	r3,4(r16)
   23d14:	83000015 	stw	r12,0(r16)
   23d18:	4085c83a 	sub	r2,r8,r2
   23d1c:	00c00404 	movi	r3,16
   23d20:	da800b17 	ldw	r10,44(sp)
   23d24:	dac00a17 	ldw	r11,40(sp)
   23d28:	18bfda0e 	bge	r3,r2,23c94 <__ieee754_rem_pio2+0x418>
   23d2c:	01cf7474 	movhi	r7,15825
   23d30:	39ed1844 	addi	r7,r7,-19359
   23d34:	01869834 	movhi	r6,6752
   23d38:	a009883a 	mov	r4,r20
   23d3c:	980b883a 	mov	r5,r19
   23d40:	da000a15 	stw	r8,40(sp)
   23d44:	00282d40 	call	282d4 <__muldf3>
   23d48:	d9400817 	ldw	r5,32(sp)
   23d4c:	100d883a 	mov	r6,r2
   23d50:	180f883a 	mov	r7,r3
   23d54:	e009883a 	mov	r4,fp
   23d58:	102d883a 	mov	r22,r2
   23d5c:	182b883a 	mov	r21,r3
   23d60:	00289ec0 	call	289ec <__subdf3>
   23d64:	d9400817 	ldw	r5,32(sp)
   23d68:	100d883a 	mov	r6,r2
   23d6c:	180f883a 	mov	r7,r3
   23d70:	e009883a 	mov	r4,fp
   23d74:	182f883a 	mov	r23,r3
   23d78:	d8800915 	stw	r2,36(sp)
   23d7c:	00289ec0 	call	289ec <__subdf3>
   23d80:	b00d883a 	mov	r6,r22
   23d84:	a80f883a 	mov	r7,r21
   23d88:	1009883a 	mov	r4,r2
   23d8c:	180b883a 	mov	r5,r3
   23d90:	00289ec0 	call	289ec <__subdf3>
   23d94:	018b80f4 	movhi	r6,11779
   23d98:	01cee8f4 	movhi	r7,15267
   23d9c:	319c1cc4 	addi	r6,r6,28787
   23da0:	39c66284 	addi	r7,r7,6538
   23da4:	a009883a 	mov	r4,r20
   23da8:	980b883a 	mov	r5,r19
   23dac:	102d883a 	mov	r22,r2
   23db0:	182b883a 	mov	r21,r3
   23db4:	00282d40 	call	282d4 <__muldf3>
   23db8:	b00d883a 	mov	r6,r22
   23dbc:	a80f883a 	mov	r7,r21
   23dc0:	1009883a 	mov	r4,r2
   23dc4:	180b883a 	mov	r5,r3
   23dc8:	00289ec0 	call	289ec <__subdf3>
   23dcc:	d9000917 	ldw	r4,36(sp)
   23dd0:	100d883a 	mov	r6,r2
   23dd4:	180f883a 	mov	r7,r3
   23dd8:	b80b883a 	mov	r5,r23
   23ddc:	102d883a 	mov	r22,r2
   23de0:	182b883a 	mov	r21,r3
   23de4:	00289ec0 	call	289ec <__subdf3>
   23de8:	1019883a 	mov	r12,r2
   23dec:	1804d53a 	srli	r2,r3,20
   23df0:	da000a17 	ldw	r8,40(sp)
   23df4:	83000015 	stw	r12,0(r16)
   23df8:	1081ffcc 	andi	r2,r2,2047
   23dfc:	4091c83a 	sub	r8,r8,r2
   23e00:	80c00115 	stw	r3,4(r16)
   23e04:	00800c44 	movi	r2,49
   23e08:	1813883a 	mov	r9,r3
   23e0c:	1200730e 	bge	r2,r8,23fdc <__ieee754_rem_pio2+0x760>
   23e10:	01cee8f4 	movhi	r7,15267
   23e14:	39c66284 	addi	r7,r7,6538
   23e18:	018b8034 	movhi	r6,11776
   23e1c:	a009883a 	mov	r4,r20
   23e20:	980b883a 	mov	r5,r19
   23e24:	00282d40 	call	282d4 <__muldf3>
   23e28:	d9000917 	ldw	r4,36(sp)
   23e2c:	100d883a 	mov	r6,r2
   23e30:	180f883a 	mov	r7,r3
   23e34:	b80b883a 	mov	r5,r23
   23e38:	102d883a 	mov	r22,r2
   23e3c:	182b883a 	mov	r21,r3
   23e40:	00289ec0 	call	289ec <__subdf3>
   23e44:	d9000917 	ldw	r4,36(sp)
   23e48:	100d883a 	mov	r6,r2
   23e4c:	180f883a 	mov	r7,r3
   23e50:	b80b883a 	mov	r5,r23
   23e54:	d8c00b15 	stw	r3,44(sp)
   23e58:	d8800a15 	stw	r2,40(sp)
   23e5c:	00289ec0 	call	289ec <__subdf3>
   23e60:	b00d883a 	mov	r6,r22
   23e64:	a80f883a 	mov	r7,r21
   23e68:	1009883a 	mov	r4,r2
   23e6c:	180b883a 	mov	r5,r3
   23e70:	00289ec0 	call	289ec <__subdf3>
   23e74:	01894834 	movhi	r6,9504
   23e78:	01ce5f34 	movhi	r7,14716
   23e7c:	31927044 	addi	r6,r6,18881
   23e80:	39e0e684 	addi	r7,r7,-31846
   23e84:	a009883a 	mov	r4,r20
   23e88:	980b883a 	mov	r5,r19
   23e8c:	102d883a 	mov	r22,r2
   23e90:	182b883a 	mov	r21,r3
   23e94:	00282d40 	call	282d4 <__muldf3>
   23e98:	b00d883a 	mov	r6,r22
   23e9c:	a80f883a 	mov	r7,r21
   23ea0:	1009883a 	mov	r4,r2
   23ea4:	180b883a 	mov	r5,r3
   23ea8:	00289ec0 	call	289ec <__subdf3>
   23eac:	dac00a17 	ldw	r11,40(sp)
   23eb0:	da800b17 	ldw	r10,44(sp)
   23eb4:	102d883a 	mov	r22,r2
   23eb8:	182b883a 	mov	r21,r3
   23ebc:	100d883a 	mov	r6,r2
   23ec0:	180f883a 	mov	r7,r3
   23ec4:	5809883a 	mov	r4,r11
   23ec8:	500b883a 	mov	r5,r10
   23ecc:	003f6a06 	br	23c78 <__ieee754_rem_pio2+0x3fc>
   23ed0:	0026ee80 	call	26ee8 <__adddf3>
   23ed4:	1025883a 	mov	r18,r2
   23ed8:	008ffe74 	movhi	r2,16377
   23edc:	10887ec4 	addi	r2,r2,8699
   23ee0:	1823883a 	mov	r17,r3
   23ee4:	b8802226 	beq	r23,r2,23f70 <__ieee754_rem_pio2+0x6f4>
   23ee8:	018698b4 	movhi	r6,6754
   23eec:	01cf7474 	movhi	r7,15825
   23ef0:	3198cc44 	addi	r6,r6,25393
   23ef4:	39ed1844 	addi	r7,r7,-19359
   23ef8:	9009883a 	mov	r4,r18
   23efc:	180b883a 	mov	r5,r3
   23f00:	0026ee80 	call	26ee8 <__adddf3>
   23f04:	100d883a 	mov	r6,r2
   23f08:	180f883a 	mov	r7,r3
   23f0c:	9009883a 	mov	r4,r18
   23f10:	880b883a 	mov	r5,r17
   23f14:	80800015 	stw	r2,0(r16)
   23f18:	80c00115 	stw	r3,4(r16)
   23f1c:	00289ec0 	call	289ec <__subdf3>
   23f20:	018698b4 	movhi	r6,6754
   23f24:	01cf7474 	movhi	r7,15825
   23f28:	3198cc44 	addi	r6,r6,25393
   23f2c:	39ed1844 	addi	r7,r7,-19359
   23f30:	1009883a 	mov	r4,r2
   23f34:	180b883a 	mov	r5,r3
   23f38:	0026ee80 	call	26ee8 <__adddf3>
   23f3c:	80800215 	stw	r2,8(r16)
   23f40:	80c00315 	stw	r3,12(r16)
   23f44:	00bfffc4 	movi	r2,-1
   23f48:	003edc06 	br	23abc <__ieee754_rem_pio2+0x240>
   23f4c:	01c000c4 	movi	r7,3
   23f50:	003ec306 	br	23a60 <__ieee754_rem_pio2+0x1e4>
   23f54:	4a60003c 	xorhi	r9,r9,32768
   23f58:	18e0003c 	xorhi	r3,r3,32768
   23f5c:	83000015 	stw	r12,0(r16)
   23f60:	82400115 	stw	r9,4(r16)
   23f64:	80c00315 	stw	r3,12(r16)
   23f68:	0485c83a 	sub	r2,zero,r18
   23f6c:	003ed306 	br	23abc <__ieee754_rem_pio2+0x240>
   23f70:	01cf7474 	movhi	r7,15825
   23f74:	9009883a 	mov	r4,r18
   23f78:	39ed1844 	addi	r7,r7,-19359
   23f7c:	01869834 	movhi	r6,6752
   23f80:	180b883a 	mov	r5,r3
   23f84:	0026ee80 	call	26ee8 <__adddf3>
   23f88:	018b80f4 	movhi	r6,11779
   23f8c:	01cee8f4 	movhi	r7,15267
   23f90:	319c1cc4 	addi	r6,r6,28787
   23f94:	39c66284 	addi	r7,r7,6538
   23f98:	1009883a 	mov	r4,r2
   23f9c:	180b883a 	mov	r5,r3
   23fa0:	1025883a 	mov	r18,r2
   23fa4:	1823883a 	mov	r17,r3
   23fa8:	0026ee80 	call	26ee8 <__adddf3>
   23fac:	100d883a 	mov	r6,r2
   23fb0:	180f883a 	mov	r7,r3
   23fb4:	9009883a 	mov	r4,r18
   23fb8:	880b883a 	mov	r5,r17
   23fbc:	80800015 	stw	r2,0(r16)
   23fc0:	80c00115 	stw	r3,4(r16)
   23fc4:	00289ec0 	call	289ec <__subdf3>
   23fc8:	018b80f4 	movhi	r6,11779
   23fcc:	01cee8f4 	movhi	r7,15267
   23fd0:	319c1cc4 	addi	r6,r6,28787
   23fd4:	39c66284 	addi	r7,r7,6538
   23fd8:	003fd506 	br	23f30 <__ieee754_rem_pio2+0x6b4>
   23fdc:	dac00917 	ldw	r11,36(sp)
   23fe0:	b815883a 	mov	r10,r23
   23fe4:	003f2b06 	br	23c94 <__ieee754_rem_pio2+0x418>

00023fe8 <__ieee754_sqrt>:
   23fe8:	defffd04 	addi	sp,sp,-12
   23fec:	dc400115 	stw	r17,4(sp)
   23ff0:	dc000015 	stw	r16,0(sp)
   23ff4:	dfc00215 	stw	ra,8(sp)
   23ff8:	28dffc2c 	andhi	r3,r5,32752
   23ffc:	009ffc34 	movhi	r2,32752
   24000:	2821883a 	mov	r16,r5
   24004:	2023883a 	mov	r17,r4
   24008:	200d883a 	mov	r6,r4
   2400c:	18807b26 	beq	r3,r2,241fc <__ieee754_sqrt+0x214>
   24010:	01405f0e 	bge	zero,r5,24190 <__ieee754_sqrt+0x1a8>
   24014:	2815d53a 	srai	r10,r5,20
   24018:	50006a26 	beq	r10,zero,241c4 <__ieee754_sqrt+0x1dc>
   2401c:	00c00434 	movhi	r3,16
   24020:	52bf0044 	addi	r10,r10,-1023
   24024:	18ffffc4 	addi	r3,r3,-1
   24028:	80c6703a 	and	r3,r16,r3
   2402c:	5080004c 	andi	r2,r10,1
   24030:	18c00434 	orhi	r3,r3,16
   24034:	1000511e 	bne	r2,zero,2417c <__ieee754_sqrt+0x194>
   24038:	3004d7fa 	srli	r2,r6,31
   2403c:	5015d07a 	srai	r10,r10,1
   24040:	18c7883a 	add	r3,r3,r3
   24044:	10c5883a 	add	r2,r2,r3
   24048:	01400584 	movi	r5,22
   2404c:	3187883a 	add	r3,r6,r6
   24050:	0013883a 	mov	r9,zero
   24054:	000f883a 	mov	r7,zero
   24058:	01000834 	movhi	r4,32
   2405c:	390d883a 	add	r6,r7,r4
   24060:	1810d7fa 	srli	r8,r3,31
   24064:	297fffc4 	addi	r5,r5,-1
   24068:	11800316 	blt	r2,r6,24078 <__ieee754_sqrt+0x90>
   2406c:	1185c83a 	sub	r2,r2,r6
   24070:	310f883a 	add	r7,r6,r4
   24074:	4913883a 	add	r9,r9,r4
   24078:	1085883a 	add	r2,r2,r2
   2407c:	4085883a 	add	r2,r8,r2
   24080:	18c7883a 	add	r3,r3,r3
   24084:	2008d07a 	srli	r4,r4,1
   24088:	283ff41e 	bne	r5,zero,2405c <__ieee754_sqrt+0x74>
   2408c:	01200034 	movhi	r4,32768
   24090:	01800804 	movi	r6,32
   24094:	0011883a 	mov	r8,zero
   24098:	0019883a 	mov	r12,zero
   2409c:	201b883a 	mov	r13,r4
   240a0:	00000806 	br	240c4 <__ieee754_sqrt+0xdc>
   240a4:	38801726 	beq	r7,r2,24104 <__ieee754_sqrt+0x11c>
   240a8:	180ad7fa 	srli	r5,r3,31
   240ac:	1085883a 	add	r2,r2,r2
   240b0:	31bfffc4 	addi	r6,r6,-1
   240b4:	2885883a 	add	r2,r5,r2
   240b8:	18c7883a 	add	r3,r3,r3
   240bc:	2008d07a 	srli	r4,r4,1
   240c0:	30001726 	beq	r6,zero,24120 <__ieee754_sqrt+0x138>
   240c4:	230b883a 	add	r5,r4,r12
   240c8:	38bff60e 	bge	r7,r2,240a4 <__ieee754_sqrt+0xbc>
   240cc:	2ae0002c 	andhi	r11,r5,32768
   240d0:	2919883a 	add	r12,r5,r4
   240d4:	5b400826 	beq	r11,r13,240f8 <__ieee754_sqrt+0x110>
   240d8:	3817883a 	mov	r11,r7
   240dc:	11c5c83a 	sub	r2,r2,r7
   240e0:	1940012e 	bgeu	r3,r5,240e8 <__ieee754_sqrt+0x100>
   240e4:	10bfffc4 	addi	r2,r2,-1
   240e8:	1947c83a 	sub	r3,r3,r5
   240ec:	4111883a 	add	r8,r8,r4
   240f0:	580f883a 	mov	r7,r11
   240f4:	003fec06 	br	240a8 <__ieee754_sqrt+0xc0>
   240f8:	603ff716 	blt	r12,zero,240d8 <__ieee754_sqrt+0xf0>
   240fc:	3ac00044 	addi	r11,r7,1
   24100:	003ff606 	br	240dc <__ieee754_sqrt+0xf4>
   24104:	19401936 	bltu	r3,r5,2416c <__ieee754_sqrt+0x184>
   24108:	2ae0002c 	andhi	r11,r5,32768
   2410c:	2919883a 	add	r12,r5,r4
   24110:	5b404526 	beq	r11,r13,24228 <__ieee754_sqrt+0x240>
   24114:	1017883a 	mov	r11,r2
   24118:	0005883a 	mov	r2,zero
   2411c:	003ff206 	br	240e8 <__ieee754_sqrt+0x100>
   24120:	10c4b03a 	or	r2,r2,r3
   24124:	10000426 	beq	r2,zero,24138 <__ieee754_sqrt+0x150>
   24128:	00bfffc4 	movi	r2,-1
   2412c:	40804026 	beq	r8,r2,24230 <__ieee754_sqrt+0x248>
   24130:	4080004c 	andi	r2,r8,1
   24134:	4091883a 	add	r8,r8,r2
   24138:	4004d07a 	srli	r2,r8,1
   2413c:	4807d07a 	srai	r3,r9,1
   24140:	010ff834 	movhi	r4,16352
   24144:	4a40004c 	andi	r9,r9,1
   24148:	1909883a 	add	r4,r3,r4
   2414c:	4800091e 	bne	r9,zero,24174 <__ieee754_sqrt+0x18c>
   24150:	5006953a 	slli	r3,r10,20
   24154:	1907883a 	add	r3,r3,r4
   24158:	dfc00217 	ldw	ra,8(sp)
   2415c:	dc400117 	ldw	r17,4(sp)
   24160:	dc000017 	ldw	r16,0(sp)
   24164:	dec00304 	addi	sp,sp,12
   24168:	f800283a 	ret
   2416c:	3805883a 	mov	r2,r7
   24170:	003fcd06 	br	240a8 <__ieee754_sqrt+0xc0>
   24174:	10a00034 	orhi	r2,r2,32768
   24178:	003ff506 	br	24150 <__ieee754_sqrt+0x168>
   2417c:	3004d7fa 	srli	r2,r6,31
   24180:	18c7883a 	add	r3,r3,r3
   24184:	318d883a 	add	r6,r6,r6
   24188:	10c7883a 	add	r3,r2,r3
   2418c:	003faa06 	br	24038 <__ieee754_sqrt+0x50>
   24190:	00a00034 	movhi	r2,32768
   24194:	10bfffc4 	addi	r2,r2,-1
   24198:	2884703a 	and	r2,r5,r2
   2419c:	1104b03a 	or	r2,r2,r4
   241a0:	10001e26 	beq	r2,zero,2421c <__ieee754_sqrt+0x234>
   241a4:	2800291e 	bne	r5,zero,2424c <__ieee754_sqrt+0x264>
   241a8:	0015883a 	mov	r10,zero
   241ac:	3020d2fa 	srli	r16,r6,11
   241b0:	52bffac4 	addi	r10,r10,-21
   241b4:	300c957a 	slli	r6,r6,21
   241b8:	803ffc26 	beq	r16,zero,241ac <__ieee754_sqrt+0x1c4>
   241bc:	8080042c 	andhi	r2,r16,16
   241c0:	10001e1e 	bne	r2,zero,2423c <__ieee754_sqrt+0x254>
   241c4:	0005883a 	mov	r2,zero
   241c8:	00000106 	br	241d0 <__ieee754_sqrt+0x1e8>
   241cc:	1805883a 	mov	r2,r3
   241d0:	8421883a 	add	r16,r16,r16
   241d4:	8100042c 	andhi	r4,r16,16
   241d8:	10c00044 	addi	r3,r2,1
   241dc:	203ffb26 	beq	r4,zero,241cc <__ieee754_sqrt+0x1e4>
   241e0:	01000804 	movi	r4,32
   241e4:	20c9c83a 	sub	r4,r4,r3
   241e8:	3108d83a 	srl	r4,r6,r4
   241ec:	5095c83a 	sub	r10,r10,r2
   241f0:	30cc983a 	sll	r6,r6,r3
   241f4:	2420b03a 	or	r16,r4,r16
   241f8:	003f8806 	br	2401c <__ieee754_sqrt+0x34>
   241fc:	280f883a 	mov	r7,r5
   24200:	00282d40 	call	282d4 <__muldf3>
   24204:	880d883a 	mov	r6,r17
   24208:	800f883a 	mov	r7,r16
   2420c:	1009883a 	mov	r4,r2
   24210:	180b883a 	mov	r5,r3
   24214:	0026ee80 	call	26ee8 <__adddf3>
   24218:	003fcf06 	br	24158 <__ieee754_sqrt+0x170>
   2421c:	2005883a 	mov	r2,r4
   24220:	2807883a 	mov	r3,r5
   24224:	003fcc06 	br	24158 <__ieee754_sqrt+0x170>
   24228:	603fba16 	blt	r12,zero,24114 <__ieee754_sqrt+0x12c>
   2422c:	003fb306 	br	240fc <__ieee754_sqrt+0x114>
   24230:	4a400044 	addi	r9,r9,1
   24234:	0005883a 	mov	r2,zero
   24238:	003fc006 	br	2413c <__ieee754_sqrt+0x154>
   2423c:	01000804 	movi	r4,32
   24240:	00bfffc4 	movi	r2,-1
   24244:	0007883a 	mov	r3,zero
   24248:	003fe706 	br	241e8 <__ieee754_sqrt+0x200>
   2424c:	200d883a 	mov	r6,r4
   24250:	280f883a 	mov	r7,r5
   24254:	00289ec0 	call	289ec <__subdf3>
   24258:	100d883a 	mov	r6,r2
   2425c:	180f883a 	mov	r7,r3
   24260:	1009883a 	mov	r4,r2
   24264:	180b883a 	mov	r5,r3
   24268:	00277940 	call	27794 <__divdf3>
   2426c:	003fba06 	br	24158 <__ieee754_sqrt+0x170>

00024270 <__kernel_cos>:
   24270:	defff304 	addi	sp,sp,-52
   24274:	dc000315 	stw	r16,12(sp)
   24278:	04200034 	movhi	r16,32768
   2427c:	843fffc4 	addi	r16,r16,-1
   24280:	008f9034 	movhi	r2,15936
   24284:	df000b15 	stw	fp,44(sp)
   24288:	ddc00a15 	stw	r23,40(sp)
   2428c:	dd800915 	stw	r22,36(sp)
   24290:	dcc00615 	stw	r19,24(sp)
   24294:	dfc00c15 	stw	ra,48(sp)
   24298:	dd400815 	stw	r21,32(sp)
   2429c:	dd000715 	stw	r20,28(sp)
   242a0:	dc800515 	stw	r18,20(sp)
   242a4:	dc400415 	stw	r17,16(sp)
   242a8:	2c20703a 	and	r16,r5,r16
   242ac:	10bfffc4 	addi	r2,r2,-1
   242b0:	2827883a 	mov	r19,r5
   242b4:	202d883a 	mov	r22,r4
   242b8:	302f883a 	mov	r23,r6
   242bc:	3839883a 	mov	fp,r7
   242c0:	14007516 	blt	r2,r16,24498 <__kernel_cos+0x228>
   242c4:	00292e80 	call	292e8 <__fixdfsi>
   242c8:	10010f26 	beq	r2,zero,24708 <__kernel_cos+0x498>
   242cc:	b00d883a 	mov	r6,r22
   242d0:	980f883a 	mov	r7,r19
   242d4:	b009883a 	mov	r4,r22
   242d8:	980b883a 	mov	r5,r19
   242dc:	00282d40 	call	282d4 <__muldf3>
   242e0:	01afa234 	movhi	r6,48776
   242e4:	01ef6a74 	movhi	r7,48553
   242e8:	318e3504 	addi	r6,r6,14548
   242ec:	39feba44 	addi	r7,r7,-1303
   242f0:	1009883a 	mov	r4,r2
   242f4:	180b883a 	mov	r5,r3
   242f8:	102b883a 	mov	r21,r2
   242fc:	1829883a 	mov	r20,r3
   24300:	00282d40 	call	282d4 <__muldf3>
   24304:	01af6d74 	movhi	r6,48565
   24308:	01cf88b4 	movhi	r7,15906
   2430c:	31ac7104 	addi	r6,r6,-20028
   24310:	39fba784 	addi	r7,r7,-4450
   24314:	1009883a 	mov	r4,r2
   24318:	180b883a 	mov	r5,r3
   2431c:	0026ee80 	call	26ee8 <__adddf3>
   24320:	a80d883a 	mov	r6,r21
   24324:	a00f883a 	mov	r7,r20
   24328:	1009883a 	mov	r4,r2
   2432c:	180b883a 	mov	r5,r3
   24330:	00282d40 	call	282d4 <__muldf3>
   24334:	01a02734 	movhi	r6,32924
   24338:	01cfa4b4 	movhi	r7,16018
   2433c:	3194ab44 	addi	r6,r6,21165
   24340:	39df93c4 	addi	r7,r7,32335
   24344:	1009883a 	mov	r4,r2
   24348:	180b883a 	mov	r5,r3
   2434c:	00289ec0 	call	289ec <__subdf3>
   24350:	a80d883a 	mov	r6,r21
   24354:	a00f883a 	mov	r7,r20
   24358:	1009883a 	mov	r4,r2
   2435c:	180b883a 	mov	r5,r3
   24360:	00282d40 	call	282d4 <__muldf3>
   24364:	018672f4 	movhi	r6,6603
   24368:	01cfbeb4 	movhi	r7,16122
   2436c:	31856404 	addi	r6,r6,5520
   24370:	39c06804 	addi	r7,r7,416
   24374:	1009883a 	mov	r4,r2
   24378:	180b883a 	mov	r5,r3
   2437c:	0026ee80 	call	26ee8 <__adddf3>
   24380:	a80d883a 	mov	r6,r21
   24384:	a00f883a 	mov	r7,r20
   24388:	1009883a 	mov	r4,r2
   2438c:	180b883a 	mov	r5,r3
   24390:	00282d40 	call	282d4 <__muldf3>
   24394:	0185b074 	movhi	r6,5825
   24398:	01cfd5f4 	movhi	r7,16215
   2439c:	31945dc4 	addi	r6,r6,20855
   243a0:	39f05b04 	addi	r7,r7,-16020
   243a4:	1009883a 	mov	r4,r2
   243a8:	180b883a 	mov	r5,r3
   243ac:	00289ec0 	call	289ec <__subdf3>
   243b0:	a80d883a 	mov	r6,r21
   243b4:	a00f883a 	mov	r7,r20
   243b8:	1009883a 	mov	r4,r2
   243bc:	180b883a 	mov	r5,r3
   243c0:	00282d40 	call	282d4 <__muldf3>
   243c4:	01955574 	movhi	r6,21845
   243c8:	01cfe974 	movhi	r7,16293
   243cc:	31955304 	addi	r6,r6,21836
   243d0:	39d55544 	addi	r7,r7,21845
   243d4:	1009883a 	mov	r4,r2
   243d8:	180b883a 	mov	r5,r3
   243dc:	0026ee80 	call	26ee8 <__adddf3>
   243e0:	a80d883a 	mov	r6,r21
   243e4:	a00f883a 	mov	r7,r20
   243e8:	1009883a 	mov	r4,r2
   243ec:	180b883a 	mov	r5,r3
   243f0:	00282d40 	call	282d4 <__muldf3>
   243f4:	1017883a 	mov	r11,r2
   243f8:	1815883a 	mov	r10,r3
   243fc:	a809883a 	mov	r4,r21
   24400:	a00b883a 	mov	r5,r20
   24404:	000d883a 	mov	r6,zero
   24408:	01cff834 	movhi	r7,16352
   2440c:	da800215 	stw	r10,8(sp)
   24410:	dac00115 	stw	r11,4(sp)
   24414:	00282d40 	call	282d4 <__muldf3>
   24418:	dac00117 	ldw	r11,4(sp)
   2441c:	da800217 	ldw	r10,8(sp)
   24420:	a809883a 	mov	r4,r21
   24424:	580d883a 	mov	r6,r11
   24428:	500f883a 	mov	r7,r10
   2442c:	a00b883a 	mov	r5,r20
   24430:	1023883a 	mov	r17,r2
   24434:	1821883a 	mov	r16,r3
   24438:	00282d40 	call	282d4 <__muldf3>
   2443c:	b80d883a 	mov	r6,r23
   24440:	e00f883a 	mov	r7,fp
   24444:	b009883a 	mov	r4,r22
   24448:	980b883a 	mov	r5,r19
   2444c:	1029883a 	mov	r20,r2
   24450:	1825883a 	mov	r18,r3
   24454:	00282d40 	call	282d4 <__muldf3>
   24458:	a009883a 	mov	r4,r20
   2445c:	900b883a 	mov	r5,r18
   24460:	100d883a 	mov	r6,r2
   24464:	180f883a 	mov	r7,r3
   24468:	00289ec0 	call	289ec <__subdf3>
   2446c:	8809883a 	mov	r4,r17
   24470:	800b883a 	mov	r5,r16
   24474:	100d883a 	mov	r6,r2
   24478:	180f883a 	mov	r7,r3
   2447c:	00289ec0 	call	289ec <__subdf3>
   24480:	100d883a 	mov	r6,r2
   24484:	180f883a 	mov	r7,r3
   24488:	0009883a 	mov	r4,zero
   2448c:	014ffc34 	movhi	r5,16368
   24490:	00289ec0 	call	289ec <__subdf3>
   24494:	00008b06 	br	246c4 <__kernel_cos+0x454>
   24498:	200d883a 	mov	r6,r4
   2449c:	280f883a 	mov	r7,r5
   244a0:	00282d40 	call	282d4 <__muldf3>
   244a4:	01afa234 	movhi	r6,48776
   244a8:	01ef6a74 	movhi	r7,48553
   244ac:	318e3504 	addi	r6,r6,14548
   244b0:	39feba44 	addi	r7,r7,-1303
   244b4:	1009883a 	mov	r4,r2
   244b8:	180b883a 	mov	r5,r3
   244bc:	1025883a 	mov	r18,r2
   244c0:	1823883a 	mov	r17,r3
   244c4:	00282d40 	call	282d4 <__muldf3>
   244c8:	01af6d74 	movhi	r6,48565
   244cc:	01cf88b4 	movhi	r7,15906
   244d0:	31ac7104 	addi	r6,r6,-20028
   244d4:	39fba784 	addi	r7,r7,-4450
   244d8:	1009883a 	mov	r4,r2
   244dc:	180b883a 	mov	r5,r3
   244e0:	0026ee80 	call	26ee8 <__adddf3>
   244e4:	900d883a 	mov	r6,r18
   244e8:	880f883a 	mov	r7,r17
   244ec:	1009883a 	mov	r4,r2
   244f0:	180b883a 	mov	r5,r3
   244f4:	00282d40 	call	282d4 <__muldf3>
   244f8:	01a02734 	movhi	r6,32924
   244fc:	01cfa4b4 	movhi	r7,16018
   24500:	3194ab44 	addi	r6,r6,21165
   24504:	39df93c4 	addi	r7,r7,32335
   24508:	1009883a 	mov	r4,r2
   2450c:	180b883a 	mov	r5,r3
   24510:	00289ec0 	call	289ec <__subdf3>
   24514:	900d883a 	mov	r6,r18
   24518:	880f883a 	mov	r7,r17
   2451c:	1009883a 	mov	r4,r2
   24520:	180b883a 	mov	r5,r3
   24524:	00282d40 	call	282d4 <__muldf3>
   24528:	018672f4 	movhi	r6,6603
   2452c:	01cfbeb4 	movhi	r7,16122
   24530:	31856404 	addi	r6,r6,5520
   24534:	39c06804 	addi	r7,r7,416
   24538:	1009883a 	mov	r4,r2
   2453c:	180b883a 	mov	r5,r3
   24540:	0026ee80 	call	26ee8 <__adddf3>
   24544:	900d883a 	mov	r6,r18
   24548:	880f883a 	mov	r7,r17
   2454c:	1009883a 	mov	r4,r2
   24550:	180b883a 	mov	r5,r3
   24554:	00282d40 	call	282d4 <__muldf3>
   24558:	0185b074 	movhi	r6,5825
   2455c:	01cfd5f4 	movhi	r7,16215
   24560:	31945dc4 	addi	r6,r6,20855
   24564:	39f05b04 	addi	r7,r7,-16020
   24568:	1009883a 	mov	r4,r2
   2456c:	180b883a 	mov	r5,r3
   24570:	00289ec0 	call	289ec <__subdf3>
   24574:	900d883a 	mov	r6,r18
   24578:	880f883a 	mov	r7,r17
   2457c:	1009883a 	mov	r4,r2
   24580:	180b883a 	mov	r5,r3
   24584:	00282d40 	call	282d4 <__muldf3>
   24588:	01955574 	movhi	r6,21845
   2458c:	01cfe974 	movhi	r7,16293
   24590:	31955304 	addi	r6,r6,21836
   24594:	39d55544 	addi	r7,r7,21845
   24598:	1009883a 	mov	r4,r2
   2459c:	180b883a 	mov	r5,r3
   245a0:	0026ee80 	call	26ee8 <__adddf3>
   245a4:	900d883a 	mov	r6,r18
   245a8:	880f883a 	mov	r7,r17
   245ac:	1009883a 	mov	r4,r2
   245b0:	180b883a 	mov	r5,r3
   245b4:	00282d40 	call	282d4 <__muldf3>
   245b8:	1013883a 	mov	r9,r2
   245bc:	1017883a 	mov	r11,r2
   245c0:	008ff4f4 	movhi	r2,16339
   245c4:	108ccc84 	addi	r2,r2,13106
   245c8:	1811883a 	mov	r8,r3
   245cc:	902b883a 	mov	r21,r18
   245d0:	8829883a 	mov	r20,r17
   245d4:	1815883a 	mov	r10,r3
   245d8:	143f880e 	bge	r2,r16,243fc <__kernel_cos+0x18c>
   245dc:	008ffa74 	movhi	r2,16361
   245e0:	14004416 	blt	r2,r16,246f4 <__kernel_cos+0x484>
   245e4:	00bff834 	movhi	r2,65504
   245e8:	80a1883a 	add	r16,r16,r2
   245ec:	000d883a 	mov	r6,zero
   245f0:	800f883a 	mov	r7,r16
   245f4:	0009883a 	mov	r4,zero
   245f8:	014ffc34 	movhi	r5,16368
   245fc:	da400115 	stw	r9,4(sp)
   24600:	d8c00215 	stw	r3,8(sp)
   24604:	00289ec0 	call	289ec <__subdf3>
   24608:	da000217 	ldw	r8,8(sp)
   2460c:	da400117 	ldw	r9,4(sp)
   24610:	102b883a 	mov	r21,r2
   24614:	d8c00015 	stw	r3,0(sp)
   24618:	9009883a 	mov	r4,r18
   2461c:	880b883a 	mov	r5,r17
   24620:	000d883a 	mov	r6,zero
   24624:	01cff834 	movhi	r7,16352
   24628:	da000215 	stw	r8,8(sp)
   2462c:	da400115 	stw	r9,4(sp)
   24630:	00282d40 	call	282d4 <__muldf3>
   24634:	800f883a 	mov	r7,r16
   24638:	000d883a 	mov	r6,zero
   2463c:	1009883a 	mov	r4,r2
   24640:	180b883a 	mov	r5,r3
   24644:	00289ec0 	call	289ec <__subdf3>
   24648:	da400117 	ldw	r9,4(sp)
   2464c:	da000217 	ldw	r8,8(sp)
   24650:	9009883a 	mov	r4,r18
   24654:	480d883a 	mov	r6,r9
   24658:	400f883a 	mov	r7,r8
   2465c:	880b883a 	mov	r5,r17
   24660:	1029883a 	mov	r20,r2
   24664:	1821883a 	mov	r16,r3
   24668:	00282d40 	call	282d4 <__muldf3>
   2466c:	b80d883a 	mov	r6,r23
   24670:	e00f883a 	mov	r7,fp
   24674:	b009883a 	mov	r4,r22
   24678:	980b883a 	mov	r5,r19
   2467c:	1025883a 	mov	r18,r2
   24680:	1823883a 	mov	r17,r3
   24684:	00282d40 	call	282d4 <__muldf3>
   24688:	100d883a 	mov	r6,r2
   2468c:	180f883a 	mov	r7,r3
   24690:	9009883a 	mov	r4,r18
   24694:	880b883a 	mov	r5,r17
   24698:	00289ec0 	call	289ec <__subdf3>
   2469c:	100d883a 	mov	r6,r2
   246a0:	180f883a 	mov	r7,r3
   246a4:	a009883a 	mov	r4,r20
   246a8:	800b883a 	mov	r5,r16
   246ac:	00289ec0 	call	289ec <__subdf3>
   246b0:	d9400017 	ldw	r5,0(sp)
   246b4:	100d883a 	mov	r6,r2
   246b8:	180f883a 	mov	r7,r3
   246bc:	a809883a 	mov	r4,r21
   246c0:	00289ec0 	call	289ec <__subdf3>
   246c4:	dfc00c17 	ldw	ra,48(sp)
   246c8:	df000b17 	ldw	fp,44(sp)
   246cc:	ddc00a17 	ldw	r23,40(sp)
   246d0:	dd800917 	ldw	r22,36(sp)
   246d4:	dd400817 	ldw	r21,32(sp)
   246d8:	dd000717 	ldw	r20,28(sp)
   246dc:	dcc00617 	ldw	r19,24(sp)
   246e0:	dc800517 	ldw	r18,20(sp)
   246e4:	dc400417 	ldw	r17,16(sp)
   246e8:	dc000317 	ldw	r16,12(sp)
   246ec:	dec00d04 	addi	sp,sp,52
   246f0:	f800283a 	ret
   246f4:	008ff9f4 	movhi	r2,16359
   246f8:	002b883a 	mov	r21,zero
   246fc:	d8800015 	stw	r2,0(sp)
   24700:	040ff4b4 	movhi	r16,16338
   24704:	003fc406 	br	24618 <__kernel_cos+0x3a8>
   24708:	0005883a 	mov	r2,zero
   2470c:	00cffc34 	movhi	r3,16368
   24710:	003fec06 	br	246c4 <__kernel_cos+0x454>

00024714 <__kernel_rem_pio2>:
   24714:	deff5a04 	addi	sp,sp,-664
   24718:	da00a617 	ldw	r8,664(sp)
   2471c:	00c00134 	movhi	r3,4
   24720:	18e09704 	addi	r3,r3,-32164
   24724:	4205883a 	add	r2,r8,r8
   24728:	1085883a 	add	r2,r2,r2
   2472c:	1885883a 	add	r2,r3,r2
   24730:	d9008e15 	stw	r4,568(sp)
   24734:	d9408f15 	stw	r5,572(sp)
   24738:	313fff44 	addi	r4,r6,-3
   2473c:	01400604 	movi	r5,24
   24740:	dd80a215 	stw	r22,648(sp)
   24744:	dc009c15 	stw	r16,624(sp)
   24748:	dfc0a515 	stw	ra,660(sp)
   2474c:	df00a415 	stw	fp,656(sp)
   24750:	ddc0a315 	stw	r23,652(sp)
   24754:	dd40a115 	stw	r21,644(sp)
   24758:	dd00a015 	stw	r20,640(sp)
   2475c:	dcc09f15 	stw	r19,636(sp)
   24760:	dc809e15 	stw	r18,632(sp)
   24764:	dc409d15 	stw	r17,628(sp)
   24768:	3021883a 	mov	r16,r6
   2476c:	d9c09315 	stw	r7,588(sp)
   24770:	15800017 	ldw	r22,0(r2)
   24774:	00259b80 	call	259b8 <__divsi3>
   24778:	da009317 	ldw	r8,588(sp)
   2477c:	d8809215 	stw	r2,584(sp)
   24780:	423fffc4 	addi	r8,r8,-1
   24784:	da008d15 	stw	r8,564(sp)
   24788:	10033b16 	blt	r2,zero,25478 <__kernel_rem_pio2+0xd64>
   2478c:	da009217 	ldw	r8,584(sp)
   24790:	d9009217 	ldw	r4,584(sp)
   24794:	42000044 	addi	r8,r8,1
   24798:	40fffa24 	muli	r3,r8,-24
   2479c:	da009515 	stw	r8,596(sp)
   247a0:	da008d17 	ldw	r8,564(sp)
   247a4:	1c07883a 	add	r3,r3,r16
   247a8:	d8c09015 	stw	r3,576(sp)
   247ac:	b205883a 	add	r2,r22,r8
   247b0:	2223c83a 	sub	r17,r4,r8
   247b4:	10001016 	blt	r2,zero,247f8 <__kernel_rem_pio2+0xe4>
   247b8:	da00a717 	ldw	r8,668(sp)
   247bc:	8c65883a 	add	r18,r17,r17
   247c0:	94a5883a 	add	r18,r18,r18
   247c4:	1445883a 	add	r2,r2,r17
   247c8:	dcc05004 	addi	r19,sp,320
   247cc:	44a5883a 	add	r18,r8,r18
   247d0:	14000044 	addi	r16,r2,1
   247d4:	88015316 	blt	r17,zero,24d24 <__kernel_rem_pio2+0x610>
   247d8:	91000017 	ldw	r4,0(r18)
   247dc:	00293680 	call	29368 <__floatsidf>
   247e0:	98800015 	stw	r2,0(r19)
   247e4:	98c00115 	stw	r3,4(r19)
   247e8:	8c400044 	addi	r17,r17,1
   247ec:	9cc00204 	addi	r19,r19,8
   247f0:	94800104 	addi	r18,r18,4
   247f4:	8c3ff71e 	bne	r17,r16,247d4 <__kernel_rem_pio2+0xc0>
   247f8:	b0002816 	blt	r22,zero,2489c <__kernel_rem_pio2+0x188>
   247fc:	da008d17 	ldw	r8,564(sp)
   24800:	b4c00044 	addi	r19,r22,1
   24804:	982690fa 	slli	r19,r19,3
   24808:	402490fa 	slli	r18,r8,3
   2480c:	da008e17 	ldw	r8,568(sp)
   24810:	d8805004 	addi	r2,sp,320
   24814:	94000204 	addi	r16,r18,8
   24818:	d823883a 	mov	r17,sp
   2481c:	14a5883a 	add	r18,r2,r18
   24820:	dcef883a 	add	r23,sp,r19
   24824:	4421883a 	add	r16,r8,r16
   24828:	dd809115 	stw	r22,580(sp)
   2482c:	4039883a 	mov	fp,r8
   24830:	da008d17 	ldw	r8,564(sp)
   24834:	40016016 	blt	r8,zero,24db8 <__kernel_rem_pio2+0x6a4>
   24838:	e027883a 	mov	r19,fp
   2483c:	9029883a 	mov	r20,r18
   24840:	002d883a 	mov	r22,zero
   24844:	002b883a 	mov	r21,zero
   24848:	a1800017 	ldw	r6,0(r20)
   2484c:	a1c00117 	ldw	r7,4(r20)
   24850:	99000017 	ldw	r4,0(r19)
   24854:	99400117 	ldw	r5,4(r19)
   24858:	9cc00204 	addi	r19,r19,8
   2485c:	a53ffe04 	addi	r20,r20,-8
   24860:	00282d40 	call	282d4 <__muldf3>
   24864:	b009883a 	mov	r4,r22
   24868:	a80b883a 	mov	r5,r21
   2486c:	100d883a 	mov	r6,r2
   24870:	180f883a 	mov	r7,r3
   24874:	0026ee80 	call	26ee8 <__adddf3>
   24878:	102d883a 	mov	r22,r2
   2487c:	182b883a 	mov	r21,r3
   24880:	9c3ff11e 	bne	r19,r16,24848 <__kernel_rem_pio2+0x134>
   24884:	8d800015 	stw	r22,0(r17)
   24888:	8d400115 	stw	r21,4(r17)
   2488c:	8c400204 	addi	r17,r17,8
   24890:	94800204 	addi	r18,r18,8
   24894:	8dffe61e 	bne	r17,r23,24830 <__kernel_rem_pio2+0x11c>
   24898:	dd809117 	ldw	r22,580(sp)
   2489c:	00d00034 	movhi	r3,16384
   248a0:	da009317 	ldw	r8,588(sp)
   248a4:	18ffff84 	addi	r3,r3,-2
   248a8:	b0c7883a 	add	r3,r22,r3
   248ac:	18c7883a 	add	r3,r3,r3
   248b0:	402090fa 	slli	r16,r8,3
   248b4:	18c7883a 	add	r3,r3,r3
   248b8:	da007804 	addi	r8,sp,480
   248bc:	40d1883a 	add	r8,r8,r3
   248c0:	b0bfffc4 	addi	r2,r22,-1
   248c4:	da009615 	stw	r8,600(sp)
   248c8:	da008e17 	ldw	r8,568(sp)
   248cc:	1085883a 	add	r2,r2,r2
   248d0:	1085883a 	add	r2,r2,r2
   248d4:	19000104 	addi	r4,r3,4
   248d8:	d885883a 	add	r2,sp,r2
   248dc:	4421883a 	add	r16,r8,r16
   248e0:	da007804 	addi	r8,sp,480
   248e4:	4111883a 	add	r8,r8,r4
   248e8:	10807804 	addi	r2,r2,480
   248ec:	da009715 	stw	r8,604(sp)
   248f0:	b025883a 	mov	r18,r22
   248f4:	d8809815 	stw	r2,608(sp)
   248f8:	dd809415 	stw	r22,592(sp)
   248fc:	900490fa 	slli	r2,r18,3
   24900:	d885883a 	add	r2,sp,r2
   24904:	17000017 	ldw	fp,0(r2)
   24908:	15400117 	ldw	r21,4(r2)
   2490c:	04802b0e 	bge	zero,r18,249bc <__kernel_rem_pio2+0x2a8>
   24910:	00880034 	movhi	r2,8192
   24914:	10bfffc4 	addi	r2,r2,-1
   24918:	90a9883a 	add	r20,r18,r2
   2491c:	a02890fa 	slli	r20,r20,3
   24920:	dc407804 	addi	r17,sp,480
   24924:	dcfffe04 	addi	r19,sp,-8
   24928:	dd29883a 	add	r20,sp,r20
   2492c:	000d883a 	mov	r6,zero
   24930:	01cf9c34 	movhi	r7,15984
   24934:	e009883a 	mov	r4,fp
   24938:	a80b883a 	mov	r5,r21
   2493c:	00282d40 	call	282d4 <__muldf3>
   24940:	180b883a 	mov	r5,r3
   24944:	1009883a 	mov	r4,r2
   24948:	00292e80 	call	292e8 <__fixdfsi>
   2494c:	1009883a 	mov	r4,r2
   24950:	00293680 	call	29368 <__floatsidf>
   24954:	000d883a 	mov	r6,zero
   24958:	01d05c34 	movhi	r7,16752
   2495c:	1009883a 	mov	r4,r2
   24960:	180b883a 	mov	r5,r3
   24964:	102f883a 	mov	r23,r2
   24968:	182d883a 	mov	r22,r3
   2496c:	00282d40 	call	282d4 <__muldf3>
   24970:	100d883a 	mov	r6,r2
   24974:	180f883a 	mov	r7,r3
   24978:	e009883a 	mov	r4,fp
   2497c:	a80b883a 	mov	r5,r21
   24980:	00289ec0 	call	289ec <__subdf3>
   24984:	180b883a 	mov	r5,r3
   24988:	1009883a 	mov	r4,r2
   2498c:	00292e80 	call	292e8 <__fixdfsi>
   24990:	a1800017 	ldw	r6,0(r20)
   24994:	a1c00117 	ldw	r7,4(r20)
   24998:	88800015 	stw	r2,0(r17)
   2499c:	b809883a 	mov	r4,r23
   249a0:	b00b883a 	mov	r5,r22
   249a4:	0026ee80 	call	26ee8 <__adddf3>
   249a8:	a53ffe04 	addi	r20,r20,-8
   249ac:	1039883a 	mov	fp,r2
   249b0:	182b883a 	mov	r21,r3
   249b4:	8c400104 	addi	r17,r17,4
   249b8:	a4ffdc1e 	bne	r20,r19,2492c <__kernel_rem_pio2+0x218>
   249bc:	d9809017 	ldw	r6,576(sp)
   249c0:	a80b883a 	mov	r5,r21
   249c4:	e009883a 	mov	r4,fp
   249c8:	00258000 	call	25800 <scalbn>
   249cc:	000d883a 	mov	r6,zero
   249d0:	01cff034 	movhi	r7,16320
   249d4:	1009883a 	mov	r4,r2
   249d8:	180b883a 	mov	r5,r3
   249dc:	1027883a 	mov	r19,r2
   249e0:	1823883a 	mov	r17,r3
   249e4:	00282d40 	call	282d4 <__muldf3>
   249e8:	1009883a 	mov	r4,r2
   249ec:	180b883a 	mov	r5,r3
   249f0:	00234700 	call	23470 <floor>
   249f4:	000d883a 	mov	r6,zero
   249f8:	01d00834 	movhi	r7,16416
   249fc:	1009883a 	mov	r4,r2
   24a00:	180b883a 	mov	r5,r3
   24a04:	00282d40 	call	282d4 <__muldf3>
   24a08:	100d883a 	mov	r6,r2
   24a0c:	180f883a 	mov	r7,r3
   24a10:	9809883a 	mov	r4,r19
   24a14:	880b883a 	mov	r5,r17
   24a18:	00289ec0 	call	289ec <__subdf3>
   24a1c:	180b883a 	mov	r5,r3
   24a20:	1009883a 	mov	r4,r2
   24a24:	1827883a 	mov	r19,r3
   24a28:	1029883a 	mov	r20,r2
   24a2c:	00292e80 	call	292e8 <__fixdfsi>
   24a30:	1009883a 	mov	r4,r2
   24a34:	1023883a 	mov	r17,r2
   24a38:	00293680 	call	29368 <__floatsidf>
   24a3c:	a009883a 	mov	r4,r20
   24a40:	100d883a 	mov	r6,r2
   24a44:	180f883a 	mov	r7,r3
   24a48:	980b883a 	mov	r5,r19
   24a4c:	00289ec0 	call	289ec <__subdf3>
   24a50:	d9009017 	ldw	r4,576(sp)
   24a54:	1013883a 	mov	r9,r2
   24a58:	102b883a 	mov	r21,r2
   24a5c:	1811883a 	mov	r8,r3
   24a60:	0100b30e 	bge	zero,r4,24d30 <__kernel_rem_pio2+0x61c>
   24a64:	90bfffc4 	addi	r2,r18,-1
   24a68:	1085883a 	add	r2,r2,r2
   24a6c:	1085883a 	add	r2,r2,r2
   24a70:	d885883a 	add	r2,sp,r2
   24a74:	10807804 	addi	r2,r2,480
   24a78:	d9809017 	ldw	r6,576(sp)
   24a7c:	11400017 	ldw	r5,0(r2)
   24a80:	01000604 	movi	r4,24
   24a84:	2189c83a 	sub	r4,r4,r6
   24a88:	290dd83a 	sra	r6,r5,r4
   24a8c:	d9c09017 	ldw	r7,576(sp)
   24a90:	04c005c4 	movi	r19,23
   24a94:	3108983a 	sll	r4,r6,r4
   24a98:	99e7c83a 	sub	r19,r19,r7
   24a9c:	89a3883a 	add	r17,r17,r6
   24aa0:	2909c83a 	sub	r4,r5,r4
   24aa4:	24e7d83a 	sra	r19,r4,r19
   24aa8:	11000015 	stw	r4,0(r2)
   24aac:	04c02a0e 	bge	zero,r19,24b58 <__kernel_rem_pio2+0x444>
   24ab0:	8c400044 	addi	r17,r17,1
   24ab4:	0481570e 	bge	zero,r18,25014 <__kernel_rem_pio2+0x900>
   24ab8:	02804034 	movhi	r10,256
   24abc:	52bfffc4 	addi	r10,r10,-1
   24ac0:	d8807804 	addi	r2,sp,480
   24ac4:	000b883a 	mov	r5,zero
   24ac8:	0029883a 	mov	r20,zero
   24acc:	01c04034 	movhi	r7,256
   24ad0:	00000706 	br	24af0 <__kernel_rem_pio2+0x3dc>
   24ad4:	390dc83a 	sub	r6,r7,r4
   24ad8:	20000226 	beq	r4,zero,24ae4 <__kernel_rem_pio2+0x3d0>
   24adc:	11800015 	stw	r6,0(r2)
   24ae0:	05000044 	movi	r20,1
   24ae4:	29400044 	addi	r5,r5,1
   24ae8:	10800104 	addi	r2,r2,4
   24aec:	2c80080e 	bge	r5,r18,24b10 <__kernel_rem_pio2+0x3fc>
   24af0:	11000017 	ldw	r4,0(r2)
   24af4:	a03ff726 	beq	r20,zero,24ad4 <__kernel_rem_pio2+0x3c0>
   24af8:	5109c83a 	sub	r4,r10,r4
   24afc:	11000015 	stw	r4,0(r2)
   24b00:	29400044 	addi	r5,r5,1
   24b04:	05000044 	movi	r20,1
   24b08:	10800104 	addi	r2,r2,4
   24b0c:	2cbff816 	blt	r5,r18,24af0 <__kernel_rem_pio2+0x3dc>
   24b10:	d9009017 	ldw	r4,576(sp)
   24b14:	01000e0e 	bge	zero,r4,24b50 <__kernel_rem_pio2+0x43c>
   24b18:	00800044 	movi	r2,1
   24b1c:	20808d26 	beq	r4,r2,24d54 <__kernel_rem_pio2+0x640>
   24b20:	00800084 	movi	r2,2
   24b24:	20800a1e 	bne	r4,r2,24b50 <__kernel_rem_pio2+0x43c>
   24b28:	90bfffc4 	addi	r2,r18,-1
   24b2c:	1085883a 	add	r2,r2,r2
   24b30:	1085883a 	add	r2,r2,r2
   24b34:	d885883a 	add	r2,sp,r2
   24b38:	10807804 	addi	r2,r2,480
   24b3c:	11400017 	ldw	r5,0(r2)
   24b40:	01001034 	movhi	r4,64
   24b44:	213fffc4 	addi	r4,r4,-1
   24b48:	2908703a 	and	r4,r5,r4
   24b4c:	11000015 	stw	r4,0(r2)
   24b50:	00800084 	movi	r2,2
   24b54:	98805d26 	beq	r19,r2,24ccc <__kernel_rem_pio2+0x5b8>
   24b58:	400b883a 	mov	r5,r8
   24b5c:	000d883a 	mov	r6,zero
   24b60:	000f883a 	mov	r7,zero
   24b64:	a809883a 	mov	r4,r21
   24b68:	da009b15 	stw	r8,620(sp)
   24b6c:	002807c0 	call	2807c <__eqdf2>
   24b70:	da009b17 	ldw	r8,620(sp)
   24b74:	10012b1e 	bne	r2,zero,25024 <__kernel_rem_pio2+0x910>
   24b78:	da009417 	ldw	r8,592(sp)
   24b7c:	917fffc4 	addi	r5,r18,-1
   24b80:	2a000e16 	blt	r5,r8,24bbc <__kernel_rem_pio2+0x4a8>
   24b84:	00900034 	movhi	r2,16384
   24b88:	10bfffc4 	addi	r2,r2,-1
   24b8c:	9085883a 	add	r2,r18,r2
   24b90:	1085883a 	add	r2,r2,r2
   24b94:	d9809717 	ldw	r6,604(sp)
   24b98:	1085883a 	add	r2,r2,r2
   24b9c:	d9007804 	addi	r4,sp,480
   24ba0:	0007883a 	mov	r3,zero
   24ba4:	2085883a 	add	r2,r4,r2
   24ba8:	11000017 	ldw	r4,0(r2)
   24bac:	10bfff04 	addi	r2,r2,-4
   24bb0:	1906b03a 	or	r3,r3,r4
   24bb4:	11bffc1e 	bne	r2,r6,24ba8 <__kernel_rem_pio2+0x494>
   24bb8:	1800821e 	bne	r3,zero,24dc4 <__kernel_rem_pio2+0x6b0>
   24bbc:	da009817 	ldw	r8,608(sp)
   24bc0:	40800017 	ldw	r2,0(r8)
   24bc4:	1001151e 	bne	r2,zero,2501c <__kernel_rem_pio2+0x908>
   24bc8:	d8809617 	ldw	r2,600(sp)
   24bcc:	05000044 	movi	r20,1
   24bd0:	10bfff04 	addi	r2,r2,-4
   24bd4:	10c00117 	ldw	r3,4(r2)
   24bd8:	a5000044 	addi	r20,r20,1
   24bdc:	183ffc26 	beq	r3,zero,24bd0 <__kernel_rem_pio2+0x4bc>
   24be0:	9529883a 	add	r20,r18,r20
   24be4:	90800044 	addi	r2,r18,1
   24be8:	dd009115 	stw	r20,580(sp)
   24bec:	a0803216 	blt	r20,r2,24cb8 <__kernel_rem_pio2+0x5a4>
   24bf0:	da009317 	ldw	r8,588(sp)
   24bf4:	d8c09117 	ldw	r3,580(sp)
   24bf8:	44a3883a 	add	r17,r8,r18
   24bfc:	da009217 	ldw	r8,584(sp)
   24c00:	882290fa 	slli	r17,r17,3
   24c04:	40a5883a 	add	r18,r8,r2
   24c08:	da009517 	ldw	r8,596(sp)
   24c0c:	100490fa 	slli	r2,r2,3
   24c10:	94a5883a 	add	r18,r18,r18
   24c14:	40eb883a 	add	r21,r8,r3
   24c18:	da00a717 	ldw	r8,668(sp)
   24c1c:	ad6b883a 	add	r21,r21,r21
   24c20:	94a5883a 	add	r18,r18,r18
   24c24:	ad6b883a 	add	r21,r21,r21
   24c28:	d8c05004 	addi	r3,sp,320
   24c2c:	44a5883a 	add	r18,r8,r18
   24c30:	1c63883a 	add	r17,r3,r17
   24c34:	d8a7883a 	add	r19,sp,r2
   24c38:	456b883a 	add	r21,r8,r21
   24c3c:	91000017 	ldw	r4,0(r18)
   24c40:	00293680 	call	29368 <__floatsidf>
   24c44:	da008d17 	ldw	r8,564(sp)
   24c48:	88800015 	stw	r2,0(r17)
   24c4c:	88c00115 	stw	r3,4(r17)
   24c50:	40001b16 	blt	r8,zero,24cc0 <__kernel_rem_pio2+0x5ac>
   24c54:	dd008e17 	ldw	r20,568(sp)
   24c58:	882d883a 	mov	r22,r17
   24c5c:	002f883a 	mov	r23,zero
   24c60:	0039883a 	mov	fp,zero
   24c64:	b1800017 	ldw	r6,0(r22)
   24c68:	b1c00117 	ldw	r7,4(r22)
   24c6c:	a1000017 	ldw	r4,0(r20)
   24c70:	a1400117 	ldw	r5,4(r20)
   24c74:	a5000204 	addi	r20,r20,8
   24c78:	b5bffe04 	addi	r22,r22,-8
   24c7c:	00282d40 	call	282d4 <__muldf3>
   24c80:	b809883a 	mov	r4,r23
   24c84:	e00b883a 	mov	r5,fp
   24c88:	100d883a 	mov	r6,r2
   24c8c:	180f883a 	mov	r7,r3
   24c90:	0026ee80 	call	26ee8 <__adddf3>
   24c94:	102f883a 	mov	r23,r2
   24c98:	1839883a 	mov	fp,r3
   24c9c:	a43ff11e 	bne	r20,r16,24c64 <__kernel_rem_pio2+0x550>
   24ca0:	9dc00015 	stw	r23,0(r19)
   24ca4:	9f000115 	stw	fp,4(r19)
   24ca8:	94800104 	addi	r18,r18,4
   24cac:	8c400204 	addi	r17,r17,8
   24cb0:	9cc00204 	addi	r19,r19,8
   24cb4:	957fe11e 	bne	r18,r21,24c3c <__kernel_rem_pio2+0x528>
   24cb8:	dc809117 	ldw	r18,580(sp)
   24cbc:	003f0f06 	br	248fc <__kernel_rem_pio2+0x1e8>
   24cc0:	002f883a 	mov	r23,zero
   24cc4:	0039883a 	mov	fp,zero
   24cc8:	003ff506 	br	24ca0 <__kernel_rem_pio2+0x58c>
   24ccc:	480d883a 	mov	r6,r9
   24cd0:	180f883a 	mov	r7,r3
   24cd4:	0009883a 	mov	r4,zero
   24cd8:	014ffc34 	movhi	r5,16368
   24cdc:	00289ec0 	call	289ec <__subdf3>
   24ce0:	102b883a 	mov	r21,r2
   24ce4:	1811883a 	mov	r8,r3
   24ce8:	a03f9b26 	beq	r20,zero,24b58 <__kernel_rem_pio2+0x444>
   24cec:	d9809017 	ldw	r6,576(sp)
   24cf0:	0009883a 	mov	r4,zero
   24cf4:	014ffc34 	movhi	r5,16368
   24cf8:	d8c09b15 	stw	r3,620(sp)
   24cfc:	00258000 	call	25800 <scalbn>
   24d00:	da009b17 	ldw	r8,620(sp)
   24d04:	a809883a 	mov	r4,r21
   24d08:	100d883a 	mov	r6,r2
   24d0c:	400b883a 	mov	r5,r8
   24d10:	180f883a 	mov	r7,r3
   24d14:	00289ec0 	call	289ec <__subdf3>
   24d18:	102b883a 	mov	r21,r2
   24d1c:	1811883a 	mov	r8,r3
   24d20:	003f8d06 	br	24b58 <__kernel_rem_pio2+0x444>
   24d24:	0005883a 	mov	r2,zero
   24d28:	0007883a 	mov	r3,zero
   24d2c:	003eac06 	br	247e0 <__kernel_rem_pio2+0xcc>
   24d30:	d8809017 	ldw	r2,576(sp)
   24d34:	1000121e 	bne	r2,zero,24d80 <__kernel_rem_pio2+0x66c>
   24d38:	90bfffc4 	addi	r2,r18,-1
   24d3c:	1085883a 	add	r2,r2,r2
   24d40:	1085883a 	add	r2,r2,r2
   24d44:	d885883a 	add	r2,sp,r2
   24d48:	14c07817 	ldw	r19,480(r2)
   24d4c:	9827d5fa 	srai	r19,r19,23
   24d50:	003f5606 	br	24aac <__kernel_rem_pio2+0x398>
   24d54:	90bfffc4 	addi	r2,r18,-1
   24d58:	1085883a 	add	r2,r2,r2
   24d5c:	1085883a 	add	r2,r2,r2
   24d60:	d885883a 	add	r2,sp,r2
   24d64:	10807804 	addi	r2,r2,480
   24d68:	11000017 	ldw	r4,0(r2)
   24d6c:	01402034 	movhi	r5,128
   24d70:	297fffc4 	addi	r5,r5,-1
   24d74:	2148703a 	and	r4,r4,r5
   24d78:	11000015 	stw	r4,0(r2)
   24d7c:	003f7406 	br	24b50 <__kernel_rem_pio2+0x43c>
   24d80:	4809883a 	mov	r4,r9
   24d84:	180b883a 	mov	r5,r3
   24d88:	000d883a 	mov	r6,zero
   24d8c:	01cff834 	movhi	r7,16352
   24d90:	d8c09a15 	stw	r3,616(sp)
   24d94:	d8c09b15 	stw	r3,620(sp)
   24d98:	da409915 	stw	r9,612(sp)
   24d9c:	00281040 	call	28104 <__gedf2>
   24da0:	d8c09a17 	ldw	r3,616(sp)
   24da4:	da009b17 	ldw	r8,620(sp)
   24da8:	da409917 	ldw	r9,612(sp)
   24dac:	1000920e 	bge	r2,zero,24ff8 <__kernel_rem_pio2+0x8e4>
   24db0:	0027883a 	mov	r19,zero
   24db4:	003f6806 	br	24b58 <__kernel_rem_pio2+0x444>
   24db8:	002d883a 	mov	r22,zero
   24dbc:	002b883a 	mov	r21,zero
   24dc0:	003eb006 	br	24884 <__kernel_rem_pio2+0x170>
   24dc4:	2945883a 	add	r2,r5,r5
   24dc8:	da009017 	ldw	r8,576(sp)
   24dcc:	1085883a 	add	r2,r2,r2
   24dd0:	d885883a 	add	r2,sp,r2
   24dd4:	10807817 	ldw	r2,480(r2)
   24dd8:	423ffa04 	addi	r8,r8,-24
   24ddc:	dc409115 	stw	r17,580(sp)
   24de0:	dcc08d15 	stw	r19,564(sp)
   24de4:	da009015 	stw	r8,576(sp)
   24de8:	dd809417 	ldw	r22,592(sp)
   24dec:	2823883a 	mov	r17,r5
   24df0:	10000e1e 	bne	r2,zero,24e2c <__kernel_rem_pio2+0x718>
   24df4:	00900034 	movhi	r2,16384
   24df8:	10bfffc4 	addi	r2,r2,-1
   24dfc:	2885883a 	add	r2,r5,r2
   24e00:	1085883a 	add	r2,r2,r2
   24e04:	d8c07804 	addi	r3,sp,480
   24e08:	1085883a 	add	r2,r2,r2
   24e0c:	1885883a 	add	r2,r3,r2
   24e10:	4007883a 	mov	r3,r8
   24e14:	10bfff04 	addi	r2,r2,-4
   24e18:	11000117 	ldw	r4,4(r2)
   24e1c:	8c7fffc4 	addi	r17,r17,-1
   24e20:	18fffa04 	addi	r3,r3,-24
   24e24:	203ffb26 	beq	r4,zero,24e14 <__kernel_rem_pio2+0x700>
   24e28:	d8c09015 	stw	r3,576(sp)
   24e2c:	d9809017 	ldw	r6,576(sp)
   24e30:	0009883a 	mov	r4,zero
   24e34:	014ffc34 	movhi	r5,16368
   24e38:	00258000 	call	25800 <scalbn>
   24e3c:	1029883a 	mov	r20,r2
   24e40:	182b883a 	mov	r21,r3
   24e44:	88018416 	blt	r17,zero,25458 <__kernel_rem_pio2+0xd44>
   24e48:	881090fa 	slli	r8,r17,3
   24e4c:	d8c07804 	addi	r3,sp,480
   24e50:	da008e15 	stw	r8,568(sp)
   24e54:	d8808e17 	ldw	r2,568(sp)
   24e58:	8c51883a 	add	r8,r17,r17
   24e5c:	4211883a 	add	r8,r8,r8
   24e60:	d8a1883a 	add	r16,sp,r2
   24e64:	1a25883a 	add	r18,r3,r8
   24e68:	da3ffe04 	addi	r8,sp,-8
   24e6c:	da008c15 	stw	r8,560(sp)
   24e70:	8039883a 	mov	fp,r16
   24e74:	91000017 	ldw	r4,0(r18)
   24e78:	e73ffe04 	addi	fp,fp,-8
   24e7c:	94bfff04 	addi	r18,r18,-4
   24e80:	00293680 	call	29368 <__floatsidf>
   24e84:	a00d883a 	mov	r6,r20
   24e88:	a80f883a 	mov	r7,r21
   24e8c:	1009883a 	mov	r4,r2
   24e90:	180b883a 	mov	r5,r3
   24e94:	00282d40 	call	282d4 <__muldf3>
   24e98:	a009883a 	mov	r4,r20
   24e9c:	a80b883a 	mov	r5,r21
   24ea0:	e0800215 	stw	r2,8(fp)
   24ea4:	e0c00315 	stw	r3,12(fp)
   24ea8:	000d883a 	mov	r6,zero
   24eac:	01cf9c34 	movhi	r7,15984
   24eb0:	00282d40 	call	282d4 <__muldf3>
   24eb4:	da008c17 	ldw	r8,560(sp)
   24eb8:	1029883a 	mov	r20,r2
   24ebc:	182b883a 	mov	r21,r3
   24ec0:	e23fec1e 	bne	fp,r8,24e74 <__kernel_rem_pio2+0x760>
   24ec4:	0029883a 	mov	r20,zero
   24ec8:	b0004f16 	blt	r22,zero,25008 <__kernel_rem_pio2+0x8f4>
   24ecc:	05400134 	movhi	r21,4
   24ed0:	014ffe74 	movhi	r5,16377
   24ed4:	ad608904 	addi	r21,r21,-32220
   24ed8:	8027883a 	mov	r19,r16
   24edc:	01100034 	movhi	r4,16384
   24ee0:	29487ec4 	addi	r5,r5,8699
   24ee4:	0039883a 	mov	fp,zero
   24ee8:	002f883a 	mov	r23,zero
   24eec:	0025883a 	mov	r18,zero
   24ef0:	00000506 	br	24f08 <__kernel_rem_pio2+0x7f4>
   24ef4:	9cc00204 	addi	r19,r19,8
   24ef8:	a4800f16 	blt	r20,r18,24f38 <__kernel_rem_pio2+0x824>
   24efc:	a9000017 	ldw	r4,0(r21)
   24f00:	a9400117 	ldw	r5,4(r21)
   24f04:	ad400204 	addi	r21,r21,8
   24f08:	99800017 	ldw	r6,0(r19)
   24f0c:	99c00117 	ldw	r7,4(r19)
   24f10:	94800044 	addi	r18,r18,1
   24f14:	00282d40 	call	282d4 <__muldf3>
   24f18:	e009883a 	mov	r4,fp
   24f1c:	b80b883a 	mov	r5,r23
   24f20:	100d883a 	mov	r6,r2
   24f24:	180f883a 	mov	r7,r3
   24f28:	0026ee80 	call	26ee8 <__adddf3>
   24f2c:	1039883a 	mov	fp,r2
   24f30:	182f883a 	mov	r23,r3
   24f34:	b4bfef0e 	bge	r22,r18,24ef4 <__kernel_rem_pio2+0x7e0>
   24f38:	a00490fa 	slli	r2,r20,3
   24f3c:	da008c17 	ldw	r8,560(sp)
   24f40:	843ffe04 	addi	r16,r16,-8
   24f44:	d885883a 	add	r2,sp,r2
   24f48:	10802804 	addi	r2,r2,160
   24f4c:	17000015 	stw	fp,0(r2)
   24f50:	15c00115 	stw	r23,4(r2)
   24f54:	a5000044 	addi	r20,r20,1
   24f58:	823fdb1e 	bne	r16,r8,24ec8 <__kernel_rem_pio2+0x7b4>
   24f5c:	da00a617 	ldw	r8,664(sp)
   24f60:	00800084 	movi	r2,2
   24f64:	12006616 	blt	r2,r8,25100 <__kernel_rem_pio2+0x9ec>
   24f68:	0200de16 	blt	zero,r8,252e4 <__kernel_rem_pio2+0xbd0>
   24f6c:	4000141e 	bne	r8,zero,24fc0 <__kernel_rem_pio2+0x8ac>
   24f70:	da008e17 	ldw	r8,568(sp)
   24f74:	d8802804 	addi	r2,sp,160
   24f78:	0007883a 	mov	r3,zero
   24f7c:	1225883a 	add	r18,r2,r8
   24f80:	043fffc4 	movi	r16,-1
   24f84:	0005883a 	mov	r2,zero
   24f88:	91800017 	ldw	r6,0(r18)
   24f8c:	91c00117 	ldw	r7,4(r18)
   24f90:	1009883a 	mov	r4,r2
   24f94:	180b883a 	mov	r5,r3
   24f98:	8c7fffc4 	addi	r17,r17,-1
   24f9c:	0026ee80 	call	26ee8 <__adddf3>
   24fa0:	94bffe04 	addi	r18,r18,-8
   24fa4:	8c3ff81e 	bne	r17,r16,24f88 <__kernel_rem_pio2+0x874>
   24fa8:	da008d17 	ldw	r8,564(sp)
   24fac:	40000126 	beq	r8,zero,24fb4 <__kernel_rem_pio2+0x8a0>
   24fb0:	18e0003c 	xorhi	r3,r3,32768
   24fb4:	da008f17 	ldw	r8,572(sp)
   24fb8:	40800015 	stw	r2,0(r8)
   24fbc:	40c00115 	stw	r3,4(r8)
   24fc0:	da009117 	ldw	r8,580(sp)
   24fc4:	408001cc 	andi	r2,r8,7
   24fc8:	dfc0a517 	ldw	ra,660(sp)
   24fcc:	df00a417 	ldw	fp,656(sp)
   24fd0:	ddc0a317 	ldw	r23,652(sp)
   24fd4:	dd80a217 	ldw	r22,648(sp)
   24fd8:	dd40a117 	ldw	r21,644(sp)
   24fdc:	dd00a017 	ldw	r20,640(sp)
   24fe0:	dcc09f17 	ldw	r19,636(sp)
   24fe4:	dc809e17 	ldw	r18,632(sp)
   24fe8:	dc409d17 	ldw	r17,628(sp)
   24fec:	dc009c17 	ldw	r16,624(sp)
   24ff0:	dec0a604 	addi	sp,sp,664
   24ff4:	f800283a 	ret
   24ff8:	8c400044 	addi	r17,r17,1
   24ffc:	04810d0e 	bge	zero,r18,25434 <__kernel_rem_pio2+0xd20>
   25000:	04c00084 	movi	r19,2
   25004:	003eac06 	br	24ab8 <__kernel_rem_pio2+0x3a4>
   25008:	0039883a 	mov	fp,zero
   2500c:	002f883a 	mov	r23,zero
   25010:	003fc906 	br	24f38 <__kernel_rem_pio2+0x824>
   25014:	0029883a 	mov	r20,zero
   25018:	003ebd06 	br	24b10 <__kernel_rem_pio2+0x3fc>
   2501c:	05000044 	movi	r20,1
   25020:	003eef06 	br	24be0 <__kernel_rem_pio2+0x4cc>
   25024:	4029883a 	mov	r20,r8
   25028:	da009017 	ldw	r8,576(sp)
   2502c:	a809883a 	mov	r4,r21
   25030:	a00b883a 	mov	r5,r20
   25034:	020dc83a 	sub	r6,zero,r8
   25038:	dc409115 	stw	r17,580(sp)
   2503c:	dd809417 	ldw	r22,592(sp)
   25040:	dcc08d15 	stw	r19,564(sp)
   25044:	00258000 	call	25800 <scalbn>
   25048:	000d883a 	mov	r6,zero
   2504c:	01d05c34 	movhi	r7,16752
   25050:	1009883a 	mov	r4,r2
   25054:	180b883a 	mov	r5,r3
   25058:	102b883a 	mov	r21,r2
   2505c:	1823883a 	mov	r17,r3
   25060:	00281040 	call	28104 <__gedf2>
   25064:	1000e916 	blt	r2,zero,2540c <__kernel_rem_pio2+0xcf8>
   25068:	000d883a 	mov	r6,zero
   2506c:	01cf9c34 	movhi	r7,15984
   25070:	880b883a 	mov	r5,r17
   25074:	a809883a 	mov	r4,r21
   25078:	00282d40 	call	282d4 <__muldf3>
   2507c:	180b883a 	mov	r5,r3
   25080:	1009883a 	mov	r4,r2
   25084:	00292e80 	call	292e8 <__fixdfsi>
   25088:	1029883a 	mov	r20,r2
   2508c:	9485883a 	add	r2,r18,r18
   25090:	1085883a 	add	r2,r2,r2
   25094:	a009883a 	mov	r4,r20
   25098:	d8a1883a 	add	r16,sp,r2
   2509c:	00293680 	call	29368 <__floatsidf>
   250a0:	000d883a 	mov	r6,zero
   250a4:	01d05c34 	movhi	r7,16752
   250a8:	1009883a 	mov	r4,r2
   250ac:	180b883a 	mov	r5,r3
   250b0:	00282d40 	call	282d4 <__muldf3>
   250b4:	880b883a 	mov	r5,r17
   250b8:	100d883a 	mov	r6,r2
   250bc:	180f883a 	mov	r7,r3
   250c0:	a809883a 	mov	r4,r21
   250c4:	00289ec0 	call	289ec <__subdf3>
   250c8:	180b883a 	mov	r5,r3
   250cc:	1009883a 	mov	r4,r2
   250d0:	00292e80 	call	292e8 <__fixdfsi>
   250d4:	da009017 	ldw	r8,576(sp)
   250d8:	94400044 	addi	r17,r18,1
   250dc:	8c47883a 	add	r3,r17,r17
   250e0:	84007804 	addi	r16,r16,480
   250e4:	18c7883a 	add	r3,r3,r3
   250e8:	80800015 	stw	r2,0(r16)
   250ec:	d8c7883a 	add	r3,sp,r3
   250f0:	42000604 	addi	r8,r8,24
   250f4:	da009015 	stw	r8,576(sp)
   250f8:	1d007815 	stw	r20,480(r3)
   250fc:	003f4b06 	br	24e2c <__kernel_rem_pio2+0x718>
   25100:	da00a617 	ldw	r8,664(sp)
   25104:	008000c4 	movi	r2,3
   25108:	40bfad1e 	bne	r8,r2,24fc0 <__kernel_rem_pio2+0x8ac>
   2510c:	0440bc0e 	bge	zero,r17,25400 <__kernel_rem_pio2+0xcec>
   25110:	da008e17 	ldw	r8,568(sp)
   25114:	882090fa 	slli	r16,r17,3
   25118:	dd402804 	addi	r21,sp,160
   2511c:	da05883a 	add	r2,sp,r8
   25120:	10802804 	addi	r2,r2,160
   25124:	15c00017 	ldw	r23,0(r2)
   25128:	15800117 	ldw	r22,4(r2)
   2512c:	8029883a 	mov	r20,r16
   25130:	843ffe04 	addi	r16,r16,-8
   25134:	ac21883a 	add	r16,r21,r16
   25138:	ad29883a 	add	r20,r21,r20
   2513c:	dac02604 	addi	r11,sp,152
   25140:	8811883a 	mov	r8,r17
   25144:	84400017 	ldw	r17,0(r16)
   25148:	87000117 	ldw	fp,4(r16)
   2514c:	b80d883a 	mov	r6,r23
   25150:	b00f883a 	mov	r7,r22
   25154:	8809883a 	mov	r4,r17
   25158:	e00b883a 	mov	r5,fp
   2515c:	da009b15 	stw	r8,620(sp)
   25160:	dac09915 	stw	r11,612(sp)
   25164:	0026ee80 	call	26ee8 <__adddf3>
   25168:	100d883a 	mov	r6,r2
   2516c:	180f883a 	mov	r7,r3
   25170:	8809883a 	mov	r4,r17
   25174:	e00b883a 	mov	r5,fp
   25178:	1027883a 	mov	r19,r2
   2517c:	1825883a 	mov	r18,r3
   25180:	00289ec0 	call	289ec <__subdf3>
   25184:	b80d883a 	mov	r6,r23
   25188:	b00f883a 	mov	r7,r22
   2518c:	1009883a 	mov	r4,r2
   25190:	180b883a 	mov	r5,r3
   25194:	0026ee80 	call	26ee8 <__adddf3>
   25198:	dac09917 	ldw	r11,612(sp)
   2519c:	a0800015 	stw	r2,0(r20)
   251a0:	a0c00115 	stw	r3,4(r20)
   251a4:	84c00015 	stw	r19,0(r16)
   251a8:	84800115 	stw	r18,4(r16)
   251ac:	843ffe04 	addi	r16,r16,-8
   251b0:	a53ffe04 	addi	r20,r20,-8
   251b4:	982f883a 	mov	r23,r19
   251b8:	902d883a 	mov	r22,r18
   251bc:	da009b17 	ldw	r8,620(sp)
   251c0:	5c3fe01e 	bne	r11,r16,25144 <__kernel_rem_pio2+0xa30>
   251c4:	00800044 	movi	r2,1
   251c8:	12008d0e 	bge	r2,r8,25400 <__kernel_rem_pio2+0xcec>
   251cc:	402090fa 	slli	r16,r8,3
   251d0:	da008e17 	ldw	r8,568(sp)
   251d4:	8023883a 	mov	r17,r16
   251d8:	da05883a 	add	r2,sp,r8
   251dc:	10802804 	addi	r2,r2,160
   251e0:	15800017 	ldw	r22,0(r2)
   251e4:	15000117 	ldw	r20,4(r2)
   251e8:	ac63883a 	add	r17,r21,r17
   251ec:	843ffe04 	addi	r16,r16,-8
   251f0:	ac21883a 	add	r16,r21,r16
   251f4:	8825883a 	mov	r18,r17
   251f8:	8811883a 	mov	r8,r17
   251fc:	84400017 	ldw	r17,0(r16)
   25200:	87000117 	ldw	fp,4(r16)
   25204:	b009883a 	mov	r4,r22
   25208:	a00b883a 	mov	r5,r20
   2520c:	880d883a 	mov	r6,r17
   25210:	e00f883a 	mov	r7,fp
   25214:	da009b15 	stw	r8,620(sp)
   25218:	0026ee80 	call	26ee8 <__adddf3>
   2521c:	100d883a 	mov	r6,r2
   25220:	180f883a 	mov	r7,r3
   25224:	8809883a 	mov	r4,r17
   25228:	e00b883a 	mov	r5,fp
   2522c:	102f883a 	mov	r23,r2
   25230:	1827883a 	mov	r19,r3
   25234:	00289ec0 	call	289ec <__subdf3>
   25238:	b00d883a 	mov	r6,r22
   2523c:	a00f883a 	mov	r7,r20
   25240:	1009883a 	mov	r4,r2
   25244:	180b883a 	mov	r5,r3
   25248:	0026ee80 	call	26ee8 <__adddf3>
   2524c:	90800015 	stw	r2,0(r18)
   25250:	90c00115 	stw	r3,4(r18)
   25254:	85c00015 	stw	r23,0(r16)
   25258:	84c00115 	stw	r19,4(r16)
   2525c:	843ffe04 	addi	r16,r16,-8
   25260:	94bffe04 	addi	r18,r18,-8
   25264:	b82d883a 	mov	r22,r23
   25268:	9829883a 	mov	r20,r19
   2526c:	da009b17 	ldw	r8,620(sp)
   25270:	ac3fe21e 	bne	r21,r16,251fc <__kernel_rem_pio2+0xae8>
   25274:	4023883a 	mov	r17,r8
   25278:	dc002a04 	addi	r16,sp,168
   2527c:	0005883a 	mov	r2,zero
   25280:	0007883a 	mov	r3,zero
   25284:	89800017 	ldw	r6,0(r17)
   25288:	89c00117 	ldw	r7,4(r17)
   2528c:	1009883a 	mov	r4,r2
   25290:	8c7ffe04 	addi	r17,r17,-8
   25294:	180b883a 	mov	r5,r3
   25298:	0026ee80 	call	26ee8 <__adddf3>
   2529c:	847ff91e 	bne	r16,r17,25284 <__kernel_rem_pio2+0xb70>
   252a0:	da008d17 	ldw	r8,564(sp)
   252a4:	40004726 	beq	r8,zero,253c4 <__kernel_rem_pio2+0xcb0>
   252a8:	d9002b17 	ldw	r4,172(sp)
   252ac:	d9402917 	ldw	r5,164(sp)
   252b0:	d9802a17 	ldw	r6,168(sp)
   252b4:	da008f17 	ldw	r8,572(sp)
   252b8:	d9c02817 	ldw	r7,160(sp)
   252bc:	2960003c 	xorhi	r5,r5,32768
   252c0:	2120003c 	xorhi	r4,r4,32768
   252c4:	18e0003c 	xorhi	r3,r3,32768
   252c8:	41c00015 	stw	r7,0(r8)
   252cc:	41400115 	stw	r5,4(r8)
   252d0:	41800215 	stw	r6,8(r8)
   252d4:	41000315 	stw	r4,12(r8)
   252d8:	40800415 	stw	r2,16(r8)
   252dc:	40c00515 	stw	r3,20(r8)
   252e0:	003f3706 	br	24fc0 <__kernel_rem_pio2+0x8ac>
   252e4:	da008e17 	ldw	r8,568(sp)
   252e8:	d8802804 	addi	r2,sp,160
   252ec:	dc002604 	addi	r16,sp,152
   252f0:	1225883a 	add	r18,r2,r8
   252f4:	0007883a 	mov	r3,zero
   252f8:	0005883a 	mov	r2,zero
   252fc:	91800017 	ldw	r6,0(r18)
   25300:	91c00117 	ldw	r7,4(r18)
   25304:	1009883a 	mov	r4,r2
   25308:	94bffe04 	addi	r18,r18,-8
   2530c:	180b883a 	mov	r5,r3
   25310:	0026ee80 	call	26ee8 <__adddf3>
   25314:	943ff91e 	bne	r18,r16,252fc <__kernel_rem_pio2+0xbe8>
   25318:	da008d17 	ldw	r8,564(sp)
   2531c:	d9002817 	ldw	r4,160(sp)
   25320:	d9402917 	ldw	r5,164(sp)
   25324:	40001a26 	beq	r8,zero,25390 <__kernel_rem_pio2+0xc7c>
   25328:	da008f17 	ldw	r8,572(sp)
   2532c:	19a0003c 	xorhi	r6,r3,32768
   25330:	180f883a 	mov	r7,r3
   25334:	41800115 	stw	r6,4(r8)
   25338:	40800015 	stw	r2,0(r8)
   2533c:	100d883a 	mov	r6,r2
   25340:	00289ec0 	call	289ec <__subdf3>
   25344:	04400c0e 	bge	zero,r17,25378 <__kernel_rem_pio2+0xc64>
   25348:	dc002a04 	addi	r16,sp,168
   2534c:	04800044 	movi	r18,1
   25350:	81800017 	ldw	r6,0(r16)
   25354:	81c00117 	ldw	r7,4(r16)
   25358:	1009883a 	mov	r4,r2
   2535c:	180b883a 	mov	r5,r3
   25360:	94800044 	addi	r18,r18,1
   25364:	0026ee80 	call	26ee8 <__adddf3>
   25368:	84000204 	addi	r16,r16,8
   2536c:	8cbff80e 	bge	r17,r18,25350 <__kernel_rem_pio2+0xc3c>
   25370:	da008d17 	ldw	r8,564(sp)
   25374:	40004226 	beq	r8,zero,25480 <__kernel_rem_pio2+0xd6c>
   25378:	da008f17 	ldw	r8,572(sp)
   2537c:	1009883a 	mov	r4,r2
   25380:	18a0003c 	xorhi	r2,r3,32768
   25384:	41000215 	stw	r4,8(r8)
   25388:	40800315 	stw	r2,12(r8)
   2538c:	003f0c06 	br	24fc0 <__kernel_rem_pio2+0x8ac>
   25390:	da008f17 	ldw	r8,572(sp)
   25394:	100d883a 	mov	r6,r2
   25398:	180f883a 	mov	r7,r3
   2539c:	40800015 	stw	r2,0(r8)
   253a0:	40c00115 	stw	r3,4(r8)
   253a4:	00289ec0 	call	289ec <__subdf3>
   253a8:	047fe716 	blt	zero,r17,25348 <__kernel_rem_pio2+0xc34>
   253ac:	da008f17 	ldw	r8,572(sp)
   253b0:	1009883a 	mov	r4,r2
   253b4:	1805883a 	mov	r2,r3
   253b8:	41000215 	stw	r4,8(r8)
   253bc:	40800315 	stw	r2,12(r8)
   253c0:	003eff06 	br	24fc0 <__kernel_rem_pio2+0x8ac>
   253c4:	da008f17 	ldw	r8,572(sp)
   253c8:	d9802817 	ldw	r6,160(sp)
   253cc:	d9402a17 	ldw	r5,168(sp)
   253d0:	d9002b17 	ldw	r4,172(sp)
   253d4:	41800015 	stw	r6,0(r8)
   253d8:	d9802917 	ldw	r6,164(sp)
   253dc:	41400215 	stw	r5,8(r8)
   253e0:	41000315 	stw	r4,12(r8)
   253e4:	41800115 	stw	r6,4(r8)
   253e8:	40800415 	stw	r2,16(r8)
   253ec:	40c00515 	stw	r3,20(r8)
   253f0:	003ef306 	br	24fc0 <__kernel_rem_pio2+0x8ac>
   253f4:	da00a617 	ldw	r8,664(sp)
   253f8:	008000c4 	movi	r2,3
   253fc:	40bef01e 	bne	r8,r2,24fc0 <__kernel_rem_pio2+0x8ac>
   25400:	0005883a 	mov	r2,zero
   25404:	0007883a 	mov	r3,zero
   25408:	003fa506 	br	252a0 <__kernel_rem_pio2+0xb8c>
   2540c:	9485883a 	add	r2,r18,r18
   25410:	1085883a 	add	r2,r2,r2
   25414:	d8a1883a 	add	r16,sp,r2
   25418:	880b883a 	mov	r5,r17
   2541c:	a809883a 	mov	r4,r21
   25420:	84007804 	addi	r16,r16,480
   25424:	00292e80 	call	292e8 <__fixdfsi>
   25428:	80800015 	stw	r2,0(r16)
   2542c:	9023883a 	mov	r17,r18
   25430:	003e7e06 	br	24e2c <__kernel_rem_pio2+0x718>
   25434:	a80d883a 	mov	r6,r21
   25438:	400f883a 	mov	r7,r8
   2543c:	0009883a 	mov	r4,zero
   25440:	014ffc34 	movhi	r5,16368
   25444:	00289ec0 	call	289ec <__subdf3>
   25448:	102b883a 	mov	r21,r2
   2544c:	1811883a 	mov	r8,r3
   25450:	04c00084 	movi	r19,2
   25454:	003dc006 	br	24b58 <__kernel_rem_pio2+0x444>
   25458:	da00a617 	ldw	r8,664(sp)
   2545c:	00800084 	movi	r2,2
   25460:	123fe416 	blt	r2,r8,253f4 <__kernel_rem_pio2+0xce0>
   25464:	02000c16 	blt	zero,r8,25498 <__kernel_rem_pio2+0xd84>
   25468:	403ed51e 	bne	r8,zero,24fc0 <__kernel_rem_pio2+0x8ac>
   2546c:	0005883a 	mov	r2,zero
   25470:	0007883a 	mov	r3,zero
   25474:	003ecc06 	br	24fa8 <__kernel_rem_pio2+0x894>
   25478:	d8009215 	stw	zero,584(sp)
   2547c:	003cc306 	br	2478c <__kernel_rem_pio2+0x78>
   25480:	da008f17 	ldw	r8,572(sp)
   25484:	1009883a 	mov	r4,r2
   25488:	1805883a 	mov	r2,r3
   2548c:	41000215 	stw	r4,8(r8)
   25490:	40800315 	stw	r2,12(r8)
   25494:	003eca06 	br	24fc0 <__kernel_rem_pio2+0x8ac>
   25498:	0005883a 	mov	r2,zero
   2549c:	0007883a 	mov	r3,zero
   254a0:	003f9d06 	br	25318 <__kernel_rem_pio2+0xc04>

000254a4 <__kernel_sin>:
   254a4:	00a00034 	movhi	r2,32768
   254a8:	defff404 	addi	sp,sp,-48
   254ac:	10bfffc4 	addi	r2,r2,-1
   254b0:	00cf9034 	movhi	r3,15936
   254b4:	ddc00915 	stw	r23,36(sp)
   254b8:	dd800815 	stw	r22,32(sp)
   254bc:	dc400315 	stw	r17,12(sp)
   254c0:	dc000215 	stw	r16,8(sp)
   254c4:	dfc00b15 	stw	ra,44(sp)
   254c8:	df000a15 	stw	fp,40(sp)
   254cc:	dd400715 	stw	r21,28(sp)
   254d0:	dd000615 	stw	r20,24(sp)
   254d4:	dcc00515 	stw	r19,20(sp)
   254d8:	dc800415 	stw	r18,16(sp)
   254dc:	2884703a 	and	r2,r5,r2
   254e0:	18ffffc4 	addi	r3,r3,-1
   254e4:	2821883a 	mov	r16,r5
   254e8:	2023883a 	mov	r17,r4
   254ec:	302f883a 	mov	r23,r6
   254f0:	382d883a 	mov	r22,r7
   254f4:	18800216 	blt	r3,r2,25500 <__kernel_sin+0x5c>
   254f8:	00292e80 	call	292e8 <__fixdfsi>
   254fc:	10009926 	beq	r2,zero,25764 <__kernel_sin+0x2c0>
   25500:	880d883a 	mov	r6,r17
   25504:	800f883a 	mov	r7,r16
   25508:	8809883a 	mov	r4,r17
   2550c:	800b883a 	mov	r5,r16
   25510:	00282d40 	call	282d4 <__muldf3>
   25514:	100d883a 	mov	r6,r2
   25518:	180f883a 	mov	r7,r3
   2551c:	8809883a 	mov	r4,r17
   25520:	800b883a 	mov	r5,r16
   25524:	1027883a 	mov	r19,r2
   25528:	1825883a 	mov	r18,r3
   2552c:	00282d40 	call	282d4 <__muldf3>
   25530:	0196b434 	movhi	r6,23248
   25534:	01cf79b4 	movhi	r7,15846
   25538:	31b55f04 	addi	r6,r6,-10884
   2553c:	39f64e84 	addi	r7,r7,-9926
   25540:	9809883a 	mov	r4,r19
   25544:	900b883a 	mov	r5,r18
   25548:	102b883a 	mov	r21,r2
   2554c:	1829883a 	mov	r20,r3
   25550:	00282d40 	call	282d4 <__muldf3>
   25554:	01a28b34 	movhi	r6,35372
   25558:	01cf96f4 	movhi	r7,15963
   2555c:	31a73ac4 	addi	r6,r6,-25365
   25560:	39f97984 	addi	r7,r7,-6682
   25564:	1009883a 	mov	r4,r2
   25568:	180b883a 	mov	r5,r3
   2556c:	00289ec0 	call	289ec <__subdf3>
   25570:	980d883a 	mov	r6,r19
   25574:	900f883a 	mov	r7,r18
   25578:	1009883a 	mov	r4,r2
   2557c:	180b883a 	mov	r5,r3
   25580:	00282d40 	call	282d4 <__muldf3>
   25584:	0195ecb4 	movhi	r6,22450
   25588:	01cfb1f4 	movhi	r7,16071
   2558c:	31bf9f44 	addi	r6,r6,-387
   25590:	39c778c4 	addi	r7,r7,7651
   25594:	1009883a 	mov	r4,r2
   25598:	180b883a 	mov	r5,r3
   2559c:	0026ee80 	call	26ee8 <__adddf3>
   255a0:	980d883a 	mov	r6,r19
   255a4:	900f883a 	mov	r7,r18
   255a8:	1009883a 	mov	r4,r2
   255ac:	180b883a 	mov	r5,r3
   255b0:	00282d40 	call	282d4 <__muldf3>
   255b4:	01867074 	movhi	r6,6593
   255b8:	01cfcab4 	movhi	r7,16170
   255bc:	31987544 	addi	r6,r6,25045
   255c0:	39c06804 	addi	r7,r7,416
   255c4:	1009883a 	mov	r4,r2
   255c8:	180b883a 	mov	r5,r3
   255cc:	00289ec0 	call	289ec <__subdf3>
   255d0:	980d883a 	mov	r6,r19
   255d4:	900f883a 	mov	r7,r18
   255d8:	1009883a 	mov	r4,r2
   255dc:	180b883a 	mov	r5,r3
   255e0:	00282d40 	call	282d4 <__muldf3>
   255e4:	01844474 	movhi	r6,4369
   255e8:	01cfe074 	movhi	r7,16257
   255ec:	31be2984 	addi	r6,r6,-1882
   255f0:	39c44444 	addi	r7,r7,4369
   255f4:	1009883a 	mov	r4,r2
   255f8:	180b883a 	mov	r5,r3
   255fc:	0026ee80 	call	26ee8 <__adddf3>
   25600:	1011883a 	mov	r8,r2
   25604:	d8800c17 	ldw	r2,48(sp)
   25608:	1839883a 	mov	fp,r3
   2560c:	10003e26 	beq	r2,zero,25708 <__kernel_sin+0x264>
   25610:	000d883a 	mov	r6,zero
   25614:	01cff834 	movhi	r7,16352
   25618:	b809883a 	mov	r4,r23
   2561c:	b00b883a 	mov	r5,r22
   25620:	da000015 	stw	r8,0(sp)
   25624:	00282d40 	call	282d4 <__muldf3>
   25628:	da000017 	ldw	r8,0(sp)
   2562c:	e00f883a 	mov	r7,fp
   25630:	a809883a 	mov	r4,r21
   25634:	400d883a 	mov	r6,r8
   25638:	a00b883a 	mov	r5,r20
   2563c:	d8c00115 	stw	r3,4(sp)
   25640:	d8800015 	stw	r2,0(sp)
   25644:	00282d40 	call	282d4 <__muldf3>
   25648:	da800017 	ldw	r10,0(sp)
   2564c:	da400117 	ldw	r9,4(sp)
   25650:	100d883a 	mov	r6,r2
   25654:	5009883a 	mov	r4,r10
   25658:	480b883a 	mov	r5,r9
   2565c:	180f883a 	mov	r7,r3
   25660:	00289ec0 	call	289ec <__subdf3>
   25664:	980d883a 	mov	r6,r19
   25668:	900f883a 	mov	r7,r18
   2566c:	1009883a 	mov	r4,r2
   25670:	180b883a 	mov	r5,r3
   25674:	00282d40 	call	282d4 <__muldf3>
   25678:	b80d883a 	mov	r6,r23
   2567c:	b00f883a 	mov	r7,r22
   25680:	1009883a 	mov	r4,r2
   25684:	180b883a 	mov	r5,r3
   25688:	00289ec0 	call	289ec <__subdf3>
   2568c:	01955574 	movhi	r6,21845
   25690:	01cff174 	movhi	r7,16325
   25694:	31955244 	addi	r6,r6,21833
   25698:	39d55544 	addi	r7,r7,21845
   2569c:	a809883a 	mov	r4,r21
   256a0:	a00b883a 	mov	r5,r20
   256a4:	1027883a 	mov	r19,r2
   256a8:	1825883a 	mov	r18,r3
   256ac:	00282d40 	call	282d4 <__muldf3>
   256b0:	100d883a 	mov	r6,r2
   256b4:	180f883a 	mov	r7,r3
   256b8:	9809883a 	mov	r4,r19
   256bc:	900b883a 	mov	r5,r18
   256c0:	0026ee80 	call	26ee8 <__adddf3>
   256c4:	100d883a 	mov	r6,r2
   256c8:	180f883a 	mov	r7,r3
   256cc:	8809883a 	mov	r4,r17
   256d0:	800b883a 	mov	r5,r16
   256d4:	00289ec0 	call	289ec <__subdf3>
   256d8:	dfc00b17 	ldw	ra,44(sp)
   256dc:	df000a17 	ldw	fp,40(sp)
   256e0:	ddc00917 	ldw	r23,36(sp)
   256e4:	dd800817 	ldw	r22,32(sp)
   256e8:	dd400717 	ldw	r21,28(sp)
   256ec:	dd000617 	ldw	r20,24(sp)
   256f0:	dcc00517 	ldw	r19,20(sp)
   256f4:	dc800417 	ldw	r18,16(sp)
   256f8:	dc400317 	ldw	r17,12(sp)
   256fc:	dc000217 	ldw	r16,8(sp)
   25700:	dec00c04 	addi	sp,sp,48
   25704:	f800283a 	ret
   25708:	400d883a 	mov	r6,r8
   2570c:	9809883a 	mov	r4,r19
   25710:	900b883a 	mov	r5,r18
   25714:	180f883a 	mov	r7,r3
   25718:	00282d40 	call	282d4 <__muldf3>
   2571c:	01955574 	movhi	r6,21845
   25720:	01cff174 	movhi	r7,16325
   25724:	31955244 	addi	r6,r6,21833
   25728:	39d55544 	addi	r7,r7,21845
   2572c:	1009883a 	mov	r4,r2
   25730:	180b883a 	mov	r5,r3
   25734:	00289ec0 	call	289ec <__subdf3>
   25738:	a80d883a 	mov	r6,r21
   2573c:	a00f883a 	mov	r7,r20
   25740:	1009883a 	mov	r4,r2
   25744:	180b883a 	mov	r5,r3
   25748:	00282d40 	call	282d4 <__muldf3>
   2574c:	880d883a 	mov	r6,r17
   25750:	800f883a 	mov	r7,r16
   25754:	1009883a 	mov	r4,r2
   25758:	180b883a 	mov	r5,r3
   2575c:	0026ee80 	call	26ee8 <__adddf3>
   25760:	003fdd06 	br	256d8 <__kernel_sin+0x234>
   25764:	8805883a 	mov	r2,r17
   25768:	8007883a 	mov	r3,r16
   2576c:	003fda06 	br	256d8 <__kernel_sin+0x234>

00025770 <fabs>:
   25770:	00e00034 	movhi	r3,32768
   25774:	18ffffc4 	addi	r3,r3,-1
   25778:	2005883a 	mov	r2,r4
   2577c:	28c6703a 	and	r3,r5,r3
   25780:	f800283a 	ret

00025784 <__fpclassifyd>:
   25784:	00a00034 	movhi	r2,32768
   25788:	10bfffc4 	addi	r2,r2,-1
   2578c:	2884703a 	and	r2,r5,r2
   25790:	10000726 	beq	r2,zero,257b0 <__fpclassifyd+0x2c>
   25794:	00fffc34 	movhi	r3,65520
   25798:	019ff834 	movhi	r6,32736
   2579c:	28c7883a 	add	r3,r5,r3
   257a0:	31bfffc4 	addi	r6,r6,-1
   257a4:	30c00536 	bltu	r6,r3,257bc <__fpclassifyd+0x38>
   257a8:	00800104 	movi	r2,4
   257ac:	f800283a 	ret
   257b0:	2000021e 	bne	r4,zero,257bc <__fpclassifyd+0x38>
   257b4:	00800084 	movi	r2,2
   257b8:	f800283a 	ret
   257bc:	00dffc34 	movhi	r3,32752
   257c0:	019ff834 	movhi	r6,32736
   257c4:	28cb883a 	add	r5,r5,r3
   257c8:	31bfffc4 	addi	r6,r6,-1
   257cc:	317ff62e 	bgeu	r6,r5,257a8 <__fpclassifyd+0x24>
   257d0:	01400434 	movhi	r5,16
   257d4:	297fffc4 	addi	r5,r5,-1
   257d8:	28800236 	bltu	r5,r2,257e4 <__fpclassifyd+0x60>
   257dc:	008000c4 	movi	r2,3
   257e0:	f800283a 	ret
   257e4:	10c00226 	beq	r2,r3,257f0 <__fpclassifyd+0x6c>
   257e8:	0005883a 	mov	r2,zero
   257ec:	f800283a 	ret
   257f0:	2005003a 	cmpeq	r2,r4,zero
   257f4:	f800283a 	ret

000257f8 <matherr>:
   257f8:	0005883a 	mov	r2,zero
   257fc:	f800283a 	ret

00025800 <scalbn>:
   25800:	2a1ffc2c 	andhi	r8,r5,32752
   25804:	4011d53a 	srai	r8,r8,20
   25808:	defffe04 	addi	sp,sp,-8
   2580c:	dc000015 	stw	r16,0(sp)
   25810:	dfc00115 	stw	ra,4(sp)
   25814:	280f883a 	mov	r7,r5
   25818:	2015883a 	mov	r10,r4
   2581c:	3021883a 	mov	r16,r6
   25820:	40001e1e 	bne	r8,zero,2589c <scalbn+0x9c>
   25824:	00a00034 	movhi	r2,32768
   25828:	10bfffc4 	addi	r2,r2,-1
   2582c:	2884703a 	and	r2,r5,r2
   25830:	1104b03a 	or	r2,r2,r4
   25834:	10002226 	beq	r2,zero,258c0 <scalbn+0xc0>
   25838:	01d0d434 	movhi	r7,17232
   2583c:	000d883a 	mov	r6,zero
   25840:	00282d40 	call	282d4 <__muldf3>
   25844:	013ffff4 	movhi	r4,65535
   25848:	210f2c04 	addi	r4,r4,15536
   2584c:	1015883a 	mov	r10,r2
   25850:	180f883a 	mov	r7,r3
   25854:	81002a16 	blt	r16,r4,25900 <scalbn+0x100>
   25858:	191ffc2c 	andhi	r4,r3,32752
   2585c:	2009d53a 	srai	r4,r4,20
   25860:	223ff284 	addi	r8,r4,-54
   25864:	8211883a 	add	r8,r16,r8
   25868:	0081ff84 	movi	r2,2046
   2586c:	12002f16 	blt	r2,r8,2592c <scalbn+0x12c>
   25870:	0200190e 	bge	zero,r8,258d8 <scalbn+0xd8>
   25874:	4010953a 	slli	r8,r8,20
   25878:	01600434 	movhi	r5,32784
   2587c:	297fffc4 	addi	r5,r5,-1
   25880:	194e703a 	and	r7,r3,r5
   25884:	5005883a 	mov	r2,r10
   25888:	3a06b03a 	or	r3,r7,r8
   2588c:	dfc00117 	ldw	ra,4(sp)
   25890:	dc000017 	ldw	r16,0(sp)
   25894:	dec00204 	addi	sp,sp,8
   25898:	f800283a 	ret
   2589c:	0081ffc4 	movi	r2,2047
   258a0:	2807883a 	mov	r3,r5
   258a4:	40bfef1e 	bne	r8,r2,25864 <scalbn+0x64>
   258a8:	200d883a 	mov	r6,r4
   258ac:	0026ee80 	call	26ee8 <__adddf3>
   258b0:	dfc00117 	ldw	ra,4(sp)
   258b4:	dc000017 	ldw	r16,0(sp)
   258b8:	dec00204 	addi	sp,sp,8
   258bc:	f800283a 	ret
   258c0:	2005883a 	mov	r2,r4
   258c4:	2807883a 	mov	r3,r5
   258c8:	dfc00117 	ldw	ra,4(sp)
   258cc:	dc000017 	ldw	r16,0(sp)
   258d0:	dec00204 	addi	sp,sp,8
   258d4:	f800283a 	ret
   258d8:	00bff2c4 	movi	r2,-53
   258dc:	4080240e 	bge	r8,r2,25970 <scalbn+0x170>
   258e0:	00b0d414 	movui	r2,50000
   258e4:	14001116 	blt	r2,r16,2592c <scalbn+0x12c>
   258e8:	0130be74 	movhi	r4,49913
   258ec:	01406974 	movhi	r5,421
   258f0:	213cd644 	addi	r4,r4,-3239
   258f4:	295b87c4 	addi	r5,r5,28191
   258f8:	500d883a 	mov	r6,r10
   258fc:	002599c0 	call	2599c <copysign>
   25900:	01b0be74 	movhi	r6,49913
   25904:	01c06974 	movhi	r7,421
   25908:	31bcd644 	addi	r6,r6,-3239
   2590c:	39db87c4 	addi	r7,r7,28191
   25910:	1009883a 	mov	r4,r2
   25914:	180b883a 	mov	r5,r3
   25918:	00282d40 	call	282d4 <__muldf3>
   2591c:	dfc00117 	ldw	ra,4(sp)
   25920:	dc000017 	ldw	r16,0(sp)
   25924:	dec00204 	addi	sp,sp,8
   25928:	f800283a 	ret
   2592c:	01220034 	movhi	r4,34816
   25930:	015f8e34 	movhi	r5,32312
   25934:	500d883a 	mov	r6,r10
   25938:	211d6704 	addi	r4,r4,30108
   2593c:	29790f04 	addi	r5,r5,-7108
   25940:	002599c0 	call	2599c <copysign>
   25944:	01a20034 	movhi	r6,34816
   25948:	01df8e34 	movhi	r7,32312
   2594c:	319d6704 	addi	r6,r6,30108
   25950:	39f90f04 	addi	r7,r7,-7108
   25954:	1009883a 	mov	r4,r2
   25958:	180b883a 	mov	r5,r3
   2595c:	00282d40 	call	282d4 <__muldf3>
   25960:	dfc00117 	ldw	ra,4(sp)
   25964:	dc000017 	ldw	r16,0(sp)
   25968:	dec00204 	addi	sp,sp,8
   2596c:	f800283a 	ret
   25970:	42000d84 	addi	r8,r8,54
   25974:	4012953a 	slli	r9,r8,20
   25978:	01e00434 	movhi	r7,32784
   2597c:	39ffffc4 	addi	r7,r7,-1
   25980:	19ca703a 	and	r5,r3,r7
   25984:	000d883a 	mov	r6,zero
   25988:	01cf2434 	movhi	r7,15504
   2598c:	5009883a 	mov	r4,r10
   25990:	494ab03a 	or	r5,r9,r5
   25994:	00282d40 	call	282d4 <__muldf3>
   25998:	003fbc06 	br	2588c <scalbn+0x8c>

0002599c <copysign>:
   2599c:	2005883a 	mov	r2,r4
   259a0:	01200034 	movhi	r4,32768
   259a4:	213fffc4 	addi	r4,r4,-1
   259a8:	38e0002c 	andhi	r3,r7,32768
   259ac:	290a703a 	and	r5,r5,r4
   259b0:	28c6b03a 	or	r3,r5,r3
   259b4:	f800283a 	ret

000259b8 <__divsi3>:
   259b8:	20001b16 	blt	r4,zero,25a28 <__divsi3+0x70>
   259bc:	000f883a 	mov	r7,zero
   259c0:	28001616 	blt	r5,zero,25a1c <__divsi3+0x64>
   259c4:	200d883a 	mov	r6,r4
   259c8:	29001a2e 	bgeu	r5,r4,25a34 <__divsi3+0x7c>
   259cc:	00800804 	movi	r2,32
   259d0:	00c00044 	movi	r3,1
   259d4:	00000106 	br	259dc <__divsi3+0x24>
   259d8:	10000d26 	beq	r2,zero,25a10 <__divsi3+0x58>
   259dc:	294b883a 	add	r5,r5,r5
   259e0:	10bfffc4 	addi	r2,r2,-1
   259e4:	18c7883a 	add	r3,r3,r3
   259e8:	293ffb36 	bltu	r5,r4,259d8 <__divsi3+0x20>
   259ec:	0005883a 	mov	r2,zero
   259f0:	18000726 	beq	r3,zero,25a10 <__divsi3+0x58>
   259f4:	0005883a 	mov	r2,zero
   259f8:	31400236 	bltu	r6,r5,25a04 <__divsi3+0x4c>
   259fc:	314dc83a 	sub	r6,r6,r5
   25a00:	10c4b03a 	or	r2,r2,r3
   25a04:	1806d07a 	srli	r3,r3,1
   25a08:	280ad07a 	srli	r5,r5,1
   25a0c:	183ffa1e 	bne	r3,zero,259f8 <__divsi3+0x40>
   25a10:	38000126 	beq	r7,zero,25a18 <__divsi3+0x60>
   25a14:	0085c83a 	sub	r2,zero,r2
   25a18:	f800283a 	ret
   25a1c:	014bc83a 	sub	r5,zero,r5
   25a20:	39c0005c 	xori	r7,r7,1
   25a24:	003fe706 	br	259c4 <__divsi3+0xc>
   25a28:	0109c83a 	sub	r4,zero,r4
   25a2c:	01c00044 	movi	r7,1
   25a30:	003fe306 	br	259c0 <__divsi3+0x8>
   25a34:	00c00044 	movi	r3,1
   25a38:	003fee06 	br	259f4 <__divsi3+0x3c>

00025a3c <__modsi3>:
   25a3c:	20001716 	blt	r4,zero,25a9c <__modsi3+0x60>
   25a40:	000f883a 	mov	r7,zero
   25a44:	2005883a 	mov	r2,r4
   25a48:	28001216 	blt	r5,zero,25a94 <__modsi3+0x58>
   25a4c:	2900162e 	bgeu	r5,r4,25aa8 <__modsi3+0x6c>
   25a50:	01800804 	movi	r6,32
   25a54:	00c00044 	movi	r3,1
   25a58:	00000106 	br	25a60 <__modsi3+0x24>
   25a5c:	30000a26 	beq	r6,zero,25a88 <__modsi3+0x4c>
   25a60:	294b883a 	add	r5,r5,r5
   25a64:	31bfffc4 	addi	r6,r6,-1
   25a68:	18c7883a 	add	r3,r3,r3
   25a6c:	293ffb36 	bltu	r5,r4,25a5c <__modsi3+0x20>
   25a70:	18000526 	beq	r3,zero,25a88 <__modsi3+0x4c>
   25a74:	1806d07a 	srli	r3,r3,1
   25a78:	11400136 	bltu	r2,r5,25a80 <__modsi3+0x44>
   25a7c:	1145c83a 	sub	r2,r2,r5
   25a80:	280ad07a 	srli	r5,r5,1
   25a84:	183ffb1e 	bne	r3,zero,25a74 <__modsi3+0x38>
   25a88:	38000126 	beq	r7,zero,25a90 <__modsi3+0x54>
   25a8c:	0085c83a 	sub	r2,zero,r2
   25a90:	f800283a 	ret
   25a94:	014bc83a 	sub	r5,zero,r5
   25a98:	003fec06 	br	25a4c <__modsi3+0x10>
   25a9c:	0109c83a 	sub	r4,zero,r4
   25aa0:	01c00044 	movi	r7,1
   25aa4:	003fe706 	br	25a44 <__modsi3+0x8>
   25aa8:	00c00044 	movi	r3,1
   25aac:	003ff106 	br	25a74 <__modsi3+0x38>

00025ab0 <__udivsi3>:
   25ab0:	200d883a 	mov	r6,r4
   25ab4:	2900152e 	bgeu	r5,r4,25b0c <__udivsi3+0x5c>
   25ab8:	28001416 	blt	r5,zero,25b0c <__udivsi3+0x5c>
   25abc:	00800804 	movi	r2,32
   25ac0:	00c00044 	movi	r3,1
   25ac4:	00000206 	br	25ad0 <__udivsi3+0x20>
   25ac8:	10000e26 	beq	r2,zero,25b04 <__udivsi3+0x54>
   25acc:	28000516 	blt	r5,zero,25ae4 <__udivsi3+0x34>
   25ad0:	294b883a 	add	r5,r5,r5
   25ad4:	10bfffc4 	addi	r2,r2,-1
   25ad8:	18c7883a 	add	r3,r3,r3
   25adc:	293ffa36 	bltu	r5,r4,25ac8 <__udivsi3+0x18>
   25ae0:	18000826 	beq	r3,zero,25b04 <__udivsi3+0x54>
   25ae4:	0005883a 	mov	r2,zero
   25ae8:	31400236 	bltu	r6,r5,25af4 <__udivsi3+0x44>
   25aec:	314dc83a 	sub	r6,r6,r5
   25af0:	10c4b03a 	or	r2,r2,r3
   25af4:	1806d07a 	srli	r3,r3,1
   25af8:	280ad07a 	srli	r5,r5,1
   25afc:	183ffa1e 	bne	r3,zero,25ae8 <__udivsi3+0x38>
   25b00:	f800283a 	ret
   25b04:	0005883a 	mov	r2,zero
   25b08:	f800283a 	ret
   25b0c:	00c00044 	movi	r3,1
   25b10:	003ff406 	br	25ae4 <__udivsi3+0x34>

00025b14 <__umodsi3>:
   25b14:	2005883a 	mov	r2,r4
   25b18:	2900122e 	bgeu	r5,r4,25b64 <__umodsi3+0x50>
   25b1c:	28001116 	blt	r5,zero,25b64 <__umodsi3+0x50>
   25b20:	01800804 	movi	r6,32
   25b24:	00c00044 	movi	r3,1
   25b28:	00000206 	br	25b34 <__umodsi3+0x20>
   25b2c:	30000c26 	beq	r6,zero,25b60 <__umodsi3+0x4c>
   25b30:	28000516 	blt	r5,zero,25b48 <__umodsi3+0x34>
   25b34:	294b883a 	add	r5,r5,r5
   25b38:	31bfffc4 	addi	r6,r6,-1
   25b3c:	18c7883a 	add	r3,r3,r3
   25b40:	293ffa36 	bltu	r5,r4,25b2c <__umodsi3+0x18>
   25b44:	18000626 	beq	r3,zero,25b60 <__umodsi3+0x4c>
   25b48:	1806d07a 	srli	r3,r3,1
   25b4c:	11400136 	bltu	r2,r5,25b54 <__umodsi3+0x40>
   25b50:	1145c83a 	sub	r2,r2,r5
   25b54:	280ad07a 	srli	r5,r5,1
   25b58:	183ffb1e 	bne	r3,zero,25b48 <__umodsi3+0x34>
   25b5c:	f800283a 	ret
   25b60:	f800283a 	ret
   25b64:	00c00044 	movi	r3,1
   25b68:	003ff706 	br	25b48 <__umodsi3+0x34>

00025b6c <__addsf3>:
   25b6c:	defffc04 	addi	sp,sp,-16
   25b70:	2004d7fa 	srli	r2,r4,31
   25b74:	280cd5fa 	srli	r6,r5,23
   25b78:	dc000015 	stw	r16,0(sp)
   25b7c:	00c02034 	movhi	r3,128
   25b80:	2020d5fa 	srli	r16,r4,23
   25b84:	280ed7fa 	srli	r7,r5,31
   25b88:	18ffffc4 	addi	r3,r3,-1
   25b8c:	dc400115 	stw	r17,4(sp)
   25b90:	1908703a 	and	r4,r3,r4
   25b94:	194a703a 	and	r5,r3,r5
   25b98:	dfc00315 	stw	ra,12(sp)
   25b9c:	dc800215 	stw	r18,8(sp)
   25ba0:	14403fcc 	andi	r17,r2,255
   25ba4:	84003fcc 	andi	r16,r16,255
   25ba8:	200890fa 	slli	r4,r4,3
   25bac:	31803fcc 	andi	r6,r6,255
   25bb0:	280a90fa 	slli	r5,r5,3
   25bb4:	89c05026 	beq	r17,r7,25cf8 <__addsf3+0x18c>
   25bb8:	8185c83a 	sub	r2,r16,r6
   25bbc:	00807a0e 	bge	zero,r2,25da8 <__addsf3+0x23c>
   25bc0:	30001e1e 	bne	r6,zero,25c3c <__addsf3+0xd0>
   25bc4:	28006d1e 	bne	r5,zero,25d7c <__addsf3+0x210>
   25bc8:	208001cc 	andi	r2,r4,7
   25bcc:	10000426 	beq	r2,zero,25be0 <__addsf3+0x74>
   25bd0:	208003cc 	andi	r2,r4,15
   25bd4:	00c00104 	movi	r3,4
   25bd8:	10c00126 	beq	r2,r3,25be0 <__addsf3+0x74>
   25bdc:	20c9883a 	add	r4,r4,r3
   25be0:	2081002c 	andhi	r2,r4,1024
   25be4:	10003926 	beq	r2,zero,25ccc <__addsf3+0x160>
   25be8:	84000044 	addi	r16,r16,1
   25bec:	00803fc4 	movi	r2,255
   25bf0:	80807826 	beq	r16,r2,25dd4 <__addsf3+0x268>
   25bf4:	200891ba 	slli	r4,r4,6
   25bf8:	8805883a 	mov	r2,r17
   25bfc:	2008d27a 	srli	r4,r4,9
   25c00:	84003fcc 	andi	r16,r16,255
   25c04:	800695fa 	slli	r3,r16,23
   25c08:	10803fcc 	andi	r2,r2,255
   25c0c:	04002034 	movhi	r16,128
   25c10:	843fffc4 	addi	r16,r16,-1
   25c14:	100497fa 	slli	r2,r2,31
   25c18:	2408703a 	and	r4,r4,r16
   25c1c:	20e0b03a 	or	r16,r4,r3
   25c20:	8084b03a 	or	r2,r16,r2
   25c24:	dfc00317 	ldw	ra,12(sp)
   25c28:	dc800217 	ldw	r18,8(sp)
   25c2c:	dc400117 	ldw	r17,4(sp)
   25c30:	dc000017 	ldw	r16,0(sp)
   25c34:	dec00404 	addi	sp,sp,16
   25c38:	f800283a 	ret
   25c3c:	00c03fc4 	movi	r3,255
   25c40:	80ffe126 	beq	r16,r3,25bc8 <__addsf3+0x5c>
   25c44:	29410034 	orhi	r5,r5,1024
   25c48:	00c006c4 	movi	r3,27
   25c4c:	18807516 	blt	r3,r2,25e24 <__addsf3+0x2b8>
   25c50:	00c00804 	movi	r3,32
   25c54:	1887c83a 	sub	r3,r3,r2
   25c58:	28c6983a 	sll	r3,r5,r3
   25c5c:	288ad83a 	srl	r5,r5,r2
   25c60:	1804c03a 	cmpne	r2,r3,zero
   25c64:	288ab03a 	or	r5,r5,r2
   25c68:	2149c83a 	sub	r4,r4,r5
   25c6c:	2081002c 	andhi	r2,r4,1024
   25c70:	10001426 	beq	r2,zero,25cc4 <__addsf3+0x158>
   25c74:	04810034 	movhi	r18,1024
   25c78:	94bfffc4 	addi	r18,r18,-1
   25c7c:	24a4703a 	and	r18,r4,r18
   25c80:	9009883a 	mov	r4,r18
   25c84:	00297a40 	call	297a4 <__clzsi2>
   25c88:	10bffec4 	addi	r2,r2,-5
   25c8c:	90a4983a 	sll	r18,r18,r2
   25c90:	14005416 	blt	r2,r16,25de4 <__addsf3+0x278>
   25c94:	1405c83a 	sub	r2,r2,r16
   25c98:	11000044 	addi	r4,r2,1
   25c9c:	00800804 	movi	r2,32
   25ca0:	1105c83a 	sub	r2,r2,r4
   25ca4:	9084983a 	sll	r2,r18,r2
   25ca8:	9124d83a 	srl	r18,r18,r4
   25cac:	0021883a 	mov	r16,zero
   25cb0:	1008c03a 	cmpne	r4,r2,zero
   25cb4:	9108b03a 	or	r4,r18,r4
   25cb8:	003fc306 	br	25bc8 <__addsf3+0x5c>
   25cbc:	1000db26 	beq	r2,zero,2602c <__addsf3+0x4c0>
   25cc0:	1009883a 	mov	r4,r2
   25cc4:	208001cc 	andi	r2,r4,7
   25cc8:	103fc11e 	bne	r2,zero,25bd0 <__addsf3+0x64>
   25ccc:	2006d0fa 	srli	r3,r4,3
   25cd0:	01003fc4 	movi	r4,255
   25cd4:	8805883a 	mov	r2,r17
   25cd8:	8100241e 	bne	r16,r4,25d6c <__addsf3+0x200>
   25cdc:	18006e26 	beq	r3,zero,25e98 <__addsf3+0x32c>
   25ce0:	19001034 	orhi	r4,r3,64
   25ce4:	00c02034 	movhi	r3,128
   25ce8:	18ffffc4 	addi	r3,r3,-1
   25cec:	043fffc4 	movi	r16,-1
   25cf0:	20c8703a 	and	r4,r4,r3
   25cf4:	003fc206 	br	25c00 <__addsf3+0x94>
   25cf8:	8187c83a 	sub	r3,r16,r6
   25cfc:	00c03e0e 	bge	zero,r3,25df8 <__addsf3+0x28c>
   25d00:	30002326 	beq	r6,zero,25d90 <__addsf3+0x224>
   25d04:	01803fc4 	movi	r6,255
   25d08:	81bfaf26 	beq	r16,r6,25bc8 <__addsf3+0x5c>
   25d0c:	29410034 	orhi	r5,r5,1024
   25d10:	018006c4 	movi	r6,27
   25d14:	30c07416 	blt	r6,r3,25ee8 <__addsf3+0x37c>
   25d18:	01800804 	movi	r6,32
   25d1c:	30cdc83a 	sub	r6,r6,r3
   25d20:	298c983a 	sll	r6,r5,r6
   25d24:	28cad83a 	srl	r5,r5,r3
   25d28:	3006c03a 	cmpne	r3,r6,zero
   25d2c:	28cab03a 	or	r5,r5,r3
   25d30:	2149883a 	add	r4,r4,r5
   25d34:	20c1002c 	andhi	r3,r4,1024
   25d38:	183fe226 	beq	r3,zero,25cc4 <__addsf3+0x158>
   25d3c:	84000044 	addi	r16,r16,1
   25d40:	00c03fc4 	movi	r3,255
   25d44:	80c05426 	beq	r16,r3,25e98 <__addsf3+0x32c>
   25d48:	00bf0034 	movhi	r2,64512
   25d4c:	10bfffc4 	addi	r2,r2,-1
   25d50:	20c0004c 	andi	r3,r4,1
   25d54:	2088703a 	and	r4,r4,r2
   25d58:	2008d07a 	srli	r4,r4,1
   25d5c:	20c8b03a 	or	r4,r4,r3
   25d60:	003f9906 	br	25bc8 <__addsf3+0x5c>
   25d64:	0007883a 	mov	r3,zero
   25d68:	0005883a 	mov	r2,zero
   25d6c:	01002034 	movhi	r4,128
   25d70:	213fffc4 	addi	r4,r4,-1
   25d74:	1908703a 	and	r4,r3,r4
   25d78:	003fa106 	br	25c00 <__addsf3+0x94>
   25d7c:	10bfffc4 	addi	r2,r2,-1
   25d80:	103fb926 	beq	r2,zero,25c68 <__addsf3+0xfc>
   25d84:	00c03fc4 	movi	r3,255
   25d88:	80ffaf1e 	bne	r16,r3,25c48 <__addsf3+0xdc>
   25d8c:	003f8e06 	br	25bc8 <__addsf3+0x5c>
   25d90:	283f8d26 	beq	r5,zero,25bc8 <__addsf3+0x5c>
   25d94:	18ffffc4 	addi	r3,r3,-1
   25d98:	183fe526 	beq	r3,zero,25d30 <__addsf3+0x1c4>
   25d9c:	01803fc4 	movi	r6,255
   25da0:	81bfdb1e 	bne	r16,r6,25d10 <__addsf3+0x1a4>
   25da4:	003f8806 	br	25bc8 <__addsf3+0x5c>
   25da8:	1000201e 	bne	r2,zero,25e2c <__addsf3+0x2c0>
   25dac:	80800044 	addi	r2,r16,1
   25db0:	10803fcc 	andi	r2,r2,255
   25db4:	01800044 	movi	r6,1
   25db8:	3080450e 	bge	r6,r2,25ed0 <__addsf3+0x364>
   25dbc:	2165c83a 	sub	r18,r4,r5
   25dc0:	90c1002c 	andhi	r3,r18,1024
   25dc4:	18002b26 	beq	r3,zero,25e74 <__addsf3+0x308>
   25dc8:	2925c83a 	sub	r18,r5,r4
   25dcc:	3823883a 	mov	r17,r7
   25dd0:	003fab06 	br	25c80 <__addsf3+0x114>
   25dd4:	8805883a 	mov	r2,r17
   25dd8:	043fffc4 	movi	r16,-1
   25ddc:	0009883a 	mov	r4,zero
   25de0:	003f8706 	br	25c00 <__addsf3+0x94>
   25de4:	013f0034 	movhi	r4,64512
   25de8:	213fffc4 	addi	r4,r4,-1
   25dec:	80a1c83a 	sub	r16,r16,r2
   25df0:	9108703a 	and	r4,r18,r4
   25df4:	003f7406 	br	25bc8 <__addsf3+0x5c>
   25df8:	1800411e 	bne	r3,zero,25f00 <__addsf3+0x394>
   25dfc:	80c00044 	addi	r3,r16,1
   25e00:	19c03fcc 	andi	r7,r3,255
   25e04:	01800044 	movi	r6,1
   25e08:	31c0260e 	bge	r6,r7,25ea4 <__addsf3+0x338>
   25e0c:	01803fc4 	movi	r6,255
   25e10:	19802126 	beq	r3,r6,25e98 <__addsf3+0x32c>
   25e14:	2149883a 	add	r4,r4,r5
   25e18:	2008d07a 	srli	r4,r4,1
   25e1c:	1821883a 	mov	r16,r3
   25e20:	003f6906 	br	25bc8 <__addsf3+0x5c>
   25e24:	01400044 	movi	r5,1
   25e28:	003f8f06 	br	25c68 <__addsf3+0xfc>
   25e2c:	8000151e 	bne	r16,zero,25e84 <__addsf3+0x318>
   25e30:	20002f26 	beq	r4,zero,25ef0 <__addsf3+0x384>
   25e34:	0084303a 	nor	r2,zero,r2
   25e38:	10000a26 	beq	r2,zero,25e64 <__addsf3+0x2f8>
   25e3c:	00c03fc4 	movi	r3,255
   25e40:	30c02b26 	beq	r6,r3,25ef0 <__addsf3+0x384>
   25e44:	00c006c4 	movi	r3,27
   25e48:	18806d16 	blt	r3,r2,26000 <__addsf3+0x494>
   25e4c:	00c00804 	movi	r3,32
   25e50:	1887c83a 	sub	r3,r3,r2
   25e54:	20c6983a 	sll	r3,r4,r3
   25e58:	2084d83a 	srl	r2,r4,r2
   25e5c:	1808c03a 	cmpne	r4,r3,zero
   25e60:	1108b03a 	or	r4,r2,r4
   25e64:	2909c83a 	sub	r4,r5,r4
   25e68:	3021883a 	mov	r16,r6
   25e6c:	3823883a 	mov	r17,r7
   25e70:	003f7e06 	br	25c6c <__addsf3+0x100>
   25e74:	903f821e 	bne	r18,zero,25c80 <__addsf3+0x114>
   25e78:	0005883a 	mov	r2,zero
   25e7c:	0021883a 	mov	r16,zero
   25e80:	003fba06 	br	25d6c <__addsf3+0x200>
   25e84:	00c03fc4 	movi	r3,255
   25e88:	30c01926 	beq	r6,r3,25ef0 <__addsf3+0x384>
   25e8c:	0085c83a 	sub	r2,zero,r2
   25e90:	21010034 	orhi	r4,r4,1024
   25e94:	003feb06 	br	25e44 <__addsf3+0x2d8>
   25e98:	043fffc4 	movi	r16,-1
   25e9c:	0009883a 	mov	r4,zero
   25ea0:	003f5706 	br	25c00 <__addsf3+0x94>
   25ea4:	80004a1e 	bne	r16,zero,25fd0 <__addsf3+0x464>
   25ea8:	20005926 	beq	r4,zero,26010 <__addsf3+0x4a4>
   25eac:	283f4626 	beq	r5,zero,25bc8 <__addsf3+0x5c>
   25eb0:	2149883a 	add	r4,r4,r5
   25eb4:	2081002c 	andhi	r2,r4,1024
   25eb8:	103f8226 	beq	r2,zero,25cc4 <__addsf3+0x158>
   25ebc:	00bf0034 	movhi	r2,64512
   25ec0:	10bfffc4 	addi	r2,r2,-1
   25ec4:	3021883a 	mov	r16,r6
   25ec8:	2088703a 	and	r4,r4,r2
   25ecc:	003f3e06 	br	25bc8 <__addsf3+0x5c>
   25ed0:	8000121e 	bne	r16,zero,25f1c <__addsf3+0x3b0>
   25ed4:	2000261e 	bne	r4,zero,25f70 <__addsf3+0x404>
   25ed8:	283fa226 	beq	r5,zero,25d64 <__addsf3+0x1f8>
   25edc:	2809883a 	mov	r4,r5
   25ee0:	3823883a 	mov	r17,r7
   25ee4:	003f3806 	br	25bc8 <__addsf3+0x5c>
   25ee8:	01400044 	movi	r5,1
   25eec:	003f9006 	br	25d30 <__addsf3+0x1c4>
   25ef0:	2809883a 	mov	r4,r5
   25ef4:	3021883a 	mov	r16,r6
   25ef8:	3823883a 	mov	r17,r7
   25efc:	003f3206 	br	25bc8 <__addsf3+0x5c>
   25f00:	80000c1e 	bne	r16,zero,25f34 <__addsf3+0x3c8>
   25f04:	20002f26 	beq	r4,zero,25fc4 <__addsf3+0x458>
   25f08:	00c6303a 	nor	r3,zero,r3
   25f0c:	18002b1e 	bne	r3,zero,25fbc <__addsf3+0x450>
   25f10:	2149883a 	add	r4,r4,r5
   25f14:	3021883a 	mov	r16,r6
   25f18:	003f8606 	br	25d34 <__addsf3+0x1c8>
   25f1c:	20001b1e 	bne	r4,zero,25f8c <__addsf3+0x420>
   25f20:	28003926 	beq	r5,zero,26008 <__addsf3+0x49c>
   25f24:	2809883a 	mov	r4,r5
   25f28:	3823883a 	mov	r17,r7
   25f2c:	04003fc4 	movi	r16,255
   25f30:	003f2506 	br	25bc8 <__addsf3+0x5c>
   25f34:	01c03fc4 	movi	r7,255
   25f38:	31c02226 	beq	r6,r7,25fc4 <__addsf3+0x458>
   25f3c:	00c7c83a 	sub	r3,zero,r3
   25f40:	21010034 	orhi	r4,r4,1024
   25f44:	01c006c4 	movi	r7,27
   25f48:	38c03616 	blt	r7,r3,26024 <__addsf3+0x4b8>
   25f4c:	01c00804 	movi	r7,32
   25f50:	38cfc83a 	sub	r7,r7,r3
   25f54:	21ce983a 	sll	r7,r4,r7
   25f58:	20c6d83a 	srl	r3,r4,r3
   25f5c:	3808c03a 	cmpne	r4,r7,zero
   25f60:	1906b03a 	or	r3,r3,r4
   25f64:	1949883a 	add	r4,r3,r5
   25f68:	3021883a 	mov	r16,r6
   25f6c:	003f7106 	br	25d34 <__addsf3+0x1c8>
   25f70:	283f1526 	beq	r5,zero,25bc8 <__addsf3+0x5c>
   25f74:	2145c83a 	sub	r2,r4,r5
   25f78:	10c1002c 	andhi	r3,r2,1024
   25f7c:	183f4f26 	beq	r3,zero,25cbc <__addsf3+0x150>
   25f80:	2909c83a 	sub	r4,r5,r4
   25f84:	3823883a 	mov	r17,r7
   25f88:	003f0f06 	br	25bc8 <__addsf3+0x5c>
   25f8c:	28001a26 	beq	r5,zero,25ff8 <__addsf3+0x48c>
   25f90:	2008d0fa 	srli	r4,r4,3
   25f94:	2080102c 	andhi	r2,r4,64
   25f98:	10000526 	beq	r2,zero,25fb0 <__addsf3+0x444>
   25f9c:	280ad0fa 	srli	r5,r5,3
   25fa0:	2880102c 	andhi	r2,r5,64
   25fa4:	1000021e 	bne	r2,zero,25fb0 <__addsf3+0x444>
   25fa8:	2809883a 	mov	r4,r5
   25fac:	3823883a 	mov	r17,r7
   25fb0:	200890fa 	slli	r4,r4,3
   25fb4:	04003fc4 	movi	r16,255
   25fb8:	003f0306 	br	25bc8 <__addsf3+0x5c>
   25fbc:	01c03fc4 	movi	r7,255
   25fc0:	31ffe01e 	bne	r6,r7,25f44 <__addsf3+0x3d8>
   25fc4:	2809883a 	mov	r4,r5
   25fc8:	3021883a 	mov	r16,r6
   25fcc:	003efe06 	br	25bc8 <__addsf3+0x5c>
   25fd0:	20001126 	beq	r4,zero,26018 <__addsf3+0x4ac>
   25fd4:	28000826 	beq	r5,zero,25ff8 <__addsf3+0x48c>
   25fd8:	2008d0fa 	srli	r4,r4,3
   25fdc:	2080102c 	andhi	r2,r4,64
   25fe0:	103ff326 	beq	r2,zero,25fb0 <__addsf3+0x444>
   25fe4:	280ad0fa 	srli	r5,r5,3
   25fe8:	2880102c 	andhi	r2,r5,64
   25fec:	103ff01e 	bne	r2,zero,25fb0 <__addsf3+0x444>
   25ff0:	2809883a 	mov	r4,r5
   25ff4:	003fee06 	br	25fb0 <__addsf3+0x444>
   25ff8:	04003fc4 	movi	r16,255
   25ffc:	003ef206 	br	25bc8 <__addsf3+0x5c>
   26000:	01000044 	movi	r4,1
   26004:	003f9706 	br	25e64 <__addsf3+0x2f8>
   26008:	0005883a 	mov	r2,zero
   2600c:	003f3406 	br	25ce0 <__addsf3+0x174>
   26010:	2809883a 	mov	r4,r5
   26014:	003eec06 	br	25bc8 <__addsf3+0x5c>
   26018:	2809883a 	mov	r4,r5
   2601c:	04003fc4 	movi	r16,255
   26020:	003ee906 	br	25bc8 <__addsf3+0x5c>
   26024:	00c00044 	movi	r3,1
   26028:	003fce06 	br	25f64 <__addsf3+0x3f8>
   2602c:	0005883a 	mov	r2,zero
   26030:	003f4e06 	br	25d6c <__addsf3+0x200>

00026034 <__divsf3>:
   26034:	defff504 	addi	sp,sp,-44
   26038:	200cd5fa 	srli	r6,r4,23
   2603c:	dcc00415 	stw	r19,16(sp)
   26040:	2026d7fa 	srli	r19,r4,31
   26044:	00c02034 	movhi	r3,128
   26048:	dd800715 	stw	r22,28(sp)
   2604c:	dd000515 	stw	r20,20(sp)
   26050:	dc800315 	stw	r18,12(sp)
   26054:	18ffffc4 	addi	r3,r3,-1
   26058:	dfc00a15 	stw	ra,40(sp)
   2605c:	df000915 	stw	fp,36(sp)
   26060:	ddc00815 	stw	r23,32(sp)
   26064:	dd400615 	stw	r21,24(sp)
   26068:	dc400215 	stw	r17,8(sp)
   2606c:	dc000115 	stw	r16,4(sp)
   26070:	35003fcc 	andi	r20,r6,255
   26074:	1924703a 	and	r18,r3,r4
   26078:	9d803fcc 	andi	r22,r19,255
   2607c:	a0005226 	beq	r20,zero,261c8 <__divsf3+0x194>
   26080:	00803fc4 	movi	r2,255
   26084:	a0802e26 	beq	r20,r2,26140 <__divsf3+0x10c>
   26088:	91002034 	orhi	r4,r18,128
   2608c:	202490fa 	slli	r18,r4,3
   26090:	a53fe044 	addi	r20,r20,-127
   26094:	0021883a 	mov	r16,zero
   26098:	002f883a 	mov	r23,zero
   2609c:	280cd5fa 	srli	r6,r5,23
   260a0:	282ad7fa 	srli	r21,r5,31
   260a4:	00c02034 	movhi	r3,128
   260a8:	18ffffc4 	addi	r3,r3,-1
   260ac:	31803fcc 	andi	r6,r6,255
   260b0:	1962703a 	and	r17,r3,r5
   260b4:	af003fcc 	andi	fp,r21,255
   260b8:	30004a26 	beq	r6,zero,261e4 <__divsf3+0x1b0>
   260bc:	00803fc4 	movi	r2,255
   260c0:	30804526 	beq	r6,r2,261d8 <__divsf3+0x1a4>
   260c4:	89402034 	orhi	r5,r17,128
   260c8:	282290fa 	slli	r17,r5,3
   260cc:	31bfe044 	addi	r6,r6,-127
   260d0:	000b883a 	mov	r5,zero
   260d4:	2c20b03a 	or	r16,r5,r16
   260d8:	802090ba 	slli	r16,r16,2
   260dc:	008000b4 	movhi	r2,2
   260e0:	10984004 	addi	r2,r2,24832
   260e4:	80a1883a 	add	r16,r16,r2
   260e8:	81000017 	ldw	r4,0(r16)
   260ec:	9d46f03a 	xor	r3,r19,r21
   260f0:	180f883a 	mov	r7,r3
   260f4:	18803fcc 	andi	r2,r3,255
   260f8:	a18dc83a 	sub	r6,r20,r6
   260fc:	2000683a 	jmp	r4
   26100:	000262e4 	muli	zero,zero,2443
   26104:	00026168 	cmpgeui	zero,zero,2437
   26108:	000262d8 	cmpnei	zero,zero,2443
   2610c:	00026154 	movui	zero,2437
   26110:	000262d8 	cmpnei	zero,zero,2443
   26114:	000262b0 	cmpltui	zero,zero,2442
   26118:	000262d8 	cmpnei	zero,zero,2443
   2611c:	00026154 	movui	zero,2437
   26120:	00026168 	cmpgeui	zero,zero,2437
   26124:	00026168 	cmpgeui	zero,zero,2437
   26128:	000262b0 	cmpltui	zero,zero,2442
   2612c:	00026154 	movui	zero,2437
   26130:	000263c4 	movi	zero,2447
   26134:	000263c4 	movi	zero,2447
   26138:	000263c4 	movi	zero,2447
   2613c:	00026378 	rdprs	zero,zero,2445
   26140:	9000581e 	bne	r18,zero,262a4 <__divsf3+0x270>
   26144:	04000204 	movi	r16,8
   26148:	05c00084 	movi	r23,2
   2614c:	003fd306 	br	2609c <__divsf3+0x68>
   26150:	0023883a 	mov	r17,zero
   26154:	e02d883a 	mov	r22,fp
   26158:	282f883a 	mov	r23,r5
   2615c:	00800084 	movi	r2,2
   26160:	b8808f1e 	bne	r23,r2,263a0 <__divsf3+0x36c>
   26164:	b005883a 	mov	r2,r22
   26168:	11c0004c 	andi	r7,r2,1
   2616c:	013fffc4 	movi	r4,-1
   26170:	000d883a 	mov	r6,zero
   26174:	21003fcc 	andi	r4,r4,255
   26178:	200895fa 	slli	r4,r4,23
   2617c:	38803fcc 	andi	r2,r7,255
   26180:	00c02034 	movhi	r3,128
   26184:	100497fa 	slli	r2,r2,31
   26188:	18ffffc4 	addi	r3,r3,-1
   2618c:	30c6703a 	and	r3,r6,r3
   26190:	1906b03a 	or	r3,r3,r4
   26194:	1884b03a 	or	r2,r3,r2
   26198:	dfc00a17 	ldw	ra,40(sp)
   2619c:	df000917 	ldw	fp,36(sp)
   261a0:	ddc00817 	ldw	r23,32(sp)
   261a4:	dd800717 	ldw	r22,28(sp)
   261a8:	dd400617 	ldw	r21,24(sp)
   261ac:	dd000517 	ldw	r20,20(sp)
   261b0:	dcc00417 	ldw	r19,16(sp)
   261b4:	dc800317 	ldw	r18,12(sp)
   261b8:	dc400217 	ldw	r17,8(sp)
   261bc:	dc000117 	ldw	r16,4(sp)
   261c0:	dec00b04 	addi	sp,sp,44
   261c4:	f800283a 	ret
   261c8:	90002b1e 	bne	r18,zero,26278 <__divsf3+0x244>
   261cc:	04000104 	movi	r16,4
   261d0:	05c00044 	movi	r23,1
   261d4:	003fb106 	br	2609c <__divsf3+0x68>
   261d8:	8800251e 	bne	r17,zero,26270 <__divsf3+0x23c>
   261dc:	01400084 	movi	r5,2
   261e0:	00000206 	br	261ec <__divsf3+0x1b8>
   261e4:	88001a1e 	bne	r17,zero,26250 <__divsf3+0x21c>
   261e8:	01400044 	movi	r5,1
   261ec:	8160b03a 	or	r16,r16,r5
   261f0:	802090ba 	slli	r16,r16,2
   261f4:	00c000b4 	movhi	r3,2
   261f8:	18d88404 	addi	r3,r3,25104
   261fc:	80e1883a 	add	r16,r16,r3
   26200:	80c00017 	ldw	r3,0(r16)
   26204:	9d44f03a 	xor	r2,r19,r21
   26208:	a18dc83a 	sub	r6,r20,r6
   2620c:	1800683a 	jmp	r3
   26210:	00026168 	cmpgeui	zero,zero,2437
   26214:	00026168 	cmpgeui	zero,zero,2437
   26218:	000263b4 	movhi	zero,2446
   2621c:	00026150 	cmplti	zero,zero,2437
   26220:	000263b4 	movhi	zero,2446
   26224:	000262b0 	cmpltui	zero,zero,2442
   26228:	000263b4 	movhi	zero,2446
   2622c:	00026150 	cmplti	zero,zero,2437
   26230:	00026168 	cmpgeui	zero,zero,2437
   26234:	00026168 	cmpgeui	zero,zero,2437
   26238:	000262b0 	cmpltui	zero,zero,2442
   2623c:	00026150 	cmplti	zero,zero,2437
   26240:	000263c4 	movi	zero,2447
   26244:	000263c4 	movi	zero,2447
   26248:	000263c4 	movi	zero,2447
   2624c:	000263dc 	xori	zero,zero,2447
   26250:	8809883a 	mov	r4,r17
   26254:	00297a40 	call	297a4 <__clzsi2>
   26258:	10fffec4 	addi	r3,r2,-5
   2625c:	10801d84 	addi	r2,r2,118
   26260:	88e2983a 	sll	r17,r17,r3
   26264:	008dc83a 	sub	r6,zero,r2
   26268:	000b883a 	mov	r5,zero
   2626c:	003f9906 	br	260d4 <__divsf3+0xa0>
   26270:	014000c4 	movi	r5,3
   26274:	003f9706 	br	260d4 <__divsf3+0xa0>
   26278:	9009883a 	mov	r4,r18
   2627c:	d9400015 	stw	r5,0(sp)
   26280:	00297a40 	call	297a4 <__clzsi2>
   26284:	10fffec4 	addi	r3,r2,-5
   26288:	11801d84 	addi	r6,r2,118
   2628c:	90e4983a 	sll	r18,r18,r3
   26290:	01a9c83a 	sub	r20,zero,r6
   26294:	0021883a 	mov	r16,zero
   26298:	002f883a 	mov	r23,zero
   2629c:	d9400017 	ldw	r5,0(sp)
   262a0:	003f7e06 	br	2609c <__divsf3+0x68>
   262a4:	04000304 	movi	r16,12
   262a8:	05c000c4 	movi	r23,3
   262ac:	003f7b06 	br	2609c <__divsf3+0x68>
   262b0:	01802034 	movhi	r6,128
   262b4:	000f883a 	mov	r7,zero
   262b8:	31bfffc4 	addi	r6,r6,-1
   262bc:	013fffc4 	movi	r4,-1
   262c0:	003fac06 	br	26174 <__divsf3+0x140>
   262c4:	01400044 	movi	r5,1
   262c8:	2909c83a 	sub	r4,r5,r4
   262cc:	00c006c4 	movi	r3,27
   262d0:	19004b0e 	bge	r3,r4,26400 <__divsf3+0x3cc>
   262d4:	114e703a 	and	r7,r2,r5
   262d8:	0009883a 	mov	r4,zero
   262dc:	000d883a 	mov	r6,zero
   262e0:	003fa406 	br	26174 <__divsf3+0x140>
   262e4:	9006917a 	slli	r3,r18,5
   262e8:	8822917a 	slli	r17,r17,5
   262ec:	1c40372e 	bgeu	r3,r17,263cc <__divsf3+0x398>
   262f0:	31bfffc4 	addi	r6,r6,-1
   262f4:	010006c4 	movi	r4,27
   262f8:	000b883a 	mov	r5,zero
   262fc:	180f883a 	mov	r7,r3
   26300:	294b883a 	add	r5,r5,r5
   26304:	18c7883a 	add	r3,r3,r3
   26308:	38000116 	blt	r7,zero,26310 <__divsf3+0x2dc>
   2630c:	1c400236 	bltu	r3,r17,26318 <__divsf3+0x2e4>
   26310:	1c47c83a 	sub	r3,r3,r17
   26314:	29400054 	ori	r5,r5,1
   26318:	213fffc4 	addi	r4,r4,-1
   2631c:	203ff71e 	bne	r4,zero,262fc <__divsf3+0x2c8>
   26320:	1806c03a 	cmpne	r3,r3,zero
   26324:	1962b03a 	or	r17,r3,r5
   26328:	31001fc4 	addi	r4,r6,127
   2632c:	013fe50e 	bge	zero,r4,262c4 <__divsf3+0x290>
   26330:	88c001cc 	andi	r3,r17,7
   26334:	18000426 	beq	r3,zero,26348 <__divsf3+0x314>
   26338:	88c003cc 	andi	r3,r17,15
   2633c:	01400104 	movi	r5,4
   26340:	19400126 	beq	r3,r5,26348 <__divsf3+0x314>
   26344:	8963883a 	add	r17,r17,r5
   26348:	88c2002c 	andhi	r3,r17,2048
   2634c:	18000426 	beq	r3,zero,26360 <__divsf3+0x32c>
   26350:	00fe0034 	movhi	r3,63488
   26354:	18ffffc4 	addi	r3,r3,-1
   26358:	31002004 	addi	r4,r6,128
   2635c:	88e2703a 	and	r17,r17,r3
   26360:	00c03f84 	movi	r3,254
   26364:	193f8016 	blt	r3,r4,26168 <__divsf3+0x134>
   26368:	880c91ba 	slli	r6,r17,6
   2636c:	11c0004c 	andi	r7,r2,1
   26370:	300cd27a 	srli	r6,r6,9
   26374:	003f7f06 	br	26174 <__divsf3+0x140>
   26378:	9080102c 	andhi	r2,r18,64
   2637c:	10000226 	beq	r2,zero,26388 <__divsf3+0x354>
   26380:	8880102c 	andhi	r2,r17,64
   26384:	10001826 	beq	r2,zero,263e8 <__divsf3+0x3b4>
   26388:	00802034 	movhi	r2,128
   2638c:	91801034 	orhi	r6,r18,64
   26390:	10bfffc4 	addi	r2,r2,-1
   26394:	980f883a 	mov	r7,r19
   26398:	308c703a 	and	r6,r6,r2
   2639c:	003fc706 	br	262bc <__divsf3+0x288>
   263a0:	008000c4 	movi	r2,3
   263a4:	b8802d26 	beq	r23,r2,2645c <__divsf3+0x428>
   263a8:	00c00044 	movi	r3,1
   263ac:	b005883a 	mov	r2,r22
   263b0:	b8ffdd1e 	bne	r23,r3,26328 <__divsf3+0x2f4>
   263b4:	11c0004c 	andi	r7,r2,1
   263b8:	0009883a 	mov	r4,zero
   263bc:	000d883a 	mov	r6,zero
   263c0:	003f6c06 	br	26174 <__divsf3+0x140>
   263c4:	9023883a 	mov	r17,r18
   263c8:	003f6406 	br	2615c <__divsf3+0x128>
   263cc:	1c47c83a 	sub	r3,r3,r17
   263d0:	01000684 	movi	r4,26
   263d4:	01400044 	movi	r5,1
   263d8:	003fc806 	br	262fc <__divsf3+0x2c8>
   263dc:	9080102c 	andhi	r2,r18,64
   263e0:	103fe926 	beq	r2,zero,26388 <__divsf3+0x354>
   263e4:	0023883a 	mov	r17,zero
   263e8:	00802034 	movhi	r2,128
   263ec:	89801034 	orhi	r6,r17,64
   263f0:	10bfffc4 	addi	r2,r2,-1
   263f4:	a80f883a 	mov	r7,r21
   263f8:	308c703a 	and	r6,r6,r2
   263fc:	003faf06 	br	262bc <__divsf3+0x288>
   26400:	01c00804 	movi	r7,32
   26404:	390fc83a 	sub	r7,r7,r4
   26408:	89ce983a 	sll	r7,r17,r7
   2640c:	890ad83a 	srl	r5,r17,r4
   26410:	380ec03a 	cmpne	r7,r7,zero
   26414:	29cab03a 	or	r5,r5,r7
   26418:	28c001cc 	andi	r3,r5,7
   2641c:	18000426 	beq	r3,zero,26430 <__divsf3+0x3fc>
   26420:	28c003cc 	andi	r3,r5,15
   26424:	01000104 	movi	r4,4
   26428:	19000126 	beq	r3,r4,26430 <__divsf3+0x3fc>
   2642c:	290b883a 	add	r5,r5,r4
   26430:	28c1002c 	andhi	r3,r5,1024
   26434:	18000426 	beq	r3,zero,26448 <__divsf3+0x414>
   26438:	11c0004c 	andi	r7,r2,1
   2643c:	01000044 	movi	r4,1
   26440:	000d883a 	mov	r6,zero
   26444:	003f4b06 	br	26174 <__divsf3+0x140>
   26448:	280a91ba 	slli	r5,r5,6
   2644c:	11c0004c 	andi	r7,r2,1
   26450:	0009883a 	mov	r4,zero
   26454:	280cd27a 	srli	r6,r5,9
   26458:	003f4606 	br	26174 <__divsf3+0x140>
   2645c:	00802034 	movhi	r2,128
   26460:	89801034 	orhi	r6,r17,64
   26464:	10bfffc4 	addi	r2,r2,-1
   26468:	b00f883a 	mov	r7,r22
   2646c:	308c703a 	and	r6,r6,r2
   26470:	003f9206 	br	262bc <__divsf3+0x288>

00026474 <__mulsf3>:
   26474:	defff504 	addi	sp,sp,-44
   26478:	dc000115 	stw	r16,4(sp)
   2647c:	2020d5fa 	srli	r16,r4,23
   26480:	dd400615 	stw	r21,24(sp)
   26484:	202ad7fa 	srli	r21,r4,31
   26488:	dc800315 	stw	r18,12(sp)
   2648c:	04802034 	movhi	r18,128
   26490:	df000915 	stw	fp,36(sp)
   26494:	dd000515 	stw	r20,20(sp)
   26498:	94bfffc4 	addi	r18,r18,-1
   2649c:	dfc00a15 	stw	ra,40(sp)
   264a0:	ddc00815 	stw	r23,32(sp)
   264a4:	dd800715 	stw	r22,28(sp)
   264a8:	dcc00415 	stw	r19,16(sp)
   264ac:	dc400215 	stw	r17,8(sp)
   264b0:	84003fcc 	andi	r16,r16,255
   264b4:	9124703a 	and	r18,r18,r4
   264b8:	a829883a 	mov	r20,r21
   264bc:	af003fcc 	andi	fp,r21,255
   264c0:	80005426 	beq	r16,zero,26614 <__mulsf3+0x1a0>
   264c4:	00803fc4 	movi	r2,255
   264c8:	80802f26 	beq	r16,r2,26588 <__mulsf3+0x114>
   264cc:	91002034 	orhi	r4,r18,128
   264d0:	202490fa 	slli	r18,r4,3
   264d4:	843fe044 	addi	r16,r16,-127
   264d8:	0023883a 	mov	r17,zero
   264dc:	002f883a 	mov	r23,zero
   264e0:	2804d5fa 	srli	r2,r5,23
   264e4:	282cd7fa 	srli	r22,r5,31
   264e8:	01002034 	movhi	r4,128
   264ec:	213fffc4 	addi	r4,r4,-1
   264f0:	10803fcc 	andi	r2,r2,255
   264f4:	2166703a 	and	r19,r4,r5
   264f8:	b1803fcc 	andi	r6,r22,255
   264fc:	10004c26 	beq	r2,zero,26630 <__mulsf3+0x1bc>
   26500:	00c03fc4 	movi	r3,255
   26504:	10c04726 	beq	r2,r3,26624 <__mulsf3+0x1b0>
   26508:	99002034 	orhi	r4,r19,128
   2650c:	202690fa 	slli	r19,r4,3
   26510:	10bfe044 	addi	r2,r2,-127
   26514:	0007883a 	mov	r3,zero
   26518:	80a1883a 	add	r16,r16,r2
   2651c:	010003c4 	movi	r4,15
   26520:	1c44b03a 	or	r2,r3,r17
   26524:	b56af03a 	xor	r21,r22,r21
   26528:	81c00044 	addi	r7,r16,1
   2652c:	20806b36 	bltu	r4,r2,266dc <__mulsf3+0x268>
   26530:	100490ba 	slli	r2,r2,2
   26534:	010000b4 	movhi	r4,2
   26538:	21195204 	addi	r4,r4,25928
   2653c:	1105883a 	add	r2,r2,r4
   26540:	10800017 	ldw	r2,0(r2)
   26544:	1000683a 	jmp	r2
   26548:	000266dc 	xori	zero,zero,2459
   2654c:	0002659c 	xori	zero,zero,2454
   26550:	0002659c 	xori	zero,zero,2454
   26554:	00026598 	cmpnei	zero,zero,2454
   26558:	000266c0 	call	266c <__alt_mem_onchip_memory_nios2_FFT-0x1d994>
   2655c:	000266c0 	call	266c <__alt_mem_onchip_memory_nios2_FFT-0x1d994>
   26560:	000266ac 	andhi	zero,zero,2458
   26564:	00026598 	cmpnei	zero,zero,2454
   26568:	000266c0 	call	266c <__alt_mem_onchip_memory_nios2_FFT-0x1d994>
   2656c:	000266ac 	andhi	zero,zero,2458
   26570:	000266c0 	call	266c <__alt_mem_onchip_memory_nios2_FFT-0x1d994>
   26574:	00026598 	cmpnei	zero,zero,2454
   26578:	000266cc 	andi	zero,zero,2459
   2657c:	000266cc 	andi	zero,zero,2459
   26580:	000266cc 	andi	zero,zero,2459
   26584:	000267a8 	cmpgeui	zero,zero,2462
   26588:	90003b1e 	bne	r18,zero,26678 <__mulsf3+0x204>
   2658c:	04400204 	movi	r17,8
   26590:	05c00084 	movi	r23,2
   26594:	003fd206 	br	264e0 <__mulsf3+0x6c>
   26598:	302b883a 	mov	r21,r6
   2659c:	00800084 	movi	r2,2
   265a0:	18802626 	beq	r3,r2,2663c <__mulsf3+0x1c8>
   265a4:	008000c4 	movi	r2,3
   265a8:	1880ab26 	beq	r3,r2,26858 <__mulsf3+0x3e4>
   265ac:	00800044 	movi	r2,1
   265b0:	1880a21e 	bne	r3,r2,2683c <__mulsf3+0x3c8>
   265b4:	a829883a 	mov	r20,r21
   265b8:	0007883a 	mov	r3,zero
   265bc:	0009883a 	mov	r4,zero
   265c0:	18803fcc 	andi	r2,r3,255
   265c4:	100695fa 	slli	r3,r2,23
   265c8:	a0803fcc 	andi	r2,r20,255
   265cc:	100a97fa 	slli	r5,r2,31
   265d0:	00802034 	movhi	r2,128
   265d4:	10bfffc4 	addi	r2,r2,-1
   265d8:	2084703a 	and	r2,r4,r2
   265dc:	10c4b03a 	or	r2,r2,r3
   265e0:	1144b03a 	or	r2,r2,r5
   265e4:	dfc00a17 	ldw	ra,40(sp)
   265e8:	df000917 	ldw	fp,36(sp)
   265ec:	ddc00817 	ldw	r23,32(sp)
   265f0:	dd800717 	ldw	r22,28(sp)
   265f4:	dd400617 	ldw	r21,24(sp)
   265f8:	dd000517 	ldw	r20,20(sp)
   265fc:	dcc00417 	ldw	r19,16(sp)
   26600:	dc800317 	ldw	r18,12(sp)
   26604:	dc400217 	ldw	r17,8(sp)
   26608:	dc000117 	ldw	r16,4(sp)
   2660c:	dec00b04 	addi	sp,sp,44
   26610:	f800283a 	ret
   26614:	90000d1e 	bne	r18,zero,2664c <__mulsf3+0x1d8>
   26618:	04400104 	movi	r17,4
   2661c:	05c00044 	movi	r23,1
   26620:	003faf06 	br	264e0 <__mulsf3+0x6c>
   26624:	9806c03a 	cmpne	r3,r19,zero
   26628:	18c00084 	addi	r3,r3,2
   2662c:	003fba06 	br	26518 <__mulsf3+0xa4>
   26630:	9800141e 	bne	r19,zero,26684 <__mulsf3+0x210>
   26634:	00c00044 	movi	r3,1
   26638:	003fb706 	br	26518 <__mulsf3+0xa4>
   2663c:	a829883a 	mov	r20,r21
   26640:	00ffffc4 	movi	r3,-1
   26644:	0009883a 	mov	r4,zero
   26648:	003fdd06 	br	265c0 <__mulsf3+0x14c>
   2664c:	9009883a 	mov	r4,r18
   26650:	d9400015 	stw	r5,0(sp)
   26654:	00297a40 	call	297a4 <__clzsi2>
   26658:	10fffec4 	addi	r3,r2,-5
   2665c:	10801d84 	addi	r2,r2,118
   26660:	90e4983a 	sll	r18,r18,r3
   26664:	00a1c83a 	sub	r16,zero,r2
   26668:	0023883a 	mov	r17,zero
   2666c:	002f883a 	mov	r23,zero
   26670:	d9400017 	ldw	r5,0(sp)
   26674:	003f9a06 	br	264e0 <__mulsf3+0x6c>
   26678:	04400304 	movi	r17,12
   2667c:	05c000c4 	movi	r23,3
   26680:	003f9706 	br	264e0 <__mulsf3+0x6c>
   26684:	9809883a 	mov	r4,r19
   26688:	d9800015 	stw	r6,0(sp)
   2668c:	00297a40 	call	297a4 <__clzsi2>
   26690:	10fffec4 	addi	r3,r2,-5
   26694:	10801d84 	addi	r2,r2,118
   26698:	98e6983a 	sll	r19,r19,r3
   2669c:	0085c83a 	sub	r2,zero,r2
   266a0:	0007883a 	mov	r3,zero
   266a4:	d9800017 	ldw	r6,0(sp)
   266a8:	003f9b06 	br	26518 <__mulsf3+0xa4>
   266ac:	01002034 	movhi	r4,128
   266b0:	0029883a 	mov	r20,zero
   266b4:	213fffc4 	addi	r4,r4,-1
   266b8:	00ffffc4 	movi	r3,-1
   266bc:	003fc006 	br	265c0 <__mulsf3+0x14c>
   266c0:	9027883a 	mov	r19,r18
   266c4:	b807883a 	mov	r3,r23
   266c8:	003fb406 	br	2659c <__mulsf3+0x128>
   266cc:	9027883a 	mov	r19,r18
   266d0:	e02b883a 	mov	r21,fp
   266d4:	b807883a 	mov	r3,r23
   266d8:	003fb006 	br	2659c <__mulsf3+0x128>
   266dc:	9004d43a 	srli	r2,r18,16
   266e0:	9810d43a 	srli	r8,r19,16
   266e4:	94bfffcc 	andi	r18,r18,65535
   266e8:	993fffcc 	andi	r4,r19,65535
   266ec:	910d383a 	mul	r6,r18,r4
   266f0:	20a7383a 	mul	r19,r4,r2
   266f4:	9225383a 	mul	r18,r18,r8
   266f8:	3006d43a 	srli	r3,r6,16
   266fc:	1211383a 	mul	r8,r2,r8
   26700:	94e5883a 	add	r18,r18,r19
   26704:	1c87883a 	add	r3,r3,r18
   26708:	1cc0022e 	bgeu	r3,r19,26714 <__mulsf3+0x2a0>
   2670c:	00800074 	movhi	r2,1
   26710:	4091883a 	add	r8,r8,r2
   26714:	1804943a 	slli	r2,r3,16
   26718:	31bfffcc 	andi	r6,r6,65535
   2671c:	1806d43a 	srli	r3,r3,16
   26720:	1185883a 	add	r2,r2,r6
   26724:	102691ba 	slli	r19,r2,6
   26728:	1a07883a 	add	r3,r3,r8
   2672c:	1004d6ba 	srli	r2,r2,26
   26730:	180891ba 	slli	r4,r3,6
   26734:	9826c03a 	cmpne	r19,r19,zero
   26738:	9884b03a 	or	r2,r19,r2
   2673c:	1126b03a 	or	r19,r2,r4
   26740:	9882002c 	andhi	r2,r19,2048
   26744:	10000426 	beq	r2,zero,26758 <__mulsf3+0x2e4>
   26748:	9804d07a 	srli	r2,r19,1
   2674c:	9900004c 	andi	r4,r19,1
   26750:	3821883a 	mov	r16,r7
   26754:	1126b03a 	or	r19,r2,r4
   26758:	80c01fc4 	addi	r3,r16,127
   2675c:	00c0210e 	bge	zero,r3,267e4 <__mulsf3+0x370>
   26760:	988001cc 	andi	r2,r19,7
   26764:	10000426 	beq	r2,zero,26778 <__mulsf3+0x304>
   26768:	988003cc 	andi	r2,r19,15
   2676c:	01000104 	movi	r4,4
   26770:	11000126 	beq	r2,r4,26778 <__mulsf3+0x304>
   26774:	9927883a 	add	r19,r19,r4
   26778:	9882002c 	andhi	r2,r19,2048
   2677c:	10000426 	beq	r2,zero,26790 <__mulsf3+0x31c>
   26780:	00be0034 	movhi	r2,63488
   26784:	10bfffc4 	addi	r2,r2,-1
   26788:	80c02004 	addi	r3,r16,128
   2678c:	98a6703a 	and	r19,r19,r2
   26790:	00803f84 	movi	r2,254
   26794:	10ffa916 	blt	r2,r3,2663c <__mulsf3+0x1c8>
   26798:	980891ba 	slli	r4,r19,6
   2679c:	a829883a 	mov	r20,r21
   267a0:	2008d27a 	srli	r4,r4,9
   267a4:	003f8606 	br	265c0 <__mulsf3+0x14c>
   267a8:	9080102c 	andhi	r2,r18,64
   267ac:	10000826 	beq	r2,zero,267d0 <__mulsf3+0x35c>
   267b0:	9880102c 	andhi	r2,r19,64
   267b4:	1000061e 	bne	r2,zero,267d0 <__mulsf3+0x35c>
   267b8:	00802034 	movhi	r2,128
   267bc:	99001034 	orhi	r4,r19,64
   267c0:	10bfffc4 	addi	r2,r2,-1
   267c4:	b029883a 	mov	r20,r22
   267c8:	2088703a 	and	r4,r4,r2
   267cc:	003fba06 	br	266b8 <__mulsf3+0x244>
   267d0:	00802034 	movhi	r2,128
   267d4:	91001034 	orhi	r4,r18,64
   267d8:	10bfffc4 	addi	r2,r2,-1
   267dc:	2088703a 	and	r4,r4,r2
   267e0:	003fb506 	br	266b8 <__mulsf3+0x244>
   267e4:	00800044 	movi	r2,1
   267e8:	10c7c83a 	sub	r3,r2,r3
   267ec:	008006c4 	movi	r2,27
   267f0:	10ff7016 	blt	r2,r3,265b4 <__mulsf3+0x140>
   267f4:	00800804 	movi	r2,32
   267f8:	10c5c83a 	sub	r2,r2,r3
   267fc:	9884983a 	sll	r2,r19,r2
   26800:	98c6d83a 	srl	r3,r19,r3
   26804:	1004c03a 	cmpne	r2,r2,zero
   26808:	1884b03a 	or	r2,r3,r2
   2680c:	10c001cc 	andi	r3,r2,7
   26810:	18000426 	beq	r3,zero,26824 <__mulsf3+0x3b0>
   26814:	10c003cc 	andi	r3,r2,15
   26818:	01000104 	movi	r4,4
   2681c:	19000126 	beq	r3,r4,26824 <__mulsf3+0x3b0>
   26820:	1105883a 	add	r2,r2,r4
   26824:	10c1002c 	andhi	r3,r2,1024
   26828:	18000626 	beq	r3,zero,26844 <__mulsf3+0x3d0>
   2682c:	a829883a 	mov	r20,r21
   26830:	00c00044 	movi	r3,1
   26834:	0009883a 	mov	r4,zero
   26838:	003f6106 	br	265c0 <__mulsf3+0x14c>
   2683c:	3821883a 	mov	r16,r7
   26840:	003fc506 	br	26758 <__mulsf3+0x2e4>
   26844:	100491ba 	slli	r2,r2,6
   26848:	a829883a 	mov	r20,r21
   2684c:	0007883a 	mov	r3,zero
   26850:	1008d27a 	srli	r4,r2,9
   26854:	003f5a06 	br	265c0 <__mulsf3+0x14c>
   26858:	00802034 	movhi	r2,128
   2685c:	99001034 	orhi	r4,r19,64
   26860:	10bfffc4 	addi	r2,r2,-1
   26864:	a829883a 	mov	r20,r21
   26868:	2088703a 	and	r4,r4,r2
   2686c:	003f9206 	br	266b8 <__mulsf3+0x244>

00026870 <__subsf3>:
   26870:	defffc04 	addi	sp,sp,-16
   26874:	280cd5fa 	srli	r6,r5,23
   26878:	dc000015 	stw	r16,0(sp)
   2687c:	01c02034 	movhi	r7,128
   26880:	2020d5fa 	srli	r16,r4,23
   26884:	39ffffc4 	addi	r7,r7,-1
   26888:	3906703a 	and	r3,r7,r4
   2688c:	dc400115 	stw	r17,4(sp)
   26890:	394e703a 	and	r7,r7,r5
   26894:	2022d7fa 	srli	r17,r4,31
   26898:	dfc00315 	stw	ra,12(sp)
   2689c:	dc800215 	stw	r18,8(sp)
   268a0:	31803fcc 	andi	r6,r6,255
   268a4:	01003fc4 	movi	r4,255
   268a8:	84003fcc 	andi	r16,r16,255
   268ac:	180690fa 	slli	r3,r3,3
   268b0:	2804d7fa 	srli	r2,r5,31
   268b4:	380e90fa 	slli	r7,r7,3
   268b8:	31006d26 	beq	r6,r4,26a70 <__subsf3+0x200>
   268bc:	1080005c 	xori	r2,r2,1
   268c0:	8189c83a 	sub	r4,r16,r6
   268c4:	14404f26 	beq	r2,r17,26a04 <__subsf3+0x194>
   268c8:	0100770e 	bge	zero,r4,26aa8 <__subsf3+0x238>
   268cc:	30001e1e 	bne	r6,zero,26948 <__subsf3+0xd8>
   268d0:	38006a1e 	bne	r7,zero,26a7c <__subsf3+0x20c>
   268d4:	188001cc 	andi	r2,r3,7
   268d8:	10000426 	beq	r2,zero,268ec <__subsf3+0x7c>
   268dc:	188003cc 	andi	r2,r3,15
   268e0:	01000104 	movi	r4,4
   268e4:	11000126 	beq	r2,r4,268ec <__subsf3+0x7c>
   268e8:	1907883a 	add	r3,r3,r4
   268ec:	1881002c 	andhi	r2,r3,1024
   268f0:	10003926 	beq	r2,zero,269d8 <__subsf3+0x168>
   268f4:	84000044 	addi	r16,r16,1
   268f8:	00803fc4 	movi	r2,255
   268fc:	80807526 	beq	r16,r2,26ad4 <__subsf3+0x264>
   26900:	180691ba 	slli	r3,r3,6
   26904:	8880004c 	andi	r2,r17,1
   26908:	180ad27a 	srli	r5,r3,9
   2690c:	84003fcc 	andi	r16,r16,255
   26910:	800695fa 	slli	r3,r16,23
   26914:	10803fcc 	andi	r2,r2,255
   26918:	01002034 	movhi	r4,128
   2691c:	213fffc4 	addi	r4,r4,-1
   26920:	100497fa 	slli	r2,r2,31
   26924:	2920703a 	and	r16,r5,r4
   26928:	80e0b03a 	or	r16,r16,r3
   2692c:	8084b03a 	or	r2,r16,r2
   26930:	dfc00317 	ldw	ra,12(sp)
   26934:	dc800217 	ldw	r18,8(sp)
   26938:	dc400117 	ldw	r17,4(sp)
   2693c:	dc000017 	ldw	r16,0(sp)
   26940:	dec00404 	addi	sp,sp,16
   26944:	f800283a 	ret
   26948:	00803fc4 	movi	r2,255
   2694c:	80bfe126 	beq	r16,r2,268d4 <__subsf3+0x64>
   26950:	39c10034 	orhi	r7,r7,1024
   26954:	008006c4 	movi	r2,27
   26958:	11007416 	blt	r2,r4,26b2c <__subsf3+0x2bc>
   2695c:	00800804 	movi	r2,32
   26960:	1105c83a 	sub	r2,r2,r4
   26964:	3884983a 	sll	r2,r7,r2
   26968:	390ed83a 	srl	r7,r7,r4
   2696c:	1008c03a 	cmpne	r4,r2,zero
   26970:	390eb03a 	or	r7,r7,r4
   26974:	19c7c83a 	sub	r3,r3,r7
   26978:	1881002c 	andhi	r2,r3,1024
   2697c:	10001426 	beq	r2,zero,269d0 <__subsf3+0x160>
   26980:	04810034 	movhi	r18,1024
   26984:	94bfffc4 	addi	r18,r18,-1
   26988:	1ca4703a 	and	r18,r3,r18
   2698c:	9009883a 	mov	r4,r18
   26990:	00297a40 	call	297a4 <__clzsi2>
   26994:	10bffec4 	addi	r2,r2,-5
   26998:	90a4983a 	sll	r18,r18,r2
   2699c:	14005116 	blt	r2,r16,26ae4 <__subsf3+0x274>
   269a0:	1405c83a 	sub	r2,r2,r16
   269a4:	10c00044 	addi	r3,r2,1
   269a8:	00800804 	movi	r2,32
   269ac:	10c5c83a 	sub	r2,r2,r3
   269b0:	9084983a 	sll	r2,r18,r2
   269b4:	90e4d83a 	srl	r18,r18,r3
   269b8:	0021883a 	mov	r16,zero
   269bc:	1006c03a 	cmpne	r3,r2,zero
   269c0:	90c6b03a 	or	r3,r18,r3
   269c4:	003fc306 	br	268d4 <__subsf3+0x64>
   269c8:	2000e026 	beq	r4,zero,26d4c <__subsf3+0x4dc>
   269cc:	2007883a 	mov	r3,r4
   269d0:	188001cc 	andi	r2,r3,7
   269d4:	103fc11e 	bne	r2,zero,268dc <__subsf3+0x6c>
   269d8:	180ad0fa 	srli	r5,r3,3
   269dc:	00c03fc4 	movi	r3,255
   269e0:	8880004c 	andi	r2,r17,1
   269e4:	80c0031e 	bne	r16,r3,269f4 <__subsf3+0x184>
   269e8:	28006d26 	beq	r5,zero,26ba0 <__subsf3+0x330>
   269ec:	29401034 	orhi	r5,r5,64
   269f0:	043fffc4 	movi	r16,-1
   269f4:	00c02034 	movhi	r3,128
   269f8:	18ffffc4 	addi	r3,r3,-1
   269fc:	28ca703a 	and	r5,r5,r3
   26a00:	003fc206 	br	2690c <__subsf3+0x9c>
   26a04:	01003c0e 	bge	zero,r4,26af8 <__subsf3+0x288>
   26a08:	30002126 	beq	r6,zero,26a90 <__subsf3+0x220>
   26a0c:	01403fc4 	movi	r5,255
   26a10:	817fb026 	beq	r16,r5,268d4 <__subsf3+0x64>
   26a14:	39c10034 	orhi	r7,r7,1024
   26a18:	014006c4 	movi	r5,27
   26a1c:	29007416 	blt	r5,r4,26bf0 <__subsf3+0x380>
   26a20:	01400804 	movi	r5,32
   26a24:	290bc83a 	sub	r5,r5,r4
   26a28:	394a983a 	sll	r5,r7,r5
   26a2c:	390ed83a 	srl	r7,r7,r4
   26a30:	2808c03a 	cmpne	r4,r5,zero
   26a34:	390eb03a 	or	r7,r7,r4
   26a38:	19c7883a 	add	r3,r3,r7
   26a3c:	1901002c 	andhi	r4,r3,1024
   26a40:	20003826 	beq	r4,zero,26b24 <__subsf3+0x2b4>
   26a44:	84000044 	addi	r16,r16,1
   26a48:	01003fc4 	movi	r4,255
   26a4c:	81005426 	beq	r16,r4,26ba0 <__subsf3+0x330>
   26a50:	1023883a 	mov	r17,r2
   26a54:	00bf0034 	movhi	r2,64512
   26a58:	10bfffc4 	addi	r2,r2,-1
   26a5c:	1900004c 	andi	r4,r3,1
   26a60:	1886703a 	and	r3,r3,r2
   26a64:	1806d07a 	srli	r3,r3,1
   26a68:	1906b03a 	or	r3,r3,r4
   26a6c:	003f9906 	br	268d4 <__subsf3+0x64>
   26a70:	383f9226 	beq	r7,zero,268bc <__subsf3+0x4c>
   26a74:	10803fcc 	andi	r2,r2,255
   26a78:	003f9106 	br	268c0 <__subsf3+0x50>
   26a7c:	213fffc4 	addi	r4,r4,-1
   26a80:	203fbc26 	beq	r4,zero,26974 <__subsf3+0x104>
   26a84:	00803fc4 	movi	r2,255
   26a88:	80bfb21e 	bne	r16,r2,26954 <__subsf3+0xe4>
   26a8c:	003f9106 	br	268d4 <__subsf3+0x64>
   26a90:	383f9026 	beq	r7,zero,268d4 <__subsf3+0x64>
   26a94:	213fffc4 	addi	r4,r4,-1
   26a98:	203fe726 	beq	r4,zero,26a38 <__subsf3+0x1c8>
   26a9c:	01403fc4 	movi	r5,255
   26aa0:	817fdd1e 	bne	r16,r5,26a18 <__subsf3+0x1a8>
   26aa4:	003f8b06 	br	268d4 <__subsf3+0x64>
   26aa8:	2000221e 	bne	r4,zero,26b34 <__subsf3+0x2c4>
   26aac:	81000044 	addi	r4,r16,1
   26ab0:	21003fcc 	andi	r4,r4,255
   26ab4:	01400044 	movi	r5,1
   26ab8:	2900470e 	bge	r5,r4,26bd8 <__subsf3+0x368>
   26abc:	19e5c83a 	sub	r18,r3,r7
   26ac0:	9141002c 	andhi	r5,r18,1024
   26ac4:	28002d26 	beq	r5,zero,26b7c <__subsf3+0x30c>
   26ac8:	38e5c83a 	sub	r18,r7,r3
   26acc:	1023883a 	mov	r17,r2
   26ad0:	003fae06 	br	2698c <__subsf3+0x11c>
   26ad4:	8880004c 	andi	r2,r17,1
   26ad8:	043fffc4 	movi	r16,-1
   26adc:	000b883a 	mov	r5,zero
   26ae0:	003f8a06 	br	2690c <__subsf3+0x9c>
   26ae4:	00ff0034 	movhi	r3,64512
   26ae8:	18ffffc4 	addi	r3,r3,-1
   26aec:	80a1c83a 	sub	r16,r16,r2
   26af0:	90c6703a 	and	r3,r18,r3
   26af4:	003f7706 	br	268d4 <__subsf3+0x64>
   26af8:	2000431e 	bne	r4,zero,26c08 <__subsf3+0x398>
   26afc:	81000044 	addi	r4,r16,1
   26b00:	21803fcc 	andi	r6,r4,255
   26b04:	01400044 	movi	r5,1
   26b08:	2980280e 	bge	r5,r6,26bac <__subsf3+0x33c>
   26b0c:	01403fc4 	movi	r5,255
   26b10:	21402326 	beq	r4,r5,26ba0 <__subsf3+0x330>
   26b14:	19c7883a 	add	r3,r3,r7
   26b18:	1806d07a 	srli	r3,r3,1
   26b1c:	2021883a 	mov	r16,r4
   26b20:	003f6c06 	br	268d4 <__subsf3+0x64>
   26b24:	1023883a 	mov	r17,r2
   26b28:	003fa906 	br	269d0 <__subsf3+0x160>
   26b2c:	01c00044 	movi	r7,1
   26b30:	003f9006 	br	26974 <__subsf3+0x104>
   26b34:	8000151e 	bne	r16,zero,26b8c <__subsf3+0x31c>
   26b38:	18002f26 	beq	r3,zero,26bf8 <__subsf3+0x388>
   26b3c:	0108303a 	nor	r4,zero,r4
   26b40:	20000a26 	beq	r4,zero,26b6c <__subsf3+0x2fc>
   26b44:	01403fc4 	movi	r5,255
   26b48:	31402b26 	beq	r6,r5,26bf8 <__subsf3+0x388>
   26b4c:	014006c4 	movi	r5,27
   26b50:	29006e16 	blt	r5,r4,26d0c <__subsf3+0x49c>
   26b54:	01400804 	movi	r5,32
   26b58:	290bc83a 	sub	r5,r5,r4
   26b5c:	194a983a 	sll	r5,r3,r5
   26b60:	1908d83a 	srl	r4,r3,r4
   26b64:	2806c03a 	cmpne	r3,r5,zero
   26b68:	20c6b03a 	or	r3,r4,r3
   26b6c:	38c7c83a 	sub	r3,r7,r3
   26b70:	3021883a 	mov	r16,r6
   26b74:	1023883a 	mov	r17,r2
   26b78:	003f7f06 	br	26978 <__subsf3+0x108>
   26b7c:	903f831e 	bne	r18,zero,2698c <__subsf3+0x11c>
   26b80:	0005883a 	mov	r2,zero
   26b84:	0021883a 	mov	r16,zero
   26b88:	003f9a06 	br	269f4 <__subsf3+0x184>
   26b8c:	01403fc4 	movi	r5,255
   26b90:	31401926 	beq	r6,r5,26bf8 <__subsf3+0x388>
   26b94:	0109c83a 	sub	r4,zero,r4
   26b98:	18c10034 	orhi	r3,r3,1024
   26b9c:	003feb06 	br	26b4c <__subsf3+0x2dc>
   26ba0:	043fffc4 	movi	r16,-1
   26ba4:	000b883a 	mov	r5,zero
   26ba8:	003f5806 	br	2690c <__subsf3+0x9c>
   26bac:	8000481e 	bne	r16,zero,26cd0 <__subsf3+0x460>
   26bb0:	18006226 	beq	r3,zero,26d3c <__subsf3+0x4cc>
   26bb4:	383f4726 	beq	r7,zero,268d4 <__subsf3+0x64>
   26bb8:	19c7883a 	add	r3,r3,r7
   26bbc:	1881002c 	andhi	r2,r3,1024
   26bc0:	103f8326 	beq	r2,zero,269d0 <__subsf3+0x160>
   26bc4:	00bf0034 	movhi	r2,64512
   26bc8:	10bfffc4 	addi	r2,r2,-1
   26bcc:	2821883a 	mov	r16,r5
   26bd0:	1886703a 	and	r3,r3,r2
   26bd4:	003f3f06 	br	268d4 <__subsf3+0x64>
   26bd8:	80001c1e 	bne	r16,zero,26c4c <__subsf3+0x3dc>
   26bdc:	1800261e 	bne	r3,zero,26c78 <__subsf3+0x408>
   26be0:	38004c26 	beq	r7,zero,26d14 <__subsf3+0x4a4>
   26be4:	3807883a 	mov	r3,r7
   26be8:	1023883a 	mov	r17,r2
   26bec:	003f3906 	br	268d4 <__subsf3+0x64>
   26bf0:	01c00044 	movi	r7,1
   26bf4:	003f9006 	br	26a38 <__subsf3+0x1c8>
   26bf8:	3807883a 	mov	r3,r7
   26bfc:	3021883a 	mov	r16,r6
   26c00:	1023883a 	mov	r17,r2
   26c04:	003f3306 	br	268d4 <__subsf3+0x64>
   26c08:	8000161e 	bne	r16,zero,26c64 <__subsf3+0x3f4>
   26c0c:	18002d26 	beq	r3,zero,26cc4 <__subsf3+0x454>
   26c10:	0108303a 	nor	r4,zero,r4
   26c14:	20000a26 	beq	r4,zero,26c40 <__subsf3+0x3d0>
   26c18:	01403fc4 	movi	r5,255
   26c1c:	31402926 	beq	r6,r5,26cc4 <__subsf3+0x454>
   26c20:	014006c4 	movi	r5,27
   26c24:	29004716 	blt	r5,r4,26d44 <__subsf3+0x4d4>
   26c28:	01400804 	movi	r5,32
   26c2c:	290bc83a 	sub	r5,r5,r4
   26c30:	194a983a 	sll	r5,r3,r5
   26c34:	1908d83a 	srl	r4,r3,r4
   26c38:	2806c03a 	cmpne	r3,r5,zero
   26c3c:	20c6b03a 	or	r3,r4,r3
   26c40:	19c7883a 	add	r3,r3,r7
   26c44:	3021883a 	mov	r16,r6
   26c48:	003f7c06 	br	26a3c <__subsf3+0x1cc>
   26c4c:	1800111e 	bne	r3,zero,26c94 <__subsf3+0x424>
   26c50:	38003326 	beq	r7,zero,26d20 <__subsf3+0x4b0>
   26c54:	3807883a 	mov	r3,r7
   26c58:	1023883a 	mov	r17,r2
   26c5c:	04003fc4 	movi	r16,255
   26c60:	003f1c06 	br	268d4 <__subsf3+0x64>
   26c64:	01403fc4 	movi	r5,255
   26c68:	31401626 	beq	r6,r5,26cc4 <__subsf3+0x454>
   26c6c:	0109c83a 	sub	r4,zero,r4
   26c70:	18c10034 	orhi	r3,r3,1024
   26c74:	003fea06 	br	26c20 <__subsf3+0x3b0>
   26c78:	383f1626 	beq	r7,zero,268d4 <__subsf3+0x64>
   26c7c:	19c9c83a 	sub	r4,r3,r7
   26c80:	2141002c 	andhi	r5,r4,1024
   26c84:	283f5026 	beq	r5,zero,269c8 <__subsf3+0x158>
   26c88:	38c7c83a 	sub	r3,r7,r3
   26c8c:	1023883a 	mov	r17,r2
   26c90:	003f1006 	br	268d4 <__subsf3+0x64>
   26c94:	38001b26 	beq	r7,zero,26d04 <__subsf3+0x494>
   26c98:	1806d0fa 	srli	r3,r3,3
   26c9c:	1900102c 	andhi	r4,r3,64
   26ca0:	20000526 	beq	r4,zero,26cb8 <__subsf3+0x448>
   26ca4:	380ed0fa 	srli	r7,r7,3
   26ca8:	3900102c 	andhi	r4,r7,64
   26cac:	2000021e 	bne	r4,zero,26cb8 <__subsf3+0x448>
   26cb0:	3807883a 	mov	r3,r7
   26cb4:	1023883a 	mov	r17,r2
   26cb8:	180690fa 	slli	r3,r3,3
   26cbc:	04003fc4 	movi	r16,255
   26cc0:	003f0406 	br	268d4 <__subsf3+0x64>
   26cc4:	3807883a 	mov	r3,r7
   26cc8:	3021883a 	mov	r16,r6
   26ccc:	003f0106 	br	268d4 <__subsf3+0x64>
   26cd0:	18001726 	beq	r3,zero,26d30 <__subsf3+0x4c0>
   26cd4:	38000b26 	beq	r7,zero,26d04 <__subsf3+0x494>
   26cd8:	1806d0fa 	srli	r3,r3,3
   26cdc:	1900102c 	andhi	r4,r3,64
   26ce0:	20000426 	beq	r4,zero,26cf4 <__subsf3+0x484>
   26ce4:	380ed0fa 	srli	r7,r7,3
   26ce8:	3900102c 	andhi	r4,r7,64
   26cec:	2000011e 	bne	r4,zero,26cf4 <__subsf3+0x484>
   26cf0:	3807883a 	mov	r3,r7
   26cf4:	180690fa 	slli	r3,r3,3
   26cf8:	1023883a 	mov	r17,r2
   26cfc:	04003fc4 	movi	r16,255
   26d00:	003ef406 	br	268d4 <__subsf3+0x64>
   26d04:	04003fc4 	movi	r16,255
   26d08:	003ef206 	br	268d4 <__subsf3+0x64>
   26d0c:	00c00044 	movi	r3,1
   26d10:	003f9606 	br	26b6c <__subsf3+0x2fc>
   26d14:	000b883a 	mov	r5,zero
   26d18:	0005883a 	mov	r2,zero
   26d1c:	003f3506 	br	269f4 <__subsf3+0x184>
   26d20:	01402034 	movhi	r5,128
   26d24:	297fffc4 	addi	r5,r5,-1
   26d28:	0005883a 	mov	r2,zero
   26d2c:	003f2f06 	br	269ec <__subsf3+0x17c>
   26d30:	3807883a 	mov	r3,r7
   26d34:	04003fc4 	movi	r16,255
   26d38:	003ee606 	br	268d4 <__subsf3+0x64>
   26d3c:	3807883a 	mov	r3,r7
   26d40:	003ee406 	br	268d4 <__subsf3+0x64>
   26d44:	00c00044 	movi	r3,1
   26d48:	003fbd06 	br	26c40 <__subsf3+0x3d0>
   26d4c:	0005883a 	mov	r2,zero
   26d50:	003f2806 	br	269f4 <__subsf3+0x184>

00026d54 <__fixsfsi>:
   26d54:	200ad5fa 	srli	r5,r4,23
   26d58:	00c02034 	movhi	r3,128
   26d5c:	18ffffc4 	addi	r3,r3,-1
   26d60:	29403fcc 	andi	r5,r5,255
   26d64:	00801f84 	movi	r2,126
   26d68:	1906703a 	and	r3,r3,r4
   26d6c:	2008d7fa 	srli	r4,r4,31
   26d70:	11400e0e 	bge	r2,r5,26dac <__fixsfsi+0x58>
   26d74:	00802744 	movi	r2,157
   26d78:	11400816 	blt	r2,r5,26d9c <__fixsfsi+0x48>
   26d7c:	00802544 	movi	r2,149
   26d80:	18c02034 	orhi	r3,r3,128
   26d84:	11400b0e 	bge	r2,r5,26db4 <__fixsfsi+0x60>
   26d88:	28bfda84 	addi	r2,r5,-150
   26d8c:	1884983a 	sll	r2,r3,r2
   26d90:	20000726 	beq	r4,zero,26db0 <__fixsfsi+0x5c>
   26d94:	0085c83a 	sub	r2,zero,r2
   26d98:	f800283a 	ret
   26d9c:	00a00034 	movhi	r2,32768
   26da0:	10bfffc4 	addi	r2,r2,-1
   26da4:	2085883a 	add	r2,r4,r2
   26da8:	f800283a 	ret
   26dac:	0005883a 	mov	r2,zero
   26db0:	f800283a 	ret
   26db4:	00802584 	movi	r2,150
   26db8:	1145c83a 	sub	r2,r2,r5
   26dbc:	1884d83a 	srl	r2,r3,r2
   26dc0:	003ff306 	br	26d90 <__fixsfsi+0x3c>

00026dc4 <__floatsisf>:
   26dc4:	defffd04 	addi	sp,sp,-12
   26dc8:	dfc00215 	stw	ra,8(sp)
   26dcc:	dc400115 	stw	r17,4(sp)
   26dd0:	dc000015 	stw	r16,0(sp)
   26dd4:	20003526 	beq	r4,zero,26eac <__floatsisf+0xe8>
   26dd8:	2021883a 	mov	r16,r4
   26ddc:	2022d7fa 	srli	r17,r4,31
   26de0:	20003616 	blt	r4,zero,26ebc <__floatsisf+0xf8>
   26de4:	8009883a 	mov	r4,r16
   26de8:	00297a40 	call	297a4 <__clzsi2>
   26dec:	00c02784 	movi	r3,158
   26df0:	1887c83a 	sub	r3,r3,r2
   26df4:	01002584 	movi	r4,150
   26df8:	20c01416 	blt	r4,r3,26e4c <__floatsisf+0x88>
   26dfc:	20c9c83a 	sub	r4,r4,r3
   26e00:	8120983a 	sll	r16,r16,r4
   26e04:	00802034 	movhi	r2,128
   26e08:	10bfffc4 	addi	r2,r2,-1
   26e0c:	8809883a 	mov	r4,r17
   26e10:	80a0703a 	and	r16,r16,r2
   26e14:	18803fcc 	andi	r2,r3,255
   26e18:	100695fa 	slli	r3,r2,23
   26e1c:	20803fcc 	andi	r2,r4,255
   26e20:	100897fa 	slli	r4,r2,31
   26e24:	00802034 	movhi	r2,128
   26e28:	10bfffc4 	addi	r2,r2,-1
   26e2c:	8084703a 	and	r2,r16,r2
   26e30:	10c4b03a 	or	r2,r2,r3
   26e34:	1104b03a 	or	r2,r2,r4
   26e38:	dfc00217 	ldw	ra,8(sp)
   26e3c:	dc400117 	ldw	r17,4(sp)
   26e40:	dc000017 	ldw	r16,0(sp)
   26e44:	dec00304 	addi	sp,sp,12
   26e48:	f800283a 	ret
   26e4c:	01002644 	movi	r4,153
   26e50:	20c01c16 	blt	r4,r3,26ec4 <__floatsisf+0x100>
   26e54:	20c9c83a 	sub	r4,r4,r3
   26e58:	8120983a 	sll	r16,r16,r4
   26e5c:	013f0034 	movhi	r4,64512
   26e60:	213fffc4 	addi	r4,r4,-1
   26e64:	814001cc 	andi	r5,r16,7
   26e68:	8108703a 	and	r4,r16,r4
   26e6c:	28000426 	beq	r5,zero,26e80 <__floatsisf+0xbc>
   26e70:	840003cc 	andi	r16,r16,15
   26e74:	01400104 	movi	r5,4
   26e78:	81400126 	beq	r16,r5,26e80 <__floatsisf+0xbc>
   26e7c:	2149883a 	add	r4,r4,r5
   26e80:	2141002c 	andhi	r5,r4,1024
   26e84:	28000526 	beq	r5,zero,26e9c <__floatsisf+0xd8>
   26e88:	00c027c4 	movi	r3,159
   26e8c:	1887c83a 	sub	r3,r3,r2
   26e90:	00bf0034 	movhi	r2,64512
   26e94:	10bfffc4 	addi	r2,r2,-1
   26e98:	2088703a 	and	r4,r4,r2
   26e9c:	202091ba 	slli	r16,r4,6
   26ea0:	8809883a 	mov	r4,r17
   26ea4:	8020d27a 	srli	r16,r16,9
   26ea8:	003fda06 	br	26e14 <__floatsisf+0x50>
   26eac:	0009883a 	mov	r4,zero
   26eb0:	0007883a 	mov	r3,zero
   26eb4:	0021883a 	mov	r16,zero
   26eb8:	003fd606 	br	26e14 <__floatsisf+0x50>
   26ebc:	0121c83a 	sub	r16,zero,r4
   26ec0:	003fc806 	br	26de4 <__floatsisf+0x20>
   26ec4:	01002e44 	movi	r4,185
   26ec8:	20c9c83a 	sub	r4,r4,r3
   26ecc:	01400144 	movi	r5,5
   26ed0:	8108983a 	sll	r4,r16,r4
   26ed4:	288bc83a 	sub	r5,r5,r2
   26ed8:	8160d83a 	srl	r16,r16,r5
   26edc:	2008c03a 	cmpne	r4,r4,zero
   26ee0:	8120b03a 	or	r16,r16,r4
   26ee4:	003fdd06 	br	26e5c <__floatsisf+0x98>

00026ee8 <__adddf3>:
   26ee8:	02c00434 	movhi	r11,16
   26eec:	5affffc4 	addi	r11,r11,-1
   26ef0:	2806d7fa 	srli	r3,r5,31
   26ef4:	2ad4703a 	and	r10,r5,r11
   26ef8:	3ad2703a 	and	r9,r7,r11
   26efc:	3804d53a 	srli	r2,r7,20
   26f00:	3018d77a 	srli	r12,r6,29
   26f04:	280ad53a 	srli	r5,r5,20
   26f08:	501490fa 	slli	r10,r10,3
   26f0c:	2010d77a 	srli	r8,r4,29
   26f10:	481290fa 	slli	r9,r9,3
   26f14:	380ed7fa 	srli	r7,r7,31
   26f18:	defffb04 	addi	sp,sp,-20
   26f1c:	dc800215 	stw	r18,8(sp)
   26f20:	dc400115 	stw	r17,4(sp)
   26f24:	dc000015 	stw	r16,0(sp)
   26f28:	dfc00415 	stw	ra,16(sp)
   26f2c:	dcc00315 	stw	r19,12(sp)
   26f30:	1c803fcc 	andi	r18,r3,255
   26f34:	2c01ffcc 	andi	r16,r5,2047
   26f38:	5210b03a 	or	r8,r10,r8
   26f3c:	202290fa 	slli	r17,r4,3
   26f40:	1081ffcc 	andi	r2,r2,2047
   26f44:	4b12b03a 	or	r9,r9,r12
   26f48:	300c90fa 	slli	r6,r6,3
   26f4c:	91c07526 	beq	r18,r7,27124 <__adddf3+0x23c>
   26f50:	8087c83a 	sub	r3,r16,r2
   26f54:	00c0ab0e 	bge	zero,r3,27204 <__adddf3+0x31c>
   26f58:	10002a1e 	bne	r2,zero,27004 <__adddf3+0x11c>
   26f5c:	4984b03a 	or	r2,r9,r6
   26f60:	1000961e 	bne	r2,zero,271bc <__adddf3+0x2d4>
   26f64:	888001cc 	andi	r2,r17,7
   26f68:	10000726 	beq	r2,zero,26f88 <__adddf3+0xa0>
   26f6c:	888003cc 	andi	r2,r17,15
   26f70:	00c00104 	movi	r3,4
   26f74:	10c00426 	beq	r2,r3,26f88 <__adddf3+0xa0>
   26f78:	88c7883a 	add	r3,r17,r3
   26f7c:	1c63803a 	cmpltu	r17,r3,r17
   26f80:	4451883a 	add	r8,r8,r17
   26f84:	1823883a 	mov	r17,r3
   26f88:	4080202c 	andhi	r2,r8,128
   26f8c:	10005926 	beq	r2,zero,270f4 <__adddf3+0x20c>
   26f90:	84000044 	addi	r16,r16,1
   26f94:	0081ffc4 	movi	r2,2047
   26f98:	8080ba26 	beq	r16,r2,27284 <__adddf3+0x39c>
   26f9c:	00bfe034 	movhi	r2,65408
   26fa0:	10bfffc4 	addi	r2,r2,-1
   26fa4:	4090703a 	and	r8,r8,r2
   26fa8:	4004977a 	slli	r2,r8,29
   26fac:	4010927a 	slli	r8,r8,9
   26fb0:	8822d0fa 	srli	r17,r17,3
   26fb4:	8401ffcc 	andi	r16,r16,2047
   26fb8:	4010d33a 	srli	r8,r8,12
   26fbc:	9007883a 	mov	r3,r18
   26fc0:	1444b03a 	or	r2,r2,r17
   26fc4:	8401ffcc 	andi	r16,r16,2047
   26fc8:	8020953a 	slli	r16,r16,20
   26fcc:	18c03fcc 	andi	r3,r3,255
   26fd0:	01000434 	movhi	r4,16
   26fd4:	213fffc4 	addi	r4,r4,-1
   26fd8:	180697fa 	slli	r3,r3,31
   26fdc:	4110703a 	and	r8,r8,r4
   26fe0:	4410b03a 	or	r8,r8,r16
   26fe4:	40c6b03a 	or	r3,r8,r3
   26fe8:	dfc00417 	ldw	ra,16(sp)
   26fec:	dcc00317 	ldw	r19,12(sp)
   26ff0:	dc800217 	ldw	r18,8(sp)
   26ff4:	dc400117 	ldw	r17,4(sp)
   26ff8:	dc000017 	ldw	r16,0(sp)
   26ffc:	dec00504 	addi	sp,sp,20
   27000:	f800283a 	ret
   27004:	0081ffc4 	movi	r2,2047
   27008:	80bfd626 	beq	r16,r2,26f64 <__adddf3+0x7c>
   2700c:	4a402034 	orhi	r9,r9,128
   27010:	00800e04 	movi	r2,56
   27014:	10c09f16 	blt	r2,r3,27294 <__adddf3+0x3ac>
   27018:	008007c4 	movi	r2,31
   2701c:	10c0c216 	blt	r2,r3,27328 <__adddf3+0x440>
   27020:	00800804 	movi	r2,32
   27024:	10c5c83a 	sub	r2,r2,r3
   27028:	488a983a 	sll	r5,r9,r2
   2702c:	30c8d83a 	srl	r4,r6,r3
   27030:	3084983a 	sll	r2,r6,r2
   27034:	48c6d83a 	srl	r3,r9,r3
   27038:	290cb03a 	or	r6,r5,r4
   2703c:	1004c03a 	cmpne	r2,r2,zero
   27040:	308cb03a 	or	r6,r6,r2
   27044:	898dc83a 	sub	r6,r17,r6
   27048:	89a3803a 	cmpltu	r17,r17,r6
   2704c:	40d1c83a 	sub	r8,r8,r3
   27050:	4451c83a 	sub	r8,r8,r17
   27054:	3023883a 	mov	r17,r6
   27058:	4080202c 	andhi	r2,r8,128
   2705c:	10002326 	beq	r2,zero,270ec <__adddf3+0x204>
   27060:	04c02034 	movhi	r19,128
   27064:	9cffffc4 	addi	r19,r19,-1
   27068:	44e6703a 	and	r19,r8,r19
   2706c:	98007626 	beq	r19,zero,27248 <__adddf3+0x360>
   27070:	9809883a 	mov	r4,r19
   27074:	00297a40 	call	297a4 <__clzsi2>
   27078:	10fffe04 	addi	r3,r2,-8
   2707c:	010007c4 	movi	r4,31
   27080:	20c07716 	blt	r4,r3,27260 <__adddf3+0x378>
   27084:	00800804 	movi	r2,32
   27088:	10c5c83a 	sub	r2,r2,r3
   2708c:	8884d83a 	srl	r2,r17,r2
   27090:	98d0983a 	sll	r8,r19,r3
   27094:	88e2983a 	sll	r17,r17,r3
   27098:	1204b03a 	or	r2,r2,r8
   2709c:	1c007416 	blt	r3,r16,27270 <__adddf3+0x388>
   270a0:	1c21c83a 	sub	r16,r3,r16
   270a4:	82000044 	addi	r8,r16,1
   270a8:	00c007c4 	movi	r3,31
   270ac:	1a009116 	blt	r3,r8,272f4 <__adddf3+0x40c>
   270b0:	00c00804 	movi	r3,32
   270b4:	1a07c83a 	sub	r3,r3,r8
   270b8:	8a08d83a 	srl	r4,r17,r8
   270bc:	88e2983a 	sll	r17,r17,r3
   270c0:	10c6983a 	sll	r3,r2,r3
   270c4:	1210d83a 	srl	r8,r2,r8
   270c8:	8804c03a 	cmpne	r2,r17,zero
   270cc:	1906b03a 	or	r3,r3,r4
   270d0:	18a2b03a 	or	r17,r3,r2
   270d4:	0021883a 	mov	r16,zero
   270d8:	003fa206 	br	26f64 <__adddf3+0x7c>
   270dc:	1890b03a 	or	r8,r3,r2
   270e0:	40017d26 	beq	r8,zero,276d8 <__adddf3+0x7f0>
   270e4:	1011883a 	mov	r8,r2
   270e8:	1823883a 	mov	r17,r3
   270ec:	888001cc 	andi	r2,r17,7
   270f0:	103f9e1e 	bne	r2,zero,26f6c <__adddf3+0x84>
   270f4:	4004977a 	slli	r2,r8,29
   270f8:	8822d0fa 	srli	r17,r17,3
   270fc:	4010d0fa 	srli	r8,r8,3
   27100:	9007883a 	mov	r3,r18
   27104:	1444b03a 	or	r2,r2,r17
   27108:	0101ffc4 	movi	r4,2047
   2710c:	81002426 	beq	r16,r4,271a0 <__adddf3+0x2b8>
   27110:	8120703a 	and	r16,r16,r4
   27114:	01000434 	movhi	r4,16
   27118:	213fffc4 	addi	r4,r4,-1
   2711c:	4110703a 	and	r8,r8,r4
   27120:	003fa806 	br	26fc4 <__adddf3+0xdc>
   27124:	8089c83a 	sub	r4,r16,r2
   27128:	01005e0e 	bge	zero,r4,272a4 <__adddf3+0x3bc>
   2712c:	10002b26 	beq	r2,zero,271dc <__adddf3+0x2f4>
   27130:	0081ffc4 	movi	r2,2047
   27134:	80bf8b26 	beq	r16,r2,26f64 <__adddf3+0x7c>
   27138:	4a402034 	orhi	r9,r9,128
   2713c:	00800e04 	movi	r2,56
   27140:	1100a40e 	bge	r2,r4,273d4 <__adddf3+0x4ec>
   27144:	498cb03a 	or	r6,r9,r6
   27148:	300ac03a 	cmpne	r5,r6,zero
   2714c:	0013883a 	mov	r9,zero
   27150:	2c4b883a 	add	r5,r5,r17
   27154:	2c63803a 	cmpltu	r17,r5,r17
   27158:	4a11883a 	add	r8,r9,r8
   2715c:	8a11883a 	add	r8,r17,r8
   27160:	2823883a 	mov	r17,r5
   27164:	4080202c 	andhi	r2,r8,128
   27168:	103fe026 	beq	r2,zero,270ec <__adddf3+0x204>
   2716c:	84000044 	addi	r16,r16,1
   27170:	0081ffc4 	movi	r2,2047
   27174:	8080d226 	beq	r16,r2,274c0 <__adddf3+0x5d8>
   27178:	00bfe034 	movhi	r2,65408
   2717c:	10bfffc4 	addi	r2,r2,-1
   27180:	4090703a 	and	r8,r8,r2
   27184:	880ad07a 	srli	r5,r17,1
   27188:	400897fa 	slli	r4,r8,31
   2718c:	88c0004c 	andi	r3,r17,1
   27190:	28e2b03a 	or	r17,r5,r3
   27194:	4010d07a 	srli	r8,r8,1
   27198:	2462b03a 	or	r17,r4,r17
   2719c:	003f7106 	br	26f64 <__adddf3+0x7c>
   271a0:	4088b03a 	or	r4,r8,r2
   271a4:	20014526 	beq	r4,zero,276bc <__adddf3+0x7d4>
   271a8:	01000434 	movhi	r4,16
   271ac:	42000234 	orhi	r8,r8,8
   271b0:	213fffc4 	addi	r4,r4,-1
   271b4:	4110703a 	and	r8,r8,r4
   271b8:	003f8206 	br	26fc4 <__adddf3+0xdc>
   271bc:	18ffffc4 	addi	r3,r3,-1
   271c0:	1800491e 	bne	r3,zero,272e8 <__adddf3+0x400>
   271c4:	898bc83a 	sub	r5,r17,r6
   271c8:	8963803a 	cmpltu	r17,r17,r5
   271cc:	4251c83a 	sub	r8,r8,r9
   271d0:	4451c83a 	sub	r8,r8,r17
   271d4:	2823883a 	mov	r17,r5
   271d8:	003f9f06 	br	27058 <__adddf3+0x170>
   271dc:	4984b03a 	or	r2,r9,r6
   271e0:	103f6026 	beq	r2,zero,26f64 <__adddf3+0x7c>
   271e4:	213fffc4 	addi	r4,r4,-1
   271e8:	2000931e 	bne	r4,zero,27438 <__adddf3+0x550>
   271ec:	898d883a 	add	r6,r17,r6
   271f0:	3463803a 	cmpltu	r17,r6,r17
   271f4:	4251883a 	add	r8,r8,r9
   271f8:	8a11883a 	add	r8,r17,r8
   271fc:	3023883a 	mov	r17,r6
   27200:	003fd806 	br	27164 <__adddf3+0x27c>
   27204:	1800541e 	bne	r3,zero,27358 <__adddf3+0x470>
   27208:	80800044 	addi	r2,r16,1
   2720c:	1081ffcc 	andi	r2,r2,2047
   27210:	00c00044 	movi	r3,1
   27214:	1880a00e 	bge	r3,r2,27498 <__adddf3+0x5b0>
   27218:	8989c83a 	sub	r4,r17,r6
   2721c:	8905803a 	cmpltu	r2,r17,r4
   27220:	4267c83a 	sub	r19,r8,r9
   27224:	98a7c83a 	sub	r19,r19,r2
   27228:	9880202c 	andhi	r2,r19,128
   2722c:	10006326 	beq	r2,zero,273bc <__adddf3+0x4d4>
   27230:	3463c83a 	sub	r17,r6,r17
   27234:	4a07c83a 	sub	r3,r9,r8
   27238:	344d803a 	cmpltu	r6,r6,r17
   2723c:	19a7c83a 	sub	r19,r3,r6
   27240:	3825883a 	mov	r18,r7
   27244:	983f8a1e 	bne	r19,zero,27070 <__adddf3+0x188>
   27248:	8809883a 	mov	r4,r17
   2724c:	00297a40 	call	297a4 <__clzsi2>
   27250:	10800804 	addi	r2,r2,32
   27254:	10fffe04 	addi	r3,r2,-8
   27258:	010007c4 	movi	r4,31
   2725c:	20ff890e 	bge	r4,r3,27084 <__adddf3+0x19c>
   27260:	10bff604 	addi	r2,r2,-40
   27264:	8884983a 	sll	r2,r17,r2
   27268:	0023883a 	mov	r17,zero
   2726c:	1c3f8c0e 	bge	r3,r16,270a0 <__adddf3+0x1b8>
   27270:	023fe034 	movhi	r8,65408
   27274:	423fffc4 	addi	r8,r8,-1
   27278:	80e1c83a 	sub	r16,r16,r3
   2727c:	1210703a 	and	r8,r2,r8
   27280:	003f3806 	br	26f64 <__adddf3+0x7c>
   27284:	9007883a 	mov	r3,r18
   27288:	0011883a 	mov	r8,zero
   2728c:	0005883a 	mov	r2,zero
   27290:	003f4c06 	br	26fc4 <__adddf3+0xdc>
   27294:	498cb03a 	or	r6,r9,r6
   27298:	300cc03a 	cmpne	r6,r6,zero
   2729c:	0007883a 	mov	r3,zero
   272a0:	003f6806 	br	27044 <__adddf3+0x15c>
   272a4:	20009c1e 	bne	r4,zero,27518 <__adddf3+0x630>
   272a8:	80800044 	addi	r2,r16,1
   272ac:	1141ffcc 	andi	r5,r2,2047
   272b0:	01000044 	movi	r4,1
   272b4:	2140670e 	bge	r4,r5,27454 <__adddf3+0x56c>
   272b8:	0101ffc4 	movi	r4,2047
   272bc:	11007f26 	beq	r2,r4,274bc <__adddf3+0x5d4>
   272c0:	898d883a 	add	r6,r17,r6
   272c4:	4247883a 	add	r3,r8,r9
   272c8:	3451803a 	cmpltu	r8,r6,r17
   272cc:	40d1883a 	add	r8,r8,r3
   272d0:	402297fa 	slli	r17,r8,31
   272d4:	300cd07a 	srli	r6,r6,1
   272d8:	4010d07a 	srli	r8,r8,1
   272dc:	1021883a 	mov	r16,r2
   272e0:	89a2b03a 	or	r17,r17,r6
   272e4:	003f1f06 	br	26f64 <__adddf3+0x7c>
   272e8:	0081ffc4 	movi	r2,2047
   272ec:	80bf481e 	bne	r16,r2,27010 <__adddf3+0x128>
   272f0:	003f1c06 	br	26f64 <__adddf3+0x7c>
   272f4:	843ff844 	addi	r16,r16,-31
   272f8:	01000804 	movi	r4,32
   272fc:	1406d83a 	srl	r3,r2,r16
   27300:	41005026 	beq	r8,r4,27444 <__adddf3+0x55c>
   27304:	01001004 	movi	r4,64
   27308:	2211c83a 	sub	r8,r4,r8
   2730c:	1204983a 	sll	r2,r2,r8
   27310:	88a2b03a 	or	r17,r17,r2
   27314:	8822c03a 	cmpne	r17,r17,zero
   27318:	1c62b03a 	or	r17,r3,r17
   2731c:	0011883a 	mov	r8,zero
   27320:	0021883a 	mov	r16,zero
   27324:	003f7106 	br	270ec <__adddf3+0x204>
   27328:	193ff804 	addi	r4,r3,-32
   2732c:	00800804 	movi	r2,32
   27330:	4908d83a 	srl	r4,r9,r4
   27334:	18804526 	beq	r3,r2,2744c <__adddf3+0x564>
   27338:	00801004 	movi	r2,64
   2733c:	10c5c83a 	sub	r2,r2,r3
   27340:	4886983a 	sll	r3,r9,r2
   27344:	198cb03a 	or	r6,r3,r6
   27348:	300cc03a 	cmpne	r6,r6,zero
   2734c:	218cb03a 	or	r6,r4,r6
   27350:	0007883a 	mov	r3,zero
   27354:	003f3b06 	br	27044 <__adddf3+0x15c>
   27358:	80002a26 	beq	r16,zero,27404 <__adddf3+0x51c>
   2735c:	0101ffc4 	movi	r4,2047
   27360:	11006826 	beq	r2,r4,27504 <__adddf3+0x61c>
   27364:	00c7c83a 	sub	r3,zero,r3
   27368:	42002034 	orhi	r8,r8,128
   2736c:	01000e04 	movi	r4,56
   27370:	20c07c16 	blt	r4,r3,27564 <__adddf3+0x67c>
   27374:	010007c4 	movi	r4,31
   27378:	20c0da16 	blt	r4,r3,276e4 <__adddf3+0x7fc>
   2737c:	01000804 	movi	r4,32
   27380:	20c9c83a 	sub	r4,r4,r3
   27384:	4114983a 	sll	r10,r8,r4
   27388:	88cad83a 	srl	r5,r17,r3
   2738c:	8908983a 	sll	r4,r17,r4
   27390:	40c6d83a 	srl	r3,r8,r3
   27394:	5162b03a 	or	r17,r10,r5
   27398:	2008c03a 	cmpne	r4,r4,zero
   2739c:	8922b03a 	or	r17,r17,r4
   273a0:	3463c83a 	sub	r17,r6,r17
   273a4:	48c7c83a 	sub	r3,r9,r3
   273a8:	344d803a 	cmpltu	r6,r6,r17
   273ac:	1991c83a 	sub	r8,r3,r6
   273b0:	1021883a 	mov	r16,r2
   273b4:	3825883a 	mov	r18,r7
   273b8:	003f2706 	br	27058 <__adddf3+0x170>
   273bc:	24d0b03a 	or	r8,r4,r19
   273c0:	40001b1e 	bne	r8,zero,27430 <__adddf3+0x548>
   273c4:	0005883a 	mov	r2,zero
   273c8:	0007883a 	mov	r3,zero
   273cc:	0021883a 	mov	r16,zero
   273d0:	003f4d06 	br	27108 <__adddf3+0x220>
   273d4:	008007c4 	movi	r2,31
   273d8:	11003c16 	blt	r2,r4,274cc <__adddf3+0x5e4>
   273dc:	00800804 	movi	r2,32
   273e0:	1105c83a 	sub	r2,r2,r4
   273e4:	488e983a 	sll	r7,r9,r2
   273e8:	310ad83a 	srl	r5,r6,r4
   273ec:	3084983a 	sll	r2,r6,r2
   273f0:	4912d83a 	srl	r9,r9,r4
   273f4:	394ab03a 	or	r5,r7,r5
   273f8:	1004c03a 	cmpne	r2,r2,zero
   273fc:	288ab03a 	or	r5,r5,r2
   27400:	003f5306 	br	27150 <__adddf3+0x268>
   27404:	4448b03a 	or	r4,r8,r17
   27408:	20003e26 	beq	r4,zero,27504 <__adddf3+0x61c>
   2740c:	00c6303a 	nor	r3,zero,r3
   27410:	18003a1e 	bne	r3,zero,274fc <__adddf3+0x614>
   27414:	3463c83a 	sub	r17,r6,r17
   27418:	4a07c83a 	sub	r3,r9,r8
   2741c:	344d803a 	cmpltu	r6,r6,r17
   27420:	1991c83a 	sub	r8,r3,r6
   27424:	1021883a 	mov	r16,r2
   27428:	3825883a 	mov	r18,r7
   2742c:	003f0a06 	br	27058 <__adddf3+0x170>
   27430:	2023883a 	mov	r17,r4
   27434:	003f0d06 	br	2706c <__adddf3+0x184>
   27438:	0081ffc4 	movi	r2,2047
   2743c:	80bf3f1e 	bne	r16,r2,2713c <__adddf3+0x254>
   27440:	003ec806 	br	26f64 <__adddf3+0x7c>
   27444:	0005883a 	mov	r2,zero
   27448:	003fb106 	br	27310 <__adddf3+0x428>
   2744c:	0007883a 	mov	r3,zero
   27450:	003fbc06 	br	27344 <__adddf3+0x45c>
   27454:	4444b03a 	or	r2,r8,r17
   27458:	8000871e 	bne	r16,zero,27678 <__adddf3+0x790>
   2745c:	1000ba26 	beq	r2,zero,27748 <__adddf3+0x860>
   27460:	4984b03a 	or	r2,r9,r6
   27464:	103ebf26 	beq	r2,zero,26f64 <__adddf3+0x7c>
   27468:	8985883a 	add	r2,r17,r6
   2746c:	4247883a 	add	r3,r8,r9
   27470:	1451803a 	cmpltu	r8,r2,r17
   27474:	40d1883a 	add	r8,r8,r3
   27478:	40c0202c 	andhi	r3,r8,128
   2747c:	1023883a 	mov	r17,r2
   27480:	183f1a26 	beq	r3,zero,270ec <__adddf3+0x204>
   27484:	00bfe034 	movhi	r2,65408
   27488:	10bfffc4 	addi	r2,r2,-1
   2748c:	2021883a 	mov	r16,r4
   27490:	4090703a 	and	r8,r8,r2
   27494:	003eb306 	br	26f64 <__adddf3+0x7c>
   27498:	4444b03a 	or	r2,r8,r17
   2749c:	8000291e 	bne	r16,zero,27544 <__adddf3+0x65c>
   274a0:	10004b1e 	bne	r2,zero,275d0 <__adddf3+0x6e8>
   274a4:	4990b03a 	or	r8,r9,r6
   274a8:	40008b26 	beq	r8,zero,276d8 <__adddf3+0x7f0>
   274ac:	4811883a 	mov	r8,r9
   274b0:	3023883a 	mov	r17,r6
   274b4:	3825883a 	mov	r18,r7
   274b8:	003eaa06 	br	26f64 <__adddf3+0x7c>
   274bc:	1021883a 	mov	r16,r2
   274c0:	0011883a 	mov	r8,zero
   274c4:	0005883a 	mov	r2,zero
   274c8:	003f0f06 	br	27108 <__adddf3+0x220>
   274cc:	217ff804 	addi	r5,r4,-32
   274d0:	00800804 	movi	r2,32
   274d4:	494ad83a 	srl	r5,r9,r5
   274d8:	20807d26 	beq	r4,r2,276d0 <__adddf3+0x7e8>
   274dc:	00801004 	movi	r2,64
   274e0:	1109c83a 	sub	r4,r2,r4
   274e4:	4912983a 	sll	r9,r9,r4
   274e8:	498cb03a 	or	r6,r9,r6
   274ec:	300cc03a 	cmpne	r6,r6,zero
   274f0:	298ab03a 	or	r5,r5,r6
   274f4:	0013883a 	mov	r9,zero
   274f8:	003f1506 	br	27150 <__adddf3+0x268>
   274fc:	0101ffc4 	movi	r4,2047
   27500:	113f9a1e 	bne	r2,r4,2736c <__adddf3+0x484>
   27504:	4811883a 	mov	r8,r9
   27508:	3023883a 	mov	r17,r6
   2750c:	1021883a 	mov	r16,r2
   27510:	3825883a 	mov	r18,r7
   27514:	003e9306 	br	26f64 <__adddf3+0x7c>
   27518:	8000161e 	bne	r16,zero,27574 <__adddf3+0x68c>
   2751c:	444ab03a 	or	r5,r8,r17
   27520:	28005126 	beq	r5,zero,27668 <__adddf3+0x780>
   27524:	0108303a 	nor	r4,zero,r4
   27528:	20004d1e 	bne	r4,zero,27660 <__adddf3+0x778>
   2752c:	89a3883a 	add	r17,r17,r6
   27530:	4253883a 	add	r9,r8,r9
   27534:	898d803a 	cmpltu	r6,r17,r6
   27538:	3251883a 	add	r8,r6,r9
   2753c:	1021883a 	mov	r16,r2
   27540:	003f0806 	br	27164 <__adddf3+0x27c>
   27544:	1000301e 	bne	r2,zero,27608 <__adddf3+0x720>
   27548:	4984b03a 	or	r2,r9,r6
   2754c:	10007126 	beq	r2,zero,27714 <__adddf3+0x82c>
   27550:	4811883a 	mov	r8,r9
   27554:	3023883a 	mov	r17,r6
   27558:	3825883a 	mov	r18,r7
   2755c:	0401ffc4 	movi	r16,2047
   27560:	003e8006 	br	26f64 <__adddf3+0x7c>
   27564:	4462b03a 	or	r17,r8,r17
   27568:	8822c03a 	cmpne	r17,r17,zero
   2756c:	0007883a 	mov	r3,zero
   27570:	003f8b06 	br	273a0 <__adddf3+0x4b8>
   27574:	0141ffc4 	movi	r5,2047
   27578:	11403b26 	beq	r2,r5,27668 <__adddf3+0x780>
   2757c:	0109c83a 	sub	r4,zero,r4
   27580:	42002034 	orhi	r8,r8,128
   27584:	01400e04 	movi	r5,56
   27588:	29006716 	blt	r5,r4,27728 <__adddf3+0x840>
   2758c:	014007c4 	movi	r5,31
   27590:	29007016 	blt	r5,r4,27754 <__adddf3+0x86c>
   27594:	01400804 	movi	r5,32
   27598:	290bc83a 	sub	r5,r5,r4
   2759c:	4154983a 	sll	r10,r8,r5
   275a0:	890ed83a 	srl	r7,r17,r4
   275a4:	894a983a 	sll	r5,r17,r5
   275a8:	4108d83a 	srl	r4,r8,r4
   275ac:	51e2b03a 	or	r17,r10,r7
   275b0:	280ac03a 	cmpne	r5,r5,zero
   275b4:	8962b03a 	or	r17,r17,r5
   275b8:	89a3883a 	add	r17,r17,r6
   275bc:	2253883a 	add	r9,r4,r9
   275c0:	898d803a 	cmpltu	r6,r17,r6
   275c4:	3251883a 	add	r8,r6,r9
   275c8:	1021883a 	mov	r16,r2
   275cc:	003ee506 	br	27164 <__adddf3+0x27c>
   275d0:	4984b03a 	or	r2,r9,r6
   275d4:	103e6326 	beq	r2,zero,26f64 <__adddf3+0x7c>
   275d8:	8987c83a 	sub	r3,r17,r6
   275dc:	88c9803a 	cmpltu	r4,r17,r3
   275e0:	4245c83a 	sub	r2,r8,r9
   275e4:	1105c83a 	sub	r2,r2,r4
   275e8:	1100202c 	andhi	r4,r2,128
   275ec:	203ebb26 	beq	r4,zero,270dc <__adddf3+0x1f4>
   275f0:	3463c83a 	sub	r17,r6,r17
   275f4:	4a07c83a 	sub	r3,r9,r8
   275f8:	344d803a 	cmpltu	r6,r6,r17
   275fc:	1991c83a 	sub	r8,r3,r6
   27600:	3825883a 	mov	r18,r7
   27604:	003e5706 	br	26f64 <__adddf3+0x7c>
   27608:	4984b03a 	or	r2,r9,r6
   2760c:	10002e26 	beq	r2,zero,276c8 <__adddf3+0x7e0>
   27610:	4004d0fa 	srli	r2,r8,3
   27614:	8822d0fa 	srli	r17,r17,3
   27618:	4010977a 	slli	r8,r8,29
   2761c:	10c0022c 	andhi	r3,r2,8
   27620:	4462b03a 	or	r17,r8,r17
   27624:	18000826 	beq	r3,zero,27648 <__adddf3+0x760>
   27628:	4808d0fa 	srli	r4,r9,3
   2762c:	20c0022c 	andhi	r3,r4,8
   27630:	1800051e 	bne	r3,zero,27648 <__adddf3+0x760>
   27634:	300cd0fa 	srli	r6,r6,3
   27638:	4806977a 	slli	r3,r9,29
   2763c:	2005883a 	mov	r2,r4
   27640:	3825883a 	mov	r18,r7
   27644:	19a2b03a 	or	r17,r3,r6
   27648:	8810d77a 	srli	r8,r17,29
   2764c:	100490fa 	slli	r2,r2,3
   27650:	882290fa 	slli	r17,r17,3
   27654:	0401ffc4 	movi	r16,2047
   27658:	4090b03a 	or	r8,r8,r2
   2765c:	003e4106 	br	26f64 <__adddf3+0x7c>
   27660:	0141ffc4 	movi	r5,2047
   27664:	117fc71e 	bne	r2,r5,27584 <__adddf3+0x69c>
   27668:	4811883a 	mov	r8,r9
   2766c:	3023883a 	mov	r17,r6
   27670:	1021883a 	mov	r16,r2
   27674:	003e3b06 	br	26f64 <__adddf3+0x7c>
   27678:	10002f26 	beq	r2,zero,27738 <__adddf3+0x850>
   2767c:	4984b03a 	or	r2,r9,r6
   27680:	10001126 	beq	r2,zero,276c8 <__adddf3+0x7e0>
   27684:	4004d0fa 	srli	r2,r8,3
   27688:	8822d0fa 	srli	r17,r17,3
   2768c:	4010977a 	slli	r8,r8,29
   27690:	10c0022c 	andhi	r3,r2,8
   27694:	4462b03a 	or	r17,r8,r17
   27698:	183feb26 	beq	r3,zero,27648 <__adddf3+0x760>
   2769c:	4808d0fa 	srli	r4,r9,3
   276a0:	20c0022c 	andhi	r3,r4,8
   276a4:	183fe81e 	bne	r3,zero,27648 <__adddf3+0x760>
   276a8:	300cd0fa 	srli	r6,r6,3
   276ac:	4806977a 	slli	r3,r9,29
   276b0:	2005883a 	mov	r2,r4
   276b4:	19a2b03a 	or	r17,r3,r6
   276b8:	003fe306 	br	27648 <__adddf3+0x760>
   276bc:	0011883a 	mov	r8,zero
   276c0:	0005883a 	mov	r2,zero
   276c4:	003e3f06 	br	26fc4 <__adddf3+0xdc>
   276c8:	0401ffc4 	movi	r16,2047
   276cc:	003e2506 	br	26f64 <__adddf3+0x7c>
   276d0:	0013883a 	mov	r9,zero
   276d4:	003f8406 	br	274e8 <__adddf3+0x600>
   276d8:	0005883a 	mov	r2,zero
   276dc:	0007883a 	mov	r3,zero
   276e0:	003e8906 	br	27108 <__adddf3+0x220>
   276e4:	197ff804 	addi	r5,r3,-32
   276e8:	01000804 	movi	r4,32
   276ec:	414ad83a 	srl	r5,r8,r5
   276f0:	19002426 	beq	r3,r4,27784 <__adddf3+0x89c>
   276f4:	01001004 	movi	r4,64
   276f8:	20c7c83a 	sub	r3,r4,r3
   276fc:	40c6983a 	sll	r3,r8,r3
   27700:	1c46b03a 	or	r3,r3,r17
   27704:	1806c03a 	cmpne	r3,r3,zero
   27708:	28e2b03a 	or	r17,r5,r3
   2770c:	0007883a 	mov	r3,zero
   27710:	003f2306 	br	273a0 <__adddf3+0x4b8>
   27714:	0007883a 	mov	r3,zero
   27718:	5811883a 	mov	r8,r11
   2771c:	00bfffc4 	movi	r2,-1
   27720:	0401ffc4 	movi	r16,2047
   27724:	003e7806 	br	27108 <__adddf3+0x220>
   27728:	4462b03a 	or	r17,r8,r17
   2772c:	8822c03a 	cmpne	r17,r17,zero
   27730:	0009883a 	mov	r4,zero
   27734:	003fa006 	br	275b8 <__adddf3+0x6d0>
   27738:	4811883a 	mov	r8,r9
   2773c:	3023883a 	mov	r17,r6
   27740:	0401ffc4 	movi	r16,2047
   27744:	003e0706 	br	26f64 <__adddf3+0x7c>
   27748:	4811883a 	mov	r8,r9
   2774c:	3023883a 	mov	r17,r6
   27750:	003e0406 	br	26f64 <__adddf3+0x7c>
   27754:	21fff804 	addi	r7,r4,-32
   27758:	01400804 	movi	r5,32
   2775c:	41ced83a 	srl	r7,r8,r7
   27760:	21400a26 	beq	r4,r5,2778c <__adddf3+0x8a4>
   27764:	01401004 	movi	r5,64
   27768:	2909c83a 	sub	r4,r5,r4
   2776c:	4108983a 	sll	r4,r8,r4
   27770:	2448b03a 	or	r4,r4,r17
   27774:	2008c03a 	cmpne	r4,r4,zero
   27778:	3922b03a 	or	r17,r7,r4
   2777c:	0009883a 	mov	r4,zero
   27780:	003f8d06 	br	275b8 <__adddf3+0x6d0>
   27784:	0007883a 	mov	r3,zero
   27788:	003fdd06 	br	27700 <__adddf3+0x818>
   2778c:	0009883a 	mov	r4,zero
   27790:	003ff706 	br	27770 <__adddf3+0x888>

00027794 <__divdf3>:
   27794:	defff204 	addi	sp,sp,-56
   27798:	dd400915 	stw	r21,36(sp)
   2779c:	282ad53a 	srli	r21,r5,20
   277a0:	dd000815 	stw	r20,32(sp)
   277a4:	2828d7fa 	srli	r20,r5,31
   277a8:	dc000415 	stw	r16,16(sp)
   277ac:	04000434 	movhi	r16,16
   277b0:	df000c15 	stw	fp,48(sp)
   277b4:	843fffc4 	addi	r16,r16,-1
   277b8:	dfc00d15 	stw	ra,52(sp)
   277bc:	ddc00b15 	stw	r23,44(sp)
   277c0:	dd800a15 	stw	r22,40(sp)
   277c4:	dcc00715 	stw	r19,28(sp)
   277c8:	dc800615 	stw	r18,24(sp)
   277cc:	dc400515 	stw	r17,20(sp)
   277d0:	ad41ffcc 	andi	r21,r21,2047
   277d4:	2c20703a 	and	r16,r5,r16
   277d8:	a7003fcc 	andi	fp,r20,255
   277dc:	a8006126 	beq	r21,zero,27964 <__divdf3+0x1d0>
   277e0:	0081ffc4 	movi	r2,2047
   277e4:	2025883a 	mov	r18,r4
   277e8:	a8803726 	beq	r21,r2,278c8 <__divdf3+0x134>
   277ec:	80800434 	orhi	r2,r16,16
   277f0:	100490fa 	slli	r2,r2,3
   277f4:	2020d77a 	srli	r16,r4,29
   277f8:	202490fa 	slli	r18,r4,3
   277fc:	ad7f0044 	addi	r21,r21,-1023
   27800:	80a0b03a 	or	r16,r16,r2
   27804:	0027883a 	mov	r19,zero
   27808:	0013883a 	mov	r9,zero
   2780c:	3804d53a 	srli	r2,r7,20
   27810:	382cd7fa 	srli	r22,r7,31
   27814:	04400434 	movhi	r17,16
   27818:	8c7fffc4 	addi	r17,r17,-1
   2781c:	1081ffcc 	andi	r2,r2,2047
   27820:	3011883a 	mov	r8,r6
   27824:	3c62703a 	and	r17,r7,r17
   27828:	b5c03fcc 	andi	r23,r22,255
   2782c:	10006c26 	beq	r2,zero,279e0 <__divdf3+0x24c>
   27830:	00c1ffc4 	movi	r3,2047
   27834:	10c06426 	beq	r2,r3,279c8 <__divdf3+0x234>
   27838:	88c00434 	orhi	r3,r17,16
   2783c:	180690fa 	slli	r3,r3,3
   27840:	3022d77a 	srli	r17,r6,29
   27844:	301090fa 	slli	r8,r6,3
   27848:	10bf0044 	addi	r2,r2,-1023
   2784c:	88e2b03a 	or	r17,r17,r3
   27850:	000f883a 	mov	r7,zero
   27854:	a58cf03a 	xor	r6,r20,r22
   27858:	3cc8b03a 	or	r4,r7,r19
   2785c:	a8abc83a 	sub	r21,r21,r2
   27860:	008003c4 	movi	r2,15
   27864:	3007883a 	mov	r3,r6
   27868:	34c03fcc 	andi	r19,r6,255
   2786c:	11009036 	bltu	r2,r4,27ab0 <__divdf3+0x31c>
   27870:	200890ba 	slli	r4,r4,2
   27874:	008000b4 	movhi	r2,2
   27878:	109e2204 	addi	r2,r2,30856
   2787c:	2089883a 	add	r4,r4,r2
   27880:	20800017 	ldw	r2,0(r4)
   27884:	1000683a 	jmp	r2
   27888:	00027ab0 	cmpltui	zero,zero,2538
   2788c:	00027900 	call	2790 <__alt_mem_onchip_memory_nios2_FFT-0x1d870>
   27890:	00027aa0 	cmpeqi	zero,zero,2538
   27894:	000278f4 	movhi	zero,2531
   27898:	00027aa0 	cmpeqi	zero,zero,2538
   2789c:	00027a74 	movhi	zero,2537
   278a0:	00027aa0 	cmpeqi	zero,zero,2538
   278a4:	000278f4 	movhi	zero,2531
   278a8:	00027900 	call	2790 <__alt_mem_onchip_memory_nios2_FFT-0x1d870>
   278ac:	00027900 	call	2790 <__alt_mem_onchip_memory_nios2_FFT-0x1d870>
   278b0:	00027a74 	movhi	zero,2537
   278b4:	000278f4 	movhi	zero,2531
   278b8:	000278e4 	muli	zero,zero,2531
   278bc:	000278e4 	muli	zero,zero,2531
   278c0:	000278e4 	muli	zero,zero,2531
   278c4:	00027d94 	movui	zero,2550
   278c8:	2404b03a 	or	r2,r4,r16
   278cc:	1000661e 	bne	r2,zero,27a68 <__divdf3+0x2d4>
   278d0:	04c00204 	movi	r19,8
   278d4:	0021883a 	mov	r16,zero
   278d8:	0025883a 	mov	r18,zero
   278dc:	02400084 	movi	r9,2
   278e0:	003fca06 	br	2780c <__divdf3+0x78>
   278e4:	8023883a 	mov	r17,r16
   278e8:	9011883a 	mov	r8,r18
   278ec:	e02f883a 	mov	r23,fp
   278f0:	480f883a 	mov	r7,r9
   278f4:	00800084 	movi	r2,2
   278f8:	3881311e 	bne	r7,r2,27dc0 <__divdf3+0x62c>
   278fc:	b827883a 	mov	r19,r23
   27900:	98c0004c 	andi	r3,r19,1
   27904:	0081ffc4 	movi	r2,2047
   27908:	000b883a 	mov	r5,zero
   2790c:	0025883a 	mov	r18,zero
   27910:	1004953a 	slli	r2,r2,20
   27914:	18c03fcc 	andi	r3,r3,255
   27918:	04400434 	movhi	r17,16
   2791c:	8c7fffc4 	addi	r17,r17,-1
   27920:	180697fa 	slli	r3,r3,31
   27924:	2c4a703a 	and	r5,r5,r17
   27928:	288ab03a 	or	r5,r5,r2
   2792c:	28c6b03a 	or	r3,r5,r3
   27930:	9005883a 	mov	r2,r18
   27934:	dfc00d17 	ldw	ra,52(sp)
   27938:	df000c17 	ldw	fp,48(sp)
   2793c:	ddc00b17 	ldw	r23,44(sp)
   27940:	dd800a17 	ldw	r22,40(sp)
   27944:	dd400917 	ldw	r21,36(sp)
   27948:	dd000817 	ldw	r20,32(sp)
   2794c:	dcc00717 	ldw	r19,28(sp)
   27950:	dc800617 	ldw	r18,24(sp)
   27954:	dc400517 	ldw	r17,20(sp)
   27958:	dc000417 	ldw	r16,16(sp)
   2795c:	dec00e04 	addi	sp,sp,56
   27960:	f800283a 	ret
   27964:	2404b03a 	or	r2,r4,r16
   27968:	2027883a 	mov	r19,r4
   2796c:	10003926 	beq	r2,zero,27a54 <__divdf3+0x2c0>
   27970:	80012e26 	beq	r16,zero,27e2c <__divdf3+0x698>
   27974:	8009883a 	mov	r4,r16
   27978:	d9800315 	stw	r6,12(sp)
   2797c:	d9c00215 	stw	r7,8(sp)
   27980:	00297a40 	call	297a4 <__clzsi2>
   27984:	d9800317 	ldw	r6,12(sp)
   27988:	d9c00217 	ldw	r7,8(sp)
   2798c:	113ffd44 	addi	r4,r2,-11
   27990:	00c00704 	movi	r3,28
   27994:	19012116 	blt	r3,r4,27e1c <__divdf3+0x688>
   27998:	00c00744 	movi	r3,29
   2799c:	147ffe04 	addi	r17,r2,-8
   279a0:	1907c83a 	sub	r3,r3,r4
   279a4:	8460983a 	sll	r16,r16,r17
   279a8:	98c6d83a 	srl	r3,r19,r3
   279ac:	9c64983a 	sll	r18,r19,r17
   279b0:	1c20b03a 	or	r16,r3,r16
   279b4:	1080fcc4 	addi	r2,r2,1011
   279b8:	00abc83a 	sub	r21,zero,r2
   279bc:	0027883a 	mov	r19,zero
   279c0:	0013883a 	mov	r9,zero
   279c4:	003f9106 	br	2780c <__divdf3+0x78>
   279c8:	3446b03a 	or	r3,r6,r17
   279cc:	18001f1e 	bne	r3,zero,27a4c <__divdf3+0x2b8>
   279d0:	0023883a 	mov	r17,zero
   279d4:	0011883a 	mov	r8,zero
   279d8:	01c00084 	movi	r7,2
   279dc:	003f9d06 	br	27854 <__divdf3+0xc0>
   279e0:	3446b03a 	or	r3,r6,r17
   279e4:	18001526 	beq	r3,zero,27a3c <__divdf3+0x2a8>
   279e8:	88011b26 	beq	r17,zero,27e58 <__divdf3+0x6c4>
   279ec:	8809883a 	mov	r4,r17
   279f0:	d9800315 	stw	r6,12(sp)
   279f4:	da400115 	stw	r9,4(sp)
   279f8:	00297a40 	call	297a4 <__clzsi2>
   279fc:	d9800317 	ldw	r6,12(sp)
   27a00:	da400117 	ldw	r9,4(sp)
   27a04:	113ffd44 	addi	r4,r2,-11
   27a08:	00c00704 	movi	r3,28
   27a0c:	19010e16 	blt	r3,r4,27e48 <__divdf3+0x6b4>
   27a10:	00c00744 	movi	r3,29
   27a14:	123ffe04 	addi	r8,r2,-8
   27a18:	1907c83a 	sub	r3,r3,r4
   27a1c:	8a22983a 	sll	r17,r17,r8
   27a20:	30c6d83a 	srl	r3,r6,r3
   27a24:	3210983a 	sll	r8,r6,r8
   27a28:	1c62b03a 	or	r17,r3,r17
   27a2c:	1080fcc4 	addi	r2,r2,1011
   27a30:	0085c83a 	sub	r2,zero,r2
   27a34:	000f883a 	mov	r7,zero
   27a38:	003f8606 	br	27854 <__divdf3+0xc0>
   27a3c:	0023883a 	mov	r17,zero
   27a40:	0011883a 	mov	r8,zero
   27a44:	01c00044 	movi	r7,1
   27a48:	003f8206 	br	27854 <__divdf3+0xc0>
   27a4c:	01c000c4 	movi	r7,3
   27a50:	003f8006 	br	27854 <__divdf3+0xc0>
   27a54:	04c00104 	movi	r19,4
   27a58:	0021883a 	mov	r16,zero
   27a5c:	0025883a 	mov	r18,zero
   27a60:	02400044 	movi	r9,1
   27a64:	003f6906 	br	2780c <__divdf3+0x78>
   27a68:	04c00304 	movi	r19,12
   27a6c:	024000c4 	movi	r9,3
   27a70:	003f6606 	br	2780c <__divdf3+0x78>
   27a74:	01400434 	movhi	r5,16
   27a78:	0007883a 	mov	r3,zero
   27a7c:	297fffc4 	addi	r5,r5,-1
   27a80:	04bfffc4 	movi	r18,-1
   27a84:	0081ffc4 	movi	r2,2047
   27a88:	003fa106 	br	27910 <__divdf3+0x17c>
   27a8c:	00c00044 	movi	r3,1
   27a90:	1887c83a 	sub	r3,r3,r2
   27a94:	01000e04 	movi	r4,56
   27a98:	20c1210e 	bge	r4,r3,27f20 <__divdf3+0x78c>
   27a9c:	98c0004c 	andi	r3,r19,1
   27aa0:	0005883a 	mov	r2,zero
   27aa4:	000b883a 	mov	r5,zero
   27aa8:	0025883a 	mov	r18,zero
   27aac:	003f9806 	br	27910 <__divdf3+0x17c>
   27ab0:	8c00fd36 	bltu	r17,r16,27ea8 <__divdf3+0x714>
   27ab4:	8440fb26 	beq	r16,r17,27ea4 <__divdf3+0x710>
   27ab8:	8007883a 	mov	r3,r16
   27abc:	ad7fffc4 	addi	r21,r21,-1
   27ac0:	0021883a 	mov	r16,zero
   27ac4:	4004d63a 	srli	r2,r8,24
   27ac8:	8822923a 	slli	r17,r17,8
   27acc:	1809883a 	mov	r4,r3
   27ad0:	402c923a 	slli	r22,r8,8
   27ad4:	88b8b03a 	or	fp,r17,r2
   27ad8:	e028d43a 	srli	r20,fp,16
   27adc:	d8c00015 	stw	r3,0(sp)
   27ae0:	e5ffffcc 	andi	r23,fp,65535
   27ae4:	a00b883a 	mov	r5,r20
   27ae8:	0025ab00 	call	25ab0 <__udivsi3>
   27aec:	d8c00017 	ldw	r3,0(sp)
   27af0:	a00b883a 	mov	r5,r20
   27af4:	d8800315 	stw	r2,12(sp)
   27af8:	1809883a 	mov	r4,r3
   27afc:	0025b140 	call	25b14 <__umodsi3>
   27b00:	d9800317 	ldw	r6,12(sp)
   27b04:	1006943a 	slli	r3,r2,16
   27b08:	9004d43a 	srli	r2,r18,16
   27b0c:	b9a3383a 	mul	r17,r23,r6
   27b10:	10c4b03a 	or	r2,r2,r3
   27b14:	1440062e 	bgeu	r2,r17,27b30 <__divdf3+0x39c>
   27b18:	1705883a 	add	r2,r2,fp
   27b1c:	30ffffc4 	addi	r3,r6,-1
   27b20:	1700ee36 	bltu	r2,fp,27edc <__divdf3+0x748>
   27b24:	1440ed2e 	bgeu	r2,r17,27edc <__divdf3+0x748>
   27b28:	31bfff84 	addi	r6,r6,-2
   27b2c:	1705883a 	add	r2,r2,fp
   27b30:	1463c83a 	sub	r17,r2,r17
   27b34:	a00b883a 	mov	r5,r20
   27b38:	8809883a 	mov	r4,r17
   27b3c:	d9800315 	stw	r6,12(sp)
   27b40:	0025ab00 	call	25ab0 <__udivsi3>
   27b44:	a00b883a 	mov	r5,r20
   27b48:	8809883a 	mov	r4,r17
   27b4c:	d8800215 	stw	r2,8(sp)
   27b50:	0025b140 	call	25b14 <__umodsi3>
   27b54:	d9c00217 	ldw	r7,8(sp)
   27b58:	1004943a 	slli	r2,r2,16
   27b5c:	94bfffcc 	andi	r18,r18,65535
   27b60:	b9d1383a 	mul	r8,r23,r7
   27b64:	90a4b03a 	or	r18,r18,r2
   27b68:	d9800317 	ldw	r6,12(sp)
   27b6c:	9200062e 	bgeu	r18,r8,27b88 <__divdf3+0x3f4>
   27b70:	9725883a 	add	r18,r18,fp
   27b74:	38bfffc4 	addi	r2,r7,-1
   27b78:	9700d636 	bltu	r18,fp,27ed4 <__divdf3+0x740>
   27b7c:	9200d52e 	bgeu	r18,r8,27ed4 <__divdf3+0x740>
   27b80:	39ffff84 	addi	r7,r7,-2
   27b84:	9725883a 	add	r18,r18,fp
   27b88:	3004943a 	slli	r2,r6,16
   27b8c:	b012d43a 	srli	r9,r22,16
   27b90:	b1bfffcc 	andi	r6,r22,65535
   27b94:	11e2b03a 	or	r17,r2,r7
   27b98:	8806d43a 	srli	r3,r17,16
   27b9c:	893fffcc 	andi	r4,r17,65535
   27ba0:	218b383a 	mul	r5,r4,r6
   27ba4:	30c5383a 	mul	r2,r6,r3
   27ba8:	2249383a 	mul	r4,r4,r9
   27bac:	280ed43a 	srli	r7,r5,16
   27bb0:	9225c83a 	sub	r18,r18,r8
   27bb4:	2089883a 	add	r4,r4,r2
   27bb8:	3909883a 	add	r4,r7,r4
   27bbc:	1a47383a 	mul	r3,r3,r9
   27bc0:	2080022e 	bgeu	r4,r2,27bcc <__divdf3+0x438>
   27bc4:	00800074 	movhi	r2,1
   27bc8:	1887883a 	add	r3,r3,r2
   27bcc:	2004d43a 	srli	r2,r4,16
   27bd0:	2008943a 	slli	r4,r4,16
   27bd4:	297fffcc 	andi	r5,r5,65535
   27bd8:	10c7883a 	add	r3,r2,r3
   27bdc:	2149883a 	add	r4,r4,r5
   27be0:	90c0a536 	bltu	r18,r3,27e78 <__divdf3+0x6e4>
   27be4:	90c0bf26 	beq	r18,r3,27ee4 <__divdf3+0x750>
   27be8:	90c7c83a 	sub	r3,r18,r3
   27bec:	810fc83a 	sub	r7,r16,r4
   27bf0:	81e5803a 	cmpltu	r18,r16,r7
   27bf4:	1ca5c83a 	sub	r18,r3,r18
   27bf8:	e480c126 	beq	fp,r18,27f00 <__divdf3+0x76c>
   27bfc:	a00b883a 	mov	r5,r20
   27c00:	9009883a 	mov	r4,r18
   27c04:	d9800315 	stw	r6,12(sp)
   27c08:	d9c00215 	stw	r7,8(sp)
   27c0c:	da400115 	stw	r9,4(sp)
   27c10:	0025ab00 	call	25ab0 <__udivsi3>
   27c14:	a00b883a 	mov	r5,r20
   27c18:	9009883a 	mov	r4,r18
   27c1c:	d8800015 	stw	r2,0(sp)
   27c20:	0025b140 	call	25b14 <__umodsi3>
   27c24:	d9c00217 	ldw	r7,8(sp)
   27c28:	da000017 	ldw	r8,0(sp)
   27c2c:	1006943a 	slli	r3,r2,16
   27c30:	3804d43a 	srli	r2,r7,16
   27c34:	ba21383a 	mul	r16,r23,r8
   27c38:	d9800317 	ldw	r6,12(sp)
   27c3c:	10c4b03a 	or	r2,r2,r3
   27c40:	da400117 	ldw	r9,4(sp)
   27c44:	1400062e 	bgeu	r2,r16,27c60 <__divdf3+0x4cc>
   27c48:	1705883a 	add	r2,r2,fp
   27c4c:	40ffffc4 	addi	r3,r8,-1
   27c50:	1700ad36 	bltu	r2,fp,27f08 <__divdf3+0x774>
   27c54:	1400ac2e 	bgeu	r2,r16,27f08 <__divdf3+0x774>
   27c58:	423fff84 	addi	r8,r8,-2
   27c5c:	1705883a 	add	r2,r2,fp
   27c60:	1421c83a 	sub	r16,r2,r16
   27c64:	a00b883a 	mov	r5,r20
   27c68:	8009883a 	mov	r4,r16
   27c6c:	d9800315 	stw	r6,12(sp)
   27c70:	d9c00215 	stw	r7,8(sp)
   27c74:	da000015 	stw	r8,0(sp)
   27c78:	da400115 	stw	r9,4(sp)
   27c7c:	0025ab00 	call	25ab0 <__udivsi3>
   27c80:	8009883a 	mov	r4,r16
   27c84:	a00b883a 	mov	r5,r20
   27c88:	1025883a 	mov	r18,r2
   27c8c:	0025b140 	call	25b14 <__umodsi3>
   27c90:	d9c00217 	ldw	r7,8(sp)
   27c94:	1004943a 	slli	r2,r2,16
   27c98:	bcaf383a 	mul	r23,r23,r18
   27c9c:	393fffcc 	andi	r4,r7,65535
   27ca0:	2088b03a 	or	r4,r4,r2
   27ca4:	d9800317 	ldw	r6,12(sp)
   27ca8:	da000017 	ldw	r8,0(sp)
   27cac:	da400117 	ldw	r9,4(sp)
   27cb0:	25c0062e 	bgeu	r4,r23,27ccc <__divdf3+0x538>
   27cb4:	2709883a 	add	r4,r4,fp
   27cb8:	90bfffc4 	addi	r2,r18,-1
   27cbc:	27009436 	bltu	r4,fp,27f10 <__divdf3+0x77c>
   27cc0:	25c0932e 	bgeu	r4,r23,27f10 <__divdf3+0x77c>
   27cc4:	94bfff84 	addi	r18,r18,-2
   27cc8:	2709883a 	add	r4,r4,fp
   27ccc:	4004943a 	slli	r2,r8,16
   27cd0:	25efc83a 	sub	r23,r4,r23
   27cd4:	1490b03a 	or	r8,r2,r18
   27cd8:	4008d43a 	srli	r4,r8,16
   27cdc:	40ffffcc 	andi	r3,r8,65535
   27ce0:	30c5383a 	mul	r2,r6,r3
   27ce4:	1a47383a 	mul	r3,r3,r9
   27ce8:	310d383a 	mul	r6,r6,r4
   27cec:	100ad43a 	srli	r5,r2,16
   27cf0:	4913383a 	mul	r9,r9,r4
   27cf4:	1987883a 	add	r3,r3,r6
   27cf8:	28c7883a 	add	r3,r5,r3
   27cfc:	1980022e 	bgeu	r3,r6,27d08 <__divdf3+0x574>
   27d00:	01000074 	movhi	r4,1
   27d04:	4913883a 	add	r9,r9,r4
   27d08:	1808d43a 	srli	r4,r3,16
   27d0c:	1806943a 	slli	r3,r3,16
   27d10:	10bfffcc 	andi	r2,r2,65535
   27d14:	2253883a 	add	r9,r4,r9
   27d18:	1887883a 	add	r3,r3,r2
   27d1c:	ba403836 	bltu	r23,r9,27e00 <__divdf3+0x66c>
   27d20:	ba403626 	beq	r23,r9,27dfc <__divdf3+0x668>
   27d24:	42000054 	ori	r8,r8,1
   27d28:	a880ffc4 	addi	r2,r21,1023
   27d2c:	00bf570e 	bge	zero,r2,27a8c <__divdf3+0x2f8>
   27d30:	40c001cc 	andi	r3,r8,7
   27d34:	18000726 	beq	r3,zero,27d54 <__divdf3+0x5c0>
   27d38:	40c003cc 	andi	r3,r8,15
   27d3c:	01000104 	movi	r4,4
   27d40:	19000426 	beq	r3,r4,27d54 <__divdf3+0x5c0>
   27d44:	4107883a 	add	r3,r8,r4
   27d48:	1a11803a 	cmpltu	r8,r3,r8
   27d4c:	8a23883a 	add	r17,r17,r8
   27d50:	1811883a 	mov	r8,r3
   27d54:	88c0402c 	andhi	r3,r17,256
   27d58:	18000426 	beq	r3,zero,27d6c <__divdf3+0x5d8>
   27d5c:	00ffc034 	movhi	r3,65280
   27d60:	18ffffc4 	addi	r3,r3,-1
   27d64:	a8810004 	addi	r2,r21,1024
   27d68:	88e2703a 	and	r17,r17,r3
   27d6c:	00c1ff84 	movi	r3,2046
   27d70:	18bee316 	blt	r3,r2,27900 <__divdf3+0x16c>
   27d74:	8824977a 	slli	r18,r17,29
   27d78:	4010d0fa 	srli	r8,r8,3
   27d7c:	8822927a 	slli	r17,r17,9
   27d80:	1081ffcc 	andi	r2,r2,2047
   27d84:	9224b03a 	or	r18,r18,r8
   27d88:	880ad33a 	srli	r5,r17,12
   27d8c:	98c0004c 	andi	r3,r19,1
   27d90:	003edf06 	br	27910 <__divdf3+0x17c>
   27d94:	8080022c 	andhi	r2,r16,8
   27d98:	10001226 	beq	r2,zero,27de4 <__divdf3+0x650>
   27d9c:	8880022c 	andhi	r2,r17,8
   27da0:	1000101e 	bne	r2,zero,27de4 <__divdf3+0x650>
   27da4:	00800434 	movhi	r2,16
   27da8:	89400234 	orhi	r5,r17,8
   27dac:	10bfffc4 	addi	r2,r2,-1
   27db0:	b007883a 	mov	r3,r22
   27db4:	288a703a 	and	r5,r5,r2
   27db8:	4025883a 	mov	r18,r8
   27dbc:	003f3106 	br	27a84 <__divdf3+0x2f0>
   27dc0:	008000c4 	movi	r2,3
   27dc4:	3880a626 	beq	r7,r2,28060 <__divdf3+0x8cc>
   27dc8:	00800044 	movi	r2,1
   27dcc:	3880521e 	bne	r7,r2,27f18 <__divdf3+0x784>
   27dd0:	b807883a 	mov	r3,r23
   27dd4:	0005883a 	mov	r2,zero
   27dd8:	000b883a 	mov	r5,zero
   27ddc:	0025883a 	mov	r18,zero
   27de0:	003ecb06 	br	27910 <__divdf3+0x17c>
   27de4:	00800434 	movhi	r2,16
   27de8:	81400234 	orhi	r5,r16,8
   27dec:	10bfffc4 	addi	r2,r2,-1
   27df0:	a007883a 	mov	r3,r20
   27df4:	288a703a 	and	r5,r5,r2
   27df8:	003f2206 	br	27a84 <__divdf3+0x2f0>
   27dfc:	183fca26 	beq	r3,zero,27d28 <__divdf3+0x594>
   27e00:	e5ef883a 	add	r23,fp,r23
   27e04:	40bfffc4 	addi	r2,r8,-1
   27e08:	bf00392e 	bgeu	r23,fp,27ef0 <__divdf3+0x75c>
   27e0c:	1011883a 	mov	r8,r2
   27e10:	ba7fc41e 	bne	r23,r9,27d24 <__divdf3+0x590>
   27e14:	b0ffc31e 	bne	r22,r3,27d24 <__divdf3+0x590>
   27e18:	003fc306 	br	27d28 <__divdf3+0x594>
   27e1c:	143ff604 	addi	r16,r2,-40
   27e20:	9c20983a 	sll	r16,r19,r16
   27e24:	0025883a 	mov	r18,zero
   27e28:	003ee206 	br	279b4 <__divdf3+0x220>
   27e2c:	d9800315 	stw	r6,12(sp)
   27e30:	d9c00215 	stw	r7,8(sp)
   27e34:	00297a40 	call	297a4 <__clzsi2>
   27e38:	10800804 	addi	r2,r2,32
   27e3c:	d9c00217 	ldw	r7,8(sp)
   27e40:	d9800317 	ldw	r6,12(sp)
   27e44:	003ed106 	br	2798c <__divdf3+0x1f8>
   27e48:	147ff604 	addi	r17,r2,-40
   27e4c:	3462983a 	sll	r17,r6,r17
   27e50:	0011883a 	mov	r8,zero
   27e54:	003ef506 	br	27a2c <__divdf3+0x298>
   27e58:	3009883a 	mov	r4,r6
   27e5c:	d9800315 	stw	r6,12(sp)
   27e60:	da400115 	stw	r9,4(sp)
   27e64:	00297a40 	call	297a4 <__clzsi2>
   27e68:	10800804 	addi	r2,r2,32
   27e6c:	da400117 	ldw	r9,4(sp)
   27e70:	d9800317 	ldw	r6,12(sp)
   27e74:	003ee306 	br	27a04 <__divdf3+0x270>
   27e78:	85a1883a 	add	r16,r16,r22
   27e7c:	8585803a 	cmpltu	r2,r16,r22
   27e80:	1705883a 	add	r2,r2,fp
   27e84:	14a5883a 	add	r18,r2,r18
   27e88:	88bfffc4 	addi	r2,r17,-1
   27e8c:	e4800c2e 	bgeu	fp,r18,27ec0 <__divdf3+0x72c>
   27e90:	90c03e36 	bltu	r18,r3,27f8c <__divdf3+0x7f8>
   27e94:	1c806926 	beq	r3,r18,2803c <__divdf3+0x8a8>
   27e98:	90c7c83a 	sub	r3,r18,r3
   27e9c:	1023883a 	mov	r17,r2
   27ea0:	003f5206 	br	27bec <__divdf3+0x458>
   27ea4:	923f0436 	bltu	r18,r8,27ab8 <__divdf3+0x324>
   27ea8:	800897fa 	slli	r4,r16,31
   27eac:	9004d07a 	srli	r2,r18,1
   27eb0:	8006d07a 	srli	r3,r16,1
   27eb4:	902097fa 	slli	r16,r18,31
   27eb8:	20a4b03a 	or	r18,r4,r2
   27ebc:	003f0106 	br	27ac4 <__divdf3+0x330>
   27ec0:	e4bff51e 	bne	fp,r18,27e98 <__divdf3+0x704>
   27ec4:	85bff22e 	bgeu	r16,r22,27e90 <__divdf3+0x6fc>
   27ec8:	e0c7c83a 	sub	r3,fp,r3
   27ecc:	1023883a 	mov	r17,r2
   27ed0:	003f4606 	br	27bec <__divdf3+0x458>
   27ed4:	100f883a 	mov	r7,r2
   27ed8:	003f2b06 	br	27b88 <__divdf3+0x3f4>
   27edc:	180d883a 	mov	r6,r3
   27ee0:	003f1306 	br	27b30 <__divdf3+0x39c>
   27ee4:	813fe436 	bltu	r16,r4,27e78 <__divdf3+0x6e4>
   27ee8:	0007883a 	mov	r3,zero
   27eec:	003f3f06 	br	27bec <__divdf3+0x458>
   27ef0:	ba402c36 	bltu	r23,r9,27fa4 <__divdf3+0x810>
   27ef4:	4dc05426 	beq	r9,r23,28048 <__divdf3+0x8b4>
   27ef8:	1011883a 	mov	r8,r2
   27efc:	003f8906 	br	27d24 <__divdf3+0x590>
   27f00:	023fffc4 	movi	r8,-1
   27f04:	003f8806 	br	27d28 <__divdf3+0x594>
   27f08:	1811883a 	mov	r8,r3
   27f0c:	003f5406 	br	27c60 <__divdf3+0x4cc>
   27f10:	1025883a 	mov	r18,r2
   27f14:	003f6d06 	br	27ccc <__divdf3+0x538>
   27f18:	b827883a 	mov	r19,r23
   27f1c:	003f8206 	br	27d28 <__divdf3+0x594>
   27f20:	010007c4 	movi	r4,31
   27f24:	20c02616 	blt	r4,r3,27fc0 <__divdf3+0x82c>
   27f28:	00800804 	movi	r2,32
   27f2c:	10c5c83a 	sub	r2,r2,r3
   27f30:	888a983a 	sll	r5,r17,r2
   27f34:	40c8d83a 	srl	r4,r8,r3
   27f38:	4084983a 	sll	r2,r8,r2
   27f3c:	88e2d83a 	srl	r17,r17,r3
   27f40:	2906b03a 	or	r3,r5,r4
   27f44:	1004c03a 	cmpne	r2,r2,zero
   27f48:	1886b03a 	or	r3,r3,r2
   27f4c:	188001cc 	andi	r2,r3,7
   27f50:	10000726 	beq	r2,zero,27f70 <__divdf3+0x7dc>
   27f54:	188003cc 	andi	r2,r3,15
   27f58:	01000104 	movi	r4,4
   27f5c:	11000426 	beq	r2,r4,27f70 <__divdf3+0x7dc>
   27f60:	1805883a 	mov	r2,r3
   27f64:	10c00104 	addi	r3,r2,4
   27f68:	1885803a 	cmpltu	r2,r3,r2
   27f6c:	88a3883a 	add	r17,r17,r2
   27f70:	8880202c 	andhi	r2,r17,128
   27f74:	10002726 	beq	r2,zero,28014 <__divdf3+0x880>
   27f78:	98c0004c 	andi	r3,r19,1
   27f7c:	00800044 	movi	r2,1
   27f80:	000b883a 	mov	r5,zero
   27f84:	0025883a 	mov	r18,zero
   27f88:	003e6106 	br	27910 <__divdf3+0x17c>
   27f8c:	85a1883a 	add	r16,r16,r22
   27f90:	8585803a 	cmpltu	r2,r16,r22
   27f94:	1705883a 	add	r2,r2,fp
   27f98:	14a5883a 	add	r18,r2,r18
   27f9c:	8c7fff84 	addi	r17,r17,-2
   27fa0:	003f1106 	br	27be8 <__divdf3+0x454>
   27fa4:	b589883a 	add	r4,r22,r22
   27fa8:	25ad803a 	cmpltu	r22,r4,r22
   27fac:	b739883a 	add	fp,r22,fp
   27fb0:	40bfff84 	addi	r2,r8,-2
   27fb4:	bf2f883a 	add	r23,r23,fp
   27fb8:	202d883a 	mov	r22,r4
   27fbc:	003f9306 	br	27e0c <__divdf3+0x678>
   27fc0:	013ff844 	movi	r4,-31
   27fc4:	2085c83a 	sub	r2,r4,r2
   27fc8:	8888d83a 	srl	r4,r17,r2
   27fcc:	00800804 	movi	r2,32
   27fd0:	18802126 	beq	r3,r2,28058 <__divdf3+0x8c4>
   27fd4:	00801004 	movi	r2,64
   27fd8:	10c5c83a 	sub	r2,r2,r3
   27fdc:	8884983a 	sll	r2,r17,r2
   27fe0:	1204b03a 	or	r2,r2,r8
   27fe4:	1004c03a 	cmpne	r2,r2,zero
   27fe8:	2084b03a 	or	r2,r4,r2
   27fec:	144001cc 	andi	r17,r2,7
   27ff0:	88000d1e 	bne	r17,zero,28028 <__divdf3+0x894>
   27ff4:	000b883a 	mov	r5,zero
   27ff8:	1024d0fa 	srli	r18,r2,3
   27ffc:	98c0004c 	andi	r3,r19,1
   28000:	0005883a 	mov	r2,zero
   28004:	9464b03a 	or	r18,r18,r17
   28008:	003e4106 	br	27910 <__divdf3+0x17c>
   2800c:	1007883a 	mov	r3,r2
   28010:	0023883a 	mov	r17,zero
   28014:	880a927a 	slli	r5,r17,9
   28018:	1805883a 	mov	r2,r3
   2801c:	8822977a 	slli	r17,r17,29
   28020:	280ad33a 	srli	r5,r5,12
   28024:	003ff406 	br	27ff8 <__divdf3+0x864>
   28028:	10c003cc 	andi	r3,r2,15
   2802c:	01000104 	movi	r4,4
   28030:	193ff626 	beq	r3,r4,2800c <__divdf3+0x878>
   28034:	0023883a 	mov	r17,zero
   28038:	003fca06 	br	27f64 <__divdf3+0x7d0>
   2803c:	813fd336 	bltu	r16,r4,27f8c <__divdf3+0x7f8>
   28040:	1023883a 	mov	r17,r2
   28044:	003fa806 	br	27ee8 <__divdf3+0x754>
   28048:	b0ffd636 	bltu	r22,r3,27fa4 <__divdf3+0x810>
   2804c:	1011883a 	mov	r8,r2
   28050:	b0ff341e 	bne	r22,r3,27d24 <__divdf3+0x590>
   28054:	003f3406 	br	27d28 <__divdf3+0x594>
   28058:	0005883a 	mov	r2,zero
   2805c:	003fe006 	br	27fe0 <__divdf3+0x84c>
   28060:	00800434 	movhi	r2,16
   28064:	89400234 	orhi	r5,r17,8
   28068:	10bfffc4 	addi	r2,r2,-1
   2806c:	b807883a 	mov	r3,r23
   28070:	288a703a 	and	r5,r5,r2
   28074:	4025883a 	mov	r18,r8
   28078:	003e8206 	br	27a84 <__divdf3+0x2f0>

0002807c <__eqdf2>:
   2807c:	2804d53a 	srli	r2,r5,20
   28080:	3806d53a 	srli	r3,r7,20
   28084:	02000434 	movhi	r8,16
   28088:	423fffc4 	addi	r8,r8,-1
   2808c:	1081ffcc 	andi	r2,r2,2047
   28090:	0281ffc4 	movi	r10,2047
   28094:	2a12703a 	and	r9,r5,r8
   28098:	18c1ffcc 	andi	r3,r3,2047
   2809c:	3a10703a 	and	r8,r7,r8
   280a0:	280ad7fa 	srli	r5,r5,31
   280a4:	380ed7fa 	srli	r7,r7,31
   280a8:	12801026 	beq	r2,r10,280ec <__eqdf2+0x70>
   280ac:	0281ffc4 	movi	r10,2047
   280b0:	1a800a26 	beq	r3,r10,280dc <__eqdf2+0x60>
   280b4:	10c00226 	beq	r2,r3,280c0 <__eqdf2+0x44>
   280b8:	00800044 	movi	r2,1
   280bc:	f800283a 	ret
   280c0:	4a3ffd1e 	bne	r9,r8,280b8 <__eqdf2+0x3c>
   280c4:	21bffc1e 	bne	r4,r6,280b8 <__eqdf2+0x3c>
   280c8:	29c00c26 	beq	r5,r7,280fc <__eqdf2+0x80>
   280cc:	103ffa1e 	bne	r2,zero,280b8 <__eqdf2+0x3c>
   280d0:	2244b03a 	or	r2,r4,r9
   280d4:	1004c03a 	cmpne	r2,r2,zero
   280d8:	f800283a 	ret
   280dc:	3214b03a 	or	r10,r6,r8
   280e0:	503ff426 	beq	r10,zero,280b4 <__eqdf2+0x38>
   280e4:	00800044 	movi	r2,1
   280e8:	f800283a 	ret
   280ec:	2254b03a 	or	r10,r4,r9
   280f0:	503fee26 	beq	r10,zero,280ac <__eqdf2+0x30>
   280f4:	00800044 	movi	r2,1
   280f8:	f800283a 	ret
   280fc:	0005883a 	mov	r2,zero
   28100:	f800283a 	ret

00028104 <__gedf2>:
   28104:	2804d53a 	srli	r2,r5,20
   28108:	3806d53a 	srli	r3,r7,20
   2810c:	02000434 	movhi	r8,16
   28110:	423fffc4 	addi	r8,r8,-1
   28114:	1081ffcc 	andi	r2,r2,2047
   28118:	0241ffc4 	movi	r9,2047
   2811c:	2a14703a 	and	r10,r5,r8
   28120:	18c1ffcc 	andi	r3,r3,2047
   28124:	3a10703a 	and	r8,r7,r8
   28128:	280ad7fa 	srli	r5,r5,31
   2812c:	380ed7fa 	srli	r7,r7,31
   28130:	12401d26 	beq	r2,r9,281a8 <__gedf2+0xa4>
   28134:	0241ffc4 	movi	r9,2047
   28138:	1a401226 	beq	r3,r9,28184 <__gedf2+0x80>
   2813c:	1000081e 	bne	r2,zero,28160 <__gedf2+0x5c>
   28140:	2296b03a 	or	r11,r4,r10
   28144:	5813003a 	cmpeq	r9,r11,zero
   28148:	1800091e 	bne	r3,zero,28170 <__gedf2+0x6c>
   2814c:	3218b03a 	or	r12,r6,r8
   28150:	6000071e 	bne	r12,zero,28170 <__gedf2+0x6c>
   28154:	0005883a 	mov	r2,zero
   28158:	5800101e 	bne	r11,zero,2819c <__gedf2+0x98>
   2815c:	f800283a 	ret
   28160:	18000c1e 	bne	r3,zero,28194 <__gedf2+0x90>
   28164:	3212b03a 	or	r9,r6,r8
   28168:	48000c26 	beq	r9,zero,2819c <__gedf2+0x98>
   2816c:	0013883a 	mov	r9,zero
   28170:	39c03fcc 	andi	r7,r7,255
   28174:	48000826 	beq	r9,zero,28198 <__gedf2+0x94>
   28178:	38000926 	beq	r7,zero,281a0 <__gedf2+0x9c>
   2817c:	00800044 	movi	r2,1
   28180:	f800283a 	ret
   28184:	3212b03a 	or	r9,r6,r8
   28188:	483fec26 	beq	r9,zero,2813c <__gedf2+0x38>
   2818c:	00bfff84 	movi	r2,-2
   28190:	f800283a 	ret
   28194:	39c03fcc 	andi	r7,r7,255
   28198:	29c00626 	beq	r5,r7,281b4 <__gedf2+0xb0>
   2819c:	283ff726 	beq	r5,zero,2817c <__gedf2+0x78>
   281a0:	00bfffc4 	movi	r2,-1
   281a4:	f800283a 	ret
   281a8:	2292b03a 	or	r9,r4,r10
   281ac:	483fe126 	beq	r9,zero,28134 <__gedf2+0x30>
   281b0:	003ff606 	br	2818c <__gedf2+0x88>
   281b4:	18bff916 	blt	r3,r2,2819c <__gedf2+0x98>
   281b8:	10c00316 	blt	r2,r3,281c8 <__gedf2+0xc4>
   281bc:	42bff736 	bltu	r8,r10,2819c <__gedf2+0x98>
   281c0:	52000326 	beq	r10,r8,281d0 <__gedf2+0xcc>
   281c4:	5200042e 	bgeu	r10,r8,281d8 <__gedf2+0xd4>
   281c8:	283fec1e 	bne	r5,zero,2817c <__gedf2+0x78>
   281cc:	003ff406 	br	281a0 <__gedf2+0x9c>
   281d0:	313ff236 	bltu	r6,r4,2819c <__gedf2+0x98>
   281d4:	21bffc36 	bltu	r4,r6,281c8 <__gedf2+0xc4>
   281d8:	0005883a 	mov	r2,zero
   281dc:	f800283a 	ret

000281e0 <__ledf2>:
   281e0:	2804d53a 	srli	r2,r5,20
   281e4:	3810d53a 	srli	r8,r7,20
   281e8:	00c00434 	movhi	r3,16
   281ec:	18ffffc4 	addi	r3,r3,-1
   281f0:	1081ffcc 	andi	r2,r2,2047
   281f4:	0241ffc4 	movi	r9,2047
   281f8:	28d4703a 	and	r10,r5,r3
   281fc:	4201ffcc 	andi	r8,r8,2047
   28200:	38c6703a 	and	r3,r7,r3
   28204:	280ad7fa 	srli	r5,r5,31
   28208:	380ed7fa 	srli	r7,r7,31
   2820c:	12401f26 	beq	r2,r9,2828c <__ledf2+0xac>
   28210:	0241ffc4 	movi	r9,2047
   28214:	42401426 	beq	r8,r9,28268 <__ledf2+0x88>
   28218:	1000091e 	bne	r2,zero,28240 <__ledf2+0x60>
   2821c:	2296b03a 	or	r11,r4,r10
   28220:	5813003a 	cmpeq	r9,r11,zero
   28224:	29403fcc 	andi	r5,r5,255
   28228:	40000a1e 	bne	r8,zero,28254 <__ledf2+0x74>
   2822c:	30d8b03a 	or	r12,r6,r3
   28230:	6000081e 	bne	r12,zero,28254 <__ledf2+0x74>
   28234:	0005883a 	mov	r2,zero
   28238:	5800111e 	bne	r11,zero,28280 <__ledf2+0xa0>
   2823c:	f800283a 	ret
   28240:	29403fcc 	andi	r5,r5,255
   28244:	40000c1e 	bne	r8,zero,28278 <__ledf2+0x98>
   28248:	30d2b03a 	or	r9,r6,r3
   2824c:	48000c26 	beq	r9,zero,28280 <__ledf2+0xa0>
   28250:	0013883a 	mov	r9,zero
   28254:	39c03fcc 	andi	r7,r7,255
   28258:	48000826 	beq	r9,zero,2827c <__ledf2+0x9c>
   2825c:	38001126 	beq	r7,zero,282a4 <__ledf2+0xc4>
   28260:	00800044 	movi	r2,1
   28264:	f800283a 	ret
   28268:	30d2b03a 	or	r9,r6,r3
   2826c:	483fea26 	beq	r9,zero,28218 <__ledf2+0x38>
   28270:	00800084 	movi	r2,2
   28274:	f800283a 	ret
   28278:	39c03fcc 	andi	r7,r7,255
   2827c:	39400726 	beq	r7,r5,2829c <__ledf2+0xbc>
   28280:	2800081e 	bne	r5,zero,282a4 <__ledf2+0xc4>
   28284:	00800044 	movi	r2,1
   28288:	f800283a 	ret
   2828c:	2292b03a 	or	r9,r4,r10
   28290:	483fdf26 	beq	r9,zero,28210 <__ledf2+0x30>
   28294:	00800084 	movi	r2,2
   28298:	f800283a 	ret
   2829c:	4080030e 	bge	r8,r2,282ac <__ledf2+0xcc>
   282a0:	383fef26 	beq	r7,zero,28260 <__ledf2+0x80>
   282a4:	00bfffc4 	movi	r2,-1
   282a8:	f800283a 	ret
   282ac:	123feb16 	blt	r2,r8,2825c <__ledf2+0x7c>
   282b0:	1abff336 	bltu	r3,r10,28280 <__ledf2+0xa0>
   282b4:	50c00326 	beq	r10,r3,282c4 <__ledf2+0xe4>
   282b8:	50c0042e 	bgeu	r10,r3,282cc <__ledf2+0xec>
   282bc:	283fe81e 	bne	r5,zero,28260 <__ledf2+0x80>
   282c0:	003ff806 	br	282a4 <__ledf2+0xc4>
   282c4:	313fee36 	bltu	r6,r4,28280 <__ledf2+0xa0>
   282c8:	21bffc36 	bltu	r4,r6,282bc <__ledf2+0xdc>
   282cc:	0005883a 	mov	r2,zero
   282d0:	f800283a 	ret

000282d4 <__muldf3>:
   282d4:	defff304 	addi	sp,sp,-52
   282d8:	2804d53a 	srli	r2,r5,20
   282dc:	dd800915 	stw	r22,36(sp)
   282e0:	282cd7fa 	srli	r22,r5,31
   282e4:	dc000315 	stw	r16,12(sp)
   282e8:	04000434 	movhi	r16,16
   282ec:	dd400815 	stw	r21,32(sp)
   282f0:	dc800515 	stw	r18,20(sp)
   282f4:	843fffc4 	addi	r16,r16,-1
   282f8:	dfc00c15 	stw	ra,48(sp)
   282fc:	df000b15 	stw	fp,44(sp)
   28300:	ddc00a15 	stw	r23,40(sp)
   28304:	dd000715 	stw	r20,28(sp)
   28308:	dcc00615 	stw	r19,24(sp)
   2830c:	dc400415 	stw	r17,16(sp)
   28310:	1481ffcc 	andi	r18,r2,2047
   28314:	2c20703a 	and	r16,r5,r16
   28318:	b02b883a 	mov	r21,r22
   2831c:	b2403fcc 	andi	r9,r22,255
   28320:	90006026 	beq	r18,zero,284a4 <__muldf3+0x1d0>
   28324:	0081ffc4 	movi	r2,2047
   28328:	2029883a 	mov	r20,r4
   2832c:	90803626 	beq	r18,r2,28408 <__muldf3+0x134>
   28330:	80800434 	orhi	r2,r16,16
   28334:	100490fa 	slli	r2,r2,3
   28338:	2020d77a 	srli	r16,r4,29
   2833c:	202890fa 	slli	r20,r4,3
   28340:	94bf0044 	addi	r18,r18,-1023
   28344:	80a0b03a 	or	r16,r16,r2
   28348:	0027883a 	mov	r19,zero
   2834c:	0039883a 	mov	fp,zero
   28350:	3804d53a 	srli	r2,r7,20
   28354:	382ed7fa 	srli	r23,r7,31
   28358:	04400434 	movhi	r17,16
   2835c:	8c7fffc4 	addi	r17,r17,-1
   28360:	1081ffcc 	andi	r2,r2,2047
   28364:	3011883a 	mov	r8,r6
   28368:	3c62703a 	and	r17,r7,r17
   2836c:	ba803fcc 	andi	r10,r23,255
   28370:	10006d26 	beq	r2,zero,28528 <__muldf3+0x254>
   28374:	00c1ffc4 	movi	r3,2047
   28378:	10c06526 	beq	r2,r3,28510 <__muldf3+0x23c>
   2837c:	88c00434 	orhi	r3,r17,16
   28380:	180690fa 	slli	r3,r3,3
   28384:	3022d77a 	srli	r17,r6,29
   28388:	301090fa 	slli	r8,r6,3
   2838c:	10bf0044 	addi	r2,r2,-1023
   28390:	88e2b03a 	or	r17,r17,r3
   28394:	000b883a 	mov	r5,zero
   28398:	9085883a 	add	r2,r18,r2
   2839c:	2cc8b03a 	or	r4,r5,r19
   283a0:	00c003c4 	movi	r3,15
   283a4:	bdacf03a 	xor	r22,r23,r22
   283a8:	12c00044 	addi	r11,r2,1
   283ac:	19009936 	bltu	r3,r4,28614 <__muldf3+0x340>
   283b0:	200890ba 	slli	r4,r4,2
   283b4:	00c000f4 	movhi	r3,3
   283b8:	18e0f204 	addi	r3,r3,-31800
   283bc:	20c9883a 	add	r4,r4,r3
   283c0:	20c00017 	ldw	r3,0(r4)
   283c4:	1800683a 	jmp	r3
   283c8:	00028614 	movui	zero,2584
   283cc:	00028428 	cmpgeui	zero,zero,2576
   283d0:	00028428 	cmpgeui	zero,zero,2576
   283d4:	00028424 	muli	zero,zero,2576
   283d8:	000285f0 	cmpltui	zero,zero,2583
   283dc:	000285f0 	cmpltui	zero,zero,2583
   283e0:	000285d8 	cmpnei	zero,zero,2583
   283e4:	00028424 	muli	zero,zero,2576
   283e8:	000285f0 	cmpltui	zero,zero,2583
   283ec:	000285d8 	cmpnei	zero,zero,2583
   283f0:	000285f0 	cmpltui	zero,zero,2583
   283f4:	00028424 	muli	zero,zero,2576
   283f8:	00028600 	call	2860 <__alt_mem_onchip_memory_nios2_FFT-0x1d7a0>
   283fc:	00028600 	call	2860 <__alt_mem_onchip_memory_nios2_FFT-0x1d7a0>
   28400:	00028600 	call	2860 <__alt_mem_onchip_memory_nios2_FFT-0x1d7a0>
   28404:	0002881c 	xori	zero,zero,2592
   28408:	2404b03a 	or	r2,r4,r16
   2840c:	10006f1e 	bne	r2,zero,285cc <__muldf3+0x2f8>
   28410:	04c00204 	movi	r19,8
   28414:	0021883a 	mov	r16,zero
   28418:	0029883a 	mov	r20,zero
   2841c:	07000084 	movi	fp,2
   28420:	003fcb06 	br	28350 <__muldf3+0x7c>
   28424:	502d883a 	mov	r22,r10
   28428:	00800084 	movi	r2,2
   2842c:	28805726 	beq	r5,r2,2858c <__muldf3+0x2b8>
   28430:	008000c4 	movi	r2,3
   28434:	28816626 	beq	r5,r2,289d0 <__muldf3+0x6fc>
   28438:	00800044 	movi	r2,1
   2843c:	2881411e 	bne	r5,r2,28944 <__muldf3+0x670>
   28440:	b02b883a 	mov	r21,r22
   28444:	0005883a 	mov	r2,zero
   28448:	000b883a 	mov	r5,zero
   2844c:	0029883a 	mov	r20,zero
   28450:	1004953a 	slli	r2,r2,20
   28454:	a8c03fcc 	andi	r3,r21,255
   28458:	04400434 	movhi	r17,16
   2845c:	8c7fffc4 	addi	r17,r17,-1
   28460:	180697fa 	slli	r3,r3,31
   28464:	2c4a703a 	and	r5,r5,r17
   28468:	288ab03a 	or	r5,r5,r2
   2846c:	28c6b03a 	or	r3,r5,r3
   28470:	a005883a 	mov	r2,r20
   28474:	dfc00c17 	ldw	ra,48(sp)
   28478:	df000b17 	ldw	fp,44(sp)
   2847c:	ddc00a17 	ldw	r23,40(sp)
   28480:	dd800917 	ldw	r22,36(sp)
   28484:	dd400817 	ldw	r21,32(sp)
   28488:	dd000717 	ldw	r20,28(sp)
   2848c:	dcc00617 	ldw	r19,24(sp)
   28490:	dc800517 	ldw	r18,20(sp)
   28494:	dc400417 	ldw	r17,16(sp)
   28498:	dc000317 	ldw	r16,12(sp)
   2849c:	dec00d04 	addi	sp,sp,52
   284a0:	f800283a 	ret
   284a4:	2404b03a 	or	r2,r4,r16
   284a8:	2027883a 	mov	r19,r4
   284ac:	10004226 	beq	r2,zero,285b8 <__muldf3+0x2e4>
   284b0:	8000fc26 	beq	r16,zero,288a4 <__muldf3+0x5d0>
   284b4:	8009883a 	mov	r4,r16
   284b8:	d9800215 	stw	r6,8(sp)
   284bc:	d9c00015 	stw	r7,0(sp)
   284c0:	da400115 	stw	r9,4(sp)
   284c4:	00297a40 	call	297a4 <__clzsi2>
   284c8:	d9800217 	ldw	r6,8(sp)
   284cc:	d9c00017 	ldw	r7,0(sp)
   284d0:	da400117 	ldw	r9,4(sp)
   284d4:	113ffd44 	addi	r4,r2,-11
   284d8:	00c00704 	movi	r3,28
   284dc:	1900ed16 	blt	r3,r4,28894 <__muldf3+0x5c0>
   284e0:	00c00744 	movi	r3,29
   284e4:	147ffe04 	addi	r17,r2,-8
   284e8:	1907c83a 	sub	r3,r3,r4
   284ec:	8460983a 	sll	r16,r16,r17
   284f0:	98c6d83a 	srl	r3,r19,r3
   284f4:	9c68983a 	sll	r20,r19,r17
   284f8:	1c20b03a 	or	r16,r3,r16
   284fc:	1080fcc4 	addi	r2,r2,1011
   28500:	00a5c83a 	sub	r18,zero,r2
   28504:	0027883a 	mov	r19,zero
   28508:	0039883a 	mov	fp,zero
   2850c:	003f9006 	br	28350 <__muldf3+0x7c>
   28510:	3446b03a 	or	r3,r6,r17
   28514:	1800261e 	bne	r3,zero,285b0 <__muldf3+0x2dc>
   28518:	0023883a 	mov	r17,zero
   2851c:	0011883a 	mov	r8,zero
   28520:	01400084 	movi	r5,2
   28524:	003f9c06 	br	28398 <__muldf3+0xc4>
   28528:	3446b03a 	or	r3,r6,r17
   2852c:	18001c26 	beq	r3,zero,285a0 <__muldf3+0x2cc>
   28530:	8800ce26 	beq	r17,zero,2886c <__muldf3+0x598>
   28534:	8809883a 	mov	r4,r17
   28538:	d9800215 	stw	r6,8(sp)
   2853c:	da400115 	stw	r9,4(sp)
   28540:	da800015 	stw	r10,0(sp)
   28544:	00297a40 	call	297a4 <__clzsi2>
   28548:	d9800217 	ldw	r6,8(sp)
   2854c:	da400117 	ldw	r9,4(sp)
   28550:	da800017 	ldw	r10,0(sp)
   28554:	113ffd44 	addi	r4,r2,-11
   28558:	00c00704 	movi	r3,28
   2855c:	1900bf16 	blt	r3,r4,2885c <__muldf3+0x588>
   28560:	00c00744 	movi	r3,29
   28564:	123ffe04 	addi	r8,r2,-8
   28568:	1907c83a 	sub	r3,r3,r4
   2856c:	8a22983a 	sll	r17,r17,r8
   28570:	30c6d83a 	srl	r3,r6,r3
   28574:	3210983a 	sll	r8,r6,r8
   28578:	1c62b03a 	or	r17,r3,r17
   2857c:	1080fcc4 	addi	r2,r2,1011
   28580:	0085c83a 	sub	r2,zero,r2
   28584:	000b883a 	mov	r5,zero
   28588:	003f8306 	br	28398 <__muldf3+0xc4>
   2858c:	b02b883a 	mov	r21,r22
   28590:	0081ffc4 	movi	r2,2047
   28594:	000b883a 	mov	r5,zero
   28598:	0029883a 	mov	r20,zero
   2859c:	003fac06 	br	28450 <__muldf3+0x17c>
   285a0:	0023883a 	mov	r17,zero
   285a4:	0011883a 	mov	r8,zero
   285a8:	01400044 	movi	r5,1
   285ac:	003f7a06 	br	28398 <__muldf3+0xc4>
   285b0:	014000c4 	movi	r5,3
   285b4:	003f7806 	br	28398 <__muldf3+0xc4>
   285b8:	04c00104 	movi	r19,4
   285bc:	0021883a 	mov	r16,zero
   285c0:	0029883a 	mov	r20,zero
   285c4:	07000044 	movi	fp,1
   285c8:	003f6106 	br	28350 <__muldf3+0x7c>
   285cc:	04c00304 	movi	r19,12
   285d0:	070000c4 	movi	fp,3
   285d4:	003f5e06 	br	28350 <__muldf3+0x7c>
   285d8:	01400434 	movhi	r5,16
   285dc:	002b883a 	mov	r21,zero
   285e0:	297fffc4 	addi	r5,r5,-1
   285e4:	053fffc4 	movi	r20,-1
   285e8:	0081ffc4 	movi	r2,2047
   285ec:	003f9806 	br	28450 <__muldf3+0x17c>
   285f0:	8023883a 	mov	r17,r16
   285f4:	a011883a 	mov	r8,r20
   285f8:	e00b883a 	mov	r5,fp
   285fc:	003f8a06 	br	28428 <__muldf3+0x154>
   28600:	8023883a 	mov	r17,r16
   28604:	a011883a 	mov	r8,r20
   28608:	482d883a 	mov	r22,r9
   2860c:	e00b883a 	mov	r5,fp
   28610:	003f8506 	br	28428 <__muldf3+0x154>
   28614:	a00ad43a 	srli	r5,r20,16
   28618:	401ad43a 	srli	r13,r8,16
   2861c:	a53fffcc 	andi	r20,r20,65535
   28620:	423fffcc 	andi	r8,r8,65535
   28624:	4519383a 	mul	r12,r8,r20
   28628:	4147383a 	mul	r3,r8,r5
   2862c:	6d09383a 	mul	r4,r13,r20
   28630:	600cd43a 	srli	r6,r12,16
   28634:	2b5d383a 	mul	r14,r5,r13
   28638:	20c9883a 	add	r4,r4,r3
   2863c:	310d883a 	add	r6,r6,r4
   28640:	30c0022e 	bgeu	r6,r3,2864c <__muldf3+0x378>
   28644:	00c00074 	movhi	r3,1
   28648:	70dd883a 	add	r14,r14,r3
   2864c:	8826d43a 	srli	r19,r17,16
   28650:	8bffffcc 	andi	r15,r17,65535
   28654:	7d23383a 	mul	r17,r15,r20
   28658:	7949383a 	mul	r4,r15,r5
   2865c:	9d29383a 	mul	r20,r19,r20
   28660:	8814d43a 	srli	r10,r17,16
   28664:	3012943a 	slli	r9,r6,16
   28668:	a129883a 	add	r20,r20,r4
   2866c:	633fffcc 	andi	r12,r12,65535
   28670:	5515883a 	add	r10,r10,r20
   28674:	3006d43a 	srli	r3,r6,16
   28678:	4b13883a 	add	r9,r9,r12
   2867c:	2ccb383a 	mul	r5,r5,r19
   28680:	5100022e 	bgeu	r10,r4,2868c <__muldf3+0x3b8>
   28684:	01000074 	movhi	r4,1
   28688:	290b883a 	add	r5,r5,r4
   2868c:	802ad43a 	srli	r21,r16,16
   28690:	843fffcc 	andi	r16,r16,65535
   28694:	440d383a 	mul	r6,r8,r16
   28698:	4565383a 	mul	r18,r8,r21
   2869c:	8349383a 	mul	r4,r16,r13
   286a0:	500e943a 	slli	r7,r10,16
   286a4:	3010d43a 	srli	r8,r6,16
   286a8:	5028d43a 	srli	r20,r10,16
   286ac:	2489883a 	add	r4,r4,r18
   286b0:	8abfffcc 	andi	r10,r17,65535
   286b4:	3a95883a 	add	r10,r7,r10
   286b8:	4119883a 	add	r12,r8,r4
   286bc:	a169883a 	add	r20,r20,r5
   286c0:	1a87883a 	add	r3,r3,r10
   286c4:	6d5b383a 	mul	r13,r13,r21
   286c8:	6480022e 	bgeu	r12,r18,286d4 <__muldf3+0x400>
   286cc:	01000074 	movhi	r4,1
   286d0:	691b883a 	add	r13,r13,r4
   286d4:	7c25383a 	mul	r18,r15,r16
   286d8:	7d4b383a 	mul	r5,r15,r21
   286dc:	84cf383a 	mul	r7,r16,r19
   286e0:	901ed43a 	srli	r15,r18,16
   286e4:	6008d43a 	srli	r4,r12,16
   286e8:	6010943a 	slli	r8,r12,16
   286ec:	394f883a 	add	r7,r7,r5
   286f0:	333fffcc 	andi	r12,r6,65535
   286f4:	79df883a 	add	r15,r15,r7
   286f8:	235b883a 	add	r13,r4,r13
   286fc:	9d63383a 	mul	r17,r19,r21
   28700:	4309883a 	add	r4,r8,r12
   28704:	7940022e 	bgeu	r15,r5,28710 <__muldf3+0x43c>
   28708:	01400074 	movhi	r5,1
   2870c:	8963883a 	add	r17,r17,r5
   28710:	780a943a 	slli	r5,r15,16
   28714:	91bfffcc 	andi	r6,r18,65535
   28718:	70c7883a 	add	r3,r14,r3
   2871c:	298d883a 	add	r6,r5,r6
   28720:	1a8f803a 	cmpltu	r7,r3,r10
   28724:	350b883a 	add	r5,r6,r20
   28728:	20c7883a 	add	r3,r4,r3
   2872c:	3955883a 	add	r10,r7,r5
   28730:	1909803a 	cmpltu	r4,r3,r4
   28734:	6a91883a 	add	r8,r13,r10
   28738:	780cd43a 	srli	r6,r15,16
   2873c:	2219883a 	add	r12,r4,r8
   28740:	2d0b803a 	cmpltu	r5,r5,r20
   28744:	51cf803a 	cmpltu	r7,r10,r7
   28748:	29ceb03a 	or	r7,r5,r7
   2874c:	4351803a 	cmpltu	r8,r8,r13
   28750:	610b803a 	cmpltu	r5,r12,r4
   28754:	4148b03a 	or	r4,r8,r5
   28758:	398f883a 	add	r7,r7,r6
   2875c:	3909883a 	add	r4,r7,r4
   28760:	1810927a 	slli	r8,r3,9
   28764:	2449883a 	add	r4,r4,r17
   28768:	2008927a 	slli	r4,r4,9
   2876c:	6022d5fa 	srli	r17,r12,23
   28770:	1806d5fa 	srli	r3,r3,23
   28774:	4252b03a 	or	r9,r8,r9
   28778:	600a927a 	slli	r5,r12,9
   2877c:	4810c03a 	cmpne	r8,r9,zero
   28780:	2462b03a 	or	r17,r4,r17
   28784:	40c6b03a 	or	r3,r8,r3
   28788:	8900402c 	andhi	r4,r17,256
   2878c:	1950b03a 	or	r8,r3,r5
   28790:	20000726 	beq	r4,zero,287b0 <__muldf3+0x4dc>
   28794:	4006d07a 	srli	r3,r8,1
   28798:	880497fa 	slli	r2,r17,31
   2879c:	4200004c 	andi	r8,r8,1
   287a0:	8822d07a 	srli	r17,r17,1
   287a4:	1a10b03a 	or	r8,r3,r8
   287a8:	1210b03a 	or	r8,r2,r8
   287ac:	5805883a 	mov	r2,r11
   287b0:	1140ffc4 	addi	r5,r2,1023
   287b4:	0140440e 	bge	zero,r5,288c8 <__muldf3+0x5f4>
   287b8:	40c001cc 	andi	r3,r8,7
   287bc:	18000726 	beq	r3,zero,287dc <__muldf3+0x508>
   287c0:	40c003cc 	andi	r3,r8,15
   287c4:	01000104 	movi	r4,4
   287c8:	19000426 	beq	r3,r4,287dc <__muldf3+0x508>
   287cc:	4107883a 	add	r3,r8,r4
   287d0:	1a11803a 	cmpltu	r8,r3,r8
   287d4:	8a23883a 	add	r17,r17,r8
   287d8:	1811883a 	mov	r8,r3
   287dc:	88c0402c 	andhi	r3,r17,256
   287e0:	18000426 	beq	r3,zero,287f4 <__muldf3+0x520>
   287e4:	11410004 	addi	r5,r2,1024
   287e8:	00bfc034 	movhi	r2,65280
   287ec:	10bfffc4 	addi	r2,r2,-1
   287f0:	88a2703a 	and	r17,r17,r2
   287f4:	0081ff84 	movi	r2,2046
   287f8:	117f6416 	blt	r2,r5,2858c <__muldf3+0x2b8>
   287fc:	8828977a 	slli	r20,r17,29
   28800:	4010d0fa 	srli	r8,r8,3
   28804:	8822927a 	slli	r17,r17,9
   28808:	2881ffcc 	andi	r2,r5,2047
   2880c:	a228b03a 	or	r20,r20,r8
   28810:	880ad33a 	srli	r5,r17,12
   28814:	b02b883a 	mov	r21,r22
   28818:	003f0d06 	br	28450 <__muldf3+0x17c>
   2881c:	8080022c 	andhi	r2,r16,8
   28820:	10000926 	beq	r2,zero,28848 <__muldf3+0x574>
   28824:	8880022c 	andhi	r2,r17,8
   28828:	1000071e 	bne	r2,zero,28848 <__muldf3+0x574>
   2882c:	00800434 	movhi	r2,16
   28830:	89400234 	orhi	r5,r17,8
   28834:	10bfffc4 	addi	r2,r2,-1
   28838:	b82b883a 	mov	r21,r23
   2883c:	288a703a 	and	r5,r5,r2
   28840:	4029883a 	mov	r20,r8
   28844:	003f6806 	br	285e8 <__muldf3+0x314>
   28848:	00800434 	movhi	r2,16
   2884c:	81400234 	orhi	r5,r16,8
   28850:	10bfffc4 	addi	r2,r2,-1
   28854:	288a703a 	and	r5,r5,r2
   28858:	003f6306 	br	285e8 <__muldf3+0x314>
   2885c:	147ff604 	addi	r17,r2,-40
   28860:	3462983a 	sll	r17,r6,r17
   28864:	0011883a 	mov	r8,zero
   28868:	003f4406 	br	2857c <__muldf3+0x2a8>
   2886c:	3009883a 	mov	r4,r6
   28870:	d9800215 	stw	r6,8(sp)
   28874:	da400115 	stw	r9,4(sp)
   28878:	da800015 	stw	r10,0(sp)
   2887c:	00297a40 	call	297a4 <__clzsi2>
   28880:	10800804 	addi	r2,r2,32
   28884:	da800017 	ldw	r10,0(sp)
   28888:	da400117 	ldw	r9,4(sp)
   2888c:	d9800217 	ldw	r6,8(sp)
   28890:	003f3006 	br	28554 <__muldf3+0x280>
   28894:	143ff604 	addi	r16,r2,-40
   28898:	9c20983a 	sll	r16,r19,r16
   2889c:	0029883a 	mov	r20,zero
   288a0:	003f1606 	br	284fc <__muldf3+0x228>
   288a4:	d9800215 	stw	r6,8(sp)
   288a8:	d9c00015 	stw	r7,0(sp)
   288ac:	da400115 	stw	r9,4(sp)
   288b0:	00297a40 	call	297a4 <__clzsi2>
   288b4:	10800804 	addi	r2,r2,32
   288b8:	da400117 	ldw	r9,4(sp)
   288bc:	d9c00017 	ldw	r7,0(sp)
   288c0:	d9800217 	ldw	r6,8(sp)
   288c4:	003f0306 	br	284d4 <__muldf3+0x200>
   288c8:	00c00044 	movi	r3,1
   288cc:	1947c83a 	sub	r3,r3,r5
   288d0:	00800e04 	movi	r2,56
   288d4:	10feda16 	blt	r2,r3,28440 <__muldf3+0x16c>
   288d8:	008007c4 	movi	r2,31
   288dc:	10c01b16 	blt	r2,r3,2894c <__muldf3+0x678>
   288e0:	00800804 	movi	r2,32
   288e4:	10c5c83a 	sub	r2,r2,r3
   288e8:	888a983a 	sll	r5,r17,r2
   288ec:	40c8d83a 	srl	r4,r8,r3
   288f0:	4084983a 	sll	r2,r8,r2
   288f4:	88e2d83a 	srl	r17,r17,r3
   288f8:	2906b03a 	or	r3,r5,r4
   288fc:	1004c03a 	cmpne	r2,r2,zero
   28900:	1886b03a 	or	r3,r3,r2
   28904:	188001cc 	andi	r2,r3,7
   28908:	10000726 	beq	r2,zero,28928 <__muldf3+0x654>
   2890c:	188003cc 	andi	r2,r3,15
   28910:	01000104 	movi	r4,4
   28914:	11000426 	beq	r2,r4,28928 <__muldf3+0x654>
   28918:	1805883a 	mov	r2,r3
   2891c:	10c00104 	addi	r3,r2,4
   28920:	1885803a 	cmpltu	r2,r3,r2
   28924:	88a3883a 	add	r17,r17,r2
   28928:	8880202c 	andhi	r2,r17,128
   2892c:	10001c26 	beq	r2,zero,289a0 <__muldf3+0x6cc>
   28930:	b02b883a 	mov	r21,r22
   28934:	00800044 	movi	r2,1
   28938:	000b883a 	mov	r5,zero
   2893c:	0029883a 	mov	r20,zero
   28940:	003ec306 	br	28450 <__muldf3+0x17c>
   28944:	5805883a 	mov	r2,r11
   28948:	003f9906 	br	287b0 <__muldf3+0x4dc>
   2894c:	00bff844 	movi	r2,-31
   28950:	1145c83a 	sub	r2,r2,r5
   28954:	8888d83a 	srl	r4,r17,r2
   28958:	00800804 	movi	r2,32
   2895c:	18801a26 	beq	r3,r2,289c8 <__muldf3+0x6f4>
   28960:	00801004 	movi	r2,64
   28964:	10c5c83a 	sub	r2,r2,r3
   28968:	8884983a 	sll	r2,r17,r2
   2896c:	1204b03a 	or	r2,r2,r8
   28970:	1004c03a 	cmpne	r2,r2,zero
   28974:	2084b03a 	or	r2,r4,r2
   28978:	144001cc 	andi	r17,r2,7
   2897c:	88000d1e 	bne	r17,zero,289b4 <__muldf3+0x6e0>
   28980:	000b883a 	mov	r5,zero
   28984:	1028d0fa 	srli	r20,r2,3
   28988:	b02b883a 	mov	r21,r22
   2898c:	0005883a 	mov	r2,zero
   28990:	a468b03a 	or	r20,r20,r17
   28994:	003eae06 	br	28450 <__muldf3+0x17c>
   28998:	1007883a 	mov	r3,r2
   2899c:	0023883a 	mov	r17,zero
   289a0:	880a927a 	slli	r5,r17,9
   289a4:	1805883a 	mov	r2,r3
   289a8:	8822977a 	slli	r17,r17,29
   289ac:	280ad33a 	srli	r5,r5,12
   289b0:	003ff406 	br	28984 <__muldf3+0x6b0>
   289b4:	10c003cc 	andi	r3,r2,15
   289b8:	01000104 	movi	r4,4
   289bc:	193ff626 	beq	r3,r4,28998 <__muldf3+0x6c4>
   289c0:	0023883a 	mov	r17,zero
   289c4:	003fd506 	br	2891c <__muldf3+0x648>
   289c8:	0005883a 	mov	r2,zero
   289cc:	003fe706 	br	2896c <__muldf3+0x698>
   289d0:	00800434 	movhi	r2,16
   289d4:	89400234 	orhi	r5,r17,8
   289d8:	10bfffc4 	addi	r2,r2,-1
   289dc:	b02b883a 	mov	r21,r22
   289e0:	288a703a 	and	r5,r5,r2
   289e4:	4029883a 	mov	r20,r8
   289e8:	003eff06 	br	285e8 <__muldf3+0x314>

000289ec <__subdf3>:
   289ec:	02000434 	movhi	r8,16
   289f0:	423fffc4 	addi	r8,r8,-1
   289f4:	defffb04 	addi	sp,sp,-20
   289f8:	2a14703a 	and	r10,r5,r8
   289fc:	3812d53a 	srli	r9,r7,20
   28a00:	3a10703a 	and	r8,r7,r8
   28a04:	2006d77a 	srli	r3,r4,29
   28a08:	3004d77a 	srli	r2,r6,29
   28a0c:	dc000015 	stw	r16,0(sp)
   28a10:	501490fa 	slli	r10,r10,3
   28a14:	2820d53a 	srli	r16,r5,20
   28a18:	401090fa 	slli	r8,r8,3
   28a1c:	dc800215 	stw	r18,8(sp)
   28a20:	dc400115 	stw	r17,4(sp)
   28a24:	dfc00415 	stw	ra,16(sp)
   28a28:	202290fa 	slli	r17,r4,3
   28a2c:	dcc00315 	stw	r19,12(sp)
   28a30:	4a41ffcc 	andi	r9,r9,2047
   28a34:	0101ffc4 	movi	r4,2047
   28a38:	2824d7fa 	srli	r18,r5,31
   28a3c:	8401ffcc 	andi	r16,r16,2047
   28a40:	50c6b03a 	or	r3,r10,r3
   28a44:	380ed7fa 	srli	r7,r7,31
   28a48:	408ab03a 	or	r5,r8,r2
   28a4c:	300c90fa 	slli	r6,r6,3
   28a50:	49009626 	beq	r9,r4,28cac <__subdf3+0x2c0>
   28a54:	39c0005c 	xori	r7,r7,1
   28a58:	8245c83a 	sub	r2,r16,r9
   28a5c:	3c807426 	beq	r7,r18,28c30 <__subdf3+0x244>
   28a60:	0080af0e 	bge	zero,r2,28d20 <__subdf3+0x334>
   28a64:	48002a1e 	bne	r9,zero,28b10 <__subdf3+0x124>
   28a68:	2988b03a 	or	r4,r5,r6
   28a6c:	20009a1e 	bne	r4,zero,28cd8 <__subdf3+0x2ec>
   28a70:	888001cc 	andi	r2,r17,7
   28a74:	10000726 	beq	r2,zero,28a94 <__subdf3+0xa8>
   28a78:	888003cc 	andi	r2,r17,15
   28a7c:	01000104 	movi	r4,4
   28a80:	11000426 	beq	r2,r4,28a94 <__subdf3+0xa8>
   28a84:	890b883a 	add	r5,r17,r4
   28a88:	2c63803a 	cmpltu	r17,r5,r17
   28a8c:	1c47883a 	add	r3,r3,r17
   28a90:	2823883a 	mov	r17,r5
   28a94:	1880202c 	andhi	r2,r3,128
   28a98:	10005926 	beq	r2,zero,28c00 <__subdf3+0x214>
   28a9c:	84000044 	addi	r16,r16,1
   28aa0:	0081ffc4 	movi	r2,2047
   28aa4:	8080be26 	beq	r16,r2,28da0 <__subdf3+0x3b4>
   28aa8:	017fe034 	movhi	r5,65408
   28aac:	297fffc4 	addi	r5,r5,-1
   28ab0:	1946703a 	and	r3,r3,r5
   28ab4:	1804977a 	slli	r2,r3,29
   28ab8:	1806927a 	slli	r3,r3,9
   28abc:	8822d0fa 	srli	r17,r17,3
   28ac0:	8401ffcc 	andi	r16,r16,2047
   28ac4:	180ad33a 	srli	r5,r3,12
   28ac8:	9100004c 	andi	r4,r18,1
   28acc:	1444b03a 	or	r2,r2,r17
   28ad0:	80c1ffcc 	andi	r3,r16,2047
   28ad4:	1820953a 	slli	r16,r3,20
   28ad8:	20c03fcc 	andi	r3,r4,255
   28adc:	180897fa 	slli	r4,r3,31
   28ae0:	00c00434 	movhi	r3,16
   28ae4:	18ffffc4 	addi	r3,r3,-1
   28ae8:	28c6703a 	and	r3,r5,r3
   28aec:	1c06b03a 	or	r3,r3,r16
   28af0:	1906b03a 	or	r3,r3,r4
   28af4:	dfc00417 	ldw	ra,16(sp)
   28af8:	dcc00317 	ldw	r19,12(sp)
   28afc:	dc800217 	ldw	r18,8(sp)
   28b00:	dc400117 	ldw	r17,4(sp)
   28b04:	dc000017 	ldw	r16,0(sp)
   28b08:	dec00504 	addi	sp,sp,20
   28b0c:	f800283a 	ret
   28b10:	0101ffc4 	movi	r4,2047
   28b14:	813fd626 	beq	r16,r4,28a70 <__subdf3+0x84>
   28b18:	29402034 	orhi	r5,r5,128
   28b1c:	01000e04 	movi	r4,56
   28b20:	2080a316 	blt	r4,r2,28db0 <__subdf3+0x3c4>
   28b24:	010007c4 	movi	r4,31
   28b28:	2080c616 	blt	r4,r2,28e44 <__subdf3+0x458>
   28b2c:	01000804 	movi	r4,32
   28b30:	2089c83a 	sub	r4,r4,r2
   28b34:	2910983a 	sll	r8,r5,r4
   28b38:	308ed83a 	srl	r7,r6,r2
   28b3c:	3108983a 	sll	r4,r6,r4
   28b40:	2884d83a 	srl	r2,r5,r2
   28b44:	41ccb03a 	or	r6,r8,r7
   28b48:	2008c03a 	cmpne	r4,r4,zero
   28b4c:	310cb03a 	or	r6,r6,r4
   28b50:	898dc83a 	sub	r6,r17,r6
   28b54:	89a3803a 	cmpltu	r17,r17,r6
   28b58:	1887c83a 	sub	r3,r3,r2
   28b5c:	1c47c83a 	sub	r3,r3,r17
   28b60:	3023883a 	mov	r17,r6
   28b64:	1880202c 	andhi	r2,r3,128
   28b68:	10002326 	beq	r2,zero,28bf8 <__subdf3+0x20c>
   28b6c:	04c02034 	movhi	r19,128
   28b70:	9cffffc4 	addi	r19,r19,-1
   28b74:	1ce6703a 	and	r19,r3,r19
   28b78:	98007a26 	beq	r19,zero,28d64 <__subdf3+0x378>
   28b7c:	9809883a 	mov	r4,r19
   28b80:	00297a40 	call	297a4 <__clzsi2>
   28b84:	113ffe04 	addi	r4,r2,-8
   28b88:	00c007c4 	movi	r3,31
   28b8c:	19007b16 	blt	r3,r4,28d7c <__subdf3+0x390>
   28b90:	00800804 	movi	r2,32
   28b94:	1105c83a 	sub	r2,r2,r4
   28b98:	8884d83a 	srl	r2,r17,r2
   28b9c:	9906983a 	sll	r3,r19,r4
   28ba0:	8922983a 	sll	r17,r17,r4
   28ba4:	10c4b03a 	or	r2,r2,r3
   28ba8:	24007816 	blt	r4,r16,28d8c <__subdf3+0x3a0>
   28bac:	2421c83a 	sub	r16,r4,r16
   28bb0:	80c00044 	addi	r3,r16,1
   28bb4:	010007c4 	movi	r4,31
   28bb8:	20c09516 	blt	r4,r3,28e10 <__subdf3+0x424>
   28bbc:	01400804 	movi	r5,32
   28bc0:	28cbc83a 	sub	r5,r5,r3
   28bc4:	88c8d83a 	srl	r4,r17,r3
   28bc8:	8962983a 	sll	r17,r17,r5
   28bcc:	114a983a 	sll	r5,r2,r5
   28bd0:	10c6d83a 	srl	r3,r2,r3
   28bd4:	8804c03a 	cmpne	r2,r17,zero
   28bd8:	290ab03a 	or	r5,r5,r4
   28bdc:	28a2b03a 	or	r17,r5,r2
   28be0:	0021883a 	mov	r16,zero
   28be4:	003fa206 	br	28a70 <__subdf3+0x84>
   28be8:	2090b03a 	or	r8,r4,r2
   28bec:	40018e26 	beq	r8,zero,29228 <__subdf3+0x83c>
   28bf0:	1007883a 	mov	r3,r2
   28bf4:	2023883a 	mov	r17,r4
   28bf8:	888001cc 	andi	r2,r17,7
   28bfc:	103f9e1e 	bne	r2,zero,28a78 <__subdf3+0x8c>
   28c00:	1804977a 	slli	r2,r3,29
   28c04:	8822d0fa 	srli	r17,r17,3
   28c08:	1810d0fa 	srli	r8,r3,3
   28c0c:	9100004c 	andi	r4,r18,1
   28c10:	1444b03a 	or	r2,r2,r17
   28c14:	00c1ffc4 	movi	r3,2047
   28c18:	80c02826 	beq	r16,r3,28cbc <__subdf3+0x2d0>
   28c1c:	01400434 	movhi	r5,16
   28c20:	297fffc4 	addi	r5,r5,-1
   28c24:	80e0703a 	and	r16,r16,r3
   28c28:	414a703a 	and	r5,r8,r5
   28c2c:	003fa806 	br	28ad0 <__subdf3+0xe4>
   28c30:	0080630e 	bge	zero,r2,28dc0 <__subdf3+0x3d4>
   28c34:	48003026 	beq	r9,zero,28cf8 <__subdf3+0x30c>
   28c38:	0101ffc4 	movi	r4,2047
   28c3c:	813f8c26 	beq	r16,r4,28a70 <__subdf3+0x84>
   28c40:	29402034 	orhi	r5,r5,128
   28c44:	01000e04 	movi	r4,56
   28c48:	2080a90e 	bge	r4,r2,28ef0 <__subdf3+0x504>
   28c4c:	298cb03a 	or	r6,r5,r6
   28c50:	3012c03a 	cmpne	r9,r6,zero
   28c54:	0005883a 	mov	r2,zero
   28c58:	4c53883a 	add	r9,r9,r17
   28c5c:	4c63803a 	cmpltu	r17,r9,r17
   28c60:	10c7883a 	add	r3,r2,r3
   28c64:	88c7883a 	add	r3,r17,r3
   28c68:	4823883a 	mov	r17,r9
   28c6c:	1880202c 	andhi	r2,r3,128
   28c70:	1000d026 	beq	r2,zero,28fb4 <__subdf3+0x5c8>
   28c74:	84000044 	addi	r16,r16,1
   28c78:	0081ffc4 	movi	r2,2047
   28c7c:	8080fe26 	beq	r16,r2,29078 <__subdf3+0x68c>
   28c80:	00bfe034 	movhi	r2,65408
   28c84:	10bfffc4 	addi	r2,r2,-1
   28c88:	1886703a 	and	r3,r3,r2
   28c8c:	880ad07a 	srli	r5,r17,1
   28c90:	180497fa 	slli	r2,r3,31
   28c94:	8900004c 	andi	r4,r17,1
   28c98:	2922b03a 	or	r17,r5,r4
   28c9c:	1806d07a 	srli	r3,r3,1
   28ca0:	1462b03a 	or	r17,r2,r17
   28ca4:	3825883a 	mov	r18,r7
   28ca8:	003f7106 	br	28a70 <__subdf3+0x84>
   28cac:	2984b03a 	or	r2,r5,r6
   28cb0:	103f6826 	beq	r2,zero,28a54 <__subdf3+0x68>
   28cb4:	39c03fcc 	andi	r7,r7,255
   28cb8:	003f6706 	br	28a58 <__subdf3+0x6c>
   28cbc:	4086b03a 	or	r3,r8,r2
   28cc0:	18015226 	beq	r3,zero,2920c <__subdf3+0x820>
   28cc4:	00c00434 	movhi	r3,16
   28cc8:	41400234 	orhi	r5,r8,8
   28ccc:	18ffffc4 	addi	r3,r3,-1
   28cd0:	28ca703a 	and	r5,r5,r3
   28cd4:	003f7e06 	br	28ad0 <__subdf3+0xe4>
   28cd8:	10bfffc4 	addi	r2,r2,-1
   28cdc:	1000491e 	bne	r2,zero,28e04 <__subdf3+0x418>
   28ce0:	898fc83a 	sub	r7,r17,r6
   28ce4:	89e3803a 	cmpltu	r17,r17,r7
   28ce8:	1947c83a 	sub	r3,r3,r5
   28cec:	1c47c83a 	sub	r3,r3,r17
   28cf0:	3823883a 	mov	r17,r7
   28cf4:	003f9b06 	br	28b64 <__subdf3+0x178>
   28cf8:	2988b03a 	or	r4,r5,r6
   28cfc:	203f5c26 	beq	r4,zero,28a70 <__subdf3+0x84>
   28d00:	10bfffc4 	addi	r2,r2,-1
   28d04:	1000931e 	bne	r2,zero,28f54 <__subdf3+0x568>
   28d08:	898d883a 	add	r6,r17,r6
   28d0c:	3463803a 	cmpltu	r17,r6,r17
   28d10:	1947883a 	add	r3,r3,r5
   28d14:	88c7883a 	add	r3,r17,r3
   28d18:	3023883a 	mov	r17,r6
   28d1c:	003fd306 	br	28c6c <__subdf3+0x280>
   28d20:	1000541e 	bne	r2,zero,28e74 <__subdf3+0x488>
   28d24:	80800044 	addi	r2,r16,1
   28d28:	1081ffcc 	andi	r2,r2,2047
   28d2c:	01000044 	movi	r4,1
   28d30:	2080a20e 	bge	r4,r2,28fbc <__subdf3+0x5d0>
   28d34:	8989c83a 	sub	r4,r17,r6
   28d38:	8905803a 	cmpltu	r2,r17,r4
   28d3c:	1967c83a 	sub	r19,r3,r5
   28d40:	98a7c83a 	sub	r19,r19,r2
   28d44:	9880202c 	andhi	r2,r19,128
   28d48:	10006326 	beq	r2,zero,28ed8 <__subdf3+0x4ec>
   28d4c:	3463c83a 	sub	r17,r6,r17
   28d50:	28c7c83a 	sub	r3,r5,r3
   28d54:	344d803a 	cmpltu	r6,r6,r17
   28d58:	19a7c83a 	sub	r19,r3,r6
   28d5c:	3825883a 	mov	r18,r7
   28d60:	983f861e 	bne	r19,zero,28b7c <__subdf3+0x190>
   28d64:	8809883a 	mov	r4,r17
   28d68:	00297a40 	call	297a4 <__clzsi2>
   28d6c:	10800804 	addi	r2,r2,32
   28d70:	113ffe04 	addi	r4,r2,-8
   28d74:	00c007c4 	movi	r3,31
   28d78:	193f850e 	bge	r3,r4,28b90 <__subdf3+0x1a4>
   28d7c:	10bff604 	addi	r2,r2,-40
   28d80:	8884983a 	sll	r2,r17,r2
   28d84:	0023883a 	mov	r17,zero
   28d88:	243f880e 	bge	r4,r16,28bac <__subdf3+0x1c0>
   28d8c:	00ffe034 	movhi	r3,65408
   28d90:	18ffffc4 	addi	r3,r3,-1
   28d94:	8121c83a 	sub	r16,r16,r4
   28d98:	10c6703a 	and	r3,r2,r3
   28d9c:	003f3406 	br	28a70 <__subdf3+0x84>
   28da0:	9100004c 	andi	r4,r18,1
   28da4:	000b883a 	mov	r5,zero
   28da8:	0005883a 	mov	r2,zero
   28dac:	003f4806 	br	28ad0 <__subdf3+0xe4>
   28db0:	298cb03a 	or	r6,r5,r6
   28db4:	300cc03a 	cmpne	r6,r6,zero
   28db8:	0005883a 	mov	r2,zero
   28dbc:	003f6406 	br	28b50 <__subdf3+0x164>
   28dc0:	10009a1e 	bne	r2,zero,2902c <__subdf3+0x640>
   28dc4:	82400044 	addi	r9,r16,1
   28dc8:	4881ffcc 	andi	r2,r9,2047
   28dcc:	02800044 	movi	r10,1
   28dd0:	5080670e 	bge	r10,r2,28f70 <__subdf3+0x584>
   28dd4:	0081ffc4 	movi	r2,2047
   28dd8:	4880af26 	beq	r9,r2,29098 <__subdf3+0x6ac>
   28ddc:	898d883a 	add	r6,r17,r6
   28de0:	1945883a 	add	r2,r3,r5
   28de4:	3447803a 	cmpltu	r3,r6,r17
   28de8:	1887883a 	add	r3,r3,r2
   28dec:	182297fa 	slli	r17,r3,31
   28df0:	300cd07a 	srli	r6,r6,1
   28df4:	1806d07a 	srli	r3,r3,1
   28df8:	4821883a 	mov	r16,r9
   28dfc:	89a2b03a 	or	r17,r17,r6
   28e00:	003f1b06 	br	28a70 <__subdf3+0x84>
   28e04:	0101ffc4 	movi	r4,2047
   28e08:	813f441e 	bne	r16,r4,28b1c <__subdf3+0x130>
   28e0c:	003f1806 	br	28a70 <__subdf3+0x84>
   28e10:	843ff844 	addi	r16,r16,-31
   28e14:	01400804 	movi	r5,32
   28e18:	1408d83a 	srl	r4,r2,r16
   28e1c:	19405026 	beq	r3,r5,28f60 <__subdf3+0x574>
   28e20:	01401004 	movi	r5,64
   28e24:	28c7c83a 	sub	r3,r5,r3
   28e28:	10c4983a 	sll	r2,r2,r3
   28e2c:	88a2b03a 	or	r17,r17,r2
   28e30:	8822c03a 	cmpne	r17,r17,zero
   28e34:	2462b03a 	or	r17,r4,r17
   28e38:	0007883a 	mov	r3,zero
   28e3c:	0021883a 	mov	r16,zero
   28e40:	003f6d06 	br	28bf8 <__subdf3+0x20c>
   28e44:	11fff804 	addi	r7,r2,-32
   28e48:	01000804 	movi	r4,32
   28e4c:	29ced83a 	srl	r7,r5,r7
   28e50:	11004526 	beq	r2,r4,28f68 <__subdf3+0x57c>
   28e54:	01001004 	movi	r4,64
   28e58:	2089c83a 	sub	r4,r4,r2
   28e5c:	2904983a 	sll	r2,r5,r4
   28e60:	118cb03a 	or	r6,r2,r6
   28e64:	300cc03a 	cmpne	r6,r6,zero
   28e68:	398cb03a 	or	r6,r7,r6
   28e6c:	0005883a 	mov	r2,zero
   28e70:	003f3706 	br	28b50 <__subdf3+0x164>
   28e74:	80002a26 	beq	r16,zero,28f20 <__subdf3+0x534>
   28e78:	0101ffc4 	movi	r4,2047
   28e7c:	49006626 	beq	r9,r4,29018 <__subdf3+0x62c>
   28e80:	0085c83a 	sub	r2,zero,r2
   28e84:	18c02034 	orhi	r3,r3,128
   28e88:	01000e04 	movi	r4,56
   28e8c:	20807e16 	blt	r4,r2,29088 <__subdf3+0x69c>
   28e90:	010007c4 	movi	r4,31
   28e94:	2080e716 	blt	r4,r2,29234 <__subdf3+0x848>
   28e98:	01000804 	movi	r4,32
   28e9c:	2089c83a 	sub	r4,r4,r2
   28ea0:	1914983a 	sll	r10,r3,r4
   28ea4:	8890d83a 	srl	r8,r17,r2
   28ea8:	8908983a 	sll	r4,r17,r4
   28eac:	1884d83a 	srl	r2,r3,r2
   28eb0:	5222b03a 	or	r17,r10,r8
   28eb4:	2006c03a 	cmpne	r3,r4,zero
   28eb8:	88e2b03a 	or	r17,r17,r3
   28ebc:	3463c83a 	sub	r17,r6,r17
   28ec0:	2885c83a 	sub	r2,r5,r2
   28ec4:	344d803a 	cmpltu	r6,r6,r17
   28ec8:	1187c83a 	sub	r3,r2,r6
   28ecc:	4821883a 	mov	r16,r9
   28ed0:	3825883a 	mov	r18,r7
   28ed4:	003f2306 	br	28b64 <__subdf3+0x178>
   28ed8:	24d0b03a 	or	r8,r4,r19
   28edc:	40001b1e 	bne	r8,zero,28f4c <__subdf3+0x560>
   28ee0:	0005883a 	mov	r2,zero
   28ee4:	0009883a 	mov	r4,zero
   28ee8:	0021883a 	mov	r16,zero
   28eec:	003f4906 	br	28c14 <__subdf3+0x228>
   28ef0:	010007c4 	movi	r4,31
   28ef4:	20803a16 	blt	r4,r2,28fe0 <__subdf3+0x5f4>
   28ef8:	01000804 	movi	r4,32
   28efc:	2089c83a 	sub	r4,r4,r2
   28f00:	2912983a 	sll	r9,r5,r4
   28f04:	3090d83a 	srl	r8,r6,r2
   28f08:	3108983a 	sll	r4,r6,r4
   28f0c:	2884d83a 	srl	r2,r5,r2
   28f10:	4a12b03a 	or	r9,r9,r8
   28f14:	2008c03a 	cmpne	r4,r4,zero
   28f18:	4912b03a 	or	r9,r9,r4
   28f1c:	003f4e06 	br	28c58 <__subdf3+0x26c>
   28f20:	1c48b03a 	or	r4,r3,r17
   28f24:	20003c26 	beq	r4,zero,29018 <__subdf3+0x62c>
   28f28:	0084303a 	nor	r2,zero,r2
   28f2c:	1000381e 	bne	r2,zero,29010 <__subdf3+0x624>
   28f30:	3463c83a 	sub	r17,r6,r17
   28f34:	28c5c83a 	sub	r2,r5,r3
   28f38:	344d803a 	cmpltu	r6,r6,r17
   28f3c:	1187c83a 	sub	r3,r2,r6
   28f40:	4821883a 	mov	r16,r9
   28f44:	3825883a 	mov	r18,r7
   28f48:	003f0606 	br	28b64 <__subdf3+0x178>
   28f4c:	2023883a 	mov	r17,r4
   28f50:	003f0906 	br	28b78 <__subdf3+0x18c>
   28f54:	0101ffc4 	movi	r4,2047
   28f58:	813f3a1e 	bne	r16,r4,28c44 <__subdf3+0x258>
   28f5c:	003ec406 	br	28a70 <__subdf3+0x84>
   28f60:	0005883a 	mov	r2,zero
   28f64:	003fb106 	br	28e2c <__subdf3+0x440>
   28f68:	0005883a 	mov	r2,zero
   28f6c:	003fbc06 	br	28e60 <__subdf3+0x474>
   28f70:	1c44b03a 	or	r2,r3,r17
   28f74:	80008e1e 	bne	r16,zero,291b0 <__subdf3+0x7c4>
   28f78:	1000c826 	beq	r2,zero,2929c <__subdf3+0x8b0>
   28f7c:	2984b03a 	or	r2,r5,r6
   28f80:	103ebb26 	beq	r2,zero,28a70 <__subdf3+0x84>
   28f84:	8989883a 	add	r4,r17,r6
   28f88:	1945883a 	add	r2,r3,r5
   28f8c:	2447803a 	cmpltu	r3,r4,r17
   28f90:	1887883a 	add	r3,r3,r2
   28f94:	1880202c 	andhi	r2,r3,128
   28f98:	2023883a 	mov	r17,r4
   28f9c:	103f1626 	beq	r2,zero,28bf8 <__subdf3+0x20c>
   28fa0:	00bfe034 	movhi	r2,65408
   28fa4:	10bfffc4 	addi	r2,r2,-1
   28fa8:	5021883a 	mov	r16,r10
   28fac:	1886703a 	and	r3,r3,r2
   28fb0:	003eaf06 	br	28a70 <__subdf3+0x84>
   28fb4:	3825883a 	mov	r18,r7
   28fb8:	003f0f06 	br	28bf8 <__subdf3+0x20c>
   28fbc:	1c44b03a 	or	r2,r3,r17
   28fc0:	8000251e 	bne	r16,zero,29058 <__subdf3+0x66c>
   28fc4:	1000661e 	bne	r2,zero,29160 <__subdf3+0x774>
   28fc8:	2990b03a 	or	r8,r5,r6
   28fcc:	40009626 	beq	r8,zero,29228 <__subdf3+0x83c>
   28fd0:	2807883a 	mov	r3,r5
   28fd4:	3023883a 	mov	r17,r6
   28fd8:	3825883a 	mov	r18,r7
   28fdc:	003ea406 	br	28a70 <__subdf3+0x84>
   28fe0:	127ff804 	addi	r9,r2,-32
   28fe4:	01000804 	movi	r4,32
   28fe8:	2a52d83a 	srl	r9,r5,r9
   28fec:	11008c26 	beq	r2,r4,29220 <__subdf3+0x834>
   28ff0:	01001004 	movi	r4,64
   28ff4:	2085c83a 	sub	r2,r4,r2
   28ff8:	2884983a 	sll	r2,r5,r2
   28ffc:	118cb03a 	or	r6,r2,r6
   29000:	300cc03a 	cmpne	r6,r6,zero
   29004:	4992b03a 	or	r9,r9,r6
   29008:	0005883a 	mov	r2,zero
   2900c:	003f1206 	br	28c58 <__subdf3+0x26c>
   29010:	0101ffc4 	movi	r4,2047
   29014:	493f9c1e 	bne	r9,r4,28e88 <__subdf3+0x49c>
   29018:	2807883a 	mov	r3,r5
   2901c:	3023883a 	mov	r17,r6
   29020:	4821883a 	mov	r16,r9
   29024:	3825883a 	mov	r18,r7
   29028:	003e9106 	br	28a70 <__subdf3+0x84>
   2902c:	80001f1e 	bne	r16,zero,290ac <__subdf3+0x6c0>
   29030:	1c48b03a 	or	r4,r3,r17
   29034:	20005a26 	beq	r4,zero,291a0 <__subdf3+0x7b4>
   29038:	0084303a 	nor	r2,zero,r2
   2903c:	1000561e 	bne	r2,zero,29198 <__subdf3+0x7ac>
   29040:	89a3883a 	add	r17,r17,r6
   29044:	1945883a 	add	r2,r3,r5
   29048:	898d803a 	cmpltu	r6,r17,r6
   2904c:	3087883a 	add	r3,r6,r2
   29050:	4821883a 	mov	r16,r9
   29054:	003f0506 	br	28c6c <__subdf3+0x280>
   29058:	10002b1e 	bne	r2,zero,29108 <__subdf3+0x71c>
   2905c:	2984b03a 	or	r2,r5,r6
   29060:	10008026 	beq	r2,zero,29264 <__subdf3+0x878>
   29064:	2807883a 	mov	r3,r5
   29068:	3023883a 	mov	r17,r6
   2906c:	3825883a 	mov	r18,r7
   29070:	0401ffc4 	movi	r16,2047
   29074:	003e7e06 	br	28a70 <__subdf3+0x84>
   29078:	3809883a 	mov	r4,r7
   2907c:	0011883a 	mov	r8,zero
   29080:	0005883a 	mov	r2,zero
   29084:	003ee306 	br	28c14 <__subdf3+0x228>
   29088:	1c62b03a 	or	r17,r3,r17
   2908c:	8822c03a 	cmpne	r17,r17,zero
   29090:	0005883a 	mov	r2,zero
   29094:	003f8906 	br	28ebc <__subdf3+0x4d0>
   29098:	3809883a 	mov	r4,r7
   2909c:	4821883a 	mov	r16,r9
   290a0:	0011883a 	mov	r8,zero
   290a4:	0005883a 	mov	r2,zero
   290a8:	003eda06 	br	28c14 <__subdf3+0x228>
   290ac:	0101ffc4 	movi	r4,2047
   290b0:	49003b26 	beq	r9,r4,291a0 <__subdf3+0x7b4>
   290b4:	0085c83a 	sub	r2,zero,r2
   290b8:	18c02034 	orhi	r3,r3,128
   290bc:	01000e04 	movi	r4,56
   290c0:	20806e16 	blt	r4,r2,2927c <__subdf3+0x890>
   290c4:	010007c4 	movi	r4,31
   290c8:	20807716 	blt	r4,r2,292a8 <__subdf3+0x8bc>
   290cc:	01000804 	movi	r4,32
   290d0:	2089c83a 	sub	r4,r4,r2
   290d4:	1914983a 	sll	r10,r3,r4
   290d8:	8890d83a 	srl	r8,r17,r2
   290dc:	8908983a 	sll	r4,r17,r4
   290e0:	1884d83a 	srl	r2,r3,r2
   290e4:	5222b03a 	or	r17,r10,r8
   290e8:	2006c03a 	cmpne	r3,r4,zero
   290ec:	88e2b03a 	or	r17,r17,r3
   290f0:	89a3883a 	add	r17,r17,r6
   290f4:	1145883a 	add	r2,r2,r5
   290f8:	898d803a 	cmpltu	r6,r17,r6
   290fc:	3087883a 	add	r3,r6,r2
   29100:	4821883a 	mov	r16,r9
   29104:	003ed906 	br	28c6c <__subdf3+0x280>
   29108:	2984b03a 	or	r2,r5,r6
   2910c:	10004226 	beq	r2,zero,29218 <__subdf3+0x82c>
   29110:	1808d0fa 	srli	r4,r3,3
   29114:	8822d0fa 	srli	r17,r17,3
   29118:	1806977a 	slli	r3,r3,29
   2911c:	2080022c 	andhi	r2,r4,8
   29120:	1c62b03a 	or	r17,r3,r17
   29124:	10000826 	beq	r2,zero,29148 <__subdf3+0x75c>
   29128:	2812d0fa 	srli	r9,r5,3
   2912c:	4880022c 	andhi	r2,r9,8
   29130:	1000051e 	bne	r2,zero,29148 <__subdf3+0x75c>
   29134:	300cd0fa 	srli	r6,r6,3
   29138:	2804977a 	slli	r2,r5,29
   2913c:	4809883a 	mov	r4,r9
   29140:	3825883a 	mov	r18,r7
   29144:	11a2b03a 	or	r17,r2,r6
   29148:	8806d77a 	srli	r3,r17,29
   2914c:	200890fa 	slli	r4,r4,3
   29150:	882290fa 	slli	r17,r17,3
   29154:	0401ffc4 	movi	r16,2047
   29158:	1906b03a 	or	r3,r3,r4
   2915c:	003e4406 	br	28a70 <__subdf3+0x84>
   29160:	2984b03a 	or	r2,r5,r6
   29164:	103e4226 	beq	r2,zero,28a70 <__subdf3+0x84>
   29168:	8989c83a 	sub	r4,r17,r6
   2916c:	8911803a 	cmpltu	r8,r17,r4
   29170:	1945c83a 	sub	r2,r3,r5
   29174:	1205c83a 	sub	r2,r2,r8
   29178:	1200202c 	andhi	r8,r2,128
   2917c:	403e9a26 	beq	r8,zero,28be8 <__subdf3+0x1fc>
   29180:	3463c83a 	sub	r17,r6,r17
   29184:	28c5c83a 	sub	r2,r5,r3
   29188:	344d803a 	cmpltu	r6,r6,r17
   2918c:	1187c83a 	sub	r3,r2,r6
   29190:	3825883a 	mov	r18,r7
   29194:	003e3606 	br	28a70 <__subdf3+0x84>
   29198:	0101ffc4 	movi	r4,2047
   2919c:	493fc71e 	bne	r9,r4,290bc <__subdf3+0x6d0>
   291a0:	2807883a 	mov	r3,r5
   291a4:	3023883a 	mov	r17,r6
   291a8:	4821883a 	mov	r16,r9
   291ac:	003e3006 	br	28a70 <__subdf3+0x84>
   291b0:	10003626 	beq	r2,zero,2928c <__subdf3+0x8a0>
   291b4:	2984b03a 	or	r2,r5,r6
   291b8:	10001726 	beq	r2,zero,29218 <__subdf3+0x82c>
   291bc:	1808d0fa 	srli	r4,r3,3
   291c0:	8822d0fa 	srli	r17,r17,3
   291c4:	1806977a 	slli	r3,r3,29
   291c8:	2080022c 	andhi	r2,r4,8
   291cc:	1c62b03a 	or	r17,r3,r17
   291d0:	10000726 	beq	r2,zero,291f0 <__subdf3+0x804>
   291d4:	2812d0fa 	srli	r9,r5,3
   291d8:	4880022c 	andhi	r2,r9,8
   291dc:	1000041e 	bne	r2,zero,291f0 <__subdf3+0x804>
   291e0:	300cd0fa 	srli	r6,r6,3
   291e4:	2804977a 	slli	r2,r5,29
   291e8:	4809883a 	mov	r4,r9
   291ec:	11a2b03a 	or	r17,r2,r6
   291f0:	8806d77a 	srli	r3,r17,29
   291f4:	200890fa 	slli	r4,r4,3
   291f8:	882290fa 	slli	r17,r17,3
   291fc:	3825883a 	mov	r18,r7
   29200:	1906b03a 	or	r3,r3,r4
   29204:	0401ffc4 	movi	r16,2047
   29208:	003e1906 	br	28a70 <__subdf3+0x84>
   2920c:	000b883a 	mov	r5,zero
   29210:	0005883a 	mov	r2,zero
   29214:	003e2e06 	br	28ad0 <__subdf3+0xe4>
   29218:	0401ffc4 	movi	r16,2047
   2921c:	003e1406 	br	28a70 <__subdf3+0x84>
   29220:	0005883a 	mov	r2,zero
   29224:	003f7506 	br	28ffc <__subdf3+0x610>
   29228:	0005883a 	mov	r2,zero
   2922c:	0009883a 	mov	r4,zero
   29230:	003e7806 	br	28c14 <__subdf3+0x228>
   29234:	123ff804 	addi	r8,r2,-32
   29238:	01000804 	movi	r4,32
   2923c:	1a10d83a 	srl	r8,r3,r8
   29240:	11002526 	beq	r2,r4,292d8 <__subdf3+0x8ec>
   29244:	01001004 	movi	r4,64
   29248:	2085c83a 	sub	r2,r4,r2
   2924c:	1884983a 	sll	r2,r3,r2
   29250:	1444b03a 	or	r2,r2,r17
   29254:	1004c03a 	cmpne	r2,r2,zero
   29258:	40a2b03a 	or	r17,r8,r2
   2925c:	0005883a 	mov	r2,zero
   29260:	003f1606 	br	28ebc <__subdf3+0x4d0>
   29264:	02000434 	movhi	r8,16
   29268:	0009883a 	mov	r4,zero
   2926c:	423fffc4 	addi	r8,r8,-1
   29270:	00bfffc4 	movi	r2,-1
   29274:	0401ffc4 	movi	r16,2047
   29278:	003e6606 	br	28c14 <__subdf3+0x228>
   2927c:	1c62b03a 	or	r17,r3,r17
   29280:	8822c03a 	cmpne	r17,r17,zero
   29284:	0005883a 	mov	r2,zero
   29288:	003f9906 	br	290f0 <__subdf3+0x704>
   2928c:	2807883a 	mov	r3,r5
   29290:	3023883a 	mov	r17,r6
   29294:	0401ffc4 	movi	r16,2047
   29298:	003df506 	br	28a70 <__subdf3+0x84>
   2929c:	2807883a 	mov	r3,r5
   292a0:	3023883a 	mov	r17,r6
   292a4:	003df206 	br	28a70 <__subdf3+0x84>
   292a8:	123ff804 	addi	r8,r2,-32
   292ac:	01000804 	movi	r4,32
   292b0:	1a10d83a 	srl	r8,r3,r8
   292b4:	11000a26 	beq	r2,r4,292e0 <__subdf3+0x8f4>
   292b8:	01001004 	movi	r4,64
   292bc:	2085c83a 	sub	r2,r4,r2
   292c0:	1884983a 	sll	r2,r3,r2
   292c4:	1444b03a 	or	r2,r2,r17
   292c8:	1004c03a 	cmpne	r2,r2,zero
   292cc:	40a2b03a 	or	r17,r8,r2
   292d0:	0005883a 	mov	r2,zero
   292d4:	003f8606 	br	290f0 <__subdf3+0x704>
   292d8:	0005883a 	mov	r2,zero
   292dc:	003fdc06 	br	29250 <__subdf3+0x864>
   292e0:	0005883a 	mov	r2,zero
   292e4:	003ff706 	br	292c4 <__subdf3+0x8d8>

000292e8 <__fixdfsi>:
   292e8:	280cd53a 	srli	r6,r5,20
   292ec:	00c00434 	movhi	r3,16
   292f0:	18ffffc4 	addi	r3,r3,-1
   292f4:	3181ffcc 	andi	r6,r6,2047
   292f8:	01c0ff84 	movi	r7,1022
   292fc:	28c6703a 	and	r3,r5,r3
   29300:	280ad7fa 	srli	r5,r5,31
   29304:	3980120e 	bge	r7,r6,29350 <__fixdfsi+0x68>
   29308:	00810744 	movi	r2,1053
   2930c:	11800c16 	blt	r2,r6,29340 <__fixdfsi+0x58>
   29310:	00810cc4 	movi	r2,1075
   29314:	1185c83a 	sub	r2,r2,r6
   29318:	01c007c4 	movi	r7,31
   2931c:	18c00434 	orhi	r3,r3,16
   29320:	38800d16 	blt	r7,r2,29358 <__fixdfsi+0x70>
   29324:	31befb44 	addi	r6,r6,-1043
   29328:	2084d83a 	srl	r2,r4,r2
   2932c:	1986983a 	sll	r3,r3,r6
   29330:	1884b03a 	or	r2,r3,r2
   29334:	28000726 	beq	r5,zero,29354 <__fixdfsi+0x6c>
   29338:	0085c83a 	sub	r2,zero,r2
   2933c:	f800283a 	ret
   29340:	00a00034 	movhi	r2,32768
   29344:	10bfffc4 	addi	r2,r2,-1
   29348:	2885883a 	add	r2,r5,r2
   2934c:	f800283a 	ret
   29350:	0005883a 	mov	r2,zero
   29354:	f800283a 	ret
   29358:	008104c4 	movi	r2,1043
   2935c:	1185c83a 	sub	r2,r2,r6
   29360:	1884d83a 	srl	r2,r3,r2
   29364:	003ff306 	br	29334 <__fixdfsi+0x4c>

00029368 <__floatsidf>:
   29368:	defffd04 	addi	sp,sp,-12
   2936c:	dfc00215 	stw	ra,8(sp)
   29370:	dc400115 	stw	r17,4(sp)
   29374:	dc000015 	stw	r16,0(sp)
   29378:	20002b26 	beq	r4,zero,29428 <__floatsidf+0xc0>
   2937c:	2023883a 	mov	r17,r4
   29380:	2020d7fa 	srli	r16,r4,31
   29384:	20002d16 	blt	r4,zero,2943c <__floatsidf+0xd4>
   29388:	8809883a 	mov	r4,r17
   2938c:	00297a40 	call	297a4 <__clzsi2>
   29390:	01410784 	movi	r5,1054
   29394:	288bc83a 	sub	r5,r5,r2
   29398:	01010cc4 	movi	r4,1075
   2939c:	2149c83a 	sub	r4,r4,r5
   293a0:	00c007c4 	movi	r3,31
   293a4:	1900160e 	bge	r3,r4,29400 <__floatsidf+0x98>
   293a8:	00c104c4 	movi	r3,1043
   293ac:	1947c83a 	sub	r3,r3,r5
   293b0:	88c6983a 	sll	r3,r17,r3
   293b4:	00800434 	movhi	r2,16
   293b8:	10bfffc4 	addi	r2,r2,-1
   293bc:	1886703a 	and	r3,r3,r2
   293c0:	2941ffcc 	andi	r5,r5,2047
   293c4:	800d883a 	mov	r6,r16
   293c8:	0005883a 	mov	r2,zero
   293cc:	280a953a 	slli	r5,r5,20
   293d0:	31803fcc 	andi	r6,r6,255
   293d4:	01000434 	movhi	r4,16
   293d8:	300c97fa 	slli	r6,r6,31
   293dc:	213fffc4 	addi	r4,r4,-1
   293e0:	1906703a 	and	r3,r3,r4
   293e4:	1946b03a 	or	r3,r3,r5
   293e8:	1986b03a 	or	r3,r3,r6
   293ec:	dfc00217 	ldw	ra,8(sp)
   293f0:	dc400117 	ldw	r17,4(sp)
   293f4:	dc000017 	ldw	r16,0(sp)
   293f8:	dec00304 	addi	sp,sp,12
   293fc:	f800283a 	ret
   29400:	00c002c4 	movi	r3,11
   29404:	1887c83a 	sub	r3,r3,r2
   29408:	88c6d83a 	srl	r3,r17,r3
   2940c:	8904983a 	sll	r2,r17,r4
   29410:	01000434 	movhi	r4,16
   29414:	213fffc4 	addi	r4,r4,-1
   29418:	2941ffcc 	andi	r5,r5,2047
   2941c:	1906703a 	and	r3,r3,r4
   29420:	800d883a 	mov	r6,r16
   29424:	003fe906 	br	293cc <__floatsidf+0x64>
   29428:	000d883a 	mov	r6,zero
   2942c:	000b883a 	mov	r5,zero
   29430:	0007883a 	mov	r3,zero
   29434:	0005883a 	mov	r2,zero
   29438:	003fe406 	br	293cc <__floatsidf+0x64>
   2943c:	0123c83a 	sub	r17,zero,r4
   29440:	003fd106 	br	29388 <__floatsidf+0x20>

00029444 <__floatunsidf>:
   29444:	defffe04 	addi	sp,sp,-8
   29448:	dc000015 	stw	r16,0(sp)
   2944c:	dfc00115 	stw	ra,4(sp)
   29450:	2021883a 	mov	r16,r4
   29454:	20002226 	beq	r4,zero,294e0 <__floatunsidf+0x9c>
   29458:	00297a40 	call	297a4 <__clzsi2>
   2945c:	01010784 	movi	r4,1054
   29460:	2089c83a 	sub	r4,r4,r2
   29464:	01810cc4 	movi	r6,1075
   29468:	310dc83a 	sub	r6,r6,r4
   2946c:	00c007c4 	movi	r3,31
   29470:	1980120e 	bge	r3,r6,294bc <__floatunsidf+0x78>
   29474:	00c104c4 	movi	r3,1043
   29478:	1907c83a 	sub	r3,r3,r4
   2947c:	80ca983a 	sll	r5,r16,r3
   29480:	00800434 	movhi	r2,16
   29484:	10bfffc4 	addi	r2,r2,-1
   29488:	2101ffcc 	andi	r4,r4,2047
   2948c:	0021883a 	mov	r16,zero
   29490:	288a703a 	and	r5,r5,r2
   29494:	2008953a 	slli	r4,r4,20
   29498:	00c00434 	movhi	r3,16
   2949c:	18ffffc4 	addi	r3,r3,-1
   294a0:	28c6703a 	and	r3,r5,r3
   294a4:	8005883a 	mov	r2,r16
   294a8:	1906b03a 	or	r3,r3,r4
   294ac:	dfc00117 	ldw	ra,4(sp)
   294b0:	dc000017 	ldw	r16,0(sp)
   294b4:	dec00204 	addi	sp,sp,8
   294b8:	f800283a 	ret
   294bc:	00c002c4 	movi	r3,11
   294c0:	188bc83a 	sub	r5,r3,r2
   294c4:	814ad83a 	srl	r5,r16,r5
   294c8:	00c00434 	movhi	r3,16
   294cc:	18ffffc4 	addi	r3,r3,-1
   294d0:	81a0983a 	sll	r16,r16,r6
   294d4:	2101ffcc 	andi	r4,r4,2047
   294d8:	28ca703a 	and	r5,r5,r3
   294dc:	003fed06 	br	29494 <__floatunsidf+0x50>
   294e0:	0009883a 	mov	r4,zero
   294e4:	000b883a 	mov	r5,zero
   294e8:	003fea06 	br	29494 <__floatunsidf+0x50>

000294ec <__extendsfdf2>:
   294ec:	200ad5fa 	srli	r5,r4,23
   294f0:	defffd04 	addi	sp,sp,-12
   294f4:	dc400115 	stw	r17,4(sp)
   294f8:	29403fcc 	andi	r5,r5,255
   294fc:	29800044 	addi	r6,r5,1
   29500:	04402034 	movhi	r17,128
   29504:	dc000015 	stw	r16,0(sp)
   29508:	8c7fffc4 	addi	r17,r17,-1
   2950c:	dfc00215 	stw	ra,8(sp)
   29510:	31803fcc 	andi	r6,r6,255
   29514:	00800044 	movi	r2,1
   29518:	8922703a 	and	r17,r17,r4
   2951c:	2020d7fa 	srli	r16,r4,31
   29520:	1180110e 	bge	r2,r6,29568 <__extendsfdf2+0x7c>
   29524:	880cd0fa 	srli	r6,r17,3
   29528:	8822977a 	slli	r17,r17,29
   2952c:	2940e004 	addi	r5,r5,896
   29530:	2941ffcc 	andi	r5,r5,2047
   29534:	2804953a 	slli	r2,r5,20
   29538:	01400434 	movhi	r5,16
   2953c:	800697fa 	slli	r3,r16,31
   29540:	297fffc4 	addi	r5,r5,-1
   29544:	314a703a 	and	r5,r6,r5
   29548:	288ab03a 	or	r5,r5,r2
   2954c:	28c6b03a 	or	r3,r5,r3
   29550:	8805883a 	mov	r2,r17
   29554:	dfc00217 	ldw	ra,8(sp)
   29558:	dc400117 	ldw	r17,4(sp)
   2955c:	dc000017 	ldw	r16,0(sp)
   29560:	dec00304 	addi	sp,sp,12
   29564:	f800283a 	ret
   29568:	2800111e 	bne	r5,zero,295b0 <__extendsfdf2+0xc4>
   2956c:	88001c26 	beq	r17,zero,295e0 <__extendsfdf2+0xf4>
   29570:	8809883a 	mov	r4,r17
   29574:	00297a40 	call	297a4 <__clzsi2>
   29578:	00c00284 	movi	r3,10
   2957c:	18801b16 	blt	r3,r2,295ec <__extendsfdf2+0x100>
   29580:	018002c4 	movi	r6,11
   29584:	308dc83a 	sub	r6,r6,r2
   29588:	11000544 	addi	r4,r2,21
   2958c:	8986d83a 	srl	r3,r17,r6
   29590:	8922983a 	sll	r17,r17,r4
   29594:	0180e244 	movi	r6,905
   29598:	01400434 	movhi	r5,16
   2959c:	3085c83a 	sub	r2,r6,r2
   295a0:	297fffc4 	addi	r5,r5,-1
   295a4:	194c703a 	and	r6,r3,r5
   295a8:	1141ffcc 	andi	r5,r2,2047
   295ac:	003fe006 	br	29530 <__extendsfdf2+0x44>
   295b0:	88000826 	beq	r17,zero,295d4 <__extendsfdf2+0xe8>
   295b4:	880cd0fa 	srli	r6,r17,3
   295b8:	00800434 	movhi	r2,16
   295bc:	10bfffc4 	addi	r2,r2,-1
   295c0:	31800234 	orhi	r6,r6,8
   295c4:	8822977a 	slli	r17,r17,29
   295c8:	308c703a 	and	r6,r6,r2
   295cc:	0141ffc4 	movi	r5,2047
   295d0:	003fd706 	br	29530 <__extendsfdf2+0x44>
   295d4:	0141ffc4 	movi	r5,2047
   295d8:	000d883a 	mov	r6,zero
   295dc:	003fd406 	br	29530 <__extendsfdf2+0x44>
   295e0:	000b883a 	mov	r5,zero
   295e4:	000d883a 	mov	r6,zero
   295e8:	003fd106 	br	29530 <__extendsfdf2+0x44>
   295ec:	11bffd44 	addi	r6,r2,-11
   295f0:	8986983a 	sll	r3,r17,r6
   295f4:	0023883a 	mov	r17,zero
   295f8:	003fe606 	br	29594 <__extendsfdf2+0xa8>

000295fc <__truncdfsf2>:
   295fc:	2810d53a 	srli	r8,r5,20
   29600:	01c00434 	movhi	r7,16
   29604:	39ffffc4 	addi	r7,r7,-1
   29608:	29ce703a 	and	r7,r5,r7
   2960c:	4201ffcc 	andi	r8,r8,2047
   29610:	380e90fa 	slli	r7,r7,3
   29614:	200cd77a 	srli	r6,r4,29
   29618:	42400044 	addi	r9,r8,1
   2961c:	4a41ffcc 	andi	r9,r9,2047
   29620:	00c00044 	movi	r3,1
   29624:	280ad7fa 	srli	r5,r5,31
   29628:	31ceb03a 	or	r7,r6,r7
   2962c:	200490fa 	slli	r2,r4,3
   29630:	1a40230e 	bge	r3,r9,296c0 <__truncdfsf2+0xc4>
   29634:	40ff2004 	addi	r3,r8,-896
   29638:	01803f84 	movi	r6,254
   2963c:	30c01516 	blt	r6,r3,29694 <__truncdfsf2+0x98>
   29640:	00c0380e 	bge	zero,r3,29724 <__truncdfsf2+0x128>
   29644:	200c91ba 	slli	r6,r4,6
   29648:	380e90fa 	slli	r7,r7,3
   2964c:	1004d77a 	srli	r2,r2,29
   29650:	300cc03a 	cmpne	r6,r6,zero
   29654:	31ccb03a 	or	r6,r6,r7
   29658:	308cb03a 	or	r6,r6,r2
   2965c:	308001cc 	andi	r2,r6,7
   29660:	10000426 	beq	r2,zero,29674 <__truncdfsf2+0x78>
   29664:	308003cc 	andi	r2,r6,15
   29668:	01000104 	movi	r4,4
   2966c:	11000126 	beq	r2,r4,29674 <__truncdfsf2+0x78>
   29670:	31800104 	addi	r6,r6,4
   29674:	3081002c 	andhi	r2,r6,1024
   29678:	10001626 	beq	r2,zero,296d4 <__truncdfsf2+0xd8>
   2967c:	18c00044 	addi	r3,r3,1
   29680:	00803fc4 	movi	r2,255
   29684:	18800326 	beq	r3,r2,29694 <__truncdfsf2+0x98>
   29688:	300c91ba 	slli	r6,r6,6
   2968c:	300cd27a 	srli	r6,r6,9
   29690:	00000206 	br	2969c <__truncdfsf2+0xa0>
   29694:	00ffffc4 	movi	r3,-1
   29698:	000d883a 	mov	r6,zero
   2969c:	18c03fcc 	andi	r3,r3,255
   296a0:	180895fa 	slli	r4,r3,23
   296a4:	00c02034 	movhi	r3,128
   296a8:	280a97fa 	slli	r5,r5,31
   296ac:	18ffffc4 	addi	r3,r3,-1
   296b0:	30c6703a 	and	r3,r6,r3
   296b4:	1906b03a 	or	r3,r3,r4
   296b8:	1944b03a 	or	r2,r3,r5
   296bc:	f800283a 	ret
   296c0:	40000b1e 	bne	r8,zero,296f0 <__truncdfsf2+0xf4>
   296c4:	388cb03a 	or	r6,r7,r2
   296c8:	0007883a 	mov	r3,zero
   296cc:	30000426 	beq	r6,zero,296e0 <__truncdfsf2+0xe4>
   296d0:	01800144 	movi	r6,5
   296d4:	00803fc4 	movi	r2,255
   296d8:	300cd0fa 	srli	r6,r6,3
   296dc:	18800a26 	beq	r3,r2,29708 <__truncdfsf2+0x10c>
   296e0:	00802034 	movhi	r2,128
   296e4:	10bfffc4 	addi	r2,r2,-1
   296e8:	308c703a 	and	r6,r6,r2
   296ec:	003feb06 	br	2969c <__truncdfsf2+0xa0>
   296f0:	3888b03a 	or	r4,r7,r2
   296f4:	203fe726 	beq	r4,zero,29694 <__truncdfsf2+0x98>
   296f8:	380c90fa 	slli	r6,r7,3
   296fc:	00c03fc4 	movi	r3,255
   29700:	31808034 	orhi	r6,r6,512
   29704:	003fd506 	br	2965c <__truncdfsf2+0x60>
   29708:	303fe226 	beq	r6,zero,29694 <__truncdfsf2+0x98>
   2970c:	00802034 	movhi	r2,128
   29710:	31801034 	orhi	r6,r6,64
   29714:	10bfffc4 	addi	r2,r2,-1
   29718:	00ffffc4 	movi	r3,-1
   2971c:	308c703a 	and	r6,r6,r2
   29720:	003fde06 	br	2969c <__truncdfsf2+0xa0>
   29724:	013ffa44 	movi	r4,-23
   29728:	19000e16 	blt	r3,r4,29764 <__truncdfsf2+0x168>
   2972c:	01000784 	movi	r4,30
   29730:	20c9c83a 	sub	r4,r4,r3
   29734:	018007c4 	movi	r6,31
   29738:	39c02034 	orhi	r7,r7,128
   2973c:	31000b16 	blt	r6,r4,2976c <__truncdfsf2+0x170>
   29740:	423f2084 	addi	r8,r8,-894
   29744:	120c983a 	sll	r6,r2,r8
   29748:	3a0e983a 	sll	r7,r7,r8
   2974c:	1104d83a 	srl	r2,r2,r4
   29750:	300cc03a 	cmpne	r6,r6,zero
   29754:	31ceb03a 	or	r7,r6,r7
   29758:	388cb03a 	or	r6,r7,r2
   2975c:	0007883a 	mov	r3,zero
   29760:	003fbe06 	br	2965c <__truncdfsf2+0x60>
   29764:	0007883a 	mov	r3,zero
   29768:	003fd906 	br	296d0 <__truncdfsf2+0xd4>
   2976c:	01bfff84 	movi	r6,-2
   29770:	30cdc83a 	sub	r6,r6,r3
   29774:	00c00804 	movi	r3,32
   29778:	398cd83a 	srl	r6,r7,r6
   2977c:	20c00726 	beq	r4,r3,2979c <__truncdfsf2+0x1a0>
   29780:	423f2884 	addi	r8,r8,-862
   29784:	3a0e983a 	sll	r7,r7,r8
   29788:	3884b03a 	or	r2,r7,r2
   2978c:	1004c03a 	cmpne	r2,r2,zero
   29790:	118cb03a 	or	r6,r2,r6
   29794:	0007883a 	mov	r3,zero
   29798:	003fb006 	br	2965c <__truncdfsf2+0x60>
   2979c:	000f883a 	mov	r7,zero
   297a0:	003ff906 	br	29788 <__truncdfsf2+0x18c>

000297a4 <__clzsi2>:
   297a4:	00bfffd4 	movui	r2,65535
   297a8:	11000536 	bltu	r2,r4,297c0 <__clzsi2+0x1c>
   297ac:	00803fc4 	movi	r2,255
   297b0:	11000f36 	bltu	r2,r4,297f0 <__clzsi2+0x4c>
   297b4:	00800804 	movi	r2,32
   297b8:	0007883a 	mov	r3,zero
   297bc:	00000506 	br	297d4 <__clzsi2+0x30>
   297c0:	00804034 	movhi	r2,256
   297c4:	10bfffc4 	addi	r2,r2,-1
   297c8:	11000c2e 	bgeu	r2,r4,297fc <__clzsi2+0x58>
   297cc:	00800204 	movi	r2,8
   297d0:	00c00604 	movi	r3,24
   297d4:	20c8d83a 	srl	r4,r4,r3
   297d8:	00c00134 	movhi	r3,4
   297dc:	18e09b04 	addi	r3,r3,-32148
   297e0:	1909883a 	add	r4,r3,r4
   297e4:	20c00003 	ldbu	r3,0(r4)
   297e8:	10c5c83a 	sub	r2,r2,r3
   297ec:	f800283a 	ret
   297f0:	00800604 	movi	r2,24
   297f4:	00c00204 	movi	r3,8
   297f8:	003ff606 	br	297d4 <__clzsi2+0x30>
   297fc:	00800404 	movi	r2,16
   29800:	1007883a 	mov	r3,r2
   29804:	003ff306 	br	297d4 <__clzsi2+0x30>

00029808 <atoi>:
   29808:	01800284 	movi	r6,10
   2980c:	000b883a 	mov	r5,zero
   29810:	002c9541 	jmpi	2c954 <strtol>

00029814 <_atoi_r>:
   29814:	01c00284 	movi	r7,10
   29818:	000d883a 	mov	r6,zero
   2981c:	002c71c1 	jmpi	2c71c <_strtol_r>

00029820 <__errno>:
   29820:	00800134 	movhi	r2,4
   29824:	10ae9f04 	addi	r2,r2,-17796
   29828:	10800017 	ldw	r2,0(r2)
   2982c:	f800283a 	ret

00029830 <exit>:
   29830:	defffe04 	addi	sp,sp,-8
   29834:	000b883a 	mov	r5,zero
   29838:	dc000015 	stw	r16,0(sp)
   2983c:	dfc00115 	stw	ra,4(sp)
   29840:	2021883a 	mov	r16,r4
   29844:	002ee500 	call	2ee50 <__call_exitprocs>
   29848:	00800134 	movhi	r2,4
   2984c:	10ae9e04 	addi	r2,r2,-17800
   29850:	11000017 	ldw	r4,0(r2)
   29854:	20800f17 	ldw	r2,60(r4)
   29858:	10000126 	beq	r2,zero,29860 <exit+0x30>
   2985c:	103ee83a 	callr	r2
   29860:	8009883a 	mov	r4,r16
   29864:	00353240 	call	35324 <_exit>

00029868 <_fclose_r>:
   29868:	28003926 	beq	r5,zero,29950 <_fclose_r+0xe8>
   2986c:	defffc04 	addi	sp,sp,-16
   29870:	dc400115 	stw	r17,4(sp)
   29874:	dc000015 	stw	r16,0(sp)
   29878:	dfc00315 	stw	ra,12(sp)
   2987c:	dc800215 	stw	r18,8(sp)
   29880:	2023883a 	mov	r17,r4
   29884:	2821883a 	mov	r16,r5
   29888:	20000226 	beq	r4,zero,29894 <_fclose_r+0x2c>
   2988c:	20800e17 	ldw	r2,56(r4)
   29890:	10002726 	beq	r2,zero,29930 <_fclose_r+0xc8>
   29894:	8080030f 	ldh	r2,12(r16)
   29898:	1000071e 	bne	r2,zero,298b8 <_fclose_r+0x50>
   2989c:	0005883a 	mov	r2,zero
   298a0:	dfc00317 	ldw	ra,12(sp)
   298a4:	dc800217 	ldw	r18,8(sp)
   298a8:	dc400117 	ldw	r17,4(sp)
   298ac:	dc000017 	ldw	r16,0(sp)
   298b0:	dec00404 	addi	sp,sp,16
   298b4:	f800283a 	ret
   298b8:	800b883a 	mov	r5,r16
   298bc:	8809883a 	mov	r4,r17
   298c0:	002996c0 	call	2996c <__sflush_r>
   298c4:	1025883a 	mov	r18,r2
   298c8:	80800b17 	ldw	r2,44(r16)
   298cc:	10000426 	beq	r2,zero,298e0 <_fclose_r+0x78>
   298d0:	81400717 	ldw	r5,28(r16)
   298d4:	8809883a 	mov	r4,r17
   298d8:	103ee83a 	callr	r2
   298dc:	10001616 	blt	r2,zero,29938 <_fclose_r+0xd0>
   298e0:	8080030b 	ldhu	r2,12(r16)
   298e4:	1080200c 	andi	r2,r2,128
   298e8:	1000151e 	bne	r2,zero,29940 <_fclose_r+0xd8>
   298ec:	81400c17 	ldw	r5,48(r16)
   298f0:	28000526 	beq	r5,zero,29908 <_fclose_r+0xa0>
   298f4:	80801004 	addi	r2,r16,64
   298f8:	28800226 	beq	r5,r2,29904 <_fclose_r+0x9c>
   298fc:	8809883a 	mov	r4,r17
   29900:	002a1e40 	call	2a1e4 <_free_r>
   29904:	80000c15 	stw	zero,48(r16)
   29908:	81401117 	ldw	r5,68(r16)
   2990c:	28000326 	beq	r5,zero,2991c <_fclose_r+0xb4>
   29910:	8809883a 	mov	r4,r17
   29914:	002a1e40 	call	2a1e4 <_free_r>
   29918:	80001115 	stw	zero,68(r16)
   2991c:	0029f740 	call	29f74 <__sfp_lock_acquire>
   29920:	8000030d 	sth	zero,12(r16)
   29924:	0029f780 	call	29f78 <__sfp_lock_release>
   29928:	9005883a 	mov	r2,r18
   2992c:	003fdc06 	br	298a0 <_fclose_r+0x38>
   29930:	0029f640 	call	29f64 <__sinit>
   29934:	003fd706 	br	29894 <_fclose_r+0x2c>
   29938:	04bfffc4 	movi	r18,-1
   2993c:	003fe806 	br	298e0 <_fclose_r+0x78>
   29940:	81400417 	ldw	r5,16(r16)
   29944:	8809883a 	mov	r4,r17
   29948:	002a1e40 	call	2a1e4 <_free_r>
   2994c:	003fe706 	br	298ec <_fclose_r+0x84>
   29950:	0005883a 	mov	r2,zero
   29954:	f800283a 	ret

00029958 <fclose>:
   29958:	00800134 	movhi	r2,4
   2995c:	10ae9f04 	addi	r2,r2,-17796
   29960:	200b883a 	mov	r5,r4
   29964:	11000017 	ldw	r4,0(r2)
   29968:	00298681 	jmpi	29868 <_fclose_r>

0002996c <__sflush_r>:
   2996c:	2880030b 	ldhu	r2,12(r5)
   29970:	defffb04 	addi	sp,sp,-20
   29974:	dcc00315 	stw	r19,12(sp)
   29978:	dc400115 	stw	r17,4(sp)
   2997c:	dfc00415 	stw	ra,16(sp)
   29980:	dc800215 	stw	r18,8(sp)
   29984:	dc000015 	stw	r16,0(sp)
   29988:	10c0020c 	andi	r3,r2,8
   2998c:	2823883a 	mov	r17,r5
   29990:	2027883a 	mov	r19,r4
   29994:	1800311e 	bne	r3,zero,29a5c <__sflush_r+0xf0>
   29998:	28c00117 	ldw	r3,4(r5)
   2999c:	10820014 	ori	r2,r2,2048
   299a0:	2880030d 	sth	r2,12(r5)
   299a4:	00c04b0e 	bge	zero,r3,29ad4 <__sflush_r+0x168>
   299a8:	8a000a17 	ldw	r8,40(r17)
   299ac:	40002326 	beq	r8,zero,29a3c <__sflush_r+0xd0>
   299b0:	9c000017 	ldw	r16,0(r19)
   299b4:	10c4000c 	andi	r3,r2,4096
   299b8:	98000015 	stw	zero,0(r19)
   299bc:	18004826 	beq	r3,zero,29ae0 <__sflush_r+0x174>
   299c0:	89801417 	ldw	r6,80(r17)
   299c4:	10c0010c 	andi	r3,r2,4
   299c8:	18000626 	beq	r3,zero,299e4 <__sflush_r+0x78>
   299cc:	88c00117 	ldw	r3,4(r17)
   299d0:	88800c17 	ldw	r2,48(r17)
   299d4:	30cdc83a 	sub	r6,r6,r3
   299d8:	10000226 	beq	r2,zero,299e4 <__sflush_r+0x78>
   299dc:	88800f17 	ldw	r2,60(r17)
   299e0:	308dc83a 	sub	r6,r6,r2
   299e4:	89400717 	ldw	r5,28(r17)
   299e8:	000f883a 	mov	r7,zero
   299ec:	9809883a 	mov	r4,r19
   299f0:	403ee83a 	callr	r8
   299f4:	00ffffc4 	movi	r3,-1
   299f8:	10c04426 	beq	r2,r3,29b0c <__sflush_r+0x1a0>
   299fc:	88c0030b 	ldhu	r3,12(r17)
   29a00:	89000417 	ldw	r4,16(r17)
   29a04:	88000115 	stw	zero,4(r17)
   29a08:	197dffcc 	andi	r5,r3,63487
   29a0c:	8940030d 	sth	r5,12(r17)
   29a10:	89000015 	stw	r4,0(r17)
   29a14:	18c4000c 	andi	r3,r3,4096
   29a18:	18002c1e 	bne	r3,zero,29acc <__sflush_r+0x160>
   29a1c:	89400c17 	ldw	r5,48(r17)
   29a20:	9c000015 	stw	r16,0(r19)
   29a24:	28000526 	beq	r5,zero,29a3c <__sflush_r+0xd0>
   29a28:	88801004 	addi	r2,r17,64
   29a2c:	28800226 	beq	r5,r2,29a38 <__sflush_r+0xcc>
   29a30:	9809883a 	mov	r4,r19
   29a34:	002a1e40 	call	2a1e4 <_free_r>
   29a38:	88000c15 	stw	zero,48(r17)
   29a3c:	0005883a 	mov	r2,zero
   29a40:	dfc00417 	ldw	ra,16(sp)
   29a44:	dcc00317 	ldw	r19,12(sp)
   29a48:	dc800217 	ldw	r18,8(sp)
   29a4c:	dc400117 	ldw	r17,4(sp)
   29a50:	dc000017 	ldw	r16,0(sp)
   29a54:	dec00504 	addi	sp,sp,20
   29a58:	f800283a 	ret
   29a5c:	2c800417 	ldw	r18,16(r5)
   29a60:	903ff626 	beq	r18,zero,29a3c <__sflush_r+0xd0>
   29a64:	2c000017 	ldw	r16,0(r5)
   29a68:	108000cc 	andi	r2,r2,3
   29a6c:	2c800015 	stw	r18,0(r5)
   29a70:	84a1c83a 	sub	r16,r16,r18
   29a74:	1000131e 	bne	r2,zero,29ac4 <__sflush_r+0x158>
   29a78:	28800517 	ldw	r2,20(r5)
   29a7c:	88800215 	stw	r2,8(r17)
   29a80:	04000316 	blt	zero,r16,29a90 <__sflush_r+0x124>
   29a84:	003fed06 	br	29a3c <__sflush_r+0xd0>
   29a88:	90a5883a 	add	r18,r18,r2
   29a8c:	043feb0e 	bge	zero,r16,29a3c <__sflush_r+0xd0>
   29a90:	88800917 	ldw	r2,36(r17)
   29a94:	89400717 	ldw	r5,28(r17)
   29a98:	800f883a 	mov	r7,r16
   29a9c:	900d883a 	mov	r6,r18
   29aa0:	9809883a 	mov	r4,r19
   29aa4:	103ee83a 	callr	r2
   29aa8:	80a1c83a 	sub	r16,r16,r2
   29aac:	00bff616 	blt	zero,r2,29a88 <__sflush_r+0x11c>
   29ab0:	88c0030b 	ldhu	r3,12(r17)
   29ab4:	00bfffc4 	movi	r2,-1
   29ab8:	18c01014 	ori	r3,r3,64
   29abc:	88c0030d 	sth	r3,12(r17)
   29ac0:	003fdf06 	br	29a40 <__sflush_r+0xd4>
   29ac4:	0005883a 	mov	r2,zero
   29ac8:	003fec06 	br	29a7c <__sflush_r+0x110>
   29acc:	88801415 	stw	r2,80(r17)
   29ad0:	003fd206 	br	29a1c <__sflush_r+0xb0>
   29ad4:	28c00f17 	ldw	r3,60(r5)
   29ad8:	00ffb316 	blt	zero,r3,299a8 <__sflush_r+0x3c>
   29adc:	003fd706 	br	29a3c <__sflush_r+0xd0>
   29ae0:	89400717 	ldw	r5,28(r17)
   29ae4:	000d883a 	mov	r6,zero
   29ae8:	01c00044 	movi	r7,1
   29aec:	9809883a 	mov	r4,r19
   29af0:	403ee83a 	callr	r8
   29af4:	100d883a 	mov	r6,r2
   29af8:	00bfffc4 	movi	r2,-1
   29afc:	30801426 	beq	r6,r2,29b50 <__sflush_r+0x1e4>
   29b00:	8880030b 	ldhu	r2,12(r17)
   29b04:	8a000a17 	ldw	r8,40(r17)
   29b08:	003fae06 	br	299c4 <__sflush_r+0x58>
   29b0c:	98c00017 	ldw	r3,0(r19)
   29b10:	183fba26 	beq	r3,zero,299fc <__sflush_r+0x90>
   29b14:	01000744 	movi	r4,29
   29b18:	19000626 	beq	r3,r4,29b34 <__sflush_r+0x1c8>
   29b1c:	01000584 	movi	r4,22
   29b20:	19000426 	beq	r3,r4,29b34 <__sflush_r+0x1c8>
   29b24:	88c0030b 	ldhu	r3,12(r17)
   29b28:	18c01014 	ori	r3,r3,64
   29b2c:	88c0030d 	sth	r3,12(r17)
   29b30:	003fc306 	br	29a40 <__sflush_r+0xd4>
   29b34:	8880030b 	ldhu	r2,12(r17)
   29b38:	88c00417 	ldw	r3,16(r17)
   29b3c:	88000115 	stw	zero,4(r17)
   29b40:	10bdffcc 	andi	r2,r2,63487
   29b44:	8880030d 	sth	r2,12(r17)
   29b48:	88c00015 	stw	r3,0(r17)
   29b4c:	003fb306 	br	29a1c <__sflush_r+0xb0>
   29b50:	98800017 	ldw	r2,0(r19)
   29b54:	103fea26 	beq	r2,zero,29b00 <__sflush_r+0x194>
   29b58:	00c00744 	movi	r3,29
   29b5c:	10c00226 	beq	r2,r3,29b68 <__sflush_r+0x1fc>
   29b60:	00c00584 	movi	r3,22
   29b64:	10c0031e 	bne	r2,r3,29b74 <__sflush_r+0x208>
   29b68:	9c000015 	stw	r16,0(r19)
   29b6c:	0005883a 	mov	r2,zero
   29b70:	003fb306 	br	29a40 <__sflush_r+0xd4>
   29b74:	88c0030b 	ldhu	r3,12(r17)
   29b78:	3005883a 	mov	r2,r6
   29b7c:	18c01014 	ori	r3,r3,64
   29b80:	88c0030d 	sth	r3,12(r17)
   29b84:	003fae06 	br	29a40 <__sflush_r+0xd4>

00029b88 <_fflush_r>:
   29b88:	defffd04 	addi	sp,sp,-12
   29b8c:	dc000115 	stw	r16,4(sp)
   29b90:	dfc00215 	stw	ra,8(sp)
   29b94:	2021883a 	mov	r16,r4
   29b98:	20000226 	beq	r4,zero,29ba4 <_fflush_r+0x1c>
   29b9c:	20800e17 	ldw	r2,56(r4)
   29ba0:	10000c26 	beq	r2,zero,29bd4 <_fflush_r+0x4c>
   29ba4:	2880030f 	ldh	r2,12(r5)
   29ba8:	1000051e 	bne	r2,zero,29bc0 <_fflush_r+0x38>
   29bac:	0005883a 	mov	r2,zero
   29bb0:	dfc00217 	ldw	ra,8(sp)
   29bb4:	dc000117 	ldw	r16,4(sp)
   29bb8:	dec00304 	addi	sp,sp,12
   29bbc:	f800283a 	ret
   29bc0:	8009883a 	mov	r4,r16
   29bc4:	dfc00217 	ldw	ra,8(sp)
   29bc8:	dc000117 	ldw	r16,4(sp)
   29bcc:	dec00304 	addi	sp,sp,12
   29bd0:	002996c1 	jmpi	2996c <__sflush_r>
   29bd4:	d9400015 	stw	r5,0(sp)
   29bd8:	0029f640 	call	29f64 <__sinit>
   29bdc:	d9400017 	ldw	r5,0(sp)
   29be0:	003ff006 	br	29ba4 <_fflush_r+0x1c>

00029be4 <fflush>:
   29be4:	20000526 	beq	r4,zero,29bfc <fflush+0x18>
   29be8:	00800134 	movhi	r2,4
   29bec:	10ae9f04 	addi	r2,r2,-17796
   29bf0:	200b883a 	mov	r5,r4
   29bf4:	11000017 	ldw	r4,0(r2)
   29bf8:	0029b881 	jmpi	29b88 <_fflush_r>
   29bfc:	00800134 	movhi	r2,4
   29c00:	10ae9e04 	addi	r2,r2,-17800
   29c04:	11000017 	ldw	r4,0(r2)
   29c08:	014000f4 	movhi	r5,3
   29c0c:	2966e204 	addi	r5,r5,-25720
   29c10:	002aa941 	jmpi	2aa94 <_fwalk_reent>

00029c14 <__fp_unlock>:
   29c14:	0005883a 	mov	r2,zero
   29c18:	f800283a 	ret

00029c1c <_cleanup_r>:
   29c1c:	014000f4 	movhi	r5,3
   29c20:	29661a04 	addi	r5,r5,-26520
   29c24:	002aa941 	jmpi	2aa94 <_fwalk_reent>

00029c28 <__sinit.part.1>:
   29c28:	defff704 	addi	sp,sp,-36
   29c2c:	00c000f4 	movhi	r3,3
   29c30:	dfc00815 	stw	ra,32(sp)
   29c34:	ddc00715 	stw	r23,28(sp)
   29c38:	dd800615 	stw	r22,24(sp)
   29c3c:	dd400515 	stw	r21,20(sp)
   29c40:	dd000415 	stw	r20,16(sp)
   29c44:	dcc00315 	stw	r19,12(sp)
   29c48:	dc800215 	stw	r18,8(sp)
   29c4c:	dc400115 	stw	r17,4(sp)
   29c50:	dc000015 	stw	r16,0(sp)
   29c54:	18e70704 	addi	r3,r3,-25572
   29c58:	24000117 	ldw	r16,4(r4)
   29c5c:	20c00f15 	stw	r3,60(r4)
   29c60:	2080bb04 	addi	r2,r4,748
   29c64:	00c000c4 	movi	r3,3
   29c68:	20c0b915 	stw	r3,740(r4)
   29c6c:	2080ba15 	stw	r2,744(r4)
   29c70:	2000b815 	stw	zero,736(r4)
   29c74:	05c00204 	movi	r23,8
   29c78:	00800104 	movi	r2,4
   29c7c:	2025883a 	mov	r18,r4
   29c80:	b80d883a 	mov	r6,r23
   29c84:	81001704 	addi	r4,r16,92
   29c88:	000b883a 	mov	r5,zero
   29c8c:	80000015 	stw	zero,0(r16)
   29c90:	80000115 	stw	zero,4(r16)
   29c94:	80000215 	stw	zero,8(r16)
   29c98:	8080030d 	sth	r2,12(r16)
   29c9c:	80001915 	stw	zero,100(r16)
   29ca0:	8000038d 	sth	zero,14(r16)
   29ca4:	80000415 	stw	zero,16(r16)
   29ca8:	80000515 	stw	zero,20(r16)
   29cac:	80000615 	stw	zero,24(r16)
   29cb0:	002b8880 	call	2b888 <memset>
   29cb4:	058000f4 	movhi	r22,3
   29cb8:	94400217 	ldw	r17,8(r18)
   29cbc:	054000f4 	movhi	r21,3
   29cc0:	050000f4 	movhi	r20,3
   29cc4:	04c000f4 	movhi	r19,3
   29cc8:	b5afb404 	addi	r22,r22,-16688
   29ccc:	ad6fcb04 	addi	r21,r21,-16596
   29cd0:	a52fea04 	addi	r20,r20,-16472
   29cd4:	9cf00104 	addi	r19,r19,-16380
   29cd8:	85800815 	stw	r22,32(r16)
   29cdc:	85400915 	stw	r21,36(r16)
   29ce0:	85000a15 	stw	r20,40(r16)
   29ce4:	84c00b15 	stw	r19,44(r16)
   29ce8:	84000715 	stw	r16,28(r16)
   29cec:	00800284 	movi	r2,10
   29cf0:	8880030d 	sth	r2,12(r17)
   29cf4:	00800044 	movi	r2,1
   29cf8:	b80d883a 	mov	r6,r23
   29cfc:	89001704 	addi	r4,r17,92
   29d00:	000b883a 	mov	r5,zero
   29d04:	88000015 	stw	zero,0(r17)
   29d08:	88000115 	stw	zero,4(r17)
   29d0c:	88000215 	stw	zero,8(r17)
   29d10:	88001915 	stw	zero,100(r17)
   29d14:	8880038d 	sth	r2,14(r17)
   29d18:	88000415 	stw	zero,16(r17)
   29d1c:	88000515 	stw	zero,20(r17)
   29d20:	88000615 	stw	zero,24(r17)
   29d24:	002b8880 	call	2b888 <memset>
   29d28:	94000317 	ldw	r16,12(r18)
   29d2c:	00800484 	movi	r2,18
   29d30:	8c400715 	stw	r17,28(r17)
   29d34:	8d800815 	stw	r22,32(r17)
   29d38:	8d400915 	stw	r21,36(r17)
   29d3c:	8d000a15 	stw	r20,40(r17)
   29d40:	8cc00b15 	stw	r19,44(r17)
   29d44:	8080030d 	sth	r2,12(r16)
   29d48:	00800084 	movi	r2,2
   29d4c:	80000015 	stw	zero,0(r16)
   29d50:	80000115 	stw	zero,4(r16)
   29d54:	80000215 	stw	zero,8(r16)
   29d58:	80001915 	stw	zero,100(r16)
   29d5c:	8080038d 	sth	r2,14(r16)
   29d60:	80000415 	stw	zero,16(r16)
   29d64:	80000515 	stw	zero,20(r16)
   29d68:	80000615 	stw	zero,24(r16)
   29d6c:	b80d883a 	mov	r6,r23
   29d70:	000b883a 	mov	r5,zero
   29d74:	81001704 	addi	r4,r16,92
   29d78:	002b8880 	call	2b888 <memset>
   29d7c:	00800044 	movi	r2,1
   29d80:	84000715 	stw	r16,28(r16)
   29d84:	85800815 	stw	r22,32(r16)
   29d88:	85400915 	stw	r21,36(r16)
   29d8c:	85000a15 	stw	r20,40(r16)
   29d90:	84c00b15 	stw	r19,44(r16)
   29d94:	90800e15 	stw	r2,56(r18)
   29d98:	dfc00817 	ldw	ra,32(sp)
   29d9c:	ddc00717 	ldw	r23,28(sp)
   29da0:	dd800617 	ldw	r22,24(sp)
   29da4:	dd400517 	ldw	r21,20(sp)
   29da8:	dd000417 	ldw	r20,16(sp)
   29dac:	dcc00317 	ldw	r19,12(sp)
   29db0:	dc800217 	ldw	r18,8(sp)
   29db4:	dc400117 	ldw	r17,4(sp)
   29db8:	dc000017 	ldw	r16,0(sp)
   29dbc:	dec00904 	addi	sp,sp,36
   29dc0:	f800283a 	ret

00029dc4 <__fp_lock>:
   29dc4:	0005883a 	mov	r2,zero
   29dc8:	f800283a 	ret

00029dcc <__sfmoreglue>:
   29dcc:	defffc04 	addi	sp,sp,-16
   29dd0:	dc400115 	stw	r17,4(sp)
   29dd4:	2c7fffc4 	addi	r17,r5,-1
   29dd8:	8c401a24 	muli	r17,r17,104
   29ddc:	dc800215 	stw	r18,8(sp)
   29de0:	2825883a 	mov	r18,r5
   29de4:	89401d04 	addi	r5,r17,116
   29de8:	dc000015 	stw	r16,0(sp)
   29dec:	dfc00315 	stw	ra,12(sp)
   29df0:	002af340 	call	2af34 <_malloc_r>
   29df4:	1021883a 	mov	r16,r2
   29df8:	10000726 	beq	r2,zero,29e18 <__sfmoreglue+0x4c>
   29dfc:	11000304 	addi	r4,r2,12
   29e00:	10000015 	stw	zero,0(r2)
   29e04:	14800115 	stw	r18,4(r2)
   29e08:	11000215 	stw	r4,8(r2)
   29e0c:	89801a04 	addi	r6,r17,104
   29e10:	000b883a 	mov	r5,zero
   29e14:	002b8880 	call	2b888 <memset>
   29e18:	8005883a 	mov	r2,r16
   29e1c:	dfc00317 	ldw	ra,12(sp)
   29e20:	dc800217 	ldw	r18,8(sp)
   29e24:	dc400117 	ldw	r17,4(sp)
   29e28:	dc000017 	ldw	r16,0(sp)
   29e2c:	dec00404 	addi	sp,sp,16
   29e30:	f800283a 	ret

00029e34 <__sfp>:
   29e34:	defffb04 	addi	sp,sp,-20
   29e38:	dc000015 	stw	r16,0(sp)
   29e3c:	04000134 	movhi	r16,4
   29e40:	842e9e04 	addi	r16,r16,-17800
   29e44:	dcc00315 	stw	r19,12(sp)
   29e48:	2027883a 	mov	r19,r4
   29e4c:	81000017 	ldw	r4,0(r16)
   29e50:	dfc00415 	stw	ra,16(sp)
   29e54:	dc800215 	stw	r18,8(sp)
   29e58:	20800e17 	ldw	r2,56(r4)
   29e5c:	dc400115 	stw	r17,4(sp)
   29e60:	1000021e 	bne	r2,zero,29e6c <__sfp+0x38>
   29e64:	0029c280 	call	29c28 <__sinit.part.1>
   29e68:	81000017 	ldw	r4,0(r16)
   29e6c:	2480b804 	addi	r18,r4,736
   29e70:	047fffc4 	movi	r17,-1
   29e74:	91000117 	ldw	r4,4(r18)
   29e78:	94000217 	ldw	r16,8(r18)
   29e7c:	213fffc4 	addi	r4,r4,-1
   29e80:	20000a16 	blt	r4,zero,29eac <__sfp+0x78>
   29e84:	8080030f 	ldh	r2,12(r16)
   29e88:	10000c26 	beq	r2,zero,29ebc <__sfp+0x88>
   29e8c:	80c01d04 	addi	r3,r16,116
   29e90:	00000206 	br	29e9c <__sfp+0x68>
   29e94:	18bfe60f 	ldh	r2,-104(r3)
   29e98:	10000826 	beq	r2,zero,29ebc <__sfp+0x88>
   29e9c:	213fffc4 	addi	r4,r4,-1
   29ea0:	1c3ffd04 	addi	r16,r3,-12
   29ea4:	18c01a04 	addi	r3,r3,104
   29ea8:	247ffa1e 	bne	r4,r17,29e94 <__sfp+0x60>
   29eac:	90800017 	ldw	r2,0(r18)
   29eb0:	10001d26 	beq	r2,zero,29f28 <__sfp+0xf4>
   29eb4:	1025883a 	mov	r18,r2
   29eb8:	003fee06 	br	29e74 <__sfp+0x40>
   29ebc:	00bfffc4 	movi	r2,-1
   29ec0:	8080038d 	sth	r2,14(r16)
   29ec4:	00800044 	movi	r2,1
   29ec8:	8080030d 	sth	r2,12(r16)
   29ecc:	80001915 	stw	zero,100(r16)
   29ed0:	80000015 	stw	zero,0(r16)
   29ed4:	80000215 	stw	zero,8(r16)
   29ed8:	80000115 	stw	zero,4(r16)
   29edc:	80000415 	stw	zero,16(r16)
   29ee0:	80000515 	stw	zero,20(r16)
   29ee4:	80000615 	stw	zero,24(r16)
   29ee8:	01800204 	movi	r6,8
   29eec:	000b883a 	mov	r5,zero
   29ef0:	81001704 	addi	r4,r16,92
   29ef4:	002b8880 	call	2b888 <memset>
   29ef8:	8005883a 	mov	r2,r16
   29efc:	80000c15 	stw	zero,48(r16)
   29f00:	80000d15 	stw	zero,52(r16)
   29f04:	80001115 	stw	zero,68(r16)
   29f08:	80001215 	stw	zero,72(r16)
   29f0c:	dfc00417 	ldw	ra,16(sp)
   29f10:	dcc00317 	ldw	r19,12(sp)
   29f14:	dc800217 	ldw	r18,8(sp)
   29f18:	dc400117 	ldw	r17,4(sp)
   29f1c:	dc000017 	ldw	r16,0(sp)
   29f20:	dec00504 	addi	sp,sp,20
   29f24:	f800283a 	ret
   29f28:	01400104 	movi	r5,4
   29f2c:	9809883a 	mov	r4,r19
   29f30:	0029dcc0 	call	29dcc <__sfmoreglue>
   29f34:	90800015 	stw	r2,0(r18)
   29f38:	103fde1e 	bne	r2,zero,29eb4 <__sfp+0x80>
   29f3c:	00800304 	movi	r2,12
   29f40:	98800015 	stw	r2,0(r19)
   29f44:	0005883a 	mov	r2,zero
   29f48:	003ff006 	br	29f0c <__sfp+0xd8>

00029f4c <_cleanup>:
   29f4c:	00800134 	movhi	r2,4
   29f50:	10ae9e04 	addi	r2,r2,-17800
   29f54:	11000017 	ldw	r4,0(r2)
   29f58:	014000f4 	movhi	r5,3
   29f5c:	29661a04 	addi	r5,r5,-26520
   29f60:	002aa941 	jmpi	2aa94 <_fwalk_reent>

00029f64 <__sinit>:
   29f64:	20800e17 	ldw	r2,56(r4)
   29f68:	10000126 	beq	r2,zero,29f70 <__sinit+0xc>
   29f6c:	f800283a 	ret
   29f70:	0029c281 	jmpi	29c28 <__sinit.part.1>

00029f74 <__sfp_lock_acquire>:
   29f74:	f800283a 	ret

00029f78 <__sfp_lock_release>:
   29f78:	f800283a 	ret

00029f7c <__sinit_lock_acquire>:
   29f7c:	f800283a 	ret

00029f80 <__sinit_lock_release>:
   29f80:	f800283a 	ret

00029f84 <__fp_lock_all>:
   29f84:	00800134 	movhi	r2,4
   29f88:	10ae9f04 	addi	r2,r2,-17796
   29f8c:	11000017 	ldw	r4,0(r2)
   29f90:	014000f4 	movhi	r5,3
   29f94:	29677104 	addi	r5,r5,-25148
   29f98:	002a9d01 	jmpi	2a9d0 <_fwalk>

00029f9c <__fp_unlock_all>:
   29f9c:	00800134 	movhi	r2,4
   29fa0:	10ae9f04 	addi	r2,r2,-17796
   29fa4:	11000017 	ldw	r4,0(r2)
   29fa8:	014000f4 	movhi	r5,3
   29fac:	29670504 	addi	r5,r5,-25580
   29fb0:	002a9d01 	jmpi	2a9d0 <_fwalk>

00029fb4 <_fopen_r>:
   29fb4:	defffa04 	addi	sp,sp,-24
   29fb8:	3005883a 	mov	r2,r6
   29fbc:	dcc00415 	stw	r19,16(sp)
   29fc0:	d80d883a 	mov	r6,sp
   29fc4:	2827883a 	mov	r19,r5
   29fc8:	100b883a 	mov	r5,r2
   29fcc:	dc800315 	stw	r18,12(sp)
   29fd0:	dfc00515 	stw	ra,20(sp)
   29fd4:	dc400215 	stw	r17,8(sp)
   29fd8:	dc000115 	stw	r16,4(sp)
   29fdc:	2025883a 	mov	r18,r4
   29fe0:	00308580 	call	30858 <__sflags>
   29fe4:	10002726 	beq	r2,zero,2a084 <_fopen_r+0xd0>
   29fe8:	9009883a 	mov	r4,r18
   29fec:	1023883a 	mov	r17,r2
   29ff0:	0029e340 	call	29e34 <__sfp>
   29ff4:	1021883a 	mov	r16,r2
   29ff8:	10002226 	beq	r2,zero,2a084 <_fopen_r+0xd0>
   29ffc:	d9800017 	ldw	r6,0(sp)
   2a000:	01c06d84 	movi	r7,438
   2a004:	980b883a 	mov	r5,r19
   2a008:	9009883a 	mov	r4,r18
   2a00c:	002b9b00 	call	2b9b0 <_open_r>
   2a010:	10001916 	blt	r2,zero,2a078 <_fopen_r+0xc4>
   2a014:	8080038d 	sth	r2,14(r16)
   2a018:	008000f4 	movhi	r2,3
   2a01c:	10afb404 	addi	r2,r2,-16688
   2a020:	80800815 	stw	r2,32(r16)
   2a024:	008000f4 	movhi	r2,3
   2a028:	10afcb04 	addi	r2,r2,-16596
   2a02c:	80800915 	stw	r2,36(r16)
   2a030:	008000f4 	movhi	r2,3
   2a034:	10afea04 	addi	r2,r2,-16472
   2a038:	80800a15 	stw	r2,40(r16)
   2a03c:	008000f4 	movhi	r2,3
   2a040:	10b00104 	addi	r2,r2,-16380
   2a044:	8440030d 	sth	r17,12(r16)
   2a048:	84000715 	stw	r16,28(r16)
   2a04c:	80800b15 	stw	r2,44(r16)
   2a050:	8c40400c 	andi	r17,r17,256
   2a054:	88000d1e 	bne	r17,zero,2a08c <_fopen_r+0xd8>
   2a058:	8005883a 	mov	r2,r16
   2a05c:	dfc00517 	ldw	ra,20(sp)
   2a060:	dcc00417 	ldw	r19,16(sp)
   2a064:	dc800317 	ldw	r18,12(sp)
   2a068:	dc400217 	ldw	r17,8(sp)
   2a06c:	dc000117 	ldw	r16,4(sp)
   2a070:	dec00604 	addi	sp,sp,24
   2a074:	f800283a 	ret
   2a078:	0029f740 	call	29f74 <__sfp_lock_acquire>
   2a07c:	8000030d 	sth	zero,12(r16)
   2a080:	0029f780 	call	29f78 <__sfp_lock_release>
   2a084:	0005883a 	mov	r2,zero
   2a088:	003ff406 	br	2a05c <_fopen_r+0xa8>
   2a08c:	01c00084 	movi	r7,2
   2a090:	000d883a 	mov	r6,zero
   2a094:	800b883a 	mov	r5,r16
   2a098:	9009883a 	mov	r4,r18
   2a09c:	002a4f40 	call	2a4f4 <_fseek_r>
   2a0a0:	8005883a 	mov	r2,r16
   2a0a4:	003fed06 	br	2a05c <_fopen_r+0xa8>

0002a0a8 <fopen>:
   2a0a8:	00800134 	movhi	r2,4
   2a0ac:	10ae9f04 	addi	r2,r2,-17796
   2a0b0:	280d883a 	mov	r6,r5
   2a0b4:	200b883a 	mov	r5,r4
   2a0b8:	11000017 	ldw	r4,0(r2)
   2a0bc:	0029fb41 	jmpi	29fb4 <_fopen_r>

0002a0c0 <_malloc_trim_r>:
   2a0c0:	defffb04 	addi	sp,sp,-20
   2a0c4:	dcc00315 	stw	r19,12(sp)
   2a0c8:	04c00134 	movhi	r19,4
   2a0cc:	dc800215 	stw	r18,8(sp)
   2a0d0:	dc400115 	stw	r17,4(sp)
   2a0d4:	dc000015 	stw	r16,0(sp)
   2a0d8:	dfc00415 	stw	ra,16(sp)
   2a0dc:	2821883a 	mov	r16,r5
   2a0e0:	9ceccc04 	addi	r19,r19,-19664
   2a0e4:	2025883a 	mov	r18,r4
   2a0e8:	003579c0 	call	3579c <__malloc_lock>
   2a0ec:	98800217 	ldw	r2,8(r19)
   2a0f0:	14400117 	ldw	r17,4(r2)
   2a0f4:	00bfff04 	movi	r2,-4
   2a0f8:	88a2703a 	and	r17,r17,r2
   2a0fc:	8c21c83a 	sub	r16,r17,r16
   2a100:	8403fbc4 	addi	r16,r16,4079
   2a104:	8020d33a 	srli	r16,r16,12
   2a108:	0083ffc4 	movi	r2,4095
   2a10c:	843fffc4 	addi	r16,r16,-1
   2a110:	8020933a 	slli	r16,r16,12
   2a114:	1400060e 	bge	r2,r16,2a130 <_malloc_trim_r+0x70>
   2a118:	000b883a 	mov	r5,zero
   2a11c:	9009883a 	mov	r4,r18
   2a120:	002be7c0 	call	2be7c <_sbrk_r>
   2a124:	98c00217 	ldw	r3,8(r19)
   2a128:	1c47883a 	add	r3,r3,r17
   2a12c:	10c00a26 	beq	r2,r3,2a158 <_malloc_trim_r+0x98>
   2a130:	9009883a 	mov	r4,r18
   2a134:	00357c00 	call	357c0 <__malloc_unlock>
   2a138:	0005883a 	mov	r2,zero
   2a13c:	dfc00417 	ldw	ra,16(sp)
   2a140:	dcc00317 	ldw	r19,12(sp)
   2a144:	dc800217 	ldw	r18,8(sp)
   2a148:	dc400117 	ldw	r17,4(sp)
   2a14c:	dc000017 	ldw	r16,0(sp)
   2a150:	dec00504 	addi	sp,sp,20
   2a154:	f800283a 	ret
   2a158:	040bc83a 	sub	r5,zero,r16
   2a15c:	9009883a 	mov	r4,r18
   2a160:	002be7c0 	call	2be7c <_sbrk_r>
   2a164:	00ffffc4 	movi	r3,-1
   2a168:	10c00d26 	beq	r2,r3,2a1a0 <_malloc_trim_r+0xe0>
   2a16c:	00c00134 	movhi	r3,4
   2a170:	18f9ab04 	addi	r3,r3,-6484
   2a174:	18800017 	ldw	r2,0(r3)
   2a178:	99000217 	ldw	r4,8(r19)
   2a17c:	8c23c83a 	sub	r17,r17,r16
   2a180:	8c400054 	ori	r17,r17,1
   2a184:	1421c83a 	sub	r16,r2,r16
   2a188:	24400115 	stw	r17,4(r4)
   2a18c:	9009883a 	mov	r4,r18
   2a190:	1c000015 	stw	r16,0(r3)
   2a194:	00357c00 	call	357c0 <__malloc_unlock>
   2a198:	00800044 	movi	r2,1
   2a19c:	003fe706 	br	2a13c <_malloc_trim_r+0x7c>
   2a1a0:	000b883a 	mov	r5,zero
   2a1a4:	9009883a 	mov	r4,r18
   2a1a8:	002be7c0 	call	2be7c <_sbrk_r>
   2a1ac:	99000217 	ldw	r4,8(r19)
   2a1b0:	014003c4 	movi	r5,15
   2a1b4:	1107c83a 	sub	r3,r2,r4
   2a1b8:	28ffdd0e 	bge	r5,r3,2a130 <_malloc_trim_r+0x70>
   2a1bc:	01400134 	movhi	r5,4
   2a1c0:	296ea004 	addi	r5,r5,-17792
   2a1c4:	29400017 	ldw	r5,0(r5)
   2a1c8:	18c00054 	ori	r3,r3,1
   2a1cc:	20c00115 	stw	r3,4(r4)
   2a1d0:	00c00134 	movhi	r3,4
   2a1d4:	1145c83a 	sub	r2,r2,r5
   2a1d8:	18f9ab04 	addi	r3,r3,-6484
   2a1dc:	18800015 	stw	r2,0(r3)
   2a1e0:	003fd306 	br	2a130 <_malloc_trim_r+0x70>

0002a1e4 <_free_r>:
   2a1e4:	28004126 	beq	r5,zero,2a2ec <_free_r+0x108>
   2a1e8:	defffd04 	addi	sp,sp,-12
   2a1ec:	dc400115 	stw	r17,4(sp)
   2a1f0:	dc000015 	stw	r16,0(sp)
   2a1f4:	2023883a 	mov	r17,r4
   2a1f8:	2821883a 	mov	r16,r5
   2a1fc:	dfc00215 	stw	ra,8(sp)
   2a200:	003579c0 	call	3579c <__malloc_lock>
   2a204:	81ffff17 	ldw	r7,-4(r16)
   2a208:	00bfff84 	movi	r2,-2
   2a20c:	01000134 	movhi	r4,4
   2a210:	81bffe04 	addi	r6,r16,-8
   2a214:	3884703a 	and	r2,r7,r2
   2a218:	212ccc04 	addi	r4,r4,-19664
   2a21c:	308b883a 	add	r5,r6,r2
   2a220:	2a400117 	ldw	r9,4(r5)
   2a224:	22000217 	ldw	r8,8(r4)
   2a228:	00ffff04 	movi	r3,-4
   2a22c:	48c6703a 	and	r3,r9,r3
   2a230:	2a005726 	beq	r5,r8,2a390 <_free_r+0x1ac>
   2a234:	28c00115 	stw	r3,4(r5)
   2a238:	39c0004c 	andi	r7,r7,1
   2a23c:	3800091e 	bne	r7,zero,2a264 <_free_r+0x80>
   2a240:	823ffe17 	ldw	r8,-8(r16)
   2a244:	22400204 	addi	r9,r4,8
   2a248:	320dc83a 	sub	r6,r6,r8
   2a24c:	31c00217 	ldw	r7,8(r6)
   2a250:	1205883a 	add	r2,r2,r8
   2a254:	3a406526 	beq	r7,r9,2a3ec <_free_r+0x208>
   2a258:	32000317 	ldw	r8,12(r6)
   2a25c:	3a000315 	stw	r8,12(r7)
   2a260:	41c00215 	stw	r7,8(r8)
   2a264:	28cf883a 	add	r7,r5,r3
   2a268:	39c00117 	ldw	r7,4(r7)
   2a26c:	39c0004c 	andi	r7,r7,1
   2a270:	38003a26 	beq	r7,zero,2a35c <_free_r+0x178>
   2a274:	10c00054 	ori	r3,r2,1
   2a278:	30c00115 	stw	r3,4(r6)
   2a27c:	3087883a 	add	r3,r6,r2
   2a280:	18800015 	stw	r2,0(r3)
   2a284:	00c07fc4 	movi	r3,511
   2a288:	18801936 	bltu	r3,r2,2a2f0 <_free_r+0x10c>
   2a28c:	1004d0fa 	srli	r2,r2,3
   2a290:	01c00044 	movi	r7,1
   2a294:	21400117 	ldw	r5,4(r4)
   2a298:	10c00044 	addi	r3,r2,1
   2a29c:	18c7883a 	add	r3,r3,r3
   2a2a0:	1005d0ba 	srai	r2,r2,2
   2a2a4:	18c7883a 	add	r3,r3,r3
   2a2a8:	18c7883a 	add	r3,r3,r3
   2a2ac:	1907883a 	add	r3,r3,r4
   2a2b0:	3884983a 	sll	r2,r7,r2
   2a2b4:	19c00017 	ldw	r7,0(r3)
   2a2b8:	1a3ffe04 	addi	r8,r3,-8
   2a2bc:	1144b03a 	or	r2,r2,r5
   2a2c0:	32000315 	stw	r8,12(r6)
   2a2c4:	31c00215 	stw	r7,8(r6)
   2a2c8:	20800115 	stw	r2,4(r4)
   2a2cc:	19800015 	stw	r6,0(r3)
   2a2d0:	39800315 	stw	r6,12(r7)
   2a2d4:	8809883a 	mov	r4,r17
   2a2d8:	dfc00217 	ldw	ra,8(sp)
   2a2dc:	dc400117 	ldw	r17,4(sp)
   2a2e0:	dc000017 	ldw	r16,0(sp)
   2a2e4:	dec00304 	addi	sp,sp,12
   2a2e8:	00357c01 	jmpi	357c0 <__malloc_unlock>
   2a2ec:	f800283a 	ret
   2a2f0:	100ad27a 	srli	r5,r2,9
   2a2f4:	00c00104 	movi	r3,4
   2a2f8:	19404a36 	bltu	r3,r5,2a424 <_free_r+0x240>
   2a2fc:	100ad1ba 	srli	r5,r2,6
   2a300:	28c00e44 	addi	r3,r5,57
   2a304:	18c7883a 	add	r3,r3,r3
   2a308:	29400e04 	addi	r5,r5,56
   2a30c:	18c7883a 	add	r3,r3,r3
   2a310:	18c7883a 	add	r3,r3,r3
   2a314:	1909883a 	add	r4,r3,r4
   2a318:	20c00017 	ldw	r3,0(r4)
   2a31c:	01c00134 	movhi	r7,4
   2a320:	213ffe04 	addi	r4,r4,-8
   2a324:	39eccc04 	addi	r7,r7,-19664
   2a328:	20c04426 	beq	r4,r3,2a43c <_free_r+0x258>
   2a32c:	01ffff04 	movi	r7,-4
   2a330:	19400117 	ldw	r5,4(r3)
   2a334:	29ca703a 	and	r5,r5,r7
   2a338:	1140022e 	bgeu	r2,r5,2a344 <_free_r+0x160>
   2a33c:	18c00217 	ldw	r3,8(r3)
   2a340:	20fffb1e 	bne	r4,r3,2a330 <_free_r+0x14c>
   2a344:	19000317 	ldw	r4,12(r3)
   2a348:	31000315 	stw	r4,12(r6)
   2a34c:	30c00215 	stw	r3,8(r6)
   2a350:	21800215 	stw	r6,8(r4)
   2a354:	19800315 	stw	r6,12(r3)
   2a358:	003fde06 	br	2a2d4 <_free_r+0xf0>
   2a35c:	29c00217 	ldw	r7,8(r5)
   2a360:	10c5883a 	add	r2,r2,r3
   2a364:	00c00134 	movhi	r3,4
   2a368:	18ecce04 	addi	r3,r3,-19656
   2a36c:	38c03b26 	beq	r7,r3,2a45c <_free_r+0x278>
   2a370:	2a000317 	ldw	r8,12(r5)
   2a374:	11400054 	ori	r5,r2,1
   2a378:	3087883a 	add	r3,r6,r2
   2a37c:	3a000315 	stw	r8,12(r7)
   2a380:	41c00215 	stw	r7,8(r8)
   2a384:	31400115 	stw	r5,4(r6)
   2a388:	18800015 	stw	r2,0(r3)
   2a38c:	003fbd06 	br	2a284 <_free_r+0xa0>
   2a390:	39c0004c 	andi	r7,r7,1
   2a394:	10c5883a 	add	r2,r2,r3
   2a398:	3800071e 	bne	r7,zero,2a3b8 <_free_r+0x1d4>
   2a39c:	81fffe17 	ldw	r7,-8(r16)
   2a3a0:	31cdc83a 	sub	r6,r6,r7
   2a3a4:	30c00317 	ldw	r3,12(r6)
   2a3a8:	31400217 	ldw	r5,8(r6)
   2a3ac:	11c5883a 	add	r2,r2,r7
   2a3b0:	28c00315 	stw	r3,12(r5)
   2a3b4:	19400215 	stw	r5,8(r3)
   2a3b8:	10c00054 	ori	r3,r2,1
   2a3bc:	30c00115 	stw	r3,4(r6)
   2a3c0:	00c00134 	movhi	r3,4
   2a3c4:	18eea104 	addi	r3,r3,-17788
   2a3c8:	18c00017 	ldw	r3,0(r3)
   2a3cc:	21800215 	stw	r6,8(r4)
   2a3d0:	10ffc036 	bltu	r2,r3,2a2d4 <_free_r+0xf0>
   2a3d4:	00800134 	movhi	r2,4
   2a3d8:	10b9a204 	addi	r2,r2,-6520
   2a3dc:	11400017 	ldw	r5,0(r2)
   2a3e0:	8809883a 	mov	r4,r17
   2a3e4:	002a0c00 	call	2a0c0 <_malloc_trim_r>
   2a3e8:	003fba06 	br	2a2d4 <_free_r+0xf0>
   2a3ec:	28c9883a 	add	r4,r5,r3
   2a3f0:	21000117 	ldw	r4,4(r4)
   2a3f4:	2100004c 	andi	r4,r4,1
   2a3f8:	2000391e 	bne	r4,zero,2a4e0 <_free_r+0x2fc>
   2a3fc:	29c00217 	ldw	r7,8(r5)
   2a400:	29000317 	ldw	r4,12(r5)
   2a404:	1885883a 	add	r2,r3,r2
   2a408:	10c00054 	ori	r3,r2,1
   2a40c:	39000315 	stw	r4,12(r7)
   2a410:	21c00215 	stw	r7,8(r4)
   2a414:	30c00115 	stw	r3,4(r6)
   2a418:	308d883a 	add	r6,r6,r2
   2a41c:	30800015 	stw	r2,0(r6)
   2a420:	003fac06 	br	2a2d4 <_free_r+0xf0>
   2a424:	00c00504 	movi	r3,20
   2a428:	19401536 	bltu	r3,r5,2a480 <_free_r+0x29c>
   2a42c:	28c01704 	addi	r3,r5,92
   2a430:	18c7883a 	add	r3,r3,r3
   2a434:	294016c4 	addi	r5,r5,91
   2a438:	003fb406 	br	2a30c <_free_r+0x128>
   2a43c:	280bd0ba 	srai	r5,r5,2
   2a440:	00c00044 	movi	r3,1
   2a444:	38800117 	ldw	r2,4(r7)
   2a448:	194a983a 	sll	r5,r3,r5
   2a44c:	2007883a 	mov	r3,r4
   2a450:	2884b03a 	or	r2,r5,r2
   2a454:	38800115 	stw	r2,4(r7)
   2a458:	003fbb06 	br	2a348 <_free_r+0x164>
   2a45c:	21800515 	stw	r6,20(r4)
   2a460:	21800415 	stw	r6,16(r4)
   2a464:	10c00054 	ori	r3,r2,1
   2a468:	31c00315 	stw	r7,12(r6)
   2a46c:	31c00215 	stw	r7,8(r6)
   2a470:	30c00115 	stw	r3,4(r6)
   2a474:	308d883a 	add	r6,r6,r2
   2a478:	30800015 	stw	r2,0(r6)
   2a47c:	003f9506 	br	2a2d4 <_free_r+0xf0>
   2a480:	00c01504 	movi	r3,84
   2a484:	19400536 	bltu	r3,r5,2a49c <_free_r+0x2b8>
   2a488:	100ad33a 	srli	r5,r2,12
   2a48c:	28c01bc4 	addi	r3,r5,111
   2a490:	18c7883a 	add	r3,r3,r3
   2a494:	29401b84 	addi	r5,r5,110
   2a498:	003f9c06 	br	2a30c <_free_r+0x128>
   2a49c:	00c05504 	movi	r3,340
   2a4a0:	19400536 	bltu	r3,r5,2a4b8 <_free_r+0x2d4>
   2a4a4:	100ad3fa 	srli	r5,r2,15
   2a4a8:	28c01e04 	addi	r3,r5,120
   2a4ac:	18c7883a 	add	r3,r3,r3
   2a4b0:	29401dc4 	addi	r5,r5,119
   2a4b4:	003f9506 	br	2a30c <_free_r+0x128>
   2a4b8:	00c15504 	movi	r3,1364
   2a4bc:	19400536 	bltu	r3,r5,2a4d4 <_free_r+0x2f0>
   2a4c0:	100ad4ba 	srli	r5,r2,18
   2a4c4:	28c01f44 	addi	r3,r5,125
   2a4c8:	18c7883a 	add	r3,r3,r3
   2a4cc:	29401f04 	addi	r5,r5,124
   2a4d0:	003f8e06 	br	2a30c <_free_r+0x128>
   2a4d4:	00c03f84 	movi	r3,254
   2a4d8:	01401f84 	movi	r5,126
   2a4dc:	003f8b06 	br	2a30c <_free_r+0x128>
   2a4e0:	10c00054 	ori	r3,r2,1
   2a4e4:	30c00115 	stw	r3,4(r6)
   2a4e8:	308d883a 	add	r6,r6,r2
   2a4ec:	30800015 	stw	r2,0(r6)
   2a4f0:	003f7806 	br	2a2d4 <_free_r+0xf0>

0002a4f4 <_fseek_r>:
   2a4f4:	002a5141 	jmpi	2a514 <_fseeko_r>

0002a4f8 <fseek>:
   2a4f8:	00800134 	movhi	r2,4
   2a4fc:	10ae9f04 	addi	r2,r2,-17796
   2a500:	300f883a 	mov	r7,r6
   2a504:	280d883a 	mov	r6,r5
   2a508:	200b883a 	mov	r5,r4
   2a50c:	11000017 	ldw	r4,0(r2)
   2a510:	002a5141 	jmpi	2a514 <_fseeko_r>

0002a514 <_fseeko_r>:
   2a514:	deffe804 	addi	sp,sp,-96
   2a518:	dd401415 	stw	r21,80(sp)
   2a51c:	dc801115 	stw	r18,68(sp)
   2a520:	dc401015 	stw	r17,64(sp)
   2a524:	dc000f15 	stw	r16,60(sp)
   2a528:	dfc01715 	stw	ra,92(sp)
   2a52c:	ddc01615 	stw	r23,88(sp)
   2a530:	dd801515 	stw	r22,84(sp)
   2a534:	dd001315 	stw	r20,76(sp)
   2a538:	dcc01215 	stw	r19,72(sp)
   2a53c:	2023883a 	mov	r17,r4
   2a540:	2821883a 	mov	r16,r5
   2a544:	302b883a 	mov	r21,r6
   2a548:	3825883a 	mov	r18,r7
   2a54c:	20000226 	beq	r4,zero,2a558 <_fseeko_r+0x44>
   2a550:	20800e17 	ldw	r2,56(r4)
   2a554:	10005a26 	beq	r2,zero,2a6c0 <_fseeko_r+0x1ac>
   2a558:	8080030b 	ldhu	r2,12(r16)
   2a55c:	00c04204 	movi	r3,264
   2a560:	1080420c 	andi	r2,r2,264
   2a564:	10c05b26 	beq	r2,r3,2a6d4 <_fseeko_r+0x1c0>
   2a568:	85000a17 	ldw	r20,40(r16)
   2a56c:	a000f626 	beq	r20,zero,2a948 <_fseeko_r+0x434>
   2a570:	00800044 	movi	r2,1
   2a574:	90803e26 	beq	r18,r2,2a670 <_fseeko_r+0x15c>
   2a578:	00800084 	movi	r2,2
   2a57c:	90801026 	beq	r18,r2,2a5c0 <_fseeko_r+0xac>
   2a580:	90000f26 	beq	r18,zero,2a5c0 <_fseeko_r+0xac>
   2a584:	00800584 	movi	r2,22
   2a588:	88800015 	stw	r2,0(r17)
   2a58c:	04ffffc4 	movi	r19,-1
   2a590:	9805883a 	mov	r2,r19
   2a594:	dfc01717 	ldw	ra,92(sp)
   2a598:	ddc01617 	ldw	r23,88(sp)
   2a59c:	dd801517 	ldw	r22,84(sp)
   2a5a0:	dd401417 	ldw	r21,80(sp)
   2a5a4:	dd001317 	ldw	r20,76(sp)
   2a5a8:	dcc01217 	ldw	r19,72(sp)
   2a5ac:	dc801117 	ldw	r18,68(sp)
   2a5b0:	dc401017 	ldw	r17,64(sp)
   2a5b4:	dc000f17 	ldw	r16,60(sp)
   2a5b8:	dec01804 	addi	sp,sp,96
   2a5bc:	f800283a 	ret
   2a5c0:	80800417 	ldw	r2,16(r16)
   2a5c4:	002f883a 	mov	r23,zero
   2a5c8:	0027883a 	mov	r19,zero
   2a5cc:	1000cb26 	beq	r2,zero,2a8fc <_fseeko_r+0x3e8>
   2a5d0:	8080030b 	ldhu	r2,12(r16)
   2a5d4:	10c2068c 	andi	r3,r2,2074
   2a5d8:	1800071e 	bne	r3,zero,2a5f8 <_fseeko_r+0xe4>
   2a5dc:	10c1000c 	andi	r3,r2,1024
   2a5e0:	1800451e 	bne	r3,zero,2a6f8 <_fseeko_r+0x1e4>
   2a5e4:	00c000f4 	movhi	r3,3
   2a5e8:	18efea04 	addi	r3,r3,-16472
   2a5ec:	a0c0b726 	beq	r20,r3,2a8cc <_fseeko_r+0x3b8>
   2a5f0:	10820014 	ori	r2,r2,2048
   2a5f4:	8080030d 	sth	r2,12(r16)
   2a5f8:	800b883a 	mov	r5,r16
   2a5fc:	8809883a 	mov	r4,r17
   2a600:	0029b880 	call	29b88 <_fflush_r>
   2a604:	1027883a 	mov	r19,r2
   2a608:	103fe01e 	bne	r2,zero,2a58c <_fseeko_r+0x78>
   2a60c:	81400717 	ldw	r5,28(r16)
   2a610:	900f883a 	mov	r7,r18
   2a614:	a80d883a 	mov	r6,r21
   2a618:	8809883a 	mov	r4,r17
   2a61c:	a03ee83a 	callr	r20
   2a620:	00ffffc4 	movi	r3,-1
   2a624:	10ffd926 	beq	r2,r3,2a58c <_fseeko_r+0x78>
   2a628:	81400c17 	ldw	r5,48(r16)
   2a62c:	28000526 	beq	r5,zero,2a644 <_fseeko_r+0x130>
   2a630:	80801004 	addi	r2,r16,64
   2a634:	28800226 	beq	r5,r2,2a640 <_fseeko_r+0x12c>
   2a638:	8809883a 	mov	r4,r17
   2a63c:	002a1e40 	call	2a1e4 <_free_r>
   2a640:	80000c15 	stw	zero,48(r16)
   2a644:	8080030b 	ldhu	r2,12(r16)
   2a648:	80c00417 	ldw	r3,16(r16)
   2a64c:	80000115 	stw	zero,4(r16)
   2a650:	10bdf7cc 	andi	r2,r2,63455
   2a654:	80c00015 	stw	r3,0(r16)
   2a658:	8080030d 	sth	r2,12(r16)
   2a65c:	01800204 	movi	r6,8
   2a660:	000b883a 	mov	r5,zero
   2a664:	81001704 	addi	r4,r16,92
   2a668:	002b8880 	call	2b888 <memset>
   2a66c:	003fc806 	br	2a590 <_fseeko_r+0x7c>
   2a670:	800b883a 	mov	r5,r16
   2a674:	8809883a 	mov	r4,r17
   2a678:	0029b880 	call	29b88 <_fflush_r>
   2a67c:	8080030b 	ldhu	r2,12(r16)
   2a680:	10c4000c 	andi	r3,r2,4096
   2a684:	18008726 	beq	r3,zero,2a8a4 <_fseeko_r+0x390>
   2a688:	84c01417 	ldw	r19,80(r16)
   2a68c:	10c0010c 	andi	r3,r2,4
   2a690:	1800431e 	bne	r3,zero,2a7a0 <_fseeko_r+0x28c>
   2a694:	1080020c 	andi	r2,r2,8
   2a698:	10008026 	beq	r2,zero,2a89c <_fseeko_r+0x388>
   2a69c:	80c00017 	ldw	r3,0(r16)
   2a6a0:	80800417 	ldw	r2,16(r16)
   2a6a4:	18000226 	beq	r3,zero,2a6b0 <_fseeko_r+0x19c>
   2a6a8:	1887c83a 	sub	r3,r3,r2
   2a6ac:	98e7883a 	add	r19,r19,r3
   2a6b0:	aceb883a 	add	r21,r21,r19
   2a6b4:	05c00044 	movi	r23,1
   2a6b8:	0025883a 	mov	r18,zero
   2a6bc:	003fc306 	br	2a5cc <_fseeko_r+0xb8>
   2a6c0:	0029f640 	call	29f64 <__sinit>
   2a6c4:	8080030b 	ldhu	r2,12(r16)
   2a6c8:	00c04204 	movi	r3,264
   2a6cc:	1080420c 	andi	r2,r2,264
   2a6d0:	10ffa51e 	bne	r2,r3,2a568 <_fseeko_r+0x54>
   2a6d4:	800b883a 	mov	r5,r16
   2a6d8:	8809883a 	mov	r4,r17
   2a6dc:	0029b880 	call	29b88 <_fflush_r>
   2a6e0:	003fa106 	br	2a568 <_fseeko_r+0x54>
   2a6e4:	8080030b 	ldhu	r2,12(r16)
   2a6e8:	00c10004 	movi	r3,1024
   2a6ec:	80c01315 	stw	r3,76(r16)
   2a6f0:	10c4b03a 	or	r2,r2,r3
   2a6f4:	8080030d 	sth	r2,12(r16)
   2a6f8:	9000311e 	bne	r18,zero,2a7c0 <_fseeko_r+0x2ac>
   2a6fc:	a82d883a 	mov	r22,r21
   2a700:	b800371e 	bne	r23,zero,2a7e0 <_fseeko_r+0x2cc>
   2a704:	8080030b 	ldhu	r2,12(r16)
   2a708:	1084000c 	andi	r2,r2,4096
   2a70c:	10007f26 	beq	r2,zero,2a90c <_fseeko_r+0x3f8>
   2a710:	80801417 	ldw	r2,80(r16)
   2a714:	81800117 	ldw	r6,4(r16)
   2a718:	81400c17 	ldw	r5,48(r16)
   2a71c:	11a7c83a 	sub	r19,r2,r6
   2a720:	28008226 	beq	r5,zero,2a92c <_fseeko_r+0x418>
   2a724:	81c00f17 	ldw	r7,60(r16)
   2a728:	99e7c83a 	sub	r19,r19,r7
   2a72c:	81000e17 	ldw	r4,56(r16)
   2a730:	80800417 	ldw	r2,16(r16)
   2a734:	99a7883a 	add	r19,r19,r6
   2a738:	2087c83a 	sub	r3,r4,r2
   2a73c:	98e7c83a 	sub	r19,r19,r3
   2a740:	38c7883a 	add	r3,r7,r3
   2a744:	b4c02b16 	blt	r22,r19,2a7f4 <_fseeko_r+0x2e0>
   2a748:	98c9883a 	add	r4,r19,r3
   2a74c:	b100292e 	bgeu	r22,r4,2a7f4 <_fseeko_r+0x2e0>
   2a750:	b4e7c83a 	sub	r19,r22,r19
   2a754:	14c5883a 	add	r2,r2,r19
   2a758:	1ce7c83a 	sub	r19,r3,r19
   2a75c:	80800015 	stw	r2,0(r16)
   2a760:	84c00115 	stw	r19,4(r16)
   2a764:	28000526 	beq	r5,zero,2a77c <_fseeko_r+0x268>
   2a768:	80801004 	addi	r2,r16,64
   2a76c:	28800226 	beq	r5,r2,2a778 <_fseeko_r+0x264>
   2a770:	8809883a 	mov	r4,r17
   2a774:	002a1e40 	call	2a1e4 <_free_r>
   2a778:	80000c15 	stw	zero,48(r16)
   2a77c:	8080030b 	ldhu	r2,12(r16)
   2a780:	01800204 	movi	r6,8
   2a784:	000b883a 	mov	r5,zero
   2a788:	10bff7cc 	andi	r2,r2,65503
   2a78c:	8080030d 	sth	r2,12(r16)
   2a790:	81001704 	addi	r4,r16,92
   2a794:	002b8880 	call	2b888 <memset>
   2a798:	0027883a 	mov	r19,zero
   2a79c:	003f7c06 	br	2a590 <_fseeko_r+0x7c>
   2a7a0:	80c00117 	ldw	r3,4(r16)
   2a7a4:	80800c17 	ldw	r2,48(r16)
   2a7a8:	98e7c83a 	sub	r19,r19,r3
   2a7ac:	10003b26 	beq	r2,zero,2a89c <_fseeko_r+0x388>
   2a7b0:	80c00f17 	ldw	r3,60(r16)
   2a7b4:	80800417 	ldw	r2,16(r16)
   2a7b8:	98e7c83a 	sub	r19,r19,r3
   2a7bc:	003fbc06 	br	2a6b0 <_fseeko_r+0x19c>
   2a7c0:	8140038f 	ldh	r5,14(r16)
   2a7c4:	d80d883a 	mov	r6,sp
   2a7c8:	8809883a 	mov	r4,r17
   2a7cc:	002a9740 	call	2a974 <_fstat_r>
   2a7d0:	103f891e 	bne	r2,zero,2a5f8 <_fseeko_r+0xe4>
   2a7d4:	dd800417 	ldw	r22,16(sp)
   2a7d8:	adad883a 	add	r22,r21,r22
   2a7dc:	b83fc926 	beq	r23,zero,2a704 <_fseeko_r+0x1f0>
   2a7e0:	81400c17 	ldw	r5,48(r16)
   2a7e4:	81800117 	ldw	r6,4(r16)
   2a7e8:	28005026 	beq	r5,zero,2a92c <_fseeko_r+0x418>
   2a7ec:	81c00f17 	ldw	r7,60(r16)
   2a7f0:	003fce06 	br	2a72c <_fseeko_r+0x218>
   2a7f4:	84c01317 	ldw	r19,76(r16)
   2a7f8:	81400717 	ldw	r5,28(r16)
   2a7fc:	000f883a 	mov	r7,zero
   2a800:	04e7c83a 	sub	r19,zero,r19
   2a804:	9da6703a 	and	r19,r19,r22
   2a808:	980d883a 	mov	r6,r19
   2a80c:	8809883a 	mov	r4,r17
   2a810:	a03ee83a 	callr	r20
   2a814:	00ffffc4 	movi	r3,-1
   2a818:	10ff7726 	beq	r2,r3,2a5f8 <_fseeko_r+0xe4>
   2a81c:	80800417 	ldw	r2,16(r16)
   2a820:	81400c17 	ldw	r5,48(r16)
   2a824:	80000115 	stw	zero,4(r16)
   2a828:	80800015 	stw	r2,0(r16)
   2a82c:	28000526 	beq	r5,zero,2a844 <_fseeko_r+0x330>
   2a830:	80801004 	addi	r2,r16,64
   2a834:	28800226 	beq	r5,r2,2a840 <_fseeko_r+0x32c>
   2a838:	8809883a 	mov	r4,r17
   2a83c:	002a1e40 	call	2a1e4 <_free_r>
   2a840:	80000c15 	stw	zero,48(r16)
   2a844:	8080030b 	ldhu	r2,12(r16)
   2a848:	b4e7c83a 	sub	r19,r22,r19
   2a84c:	10bff7cc 	andi	r2,r2,65503
   2a850:	8080030d 	sth	r2,12(r16)
   2a854:	98000b26 	beq	r19,zero,2a884 <_fseeko_r+0x370>
   2a858:	800b883a 	mov	r5,r16
   2a85c:	8809883a 	mov	r4,r17
   2a860:	002bc200 	call	2bc20 <__srefill_r>
   2a864:	103f641e 	bne	r2,zero,2a5f8 <_fseeko_r+0xe4>
   2a868:	80800117 	ldw	r2,4(r16)
   2a86c:	14ff6236 	bltu	r2,r19,2a5f8 <_fseeko_r+0xe4>
   2a870:	80c00017 	ldw	r3,0(r16)
   2a874:	14c5c83a 	sub	r2,r2,r19
   2a878:	80800115 	stw	r2,4(r16)
   2a87c:	1ce7883a 	add	r19,r3,r19
   2a880:	84c00015 	stw	r19,0(r16)
   2a884:	01800204 	movi	r6,8
   2a888:	000b883a 	mov	r5,zero
   2a88c:	81001704 	addi	r4,r16,92
   2a890:	002b8880 	call	2b888 <memset>
   2a894:	0027883a 	mov	r19,zero
   2a898:	003f3d06 	br	2a590 <_fseeko_r+0x7c>
   2a89c:	80800417 	ldw	r2,16(r16)
   2a8a0:	003f8306 	br	2a6b0 <_fseeko_r+0x19c>
   2a8a4:	81400717 	ldw	r5,28(r16)
   2a8a8:	900f883a 	mov	r7,r18
   2a8ac:	000d883a 	mov	r6,zero
   2a8b0:	8809883a 	mov	r4,r17
   2a8b4:	a03ee83a 	callr	r20
   2a8b8:	1027883a 	mov	r19,r2
   2a8bc:	00bfffc4 	movi	r2,-1
   2a8c0:	98bf3226 	beq	r19,r2,2a58c <_fseeko_r+0x78>
   2a8c4:	8080030b 	ldhu	r2,12(r16)
   2a8c8:	003f7006 	br	2a68c <_fseeko_r+0x178>
   2a8cc:	8140038f 	ldh	r5,14(r16)
   2a8d0:	283f4716 	blt	r5,zero,2a5f0 <_fseeko_r+0xdc>
   2a8d4:	d80d883a 	mov	r6,sp
   2a8d8:	8809883a 	mov	r4,r17
   2a8dc:	002a9740 	call	2a974 <_fstat_r>
   2a8e0:	1000041e 	bne	r2,zero,2a8f4 <_fseeko_r+0x3e0>
   2a8e4:	d8800117 	ldw	r2,4(sp)
   2a8e8:	00e00014 	movui	r3,32768
   2a8ec:	10bc000c 	andi	r2,r2,61440
   2a8f0:	10ff7c26 	beq	r2,r3,2a6e4 <_fseeko_r+0x1d0>
   2a8f4:	8080030b 	ldhu	r2,12(r16)
   2a8f8:	003f3d06 	br	2a5f0 <_fseeko_r+0xdc>
   2a8fc:	800b883a 	mov	r5,r16
   2a900:	8809883a 	mov	r4,r17
   2a904:	002ad500 	call	2ad50 <__smakebuf_r>
   2a908:	003f3106 	br	2a5d0 <_fseeko_r+0xbc>
   2a90c:	81400717 	ldw	r5,28(r16)
   2a910:	01c00044 	movi	r7,1
   2a914:	000d883a 	mov	r6,zero
   2a918:	8809883a 	mov	r4,r17
   2a91c:	a03ee83a 	callr	r20
   2a920:	00ffffc4 	movi	r3,-1
   2a924:	10ff7b1e 	bne	r2,r3,2a714 <_fseeko_r+0x200>
   2a928:	003f3306 	br	2a5f8 <_fseeko_r+0xe4>
   2a92c:	80c00017 	ldw	r3,0(r16)
   2a930:	80800417 	ldw	r2,16(r16)
   2a934:	000b883a 	mov	r5,zero
   2a938:	1887c83a 	sub	r3,r3,r2
   2a93c:	98e7c83a 	sub	r19,r19,r3
   2a940:	30c7883a 	add	r3,r6,r3
   2a944:	003f7f06 	br	2a744 <_fseeko_r+0x230>
   2a948:	00800744 	movi	r2,29
   2a94c:	88800015 	stw	r2,0(r17)
   2a950:	04ffffc4 	movi	r19,-1
   2a954:	003f0e06 	br	2a590 <_fseeko_r+0x7c>

0002a958 <fseeko>:
   2a958:	00800134 	movhi	r2,4
   2a95c:	10ae9f04 	addi	r2,r2,-17796
   2a960:	300f883a 	mov	r7,r6
   2a964:	280d883a 	mov	r6,r5
   2a968:	200b883a 	mov	r5,r4
   2a96c:	11000017 	ldw	r4,0(r2)
   2a970:	002a5141 	jmpi	2a514 <_fseeko_r>

0002a974 <_fstat_r>:
   2a974:	defffd04 	addi	sp,sp,-12
   2a978:	2805883a 	mov	r2,r5
   2a97c:	dc000015 	stw	r16,0(sp)
   2a980:	04000134 	movhi	r16,4
   2a984:	dc400115 	stw	r17,4(sp)
   2a988:	84399f04 	addi	r16,r16,-6532
   2a98c:	2023883a 	mov	r17,r4
   2a990:	300b883a 	mov	r5,r6
   2a994:	1009883a 	mov	r4,r2
   2a998:	dfc00215 	stw	ra,8(sp)
   2a99c:	80000015 	stw	zero,0(r16)
   2a9a0:	00353940 	call	35394 <fstat>
   2a9a4:	00ffffc4 	movi	r3,-1
   2a9a8:	10c00526 	beq	r2,r3,2a9c0 <_fstat_r+0x4c>
   2a9ac:	dfc00217 	ldw	ra,8(sp)
   2a9b0:	dc400117 	ldw	r17,4(sp)
   2a9b4:	dc000017 	ldw	r16,0(sp)
   2a9b8:	dec00304 	addi	sp,sp,12
   2a9bc:	f800283a 	ret
   2a9c0:	80c00017 	ldw	r3,0(r16)
   2a9c4:	183ff926 	beq	r3,zero,2a9ac <_fstat_r+0x38>
   2a9c8:	88c00015 	stw	r3,0(r17)
   2a9cc:	003ff706 	br	2a9ac <_fstat_r+0x38>

0002a9d0 <_fwalk>:
   2a9d0:	defff704 	addi	sp,sp,-36
   2a9d4:	dd000415 	stw	r20,16(sp)
   2a9d8:	dfc00815 	stw	ra,32(sp)
   2a9dc:	ddc00715 	stw	r23,28(sp)
   2a9e0:	dd800615 	stw	r22,24(sp)
   2a9e4:	dd400515 	stw	r21,20(sp)
   2a9e8:	dcc00315 	stw	r19,12(sp)
   2a9ec:	dc800215 	stw	r18,8(sp)
   2a9f0:	dc400115 	stw	r17,4(sp)
   2a9f4:	dc000015 	stw	r16,0(sp)
   2a9f8:	2500b804 	addi	r20,r4,736
   2a9fc:	a0002326 	beq	r20,zero,2aa8c <_fwalk+0xbc>
   2aa00:	282b883a 	mov	r21,r5
   2aa04:	002f883a 	mov	r23,zero
   2aa08:	05800044 	movi	r22,1
   2aa0c:	04ffffc4 	movi	r19,-1
   2aa10:	a4400117 	ldw	r17,4(r20)
   2aa14:	a4800217 	ldw	r18,8(r20)
   2aa18:	8c7fffc4 	addi	r17,r17,-1
   2aa1c:	88000d16 	blt	r17,zero,2aa54 <_fwalk+0x84>
   2aa20:	94000304 	addi	r16,r18,12
   2aa24:	94800384 	addi	r18,r18,14
   2aa28:	8080000b 	ldhu	r2,0(r16)
   2aa2c:	8c7fffc4 	addi	r17,r17,-1
   2aa30:	813ffd04 	addi	r4,r16,-12
   2aa34:	b080042e 	bgeu	r22,r2,2aa48 <_fwalk+0x78>
   2aa38:	9080000f 	ldh	r2,0(r18)
   2aa3c:	14c00226 	beq	r2,r19,2aa48 <_fwalk+0x78>
   2aa40:	a83ee83a 	callr	r21
   2aa44:	b8aeb03a 	or	r23,r23,r2
   2aa48:	84001a04 	addi	r16,r16,104
   2aa4c:	94801a04 	addi	r18,r18,104
   2aa50:	8cfff51e 	bne	r17,r19,2aa28 <_fwalk+0x58>
   2aa54:	a5000017 	ldw	r20,0(r20)
   2aa58:	a03fed1e 	bne	r20,zero,2aa10 <_fwalk+0x40>
   2aa5c:	b805883a 	mov	r2,r23
   2aa60:	dfc00817 	ldw	ra,32(sp)
   2aa64:	ddc00717 	ldw	r23,28(sp)
   2aa68:	dd800617 	ldw	r22,24(sp)
   2aa6c:	dd400517 	ldw	r21,20(sp)
   2aa70:	dd000417 	ldw	r20,16(sp)
   2aa74:	dcc00317 	ldw	r19,12(sp)
   2aa78:	dc800217 	ldw	r18,8(sp)
   2aa7c:	dc400117 	ldw	r17,4(sp)
   2aa80:	dc000017 	ldw	r16,0(sp)
   2aa84:	dec00904 	addi	sp,sp,36
   2aa88:	f800283a 	ret
   2aa8c:	002f883a 	mov	r23,zero
   2aa90:	003ff206 	br	2aa5c <_fwalk+0x8c>

0002aa94 <_fwalk_reent>:
   2aa94:	defff704 	addi	sp,sp,-36
   2aa98:	dd000415 	stw	r20,16(sp)
   2aa9c:	dfc00815 	stw	ra,32(sp)
   2aaa0:	ddc00715 	stw	r23,28(sp)
   2aaa4:	dd800615 	stw	r22,24(sp)
   2aaa8:	dd400515 	stw	r21,20(sp)
   2aaac:	dcc00315 	stw	r19,12(sp)
   2aab0:	dc800215 	stw	r18,8(sp)
   2aab4:	dc400115 	stw	r17,4(sp)
   2aab8:	dc000015 	stw	r16,0(sp)
   2aabc:	2500b804 	addi	r20,r4,736
   2aac0:	a0002326 	beq	r20,zero,2ab50 <_fwalk_reent+0xbc>
   2aac4:	282b883a 	mov	r21,r5
   2aac8:	2027883a 	mov	r19,r4
   2aacc:	002f883a 	mov	r23,zero
   2aad0:	05800044 	movi	r22,1
   2aad4:	04bfffc4 	movi	r18,-1
   2aad8:	a4400117 	ldw	r17,4(r20)
   2aadc:	a4000217 	ldw	r16,8(r20)
   2aae0:	8c7fffc4 	addi	r17,r17,-1
   2aae4:	88000c16 	blt	r17,zero,2ab18 <_fwalk_reent+0x84>
   2aae8:	84000304 	addi	r16,r16,12
   2aaec:	8080000b 	ldhu	r2,0(r16)
   2aaf0:	8c7fffc4 	addi	r17,r17,-1
   2aaf4:	817ffd04 	addi	r5,r16,-12
   2aaf8:	b080052e 	bgeu	r22,r2,2ab10 <_fwalk_reent+0x7c>
   2aafc:	8080008f 	ldh	r2,2(r16)
   2ab00:	9809883a 	mov	r4,r19
   2ab04:	14800226 	beq	r2,r18,2ab10 <_fwalk_reent+0x7c>
   2ab08:	a83ee83a 	callr	r21
   2ab0c:	b8aeb03a 	or	r23,r23,r2
   2ab10:	84001a04 	addi	r16,r16,104
   2ab14:	8cbff51e 	bne	r17,r18,2aaec <_fwalk_reent+0x58>
   2ab18:	a5000017 	ldw	r20,0(r20)
   2ab1c:	a03fee1e 	bne	r20,zero,2aad8 <_fwalk_reent+0x44>
   2ab20:	b805883a 	mov	r2,r23
   2ab24:	dfc00817 	ldw	ra,32(sp)
   2ab28:	ddc00717 	ldw	r23,28(sp)
   2ab2c:	dd800617 	ldw	r22,24(sp)
   2ab30:	dd400517 	ldw	r21,20(sp)
   2ab34:	dd000417 	ldw	r20,16(sp)
   2ab38:	dcc00317 	ldw	r19,12(sp)
   2ab3c:	dc800217 	ldw	r18,8(sp)
   2ab40:	dc400117 	ldw	r17,4(sp)
   2ab44:	dc000017 	ldw	r16,0(sp)
   2ab48:	dec00904 	addi	sp,sp,36
   2ab4c:	f800283a 	ret
   2ab50:	002f883a 	mov	r23,zero
   2ab54:	003ff206 	br	2ab20 <_fwalk_reent+0x8c>

0002ab58 <_fwrite_r>:
   2ab58:	defff504 	addi	sp,sp,-44
   2ab5c:	dc800815 	stw	r18,32(sp)
   2ab60:	39a5383a 	mul	r18,r7,r6
   2ab64:	d8800304 	addi	r2,sp,12
   2ab68:	d8800015 	stw	r2,0(sp)
   2ab6c:	00800044 	movi	r2,1
   2ab70:	dcc00915 	stw	r19,36(sp)
   2ab74:	dc400715 	stw	r17,28(sp)
   2ab78:	dc000615 	stw	r16,24(sp)
   2ab7c:	d9400315 	stw	r5,12(sp)
   2ab80:	dfc00a15 	stw	ra,40(sp)
   2ab84:	dc800415 	stw	r18,16(sp)
   2ab88:	dc800215 	stw	r18,8(sp)
   2ab8c:	d8800115 	stw	r2,4(sp)
   2ab90:	3027883a 	mov	r19,r6
   2ab94:	3821883a 	mov	r16,r7
   2ab98:	2023883a 	mov	r17,r4
   2ab9c:	d9400b17 	ldw	r5,44(sp)
   2aba0:	20000226 	beq	r4,zero,2abac <_fwrite_r+0x54>
   2aba4:	20800e17 	ldw	r2,56(r4)
   2aba8:	10001a26 	beq	r2,zero,2ac14 <_fwrite_r+0xbc>
   2abac:	2880030b 	ldhu	r2,12(r5)
   2abb0:	10c8000c 	andi	r3,r2,8192
   2abb4:	1800061e 	bne	r3,zero,2abd0 <_fwrite_r+0x78>
   2abb8:	29001917 	ldw	r4,100(r5)
   2abbc:	00f7ffc4 	movi	r3,-8193
   2abc0:	10880014 	ori	r2,r2,8192
   2abc4:	20c6703a 	and	r3,r4,r3
   2abc8:	2880030d 	sth	r2,12(r5)
   2abcc:	28c01915 	stw	r3,100(r5)
   2abd0:	d80d883a 	mov	r6,sp
   2abd4:	8809883a 	mov	r4,r17
   2abd8:	0030a580 	call	30a58 <__sfvwrite_r>
   2abdc:	10000b26 	beq	r2,zero,2ac0c <_fwrite_r+0xb4>
   2abe0:	d9000217 	ldw	r4,8(sp)
   2abe4:	980b883a 	mov	r5,r19
   2abe8:	9109c83a 	sub	r4,r18,r4
   2abec:	0025ab00 	call	25ab0 <__udivsi3>
   2abf0:	dfc00a17 	ldw	ra,40(sp)
   2abf4:	dcc00917 	ldw	r19,36(sp)
   2abf8:	dc800817 	ldw	r18,32(sp)
   2abfc:	dc400717 	ldw	r17,28(sp)
   2ac00:	dc000617 	ldw	r16,24(sp)
   2ac04:	dec00b04 	addi	sp,sp,44
   2ac08:	f800283a 	ret
   2ac0c:	8005883a 	mov	r2,r16
   2ac10:	003ff706 	br	2abf0 <_fwrite_r+0x98>
   2ac14:	d9400515 	stw	r5,20(sp)
   2ac18:	0029f640 	call	29f64 <__sinit>
   2ac1c:	d9400517 	ldw	r5,20(sp)
   2ac20:	003fe206 	br	2abac <_fwrite_r+0x54>

0002ac24 <fwrite>:
   2ac24:	defffe04 	addi	sp,sp,-8
   2ac28:	00800134 	movhi	r2,4
   2ac2c:	d9c00015 	stw	r7,0(sp)
   2ac30:	10ae9f04 	addi	r2,r2,-17796
   2ac34:	300f883a 	mov	r7,r6
   2ac38:	280d883a 	mov	r6,r5
   2ac3c:	200b883a 	mov	r5,r4
   2ac40:	11000017 	ldw	r4,0(r2)
   2ac44:	dfc00115 	stw	ra,4(sp)
   2ac48:	002ab580 	call	2ab58 <_fwrite_r>
   2ac4c:	dfc00117 	ldw	ra,4(sp)
   2ac50:	dec00204 	addi	sp,sp,8
   2ac54:	f800283a 	ret

0002ac58 <_getc_r>:
   2ac58:	defffd04 	addi	sp,sp,-12
   2ac5c:	dc000115 	stw	r16,4(sp)
   2ac60:	dfc00215 	stw	ra,8(sp)
   2ac64:	2021883a 	mov	r16,r4
   2ac68:	20000226 	beq	r4,zero,2ac74 <_getc_r+0x1c>
   2ac6c:	20800e17 	ldw	r2,56(r4)
   2ac70:	10000c26 	beq	r2,zero,2aca4 <_getc_r+0x4c>
   2ac74:	28800117 	ldw	r2,4(r5)
   2ac78:	10bfffc4 	addi	r2,r2,-1
   2ac7c:	28800115 	stw	r2,4(r5)
   2ac80:	10000c16 	blt	r2,zero,2acb4 <_getc_r+0x5c>
   2ac84:	28800017 	ldw	r2,0(r5)
   2ac88:	10c00044 	addi	r3,r2,1
   2ac8c:	28c00015 	stw	r3,0(r5)
   2ac90:	10800003 	ldbu	r2,0(r2)
   2ac94:	dfc00217 	ldw	ra,8(sp)
   2ac98:	dc000117 	ldw	r16,4(sp)
   2ac9c:	dec00304 	addi	sp,sp,12
   2aca0:	f800283a 	ret
   2aca4:	d9400015 	stw	r5,0(sp)
   2aca8:	0029f640 	call	29f64 <__sinit>
   2acac:	d9400017 	ldw	r5,0(sp)
   2acb0:	003ff006 	br	2ac74 <_getc_r+0x1c>
   2acb4:	8009883a 	mov	r4,r16
   2acb8:	dfc00217 	ldw	ra,8(sp)
   2acbc:	dc000117 	ldw	r16,4(sp)
   2acc0:	dec00304 	addi	sp,sp,12
   2acc4:	002bdf41 	jmpi	2bdf4 <__srget_r>

0002acc8 <getc>:
   2acc8:	00800134 	movhi	r2,4
   2accc:	defffd04 	addi	sp,sp,-12
   2acd0:	10ae9f04 	addi	r2,r2,-17796
   2acd4:	dc400115 	stw	r17,4(sp)
   2acd8:	14400017 	ldw	r17,0(r2)
   2acdc:	dc000015 	stw	r16,0(sp)
   2ace0:	dfc00215 	stw	ra,8(sp)
   2ace4:	2021883a 	mov	r16,r4
   2ace8:	88000226 	beq	r17,zero,2acf4 <getc+0x2c>
   2acec:	88800e17 	ldw	r2,56(r17)
   2acf0:	10000d26 	beq	r2,zero,2ad28 <getc+0x60>
   2acf4:	80800117 	ldw	r2,4(r16)
   2acf8:	10bfffc4 	addi	r2,r2,-1
   2acfc:	80800115 	stw	r2,4(r16)
   2ad00:	10000c16 	blt	r2,zero,2ad34 <getc+0x6c>
   2ad04:	80800017 	ldw	r2,0(r16)
   2ad08:	10c00044 	addi	r3,r2,1
   2ad0c:	80c00015 	stw	r3,0(r16)
   2ad10:	10800003 	ldbu	r2,0(r2)
   2ad14:	dfc00217 	ldw	ra,8(sp)
   2ad18:	dc400117 	ldw	r17,4(sp)
   2ad1c:	dc000017 	ldw	r16,0(sp)
   2ad20:	dec00304 	addi	sp,sp,12
   2ad24:	f800283a 	ret
   2ad28:	8809883a 	mov	r4,r17
   2ad2c:	0029f640 	call	29f64 <__sinit>
   2ad30:	003ff006 	br	2acf4 <getc+0x2c>
   2ad34:	800b883a 	mov	r5,r16
   2ad38:	8809883a 	mov	r4,r17
   2ad3c:	dfc00217 	ldw	ra,8(sp)
   2ad40:	dc400117 	ldw	r17,4(sp)
   2ad44:	dc000017 	ldw	r16,0(sp)
   2ad48:	dec00304 	addi	sp,sp,12
   2ad4c:	002bdf41 	jmpi	2bdf4 <__srget_r>

0002ad50 <__smakebuf_r>:
   2ad50:	2880030b 	ldhu	r2,12(r5)
   2ad54:	10c0008c 	andi	r3,r2,2
   2ad58:	1800411e 	bne	r3,zero,2ae60 <__smakebuf_r+0x110>
   2ad5c:	deffec04 	addi	sp,sp,-80
   2ad60:	dc000f15 	stw	r16,60(sp)
   2ad64:	2821883a 	mov	r16,r5
   2ad68:	2940038f 	ldh	r5,14(r5)
   2ad6c:	dc401015 	stw	r17,64(sp)
   2ad70:	dfc01315 	stw	ra,76(sp)
   2ad74:	dcc01215 	stw	r19,72(sp)
   2ad78:	dc801115 	stw	r18,68(sp)
   2ad7c:	2023883a 	mov	r17,r4
   2ad80:	28001c16 	blt	r5,zero,2adf4 <__smakebuf_r+0xa4>
   2ad84:	d80d883a 	mov	r6,sp
   2ad88:	002a9740 	call	2a974 <_fstat_r>
   2ad8c:	10001816 	blt	r2,zero,2adf0 <__smakebuf_r+0xa0>
   2ad90:	d8800117 	ldw	r2,4(sp)
   2ad94:	00e00014 	movui	r3,32768
   2ad98:	10bc000c 	andi	r2,r2,61440
   2ad9c:	14c80020 	cmpeqi	r19,r2,8192
   2ada0:	10c03726 	beq	r2,r3,2ae80 <__smakebuf_r+0x130>
   2ada4:	80c0030b 	ldhu	r3,12(r16)
   2ada8:	18c20014 	ori	r3,r3,2048
   2adac:	80c0030d 	sth	r3,12(r16)
   2adb0:	00c80004 	movi	r3,8192
   2adb4:	10c0521e 	bne	r2,r3,2af00 <__smakebuf_r+0x1b0>
   2adb8:	8140038f 	ldh	r5,14(r16)
   2adbc:	8809883a 	mov	r4,r17
   2adc0:	0030f140 	call	30f14 <_isatty_r>
   2adc4:	10004c26 	beq	r2,zero,2aef8 <__smakebuf_r+0x1a8>
   2adc8:	8080030b 	ldhu	r2,12(r16)
   2adcc:	80c010c4 	addi	r3,r16,67
   2add0:	80c00015 	stw	r3,0(r16)
   2add4:	10800054 	ori	r2,r2,1
   2add8:	8080030d 	sth	r2,12(r16)
   2addc:	00800044 	movi	r2,1
   2ade0:	80c00415 	stw	r3,16(r16)
   2ade4:	80800515 	stw	r2,20(r16)
   2ade8:	04810004 	movi	r18,1024
   2adec:	00000706 	br	2ae0c <__smakebuf_r+0xbc>
   2adf0:	8080030b 	ldhu	r2,12(r16)
   2adf4:	10c0200c 	andi	r3,r2,128
   2adf8:	18001f1e 	bne	r3,zero,2ae78 <__smakebuf_r+0x128>
   2adfc:	04810004 	movi	r18,1024
   2ae00:	10820014 	ori	r2,r2,2048
   2ae04:	8080030d 	sth	r2,12(r16)
   2ae08:	0027883a 	mov	r19,zero
   2ae0c:	900b883a 	mov	r5,r18
   2ae10:	8809883a 	mov	r4,r17
   2ae14:	002af340 	call	2af34 <_malloc_r>
   2ae18:	10002c26 	beq	r2,zero,2aecc <__smakebuf_r+0x17c>
   2ae1c:	80c0030b 	ldhu	r3,12(r16)
   2ae20:	010000f4 	movhi	r4,3
   2ae24:	21270704 	addi	r4,r4,-25572
   2ae28:	89000f15 	stw	r4,60(r17)
   2ae2c:	18c02014 	ori	r3,r3,128
   2ae30:	80c0030d 	sth	r3,12(r16)
   2ae34:	80800015 	stw	r2,0(r16)
   2ae38:	80800415 	stw	r2,16(r16)
   2ae3c:	84800515 	stw	r18,20(r16)
   2ae40:	98001a1e 	bne	r19,zero,2aeac <__smakebuf_r+0x15c>
   2ae44:	dfc01317 	ldw	ra,76(sp)
   2ae48:	dcc01217 	ldw	r19,72(sp)
   2ae4c:	dc801117 	ldw	r18,68(sp)
   2ae50:	dc401017 	ldw	r17,64(sp)
   2ae54:	dc000f17 	ldw	r16,60(sp)
   2ae58:	dec01404 	addi	sp,sp,80
   2ae5c:	f800283a 	ret
   2ae60:	288010c4 	addi	r2,r5,67
   2ae64:	28800015 	stw	r2,0(r5)
   2ae68:	28800415 	stw	r2,16(r5)
   2ae6c:	00800044 	movi	r2,1
   2ae70:	28800515 	stw	r2,20(r5)
   2ae74:	f800283a 	ret
   2ae78:	04801004 	movi	r18,64
   2ae7c:	003fe006 	br	2ae00 <__smakebuf_r+0xb0>
   2ae80:	81000a17 	ldw	r4,40(r16)
   2ae84:	00c000f4 	movhi	r3,3
   2ae88:	18efea04 	addi	r3,r3,-16472
   2ae8c:	20ffc51e 	bne	r4,r3,2ada4 <__smakebuf_r+0x54>
   2ae90:	8080030b 	ldhu	r2,12(r16)
   2ae94:	04810004 	movi	r18,1024
   2ae98:	84801315 	stw	r18,76(r16)
   2ae9c:	1484b03a 	or	r2,r2,r18
   2aea0:	8080030d 	sth	r2,12(r16)
   2aea4:	0027883a 	mov	r19,zero
   2aea8:	003fd806 	br	2ae0c <__smakebuf_r+0xbc>
   2aeac:	8140038f 	ldh	r5,14(r16)
   2aeb0:	8809883a 	mov	r4,r17
   2aeb4:	0030f140 	call	30f14 <_isatty_r>
   2aeb8:	103fe226 	beq	r2,zero,2ae44 <__smakebuf_r+0xf4>
   2aebc:	8080030b 	ldhu	r2,12(r16)
   2aec0:	10800054 	ori	r2,r2,1
   2aec4:	8080030d 	sth	r2,12(r16)
   2aec8:	003fde06 	br	2ae44 <__smakebuf_r+0xf4>
   2aecc:	8080030b 	ldhu	r2,12(r16)
   2aed0:	10c0800c 	andi	r3,r2,512
   2aed4:	183fdb1e 	bne	r3,zero,2ae44 <__smakebuf_r+0xf4>
   2aed8:	10800094 	ori	r2,r2,2
   2aedc:	80c010c4 	addi	r3,r16,67
   2aee0:	8080030d 	sth	r2,12(r16)
   2aee4:	00800044 	movi	r2,1
   2aee8:	80c00015 	stw	r3,0(r16)
   2aeec:	80c00415 	stw	r3,16(r16)
   2aef0:	80800515 	stw	r2,20(r16)
   2aef4:	003fd306 	br	2ae44 <__smakebuf_r+0xf4>
   2aef8:	04810004 	movi	r18,1024
   2aefc:	003fc306 	br	2ae0c <__smakebuf_r+0xbc>
   2af00:	0027883a 	mov	r19,zero
   2af04:	04810004 	movi	r18,1024
   2af08:	003fc006 	br	2ae0c <__smakebuf_r+0xbc>

0002af0c <malloc>:
   2af0c:	00800134 	movhi	r2,4
   2af10:	10ae9f04 	addi	r2,r2,-17796
   2af14:	200b883a 	mov	r5,r4
   2af18:	11000017 	ldw	r4,0(r2)
   2af1c:	002af341 	jmpi	2af34 <_malloc_r>

0002af20 <free>:
   2af20:	00800134 	movhi	r2,4
   2af24:	10ae9f04 	addi	r2,r2,-17796
   2af28:	200b883a 	mov	r5,r4
   2af2c:	11000017 	ldw	r4,0(r2)
   2af30:	002a1e41 	jmpi	2a1e4 <_free_r>

0002af34 <_malloc_r>:
   2af34:	defff504 	addi	sp,sp,-44
   2af38:	dc800315 	stw	r18,12(sp)
   2af3c:	dfc00a15 	stw	ra,40(sp)
   2af40:	df000915 	stw	fp,36(sp)
   2af44:	ddc00815 	stw	r23,32(sp)
   2af48:	dd800715 	stw	r22,28(sp)
   2af4c:	dd400615 	stw	r21,24(sp)
   2af50:	dd000515 	stw	r20,20(sp)
   2af54:	dcc00415 	stw	r19,16(sp)
   2af58:	dc400215 	stw	r17,8(sp)
   2af5c:	dc000115 	stw	r16,4(sp)
   2af60:	288002c4 	addi	r2,r5,11
   2af64:	00c00584 	movi	r3,22
   2af68:	2025883a 	mov	r18,r4
   2af6c:	18807f2e 	bgeu	r3,r2,2b16c <_malloc_r+0x238>
   2af70:	047ffe04 	movi	r17,-8
   2af74:	1462703a 	and	r17,r2,r17
   2af78:	8800a316 	blt	r17,zero,2b208 <_malloc_r+0x2d4>
   2af7c:	8940a236 	bltu	r17,r5,2b208 <_malloc_r+0x2d4>
   2af80:	003579c0 	call	3579c <__malloc_lock>
   2af84:	00807dc4 	movi	r2,503
   2af88:	1441e92e 	bgeu	r2,r17,2b730 <_malloc_r+0x7fc>
   2af8c:	8804d27a 	srli	r2,r17,9
   2af90:	1000a126 	beq	r2,zero,2b218 <_malloc_r+0x2e4>
   2af94:	00c00104 	movi	r3,4
   2af98:	18811e36 	bltu	r3,r2,2b414 <_malloc_r+0x4e0>
   2af9c:	8804d1ba 	srli	r2,r17,6
   2afa0:	12000e44 	addi	r8,r2,57
   2afa4:	11c00e04 	addi	r7,r2,56
   2afa8:	4209883a 	add	r4,r8,r8
   2afac:	04c00134 	movhi	r19,4
   2afb0:	2109883a 	add	r4,r4,r4
   2afb4:	9ceccc04 	addi	r19,r19,-19664
   2afb8:	2109883a 	add	r4,r4,r4
   2afbc:	9909883a 	add	r4,r19,r4
   2afc0:	24000117 	ldw	r16,4(r4)
   2afc4:	213ffe04 	addi	r4,r4,-8
   2afc8:	24009726 	beq	r4,r16,2b228 <_malloc_r+0x2f4>
   2afcc:	80800117 	ldw	r2,4(r16)
   2afd0:	01bfff04 	movi	r6,-4
   2afd4:	014003c4 	movi	r5,15
   2afd8:	1184703a 	and	r2,r2,r6
   2afdc:	1447c83a 	sub	r3,r2,r17
   2afe0:	28c00716 	blt	r5,r3,2b000 <_malloc_r+0xcc>
   2afe4:	1800920e 	bge	r3,zero,2b230 <_malloc_r+0x2fc>
   2afe8:	84000317 	ldw	r16,12(r16)
   2afec:	24008e26 	beq	r4,r16,2b228 <_malloc_r+0x2f4>
   2aff0:	80800117 	ldw	r2,4(r16)
   2aff4:	1184703a 	and	r2,r2,r6
   2aff8:	1447c83a 	sub	r3,r2,r17
   2affc:	28fff90e 	bge	r5,r3,2afe4 <_malloc_r+0xb0>
   2b000:	3809883a 	mov	r4,r7
   2b004:	01800134 	movhi	r6,4
   2b008:	9c000417 	ldw	r16,16(r19)
   2b00c:	31accc04 	addi	r6,r6,-19664
   2b010:	32000204 	addi	r8,r6,8
   2b014:	82013426 	beq	r16,r8,2b4e8 <_malloc_r+0x5b4>
   2b018:	80c00117 	ldw	r3,4(r16)
   2b01c:	00bfff04 	movi	r2,-4
   2b020:	188e703a 	and	r7,r3,r2
   2b024:	3c45c83a 	sub	r2,r7,r17
   2b028:	00c003c4 	movi	r3,15
   2b02c:	18811f16 	blt	r3,r2,2b4ac <_malloc_r+0x578>
   2b030:	32000515 	stw	r8,20(r6)
   2b034:	32000415 	stw	r8,16(r6)
   2b038:	10007f0e 	bge	r2,zero,2b238 <_malloc_r+0x304>
   2b03c:	00807fc4 	movi	r2,511
   2b040:	11c0fd36 	bltu	r2,r7,2b438 <_malloc_r+0x504>
   2b044:	3806d0fa 	srli	r3,r7,3
   2b048:	01c00044 	movi	r7,1
   2b04c:	30800117 	ldw	r2,4(r6)
   2b050:	19400044 	addi	r5,r3,1
   2b054:	294b883a 	add	r5,r5,r5
   2b058:	1807d0ba 	srai	r3,r3,2
   2b05c:	294b883a 	add	r5,r5,r5
   2b060:	294b883a 	add	r5,r5,r5
   2b064:	298b883a 	add	r5,r5,r6
   2b068:	38c6983a 	sll	r3,r7,r3
   2b06c:	29c00017 	ldw	r7,0(r5)
   2b070:	2a7ffe04 	addi	r9,r5,-8
   2b074:	1886b03a 	or	r3,r3,r2
   2b078:	82400315 	stw	r9,12(r16)
   2b07c:	81c00215 	stw	r7,8(r16)
   2b080:	30c00115 	stw	r3,4(r6)
   2b084:	2c000015 	stw	r16,0(r5)
   2b088:	3c000315 	stw	r16,12(r7)
   2b08c:	2005d0ba 	srai	r2,r4,2
   2b090:	01400044 	movi	r5,1
   2b094:	288a983a 	sll	r5,r5,r2
   2b098:	19406f36 	bltu	r3,r5,2b258 <_malloc_r+0x324>
   2b09c:	28c4703a 	and	r2,r5,r3
   2b0a0:	10000a1e 	bne	r2,zero,2b0cc <_malloc_r+0x198>
   2b0a4:	00bfff04 	movi	r2,-4
   2b0a8:	294b883a 	add	r5,r5,r5
   2b0ac:	2088703a 	and	r4,r4,r2
   2b0b0:	28c4703a 	and	r2,r5,r3
   2b0b4:	21000104 	addi	r4,r4,4
   2b0b8:	1000041e 	bne	r2,zero,2b0cc <_malloc_r+0x198>
   2b0bc:	294b883a 	add	r5,r5,r5
   2b0c0:	28c4703a 	and	r2,r5,r3
   2b0c4:	21000104 	addi	r4,r4,4
   2b0c8:	103ffc26 	beq	r2,zero,2b0bc <_malloc_r+0x188>
   2b0cc:	02bfff04 	movi	r10,-4
   2b0d0:	024003c4 	movi	r9,15
   2b0d4:	21800044 	addi	r6,r4,1
   2b0d8:	318d883a 	add	r6,r6,r6
   2b0dc:	318d883a 	add	r6,r6,r6
   2b0e0:	318d883a 	add	r6,r6,r6
   2b0e4:	998d883a 	add	r6,r19,r6
   2b0e8:	333ffe04 	addi	r12,r6,-8
   2b0ec:	2017883a 	mov	r11,r4
   2b0f0:	31800104 	addi	r6,r6,4
   2b0f4:	34000017 	ldw	r16,0(r6)
   2b0f8:	31fffd04 	addi	r7,r6,-12
   2b0fc:	81c0041e 	bne	r16,r7,2b110 <_malloc_r+0x1dc>
   2b100:	0000fb06 	br	2b4f0 <_malloc_r+0x5bc>
   2b104:	1801030e 	bge	r3,zero,2b514 <_malloc_r+0x5e0>
   2b108:	84000317 	ldw	r16,12(r16)
   2b10c:	81c0f826 	beq	r16,r7,2b4f0 <_malloc_r+0x5bc>
   2b110:	80800117 	ldw	r2,4(r16)
   2b114:	1284703a 	and	r2,r2,r10
   2b118:	1447c83a 	sub	r3,r2,r17
   2b11c:	48fff90e 	bge	r9,r3,2b104 <_malloc_r+0x1d0>
   2b120:	80800317 	ldw	r2,12(r16)
   2b124:	81000217 	ldw	r4,8(r16)
   2b128:	89400054 	ori	r5,r17,1
   2b12c:	81400115 	stw	r5,4(r16)
   2b130:	20800315 	stw	r2,12(r4)
   2b134:	11000215 	stw	r4,8(r2)
   2b138:	8463883a 	add	r17,r16,r17
   2b13c:	9c400515 	stw	r17,20(r19)
   2b140:	9c400415 	stw	r17,16(r19)
   2b144:	18800054 	ori	r2,r3,1
   2b148:	88800115 	stw	r2,4(r17)
   2b14c:	8a000315 	stw	r8,12(r17)
   2b150:	8a000215 	stw	r8,8(r17)
   2b154:	88e3883a 	add	r17,r17,r3
   2b158:	88c00015 	stw	r3,0(r17)
   2b15c:	9009883a 	mov	r4,r18
   2b160:	00357c00 	call	357c0 <__malloc_unlock>
   2b164:	80800204 	addi	r2,r16,8
   2b168:	00001b06 	br	2b1d8 <_malloc_r+0x2a4>
   2b16c:	04400404 	movi	r17,16
   2b170:	89402536 	bltu	r17,r5,2b208 <_malloc_r+0x2d4>
   2b174:	003579c0 	call	3579c <__malloc_lock>
   2b178:	00800184 	movi	r2,6
   2b17c:	01000084 	movi	r4,2
   2b180:	04c00134 	movhi	r19,4
   2b184:	1085883a 	add	r2,r2,r2
   2b188:	9ceccc04 	addi	r19,r19,-19664
   2b18c:	1085883a 	add	r2,r2,r2
   2b190:	9885883a 	add	r2,r19,r2
   2b194:	14000117 	ldw	r16,4(r2)
   2b198:	10fffe04 	addi	r3,r2,-8
   2b19c:	80c0d926 	beq	r16,r3,2b504 <_malloc_r+0x5d0>
   2b1a0:	80c00117 	ldw	r3,4(r16)
   2b1a4:	81000317 	ldw	r4,12(r16)
   2b1a8:	00bfff04 	movi	r2,-4
   2b1ac:	1884703a 	and	r2,r3,r2
   2b1b0:	81400217 	ldw	r5,8(r16)
   2b1b4:	8085883a 	add	r2,r16,r2
   2b1b8:	10c00117 	ldw	r3,4(r2)
   2b1bc:	29000315 	stw	r4,12(r5)
   2b1c0:	21400215 	stw	r5,8(r4)
   2b1c4:	18c00054 	ori	r3,r3,1
   2b1c8:	10c00115 	stw	r3,4(r2)
   2b1cc:	9009883a 	mov	r4,r18
   2b1d0:	00357c00 	call	357c0 <__malloc_unlock>
   2b1d4:	80800204 	addi	r2,r16,8
   2b1d8:	dfc00a17 	ldw	ra,40(sp)
   2b1dc:	df000917 	ldw	fp,36(sp)
   2b1e0:	ddc00817 	ldw	r23,32(sp)
   2b1e4:	dd800717 	ldw	r22,28(sp)
   2b1e8:	dd400617 	ldw	r21,24(sp)
   2b1ec:	dd000517 	ldw	r20,20(sp)
   2b1f0:	dcc00417 	ldw	r19,16(sp)
   2b1f4:	dc800317 	ldw	r18,12(sp)
   2b1f8:	dc400217 	ldw	r17,8(sp)
   2b1fc:	dc000117 	ldw	r16,4(sp)
   2b200:	dec00b04 	addi	sp,sp,44
   2b204:	f800283a 	ret
   2b208:	00800304 	movi	r2,12
   2b20c:	90800015 	stw	r2,0(r18)
   2b210:	0005883a 	mov	r2,zero
   2b214:	003ff006 	br	2b1d8 <_malloc_r+0x2a4>
   2b218:	01002004 	movi	r4,128
   2b21c:	02001004 	movi	r8,64
   2b220:	01c00fc4 	movi	r7,63
   2b224:	003f6106 	br	2afac <_malloc_r+0x78>
   2b228:	4009883a 	mov	r4,r8
   2b22c:	003f7506 	br	2b004 <_malloc_r+0xd0>
   2b230:	81000317 	ldw	r4,12(r16)
   2b234:	003fde06 	br	2b1b0 <_malloc_r+0x27c>
   2b238:	81c5883a 	add	r2,r16,r7
   2b23c:	11400117 	ldw	r5,4(r2)
   2b240:	9009883a 	mov	r4,r18
   2b244:	29400054 	ori	r5,r5,1
   2b248:	11400115 	stw	r5,4(r2)
   2b24c:	00357c00 	call	357c0 <__malloc_unlock>
   2b250:	80800204 	addi	r2,r16,8
   2b254:	003fe006 	br	2b1d8 <_malloc_r+0x2a4>
   2b258:	9c000217 	ldw	r16,8(r19)
   2b25c:	00bfff04 	movi	r2,-4
   2b260:	85800117 	ldw	r22,4(r16)
   2b264:	b0ac703a 	and	r22,r22,r2
   2b268:	b4400336 	bltu	r22,r17,2b278 <_malloc_r+0x344>
   2b26c:	b445c83a 	sub	r2,r22,r17
   2b270:	00c003c4 	movi	r3,15
   2b274:	18805d16 	blt	r3,r2,2b3ec <_malloc_r+0x4b8>
   2b278:	05c00134 	movhi	r23,4
   2b27c:	00800134 	movhi	r2,4
   2b280:	10b9a204 	addi	r2,r2,-6520
   2b284:	bdeea004 	addi	r23,r23,-17792
   2b288:	15400017 	ldw	r21,0(r2)
   2b28c:	b8c00017 	ldw	r3,0(r23)
   2b290:	00bfffc4 	movi	r2,-1
   2b294:	858d883a 	add	r6,r16,r22
   2b298:	8d6b883a 	add	r21,r17,r21
   2b29c:	1880ea26 	beq	r3,r2,2b648 <_malloc_r+0x714>
   2b2a0:	ad4403c4 	addi	r21,r21,4111
   2b2a4:	00bc0004 	movi	r2,-4096
   2b2a8:	a8aa703a 	and	r21,r21,r2
   2b2ac:	a80b883a 	mov	r5,r21
   2b2b0:	9009883a 	mov	r4,r18
   2b2b4:	d9800015 	stw	r6,0(sp)
   2b2b8:	002be7c0 	call	2be7c <_sbrk_r>
   2b2bc:	1029883a 	mov	r20,r2
   2b2c0:	00bfffc4 	movi	r2,-1
   2b2c4:	d9800017 	ldw	r6,0(sp)
   2b2c8:	a080e826 	beq	r20,r2,2b66c <_malloc_r+0x738>
   2b2cc:	a180a636 	bltu	r20,r6,2b568 <_malloc_r+0x634>
   2b2d0:	07000134 	movhi	fp,4
   2b2d4:	e739ab04 	addi	fp,fp,-6484
   2b2d8:	e0800017 	ldw	r2,0(fp)
   2b2dc:	a887883a 	add	r3,r21,r2
   2b2e0:	e0c00015 	stw	r3,0(fp)
   2b2e4:	3500e626 	beq	r6,r20,2b680 <_malloc_r+0x74c>
   2b2e8:	b9000017 	ldw	r4,0(r23)
   2b2ec:	00bfffc4 	movi	r2,-1
   2b2f0:	2080ee26 	beq	r4,r2,2b6ac <_malloc_r+0x778>
   2b2f4:	a185c83a 	sub	r2,r20,r6
   2b2f8:	10c5883a 	add	r2,r2,r3
   2b2fc:	e0800015 	stw	r2,0(fp)
   2b300:	a0c001cc 	andi	r3,r20,7
   2b304:	1800bc26 	beq	r3,zero,2b5f8 <_malloc_r+0x6c4>
   2b308:	a0e9c83a 	sub	r20,r20,r3
   2b30c:	00840204 	movi	r2,4104
   2b310:	a5000204 	addi	r20,r20,8
   2b314:	10c7c83a 	sub	r3,r2,r3
   2b318:	a545883a 	add	r2,r20,r21
   2b31c:	1083ffcc 	andi	r2,r2,4095
   2b320:	18abc83a 	sub	r21,r3,r2
   2b324:	a80b883a 	mov	r5,r21
   2b328:	9009883a 	mov	r4,r18
   2b32c:	002be7c0 	call	2be7c <_sbrk_r>
   2b330:	00ffffc4 	movi	r3,-1
   2b334:	10c0e126 	beq	r2,r3,2b6bc <_malloc_r+0x788>
   2b338:	1505c83a 	sub	r2,r2,r20
   2b33c:	1545883a 	add	r2,r2,r21
   2b340:	10800054 	ori	r2,r2,1
   2b344:	e0c00017 	ldw	r3,0(fp)
   2b348:	9d000215 	stw	r20,8(r19)
   2b34c:	a0800115 	stw	r2,4(r20)
   2b350:	a8c7883a 	add	r3,r21,r3
   2b354:	e0c00015 	stw	r3,0(fp)
   2b358:	84c00e26 	beq	r16,r19,2b394 <_malloc_r+0x460>
   2b35c:	018003c4 	movi	r6,15
   2b360:	3580a72e 	bgeu	r6,r22,2b600 <_malloc_r+0x6cc>
   2b364:	81400117 	ldw	r5,4(r16)
   2b368:	013ffe04 	movi	r4,-8
   2b36c:	b0bffd04 	addi	r2,r22,-12
   2b370:	1104703a 	and	r2,r2,r4
   2b374:	2900004c 	andi	r4,r5,1
   2b378:	2088b03a 	or	r4,r4,r2
   2b37c:	81000115 	stw	r4,4(r16)
   2b380:	01400144 	movi	r5,5
   2b384:	8089883a 	add	r4,r16,r2
   2b388:	21400115 	stw	r5,4(r4)
   2b38c:	21400215 	stw	r5,8(r4)
   2b390:	3080cd36 	bltu	r6,r2,2b6c8 <_malloc_r+0x794>
   2b394:	00800134 	movhi	r2,4
   2b398:	10b9a104 	addi	r2,r2,-6524
   2b39c:	11000017 	ldw	r4,0(r2)
   2b3a0:	20c0012e 	bgeu	r4,r3,2b3a8 <_malloc_r+0x474>
   2b3a4:	10c00015 	stw	r3,0(r2)
   2b3a8:	00800134 	movhi	r2,4
   2b3ac:	10b9a004 	addi	r2,r2,-6528
   2b3b0:	11000017 	ldw	r4,0(r2)
   2b3b4:	9c000217 	ldw	r16,8(r19)
   2b3b8:	20c0012e 	bgeu	r4,r3,2b3c0 <_malloc_r+0x48c>
   2b3bc:	10c00015 	stw	r3,0(r2)
   2b3c0:	80c00117 	ldw	r3,4(r16)
   2b3c4:	00bfff04 	movi	r2,-4
   2b3c8:	1886703a 	and	r3,r3,r2
   2b3cc:	1c45c83a 	sub	r2,r3,r17
   2b3d0:	1c400236 	bltu	r3,r17,2b3dc <_malloc_r+0x4a8>
   2b3d4:	00c003c4 	movi	r3,15
   2b3d8:	18800416 	blt	r3,r2,2b3ec <_malloc_r+0x4b8>
   2b3dc:	9009883a 	mov	r4,r18
   2b3e0:	00357c00 	call	357c0 <__malloc_unlock>
   2b3e4:	0005883a 	mov	r2,zero
   2b3e8:	003f7b06 	br	2b1d8 <_malloc_r+0x2a4>
   2b3ec:	88c00054 	ori	r3,r17,1
   2b3f0:	80c00115 	stw	r3,4(r16)
   2b3f4:	8463883a 	add	r17,r16,r17
   2b3f8:	10800054 	ori	r2,r2,1
   2b3fc:	9c400215 	stw	r17,8(r19)
   2b400:	88800115 	stw	r2,4(r17)
   2b404:	9009883a 	mov	r4,r18
   2b408:	00357c00 	call	357c0 <__malloc_unlock>
   2b40c:	80800204 	addi	r2,r16,8
   2b410:	003f7106 	br	2b1d8 <_malloc_r+0x2a4>
   2b414:	00c00504 	movi	r3,20
   2b418:	18804a2e 	bgeu	r3,r2,2b544 <_malloc_r+0x610>
   2b41c:	00c01504 	movi	r3,84
   2b420:	18806e36 	bltu	r3,r2,2b5dc <_malloc_r+0x6a8>
   2b424:	8804d33a 	srli	r2,r17,12
   2b428:	12001bc4 	addi	r8,r2,111
   2b42c:	11c01b84 	addi	r7,r2,110
   2b430:	4209883a 	add	r4,r8,r8
   2b434:	003edd06 	br	2afac <_malloc_r+0x78>
   2b438:	3804d27a 	srli	r2,r7,9
   2b43c:	00c00104 	movi	r3,4
   2b440:	1880442e 	bgeu	r3,r2,2b554 <_malloc_r+0x620>
   2b444:	00c00504 	movi	r3,20
   2b448:	18808136 	bltu	r3,r2,2b650 <_malloc_r+0x71c>
   2b44c:	11401704 	addi	r5,r2,92
   2b450:	10c016c4 	addi	r3,r2,91
   2b454:	294b883a 	add	r5,r5,r5
   2b458:	294b883a 	add	r5,r5,r5
   2b45c:	294b883a 	add	r5,r5,r5
   2b460:	994b883a 	add	r5,r19,r5
   2b464:	28800017 	ldw	r2,0(r5)
   2b468:	01800134 	movhi	r6,4
   2b46c:	297ffe04 	addi	r5,r5,-8
   2b470:	31accc04 	addi	r6,r6,-19664
   2b474:	28806526 	beq	r5,r2,2b60c <_malloc_r+0x6d8>
   2b478:	01bfff04 	movi	r6,-4
   2b47c:	10c00117 	ldw	r3,4(r2)
   2b480:	1986703a 	and	r3,r3,r6
   2b484:	38c0022e 	bgeu	r7,r3,2b490 <_malloc_r+0x55c>
   2b488:	10800217 	ldw	r2,8(r2)
   2b48c:	28bffb1e 	bne	r5,r2,2b47c <_malloc_r+0x548>
   2b490:	11400317 	ldw	r5,12(r2)
   2b494:	98c00117 	ldw	r3,4(r19)
   2b498:	81400315 	stw	r5,12(r16)
   2b49c:	80800215 	stw	r2,8(r16)
   2b4a0:	2c000215 	stw	r16,8(r5)
   2b4a4:	14000315 	stw	r16,12(r2)
   2b4a8:	003ef806 	br	2b08c <_malloc_r+0x158>
   2b4ac:	88c00054 	ori	r3,r17,1
   2b4b0:	80c00115 	stw	r3,4(r16)
   2b4b4:	8463883a 	add	r17,r16,r17
   2b4b8:	34400515 	stw	r17,20(r6)
   2b4bc:	34400415 	stw	r17,16(r6)
   2b4c0:	10c00054 	ori	r3,r2,1
   2b4c4:	8a000315 	stw	r8,12(r17)
   2b4c8:	8a000215 	stw	r8,8(r17)
   2b4cc:	88c00115 	stw	r3,4(r17)
   2b4d0:	88a3883a 	add	r17,r17,r2
   2b4d4:	88800015 	stw	r2,0(r17)
   2b4d8:	9009883a 	mov	r4,r18
   2b4dc:	00357c00 	call	357c0 <__malloc_unlock>
   2b4e0:	80800204 	addi	r2,r16,8
   2b4e4:	003f3c06 	br	2b1d8 <_malloc_r+0x2a4>
   2b4e8:	30c00117 	ldw	r3,4(r6)
   2b4ec:	003ee706 	br	2b08c <_malloc_r+0x158>
   2b4f0:	5ac00044 	addi	r11,r11,1
   2b4f4:	588000cc 	andi	r2,r11,3
   2b4f8:	31800204 	addi	r6,r6,8
   2b4fc:	103efd1e 	bne	r2,zero,2b0f4 <_malloc_r+0x1c0>
   2b500:	00002406 	br	2b594 <_malloc_r+0x660>
   2b504:	14000317 	ldw	r16,12(r2)
   2b508:	143f251e 	bne	r2,r16,2b1a0 <_malloc_r+0x26c>
   2b50c:	21000084 	addi	r4,r4,2
   2b510:	003ebc06 	br	2b004 <_malloc_r+0xd0>
   2b514:	8085883a 	add	r2,r16,r2
   2b518:	10c00117 	ldw	r3,4(r2)
   2b51c:	81000317 	ldw	r4,12(r16)
   2b520:	81400217 	ldw	r5,8(r16)
   2b524:	18c00054 	ori	r3,r3,1
   2b528:	10c00115 	stw	r3,4(r2)
   2b52c:	29000315 	stw	r4,12(r5)
   2b530:	21400215 	stw	r5,8(r4)
   2b534:	9009883a 	mov	r4,r18
   2b538:	00357c00 	call	357c0 <__malloc_unlock>
   2b53c:	80800204 	addi	r2,r16,8
   2b540:	003f2506 	br	2b1d8 <_malloc_r+0x2a4>
   2b544:	12001704 	addi	r8,r2,92
   2b548:	11c016c4 	addi	r7,r2,91
   2b54c:	4209883a 	add	r4,r8,r8
   2b550:	003e9606 	br	2afac <_malloc_r+0x78>
   2b554:	3804d1ba 	srli	r2,r7,6
   2b558:	11400e44 	addi	r5,r2,57
   2b55c:	10c00e04 	addi	r3,r2,56
   2b560:	294b883a 	add	r5,r5,r5
   2b564:	003fbc06 	br	2b458 <_malloc_r+0x524>
   2b568:	84ff5926 	beq	r16,r19,2b2d0 <_malloc_r+0x39c>
   2b56c:	00800134 	movhi	r2,4
   2b570:	10accc04 	addi	r2,r2,-19664
   2b574:	14000217 	ldw	r16,8(r2)
   2b578:	00bfff04 	movi	r2,-4
   2b57c:	80c00117 	ldw	r3,4(r16)
   2b580:	1886703a 	and	r3,r3,r2
   2b584:	003f9106 	br	2b3cc <_malloc_r+0x498>
   2b588:	60800217 	ldw	r2,8(r12)
   2b58c:	213fffc4 	addi	r4,r4,-1
   2b590:	1300651e 	bne	r2,r12,2b728 <_malloc_r+0x7f4>
   2b594:	208000cc 	andi	r2,r4,3
   2b598:	633ffe04 	addi	r12,r12,-8
   2b59c:	103ffa1e 	bne	r2,zero,2b588 <_malloc_r+0x654>
   2b5a0:	98800117 	ldw	r2,4(r19)
   2b5a4:	0146303a 	nor	r3,zero,r5
   2b5a8:	1884703a 	and	r2,r3,r2
   2b5ac:	98800115 	stw	r2,4(r19)
   2b5b0:	294b883a 	add	r5,r5,r5
   2b5b4:	117f2836 	bltu	r2,r5,2b258 <_malloc_r+0x324>
   2b5b8:	283f2726 	beq	r5,zero,2b258 <_malloc_r+0x324>
   2b5bc:	2886703a 	and	r3,r5,r2
   2b5c0:	5809883a 	mov	r4,r11
   2b5c4:	183ec31e 	bne	r3,zero,2b0d4 <_malloc_r+0x1a0>
   2b5c8:	294b883a 	add	r5,r5,r5
   2b5cc:	2886703a 	and	r3,r5,r2
   2b5d0:	21000104 	addi	r4,r4,4
   2b5d4:	183ffc26 	beq	r3,zero,2b5c8 <_malloc_r+0x694>
   2b5d8:	003ebe06 	br	2b0d4 <_malloc_r+0x1a0>
   2b5dc:	00c05504 	movi	r3,340
   2b5e0:	18801236 	bltu	r3,r2,2b62c <_malloc_r+0x6f8>
   2b5e4:	8804d3fa 	srli	r2,r17,15
   2b5e8:	12001e04 	addi	r8,r2,120
   2b5ec:	11c01dc4 	addi	r7,r2,119
   2b5f0:	4209883a 	add	r4,r8,r8
   2b5f4:	003e6d06 	br	2afac <_malloc_r+0x78>
   2b5f8:	00c40004 	movi	r3,4096
   2b5fc:	003f4606 	br	2b318 <_malloc_r+0x3e4>
   2b600:	00800044 	movi	r2,1
   2b604:	a0800115 	stw	r2,4(r20)
   2b608:	003f7406 	br	2b3dc <_malloc_r+0x4a8>
   2b60c:	1805d0ba 	srai	r2,r3,2
   2b610:	01c00044 	movi	r7,1
   2b614:	30c00117 	ldw	r3,4(r6)
   2b618:	388e983a 	sll	r7,r7,r2
   2b61c:	2805883a 	mov	r2,r5
   2b620:	38c6b03a 	or	r3,r7,r3
   2b624:	30c00115 	stw	r3,4(r6)
   2b628:	003f9b06 	br	2b498 <_malloc_r+0x564>
   2b62c:	00c15504 	movi	r3,1364
   2b630:	18801a36 	bltu	r3,r2,2b69c <_malloc_r+0x768>
   2b634:	8804d4ba 	srli	r2,r17,18
   2b638:	12001f44 	addi	r8,r2,125
   2b63c:	11c01f04 	addi	r7,r2,124
   2b640:	4209883a 	add	r4,r8,r8
   2b644:	003e5906 	br	2afac <_malloc_r+0x78>
   2b648:	ad400404 	addi	r21,r21,16
   2b64c:	003f1706 	br	2b2ac <_malloc_r+0x378>
   2b650:	00c01504 	movi	r3,84
   2b654:	18802336 	bltu	r3,r2,2b6e4 <_malloc_r+0x7b0>
   2b658:	3804d33a 	srli	r2,r7,12
   2b65c:	11401bc4 	addi	r5,r2,111
   2b660:	10c01b84 	addi	r3,r2,110
   2b664:	294b883a 	add	r5,r5,r5
   2b668:	003f7b06 	br	2b458 <_malloc_r+0x524>
   2b66c:	9c000217 	ldw	r16,8(r19)
   2b670:	00bfff04 	movi	r2,-4
   2b674:	80c00117 	ldw	r3,4(r16)
   2b678:	1886703a 	and	r3,r3,r2
   2b67c:	003f5306 	br	2b3cc <_malloc_r+0x498>
   2b680:	3083ffcc 	andi	r2,r6,4095
   2b684:	103f181e 	bne	r2,zero,2b2e8 <_malloc_r+0x3b4>
   2b688:	99000217 	ldw	r4,8(r19)
   2b68c:	b545883a 	add	r2,r22,r21
   2b690:	10800054 	ori	r2,r2,1
   2b694:	20800115 	stw	r2,4(r4)
   2b698:	003f3e06 	br	2b394 <_malloc_r+0x460>
   2b69c:	01003f84 	movi	r4,254
   2b6a0:	02001fc4 	movi	r8,127
   2b6a4:	01c01f84 	movi	r7,126
   2b6a8:	003e4006 	br	2afac <_malloc_r+0x78>
   2b6ac:	00800134 	movhi	r2,4
   2b6b0:	10aea004 	addi	r2,r2,-17792
   2b6b4:	15000015 	stw	r20,0(r2)
   2b6b8:	003f1106 	br	2b300 <_malloc_r+0x3cc>
   2b6bc:	00800044 	movi	r2,1
   2b6c0:	002b883a 	mov	r21,zero
   2b6c4:	003f1f06 	br	2b344 <_malloc_r+0x410>
   2b6c8:	81400204 	addi	r5,r16,8
   2b6cc:	9009883a 	mov	r4,r18
   2b6d0:	002a1e40 	call	2a1e4 <_free_r>
   2b6d4:	00800134 	movhi	r2,4
   2b6d8:	10b9ab04 	addi	r2,r2,-6484
   2b6dc:	10c00017 	ldw	r3,0(r2)
   2b6e0:	003f2c06 	br	2b394 <_malloc_r+0x460>
   2b6e4:	00c05504 	movi	r3,340
   2b6e8:	18800536 	bltu	r3,r2,2b700 <_malloc_r+0x7cc>
   2b6ec:	3804d3fa 	srli	r2,r7,15
   2b6f0:	11401e04 	addi	r5,r2,120
   2b6f4:	10c01dc4 	addi	r3,r2,119
   2b6f8:	294b883a 	add	r5,r5,r5
   2b6fc:	003f5606 	br	2b458 <_malloc_r+0x524>
   2b700:	00c15504 	movi	r3,1364
   2b704:	18800536 	bltu	r3,r2,2b71c <_malloc_r+0x7e8>
   2b708:	3804d4ba 	srli	r2,r7,18
   2b70c:	11401f44 	addi	r5,r2,125
   2b710:	10c01f04 	addi	r3,r2,124
   2b714:	294b883a 	add	r5,r5,r5
   2b718:	003f4f06 	br	2b458 <_malloc_r+0x524>
   2b71c:	01403f84 	movi	r5,254
   2b720:	00c01f84 	movi	r3,126
   2b724:	003f4c06 	br	2b458 <_malloc_r+0x524>
   2b728:	98800117 	ldw	r2,4(r19)
   2b72c:	003fa006 	br	2b5b0 <_malloc_r+0x67c>
   2b730:	8808d0fa 	srli	r4,r17,3
   2b734:	20800044 	addi	r2,r4,1
   2b738:	1085883a 	add	r2,r2,r2
   2b73c:	003e9006 	br	2b180 <_malloc_r+0x24c>

0002b740 <memcpy>:
   2b740:	defffd04 	addi	sp,sp,-12
   2b744:	dfc00215 	stw	ra,8(sp)
   2b748:	dc400115 	stw	r17,4(sp)
   2b74c:	dc000015 	stw	r16,0(sp)
   2b750:	00c003c4 	movi	r3,15
   2b754:	2005883a 	mov	r2,r4
   2b758:	1980452e 	bgeu	r3,r6,2b870 <memcpy+0x130>
   2b75c:	2906b03a 	or	r3,r5,r4
   2b760:	18c000cc 	andi	r3,r3,3
   2b764:	1800441e 	bne	r3,zero,2b878 <memcpy+0x138>
   2b768:	347ffc04 	addi	r17,r6,-16
   2b76c:	8822d13a 	srli	r17,r17,4
   2b770:	28c00104 	addi	r3,r5,4
   2b774:	23400104 	addi	r13,r4,4
   2b778:	8820913a 	slli	r16,r17,4
   2b77c:	2b000204 	addi	r12,r5,8
   2b780:	22c00204 	addi	r11,r4,8
   2b784:	84000504 	addi	r16,r16,20
   2b788:	2a800304 	addi	r10,r5,12
   2b78c:	22400304 	addi	r9,r4,12
   2b790:	2c21883a 	add	r16,r5,r16
   2b794:	2811883a 	mov	r8,r5
   2b798:	200f883a 	mov	r7,r4
   2b79c:	41000017 	ldw	r4,0(r8)
   2b7a0:	1fc00017 	ldw	ra,0(r3)
   2b7a4:	63c00017 	ldw	r15,0(r12)
   2b7a8:	39000015 	stw	r4,0(r7)
   2b7ac:	53800017 	ldw	r14,0(r10)
   2b7b0:	6fc00015 	stw	ra,0(r13)
   2b7b4:	5bc00015 	stw	r15,0(r11)
   2b7b8:	4b800015 	stw	r14,0(r9)
   2b7bc:	18c00404 	addi	r3,r3,16
   2b7c0:	39c00404 	addi	r7,r7,16
   2b7c4:	42000404 	addi	r8,r8,16
   2b7c8:	6b400404 	addi	r13,r13,16
   2b7cc:	63000404 	addi	r12,r12,16
   2b7d0:	5ac00404 	addi	r11,r11,16
   2b7d4:	52800404 	addi	r10,r10,16
   2b7d8:	4a400404 	addi	r9,r9,16
   2b7dc:	1c3fef1e 	bne	r3,r16,2b79c <memcpy+0x5c>
   2b7e0:	89c00044 	addi	r7,r17,1
   2b7e4:	380e913a 	slli	r7,r7,4
   2b7e8:	310003cc 	andi	r4,r6,15
   2b7ec:	02c000c4 	movi	r11,3
   2b7f0:	11c7883a 	add	r3,r2,r7
   2b7f4:	29cb883a 	add	r5,r5,r7
   2b7f8:	5900212e 	bgeu	r11,r4,2b880 <memcpy+0x140>
   2b7fc:	1813883a 	mov	r9,r3
   2b800:	2811883a 	mov	r8,r5
   2b804:	200f883a 	mov	r7,r4
   2b808:	42800017 	ldw	r10,0(r8)
   2b80c:	4a400104 	addi	r9,r9,4
   2b810:	39ffff04 	addi	r7,r7,-4
   2b814:	4abfff15 	stw	r10,-4(r9)
   2b818:	42000104 	addi	r8,r8,4
   2b81c:	59fffa36 	bltu	r11,r7,2b808 <memcpy+0xc8>
   2b820:	213fff04 	addi	r4,r4,-4
   2b824:	2008d0ba 	srli	r4,r4,2
   2b828:	318000cc 	andi	r6,r6,3
   2b82c:	21000044 	addi	r4,r4,1
   2b830:	2109883a 	add	r4,r4,r4
   2b834:	2109883a 	add	r4,r4,r4
   2b838:	1907883a 	add	r3,r3,r4
   2b83c:	290b883a 	add	r5,r5,r4
   2b840:	30000626 	beq	r6,zero,2b85c <memcpy+0x11c>
   2b844:	198d883a 	add	r6,r3,r6
   2b848:	29c00003 	ldbu	r7,0(r5)
   2b84c:	18c00044 	addi	r3,r3,1
   2b850:	29400044 	addi	r5,r5,1
   2b854:	19ffffc5 	stb	r7,-1(r3)
   2b858:	19bffb1e 	bne	r3,r6,2b848 <memcpy+0x108>
   2b85c:	dfc00217 	ldw	ra,8(sp)
   2b860:	dc400117 	ldw	r17,4(sp)
   2b864:	dc000017 	ldw	r16,0(sp)
   2b868:	dec00304 	addi	sp,sp,12
   2b86c:	f800283a 	ret
   2b870:	2007883a 	mov	r3,r4
   2b874:	003ff206 	br	2b840 <memcpy+0x100>
   2b878:	2007883a 	mov	r3,r4
   2b87c:	003ff106 	br	2b844 <memcpy+0x104>
   2b880:	200d883a 	mov	r6,r4
   2b884:	003fee06 	br	2b840 <memcpy+0x100>

0002b888 <memset>:
   2b888:	20c000cc 	andi	r3,r4,3
   2b88c:	2005883a 	mov	r2,r4
   2b890:	18004426 	beq	r3,zero,2b9a4 <memset+0x11c>
   2b894:	31ffffc4 	addi	r7,r6,-1
   2b898:	30004026 	beq	r6,zero,2b99c <memset+0x114>
   2b89c:	2813883a 	mov	r9,r5
   2b8a0:	200d883a 	mov	r6,r4
   2b8a4:	2007883a 	mov	r3,r4
   2b8a8:	00000406 	br	2b8bc <memset+0x34>
   2b8ac:	3a3fffc4 	addi	r8,r7,-1
   2b8b0:	31800044 	addi	r6,r6,1
   2b8b4:	38003926 	beq	r7,zero,2b99c <memset+0x114>
   2b8b8:	400f883a 	mov	r7,r8
   2b8bc:	18c00044 	addi	r3,r3,1
   2b8c0:	32400005 	stb	r9,0(r6)
   2b8c4:	1a0000cc 	andi	r8,r3,3
   2b8c8:	403ff81e 	bne	r8,zero,2b8ac <memset+0x24>
   2b8cc:	010000c4 	movi	r4,3
   2b8d0:	21c02d2e 	bgeu	r4,r7,2b988 <memset+0x100>
   2b8d4:	29003fcc 	andi	r4,r5,255
   2b8d8:	200c923a 	slli	r6,r4,8
   2b8dc:	3108b03a 	or	r4,r6,r4
   2b8e0:	200c943a 	slli	r6,r4,16
   2b8e4:	218cb03a 	or	r6,r4,r6
   2b8e8:	010003c4 	movi	r4,15
   2b8ec:	21c0182e 	bgeu	r4,r7,2b950 <memset+0xc8>
   2b8f0:	3b3ffc04 	addi	r12,r7,-16
   2b8f4:	6018d13a 	srli	r12,r12,4
   2b8f8:	1a000104 	addi	r8,r3,4
   2b8fc:	1ac00204 	addi	r11,r3,8
   2b900:	6008913a 	slli	r4,r12,4
   2b904:	1a800304 	addi	r10,r3,12
   2b908:	1813883a 	mov	r9,r3
   2b90c:	21000504 	addi	r4,r4,20
   2b910:	1909883a 	add	r4,r3,r4
   2b914:	49800015 	stw	r6,0(r9)
   2b918:	41800015 	stw	r6,0(r8)
   2b91c:	59800015 	stw	r6,0(r11)
   2b920:	51800015 	stw	r6,0(r10)
   2b924:	42000404 	addi	r8,r8,16
   2b928:	4a400404 	addi	r9,r9,16
   2b92c:	5ac00404 	addi	r11,r11,16
   2b930:	52800404 	addi	r10,r10,16
   2b934:	413ff71e 	bne	r8,r4,2b914 <memset+0x8c>
   2b938:	63000044 	addi	r12,r12,1
   2b93c:	6018913a 	slli	r12,r12,4
   2b940:	39c003cc 	andi	r7,r7,15
   2b944:	010000c4 	movi	r4,3
   2b948:	1b07883a 	add	r3,r3,r12
   2b94c:	21c00e2e 	bgeu	r4,r7,2b988 <memset+0x100>
   2b950:	1813883a 	mov	r9,r3
   2b954:	3811883a 	mov	r8,r7
   2b958:	010000c4 	movi	r4,3
   2b95c:	49800015 	stw	r6,0(r9)
   2b960:	423fff04 	addi	r8,r8,-4
   2b964:	4a400104 	addi	r9,r9,4
   2b968:	223ffc36 	bltu	r4,r8,2b95c <memset+0xd4>
   2b96c:	393fff04 	addi	r4,r7,-4
   2b970:	2008d0ba 	srli	r4,r4,2
   2b974:	39c000cc 	andi	r7,r7,3
   2b978:	21000044 	addi	r4,r4,1
   2b97c:	2109883a 	add	r4,r4,r4
   2b980:	2109883a 	add	r4,r4,r4
   2b984:	1907883a 	add	r3,r3,r4
   2b988:	38000526 	beq	r7,zero,2b9a0 <memset+0x118>
   2b98c:	19cf883a 	add	r7,r3,r7
   2b990:	19400005 	stb	r5,0(r3)
   2b994:	18c00044 	addi	r3,r3,1
   2b998:	38fffd1e 	bne	r7,r3,2b990 <memset+0x108>
   2b99c:	f800283a 	ret
   2b9a0:	f800283a 	ret
   2b9a4:	2007883a 	mov	r3,r4
   2b9a8:	300f883a 	mov	r7,r6
   2b9ac:	003fc706 	br	2b8cc <memset+0x44>

0002b9b0 <_open_r>:
   2b9b0:	defffd04 	addi	sp,sp,-12
   2b9b4:	2805883a 	mov	r2,r5
   2b9b8:	dc000015 	stw	r16,0(sp)
   2b9bc:	04000134 	movhi	r16,4
   2b9c0:	dc400115 	stw	r17,4(sp)
   2b9c4:	300b883a 	mov	r5,r6
   2b9c8:	84399f04 	addi	r16,r16,-6532
   2b9cc:	2023883a 	mov	r17,r4
   2b9d0:	380d883a 	mov	r6,r7
   2b9d4:	1009883a 	mov	r4,r2
   2b9d8:	dfc00215 	stw	ra,8(sp)
   2b9dc:	80000015 	stw	zero,0(r16)
   2b9e0:	00358e40 	call	358e4 <open>
   2b9e4:	00ffffc4 	movi	r3,-1
   2b9e8:	10c00526 	beq	r2,r3,2ba00 <_open_r+0x50>
   2b9ec:	dfc00217 	ldw	ra,8(sp)
   2b9f0:	dc400117 	ldw	r17,4(sp)
   2b9f4:	dc000017 	ldw	r16,0(sp)
   2b9f8:	dec00304 	addi	sp,sp,12
   2b9fc:	f800283a 	ret
   2ba00:	80c00017 	ldw	r3,0(r16)
   2ba04:	183ff926 	beq	r3,zero,2b9ec <_open_r+0x3c>
   2ba08:	88c00015 	stw	r3,0(r17)
   2ba0c:	003ff706 	br	2b9ec <_open_r+0x3c>

0002ba10 <_perror_r>:
   2ba10:	defffd04 	addi	sp,sp,-12
   2ba14:	dc000115 	stw	r16,4(sp)
   2ba18:	dfc00215 	stw	ra,8(sp)
   2ba1c:	2021883a 	mov	r16,r4
   2ba20:	28000326 	beq	r5,zero,2ba30 <_perror_r+0x20>
   2ba24:	28c00007 	ldb	r3,0(r5)
   2ba28:	2805883a 	mov	r2,r5
   2ba2c:	1800101e 	bne	r3,zero,2ba70 <_perror_r+0x60>
   2ba30:	81400017 	ldw	r5,0(r16)
   2ba34:	d80f883a 	mov	r7,sp
   2ba38:	01800044 	movi	r6,1
   2ba3c:	8009883a 	mov	r4,r16
   2ba40:	002c00c0 	call	2c00c <_strerror_r>
   2ba44:	10000326 	beq	r2,zero,2ba54 <_perror_r+0x44>
   2ba48:	81400317 	ldw	r5,12(r16)
   2ba4c:	1009883a 	mov	r4,r2
   2ba50:	0030a400 	call	30a40 <fputs>
   2ba54:	81400317 	ldw	r5,12(r16)
   2ba58:	01000284 	movi	r4,10
   2ba5c:	00309480 	call	30948 <fputc>
   2ba60:	dfc00217 	ldw	ra,8(sp)
   2ba64:	dc000117 	ldw	r16,4(sp)
   2ba68:	dec00304 	addi	sp,sp,12
   2ba6c:	f800283a 	ret
   2ba70:	21400317 	ldw	r5,12(r4)
   2ba74:	1009883a 	mov	r4,r2
   2ba78:	0030a400 	call	30a40 <fputs>
   2ba7c:	81400317 	ldw	r5,12(r16)
   2ba80:	01000134 	movhi	r4,4
   2ba84:	2120dc04 	addi	r4,r4,-31888
   2ba88:	0030a400 	call	30a40 <fputs>
   2ba8c:	003fe806 	br	2ba30 <_perror_r+0x20>

0002ba90 <perror>:
   2ba90:	00800134 	movhi	r2,4
   2ba94:	10ae9f04 	addi	r2,r2,-17796
   2ba98:	200b883a 	mov	r5,r4
   2ba9c:	11000017 	ldw	r4,0(r2)
   2baa0:	002ba101 	jmpi	2ba10 <_perror_r>

0002baa4 <_printf_r>:
   2baa4:	defffd04 	addi	sp,sp,-12
   2baa8:	2805883a 	mov	r2,r5
   2baac:	dfc00015 	stw	ra,0(sp)
   2bab0:	d9800115 	stw	r6,4(sp)
   2bab4:	d9c00215 	stw	r7,8(sp)
   2bab8:	21400217 	ldw	r5,8(r4)
   2babc:	d9c00104 	addi	r7,sp,4
   2bac0:	100d883a 	mov	r6,r2
   2bac4:	002c9780 	call	2c978 <___vfprintf_internal_r>
   2bac8:	dfc00017 	ldw	ra,0(sp)
   2bacc:	dec00304 	addi	sp,sp,12
   2bad0:	f800283a 	ret

0002bad4 <printf>:
   2bad4:	defffc04 	addi	sp,sp,-16
   2bad8:	dfc00015 	stw	ra,0(sp)
   2badc:	d9400115 	stw	r5,4(sp)
   2bae0:	d9800215 	stw	r6,8(sp)
   2bae4:	d9c00315 	stw	r7,12(sp)
   2bae8:	00800134 	movhi	r2,4
   2baec:	10ae9f04 	addi	r2,r2,-17796
   2baf0:	10800017 	ldw	r2,0(r2)
   2baf4:	200b883a 	mov	r5,r4
   2baf8:	d9800104 	addi	r6,sp,4
   2bafc:	11000217 	ldw	r4,8(r2)
   2bb00:	002eb700 	call	2eb70 <__vfprintf_internal>
   2bb04:	dfc00017 	ldw	ra,0(sp)
   2bb08:	dec00404 	addi	sp,sp,16
   2bb0c:	f800283a 	ret

0002bb10 <_putchar_r>:
   2bb10:	21800217 	ldw	r6,8(r4)
   2bb14:	00322e01 	jmpi	322e0 <_putc_r>

0002bb18 <putchar>:
   2bb18:	00800134 	movhi	r2,4
   2bb1c:	10ae9f04 	addi	r2,r2,-17796
   2bb20:	200b883a 	mov	r5,r4
   2bb24:	11000017 	ldw	r4,0(r2)
   2bb28:	21800217 	ldw	r6,8(r4)
   2bb2c:	00322e01 	jmpi	322e0 <_putc_r>

0002bb30 <_puts_r>:
   2bb30:	defff604 	addi	sp,sp,-40
   2bb34:	dc000715 	stw	r16,28(sp)
   2bb38:	2021883a 	mov	r16,r4
   2bb3c:	2809883a 	mov	r4,r5
   2bb40:	dc400815 	stw	r17,32(sp)
   2bb44:	dfc00915 	stw	ra,36(sp)
   2bb48:	2823883a 	mov	r17,r5
   2bb4c:	002c6840 	call	2c684 <strlen>
   2bb50:	10c00044 	addi	r3,r2,1
   2bb54:	d8800115 	stw	r2,4(sp)
   2bb58:	00800134 	movhi	r2,4
   2bb5c:	10a0dd04 	addi	r2,r2,-31884
   2bb60:	d8800215 	stw	r2,8(sp)
   2bb64:	00800044 	movi	r2,1
   2bb68:	d8800315 	stw	r2,12(sp)
   2bb6c:	00800084 	movi	r2,2
   2bb70:	dc400015 	stw	r17,0(sp)
   2bb74:	d8c00615 	stw	r3,24(sp)
   2bb78:	dec00415 	stw	sp,16(sp)
   2bb7c:	d8800515 	stw	r2,20(sp)
   2bb80:	80000226 	beq	r16,zero,2bb8c <_puts_r+0x5c>
   2bb84:	80800e17 	ldw	r2,56(r16)
   2bb88:	10001426 	beq	r2,zero,2bbdc <_puts_r+0xac>
   2bb8c:	81400217 	ldw	r5,8(r16)
   2bb90:	2880030b 	ldhu	r2,12(r5)
   2bb94:	10c8000c 	andi	r3,r2,8192
   2bb98:	1800061e 	bne	r3,zero,2bbb4 <_puts_r+0x84>
   2bb9c:	29001917 	ldw	r4,100(r5)
   2bba0:	00f7ffc4 	movi	r3,-8193
   2bba4:	10880014 	ori	r2,r2,8192
   2bba8:	20c6703a 	and	r3,r4,r3
   2bbac:	2880030d 	sth	r2,12(r5)
   2bbb0:	28c01915 	stw	r3,100(r5)
   2bbb4:	d9800404 	addi	r6,sp,16
   2bbb8:	8009883a 	mov	r4,r16
   2bbbc:	0030a580 	call	30a58 <__sfvwrite_r>
   2bbc0:	1000091e 	bne	r2,zero,2bbe8 <_puts_r+0xb8>
   2bbc4:	00800284 	movi	r2,10
   2bbc8:	dfc00917 	ldw	ra,36(sp)
   2bbcc:	dc400817 	ldw	r17,32(sp)
   2bbd0:	dc000717 	ldw	r16,28(sp)
   2bbd4:	dec00a04 	addi	sp,sp,40
   2bbd8:	f800283a 	ret
   2bbdc:	8009883a 	mov	r4,r16
   2bbe0:	0029f640 	call	29f64 <__sinit>
   2bbe4:	003fe906 	br	2bb8c <_puts_r+0x5c>
   2bbe8:	00bfffc4 	movi	r2,-1
   2bbec:	003ff606 	br	2bbc8 <_puts_r+0x98>

0002bbf0 <puts>:
   2bbf0:	00800134 	movhi	r2,4
   2bbf4:	10ae9f04 	addi	r2,r2,-17796
   2bbf8:	200b883a 	mov	r5,r4
   2bbfc:	11000017 	ldw	r4,0(r2)
   2bc00:	002bb301 	jmpi	2bb30 <_puts_r>

0002bc04 <lflush>:
   2bc04:	2080030b 	ldhu	r2,12(r4)
   2bc08:	00c00244 	movi	r3,9
   2bc0c:	1080024c 	andi	r2,r2,9
   2bc10:	10c00226 	beq	r2,r3,2bc1c <lflush+0x18>
   2bc14:	0005883a 	mov	r2,zero
   2bc18:	f800283a 	ret
   2bc1c:	0029be41 	jmpi	29be4 <fflush>

0002bc20 <__srefill_r>:
   2bc20:	defffc04 	addi	sp,sp,-16
   2bc24:	dc400115 	stw	r17,4(sp)
   2bc28:	dc000015 	stw	r16,0(sp)
   2bc2c:	dfc00315 	stw	ra,12(sp)
   2bc30:	dc800215 	stw	r18,8(sp)
   2bc34:	2023883a 	mov	r17,r4
   2bc38:	2821883a 	mov	r16,r5
   2bc3c:	20000226 	beq	r4,zero,2bc48 <__srefill_r+0x28>
   2bc40:	20800e17 	ldw	r2,56(r4)
   2bc44:	10003c26 	beq	r2,zero,2bd38 <__srefill_r+0x118>
   2bc48:	80c0030b 	ldhu	r3,12(r16)
   2bc4c:	1908000c 	andi	r4,r3,8192
   2bc50:	1805883a 	mov	r2,r3
   2bc54:	2000071e 	bne	r4,zero,2bc74 <__srefill_r+0x54>
   2bc58:	81001917 	ldw	r4,100(r16)
   2bc5c:	18880014 	ori	r2,r3,8192
   2bc60:	00f7ffc4 	movi	r3,-8193
   2bc64:	20c8703a 	and	r4,r4,r3
   2bc68:	8080030d 	sth	r2,12(r16)
   2bc6c:	1007883a 	mov	r3,r2
   2bc70:	81001915 	stw	r4,100(r16)
   2bc74:	80000115 	stw	zero,4(r16)
   2bc78:	1100080c 	andi	r4,r2,32
   2bc7c:	2000571e 	bne	r4,zero,2bddc <__srefill_r+0x1bc>
   2bc80:	1100010c 	andi	r4,r2,4
   2bc84:	20001f26 	beq	r4,zero,2bd04 <__srefill_r+0xe4>
   2bc88:	81400c17 	ldw	r5,48(r16)
   2bc8c:	28000826 	beq	r5,zero,2bcb0 <__srefill_r+0x90>
   2bc90:	80801004 	addi	r2,r16,64
   2bc94:	28800226 	beq	r5,r2,2bca0 <__srefill_r+0x80>
   2bc98:	8809883a 	mov	r4,r17
   2bc9c:	002a1e40 	call	2a1e4 <_free_r>
   2bca0:	80800f17 	ldw	r2,60(r16)
   2bca4:	80000c15 	stw	zero,48(r16)
   2bca8:	80800115 	stw	r2,4(r16)
   2bcac:	1000391e 	bne	r2,zero,2bd94 <__srefill_r+0x174>
   2bcb0:	80800417 	ldw	r2,16(r16)
   2bcb4:	10004b26 	beq	r2,zero,2bde4 <__srefill_r+0x1c4>
   2bcb8:	8480030b 	ldhu	r18,12(r16)
   2bcbc:	908000cc 	andi	r2,r18,3
   2bcc0:	10001f1e 	bne	r2,zero,2bd40 <__srefill_r+0x120>
   2bcc4:	81800417 	ldw	r6,16(r16)
   2bcc8:	80800817 	ldw	r2,32(r16)
   2bccc:	81c00517 	ldw	r7,20(r16)
   2bcd0:	81400717 	ldw	r5,28(r16)
   2bcd4:	81800015 	stw	r6,0(r16)
   2bcd8:	8809883a 	mov	r4,r17
   2bcdc:	103ee83a 	callr	r2
   2bce0:	80800115 	stw	r2,4(r16)
   2bce4:	00800e0e 	bge	zero,r2,2bd20 <__srefill_r+0x100>
   2bce8:	0005883a 	mov	r2,zero
   2bcec:	dfc00317 	ldw	ra,12(sp)
   2bcf0:	dc800217 	ldw	r18,8(sp)
   2bcf4:	dc400117 	ldw	r17,4(sp)
   2bcf8:	dc000017 	ldw	r16,0(sp)
   2bcfc:	dec00404 	addi	sp,sp,16
   2bd00:	f800283a 	ret
   2bd04:	1100040c 	andi	r4,r2,16
   2bd08:	20003026 	beq	r4,zero,2bdcc <__srefill_r+0x1ac>
   2bd0c:	1080020c 	andi	r2,r2,8
   2bd10:	1000241e 	bne	r2,zero,2bda4 <__srefill_r+0x184>
   2bd14:	18c00114 	ori	r3,r3,4
   2bd18:	80c0030d 	sth	r3,12(r16)
   2bd1c:	003fe406 	br	2bcb0 <__srefill_r+0x90>
   2bd20:	80c0030b 	ldhu	r3,12(r16)
   2bd24:	1000161e 	bne	r2,zero,2bd80 <__srefill_r+0x160>
   2bd28:	18c00814 	ori	r3,r3,32
   2bd2c:	00bfffc4 	movi	r2,-1
   2bd30:	80c0030d 	sth	r3,12(r16)
   2bd34:	003fed06 	br	2bcec <__srefill_r+0xcc>
   2bd38:	0029f640 	call	29f64 <__sinit>
   2bd3c:	003fc206 	br	2bc48 <__srefill_r+0x28>
   2bd40:	00800134 	movhi	r2,4
   2bd44:	10ae9e04 	addi	r2,r2,-17800
   2bd48:	11000017 	ldw	r4,0(r2)
   2bd4c:	014000f4 	movhi	r5,3
   2bd50:	00800044 	movi	r2,1
   2bd54:	296f0104 	addi	r5,r5,-17404
   2bd58:	8080030d 	sth	r2,12(r16)
   2bd5c:	002a9d00 	call	2a9d0 <_fwalk>
   2bd60:	00800244 	movi	r2,9
   2bd64:	8480030d 	sth	r18,12(r16)
   2bd68:	9480024c 	andi	r18,r18,9
   2bd6c:	90bfd51e 	bne	r18,r2,2bcc4 <__srefill_r+0xa4>
   2bd70:	800b883a 	mov	r5,r16
   2bd74:	8809883a 	mov	r4,r17
   2bd78:	002996c0 	call	2996c <__sflush_r>
   2bd7c:	003fd106 	br	2bcc4 <__srefill_r+0xa4>
   2bd80:	18c01014 	ori	r3,r3,64
   2bd84:	80000115 	stw	zero,4(r16)
   2bd88:	00bfffc4 	movi	r2,-1
   2bd8c:	80c0030d 	sth	r3,12(r16)
   2bd90:	003fd606 	br	2bcec <__srefill_r+0xcc>
   2bd94:	80c00e17 	ldw	r3,56(r16)
   2bd98:	0005883a 	mov	r2,zero
   2bd9c:	80c00015 	stw	r3,0(r16)
   2bda0:	003fd206 	br	2bcec <__srefill_r+0xcc>
   2bda4:	800b883a 	mov	r5,r16
   2bda8:	8809883a 	mov	r4,r17
   2bdac:	0029b880 	call	29b88 <_fflush_r>
   2bdb0:	10000a1e 	bne	r2,zero,2bddc <__srefill_r+0x1bc>
   2bdb4:	8080030b 	ldhu	r2,12(r16)
   2bdb8:	00fffdc4 	movi	r3,-9
   2bdbc:	80000215 	stw	zero,8(r16)
   2bdc0:	1886703a 	and	r3,r3,r2
   2bdc4:	80000615 	stw	zero,24(r16)
   2bdc8:	003fd206 	br	2bd14 <__srefill_r+0xf4>
   2bdcc:	00800244 	movi	r2,9
   2bdd0:	88800015 	stw	r2,0(r17)
   2bdd4:	18c01014 	ori	r3,r3,64
   2bdd8:	80c0030d 	sth	r3,12(r16)
   2bddc:	00bfffc4 	movi	r2,-1
   2bde0:	003fc206 	br	2bcec <__srefill_r+0xcc>
   2bde4:	800b883a 	mov	r5,r16
   2bde8:	8809883a 	mov	r4,r17
   2bdec:	002ad500 	call	2ad50 <__smakebuf_r>
   2bdf0:	003fb106 	br	2bcb8 <__srefill_r+0x98>

0002bdf4 <__srget_r>:
   2bdf4:	defffd04 	addi	sp,sp,-12
   2bdf8:	dc400115 	stw	r17,4(sp)
   2bdfc:	dc000015 	stw	r16,0(sp)
   2be00:	dfc00215 	stw	ra,8(sp)
   2be04:	2023883a 	mov	r17,r4
   2be08:	2821883a 	mov	r16,r5
   2be0c:	20000226 	beq	r4,zero,2be18 <__srget_r+0x24>
   2be10:	20800e17 	ldw	r2,56(r4)
   2be14:	10001026 	beq	r2,zero,2be58 <__srget_r+0x64>
   2be18:	800b883a 	mov	r5,r16
   2be1c:	8809883a 	mov	r4,r17
   2be20:	002bc200 	call	2bc20 <__srefill_r>
   2be24:	10000e1e 	bne	r2,zero,2be60 <__srget_r+0x6c>
   2be28:	80c00017 	ldw	r3,0(r16)
   2be2c:	80800117 	ldw	r2,4(r16)
   2be30:	19000044 	addi	r4,r3,1
   2be34:	10bfffc4 	addi	r2,r2,-1
   2be38:	80800115 	stw	r2,4(r16)
   2be3c:	81000015 	stw	r4,0(r16)
   2be40:	18800003 	ldbu	r2,0(r3)
   2be44:	dfc00217 	ldw	ra,8(sp)
   2be48:	dc400117 	ldw	r17,4(sp)
   2be4c:	dc000017 	ldw	r16,0(sp)
   2be50:	dec00304 	addi	sp,sp,12
   2be54:	f800283a 	ret
   2be58:	0029f640 	call	29f64 <__sinit>
   2be5c:	003fee06 	br	2be18 <__srget_r+0x24>
   2be60:	00bfffc4 	movi	r2,-1
   2be64:	003ff706 	br	2be44 <__srget_r+0x50>

0002be68 <__srget>:
   2be68:	00800134 	movhi	r2,4
   2be6c:	10ae9f04 	addi	r2,r2,-17796
   2be70:	200b883a 	mov	r5,r4
   2be74:	11000017 	ldw	r4,0(r2)
   2be78:	002bdf41 	jmpi	2bdf4 <__srget_r>

0002be7c <_sbrk_r>:
   2be7c:	defffd04 	addi	sp,sp,-12
   2be80:	dc000015 	stw	r16,0(sp)
   2be84:	04000134 	movhi	r16,4
   2be88:	dc400115 	stw	r17,4(sp)
   2be8c:	84399f04 	addi	r16,r16,-6532
   2be90:	2023883a 	mov	r17,r4
   2be94:	2809883a 	mov	r4,r5
   2be98:	dfc00215 	stw	ra,8(sp)
   2be9c:	80000015 	stw	zero,0(r16)
   2bea0:	0035bd40 	call	35bd4 <sbrk>
   2bea4:	00ffffc4 	movi	r3,-1
   2bea8:	10c00526 	beq	r2,r3,2bec0 <_sbrk_r+0x44>
   2beac:	dfc00217 	ldw	ra,8(sp)
   2beb0:	dc400117 	ldw	r17,4(sp)
   2beb4:	dc000017 	ldw	r16,0(sp)
   2beb8:	dec00304 	addi	sp,sp,12
   2bebc:	f800283a 	ret
   2bec0:	80c00017 	ldw	r3,0(r16)
   2bec4:	183ff926 	beq	r3,zero,2beac <_sbrk_r+0x30>
   2bec8:	88c00015 	stw	r3,0(r17)
   2becc:	003ff706 	br	2beac <_sbrk_r+0x30>

0002bed0 <__sread>:
   2bed0:	defffe04 	addi	sp,sp,-8
   2bed4:	dc000015 	stw	r16,0(sp)
   2bed8:	2821883a 	mov	r16,r5
   2bedc:	2940038f 	ldh	r5,14(r5)
   2bee0:	dfc00115 	stw	ra,4(sp)
   2bee4:	00324480 	call	32448 <_read_r>
   2bee8:	10000716 	blt	r2,zero,2bf08 <__sread+0x38>
   2beec:	80c01417 	ldw	r3,80(r16)
   2bef0:	1887883a 	add	r3,r3,r2
   2bef4:	80c01415 	stw	r3,80(r16)
   2bef8:	dfc00117 	ldw	ra,4(sp)
   2befc:	dc000017 	ldw	r16,0(sp)
   2bf00:	dec00204 	addi	sp,sp,8
   2bf04:	f800283a 	ret
   2bf08:	80c0030b 	ldhu	r3,12(r16)
   2bf0c:	18fbffcc 	andi	r3,r3,61439
   2bf10:	80c0030d 	sth	r3,12(r16)
   2bf14:	dfc00117 	ldw	ra,4(sp)
   2bf18:	dc000017 	ldw	r16,0(sp)
   2bf1c:	dec00204 	addi	sp,sp,8
   2bf20:	f800283a 	ret

0002bf24 <__seofread>:
   2bf24:	0005883a 	mov	r2,zero
   2bf28:	f800283a 	ret

0002bf2c <__swrite>:
   2bf2c:	2880030b 	ldhu	r2,12(r5)
   2bf30:	defffb04 	addi	sp,sp,-20
   2bf34:	dcc00315 	stw	r19,12(sp)
   2bf38:	dc800215 	stw	r18,8(sp)
   2bf3c:	dc400115 	stw	r17,4(sp)
   2bf40:	dc000015 	stw	r16,0(sp)
   2bf44:	dfc00415 	stw	ra,16(sp)
   2bf48:	10c0400c 	andi	r3,r2,256
   2bf4c:	2821883a 	mov	r16,r5
   2bf50:	2023883a 	mov	r17,r4
   2bf54:	3025883a 	mov	r18,r6
   2bf58:	3827883a 	mov	r19,r7
   2bf5c:	18000526 	beq	r3,zero,2bf74 <__swrite+0x48>
   2bf60:	2940038f 	ldh	r5,14(r5)
   2bf64:	01c00084 	movi	r7,2
   2bf68:	000d883a 	mov	r6,zero
   2bf6c:	00310440 	call	31044 <_lseek_r>
   2bf70:	8080030b 	ldhu	r2,12(r16)
   2bf74:	8140038f 	ldh	r5,14(r16)
   2bf78:	10bbffcc 	andi	r2,r2,61439
   2bf7c:	980f883a 	mov	r7,r19
   2bf80:	900d883a 	mov	r6,r18
   2bf84:	8809883a 	mov	r4,r17
   2bf88:	8080030d 	sth	r2,12(r16)
   2bf8c:	dfc00417 	ldw	ra,16(sp)
   2bf90:	dcc00317 	ldw	r19,12(sp)
   2bf94:	dc800217 	ldw	r18,8(sp)
   2bf98:	dc400117 	ldw	r17,4(sp)
   2bf9c:	dc000017 	ldw	r16,0(sp)
   2bfa0:	dec00504 	addi	sp,sp,20
   2bfa4:	002ec481 	jmpi	2ec48 <_write_r>

0002bfa8 <__sseek>:
   2bfa8:	defffe04 	addi	sp,sp,-8
   2bfac:	dc000015 	stw	r16,0(sp)
   2bfb0:	2821883a 	mov	r16,r5
   2bfb4:	2940038f 	ldh	r5,14(r5)
   2bfb8:	dfc00115 	stw	ra,4(sp)
   2bfbc:	00310440 	call	31044 <_lseek_r>
   2bfc0:	00ffffc4 	movi	r3,-1
   2bfc4:	10c00826 	beq	r2,r3,2bfe8 <__sseek+0x40>
   2bfc8:	80c0030b 	ldhu	r3,12(r16)
   2bfcc:	80801415 	stw	r2,80(r16)
   2bfd0:	18c40014 	ori	r3,r3,4096
   2bfd4:	80c0030d 	sth	r3,12(r16)
   2bfd8:	dfc00117 	ldw	ra,4(sp)
   2bfdc:	dc000017 	ldw	r16,0(sp)
   2bfe0:	dec00204 	addi	sp,sp,8
   2bfe4:	f800283a 	ret
   2bfe8:	80c0030b 	ldhu	r3,12(r16)
   2bfec:	18fbffcc 	andi	r3,r3,61439
   2bff0:	80c0030d 	sth	r3,12(r16)
   2bff4:	dfc00117 	ldw	ra,4(sp)
   2bff8:	dc000017 	ldw	r16,0(sp)
   2bffc:	dec00204 	addi	sp,sp,8
   2c000:	f800283a 	ret

0002c004 <__sclose>:
   2c004:	2940038f 	ldh	r5,14(r5)
   2c008:	002edfc1 	jmpi	2edfc <_close_r>

0002c00c <_strerror_r>:
   2c00c:	deffff04 	addi	sp,sp,-4
   2c010:	2807883a 	mov	r3,r5
   2c014:	dfc00015 	stw	ra,0(sp)
   2c018:	00802384 	movi	r2,142
   2c01c:	300b883a 	mov	r5,r6
   2c020:	10c18736 	bltu	r2,r3,2c640 <_strerror_r+0x634>
   2c024:	181090ba 	slli	r8,r3,2
   2c028:	008000f4 	movhi	r2,3
   2c02c:	10b00f04 	addi	r2,r2,-16324
   2c030:	4085883a 	add	r2,r8,r2
   2c034:	10800017 	ldw	r2,0(r2)
   2c038:	1000683a 	jmp	r2
   2c03c:	0002c278 	rdprs	zero,zero,2825
   2c040:	0002c634 	movhi	zero,2840
   2c044:	0002c628 	cmpgeui	zero,zero,2840
   2c048:	0002c61c 	xori	zero,zero,2840
   2c04c:	0002c610 	cmplti	zero,zero,2840
   2c050:	0002c604 	movi	zero,2840
   2c054:	0002c5f8 	rdprs	zero,zero,2839
   2c058:	0002c5ec 	andhi	zero,zero,2839
   2c05c:	0002c5e0 	cmpeqi	zero,zero,2839
   2c060:	0002c5d4 	movui	zero,2839
   2c064:	0002c5c8 	cmpgei	zero,zero,2839
   2c068:	0002c5bc 	xorhi	zero,zero,2838
   2c06c:	0002c5b0 	cmpltui	zero,zero,2838
   2c070:	0002c5a4 	muli	zero,zero,2838
   2c074:	0002c598 	cmpnei	zero,zero,2838
   2c078:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c07c:	0002c58c 	andi	zero,zero,2838
   2c080:	0002c580 	call	2c58 <__alt_mem_onchip_memory_nios2_FFT-0x1d3a8>
   2c084:	0002c574 	movhi	zero,2837
   2c088:	0002c568 	cmpgeui	zero,zero,2837
   2c08c:	0002c55c 	xori	zero,zero,2837
   2c090:	0002c550 	cmplti	zero,zero,2837
   2c094:	0002c544 	movi	zero,2837
   2c098:	0002c538 	rdprs	zero,zero,2836
   2c09c:	0002c52c 	andhi	zero,zero,2836
   2c0a0:	0002c520 	cmpeqi	zero,zero,2836
   2c0a4:	0002c514 	movui	zero,2836
   2c0a8:	0002c508 	cmpgei	zero,zero,2836
   2c0ac:	0002c4fc 	xorhi	zero,zero,2835
   2c0b0:	0002c4f0 	cmpltui	zero,zero,2835
   2c0b4:	0002c4e4 	muli	zero,zero,2835
   2c0b8:	0002c4d8 	cmpnei	zero,zero,2835
   2c0bc:	0002c4cc 	andi	zero,zero,2835
   2c0c0:	0002c4c0 	call	2c4c <__alt_mem_onchip_memory_nios2_FFT-0x1d3b4>
   2c0c4:	0002c4b4 	movhi	zero,2834
   2c0c8:	0002c4a8 	cmpgeui	zero,zero,2834
   2c0cc:	0002c49c 	xori	zero,zero,2834
   2c0d0:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0d4:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0d8:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0dc:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0e0:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0e4:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0e8:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0ec:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0f0:	0002c490 	cmplti	zero,zero,2834
   2c0f4:	0002c484 	movi	zero,2834
   2c0f8:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c0fc:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c100:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c104:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c108:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c10c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c110:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c114:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c118:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c11c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c120:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c124:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c128:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c12c:	0002c478 	rdprs	zero,zero,2833
   2c130:	0002c46c 	andhi	zero,zero,2833
   2c134:	0002c460 	cmpeqi	zero,zero,2833
   2c138:	0002c454 	movui	zero,2833
   2c13c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c140:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c144:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c148:	0002c448 	cmpgei	zero,zero,2833
   2c14c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c150:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c154:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c158:	0002c43c 	xorhi	zero,zero,2832
   2c15c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c160:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c164:	0002c430 	cmpltui	zero,zero,2832
   2c168:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c16c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c170:	0002c424 	muli	zero,zero,2832
   2c174:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c178:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c17c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c180:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c184:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c188:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c18c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c190:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c194:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c198:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c19c:	0002c418 	cmpnei	zero,zero,2832
   2c1a0:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1a4:	0002c40c 	andi	zero,zero,2832
   2c1a8:	0002c400 	call	2c40 <__alt_mem_onchip_memory_nios2_FFT-0x1d3c0>
   2c1ac:	0002c3f4 	movhi	zero,2831
   2c1b0:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1b4:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1b8:	0002c3e8 	cmpgeui	zero,zero,2831
   2c1bc:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1c0:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1c4:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1c8:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1cc:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1d0:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1d4:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1d8:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1dc:	0002c3dc 	xori	zero,zero,2831
   2c1e0:	0002c3d0 	cmplti	zero,zero,2831
   2c1e4:	0002c3c4 	movi	zero,2831
   2c1e8:	0002c3b8 	rdprs	zero,zero,2830
   2c1ec:	0002c3ac 	andhi	zero,zero,2830
   2c1f0:	0002c3a0 	cmpeqi	zero,zero,2830
   2c1f4:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c1f8:	0002c394 	movui	zero,2830
   2c1fc:	0002c388 	cmpgei	zero,zero,2830
   2c200:	0002c37c 	xorhi	zero,zero,2829
   2c204:	0002c370 	cmpltui	zero,zero,2829
   2c208:	0002c364 	muli	zero,zero,2829
   2c20c:	0002c358 	cmpnei	zero,zero,2829
   2c210:	0002c34c 	andi	zero,zero,2829
   2c214:	0002c340 	call	2c34 <__alt_mem_onchip_memory_nios2_FFT-0x1d3cc>
   2c218:	0002c334 	movhi	zero,2828
   2c21c:	0002c328 	cmpgeui	zero,zero,2828
   2c220:	0002c31c 	xori	zero,zero,2828
   2c224:	0002c310 	cmplti	zero,zero,2828
   2c228:	0002c304 	movi	zero,2828
   2c22c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c230:	0002c2f8 	rdprs	zero,zero,2827
   2c234:	0002c2ec 	andhi	zero,zero,2827
   2c238:	0002c2e0 	cmpeqi	zero,zero,2827
   2c23c:	0002c2d4 	movui	zero,2827
   2c240:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c244:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c248:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c24c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c250:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c254:	0002c2c8 	cmpgei	zero,zero,2827
   2c258:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c25c:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c260:	0002c640 	call	2c64 <__alt_mem_onchip_memory_nios2_FFT-0x1d39c>
   2c264:	0002c2bc 	xorhi	zero,zero,2826
   2c268:	0002c2b0 	cmpltui	zero,zero,2826
   2c26c:	0002c2a4 	muli	zero,zero,2826
   2c270:	0002c298 	cmpnei	zero,zero,2826
   2c274:	0002c28c 	andi	zero,zero,2826
   2c278:	00800134 	movhi	r2,4
   2c27c:	10a0de04 	addi	r2,r2,-31880
   2c280:	dfc00017 	ldw	ra,0(sp)
   2c284:	dec00104 	addi	sp,sp,4
   2c288:	f800283a 	ret
   2c28c:	00800134 	movhi	r2,4
   2c290:	10a27b04 	addi	r2,r2,-30228
   2c294:	003ffa06 	br	2c280 <_strerror_r+0x274>
   2c298:	00800134 	movhi	r2,4
   2c29c:	10a27504 	addi	r2,r2,-30252
   2c2a0:	003ff706 	br	2c280 <_strerror_r+0x274>
   2c2a4:	00800134 	movhi	r2,4
   2c2a8:	10a27004 	addi	r2,r2,-30272
   2c2ac:	003ff406 	br	2c280 <_strerror_r+0x274>
   2c2b0:	00800134 	movhi	r2,4
   2c2b4:	10a28904 	addi	r2,r2,-30172
   2c2b8:	003ff106 	br	2c280 <_strerror_r+0x274>
   2c2bc:	00800134 	movhi	r2,4
   2c2c0:	10a1c704 	addi	r2,r2,-30948
   2c2c4:	003fee06 	br	2c280 <_strerror_r+0x274>
   2c2c8:	00800134 	movhi	r2,4
   2c2cc:	10a19504 	addi	r2,r2,-31148
   2c2d0:	003feb06 	br	2c280 <_strerror_r+0x274>
   2c2d4:	00800134 	movhi	r2,4
   2c2d8:	10a26304 	addi	r2,r2,-30324
   2c2dc:	003fe806 	br	2c280 <_strerror_r+0x274>
   2c2e0:	00800134 	movhi	r2,4
   2c2e4:	10a26904 	addi	r2,r2,-30300
   2c2e8:	003fe506 	br	2c280 <_strerror_r+0x274>
   2c2ec:	00800134 	movhi	r2,4
   2c2f0:	10a16404 	addi	r2,r2,-31344
   2c2f4:	003fe206 	br	2c280 <_strerror_r+0x274>
   2c2f8:	00800134 	movhi	r2,4
   2c2fc:	10a25404 	addi	r2,r2,-30384
   2c300:	003fdf06 	br	2c280 <_strerror_r+0x274>
   2c304:	00800134 	movhi	r2,4
   2c308:	10a1f104 	addi	r2,r2,-30780
   2c30c:	003fdc06 	br	2c280 <_strerror_r+0x274>
   2c310:	00800134 	movhi	r2,4
   2c314:	10a29304 	addi	r2,r2,-30132
   2c318:	003fd906 	br	2c280 <_strerror_r+0x274>
   2c31c:	00800134 	movhi	r2,4
   2c320:	10a11604 	addi	r2,r2,-31656
   2c324:	003fd606 	br	2c280 <_strerror_r+0x274>
   2c328:	00800134 	movhi	r2,4
   2c32c:	10a10804 	addi	r2,r2,-31712
   2c330:	003fd306 	br	2c280 <_strerror_r+0x274>
   2c334:	00800134 	movhi	r2,4
   2c338:	10a14a04 	addi	r2,r2,-31448
   2c33c:	003fd006 	br	2c280 <_strerror_r+0x274>
   2c340:	00800134 	movhi	r2,4
   2c344:	10a18a04 	addi	r2,r2,-31192
   2c348:	003fcd06 	br	2c280 <_strerror_r+0x274>
   2c34c:	00800134 	movhi	r2,4
   2c350:	10a14604 	addi	r2,r2,-31464
   2c354:	003fca06 	br	2c280 <_strerror_r+0x274>
   2c358:	00800134 	movhi	r2,4
   2c35c:	10a29804 	addi	r2,r2,-30112
   2c360:	003fc706 	br	2c280 <_strerror_r+0x274>
   2c364:	00800134 	movhi	r2,4
   2c368:	10a15b04 	addi	r2,r2,-31380
   2c36c:	003fc406 	br	2c280 <_strerror_r+0x274>
   2c370:	00800134 	movhi	r2,4
   2c374:	10a1d004 	addi	r2,r2,-30912
   2c378:	003fc106 	br	2c280 <_strerror_r+0x274>
   2c37c:	00800134 	movhi	r2,4
   2c380:	10a25a04 	addi	r2,r2,-30360
   2c384:	003fbe06 	br	2c280 <_strerror_r+0x274>
   2c388:	00800134 	movhi	r2,4
   2c38c:	10a24e04 	addi	r2,r2,-30408
   2c390:	003fbb06 	br	2c280 <_strerror_r+0x274>
   2c394:	00800134 	movhi	r2,4
   2c398:	10a24204 	addi	r2,r2,-30456
   2c39c:	003fb806 	br	2c280 <_strerror_r+0x274>
   2c3a0:	00800134 	movhi	r2,4
   2c3a4:	10a23c04 	addi	r2,r2,-30480
   2c3a8:	003fb506 	br	2c280 <_strerror_r+0x274>
   2c3ac:	00800134 	movhi	r2,4
   2c3b0:	10a23404 	addi	r2,r2,-30512
   2c3b4:	003fb206 	br	2c280 <_strerror_r+0x274>
   2c3b8:	00800134 	movhi	r2,4
   2c3bc:	10a22c04 	addi	r2,r2,-30544
   2c3c0:	003faf06 	br	2c280 <_strerror_r+0x274>
   2c3c4:	00800134 	movhi	r2,4
   2c3c8:	10a22004 	addi	r2,r2,-30592
   2c3cc:	003fac06 	br	2c280 <_strerror_r+0x274>
   2c3d0:	00800134 	movhi	r2,4
   2c3d4:	10a21704 	addi	r2,r2,-30628
   2c3d8:	003fa906 	br	2c280 <_strerror_r+0x274>
   2c3dc:	00800134 	movhi	r2,4
   2c3e0:	10a24704 	addi	r2,r2,-30436
   2c3e4:	003fa606 	br	2c280 <_strerror_r+0x274>
   2c3e8:	00800134 	movhi	r2,4
   2c3ec:	10a28004 	addi	r2,r2,-30208
   2c3f0:	003fa306 	br	2c280 <_strerror_r+0x274>
   2c3f4:	00800134 	movhi	r2,4
   2c3f8:	10a21104 	addi	r2,r2,-30652
   2c3fc:	003fa006 	br	2c280 <_strerror_r+0x274>
   2c400:	00800134 	movhi	r2,4
   2c404:	10a20a04 	addi	r2,r2,-30680
   2c408:	003f9d06 	br	2c280 <_strerror_r+0x274>
   2c40c:	00800134 	movhi	r2,4
   2c410:	10a20504 	addi	r2,r2,-30700
   2c414:	003f9a06 	br	2c280 <_strerror_r+0x274>
   2c418:	00800134 	movhi	r2,4
   2c41c:	10a1fe04 	addi	r2,r2,-30728
   2c420:	003f9706 	br	2c280 <_strerror_r+0x274>
   2c424:	00800134 	movhi	r2,4
   2c428:	10a1fb04 	addi	r2,r2,-30740
   2c42c:	003f9406 	br	2c280 <_strerror_r+0x274>
   2c430:	00800134 	movhi	r2,4
   2c434:	10a1f604 	addi	r2,r2,-30760
   2c438:	003f9106 	br	2c280 <_strerror_r+0x274>
   2c43c:	00800134 	movhi	r2,4
   2c440:	10a1ed04 	addi	r2,r2,-30796
   2c444:	003f8e06 	br	2c280 <_strerror_r+0x274>
   2c448:	00800134 	movhi	r2,4
   2c44c:	10a1e704 	addi	r2,r2,-30820
   2c450:	003f8b06 	br	2c280 <_strerror_r+0x274>
   2c454:	00800134 	movhi	r2,4
   2c458:	10a1e204 	addi	r2,r2,-30840
   2c45c:	003f8806 	br	2c280 <_strerror_r+0x274>
   2c460:	00800134 	movhi	r2,4
   2c464:	10a1dc04 	addi	r2,r2,-30864
   2c468:	003f8506 	br	2c280 <_strerror_r+0x274>
   2c46c:	00800134 	movhi	r2,4
   2c470:	10a21e04 	addi	r2,r2,-30600
   2c474:	003f8206 	br	2c280 <_strerror_r+0x274>
   2c478:	00800134 	movhi	r2,4
   2c47c:	10a1d804 	addi	r2,r2,-30880
   2c480:	003f7f06 	br	2c280 <_strerror_r+0x274>
   2c484:	00800134 	movhi	r2,4
   2c488:	10a1d604 	addi	r2,r2,-30888
   2c48c:	003f7c06 	br	2c280 <_strerror_r+0x274>
   2c490:	00800134 	movhi	r2,4
   2c494:	10a1cd04 	addi	r2,r2,-30924
   2c498:	003f7906 	br	2c280 <_strerror_r+0x274>
   2c49c:	00800134 	movhi	r2,4
   2c4a0:	10a1c204 	addi	r2,r2,-30968
   2c4a4:	003f7606 	br	2c280 <_strerror_r+0x274>
   2c4a8:	00800134 	movhi	r2,4
   2c4ac:	10a1bb04 	addi	r2,r2,-30996
   2c4b0:	003f7306 	br	2c280 <_strerror_r+0x274>
   2c4b4:	00800134 	movhi	r2,4
   2c4b8:	10a1b604 	addi	r2,r2,-31016
   2c4bc:	003f7006 	br	2c280 <_strerror_r+0x274>
   2c4c0:	00800134 	movhi	r2,4
   2c4c4:	10a1aa04 	addi	r2,r2,-31064
   2c4c8:	003f6d06 	br	2c280 <_strerror_r+0x274>
   2c4cc:	00800134 	movhi	r2,4
   2c4d0:	10a1a704 	addi	r2,r2,-31076
   2c4d4:	003f6a06 	br	2c280 <_strerror_r+0x274>
   2c4d8:	00800134 	movhi	r2,4
   2c4dc:	10a1a304 	addi	r2,r2,-31092
   2c4e0:	003f6706 	br	2c280 <_strerror_r+0x274>
   2c4e4:	00800134 	movhi	r2,4
   2c4e8:	10a19d04 	addi	r2,r2,-31116
   2c4ec:	003f6406 	br	2c280 <_strerror_r+0x274>
   2c4f0:	00800134 	movhi	r2,4
   2c4f4:	10a19904 	addi	r2,r2,-31132
   2c4f8:	003f6106 	br	2c280 <_strerror_r+0x274>
   2c4fc:	00800134 	movhi	r2,4
   2c500:	10a18f04 	addi	r2,r2,-31172
   2c504:	003f5e06 	br	2c280 <_strerror_r+0x274>
   2c508:	00800134 	movhi	r2,4
   2c50c:	10a18604 	addi	r2,r2,-31208
   2c510:	003f5b06 	br	2c280 <_strerror_r+0x274>
   2c514:	00800134 	movhi	r2,4
   2c518:	10a18204 	addi	r2,r2,-31224
   2c51c:	003f5806 	br	2c280 <_strerror_r+0x274>
   2c520:	00800134 	movhi	r2,4
   2c524:	10a17c04 	addi	r2,r2,-31248
   2c528:	003f5506 	br	2c280 <_strerror_r+0x274>
   2c52c:	00800134 	movhi	r2,4
   2c530:	10a17404 	addi	r2,r2,-31280
   2c534:	003f5206 	br	2c280 <_strerror_r+0x274>
   2c538:	00800134 	movhi	r2,4
   2c53c:	10a16c04 	addi	r2,r2,-31312
   2c540:	003f4f06 	br	2c280 <_strerror_r+0x274>
   2c544:	00800134 	movhi	r2,4
   2c548:	10a15604 	addi	r2,r2,-31400
   2c54c:	003f4c06 	br	2c280 <_strerror_r+0x274>
   2c550:	00800134 	movhi	r2,4
   2c554:	10a15204 	addi	r2,r2,-31416
   2c558:	003f4906 	br	2c280 <_strerror_r+0x274>
   2c55c:	00800134 	movhi	r2,4
   2c560:	10a14204 	addi	r2,r2,-31480
   2c564:	003f4606 	br	2c280 <_strerror_r+0x274>
   2c568:	00800134 	movhi	r2,4
   2c56c:	10a13e04 	addi	r2,r2,-31496
   2c570:	003f4306 	br	2c280 <_strerror_r+0x274>
   2c574:	00800134 	movhi	r2,4
   2c578:	10a13904 	addi	r2,r2,-31516
   2c57c:	003f4006 	br	2c280 <_strerror_r+0x274>
   2c580:	00800134 	movhi	r2,4
   2c584:	10a13604 	addi	r2,r2,-31528
   2c588:	003f3d06 	br	2c280 <_strerror_r+0x274>
   2c58c:	00800134 	movhi	r2,4
   2c590:	10a13004 	addi	r2,r2,-31552
   2c594:	003f3a06 	br	2c280 <_strerror_r+0x274>
   2c598:	00800134 	movhi	r2,4
   2c59c:	10a12d04 	addi	r2,r2,-31564
   2c5a0:	003f3706 	br	2c280 <_strerror_r+0x274>
   2c5a4:	00800134 	movhi	r2,4
   2c5a8:	10a12804 	addi	r2,r2,-31584
   2c5ac:	003f3406 	br	2c280 <_strerror_r+0x274>
   2c5b0:	00800134 	movhi	r2,4
   2c5b4:	10a12304 	addi	r2,r2,-31604
   2c5b8:	003f3106 	br	2c280 <_strerror_r+0x274>
   2c5bc:	00800134 	movhi	r2,4
   2c5c0:	10a11e04 	addi	r2,r2,-31624
   2c5c4:	003f2e06 	br	2c280 <_strerror_r+0x274>
   2c5c8:	00800134 	movhi	r2,4
   2c5cc:	10a11304 	addi	r2,r2,-31668
   2c5d0:	003f2b06 	br	2c280 <_strerror_r+0x274>
   2c5d4:	00800134 	movhi	r2,4
   2c5d8:	10a10f04 	addi	r2,r2,-31684
   2c5dc:	003f2806 	br	2c280 <_strerror_r+0x274>
   2c5e0:	00800134 	movhi	r2,4
   2c5e4:	10a10304 	addi	r2,r2,-31732
   2c5e8:	003f2506 	br	2c280 <_strerror_r+0x274>
   2c5ec:	00800134 	movhi	r2,4
   2c5f0:	10a0fe04 	addi	r2,r2,-31752
   2c5f4:	003f2206 	br	2c280 <_strerror_r+0x274>
   2c5f8:	00800134 	movhi	r2,4
   2c5fc:	10a0f704 	addi	r2,r2,-31780
   2c600:	003f1f06 	br	2c280 <_strerror_r+0x274>
   2c604:	00800134 	movhi	r2,4
   2c608:	10a0f404 	addi	r2,r2,-31792
   2c60c:	003f1c06 	br	2c280 <_strerror_r+0x274>
   2c610:	00800134 	movhi	r2,4
   2c614:	10a0ee04 	addi	r2,r2,-31816
   2c618:	003f1906 	br	2c280 <_strerror_r+0x274>
   2c61c:	00800134 	movhi	r2,4
   2c620:	10a0ea04 	addi	r2,r2,-31832
   2c624:	003f1606 	br	2c280 <_strerror_r+0x274>
   2c628:	00800134 	movhi	r2,4
   2c62c:	10a0e304 	addi	r2,r2,-31860
   2c630:	003f1306 	br	2c280 <_strerror_r+0x274>
   2c634:	00800134 	movhi	r2,4
   2c638:	10a0e004 	addi	r2,r2,-31872
   2c63c:	003f1006 	br	2c280 <_strerror_r+0x274>
   2c640:	38000726 	beq	r7,zero,2c660 <_strerror_r+0x654>
   2c644:	380d883a 	mov	r6,r7
   2c648:	1809883a 	mov	r4,r3
   2c64c:	002c9700 	call	2c970 <_user_strerror>
   2c650:	103f0b1e 	bne	r2,zero,2c280 <_strerror_r+0x274>
   2c654:	00800134 	movhi	r2,4
   2c658:	10a2a604 	addi	r2,r2,-30056
   2c65c:	003f0806 	br	2c280 <_strerror_r+0x274>
   2c660:	200f883a 	mov	r7,r4
   2c664:	003ff706 	br	2c644 <_strerror_r+0x638>

0002c668 <strerror>:
   2c668:	00800134 	movhi	r2,4
   2c66c:	10ae9f04 	addi	r2,r2,-17796
   2c670:	200b883a 	mov	r5,r4
   2c674:	11000017 	ldw	r4,0(r2)
   2c678:	000f883a 	mov	r7,zero
   2c67c:	000d883a 	mov	r6,zero
   2c680:	002c00c1 	jmpi	2c00c <_strerror_r>

0002c684 <strlen>:
   2c684:	208000cc 	andi	r2,r4,3
   2c688:	10002026 	beq	r2,zero,2c70c <strlen+0x88>
   2c68c:	20800007 	ldb	r2,0(r4)
   2c690:	10002026 	beq	r2,zero,2c714 <strlen+0x90>
   2c694:	2005883a 	mov	r2,r4
   2c698:	00000206 	br	2c6a4 <strlen+0x20>
   2c69c:	10c00007 	ldb	r3,0(r2)
   2c6a0:	18001826 	beq	r3,zero,2c704 <strlen+0x80>
   2c6a4:	10800044 	addi	r2,r2,1
   2c6a8:	10c000cc 	andi	r3,r2,3
   2c6ac:	183ffb1e 	bne	r3,zero,2c69c <strlen+0x18>
   2c6b0:	10c00017 	ldw	r3,0(r2)
   2c6b4:	01ffbff4 	movhi	r7,65279
   2c6b8:	39ffbfc4 	addi	r7,r7,-257
   2c6bc:	00ca303a 	nor	r5,zero,r3
   2c6c0:	01a02074 	movhi	r6,32897
   2c6c4:	19c7883a 	add	r3,r3,r7
   2c6c8:	31a02004 	addi	r6,r6,-32640
   2c6cc:	1946703a 	and	r3,r3,r5
   2c6d0:	1986703a 	and	r3,r3,r6
   2c6d4:	1800091e 	bne	r3,zero,2c6fc <strlen+0x78>
   2c6d8:	10800104 	addi	r2,r2,4
   2c6dc:	10c00017 	ldw	r3,0(r2)
   2c6e0:	19cb883a 	add	r5,r3,r7
   2c6e4:	00c6303a 	nor	r3,zero,r3
   2c6e8:	28c6703a 	and	r3,r5,r3
   2c6ec:	1986703a 	and	r3,r3,r6
   2c6f0:	183ff926 	beq	r3,zero,2c6d8 <strlen+0x54>
   2c6f4:	00000106 	br	2c6fc <strlen+0x78>
   2c6f8:	10800044 	addi	r2,r2,1
   2c6fc:	10c00007 	ldb	r3,0(r2)
   2c700:	183ffd1e 	bne	r3,zero,2c6f8 <strlen+0x74>
   2c704:	1105c83a 	sub	r2,r2,r4
   2c708:	f800283a 	ret
   2c70c:	2005883a 	mov	r2,r4
   2c710:	003fe706 	br	2c6b0 <strlen+0x2c>
   2c714:	0005883a 	mov	r2,zero
   2c718:	f800283a 	ret

0002c71c <_strtol_r>:
   2c71c:	00800134 	movhi	r2,4
   2c720:	defff404 	addi	sp,sp,-48
   2c724:	10aea204 	addi	r2,r2,-17784
   2c728:	dd400715 	stw	r21,28(sp)
   2c72c:	15400017 	ldw	r21,0(r2)
   2c730:	dd800815 	stw	r22,32(sp)
   2c734:	dd000615 	stw	r20,24(sp)
   2c738:	dcc00515 	stw	r19,20(sp)
   2c73c:	d9000015 	stw	r4,0(sp)
   2c740:	dfc00b15 	stw	ra,44(sp)
   2c744:	df000a15 	stw	fp,40(sp)
   2c748:	ddc00915 	stw	r23,36(sp)
   2c74c:	dc800415 	stw	r18,16(sp)
   2c750:	dc400315 	stw	r17,12(sp)
   2c754:	dc000215 	stw	r16,8(sp)
   2c758:	2829883a 	mov	r20,r5
   2c75c:	3027883a 	mov	r19,r6
   2c760:	382d883a 	mov	r22,r7
   2c764:	2809883a 	mov	r4,r5
   2c768:	24000003 	ldbu	r16,0(r4)
   2c76c:	24400044 	addi	r17,r4,1
   2c770:	2007883a 	mov	r3,r4
   2c774:	ac05883a 	add	r2,r21,r16
   2c778:	10800043 	ldbu	r2,1(r2)
   2c77c:	8809883a 	mov	r4,r17
   2c780:	1080020c 	andi	r2,r2,8
   2c784:	103ff81e 	bne	r2,zero,2c768 <_strtol_r+0x4c>
   2c788:	00800b44 	movi	r2,45
   2c78c:	80805826 	beq	r16,r2,2c8f0 <_strtol_r+0x1d4>
   2c790:	00800ac4 	movi	r2,43
   2c794:	80805a26 	beq	r16,r2,2c900 <_strtol_r+0x1e4>
   2c798:	0039883a 	mov	fp,zero
   2c79c:	b0004426 	beq	r22,zero,2c8b0 <_strtol_r+0x194>
   2c7a0:	00800404 	movi	r2,16
   2c7a4:	b0806026 	beq	r22,r2,2c928 <_strtol_r+0x20c>
   2c7a8:	b02f883a 	mov	r23,r22
   2c7ac:	00a00034 	movhi	r2,32768
   2c7b0:	e025003a 	cmpeq	r18,fp,zero
   2c7b4:	14a5c83a 	sub	r18,r2,r18
   2c7b8:	b80b883a 	mov	r5,r23
   2c7bc:	9009883a 	mov	r4,r18
   2c7c0:	0025b140 	call	25b14 <__umodsi3>
   2c7c4:	b80b883a 	mov	r5,r23
   2c7c8:	9009883a 	mov	r4,r18
   2c7cc:	d8800115 	stw	r2,4(sp)
   2c7d0:	0025ab00 	call	25ab0 <__udivsi3>
   2c7d4:	ac07883a 	add	r3,r21,r16
   2c7d8:	18c00043 	ldbu	r3,1(r3)
   2c7dc:	880b883a 	mov	r5,r17
   2c7e0:	000d883a 	mov	r6,zero
   2c7e4:	1a00010c 	andi	r8,r3,4
   2c7e8:	0009883a 	mov	r4,zero
   2c7ec:	02800044 	movi	r10,1
   2c7f0:	027fffc4 	movi	r9,-1
   2c7f4:	d9c00117 	ldw	r7,4(sp)
   2c7f8:	40000e26 	beq	r8,zero,2c834 <_strtol_r+0x118>
   2c7fc:	843ff404 	addi	r16,r16,-48
   2c800:	8580120e 	bge	r16,r22,2c84c <_strtol_r+0x130>
   2c804:	32400526 	beq	r6,r9,2c81c <_strtol_r+0x100>
   2c808:	11002536 	bltu	r2,r4,2c8a0 <_strtol_r+0x184>
   2c80c:	20802326 	beq	r4,r2,2c89c <_strtol_r+0x180>
   2c810:	25c9383a 	mul	r4,r4,r23
   2c814:	01800044 	movi	r6,1
   2c818:	8109883a 	add	r4,r16,r4
   2c81c:	2c000003 	ldbu	r16,0(r5)
   2c820:	29400044 	addi	r5,r5,1
   2c824:	ac07883a 	add	r3,r21,r16
   2c828:	18c00043 	ldbu	r3,1(r3)
   2c82c:	1a00010c 	andi	r8,r3,4
   2c830:	403ff21e 	bne	r8,zero,2c7fc <_strtol_r+0xe0>
   2c834:	18c000cc 	andi	r3,r3,3
   2c838:	18000426 	beq	r3,zero,2c84c <_strtol_r+0x130>
   2c83c:	1a801a26 	beq	r3,r10,2c8a8 <_strtol_r+0x18c>
   2c840:	00c015c4 	movi	r3,87
   2c844:	80e1c83a 	sub	r16,r16,r3
   2c848:	85bfee16 	blt	r16,r22,2c804 <_strtol_r+0xe8>
   2c84c:	00bfffc4 	movi	r2,-1
   2c850:	30801e26 	beq	r6,r2,2c8cc <_strtol_r+0x1b0>
   2c854:	e0001b1e 	bne	fp,zero,2c8c4 <_strtol_r+0x1a8>
   2c858:	2005883a 	mov	r2,r4
   2c85c:	98000326 	beq	r19,zero,2c86c <_strtol_r+0x150>
   2c860:	3000211e 	bne	r6,zero,2c8e8 <_strtol_r+0x1cc>
   2c864:	a00b883a 	mov	r5,r20
   2c868:	99400015 	stw	r5,0(r19)
   2c86c:	dfc00b17 	ldw	ra,44(sp)
   2c870:	df000a17 	ldw	fp,40(sp)
   2c874:	ddc00917 	ldw	r23,36(sp)
   2c878:	dd800817 	ldw	r22,32(sp)
   2c87c:	dd400717 	ldw	r21,28(sp)
   2c880:	dd000617 	ldw	r20,24(sp)
   2c884:	dcc00517 	ldw	r19,20(sp)
   2c888:	dc800417 	ldw	r18,16(sp)
   2c88c:	dc400317 	ldw	r17,12(sp)
   2c890:	dc000217 	ldw	r16,8(sp)
   2c894:	dec00c04 	addi	sp,sp,48
   2c898:	f800283a 	ret
   2c89c:	3c3fdc0e 	bge	r7,r16,2c810 <_strtol_r+0xf4>
   2c8a0:	01bfffc4 	movi	r6,-1
   2c8a4:	003fdd06 	br	2c81c <_strtol_r+0x100>
   2c8a8:	00c00dc4 	movi	r3,55
   2c8ac:	003fe506 	br	2c844 <_strtol_r+0x128>
   2c8b0:	00800c04 	movi	r2,48
   2c8b4:	80801626 	beq	r16,r2,2c910 <_strtol_r+0x1f4>
   2c8b8:	05800284 	movi	r22,10
   2c8bc:	b02f883a 	mov	r23,r22
   2c8c0:	003fba06 	br	2c7ac <_strtol_r+0x90>
   2c8c4:	0109c83a 	sub	r4,zero,r4
   2c8c8:	003fe306 	br	2c858 <_strtol_r+0x13c>
   2c8cc:	d9000017 	ldw	r4,0(sp)
   2c8d0:	00c00884 	movi	r3,34
   2c8d4:	e005003a 	cmpeq	r2,fp,zero
   2c8d8:	20c00015 	stw	r3,0(r4)
   2c8dc:	00e00034 	movhi	r3,32768
   2c8e0:	1885c83a 	sub	r2,r3,r2
   2c8e4:	983fe126 	beq	r19,zero,2c86c <_strtol_r+0x150>
   2c8e8:	297fffc4 	addi	r5,r5,-1
   2c8ec:	003fde06 	br	2c868 <_strtol_r+0x14c>
   2c8f0:	1c400084 	addi	r17,r3,2
   2c8f4:	1c000043 	ldbu	r16,1(r3)
   2c8f8:	07000044 	movi	fp,1
   2c8fc:	003fa706 	br	2c79c <_strtol_r+0x80>
   2c900:	1c400084 	addi	r17,r3,2
   2c904:	1c000043 	ldbu	r16,1(r3)
   2c908:	0039883a 	mov	fp,zero
   2c90c:	003fa306 	br	2c79c <_strtol_r+0x80>
   2c910:	88800003 	ldbu	r2,0(r17)
   2c914:	00c01604 	movi	r3,88
   2c918:	108037cc 	andi	r2,r2,223
   2c91c:	10c00826 	beq	r2,r3,2c940 <_strtol_r+0x224>
   2c920:	05800204 	movi	r22,8
   2c924:	003fa006 	br	2c7a8 <_strtol_r+0x8c>
   2c928:	00800c04 	movi	r2,48
   2c92c:	80bf9e1e 	bne	r16,r2,2c7a8 <_strtol_r+0x8c>
   2c930:	88800003 	ldbu	r2,0(r17)
   2c934:	00c01604 	movi	r3,88
   2c938:	108037cc 	andi	r2,r2,223
   2c93c:	10ff9a1e 	bne	r2,r3,2c7a8 <_strtol_r+0x8c>
   2c940:	05c00404 	movi	r23,16
   2c944:	8c000043 	ldbu	r16,1(r17)
   2c948:	b82d883a 	mov	r22,r23
   2c94c:	8c400084 	addi	r17,r17,2
   2c950:	003f9606 	br	2c7ac <_strtol_r+0x90>

0002c954 <strtol>:
   2c954:	00800134 	movhi	r2,4
   2c958:	10ae9f04 	addi	r2,r2,-17796
   2c95c:	300f883a 	mov	r7,r6
   2c960:	280d883a 	mov	r6,r5
   2c964:	200b883a 	mov	r5,r4
   2c968:	11000017 	ldw	r4,0(r2)
   2c96c:	002c71c1 	jmpi	2c71c <_strtol_r>

0002c970 <_user_strerror>:
   2c970:	0005883a 	mov	r2,zero
   2c974:	f800283a 	ret

0002c978 <___vfprintf_internal_r>:
   2c978:	deffb804 	addi	sp,sp,-288
   2c97c:	dfc04715 	stw	ra,284(sp)
   2c980:	ddc04515 	stw	r23,276(sp)
   2c984:	dd404315 	stw	r21,268(sp)
   2c988:	d9002c15 	stw	r4,176(sp)
   2c98c:	282f883a 	mov	r23,r5
   2c990:	302b883a 	mov	r21,r6
   2c994:	d9c02d15 	stw	r7,180(sp)
   2c998:	df004615 	stw	fp,280(sp)
   2c99c:	dd804415 	stw	r22,272(sp)
   2c9a0:	dd004215 	stw	r20,264(sp)
   2c9a4:	dcc04115 	stw	r19,260(sp)
   2c9a8:	dc804015 	stw	r18,256(sp)
   2c9ac:	dc403f15 	stw	r17,252(sp)
   2c9b0:	dc003e15 	stw	r16,248(sp)
   2c9b4:	00310140 	call	31014 <_localeconv_r>
   2c9b8:	10800017 	ldw	r2,0(r2)
   2c9bc:	1009883a 	mov	r4,r2
   2c9c0:	d8803415 	stw	r2,208(sp)
   2c9c4:	002c6840 	call	2c684 <strlen>
   2c9c8:	d8803715 	stw	r2,220(sp)
   2c9cc:	d8802c17 	ldw	r2,176(sp)
   2c9d0:	10000226 	beq	r2,zero,2c9dc <___vfprintf_internal_r+0x64>
   2c9d4:	10800e17 	ldw	r2,56(r2)
   2c9d8:	1000f926 	beq	r2,zero,2cdc0 <___vfprintf_internal_r+0x448>
   2c9dc:	b880030b 	ldhu	r2,12(r23)
   2c9e0:	10c8000c 	andi	r3,r2,8192
   2c9e4:	1800061e 	bne	r3,zero,2ca00 <___vfprintf_internal_r+0x88>
   2c9e8:	b9001917 	ldw	r4,100(r23)
   2c9ec:	00f7ffc4 	movi	r3,-8193
   2c9f0:	10880014 	ori	r2,r2,8192
   2c9f4:	20c6703a 	and	r3,r4,r3
   2c9f8:	b880030d 	sth	r2,12(r23)
   2c9fc:	b8c01915 	stw	r3,100(r23)
   2ca00:	10c0020c 	andi	r3,r2,8
   2ca04:	1800c126 	beq	r3,zero,2cd0c <___vfprintf_internal_r+0x394>
   2ca08:	b8c00417 	ldw	r3,16(r23)
   2ca0c:	1800bf26 	beq	r3,zero,2cd0c <___vfprintf_internal_r+0x394>
   2ca10:	1080068c 	andi	r2,r2,26
   2ca14:	00c00284 	movi	r3,10
   2ca18:	10c0c426 	beq	r2,r3,2cd2c <___vfprintf_internal_r+0x3b4>
   2ca1c:	d8c00404 	addi	r3,sp,16
   2ca20:	05000134 	movhi	r20,4
   2ca24:	d9001e04 	addi	r4,sp,120
   2ca28:	a522ae84 	addi	r20,r20,-30022
   2ca2c:	d8c01e15 	stw	r3,120(sp)
   2ca30:	d8002015 	stw	zero,128(sp)
   2ca34:	d8001f15 	stw	zero,124(sp)
   2ca38:	d8003315 	stw	zero,204(sp)
   2ca3c:	d8003615 	stw	zero,216(sp)
   2ca40:	d8003815 	stw	zero,224(sp)
   2ca44:	1811883a 	mov	r8,r3
   2ca48:	d8003915 	stw	zero,228(sp)
   2ca4c:	d8003a15 	stw	zero,232(sp)
   2ca50:	d8002f15 	stw	zero,188(sp)
   2ca54:	d9002815 	stw	r4,160(sp)
   2ca58:	a8800007 	ldb	r2,0(r21)
   2ca5c:	10027b26 	beq	r2,zero,2d44c <___vfprintf_internal_r+0xad4>
   2ca60:	00c00944 	movi	r3,37
   2ca64:	a821883a 	mov	r16,r21
   2ca68:	10c0021e 	bne	r2,r3,2ca74 <___vfprintf_internal_r+0xfc>
   2ca6c:	00001406 	br	2cac0 <___vfprintf_internal_r+0x148>
   2ca70:	10c00326 	beq	r2,r3,2ca80 <___vfprintf_internal_r+0x108>
   2ca74:	84000044 	addi	r16,r16,1
   2ca78:	80800007 	ldb	r2,0(r16)
   2ca7c:	103ffc1e 	bne	r2,zero,2ca70 <___vfprintf_internal_r+0xf8>
   2ca80:	8563c83a 	sub	r17,r16,r21
   2ca84:	88000e26 	beq	r17,zero,2cac0 <___vfprintf_internal_r+0x148>
   2ca88:	d8c02017 	ldw	r3,128(sp)
   2ca8c:	d8801f17 	ldw	r2,124(sp)
   2ca90:	45400015 	stw	r21,0(r8)
   2ca94:	1c47883a 	add	r3,r3,r17
   2ca98:	10800044 	addi	r2,r2,1
   2ca9c:	d8c02015 	stw	r3,128(sp)
   2caa0:	44400115 	stw	r17,4(r8)
   2caa4:	d8801f15 	stw	r2,124(sp)
   2caa8:	00c001c4 	movi	r3,7
   2caac:	1880a716 	blt	r3,r2,2cd4c <___vfprintf_internal_r+0x3d4>
   2cab0:	42000204 	addi	r8,r8,8
   2cab4:	d9402f17 	ldw	r5,188(sp)
   2cab8:	2c4b883a 	add	r5,r5,r17
   2cabc:	d9402f15 	stw	r5,188(sp)
   2cac0:	80800007 	ldb	r2,0(r16)
   2cac4:	1000a826 	beq	r2,zero,2cd68 <___vfprintf_internal_r+0x3f0>
   2cac8:	84400047 	ldb	r17,1(r16)
   2cacc:	00bfffc4 	movi	r2,-1
   2cad0:	85400044 	addi	r21,r16,1
   2cad4:	d8002785 	stb	zero,158(sp)
   2cad8:	0007883a 	mov	r3,zero
   2cadc:	000f883a 	mov	r7,zero
   2cae0:	d8802915 	stw	r2,164(sp)
   2cae4:	d8003115 	stw	zero,196(sp)
   2cae8:	0025883a 	mov	r18,zero
   2caec:	01401604 	movi	r5,88
   2caf0:	01800244 	movi	r6,9
   2caf4:	02800a84 	movi	r10,42
   2caf8:	02401b04 	movi	r9,108
   2cafc:	ad400044 	addi	r21,r21,1
   2cb00:	88bff804 	addi	r2,r17,-32
   2cb04:	28830436 	bltu	r5,r2,2d718 <___vfprintf_internal_r+0xda0>
   2cb08:	100490ba 	slli	r2,r2,2
   2cb0c:	010000f4 	movhi	r4,3
   2cb10:	2132c804 	addi	r4,r4,-13536
   2cb14:	1105883a 	add	r2,r2,r4
   2cb18:	10800017 	ldw	r2,0(r2)
   2cb1c:	1000683a 	jmp	r2
   2cb20:	0002d638 	rdprs	zero,zero,2904
   2cb24:	0002d718 	cmpnei	zero,zero,2908
   2cb28:	0002d718 	cmpnei	zero,zero,2908
   2cb2c:	0002d658 	cmpnei	zero,zero,2905
   2cb30:	0002d718 	cmpnei	zero,zero,2908
   2cb34:	0002d718 	cmpnei	zero,zero,2908
   2cb38:	0002d718 	cmpnei	zero,zero,2908
   2cb3c:	0002d718 	cmpnei	zero,zero,2908
   2cb40:	0002d718 	cmpnei	zero,zero,2908
   2cb44:	0002d718 	cmpnei	zero,zero,2908
   2cb48:	0002cdcc 	andi	zero,zero,2871
   2cb4c:	0002d574 	movhi	zero,2901
   2cb50:	0002d718 	cmpnei	zero,zero,2908
   2cb54:	0002cc94 	movui	zero,2866
   2cb58:	0002cdf4 	movhi	zero,2871
   2cb5c:	0002d718 	cmpnei	zero,zero,2908
   2cb60:	0002ce34 	movhi	zero,2872
   2cb64:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb68:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb6c:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb70:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb74:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb78:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb7c:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb80:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb84:	0002ce40 	call	2ce4 <__alt_mem_onchip_memory_nios2_FFT-0x1d31c>
   2cb88:	0002d718 	cmpnei	zero,zero,2908
   2cb8c:	0002d718 	cmpnei	zero,zero,2908
   2cb90:	0002d718 	cmpnei	zero,zero,2908
   2cb94:	0002d718 	cmpnei	zero,zero,2908
   2cb98:	0002d718 	cmpnei	zero,zero,2908
   2cb9c:	0002d718 	cmpnei	zero,zero,2908
   2cba0:	0002d718 	cmpnei	zero,zero,2908
   2cba4:	0002d718 	cmpnei	zero,zero,2908
   2cba8:	0002d718 	cmpnei	zero,zero,2908
   2cbac:	0002d718 	cmpnei	zero,zero,2908
   2cbb0:	0002ce74 	movhi	zero,2873
   2cbb4:	0002cf30 	cmpltui	zero,zero,2876
   2cbb8:	0002d718 	cmpnei	zero,zero,2908
   2cbbc:	0002cf30 	cmpltui	zero,zero,2876
   2cbc0:	0002d718 	cmpnei	zero,zero,2908
   2cbc4:	0002d718 	cmpnei	zero,zero,2908
   2cbc8:	0002d718 	cmpnei	zero,zero,2908
   2cbcc:	0002d718 	cmpnei	zero,zero,2908
   2cbd0:	0002cfd0 	cmplti	zero,zero,2879
   2cbd4:	0002d718 	cmpnei	zero,zero,2908
   2cbd8:	0002d718 	cmpnei	zero,zero,2908
   2cbdc:	0002cfdc 	xori	zero,zero,2879
   2cbe0:	0002d718 	cmpnei	zero,zero,2908
   2cbe4:	0002d718 	cmpnei	zero,zero,2908
   2cbe8:	0002d718 	cmpnei	zero,zero,2908
   2cbec:	0002d718 	cmpnei	zero,zero,2908
   2cbf0:	0002d718 	cmpnei	zero,zero,2908
   2cbf4:	0002d454 	movui	zero,2897
   2cbf8:	0002d718 	cmpnei	zero,zero,2908
   2cbfc:	0002d718 	cmpnei	zero,zero,2908
   2cc00:	0002d4b4 	movhi	zero,2898
   2cc04:	0002d718 	cmpnei	zero,zero,2908
   2cc08:	0002d718 	cmpnei	zero,zero,2908
   2cc0c:	0002d718 	cmpnei	zero,zero,2908
   2cc10:	0002d718 	cmpnei	zero,zero,2908
   2cc14:	0002d718 	cmpnei	zero,zero,2908
   2cc18:	0002d718 	cmpnei	zero,zero,2908
   2cc1c:	0002d718 	cmpnei	zero,zero,2908
   2cc20:	0002d718 	cmpnei	zero,zero,2908
   2cc24:	0002d718 	cmpnei	zero,zero,2908
   2cc28:	0002d718 	cmpnei	zero,zero,2908
   2cc2c:	0002d6c4 	movi	zero,2907
   2cc30:	0002d664 	muli	zero,zero,2905
   2cc34:	0002cf30 	cmpltui	zero,zero,2876
   2cc38:	0002cf30 	cmpltui	zero,zero,2876
   2cc3c:	0002cf30 	cmpltui	zero,zero,2876
   2cc40:	0002d674 	movhi	zero,2905
   2cc44:	0002d664 	muli	zero,zero,2905
   2cc48:	0002d718 	cmpnei	zero,zero,2908
   2cc4c:	0002d718 	cmpnei	zero,zero,2908
   2cc50:	0002d680 	call	2d68 <__alt_mem_onchip_memory_nios2_FFT-0x1d298>
   2cc54:	0002d718 	cmpnei	zero,zero,2908
   2cc58:	0002d690 	cmplti	zero,zero,2906
   2cc5c:	0002d564 	muli	zero,zero,2901
   2cc60:	0002cca0 	cmpeqi	zero,zero,2866
   2cc64:	0002d584 	movi	zero,2902
   2cc68:	0002d718 	cmpnei	zero,zero,2908
   2cc6c:	0002d590 	cmplti	zero,zero,2902
   2cc70:	0002d718 	cmpnei	zero,zero,2908
   2cc74:	0002d5ec 	andhi	zero,zero,2903
   2cc78:	0002d718 	cmpnei	zero,zero,2908
   2cc7c:	0002d718 	cmpnei	zero,zero,2908
   2cc80:	0002d5fc 	xorhi	zero,zero,2903
   2cc84:	d9003117 	ldw	r4,196(sp)
   2cc88:	d8802d15 	stw	r2,180(sp)
   2cc8c:	0109c83a 	sub	r4,zero,r4
   2cc90:	d9003115 	stw	r4,196(sp)
   2cc94:	94800114 	ori	r18,r18,4
   2cc98:	ac400007 	ldb	r17,0(r21)
   2cc9c:	003f9706 	br	2cafc <___vfprintf_internal_r+0x184>
   2cca0:	00800c04 	movi	r2,48
   2cca4:	d9002d17 	ldw	r4,180(sp)
   2cca8:	d9402917 	ldw	r5,164(sp)
   2ccac:	d8802705 	stb	r2,156(sp)
   2ccb0:	00801e04 	movi	r2,120
   2ccb4:	d8802745 	stb	r2,157(sp)
   2ccb8:	d8002785 	stb	zero,158(sp)
   2ccbc:	20c00104 	addi	r3,r4,4
   2ccc0:	24c00017 	ldw	r19,0(r4)
   2ccc4:	002d883a 	mov	r22,zero
   2ccc8:	90800094 	ori	r2,r18,2
   2cccc:	28029a16 	blt	r5,zero,2d738 <___vfprintf_internal_r+0xdc0>
   2ccd0:	00bfdfc4 	movi	r2,-129
   2ccd4:	90a4703a 	and	r18,r18,r2
   2ccd8:	d8c02d15 	stw	r3,180(sp)
   2ccdc:	94800094 	ori	r18,r18,2
   2cce0:	9802871e 	bne	r19,zero,2d700 <___vfprintf_internal_r+0xd88>
   2cce4:	00800134 	movhi	r2,4
   2cce8:	10a2a704 	addi	r2,r2,-30052
   2ccec:	d8803915 	stw	r2,228(sp)
   2ccf0:	04401e04 	movi	r17,120
   2ccf4:	d8802917 	ldw	r2,164(sp)
   2ccf8:	0039883a 	mov	fp,zero
   2ccfc:	1001e926 	beq	r2,zero,2d4a4 <___vfprintf_internal_r+0xb2c>
   2cd00:	0027883a 	mov	r19,zero
   2cd04:	002d883a 	mov	r22,zero
   2cd08:	00020506 	br	2d520 <___vfprintf_internal_r+0xba8>
   2cd0c:	d9002c17 	ldw	r4,176(sp)
   2cd10:	b80b883a 	mov	r5,r23
   2cd14:	002eca80 	call	2eca8 <__swsetup_r>
   2cd18:	1005ac1e 	bne	r2,zero,2e3cc <___vfprintf_internal_r+0x1a54>
   2cd1c:	b880030b 	ldhu	r2,12(r23)
   2cd20:	00c00284 	movi	r3,10
   2cd24:	1080068c 	andi	r2,r2,26
   2cd28:	10ff3c1e 	bne	r2,r3,2ca1c <___vfprintf_internal_r+0xa4>
   2cd2c:	b880038f 	ldh	r2,14(r23)
   2cd30:	103f3a16 	blt	r2,zero,2ca1c <___vfprintf_internal_r+0xa4>
   2cd34:	d9c02d17 	ldw	r7,180(sp)
   2cd38:	d9002c17 	ldw	r4,176(sp)
   2cd3c:	a80d883a 	mov	r6,r21
   2cd40:	b80b883a 	mov	r5,r23
   2cd44:	002eb8c0 	call	2eb8c <__sbprintf>
   2cd48:	00001106 	br	2cd90 <___vfprintf_internal_r+0x418>
   2cd4c:	d9002c17 	ldw	r4,176(sp)
   2cd50:	d9801e04 	addi	r6,sp,120
   2cd54:	b80b883a 	mov	r5,r23
   2cd58:	0032be40 	call	32be4 <__sprint_r>
   2cd5c:	1000081e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2cd60:	da000404 	addi	r8,sp,16
   2cd64:	003f5306 	br	2cab4 <___vfprintf_internal_r+0x13c>
   2cd68:	d8802017 	ldw	r2,128(sp)
   2cd6c:	10000426 	beq	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2cd70:	d9002c17 	ldw	r4,176(sp)
   2cd74:	d9801e04 	addi	r6,sp,120
   2cd78:	b80b883a 	mov	r5,r23
   2cd7c:	0032be40 	call	32be4 <__sprint_r>
   2cd80:	b880030b 	ldhu	r2,12(r23)
   2cd84:	1080100c 	andi	r2,r2,64
   2cd88:	1005901e 	bne	r2,zero,2e3cc <___vfprintf_internal_r+0x1a54>
   2cd8c:	d8802f17 	ldw	r2,188(sp)
   2cd90:	dfc04717 	ldw	ra,284(sp)
   2cd94:	df004617 	ldw	fp,280(sp)
   2cd98:	ddc04517 	ldw	r23,276(sp)
   2cd9c:	dd804417 	ldw	r22,272(sp)
   2cda0:	dd404317 	ldw	r21,268(sp)
   2cda4:	dd004217 	ldw	r20,264(sp)
   2cda8:	dcc04117 	ldw	r19,260(sp)
   2cdac:	dc804017 	ldw	r18,256(sp)
   2cdb0:	dc403f17 	ldw	r17,252(sp)
   2cdb4:	dc003e17 	ldw	r16,248(sp)
   2cdb8:	dec04804 	addi	sp,sp,288
   2cdbc:	f800283a 	ret
   2cdc0:	d9002c17 	ldw	r4,176(sp)
   2cdc4:	0029f640 	call	29f64 <__sinit>
   2cdc8:	003f0406 	br	2c9dc <___vfprintf_internal_r+0x64>
   2cdcc:	d8802d17 	ldw	r2,180(sp)
   2cdd0:	d9002d17 	ldw	r4,180(sp)
   2cdd4:	10800017 	ldw	r2,0(r2)
   2cdd8:	d8803115 	stw	r2,196(sp)
   2cddc:	20800104 	addi	r2,r4,4
   2cde0:	d9003117 	ldw	r4,196(sp)
   2cde4:	203fa716 	blt	r4,zero,2cc84 <___vfprintf_internal_r+0x30c>
   2cde8:	d8802d15 	stw	r2,180(sp)
   2cdec:	ac400007 	ldb	r17,0(r21)
   2cdf0:	003f4206 	br	2cafc <___vfprintf_internal_r+0x184>
   2cdf4:	ac400007 	ldb	r17,0(r21)
   2cdf8:	aac00044 	addi	r11,r21,1
   2cdfc:	8a872826 	beq	r17,r10,2eaa0 <___vfprintf_internal_r+0x2128>
   2ce00:	88bff404 	addi	r2,r17,-48
   2ce04:	0009883a 	mov	r4,zero
   2ce08:	30867d36 	bltu	r6,r2,2e800 <___vfprintf_internal_r+0x1e88>
   2ce0c:	5c400007 	ldb	r17,0(r11)
   2ce10:	210002a4 	muli	r4,r4,10
   2ce14:	5d400044 	addi	r21,r11,1
   2ce18:	a817883a 	mov	r11,r21
   2ce1c:	2089883a 	add	r4,r4,r2
   2ce20:	88bff404 	addi	r2,r17,-48
   2ce24:	30bff92e 	bgeu	r6,r2,2ce0c <___vfprintf_internal_r+0x494>
   2ce28:	2005c916 	blt	r4,zero,2e550 <___vfprintf_internal_r+0x1bd8>
   2ce2c:	d9002915 	stw	r4,164(sp)
   2ce30:	003f3306 	br	2cb00 <___vfprintf_internal_r+0x188>
   2ce34:	94802014 	ori	r18,r18,128
   2ce38:	ac400007 	ldb	r17,0(r21)
   2ce3c:	003f2f06 	br	2cafc <___vfprintf_internal_r+0x184>
   2ce40:	a809883a 	mov	r4,r21
   2ce44:	d8003115 	stw	zero,196(sp)
   2ce48:	88bff404 	addi	r2,r17,-48
   2ce4c:	0017883a 	mov	r11,zero
   2ce50:	24400007 	ldb	r17,0(r4)
   2ce54:	5ac002a4 	muli	r11,r11,10
   2ce58:	ad400044 	addi	r21,r21,1
   2ce5c:	a809883a 	mov	r4,r21
   2ce60:	12d7883a 	add	r11,r2,r11
   2ce64:	88bff404 	addi	r2,r17,-48
   2ce68:	30bff92e 	bgeu	r6,r2,2ce50 <___vfprintf_internal_r+0x4d8>
   2ce6c:	dac03115 	stw	r11,196(sp)
   2ce70:	003f2306 	br	2cb00 <___vfprintf_internal_r+0x188>
   2ce74:	18c03fcc 	andi	r3,r3,255
   2ce78:	18072b1e 	bne	r3,zero,2eb28 <___vfprintf_internal_r+0x21b0>
   2ce7c:	94800414 	ori	r18,r18,16
   2ce80:	9080080c 	andi	r2,r18,32
   2ce84:	10037b26 	beq	r2,zero,2dc74 <___vfprintf_internal_r+0x12fc>
   2ce88:	d9402d17 	ldw	r5,180(sp)
   2ce8c:	28800117 	ldw	r2,4(r5)
   2ce90:	2cc00017 	ldw	r19,0(r5)
   2ce94:	29400204 	addi	r5,r5,8
   2ce98:	d9402d15 	stw	r5,180(sp)
   2ce9c:	102d883a 	mov	r22,r2
   2cea0:	10044b16 	blt	r2,zero,2dfd0 <___vfprintf_internal_r+0x1658>
   2cea4:	d9402917 	ldw	r5,164(sp)
   2cea8:	df002783 	ldbu	fp,158(sp)
   2ceac:	2803bc16 	blt	r5,zero,2dda0 <___vfprintf_internal_r+0x1428>
   2ceb0:	00ffdfc4 	movi	r3,-129
   2ceb4:	9d84b03a 	or	r2,r19,r22
   2ceb8:	90e4703a 	and	r18,r18,r3
   2cebc:	10017726 	beq	r2,zero,2d49c <___vfprintf_internal_r+0xb24>
   2cec0:	b0038326 	beq	r22,zero,2dcd0 <___vfprintf_internal_r+0x1358>
   2cec4:	dc402a15 	stw	r17,168(sp)
   2cec8:	dc001e04 	addi	r16,sp,120
   2cecc:	b023883a 	mov	r17,r22
   2ced0:	402d883a 	mov	r22,r8
   2ced4:	9809883a 	mov	r4,r19
   2ced8:	880b883a 	mov	r5,r17
   2cedc:	01800284 	movi	r6,10
   2cee0:	000f883a 	mov	r7,zero
   2cee4:	0034cb40 	call	34cb4 <__umoddi3>
   2cee8:	10800c04 	addi	r2,r2,48
   2ceec:	843fffc4 	addi	r16,r16,-1
   2cef0:	9809883a 	mov	r4,r19
   2cef4:	880b883a 	mov	r5,r17
   2cef8:	80800005 	stb	r2,0(r16)
   2cefc:	01800284 	movi	r6,10
   2cf00:	000f883a 	mov	r7,zero
   2cf04:	003473c0 	call	3473c <__udivdi3>
   2cf08:	1027883a 	mov	r19,r2
   2cf0c:	10c4b03a 	or	r2,r2,r3
   2cf10:	1823883a 	mov	r17,r3
   2cf14:	103fef1e 	bne	r2,zero,2ced4 <___vfprintf_internal_r+0x55c>
   2cf18:	d8c02817 	ldw	r3,160(sp)
   2cf1c:	dc402a17 	ldw	r17,168(sp)
   2cf20:	b011883a 	mov	r8,r22
   2cf24:	1c07c83a 	sub	r3,r3,r16
   2cf28:	d8c02e15 	stw	r3,184(sp)
   2cf2c:	00005906 	br	2d094 <___vfprintf_internal_r+0x71c>
   2cf30:	18c03fcc 	andi	r3,r3,255
   2cf34:	1806fa1e 	bne	r3,zero,2eb20 <___vfprintf_internal_r+0x21a8>
   2cf38:	9080020c 	andi	r2,r18,8
   2cf3c:	10048a26 	beq	r2,zero,2e168 <___vfprintf_internal_r+0x17f0>
   2cf40:	d8c02d17 	ldw	r3,180(sp)
   2cf44:	d9002d17 	ldw	r4,180(sp)
   2cf48:	d9402d17 	ldw	r5,180(sp)
   2cf4c:	18c00017 	ldw	r3,0(r3)
   2cf50:	21000117 	ldw	r4,4(r4)
   2cf54:	29400204 	addi	r5,r5,8
   2cf58:	d8c03615 	stw	r3,216(sp)
   2cf5c:	d9003815 	stw	r4,224(sp)
   2cf60:	d9402d15 	stw	r5,180(sp)
   2cf64:	d9003617 	ldw	r4,216(sp)
   2cf68:	d9403817 	ldw	r5,224(sp)
   2cf6c:	da003d15 	stw	r8,244(sp)
   2cf70:	04000044 	movi	r16,1
   2cf74:	00257840 	call	25784 <__fpclassifyd>
   2cf78:	da003d17 	ldw	r8,244(sp)
   2cf7c:	14041f1e 	bne	r2,r16,2dffc <___vfprintf_internal_r+0x1684>
   2cf80:	d9003617 	ldw	r4,216(sp)
   2cf84:	d9403817 	ldw	r5,224(sp)
   2cf88:	000d883a 	mov	r6,zero
   2cf8c:	000f883a 	mov	r7,zero
   2cf90:	00281e00 	call	281e0 <__ledf2>
   2cf94:	da003d17 	ldw	r8,244(sp)
   2cf98:	1005be16 	blt	r2,zero,2e694 <___vfprintf_internal_r+0x1d1c>
   2cf9c:	df002783 	ldbu	fp,158(sp)
   2cfa0:	008011c4 	movi	r2,71
   2cfa4:	1445330e 	bge	r2,r17,2e474 <___vfprintf_internal_r+0x1afc>
   2cfa8:	04000134 	movhi	r16,4
   2cfac:	84229f04 	addi	r16,r16,-30084
   2cfb0:	00c000c4 	movi	r3,3
   2cfb4:	00bfdfc4 	movi	r2,-129
   2cfb8:	d8c02a15 	stw	r3,168(sp)
   2cfbc:	90a4703a 	and	r18,r18,r2
   2cfc0:	d8c02e15 	stw	r3,184(sp)
   2cfc4:	d8002915 	stw	zero,164(sp)
   2cfc8:	d8003215 	stw	zero,200(sp)
   2cfcc:	00003706 	br	2d0ac <___vfprintf_internal_r+0x734>
   2cfd0:	94800214 	ori	r18,r18,8
   2cfd4:	ac400007 	ldb	r17,0(r21)
   2cfd8:	003ec806 	br	2cafc <___vfprintf_internal_r+0x184>
   2cfdc:	18c03fcc 	andi	r3,r3,255
   2cfe0:	1806db1e 	bne	r3,zero,2eb50 <___vfprintf_internal_r+0x21d8>
   2cfe4:	94800414 	ori	r18,r18,16
   2cfe8:	9080080c 	andi	r2,r18,32
   2cfec:	1002d826 	beq	r2,zero,2db50 <___vfprintf_internal_r+0x11d8>
   2cff0:	d9402d17 	ldw	r5,180(sp)
   2cff4:	d8c02917 	ldw	r3,164(sp)
   2cff8:	d8002785 	stb	zero,158(sp)
   2cffc:	28800204 	addi	r2,r5,8
   2d000:	2cc00017 	ldw	r19,0(r5)
   2d004:	2d800117 	ldw	r22,4(r5)
   2d008:	18048f16 	blt	r3,zero,2e248 <___vfprintf_internal_r+0x18d0>
   2d00c:	013fdfc4 	movi	r4,-129
   2d010:	9d86b03a 	or	r3,r19,r22
   2d014:	d8802d15 	stw	r2,180(sp)
   2d018:	9124703a 	and	r18,r18,r4
   2d01c:	1802d91e 	bne	r3,zero,2db84 <___vfprintf_internal_r+0x120c>
   2d020:	d8c02917 	ldw	r3,164(sp)
   2d024:	0039883a 	mov	fp,zero
   2d028:	1805c326 	beq	r3,zero,2e738 <___vfprintf_internal_r+0x1dc0>
   2d02c:	0027883a 	mov	r19,zero
   2d030:	002d883a 	mov	r22,zero
   2d034:	dc001e04 	addi	r16,sp,120
   2d038:	9806d0fa 	srli	r3,r19,3
   2d03c:	b008977a 	slli	r4,r22,29
   2d040:	b02cd0fa 	srli	r22,r22,3
   2d044:	9cc001cc 	andi	r19,r19,7
   2d048:	98800c04 	addi	r2,r19,48
   2d04c:	843fffc4 	addi	r16,r16,-1
   2d050:	20e6b03a 	or	r19,r4,r3
   2d054:	80800005 	stb	r2,0(r16)
   2d058:	9d86b03a 	or	r3,r19,r22
   2d05c:	183ff61e 	bne	r3,zero,2d038 <___vfprintf_internal_r+0x6c0>
   2d060:	90c0004c 	andi	r3,r18,1
   2d064:	18013b26 	beq	r3,zero,2d554 <___vfprintf_internal_r+0xbdc>
   2d068:	10803fcc 	andi	r2,r2,255
   2d06c:	1080201c 	xori	r2,r2,128
   2d070:	10bfe004 	addi	r2,r2,-128
   2d074:	00c00c04 	movi	r3,48
   2d078:	10c13626 	beq	r2,r3,2d554 <___vfprintf_internal_r+0xbdc>
   2d07c:	80ffffc5 	stb	r3,-1(r16)
   2d080:	d8c02817 	ldw	r3,160(sp)
   2d084:	80bfffc4 	addi	r2,r16,-1
   2d088:	1021883a 	mov	r16,r2
   2d08c:	1887c83a 	sub	r3,r3,r2
   2d090:	d8c02e15 	stw	r3,184(sp)
   2d094:	d8802e17 	ldw	r2,184(sp)
   2d098:	d9002917 	ldw	r4,164(sp)
   2d09c:	1100010e 	bge	r2,r4,2d0a4 <___vfprintf_internal_r+0x72c>
   2d0a0:	2005883a 	mov	r2,r4
   2d0a4:	d8802a15 	stw	r2,168(sp)
   2d0a8:	d8003215 	stw	zero,200(sp)
   2d0ac:	e7003fcc 	andi	fp,fp,255
   2d0b0:	e700201c 	xori	fp,fp,128
   2d0b4:	e73fe004 	addi	fp,fp,-128
   2d0b8:	e0000326 	beq	fp,zero,2d0c8 <___vfprintf_internal_r+0x750>
   2d0bc:	d8c02a17 	ldw	r3,168(sp)
   2d0c0:	18c00044 	addi	r3,r3,1
   2d0c4:	d8c02a15 	stw	r3,168(sp)
   2d0c8:	90c0008c 	andi	r3,r18,2
   2d0cc:	d8c02b15 	stw	r3,172(sp)
   2d0d0:	18000326 	beq	r3,zero,2d0e0 <___vfprintf_internal_r+0x768>
   2d0d4:	d8c02a17 	ldw	r3,168(sp)
   2d0d8:	18c00084 	addi	r3,r3,2
   2d0dc:	d8c02a15 	stw	r3,168(sp)
   2d0e0:	90c0210c 	andi	r3,r18,132
   2d0e4:	d8c03015 	stw	r3,192(sp)
   2d0e8:	1801a31e 	bne	r3,zero,2d778 <___vfprintf_internal_r+0xe00>
   2d0ec:	d9003117 	ldw	r4,196(sp)
   2d0f0:	d8c02a17 	ldw	r3,168(sp)
   2d0f4:	20e7c83a 	sub	r19,r4,r3
   2d0f8:	04c19f0e 	bge	zero,r19,2d778 <___vfprintf_internal_r+0xe00>
   2d0fc:	02400404 	movi	r9,16
   2d100:	d8c02017 	ldw	r3,128(sp)
   2d104:	d8801f17 	ldw	r2,124(sp)
   2d108:	4cc50d0e 	bge	r9,r19,2e540 <___vfprintf_internal_r+0x1bc8>
   2d10c:	01400134 	movhi	r5,4
   2d110:	2962b284 	addi	r5,r5,-30006
   2d114:	dc403b15 	stw	r17,236(sp)
   2d118:	d9403515 	stw	r5,212(sp)
   2d11c:	9823883a 	mov	r17,r19
   2d120:	482d883a 	mov	r22,r9
   2d124:	9027883a 	mov	r19,r18
   2d128:	070001c4 	movi	fp,7
   2d12c:	8025883a 	mov	r18,r16
   2d130:	dc002c17 	ldw	r16,176(sp)
   2d134:	00000306 	br	2d144 <___vfprintf_internal_r+0x7cc>
   2d138:	8c7ffc04 	addi	r17,r17,-16
   2d13c:	42000204 	addi	r8,r8,8
   2d140:	b440130e 	bge	r22,r17,2d190 <___vfprintf_internal_r+0x818>
   2d144:	01000134 	movhi	r4,4
   2d148:	18c00404 	addi	r3,r3,16
   2d14c:	10800044 	addi	r2,r2,1
   2d150:	2122b284 	addi	r4,r4,-30006
   2d154:	41000015 	stw	r4,0(r8)
   2d158:	45800115 	stw	r22,4(r8)
   2d15c:	d8c02015 	stw	r3,128(sp)
   2d160:	d8801f15 	stw	r2,124(sp)
   2d164:	e0bff40e 	bge	fp,r2,2d138 <___vfprintf_internal_r+0x7c0>
   2d168:	d9801e04 	addi	r6,sp,120
   2d16c:	b80b883a 	mov	r5,r23
   2d170:	8009883a 	mov	r4,r16
   2d174:	0032be40 	call	32be4 <__sprint_r>
   2d178:	103f011e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2d17c:	8c7ffc04 	addi	r17,r17,-16
   2d180:	d8c02017 	ldw	r3,128(sp)
   2d184:	d8801f17 	ldw	r2,124(sp)
   2d188:	da000404 	addi	r8,sp,16
   2d18c:	b47fed16 	blt	r22,r17,2d144 <___vfprintf_internal_r+0x7cc>
   2d190:	9021883a 	mov	r16,r18
   2d194:	9825883a 	mov	r18,r19
   2d198:	8827883a 	mov	r19,r17
   2d19c:	dc403b17 	ldw	r17,236(sp)
   2d1a0:	d9403517 	ldw	r5,212(sp)
   2d1a4:	98c7883a 	add	r3,r19,r3
   2d1a8:	10800044 	addi	r2,r2,1
   2d1ac:	41400015 	stw	r5,0(r8)
   2d1b0:	44c00115 	stw	r19,4(r8)
   2d1b4:	d8c02015 	stw	r3,128(sp)
   2d1b8:	d8801f15 	stw	r2,124(sp)
   2d1bc:	010001c4 	movi	r4,7
   2d1c0:	2082a316 	blt	r4,r2,2dc50 <___vfprintf_internal_r+0x12d8>
   2d1c4:	df002787 	ldb	fp,158(sp)
   2d1c8:	42000204 	addi	r8,r8,8
   2d1cc:	e0000c26 	beq	fp,zero,2d200 <___vfprintf_internal_r+0x888>
   2d1d0:	d8801f17 	ldw	r2,124(sp)
   2d1d4:	d9002784 	addi	r4,sp,158
   2d1d8:	18c00044 	addi	r3,r3,1
   2d1dc:	10800044 	addi	r2,r2,1
   2d1e0:	41000015 	stw	r4,0(r8)
   2d1e4:	01000044 	movi	r4,1
   2d1e8:	41000115 	stw	r4,4(r8)
   2d1ec:	d8c02015 	stw	r3,128(sp)
   2d1f0:	d8801f15 	stw	r2,124(sp)
   2d1f4:	010001c4 	movi	r4,7
   2d1f8:	20823c16 	blt	r4,r2,2daec <___vfprintf_internal_r+0x1174>
   2d1fc:	42000204 	addi	r8,r8,8
   2d200:	d8802b17 	ldw	r2,172(sp)
   2d204:	10000c26 	beq	r2,zero,2d238 <___vfprintf_internal_r+0x8c0>
   2d208:	d8801f17 	ldw	r2,124(sp)
   2d20c:	d9002704 	addi	r4,sp,156
   2d210:	18c00084 	addi	r3,r3,2
   2d214:	10800044 	addi	r2,r2,1
   2d218:	41000015 	stw	r4,0(r8)
   2d21c:	01000084 	movi	r4,2
   2d220:	41000115 	stw	r4,4(r8)
   2d224:	d8c02015 	stw	r3,128(sp)
   2d228:	d8801f15 	stw	r2,124(sp)
   2d22c:	010001c4 	movi	r4,7
   2d230:	20823616 	blt	r4,r2,2db0c <___vfprintf_internal_r+0x1194>
   2d234:	42000204 	addi	r8,r8,8
   2d238:	d9003017 	ldw	r4,192(sp)
   2d23c:	00802004 	movi	r2,128
   2d240:	20819926 	beq	r4,r2,2d8a8 <___vfprintf_internal_r+0xf30>
   2d244:	d9402917 	ldw	r5,164(sp)
   2d248:	d8802e17 	ldw	r2,184(sp)
   2d24c:	28adc83a 	sub	r22,r5,r2
   2d250:	0580310e 	bge	zero,r22,2d318 <___vfprintf_internal_r+0x9a0>
   2d254:	07000404 	movi	fp,16
   2d258:	d8801f17 	ldw	r2,124(sp)
   2d25c:	e584140e 	bge	fp,r22,2e2b0 <___vfprintf_internal_r+0x1938>
   2d260:	01400134 	movhi	r5,4
   2d264:	2962ae84 	addi	r5,r5,-30022
   2d268:	dc402915 	stw	r17,164(sp)
   2d26c:	d9402b15 	stw	r5,172(sp)
   2d270:	b023883a 	mov	r17,r22
   2d274:	04c001c4 	movi	r19,7
   2d278:	a82d883a 	mov	r22,r21
   2d27c:	902b883a 	mov	r21,r18
   2d280:	8025883a 	mov	r18,r16
   2d284:	dc002c17 	ldw	r16,176(sp)
   2d288:	00000306 	br	2d298 <___vfprintf_internal_r+0x920>
   2d28c:	8c7ffc04 	addi	r17,r17,-16
   2d290:	42000204 	addi	r8,r8,8
   2d294:	e440110e 	bge	fp,r17,2d2dc <___vfprintf_internal_r+0x964>
   2d298:	18c00404 	addi	r3,r3,16
   2d29c:	10800044 	addi	r2,r2,1
   2d2a0:	45000015 	stw	r20,0(r8)
   2d2a4:	47000115 	stw	fp,4(r8)
   2d2a8:	d8c02015 	stw	r3,128(sp)
   2d2ac:	d8801f15 	stw	r2,124(sp)
   2d2b0:	98bff60e 	bge	r19,r2,2d28c <___vfprintf_internal_r+0x914>
   2d2b4:	d9801e04 	addi	r6,sp,120
   2d2b8:	b80b883a 	mov	r5,r23
   2d2bc:	8009883a 	mov	r4,r16
   2d2c0:	0032be40 	call	32be4 <__sprint_r>
   2d2c4:	103eae1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2d2c8:	8c7ffc04 	addi	r17,r17,-16
   2d2cc:	d8c02017 	ldw	r3,128(sp)
   2d2d0:	d8801f17 	ldw	r2,124(sp)
   2d2d4:	da000404 	addi	r8,sp,16
   2d2d8:	e47fef16 	blt	fp,r17,2d298 <___vfprintf_internal_r+0x920>
   2d2dc:	9021883a 	mov	r16,r18
   2d2e0:	a825883a 	mov	r18,r21
   2d2e4:	b02b883a 	mov	r21,r22
   2d2e8:	882d883a 	mov	r22,r17
   2d2ec:	dc402917 	ldw	r17,164(sp)
   2d2f0:	d9002b17 	ldw	r4,172(sp)
   2d2f4:	1d87883a 	add	r3,r3,r22
   2d2f8:	10800044 	addi	r2,r2,1
   2d2fc:	41000015 	stw	r4,0(r8)
   2d300:	45800115 	stw	r22,4(r8)
   2d304:	d8c02015 	stw	r3,128(sp)
   2d308:	d8801f15 	stw	r2,124(sp)
   2d30c:	010001c4 	movi	r4,7
   2d310:	2081ee16 	blt	r4,r2,2dacc <___vfprintf_internal_r+0x1154>
   2d314:	42000204 	addi	r8,r8,8
   2d318:	9080400c 	andi	r2,r18,256
   2d31c:	1001181e 	bne	r2,zero,2d780 <___vfprintf_internal_r+0xe08>
   2d320:	d9402e17 	ldw	r5,184(sp)
   2d324:	d8801f17 	ldw	r2,124(sp)
   2d328:	44000015 	stw	r16,0(r8)
   2d32c:	1947883a 	add	r3,r3,r5
   2d330:	10800044 	addi	r2,r2,1
   2d334:	41400115 	stw	r5,4(r8)
   2d338:	d8c02015 	stw	r3,128(sp)
   2d33c:	d8801f15 	stw	r2,124(sp)
   2d340:	010001c4 	movi	r4,7
   2d344:	2081d316 	blt	r4,r2,2da94 <___vfprintf_internal_r+0x111c>
   2d348:	42000204 	addi	r8,r8,8
   2d34c:	9480010c 	andi	r18,r18,4
   2d350:	90003226 	beq	r18,zero,2d41c <___vfprintf_internal_r+0xaa4>
   2d354:	d9403117 	ldw	r5,196(sp)
   2d358:	d8802a17 	ldw	r2,168(sp)
   2d35c:	28a1c83a 	sub	r16,r5,r2
   2d360:	04002e0e 	bge	zero,r16,2d41c <___vfprintf_internal_r+0xaa4>
   2d364:	04400404 	movi	r17,16
   2d368:	d8801f17 	ldw	r2,124(sp)
   2d36c:	8c04a20e 	bge	r17,r16,2e5f8 <___vfprintf_internal_r+0x1c80>
   2d370:	01400134 	movhi	r5,4
   2d374:	2962b284 	addi	r5,r5,-30006
   2d378:	d9403515 	stw	r5,212(sp)
   2d37c:	048001c4 	movi	r18,7
   2d380:	dcc02c17 	ldw	r19,176(sp)
   2d384:	00000306 	br	2d394 <___vfprintf_internal_r+0xa1c>
   2d388:	843ffc04 	addi	r16,r16,-16
   2d38c:	42000204 	addi	r8,r8,8
   2d390:	8c00130e 	bge	r17,r16,2d3e0 <___vfprintf_internal_r+0xa68>
   2d394:	01000134 	movhi	r4,4
   2d398:	18c00404 	addi	r3,r3,16
   2d39c:	10800044 	addi	r2,r2,1
   2d3a0:	2122b284 	addi	r4,r4,-30006
   2d3a4:	41000015 	stw	r4,0(r8)
   2d3a8:	44400115 	stw	r17,4(r8)
   2d3ac:	d8c02015 	stw	r3,128(sp)
   2d3b0:	d8801f15 	stw	r2,124(sp)
   2d3b4:	90bff40e 	bge	r18,r2,2d388 <___vfprintf_internal_r+0xa10>
   2d3b8:	d9801e04 	addi	r6,sp,120
   2d3bc:	b80b883a 	mov	r5,r23
   2d3c0:	9809883a 	mov	r4,r19
   2d3c4:	0032be40 	call	32be4 <__sprint_r>
   2d3c8:	103e6d1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2d3cc:	843ffc04 	addi	r16,r16,-16
   2d3d0:	d8c02017 	ldw	r3,128(sp)
   2d3d4:	d8801f17 	ldw	r2,124(sp)
   2d3d8:	da000404 	addi	r8,sp,16
   2d3dc:	8c3fed16 	blt	r17,r16,2d394 <___vfprintf_internal_r+0xa1c>
   2d3e0:	d9403517 	ldw	r5,212(sp)
   2d3e4:	1c07883a 	add	r3,r3,r16
   2d3e8:	10800044 	addi	r2,r2,1
   2d3ec:	41400015 	stw	r5,0(r8)
   2d3f0:	44000115 	stw	r16,4(r8)
   2d3f4:	d8c02015 	stw	r3,128(sp)
   2d3f8:	d8801f15 	stw	r2,124(sp)
   2d3fc:	010001c4 	movi	r4,7
   2d400:	2080060e 	bge	r4,r2,2d41c <___vfprintf_internal_r+0xaa4>
   2d404:	d9002c17 	ldw	r4,176(sp)
   2d408:	d9801e04 	addi	r6,sp,120
   2d40c:	b80b883a 	mov	r5,r23
   2d410:	0032be40 	call	32be4 <__sprint_r>
   2d414:	103e5a1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2d418:	d8c02017 	ldw	r3,128(sp)
   2d41c:	d8803117 	ldw	r2,196(sp)
   2d420:	d9002a17 	ldw	r4,168(sp)
   2d424:	1100010e 	bge	r2,r4,2d42c <___vfprintf_internal_r+0xab4>
   2d428:	2005883a 	mov	r2,r4
   2d42c:	d9402f17 	ldw	r5,188(sp)
   2d430:	288b883a 	add	r5,r5,r2
   2d434:	d9402f15 	stw	r5,188(sp)
   2d438:	18019e1e 	bne	r3,zero,2dab4 <___vfprintf_internal_r+0x113c>
   2d43c:	a8800007 	ldb	r2,0(r21)
   2d440:	d8001f15 	stw	zero,124(sp)
   2d444:	da000404 	addi	r8,sp,16
   2d448:	103d851e 	bne	r2,zero,2ca60 <___vfprintf_internal_r+0xe8>
   2d44c:	a821883a 	mov	r16,r21
   2d450:	003d9b06 	br	2cac0 <___vfprintf_internal_r+0x148>
   2d454:	18c03fcc 	andi	r3,r3,255
   2d458:	1805c11e 	bne	r3,zero,2eb60 <___vfprintf_internal_r+0x21e8>
   2d45c:	94800414 	ori	r18,r18,16
   2d460:	9080080c 	andi	r2,r18,32
   2d464:	10020c26 	beq	r2,zero,2dc98 <___vfprintf_internal_r+0x1320>
   2d468:	d8802d17 	ldw	r2,180(sp)
   2d46c:	d9002917 	ldw	r4,164(sp)
   2d470:	d8002785 	stb	zero,158(sp)
   2d474:	10c00204 	addi	r3,r2,8
   2d478:	14c00017 	ldw	r19,0(r2)
   2d47c:	15800117 	ldw	r22,4(r2)
   2d480:	20040f16 	blt	r4,zero,2e4c0 <___vfprintf_internal_r+0x1b48>
   2d484:	013fdfc4 	movi	r4,-129
   2d488:	9d84b03a 	or	r2,r19,r22
   2d48c:	d8c02d15 	stw	r3,180(sp)
   2d490:	9124703a 	and	r18,r18,r4
   2d494:	0039883a 	mov	fp,zero
   2d498:	103e891e 	bne	r2,zero,2cec0 <___vfprintf_internal_r+0x548>
   2d49c:	d9002917 	ldw	r4,164(sp)
   2d4a0:	2002c11e 	bne	r4,zero,2dfa8 <___vfprintf_internal_r+0x1630>
   2d4a4:	d8002915 	stw	zero,164(sp)
   2d4a8:	d8002e15 	stw	zero,184(sp)
   2d4ac:	dc001e04 	addi	r16,sp,120
   2d4b0:	003ef806 	br	2d094 <___vfprintf_internal_r+0x71c>
   2d4b4:	18c03fcc 	andi	r3,r3,255
   2d4b8:	18059d1e 	bne	r3,zero,2eb30 <___vfprintf_internal_r+0x21b8>
   2d4bc:	01400134 	movhi	r5,4
   2d4c0:	2962a204 	addi	r5,r5,-30072
   2d4c4:	d9403915 	stw	r5,228(sp)
   2d4c8:	9080080c 	andi	r2,r18,32
   2d4cc:	10005226 	beq	r2,zero,2d618 <___vfprintf_internal_r+0xca0>
   2d4d0:	d8802d17 	ldw	r2,180(sp)
   2d4d4:	14c00017 	ldw	r19,0(r2)
   2d4d8:	15800117 	ldw	r22,4(r2)
   2d4dc:	10800204 	addi	r2,r2,8
   2d4e0:	d8802d15 	stw	r2,180(sp)
   2d4e4:	9080004c 	andi	r2,r18,1
   2d4e8:	10019026 	beq	r2,zero,2db2c <___vfprintf_internal_r+0x11b4>
   2d4ec:	9d84b03a 	or	r2,r19,r22
   2d4f0:	10036926 	beq	r2,zero,2e298 <___vfprintf_internal_r+0x1920>
   2d4f4:	d8c02917 	ldw	r3,164(sp)
   2d4f8:	00800c04 	movi	r2,48
   2d4fc:	d8802705 	stb	r2,156(sp)
   2d500:	dc402745 	stb	r17,157(sp)
   2d504:	d8002785 	stb	zero,158(sp)
   2d508:	90800094 	ori	r2,r18,2
   2d50c:	18045d16 	blt	r3,zero,2e684 <___vfprintf_internal_r+0x1d0c>
   2d510:	00bfdfc4 	movi	r2,-129
   2d514:	90a4703a 	and	r18,r18,r2
   2d518:	94800094 	ori	r18,r18,2
   2d51c:	0039883a 	mov	fp,zero
   2d520:	d9003917 	ldw	r4,228(sp)
   2d524:	dc001e04 	addi	r16,sp,120
   2d528:	988003cc 	andi	r2,r19,15
   2d52c:	b006973a 	slli	r3,r22,28
   2d530:	2085883a 	add	r2,r4,r2
   2d534:	9826d13a 	srli	r19,r19,4
   2d538:	10800003 	ldbu	r2,0(r2)
   2d53c:	b02cd13a 	srli	r22,r22,4
   2d540:	843fffc4 	addi	r16,r16,-1
   2d544:	1ce6b03a 	or	r19,r3,r19
   2d548:	80800005 	stb	r2,0(r16)
   2d54c:	9d84b03a 	or	r2,r19,r22
   2d550:	103ff51e 	bne	r2,zero,2d528 <___vfprintf_internal_r+0xbb0>
   2d554:	d8c02817 	ldw	r3,160(sp)
   2d558:	1c07c83a 	sub	r3,r3,r16
   2d55c:	d8c02e15 	stw	r3,184(sp)
   2d560:	003ecc06 	br	2d094 <___vfprintf_internal_r+0x71c>
   2d564:	18c03fcc 	andi	r3,r3,255
   2d568:	183e9f26 	beq	r3,zero,2cfe8 <___vfprintf_internal_r+0x670>
   2d56c:	d9c02785 	stb	r7,158(sp)
   2d570:	003e9d06 	br	2cfe8 <___vfprintf_internal_r+0x670>
   2d574:	00c00044 	movi	r3,1
   2d578:	01c00ac4 	movi	r7,43
   2d57c:	ac400007 	ldb	r17,0(r21)
   2d580:	003d5e06 	br	2cafc <___vfprintf_internal_r+0x184>
   2d584:	94800814 	ori	r18,r18,32
   2d588:	ac400007 	ldb	r17,0(r21)
   2d58c:	003d5b06 	br	2cafc <___vfprintf_internal_r+0x184>
   2d590:	d8c02d17 	ldw	r3,180(sp)
   2d594:	d8002785 	stb	zero,158(sp)
   2d598:	1c000017 	ldw	r16,0(r3)
   2d59c:	1cc00104 	addi	r19,r3,4
   2d5a0:	80041926 	beq	r16,zero,2e608 <___vfprintf_internal_r+0x1c90>
   2d5a4:	d9002917 	ldw	r4,164(sp)
   2d5a8:	2003d016 	blt	r4,zero,2e4ec <___vfprintf_internal_r+0x1b74>
   2d5ac:	200d883a 	mov	r6,r4
   2d5b0:	000b883a 	mov	r5,zero
   2d5b4:	8009883a 	mov	r4,r16
   2d5b8:	da003d15 	stw	r8,244(sp)
   2d5bc:	00310a40 	call	310a4 <memchr>
   2d5c0:	da003d17 	ldw	r8,244(sp)
   2d5c4:	10045426 	beq	r2,zero,2e718 <___vfprintf_internal_r+0x1da0>
   2d5c8:	1405c83a 	sub	r2,r2,r16
   2d5cc:	d8802e15 	stw	r2,184(sp)
   2d5d0:	1003cc16 	blt	r2,zero,2e504 <___vfprintf_internal_r+0x1b8c>
   2d5d4:	df002783 	ldbu	fp,158(sp)
   2d5d8:	d8802a15 	stw	r2,168(sp)
   2d5dc:	dcc02d15 	stw	r19,180(sp)
   2d5e0:	d8002915 	stw	zero,164(sp)
   2d5e4:	d8003215 	stw	zero,200(sp)
   2d5e8:	003eb006 	br	2d0ac <___vfprintf_internal_r+0x734>
   2d5ec:	18c03fcc 	andi	r3,r3,255
   2d5f0:	183f9b26 	beq	r3,zero,2d460 <___vfprintf_internal_r+0xae8>
   2d5f4:	d9c02785 	stb	r7,158(sp)
   2d5f8:	003f9906 	br	2d460 <___vfprintf_internal_r+0xae8>
   2d5fc:	18c03fcc 	andi	r3,r3,255
   2d600:	1805551e 	bne	r3,zero,2eb58 <___vfprintf_internal_r+0x21e0>
   2d604:	01400134 	movhi	r5,4
   2d608:	2962a704 	addi	r5,r5,-30052
   2d60c:	d9403915 	stw	r5,228(sp)
   2d610:	9080080c 	andi	r2,r18,32
   2d614:	103fae1e 	bne	r2,zero,2d4d0 <___vfprintf_internal_r+0xb58>
   2d618:	9080040c 	andi	r2,r18,16
   2d61c:	1002de26 	beq	r2,zero,2e198 <___vfprintf_internal_r+0x1820>
   2d620:	d8c02d17 	ldw	r3,180(sp)
   2d624:	002d883a 	mov	r22,zero
   2d628:	1cc00017 	ldw	r19,0(r3)
   2d62c:	18c00104 	addi	r3,r3,4
   2d630:	d8c02d15 	stw	r3,180(sp)
   2d634:	003fab06 	br	2d4e4 <___vfprintf_internal_r+0xb6c>
   2d638:	38803fcc 	andi	r2,r7,255
   2d63c:	1080201c 	xori	r2,r2,128
   2d640:	10bfe004 	addi	r2,r2,-128
   2d644:	1002d21e 	bne	r2,zero,2e190 <___vfprintf_internal_r+0x1818>
   2d648:	00c00044 	movi	r3,1
   2d64c:	01c00804 	movi	r7,32
   2d650:	ac400007 	ldb	r17,0(r21)
   2d654:	003d2906 	br	2cafc <___vfprintf_internal_r+0x184>
   2d658:	94800054 	ori	r18,r18,1
   2d65c:	ac400007 	ldb	r17,0(r21)
   2d660:	003d2606 	br	2cafc <___vfprintf_internal_r+0x184>
   2d664:	18c03fcc 	andi	r3,r3,255
   2d668:	183e0526 	beq	r3,zero,2ce80 <___vfprintf_internal_r+0x508>
   2d66c:	d9c02785 	stb	r7,158(sp)
   2d670:	003e0306 	br	2ce80 <___vfprintf_internal_r+0x508>
   2d674:	94801014 	ori	r18,r18,64
   2d678:	ac400007 	ldb	r17,0(r21)
   2d67c:	003d1f06 	br	2cafc <___vfprintf_internal_r+0x184>
   2d680:	ac400007 	ldb	r17,0(r21)
   2d684:	8a438726 	beq	r17,r9,2e4a4 <___vfprintf_internal_r+0x1b2c>
   2d688:	94800414 	ori	r18,r18,16
   2d68c:	003d1b06 	br	2cafc <___vfprintf_internal_r+0x184>
   2d690:	18c03fcc 	andi	r3,r3,255
   2d694:	1805341e 	bne	r3,zero,2eb68 <___vfprintf_internal_r+0x21f0>
   2d698:	9080080c 	andi	r2,r18,32
   2d69c:	1002cd26 	beq	r2,zero,2e1d4 <___vfprintf_internal_r+0x185c>
   2d6a0:	d9402d17 	ldw	r5,180(sp)
   2d6a4:	d9002f17 	ldw	r4,188(sp)
   2d6a8:	28800017 	ldw	r2,0(r5)
   2d6ac:	2007d7fa 	srai	r3,r4,31
   2d6b0:	29400104 	addi	r5,r5,4
   2d6b4:	d9402d15 	stw	r5,180(sp)
   2d6b8:	11000015 	stw	r4,0(r2)
   2d6bc:	10c00115 	stw	r3,4(r2)
   2d6c0:	003ce506 	br	2ca58 <___vfprintf_internal_r+0xe0>
   2d6c4:	d8c02d17 	ldw	r3,180(sp)
   2d6c8:	d9002d17 	ldw	r4,180(sp)
   2d6cc:	d8002785 	stb	zero,158(sp)
   2d6d0:	18800017 	ldw	r2,0(r3)
   2d6d4:	21000104 	addi	r4,r4,4
   2d6d8:	00c00044 	movi	r3,1
   2d6dc:	d8c02a15 	stw	r3,168(sp)
   2d6e0:	d8801405 	stb	r2,80(sp)
   2d6e4:	d9002d15 	stw	r4,180(sp)
   2d6e8:	d8c02e15 	stw	r3,184(sp)
   2d6ec:	d8002915 	stw	zero,164(sp)
   2d6f0:	d8003215 	stw	zero,200(sp)
   2d6f4:	dc001404 	addi	r16,sp,80
   2d6f8:	0039883a 	mov	fp,zero
   2d6fc:	003e7206 	br	2d0c8 <___vfprintf_internal_r+0x750>
   2d700:	01000134 	movhi	r4,4
   2d704:	2122a704 	addi	r4,r4,-30052
   2d708:	0039883a 	mov	fp,zero
   2d70c:	d9003915 	stw	r4,228(sp)
   2d710:	04401e04 	movi	r17,120
   2d714:	003f8206 	br	2d520 <___vfprintf_internal_r+0xba8>
   2d718:	18c03fcc 	andi	r3,r3,255
   2d71c:	1805061e 	bne	r3,zero,2eb38 <___vfprintf_internal_r+0x21c0>
   2d720:	883d9126 	beq	r17,zero,2cd68 <___vfprintf_internal_r+0x3f0>
   2d724:	00c00044 	movi	r3,1
   2d728:	d8c02a15 	stw	r3,168(sp)
   2d72c:	dc401405 	stb	r17,80(sp)
   2d730:	d8002785 	stb	zero,158(sp)
   2d734:	003fec06 	br	2d6e8 <___vfprintf_internal_r+0xd70>
   2d738:	01400134 	movhi	r5,4
   2d73c:	2962a704 	addi	r5,r5,-30052
   2d740:	d9403915 	stw	r5,228(sp)
   2d744:	d8c02d15 	stw	r3,180(sp)
   2d748:	1025883a 	mov	r18,r2
   2d74c:	04401e04 	movi	r17,120
   2d750:	9d84b03a 	or	r2,r19,r22
   2d754:	1000fc1e 	bne	r2,zero,2db48 <___vfprintf_internal_r+0x11d0>
   2d758:	0039883a 	mov	fp,zero
   2d75c:	00800084 	movi	r2,2
   2d760:	10803fcc 	andi	r2,r2,255
   2d764:	00c00044 	movi	r3,1
   2d768:	10c20f26 	beq	r2,r3,2dfa8 <___vfprintf_internal_r+0x1630>
   2d76c:	00c00084 	movi	r3,2
   2d770:	10fd6326 	beq	r2,r3,2cd00 <___vfprintf_internal_r+0x388>
   2d774:	003e2d06 	br	2d02c <___vfprintf_internal_r+0x6b4>
   2d778:	d8c02017 	ldw	r3,128(sp)
   2d77c:	003e9306 	br	2d1cc <___vfprintf_internal_r+0x854>
   2d780:	00801944 	movi	r2,101
   2d784:	14407e0e 	bge	r2,r17,2d980 <___vfprintf_internal_r+0x1008>
   2d788:	d9003617 	ldw	r4,216(sp)
   2d78c:	d9403817 	ldw	r5,224(sp)
   2d790:	000d883a 	mov	r6,zero
   2d794:	000f883a 	mov	r7,zero
   2d798:	d8c03c15 	stw	r3,240(sp)
   2d79c:	da003d15 	stw	r8,244(sp)
   2d7a0:	002807c0 	call	2807c <__eqdf2>
   2d7a4:	d8c03c17 	ldw	r3,240(sp)
   2d7a8:	da003d17 	ldw	r8,244(sp)
   2d7ac:	1000f71e 	bne	r2,zero,2db8c <___vfprintf_internal_r+0x1214>
   2d7b0:	d8801f17 	ldw	r2,124(sp)
   2d7b4:	01000134 	movhi	r4,4
   2d7b8:	2122ae04 	addi	r4,r4,-30024
   2d7bc:	18c00044 	addi	r3,r3,1
   2d7c0:	10800044 	addi	r2,r2,1
   2d7c4:	41000015 	stw	r4,0(r8)
   2d7c8:	01000044 	movi	r4,1
   2d7cc:	41000115 	stw	r4,4(r8)
   2d7d0:	d8c02015 	stw	r3,128(sp)
   2d7d4:	d8801f15 	stw	r2,124(sp)
   2d7d8:	010001c4 	movi	r4,7
   2d7dc:	2082b816 	blt	r4,r2,2e2c0 <___vfprintf_internal_r+0x1948>
   2d7e0:	42000204 	addi	r8,r8,8
   2d7e4:	d8802617 	ldw	r2,152(sp)
   2d7e8:	d9403317 	ldw	r5,204(sp)
   2d7ec:	11400216 	blt	r2,r5,2d7f8 <___vfprintf_internal_r+0xe80>
   2d7f0:	9080004c 	andi	r2,r18,1
   2d7f4:	103ed526 	beq	r2,zero,2d34c <___vfprintf_internal_r+0x9d4>
   2d7f8:	d8803717 	ldw	r2,220(sp)
   2d7fc:	d9003417 	ldw	r4,208(sp)
   2d800:	d9403717 	ldw	r5,220(sp)
   2d804:	1887883a 	add	r3,r3,r2
   2d808:	d8801f17 	ldw	r2,124(sp)
   2d80c:	41000015 	stw	r4,0(r8)
   2d810:	41400115 	stw	r5,4(r8)
   2d814:	10800044 	addi	r2,r2,1
   2d818:	d8c02015 	stw	r3,128(sp)
   2d81c:	d8801f15 	stw	r2,124(sp)
   2d820:	010001c4 	movi	r4,7
   2d824:	20832916 	blt	r4,r2,2e4cc <___vfprintf_internal_r+0x1b54>
   2d828:	42000204 	addi	r8,r8,8
   2d82c:	d8803317 	ldw	r2,204(sp)
   2d830:	143fffc4 	addi	r16,r2,-1
   2d834:	043ec50e 	bge	zero,r16,2d34c <___vfprintf_internal_r+0x9d4>
   2d838:	04400404 	movi	r17,16
   2d83c:	d8801f17 	ldw	r2,124(sp)
   2d840:	8c00880e 	bge	r17,r16,2da64 <___vfprintf_internal_r+0x10ec>
   2d844:	01400134 	movhi	r5,4
   2d848:	2962ae84 	addi	r5,r5,-30022
   2d84c:	d9402b15 	stw	r5,172(sp)
   2d850:	058001c4 	movi	r22,7
   2d854:	dcc02c17 	ldw	r19,176(sp)
   2d858:	00000306 	br	2d868 <___vfprintf_internal_r+0xef0>
   2d85c:	42000204 	addi	r8,r8,8
   2d860:	843ffc04 	addi	r16,r16,-16
   2d864:	8c00820e 	bge	r17,r16,2da70 <___vfprintf_internal_r+0x10f8>
   2d868:	18c00404 	addi	r3,r3,16
   2d86c:	10800044 	addi	r2,r2,1
   2d870:	45000015 	stw	r20,0(r8)
   2d874:	44400115 	stw	r17,4(r8)
   2d878:	d8c02015 	stw	r3,128(sp)
   2d87c:	d8801f15 	stw	r2,124(sp)
   2d880:	b0bff60e 	bge	r22,r2,2d85c <___vfprintf_internal_r+0xee4>
   2d884:	d9801e04 	addi	r6,sp,120
   2d888:	b80b883a 	mov	r5,r23
   2d88c:	9809883a 	mov	r4,r19
   2d890:	0032be40 	call	32be4 <__sprint_r>
   2d894:	103d3a1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2d898:	d8c02017 	ldw	r3,128(sp)
   2d89c:	d8801f17 	ldw	r2,124(sp)
   2d8a0:	da000404 	addi	r8,sp,16
   2d8a4:	003fee06 	br	2d860 <___vfprintf_internal_r+0xee8>
   2d8a8:	d9403117 	ldw	r5,196(sp)
   2d8ac:	d8802a17 	ldw	r2,168(sp)
   2d8b0:	28adc83a 	sub	r22,r5,r2
   2d8b4:	05be630e 	bge	zero,r22,2d244 <___vfprintf_internal_r+0x8cc>
   2d8b8:	07000404 	movi	fp,16
   2d8bc:	d8801f17 	ldw	r2,124(sp)
   2d8c0:	e5838f0e 	bge	fp,r22,2e700 <___vfprintf_internal_r+0x1d88>
   2d8c4:	01400134 	movhi	r5,4
   2d8c8:	2962ae84 	addi	r5,r5,-30022
   2d8cc:	dc403015 	stw	r17,192(sp)
   2d8d0:	d9402b15 	stw	r5,172(sp)
   2d8d4:	b023883a 	mov	r17,r22
   2d8d8:	04c001c4 	movi	r19,7
   2d8dc:	a82d883a 	mov	r22,r21
   2d8e0:	902b883a 	mov	r21,r18
   2d8e4:	8025883a 	mov	r18,r16
   2d8e8:	dc002c17 	ldw	r16,176(sp)
   2d8ec:	00000306 	br	2d8fc <___vfprintf_internal_r+0xf84>
   2d8f0:	8c7ffc04 	addi	r17,r17,-16
   2d8f4:	42000204 	addi	r8,r8,8
   2d8f8:	e440110e 	bge	fp,r17,2d940 <___vfprintf_internal_r+0xfc8>
   2d8fc:	18c00404 	addi	r3,r3,16
   2d900:	10800044 	addi	r2,r2,1
   2d904:	45000015 	stw	r20,0(r8)
   2d908:	47000115 	stw	fp,4(r8)
   2d90c:	d8c02015 	stw	r3,128(sp)
   2d910:	d8801f15 	stw	r2,124(sp)
   2d914:	98bff60e 	bge	r19,r2,2d8f0 <___vfprintf_internal_r+0xf78>
   2d918:	d9801e04 	addi	r6,sp,120
   2d91c:	b80b883a 	mov	r5,r23
   2d920:	8009883a 	mov	r4,r16
   2d924:	0032be40 	call	32be4 <__sprint_r>
   2d928:	103d151e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2d92c:	8c7ffc04 	addi	r17,r17,-16
   2d930:	d8c02017 	ldw	r3,128(sp)
   2d934:	d8801f17 	ldw	r2,124(sp)
   2d938:	da000404 	addi	r8,sp,16
   2d93c:	e47fef16 	blt	fp,r17,2d8fc <___vfprintf_internal_r+0xf84>
   2d940:	9021883a 	mov	r16,r18
   2d944:	a825883a 	mov	r18,r21
   2d948:	b02b883a 	mov	r21,r22
   2d94c:	882d883a 	mov	r22,r17
   2d950:	dc403017 	ldw	r17,192(sp)
   2d954:	d9002b17 	ldw	r4,172(sp)
   2d958:	1d87883a 	add	r3,r3,r22
   2d95c:	10800044 	addi	r2,r2,1
   2d960:	41000015 	stw	r4,0(r8)
   2d964:	45800115 	stw	r22,4(r8)
   2d968:	d8c02015 	stw	r3,128(sp)
   2d96c:	d8801f15 	stw	r2,124(sp)
   2d970:	010001c4 	movi	r4,7
   2d974:	20818e16 	blt	r4,r2,2dfb0 <___vfprintf_internal_r+0x1638>
   2d978:	42000204 	addi	r8,r8,8
   2d97c:	003e3106 	br	2d244 <___vfprintf_internal_r+0x8cc>
   2d980:	d9403317 	ldw	r5,204(sp)
   2d984:	00800044 	movi	r2,1
   2d988:	18c00044 	addi	r3,r3,1
   2d98c:	1141530e 	bge	r2,r5,2dedc <___vfprintf_internal_r+0x1564>
   2d990:	dc401f17 	ldw	r17,124(sp)
   2d994:	00800044 	movi	r2,1
   2d998:	40800115 	stw	r2,4(r8)
   2d99c:	8c400044 	addi	r17,r17,1
   2d9a0:	44000015 	stw	r16,0(r8)
   2d9a4:	d8c02015 	stw	r3,128(sp)
   2d9a8:	dc401f15 	stw	r17,124(sp)
   2d9ac:	008001c4 	movi	r2,7
   2d9b0:	14416b16 	blt	r2,r17,2df60 <___vfprintf_internal_r+0x15e8>
   2d9b4:	42000204 	addi	r8,r8,8
   2d9b8:	d8803717 	ldw	r2,220(sp)
   2d9bc:	d9003417 	ldw	r4,208(sp)
   2d9c0:	8c400044 	addi	r17,r17,1
   2d9c4:	10c7883a 	add	r3,r2,r3
   2d9c8:	40800115 	stw	r2,4(r8)
   2d9cc:	41000015 	stw	r4,0(r8)
   2d9d0:	d8c02015 	stw	r3,128(sp)
   2d9d4:	dc401f15 	stw	r17,124(sp)
   2d9d8:	008001c4 	movi	r2,7
   2d9dc:	14416916 	blt	r2,r17,2df84 <___vfprintf_internal_r+0x160c>
   2d9e0:	45800204 	addi	r22,r8,8
   2d9e4:	d9003617 	ldw	r4,216(sp)
   2d9e8:	d9403817 	ldw	r5,224(sp)
   2d9ec:	000d883a 	mov	r6,zero
   2d9f0:	000f883a 	mov	r7,zero
   2d9f4:	d8c03c15 	stw	r3,240(sp)
   2d9f8:	002807c0 	call	2807c <__eqdf2>
   2d9fc:	d8c03c17 	ldw	r3,240(sp)
   2da00:	1000bc26 	beq	r2,zero,2dcf4 <___vfprintf_internal_r+0x137c>
   2da04:	d9403317 	ldw	r5,204(sp)
   2da08:	84000044 	addi	r16,r16,1
   2da0c:	8c400044 	addi	r17,r17,1
   2da10:	28bfffc4 	addi	r2,r5,-1
   2da14:	1887883a 	add	r3,r3,r2
   2da18:	b0800115 	stw	r2,4(r22)
   2da1c:	b4000015 	stw	r16,0(r22)
   2da20:	d8c02015 	stw	r3,128(sp)
   2da24:	dc401f15 	stw	r17,124(sp)
   2da28:	008001c4 	movi	r2,7
   2da2c:	14414316 	blt	r2,r17,2df3c <___vfprintf_internal_r+0x15c4>
   2da30:	b5800204 	addi	r22,r22,8
   2da34:	d9003a17 	ldw	r4,232(sp)
   2da38:	df0022c4 	addi	fp,sp,139
   2da3c:	8c400044 	addi	r17,r17,1
   2da40:	20c7883a 	add	r3,r4,r3
   2da44:	b7000015 	stw	fp,0(r22)
   2da48:	b1000115 	stw	r4,4(r22)
   2da4c:	d8c02015 	stw	r3,128(sp)
   2da50:	dc401f15 	stw	r17,124(sp)
   2da54:	008001c4 	movi	r2,7
   2da58:	14400e16 	blt	r2,r17,2da94 <___vfprintf_internal_r+0x111c>
   2da5c:	b2000204 	addi	r8,r22,8
   2da60:	003e3a06 	br	2d34c <___vfprintf_internal_r+0x9d4>
   2da64:	01000134 	movhi	r4,4
   2da68:	2122ae84 	addi	r4,r4,-30022
   2da6c:	d9002b15 	stw	r4,172(sp)
   2da70:	d9002b17 	ldw	r4,172(sp)
   2da74:	1c07883a 	add	r3,r3,r16
   2da78:	44000115 	stw	r16,4(r8)
   2da7c:	41000015 	stw	r4,0(r8)
   2da80:	10800044 	addi	r2,r2,1
   2da84:	d8c02015 	stw	r3,128(sp)
   2da88:	d8801f15 	stw	r2,124(sp)
   2da8c:	010001c4 	movi	r4,7
   2da90:	20be2d0e 	bge	r4,r2,2d348 <___vfprintf_internal_r+0x9d0>
   2da94:	d9002c17 	ldw	r4,176(sp)
   2da98:	d9801e04 	addi	r6,sp,120
   2da9c:	b80b883a 	mov	r5,r23
   2daa0:	0032be40 	call	32be4 <__sprint_r>
   2daa4:	103cb61e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2daa8:	d8c02017 	ldw	r3,128(sp)
   2daac:	da000404 	addi	r8,sp,16
   2dab0:	003e2606 	br	2d34c <___vfprintf_internal_r+0x9d4>
   2dab4:	d9002c17 	ldw	r4,176(sp)
   2dab8:	d9801e04 	addi	r6,sp,120
   2dabc:	b80b883a 	mov	r5,r23
   2dac0:	0032be40 	call	32be4 <__sprint_r>
   2dac4:	103e5d26 	beq	r2,zero,2d43c <___vfprintf_internal_r+0xac4>
   2dac8:	003cad06 	br	2cd80 <___vfprintf_internal_r+0x408>
   2dacc:	d9002c17 	ldw	r4,176(sp)
   2dad0:	d9801e04 	addi	r6,sp,120
   2dad4:	b80b883a 	mov	r5,r23
   2dad8:	0032be40 	call	32be4 <__sprint_r>
   2dadc:	103ca81e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2dae0:	d8c02017 	ldw	r3,128(sp)
   2dae4:	da000404 	addi	r8,sp,16
   2dae8:	003e0b06 	br	2d318 <___vfprintf_internal_r+0x9a0>
   2daec:	d9002c17 	ldw	r4,176(sp)
   2daf0:	d9801e04 	addi	r6,sp,120
   2daf4:	b80b883a 	mov	r5,r23
   2daf8:	0032be40 	call	32be4 <__sprint_r>
   2dafc:	103ca01e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2db00:	d8c02017 	ldw	r3,128(sp)
   2db04:	da000404 	addi	r8,sp,16
   2db08:	003dbd06 	br	2d200 <___vfprintf_internal_r+0x888>
   2db0c:	d9002c17 	ldw	r4,176(sp)
   2db10:	d9801e04 	addi	r6,sp,120
   2db14:	b80b883a 	mov	r5,r23
   2db18:	0032be40 	call	32be4 <__sprint_r>
   2db1c:	103c981e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2db20:	d8c02017 	ldw	r3,128(sp)
   2db24:	da000404 	addi	r8,sp,16
   2db28:	003dc306 	br	2d238 <___vfprintf_internal_r+0x8c0>
   2db2c:	d8802917 	ldw	r2,164(sp)
   2db30:	d8002785 	stb	zero,158(sp)
   2db34:	103f0616 	blt	r2,zero,2d750 <___vfprintf_internal_r+0xdd8>
   2db38:	00ffdfc4 	movi	r3,-129
   2db3c:	9d84b03a 	or	r2,r19,r22
   2db40:	90e4703a 	and	r18,r18,r3
   2db44:	103c6b26 	beq	r2,zero,2ccf4 <___vfprintf_internal_r+0x37c>
   2db48:	0039883a 	mov	fp,zero
   2db4c:	003e7406 	br	2d520 <___vfprintf_internal_r+0xba8>
   2db50:	9080040c 	andi	r2,r18,16
   2db54:	1001b326 	beq	r2,zero,2e224 <___vfprintf_internal_r+0x18ac>
   2db58:	d9002d17 	ldw	r4,180(sp)
   2db5c:	d9402917 	ldw	r5,164(sp)
   2db60:	d8002785 	stb	zero,158(sp)
   2db64:	20800104 	addi	r2,r4,4
   2db68:	24c00017 	ldw	r19,0(r4)
   2db6c:	002d883a 	mov	r22,zero
   2db70:	2801b516 	blt	r5,zero,2e248 <___vfprintf_internal_r+0x18d0>
   2db74:	00ffdfc4 	movi	r3,-129
   2db78:	d8802d15 	stw	r2,180(sp)
   2db7c:	90e4703a 	and	r18,r18,r3
   2db80:	983d2726 	beq	r19,zero,2d020 <___vfprintf_internal_r+0x6a8>
   2db84:	0039883a 	mov	fp,zero
   2db88:	003d2a06 	br	2d034 <___vfprintf_internal_r+0x6bc>
   2db8c:	dc402617 	ldw	r17,152(sp)
   2db90:	0441d30e 	bge	zero,r17,2e2e0 <___vfprintf_internal_r+0x1968>
   2db94:	dc403217 	ldw	r17,200(sp)
   2db98:	d8803317 	ldw	r2,204(sp)
   2db9c:	1440010e 	bge	r2,r17,2dba4 <___vfprintf_internal_r+0x122c>
   2dba0:	1023883a 	mov	r17,r2
   2dba4:	04400a0e 	bge	zero,r17,2dbd0 <___vfprintf_internal_r+0x1258>
   2dba8:	d8801f17 	ldw	r2,124(sp)
   2dbac:	1c47883a 	add	r3,r3,r17
   2dbb0:	44000015 	stw	r16,0(r8)
   2dbb4:	10800044 	addi	r2,r2,1
   2dbb8:	44400115 	stw	r17,4(r8)
   2dbbc:	d8c02015 	stw	r3,128(sp)
   2dbc0:	d8801f15 	stw	r2,124(sp)
   2dbc4:	010001c4 	movi	r4,7
   2dbc8:	20826516 	blt	r4,r2,2e560 <___vfprintf_internal_r+0x1be8>
   2dbcc:	42000204 	addi	r8,r8,8
   2dbd0:	88026116 	blt	r17,zero,2e558 <___vfprintf_internal_r+0x1be0>
   2dbd4:	d9003217 	ldw	r4,200(sp)
   2dbd8:	2463c83a 	sub	r17,r4,r17
   2dbdc:	04407b0e 	bge	zero,r17,2ddcc <___vfprintf_internal_r+0x1454>
   2dbe0:	05800404 	movi	r22,16
   2dbe4:	d8801f17 	ldw	r2,124(sp)
   2dbe8:	b4419d0e 	bge	r22,r17,2e260 <___vfprintf_internal_r+0x18e8>
   2dbec:	01000134 	movhi	r4,4
   2dbf0:	2122ae84 	addi	r4,r4,-30022
   2dbf4:	d9002b15 	stw	r4,172(sp)
   2dbf8:	070001c4 	movi	fp,7
   2dbfc:	dcc02c17 	ldw	r19,176(sp)
   2dc00:	00000306 	br	2dc10 <___vfprintf_internal_r+0x1298>
   2dc04:	42000204 	addi	r8,r8,8
   2dc08:	8c7ffc04 	addi	r17,r17,-16
   2dc0c:	b441970e 	bge	r22,r17,2e26c <___vfprintf_internal_r+0x18f4>
   2dc10:	18c00404 	addi	r3,r3,16
   2dc14:	10800044 	addi	r2,r2,1
   2dc18:	45000015 	stw	r20,0(r8)
   2dc1c:	45800115 	stw	r22,4(r8)
   2dc20:	d8c02015 	stw	r3,128(sp)
   2dc24:	d8801f15 	stw	r2,124(sp)
   2dc28:	e0bff60e 	bge	fp,r2,2dc04 <___vfprintf_internal_r+0x128c>
   2dc2c:	d9801e04 	addi	r6,sp,120
   2dc30:	b80b883a 	mov	r5,r23
   2dc34:	9809883a 	mov	r4,r19
   2dc38:	0032be40 	call	32be4 <__sprint_r>
   2dc3c:	103c501e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2dc40:	d8c02017 	ldw	r3,128(sp)
   2dc44:	d8801f17 	ldw	r2,124(sp)
   2dc48:	da000404 	addi	r8,sp,16
   2dc4c:	003fee06 	br	2dc08 <___vfprintf_internal_r+0x1290>
   2dc50:	d9002c17 	ldw	r4,176(sp)
   2dc54:	d9801e04 	addi	r6,sp,120
   2dc58:	b80b883a 	mov	r5,r23
   2dc5c:	0032be40 	call	32be4 <__sprint_r>
   2dc60:	103c471e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2dc64:	d8c02017 	ldw	r3,128(sp)
   2dc68:	df002787 	ldb	fp,158(sp)
   2dc6c:	da000404 	addi	r8,sp,16
   2dc70:	003d5606 	br	2d1cc <___vfprintf_internal_r+0x854>
   2dc74:	9080040c 	andi	r2,r18,16
   2dc78:	10016126 	beq	r2,zero,2e200 <___vfprintf_internal_r+0x1888>
   2dc7c:	d8802d17 	ldw	r2,180(sp)
   2dc80:	14c00017 	ldw	r19,0(r2)
   2dc84:	10800104 	addi	r2,r2,4
   2dc88:	d8802d15 	stw	r2,180(sp)
   2dc8c:	982dd7fa 	srai	r22,r19,31
   2dc90:	b005883a 	mov	r2,r22
   2dc94:	003c8206 	br	2cea0 <___vfprintf_internal_r+0x528>
   2dc98:	9080040c 	andi	r2,r18,16
   2dc9c:	10003526 	beq	r2,zero,2dd74 <___vfprintf_internal_r+0x13fc>
   2dca0:	d9402d17 	ldw	r5,180(sp)
   2dca4:	d8c02917 	ldw	r3,164(sp)
   2dca8:	d8002785 	stb	zero,158(sp)
   2dcac:	28800104 	addi	r2,r5,4
   2dcb0:	2cc00017 	ldw	r19,0(r5)
   2dcb4:	002d883a 	mov	r22,zero
   2dcb8:	18003716 	blt	r3,zero,2dd98 <___vfprintf_internal_r+0x1420>
   2dcbc:	00ffdfc4 	movi	r3,-129
   2dcc0:	d8802d15 	stw	r2,180(sp)
   2dcc4:	90e4703a 	and	r18,r18,r3
   2dcc8:	0039883a 	mov	fp,zero
   2dccc:	983df326 	beq	r19,zero,2d49c <___vfprintf_internal_r+0xb24>
   2dcd0:	00800244 	movi	r2,9
   2dcd4:	14fc7b36 	bltu	r2,r19,2cec4 <___vfprintf_internal_r+0x54c>
   2dcd8:	d8c02817 	ldw	r3,160(sp)
   2dcdc:	dc001dc4 	addi	r16,sp,119
   2dce0:	9cc00c04 	addi	r19,r19,48
   2dce4:	1c07c83a 	sub	r3,r3,r16
   2dce8:	dcc01dc5 	stb	r19,119(sp)
   2dcec:	d8c02e15 	stw	r3,184(sp)
   2dcf0:	003ce806 	br	2d094 <___vfprintf_internal_r+0x71c>
   2dcf4:	d8803317 	ldw	r2,204(sp)
   2dcf8:	143fffc4 	addi	r16,r2,-1
   2dcfc:	043f4d0e 	bge	zero,r16,2da34 <___vfprintf_internal_r+0x10bc>
   2dd00:	07000404 	movi	fp,16
   2dd04:	e400810e 	bge	fp,r16,2df0c <___vfprintf_internal_r+0x1594>
   2dd08:	01400134 	movhi	r5,4
   2dd0c:	2962ae84 	addi	r5,r5,-30022
   2dd10:	d9402b15 	stw	r5,172(sp)
   2dd14:	01c001c4 	movi	r7,7
   2dd18:	dcc02c17 	ldw	r19,176(sp)
   2dd1c:	00000306 	br	2dd2c <___vfprintf_internal_r+0x13b4>
   2dd20:	b5800204 	addi	r22,r22,8
   2dd24:	843ffc04 	addi	r16,r16,-16
   2dd28:	e4007b0e 	bge	fp,r16,2df18 <___vfprintf_internal_r+0x15a0>
   2dd2c:	18c00404 	addi	r3,r3,16
   2dd30:	8c400044 	addi	r17,r17,1
   2dd34:	b5000015 	stw	r20,0(r22)
   2dd38:	b7000115 	stw	fp,4(r22)
   2dd3c:	d8c02015 	stw	r3,128(sp)
   2dd40:	dc401f15 	stw	r17,124(sp)
   2dd44:	3c7ff60e 	bge	r7,r17,2dd20 <___vfprintf_internal_r+0x13a8>
   2dd48:	d9801e04 	addi	r6,sp,120
   2dd4c:	b80b883a 	mov	r5,r23
   2dd50:	9809883a 	mov	r4,r19
   2dd54:	d9c03c15 	stw	r7,240(sp)
   2dd58:	0032be40 	call	32be4 <__sprint_r>
   2dd5c:	d9c03c17 	ldw	r7,240(sp)
   2dd60:	103c071e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2dd64:	d8c02017 	ldw	r3,128(sp)
   2dd68:	dc401f17 	ldw	r17,124(sp)
   2dd6c:	dd800404 	addi	r22,sp,16
   2dd70:	003fec06 	br	2dd24 <___vfprintf_internal_r+0x13ac>
   2dd74:	9080100c 	andi	r2,r18,64
   2dd78:	d8002785 	stb	zero,158(sp)
   2dd7c:	10010e26 	beq	r2,zero,2e1b8 <___vfprintf_internal_r+0x1840>
   2dd80:	d9002d17 	ldw	r4,180(sp)
   2dd84:	d9402917 	ldw	r5,164(sp)
   2dd88:	002d883a 	mov	r22,zero
   2dd8c:	20800104 	addi	r2,r4,4
   2dd90:	24c0000b 	ldhu	r19,0(r4)
   2dd94:	283fc90e 	bge	r5,zero,2dcbc <___vfprintf_internal_r+0x1344>
   2dd98:	d8802d15 	stw	r2,180(sp)
   2dd9c:	0039883a 	mov	fp,zero
   2dda0:	9d84b03a 	or	r2,r19,r22
   2dda4:	103c461e 	bne	r2,zero,2cec0 <___vfprintf_internal_r+0x548>
   2dda8:	00800044 	movi	r2,1
   2ddac:	003e6c06 	br	2d760 <___vfprintf_internal_r+0xde8>
   2ddb0:	d9002c17 	ldw	r4,176(sp)
   2ddb4:	d9801e04 	addi	r6,sp,120
   2ddb8:	b80b883a 	mov	r5,r23
   2ddbc:	0032be40 	call	32be4 <__sprint_r>
   2ddc0:	103bef1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2ddc4:	d8c02017 	ldw	r3,128(sp)
   2ddc8:	da000404 	addi	r8,sp,16
   2ddcc:	d9003217 	ldw	r4,200(sp)
   2ddd0:	d8802617 	ldw	r2,152(sp)
   2ddd4:	d9403317 	ldw	r5,204(sp)
   2ddd8:	8123883a 	add	r17,r16,r4
   2dddc:	11400216 	blt	r2,r5,2dde8 <___vfprintf_internal_r+0x1470>
   2dde0:	9100004c 	andi	r4,r18,1
   2dde4:	20000d26 	beq	r4,zero,2de1c <___vfprintf_internal_r+0x14a4>
   2dde8:	d9003717 	ldw	r4,220(sp)
   2ddec:	d9403417 	ldw	r5,208(sp)
   2ddf0:	1907883a 	add	r3,r3,r4
   2ddf4:	d9001f17 	ldw	r4,124(sp)
   2ddf8:	41400015 	stw	r5,0(r8)
   2ddfc:	d9403717 	ldw	r5,220(sp)
   2de00:	21000044 	addi	r4,r4,1
   2de04:	d8c02015 	stw	r3,128(sp)
   2de08:	41400115 	stw	r5,4(r8)
   2de0c:	d9001f15 	stw	r4,124(sp)
   2de10:	014001c4 	movi	r5,7
   2de14:	2901e816 	blt	r5,r4,2e5b8 <___vfprintf_internal_r+0x1c40>
   2de18:	42000204 	addi	r8,r8,8
   2de1c:	d9003317 	ldw	r4,204(sp)
   2de20:	8121883a 	add	r16,r16,r4
   2de24:	2085c83a 	sub	r2,r4,r2
   2de28:	8461c83a 	sub	r16,r16,r17
   2de2c:	1400010e 	bge	r2,r16,2de34 <___vfprintf_internal_r+0x14bc>
   2de30:	1021883a 	mov	r16,r2
   2de34:	04000a0e 	bge	zero,r16,2de60 <___vfprintf_internal_r+0x14e8>
   2de38:	d9001f17 	ldw	r4,124(sp)
   2de3c:	1c07883a 	add	r3,r3,r16
   2de40:	44400015 	stw	r17,0(r8)
   2de44:	21000044 	addi	r4,r4,1
   2de48:	44000115 	stw	r16,4(r8)
   2de4c:	d8c02015 	stw	r3,128(sp)
   2de50:	d9001f15 	stw	r4,124(sp)
   2de54:	014001c4 	movi	r5,7
   2de58:	2901fb16 	blt	r5,r4,2e648 <___vfprintf_internal_r+0x1cd0>
   2de5c:	42000204 	addi	r8,r8,8
   2de60:	8001f716 	blt	r16,zero,2e640 <___vfprintf_internal_r+0x1cc8>
   2de64:	1421c83a 	sub	r16,r2,r16
   2de68:	043d380e 	bge	zero,r16,2d34c <___vfprintf_internal_r+0x9d4>
   2de6c:	04400404 	movi	r17,16
   2de70:	d8801f17 	ldw	r2,124(sp)
   2de74:	8c3efb0e 	bge	r17,r16,2da64 <___vfprintf_internal_r+0x10ec>
   2de78:	01400134 	movhi	r5,4
   2de7c:	2962ae84 	addi	r5,r5,-30022
   2de80:	d9402b15 	stw	r5,172(sp)
   2de84:	058001c4 	movi	r22,7
   2de88:	dcc02c17 	ldw	r19,176(sp)
   2de8c:	00000306 	br	2de9c <___vfprintf_internal_r+0x1524>
   2de90:	42000204 	addi	r8,r8,8
   2de94:	843ffc04 	addi	r16,r16,-16
   2de98:	8c3ef50e 	bge	r17,r16,2da70 <___vfprintf_internal_r+0x10f8>
   2de9c:	18c00404 	addi	r3,r3,16
   2dea0:	10800044 	addi	r2,r2,1
   2dea4:	45000015 	stw	r20,0(r8)
   2dea8:	44400115 	stw	r17,4(r8)
   2deac:	d8c02015 	stw	r3,128(sp)
   2deb0:	d8801f15 	stw	r2,124(sp)
   2deb4:	b0bff60e 	bge	r22,r2,2de90 <___vfprintf_internal_r+0x1518>
   2deb8:	d9801e04 	addi	r6,sp,120
   2debc:	b80b883a 	mov	r5,r23
   2dec0:	9809883a 	mov	r4,r19
   2dec4:	0032be40 	call	32be4 <__sprint_r>
   2dec8:	103bad1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2decc:	d8c02017 	ldw	r3,128(sp)
   2ded0:	d8801f17 	ldw	r2,124(sp)
   2ded4:	da000404 	addi	r8,sp,16
   2ded8:	003fee06 	br	2de94 <___vfprintf_internal_r+0x151c>
   2dedc:	9088703a 	and	r4,r18,r2
   2dee0:	203eab1e 	bne	r4,zero,2d990 <___vfprintf_internal_r+0x1018>
   2dee4:	dc401f17 	ldw	r17,124(sp)
   2dee8:	40800115 	stw	r2,4(r8)
   2deec:	44000015 	stw	r16,0(r8)
   2def0:	8c400044 	addi	r17,r17,1
   2def4:	d8c02015 	stw	r3,128(sp)
   2def8:	dc401f15 	stw	r17,124(sp)
   2defc:	008001c4 	movi	r2,7
   2df00:	14400e16 	blt	r2,r17,2df3c <___vfprintf_internal_r+0x15c4>
   2df04:	45800204 	addi	r22,r8,8
   2df08:	003eca06 	br	2da34 <___vfprintf_internal_r+0x10bc>
   2df0c:	01000134 	movhi	r4,4
   2df10:	2122ae84 	addi	r4,r4,-30022
   2df14:	d9002b15 	stw	r4,172(sp)
   2df18:	d8802b17 	ldw	r2,172(sp)
   2df1c:	1c07883a 	add	r3,r3,r16
   2df20:	8c400044 	addi	r17,r17,1
   2df24:	b0800015 	stw	r2,0(r22)
   2df28:	b4000115 	stw	r16,4(r22)
   2df2c:	d8c02015 	stw	r3,128(sp)
   2df30:	dc401f15 	stw	r17,124(sp)
   2df34:	008001c4 	movi	r2,7
   2df38:	147ebd0e 	bge	r2,r17,2da30 <___vfprintf_internal_r+0x10b8>
   2df3c:	d9002c17 	ldw	r4,176(sp)
   2df40:	d9801e04 	addi	r6,sp,120
   2df44:	b80b883a 	mov	r5,r23
   2df48:	0032be40 	call	32be4 <__sprint_r>
   2df4c:	103b8c1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2df50:	d8c02017 	ldw	r3,128(sp)
   2df54:	dc401f17 	ldw	r17,124(sp)
   2df58:	dd800404 	addi	r22,sp,16
   2df5c:	003eb506 	br	2da34 <___vfprintf_internal_r+0x10bc>
   2df60:	d9002c17 	ldw	r4,176(sp)
   2df64:	d9801e04 	addi	r6,sp,120
   2df68:	b80b883a 	mov	r5,r23
   2df6c:	0032be40 	call	32be4 <__sprint_r>
   2df70:	103b831e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2df74:	d8c02017 	ldw	r3,128(sp)
   2df78:	dc401f17 	ldw	r17,124(sp)
   2df7c:	da000404 	addi	r8,sp,16
   2df80:	003e8d06 	br	2d9b8 <___vfprintf_internal_r+0x1040>
   2df84:	d9002c17 	ldw	r4,176(sp)
   2df88:	d9801e04 	addi	r6,sp,120
   2df8c:	b80b883a 	mov	r5,r23
   2df90:	0032be40 	call	32be4 <__sprint_r>
   2df94:	103b7a1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2df98:	d8c02017 	ldw	r3,128(sp)
   2df9c:	dc401f17 	ldw	r17,124(sp)
   2dfa0:	dd800404 	addi	r22,sp,16
   2dfa4:	003e8f06 	br	2d9e4 <___vfprintf_internal_r+0x106c>
   2dfa8:	0027883a 	mov	r19,zero
   2dfac:	003f4a06 	br	2dcd8 <___vfprintf_internal_r+0x1360>
   2dfb0:	d9002c17 	ldw	r4,176(sp)
   2dfb4:	d9801e04 	addi	r6,sp,120
   2dfb8:	b80b883a 	mov	r5,r23
   2dfbc:	0032be40 	call	32be4 <__sprint_r>
   2dfc0:	103b6f1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2dfc4:	d8c02017 	ldw	r3,128(sp)
   2dfc8:	da000404 	addi	r8,sp,16
   2dfcc:	003c9d06 	br	2d244 <___vfprintf_internal_r+0x8cc>
   2dfd0:	04e7c83a 	sub	r19,zero,r19
   2dfd4:	9804c03a 	cmpne	r2,r19,zero
   2dfd8:	05adc83a 	sub	r22,zero,r22
   2dfdc:	b0adc83a 	sub	r22,r22,r2
   2dfe0:	d8802917 	ldw	r2,164(sp)
   2dfe4:	07000b44 	movi	fp,45
   2dfe8:	df002785 	stb	fp,158(sp)
   2dfec:	10017b16 	blt	r2,zero,2e5dc <___vfprintf_internal_r+0x1c64>
   2dff0:	00bfdfc4 	movi	r2,-129
   2dff4:	90a4703a 	and	r18,r18,r2
   2dff8:	003bb106 	br	2cec0 <___vfprintf_internal_r+0x548>
   2dffc:	d9003617 	ldw	r4,216(sp)
   2e000:	d9403817 	ldw	r5,224(sp)
   2e004:	da003d15 	stw	r8,244(sp)
   2e008:	00257840 	call	25784 <__fpclassifyd>
   2e00c:	da003d17 	ldw	r8,244(sp)
   2e010:	1000f026 	beq	r2,zero,2e3d4 <___vfprintf_internal_r+0x1a5c>
   2e014:	d9002917 	ldw	r4,164(sp)
   2e018:	05bff7c4 	movi	r22,-33
   2e01c:	00bfffc4 	movi	r2,-1
   2e020:	8dac703a 	and	r22,r17,r22
   2e024:	20820026 	beq	r4,r2,2e828 <___vfprintf_internal_r+0x1eb0>
   2e028:	008011c4 	movi	r2,71
   2e02c:	b081f726 	beq	r22,r2,2e80c <___vfprintf_internal_r+0x1e94>
   2e030:	d9003817 	ldw	r4,224(sp)
   2e034:	90c04014 	ori	r3,r18,256
   2e038:	d8c02b15 	stw	r3,172(sp)
   2e03c:	20021516 	blt	r4,zero,2e894 <___vfprintf_internal_r+0x1f1c>
   2e040:	dcc03817 	ldw	r19,224(sp)
   2e044:	d8002a05 	stb	zero,168(sp)
   2e048:	00801984 	movi	r2,102
   2e04c:	8881f926 	beq	r17,r2,2e834 <___vfprintf_internal_r+0x1ebc>
   2e050:	00801184 	movi	r2,70
   2e054:	88821c26 	beq	r17,r2,2e8c8 <___vfprintf_internal_r+0x1f50>
   2e058:	00801144 	movi	r2,69
   2e05c:	b081ef26 	beq	r22,r2,2e81c <___vfprintf_internal_r+0x1ea4>
   2e060:	d8c02917 	ldw	r3,164(sp)
   2e064:	d8802104 	addi	r2,sp,132
   2e068:	d8800315 	stw	r2,12(sp)
   2e06c:	d9403617 	ldw	r5,216(sp)
   2e070:	d8802504 	addi	r2,sp,148
   2e074:	d9002c17 	ldw	r4,176(sp)
   2e078:	d8800215 	stw	r2,8(sp)
   2e07c:	d8802604 	addi	r2,sp,152
   2e080:	d8c00015 	stw	r3,0(sp)
   2e084:	d8800115 	stw	r2,4(sp)
   2e088:	01c00084 	movi	r7,2
   2e08c:	980d883a 	mov	r6,r19
   2e090:	d8c03c15 	stw	r3,240(sp)
   2e094:	da003d15 	stw	r8,244(sp)
   2e098:	002f1d00 	call	2f1d0 <_dtoa_r>
   2e09c:	1021883a 	mov	r16,r2
   2e0a0:	008019c4 	movi	r2,103
   2e0a4:	d8c03c17 	ldw	r3,240(sp)
   2e0a8:	da003d17 	ldw	r8,244(sp)
   2e0ac:	88817126 	beq	r17,r2,2e674 <___vfprintf_internal_r+0x1cfc>
   2e0b0:	008011c4 	movi	r2,71
   2e0b4:	88829226 	beq	r17,r2,2eb00 <___vfprintf_internal_r+0x2188>
   2e0b8:	80f9883a 	add	fp,r16,r3
   2e0bc:	d9003617 	ldw	r4,216(sp)
   2e0c0:	000d883a 	mov	r6,zero
   2e0c4:	000f883a 	mov	r7,zero
   2e0c8:	980b883a 	mov	r5,r19
   2e0cc:	da003d15 	stw	r8,244(sp)
   2e0d0:	002807c0 	call	2807c <__eqdf2>
   2e0d4:	da003d17 	ldw	r8,244(sp)
   2e0d8:	10018d26 	beq	r2,zero,2e710 <___vfprintf_internal_r+0x1d98>
   2e0dc:	d8802117 	ldw	r2,132(sp)
   2e0e0:	1700062e 	bgeu	r2,fp,2e0fc <___vfprintf_internal_r+0x1784>
   2e0e4:	01000c04 	movi	r4,48
   2e0e8:	10c00044 	addi	r3,r2,1
   2e0ec:	d8c02115 	stw	r3,132(sp)
   2e0f0:	11000005 	stb	r4,0(r2)
   2e0f4:	d8802117 	ldw	r2,132(sp)
   2e0f8:	173ffb36 	bltu	r2,fp,2e0e8 <___vfprintf_internal_r+0x1770>
   2e0fc:	1405c83a 	sub	r2,r2,r16
   2e100:	d8803315 	stw	r2,204(sp)
   2e104:	008011c4 	movi	r2,71
   2e108:	b0817626 	beq	r22,r2,2e6e4 <___vfprintf_internal_r+0x1d6c>
   2e10c:	00801944 	movi	r2,101
   2e110:	1442810e 	bge	r2,r17,2eb18 <___vfprintf_internal_r+0x21a0>
   2e114:	d8c02617 	ldw	r3,152(sp)
   2e118:	00801984 	movi	r2,102
   2e11c:	d8c03215 	stw	r3,200(sp)
   2e120:	8881fe26 	beq	r17,r2,2e91c <___vfprintf_internal_r+0x1fa4>
   2e124:	d8c03217 	ldw	r3,200(sp)
   2e128:	d9003317 	ldw	r4,204(sp)
   2e12c:	1901dd16 	blt	r3,r4,2e8a4 <___vfprintf_internal_r+0x1f2c>
   2e130:	9480004c 	andi	r18,r18,1
   2e134:	90022b1e 	bne	r18,zero,2e9e4 <___vfprintf_internal_r+0x206c>
   2e138:	1805883a 	mov	r2,r3
   2e13c:	18028016 	blt	r3,zero,2eb40 <___vfprintf_internal_r+0x21c8>
   2e140:	d8c03217 	ldw	r3,200(sp)
   2e144:	044019c4 	movi	r17,103
   2e148:	d8c02e15 	stw	r3,184(sp)
   2e14c:	df002a07 	ldb	fp,168(sp)
   2e150:	e001531e 	bne	fp,zero,2e6a0 <___vfprintf_internal_r+0x1d28>
   2e154:	df002783 	ldbu	fp,158(sp)
   2e158:	d8802a15 	stw	r2,168(sp)
   2e15c:	dc802b17 	ldw	r18,172(sp)
   2e160:	d8002915 	stw	zero,164(sp)
   2e164:	003bd106 	br	2d0ac <___vfprintf_internal_r+0x734>
   2e168:	d8802d17 	ldw	r2,180(sp)
   2e16c:	d8c02d17 	ldw	r3,180(sp)
   2e170:	d9002d17 	ldw	r4,180(sp)
   2e174:	10800017 	ldw	r2,0(r2)
   2e178:	18c00117 	ldw	r3,4(r3)
   2e17c:	21000204 	addi	r4,r4,8
   2e180:	d8803615 	stw	r2,216(sp)
   2e184:	d8c03815 	stw	r3,224(sp)
   2e188:	d9002d15 	stw	r4,180(sp)
   2e18c:	003b7506 	br	2cf64 <___vfprintf_internal_r+0x5ec>
   2e190:	ac400007 	ldb	r17,0(r21)
   2e194:	003a5906 	br	2cafc <___vfprintf_internal_r+0x184>
   2e198:	9080100c 	andi	r2,r18,64
   2e19c:	1000a826 	beq	r2,zero,2e440 <___vfprintf_internal_r+0x1ac8>
   2e1a0:	d9002d17 	ldw	r4,180(sp)
   2e1a4:	002d883a 	mov	r22,zero
   2e1a8:	24c0000b 	ldhu	r19,0(r4)
   2e1ac:	21000104 	addi	r4,r4,4
   2e1b0:	d9002d15 	stw	r4,180(sp)
   2e1b4:	003ccb06 	br	2d4e4 <___vfprintf_internal_r+0xb6c>
   2e1b8:	d8c02d17 	ldw	r3,180(sp)
   2e1bc:	d9002917 	ldw	r4,164(sp)
   2e1c0:	002d883a 	mov	r22,zero
   2e1c4:	18800104 	addi	r2,r3,4
   2e1c8:	1cc00017 	ldw	r19,0(r3)
   2e1cc:	203ebb0e 	bge	r4,zero,2dcbc <___vfprintf_internal_r+0x1344>
   2e1d0:	003ef106 	br	2dd98 <___vfprintf_internal_r+0x1420>
   2e1d4:	9080040c 	andi	r2,r18,16
   2e1d8:	1000921e 	bne	r2,zero,2e424 <___vfprintf_internal_r+0x1aac>
   2e1dc:	9480100c 	andi	r18,r18,64
   2e1e0:	90013926 	beq	r18,zero,2e6c8 <___vfprintf_internal_r+0x1d50>
   2e1e4:	d9002d17 	ldw	r4,180(sp)
   2e1e8:	d9402f17 	ldw	r5,188(sp)
   2e1ec:	20800017 	ldw	r2,0(r4)
   2e1f0:	21000104 	addi	r4,r4,4
   2e1f4:	d9002d15 	stw	r4,180(sp)
   2e1f8:	1140000d 	sth	r5,0(r2)
   2e1fc:	003a1606 	br	2ca58 <___vfprintf_internal_r+0xe0>
   2e200:	9080100c 	andi	r2,r18,64
   2e204:	10008026 	beq	r2,zero,2e408 <___vfprintf_internal_r+0x1a90>
   2e208:	d8c02d17 	ldw	r3,180(sp)
   2e20c:	1cc0000f 	ldh	r19,0(r3)
   2e210:	18c00104 	addi	r3,r3,4
   2e214:	d8c02d15 	stw	r3,180(sp)
   2e218:	982dd7fa 	srai	r22,r19,31
   2e21c:	b005883a 	mov	r2,r22
   2e220:	003b1f06 	br	2cea0 <___vfprintf_internal_r+0x528>
   2e224:	9080100c 	andi	r2,r18,64
   2e228:	d8002785 	stb	zero,158(sp)
   2e22c:	10008a1e 	bne	r2,zero,2e458 <___vfprintf_internal_r+0x1ae0>
   2e230:	d9402d17 	ldw	r5,180(sp)
   2e234:	d8c02917 	ldw	r3,164(sp)
   2e238:	002d883a 	mov	r22,zero
   2e23c:	28800104 	addi	r2,r5,4
   2e240:	2cc00017 	ldw	r19,0(r5)
   2e244:	183e4b0e 	bge	r3,zero,2db74 <___vfprintf_internal_r+0x11fc>
   2e248:	9d86b03a 	or	r3,r19,r22
   2e24c:	d8802d15 	stw	r2,180(sp)
   2e250:	183e4c1e 	bne	r3,zero,2db84 <___vfprintf_internal_r+0x120c>
   2e254:	0039883a 	mov	fp,zero
   2e258:	0005883a 	mov	r2,zero
   2e25c:	003d4006 	br	2d760 <___vfprintf_internal_r+0xde8>
   2e260:	01400134 	movhi	r5,4
   2e264:	2962ae84 	addi	r5,r5,-30022
   2e268:	d9402b15 	stw	r5,172(sp)
   2e26c:	d9402b17 	ldw	r5,172(sp)
   2e270:	1c47883a 	add	r3,r3,r17
   2e274:	10800044 	addi	r2,r2,1
   2e278:	41400015 	stw	r5,0(r8)
   2e27c:	44400115 	stw	r17,4(r8)
   2e280:	d8c02015 	stw	r3,128(sp)
   2e284:	d8801f15 	stw	r2,124(sp)
   2e288:	010001c4 	movi	r4,7
   2e28c:	20bec816 	blt	r4,r2,2ddb0 <___vfprintf_internal_r+0x1438>
   2e290:	42000204 	addi	r8,r8,8
   2e294:	003ecd06 	br	2ddcc <___vfprintf_internal_r+0x1454>
   2e298:	d9002917 	ldw	r4,164(sp)
   2e29c:	d8002785 	stb	zero,158(sp)
   2e2a0:	203d2d16 	blt	r4,zero,2d758 <___vfprintf_internal_r+0xde0>
   2e2a4:	00bfdfc4 	movi	r2,-129
   2e2a8:	90a4703a 	and	r18,r18,r2
   2e2ac:	003a9106 	br	2ccf4 <___vfprintf_internal_r+0x37c>
   2e2b0:	01000134 	movhi	r4,4
   2e2b4:	2122ae84 	addi	r4,r4,-30022
   2e2b8:	d9002b15 	stw	r4,172(sp)
   2e2bc:	003c0c06 	br	2d2f0 <___vfprintf_internal_r+0x978>
   2e2c0:	d9002c17 	ldw	r4,176(sp)
   2e2c4:	d9801e04 	addi	r6,sp,120
   2e2c8:	b80b883a 	mov	r5,r23
   2e2cc:	0032be40 	call	32be4 <__sprint_r>
   2e2d0:	103aab1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e2d4:	d8c02017 	ldw	r3,128(sp)
   2e2d8:	da000404 	addi	r8,sp,16
   2e2dc:	003d4106 	br	2d7e4 <___vfprintf_internal_r+0xe6c>
   2e2e0:	d8801f17 	ldw	r2,124(sp)
   2e2e4:	01400134 	movhi	r5,4
   2e2e8:	01000044 	movi	r4,1
   2e2ec:	18c00044 	addi	r3,r3,1
   2e2f0:	10800044 	addi	r2,r2,1
   2e2f4:	2962ae04 	addi	r5,r5,-30024
   2e2f8:	41000115 	stw	r4,4(r8)
   2e2fc:	41400015 	stw	r5,0(r8)
   2e300:	d8c02015 	stw	r3,128(sp)
   2e304:	d8801f15 	stw	r2,124(sp)
   2e308:	010001c4 	movi	r4,7
   2e30c:	20805c16 	blt	r4,r2,2e480 <___vfprintf_internal_r+0x1b08>
   2e310:	42000204 	addi	r8,r8,8
   2e314:	8800041e 	bne	r17,zero,2e328 <___vfprintf_internal_r+0x19b0>
   2e318:	d8803317 	ldw	r2,204(sp)
   2e31c:	1000021e 	bne	r2,zero,2e328 <___vfprintf_internal_r+0x19b0>
   2e320:	9080004c 	andi	r2,r18,1
   2e324:	103c0926 	beq	r2,zero,2d34c <___vfprintf_internal_r+0x9d4>
   2e328:	d9003717 	ldw	r4,220(sp)
   2e32c:	d8801f17 	ldw	r2,124(sp)
   2e330:	d9403417 	ldw	r5,208(sp)
   2e334:	20c7883a 	add	r3,r4,r3
   2e338:	10800044 	addi	r2,r2,1
   2e33c:	41000115 	stw	r4,4(r8)
   2e340:	41400015 	stw	r5,0(r8)
   2e344:	d8c02015 	stw	r3,128(sp)
   2e348:	d8801f15 	stw	r2,124(sp)
   2e34c:	010001c4 	movi	r4,7
   2e350:	20812116 	blt	r4,r2,2e7d8 <___vfprintf_internal_r+0x1e60>
   2e354:	42000204 	addi	r8,r8,8
   2e358:	0463c83a 	sub	r17,zero,r17
   2e35c:	0440730e 	bge	zero,r17,2e52c <___vfprintf_internal_r+0x1bb4>
   2e360:	05800404 	movi	r22,16
   2e364:	b440860e 	bge	r22,r17,2e580 <___vfprintf_internal_r+0x1c08>
   2e368:	01400134 	movhi	r5,4
   2e36c:	2962ae84 	addi	r5,r5,-30022
   2e370:	d9402b15 	stw	r5,172(sp)
   2e374:	070001c4 	movi	fp,7
   2e378:	dcc02c17 	ldw	r19,176(sp)
   2e37c:	00000306 	br	2e38c <___vfprintf_internal_r+0x1a14>
   2e380:	42000204 	addi	r8,r8,8
   2e384:	8c7ffc04 	addi	r17,r17,-16
   2e388:	b440800e 	bge	r22,r17,2e58c <___vfprintf_internal_r+0x1c14>
   2e38c:	18c00404 	addi	r3,r3,16
   2e390:	10800044 	addi	r2,r2,1
   2e394:	45000015 	stw	r20,0(r8)
   2e398:	45800115 	stw	r22,4(r8)
   2e39c:	d8c02015 	stw	r3,128(sp)
   2e3a0:	d8801f15 	stw	r2,124(sp)
   2e3a4:	e0bff60e 	bge	fp,r2,2e380 <___vfprintf_internal_r+0x1a08>
   2e3a8:	d9801e04 	addi	r6,sp,120
   2e3ac:	b80b883a 	mov	r5,r23
   2e3b0:	9809883a 	mov	r4,r19
   2e3b4:	0032be40 	call	32be4 <__sprint_r>
   2e3b8:	103a711e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e3bc:	d8c02017 	ldw	r3,128(sp)
   2e3c0:	d8801f17 	ldw	r2,124(sp)
   2e3c4:	da000404 	addi	r8,sp,16
   2e3c8:	003fee06 	br	2e384 <___vfprintf_internal_r+0x1a0c>
   2e3cc:	00bfffc4 	movi	r2,-1
   2e3d0:	003a6f06 	br	2cd90 <___vfprintf_internal_r+0x418>
   2e3d4:	008011c4 	movi	r2,71
   2e3d8:	1440b816 	blt	r2,r17,2e6bc <___vfprintf_internal_r+0x1d44>
   2e3dc:	04000134 	movhi	r16,4
   2e3e0:	8422a004 	addi	r16,r16,-30080
   2e3e4:	00c000c4 	movi	r3,3
   2e3e8:	00bfdfc4 	movi	r2,-129
   2e3ec:	d8c02a15 	stw	r3,168(sp)
   2e3f0:	90a4703a 	and	r18,r18,r2
   2e3f4:	df002783 	ldbu	fp,158(sp)
   2e3f8:	d8c02e15 	stw	r3,184(sp)
   2e3fc:	d8002915 	stw	zero,164(sp)
   2e400:	d8003215 	stw	zero,200(sp)
   2e404:	003b2906 	br	2d0ac <___vfprintf_internal_r+0x734>
   2e408:	d9002d17 	ldw	r4,180(sp)
   2e40c:	24c00017 	ldw	r19,0(r4)
   2e410:	21000104 	addi	r4,r4,4
   2e414:	d9002d15 	stw	r4,180(sp)
   2e418:	982dd7fa 	srai	r22,r19,31
   2e41c:	b005883a 	mov	r2,r22
   2e420:	003a9f06 	br	2cea0 <___vfprintf_internal_r+0x528>
   2e424:	d9402d17 	ldw	r5,180(sp)
   2e428:	d8c02f17 	ldw	r3,188(sp)
   2e42c:	28800017 	ldw	r2,0(r5)
   2e430:	29400104 	addi	r5,r5,4
   2e434:	d9402d15 	stw	r5,180(sp)
   2e438:	10c00015 	stw	r3,0(r2)
   2e43c:	00398606 	br	2ca58 <___vfprintf_internal_r+0xe0>
   2e440:	d9402d17 	ldw	r5,180(sp)
   2e444:	002d883a 	mov	r22,zero
   2e448:	2cc00017 	ldw	r19,0(r5)
   2e44c:	29400104 	addi	r5,r5,4
   2e450:	d9402d15 	stw	r5,180(sp)
   2e454:	003c2306 	br	2d4e4 <___vfprintf_internal_r+0xb6c>
   2e458:	d8c02d17 	ldw	r3,180(sp)
   2e45c:	d9002917 	ldw	r4,164(sp)
   2e460:	002d883a 	mov	r22,zero
   2e464:	18800104 	addi	r2,r3,4
   2e468:	1cc0000b 	ldhu	r19,0(r3)
   2e46c:	203dc10e 	bge	r4,zero,2db74 <___vfprintf_internal_r+0x11fc>
   2e470:	003f7506 	br	2e248 <___vfprintf_internal_r+0x18d0>
   2e474:	04000134 	movhi	r16,4
   2e478:	84229e04 	addi	r16,r16,-30088
   2e47c:	003acc06 	br	2cfb0 <___vfprintf_internal_r+0x638>
   2e480:	d9002c17 	ldw	r4,176(sp)
   2e484:	d9801e04 	addi	r6,sp,120
   2e488:	b80b883a 	mov	r5,r23
   2e48c:	0032be40 	call	32be4 <__sprint_r>
   2e490:	103a3b1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e494:	dc402617 	ldw	r17,152(sp)
   2e498:	d8c02017 	ldw	r3,128(sp)
   2e49c:	da000404 	addi	r8,sp,16
   2e4a0:	003f9c06 	br	2e314 <___vfprintf_internal_r+0x199c>
   2e4a4:	ac400043 	ldbu	r17,1(r21)
   2e4a8:	94800814 	ori	r18,r18,32
   2e4ac:	ad400044 	addi	r21,r21,1
   2e4b0:	8c403fcc 	andi	r17,r17,255
   2e4b4:	8c40201c 	xori	r17,r17,128
   2e4b8:	8c7fe004 	addi	r17,r17,-128
   2e4bc:	00398f06 	br	2cafc <___vfprintf_internal_r+0x184>
   2e4c0:	d8c02d15 	stw	r3,180(sp)
   2e4c4:	0039883a 	mov	fp,zero
   2e4c8:	003e3506 	br	2dda0 <___vfprintf_internal_r+0x1428>
   2e4cc:	d9002c17 	ldw	r4,176(sp)
   2e4d0:	d9801e04 	addi	r6,sp,120
   2e4d4:	b80b883a 	mov	r5,r23
   2e4d8:	0032be40 	call	32be4 <__sprint_r>
   2e4dc:	103a281e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e4e0:	d8c02017 	ldw	r3,128(sp)
   2e4e4:	da000404 	addi	r8,sp,16
   2e4e8:	003cd006 	br	2d82c <___vfprintf_internal_r+0xeb4>
   2e4ec:	8009883a 	mov	r4,r16
   2e4f0:	da003d15 	stw	r8,244(sp)
   2e4f4:	002c6840 	call	2c684 <strlen>
   2e4f8:	d8802e15 	stw	r2,184(sp)
   2e4fc:	da003d17 	ldw	r8,244(sp)
   2e500:	103c340e 	bge	r2,zero,2d5d4 <___vfprintf_internal_r+0xc5c>
   2e504:	0005883a 	mov	r2,zero
   2e508:	003c3206 	br	2d5d4 <___vfprintf_internal_r+0xc5c>
   2e50c:	d9002c17 	ldw	r4,176(sp)
   2e510:	d9801e04 	addi	r6,sp,120
   2e514:	b80b883a 	mov	r5,r23
   2e518:	0032be40 	call	32be4 <__sprint_r>
   2e51c:	103a181e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e520:	d8c02017 	ldw	r3,128(sp)
   2e524:	d8801f17 	ldw	r2,124(sp)
   2e528:	da000404 	addi	r8,sp,16
   2e52c:	d9403317 	ldw	r5,204(sp)
   2e530:	10800044 	addi	r2,r2,1
   2e534:	44000015 	stw	r16,0(r8)
   2e538:	28c7883a 	add	r3,r5,r3
   2e53c:	003b7d06 	br	2d334 <___vfprintf_internal_r+0x9bc>
   2e540:	01000134 	movhi	r4,4
   2e544:	2122b284 	addi	r4,r4,-30006
   2e548:	d9003515 	stw	r4,212(sp)
   2e54c:	003b1406 	br	2d1a0 <___vfprintf_internal_r+0x828>
   2e550:	013fffc4 	movi	r4,-1
   2e554:	003a3506 	br	2ce2c <___vfprintf_internal_r+0x4b4>
   2e558:	0023883a 	mov	r17,zero
   2e55c:	003d9d06 	br	2dbd4 <___vfprintf_internal_r+0x125c>
   2e560:	d9002c17 	ldw	r4,176(sp)
   2e564:	d9801e04 	addi	r6,sp,120
   2e568:	b80b883a 	mov	r5,r23
   2e56c:	0032be40 	call	32be4 <__sprint_r>
   2e570:	103a031e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e574:	d8c02017 	ldw	r3,128(sp)
   2e578:	da000404 	addi	r8,sp,16
   2e57c:	003d9406 	br	2dbd0 <___vfprintf_internal_r+0x1258>
   2e580:	01000134 	movhi	r4,4
   2e584:	2122ae84 	addi	r4,r4,-30022
   2e588:	d9002b15 	stw	r4,172(sp)
   2e58c:	d9002b17 	ldw	r4,172(sp)
   2e590:	1c47883a 	add	r3,r3,r17
   2e594:	10800044 	addi	r2,r2,1
   2e598:	41000015 	stw	r4,0(r8)
   2e59c:	44400115 	stw	r17,4(r8)
   2e5a0:	d8c02015 	stw	r3,128(sp)
   2e5a4:	d8801f15 	stw	r2,124(sp)
   2e5a8:	010001c4 	movi	r4,7
   2e5ac:	20bfd716 	blt	r4,r2,2e50c <___vfprintf_internal_r+0x1b94>
   2e5b0:	42000204 	addi	r8,r8,8
   2e5b4:	003fdd06 	br	2e52c <___vfprintf_internal_r+0x1bb4>
   2e5b8:	d9002c17 	ldw	r4,176(sp)
   2e5bc:	d9801e04 	addi	r6,sp,120
   2e5c0:	b80b883a 	mov	r5,r23
   2e5c4:	0032be40 	call	32be4 <__sprint_r>
   2e5c8:	1039ed1e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e5cc:	d8802617 	ldw	r2,152(sp)
   2e5d0:	d8c02017 	ldw	r3,128(sp)
   2e5d4:	da000404 	addi	r8,sp,16
   2e5d8:	003e1006 	br	2de1c <___vfprintf_internal_r+0x14a4>
   2e5dc:	00800044 	movi	r2,1
   2e5e0:	10803fcc 	andi	r2,r2,255
   2e5e4:	00c00044 	movi	r3,1
   2e5e8:	10fa3526 	beq	r2,r3,2cec0 <___vfprintf_internal_r+0x548>
   2e5ec:	00c00084 	movi	r3,2
   2e5f0:	10fbcb26 	beq	r2,r3,2d520 <___vfprintf_internal_r+0xba8>
   2e5f4:	003a8f06 	br	2d034 <___vfprintf_internal_r+0x6bc>
   2e5f8:	01000134 	movhi	r4,4
   2e5fc:	2122b284 	addi	r4,r4,-30006
   2e600:	d9003515 	stw	r4,212(sp)
   2e604:	003b7606 	br	2d3e0 <___vfprintf_internal_r+0xa68>
   2e608:	d8802917 	ldw	r2,164(sp)
   2e60c:	00c00184 	movi	r3,6
   2e610:	1880012e 	bgeu	r3,r2,2e618 <___vfprintf_internal_r+0x1ca0>
   2e614:	1805883a 	mov	r2,r3
   2e618:	d8802e15 	stw	r2,184(sp)
   2e61c:	1000ef16 	blt	r2,zero,2e9dc <___vfprintf_internal_r+0x2064>
   2e620:	04000134 	movhi	r16,4
   2e624:	d8802a15 	stw	r2,168(sp)
   2e628:	dcc02d15 	stw	r19,180(sp)
   2e62c:	d8002915 	stw	zero,164(sp)
   2e630:	d8003215 	stw	zero,200(sp)
   2e634:	8422ac04 	addi	r16,r16,-30032
   2e638:	0039883a 	mov	fp,zero
   2e63c:	003aa206 	br	2d0c8 <___vfprintf_internal_r+0x750>
   2e640:	0021883a 	mov	r16,zero
   2e644:	003e0706 	br	2de64 <___vfprintf_internal_r+0x14ec>
   2e648:	d9002c17 	ldw	r4,176(sp)
   2e64c:	d9801e04 	addi	r6,sp,120
   2e650:	b80b883a 	mov	r5,r23
   2e654:	0032be40 	call	32be4 <__sprint_r>
   2e658:	1039c91e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e65c:	d8802617 	ldw	r2,152(sp)
   2e660:	d9403317 	ldw	r5,204(sp)
   2e664:	d8c02017 	ldw	r3,128(sp)
   2e668:	da000404 	addi	r8,sp,16
   2e66c:	2885c83a 	sub	r2,r5,r2
   2e670:	003dfb06 	br	2de60 <___vfprintf_internal_r+0x14e8>
   2e674:	9080004c 	andi	r2,r18,1
   2e678:	103e8f1e 	bne	r2,zero,2e0b8 <___vfprintf_internal_r+0x1740>
   2e67c:	d8802117 	ldw	r2,132(sp)
   2e680:	003e9e06 	br	2e0fc <___vfprintf_internal_r+0x1784>
   2e684:	1025883a 	mov	r18,r2
   2e688:	0039883a 	mov	fp,zero
   2e68c:	00800084 	movi	r2,2
   2e690:	003fd306 	br	2e5e0 <___vfprintf_internal_r+0x1c68>
   2e694:	07000b44 	movi	fp,45
   2e698:	df002785 	stb	fp,158(sp)
   2e69c:	003a4006 	br	2cfa0 <___vfprintf_internal_r+0x628>
   2e6a0:	00c00b44 	movi	r3,45
   2e6a4:	d8c02785 	stb	r3,158(sp)
   2e6a8:	d8802a15 	stw	r2,168(sp)
   2e6ac:	dc802b17 	ldw	r18,172(sp)
   2e6b0:	d8002915 	stw	zero,164(sp)
   2e6b4:	07000b44 	movi	fp,45
   2e6b8:	003a8006 	br	2d0bc <___vfprintf_internal_r+0x744>
   2e6bc:	04000134 	movhi	r16,4
   2e6c0:	8422a104 	addi	r16,r16,-30076
   2e6c4:	003f4706 	br	2e3e4 <___vfprintf_internal_r+0x1a6c>
   2e6c8:	d8c02d17 	ldw	r3,180(sp)
   2e6cc:	d9002f17 	ldw	r4,188(sp)
   2e6d0:	18800017 	ldw	r2,0(r3)
   2e6d4:	18c00104 	addi	r3,r3,4
   2e6d8:	d8c02d15 	stw	r3,180(sp)
   2e6dc:	11000015 	stw	r4,0(r2)
   2e6e0:	0038dd06 	br	2ca58 <___vfprintf_internal_r+0xe0>
   2e6e4:	dd802617 	ldw	r22,152(sp)
   2e6e8:	00bfff44 	movi	r2,-3
   2e6ec:	b0801c16 	blt	r22,r2,2e760 <___vfprintf_internal_r+0x1de8>
   2e6f0:	d9402917 	ldw	r5,164(sp)
   2e6f4:	2d801a16 	blt	r5,r22,2e760 <___vfprintf_internal_r+0x1de8>
   2e6f8:	dd803215 	stw	r22,200(sp)
   2e6fc:	003e8906 	br	2e124 <___vfprintf_internal_r+0x17ac>
   2e700:	01000134 	movhi	r4,4
   2e704:	2122ae84 	addi	r4,r4,-30022
   2e708:	d9002b15 	stw	r4,172(sp)
   2e70c:	003c9106 	br	2d954 <___vfprintf_internal_r+0xfdc>
   2e710:	e005883a 	mov	r2,fp
   2e714:	003e7906 	br	2e0fc <___vfprintf_internal_r+0x1784>
   2e718:	d9402917 	ldw	r5,164(sp)
   2e71c:	df002783 	ldbu	fp,158(sp)
   2e720:	dcc02d15 	stw	r19,180(sp)
   2e724:	d9402a15 	stw	r5,168(sp)
   2e728:	d9402e15 	stw	r5,184(sp)
   2e72c:	d8002915 	stw	zero,164(sp)
   2e730:	d8003215 	stw	zero,200(sp)
   2e734:	003a5d06 	br	2d0ac <___vfprintf_internal_r+0x734>
   2e738:	9080004c 	andi	r2,r18,1
   2e73c:	0039883a 	mov	fp,zero
   2e740:	10000426 	beq	r2,zero,2e754 <___vfprintf_internal_r+0x1ddc>
   2e744:	00800c04 	movi	r2,48
   2e748:	dc001dc4 	addi	r16,sp,119
   2e74c:	d8801dc5 	stb	r2,119(sp)
   2e750:	003b8006 	br	2d554 <___vfprintf_internal_r+0xbdc>
   2e754:	d8002e15 	stw	zero,184(sp)
   2e758:	dc001e04 	addi	r16,sp,120
   2e75c:	003a4d06 	br	2d094 <___vfprintf_internal_r+0x71c>
   2e760:	8c7fff84 	addi	r17,r17,-2
   2e764:	b5bfffc4 	addi	r22,r22,-1
   2e768:	dd802615 	stw	r22,152(sp)
   2e76c:	dc4022c5 	stb	r17,139(sp)
   2e770:	b000bf16 	blt	r22,zero,2ea70 <___vfprintf_internal_r+0x20f8>
   2e774:	00800ac4 	movi	r2,43
   2e778:	d8802305 	stb	r2,140(sp)
   2e77c:	00800244 	movi	r2,9
   2e780:	15807016 	blt	r2,r22,2e944 <___vfprintf_internal_r+0x1fcc>
   2e784:	00800c04 	movi	r2,48
   2e788:	b5800c04 	addi	r22,r22,48
   2e78c:	d8802345 	stb	r2,141(sp)
   2e790:	dd802385 	stb	r22,142(sp)
   2e794:	d88023c4 	addi	r2,sp,143
   2e798:	df0022c4 	addi	fp,sp,139
   2e79c:	d8c03317 	ldw	r3,204(sp)
   2e7a0:	1739c83a 	sub	fp,r2,fp
   2e7a4:	d9003317 	ldw	r4,204(sp)
   2e7a8:	e0c7883a 	add	r3,fp,r3
   2e7ac:	df003a15 	stw	fp,232(sp)
   2e7b0:	d8c02e15 	stw	r3,184(sp)
   2e7b4:	00800044 	movi	r2,1
   2e7b8:	1100b30e 	bge	r2,r4,2ea88 <___vfprintf_internal_r+0x2110>
   2e7bc:	d8c02e17 	ldw	r3,184(sp)
   2e7c0:	18c00044 	addi	r3,r3,1
   2e7c4:	d8c02e15 	stw	r3,184(sp)
   2e7c8:	1805883a 	mov	r2,r3
   2e7cc:	1800ac16 	blt	r3,zero,2ea80 <___vfprintf_internal_r+0x2108>
   2e7d0:	d8003215 	stw	zero,200(sp)
   2e7d4:	003e5d06 	br	2e14c <___vfprintf_internal_r+0x17d4>
   2e7d8:	d9002c17 	ldw	r4,176(sp)
   2e7dc:	d9801e04 	addi	r6,sp,120
   2e7e0:	b80b883a 	mov	r5,r23
   2e7e4:	0032be40 	call	32be4 <__sprint_r>
   2e7e8:	1039651e 	bne	r2,zero,2cd80 <___vfprintf_internal_r+0x408>
   2e7ec:	dc402617 	ldw	r17,152(sp)
   2e7f0:	d8c02017 	ldw	r3,128(sp)
   2e7f4:	d8801f17 	ldw	r2,124(sp)
   2e7f8:	da000404 	addi	r8,sp,16
   2e7fc:	003ed606 	br	2e358 <___vfprintf_internal_r+0x19e0>
   2e800:	582b883a 	mov	r21,r11
   2e804:	d8002915 	stw	zero,164(sp)
   2e808:	0038bd06 	br	2cb00 <___vfprintf_internal_r+0x188>
   2e80c:	d8802917 	ldw	r2,164(sp)
   2e810:	103e071e 	bne	r2,zero,2e030 <___vfprintf_internal_r+0x16b8>
   2e814:	dc002915 	stw	r16,164(sp)
   2e818:	003e0506 	br	2e030 <___vfprintf_internal_r+0x16b8>
   2e81c:	d9002917 	ldw	r4,164(sp)
   2e820:	20c00044 	addi	r3,r4,1
   2e824:	003e0f06 	br	2e064 <___vfprintf_internal_r+0x16ec>
   2e828:	01400184 	movi	r5,6
   2e82c:	d9402915 	stw	r5,164(sp)
   2e830:	003dff06 	br	2e030 <___vfprintf_internal_r+0x16b8>
   2e834:	d8802104 	addi	r2,sp,132
   2e838:	d8800315 	stw	r2,12(sp)
   2e83c:	d8802504 	addi	r2,sp,148
   2e840:	d8800215 	stw	r2,8(sp)
   2e844:	d8802604 	addi	r2,sp,152
   2e848:	d8800115 	stw	r2,4(sp)
   2e84c:	d8802917 	ldw	r2,164(sp)
   2e850:	d9403617 	ldw	r5,216(sp)
   2e854:	d9002c17 	ldw	r4,176(sp)
   2e858:	d8800015 	stw	r2,0(sp)
   2e85c:	01c000c4 	movi	r7,3
   2e860:	980d883a 	mov	r6,r19
   2e864:	da003d15 	stw	r8,244(sp)
   2e868:	002f1d00 	call	2f1d0 <_dtoa_r>
   2e86c:	d8c02917 	ldw	r3,164(sp)
   2e870:	da003d17 	ldw	r8,244(sp)
   2e874:	1021883a 	mov	r16,r2
   2e878:	10f9883a 	add	fp,r2,r3
   2e87c:	81000007 	ldb	r4,0(r16)
   2e880:	00800c04 	movi	r2,48
   2e884:	20805e26 	beq	r4,r2,2ea00 <___vfprintf_internal_r+0x2088>
   2e888:	d8c02617 	ldw	r3,152(sp)
   2e88c:	e0f9883a 	add	fp,fp,r3
   2e890:	003e0a06 	br	2e0bc <___vfprintf_internal_r+0x1744>
   2e894:	00c00b44 	movi	r3,45
   2e898:	24e0003c 	xorhi	r19,r4,32768
   2e89c:	d8c02a05 	stb	r3,168(sp)
   2e8a0:	003de906 	br	2e048 <___vfprintf_internal_r+0x16d0>
   2e8a4:	d8c03217 	ldw	r3,200(sp)
   2e8a8:	00c07a0e 	bge	zero,r3,2ea94 <___vfprintf_internal_r+0x211c>
   2e8ac:	00800044 	movi	r2,1
   2e8b0:	d9003317 	ldw	r4,204(sp)
   2e8b4:	1105883a 	add	r2,r2,r4
   2e8b8:	d8802e15 	stw	r2,184(sp)
   2e8bc:	10004e16 	blt	r2,zero,2e9f8 <___vfprintf_internal_r+0x2080>
   2e8c0:	044019c4 	movi	r17,103
   2e8c4:	003e2106 	br	2e14c <___vfprintf_internal_r+0x17d4>
   2e8c8:	d9002917 	ldw	r4,164(sp)
   2e8cc:	d8802104 	addi	r2,sp,132
   2e8d0:	d8800315 	stw	r2,12(sp)
   2e8d4:	d9000015 	stw	r4,0(sp)
   2e8d8:	d8802504 	addi	r2,sp,148
   2e8dc:	d9403617 	ldw	r5,216(sp)
   2e8e0:	d9002c17 	ldw	r4,176(sp)
   2e8e4:	d8800215 	stw	r2,8(sp)
   2e8e8:	d8802604 	addi	r2,sp,152
   2e8ec:	d8800115 	stw	r2,4(sp)
   2e8f0:	01c000c4 	movi	r7,3
   2e8f4:	980d883a 	mov	r6,r19
   2e8f8:	da003d15 	stw	r8,244(sp)
   2e8fc:	002f1d00 	call	2f1d0 <_dtoa_r>
   2e900:	d8c02917 	ldw	r3,164(sp)
   2e904:	da003d17 	ldw	r8,244(sp)
   2e908:	1021883a 	mov	r16,r2
   2e90c:	00801184 	movi	r2,70
   2e910:	80f9883a 	add	fp,r16,r3
   2e914:	88bfd926 	beq	r17,r2,2e87c <___vfprintf_internal_r+0x1f04>
   2e918:	003de806 	br	2e0bc <___vfprintf_internal_r+0x1744>
   2e91c:	d9002917 	ldw	r4,164(sp)
   2e920:	00c04d0e 	bge	zero,r3,2ea58 <___vfprintf_internal_r+0x20e0>
   2e924:	2000441e 	bne	r4,zero,2ea38 <___vfprintf_internal_r+0x20c0>
   2e928:	9480004c 	andi	r18,r18,1
   2e92c:	9000421e 	bne	r18,zero,2ea38 <___vfprintf_internal_r+0x20c0>
   2e930:	1805883a 	mov	r2,r3
   2e934:	18007016 	blt	r3,zero,2eaf8 <___vfprintf_internal_r+0x2180>
   2e938:	d8c03217 	ldw	r3,200(sp)
   2e93c:	d8c02e15 	stw	r3,184(sp)
   2e940:	003e0206 	br	2e14c <___vfprintf_internal_r+0x17d4>
   2e944:	df0022c4 	addi	fp,sp,139
   2e948:	dc002915 	stw	r16,164(sp)
   2e94c:	4027883a 	mov	r19,r8
   2e950:	e021883a 	mov	r16,fp
   2e954:	b009883a 	mov	r4,r22
   2e958:	01400284 	movi	r5,10
   2e95c:	0025a3c0 	call	25a3c <__modsi3>
   2e960:	10800c04 	addi	r2,r2,48
   2e964:	843fffc4 	addi	r16,r16,-1
   2e968:	b009883a 	mov	r4,r22
   2e96c:	01400284 	movi	r5,10
   2e970:	80800005 	stb	r2,0(r16)
   2e974:	00259b80 	call	259b8 <__divsi3>
   2e978:	102d883a 	mov	r22,r2
   2e97c:	00800244 	movi	r2,9
   2e980:	15bff416 	blt	r2,r22,2e954 <___vfprintf_internal_r+0x1fdc>
   2e984:	9811883a 	mov	r8,r19
   2e988:	b0800c04 	addi	r2,r22,48
   2e98c:	8027883a 	mov	r19,r16
   2e990:	997fffc4 	addi	r5,r19,-1
   2e994:	98bfffc5 	stb	r2,-1(r19)
   2e998:	dc002917 	ldw	r16,164(sp)
   2e99c:	2f006a2e 	bgeu	r5,fp,2eb48 <___vfprintf_internal_r+0x21d0>
   2e9a0:	d9c02384 	addi	r7,sp,142
   2e9a4:	3ccfc83a 	sub	r7,r7,r19
   2e9a8:	d9002344 	addi	r4,sp,141
   2e9ac:	e1cf883a 	add	r7,fp,r7
   2e9b0:	00000106 	br	2e9b8 <___vfprintf_internal_r+0x2040>
   2e9b4:	28800003 	ldbu	r2,0(r5)
   2e9b8:	20800005 	stb	r2,0(r4)
   2e9bc:	21000044 	addi	r4,r4,1
   2e9c0:	29400044 	addi	r5,r5,1
   2e9c4:	393ffb1e 	bne	r7,r4,2e9b4 <___vfprintf_internal_r+0x203c>
   2e9c8:	d8802304 	addi	r2,sp,140
   2e9cc:	14c5c83a 	sub	r2,r2,r19
   2e9d0:	d8c02344 	addi	r3,sp,141
   2e9d4:	1885883a 	add	r2,r3,r2
   2e9d8:	003f7006 	br	2e79c <___vfprintf_internal_r+0x1e24>
   2e9dc:	0005883a 	mov	r2,zero
   2e9e0:	003f0f06 	br	2e620 <___vfprintf_internal_r+0x1ca8>
   2e9e4:	d8c03217 	ldw	r3,200(sp)
   2e9e8:	18c00044 	addi	r3,r3,1
   2e9ec:	d8c02e15 	stw	r3,184(sp)
   2e9f0:	1805883a 	mov	r2,r3
   2e9f4:	183fb20e 	bge	r3,zero,2e8c0 <___vfprintf_internal_r+0x1f48>
   2e9f8:	0005883a 	mov	r2,zero
   2e9fc:	003fb006 	br	2e8c0 <___vfprintf_internal_r+0x1f48>
   2ea00:	d9003617 	ldw	r4,216(sp)
   2ea04:	000d883a 	mov	r6,zero
   2ea08:	000f883a 	mov	r7,zero
   2ea0c:	980b883a 	mov	r5,r19
   2ea10:	d8c03c15 	stw	r3,240(sp)
   2ea14:	da003d15 	stw	r8,244(sp)
   2ea18:	002807c0 	call	2807c <__eqdf2>
   2ea1c:	d8c03c17 	ldw	r3,240(sp)
   2ea20:	da003d17 	ldw	r8,244(sp)
   2ea24:	103f9826 	beq	r2,zero,2e888 <___vfprintf_internal_r+0x1f10>
   2ea28:	00800044 	movi	r2,1
   2ea2c:	10c7c83a 	sub	r3,r2,r3
   2ea30:	d8c02615 	stw	r3,152(sp)
   2ea34:	003f9506 	br	2e88c <___vfprintf_internal_r+0x1f14>
   2ea38:	d9002917 	ldw	r4,164(sp)
   2ea3c:	d8c03217 	ldw	r3,200(sp)
   2ea40:	20800044 	addi	r2,r4,1
   2ea44:	1885883a 	add	r2,r3,r2
   2ea48:	d8802e15 	stw	r2,184(sp)
   2ea4c:	103dbf0e 	bge	r2,zero,2e14c <___vfprintf_internal_r+0x17d4>
   2ea50:	0005883a 	mov	r2,zero
   2ea54:	003dbd06 	br	2e14c <___vfprintf_internal_r+0x17d4>
   2ea58:	2000211e 	bne	r4,zero,2eae0 <___vfprintf_internal_r+0x2168>
   2ea5c:	9480004c 	andi	r18,r18,1
   2ea60:	90001f1e 	bne	r18,zero,2eae0 <___vfprintf_internal_r+0x2168>
   2ea64:	00800044 	movi	r2,1
   2ea68:	d8802e15 	stw	r2,184(sp)
   2ea6c:	003db706 	br	2e14c <___vfprintf_internal_r+0x17d4>
   2ea70:	00800b44 	movi	r2,45
   2ea74:	05adc83a 	sub	r22,zero,r22
   2ea78:	d8802305 	stb	r2,140(sp)
   2ea7c:	003f3f06 	br	2e77c <___vfprintf_internal_r+0x1e04>
   2ea80:	0005883a 	mov	r2,zero
   2ea84:	003f5206 	br	2e7d0 <___vfprintf_internal_r+0x1e58>
   2ea88:	90a4703a 	and	r18,r18,r2
   2ea8c:	903f4e26 	beq	r18,zero,2e7c8 <___vfprintf_internal_r+0x1e50>
   2ea90:	003f4a06 	br	2e7bc <___vfprintf_internal_r+0x1e44>
   2ea94:	00800084 	movi	r2,2
   2ea98:	10c5c83a 	sub	r2,r2,r3
   2ea9c:	003f8406 	br	2e8b0 <___vfprintf_internal_r+0x1f38>
   2eaa0:	d8802d17 	ldw	r2,180(sp)
   2eaa4:	d9002d17 	ldw	r4,180(sp)
   2eaa8:	ac400043 	ldbu	r17,1(r21)
   2eaac:	10800017 	ldw	r2,0(r2)
   2eab0:	582b883a 	mov	r21,r11
   2eab4:	d8802915 	stw	r2,164(sp)
   2eab8:	20800104 	addi	r2,r4,4
   2eabc:	d9002917 	ldw	r4,164(sp)
   2eac0:	d8802d15 	stw	r2,180(sp)
   2eac4:	203e7a0e 	bge	r4,zero,2e4b0 <___vfprintf_internal_r+0x1b38>
   2eac8:	8c403fcc 	andi	r17,r17,255
   2eacc:	00bfffc4 	movi	r2,-1
   2ead0:	8c40201c 	xori	r17,r17,128
   2ead4:	d8802915 	stw	r2,164(sp)
   2ead8:	8c7fe004 	addi	r17,r17,-128
   2eadc:	00380706 	br	2cafc <___vfprintf_internal_r+0x184>
   2eae0:	d8c02917 	ldw	r3,164(sp)
   2eae4:	18c00084 	addi	r3,r3,2
   2eae8:	d8c02e15 	stw	r3,184(sp)
   2eaec:	1805883a 	mov	r2,r3
   2eaf0:	183d960e 	bge	r3,zero,2e14c <___vfprintf_internal_r+0x17d4>
   2eaf4:	003fd606 	br	2ea50 <___vfprintf_internal_r+0x20d8>
   2eaf8:	0005883a 	mov	r2,zero
   2eafc:	003f8e06 	br	2e938 <___vfprintf_internal_r+0x1fc0>
   2eb00:	9080004c 	andi	r2,r18,1
   2eb04:	103f811e 	bne	r2,zero,2e90c <___vfprintf_internal_r+0x1f94>
   2eb08:	d8802117 	ldw	r2,132(sp)
   2eb0c:	1405c83a 	sub	r2,r2,r16
   2eb10:	d8803315 	stw	r2,204(sp)
   2eb14:	b47ef326 	beq	r22,r17,2e6e4 <___vfprintf_internal_r+0x1d6c>
   2eb18:	dd802617 	ldw	r22,152(sp)
   2eb1c:	003f1106 	br	2e764 <___vfprintf_internal_r+0x1dec>
   2eb20:	d9c02785 	stb	r7,158(sp)
   2eb24:	00390406 	br	2cf38 <___vfprintf_internal_r+0x5c0>
   2eb28:	d9c02785 	stb	r7,158(sp)
   2eb2c:	0038d306 	br	2ce7c <___vfprintf_internal_r+0x504>
   2eb30:	d9c02785 	stb	r7,158(sp)
   2eb34:	003a6106 	br	2d4bc <___vfprintf_internal_r+0xb44>
   2eb38:	d9c02785 	stb	r7,158(sp)
   2eb3c:	003af806 	br	2d720 <___vfprintf_internal_r+0xda8>
   2eb40:	0005883a 	mov	r2,zero
   2eb44:	003d7e06 	br	2e140 <___vfprintf_internal_r+0x17c8>
   2eb48:	d8802344 	addi	r2,sp,141
   2eb4c:	003f1306 	br	2e79c <___vfprintf_internal_r+0x1e24>
   2eb50:	d9c02785 	stb	r7,158(sp)
   2eb54:	00392306 	br	2cfe4 <___vfprintf_internal_r+0x66c>
   2eb58:	d9c02785 	stb	r7,158(sp)
   2eb5c:	003aa906 	br	2d604 <___vfprintf_internal_r+0xc8c>
   2eb60:	d9c02785 	stb	r7,158(sp)
   2eb64:	003a3d06 	br	2d45c <___vfprintf_internal_r+0xae4>
   2eb68:	d9c02785 	stb	r7,158(sp)
   2eb6c:	003aca06 	br	2d698 <___vfprintf_internal_r+0xd20>

0002eb70 <__vfprintf_internal>:
   2eb70:	00800134 	movhi	r2,4
   2eb74:	10ae9f04 	addi	r2,r2,-17796
   2eb78:	300f883a 	mov	r7,r6
   2eb7c:	280d883a 	mov	r6,r5
   2eb80:	200b883a 	mov	r5,r4
   2eb84:	11000017 	ldw	r4,0(r2)
   2eb88:	002c9781 	jmpi	2c978 <___vfprintf_internal_r>

0002eb8c <__sbprintf>:
   2eb8c:	2880030b 	ldhu	r2,12(r5)
   2eb90:	2ac01917 	ldw	r11,100(r5)
   2eb94:	2a80038b 	ldhu	r10,14(r5)
   2eb98:	2a400717 	ldw	r9,28(r5)
   2eb9c:	2a000917 	ldw	r8,36(r5)
   2eba0:	defee204 	addi	sp,sp,-1144
   2eba4:	00c10004 	movi	r3,1024
   2eba8:	dc011a15 	stw	r16,1128(sp)
   2ebac:	10bfff4c 	andi	r2,r2,65533
   2ebb0:	2821883a 	mov	r16,r5
   2ebb4:	d8cb883a 	add	r5,sp,r3
   2ebb8:	dc811c15 	stw	r18,1136(sp)
   2ebbc:	dc411b15 	stw	r17,1132(sp)
   2ebc0:	dfc11d15 	stw	ra,1140(sp)
   2ebc4:	2025883a 	mov	r18,r4
   2ebc8:	d881030d 	sth	r2,1036(sp)
   2ebcc:	dac11915 	stw	r11,1124(sp)
   2ebd0:	da81038d 	sth	r10,1038(sp)
   2ebd4:	da410715 	stw	r9,1052(sp)
   2ebd8:	da010915 	stw	r8,1060(sp)
   2ebdc:	dec10015 	stw	sp,1024(sp)
   2ebe0:	dec10415 	stw	sp,1040(sp)
   2ebe4:	d8c10215 	stw	r3,1032(sp)
   2ebe8:	d8c10515 	stw	r3,1044(sp)
   2ebec:	d8010615 	stw	zero,1048(sp)
   2ebf0:	002c9780 	call	2c978 <___vfprintf_internal_r>
   2ebf4:	1023883a 	mov	r17,r2
   2ebf8:	10000416 	blt	r2,zero,2ec0c <__sbprintf+0x80>
   2ebfc:	d9410004 	addi	r5,sp,1024
   2ec00:	9009883a 	mov	r4,r18
   2ec04:	0029b880 	call	29b88 <_fflush_r>
   2ec08:	10000d1e 	bne	r2,zero,2ec40 <__sbprintf+0xb4>
   2ec0c:	d881030b 	ldhu	r2,1036(sp)
   2ec10:	1080100c 	andi	r2,r2,64
   2ec14:	10000326 	beq	r2,zero,2ec24 <__sbprintf+0x98>
   2ec18:	8080030b 	ldhu	r2,12(r16)
   2ec1c:	10801014 	ori	r2,r2,64
   2ec20:	8080030d 	sth	r2,12(r16)
   2ec24:	8805883a 	mov	r2,r17
   2ec28:	dfc11d17 	ldw	ra,1140(sp)
   2ec2c:	dc811c17 	ldw	r18,1136(sp)
   2ec30:	dc411b17 	ldw	r17,1132(sp)
   2ec34:	dc011a17 	ldw	r16,1128(sp)
   2ec38:	dec11e04 	addi	sp,sp,1144
   2ec3c:	f800283a 	ret
   2ec40:	047fffc4 	movi	r17,-1
   2ec44:	003ff106 	br	2ec0c <__sbprintf+0x80>

0002ec48 <_write_r>:
   2ec48:	defffd04 	addi	sp,sp,-12
   2ec4c:	2805883a 	mov	r2,r5
   2ec50:	dc000015 	stw	r16,0(sp)
   2ec54:	04000134 	movhi	r16,4
   2ec58:	dc400115 	stw	r17,4(sp)
   2ec5c:	300b883a 	mov	r5,r6
   2ec60:	84399f04 	addi	r16,r16,-6532
   2ec64:	2023883a 	mov	r17,r4
   2ec68:	380d883a 	mov	r6,r7
   2ec6c:	1009883a 	mov	r4,r2
   2ec70:	dfc00215 	stw	ra,8(sp)
   2ec74:	80000015 	stw	zero,0(r16)
   2ec78:	0035cc00 	call	35cc0 <write>
   2ec7c:	00ffffc4 	movi	r3,-1
   2ec80:	10c00526 	beq	r2,r3,2ec98 <_write_r+0x50>
   2ec84:	dfc00217 	ldw	ra,8(sp)
   2ec88:	dc400117 	ldw	r17,4(sp)
   2ec8c:	dc000017 	ldw	r16,0(sp)
   2ec90:	dec00304 	addi	sp,sp,12
   2ec94:	f800283a 	ret
   2ec98:	80c00017 	ldw	r3,0(r16)
   2ec9c:	183ff926 	beq	r3,zero,2ec84 <_write_r+0x3c>
   2eca0:	88c00015 	stw	r3,0(r17)
   2eca4:	003ff706 	br	2ec84 <_write_r+0x3c>

0002eca8 <__swsetup_r>:
   2eca8:	00800134 	movhi	r2,4
   2ecac:	defffd04 	addi	sp,sp,-12
   2ecb0:	10ae9f04 	addi	r2,r2,-17796
   2ecb4:	dc400115 	stw	r17,4(sp)
   2ecb8:	2023883a 	mov	r17,r4
   2ecbc:	11000017 	ldw	r4,0(r2)
   2ecc0:	dc000015 	stw	r16,0(sp)
   2ecc4:	dfc00215 	stw	ra,8(sp)
   2ecc8:	2821883a 	mov	r16,r5
   2eccc:	20000226 	beq	r4,zero,2ecd8 <__swsetup_r+0x30>
   2ecd0:	20800e17 	ldw	r2,56(r4)
   2ecd4:	10003126 	beq	r2,zero,2ed9c <__swsetup_r+0xf4>
   2ecd8:	8080030b 	ldhu	r2,12(r16)
   2ecdc:	10c0020c 	andi	r3,r2,8
   2ece0:	1009883a 	mov	r4,r2
   2ece4:	18000f26 	beq	r3,zero,2ed24 <__swsetup_r+0x7c>
   2ece8:	80c00417 	ldw	r3,16(r16)
   2ecec:	18001526 	beq	r3,zero,2ed44 <__swsetup_r+0x9c>
   2ecf0:	1100004c 	andi	r4,r2,1
   2ecf4:	20001c1e 	bne	r4,zero,2ed68 <__swsetup_r+0xc0>
   2ecf8:	1080008c 	andi	r2,r2,2
   2ecfc:	1000291e 	bne	r2,zero,2eda4 <__swsetup_r+0xfc>
   2ed00:	80800517 	ldw	r2,20(r16)
   2ed04:	80800215 	stw	r2,8(r16)
   2ed08:	18001c26 	beq	r3,zero,2ed7c <__swsetup_r+0xd4>
   2ed0c:	0005883a 	mov	r2,zero
   2ed10:	dfc00217 	ldw	ra,8(sp)
   2ed14:	dc400117 	ldw	r17,4(sp)
   2ed18:	dc000017 	ldw	r16,0(sp)
   2ed1c:	dec00304 	addi	sp,sp,12
   2ed20:	f800283a 	ret
   2ed24:	2080040c 	andi	r2,r4,16
   2ed28:	10002e26 	beq	r2,zero,2ede4 <__swsetup_r+0x13c>
   2ed2c:	2080010c 	andi	r2,r4,4
   2ed30:	10001e1e 	bne	r2,zero,2edac <__swsetup_r+0x104>
   2ed34:	80c00417 	ldw	r3,16(r16)
   2ed38:	20800214 	ori	r2,r4,8
   2ed3c:	8080030d 	sth	r2,12(r16)
   2ed40:	183feb1e 	bne	r3,zero,2ecf0 <__swsetup_r+0x48>
   2ed44:	1100a00c 	andi	r4,r2,640
   2ed48:	01408004 	movi	r5,512
   2ed4c:	217fe826 	beq	r4,r5,2ecf0 <__swsetup_r+0x48>
   2ed50:	800b883a 	mov	r5,r16
   2ed54:	8809883a 	mov	r4,r17
   2ed58:	002ad500 	call	2ad50 <__smakebuf_r>
   2ed5c:	8080030b 	ldhu	r2,12(r16)
   2ed60:	80c00417 	ldw	r3,16(r16)
   2ed64:	003fe206 	br	2ecf0 <__swsetup_r+0x48>
   2ed68:	80800517 	ldw	r2,20(r16)
   2ed6c:	80000215 	stw	zero,8(r16)
   2ed70:	0085c83a 	sub	r2,zero,r2
   2ed74:	80800615 	stw	r2,24(r16)
   2ed78:	183fe41e 	bne	r3,zero,2ed0c <__swsetup_r+0x64>
   2ed7c:	80c0030b 	ldhu	r3,12(r16)
   2ed80:	0005883a 	mov	r2,zero
   2ed84:	1900200c 	andi	r4,r3,128
   2ed88:	203fe126 	beq	r4,zero,2ed10 <__swsetup_r+0x68>
   2ed8c:	18c01014 	ori	r3,r3,64
   2ed90:	80c0030d 	sth	r3,12(r16)
   2ed94:	00bfffc4 	movi	r2,-1
   2ed98:	003fdd06 	br	2ed10 <__swsetup_r+0x68>
   2ed9c:	0029f640 	call	29f64 <__sinit>
   2eda0:	003fcd06 	br	2ecd8 <__swsetup_r+0x30>
   2eda4:	0005883a 	mov	r2,zero
   2eda8:	003fd606 	br	2ed04 <__swsetup_r+0x5c>
   2edac:	81400c17 	ldw	r5,48(r16)
   2edb0:	28000626 	beq	r5,zero,2edcc <__swsetup_r+0x124>
   2edb4:	80801004 	addi	r2,r16,64
   2edb8:	28800326 	beq	r5,r2,2edc8 <__swsetup_r+0x120>
   2edbc:	8809883a 	mov	r4,r17
   2edc0:	002a1e40 	call	2a1e4 <_free_r>
   2edc4:	8100030b 	ldhu	r4,12(r16)
   2edc8:	80000c15 	stw	zero,48(r16)
   2edcc:	80c00417 	ldw	r3,16(r16)
   2edd0:	00bff6c4 	movi	r2,-37
   2edd4:	1108703a 	and	r4,r2,r4
   2edd8:	80000115 	stw	zero,4(r16)
   2eddc:	80c00015 	stw	r3,0(r16)
   2ede0:	003fd506 	br	2ed38 <__swsetup_r+0x90>
   2ede4:	00800244 	movi	r2,9
   2ede8:	88800015 	stw	r2,0(r17)
   2edec:	20801014 	ori	r2,r4,64
   2edf0:	8080030d 	sth	r2,12(r16)
   2edf4:	00bfffc4 	movi	r2,-1
   2edf8:	003fc506 	br	2ed10 <__swsetup_r+0x68>

0002edfc <_close_r>:
   2edfc:	defffd04 	addi	sp,sp,-12
   2ee00:	dc000015 	stw	r16,0(sp)
   2ee04:	04000134 	movhi	r16,4
   2ee08:	dc400115 	stw	r17,4(sp)
   2ee0c:	84399f04 	addi	r16,r16,-6532
   2ee10:	2023883a 	mov	r17,r4
   2ee14:	2809883a 	mov	r4,r5
   2ee18:	dfc00215 	stw	ra,8(sp)
   2ee1c:	80000015 	stw	zero,0(r16)
   2ee20:	00352280 	call	35228 <close>
   2ee24:	00ffffc4 	movi	r3,-1
   2ee28:	10c00526 	beq	r2,r3,2ee40 <_close_r+0x44>
   2ee2c:	dfc00217 	ldw	ra,8(sp)
   2ee30:	dc400117 	ldw	r17,4(sp)
   2ee34:	dc000017 	ldw	r16,0(sp)
   2ee38:	dec00304 	addi	sp,sp,12
   2ee3c:	f800283a 	ret
   2ee40:	80c00017 	ldw	r3,0(r16)
   2ee44:	183ff926 	beq	r3,zero,2ee2c <_close_r+0x30>
   2ee48:	88c00015 	stw	r3,0(r17)
   2ee4c:	003ff706 	br	2ee2c <_close_r+0x30>

0002ee50 <__call_exitprocs>:
   2ee50:	defff504 	addi	sp,sp,-44
   2ee54:	df000915 	stw	fp,36(sp)
   2ee58:	dd400615 	stw	r21,24(sp)
   2ee5c:	dc800315 	stw	r18,12(sp)
   2ee60:	dfc00a15 	stw	ra,40(sp)
   2ee64:	ddc00815 	stw	r23,32(sp)
   2ee68:	dd800715 	stw	r22,28(sp)
   2ee6c:	dd000515 	stw	r20,20(sp)
   2ee70:	dcc00415 	stw	r19,16(sp)
   2ee74:	dc400215 	stw	r17,8(sp)
   2ee78:	dc000115 	stw	r16,4(sp)
   2ee7c:	d9000015 	stw	r4,0(sp)
   2ee80:	2839883a 	mov	fp,r5
   2ee84:	04800044 	movi	r18,1
   2ee88:	057fffc4 	movi	r21,-1
   2ee8c:	00800134 	movhi	r2,4
   2ee90:	10ae9e04 	addi	r2,r2,-17800
   2ee94:	12000017 	ldw	r8,0(r2)
   2ee98:	45005217 	ldw	r20,328(r8)
   2ee9c:	44c05204 	addi	r19,r8,328
   2eea0:	a0001c26 	beq	r20,zero,2ef14 <__call_exitprocs+0xc4>
   2eea4:	a0800117 	ldw	r2,4(r20)
   2eea8:	15ffffc4 	addi	r23,r2,-1
   2eeac:	b8000d16 	blt	r23,zero,2eee4 <__call_exitprocs+0x94>
   2eeb0:	14000044 	addi	r16,r2,1
   2eeb4:	8421883a 	add	r16,r16,r16
   2eeb8:	8421883a 	add	r16,r16,r16
   2eebc:	84402004 	addi	r17,r16,128
   2eec0:	a463883a 	add	r17,r20,r17
   2eec4:	a421883a 	add	r16,r20,r16
   2eec8:	e0001e26 	beq	fp,zero,2ef44 <__call_exitprocs+0xf4>
   2eecc:	80804017 	ldw	r2,256(r16)
   2eed0:	e0801c26 	beq	fp,r2,2ef44 <__call_exitprocs+0xf4>
   2eed4:	bdffffc4 	addi	r23,r23,-1
   2eed8:	843fff04 	addi	r16,r16,-4
   2eedc:	8c7fff04 	addi	r17,r17,-4
   2eee0:	bd7ff91e 	bne	r23,r21,2eec8 <__call_exitprocs+0x78>
   2eee4:	008000f4 	movhi	r2,3
   2eee8:	10abc804 	addi	r2,r2,-20704
   2eeec:	10000926 	beq	r2,zero,2ef14 <__call_exitprocs+0xc4>
   2eef0:	a0800117 	ldw	r2,4(r20)
   2eef4:	1000301e 	bne	r2,zero,2efb8 <__call_exitprocs+0x168>
   2eef8:	a0800017 	ldw	r2,0(r20)
   2eefc:	10003226 	beq	r2,zero,2efc8 <__call_exitprocs+0x178>
   2ef00:	a009883a 	mov	r4,r20
   2ef04:	98800015 	stw	r2,0(r19)
   2ef08:	002af200 	call	2af20 <free>
   2ef0c:	9d000017 	ldw	r20,0(r19)
   2ef10:	a03fe41e 	bne	r20,zero,2eea4 <__call_exitprocs+0x54>
   2ef14:	dfc00a17 	ldw	ra,40(sp)
   2ef18:	df000917 	ldw	fp,36(sp)
   2ef1c:	ddc00817 	ldw	r23,32(sp)
   2ef20:	dd800717 	ldw	r22,28(sp)
   2ef24:	dd400617 	ldw	r21,24(sp)
   2ef28:	dd000517 	ldw	r20,20(sp)
   2ef2c:	dcc00417 	ldw	r19,16(sp)
   2ef30:	dc800317 	ldw	r18,12(sp)
   2ef34:	dc400217 	ldw	r17,8(sp)
   2ef38:	dc000117 	ldw	r16,4(sp)
   2ef3c:	dec00b04 	addi	sp,sp,44
   2ef40:	f800283a 	ret
   2ef44:	a0800117 	ldw	r2,4(r20)
   2ef48:	80c00017 	ldw	r3,0(r16)
   2ef4c:	10bfffc4 	addi	r2,r2,-1
   2ef50:	15c01426 	beq	r2,r23,2efa4 <__call_exitprocs+0x154>
   2ef54:	80000015 	stw	zero,0(r16)
   2ef58:	183fde26 	beq	r3,zero,2eed4 <__call_exitprocs+0x84>
   2ef5c:	95c8983a 	sll	r4,r18,r23
   2ef60:	a0806217 	ldw	r2,392(r20)
   2ef64:	a5800117 	ldw	r22,4(r20)
   2ef68:	2084703a 	and	r2,r4,r2
   2ef6c:	10000b26 	beq	r2,zero,2ef9c <__call_exitprocs+0x14c>
   2ef70:	a0806317 	ldw	r2,396(r20)
   2ef74:	2088703a 	and	r4,r4,r2
   2ef78:	20000c1e 	bne	r4,zero,2efac <__call_exitprocs+0x15c>
   2ef7c:	89400017 	ldw	r5,0(r17)
   2ef80:	d9000017 	ldw	r4,0(sp)
   2ef84:	183ee83a 	callr	r3
   2ef88:	a0800117 	ldw	r2,4(r20)
   2ef8c:	15bfbf1e 	bne	r2,r22,2ee8c <__call_exitprocs+0x3c>
   2ef90:	98800017 	ldw	r2,0(r19)
   2ef94:	153fcf26 	beq	r2,r20,2eed4 <__call_exitprocs+0x84>
   2ef98:	003fbc06 	br	2ee8c <__call_exitprocs+0x3c>
   2ef9c:	183ee83a 	callr	r3
   2efa0:	003ff906 	br	2ef88 <__call_exitprocs+0x138>
   2efa4:	a5c00115 	stw	r23,4(r20)
   2efa8:	003feb06 	br	2ef58 <__call_exitprocs+0x108>
   2efac:	89000017 	ldw	r4,0(r17)
   2efb0:	183ee83a 	callr	r3
   2efb4:	003ff406 	br	2ef88 <__call_exitprocs+0x138>
   2efb8:	a0800017 	ldw	r2,0(r20)
   2efbc:	a027883a 	mov	r19,r20
   2efc0:	1029883a 	mov	r20,r2
   2efc4:	003fb606 	br	2eea0 <__call_exitprocs+0x50>
   2efc8:	0005883a 	mov	r2,zero
   2efcc:	003ffb06 	br	2efbc <__call_exitprocs+0x16c>

0002efd0 <quorem>:
   2efd0:	defff704 	addi	sp,sp,-36
   2efd4:	dc800215 	stw	r18,8(sp)
   2efd8:	20800417 	ldw	r2,16(r4)
   2efdc:	2c800417 	ldw	r18,16(r5)
   2efe0:	dfc00815 	stw	ra,32(sp)
   2efe4:	ddc00715 	stw	r23,28(sp)
   2efe8:	dd800615 	stw	r22,24(sp)
   2efec:	dd400515 	stw	r21,20(sp)
   2eff0:	dd000415 	stw	r20,16(sp)
   2eff4:	dcc00315 	stw	r19,12(sp)
   2eff8:	dc400115 	stw	r17,4(sp)
   2effc:	dc000015 	stw	r16,0(sp)
   2f000:	14807116 	blt	r2,r18,2f1c8 <quorem+0x1f8>
   2f004:	94bfffc4 	addi	r18,r18,-1
   2f008:	94ad883a 	add	r22,r18,r18
   2f00c:	b5ad883a 	add	r22,r22,r22
   2f010:	2c400504 	addi	r17,r5,20
   2f014:	8da9883a 	add	r20,r17,r22
   2f018:	25400504 	addi	r21,r4,20
   2f01c:	282f883a 	mov	r23,r5
   2f020:	adad883a 	add	r22,r21,r22
   2f024:	a1400017 	ldw	r5,0(r20)
   2f028:	2021883a 	mov	r16,r4
   2f02c:	b1000017 	ldw	r4,0(r22)
   2f030:	29400044 	addi	r5,r5,1
   2f034:	0025ab00 	call	25ab0 <__udivsi3>
   2f038:	1027883a 	mov	r19,r2
   2f03c:	10002c26 	beq	r2,zero,2f0f0 <quorem+0x120>
   2f040:	a813883a 	mov	r9,r21
   2f044:	880b883a 	mov	r5,r17
   2f048:	0009883a 	mov	r4,zero
   2f04c:	000d883a 	mov	r6,zero
   2f050:	2a000017 	ldw	r8,0(r5)
   2f054:	49c00017 	ldw	r7,0(r9)
   2f058:	29400104 	addi	r5,r5,4
   2f05c:	40bfffcc 	andi	r2,r8,65535
   2f060:	14c5383a 	mul	r2,r2,r19
   2f064:	4010d43a 	srli	r8,r8,16
   2f068:	38ffffcc 	andi	r3,r7,65535
   2f06c:	1105883a 	add	r2,r2,r4
   2f070:	1008d43a 	srli	r4,r2,16
   2f074:	44d1383a 	mul	r8,r8,r19
   2f078:	198d883a 	add	r6,r3,r6
   2f07c:	10ffffcc 	andi	r3,r2,65535
   2f080:	30c7c83a 	sub	r3,r6,r3
   2f084:	380ed43a 	srli	r7,r7,16
   2f088:	4105883a 	add	r2,r8,r4
   2f08c:	180dd43a 	srai	r6,r3,16
   2f090:	113fffcc 	andi	r4,r2,65535
   2f094:	390fc83a 	sub	r7,r7,r4
   2f098:	398d883a 	add	r6,r7,r6
   2f09c:	300e943a 	slli	r7,r6,16
   2f0a0:	18ffffcc 	andi	r3,r3,65535
   2f0a4:	1008d43a 	srli	r4,r2,16
   2f0a8:	38ceb03a 	or	r7,r7,r3
   2f0ac:	49c00015 	stw	r7,0(r9)
   2f0b0:	300dd43a 	srai	r6,r6,16
   2f0b4:	4a400104 	addi	r9,r9,4
   2f0b8:	a17fe52e 	bgeu	r20,r5,2f050 <quorem+0x80>
   2f0bc:	b0800017 	ldw	r2,0(r22)
   2f0c0:	10000b1e 	bne	r2,zero,2f0f0 <quorem+0x120>
   2f0c4:	b0bfff04 	addi	r2,r22,-4
   2f0c8:	a880082e 	bgeu	r21,r2,2f0ec <quorem+0x11c>
   2f0cc:	b0ffff17 	ldw	r3,-4(r22)
   2f0d0:	18000326 	beq	r3,zero,2f0e0 <quorem+0x110>
   2f0d4:	00000506 	br	2f0ec <quorem+0x11c>
   2f0d8:	10c00017 	ldw	r3,0(r2)
   2f0dc:	1800031e 	bne	r3,zero,2f0ec <quorem+0x11c>
   2f0e0:	10bfff04 	addi	r2,r2,-4
   2f0e4:	94bfffc4 	addi	r18,r18,-1
   2f0e8:	a8bffb36 	bltu	r21,r2,2f0d8 <quorem+0x108>
   2f0ec:	84800415 	stw	r18,16(r16)
   2f0f0:	b80b883a 	mov	r5,r23
   2f0f4:	8009883a 	mov	r4,r16
   2f0f8:	0031bac0 	call	31bac <__mcmp>
   2f0fc:	10002616 	blt	r2,zero,2f198 <quorem+0x1c8>
   2f100:	9cc00044 	addi	r19,r19,1
   2f104:	a805883a 	mov	r2,r21
   2f108:	000b883a 	mov	r5,zero
   2f10c:	11000017 	ldw	r4,0(r2)
   2f110:	89800017 	ldw	r6,0(r17)
   2f114:	10800104 	addi	r2,r2,4
   2f118:	20ffffcc 	andi	r3,r4,65535
   2f11c:	194b883a 	add	r5,r3,r5
   2f120:	30ffffcc 	andi	r3,r6,65535
   2f124:	28c7c83a 	sub	r3,r5,r3
   2f128:	300cd43a 	srli	r6,r6,16
   2f12c:	2008d43a 	srli	r4,r4,16
   2f130:	180bd43a 	srai	r5,r3,16
   2f134:	18ffffcc 	andi	r3,r3,65535
   2f138:	2189c83a 	sub	r4,r4,r6
   2f13c:	2149883a 	add	r4,r4,r5
   2f140:	200c943a 	slli	r6,r4,16
   2f144:	8c400104 	addi	r17,r17,4
   2f148:	200bd43a 	srai	r5,r4,16
   2f14c:	30c6b03a 	or	r3,r6,r3
   2f150:	10ffff15 	stw	r3,-4(r2)
   2f154:	a47fed2e 	bgeu	r20,r17,2f10c <quorem+0x13c>
   2f158:	9485883a 	add	r2,r18,r18
   2f15c:	1085883a 	add	r2,r2,r2
   2f160:	a887883a 	add	r3,r21,r2
   2f164:	18800017 	ldw	r2,0(r3)
   2f168:	10000b1e 	bne	r2,zero,2f198 <quorem+0x1c8>
   2f16c:	18bfff04 	addi	r2,r3,-4
   2f170:	a880082e 	bgeu	r21,r2,2f194 <quorem+0x1c4>
   2f174:	18ffff17 	ldw	r3,-4(r3)
   2f178:	18000326 	beq	r3,zero,2f188 <quorem+0x1b8>
   2f17c:	00000506 	br	2f194 <quorem+0x1c4>
   2f180:	10c00017 	ldw	r3,0(r2)
   2f184:	1800031e 	bne	r3,zero,2f194 <quorem+0x1c4>
   2f188:	10bfff04 	addi	r2,r2,-4
   2f18c:	94bfffc4 	addi	r18,r18,-1
   2f190:	a8bffb36 	bltu	r21,r2,2f180 <quorem+0x1b0>
   2f194:	84800415 	stw	r18,16(r16)
   2f198:	9805883a 	mov	r2,r19
   2f19c:	dfc00817 	ldw	ra,32(sp)
   2f1a0:	ddc00717 	ldw	r23,28(sp)
   2f1a4:	dd800617 	ldw	r22,24(sp)
   2f1a8:	dd400517 	ldw	r21,20(sp)
   2f1ac:	dd000417 	ldw	r20,16(sp)
   2f1b0:	dcc00317 	ldw	r19,12(sp)
   2f1b4:	dc800217 	ldw	r18,8(sp)
   2f1b8:	dc400117 	ldw	r17,4(sp)
   2f1bc:	dc000017 	ldw	r16,0(sp)
   2f1c0:	dec00904 	addi	sp,sp,36
   2f1c4:	f800283a 	ret
   2f1c8:	0005883a 	mov	r2,zero
   2f1cc:	003ff306 	br	2f19c <quorem+0x1cc>

0002f1d0 <_dtoa_r>:
   2f1d0:	20801017 	ldw	r2,64(r4)
   2f1d4:	deffde04 	addi	sp,sp,-136
   2f1d8:	df002015 	stw	fp,128(sp)
   2f1dc:	dcc01b15 	stw	r19,108(sp)
   2f1e0:	dc801a15 	stw	r18,104(sp)
   2f1e4:	dc401915 	stw	r17,100(sp)
   2f1e8:	dc001815 	stw	r16,96(sp)
   2f1ec:	dfc02115 	stw	ra,132(sp)
   2f1f0:	ddc01f15 	stw	r23,124(sp)
   2f1f4:	dd801e15 	stw	r22,120(sp)
   2f1f8:	dd401d15 	stw	r21,116(sp)
   2f1fc:	dd001c15 	stw	r20,112(sp)
   2f200:	d9c00315 	stw	r7,12(sp)
   2f204:	2039883a 	mov	fp,r4
   2f208:	3023883a 	mov	r17,r6
   2f20c:	2825883a 	mov	r18,r5
   2f210:	dc002417 	ldw	r16,144(sp)
   2f214:	3027883a 	mov	r19,r6
   2f218:	10000826 	beq	r2,zero,2f23c <_dtoa_r+0x6c>
   2f21c:	21801117 	ldw	r6,68(r4)
   2f220:	00c00044 	movi	r3,1
   2f224:	100b883a 	mov	r5,r2
   2f228:	1986983a 	sll	r3,r3,r6
   2f22c:	11800115 	stw	r6,4(r2)
   2f230:	10c00215 	stw	r3,8(r2)
   2f234:	003138c0 	call	3138c <_Bfree>
   2f238:	e0001015 	stw	zero,64(fp)
   2f23c:	88002e16 	blt	r17,zero,2f2f8 <_dtoa_r+0x128>
   2f240:	80000015 	stw	zero,0(r16)
   2f244:	889ffc2c 	andhi	r2,r17,32752
   2f248:	00dffc34 	movhi	r3,32752
   2f24c:	10c01c26 	beq	r2,r3,2f2c0 <_dtoa_r+0xf0>
   2f250:	000d883a 	mov	r6,zero
   2f254:	000f883a 	mov	r7,zero
   2f258:	9009883a 	mov	r4,r18
   2f25c:	980b883a 	mov	r5,r19
   2f260:	002807c0 	call	2807c <__eqdf2>
   2f264:	10002b1e 	bne	r2,zero,2f314 <_dtoa_r+0x144>
   2f268:	d9c02317 	ldw	r7,140(sp)
   2f26c:	00800044 	movi	r2,1
   2f270:	38800015 	stw	r2,0(r7)
   2f274:	d8802517 	ldw	r2,148(sp)
   2f278:	10019e26 	beq	r2,zero,2f8f4 <_dtoa_r+0x724>
   2f27c:	d8c02517 	ldw	r3,148(sp)
   2f280:	00800134 	movhi	r2,4
   2f284:	10a2ae44 	addi	r2,r2,-30023
   2f288:	18800015 	stw	r2,0(r3)
   2f28c:	10bfffc4 	addi	r2,r2,-1
   2f290:	dfc02117 	ldw	ra,132(sp)
   2f294:	df002017 	ldw	fp,128(sp)
   2f298:	ddc01f17 	ldw	r23,124(sp)
   2f29c:	dd801e17 	ldw	r22,120(sp)
   2f2a0:	dd401d17 	ldw	r21,116(sp)
   2f2a4:	dd001c17 	ldw	r20,112(sp)
   2f2a8:	dcc01b17 	ldw	r19,108(sp)
   2f2ac:	dc801a17 	ldw	r18,104(sp)
   2f2b0:	dc401917 	ldw	r17,100(sp)
   2f2b4:	dc001817 	ldw	r16,96(sp)
   2f2b8:	dec02204 	addi	sp,sp,136
   2f2bc:	f800283a 	ret
   2f2c0:	d8c02317 	ldw	r3,140(sp)
   2f2c4:	0089c3c4 	movi	r2,9999
   2f2c8:	18800015 	stw	r2,0(r3)
   2f2cc:	90017726 	beq	r18,zero,2f8ac <_dtoa_r+0x6dc>
   2f2d0:	00800134 	movhi	r2,4
   2f2d4:	10a35a04 	addi	r2,r2,-29336
   2f2d8:	d9002517 	ldw	r4,148(sp)
   2f2dc:	203fec26 	beq	r4,zero,2f290 <_dtoa_r+0xc0>
   2f2e0:	10c000c7 	ldb	r3,3(r2)
   2f2e4:	1801781e 	bne	r3,zero,2f8c8 <_dtoa_r+0x6f8>
   2f2e8:	10c000c4 	addi	r3,r2,3
   2f2ec:	d9802517 	ldw	r6,148(sp)
   2f2f0:	30c00015 	stw	r3,0(r6)
   2f2f4:	003fe606 	br	2f290 <_dtoa_r+0xc0>
   2f2f8:	04e00034 	movhi	r19,32768
   2f2fc:	9cffffc4 	addi	r19,r19,-1
   2f300:	00800044 	movi	r2,1
   2f304:	8ce6703a 	and	r19,r17,r19
   2f308:	80800015 	stw	r2,0(r16)
   2f30c:	9823883a 	mov	r17,r19
   2f310:	003fcc06 	br	2f244 <_dtoa_r+0x74>
   2f314:	d8800204 	addi	r2,sp,8
   2f318:	d8800015 	stw	r2,0(sp)
   2f31c:	d9c00104 	addi	r7,sp,4
   2f320:	900b883a 	mov	r5,r18
   2f324:	980d883a 	mov	r6,r19
   2f328:	e009883a 	mov	r4,fp
   2f32c:	8820d53a 	srli	r16,r17,20
   2f330:	0031f780 	call	31f78 <__d2b>
   2f334:	d8800915 	stw	r2,36(sp)
   2f338:	8001651e 	bne	r16,zero,2f8d0 <_dtoa_r+0x700>
   2f33c:	dd800217 	ldw	r22,8(sp)
   2f340:	dc000117 	ldw	r16,4(sp)
   2f344:	00800804 	movi	r2,32
   2f348:	b421883a 	add	r16,r22,r16
   2f34c:	80c10c84 	addi	r3,r16,1074
   2f350:	10c2d10e 	bge	r2,r3,2fe98 <_dtoa_r+0xcc8>
   2f354:	00801004 	movi	r2,64
   2f358:	81010484 	addi	r4,r16,1042
   2f35c:	10c7c83a 	sub	r3,r2,r3
   2f360:	9108d83a 	srl	r4,r18,r4
   2f364:	88e2983a 	sll	r17,r17,r3
   2f368:	2448b03a 	or	r4,r4,r17
   2f36c:	00294440 	call	29444 <__floatunsidf>
   2f370:	017f8434 	movhi	r5,65040
   2f374:	01800044 	movi	r6,1
   2f378:	1009883a 	mov	r4,r2
   2f37c:	194b883a 	add	r5,r3,r5
   2f380:	843fffc4 	addi	r16,r16,-1
   2f384:	d9801115 	stw	r6,68(sp)
   2f388:	000d883a 	mov	r6,zero
   2f38c:	01cffe34 	movhi	r7,16376
   2f390:	00289ec0 	call	289ec <__subdf3>
   2f394:	0198dbf4 	movhi	r6,25455
   2f398:	01cff4f4 	movhi	r7,16339
   2f39c:	3190d844 	addi	r6,r6,17249
   2f3a0:	39e1e9c4 	addi	r7,r7,-30809
   2f3a4:	1009883a 	mov	r4,r2
   2f3a8:	180b883a 	mov	r5,r3
   2f3ac:	00282d40 	call	282d4 <__muldf3>
   2f3b0:	01a2d874 	movhi	r6,35681
   2f3b4:	01cff1f4 	movhi	r7,16327
   2f3b8:	31b22cc4 	addi	r6,r6,-14157
   2f3bc:	39e28a04 	addi	r7,r7,-30168
   2f3c0:	180b883a 	mov	r5,r3
   2f3c4:	1009883a 	mov	r4,r2
   2f3c8:	0026ee80 	call	26ee8 <__adddf3>
   2f3cc:	8009883a 	mov	r4,r16
   2f3d0:	1029883a 	mov	r20,r2
   2f3d4:	1823883a 	mov	r17,r3
   2f3d8:	00293680 	call	29368 <__floatsidf>
   2f3dc:	019427f4 	movhi	r6,20639
   2f3e0:	01cff4f4 	movhi	r7,16339
   2f3e4:	319e7ec4 	addi	r6,r6,31227
   2f3e8:	39d104c4 	addi	r7,r7,17427
   2f3ec:	1009883a 	mov	r4,r2
   2f3f0:	180b883a 	mov	r5,r3
   2f3f4:	00282d40 	call	282d4 <__muldf3>
   2f3f8:	100d883a 	mov	r6,r2
   2f3fc:	180f883a 	mov	r7,r3
   2f400:	a009883a 	mov	r4,r20
   2f404:	880b883a 	mov	r5,r17
   2f408:	0026ee80 	call	26ee8 <__adddf3>
   2f40c:	1009883a 	mov	r4,r2
   2f410:	180b883a 	mov	r5,r3
   2f414:	1029883a 	mov	r20,r2
   2f418:	1823883a 	mov	r17,r3
   2f41c:	00292e80 	call	292e8 <__fixdfsi>
   2f420:	000d883a 	mov	r6,zero
   2f424:	000f883a 	mov	r7,zero
   2f428:	a009883a 	mov	r4,r20
   2f42c:	880b883a 	mov	r5,r17
   2f430:	d8800515 	stw	r2,20(sp)
   2f434:	00281e00 	call	281e0 <__ledf2>
   2f438:	10028716 	blt	r2,zero,2fe58 <_dtoa_r+0xc88>
   2f43c:	d8c00517 	ldw	r3,20(sp)
   2f440:	00800584 	movi	r2,22
   2f444:	10c27536 	bltu	r2,r3,2fe1c <_dtoa_r+0xc4c>
   2f448:	180490fa 	slli	r2,r3,3
   2f44c:	00c00134 	movhi	r3,4
   2f450:	18e37504 	addi	r3,r3,-29228
   2f454:	1885883a 	add	r2,r3,r2
   2f458:	11000017 	ldw	r4,0(r2)
   2f45c:	11400117 	ldw	r5,4(r2)
   2f460:	900d883a 	mov	r6,r18
   2f464:	980f883a 	mov	r7,r19
   2f468:	00281040 	call	28104 <__gedf2>
   2f46c:	00828d0e 	bge	zero,r2,2fea4 <_dtoa_r+0xcd4>
   2f470:	d9000517 	ldw	r4,20(sp)
   2f474:	d8000e15 	stw	zero,56(sp)
   2f478:	213fffc4 	addi	r4,r4,-1
   2f47c:	d9000515 	stw	r4,20(sp)
   2f480:	b42dc83a 	sub	r22,r22,r16
   2f484:	b5bfffc4 	addi	r22,r22,-1
   2f488:	b0026f16 	blt	r22,zero,2fe48 <_dtoa_r+0xc78>
   2f48c:	d8000815 	stw	zero,32(sp)
   2f490:	d9c00517 	ldw	r7,20(sp)
   2f494:	38026416 	blt	r7,zero,2fe28 <_dtoa_r+0xc58>
   2f498:	b1ed883a 	add	r22,r22,r7
   2f49c:	d9c00d15 	stw	r7,52(sp)
   2f4a0:	d8000a15 	stw	zero,40(sp)
   2f4a4:	d9800317 	ldw	r6,12(sp)
   2f4a8:	00800244 	movi	r2,9
   2f4ac:	11811436 	bltu	r2,r6,2f900 <_dtoa_r+0x730>
   2f4b0:	00800144 	movi	r2,5
   2f4b4:	1184e10e 	bge	r2,r6,3083c <_dtoa_r+0x166c>
   2f4b8:	31bfff04 	addi	r6,r6,-4
   2f4bc:	d9800315 	stw	r6,12(sp)
   2f4c0:	0023883a 	mov	r17,zero
   2f4c4:	d9800317 	ldw	r6,12(sp)
   2f4c8:	008000c4 	movi	r2,3
   2f4cc:	30836726 	beq	r6,r2,3026c <_dtoa_r+0x109c>
   2f4d0:	1183410e 	bge	r2,r6,301d8 <_dtoa_r+0x1008>
   2f4d4:	d9c00317 	ldw	r7,12(sp)
   2f4d8:	00800104 	movi	r2,4
   2f4dc:	38827c26 	beq	r7,r2,2fed0 <_dtoa_r+0xd00>
   2f4e0:	00800144 	movi	r2,5
   2f4e4:	3884c41e 	bne	r7,r2,307f8 <_dtoa_r+0x1628>
   2f4e8:	00800044 	movi	r2,1
   2f4ec:	d8800b15 	stw	r2,44(sp)
   2f4f0:	d8c00517 	ldw	r3,20(sp)
   2f4f4:	d9002217 	ldw	r4,136(sp)
   2f4f8:	1907883a 	add	r3,r3,r4
   2f4fc:	19800044 	addi	r6,r3,1
   2f500:	d8c00c15 	stw	r3,48(sp)
   2f504:	d9800615 	stw	r6,24(sp)
   2f508:	0183a40e 	bge	zero,r6,3039c <_dtoa_r+0x11cc>
   2f50c:	d9800617 	ldw	r6,24(sp)
   2f510:	3021883a 	mov	r16,r6
   2f514:	e0001115 	stw	zero,68(fp)
   2f518:	008005c4 	movi	r2,23
   2f51c:	1184c92e 	bgeu	r2,r6,30844 <_dtoa_r+0x1674>
   2f520:	00c00044 	movi	r3,1
   2f524:	00800104 	movi	r2,4
   2f528:	1085883a 	add	r2,r2,r2
   2f52c:	11000504 	addi	r4,r2,20
   2f530:	180b883a 	mov	r5,r3
   2f534:	18c00044 	addi	r3,r3,1
   2f538:	313ffb2e 	bgeu	r6,r4,2f528 <_dtoa_r+0x358>
   2f53c:	e1401115 	stw	r5,68(fp)
   2f540:	e009883a 	mov	r4,fp
   2f544:	00312e40 	call	312e4 <_Balloc>
   2f548:	d8800715 	stw	r2,28(sp)
   2f54c:	e0801015 	stw	r2,64(fp)
   2f550:	00800384 	movi	r2,14
   2f554:	1400f736 	bltu	r2,r16,2f934 <_dtoa_r+0x764>
   2f558:	8800f626 	beq	r17,zero,2f934 <_dtoa_r+0x764>
   2f55c:	d9c00517 	ldw	r7,20(sp)
   2f560:	01c39a0e 	bge	zero,r7,303cc <_dtoa_r+0x11fc>
   2f564:	388003cc 	andi	r2,r7,15
   2f568:	100490fa 	slli	r2,r2,3
   2f56c:	382bd13a 	srai	r21,r7,4
   2f570:	00c00134 	movhi	r3,4
   2f574:	18e37504 	addi	r3,r3,-29228
   2f578:	1885883a 	add	r2,r3,r2
   2f57c:	a8c0040c 	andi	r3,r21,16
   2f580:	12400017 	ldw	r9,0(r2)
   2f584:	12000117 	ldw	r8,4(r2)
   2f588:	18037926 	beq	r3,zero,30370 <_dtoa_r+0x11a0>
   2f58c:	00800134 	movhi	r2,4
   2f590:	10a36b04 	addi	r2,r2,-29268
   2f594:	11800817 	ldw	r6,32(r2)
   2f598:	11c00917 	ldw	r7,36(r2)
   2f59c:	9009883a 	mov	r4,r18
   2f5a0:	980b883a 	mov	r5,r19
   2f5a4:	da001715 	stw	r8,92(sp)
   2f5a8:	da401615 	stw	r9,88(sp)
   2f5ac:	00277940 	call	27794 <__divdf3>
   2f5b0:	da001717 	ldw	r8,92(sp)
   2f5b4:	da401617 	ldw	r9,88(sp)
   2f5b8:	ad4003cc 	andi	r21,r21,15
   2f5bc:	040000c4 	movi	r16,3
   2f5c0:	1023883a 	mov	r17,r2
   2f5c4:	1829883a 	mov	r20,r3
   2f5c8:	a8001126 	beq	r21,zero,2f610 <_dtoa_r+0x440>
   2f5cc:	05c00134 	movhi	r23,4
   2f5d0:	bde36b04 	addi	r23,r23,-29268
   2f5d4:	4805883a 	mov	r2,r9
   2f5d8:	4007883a 	mov	r3,r8
   2f5dc:	a980004c 	andi	r6,r21,1
   2f5e0:	1009883a 	mov	r4,r2
   2f5e4:	a82bd07a 	srai	r21,r21,1
   2f5e8:	180b883a 	mov	r5,r3
   2f5ec:	30000426 	beq	r6,zero,2f600 <_dtoa_r+0x430>
   2f5f0:	b9800017 	ldw	r6,0(r23)
   2f5f4:	b9c00117 	ldw	r7,4(r23)
   2f5f8:	84000044 	addi	r16,r16,1
   2f5fc:	00282d40 	call	282d4 <__muldf3>
   2f600:	bdc00204 	addi	r23,r23,8
   2f604:	a83ff51e 	bne	r21,zero,2f5dc <_dtoa_r+0x40c>
   2f608:	1013883a 	mov	r9,r2
   2f60c:	1811883a 	mov	r8,r3
   2f610:	480d883a 	mov	r6,r9
   2f614:	400f883a 	mov	r7,r8
   2f618:	8809883a 	mov	r4,r17
   2f61c:	a00b883a 	mov	r5,r20
   2f620:	00277940 	call	27794 <__divdf3>
   2f624:	d8800f15 	stw	r2,60(sp)
   2f628:	d8c01015 	stw	r3,64(sp)
   2f62c:	d8c00e17 	ldw	r3,56(sp)
   2f630:	18000626 	beq	r3,zero,2f64c <_dtoa_r+0x47c>
   2f634:	d9000f17 	ldw	r4,60(sp)
   2f638:	d9401017 	ldw	r5,64(sp)
   2f63c:	000d883a 	mov	r6,zero
   2f640:	01cffc34 	movhi	r7,16368
   2f644:	00281e00 	call	281e0 <__ledf2>
   2f648:	10040b16 	blt	r2,zero,30678 <_dtoa_r+0x14a8>
   2f64c:	8009883a 	mov	r4,r16
   2f650:	00293680 	call	29368 <__floatsidf>
   2f654:	d9800f17 	ldw	r6,60(sp)
   2f658:	d9c01017 	ldw	r7,64(sp)
   2f65c:	1009883a 	mov	r4,r2
   2f660:	180b883a 	mov	r5,r3
   2f664:	00282d40 	call	282d4 <__muldf3>
   2f668:	000d883a 	mov	r6,zero
   2f66c:	01d00734 	movhi	r7,16412
   2f670:	1009883a 	mov	r4,r2
   2f674:	180b883a 	mov	r5,r3
   2f678:	0026ee80 	call	26ee8 <__adddf3>
   2f67c:	1021883a 	mov	r16,r2
   2f680:	d8800617 	ldw	r2,24(sp)
   2f684:	047f3034 	movhi	r17,64704
   2f688:	1c63883a 	add	r17,r3,r17
   2f68c:	10031826 	beq	r2,zero,302f0 <_dtoa_r+0x1120>
   2f690:	d8c00517 	ldw	r3,20(sp)
   2f694:	db000617 	ldw	r12,24(sp)
   2f698:	d8c01315 	stw	r3,76(sp)
   2f69c:	d9000b17 	ldw	r4,44(sp)
   2f6a0:	20038f26 	beq	r4,zero,304e0 <_dtoa_r+0x1310>
   2f6a4:	60bfffc4 	addi	r2,r12,-1
   2f6a8:	100490fa 	slli	r2,r2,3
   2f6ac:	00c00134 	movhi	r3,4
   2f6b0:	18e37504 	addi	r3,r3,-29228
   2f6b4:	1885883a 	add	r2,r3,r2
   2f6b8:	11800017 	ldw	r6,0(r2)
   2f6bc:	11c00117 	ldw	r7,4(r2)
   2f6c0:	d8800717 	ldw	r2,28(sp)
   2f6c4:	0009883a 	mov	r4,zero
   2f6c8:	014ff834 	movhi	r5,16352
   2f6cc:	db001615 	stw	r12,88(sp)
   2f6d0:	15c00044 	addi	r23,r2,1
   2f6d4:	00277940 	call	27794 <__divdf3>
   2f6d8:	800d883a 	mov	r6,r16
   2f6dc:	880f883a 	mov	r7,r17
   2f6e0:	1009883a 	mov	r4,r2
   2f6e4:	180b883a 	mov	r5,r3
   2f6e8:	00289ec0 	call	289ec <__subdf3>
   2f6ec:	d9401017 	ldw	r5,64(sp)
   2f6f0:	d9000f17 	ldw	r4,60(sp)
   2f6f4:	102b883a 	mov	r21,r2
   2f6f8:	d8c01215 	stw	r3,72(sp)
   2f6fc:	00292e80 	call	292e8 <__fixdfsi>
   2f700:	1009883a 	mov	r4,r2
   2f704:	1029883a 	mov	r20,r2
   2f708:	00293680 	call	29368 <__floatsidf>
   2f70c:	d9000f17 	ldw	r4,60(sp)
   2f710:	d9401017 	ldw	r5,64(sp)
   2f714:	100d883a 	mov	r6,r2
   2f718:	180f883a 	mov	r7,r3
   2f71c:	00289ec0 	call	289ec <__subdf3>
   2f720:	1823883a 	mov	r17,r3
   2f724:	d8c00717 	ldw	r3,28(sp)
   2f728:	d9401217 	ldw	r5,72(sp)
   2f72c:	a2000c04 	addi	r8,r20,48
   2f730:	1021883a 	mov	r16,r2
   2f734:	1a000005 	stb	r8,0(r3)
   2f738:	800d883a 	mov	r6,r16
   2f73c:	880f883a 	mov	r7,r17
   2f740:	a809883a 	mov	r4,r21
   2f744:	4029883a 	mov	r20,r8
   2f748:	00281040 	call	28104 <__gedf2>
   2f74c:	00841d16 	blt	zero,r2,307c4 <_dtoa_r+0x15f4>
   2f750:	800d883a 	mov	r6,r16
   2f754:	880f883a 	mov	r7,r17
   2f758:	0009883a 	mov	r4,zero
   2f75c:	014ffc34 	movhi	r5,16368
   2f760:	00289ec0 	call	289ec <__subdf3>
   2f764:	d9401217 	ldw	r5,72(sp)
   2f768:	100d883a 	mov	r6,r2
   2f76c:	180f883a 	mov	r7,r3
   2f770:	a809883a 	mov	r4,r21
   2f774:	00281040 	call	28104 <__gedf2>
   2f778:	db001617 	ldw	r12,88(sp)
   2f77c:	00840e16 	blt	zero,r2,307b8 <_dtoa_r+0x15e8>
   2f780:	00800044 	movi	r2,1
   2f784:	13006b0e 	bge	r2,r12,2f934 <_dtoa_r+0x764>
   2f788:	d9000717 	ldw	r4,28(sp)
   2f78c:	dd800f15 	stw	r22,60(sp)
   2f790:	dcc01015 	stw	r19,64(sp)
   2f794:	2319883a 	add	r12,r4,r12
   2f798:	dcc01217 	ldw	r19,72(sp)
   2f79c:	602d883a 	mov	r22,r12
   2f7a0:	dc801215 	stw	r18,72(sp)
   2f7a4:	b825883a 	mov	r18,r23
   2f7a8:	00000906 	br	2f7d0 <_dtoa_r+0x600>
   2f7ac:	00289ec0 	call	289ec <__subdf3>
   2f7b0:	a80d883a 	mov	r6,r21
   2f7b4:	980f883a 	mov	r7,r19
   2f7b8:	1009883a 	mov	r4,r2
   2f7bc:	180b883a 	mov	r5,r3
   2f7c0:	00281e00 	call	281e0 <__ledf2>
   2f7c4:	1003e816 	blt	r2,zero,30768 <_dtoa_r+0x1598>
   2f7c8:	b825883a 	mov	r18,r23
   2f7cc:	bd83e926 	beq	r23,r22,30774 <_dtoa_r+0x15a4>
   2f7d0:	a809883a 	mov	r4,r21
   2f7d4:	980b883a 	mov	r5,r19
   2f7d8:	000d883a 	mov	r6,zero
   2f7dc:	01d00934 	movhi	r7,16420
   2f7e0:	00282d40 	call	282d4 <__muldf3>
   2f7e4:	000d883a 	mov	r6,zero
   2f7e8:	01d00934 	movhi	r7,16420
   2f7ec:	8009883a 	mov	r4,r16
   2f7f0:	880b883a 	mov	r5,r17
   2f7f4:	102b883a 	mov	r21,r2
   2f7f8:	1827883a 	mov	r19,r3
   2f7fc:	00282d40 	call	282d4 <__muldf3>
   2f800:	180b883a 	mov	r5,r3
   2f804:	1009883a 	mov	r4,r2
   2f808:	1821883a 	mov	r16,r3
   2f80c:	1023883a 	mov	r17,r2
   2f810:	00292e80 	call	292e8 <__fixdfsi>
   2f814:	1009883a 	mov	r4,r2
   2f818:	1029883a 	mov	r20,r2
   2f81c:	00293680 	call	29368 <__floatsidf>
   2f820:	8809883a 	mov	r4,r17
   2f824:	800b883a 	mov	r5,r16
   2f828:	100d883a 	mov	r6,r2
   2f82c:	180f883a 	mov	r7,r3
   2f830:	00289ec0 	call	289ec <__subdf3>
   2f834:	a5000c04 	addi	r20,r20,48
   2f838:	a80d883a 	mov	r6,r21
   2f83c:	980f883a 	mov	r7,r19
   2f840:	1009883a 	mov	r4,r2
   2f844:	180b883a 	mov	r5,r3
   2f848:	95000005 	stb	r20,0(r18)
   2f84c:	1021883a 	mov	r16,r2
   2f850:	1823883a 	mov	r17,r3
   2f854:	00281e00 	call	281e0 <__ledf2>
   2f858:	bdc00044 	addi	r23,r23,1
   2f85c:	800d883a 	mov	r6,r16
   2f860:	880f883a 	mov	r7,r17
   2f864:	0009883a 	mov	r4,zero
   2f868:	014ffc34 	movhi	r5,16368
   2f86c:	103fcf0e 	bge	r2,zero,2f7ac <_dtoa_r+0x5dc>
   2f870:	d8c01317 	ldw	r3,76(sp)
   2f874:	d8c00515 	stw	r3,20(sp)
   2f878:	d9400917 	ldw	r5,36(sp)
   2f87c:	e009883a 	mov	r4,fp
   2f880:	003138c0 	call	3138c <_Bfree>
   2f884:	d9000517 	ldw	r4,20(sp)
   2f888:	d9802317 	ldw	r6,140(sp)
   2f88c:	d9c02517 	ldw	r7,148(sp)
   2f890:	b8000005 	stb	zero,0(r23)
   2f894:	20800044 	addi	r2,r4,1
   2f898:	30800015 	stw	r2,0(r6)
   2f89c:	3802aa26 	beq	r7,zero,30348 <_dtoa_r+0x1178>
   2f8a0:	3dc00015 	stw	r23,0(r7)
   2f8a4:	d8800717 	ldw	r2,28(sp)
   2f8a8:	003e7906 	br	2f290 <_dtoa_r+0xc0>
   2f8ac:	00800434 	movhi	r2,16
   2f8b0:	10bfffc4 	addi	r2,r2,-1
   2f8b4:	88a2703a 	and	r17,r17,r2
   2f8b8:	883e851e 	bne	r17,zero,2f2d0 <_dtoa_r+0x100>
   2f8bc:	00800134 	movhi	r2,4
   2f8c0:	10a35704 	addi	r2,r2,-29348
   2f8c4:	003e8406 	br	2f2d8 <_dtoa_r+0x108>
   2f8c8:	10c00204 	addi	r3,r2,8
   2f8cc:	003e8706 	br	2f2ec <_dtoa_r+0x11c>
   2f8d0:	01400434 	movhi	r5,16
   2f8d4:	297fffc4 	addi	r5,r5,-1
   2f8d8:	994a703a 	and	r5,r19,r5
   2f8dc:	9009883a 	mov	r4,r18
   2f8e0:	843f0044 	addi	r16,r16,-1023
   2f8e4:	294ffc34 	orhi	r5,r5,16368
   2f8e8:	dd800217 	ldw	r22,8(sp)
   2f8ec:	d8001115 	stw	zero,68(sp)
   2f8f0:	003ea506 	br	2f388 <_dtoa_r+0x1b8>
   2f8f4:	00800134 	movhi	r2,4
   2f8f8:	10a2ae04 	addi	r2,r2,-30024
   2f8fc:	003e6406 	br	2f290 <_dtoa_r+0xc0>
   2f900:	e0001115 	stw	zero,68(fp)
   2f904:	000b883a 	mov	r5,zero
   2f908:	e009883a 	mov	r4,fp
   2f90c:	00312e40 	call	312e4 <_Balloc>
   2f910:	01bfffc4 	movi	r6,-1
   2f914:	01c00044 	movi	r7,1
   2f918:	d8800715 	stw	r2,28(sp)
   2f91c:	d9800c15 	stw	r6,48(sp)
   2f920:	e0801015 	stw	r2,64(fp)
   2f924:	d8000315 	stw	zero,12(sp)
   2f928:	d9c00b15 	stw	r7,44(sp)
   2f92c:	d9800615 	stw	r6,24(sp)
   2f930:	d8002215 	stw	zero,136(sp)
   2f934:	d8800117 	ldw	r2,4(sp)
   2f938:	10008916 	blt	r2,zero,2fb60 <_dtoa_r+0x990>
   2f93c:	d9000517 	ldw	r4,20(sp)
   2f940:	00c00384 	movi	r3,14
   2f944:	19008616 	blt	r3,r4,2fb60 <_dtoa_r+0x990>
   2f948:	200490fa 	slli	r2,r4,3
   2f94c:	00c00134 	movhi	r3,4
   2f950:	d9802217 	ldw	r6,136(sp)
   2f954:	18e37504 	addi	r3,r3,-29228
   2f958:	1885883a 	add	r2,r3,r2
   2f95c:	14000017 	ldw	r16,0(r2)
   2f960:	14400117 	ldw	r17,4(r2)
   2f964:	30016316 	blt	r6,zero,2fef4 <_dtoa_r+0xd24>
   2f968:	800d883a 	mov	r6,r16
   2f96c:	880f883a 	mov	r7,r17
   2f970:	9009883a 	mov	r4,r18
   2f974:	980b883a 	mov	r5,r19
   2f978:	00277940 	call	27794 <__divdf3>
   2f97c:	180b883a 	mov	r5,r3
   2f980:	1009883a 	mov	r4,r2
   2f984:	00292e80 	call	292e8 <__fixdfsi>
   2f988:	1009883a 	mov	r4,r2
   2f98c:	102b883a 	mov	r21,r2
   2f990:	00293680 	call	29368 <__floatsidf>
   2f994:	800d883a 	mov	r6,r16
   2f998:	880f883a 	mov	r7,r17
   2f99c:	1009883a 	mov	r4,r2
   2f9a0:	180b883a 	mov	r5,r3
   2f9a4:	00282d40 	call	282d4 <__muldf3>
   2f9a8:	100d883a 	mov	r6,r2
   2f9ac:	180f883a 	mov	r7,r3
   2f9b0:	9009883a 	mov	r4,r18
   2f9b4:	980b883a 	mov	r5,r19
   2f9b8:	00289ec0 	call	289ec <__subdf3>
   2f9bc:	d9c00717 	ldw	r7,28(sp)
   2f9c0:	1009883a 	mov	r4,r2
   2f9c4:	a8800c04 	addi	r2,r21,48
   2f9c8:	38800005 	stb	r2,0(r7)
   2f9cc:	3dc00044 	addi	r23,r7,1
   2f9d0:	d9c00617 	ldw	r7,24(sp)
   2f9d4:	01800044 	movi	r6,1
   2f9d8:	180b883a 	mov	r5,r3
   2f9dc:	2005883a 	mov	r2,r4
   2f9e0:	39803826 	beq	r7,r6,2fac4 <_dtoa_r+0x8f4>
   2f9e4:	000d883a 	mov	r6,zero
   2f9e8:	01d00934 	movhi	r7,16420
   2f9ec:	00282d40 	call	282d4 <__muldf3>
   2f9f0:	000d883a 	mov	r6,zero
   2f9f4:	000f883a 	mov	r7,zero
   2f9f8:	1009883a 	mov	r4,r2
   2f9fc:	180b883a 	mov	r5,r3
   2fa00:	1025883a 	mov	r18,r2
   2fa04:	1827883a 	mov	r19,r3
   2fa08:	002807c0 	call	2807c <__eqdf2>
   2fa0c:	103f9a26 	beq	r2,zero,2f878 <_dtoa_r+0x6a8>
   2fa10:	d9c00617 	ldw	r7,24(sp)
   2fa14:	d8c00717 	ldw	r3,28(sp)
   2fa18:	b829883a 	mov	r20,r23
   2fa1c:	38bfffc4 	addi	r2,r7,-1
   2fa20:	18ad883a 	add	r22,r3,r2
   2fa24:	00000a06 	br	2fa50 <_dtoa_r+0x880>
   2fa28:	00282d40 	call	282d4 <__muldf3>
   2fa2c:	000d883a 	mov	r6,zero
   2fa30:	000f883a 	mov	r7,zero
   2fa34:	1009883a 	mov	r4,r2
   2fa38:	180b883a 	mov	r5,r3
   2fa3c:	1025883a 	mov	r18,r2
   2fa40:	1827883a 	mov	r19,r3
   2fa44:	b829883a 	mov	r20,r23
   2fa48:	002807c0 	call	2807c <__eqdf2>
   2fa4c:	103f8a26 	beq	r2,zero,2f878 <_dtoa_r+0x6a8>
   2fa50:	800d883a 	mov	r6,r16
   2fa54:	880f883a 	mov	r7,r17
   2fa58:	9009883a 	mov	r4,r18
   2fa5c:	980b883a 	mov	r5,r19
   2fa60:	00277940 	call	27794 <__divdf3>
   2fa64:	180b883a 	mov	r5,r3
   2fa68:	1009883a 	mov	r4,r2
   2fa6c:	00292e80 	call	292e8 <__fixdfsi>
   2fa70:	1009883a 	mov	r4,r2
   2fa74:	102b883a 	mov	r21,r2
   2fa78:	00293680 	call	29368 <__floatsidf>
   2fa7c:	800d883a 	mov	r6,r16
   2fa80:	880f883a 	mov	r7,r17
   2fa84:	1009883a 	mov	r4,r2
   2fa88:	180b883a 	mov	r5,r3
   2fa8c:	00282d40 	call	282d4 <__muldf3>
   2fa90:	100d883a 	mov	r6,r2
   2fa94:	180f883a 	mov	r7,r3
   2fa98:	9009883a 	mov	r4,r18
   2fa9c:	980b883a 	mov	r5,r19
   2faa0:	00289ec0 	call	289ec <__subdf3>
   2faa4:	aa000c04 	addi	r8,r21,48
   2faa8:	a2000005 	stb	r8,0(r20)
   2faac:	000d883a 	mov	r6,zero
   2fab0:	01d00934 	movhi	r7,16420
   2fab4:	1009883a 	mov	r4,r2
   2fab8:	180b883a 	mov	r5,r3
   2fabc:	a5c00044 	addi	r23,r20,1
   2fac0:	b53fd91e 	bne	r22,r20,2fa28 <_dtoa_r+0x858>
   2fac4:	100d883a 	mov	r6,r2
   2fac8:	180f883a 	mov	r7,r3
   2facc:	1009883a 	mov	r4,r2
   2fad0:	180b883a 	mov	r5,r3
   2fad4:	0026ee80 	call	26ee8 <__adddf3>
   2fad8:	100d883a 	mov	r6,r2
   2fadc:	180f883a 	mov	r7,r3
   2fae0:	8009883a 	mov	r4,r16
   2fae4:	880b883a 	mov	r5,r17
   2fae8:	1027883a 	mov	r19,r2
   2faec:	1825883a 	mov	r18,r3
   2faf0:	00281e00 	call	281e0 <__ledf2>
   2faf4:	10000816 	blt	r2,zero,2fb18 <_dtoa_r+0x948>
   2faf8:	980d883a 	mov	r6,r19
   2fafc:	900f883a 	mov	r7,r18
   2fb00:	8009883a 	mov	r4,r16
   2fb04:	880b883a 	mov	r5,r17
   2fb08:	002807c0 	call	2807c <__eqdf2>
   2fb0c:	103f5a1e 	bne	r2,zero,2f878 <_dtoa_r+0x6a8>
   2fb10:	ad40004c 	andi	r21,r21,1
   2fb14:	a83f5826 	beq	r21,zero,2f878 <_dtoa_r+0x6a8>
   2fb18:	bd3fffc3 	ldbu	r20,-1(r23)
   2fb1c:	b8bfffc4 	addi	r2,r23,-1
   2fb20:	1007883a 	mov	r3,r2
   2fb24:	01400e44 	movi	r5,57
   2fb28:	d9800717 	ldw	r6,28(sp)
   2fb2c:	00000506 	br	2fb44 <_dtoa_r+0x974>
   2fb30:	18ffffc4 	addi	r3,r3,-1
   2fb34:	11824726 	beq	r2,r6,30454 <_dtoa_r+0x1284>
   2fb38:	1d000003 	ldbu	r20,0(r3)
   2fb3c:	102f883a 	mov	r23,r2
   2fb40:	10bfffc4 	addi	r2,r2,-1
   2fb44:	a1003fcc 	andi	r4,r20,255
   2fb48:	2100201c 	xori	r4,r4,128
   2fb4c:	213fe004 	addi	r4,r4,-128
   2fb50:	217ff726 	beq	r4,r5,2fb30 <_dtoa_r+0x960>
   2fb54:	a2000044 	addi	r8,r20,1
   2fb58:	12000005 	stb	r8,0(r2)
   2fb5c:	003f4606 	br	2f878 <_dtoa_r+0x6a8>
   2fb60:	d9000b17 	ldw	r4,44(sp)
   2fb64:	2000c826 	beq	r4,zero,2fe88 <_dtoa_r+0xcb8>
   2fb68:	d9800317 	ldw	r6,12(sp)
   2fb6c:	00c00044 	movi	r3,1
   2fb70:	1980f90e 	bge	r3,r6,2ff58 <_dtoa_r+0xd88>
   2fb74:	d8800617 	ldw	r2,24(sp)
   2fb78:	d8c00a17 	ldw	r3,40(sp)
   2fb7c:	157fffc4 	addi	r21,r2,-1
   2fb80:	1d41f316 	blt	r3,r21,30350 <_dtoa_r+0x1180>
   2fb84:	1d6bc83a 	sub	r21,r3,r21
   2fb88:	d9c00617 	ldw	r7,24(sp)
   2fb8c:	3802aa16 	blt	r7,zero,30638 <_dtoa_r+0x1468>
   2fb90:	dd000817 	ldw	r20,32(sp)
   2fb94:	d8800617 	ldw	r2,24(sp)
   2fb98:	d8c00817 	ldw	r3,32(sp)
   2fb9c:	01400044 	movi	r5,1
   2fba0:	e009883a 	mov	r4,fp
   2fba4:	1887883a 	add	r3,r3,r2
   2fba8:	d8c00815 	stw	r3,32(sp)
   2fbac:	b0ad883a 	add	r22,r22,r2
   2fbb0:	00316f00 	call	316f0 <__i2b>
   2fbb4:	1023883a 	mov	r17,r2
   2fbb8:	a0000826 	beq	r20,zero,2fbdc <_dtoa_r+0xa0c>
   2fbbc:	0580070e 	bge	zero,r22,2fbdc <_dtoa_r+0xa0c>
   2fbc0:	a005883a 	mov	r2,r20
   2fbc4:	b500b916 	blt	r22,r20,2feac <_dtoa_r+0xcdc>
   2fbc8:	d9000817 	ldw	r4,32(sp)
   2fbcc:	a0a9c83a 	sub	r20,r20,r2
   2fbd0:	b0adc83a 	sub	r22,r22,r2
   2fbd4:	2089c83a 	sub	r4,r4,r2
   2fbd8:	d9000815 	stw	r4,32(sp)
   2fbdc:	d9800a17 	ldw	r6,40(sp)
   2fbe0:	0181810e 	bge	zero,r6,301e8 <_dtoa_r+0x1018>
   2fbe4:	d9c00b17 	ldw	r7,44(sp)
   2fbe8:	3800b326 	beq	r7,zero,2feb8 <_dtoa_r+0xce8>
   2fbec:	a800b226 	beq	r21,zero,2feb8 <_dtoa_r+0xce8>
   2fbf0:	880b883a 	mov	r5,r17
   2fbf4:	a80d883a 	mov	r6,r21
   2fbf8:	e009883a 	mov	r4,fp
   2fbfc:	00319240 	call	31924 <__pow5mult>
   2fc00:	d9800917 	ldw	r6,36(sp)
   2fc04:	100b883a 	mov	r5,r2
   2fc08:	e009883a 	mov	r4,fp
   2fc0c:	1023883a 	mov	r17,r2
   2fc10:	003172c0 	call	3172c <__multiply>
   2fc14:	1021883a 	mov	r16,r2
   2fc18:	d8800a17 	ldw	r2,40(sp)
   2fc1c:	d9400917 	ldw	r5,36(sp)
   2fc20:	e009883a 	mov	r4,fp
   2fc24:	1545c83a 	sub	r2,r2,r21
   2fc28:	d8800a15 	stw	r2,40(sp)
   2fc2c:	003138c0 	call	3138c <_Bfree>
   2fc30:	d8c00a17 	ldw	r3,40(sp)
   2fc34:	18009f1e 	bne	r3,zero,2feb4 <_dtoa_r+0xce4>
   2fc38:	05c00044 	movi	r23,1
   2fc3c:	e009883a 	mov	r4,fp
   2fc40:	b80b883a 	mov	r5,r23
   2fc44:	00316f00 	call	316f0 <__i2b>
   2fc48:	d9000d17 	ldw	r4,52(sp)
   2fc4c:	102b883a 	mov	r21,r2
   2fc50:	2000ce26 	beq	r4,zero,2ff8c <_dtoa_r+0xdbc>
   2fc54:	200d883a 	mov	r6,r4
   2fc58:	100b883a 	mov	r5,r2
   2fc5c:	e009883a 	mov	r4,fp
   2fc60:	00319240 	call	31924 <__pow5mult>
   2fc64:	d9800317 	ldw	r6,12(sp)
   2fc68:	102b883a 	mov	r21,r2
   2fc6c:	b981810e 	bge	r23,r6,30274 <_dtoa_r+0x10a4>
   2fc70:	0027883a 	mov	r19,zero
   2fc74:	a8800417 	ldw	r2,16(r21)
   2fc78:	05c00804 	movi	r23,32
   2fc7c:	10800104 	addi	r2,r2,4
   2fc80:	1085883a 	add	r2,r2,r2
   2fc84:	1085883a 	add	r2,r2,r2
   2fc88:	a885883a 	add	r2,r21,r2
   2fc8c:	11000017 	ldw	r4,0(r2)
   2fc90:	00315d80 	call	315d8 <__hi0bits>
   2fc94:	b885c83a 	sub	r2,r23,r2
   2fc98:	1585883a 	add	r2,r2,r22
   2fc9c:	108007cc 	andi	r2,r2,31
   2fca0:	1000b326 	beq	r2,zero,2ff70 <_dtoa_r+0xda0>
   2fca4:	00c00804 	movi	r3,32
   2fca8:	1887c83a 	sub	r3,r3,r2
   2fcac:	01000104 	movi	r4,4
   2fcb0:	20c2cd0e 	bge	r4,r3,307e8 <_dtoa_r+0x1618>
   2fcb4:	00c00704 	movi	r3,28
   2fcb8:	1885c83a 	sub	r2,r3,r2
   2fcbc:	d8c00817 	ldw	r3,32(sp)
   2fcc0:	a0a9883a 	add	r20,r20,r2
   2fcc4:	b0ad883a 	add	r22,r22,r2
   2fcc8:	1887883a 	add	r3,r3,r2
   2fccc:	d8c00815 	stw	r3,32(sp)
   2fcd0:	d9800817 	ldw	r6,32(sp)
   2fcd4:	0180040e 	bge	zero,r6,2fce8 <_dtoa_r+0xb18>
   2fcd8:	800b883a 	mov	r5,r16
   2fcdc:	e009883a 	mov	r4,fp
   2fce0:	0031a640 	call	31a64 <__lshift>
   2fce4:	1021883a 	mov	r16,r2
   2fce8:	0580050e 	bge	zero,r22,2fd00 <_dtoa_r+0xb30>
   2fcec:	a80b883a 	mov	r5,r21
   2fcf0:	b00d883a 	mov	r6,r22
   2fcf4:	e009883a 	mov	r4,fp
   2fcf8:	0031a640 	call	31a64 <__lshift>
   2fcfc:	102b883a 	mov	r21,r2
   2fd00:	d9c00e17 	ldw	r7,56(sp)
   2fd04:	3801211e 	bne	r7,zero,3018c <_dtoa_r+0xfbc>
   2fd08:	d9800617 	ldw	r6,24(sp)
   2fd0c:	0181380e 	bge	zero,r6,301f0 <_dtoa_r+0x1020>
   2fd10:	d8c00b17 	ldw	r3,44(sp)
   2fd14:	1800ab1e 	bne	r3,zero,2ffc4 <_dtoa_r+0xdf4>
   2fd18:	dc800717 	ldw	r18,28(sp)
   2fd1c:	dcc00617 	ldw	r19,24(sp)
   2fd20:	9029883a 	mov	r20,r18
   2fd24:	00000206 	br	2fd30 <_dtoa_r+0xb60>
   2fd28:	00313b40 	call	313b4 <__multadd>
   2fd2c:	1021883a 	mov	r16,r2
   2fd30:	a80b883a 	mov	r5,r21
   2fd34:	8009883a 	mov	r4,r16
   2fd38:	002efd00 	call	2efd0 <quorem>
   2fd3c:	10800c04 	addi	r2,r2,48
   2fd40:	90800005 	stb	r2,0(r18)
   2fd44:	94800044 	addi	r18,r18,1
   2fd48:	9507c83a 	sub	r3,r18,r20
   2fd4c:	000f883a 	mov	r7,zero
   2fd50:	01800284 	movi	r6,10
   2fd54:	800b883a 	mov	r5,r16
   2fd58:	e009883a 	mov	r4,fp
   2fd5c:	1cfff216 	blt	r3,r19,2fd28 <_dtoa_r+0xb58>
   2fd60:	1011883a 	mov	r8,r2
   2fd64:	d8800617 	ldw	r2,24(sp)
   2fd68:	0082370e 	bge	zero,r2,30648 <_dtoa_r+0x1478>
   2fd6c:	d9000717 	ldw	r4,28(sp)
   2fd70:	0025883a 	mov	r18,zero
   2fd74:	20af883a 	add	r23,r4,r2
   2fd78:	01800044 	movi	r6,1
   2fd7c:	800b883a 	mov	r5,r16
   2fd80:	e009883a 	mov	r4,fp
   2fd84:	da001715 	stw	r8,92(sp)
   2fd88:	0031a640 	call	31a64 <__lshift>
   2fd8c:	a80b883a 	mov	r5,r21
   2fd90:	1009883a 	mov	r4,r2
   2fd94:	d8800915 	stw	r2,36(sp)
   2fd98:	0031bac0 	call	31bac <__mcmp>
   2fd9c:	da001717 	ldw	r8,92(sp)
   2fda0:	0081800e 	bge	zero,r2,303a4 <_dtoa_r+0x11d4>
   2fda4:	b93fffc3 	ldbu	r4,-1(r23)
   2fda8:	b8bfffc4 	addi	r2,r23,-1
   2fdac:	1007883a 	mov	r3,r2
   2fdb0:	01800e44 	movi	r6,57
   2fdb4:	d9c00717 	ldw	r7,28(sp)
   2fdb8:	00000506 	br	2fdd0 <_dtoa_r+0xc00>
   2fdbc:	18ffffc4 	addi	r3,r3,-1
   2fdc0:	11c12326 	beq	r2,r7,30250 <_dtoa_r+0x1080>
   2fdc4:	19000003 	ldbu	r4,0(r3)
   2fdc8:	102f883a 	mov	r23,r2
   2fdcc:	10bfffc4 	addi	r2,r2,-1
   2fdd0:	21403fcc 	andi	r5,r4,255
   2fdd4:	2940201c 	xori	r5,r5,128
   2fdd8:	297fe004 	addi	r5,r5,-128
   2fddc:	29bff726 	beq	r5,r6,2fdbc <_dtoa_r+0xbec>
   2fde0:	21000044 	addi	r4,r4,1
   2fde4:	11000005 	stb	r4,0(r2)
   2fde8:	a80b883a 	mov	r5,r21
   2fdec:	e009883a 	mov	r4,fp
   2fdf0:	003138c0 	call	3138c <_Bfree>
   2fdf4:	883ea026 	beq	r17,zero,2f878 <_dtoa_r+0x6a8>
   2fdf8:	90000426 	beq	r18,zero,2fe0c <_dtoa_r+0xc3c>
   2fdfc:	94400326 	beq	r18,r17,2fe0c <_dtoa_r+0xc3c>
   2fe00:	900b883a 	mov	r5,r18
   2fe04:	e009883a 	mov	r4,fp
   2fe08:	003138c0 	call	3138c <_Bfree>
   2fe0c:	880b883a 	mov	r5,r17
   2fe10:	e009883a 	mov	r4,fp
   2fe14:	003138c0 	call	3138c <_Bfree>
   2fe18:	003e9706 	br	2f878 <_dtoa_r+0x6a8>
   2fe1c:	01800044 	movi	r6,1
   2fe20:	d9800e15 	stw	r6,56(sp)
   2fe24:	003d9606 	br	2f480 <_dtoa_r+0x2b0>
   2fe28:	d8800817 	ldw	r2,32(sp)
   2fe2c:	d8c00517 	ldw	r3,20(sp)
   2fe30:	d8000d15 	stw	zero,52(sp)
   2fe34:	10c5c83a 	sub	r2,r2,r3
   2fe38:	00c9c83a 	sub	r4,zero,r3
   2fe3c:	d8800815 	stw	r2,32(sp)
   2fe40:	d9000a15 	stw	r4,40(sp)
   2fe44:	003d9706 	br	2f4a4 <_dtoa_r+0x2d4>
   2fe48:	05adc83a 	sub	r22,zero,r22
   2fe4c:	dd800815 	stw	r22,32(sp)
   2fe50:	002d883a 	mov	r22,zero
   2fe54:	003d8e06 	br	2f490 <_dtoa_r+0x2c0>
   2fe58:	d9000517 	ldw	r4,20(sp)
   2fe5c:	00293680 	call	29368 <__floatsidf>
   2fe60:	100d883a 	mov	r6,r2
   2fe64:	180f883a 	mov	r7,r3
   2fe68:	a009883a 	mov	r4,r20
   2fe6c:	880b883a 	mov	r5,r17
   2fe70:	002807c0 	call	2807c <__eqdf2>
   2fe74:	103d7126 	beq	r2,zero,2f43c <_dtoa_r+0x26c>
   2fe78:	d9c00517 	ldw	r7,20(sp)
   2fe7c:	39ffffc4 	addi	r7,r7,-1
   2fe80:	d9c00515 	stw	r7,20(sp)
   2fe84:	003d6d06 	br	2f43c <_dtoa_r+0x26c>
   2fe88:	dd400a17 	ldw	r21,40(sp)
   2fe8c:	dd000817 	ldw	r20,32(sp)
   2fe90:	0023883a 	mov	r17,zero
   2fe94:	003f4806 	br	2fbb8 <_dtoa_r+0x9e8>
   2fe98:	10e3c83a 	sub	r17,r2,r3
   2fe9c:	9448983a 	sll	r4,r18,r17
   2fea0:	003d3206 	br	2f36c <_dtoa_r+0x19c>
   2fea4:	d8000e15 	stw	zero,56(sp)
   2fea8:	003d7506 	br	2f480 <_dtoa_r+0x2b0>
   2feac:	b005883a 	mov	r2,r22
   2feb0:	003f4506 	br	2fbc8 <_dtoa_r+0x9f8>
   2feb4:	dc000915 	stw	r16,36(sp)
   2feb8:	d9800a17 	ldw	r6,40(sp)
   2febc:	d9400917 	ldw	r5,36(sp)
   2fec0:	e009883a 	mov	r4,fp
   2fec4:	00319240 	call	31924 <__pow5mult>
   2fec8:	1021883a 	mov	r16,r2
   2fecc:	003f5a06 	br	2fc38 <_dtoa_r+0xa68>
   2fed0:	01c00044 	movi	r7,1
   2fed4:	d9c00b15 	stw	r7,44(sp)
   2fed8:	d8802217 	ldw	r2,136(sp)
   2fedc:	0081280e 	bge	zero,r2,30380 <_dtoa_r+0x11b0>
   2fee0:	100d883a 	mov	r6,r2
   2fee4:	1021883a 	mov	r16,r2
   2fee8:	d8800c15 	stw	r2,48(sp)
   2feec:	d8800615 	stw	r2,24(sp)
   2fef0:	003d8806 	br	2f514 <_dtoa_r+0x344>
   2fef4:	d8800617 	ldw	r2,24(sp)
   2fef8:	00be9b16 	blt	zero,r2,2f968 <_dtoa_r+0x798>
   2fefc:	10010f1e 	bne	r2,zero,3033c <_dtoa_r+0x116c>
   2ff00:	880b883a 	mov	r5,r17
   2ff04:	000d883a 	mov	r6,zero
   2ff08:	01d00534 	movhi	r7,16404
   2ff0c:	8009883a 	mov	r4,r16
   2ff10:	00282d40 	call	282d4 <__muldf3>
   2ff14:	900d883a 	mov	r6,r18
   2ff18:	980f883a 	mov	r7,r19
   2ff1c:	1009883a 	mov	r4,r2
   2ff20:	180b883a 	mov	r5,r3
   2ff24:	00281040 	call	28104 <__gedf2>
   2ff28:	002b883a 	mov	r21,zero
   2ff2c:	0023883a 	mov	r17,zero
   2ff30:	1000bf16 	blt	r2,zero,30230 <_dtoa_r+0x1060>
   2ff34:	d9802217 	ldw	r6,136(sp)
   2ff38:	ddc00717 	ldw	r23,28(sp)
   2ff3c:	018c303a 	nor	r6,zero,r6
   2ff40:	d9800515 	stw	r6,20(sp)
   2ff44:	a80b883a 	mov	r5,r21
   2ff48:	e009883a 	mov	r4,fp
   2ff4c:	003138c0 	call	3138c <_Bfree>
   2ff50:	883e4926 	beq	r17,zero,2f878 <_dtoa_r+0x6a8>
   2ff54:	003fad06 	br	2fe0c <_dtoa_r+0xc3c>
   2ff58:	d9c01117 	ldw	r7,68(sp)
   2ff5c:	3801bc26 	beq	r7,zero,30650 <_dtoa_r+0x1480>
   2ff60:	10810cc4 	addi	r2,r2,1075
   2ff64:	dd400a17 	ldw	r21,40(sp)
   2ff68:	dd000817 	ldw	r20,32(sp)
   2ff6c:	003f0a06 	br	2fb98 <_dtoa_r+0x9c8>
   2ff70:	00800704 	movi	r2,28
   2ff74:	d9000817 	ldw	r4,32(sp)
   2ff78:	a0a9883a 	add	r20,r20,r2
   2ff7c:	b0ad883a 	add	r22,r22,r2
   2ff80:	2089883a 	add	r4,r4,r2
   2ff84:	d9000815 	stw	r4,32(sp)
   2ff88:	003f5106 	br	2fcd0 <_dtoa_r+0xb00>
   2ff8c:	d8c00317 	ldw	r3,12(sp)
   2ff90:	b8c1fc0e 	bge	r23,r3,30784 <_dtoa_r+0x15b4>
   2ff94:	0027883a 	mov	r19,zero
   2ff98:	b805883a 	mov	r2,r23
   2ff9c:	003f3e06 	br	2fc98 <_dtoa_r+0xac8>
   2ffa0:	880b883a 	mov	r5,r17
   2ffa4:	e009883a 	mov	r4,fp
   2ffa8:	000f883a 	mov	r7,zero
   2ffac:	01800284 	movi	r6,10
   2ffb0:	00313b40 	call	313b4 <__multadd>
   2ffb4:	d9000c17 	ldw	r4,48(sp)
   2ffb8:	1023883a 	mov	r17,r2
   2ffbc:	0102040e 	bge	zero,r4,307d0 <_dtoa_r+0x1600>
   2ffc0:	d9000615 	stw	r4,24(sp)
   2ffc4:	0500050e 	bge	zero,r20,2ffdc <_dtoa_r+0xe0c>
   2ffc8:	880b883a 	mov	r5,r17
   2ffcc:	a00d883a 	mov	r6,r20
   2ffd0:	e009883a 	mov	r4,fp
   2ffd4:	0031a640 	call	31a64 <__lshift>
   2ffd8:	1023883a 	mov	r17,r2
   2ffdc:	9801241e 	bne	r19,zero,30470 <_dtoa_r+0x12a0>
   2ffe0:	8829883a 	mov	r20,r17
   2ffe4:	d9000617 	ldw	r4,24(sp)
   2ffe8:	dcc00717 	ldw	r19,28(sp)
   2ffec:	9480004c 	andi	r18,r18,1
   2fff0:	20bfffc4 	addi	r2,r4,-1
   2fff4:	9885883a 	add	r2,r19,r2
   2fff8:	d8800415 	stw	r2,16(sp)
   2fffc:	dc800615 	stw	r18,24(sp)
   30000:	a80b883a 	mov	r5,r21
   30004:	8009883a 	mov	r4,r16
   30008:	002efd00 	call	2efd0 <quorem>
   3000c:	880b883a 	mov	r5,r17
   30010:	8009883a 	mov	r4,r16
   30014:	102f883a 	mov	r23,r2
   30018:	0031bac0 	call	31bac <__mcmp>
   3001c:	a80b883a 	mov	r5,r21
   30020:	a00d883a 	mov	r6,r20
   30024:	e009883a 	mov	r4,fp
   30028:	102d883a 	mov	r22,r2
   3002c:	0031c0c0 	call	31c0c <__mdiff>
   30030:	1007883a 	mov	r3,r2
   30034:	10800317 	ldw	r2,12(r2)
   30038:	bc800c04 	addi	r18,r23,48
   3003c:	180b883a 	mov	r5,r3
   30040:	10004e1e 	bne	r2,zero,3017c <_dtoa_r+0xfac>
   30044:	8009883a 	mov	r4,r16
   30048:	d8c01615 	stw	r3,88(sp)
   3004c:	0031bac0 	call	31bac <__mcmp>
   30050:	d8c01617 	ldw	r3,88(sp)
   30054:	e009883a 	mov	r4,fp
   30058:	d8801615 	stw	r2,88(sp)
   3005c:	180b883a 	mov	r5,r3
   30060:	003138c0 	call	3138c <_Bfree>
   30064:	d8801617 	ldw	r2,88(sp)
   30068:	1000041e 	bne	r2,zero,3007c <_dtoa_r+0xeac>
   3006c:	d9800317 	ldw	r6,12(sp)
   30070:	3000021e 	bne	r6,zero,3007c <_dtoa_r+0xeac>
   30074:	d8c00617 	ldw	r3,24(sp)
   30078:	18003726 	beq	r3,zero,30158 <_dtoa_r+0xf88>
   3007c:	b0002016 	blt	r22,zero,30100 <_dtoa_r+0xf30>
   30080:	b000041e 	bne	r22,zero,30094 <_dtoa_r+0xec4>
   30084:	d9000317 	ldw	r4,12(sp)
   30088:	2000021e 	bne	r4,zero,30094 <_dtoa_r+0xec4>
   3008c:	d8c00617 	ldw	r3,24(sp)
   30090:	18001b26 	beq	r3,zero,30100 <_dtoa_r+0xf30>
   30094:	00810716 	blt	zero,r2,304b4 <_dtoa_r+0x12e4>
   30098:	d8c00417 	ldw	r3,16(sp)
   3009c:	9d800044 	addi	r22,r19,1
   300a0:	9c800005 	stb	r18,0(r19)
   300a4:	b02f883a 	mov	r23,r22
   300a8:	98c10626 	beq	r19,r3,304c4 <_dtoa_r+0x12f4>
   300ac:	800b883a 	mov	r5,r16
   300b0:	000f883a 	mov	r7,zero
   300b4:	01800284 	movi	r6,10
   300b8:	e009883a 	mov	r4,fp
   300bc:	00313b40 	call	313b4 <__multadd>
   300c0:	1021883a 	mov	r16,r2
   300c4:	000f883a 	mov	r7,zero
   300c8:	01800284 	movi	r6,10
   300cc:	880b883a 	mov	r5,r17
   300d0:	e009883a 	mov	r4,fp
   300d4:	8d002526 	beq	r17,r20,3016c <_dtoa_r+0xf9c>
   300d8:	00313b40 	call	313b4 <__multadd>
   300dc:	a00b883a 	mov	r5,r20
   300e0:	000f883a 	mov	r7,zero
   300e4:	01800284 	movi	r6,10
   300e8:	e009883a 	mov	r4,fp
   300ec:	1023883a 	mov	r17,r2
   300f0:	00313b40 	call	313b4 <__multadd>
   300f4:	1029883a 	mov	r20,r2
   300f8:	b027883a 	mov	r19,r22
   300fc:	003fc006 	br	30000 <_dtoa_r+0xe30>
   30100:	9011883a 	mov	r8,r18
   30104:	00800e0e 	bge	zero,r2,30140 <_dtoa_r+0xf70>
   30108:	800b883a 	mov	r5,r16
   3010c:	01800044 	movi	r6,1
   30110:	e009883a 	mov	r4,fp
   30114:	da001715 	stw	r8,92(sp)
   30118:	0031a640 	call	31a64 <__lshift>
   3011c:	a80b883a 	mov	r5,r21
   30120:	1009883a 	mov	r4,r2
   30124:	1021883a 	mov	r16,r2
   30128:	0031bac0 	call	31bac <__mcmp>
   3012c:	da001717 	ldw	r8,92(sp)
   30130:	0081960e 	bge	zero,r2,3078c <_dtoa_r+0x15bc>
   30134:	00800e44 	movi	r2,57
   30138:	40817026 	beq	r8,r2,306fc <_dtoa_r+0x152c>
   3013c:	ba000c44 	addi	r8,r23,49
   30140:	8825883a 	mov	r18,r17
   30144:	9dc00044 	addi	r23,r19,1
   30148:	9a000005 	stb	r8,0(r19)
   3014c:	a023883a 	mov	r17,r20
   30150:	dc000915 	stw	r16,36(sp)
   30154:	003f2406 	br	2fde8 <_dtoa_r+0xc18>
   30158:	00800e44 	movi	r2,57
   3015c:	9011883a 	mov	r8,r18
   30160:	90816626 	beq	r18,r2,306fc <_dtoa_r+0x152c>
   30164:	05bff516 	blt	zero,r22,3013c <_dtoa_r+0xf6c>
   30168:	003ff506 	br	30140 <_dtoa_r+0xf70>
   3016c:	00313b40 	call	313b4 <__multadd>
   30170:	1023883a 	mov	r17,r2
   30174:	1029883a 	mov	r20,r2
   30178:	003fdf06 	br	300f8 <_dtoa_r+0xf28>
   3017c:	e009883a 	mov	r4,fp
   30180:	003138c0 	call	3138c <_Bfree>
   30184:	00800044 	movi	r2,1
   30188:	003fbc06 	br	3007c <_dtoa_r+0xeac>
   3018c:	a80b883a 	mov	r5,r21
   30190:	8009883a 	mov	r4,r16
   30194:	0031bac0 	call	31bac <__mcmp>
   30198:	103edb0e 	bge	r2,zero,2fd08 <_dtoa_r+0xb38>
   3019c:	800b883a 	mov	r5,r16
   301a0:	000f883a 	mov	r7,zero
   301a4:	01800284 	movi	r6,10
   301a8:	e009883a 	mov	r4,fp
   301ac:	00313b40 	call	313b4 <__multadd>
   301b0:	1021883a 	mov	r16,r2
   301b4:	d8800517 	ldw	r2,20(sp)
   301b8:	d8c00b17 	ldw	r3,44(sp)
   301bc:	10bfffc4 	addi	r2,r2,-1
   301c0:	d8800515 	stw	r2,20(sp)
   301c4:	183f761e 	bne	r3,zero,2ffa0 <_dtoa_r+0xdd0>
   301c8:	d9000c17 	ldw	r4,48(sp)
   301cc:	0101730e 	bge	zero,r4,3079c <_dtoa_r+0x15cc>
   301d0:	d9000615 	stw	r4,24(sp)
   301d4:	003ed006 	br	2fd18 <_dtoa_r+0xb48>
   301d8:	00800084 	movi	r2,2
   301dc:	3081861e 	bne	r6,r2,307f8 <_dtoa_r+0x1628>
   301e0:	d8000b15 	stw	zero,44(sp)
   301e4:	003f3c06 	br	2fed8 <_dtoa_r+0xd08>
   301e8:	dc000917 	ldw	r16,36(sp)
   301ec:	003e9206 	br	2fc38 <_dtoa_r+0xa68>
   301f0:	d9c00317 	ldw	r7,12(sp)
   301f4:	00800084 	movi	r2,2
   301f8:	11fec50e 	bge	r2,r7,2fd10 <_dtoa_r+0xb40>
   301fc:	d9000617 	ldw	r4,24(sp)
   30200:	20013c1e 	bne	r4,zero,306f4 <_dtoa_r+0x1524>
   30204:	a80b883a 	mov	r5,r21
   30208:	000f883a 	mov	r7,zero
   3020c:	01800144 	movi	r6,5
   30210:	e009883a 	mov	r4,fp
   30214:	00313b40 	call	313b4 <__multadd>
   30218:	100b883a 	mov	r5,r2
   3021c:	8009883a 	mov	r4,r16
   30220:	102b883a 	mov	r21,r2
   30224:	0031bac0 	call	31bac <__mcmp>
   30228:	dc000915 	stw	r16,36(sp)
   3022c:	00bf410e 	bge	zero,r2,2ff34 <_dtoa_r+0xd64>
   30230:	d9c00717 	ldw	r7,28(sp)
   30234:	00800c44 	movi	r2,49
   30238:	38800005 	stb	r2,0(r7)
   3023c:	d8800517 	ldw	r2,20(sp)
   30240:	3dc00044 	addi	r23,r7,1
   30244:	10800044 	addi	r2,r2,1
   30248:	d8800515 	stw	r2,20(sp)
   3024c:	003f3d06 	br	2ff44 <_dtoa_r+0xd74>
   30250:	d9800517 	ldw	r6,20(sp)
   30254:	d9c00717 	ldw	r7,28(sp)
   30258:	00800c44 	movi	r2,49
   3025c:	31800044 	addi	r6,r6,1
   30260:	d9800515 	stw	r6,20(sp)
   30264:	38800005 	stb	r2,0(r7)
   30268:	003edf06 	br	2fde8 <_dtoa_r+0xc18>
   3026c:	d8000b15 	stw	zero,44(sp)
   30270:	003c9f06 	br	2f4f0 <_dtoa_r+0x320>
   30274:	903e7e1e 	bne	r18,zero,2fc70 <_dtoa_r+0xaa0>
   30278:	00800434 	movhi	r2,16
   3027c:	10bfffc4 	addi	r2,r2,-1
   30280:	9884703a 	and	r2,r19,r2
   30284:	1000ea1e 	bne	r2,zero,30630 <_dtoa_r+0x1460>
   30288:	9cdffc2c 	andhi	r19,r19,32752
   3028c:	9800e826 	beq	r19,zero,30630 <_dtoa_r+0x1460>
   30290:	d9c00817 	ldw	r7,32(sp)
   30294:	b5800044 	addi	r22,r22,1
   30298:	04c00044 	movi	r19,1
   3029c:	39c00044 	addi	r7,r7,1
   302a0:	d9c00815 	stw	r7,32(sp)
   302a4:	d8800d17 	ldw	r2,52(sp)
   302a8:	103e721e 	bne	r2,zero,2fc74 <_dtoa_r+0xaa4>
   302ac:	00800044 	movi	r2,1
   302b0:	003e7906 	br	2fc98 <_dtoa_r+0xac8>
   302b4:	8009883a 	mov	r4,r16
   302b8:	00293680 	call	29368 <__floatsidf>
   302bc:	d9800f17 	ldw	r6,60(sp)
   302c0:	d9c01017 	ldw	r7,64(sp)
   302c4:	1009883a 	mov	r4,r2
   302c8:	180b883a 	mov	r5,r3
   302cc:	00282d40 	call	282d4 <__muldf3>
   302d0:	000d883a 	mov	r6,zero
   302d4:	01d00734 	movhi	r7,16412
   302d8:	1009883a 	mov	r4,r2
   302dc:	180b883a 	mov	r5,r3
   302e0:	0026ee80 	call	26ee8 <__adddf3>
   302e4:	047f3034 	movhi	r17,64704
   302e8:	1021883a 	mov	r16,r2
   302ec:	1c63883a 	add	r17,r3,r17
   302f0:	d9000f17 	ldw	r4,60(sp)
   302f4:	d9401017 	ldw	r5,64(sp)
   302f8:	000d883a 	mov	r6,zero
   302fc:	01d00534 	movhi	r7,16404
   30300:	00289ec0 	call	289ec <__subdf3>
   30304:	800d883a 	mov	r6,r16
   30308:	880f883a 	mov	r7,r17
   3030c:	1009883a 	mov	r4,r2
   30310:	180b883a 	mov	r5,r3
   30314:	102b883a 	mov	r21,r2
   30318:	1829883a 	mov	r20,r3
   3031c:	00281040 	call	28104 <__gedf2>
   30320:	00806c16 	blt	zero,r2,304d4 <_dtoa_r+0x1304>
   30324:	89e0003c 	xorhi	r7,r17,32768
   30328:	800d883a 	mov	r6,r16
   3032c:	a809883a 	mov	r4,r21
   30330:	a00b883a 	mov	r5,r20
   30334:	00281e00 	call	281e0 <__ledf2>
   30338:	103d7e0e 	bge	r2,zero,2f934 <_dtoa_r+0x764>
   3033c:	002b883a 	mov	r21,zero
   30340:	0023883a 	mov	r17,zero
   30344:	003efb06 	br	2ff34 <_dtoa_r+0xd64>
   30348:	d8800717 	ldw	r2,28(sp)
   3034c:	003bd006 	br	2f290 <_dtoa_r+0xc0>
   30350:	d9000a17 	ldw	r4,40(sp)
   30354:	d9800d17 	ldw	r6,52(sp)
   30358:	dd400a15 	stw	r21,40(sp)
   3035c:	a905c83a 	sub	r2,r21,r4
   30360:	308d883a 	add	r6,r6,r2
   30364:	d9800d15 	stw	r6,52(sp)
   30368:	002b883a 	mov	r21,zero
   3036c:	003e0606 	br	2fb88 <_dtoa_r+0x9b8>
   30370:	9023883a 	mov	r17,r18
   30374:	9829883a 	mov	r20,r19
   30378:	04000084 	movi	r16,2
   3037c:	003c9206 	br	2f5c8 <_dtoa_r+0x3f8>
   30380:	04000044 	movi	r16,1
   30384:	dc000c15 	stw	r16,48(sp)
   30388:	dc000615 	stw	r16,24(sp)
   3038c:	dc002215 	stw	r16,136(sp)
   30390:	e0001115 	stw	zero,68(fp)
   30394:	000b883a 	mov	r5,zero
   30398:	003c6906 	br	2f540 <_dtoa_r+0x370>
   3039c:	3021883a 	mov	r16,r6
   303a0:	003ffb06 	br	30390 <_dtoa_r+0x11c0>
   303a4:	1000021e 	bne	r2,zero,303b0 <_dtoa_r+0x11e0>
   303a8:	4200004c 	andi	r8,r8,1
   303ac:	403e7d1e 	bne	r8,zero,2fda4 <_dtoa_r+0xbd4>
   303b0:	01000c04 	movi	r4,48
   303b4:	00000106 	br	303bc <_dtoa_r+0x11ec>
   303b8:	102f883a 	mov	r23,r2
   303bc:	b8bfffc4 	addi	r2,r23,-1
   303c0:	10c00007 	ldb	r3,0(r2)
   303c4:	193ffc26 	beq	r3,r4,303b8 <_dtoa_r+0x11e8>
   303c8:	003e8706 	br	2fde8 <_dtoa_r+0xc18>
   303cc:	d8800517 	ldw	r2,20(sp)
   303d0:	00a3c83a 	sub	r17,zero,r2
   303d4:	8800a426 	beq	r17,zero,30668 <_dtoa_r+0x1498>
   303d8:	888003cc 	andi	r2,r17,15
   303dc:	100490fa 	slli	r2,r2,3
   303e0:	00c00134 	movhi	r3,4
   303e4:	18e37504 	addi	r3,r3,-29228
   303e8:	1885883a 	add	r2,r3,r2
   303ec:	11800017 	ldw	r6,0(r2)
   303f0:	11c00117 	ldw	r7,4(r2)
   303f4:	9009883a 	mov	r4,r18
   303f8:	980b883a 	mov	r5,r19
   303fc:	8823d13a 	srai	r17,r17,4
   30400:	00282d40 	call	282d4 <__muldf3>
   30404:	d8800f15 	stw	r2,60(sp)
   30408:	d8c01015 	stw	r3,64(sp)
   3040c:	8800e826 	beq	r17,zero,307b0 <_dtoa_r+0x15e0>
   30410:	05000134 	movhi	r20,4
   30414:	a5236b04 	addi	r20,r20,-29268
   30418:	04000084 	movi	r16,2
   3041c:	8980004c 	andi	r6,r17,1
   30420:	1009883a 	mov	r4,r2
   30424:	8823d07a 	srai	r17,r17,1
   30428:	180b883a 	mov	r5,r3
   3042c:	30000426 	beq	r6,zero,30440 <_dtoa_r+0x1270>
   30430:	a1800017 	ldw	r6,0(r20)
   30434:	a1c00117 	ldw	r7,4(r20)
   30438:	84000044 	addi	r16,r16,1
   3043c:	00282d40 	call	282d4 <__muldf3>
   30440:	a5000204 	addi	r20,r20,8
   30444:	883ff51e 	bne	r17,zero,3041c <_dtoa_r+0x124c>
   30448:	d8800f15 	stw	r2,60(sp)
   3044c:	d8c01015 	stw	r3,64(sp)
   30450:	003c7606 	br	2f62c <_dtoa_r+0x45c>
   30454:	00c00c04 	movi	r3,48
   30458:	10c00005 	stb	r3,0(r2)
   3045c:	d8c00517 	ldw	r3,20(sp)
   30460:	bd3fffc3 	ldbu	r20,-1(r23)
   30464:	18c00044 	addi	r3,r3,1
   30468:	d8c00515 	stw	r3,20(sp)
   3046c:	003db906 	br	2fb54 <_dtoa_r+0x984>
   30470:	89400117 	ldw	r5,4(r17)
   30474:	e009883a 	mov	r4,fp
   30478:	00312e40 	call	312e4 <_Balloc>
   3047c:	89800417 	ldw	r6,16(r17)
   30480:	89400304 	addi	r5,r17,12
   30484:	11000304 	addi	r4,r2,12
   30488:	31800084 	addi	r6,r6,2
   3048c:	318d883a 	add	r6,r6,r6
   30490:	318d883a 	add	r6,r6,r6
   30494:	1027883a 	mov	r19,r2
   30498:	002b7400 	call	2b740 <memcpy>
   3049c:	01800044 	movi	r6,1
   304a0:	980b883a 	mov	r5,r19
   304a4:	e009883a 	mov	r4,fp
   304a8:	0031a640 	call	31a64 <__lshift>
   304ac:	1029883a 	mov	r20,r2
   304b0:	003ecc06 	br	2ffe4 <_dtoa_r+0xe14>
   304b4:	00800e44 	movi	r2,57
   304b8:	90809026 	beq	r18,r2,306fc <_dtoa_r+0x152c>
   304bc:	92000044 	addi	r8,r18,1
   304c0:	003f1f06 	br	30140 <_dtoa_r+0xf70>
   304c4:	9011883a 	mov	r8,r18
   304c8:	8825883a 	mov	r18,r17
   304cc:	a023883a 	mov	r17,r20
   304d0:	003e2906 	br	2fd78 <_dtoa_r+0xba8>
   304d4:	002b883a 	mov	r21,zero
   304d8:	0023883a 	mov	r17,zero
   304dc:	003f5406 	br	30230 <_dtoa_r+0x1060>
   304e0:	61bfffc4 	addi	r6,r12,-1
   304e4:	300490fa 	slli	r2,r6,3
   304e8:	00c00134 	movhi	r3,4
   304ec:	18e37504 	addi	r3,r3,-29228
   304f0:	1885883a 	add	r2,r3,r2
   304f4:	11000017 	ldw	r4,0(r2)
   304f8:	11400117 	ldw	r5,4(r2)
   304fc:	d8800717 	ldw	r2,28(sp)
   30500:	880f883a 	mov	r7,r17
   30504:	d9801215 	stw	r6,72(sp)
   30508:	800d883a 	mov	r6,r16
   3050c:	db001615 	stw	r12,88(sp)
   30510:	15c00044 	addi	r23,r2,1
   30514:	00282d40 	call	282d4 <__muldf3>
   30518:	d9401017 	ldw	r5,64(sp)
   3051c:	d9000f17 	ldw	r4,60(sp)
   30520:	d8c01515 	stw	r3,84(sp)
   30524:	d8801415 	stw	r2,80(sp)
   30528:	00292e80 	call	292e8 <__fixdfsi>
   3052c:	1009883a 	mov	r4,r2
   30530:	1021883a 	mov	r16,r2
   30534:	00293680 	call	29368 <__floatsidf>
   30538:	d9000f17 	ldw	r4,60(sp)
   3053c:	d9401017 	ldw	r5,64(sp)
   30540:	100d883a 	mov	r6,r2
   30544:	180f883a 	mov	r7,r3
   30548:	00289ec0 	call	289ec <__subdf3>
   3054c:	1829883a 	mov	r20,r3
   30550:	d8c00717 	ldw	r3,28(sp)
   30554:	84000c04 	addi	r16,r16,48
   30558:	1023883a 	mov	r17,r2
   3055c:	1c000005 	stb	r16,0(r3)
   30560:	db001617 	ldw	r12,88(sp)
   30564:	00800044 	movi	r2,1
   30568:	60802226 	beq	r12,r2,305f4 <_dtoa_r+0x1424>
   3056c:	d9c00717 	ldw	r7,28(sp)
   30570:	8805883a 	mov	r2,r17
   30574:	b82b883a 	mov	r21,r23
   30578:	3b19883a 	add	r12,r7,r12
   3057c:	6023883a 	mov	r17,r12
   30580:	a007883a 	mov	r3,r20
   30584:	dc800f15 	stw	r18,60(sp)
   30588:	000d883a 	mov	r6,zero
   3058c:	01d00934 	movhi	r7,16420
   30590:	1009883a 	mov	r4,r2
   30594:	180b883a 	mov	r5,r3
   30598:	00282d40 	call	282d4 <__muldf3>
   3059c:	180b883a 	mov	r5,r3
   305a0:	1009883a 	mov	r4,r2
   305a4:	1829883a 	mov	r20,r3
   305a8:	1025883a 	mov	r18,r2
   305ac:	00292e80 	call	292e8 <__fixdfsi>
   305b0:	1009883a 	mov	r4,r2
   305b4:	1021883a 	mov	r16,r2
   305b8:	00293680 	call	29368 <__floatsidf>
   305bc:	100d883a 	mov	r6,r2
   305c0:	180f883a 	mov	r7,r3
   305c4:	9009883a 	mov	r4,r18
   305c8:	a00b883a 	mov	r5,r20
   305cc:	84000c04 	addi	r16,r16,48
   305d0:	00289ec0 	call	289ec <__subdf3>
   305d4:	ad400044 	addi	r21,r21,1
   305d8:	ac3fffc5 	stb	r16,-1(r21)
   305dc:	ac7fea1e 	bne	r21,r17,30588 <_dtoa_r+0x13b8>
   305e0:	1023883a 	mov	r17,r2
   305e4:	d8801217 	ldw	r2,72(sp)
   305e8:	dc800f17 	ldw	r18,60(sp)
   305ec:	1829883a 	mov	r20,r3
   305f0:	b8af883a 	add	r23,r23,r2
   305f4:	d9001417 	ldw	r4,80(sp)
   305f8:	d9401517 	ldw	r5,84(sp)
   305fc:	000d883a 	mov	r6,zero
   30600:	01cff834 	movhi	r7,16352
   30604:	0026ee80 	call	26ee8 <__adddf3>
   30608:	880d883a 	mov	r6,r17
   3060c:	a00f883a 	mov	r7,r20
   30610:	1009883a 	mov	r4,r2
   30614:	180b883a 	mov	r5,r3
   30618:	00281e00 	call	281e0 <__ledf2>
   3061c:	10003e0e 	bge	r2,zero,30718 <_dtoa_r+0x1548>
   30620:	d9001317 	ldw	r4,76(sp)
   30624:	bd3fffc3 	ldbu	r20,-1(r23)
   30628:	d9000515 	stw	r4,20(sp)
   3062c:	003d3b06 	br	2fb1c <_dtoa_r+0x94c>
   30630:	0027883a 	mov	r19,zero
   30634:	003f1b06 	br	302a4 <_dtoa_r+0x10d4>
   30638:	d8800817 	ldw	r2,32(sp)
   3063c:	11e9c83a 	sub	r20,r2,r7
   30640:	0005883a 	mov	r2,zero
   30644:	003d5406 	br	2fb98 <_dtoa_r+0x9c8>
   30648:	00800044 	movi	r2,1
   3064c:	003dc706 	br	2fd6c <_dtoa_r+0xb9c>
   30650:	d8c00217 	ldw	r3,8(sp)
   30654:	00800d84 	movi	r2,54
   30658:	dd400a17 	ldw	r21,40(sp)
   3065c:	10c5c83a 	sub	r2,r2,r3
   30660:	dd000817 	ldw	r20,32(sp)
   30664:	003d4c06 	br	2fb98 <_dtoa_r+0x9c8>
   30668:	dc800f15 	stw	r18,60(sp)
   3066c:	dcc01015 	stw	r19,64(sp)
   30670:	04000084 	movi	r16,2
   30674:	003bed06 	br	2f62c <_dtoa_r+0x45c>
   30678:	d9000617 	ldw	r4,24(sp)
   3067c:	203f0d26 	beq	r4,zero,302b4 <_dtoa_r+0x10e4>
   30680:	d9800c17 	ldw	r6,48(sp)
   30684:	01bcab0e 	bge	zero,r6,2f934 <_dtoa_r+0x764>
   30688:	d9401017 	ldw	r5,64(sp)
   3068c:	d9000f17 	ldw	r4,60(sp)
   30690:	000d883a 	mov	r6,zero
   30694:	01d00934 	movhi	r7,16420
   30698:	00282d40 	call	282d4 <__muldf3>
   3069c:	81000044 	addi	r4,r16,1
   306a0:	d8800f15 	stw	r2,60(sp)
   306a4:	d8c01015 	stw	r3,64(sp)
   306a8:	00293680 	call	29368 <__floatsidf>
   306ac:	d9800f17 	ldw	r6,60(sp)
   306b0:	d9c01017 	ldw	r7,64(sp)
   306b4:	1009883a 	mov	r4,r2
   306b8:	180b883a 	mov	r5,r3
   306bc:	00282d40 	call	282d4 <__muldf3>
   306c0:	01d00734 	movhi	r7,16412
   306c4:	000d883a 	mov	r6,zero
   306c8:	1009883a 	mov	r4,r2
   306cc:	180b883a 	mov	r5,r3
   306d0:	0026ee80 	call	26ee8 <__adddf3>
   306d4:	d9c00517 	ldw	r7,20(sp)
   306d8:	047f3034 	movhi	r17,64704
   306dc:	1021883a 	mov	r16,r2
   306e0:	39ffffc4 	addi	r7,r7,-1
   306e4:	d9c01315 	stw	r7,76(sp)
   306e8:	1c63883a 	add	r17,r3,r17
   306ec:	db000c17 	ldw	r12,48(sp)
   306f0:	003bea06 	br	2f69c <_dtoa_r+0x4cc>
   306f4:	dc000915 	stw	r16,36(sp)
   306f8:	003e0e06 	br	2ff34 <_dtoa_r+0xd64>
   306fc:	01000e44 	movi	r4,57
   30700:	8825883a 	mov	r18,r17
   30704:	9dc00044 	addi	r23,r19,1
   30708:	99000005 	stb	r4,0(r19)
   3070c:	a023883a 	mov	r17,r20
   30710:	dc000915 	stw	r16,36(sp)
   30714:	003da406 	br	2fda8 <_dtoa_r+0xbd8>
   30718:	d9801417 	ldw	r6,80(sp)
   3071c:	d9c01517 	ldw	r7,84(sp)
   30720:	0009883a 	mov	r4,zero
   30724:	014ff834 	movhi	r5,16352
   30728:	00289ec0 	call	289ec <__subdf3>
   3072c:	880d883a 	mov	r6,r17
   30730:	a00f883a 	mov	r7,r20
   30734:	1009883a 	mov	r4,r2
   30738:	180b883a 	mov	r5,r3
   3073c:	00281040 	call	28104 <__gedf2>
   30740:	00bc7c0e 	bge	zero,r2,2f934 <_dtoa_r+0x764>
   30744:	01000c04 	movi	r4,48
   30748:	00000106 	br	30750 <_dtoa_r+0x1580>
   3074c:	102f883a 	mov	r23,r2
   30750:	b8bfffc4 	addi	r2,r23,-1
   30754:	10c00007 	ldb	r3,0(r2)
   30758:	193ffc26 	beq	r3,r4,3074c <_dtoa_r+0x157c>
   3075c:	d9801317 	ldw	r6,76(sp)
   30760:	d9800515 	stw	r6,20(sp)
   30764:	003c4406 	br	2f878 <_dtoa_r+0x6a8>
   30768:	d9801317 	ldw	r6,76(sp)
   3076c:	d9800515 	stw	r6,20(sp)
   30770:	003cea06 	br	2fb1c <_dtoa_r+0x94c>
   30774:	dd800f17 	ldw	r22,60(sp)
   30778:	dcc01017 	ldw	r19,64(sp)
   3077c:	dc801217 	ldw	r18,72(sp)
   30780:	003c6c06 	br	2f934 <_dtoa_r+0x764>
   30784:	903e031e 	bne	r18,zero,2ff94 <_dtoa_r+0xdc4>
   30788:	003ebb06 	br	30278 <_dtoa_r+0x10a8>
   3078c:	103e6c1e 	bne	r2,zero,30140 <_dtoa_r+0xf70>
   30790:	4080004c 	andi	r2,r8,1
   30794:	103e6a26 	beq	r2,zero,30140 <_dtoa_r+0xf70>
   30798:	003e6606 	br	30134 <_dtoa_r+0xf64>
   3079c:	d8c00317 	ldw	r3,12(sp)
   307a0:	00800084 	movi	r2,2
   307a4:	10c02916 	blt	r2,r3,3084c <_dtoa_r+0x167c>
   307a8:	d9000c17 	ldw	r4,48(sp)
   307ac:	003e8806 	br	301d0 <_dtoa_r+0x1000>
   307b0:	04000084 	movi	r16,2
   307b4:	003b9d06 	br	2f62c <_dtoa_r+0x45c>
   307b8:	d9001317 	ldw	r4,76(sp)
   307bc:	d9000515 	stw	r4,20(sp)
   307c0:	003cd606 	br	2fb1c <_dtoa_r+0x94c>
   307c4:	d8801317 	ldw	r2,76(sp)
   307c8:	d8800515 	stw	r2,20(sp)
   307cc:	003c2a06 	br	2f878 <_dtoa_r+0x6a8>
   307d0:	d9800317 	ldw	r6,12(sp)
   307d4:	00800084 	movi	r2,2
   307d8:	11801516 	blt	r2,r6,30830 <_dtoa_r+0x1660>
   307dc:	d9c00c17 	ldw	r7,48(sp)
   307e0:	d9c00615 	stw	r7,24(sp)
   307e4:	003df706 	br	2ffc4 <_dtoa_r+0xdf4>
   307e8:	193d3926 	beq	r3,r4,2fcd0 <_dtoa_r+0xb00>
   307ec:	00c00f04 	movi	r3,60
   307f0:	1885c83a 	sub	r2,r3,r2
   307f4:	003ddf06 	br	2ff74 <_dtoa_r+0xda4>
   307f8:	e009883a 	mov	r4,fp
   307fc:	e0001115 	stw	zero,68(fp)
   30800:	000b883a 	mov	r5,zero
   30804:	00312e40 	call	312e4 <_Balloc>
   30808:	d8800715 	stw	r2,28(sp)
   3080c:	d8c00717 	ldw	r3,28(sp)
   30810:	00bfffc4 	movi	r2,-1
   30814:	01000044 	movi	r4,1
   30818:	d8800c15 	stw	r2,48(sp)
   3081c:	e0c01015 	stw	r3,64(fp)
   30820:	d9000b15 	stw	r4,44(sp)
   30824:	d8800615 	stw	r2,24(sp)
   30828:	d8002215 	stw	zero,136(sp)
   3082c:	003c4106 	br	2f934 <_dtoa_r+0x764>
   30830:	d8c00c17 	ldw	r3,48(sp)
   30834:	d8c00615 	stw	r3,24(sp)
   30838:	003e7006 	br	301fc <_dtoa_r+0x102c>
   3083c:	04400044 	movi	r17,1
   30840:	003b2006 	br	2f4c4 <_dtoa_r+0x2f4>
   30844:	000b883a 	mov	r5,zero
   30848:	003b3d06 	br	2f540 <_dtoa_r+0x370>
   3084c:	d8800c17 	ldw	r2,48(sp)
   30850:	d8800615 	stw	r2,24(sp)
   30854:	003e6906 	br	301fc <_dtoa_r+0x102c>

00030858 <__sflags>:
   30858:	28800007 	ldb	r2,0(r5)
   3085c:	00c01c84 	movi	r3,114
   30860:	10c02426 	beq	r2,r3,308f4 <__sflags+0x9c>
   30864:	00c01dc4 	movi	r3,119
   30868:	10c01e26 	beq	r2,r3,308e4 <__sflags+0x8c>
   3086c:	00c01844 	movi	r3,97
   30870:	10c00426 	beq	r2,r3,30884 <__sflags+0x2c>
   30874:	00800584 	movi	r2,22
   30878:	20800015 	stw	r2,0(r4)
   3087c:	0005883a 	mov	r2,zero
   30880:	f800283a 	ret
   30884:	02c08204 	movi	r11,520
   30888:	01000044 	movi	r4,1
   3088c:	00804204 	movi	r2,264
   30890:	01c00ac4 	movi	r7,43
   30894:	02bff8c4 	movi	r10,-29
   30898:	027fff04 	movi	r9,-4
   3089c:	02001e04 	movi	r8,120
   308a0:	29400044 	addi	r5,r5,1
   308a4:	28c00007 	ldb	r3,0(r5)
   308a8:	18000626 	beq	r3,zero,308c4 <__sflags+0x6c>
   308ac:	19c00826 	beq	r3,r7,308d0 <__sflags+0x78>
   308b0:	1a3ffb1e 	bne	r3,r8,308a0 <__sflags+0x48>
   308b4:	29400044 	addi	r5,r5,1
   308b8:	28c00007 	ldb	r3,0(r5)
   308bc:	21020014 	ori	r4,r4,2048
   308c0:	183ffa1e 	bne	r3,zero,308ac <__sflags+0x54>
   308c4:	22c8b03a 	or	r4,r4,r11
   308c8:	31000015 	stw	r4,0(r6)
   308cc:	f800283a 	ret
   308d0:	1284703a 	and	r2,r2,r10
   308d4:	2248703a 	and	r4,r4,r9
   308d8:	10800414 	ori	r2,r2,16
   308dc:	21000094 	ori	r4,r4,2
   308e0:	003fef06 	br	308a0 <__sflags+0x48>
   308e4:	02c18004 	movi	r11,1536
   308e8:	01000044 	movi	r4,1
   308ec:	00800204 	movi	r2,8
   308f0:	003fe706 	br	30890 <__sflags+0x38>
   308f4:	0017883a 	mov	r11,zero
   308f8:	0009883a 	mov	r4,zero
   308fc:	00800104 	movi	r2,4
   30900:	003fe306 	br	30890 <__sflags+0x38>

00030904 <_fputc_r>:
   30904:	defffc04 	addi	sp,sp,-16
   30908:	dc000215 	stw	r16,8(sp)
   3090c:	dfc00315 	stw	ra,12(sp)
   30910:	2021883a 	mov	r16,r4
   30914:	20000726 	beq	r4,zero,30934 <_fputc_r+0x30>
   30918:	20800e17 	ldw	r2,56(r4)
   3091c:	1000051e 	bne	r2,zero,30934 <_fputc_r+0x30>
   30920:	d9400015 	stw	r5,0(sp)
   30924:	d9800115 	stw	r6,4(sp)
   30928:	0029f640 	call	29f64 <__sinit>
   3092c:	d9800117 	ldw	r6,4(sp)
   30930:	d9400017 	ldw	r5,0(sp)
   30934:	8009883a 	mov	r4,r16
   30938:	dfc00317 	ldw	ra,12(sp)
   3093c:	dc000217 	ldw	r16,8(sp)
   30940:	dec00404 	addi	sp,sp,16
   30944:	00322e01 	jmpi	322e0 <_putc_r>

00030948 <fputc>:
   30948:	00800134 	movhi	r2,4
   3094c:	defffc04 	addi	sp,sp,-16
   30950:	10ae9f04 	addi	r2,r2,-17796
   30954:	dc000115 	stw	r16,4(sp)
   30958:	14000017 	ldw	r16,0(r2)
   3095c:	dc400215 	stw	r17,8(sp)
   30960:	dfc00315 	stw	ra,12(sp)
   30964:	2023883a 	mov	r17,r4
   30968:	80000626 	beq	r16,zero,30984 <fputc+0x3c>
   3096c:	80800e17 	ldw	r2,56(r16)
   30970:	1000041e 	bne	r2,zero,30984 <fputc+0x3c>
   30974:	8009883a 	mov	r4,r16
   30978:	d9400015 	stw	r5,0(sp)
   3097c:	0029f640 	call	29f64 <__sinit>
   30980:	d9400017 	ldw	r5,0(sp)
   30984:	280d883a 	mov	r6,r5
   30988:	8009883a 	mov	r4,r16
   3098c:	880b883a 	mov	r5,r17
   30990:	dfc00317 	ldw	ra,12(sp)
   30994:	dc400217 	ldw	r17,8(sp)
   30998:	dc000117 	ldw	r16,4(sp)
   3099c:	dec00404 	addi	sp,sp,16
   309a0:	00322e01 	jmpi	322e0 <_putc_r>

000309a4 <_fputs_r>:
   309a4:	defff804 	addi	sp,sp,-32
   309a8:	dc400615 	stw	r17,24(sp)
   309ac:	2023883a 	mov	r17,r4
   309b0:	2809883a 	mov	r4,r5
   309b4:	dc000515 	stw	r16,20(sp)
   309b8:	dfc00715 	stw	ra,28(sp)
   309bc:	3021883a 	mov	r16,r6
   309c0:	d9400315 	stw	r5,12(sp)
   309c4:	002c6840 	call	2c684 <strlen>
   309c8:	d8800215 	stw	r2,8(sp)
   309cc:	d8800415 	stw	r2,16(sp)
   309d0:	d8800304 	addi	r2,sp,12
   309d4:	d8800015 	stw	r2,0(sp)
   309d8:	00800044 	movi	r2,1
   309dc:	d8800115 	stw	r2,4(sp)
   309e0:	88000226 	beq	r17,zero,309ec <_fputs_r+0x48>
   309e4:	88800e17 	ldw	r2,56(r17)
   309e8:	10001226 	beq	r2,zero,30a34 <_fputs_r+0x90>
   309ec:	8080030b 	ldhu	r2,12(r16)
   309f0:	10c8000c 	andi	r3,r2,8192
   309f4:	1800061e 	bne	r3,zero,30a10 <_fputs_r+0x6c>
   309f8:	81001917 	ldw	r4,100(r16)
   309fc:	00f7ffc4 	movi	r3,-8193
   30a00:	10880014 	ori	r2,r2,8192
   30a04:	20c6703a 	and	r3,r4,r3
   30a08:	8080030d 	sth	r2,12(r16)
   30a0c:	80c01915 	stw	r3,100(r16)
   30a10:	d80d883a 	mov	r6,sp
   30a14:	800b883a 	mov	r5,r16
   30a18:	8809883a 	mov	r4,r17
   30a1c:	0030a580 	call	30a58 <__sfvwrite_r>
   30a20:	dfc00717 	ldw	ra,28(sp)
   30a24:	dc400617 	ldw	r17,24(sp)
   30a28:	dc000517 	ldw	r16,20(sp)
   30a2c:	dec00804 	addi	sp,sp,32
   30a30:	f800283a 	ret
   30a34:	8809883a 	mov	r4,r17
   30a38:	0029f640 	call	29f64 <__sinit>
   30a3c:	003feb06 	br	309ec <_fputs_r+0x48>

00030a40 <fputs>:
   30a40:	00800134 	movhi	r2,4
   30a44:	10ae9f04 	addi	r2,r2,-17796
   30a48:	280d883a 	mov	r6,r5
   30a4c:	200b883a 	mov	r5,r4
   30a50:	11000017 	ldw	r4,0(r2)
   30a54:	00309a41 	jmpi	309a4 <_fputs_r>

00030a58 <__sfvwrite_r>:
   30a58:	30800217 	ldw	r2,8(r6)
   30a5c:	10006726 	beq	r2,zero,30bfc <__sfvwrite_r+0x1a4>
   30a60:	28c0030b 	ldhu	r3,12(r5)
   30a64:	defff404 	addi	sp,sp,-48
   30a68:	dd400715 	stw	r21,28(sp)
   30a6c:	dd000615 	stw	r20,24(sp)
   30a70:	dc000215 	stw	r16,8(sp)
   30a74:	dfc00b15 	stw	ra,44(sp)
   30a78:	df000a15 	stw	fp,40(sp)
   30a7c:	ddc00915 	stw	r23,36(sp)
   30a80:	dd800815 	stw	r22,32(sp)
   30a84:	dcc00515 	stw	r19,20(sp)
   30a88:	dc800415 	stw	r18,16(sp)
   30a8c:	dc400315 	stw	r17,12(sp)
   30a90:	1880020c 	andi	r2,r3,8
   30a94:	2821883a 	mov	r16,r5
   30a98:	202b883a 	mov	r21,r4
   30a9c:	3029883a 	mov	r20,r6
   30aa0:	10002726 	beq	r2,zero,30b40 <__sfvwrite_r+0xe8>
   30aa4:	28800417 	ldw	r2,16(r5)
   30aa8:	10002526 	beq	r2,zero,30b40 <__sfvwrite_r+0xe8>
   30aac:	1880008c 	andi	r2,r3,2
   30ab0:	a4400017 	ldw	r17,0(r20)
   30ab4:	10002a26 	beq	r2,zero,30b60 <__sfvwrite_r+0x108>
   30ab8:	05a00034 	movhi	r22,32768
   30abc:	0027883a 	mov	r19,zero
   30ac0:	0025883a 	mov	r18,zero
   30ac4:	b5bf0004 	addi	r22,r22,-1024
   30ac8:	980d883a 	mov	r6,r19
   30acc:	a809883a 	mov	r4,r21
   30ad0:	90004626 	beq	r18,zero,30bec <__sfvwrite_r+0x194>
   30ad4:	900f883a 	mov	r7,r18
   30ad8:	b480022e 	bgeu	r22,r18,30ae4 <__sfvwrite_r+0x8c>
   30adc:	01e00034 	movhi	r7,32768
   30ae0:	39ff0004 	addi	r7,r7,-1024
   30ae4:	80800917 	ldw	r2,36(r16)
   30ae8:	81400717 	ldw	r5,28(r16)
   30aec:	103ee83a 	callr	r2
   30af0:	0080570e 	bge	zero,r2,30c50 <__sfvwrite_r+0x1f8>
   30af4:	a0c00217 	ldw	r3,8(r20)
   30af8:	98a7883a 	add	r19,r19,r2
   30afc:	90a5c83a 	sub	r18,r18,r2
   30b00:	1885c83a 	sub	r2,r3,r2
   30b04:	a0800215 	stw	r2,8(r20)
   30b08:	103fef1e 	bne	r2,zero,30ac8 <__sfvwrite_r+0x70>
   30b0c:	0005883a 	mov	r2,zero
   30b10:	dfc00b17 	ldw	ra,44(sp)
   30b14:	df000a17 	ldw	fp,40(sp)
   30b18:	ddc00917 	ldw	r23,36(sp)
   30b1c:	dd800817 	ldw	r22,32(sp)
   30b20:	dd400717 	ldw	r21,28(sp)
   30b24:	dd000617 	ldw	r20,24(sp)
   30b28:	dcc00517 	ldw	r19,20(sp)
   30b2c:	dc800417 	ldw	r18,16(sp)
   30b30:	dc400317 	ldw	r17,12(sp)
   30b34:	dc000217 	ldw	r16,8(sp)
   30b38:	dec00c04 	addi	sp,sp,48
   30b3c:	f800283a 	ret
   30b40:	800b883a 	mov	r5,r16
   30b44:	a809883a 	mov	r4,r21
   30b48:	002eca80 	call	2eca8 <__swsetup_r>
   30b4c:	1000eb1e 	bne	r2,zero,30efc <__sfvwrite_r+0x4a4>
   30b50:	80c0030b 	ldhu	r3,12(r16)
   30b54:	a4400017 	ldw	r17,0(r20)
   30b58:	1880008c 	andi	r2,r3,2
   30b5c:	103fd61e 	bne	r2,zero,30ab8 <__sfvwrite_r+0x60>
   30b60:	1880004c 	andi	r2,r3,1
   30b64:	10003f1e 	bne	r2,zero,30c64 <__sfvwrite_r+0x20c>
   30b68:	0039883a 	mov	fp,zero
   30b6c:	0025883a 	mov	r18,zero
   30b70:	90001a26 	beq	r18,zero,30bdc <__sfvwrite_r+0x184>
   30b74:	1880800c 	andi	r2,r3,512
   30b78:	84c00217 	ldw	r19,8(r16)
   30b7c:	10002126 	beq	r2,zero,30c04 <__sfvwrite_r+0x1ac>
   30b80:	982f883a 	mov	r23,r19
   30b84:	94c09336 	bltu	r18,r19,30dd4 <__sfvwrite_r+0x37c>
   30b88:	1881200c 	andi	r2,r3,1152
   30b8c:	10009e1e 	bne	r2,zero,30e08 <__sfvwrite_r+0x3b0>
   30b90:	81000017 	ldw	r4,0(r16)
   30b94:	b80d883a 	mov	r6,r23
   30b98:	e00b883a 	mov	r5,fp
   30b9c:	00311880 	call	31188 <memmove>
   30ba0:	80c00217 	ldw	r3,8(r16)
   30ba4:	81000017 	ldw	r4,0(r16)
   30ba8:	9005883a 	mov	r2,r18
   30bac:	1ce7c83a 	sub	r19,r3,r19
   30bb0:	25cf883a 	add	r7,r4,r23
   30bb4:	84c00215 	stw	r19,8(r16)
   30bb8:	81c00015 	stw	r7,0(r16)
   30bbc:	a0c00217 	ldw	r3,8(r20)
   30bc0:	e0b9883a 	add	fp,fp,r2
   30bc4:	90a5c83a 	sub	r18,r18,r2
   30bc8:	18a7c83a 	sub	r19,r3,r2
   30bcc:	a4c00215 	stw	r19,8(r20)
   30bd0:	983fce26 	beq	r19,zero,30b0c <__sfvwrite_r+0xb4>
   30bd4:	80c0030b 	ldhu	r3,12(r16)
   30bd8:	903fe61e 	bne	r18,zero,30b74 <__sfvwrite_r+0x11c>
   30bdc:	8f000017 	ldw	fp,0(r17)
   30be0:	8c800117 	ldw	r18,4(r17)
   30be4:	8c400204 	addi	r17,r17,8
   30be8:	003fe106 	br	30b70 <__sfvwrite_r+0x118>
   30bec:	8cc00017 	ldw	r19,0(r17)
   30bf0:	8c800117 	ldw	r18,4(r17)
   30bf4:	8c400204 	addi	r17,r17,8
   30bf8:	003fb306 	br	30ac8 <__sfvwrite_r+0x70>
   30bfc:	0005883a 	mov	r2,zero
   30c00:	f800283a 	ret
   30c04:	81000017 	ldw	r4,0(r16)
   30c08:	80800417 	ldw	r2,16(r16)
   30c0c:	11005736 	bltu	r2,r4,30d6c <__sfvwrite_r+0x314>
   30c10:	85c00517 	ldw	r23,20(r16)
   30c14:	95c05536 	bltu	r18,r23,30d6c <__sfvwrite_r+0x314>
   30c18:	00a00034 	movhi	r2,32768
   30c1c:	10bfffc4 	addi	r2,r2,-1
   30c20:	9009883a 	mov	r4,r18
   30c24:	1480012e 	bgeu	r2,r18,30c2c <__sfvwrite_r+0x1d4>
   30c28:	1009883a 	mov	r4,r2
   30c2c:	b80b883a 	mov	r5,r23
   30c30:	00259b80 	call	259b8 <__divsi3>
   30c34:	15cf383a 	mul	r7,r2,r23
   30c38:	81400717 	ldw	r5,28(r16)
   30c3c:	80800917 	ldw	r2,36(r16)
   30c40:	e00d883a 	mov	r6,fp
   30c44:	a809883a 	mov	r4,r21
   30c48:	103ee83a 	callr	r2
   30c4c:	00bfdb16 	blt	zero,r2,30bbc <__sfvwrite_r+0x164>
   30c50:	8080030b 	ldhu	r2,12(r16)
   30c54:	10801014 	ori	r2,r2,64
   30c58:	8080030d 	sth	r2,12(r16)
   30c5c:	00bfffc4 	movi	r2,-1
   30c60:	003fab06 	br	30b10 <__sfvwrite_r+0xb8>
   30c64:	0027883a 	mov	r19,zero
   30c68:	0011883a 	mov	r8,zero
   30c6c:	0039883a 	mov	fp,zero
   30c70:	0025883a 	mov	r18,zero
   30c74:	90001f26 	beq	r18,zero,30cf4 <__sfvwrite_r+0x29c>
   30c78:	40005a26 	beq	r8,zero,30de4 <__sfvwrite_r+0x38c>
   30c7c:	982d883a 	mov	r22,r19
   30c80:	94c0012e 	bgeu	r18,r19,30c88 <__sfvwrite_r+0x230>
   30c84:	902d883a 	mov	r22,r18
   30c88:	81000017 	ldw	r4,0(r16)
   30c8c:	80800417 	ldw	r2,16(r16)
   30c90:	b02f883a 	mov	r23,r22
   30c94:	81c00517 	ldw	r7,20(r16)
   30c98:	1100032e 	bgeu	r2,r4,30ca8 <__sfvwrite_r+0x250>
   30c9c:	80c00217 	ldw	r3,8(r16)
   30ca0:	38c7883a 	add	r3,r7,r3
   30ca4:	1d801816 	blt	r3,r22,30d08 <__sfvwrite_r+0x2b0>
   30ca8:	b1c03e16 	blt	r22,r7,30da4 <__sfvwrite_r+0x34c>
   30cac:	80800917 	ldw	r2,36(r16)
   30cb0:	81400717 	ldw	r5,28(r16)
   30cb4:	e00d883a 	mov	r6,fp
   30cb8:	da000115 	stw	r8,4(sp)
   30cbc:	a809883a 	mov	r4,r21
   30cc0:	103ee83a 	callr	r2
   30cc4:	102f883a 	mov	r23,r2
   30cc8:	da000117 	ldw	r8,4(sp)
   30ccc:	00bfe00e 	bge	zero,r2,30c50 <__sfvwrite_r+0x1f8>
   30cd0:	9de7c83a 	sub	r19,r19,r23
   30cd4:	98001f26 	beq	r19,zero,30d54 <__sfvwrite_r+0x2fc>
   30cd8:	a0800217 	ldw	r2,8(r20)
   30cdc:	e5f9883a 	add	fp,fp,r23
   30ce0:	95e5c83a 	sub	r18,r18,r23
   30ce4:	15efc83a 	sub	r23,r2,r23
   30ce8:	a5c00215 	stw	r23,8(r20)
   30cec:	b83f8726 	beq	r23,zero,30b0c <__sfvwrite_r+0xb4>
   30cf0:	903fe11e 	bne	r18,zero,30c78 <__sfvwrite_r+0x220>
   30cf4:	8f000017 	ldw	fp,0(r17)
   30cf8:	8c800117 	ldw	r18,4(r17)
   30cfc:	0011883a 	mov	r8,zero
   30d00:	8c400204 	addi	r17,r17,8
   30d04:	003fdb06 	br	30c74 <__sfvwrite_r+0x21c>
   30d08:	180d883a 	mov	r6,r3
   30d0c:	e00b883a 	mov	r5,fp
   30d10:	da000115 	stw	r8,4(sp)
   30d14:	d8c00015 	stw	r3,0(sp)
   30d18:	00311880 	call	31188 <memmove>
   30d1c:	d8c00017 	ldw	r3,0(sp)
   30d20:	80800017 	ldw	r2,0(r16)
   30d24:	800b883a 	mov	r5,r16
   30d28:	a809883a 	mov	r4,r21
   30d2c:	10c5883a 	add	r2,r2,r3
   30d30:	80800015 	stw	r2,0(r16)
   30d34:	d8c00015 	stw	r3,0(sp)
   30d38:	0029b880 	call	29b88 <_fflush_r>
   30d3c:	d8c00017 	ldw	r3,0(sp)
   30d40:	da000117 	ldw	r8,4(sp)
   30d44:	103fc21e 	bne	r2,zero,30c50 <__sfvwrite_r+0x1f8>
   30d48:	182f883a 	mov	r23,r3
   30d4c:	9de7c83a 	sub	r19,r19,r23
   30d50:	983fe11e 	bne	r19,zero,30cd8 <__sfvwrite_r+0x280>
   30d54:	800b883a 	mov	r5,r16
   30d58:	a809883a 	mov	r4,r21
   30d5c:	0029b880 	call	29b88 <_fflush_r>
   30d60:	103fbb1e 	bne	r2,zero,30c50 <__sfvwrite_r+0x1f8>
   30d64:	0011883a 	mov	r8,zero
   30d68:	003fdb06 	br	30cd8 <__sfvwrite_r+0x280>
   30d6c:	94c0012e 	bgeu	r18,r19,30d74 <__sfvwrite_r+0x31c>
   30d70:	9027883a 	mov	r19,r18
   30d74:	980d883a 	mov	r6,r19
   30d78:	e00b883a 	mov	r5,fp
   30d7c:	00311880 	call	31188 <memmove>
   30d80:	80800217 	ldw	r2,8(r16)
   30d84:	80c00017 	ldw	r3,0(r16)
   30d88:	14c5c83a 	sub	r2,r2,r19
   30d8c:	1cc7883a 	add	r3,r3,r19
   30d90:	80800215 	stw	r2,8(r16)
   30d94:	80c00015 	stw	r3,0(r16)
   30d98:	10004326 	beq	r2,zero,30ea8 <__sfvwrite_r+0x450>
   30d9c:	9805883a 	mov	r2,r19
   30da0:	003f8606 	br	30bbc <__sfvwrite_r+0x164>
   30da4:	b00d883a 	mov	r6,r22
   30da8:	e00b883a 	mov	r5,fp
   30dac:	da000115 	stw	r8,4(sp)
   30db0:	00311880 	call	31188 <memmove>
   30db4:	80800217 	ldw	r2,8(r16)
   30db8:	80c00017 	ldw	r3,0(r16)
   30dbc:	da000117 	ldw	r8,4(sp)
   30dc0:	1585c83a 	sub	r2,r2,r22
   30dc4:	1dad883a 	add	r22,r3,r22
   30dc8:	80800215 	stw	r2,8(r16)
   30dcc:	85800015 	stw	r22,0(r16)
   30dd0:	003fbf06 	br	30cd0 <__sfvwrite_r+0x278>
   30dd4:	81000017 	ldw	r4,0(r16)
   30dd8:	9027883a 	mov	r19,r18
   30ddc:	902f883a 	mov	r23,r18
   30de0:	003f6c06 	br	30b94 <__sfvwrite_r+0x13c>
   30de4:	900d883a 	mov	r6,r18
   30de8:	01400284 	movi	r5,10
   30dec:	e009883a 	mov	r4,fp
   30df0:	00310a40 	call	310a4 <memchr>
   30df4:	10003e26 	beq	r2,zero,30ef0 <__sfvwrite_r+0x498>
   30df8:	10800044 	addi	r2,r2,1
   30dfc:	1727c83a 	sub	r19,r2,fp
   30e00:	02000044 	movi	r8,1
   30e04:	003f9d06 	br	30c7c <__sfvwrite_r+0x224>
   30e08:	80800517 	ldw	r2,20(r16)
   30e0c:	81400417 	ldw	r5,16(r16)
   30e10:	81c00017 	ldw	r7,0(r16)
   30e14:	10a7883a 	add	r19,r2,r2
   30e18:	9885883a 	add	r2,r19,r2
   30e1c:	1026d7fa 	srli	r19,r2,31
   30e20:	396dc83a 	sub	r22,r7,r5
   30e24:	b1000044 	addi	r4,r22,1
   30e28:	9885883a 	add	r2,r19,r2
   30e2c:	1027d07a 	srai	r19,r2,1
   30e30:	2485883a 	add	r2,r4,r18
   30e34:	980d883a 	mov	r6,r19
   30e38:	9880022e 	bgeu	r19,r2,30e44 <__sfvwrite_r+0x3ec>
   30e3c:	1027883a 	mov	r19,r2
   30e40:	100d883a 	mov	r6,r2
   30e44:	18c1000c 	andi	r3,r3,1024
   30e48:	18001c26 	beq	r3,zero,30ebc <__sfvwrite_r+0x464>
   30e4c:	300b883a 	mov	r5,r6
   30e50:	a809883a 	mov	r4,r21
   30e54:	002af340 	call	2af34 <_malloc_r>
   30e58:	102f883a 	mov	r23,r2
   30e5c:	10002926 	beq	r2,zero,30f04 <__sfvwrite_r+0x4ac>
   30e60:	81400417 	ldw	r5,16(r16)
   30e64:	b00d883a 	mov	r6,r22
   30e68:	1009883a 	mov	r4,r2
   30e6c:	002b7400 	call	2b740 <memcpy>
   30e70:	8080030b 	ldhu	r2,12(r16)
   30e74:	00fedfc4 	movi	r3,-1153
   30e78:	10c4703a 	and	r2,r2,r3
   30e7c:	10802014 	ori	r2,r2,128
   30e80:	8080030d 	sth	r2,12(r16)
   30e84:	bd89883a 	add	r4,r23,r22
   30e88:	9d8fc83a 	sub	r7,r19,r22
   30e8c:	85c00415 	stw	r23,16(r16)
   30e90:	84c00515 	stw	r19,20(r16)
   30e94:	81000015 	stw	r4,0(r16)
   30e98:	9027883a 	mov	r19,r18
   30e9c:	81c00215 	stw	r7,8(r16)
   30ea0:	902f883a 	mov	r23,r18
   30ea4:	003f3b06 	br	30b94 <__sfvwrite_r+0x13c>
   30ea8:	800b883a 	mov	r5,r16
   30eac:	a809883a 	mov	r4,r21
   30eb0:	0029b880 	call	29b88 <_fflush_r>
   30eb4:	103fb926 	beq	r2,zero,30d9c <__sfvwrite_r+0x344>
   30eb8:	003f6506 	br	30c50 <__sfvwrite_r+0x1f8>
   30ebc:	a809883a 	mov	r4,r21
   30ec0:	00324a80 	call	324a8 <_realloc_r>
   30ec4:	102f883a 	mov	r23,r2
   30ec8:	103fee1e 	bne	r2,zero,30e84 <__sfvwrite_r+0x42c>
   30ecc:	81400417 	ldw	r5,16(r16)
   30ed0:	a809883a 	mov	r4,r21
   30ed4:	002a1e40 	call	2a1e4 <_free_r>
   30ed8:	8080030b 	ldhu	r2,12(r16)
   30edc:	00ffdfc4 	movi	r3,-129
   30ee0:	1884703a 	and	r2,r3,r2
   30ee4:	00c00304 	movi	r3,12
   30ee8:	a8c00015 	stw	r3,0(r21)
   30eec:	003f5906 	br	30c54 <__sfvwrite_r+0x1fc>
   30ef0:	94c00044 	addi	r19,r18,1
   30ef4:	02000044 	movi	r8,1
   30ef8:	003f6006 	br	30c7c <__sfvwrite_r+0x224>
   30efc:	00bfffc4 	movi	r2,-1
   30f00:	003f0306 	br	30b10 <__sfvwrite_r+0xb8>
   30f04:	00800304 	movi	r2,12
   30f08:	a8800015 	stw	r2,0(r21)
   30f0c:	8080030b 	ldhu	r2,12(r16)
   30f10:	003f5006 	br	30c54 <__sfvwrite_r+0x1fc>

00030f14 <_isatty_r>:
   30f14:	defffd04 	addi	sp,sp,-12
   30f18:	dc000015 	stw	r16,0(sp)
   30f1c:	04000134 	movhi	r16,4
   30f20:	dc400115 	stw	r17,4(sp)
   30f24:	84399f04 	addi	r16,r16,-6532
   30f28:	2023883a 	mov	r17,r4
   30f2c:	2809883a 	mov	r4,r5
   30f30:	dfc00215 	stw	ra,8(sp)
   30f34:	80000015 	stw	zero,0(r16)
   30f38:	00354800 	call	35480 <isatty>
   30f3c:	00ffffc4 	movi	r3,-1
   30f40:	10c00526 	beq	r2,r3,30f58 <_isatty_r+0x44>
   30f44:	dfc00217 	ldw	ra,8(sp)
   30f48:	dc400117 	ldw	r17,4(sp)
   30f4c:	dc000017 	ldw	r16,0(sp)
   30f50:	dec00304 	addi	sp,sp,12
   30f54:	f800283a 	ret
   30f58:	80c00017 	ldw	r3,0(r16)
   30f5c:	183ff926 	beq	r3,zero,30f44 <_isatty_r+0x30>
   30f60:	88c00015 	stw	r3,0(r17)
   30f64:	003ff706 	br	30f44 <_isatty_r+0x30>

00030f68 <_setlocale_r>:
   30f68:	30001b26 	beq	r6,zero,30fd8 <_setlocale_r+0x70>
   30f6c:	01400134 	movhi	r5,4
   30f70:	defffe04 	addi	sp,sp,-8
   30f74:	29635b04 	addi	r5,r5,-29332
   30f78:	3009883a 	mov	r4,r6
   30f7c:	dc000015 	stw	r16,0(sp)
   30f80:	dfc00115 	stw	ra,4(sp)
   30f84:	3021883a 	mov	r16,r6
   30f88:	0032a0c0 	call	32a0c <strcmp>
   30f8c:	1000061e 	bne	r2,zero,30fa8 <_setlocale_r+0x40>
   30f90:	00800134 	movhi	r2,4
   30f94:	10a0db04 	addi	r2,r2,-31892
   30f98:	dfc00117 	ldw	ra,4(sp)
   30f9c:	dc000017 	ldw	r16,0(sp)
   30fa0:	dec00204 	addi	sp,sp,8
   30fa4:	f800283a 	ret
   30fa8:	01400134 	movhi	r5,4
   30fac:	2960db04 	addi	r5,r5,-31892
   30fb0:	8009883a 	mov	r4,r16
   30fb4:	0032a0c0 	call	32a0c <strcmp>
   30fb8:	103ff526 	beq	r2,zero,30f90 <_setlocale_r+0x28>
   30fbc:	01400134 	movhi	r5,4
   30fc0:	2962a604 	addi	r5,r5,-30056
   30fc4:	8009883a 	mov	r4,r16
   30fc8:	0032a0c0 	call	32a0c <strcmp>
   30fcc:	103ff026 	beq	r2,zero,30f90 <_setlocale_r+0x28>
   30fd0:	0005883a 	mov	r2,zero
   30fd4:	003ff006 	br	30f98 <_setlocale_r+0x30>
   30fd8:	00800134 	movhi	r2,4
   30fdc:	10a0db04 	addi	r2,r2,-31892
   30fe0:	f800283a 	ret

00030fe4 <__locale_charset>:
   30fe4:	00800134 	movhi	r2,4
   30fe8:	10add604 	addi	r2,r2,-18600
   30fec:	f800283a 	ret

00030ff0 <__locale_mb_cur_max>:
   30ff0:	00800134 	movhi	r2,4
   30ff4:	10aea304 	addi	r2,r2,-17780
   30ff8:	10800017 	ldw	r2,0(r2)
   30ffc:	f800283a 	ret

00031000 <__locale_msgcharset>:
   31000:	00800134 	movhi	r2,4
   31004:	10adce04 	addi	r2,r2,-18632
   31008:	f800283a 	ret

0003100c <__locale_cjk_lang>:
   3100c:	0005883a 	mov	r2,zero
   31010:	f800283a 	ret

00031014 <_localeconv_r>:
   31014:	00800134 	movhi	r2,4
   31018:	10adde04 	addi	r2,r2,-18568
   3101c:	f800283a 	ret

00031020 <setlocale>:
   31020:	00800134 	movhi	r2,4
   31024:	10ae9f04 	addi	r2,r2,-17796
   31028:	280d883a 	mov	r6,r5
   3102c:	200b883a 	mov	r5,r4
   31030:	11000017 	ldw	r4,0(r2)
   31034:	0030f681 	jmpi	30f68 <_setlocale_r>

00031038 <localeconv>:
   31038:	00800134 	movhi	r2,4
   3103c:	10adde04 	addi	r2,r2,-18568
   31040:	f800283a 	ret

00031044 <_lseek_r>:
   31044:	defffd04 	addi	sp,sp,-12
   31048:	2805883a 	mov	r2,r5
   3104c:	dc000015 	stw	r16,0(sp)
   31050:	04000134 	movhi	r16,4
   31054:	dc400115 	stw	r17,4(sp)
   31058:	300b883a 	mov	r5,r6
   3105c:	84399f04 	addi	r16,r16,-6532
   31060:	2023883a 	mov	r17,r4
   31064:	380d883a 	mov	r6,r7
   31068:	1009883a 	mov	r4,r2
   3106c:	dfc00215 	stw	ra,8(sp)
   31070:	80000015 	stw	zero,0(r16)
   31074:	003564c0 	call	3564c <lseek>
   31078:	00ffffc4 	movi	r3,-1
   3107c:	10c00526 	beq	r2,r3,31094 <_lseek_r+0x50>
   31080:	dfc00217 	ldw	ra,8(sp)
   31084:	dc400117 	ldw	r17,4(sp)
   31088:	dc000017 	ldw	r16,0(sp)
   3108c:	dec00304 	addi	sp,sp,12
   31090:	f800283a 	ret
   31094:	80c00017 	ldw	r3,0(r16)
   31098:	183ff926 	beq	r3,zero,31080 <_lseek_r+0x3c>
   3109c:	88c00015 	stw	r3,0(r17)
   310a0:	003ff706 	br	31080 <_lseek_r+0x3c>

000310a4 <memchr>:
   310a4:	208000cc 	andi	r2,r4,3
   310a8:	280f883a 	mov	r7,r5
   310ac:	10003426 	beq	r2,zero,31180 <memchr+0xdc>
   310b0:	30bfffc4 	addi	r2,r6,-1
   310b4:	30001a26 	beq	r6,zero,31120 <memchr+0x7c>
   310b8:	20c00003 	ldbu	r3,0(r4)
   310bc:	29803fcc 	andi	r6,r5,255
   310c0:	30c0051e 	bne	r6,r3,310d8 <memchr+0x34>
   310c4:	00001806 	br	31128 <memchr+0x84>
   310c8:	10001526 	beq	r2,zero,31120 <memchr+0x7c>
   310cc:	20c00003 	ldbu	r3,0(r4)
   310d0:	10bfffc4 	addi	r2,r2,-1
   310d4:	30c01426 	beq	r6,r3,31128 <memchr+0x84>
   310d8:	21000044 	addi	r4,r4,1
   310dc:	20c000cc 	andi	r3,r4,3
   310e0:	183ff91e 	bne	r3,zero,310c8 <memchr+0x24>
   310e4:	020000c4 	movi	r8,3
   310e8:	40801136 	bltu	r8,r2,31130 <memchr+0x8c>
   310ec:	10000c26 	beq	r2,zero,31120 <memchr+0x7c>
   310f0:	20c00003 	ldbu	r3,0(r4)
   310f4:	29403fcc 	andi	r5,r5,255
   310f8:	28c00b26 	beq	r5,r3,31128 <memchr+0x84>
   310fc:	20c00044 	addi	r3,r4,1
   31100:	39803fcc 	andi	r6,r7,255
   31104:	2089883a 	add	r4,r4,r2
   31108:	00000306 	br	31118 <memchr+0x74>
   3110c:	18c00044 	addi	r3,r3,1
   31110:	197fffc3 	ldbu	r5,-1(r3)
   31114:	31400526 	beq	r6,r5,3112c <memchr+0x88>
   31118:	1805883a 	mov	r2,r3
   3111c:	20fffb1e 	bne	r4,r3,3110c <memchr+0x68>
   31120:	0005883a 	mov	r2,zero
   31124:	f800283a 	ret
   31128:	2005883a 	mov	r2,r4
   3112c:	f800283a 	ret
   31130:	28c03fcc 	andi	r3,r5,255
   31134:	1812923a 	slli	r9,r3,8
   31138:	02ffbff4 	movhi	r11,65279
   3113c:	02a02074 	movhi	r10,32897
   31140:	48d2b03a 	or	r9,r9,r3
   31144:	4806943a 	slli	r3,r9,16
   31148:	5affbfc4 	addi	r11,r11,-257
   3114c:	52a02004 	addi	r10,r10,-32640
   31150:	48d2b03a 	or	r9,r9,r3
   31154:	20c00017 	ldw	r3,0(r4)
   31158:	48c6f03a 	xor	r3,r9,r3
   3115c:	1acd883a 	add	r6,r3,r11
   31160:	00c6303a 	nor	r3,zero,r3
   31164:	30c6703a 	and	r3,r6,r3
   31168:	1a86703a 	and	r3,r3,r10
   3116c:	183fe01e 	bne	r3,zero,310f0 <memchr+0x4c>
   31170:	10bfff04 	addi	r2,r2,-4
   31174:	21000104 	addi	r4,r4,4
   31178:	40bff636 	bltu	r8,r2,31154 <memchr+0xb0>
   3117c:	003fdb06 	br	310ec <memchr+0x48>
   31180:	3005883a 	mov	r2,r6
   31184:	003fd706 	br	310e4 <memchr+0x40>

00031188 <memmove>:
   31188:	2005883a 	mov	r2,r4
   3118c:	29000b2e 	bgeu	r5,r4,311bc <memmove+0x34>
   31190:	298f883a 	add	r7,r5,r6
   31194:	21c0092e 	bgeu	r4,r7,311bc <memmove+0x34>
   31198:	2187883a 	add	r3,r4,r6
   3119c:	198bc83a 	sub	r5,r3,r6
   311a0:	30004826 	beq	r6,zero,312c4 <memmove+0x13c>
   311a4:	39ffffc4 	addi	r7,r7,-1
   311a8:	39000003 	ldbu	r4,0(r7)
   311ac:	18ffffc4 	addi	r3,r3,-1
   311b0:	19000005 	stb	r4,0(r3)
   311b4:	28fffb1e 	bne	r5,r3,311a4 <memmove+0x1c>
   311b8:	f800283a 	ret
   311bc:	00c003c4 	movi	r3,15
   311c0:	1980412e 	bgeu	r3,r6,312c8 <memmove+0x140>
   311c4:	2886b03a 	or	r3,r5,r2
   311c8:	18c000cc 	andi	r3,r3,3
   311cc:	1800401e 	bne	r3,zero,312d0 <memmove+0x148>
   311d0:	33fffc04 	addi	r15,r6,-16
   311d4:	781ed13a 	srli	r15,r15,4
   311d8:	28c00104 	addi	r3,r5,4
   311dc:	13400104 	addi	r13,r2,4
   311e0:	781c913a 	slli	r14,r15,4
   311e4:	2b000204 	addi	r12,r5,8
   311e8:	12c00204 	addi	r11,r2,8
   311ec:	73800504 	addi	r14,r14,20
   311f0:	2a800304 	addi	r10,r5,12
   311f4:	12400304 	addi	r9,r2,12
   311f8:	2b9d883a 	add	r14,r5,r14
   311fc:	2811883a 	mov	r8,r5
   31200:	100f883a 	mov	r7,r2
   31204:	41000017 	ldw	r4,0(r8)
   31208:	39c00404 	addi	r7,r7,16
   3120c:	18c00404 	addi	r3,r3,16
   31210:	393ffc15 	stw	r4,-16(r7)
   31214:	193ffc17 	ldw	r4,-16(r3)
   31218:	6b400404 	addi	r13,r13,16
   3121c:	5ac00404 	addi	r11,r11,16
   31220:	693ffc15 	stw	r4,-16(r13)
   31224:	61000017 	ldw	r4,0(r12)
   31228:	4a400404 	addi	r9,r9,16
   3122c:	42000404 	addi	r8,r8,16
   31230:	593ffc15 	stw	r4,-16(r11)
   31234:	51000017 	ldw	r4,0(r10)
   31238:	63000404 	addi	r12,r12,16
   3123c:	52800404 	addi	r10,r10,16
   31240:	493ffc15 	stw	r4,-16(r9)
   31244:	1bbfef1e 	bne	r3,r14,31204 <memmove+0x7c>
   31248:	79000044 	addi	r4,r15,1
   3124c:	2008913a 	slli	r4,r4,4
   31250:	328003cc 	andi	r10,r6,15
   31254:	02c000c4 	movi	r11,3
   31258:	1107883a 	add	r3,r2,r4
   3125c:	290b883a 	add	r5,r5,r4
   31260:	5a801e2e 	bgeu	r11,r10,312dc <memmove+0x154>
   31264:	1813883a 	mov	r9,r3
   31268:	2811883a 	mov	r8,r5
   3126c:	500f883a 	mov	r7,r10
   31270:	41000017 	ldw	r4,0(r8)
   31274:	4a400104 	addi	r9,r9,4
   31278:	39ffff04 	addi	r7,r7,-4
   3127c:	493fff15 	stw	r4,-4(r9)
   31280:	42000104 	addi	r8,r8,4
   31284:	59fffa36 	bltu	r11,r7,31270 <memmove+0xe8>
   31288:	513fff04 	addi	r4,r10,-4
   3128c:	2008d0ba 	srli	r4,r4,2
   31290:	318000cc 	andi	r6,r6,3
   31294:	21000044 	addi	r4,r4,1
   31298:	2109883a 	add	r4,r4,r4
   3129c:	2109883a 	add	r4,r4,r4
   312a0:	1907883a 	add	r3,r3,r4
   312a4:	290b883a 	add	r5,r5,r4
   312a8:	30000b26 	beq	r6,zero,312d8 <memmove+0x150>
   312ac:	198d883a 	add	r6,r3,r6
   312b0:	29c00003 	ldbu	r7,0(r5)
   312b4:	18c00044 	addi	r3,r3,1
   312b8:	29400044 	addi	r5,r5,1
   312bc:	19ffffc5 	stb	r7,-1(r3)
   312c0:	19bffb1e 	bne	r3,r6,312b0 <memmove+0x128>
   312c4:	f800283a 	ret
   312c8:	1007883a 	mov	r3,r2
   312cc:	003ff606 	br	312a8 <memmove+0x120>
   312d0:	1007883a 	mov	r3,r2
   312d4:	003ff506 	br	312ac <memmove+0x124>
   312d8:	f800283a 	ret
   312dc:	500d883a 	mov	r6,r10
   312e0:	003ff106 	br	312a8 <memmove+0x120>

000312e4 <_Balloc>:
   312e4:	20801317 	ldw	r2,76(r4)
   312e8:	defffc04 	addi	sp,sp,-16
   312ec:	dc400115 	stw	r17,4(sp)
   312f0:	dc000015 	stw	r16,0(sp)
   312f4:	dfc00315 	stw	ra,12(sp)
   312f8:	dc800215 	stw	r18,8(sp)
   312fc:	2023883a 	mov	r17,r4
   31300:	2821883a 	mov	r16,r5
   31304:	10000f26 	beq	r2,zero,31344 <_Balloc+0x60>
   31308:	8407883a 	add	r3,r16,r16
   3130c:	18c7883a 	add	r3,r3,r3
   31310:	10c7883a 	add	r3,r2,r3
   31314:	18800017 	ldw	r2,0(r3)
   31318:	10001126 	beq	r2,zero,31360 <_Balloc+0x7c>
   3131c:	11000017 	ldw	r4,0(r2)
   31320:	19000015 	stw	r4,0(r3)
   31324:	10000415 	stw	zero,16(r2)
   31328:	10000315 	stw	zero,12(r2)
   3132c:	dfc00317 	ldw	ra,12(sp)
   31330:	dc800217 	ldw	r18,8(sp)
   31334:	dc400117 	ldw	r17,4(sp)
   31338:	dc000017 	ldw	r16,0(sp)
   3133c:	dec00404 	addi	sp,sp,16
   31340:	f800283a 	ret
   31344:	01800844 	movi	r6,33
   31348:	01400104 	movi	r5,4
   3134c:	00342880 	call	34288 <_calloc_r>
   31350:	88801315 	stw	r2,76(r17)
   31354:	103fec1e 	bne	r2,zero,31308 <_Balloc+0x24>
   31358:	0005883a 	mov	r2,zero
   3135c:	003ff306 	br	3132c <_Balloc+0x48>
   31360:	01400044 	movi	r5,1
   31364:	2c24983a 	sll	r18,r5,r16
   31368:	8809883a 	mov	r4,r17
   3136c:	91800144 	addi	r6,r18,5
   31370:	318d883a 	add	r6,r6,r6
   31374:	318d883a 	add	r6,r6,r6
   31378:	00342880 	call	34288 <_calloc_r>
   3137c:	103ff626 	beq	r2,zero,31358 <_Balloc+0x74>
   31380:	14000115 	stw	r16,4(r2)
   31384:	14800215 	stw	r18,8(r2)
   31388:	003fe606 	br	31324 <_Balloc+0x40>

0003138c <_Bfree>:
   3138c:	28000826 	beq	r5,zero,313b0 <_Bfree+0x24>
   31390:	28c00117 	ldw	r3,4(r5)
   31394:	20801317 	ldw	r2,76(r4)
   31398:	18c7883a 	add	r3,r3,r3
   3139c:	18c7883a 	add	r3,r3,r3
   313a0:	10c5883a 	add	r2,r2,r3
   313a4:	10c00017 	ldw	r3,0(r2)
   313a8:	28c00015 	stw	r3,0(r5)
   313ac:	11400015 	stw	r5,0(r2)
   313b0:	f800283a 	ret

000313b4 <__multadd>:
   313b4:	defffa04 	addi	sp,sp,-24
   313b8:	dc800315 	stw	r18,12(sp)
   313bc:	dc400215 	stw	r17,8(sp)
   313c0:	dc000115 	stw	r16,4(sp)
   313c4:	2823883a 	mov	r17,r5
   313c8:	2c000417 	ldw	r16,16(r5)
   313cc:	dfc00515 	stw	ra,20(sp)
   313d0:	dcc00415 	stw	r19,16(sp)
   313d4:	2025883a 	mov	r18,r4
   313d8:	29400504 	addi	r5,r5,20
   313dc:	0011883a 	mov	r8,zero
   313e0:	28c00017 	ldw	r3,0(r5)
   313e4:	29400104 	addi	r5,r5,4
   313e8:	42000044 	addi	r8,r8,1
   313ec:	18bfffcc 	andi	r2,r3,65535
   313f0:	1185383a 	mul	r2,r2,r6
   313f4:	1806d43a 	srli	r3,r3,16
   313f8:	11cf883a 	add	r7,r2,r7
   313fc:	3808d43a 	srli	r4,r7,16
   31400:	1987383a 	mul	r3,r3,r6
   31404:	38bfffcc 	andi	r2,r7,65535
   31408:	1907883a 	add	r3,r3,r4
   3140c:	1808943a 	slli	r4,r3,16
   31410:	180ed43a 	srli	r7,r3,16
   31414:	2085883a 	add	r2,r4,r2
   31418:	28bfff15 	stw	r2,-4(r5)
   3141c:	443ff016 	blt	r8,r16,313e0 <__multadd+0x2c>
   31420:	38000926 	beq	r7,zero,31448 <__multadd+0x94>
   31424:	88800217 	ldw	r2,8(r17)
   31428:	80800f0e 	bge	r16,r2,31468 <__multadd+0xb4>
   3142c:	80800144 	addi	r2,r16,5
   31430:	1085883a 	add	r2,r2,r2
   31434:	1085883a 	add	r2,r2,r2
   31438:	8885883a 	add	r2,r17,r2
   3143c:	11c00015 	stw	r7,0(r2)
   31440:	84000044 	addi	r16,r16,1
   31444:	8c000415 	stw	r16,16(r17)
   31448:	8805883a 	mov	r2,r17
   3144c:	dfc00517 	ldw	ra,20(sp)
   31450:	dcc00417 	ldw	r19,16(sp)
   31454:	dc800317 	ldw	r18,12(sp)
   31458:	dc400217 	ldw	r17,8(sp)
   3145c:	dc000117 	ldw	r16,4(sp)
   31460:	dec00604 	addi	sp,sp,24
   31464:	f800283a 	ret
   31468:	89400117 	ldw	r5,4(r17)
   3146c:	9009883a 	mov	r4,r18
   31470:	d9c00015 	stw	r7,0(sp)
   31474:	29400044 	addi	r5,r5,1
   31478:	00312e40 	call	312e4 <_Balloc>
   3147c:	89800417 	ldw	r6,16(r17)
   31480:	89400304 	addi	r5,r17,12
   31484:	11000304 	addi	r4,r2,12
   31488:	31800084 	addi	r6,r6,2
   3148c:	318d883a 	add	r6,r6,r6
   31490:	318d883a 	add	r6,r6,r6
   31494:	1027883a 	mov	r19,r2
   31498:	002b7400 	call	2b740 <memcpy>
   3149c:	d9c00017 	ldw	r7,0(sp)
   314a0:	88000a26 	beq	r17,zero,314cc <__multadd+0x118>
   314a4:	88c00117 	ldw	r3,4(r17)
   314a8:	90801317 	ldw	r2,76(r18)
   314ac:	18c7883a 	add	r3,r3,r3
   314b0:	18c7883a 	add	r3,r3,r3
   314b4:	10c5883a 	add	r2,r2,r3
   314b8:	10c00017 	ldw	r3,0(r2)
   314bc:	88c00015 	stw	r3,0(r17)
   314c0:	14400015 	stw	r17,0(r2)
   314c4:	9823883a 	mov	r17,r19
   314c8:	003fd806 	br	3142c <__multadd+0x78>
   314cc:	9823883a 	mov	r17,r19
   314d0:	003fd606 	br	3142c <__multadd+0x78>

000314d4 <__s2b>:
   314d4:	defff904 	addi	sp,sp,-28
   314d8:	dc400115 	stw	r17,4(sp)
   314dc:	dc000015 	stw	r16,0(sp)
   314e0:	2023883a 	mov	r17,r4
   314e4:	2821883a 	mov	r16,r5
   314e8:	39000204 	addi	r4,r7,8
   314ec:	01400244 	movi	r5,9
   314f0:	dcc00315 	stw	r19,12(sp)
   314f4:	dc800215 	stw	r18,8(sp)
   314f8:	dfc00615 	stw	ra,24(sp)
   314fc:	dd400515 	stw	r21,20(sp)
   31500:	dd000415 	stw	r20,16(sp)
   31504:	3825883a 	mov	r18,r7
   31508:	3027883a 	mov	r19,r6
   3150c:	00259b80 	call	259b8 <__divsi3>
   31510:	00c00044 	movi	r3,1
   31514:	000b883a 	mov	r5,zero
   31518:	1880030e 	bge	r3,r2,31528 <__s2b+0x54>
   3151c:	18c7883a 	add	r3,r3,r3
   31520:	29400044 	addi	r5,r5,1
   31524:	18bffd16 	blt	r3,r2,3151c <__s2b+0x48>
   31528:	8809883a 	mov	r4,r17
   3152c:	00312e40 	call	312e4 <_Balloc>
   31530:	d8c00717 	ldw	r3,28(sp)
   31534:	10c00515 	stw	r3,20(r2)
   31538:	00c00044 	movi	r3,1
   3153c:	10c00415 	stw	r3,16(r2)
   31540:	00c00244 	movi	r3,9
   31544:	1cc0210e 	bge	r3,r19,315cc <__s2b+0xf8>
   31548:	80eb883a 	add	r21,r16,r3
   3154c:	a829883a 	mov	r20,r21
   31550:	84e1883a 	add	r16,r16,r19
   31554:	a1c00007 	ldb	r7,0(r20)
   31558:	01800284 	movi	r6,10
   3155c:	a5000044 	addi	r20,r20,1
   31560:	100b883a 	mov	r5,r2
   31564:	39fff404 	addi	r7,r7,-48
   31568:	8809883a 	mov	r4,r17
   3156c:	00313b40 	call	313b4 <__multadd>
   31570:	a43ff81e 	bne	r20,r16,31554 <__s2b+0x80>
   31574:	ace1883a 	add	r16,r21,r19
   31578:	843ffe04 	addi	r16,r16,-8
   3157c:	9c800a0e 	bge	r19,r18,315a8 <__s2b+0xd4>
   31580:	94e5c83a 	sub	r18,r18,r19
   31584:	84a5883a 	add	r18,r16,r18
   31588:	81c00007 	ldb	r7,0(r16)
   3158c:	01800284 	movi	r6,10
   31590:	84000044 	addi	r16,r16,1
   31594:	100b883a 	mov	r5,r2
   31598:	39fff404 	addi	r7,r7,-48
   3159c:	8809883a 	mov	r4,r17
   315a0:	00313b40 	call	313b4 <__multadd>
   315a4:	84bff81e 	bne	r16,r18,31588 <__s2b+0xb4>
   315a8:	dfc00617 	ldw	ra,24(sp)
   315ac:	dd400517 	ldw	r21,20(sp)
   315b0:	dd000417 	ldw	r20,16(sp)
   315b4:	dcc00317 	ldw	r19,12(sp)
   315b8:	dc800217 	ldw	r18,8(sp)
   315bc:	dc400117 	ldw	r17,4(sp)
   315c0:	dc000017 	ldw	r16,0(sp)
   315c4:	dec00704 	addi	sp,sp,28
   315c8:	f800283a 	ret
   315cc:	84000284 	addi	r16,r16,10
   315d0:	1827883a 	mov	r19,r3
   315d4:	003fe906 	br	3157c <__s2b+0xa8>

000315d8 <__hi0bits>:
   315d8:	20bfffec 	andhi	r2,r4,65535
   315dc:	1000141e 	bne	r2,zero,31630 <__hi0bits+0x58>
   315e0:	2008943a 	slli	r4,r4,16
   315e4:	00800404 	movi	r2,16
   315e8:	20ffc02c 	andhi	r3,r4,65280
   315ec:	1800021e 	bne	r3,zero,315f8 <__hi0bits+0x20>
   315f0:	2008923a 	slli	r4,r4,8
   315f4:	10800204 	addi	r2,r2,8
   315f8:	20fc002c 	andhi	r3,r4,61440
   315fc:	1800021e 	bne	r3,zero,31608 <__hi0bits+0x30>
   31600:	2008913a 	slli	r4,r4,4
   31604:	10800104 	addi	r2,r2,4
   31608:	20f0002c 	andhi	r3,r4,49152
   3160c:	1800031e 	bne	r3,zero,3161c <__hi0bits+0x44>
   31610:	2109883a 	add	r4,r4,r4
   31614:	10800084 	addi	r2,r2,2
   31618:	2109883a 	add	r4,r4,r4
   3161c:	20000316 	blt	r4,zero,3162c <__hi0bits+0x54>
   31620:	2110002c 	andhi	r4,r4,16384
   31624:	2000041e 	bne	r4,zero,31638 <__hi0bits+0x60>
   31628:	00800804 	movi	r2,32
   3162c:	f800283a 	ret
   31630:	0005883a 	mov	r2,zero
   31634:	003fec06 	br	315e8 <__hi0bits+0x10>
   31638:	10800044 	addi	r2,r2,1
   3163c:	f800283a 	ret

00031640 <__lo0bits>:
   31640:	20c00017 	ldw	r3,0(r4)
   31644:	188001cc 	andi	r2,r3,7
   31648:	10000826 	beq	r2,zero,3166c <__lo0bits+0x2c>
   3164c:	1880004c 	andi	r2,r3,1
   31650:	1000211e 	bne	r2,zero,316d8 <__lo0bits+0x98>
   31654:	1880008c 	andi	r2,r3,2
   31658:	1000211e 	bne	r2,zero,316e0 <__lo0bits+0xa0>
   3165c:	1806d0ba 	srli	r3,r3,2
   31660:	00800084 	movi	r2,2
   31664:	20c00015 	stw	r3,0(r4)
   31668:	f800283a 	ret
   3166c:	18bfffcc 	andi	r2,r3,65535
   31670:	10001326 	beq	r2,zero,316c0 <__lo0bits+0x80>
   31674:	0005883a 	mov	r2,zero
   31678:	19403fcc 	andi	r5,r3,255
   3167c:	2800021e 	bne	r5,zero,31688 <__lo0bits+0x48>
   31680:	1806d23a 	srli	r3,r3,8
   31684:	10800204 	addi	r2,r2,8
   31688:	194003cc 	andi	r5,r3,15
   3168c:	2800021e 	bne	r5,zero,31698 <__lo0bits+0x58>
   31690:	1806d13a 	srli	r3,r3,4
   31694:	10800104 	addi	r2,r2,4
   31698:	194000cc 	andi	r5,r3,3
   3169c:	2800021e 	bne	r5,zero,316a8 <__lo0bits+0x68>
   316a0:	1806d0ba 	srli	r3,r3,2
   316a4:	10800084 	addi	r2,r2,2
   316a8:	1940004c 	andi	r5,r3,1
   316ac:	2800081e 	bne	r5,zero,316d0 <__lo0bits+0x90>
   316b0:	1806d07a 	srli	r3,r3,1
   316b4:	1800051e 	bne	r3,zero,316cc <__lo0bits+0x8c>
   316b8:	00800804 	movi	r2,32
   316bc:	f800283a 	ret
   316c0:	1806d43a 	srli	r3,r3,16
   316c4:	00800404 	movi	r2,16
   316c8:	003feb06 	br	31678 <__lo0bits+0x38>
   316cc:	10800044 	addi	r2,r2,1
   316d0:	20c00015 	stw	r3,0(r4)
   316d4:	f800283a 	ret
   316d8:	0005883a 	mov	r2,zero
   316dc:	f800283a 	ret
   316e0:	1806d07a 	srli	r3,r3,1
   316e4:	00800044 	movi	r2,1
   316e8:	20c00015 	stw	r3,0(r4)
   316ec:	f800283a 	ret

000316f0 <__i2b>:
   316f0:	defffd04 	addi	sp,sp,-12
   316f4:	dc000015 	stw	r16,0(sp)
   316f8:	04000044 	movi	r16,1
   316fc:	dc400115 	stw	r17,4(sp)
   31700:	2823883a 	mov	r17,r5
   31704:	800b883a 	mov	r5,r16
   31708:	dfc00215 	stw	ra,8(sp)
   3170c:	00312e40 	call	312e4 <_Balloc>
   31710:	14400515 	stw	r17,20(r2)
   31714:	14000415 	stw	r16,16(r2)
   31718:	dfc00217 	ldw	ra,8(sp)
   3171c:	dc400117 	ldw	r17,4(sp)
   31720:	dc000017 	ldw	r16,0(sp)
   31724:	dec00304 	addi	sp,sp,12
   31728:	f800283a 	ret

0003172c <__multiply>:
   3172c:	defffa04 	addi	sp,sp,-24
   31730:	dcc00315 	stw	r19,12(sp)
   31734:	dc800215 	stw	r18,8(sp)
   31738:	34c00417 	ldw	r19,16(r6)
   3173c:	2c800417 	ldw	r18,16(r5)
   31740:	dd000415 	stw	r20,16(sp)
   31744:	dc400115 	stw	r17,4(sp)
   31748:	dfc00515 	stw	ra,20(sp)
   3174c:	dc000015 	stw	r16,0(sp)
   31750:	2829883a 	mov	r20,r5
   31754:	3023883a 	mov	r17,r6
   31758:	94c0050e 	bge	r18,r19,31770 <__multiply+0x44>
   3175c:	9007883a 	mov	r3,r18
   31760:	3029883a 	mov	r20,r6
   31764:	9825883a 	mov	r18,r19
   31768:	2823883a 	mov	r17,r5
   3176c:	1827883a 	mov	r19,r3
   31770:	a0800217 	ldw	r2,8(r20)
   31774:	94e1883a 	add	r16,r18,r19
   31778:	a1400117 	ldw	r5,4(r20)
   3177c:	1400010e 	bge	r2,r16,31784 <__multiply+0x58>
   31780:	29400044 	addi	r5,r5,1
   31784:	00312e40 	call	312e4 <_Balloc>
   31788:	8415883a 	add	r10,r16,r16
   3178c:	12c00504 	addi	r11,r2,20
   31790:	5295883a 	add	r10,r10,r10
   31794:	5a95883a 	add	r10,r11,r10
   31798:	5807883a 	mov	r3,r11
   3179c:	5a80032e 	bgeu	r11,r10,317ac <__multiply+0x80>
   317a0:	18000015 	stw	zero,0(r3)
   317a4:	18c00104 	addi	r3,r3,4
   317a8:	1abffd36 	bltu	r3,r10,317a0 <__multiply+0x74>
   317ac:	9ce7883a 	add	r19,r19,r19
   317b0:	94a5883a 	add	r18,r18,r18
   317b4:	89800504 	addi	r6,r17,20
   317b8:	9ce7883a 	add	r19,r19,r19
   317bc:	a3400504 	addi	r13,r20,20
   317c0:	94a5883a 	add	r18,r18,r18
   317c4:	34d9883a 	add	r12,r6,r19
   317c8:	6c93883a 	add	r9,r13,r18
   317cc:	3300422e 	bgeu	r6,r12,318d8 <__multiply+0x1ac>
   317d0:	37c00017 	ldw	ra,0(r6)
   317d4:	fbffffcc 	andi	r15,ra,65535
   317d8:	78001b26 	beq	r15,zero,31848 <__multiply+0x11c>
   317dc:	5811883a 	mov	r8,r11
   317e0:	681d883a 	mov	r14,r13
   317e4:	000f883a 	mov	r7,zero
   317e8:	71000017 	ldw	r4,0(r14)
   317ec:	40c00017 	ldw	r3,0(r8)
   317f0:	73800104 	addi	r14,r14,4
   317f4:	217fffcc 	andi	r5,r4,65535
   317f8:	2bcb383a 	mul	r5,r5,r15
   317fc:	2008d43a 	srli	r4,r4,16
   31800:	1c7fffcc 	andi	r17,r3,65535
   31804:	2c4b883a 	add	r5,r5,r17
   31808:	29cb883a 	add	r5,r5,r7
   3180c:	23c9383a 	mul	r4,r4,r15
   31810:	1806d43a 	srli	r3,r3,16
   31814:	280ed43a 	srli	r7,r5,16
   31818:	297fffcc 	andi	r5,r5,65535
   3181c:	20c7883a 	add	r3,r4,r3
   31820:	19c7883a 	add	r3,r3,r7
   31824:	1808943a 	slli	r4,r3,16
   31828:	4023883a 	mov	r17,r8
   3182c:	180ed43a 	srli	r7,r3,16
   31830:	214ab03a 	or	r5,r4,r5
   31834:	41400015 	stw	r5,0(r8)
   31838:	42000104 	addi	r8,r8,4
   3183c:	727fea36 	bltu	r14,r9,317e8 <__multiply+0xbc>
   31840:	89c00115 	stw	r7,4(r17)
   31844:	37c00017 	ldw	ra,0(r6)
   31848:	f83ed43a 	srli	ra,ra,16
   3184c:	f8001f26 	beq	ra,zero,318cc <__multiply+0x1a0>
   31850:	58c00017 	ldw	r3,0(r11)
   31854:	681d883a 	mov	r14,r13
   31858:	581f883a 	mov	r15,r11
   3185c:	1811883a 	mov	r8,r3
   31860:	5825883a 	mov	r18,r11
   31864:	000f883a 	mov	r7,zero
   31868:	00000106 	br	31870 <__multiply+0x144>
   3186c:	8825883a 	mov	r18,r17
   31870:	7140000b 	ldhu	r5,0(r14)
   31874:	4010d43a 	srli	r8,r8,16
   31878:	193fffcc 	andi	r4,r3,65535
   3187c:	2fcb383a 	mul	r5,r5,ra
   31880:	7bc00104 	addi	r15,r15,4
   31884:	73800104 	addi	r14,r14,4
   31888:	2a0b883a 	add	r5,r5,r8
   3188c:	29cb883a 	add	r5,r5,r7
   31890:	2806943a 	slli	r3,r5,16
   31894:	94400104 	addi	r17,r18,4
   31898:	280ad43a 	srli	r5,r5,16
   3189c:	1908b03a 	or	r4,r3,r4
   318a0:	793fff15 	stw	r4,-4(r15)
   318a4:	70ffff17 	ldw	r3,-4(r14)
   318a8:	8a000017 	ldw	r8,0(r17)
   318ac:	1806d43a 	srli	r3,r3,16
   318b0:	413fffcc 	andi	r4,r8,65535
   318b4:	1fc7383a 	mul	r3,r3,ra
   318b8:	1907883a 	add	r3,r3,r4
   318bc:	1947883a 	add	r3,r3,r5
   318c0:	180ed43a 	srli	r7,r3,16
   318c4:	727fe936 	bltu	r14,r9,3186c <__multiply+0x140>
   318c8:	90c00115 	stw	r3,4(r18)
   318cc:	31800104 	addi	r6,r6,4
   318d0:	5ac00104 	addi	r11,r11,4
   318d4:	333fbe36 	bltu	r6,r12,317d0 <__multiply+0xa4>
   318d8:	0400090e 	bge	zero,r16,31900 <__multiply+0x1d4>
   318dc:	50ffff17 	ldw	r3,-4(r10)
   318e0:	52bfff04 	addi	r10,r10,-4
   318e4:	18000326 	beq	r3,zero,318f4 <__multiply+0x1c8>
   318e8:	00000506 	br	31900 <__multiply+0x1d4>
   318ec:	50c00017 	ldw	r3,0(r10)
   318f0:	1800031e 	bne	r3,zero,31900 <__multiply+0x1d4>
   318f4:	843fffc4 	addi	r16,r16,-1
   318f8:	52bfff04 	addi	r10,r10,-4
   318fc:	803ffb1e 	bne	r16,zero,318ec <__multiply+0x1c0>
   31900:	14000415 	stw	r16,16(r2)
   31904:	dfc00517 	ldw	ra,20(sp)
   31908:	dd000417 	ldw	r20,16(sp)
   3190c:	dcc00317 	ldw	r19,12(sp)
   31910:	dc800217 	ldw	r18,8(sp)
   31914:	dc400117 	ldw	r17,4(sp)
   31918:	dc000017 	ldw	r16,0(sp)
   3191c:	dec00604 	addi	sp,sp,24
   31920:	f800283a 	ret

00031924 <__pow5mult>:
   31924:	defffa04 	addi	sp,sp,-24
   31928:	dcc00315 	stw	r19,12(sp)
   3192c:	dc000015 	stw	r16,0(sp)
   31930:	dfc00515 	stw	ra,20(sp)
   31934:	dd000415 	stw	r20,16(sp)
   31938:	dc800215 	stw	r18,8(sp)
   3193c:	dc400115 	stw	r17,4(sp)
   31940:	308000cc 	andi	r2,r6,3
   31944:	3021883a 	mov	r16,r6
   31948:	2027883a 	mov	r19,r4
   3194c:	10002f1e 	bne	r2,zero,31a0c <__pow5mult+0xe8>
   31950:	2825883a 	mov	r18,r5
   31954:	8021d0ba 	srai	r16,r16,2
   31958:	80001a26 	beq	r16,zero,319c4 <__pow5mult+0xa0>
   3195c:	9c401217 	ldw	r17,72(r19)
   31960:	8800061e 	bne	r17,zero,3197c <__pow5mult+0x58>
   31964:	00003406 	br	31a38 <__pow5mult+0x114>
   31968:	8021d07a 	srai	r16,r16,1
   3196c:	80001526 	beq	r16,zero,319c4 <__pow5mult+0xa0>
   31970:	88800017 	ldw	r2,0(r17)
   31974:	10001c26 	beq	r2,zero,319e8 <__pow5mult+0xc4>
   31978:	1023883a 	mov	r17,r2
   3197c:	8080004c 	andi	r2,r16,1
   31980:	103ff926 	beq	r2,zero,31968 <__pow5mult+0x44>
   31984:	880d883a 	mov	r6,r17
   31988:	900b883a 	mov	r5,r18
   3198c:	9809883a 	mov	r4,r19
   31990:	003172c0 	call	3172c <__multiply>
   31994:	90001b26 	beq	r18,zero,31a04 <__pow5mult+0xe0>
   31998:	91000117 	ldw	r4,4(r18)
   3199c:	98c01317 	ldw	r3,76(r19)
   319a0:	8021d07a 	srai	r16,r16,1
   319a4:	2109883a 	add	r4,r4,r4
   319a8:	2109883a 	add	r4,r4,r4
   319ac:	1907883a 	add	r3,r3,r4
   319b0:	19000017 	ldw	r4,0(r3)
   319b4:	91000015 	stw	r4,0(r18)
   319b8:	1c800015 	stw	r18,0(r3)
   319bc:	1025883a 	mov	r18,r2
   319c0:	803feb1e 	bne	r16,zero,31970 <__pow5mult+0x4c>
   319c4:	9005883a 	mov	r2,r18
   319c8:	dfc00517 	ldw	ra,20(sp)
   319cc:	dd000417 	ldw	r20,16(sp)
   319d0:	dcc00317 	ldw	r19,12(sp)
   319d4:	dc800217 	ldw	r18,8(sp)
   319d8:	dc400117 	ldw	r17,4(sp)
   319dc:	dc000017 	ldw	r16,0(sp)
   319e0:	dec00604 	addi	sp,sp,24
   319e4:	f800283a 	ret
   319e8:	880d883a 	mov	r6,r17
   319ec:	880b883a 	mov	r5,r17
   319f0:	9809883a 	mov	r4,r19
   319f4:	003172c0 	call	3172c <__multiply>
   319f8:	88800015 	stw	r2,0(r17)
   319fc:	10000015 	stw	zero,0(r2)
   31a00:	003fdd06 	br	31978 <__pow5mult+0x54>
   31a04:	1025883a 	mov	r18,r2
   31a08:	003fd706 	br	31968 <__pow5mult+0x44>
   31a0c:	10bfffc4 	addi	r2,r2,-1
   31a10:	1085883a 	add	r2,r2,r2
   31a14:	00c00134 	movhi	r3,4
   31a18:	18e35e04 	addi	r3,r3,-29320
   31a1c:	1085883a 	add	r2,r2,r2
   31a20:	1885883a 	add	r2,r3,r2
   31a24:	11800017 	ldw	r6,0(r2)
   31a28:	000f883a 	mov	r7,zero
   31a2c:	00313b40 	call	313b4 <__multadd>
   31a30:	1025883a 	mov	r18,r2
   31a34:	003fc706 	br	31954 <__pow5mult+0x30>
   31a38:	05000044 	movi	r20,1
   31a3c:	a00b883a 	mov	r5,r20
   31a40:	9809883a 	mov	r4,r19
   31a44:	00312e40 	call	312e4 <_Balloc>
   31a48:	1023883a 	mov	r17,r2
   31a4c:	00809c44 	movi	r2,625
   31a50:	88800515 	stw	r2,20(r17)
   31a54:	8d000415 	stw	r20,16(r17)
   31a58:	9c401215 	stw	r17,72(r19)
   31a5c:	88000015 	stw	zero,0(r17)
   31a60:	003fc606 	br	3197c <__pow5mult+0x58>

00031a64 <__lshift>:
   31a64:	defff904 	addi	sp,sp,-28
   31a68:	dd400515 	stw	r21,20(sp)
   31a6c:	dcc00315 	stw	r19,12(sp)
   31a70:	302bd17a 	srai	r21,r6,5
   31a74:	2cc00417 	ldw	r19,16(r5)
   31a78:	28800217 	ldw	r2,8(r5)
   31a7c:	dd000415 	stw	r20,16(sp)
   31a80:	ace7883a 	add	r19,r21,r19
   31a84:	dc800215 	stw	r18,8(sp)
   31a88:	dc400115 	stw	r17,4(sp)
   31a8c:	dc000015 	stw	r16,0(sp)
   31a90:	dfc00615 	stw	ra,24(sp)
   31a94:	9c000044 	addi	r16,r19,1
   31a98:	2823883a 	mov	r17,r5
   31a9c:	3029883a 	mov	r20,r6
   31aa0:	2025883a 	mov	r18,r4
   31aa4:	29400117 	ldw	r5,4(r5)
   31aa8:	1400030e 	bge	r2,r16,31ab8 <__lshift+0x54>
   31aac:	1085883a 	add	r2,r2,r2
   31ab0:	29400044 	addi	r5,r5,1
   31ab4:	143ffd16 	blt	r2,r16,31aac <__lshift+0x48>
   31ab8:	9009883a 	mov	r4,r18
   31abc:	00312e40 	call	312e4 <_Balloc>
   31ac0:	10c00504 	addi	r3,r2,20
   31ac4:	0540070e 	bge	zero,r21,31ae4 <__lshift+0x80>
   31ac8:	ad6b883a 	add	r21,r21,r21
   31acc:	ad6b883a 	add	r21,r21,r21
   31ad0:	1809883a 	mov	r4,r3
   31ad4:	1d47883a 	add	r3,r3,r21
   31ad8:	20000015 	stw	zero,0(r4)
   31adc:	21000104 	addi	r4,r4,4
   31ae0:	193ffd1e 	bne	r3,r4,31ad8 <__lshift+0x74>
   31ae4:	8a000417 	ldw	r8,16(r17)
   31ae8:	89000504 	addi	r4,r17,20
   31aec:	a18007cc 	andi	r6,r20,31
   31af0:	4211883a 	add	r8,r8,r8
   31af4:	4211883a 	add	r8,r8,r8
   31af8:	2211883a 	add	r8,r4,r8
   31afc:	30002326 	beq	r6,zero,31b8c <__lshift+0x128>
   31b00:	02400804 	movi	r9,32
   31b04:	4993c83a 	sub	r9,r9,r6
   31b08:	000b883a 	mov	r5,zero
   31b0c:	21c00017 	ldw	r7,0(r4)
   31b10:	1815883a 	mov	r10,r3
   31b14:	18c00104 	addi	r3,r3,4
   31b18:	398e983a 	sll	r7,r7,r6
   31b1c:	21000104 	addi	r4,r4,4
   31b20:	394ab03a 	or	r5,r7,r5
   31b24:	197fff15 	stw	r5,-4(r3)
   31b28:	217fff17 	ldw	r5,-4(r4)
   31b2c:	2a4ad83a 	srl	r5,r5,r9
   31b30:	223ff636 	bltu	r4,r8,31b0c <__lshift+0xa8>
   31b34:	51400115 	stw	r5,4(r10)
   31b38:	28001a1e 	bne	r5,zero,31ba4 <__lshift+0x140>
   31b3c:	843fffc4 	addi	r16,r16,-1
   31b40:	14000415 	stw	r16,16(r2)
   31b44:	88000826 	beq	r17,zero,31b68 <__lshift+0x104>
   31b48:	89000117 	ldw	r4,4(r17)
   31b4c:	90c01317 	ldw	r3,76(r18)
   31b50:	2109883a 	add	r4,r4,r4
   31b54:	2109883a 	add	r4,r4,r4
   31b58:	1907883a 	add	r3,r3,r4
   31b5c:	19000017 	ldw	r4,0(r3)
   31b60:	89000015 	stw	r4,0(r17)
   31b64:	1c400015 	stw	r17,0(r3)
   31b68:	dfc00617 	ldw	ra,24(sp)
   31b6c:	dd400517 	ldw	r21,20(sp)
   31b70:	dd000417 	ldw	r20,16(sp)
   31b74:	dcc00317 	ldw	r19,12(sp)
   31b78:	dc800217 	ldw	r18,8(sp)
   31b7c:	dc400117 	ldw	r17,4(sp)
   31b80:	dc000017 	ldw	r16,0(sp)
   31b84:	dec00704 	addi	sp,sp,28
   31b88:	f800283a 	ret
   31b8c:	21400017 	ldw	r5,0(r4)
   31b90:	18c00104 	addi	r3,r3,4
   31b94:	21000104 	addi	r4,r4,4
   31b98:	197fff15 	stw	r5,-4(r3)
   31b9c:	223ffb36 	bltu	r4,r8,31b8c <__lshift+0x128>
   31ba0:	003fe606 	br	31b3c <__lshift+0xd8>
   31ba4:	9c000084 	addi	r16,r19,2
   31ba8:	003fe406 	br	31b3c <__lshift+0xd8>

00031bac <__mcmp>:
   31bac:	20800417 	ldw	r2,16(r4)
   31bb0:	28c00417 	ldw	r3,16(r5)
   31bb4:	10c5c83a 	sub	r2,r2,r3
   31bb8:	1000111e 	bne	r2,zero,31c00 <__mcmp+0x54>
   31bbc:	18c7883a 	add	r3,r3,r3
   31bc0:	18c7883a 	add	r3,r3,r3
   31bc4:	21000504 	addi	r4,r4,20
   31bc8:	29400504 	addi	r5,r5,20
   31bcc:	20c5883a 	add	r2,r4,r3
   31bd0:	28cb883a 	add	r5,r5,r3
   31bd4:	00000106 	br	31bdc <__mcmp+0x30>
   31bd8:	20800a2e 	bgeu	r4,r2,31c04 <__mcmp+0x58>
   31bdc:	10bfff04 	addi	r2,r2,-4
   31be0:	297fff04 	addi	r5,r5,-4
   31be4:	11800017 	ldw	r6,0(r2)
   31be8:	28c00017 	ldw	r3,0(r5)
   31bec:	30fffa26 	beq	r6,r3,31bd8 <__mcmp+0x2c>
   31bf0:	30c00236 	bltu	r6,r3,31bfc <__mcmp+0x50>
   31bf4:	00800044 	movi	r2,1
   31bf8:	f800283a 	ret
   31bfc:	00bfffc4 	movi	r2,-1
   31c00:	f800283a 	ret
   31c04:	0005883a 	mov	r2,zero
   31c08:	f800283a 	ret

00031c0c <__mdiff>:
   31c0c:	28c00417 	ldw	r3,16(r5)
   31c10:	30800417 	ldw	r2,16(r6)
   31c14:	defffa04 	addi	sp,sp,-24
   31c18:	dcc00315 	stw	r19,12(sp)
   31c1c:	dc800215 	stw	r18,8(sp)
   31c20:	dfc00515 	stw	ra,20(sp)
   31c24:	dd000415 	stw	r20,16(sp)
   31c28:	dc400115 	stw	r17,4(sp)
   31c2c:	dc000015 	stw	r16,0(sp)
   31c30:	1887c83a 	sub	r3,r3,r2
   31c34:	2825883a 	mov	r18,r5
   31c38:	3027883a 	mov	r19,r6
   31c3c:	1800141e 	bne	r3,zero,31c90 <__mdiff+0x84>
   31c40:	1085883a 	add	r2,r2,r2
   31c44:	1085883a 	add	r2,r2,r2
   31c48:	2a000504 	addi	r8,r5,20
   31c4c:	34000504 	addi	r16,r6,20
   31c50:	4087883a 	add	r3,r8,r2
   31c54:	8085883a 	add	r2,r16,r2
   31c58:	00000106 	br	31c60 <__mdiff+0x54>
   31c5c:	40c0592e 	bgeu	r8,r3,31dc4 <__mdiff+0x1b8>
   31c60:	18ffff04 	addi	r3,r3,-4
   31c64:	10bfff04 	addi	r2,r2,-4
   31c68:	19c00017 	ldw	r7,0(r3)
   31c6c:	11400017 	ldw	r5,0(r2)
   31c70:	397ffa26 	beq	r7,r5,31c5c <__mdiff+0x50>
   31c74:	3940592e 	bgeu	r7,r5,31ddc <__mdiff+0x1d0>
   31c78:	9005883a 	mov	r2,r18
   31c7c:	4023883a 	mov	r17,r8
   31c80:	9825883a 	mov	r18,r19
   31c84:	05000044 	movi	r20,1
   31c88:	1027883a 	mov	r19,r2
   31c8c:	00000406 	br	31ca0 <__mdiff+0x94>
   31c90:	18005616 	blt	r3,zero,31dec <__mdiff+0x1e0>
   31c94:	34400504 	addi	r17,r6,20
   31c98:	2c000504 	addi	r16,r5,20
   31c9c:	0029883a 	mov	r20,zero
   31ca0:	91400117 	ldw	r5,4(r18)
   31ca4:	00312e40 	call	312e4 <_Balloc>
   31ca8:	92400417 	ldw	r9,16(r18)
   31cac:	9b000417 	ldw	r12,16(r19)
   31cb0:	12c00504 	addi	r11,r2,20
   31cb4:	4a51883a 	add	r8,r9,r9
   31cb8:	6319883a 	add	r12,r12,r12
   31cbc:	4211883a 	add	r8,r8,r8
   31cc0:	6319883a 	add	r12,r12,r12
   31cc4:	15000315 	stw	r20,12(r2)
   31cc8:	8211883a 	add	r8,r16,r8
   31ccc:	8b19883a 	add	r12,r17,r12
   31cd0:	0007883a 	mov	r3,zero
   31cd4:	81400017 	ldw	r5,0(r16)
   31cd8:	89c00017 	ldw	r7,0(r17)
   31cdc:	59800104 	addi	r6,r11,4
   31ce0:	293fffcc 	andi	r4,r5,65535
   31ce4:	20c7883a 	add	r3,r4,r3
   31ce8:	393fffcc 	andi	r4,r7,65535
   31cec:	1909c83a 	sub	r4,r3,r4
   31cf0:	280ad43a 	srli	r5,r5,16
   31cf4:	380ed43a 	srli	r7,r7,16
   31cf8:	2007d43a 	srai	r3,r4,16
   31cfc:	213fffcc 	andi	r4,r4,65535
   31d00:	29cbc83a 	sub	r5,r5,r7
   31d04:	28c7883a 	add	r3,r5,r3
   31d08:	180a943a 	slli	r5,r3,16
   31d0c:	8c400104 	addi	r17,r17,4
   31d10:	84000104 	addi	r16,r16,4
   31d14:	2908b03a 	or	r4,r5,r4
   31d18:	59000015 	stw	r4,0(r11)
   31d1c:	1807d43a 	srai	r3,r3,16
   31d20:	3015883a 	mov	r10,r6
   31d24:	3017883a 	mov	r11,r6
   31d28:	8b3fea36 	bltu	r17,r12,31cd4 <__mdiff+0xc8>
   31d2c:	8200162e 	bgeu	r16,r8,31d88 <__mdiff+0x17c>
   31d30:	8017883a 	mov	r11,r16
   31d34:	59400017 	ldw	r5,0(r11)
   31d38:	31800104 	addi	r6,r6,4
   31d3c:	5ac00104 	addi	r11,r11,4
   31d40:	293fffcc 	andi	r4,r5,65535
   31d44:	20c7883a 	add	r3,r4,r3
   31d48:	280ed43a 	srli	r7,r5,16
   31d4c:	180bd43a 	srai	r5,r3,16
   31d50:	193fffcc 	andi	r4,r3,65535
   31d54:	3947883a 	add	r3,r7,r5
   31d58:	180a943a 	slli	r5,r3,16
   31d5c:	1807d43a 	srai	r3,r3,16
   31d60:	2908b03a 	or	r4,r5,r4
   31d64:	313fff15 	stw	r4,-4(r6)
   31d68:	5a3ff236 	bltu	r11,r8,31d34 <__mdiff+0x128>
   31d6c:	0406303a 	nor	r3,zero,r16
   31d70:	1a07883a 	add	r3,r3,r8
   31d74:	1806d0ba 	srli	r3,r3,2
   31d78:	18c00044 	addi	r3,r3,1
   31d7c:	18c7883a 	add	r3,r3,r3
   31d80:	18c7883a 	add	r3,r3,r3
   31d84:	50d5883a 	add	r10,r10,r3
   31d88:	50ffff04 	addi	r3,r10,-4
   31d8c:	2000041e 	bne	r4,zero,31da0 <__mdiff+0x194>
   31d90:	18ffff04 	addi	r3,r3,-4
   31d94:	19000017 	ldw	r4,0(r3)
   31d98:	4a7fffc4 	addi	r9,r9,-1
   31d9c:	203ffc26 	beq	r4,zero,31d90 <__mdiff+0x184>
   31da0:	12400415 	stw	r9,16(r2)
   31da4:	dfc00517 	ldw	ra,20(sp)
   31da8:	dd000417 	ldw	r20,16(sp)
   31dac:	dcc00317 	ldw	r19,12(sp)
   31db0:	dc800217 	ldw	r18,8(sp)
   31db4:	dc400117 	ldw	r17,4(sp)
   31db8:	dc000017 	ldw	r16,0(sp)
   31dbc:	dec00604 	addi	sp,sp,24
   31dc0:	f800283a 	ret
   31dc4:	000b883a 	mov	r5,zero
   31dc8:	00312e40 	call	312e4 <_Balloc>
   31dcc:	00c00044 	movi	r3,1
   31dd0:	10c00415 	stw	r3,16(r2)
   31dd4:	10000515 	stw	zero,20(r2)
   31dd8:	003ff206 	br	31da4 <__mdiff+0x198>
   31ddc:	8023883a 	mov	r17,r16
   31de0:	0029883a 	mov	r20,zero
   31de4:	4021883a 	mov	r16,r8
   31de8:	003fad06 	br	31ca0 <__mdiff+0x94>
   31dec:	9005883a 	mov	r2,r18
   31df0:	94400504 	addi	r17,r18,20
   31df4:	9c000504 	addi	r16,r19,20
   31df8:	9825883a 	mov	r18,r19
   31dfc:	05000044 	movi	r20,1
   31e00:	1027883a 	mov	r19,r2
   31e04:	003fa606 	br	31ca0 <__mdiff+0x94>

00031e08 <__ulp>:
   31e08:	295ffc2c 	andhi	r5,r5,32752
   31e0c:	00bf3034 	movhi	r2,64704
   31e10:	2887883a 	add	r3,r5,r2
   31e14:	00c0020e 	bge	zero,r3,31e20 <__ulp+0x18>
   31e18:	0005883a 	mov	r2,zero
   31e1c:	f800283a 	ret
   31e20:	00c7c83a 	sub	r3,zero,r3
   31e24:	1807d53a 	srai	r3,r3,20
   31e28:	008004c4 	movi	r2,19
   31e2c:	10c00b0e 	bge	r2,r3,31e5c <__ulp+0x54>
   31e30:	18bffb04 	addi	r2,r3,-20
   31e34:	01000784 	movi	r4,30
   31e38:	0007883a 	mov	r3,zero
   31e3c:	20800516 	blt	r4,r2,31e54 <__ulp+0x4c>
   31e40:	010007c4 	movi	r4,31
   31e44:	2089c83a 	sub	r4,r4,r2
   31e48:	00800044 	movi	r2,1
   31e4c:	1104983a 	sll	r2,r2,r4
   31e50:	f800283a 	ret
   31e54:	00800044 	movi	r2,1
   31e58:	f800283a 	ret
   31e5c:	01400234 	movhi	r5,8
   31e60:	28c7d83a 	sra	r3,r5,r3
   31e64:	0005883a 	mov	r2,zero
   31e68:	f800283a 	ret

00031e6c <__b2d>:
   31e6c:	defffa04 	addi	sp,sp,-24
   31e70:	dc000015 	stw	r16,0(sp)
   31e74:	24000417 	ldw	r16,16(r4)
   31e78:	dc400115 	stw	r17,4(sp)
   31e7c:	24400504 	addi	r17,r4,20
   31e80:	8421883a 	add	r16,r16,r16
   31e84:	8421883a 	add	r16,r16,r16
   31e88:	8c21883a 	add	r16,r17,r16
   31e8c:	dc800215 	stw	r18,8(sp)
   31e90:	84bfff17 	ldw	r18,-4(r16)
   31e94:	dd000415 	stw	r20,16(sp)
   31e98:	dcc00315 	stw	r19,12(sp)
   31e9c:	9009883a 	mov	r4,r18
   31ea0:	2829883a 	mov	r20,r5
   31ea4:	dfc00515 	stw	ra,20(sp)
   31ea8:	00315d80 	call	315d8 <__hi0bits>
   31eac:	00c00804 	movi	r3,32
   31eb0:	1889c83a 	sub	r4,r3,r2
   31eb4:	a1000015 	stw	r4,0(r20)
   31eb8:	01000284 	movi	r4,10
   31ebc:	84ffff04 	addi	r19,r16,-4
   31ec0:	20801216 	blt	r4,r2,31f0c <__b2d+0xa0>
   31ec4:	018002c4 	movi	r6,11
   31ec8:	308dc83a 	sub	r6,r6,r2
   31ecc:	9186d83a 	srl	r3,r18,r6
   31ed0:	18cffc34 	orhi	r3,r3,16368
   31ed4:	8cc0212e 	bgeu	r17,r19,31f5c <__b2d+0xf0>
   31ed8:	813ffe17 	ldw	r4,-8(r16)
   31edc:	218cd83a 	srl	r6,r4,r6
   31ee0:	10800544 	addi	r2,r2,21
   31ee4:	9084983a 	sll	r2,r18,r2
   31ee8:	1184b03a 	or	r2,r2,r6
   31eec:	dfc00517 	ldw	ra,20(sp)
   31ef0:	dd000417 	ldw	r20,16(sp)
   31ef4:	dcc00317 	ldw	r19,12(sp)
   31ef8:	dc800217 	ldw	r18,8(sp)
   31efc:	dc400117 	ldw	r17,4(sp)
   31f00:	dc000017 	ldw	r16,0(sp)
   31f04:	dec00604 	addi	sp,sp,24
   31f08:	f800283a 	ret
   31f0c:	8cc00f2e 	bgeu	r17,r19,31f4c <__b2d+0xe0>
   31f10:	117ffd44 	addi	r5,r2,-11
   31f14:	80bffe17 	ldw	r2,-8(r16)
   31f18:	28000e26 	beq	r5,zero,31f54 <__b2d+0xe8>
   31f1c:	1949c83a 	sub	r4,r3,r5
   31f20:	9164983a 	sll	r18,r18,r5
   31f24:	1106d83a 	srl	r3,r2,r4
   31f28:	81bffe04 	addi	r6,r16,-8
   31f2c:	948ffc34 	orhi	r18,r18,16368
   31f30:	90c6b03a 	or	r3,r18,r3
   31f34:	89800e2e 	bgeu	r17,r6,31f70 <__b2d+0x104>
   31f38:	81bffd17 	ldw	r6,-12(r16)
   31f3c:	1144983a 	sll	r2,r2,r5
   31f40:	310ad83a 	srl	r5,r6,r4
   31f44:	2884b03a 	or	r2,r5,r2
   31f48:	003fe806 	br	31eec <__b2d+0x80>
   31f4c:	10bffd44 	addi	r2,r2,-11
   31f50:	1000041e 	bne	r2,zero,31f64 <__b2d+0xf8>
   31f54:	90cffc34 	orhi	r3,r18,16368
   31f58:	003fe406 	br	31eec <__b2d+0x80>
   31f5c:	000d883a 	mov	r6,zero
   31f60:	003fdf06 	br	31ee0 <__b2d+0x74>
   31f64:	90a4983a 	sll	r18,r18,r2
   31f68:	0005883a 	mov	r2,zero
   31f6c:	003ff906 	br	31f54 <__b2d+0xe8>
   31f70:	1144983a 	sll	r2,r2,r5
   31f74:	003fdd06 	br	31eec <__b2d+0x80>

00031f78 <__d2b>:
   31f78:	defff804 	addi	sp,sp,-32
   31f7c:	dc000215 	stw	r16,8(sp)
   31f80:	3021883a 	mov	r16,r6
   31f84:	dc400315 	stw	r17,12(sp)
   31f88:	8022907a 	slli	r17,r16,1
   31f8c:	dd000615 	stw	r20,24(sp)
   31f90:	2829883a 	mov	r20,r5
   31f94:	01400044 	movi	r5,1
   31f98:	dcc00515 	stw	r19,20(sp)
   31f9c:	dc800415 	stw	r18,16(sp)
   31fa0:	dfc00715 	stw	ra,28(sp)
   31fa4:	3825883a 	mov	r18,r7
   31fa8:	8822d57a 	srli	r17,r17,21
   31fac:	00312e40 	call	312e4 <_Balloc>
   31fb0:	1027883a 	mov	r19,r2
   31fb4:	00800434 	movhi	r2,16
   31fb8:	10bfffc4 	addi	r2,r2,-1
   31fbc:	808c703a 	and	r6,r16,r2
   31fc0:	88000126 	beq	r17,zero,31fc8 <__d2b+0x50>
   31fc4:	31800434 	orhi	r6,r6,16
   31fc8:	d9800015 	stw	r6,0(sp)
   31fcc:	a0002426 	beq	r20,zero,32060 <__d2b+0xe8>
   31fd0:	d9000104 	addi	r4,sp,4
   31fd4:	dd000115 	stw	r20,4(sp)
   31fd8:	00316400 	call	31640 <__lo0bits>
   31fdc:	d8c00017 	ldw	r3,0(sp)
   31fe0:	10002f1e 	bne	r2,zero,320a0 <__d2b+0x128>
   31fe4:	d9000117 	ldw	r4,4(sp)
   31fe8:	99000515 	stw	r4,20(r19)
   31fec:	1821003a 	cmpeq	r16,r3,zero
   31ff0:	01000084 	movi	r4,2
   31ff4:	2421c83a 	sub	r16,r4,r16
   31ff8:	98c00615 	stw	r3,24(r19)
   31ffc:	9c000415 	stw	r16,16(r19)
   32000:	88001f1e 	bne	r17,zero,32080 <__d2b+0x108>
   32004:	10bef384 	addi	r2,r2,-1074
   32008:	90800015 	stw	r2,0(r18)
   3200c:	00900034 	movhi	r2,16384
   32010:	10bfffc4 	addi	r2,r2,-1
   32014:	8085883a 	add	r2,r16,r2
   32018:	1085883a 	add	r2,r2,r2
   3201c:	1085883a 	add	r2,r2,r2
   32020:	9885883a 	add	r2,r19,r2
   32024:	11000517 	ldw	r4,20(r2)
   32028:	8020917a 	slli	r16,r16,5
   3202c:	00315d80 	call	315d8 <__hi0bits>
   32030:	d8c00817 	ldw	r3,32(sp)
   32034:	8085c83a 	sub	r2,r16,r2
   32038:	18800015 	stw	r2,0(r3)
   3203c:	9805883a 	mov	r2,r19
   32040:	dfc00717 	ldw	ra,28(sp)
   32044:	dd000617 	ldw	r20,24(sp)
   32048:	dcc00517 	ldw	r19,20(sp)
   3204c:	dc800417 	ldw	r18,16(sp)
   32050:	dc400317 	ldw	r17,12(sp)
   32054:	dc000217 	ldw	r16,8(sp)
   32058:	dec00804 	addi	sp,sp,32
   3205c:	f800283a 	ret
   32060:	d809883a 	mov	r4,sp
   32064:	00316400 	call	31640 <__lo0bits>
   32068:	d8c00017 	ldw	r3,0(sp)
   3206c:	04000044 	movi	r16,1
   32070:	9c000415 	stw	r16,16(r19)
   32074:	98c00515 	stw	r3,20(r19)
   32078:	10800804 	addi	r2,r2,32
   3207c:	883fe126 	beq	r17,zero,32004 <__d2b+0x8c>
   32080:	00c00d44 	movi	r3,53
   32084:	8c7ef344 	addi	r17,r17,-1075
   32088:	88a3883a 	add	r17,r17,r2
   3208c:	1885c83a 	sub	r2,r3,r2
   32090:	d8c00817 	ldw	r3,32(sp)
   32094:	94400015 	stw	r17,0(r18)
   32098:	18800015 	stw	r2,0(r3)
   3209c:	003fe706 	br	3203c <__d2b+0xc4>
   320a0:	01000804 	movi	r4,32
   320a4:	2089c83a 	sub	r4,r4,r2
   320a8:	1908983a 	sll	r4,r3,r4
   320ac:	d9400117 	ldw	r5,4(sp)
   320b0:	1886d83a 	srl	r3,r3,r2
   320b4:	2148b03a 	or	r4,r4,r5
   320b8:	99000515 	stw	r4,20(r19)
   320bc:	d8c00015 	stw	r3,0(sp)
   320c0:	003fca06 	br	31fec <__d2b+0x74>

000320c4 <__ratio>:
   320c4:	defff904 	addi	sp,sp,-28
   320c8:	dc400315 	stw	r17,12(sp)
   320cc:	2823883a 	mov	r17,r5
   320d0:	d9400104 	addi	r5,sp,4
   320d4:	dfc00615 	stw	ra,24(sp)
   320d8:	dcc00515 	stw	r19,20(sp)
   320dc:	dc800415 	stw	r18,16(sp)
   320e0:	2027883a 	mov	r19,r4
   320e4:	dc000215 	stw	r16,8(sp)
   320e8:	0031e6c0 	call	31e6c <__b2d>
   320ec:	d80b883a 	mov	r5,sp
   320f0:	8809883a 	mov	r4,r17
   320f4:	1025883a 	mov	r18,r2
   320f8:	1821883a 	mov	r16,r3
   320fc:	0031e6c0 	call	31e6c <__b2d>
   32100:	8a000417 	ldw	r8,16(r17)
   32104:	99000417 	ldw	r4,16(r19)
   32108:	d9400117 	ldw	r5,4(sp)
   3210c:	2209c83a 	sub	r4,r4,r8
   32110:	2010917a 	slli	r8,r4,5
   32114:	d9000017 	ldw	r4,0(sp)
   32118:	2909c83a 	sub	r4,r5,r4
   3211c:	4109883a 	add	r4,r8,r4
   32120:	01000e0e 	bge	zero,r4,3215c <__ratio+0x98>
   32124:	2008953a 	slli	r4,r4,20
   32128:	2421883a 	add	r16,r4,r16
   3212c:	100d883a 	mov	r6,r2
   32130:	180f883a 	mov	r7,r3
   32134:	9009883a 	mov	r4,r18
   32138:	800b883a 	mov	r5,r16
   3213c:	00277940 	call	27794 <__divdf3>
   32140:	dfc00617 	ldw	ra,24(sp)
   32144:	dcc00517 	ldw	r19,20(sp)
   32148:	dc800417 	ldw	r18,16(sp)
   3214c:	dc400317 	ldw	r17,12(sp)
   32150:	dc000217 	ldw	r16,8(sp)
   32154:	dec00704 	addi	sp,sp,28
   32158:	f800283a 	ret
   3215c:	2008953a 	slli	r4,r4,20
   32160:	1907c83a 	sub	r3,r3,r4
   32164:	003ff106 	br	3212c <__ratio+0x68>

00032168 <_mprec_log10>:
   32168:	defffe04 	addi	sp,sp,-8
   3216c:	dc000015 	stw	r16,0(sp)
   32170:	dfc00115 	stw	ra,4(sp)
   32174:	008005c4 	movi	r2,23
   32178:	2021883a 	mov	r16,r4
   3217c:	11000d0e 	bge	r2,r4,321b4 <_mprec_log10+0x4c>
   32180:	0005883a 	mov	r2,zero
   32184:	00cffc34 	movhi	r3,16368
   32188:	843fffc4 	addi	r16,r16,-1
   3218c:	000d883a 	mov	r6,zero
   32190:	01d00934 	movhi	r7,16420
   32194:	1009883a 	mov	r4,r2
   32198:	180b883a 	mov	r5,r3
   3219c:	00282d40 	call	282d4 <__muldf3>
   321a0:	803ff91e 	bne	r16,zero,32188 <_mprec_log10+0x20>
   321a4:	dfc00117 	ldw	ra,4(sp)
   321a8:	dc000017 	ldw	r16,0(sp)
   321ac:	dec00204 	addi	sp,sp,8
   321b0:	f800283a 	ret
   321b4:	202090fa 	slli	r16,r4,3
   321b8:	00800134 	movhi	r2,4
   321bc:	10a37504 	addi	r2,r2,-29228
   321c0:	1421883a 	add	r16,r2,r16
   321c4:	80800017 	ldw	r2,0(r16)
   321c8:	80c00117 	ldw	r3,4(r16)
   321cc:	dfc00117 	ldw	ra,4(sp)
   321d0:	dc000017 	ldw	r16,0(sp)
   321d4:	dec00204 	addi	sp,sp,8
   321d8:	f800283a 	ret

000321dc <__copybits>:
   321dc:	297fffc4 	addi	r5,r5,-1
   321e0:	280fd17a 	srai	r7,r5,5
   321e4:	30c00417 	ldw	r3,16(r6)
   321e8:	30800504 	addi	r2,r6,20
   321ec:	39c00044 	addi	r7,r7,1
   321f0:	18c7883a 	add	r3,r3,r3
   321f4:	39cf883a 	add	r7,r7,r7
   321f8:	18c7883a 	add	r3,r3,r3
   321fc:	39cf883a 	add	r7,r7,r7
   32200:	10c7883a 	add	r3,r2,r3
   32204:	21cf883a 	add	r7,r4,r7
   32208:	10c00d2e 	bgeu	r2,r3,32240 <__copybits+0x64>
   3220c:	200b883a 	mov	r5,r4
   32210:	12000017 	ldw	r8,0(r2)
   32214:	29400104 	addi	r5,r5,4
   32218:	10800104 	addi	r2,r2,4
   3221c:	2a3fff15 	stw	r8,-4(r5)
   32220:	10fffb36 	bltu	r2,r3,32210 <__copybits+0x34>
   32224:	1985c83a 	sub	r2,r3,r6
   32228:	10bffac4 	addi	r2,r2,-21
   3222c:	1004d0ba 	srli	r2,r2,2
   32230:	10800044 	addi	r2,r2,1
   32234:	1085883a 	add	r2,r2,r2
   32238:	1085883a 	add	r2,r2,r2
   3223c:	2089883a 	add	r4,r4,r2
   32240:	21c0032e 	bgeu	r4,r7,32250 <__copybits+0x74>
   32244:	20000015 	stw	zero,0(r4)
   32248:	21000104 	addi	r4,r4,4
   3224c:	21fffd36 	bltu	r4,r7,32244 <__copybits+0x68>
   32250:	f800283a 	ret

00032254 <__any_on>:
   32254:	20c00417 	ldw	r3,16(r4)
   32258:	2805d17a 	srai	r2,r5,5
   3225c:	21000504 	addi	r4,r4,20
   32260:	18800d0e 	bge	r3,r2,32298 <__any_on+0x44>
   32264:	18c7883a 	add	r3,r3,r3
   32268:	18c7883a 	add	r3,r3,r3
   3226c:	20c7883a 	add	r3,r4,r3
   32270:	20c0192e 	bgeu	r4,r3,322d8 <__any_on+0x84>
   32274:	18bfff17 	ldw	r2,-4(r3)
   32278:	18ffff04 	addi	r3,r3,-4
   3227c:	1000041e 	bne	r2,zero,32290 <__any_on+0x3c>
   32280:	20c0142e 	bgeu	r4,r3,322d4 <__any_on+0x80>
   32284:	18ffff04 	addi	r3,r3,-4
   32288:	19400017 	ldw	r5,0(r3)
   3228c:	283ffc26 	beq	r5,zero,32280 <__any_on+0x2c>
   32290:	00800044 	movi	r2,1
   32294:	f800283a 	ret
   32298:	10c00a0e 	bge	r2,r3,322c4 <__any_on+0x70>
   3229c:	1085883a 	add	r2,r2,r2
   322a0:	1085883a 	add	r2,r2,r2
   322a4:	294007cc 	andi	r5,r5,31
   322a8:	2087883a 	add	r3,r4,r2
   322ac:	283ff026 	beq	r5,zero,32270 <__any_on+0x1c>
   322b0:	19800017 	ldw	r6,0(r3)
   322b4:	3144d83a 	srl	r2,r6,r5
   322b8:	114a983a 	sll	r5,r2,r5
   322bc:	317ff41e 	bne	r6,r5,32290 <__any_on+0x3c>
   322c0:	003feb06 	br	32270 <__any_on+0x1c>
   322c4:	1085883a 	add	r2,r2,r2
   322c8:	1085883a 	add	r2,r2,r2
   322cc:	2087883a 	add	r3,r4,r2
   322d0:	003fe706 	br	32270 <__any_on+0x1c>
   322d4:	f800283a 	ret
   322d8:	0005883a 	mov	r2,zero
   322dc:	f800283a 	ret

000322e0 <_putc_r>:
   322e0:	defffc04 	addi	sp,sp,-16
   322e4:	dc000215 	stw	r16,8(sp)
   322e8:	dfc00315 	stw	ra,12(sp)
   322ec:	2021883a 	mov	r16,r4
   322f0:	20000226 	beq	r4,zero,322fc <_putc_r+0x1c>
   322f4:	20800e17 	ldw	r2,56(r4)
   322f8:	10001b26 	beq	r2,zero,32368 <_putc_r+0x88>
   322fc:	30800217 	ldw	r2,8(r6)
   32300:	10bfffc4 	addi	r2,r2,-1
   32304:	30800215 	stw	r2,8(r6)
   32308:	10000a16 	blt	r2,zero,32334 <_putc_r+0x54>
   3230c:	30800017 	ldw	r2,0(r6)
   32310:	11400005 	stb	r5,0(r2)
   32314:	30800017 	ldw	r2,0(r6)
   32318:	10c00044 	addi	r3,r2,1
   3231c:	30c00015 	stw	r3,0(r6)
   32320:	10800003 	ldbu	r2,0(r2)
   32324:	dfc00317 	ldw	ra,12(sp)
   32328:	dc000217 	ldw	r16,8(sp)
   3232c:	dec00404 	addi	sp,sp,16
   32330:	f800283a 	ret
   32334:	30c00617 	ldw	r3,24(r6)
   32338:	10c00616 	blt	r2,r3,32354 <_putc_r+0x74>
   3233c:	30800017 	ldw	r2,0(r6)
   32340:	00c00284 	movi	r3,10
   32344:	11400005 	stb	r5,0(r2)
   32348:	30800017 	ldw	r2,0(r6)
   3234c:	11400003 	ldbu	r5,0(r2)
   32350:	28fff11e 	bne	r5,r3,32318 <_putc_r+0x38>
   32354:	8009883a 	mov	r4,r16
   32358:	dfc00317 	ldw	ra,12(sp)
   3235c:	dc000217 	ldw	r16,8(sp)
   32360:	dec00404 	addi	sp,sp,16
   32364:	00341301 	jmpi	34130 <__swbuf_r>
   32368:	d9400015 	stw	r5,0(sp)
   3236c:	d9800115 	stw	r6,4(sp)
   32370:	0029f640 	call	29f64 <__sinit>
   32374:	d9800117 	ldw	r6,4(sp)
   32378:	d9400017 	ldw	r5,0(sp)
   3237c:	003fdf06 	br	322fc <_putc_r+0x1c>

00032380 <putc>:
   32380:	00800134 	movhi	r2,4
   32384:	defffc04 	addi	sp,sp,-16
   32388:	10ae9f04 	addi	r2,r2,-17796
   3238c:	dc000115 	stw	r16,4(sp)
   32390:	14000017 	ldw	r16,0(r2)
   32394:	dc400215 	stw	r17,8(sp)
   32398:	dfc00315 	stw	ra,12(sp)
   3239c:	2023883a 	mov	r17,r4
   323a0:	80000226 	beq	r16,zero,323ac <putc+0x2c>
   323a4:	80800e17 	ldw	r2,56(r16)
   323a8:	10001a26 	beq	r2,zero,32414 <putc+0x94>
   323ac:	28800217 	ldw	r2,8(r5)
   323b0:	10bfffc4 	addi	r2,r2,-1
   323b4:	28800215 	stw	r2,8(r5)
   323b8:	10000b16 	blt	r2,zero,323e8 <putc+0x68>
   323bc:	28800017 	ldw	r2,0(r5)
   323c0:	14400005 	stb	r17,0(r2)
   323c4:	28800017 	ldw	r2,0(r5)
   323c8:	10c00044 	addi	r3,r2,1
   323cc:	28c00015 	stw	r3,0(r5)
   323d0:	10800003 	ldbu	r2,0(r2)
   323d4:	dfc00317 	ldw	ra,12(sp)
   323d8:	dc400217 	ldw	r17,8(sp)
   323dc:	dc000117 	ldw	r16,4(sp)
   323e0:	dec00404 	addi	sp,sp,16
   323e4:	f800283a 	ret
   323e8:	28c00617 	ldw	r3,24(r5)
   323ec:	10c00e16 	blt	r2,r3,32428 <putc+0xa8>
   323f0:	28800017 	ldw	r2,0(r5)
   323f4:	01000284 	movi	r4,10
   323f8:	14400005 	stb	r17,0(r2)
   323fc:	28800017 	ldw	r2,0(r5)
   32400:	10c00003 	ldbu	r3,0(r2)
   32404:	193ff01e 	bne	r3,r4,323c8 <putc+0x48>
   32408:	280d883a 	mov	r6,r5
   3240c:	180b883a 	mov	r5,r3
   32410:	00000706 	br	32430 <putc+0xb0>
   32414:	8009883a 	mov	r4,r16
   32418:	d9400015 	stw	r5,0(sp)
   3241c:	0029f640 	call	29f64 <__sinit>
   32420:	d9400017 	ldw	r5,0(sp)
   32424:	003fe106 	br	323ac <putc+0x2c>
   32428:	280d883a 	mov	r6,r5
   3242c:	880b883a 	mov	r5,r17
   32430:	8009883a 	mov	r4,r16
   32434:	dfc00317 	ldw	ra,12(sp)
   32438:	dc400217 	ldw	r17,8(sp)
   3243c:	dc000117 	ldw	r16,4(sp)
   32440:	dec00404 	addi	sp,sp,16
   32444:	00341301 	jmpi	34130 <__swbuf_r>

00032448 <_read_r>:
   32448:	defffd04 	addi	sp,sp,-12
   3244c:	2805883a 	mov	r2,r5
   32450:	dc000015 	stw	r16,0(sp)
   32454:	04000134 	movhi	r16,4
   32458:	dc400115 	stw	r17,4(sp)
   3245c:	300b883a 	mov	r5,r6
   32460:	84399f04 	addi	r16,r16,-6532
   32464:	2023883a 	mov	r17,r4
   32468:	380d883a 	mov	r6,r7
   3246c:	1009883a 	mov	r4,r2
   32470:	dfc00215 	stw	ra,8(sp)
   32474:	80000015 	stw	zero,0(r16)
   32478:	0035a740 	call	35a74 <read>
   3247c:	00ffffc4 	movi	r3,-1
   32480:	10c00526 	beq	r2,r3,32498 <_read_r+0x50>
   32484:	dfc00217 	ldw	ra,8(sp)
   32488:	dc400117 	ldw	r17,4(sp)
   3248c:	dc000017 	ldw	r16,0(sp)
   32490:	dec00304 	addi	sp,sp,12
   32494:	f800283a 	ret
   32498:	80c00017 	ldw	r3,0(r16)
   3249c:	183ff926 	beq	r3,zero,32484 <_read_r+0x3c>
   324a0:	88c00015 	stw	r3,0(r17)
   324a4:	003ff706 	br	32484 <_read_r+0x3c>

000324a8 <_realloc_r>:
   324a8:	defff604 	addi	sp,sp,-40
   324ac:	dc800215 	stw	r18,8(sp)
   324b0:	dfc00915 	stw	ra,36(sp)
   324b4:	df000815 	stw	fp,32(sp)
   324b8:	ddc00715 	stw	r23,28(sp)
   324bc:	dd800615 	stw	r22,24(sp)
   324c0:	dd400515 	stw	r21,20(sp)
   324c4:	dd000415 	stw	r20,16(sp)
   324c8:	dcc00315 	stw	r19,12(sp)
   324cc:	dc400115 	stw	r17,4(sp)
   324d0:	dc000015 	stw	r16,0(sp)
   324d4:	3025883a 	mov	r18,r6
   324d8:	2800b726 	beq	r5,zero,327b8 <_realloc_r+0x310>
   324dc:	282b883a 	mov	r21,r5
   324e0:	2029883a 	mov	r20,r4
   324e4:	003579c0 	call	3579c <__malloc_lock>
   324e8:	a8bfff17 	ldw	r2,-4(r21)
   324ec:	043fff04 	movi	r16,-4
   324f0:	90c002c4 	addi	r3,r18,11
   324f4:	01000584 	movi	r4,22
   324f8:	acfffe04 	addi	r19,r21,-8
   324fc:	1420703a 	and	r16,r2,r16
   32500:	20c0332e 	bgeu	r4,r3,325d0 <_realloc_r+0x128>
   32504:	047ffe04 	movi	r17,-8
   32508:	1c62703a 	and	r17,r3,r17
   3250c:	8807883a 	mov	r3,r17
   32510:	88005816 	blt	r17,zero,32674 <_realloc_r+0x1cc>
   32514:	8c805736 	bltu	r17,r18,32674 <_realloc_r+0x1cc>
   32518:	80c0300e 	bge	r16,r3,325dc <_realloc_r+0x134>
   3251c:	07000134 	movhi	fp,4
   32520:	e72ccc04 	addi	fp,fp,-19664
   32524:	e1c00217 	ldw	r7,8(fp)
   32528:	9c09883a 	add	r4,r19,r16
   3252c:	22000117 	ldw	r8,4(r4)
   32530:	21c06326 	beq	r4,r7,326c0 <_realloc_r+0x218>
   32534:	017fff84 	movi	r5,-2
   32538:	414a703a 	and	r5,r8,r5
   3253c:	214b883a 	add	r5,r4,r5
   32540:	29800117 	ldw	r6,4(r5)
   32544:	3180004c 	andi	r6,r6,1
   32548:	30003f26 	beq	r6,zero,32648 <_realloc_r+0x1a0>
   3254c:	1080004c 	andi	r2,r2,1
   32550:	10008326 	beq	r2,zero,32760 <_realloc_r+0x2b8>
   32554:	900b883a 	mov	r5,r18
   32558:	a009883a 	mov	r4,r20
   3255c:	002af340 	call	2af34 <_malloc_r>
   32560:	1025883a 	mov	r18,r2
   32564:	10011e26 	beq	r2,zero,329e0 <_realloc_r+0x538>
   32568:	a93fff17 	ldw	r4,-4(r21)
   3256c:	10fffe04 	addi	r3,r2,-8
   32570:	00bfff84 	movi	r2,-2
   32574:	2084703a 	and	r2,r4,r2
   32578:	9885883a 	add	r2,r19,r2
   3257c:	1880ee26 	beq	r3,r2,32938 <_realloc_r+0x490>
   32580:	81bfff04 	addi	r6,r16,-4
   32584:	00800904 	movi	r2,36
   32588:	1180b836 	bltu	r2,r6,3286c <_realloc_r+0x3c4>
   3258c:	00c004c4 	movi	r3,19
   32590:	19809636 	bltu	r3,r6,327ec <_realloc_r+0x344>
   32594:	9005883a 	mov	r2,r18
   32598:	a807883a 	mov	r3,r21
   3259c:	19000017 	ldw	r4,0(r3)
   325a0:	11000015 	stw	r4,0(r2)
   325a4:	19000117 	ldw	r4,4(r3)
   325a8:	11000115 	stw	r4,4(r2)
   325ac:	18c00217 	ldw	r3,8(r3)
   325b0:	10c00215 	stw	r3,8(r2)
   325b4:	a80b883a 	mov	r5,r21
   325b8:	a009883a 	mov	r4,r20
   325bc:	002a1e40 	call	2a1e4 <_free_r>
   325c0:	a009883a 	mov	r4,r20
   325c4:	00357c00 	call	357c0 <__malloc_unlock>
   325c8:	9005883a 	mov	r2,r18
   325cc:	00001206 	br	32618 <_realloc_r+0x170>
   325d0:	00c00404 	movi	r3,16
   325d4:	1823883a 	mov	r17,r3
   325d8:	003fce06 	br	32514 <_realloc_r+0x6c>
   325dc:	a825883a 	mov	r18,r21
   325e0:	8445c83a 	sub	r2,r16,r17
   325e4:	00c003c4 	movi	r3,15
   325e8:	18802636 	bltu	r3,r2,32684 <_realloc_r+0x1dc>
   325ec:	99800117 	ldw	r6,4(r19)
   325f0:	9c07883a 	add	r3,r19,r16
   325f4:	3180004c 	andi	r6,r6,1
   325f8:	3420b03a 	or	r16,r6,r16
   325fc:	9c000115 	stw	r16,4(r19)
   32600:	18800117 	ldw	r2,4(r3)
   32604:	10800054 	ori	r2,r2,1
   32608:	18800115 	stw	r2,4(r3)
   3260c:	a009883a 	mov	r4,r20
   32610:	00357c00 	call	357c0 <__malloc_unlock>
   32614:	9005883a 	mov	r2,r18
   32618:	dfc00917 	ldw	ra,36(sp)
   3261c:	df000817 	ldw	fp,32(sp)
   32620:	ddc00717 	ldw	r23,28(sp)
   32624:	dd800617 	ldw	r22,24(sp)
   32628:	dd400517 	ldw	r21,20(sp)
   3262c:	dd000417 	ldw	r20,16(sp)
   32630:	dcc00317 	ldw	r19,12(sp)
   32634:	dc800217 	ldw	r18,8(sp)
   32638:	dc400117 	ldw	r17,4(sp)
   3263c:	dc000017 	ldw	r16,0(sp)
   32640:	dec00a04 	addi	sp,sp,40
   32644:	f800283a 	ret
   32648:	017fff04 	movi	r5,-4
   3264c:	414a703a 	and	r5,r8,r5
   32650:	814d883a 	add	r6,r16,r5
   32654:	30c01f16 	blt	r6,r3,326d4 <_realloc_r+0x22c>
   32658:	20800317 	ldw	r2,12(r4)
   3265c:	20c00217 	ldw	r3,8(r4)
   32660:	a825883a 	mov	r18,r21
   32664:	3021883a 	mov	r16,r6
   32668:	18800315 	stw	r2,12(r3)
   3266c:	10c00215 	stw	r3,8(r2)
   32670:	003fdb06 	br	325e0 <_realloc_r+0x138>
   32674:	00800304 	movi	r2,12
   32678:	a0800015 	stw	r2,0(r20)
   3267c:	0005883a 	mov	r2,zero
   32680:	003fe506 	br	32618 <_realloc_r+0x170>
   32684:	98c00117 	ldw	r3,4(r19)
   32688:	9c4b883a 	add	r5,r19,r17
   3268c:	11000054 	ori	r4,r2,1
   32690:	18c0004c 	andi	r3,r3,1
   32694:	1c62b03a 	or	r17,r3,r17
   32698:	9c400115 	stw	r17,4(r19)
   3269c:	29000115 	stw	r4,4(r5)
   326a0:	2885883a 	add	r2,r5,r2
   326a4:	10c00117 	ldw	r3,4(r2)
   326a8:	29400204 	addi	r5,r5,8
   326ac:	a009883a 	mov	r4,r20
   326b0:	18c00054 	ori	r3,r3,1
   326b4:	10c00115 	stw	r3,4(r2)
   326b8:	002a1e40 	call	2a1e4 <_free_r>
   326bc:	003fd306 	br	3260c <_realloc_r+0x164>
   326c0:	017fff04 	movi	r5,-4
   326c4:	414a703a 	and	r5,r8,r5
   326c8:	89800404 	addi	r6,r17,16
   326cc:	8151883a 	add	r8,r16,r5
   326d0:	4180590e 	bge	r8,r6,32838 <_realloc_r+0x390>
   326d4:	1080004c 	andi	r2,r2,1
   326d8:	103f9e1e 	bne	r2,zero,32554 <_realloc_r+0xac>
   326dc:	adbffe17 	ldw	r22,-8(r21)
   326e0:	00bfff04 	movi	r2,-4
   326e4:	9dadc83a 	sub	r22,r19,r22
   326e8:	b1800117 	ldw	r6,4(r22)
   326ec:	3084703a 	and	r2,r6,r2
   326f0:	20002026 	beq	r4,zero,32774 <_realloc_r+0x2cc>
   326f4:	80af883a 	add	r23,r16,r2
   326f8:	b96f883a 	add	r23,r23,r5
   326fc:	21c05f26 	beq	r4,r7,3287c <_realloc_r+0x3d4>
   32700:	b8c01c16 	blt	r23,r3,32774 <_realloc_r+0x2cc>
   32704:	20800317 	ldw	r2,12(r4)
   32708:	20c00217 	ldw	r3,8(r4)
   3270c:	81bfff04 	addi	r6,r16,-4
   32710:	01000904 	movi	r4,36
   32714:	18800315 	stw	r2,12(r3)
   32718:	10c00215 	stw	r3,8(r2)
   3271c:	b0c00217 	ldw	r3,8(r22)
   32720:	b0800317 	ldw	r2,12(r22)
   32724:	b4800204 	addi	r18,r22,8
   32728:	18800315 	stw	r2,12(r3)
   3272c:	10c00215 	stw	r3,8(r2)
   32730:	21801b36 	bltu	r4,r6,327a0 <_realloc_r+0x2f8>
   32734:	008004c4 	movi	r2,19
   32738:	1180352e 	bgeu	r2,r6,32810 <_realloc_r+0x368>
   3273c:	a8800017 	ldw	r2,0(r21)
   32740:	b0800215 	stw	r2,8(r22)
   32744:	a8800117 	ldw	r2,4(r21)
   32748:	b0800315 	stw	r2,12(r22)
   3274c:	008006c4 	movi	r2,27
   32750:	11807f36 	bltu	r2,r6,32950 <_realloc_r+0x4a8>
   32754:	b0800404 	addi	r2,r22,16
   32758:	ad400204 	addi	r21,r21,8
   3275c:	00002d06 	br	32814 <_realloc_r+0x36c>
   32760:	adbffe17 	ldw	r22,-8(r21)
   32764:	00bfff04 	movi	r2,-4
   32768:	9dadc83a 	sub	r22,r19,r22
   3276c:	b1000117 	ldw	r4,4(r22)
   32770:	2084703a 	and	r2,r4,r2
   32774:	b03f7726 	beq	r22,zero,32554 <_realloc_r+0xac>
   32778:	80af883a 	add	r23,r16,r2
   3277c:	b8ff7516 	blt	r23,r3,32554 <_realloc_r+0xac>
   32780:	b0800317 	ldw	r2,12(r22)
   32784:	b0c00217 	ldw	r3,8(r22)
   32788:	81bfff04 	addi	r6,r16,-4
   3278c:	01000904 	movi	r4,36
   32790:	18800315 	stw	r2,12(r3)
   32794:	10c00215 	stw	r3,8(r2)
   32798:	b4800204 	addi	r18,r22,8
   3279c:	21bfe52e 	bgeu	r4,r6,32734 <_realloc_r+0x28c>
   327a0:	a80b883a 	mov	r5,r21
   327a4:	9009883a 	mov	r4,r18
   327a8:	00311880 	call	31188 <memmove>
   327ac:	b821883a 	mov	r16,r23
   327b0:	b027883a 	mov	r19,r22
   327b4:	003f8a06 	br	325e0 <_realloc_r+0x138>
   327b8:	300b883a 	mov	r5,r6
   327bc:	dfc00917 	ldw	ra,36(sp)
   327c0:	df000817 	ldw	fp,32(sp)
   327c4:	ddc00717 	ldw	r23,28(sp)
   327c8:	dd800617 	ldw	r22,24(sp)
   327cc:	dd400517 	ldw	r21,20(sp)
   327d0:	dd000417 	ldw	r20,16(sp)
   327d4:	dcc00317 	ldw	r19,12(sp)
   327d8:	dc800217 	ldw	r18,8(sp)
   327dc:	dc400117 	ldw	r17,4(sp)
   327e0:	dc000017 	ldw	r16,0(sp)
   327e4:	dec00a04 	addi	sp,sp,40
   327e8:	002af341 	jmpi	2af34 <_malloc_r>
   327ec:	a8c00017 	ldw	r3,0(r21)
   327f0:	90c00015 	stw	r3,0(r18)
   327f4:	a8c00117 	ldw	r3,4(r21)
   327f8:	90c00115 	stw	r3,4(r18)
   327fc:	00c006c4 	movi	r3,27
   32800:	19804536 	bltu	r3,r6,32918 <_realloc_r+0x470>
   32804:	90800204 	addi	r2,r18,8
   32808:	a8c00204 	addi	r3,r21,8
   3280c:	003f6306 	br	3259c <_realloc_r+0xf4>
   32810:	9005883a 	mov	r2,r18
   32814:	a8c00017 	ldw	r3,0(r21)
   32818:	b821883a 	mov	r16,r23
   3281c:	b027883a 	mov	r19,r22
   32820:	10c00015 	stw	r3,0(r2)
   32824:	a8c00117 	ldw	r3,4(r21)
   32828:	10c00115 	stw	r3,4(r2)
   3282c:	a8c00217 	ldw	r3,8(r21)
   32830:	10c00215 	stw	r3,8(r2)
   32834:	003f6a06 	br	325e0 <_realloc_r+0x138>
   32838:	9c67883a 	add	r19,r19,r17
   3283c:	4445c83a 	sub	r2,r8,r17
   32840:	e4c00215 	stw	r19,8(fp)
   32844:	10800054 	ori	r2,r2,1
   32848:	98800115 	stw	r2,4(r19)
   3284c:	a8bfff17 	ldw	r2,-4(r21)
   32850:	a009883a 	mov	r4,r20
   32854:	1080004c 	andi	r2,r2,1
   32858:	1462b03a 	or	r17,r2,r17
   3285c:	ac7fff15 	stw	r17,-4(r21)
   32860:	00357c00 	call	357c0 <__malloc_unlock>
   32864:	a805883a 	mov	r2,r21
   32868:	003f6b06 	br	32618 <_realloc_r+0x170>
   3286c:	a80b883a 	mov	r5,r21
   32870:	9009883a 	mov	r4,r18
   32874:	00311880 	call	31188 <memmove>
   32878:	003f4e06 	br	325b4 <_realloc_r+0x10c>
   3287c:	89000404 	addi	r4,r17,16
   32880:	b93fbc16 	blt	r23,r4,32774 <_realloc_r+0x2cc>
   32884:	b0800317 	ldw	r2,12(r22)
   32888:	b0c00217 	ldw	r3,8(r22)
   3288c:	81bfff04 	addi	r6,r16,-4
   32890:	01000904 	movi	r4,36
   32894:	18800315 	stw	r2,12(r3)
   32898:	10c00215 	stw	r3,8(r2)
   3289c:	b4800204 	addi	r18,r22,8
   328a0:	21804336 	bltu	r4,r6,329b0 <_realloc_r+0x508>
   328a4:	008004c4 	movi	r2,19
   328a8:	11803f2e 	bgeu	r2,r6,329a8 <_realloc_r+0x500>
   328ac:	a8800017 	ldw	r2,0(r21)
   328b0:	b0800215 	stw	r2,8(r22)
   328b4:	a8800117 	ldw	r2,4(r21)
   328b8:	b0800315 	stw	r2,12(r22)
   328bc:	008006c4 	movi	r2,27
   328c0:	11803f36 	bltu	r2,r6,329c0 <_realloc_r+0x518>
   328c4:	b0800404 	addi	r2,r22,16
   328c8:	ad400204 	addi	r21,r21,8
   328cc:	a8c00017 	ldw	r3,0(r21)
   328d0:	10c00015 	stw	r3,0(r2)
   328d4:	a8c00117 	ldw	r3,4(r21)
   328d8:	10c00115 	stw	r3,4(r2)
   328dc:	a8c00217 	ldw	r3,8(r21)
   328e0:	10c00215 	stw	r3,8(r2)
   328e4:	b447883a 	add	r3,r22,r17
   328e8:	bc45c83a 	sub	r2,r23,r17
   328ec:	e0c00215 	stw	r3,8(fp)
   328f0:	10800054 	ori	r2,r2,1
   328f4:	18800115 	stw	r2,4(r3)
   328f8:	b0800117 	ldw	r2,4(r22)
   328fc:	a009883a 	mov	r4,r20
   32900:	1080004c 	andi	r2,r2,1
   32904:	1462b03a 	or	r17,r2,r17
   32908:	b4400115 	stw	r17,4(r22)
   3290c:	00357c00 	call	357c0 <__malloc_unlock>
   32910:	9005883a 	mov	r2,r18
   32914:	003f4006 	br	32618 <_realloc_r+0x170>
   32918:	a8c00217 	ldw	r3,8(r21)
   3291c:	90c00215 	stw	r3,8(r18)
   32920:	a8c00317 	ldw	r3,12(r21)
   32924:	90c00315 	stw	r3,12(r18)
   32928:	30801126 	beq	r6,r2,32970 <_realloc_r+0x4c8>
   3292c:	90800404 	addi	r2,r18,16
   32930:	a8c00404 	addi	r3,r21,16
   32934:	003f1906 	br	3259c <_realloc_r+0xf4>
   32938:	90ffff17 	ldw	r3,-4(r18)
   3293c:	00bfff04 	movi	r2,-4
   32940:	a825883a 	mov	r18,r21
   32944:	1884703a 	and	r2,r3,r2
   32948:	80a1883a 	add	r16,r16,r2
   3294c:	003f2406 	br	325e0 <_realloc_r+0x138>
   32950:	a8800217 	ldw	r2,8(r21)
   32954:	b0800415 	stw	r2,16(r22)
   32958:	a8800317 	ldw	r2,12(r21)
   3295c:	b0800515 	stw	r2,20(r22)
   32960:	31000a26 	beq	r6,r4,3298c <_realloc_r+0x4e4>
   32964:	b0800604 	addi	r2,r22,24
   32968:	ad400404 	addi	r21,r21,16
   3296c:	003fa906 	br	32814 <_realloc_r+0x36c>
   32970:	a9000417 	ldw	r4,16(r21)
   32974:	90800604 	addi	r2,r18,24
   32978:	a8c00604 	addi	r3,r21,24
   3297c:	91000415 	stw	r4,16(r18)
   32980:	a9000517 	ldw	r4,20(r21)
   32984:	91000515 	stw	r4,20(r18)
   32988:	003f0406 	br	3259c <_realloc_r+0xf4>
   3298c:	a8c00417 	ldw	r3,16(r21)
   32990:	ad400604 	addi	r21,r21,24
   32994:	b0800804 	addi	r2,r22,32
   32998:	b0c00615 	stw	r3,24(r22)
   3299c:	a8ffff17 	ldw	r3,-4(r21)
   329a0:	b0c00715 	stw	r3,28(r22)
   329a4:	003f9b06 	br	32814 <_realloc_r+0x36c>
   329a8:	9005883a 	mov	r2,r18
   329ac:	003fc706 	br	328cc <_realloc_r+0x424>
   329b0:	a80b883a 	mov	r5,r21
   329b4:	9009883a 	mov	r4,r18
   329b8:	00311880 	call	31188 <memmove>
   329bc:	003fc906 	br	328e4 <_realloc_r+0x43c>
   329c0:	a8800217 	ldw	r2,8(r21)
   329c4:	b0800415 	stw	r2,16(r22)
   329c8:	a8800317 	ldw	r2,12(r21)
   329cc:	b0800515 	stw	r2,20(r22)
   329d0:	31000726 	beq	r6,r4,329f0 <_realloc_r+0x548>
   329d4:	b0800604 	addi	r2,r22,24
   329d8:	ad400404 	addi	r21,r21,16
   329dc:	003fbb06 	br	328cc <_realloc_r+0x424>
   329e0:	a009883a 	mov	r4,r20
   329e4:	00357c00 	call	357c0 <__malloc_unlock>
   329e8:	0005883a 	mov	r2,zero
   329ec:	003f0a06 	br	32618 <_realloc_r+0x170>
   329f0:	a8c00417 	ldw	r3,16(r21)
   329f4:	ad400604 	addi	r21,r21,24
   329f8:	b0800804 	addi	r2,r22,32
   329fc:	b0c00615 	stw	r3,24(r22)
   32a00:	a8ffff17 	ldw	r3,-4(r21)
   32a04:	b0c00715 	stw	r3,28(r22)
   32a08:	003fb006 	br	328cc <_realloc_r+0x424>

00032a0c <strcmp>:
   32a0c:	2144b03a 	or	r2,r4,r5
   32a10:	108000cc 	andi	r2,r2,3
   32a14:	1000171e 	bne	r2,zero,32a74 <strcmp+0x68>
   32a18:	20800017 	ldw	r2,0(r4)
   32a1c:	28c00017 	ldw	r3,0(r5)
   32a20:	10c0141e 	bne	r2,r3,32a74 <strcmp+0x68>
   32a24:	027fbff4 	movhi	r9,65279
   32a28:	4a7fbfc4 	addi	r9,r9,-257
   32a2c:	0086303a 	nor	r3,zero,r2
   32a30:	02202074 	movhi	r8,32897
   32a34:	1245883a 	add	r2,r2,r9
   32a38:	42202004 	addi	r8,r8,-32640
   32a3c:	10c4703a 	and	r2,r2,r3
   32a40:	1204703a 	and	r2,r2,r8
   32a44:	10000226 	beq	r2,zero,32a50 <strcmp+0x44>
   32a48:	00002306 	br	32ad8 <strcmp+0xcc>
   32a4c:	1000221e 	bne	r2,zero,32ad8 <strcmp+0xcc>
   32a50:	21000104 	addi	r4,r4,4
   32a54:	20c00017 	ldw	r3,0(r4)
   32a58:	29400104 	addi	r5,r5,4
   32a5c:	29800017 	ldw	r6,0(r5)
   32a60:	1a4f883a 	add	r7,r3,r9
   32a64:	00c4303a 	nor	r2,zero,r3
   32a68:	3884703a 	and	r2,r7,r2
   32a6c:	1204703a 	and	r2,r2,r8
   32a70:	19bff626 	beq	r3,r6,32a4c <strcmp+0x40>
   32a74:	20800003 	ldbu	r2,0(r4)
   32a78:	10c03fcc 	andi	r3,r2,255
   32a7c:	18c0201c 	xori	r3,r3,128
   32a80:	18ffe004 	addi	r3,r3,-128
   32a84:	18000c26 	beq	r3,zero,32ab8 <strcmp+0xac>
   32a88:	29800007 	ldb	r6,0(r5)
   32a8c:	19800326 	beq	r3,r6,32a9c <strcmp+0x90>
   32a90:	00001306 	br	32ae0 <strcmp+0xd4>
   32a94:	29800007 	ldb	r6,0(r5)
   32a98:	11800b1e 	bne	r2,r6,32ac8 <strcmp+0xbc>
   32a9c:	21000044 	addi	r4,r4,1
   32aa0:	20c00003 	ldbu	r3,0(r4)
   32aa4:	29400044 	addi	r5,r5,1
   32aa8:	18803fcc 	andi	r2,r3,255
   32aac:	1080201c 	xori	r2,r2,128
   32ab0:	10bfe004 	addi	r2,r2,-128
   32ab4:	103ff71e 	bne	r2,zero,32a94 <strcmp+0x88>
   32ab8:	0007883a 	mov	r3,zero
   32abc:	28800003 	ldbu	r2,0(r5)
   32ac0:	1885c83a 	sub	r2,r3,r2
   32ac4:	f800283a 	ret
   32ac8:	28800003 	ldbu	r2,0(r5)
   32acc:	18c03fcc 	andi	r3,r3,255
   32ad0:	1885c83a 	sub	r2,r3,r2
   32ad4:	f800283a 	ret
   32ad8:	0005883a 	mov	r2,zero
   32adc:	f800283a 	ret
   32ae0:	10c03fcc 	andi	r3,r2,255
   32ae4:	003ff506 	br	32abc <strcmp+0xb0>

00032ae8 <__sprint_r.part.0>:
   32ae8:	28801917 	ldw	r2,100(r5)
   32aec:	defff604 	addi	sp,sp,-40
   32af0:	dd400515 	stw	r21,20(sp)
   32af4:	dfc00915 	stw	ra,36(sp)
   32af8:	df000815 	stw	fp,32(sp)
   32afc:	ddc00715 	stw	r23,28(sp)
   32b00:	dd800615 	stw	r22,24(sp)
   32b04:	dd000415 	stw	r20,16(sp)
   32b08:	dcc00315 	stw	r19,12(sp)
   32b0c:	dc800215 	stw	r18,8(sp)
   32b10:	dc400115 	stw	r17,4(sp)
   32b14:	dc000015 	stw	r16,0(sp)
   32b18:	1088000c 	andi	r2,r2,8192
   32b1c:	302b883a 	mov	r21,r6
   32b20:	10002e26 	beq	r2,zero,32bdc <__sprint_r.part.0+0xf4>
   32b24:	30800217 	ldw	r2,8(r6)
   32b28:	35800017 	ldw	r22,0(r6)
   32b2c:	10002926 	beq	r2,zero,32bd4 <__sprint_r.part.0+0xec>
   32b30:	2827883a 	mov	r19,r5
   32b34:	2029883a 	mov	r20,r4
   32b38:	b5c00104 	addi	r23,r22,4
   32b3c:	04bfffc4 	movi	r18,-1
   32b40:	bc400017 	ldw	r17,0(r23)
   32b44:	b4000017 	ldw	r16,0(r22)
   32b48:	0039883a 	mov	fp,zero
   32b4c:	8822d0ba 	srli	r17,r17,2
   32b50:	8800031e 	bne	r17,zero,32b60 <__sprint_r.part.0+0x78>
   32b54:	00001806 	br	32bb8 <__sprint_r.part.0+0xd0>
   32b58:	84000104 	addi	r16,r16,4
   32b5c:	8f001526 	beq	r17,fp,32bb4 <__sprint_r.part.0+0xcc>
   32b60:	81400017 	ldw	r5,0(r16)
   32b64:	980d883a 	mov	r6,r19
   32b68:	a009883a 	mov	r4,r20
   32b6c:	00344b00 	call	344b0 <_fputwc_r>
   32b70:	e7000044 	addi	fp,fp,1
   32b74:	14bff81e 	bne	r2,r18,32b58 <__sprint_r.part.0+0x70>
   32b78:	9005883a 	mov	r2,r18
   32b7c:	a8000215 	stw	zero,8(r21)
   32b80:	a8000115 	stw	zero,4(r21)
   32b84:	dfc00917 	ldw	ra,36(sp)
   32b88:	df000817 	ldw	fp,32(sp)
   32b8c:	ddc00717 	ldw	r23,28(sp)
   32b90:	dd800617 	ldw	r22,24(sp)
   32b94:	dd400517 	ldw	r21,20(sp)
   32b98:	dd000417 	ldw	r20,16(sp)
   32b9c:	dcc00317 	ldw	r19,12(sp)
   32ba0:	dc800217 	ldw	r18,8(sp)
   32ba4:	dc400117 	ldw	r17,4(sp)
   32ba8:	dc000017 	ldw	r16,0(sp)
   32bac:	dec00a04 	addi	sp,sp,40
   32bb0:	f800283a 	ret
   32bb4:	a8800217 	ldw	r2,8(r21)
   32bb8:	8c63883a 	add	r17,r17,r17
   32bbc:	8c63883a 	add	r17,r17,r17
   32bc0:	1445c83a 	sub	r2,r2,r17
   32bc4:	a8800215 	stw	r2,8(r21)
   32bc8:	b5800204 	addi	r22,r22,8
   32bcc:	bdc00204 	addi	r23,r23,8
   32bd0:	103fdb1e 	bne	r2,zero,32b40 <__sprint_r.part.0+0x58>
   32bd4:	0005883a 	mov	r2,zero
   32bd8:	003fe806 	br	32b7c <__sprint_r.part.0+0x94>
   32bdc:	0030a580 	call	30a58 <__sfvwrite_r>
   32be0:	003fe606 	br	32b7c <__sprint_r.part.0+0x94>

00032be4 <__sprint_r>:
   32be4:	30c00217 	ldw	r3,8(r6)
   32be8:	18000126 	beq	r3,zero,32bf0 <__sprint_r+0xc>
   32bec:	0032ae81 	jmpi	32ae8 <__sprint_r.part.0>
   32bf0:	30000115 	stw	zero,4(r6)
   32bf4:	0005883a 	mov	r2,zero
   32bf8:	f800283a 	ret

00032bfc <___vfiprintf_internal_r>:
   32bfc:	deffc904 	addi	sp,sp,-220
   32c00:	df003515 	stw	fp,212(sp)
   32c04:	dd003115 	stw	r20,196(sp)
   32c08:	dfc03615 	stw	ra,216(sp)
   32c0c:	ddc03415 	stw	r23,208(sp)
   32c10:	dd803315 	stw	r22,204(sp)
   32c14:	dd403215 	stw	r21,200(sp)
   32c18:	dcc03015 	stw	r19,192(sp)
   32c1c:	dc802f15 	stw	r18,188(sp)
   32c20:	dc402e15 	stw	r17,184(sp)
   32c24:	dc002d15 	stw	r16,180(sp)
   32c28:	d9002015 	stw	r4,128(sp)
   32c2c:	d9c02215 	stw	r7,136(sp)
   32c30:	2829883a 	mov	r20,r5
   32c34:	3039883a 	mov	fp,r6
   32c38:	20000226 	beq	r4,zero,32c44 <___vfiprintf_internal_r+0x48>
   32c3c:	20800e17 	ldw	r2,56(r4)
   32c40:	1000cf26 	beq	r2,zero,32f80 <___vfiprintf_internal_r+0x384>
   32c44:	a080030b 	ldhu	r2,12(r20)
   32c48:	10c8000c 	andi	r3,r2,8192
   32c4c:	1800061e 	bne	r3,zero,32c68 <___vfiprintf_internal_r+0x6c>
   32c50:	a1001917 	ldw	r4,100(r20)
   32c54:	00f7ffc4 	movi	r3,-8193
   32c58:	10880014 	ori	r2,r2,8192
   32c5c:	20c6703a 	and	r3,r4,r3
   32c60:	a080030d 	sth	r2,12(r20)
   32c64:	a0c01915 	stw	r3,100(r20)
   32c68:	10c0020c 	andi	r3,r2,8
   32c6c:	1800a926 	beq	r3,zero,32f14 <___vfiprintf_internal_r+0x318>
   32c70:	a0c00417 	ldw	r3,16(r20)
   32c74:	1800a726 	beq	r3,zero,32f14 <___vfiprintf_internal_r+0x318>
   32c78:	1080068c 	andi	r2,r2,26
   32c7c:	00c00284 	movi	r3,10
   32c80:	10c0ac26 	beq	r2,r3,32f34 <___vfiprintf_internal_r+0x338>
   32c84:	da801a04 	addi	r10,sp,104
   32c88:	da801e15 	stw	r10,120(sp)
   32c8c:	d8801e17 	ldw	r2,120(sp)
   32c90:	da8019c4 	addi	r10,sp,103
   32c94:	05800134 	movhi	r22,4
   32c98:	05c00134 	movhi	r23,4
   32c9c:	da801f15 	stw	r10,124(sp)
   32ca0:	1295c83a 	sub	r10,r2,r10
   32ca4:	b5a3ab04 	addi	r22,r22,-29012
   32ca8:	bde3a704 	addi	r23,r23,-29028
   32cac:	dec01a15 	stw	sp,104(sp)
   32cb0:	d8001c15 	stw	zero,112(sp)
   32cb4:	d8001b15 	stw	zero,108(sp)
   32cb8:	d8002615 	stw	zero,152(sp)
   32cbc:	d8002315 	stw	zero,140(sp)
   32cc0:	da802715 	stw	r10,156(sp)
   32cc4:	d811883a 	mov	r8,sp
   32cc8:	dd002115 	stw	r20,132(sp)
   32ccc:	e021883a 	mov	r16,fp
   32cd0:	80800007 	ldb	r2,0(r16)
   32cd4:	1003ea26 	beq	r2,zero,33c80 <___vfiprintf_internal_r+0x1084>
   32cd8:	00c00944 	movi	r3,37
   32cdc:	8025883a 	mov	r18,r16
   32ce0:	10c0021e 	bne	r2,r3,32cec <___vfiprintf_internal_r+0xf0>
   32ce4:	00001606 	br	32d40 <___vfiprintf_internal_r+0x144>
   32ce8:	10c00326 	beq	r2,r3,32cf8 <___vfiprintf_internal_r+0xfc>
   32cec:	94800044 	addi	r18,r18,1
   32cf0:	90800007 	ldb	r2,0(r18)
   32cf4:	103ffc1e 	bne	r2,zero,32ce8 <___vfiprintf_internal_r+0xec>
   32cf8:	9423c83a 	sub	r17,r18,r16
   32cfc:	88001026 	beq	r17,zero,32d40 <___vfiprintf_internal_r+0x144>
   32d00:	d8c01c17 	ldw	r3,112(sp)
   32d04:	d8801b17 	ldw	r2,108(sp)
   32d08:	44000015 	stw	r16,0(r8)
   32d0c:	88c7883a 	add	r3,r17,r3
   32d10:	10800044 	addi	r2,r2,1
   32d14:	44400115 	stw	r17,4(r8)
   32d18:	d8c01c15 	stw	r3,112(sp)
   32d1c:	d8801b15 	stw	r2,108(sp)
   32d20:	010001c4 	movi	r4,7
   32d24:	2080760e 	bge	r4,r2,32f00 <___vfiprintf_internal_r+0x304>
   32d28:	1803821e 	bne	r3,zero,33b34 <___vfiprintf_internal_r+0xf38>
   32d2c:	da802317 	ldw	r10,140(sp)
   32d30:	d8001b15 	stw	zero,108(sp)
   32d34:	d811883a 	mov	r8,sp
   32d38:	5455883a 	add	r10,r10,r17
   32d3c:	da802315 	stw	r10,140(sp)
   32d40:	90800007 	ldb	r2,0(r18)
   32d44:	10044626 	beq	r2,zero,33e60 <___vfiprintf_internal_r+0x1264>
   32d48:	90c00047 	ldb	r3,1(r18)
   32d4c:	94000044 	addi	r16,r18,1
   32d50:	d8001d85 	stb	zero,118(sp)
   32d54:	0009883a 	mov	r4,zero
   32d58:	000f883a 	mov	r7,zero
   32d5c:	027fffc4 	movi	r9,-1
   32d60:	0023883a 	mov	r17,zero
   32d64:	0029883a 	mov	r20,zero
   32d68:	01401604 	movi	r5,88
   32d6c:	01800244 	movi	r6,9
   32d70:	03400a84 	movi	r13,42
   32d74:	03001b04 	movi	r12,108
   32d78:	84000044 	addi	r16,r16,1
   32d7c:	18bff804 	addi	r2,r3,-32
   32d80:	28827336 	bltu	r5,r2,33750 <___vfiprintf_internal_r+0xb54>
   32d84:	100490ba 	slli	r2,r2,2
   32d88:	028000f4 	movhi	r10,3
   32d8c:	528b6704 	addi	r10,r10,11676
   32d90:	1285883a 	add	r2,r2,r10
   32d94:	10800017 	ldw	r2,0(r2)
   32d98:	1000683a 	jmp	r2
   32d9c:	00033484 	movi	zero,3282
   32da0:	00033750 	cmplti	zero,zero,3293
   32da4:	00033750 	cmplti	zero,zero,3293
   32da8:	000334a4 	muli	zero,zero,3282
   32dac:	00033750 	cmplti	zero,zero,3293
   32db0:	00033750 	cmplti	zero,zero,3293
   32db4:	00033750 	cmplti	zero,zero,3293
   32db8:	00033750 	cmplti	zero,zero,3293
   32dbc:	00033750 	cmplti	zero,zero,3293
   32dc0:	00033750 	cmplti	zero,zero,3293
   32dc4:	0003368c 	andi	zero,zero,3290
   32dc8:	000336a8 	cmpgeui	zero,zero,3290
   32dcc:	00033750 	cmplti	zero,zero,3293
   32dd0:	00032f90 	cmplti	zero,zero,3262
   32dd4:	000336b8 	rdprs	zero,zero,3290
   32dd8:	00033750 	cmplti	zero,zero,3293
   32ddc:	000334b0 	cmpltui	zero,zero,3282
   32de0:	000334bc 	xorhi	zero,zero,3282
   32de4:	000334bc 	xorhi	zero,zero,3282
   32de8:	000334bc 	xorhi	zero,zero,3282
   32dec:	000334bc 	xorhi	zero,zero,3282
   32df0:	000334bc 	xorhi	zero,zero,3282
   32df4:	000334bc 	xorhi	zero,zero,3282
   32df8:	000334bc 	xorhi	zero,zero,3282
   32dfc:	000334bc 	xorhi	zero,zero,3282
   32e00:	000334bc 	xorhi	zero,zero,3282
   32e04:	00033750 	cmplti	zero,zero,3293
   32e08:	00033750 	cmplti	zero,zero,3293
   32e0c:	00033750 	cmplti	zero,zero,3293
   32e10:	00033750 	cmplti	zero,zero,3293
   32e14:	00033750 	cmplti	zero,zero,3293
   32e18:	00033750 	cmplti	zero,zero,3293
   32e1c:	00033750 	cmplti	zero,zero,3293
   32e20:	00033750 	cmplti	zero,zero,3293
   32e24:	00033750 	cmplti	zero,zero,3293
   32e28:	00033750 	cmplti	zero,zero,3293
   32e2c:	000334e8 	cmpgeui	zero,zero,3283
   32e30:	00033750 	cmplti	zero,zero,3293
   32e34:	00033750 	cmplti	zero,zero,3293
   32e38:	00033750 	cmplti	zero,zero,3293
   32e3c:	00033750 	cmplti	zero,zero,3293
   32e40:	00033750 	cmplti	zero,zero,3293
   32e44:	00033750 	cmplti	zero,zero,3293
   32e48:	00033750 	cmplti	zero,zero,3293
   32e4c:	00033750 	cmplti	zero,zero,3293
   32e50:	00033750 	cmplti	zero,zero,3293
   32e54:	00033750 	cmplti	zero,zero,3293
   32e58:	00033520 	cmpeqi	zero,zero,3284
   32e5c:	00033750 	cmplti	zero,zero,3293
   32e60:	00033750 	cmplti	zero,zero,3293
   32e64:	00033750 	cmplti	zero,zero,3293
   32e68:	00033750 	cmplti	zero,zero,3293
   32e6c:	00033750 	cmplti	zero,zero,3293
   32e70:	00033578 	rdprs	zero,zero,3285
   32e74:	00033750 	cmplti	zero,zero,3293
   32e78:	00033750 	cmplti	zero,zero,3293
   32e7c:	000335e8 	cmpgeui	zero,zero,3287
   32e80:	00033750 	cmplti	zero,zero,3293
   32e84:	00033750 	cmplti	zero,zero,3293
   32e88:	00033750 	cmplti	zero,zero,3293
   32e8c:	00033750 	cmplti	zero,zero,3293
   32e90:	00033750 	cmplti	zero,zero,3293
   32e94:	00033750 	cmplti	zero,zero,3293
   32e98:	00033750 	cmplti	zero,zero,3293
   32e9c:	00033750 	cmplti	zero,zero,3293
   32ea0:	00033750 	cmplti	zero,zero,3293
   32ea4:	00033750 	cmplti	zero,zero,3293
   32ea8:	00033394 	movui	zero,3278
   32eac:	000333c0 	call	333c <__alt_mem_onchip_memory_nios2_FFT-0x1ccc4>
   32eb0:	00033750 	cmplti	zero,zero,3293
   32eb4:	00033750 	cmplti	zero,zero,3293
   32eb8:	00033750 	cmplti	zero,zero,3293
   32ebc:	000336f8 	rdprs	zero,zero,3291
   32ec0:	000333c0 	call	333c <__alt_mem_onchip_memory_nios2_FFT-0x1ccc4>
   32ec4:	00033750 	cmplti	zero,zero,3293
   32ec8:	00033750 	cmplti	zero,zero,3293
   32ecc:	00033254 	movui	zero,3273
   32ed0:	00033750 	cmplti	zero,zero,3293
   32ed4:	00033264 	muli	zero,zero,3273
   32ed8:	000332a0 	cmpeqi	zero,zero,3274
   32edc:	00032f9c 	xori	zero,zero,3262
   32ee0:	00033248 	cmpgei	zero,zero,3273
   32ee4:	00033750 	cmplti	zero,zero,3293
   32ee8:	00033624 	muli	zero,zero,3288
   32eec:	00033750 	cmplti	zero,zero,3293
   32ef0:	0003367c 	xorhi	zero,zero,3289
   32ef4:	00033750 	cmplti	zero,zero,3293
   32ef8:	00033750 	cmplti	zero,zero,3293
   32efc:	00033340 	call	3334 <__alt_mem_onchip_memory_nios2_FFT-0x1cccc>
   32f00:	42000204 	addi	r8,r8,8
   32f04:	da802317 	ldw	r10,140(sp)
   32f08:	5455883a 	add	r10,r10,r17
   32f0c:	da802315 	stw	r10,140(sp)
   32f10:	003f8b06 	br	32d40 <___vfiprintf_internal_r+0x144>
   32f14:	d9002017 	ldw	r4,128(sp)
   32f18:	a00b883a 	mov	r5,r20
   32f1c:	002eca80 	call	2eca8 <__swsetup_r>
   32f20:	1003b11e 	bne	r2,zero,33de8 <___vfiprintf_internal_r+0x11ec>
   32f24:	a080030b 	ldhu	r2,12(r20)
   32f28:	00c00284 	movi	r3,10
   32f2c:	1080068c 	andi	r2,r2,26
   32f30:	10ff541e 	bne	r2,r3,32c84 <___vfiprintf_internal_r+0x88>
   32f34:	a080038f 	ldh	r2,14(r20)
   32f38:	103f5216 	blt	r2,zero,32c84 <___vfiprintf_internal_r+0x88>
   32f3c:	d9c02217 	ldw	r7,136(sp)
   32f40:	d9002017 	ldw	r4,128(sp)
   32f44:	e00d883a 	mov	r6,fp
   32f48:	a00b883a 	mov	r5,r20
   32f4c:	00340740 	call	34074 <__sbprintf>
   32f50:	dfc03617 	ldw	ra,216(sp)
   32f54:	df003517 	ldw	fp,212(sp)
   32f58:	ddc03417 	ldw	r23,208(sp)
   32f5c:	dd803317 	ldw	r22,204(sp)
   32f60:	dd403217 	ldw	r21,200(sp)
   32f64:	dd003117 	ldw	r20,196(sp)
   32f68:	dcc03017 	ldw	r19,192(sp)
   32f6c:	dc802f17 	ldw	r18,188(sp)
   32f70:	dc402e17 	ldw	r17,184(sp)
   32f74:	dc002d17 	ldw	r16,180(sp)
   32f78:	dec03704 	addi	sp,sp,220
   32f7c:	f800283a 	ret
   32f80:	0029f640 	call	29f64 <__sinit>
   32f84:	003f2f06 	br	32c44 <___vfiprintf_internal_r+0x48>
   32f88:	0463c83a 	sub	r17,zero,r17
   32f8c:	d8802215 	stw	r2,136(sp)
   32f90:	a5000114 	ori	r20,r20,4
   32f94:	80c00007 	ldb	r3,0(r16)
   32f98:	003f7706 	br	32d78 <___vfiprintf_internal_r+0x17c>
   32f9c:	00800c04 	movi	r2,48
   32fa0:	da802217 	ldw	r10,136(sp)
   32fa4:	d8801d05 	stb	r2,116(sp)
   32fa8:	00801e04 	movi	r2,120
   32fac:	d8801d45 	stb	r2,117(sp)
   32fb0:	d8001d85 	stb	zero,118(sp)
   32fb4:	50c00104 	addi	r3,r10,4
   32fb8:	54800017 	ldw	r18,0(r10)
   32fbc:	0027883a 	mov	r19,zero
   32fc0:	a0800094 	ori	r2,r20,2
   32fc4:	48030b16 	blt	r9,zero,33bf4 <___vfiprintf_internal_r+0xff8>
   32fc8:	00bfdfc4 	movi	r2,-129
   32fcc:	a096703a 	and	r11,r20,r2
   32fd0:	d8c02215 	stw	r3,136(sp)
   32fd4:	5d000094 	ori	r20,r11,2
   32fd8:	90032b1e 	bne	r18,zero,33c88 <___vfiprintf_internal_r+0x108c>
   32fdc:	00800134 	movhi	r2,4
   32fe0:	10a2a704 	addi	r2,r2,-30052
   32fe4:	d8802615 	stw	r2,152(sp)
   32fe8:	0039883a 	mov	fp,zero
   32fec:	48017b1e 	bne	r9,zero,335dc <___vfiprintf_internal_r+0x9e0>
   32ff0:	0013883a 	mov	r9,zero
   32ff4:	0027883a 	mov	r19,zero
   32ff8:	dd401a04 	addi	r21,sp,104
   32ffc:	4825883a 	mov	r18,r9
   33000:	4cc0010e 	bge	r9,r19,33008 <___vfiprintf_internal_r+0x40c>
   33004:	9825883a 	mov	r18,r19
   33008:	e7003fcc 	andi	fp,fp,255
   3300c:	e700201c 	xori	fp,fp,128
   33010:	e73fe004 	addi	fp,fp,-128
   33014:	e0000126 	beq	fp,zero,3301c <___vfiprintf_internal_r+0x420>
   33018:	94800044 	addi	r18,r18,1
   3301c:	a380008c 	andi	r14,r20,2
   33020:	70000126 	beq	r14,zero,33028 <___vfiprintf_internal_r+0x42c>
   33024:	94800084 	addi	r18,r18,2
   33028:	a700210c 	andi	fp,r20,132
   3302c:	e001df1e 	bne	fp,zero,337ac <___vfiprintf_internal_r+0xbb0>
   33030:	8c87c83a 	sub	r3,r17,r18
   33034:	00c1dd0e 	bge	zero,r3,337ac <___vfiprintf_internal_r+0xbb0>
   33038:	01c00404 	movi	r7,16
   3303c:	d8801c17 	ldw	r2,112(sp)
   33040:	38c3ad0e 	bge	r7,r3,33ef8 <___vfiprintf_internal_r+0x12fc>
   33044:	02800134 	movhi	r10,4
   33048:	52a3ab04 	addi	r10,r10,-29012
   3304c:	dc002915 	stw	r16,164(sp)
   33050:	d9801b17 	ldw	r6,108(sp)
   33054:	da802415 	stw	r10,144(sp)
   33058:	03c001c4 	movi	r15,7
   3305c:	da402515 	stw	r9,148(sp)
   33060:	db802815 	stw	r14,160(sp)
   33064:	1821883a 	mov	r16,r3
   33068:	00000506 	br	33080 <___vfiprintf_internal_r+0x484>
   3306c:	31400084 	addi	r5,r6,2
   33070:	42000204 	addi	r8,r8,8
   33074:	200d883a 	mov	r6,r4
   33078:	843ffc04 	addi	r16,r16,-16
   3307c:	3c000d0e 	bge	r7,r16,330b4 <___vfiprintf_internal_r+0x4b8>
   33080:	10800404 	addi	r2,r2,16
   33084:	31000044 	addi	r4,r6,1
   33088:	45800015 	stw	r22,0(r8)
   3308c:	41c00115 	stw	r7,4(r8)
   33090:	d8801c15 	stw	r2,112(sp)
   33094:	d9001b15 	stw	r4,108(sp)
   33098:	793ff40e 	bge	r15,r4,3306c <___vfiprintf_internal_r+0x470>
   3309c:	1001b51e 	bne	r2,zero,33774 <___vfiprintf_internal_r+0xb78>
   330a0:	843ffc04 	addi	r16,r16,-16
   330a4:	000d883a 	mov	r6,zero
   330a8:	01400044 	movi	r5,1
   330ac:	d811883a 	mov	r8,sp
   330b0:	3c3ff316 	blt	r7,r16,33080 <___vfiprintf_internal_r+0x484>
   330b4:	8007883a 	mov	r3,r16
   330b8:	da402517 	ldw	r9,148(sp)
   330bc:	db802817 	ldw	r14,160(sp)
   330c0:	dc002917 	ldw	r16,164(sp)
   330c4:	da802417 	ldw	r10,144(sp)
   330c8:	1885883a 	add	r2,r3,r2
   330cc:	40c00115 	stw	r3,4(r8)
   330d0:	42800015 	stw	r10,0(r8)
   330d4:	d8801c15 	stw	r2,112(sp)
   330d8:	d9401b15 	stw	r5,108(sp)
   330dc:	00c001c4 	movi	r3,7
   330e0:	19426016 	blt	r3,r5,33a64 <___vfiprintf_internal_r+0xe68>
   330e4:	d8c01d87 	ldb	r3,118(sp)
   330e8:	42000204 	addi	r8,r8,8
   330ec:	29000044 	addi	r4,r5,1
   330f0:	1801b31e 	bne	r3,zero,337c0 <___vfiprintf_internal_r+0xbc4>
   330f4:	7001c026 	beq	r14,zero,337f8 <___vfiprintf_internal_r+0xbfc>
   330f8:	d8c01d04 	addi	r3,sp,116
   330fc:	10800084 	addi	r2,r2,2
   33100:	40c00015 	stw	r3,0(r8)
   33104:	00c00084 	movi	r3,2
   33108:	40c00115 	stw	r3,4(r8)
   3310c:	d8801c15 	stw	r2,112(sp)
   33110:	d9001b15 	stw	r4,108(sp)
   33114:	00c001c4 	movi	r3,7
   33118:	1902650e 	bge	r3,r4,33ab0 <___vfiprintf_internal_r+0xeb4>
   3311c:	10029a1e 	bne	r2,zero,33b88 <___vfiprintf_internal_r+0xf8c>
   33120:	00c02004 	movi	r3,128
   33124:	01000044 	movi	r4,1
   33128:	000b883a 	mov	r5,zero
   3312c:	d811883a 	mov	r8,sp
   33130:	e0c1b31e 	bne	fp,r3,33800 <___vfiprintf_internal_r+0xc04>
   33134:	8cb9c83a 	sub	fp,r17,r18
   33138:	0701b10e 	bge	zero,fp,33800 <___vfiprintf_internal_r+0xc04>
   3313c:	01c00404 	movi	r7,16
   33140:	3f03890e 	bge	r7,fp,33f68 <___vfiprintf_internal_r+0x136c>
   33144:	00c00134 	movhi	r3,4
   33148:	18e3a704 	addi	r3,r3,-29028
   3314c:	d8c02415 	stw	r3,144(sp)
   33150:	8007883a 	mov	r3,r16
   33154:	034001c4 	movi	r13,7
   33158:	e021883a 	mov	r16,fp
   3315c:	da402515 	stw	r9,148(sp)
   33160:	1839883a 	mov	fp,r3
   33164:	00000506 	br	3317c <___vfiprintf_internal_r+0x580>
   33168:	29800084 	addi	r6,r5,2
   3316c:	42000204 	addi	r8,r8,8
   33170:	180b883a 	mov	r5,r3
   33174:	843ffc04 	addi	r16,r16,-16
   33178:	3c000d0e 	bge	r7,r16,331b0 <___vfiprintf_internal_r+0x5b4>
   3317c:	10800404 	addi	r2,r2,16
   33180:	28c00044 	addi	r3,r5,1
   33184:	45c00015 	stw	r23,0(r8)
   33188:	41c00115 	stw	r7,4(r8)
   3318c:	d8801c15 	stw	r2,112(sp)
   33190:	d8c01b15 	stw	r3,108(sp)
   33194:	68fff40e 	bge	r13,r3,33168 <___vfiprintf_internal_r+0x56c>
   33198:	1002241e 	bne	r2,zero,33a2c <___vfiprintf_internal_r+0xe30>
   3319c:	843ffc04 	addi	r16,r16,-16
   331a0:	01800044 	movi	r6,1
   331a4:	000b883a 	mov	r5,zero
   331a8:	d811883a 	mov	r8,sp
   331ac:	3c3ff316 	blt	r7,r16,3317c <___vfiprintf_internal_r+0x580>
   331b0:	da402517 	ldw	r9,148(sp)
   331b4:	e007883a 	mov	r3,fp
   331b8:	8039883a 	mov	fp,r16
   331bc:	1821883a 	mov	r16,r3
   331c0:	d8c02417 	ldw	r3,144(sp)
   331c4:	1705883a 	add	r2,r2,fp
   331c8:	47000115 	stw	fp,4(r8)
   331cc:	40c00015 	stw	r3,0(r8)
   331d0:	d8801c15 	stw	r2,112(sp)
   331d4:	d9801b15 	stw	r6,108(sp)
   331d8:	00c001c4 	movi	r3,7
   331dc:	19827616 	blt	r3,r6,33bb8 <___vfiprintf_internal_r+0xfbc>
   331e0:	4cf9c83a 	sub	fp,r9,r19
   331e4:	42000204 	addi	r8,r8,8
   331e8:	31000044 	addi	r4,r6,1
   331ec:	300b883a 	mov	r5,r6
   331f0:	07018516 	blt	zero,fp,33808 <___vfiprintf_internal_r+0xc0c>
   331f4:	9885883a 	add	r2,r19,r2
   331f8:	45400015 	stw	r21,0(r8)
   331fc:	44c00115 	stw	r19,4(r8)
   33200:	d8801c15 	stw	r2,112(sp)
   33204:	d9001b15 	stw	r4,108(sp)
   33208:	00c001c4 	movi	r3,7
   3320c:	1901dd0e 	bge	r3,r4,33984 <___vfiprintf_internal_r+0xd88>
   33210:	1002401e 	bne	r2,zero,33b14 <___vfiprintf_internal_r+0xf18>
   33214:	d8001b15 	stw	zero,108(sp)
   33218:	a2c0010c 	andi	r11,r20,4
   3321c:	58000226 	beq	r11,zero,33228 <___vfiprintf_internal_r+0x62c>
   33220:	8ca7c83a 	sub	r19,r17,r18
   33224:	04c2f216 	blt	zero,r19,33df0 <___vfiprintf_internal_r+0x11f4>
   33228:	8c80010e 	bge	r17,r18,33230 <___vfiprintf_internal_r+0x634>
   3322c:	9023883a 	mov	r17,r18
   33230:	da802317 	ldw	r10,140(sp)
   33234:	5455883a 	add	r10,r10,r17
   33238:	da802315 	stw	r10,140(sp)
   3323c:	d8001b15 	stw	zero,108(sp)
   33240:	d811883a 	mov	r8,sp
   33244:	003ea206 	br	32cd0 <___vfiprintf_internal_r+0xd4>
   33248:	a5000814 	ori	r20,r20,32
   3324c:	80c00007 	ldb	r3,0(r16)
   33250:	003ec906 	br	32d78 <___vfiprintf_internal_r+0x17c>
   33254:	80c00007 	ldb	r3,0(r16)
   33258:	1b030926 	beq	r3,r12,33e80 <___vfiprintf_internal_r+0x1284>
   3325c:	a5000414 	ori	r20,r20,16
   33260:	003ec506 	br	32d78 <___vfiprintf_internal_r+0x17c>
   33264:	21003fcc 	andi	r4,r4,255
   33268:	20035e1e 	bne	r4,zero,33fe4 <___vfiprintf_internal_r+0x13e8>
   3326c:	a080080c 	andi	r2,r20,32
   33270:	1002a526 	beq	r2,zero,33d08 <___vfiprintf_internal_r+0x110c>
   33274:	da802217 	ldw	r10,136(sp)
   33278:	50800017 	ldw	r2,0(r10)
   3327c:	da802317 	ldw	r10,140(sp)
   33280:	5007d7fa 	srai	r3,r10,31
   33284:	da802217 	ldw	r10,136(sp)
   33288:	10c00115 	stw	r3,4(r2)
   3328c:	52800104 	addi	r10,r10,4
   33290:	da802215 	stw	r10,136(sp)
   33294:	da802317 	ldw	r10,140(sp)
   33298:	12800015 	stw	r10,0(r2)
   3329c:	003e8c06 	br	32cd0 <___vfiprintf_internal_r+0xd4>
   332a0:	21003fcc 	andi	r4,r4,255
   332a4:	2003511e 	bne	r4,zero,33fec <___vfiprintf_internal_r+0x13f0>
   332a8:	a080080c 	andi	r2,r20,32
   332ac:	1000a126 	beq	r2,zero,33534 <___vfiprintf_internal_r+0x938>
   332b0:	da802217 	ldw	r10,136(sp)
   332b4:	d8001d85 	stb	zero,118(sp)
   332b8:	50800204 	addi	r2,r10,8
   332bc:	54800017 	ldw	r18,0(r10)
   332c0:	54c00117 	ldw	r19,4(r10)
   332c4:	4802b416 	blt	r9,zero,33d98 <___vfiprintf_internal_r+0x119c>
   332c8:	013fdfc4 	movi	r4,-129
   332cc:	94c6b03a 	or	r3,r18,r19
   332d0:	d8802215 	stw	r2,136(sp)
   332d4:	a128703a 	and	r20,r20,r4
   332d8:	1800a226 	beq	r3,zero,33564 <___vfiprintf_internal_r+0x968>
   332dc:	0039883a 	mov	fp,zero
   332e0:	dd401a04 	addi	r21,sp,104
   332e4:	9006d0fa 	srli	r3,r18,3
   332e8:	9808977a 	slli	r4,r19,29
   332ec:	9826d0fa 	srli	r19,r19,3
   332f0:	948001cc 	andi	r18,r18,7
   332f4:	90800c04 	addi	r2,r18,48
   332f8:	ad7fffc4 	addi	r21,r21,-1
   332fc:	20e4b03a 	or	r18,r4,r3
   33300:	a8800005 	stb	r2,0(r21)
   33304:	94c6b03a 	or	r3,r18,r19
   33308:	183ff61e 	bne	r3,zero,332e4 <___vfiprintf_internal_r+0x6e8>
   3330c:	a0c0004c 	andi	r3,r20,1
   33310:	18005926 	beq	r3,zero,33478 <___vfiprintf_internal_r+0x87c>
   33314:	10803fcc 	andi	r2,r2,255
   33318:	1080201c 	xori	r2,r2,128
   3331c:	10bfe004 	addi	r2,r2,-128
   33320:	00c00c04 	movi	r3,48
   33324:	10c05426 	beq	r2,r3,33478 <___vfiprintf_internal_r+0x87c>
   33328:	da801e17 	ldw	r10,120(sp)
   3332c:	a8bfffc4 	addi	r2,r21,-1
   33330:	a8ffffc5 	stb	r3,-1(r21)
   33334:	50a7c83a 	sub	r19,r10,r2
   33338:	102b883a 	mov	r21,r2
   3333c:	003f2f06 	br	32ffc <___vfiprintf_internal_r+0x400>
   33340:	21003fcc 	andi	r4,r4,255
   33344:	2003421e 	bne	r4,zero,34050 <___vfiprintf_internal_r+0x1454>
   33348:	00800134 	movhi	r2,4
   3334c:	10a2a704 	addi	r2,r2,-30052
   33350:	d8802615 	stw	r2,152(sp)
   33354:	a080080c 	andi	r2,r20,32
   33358:	1000aa26 	beq	r2,zero,33604 <___vfiprintf_internal_r+0xa08>
   3335c:	da802217 	ldw	r10,136(sp)
   33360:	54800017 	ldw	r18,0(r10)
   33364:	54c00117 	ldw	r19,4(r10)
   33368:	52800204 	addi	r10,r10,8
   3336c:	da802215 	stw	r10,136(sp)
   33370:	a080004c 	andi	r2,r20,1
   33374:	1001d226 	beq	r2,zero,33ac0 <___vfiprintf_internal_r+0xec4>
   33378:	94c4b03a 	or	r2,r18,r19
   3337c:	1002351e 	bne	r2,zero,33c54 <___vfiprintf_internal_r+0x1058>
   33380:	d8001d85 	stb	zero,118(sp)
   33384:	48022216 	blt	r9,zero,33c10 <___vfiprintf_internal_r+0x1014>
   33388:	00bfdfc4 	movi	r2,-129
   3338c:	a0a8703a 	and	r20,r20,r2
   33390:	003f1506 	br	32fe8 <___vfiprintf_internal_r+0x3ec>
   33394:	da802217 	ldw	r10,136(sp)
   33398:	04800044 	movi	r18,1
   3339c:	d8001d85 	stb	zero,118(sp)
   333a0:	50800017 	ldw	r2,0(r10)
   333a4:	52800104 	addi	r10,r10,4
   333a8:	da802215 	stw	r10,136(sp)
   333ac:	d8801005 	stb	r2,64(sp)
   333b0:	9027883a 	mov	r19,r18
   333b4:	dd401004 	addi	r21,sp,64
   333b8:	0013883a 	mov	r9,zero
   333bc:	003f1706 	br	3301c <___vfiprintf_internal_r+0x420>
   333c0:	21003fcc 	andi	r4,r4,255
   333c4:	2003201e 	bne	r4,zero,34048 <___vfiprintf_internal_r+0x144c>
   333c8:	a080080c 	andi	r2,r20,32
   333cc:	10004b26 	beq	r2,zero,334fc <___vfiprintf_internal_r+0x900>
   333d0:	da802217 	ldw	r10,136(sp)
   333d4:	50800117 	ldw	r2,4(r10)
   333d8:	54800017 	ldw	r18,0(r10)
   333dc:	52800204 	addi	r10,r10,8
   333e0:	da802215 	stw	r10,136(sp)
   333e4:	1027883a 	mov	r19,r2
   333e8:	10022c16 	blt	r2,zero,33c9c <___vfiprintf_internal_r+0x10a0>
   333ec:	df001d83 	ldbu	fp,118(sp)
   333f0:	48007216 	blt	r9,zero,335bc <___vfiprintf_internal_r+0x9c0>
   333f4:	00ffdfc4 	movi	r3,-129
   333f8:	94c4b03a 	or	r2,r18,r19
   333fc:	a0e8703a 	and	r20,r20,r3
   33400:	1000cc26 	beq	r2,zero,33734 <___vfiprintf_internal_r+0xb38>
   33404:	98021026 	beq	r19,zero,33c48 <___vfiprintf_internal_r+0x104c>
   33408:	dc402415 	stw	r17,144(sp)
   3340c:	dc002515 	stw	r16,148(sp)
   33410:	9823883a 	mov	r17,r19
   33414:	9021883a 	mov	r16,r18
   33418:	dd401a04 	addi	r21,sp,104
   3341c:	4825883a 	mov	r18,r9
   33420:	4027883a 	mov	r19,r8
   33424:	8009883a 	mov	r4,r16
   33428:	880b883a 	mov	r5,r17
   3342c:	01800284 	movi	r6,10
   33430:	000f883a 	mov	r7,zero
   33434:	0034cb40 	call	34cb4 <__umoddi3>
   33438:	10800c04 	addi	r2,r2,48
   3343c:	ad7fffc4 	addi	r21,r21,-1
   33440:	8009883a 	mov	r4,r16
   33444:	880b883a 	mov	r5,r17
   33448:	a8800005 	stb	r2,0(r21)
   3344c:	01800284 	movi	r6,10
   33450:	000f883a 	mov	r7,zero
   33454:	003473c0 	call	3473c <__udivdi3>
   33458:	1021883a 	mov	r16,r2
   3345c:	10c4b03a 	or	r2,r2,r3
   33460:	1823883a 	mov	r17,r3
   33464:	103fef1e 	bne	r2,zero,33424 <___vfiprintf_internal_r+0x828>
   33468:	dc402417 	ldw	r17,144(sp)
   3346c:	dc002517 	ldw	r16,148(sp)
   33470:	9013883a 	mov	r9,r18
   33474:	9811883a 	mov	r8,r19
   33478:	da801e17 	ldw	r10,120(sp)
   3347c:	5567c83a 	sub	r19,r10,r21
   33480:	003ede06 	br	32ffc <___vfiprintf_internal_r+0x400>
   33484:	38803fcc 	andi	r2,r7,255
   33488:	1080201c 	xori	r2,r2,128
   3348c:	10bfe004 	addi	r2,r2,-128
   33490:	1002371e 	bne	r2,zero,33d70 <___vfiprintf_internal_r+0x1174>
   33494:	01000044 	movi	r4,1
   33498:	01c00804 	movi	r7,32
   3349c:	80c00007 	ldb	r3,0(r16)
   334a0:	003e3506 	br	32d78 <___vfiprintf_internal_r+0x17c>
   334a4:	a5000054 	ori	r20,r20,1
   334a8:	80c00007 	ldb	r3,0(r16)
   334ac:	003e3206 	br	32d78 <___vfiprintf_internal_r+0x17c>
   334b0:	a5002014 	ori	r20,r20,128
   334b4:	80c00007 	ldb	r3,0(r16)
   334b8:	003e2f06 	br	32d78 <___vfiprintf_internal_r+0x17c>
   334bc:	8015883a 	mov	r10,r16
   334c0:	0023883a 	mov	r17,zero
   334c4:	18bff404 	addi	r2,r3,-48
   334c8:	50c00007 	ldb	r3,0(r10)
   334cc:	8c4002a4 	muli	r17,r17,10
   334d0:	84000044 	addi	r16,r16,1
   334d4:	8015883a 	mov	r10,r16
   334d8:	1463883a 	add	r17,r2,r17
   334dc:	18bff404 	addi	r2,r3,-48
   334e0:	30bff92e 	bgeu	r6,r2,334c8 <___vfiprintf_internal_r+0x8cc>
   334e4:	003e2506 	br	32d7c <___vfiprintf_internal_r+0x180>
   334e8:	21003fcc 	andi	r4,r4,255
   334ec:	2002d41e 	bne	r4,zero,34040 <___vfiprintf_internal_r+0x1444>
   334f0:	a5000414 	ori	r20,r20,16
   334f4:	a080080c 	andi	r2,r20,32
   334f8:	103fb51e 	bne	r2,zero,333d0 <___vfiprintf_internal_r+0x7d4>
   334fc:	a080040c 	andi	r2,r20,16
   33500:	1001f826 	beq	r2,zero,33ce4 <___vfiprintf_internal_r+0x10e8>
   33504:	da802217 	ldw	r10,136(sp)
   33508:	54800017 	ldw	r18,0(r10)
   3350c:	52800104 	addi	r10,r10,4
   33510:	da802215 	stw	r10,136(sp)
   33514:	9027d7fa 	srai	r19,r18,31
   33518:	9805883a 	mov	r2,r19
   3351c:	003fb206 	br	333e8 <___vfiprintf_internal_r+0x7ec>
   33520:	21003fcc 	andi	r4,r4,255
   33524:	2002c41e 	bne	r4,zero,34038 <___vfiprintf_internal_r+0x143c>
   33528:	a5000414 	ori	r20,r20,16
   3352c:	a080080c 	andi	r2,r20,32
   33530:	103f5f1e 	bne	r2,zero,332b0 <___vfiprintf_internal_r+0x6b4>
   33534:	a080040c 	andi	r2,r20,16
   33538:	10020f26 	beq	r2,zero,33d78 <___vfiprintf_internal_r+0x117c>
   3353c:	da802217 	ldw	r10,136(sp)
   33540:	d8001d85 	stb	zero,118(sp)
   33544:	0027883a 	mov	r19,zero
   33548:	50800104 	addi	r2,r10,4
   3354c:	54800017 	ldw	r18,0(r10)
   33550:	48021116 	blt	r9,zero,33d98 <___vfiprintf_internal_r+0x119c>
   33554:	00ffdfc4 	movi	r3,-129
   33558:	d8802215 	stw	r2,136(sp)
   3355c:	a0e8703a 	and	r20,r20,r3
   33560:	903f5e1e 	bne	r18,zero,332dc <___vfiprintf_internal_r+0x6e0>
   33564:	0039883a 	mov	fp,zero
   33568:	4802a626 	beq	r9,zero,34004 <___vfiprintf_internal_r+0x1408>
   3356c:	0025883a 	mov	r18,zero
   33570:	0027883a 	mov	r19,zero
   33574:	003f5a06 	br	332e0 <___vfiprintf_internal_r+0x6e4>
   33578:	21003fcc 	andi	r4,r4,255
   3357c:	20029f1e 	bne	r4,zero,33ffc <___vfiprintf_internal_r+0x1400>
   33580:	a5000414 	ori	r20,r20,16
   33584:	a080080c 	andi	r2,r20,32
   33588:	10005e1e 	bne	r2,zero,33704 <___vfiprintf_internal_r+0xb08>
   3358c:	a080040c 	andi	r2,r20,16
   33590:	1001a21e 	bne	r2,zero,33c1c <___vfiprintf_internal_r+0x1020>
   33594:	a080100c 	andi	r2,r20,64
   33598:	d8001d85 	stb	zero,118(sp)
   3359c:	da802217 	ldw	r10,136(sp)
   335a0:	1002231e 	bne	r2,zero,33e30 <___vfiprintf_internal_r+0x1234>
   335a4:	50800104 	addi	r2,r10,4
   335a8:	54800017 	ldw	r18,0(r10)
   335ac:	0027883a 	mov	r19,zero
   335b0:	4801a00e 	bge	r9,zero,33c34 <___vfiprintf_internal_r+0x1038>
   335b4:	d8802215 	stw	r2,136(sp)
   335b8:	0039883a 	mov	fp,zero
   335bc:	94c4b03a 	or	r2,r18,r19
   335c0:	103f901e 	bne	r2,zero,33404 <___vfiprintf_internal_r+0x808>
   335c4:	00800044 	movi	r2,1
   335c8:	10803fcc 	andi	r2,r2,255
   335cc:	00c00044 	movi	r3,1
   335d0:	10c05926 	beq	r2,r3,33738 <___vfiprintf_internal_r+0xb3c>
   335d4:	00c00084 	movi	r3,2
   335d8:	10ffe41e 	bne	r2,r3,3356c <___vfiprintf_internal_r+0x970>
   335dc:	0025883a 	mov	r18,zero
   335e0:	0027883a 	mov	r19,zero
   335e4:	00013d06 	br	33adc <___vfiprintf_internal_r+0xee0>
   335e8:	21003fcc 	andi	r4,r4,255
   335ec:	2002811e 	bne	r4,zero,33ff4 <___vfiprintf_internal_r+0x13f8>
   335f0:	00800134 	movhi	r2,4
   335f4:	10a2a204 	addi	r2,r2,-30072
   335f8:	d8802615 	stw	r2,152(sp)
   335fc:	a080080c 	andi	r2,r20,32
   33600:	103f561e 	bne	r2,zero,3335c <___vfiprintf_internal_r+0x760>
   33604:	a080040c 	andi	r2,r20,16
   33608:	1001d126 	beq	r2,zero,33d50 <___vfiprintf_internal_r+0x1154>
   3360c:	da802217 	ldw	r10,136(sp)
   33610:	0027883a 	mov	r19,zero
   33614:	54800017 	ldw	r18,0(r10)
   33618:	52800104 	addi	r10,r10,4
   3361c:	da802215 	stw	r10,136(sp)
   33620:	003f5306 	br	33370 <___vfiprintf_internal_r+0x774>
   33624:	da802217 	ldw	r10,136(sp)
   33628:	d8001d85 	stb	zero,118(sp)
   3362c:	55400017 	ldw	r21,0(r10)
   33630:	50c00104 	addi	r3,r10,4
   33634:	a8024226 	beq	r21,zero,33f40 <___vfiprintf_internal_r+0x1344>
   33638:	48021816 	blt	r9,zero,33e9c <___vfiprintf_internal_r+0x12a0>
   3363c:	480d883a 	mov	r6,r9
   33640:	000b883a 	mov	r5,zero
   33644:	a809883a 	mov	r4,r21
   33648:	d8c02a15 	stw	r3,168(sp)
   3364c:	da002b15 	stw	r8,172(sp)
   33650:	da402c15 	stw	r9,176(sp)
   33654:	00310a40 	call	310a4 <memchr>
   33658:	d8c02a17 	ldw	r3,168(sp)
   3365c:	da002b17 	ldw	r8,172(sp)
   33660:	da402c17 	ldw	r9,176(sp)
   33664:	10024826 	beq	r2,zero,33f88 <___vfiprintf_internal_r+0x138c>
   33668:	1567c83a 	sub	r19,r2,r21
   3366c:	df001d83 	ldbu	fp,118(sp)
   33670:	d8c02215 	stw	r3,136(sp)
   33674:	0013883a 	mov	r9,zero
   33678:	003e6006 	br	32ffc <___vfiprintf_internal_r+0x400>
   3367c:	21003fcc 	andi	r4,r4,255
   33680:	203fc026 	beq	r4,zero,33584 <___vfiprintf_internal_r+0x988>
   33684:	d9c01d85 	stb	r7,118(sp)
   33688:	003fbe06 	br	33584 <___vfiprintf_internal_r+0x988>
   3368c:	da802217 	ldw	r10,136(sp)
   33690:	54400017 	ldw	r17,0(r10)
   33694:	50800104 	addi	r2,r10,4
   33698:	883e3b16 	blt	r17,zero,32f88 <___vfiprintf_internal_r+0x38c>
   3369c:	d8802215 	stw	r2,136(sp)
   336a0:	80c00007 	ldb	r3,0(r16)
   336a4:	003db406 	br	32d78 <___vfiprintf_internal_r+0x17c>
   336a8:	01000044 	movi	r4,1
   336ac:	01c00ac4 	movi	r7,43
   336b0:	80c00007 	ldb	r3,0(r16)
   336b4:	003db006 	br	32d78 <___vfiprintf_internal_r+0x17c>
   336b8:	80c00007 	ldb	r3,0(r16)
   336bc:	82800044 	addi	r10,r16,1
   336c0:	1b423c26 	beq	r3,r13,33fb4 <___vfiprintf_internal_r+0x13b8>
   336c4:	18bff404 	addi	r2,r3,-48
   336c8:	0013883a 	mov	r9,zero
   336cc:	30822b36 	bltu	r6,r2,33f7c <___vfiprintf_internal_r+0x1380>
   336d0:	50c00007 	ldb	r3,0(r10)
   336d4:	4a4002a4 	muli	r9,r9,10
   336d8:	54000044 	addi	r16,r10,1
   336dc:	8015883a 	mov	r10,r16
   336e0:	4893883a 	add	r9,r9,r2
   336e4:	18bff404 	addi	r2,r3,-48
   336e8:	30bff92e 	bgeu	r6,r2,336d0 <___vfiprintf_internal_r+0xad4>
   336ec:	483da30e 	bge	r9,zero,32d7c <___vfiprintf_internal_r+0x180>
   336f0:	027fffc4 	movi	r9,-1
   336f4:	003da106 	br	32d7c <___vfiprintf_internal_r+0x180>
   336f8:	a5001014 	ori	r20,r20,64
   336fc:	80c00007 	ldb	r3,0(r16)
   33700:	003d9d06 	br	32d78 <___vfiprintf_internal_r+0x17c>
   33704:	da802217 	ldw	r10,136(sp)
   33708:	d8001d85 	stb	zero,118(sp)
   3370c:	50c00204 	addi	r3,r10,8
   33710:	54800017 	ldw	r18,0(r10)
   33714:	54c00117 	ldw	r19,4(r10)
   33718:	4801ca16 	blt	r9,zero,33e44 <___vfiprintf_internal_r+0x1248>
   3371c:	013fdfc4 	movi	r4,-129
   33720:	94c4b03a 	or	r2,r18,r19
   33724:	d8c02215 	stw	r3,136(sp)
   33728:	a128703a 	and	r20,r20,r4
   3372c:	0039883a 	mov	fp,zero
   33730:	103f341e 	bne	r2,zero,33404 <___vfiprintf_internal_r+0x808>
   33734:	483e2e26 	beq	r9,zero,32ff0 <___vfiprintf_internal_r+0x3f4>
   33738:	0025883a 	mov	r18,zero
   3373c:	94800c04 	addi	r18,r18,48
   33740:	dc8019c5 	stb	r18,103(sp)
   33744:	dcc02717 	ldw	r19,156(sp)
   33748:	dd4019c4 	addi	r21,sp,103
   3374c:	003e2b06 	br	32ffc <___vfiprintf_internal_r+0x400>
   33750:	21003fcc 	andi	r4,r4,255
   33754:	2002361e 	bne	r4,zero,34030 <___vfiprintf_internal_r+0x1434>
   33758:	1801c126 	beq	r3,zero,33e60 <___vfiprintf_internal_r+0x1264>
   3375c:	04800044 	movi	r18,1
   33760:	d8c01005 	stb	r3,64(sp)
   33764:	d8001d85 	stb	zero,118(sp)
   33768:	9027883a 	mov	r19,r18
   3376c:	dd401004 	addi	r21,sp,64
   33770:	003f1106 	br	333b8 <___vfiprintf_internal_r+0x7bc>
   33774:	d9402117 	ldw	r5,132(sp)
   33778:	d9002017 	ldw	r4,128(sp)
   3377c:	d9801a04 	addi	r6,sp,104
   33780:	d9c02b15 	stw	r7,172(sp)
   33784:	dbc02a15 	stw	r15,168(sp)
   33788:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   3378c:	d9c02b17 	ldw	r7,172(sp)
   33790:	dbc02a17 	ldw	r15,168(sp)
   33794:	10006d1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33798:	d9801b17 	ldw	r6,108(sp)
   3379c:	d8801c17 	ldw	r2,112(sp)
   337a0:	d811883a 	mov	r8,sp
   337a4:	31400044 	addi	r5,r6,1
   337a8:	003e3306 	br	33078 <___vfiprintf_internal_r+0x47c>
   337ac:	d9401b17 	ldw	r5,108(sp)
   337b0:	d8801c17 	ldw	r2,112(sp)
   337b4:	29000044 	addi	r4,r5,1
   337b8:	d8c01d87 	ldb	r3,118(sp)
   337bc:	183e4d26 	beq	r3,zero,330f4 <___vfiprintf_internal_r+0x4f8>
   337c0:	00c00044 	movi	r3,1
   337c4:	d9401d84 	addi	r5,sp,118
   337c8:	10c5883a 	add	r2,r2,r3
   337cc:	41400015 	stw	r5,0(r8)
   337d0:	40c00115 	stw	r3,4(r8)
   337d4:	d8801c15 	stw	r2,112(sp)
   337d8:	d9001b15 	stw	r4,108(sp)
   337dc:	014001c4 	movi	r5,7
   337e0:	2900a90e 	bge	r5,r4,33a88 <___vfiprintf_internal_r+0xe8c>
   337e4:	1000da1e 	bne	r2,zero,33b50 <___vfiprintf_internal_r+0xf54>
   337e8:	7000ab1e 	bne	r14,zero,33a98 <___vfiprintf_internal_r+0xe9c>
   337ec:	000b883a 	mov	r5,zero
   337f0:	1809883a 	mov	r4,r3
   337f4:	d811883a 	mov	r8,sp
   337f8:	00c02004 	movi	r3,128
   337fc:	e0fe4d26 	beq	fp,r3,33134 <___vfiprintf_internal_r+0x538>
   33800:	4cf9c83a 	sub	fp,r9,r19
   33804:	073e7b0e 	bge	zero,fp,331f4 <___vfiprintf_internal_r+0x5f8>
   33808:	01c00404 	movi	r7,16
   3380c:	3f01900e 	bge	r7,fp,33e50 <___vfiprintf_internal_r+0x1254>
   33810:	00c00134 	movhi	r3,4
   33814:	18e3a704 	addi	r3,r3,-29028
   33818:	d8c02415 	stw	r3,144(sp)
   3381c:	034001c4 	movi	r13,7
   33820:	00000506 	br	33838 <___vfiprintf_internal_r+0xc3c>
   33824:	29000084 	addi	r4,r5,2
   33828:	42000204 	addi	r8,r8,8
   3382c:	180b883a 	mov	r5,r3
   33830:	e73ffc04 	addi	fp,fp,-16
   33834:	3f000d0e 	bge	r7,fp,3386c <___vfiprintf_internal_r+0xc70>
   33838:	10800404 	addi	r2,r2,16
   3383c:	28c00044 	addi	r3,r5,1
   33840:	45c00015 	stw	r23,0(r8)
   33844:	41c00115 	stw	r7,4(r8)
   33848:	d8801c15 	stw	r2,112(sp)
   3384c:	d8c01b15 	stw	r3,108(sp)
   33850:	68fff40e 	bge	r13,r3,33824 <___vfiprintf_internal_r+0xc28>
   33854:	1000101e 	bne	r2,zero,33898 <___vfiprintf_internal_r+0xc9c>
   33858:	e73ffc04 	addi	fp,fp,-16
   3385c:	01000044 	movi	r4,1
   33860:	000b883a 	mov	r5,zero
   33864:	d811883a 	mov	r8,sp
   33868:	3f3ff316 	blt	r7,fp,33838 <___vfiprintf_internal_r+0xc3c>
   3386c:	da802417 	ldw	r10,144(sp)
   33870:	1705883a 	add	r2,r2,fp
   33874:	47000115 	stw	fp,4(r8)
   33878:	42800015 	stw	r10,0(r8)
   3387c:	d8801c15 	stw	r2,112(sp)
   33880:	d9001b15 	stw	r4,108(sp)
   33884:	00c001c4 	movi	r3,7
   33888:	19003616 	blt	r3,r4,33964 <___vfiprintf_internal_r+0xd68>
   3388c:	42000204 	addi	r8,r8,8
   33890:	21000044 	addi	r4,r4,1
   33894:	003e5706 	br	331f4 <___vfiprintf_internal_r+0x5f8>
   33898:	d9402117 	ldw	r5,132(sp)
   3389c:	d9002017 	ldw	r4,128(sp)
   338a0:	d9801a04 	addi	r6,sp,104
   338a4:	d9c02b15 	stw	r7,172(sp)
   338a8:	db402a15 	stw	r13,168(sp)
   338ac:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   338b0:	d9c02b17 	ldw	r7,172(sp)
   338b4:	db402a17 	ldw	r13,168(sp)
   338b8:	1000241e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   338bc:	d9401b17 	ldw	r5,108(sp)
   338c0:	d8801c17 	ldw	r2,112(sp)
   338c4:	d811883a 	mov	r8,sp
   338c8:	29000044 	addi	r4,r5,1
   338cc:	003fd806 	br	33830 <___vfiprintf_internal_r+0xc34>
   338d0:	d9401b17 	ldw	r5,108(sp)
   338d4:	00c00134 	movhi	r3,4
   338d8:	18e3ab04 	addi	r3,r3,-29012
   338dc:	d8c02415 	stw	r3,144(sp)
   338e0:	29400044 	addi	r5,r5,1
   338e4:	d8c02417 	ldw	r3,144(sp)
   338e8:	14c5883a 	add	r2,r2,r19
   338ec:	44c00115 	stw	r19,4(r8)
   338f0:	40c00015 	stw	r3,0(r8)
   338f4:	d8801c15 	stw	r2,112(sp)
   338f8:	d9401b15 	stw	r5,108(sp)
   338fc:	00c001c4 	movi	r3,7
   33900:	1940070e 	bge	r3,r5,33920 <___vfiprintf_internal_r+0xd24>
   33904:	103e4826 	beq	r2,zero,33228 <___vfiprintf_internal_r+0x62c>
   33908:	d9402117 	ldw	r5,132(sp)
   3390c:	d9002017 	ldw	r4,128(sp)
   33910:	d9801a04 	addi	r6,sp,104
   33914:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33918:	10000c1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   3391c:	d8801c17 	ldw	r2,112(sp)
   33920:	8c80010e 	bge	r17,r18,33928 <___vfiprintf_internal_r+0xd2c>
   33924:	9023883a 	mov	r17,r18
   33928:	da802317 	ldw	r10,140(sp)
   3392c:	5455883a 	add	r10,r10,r17
   33930:	da802315 	stw	r10,140(sp)
   33934:	103e4126 	beq	r2,zero,3323c <___vfiprintf_internal_r+0x640>
   33938:	d9402117 	ldw	r5,132(sp)
   3393c:	d9002017 	ldw	r4,128(sp)
   33940:	d9801a04 	addi	r6,sp,104
   33944:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33948:	103e3c26 	beq	r2,zero,3323c <___vfiprintf_internal_r+0x640>
   3394c:	dd002117 	ldw	r20,132(sp)
   33950:	a080030b 	ldhu	r2,12(r20)
   33954:	1080100c 	andi	r2,r2,64
   33958:	1001231e 	bne	r2,zero,33de8 <___vfiprintf_internal_r+0x11ec>
   3395c:	d8802317 	ldw	r2,140(sp)
   33960:	003d7b06 	br	32f50 <___vfiprintf_internal_r+0x354>
   33964:	1000991e 	bne	r2,zero,33bcc <___vfiprintf_internal_r+0xfd0>
   33968:	00c00044 	movi	r3,1
   3396c:	9805883a 	mov	r2,r19
   33970:	dd400015 	stw	r21,0(sp)
   33974:	dcc00115 	stw	r19,4(sp)
   33978:	dcc01c15 	stw	r19,112(sp)
   3397c:	d8c01b15 	stw	r3,108(sp)
   33980:	d811883a 	mov	r8,sp
   33984:	42000204 	addi	r8,r8,8
   33988:	a2c0010c 	andi	r11,r20,4
   3398c:	583fe426 	beq	r11,zero,33920 <___vfiprintf_internal_r+0xd24>
   33990:	8ca7c83a 	sub	r19,r17,r18
   33994:	04ffe20e 	bge	zero,r19,33920 <___vfiprintf_internal_r+0xd24>
   33998:	01c00404 	movi	r7,16
   3399c:	3cffcc0e 	bge	r7,r19,338d0 <___vfiprintf_internal_r+0xcd4>
   339a0:	02800134 	movhi	r10,4
   339a4:	52a3ab04 	addi	r10,r10,-29012
   339a8:	d9001b17 	ldw	r4,108(sp)
   339ac:	da802415 	stw	r10,144(sp)
   339b0:	382b883a 	mov	r21,r7
   339b4:	050001c4 	movi	r20,7
   339b8:	df002017 	ldw	fp,128(sp)
   339bc:	00000506 	br	339d4 <___vfiprintf_internal_r+0xdd8>
   339c0:	21400084 	addi	r5,r4,2
   339c4:	42000204 	addi	r8,r8,8
   339c8:	1809883a 	mov	r4,r3
   339cc:	9cfffc04 	addi	r19,r19,-16
   339d0:	acffc40e 	bge	r21,r19,338e4 <___vfiprintf_internal_r+0xce8>
   339d4:	10800404 	addi	r2,r2,16
   339d8:	20c00044 	addi	r3,r4,1
   339dc:	45800015 	stw	r22,0(r8)
   339e0:	45400115 	stw	r21,4(r8)
   339e4:	d8801c15 	stw	r2,112(sp)
   339e8:	d8c01b15 	stw	r3,108(sp)
   339ec:	a0fff40e 	bge	r20,r3,339c0 <___vfiprintf_internal_r+0xdc4>
   339f0:	1000041e 	bne	r2,zero,33a04 <___vfiprintf_internal_r+0xe08>
   339f4:	01400044 	movi	r5,1
   339f8:	0009883a 	mov	r4,zero
   339fc:	d811883a 	mov	r8,sp
   33a00:	003ff206 	br	339cc <___vfiprintf_internal_r+0xdd0>
   33a04:	d9402117 	ldw	r5,132(sp)
   33a08:	d9801a04 	addi	r6,sp,104
   33a0c:	e009883a 	mov	r4,fp
   33a10:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33a14:	103fcd1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33a18:	d9001b17 	ldw	r4,108(sp)
   33a1c:	d8801c17 	ldw	r2,112(sp)
   33a20:	d811883a 	mov	r8,sp
   33a24:	21400044 	addi	r5,r4,1
   33a28:	003fe806 	br	339cc <___vfiprintf_internal_r+0xdd0>
   33a2c:	d9402117 	ldw	r5,132(sp)
   33a30:	d9002017 	ldw	r4,128(sp)
   33a34:	d9801a04 	addi	r6,sp,104
   33a38:	d9c02b15 	stw	r7,172(sp)
   33a3c:	db402a15 	stw	r13,168(sp)
   33a40:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33a44:	d9c02b17 	ldw	r7,172(sp)
   33a48:	db402a17 	ldw	r13,168(sp)
   33a4c:	103fbf1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33a50:	d9401b17 	ldw	r5,108(sp)
   33a54:	d8801c17 	ldw	r2,112(sp)
   33a58:	d811883a 	mov	r8,sp
   33a5c:	29800044 	addi	r6,r5,1
   33a60:	003dc406 	br	33174 <___vfiprintf_internal_r+0x578>
   33a64:	1000d21e 	bne	r2,zero,33db0 <___vfiprintf_internal_r+0x11b4>
   33a68:	d8c01d87 	ldb	r3,118(sp)
   33a6c:	18009526 	beq	r3,zero,33cc4 <___vfiprintf_internal_r+0x10c8>
   33a70:	00800044 	movi	r2,1
   33a74:	d8c01d84 	addi	r3,sp,118
   33a78:	1009883a 	mov	r4,r2
   33a7c:	d8c00015 	stw	r3,0(sp)
   33a80:	d8800115 	stw	r2,4(sp)
   33a84:	d811883a 	mov	r8,sp
   33a88:	200b883a 	mov	r5,r4
   33a8c:	42000204 	addi	r8,r8,8
   33a90:	21000044 	addi	r4,r4,1
   33a94:	003d9706 	br	330f4 <___vfiprintf_internal_r+0x4f8>
   33a98:	d9001d04 	addi	r4,sp,116
   33a9c:	00800084 	movi	r2,2
   33aa0:	d9000015 	stw	r4,0(sp)
   33aa4:	d8800115 	stw	r2,4(sp)
   33aa8:	1809883a 	mov	r4,r3
   33aac:	d811883a 	mov	r8,sp
   33ab0:	200b883a 	mov	r5,r4
   33ab4:	42000204 	addi	r8,r8,8
   33ab8:	21000044 	addi	r4,r4,1
   33abc:	003f4e06 	br	337f8 <___vfiprintf_internal_r+0xbfc>
   33ac0:	d8001d85 	stb	zero,118(sp)
   33ac4:	48005016 	blt	r9,zero,33c08 <___vfiprintf_internal_r+0x100c>
   33ac8:	00ffdfc4 	movi	r3,-129
   33acc:	94c4b03a 	or	r2,r18,r19
   33ad0:	a0e8703a 	and	r20,r20,r3
   33ad4:	103d4426 	beq	r2,zero,32fe8 <___vfiprintf_internal_r+0x3ec>
   33ad8:	0039883a 	mov	fp,zero
   33adc:	d9002617 	ldw	r4,152(sp)
   33ae0:	dd401a04 	addi	r21,sp,104
   33ae4:	908003cc 	andi	r2,r18,15
   33ae8:	9806973a 	slli	r3,r19,28
   33aec:	2085883a 	add	r2,r4,r2
   33af0:	9024d13a 	srli	r18,r18,4
   33af4:	10800003 	ldbu	r2,0(r2)
   33af8:	9826d13a 	srli	r19,r19,4
   33afc:	ad7fffc4 	addi	r21,r21,-1
   33b00:	1ca4b03a 	or	r18,r3,r18
   33b04:	a8800005 	stb	r2,0(r21)
   33b08:	94c4b03a 	or	r2,r18,r19
   33b0c:	103ff51e 	bne	r2,zero,33ae4 <___vfiprintf_internal_r+0xee8>
   33b10:	003e5906 	br	33478 <___vfiprintf_internal_r+0x87c>
   33b14:	d9402117 	ldw	r5,132(sp)
   33b18:	d9002017 	ldw	r4,128(sp)
   33b1c:	d9801a04 	addi	r6,sp,104
   33b20:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33b24:	103f891e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33b28:	d8801c17 	ldw	r2,112(sp)
   33b2c:	d811883a 	mov	r8,sp
   33b30:	003f9506 	br	33988 <___vfiprintf_internal_r+0xd8c>
   33b34:	d9402117 	ldw	r5,132(sp)
   33b38:	d9002017 	ldw	r4,128(sp)
   33b3c:	d9801a04 	addi	r6,sp,104
   33b40:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33b44:	103f811e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33b48:	d811883a 	mov	r8,sp
   33b4c:	003ced06 	br	32f04 <___vfiprintf_internal_r+0x308>
   33b50:	d9402117 	ldw	r5,132(sp)
   33b54:	d9002017 	ldw	r4,128(sp)
   33b58:	d9801a04 	addi	r6,sp,104
   33b5c:	da402c15 	stw	r9,176(sp)
   33b60:	db802a15 	stw	r14,168(sp)
   33b64:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33b68:	da402c17 	ldw	r9,176(sp)
   33b6c:	db802a17 	ldw	r14,168(sp)
   33b70:	103f761e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33b74:	d9401b17 	ldw	r5,108(sp)
   33b78:	d8801c17 	ldw	r2,112(sp)
   33b7c:	d811883a 	mov	r8,sp
   33b80:	29000044 	addi	r4,r5,1
   33b84:	003d5b06 	br	330f4 <___vfiprintf_internal_r+0x4f8>
   33b88:	d9402117 	ldw	r5,132(sp)
   33b8c:	d9002017 	ldw	r4,128(sp)
   33b90:	d9801a04 	addi	r6,sp,104
   33b94:	da402c15 	stw	r9,176(sp)
   33b98:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33b9c:	da402c17 	ldw	r9,176(sp)
   33ba0:	103f6a1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33ba4:	d9401b17 	ldw	r5,108(sp)
   33ba8:	d8801c17 	ldw	r2,112(sp)
   33bac:	d811883a 	mov	r8,sp
   33bb0:	29000044 	addi	r4,r5,1
   33bb4:	003f1006 	br	337f8 <___vfiprintf_internal_r+0xbfc>
   33bb8:	1000c31e 	bne	r2,zero,33ec8 <___vfiprintf_internal_r+0x12cc>
   33bbc:	01000044 	movi	r4,1
   33bc0:	000b883a 	mov	r5,zero
   33bc4:	d811883a 	mov	r8,sp
   33bc8:	003f0d06 	br	33800 <___vfiprintf_internal_r+0xc04>
   33bcc:	d9402117 	ldw	r5,132(sp)
   33bd0:	d9002017 	ldw	r4,128(sp)
   33bd4:	d9801a04 	addi	r6,sp,104
   33bd8:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33bdc:	103f5b1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33be0:	d9001b17 	ldw	r4,108(sp)
   33be4:	d8801c17 	ldw	r2,112(sp)
   33be8:	d811883a 	mov	r8,sp
   33bec:	21000044 	addi	r4,r4,1
   33bf0:	003d8006 	br	331f4 <___vfiprintf_internal_r+0x5f8>
   33bf4:	01000134 	movhi	r4,4
   33bf8:	2122a704 	addi	r4,r4,-30052
   33bfc:	d9002615 	stw	r4,152(sp)
   33c00:	d8c02215 	stw	r3,136(sp)
   33c04:	1029883a 	mov	r20,r2
   33c08:	94c4b03a 	or	r2,r18,r19
   33c0c:	103fb21e 	bne	r2,zero,33ad8 <___vfiprintf_internal_r+0xedc>
   33c10:	0039883a 	mov	fp,zero
   33c14:	00800084 	movi	r2,2
   33c18:	003e6b06 	br	335c8 <___vfiprintf_internal_r+0x9cc>
   33c1c:	da802217 	ldw	r10,136(sp)
   33c20:	d8001d85 	stb	zero,118(sp)
   33c24:	0027883a 	mov	r19,zero
   33c28:	50800104 	addi	r2,r10,4
   33c2c:	54800017 	ldw	r18,0(r10)
   33c30:	483e6016 	blt	r9,zero,335b4 <___vfiprintf_internal_r+0x9b8>
   33c34:	00ffdfc4 	movi	r3,-129
   33c38:	d8802215 	stw	r2,136(sp)
   33c3c:	a0e8703a 	and	r20,r20,r3
   33c40:	0039883a 	mov	fp,zero
   33c44:	903ebb26 	beq	r18,zero,33734 <___vfiprintf_internal_r+0xb38>
   33c48:	00800244 	movi	r2,9
   33c4c:	14bdee36 	bltu	r2,r18,33408 <___vfiprintf_internal_r+0x80c>
   33c50:	003eba06 	br	3373c <___vfiprintf_internal_r+0xb40>
   33c54:	00800c04 	movi	r2,48
   33c58:	d8c01d45 	stb	r3,117(sp)
   33c5c:	d8801d05 	stb	r2,116(sp)
   33c60:	d8001d85 	stb	zero,118(sp)
   33c64:	a0c00094 	ori	r3,r20,2
   33c68:	4800a916 	blt	r9,zero,33f10 <___vfiprintf_internal_r+0x1314>
   33c6c:	00bfdfc4 	movi	r2,-129
   33c70:	a096703a 	and	r11,r20,r2
   33c74:	5d000094 	ori	r20,r11,2
   33c78:	0039883a 	mov	fp,zero
   33c7c:	003f9706 	br	33adc <___vfiprintf_internal_r+0xee0>
   33c80:	8025883a 	mov	r18,r16
   33c84:	003c2e06 	br	32d40 <___vfiprintf_internal_r+0x144>
   33c88:	00800134 	movhi	r2,4
   33c8c:	10a2a704 	addi	r2,r2,-30052
   33c90:	0039883a 	mov	fp,zero
   33c94:	d8802615 	stw	r2,152(sp)
   33c98:	003f9006 	br	33adc <___vfiprintf_internal_r+0xee0>
   33c9c:	04a5c83a 	sub	r18,zero,r18
   33ca0:	07000b44 	movi	fp,45
   33ca4:	9004c03a 	cmpne	r2,r18,zero
   33ca8:	04e7c83a 	sub	r19,zero,r19
   33cac:	df001d85 	stb	fp,118(sp)
   33cb0:	98a7c83a 	sub	r19,r19,r2
   33cb4:	48009f16 	blt	r9,zero,33f34 <___vfiprintf_internal_r+0x1338>
   33cb8:	00bfdfc4 	movi	r2,-129
   33cbc:	a0a8703a 	and	r20,r20,r2
   33cc0:	003dd006 	br	33404 <___vfiprintf_internal_r+0x808>
   33cc4:	70004c26 	beq	r14,zero,33df8 <___vfiprintf_internal_r+0x11fc>
   33cc8:	00800084 	movi	r2,2
   33ccc:	d8c01d04 	addi	r3,sp,116
   33cd0:	d8c00015 	stw	r3,0(sp)
   33cd4:	d8800115 	stw	r2,4(sp)
   33cd8:	01000044 	movi	r4,1
   33cdc:	d811883a 	mov	r8,sp
   33ce0:	003f7306 	br	33ab0 <___vfiprintf_internal_r+0xeb4>
   33ce4:	a080100c 	andi	r2,r20,64
   33ce8:	da802217 	ldw	r10,136(sp)
   33cec:	103e0626 	beq	r2,zero,33508 <___vfiprintf_internal_r+0x90c>
   33cf0:	5480000f 	ldh	r18,0(r10)
   33cf4:	52800104 	addi	r10,r10,4
   33cf8:	da802215 	stw	r10,136(sp)
   33cfc:	9027d7fa 	srai	r19,r18,31
   33d00:	9805883a 	mov	r2,r19
   33d04:	003db806 	br	333e8 <___vfiprintf_internal_r+0x7ec>
   33d08:	a080040c 	andi	r2,r20,16
   33d0c:	1000091e 	bne	r2,zero,33d34 <___vfiprintf_internal_r+0x1138>
   33d10:	a2c0100c 	andi	r11,r20,64
   33d14:	58000726 	beq	r11,zero,33d34 <___vfiprintf_internal_r+0x1138>
   33d18:	da802217 	ldw	r10,136(sp)
   33d1c:	50800017 	ldw	r2,0(r10)
   33d20:	52800104 	addi	r10,r10,4
   33d24:	da802215 	stw	r10,136(sp)
   33d28:	da802317 	ldw	r10,140(sp)
   33d2c:	1280000d 	sth	r10,0(r2)
   33d30:	003be706 	br	32cd0 <___vfiprintf_internal_r+0xd4>
   33d34:	da802217 	ldw	r10,136(sp)
   33d38:	50800017 	ldw	r2,0(r10)
   33d3c:	52800104 	addi	r10,r10,4
   33d40:	da802215 	stw	r10,136(sp)
   33d44:	da802317 	ldw	r10,140(sp)
   33d48:	12800015 	stw	r10,0(r2)
   33d4c:	003be006 	br	32cd0 <___vfiprintf_internal_r+0xd4>
   33d50:	a080100c 	andi	r2,r20,64
   33d54:	da802217 	ldw	r10,136(sp)
   33d58:	10003026 	beq	r2,zero,33e1c <___vfiprintf_internal_r+0x1220>
   33d5c:	5480000b 	ldhu	r18,0(r10)
   33d60:	52800104 	addi	r10,r10,4
   33d64:	0027883a 	mov	r19,zero
   33d68:	da802215 	stw	r10,136(sp)
   33d6c:	003d8006 	br	33370 <___vfiprintf_internal_r+0x774>
   33d70:	80c00007 	ldb	r3,0(r16)
   33d74:	003c0006 	br	32d78 <___vfiprintf_internal_r+0x17c>
   33d78:	a080100c 	andi	r2,r20,64
   33d7c:	d8001d85 	stb	zero,118(sp)
   33d80:	da802217 	ldw	r10,136(sp)
   33d84:	1000201e 	bne	r2,zero,33e08 <___vfiprintf_internal_r+0x120c>
   33d88:	50800104 	addi	r2,r10,4
   33d8c:	54800017 	ldw	r18,0(r10)
   33d90:	0027883a 	mov	r19,zero
   33d94:	483def0e 	bge	r9,zero,33554 <___vfiprintf_internal_r+0x958>
   33d98:	94c6b03a 	or	r3,r18,r19
   33d9c:	d8802215 	stw	r2,136(sp)
   33da0:	183d4e1e 	bne	r3,zero,332dc <___vfiprintf_internal_r+0x6e0>
   33da4:	0039883a 	mov	fp,zero
   33da8:	0005883a 	mov	r2,zero
   33dac:	003e0606 	br	335c8 <___vfiprintf_internal_r+0x9cc>
   33db0:	d9402117 	ldw	r5,132(sp)
   33db4:	d9002017 	ldw	r4,128(sp)
   33db8:	d9801a04 	addi	r6,sp,104
   33dbc:	da402c15 	stw	r9,176(sp)
   33dc0:	db802a15 	stw	r14,168(sp)
   33dc4:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33dc8:	da402c17 	ldw	r9,176(sp)
   33dcc:	db802a17 	ldw	r14,168(sp)
   33dd0:	103ede1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33dd4:	d9401b17 	ldw	r5,108(sp)
   33dd8:	d8801c17 	ldw	r2,112(sp)
   33ddc:	d811883a 	mov	r8,sp
   33de0:	29000044 	addi	r4,r5,1
   33de4:	003e7406 	br	337b8 <___vfiprintf_internal_r+0xbbc>
   33de8:	00bfffc4 	movi	r2,-1
   33dec:	003c5806 	br	32f50 <___vfiprintf_internal_r+0x354>
   33df0:	d811883a 	mov	r8,sp
   33df4:	003ee806 	br	33998 <___vfiprintf_internal_r+0xd9c>
   33df8:	000b883a 	mov	r5,zero
   33dfc:	01000044 	movi	r4,1
   33e00:	d811883a 	mov	r8,sp
   33e04:	003e7c06 	br	337f8 <___vfiprintf_internal_r+0xbfc>
   33e08:	50800104 	addi	r2,r10,4
   33e0c:	5480000b 	ldhu	r18,0(r10)
   33e10:	0027883a 	mov	r19,zero
   33e14:	483dcf0e 	bge	r9,zero,33554 <___vfiprintf_internal_r+0x958>
   33e18:	003fdf06 	br	33d98 <___vfiprintf_internal_r+0x119c>
   33e1c:	54800017 	ldw	r18,0(r10)
   33e20:	52800104 	addi	r10,r10,4
   33e24:	0027883a 	mov	r19,zero
   33e28:	da802215 	stw	r10,136(sp)
   33e2c:	003d5006 	br	33370 <___vfiprintf_internal_r+0x774>
   33e30:	50800104 	addi	r2,r10,4
   33e34:	5480000b 	ldhu	r18,0(r10)
   33e38:	0027883a 	mov	r19,zero
   33e3c:	483f7d0e 	bge	r9,zero,33c34 <___vfiprintf_internal_r+0x1038>
   33e40:	003ddc06 	br	335b4 <___vfiprintf_internal_r+0x9b8>
   33e44:	d8c02215 	stw	r3,136(sp)
   33e48:	0039883a 	mov	fp,zero
   33e4c:	003ddb06 	br	335bc <___vfiprintf_internal_r+0x9c0>
   33e50:	02800134 	movhi	r10,4
   33e54:	52a3a704 	addi	r10,r10,-29028
   33e58:	da802415 	stw	r10,144(sp)
   33e5c:	003e8306 	br	3386c <___vfiprintf_internal_r+0xc70>
   33e60:	d8801c17 	ldw	r2,112(sp)
   33e64:	dd002117 	ldw	r20,132(sp)
   33e68:	103eb926 	beq	r2,zero,33950 <___vfiprintf_internal_r+0xd54>
   33e6c:	d9002017 	ldw	r4,128(sp)
   33e70:	d9801a04 	addi	r6,sp,104
   33e74:	a00b883a 	mov	r5,r20
   33e78:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33e7c:	003eb406 	br	33950 <___vfiprintf_internal_r+0xd54>
   33e80:	80c00043 	ldbu	r3,1(r16)
   33e84:	a5000814 	ori	r20,r20,32
   33e88:	84000044 	addi	r16,r16,1
   33e8c:	18c03fcc 	andi	r3,r3,255
   33e90:	18c0201c 	xori	r3,r3,128
   33e94:	18ffe004 	addi	r3,r3,-128
   33e98:	003bb706 	br	32d78 <___vfiprintf_internal_r+0x17c>
   33e9c:	a809883a 	mov	r4,r21
   33ea0:	d8c02a15 	stw	r3,168(sp)
   33ea4:	da002b15 	stw	r8,172(sp)
   33ea8:	002c6840 	call	2c684 <strlen>
   33eac:	d8c02a17 	ldw	r3,168(sp)
   33eb0:	1027883a 	mov	r19,r2
   33eb4:	df001d83 	ldbu	fp,118(sp)
   33eb8:	d8c02215 	stw	r3,136(sp)
   33ebc:	0013883a 	mov	r9,zero
   33ec0:	da002b17 	ldw	r8,172(sp)
   33ec4:	003c4d06 	br	32ffc <___vfiprintf_internal_r+0x400>
   33ec8:	d9402117 	ldw	r5,132(sp)
   33ecc:	d9002017 	ldw	r4,128(sp)
   33ed0:	d9801a04 	addi	r6,sp,104
   33ed4:	da402c15 	stw	r9,176(sp)
   33ed8:	0032ae80 	call	32ae8 <__sprint_r.part.0>
   33edc:	da402c17 	ldw	r9,176(sp)
   33ee0:	103e9a1e 	bne	r2,zero,3394c <___vfiprintf_internal_r+0xd50>
   33ee4:	d9401b17 	ldw	r5,108(sp)
   33ee8:	d8801c17 	ldw	r2,112(sp)
   33eec:	d811883a 	mov	r8,sp
   33ef0:	29000044 	addi	r4,r5,1
   33ef4:	003e4206 	br	33800 <___vfiprintf_internal_r+0xc04>
   33ef8:	d9401b17 	ldw	r5,108(sp)
   33efc:	01000134 	movhi	r4,4
   33f00:	2123ab04 	addi	r4,r4,-29012
   33f04:	d9002415 	stw	r4,144(sp)
   33f08:	29400044 	addi	r5,r5,1
   33f0c:	003c6d06 	br	330c4 <___vfiprintf_internal_r+0x4c8>
   33f10:	0039883a 	mov	fp,zero
   33f14:	00800084 	movi	r2,2
   33f18:	10803fcc 	andi	r2,r2,255
   33f1c:	01000044 	movi	r4,1
   33f20:	11001e26 	beq	r2,r4,33f9c <___vfiprintf_internal_r+0x13a0>
   33f24:	01000084 	movi	r4,2
   33f28:	11001e1e 	bne	r2,r4,33fa4 <___vfiprintf_internal_r+0x13a8>
   33f2c:	1829883a 	mov	r20,r3
   33f30:	003eea06 	br	33adc <___vfiprintf_internal_r+0xee0>
   33f34:	a007883a 	mov	r3,r20
   33f38:	00800044 	movi	r2,1
   33f3c:	003ff606 	br	33f18 <___vfiprintf_internal_r+0x131c>
   33f40:	00800184 	movi	r2,6
   33f44:	1240012e 	bgeu	r2,r9,33f4c <___vfiprintf_internal_r+0x1350>
   33f48:	1013883a 	mov	r9,r2
   33f4c:	4827883a 	mov	r19,r9
   33f50:	4825883a 	mov	r18,r9
   33f54:	48001516 	blt	r9,zero,33fac <___vfiprintf_internal_r+0x13b0>
   33f58:	05400134 	movhi	r21,4
   33f5c:	d8c02215 	stw	r3,136(sp)
   33f60:	ad62ac04 	addi	r21,r21,-30032
   33f64:	003d1406 	br	333b8 <___vfiprintf_internal_r+0x7bc>
   33f68:	02800134 	movhi	r10,4
   33f6c:	52a3a704 	addi	r10,r10,-29028
   33f70:	da802415 	stw	r10,144(sp)
   33f74:	200d883a 	mov	r6,r4
   33f78:	003c9106 	br	331c0 <___vfiprintf_internal_r+0x5c4>
   33f7c:	5021883a 	mov	r16,r10
   33f80:	0013883a 	mov	r9,zero
   33f84:	003b7d06 	br	32d7c <___vfiprintf_internal_r+0x180>
   33f88:	4827883a 	mov	r19,r9
   33f8c:	df001d83 	ldbu	fp,118(sp)
   33f90:	d8c02215 	stw	r3,136(sp)
   33f94:	0013883a 	mov	r9,zero
   33f98:	003c1806 	br	32ffc <___vfiprintf_internal_r+0x400>
   33f9c:	1829883a 	mov	r20,r3
   33fa0:	003d1806 	br	33404 <___vfiprintf_internal_r+0x808>
   33fa4:	1829883a 	mov	r20,r3
   33fa8:	003ccd06 	br	332e0 <___vfiprintf_internal_r+0x6e4>
   33fac:	0025883a 	mov	r18,zero
   33fb0:	003fe906 	br	33f58 <___vfiprintf_internal_r+0x135c>
   33fb4:	d8802217 	ldw	r2,136(sp)
   33fb8:	80c00043 	ldbu	r3,1(r16)
   33fbc:	5021883a 	mov	r16,r10
   33fc0:	12400017 	ldw	r9,0(r2)
   33fc4:	10800104 	addi	r2,r2,4
   33fc8:	d8802215 	stw	r2,136(sp)
   33fcc:	483faf0e 	bge	r9,zero,33e8c <___vfiprintf_internal_r+0x1290>
   33fd0:	18c03fcc 	andi	r3,r3,255
   33fd4:	18c0201c 	xori	r3,r3,128
   33fd8:	027fffc4 	movi	r9,-1
   33fdc:	18ffe004 	addi	r3,r3,-128
   33fe0:	003b6506 	br	32d78 <___vfiprintf_internal_r+0x17c>
   33fe4:	d9c01d85 	stb	r7,118(sp)
   33fe8:	003ca006 	br	3326c <___vfiprintf_internal_r+0x670>
   33fec:	d9c01d85 	stb	r7,118(sp)
   33ff0:	003cad06 	br	332a8 <___vfiprintf_internal_r+0x6ac>
   33ff4:	d9c01d85 	stb	r7,118(sp)
   33ff8:	003d7d06 	br	335f0 <___vfiprintf_internal_r+0x9f4>
   33ffc:	d9c01d85 	stb	r7,118(sp)
   34000:	003d5f06 	br	33580 <___vfiprintf_internal_r+0x984>
   34004:	a080004c 	andi	r2,r20,1
   34008:	0039883a 	mov	fp,zero
   3400c:	10000526 	beq	r2,zero,34024 <___vfiprintf_internal_r+0x1428>
   34010:	00800c04 	movi	r2,48
   34014:	d88019c5 	stb	r2,103(sp)
   34018:	dcc02717 	ldw	r19,156(sp)
   3401c:	dd4019c4 	addi	r21,sp,103
   34020:	003bf606 	br	32ffc <___vfiprintf_internal_r+0x400>
   34024:	0027883a 	mov	r19,zero
   34028:	dd401a04 	addi	r21,sp,104
   3402c:	003bf306 	br	32ffc <___vfiprintf_internal_r+0x400>
   34030:	d9c01d85 	stb	r7,118(sp)
   34034:	003dc806 	br	33758 <___vfiprintf_internal_r+0xb5c>
   34038:	d9c01d85 	stb	r7,118(sp)
   3403c:	003d3a06 	br	33528 <___vfiprintf_internal_r+0x92c>
   34040:	d9c01d85 	stb	r7,118(sp)
   34044:	003d2a06 	br	334f0 <___vfiprintf_internal_r+0x8f4>
   34048:	d9c01d85 	stb	r7,118(sp)
   3404c:	003cde06 	br	333c8 <___vfiprintf_internal_r+0x7cc>
   34050:	d9c01d85 	stb	r7,118(sp)
   34054:	003cbc06 	br	33348 <___vfiprintf_internal_r+0x74c>

00034058 <__vfiprintf_internal>:
   34058:	00800134 	movhi	r2,4
   3405c:	10ae9f04 	addi	r2,r2,-17796
   34060:	300f883a 	mov	r7,r6
   34064:	280d883a 	mov	r6,r5
   34068:	200b883a 	mov	r5,r4
   3406c:	11000017 	ldw	r4,0(r2)
   34070:	0032bfc1 	jmpi	32bfc <___vfiprintf_internal_r>

00034074 <__sbprintf>:
   34074:	2880030b 	ldhu	r2,12(r5)
   34078:	2ac01917 	ldw	r11,100(r5)
   3407c:	2a80038b 	ldhu	r10,14(r5)
   34080:	2a400717 	ldw	r9,28(r5)
   34084:	2a000917 	ldw	r8,36(r5)
   34088:	defee204 	addi	sp,sp,-1144
   3408c:	00c10004 	movi	r3,1024
   34090:	dc011a15 	stw	r16,1128(sp)
   34094:	10bfff4c 	andi	r2,r2,65533
   34098:	2821883a 	mov	r16,r5
   3409c:	d8cb883a 	add	r5,sp,r3
   340a0:	dc811c15 	stw	r18,1136(sp)
   340a4:	dc411b15 	stw	r17,1132(sp)
   340a8:	dfc11d15 	stw	ra,1140(sp)
   340ac:	2025883a 	mov	r18,r4
   340b0:	d881030d 	sth	r2,1036(sp)
   340b4:	dac11915 	stw	r11,1124(sp)
   340b8:	da81038d 	sth	r10,1038(sp)
   340bc:	da410715 	stw	r9,1052(sp)
   340c0:	da010915 	stw	r8,1060(sp)
   340c4:	dec10015 	stw	sp,1024(sp)
   340c8:	dec10415 	stw	sp,1040(sp)
   340cc:	d8c10215 	stw	r3,1032(sp)
   340d0:	d8c10515 	stw	r3,1044(sp)
   340d4:	d8010615 	stw	zero,1048(sp)
   340d8:	0032bfc0 	call	32bfc <___vfiprintf_internal_r>
   340dc:	1023883a 	mov	r17,r2
   340e0:	10000416 	blt	r2,zero,340f4 <__sbprintf+0x80>
   340e4:	d9410004 	addi	r5,sp,1024
   340e8:	9009883a 	mov	r4,r18
   340ec:	0029b880 	call	29b88 <_fflush_r>
   340f0:	10000d1e 	bne	r2,zero,34128 <__sbprintf+0xb4>
   340f4:	d881030b 	ldhu	r2,1036(sp)
   340f8:	1080100c 	andi	r2,r2,64
   340fc:	10000326 	beq	r2,zero,3410c <__sbprintf+0x98>
   34100:	8080030b 	ldhu	r2,12(r16)
   34104:	10801014 	ori	r2,r2,64
   34108:	8080030d 	sth	r2,12(r16)
   3410c:	8805883a 	mov	r2,r17
   34110:	dfc11d17 	ldw	ra,1140(sp)
   34114:	dc811c17 	ldw	r18,1136(sp)
   34118:	dc411b17 	ldw	r17,1132(sp)
   3411c:	dc011a17 	ldw	r16,1128(sp)
   34120:	dec11e04 	addi	sp,sp,1144
   34124:	f800283a 	ret
   34128:	047fffc4 	movi	r17,-1
   3412c:	003ff106 	br	340f4 <__sbprintf+0x80>

00034130 <__swbuf_r>:
   34130:	defffb04 	addi	sp,sp,-20
   34134:	dcc00315 	stw	r19,12(sp)
   34138:	dc800215 	stw	r18,8(sp)
   3413c:	dc000015 	stw	r16,0(sp)
   34140:	dfc00415 	stw	ra,16(sp)
   34144:	dc400115 	stw	r17,4(sp)
   34148:	2025883a 	mov	r18,r4
   3414c:	2827883a 	mov	r19,r5
   34150:	3021883a 	mov	r16,r6
   34154:	20000226 	beq	r4,zero,34160 <__swbuf_r+0x30>
   34158:	20800e17 	ldw	r2,56(r4)
   3415c:	10004226 	beq	r2,zero,34268 <__swbuf_r+0x138>
   34160:	80800617 	ldw	r2,24(r16)
   34164:	8100030b 	ldhu	r4,12(r16)
   34168:	80800215 	stw	r2,8(r16)
   3416c:	2080020c 	andi	r2,r4,8
   34170:	10003626 	beq	r2,zero,3424c <__swbuf_r+0x11c>
   34174:	80c00417 	ldw	r3,16(r16)
   34178:	18003426 	beq	r3,zero,3424c <__swbuf_r+0x11c>
   3417c:	2088000c 	andi	r2,r4,8192
   34180:	9c403fcc 	andi	r17,r19,255
   34184:	10001a26 	beq	r2,zero,341f0 <__swbuf_r+0xc0>
   34188:	80800017 	ldw	r2,0(r16)
   3418c:	81000517 	ldw	r4,20(r16)
   34190:	10c7c83a 	sub	r3,r2,r3
   34194:	1900200e 	bge	r3,r4,34218 <__swbuf_r+0xe8>
   34198:	18c00044 	addi	r3,r3,1
   3419c:	81000217 	ldw	r4,8(r16)
   341a0:	11400044 	addi	r5,r2,1
   341a4:	81400015 	stw	r5,0(r16)
   341a8:	213fffc4 	addi	r4,r4,-1
   341ac:	81000215 	stw	r4,8(r16)
   341b0:	14c00005 	stb	r19,0(r2)
   341b4:	80800517 	ldw	r2,20(r16)
   341b8:	10c01e26 	beq	r2,r3,34234 <__swbuf_r+0x104>
   341bc:	8080030b 	ldhu	r2,12(r16)
   341c0:	1080004c 	andi	r2,r2,1
   341c4:	10000226 	beq	r2,zero,341d0 <__swbuf_r+0xa0>
   341c8:	00800284 	movi	r2,10
   341cc:	88801926 	beq	r17,r2,34234 <__swbuf_r+0x104>
   341d0:	8805883a 	mov	r2,r17
   341d4:	dfc00417 	ldw	ra,16(sp)
   341d8:	dcc00317 	ldw	r19,12(sp)
   341dc:	dc800217 	ldw	r18,8(sp)
   341e0:	dc400117 	ldw	r17,4(sp)
   341e4:	dc000017 	ldw	r16,0(sp)
   341e8:	dec00504 	addi	sp,sp,20
   341ec:	f800283a 	ret
   341f0:	81401917 	ldw	r5,100(r16)
   341f4:	00b7ffc4 	movi	r2,-8193
   341f8:	21080014 	ori	r4,r4,8192
   341fc:	2884703a 	and	r2,r5,r2
   34200:	80801915 	stw	r2,100(r16)
   34204:	80800017 	ldw	r2,0(r16)
   34208:	8100030d 	sth	r4,12(r16)
   3420c:	81000517 	ldw	r4,20(r16)
   34210:	10c7c83a 	sub	r3,r2,r3
   34214:	193fe016 	blt	r3,r4,34198 <__swbuf_r+0x68>
   34218:	800b883a 	mov	r5,r16
   3421c:	9009883a 	mov	r4,r18
   34220:	0029b880 	call	29b88 <_fflush_r>
   34224:	1000071e 	bne	r2,zero,34244 <__swbuf_r+0x114>
   34228:	80800017 	ldw	r2,0(r16)
   3422c:	00c00044 	movi	r3,1
   34230:	003fda06 	br	3419c <__swbuf_r+0x6c>
   34234:	800b883a 	mov	r5,r16
   34238:	9009883a 	mov	r4,r18
   3423c:	0029b880 	call	29b88 <_fflush_r>
   34240:	103fe326 	beq	r2,zero,341d0 <__swbuf_r+0xa0>
   34244:	00bfffc4 	movi	r2,-1
   34248:	003fe206 	br	341d4 <__swbuf_r+0xa4>
   3424c:	800b883a 	mov	r5,r16
   34250:	9009883a 	mov	r4,r18
   34254:	002eca80 	call	2eca8 <__swsetup_r>
   34258:	103ffa1e 	bne	r2,zero,34244 <__swbuf_r+0x114>
   3425c:	8100030b 	ldhu	r4,12(r16)
   34260:	80c00417 	ldw	r3,16(r16)
   34264:	003fc506 	br	3417c <__swbuf_r+0x4c>
   34268:	0029f640 	call	29f64 <__sinit>
   3426c:	003fbc06 	br	34160 <__swbuf_r+0x30>

00034270 <__swbuf>:
   34270:	00800134 	movhi	r2,4
   34274:	10ae9f04 	addi	r2,r2,-17796
   34278:	280d883a 	mov	r6,r5
   3427c:	200b883a 	mov	r5,r4
   34280:	11000017 	ldw	r4,0(r2)
   34284:	00341301 	jmpi	34130 <__swbuf_r>

00034288 <_calloc_r>:
   34288:	298b383a 	mul	r5,r5,r6
   3428c:	defffe04 	addi	sp,sp,-8
   34290:	dfc00115 	stw	ra,4(sp)
   34294:	dc000015 	stw	r16,0(sp)
   34298:	002af340 	call	2af34 <_malloc_r>
   3429c:	10002926 	beq	r2,zero,34344 <_calloc_r+0xbc>
   342a0:	11bfff17 	ldw	r6,-4(r2)
   342a4:	1021883a 	mov	r16,r2
   342a8:	00bfff04 	movi	r2,-4
   342ac:	308c703a 	and	r6,r6,r2
   342b0:	00c00904 	movi	r3,36
   342b4:	308d883a 	add	r6,r6,r2
   342b8:	19801636 	bltu	r3,r6,34314 <_calloc_r+0x8c>
   342bc:	008004c4 	movi	r2,19
   342c0:	11800b2e 	bgeu	r2,r6,342f0 <_calloc_r+0x68>
   342c4:	80000015 	stw	zero,0(r16)
   342c8:	80000115 	stw	zero,4(r16)
   342cc:	008006c4 	movi	r2,27
   342d0:	11801a2e 	bgeu	r2,r6,3433c <_calloc_r+0xb4>
   342d4:	80000215 	stw	zero,8(r16)
   342d8:	80000315 	stw	zero,12(r16)
   342dc:	30c0151e 	bne	r6,r3,34334 <_calloc_r+0xac>
   342e0:	80000415 	stw	zero,16(r16)
   342e4:	80800604 	addi	r2,r16,24
   342e8:	80000515 	stw	zero,20(r16)
   342ec:	00000106 	br	342f4 <_calloc_r+0x6c>
   342f0:	8005883a 	mov	r2,r16
   342f4:	10000015 	stw	zero,0(r2)
   342f8:	10000115 	stw	zero,4(r2)
   342fc:	10000215 	stw	zero,8(r2)
   34300:	8005883a 	mov	r2,r16
   34304:	dfc00117 	ldw	ra,4(sp)
   34308:	dc000017 	ldw	r16,0(sp)
   3430c:	dec00204 	addi	sp,sp,8
   34310:	f800283a 	ret
   34314:	000b883a 	mov	r5,zero
   34318:	8009883a 	mov	r4,r16
   3431c:	002b8880 	call	2b888 <memset>
   34320:	8005883a 	mov	r2,r16
   34324:	dfc00117 	ldw	ra,4(sp)
   34328:	dc000017 	ldw	r16,0(sp)
   3432c:	dec00204 	addi	sp,sp,8
   34330:	f800283a 	ret
   34334:	80800404 	addi	r2,r16,16
   34338:	003fee06 	br	342f4 <_calloc_r+0x6c>
   3433c:	80800204 	addi	r2,r16,8
   34340:	003fec06 	br	342f4 <_calloc_r+0x6c>
   34344:	0005883a 	mov	r2,zero
   34348:	003fee06 	br	34304 <_calloc_r+0x7c>

0003434c <__fputwc>:
   3434c:	defff804 	addi	sp,sp,-32
   34350:	dcc00415 	stw	r19,16(sp)
   34354:	dc800315 	stw	r18,12(sp)
   34358:	dc000115 	stw	r16,4(sp)
   3435c:	dfc00715 	stw	ra,28(sp)
   34360:	dd400615 	stw	r21,24(sp)
   34364:	dd000515 	stw	r20,20(sp)
   34368:	dc400215 	stw	r17,8(sp)
   3436c:	2027883a 	mov	r19,r4
   34370:	2825883a 	mov	r18,r5
   34374:	3021883a 	mov	r16,r6
   34378:	0030ff00 	call	30ff0 <__locale_mb_cur_max>
   3437c:	00c00044 	movi	r3,1
   34380:	10c03e26 	beq	r2,r3,3447c <__fputwc+0x130>
   34384:	81c01704 	addi	r7,r16,92
   34388:	900d883a 	mov	r6,r18
   3438c:	d80b883a 	mov	r5,sp
   34390:	9809883a 	mov	r4,r19
   34394:	00345540 	call	34554 <_wcrtomb_r>
   34398:	1029883a 	mov	r20,r2
   3439c:	00bfffc4 	movi	r2,-1
   343a0:	a0802026 	beq	r20,r2,34424 <__fputwc+0xd8>
   343a4:	d9400003 	ldbu	r5,0(sp)
   343a8:	a0001c26 	beq	r20,zero,3441c <__fputwc+0xd0>
   343ac:	0023883a 	mov	r17,zero
   343b0:	05400284 	movi	r21,10
   343b4:	00000906 	br	343dc <__fputwc+0x90>
   343b8:	80800017 	ldw	r2,0(r16)
   343bc:	11400005 	stb	r5,0(r2)
   343c0:	80c00017 	ldw	r3,0(r16)
   343c4:	18c00044 	addi	r3,r3,1
   343c8:	80c00015 	stw	r3,0(r16)
   343cc:	8c400044 	addi	r17,r17,1
   343d0:	dc45883a 	add	r2,sp,r17
   343d4:	8d00112e 	bgeu	r17,r20,3441c <__fputwc+0xd0>
   343d8:	11400003 	ldbu	r5,0(r2)
   343dc:	80c00217 	ldw	r3,8(r16)
   343e0:	18ffffc4 	addi	r3,r3,-1
   343e4:	80c00215 	stw	r3,8(r16)
   343e8:	183ff30e 	bge	r3,zero,343b8 <__fputwc+0x6c>
   343ec:	80800617 	ldw	r2,24(r16)
   343f0:	18801916 	blt	r3,r2,34458 <__fputwc+0x10c>
   343f4:	80800017 	ldw	r2,0(r16)
   343f8:	11400005 	stb	r5,0(r2)
   343fc:	80800017 	ldw	r2,0(r16)
   34400:	10c00003 	ldbu	r3,0(r2)
   34404:	10800044 	addi	r2,r2,1
   34408:	1d402326 	beq	r3,r21,34498 <__fputwc+0x14c>
   3440c:	80800015 	stw	r2,0(r16)
   34410:	8c400044 	addi	r17,r17,1
   34414:	dc45883a 	add	r2,sp,r17
   34418:	8d3fef36 	bltu	r17,r20,343d8 <__fputwc+0x8c>
   3441c:	9005883a 	mov	r2,r18
   34420:	00000406 	br	34434 <__fputwc+0xe8>
   34424:	80c0030b 	ldhu	r3,12(r16)
   34428:	a005883a 	mov	r2,r20
   3442c:	18c01014 	ori	r3,r3,64
   34430:	80c0030d 	sth	r3,12(r16)
   34434:	dfc00717 	ldw	ra,28(sp)
   34438:	dd400617 	ldw	r21,24(sp)
   3443c:	dd000517 	ldw	r20,20(sp)
   34440:	dcc00417 	ldw	r19,16(sp)
   34444:	dc800317 	ldw	r18,12(sp)
   34448:	dc400217 	ldw	r17,8(sp)
   3444c:	dc000117 	ldw	r16,4(sp)
   34450:	dec00804 	addi	sp,sp,32
   34454:	f800283a 	ret
   34458:	800d883a 	mov	r6,r16
   3445c:	29403fcc 	andi	r5,r5,255
   34460:	9809883a 	mov	r4,r19
   34464:	00341300 	call	34130 <__swbuf_r>
   34468:	10bfffe0 	cmpeqi	r2,r2,-1
   3446c:	10803fcc 	andi	r2,r2,255
   34470:	103fd626 	beq	r2,zero,343cc <__fputwc+0x80>
   34474:	00bfffc4 	movi	r2,-1
   34478:	003fee06 	br	34434 <__fputwc+0xe8>
   3447c:	90ffffc4 	addi	r3,r18,-1
   34480:	01003f84 	movi	r4,254
   34484:	20ffbf36 	bltu	r4,r3,34384 <__fputwc+0x38>
   34488:	900b883a 	mov	r5,r18
   3448c:	dc800005 	stb	r18,0(sp)
   34490:	1029883a 	mov	r20,r2
   34494:	003fc506 	br	343ac <__fputwc+0x60>
   34498:	800d883a 	mov	r6,r16
   3449c:	a80b883a 	mov	r5,r21
   344a0:	9809883a 	mov	r4,r19
   344a4:	00341300 	call	34130 <__swbuf_r>
   344a8:	10bfffe0 	cmpeqi	r2,r2,-1
   344ac:	003fef06 	br	3446c <__fputwc+0x120>

000344b0 <_fputwc_r>:
   344b0:	3080030b 	ldhu	r2,12(r6)
   344b4:	10c8000c 	andi	r3,r2,8192
   344b8:	1800051e 	bne	r3,zero,344d0 <_fputwc_r+0x20>
   344bc:	30c01917 	ldw	r3,100(r6)
   344c0:	10880014 	ori	r2,r2,8192
   344c4:	3080030d 	sth	r2,12(r6)
   344c8:	18880014 	ori	r2,r3,8192
   344cc:	30801915 	stw	r2,100(r6)
   344d0:	003434c1 	jmpi	3434c <__fputwc>

000344d4 <fputwc>:
   344d4:	00800134 	movhi	r2,4
   344d8:	defffc04 	addi	sp,sp,-16
   344dc:	10ae9f04 	addi	r2,r2,-17796
   344e0:	dc000115 	stw	r16,4(sp)
   344e4:	14000017 	ldw	r16,0(r2)
   344e8:	dc400215 	stw	r17,8(sp)
   344ec:	dfc00315 	stw	ra,12(sp)
   344f0:	2023883a 	mov	r17,r4
   344f4:	80000226 	beq	r16,zero,34500 <fputwc+0x2c>
   344f8:	80800e17 	ldw	r2,56(r16)
   344fc:	10001026 	beq	r2,zero,34540 <fputwc+0x6c>
   34500:	2880030b 	ldhu	r2,12(r5)
   34504:	10c8000c 	andi	r3,r2,8192
   34508:	1800051e 	bne	r3,zero,34520 <fputwc+0x4c>
   3450c:	28c01917 	ldw	r3,100(r5)
   34510:	10880014 	ori	r2,r2,8192
   34514:	2880030d 	sth	r2,12(r5)
   34518:	18880014 	ori	r2,r3,8192
   3451c:	28801915 	stw	r2,100(r5)
   34520:	280d883a 	mov	r6,r5
   34524:	8009883a 	mov	r4,r16
   34528:	880b883a 	mov	r5,r17
   3452c:	dfc00317 	ldw	ra,12(sp)
   34530:	dc400217 	ldw	r17,8(sp)
   34534:	dc000117 	ldw	r16,4(sp)
   34538:	dec00404 	addi	sp,sp,16
   3453c:	003434c1 	jmpi	3434c <__fputwc>
   34540:	8009883a 	mov	r4,r16
   34544:	d9400015 	stw	r5,0(sp)
   34548:	0029f640 	call	29f64 <__sinit>
   3454c:	d9400017 	ldw	r5,0(sp)
   34550:	003feb06 	br	34500 <fputwc+0x2c>

00034554 <_wcrtomb_r>:
   34554:	defff604 	addi	sp,sp,-40
   34558:	00800134 	movhi	r2,4
   3455c:	dc800815 	stw	r18,32(sp)
   34560:	dc400715 	stw	r17,28(sp)
   34564:	dc000615 	stw	r16,24(sp)
   34568:	10aea404 	addi	r2,r2,-17776
   3456c:	dfc00915 	stw	ra,36(sp)
   34570:	2021883a 	mov	r16,r4
   34574:	3823883a 	mov	r17,r7
   34578:	14800017 	ldw	r18,0(r2)
   3457c:	28001426 	beq	r5,zero,345d0 <_wcrtomb_r+0x7c>
   34580:	d9400415 	stw	r5,16(sp)
   34584:	d9800515 	stw	r6,20(sp)
   34588:	0030fe40 	call	30fe4 <__locale_charset>
   3458c:	d9800517 	ldw	r6,20(sp)
   34590:	d9400417 	ldw	r5,16(sp)
   34594:	100f883a 	mov	r7,r2
   34598:	dc400015 	stw	r17,0(sp)
   3459c:	8009883a 	mov	r4,r16
   345a0:	903ee83a 	callr	r18
   345a4:	00ffffc4 	movi	r3,-1
   345a8:	10c0031e 	bne	r2,r3,345b8 <_wcrtomb_r+0x64>
   345ac:	88000015 	stw	zero,0(r17)
   345b0:	00c02284 	movi	r3,138
   345b4:	80c00015 	stw	r3,0(r16)
   345b8:	dfc00917 	ldw	ra,36(sp)
   345bc:	dc800817 	ldw	r18,32(sp)
   345c0:	dc400717 	ldw	r17,28(sp)
   345c4:	dc000617 	ldw	r16,24(sp)
   345c8:	dec00a04 	addi	sp,sp,40
   345cc:	f800283a 	ret
   345d0:	0030fe40 	call	30fe4 <__locale_charset>
   345d4:	100f883a 	mov	r7,r2
   345d8:	dc400015 	stw	r17,0(sp)
   345dc:	000d883a 	mov	r6,zero
   345e0:	d9400104 	addi	r5,sp,4
   345e4:	8009883a 	mov	r4,r16
   345e8:	903ee83a 	callr	r18
   345ec:	003fed06 	br	345a4 <_wcrtomb_r+0x50>

000345f0 <wcrtomb>:
   345f0:	defff604 	addi	sp,sp,-40
   345f4:	00800134 	movhi	r2,4
   345f8:	dc800615 	stw	r18,24(sp)
   345fc:	dc400515 	stw	r17,20(sp)
   34600:	10ae9f04 	addi	r2,r2,-17796
   34604:	dfc00915 	stw	ra,36(sp)
   34608:	dd000815 	stw	r20,32(sp)
   3460c:	dcc00715 	stw	r19,28(sp)
   34610:	dc000415 	stw	r16,16(sp)
   34614:	3025883a 	mov	r18,r6
   34618:	14400017 	ldw	r17,0(r2)
   3461c:	20001926 	beq	r4,zero,34684 <wcrtomb+0x94>
   34620:	00800134 	movhi	r2,4
   34624:	10aea404 	addi	r2,r2,-17776
   34628:	15000017 	ldw	r20,0(r2)
   3462c:	2021883a 	mov	r16,r4
   34630:	2827883a 	mov	r19,r5
   34634:	0030fe40 	call	30fe4 <__locale_charset>
   34638:	100f883a 	mov	r7,r2
   3463c:	dc800015 	stw	r18,0(sp)
   34640:	980d883a 	mov	r6,r19
   34644:	800b883a 	mov	r5,r16
   34648:	8809883a 	mov	r4,r17
   3464c:	a03ee83a 	callr	r20
   34650:	00ffffc4 	movi	r3,-1
   34654:	10c0031e 	bne	r2,r3,34664 <wcrtomb+0x74>
   34658:	90000015 	stw	zero,0(r18)
   3465c:	00c02284 	movi	r3,138
   34660:	88c00015 	stw	r3,0(r17)
   34664:	dfc00917 	ldw	ra,36(sp)
   34668:	dd000817 	ldw	r20,32(sp)
   3466c:	dcc00717 	ldw	r19,28(sp)
   34670:	dc800617 	ldw	r18,24(sp)
   34674:	dc400517 	ldw	r17,20(sp)
   34678:	dc000417 	ldw	r16,16(sp)
   3467c:	dec00a04 	addi	sp,sp,40
   34680:	f800283a 	ret
   34684:	00800134 	movhi	r2,4
   34688:	10aea404 	addi	r2,r2,-17776
   3468c:	14000017 	ldw	r16,0(r2)
   34690:	0030fe40 	call	30fe4 <__locale_charset>
   34694:	100f883a 	mov	r7,r2
   34698:	dc800015 	stw	r18,0(sp)
   3469c:	000d883a 	mov	r6,zero
   346a0:	d9400104 	addi	r5,sp,4
   346a4:	8809883a 	mov	r4,r17
   346a8:	803ee83a 	callr	r16
   346ac:	003fe806 	br	34650 <wcrtomb+0x60>

000346b0 <__ascii_wctomb>:
   346b0:	28000526 	beq	r5,zero,346c8 <__ascii_wctomb+0x18>
   346b4:	00803fc4 	movi	r2,255
   346b8:	11800536 	bltu	r2,r6,346d0 <__ascii_wctomb+0x20>
   346bc:	29800005 	stb	r6,0(r5)
   346c0:	00800044 	movi	r2,1
   346c4:	f800283a 	ret
   346c8:	0005883a 	mov	r2,zero
   346cc:	f800283a 	ret
   346d0:	00802284 	movi	r2,138
   346d4:	20800015 	stw	r2,0(r4)
   346d8:	00bfffc4 	movi	r2,-1
   346dc:	f800283a 	ret

000346e0 <_wctomb_r>:
   346e0:	00800134 	movhi	r2,4
   346e4:	defff904 	addi	sp,sp,-28
   346e8:	10aea404 	addi	r2,r2,-17776
   346ec:	dfc00615 	stw	ra,24(sp)
   346f0:	dc400515 	stw	r17,20(sp)
   346f4:	dc000415 	stw	r16,16(sp)
   346f8:	3823883a 	mov	r17,r7
   346fc:	14000017 	ldw	r16,0(r2)
   34700:	d9000115 	stw	r4,4(sp)
   34704:	d9400215 	stw	r5,8(sp)
   34708:	d9800315 	stw	r6,12(sp)
   3470c:	0030fe40 	call	30fe4 <__locale_charset>
   34710:	d9800317 	ldw	r6,12(sp)
   34714:	d9400217 	ldw	r5,8(sp)
   34718:	d9000117 	ldw	r4,4(sp)
   3471c:	100f883a 	mov	r7,r2
   34720:	dc400015 	stw	r17,0(sp)
   34724:	803ee83a 	callr	r16
   34728:	dfc00617 	ldw	ra,24(sp)
   3472c:	dc400517 	ldw	r17,20(sp)
   34730:	dc000417 	ldw	r16,16(sp)
   34734:	dec00704 	addi	sp,sp,28
   34738:	f800283a 	ret

0003473c <__udivdi3>:
   3473c:	defff504 	addi	sp,sp,-44
   34740:	dcc00415 	stw	r19,16(sp)
   34744:	dc000115 	stw	r16,4(sp)
   34748:	dfc00a15 	stw	ra,40(sp)
   3474c:	df000915 	stw	fp,36(sp)
   34750:	ddc00815 	stw	r23,32(sp)
   34754:	dd800715 	stw	r22,28(sp)
   34758:	dd400615 	stw	r21,24(sp)
   3475c:	dd000515 	stw	r20,20(sp)
   34760:	dc800315 	stw	r18,12(sp)
   34764:	dc400215 	stw	r17,8(sp)
   34768:	2027883a 	mov	r19,r4
   3476c:	2821883a 	mov	r16,r5
   34770:	3800411e 	bne	r7,zero,34878 <__udivdi3+0x13c>
   34774:	3023883a 	mov	r17,r6
   34778:	2025883a 	mov	r18,r4
   3477c:	2980522e 	bgeu	r5,r6,348c8 <__udivdi3+0x18c>
   34780:	00bfffd4 	movui	r2,65535
   34784:	282d883a 	mov	r22,r5
   34788:	1180a836 	bltu	r2,r6,34a2c <__udivdi3+0x2f0>
   3478c:	00803fc4 	movi	r2,255
   34790:	1185803a 	cmpltu	r2,r2,r6
   34794:	100490fa 	slli	r2,r2,3
   34798:	3086d83a 	srl	r3,r6,r2
   3479c:	01000134 	movhi	r4,4
   347a0:	21209b04 	addi	r4,r4,-32148
   347a4:	20c7883a 	add	r3,r4,r3
   347a8:	18c00003 	ldbu	r3,0(r3)
   347ac:	1885883a 	add	r2,r3,r2
   347b0:	00c00804 	movi	r3,32
   347b4:	1887c83a 	sub	r3,r3,r2
   347b8:	18000526 	beq	r3,zero,347d0 <__udivdi3+0x94>
   347bc:	80e0983a 	sll	r16,r16,r3
   347c0:	9884d83a 	srl	r2,r19,r2
   347c4:	30e2983a 	sll	r17,r6,r3
   347c8:	98e4983a 	sll	r18,r19,r3
   347cc:	142cb03a 	or	r22,r2,r16
   347d0:	882ad43a 	srli	r21,r17,16
   347d4:	b009883a 	mov	r4,r22
   347d8:	8d3fffcc 	andi	r20,r17,65535
   347dc:	a80b883a 	mov	r5,r21
   347e0:	0025b140 	call	25b14 <__umodsi3>
   347e4:	b009883a 	mov	r4,r22
   347e8:	a80b883a 	mov	r5,r21
   347ec:	1027883a 	mov	r19,r2
   347f0:	0025ab00 	call	25ab0 <__udivsi3>
   347f4:	102d883a 	mov	r22,r2
   347f8:	9826943a 	slli	r19,r19,16
   347fc:	9004d43a 	srli	r2,r18,16
   34800:	a5a1383a 	mul	r16,r20,r22
   34804:	14c4b03a 	or	r2,r2,r19
   34808:	1400052e 	bgeu	r2,r16,34820 <__udivdi3+0xe4>
   3480c:	1445883a 	add	r2,r2,r17
   34810:	b0ffffc4 	addi	r3,r22,-1
   34814:	14400136 	bltu	r2,r17,3481c <__udivdi3+0xe0>
   34818:	14012336 	bltu	r2,r16,34ca8 <__udivdi3+0x56c>
   3481c:	182d883a 	mov	r22,r3
   34820:	1421c83a 	sub	r16,r2,r16
   34824:	a80b883a 	mov	r5,r21
   34828:	8009883a 	mov	r4,r16
   3482c:	0025b140 	call	25b14 <__umodsi3>
   34830:	1027883a 	mov	r19,r2
   34834:	a80b883a 	mov	r5,r21
   34838:	8009883a 	mov	r4,r16
   3483c:	0025ab00 	call	25ab0 <__udivsi3>
   34840:	9826943a 	slli	r19,r19,16
   34844:	a0a9383a 	mul	r20,r20,r2
   34848:	94bfffcc 	andi	r18,r18,65535
   3484c:	94e4b03a 	or	r18,r18,r19
   34850:	9500052e 	bgeu	r18,r20,34868 <__udivdi3+0x12c>
   34854:	8ca5883a 	add	r18,r17,r18
   34858:	10ffffc4 	addi	r3,r2,-1
   3485c:	9440f136 	bltu	r18,r17,34c24 <__udivdi3+0x4e8>
   34860:	9500f02e 	bgeu	r18,r20,34c24 <__udivdi3+0x4e8>
   34864:	10bfff84 	addi	r2,r2,-2
   34868:	b00c943a 	slli	r6,r22,16
   3486c:	0007883a 	mov	r3,zero
   34870:	3084b03a 	or	r2,r6,r2
   34874:	00005906 	br	349dc <__udivdi3+0x2a0>
   34878:	29c05636 	bltu	r5,r7,349d4 <__udivdi3+0x298>
   3487c:	00bfffd4 	movui	r2,65535
   34880:	11c0622e 	bgeu	r2,r7,34a0c <__udivdi3+0x2d0>
   34884:	00804034 	movhi	r2,256
   34888:	10bfffc4 	addi	r2,r2,-1
   3488c:	11c0ee36 	bltu	r2,r7,34c48 <__udivdi3+0x50c>
   34890:	00800404 	movi	r2,16
   34894:	3886d83a 	srl	r3,r7,r2
   34898:	01000134 	movhi	r4,4
   3489c:	21209b04 	addi	r4,r4,-32148
   348a0:	20c7883a 	add	r3,r4,r3
   348a4:	18c00003 	ldbu	r3,0(r3)
   348a8:	05400804 	movi	r21,32
   348ac:	1885883a 	add	r2,r3,r2
   348b0:	a8abc83a 	sub	r21,r21,r2
   348b4:	a800621e 	bne	r21,zero,34a40 <__udivdi3+0x304>
   348b8:	3c00e936 	bltu	r7,r16,34c60 <__udivdi3+0x524>
   348bc:	9985403a 	cmpgeu	r2,r19,r6
   348c0:	0007883a 	mov	r3,zero
   348c4:	00004506 	br	349dc <__udivdi3+0x2a0>
   348c8:	3000041e 	bne	r6,zero,348dc <__udivdi3+0x1a0>
   348cc:	000b883a 	mov	r5,zero
   348d0:	01000044 	movi	r4,1
   348d4:	0025ab00 	call	25ab0 <__udivsi3>
   348d8:	1023883a 	mov	r17,r2
   348dc:	00bfffd4 	movui	r2,65535
   348e0:	14404e2e 	bgeu	r2,r17,34a1c <__udivdi3+0x2e0>
   348e4:	00804034 	movhi	r2,256
   348e8:	10bfffc4 	addi	r2,r2,-1
   348ec:	1440d836 	bltu	r2,r17,34c50 <__udivdi3+0x514>
   348f0:	00800404 	movi	r2,16
   348f4:	8886d83a 	srl	r3,r17,r2
   348f8:	01000134 	movhi	r4,4
   348fc:	21209b04 	addi	r4,r4,-32148
   34900:	20c7883a 	add	r3,r4,r3
   34904:	18c00003 	ldbu	r3,0(r3)
   34908:	1885883a 	add	r2,r3,r2
   3490c:	00c00804 	movi	r3,32
   34910:	1887c83a 	sub	r3,r3,r2
   34914:	18008f1e 	bne	r3,zero,34b54 <__udivdi3+0x418>
   34918:	882ad43a 	srli	r21,r17,16
   3491c:	8461c83a 	sub	r16,r16,r17
   34920:	8d3fffcc 	andi	r20,r17,65535
   34924:	00c00044 	movi	r3,1
   34928:	8009883a 	mov	r4,r16
   3492c:	a80b883a 	mov	r5,r21
   34930:	d8c00015 	stw	r3,0(sp)
   34934:	0025b140 	call	25b14 <__umodsi3>
   34938:	8009883a 	mov	r4,r16
   3493c:	a80b883a 	mov	r5,r21
   34940:	1027883a 	mov	r19,r2
   34944:	0025ab00 	call	25ab0 <__udivsi3>
   34948:	9826943a 	slli	r19,r19,16
   3494c:	9008d43a 	srli	r4,r18,16
   34950:	1521383a 	mul	r16,r2,r20
   34954:	102d883a 	mov	r22,r2
   34958:	24c8b03a 	or	r4,r4,r19
   3495c:	d8c00017 	ldw	r3,0(sp)
   34960:	2400052e 	bgeu	r4,r16,34978 <__udivdi3+0x23c>
   34964:	2449883a 	add	r4,r4,r17
   34968:	b0bfffc4 	addi	r2,r22,-1
   3496c:	24400136 	bltu	r4,r17,34974 <__udivdi3+0x238>
   34970:	2400ca36 	bltu	r4,r16,34c9c <__udivdi3+0x560>
   34974:	102d883a 	mov	r22,r2
   34978:	2421c83a 	sub	r16,r4,r16
   3497c:	a80b883a 	mov	r5,r21
   34980:	8009883a 	mov	r4,r16
   34984:	d8c00015 	stw	r3,0(sp)
   34988:	0025b140 	call	25b14 <__umodsi3>
   3498c:	1027883a 	mov	r19,r2
   34990:	a80b883a 	mov	r5,r21
   34994:	8009883a 	mov	r4,r16
   34998:	0025ab00 	call	25ab0 <__udivsi3>
   3499c:	9826943a 	slli	r19,r19,16
   349a0:	1529383a 	mul	r20,r2,r20
   349a4:	94bfffcc 	andi	r18,r18,65535
   349a8:	94e4b03a 	or	r18,r18,r19
   349ac:	d8c00017 	ldw	r3,0(sp)
   349b0:	9500052e 	bgeu	r18,r20,349c8 <__udivdi3+0x28c>
   349b4:	8ca5883a 	add	r18,r17,r18
   349b8:	113fffc4 	addi	r4,r2,-1
   349bc:	94409736 	bltu	r18,r17,34c1c <__udivdi3+0x4e0>
   349c0:	9500962e 	bgeu	r18,r20,34c1c <__udivdi3+0x4e0>
   349c4:	10bfff84 	addi	r2,r2,-2
   349c8:	b00c943a 	slli	r6,r22,16
   349cc:	3084b03a 	or	r2,r6,r2
   349d0:	00000206 	br	349dc <__udivdi3+0x2a0>
   349d4:	0007883a 	mov	r3,zero
   349d8:	0005883a 	mov	r2,zero
   349dc:	dfc00a17 	ldw	ra,40(sp)
   349e0:	df000917 	ldw	fp,36(sp)
   349e4:	ddc00817 	ldw	r23,32(sp)
   349e8:	dd800717 	ldw	r22,28(sp)
   349ec:	dd400617 	ldw	r21,24(sp)
   349f0:	dd000517 	ldw	r20,20(sp)
   349f4:	dcc00417 	ldw	r19,16(sp)
   349f8:	dc800317 	ldw	r18,12(sp)
   349fc:	dc400217 	ldw	r17,8(sp)
   34a00:	dc000117 	ldw	r16,4(sp)
   34a04:	dec00b04 	addi	sp,sp,44
   34a08:	f800283a 	ret
   34a0c:	00803fc4 	movi	r2,255
   34a10:	11c5803a 	cmpltu	r2,r2,r7
   34a14:	100490fa 	slli	r2,r2,3
   34a18:	003f9e06 	br	34894 <__udivdi3+0x158>
   34a1c:	00803fc4 	movi	r2,255
   34a20:	1445803a 	cmpltu	r2,r2,r17
   34a24:	100490fa 	slli	r2,r2,3
   34a28:	003fb206 	br	348f4 <__udivdi3+0x1b8>
   34a2c:	00804034 	movhi	r2,256
   34a30:	10bfffc4 	addi	r2,r2,-1
   34a34:	11808836 	bltu	r2,r6,34c58 <__udivdi3+0x51c>
   34a38:	00800404 	movi	r2,16
   34a3c:	003f5606 	br	34798 <__udivdi3+0x5c>
   34a40:	30aed83a 	srl	r23,r6,r2
   34a44:	3d4e983a 	sll	r7,r7,r21
   34a48:	80acd83a 	srl	r22,r16,r2
   34a4c:	9884d83a 	srl	r2,r19,r2
   34a50:	3deeb03a 	or	r23,r7,r23
   34a54:	b824d43a 	srli	r18,r23,16
   34a58:	8560983a 	sll	r16,r16,r21
   34a5c:	b009883a 	mov	r4,r22
   34a60:	900b883a 	mov	r5,r18
   34a64:	3568983a 	sll	r20,r6,r21
   34a68:	1420b03a 	or	r16,r2,r16
   34a6c:	0025b140 	call	25b14 <__umodsi3>
   34a70:	b009883a 	mov	r4,r22
   34a74:	900b883a 	mov	r5,r18
   34a78:	1023883a 	mov	r17,r2
   34a7c:	0025ab00 	call	25ab0 <__udivsi3>
   34a80:	8808943a 	slli	r4,r17,16
   34a84:	bf3fffcc 	andi	fp,r23,65535
   34a88:	8006d43a 	srli	r3,r16,16
   34a8c:	e0a3383a 	mul	r17,fp,r2
   34a90:	100d883a 	mov	r6,r2
   34a94:	1906b03a 	or	r3,r3,r4
   34a98:	1c40042e 	bgeu	r3,r17,34aac <__udivdi3+0x370>
   34a9c:	1dc7883a 	add	r3,r3,r23
   34aa0:	10bfffc4 	addi	r2,r2,-1
   34aa4:	1dc0752e 	bgeu	r3,r23,34c7c <__udivdi3+0x540>
   34aa8:	100d883a 	mov	r6,r2
   34aac:	1c63c83a 	sub	r17,r3,r17
   34ab0:	900b883a 	mov	r5,r18
   34ab4:	8809883a 	mov	r4,r17
   34ab8:	d9800015 	stw	r6,0(sp)
   34abc:	0025b140 	call	25b14 <__umodsi3>
   34ac0:	102d883a 	mov	r22,r2
   34ac4:	8809883a 	mov	r4,r17
   34ac8:	900b883a 	mov	r5,r18
   34acc:	0025ab00 	call	25ab0 <__udivsi3>
   34ad0:	b02c943a 	slli	r22,r22,16
   34ad4:	e089383a 	mul	r4,fp,r2
   34ad8:	843fffcc 	andi	r16,r16,65535
   34adc:	85a0b03a 	or	r16,r16,r22
   34ae0:	d9800017 	ldw	r6,0(sp)
   34ae4:	8100042e 	bgeu	r16,r4,34af8 <__udivdi3+0x3bc>
   34ae8:	85e1883a 	add	r16,r16,r23
   34aec:	10ffffc4 	addi	r3,r2,-1
   34af0:	85c05e2e 	bgeu	r16,r23,34c6c <__udivdi3+0x530>
   34af4:	1805883a 	mov	r2,r3
   34af8:	300c943a 	slli	r6,r6,16
   34afc:	a17fffcc 	andi	r5,r20,65535
   34b00:	a028d43a 	srli	r20,r20,16
   34b04:	3084b03a 	or	r2,r6,r2
   34b08:	10ffffcc 	andi	r3,r2,65535
   34b0c:	100cd43a 	srli	r6,r2,16
   34b10:	194f383a 	mul	r7,r3,r5
   34b14:	1d07383a 	mul	r3,r3,r20
   34b18:	314b383a 	mul	r5,r6,r5
   34b1c:	3810d43a 	srli	r8,r7,16
   34b20:	8121c83a 	sub	r16,r16,r4
   34b24:	1947883a 	add	r3,r3,r5
   34b28:	40c7883a 	add	r3,r8,r3
   34b2c:	350d383a 	mul	r6,r6,r20
   34b30:	1940022e 	bgeu	r3,r5,34b3c <__udivdi3+0x400>
   34b34:	01000074 	movhi	r4,1
   34b38:	310d883a 	add	r6,r6,r4
   34b3c:	1828d43a 	srli	r20,r3,16
   34b40:	a18d883a 	add	r6,r20,r6
   34b44:	81803e36 	bltu	r16,r6,34c40 <__udivdi3+0x504>
   34b48:	81803826 	beq	r16,r6,34c2c <__udivdi3+0x4f0>
   34b4c:	0007883a 	mov	r3,zero
   34b50:	003fa206 	br	349dc <__udivdi3+0x2a0>
   34b54:	88e2983a 	sll	r17,r17,r3
   34b58:	80a8d83a 	srl	r20,r16,r2
   34b5c:	80e0983a 	sll	r16,r16,r3
   34b60:	882ad43a 	srli	r21,r17,16
   34b64:	9884d83a 	srl	r2,r19,r2
   34b68:	a009883a 	mov	r4,r20
   34b6c:	a80b883a 	mov	r5,r21
   34b70:	142eb03a 	or	r23,r2,r16
   34b74:	98e4983a 	sll	r18,r19,r3
   34b78:	0025b140 	call	25b14 <__umodsi3>
   34b7c:	a009883a 	mov	r4,r20
   34b80:	a80b883a 	mov	r5,r21
   34b84:	1021883a 	mov	r16,r2
   34b88:	0025ab00 	call	25ab0 <__udivsi3>
   34b8c:	1039883a 	mov	fp,r2
   34b90:	8d3fffcc 	andi	r20,r17,65535
   34b94:	8020943a 	slli	r16,r16,16
   34b98:	b804d43a 	srli	r2,r23,16
   34b9c:	a72d383a 	mul	r22,r20,fp
   34ba0:	1404b03a 	or	r2,r2,r16
   34ba4:	1580062e 	bgeu	r2,r22,34bc0 <__udivdi3+0x484>
   34ba8:	1445883a 	add	r2,r2,r17
   34bac:	e0ffffc4 	addi	r3,fp,-1
   34bb0:	14403836 	bltu	r2,r17,34c94 <__udivdi3+0x558>
   34bb4:	1580372e 	bgeu	r2,r22,34c94 <__udivdi3+0x558>
   34bb8:	e73fff84 	addi	fp,fp,-2
   34bbc:	1445883a 	add	r2,r2,r17
   34bc0:	15adc83a 	sub	r22,r2,r22
   34bc4:	a80b883a 	mov	r5,r21
   34bc8:	b009883a 	mov	r4,r22
   34bcc:	0025b140 	call	25b14 <__umodsi3>
   34bd0:	1027883a 	mov	r19,r2
   34bd4:	b009883a 	mov	r4,r22
   34bd8:	a80b883a 	mov	r5,r21
   34bdc:	0025ab00 	call	25ab0 <__udivsi3>
   34be0:	9826943a 	slli	r19,r19,16
   34be4:	a0a1383a 	mul	r16,r20,r2
   34be8:	b93fffcc 	andi	r4,r23,65535
   34bec:	24c8b03a 	or	r4,r4,r19
   34bf0:	2400062e 	bgeu	r4,r16,34c0c <__udivdi3+0x4d0>
   34bf4:	2449883a 	add	r4,r4,r17
   34bf8:	10ffffc4 	addi	r3,r2,-1
   34bfc:	24402336 	bltu	r4,r17,34c8c <__udivdi3+0x550>
   34c00:	2400222e 	bgeu	r4,r16,34c8c <__udivdi3+0x550>
   34c04:	10bfff84 	addi	r2,r2,-2
   34c08:	2449883a 	add	r4,r4,r17
   34c0c:	e038943a 	slli	fp,fp,16
   34c10:	2421c83a 	sub	r16,r4,r16
   34c14:	e086b03a 	or	r3,fp,r2
   34c18:	003f4306 	br	34928 <__udivdi3+0x1ec>
   34c1c:	2005883a 	mov	r2,r4
   34c20:	003f6906 	br	349c8 <__udivdi3+0x28c>
   34c24:	1805883a 	mov	r2,r3
   34c28:	003f0f06 	br	34868 <__udivdi3+0x12c>
   34c2c:	1806943a 	slli	r3,r3,16
   34c30:	9d66983a 	sll	r19,r19,r21
   34c34:	39ffffcc 	andi	r7,r7,65535
   34c38:	19c7883a 	add	r3,r3,r7
   34c3c:	98ffc32e 	bgeu	r19,r3,34b4c <__udivdi3+0x410>
   34c40:	10bfffc4 	addi	r2,r2,-1
   34c44:	003fc106 	br	34b4c <__udivdi3+0x410>
   34c48:	00800604 	movi	r2,24
   34c4c:	003f1106 	br	34894 <__udivdi3+0x158>
   34c50:	00800604 	movi	r2,24
   34c54:	003f2706 	br	348f4 <__udivdi3+0x1b8>
   34c58:	00800604 	movi	r2,24
   34c5c:	003ece06 	br	34798 <__udivdi3+0x5c>
   34c60:	0007883a 	mov	r3,zero
   34c64:	00800044 	movi	r2,1
   34c68:	003f5c06 	br	349dc <__udivdi3+0x2a0>
   34c6c:	813fa12e 	bgeu	r16,r4,34af4 <__udivdi3+0x3b8>
   34c70:	10bfff84 	addi	r2,r2,-2
   34c74:	85e1883a 	add	r16,r16,r23
   34c78:	003f9f06 	br	34af8 <__udivdi3+0x3bc>
   34c7c:	1c7f8a2e 	bgeu	r3,r17,34aa8 <__udivdi3+0x36c>
   34c80:	31bfff84 	addi	r6,r6,-2
   34c84:	1dc7883a 	add	r3,r3,r23
   34c88:	003f8806 	br	34aac <__udivdi3+0x370>
   34c8c:	1805883a 	mov	r2,r3
   34c90:	003fde06 	br	34c0c <__udivdi3+0x4d0>
   34c94:	1839883a 	mov	fp,r3
   34c98:	003fc906 	br	34bc0 <__udivdi3+0x484>
   34c9c:	b5bfff84 	addi	r22,r22,-2
   34ca0:	2449883a 	add	r4,r4,r17
   34ca4:	003f3406 	br	34978 <__udivdi3+0x23c>
   34ca8:	b5bfff84 	addi	r22,r22,-2
   34cac:	1445883a 	add	r2,r2,r17
   34cb0:	003edb06 	br	34820 <__udivdi3+0xe4>

00034cb4 <__umoddi3>:
   34cb4:	defff404 	addi	sp,sp,-48
   34cb8:	df000a15 	stw	fp,40(sp)
   34cbc:	dc400315 	stw	r17,12(sp)
   34cc0:	dc000215 	stw	r16,8(sp)
   34cc4:	dfc00b15 	stw	ra,44(sp)
   34cc8:	ddc00915 	stw	r23,36(sp)
   34ccc:	dd800815 	stw	r22,32(sp)
   34cd0:	dd400715 	stw	r21,28(sp)
   34cd4:	dd000615 	stw	r20,24(sp)
   34cd8:	dcc00515 	stw	r19,20(sp)
   34cdc:	dc800415 	stw	r18,16(sp)
   34ce0:	2021883a 	mov	r16,r4
   34ce4:	2823883a 	mov	r17,r5
   34ce8:	2839883a 	mov	fp,r5
   34cec:	38003c1e 	bne	r7,zero,34de0 <__umoddi3+0x12c>
   34cf0:	3027883a 	mov	r19,r6
   34cf4:	2029883a 	mov	r20,r4
   34cf8:	2980512e 	bgeu	r5,r6,34e40 <__umoddi3+0x18c>
   34cfc:	00bfffd4 	movui	r2,65535
   34d00:	11809a36 	bltu	r2,r6,34f6c <__umoddi3+0x2b8>
   34d04:	01003fc4 	movi	r4,255
   34d08:	2189803a 	cmpltu	r4,r4,r6
   34d0c:	200890fa 	slli	r4,r4,3
   34d10:	3104d83a 	srl	r2,r6,r4
   34d14:	00c00134 	movhi	r3,4
   34d18:	18e09b04 	addi	r3,r3,-32148
   34d1c:	1885883a 	add	r2,r3,r2
   34d20:	10c00003 	ldbu	r3,0(r2)
   34d24:	00800804 	movi	r2,32
   34d28:	1909883a 	add	r4,r3,r4
   34d2c:	1125c83a 	sub	r18,r2,r4
   34d30:	90000526 	beq	r18,zero,34d48 <__umoddi3+0x94>
   34d34:	8ca2983a 	sll	r17,r17,r18
   34d38:	8108d83a 	srl	r4,r16,r4
   34d3c:	34a6983a 	sll	r19,r6,r18
   34d40:	84a8983a 	sll	r20,r16,r18
   34d44:	2478b03a 	or	fp,r4,r17
   34d48:	982ed43a 	srli	r23,r19,16
   34d4c:	e009883a 	mov	r4,fp
   34d50:	9dbfffcc 	andi	r22,r19,65535
   34d54:	b80b883a 	mov	r5,r23
   34d58:	0025b140 	call	25b14 <__umodsi3>
   34d5c:	e009883a 	mov	r4,fp
   34d60:	b80b883a 	mov	r5,r23
   34d64:	102b883a 	mov	r21,r2
   34d68:	0025ab00 	call	25ab0 <__udivsi3>
   34d6c:	a806943a 	slli	r3,r21,16
   34d70:	a008d43a 	srli	r4,r20,16
   34d74:	b085383a 	mul	r2,r22,r2
   34d78:	20c8b03a 	or	r4,r4,r3
   34d7c:	2080032e 	bgeu	r4,r2,34d8c <__umoddi3+0xd8>
   34d80:	24c9883a 	add	r4,r4,r19
   34d84:	24c00136 	bltu	r4,r19,34d8c <__umoddi3+0xd8>
   34d88:	20811036 	bltu	r4,r2,351cc <__umoddi3+0x518>
   34d8c:	20abc83a 	sub	r21,r4,r2
   34d90:	b80b883a 	mov	r5,r23
   34d94:	a809883a 	mov	r4,r21
   34d98:	0025b140 	call	25b14 <__umodsi3>
   34d9c:	1023883a 	mov	r17,r2
   34da0:	b80b883a 	mov	r5,r23
   34da4:	a809883a 	mov	r4,r21
   34da8:	0025ab00 	call	25ab0 <__udivsi3>
   34dac:	8822943a 	slli	r17,r17,16
   34db0:	b085383a 	mul	r2,r22,r2
   34db4:	a0ffffcc 	andi	r3,r20,65535
   34db8:	1c46b03a 	or	r3,r3,r17
   34dbc:	1880042e 	bgeu	r3,r2,34dd0 <__umoddi3+0x11c>
   34dc0:	1cc7883a 	add	r3,r3,r19
   34dc4:	1cc00236 	bltu	r3,r19,34dd0 <__umoddi3+0x11c>
   34dc8:	1880012e 	bgeu	r3,r2,34dd0 <__umoddi3+0x11c>
   34dcc:	1cc7883a 	add	r3,r3,r19
   34dd0:	1885c83a 	sub	r2,r3,r2
   34dd4:	1484d83a 	srl	r2,r2,r18
   34dd8:	0007883a 	mov	r3,zero
   34ddc:	00004f06 	br	34f1c <__umoddi3+0x268>
   34de0:	29c04c36 	bltu	r5,r7,34f14 <__umoddi3+0x260>
   34de4:	00bfffd4 	movui	r2,65535
   34de8:	11c0582e 	bgeu	r2,r7,34f4c <__umoddi3+0x298>
   34dec:	00804034 	movhi	r2,256
   34df0:	10bfffc4 	addi	r2,r2,-1
   34df4:	11c0e736 	bltu	r2,r7,35194 <__umoddi3+0x4e0>
   34df8:	01000404 	movi	r4,16
   34dfc:	3904d83a 	srl	r2,r7,r4
   34e00:	00c00134 	movhi	r3,4
   34e04:	18e09b04 	addi	r3,r3,-32148
   34e08:	1885883a 	add	r2,r3,r2
   34e0c:	14c00003 	ldbu	r19,0(r2)
   34e10:	00c00804 	movi	r3,32
   34e14:	9927883a 	add	r19,r19,r4
   34e18:	1ce9c83a 	sub	r20,r3,r19
   34e1c:	a000581e 	bne	r20,zero,34f80 <__umoddi3+0x2cc>
   34e20:	3c400136 	bltu	r7,r17,34e28 <__umoddi3+0x174>
   34e24:	8180eb36 	bltu	r16,r6,351d4 <__umoddi3+0x520>
   34e28:	8185c83a 	sub	r2,r16,r6
   34e2c:	89e3c83a 	sub	r17,r17,r7
   34e30:	8089803a 	cmpltu	r4,r16,r2
   34e34:	8939c83a 	sub	fp,r17,r4
   34e38:	e007883a 	mov	r3,fp
   34e3c:	00003706 	br	34f1c <__umoddi3+0x268>
   34e40:	3000041e 	bne	r6,zero,34e54 <__umoddi3+0x1a0>
   34e44:	000b883a 	mov	r5,zero
   34e48:	01000044 	movi	r4,1
   34e4c:	0025ab00 	call	25ab0 <__udivsi3>
   34e50:	1027883a 	mov	r19,r2
   34e54:	00bfffd4 	movui	r2,65535
   34e58:	14c0402e 	bgeu	r2,r19,34f5c <__umoddi3+0x2a8>
   34e5c:	00804034 	movhi	r2,256
   34e60:	10bfffc4 	addi	r2,r2,-1
   34e64:	14c0cd36 	bltu	r2,r19,3519c <__umoddi3+0x4e8>
   34e68:	00800404 	movi	r2,16
   34e6c:	9886d83a 	srl	r3,r19,r2
   34e70:	01000134 	movhi	r4,4
   34e74:	21209b04 	addi	r4,r4,-32148
   34e78:	20c7883a 	add	r3,r4,r3
   34e7c:	18c00003 	ldbu	r3,0(r3)
   34e80:	1887883a 	add	r3,r3,r2
   34e84:	00800804 	movi	r2,32
   34e88:	10e5c83a 	sub	r18,r2,r3
   34e8c:	9000901e 	bne	r18,zero,350d0 <__umoddi3+0x41c>
   34e90:	982cd43a 	srli	r22,r19,16
   34e94:	8ce3c83a 	sub	r17,r17,r19
   34e98:	9d7fffcc 	andi	r21,r19,65535
   34e9c:	b00b883a 	mov	r5,r22
   34ea0:	8809883a 	mov	r4,r17
   34ea4:	0025b140 	call	25b14 <__umodsi3>
   34ea8:	8809883a 	mov	r4,r17
   34eac:	b00b883a 	mov	r5,r22
   34eb0:	1021883a 	mov	r16,r2
   34eb4:	0025ab00 	call	25ab0 <__udivsi3>
   34eb8:	8006943a 	slli	r3,r16,16
   34ebc:	a008d43a 	srli	r4,r20,16
   34ec0:	1545383a 	mul	r2,r2,r21
   34ec4:	20c8b03a 	or	r4,r4,r3
   34ec8:	2080042e 	bgeu	r4,r2,34edc <__umoddi3+0x228>
   34ecc:	24c9883a 	add	r4,r4,r19
   34ed0:	24c00236 	bltu	r4,r19,34edc <__umoddi3+0x228>
   34ed4:	2080012e 	bgeu	r4,r2,34edc <__umoddi3+0x228>
   34ed8:	24c9883a 	add	r4,r4,r19
   34edc:	20a1c83a 	sub	r16,r4,r2
   34ee0:	b00b883a 	mov	r5,r22
   34ee4:	8009883a 	mov	r4,r16
   34ee8:	0025b140 	call	25b14 <__umodsi3>
   34eec:	1023883a 	mov	r17,r2
   34ef0:	b00b883a 	mov	r5,r22
   34ef4:	8009883a 	mov	r4,r16
   34ef8:	0025ab00 	call	25ab0 <__udivsi3>
   34efc:	8822943a 	slli	r17,r17,16
   34f00:	1545383a 	mul	r2,r2,r21
   34f04:	a53fffcc 	andi	r20,r20,65535
   34f08:	a446b03a 	or	r3,r20,r17
   34f0c:	18bfb02e 	bgeu	r3,r2,34dd0 <__umoddi3+0x11c>
   34f10:	003fab06 	br	34dc0 <__umoddi3+0x10c>
   34f14:	2005883a 	mov	r2,r4
   34f18:	2807883a 	mov	r3,r5
   34f1c:	dfc00b17 	ldw	ra,44(sp)
   34f20:	df000a17 	ldw	fp,40(sp)
   34f24:	ddc00917 	ldw	r23,36(sp)
   34f28:	dd800817 	ldw	r22,32(sp)
   34f2c:	dd400717 	ldw	r21,28(sp)
   34f30:	dd000617 	ldw	r20,24(sp)
   34f34:	dcc00517 	ldw	r19,20(sp)
   34f38:	dc800417 	ldw	r18,16(sp)
   34f3c:	dc400317 	ldw	r17,12(sp)
   34f40:	dc000217 	ldw	r16,8(sp)
   34f44:	dec00c04 	addi	sp,sp,48
   34f48:	f800283a 	ret
   34f4c:	04c03fc4 	movi	r19,255
   34f50:	99c9803a 	cmpltu	r4,r19,r7
   34f54:	200890fa 	slli	r4,r4,3
   34f58:	003fa806 	br	34dfc <__umoddi3+0x148>
   34f5c:	00803fc4 	movi	r2,255
   34f60:	14c5803a 	cmpltu	r2,r2,r19
   34f64:	100490fa 	slli	r2,r2,3
   34f68:	003fc006 	br	34e6c <__umoddi3+0x1b8>
   34f6c:	00804034 	movhi	r2,256
   34f70:	10bfffc4 	addi	r2,r2,-1
   34f74:	11808b36 	bltu	r2,r6,351a4 <__umoddi3+0x4f0>
   34f78:	01000404 	movi	r4,16
   34f7c:	003f6406 	br	34d10 <__umoddi3+0x5c>
   34f80:	34c4d83a 	srl	r2,r6,r19
   34f84:	3d0e983a 	sll	r7,r7,r20
   34f88:	8cf8d83a 	srl	fp,r17,r19
   34f8c:	8d10983a 	sll	r8,r17,r20
   34f90:	38aab03a 	or	r21,r7,r2
   34f94:	a82cd43a 	srli	r22,r21,16
   34f98:	84e2d83a 	srl	r17,r16,r19
   34f9c:	e009883a 	mov	r4,fp
   34fa0:	b00b883a 	mov	r5,r22
   34fa4:	8a22b03a 	or	r17,r17,r8
   34fa8:	3524983a 	sll	r18,r6,r20
   34fac:	0025b140 	call	25b14 <__umodsi3>
   34fb0:	e009883a 	mov	r4,fp
   34fb4:	b00b883a 	mov	r5,r22
   34fb8:	102f883a 	mov	r23,r2
   34fbc:	0025ab00 	call	25ab0 <__udivsi3>
   34fc0:	100d883a 	mov	r6,r2
   34fc4:	b808943a 	slli	r4,r23,16
   34fc8:	aa3fffcc 	andi	r8,r21,65535
   34fcc:	8804d43a 	srli	r2,r17,16
   34fd0:	41af383a 	mul	r23,r8,r6
   34fd4:	8520983a 	sll	r16,r16,r20
   34fd8:	1104b03a 	or	r2,r2,r4
   34fdc:	15c0042e 	bgeu	r2,r23,34ff0 <__umoddi3+0x33c>
   34fe0:	1545883a 	add	r2,r2,r21
   34fe4:	30ffffc4 	addi	r3,r6,-1
   34fe8:	1540742e 	bgeu	r2,r21,351bc <__umoddi3+0x508>
   34fec:	180d883a 	mov	r6,r3
   34ff0:	15efc83a 	sub	r23,r2,r23
   34ff4:	b00b883a 	mov	r5,r22
   34ff8:	b809883a 	mov	r4,r23
   34ffc:	d9800115 	stw	r6,4(sp)
   35000:	da000015 	stw	r8,0(sp)
   35004:	0025b140 	call	25b14 <__umodsi3>
   35008:	b00b883a 	mov	r5,r22
   3500c:	b809883a 	mov	r4,r23
   35010:	1039883a 	mov	fp,r2
   35014:	0025ab00 	call	25ab0 <__udivsi3>
   35018:	da000017 	ldw	r8,0(sp)
   3501c:	e038943a 	slli	fp,fp,16
   35020:	100b883a 	mov	r5,r2
   35024:	4089383a 	mul	r4,r8,r2
   35028:	8a3fffcc 	andi	r8,r17,65535
   3502c:	4710b03a 	or	r8,r8,fp
   35030:	d9800117 	ldw	r6,4(sp)
   35034:	4100042e 	bgeu	r8,r4,35048 <__umoddi3+0x394>
   35038:	4551883a 	add	r8,r8,r21
   3503c:	10bfffc4 	addi	r2,r2,-1
   35040:	45405a2e 	bgeu	r8,r21,351ac <__umoddi3+0x4f8>
   35044:	100b883a 	mov	r5,r2
   35048:	300c943a 	slli	r6,r6,16
   3504c:	91ffffcc 	andi	r7,r18,65535
   35050:	9004d43a 	srli	r2,r18,16
   35054:	314cb03a 	or	r6,r6,r5
   35058:	317fffcc 	andi	r5,r6,65535
   3505c:	300cd43a 	srli	r6,r6,16
   35060:	29d3383a 	mul	r9,r5,r7
   35064:	288b383a 	mul	r5,r5,r2
   35068:	31cf383a 	mul	r7,r6,r7
   3506c:	4806d43a 	srli	r3,r9,16
   35070:	4111c83a 	sub	r8,r8,r4
   35074:	29cb883a 	add	r5,r5,r7
   35078:	194b883a 	add	r5,r3,r5
   3507c:	3085383a 	mul	r2,r6,r2
   35080:	29c0022e 	bgeu	r5,r7,3508c <__umoddi3+0x3d8>
   35084:	00c00074 	movhi	r3,1
   35088:	10c5883a 	add	r2,r2,r3
   3508c:	2808d43a 	srli	r4,r5,16
   35090:	280a943a 	slli	r5,r5,16
   35094:	4a7fffcc 	andi	r9,r9,65535
   35098:	2085883a 	add	r2,r4,r2
   3509c:	2a4b883a 	add	r5,r5,r9
   350a0:	40803636 	bltu	r8,r2,3517c <__umoddi3+0x4c8>
   350a4:	40804d26 	beq	r8,r2,351dc <__umoddi3+0x528>
   350a8:	4089c83a 	sub	r4,r8,r2
   350ac:	280f883a 	mov	r7,r5
   350b0:	81cfc83a 	sub	r7,r16,r7
   350b4:	81c7803a 	cmpltu	r3,r16,r7
   350b8:	20c7c83a 	sub	r3,r4,r3
   350bc:	1cc4983a 	sll	r2,r3,r19
   350c0:	3d0ed83a 	srl	r7,r7,r20
   350c4:	1d06d83a 	srl	r3,r3,r20
   350c8:	11c4b03a 	or	r2,r2,r7
   350cc:	003f9306 	br	34f1c <__umoddi3+0x268>
   350d0:	9ca6983a 	sll	r19,r19,r18
   350d4:	88e8d83a 	srl	r20,r17,r3
   350d8:	80c4d83a 	srl	r2,r16,r3
   350dc:	982cd43a 	srli	r22,r19,16
   350e0:	8ca2983a 	sll	r17,r17,r18
   350e4:	a009883a 	mov	r4,r20
   350e8:	b00b883a 	mov	r5,r22
   350ec:	1478b03a 	or	fp,r2,r17
   350f0:	0025b140 	call	25b14 <__umodsi3>
   350f4:	a009883a 	mov	r4,r20
   350f8:	b00b883a 	mov	r5,r22
   350fc:	1023883a 	mov	r17,r2
   35100:	0025ab00 	call	25ab0 <__udivsi3>
   35104:	9d7fffcc 	andi	r21,r19,65535
   35108:	880a943a 	slli	r5,r17,16
   3510c:	e008d43a 	srli	r4,fp,16
   35110:	a885383a 	mul	r2,r21,r2
   35114:	84a8983a 	sll	r20,r16,r18
   35118:	2148b03a 	or	r4,r4,r5
   3511c:	2080042e 	bgeu	r4,r2,35130 <__umoddi3+0x47c>
   35120:	24c9883a 	add	r4,r4,r19
   35124:	24c00236 	bltu	r4,r19,35130 <__umoddi3+0x47c>
   35128:	2080012e 	bgeu	r4,r2,35130 <__umoddi3+0x47c>
   3512c:	24c9883a 	add	r4,r4,r19
   35130:	20a3c83a 	sub	r17,r4,r2
   35134:	b00b883a 	mov	r5,r22
   35138:	8809883a 	mov	r4,r17
   3513c:	0025b140 	call	25b14 <__umodsi3>
   35140:	102f883a 	mov	r23,r2
   35144:	8809883a 	mov	r4,r17
   35148:	b00b883a 	mov	r5,r22
   3514c:	0025ab00 	call	25ab0 <__udivsi3>
   35150:	b82e943a 	slli	r23,r23,16
   35154:	a885383a 	mul	r2,r21,r2
   35158:	e13fffcc 	andi	r4,fp,65535
   3515c:	25c8b03a 	or	r4,r4,r23
   35160:	2080042e 	bgeu	r4,r2,35174 <__umoddi3+0x4c0>
   35164:	24c9883a 	add	r4,r4,r19
   35168:	24c00236 	bltu	r4,r19,35174 <__umoddi3+0x4c0>
   3516c:	2080012e 	bgeu	r4,r2,35174 <__umoddi3+0x4c0>
   35170:	24c9883a 	add	r4,r4,r19
   35174:	20a3c83a 	sub	r17,r4,r2
   35178:	003f4806 	br	34e9c <__umoddi3+0x1e8>
   3517c:	2c8fc83a 	sub	r7,r5,r18
   35180:	1545c83a 	sub	r2,r2,r21
   35184:	29cb803a 	cmpltu	r5,r5,r7
   35188:	1145c83a 	sub	r2,r2,r5
   3518c:	4089c83a 	sub	r4,r8,r2
   35190:	003fc706 	br	350b0 <__umoddi3+0x3fc>
   35194:	01000604 	movi	r4,24
   35198:	003f1806 	br	34dfc <__umoddi3+0x148>
   3519c:	00800604 	movi	r2,24
   351a0:	003f3206 	br	34e6c <__umoddi3+0x1b8>
   351a4:	01000604 	movi	r4,24
   351a8:	003ed906 	br	34d10 <__umoddi3+0x5c>
   351ac:	413fa52e 	bgeu	r8,r4,35044 <__umoddi3+0x390>
   351b0:	297fff84 	addi	r5,r5,-2
   351b4:	4551883a 	add	r8,r8,r21
   351b8:	003fa306 	br	35048 <__umoddi3+0x394>
   351bc:	15ff8b2e 	bgeu	r2,r23,34fec <__umoddi3+0x338>
   351c0:	31bfff84 	addi	r6,r6,-2
   351c4:	1545883a 	add	r2,r2,r21
   351c8:	003f8906 	br	34ff0 <__umoddi3+0x33c>
   351cc:	24c9883a 	add	r4,r4,r19
   351d0:	003eee06 	br	34d8c <__umoddi3+0xd8>
   351d4:	8005883a 	mov	r2,r16
   351d8:	003f1706 	br	34e38 <__umoddi3+0x184>
   351dc:	817fe736 	bltu	r16,r5,3517c <__umoddi3+0x4c8>
   351e0:	280f883a 	mov	r7,r5
   351e4:	0009883a 	mov	r4,zero
   351e8:	003fb106 	br	350b0 <__umoddi3+0x3fc>

000351ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   351ec:	defffe04 	addi	sp,sp,-8
   351f0:	dfc00115 	stw	ra,4(sp)
   351f4:	df000015 	stw	fp,0(sp)
   351f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   351fc:	d0a00d17 	ldw	r2,-32716(gp)
   35200:	10000326 	beq	r2,zero,35210 <alt_get_errno+0x24>
   35204:	d0a00d17 	ldw	r2,-32716(gp)
   35208:	103ee83a 	callr	r2
   3520c:	00000106 	br	35214 <alt_get_errno+0x28>
   35210:	d0ab0204 	addi	r2,gp,-21496
}
   35214:	e037883a 	mov	sp,fp
   35218:	dfc00117 	ldw	ra,4(sp)
   3521c:	df000017 	ldw	fp,0(sp)
   35220:	dec00204 	addi	sp,sp,8
   35224:	f800283a 	ret

00035228 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   35228:	defffb04 	addi	sp,sp,-20
   3522c:	dfc00415 	stw	ra,16(sp)
   35230:	df000315 	stw	fp,12(sp)
   35234:	df000304 	addi	fp,sp,12
   35238:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   3523c:	e0bfff17 	ldw	r2,-4(fp)
   35240:	10000616 	blt	r2,zero,3525c <close+0x34>
   35244:	e0bfff17 	ldw	r2,-4(fp)
   35248:	10c00324 	muli	r3,r2,12
   3524c:	00800134 	movhi	r2,4
   35250:	10adf604 	addi	r2,r2,-18472
   35254:	1885883a 	add	r2,r3,r2
   35258:	00000106 	br	35260 <close+0x38>
   3525c:	0005883a 	mov	r2,zero
   35260:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   35264:	e0bffd17 	ldw	r2,-12(fp)
   35268:	10001926 	beq	r2,zero,352d0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   3526c:	e0bffd17 	ldw	r2,-12(fp)
   35270:	10800017 	ldw	r2,0(r2)
   35274:	10800417 	ldw	r2,16(r2)
   35278:	10000626 	beq	r2,zero,35294 <close+0x6c>
   3527c:	e0bffd17 	ldw	r2,-12(fp)
   35280:	10800017 	ldw	r2,0(r2)
   35284:	10800417 	ldw	r2,16(r2)
   35288:	e13ffd17 	ldw	r4,-12(fp)
   3528c:	103ee83a 	callr	r2
   35290:	00000106 	br	35298 <close+0x70>
   35294:	0005883a 	mov	r2,zero
   35298:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   3529c:	e13fff17 	ldw	r4,-4(fp)
   352a0:	0035b700 	call	35b70 <alt_release_fd>
    if (rval < 0)
   352a4:	e0bffe17 	ldw	r2,-8(fp)
   352a8:	1000070e 	bge	r2,zero,352c8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   352ac:	00351ec0 	call	351ec <alt_get_errno>
   352b0:	1007883a 	mov	r3,r2
   352b4:	e0bffe17 	ldw	r2,-8(fp)
   352b8:	0085c83a 	sub	r2,zero,r2
   352bc:	18800015 	stw	r2,0(r3)
      return -1;
   352c0:	00bfffc4 	movi	r2,-1
   352c4:	00000706 	br	352e4 <close+0xbc>
    }
    return 0;
   352c8:	0005883a 	mov	r2,zero
   352cc:	00000506 	br	352e4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   352d0:	00351ec0 	call	351ec <alt_get_errno>
   352d4:	1007883a 	mov	r3,r2
   352d8:	00801444 	movi	r2,81
   352dc:	18800015 	stw	r2,0(r3)
    return -1;
   352e0:	00bfffc4 	movi	r2,-1
  }
}
   352e4:	e037883a 	mov	sp,fp
   352e8:	dfc00117 	ldw	ra,4(sp)
   352ec:	df000017 	ldw	fp,0(sp)
   352f0:	dec00204 	addi	sp,sp,8
   352f4:	f800283a 	ret

000352f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   352f8:	defffc04 	addi	sp,sp,-16
   352fc:	df000315 	stw	fp,12(sp)
   35300:	df000304 	addi	fp,sp,12
   35304:	e13ffd15 	stw	r4,-12(fp)
   35308:	e17ffe15 	stw	r5,-8(fp)
   3530c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   35310:	e0bfff17 	ldw	r2,-4(fp)
}
   35314:	e037883a 	mov	sp,fp
   35318:	df000017 	ldw	fp,0(sp)
   3531c:	dec00104 	addi	sp,sp,4
   35320:	f800283a 	ret

00035324 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   35324:	defffd04 	addi	sp,sp,-12
   35328:	df000215 	stw	fp,8(sp)
   3532c:	df000204 	addi	fp,sp,8
   35330:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   35334:	0001883a 	nop
   35338:	e0bfff17 	ldw	r2,-4(fp)
   3533c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   35340:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   35344:	10000226 	beq	r2,zero,35350 <_exit+0x2c>
    ALT_SIM_FAIL();
   35348:	002af070 	cmpltui	zero,zero,43969
   3534c:	00000106 	br	35354 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   35350:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   35354:	003fff06 	br	35354 <_exit+0x30>

00035358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   35358:	defffe04 	addi	sp,sp,-8
   3535c:	dfc00115 	stw	ra,4(sp)
   35360:	df000015 	stw	fp,0(sp)
   35364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35368:	d0a00d17 	ldw	r2,-32716(gp)
   3536c:	10000326 	beq	r2,zero,3537c <alt_get_errno+0x24>
   35370:	d0a00d17 	ldw	r2,-32716(gp)
   35374:	103ee83a 	callr	r2
   35378:	00000106 	br	35380 <alt_get_errno+0x28>
   3537c:	d0ab0204 	addi	r2,gp,-21496
}
   35380:	e037883a 	mov	sp,fp
   35384:	dfc00117 	ldw	ra,4(sp)
   35388:	df000017 	ldw	fp,0(sp)
   3538c:	dec00204 	addi	sp,sp,8
   35390:	f800283a 	ret

00035394 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   35394:	defffb04 	addi	sp,sp,-20
   35398:	dfc00415 	stw	ra,16(sp)
   3539c:	df000315 	stw	fp,12(sp)
   353a0:	df000304 	addi	fp,sp,12
   353a4:	e13ffe15 	stw	r4,-8(fp)
   353a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   353ac:	e0bffe17 	ldw	r2,-8(fp)
   353b0:	10000616 	blt	r2,zero,353cc <fstat+0x38>
   353b4:	e0bffe17 	ldw	r2,-8(fp)
   353b8:	10c00324 	muli	r3,r2,12
   353bc:	00800134 	movhi	r2,4
   353c0:	10adf604 	addi	r2,r2,-18472
   353c4:	1885883a 	add	r2,r3,r2
   353c8:	00000106 	br	353d0 <fstat+0x3c>
   353cc:	0005883a 	mov	r2,zero
   353d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   353d4:	e0bffd17 	ldw	r2,-12(fp)
   353d8:	10001026 	beq	r2,zero,3541c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   353dc:	e0bffd17 	ldw	r2,-12(fp)
   353e0:	10800017 	ldw	r2,0(r2)
   353e4:	10800817 	ldw	r2,32(r2)
   353e8:	10000726 	beq	r2,zero,35408 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   353ec:	e0bffd17 	ldw	r2,-12(fp)
   353f0:	10800017 	ldw	r2,0(r2)
   353f4:	10800817 	ldw	r2,32(r2)
   353f8:	e17fff17 	ldw	r5,-4(fp)
   353fc:	e13ffd17 	ldw	r4,-12(fp)
   35400:	103ee83a 	callr	r2
   35404:	00000a06 	br	35430 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   35408:	e0bfff17 	ldw	r2,-4(fp)
   3540c:	00c80004 	movi	r3,8192
   35410:	10c00115 	stw	r3,4(r2)
      return 0;
   35414:	0005883a 	mov	r2,zero
   35418:	00000506 	br	35430 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3541c:	00353580 	call	35358 <alt_get_errno>
   35420:	1007883a 	mov	r3,r2
   35424:	00801444 	movi	r2,81
   35428:	18800015 	stw	r2,0(r3)
    return -1;
   3542c:	00bfffc4 	movi	r2,-1
  }
}
   35430:	e037883a 	mov	sp,fp
   35434:	dfc00117 	ldw	ra,4(sp)
   35438:	df000017 	ldw	fp,0(sp)
   3543c:	dec00204 	addi	sp,sp,8
   35440:	f800283a 	ret

00035444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   35444:	defffe04 	addi	sp,sp,-8
   35448:	dfc00115 	stw	ra,4(sp)
   3544c:	df000015 	stw	fp,0(sp)
   35450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35454:	d0a00d17 	ldw	r2,-32716(gp)
   35458:	10000326 	beq	r2,zero,35468 <alt_get_errno+0x24>
   3545c:	d0a00d17 	ldw	r2,-32716(gp)
   35460:	103ee83a 	callr	r2
   35464:	00000106 	br	3546c <alt_get_errno+0x28>
   35468:	d0ab0204 	addi	r2,gp,-21496
}
   3546c:	e037883a 	mov	sp,fp
   35470:	dfc00117 	ldw	ra,4(sp)
   35474:	df000017 	ldw	fp,0(sp)
   35478:	dec00204 	addi	sp,sp,8
   3547c:	f800283a 	ret

00035480 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   35480:	deffed04 	addi	sp,sp,-76
   35484:	dfc01215 	stw	ra,72(sp)
   35488:	df001115 	stw	fp,68(sp)
   3548c:	df001104 	addi	fp,sp,68
   35490:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   35494:	e0bfff17 	ldw	r2,-4(fp)
   35498:	10000616 	blt	r2,zero,354b4 <isatty+0x34>
   3549c:	e0bfff17 	ldw	r2,-4(fp)
   354a0:	10c00324 	muli	r3,r2,12
   354a4:	00800134 	movhi	r2,4
   354a8:	10adf604 	addi	r2,r2,-18472
   354ac:	1885883a 	add	r2,r3,r2
   354b0:	00000106 	br	354b8 <isatty+0x38>
   354b4:	0005883a 	mov	r2,zero
   354b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   354bc:	e0bfef17 	ldw	r2,-68(fp)
   354c0:	10000e26 	beq	r2,zero,354fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   354c4:	e0bfef17 	ldw	r2,-68(fp)
   354c8:	10800017 	ldw	r2,0(r2)
   354cc:	10800817 	ldw	r2,32(r2)
   354d0:	1000021e 	bne	r2,zero,354dc <isatty+0x5c>
    {
      return 1;
   354d4:	00800044 	movi	r2,1
   354d8:	00000d06 	br	35510 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   354dc:	e0bff004 	addi	r2,fp,-64
   354e0:	100b883a 	mov	r5,r2
   354e4:	e13fff17 	ldw	r4,-4(fp)
   354e8:	00353940 	call	35394 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   354ec:	e0bff117 	ldw	r2,-60(fp)
   354f0:	10880020 	cmpeqi	r2,r2,8192
   354f4:	10803fcc 	andi	r2,r2,255
   354f8:	00000506 	br	35510 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   354fc:	00354440 	call	35444 <alt_get_errno>
   35500:	1007883a 	mov	r3,r2
   35504:	00801444 	movi	r2,81
   35508:	18800015 	stw	r2,0(r3)
    return 0;
   3550c:	0005883a 	mov	r2,zero
  }
}
   35510:	e037883a 	mov	sp,fp
   35514:	dfc00117 	ldw	ra,4(sp)
   35518:	df000017 	ldw	fp,0(sp)
   3551c:	dec00204 	addi	sp,sp,8
   35520:	f800283a 	ret

00035524 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   35524:	defffc04 	addi	sp,sp,-16
   35528:	df000315 	stw	fp,12(sp)
   3552c:	df000304 	addi	fp,sp,12
   35530:	e13ffd15 	stw	r4,-12(fp)
   35534:	e17ffe15 	stw	r5,-8(fp)
   35538:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   3553c:	e0fffe17 	ldw	r3,-8(fp)
   35540:	e0bffd17 	ldw	r2,-12(fp)
   35544:	18800c26 	beq	r3,r2,35578 <alt_load_section+0x54>
  {
    while( to != end )
   35548:	00000806 	br	3556c <alt_load_section+0x48>
    {
      *to++ = *from++;
   3554c:	e0bffe17 	ldw	r2,-8(fp)
   35550:	10c00104 	addi	r3,r2,4
   35554:	e0fffe15 	stw	r3,-8(fp)
   35558:	e0fffd17 	ldw	r3,-12(fp)
   3555c:	19000104 	addi	r4,r3,4
   35560:	e13ffd15 	stw	r4,-12(fp)
   35564:	18c00017 	ldw	r3,0(r3)
   35568:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   3556c:	e0fffe17 	ldw	r3,-8(fp)
   35570:	e0bfff17 	ldw	r2,-4(fp)
   35574:	18bff51e 	bne	r3,r2,3554c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   35578:	0001883a 	nop
   3557c:	e037883a 	mov	sp,fp
   35580:	df000017 	ldw	fp,0(sp)
   35584:	dec00104 	addi	sp,sp,4
   35588:	f800283a 	ret

0003558c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   3558c:	defffe04 	addi	sp,sp,-8
   35590:	dfc00115 	stw	ra,4(sp)
   35594:	df000015 	stw	fp,0(sp)
   35598:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   3559c:	01800134 	movhi	r6,4
   355a0:	31aeb104 	addi	r6,r6,-17724
   355a4:	01400134 	movhi	r5,4
   355a8:	2963c304 	addi	r5,r5,-28916
   355ac:	01000134 	movhi	r4,4
   355b0:	212eb104 	addi	r4,r4,-17724
   355b4:	00355240 	call	35524 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   355b8:	018000b4 	movhi	r6,2
   355bc:	31809104 	addi	r6,r6,580
   355c0:	014000b4 	movhi	r5,2
   355c4:	29400804 	addi	r5,r5,32
   355c8:	010000b4 	movhi	r4,2
   355cc:	21000804 	addi	r4,r4,32
   355d0:	00355240 	call	35524 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   355d4:	01800134 	movhi	r6,4
   355d8:	31a3c304 	addi	r6,r6,-28916
   355dc:	014000f4 	movhi	r5,3
   355e0:	295fd904 	addi	r5,r5,32612
   355e4:	010000f4 	movhi	r4,3
   355e8:	211fd904 	addi	r4,r4,32612
   355ec:	00355240 	call	35524 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   355f0:	00374340 	call	37434 <alt_dcache_flush_all>
  alt_icache_flush_all();
   355f4:	00378580 	call	37858 <alt_icache_flush_all>
}
   355f8:	0001883a 	nop
   355fc:	e037883a 	mov	sp,fp
   35600:	dfc00117 	ldw	ra,4(sp)
   35604:	df000017 	ldw	fp,0(sp)
   35608:	dec00204 	addi	sp,sp,8
   3560c:	f800283a 	ret

00035610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   35610:	defffe04 	addi	sp,sp,-8
   35614:	dfc00115 	stw	ra,4(sp)
   35618:	df000015 	stw	fp,0(sp)
   3561c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35620:	d0a00d17 	ldw	r2,-32716(gp)
   35624:	10000326 	beq	r2,zero,35634 <alt_get_errno+0x24>
   35628:	d0a00d17 	ldw	r2,-32716(gp)
   3562c:	103ee83a 	callr	r2
   35630:	00000106 	br	35638 <alt_get_errno+0x28>
   35634:	d0ab0204 	addi	r2,gp,-21496
}
   35638:	e037883a 	mov	sp,fp
   3563c:	dfc00117 	ldw	ra,4(sp)
   35640:	df000017 	ldw	fp,0(sp)
   35644:	dec00204 	addi	sp,sp,8
   35648:	f800283a 	ret

0003564c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   3564c:	defff904 	addi	sp,sp,-28
   35650:	dfc00615 	stw	ra,24(sp)
   35654:	df000515 	stw	fp,20(sp)
   35658:	df000504 	addi	fp,sp,20
   3565c:	e13ffd15 	stw	r4,-12(fp)
   35660:	e17ffe15 	stw	r5,-8(fp)
   35664:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   35668:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3566c:	e0bffd17 	ldw	r2,-12(fp)
   35670:	10000616 	blt	r2,zero,3568c <lseek+0x40>
   35674:	e0bffd17 	ldw	r2,-12(fp)
   35678:	10c00324 	muli	r3,r2,12
   3567c:	00800134 	movhi	r2,4
   35680:	10adf604 	addi	r2,r2,-18472
   35684:	1885883a 	add	r2,r3,r2
   35688:	00000106 	br	35690 <lseek+0x44>
   3568c:	0005883a 	mov	r2,zero
   35690:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   35694:	e0bffc17 	ldw	r2,-16(fp)
   35698:	10001026 	beq	r2,zero,356dc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   3569c:	e0bffc17 	ldw	r2,-16(fp)
   356a0:	10800017 	ldw	r2,0(r2)
   356a4:	10800717 	ldw	r2,28(r2)
   356a8:	10000926 	beq	r2,zero,356d0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   356ac:	e0bffc17 	ldw	r2,-16(fp)
   356b0:	10800017 	ldw	r2,0(r2)
   356b4:	10800717 	ldw	r2,28(r2)
   356b8:	e1bfff17 	ldw	r6,-4(fp)
   356bc:	e17ffe17 	ldw	r5,-8(fp)
   356c0:	e13ffc17 	ldw	r4,-16(fp)
   356c4:	103ee83a 	callr	r2
   356c8:	e0bffb15 	stw	r2,-20(fp)
   356cc:	00000506 	br	356e4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   356d0:	00bfde84 	movi	r2,-134
   356d4:	e0bffb15 	stw	r2,-20(fp)
   356d8:	00000206 	br	356e4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   356dc:	00bfebc4 	movi	r2,-81
   356e0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   356e4:	e0bffb17 	ldw	r2,-20(fp)
   356e8:	1000070e 	bge	r2,zero,35708 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   356ec:	00356100 	call	35610 <alt_get_errno>
   356f0:	1007883a 	mov	r3,r2
   356f4:	e0bffb17 	ldw	r2,-20(fp)
   356f8:	0085c83a 	sub	r2,zero,r2
   356fc:	18800015 	stw	r2,0(r3)
    rc = -1;
   35700:	00bfffc4 	movi	r2,-1
   35704:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   35708:	e0bffb17 	ldw	r2,-20(fp)
}
   3570c:	e037883a 	mov	sp,fp
   35710:	dfc00117 	ldw	ra,4(sp)
   35714:	df000017 	ldw	fp,0(sp)
   35718:	dec00204 	addi	sp,sp,8
   3571c:	f800283a 	ret

00035720 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   35720:	defffd04 	addi	sp,sp,-12
   35724:	dfc00215 	stw	ra,8(sp)
   35728:	df000115 	stw	fp,4(sp)
   3572c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   35730:	0009883a 	mov	r4,zero
   35734:	0035e900 	call	35e90 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   35738:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   3573c:	0035ec80 	call	35ec8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   35740:	01800134 	movhi	r6,4
   35744:	31a3b204 	addi	r6,r6,-28984
   35748:	01400134 	movhi	r5,4
   3574c:	2963b204 	addi	r5,r5,-28984
   35750:	01000134 	movhi	r4,4
   35754:	2123b204 	addi	r4,r4,-28984
   35758:	0037bf00 	call	37bf0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   3575c:	003755c0 	call	3755c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   35760:	010000f4 	movhi	r4,3
   35764:	211d6f04 	addi	r4,r4,30140
   35768:	0037dbc0 	call	37dbc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   3576c:	d0ab0917 	ldw	r2,-21468(gp)
   35770:	d0eb0a17 	ldw	r3,-21464(gp)
   35774:	d12b0b17 	ldw	r4,-21460(gp)
   35778:	200d883a 	mov	r6,r4
   3577c:	180b883a 	mov	r5,r3
   35780:	1009883a 	mov	r4,r2
   35784:	0020ac80 	call	20ac8 <main>
   35788:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3578c:	01000044 	movi	r4,1
   35790:	00352280 	call	35228 <close>
  exit (result);
   35794:	e13fff17 	ldw	r4,-4(fp)
   35798:	00298300 	call	29830 <exit>

0003579c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   3579c:	defffe04 	addi	sp,sp,-8
   357a0:	df000115 	stw	fp,4(sp)
   357a4:	df000104 	addi	fp,sp,4
   357a8:	e13fff15 	stw	r4,-4(fp)
}
   357ac:	0001883a 	nop
   357b0:	e037883a 	mov	sp,fp
   357b4:	df000017 	ldw	fp,0(sp)
   357b8:	dec00104 	addi	sp,sp,4
   357bc:	f800283a 	ret

000357c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   357c0:	defffe04 	addi	sp,sp,-8
   357c4:	df000115 	stw	fp,4(sp)
   357c8:	df000104 	addi	fp,sp,4
   357cc:	e13fff15 	stw	r4,-4(fp)
}
   357d0:	0001883a 	nop
   357d4:	e037883a 	mov	sp,fp
   357d8:	df000017 	ldw	fp,0(sp)
   357dc:	dec00104 	addi	sp,sp,4
   357e0:	f800283a 	ret

000357e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   357e4:	defffe04 	addi	sp,sp,-8
   357e8:	dfc00115 	stw	ra,4(sp)
   357ec:	df000015 	stw	fp,0(sp)
   357f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   357f4:	d0a00d17 	ldw	r2,-32716(gp)
   357f8:	10000326 	beq	r2,zero,35808 <alt_get_errno+0x24>
   357fc:	d0a00d17 	ldw	r2,-32716(gp)
   35800:	103ee83a 	callr	r2
   35804:	00000106 	br	3580c <alt_get_errno+0x28>
   35808:	d0ab0204 	addi	r2,gp,-21496
}
   3580c:	e037883a 	mov	sp,fp
   35810:	dfc00117 	ldw	ra,4(sp)
   35814:	df000017 	ldw	fp,0(sp)
   35818:	dec00204 	addi	sp,sp,8
   3581c:	f800283a 	ret

00035820 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   35820:	defffd04 	addi	sp,sp,-12
   35824:	df000215 	stw	fp,8(sp)
   35828:	df000204 	addi	fp,sp,8
   3582c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   35830:	e0bfff17 	ldw	r2,-4(fp)
   35834:	10800217 	ldw	r2,8(r2)
   35838:	10d00034 	orhi	r3,r2,16384
   3583c:	e0bfff17 	ldw	r2,-4(fp)
   35840:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   35844:	e03ffe15 	stw	zero,-8(fp)
   35848:	00001d06 	br	358c0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3584c:	00800134 	movhi	r2,4
   35850:	10adf604 	addi	r2,r2,-18472
   35854:	e0fffe17 	ldw	r3,-8(fp)
   35858:	18c00324 	muli	r3,r3,12
   3585c:	10c5883a 	add	r2,r2,r3
   35860:	10c00017 	ldw	r3,0(r2)
   35864:	e0bfff17 	ldw	r2,-4(fp)
   35868:	10800017 	ldw	r2,0(r2)
   3586c:	1880111e 	bne	r3,r2,358b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   35870:	00800134 	movhi	r2,4
   35874:	10adf604 	addi	r2,r2,-18472
   35878:	e0fffe17 	ldw	r3,-8(fp)
   3587c:	18c00324 	muli	r3,r3,12
   35880:	10c5883a 	add	r2,r2,r3
   35884:	10800204 	addi	r2,r2,8
   35888:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3588c:	1000090e 	bge	r2,zero,358b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   35890:	e0bffe17 	ldw	r2,-8(fp)
   35894:	10c00324 	muli	r3,r2,12
   35898:	00800134 	movhi	r2,4
   3589c:	10adf604 	addi	r2,r2,-18472
   358a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   358a4:	e0bfff17 	ldw	r2,-4(fp)
   358a8:	18800226 	beq	r3,r2,358b4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   358ac:	00bffcc4 	movi	r2,-13
   358b0:	00000806 	br	358d4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   358b4:	e0bffe17 	ldw	r2,-8(fp)
   358b8:	10800044 	addi	r2,r2,1
   358bc:	e0bffe15 	stw	r2,-8(fp)
   358c0:	d0a00c17 	ldw	r2,-32720(gp)
   358c4:	1007883a 	mov	r3,r2
   358c8:	e0bffe17 	ldw	r2,-8(fp)
   358cc:	18bfdf2e 	bgeu	r3,r2,3584c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   358d0:	0005883a 	mov	r2,zero
}
   358d4:	e037883a 	mov	sp,fp
   358d8:	df000017 	ldw	fp,0(sp)
   358dc:	dec00104 	addi	sp,sp,4
   358e0:	f800283a 	ret

000358e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   358e4:	defff604 	addi	sp,sp,-40
   358e8:	dfc00915 	stw	ra,36(sp)
   358ec:	df000815 	stw	fp,32(sp)
   358f0:	df000804 	addi	fp,sp,32
   358f4:	e13ffd15 	stw	r4,-12(fp)
   358f8:	e17ffe15 	stw	r5,-8(fp)
   358fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   35900:	00bfffc4 	movi	r2,-1
   35904:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   35908:	00bffb44 	movi	r2,-19
   3590c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   35910:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   35914:	d1600a04 	addi	r5,gp,-32728
   35918:	e13ffd17 	ldw	r4,-12(fp)
   3591c:	003761c0 	call	3761c <alt_find_dev>
   35920:	e0bff815 	stw	r2,-32(fp)
   35924:	e0bff817 	ldw	r2,-32(fp)
   35928:	1000051e 	bne	r2,zero,35940 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3592c:	e13ffd17 	ldw	r4,-12(fp)
   35930:	00376ac0 	call	376ac <alt_find_file>
   35934:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   35938:	00800044 	movi	r2,1
   3593c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   35940:	e0bff817 	ldw	r2,-32(fp)
   35944:	10002926 	beq	r2,zero,359ec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   35948:	e13ff817 	ldw	r4,-32(fp)
   3594c:	00377b40 	call	377b4 <alt_get_fd>
   35950:	e0bff915 	stw	r2,-28(fp)
   35954:	e0bff917 	ldw	r2,-28(fp)
   35958:	1000030e 	bge	r2,zero,35968 <open+0x84>
    {
      status = index;
   3595c:	e0bff917 	ldw	r2,-28(fp)
   35960:	e0bffa15 	stw	r2,-24(fp)
   35964:	00002306 	br	359f4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   35968:	e0bff917 	ldw	r2,-28(fp)
   3596c:	10c00324 	muli	r3,r2,12
   35970:	00800134 	movhi	r2,4
   35974:	10adf604 	addi	r2,r2,-18472
   35978:	1885883a 	add	r2,r3,r2
   3597c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   35980:	e0fffe17 	ldw	r3,-8(fp)
   35984:	00900034 	movhi	r2,16384
   35988:	10bfffc4 	addi	r2,r2,-1
   3598c:	1886703a 	and	r3,r3,r2
   35990:	e0bffc17 	ldw	r2,-16(fp)
   35994:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   35998:	e0bffb17 	ldw	r2,-20(fp)
   3599c:	1000051e 	bne	r2,zero,359b4 <open+0xd0>
   359a0:	e13ffc17 	ldw	r4,-16(fp)
   359a4:	00358200 	call	35820 <alt_file_locked>
   359a8:	e0bffa15 	stw	r2,-24(fp)
   359ac:	e0bffa17 	ldw	r2,-24(fp)
   359b0:	10001016 	blt	r2,zero,359f4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   359b4:	e0bff817 	ldw	r2,-32(fp)
   359b8:	10800317 	ldw	r2,12(r2)
   359bc:	10000826 	beq	r2,zero,359e0 <open+0xfc>
   359c0:	e0bff817 	ldw	r2,-32(fp)
   359c4:	10800317 	ldw	r2,12(r2)
   359c8:	e1ffff17 	ldw	r7,-4(fp)
   359cc:	e1bffe17 	ldw	r6,-8(fp)
   359d0:	e17ffd17 	ldw	r5,-12(fp)
   359d4:	e13ffc17 	ldw	r4,-16(fp)
   359d8:	103ee83a 	callr	r2
   359dc:	00000106 	br	359e4 <open+0x100>
   359e0:	0005883a 	mov	r2,zero
   359e4:	e0bffa15 	stw	r2,-24(fp)
   359e8:	00000206 	br	359f4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   359ec:	00bffb44 	movi	r2,-19
   359f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   359f4:	e0bffa17 	ldw	r2,-24(fp)
   359f8:	1000090e 	bge	r2,zero,35a20 <open+0x13c>
  {
    alt_release_fd (index);  
   359fc:	e13ff917 	ldw	r4,-28(fp)
   35a00:	0035b700 	call	35b70 <alt_release_fd>
    ALT_ERRNO = -status;
   35a04:	00357e40 	call	357e4 <alt_get_errno>
   35a08:	1007883a 	mov	r3,r2
   35a0c:	e0bffa17 	ldw	r2,-24(fp)
   35a10:	0085c83a 	sub	r2,zero,r2
   35a14:	18800015 	stw	r2,0(r3)
    return -1;
   35a18:	00bfffc4 	movi	r2,-1
   35a1c:	00000106 	br	35a24 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   35a20:	e0bff917 	ldw	r2,-28(fp)
}
   35a24:	e037883a 	mov	sp,fp
   35a28:	dfc00117 	ldw	ra,4(sp)
   35a2c:	df000017 	ldw	fp,0(sp)
   35a30:	dec00204 	addi	sp,sp,8
   35a34:	f800283a 	ret

00035a38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   35a38:	defffe04 	addi	sp,sp,-8
   35a3c:	dfc00115 	stw	ra,4(sp)
   35a40:	df000015 	stw	fp,0(sp)
   35a44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35a48:	d0a00d17 	ldw	r2,-32716(gp)
   35a4c:	10000326 	beq	r2,zero,35a5c <alt_get_errno+0x24>
   35a50:	d0a00d17 	ldw	r2,-32716(gp)
   35a54:	103ee83a 	callr	r2
   35a58:	00000106 	br	35a60 <alt_get_errno+0x28>
   35a5c:	d0ab0204 	addi	r2,gp,-21496
}
   35a60:	e037883a 	mov	sp,fp
   35a64:	dfc00117 	ldw	ra,4(sp)
   35a68:	df000017 	ldw	fp,0(sp)
   35a6c:	dec00204 	addi	sp,sp,8
   35a70:	f800283a 	ret

00035a74 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   35a74:	defff904 	addi	sp,sp,-28
   35a78:	dfc00615 	stw	ra,24(sp)
   35a7c:	df000515 	stw	fp,20(sp)
   35a80:	df000504 	addi	fp,sp,20
   35a84:	e13ffd15 	stw	r4,-12(fp)
   35a88:	e17ffe15 	stw	r5,-8(fp)
   35a8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   35a90:	e0bffd17 	ldw	r2,-12(fp)
   35a94:	10000616 	blt	r2,zero,35ab0 <read+0x3c>
   35a98:	e0bffd17 	ldw	r2,-12(fp)
   35a9c:	10c00324 	muli	r3,r2,12
   35aa0:	00800134 	movhi	r2,4
   35aa4:	10adf604 	addi	r2,r2,-18472
   35aa8:	1885883a 	add	r2,r3,r2
   35aac:	00000106 	br	35ab4 <read+0x40>
   35ab0:	0005883a 	mov	r2,zero
   35ab4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   35ab8:	e0bffb17 	ldw	r2,-20(fp)
   35abc:	10002226 	beq	r2,zero,35b48 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   35ac0:	e0bffb17 	ldw	r2,-20(fp)
   35ac4:	10800217 	ldw	r2,8(r2)
   35ac8:	108000cc 	andi	r2,r2,3
   35acc:	10800060 	cmpeqi	r2,r2,1
   35ad0:	1000181e 	bne	r2,zero,35b34 <read+0xc0>
        (fd->dev->read))
   35ad4:	e0bffb17 	ldw	r2,-20(fp)
   35ad8:	10800017 	ldw	r2,0(r2)
   35adc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   35ae0:	10001426 	beq	r2,zero,35b34 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   35ae4:	e0bffb17 	ldw	r2,-20(fp)
   35ae8:	10800017 	ldw	r2,0(r2)
   35aec:	10800517 	ldw	r2,20(r2)
   35af0:	e0ffff17 	ldw	r3,-4(fp)
   35af4:	180d883a 	mov	r6,r3
   35af8:	e17ffe17 	ldw	r5,-8(fp)
   35afc:	e13ffb17 	ldw	r4,-20(fp)
   35b00:	103ee83a 	callr	r2
   35b04:	e0bffc15 	stw	r2,-16(fp)
   35b08:	e0bffc17 	ldw	r2,-16(fp)
   35b0c:	1000070e 	bge	r2,zero,35b2c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   35b10:	0035a380 	call	35a38 <alt_get_errno>
   35b14:	1007883a 	mov	r3,r2
   35b18:	e0bffc17 	ldw	r2,-16(fp)
   35b1c:	0085c83a 	sub	r2,zero,r2
   35b20:	18800015 	stw	r2,0(r3)
          return -1;
   35b24:	00bfffc4 	movi	r2,-1
   35b28:	00000c06 	br	35b5c <read+0xe8>
        }
        return rval;
   35b2c:	e0bffc17 	ldw	r2,-16(fp)
   35b30:	00000a06 	br	35b5c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   35b34:	0035a380 	call	35a38 <alt_get_errno>
   35b38:	1007883a 	mov	r3,r2
   35b3c:	00800344 	movi	r2,13
   35b40:	18800015 	stw	r2,0(r3)
   35b44:	00000406 	br	35b58 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   35b48:	0035a380 	call	35a38 <alt_get_errno>
   35b4c:	1007883a 	mov	r3,r2
   35b50:	00801444 	movi	r2,81
   35b54:	18800015 	stw	r2,0(r3)
  }
  return -1;
   35b58:	00bfffc4 	movi	r2,-1
}
   35b5c:	e037883a 	mov	sp,fp
   35b60:	dfc00117 	ldw	ra,4(sp)
   35b64:	df000017 	ldw	fp,0(sp)
   35b68:	dec00204 	addi	sp,sp,8
   35b6c:	f800283a 	ret

00035b70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   35b70:	defffe04 	addi	sp,sp,-8
   35b74:	df000115 	stw	fp,4(sp)
   35b78:	df000104 	addi	fp,sp,4
   35b7c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   35b80:	e0bfff17 	ldw	r2,-4(fp)
   35b84:	108000d0 	cmplti	r2,r2,3
   35b88:	10000d1e 	bne	r2,zero,35bc0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   35b8c:	00800134 	movhi	r2,4
   35b90:	10adf604 	addi	r2,r2,-18472
   35b94:	e0ffff17 	ldw	r3,-4(fp)
   35b98:	18c00324 	muli	r3,r3,12
   35b9c:	10c5883a 	add	r2,r2,r3
   35ba0:	10800204 	addi	r2,r2,8
   35ba4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   35ba8:	00800134 	movhi	r2,4
   35bac:	10adf604 	addi	r2,r2,-18472
   35bb0:	e0ffff17 	ldw	r3,-4(fp)
   35bb4:	18c00324 	muli	r3,r3,12
   35bb8:	10c5883a 	add	r2,r2,r3
   35bbc:	10000015 	stw	zero,0(r2)
  }
}
   35bc0:	0001883a 	nop
   35bc4:	e037883a 	mov	sp,fp
   35bc8:	df000017 	ldw	fp,0(sp)
   35bcc:	dec00104 	addi	sp,sp,4
   35bd0:	f800283a 	ret

00035bd4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   35bd4:	defff904 	addi	sp,sp,-28
   35bd8:	df000615 	stw	fp,24(sp)
   35bdc:	df000604 	addi	fp,sp,24
   35be0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   35be4:	0005303a 	rdctl	r2,status
   35be8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35bec:	e0fffe17 	ldw	r3,-8(fp)
   35bf0:	00bfff84 	movi	r2,-2
   35bf4:	1884703a 	and	r2,r3,r2
   35bf8:	1001703a 	wrctl	status,r2
  
  return context;
   35bfc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   35c00:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   35c04:	d0a00e17 	ldw	r2,-32712(gp)
   35c08:	10c000c4 	addi	r3,r2,3
   35c0c:	00bfff04 	movi	r2,-4
   35c10:	1884703a 	and	r2,r3,r2
   35c14:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   35c18:	d0e00e17 	ldw	r3,-32712(gp)
   35c1c:	e0bfff17 	ldw	r2,-4(fp)
   35c20:	1887883a 	add	r3,r3,r2
   35c24:	00800134 	movhi	r2,4
   35c28:	10800004 	addi	r2,r2,0
   35c2c:	10c0062e 	bgeu	r2,r3,35c48 <sbrk+0x74>
   35c30:	e0bffb17 	ldw	r2,-20(fp)
   35c34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   35c38:	e0bffa17 	ldw	r2,-24(fp)
   35c3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   35c40:	00bfffc4 	movi	r2,-1
   35c44:	00000b06 	br	35c74 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   35c48:	d0a00e17 	ldw	r2,-32712(gp)
   35c4c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   35c50:	d0e00e17 	ldw	r3,-32712(gp)
   35c54:	e0bfff17 	ldw	r2,-4(fp)
   35c58:	1885883a 	add	r2,r3,r2
   35c5c:	d0a00e15 	stw	r2,-32712(gp)
   35c60:	e0bffb17 	ldw	r2,-20(fp)
   35c64:	e0bffc15 	stw	r2,-16(fp)
   35c68:	e0bffc17 	ldw	r2,-16(fp)
   35c6c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   35c70:	e0bffd17 	ldw	r2,-12(fp)
} 
   35c74:	e037883a 	mov	sp,fp
   35c78:	df000017 	ldw	fp,0(sp)
   35c7c:	dec00104 	addi	sp,sp,4
   35c80:	f800283a 	ret

00035c84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   35c84:	defffe04 	addi	sp,sp,-8
   35c88:	dfc00115 	stw	ra,4(sp)
   35c8c:	df000015 	stw	fp,0(sp)
   35c90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35c94:	d0a00d17 	ldw	r2,-32716(gp)
   35c98:	10000326 	beq	r2,zero,35ca8 <alt_get_errno+0x24>
   35c9c:	d0a00d17 	ldw	r2,-32716(gp)
   35ca0:	103ee83a 	callr	r2
   35ca4:	00000106 	br	35cac <alt_get_errno+0x28>
   35ca8:	d0ab0204 	addi	r2,gp,-21496
}
   35cac:	e037883a 	mov	sp,fp
   35cb0:	dfc00117 	ldw	ra,4(sp)
   35cb4:	df000017 	ldw	fp,0(sp)
   35cb8:	dec00204 	addi	sp,sp,8
   35cbc:	f800283a 	ret

00035cc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   35cc0:	defff904 	addi	sp,sp,-28
   35cc4:	dfc00615 	stw	ra,24(sp)
   35cc8:	df000515 	stw	fp,20(sp)
   35ccc:	df000504 	addi	fp,sp,20
   35cd0:	e13ffd15 	stw	r4,-12(fp)
   35cd4:	e17ffe15 	stw	r5,-8(fp)
   35cd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   35cdc:	e0bffd17 	ldw	r2,-12(fp)
   35ce0:	10000616 	blt	r2,zero,35cfc <write+0x3c>
   35ce4:	e0bffd17 	ldw	r2,-12(fp)
   35ce8:	10c00324 	muli	r3,r2,12
   35cec:	00800134 	movhi	r2,4
   35cf0:	10adf604 	addi	r2,r2,-18472
   35cf4:	1885883a 	add	r2,r3,r2
   35cf8:	00000106 	br	35d00 <write+0x40>
   35cfc:	0005883a 	mov	r2,zero
   35d00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   35d04:	e0bffb17 	ldw	r2,-20(fp)
   35d08:	10002126 	beq	r2,zero,35d90 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   35d0c:	e0bffb17 	ldw	r2,-20(fp)
   35d10:	10800217 	ldw	r2,8(r2)
   35d14:	108000cc 	andi	r2,r2,3
   35d18:	10001826 	beq	r2,zero,35d7c <write+0xbc>
   35d1c:	e0bffb17 	ldw	r2,-20(fp)
   35d20:	10800017 	ldw	r2,0(r2)
   35d24:	10800617 	ldw	r2,24(r2)
   35d28:	10001426 	beq	r2,zero,35d7c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   35d2c:	e0bffb17 	ldw	r2,-20(fp)
   35d30:	10800017 	ldw	r2,0(r2)
   35d34:	10800617 	ldw	r2,24(r2)
   35d38:	e0ffff17 	ldw	r3,-4(fp)
   35d3c:	180d883a 	mov	r6,r3
   35d40:	e17ffe17 	ldw	r5,-8(fp)
   35d44:	e13ffb17 	ldw	r4,-20(fp)
   35d48:	103ee83a 	callr	r2
   35d4c:	e0bffc15 	stw	r2,-16(fp)
   35d50:	e0bffc17 	ldw	r2,-16(fp)
   35d54:	1000070e 	bge	r2,zero,35d74 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   35d58:	0035c840 	call	35c84 <alt_get_errno>
   35d5c:	1007883a 	mov	r3,r2
   35d60:	e0bffc17 	ldw	r2,-16(fp)
   35d64:	0085c83a 	sub	r2,zero,r2
   35d68:	18800015 	stw	r2,0(r3)
        return -1;
   35d6c:	00bfffc4 	movi	r2,-1
   35d70:	00000c06 	br	35da4 <write+0xe4>
      }
      return rval;
   35d74:	e0bffc17 	ldw	r2,-16(fp)
   35d78:	00000a06 	br	35da4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   35d7c:	0035c840 	call	35c84 <alt_get_errno>
   35d80:	1007883a 	mov	r3,r2
   35d84:	00800344 	movi	r2,13
   35d88:	18800015 	stw	r2,0(r3)
   35d8c:	00000406 	br	35da0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   35d90:	0035c840 	call	35c84 <alt_get_errno>
   35d94:	1007883a 	mov	r3,r2
   35d98:	00801444 	movi	r2,81
   35d9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   35da0:	00bfffc4 	movi	r2,-1
}
   35da4:	e037883a 	mov	sp,fp
   35da8:	dfc00117 	ldw	ra,4(sp)
   35dac:	df000017 	ldw	fp,0(sp)
   35db0:	dec00204 	addi	sp,sp,8
   35db4:	f800283a 	ret

00035db8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   35db8:	defffd04 	addi	sp,sp,-12
   35dbc:	dfc00215 	stw	ra,8(sp)
   35dc0:	df000115 	stw	fp,4(sp)
   35dc4:	df000104 	addi	fp,sp,4
   35dc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   35dcc:	d1600a04 	addi	r5,gp,-32728
   35dd0:	e13fff17 	ldw	r4,-4(fp)
   35dd4:	00374b80 	call	374b8 <alt_dev_llist_insert>
}
   35dd8:	e037883a 	mov	sp,fp
   35ddc:	dfc00117 	ldw	ra,4(sp)
   35de0:	df000017 	ldw	fp,0(sp)
   35de4:	dec00204 	addi	sp,sp,8
   35de8:	f800283a 	ret

00035dec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   35dec:	defffe04 	addi	sp,sp,-8
   35df0:	dfc00115 	stw	ra,4(sp)
   35df4:	df000015 	stw	fp,0(sp)
   35df8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   35dfc:	d0a00d17 	ldw	r2,-32716(gp)
   35e00:	10000326 	beq	r2,zero,35e10 <alt_get_errno+0x24>
   35e04:	d0a00d17 	ldw	r2,-32716(gp)
   35e08:	103ee83a 	callr	r2
   35e0c:	00000106 	br	35e14 <alt_get_errno+0x28>
   35e10:	d0ab0204 	addi	r2,gp,-21496
}
   35e14:	e037883a 	mov	sp,fp
   35e18:	dfc00117 	ldw	ra,4(sp)
   35e1c:	df000017 	ldw	fp,0(sp)
   35e20:	dec00204 	addi	sp,sp,8
   35e24:	f800283a 	ret

00035e28 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
   35e28:	defffc04 	addi	sp,sp,-16
   35e2c:	dfc00315 	stw	ra,12(sp)
   35e30:	df000215 	stw	fp,8(sp)
   35e34:	df000204 	addi	fp,sp,8
   35e38:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   35e3c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
   35e40:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
   35e44:	e0bffe17 	ldw	r2,-8(fp)
   35e48:	1000051e 	bne	r2,zero,35e60 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   35e4c:	d1601104 	addi	r5,gp,-32700
   35e50:	e13fff17 	ldw	r4,-4(fp)
   35e54:	00374b80 	call	374b8 <alt_dev_llist_insert>
   35e58:	e0bffe15 	stw	r2,-8(fp)
   35e5c:	00000606 	br	35e78 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
   35e60:	0035dec0 	call	35dec <alt_get_errno>
   35e64:	1007883a 	mov	r3,r2
   35e68:	00800304 	movi	r2,12
   35e6c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
   35e70:	00bffd04 	movi	r2,-12
   35e74:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
   35e78:	e0bffe17 	ldw	r2,-8(fp)
}
   35e7c:	e037883a 	mov	sp,fp
   35e80:	dfc00117 	ldw	ra,4(sp)
   35e84:	df000017 	ldw	fp,0(sp)
   35e88:	dec00204 	addi	sp,sp,8
   35e8c:	f800283a 	ret

00035e90 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   35e90:	defffd04 	addi	sp,sp,-12
   35e94:	dfc00215 	stw	ra,8(sp)
   35e98:	df000115 	stw	fp,4(sp)
   35e9c:	df000104 	addi	fp,sp,4
   35ea0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_FFT, nios2_FFT);
   35ea4:	0037c6c0 	call	37c6c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   35ea8:	00800044 	movi	r2,1
   35eac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   35eb0:	0001883a 	nop
   35eb4:	e037883a 	mov	sp,fp
   35eb8:	dfc00117 	ldw	ra,4(sp)
   35ebc:	df000017 	ldw	fp,0(sp)
   35ec0:	dec00204 	addi	sp,sp,8
   35ec4:	f800283a 	ret

00035ec8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   35ec8:	defffe04 	addi	sp,sp,-8
   35ecc:	dfc00115 	stw	ra,4(sp)
   35ed0:	df000015 	stw	fp,0(sp)
   35ed4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
   35ed8:	000d883a 	mov	r6,zero
   35edc:	000b883a 	mov	r5,zero
   35ee0:	01000134 	movhi	r4,4
   35ee4:	212e5604 	addi	r4,r4,-18088
   35ee8:	00362180 	call	36218 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
   35eec:	01000134 	movhi	r4,4
   35ef0:	212e6804 	addi	r4,r4,-18016
   35ef4:	0035e280 	call	35e28 <alt_avalon_mutex_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   35ef8:	01800044 	movi	r6,1
   35efc:	000b883a 	mov	r5,zero
   35f00:	01000134 	movhi	r4,4
   35f04:	212e7604 	addi	r4,r4,-17960
   35f08:	0036c6c0 	call	36c6c <altera_avalon_uart_init>
   35f0c:	01000134 	movhi	r4,4
   35f10:	212e6c04 	addi	r4,r4,-18000
   35f14:	0035db80 	call	35db8 <alt_dev_reg>
}
   35f18:	0001883a 	nop
   35f1c:	e037883a 	mov	sp,fp
   35f20:	dfc00117 	ldw	ra,4(sp)
   35f24:	df000017 	ldw	fp,0(sp)
   35f28:	dec00204 	addi	sp,sp,8
   35f2c:	f800283a 	ret

00035f30 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
   35f30:	defffd04 	addi	sp,sp,-12
   35f34:	df000215 	stw	fp,8(sp)
   35f38:	df000204 	addi	fp,sp,8
   35f3c:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
   35f40:	008e84b4 	movhi	r2,14866
   35f44:	10ac1144 	addi	r2,r2,-20411
   35f48:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
   35f4c:	e0bfff17 	ldw	r2,-4(fp)
   35f50:	10800a17 	ldw	r2,40(r2)
   35f54:	10800104 	addi	r2,r2,4
   35f58:	1007883a 	mov	r3,r2
   35f5c:	e0bffe17 	ldw	r2,-8(fp)
   35f60:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
   35f64:	e0bfff17 	ldw	r2,-4(fp)
   35f68:	10800a17 	ldw	r2,40(r2)
   35f6c:	10800104 	addi	r2,r2,4
   35f70:	10800037 	ldwio	r2,0(r2)
   35f74:	1007883a 	mov	r3,r2
   35f78:	e0bffe17 	ldw	r2,-8(fp)
   35f7c:	1880081e 	bne	r3,r2,35fa0 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
   35f80:	e0bfff17 	ldw	r2,-4(fp)
   35f84:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
   35f88:	e0bfff17 	ldw	r2,-4(fp)
   35f8c:	10800a17 	ldw	r2,40(r2)
   35f90:	10800104 	addi	r2,r2,4
   35f94:	0007883a 	mov	r3,zero
   35f98:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
   35f9c:	00000306 	br	35fac <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
   35fa0:	e0bfff17 	ldw	r2,-4(fp)
   35fa4:	00c00044 	movi	r3,1
   35fa8:	10c00f15 	stw	r3,60(r2)
    }
}
   35fac:	0001883a 	nop
   35fb0:	e037883a 	mov	sp,fp
   35fb4:	df000017 	ldw	fp,0(sp)
   35fb8:	dec00104 	addi	sp,sp,4
   35fbc:	f800283a 	ret

00035fc0 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
   35fc0:	defffc04 	addi	sp,sp,-16
   35fc4:	df000315 	stw	fp,12(sp)
   35fc8:	df000304 	addi	fp,sp,12
   35fcc:	e13ffe15 	stw	r4,-8(fp)
   35fd0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
   35fd4:	e0bfff17 	ldw	r2,-4(fp)
   35fd8:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
   35fdc:	e0bffd17 	ldw	r2,-12(fp)
   35fe0:	10001026 	beq	r2,zero,36024 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
   35fe4:	e0bffe17 	ldw	r2,-8(fp)
   35fe8:	10800a17 	ldw	r2,40(r2)
   35fec:	10800104 	addi	r2,r2,4
   35ff0:	1007883a 	mov	r3,r2
   35ff4:	e0bffd17 	ldw	r2,-12(fp)
   35ff8:	10800104 	addi	r2,r2,4
   35ffc:	10800017 	ldw	r2,0(r2)
   36000:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
   36004:	e0bffe17 	ldw	r2,-8(fp)
   36008:	10800a17 	ldw	r2,40(r2)
   3600c:	1007883a 	mov	r3,r2
   36010:	e0bffd17 	ldw	r2,-12(fp)
   36014:	10800017 	ldw	r2,0(r2)
   36018:	18800035 	stwio	r2,0(r3)
        return 0;
   3601c:	0005883a 	mov	r2,zero
   36020:	00000106 	br	36028 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
   36024:	00bffa84 	movi	r2,-22
}
   36028:	e037883a 	mov	sp,fp
   3602c:	df000017 	ldw	fp,0(sp)
   36030:	dec00104 	addi	sp,sp,4
   36034:	f800283a 	ret

00036038 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
   36038:	defff604 	addi	sp,sp,-40
   3603c:	dfc00915 	stw	ra,36(sp)
   36040:	df000815 	stw	fp,32(sp)
   36044:	df000804 	addi	fp,sp,32
   36048:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   3604c:	e0bfff17 	ldw	r2,-4(fp)
   36050:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
   36054:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
   36058:	e0bff817 	ldw	r2,-32(fp)
   3605c:	10801017 	ldw	r2,64(r2)
   36060:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   36064:	e0bff817 	ldw	r2,-32(fp)
   36068:	10800a17 	ldw	r2,40(r2)
   3606c:	10800304 	addi	r2,r2,12
   36070:	10800037 	ldwio	r2,0(r2)
   36074:	1007883a 	mov	r3,r2
   36078:	00bfff44 	movi	r2,-3
   3607c:	1884703a 	and	r2,r3,r2
   36080:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   36084:	e0bff817 	ldw	r2,-32(fp)
   36088:	10800a17 	ldw	r2,40(r2)
   3608c:	10800304 	addi	r2,r2,12
   36090:	1007883a 	mov	r3,r2
   36094:	e0bffb17 	ldw	r2,-20(fp)
   36098:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
   3609c:	e0bffa17 	ldw	r2,-24(fp)
   360a0:	10002d26 	beq	r2,zero,36158 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
   360a4:	e0bff817 	ldw	r2,-32(fp)
   360a8:	10800a17 	ldw	r2,40(r2)
   360ac:	10800104 	addi	r2,r2,4
   360b0:	1007883a 	mov	r3,r2
   360b4:	e0bffa17 	ldw	r2,-24(fp)
   360b8:	10800104 	addi	r2,r2,4
   360bc:	10800017 	ldw	r2,0(r2)
   360c0:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
   360c4:	e0bff817 	ldw	r2,-32(fp)
   360c8:	10800a17 	ldw	r2,40(r2)
   360cc:	1007883a 	mov	r3,r2
   360d0:	e0bffa17 	ldw	r2,-24(fp)
   360d4:	10800017 	ldw	r2,0(r2)
   360d8:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   360dc:	e0bff817 	ldw	r2,-32(fp)
   360e0:	10800a17 	ldw	r2,40(r2)
   360e4:	10800204 	addi	r2,r2,8
   360e8:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   360ec:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   360f0:	1005d07a 	srai	r2,r2,1
   360f4:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
   360f8:	e0bff817 	ldw	r2,-32(fp)
   360fc:	10800d17 	ldw	r2,52(r2)
   36100:	10001126 	beq	r2,zero,36148 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   36104:	0005303a 	rdctl	r2,status
   36108:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3610c:	e0fffd17 	ldw	r3,-12(fp)
   36110:	00bfff84 	movi	r2,-2
   36114:	1884703a 	and	r2,r3,r2
   36118:	1001703a 	wrctl	status,r2
  
  return context;
   3611c:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
   36120:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
   36124:	e0bff817 	ldw	r2,-32(fp)
   36128:	10800d17 	ldw	r2,52(r2)
   3612c:	e17ff917 	ldw	r5,-28(fp)
   36130:	e13ffa17 	ldw	r4,-24(fp)
   36134:	103ee83a 	callr	r2
   36138:	e0bffc17 	ldw	r2,-16(fp)
   3613c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   36140:	e0bffe17 	ldw	r2,-8(fp)
   36144:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   36148:	e0bff817 	ldw	r2,-32(fp)
   3614c:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
   36150:	e0bff817 	ldw	r2,-32(fp)
   36154:	10001105 	stb	zero,68(r2)
    }
}
   36158:	0001883a 	nop
   3615c:	e037883a 	mov	sp,fp
   36160:	dfc00117 	ldw	ra,4(sp)
   36164:	df000017 	ldw	fp,0(sp)
   36168:	dec00204 	addi	sp,sp,8
   3616c:	f800283a 	ret

00036170 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
   36170:	defff704 	addi	sp,sp,-36
   36174:	dfc00815 	stw	ra,32(sp)
   36178:	df000715 	stw	fp,28(sp)
   3617c:	df000704 	addi	fp,sp,28
   36180:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   36184:	e0bfff17 	ldw	r2,-4(fp)
   36188:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   3618c:	e0bff917 	ldw	r2,-28(fp)
   36190:	10800a17 	ldw	r2,40(r2)
   36194:	10800104 	addi	r2,r2,4
   36198:	10800037 	ldwio	r2,0(r2)
   3619c:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   361a0:	e0bff917 	ldw	r2,-28(fp)
   361a4:	10800a17 	ldw	r2,40(r2)
   361a8:	10800037 	ldwio	r2,0(r2)
   361ac:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
   361b0:	e0bff917 	ldw	r2,-28(fp)
   361b4:	10800e17 	ldw	r2,56(r2)
   361b8:	10001126 	beq	r2,zero,36200 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   361bc:	0005303a 	rdctl	r2,status
   361c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   361c4:	e0fffb17 	ldw	r3,-20(fp)
   361c8:	00bfff84 	movi	r2,-2
   361cc:	1884703a 	and	r2,r3,r2
   361d0:	1001703a 	wrctl	status,r2
  
  return context;
   361d4:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
   361d8:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
   361dc:	e0bff917 	ldw	r2,-28(fp)
   361e0:	10800e17 	ldw	r2,56(r2)
   361e4:	e0fffd04 	addi	r3,fp,-12
   361e8:	1809883a 	mov	r4,r3
   361ec:	103ee83a 	callr	r2
   361f0:	e0bffa17 	ldw	r2,-24(fp)
   361f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   361f8:	e0bffc17 	ldw	r2,-16(fp)
   361fc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
   36200:	0001883a 	nop
   36204:	e037883a 	mov	sp,fp
   36208:	dfc00117 	ldw	ra,4(sp)
   3620c:	df000017 	ldw	fp,0(sp)
   36210:	dec00204 	addi	sp,sp,8
   36214:	f800283a 	ret

00036218 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
   36218:	defffb04 	addi	sp,sp,-20
   3621c:	dfc00415 	stw	ra,16(sp)
   36220:	df000315 	stw	fp,12(sp)
   36224:	df000304 	addi	fp,sp,12
   36228:	e13ffd15 	stw	r4,-12(fp)
   3622c:	e17ffe15 	stw	r5,-8(fp)
   36230:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
   36234:	d1600f04 	addi	r5,gp,-32708
   36238:	e13ffd17 	ldw	r4,-12(fp)
   3623c:	00374b80 	call	374b8 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
   36240:	e0ffff17 	ldw	r3,-4(fp)
   36244:	e0bffd17 	ldw	r2,-12(fp)
   36248:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
   3624c:	e0fffe17 	ldw	r3,-8(fp)
   36250:	e0bffd17 	ldw	r2,-12(fp)
   36254:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
   36258:	e0bffd17 	ldw	r2,-12(fp)
   3625c:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
   36260:	e0bffd17 	ldw	r2,-12(fp)
   36264:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
   36268:	e0bffd17 	ldw	r2,-12(fp)
   3626c:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
   36270:	e13ffd17 	ldw	r4,-12(fp)
   36274:	0035f300 	call	35f30 <altera_avalon_mailbox_identify>
}
   36278:	0001883a 	nop
   3627c:	e037883a 	mov	sp,fp
   36280:	dfc00117 	ldw	ra,4(sp)
   36284:	df000017 	ldw	fp,0(sp)
   36288:	dec00204 	addi	sp,sp,8
   3628c:	f800283a 	ret

00036290 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
   36290:	defff804 	addi	sp,sp,-32
   36294:	dfc00715 	stw	ra,28(sp)
   36298:	df000615 	stw	fp,24(sp)
   3629c:	df000604 	addi	fp,sp,24
   362a0:	e13ffd15 	stw	r4,-12(fp)
   362a4:	e17ffe15 	stw	r5,-8(fp)
   362a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
   362ac:	d1600f04 	addi	r5,gp,-32708
   362b0:	e13ffd17 	ldw	r4,-12(fp)
   362b4:	003761c0 	call	3761c <alt_find_dev>
   362b8:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
   362bc:	e0bffb17 	ldw	r2,-20(fp)
   362c0:	1000021e 	bne	r2,zero,362cc <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
   362c4:	0005883a 	mov	r2,zero
   362c8:	00006506 	br	36460 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   362cc:	e0bffb17 	ldw	r2,-20(fp)
   362d0:	10800a17 	ldw	r2,40(r2)
   362d4:	10800304 	addi	r2,r2,12
   362d8:	10800037 	ldwio	r2,0(r2)
   362dc:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
   362e0:	e0bffb17 	ldw	r2,-20(fp)
   362e4:	10800f17 	ldw	r2,60(r2)
   362e8:	1000081e 	bne	r2,zero,3630c <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   362ec:	e0bffb17 	ldw	r2,-20(fp)
   362f0:	10800a17 	ldw	r2,40(r2)
   362f4:	10800304 	addi	r2,r2,12
   362f8:	1009883a 	mov	r4,r2
   362fc:	e0fffc17 	ldw	r3,-16(fp)
   36300:	00bfff44 	movi	r2,-3
   36304:	1884703a 	and	r2,r3,r2
   36308:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
   3630c:	e0bffb17 	ldw	r2,-20(fp)
   36310:	10800f17 	ldw	r2,60(r2)
   36314:	10800058 	cmpnei	r2,r2,1
   36318:	1000081e 	bne	r2,zero,3633c <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   3631c:	e0bffb17 	ldw	r2,-20(fp)
   36320:	10800a17 	ldw	r2,40(r2)
   36324:	10800304 	addi	r2,r2,12
   36328:	1009883a 	mov	r4,r2
   3632c:	e0fffc17 	ldw	r3,-16(fp)
   36330:	00bfff84 	movi	r2,-2
   36334:	1884703a 	and	r2,r3,r2
   36338:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
   3633c:	e0bffb17 	ldw	r2,-20(fp)
   36340:	10800b17 	ldw	r2,44(r2)
   36344:	10bfffd8 	cmpnei	r2,r2,-1
   36348:	1000021e 	bne	r2,zero,36354 <altera_avalon_mailbox_open+0xc4>
        return dev;
   3634c:	e0bffb17 	ldw	r2,-20(fp)
   36350:	00004306 	br	36460 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
   36354:	e0bffe17 	ldw	r2,-8(fp)
   36358:	1000041e 	bne	r2,zero,3636c <altera_avalon_mailbox_open+0xdc>
   3635c:	e0bfff17 	ldw	r2,-4(fp)
   36360:	1000021e 	bne	r2,zero,3636c <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
   36364:	e0bffb17 	ldw	r2,-20(fp)
   36368:	00003d06 	br	36460 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   3636c:	e0bffb17 	ldw	r2,-20(fp)
   36370:	10800f17 	ldw	r2,60(r2)
   36374:	1000021e 	bne	r2,zero,36380 <altera_avalon_mailbox_open+0xf0>
   36378:	e0bfff17 	ldw	r2,-4(fp)
   3637c:	1000061e 	bne	r2,zero,36398 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   36380:	e0bffb17 	ldw	r2,-20(fp)
   36384:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   36388:	10800058 	cmpnei	r2,r2,1
   3638c:	1000041e 	bne	r2,zero,363a0 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   36390:	e0bffe17 	ldw	r2,-8(fp)
   36394:	10000226 	beq	r2,zero,363a0 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
   36398:	0005883a 	mov	r2,zero
   3639c:	00003006 	br	36460 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
   363a0:	e0bffb17 	ldw	r2,-20(fp)
   363a4:	e0fffe17 	ldw	r3,-8(fp)
   363a8:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
   363ac:	e0bffb17 	ldw	r2,-20(fp)
   363b0:	e0ffff17 	ldw	r3,-4(fp)
   363b4:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
   363b8:	e0bffb17 	ldw	r2,-20(fp)
   363bc:	10800f17 	ldw	r2,60(r2)
   363c0:	10000b1e 	bne	r2,zero,363f0 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
   363c4:	e0bffb17 	ldw	r2,-20(fp)
   363c8:	10c00c17 	ldw	r3,48(r2)
   363cc:	e0bffb17 	ldw	r2,-20(fp)
   363d0:	10800b17 	ldw	r2,44(r2)
   363d4:	d8000015 	stw	zero,0(sp)
   363d8:	e1fffb17 	ldw	r7,-20(fp)
   363dc:	018000f4 	movhi	r6,3
   363e0:	31980e04 	addi	r6,r6,24632
   363e4:	100b883a 	mov	r5,r2
   363e8:	1809883a 	mov	r4,r3
   363ec:	003788c0 	call	3788c <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
   363f0:	e0bffb17 	ldw	r2,-20(fp)
   363f4:	10800f17 	ldw	r2,60(r2)
   363f8:	10800058 	cmpnei	r2,r2,1
   363fc:	1000171e 	bne	r2,zero,3645c <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
   36400:	e0bffb17 	ldw	r2,-20(fp)
   36404:	10c00c17 	ldw	r3,48(r2)
   36408:	e0bffb17 	ldw	r2,-20(fp)
   3640c:	10800b17 	ldw	r2,44(r2)
   36410:	d8000015 	stw	zero,0(sp)
   36414:	e1fffb17 	ldw	r7,-20(fp)
   36418:	018000f4 	movhi	r6,3
   3641c:	31985c04 	addi	r6,r6,24944
   36420:	100b883a 	mov	r5,r2
   36424:	1809883a 	mov	r4,r3
   36428:	003788c0 	call	3788c <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   3642c:	e0bffb17 	ldw	r2,-20(fp)
   36430:	10800a17 	ldw	r2,40(r2)
   36434:	10800304 	addi	r2,r2,12
   36438:	10800037 	ldwio	r2,0(r2)
   3643c:	10800054 	ori	r2,r2,1
   36440:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   36444:	e0bffb17 	ldw	r2,-20(fp)
   36448:	10800a17 	ldw	r2,40(r2)
   3644c:	10800304 	addi	r2,r2,12
   36450:	1007883a 	mov	r3,r2
   36454:	e0bffc17 	ldw	r2,-16(fp)
   36458:	18800035 	stwio	r2,0(r3)
    }
    return dev;
   3645c:	e0bffb17 	ldw	r2,-20(fp)
}
   36460:	e037883a 	mov	sp,fp
   36464:	dfc00117 	ldw	ra,4(sp)
   36468:	df000017 	ldw	fp,0(sp)
   3646c:	dec00204 	addi	sp,sp,8
   36470:	f800283a 	ret

00036474 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
   36474:	defffb04 	addi	sp,sp,-20
   36478:	dfc00415 	stw	ra,16(sp)
   3647c:	df000315 	stw	fp,12(sp)
   36480:	df000304 	addi	fp,sp,12
   36484:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
   36488:	e0bfff17 	ldw	r2,-4(fp)
   3648c:	10003926 	beq	r2,zero,36574 <altera_avalon_mailbox_close+0x100>
   36490:	e0bfff17 	ldw	r2,-4(fp)
   36494:	10800b17 	ldw	r2,44(r2)
   36498:	10bfffe0 	cmpeqi	r2,r2,-1
   3649c:	1000351e 	bne	r2,zero,36574 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
   364a0:	e0bfff17 	ldw	r2,-4(fp)
   364a4:	10800f17 	ldw	r2,60(r2)
   364a8:	10000e1e 	bne	r2,zero,364e4 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   364ac:	e0bfff17 	ldw	r2,-4(fp)
   364b0:	10800a17 	ldw	r2,40(r2)
   364b4:	10800304 	addi	r2,r2,12
   364b8:	10800037 	ldwio	r2,0(r2)
   364bc:	1007883a 	mov	r3,r2
   364c0:	00bfff44 	movi	r2,-3
   364c4:	1884703a 	and	r2,r3,r2
   364c8:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   364cc:	e0bfff17 	ldw	r2,-4(fp)
   364d0:	10800a17 	ldw	r2,40(r2)
   364d4:	10800304 	addi	r2,r2,12
   364d8:	1007883a 	mov	r3,r2
   364dc:	e0bffe17 	ldw	r2,-8(fp)
   364e0:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
   364e4:	e0bfff17 	ldw	r2,-4(fp)
   364e8:	10800f17 	ldw	r2,60(r2)
   364ec:	10800058 	cmpnei	r2,r2,1
   364f0:	10000e1e 	bne	r2,zero,3652c <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   364f4:	e0bfff17 	ldw	r2,-4(fp)
   364f8:	10800a17 	ldw	r2,40(r2)
   364fc:	10800304 	addi	r2,r2,12
   36500:	10800037 	ldwio	r2,0(r2)
   36504:	1007883a 	mov	r3,r2
   36508:	00bfff84 	movi	r2,-2
   3650c:	1884703a 	and	r2,r3,r2
   36510:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   36514:	e0bfff17 	ldw	r2,-4(fp)
   36518:	10800a17 	ldw	r2,40(r2)
   3651c:	10800304 	addi	r2,r2,12
   36520:	1007883a 	mov	r3,r2
   36524:	e0bffe17 	ldw	r2,-8(fp)
   36528:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
   3652c:	e0bfff17 	ldw	r2,-4(fp)
   36530:	10800b17 	ldw	r2,44(r2)
   36534:	10bfffe0 	cmpeqi	r2,r2,-1
   36538:	10000a1e 	bne	r2,zero,36564 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
   3653c:	e0bfff17 	ldw	r2,-4(fp)
   36540:	10c00c17 	ldw	r3,48(r2)
   36544:	e0bfff17 	ldw	r2,-4(fp)
   36548:	10800b17 	ldw	r2,44(r2)
   3654c:	d8000015 	stw	zero,0(sp)
   36550:	e1ffff17 	ldw	r7,-4(fp)
   36554:	000d883a 	mov	r6,zero
   36558:	100b883a 	mov	r5,r2
   3655c:	1809883a 	mov	r4,r3
   36560:	003788c0 	call	3788c <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
   36564:	e0bfff17 	ldw	r2,-4(fp)
   36568:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
   3656c:	e0bfff17 	ldw	r2,-4(fp)
   36570:	10000e15 	stw	zero,56(r2)
    }
}
   36574:	0001883a 	nop
   36578:	e037883a 	mov	sp,fp
   3657c:	dfc00117 	ldw	ra,4(sp)
   36580:	df000017 	ldw	fp,0(sp)
   36584:	dec00204 	addi	sp,sp,8
   36588:	f800283a 	ret

0003658c <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
   3658c:	defffd04 	addi	sp,sp,-12
   36590:	df000215 	stw	fp,8(sp)
   36594:	df000204 	addi	fp,sp,8
   36598:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
   3659c:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
   365a0:	e0bfff17 	ldw	r2,-4(fp)
   365a4:	10800a17 	ldw	r2,40(r2)
   365a8:	10800204 	addi	r2,r2,8
   365ac:	10800037 	ldwio	r2,0(r2)
   365b0:	108000cc 	andi	r2,r2,3
   365b4:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
   365b8:	e0bfff17 	ldw	r2,-4(fp)
   365bc:	10800f17 	ldw	r2,60(r2)
   365c0:	1000041e 	bne	r2,zero,365d4 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   365c4:	e0bffe17 	ldw	r2,-8(fp)
   365c8:	1080008c 	andi	r2,r2,2
   365cc:	1004d07a 	srli	r2,r2,1
   365d0:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
   365d4:	e0bfff17 	ldw	r2,-4(fp)
   365d8:	10800f17 	ldw	r2,60(r2)
   365dc:	10800058 	cmpnei	r2,r2,1
   365e0:	1000031e 	bne	r2,zero,365f0 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
   365e4:	e0bffe17 	ldw	r2,-8(fp)
   365e8:	1080004c 	andi	r2,r2,1
   365ec:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
   365f0:	e0bffe17 	ldw	r2,-8(fp)
}
   365f4:	e037883a 	mov	sp,fp
   365f8:	df000017 	ldw	fp,0(sp)
   365fc:	dec00104 	addi	sp,sp,4
   36600:	f800283a 	ret

00036604 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
   36604:	defff704 	addi	sp,sp,-36
   36608:	dfc00815 	stw	ra,32(sp)
   3660c:	df000715 	stw	fp,28(sp)
   36610:	df000704 	addi	fp,sp,28
   36614:	e13ffc15 	stw	r4,-16(fp)
   36618:	e17ffd15 	stw	r5,-12(fp)
   3661c:	e1bffe15 	stw	r6,-8(fp)
   36620:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
   36624:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   36628:	e0bffc17 	ldw	r2,-16(fp)
   3662c:	10801103 	ldbu	r2,68(r2)
   36630:	10803fcc 	andi	r2,r2,255
   36634:	1000061e 	bne	r2,zero,36650 <altera_avalon_mailbox_send+0x4c>
   36638:	e0bffc17 	ldw	r2,-16(fp)
   3663c:	10800a17 	ldw	r2,40(r2)
   36640:	10800204 	addi	r2,r2,8
   36644:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
   36648:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   3664c:	10000226 	beq	r2,zero,36658 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
   36650:	00bfffc4 	movi	r2,-1
   36654:	00003a06 	br	36740 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
   36658:	e0bffc17 	ldw	r2,-16(fp)
   3665c:	e0fffd17 	ldw	r3,-12(fp)
   36660:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
   36664:	e0bffc17 	ldw	r2,-16(fp)
   36668:	00c00044 	movi	r3,1
   3666c:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
   36670:	e0bffc17 	ldw	r2,-16(fp)
   36674:	10800b17 	ldw	r2,44(r2)
   36678:	10bfffe0 	cmpeqi	r2,r2,-1
   3667c:	1000031e 	bne	r2,zero,3668c <altera_avalon_mailbox_send+0x88>
   36680:	e0bfff17 	ldw	r2,-4(fp)
   36684:	10800058 	cmpnei	r2,r2,1
   36688:	1000201e 	bne	r2,zero,3670c <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
   3668c:	e0bffe17 	ldw	r2,-8(fp)
   36690:	1000061e 	bne	r2,zero,366ac <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   36694:	e13ffc17 	ldw	r4,-16(fp)
   36698:	003658c0 	call	3658c <altera_avalon_mailbox_status>
   3669c:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
   366a0:	e0bffb17 	ldw	r2,-20(fp)
   366a4:	103ffb1e 	bne	r2,zero,36694 <altera_avalon_mailbox_send+0x90>
   366a8:	00000e06 	br	366e4 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   366ac:	e13ffc17 	ldw	r4,-16(fp)
   366b0:	003658c0 	call	3658c <altera_avalon_mailbox_status>
   366b4:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
   366b8:	e0bffe17 	ldw	r2,-8(fp)
   366bc:	10bfffc4 	addi	r2,r2,-1
   366c0:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
   366c4:	e0bffb17 	ldw	r2,-20(fp)
   366c8:	10000226 	beq	r2,zero,366d4 <altera_avalon_mailbox_send+0xd0>
   366cc:	e0bffe17 	ldw	r2,-8(fp)
   366d0:	103ff61e 	bne	r2,zero,366ac <altera_avalon_mailbox_send+0xa8>
            if (timeout == 0)
   366d4:	e0bffe17 	ldw	r2,-8(fp)
   366d8:	1000021e 	bne	r2,zero,366e4 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
   366dc:	00bff084 	movi	r2,-62
   366e0:	00001706 	br	36740 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
   366e4:	e17ffd17 	ldw	r5,-12(fp)
   366e8:	e13ffc17 	ldw	r4,-16(fp)
   366ec:	0035fc00 	call	35fc0 <altera_avalon_mailbox_post>
   366f0:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   366f4:	e0bffc17 	ldw	r2,-16(fp)
   366f8:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
   366fc:	e0bffc17 	ldw	r2,-16(fp)
   36700:	10001105 	stb	zero,68(r2)
        return status;
   36704:	e0bff917 	ldw	r2,-28(fp)
   36708:	00000d06 	br	36740 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   3670c:	e0bffc17 	ldw	r2,-16(fp)
   36710:	10800a17 	ldw	r2,40(r2)
   36714:	10800304 	addi	r2,r2,12
   36718:	10800037 	ldwio	r2,0(r2)
   3671c:	10800094 	ori	r2,r2,2
   36720:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   36724:	e0bffc17 	ldw	r2,-16(fp)
   36728:	10800a17 	ldw	r2,40(r2)
   3672c:	10800304 	addi	r2,r2,12
   36730:	1007883a 	mov	r3,r2
   36734:	e0bffa17 	ldw	r2,-24(fp)
   36738:	18800035 	stwio	r2,0(r3)
    }
  return 0;
   3673c:	0005883a 	mov	r2,zero
}
   36740:	e037883a 	mov	sp,fp
   36744:	dfc00117 	ldw	ra,4(sp)
   36748:	df000017 	ldw	fp,0(sp)
   3674c:	dec00204 	addi	sp,sp,8
   36750:	f800283a 	ret

00036754 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
   36754:	defff904 	addi	sp,sp,-28
   36758:	dfc00615 	stw	ra,24(sp)
   3675c:	df000515 	stw	fp,20(sp)
   36760:	df000504 	addi	fp,sp,20
   36764:	e13ffd15 	stw	r4,-12(fp)
   36768:	e17ffe15 	stw	r5,-8(fp)
   3676c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
   36770:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
   36774:	e0bffd17 	ldw	r2,-12(fp)
   36778:	10003a26 	beq	r2,zero,36864 <altera_avalon_mailbox_retrieve_poll+0x110>
   3677c:	e0bffe17 	ldw	r2,-8(fp)
   36780:	10003826 	beq	r2,zero,36864 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   36784:	e0bffd17 	ldw	r2,-12(fp)
   36788:	10800a17 	ldw	r2,40(r2)
   3678c:	10800304 	addi	r2,r2,12
   36790:	10800037 	ldwio	r2,0(r2)
   36794:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
   36798:	e0bffd17 	ldw	r2,-12(fp)
   3679c:	10800a17 	ldw	r2,40(r2)
   367a0:	10800304 	addi	r2,r2,12
   367a4:	1009883a 	mov	r4,r2
   367a8:	e0fffc17 	ldw	r3,-16(fp)
   367ac:	00bfff84 	movi	r2,-2
   367b0:	1884703a 	and	r2,r3,r2
   367b4:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
   367b8:	e0bfff17 	ldw	r2,-4(fp)
   367bc:	1000061e 	bne	r2,zero,367d8 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
   367c0:	e13ffd17 	ldw	r4,-12(fp)
   367c4:	003658c0 	call	3658c <altera_avalon_mailbox_status>
   367c8:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
   367cc:	e0bffb17 	ldw	r2,-20(fp)
   367d0:	103ffb26 	beq	r2,zero,367c0 <altera_avalon_mailbox_retrieve_poll+0x6c>
   367d4:	00000a06 	br	36800 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
   367d8:	e13ffd17 	ldw	r4,-12(fp)
   367dc:	003658c0 	call	3658c <altera_avalon_mailbox_status>
   367e0:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
   367e4:	e0bfff17 	ldw	r2,-4(fp)
   367e8:	10bfffc4 	addi	r2,r2,-1
   367ec:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
   367f0:	e0bffb17 	ldw	r2,-20(fp)
   367f4:	1000021e 	bne	r2,zero,36800 <altera_avalon_mailbox_retrieve_poll+0xac>
   367f8:	e0bfff17 	ldw	r2,-4(fp)
   367fc:	103ff61e 	bne	r2,zero,367d8 <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
   36800:	e0bffb17 	ldw	r2,-20(fp)
   36804:	10000d26 	beq	r2,zero,3683c <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   36808:	e0bffe17 	ldw	r2,-8(fp)
   3680c:	10800104 	addi	r2,r2,4
   36810:	e0fffd17 	ldw	r3,-12(fp)
   36814:	18c00a17 	ldw	r3,40(r3)
   36818:	18c00104 	addi	r3,r3,4
   3681c:	18c00037 	ldwio	r3,0(r3)
   36820:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   36824:	e0bffd17 	ldw	r2,-12(fp)
   36828:	10800a17 	ldw	r2,40(r2)
   3682c:	10800037 	ldwio	r2,0(r2)
   36830:	1007883a 	mov	r3,r2
   36834:	e0bffe17 	ldw	r2,-8(fp)
   36838:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   3683c:	e0bffd17 	ldw	r2,-12(fp)
   36840:	10800a17 	ldw	r2,40(r2)
   36844:	10800304 	addi	r2,r2,12
   36848:	1007883a 	mov	r3,r2
   3684c:	e0bffc17 	ldw	r2,-16(fp)
   36850:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
   36854:	e0bffb17 	ldw	r2,-20(fp)
   36858:	10000226 	beq	r2,zero,36864 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
   3685c:	0005883a 	mov	r2,zero
   36860:	00000606 	br	3687c <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
   36864:	e0bffe17 	ldw	r2,-8(fp)
   36868:	10800104 	addi	r2,r2,4
   3686c:	10000015 	stw	zero,0(r2)
      message[0] = 0;
   36870:	e0bffe17 	ldw	r2,-8(fp)
   36874:	10000015 	stw	zero,0(r2)
      return -EINVAL;
   36878:	00bffa84 	movi	r2,-22
}
   3687c:	e037883a 	mov	sp,fp
   36880:	dfc00117 	ldw	ra,4(sp)
   36884:	df000017 	ldw	fp,0(sp)
   36888:	dec00204 	addi	sp,sp,8
   3688c:	f800283a 	ret

00036890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   36890:	defffe04 	addi	sp,sp,-8
   36894:	dfc00115 	stw	ra,4(sp)
   36898:	df000015 	stw	fp,0(sp)
   3689c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   368a0:	d0a00d17 	ldw	r2,-32716(gp)
   368a4:	10000326 	beq	r2,zero,368b4 <alt_get_errno+0x24>
   368a8:	d0a00d17 	ldw	r2,-32716(gp)
   368ac:	103ee83a 	callr	r2
   368b0:	00000106 	br	368b8 <alt_get_errno+0x28>
   368b4:	d0ab0204 	addi	r2,gp,-21496
}
   368b8:	e037883a 	mov	sp,fp
   368bc:	dfc00117 	ldw	ra,4(sp)
   368c0:	df000017 	ldw	fp,0(sp)
   368c4:	dec00204 	addi	sp,sp,8
   368c8:	f800283a 	ret

000368cc <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   368cc:	defff904 	addi	sp,sp,-28
   368d0:	df000615 	stw	fp,24(sp)
   368d4:	df000604 	addi	fp,sp,24
   368d8:	e13ffe15 	stw	r4,-8(fp)
   368dc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
   368e0:	00bfffc4 	movi	r2,-1
   368e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
   368e8:	0005317a 	rdctl	r2,cpuid
   368ec:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   368f0:	e0bffb17 	ldw	r2,-20(fp)
   368f4:	1006943a 	slli	r3,r2,16
   368f8:	e0bfff17 	ldw	r2,-4(fp)
   368fc:	1884b03a 	or	r2,r3,r2
   36900:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   36904:	e0bffe17 	ldw	r2,-8(fp)
   36908:	10800317 	ldw	r2,12(r2)
   3690c:	e0fffc17 	ldw	r3,-16(fp)
   36910:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   36914:	e0bffe17 	ldw	r2,-8(fp)
   36918:	10800317 	ldw	r2,12(r2)
   3691c:	10800037 	ldwio	r2,0(r2)
   36920:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
   36924:	e0fffd17 	ldw	r3,-12(fp)
   36928:	e0bffc17 	ldw	r2,-16(fp)
   3692c:	1880011e 	bne	r3,r2,36934 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
   36930:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
   36934:	e0bffa17 	ldw	r2,-24(fp)
}
   36938:	e037883a 	mov	sp,fp
   3693c:	df000017 	ldw	fp,0(sp)
   36940:	dec00104 	addi	sp,sp,4
   36944:	f800283a 	ret

00036948 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   36948:	defffc04 	addi	sp,sp,-16
   3694c:	dfc00315 	stw	ra,12(sp)
   36950:	df000215 	stw	fp,8(sp)
   36954:	df000204 	addi	fp,sp,8
   36958:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   3695c:	d1601104 	addi	r5,gp,-32700
   36960:	e13fff17 	ldw	r4,-4(fp)
   36964:	003761c0 	call	3761c <alt_find_dev>
   36968:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
   3696c:	e0bffe17 	ldw	r2,-8(fp)
   36970:	1000041e 	bne	r2,zero,36984 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   36974:	00368900 	call	36890 <alt_get_errno>
   36978:	1007883a 	mov	r3,r2
   3697c:	008004c4 	movi	r2,19
   36980:	18800015 	stw	r2,0(r3)
  }

  return dev;
   36984:	e0bffe17 	ldw	r2,-8(fp)
}
   36988:	e037883a 	mov	sp,fp
   3698c:	dfc00117 	ldw	ra,4(sp)
   36990:	df000017 	ldw	fp,0(sp)
   36994:	dec00204 	addi	sp,sp,8
   36998:	f800283a 	ret

0003699c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
   3699c:	defffe04 	addi	sp,sp,-8
   369a0:	df000115 	stw	fp,4(sp)
   369a4:	df000104 	addi	fp,sp,4
   369a8:	e13fff15 	stw	r4,-4(fp)
  return;
   369ac:	0001883a 	nop
}
   369b0:	e037883a 	mov	sp,fp
   369b4:	df000017 	ldw	fp,0(sp)
   369b8:	dec00104 	addi	sp,sp,4
   369bc:	f800283a 	ret

000369c0 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   369c0:	defffc04 	addi	sp,sp,-16
   369c4:	dfc00315 	stw	ra,12(sp)
   369c8:	df000215 	stw	fp,8(sp)
   369cc:	df000204 	addi	fp,sp,8
   369d0:	e13ffe15 	stw	r4,-8(fp)
   369d4:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   369d8:	0001883a 	nop
   369dc:	e17fff17 	ldw	r5,-4(fp)
   369e0:	e13ffe17 	ldw	r4,-8(fp)
   369e4:	00368cc0 	call	368cc <alt_mutex_trylock>
   369e8:	103ffc1e 	bne	r2,zero,369dc <altera_avalon_mutex_lock+0x1c>
}
   369ec:	0001883a 	nop
   369f0:	e037883a 	mov	sp,fp
   369f4:	dfc00117 	ldw	ra,4(sp)
   369f8:	df000017 	ldw	fp,0(sp)
   369fc:	dec00204 	addi	sp,sp,8
   36a00:	f800283a 	ret

00036a04 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   36a04:	defffa04 	addi	sp,sp,-24
   36a08:	dfc00515 	stw	ra,20(sp)
   36a0c:	df000415 	stw	fp,16(sp)
   36a10:	df000404 	addi	fp,sp,16
   36a14:	e13ffd15 	stw	r4,-12(fp)
   36a18:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   36a1c:	e17ffe17 	ldw	r5,-8(fp)
   36a20:	e13ffd17 	ldw	r4,-12(fp)
   36a24:	00368cc0 	call	368cc <alt_mutex_trylock>
   36a28:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
   36a2c:	e0bffc17 	ldw	r2,-16(fp)
}
   36a30:	e037883a 	mov	sp,fp
   36a34:	dfc00117 	ldw	ra,4(sp)
   36a38:	df000017 	ldw	fp,0(sp)
   36a3c:	dec00204 	addi	sp,sp,8
   36a40:	f800283a 	ret

00036a44 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
   36a44:	defffd04 	addi	sp,sp,-12
   36a48:	df000215 	stw	fp,8(sp)
   36a4c:	df000204 	addi	fp,sp,8
   36a50:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   36a54:	0005317a 	rdctl	r2,cpuid
   36a58:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   36a5c:	e0bfff17 	ldw	r2,-4(fp)
   36a60:	10800317 	ldw	r2,12(r2)
   36a64:	10800104 	addi	r2,r2,4
   36a68:	00c00044 	movi	r3,1
   36a6c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   36a70:	e0bfff17 	ldw	r2,-4(fp)
   36a74:	10800317 	ldw	r2,12(r2)
   36a78:	e0fffe17 	ldw	r3,-8(fp)
   36a7c:	1806943a 	slli	r3,r3,16
   36a80:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   36a84:	0001883a 	nop
   36a88:	e037883a 	mov	sp,fp
   36a8c:	df000017 	ldw	fp,0(sp)
   36a90:	dec00104 	addi	sp,sp,4
   36a94:	f800283a 	ret

00036a98 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
   36a98:	defff904 	addi	sp,sp,-28
   36a9c:	df000615 	stw	fp,24(sp)
   36aa0:	df000604 	addi	fp,sp,24
   36aa4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
   36aa8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
   36aac:	0005317a 	rdctl	r2,cpuid
   36ab0:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   36ab4:	e0bfff17 	ldw	r2,-4(fp)
   36ab8:	10800317 	ldw	r2,12(r2)
   36abc:	10800037 	ldwio	r2,0(r2)
   36ac0:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
   36ac4:	e0bffc17 	ldw	r2,-16(fp)
   36ac8:	1004d43a 	srli	r2,r2,16
   36acc:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   36ad0:	e0fffd17 	ldw	r3,-12(fp)
   36ad4:	e0bffb17 	ldw	r2,-20(fp)
   36ad8:	1880071e 	bne	r3,r2,36af8 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
   36adc:	e0bffc17 	ldw	r2,-16(fp)
   36ae0:	10bfffcc 	andi	r2,r2,65535
   36ae4:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
   36ae8:	e0bffe17 	ldw	r2,-8(fp)
   36aec:	10000226 	beq	r2,zero,36af8 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
   36af0:	00800044 	movi	r2,1
   36af4:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
   36af8:	e0bffa17 	ldw	r2,-24(fp)
}
   36afc:	e037883a 	mov	sp,fp
   36b00:	df000017 	ldw	fp,0(sp)
   36b04:	dec00104 	addi	sp,sp,4
   36b08:	f800283a 	ret

00036b0c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
   36b0c:	defffc04 	addi	sp,sp,-16
   36b10:	df000315 	stw	fp,12(sp)
   36b14:	df000304 	addi	fp,sp,12
   36b18:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
   36b1c:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   36b20:	e0bfff17 	ldw	r2,-4(fp)
   36b24:	10800317 	ldw	r2,12(r2)
   36b28:	10800104 	addi	r2,r2,4
   36b2c:	10800037 	ldwio	r2,0(r2)
   36b30:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
   36b34:	e0bffe17 	ldw	r2,-8(fp)
   36b38:	1080004c 	andi	r2,r2,1
   36b3c:	10000226 	beq	r2,zero,36b48 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
   36b40:	00800044 	movi	r2,1
   36b44:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
   36b48:	e0bffd17 	ldw	r2,-12(fp)
}
   36b4c:	e037883a 	mov	sp,fp
   36b50:	df000017 	ldw	fp,0(sp)
   36b54:	dec00104 	addi	sp,sp,4
   36b58:	f800283a 	ret

00036b5c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   36b5c:	defffa04 	addi	sp,sp,-24
   36b60:	dfc00515 	stw	ra,20(sp)
   36b64:	df000415 	stw	fp,16(sp)
   36b68:	df000404 	addi	fp,sp,16
   36b6c:	e13ffd15 	stw	r4,-12(fp)
   36b70:	e17ffe15 	stw	r5,-8(fp)
   36b74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   36b78:	e0bffd17 	ldw	r2,-12(fp)
   36b7c:	10800017 	ldw	r2,0(r2)
   36b80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   36b84:	e0bffc17 	ldw	r2,-16(fp)
   36b88:	10c00a04 	addi	r3,r2,40
   36b8c:	e0bffd17 	ldw	r2,-12(fp)
   36b90:	10800217 	ldw	r2,8(r2)
   36b94:	100f883a 	mov	r7,r2
   36b98:	e1bfff17 	ldw	r6,-4(fp)
   36b9c:	e17ffe17 	ldw	r5,-8(fp)
   36ba0:	1809883a 	mov	r4,r3
   36ba4:	00370700 	call	37070 <altera_avalon_uart_read>
      fd->fd_flags);
}
   36ba8:	e037883a 	mov	sp,fp
   36bac:	dfc00117 	ldw	ra,4(sp)
   36bb0:	df000017 	ldw	fp,0(sp)
   36bb4:	dec00204 	addi	sp,sp,8
   36bb8:	f800283a 	ret

00036bbc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   36bbc:	defffa04 	addi	sp,sp,-24
   36bc0:	dfc00515 	stw	ra,20(sp)
   36bc4:	df000415 	stw	fp,16(sp)
   36bc8:	df000404 	addi	fp,sp,16
   36bcc:	e13ffd15 	stw	r4,-12(fp)
   36bd0:	e17ffe15 	stw	r5,-8(fp)
   36bd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   36bd8:	e0bffd17 	ldw	r2,-12(fp)
   36bdc:	10800017 	ldw	r2,0(r2)
   36be0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   36be4:	e0bffc17 	ldw	r2,-16(fp)
   36be8:	10c00a04 	addi	r3,r2,40
   36bec:	e0bffd17 	ldw	r2,-12(fp)
   36bf0:	10800217 	ldw	r2,8(r2)
   36bf4:	100f883a 	mov	r7,r2
   36bf8:	e1bfff17 	ldw	r6,-4(fp)
   36bfc:	e17ffe17 	ldw	r5,-8(fp)
   36c00:	1809883a 	mov	r4,r3
   36c04:	00372880 	call	37288 <altera_avalon_uart_write>
      fd->fd_flags);
}
   36c08:	e037883a 	mov	sp,fp
   36c0c:	dfc00117 	ldw	ra,4(sp)
   36c10:	df000017 	ldw	fp,0(sp)
   36c14:	dec00204 	addi	sp,sp,8
   36c18:	f800283a 	ret

00036c1c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   36c1c:	defffc04 	addi	sp,sp,-16
   36c20:	dfc00315 	stw	ra,12(sp)
   36c24:	df000215 	stw	fp,8(sp)
   36c28:	df000204 	addi	fp,sp,8
   36c2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   36c30:	e0bfff17 	ldw	r2,-4(fp)
   36c34:	10800017 	ldw	r2,0(r2)
   36c38:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   36c3c:	e0bffe17 	ldw	r2,-8(fp)
   36c40:	10c00a04 	addi	r3,r2,40
   36c44:	e0bfff17 	ldw	r2,-4(fp)
   36c48:	10800217 	ldw	r2,8(r2)
   36c4c:	100b883a 	mov	r5,r2
   36c50:	1809883a 	mov	r4,r3
   36c54:	0036fe00 	call	36fe0 <altera_avalon_uart_close>
}
   36c58:	e037883a 	mov	sp,fp
   36c5c:	dfc00117 	ldw	ra,4(sp)
   36c60:	df000017 	ldw	fp,0(sp)
   36c64:	dec00204 	addi	sp,sp,8
   36c68:	f800283a 	ret

00036c6c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   36c6c:	defff804 	addi	sp,sp,-32
   36c70:	dfc00715 	stw	ra,28(sp)
   36c74:	df000615 	stw	fp,24(sp)
   36c78:	df000604 	addi	fp,sp,24
   36c7c:	e13ffd15 	stw	r4,-12(fp)
   36c80:	e17ffe15 	stw	r5,-8(fp)
   36c84:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   36c88:	e0bffd17 	ldw	r2,-12(fp)
   36c8c:	10800017 	ldw	r2,0(r2)
   36c90:	e0bffb15 	stw	r2,-20(fp)
   36c94:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   36c98:	1000041e 	bne	r2,zero,36cac <altera_avalon_uart_init+0x40>
   36c9c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   36ca0:	1000021e 	bne	r2,zero,36cac <altera_avalon_uart_init+0x40>
   36ca4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   36ca8:	10000226 	beq	r2,zero,36cb4 <altera_avalon_uart_init+0x48>
   36cac:	00800044 	movi	r2,1
   36cb0:	00000106 	br	36cb8 <altera_avalon_uart_init+0x4c>
   36cb4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   36cb8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   36cbc:	e0bffc17 	ldw	r2,-16(fp)
   36cc0:	10000f1e 	bne	r2,zero,36d00 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   36cc4:	e0bffd17 	ldw	r2,-12(fp)
   36cc8:	00c32004 	movi	r3,3200
   36ccc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   36cd0:	e0bffb17 	ldw	r2,-20(fp)
   36cd4:	10800304 	addi	r2,r2,12
   36cd8:	e0fffd17 	ldw	r3,-12(fp)
   36cdc:	18c00117 	ldw	r3,4(r3)
   36ce0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   36ce4:	d8000015 	stw	zero,0(sp)
   36ce8:	e1fffd17 	ldw	r7,-12(fp)
   36cec:	018000f4 	movhi	r6,3
   36cf0:	319b4604 	addi	r6,r6,27928
   36cf4:	e17fff17 	ldw	r5,-4(fp)
   36cf8:	e13ffe17 	ldw	r4,-8(fp)
   36cfc:	003788c0 	call	3788c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   36d00:	0001883a 	nop
   36d04:	e037883a 	mov	sp,fp
   36d08:	dfc00117 	ldw	ra,4(sp)
   36d0c:	df000017 	ldw	fp,0(sp)
   36d10:	dec00204 	addi	sp,sp,8
   36d14:	f800283a 	ret

00036d18 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   36d18:	defffa04 	addi	sp,sp,-24
   36d1c:	dfc00515 	stw	ra,20(sp)
   36d20:	df000415 	stw	fp,16(sp)
   36d24:	df000404 	addi	fp,sp,16
   36d28:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   36d2c:	e0bfff17 	ldw	r2,-4(fp)
   36d30:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   36d34:	e0bffc17 	ldw	r2,-16(fp)
   36d38:	10800017 	ldw	r2,0(r2)
   36d3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   36d40:	e0bffd17 	ldw	r2,-12(fp)
   36d44:	10800204 	addi	r2,r2,8
   36d48:	10800037 	ldwio	r2,0(r2)
   36d4c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   36d50:	e0bffd17 	ldw	r2,-12(fp)
   36d54:	10800204 	addi	r2,r2,8
   36d58:	0007883a 	mov	r3,zero
   36d5c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   36d60:	e0bffd17 	ldw	r2,-12(fp)
   36d64:	10800204 	addi	r2,r2,8
   36d68:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   36d6c:	e0bffe17 	ldw	r2,-8(fp)
   36d70:	1080200c 	andi	r2,r2,128
   36d74:	10000326 	beq	r2,zero,36d84 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   36d78:	e17ffe17 	ldw	r5,-8(fp)
   36d7c:	e13ffc17 	ldw	r4,-16(fp)
   36d80:	0036db40 	call	36db4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   36d84:	e0bffe17 	ldw	r2,-8(fp)
   36d88:	1081100c 	andi	r2,r2,1088
   36d8c:	10000326 	beq	r2,zero,36d9c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   36d90:	e17ffe17 	ldw	r5,-8(fp)
   36d94:	e13ffc17 	ldw	r4,-16(fp)
   36d98:	0036e980 	call	36e98 <altera_avalon_uart_txirq>
  }
  

}
   36d9c:	0001883a 	nop
   36da0:	e037883a 	mov	sp,fp
   36da4:	dfc00117 	ldw	ra,4(sp)
   36da8:	df000017 	ldw	fp,0(sp)
   36dac:	dec00204 	addi	sp,sp,8
   36db0:	f800283a 	ret

00036db4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   36db4:	defffc04 	addi	sp,sp,-16
   36db8:	df000315 	stw	fp,12(sp)
   36dbc:	df000304 	addi	fp,sp,12
   36dc0:	e13ffe15 	stw	r4,-8(fp)
   36dc4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   36dc8:	e0bfff17 	ldw	r2,-4(fp)
   36dcc:	108000cc 	andi	r2,r2,3
   36dd0:	10002c1e 	bne	r2,zero,36e84 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   36dd4:	e0bffe17 	ldw	r2,-8(fp)
   36dd8:	10800317 	ldw	r2,12(r2)
   36ddc:	e0bffe17 	ldw	r2,-8(fp)
   36de0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   36de4:	e0bffe17 	ldw	r2,-8(fp)
   36de8:	10800317 	ldw	r2,12(r2)
   36dec:	10800044 	addi	r2,r2,1
   36df0:	10800fcc 	andi	r2,r2,63
   36df4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   36df8:	e0bffe17 	ldw	r2,-8(fp)
   36dfc:	10800317 	ldw	r2,12(r2)
   36e00:	e0fffe17 	ldw	r3,-8(fp)
   36e04:	18c00017 	ldw	r3,0(r3)
   36e08:	18c00037 	ldwio	r3,0(r3)
   36e0c:	1809883a 	mov	r4,r3
   36e10:	e0fffe17 	ldw	r3,-8(fp)
   36e14:	1885883a 	add	r2,r3,r2
   36e18:	10800704 	addi	r2,r2,28
   36e1c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   36e20:	e0bffe17 	ldw	r2,-8(fp)
   36e24:	e0fffd17 	ldw	r3,-12(fp)
   36e28:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   36e2c:	e0bffe17 	ldw	r2,-8(fp)
   36e30:	10800317 	ldw	r2,12(r2)
   36e34:	10800044 	addi	r2,r2,1
   36e38:	10800fcc 	andi	r2,r2,63
   36e3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   36e40:	e0bffe17 	ldw	r2,-8(fp)
   36e44:	10c00217 	ldw	r3,8(r2)
   36e48:	e0bffd17 	ldw	r2,-12(fp)
   36e4c:	18800e1e 	bne	r3,r2,36e88 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   36e50:	e0bffe17 	ldw	r2,-8(fp)
   36e54:	10c00117 	ldw	r3,4(r2)
   36e58:	00bfdfc4 	movi	r2,-129
   36e5c:	1886703a 	and	r3,r3,r2
   36e60:	e0bffe17 	ldw	r2,-8(fp)
   36e64:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   36e68:	e0bffe17 	ldw	r2,-8(fp)
   36e6c:	10800017 	ldw	r2,0(r2)
   36e70:	10800304 	addi	r2,r2,12
   36e74:	e0fffe17 	ldw	r3,-8(fp)
   36e78:	18c00117 	ldw	r3,4(r3)
   36e7c:	10c00035 	stwio	r3,0(r2)
   36e80:	00000106 	br	36e88 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   36e84:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   36e88:	e037883a 	mov	sp,fp
   36e8c:	df000017 	ldw	fp,0(sp)
   36e90:	dec00104 	addi	sp,sp,4
   36e94:	f800283a 	ret

00036e98 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   36e98:	defffb04 	addi	sp,sp,-20
   36e9c:	df000415 	stw	fp,16(sp)
   36ea0:	df000404 	addi	fp,sp,16
   36ea4:	e13ffc15 	stw	r4,-16(fp)
   36ea8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   36eac:	e0bffc17 	ldw	r2,-16(fp)
   36eb0:	10c00417 	ldw	r3,16(r2)
   36eb4:	e0bffc17 	ldw	r2,-16(fp)
   36eb8:	10800517 	ldw	r2,20(r2)
   36ebc:	18803226 	beq	r3,r2,36f88 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   36ec0:	e0bffc17 	ldw	r2,-16(fp)
   36ec4:	10800617 	ldw	r2,24(r2)
   36ec8:	1080008c 	andi	r2,r2,2
   36ecc:	10000326 	beq	r2,zero,36edc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   36ed0:	e0bffd17 	ldw	r2,-12(fp)
   36ed4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   36ed8:	10001d26 	beq	r2,zero,36f50 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   36edc:	e0bffc17 	ldw	r2,-16(fp)
   36ee0:	10800417 	ldw	r2,16(r2)
   36ee4:	e0bffc17 	ldw	r2,-16(fp)
   36ee8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   36eec:	e0bffc17 	ldw	r2,-16(fp)
   36ef0:	10800017 	ldw	r2,0(r2)
   36ef4:	10800104 	addi	r2,r2,4
   36ef8:	e0fffc17 	ldw	r3,-16(fp)
   36efc:	18c00417 	ldw	r3,16(r3)
   36f00:	e13ffc17 	ldw	r4,-16(fp)
   36f04:	20c7883a 	add	r3,r4,r3
   36f08:	18c01704 	addi	r3,r3,92
   36f0c:	18c00003 	ldbu	r3,0(r3)
   36f10:	18c03fcc 	andi	r3,r3,255
   36f14:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   36f18:	e0bffc17 	ldw	r2,-16(fp)
   36f1c:	10800417 	ldw	r2,16(r2)
   36f20:	10800044 	addi	r2,r2,1
   36f24:	e0fffc17 	ldw	r3,-16(fp)
   36f28:	18800415 	stw	r2,16(r3)
   36f2c:	10c00fcc 	andi	r3,r2,63
   36f30:	e0bffc17 	ldw	r2,-16(fp)
   36f34:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   36f38:	e0bffc17 	ldw	r2,-16(fp)
   36f3c:	10800117 	ldw	r2,4(r2)
   36f40:	10c01014 	ori	r3,r2,64
   36f44:	e0bffc17 	ldw	r2,-16(fp)
   36f48:	10c00115 	stw	r3,4(r2)
   36f4c:	00000e06 	br	36f88 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   36f50:	e0bffc17 	ldw	r2,-16(fp)
   36f54:	10800017 	ldw	r2,0(r2)
   36f58:	10800204 	addi	r2,r2,8
   36f5c:	10800037 	ldwio	r2,0(r2)
   36f60:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   36f64:	e0bffd17 	ldw	r2,-12(fp)
   36f68:	1082000c 	andi	r2,r2,2048
   36f6c:	1000061e 	bne	r2,zero,36f88 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   36f70:	e0bffc17 	ldw	r2,-16(fp)
   36f74:	10c00117 	ldw	r3,4(r2)
   36f78:	00bfefc4 	movi	r2,-65
   36f7c:	1886703a 	and	r3,r3,r2
   36f80:	e0bffc17 	ldw	r2,-16(fp)
   36f84:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   36f88:	e0bffc17 	ldw	r2,-16(fp)
   36f8c:	10c00417 	ldw	r3,16(r2)
   36f90:	e0bffc17 	ldw	r2,-16(fp)
   36f94:	10800517 	ldw	r2,20(r2)
   36f98:	1880061e 	bne	r3,r2,36fb4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   36f9c:	e0bffc17 	ldw	r2,-16(fp)
   36fa0:	10c00117 	ldw	r3,4(r2)
   36fa4:	00beefc4 	movi	r2,-1089
   36fa8:	1886703a 	and	r3,r3,r2
   36fac:	e0bffc17 	ldw	r2,-16(fp)
   36fb0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   36fb4:	e0bffc17 	ldw	r2,-16(fp)
   36fb8:	10800017 	ldw	r2,0(r2)
   36fbc:	10800304 	addi	r2,r2,12
   36fc0:	e0fffc17 	ldw	r3,-16(fp)
   36fc4:	18c00117 	ldw	r3,4(r3)
   36fc8:	10c00035 	stwio	r3,0(r2)
}
   36fcc:	0001883a 	nop
   36fd0:	e037883a 	mov	sp,fp
   36fd4:	df000017 	ldw	fp,0(sp)
   36fd8:	dec00104 	addi	sp,sp,4
   36fdc:	f800283a 	ret

00036fe0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   36fe0:	defffd04 	addi	sp,sp,-12
   36fe4:	df000215 	stw	fp,8(sp)
   36fe8:	df000204 	addi	fp,sp,8
   36fec:	e13ffe15 	stw	r4,-8(fp)
   36ff0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   36ff4:	00000506 	br	3700c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   36ff8:	e0bfff17 	ldw	r2,-4(fp)
   36ffc:	1090000c 	andi	r2,r2,16384
   37000:	10000226 	beq	r2,zero,3700c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   37004:	00bffd44 	movi	r2,-11
   37008:	00000606 	br	37024 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   3700c:	e0bffe17 	ldw	r2,-8(fp)
   37010:	10c00417 	ldw	r3,16(r2)
   37014:	e0bffe17 	ldw	r2,-8(fp)
   37018:	10800517 	ldw	r2,20(r2)
   3701c:	18bff61e 	bne	r3,r2,36ff8 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   37020:	0005883a 	mov	r2,zero
}
   37024:	e037883a 	mov	sp,fp
   37028:	df000017 	ldw	fp,0(sp)
   3702c:	dec00104 	addi	sp,sp,4
   37030:	f800283a 	ret

00037034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   37034:	defffe04 	addi	sp,sp,-8
   37038:	dfc00115 	stw	ra,4(sp)
   3703c:	df000015 	stw	fp,0(sp)
   37040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   37044:	d0a00d17 	ldw	r2,-32716(gp)
   37048:	10000326 	beq	r2,zero,37058 <alt_get_errno+0x24>
   3704c:	d0a00d17 	ldw	r2,-32716(gp)
   37050:	103ee83a 	callr	r2
   37054:	00000106 	br	3705c <alt_get_errno+0x28>
   37058:	d0ab0204 	addi	r2,gp,-21496
}
   3705c:	e037883a 	mov	sp,fp
   37060:	dfc00117 	ldw	ra,4(sp)
   37064:	df000017 	ldw	fp,0(sp)
   37068:	dec00204 	addi	sp,sp,8
   3706c:	f800283a 	ret

00037070 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   37070:	defff204 	addi	sp,sp,-56
   37074:	dfc00d15 	stw	ra,52(sp)
   37078:	df000c15 	stw	fp,48(sp)
   3707c:	df000c04 	addi	fp,sp,48
   37080:	e13ffc15 	stw	r4,-16(fp)
   37084:	e17ffd15 	stw	r5,-12(fp)
   37088:	e1bffe15 	stw	r6,-8(fp)
   3708c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   37090:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   37094:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   37098:	e0bfff17 	ldw	r2,-4(fp)
   3709c:	1090000c 	andi	r2,r2,16384
   370a0:	1005003a 	cmpeq	r2,r2,zero
   370a4:	10803fcc 	andi	r2,r2,255
   370a8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   370ac:	00001306 	br	370fc <altera_avalon_uart_read+0x8c>
    {
      count++;
   370b0:	e0bff517 	ldw	r2,-44(fp)
   370b4:	10800044 	addi	r2,r2,1
   370b8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   370bc:	e0bffd17 	ldw	r2,-12(fp)
   370c0:	10c00044 	addi	r3,r2,1
   370c4:	e0fffd15 	stw	r3,-12(fp)
   370c8:	e0fffc17 	ldw	r3,-16(fp)
   370cc:	18c00217 	ldw	r3,8(r3)
   370d0:	e13ffc17 	ldw	r4,-16(fp)
   370d4:	20c7883a 	add	r3,r4,r3
   370d8:	18c00704 	addi	r3,r3,28
   370dc:	18c00003 	ldbu	r3,0(r3)
   370e0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   370e4:	e0bffc17 	ldw	r2,-16(fp)
   370e8:	10800217 	ldw	r2,8(r2)
   370ec:	10800044 	addi	r2,r2,1
   370f0:	10c00fcc 	andi	r3,r2,63
   370f4:	e0bffc17 	ldw	r2,-16(fp)
   370f8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   370fc:	e0fff517 	ldw	r3,-44(fp)
   37100:	e0bffe17 	ldw	r2,-8(fp)
   37104:	1880050e 	bge	r3,r2,3711c <altera_avalon_uart_read+0xac>
   37108:	e0bffc17 	ldw	r2,-16(fp)
   3710c:	10c00217 	ldw	r3,8(r2)
   37110:	e0bffc17 	ldw	r2,-16(fp)
   37114:	10800317 	ldw	r2,12(r2)
   37118:	18bfe51e 	bne	r3,r2,370b0 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   3711c:	e0bff517 	ldw	r2,-44(fp)
   37120:	1000251e 	bne	r2,zero,371b8 <altera_avalon_uart_read+0x148>
   37124:	e0bffc17 	ldw	r2,-16(fp)
   37128:	10c00217 	ldw	r3,8(r2)
   3712c:	e0bffc17 	ldw	r2,-16(fp)
   37130:	10800317 	ldw	r2,12(r2)
   37134:	1880201e 	bne	r3,r2,371b8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   37138:	e0bff617 	ldw	r2,-40(fp)
   3713c:	1000071e 	bne	r2,zero,3715c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   37140:	00370340 	call	37034 <alt_get_errno>
   37144:	1007883a 	mov	r3,r2
   37148:	008002c4 	movi	r2,11
   3714c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   37150:	00800044 	movi	r2,1
   37154:	e0bff405 	stb	r2,-48(fp)
        break;
   37158:	00001b06 	br	371c8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3715c:	0005303a 	rdctl	r2,status
   37160:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37164:	e0fff917 	ldw	r3,-28(fp)
   37168:	00bfff84 	movi	r2,-2
   3716c:	1884703a 	and	r2,r3,r2
   37170:	1001703a 	wrctl	status,r2
  
  return context;
   37174:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   37178:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   3717c:	e0bffc17 	ldw	r2,-16(fp)
   37180:	10800117 	ldw	r2,4(r2)
   37184:	10c02014 	ori	r3,r2,128
   37188:	e0bffc17 	ldw	r2,-16(fp)
   3718c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   37190:	e0bffc17 	ldw	r2,-16(fp)
   37194:	10800017 	ldw	r2,0(r2)
   37198:	10800304 	addi	r2,r2,12
   3719c:	e0fffc17 	ldw	r3,-16(fp)
   371a0:	18c00117 	ldw	r3,4(r3)
   371a4:	10c00035 	stwio	r3,0(r2)
   371a8:	e0bff817 	ldw	r2,-32(fp)
   371ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   371b0:	e0bffa17 	ldw	r2,-24(fp)
   371b4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   371b8:	e0bff517 	ldw	r2,-44(fp)
   371bc:	1000021e 	bne	r2,zero,371c8 <altera_avalon_uart_read+0x158>
   371c0:	e0bffe17 	ldw	r2,-8(fp)
   371c4:	103fcd1e 	bne	r2,zero,370fc <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   371c8:	0005303a 	rdctl	r2,status
   371cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   371d0:	e0fffb17 	ldw	r3,-20(fp)
   371d4:	00bfff84 	movi	r2,-2
   371d8:	1884703a 	and	r2,r3,r2
   371dc:	1001703a 	wrctl	status,r2
  
  return context;
   371e0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   371e4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   371e8:	e0bffc17 	ldw	r2,-16(fp)
   371ec:	10800117 	ldw	r2,4(r2)
   371f0:	10c02014 	ori	r3,r2,128
   371f4:	e0bffc17 	ldw	r2,-16(fp)
   371f8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   371fc:	e0bffc17 	ldw	r2,-16(fp)
   37200:	10800017 	ldw	r2,0(r2)
   37204:	10800304 	addi	r2,r2,12
   37208:	e0fffc17 	ldw	r3,-16(fp)
   3720c:	18c00117 	ldw	r3,4(r3)
   37210:	10c00035 	stwio	r3,0(r2)
   37214:	e0bff817 	ldw	r2,-32(fp)
   37218:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3721c:	e0bff717 	ldw	r2,-36(fp)
   37220:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   37224:	e0bff403 	ldbu	r2,-48(fp)
   37228:	10000226 	beq	r2,zero,37234 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   3722c:	00bffd44 	movi	r2,-11
   37230:	00000106 	br	37238 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   37234:	e0bff517 	ldw	r2,-44(fp)
  }
}
   37238:	e037883a 	mov	sp,fp
   3723c:	dfc00117 	ldw	ra,4(sp)
   37240:	df000017 	ldw	fp,0(sp)
   37244:	dec00204 	addi	sp,sp,8
   37248:	f800283a 	ret

0003724c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3724c:	defffe04 	addi	sp,sp,-8
   37250:	dfc00115 	stw	ra,4(sp)
   37254:	df000015 	stw	fp,0(sp)
   37258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3725c:	d0a00d17 	ldw	r2,-32716(gp)
   37260:	10000326 	beq	r2,zero,37270 <alt_get_errno+0x24>
   37264:	d0a00d17 	ldw	r2,-32716(gp)
   37268:	103ee83a 	callr	r2
   3726c:	00000106 	br	37274 <alt_get_errno+0x28>
   37270:	d0ab0204 	addi	r2,gp,-21496
}
   37274:	e037883a 	mov	sp,fp
   37278:	dfc00117 	ldw	ra,4(sp)
   3727c:	df000017 	ldw	fp,0(sp)
   37280:	dec00204 	addi	sp,sp,8
   37284:	f800283a 	ret

00037288 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   37288:	defff204 	addi	sp,sp,-56
   3728c:	dfc00d15 	stw	ra,52(sp)
   37290:	df000c15 	stw	fp,48(sp)
   37294:	df000c04 	addi	fp,sp,48
   37298:	e13ffc15 	stw	r4,-16(fp)
   3729c:	e17ffd15 	stw	r5,-12(fp)
   372a0:	e1bffe15 	stw	r6,-8(fp)
   372a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   372a8:	e0bffe17 	ldw	r2,-8(fp)
   372ac:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   372b0:	e0bfff17 	ldw	r2,-4(fp)
   372b4:	1090000c 	andi	r2,r2,16384
   372b8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   372bc:	00003c06 	br	373b0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   372c0:	e0bffc17 	ldw	r2,-16(fp)
   372c4:	10800517 	ldw	r2,20(r2)
   372c8:	10800044 	addi	r2,r2,1
   372cc:	10800fcc 	andi	r2,r2,63
   372d0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   372d4:	e0bffc17 	ldw	r2,-16(fp)
   372d8:	10c00417 	ldw	r3,16(r2)
   372dc:	e0bff717 	ldw	r2,-36(fp)
   372e0:	1880221e 	bne	r3,r2,3736c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   372e4:	e0bff517 	ldw	r2,-44(fp)
   372e8:	10000526 	beq	r2,zero,37300 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   372ec:	003724c0 	call	3724c <alt_get_errno>
   372f0:	1007883a 	mov	r3,r2
   372f4:	008002c4 	movi	r2,11
   372f8:	18800015 	stw	r2,0(r3)
        break;
   372fc:	00002e06 	br	373b8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   37300:	0005303a 	rdctl	r2,status
   37304:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37308:	e0fff917 	ldw	r3,-28(fp)
   3730c:	00bfff84 	movi	r2,-2
   37310:	1884703a 	and	r2,r3,r2
   37314:	1001703a 	wrctl	status,r2
  
  return context;
   37318:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   3731c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   37320:	e0bffc17 	ldw	r2,-16(fp)
   37324:	10800117 	ldw	r2,4(r2)
   37328:	10c11014 	ori	r3,r2,1088
   3732c:	e0bffc17 	ldw	r2,-16(fp)
   37330:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   37334:	e0bffc17 	ldw	r2,-16(fp)
   37338:	10800017 	ldw	r2,0(r2)
   3733c:	10800304 	addi	r2,r2,12
   37340:	e0fffc17 	ldw	r3,-16(fp)
   37344:	18c00117 	ldw	r3,4(r3)
   37348:	10c00035 	stwio	r3,0(r2)
   3734c:	e0bff817 	ldw	r2,-32(fp)
   37350:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   37354:	e0bff617 	ldw	r2,-40(fp)
   37358:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   3735c:	e0bffc17 	ldw	r2,-16(fp)
   37360:	10c00417 	ldw	r3,16(r2)
   37364:	e0bff717 	ldw	r2,-36(fp)
   37368:	18bffc26 	beq	r3,r2,3735c <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
   3736c:	e0bff417 	ldw	r2,-48(fp)
   37370:	10bfffc4 	addi	r2,r2,-1
   37374:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   37378:	e0bffc17 	ldw	r2,-16(fp)
   3737c:	10c00517 	ldw	r3,20(r2)
   37380:	e0bffd17 	ldw	r2,-12(fp)
   37384:	11000044 	addi	r4,r2,1
   37388:	e13ffd15 	stw	r4,-12(fp)
   3738c:	10800003 	ldbu	r2,0(r2)
   37390:	1009883a 	mov	r4,r2
   37394:	e0bffc17 	ldw	r2,-16(fp)
   37398:	10c5883a 	add	r2,r2,r3
   3739c:	10801704 	addi	r2,r2,92
   373a0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   373a4:	e0bffc17 	ldw	r2,-16(fp)
   373a8:	e0fff717 	ldw	r3,-36(fp)
   373ac:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   373b0:	e0bff417 	ldw	r2,-48(fp)
   373b4:	103fc21e 	bne	r2,zero,372c0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   373b8:	0005303a 	rdctl	r2,status
   373bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   373c0:	e0fffb17 	ldw	r3,-20(fp)
   373c4:	00bfff84 	movi	r2,-2
   373c8:	1884703a 	and	r2,r3,r2
   373cc:	1001703a 	wrctl	status,r2
  
  return context;
   373d0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   373d4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   373d8:	e0bffc17 	ldw	r2,-16(fp)
   373dc:	10800117 	ldw	r2,4(r2)
   373e0:	10c11014 	ori	r3,r2,1088
   373e4:	e0bffc17 	ldw	r2,-16(fp)
   373e8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   373ec:	e0bffc17 	ldw	r2,-16(fp)
   373f0:	10800017 	ldw	r2,0(r2)
   373f4:	10800304 	addi	r2,r2,12
   373f8:	e0fffc17 	ldw	r3,-16(fp)
   373fc:	18c00117 	ldw	r3,4(r3)
   37400:	10c00035 	stwio	r3,0(r2)
   37404:	e0bff817 	ldw	r2,-32(fp)
   37408:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3740c:	e0bffa17 	ldw	r2,-24(fp)
   37410:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   37414:	e0fffe17 	ldw	r3,-8(fp)
   37418:	e0bff417 	ldw	r2,-48(fp)
   3741c:	1885c83a 	sub	r2,r3,r2
}
   37420:	e037883a 	mov	sp,fp
   37424:	dfc00117 	ldw	ra,4(sp)
   37428:	df000017 	ldw	fp,0(sp)
   3742c:	dec00204 	addi	sp,sp,8
   37430:	f800283a 	ret

00037434 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   37434:	defffe04 	addi	sp,sp,-8
   37438:	df000115 	stw	fp,4(sp)
   3743c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   37440:	e03fff15 	stw	zero,-4(fp)
   37444:	00000506 	br	3745c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   37448:	e0bfff17 	ldw	r2,-4(fp)
   3744c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   37450:	e0bfff17 	ldw	r2,-4(fp)
   37454:	10800804 	addi	r2,r2,32
   37458:	e0bfff15 	stw	r2,-4(fp)
   3745c:	e0bfff17 	ldw	r2,-4(fp)
   37460:	10820030 	cmpltui	r2,r2,2048
   37464:	103ff81e 	bne	r2,zero,37448 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   37468:	0001883a 	nop
   3746c:	e037883a 	mov	sp,fp
   37470:	df000017 	ldw	fp,0(sp)
   37474:	dec00104 	addi	sp,sp,4
   37478:	f800283a 	ret

0003747c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3747c:	defffe04 	addi	sp,sp,-8
   37480:	dfc00115 	stw	ra,4(sp)
   37484:	df000015 	stw	fp,0(sp)
   37488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3748c:	d0a00d17 	ldw	r2,-32716(gp)
   37490:	10000326 	beq	r2,zero,374a0 <alt_get_errno+0x24>
   37494:	d0a00d17 	ldw	r2,-32716(gp)
   37498:	103ee83a 	callr	r2
   3749c:	00000106 	br	374a4 <alt_get_errno+0x28>
   374a0:	d0ab0204 	addi	r2,gp,-21496
}
   374a4:	e037883a 	mov	sp,fp
   374a8:	dfc00117 	ldw	ra,4(sp)
   374ac:	df000017 	ldw	fp,0(sp)
   374b0:	dec00204 	addi	sp,sp,8
   374b4:	f800283a 	ret

000374b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   374b8:	defffa04 	addi	sp,sp,-24
   374bc:	dfc00515 	stw	ra,20(sp)
   374c0:	df000415 	stw	fp,16(sp)
   374c4:	df000404 	addi	fp,sp,16
   374c8:	e13ffe15 	stw	r4,-8(fp)
   374cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   374d0:	e0bffe17 	ldw	r2,-8(fp)
   374d4:	10000326 	beq	r2,zero,374e4 <alt_dev_llist_insert+0x2c>
   374d8:	e0bffe17 	ldw	r2,-8(fp)
   374dc:	10800217 	ldw	r2,8(r2)
   374e0:	1000061e 	bne	r2,zero,374fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   374e4:	003747c0 	call	3747c <alt_get_errno>
   374e8:	1007883a 	mov	r3,r2
   374ec:	00800584 	movi	r2,22
   374f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   374f4:	00bffa84 	movi	r2,-22
   374f8:	00001306 	br	37548 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   374fc:	e0bffe17 	ldw	r2,-8(fp)
   37500:	e0ffff17 	ldw	r3,-4(fp)
   37504:	e0fffc15 	stw	r3,-16(fp)
   37508:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3750c:	e0bffd17 	ldw	r2,-12(fp)
   37510:	e0fffc17 	ldw	r3,-16(fp)
   37514:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   37518:	e0bffc17 	ldw	r2,-16(fp)
   3751c:	10c00017 	ldw	r3,0(r2)
   37520:	e0bffd17 	ldw	r2,-12(fp)
   37524:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   37528:	e0bffc17 	ldw	r2,-16(fp)
   3752c:	10800017 	ldw	r2,0(r2)
   37530:	e0fffd17 	ldw	r3,-12(fp)
   37534:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   37538:	e0bffc17 	ldw	r2,-16(fp)
   3753c:	e0fffd17 	ldw	r3,-12(fp)
   37540:	10c00015 	stw	r3,0(r2)

  return 0;  
   37544:	0005883a 	mov	r2,zero
}
   37548:	e037883a 	mov	sp,fp
   3754c:	dfc00117 	ldw	ra,4(sp)
   37550:	df000017 	ldw	fp,0(sp)
   37554:	dec00204 	addi	sp,sp,8
   37558:	f800283a 	ret

0003755c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   3755c:	defffd04 	addi	sp,sp,-12
   37560:	dfc00215 	stw	ra,8(sp)
   37564:	df000115 	stw	fp,4(sp)
   37568:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3756c:	008000f4 	movhi	r2,3
   37570:	109fd804 	addi	r2,r2,32608
   37574:	e0bfff15 	stw	r2,-4(fp)
   37578:	00000606 	br	37594 <_do_ctors+0x38>
        (*ctor) (); 
   3757c:	e0bfff17 	ldw	r2,-4(fp)
   37580:	10800017 	ldw	r2,0(r2)
   37584:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   37588:	e0bfff17 	ldw	r2,-4(fp)
   3758c:	10bfff04 	addi	r2,r2,-4
   37590:	e0bfff15 	stw	r2,-4(fp)
   37594:	e0ffff17 	ldw	r3,-4(fp)
   37598:	008000f4 	movhi	r2,3
   3759c:	109fd904 	addi	r2,r2,32612
   375a0:	18bff62e 	bgeu	r3,r2,3757c <_do_ctors+0x20>
        (*ctor) (); 
}
   375a4:	0001883a 	nop
   375a8:	e037883a 	mov	sp,fp
   375ac:	dfc00117 	ldw	ra,4(sp)
   375b0:	df000017 	ldw	fp,0(sp)
   375b4:	dec00204 	addi	sp,sp,8
   375b8:	f800283a 	ret

000375bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   375bc:	defffd04 	addi	sp,sp,-12
   375c0:	dfc00215 	stw	ra,8(sp)
   375c4:	df000115 	stw	fp,4(sp)
   375c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   375cc:	008000f4 	movhi	r2,3
   375d0:	109fd804 	addi	r2,r2,32608
   375d4:	e0bfff15 	stw	r2,-4(fp)
   375d8:	00000606 	br	375f4 <_do_dtors+0x38>
        (*dtor) (); 
   375dc:	e0bfff17 	ldw	r2,-4(fp)
   375e0:	10800017 	ldw	r2,0(r2)
   375e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   375e8:	e0bfff17 	ldw	r2,-4(fp)
   375ec:	10bfff04 	addi	r2,r2,-4
   375f0:	e0bfff15 	stw	r2,-4(fp)
   375f4:	e0ffff17 	ldw	r3,-4(fp)
   375f8:	008000f4 	movhi	r2,3
   375fc:	109fd904 	addi	r2,r2,32612
   37600:	18bff62e 	bgeu	r3,r2,375dc <_do_dtors+0x20>
        (*dtor) (); 
}
   37604:	0001883a 	nop
   37608:	e037883a 	mov	sp,fp
   3760c:	dfc00117 	ldw	ra,4(sp)
   37610:	df000017 	ldw	fp,0(sp)
   37614:	dec00204 	addi	sp,sp,8
   37618:	f800283a 	ret

0003761c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3761c:	defffa04 	addi	sp,sp,-24
   37620:	dfc00515 	stw	ra,20(sp)
   37624:	df000415 	stw	fp,16(sp)
   37628:	df000404 	addi	fp,sp,16
   3762c:	e13ffe15 	stw	r4,-8(fp)
   37630:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   37634:	e0bfff17 	ldw	r2,-4(fp)
   37638:	10800017 	ldw	r2,0(r2)
   3763c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   37640:	e13ffe17 	ldw	r4,-8(fp)
   37644:	002c6840 	call	2c684 <strlen>
   37648:	10800044 	addi	r2,r2,1
   3764c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   37650:	00000d06 	br	37688 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   37654:	e0bffc17 	ldw	r2,-16(fp)
   37658:	10800217 	ldw	r2,8(r2)
   3765c:	e0fffd17 	ldw	r3,-12(fp)
   37660:	180d883a 	mov	r6,r3
   37664:	e17ffe17 	ldw	r5,-8(fp)
   37668:	1009883a 	mov	r4,r2
   3766c:	0037dd00 	call	37dd0 <memcmp>
   37670:	1000021e 	bne	r2,zero,3767c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   37674:	e0bffc17 	ldw	r2,-16(fp)
   37678:	00000706 	br	37698 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3767c:	e0bffc17 	ldw	r2,-16(fp)
   37680:	10800017 	ldw	r2,0(r2)
   37684:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   37688:	e0fffc17 	ldw	r3,-16(fp)
   3768c:	e0bfff17 	ldw	r2,-4(fp)
   37690:	18bff01e 	bne	r3,r2,37654 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   37694:	0005883a 	mov	r2,zero
}
   37698:	e037883a 	mov	sp,fp
   3769c:	dfc00117 	ldw	ra,4(sp)
   376a0:	df000017 	ldw	fp,0(sp)
   376a4:	dec00204 	addi	sp,sp,8
   376a8:	f800283a 	ret

000376ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   376ac:	defffb04 	addi	sp,sp,-20
   376b0:	dfc00415 	stw	ra,16(sp)
   376b4:	df000315 	stw	fp,12(sp)
   376b8:	df000304 	addi	fp,sp,12
   376bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   376c0:	d0a00817 	ldw	r2,-32736(gp)
   376c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   376c8:	00003106 	br	37790 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   376cc:	e0bffd17 	ldw	r2,-12(fp)
   376d0:	10800217 	ldw	r2,8(r2)
   376d4:	1009883a 	mov	r4,r2
   376d8:	002c6840 	call	2c684 <strlen>
   376dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   376e0:	e0bffd17 	ldw	r2,-12(fp)
   376e4:	10c00217 	ldw	r3,8(r2)
   376e8:	e0bffe17 	ldw	r2,-8(fp)
   376ec:	10bfffc4 	addi	r2,r2,-1
   376f0:	1885883a 	add	r2,r3,r2
   376f4:	10800003 	ldbu	r2,0(r2)
   376f8:	10803fcc 	andi	r2,r2,255
   376fc:	1080201c 	xori	r2,r2,128
   37700:	10bfe004 	addi	r2,r2,-128
   37704:	10800bd8 	cmpnei	r2,r2,47
   37708:	1000031e 	bne	r2,zero,37718 <alt_find_file+0x6c>
    {
      len -= 1;
   3770c:	e0bffe17 	ldw	r2,-8(fp)
   37710:	10bfffc4 	addi	r2,r2,-1
   37714:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   37718:	e0bffe17 	ldw	r2,-8(fp)
   3771c:	e0ffff17 	ldw	r3,-4(fp)
   37720:	1885883a 	add	r2,r3,r2
   37724:	10800003 	ldbu	r2,0(r2)
   37728:	10803fcc 	andi	r2,r2,255
   3772c:	1080201c 	xori	r2,r2,128
   37730:	10bfe004 	addi	r2,r2,-128
   37734:	10800be0 	cmpeqi	r2,r2,47
   37738:	1000081e 	bne	r2,zero,3775c <alt_find_file+0xb0>
   3773c:	e0bffe17 	ldw	r2,-8(fp)
   37740:	e0ffff17 	ldw	r3,-4(fp)
   37744:	1885883a 	add	r2,r3,r2
   37748:	10800003 	ldbu	r2,0(r2)
   3774c:	10803fcc 	andi	r2,r2,255
   37750:	1080201c 	xori	r2,r2,128
   37754:	10bfe004 	addi	r2,r2,-128
   37758:	10000a1e 	bne	r2,zero,37784 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   3775c:	e0bffd17 	ldw	r2,-12(fp)
   37760:	10800217 	ldw	r2,8(r2)
   37764:	e0fffe17 	ldw	r3,-8(fp)
   37768:	180d883a 	mov	r6,r3
   3776c:	e17fff17 	ldw	r5,-4(fp)
   37770:	1009883a 	mov	r4,r2
   37774:	0037dd00 	call	37dd0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   37778:	1000021e 	bne	r2,zero,37784 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3777c:	e0bffd17 	ldw	r2,-12(fp)
   37780:	00000706 	br	377a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   37784:	e0bffd17 	ldw	r2,-12(fp)
   37788:	10800017 	ldw	r2,0(r2)
   3778c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   37790:	e0fffd17 	ldw	r3,-12(fp)
   37794:	d0a00804 	addi	r2,gp,-32736
   37798:	18bfcc1e 	bne	r3,r2,376cc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3779c:	0005883a 	mov	r2,zero
}
   377a0:	e037883a 	mov	sp,fp
   377a4:	dfc00117 	ldw	ra,4(sp)
   377a8:	df000017 	ldw	fp,0(sp)
   377ac:	dec00204 	addi	sp,sp,8
   377b0:	f800283a 	ret

000377b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   377b4:	defffc04 	addi	sp,sp,-16
   377b8:	df000315 	stw	fp,12(sp)
   377bc:	df000304 	addi	fp,sp,12
   377c0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   377c4:	00bffa04 	movi	r2,-24
   377c8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   377cc:	e03ffd15 	stw	zero,-12(fp)
   377d0:	00001906 	br	37838 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   377d4:	00800134 	movhi	r2,4
   377d8:	10adf604 	addi	r2,r2,-18472
   377dc:	e0fffd17 	ldw	r3,-12(fp)
   377e0:	18c00324 	muli	r3,r3,12
   377e4:	10c5883a 	add	r2,r2,r3
   377e8:	10800017 	ldw	r2,0(r2)
   377ec:	10000f1e 	bne	r2,zero,3782c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   377f0:	00800134 	movhi	r2,4
   377f4:	10adf604 	addi	r2,r2,-18472
   377f8:	e0fffd17 	ldw	r3,-12(fp)
   377fc:	18c00324 	muli	r3,r3,12
   37800:	10c5883a 	add	r2,r2,r3
   37804:	e0ffff17 	ldw	r3,-4(fp)
   37808:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   3780c:	d0e00c17 	ldw	r3,-32720(gp)
   37810:	e0bffd17 	ldw	r2,-12(fp)
   37814:	1880020e 	bge	r3,r2,37820 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   37818:	e0bffd17 	ldw	r2,-12(fp)
   3781c:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   37820:	e0bffd17 	ldw	r2,-12(fp)
   37824:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   37828:	00000606 	br	37844 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3782c:	e0bffd17 	ldw	r2,-12(fp)
   37830:	10800044 	addi	r2,r2,1
   37834:	e0bffd15 	stw	r2,-12(fp)
   37838:	e0bffd17 	ldw	r2,-12(fp)
   3783c:	10800810 	cmplti	r2,r2,32
   37840:	103fe41e 	bne	r2,zero,377d4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   37844:	e0bffe17 	ldw	r2,-8(fp)
}
   37848:	e037883a 	mov	sp,fp
   3784c:	df000017 	ldw	fp,0(sp)
   37850:	dec00104 	addi	sp,sp,4
   37854:	f800283a 	ret

00037858 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   37858:	defffe04 	addi	sp,sp,-8
   3785c:	dfc00115 	stw	ra,4(sp)
   37860:	df000015 	stw	fp,0(sp)
   37864:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   37868:	01440004 	movi	r5,4096
   3786c:	0009883a 	mov	r4,zero
   37870:	0037c900 	call	37c90 <alt_icache_flush>
#endif
}
   37874:	0001883a 	nop
   37878:	e037883a 	mov	sp,fp
   3787c:	dfc00117 	ldw	ra,4(sp)
   37880:	df000017 	ldw	fp,0(sp)
   37884:	dec00204 	addi	sp,sp,8
   37888:	f800283a 	ret

0003788c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3788c:	defff904 	addi	sp,sp,-28
   37890:	dfc00615 	stw	ra,24(sp)
   37894:	df000515 	stw	fp,20(sp)
   37898:	df000504 	addi	fp,sp,20
   3789c:	e13ffc15 	stw	r4,-16(fp)
   378a0:	e17ffd15 	stw	r5,-12(fp)
   378a4:	e1bffe15 	stw	r6,-8(fp)
   378a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   378ac:	e0800217 	ldw	r2,8(fp)
   378b0:	d8800015 	stw	r2,0(sp)
   378b4:	e1ffff17 	ldw	r7,-4(fp)
   378b8:	e1bffe17 	ldw	r6,-8(fp)
   378bc:	e17ffd17 	ldw	r5,-12(fp)
   378c0:	e13ffc17 	ldw	r4,-16(fp)
   378c4:	0037a3c0 	call	37a3c <alt_iic_isr_register>
}  
   378c8:	e037883a 	mov	sp,fp
   378cc:	dfc00117 	ldw	ra,4(sp)
   378d0:	df000017 	ldw	fp,0(sp)
   378d4:	dec00204 	addi	sp,sp,8
   378d8:	f800283a 	ret

000378dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   378dc:	defff904 	addi	sp,sp,-28
   378e0:	df000615 	stw	fp,24(sp)
   378e4:	df000604 	addi	fp,sp,24
   378e8:	e13ffe15 	stw	r4,-8(fp)
   378ec:	e17fff15 	stw	r5,-4(fp)
   378f0:	e0bfff17 	ldw	r2,-4(fp)
   378f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   378f8:	0005303a 	rdctl	r2,status
   378fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37900:	e0fffb17 	ldw	r3,-20(fp)
   37904:	00bfff84 	movi	r2,-2
   37908:	1884703a 	and	r2,r3,r2
   3790c:	1001703a 	wrctl	status,r2
  
  return context;
   37910:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   37914:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   37918:	00c00044 	movi	r3,1
   3791c:	e0bffa17 	ldw	r2,-24(fp)
   37920:	1884983a 	sll	r2,r3,r2
   37924:	1007883a 	mov	r3,r2
   37928:	d0ab0c17 	ldw	r2,-21456(gp)
   3792c:	1884b03a 	or	r2,r3,r2
   37930:	d0ab0c15 	stw	r2,-21456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   37934:	d0ab0c17 	ldw	r2,-21456(gp)
   37938:	100170fa 	wrctl	ienable,r2
   3793c:	e0bffc17 	ldw	r2,-16(fp)
   37940:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   37944:	e0bffd17 	ldw	r2,-12(fp)
   37948:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3794c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   37950:	0001883a 	nop
}
   37954:	e037883a 	mov	sp,fp
   37958:	df000017 	ldw	fp,0(sp)
   3795c:	dec00104 	addi	sp,sp,4
   37960:	f800283a 	ret

00037964 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   37964:	defff904 	addi	sp,sp,-28
   37968:	df000615 	stw	fp,24(sp)
   3796c:	df000604 	addi	fp,sp,24
   37970:	e13ffe15 	stw	r4,-8(fp)
   37974:	e17fff15 	stw	r5,-4(fp)
   37978:	e0bfff17 	ldw	r2,-4(fp)
   3797c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   37980:	0005303a 	rdctl	r2,status
   37984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37988:	e0fffb17 	ldw	r3,-20(fp)
   3798c:	00bfff84 	movi	r2,-2
   37990:	1884703a 	and	r2,r3,r2
   37994:	1001703a 	wrctl	status,r2
  
  return context;
   37998:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3799c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   379a0:	00c00044 	movi	r3,1
   379a4:	e0bffa17 	ldw	r2,-24(fp)
   379a8:	1884983a 	sll	r2,r3,r2
   379ac:	0084303a 	nor	r2,zero,r2
   379b0:	1007883a 	mov	r3,r2
   379b4:	d0ab0c17 	ldw	r2,-21456(gp)
   379b8:	1884703a 	and	r2,r3,r2
   379bc:	d0ab0c15 	stw	r2,-21456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   379c0:	d0ab0c17 	ldw	r2,-21456(gp)
   379c4:	100170fa 	wrctl	ienable,r2
   379c8:	e0bffc17 	ldw	r2,-16(fp)
   379cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   379d0:	e0bffd17 	ldw	r2,-12(fp)
   379d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   379d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   379dc:	0001883a 	nop
}
   379e0:	e037883a 	mov	sp,fp
   379e4:	df000017 	ldw	fp,0(sp)
   379e8:	dec00104 	addi	sp,sp,4
   379ec:	f800283a 	ret

000379f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   379f0:	defffc04 	addi	sp,sp,-16
   379f4:	df000315 	stw	fp,12(sp)
   379f8:	df000304 	addi	fp,sp,12
   379fc:	e13ffe15 	stw	r4,-8(fp)
   37a00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   37a04:	000530fa 	rdctl	r2,ienable
   37a08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   37a0c:	00c00044 	movi	r3,1
   37a10:	e0bfff17 	ldw	r2,-4(fp)
   37a14:	1884983a 	sll	r2,r3,r2
   37a18:	1007883a 	mov	r3,r2
   37a1c:	e0bffd17 	ldw	r2,-12(fp)
   37a20:	1884703a 	and	r2,r3,r2
   37a24:	1004c03a 	cmpne	r2,r2,zero
   37a28:	10803fcc 	andi	r2,r2,255
}
   37a2c:	e037883a 	mov	sp,fp
   37a30:	df000017 	ldw	fp,0(sp)
   37a34:	dec00104 	addi	sp,sp,4
   37a38:	f800283a 	ret

00037a3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   37a3c:	defff504 	addi	sp,sp,-44
   37a40:	dfc00a15 	stw	ra,40(sp)
   37a44:	df000915 	stw	fp,36(sp)
   37a48:	df000904 	addi	fp,sp,36
   37a4c:	e13ffc15 	stw	r4,-16(fp)
   37a50:	e17ffd15 	stw	r5,-12(fp)
   37a54:	e1bffe15 	stw	r6,-8(fp)
   37a58:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   37a5c:	00bffa84 	movi	r2,-22
   37a60:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   37a64:	e0bffd17 	ldw	r2,-12(fp)
   37a68:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   37a6c:	e0bff817 	ldw	r2,-32(fp)
   37a70:	10800808 	cmpgei	r2,r2,32
   37a74:	1000271e 	bne	r2,zero,37b14 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   37a78:	0005303a 	rdctl	r2,status
   37a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   37a80:	e0fffb17 	ldw	r3,-20(fp)
   37a84:	00bfff84 	movi	r2,-2
   37a88:	1884703a 	and	r2,r3,r2
   37a8c:	1001703a 	wrctl	status,r2
  
  return context;
   37a90:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   37a94:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   37a98:	00800134 	movhi	r2,4
   37a9c:	10b9b504 	addi	r2,r2,-6444
   37aa0:	e0fff817 	ldw	r3,-32(fp)
   37aa4:	180690fa 	slli	r3,r3,3
   37aa8:	10c5883a 	add	r2,r2,r3
   37aac:	e0fffe17 	ldw	r3,-8(fp)
   37ab0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   37ab4:	00800134 	movhi	r2,4
   37ab8:	10b9b504 	addi	r2,r2,-6444
   37abc:	e0fff817 	ldw	r3,-32(fp)
   37ac0:	180690fa 	slli	r3,r3,3
   37ac4:	10c5883a 	add	r2,r2,r3
   37ac8:	10800104 	addi	r2,r2,4
   37acc:	e0ffff17 	ldw	r3,-4(fp)
   37ad0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   37ad4:	e0bffe17 	ldw	r2,-8(fp)
   37ad8:	10000526 	beq	r2,zero,37af0 <alt_iic_isr_register+0xb4>
   37adc:	e0bff817 	ldw	r2,-32(fp)
   37ae0:	100b883a 	mov	r5,r2
   37ae4:	e13ffc17 	ldw	r4,-16(fp)
   37ae8:	00378dc0 	call	378dc <alt_ic_irq_enable>
   37aec:	00000406 	br	37b00 <alt_iic_isr_register+0xc4>
   37af0:	e0bff817 	ldw	r2,-32(fp)
   37af4:	100b883a 	mov	r5,r2
   37af8:	e13ffc17 	ldw	r4,-16(fp)
   37afc:	00379640 	call	37964 <alt_ic_irq_disable>
   37b00:	e0bff715 	stw	r2,-36(fp)
   37b04:	e0bffa17 	ldw	r2,-24(fp)
   37b08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   37b0c:	e0bff917 	ldw	r2,-28(fp)
   37b10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   37b14:	e0bff717 	ldw	r2,-36(fp)
}
   37b18:	e037883a 	mov	sp,fp
   37b1c:	dfc00117 	ldw	ra,4(sp)
   37b20:	df000017 	ldw	fp,0(sp)
   37b24:	dec00204 	addi	sp,sp,8
   37b28:	f800283a 	ret

00037b2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   37b2c:	defff904 	addi	sp,sp,-28
   37b30:	dfc00615 	stw	ra,24(sp)
   37b34:	df000515 	stw	fp,20(sp)
   37b38:	df000504 	addi	fp,sp,20
   37b3c:	e13ffc15 	stw	r4,-16(fp)
   37b40:	e17ffd15 	stw	r5,-12(fp)
   37b44:	e1bffe15 	stw	r6,-8(fp)
   37b48:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   37b4c:	e1bfff17 	ldw	r6,-4(fp)
   37b50:	e17ffe17 	ldw	r5,-8(fp)
   37b54:	e13ffd17 	ldw	r4,-12(fp)
   37b58:	00358e40 	call	358e4 <open>
   37b5c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   37b60:	e0bffb17 	ldw	r2,-20(fp)
   37b64:	10001c16 	blt	r2,zero,37bd8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   37b68:	00800134 	movhi	r2,4
   37b6c:	10adf604 	addi	r2,r2,-18472
   37b70:	e0fffb17 	ldw	r3,-20(fp)
   37b74:	18c00324 	muli	r3,r3,12
   37b78:	10c5883a 	add	r2,r2,r3
   37b7c:	10c00017 	ldw	r3,0(r2)
   37b80:	e0bffc17 	ldw	r2,-16(fp)
   37b84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   37b88:	00800134 	movhi	r2,4
   37b8c:	10adf604 	addi	r2,r2,-18472
   37b90:	e0fffb17 	ldw	r3,-20(fp)
   37b94:	18c00324 	muli	r3,r3,12
   37b98:	10c5883a 	add	r2,r2,r3
   37b9c:	10800104 	addi	r2,r2,4
   37ba0:	10c00017 	ldw	r3,0(r2)
   37ba4:	e0bffc17 	ldw	r2,-16(fp)
   37ba8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   37bac:	00800134 	movhi	r2,4
   37bb0:	10adf604 	addi	r2,r2,-18472
   37bb4:	e0fffb17 	ldw	r3,-20(fp)
   37bb8:	18c00324 	muli	r3,r3,12
   37bbc:	10c5883a 	add	r2,r2,r3
   37bc0:	10800204 	addi	r2,r2,8
   37bc4:	10c00017 	ldw	r3,0(r2)
   37bc8:	e0bffc17 	ldw	r2,-16(fp)
   37bcc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   37bd0:	e13ffb17 	ldw	r4,-20(fp)
   37bd4:	0035b700 	call	35b70 <alt_release_fd>
  }
} 
   37bd8:	0001883a 	nop
   37bdc:	e037883a 	mov	sp,fp
   37be0:	dfc00117 	ldw	ra,4(sp)
   37be4:	df000017 	ldw	fp,0(sp)
   37be8:	dec00204 	addi	sp,sp,8
   37bec:	f800283a 	ret

00037bf0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   37bf0:	defffb04 	addi	sp,sp,-20
   37bf4:	dfc00415 	stw	ra,16(sp)
   37bf8:	df000315 	stw	fp,12(sp)
   37bfc:	df000304 	addi	fp,sp,12
   37c00:	e13ffd15 	stw	r4,-12(fp)
   37c04:	e17ffe15 	stw	r5,-8(fp)
   37c08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   37c0c:	01c07fc4 	movi	r7,511
   37c10:	01800044 	movi	r6,1
   37c14:	e17ffd17 	ldw	r5,-12(fp)
   37c18:	01000134 	movhi	r4,4
   37c1c:	212df904 	addi	r4,r4,-18460
   37c20:	0037b2c0 	call	37b2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   37c24:	01c07fc4 	movi	r7,511
   37c28:	000d883a 	mov	r6,zero
   37c2c:	e17ffe17 	ldw	r5,-8(fp)
   37c30:	01000134 	movhi	r4,4
   37c34:	212df604 	addi	r4,r4,-18472
   37c38:	0037b2c0 	call	37b2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   37c3c:	01c07fc4 	movi	r7,511
   37c40:	01800044 	movi	r6,1
   37c44:	e17fff17 	ldw	r5,-4(fp)
   37c48:	01000134 	movhi	r4,4
   37c4c:	212dfc04 	addi	r4,r4,-18448
   37c50:	0037b2c0 	call	37b2c <alt_open_fd>
}  
   37c54:	0001883a 	nop
   37c58:	e037883a 	mov	sp,fp
   37c5c:	dfc00117 	ldw	ra,4(sp)
   37c60:	df000017 	ldw	fp,0(sp)
   37c64:	dec00204 	addi	sp,sp,8
   37c68:	f800283a 	ret

00037c6c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   37c6c:	deffff04 	addi	sp,sp,-4
   37c70:	df000015 	stw	fp,0(sp)
   37c74:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   37c78:	000170fa 	wrctl	ienable,zero
}
   37c7c:	0001883a 	nop
   37c80:	e037883a 	mov	sp,fp
   37c84:	df000017 	ldw	fp,0(sp)
   37c88:	dec00104 	addi	sp,sp,4
   37c8c:	f800283a 	ret

00037c90 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   37c90:	defffb04 	addi	sp,sp,-20
   37c94:	df000415 	stw	fp,16(sp)
   37c98:	df000404 	addi	fp,sp,16
   37c9c:	e13ffe15 	stw	r4,-8(fp)
   37ca0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   37ca4:	e0bfff17 	ldw	r2,-4(fp)
   37ca8:	10840070 	cmpltui	r2,r2,4097
   37cac:	1000021e 	bne	r2,zero,37cb8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   37cb0:	00840004 	movi	r2,4096
   37cb4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   37cb8:	e0fffe17 	ldw	r3,-8(fp)
   37cbc:	e0bfff17 	ldw	r2,-4(fp)
   37cc0:	1885883a 	add	r2,r3,r2
   37cc4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   37cc8:	e0bffe17 	ldw	r2,-8(fp)
   37ccc:	e0bffc15 	stw	r2,-16(fp)
   37cd0:	00000506 	br	37ce8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   37cd4:	e0bffc17 	ldw	r2,-16(fp)
   37cd8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   37cdc:	e0bffc17 	ldw	r2,-16(fp)
   37ce0:	10800804 	addi	r2,r2,32
   37ce4:	e0bffc15 	stw	r2,-16(fp)
   37ce8:	e0fffc17 	ldw	r3,-16(fp)
   37cec:	e0bffd17 	ldw	r2,-12(fp)
   37cf0:	18bff836 	bltu	r3,r2,37cd4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   37cf4:	e0bffe17 	ldw	r2,-8(fp)
   37cf8:	108007cc 	andi	r2,r2,31
   37cfc:	10000226 	beq	r2,zero,37d08 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   37d00:	e0bffc17 	ldw	r2,-16(fp)
   37d04:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   37d08:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   37d0c:	0001883a 	nop
   37d10:	e037883a 	mov	sp,fp
   37d14:	df000017 	ldw	fp,0(sp)
   37d18:	dec00104 	addi	sp,sp,4
   37d1c:	f800283a 	ret

00037d20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   37d20:	defffe04 	addi	sp,sp,-8
   37d24:	df000115 	stw	fp,4(sp)
   37d28:	df000104 	addi	fp,sp,4
   37d2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   37d30:	e0bfff17 	ldw	r2,-4(fp)
   37d34:	10bffe84 	addi	r2,r2,-6
   37d38:	10c00428 	cmpgeui	r3,r2,16
   37d3c:	18001a1e 	bne	r3,zero,37da8 <alt_exception_cause_generated_bad_addr+0x88>
   37d40:	100690ba 	slli	r3,r2,2
   37d44:	008000f4 	movhi	r2,3
   37d48:	109f5604 	addi	r2,r2,32088
   37d4c:	1885883a 	add	r2,r3,r2
   37d50:	10800017 	ldw	r2,0(r2)
   37d54:	1000683a 	jmp	r2
   37d58:	00037d98 	cmpnei	zero,zero,3574
   37d5c:	00037d98 	cmpnei	zero,zero,3574
   37d60:	00037da8 	cmpgeui	zero,zero,3574
   37d64:	00037da8 	cmpgeui	zero,zero,3574
   37d68:	00037da8 	cmpgeui	zero,zero,3574
   37d6c:	00037d98 	cmpnei	zero,zero,3574
   37d70:	00037da0 	cmpeqi	zero,zero,3574
   37d74:	00037da8 	cmpgeui	zero,zero,3574
   37d78:	00037d98 	cmpnei	zero,zero,3574
   37d7c:	00037d98 	cmpnei	zero,zero,3574
   37d80:	00037da8 	cmpgeui	zero,zero,3574
   37d84:	00037d98 	cmpnei	zero,zero,3574
   37d88:	00037da0 	cmpeqi	zero,zero,3574
   37d8c:	00037da8 	cmpgeui	zero,zero,3574
   37d90:	00037da8 	cmpgeui	zero,zero,3574
   37d94:	00037d98 	cmpnei	zero,zero,3574
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   37d98:	00800044 	movi	r2,1
   37d9c:	00000306 	br	37dac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   37da0:	0005883a 	mov	r2,zero
   37da4:	00000106 	br	37dac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   37da8:	0005883a 	mov	r2,zero
  }
}
   37dac:	e037883a 	mov	sp,fp
   37db0:	df000017 	ldw	fp,0(sp)
   37db4:	dec00104 	addi	sp,sp,4
   37db8:	f800283a 	ret

00037dbc <atexit>:
   37dbc:	200b883a 	mov	r5,r4
   37dc0:	000f883a 	mov	r7,zero
   37dc4:	000d883a 	mov	r6,zero
   37dc8:	0009883a 	mov	r4,zero
   37dcc:	0037e4c1 	jmpi	37e4c <__register_exitproc>

00037dd0 <memcmp>:
   37dd0:	01c000c4 	movi	r7,3
   37dd4:	3980192e 	bgeu	r7,r6,37e3c <memcmp+0x6c>
   37dd8:	2144b03a 	or	r2,r4,r5
   37ddc:	11c4703a 	and	r2,r2,r7
   37de0:	10000f26 	beq	r2,zero,37e20 <memcmp+0x50>
   37de4:	20800003 	ldbu	r2,0(r4)
   37de8:	28c00003 	ldbu	r3,0(r5)
   37dec:	10c0151e 	bne	r2,r3,37e44 <memcmp+0x74>
   37df0:	31bfff84 	addi	r6,r6,-2
   37df4:	01ffffc4 	movi	r7,-1
   37df8:	00000406 	br	37e0c <memcmp+0x3c>
   37dfc:	20800003 	ldbu	r2,0(r4)
   37e00:	28c00003 	ldbu	r3,0(r5)
   37e04:	31bfffc4 	addi	r6,r6,-1
   37e08:	10c00e1e 	bne	r2,r3,37e44 <memcmp+0x74>
   37e0c:	21000044 	addi	r4,r4,1
   37e10:	29400044 	addi	r5,r5,1
   37e14:	31fff91e 	bne	r6,r7,37dfc <memcmp+0x2c>
   37e18:	0005883a 	mov	r2,zero
   37e1c:	f800283a 	ret
   37e20:	20c00017 	ldw	r3,0(r4)
   37e24:	28800017 	ldw	r2,0(r5)
   37e28:	18bfee1e 	bne	r3,r2,37de4 <memcmp+0x14>
   37e2c:	31bfff04 	addi	r6,r6,-4
   37e30:	21000104 	addi	r4,r4,4
   37e34:	29400104 	addi	r5,r5,4
   37e38:	39bff936 	bltu	r7,r6,37e20 <memcmp+0x50>
   37e3c:	303fe91e 	bne	r6,zero,37de4 <memcmp+0x14>
   37e40:	003ff506 	br	37e18 <memcmp+0x48>
   37e44:	10c5c83a 	sub	r2,r2,r3
   37e48:	f800283a 	ret

00037e4c <__register_exitproc>:
   37e4c:	defffa04 	addi	sp,sp,-24
   37e50:	dc000315 	stw	r16,12(sp)
   37e54:	04000134 	movhi	r16,4
   37e58:	842e9e04 	addi	r16,r16,-17800
   37e5c:	80c00017 	ldw	r3,0(r16)
   37e60:	dc400415 	stw	r17,16(sp)
   37e64:	dfc00515 	stw	ra,20(sp)
   37e68:	18805217 	ldw	r2,328(r3)
   37e6c:	2023883a 	mov	r17,r4
   37e70:	10003726 	beq	r2,zero,37f50 <__register_exitproc+0x104>
   37e74:	10c00117 	ldw	r3,4(r2)
   37e78:	010007c4 	movi	r4,31
   37e7c:	20c00e16 	blt	r4,r3,37eb8 <__register_exitproc+0x6c>
   37e80:	1a000044 	addi	r8,r3,1
   37e84:	8800221e 	bne	r17,zero,37f10 <__register_exitproc+0xc4>
   37e88:	18c00084 	addi	r3,r3,2
   37e8c:	18c7883a 	add	r3,r3,r3
   37e90:	18c7883a 	add	r3,r3,r3
   37e94:	12000115 	stw	r8,4(r2)
   37e98:	10c7883a 	add	r3,r2,r3
   37e9c:	19400015 	stw	r5,0(r3)
   37ea0:	0005883a 	mov	r2,zero
   37ea4:	dfc00517 	ldw	ra,20(sp)
   37ea8:	dc400417 	ldw	r17,16(sp)
   37eac:	dc000317 	ldw	r16,12(sp)
   37eb0:	dec00604 	addi	sp,sp,24
   37eb4:	f800283a 	ret
   37eb8:	008000f4 	movhi	r2,3
   37ebc:	10abc304 	addi	r2,r2,-20724
   37ec0:	10002626 	beq	r2,zero,37f5c <__register_exitproc+0x110>
   37ec4:	01006404 	movi	r4,400
   37ec8:	d9400015 	stw	r5,0(sp)
   37ecc:	d9800115 	stw	r6,4(sp)
   37ed0:	d9c00215 	stw	r7,8(sp)
   37ed4:	002af0c0 	call	2af0c <malloc>
   37ed8:	d9400017 	ldw	r5,0(sp)
   37edc:	d9800117 	ldw	r6,4(sp)
   37ee0:	d9c00217 	ldw	r7,8(sp)
   37ee4:	10001d26 	beq	r2,zero,37f5c <__register_exitproc+0x110>
   37ee8:	81000017 	ldw	r4,0(r16)
   37eec:	10000115 	stw	zero,4(r2)
   37ef0:	02000044 	movi	r8,1
   37ef4:	22405217 	ldw	r9,328(r4)
   37ef8:	0007883a 	mov	r3,zero
   37efc:	12400015 	stw	r9,0(r2)
   37f00:	20805215 	stw	r2,328(r4)
   37f04:	10006215 	stw	zero,392(r2)
   37f08:	10006315 	stw	zero,396(r2)
   37f0c:	883fde26 	beq	r17,zero,37e88 <__register_exitproc+0x3c>
   37f10:	18c9883a 	add	r4,r3,r3
   37f14:	2109883a 	add	r4,r4,r4
   37f18:	1109883a 	add	r4,r2,r4
   37f1c:	21802215 	stw	r6,136(r4)
   37f20:	01800044 	movi	r6,1
   37f24:	12406217 	ldw	r9,392(r2)
   37f28:	30cc983a 	sll	r6,r6,r3
   37f2c:	4992b03a 	or	r9,r9,r6
   37f30:	12406215 	stw	r9,392(r2)
   37f34:	21c04215 	stw	r7,264(r4)
   37f38:	01000084 	movi	r4,2
   37f3c:	893fd21e 	bne	r17,r4,37e88 <__register_exitproc+0x3c>
   37f40:	11006317 	ldw	r4,396(r2)
   37f44:	218cb03a 	or	r6,r4,r6
   37f48:	11806315 	stw	r6,396(r2)
   37f4c:	003fce06 	br	37e88 <__register_exitproc+0x3c>
   37f50:	18805304 	addi	r2,r3,332
   37f54:	18805215 	stw	r2,328(r3)
   37f58:	003fc606 	br	37e74 <__register_exitproc+0x28>
   37f5c:	00bfffc4 	movi	r2,-1
   37f60:	003fd006 	br	37ea4 <__register_exitproc+0x58>
