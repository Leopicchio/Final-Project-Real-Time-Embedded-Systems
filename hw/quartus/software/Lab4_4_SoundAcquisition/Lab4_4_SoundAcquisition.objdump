
Lab4_4_SoundAcquisition.elf:     file format elf32-littlenios2
Lab4_4_SoundAcquisition.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020248

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00015eac memsz 0x00015eac flags r-x
    LOAD off    0x00016ecc vaddr 0x00035ecc paddr 0x00037acc align 2**12
         filesz 0x00001c00 memsz 0x00001c00 flags rw-
    LOAD off    0x000196cc vaddr 0x000396cc paddr 0x000396cc align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015458  00020248  00020248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000082c  000356a0  000356a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c00  00035ecc  00037acc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  000396cc  000396cc  000196cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00039838  00039838  00018acc  2**0
                  CONTENTS
  7 .SDRAM_controller 00000000  08000000  08000000  00018acc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018acc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001230  00000000  00000000  00018af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028f95  00000000  00000000  00019d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b01d  00000000  00000000  00042cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e36b  00000000  00000000  0004dcd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002edc  00000000  00000000  0005c040  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004bf9  00000000  00000000  0005ef1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cc75  00000000  00000000  00063b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0008078c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f80  00000000  00000000  000807f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00086a82  2**0
                  CONTENTS, READONLY
 19 .cpu          00000017  00000000  00000000  00086a85  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00086a9c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00086a9d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00086a9e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00086aa2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00086aa6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00086aaa  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00086ab5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00086ac0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00086acb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00086ad6  2**0
                  CONTENTS, READONLY
 30 .jdi          0000baf4  00000000  00000000  00086b15  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000c1ee0  00000000  00000000  00092609  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020248 l    d  .text	00000000 .text
000356a0 l    d  .rodata	00000000 .rodata
00035ecc l    d  .rwdata	00000000 .rwdata
000396cc l    d  .bss	00000000 .bss
00039838 l    d  .onchip_memory	00000000 .onchip_memory
08000000 l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_4_SoundAcquisition_bsp//obj/HAL/src/crt0.o
00020290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SoundAcquisition.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000359f8 l     O .rodata	00000108 two_over_pi
00035978 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00035b40 l     O .rodata	00000010 init_jk
00035b00 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00035ecc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00035c9a l     O .rodata	00000010 zeroes.4404
000296b8 l     F .text	000000bc __sbprintf
00035caa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000298c8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002b3f8 l     F .text	00000008 __fp_unlock
0002b40c l     F .text	0000019c __sinit.part.1
0002b5a8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00036310 l     O .rwdata	00000020 lc_ctype_charset
000362f0 l     O .rwdata	00000020 lc_message_charset
00036330 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00035cd8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002e930 l     F .text	000000fc __sprint_r.part.0
00035e0c l     O .rodata	00000010 blanks.4348
00035dfc l     O .rodata	00000010 zeroes.4349
0002febc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00031404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00031510 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0003153c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00031628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00031708 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000317f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000319c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00037aac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00031c44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00031d78 l     F .text	00000034 alt_dev_reg
00031dac l     F .text	0000003c alt_get_errno
00031de8 l     F .text	00000068 alt_avalon_mutex_reg
00036918 l     O .rwdata	00001060 jtag_uart_0
00037978 l     O .rwdata	00000048 mailbox_to_FFT
000379c0 l     O .rwdata	00000048 mailbox_to_Sound_Acquisition
00037a08 l     O .rwdata	00000010 mutex_SDRAM
00037a18 l     O .rwdata	00000030 audio_and_video_config_0
00037a48 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00032138 l     F .text	00000210 altera_avalon_jtag_uart_irq
00032348 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
00032980 l     F .text	00000090 altera_avalon_mailbox_identify
00032a10 l     F .text	00000078 altera_avalon_mailbox_post
00032a88 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
00032bc4 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
000332b8 l     F .text	0000003c alt_get_errno
000332f4 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000346f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00034958 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00034c18 l     F .text	0000003c alt_get_errno
00034c54 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0003970c g     O .bss	00000004 alt_instruction_exception_handler
00033e70 g     F .text	00000038 alt_up_av_config_reset
0002dfe8 g     F .text	00000074 _mprec_log10
000342c8 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
0003302c g     F .text	00000150 altera_avalon_mailbox_send
0002e0d4 g     F .text	0000008c __any_on
00030458 g     F .text	00000054 _isatty_r
00035ce4 g     O .rodata	00000028 __mprec_tinytens
00033ee0 g     F .text	00000034 alt_up_av_config_disable_interrupt
00031904 g     F .text	0000007c alt_main
00027338 g     F .text	000000c0 _puts_r
00039738 g     O .bss	00000100 alt_irq
00022f5c g     F .text	00000014 fabs
000304ac g     F .text	00000060 _lseek_r
00020f38 g     F .text	00000130 sqrt
00037acc g       *ABS*	00000000 __flash_rwdata_start
00025bd8 g     F .text	00000088 .hidden __eqdf2
000396d0 g     O .bss	00000004 processed_file_length
0003382c g     F .text	00000060 alt_up_audio_read_fifo_avail
00033fa4 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
08000000 g       *ABS*	00000000 __alt_heap_start
000272fc g     F .text	0000003c printf
0003388c g     F .text	00000068 alt_up_audio_record_r
000306c4 g     F .text	0000009c _wcrtomb_r
0002e7f0 g     F .text	0000005c __sseek
0002b748 g     F .text	00000010 __sinit
0003056c g     F .text	00000140 __swbuf_r
0002c210 g     F .text	0000007c _setlocale_r
0002b5b0 g     F .text	00000068 __sfmoreglue
000319a4 g     F .text	00000024 __malloc_unlock
00023a0c g     F .text	00000440 .hidden __divsf3
00033798 g     F .text	00000094 alt_up_audio_reset_audio_core
0002cee0 g     F .text	0000015c memmove
0002b730 g     F .text	00000018 _cleanup
0003342c g     F .text	00000040 altera_avalon_mutex_trylock
0002d164 g     F .text	000000a8 _Balloc
000248b0 g     F .text	00000070 .hidden __fixsfsi
00025c60 g     F .text	000000dc .hidden __gtdf2
00035010 g     F .text	00000024 altera_nios2_gen2_irq_init
000272bc g     F .text	00000010 __errno
00020000 g     F .entry	0000001c __reset
000334c0 g     F .text	00000074 altera_avalon_mutex_is_mine
00020020 g       *ABS*	00000000 __flash_exceptions_start
000303fc g     F .text	0000005c _fstat_r
000396f0 g     O .bss	00000004 errno
00022f70 g     F .text	000001ec floor
0002e76c g     F .text	00000008 __seofread
00033758 g     F .text	00000040 alt_up_audio_write_interrupt_pending
000396f8 g     O .bss	00000004 alt_argv
0003fa78 g       *ABS*	00000000 _gp
0003317c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
00031c14 g     F .text	00000030 usleep
000243cc g     F .text	000004e4 .hidden __subsf3
00036798 g     O .rwdata	00000180 alt_fd_list
00021068 g     F .text	0000076c __ieee754_rem_pio2
00034894 g     F .text	00000090 alt_find_dev
0002cd98 g     F .text	00000148 memcpy
0002b400 g     F .text	0000000c _cleanup_r
00026ec4 g     F .text	000000dc .hidden __floatsidf
00034a1c g     F .text	0000007c alt_io_redirect
00025d3c g     F .text	000000f4 .hidden __ltdf2
000356a0 g       *ABS*	00000000 __DTOR_END__
000273f8 g     F .text	00000014 puts
00035270 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00032c70 g     F .text	00000078 altera_avalon_mailbox_simple_init
0002315c g     F .text	00000074 __fpclassifyd
0002df44 g     F .text	000000a4 __ratio
0002fea0 g     F .text	0000001c __vfiprintf_internal
00033c74 g     F .text	00000050 alt_up_audio_read_fifo_head
00032540 g     F .text	0000021c altera_avalon_jtag_uart_read
000272cc g     F .text	00000030 _printf_r
00023488 g     F .text	00000064 .hidden __udivsi3
00031664 g     F .text	000000a4 isatty
00035d34 g     O .rodata	000000c8 __mprec_tens
00032fb4 g     F .text	00000078 altera_avalon_mailbox_status
00032eac g     F .text	00000108 altera_avalon_mailbox_close
0002c28c g     F .text	0000000c __locale_charset
00021a5c g     F .text	000004a4 __kernel_cos
00023f08 g     F .text	000000c8 .hidden __lesf2
000351e0 g     F .text	00000090 alt_icache_flush
000396ec g     O .bss	00000004 __malloc_top_pad
00033df0 g     F .text	00000080 alt_up_av_config_read_data
00037a84 g     O .rwdata	00000004 __mb_cur_max
0002c2bc g     F .text	0000000c _localeconv_r
0002d570 g     F .text	0000003c __i2b
0002bbcc g     F .text	000004bc __sfvwrite_r
0002e6c4 g     F .text	00000054 _sbrk_r
0003050c g     F .text	00000060 _read_r
00037aa4 g     O .rwdata	00000004 alt_max_fd
00033cc4 g     F .text	00000068 alt_up_audio_write_fifo_head
000300f0 g     F .text	000000f0 _fclose_r
0002b3c8 g     F .text	00000030 fflush
000396e8 g     O .bss	00000004 __malloc_max_sbrked_mem
00034a98 g     F .text	00000180 alt_irq_register
00022c90 g     F .text	000002cc __kernel_sin
00026fa0 g     F .text	00000110 .hidden __extendsfdf2
00024a44 g     F .text	000008ac .hidden __adddf3
0002dcec g     F .text	0000010c __b2d
00030e24 g     F .text	00000538 .hidden __umoddi3
00031830 g     F .text	000000d4 lseek
00033534 g     F .text	00000050 altera_avalon_mutex_first_lock
00037a78 g     O .rwdata	00000004 __fdlib_version
00037a7c g     O .rwdata	00000004 _global_impure_ptr
0002e160 g     F .text	00000564 _realloc_r
00039838 g       *ABS*	00000000 __bss_end
00034f08 g     F .text	00000108 alt_tick
000396cc g     O .bss	00000001 file_ready_to_play
000308ac g     F .text	00000578 .hidden __udivdi3
00030358 g     F .text	00000024 _fputwc_r
000396d4 g     O .bss	00000004 processed_file
00020c80 g     F .text	000000e8 start_recording
00035d0c g     O .rodata	00000028 __mprec_bigtens
0002d354 g     F .text	00000104 __s2b
0003135c g     F .text	000000a8 .hidden __floatunsidf
0002da2c g     F .text	00000060 __mcmp
00033584 g     F .text	0000003c alt_up_audio_open_dev
0002b768 g     F .text	00000018 __fp_lock_all
00020b38 g     F .text	00000148 average_amplitude
000339bc g     F .text	00000068 alt_up_audio_play_r
00034e6c g     F .text	0000009c alt_alarm_stop
00020dbc g     F .text	0000008c receiver_mailbox_callback
00039700 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d8 alt_irq_handler
00036770 g     O .rwdata	00000028 alt_dev_null
00021f00 g     F .text	00000d90 __kernel_rem_pio2
00033370 g     F .text	00000054 altera_avalon_mutex_open
000346ac g     F .text	00000048 alt_dcache_flush_all
0002d458 g     F .text	00000068 __hi0bits
00026e44 g     F .text	00000080 .hidden __fixdfsi
00037acc g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00037a9c g     O .rwdata	00000008 alt_dev_list
00031c80 g     F .text	000000f8 write
00023e4c g     F .text	000000bc .hidden __gtsf2
00037ab8 g     O .rwdata	00000008 alt_mutex_list
00035ecc g       *ABS*	00000000 __ram_rodata_end
00031578 g     F .text	000000b0 fstat
00025d3c g     F .text	000000f4 .hidden __ledf2
0002d7a4 g     F .text	00000140 __pow5mult
0002ea44 g     F .text	0000145c ___vfiprintf_internal_r
000396e0 g     O .bss	00000004 __nlocale_changed
000234ec g     F .text	00000058 .hidden __umodsi3
08000000 g       *ABS*	00000000 end
00032084 g     F .text	000000b4 altera_avalon_jtag_uart_init
000201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
000356a0 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
00027258 g     F .text	00000064 .hidden __clzsi2
0003275c g     F .text	00000224 altera_avalon_jtag_uart_write
0002b758 g     F .text	00000004 __sfp_lock_acquire
0002ccb4 g     F .text	000000e4 memchr
000274a4 g     F .text	000021f8 ___vfprintf_internal_r
0002b8bc g     F .text	00000310 _free_r
0002c298 g     F .text	00000010 __locale_mb_cur_max
000354ec g     F .text	00000180 __call_exitprocs
000396dc g     O .bss	00000004 __mlocale_changed
00037a88 g     O .rwdata	00000004 __malloc_sbrk_base
00020248 g     F .text	0000004c _start
00039704 g     O .bss	00000004 _alt_tick_rate
0002078c g     F .text	00000110 play_file
00020e48 g     F .text	000000f0 sin
00033b6c g     F .text	00000108 alt_up_audio_write_fifo
0002d8e4 g     F .text	00000148 __lshift
00033d8c g     F .text	00000064 alt_up_av_config_write_data
00039708 g     O .bss	00000004 _alt_nticks
00031a04 g     F .text	000000fc read
00031e88 g     F .text	00000098 alt_sys_init
00024920 g     F .text	00000124 .hidden __floatsisf
00033a8c g     F .text	000000e0 alt_up_audio_read_fifo
000353d4 g     F .text	00000118 __register_exitproc
000343d0 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
000336c0 g     F .text	00000058 alt_up_audio_disable_write_interrupt
0003346c g     F .text	00000054 altera_avalon_mutex_unlock
0002d5ac g     F .text	000001f8 __multiply
000323e8 g     F .text	00000068 altera_avalon_jtag_uart_close
00035ecc g       *ABS*	00000000 __ram_rwdata_start
000356a0 g       *ABS*	00000000 __ram_rodata_start
00039710 g     O .bss	00000028 __malloc_current_mallinfo
0002ddf8 g     F .text	0000014c __d2b
00020a9c g     F .text	0000009c show_amplitude_on_LEDS
00031f20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0003513c g     F .text	000000a4 alt_get_fd
00034554 g     F .text	00000158 alt_busy_sleep
0002ffd8 g     F .text	00000054 _close_r
0003366c g     F .text	00000054 alt_up_audio_enable_write_interrupt
00035358 g     F .text	0000007c memcmp
00031fe0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08000000 g       *ABS*	00000000 __alt_stack_base
00032030 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00029774 g     F .text	00000154 __swsetup_r
000252f0 g     F .text	000008e8 .hidden __divdf3
00033614 g     F .text	00000058 alt_up_audio_disable_read_interrupt
0002b618 g     F .text	00000118 __sfp
0002e05c g     F .text	00000078 __copybits
00036368 g     O .rwdata	00000408 __malloc_av_
0002b764 g     F .text	00000004 __sinit_lock_release
00025e30 g     F .text	00000718 .hidden __muldf3
0002e718 g     F .text	00000054 __sread
00035034 g     F .text	00000108 alt_find_file
00034730 g     F .text	000000a4 alt_dev_llist_insert
00031980 g     F .text	00000024 __malloc_lock
00031b64 g     F .text	000000b0 sbrk
0002b36c g     F .text	0000005c _fflush_r
0003002c g     F .text	000000c4 _calloc_r
000396cc g       *ABS*	00000000 __bss_start
0002d03c g     F .text	00000128 memset
00020294 g     F .text	000004f8 main
0003395c g     F .text	00000060 alt_up_audio_write_fifo_space
000396fc g     O .bss	00000004 alt_envp
000396e4 g     O .bss	00000004 __malloc_max_total_mem
00031f80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000306ac g     F .text	00000018 __swbuf
00023f08 g     F .text	000000c8 .hidden __ltsf2
0002e84c g     F .text	00000008 __sclose
000231d0 g     F .text	00000008 matherr
0c000000 g       *ABS*	00000000 __alt_heap_limit
000301e0 g     F .text	00000014 fclose
000270b0 g     F .text	000001a8 .hidden __truncdfsf2
000333e8 g     F .text	00000044 altera_avalon_mutex_lock
00029ac8 g     F .text	00001688 _dtoa_r
0002c4a8 g     F .text	0000080c _malloc_r
00030820 g     F .text	00000030 __ascii_wctomb
00037aa8 g     O .rwdata	00000004 alt_errno
0002c088 g     F .text	000000c4 _fwalk
00023390 g     F .text	00000084 .hidden __divsi3
0002b798 g     F .text	00000124 _malloc_trim_r
000356a0 g       *ABS*	00000000 __CTOR_END__
00023fd0 g     F .text	000003fc .hidden __mulsf3
0002e854 g     F .text	000000dc strcmp
000356a0 g       *ABS*	00000000 __flash_rodata_start
000356a0 g       *ABS*	00000000 __DTOR_LIST__
00023374 g     F .text	0000001c copysign
00025bd8 g     F .text	00000088 .hidden __nedf2
08000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
00033d2c g     F .text	00000060 alt_up_av_config_open_dev
00031e50 g     F .text	00000038 alt_irq_init
00031b00 g     F .text	00000064 alt_release_fd
00035b50 g     O .rodata	00000100 .hidden __clz_tab
000396d8 g     O .bss	00000004 _PathLocale
0002089c g     F .text	00000200 generate_sinusoid
0003530c g     F .text	00000014 atexit
00023e4c g     F .text	000000bc .hidden __gesf2
0002ff78 g     F .text	00000060 _write_r
00033f6c g     F .text	00000038 alt_up_av_config_read_ready
0002c2c8 g     F .text	00000018 setlocale
00037a80 g     O .rwdata	00000004 _impure_ptr
000396f4 g     O .bss	00000004 alt_argc
0002b150 g     F .text	0000021c __sflush_r
000231d8 g     F .text	0000019c scalbn
00034834 g     F .text	00000060 _do_dtors
0002c2b4 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
0002dc88 g     F .text	00000064 __ulp
0002b780 g     F .text	00000018 __fp_unlock_all
00037a94 g     O .rwdata	00000008 alt_fs_list
000338f4 g     F .text	00000068 alt_up_audio_record_l
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002c2e0 g     F .text	0000000c localeconv
000217d4 g     F .text	00000288 __ieee754_sqrt
00033ea8 g     F .text	00000038 alt_up_av_config_enable_interrupt
00033f14 g     F .text	00000058 alt_up_av_config_read_acknowledge
00034270 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
00037acc g       *ABS*	00000000 _edata
08000000 g       *ABS*	00000000 _end
000301f4 g     F .text	00000164 __fputwc
00020248 g       *ABS*	00000000 __ram_exceptions_end
00032450 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00033a24 g     F .text	00000068 alt_up_audio_play_l
00037ab0 g     O .rwdata	00000008 alt_mailbox_simple_list
0002e774 g     F .text	0000007c __swrite
00037a8c g     O .rwdata	00000004 __malloc_trim_threshold
0002c2a8 g     F .text	0000000c __locale_msgcharset
00035320 g     F .text	00000038 exit
0002c14c g     F .text	000000c4 _fwalk_reent
0002da8c g     F .text	000001fc __mdiff
00034378 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
00023414 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002b75c g     F .text	00000004 __sfp_lock_release
00032ce8 g     F .text	000001c4 altera_avalon_mailbox_open
0003566c g     F .text	00000034 _exit
00034428 g     F .text	0000012c alt_alarm_start
0002c2ec g     F .text	000001bc __smakebuf_r
0002740c g     F .text	00000098 strlen
00034d18 g     F .text	00000154 open
00025c60 g     F .text	000000dc .hidden __gedf2
00034048 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
00037a90 g     O .rwdata	00000004 __wctomb
00020d68 g     F .text	00000054 sender_mailbox_callback
0002ea2c g     F .text	00000018 __sprint_r
00034924 g     F .text	00000034 alt_icache_flush_all
00037ac0 g     O .rwdata	00000004 alt_priority_mask
0002969c g     F .text	0000001c __vfprintf_internal
000333c4 g     F .text	00000024 altera_avalon_mutex_close
00034320 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
00030850 g     F .text	0000005c _wctomb_r
00026548 g     F .text	000008fc .hidden __subdf3
0002d4c0 g     F .text	000000b0 __lo0bits
00037ac4 g     O .rwdata	00000008 alt_alarm_list
000347d4 g     F .text	00000060 _do_ctors
00030760 g     F .text	000000c0 wcrtomb
00031440 g     F .text	000000d0 close
00023544 g     F .text	000004c8 .hidden __addsf3
00031770 g     F .text	00000084 alt_load
000335c0 g     F .text	00000054 alt_up_audio_enable_read_interrupt
00034130 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
0003037c g     F .text	00000080 fputwc
0002b760 g     F .text	00000004 __sinit_lock_acquire
0002d234 g     F .text	00000120 __multadd
0002d20c g     F .text	00000028 _Bfree
00034218 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
00033718 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf4020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409214 	ori	at,at,584
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d40 	call	201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	00800134 	movhi	r2,4
   20140:	10a5ce04 	addi	r2,r2,-26824
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	10a5ce04 	addi	r2,r2,-26824
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	e17ffd17 	ldw	r5,-12(fp)
   20174:	1009883a 	mov	r4,r2
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <__alt_data_end+0xf402012c>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <__alt_data_end+0xf4020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	0001883a 	nop
   201c0:	e037883a 	mov	sp,fp
   201c4:	dfc00117 	ldw	ra,4(sp)
   201c8:	df000017 	ldw	fp,0(sp)
   201cc:	dec00204 	addi	sp,sp,8
   201d0:	f800283a 	ret

000201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d4:	defffb04 	addi	sp,sp,-20
   201d8:	dfc00415 	stw	ra,16(sp)
   201dc:	df000315 	stw	fp,12(sp)
   201e0:	df000304 	addi	fp,sp,12
   201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e8:	000531fa 	rdctl	r2,exception
   201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	10801f0c 	andi	r2,r2,124
   201f8:	1004d0ba 	srli	r2,r2,2
   201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20200:	0005333a 	rdctl	r2,badaddr
   20204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20208:	d0a72517 	ldw	r2,-25452(gp)
   2020c:	10000726 	beq	r2,zero,2022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20210:	d0a72517 	ldw	r2,-25452(gp)
   20214:	e0fffd17 	ldw	r3,-12(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	e17fff17 	ldw	r5,-4(fp)
   20220:	1809883a 	mov	r4,r3
   20224:	103ee83a 	callr	r2
   20228:	00000206 	br	20234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20230:	0005883a 	mov	r2,zero
}
   20234:	e037883a 	mov	sp,fp
   20238:	dfc00117 	ldw	ra,4(sp)
   2023c:	df000017 	ldw	fp,0(sp)
   20240:	dec00204 	addi	sp,sp,8
   20244:	f800283a 	ret

Disassembly of section .text:

00020248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   2024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20254:	00bffd16 	blt	zero,r2,2024c <__alt_data_end+0xf402024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20258:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   2025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20260:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20264:	d6be9e14 	ori	gp,gp,64120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20268:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   2026c:	10a5b314 	ori	r2,r2,38604

    movhi r3, %hi(__bss_end)
   20270:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20274:	18e60e14 	ori	r3,r3,38968

    beq r2, r3, 1f
   20278:	10c00326 	beq	r2,r3,20288 <_start+0x40>

0:
    stw zero, (r2)
   2027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20284:	10fffd36 	bltu	r2,r3,2027c <__alt_data_end+0xf402027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20288:	00317700 	call	31770 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   2028c:	00319040 	call	31904 <alt_main>

00020290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20290:	003fff06 	br	20290 <__alt_data_end+0xf4020290>

00020294 <main>:



//-------------------------------------------- MAIN ------------------------------------------------------
int main()
{
   20294:	defffe04 	addi	sp,sp,-8
   20298:	dfc00115 	stw	ra,4(sp)
   2029c:	df000015 	stw	fp,0(sp)
   202a0:	d839883a 	mov	fp,sp
   202a4:	023ffc74 	movhi	r8,65521
   202a8:	4215f704 	addi	r8,r8,22492
   202ac:	da37883a 	add	sp,sp,r8
	float sound_loudness = 0;
   202b0:	00bffc74 	movhi	r2,65521
   202b4:	1095f804 	addi	r2,r2,22496
   202b8:	1705883a 	add	r2,r2,fp
   202bc:	10000015 	stw	zero,0(r2)
	unsigned int recording_buffer[RECORDING_BUFFER_SIZE], n_samples_in_FIFO;
	unsigned int beep_sound[BEEP_SAMPLES], recording[RECORDING_SAMPLES];
	alt_up_audio_dev *audio_device;
	alt_up_av_config_dev *audio_config;
	altera_avalon_mailbox_dev *sender_mailbox, *receiver_mailbox;	// handle to the Mailbox
	alt_u32 message[2] =  {0x00001111, 0xaa55aa55};
   202c0:	008003f4 	movhi	r2,15
   202c4:	10aa0604 	addi	r2,r2,-22504
   202c8:	00fffc74 	movhi	r3,65521
   202cc:	18d5f804 	addi	r3,r3,22496
   202d0:	1f07883a 	add	r3,r3,fp
   202d4:	1885883a 	add	r2,r3,r2
   202d8:	00c44444 	movi	r3,4369
   202dc:	10c00015 	stw	r3,0(r2)
   202e0:	008003f4 	movhi	r2,15
   202e4:	10aa0604 	addi	r2,r2,-22504
   202e8:	013ffc74 	movhi	r4,65521
   202ec:	2115f804 	addi	r4,r4,22496
   202f0:	2709883a 	add	r4,r4,fp
   202f4:	2087883a 	add	r3,r4,r2
   202f8:	00aa95b4 	movhi	r2,43606
   202fc:	10aa9544 	addi	r2,r2,-21931
   20300:	18800115 	stw	r2,4(r3)


	/* Open mailbox on sender processor */
	sender_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_FFT", sender_mailbox_callback, NULL);
   20304:	000d883a 	mov	r6,zero
   20308:	014000b4 	movhi	r5,2
   2030c:	29435a04 	addi	r5,r5,3432
   20310:	010000f4 	movhi	r4,3
   20314:	2115a804 	addi	r4,r4,22176
   20318:	0032ce80 	call	32ce8 <altera_avalon_mailbox_open>
   2031c:	00fffc74 	movhi	r3,65521
   20320:	18d5f904 	addi	r3,r3,22500
   20324:	1f07883a 	add	r3,r3,fp
   20328:	18800015 	stw	r2,0(r3)
	if (!sender_mailbox){
   2032c:	013ffc74 	movhi	r4,65521
   20330:	2115f904 	addi	r4,r4,22500
   20334:	2709883a 	add	r4,r4,fp
   20338:	20800017 	ldw	r2,0(r4)
   2033c:	1000051e 	bne	r2,zero,20354 <main+0xc0>
		printf ("FAIL: Unable to open mailbox to other processor\n");
   20340:	010000f4 	movhi	r4,3
   20344:	2115ad04 	addi	r4,r4,22196
   20348:	00273f80 	call	273f8 <puts>
		return 1;
   2034c:	00800044 	movi	r2,1
   20350:	00010906 	br	20778 <main+0x4e4>
	}
	receiver_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_Sound_Acquisition", NULL, receiver_mailbox_callback);
   20354:	018000b4 	movhi	r6,2
   20358:	31836f04 	addi	r6,r6,3516
   2035c:	000b883a 	mov	r5,zero
   20360:	010000f4 	movhi	r4,3
   20364:	2115b904 	addi	r4,r4,22244
   20368:	0032ce80 	call	32ce8 <altera_avalon_mailbox_open>
   2036c:	00fffc74 	movhi	r3,65521
   20370:	18d5fa04 	addi	r3,r3,22504
   20374:	1f07883a 	add	r3,r3,fp
   20378:	18800015 	stw	r2,0(r3)
	if (!receiver_mailbox){
   2037c:	013ffc74 	movhi	r4,65521
   20380:	2115fa04 	addi	r4,r4,22504
   20384:	2709883a 	add	r4,r4,fp
   20388:	20800017 	ldw	r2,0(r4)
   2038c:	1000051e 	bne	r2,zero,203a4 <main+0x110>
		printf ("FAIL: Unable to open mailbox from other processor\n");
   20390:	010000f4 	movhi	r4,3
   20394:	2115c204 	addi	r4,r4,22280
   20398:	00273f80 	call	273f8 <puts>
		return 1;
   2039c:	00800044 	movi	r2,1
   203a0:	0000f506 	br	20778 <main+0x4e4>
	}


	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);		// handle to the circuit that interfaces with the audio CODEC
   203a4:	010000f4 	movhi	r4,3
   203a8:	2115cf04 	addi	r4,r4,22332
   203ac:	00335840 	call	33584 <alt_up_audio_open_dev>
   203b0:	00fffc74 	movhi	r3,65521
   203b4:	18d5fb04 	addi	r3,r3,22508
   203b8:	1f07883a 	add	r3,r3,fp
   203bc:	18800015 	stw	r2,0(r3)
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME); // handle to the circuit that initializes the audio CODEC
   203c0:	010000f4 	movhi	r4,3
   203c4:	2115d304 	addi	r4,r4,22348
   203c8:	0033d2c0 	call	33d2c <alt_up_av_config_open_dev>
   203cc:	013ffc74 	movhi	r4,65521
   203d0:	2115fc04 	addi	r4,r4,22512
   203d4:	2709883a 	add	r4,r4,fp
   203d8:	20800015 	stw	r2,0(r4)

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
   203dc:	00000306 	br	203ec <main+0x158>
		printf("Audio CODEC not ready\n");
   203e0:	010000f4 	movhi	r4,3
   203e4:	2115db04 	addi	r4,r4,22380
   203e8:	00273f80 	call	273f8 <puts>

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);		// handle to the circuit that interfaces with the audio CODEC
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME); // handle to the circuit that initializes the audio CODEC

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
   203ec:	00bffc74 	movhi	r2,65521
   203f0:	1095fc04 	addi	r2,r2,22512
   203f4:	1705883a 	add	r2,r2,fp
   203f8:	11000017 	ldw	r4,0(r2)
   203fc:	0033f6c0 	call	33f6c <alt_up_av_config_read_ready>
   20400:	103ff726 	beq	r2,zero,203e0 <__alt_data_end+0xf40203e0>
		printf("Audio CODEC not ready\n");
	}

	// resets the audio CODEC just in case
	if (alt_up_av_config_reset(audio_config))
   20404:	00fffc74 	movhi	r3,65521
   20408:	18d5fc04 	addi	r3,r3,22512
   2040c:	1f07883a 	add	r3,r3,fp
   20410:	19000017 	ldw	r4,0(r3)
   20414:	0033e700 	call	33e70 <alt_up_av_config_reset>
   20418:	10000326 	beq	r2,zero,20428 <main+0x194>
		printf("Error resetting the audio CODEC\n");
   2041c:	010000f4 	movhi	r4,3
   20420:	2115e104 	addi	r4,r4,22404
   20424:	00273f80 	call	273f8 <puts>


	// initialize the LEDS parallel port
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_LEDS_BASE, 0xFFFFFFFF);	// sets all pins as output
   20428:	00ffffc4 	movi	r3,-1
   2042c:	00800134 	movhi	r2,4
   20430:	10840504 	addi	r2,r2,4116
   20434:	10c00035 	stwio	r3,0(r2)

	// creates a sinusoid in memory to test the jack output
	printf("Generating sinusoid for beep sound. Please wait...\n");
   20438:	010000f4 	movhi	r4,3
   2043c:	2115e904 	addi	r4,r4,22436
   20440:	00273f80 	call	273f8 <puts>
	generate_sinusoid(SAMPLING_FREQ, BEEP_FREQUENCY, BEEP_AMPLITUDE, BEEP_SAMPLES, beep_sound);
   20444:	013ffc74 	movhi	r4,65521
   20448:	21167e04 	addi	r4,r4,23032
   2044c:	e105883a 	add	r2,fp,r4
   20450:	d8800015 	stw	r2,0(sp)
   20454:	01eee014 	movui	r7,48000
   20458:	01800044 	movi	r6,1
   2045c:	0150feb4 	movhi	r5,17402
   20460:	012ee014 	movui	r4,48000
   20464:	002089c0 	call	2089c <generate_sinusoid>
	printf("Sinusoid created\n\n\n");
   20468:	010000f4 	movhi	r4,3
   2046c:	2115f604 	addi	r4,r4,22488
   20470:	00273f80 	call	273f8 <puts>


	// infinite loop that monitors the sound loudness
	printf("Make a loud noise to start recording. Try snapping your fingers.\n");
   20474:	010000f4 	movhi	r4,3
   20478:	2115fb04 	addi	r4,r4,22508
   2047c:	00273f80 	call	273f8 <puts>
	while(1)
	{
		// reads the incoming FIFO from the audio CODEC (audio from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);	// checks how many elements are in the FIFO
   20480:	000b883a 	mov	r5,zero
   20484:	00bffc74 	movhi	r2,65521
   20488:	1095fb04 	addi	r2,r2,22508
   2048c:	1705883a 	add	r2,r2,fp
   20490:	11000017 	ldw	r4,0(r2)
   20494:	003382c0 	call	3382c <alt_up_audio_read_fifo_avail>
   20498:	00fffc74 	movhi	r3,65521
   2049c:	18d5fd04 	addi	r3,r3,22516
   204a0:	1f07883a 	add	r3,r3,fp
   204a4:	18800015 	stw	r2,0(r3)
		alt_up_audio_read_fifo(audio_device, recording_buffer, n_samples_in_FIFO, 0);	// reads the content of the FIFO
   204a8:	013ffc74 	movhi	r4,65521
   204ac:	2115fd04 	addi	r4,r4,22516
   204b0:	2709883a 	add	r4,r4,fp
   204b4:	20c00017 	ldw	r3,0(r4)
   204b8:	013ffc74 	movhi	r4,65521
   204bc:	2115fe04 	addi	r4,r4,22520
   204c0:	e105883a 	add	r2,fp,r4
   204c4:	000f883a 	mov	r7,zero
   204c8:	180d883a 	mov	r6,r3
   204cc:	100b883a 	mov	r5,r2
   204d0:	00bffc74 	movhi	r2,65521
   204d4:	1095fb04 	addi	r2,r2,22508
   204d8:	1705883a 	add	r2,r2,fp
   204dc:	11000017 	ldw	r4,0(r2)
   204e0:	0033a8c0 	call	33a8c <alt_up_audio_read_fifo>

		sound_loudness = average_amplitude(recording_buffer, n_samples_in_FIFO);	// computes the sound loudness
   204e4:	013ffc74 	movhi	r4,65521
   204e8:	2115fd04 	addi	r4,r4,22516
   204ec:	2709883a 	add	r4,r4,fp
   204f0:	20c00017 	ldw	r3,0(r4)
   204f4:	013ffc74 	movhi	r4,65521
   204f8:	2115fe04 	addi	r4,r4,22520
   204fc:	e105883a 	add	r2,fp,r4
   20500:	180b883a 	mov	r5,r3
   20504:	1009883a 	mov	r4,r2
   20508:	0020b380 	call	20b38 <average_amplitude>
   2050c:	00fffc74 	movhi	r3,65521
   20510:	18d5f804 	addi	r3,r3,22496
   20514:	1f07883a 	add	r3,r3,fp
   20518:	18800015 	stw	r2,0(r3)
		show_amplitude_on_LEDS(sound_loudness);		// shows the amplitude on the LEDs
   2051c:	00bffc74 	movhi	r2,65521
   20520:	1095f804 	addi	r2,r2,22496
   20524:	1705883a 	add	r2,r2,fp
   20528:	11000017 	ldw	r4,0(r2)
   2052c:	0020a9c0 	call	20a9c <show_amplitude_on_LEDS>
		if (sound_loudness > LOUDNESS_THRESHOLD)
   20530:	014fc034 	movhi	r5,16128
   20534:	00fffc74 	movhi	r3,65521
   20538:	18d5f804 	addi	r3,r3,22496
   2053c:	1f07883a 	add	r3,r3,fp
   20540:	19000017 	ldw	r4,0(r3)
   20544:	0023e4c0 	call	23e4c <__gesf2>
   20548:	00807b0e 	bge	zero,r2,20738 <main+0x4a4>
		{
			printf("Loud noise detected! Recording starting in:\n3...\n");
   2054c:	010000f4 	movhi	r4,3
   20550:	21160c04 	addi	r4,r4,22576
   20554:	00273f80 	call	273f8 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
   20558:	013ffc74 	movhi	r4,65521
   2055c:	21167e04 	addi	r4,r4,23032
   20560:	e105883a 	add	r2,fp,r4
   20564:	00fffc74 	movhi	r3,65521
   20568:	18d5fb04 	addi	r3,r3,22508
   2056c:	1f07883a 	add	r3,r3,fp
   20570:	19800017 	ldw	r6,0(r3)
   20574:	016ee014 	movui	r5,48000
   20578:	1009883a 	mov	r4,r2
   2057c:	002078c0 	call	2078c <play_file>
			usleep(500000);
   20580:	01000234 	movhi	r4,8
   20584:	21284804 	addi	r4,r4,-24288
   20588:	0031c140 	call	31c14 <usleep>
			printf("2...\n");
   2058c:	010000f4 	movhi	r4,3
   20590:	21161904 	addi	r4,r4,22628
   20594:	00273f80 	call	273f8 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
   20598:	013ffc74 	movhi	r4,65521
   2059c:	21167e04 	addi	r4,r4,23032
   205a0:	e105883a 	add	r2,fp,r4
   205a4:	00fffc74 	movhi	r3,65521
   205a8:	18d5fb04 	addi	r3,r3,22508
   205ac:	1f07883a 	add	r3,r3,fp
   205b0:	19800017 	ldw	r6,0(r3)
   205b4:	016ee014 	movui	r5,48000
   205b8:	1009883a 	mov	r4,r2
   205bc:	002078c0 	call	2078c <play_file>
			usleep(500000);
   205c0:	01000234 	movhi	r4,8
   205c4:	21284804 	addi	r4,r4,-24288
   205c8:	0031c140 	call	31c14 <usleep>
			printf("1...\n");
   205cc:	010000f4 	movhi	r4,3
   205d0:	21161b04 	addi	r4,r4,22636
   205d4:	00273f80 	call	273f8 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
   205d8:	013ffc74 	movhi	r4,65521
   205dc:	21167e04 	addi	r4,r4,23032
   205e0:	e105883a 	add	r2,fp,r4
   205e4:	00fffc74 	movhi	r3,65521
   205e8:	18d5fb04 	addi	r3,r3,22508
   205ec:	1f07883a 	add	r3,r3,fp
   205f0:	19800017 	ldw	r6,0(r3)
   205f4:	016ee014 	movui	r5,48000
   205f8:	1009883a 	mov	r4,r2
   205fc:	002078c0 	call	2078c <play_file>
			usleep(500000);
   20600:	01000234 	movhi	r4,8
   20604:	21284804 	addi	r4,r4,-24288
   20608:	0031c140 	call	31c14 <usleep>

			printf("Recording...\n");
   2060c:	010000f4 	movhi	r4,3
   20610:	21161d04 	addi	r4,r4,22644
   20614:	00273f80 	call	273f8 <puts>
			start_recording(recording, RECORDING_SAMPLES, audio_device);	// starts the recording
   20618:	008000f4 	movhi	r2,3
   2061c:	10bc0604 	addi	r2,r2,-4072
   20620:	013ffc74 	movhi	r4,65521
   20624:	2115f804 	addi	r4,r4,22496
   20628:	2709883a 	add	r4,r4,fp
   2062c:	2085883a 	add	r2,r4,r2
   20630:	00fffc74 	movhi	r3,65521
   20634:	18d5fb04 	addi	r3,r3,22508
   20638:	1f07883a 	add	r3,r3,fp
   2063c:	19800017 	ldw	r6,0(r3)
   20640:	014000f4 	movhi	r5,3
   20644:	297b8004 	addi	r5,r5,-4608
   20648:	1009883a 	mov	r4,r2
   2064c:	0020c800 	call	20c80 <start_recording>
			printf("Finished recording...\n");
   20650:	010000f4 	movhi	r4,3
   20654:	21162104 	addi	r4,r4,22660
   20658:	00273f80 	call	273f8 <puts>

			message[0] = recording;			// puts the address of the file containing the recording
   2065c:	008000f4 	movhi	r2,3
   20660:	10bc0604 	addi	r2,r2,-4072
   20664:	013ffc74 	movhi	r4,65521
   20668:	2115f804 	addi	r4,r4,22496
   2066c:	2709883a 	add	r4,r4,fp
   20670:	2087883a 	add	r3,r4,r2
   20674:	008003f4 	movhi	r2,15
   20678:	10aa0604 	addi	r2,r2,-22504
   2067c:	013ffc74 	movhi	r4,65521
   20680:	2115f804 	addi	r4,r4,22496
   20684:	2709883a 	add	r4,r4,fp
   20688:	2085883a 	add	r2,r4,r2
   2068c:	10c00015 	stw	r3,0(r2)
			message[1] = RECORDING_SAMPLES;	// puts the length of the file
   20690:	008003f4 	movhi	r2,15
   20694:	10aa0604 	addi	r2,r2,-22504
   20698:	013ffc74 	movhi	r4,65521
   2069c:	2115f804 	addi	r4,r4,22496
   206a0:	2709883a 	add	r4,r4,fp
   206a4:	2087883a 	add	r3,r4,r2
   206a8:	008000f4 	movhi	r2,3
   206ac:	10bb8004 	addi	r2,r2,-4608
   206b0:	18800115 	stw	r2,4(r3)
			printf("Sending file information: address: 0x%x \t length: %u \n\n", message[0], message[1]);
   206b4:	008003f4 	movhi	r2,15
   206b8:	10aa0604 	addi	r2,r2,-22504
   206bc:	00fffc74 	movhi	r3,65521
   206c0:	18d5f804 	addi	r3,r3,22496
   206c4:	1f07883a 	add	r3,r3,fp
   206c8:	1885883a 	add	r2,r3,r2
   206cc:	10c00017 	ldw	r3,0(r2)
   206d0:	008003f4 	movhi	r2,15
   206d4:	10aa0604 	addi	r2,r2,-22504
   206d8:	013ffc74 	movhi	r4,65521
   206dc:	2115f804 	addi	r4,r4,22496
   206e0:	2709883a 	add	r4,r4,fp
   206e4:	2085883a 	add	r2,r4,r2
   206e8:	10800117 	ldw	r2,4(r2)
   206ec:	100d883a 	mov	r6,r2
   206f0:	180b883a 	mov	r5,r3
   206f4:	010000f4 	movhi	r4,3
   206f8:	21162704 	addi	r4,r4,22684
   206fc:	00272fc0 	call	272fc <printf>
			altera_avalon_mailbox_send (sender_mailbox, message, 0, ISR);	// sends the info through the mailbox
   20700:	008003f4 	movhi	r2,15
   20704:	10aa0604 	addi	r2,r2,-22504
   20708:	00fffc74 	movhi	r3,65521
   2070c:	18d5f804 	addi	r3,r3,22496
   20710:	1f07883a 	add	r3,r3,fp
   20714:	1885883a 	add	r2,r3,r2
   20718:	000f883a 	mov	r7,zero
   2071c:	000d883a 	mov	r6,zero
   20720:	100b883a 	mov	r5,r2
   20724:	00bffc74 	movhi	r2,65521
   20728:	1095f904 	addi	r2,r2,22500
   2072c:	1705883a 	add	r2,r2,fp
   20730:	11000017 	ldw	r4,0(r2)
   20734:	003302c0 	call	3302c <altera_avalon_mailbox_send>
		}

		// if the others processor signals that the file is ready: it plays the file
		if (file_ready_to_play)
   20738:	d0a71503 	ldbu	r2,-25516(gp)
   2073c:	10803fcc 	andi	r2,r2,255
   20740:	1080201c 	xori	r2,r2,128
   20744:	10bfe004 	addi	r2,r2,-128
   20748:	103f4d26 	beq	r2,zero,20480 <__alt_data_end+0xf4020480>
		{
			file_ready_to_play = 0;
   2074c:	d0271505 	stb	zero,-25516(gp)
			play_file(processed_file, processed_file_length, audio_device);			// plays back the recording
   20750:	d0a71717 	ldw	r2,-25508(gp)
   20754:	d0e71617 	ldw	r3,-25512(gp)
   20758:	013ffc74 	movhi	r4,65521
   2075c:	2115fb04 	addi	r4,r4,22508
   20760:	2709883a 	add	r4,r4,fp
   20764:	21800017 	ldw	r6,0(r4)
   20768:	180b883a 	mov	r5,r3
   2076c:	1009883a 	mov	r4,r2
   20770:	002078c0 	call	2078c <play_file>
		}
	}
   20774:	003f4206 	br	20480 <__alt_data_end+0xf4020480>

	altera_avalon_mailbox_close (sender_mailbox); 	// closing the handle to the mailbox
	altera_avalon_mailbox_close (receiver_mailbox); 	// closing the handle to the mailbox
	return 0;
}
   20778:	e037883a 	mov	sp,fp
   2077c:	dfc00117 	ldw	ra,4(sp)
   20780:	df000017 	ldw	fp,0(sp)
   20784:	dec00204 	addi	sp,sp,8
   20788:	f800283a 	ret

0002078c <play_file>:



// this function plays an audio file trough the output jack (green). To do so it needs to send bursts of data to the outgoing FIFO.
void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device)
{
   2078c:	defff804 	addi	sp,sp,-32
   20790:	dfc00715 	stw	ra,28(sp)
   20794:	df000615 	stw	fp,24(sp)
   20798:	df000604 	addi	fp,sp,24
   2079c:	e13ffd15 	stw	r4,-12(fp)
   207a0:	e17ffe15 	stw	r5,-8(fp)
   207a4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)
   207a8:	00801904 	movi	r2,100
   207ac:	e0bffb15 	stw	r2,-20(fp)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
   207b0:	e03ffa15 	stw	zero,-24(fp)
   207b4:	00003006 	br	20878 <play_file+0xec>
	{
		file_pointer = file + i;
   207b8:	e0bffa17 	ldw	r2,-24(fp)
   207bc:	1085883a 	add	r2,r2,r2
   207c0:	1085883a 	add	r2,r2,r2
   207c4:	1007883a 	mov	r3,r2
   207c8:	e0bffd17 	ldw	r2,-12(fp)
   207cc:	10c5883a 	add	r2,r2,r3
   207d0:	e0bffc15 	stw	r2,-16(fp)
		if (file_size - i > BURST_LENGTH) {
   207d4:	e0fffe17 	ldw	r3,-8(fp)
   207d8:	e0bffa17 	ldw	r2,-24(fp)
   207dc:	1885c83a 	sub	r2,r3,r2
   207e0:	e0fffb17 	ldw	r3,-20(fp)
   207e4:	18800b2e 	bgeu	r3,r2,20814 <play_file+0x88>
			alt_up_audio_play_r(audio_device, file_pointer, BURST_LENGTH);
   207e8:	e0bffb17 	ldw	r2,-20(fp)
   207ec:	100d883a 	mov	r6,r2
   207f0:	e17ffc17 	ldw	r5,-16(fp)
   207f4:	e13fff17 	ldw	r4,-4(fp)
   207f8:	00339bc0 	call	339bc <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, BURST_LENGTH);
   207fc:	e0bffb17 	ldw	r2,-20(fp)
   20800:	100d883a 	mov	r6,r2
   20804:	e17ffc17 	ldw	r5,-16(fp)
   20808:	e13fff17 	ldw	r4,-4(fp)
   2080c:	0033a240 	call	33a24 <alt_up_audio_play_l>
   20810:	00000e06 	br	2084c <play_file+0xc0>
		} else {
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
   20814:	e0fffe17 	ldw	r3,-8(fp)
   20818:	e0bffa17 	ldw	r2,-24(fp)
   2081c:	1885c83a 	sub	r2,r3,r2
   20820:	100d883a 	mov	r6,r2
   20824:	e17ffc17 	ldw	r5,-16(fp)
   20828:	e13fff17 	ldw	r4,-4(fp)
   2082c:	00339bc0 	call	339bc <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
   20830:	e0fffe17 	ldw	r3,-8(fp)
   20834:	e0bffa17 	ldw	r2,-24(fp)
   20838:	1885c83a 	sub	r2,r3,r2
   2083c:	100d883a 	mov	r6,r2
   20840:	e17ffc17 	ldw	r5,-16(fp)
   20844:	e13fff17 	ldw	r4,-4(fp)
   20848:	0033a240 	call	33a24 <alt_up_audio_play_l>
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
   2084c:	0001883a 	nop
   20850:	000b883a 	mov	r5,zero
   20854:	e13fff17 	ldw	r4,-4(fp)
   20858:	003395c0 	call	3395c <alt_up_audio_write_fifo_space>
   2085c:	1007883a 	mov	r3,r2
   20860:	e0bffb17 	ldw	r2,-20(fp)
   20864:	18bffa36 	bltu	r3,r2,20850 <__alt_data_end+0xf4020850>
{
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
   20868:	e0fffa17 	ldw	r3,-24(fp)
   2086c:	e0bffb17 	ldw	r2,-20(fp)
   20870:	1885883a 	add	r2,r3,r2
   20874:	e0bffa15 	stw	r2,-24(fp)
   20878:	e0bffe17 	ldw	r2,-8(fp)
   2087c:	e0fffa17 	ldw	r3,-24(fp)
   20880:	18bfcd36 	bltu	r3,r2,207b8 <__alt_data_end+0xf40207b8>
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
	}
}
   20884:	0001883a 	nop
   20888:	e037883a 	mov	sp,fp
   2088c:	dfc00117 	ldw	ra,4(sp)
   20890:	df000017 	ldw	fp,0(sp)
   20894:	dec00204 	addi	sp,sp,8
   20898:	f800283a 	ret

0002089c <generate_sinusoid>:


/* creates a sinusoidal waveform in the memory (at the location pointed by "unsigned int *file"), n_samples specifies the length*/
// of the file to create.
void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int n_samples, unsigned int *file)
{
   2089c:	defff404 	addi	sp,sp,-48
   208a0:	dfc00b15 	stw	ra,44(sp)
   208a4:	df000a15 	stw	fp,40(sp)
   208a8:	dc400915 	stw	r17,36(sp)
   208ac:	dc000815 	stw	r16,32(sp)
   208b0:	df000a04 	addi	fp,sp,40
   208b4:	e13ffa15 	stw	r4,-24(fp)
   208b8:	e17ffb15 	stw	r5,-20(fp)
   208bc:	3005883a 	mov	r2,r6
   208c0:	e1fffd15 	stw	r7,-12(fp)
   208c4:	e0bffc05 	stb	r2,-16(fp)
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow
   208c8:	e13ffb17 	ldw	r4,-20(fp)
   208cc:	0026fa00 	call	26fa0 <__extendsfdf2>
   208d0:	1011883a 	mov	r8,r2
   208d4:	1813883a 	mov	r9,r3
   208d8:	01951134 	movhi	r6,21572
   208dc:	318b4604 	addi	r6,r6,11544
   208e0:	01d00674 	movhi	r7,16409
   208e4:	39c87ec4 	addi	r7,r7,8699
   208e8:	4009883a 	mov	r4,r8
   208ec:	480b883a 	mov	r5,r9
   208f0:	0025e300 	call	25e30 <__muldf3>
   208f4:	1009883a 	mov	r4,r2
   208f8:	180b883a 	mov	r5,r3
   208fc:	2021883a 	mov	r16,r4
   20900:	2823883a 	mov	r17,r5
   20904:	e13ffa17 	ldw	r4,-24(fp)
   20908:	0026ec40 	call	26ec4 <__floatsidf>
   2090c:	1009883a 	mov	r4,r2
   20910:	180b883a 	mov	r5,r3
   20914:	200d883a 	mov	r6,r4
   20918:	280f883a 	mov	r7,r5
   2091c:	8009883a 	mov	r4,r16
   20920:	880b883a 	mov	r5,r17
   20924:	00252f00 	call	252f0 <__divdf3>
   20928:	1009883a 	mov	r4,r2
   2092c:	180b883a 	mov	r5,r3
   20930:	2005883a 	mov	r2,r4
   20934:	2807883a 	mov	r3,r5
   20938:	1009883a 	mov	r4,r2
   2093c:	180b883a 	mov	r5,r3
   20940:	00270b00 	call	270b0 <__truncdfsf2>
   20944:	1007883a 	mov	r3,r2
   20948:	e0fff715 	stw	r3,-36(fp)

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
   2094c:	e0bffc07 	ldb	r2,-16(fp)
   20950:	1009883a 	mov	r4,r2
   20954:	00249200 	call	24920 <__floatsisf>
   20958:	1007883a 	mov	r3,r2
   2095c:	0153e034 	movhi	r5,20352
   20960:	1809883a 	mov	r4,r3
   20964:	0023fd00 	call	23fd0 <__mulsf3>
   20968:	1007883a 	mov	r3,r2
   2096c:	1805883a 	mov	r2,r3
   20970:	1009883a 	mov	r4,r2
   20974:	0026fa00 	call	26fa0 <__extendsfdf2>
   20978:	1011883a 	mov	r8,r2
   2097c:	1813883a 	mov	r9,r3
   20980:	000d883a 	mov	r6,zero
   20984:	01d01674 	movhi	r7,16473
   20988:	4009883a 	mov	r4,r8
   2098c:	480b883a 	mov	r5,r9
   20990:	00252f00 	call	252f0 <__divdf3>
   20994:	1009883a 	mov	r4,r2
   20998:	180b883a 	mov	r5,r3
   2099c:	2005883a 	mov	r2,r4
   209a0:	2807883a 	mov	r3,r5
   209a4:	1009883a 	mov	r4,r2
   209a8:	180b883a 	mov	r5,r3
   209ac:	0026e440 	call	26e44 <__fixdfsi>
   209b0:	e0bff815 	stw	r2,-32(fp)
	for(i=0; i<n_samples; i++)
   209b4:	e03ff615 	stw	zero,-40(fp)
   209b8:	00002d06 	br	20a70 <generate_sinusoid+0x1d4>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
   209bc:	e13ff817 	ldw	r4,-32(fp)
   209c0:	0026ec40 	call	26ec4 <__floatsidf>
   209c4:	1021883a 	mov	r16,r2
   209c8:	1823883a 	mov	r17,r3
   209cc:	e13ff617 	ldw	r4,-40(fp)
   209d0:	00249200 	call	24920 <__floatsisf>
   209d4:	1007883a 	mov	r3,r2
   209d8:	e17ff717 	ldw	r5,-36(fp)
   209dc:	1809883a 	mov	r4,r3
   209e0:	0023fd00 	call	23fd0 <__mulsf3>
   209e4:	1007883a 	mov	r3,r2
   209e8:	1805883a 	mov	r2,r3
   209ec:	1009883a 	mov	r4,r2
   209f0:	0026fa00 	call	26fa0 <__extendsfdf2>
   209f4:	100b883a 	mov	r5,r2
   209f8:	180d883a 	mov	r6,r3
   209fc:	2809883a 	mov	r4,r5
   20a00:	300b883a 	mov	r5,r6
   20a04:	0020e480 	call	20e48 <sin>
   20a08:	1009883a 	mov	r4,r2
   20a0c:	180b883a 	mov	r5,r3
   20a10:	200d883a 	mov	r6,r4
   20a14:	280f883a 	mov	r7,r5
   20a18:	8009883a 	mov	r4,r16
   20a1c:	880b883a 	mov	r5,r17
   20a20:	0025e300 	call	25e30 <__muldf3>
   20a24:	1009883a 	mov	r4,r2
   20a28:	180b883a 	mov	r5,r3
   20a2c:	2005883a 	mov	r2,r4
   20a30:	2807883a 	mov	r3,r5
   20a34:	1009883a 	mov	r4,r2
   20a38:	180b883a 	mov	r5,r3
   20a3c:	0026e440 	call	26e44 <__fixdfsi>
   20a40:	e0bff915 	stw	r2,-28(fp)
		IOWR_32DIRECT(file, i*4, sample_amplitude);
   20a44:	e0bff617 	ldw	r2,-40(fp)
   20a48:	1085883a 	add	r2,r2,r2
   20a4c:	1085883a 	add	r2,r2,r2
   20a50:	1007883a 	mov	r3,r2
   20a54:	e0800217 	ldw	r2,8(fp)
   20a58:	10c5883a 	add	r2,r2,r3
   20a5c:	e0fff917 	ldw	r3,-28(fp)
   20a60:	10c00035 	stwio	r3,0(r2)
{
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
	for(i=0; i<n_samples; i++)
   20a64:	e0bff617 	ldw	r2,-40(fp)
   20a68:	10800044 	addi	r2,r2,1
   20a6c:	e0bff615 	stw	r2,-40(fp)
   20a70:	e0fff617 	ldw	r3,-40(fp)
   20a74:	e0bffd17 	ldw	r2,-12(fp)
   20a78:	18bfd036 	bltu	r3,r2,209bc <__alt_data_end+0xf40209bc>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
		IOWR_32DIRECT(file, i*4, sample_amplitude);
	}
}
   20a7c:	0001883a 	nop
   20a80:	e6fffe04 	addi	sp,fp,-8
   20a84:	dfc00317 	ldw	ra,12(sp)
   20a88:	df000217 	ldw	fp,8(sp)
   20a8c:	dc400117 	ldw	r17,4(sp)
   20a90:	dc000017 	ldw	r16,0(sp)
   20a94:	dec00404 	addi	sp,sp,16
   20a98:	f800283a 	ret

00020a9c <show_amplitude_on_LEDS>:


// outputs the amplitude on the LEDs
void show_amplitude_on_LEDS(float amplitude)
{
   20a9c:	defffd04 	addi	sp,sp,-12
   20aa0:	dfc00215 	stw	ra,8(sp)
   20aa4:	df000115 	stw	fp,4(sp)
   20aa8:	df000104 	addi	fp,sp,4
   20aac:	e13fff15 	stw	r4,-4(fp)
	amplitude = sqrt(amplitude);	// the way we perceive sound is not linear, this is why I take the square root of the amplitude
   20ab0:	e13fff17 	ldw	r4,-4(fp)
   20ab4:	0026fa00 	call	26fa0 <__extendsfdf2>
   20ab8:	100b883a 	mov	r5,r2
   20abc:	180d883a 	mov	r6,r3
   20ac0:	2809883a 	mov	r4,r5
   20ac4:	300b883a 	mov	r5,r6
   20ac8:	0020f380 	call	20f38 <sqrt>
   20acc:	100b883a 	mov	r5,r2
   20ad0:	180d883a 	mov	r6,r3
   20ad4:	2809883a 	mov	r4,r5
   20ad8:	300b883a 	mov	r5,r6
   20adc:	00270b00 	call	270b0 <__truncdfsf2>
   20ae0:	1007883a 	mov	r3,r2
   20ae4:	e0ffff15 	stw	r3,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, (0x01<<((int)(amplitude*PIO_LEDS_NUMBER)))-1);
   20ae8:	01504834 	movhi	r5,16672
   20aec:	e13fff17 	ldw	r4,-4(fp)
   20af0:	0023fd00 	call	23fd0 <__mulsf3>
   20af4:	1007883a 	mov	r3,r2
   20af8:	1805883a 	mov	r2,r3
   20afc:	1009883a 	mov	r4,r2
   20b00:	00248b00 	call	248b0 <__fixsfsi>
   20b04:	1007883a 	mov	r3,r2
   20b08:	00800044 	movi	r2,1
   20b0c:	10c4983a 	sll	r2,r2,r3
   20b10:	10ffffc4 	addi	r3,r2,-1
   20b14:	00800134 	movhi	r2,4
   20b18:	10840404 	addi	r2,r2,4112
   20b1c:	10c00035 	stwio	r3,0(r2)
}
   20b20:	0001883a 	nop
   20b24:	e037883a 	mov	sp,fp
   20b28:	dfc00117 	ldw	ra,4(sp)
   20b2c:	df000017 	ldw	fp,0(sp)
   20b30:	dec00204 	addi	sp,sp,8
   20b34:	f800283a 	ret

00020b38 <average_amplitude>:


// computes the average amplitude of an array of sound samples
float average_amplitude(int *data, int length)
{
   20b38:	defffa04 	addi	sp,sp,-24
   20b3c:	dfc00515 	stw	ra,20(sp)
   20b40:	df000415 	stw	fp,16(sp)
   20b44:	df000404 	addi	fp,sp,16
   20b48:	e13ffe15 	stw	r4,-8(fp)
   20b4c:	e17fff15 	stw	r5,-4(fp)
	int i;
	float average_amplitude = 0;
   20b50:	e03ffd15 	stw	zero,-12(fp)

	// computes the average
	for (i=0; i<length; i++)
   20b54:	e03ffc15 	stw	zero,-16(fp)
   20b58:	00002a06 	br	20c04 <average_amplitude+0xcc>
	{
		if (data[i] < 0)
   20b5c:	e0bffc17 	ldw	r2,-16(fp)
   20b60:	1085883a 	add	r2,r2,r2
   20b64:	1085883a 	add	r2,r2,r2
   20b68:	1007883a 	mov	r3,r2
   20b6c:	e0bffe17 	ldw	r2,-8(fp)
   20b70:	10c5883a 	add	r2,r2,r3
   20b74:	10800017 	ldw	r2,0(r2)
   20b78:	1000100e 	bge	r2,zero,20bbc <average_amplitude+0x84>
			average_amplitude -= data[i];
   20b7c:	e0bffc17 	ldw	r2,-16(fp)
   20b80:	1085883a 	add	r2,r2,r2
   20b84:	1085883a 	add	r2,r2,r2
   20b88:	1007883a 	mov	r3,r2
   20b8c:	e0bffe17 	ldw	r2,-8(fp)
   20b90:	10c5883a 	add	r2,r2,r3
   20b94:	10800017 	ldw	r2,0(r2)
   20b98:	1009883a 	mov	r4,r2
   20b9c:	00249200 	call	24920 <__floatsisf>
   20ba0:	1007883a 	mov	r3,r2
   20ba4:	180b883a 	mov	r5,r3
   20ba8:	e13ffd17 	ldw	r4,-12(fp)
   20bac:	00243cc0 	call	243cc <__subsf3>
   20bb0:	1007883a 	mov	r3,r2
   20bb4:	e0fffd15 	stw	r3,-12(fp)
   20bb8:	00000f06 	br	20bf8 <average_amplitude+0xc0>
		else
			average_amplitude += data[i];
   20bbc:	e0bffc17 	ldw	r2,-16(fp)
   20bc0:	1085883a 	add	r2,r2,r2
   20bc4:	1085883a 	add	r2,r2,r2
   20bc8:	1007883a 	mov	r3,r2
   20bcc:	e0bffe17 	ldw	r2,-8(fp)
   20bd0:	10c5883a 	add	r2,r2,r3
   20bd4:	10800017 	ldw	r2,0(r2)
   20bd8:	1009883a 	mov	r4,r2
   20bdc:	00249200 	call	24920 <__floatsisf>
   20be0:	1007883a 	mov	r3,r2
   20be4:	180b883a 	mov	r5,r3
   20be8:	e13ffd17 	ldw	r4,-12(fp)
   20bec:	00235440 	call	23544 <__addsf3>
   20bf0:	1007883a 	mov	r3,r2
   20bf4:	e0fffd15 	stw	r3,-12(fp)
{
	int i;
	float average_amplitude = 0;

	// computes the average
	for (i=0; i<length; i++)
   20bf8:	e0bffc17 	ldw	r2,-16(fp)
   20bfc:	10800044 	addi	r2,r2,1
   20c00:	e0bffc15 	stw	r2,-16(fp)
   20c04:	e0fffc17 	ldw	r3,-16(fp)
   20c08:	e0bfff17 	ldw	r2,-4(fp)
   20c0c:	18bfd316 	blt	r3,r2,20b5c <__alt_data_end+0xf4020b5c>
		else
			average_amplitude += data[i];
	}

	// normalizes to a range from 0 to 1
	average_amplitude /= INT_MAX;
   20c10:	0153c034 	movhi	r5,20224
   20c14:	e13ffd17 	ldw	r4,-12(fp)
   20c18:	0023a0c0 	call	23a0c <__divsf3>
   20c1c:	1007883a 	mov	r3,r2
   20c20:	e0fffd15 	stw	r3,-12(fp)
	average_amplitude /= length;
   20c24:	e13fff17 	ldw	r4,-4(fp)
   20c28:	00249200 	call	24920 <__floatsisf>
   20c2c:	1007883a 	mov	r3,r2
   20c30:	180b883a 	mov	r5,r3
   20c34:	e13ffd17 	ldw	r4,-12(fp)
   20c38:	0023a0c0 	call	23a0c <__divsf3>
   20c3c:	1007883a 	mov	r3,r2
   20c40:	e0fffd15 	stw	r3,-12(fp)
	if (average_amplitude < 0)
   20c44:	000b883a 	mov	r5,zero
   20c48:	e13ffd17 	ldw	r4,-12(fp)
   20c4c:	0023f080 	call	23f08 <__lesf2>
   20c50:	1000030e 	bge	r2,zero,20c60 <average_amplitude+0x128>
		average_amplitude *= -1;
   20c54:	e0bffd17 	ldw	r2,-12(fp)
   20c58:	10a0003c 	xorhi	r2,r2,32768
   20c5c:	e0bffd15 	stw	r2,-12(fp)

	return average_amplitude;
   20c60:	e0bffd17 	ldw	r2,-12(fp)
   20c64:	1007883a 	mov	r3,r2
}
   20c68:	1805883a 	mov	r2,r3
   20c6c:	e037883a 	mov	sp,fp
   20c70:	dfc00117 	ldw	ra,4(sp)
   20c74:	df000017 	ldw	fp,0(sp)
   20c78:	dec00204 	addi	sp,sp,8
   20c7c:	f800283a 	ret

00020c80 <start_recording>:



// records a sound from the microphone and stores it in the SDRAM (at location pointed by *file)
void start_recording(unsigned int *file, unsigned int n_samples, alt_up_audio_dev *audio_device)
{
   20c80:	defff804 	addi	sp,sp,-32
   20c84:	dfc00715 	stw	ra,28(sp)
   20c88:	df000615 	stw	fp,24(sp)
   20c8c:	df000604 	addi	fp,sp,24
   20c90:	e13ffd15 	stw	r4,-12(fp)
   20c94:	e17ffe15 	stw	r5,-8(fp)
   20c98:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, *end_of_file;
	unsigned int n_samples_in_FIFO = 0;
   20c9c:	e03ffb15 	stw	zero,-20(fp)

	if (n_samples > RECORDING_SAMPLES)
   20ca0:	e0fffe17 	ldw	r3,-8(fp)
   20ca4:	008000f4 	movhi	r2,3
   20ca8:	10bb8004 	addi	r2,r2,-4608
   20cac:	10c0042e 	bgeu	r2,r3,20cc0 <start_recording+0x40>
	{
		printf("Error, can't record a file so long\n");
   20cb0:	010000f4 	movhi	r4,3
   20cb4:	21163504 	addi	r4,r4,22740
   20cb8:	00273f80 	call	273f8 <puts>
		return;
   20cbc:	00002506 	br	20d54 <start_recording+0xd4>
	}
	file_pointer = file;
   20cc0:	e0bffd17 	ldw	r2,-12(fp)
   20cc4:	e0bffa15 	stw	r2,-24(fp)
	end_of_file = &(file[n_samples]);
   20cc8:	e0bffe17 	ldw	r2,-8(fp)
   20ccc:	1085883a 	add	r2,r2,r2
   20cd0:	1085883a 	add	r2,r2,r2
   20cd4:	1007883a 	mov	r3,r2
   20cd8:	e0bffd17 	ldw	r2,-12(fp)
   20cdc:	10c5883a 	add	r2,r2,r3
   20ce0:	e0bffc15 	stw	r2,-16(fp)

	while(file_pointer < end_of_file )
   20ce4:	00001806 	br	20d48 <start_recording+0xc8>
	{
		// reads data from the incoming FIFO (sound from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);
   20ce8:	000b883a 	mov	r5,zero
   20cec:	e13fff17 	ldw	r4,-4(fp)
   20cf0:	003382c0 	call	3382c <alt_up_audio_read_fifo_avail>
   20cf4:	e0bffb15 	stw	r2,-20(fp)
		alt_up_audio_read_fifo(audio_device, file_pointer, n_samples_in_FIFO, 0);
   20cf8:	e0bffb17 	ldw	r2,-20(fp)
   20cfc:	000f883a 	mov	r7,zero
   20d00:	100d883a 	mov	r6,r2
   20d04:	e17ffa17 	ldw	r5,-24(fp)
   20d08:	e13fff17 	ldw	r4,-4(fp)
   20d0c:	0033a8c0 	call	33a8c <alt_up_audio_read_fifo>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs
   20d10:	e0bffb17 	ldw	r2,-20(fp)
   20d14:	100b883a 	mov	r5,r2
   20d18:	e13ffa17 	ldw	r4,-24(fp)
   20d1c:	0020b380 	call	20b38 <average_amplitude>
   20d20:	1007883a 	mov	r3,r2
   20d24:	1809883a 	mov	r4,r3
   20d28:	0020a9c0 	call	20a9c <show_amplitude_on_LEDS>

		file_pointer += n_samples_in_FIFO;
   20d2c:	e0bffb17 	ldw	r2,-20(fp)
   20d30:	1085883a 	add	r2,r2,r2
   20d34:	1085883a 	add	r2,r2,r2
   20d38:	1007883a 	mov	r3,r2
   20d3c:	e0bffa17 	ldw	r2,-24(fp)
   20d40:	10c5883a 	add	r2,r2,r3
   20d44:	e0bffa15 	stw	r2,-24(fp)
		return;
	}
	file_pointer = file;
	end_of_file = &(file[n_samples]);

	while(file_pointer < end_of_file )
   20d48:	e0fffa17 	ldw	r3,-24(fp)
   20d4c:	e0bffc17 	ldw	r2,-16(fp)
   20d50:	18bfe536 	bltu	r3,r2,20ce8 <__alt_data_end+0xf4020ce8>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs

		file_pointer += n_samples_in_FIFO;
	}
}
   20d54:	e037883a 	mov	sp,fp
   20d58:	dfc00117 	ldw	ra,4(sp)
   20d5c:	df000017 	ldw	fp,0(sp)
   20d60:	dec00204 	addi	sp,sp,8
   20d64:	f800283a 	ret

00020d68 <sender_mailbox_callback>:




void sender_mailbox_callback(void* report, int status) {
   20d68:	defffc04 	addi	sp,sp,-16
   20d6c:	dfc00315 	stw	ra,12(sp)
   20d70:	df000215 	stw	fp,8(sp)
   20d74:	df000204 	addi	fp,sp,8
   20d78:	e13ffe15 	stw	r4,-8(fp)
   20d7c:	e17fff15 	stw	r5,-4(fp)
	if (status) {
   20d80:	e0bfff17 	ldw	r2,-4(fp)
   20d84:	10000426 	beq	r2,zero,20d98 <sender_mailbox_callback+0x30>
		printf("Transfer done\n");
   20d88:	010000f4 	movhi	r4,3
   20d8c:	21163e04 	addi	r4,r4,22776
   20d90:	00273f80 	call	273f8 <puts>
	} else {
		printf("error in transfer\n");
	}
}
   20d94:	00000306 	br	20da4 <sender_mailbox_callback+0x3c>

void sender_mailbox_callback(void* report, int status) {
	if (status) {
		printf("Transfer done\n");
	} else {
		printf("error in transfer\n");
   20d98:	010000f4 	movhi	r4,3
   20d9c:	21164204 	addi	r4,r4,22792
   20da0:	00273f80 	call	273f8 <puts>
	}
}
   20da4:	0001883a 	nop
   20da8:	e037883a 	mov	sp,fp
   20dac:	dfc00117 	ldw	ra,4(sp)
   20db0:	df000017 	ldw	fp,0(sp)
   20db4:	dec00204 	addi	sp,sp,8
   20db8:	f800283a 	ret

00020dbc <receiver_mailbox_callback>:


void receiver_mailbox_callback(void* message){
   20dbc:	defffc04 	addi	sp,sp,-16
   20dc0:	dfc00315 	stw	ra,12(sp)
   20dc4:	df000215 	stw	fp,8(sp)
   20dc8:	df000204 	addi	fp,sp,8
   20dcc:	e13fff15 	stw	r4,-4(fp)
	alt_u32* data = (alt_u32*)message;	// cast from void* to alt_u32*
   20dd0:	e0bfff17 	ldw	r2,-4(fp)
   20dd4:	e0bffe15 	stw	r2,-8(fp)

	//IORD_ALTERA_AVALON_MAILBOX_CMD(MAILBOX_TO_SOUND_ACQUISITION_BASE);
	if (message != NULL) {
   20dd8:	e0bfff17 	ldw	r2,-4(fp)
   20ddc:	10001126 	beq	r2,zero,20e24 <receiver_mailbox_callback+0x68>
		processed_file = (unsigned int*)data[0];
   20de0:	e0bffe17 	ldw	r2,-8(fp)
   20de4:	10800017 	ldw	r2,0(r2)
   20de8:	d0a71715 	stw	r2,-25508(gp)
		processed_file_length = (unsigned int) data[1];
   20dec:	e0bffe17 	ldw	r2,-8(fp)
   20df0:	10800104 	addi	r2,r2,4
   20df4:	10800017 	ldw	r2,0(r2)
   20df8:	d0a71615 	stw	r2,-25512(gp)
		printf("Received processed file information: address %x \t length: %u \n\n", processed_file, processed_file_length);
   20dfc:	d0a71717 	ldw	r2,-25508(gp)
   20e00:	d0e71617 	ldw	r3,-25512(gp)
   20e04:	180d883a 	mov	r6,r3
   20e08:	100b883a 	mov	r5,r2
   20e0c:	010000f4 	movhi	r4,3
   20e10:	21164704 	addi	r4,r4,22812
   20e14:	00272fc0 	call	272fc <printf>
		file_ready_to_play = 1;	// raises a flag to start processing the data
   20e18:	00800044 	movi	r2,1
   20e1c:	d0a71505 	stb	r2,-25516(gp)
	} else {
		printf("Incomplete receive\n");
	}
}
   20e20:	00000306 	br	20e30 <receiver_mailbox_callback+0x74>
		processed_file = (unsigned int*)data[0];
		processed_file_length = (unsigned int) data[1];
		printf("Received processed file information: address %x \t length: %u \n\n", processed_file, processed_file_length);
		file_ready_to_play = 1;	// raises a flag to start processing the data
	} else {
		printf("Incomplete receive\n");
   20e24:	010000f4 	movhi	r4,3
   20e28:	21165704 	addi	r4,r4,22876
   20e2c:	00273f80 	call	273f8 <puts>
	}
}
   20e30:	0001883a 	nop
   20e34:	e037883a 	mov	sp,fp
   20e38:	dfc00117 	ldw	ra,4(sp)
   20e3c:	df000017 	ldw	fp,0(sp)
   20e40:	dec00204 	addi	sp,sp,8
   20e44:	f800283a 	ret

00020e48 <sin>:
   20e48:	00a00034 	movhi	r2,32768
   20e4c:	defffa04 	addi	sp,sp,-24
   20e50:	10bfffc4 	addi	r2,r2,-1
   20e54:	00cffa74 	movhi	r3,16361
   20e58:	dfc00515 	stw	ra,20(sp)
   20e5c:	2884703a 	and	r2,r5,r2
   20e60:	18c87ec4 	addi	r3,r3,8699
   20e64:	1880180e 	bge	r3,r2,20ec8 <sin+0x80>
   20e68:	00dffc34 	movhi	r3,32752
   20e6c:	18ffffc4 	addi	r3,r3,-1
   20e70:	1880060e 	bge	r3,r2,20e8c <sin+0x44>
   20e74:	280f883a 	mov	r7,r5
   20e78:	200d883a 	mov	r6,r4
   20e7c:	00265480 	call	26548 <__subdf3>
   20e80:	dfc00517 	ldw	ra,20(sp)
   20e84:	dec00604 	addi	sp,sp,24
   20e88:	f800283a 	ret
   20e8c:	d9800104 	addi	r6,sp,4
   20e90:	00210680 	call	21068 <__ieee754_rem_pio2>
   20e94:	108000cc 	andi	r2,r2,3
   20e98:	00c00044 	movi	r3,1
   20e9c:	10c01926 	beq	r2,r3,20f04 <sin+0xbc>
   20ea0:	01000084 	movi	r4,2
   20ea4:	11000f26 	beq	r2,r4,20ee4 <sin+0x9c>
   20ea8:	10001c26 	beq	r2,zero,20f1c <sin+0xd4>
   20eac:	d9800317 	ldw	r6,12(sp)
   20eb0:	d9c00417 	ldw	r7,16(sp)
   20eb4:	d9000117 	ldw	r4,4(sp)
   20eb8:	d9400217 	ldw	r5,8(sp)
   20ebc:	0021a5c0 	call	21a5c <__kernel_cos>
   20ec0:	18e0003c 	xorhi	r3,r3,32768
   20ec4:	003fee06 	br	20e80 <__alt_data_end+0xf4020e80>
   20ec8:	d8000015 	stw	zero,0(sp)
   20ecc:	000d883a 	mov	r6,zero
   20ed0:	000f883a 	mov	r7,zero
   20ed4:	0022c900 	call	22c90 <__kernel_sin>
   20ed8:	dfc00517 	ldw	ra,20(sp)
   20edc:	dec00604 	addi	sp,sp,24
   20ee0:	f800283a 	ret
   20ee4:	d9800317 	ldw	r6,12(sp)
   20ee8:	d9c00417 	ldw	r7,16(sp)
   20eec:	d9000117 	ldw	r4,4(sp)
   20ef0:	d9400217 	ldw	r5,8(sp)
   20ef4:	d8c00015 	stw	r3,0(sp)
   20ef8:	0022c900 	call	22c90 <__kernel_sin>
   20efc:	18e0003c 	xorhi	r3,r3,32768
   20f00:	003fdf06 	br	20e80 <__alt_data_end+0xf4020e80>
   20f04:	d9800317 	ldw	r6,12(sp)
   20f08:	d9c00417 	ldw	r7,16(sp)
   20f0c:	d9000117 	ldw	r4,4(sp)
   20f10:	d9400217 	ldw	r5,8(sp)
   20f14:	0021a5c0 	call	21a5c <__kernel_cos>
   20f18:	003fd906 	br	20e80 <__alt_data_end+0xf4020e80>
   20f1c:	d9800317 	ldw	r6,12(sp)
   20f20:	d9c00417 	ldw	r7,16(sp)
   20f24:	d9000117 	ldw	r4,4(sp)
   20f28:	d9400217 	ldw	r5,8(sp)
   20f2c:	d8c00015 	stw	r3,0(sp)
   20f30:	0022c900 	call	22c90 <__kernel_sin>
   20f34:	003fd206 	br	20e80 <__alt_data_end+0xf4020e80>

00020f38 <sqrt>:
   20f38:	defff104 	addi	sp,sp,-60
   20f3c:	dd000d15 	stw	r20,52(sp)
   20f40:	050000f4 	movhi	r20,3
   20f44:	dcc00c15 	stw	r19,48(sp)
   20f48:	dc800b15 	stw	r18,44(sp)
   20f4c:	dc400a15 	stw	r17,40(sp)
   20f50:	dc000915 	stw	r16,36(sp)
   20f54:	dfc00e15 	stw	ra,56(sp)
   20f58:	a51e9e04 	addi	r20,r20,31352
   20f5c:	2027883a 	mov	r19,r4
   20f60:	2825883a 	mov	r18,r5
   20f64:	00217d40 	call	217d4 <__ieee754_sqrt>
   20f68:	1821883a 	mov	r16,r3
   20f6c:	a0c00017 	ldw	r3,0(r20)
   20f70:	1023883a 	mov	r17,r2
   20f74:	00bfffc4 	movi	r2,-1
   20f78:	18800a26 	beq	r3,r2,20fa4 <sqrt+0x6c>
   20f7c:	9809883a 	mov	r4,r19
   20f80:	900b883a 	mov	r5,r18
   20f84:	002315c0 	call	2315c <__fpclassifyd>
   20f88:	10000626 	beq	r2,zero,20fa4 <sqrt+0x6c>
   20f8c:	000d883a 	mov	r6,zero
   20f90:	000f883a 	mov	r7,zero
   20f94:	9809883a 	mov	r4,r19
   20f98:	900b883a 	mov	r5,r18
   20f9c:	0025d3c0 	call	25d3c <__ledf2>
   20fa0:	10000a16 	blt	r2,zero,20fcc <sqrt+0x94>
   20fa4:	8805883a 	mov	r2,r17
   20fa8:	8007883a 	mov	r3,r16
   20fac:	dfc00e17 	ldw	ra,56(sp)
   20fb0:	dd000d17 	ldw	r20,52(sp)
   20fb4:	dcc00c17 	ldw	r19,48(sp)
   20fb8:	dc800b17 	ldw	r18,44(sp)
   20fbc:	dc400a17 	ldw	r17,40(sp)
   20fc0:	dc000917 	ldw	r16,36(sp)
   20fc4:	dec00f04 	addi	sp,sp,60
   20fc8:	f800283a 	ret
   20fcc:	00800044 	movi	r2,1
   20fd0:	d8800015 	stw	r2,0(sp)
   20fd4:	a4000017 	ldw	r16,0(r20)
   20fd8:	008000f4 	movhi	r2,3
   20fdc:	10965c04 	addi	r2,r2,22896
   20fe0:	d8800115 	stw	r2,4(sp)
   20fe4:	d8000815 	stw	zero,32(sp)
   20fe8:	dcc00415 	stw	r19,16(sp)
   20fec:	dc800515 	stw	r18,20(sp)
   20ff0:	dcc00215 	stw	r19,8(sp)
   20ff4:	dc800315 	stw	r18,12(sp)
   20ff8:	80000a1e 	bne	r16,zero,21024 <sqrt+0xec>
   20ffc:	d8000615 	stw	zero,24(sp)
   21000:	d8000715 	stw	zero,28(sp)
   21004:	d809883a 	mov	r4,sp
   21008:	00231d00 	call	231d0 <matherr>
   2100c:	10000e26 	beq	r2,zero,21048 <sqrt+0x110>
   21010:	d8800817 	ldw	r2,32(sp)
   21014:	1000101e 	bne	r2,zero,21058 <sqrt+0x120>
   21018:	d8800617 	ldw	r2,24(sp)
   2101c:	d8c00717 	ldw	r3,28(sp)
   21020:	003fe206 	br	20fac <__alt_data_end+0xf4020fac>
   21024:	000d883a 	mov	r6,zero
   21028:	000f883a 	mov	r7,zero
   2102c:	0009883a 	mov	r4,zero
   21030:	000b883a 	mov	r5,zero
   21034:	00252f00 	call	252f0 <__divdf3>
   21038:	d8800615 	stw	r2,24(sp)
   2103c:	d8c00715 	stw	r3,28(sp)
   21040:	00800084 	movi	r2,2
   21044:	80bfef1e 	bne	r16,r2,21004 <__alt_data_end+0xf4021004>
   21048:	00272bc0 	call	272bc <__errno>
   2104c:	00c00844 	movi	r3,33
   21050:	10c00015 	stw	r3,0(r2)
   21054:	003fee06 	br	21010 <__alt_data_end+0xf4021010>
   21058:	00272bc0 	call	272bc <__errno>
   2105c:	d8c00817 	ldw	r3,32(sp)
   21060:	10c00015 	stw	r3,0(r2)
   21064:	003fec06 	br	21018 <__alt_data_end+0xf4021018>

00021068 <__ieee754_rem_pio2>:
   21068:	02200034 	movhi	r8,32768
   2106c:	deffea04 	addi	sp,sp,-88
   21070:	423fffc4 	addi	r8,r8,-1
   21074:	00cffa74 	movhi	r3,16361
   21078:	ddc01315 	stw	r23,76(sp)
   2107c:	dc400d15 	stw	r17,52(sp)
   21080:	dfc01515 	stw	ra,84(sp)
   21084:	df001415 	stw	fp,80(sp)
   21088:	dd801215 	stw	r22,72(sp)
   2108c:	dd401115 	stw	r21,68(sp)
   21090:	dd001015 	stw	r20,64(sp)
   21094:	dcc00f15 	stw	r19,60(sp)
   21098:	dc800e15 	stw	r18,56(sp)
   2109c:	dc000c15 	stw	r16,48(sp)
   210a0:	2a2e703a 	and	r23,r5,r8
   210a4:	18c87ec4 	addi	r3,r3,8699
   210a8:	2823883a 	mov	r17,r5
   210ac:	1dc0790e 	bge	r3,r23,21294 <__ieee754_rem_pio2+0x22c>
   210b0:	009000f4 	movhi	r2,16387
   210b4:	10b65ec4 	addi	r2,r2,-9861
   210b8:	3021883a 	mov	r16,r6
   210bc:	2027883a 	mov	r19,r4
   210c0:	15c02316 	blt	r2,r23,21150 <__ieee754_rem_pio2+0xe8>
   210c4:	01cffe74 	movhi	r7,16377
   210c8:	39c87ec4 	addi	r7,r7,8699
   210cc:	01951034 	movhi	r6,21568
   210d0:	01417a0e 	bge	zero,r5,216bc <__ieee754_rem_pio2+0x654>
   210d4:	00265480 	call	26548 <__subdf3>
   210d8:	1025883a 	mov	r18,r2
   210dc:	008ffe74 	movhi	r2,16377
   210e0:	10887ec4 	addi	r2,r2,8699
   210e4:	1823883a 	mov	r17,r3
   210e8:	b8808426 	beq	r23,r2,212fc <__ieee754_rem_pio2+0x294>
   210ec:	018698b4 	movhi	r6,6754
   210f0:	01cf7474 	movhi	r7,15825
   210f4:	3198cc44 	addi	r6,r6,25393
   210f8:	39ed1844 	addi	r7,r7,-19359
   210fc:	9009883a 	mov	r4,r18
   21100:	180b883a 	mov	r5,r3
   21104:	00265480 	call	26548 <__subdf3>
   21108:	100d883a 	mov	r6,r2
   2110c:	180f883a 	mov	r7,r3
   21110:	9009883a 	mov	r4,r18
   21114:	880b883a 	mov	r5,r17
   21118:	80800015 	stw	r2,0(r16)
   2111c:	80c00115 	stw	r3,4(r16)
   21120:	00265480 	call	26548 <__subdf3>
   21124:	018698b4 	movhi	r6,6754
   21128:	01cf7474 	movhi	r7,15825
   2112c:	3198cc44 	addi	r6,r6,25393
   21130:	39ed1844 	addi	r7,r7,-19359
   21134:	1009883a 	mov	r4,r2
   21138:	180b883a 	mov	r5,r3
   2113c:	00265480 	call	26548 <__subdf3>
   21140:	80800215 	stw	r2,8(r16)
   21144:	80c00315 	stw	r3,12(r16)
   21148:	00800044 	movi	r2,1
   2114c:	00005606 	br	212a8 <__ieee754_rem_pio2+0x240>
   21150:	00904e74 	movhi	r2,16697
   21154:	10887ec4 	addi	r2,r2,8699
   21158:	15c0830e 	bge	r2,r23,21368 <__ieee754_rem_pio2+0x300>
   2115c:	009ffc34 	movhi	r2,32752
   21160:	10bfffc4 	addi	r2,r2,-1
   21164:	15c05c16 	blt	r2,r23,212d8 <__ieee754_rem_pio2+0x270>
   21168:	b829d53a 	srai	r20,r23,20
   2116c:	a53efa84 	addi	r20,r20,-1046
   21170:	a024953a 	slli	r18,r20,20
   21174:	bca5c83a 	sub	r18,r23,r18
   21178:	900b883a 	mov	r5,r18
   2117c:	0026e440 	call	26e44 <__fixdfsi>
   21180:	1009883a 	mov	r4,r2
   21184:	0026ec40 	call	26ec4 <__floatsidf>
   21188:	9809883a 	mov	r4,r19
   2118c:	900b883a 	mov	r5,r18
   21190:	100d883a 	mov	r6,r2
   21194:	180f883a 	mov	r7,r3
   21198:	d8800215 	stw	r2,8(sp)
   2119c:	d8c00315 	stw	r3,12(sp)
   211a0:	00265480 	call	26548 <__subdf3>
   211a4:	000d883a 	mov	r6,zero
   211a8:	01d05c34 	movhi	r7,16752
   211ac:	1009883a 	mov	r4,r2
   211b0:	180b883a 	mov	r5,r3
   211b4:	0025e300 	call	25e30 <__muldf3>
   211b8:	180b883a 	mov	r5,r3
   211bc:	1009883a 	mov	r4,r2
   211c0:	182b883a 	mov	r21,r3
   211c4:	102d883a 	mov	r22,r2
   211c8:	0026e440 	call	26e44 <__fixdfsi>
   211cc:	1009883a 	mov	r4,r2
   211d0:	0026ec40 	call	26ec4 <__floatsidf>
   211d4:	100d883a 	mov	r6,r2
   211d8:	180f883a 	mov	r7,r3
   211dc:	b009883a 	mov	r4,r22
   211e0:	a80b883a 	mov	r5,r21
   211e4:	1027883a 	mov	r19,r2
   211e8:	1825883a 	mov	r18,r3
   211ec:	d8800415 	stw	r2,16(sp)
   211f0:	d8c00515 	stw	r3,20(sp)
   211f4:	00265480 	call	26548 <__subdf3>
   211f8:	000d883a 	mov	r6,zero
   211fc:	01d05c34 	movhi	r7,16752
   21200:	1009883a 	mov	r4,r2
   21204:	180b883a 	mov	r5,r3
   21208:	0025e300 	call	25e30 <__muldf3>
   2120c:	000d883a 	mov	r6,zero
   21210:	000f883a 	mov	r7,zero
   21214:	1009883a 	mov	r4,r2
   21218:	180b883a 	mov	r5,r3
   2121c:	d8800615 	stw	r2,24(sp)
   21220:	d8c00715 	stw	r3,28(sp)
   21224:	0025bd80 	call	25bd8 <__eqdf2>
   21228:	1001431e 	bne	r2,zero,21738 <__ieee754_rem_pio2+0x6d0>
   2122c:	000f883a 	mov	r7,zero
   21230:	000d883a 	mov	r6,zero
   21234:	9809883a 	mov	r4,r19
   21238:	900b883a 	mov	r5,r18
   2123c:	0025bd80 	call	25bd8 <__eqdf2>
   21240:	100f003a 	cmpeq	r7,r2,zero
   21244:	00800084 	movi	r2,2
   21248:	11cfc83a 	sub	r7,r2,r7
   2124c:	00800084 	movi	r2,2
   21250:	d8800015 	stw	r2,0(sp)
   21254:	008000f4 	movhi	r2,3
   21258:	10967e04 	addi	r2,r2,23032
   2125c:	d8800115 	stw	r2,4(sp)
   21260:	a00d883a 	mov	r6,r20
   21264:	800b883a 	mov	r5,r16
   21268:	d9000204 	addi	r4,sp,8
   2126c:	0021f000 	call	21f00 <__kernel_rem_pio2>
   21270:	88000d0e 	bge	r17,zero,212a8 <__ieee754_rem_pio2+0x240>
   21274:	81000117 	ldw	r4,4(r16)
   21278:	80c00317 	ldw	r3,12(r16)
   2127c:	0085c83a 	sub	r2,zero,r2
   21280:	2120003c 	xorhi	r4,r4,32768
   21284:	18e0003c 	xorhi	r3,r3,32768
   21288:	81000115 	stw	r4,4(r16)
   2128c:	80c00315 	stw	r3,12(r16)
   21290:	00000506 	br	212a8 <__ieee754_rem_pio2+0x240>
   21294:	31000015 	stw	r4,0(r6)
   21298:	31400115 	stw	r5,4(r6)
   2129c:	30000215 	stw	zero,8(r6)
   212a0:	30000315 	stw	zero,12(r6)
   212a4:	0005883a 	mov	r2,zero
   212a8:	dfc01517 	ldw	ra,84(sp)
   212ac:	df001417 	ldw	fp,80(sp)
   212b0:	ddc01317 	ldw	r23,76(sp)
   212b4:	dd801217 	ldw	r22,72(sp)
   212b8:	dd401117 	ldw	r21,68(sp)
   212bc:	dd001017 	ldw	r20,64(sp)
   212c0:	dcc00f17 	ldw	r19,60(sp)
   212c4:	dc800e17 	ldw	r18,56(sp)
   212c8:	dc400d17 	ldw	r17,52(sp)
   212cc:	dc000c17 	ldw	r16,48(sp)
   212d0:	dec01604 	addi	sp,sp,88
   212d4:	f800283a 	ret
   212d8:	200d883a 	mov	r6,r4
   212dc:	280f883a 	mov	r7,r5
   212e0:	00265480 	call	26548 <__subdf3>
   212e4:	80800215 	stw	r2,8(r16)
   212e8:	80800015 	stw	r2,0(r16)
   212ec:	80c00315 	stw	r3,12(r16)
   212f0:	80c00115 	stw	r3,4(r16)
   212f4:	0005883a 	mov	r2,zero
   212f8:	003feb06 	br	212a8 <__alt_data_end+0xf40212a8>
   212fc:	01cf7474 	movhi	r7,15825
   21300:	9009883a 	mov	r4,r18
   21304:	39ed1844 	addi	r7,r7,-19359
   21308:	01869834 	movhi	r6,6752
   2130c:	180b883a 	mov	r5,r3
   21310:	00265480 	call	26548 <__subdf3>
   21314:	018b80f4 	movhi	r6,11779
   21318:	01cee8f4 	movhi	r7,15267
   2131c:	319c1cc4 	addi	r6,r6,28787
   21320:	39c66284 	addi	r7,r7,6538
   21324:	1009883a 	mov	r4,r2
   21328:	180b883a 	mov	r5,r3
   2132c:	1025883a 	mov	r18,r2
   21330:	1823883a 	mov	r17,r3
   21334:	00265480 	call	26548 <__subdf3>
   21338:	100d883a 	mov	r6,r2
   2133c:	180f883a 	mov	r7,r3
   21340:	9009883a 	mov	r4,r18
   21344:	880b883a 	mov	r5,r17
   21348:	80800015 	stw	r2,0(r16)
   2134c:	80c00115 	stw	r3,4(r16)
   21350:	00265480 	call	26548 <__subdf3>
   21354:	018b80f4 	movhi	r6,11779
   21358:	01cee8f4 	movhi	r7,15267
   2135c:	319c1cc4 	addi	r6,r6,28787
   21360:	39c66284 	addi	r7,r7,6538
   21364:	003f7306 	br	21134 <__alt_data_end+0xf4021134>
   21368:	0022f5c0 	call	22f5c <fabs>
   2136c:	019b72b4 	movhi	r6,28106
   21370:	01cff934 	movhi	r7,16356
   21374:	31b220c4 	addi	r6,r6,-14205
   21378:	39d7cc04 	addi	r7,r7,24368
   2137c:	1009883a 	mov	r4,r2
   21380:	180b883a 	mov	r5,r3
   21384:	102d883a 	mov	r22,r2
   21388:	182b883a 	mov	r21,r3
   2138c:	0025e300 	call	25e30 <__muldf3>
   21390:	000d883a 	mov	r6,zero
   21394:	01cff834 	movhi	r7,16352
   21398:	1009883a 	mov	r4,r2
   2139c:	180b883a 	mov	r5,r3
   213a0:	0024a440 	call	24a44 <__adddf3>
   213a4:	180b883a 	mov	r5,r3
   213a8:	1009883a 	mov	r4,r2
   213ac:	0026e440 	call	26e44 <__fixdfsi>
   213b0:	1009883a 	mov	r4,r2
   213b4:	1025883a 	mov	r18,r2
   213b8:	0026ec40 	call	26ec4 <__floatsidf>
   213bc:	01cffe74 	movhi	r7,16377
   213c0:	39c87ec4 	addi	r7,r7,8699
   213c4:	01951034 	movhi	r6,21568
   213c8:	1009883a 	mov	r4,r2
   213cc:	180b883a 	mov	r5,r3
   213d0:	1029883a 	mov	r20,r2
   213d4:	1827883a 	mov	r19,r3
   213d8:	0025e300 	call	25e30 <__muldf3>
   213dc:	b009883a 	mov	r4,r22
   213e0:	a80b883a 	mov	r5,r21
   213e4:	100d883a 	mov	r6,r2
   213e8:	180f883a 	mov	r7,r3
   213ec:	00265480 	call	26548 <__subdf3>
   213f0:	018698b4 	movhi	r6,6754
   213f4:	01cf7474 	movhi	r7,15825
   213f8:	a009883a 	mov	r4,r20
   213fc:	3198cc44 	addi	r6,r6,25393
   21400:	39ed1844 	addi	r7,r7,-19359
   21404:	980b883a 	mov	r5,r19
   21408:	1039883a 	mov	fp,r2
   2140c:	d8c00815 	stw	r3,32(sp)
   21410:	0025e300 	call	25e30 <__muldf3>
   21414:	010007c4 	movi	r4,31
   21418:	e017883a 	mov	r11,fp
   2141c:	da800817 	ldw	r10,32(sp)
   21420:	102d883a 	mov	r22,r2
   21424:	182b883a 	mov	r21,r3
   21428:	24802816 	blt	r4,r18,214cc <__ieee754_rem_pio2+0x464>
   2142c:	913fffc4 	addi	r4,r18,-1
   21430:	2109883a 	add	r4,r4,r4
   21434:	014000f4 	movhi	r5,3
   21438:	2109883a 	add	r4,r4,r4
   2143c:	29565e04 	addi	r5,r5,22904
   21440:	2909883a 	add	r4,r5,r4
   21444:	21000017 	ldw	r4,0(r4)
   21448:	b9002026 	beq	r23,r4,214cc <__ieee754_rem_pio2+0x464>
   2144c:	100d883a 	mov	r6,r2
   21450:	180f883a 	mov	r7,r3
   21454:	e009883a 	mov	r4,fp
   21458:	500b883a 	mov	r5,r10
   2145c:	da800b15 	stw	r10,44(sp)
   21460:	df000a15 	stw	fp,40(sp)
   21464:	00265480 	call	26548 <__subdf3>
   21468:	da800b17 	ldw	r10,44(sp)
   2146c:	dac00a17 	ldw	r11,40(sp)
   21470:	1019883a 	mov	r12,r2
   21474:	1813883a 	mov	r9,r3
   21478:	80800015 	stw	r2,0(r16)
   2147c:	80c00115 	stw	r3,4(r16)
   21480:	600d883a 	mov	r6,r12
   21484:	480f883a 	mov	r7,r9
   21488:	5809883a 	mov	r4,r11
   2148c:	500b883a 	mov	r5,r10
   21490:	da400b15 	stw	r9,44(sp)
   21494:	db000a15 	stw	r12,40(sp)
   21498:	00265480 	call	26548 <__subdf3>
   2149c:	b00d883a 	mov	r6,r22
   214a0:	a80f883a 	mov	r7,r21
   214a4:	1009883a 	mov	r4,r2
   214a8:	180b883a 	mov	r5,r3
   214ac:	00265480 	call	26548 <__subdf3>
   214b0:	80800215 	stw	r2,8(r16)
   214b4:	80c00315 	stw	r3,12(r16)
   214b8:	da400b17 	ldw	r9,44(sp)
   214bc:	db000a17 	ldw	r12,40(sp)
   214c0:	88009f16 	blt	r17,zero,21740 <__ieee754_rem_pio2+0x6d8>
   214c4:	9005883a 	mov	r2,r18
   214c8:	003f7706 	br	212a8 <__alt_data_end+0xf40212a8>
   214cc:	d9400817 	ldw	r5,32(sp)
   214d0:	100d883a 	mov	r6,r2
   214d4:	180f883a 	mov	r7,r3
   214d8:	e009883a 	mov	r4,fp
   214dc:	da800b15 	stw	r10,44(sp)
   214e0:	dac00a15 	stw	r11,40(sp)
   214e4:	00265480 	call	26548 <__subdf3>
   214e8:	1019883a 	mov	r12,r2
   214ec:	1804d53a 	srli	r2,r3,20
   214f0:	b811d53a 	srai	r8,r23,20
   214f4:	1813883a 	mov	r9,r3
   214f8:	1081ffcc 	andi	r2,r2,2047
   214fc:	80c00115 	stw	r3,4(r16)
   21500:	83000015 	stw	r12,0(r16)
   21504:	4085c83a 	sub	r2,r8,r2
   21508:	00c00404 	movi	r3,16
   2150c:	da800b17 	ldw	r10,44(sp)
   21510:	dac00a17 	ldw	r11,40(sp)
   21514:	18bfda0e 	bge	r3,r2,21480 <__alt_data_end+0xf4021480>
   21518:	01cf7474 	movhi	r7,15825
   2151c:	39ed1844 	addi	r7,r7,-19359
   21520:	01869834 	movhi	r6,6752
   21524:	a009883a 	mov	r4,r20
   21528:	980b883a 	mov	r5,r19
   2152c:	da000a15 	stw	r8,40(sp)
   21530:	0025e300 	call	25e30 <__muldf3>
   21534:	d9400817 	ldw	r5,32(sp)
   21538:	100d883a 	mov	r6,r2
   2153c:	180f883a 	mov	r7,r3
   21540:	e009883a 	mov	r4,fp
   21544:	102d883a 	mov	r22,r2
   21548:	182b883a 	mov	r21,r3
   2154c:	00265480 	call	26548 <__subdf3>
   21550:	d9400817 	ldw	r5,32(sp)
   21554:	100d883a 	mov	r6,r2
   21558:	180f883a 	mov	r7,r3
   2155c:	e009883a 	mov	r4,fp
   21560:	182f883a 	mov	r23,r3
   21564:	d8800915 	stw	r2,36(sp)
   21568:	00265480 	call	26548 <__subdf3>
   2156c:	b00d883a 	mov	r6,r22
   21570:	a80f883a 	mov	r7,r21
   21574:	1009883a 	mov	r4,r2
   21578:	180b883a 	mov	r5,r3
   2157c:	00265480 	call	26548 <__subdf3>
   21580:	018b80f4 	movhi	r6,11779
   21584:	01cee8f4 	movhi	r7,15267
   21588:	319c1cc4 	addi	r6,r6,28787
   2158c:	39c66284 	addi	r7,r7,6538
   21590:	a009883a 	mov	r4,r20
   21594:	980b883a 	mov	r5,r19
   21598:	102d883a 	mov	r22,r2
   2159c:	182b883a 	mov	r21,r3
   215a0:	0025e300 	call	25e30 <__muldf3>
   215a4:	b00d883a 	mov	r6,r22
   215a8:	a80f883a 	mov	r7,r21
   215ac:	1009883a 	mov	r4,r2
   215b0:	180b883a 	mov	r5,r3
   215b4:	00265480 	call	26548 <__subdf3>
   215b8:	d9000917 	ldw	r4,36(sp)
   215bc:	100d883a 	mov	r6,r2
   215c0:	180f883a 	mov	r7,r3
   215c4:	b80b883a 	mov	r5,r23
   215c8:	102d883a 	mov	r22,r2
   215cc:	182b883a 	mov	r21,r3
   215d0:	00265480 	call	26548 <__subdf3>
   215d4:	1019883a 	mov	r12,r2
   215d8:	1804d53a 	srli	r2,r3,20
   215dc:	da000a17 	ldw	r8,40(sp)
   215e0:	83000015 	stw	r12,0(r16)
   215e4:	1081ffcc 	andi	r2,r2,2047
   215e8:	4091c83a 	sub	r8,r8,r2
   215ec:	80c00115 	stw	r3,4(r16)
   215f0:	00800c44 	movi	r2,49
   215f4:	1813883a 	mov	r9,r3
   215f8:	1200730e 	bge	r2,r8,217c8 <__ieee754_rem_pio2+0x760>
   215fc:	01cee8f4 	movhi	r7,15267
   21600:	39c66284 	addi	r7,r7,6538
   21604:	018b8034 	movhi	r6,11776
   21608:	a009883a 	mov	r4,r20
   2160c:	980b883a 	mov	r5,r19
   21610:	0025e300 	call	25e30 <__muldf3>
   21614:	d9000917 	ldw	r4,36(sp)
   21618:	100d883a 	mov	r6,r2
   2161c:	180f883a 	mov	r7,r3
   21620:	b80b883a 	mov	r5,r23
   21624:	102d883a 	mov	r22,r2
   21628:	182b883a 	mov	r21,r3
   2162c:	00265480 	call	26548 <__subdf3>
   21630:	d9000917 	ldw	r4,36(sp)
   21634:	100d883a 	mov	r6,r2
   21638:	180f883a 	mov	r7,r3
   2163c:	b80b883a 	mov	r5,r23
   21640:	d8c00b15 	stw	r3,44(sp)
   21644:	d8800a15 	stw	r2,40(sp)
   21648:	00265480 	call	26548 <__subdf3>
   2164c:	b00d883a 	mov	r6,r22
   21650:	a80f883a 	mov	r7,r21
   21654:	1009883a 	mov	r4,r2
   21658:	180b883a 	mov	r5,r3
   2165c:	00265480 	call	26548 <__subdf3>
   21660:	01894834 	movhi	r6,9504
   21664:	01ce5f34 	movhi	r7,14716
   21668:	31927044 	addi	r6,r6,18881
   2166c:	39e0e684 	addi	r7,r7,-31846
   21670:	a009883a 	mov	r4,r20
   21674:	980b883a 	mov	r5,r19
   21678:	102d883a 	mov	r22,r2
   2167c:	182b883a 	mov	r21,r3
   21680:	0025e300 	call	25e30 <__muldf3>
   21684:	b00d883a 	mov	r6,r22
   21688:	a80f883a 	mov	r7,r21
   2168c:	1009883a 	mov	r4,r2
   21690:	180b883a 	mov	r5,r3
   21694:	00265480 	call	26548 <__subdf3>
   21698:	dac00a17 	ldw	r11,40(sp)
   2169c:	da800b17 	ldw	r10,44(sp)
   216a0:	102d883a 	mov	r22,r2
   216a4:	182b883a 	mov	r21,r3
   216a8:	100d883a 	mov	r6,r2
   216ac:	180f883a 	mov	r7,r3
   216b0:	5809883a 	mov	r4,r11
   216b4:	500b883a 	mov	r5,r10
   216b8:	003f6a06 	br	21464 <__alt_data_end+0xf4021464>
   216bc:	0024a440 	call	24a44 <__adddf3>
   216c0:	1025883a 	mov	r18,r2
   216c4:	008ffe74 	movhi	r2,16377
   216c8:	10887ec4 	addi	r2,r2,8699
   216cc:	1823883a 	mov	r17,r3
   216d0:	b8802226 	beq	r23,r2,2175c <__ieee754_rem_pio2+0x6f4>
   216d4:	018698b4 	movhi	r6,6754
   216d8:	01cf7474 	movhi	r7,15825
   216dc:	3198cc44 	addi	r6,r6,25393
   216e0:	39ed1844 	addi	r7,r7,-19359
   216e4:	9009883a 	mov	r4,r18
   216e8:	180b883a 	mov	r5,r3
   216ec:	0024a440 	call	24a44 <__adddf3>
   216f0:	100d883a 	mov	r6,r2
   216f4:	180f883a 	mov	r7,r3
   216f8:	9009883a 	mov	r4,r18
   216fc:	880b883a 	mov	r5,r17
   21700:	80800015 	stw	r2,0(r16)
   21704:	80c00115 	stw	r3,4(r16)
   21708:	00265480 	call	26548 <__subdf3>
   2170c:	018698b4 	movhi	r6,6754
   21710:	01cf7474 	movhi	r7,15825
   21714:	3198cc44 	addi	r6,r6,25393
   21718:	39ed1844 	addi	r7,r7,-19359
   2171c:	1009883a 	mov	r4,r2
   21720:	180b883a 	mov	r5,r3
   21724:	0024a440 	call	24a44 <__adddf3>
   21728:	80800215 	stw	r2,8(r16)
   2172c:	80c00315 	stw	r3,12(r16)
   21730:	00bfffc4 	movi	r2,-1
   21734:	003edc06 	br	212a8 <__alt_data_end+0xf40212a8>
   21738:	01c000c4 	movi	r7,3
   2173c:	003ec306 	br	2124c <__alt_data_end+0xf402124c>
   21740:	4a60003c 	xorhi	r9,r9,32768
   21744:	18e0003c 	xorhi	r3,r3,32768
   21748:	83000015 	stw	r12,0(r16)
   2174c:	82400115 	stw	r9,4(r16)
   21750:	80c00315 	stw	r3,12(r16)
   21754:	0485c83a 	sub	r2,zero,r18
   21758:	003ed306 	br	212a8 <__alt_data_end+0xf40212a8>
   2175c:	01cf7474 	movhi	r7,15825
   21760:	9009883a 	mov	r4,r18
   21764:	39ed1844 	addi	r7,r7,-19359
   21768:	01869834 	movhi	r6,6752
   2176c:	180b883a 	mov	r5,r3
   21770:	0024a440 	call	24a44 <__adddf3>
   21774:	018b80f4 	movhi	r6,11779
   21778:	01cee8f4 	movhi	r7,15267
   2177c:	319c1cc4 	addi	r6,r6,28787
   21780:	39c66284 	addi	r7,r7,6538
   21784:	1009883a 	mov	r4,r2
   21788:	180b883a 	mov	r5,r3
   2178c:	1025883a 	mov	r18,r2
   21790:	1823883a 	mov	r17,r3
   21794:	0024a440 	call	24a44 <__adddf3>
   21798:	100d883a 	mov	r6,r2
   2179c:	180f883a 	mov	r7,r3
   217a0:	9009883a 	mov	r4,r18
   217a4:	880b883a 	mov	r5,r17
   217a8:	80800015 	stw	r2,0(r16)
   217ac:	80c00115 	stw	r3,4(r16)
   217b0:	00265480 	call	26548 <__subdf3>
   217b4:	018b80f4 	movhi	r6,11779
   217b8:	01cee8f4 	movhi	r7,15267
   217bc:	319c1cc4 	addi	r6,r6,28787
   217c0:	39c66284 	addi	r7,r7,6538
   217c4:	003fd506 	br	2171c <__alt_data_end+0xf402171c>
   217c8:	dac00917 	ldw	r11,36(sp)
   217cc:	b815883a 	mov	r10,r23
   217d0:	003f2b06 	br	21480 <__alt_data_end+0xf4021480>

000217d4 <__ieee754_sqrt>:
   217d4:	defffd04 	addi	sp,sp,-12
   217d8:	dc400115 	stw	r17,4(sp)
   217dc:	dc000015 	stw	r16,0(sp)
   217e0:	dfc00215 	stw	ra,8(sp)
   217e4:	28dffc2c 	andhi	r3,r5,32752
   217e8:	009ffc34 	movhi	r2,32752
   217ec:	2821883a 	mov	r16,r5
   217f0:	2023883a 	mov	r17,r4
   217f4:	200d883a 	mov	r6,r4
   217f8:	18807b26 	beq	r3,r2,219e8 <__ieee754_sqrt+0x214>
   217fc:	01405f0e 	bge	zero,r5,2197c <__ieee754_sqrt+0x1a8>
   21800:	2815d53a 	srai	r10,r5,20
   21804:	50006a26 	beq	r10,zero,219b0 <__ieee754_sqrt+0x1dc>
   21808:	00c00434 	movhi	r3,16
   2180c:	52bf0044 	addi	r10,r10,-1023
   21810:	18ffffc4 	addi	r3,r3,-1
   21814:	80c6703a 	and	r3,r16,r3
   21818:	5080004c 	andi	r2,r10,1
   2181c:	18c00434 	orhi	r3,r3,16
   21820:	1000511e 	bne	r2,zero,21968 <__ieee754_sqrt+0x194>
   21824:	3004d7fa 	srli	r2,r6,31
   21828:	5015d07a 	srai	r10,r10,1
   2182c:	18c7883a 	add	r3,r3,r3
   21830:	10c5883a 	add	r2,r2,r3
   21834:	01400584 	movi	r5,22
   21838:	3187883a 	add	r3,r6,r6
   2183c:	0013883a 	mov	r9,zero
   21840:	000f883a 	mov	r7,zero
   21844:	01000834 	movhi	r4,32
   21848:	390d883a 	add	r6,r7,r4
   2184c:	1810d7fa 	srli	r8,r3,31
   21850:	297fffc4 	addi	r5,r5,-1
   21854:	11800316 	blt	r2,r6,21864 <__ieee754_sqrt+0x90>
   21858:	1185c83a 	sub	r2,r2,r6
   2185c:	310f883a 	add	r7,r6,r4
   21860:	4913883a 	add	r9,r9,r4
   21864:	1085883a 	add	r2,r2,r2
   21868:	4085883a 	add	r2,r8,r2
   2186c:	18c7883a 	add	r3,r3,r3
   21870:	2008d07a 	srli	r4,r4,1
   21874:	283ff41e 	bne	r5,zero,21848 <__alt_data_end+0xf4021848>
   21878:	01200034 	movhi	r4,32768
   2187c:	01800804 	movi	r6,32
   21880:	0011883a 	mov	r8,zero
   21884:	0019883a 	mov	r12,zero
   21888:	201b883a 	mov	r13,r4
   2188c:	00000806 	br	218b0 <__ieee754_sqrt+0xdc>
   21890:	38801726 	beq	r7,r2,218f0 <__ieee754_sqrt+0x11c>
   21894:	180ad7fa 	srli	r5,r3,31
   21898:	1085883a 	add	r2,r2,r2
   2189c:	31bfffc4 	addi	r6,r6,-1
   218a0:	2885883a 	add	r2,r5,r2
   218a4:	18c7883a 	add	r3,r3,r3
   218a8:	2008d07a 	srli	r4,r4,1
   218ac:	30001726 	beq	r6,zero,2190c <__ieee754_sqrt+0x138>
   218b0:	230b883a 	add	r5,r4,r12
   218b4:	38bff60e 	bge	r7,r2,21890 <__alt_data_end+0xf4021890>
   218b8:	2ae0002c 	andhi	r11,r5,32768
   218bc:	2919883a 	add	r12,r5,r4
   218c0:	5b400826 	beq	r11,r13,218e4 <__ieee754_sqrt+0x110>
   218c4:	3817883a 	mov	r11,r7
   218c8:	11c5c83a 	sub	r2,r2,r7
   218cc:	1940012e 	bgeu	r3,r5,218d4 <__ieee754_sqrt+0x100>
   218d0:	10bfffc4 	addi	r2,r2,-1
   218d4:	1947c83a 	sub	r3,r3,r5
   218d8:	4111883a 	add	r8,r8,r4
   218dc:	580f883a 	mov	r7,r11
   218e0:	003fec06 	br	21894 <__alt_data_end+0xf4021894>
   218e4:	603ff716 	blt	r12,zero,218c4 <__alt_data_end+0xf40218c4>
   218e8:	3ac00044 	addi	r11,r7,1
   218ec:	003ff606 	br	218c8 <__alt_data_end+0xf40218c8>
   218f0:	19401936 	bltu	r3,r5,21958 <__ieee754_sqrt+0x184>
   218f4:	2ae0002c 	andhi	r11,r5,32768
   218f8:	2919883a 	add	r12,r5,r4
   218fc:	5b404526 	beq	r11,r13,21a14 <__ieee754_sqrt+0x240>
   21900:	1017883a 	mov	r11,r2
   21904:	0005883a 	mov	r2,zero
   21908:	003ff206 	br	218d4 <__alt_data_end+0xf40218d4>
   2190c:	10c4b03a 	or	r2,r2,r3
   21910:	10000426 	beq	r2,zero,21924 <__ieee754_sqrt+0x150>
   21914:	00bfffc4 	movi	r2,-1
   21918:	40804026 	beq	r8,r2,21a1c <__ieee754_sqrt+0x248>
   2191c:	4080004c 	andi	r2,r8,1
   21920:	4091883a 	add	r8,r8,r2
   21924:	4004d07a 	srli	r2,r8,1
   21928:	4807d07a 	srai	r3,r9,1
   2192c:	010ff834 	movhi	r4,16352
   21930:	4a40004c 	andi	r9,r9,1
   21934:	1909883a 	add	r4,r3,r4
   21938:	4800091e 	bne	r9,zero,21960 <__ieee754_sqrt+0x18c>
   2193c:	5006953a 	slli	r3,r10,20
   21940:	1907883a 	add	r3,r3,r4
   21944:	dfc00217 	ldw	ra,8(sp)
   21948:	dc400117 	ldw	r17,4(sp)
   2194c:	dc000017 	ldw	r16,0(sp)
   21950:	dec00304 	addi	sp,sp,12
   21954:	f800283a 	ret
   21958:	3805883a 	mov	r2,r7
   2195c:	003fcd06 	br	21894 <__alt_data_end+0xf4021894>
   21960:	10a00034 	orhi	r2,r2,32768
   21964:	003ff506 	br	2193c <__alt_data_end+0xf402193c>
   21968:	3004d7fa 	srli	r2,r6,31
   2196c:	18c7883a 	add	r3,r3,r3
   21970:	318d883a 	add	r6,r6,r6
   21974:	10c7883a 	add	r3,r2,r3
   21978:	003faa06 	br	21824 <__alt_data_end+0xf4021824>
   2197c:	00a00034 	movhi	r2,32768
   21980:	10bfffc4 	addi	r2,r2,-1
   21984:	2884703a 	and	r2,r5,r2
   21988:	1104b03a 	or	r2,r2,r4
   2198c:	10001e26 	beq	r2,zero,21a08 <__ieee754_sqrt+0x234>
   21990:	2800291e 	bne	r5,zero,21a38 <__ieee754_sqrt+0x264>
   21994:	0015883a 	mov	r10,zero
   21998:	3020d2fa 	srli	r16,r6,11
   2199c:	52bffac4 	addi	r10,r10,-21
   219a0:	300c957a 	slli	r6,r6,21
   219a4:	803ffc26 	beq	r16,zero,21998 <__alt_data_end+0xf4021998>
   219a8:	8080042c 	andhi	r2,r16,16
   219ac:	10001e1e 	bne	r2,zero,21a28 <__ieee754_sqrt+0x254>
   219b0:	0005883a 	mov	r2,zero
   219b4:	00000106 	br	219bc <__ieee754_sqrt+0x1e8>
   219b8:	1805883a 	mov	r2,r3
   219bc:	8421883a 	add	r16,r16,r16
   219c0:	8100042c 	andhi	r4,r16,16
   219c4:	10c00044 	addi	r3,r2,1
   219c8:	203ffb26 	beq	r4,zero,219b8 <__alt_data_end+0xf40219b8>
   219cc:	01000804 	movi	r4,32
   219d0:	20c9c83a 	sub	r4,r4,r3
   219d4:	3108d83a 	srl	r4,r6,r4
   219d8:	5095c83a 	sub	r10,r10,r2
   219dc:	30cc983a 	sll	r6,r6,r3
   219e0:	2420b03a 	or	r16,r4,r16
   219e4:	003f8806 	br	21808 <__alt_data_end+0xf4021808>
   219e8:	280f883a 	mov	r7,r5
   219ec:	0025e300 	call	25e30 <__muldf3>
   219f0:	880d883a 	mov	r6,r17
   219f4:	800f883a 	mov	r7,r16
   219f8:	1009883a 	mov	r4,r2
   219fc:	180b883a 	mov	r5,r3
   21a00:	0024a440 	call	24a44 <__adddf3>
   21a04:	003fcf06 	br	21944 <__alt_data_end+0xf4021944>
   21a08:	2005883a 	mov	r2,r4
   21a0c:	2807883a 	mov	r3,r5
   21a10:	003fcc06 	br	21944 <__alt_data_end+0xf4021944>
   21a14:	603fba16 	blt	r12,zero,21900 <__alt_data_end+0xf4021900>
   21a18:	003fb306 	br	218e8 <__alt_data_end+0xf40218e8>
   21a1c:	4a400044 	addi	r9,r9,1
   21a20:	0005883a 	mov	r2,zero
   21a24:	003fc006 	br	21928 <__alt_data_end+0xf4021928>
   21a28:	01000804 	movi	r4,32
   21a2c:	00bfffc4 	movi	r2,-1
   21a30:	0007883a 	mov	r3,zero
   21a34:	003fe706 	br	219d4 <__alt_data_end+0xf40219d4>
   21a38:	200d883a 	mov	r6,r4
   21a3c:	280f883a 	mov	r7,r5
   21a40:	00265480 	call	26548 <__subdf3>
   21a44:	100d883a 	mov	r6,r2
   21a48:	180f883a 	mov	r7,r3
   21a4c:	1009883a 	mov	r4,r2
   21a50:	180b883a 	mov	r5,r3
   21a54:	00252f00 	call	252f0 <__divdf3>
   21a58:	003fba06 	br	21944 <__alt_data_end+0xf4021944>

00021a5c <__kernel_cos>:
   21a5c:	defff304 	addi	sp,sp,-52
   21a60:	dc000315 	stw	r16,12(sp)
   21a64:	04200034 	movhi	r16,32768
   21a68:	843fffc4 	addi	r16,r16,-1
   21a6c:	008f9034 	movhi	r2,15936
   21a70:	df000b15 	stw	fp,44(sp)
   21a74:	ddc00a15 	stw	r23,40(sp)
   21a78:	dd800915 	stw	r22,36(sp)
   21a7c:	dcc00615 	stw	r19,24(sp)
   21a80:	dfc00c15 	stw	ra,48(sp)
   21a84:	dd400815 	stw	r21,32(sp)
   21a88:	dd000715 	stw	r20,28(sp)
   21a8c:	dc800515 	stw	r18,20(sp)
   21a90:	dc400415 	stw	r17,16(sp)
   21a94:	2c20703a 	and	r16,r5,r16
   21a98:	10bfffc4 	addi	r2,r2,-1
   21a9c:	2827883a 	mov	r19,r5
   21aa0:	202d883a 	mov	r22,r4
   21aa4:	302f883a 	mov	r23,r6
   21aa8:	3839883a 	mov	fp,r7
   21aac:	14007516 	blt	r2,r16,21c84 <__kernel_cos+0x228>
   21ab0:	0026e440 	call	26e44 <__fixdfsi>
   21ab4:	10010f26 	beq	r2,zero,21ef4 <__kernel_cos+0x498>
   21ab8:	b00d883a 	mov	r6,r22
   21abc:	980f883a 	mov	r7,r19
   21ac0:	b009883a 	mov	r4,r22
   21ac4:	980b883a 	mov	r5,r19
   21ac8:	0025e300 	call	25e30 <__muldf3>
   21acc:	01afa234 	movhi	r6,48776
   21ad0:	01ef6a74 	movhi	r7,48553
   21ad4:	318e3504 	addi	r6,r6,14548
   21ad8:	39feba44 	addi	r7,r7,-1303
   21adc:	1009883a 	mov	r4,r2
   21ae0:	180b883a 	mov	r5,r3
   21ae4:	102b883a 	mov	r21,r2
   21ae8:	1829883a 	mov	r20,r3
   21aec:	0025e300 	call	25e30 <__muldf3>
   21af0:	01af6d74 	movhi	r6,48565
   21af4:	01cf88b4 	movhi	r7,15906
   21af8:	31ac7104 	addi	r6,r6,-20028
   21afc:	39fba784 	addi	r7,r7,-4450
   21b00:	1009883a 	mov	r4,r2
   21b04:	180b883a 	mov	r5,r3
   21b08:	0024a440 	call	24a44 <__adddf3>
   21b0c:	a80d883a 	mov	r6,r21
   21b10:	a00f883a 	mov	r7,r20
   21b14:	1009883a 	mov	r4,r2
   21b18:	180b883a 	mov	r5,r3
   21b1c:	0025e300 	call	25e30 <__muldf3>
   21b20:	01a02734 	movhi	r6,32924
   21b24:	01cfa4b4 	movhi	r7,16018
   21b28:	3194ab44 	addi	r6,r6,21165
   21b2c:	39df93c4 	addi	r7,r7,32335
   21b30:	1009883a 	mov	r4,r2
   21b34:	180b883a 	mov	r5,r3
   21b38:	00265480 	call	26548 <__subdf3>
   21b3c:	a80d883a 	mov	r6,r21
   21b40:	a00f883a 	mov	r7,r20
   21b44:	1009883a 	mov	r4,r2
   21b48:	180b883a 	mov	r5,r3
   21b4c:	0025e300 	call	25e30 <__muldf3>
   21b50:	018672f4 	movhi	r6,6603
   21b54:	01cfbeb4 	movhi	r7,16122
   21b58:	31856404 	addi	r6,r6,5520
   21b5c:	39c06804 	addi	r7,r7,416
   21b60:	1009883a 	mov	r4,r2
   21b64:	180b883a 	mov	r5,r3
   21b68:	0024a440 	call	24a44 <__adddf3>
   21b6c:	a80d883a 	mov	r6,r21
   21b70:	a00f883a 	mov	r7,r20
   21b74:	1009883a 	mov	r4,r2
   21b78:	180b883a 	mov	r5,r3
   21b7c:	0025e300 	call	25e30 <__muldf3>
   21b80:	0185b074 	movhi	r6,5825
   21b84:	01cfd5f4 	movhi	r7,16215
   21b88:	31945dc4 	addi	r6,r6,20855
   21b8c:	39f05b04 	addi	r7,r7,-16020
   21b90:	1009883a 	mov	r4,r2
   21b94:	180b883a 	mov	r5,r3
   21b98:	00265480 	call	26548 <__subdf3>
   21b9c:	a80d883a 	mov	r6,r21
   21ba0:	a00f883a 	mov	r7,r20
   21ba4:	1009883a 	mov	r4,r2
   21ba8:	180b883a 	mov	r5,r3
   21bac:	0025e300 	call	25e30 <__muldf3>
   21bb0:	01955574 	movhi	r6,21845
   21bb4:	01cfe974 	movhi	r7,16293
   21bb8:	31955304 	addi	r6,r6,21836
   21bbc:	39d55544 	addi	r7,r7,21845
   21bc0:	1009883a 	mov	r4,r2
   21bc4:	180b883a 	mov	r5,r3
   21bc8:	0024a440 	call	24a44 <__adddf3>
   21bcc:	a80d883a 	mov	r6,r21
   21bd0:	a00f883a 	mov	r7,r20
   21bd4:	1009883a 	mov	r4,r2
   21bd8:	180b883a 	mov	r5,r3
   21bdc:	0025e300 	call	25e30 <__muldf3>
   21be0:	1017883a 	mov	r11,r2
   21be4:	1815883a 	mov	r10,r3
   21be8:	a809883a 	mov	r4,r21
   21bec:	a00b883a 	mov	r5,r20
   21bf0:	000d883a 	mov	r6,zero
   21bf4:	01cff834 	movhi	r7,16352
   21bf8:	da800215 	stw	r10,8(sp)
   21bfc:	dac00115 	stw	r11,4(sp)
   21c00:	0025e300 	call	25e30 <__muldf3>
   21c04:	dac00117 	ldw	r11,4(sp)
   21c08:	da800217 	ldw	r10,8(sp)
   21c0c:	a809883a 	mov	r4,r21
   21c10:	580d883a 	mov	r6,r11
   21c14:	500f883a 	mov	r7,r10
   21c18:	a00b883a 	mov	r5,r20
   21c1c:	1023883a 	mov	r17,r2
   21c20:	1821883a 	mov	r16,r3
   21c24:	0025e300 	call	25e30 <__muldf3>
   21c28:	b80d883a 	mov	r6,r23
   21c2c:	e00f883a 	mov	r7,fp
   21c30:	b009883a 	mov	r4,r22
   21c34:	980b883a 	mov	r5,r19
   21c38:	1029883a 	mov	r20,r2
   21c3c:	1825883a 	mov	r18,r3
   21c40:	0025e300 	call	25e30 <__muldf3>
   21c44:	a009883a 	mov	r4,r20
   21c48:	900b883a 	mov	r5,r18
   21c4c:	100d883a 	mov	r6,r2
   21c50:	180f883a 	mov	r7,r3
   21c54:	00265480 	call	26548 <__subdf3>
   21c58:	8809883a 	mov	r4,r17
   21c5c:	800b883a 	mov	r5,r16
   21c60:	100d883a 	mov	r6,r2
   21c64:	180f883a 	mov	r7,r3
   21c68:	00265480 	call	26548 <__subdf3>
   21c6c:	100d883a 	mov	r6,r2
   21c70:	180f883a 	mov	r7,r3
   21c74:	0009883a 	mov	r4,zero
   21c78:	014ffc34 	movhi	r5,16368
   21c7c:	00265480 	call	26548 <__subdf3>
   21c80:	00008b06 	br	21eb0 <__kernel_cos+0x454>
   21c84:	200d883a 	mov	r6,r4
   21c88:	280f883a 	mov	r7,r5
   21c8c:	0025e300 	call	25e30 <__muldf3>
   21c90:	01afa234 	movhi	r6,48776
   21c94:	01ef6a74 	movhi	r7,48553
   21c98:	318e3504 	addi	r6,r6,14548
   21c9c:	39feba44 	addi	r7,r7,-1303
   21ca0:	1009883a 	mov	r4,r2
   21ca4:	180b883a 	mov	r5,r3
   21ca8:	1025883a 	mov	r18,r2
   21cac:	1823883a 	mov	r17,r3
   21cb0:	0025e300 	call	25e30 <__muldf3>
   21cb4:	01af6d74 	movhi	r6,48565
   21cb8:	01cf88b4 	movhi	r7,15906
   21cbc:	31ac7104 	addi	r6,r6,-20028
   21cc0:	39fba784 	addi	r7,r7,-4450
   21cc4:	1009883a 	mov	r4,r2
   21cc8:	180b883a 	mov	r5,r3
   21ccc:	0024a440 	call	24a44 <__adddf3>
   21cd0:	900d883a 	mov	r6,r18
   21cd4:	880f883a 	mov	r7,r17
   21cd8:	1009883a 	mov	r4,r2
   21cdc:	180b883a 	mov	r5,r3
   21ce0:	0025e300 	call	25e30 <__muldf3>
   21ce4:	01a02734 	movhi	r6,32924
   21ce8:	01cfa4b4 	movhi	r7,16018
   21cec:	3194ab44 	addi	r6,r6,21165
   21cf0:	39df93c4 	addi	r7,r7,32335
   21cf4:	1009883a 	mov	r4,r2
   21cf8:	180b883a 	mov	r5,r3
   21cfc:	00265480 	call	26548 <__subdf3>
   21d00:	900d883a 	mov	r6,r18
   21d04:	880f883a 	mov	r7,r17
   21d08:	1009883a 	mov	r4,r2
   21d0c:	180b883a 	mov	r5,r3
   21d10:	0025e300 	call	25e30 <__muldf3>
   21d14:	018672f4 	movhi	r6,6603
   21d18:	01cfbeb4 	movhi	r7,16122
   21d1c:	31856404 	addi	r6,r6,5520
   21d20:	39c06804 	addi	r7,r7,416
   21d24:	1009883a 	mov	r4,r2
   21d28:	180b883a 	mov	r5,r3
   21d2c:	0024a440 	call	24a44 <__adddf3>
   21d30:	900d883a 	mov	r6,r18
   21d34:	880f883a 	mov	r7,r17
   21d38:	1009883a 	mov	r4,r2
   21d3c:	180b883a 	mov	r5,r3
   21d40:	0025e300 	call	25e30 <__muldf3>
   21d44:	0185b074 	movhi	r6,5825
   21d48:	01cfd5f4 	movhi	r7,16215
   21d4c:	31945dc4 	addi	r6,r6,20855
   21d50:	39f05b04 	addi	r7,r7,-16020
   21d54:	1009883a 	mov	r4,r2
   21d58:	180b883a 	mov	r5,r3
   21d5c:	00265480 	call	26548 <__subdf3>
   21d60:	900d883a 	mov	r6,r18
   21d64:	880f883a 	mov	r7,r17
   21d68:	1009883a 	mov	r4,r2
   21d6c:	180b883a 	mov	r5,r3
   21d70:	0025e300 	call	25e30 <__muldf3>
   21d74:	01955574 	movhi	r6,21845
   21d78:	01cfe974 	movhi	r7,16293
   21d7c:	31955304 	addi	r6,r6,21836
   21d80:	39d55544 	addi	r7,r7,21845
   21d84:	1009883a 	mov	r4,r2
   21d88:	180b883a 	mov	r5,r3
   21d8c:	0024a440 	call	24a44 <__adddf3>
   21d90:	900d883a 	mov	r6,r18
   21d94:	880f883a 	mov	r7,r17
   21d98:	1009883a 	mov	r4,r2
   21d9c:	180b883a 	mov	r5,r3
   21da0:	0025e300 	call	25e30 <__muldf3>
   21da4:	1013883a 	mov	r9,r2
   21da8:	1017883a 	mov	r11,r2
   21dac:	008ff4f4 	movhi	r2,16339
   21db0:	108ccc84 	addi	r2,r2,13106
   21db4:	1811883a 	mov	r8,r3
   21db8:	902b883a 	mov	r21,r18
   21dbc:	8829883a 	mov	r20,r17
   21dc0:	1815883a 	mov	r10,r3
   21dc4:	143f880e 	bge	r2,r16,21be8 <__alt_data_end+0xf4021be8>
   21dc8:	008ffa74 	movhi	r2,16361
   21dcc:	14004416 	blt	r2,r16,21ee0 <__kernel_cos+0x484>
   21dd0:	00bff834 	movhi	r2,65504
   21dd4:	80a1883a 	add	r16,r16,r2
   21dd8:	000d883a 	mov	r6,zero
   21ddc:	800f883a 	mov	r7,r16
   21de0:	0009883a 	mov	r4,zero
   21de4:	014ffc34 	movhi	r5,16368
   21de8:	da400115 	stw	r9,4(sp)
   21dec:	d8c00215 	stw	r3,8(sp)
   21df0:	00265480 	call	26548 <__subdf3>
   21df4:	da000217 	ldw	r8,8(sp)
   21df8:	da400117 	ldw	r9,4(sp)
   21dfc:	102b883a 	mov	r21,r2
   21e00:	d8c00015 	stw	r3,0(sp)
   21e04:	9009883a 	mov	r4,r18
   21e08:	880b883a 	mov	r5,r17
   21e0c:	000d883a 	mov	r6,zero
   21e10:	01cff834 	movhi	r7,16352
   21e14:	da000215 	stw	r8,8(sp)
   21e18:	da400115 	stw	r9,4(sp)
   21e1c:	0025e300 	call	25e30 <__muldf3>
   21e20:	800f883a 	mov	r7,r16
   21e24:	000d883a 	mov	r6,zero
   21e28:	1009883a 	mov	r4,r2
   21e2c:	180b883a 	mov	r5,r3
   21e30:	00265480 	call	26548 <__subdf3>
   21e34:	da400117 	ldw	r9,4(sp)
   21e38:	da000217 	ldw	r8,8(sp)
   21e3c:	9009883a 	mov	r4,r18
   21e40:	480d883a 	mov	r6,r9
   21e44:	400f883a 	mov	r7,r8
   21e48:	880b883a 	mov	r5,r17
   21e4c:	1029883a 	mov	r20,r2
   21e50:	1821883a 	mov	r16,r3
   21e54:	0025e300 	call	25e30 <__muldf3>
   21e58:	b80d883a 	mov	r6,r23
   21e5c:	e00f883a 	mov	r7,fp
   21e60:	b009883a 	mov	r4,r22
   21e64:	980b883a 	mov	r5,r19
   21e68:	1025883a 	mov	r18,r2
   21e6c:	1823883a 	mov	r17,r3
   21e70:	0025e300 	call	25e30 <__muldf3>
   21e74:	100d883a 	mov	r6,r2
   21e78:	180f883a 	mov	r7,r3
   21e7c:	9009883a 	mov	r4,r18
   21e80:	880b883a 	mov	r5,r17
   21e84:	00265480 	call	26548 <__subdf3>
   21e88:	100d883a 	mov	r6,r2
   21e8c:	180f883a 	mov	r7,r3
   21e90:	a009883a 	mov	r4,r20
   21e94:	800b883a 	mov	r5,r16
   21e98:	00265480 	call	26548 <__subdf3>
   21e9c:	d9400017 	ldw	r5,0(sp)
   21ea0:	100d883a 	mov	r6,r2
   21ea4:	180f883a 	mov	r7,r3
   21ea8:	a809883a 	mov	r4,r21
   21eac:	00265480 	call	26548 <__subdf3>
   21eb0:	dfc00c17 	ldw	ra,48(sp)
   21eb4:	df000b17 	ldw	fp,44(sp)
   21eb8:	ddc00a17 	ldw	r23,40(sp)
   21ebc:	dd800917 	ldw	r22,36(sp)
   21ec0:	dd400817 	ldw	r21,32(sp)
   21ec4:	dd000717 	ldw	r20,28(sp)
   21ec8:	dcc00617 	ldw	r19,24(sp)
   21ecc:	dc800517 	ldw	r18,20(sp)
   21ed0:	dc400417 	ldw	r17,16(sp)
   21ed4:	dc000317 	ldw	r16,12(sp)
   21ed8:	dec00d04 	addi	sp,sp,52
   21edc:	f800283a 	ret
   21ee0:	008ff9f4 	movhi	r2,16359
   21ee4:	002b883a 	mov	r21,zero
   21ee8:	d8800015 	stw	r2,0(sp)
   21eec:	040ff4b4 	movhi	r16,16338
   21ef0:	003fc406 	br	21e04 <__alt_data_end+0xf4021e04>
   21ef4:	0005883a 	mov	r2,zero
   21ef8:	00cffc34 	movhi	r3,16368
   21efc:	003fec06 	br	21eb0 <__alt_data_end+0xf4021eb0>

00021f00 <__kernel_rem_pio2>:
   21f00:	deff5a04 	addi	sp,sp,-664
   21f04:	da00a617 	ldw	r8,664(sp)
   21f08:	00c000f4 	movhi	r3,3
   21f0c:	18d6d004 	addi	r3,r3,23360
   21f10:	4205883a 	add	r2,r8,r8
   21f14:	1085883a 	add	r2,r2,r2
   21f18:	1885883a 	add	r2,r3,r2
   21f1c:	d9008e15 	stw	r4,568(sp)
   21f20:	d9408f15 	stw	r5,572(sp)
   21f24:	313fff44 	addi	r4,r6,-3
   21f28:	01400604 	movi	r5,24
   21f2c:	dd80a215 	stw	r22,648(sp)
   21f30:	dc009c15 	stw	r16,624(sp)
   21f34:	dfc0a515 	stw	ra,660(sp)
   21f38:	df00a415 	stw	fp,656(sp)
   21f3c:	ddc0a315 	stw	r23,652(sp)
   21f40:	dd40a115 	stw	r21,644(sp)
   21f44:	dd00a015 	stw	r20,640(sp)
   21f48:	dcc09f15 	stw	r19,636(sp)
   21f4c:	dc809e15 	stw	r18,632(sp)
   21f50:	dc409d15 	stw	r17,628(sp)
   21f54:	3021883a 	mov	r16,r6
   21f58:	d9c09315 	stw	r7,588(sp)
   21f5c:	15800017 	ldw	r22,0(r2)
   21f60:	00233900 	call	23390 <__divsi3>
   21f64:	da009317 	ldw	r8,588(sp)
   21f68:	d8809215 	stw	r2,584(sp)
   21f6c:	423fffc4 	addi	r8,r8,-1
   21f70:	da008d15 	stw	r8,564(sp)
   21f74:	10033b16 	blt	r2,zero,22c64 <__kernel_rem_pio2+0xd64>
   21f78:	da009217 	ldw	r8,584(sp)
   21f7c:	d9009217 	ldw	r4,584(sp)
   21f80:	42000044 	addi	r8,r8,1
   21f84:	40fffa24 	muli	r3,r8,-24
   21f88:	da009515 	stw	r8,596(sp)
   21f8c:	da008d17 	ldw	r8,564(sp)
   21f90:	1c07883a 	add	r3,r3,r16
   21f94:	d8c09015 	stw	r3,576(sp)
   21f98:	b205883a 	add	r2,r22,r8
   21f9c:	2223c83a 	sub	r17,r4,r8
   21fa0:	10001016 	blt	r2,zero,21fe4 <__kernel_rem_pio2+0xe4>
   21fa4:	da00a717 	ldw	r8,668(sp)
   21fa8:	8c65883a 	add	r18,r17,r17
   21fac:	94a5883a 	add	r18,r18,r18
   21fb0:	1445883a 	add	r2,r2,r17
   21fb4:	dcc05004 	addi	r19,sp,320
   21fb8:	44a5883a 	add	r18,r8,r18
   21fbc:	14000044 	addi	r16,r2,1
   21fc0:	88015316 	blt	r17,zero,22510 <__kernel_rem_pio2+0x610>
   21fc4:	91000017 	ldw	r4,0(r18)
   21fc8:	0026ec40 	call	26ec4 <__floatsidf>
   21fcc:	98800015 	stw	r2,0(r19)
   21fd0:	98c00115 	stw	r3,4(r19)
   21fd4:	8c400044 	addi	r17,r17,1
   21fd8:	9cc00204 	addi	r19,r19,8
   21fdc:	94800104 	addi	r18,r18,4
   21fe0:	8c3ff71e 	bne	r17,r16,21fc0 <__alt_data_end+0xf4021fc0>
   21fe4:	b0002816 	blt	r22,zero,22088 <__kernel_rem_pio2+0x188>
   21fe8:	da008d17 	ldw	r8,564(sp)
   21fec:	b4c00044 	addi	r19,r22,1
   21ff0:	982690fa 	slli	r19,r19,3
   21ff4:	402490fa 	slli	r18,r8,3
   21ff8:	da008e17 	ldw	r8,568(sp)
   21ffc:	d8805004 	addi	r2,sp,320
   22000:	94000204 	addi	r16,r18,8
   22004:	d823883a 	mov	r17,sp
   22008:	14a5883a 	add	r18,r2,r18
   2200c:	dcef883a 	add	r23,sp,r19
   22010:	4421883a 	add	r16,r8,r16
   22014:	dd809115 	stw	r22,580(sp)
   22018:	4039883a 	mov	fp,r8
   2201c:	da008d17 	ldw	r8,564(sp)
   22020:	40016016 	blt	r8,zero,225a4 <__kernel_rem_pio2+0x6a4>
   22024:	e027883a 	mov	r19,fp
   22028:	9029883a 	mov	r20,r18
   2202c:	002d883a 	mov	r22,zero
   22030:	002b883a 	mov	r21,zero
   22034:	a1800017 	ldw	r6,0(r20)
   22038:	a1c00117 	ldw	r7,4(r20)
   2203c:	99000017 	ldw	r4,0(r19)
   22040:	99400117 	ldw	r5,4(r19)
   22044:	9cc00204 	addi	r19,r19,8
   22048:	a53ffe04 	addi	r20,r20,-8
   2204c:	0025e300 	call	25e30 <__muldf3>
   22050:	b009883a 	mov	r4,r22
   22054:	a80b883a 	mov	r5,r21
   22058:	100d883a 	mov	r6,r2
   2205c:	180f883a 	mov	r7,r3
   22060:	0024a440 	call	24a44 <__adddf3>
   22064:	102d883a 	mov	r22,r2
   22068:	182b883a 	mov	r21,r3
   2206c:	9c3ff11e 	bne	r19,r16,22034 <__alt_data_end+0xf4022034>
   22070:	8d800015 	stw	r22,0(r17)
   22074:	8d400115 	stw	r21,4(r17)
   22078:	8c400204 	addi	r17,r17,8
   2207c:	94800204 	addi	r18,r18,8
   22080:	8dffe61e 	bne	r17,r23,2201c <__alt_data_end+0xf402201c>
   22084:	dd809117 	ldw	r22,580(sp)
   22088:	00d00034 	movhi	r3,16384
   2208c:	da009317 	ldw	r8,588(sp)
   22090:	18ffff84 	addi	r3,r3,-2
   22094:	b0c7883a 	add	r3,r22,r3
   22098:	18c7883a 	add	r3,r3,r3
   2209c:	402090fa 	slli	r16,r8,3
   220a0:	18c7883a 	add	r3,r3,r3
   220a4:	da007804 	addi	r8,sp,480
   220a8:	40d1883a 	add	r8,r8,r3
   220ac:	b0bfffc4 	addi	r2,r22,-1
   220b0:	da009615 	stw	r8,600(sp)
   220b4:	da008e17 	ldw	r8,568(sp)
   220b8:	1085883a 	add	r2,r2,r2
   220bc:	1085883a 	add	r2,r2,r2
   220c0:	19000104 	addi	r4,r3,4
   220c4:	d885883a 	add	r2,sp,r2
   220c8:	4421883a 	add	r16,r8,r16
   220cc:	da007804 	addi	r8,sp,480
   220d0:	4111883a 	add	r8,r8,r4
   220d4:	10807804 	addi	r2,r2,480
   220d8:	da009715 	stw	r8,604(sp)
   220dc:	b025883a 	mov	r18,r22
   220e0:	d8809815 	stw	r2,608(sp)
   220e4:	dd809415 	stw	r22,592(sp)
   220e8:	900490fa 	slli	r2,r18,3
   220ec:	d885883a 	add	r2,sp,r2
   220f0:	17000017 	ldw	fp,0(r2)
   220f4:	15400117 	ldw	r21,4(r2)
   220f8:	04802b0e 	bge	zero,r18,221a8 <__kernel_rem_pio2+0x2a8>
   220fc:	00880034 	movhi	r2,8192
   22100:	10bfffc4 	addi	r2,r2,-1
   22104:	90a9883a 	add	r20,r18,r2
   22108:	a02890fa 	slli	r20,r20,3
   2210c:	dc407804 	addi	r17,sp,480
   22110:	dcfffe04 	addi	r19,sp,-8
   22114:	dd29883a 	add	r20,sp,r20
   22118:	000d883a 	mov	r6,zero
   2211c:	01cf9c34 	movhi	r7,15984
   22120:	e009883a 	mov	r4,fp
   22124:	a80b883a 	mov	r5,r21
   22128:	0025e300 	call	25e30 <__muldf3>
   2212c:	180b883a 	mov	r5,r3
   22130:	1009883a 	mov	r4,r2
   22134:	0026e440 	call	26e44 <__fixdfsi>
   22138:	1009883a 	mov	r4,r2
   2213c:	0026ec40 	call	26ec4 <__floatsidf>
   22140:	000d883a 	mov	r6,zero
   22144:	01d05c34 	movhi	r7,16752
   22148:	1009883a 	mov	r4,r2
   2214c:	180b883a 	mov	r5,r3
   22150:	102f883a 	mov	r23,r2
   22154:	182d883a 	mov	r22,r3
   22158:	0025e300 	call	25e30 <__muldf3>
   2215c:	100d883a 	mov	r6,r2
   22160:	180f883a 	mov	r7,r3
   22164:	e009883a 	mov	r4,fp
   22168:	a80b883a 	mov	r5,r21
   2216c:	00265480 	call	26548 <__subdf3>
   22170:	180b883a 	mov	r5,r3
   22174:	1009883a 	mov	r4,r2
   22178:	0026e440 	call	26e44 <__fixdfsi>
   2217c:	a1800017 	ldw	r6,0(r20)
   22180:	a1c00117 	ldw	r7,4(r20)
   22184:	88800015 	stw	r2,0(r17)
   22188:	b809883a 	mov	r4,r23
   2218c:	b00b883a 	mov	r5,r22
   22190:	0024a440 	call	24a44 <__adddf3>
   22194:	a53ffe04 	addi	r20,r20,-8
   22198:	1039883a 	mov	fp,r2
   2219c:	182b883a 	mov	r21,r3
   221a0:	8c400104 	addi	r17,r17,4
   221a4:	a4ffdc1e 	bne	r20,r19,22118 <__alt_data_end+0xf4022118>
   221a8:	d9809017 	ldw	r6,576(sp)
   221ac:	a80b883a 	mov	r5,r21
   221b0:	e009883a 	mov	r4,fp
   221b4:	00231d80 	call	231d8 <scalbn>
   221b8:	000d883a 	mov	r6,zero
   221bc:	01cff034 	movhi	r7,16320
   221c0:	1009883a 	mov	r4,r2
   221c4:	180b883a 	mov	r5,r3
   221c8:	1027883a 	mov	r19,r2
   221cc:	1823883a 	mov	r17,r3
   221d0:	0025e300 	call	25e30 <__muldf3>
   221d4:	1009883a 	mov	r4,r2
   221d8:	180b883a 	mov	r5,r3
   221dc:	0022f700 	call	22f70 <floor>
   221e0:	000d883a 	mov	r6,zero
   221e4:	01d00834 	movhi	r7,16416
   221e8:	1009883a 	mov	r4,r2
   221ec:	180b883a 	mov	r5,r3
   221f0:	0025e300 	call	25e30 <__muldf3>
   221f4:	100d883a 	mov	r6,r2
   221f8:	180f883a 	mov	r7,r3
   221fc:	9809883a 	mov	r4,r19
   22200:	880b883a 	mov	r5,r17
   22204:	00265480 	call	26548 <__subdf3>
   22208:	180b883a 	mov	r5,r3
   2220c:	1009883a 	mov	r4,r2
   22210:	1827883a 	mov	r19,r3
   22214:	1029883a 	mov	r20,r2
   22218:	0026e440 	call	26e44 <__fixdfsi>
   2221c:	1009883a 	mov	r4,r2
   22220:	1023883a 	mov	r17,r2
   22224:	0026ec40 	call	26ec4 <__floatsidf>
   22228:	a009883a 	mov	r4,r20
   2222c:	100d883a 	mov	r6,r2
   22230:	180f883a 	mov	r7,r3
   22234:	980b883a 	mov	r5,r19
   22238:	00265480 	call	26548 <__subdf3>
   2223c:	d9009017 	ldw	r4,576(sp)
   22240:	1013883a 	mov	r9,r2
   22244:	102b883a 	mov	r21,r2
   22248:	1811883a 	mov	r8,r3
   2224c:	0100b30e 	bge	zero,r4,2251c <__kernel_rem_pio2+0x61c>
   22250:	90bfffc4 	addi	r2,r18,-1
   22254:	1085883a 	add	r2,r2,r2
   22258:	1085883a 	add	r2,r2,r2
   2225c:	d885883a 	add	r2,sp,r2
   22260:	10807804 	addi	r2,r2,480
   22264:	d9809017 	ldw	r6,576(sp)
   22268:	11400017 	ldw	r5,0(r2)
   2226c:	01000604 	movi	r4,24
   22270:	2189c83a 	sub	r4,r4,r6
   22274:	290dd83a 	sra	r6,r5,r4
   22278:	d9c09017 	ldw	r7,576(sp)
   2227c:	04c005c4 	movi	r19,23
   22280:	3108983a 	sll	r4,r6,r4
   22284:	99e7c83a 	sub	r19,r19,r7
   22288:	89a3883a 	add	r17,r17,r6
   2228c:	2909c83a 	sub	r4,r5,r4
   22290:	24e7d83a 	sra	r19,r4,r19
   22294:	11000015 	stw	r4,0(r2)
   22298:	04c02a0e 	bge	zero,r19,22344 <__kernel_rem_pio2+0x444>
   2229c:	8c400044 	addi	r17,r17,1
   222a0:	0481570e 	bge	zero,r18,22800 <__kernel_rem_pio2+0x900>
   222a4:	02804034 	movhi	r10,256
   222a8:	52bfffc4 	addi	r10,r10,-1
   222ac:	d8807804 	addi	r2,sp,480
   222b0:	000b883a 	mov	r5,zero
   222b4:	0029883a 	mov	r20,zero
   222b8:	01c04034 	movhi	r7,256
   222bc:	00000706 	br	222dc <__kernel_rem_pio2+0x3dc>
   222c0:	390dc83a 	sub	r6,r7,r4
   222c4:	20000226 	beq	r4,zero,222d0 <__kernel_rem_pio2+0x3d0>
   222c8:	11800015 	stw	r6,0(r2)
   222cc:	05000044 	movi	r20,1
   222d0:	29400044 	addi	r5,r5,1
   222d4:	10800104 	addi	r2,r2,4
   222d8:	2c80080e 	bge	r5,r18,222fc <__kernel_rem_pio2+0x3fc>
   222dc:	11000017 	ldw	r4,0(r2)
   222e0:	a03ff726 	beq	r20,zero,222c0 <__alt_data_end+0xf40222c0>
   222e4:	5109c83a 	sub	r4,r10,r4
   222e8:	11000015 	stw	r4,0(r2)
   222ec:	29400044 	addi	r5,r5,1
   222f0:	05000044 	movi	r20,1
   222f4:	10800104 	addi	r2,r2,4
   222f8:	2cbff816 	blt	r5,r18,222dc <__alt_data_end+0xf40222dc>
   222fc:	d9009017 	ldw	r4,576(sp)
   22300:	01000e0e 	bge	zero,r4,2233c <__kernel_rem_pio2+0x43c>
   22304:	00800044 	movi	r2,1
   22308:	20808d26 	beq	r4,r2,22540 <__kernel_rem_pio2+0x640>
   2230c:	00800084 	movi	r2,2
   22310:	20800a1e 	bne	r4,r2,2233c <__kernel_rem_pio2+0x43c>
   22314:	90bfffc4 	addi	r2,r18,-1
   22318:	1085883a 	add	r2,r2,r2
   2231c:	1085883a 	add	r2,r2,r2
   22320:	d885883a 	add	r2,sp,r2
   22324:	10807804 	addi	r2,r2,480
   22328:	11400017 	ldw	r5,0(r2)
   2232c:	01001034 	movhi	r4,64
   22330:	213fffc4 	addi	r4,r4,-1
   22334:	2908703a 	and	r4,r5,r4
   22338:	11000015 	stw	r4,0(r2)
   2233c:	00800084 	movi	r2,2
   22340:	98805d26 	beq	r19,r2,224b8 <__kernel_rem_pio2+0x5b8>
   22344:	400b883a 	mov	r5,r8
   22348:	000d883a 	mov	r6,zero
   2234c:	000f883a 	mov	r7,zero
   22350:	a809883a 	mov	r4,r21
   22354:	da009b15 	stw	r8,620(sp)
   22358:	0025bd80 	call	25bd8 <__eqdf2>
   2235c:	da009b17 	ldw	r8,620(sp)
   22360:	10012b1e 	bne	r2,zero,22810 <__kernel_rem_pio2+0x910>
   22364:	da009417 	ldw	r8,592(sp)
   22368:	917fffc4 	addi	r5,r18,-1
   2236c:	2a000e16 	blt	r5,r8,223a8 <__kernel_rem_pio2+0x4a8>
   22370:	00900034 	movhi	r2,16384
   22374:	10bfffc4 	addi	r2,r2,-1
   22378:	9085883a 	add	r2,r18,r2
   2237c:	1085883a 	add	r2,r2,r2
   22380:	d9809717 	ldw	r6,604(sp)
   22384:	1085883a 	add	r2,r2,r2
   22388:	d9007804 	addi	r4,sp,480
   2238c:	0007883a 	mov	r3,zero
   22390:	2085883a 	add	r2,r4,r2
   22394:	11000017 	ldw	r4,0(r2)
   22398:	10bfff04 	addi	r2,r2,-4
   2239c:	1906b03a 	or	r3,r3,r4
   223a0:	11bffc1e 	bne	r2,r6,22394 <__alt_data_end+0xf4022394>
   223a4:	1800821e 	bne	r3,zero,225b0 <__kernel_rem_pio2+0x6b0>
   223a8:	da009817 	ldw	r8,608(sp)
   223ac:	40800017 	ldw	r2,0(r8)
   223b0:	1001151e 	bne	r2,zero,22808 <__kernel_rem_pio2+0x908>
   223b4:	d8809617 	ldw	r2,600(sp)
   223b8:	05000044 	movi	r20,1
   223bc:	10bfff04 	addi	r2,r2,-4
   223c0:	10c00117 	ldw	r3,4(r2)
   223c4:	a5000044 	addi	r20,r20,1
   223c8:	183ffc26 	beq	r3,zero,223bc <__alt_data_end+0xf40223bc>
   223cc:	9529883a 	add	r20,r18,r20
   223d0:	90800044 	addi	r2,r18,1
   223d4:	dd009115 	stw	r20,580(sp)
   223d8:	a0803216 	blt	r20,r2,224a4 <__kernel_rem_pio2+0x5a4>
   223dc:	da009317 	ldw	r8,588(sp)
   223e0:	d8c09117 	ldw	r3,580(sp)
   223e4:	44a3883a 	add	r17,r8,r18
   223e8:	da009217 	ldw	r8,584(sp)
   223ec:	882290fa 	slli	r17,r17,3
   223f0:	40a5883a 	add	r18,r8,r2
   223f4:	da009517 	ldw	r8,596(sp)
   223f8:	100490fa 	slli	r2,r2,3
   223fc:	94a5883a 	add	r18,r18,r18
   22400:	40eb883a 	add	r21,r8,r3
   22404:	da00a717 	ldw	r8,668(sp)
   22408:	ad6b883a 	add	r21,r21,r21
   2240c:	94a5883a 	add	r18,r18,r18
   22410:	ad6b883a 	add	r21,r21,r21
   22414:	d8c05004 	addi	r3,sp,320
   22418:	44a5883a 	add	r18,r8,r18
   2241c:	1c63883a 	add	r17,r3,r17
   22420:	d8a7883a 	add	r19,sp,r2
   22424:	456b883a 	add	r21,r8,r21
   22428:	91000017 	ldw	r4,0(r18)
   2242c:	0026ec40 	call	26ec4 <__floatsidf>
   22430:	da008d17 	ldw	r8,564(sp)
   22434:	88800015 	stw	r2,0(r17)
   22438:	88c00115 	stw	r3,4(r17)
   2243c:	40001b16 	blt	r8,zero,224ac <__kernel_rem_pio2+0x5ac>
   22440:	dd008e17 	ldw	r20,568(sp)
   22444:	882d883a 	mov	r22,r17
   22448:	002f883a 	mov	r23,zero
   2244c:	0039883a 	mov	fp,zero
   22450:	b1800017 	ldw	r6,0(r22)
   22454:	b1c00117 	ldw	r7,4(r22)
   22458:	a1000017 	ldw	r4,0(r20)
   2245c:	a1400117 	ldw	r5,4(r20)
   22460:	a5000204 	addi	r20,r20,8
   22464:	b5bffe04 	addi	r22,r22,-8
   22468:	0025e300 	call	25e30 <__muldf3>
   2246c:	b809883a 	mov	r4,r23
   22470:	e00b883a 	mov	r5,fp
   22474:	100d883a 	mov	r6,r2
   22478:	180f883a 	mov	r7,r3
   2247c:	0024a440 	call	24a44 <__adddf3>
   22480:	102f883a 	mov	r23,r2
   22484:	1839883a 	mov	fp,r3
   22488:	a43ff11e 	bne	r20,r16,22450 <__alt_data_end+0xf4022450>
   2248c:	9dc00015 	stw	r23,0(r19)
   22490:	9f000115 	stw	fp,4(r19)
   22494:	94800104 	addi	r18,r18,4
   22498:	8c400204 	addi	r17,r17,8
   2249c:	9cc00204 	addi	r19,r19,8
   224a0:	957fe11e 	bne	r18,r21,22428 <__alt_data_end+0xf4022428>
   224a4:	dc809117 	ldw	r18,580(sp)
   224a8:	003f0f06 	br	220e8 <__alt_data_end+0xf40220e8>
   224ac:	002f883a 	mov	r23,zero
   224b0:	0039883a 	mov	fp,zero
   224b4:	003ff506 	br	2248c <__alt_data_end+0xf402248c>
   224b8:	480d883a 	mov	r6,r9
   224bc:	180f883a 	mov	r7,r3
   224c0:	0009883a 	mov	r4,zero
   224c4:	014ffc34 	movhi	r5,16368
   224c8:	00265480 	call	26548 <__subdf3>
   224cc:	102b883a 	mov	r21,r2
   224d0:	1811883a 	mov	r8,r3
   224d4:	a03f9b26 	beq	r20,zero,22344 <__alt_data_end+0xf4022344>
   224d8:	d9809017 	ldw	r6,576(sp)
   224dc:	0009883a 	mov	r4,zero
   224e0:	014ffc34 	movhi	r5,16368
   224e4:	d8c09b15 	stw	r3,620(sp)
   224e8:	00231d80 	call	231d8 <scalbn>
   224ec:	da009b17 	ldw	r8,620(sp)
   224f0:	a809883a 	mov	r4,r21
   224f4:	100d883a 	mov	r6,r2
   224f8:	400b883a 	mov	r5,r8
   224fc:	180f883a 	mov	r7,r3
   22500:	00265480 	call	26548 <__subdf3>
   22504:	102b883a 	mov	r21,r2
   22508:	1811883a 	mov	r8,r3
   2250c:	003f8d06 	br	22344 <__alt_data_end+0xf4022344>
   22510:	0005883a 	mov	r2,zero
   22514:	0007883a 	mov	r3,zero
   22518:	003eac06 	br	21fcc <__alt_data_end+0xf4021fcc>
   2251c:	d8809017 	ldw	r2,576(sp)
   22520:	1000121e 	bne	r2,zero,2256c <__kernel_rem_pio2+0x66c>
   22524:	90bfffc4 	addi	r2,r18,-1
   22528:	1085883a 	add	r2,r2,r2
   2252c:	1085883a 	add	r2,r2,r2
   22530:	d885883a 	add	r2,sp,r2
   22534:	14c07817 	ldw	r19,480(r2)
   22538:	9827d5fa 	srai	r19,r19,23
   2253c:	003f5606 	br	22298 <__alt_data_end+0xf4022298>
   22540:	90bfffc4 	addi	r2,r18,-1
   22544:	1085883a 	add	r2,r2,r2
   22548:	1085883a 	add	r2,r2,r2
   2254c:	d885883a 	add	r2,sp,r2
   22550:	10807804 	addi	r2,r2,480
   22554:	11000017 	ldw	r4,0(r2)
   22558:	01402034 	movhi	r5,128
   2255c:	297fffc4 	addi	r5,r5,-1
   22560:	2148703a 	and	r4,r4,r5
   22564:	11000015 	stw	r4,0(r2)
   22568:	003f7406 	br	2233c <__alt_data_end+0xf402233c>
   2256c:	4809883a 	mov	r4,r9
   22570:	180b883a 	mov	r5,r3
   22574:	000d883a 	mov	r6,zero
   22578:	01cff834 	movhi	r7,16352
   2257c:	d8c09a15 	stw	r3,616(sp)
   22580:	d8c09b15 	stw	r3,620(sp)
   22584:	da409915 	stw	r9,612(sp)
   22588:	0025c600 	call	25c60 <__gedf2>
   2258c:	d8c09a17 	ldw	r3,616(sp)
   22590:	da009b17 	ldw	r8,620(sp)
   22594:	da409917 	ldw	r9,612(sp)
   22598:	1000920e 	bge	r2,zero,227e4 <__kernel_rem_pio2+0x8e4>
   2259c:	0027883a 	mov	r19,zero
   225a0:	003f6806 	br	22344 <__alt_data_end+0xf4022344>
   225a4:	002d883a 	mov	r22,zero
   225a8:	002b883a 	mov	r21,zero
   225ac:	003eb006 	br	22070 <__alt_data_end+0xf4022070>
   225b0:	2945883a 	add	r2,r5,r5
   225b4:	da009017 	ldw	r8,576(sp)
   225b8:	1085883a 	add	r2,r2,r2
   225bc:	d885883a 	add	r2,sp,r2
   225c0:	10807817 	ldw	r2,480(r2)
   225c4:	423ffa04 	addi	r8,r8,-24
   225c8:	dc409115 	stw	r17,580(sp)
   225cc:	dcc08d15 	stw	r19,564(sp)
   225d0:	da009015 	stw	r8,576(sp)
   225d4:	dd809417 	ldw	r22,592(sp)
   225d8:	2823883a 	mov	r17,r5
   225dc:	10000e1e 	bne	r2,zero,22618 <__kernel_rem_pio2+0x718>
   225e0:	00900034 	movhi	r2,16384
   225e4:	10bfffc4 	addi	r2,r2,-1
   225e8:	2885883a 	add	r2,r5,r2
   225ec:	1085883a 	add	r2,r2,r2
   225f0:	d8c07804 	addi	r3,sp,480
   225f4:	1085883a 	add	r2,r2,r2
   225f8:	1885883a 	add	r2,r3,r2
   225fc:	4007883a 	mov	r3,r8
   22600:	10bfff04 	addi	r2,r2,-4
   22604:	11000117 	ldw	r4,4(r2)
   22608:	8c7fffc4 	addi	r17,r17,-1
   2260c:	18fffa04 	addi	r3,r3,-24
   22610:	203ffb26 	beq	r4,zero,22600 <__alt_data_end+0xf4022600>
   22614:	d8c09015 	stw	r3,576(sp)
   22618:	d9809017 	ldw	r6,576(sp)
   2261c:	0009883a 	mov	r4,zero
   22620:	014ffc34 	movhi	r5,16368
   22624:	00231d80 	call	231d8 <scalbn>
   22628:	1029883a 	mov	r20,r2
   2262c:	182b883a 	mov	r21,r3
   22630:	88018416 	blt	r17,zero,22c44 <__kernel_rem_pio2+0xd44>
   22634:	881090fa 	slli	r8,r17,3
   22638:	d8c07804 	addi	r3,sp,480
   2263c:	da008e15 	stw	r8,568(sp)
   22640:	d8808e17 	ldw	r2,568(sp)
   22644:	8c51883a 	add	r8,r17,r17
   22648:	4211883a 	add	r8,r8,r8
   2264c:	d8a1883a 	add	r16,sp,r2
   22650:	1a25883a 	add	r18,r3,r8
   22654:	da3ffe04 	addi	r8,sp,-8
   22658:	da008c15 	stw	r8,560(sp)
   2265c:	8039883a 	mov	fp,r16
   22660:	91000017 	ldw	r4,0(r18)
   22664:	e73ffe04 	addi	fp,fp,-8
   22668:	94bfff04 	addi	r18,r18,-4
   2266c:	0026ec40 	call	26ec4 <__floatsidf>
   22670:	a00d883a 	mov	r6,r20
   22674:	a80f883a 	mov	r7,r21
   22678:	1009883a 	mov	r4,r2
   2267c:	180b883a 	mov	r5,r3
   22680:	0025e300 	call	25e30 <__muldf3>
   22684:	a009883a 	mov	r4,r20
   22688:	a80b883a 	mov	r5,r21
   2268c:	e0800215 	stw	r2,8(fp)
   22690:	e0c00315 	stw	r3,12(fp)
   22694:	000d883a 	mov	r6,zero
   22698:	01cf9c34 	movhi	r7,15984
   2269c:	0025e300 	call	25e30 <__muldf3>
   226a0:	da008c17 	ldw	r8,560(sp)
   226a4:	1029883a 	mov	r20,r2
   226a8:	182b883a 	mov	r21,r3
   226ac:	e23fec1e 	bne	fp,r8,22660 <__alt_data_end+0xf4022660>
   226b0:	0029883a 	mov	r20,zero
   226b4:	b0004f16 	blt	r22,zero,227f4 <__kernel_rem_pio2+0x8f4>
   226b8:	054000f4 	movhi	r21,3
   226bc:	014ffe74 	movhi	r5,16377
   226c0:	ad56c204 	addi	r21,r21,23304
   226c4:	8027883a 	mov	r19,r16
   226c8:	01100034 	movhi	r4,16384
   226cc:	29487ec4 	addi	r5,r5,8699
   226d0:	0039883a 	mov	fp,zero
   226d4:	002f883a 	mov	r23,zero
   226d8:	0025883a 	mov	r18,zero
   226dc:	00000506 	br	226f4 <__kernel_rem_pio2+0x7f4>
   226e0:	9cc00204 	addi	r19,r19,8
   226e4:	a4800f16 	blt	r20,r18,22724 <__kernel_rem_pio2+0x824>
   226e8:	a9000017 	ldw	r4,0(r21)
   226ec:	a9400117 	ldw	r5,4(r21)
   226f0:	ad400204 	addi	r21,r21,8
   226f4:	99800017 	ldw	r6,0(r19)
   226f8:	99c00117 	ldw	r7,4(r19)
   226fc:	94800044 	addi	r18,r18,1
   22700:	0025e300 	call	25e30 <__muldf3>
   22704:	e009883a 	mov	r4,fp
   22708:	b80b883a 	mov	r5,r23
   2270c:	100d883a 	mov	r6,r2
   22710:	180f883a 	mov	r7,r3
   22714:	0024a440 	call	24a44 <__adddf3>
   22718:	1039883a 	mov	fp,r2
   2271c:	182f883a 	mov	r23,r3
   22720:	b4bfef0e 	bge	r22,r18,226e0 <__alt_data_end+0xf40226e0>
   22724:	a00490fa 	slli	r2,r20,3
   22728:	da008c17 	ldw	r8,560(sp)
   2272c:	843ffe04 	addi	r16,r16,-8
   22730:	d885883a 	add	r2,sp,r2
   22734:	10802804 	addi	r2,r2,160
   22738:	17000015 	stw	fp,0(r2)
   2273c:	15c00115 	stw	r23,4(r2)
   22740:	a5000044 	addi	r20,r20,1
   22744:	823fdb1e 	bne	r16,r8,226b4 <__alt_data_end+0xf40226b4>
   22748:	da00a617 	ldw	r8,664(sp)
   2274c:	00800084 	movi	r2,2
   22750:	12006616 	blt	r2,r8,228ec <__kernel_rem_pio2+0x9ec>
   22754:	0200de16 	blt	zero,r8,22ad0 <__kernel_rem_pio2+0xbd0>
   22758:	4000141e 	bne	r8,zero,227ac <__kernel_rem_pio2+0x8ac>
   2275c:	da008e17 	ldw	r8,568(sp)
   22760:	d8802804 	addi	r2,sp,160
   22764:	0007883a 	mov	r3,zero
   22768:	1225883a 	add	r18,r2,r8
   2276c:	043fffc4 	movi	r16,-1
   22770:	0005883a 	mov	r2,zero
   22774:	91800017 	ldw	r6,0(r18)
   22778:	91c00117 	ldw	r7,4(r18)
   2277c:	1009883a 	mov	r4,r2
   22780:	180b883a 	mov	r5,r3
   22784:	8c7fffc4 	addi	r17,r17,-1
   22788:	0024a440 	call	24a44 <__adddf3>
   2278c:	94bffe04 	addi	r18,r18,-8
   22790:	8c3ff81e 	bne	r17,r16,22774 <__alt_data_end+0xf4022774>
   22794:	da008d17 	ldw	r8,564(sp)
   22798:	40000126 	beq	r8,zero,227a0 <__kernel_rem_pio2+0x8a0>
   2279c:	18e0003c 	xorhi	r3,r3,32768
   227a0:	da008f17 	ldw	r8,572(sp)
   227a4:	40800015 	stw	r2,0(r8)
   227a8:	40c00115 	stw	r3,4(r8)
   227ac:	da009117 	ldw	r8,580(sp)
   227b0:	408001cc 	andi	r2,r8,7
   227b4:	dfc0a517 	ldw	ra,660(sp)
   227b8:	df00a417 	ldw	fp,656(sp)
   227bc:	ddc0a317 	ldw	r23,652(sp)
   227c0:	dd80a217 	ldw	r22,648(sp)
   227c4:	dd40a117 	ldw	r21,644(sp)
   227c8:	dd00a017 	ldw	r20,640(sp)
   227cc:	dcc09f17 	ldw	r19,636(sp)
   227d0:	dc809e17 	ldw	r18,632(sp)
   227d4:	dc409d17 	ldw	r17,628(sp)
   227d8:	dc009c17 	ldw	r16,624(sp)
   227dc:	dec0a604 	addi	sp,sp,664
   227e0:	f800283a 	ret
   227e4:	8c400044 	addi	r17,r17,1
   227e8:	04810d0e 	bge	zero,r18,22c20 <__kernel_rem_pio2+0xd20>
   227ec:	04c00084 	movi	r19,2
   227f0:	003eac06 	br	222a4 <__alt_data_end+0xf40222a4>
   227f4:	0039883a 	mov	fp,zero
   227f8:	002f883a 	mov	r23,zero
   227fc:	003fc906 	br	22724 <__alt_data_end+0xf4022724>
   22800:	0029883a 	mov	r20,zero
   22804:	003ebd06 	br	222fc <__alt_data_end+0xf40222fc>
   22808:	05000044 	movi	r20,1
   2280c:	003eef06 	br	223cc <__alt_data_end+0xf40223cc>
   22810:	4029883a 	mov	r20,r8
   22814:	da009017 	ldw	r8,576(sp)
   22818:	a809883a 	mov	r4,r21
   2281c:	a00b883a 	mov	r5,r20
   22820:	020dc83a 	sub	r6,zero,r8
   22824:	dc409115 	stw	r17,580(sp)
   22828:	dd809417 	ldw	r22,592(sp)
   2282c:	dcc08d15 	stw	r19,564(sp)
   22830:	00231d80 	call	231d8 <scalbn>
   22834:	000d883a 	mov	r6,zero
   22838:	01d05c34 	movhi	r7,16752
   2283c:	1009883a 	mov	r4,r2
   22840:	180b883a 	mov	r5,r3
   22844:	102b883a 	mov	r21,r2
   22848:	1823883a 	mov	r17,r3
   2284c:	0025c600 	call	25c60 <__gedf2>
   22850:	1000e916 	blt	r2,zero,22bf8 <__kernel_rem_pio2+0xcf8>
   22854:	000d883a 	mov	r6,zero
   22858:	01cf9c34 	movhi	r7,15984
   2285c:	880b883a 	mov	r5,r17
   22860:	a809883a 	mov	r4,r21
   22864:	0025e300 	call	25e30 <__muldf3>
   22868:	180b883a 	mov	r5,r3
   2286c:	1009883a 	mov	r4,r2
   22870:	0026e440 	call	26e44 <__fixdfsi>
   22874:	1029883a 	mov	r20,r2
   22878:	9485883a 	add	r2,r18,r18
   2287c:	1085883a 	add	r2,r2,r2
   22880:	a009883a 	mov	r4,r20
   22884:	d8a1883a 	add	r16,sp,r2
   22888:	0026ec40 	call	26ec4 <__floatsidf>
   2288c:	000d883a 	mov	r6,zero
   22890:	01d05c34 	movhi	r7,16752
   22894:	1009883a 	mov	r4,r2
   22898:	180b883a 	mov	r5,r3
   2289c:	0025e300 	call	25e30 <__muldf3>
   228a0:	880b883a 	mov	r5,r17
   228a4:	100d883a 	mov	r6,r2
   228a8:	180f883a 	mov	r7,r3
   228ac:	a809883a 	mov	r4,r21
   228b0:	00265480 	call	26548 <__subdf3>
   228b4:	180b883a 	mov	r5,r3
   228b8:	1009883a 	mov	r4,r2
   228bc:	0026e440 	call	26e44 <__fixdfsi>
   228c0:	da009017 	ldw	r8,576(sp)
   228c4:	94400044 	addi	r17,r18,1
   228c8:	8c47883a 	add	r3,r17,r17
   228cc:	84007804 	addi	r16,r16,480
   228d0:	18c7883a 	add	r3,r3,r3
   228d4:	80800015 	stw	r2,0(r16)
   228d8:	d8c7883a 	add	r3,sp,r3
   228dc:	42000604 	addi	r8,r8,24
   228e0:	da009015 	stw	r8,576(sp)
   228e4:	1d007815 	stw	r20,480(r3)
   228e8:	003f4b06 	br	22618 <__alt_data_end+0xf4022618>
   228ec:	da00a617 	ldw	r8,664(sp)
   228f0:	008000c4 	movi	r2,3
   228f4:	40bfad1e 	bne	r8,r2,227ac <__alt_data_end+0xf40227ac>
   228f8:	0440bc0e 	bge	zero,r17,22bec <__kernel_rem_pio2+0xcec>
   228fc:	da008e17 	ldw	r8,568(sp)
   22900:	882090fa 	slli	r16,r17,3
   22904:	dd402804 	addi	r21,sp,160
   22908:	da05883a 	add	r2,sp,r8
   2290c:	10802804 	addi	r2,r2,160
   22910:	15c00017 	ldw	r23,0(r2)
   22914:	15800117 	ldw	r22,4(r2)
   22918:	8029883a 	mov	r20,r16
   2291c:	843ffe04 	addi	r16,r16,-8
   22920:	ac21883a 	add	r16,r21,r16
   22924:	ad29883a 	add	r20,r21,r20
   22928:	dac02604 	addi	r11,sp,152
   2292c:	8811883a 	mov	r8,r17
   22930:	84400017 	ldw	r17,0(r16)
   22934:	87000117 	ldw	fp,4(r16)
   22938:	b80d883a 	mov	r6,r23
   2293c:	b00f883a 	mov	r7,r22
   22940:	8809883a 	mov	r4,r17
   22944:	e00b883a 	mov	r5,fp
   22948:	da009b15 	stw	r8,620(sp)
   2294c:	dac09915 	stw	r11,612(sp)
   22950:	0024a440 	call	24a44 <__adddf3>
   22954:	100d883a 	mov	r6,r2
   22958:	180f883a 	mov	r7,r3
   2295c:	8809883a 	mov	r4,r17
   22960:	e00b883a 	mov	r5,fp
   22964:	1027883a 	mov	r19,r2
   22968:	1825883a 	mov	r18,r3
   2296c:	00265480 	call	26548 <__subdf3>
   22970:	b80d883a 	mov	r6,r23
   22974:	b00f883a 	mov	r7,r22
   22978:	1009883a 	mov	r4,r2
   2297c:	180b883a 	mov	r5,r3
   22980:	0024a440 	call	24a44 <__adddf3>
   22984:	dac09917 	ldw	r11,612(sp)
   22988:	a0800015 	stw	r2,0(r20)
   2298c:	a0c00115 	stw	r3,4(r20)
   22990:	84c00015 	stw	r19,0(r16)
   22994:	84800115 	stw	r18,4(r16)
   22998:	843ffe04 	addi	r16,r16,-8
   2299c:	a53ffe04 	addi	r20,r20,-8
   229a0:	982f883a 	mov	r23,r19
   229a4:	902d883a 	mov	r22,r18
   229a8:	da009b17 	ldw	r8,620(sp)
   229ac:	5c3fe01e 	bne	r11,r16,22930 <__alt_data_end+0xf4022930>
   229b0:	00800044 	movi	r2,1
   229b4:	12008d0e 	bge	r2,r8,22bec <__kernel_rem_pio2+0xcec>
   229b8:	402090fa 	slli	r16,r8,3
   229bc:	da008e17 	ldw	r8,568(sp)
   229c0:	8023883a 	mov	r17,r16
   229c4:	da05883a 	add	r2,sp,r8
   229c8:	10802804 	addi	r2,r2,160
   229cc:	15800017 	ldw	r22,0(r2)
   229d0:	15000117 	ldw	r20,4(r2)
   229d4:	ac63883a 	add	r17,r21,r17
   229d8:	843ffe04 	addi	r16,r16,-8
   229dc:	ac21883a 	add	r16,r21,r16
   229e0:	8825883a 	mov	r18,r17
   229e4:	8811883a 	mov	r8,r17
   229e8:	84400017 	ldw	r17,0(r16)
   229ec:	87000117 	ldw	fp,4(r16)
   229f0:	b009883a 	mov	r4,r22
   229f4:	a00b883a 	mov	r5,r20
   229f8:	880d883a 	mov	r6,r17
   229fc:	e00f883a 	mov	r7,fp
   22a00:	da009b15 	stw	r8,620(sp)
   22a04:	0024a440 	call	24a44 <__adddf3>
   22a08:	100d883a 	mov	r6,r2
   22a0c:	180f883a 	mov	r7,r3
   22a10:	8809883a 	mov	r4,r17
   22a14:	e00b883a 	mov	r5,fp
   22a18:	102f883a 	mov	r23,r2
   22a1c:	1827883a 	mov	r19,r3
   22a20:	00265480 	call	26548 <__subdf3>
   22a24:	b00d883a 	mov	r6,r22
   22a28:	a00f883a 	mov	r7,r20
   22a2c:	1009883a 	mov	r4,r2
   22a30:	180b883a 	mov	r5,r3
   22a34:	0024a440 	call	24a44 <__adddf3>
   22a38:	90800015 	stw	r2,0(r18)
   22a3c:	90c00115 	stw	r3,4(r18)
   22a40:	85c00015 	stw	r23,0(r16)
   22a44:	84c00115 	stw	r19,4(r16)
   22a48:	843ffe04 	addi	r16,r16,-8
   22a4c:	94bffe04 	addi	r18,r18,-8
   22a50:	b82d883a 	mov	r22,r23
   22a54:	9829883a 	mov	r20,r19
   22a58:	da009b17 	ldw	r8,620(sp)
   22a5c:	ac3fe21e 	bne	r21,r16,229e8 <__alt_data_end+0xf40229e8>
   22a60:	4023883a 	mov	r17,r8
   22a64:	dc002a04 	addi	r16,sp,168
   22a68:	0005883a 	mov	r2,zero
   22a6c:	0007883a 	mov	r3,zero
   22a70:	89800017 	ldw	r6,0(r17)
   22a74:	89c00117 	ldw	r7,4(r17)
   22a78:	1009883a 	mov	r4,r2
   22a7c:	8c7ffe04 	addi	r17,r17,-8
   22a80:	180b883a 	mov	r5,r3
   22a84:	0024a440 	call	24a44 <__adddf3>
   22a88:	847ff91e 	bne	r16,r17,22a70 <__alt_data_end+0xf4022a70>
   22a8c:	da008d17 	ldw	r8,564(sp)
   22a90:	40004726 	beq	r8,zero,22bb0 <__kernel_rem_pio2+0xcb0>
   22a94:	d9002b17 	ldw	r4,172(sp)
   22a98:	d9402917 	ldw	r5,164(sp)
   22a9c:	d9802a17 	ldw	r6,168(sp)
   22aa0:	da008f17 	ldw	r8,572(sp)
   22aa4:	d9c02817 	ldw	r7,160(sp)
   22aa8:	2960003c 	xorhi	r5,r5,32768
   22aac:	2120003c 	xorhi	r4,r4,32768
   22ab0:	18e0003c 	xorhi	r3,r3,32768
   22ab4:	41c00015 	stw	r7,0(r8)
   22ab8:	41400115 	stw	r5,4(r8)
   22abc:	41800215 	stw	r6,8(r8)
   22ac0:	41000315 	stw	r4,12(r8)
   22ac4:	40800415 	stw	r2,16(r8)
   22ac8:	40c00515 	stw	r3,20(r8)
   22acc:	003f3706 	br	227ac <__alt_data_end+0xf40227ac>
   22ad0:	da008e17 	ldw	r8,568(sp)
   22ad4:	d8802804 	addi	r2,sp,160
   22ad8:	dc002604 	addi	r16,sp,152
   22adc:	1225883a 	add	r18,r2,r8
   22ae0:	0007883a 	mov	r3,zero
   22ae4:	0005883a 	mov	r2,zero
   22ae8:	91800017 	ldw	r6,0(r18)
   22aec:	91c00117 	ldw	r7,4(r18)
   22af0:	1009883a 	mov	r4,r2
   22af4:	94bffe04 	addi	r18,r18,-8
   22af8:	180b883a 	mov	r5,r3
   22afc:	0024a440 	call	24a44 <__adddf3>
   22b00:	943ff91e 	bne	r18,r16,22ae8 <__alt_data_end+0xf4022ae8>
   22b04:	da008d17 	ldw	r8,564(sp)
   22b08:	d9002817 	ldw	r4,160(sp)
   22b0c:	d9402917 	ldw	r5,164(sp)
   22b10:	40001a26 	beq	r8,zero,22b7c <__kernel_rem_pio2+0xc7c>
   22b14:	da008f17 	ldw	r8,572(sp)
   22b18:	19a0003c 	xorhi	r6,r3,32768
   22b1c:	180f883a 	mov	r7,r3
   22b20:	41800115 	stw	r6,4(r8)
   22b24:	40800015 	stw	r2,0(r8)
   22b28:	100d883a 	mov	r6,r2
   22b2c:	00265480 	call	26548 <__subdf3>
   22b30:	04400c0e 	bge	zero,r17,22b64 <__kernel_rem_pio2+0xc64>
   22b34:	dc002a04 	addi	r16,sp,168
   22b38:	04800044 	movi	r18,1
   22b3c:	81800017 	ldw	r6,0(r16)
   22b40:	81c00117 	ldw	r7,4(r16)
   22b44:	1009883a 	mov	r4,r2
   22b48:	180b883a 	mov	r5,r3
   22b4c:	94800044 	addi	r18,r18,1
   22b50:	0024a440 	call	24a44 <__adddf3>
   22b54:	84000204 	addi	r16,r16,8
   22b58:	8cbff80e 	bge	r17,r18,22b3c <__alt_data_end+0xf4022b3c>
   22b5c:	da008d17 	ldw	r8,564(sp)
   22b60:	40004226 	beq	r8,zero,22c6c <__kernel_rem_pio2+0xd6c>
   22b64:	da008f17 	ldw	r8,572(sp)
   22b68:	1009883a 	mov	r4,r2
   22b6c:	18a0003c 	xorhi	r2,r3,32768
   22b70:	41000215 	stw	r4,8(r8)
   22b74:	40800315 	stw	r2,12(r8)
   22b78:	003f0c06 	br	227ac <__alt_data_end+0xf40227ac>
   22b7c:	da008f17 	ldw	r8,572(sp)
   22b80:	100d883a 	mov	r6,r2
   22b84:	180f883a 	mov	r7,r3
   22b88:	40800015 	stw	r2,0(r8)
   22b8c:	40c00115 	stw	r3,4(r8)
   22b90:	00265480 	call	26548 <__subdf3>
   22b94:	047fe716 	blt	zero,r17,22b34 <__alt_data_end+0xf4022b34>
   22b98:	da008f17 	ldw	r8,572(sp)
   22b9c:	1009883a 	mov	r4,r2
   22ba0:	1805883a 	mov	r2,r3
   22ba4:	41000215 	stw	r4,8(r8)
   22ba8:	40800315 	stw	r2,12(r8)
   22bac:	003eff06 	br	227ac <__alt_data_end+0xf40227ac>
   22bb0:	da008f17 	ldw	r8,572(sp)
   22bb4:	d9802817 	ldw	r6,160(sp)
   22bb8:	d9402a17 	ldw	r5,168(sp)
   22bbc:	d9002b17 	ldw	r4,172(sp)
   22bc0:	41800015 	stw	r6,0(r8)
   22bc4:	d9802917 	ldw	r6,164(sp)
   22bc8:	41400215 	stw	r5,8(r8)
   22bcc:	41000315 	stw	r4,12(r8)
   22bd0:	41800115 	stw	r6,4(r8)
   22bd4:	40800415 	stw	r2,16(r8)
   22bd8:	40c00515 	stw	r3,20(r8)
   22bdc:	003ef306 	br	227ac <__alt_data_end+0xf40227ac>
   22be0:	da00a617 	ldw	r8,664(sp)
   22be4:	008000c4 	movi	r2,3
   22be8:	40bef01e 	bne	r8,r2,227ac <__alt_data_end+0xf40227ac>
   22bec:	0005883a 	mov	r2,zero
   22bf0:	0007883a 	mov	r3,zero
   22bf4:	003fa506 	br	22a8c <__alt_data_end+0xf4022a8c>
   22bf8:	9485883a 	add	r2,r18,r18
   22bfc:	1085883a 	add	r2,r2,r2
   22c00:	d8a1883a 	add	r16,sp,r2
   22c04:	880b883a 	mov	r5,r17
   22c08:	a809883a 	mov	r4,r21
   22c0c:	84007804 	addi	r16,r16,480
   22c10:	0026e440 	call	26e44 <__fixdfsi>
   22c14:	80800015 	stw	r2,0(r16)
   22c18:	9023883a 	mov	r17,r18
   22c1c:	003e7e06 	br	22618 <__alt_data_end+0xf4022618>
   22c20:	a80d883a 	mov	r6,r21
   22c24:	400f883a 	mov	r7,r8
   22c28:	0009883a 	mov	r4,zero
   22c2c:	014ffc34 	movhi	r5,16368
   22c30:	00265480 	call	26548 <__subdf3>
   22c34:	102b883a 	mov	r21,r2
   22c38:	1811883a 	mov	r8,r3
   22c3c:	04c00084 	movi	r19,2
   22c40:	003dc006 	br	22344 <__alt_data_end+0xf4022344>
   22c44:	da00a617 	ldw	r8,664(sp)
   22c48:	00800084 	movi	r2,2
   22c4c:	123fe416 	blt	r2,r8,22be0 <__alt_data_end+0xf4022be0>
   22c50:	02000c16 	blt	zero,r8,22c84 <__kernel_rem_pio2+0xd84>
   22c54:	403ed51e 	bne	r8,zero,227ac <__alt_data_end+0xf40227ac>
   22c58:	0005883a 	mov	r2,zero
   22c5c:	0007883a 	mov	r3,zero
   22c60:	003ecc06 	br	22794 <__alt_data_end+0xf4022794>
   22c64:	d8009215 	stw	zero,584(sp)
   22c68:	003cc306 	br	21f78 <__alt_data_end+0xf4021f78>
   22c6c:	da008f17 	ldw	r8,572(sp)
   22c70:	1009883a 	mov	r4,r2
   22c74:	1805883a 	mov	r2,r3
   22c78:	41000215 	stw	r4,8(r8)
   22c7c:	40800315 	stw	r2,12(r8)
   22c80:	003eca06 	br	227ac <__alt_data_end+0xf40227ac>
   22c84:	0005883a 	mov	r2,zero
   22c88:	0007883a 	mov	r3,zero
   22c8c:	003f9d06 	br	22b04 <__alt_data_end+0xf4022b04>

00022c90 <__kernel_sin>:
   22c90:	00a00034 	movhi	r2,32768
   22c94:	defff404 	addi	sp,sp,-48
   22c98:	10bfffc4 	addi	r2,r2,-1
   22c9c:	00cf9034 	movhi	r3,15936
   22ca0:	ddc00915 	stw	r23,36(sp)
   22ca4:	dd800815 	stw	r22,32(sp)
   22ca8:	dc400315 	stw	r17,12(sp)
   22cac:	dc000215 	stw	r16,8(sp)
   22cb0:	dfc00b15 	stw	ra,44(sp)
   22cb4:	df000a15 	stw	fp,40(sp)
   22cb8:	dd400715 	stw	r21,28(sp)
   22cbc:	dd000615 	stw	r20,24(sp)
   22cc0:	dcc00515 	stw	r19,20(sp)
   22cc4:	dc800415 	stw	r18,16(sp)
   22cc8:	2884703a 	and	r2,r5,r2
   22ccc:	18ffffc4 	addi	r3,r3,-1
   22cd0:	2821883a 	mov	r16,r5
   22cd4:	2023883a 	mov	r17,r4
   22cd8:	302f883a 	mov	r23,r6
   22cdc:	382d883a 	mov	r22,r7
   22ce0:	18800216 	blt	r3,r2,22cec <__kernel_sin+0x5c>
   22ce4:	0026e440 	call	26e44 <__fixdfsi>
   22ce8:	10009926 	beq	r2,zero,22f50 <__kernel_sin+0x2c0>
   22cec:	880d883a 	mov	r6,r17
   22cf0:	800f883a 	mov	r7,r16
   22cf4:	8809883a 	mov	r4,r17
   22cf8:	800b883a 	mov	r5,r16
   22cfc:	0025e300 	call	25e30 <__muldf3>
   22d00:	100d883a 	mov	r6,r2
   22d04:	180f883a 	mov	r7,r3
   22d08:	8809883a 	mov	r4,r17
   22d0c:	800b883a 	mov	r5,r16
   22d10:	1027883a 	mov	r19,r2
   22d14:	1825883a 	mov	r18,r3
   22d18:	0025e300 	call	25e30 <__muldf3>
   22d1c:	0196b434 	movhi	r6,23248
   22d20:	01cf79b4 	movhi	r7,15846
   22d24:	31b55f04 	addi	r6,r6,-10884
   22d28:	39f64e84 	addi	r7,r7,-9926
   22d2c:	9809883a 	mov	r4,r19
   22d30:	900b883a 	mov	r5,r18
   22d34:	102b883a 	mov	r21,r2
   22d38:	1829883a 	mov	r20,r3
   22d3c:	0025e300 	call	25e30 <__muldf3>
   22d40:	01a28b34 	movhi	r6,35372
   22d44:	01cf96f4 	movhi	r7,15963
   22d48:	31a73ac4 	addi	r6,r6,-25365
   22d4c:	39f97984 	addi	r7,r7,-6682
   22d50:	1009883a 	mov	r4,r2
   22d54:	180b883a 	mov	r5,r3
   22d58:	00265480 	call	26548 <__subdf3>
   22d5c:	980d883a 	mov	r6,r19
   22d60:	900f883a 	mov	r7,r18
   22d64:	1009883a 	mov	r4,r2
   22d68:	180b883a 	mov	r5,r3
   22d6c:	0025e300 	call	25e30 <__muldf3>
   22d70:	0195ecb4 	movhi	r6,22450
   22d74:	01cfb1f4 	movhi	r7,16071
   22d78:	31bf9f44 	addi	r6,r6,-387
   22d7c:	39c778c4 	addi	r7,r7,7651
   22d80:	1009883a 	mov	r4,r2
   22d84:	180b883a 	mov	r5,r3
   22d88:	0024a440 	call	24a44 <__adddf3>
   22d8c:	980d883a 	mov	r6,r19
   22d90:	900f883a 	mov	r7,r18
   22d94:	1009883a 	mov	r4,r2
   22d98:	180b883a 	mov	r5,r3
   22d9c:	0025e300 	call	25e30 <__muldf3>
   22da0:	01867074 	movhi	r6,6593
   22da4:	01cfcab4 	movhi	r7,16170
   22da8:	31987544 	addi	r6,r6,25045
   22dac:	39c06804 	addi	r7,r7,416
   22db0:	1009883a 	mov	r4,r2
   22db4:	180b883a 	mov	r5,r3
   22db8:	00265480 	call	26548 <__subdf3>
   22dbc:	980d883a 	mov	r6,r19
   22dc0:	900f883a 	mov	r7,r18
   22dc4:	1009883a 	mov	r4,r2
   22dc8:	180b883a 	mov	r5,r3
   22dcc:	0025e300 	call	25e30 <__muldf3>
   22dd0:	01844474 	movhi	r6,4369
   22dd4:	01cfe074 	movhi	r7,16257
   22dd8:	31be2984 	addi	r6,r6,-1882
   22ddc:	39c44444 	addi	r7,r7,4369
   22de0:	1009883a 	mov	r4,r2
   22de4:	180b883a 	mov	r5,r3
   22de8:	0024a440 	call	24a44 <__adddf3>
   22dec:	1011883a 	mov	r8,r2
   22df0:	d8800c17 	ldw	r2,48(sp)
   22df4:	1839883a 	mov	fp,r3
   22df8:	10003e26 	beq	r2,zero,22ef4 <__kernel_sin+0x264>
   22dfc:	000d883a 	mov	r6,zero
   22e00:	01cff834 	movhi	r7,16352
   22e04:	b809883a 	mov	r4,r23
   22e08:	b00b883a 	mov	r5,r22
   22e0c:	da000015 	stw	r8,0(sp)
   22e10:	0025e300 	call	25e30 <__muldf3>
   22e14:	da000017 	ldw	r8,0(sp)
   22e18:	e00f883a 	mov	r7,fp
   22e1c:	a809883a 	mov	r4,r21
   22e20:	400d883a 	mov	r6,r8
   22e24:	a00b883a 	mov	r5,r20
   22e28:	d8c00115 	stw	r3,4(sp)
   22e2c:	d8800015 	stw	r2,0(sp)
   22e30:	0025e300 	call	25e30 <__muldf3>
   22e34:	da800017 	ldw	r10,0(sp)
   22e38:	da400117 	ldw	r9,4(sp)
   22e3c:	100d883a 	mov	r6,r2
   22e40:	5009883a 	mov	r4,r10
   22e44:	480b883a 	mov	r5,r9
   22e48:	180f883a 	mov	r7,r3
   22e4c:	00265480 	call	26548 <__subdf3>
   22e50:	980d883a 	mov	r6,r19
   22e54:	900f883a 	mov	r7,r18
   22e58:	1009883a 	mov	r4,r2
   22e5c:	180b883a 	mov	r5,r3
   22e60:	0025e300 	call	25e30 <__muldf3>
   22e64:	b80d883a 	mov	r6,r23
   22e68:	b00f883a 	mov	r7,r22
   22e6c:	1009883a 	mov	r4,r2
   22e70:	180b883a 	mov	r5,r3
   22e74:	00265480 	call	26548 <__subdf3>
   22e78:	01955574 	movhi	r6,21845
   22e7c:	01cff174 	movhi	r7,16325
   22e80:	31955244 	addi	r6,r6,21833
   22e84:	39d55544 	addi	r7,r7,21845
   22e88:	a809883a 	mov	r4,r21
   22e8c:	a00b883a 	mov	r5,r20
   22e90:	1027883a 	mov	r19,r2
   22e94:	1825883a 	mov	r18,r3
   22e98:	0025e300 	call	25e30 <__muldf3>
   22e9c:	100d883a 	mov	r6,r2
   22ea0:	180f883a 	mov	r7,r3
   22ea4:	9809883a 	mov	r4,r19
   22ea8:	900b883a 	mov	r5,r18
   22eac:	0024a440 	call	24a44 <__adddf3>
   22eb0:	100d883a 	mov	r6,r2
   22eb4:	180f883a 	mov	r7,r3
   22eb8:	8809883a 	mov	r4,r17
   22ebc:	800b883a 	mov	r5,r16
   22ec0:	00265480 	call	26548 <__subdf3>
   22ec4:	dfc00b17 	ldw	ra,44(sp)
   22ec8:	df000a17 	ldw	fp,40(sp)
   22ecc:	ddc00917 	ldw	r23,36(sp)
   22ed0:	dd800817 	ldw	r22,32(sp)
   22ed4:	dd400717 	ldw	r21,28(sp)
   22ed8:	dd000617 	ldw	r20,24(sp)
   22edc:	dcc00517 	ldw	r19,20(sp)
   22ee0:	dc800417 	ldw	r18,16(sp)
   22ee4:	dc400317 	ldw	r17,12(sp)
   22ee8:	dc000217 	ldw	r16,8(sp)
   22eec:	dec00c04 	addi	sp,sp,48
   22ef0:	f800283a 	ret
   22ef4:	400d883a 	mov	r6,r8
   22ef8:	9809883a 	mov	r4,r19
   22efc:	900b883a 	mov	r5,r18
   22f00:	180f883a 	mov	r7,r3
   22f04:	0025e300 	call	25e30 <__muldf3>
   22f08:	01955574 	movhi	r6,21845
   22f0c:	01cff174 	movhi	r7,16325
   22f10:	31955244 	addi	r6,r6,21833
   22f14:	39d55544 	addi	r7,r7,21845
   22f18:	1009883a 	mov	r4,r2
   22f1c:	180b883a 	mov	r5,r3
   22f20:	00265480 	call	26548 <__subdf3>
   22f24:	a80d883a 	mov	r6,r21
   22f28:	a00f883a 	mov	r7,r20
   22f2c:	1009883a 	mov	r4,r2
   22f30:	180b883a 	mov	r5,r3
   22f34:	0025e300 	call	25e30 <__muldf3>
   22f38:	880d883a 	mov	r6,r17
   22f3c:	800f883a 	mov	r7,r16
   22f40:	1009883a 	mov	r4,r2
   22f44:	180b883a 	mov	r5,r3
   22f48:	0024a440 	call	24a44 <__adddf3>
   22f4c:	003fdd06 	br	22ec4 <__alt_data_end+0xf4022ec4>
   22f50:	8805883a 	mov	r2,r17
   22f54:	8007883a 	mov	r3,r16
   22f58:	003fda06 	br	22ec4 <__alt_data_end+0xf4022ec4>

00022f5c <fabs>:
   22f5c:	00e00034 	movhi	r3,32768
   22f60:	18ffffc4 	addi	r3,r3,-1
   22f64:	2005883a 	mov	r2,r4
   22f68:	28c6703a 	and	r3,r5,r3
   22f6c:	f800283a 	ret

00022f70 <floor>:
   22f70:	2811d53a 	srai	r8,r5,20
   22f74:	defffa04 	addi	sp,sp,-24
   22f78:	dcc00315 	stw	r19,12(sp)
   22f7c:	4201ffcc 	andi	r8,r8,2047
   22f80:	dc800215 	stw	r18,8(sp)
   22f84:	dc400115 	stw	r17,4(sp)
   22f88:	dc000015 	stw	r16,0(sp)
   22f8c:	dfc00515 	stw	ra,20(sp)
   22f90:	dd000415 	stw	r20,16(sp)
   22f94:	44bf0044 	addi	r18,r8,-1023
   22f98:	018004c4 	movi	r6,19
   22f9c:	2821883a 	mov	r16,r5
   22fa0:	2005883a 	mov	r2,r4
   22fa4:	280f883a 	mov	r7,r5
   22fa8:	2827883a 	mov	r19,r5
   22fac:	2023883a 	mov	r17,r4
   22fb0:	34801916 	blt	r6,r18,23018 <floor+0xa8>
   22fb4:	90003c16 	blt	r18,zero,230a8 <floor+0x138>
   22fb8:	05000434 	movhi	r20,16
   22fbc:	a53fffc4 	addi	r20,r20,-1
   22fc0:	a4a9d83a 	sra	r20,r20,r18
   22fc4:	2d0c703a 	and	r6,r5,r20
   22fc8:	310cb03a 	or	r6,r6,r4
   22fcc:	30001626 	beq	r6,zero,23028 <floor+0xb8>
   22fd0:	01a20034 	movhi	r6,34816
   22fd4:	01df8e34 	movhi	r7,32312
   22fd8:	319d6704 	addi	r6,r6,30108
   22fdc:	39f90f04 	addi	r7,r7,-7108
   22fe0:	0024a440 	call	24a44 <__adddf3>
   22fe4:	000d883a 	mov	r6,zero
   22fe8:	000f883a 	mov	r7,zero
   22fec:	1009883a 	mov	r4,r2
   22ff0:	180b883a 	mov	r5,r3
   22ff4:	0025c600 	call	25c60 <__gedf2>
   22ff8:	0080040e 	bge	zero,r2,2300c <floor+0x9c>
   22ffc:	80003c16 	blt	r16,zero,230f0 <floor+0x180>
   23000:	0520303a 	nor	r16,zero,r20
   23004:	84e0703a 	and	r16,r16,r19
   23008:	0023883a 	mov	r17,zero
   2300c:	8805883a 	mov	r2,r17
   23010:	8007883a 	mov	r3,r16
   23014:	00000506 	br	2302c <floor+0xbc>
   23018:	01800cc4 	movi	r6,51
   2301c:	34800b0e 	bge	r6,r18,2304c <floor+0xdc>
   23020:	01810004 	movi	r6,1024
   23024:	91802f26 	beq	r18,r6,230e4 <floor+0x174>
   23028:	3807883a 	mov	r3,r7
   2302c:	dfc00517 	ldw	ra,20(sp)
   23030:	dd000417 	ldw	r20,16(sp)
   23034:	dcc00317 	ldw	r19,12(sp)
   23038:	dc800217 	ldw	r18,8(sp)
   2303c:	dc400117 	ldw	r17,4(sp)
   23040:	dc000017 	ldw	r16,0(sp)
   23044:	dec00604 	addi	sp,sp,24
   23048:	f800283a 	ret
   2304c:	423efb44 	addi	r8,r8,-1043
   23050:	053fffc4 	movi	r20,-1
   23054:	a228d83a 	srl	r20,r20,r8
   23058:	250c703a 	and	r6,r4,r20
   2305c:	303ff226 	beq	r6,zero,23028 <__alt_data_end+0xf4023028>
   23060:	01a20034 	movhi	r6,34816
   23064:	01df8e34 	movhi	r7,32312
   23068:	319d6704 	addi	r6,r6,30108
   2306c:	39f90f04 	addi	r7,r7,-7108
   23070:	0024a440 	call	24a44 <__adddf3>
   23074:	000d883a 	mov	r6,zero
   23078:	000f883a 	mov	r7,zero
   2307c:	1009883a 	mov	r4,r2
   23080:	180b883a 	mov	r5,r3
   23084:	0025c600 	call	25c60 <__gedf2>
   23088:	00bfe00e 	bge	zero,r2,2300c <__alt_data_end+0xf402300c>
   2308c:	80001c16 	blt	r16,zero,23100 <floor+0x190>
   23090:	0510303a 	nor	r8,zero,r20
   23094:	9821883a 	mov	r16,r19
   23098:	8a22703a 	and	r17,r17,r8
   2309c:	8805883a 	mov	r2,r17
   230a0:	8007883a 	mov	r3,r16
   230a4:	003fe106 	br	2302c <__alt_data_end+0xf402302c>
   230a8:	01a20034 	movhi	r6,34816
   230ac:	01df8e34 	movhi	r7,32312
   230b0:	319d6704 	addi	r6,r6,30108
   230b4:	39f90f04 	addi	r7,r7,-7108
   230b8:	0024a440 	call	24a44 <__adddf3>
   230bc:	000d883a 	mov	r6,zero
   230c0:	000f883a 	mov	r7,zero
   230c4:	1009883a 	mov	r4,r2
   230c8:	180b883a 	mov	r5,r3
   230cc:	0025c600 	call	25c60 <__gedf2>
   230d0:	00bfce0e 	bge	zero,r2,2300c <__alt_data_end+0xf402300c>
   230d4:	80001516 	blt	r16,zero,2312c <floor+0x1bc>
   230d8:	0023883a 	mov	r17,zero
   230dc:	0021883a 	mov	r16,zero
   230e0:	003fca06 	br	2300c <__alt_data_end+0xf402300c>
   230e4:	200d883a 	mov	r6,r4
   230e8:	0024a440 	call	24a44 <__adddf3>
   230ec:	003fcf06 	br	2302c <__alt_data_end+0xf402302c>
   230f0:	00800434 	movhi	r2,16
   230f4:	14a5d83a 	sra	r18,r2,r18
   230f8:	84a7883a 	add	r19,r16,r18
   230fc:	003fc006 	br	23000 <__alt_data_end+0xf4023000>
   23100:	00800504 	movi	r2,20
   23104:	90801326 	beq	r18,r2,23154 <floor+0x1e4>
   23108:	00800d04 	movi	r2,52
   2310c:	14a5c83a 	sub	r18,r2,r18
   23110:	00800044 	movi	r2,1
   23114:	1484983a 	sll	r2,r2,r18
   23118:	1445883a 	add	r2,r2,r17
   2311c:	14400b2e 	bgeu	r2,r17,2314c <floor+0x1dc>
   23120:	84c00044 	addi	r19,r16,1
   23124:	1023883a 	mov	r17,r2
   23128:	003fd906 	br	23090 <__alt_data_end+0xf4023090>
   2312c:	00a00034 	movhi	r2,32768
   23130:	10bfffc4 	addi	r2,r2,-1
   23134:	8084703a 	and	r2,r16,r2
   23138:	1462b03a 	or	r17,r2,r17
   2313c:	883fb326 	beq	r17,zero,2300c <__alt_data_end+0xf402300c>
   23140:	0023883a 	mov	r17,zero
   23144:	042ffc34 	movhi	r16,49136
   23148:	003fb006 	br	2300c <__alt_data_end+0xf402300c>
   2314c:	1023883a 	mov	r17,r2
   23150:	003fcf06 	br	23090 <__alt_data_end+0xf4023090>
   23154:	84c00044 	addi	r19,r16,1
   23158:	003fcd06 	br	23090 <__alt_data_end+0xf4023090>

0002315c <__fpclassifyd>:
   2315c:	00a00034 	movhi	r2,32768
   23160:	10bfffc4 	addi	r2,r2,-1
   23164:	2884703a 	and	r2,r5,r2
   23168:	10000726 	beq	r2,zero,23188 <__fpclassifyd+0x2c>
   2316c:	00fffc34 	movhi	r3,65520
   23170:	019ff834 	movhi	r6,32736
   23174:	28c7883a 	add	r3,r5,r3
   23178:	31bfffc4 	addi	r6,r6,-1
   2317c:	30c00536 	bltu	r6,r3,23194 <__fpclassifyd+0x38>
   23180:	00800104 	movi	r2,4
   23184:	f800283a 	ret
   23188:	2000021e 	bne	r4,zero,23194 <__fpclassifyd+0x38>
   2318c:	00800084 	movi	r2,2
   23190:	f800283a 	ret
   23194:	00dffc34 	movhi	r3,32752
   23198:	019ff834 	movhi	r6,32736
   2319c:	28cb883a 	add	r5,r5,r3
   231a0:	31bfffc4 	addi	r6,r6,-1
   231a4:	317ff62e 	bgeu	r6,r5,23180 <__alt_data_end+0xf4023180>
   231a8:	01400434 	movhi	r5,16
   231ac:	297fffc4 	addi	r5,r5,-1
   231b0:	28800236 	bltu	r5,r2,231bc <__fpclassifyd+0x60>
   231b4:	008000c4 	movi	r2,3
   231b8:	f800283a 	ret
   231bc:	10c00226 	beq	r2,r3,231c8 <__fpclassifyd+0x6c>
   231c0:	0005883a 	mov	r2,zero
   231c4:	f800283a 	ret
   231c8:	2005003a 	cmpeq	r2,r4,zero
   231cc:	f800283a 	ret

000231d0 <matherr>:
   231d0:	0005883a 	mov	r2,zero
   231d4:	f800283a 	ret

000231d8 <scalbn>:
   231d8:	2a1ffc2c 	andhi	r8,r5,32752
   231dc:	4011d53a 	srai	r8,r8,20
   231e0:	defffe04 	addi	sp,sp,-8
   231e4:	dc000015 	stw	r16,0(sp)
   231e8:	dfc00115 	stw	ra,4(sp)
   231ec:	280f883a 	mov	r7,r5
   231f0:	2015883a 	mov	r10,r4
   231f4:	3021883a 	mov	r16,r6
   231f8:	40001e1e 	bne	r8,zero,23274 <scalbn+0x9c>
   231fc:	00a00034 	movhi	r2,32768
   23200:	10bfffc4 	addi	r2,r2,-1
   23204:	2884703a 	and	r2,r5,r2
   23208:	1104b03a 	or	r2,r2,r4
   2320c:	10002226 	beq	r2,zero,23298 <scalbn+0xc0>
   23210:	01d0d434 	movhi	r7,17232
   23214:	000d883a 	mov	r6,zero
   23218:	0025e300 	call	25e30 <__muldf3>
   2321c:	013ffff4 	movhi	r4,65535
   23220:	210f2c04 	addi	r4,r4,15536
   23224:	1015883a 	mov	r10,r2
   23228:	180f883a 	mov	r7,r3
   2322c:	81002a16 	blt	r16,r4,232d8 <scalbn+0x100>
   23230:	191ffc2c 	andhi	r4,r3,32752
   23234:	2009d53a 	srai	r4,r4,20
   23238:	223ff284 	addi	r8,r4,-54
   2323c:	8211883a 	add	r8,r16,r8
   23240:	0081ff84 	movi	r2,2046
   23244:	12002f16 	blt	r2,r8,23304 <scalbn+0x12c>
   23248:	0200190e 	bge	zero,r8,232b0 <scalbn+0xd8>
   2324c:	4010953a 	slli	r8,r8,20
   23250:	01600434 	movhi	r5,32784
   23254:	297fffc4 	addi	r5,r5,-1
   23258:	194e703a 	and	r7,r3,r5
   2325c:	5005883a 	mov	r2,r10
   23260:	3a06b03a 	or	r3,r7,r8
   23264:	dfc00117 	ldw	ra,4(sp)
   23268:	dc000017 	ldw	r16,0(sp)
   2326c:	dec00204 	addi	sp,sp,8
   23270:	f800283a 	ret
   23274:	0081ffc4 	movi	r2,2047
   23278:	2807883a 	mov	r3,r5
   2327c:	40bfef1e 	bne	r8,r2,2323c <__alt_data_end+0xf402323c>
   23280:	200d883a 	mov	r6,r4
   23284:	0024a440 	call	24a44 <__adddf3>
   23288:	dfc00117 	ldw	ra,4(sp)
   2328c:	dc000017 	ldw	r16,0(sp)
   23290:	dec00204 	addi	sp,sp,8
   23294:	f800283a 	ret
   23298:	2005883a 	mov	r2,r4
   2329c:	2807883a 	mov	r3,r5
   232a0:	dfc00117 	ldw	ra,4(sp)
   232a4:	dc000017 	ldw	r16,0(sp)
   232a8:	dec00204 	addi	sp,sp,8
   232ac:	f800283a 	ret
   232b0:	00bff2c4 	movi	r2,-53
   232b4:	4080240e 	bge	r8,r2,23348 <scalbn+0x170>
   232b8:	00b0d414 	movui	r2,50000
   232bc:	14001116 	blt	r2,r16,23304 <scalbn+0x12c>
   232c0:	0130be74 	movhi	r4,49913
   232c4:	01406974 	movhi	r5,421
   232c8:	213cd644 	addi	r4,r4,-3239
   232cc:	295b87c4 	addi	r5,r5,28191
   232d0:	500d883a 	mov	r6,r10
   232d4:	00233740 	call	23374 <copysign>
   232d8:	01b0be74 	movhi	r6,49913
   232dc:	01c06974 	movhi	r7,421
   232e0:	31bcd644 	addi	r6,r6,-3239
   232e4:	39db87c4 	addi	r7,r7,28191
   232e8:	1009883a 	mov	r4,r2
   232ec:	180b883a 	mov	r5,r3
   232f0:	0025e300 	call	25e30 <__muldf3>
   232f4:	dfc00117 	ldw	ra,4(sp)
   232f8:	dc000017 	ldw	r16,0(sp)
   232fc:	dec00204 	addi	sp,sp,8
   23300:	f800283a 	ret
   23304:	01220034 	movhi	r4,34816
   23308:	015f8e34 	movhi	r5,32312
   2330c:	500d883a 	mov	r6,r10
   23310:	211d6704 	addi	r4,r4,30108
   23314:	29790f04 	addi	r5,r5,-7108
   23318:	00233740 	call	23374 <copysign>
   2331c:	01a20034 	movhi	r6,34816
   23320:	01df8e34 	movhi	r7,32312
   23324:	319d6704 	addi	r6,r6,30108
   23328:	39f90f04 	addi	r7,r7,-7108
   2332c:	1009883a 	mov	r4,r2
   23330:	180b883a 	mov	r5,r3
   23334:	0025e300 	call	25e30 <__muldf3>
   23338:	dfc00117 	ldw	ra,4(sp)
   2333c:	dc000017 	ldw	r16,0(sp)
   23340:	dec00204 	addi	sp,sp,8
   23344:	f800283a 	ret
   23348:	42000d84 	addi	r8,r8,54
   2334c:	4012953a 	slli	r9,r8,20
   23350:	01e00434 	movhi	r7,32784
   23354:	39ffffc4 	addi	r7,r7,-1
   23358:	19ca703a 	and	r5,r3,r7
   2335c:	000d883a 	mov	r6,zero
   23360:	01cf2434 	movhi	r7,15504
   23364:	5009883a 	mov	r4,r10
   23368:	494ab03a 	or	r5,r9,r5
   2336c:	0025e300 	call	25e30 <__muldf3>
   23370:	003fbc06 	br	23264 <__alt_data_end+0xf4023264>

00023374 <copysign>:
   23374:	2005883a 	mov	r2,r4
   23378:	01200034 	movhi	r4,32768
   2337c:	213fffc4 	addi	r4,r4,-1
   23380:	38e0002c 	andhi	r3,r7,32768
   23384:	290a703a 	and	r5,r5,r4
   23388:	28c6b03a 	or	r3,r5,r3
   2338c:	f800283a 	ret

00023390 <__divsi3>:
   23390:	20001b16 	blt	r4,zero,23400 <__divsi3+0x70>
   23394:	000f883a 	mov	r7,zero
   23398:	28001616 	blt	r5,zero,233f4 <__divsi3+0x64>
   2339c:	200d883a 	mov	r6,r4
   233a0:	29001a2e 	bgeu	r5,r4,2340c <__divsi3+0x7c>
   233a4:	00800804 	movi	r2,32
   233a8:	00c00044 	movi	r3,1
   233ac:	00000106 	br	233b4 <__divsi3+0x24>
   233b0:	10000d26 	beq	r2,zero,233e8 <__divsi3+0x58>
   233b4:	294b883a 	add	r5,r5,r5
   233b8:	10bfffc4 	addi	r2,r2,-1
   233bc:	18c7883a 	add	r3,r3,r3
   233c0:	293ffb36 	bltu	r5,r4,233b0 <__alt_data_end+0xf40233b0>
   233c4:	0005883a 	mov	r2,zero
   233c8:	18000726 	beq	r3,zero,233e8 <__divsi3+0x58>
   233cc:	0005883a 	mov	r2,zero
   233d0:	31400236 	bltu	r6,r5,233dc <__divsi3+0x4c>
   233d4:	314dc83a 	sub	r6,r6,r5
   233d8:	10c4b03a 	or	r2,r2,r3
   233dc:	1806d07a 	srli	r3,r3,1
   233e0:	280ad07a 	srli	r5,r5,1
   233e4:	183ffa1e 	bne	r3,zero,233d0 <__alt_data_end+0xf40233d0>
   233e8:	38000126 	beq	r7,zero,233f0 <__divsi3+0x60>
   233ec:	0085c83a 	sub	r2,zero,r2
   233f0:	f800283a 	ret
   233f4:	014bc83a 	sub	r5,zero,r5
   233f8:	39c0005c 	xori	r7,r7,1
   233fc:	003fe706 	br	2339c <__alt_data_end+0xf402339c>
   23400:	0109c83a 	sub	r4,zero,r4
   23404:	01c00044 	movi	r7,1
   23408:	003fe306 	br	23398 <__alt_data_end+0xf4023398>
   2340c:	00c00044 	movi	r3,1
   23410:	003fee06 	br	233cc <__alt_data_end+0xf40233cc>

00023414 <__modsi3>:
   23414:	20001716 	blt	r4,zero,23474 <__modsi3+0x60>
   23418:	000f883a 	mov	r7,zero
   2341c:	2005883a 	mov	r2,r4
   23420:	28001216 	blt	r5,zero,2346c <__modsi3+0x58>
   23424:	2900162e 	bgeu	r5,r4,23480 <__modsi3+0x6c>
   23428:	01800804 	movi	r6,32
   2342c:	00c00044 	movi	r3,1
   23430:	00000106 	br	23438 <__modsi3+0x24>
   23434:	30000a26 	beq	r6,zero,23460 <__modsi3+0x4c>
   23438:	294b883a 	add	r5,r5,r5
   2343c:	31bfffc4 	addi	r6,r6,-1
   23440:	18c7883a 	add	r3,r3,r3
   23444:	293ffb36 	bltu	r5,r4,23434 <__alt_data_end+0xf4023434>
   23448:	18000526 	beq	r3,zero,23460 <__modsi3+0x4c>
   2344c:	1806d07a 	srli	r3,r3,1
   23450:	11400136 	bltu	r2,r5,23458 <__modsi3+0x44>
   23454:	1145c83a 	sub	r2,r2,r5
   23458:	280ad07a 	srli	r5,r5,1
   2345c:	183ffb1e 	bne	r3,zero,2344c <__alt_data_end+0xf402344c>
   23460:	38000126 	beq	r7,zero,23468 <__modsi3+0x54>
   23464:	0085c83a 	sub	r2,zero,r2
   23468:	f800283a 	ret
   2346c:	014bc83a 	sub	r5,zero,r5
   23470:	003fec06 	br	23424 <__alt_data_end+0xf4023424>
   23474:	0109c83a 	sub	r4,zero,r4
   23478:	01c00044 	movi	r7,1
   2347c:	003fe706 	br	2341c <__alt_data_end+0xf402341c>
   23480:	00c00044 	movi	r3,1
   23484:	003ff106 	br	2344c <__alt_data_end+0xf402344c>

00023488 <__udivsi3>:
   23488:	200d883a 	mov	r6,r4
   2348c:	2900152e 	bgeu	r5,r4,234e4 <__udivsi3+0x5c>
   23490:	28001416 	blt	r5,zero,234e4 <__udivsi3+0x5c>
   23494:	00800804 	movi	r2,32
   23498:	00c00044 	movi	r3,1
   2349c:	00000206 	br	234a8 <__udivsi3+0x20>
   234a0:	10000e26 	beq	r2,zero,234dc <__udivsi3+0x54>
   234a4:	28000516 	blt	r5,zero,234bc <__udivsi3+0x34>
   234a8:	294b883a 	add	r5,r5,r5
   234ac:	10bfffc4 	addi	r2,r2,-1
   234b0:	18c7883a 	add	r3,r3,r3
   234b4:	293ffa36 	bltu	r5,r4,234a0 <__alt_data_end+0xf40234a0>
   234b8:	18000826 	beq	r3,zero,234dc <__udivsi3+0x54>
   234bc:	0005883a 	mov	r2,zero
   234c0:	31400236 	bltu	r6,r5,234cc <__udivsi3+0x44>
   234c4:	314dc83a 	sub	r6,r6,r5
   234c8:	10c4b03a 	or	r2,r2,r3
   234cc:	1806d07a 	srli	r3,r3,1
   234d0:	280ad07a 	srli	r5,r5,1
   234d4:	183ffa1e 	bne	r3,zero,234c0 <__alt_data_end+0xf40234c0>
   234d8:	f800283a 	ret
   234dc:	0005883a 	mov	r2,zero
   234e0:	f800283a 	ret
   234e4:	00c00044 	movi	r3,1
   234e8:	003ff406 	br	234bc <__alt_data_end+0xf40234bc>

000234ec <__umodsi3>:
   234ec:	2005883a 	mov	r2,r4
   234f0:	2900122e 	bgeu	r5,r4,2353c <__umodsi3+0x50>
   234f4:	28001116 	blt	r5,zero,2353c <__umodsi3+0x50>
   234f8:	01800804 	movi	r6,32
   234fc:	00c00044 	movi	r3,1
   23500:	00000206 	br	2350c <__umodsi3+0x20>
   23504:	30000c26 	beq	r6,zero,23538 <__umodsi3+0x4c>
   23508:	28000516 	blt	r5,zero,23520 <__umodsi3+0x34>
   2350c:	294b883a 	add	r5,r5,r5
   23510:	31bfffc4 	addi	r6,r6,-1
   23514:	18c7883a 	add	r3,r3,r3
   23518:	293ffa36 	bltu	r5,r4,23504 <__alt_data_end+0xf4023504>
   2351c:	18000626 	beq	r3,zero,23538 <__umodsi3+0x4c>
   23520:	1806d07a 	srli	r3,r3,1
   23524:	11400136 	bltu	r2,r5,2352c <__umodsi3+0x40>
   23528:	1145c83a 	sub	r2,r2,r5
   2352c:	280ad07a 	srli	r5,r5,1
   23530:	183ffb1e 	bne	r3,zero,23520 <__alt_data_end+0xf4023520>
   23534:	f800283a 	ret
   23538:	f800283a 	ret
   2353c:	00c00044 	movi	r3,1
   23540:	003ff706 	br	23520 <__alt_data_end+0xf4023520>

00023544 <__addsf3>:
   23544:	defffc04 	addi	sp,sp,-16
   23548:	2004d7fa 	srli	r2,r4,31
   2354c:	280cd5fa 	srli	r6,r5,23
   23550:	dc000015 	stw	r16,0(sp)
   23554:	00c02034 	movhi	r3,128
   23558:	2020d5fa 	srli	r16,r4,23
   2355c:	280ed7fa 	srli	r7,r5,31
   23560:	18ffffc4 	addi	r3,r3,-1
   23564:	dc400115 	stw	r17,4(sp)
   23568:	1908703a 	and	r4,r3,r4
   2356c:	194a703a 	and	r5,r3,r5
   23570:	dfc00315 	stw	ra,12(sp)
   23574:	dc800215 	stw	r18,8(sp)
   23578:	14403fcc 	andi	r17,r2,255
   2357c:	84003fcc 	andi	r16,r16,255
   23580:	200890fa 	slli	r4,r4,3
   23584:	31803fcc 	andi	r6,r6,255
   23588:	280a90fa 	slli	r5,r5,3
   2358c:	89c05026 	beq	r17,r7,236d0 <__addsf3+0x18c>
   23590:	8185c83a 	sub	r2,r16,r6
   23594:	00807a0e 	bge	zero,r2,23780 <__addsf3+0x23c>
   23598:	30001e1e 	bne	r6,zero,23614 <__addsf3+0xd0>
   2359c:	28006d1e 	bne	r5,zero,23754 <__addsf3+0x210>
   235a0:	208001cc 	andi	r2,r4,7
   235a4:	10000426 	beq	r2,zero,235b8 <__addsf3+0x74>
   235a8:	208003cc 	andi	r2,r4,15
   235ac:	00c00104 	movi	r3,4
   235b0:	10c00126 	beq	r2,r3,235b8 <__addsf3+0x74>
   235b4:	20c9883a 	add	r4,r4,r3
   235b8:	2081002c 	andhi	r2,r4,1024
   235bc:	10003926 	beq	r2,zero,236a4 <__addsf3+0x160>
   235c0:	84000044 	addi	r16,r16,1
   235c4:	00803fc4 	movi	r2,255
   235c8:	80807826 	beq	r16,r2,237ac <__addsf3+0x268>
   235cc:	200891ba 	slli	r4,r4,6
   235d0:	8805883a 	mov	r2,r17
   235d4:	2008d27a 	srli	r4,r4,9
   235d8:	84003fcc 	andi	r16,r16,255
   235dc:	800695fa 	slli	r3,r16,23
   235e0:	10803fcc 	andi	r2,r2,255
   235e4:	04002034 	movhi	r16,128
   235e8:	843fffc4 	addi	r16,r16,-1
   235ec:	100497fa 	slli	r2,r2,31
   235f0:	2408703a 	and	r4,r4,r16
   235f4:	20e0b03a 	or	r16,r4,r3
   235f8:	8084b03a 	or	r2,r16,r2
   235fc:	dfc00317 	ldw	ra,12(sp)
   23600:	dc800217 	ldw	r18,8(sp)
   23604:	dc400117 	ldw	r17,4(sp)
   23608:	dc000017 	ldw	r16,0(sp)
   2360c:	dec00404 	addi	sp,sp,16
   23610:	f800283a 	ret
   23614:	00c03fc4 	movi	r3,255
   23618:	80ffe126 	beq	r16,r3,235a0 <__alt_data_end+0xf40235a0>
   2361c:	29410034 	orhi	r5,r5,1024
   23620:	00c006c4 	movi	r3,27
   23624:	18807516 	blt	r3,r2,237fc <__addsf3+0x2b8>
   23628:	00c00804 	movi	r3,32
   2362c:	1887c83a 	sub	r3,r3,r2
   23630:	28c6983a 	sll	r3,r5,r3
   23634:	288ad83a 	srl	r5,r5,r2
   23638:	1804c03a 	cmpne	r2,r3,zero
   2363c:	288ab03a 	or	r5,r5,r2
   23640:	2149c83a 	sub	r4,r4,r5
   23644:	2081002c 	andhi	r2,r4,1024
   23648:	10001426 	beq	r2,zero,2369c <__addsf3+0x158>
   2364c:	04810034 	movhi	r18,1024
   23650:	94bfffc4 	addi	r18,r18,-1
   23654:	24a4703a 	and	r18,r4,r18
   23658:	9009883a 	mov	r4,r18
   2365c:	00272580 	call	27258 <__clzsi2>
   23660:	10bffec4 	addi	r2,r2,-5
   23664:	90a4983a 	sll	r18,r18,r2
   23668:	14005416 	blt	r2,r16,237bc <__addsf3+0x278>
   2366c:	1405c83a 	sub	r2,r2,r16
   23670:	11000044 	addi	r4,r2,1
   23674:	00800804 	movi	r2,32
   23678:	1105c83a 	sub	r2,r2,r4
   2367c:	9084983a 	sll	r2,r18,r2
   23680:	9124d83a 	srl	r18,r18,r4
   23684:	0021883a 	mov	r16,zero
   23688:	1008c03a 	cmpne	r4,r2,zero
   2368c:	9108b03a 	or	r4,r18,r4
   23690:	003fc306 	br	235a0 <__alt_data_end+0xf40235a0>
   23694:	1000db26 	beq	r2,zero,23a04 <__addsf3+0x4c0>
   23698:	1009883a 	mov	r4,r2
   2369c:	208001cc 	andi	r2,r4,7
   236a0:	103fc11e 	bne	r2,zero,235a8 <__alt_data_end+0xf40235a8>
   236a4:	2006d0fa 	srli	r3,r4,3
   236a8:	01003fc4 	movi	r4,255
   236ac:	8805883a 	mov	r2,r17
   236b0:	8100241e 	bne	r16,r4,23744 <__addsf3+0x200>
   236b4:	18006e26 	beq	r3,zero,23870 <__addsf3+0x32c>
   236b8:	19001034 	orhi	r4,r3,64
   236bc:	00c02034 	movhi	r3,128
   236c0:	18ffffc4 	addi	r3,r3,-1
   236c4:	043fffc4 	movi	r16,-1
   236c8:	20c8703a 	and	r4,r4,r3
   236cc:	003fc206 	br	235d8 <__alt_data_end+0xf40235d8>
   236d0:	8187c83a 	sub	r3,r16,r6
   236d4:	00c03e0e 	bge	zero,r3,237d0 <__addsf3+0x28c>
   236d8:	30002326 	beq	r6,zero,23768 <__addsf3+0x224>
   236dc:	01803fc4 	movi	r6,255
   236e0:	81bfaf26 	beq	r16,r6,235a0 <__alt_data_end+0xf40235a0>
   236e4:	29410034 	orhi	r5,r5,1024
   236e8:	018006c4 	movi	r6,27
   236ec:	30c07416 	blt	r6,r3,238c0 <__addsf3+0x37c>
   236f0:	01800804 	movi	r6,32
   236f4:	30cdc83a 	sub	r6,r6,r3
   236f8:	298c983a 	sll	r6,r5,r6
   236fc:	28cad83a 	srl	r5,r5,r3
   23700:	3006c03a 	cmpne	r3,r6,zero
   23704:	28cab03a 	or	r5,r5,r3
   23708:	2149883a 	add	r4,r4,r5
   2370c:	20c1002c 	andhi	r3,r4,1024
   23710:	183fe226 	beq	r3,zero,2369c <__alt_data_end+0xf402369c>
   23714:	84000044 	addi	r16,r16,1
   23718:	00c03fc4 	movi	r3,255
   2371c:	80c05426 	beq	r16,r3,23870 <__addsf3+0x32c>
   23720:	00bf0034 	movhi	r2,64512
   23724:	10bfffc4 	addi	r2,r2,-1
   23728:	20c0004c 	andi	r3,r4,1
   2372c:	2088703a 	and	r4,r4,r2
   23730:	2008d07a 	srli	r4,r4,1
   23734:	20c8b03a 	or	r4,r4,r3
   23738:	003f9906 	br	235a0 <__alt_data_end+0xf40235a0>
   2373c:	0007883a 	mov	r3,zero
   23740:	0005883a 	mov	r2,zero
   23744:	01002034 	movhi	r4,128
   23748:	213fffc4 	addi	r4,r4,-1
   2374c:	1908703a 	and	r4,r3,r4
   23750:	003fa106 	br	235d8 <__alt_data_end+0xf40235d8>
   23754:	10bfffc4 	addi	r2,r2,-1
   23758:	103fb926 	beq	r2,zero,23640 <__alt_data_end+0xf4023640>
   2375c:	00c03fc4 	movi	r3,255
   23760:	80ffaf1e 	bne	r16,r3,23620 <__alt_data_end+0xf4023620>
   23764:	003f8e06 	br	235a0 <__alt_data_end+0xf40235a0>
   23768:	283f8d26 	beq	r5,zero,235a0 <__alt_data_end+0xf40235a0>
   2376c:	18ffffc4 	addi	r3,r3,-1
   23770:	183fe526 	beq	r3,zero,23708 <__alt_data_end+0xf4023708>
   23774:	01803fc4 	movi	r6,255
   23778:	81bfdb1e 	bne	r16,r6,236e8 <__alt_data_end+0xf40236e8>
   2377c:	003f8806 	br	235a0 <__alt_data_end+0xf40235a0>
   23780:	1000201e 	bne	r2,zero,23804 <__addsf3+0x2c0>
   23784:	80800044 	addi	r2,r16,1
   23788:	10803fcc 	andi	r2,r2,255
   2378c:	01800044 	movi	r6,1
   23790:	3080450e 	bge	r6,r2,238a8 <__addsf3+0x364>
   23794:	2165c83a 	sub	r18,r4,r5
   23798:	90c1002c 	andhi	r3,r18,1024
   2379c:	18002b26 	beq	r3,zero,2384c <__addsf3+0x308>
   237a0:	2925c83a 	sub	r18,r5,r4
   237a4:	3823883a 	mov	r17,r7
   237a8:	003fab06 	br	23658 <__alt_data_end+0xf4023658>
   237ac:	8805883a 	mov	r2,r17
   237b0:	043fffc4 	movi	r16,-1
   237b4:	0009883a 	mov	r4,zero
   237b8:	003f8706 	br	235d8 <__alt_data_end+0xf40235d8>
   237bc:	013f0034 	movhi	r4,64512
   237c0:	213fffc4 	addi	r4,r4,-1
   237c4:	80a1c83a 	sub	r16,r16,r2
   237c8:	9108703a 	and	r4,r18,r4
   237cc:	003f7406 	br	235a0 <__alt_data_end+0xf40235a0>
   237d0:	1800411e 	bne	r3,zero,238d8 <__addsf3+0x394>
   237d4:	80c00044 	addi	r3,r16,1
   237d8:	19c03fcc 	andi	r7,r3,255
   237dc:	01800044 	movi	r6,1
   237e0:	31c0260e 	bge	r6,r7,2387c <__addsf3+0x338>
   237e4:	01803fc4 	movi	r6,255
   237e8:	19802126 	beq	r3,r6,23870 <__addsf3+0x32c>
   237ec:	2149883a 	add	r4,r4,r5
   237f0:	2008d07a 	srli	r4,r4,1
   237f4:	1821883a 	mov	r16,r3
   237f8:	003f6906 	br	235a0 <__alt_data_end+0xf40235a0>
   237fc:	01400044 	movi	r5,1
   23800:	003f8f06 	br	23640 <__alt_data_end+0xf4023640>
   23804:	8000151e 	bne	r16,zero,2385c <__addsf3+0x318>
   23808:	20002f26 	beq	r4,zero,238c8 <__addsf3+0x384>
   2380c:	0084303a 	nor	r2,zero,r2
   23810:	10000a26 	beq	r2,zero,2383c <__addsf3+0x2f8>
   23814:	00c03fc4 	movi	r3,255
   23818:	30c02b26 	beq	r6,r3,238c8 <__addsf3+0x384>
   2381c:	00c006c4 	movi	r3,27
   23820:	18806d16 	blt	r3,r2,239d8 <__addsf3+0x494>
   23824:	00c00804 	movi	r3,32
   23828:	1887c83a 	sub	r3,r3,r2
   2382c:	20c6983a 	sll	r3,r4,r3
   23830:	2084d83a 	srl	r2,r4,r2
   23834:	1808c03a 	cmpne	r4,r3,zero
   23838:	1108b03a 	or	r4,r2,r4
   2383c:	2909c83a 	sub	r4,r5,r4
   23840:	3021883a 	mov	r16,r6
   23844:	3823883a 	mov	r17,r7
   23848:	003f7e06 	br	23644 <__alt_data_end+0xf4023644>
   2384c:	903f821e 	bne	r18,zero,23658 <__alt_data_end+0xf4023658>
   23850:	0005883a 	mov	r2,zero
   23854:	0021883a 	mov	r16,zero
   23858:	003fba06 	br	23744 <__alt_data_end+0xf4023744>
   2385c:	00c03fc4 	movi	r3,255
   23860:	30c01926 	beq	r6,r3,238c8 <__addsf3+0x384>
   23864:	0085c83a 	sub	r2,zero,r2
   23868:	21010034 	orhi	r4,r4,1024
   2386c:	003feb06 	br	2381c <__alt_data_end+0xf402381c>
   23870:	043fffc4 	movi	r16,-1
   23874:	0009883a 	mov	r4,zero
   23878:	003f5706 	br	235d8 <__alt_data_end+0xf40235d8>
   2387c:	80004a1e 	bne	r16,zero,239a8 <__addsf3+0x464>
   23880:	20005926 	beq	r4,zero,239e8 <__addsf3+0x4a4>
   23884:	283f4626 	beq	r5,zero,235a0 <__alt_data_end+0xf40235a0>
   23888:	2149883a 	add	r4,r4,r5
   2388c:	2081002c 	andhi	r2,r4,1024
   23890:	103f8226 	beq	r2,zero,2369c <__alt_data_end+0xf402369c>
   23894:	00bf0034 	movhi	r2,64512
   23898:	10bfffc4 	addi	r2,r2,-1
   2389c:	3021883a 	mov	r16,r6
   238a0:	2088703a 	and	r4,r4,r2
   238a4:	003f3e06 	br	235a0 <__alt_data_end+0xf40235a0>
   238a8:	8000121e 	bne	r16,zero,238f4 <__addsf3+0x3b0>
   238ac:	2000261e 	bne	r4,zero,23948 <__addsf3+0x404>
   238b0:	283fa226 	beq	r5,zero,2373c <__alt_data_end+0xf402373c>
   238b4:	2809883a 	mov	r4,r5
   238b8:	3823883a 	mov	r17,r7
   238bc:	003f3806 	br	235a0 <__alt_data_end+0xf40235a0>
   238c0:	01400044 	movi	r5,1
   238c4:	003f9006 	br	23708 <__alt_data_end+0xf4023708>
   238c8:	2809883a 	mov	r4,r5
   238cc:	3021883a 	mov	r16,r6
   238d0:	3823883a 	mov	r17,r7
   238d4:	003f3206 	br	235a0 <__alt_data_end+0xf40235a0>
   238d8:	80000c1e 	bne	r16,zero,2390c <__addsf3+0x3c8>
   238dc:	20002f26 	beq	r4,zero,2399c <__addsf3+0x458>
   238e0:	00c6303a 	nor	r3,zero,r3
   238e4:	18002b1e 	bne	r3,zero,23994 <__addsf3+0x450>
   238e8:	2149883a 	add	r4,r4,r5
   238ec:	3021883a 	mov	r16,r6
   238f0:	003f8606 	br	2370c <__alt_data_end+0xf402370c>
   238f4:	20001b1e 	bne	r4,zero,23964 <__addsf3+0x420>
   238f8:	28003926 	beq	r5,zero,239e0 <__addsf3+0x49c>
   238fc:	2809883a 	mov	r4,r5
   23900:	3823883a 	mov	r17,r7
   23904:	04003fc4 	movi	r16,255
   23908:	003f2506 	br	235a0 <__alt_data_end+0xf40235a0>
   2390c:	01c03fc4 	movi	r7,255
   23910:	31c02226 	beq	r6,r7,2399c <__addsf3+0x458>
   23914:	00c7c83a 	sub	r3,zero,r3
   23918:	21010034 	orhi	r4,r4,1024
   2391c:	01c006c4 	movi	r7,27
   23920:	38c03616 	blt	r7,r3,239fc <__addsf3+0x4b8>
   23924:	01c00804 	movi	r7,32
   23928:	38cfc83a 	sub	r7,r7,r3
   2392c:	21ce983a 	sll	r7,r4,r7
   23930:	20c6d83a 	srl	r3,r4,r3
   23934:	3808c03a 	cmpne	r4,r7,zero
   23938:	1906b03a 	or	r3,r3,r4
   2393c:	1949883a 	add	r4,r3,r5
   23940:	3021883a 	mov	r16,r6
   23944:	003f7106 	br	2370c <__alt_data_end+0xf402370c>
   23948:	283f1526 	beq	r5,zero,235a0 <__alt_data_end+0xf40235a0>
   2394c:	2145c83a 	sub	r2,r4,r5
   23950:	10c1002c 	andhi	r3,r2,1024
   23954:	183f4f26 	beq	r3,zero,23694 <__alt_data_end+0xf4023694>
   23958:	2909c83a 	sub	r4,r5,r4
   2395c:	3823883a 	mov	r17,r7
   23960:	003f0f06 	br	235a0 <__alt_data_end+0xf40235a0>
   23964:	28001a26 	beq	r5,zero,239d0 <__addsf3+0x48c>
   23968:	2008d0fa 	srli	r4,r4,3
   2396c:	2080102c 	andhi	r2,r4,64
   23970:	10000526 	beq	r2,zero,23988 <__addsf3+0x444>
   23974:	280ad0fa 	srli	r5,r5,3
   23978:	2880102c 	andhi	r2,r5,64
   2397c:	1000021e 	bne	r2,zero,23988 <__addsf3+0x444>
   23980:	2809883a 	mov	r4,r5
   23984:	3823883a 	mov	r17,r7
   23988:	200890fa 	slli	r4,r4,3
   2398c:	04003fc4 	movi	r16,255
   23990:	003f0306 	br	235a0 <__alt_data_end+0xf40235a0>
   23994:	01c03fc4 	movi	r7,255
   23998:	31ffe01e 	bne	r6,r7,2391c <__alt_data_end+0xf402391c>
   2399c:	2809883a 	mov	r4,r5
   239a0:	3021883a 	mov	r16,r6
   239a4:	003efe06 	br	235a0 <__alt_data_end+0xf40235a0>
   239a8:	20001126 	beq	r4,zero,239f0 <__addsf3+0x4ac>
   239ac:	28000826 	beq	r5,zero,239d0 <__addsf3+0x48c>
   239b0:	2008d0fa 	srli	r4,r4,3
   239b4:	2080102c 	andhi	r2,r4,64
   239b8:	103ff326 	beq	r2,zero,23988 <__alt_data_end+0xf4023988>
   239bc:	280ad0fa 	srli	r5,r5,3
   239c0:	2880102c 	andhi	r2,r5,64
   239c4:	103ff01e 	bne	r2,zero,23988 <__alt_data_end+0xf4023988>
   239c8:	2809883a 	mov	r4,r5
   239cc:	003fee06 	br	23988 <__alt_data_end+0xf4023988>
   239d0:	04003fc4 	movi	r16,255
   239d4:	003ef206 	br	235a0 <__alt_data_end+0xf40235a0>
   239d8:	01000044 	movi	r4,1
   239dc:	003f9706 	br	2383c <__alt_data_end+0xf402383c>
   239e0:	0005883a 	mov	r2,zero
   239e4:	003f3406 	br	236b8 <__alt_data_end+0xf40236b8>
   239e8:	2809883a 	mov	r4,r5
   239ec:	003eec06 	br	235a0 <__alt_data_end+0xf40235a0>
   239f0:	2809883a 	mov	r4,r5
   239f4:	04003fc4 	movi	r16,255
   239f8:	003ee906 	br	235a0 <__alt_data_end+0xf40235a0>
   239fc:	00c00044 	movi	r3,1
   23a00:	003fce06 	br	2393c <__alt_data_end+0xf402393c>
   23a04:	0005883a 	mov	r2,zero
   23a08:	003f4e06 	br	23744 <__alt_data_end+0xf4023744>

00023a0c <__divsf3>:
   23a0c:	defff504 	addi	sp,sp,-44
   23a10:	200cd5fa 	srli	r6,r4,23
   23a14:	dcc00415 	stw	r19,16(sp)
   23a18:	2026d7fa 	srli	r19,r4,31
   23a1c:	00c02034 	movhi	r3,128
   23a20:	dd800715 	stw	r22,28(sp)
   23a24:	dd000515 	stw	r20,20(sp)
   23a28:	dc800315 	stw	r18,12(sp)
   23a2c:	18ffffc4 	addi	r3,r3,-1
   23a30:	dfc00a15 	stw	ra,40(sp)
   23a34:	df000915 	stw	fp,36(sp)
   23a38:	ddc00815 	stw	r23,32(sp)
   23a3c:	dd400615 	stw	r21,24(sp)
   23a40:	dc400215 	stw	r17,8(sp)
   23a44:	dc000115 	stw	r16,4(sp)
   23a48:	35003fcc 	andi	r20,r6,255
   23a4c:	1924703a 	and	r18,r3,r4
   23a50:	9d803fcc 	andi	r22,r19,255
   23a54:	a0005226 	beq	r20,zero,23ba0 <__divsf3+0x194>
   23a58:	00803fc4 	movi	r2,255
   23a5c:	a0802e26 	beq	r20,r2,23b18 <__divsf3+0x10c>
   23a60:	91002034 	orhi	r4,r18,128
   23a64:	202490fa 	slli	r18,r4,3
   23a68:	a53fe044 	addi	r20,r20,-127
   23a6c:	0021883a 	mov	r16,zero
   23a70:	002f883a 	mov	r23,zero
   23a74:	280cd5fa 	srli	r6,r5,23
   23a78:	282ad7fa 	srli	r21,r5,31
   23a7c:	00c02034 	movhi	r3,128
   23a80:	18ffffc4 	addi	r3,r3,-1
   23a84:	31803fcc 	andi	r6,r6,255
   23a88:	1962703a 	and	r17,r3,r5
   23a8c:	af003fcc 	andi	fp,r21,255
   23a90:	30004a26 	beq	r6,zero,23bbc <__divsf3+0x1b0>
   23a94:	00803fc4 	movi	r2,255
   23a98:	30804526 	beq	r6,r2,23bb0 <__divsf3+0x1a4>
   23a9c:	89402034 	orhi	r5,r17,128
   23aa0:	282290fa 	slli	r17,r5,3
   23aa4:	31bfe044 	addi	r6,r6,-127
   23aa8:	000b883a 	mov	r5,zero
   23aac:	2c20b03a 	or	r16,r5,r16
   23ab0:	802090ba 	slli	r16,r16,2
   23ab4:	008000b4 	movhi	r2,2
   23ab8:	108eb604 	addi	r2,r2,15064
   23abc:	80a1883a 	add	r16,r16,r2
   23ac0:	81000017 	ldw	r4,0(r16)
   23ac4:	9d46f03a 	xor	r3,r19,r21
   23ac8:	180f883a 	mov	r7,r3
   23acc:	18803fcc 	andi	r2,r3,255
   23ad0:	a18dc83a 	sub	r6,r20,r6
   23ad4:	2000683a 	jmp	r4
   23ad8:	00023cbc 	xorhi	zero,zero,2290
   23adc:	00023b40 	call	23b4 <__alt_mem_onchip_memory-0x1dc4c>
   23ae0:	00023cb0 	cmpltui	zero,zero,2290
   23ae4:	00023b2c 	andhi	zero,zero,2284
   23ae8:	00023cb0 	cmpltui	zero,zero,2290
   23aec:	00023c88 	cmpgei	zero,zero,2290
   23af0:	00023cb0 	cmpltui	zero,zero,2290
   23af4:	00023b2c 	andhi	zero,zero,2284
   23af8:	00023b40 	call	23b4 <__alt_mem_onchip_memory-0x1dc4c>
   23afc:	00023b40 	call	23b4 <__alt_mem_onchip_memory-0x1dc4c>
   23b00:	00023c88 	cmpgei	zero,zero,2290
   23b04:	00023b2c 	andhi	zero,zero,2284
   23b08:	00023d9c 	xori	zero,zero,2294
   23b0c:	00023d9c 	xori	zero,zero,2294
   23b10:	00023d9c 	xori	zero,zero,2294
   23b14:	00023d50 	cmplti	zero,zero,2293
   23b18:	9000581e 	bne	r18,zero,23c7c <__divsf3+0x270>
   23b1c:	04000204 	movi	r16,8
   23b20:	05c00084 	movi	r23,2
   23b24:	003fd306 	br	23a74 <__alt_data_end+0xf4023a74>
   23b28:	0023883a 	mov	r17,zero
   23b2c:	e02d883a 	mov	r22,fp
   23b30:	282f883a 	mov	r23,r5
   23b34:	00800084 	movi	r2,2
   23b38:	b8808f1e 	bne	r23,r2,23d78 <__divsf3+0x36c>
   23b3c:	b005883a 	mov	r2,r22
   23b40:	11c0004c 	andi	r7,r2,1
   23b44:	013fffc4 	movi	r4,-1
   23b48:	000d883a 	mov	r6,zero
   23b4c:	21003fcc 	andi	r4,r4,255
   23b50:	200895fa 	slli	r4,r4,23
   23b54:	38803fcc 	andi	r2,r7,255
   23b58:	00c02034 	movhi	r3,128
   23b5c:	100497fa 	slli	r2,r2,31
   23b60:	18ffffc4 	addi	r3,r3,-1
   23b64:	30c6703a 	and	r3,r6,r3
   23b68:	1906b03a 	or	r3,r3,r4
   23b6c:	1884b03a 	or	r2,r3,r2
   23b70:	dfc00a17 	ldw	ra,40(sp)
   23b74:	df000917 	ldw	fp,36(sp)
   23b78:	ddc00817 	ldw	r23,32(sp)
   23b7c:	dd800717 	ldw	r22,28(sp)
   23b80:	dd400617 	ldw	r21,24(sp)
   23b84:	dd000517 	ldw	r20,20(sp)
   23b88:	dcc00417 	ldw	r19,16(sp)
   23b8c:	dc800317 	ldw	r18,12(sp)
   23b90:	dc400217 	ldw	r17,8(sp)
   23b94:	dc000117 	ldw	r16,4(sp)
   23b98:	dec00b04 	addi	sp,sp,44
   23b9c:	f800283a 	ret
   23ba0:	90002b1e 	bne	r18,zero,23c50 <__divsf3+0x244>
   23ba4:	04000104 	movi	r16,4
   23ba8:	05c00044 	movi	r23,1
   23bac:	003fb106 	br	23a74 <__alt_data_end+0xf4023a74>
   23bb0:	8800251e 	bne	r17,zero,23c48 <__divsf3+0x23c>
   23bb4:	01400084 	movi	r5,2
   23bb8:	00000206 	br	23bc4 <__divsf3+0x1b8>
   23bbc:	88001a1e 	bne	r17,zero,23c28 <__divsf3+0x21c>
   23bc0:	01400044 	movi	r5,1
   23bc4:	8160b03a 	or	r16,r16,r5
   23bc8:	802090ba 	slli	r16,r16,2
   23bcc:	00c000b4 	movhi	r3,2
   23bd0:	18cefa04 	addi	r3,r3,15336
   23bd4:	80e1883a 	add	r16,r16,r3
   23bd8:	80c00017 	ldw	r3,0(r16)
   23bdc:	9d44f03a 	xor	r2,r19,r21
   23be0:	a18dc83a 	sub	r6,r20,r6
   23be4:	1800683a 	jmp	r3
   23be8:	00023b40 	call	23b4 <__alt_mem_onchip_memory-0x1dc4c>
   23bec:	00023b40 	call	23b4 <__alt_mem_onchip_memory-0x1dc4c>
   23bf0:	00023d8c 	andi	zero,zero,2294
   23bf4:	00023b28 	cmpgeui	zero,zero,2284
   23bf8:	00023d8c 	andi	zero,zero,2294
   23bfc:	00023c88 	cmpgei	zero,zero,2290
   23c00:	00023d8c 	andi	zero,zero,2294
   23c04:	00023b28 	cmpgeui	zero,zero,2284
   23c08:	00023b40 	call	23b4 <__alt_mem_onchip_memory-0x1dc4c>
   23c0c:	00023b40 	call	23b4 <__alt_mem_onchip_memory-0x1dc4c>
   23c10:	00023c88 	cmpgei	zero,zero,2290
   23c14:	00023b28 	cmpgeui	zero,zero,2284
   23c18:	00023d9c 	xori	zero,zero,2294
   23c1c:	00023d9c 	xori	zero,zero,2294
   23c20:	00023d9c 	xori	zero,zero,2294
   23c24:	00023db4 	movhi	zero,2294
   23c28:	8809883a 	mov	r4,r17
   23c2c:	00272580 	call	27258 <__clzsi2>
   23c30:	10fffec4 	addi	r3,r2,-5
   23c34:	10801d84 	addi	r2,r2,118
   23c38:	88e2983a 	sll	r17,r17,r3
   23c3c:	008dc83a 	sub	r6,zero,r2
   23c40:	000b883a 	mov	r5,zero
   23c44:	003f9906 	br	23aac <__alt_data_end+0xf4023aac>
   23c48:	014000c4 	movi	r5,3
   23c4c:	003f9706 	br	23aac <__alt_data_end+0xf4023aac>
   23c50:	9009883a 	mov	r4,r18
   23c54:	d9400015 	stw	r5,0(sp)
   23c58:	00272580 	call	27258 <__clzsi2>
   23c5c:	10fffec4 	addi	r3,r2,-5
   23c60:	11801d84 	addi	r6,r2,118
   23c64:	90e4983a 	sll	r18,r18,r3
   23c68:	01a9c83a 	sub	r20,zero,r6
   23c6c:	0021883a 	mov	r16,zero
   23c70:	002f883a 	mov	r23,zero
   23c74:	d9400017 	ldw	r5,0(sp)
   23c78:	003f7e06 	br	23a74 <__alt_data_end+0xf4023a74>
   23c7c:	04000304 	movi	r16,12
   23c80:	05c000c4 	movi	r23,3
   23c84:	003f7b06 	br	23a74 <__alt_data_end+0xf4023a74>
   23c88:	01802034 	movhi	r6,128
   23c8c:	000f883a 	mov	r7,zero
   23c90:	31bfffc4 	addi	r6,r6,-1
   23c94:	013fffc4 	movi	r4,-1
   23c98:	003fac06 	br	23b4c <__alt_data_end+0xf4023b4c>
   23c9c:	01400044 	movi	r5,1
   23ca0:	2909c83a 	sub	r4,r5,r4
   23ca4:	00c006c4 	movi	r3,27
   23ca8:	19004b0e 	bge	r3,r4,23dd8 <__divsf3+0x3cc>
   23cac:	114e703a 	and	r7,r2,r5
   23cb0:	0009883a 	mov	r4,zero
   23cb4:	000d883a 	mov	r6,zero
   23cb8:	003fa406 	br	23b4c <__alt_data_end+0xf4023b4c>
   23cbc:	9006917a 	slli	r3,r18,5
   23cc0:	8822917a 	slli	r17,r17,5
   23cc4:	1c40372e 	bgeu	r3,r17,23da4 <__divsf3+0x398>
   23cc8:	31bfffc4 	addi	r6,r6,-1
   23ccc:	010006c4 	movi	r4,27
   23cd0:	000b883a 	mov	r5,zero
   23cd4:	180f883a 	mov	r7,r3
   23cd8:	294b883a 	add	r5,r5,r5
   23cdc:	18c7883a 	add	r3,r3,r3
   23ce0:	38000116 	blt	r7,zero,23ce8 <__divsf3+0x2dc>
   23ce4:	1c400236 	bltu	r3,r17,23cf0 <__divsf3+0x2e4>
   23ce8:	1c47c83a 	sub	r3,r3,r17
   23cec:	29400054 	ori	r5,r5,1
   23cf0:	213fffc4 	addi	r4,r4,-1
   23cf4:	203ff71e 	bne	r4,zero,23cd4 <__alt_data_end+0xf4023cd4>
   23cf8:	1806c03a 	cmpne	r3,r3,zero
   23cfc:	1962b03a 	or	r17,r3,r5
   23d00:	31001fc4 	addi	r4,r6,127
   23d04:	013fe50e 	bge	zero,r4,23c9c <__alt_data_end+0xf4023c9c>
   23d08:	88c001cc 	andi	r3,r17,7
   23d0c:	18000426 	beq	r3,zero,23d20 <__divsf3+0x314>
   23d10:	88c003cc 	andi	r3,r17,15
   23d14:	01400104 	movi	r5,4
   23d18:	19400126 	beq	r3,r5,23d20 <__divsf3+0x314>
   23d1c:	8963883a 	add	r17,r17,r5
   23d20:	88c2002c 	andhi	r3,r17,2048
   23d24:	18000426 	beq	r3,zero,23d38 <__divsf3+0x32c>
   23d28:	00fe0034 	movhi	r3,63488
   23d2c:	18ffffc4 	addi	r3,r3,-1
   23d30:	31002004 	addi	r4,r6,128
   23d34:	88e2703a 	and	r17,r17,r3
   23d38:	00c03f84 	movi	r3,254
   23d3c:	193f8016 	blt	r3,r4,23b40 <__alt_data_end+0xf4023b40>
   23d40:	880c91ba 	slli	r6,r17,6
   23d44:	11c0004c 	andi	r7,r2,1
   23d48:	300cd27a 	srli	r6,r6,9
   23d4c:	003f7f06 	br	23b4c <__alt_data_end+0xf4023b4c>
   23d50:	9080102c 	andhi	r2,r18,64
   23d54:	10000226 	beq	r2,zero,23d60 <__divsf3+0x354>
   23d58:	8880102c 	andhi	r2,r17,64
   23d5c:	10001826 	beq	r2,zero,23dc0 <__divsf3+0x3b4>
   23d60:	00802034 	movhi	r2,128
   23d64:	91801034 	orhi	r6,r18,64
   23d68:	10bfffc4 	addi	r2,r2,-1
   23d6c:	980f883a 	mov	r7,r19
   23d70:	308c703a 	and	r6,r6,r2
   23d74:	003fc706 	br	23c94 <__alt_data_end+0xf4023c94>
   23d78:	008000c4 	movi	r2,3
   23d7c:	b8802d26 	beq	r23,r2,23e34 <__divsf3+0x428>
   23d80:	00c00044 	movi	r3,1
   23d84:	b005883a 	mov	r2,r22
   23d88:	b8ffdd1e 	bne	r23,r3,23d00 <__alt_data_end+0xf4023d00>
   23d8c:	11c0004c 	andi	r7,r2,1
   23d90:	0009883a 	mov	r4,zero
   23d94:	000d883a 	mov	r6,zero
   23d98:	003f6c06 	br	23b4c <__alt_data_end+0xf4023b4c>
   23d9c:	9023883a 	mov	r17,r18
   23da0:	003f6406 	br	23b34 <__alt_data_end+0xf4023b34>
   23da4:	1c47c83a 	sub	r3,r3,r17
   23da8:	01000684 	movi	r4,26
   23dac:	01400044 	movi	r5,1
   23db0:	003fc806 	br	23cd4 <__alt_data_end+0xf4023cd4>
   23db4:	9080102c 	andhi	r2,r18,64
   23db8:	103fe926 	beq	r2,zero,23d60 <__alt_data_end+0xf4023d60>
   23dbc:	0023883a 	mov	r17,zero
   23dc0:	00802034 	movhi	r2,128
   23dc4:	89801034 	orhi	r6,r17,64
   23dc8:	10bfffc4 	addi	r2,r2,-1
   23dcc:	a80f883a 	mov	r7,r21
   23dd0:	308c703a 	and	r6,r6,r2
   23dd4:	003faf06 	br	23c94 <__alt_data_end+0xf4023c94>
   23dd8:	01c00804 	movi	r7,32
   23ddc:	390fc83a 	sub	r7,r7,r4
   23de0:	89ce983a 	sll	r7,r17,r7
   23de4:	890ad83a 	srl	r5,r17,r4
   23de8:	380ec03a 	cmpne	r7,r7,zero
   23dec:	29cab03a 	or	r5,r5,r7
   23df0:	28c001cc 	andi	r3,r5,7
   23df4:	18000426 	beq	r3,zero,23e08 <__divsf3+0x3fc>
   23df8:	28c003cc 	andi	r3,r5,15
   23dfc:	01000104 	movi	r4,4
   23e00:	19000126 	beq	r3,r4,23e08 <__divsf3+0x3fc>
   23e04:	290b883a 	add	r5,r5,r4
   23e08:	28c1002c 	andhi	r3,r5,1024
   23e0c:	18000426 	beq	r3,zero,23e20 <__divsf3+0x414>
   23e10:	11c0004c 	andi	r7,r2,1
   23e14:	01000044 	movi	r4,1
   23e18:	000d883a 	mov	r6,zero
   23e1c:	003f4b06 	br	23b4c <__alt_data_end+0xf4023b4c>
   23e20:	280a91ba 	slli	r5,r5,6
   23e24:	11c0004c 	andi	r7,r2,1
   23e28:	0009883a 	mov	r4,zero
   23e2c:	280cd27a 	srli	r6,r5,9
   23e30:	003f4606 	br	23b4c <__alt_data_end+0xf4023b4c>
   23e34:	00802034 	movhi	r2,128
   23e38:	89801034 	orhi	r6,r17,64
   23e3c:	10bfffc4 	addi	r2,r2,-1
   23e40:	b00f883a 	mov	r7,r22
   23e44:	308c703a 	and	r6,r6,r2
   23e48:	003f9206 	br	23c94 <__alt_data_end+0xf4023c94>

00023e4c <__gesf2>:
   23e4c:	2004d5fa 	srli	r2,r4,23
   23e50:	2806d5fa 	srli	r3,r5,23
   23e54:	01802034 	movhi	r6,128
   23e58:	31bfffc4 	addi	r6,r6,-1
   23e5c:	10803fcc 	andi	r2,r2,255
   23e60:	01c03fc4 	movi	r7,255
   23e64:	3110703a 	and	r8,r6,r4
   23e68:	18c03fcc 	andi	r3,r3,255
   23e6c:	314c703a 	and	r6,r6,r5
   23e70:	2008d7fa 	srli	r4,r4,31
   23e74:	280ad7fa 	srli	r5,r5,31
   23e78:	11c01926 	beq	r2,r7,23ee0 <__gesf2+0x94>
   23e7c:	01c03fc4 	movi	r7,255
   23e80:	19c00f26 	beq	r3,r7,23ec0 <__gesf2+0x74>
   23e84:	1000061e 	bne	r2,zero,23ea0 <__gesf2+0x54>
   23e88:	400f003a 	cmpeq	r7,r8,zero
   23e8c:	1800071e 	bne	r3,zero,23eac <__gesf2+0x60>
   23e90:	3000061e 	bne	r6,zero,23eac <__gesf2+0x60>
   23e94:	0005883a 	mov	r2,zero
   23e98:	40000e1e 	bne	r8,zero,23ed4 <__gesf2+0x88>
   23e9c:	f800283a 	ret
   23ea0:	18000a1e 	bne	r3,zero,23ecc <__gesf2+0x80>
   23ea4:	30000b26 	beq	r6,zero,23ed4 <__gesf2+0x88>
   23ea8:	000f883a 	mov	r7,zero
   23eac:	29403fcc 	andi	r5,r5,255
   23eb0:	38000726 	beq	r7,zero,23ed0 <__gesf2+0x84>
   23eb4:	28000826 	beq	r5,zero,23ed8 <__gesf2+0x8c>
   23eb8:	00800044 	movi	r2,1
   23ebc:	f800283a 	ret
   23ec0:	303ff026 	beq	r6,zero,23e84 <__alt_data_end+0xf4023e84>
   23ec4:	00bfff84 	movi	r2,-2
   23ec8:	f800283a 	ret
   23ecc:	29403fcc 	andi	r5,r5,255
   23ed0:	21400526 	beq	r4,r5,23ee8 <__gesf2+0x9c>
   23ed4:	203ff826 	beq	r4,zero,23eb8 <__alt_data_end+0xf4023eb8>
   23ed8:	00bfffc4 	movi	r2,-1
   23edc:	f800283a 	ret
   23ee0:	403fe626 	beq	r8,zero,23e7c <__alt_data_end+0xf4023e7c>
   23ee4:	003ff706 	br	23ec4 <__alt_data_end+0xf4023ec4>
   23ee8:	18bffa16 	blt	r3,r2,23ed4 <__alt_data_end+0xf4023ed4>
   23eec:	10c00216 	blt	r2,r3,23ef8 <__gesf2+0xac>
   23ef0:	323ff836 	bltu	r6,r8,23ed4 <__alt_data_end+0xf4023ed4>
   23ef4:	4180022e 	bgeu	r8,r6,23f00 <__gesf2+0xb4>
   23ef8:	203fef1e 	bne	r4,zero,23eb8 <__alt_data_end+0xf4023eb8>
   23efc:	003ff606 	br	23ed8 <__alt_data_end+0xf4023ed8>
   23f00:	0005883a 	mov	r2,zero
   23f04:	f800283a 	ret

00023f08 <__lesf2>:
   23f08:	2004d5fa 	srli	r2,r4,23
   23f0c:	280cd5fa 	srli	r6,r5,23
   23f10:	00c02034 	movhi	r3,128
   23f14:	18ffffc4 	addi	r3,r3,-1
   23f18:	10803fcc 	andi	r2,r2,255
   23f1c:	01c03fc4 	movi	r7,255
   23f20:	1910703a 	and	r8,r3,r4
   23f24:	31803fcc 	andi	r6,r6,255
   23f28:	1946703a 	and	r3,r3,r5
   23f2c:	2008d7fa 	srli	r4,r4,31
   23f30:	280ad7fa 	srli	r5,r5,31
   23f34:	11c01b26 	beq	r2,r7,23fa4 <__lesf2+0x9c>
   23f38:	01c03fc4 	movi	r7,255
   23f3c:	31c01126 	beq	r6,r7,23f84 <__lesf2+0x7c>
   23f40:	1000071e 	bne	r2,zero,23f60 <__lesf2+0x58>
   23f44:	400f003a 	cmpeq	r7,r8,zero
   23f48:	21003fcc 	andi	r4,r4,255
   23f4c:	3000081e 	bne	r6,zero,23f70 <__lesf2+0x68>
   23f50:	1800071e 	bne	r3,zero,23f70 <__lesf2+0x68>
   23f54:	0005883a 	mov	r2,zero
   23f58:	40000f1e 	bne	r8,zero,23f98 <__lesf2+0x90>
   23f5c:	f800283a 	ret
   23f60:	21003fcc 	andi	r4,r4,255
   23f64:	30000a1e 	bne	r6,zero,23f90 <__lesf2+0x88>
   23f68:	18000b26 	beq	r3,zero,23f98 <__lesf2+0x90>
   23f6c:	000f883a 	mov	r7,zero
   23f70:	29403fcc 	andi	r5,r5,255
   23f74:	38000726 	beq	r7,zero,23f94 <__lesf2+0x8c>
   23f78:	28000826 	beq	r5,zero,23f9c <__lesf2+0x94>
   23f7c:	00800044 	movi	r2,1
   23f80:	f800283a 	ret
   23f84:	183fee26 	beq	r3,zero,23f40 <__alt_data_end+0xf4023f40>
   23f88:	00800084 	movi	r2,2
   23f8c:	f800283a 	ret
   23f90:	29403fcc 	andi	r5,r5,255
   23f94:	21400626 	beq	r4,r5,23fb0 <__lesf2+0xa8>
   23f98:	203ff826 	beq	r4,zero,23f7c <__alt_data_end+0xf4023f7c>
   23f9c:	00bfffc4 	movi	r2,-1
   23fa0:	f800283a 	ret
   23fa4:	403fe426 	beq	r8,zero,23f38 <__alt_data_end+0xf4023f38>
   23fa8:	00800084 	movi	r2,2
   23fac:	f800283a 	ret
   23fb0:	30bff916 	blt	r6,r2,23f98 <__alt_data_end+0xf4023f98>
   23fb4:	11800216 	blt	r2,r6,23fc0 <__lesf2+0xb8>
   23fb8:	1a3ff736 	bltu	r3,r8,23f98 <__alt_data_end+0xf4023f98>
   23fbc:	40c0022e 	bgeu	r8,r3,23fc8 <__lesf2+0xc0>
   23fc0:	203fee1e 	bne	r4,zero,23f7c <__alt_data_end+0xf4023f7c>
   23fc4:	003ff506 	br	23f9c <__alt_data_end+0xf4023f9c>
   23fc8:	0005883a 	mov	r2,zero
   23fcc:	f800283a 	ret

00023fd0 <__mulsf3>:
   23fd0:	defff504 	addi	sp,sp,-44
   23fd4:	dc000115 	stw	r16,4(sp)
   23fd8:	2020d5fa 	srli	r16,r4,23
   23fdc:	dd400615 	stw	r21,24(sp)
   23fe0:	202ad7fa 	srli	r21,r4,31
   23fe4:	dc800315 	stw	r18,12(sp)
   23fe8:	04802034 	movhi	r18,128
   23fec:	df000915 	stw	fp,36(sp)
   23ff0:	dd000515 	stw	r20,20(sp)
   23ff4:	94bfffc4 	addi	r18,r18,-1
   23ff8:	dfc00a15 	stw	ra,40(sp)
   23ffc:	ddc00815 	stw	r23,32(sp)
   24000:	dd800715 	stw	r22,28(sp)
   24004:	dcc00415 	stw	r19,16(sp)
   24008:	dc400215 	stw	r17,8(sp)
   2400c:	84003fcc 	andi	r16,r16,255
   24010:	9124703a 	and	r18,r18,r4
   24014:	a829883a 	mov	r20,r21
   24018:	af003fcc 	andi	fp,r21,255
   2401c:	80005426 	beq	r16,zero,24170 <__mulsf3+0x1a0>
   24020:	00803fc4 	movi	r2,255
   24024:	80802f26 	beq	r16,r2,240e4 <__mulsf3+0x114>
   24028:	91002034 	orhi	r4,r18,128
   2402c:	202490fa 	slli	r18,r4,3
   24030:	843fe044 	addi	r16,r16,-127
   24034:	0023883a 	mov	r17,zero
   24038:	002f883a 	mov	r23,zero
   2403c:	2804d5fa 	srli	r2,r5,23
   24040:	282cd7fa 	srli	r22,r5,31
   24044:	01002034 	movhi	r4,128
   24048:	213fffc4 	addi	r4,r4,-1
   2404c:	10803fcc 	andi	r2,r2,255
   24050:	2166703a 	and	r19,r4,r5
   24054:	b1803fcc 	andi	r6,r22,255
   24058:	10004c26 	beq	r2,zero,2418c <__mulsf3+0x1bc>
   2405c:	00c03fc4 	movi	r3,255
   24060:	10c04726 	beq	r2,r3,24180 <__mulsf3+0x1b0>
   24064:	99002034 	orhi	r4,r19,128
   24068:	202690fa 	slli	r19,r4,3
   2406c:	10bfe044 	addi	r2,r2,-127
   24070:	0007883a 	mov	r3,zero
   24074:	80a1883a 	add	r16,r16,r2
   24078:	010003c4 	movi	r4,15
   2407c:	1c44b03a 	or	r2,r3,r17
   24080:	b56af03a 	xor	r21,r22,r21
   24084:	81c00044 	addi	r7,r16,1
   24088:	20806b36 	bltu	r4,r2,24238 <__mulsf3+0x268>
   2408c:	100490ba 	slli	r2,r2,2
   24090:	010000b4 	movhi	r4,2
   24094:	21102904 	addi	r4,r4,16548
   24098:	1105883a 	add	r2,r2,r4
   2409c:	10800017 	ldw	r2,0(r2)
   240a0:	1000683a 	jmp	r2
   240a4:	00024238 	rdprs	zero,zero,2312
   240a8:	000240f8 	rdprs	zero,zero,2307
   240ac:	000240f8 	rdprs	zero,zero,2307
   240b0:	000240f4 	movhi	zero,2307
   240b4:	0002421c 	xori	zero,zero,2312
   240b8:	0002421c 	xori	zero,zero,2312
   240bc:	00024208 	cmpgei	zero,zero,2312
   240c0:	000240f4 	movhi	zero,2307
   240c4:	0002421c 	xori	zero,zero,2312
   240c8:	00024208 	cmpgei	zero,zero,2312
   240cc:	0002421c 	xori	zero,zero,2312
   240d0:	000240f4 	movhi	zero,2307
   240d4:	00024228 	cmpgeui	zero,zero,2312
   240d8:	00024228 	cmpgeui	zero,zero,2312
   240dc:	00024228 	cmpgeui	zero,zero,2312
   240e0:	00024304 	movi	zero,2316
   240e4:	90003b1e 	bne	r18,zero,241d4 <__mulsf3+0x204>
   240e8:	04400204 	movi	r17,8
   240ec:	05c00084 	movi	r23,2
   240f0:	003fd206 	br	2403c <__alt_data_end+0xf402403c>
   240f4:	302b883a 	mov	r21,r6
   240f8:	00800084 	movi	r2,2
   240fc:	18802626 	beq	r3,r2,24198 <__mulsf3+0x1c8>
   24100:	008000c4 	movi	r2,3
   24104:	1880ab26 	beq	r3,r2,243b4 <__mulsf3+0x3e4>
   24108:	00800044 	movi	r2,1
   2410c:	1880a21e 	bne	r3,r2,24398 <__mulsf3+0x3c8>
   24110:	a829883a 	mov	r20,r21
   24114:	0007883a 	mov	r3,zero
   24118:	0009883a 	mov	r4,zero
   2411c:	18803fcc 	andi	r2,r3,255
   24120:	100695fa 	slli	r3,r2,23
   24124:	a0803fcc 	andi	r2,r20,255
   24128:	100a97fa 	slli	r5,r2,31
   2412c:	00802034 	movhi	r2,128
   24130:	10bfffc4 	addi	r2,r2,-1
   24134:	2084703a 	and	r2,r4,r2
   24138:	10c4b03a 	or	r2,r2,r3
   2413c:	1144b03a 	or	r2,r2,r5
   24140:	dfc00a17 	ldw	ra,40(sp)
   24144:	df000917 	ldw	fp,36(sp)
   24148:	ddc00817 	ldw	r23,32(sp)
   2414c:	dd800717 	ldw	r22,28(sp)
   24150:	dd400617 	ldw	r21,24(sp)
   24154:	dd000517 	ldw	r20,20(sp)
   24158:	dcc00417 	ldw	r19,16(sp)
   2415c:	dc800317 	ldw	r18,12(sp)
   24160:	dc400217 	ldw	r17,8(sp)
   24164:	dc000117 	ldw	r16,4(sp)
   24168:	dec00b04 	addi	sp,sp,44
   2416c:	f800283a 	ret
   24170:	90000d1e 	bne	r18,zero,241a8 <__mulsf3+0x1d8>
   24174:	04400104 	movi	r17,4
   24178:	05c00044 	movi	r23,1
   2417c:	003faf06 	br	2403c <__alt_data_end+0xf402403c>
   24180:	9806c03a 	cmpne	r3,r19,zero
   24184:	18c00084 	addi	r3,r3,2
   24188:	003fba06 	br	24074 <__alt_data_end+0xf4024074>
   2418c:	9800141e 	bne	r19,zero,241e0 <__mulsf3+0x210>
   24190:	00c00044 	movi	r3,1
   24194:	003fb706 	br	24074 <__alt_data_end+0xf4024074>
   24198:	a829883a 	mov	r20,r21
   2419c:	00ffffc4 	movi	r3,-1
   241a0:	0009883a 	mov	r4,zero
   241a4:	003fdd06 	br	2411c <__alt_data_end+0xf402411c>
   241a8:	9009883a 	mov	r4,r18
   241ac:	d9400015 	stw	r5,0(sp)
   241b0:	00272580 	call	27258 <__clzsi2>
   241b4:	10fffec4 	addi	r3,r2,-5
   241b8:	10801d84 	addi	r2,r2,118
   241bc:	90e4983a 	sll	r18,r18,r3
   241c0:	00a1c83a 	sub	r16,zero,r2
   241c4:	0023883a 	mov	r17,zero
   241c8:	002f883a 	mov	r23,zero
   241cc:	d9400017 	ldw	r5,0(sp)
   241d0:	003f9a06 	br	2403c <__alt_data_end+0xf402403c>
   241d4:	04400304 	movi	r17,12
   241d8:	05c000c4 	movi	r23,3
   241dc:	003f9706 	br	2403c <__alt_data_end+0xf402403c>
   241e0:	9809883a 	mov	r4,r19
   241e4:	d9800015 	stw	r6,0(sp)
   241e8:	00272580 	call	27258 <__clzsi2>
   241ec:	10fffec4 	addi	r3,r2,-5
   241f0:	10801d84 	addi	r2,r2,118
   241f4:	98e6983a 	sll	r19,r19,r3
   241f8:	0085c83a 	sub	r2,zero,r2
   241fc:	0007883a 	mov	r3,zero
   24200:	d9800017 	ldw	r6,0(sp)
   24204:	003f9b06 	br	24074 <__alt_data_end+0xf4024074>
   24208:	01002034 	movhi	r4,128
   2420c:	0029883a 	mov	r20,zero
   24210:	213fffc4 	addi	r4,r4,-1
   24214:	00ffffc4 	movi	r3,-1
   24218:	003fc006 	br	2411c <__alt_data_end+0xf402411c>
   2421c:	9027883a 	mov	r19,r18
   24220:	b807883a 	mov	r3,r23
   24224:	003fb406 	br	240f8 <__alt_data_end+0xf40240f8>
   24228:	9027883a 	mov	r19,r18
   2422c:	e02b883a 	mov	r21,fp
   24230:	b807883a 	mov	r3,r23
   24234:	003fb006 	br	240f8 <__alt_data_end+0xf40240f8>
   24238:	9004d43a 	srli	r2,r18,16
   2423c:	9810d43a 	srli	r8,r19,16
   24240:	94bfffcc 	andi	r18,r18,65535
   24244:	993fffcc 	andi	r4,r19,65535
   24248:	910d383a 	mul	r6,r18,r4
   2424c:	20a7383a 	mul	r19,r4,r2
   24250:	9225383a 	mul	r18,r18,r8
   24254:	3006d43a 	srli	r3,r6,16
   24258:	1211383a 	mul	r8,r2,r8
   2425c:	94e5883a 	add	r18,r18,r19
   24260:	1c87883a 	add	r3,r3,r18
   24264:	1cc0022e 	bgeu	r3,r19,24270 <__mulsf3+0x2a0>
   24268:	00800074 	movhi	r2,1
   2426c:	4091883a 	add	r8,r8,r2
   24270:	1804943a 	slli	r2,r3,16
   24274:	31bfffcc 	andi	r6,r6,65535
   24278:	1806d43a 	srli	r3,r3,16
   2427c:	1185883a 	add	r2,r2,r6
   24280:	102691ba 	slli	r19,r2,6
   24284:	1a07883a 	add	r3,r3,r8
   24288:	1004d6ba 	srli	r2,r2,26
   2428c:	180891ba 	slli	r4,r3,6
   24290:	9826c03a 	cmpne	r19,r19,zero
   24294:	9884b03a 	or	r2,r19,r2
   24298:	1126b03a 	or	r19,r2,r4
   2429c:	9882002c 	andhi	r2,r19,2048
   242a0:	10000426 	beq	r2,zero,242b4 <__mulsf3+0x2e4>
   242a4:	9804d07a 	srli	r2,r19,1
   242a8:	9900004c 	andi	r4,r19,1
   242ac:	3821883a 	mov	r16,r7
   242b0:	1126b03a 	or	r19,r2,r4
   242b4:	80c01fc4 	addi	r3,r16,127
   242b8:	00c0210e 	bge	zero,r3,24340 <__mulsf3+0x370>
   242bc:	988001cc 	andi	r2,r19,7
   242c0:	10000426 	beq	r2,zero,242d4 <__mulsf3+0x304>
   242c4:	988003cc 	andi	r2,r19,15
   242c8:	01000104 	movi	r4,4
   242cc:	11000126 	beq	r2,r4,242d4 <__mulsf3+0x304>
   242d0:	9927883a 	add	r19,r19,r4
   242d4:	9882002c 	andhi	r2,r19,2048
   242d8:	10000426 	beq	r2,zero,242ec <__mulsf3+0x31c>
   242dc:	00be0034 	movhi	r2,63488
   242e0:	10bfffc4 	addi	r2,r2,-1
   242e4:	80c02004 	addi	r3,r16,128
   242e8:	98a6703a 	and	r19,r19,r2
   242ec:	00803f84 	movi	r2,254
   242f0:	10ffa916 	blt	r2,r3,24198 <__alt_data_end+0xf4024198>
   242f4:	980891ba 	slli	r4,r19,6
   242f8:	a829883a 	mov	r20,r21
   242fc:	2008d27a 	srli	r4,r4,9
   24300:	003f8606 	br	2411c <__alt_data_end+0xf402411c>
   24304:	9080102c 	andhi	r2,r18,64
   24308:	10000826 	beq	r2,zero,2432c <__mulsf3+0x35c>
   2430c:	9880102c 	andhi	r2,r19,64
   24310:	1000061e 	bne	r2,zero,2432c <__mulsf3+0x35c>
   24314:	00802034 	movhi	r2,128
   24318:	99001034 	orhi	r4,r19,64
   2431c:	10bfffc4 	addi	r2,r2,-1
   24320:	b029883a 	mov	r20,r22
   24324:	2088703a 	and	r4,r4,r2
   24328:	003fba06 	br	24214 <__alt_data_end+0xf4024214>
   2432c:	00802034 	movhi	r2,128
   24330:	91001034 	orhi	r4,r18,64
   24334:	10bfffc4 	addi	r2,r2,-1
   24338:	2088703a 	and	r4,r4,r2
   2433c:	003fb506 	br	24214 <__alt_data_end+0xf4024214>
   24340:	00800044 	movi	r2,1
   24344:	10c7c83a 	sub	r3,r2,r3
   24348:	008006c4 	movi	r2,27
   2434c:	10ff7016 	blt	r2,r3,24110 <__alt_data_end+0xf4024110>
   24350:	00800804 	movi	r2,32
   24354:	10c5c83a 	sub	r2,r2,r3
   24358:	9884983a 	sll	r2,r19,r2
   2435c:	98c6d83a 	srl	r3,r19,r3
   24360:	1004c03a 	cmpne	r2,r2,zero
   24364:	1884b03a 	or	r2,r3,r2
   24368:	10c001cc 	andi	r3,r2,7
   2436c:	18000426 	beq	r3,zero,24380 <__mulsf3+0x3b0>
   24370:	10c003cc 	andi	r3,r2,15
   24374:	01000104 	movi	r4,4
   24378:	19000126 	beq	r3,r4,24380 <__mulsf3+0x3b0>
   2437c:	1105883a 	add	r2,r2,r4
   24380:	10c1002c 	andhi	r3,r2,1024
   24384:	18000626 	beq	r3,zero,243a0 <__mulsf3+0x3d0>
   24388:	a829883a 	mov	r20,r21
   2438c:	00c00044 	movi	r3,1
   24390:	0009883a 	mov	r4,zero
   24394:	003f6106 	br	2411c <__alt_data_end+0xf402411c>
   24398:	3821883a 	mov	r16,r7
   2439c:	003fc506 	br	242b4 <__alt_data_end+0xf40242b4>
   243a0:	100491ba 	slli	r2,r2,6
   243a4:	a829883a 	mov	r20,r21
   243a8:	0007883a 	mov	r3,zero
   243ac:	1008d27a 	srli	r4,r2,9
   243b0:	003f5a06 	br	2411c <__alt_data_end+0xf402411c>
   243b4:	00802034 	movhi	r2,128
   243b8:	99001034 	orhi	r4,r19,64
   243bc:	10bfffc4 	addi	r2,r2,-1
   243c0:	a829883a 	mov	r20,r21
   243c4:	2088703a 	and	r4,r4,r2
   243c8:	003f9206 	br	24214 <__alt_data_end+0xf4024214>

000243cc <__subsf3>:
   243cc:	defffc04 	addi	sp,sp,-16
   243d0:	280cd5fa 	srli	r6,r5,23
   243d4:	dc000015 	stw	r16,0(sp)
   243d8:	01c02034 	movhi	r7,128
   243dc:	2020d5fa 	srli	r16,r4,23
   243e0:	39ffffc4 	addi	r7,r7,-1
   243e4:	3906703a 	and	r3,r7,r4
   243e8:	dc400115 	stw	r17,4(sp)
   243ec:	394e703a 	and	r7,r7,r5
   243f0:	2022d7fa 	srli	r17,r4,31
   243f4:	dfc00315 	stw	ra,12(sp)
   243f8:	dc800215 	stw	r18,8(sp)
   243fc:	31803fcc 	andi	r6,r6,255
   24400:	01003fc4 	movi	r4,255
   24404:	84003fcc 	andi	r16,r16,255
   24408:	180690fa 	slli	r3,r3,3
   2440c:	2804d7fa 	srli	r2,r5,31
   24410:	380e90fa 	slli	r7,r7,3
   24414:	31006d26 	beq	r6,r4,245cc <__subsf3+0x200>
   24418:	1080005c 	xori	r2,r2,1
   2441c:	8189c83a 	sub	r4,r16,r6
   24420:	14404f26 	beq	r2,r17,24560 <__subsf3+0x194>
   24424:	0100770e 	bge	zero,r4,24604 <__subsf3+0x238>
   24428:	30001e1e 	bne	r6,zero,244a4 <__subsf3+0xd8>
   2442c:	38006a1e 	bne	r7,zero,245d8 <__subsf3+0x20c>
   24430:	188001cc 	andi	r2,r3,7
   24434:	10000426 	beq	r2,zero,24448 <__subsf3+0x7c>
   24438:	188003cc 	andi	r2,r3,15
   2443c:	01000104 	movi	r4,4
   24440:	11000126 	beq	r2,r4,24448 <__subsf3+0x7c>
   24444:	1907883a 	add	r3,r3,r4
   24448:	1881002c 	andhi	r2,r3,1024
   2444c:	10003926 	beq	r2,zero,24534 <__subsf3+0x168>
   24450:	84000044 	addi	r16,r16,1
   24454:	00803fc4 	movi	r2,255
   24458:	80807526 	beq	r16,r2,24630 <__subsf3+0x264>
   2445c:	180691ba 	slli	r3,r3,6
   24460:	8880004c 	andi	r2,r17,1
   24464:	180ad27a 	srli	r5,r3,9
   24468:	84003fcc 	andi	r16,r16,255
   2446c:	800695fa 	slli	r3,r16,23
   24470:	10803fcc 	andi	r2,r2,255
   24474:	01002034 	movhi	r4,128
   24478:	213fffc4 	addi	r4,r4,-1
   2447c:	100497fa 	slli	r2,r2,31
   24480:	2920703a 	and	r16,r5,r4
   24484:	80e0b03a 	or	r16,r16,r3
   24488:	8084b03a 	or	r2,r16,r2
   2448c:	dfc00317 	ldw	ra,12(sp)
   24490:	dc800217 	ldw	r18,8(sp)
   24494:	dc400117 	ldw	r17,4(sp)
   24498:	dc000017 	ldw	r16,0(sp)
   2449c:	dec00404 	addi	sp,sp,16
   244a0:	f800283a 	ret
   244a4:	00803fc4 	movi	r2,255
   244a8:	80bfe126 	beq	r16,r2,24430 <__alt_data_end+0xf4024430>
   244ac:	39c10034 	orhi	r7,r7,1024
   244b0:	008006c4 	movi	r2,27
   244b4:	11007416 	blt	r2,r4,24688 <__subsf3+0x2bc>
   244b8:	00800804 	movi	r2,32
   244bc:	1105c83a 	sub	r2,r2,r4
   244c0:	3884983a 	sll	r2,r7,r2
   244c4:	390ed83a 	srl	r7,r7,r4
   244c8:	1008c03a 	cmpne	r4,r2,zero
   244cc:	390eb03a 	or	r7,r7,r4
   244d0:	19c7c83a 	sub	r3,r3,r7
   244d4:	1881002c 	andhi	r2,r3,1024
   244d8:	10001426 	beq	r2,zero,2452c <__subsf3+0x160>
   244dc:	04810034 	movhi	r18,1024
   244e0:	94bfffc4 	addi	r18,r18,-1
   244e4:	1ca4703a 	and	r18,r3,r18
   244e8:	9009883a 	mov	r4,r18
   244ec:	00272580 	call	27258 <__clzsi2>
   244f0:	10bffec4 	addi	r2,r2,-5
   244f4:	90a4983a 	sll	r18,r18,r2
   244f8:	14005116 	blt	r2,r16,24640 <__subsf3+0x274>
   244fc:	1405c83a 	sub	r2,r2,r16
   24500:	10c00044 	addi	r3,r2,1
   24504:	00800804 	movi	r2,32
   24508:	10c5c83a 	sub	r2,r2,r3
   2450c:	9084983a 	sll	r2,r18,r2
   24510:	90e4d83a 	srl	r18,r18,r3
   24514:	0021883a 	mov	r16,zero
   24518:	1006c03a 	cmpne	r3,r2,zero
   2451c:	90c6b03a 	or	r3,r18,r3
   24520:	003fc306 	br	24430 <__alt_data_end+0xf4024430>
   24524:	2000e026 	beq	r4,zero,248a8 <__subsf3+0x4dc>
   24528:	2007883a 	mov	r3,r4
   2452c:	188001cc 	andi	r2,r3,7
   24530:	103fc11e 	bne	r2,zero,24438 <__alt_data_end+0xf4024438>
   24534:	180ad0fa 	srli	r5,r3,3
   24538:	00c03fc4 	movi	r3,255
   2453c:	8880004c 	andi	r2,r17,1
   24540:	80c0031e 	bne	r16,r3,24550 <__subsf3+0x184>
   24544:	28006d26 	beq	r5,zero,246fc <__subsf3+0x330>
   24548:	29401034 	orhi	r5,r5,64
   2454c:	043fffc4 	movi	r16,-1
   24550:	00c02034 	movhi	r3,128
   24554:	18ffffc4 	addi	r3,r3,-1
   24558:	28ca703a 	and	r5,r5,r3
   2455c:	003fc206 	br	24468 <__alt_data_end+0xf4024468>
   24560:	01003c0e 	bge	zero,r4,24654 <__subsf3+0x288>
   24564:	30002126 	beq	r6,zero,245ec <__subsf3+0x220>
   24568:	01403fc4 	movi	r5,255
   2456c:	817fb026 	beq	r16,r5,24430 <__alt_data_end+0xf4024430>
   24570:	39c10034 	orhi	r7,r7,1024
   24574:	014006c4 	movi	r5,27
   24578:	29007416 	blt	r5,r4,2474c <__subsf3+0x380>
   2457c:	01400804 	movi	r5,32
   24580:	290bc83a 	sub	r5,r5,r4
   24584:	394a983a 	sll	r5,r7,r5
   24588:	390ed83a 	srl	r7,r7,r4
   2458c:	2808c03a 	cmpne	r4,r5,zero
   24590:	390eb03a 	or	r7,r7,r4
   24594:	19c7883a 	add	r3,r3,r7
   24598:	1901002c 	andhi	r4,r3,1024
   2459c:	20003826 	beq	r4,zero,24680 <__subsf3+0x2b4>
   245a0:	84000044 	addi	r16,r16,1
   245a4:	01003fc4 	movi	r4,255
   245a8:	81005426 	beq	r16,r4,246fc <__subsf3+0x330>
   245ac:	1023883a 	mov	r17,r2
   245b0:	00bf0034 	movhi	r2,64512
   245b4:	10bfffc4 	addi	r2,r2,-1
   245b8:	1900004c 	andi	r4,r3,1
   245bc:	1886703a 	and	r3,r3,r2
   245c0:	1806d07a 	srli	r3,r3,1
   245c4:	1906b03a 	or	r3,r3,r4
   245c8:	003f9906 	br	24430 <__alt_data_end+0xf4024430>
   245cc:	383f9226 	beq	r7,zero,24418 <__alt_data_end+0xf4024418>
   245d0:	10803fcc 	andi	r2,r2,255
   245d4:	003f9106 	br	2441c <__alt_data_end+0xf402441c>
   245d8:	213fffc4 	addi	r4,r4,-1
   245dc:	203fbc26 	beq	r4,zero,244d0 <__alt_data_end+0xf40244d0>
   245e0:	00803fc4 	movi	r2,255
   245e4:	80bfb21e 	bne	r16,r2,244b0 <__alt_data_end+0xf40244b0>
   245e8:	003f9106 	br	24430 <__alt_data_end+0xf4024430>
   245ec:	383f9026 	beq	r7,zero,24430 <__alt_data_end+0xf4024430>
   245f0:	213fffc4 	addi	r4,r4,-1
   245f4:	203fe726 	beq	r4,zero,24594 <__alt_data_end+0xf4024594>
   245f8:	01403fc4 	movi	r5,255
   245fc:	817fdd1e 	bne	r16,r5,24574 <__alt_data_end+0xf4024574>
   24600:	003f8b06 	br	24430 <__alt_data_end+0xf4024430>
   24604:	2000221e 	bne	r4,zero,24690 <__subsf3+0x2c4>
   24608:	81000044 	addi	r4,r16,1
   2460c:	21003fcc 	andi	r4,r4,255
   24610:	01400044 	movi	r5,1
   24614:	2900470e 	bge	r5,r4,24734 <__subsf3+0x368>
   24618:	19e5c83a 	sub	r18,r3,r7
   2461c:	9141002c 	andhi	r5,r18,1024
   24620:	28002d26 	beq	r5,zero,246d8 <__subsf3+0x30c>
   24624:	38e5c83a 	sub	r18,r7,r3
   24628:	1023883a 	mov	r17,r2
   2462c:	003fae06 	br	244e8 <__alt_data_end+0xf40244e8>
   24630:	8880004c 	andi	r2,r17,1
   24634:	043fffc4 	movi	r16,-1
   24638:	000b883a 	mov	r5,zero
   2463c:	003f8a06 	br	24468 <__alt_data_end+0xf4024468>
   24640:	00ff0034 	movhi	r3,64512
   24644:	18ffffc4 	addi	r3,r3,-1
   24648:	80a1c83a 	sub	r16,r16,r2
   2464c:	90c6703a 	and	r3,r18,r3
   24650:	003f7706 	br	24430 <__alt_data_end+0xf4024430>
   24654:	2000431e 	bne	r4,zero,24764 <__subsf3+0x398>
   24658:	81000044 	addi	r4,r16,1
   2465c:	21803fcc 	andi	r6,r4,255
   24660:	01400044 	movi	r5,1
   24664:	2980280e 	bge	r5,r6,24708 <__subsf3+0x33c>
   24668:	01403fc4 	movi	r5,255
   2466c:	21402326 	beq	r4,r5,246fc <__subsf3+0x330>
   24670:	19c7883a 	add	r3,r3,r7
   24674:	1806d07a 	srli	r3,r3,1
   24678:	2021883a 	mov	r16,r4
   2467c:	003f6c06 	br	24430 <__alt_data_end+0xf4024430>
   24680:	1023883a 	mov	r17,r2
   24684:	003fa906 	br	2452c <__alt_data_end+0xf402452c>
   24688:	01c00044 	movi	r7,1
   2468c:	003f9006 	br	244d0 <__alt_data_end+0xf40244d0>
   24690:	8000151e 	bne	r16,zero,246e8 <__subsf3+0x31c>
   24694:	18002f26 	beq	r3,zero,24754 <__subsf3+0x388>
   24698:	0108303a 	nor	r4,zero,r4
   2469c:	20000a26 	beq	r4,zero,246c8 <__subsf3+0x2fc>
   246a0:	01403fc4 	movi	r5,255
   246a4:	31402b26 	beq	r6,r5,24754 <__subsf3+0x388>
   246a8:	014006c4 	movi	r5,27
   246ac:	29006e16 	blt	r5,r4,24868 <__subsf3+0x49c>
   246b0:	01400804 	movi	r5,32
   246b4:	290bc83a 	sub	r5,r5,r4
   246b8:	194a983a 	sll	r5,r3,r5
   246bc:	1908d83a 	srl	r4,r3,r4
   246c0:	2806c03a 	cmpne	r3,r5,zero
   246c4:	20c6b03a 	or	r3,r4,r3
   246c8:	38c7c83a 	sub	r3,r7,r3
   246cc:	3021883a 	mov	r16,r6
   246d0:	1023883a 	mov	r17,r2
   246d4:	003f7f06 	br	244d4 <__alt_data_end+0xf40244d4>
   246d8:	903f831e 	bne	r18,zero,244e8 <__alt_data_end+0xf40244e8>
   246dc:	0005883a 	mov	r2,zero
   246e0:	0021883a 	mov	r16,zero
   246e4:	003f9a06 	br	24550 <__alt_data_end+0xf4024550>
   246e8:	01403fc4 	movi	r5,255
   246ec:	31401926 	beq	r6,r5,24754 <__subsf3+0x388>
   246f0:	0109c83a 	sub	r4,zero,r4
   246f4:	18c10034 	orhi	r3,r3,1024
   246f8:	003feb06 	br	246a8 <__alt_data_end+0xf40246a8>
   246fc:	043fffc4 	movi	r16,-1
   24700:	000b883a 	mov	r5,zero
   24704:	003f5806 	br	24468 <__alt_data_end+0xf4024468>
   24708:	8000481e 	bne	r16,zero,2482c <__subsf3+0x460>
   2470c:	18006226 	beq	r3,zero,24898 <__subsf3+0x4cc>
   24710:	383f4726 	beq	r7,zero,24430 <__alt_data_end+0xf4024430>
   24714:	19c7883a 	add	r3,r3,r7
   24718:	1881002c 	andhi	r2,r3,1024
   2471c:	103f8326 	beq	r2,zero,2452c <__alt_data_end+0xf402452c>
   24720:	00bf0034 	movhi	r2,64512
   24724:	10bfffc4 	addi	r2,r2,-1
   24728:	2821883a 	mov	r16,r5
   2472c:	1886703a 	and	r3,r3,r2
   24730:	003f3f06 	br	24430 <__alt_data_end+0xf4024430>
   24734:	80001c1e 	bne	r16,zero,247a8 <__subsf3+0x3dc>
   24738:	1800261e 	bne	r3,zero,247d4 <__subsf3+0x408>
   2473c:	38004c26 	beq	r7,zero,24870 <__subsf3+0x4a4>
   24740:	3807883a 	mov	r3,r7
   24744:	1023883a 	mov	r17,r2
   24748:	003f3906 	br	24430 <__alt_data_end+0xf4024430>
   2474c:	01c00044 	movi	r7,1
   24750:	003f9006 	br	24594 <__alt_data_end+0xf4024594>
   24754:	3807883a 	mov	r3,r7
   24758:	3021883a 	mov	r16,r6
   2475c:	1023883a 	mov	r17,r2
   24760:	003f3306 	br	24430 <__alt_data_end+0xf4024430>
   24764:	8000161e 	bne	r16,zero,247c0 <__subsf3+0x3f4>
   24768:	18002d26 	beq	r3,zero,24820 <__subsf3+0x454>
   2476c:	0108303a 	nor	r4,zero,r4
   24770:	20000a26 	beq	r4,zero,2479c <__subsf3+0x3d0>
   24774:	01403fc4 	movi	r5,255
   24778:	31402926 	beq	r6,r5,24820 <__subsf3+0x454>
   2477c:	014006c4 	movi	r5,27
   24780:	29004716 	blt	r5,r4,248a0 <__subsf3+0x4d4>
   24784:	01400804 	movi	r5,32
   24788:	290bc83a 	sub	r5,r5,r4
   2478c:	194a983a 	sll	r5,r3,r5
   24790:	1908d83a 	srl	r4,r3,r4
   24794:	2806c03a 	cmpne	r3,r5,zero
   24798:	20c6b03a 	or	r3,r4,r3
   2479c:	19c7883a 	add	r3,r3,r7
   247a0:	3021883a 	mov	r16,r6
   247a4:	003f7c06 	br	24598 <__alt_data_end+0xf4024598>
   247a8:	1800111e 	bne	r3,zero,247f0 <__subsf3+0x424>
   247ac:	38003326 	beq	r7,zero,2487c <__subsf3+0x4b0>
   247b0:	3807883a 	mov	r3,r7
   247b4:	1023883a 	mov	r17,r2
   247b8:	04003fc4 	movi	r16,255
   247bc:	003f1c06 	br	24430 <__alt_data_end+0xf4024430>
   247c0:	01403fc4 	movi	r5,255
   247c4:	31401626 	beq	r6,r5,24820 <__subsf3+0x454>
   247c8:	0109c83a 	sub	r4,zero,r4
   247cc:	18c10034 	orhi	r3,r3,1024
   247d0:	003fea06 	br	2477c <__alt_data_end+0xf402477c>
   247d4:	383f1626 	beq	r7,zero,24430 <__alt_data_end+0xf4024430>
   247d8:	19c9c83a 	sub	r4,r3,r7
   247dc:	2141002c 	andhi	r5,r4,1024
   247e0:	283f5026 	beq	r5,zero,24524 <__alt_data_end+0xf4024524>
   247e4:	38c7c83a 	sub	r3,r7,r3
   247e8:	1023883a 	mov	r17,r2
   247ec:	003f1006 	br	24430 <__alt_data_end+0xf4024430>
   247f0:	38001b26 	beq	r7,zero,24860 <__subsf3+0x494>
   247f4:	1806d0fa 	srli	r3,r3,3
   247f8:	1900102c 	andhi	r4,r3,64
   247fc:	20000526 	beq	r4,zero,24814 <__subsf3+0x448>
   24800:	380ed0fa 	srli	r7,r7,3
   24804:	3900102c 	andhi	r4,r7,64
   24808:	2000021e 	bne	r4,zero,24814 <__subsf3+0x448>
   2480c:	3807883a 	mov	r3,r7
   24810:	1023883a 	mov	r17,r2
   24814:	180690fa 	slli	r3,r3,3
   24818:	04003fc4 	movi	r16,255
   2481c:	003f0406 	br	24430 <__alt_data_end+0xf4024430>
   24820:	3807883a 	mov	r3,r7
   24824:	3021883a 	mov	r16,r6
   24828:	003f0106 	br	24430 <__alt_data_end+0xf4024430>
   2482c:	18001726 	beq	r3,zero,2488c <__subsf3+0x4c0>
   24830:	38000b26 	beq	r7,zero,24860 <__subsf3+0x494>
   24834:	1806d0fa 	srli	r3,r3,3
   24838:	1900102c 	andhi	r4,r3,64
   2483c:	20000426 	beq	r4,zero,24850 <__subsf3+0x484>
   24840:	380ed0fa 	srli	r7,r7,3
   24844:	3900102c 	andhi	r4,r7,64
   24848:	2000011e 	bne	r4,zero,24850 <__subsf3+0x484>
   2484c:	3807883a 	mov	r3,r7
   24850:	180690fa 	slli	r3,r3,3
   24854:	1023883a 	mov	r17,r2
   24858:	04003fc4 	movi	r16,255
   2485c:	003ef406 	br	24430 <__alt_data_end+0xf4024430>
   24860:	04003fc4 	movi	r16,255
   24864:	003ef206 	br	24430 <__alt_data_end+0xf4024430>
   24868:	00c00044 	movi	r3,1
   2486c:	003f9606 	br	246c8 <__alt_data_end+0xf40246c8>
   24870:	000b883a 	mov	r5,zero
   24874:	0005883a 	mov	r2,zero
   24878:	003f3506 	br	24550 <__alt_data_end+0xf4024550>
   2487c:	01402034 	movhi	r5,128
   24880:	297fffc4 	addi	r5,r5,-1
   24884:	0005883a 	mov	r2,zero
   24888:	003f2f06 	br	24548 <__alt_data_end+0xf4024548>
   2488c:	3807883a 	mov	r3,r7
   24890:	04003fc4 	movi	r16,255
   24894:	003ee606 	br	24430 <__alt_data_end+0xf4024430>
   24898:	3807883a 	mov	r3,r7
   2489c:	003ee406 	br	24430 <__alt_data_end+0xf4024430>
   248a0:	00c00044 	movi	r3,1
   248a4:	003fbd06 	br	2479c <__alt_data_end+0xf402479c>
   248a8:	0005883a 	mov	r2,zero
   248ac:	003f2806 	br	24550 <__alt_data_end+0xf4024550>

000248b0 <__fixsfsi>:
   248b0:	200ad5fa 	srli	r5,r4,23
   248b4:	00c02034 	movhi	r3,128
   248b8:	18ffffc4 	addi	r3,r3,-1
   248bc:	29403fcc 	andi	r5,r5,255
   248c0:	00801f84 	movi	r2,126
   248c4:	1906703a 	and	r3,r3,r4
   248c8:	2008d7fa 	srli	r4,r4,31
   248cc:	11400e0e 	bge	r2,r5,24908 <__fixsfsi+0x58>
   248d0:	00802744 	movi	r2,157
   248d4:	11400816 	blt	r2,r5,248f8 <__fixsfsi+0x48>
   248d8:	00802544 	movi	r2,149
   248dc:	18c02034 	orhi	r3,r3,128
   248e0:	11400b0e 	bge	r2,r5,24910 <__fixsfsi+0x60>
   248e4:	28bfda84 	addi	r2,r5,-150
   248e8:	1884983a 	sll	r2,r3,r2
   248ec:	20000726 	beq	r4,zero,2490c <__fixsfsi+0x5c>
   248f0:	0085c83a 	sub	r2,zero,r2
   248f4:	f800283a 	ret
   248f8:	00a00034 	movhi	r2,32768
   248fc:	10bfffc4 	addi	r2,r2,-1
   24900:	2085883a 	add	r2,r4,r2
   24904:	f800283a 	ret
   24908:	0005883a 	mov	r2,zero
   2490c:	f800283a 	ret
   24910:	00802584 	movi	r2,150
   24914:	1145c83a 	sub	r2,r2,r5
   24918:	1884d83a 	srl	r2,r3,r2
   2491c:	003ff306 	br	248ec <__alt_data_end+0xf40248ec>

00024920 <__floatsisf>:
   24920:	defffd04 	addi	sp,sp,-12
   24924:	dfc00215 	stw	ra,8(sp)
   24928:	dc400115 	stw	r17,4(sp)
   2492c:	dc000015 	stw	r16,0(sp)
   24930:	20003526 	beq	r4,zero,24a08 <__floatsisf+0xe8>
   24934:	2021883a 	mov	r16,r4
   24938:	2022d7fa 	srli	r17,r4,31
   2493c:	20003616 	blt	r4,zero,24a18 <__floatsisf+0xf8>
   24940:	8009883a 	mov	r4,r16
   24944:	00272580 	call	27258 <__clzsi2>
   24948:	00c02784 	movi	r3,158
   2494c:	1887c83a 	sub	r3,r3,r2
   24950:	01002584 	movi	r4,150
   24954:	20c01416 	blt	r4,r3,249a8 <__floatsisf+0x88>
   24958:	20c9c83a 	sub	r4,r4,r3
   2495c:	8120983a 	sll	r16,r16,r4
   24960:	00802034 	movhi	r2,128
   24964:	10bfffc4 	addi	r2,r2,-1
   24968:	8809883a 	mov	r4,r17
   2496c:	80a0703a 	and	r16,r16,r2
   24970:	18803fcc 	andi	r2,r3,255
   24974:	100695fa 	slli	r3,r2,23
   24978:	20803fcc 	andi	r2,r4,255
   2497c:	100897fa 	slli	r4,r2,31
   24980:	00802034 	movhi	r2,128
   24984:	10bfffc4 	addi	r2,r2,-1
   24988:	8084703a 	and	r2,r16,r2
   2498c:	10c4b03a 	or	r2,r2,r3
   24990:	1104b03a 	or	r2,r2,r4
   24994:	dfc00217 	ldw	ra,8(sp)
   24998:	dc400117 	ldw	r17,4(sp)
   2499c:	dc000017 	ldw	r16,0(sp)
   249a0:	dec00304 	addi	sp,sp,12
   249a4:	f800283a 	ret
   249a8:	01002644 	movi	r4,153
   249ac:	20c01c16 	blt	r4,r3,24a20 <__floatsisf+0x100>
   249b0:	20c9c83a 	sub	r4,r4,r3
   249b4:	8120983a 	sll	r16,r16,r4
   249b8:	013f0034 	movhi	r4,64512
   249bc:	213fffc4 	addi	r4,r4,-1
   249c0:	814001cc 	andi	r5,r16,7
   249c4:	8108703a 	and	r4,r16,r4
   249c8:	28000426 	beq	r5,zero,249dc <__floatsisf+0xbc>
   249cc:	840003cc 	andi	r16,r16,15
   249d0:	01400104 	movi	r5,4
   249d4:	81400126 	beq	r16,r5,249dc <__floatsisf+0xbc>
   249d8:	2149883a 	add	r4,r4,r5
   249dc:	2141002c 	andhi	r5,r4,1024
   249e0:	28000526 	beq	r5,zero,249f8 <__floatsisf+0xd8>
   249e4:	00c027c4 	movi	r3,159
   249e8:	1887c83a 	sub	r3,r3,r2
   249ec:	00bf0034 	movhi	r2,64512
   249f0:	10bfffc4 	addi	r2,r2,-1
   249f4:	2088703a 	and	r4,r4,r2
   249f8:	202091ba 	slli	r16,r4,6
   249fc:	8809883a 	mov	r4,r17
   24a00:	8020d27a 	srli	r16,r16,9
   24a04:	003fda06 	br	24970 <__alt_data_end+0xf4024970>
   24a08:	0009883a 	mov	r4,zero
   24a0c:	0007883a 	mov	r3,zero
   24a10:	0021883a 	mov	r16,zero
   24a14:	003fd606 	br	24970 <__alt_data_end+0xf4024970>
   24a18:	0121c83a 	sub	r16,zero,r4
   24a1c:	003fc806 	br	24940 <__alt_data_end+0xf4024940>
   24a20:	01002e44 	movi	r4,185
   24a24:	20c9c83a 	sub	r4,r4,r3
   24a28:	01400144 	movi	r5,5
   24a2c:	8108983a 	sll	r4,r16,r4
   24a30:	288bc83a 	sub	r5,r5,r2
   24a34:	8160d83a 	srl	r16,r16,r5
   24a38:	2008c03a 	cmpne	r4,r4,zero
   24a3c:	8120b03a 	or	r16,r16,r4
   24a40:	003fdd06 	br	249b8 <__alt_data_end+0xf40249b8>

00024a44 <__adddf3>:
   24a44:	02c00434 	movhi	r11,16
   24a48:	5affffc4 	addi	r11,r11,-1
   24a4c:	2806d7fa 	srli	r3,r5,31
   24a50:	2ad4703a 	and	r10,r5,r11
   24a54:	3ad2703a 	and	r9,r7,r11
   24a58:	3804d53a 	srli	r2,r7,20
   24a5c:	3018d77a 	srli	r12,r6,29
   24a60:	280ad53a 	srli	r5,r5,20
   24a64:	501490fa 	slli	r10,r10,3
   24a68:	2010d77a 	srli	r8,r4,29
   24a6c:	481290fa 	slli	r9,r9,3
   24a70:	380ed7fa 	srli	r7,r7,31
   24a74:	defffb04 	addi	sp,sp,-20
   24a78:	dc800215 	stw	r18,8(sp)
   24a7c:	dc400115 	stw	r17,4(sp)
   24a80:	dc000015 	stw	r16,0(sp)
   24a84:	dfc00415 	stw	ra,16(sp)
   24a88:	dcc00315 	stw	r19,12(sp)
   24a8c:	1c803fcc 	andi	r18,r3,255
   24a90:	2c01ffcc 	andi	r16,r5,2047
   24a94:	5210b03a 	or	r8,r10,r8
   24a98:	202290fa 	slli	r17,r4,3
   24a9c:	1081ffcc 	andi	r2,r2,2047
   24aa0:	4b12b03a 	or	r9,r9,r12
   24aa4:	300c90fa 	slli	r6,r6,3
   24aa8:	91c07526 	beq	r18,r7,24c80 <__adddf3+0x23c>
   24aac:	8087c83a 	sub	r3,r16,r2
   24ab0:	00c0ab0e 	bge	zero,r3,24d60 <__adddf3+0x31c>
   24ab4:	10002a1e 	bne	r2,zero,24b60 <__adddf3+0x11c>
   24ab8:	4984b03a 	or	r2,r9,r6
   24abc:	1000961e 	bne	r2,zero,24d18 <__adddf3+0x2d4>
   24ac0:	888001cc 	andi	r2,r17,7
   24ac4:	10000726 	beq	r2,zero,24ae4 <__adddf3+0xa0>
   24ac8:	888003cc 	andi	r2,r17,15
   24acc:	00c00104 	movi	r3,4
   24ad0:	10c00426 	beq	r2,r3,24ae4 <__adddf3+0xa0>
   24ad4:	88c7883a 	add	r3,r17,r3
   24ad8:	1c63803a 	cmpltu	r17,r3,r17
   24adc:	4451883a 	add	r8,r8,r17
   24ae0:	1823883a 	mov	r17,r3
   24ae4:	4080202c 	andhi	r2,r8,128
   24ae8:	10005926 	beq	r2,zero,24c50 <__adddf3+0x20c>
   24aec:	84000044 	addi	r16,r16,1
   24af0:	0081ffc4 	movi	r2,2047
   24af4:	8080ba26 	beq	r16,r2,24de0 <__adddf3+0x39c>
   24af8:	00bfe034 	movhi	r2,65408
   24afc:	10bfffc4 	addi	r2,r2,-1
   24b00:	4090703a 	and	r8,r8,r2
   24b04:	4004977a 	slli	r2,r8,29
   24b08:	4010927a 	slli	r8,r8,9
   24b0c:	8822d0fa 	srli	r17,r17,3
   24b10:	8401ffcc 	andi	r16,r16,2047
   24b14:	4010d33a 	srli	r8,r8,12
   24b18:	9007883a 	mov	r3,r18
   24b1c:	1444b03a 	or	r2,r2,r17
   24b20:	8401ffcc 	andi	r16,r16,2047
   24b24:	8020953a 	slli	r16,r16,20
   24b28:	18c03fcc 	andi	r3,r3,255
   24b2c:	01000434 	movhi	r4,16
   24b30:	213fffc4 	addi	r4,r4,-1
   24b34:	180697fa 	slli	r3,r3,31
   24b38:	4110703a 	and	r8,r8,r4
   24b3c:	4410b03a 	or	r8,r8,r16
   24b40:	40c6b03a 	or	r3,r8,r3
   24b44:	dfc00417 	ldw	ra,16(sp)
   24b48:	dcc00317 	ldw	r19,12(sp)
   24b4c:	dc800217 	ldw	r18,8(sp)
   24b50:	dc400117 	ldw	r17,4(sp)
   24b54:	dc000017 	ldw	r16,0(sp)
   24b58:	dec00504 	addi	sp,sp,20
   24b5c:	f800283a 	ret
   24b60:	0081ffc4 	movi	r2,2047
   24b64:	80bfd626 	beq	r16,r2,24ac0 <__alt_data_end+0xf4024ac0>
   24b68:	4a402034 	orhi	r9,r9,128
   24b6c:	00800e04 	movi	r2,56
   24b70:	10c09f16 	blt	r2,r3,24df0 <__adddf3+0x3ac>
   24b74:	008007c4 	movi	r2,31
   24b78:	10c0c216 	blt	r2,r3,24e84 <__adddf3+0x440>
   24b7c:	00800804 	movi	r2,32
   24b80:	10c5c83a 	sub	r2,r2,r3
   24b84:	488a983a 	sll	r5,r9,r2
   24b88:	30c8d83a 	srl	r4,r6,r3
   24b8c:	3084983a 	sll	r2,r6,r2
   24b90:	48c6d83a 	srl	r3,r9,r3
   24b94:	290cb03a 	or	r6,r5,r4
   24b98:	1004c03a 	cmpne	r2,r2,zero
   24b9c:	308cb03a 	or	r6,r6,r2
   24ba0:	898dc83a 	sub	r6,r17,r6
   24ba4:	89a3803a 	cmpltu	r17,r17,r6
   24ba8:	40d1c83a 	sub	r8,r8,r3
   24bac:	4451c83a 	sub	r8,r8,r17
   24bb0:	3023883a 	mov	r17,r6
   24bb4:	4080202c 	andhi	r2,r8,128
   24bb8:	10002326 	beq	r2,zero,24c48 <__adddf3+0x204>
   24bbc:	04c02034 	movhi	r19,128
   24bc0:	9cffffc4 	addi	r19,r19,-1
   24bc4:	44e6703a 	and	r19,r8,r19
   24bc8:	98007626 	beq	r19,zero,24da4 <__adddf3+0x360>
   24bcc:	9809883a 	mov	r4,r19
   24bd0:	00272580 	call	27258 <__clzsi2>
   24bd4:	10fffe04 	addi	r3,r2,-8
   24bd8:	010007c4 	movi	r4,31
   24bdc:	20c07716 	blt	r4,r3,24dbc <__adddf3+0x378>
   24be0:	00800804 	movi	r2,32
   24be4:	10c5c83a 	sub	r2,r2,r3
   24be8:	8884d83a 	srl	r2,r17,r2
   24bec:	98d0983a 	sll	r8,r19,r3
   24bf0:	88e2983a 	sll	r17,r17,r3
   24bf4:	1204b03a 	or	r2,r2,r8
   24bf8:	1c007416 	blt	r3,r16,24dcc <__adddf3+0x388>
   24bfc:	1c21c83a 	sub	r16,r3,r16
   24c00:	82000044 	addi	r8,r16,1
   24c04:	00c007c4 	movi	r3,31
   24c08:	1a009116 	blt	r3,r8,24e50 <__adddf3+0x40c>
   24c0c:	00c00804 	movi	r3,32
   24c10:	1a07c83a 	sub	r3,r3,r8
   24c14:	8a08d83a 	srl	r4,r17,r8
   24c18:	88e2983a 	sll	r17,r17,r3
   24c1c:	10c6983a 	sll	r3,r2,r3
   24c20:	1210d83a 	srl	r8,r2,r8
   24c24:	8804c03a 	cmpne	r2,r17,zero
   24c28:	1906b03a 	or	r3,r3,r4
   24c2c:	18a2b03a 	or	r17,r3,r2
   24c30:	0021883a 	mov	r16,zero
   24c34:	003fa206 	br	24ac0 <__alt_data_end+0xf4024ac0>
   24c38:	1890b03a 	or	r8,r3,r2
   24c3c:	40017d26 	beq	r8,zero,25234 <__adddf3+0x7f0>
   24c40:	1011883a 	mov	r8,r2
   24c44:	1823883a 	mov	r17,r3
   24c48:	888001cc 	andi	r2,r17,7
   24c4c:	103f9e1e 	bne	r2,zero,24ac8 <__alt_data_end+0xf4024ac8>
   24c50:	4004977a 	slli	r2,r8,29
   24c54:	8822d0fa 	srli	r17,r17,3
   24c58:	4010d0fa 	srli	r8,r8,3
   24c5c:	9007883a 	mov	r3,r18
   24c60:	1444b03a 	or	r2,r2,r17
   24c64:	0101ffc4 	movi	r4,2047
   24c68:	81002426 	beq	r16,r4,24cfc <__adddf3+0x2b8>
   24c6c:	8120703a 	and	r16,r16,r4
   24c70:	01000434 	movhi	r4,16
   24c74:	213fffc4 	addi	r4,r4,-1
   24c78:	4110703a 	and	r8,r8,r4
   24c7c:	003fa806 	br	24b20 <__alt_data_end+0xf4024b20>
   24c80:	8089c83a 	sub	r4,r16,r2
   24c84:	01005e0e 	bge	zero,r4,24e00 <__adddf3+0x3bc>
   24c88:	10002b26 	beq	r2,zero,24d38 <__adddf3+0x2f4>
   24c8c:	0081ffc4 	movi	r2,2047
   24c90:	80bf8b26 	beq	r16,r2,24ac0 <__alt_data_end+0xf4024ac0>
   24c94:	4a402034 	orhi	r9,r9,128
   24c98:	00800e04 	movi	r2,56
   24c9c:	1100a40e 	bge	r2,r4,24f30 <__adddf3+0x4ec>
   24ca0:	498cb03a 	or	r6,r9,r6
   24ca4:	300ac03a 	cmpne	r5,r6,zero
   24ca8:	0013883a 	mov	r9,zero
   24cac:	2c4b883a 	add	r5,r5,r17
   24cb0:	2c63803a 	cmpltu	r17,r5,r17
   24cb4:	4a11883a 	add	r8,r9,r8
   24cb8:	8a11883a 	add	r8,r17,r8
   24cbc:	2823883a 	mov	r17,r5
   24cc0:	4080202c 	andhi	r2,r8,128
   24cc4:	103fe026 	beq	r2,zero,24c48 <__alt_data_end+0xf4024c48>
   24cc8:	84000044 	addi	r16,r16,1
   24ccc:	0081ffc4 	movi	r2,2047
   24cd0:	8080d226 	beq	r16,r2,2501c <__adddf3+0x5d8>
   24cd4:	00bfe034 	movhi	r2,65408
   24cd8:	10bfffc4 	addi	r2,r2,-1
   24cdc:	4090703a 	and	r8,r8,r2
   24ce0:	880ad07a 	srli	r5,r17,1
   24ce4:	400897fa 	slli	r4,r8,31
   24ce8:	88c0004c 	andi	r3,r17,1
   24cec:	28e2b03a 	or	r17,r5,r3
   24cf0:	4010d07a 	srli	r8,r8,1
   24cf4:	2462b03a 	or	r17,r4,r17
   24cf8:	003f7106 	br	24ac0 <__alt_data_end+0xf4024ac0>
   24cfc:	4088b03a 	or	r4,r8,r2
   24d00:	20014526 	beq	r4,zero,25218 <__adddf3+0x7d4>
   24d04:	01000434 	movhi	r4,16
   24d08:	42000234 	orhi	r8,r8,8
   24d0c:	213fffc4 	addi	r4,r4,-1
   24d10:	4110703a 	and	r8,r8,r4
   24d14:	003f8206 	br	24b20 <__alt_data_end+0xf4024b20>
   24d18:	18ffffc4 	addi	r3,r3,-1
   24d1c:	1800491e 	bne	r3,zero,24e44 <__adddf3+0x400>
   24d20:	898bc83a 	sub	r5,r17,r6
   24d24:	8963803a 	cmpltu	r17,r17,r5
   24d28:	4251c83a 	sub	r8,r8,r9
   24d2c:	4451c83a 	sub	r8,r8,r17
   24d30:	2823883a 	mov	r17,r5
   24d34:	003f9f06 	br	24bb4 <__alt_data_end+0xf4024bb4>
   24d38:	4984b03a 	or	r2,r9,r6
   24d3c:	103f6026 	beq	r2,zero,24ac0 <__alt_data_end+0xf4024ac0>
   24d40:	213fffc4 	addi	r4,r4,-1
   24d44:	2000931e 	bne	r4,zero,24f94 <__adddf3+0x550>
   24d48:	898d883a 	add	r6,r17,r6
   24d4c:	3463803a 	cmpltu	r17,r6,r17
   24d50:	4251883a 	add	r8,r8,r9
   24d54:	8a11883a 	add	r8,r17,r8
   24d58:	3023883a 	mov	r17,r6
   24d5c:	003fd806 	br	24cc0 <__alt_data_end+0xf4024cc0>
   24d60:	1800541e 	bne	r3,zero,24eb4 <__adddf3+0x470>
   24d64:	80800044 	addi	r2,r16,1
   24d68:	1081ffcc 	andi	r2,r2,2047
   24d6c:	00c00044 	movi	r3,1
   24d70:	1880a00e 	bge	r3,r2,24ff4 <__adddf3+0x5b0>
   24d74:	8989c83a 	sub	r4,r17,r6
   24d78:	8905803a 	cmpltu	r2,r17,r4
   24d7c:	4267c83a 	sub	r19,r8,r9
   24d80:	98a7c83a 	sub	r19,r19,r2
   24d84:	9880202c 	andhi	r2,r19,128
   24d88:	10006326 	beq	r2,zero,24f18 <__adddf3+0x4d4>
   24d8c:	3463c83a 	sub	r17,r6,r17
   24d90:	4a07c83a 	sub	r3,r9,r8
   24d94:	344d803a 	cmpltu	r6,r6,r17
   24d98:	19a7c83a 	sub	r19,r3,r6
   24d9c:	3825883a 	mov	r18,r7
   24da0:	983f8a1e 	bne	r19,zero,24bcc <__alt_data_end+0xf4024bcc>
   24da4:	8809883a 	mov	r4,r17
   24da8:	00272580 	call	27258 <__clzsi2>
   24dac:	10800804 	addi	r2,r2,32
   24db0:	10fffe04 	addi	r3,r2,-8
   24db4:	010007c4 	movi	r4,31
   24db8:	20ff890e 	bge	r4,r3,24be0 <__alt_data_end+0xf4024be0>
   24dbc:	10bff604 	addi	r2,r2,-40
   24dc0:	8884983a 	sll	r2,r17,r2
   24dc4:	0023883a 	mov	r17,zero
   24dc8:	1c3f8c0e 	bge	r3,r16,24bfc <__alt_data_end+0xf4024bfc>
   24dcc:	023fe034 	movhi	r8,65408
   24dd0:	423fffc4 	addi	r8,r8,-1
   24dd4:	80e1c83a 	sub	r16,r16,r3
   24dd8:	1210703a 	and	r8,r2,r8
   24ddc:	003f3806 	br	24ac0 <__alt_data_end+0xf4024ac0>
   24de0:	9007883a 	mov	r3,r18
   24de4:	0011883a 	mov	r8,zero
   24de8:	0005883a 	mov	r2,zero
   24dec:	003f4c06 	br	24b20 <__alt_data_end+0xf4024b20>
   24df0:	498cb03a 	or	r6,r9,r6
   24df4:	300cc03a 	cmpne	r6,r6,zero
   24df8:	0007883a 	mov	r3,zero
   24dfc:	003f6806 	br	24ba0 <__alt_data_end+0xf4024ba0>
   24e00:	20009c1e 	bne	r4,zero,25074 <__adddf3+0x630>
   24e04:	80800044 	addi	r2,r16,1
   24e08:	1141ffcc 	andi	r5,r2,2047
   24e0c:	01000044 	movi	r4,1
   24e10:	2140670e 	bge	r4,r5,24fb0 <__adddf3+0x56c>
   24e14:	0101ffc4 	movi	r4,2047
   24e18:	11007f26 	beq	r2,r4,25018 <__adddf3+0x5d4>
   24e1c:	898d883a 	add	r6,r17,r6
   24e20:	4247883a 	add	r3,r8,r9
   24e24:	3451803a 	cmpltu	r8,r6,r17
   24e28:	40d1883a 	add	r8,r8,r3
   24e2c:	402297fa 	slli	r17,r8,31
   24e30:	300cd07a 	srli	r6,r6,1
   24e34:	4010d07a 	srli	r8,r8,1
   24e38:	1021883a 	mov	r16,r2
   24e3c:	89a2b03a 	or	r17,r17,r6
   24e40:	003f1f06 	br	24ac0 <__alt_data_end+0xf4024ac0>
   24e44:	0081ffc4 	movi	r2,2047
   24e48:	80bf481e 	bne	r16,r2,24b6c <__alt_data_end+0xf4024b6c>
   24e4c:	003f1c06 	br	24ac0 <__alt_data_end+0xf4024ac0>
   24e50:	843ff844 	addi	r16,r16,-31
   24e54:	01000804 	movi	r4,32
   24e58:	1406d83a 	srl	r3,r2,r16
   24e5c:	41005026 	beq	r8,r4,24fa0 <__adddf3+0x55c>
   24e60:	01001004 	movi	r4,64
   24e64:	2211c83a 	sub	r8,r4,r8
   24e68:	1204983a 	sll	r2,r2,r8
   24e6c:	88a2b03a 	or	r17,r17,r2
   24e70:	8822c03a 	cmpne	r17,r17,zero
   24e74:	1c62b03a 	or	r17,r3,r17
   24e78:	0011883a 	mov	r8,zero
   24e7c:	0021883a 	mov	r16,zero
   24e80:	003f7106 	br	24c48 <__alt_data_end+0xf4024c48>
   24e84:	193ff804 	addi	r4,r3,-32
   24e88:	00800804 	movi	r2,32
   24e8c:	4908d83a 	srl	r4,r9,r4
   24e90:	18804526 	beq	r3,r2,24fa8 <__adddf3+0x564>
   24e94:	00801004 	movi	r2,64
   24e98:	10c5c83a 	sub	r2,r2,r3
   24e9c:	4886983a 	sll	r3,r9,r2
   24ea0:	198cb03a 	or	r6,r3,r6
   24ea4:	300cc03a 	cmpne	r6,r6,zero
   24ea8:	218cb03a 	or	r6,r4,r6
   24eac:	0007883a 	mov	r3,zero
   24eb0:	003f3b06 	br	24ba0 <__alt_data_end+0xf4024ba0>
   24eb4:	80002a26 	beq	r16,zero,24f60 <__adddf3+0x51c>
   24eb8:	0101ffc4 	movi	r4,2047
   24ebc:	11006826 	beq	r2,r4,25060 <__adddf3+0x61c>
   24ec0:	00c7c83a 	sub	r3,zero,r3
   24ec4:	42002034 	orhi	r8,r8,128
   24ec8:	01000e04 	movi	r4,56
   24ecc:	20c07c16 	blt	r4,r3,250c0 <__adddf3+0x67c>
   24ed0:	010007c4 	movi	r4,31
   24ed4:	20c0da16 	blt	r4,r3,25240 <__adddf3+0x7fc>
   24ed8:	01000804 	movi	r4,32
   24edc:	20c9c83a 	sub	r4,r4,r3
   24ee0:	4114983a 	sll	r10,r8,r4
   24ee4:	88cad83a 	srl	r5,r17,r3
   24ee8:	8908983a 	sll	r4,r17,r4
   24eec:	40c6d83a 	srl	r3,r8,r3
   24ef0:	5162b03a 	or	r17,r10,r5
   24ef4:	2008c03a 	cmpne	r4,r4,zero
   24ef8:	8922b03a 	or	r17,r17,r4
   24efc:	3463c83a 	sub	r17,r6,r17
   24f00:	48c7c83a 	sub	r3,r9,r3
   24f04:	344d803a 	cmpltu	r6,r6,r17
   24f08:	1991c83a 	sub	r8,r3,r6
   24f0c:	1021883a 	mov	r16,r2
   24f10:	3825883a 	mov	r18,r7
   24f14:	003f2706 	br	24bb4 <__alt_data_end+0xf4024bb4>
   24f18:	24d0b03a 	or	r8,r4,r19
   24f1c:	40001b1e 	bne	r8,zero,24f8c <__adddf3+0x548>
   24f20:	0005883a 	mov	r2,zero
   24f24:	0007883a 	mov	r3,zero
   24f28:	0021883a 	mov	r16,zero
   24f2c:	003f4d06 	br	24c64 <__alt_data_end+0xf4024c64>
   24f30:	008007c4 	movi	r2,31
   24f34:	11003c16 	blt	r2,r4,25028 <__adddf3+0x5e4>
   24f38:	00800804 	movi	r2,32
   24f3c:	1105c83a 	sub	r2,r2,r4
   24f40:	488e983a 	sll	r7,r9,r2
   24f44:	310ad83a 	srl	r5,r6,r4
   24f48:	3084983a 	sll	r2,r6,r2
   24f4c:	4912d83a 	srl	r9,r9,r4
   24f50:	394ab03a 	or	r5,r7,r5
   24f54:	1004c03a 	cmpne	r2,r2,zero
   24f58:	288ab03a 	or	r5,r5,r2
   24f5c:	003f5306 	br	24cac <__alt_data_end+0xf4024cac>
   24f60:	4448b03a 	or	r4,r8,r17
   24f64:	20003e26 	beq	r4,zero,25060 <__adddf3+0x61c>
   24f68:	00c6303a 	nor	r3,zero,r3
   24f6c:	18003a1e 	bne	r3,zero,25058 <__adddf3+0x614>
   24f70:	3463c83a 	sub	r17,r6,r17
   24f74:	4a07c83a 	sub	r3,r9,r8
   24f78:	344d803a 	cmpltu	r6,r6,r17
   24f7c:	1991c83a 	sub	r8,r3,r6
   24f80:	1021883a 	mov	r16,r2
   24f84:	3825883a 	mov	r18,r7
   24f88:	003f0a06 	br	24bb4 <__alt_data_end+0xf4024bb4>
   24f8c:	2023883a 	mov	r17,r4
   24f90:	003f0d06 	br	24bc8 <__alt_data_end+0xf4024bc8>
   24f94:	0081ffc4 	movi	r2,2047
   24f98:	80bf3f1e 	bne	r16,r2,24c98 <__alt_data_end+0xf4024c98>
   24f9c:	003ec806 	br	24ac0 <__alt_data_end+0xf4024ac0>
   24fa0:	0005883a 	mov	r2,zero
   24fa4:	003fb106 	br	24e6c <__alt_data_end+0xf4024e6c>
   24fa8:	0007883a 	mov	r3,zero
   24fac:	003fbc06 	br	24ea0 <__alt_data_end+0xf4024ea0>
   24fb0:	4444b03a 	or	r2,r8,r17
   24fb4:	8000871e 	bne	r16,zero,251d4 <__adddf3+0x790>
   24fb8:	1000ba26 	beq	r2,zero,252a4 <__adddf3+0x860>
   24fbc:	4984b03a 	or	r2,r9,r6
   24fc0:	103ebf26 	beq	r2,zero,24ac0 <__alt_data_end+0xf4024ac0>
   24fc4:	8985883a 	add	r2,r17,r6
   24fc8:	4247883a 	add	r3,r8,r9
   24fcc:	1451803a 	cmpltu	r8,r2,r17
   24fd0:	40d1883a 	add	r8,r8,r3
   24fd4:	40c0202c 	andhi	r3,r8,128
   24fd8:	1023883a 	mov	r17,r2
   24fdc:	183f1a26 	beq	r3,zero,24c48 <__alt_data_end+0xf4024c48>
   24fe0:	00bfe034 	movhi	r2,65408
   24fe4:	10bfffc4 	addi	r2,r2,-1
   24fe8:	2021883a 	mov	r16,r4
   24fec:	4090703a 	and	r8,r8,r2
   24ff0:	003eb306 	br	24ac0 <__alt_data_end+0xf4024ac0>
   24ff4:	4444b03a 	or	r2,r8,r17
   24ff8:	8000291e 	bne	r16,zero,250a0 <__adddf3+0x65c>
   24ffc:	10004b1e 	bne	r2,zero,2512c <__adddf3+0x6e8>
   25000:	4990b03a 	or	r8,r9,r6
   25004:	40008b26 	beq	r8,zero,25234 <__adddf3+0x7f0>
   25008:	4811883a 	mov	r8,r9
   2500c:	3023883a 	mov	r17,r6
   25010:	3825883a 	mov	r18,r7
   25014:	003eaa06 	br	24ac0 <__alt_data_end+0xf4024ac0>
   25018:	1021883a 	mov	r16,r2
   2501c:	0011883a 	mov	r8,zero
   25020:	0005883a 	mov	r2,zero
   25024:	003f0f06 	br	24c64 <__alt_data_end+0xf4024c64>
   25028:	217ff804 	addi	r5,r4,-32
   2502c:	00800804 	movi	r2,32
   25030:	494ad83a 	srl	r5,r9,r5
   25034:	20807d26 	beq	r4,r2,2522c <__adddf3+0x7e8>
   25038:	00801004 	movi	r2,64
   2503c:	1109c83a 	sub	r4,r2,r4
   25040:	4912983a 	sll	r9,r9,r4
   25044:	498cb03a 	or	r6,r9,r6
   25048:	300cc03a 	cmpne	r6,r6,zero
   2504c:	298ab03a 	or	r5,r5,r6
   25050:	0013883a 	mov	r9,zero
   25054:	003f1506 	br	24cac <__alt_data_end+0xf4024cac>
   25058:	0101ffc4 	movi	r4,2047
   2505c:	113f9a1e 	bne	r2,r4,24ec8 <__alt_data_end+0xf4024ec8>
   25060:	4811883a 	mov	r8,r9
   25064:	3023883a 	mov	r17,r6
   25068:	1021883a 	mov	r16,r2
   2506c:	3825883a 	mov	r18,r7
   25070:	003e9306 	br	24ac0 <__alt_data_end+0xf4024ac0>
   25074:	8000161e 	bne	r16,zero,250d0 <__adddf3+0x68c>
   25078:	444ab03a 	or	r5,r8,r17
   2507c:	28005126 	beq	r5,zero,251c4 <__adddf3+0x780>
   25080:	0108303a 	nor	r4,zero,r4
   25084:	20004d1e 	bne	r4,zero,251bc <__adddf3+0x778>
   25088:	89a3883a 	add	r17,r17,r6
   2508c:	4253883a 	add	r9,r8,r9
   25090:	898d803a 	cmpltu	r6,r17,r6
   25094:	3251883a 	add	r8,r6,r9
   25098:	1021883a 	mov	r16,r2
   2509c:	003f0806 	br	24cc0 <__alt_data_end+0xf4024cc0>
   250a0:	1000301e 	bne	r2,zero,25164 <__adddf3+0x720>
   250a4:	4984b03a 	or	r2,r9,r6
   250a8:	10007126 	beq	r2,zero,25270 <__adddf3+0x82c>
   250ac:	4811883a 	mov	r8,r9
   250b0:	3023883a 	mov	r17,r6
   250b4:	3825883a 	mov	r18,r7
   250b8:	0401ffc4 	movi	r16,2047
   250bc:	003e8006 	br	24ac0 <__alt_data_end+0xf4024ac0>
   250c0:	4462b03a 	or	r17,r8,r17
   250c4:	8822c03a 	cmpne	r17,r17,zero
   250c8:	0007883a 	mov	r3,zero
   250cc:	003f8b06 	br	24efc <__alt_data_end+0xf4024efc>
   250d0:	0141ffc4 	movi	r5,2047
   250d4:	11403b26 	beq	r2,r5,251c4 <__adddf3+0x780>
   250d8:	0109c83a 	sub	r4,zero,r4
   250dc:	42002034 	orhi	r8,r8,128
   250e0:	01400e04 	movi	r5,56
   250e4:	29006716 	blt	r5,r4,25284 <__adddf3+0x840>
   250e8:	014007c4 	movi	r5,31
   250ec:	29007016 	blt	r5,r4,252b0 <__adddf3+0x86c>
   250f0:	01400804 	movi	r5,32
   250f4:	290bc83a 	sub	r5,r5,r4
   250f8:	4154983a 	sll	r10,r8,r5
   250fc:	890ed83a 	srl	r7,r17,r4
   25100:	894a983a 	sll	r5,r17,r5
   25104:	4108d83a 	srl	r4,r8,r4
   25108:	51e2b03a 	or	r17,r10,r7
   2510c:	280ac03a 	cmpne	r5,r5,zero
   25110:	8962b03a 	or	r17,r17,r5
   25114:	89a3883a 	add	r17,r17,r6
   25118:	2253883a 	add	r9,r4,r9
   2511c:	898d803a 	cmpltu	r6,r17,r6
   25120:	3251883a 	add	r8,r6,r9
   25124:	1021883a 	mov	r16,r2
   25128:	003ee506 	br	24cc0 <__alt_data_end+0xf4024cc0>
   2512c:	4984b03a 	or	r2,r9,r6
   25130:	103e6326 	beq	r2,zero,24ac0 <__alt_data_end+0xf4024ac0>
   25134:	8987c83a 	sub	r3,r17,r6
   25138:	88c9803a 	cmpltu	r4,r17,r3
   2513c:	4245c83a 	sub	r2,r8,r9
   25140:	1105c83a 	sub	r2,r2,r4
   25144:	1100202c 	andhi	r4,r2,128
   25148:	203ebb26 	beq	r4,zero,24c38 <__alt_data_end+0xf4024c38>
   2514c:	3463c83a 	sub	r17,r6,r17
   25150:	4a07c83a 	sub	r3,r9,r8
   25154:	344d803a 	cmpltu	r6,r6,r17
   25158:	1991c83a 	sub	r8,r3,r6
   2515c:	3825883a 	mov	r18,r7
   25160:	003e5706 	br	24ac0 <__alt_data_end+0xf4024ac0>
   25164:	4984b03a 	or	r2,r9,r6
   25168:	10002e26 	beq	r2,zero,25224 <__adddf3+0x7e0>
   2516c:	4004d0fa 	srli	r2,r8,3
   25170:	8822d0fa 	srli	r17,r17,3
   25174:	4010977a 	slli	r8,r8,29
   25178:	10c0022c 	andhi	r3,r2,8
   2517c:	4462b03a 	or	r17,r8,r17
   25180:	18000826 	beq	r3,zero,251a4 <__adddf3+0x760>
   25184:	4808d0fa 	srli	r4,r9,3
   25188:	20c0022c 	andhi	r3,r4,8
   2518c:	1800051e 	bne	r3,zero,251a4 <__adddf3+0x760>
   25190:	300cd0fa 	srli	r6,r6,3
   25194:	4806977a 	slli	r3,r9,29
   25198:	2005883a 	mov	r2,r4
   2519c:	3825883a 	mov	r18,r7
   251a0:	19a2b03a 	or	r17,r3,r6
   251a4:	8810d77a 	srli	r8,r17,29
   251a8:	100490fa 	slli	r2,r2,3
   251ac:	882290fa 	slli	r17,r17,3
   251b0:	0401ffc4 	movi	r16,2047
   251b4:	4090b03a 	or	r8,r8,r2
   251b8:	003e4106 	br	24ac0 <__alt_data_end+0xf4024ac0>
   251bc:	0141ffc4 	movi	r5,2047
   251c0:	117fc71e 	bne	r2,r5,250e0 <__alt_data_end+0xf40250e0>
   251c4:	4811883a 	mov	r8,r9
   251c8:	3023883a 	mov	r17,r6
   251cc:	1021883a 	mov	r16,r2
   251d0:	003e3b06 	br	24ac0 <__alt_data_end+0xf4024ac0>
   251d4:	10002f26 	beq	r2,zero,25294 <__adddf3+0x850>
   251d8:	4984b03a 	or	r2,r9,r6
   251dc:	10001126 	beq	r2,zero,25224 <__adddf3+0x7e0>
   251e0:	4004d0fa 	srli	r2,r8,3
   251e4:	8822d0fa 	srli	r17,r17,3
   251e8:	4010977a 	slli	r8,r8,29
   251ec:	10c0022c 	andhi	r3,r2,8
   251f0:	4462b03a 	or	r17,r8,r17
   251f4:	183feb26 	beq	r3,zero,251a4 <__alt_data_end+0xf40251a4>
   251f8:	4808d0fa 	srli	r4,r9,3
   251fc:	20c0022c 	andhi	r3,r4,8
   25200:	183fe81e 	bne	r3,zero,251a4 <__alt_data_end+0xf40251a4>
   25204:	300cd0fa 	srli	r6,r6,3
   25208:	4806977a 	slli	r3,r9,29
   2520c:	2005883a 	mov	r2,r4
   25210:	19a2b03a 	or	r17,r3,r6
   25214:	003fe306 	br	251a4 <__alt_data_end+0xf40251a4>
   25218:	0011883a 	mov	r8,zero
   2521c:	0005883a 	mov	r2,zero
   25220:	003e3f06 	br	24b20 <__alt_data_end+0xf4024b20>
   25224:	0401ffc4 	movi	r16,2047
   25228:	003e2506 	br	24ac0 <__alt_data_end+0xf4024ac0>
   2522c:	0013883a 	mov	r9,zero
   25230:	003f8406 	br	25044 <__alt_data_end+0xf4025044>
   25234:	0005883a 	mov	r2,zero
   25238:	0007883a 	mov	r3,zero
   2523c:	003e8906 	br	24c64 <__alt_data_end+0xf4024c64>
   25240:	197ff804 	addi	r5,r3,-32
   25244:	01000804 	movi	r4,32
   25248:	414ad83a 	srl	r5,r8,r5
   2524c:	19002426 	beq	r3,r4,252e0 <__adddf3+0x89c>
   25250:	01001004 	movi	r4,64
   25254:	20c7c83a 	sub	r3,r4,r3
   25258:	40c6983a 	sll	r3,r8,r3
   2525c:	1c46b03a 	or	r3,r3,r17
   25260:	1806c03a 	cmpne	r3,r3,zero
   25264:	28e2b03a 	or	r17,r5,r3
   25268:	0007883a 	mov	r3,zero
   2526c:	003f2306 	br	24efc <__alt_data_end+0xf4024efc>
   25270:	0007883a 	mov	r3,zero
   25274:	5811883a 	mov	r8,r11
   25278:	00bfffc4 	movi	r2,-1
   2527c:	0401ffc4 	movi	r16,2047
   25280:	003e7806 	br	24c64 <__alt_data_end+0xf4024c64>
   25284:	4462b03a 	or	r17,r8,r17
   25288:	8822c03a 	cmpne	r17,r17,zero
   2528c:	0009883a 	mov	r4,zero
   25290:	003fa006 	br	25114 <__alt_data_end+0xf4025114>
   25294:	4811883a 	mov	r8,r9
   25298:	3023883a 	mov	r17,r6
   2529c:	0401ffc4 	movi	r16,2047
   252a0:	003e0706 	br	24ac0 <__alt_data_end+0xf4024ac0>
   252a4:	4811883a 	mov	r8,r9
   252a8:	3023883a 	mov	r17,r6
   252ac:	003e0406 	br	24ac0 <__alt_data_end+0xf4024ac0>
   252b0:	21fff804 	addi	r7,r4,-32
   252b4:	01400804 	movi	r5,32
   252b8:	41ced83a 	srl	r7,r8,r7
   252bc:	21400a26 	beq	r4,r5,252e8 <__adddf3+0x8a4>
   252c0:	01401004 	movi	r5,64
   252c4:	2909c83a 	sub	r4,r5,r4
   252c8:	4108983a 	sll	r4,r8,r4
   252cc:	2448b03a 	or	r4,r4,r17
   252d0:	2008c03a 	cmpne	r4,r4,zero
   252d4:	3922b03a 	or	r17,r7,r4
   252d8:	0009883a 	mov	r4,zero
   252dc:	003f8d06 	br	25114 <__alt_data_end+0xf4025114>
   252e0:	0007883a 	mov	r3,zero
   252e4:	003fdd06 	br	2525c <__alt_data_end+0xf402525c>
   252e8:	0009883a 	mov	r4,zero
   252ec:	003ff706 	br	252cc <__alt_data_end+0xf40252cc>

000252f0 <__divdf3>:
   252f0:	defff204 	addi	sp,sp,-56
   252f4:	dd400915 	stw	r21,36(sp)
   252f8:	282ad53a 	srli	r21,r5,20
   252fc:	dd000815 	stw	r20,32(sp)
   25300:	2828d7fa 	srli	r20,r5,31
   25304:	dc000415 	stw	r16,16(sp)
   25308:	04000434 	movhi	r16,16
   2530c:	df000c15 	stw	fp,48(sp)
   25310:	843fffc4 	addi	r16,r16,-1
   25314:	dfc00d15 	stw	ra,52(sp)
   25318:	ddc00b15 	stw	r23,44(sp)
   2531c:	dd800a15 	stw	r22,40(sp)
   25320:	dcc00715 	stw	r19,28(sp)
   25324:	dc800615 	stw	r18,24(sp)
   25328:	dc400515 	stw	r17,20(sp)
   2532c:	ad41ffcc 	andi	r21,r21,2047
   25330:	2c20703a 	and	r16,r5,r16
   25334:	a7003fcc 	andi	fp,r20,255
   25338:	a8006126 	beq	r21,zero,254c0 <__divdf3+0x1d0>
   2533c:	0081ffc4 	movi	r2,2047
   25340:	2025883a 	mov	r18,r4
   25344:	a8803726 	beq	r21,r2,25424 <__divdf3+0x134>
   25348:	80800434 	orhi	r2,r16,16
   2534c:	100490fa 	slli	r2,r2,3
   25350:	2020d77a 	srli	r16,r4,29
   25354:	202490fa 	slli	r18,r4,3
   25358:	ad7f0044 	addi	r21,r21,-1023
   2535c:	80a0b03a 	or	r16,r16,r2
   25360:	0027883a 	mov	r19,zero
   25364:	0013883a 	mov	r9,zero
   25368:	3804d53a 	srli	r2,r7,20
   2536c:	382cd7fa 	srli	r22,r7,31
   25370:	04400434 	movhi	r17,16
   25374:	8c7fffc4 	addi	r17,r17,-1
   25378:	1081ffcc 	andi	r2,r2,2047
   2537c:	3011883a 	mov	r8,r6
   25380:	3c62703a 	and	r17,r7,r17
   25384:	b5c03fcc 	andi	r23,r22,255
   25388:	10006c26 	beq	r2,zero,2553c <__divdf3+0x24c>
   2538c:	00c1ffc4 	movi	r3,2047
   25390:	10c06426 	beq	r2,r3,25524 <__divdf3+0x234>
   25394:	88c00434 	orhi	r3,r17,16
   25398:	180690fa 	slli	r3,r3,3
   2539c:	3022d77a 	srli	r17,r6,29
   253a0:	301090fa 	slli	r8,r6,3
   253a4:	10bf0044 	addi	r2,r2,-1023
   253a8:	88e2b03a 	or	r17,r17,r3
   253ac:	000f883a 	mov	r7,zero
   253b0:	a58cf03a 	xor	r6,r20,r22
   253b4:	3cc8b03a 	or	r4,r7,r19
   253b8:	a8abc83a 	sub	r21,r21,r2
   253bc:	008003c4 	movi	r2,15
   253c0:	3007883a 	mov	r3,r6
   253c4:	34c03fcc 	andi	r19,r6,255
   253c8:	11009036 	bltu	r2,r4,2560c <__divdf3+0x31c>
   253cc:	200890ba 	slli	r4,r4,2
   253d0:	008000b4 	movhi	r2,2
   253d4:	1094f904 	addi	r2,r2,21476
   253d8:	2089883a 	add	r4,r4,r2
   253dc:	20800017 	ldw	r2,0(r4)
   253e0:	1000683a 	jmp	r2
   253e4:	0002560c 	andi	zero,zero,2392
   253e8:	0002545c 	xori	zero,zero,2385
   253ec:	000255fc 	xorhi	zero,zero,2391
   253f0:	00025450 	cmplti	zero,zero,2385
   253f4:	000255fc 	xorhi	zero,zero,2391
   253f8:	000255d0 	cmplti	zero,zero,2391
   253fc:	000255fc 	xorhi	zero,zero,2391
   25400:	00025450 	cmplti	zero,zero,2385
   25404:	0002545c 	xori	zero,zero,2385
   25408:	0002545c 	xori	zero,zero,2385
   2540c:	000255d0 	cmplti	zero,zero,2391
   25410:	00025450 	cmplti	zero,zero,2385
   25414:	00025440 	call	2544 <__alt_mem_onchip_memory-0x1dabc>
   25418:	00025440 	call	2544 <__alt_mem_onchip_memory-0x1dabc>
   2541c:	00025440 	call	2544 <__alt_mem_onchip_memory-0x1dabc>
   25420:	000258f0 	cmpltui	zero,zero,2403
   25424:	2404b03a 	or	r2,r4,r16
   25428:	1000661e 	bne	r2,zero,255c4 <__divdf3+0x2d4>
   2542c:	04c00204 	movi	r19,8
   25430:	0021883a 	mov	r16,zero
   25434:	0025883a 	mov	r18,zero
   25438:	02400084 	movi	r9,2
   2543c:	003fca06 	br	25368 <__alt_data_end+0xf4025368>
   25440:	8023883a 	mov	r17,r16
   25444:	9011883a 	mov	r8,r18
   25448:	e02f883a 	mov	r23,fp
   2544c:	480f883a 	mov	r7,r9
   25450:	00800084 	movi	r2,2
   25454:	3881311e 	bne	r7,r2,2591c <__divdf3+0x62c>
   25458:	b827883a 	mov	r19,r23
   2545c:	98c0004c 	andi	r3,r19,1
   25460:	0081ffc4 	movi	r2,2047
   25464:	000b883a 	mov	r5,zero
   25468:	0025883a 	mov	r18,zero
   2546c:	1004953a 	slli	r2,r2,20
   25470:	18c03fcc 	andi	r3,r3,255
   25474:	04400434 	movhi	r17,16
   25478:	8c7fffc4 	addi	r17,r17,-1
   2547c:	180697fa 	slli	r3,r3,31
   25480:	2c4a703a 	and	r5,r5,r17
   25484:	288ab03a 	or	r5,r5,r2
   25488:	28c6b03a 	or	r3,r5,r3
   2548c:	9005883a 	mov	r2,r18
   25490:	dfc00d17 	ldw	ra,52(sp)
   25494:	df000c17 	ldw	fp,48(sp)
   25498:	ddc00b17 	ldw	r23,44(sp)
   2549c:	dd800a17 	ldw	r22,40(sp)
   254a0:	dd400917 	ldw	r21,36(sp)
   254a4:	dd000817 	ldw	r20,32(sp)
   254a8:	dcc00717 	ldw	r19,28(sp)
   254ac:	dc800617 	ldw	r18,24(sp)
   254b0:	dc400517 	ldw	r17,20(sp)
   254b4:	dc000417 	ldw	r16,16(sp)
   254b8:	dec00e04 	addi	sp,sp,56
   254bc:	f800283a 	ret
   254c0:	2404b03a 	or	r2,r4,r16
   254c4:	2027883a 	mov	r19,r4
   254c8:	10003926 	beq	r2,zero,255b0 <__divdf3+0x2c0>
   254cc:	80012e26 	beq	r16,zero,25988 <__divdf3+0x698>
   254d0:	8009883a 	mov	r4,r16
   254d4:	d9800315 	stw	r6,12(sp)
   254d8:	d9c00215 	stw	r7,8(sp)
   254dc:	00272580 	call	27258 <__clzsi2>
   254e0:	d9800317 	ldw	r6,12(sp)
   254e4:	d9c00217 	ldw	r7,8(sp)
   254e8:	113ffd44 	addi	r4,r2,-11
   254ec:	00c00704 	movi	r3,28
   254f0:	19012116 	blt	r3,r4,25978 <__divdf3+0x688>
   254f4:	00c00744 	movi	r3,29
   254f8:	147ffe04 	addi	r17,r2,-8
   254fc:	1907c83a 	sub	r3,r3,r4
   25500:	8460983a 	sll	r16,r16,r17
   25504:	98c6d83a 	srl	r3,r19,r3
   25508:	9c64983a 	sll	r18,r19,r17
   2550c:	1c20b03a 	or	r16,r3,r16
   25510:	1080fcc4 	addi	r2,r2,1011
   25514:	00abc83a 	sub	r21,zero,r2
   25518:	0027883a 	mov	r19,zero
   2551c:	0013883a 	mov	r9,zero
   25520:	003f9106 	br	25368 <__alt_data_end+0xf4025368>
   25524:	3446b03a 	or	r3,r6,r17
   25528:	18001f1e 	bne	r3,zero,255a8 <__divdf3+0x2b8>
   2552c:	0023883a 	mov	r17,zero
   25530:	0011883a 	mov	r8,zero
   25534:	01c00084 	movi	r7,2
   25538:	003f9d06 	br	253b0 <__alt_data_end+0xf40253b0>
   2553c:	3446b03a 	or	r3,r6,r17
   25540:	18001526 	beq	r3,zero,25598 <__divdf3+0x2a8>
   25544:	88011b26 	beq	r17,zero,259b4 <__divdf3+0x6c4>
   25548:	8809883a 	mov	r4,r17
   2554c:	d9800315 	stw	r6,12(sp)
   25550:	da400115 	stw	r9,4(sp)
   25554:	00272580 	call	27258 <__clzsi2>
   25558:	d9800317 	ldw	r6,12(sp)
   2555c:	da400117 	ldw	r9,4(sp)
   25560:	113ffd44 	addi	r4,r2,-11
   25564:	00c00704 	movi	r3,28
   25568:	19010e16 	blt	r3,r4,259a4 <__divdf3+0x6b4>
   2556c:	00c00744 	movi	r3,29
   25570:	123ffe04 	addi	r8,r2,-8
   25574:	1907c83a 	sub	r3,r3,r4
   25578:	8a22983a 	sll	r17,r17,r8
   2557c:	30c6d83a 	srl	r3,r6,r3
   25580:	3210983a 	sll	r8,r6,r8
   25584:	1c62b03a 	or	r17,r3,r17
   25588:	1080fcc4 	addi	r2,r2,1011
   2558c:	0085c83a 	sub	r2,zero,r2
   25590:	000f883a 	mov	r7,zero
   25594:	003f8606 	br	253b0 <__alt_data_end+0xf40253b0>
   25598:	0023883a 	mov	r17,zero
   2559c:	0011883a 	mov	r8,zero
   255a0:	01c00044 	movi	r7,1
   255a4:	003f8206 	br	253b0 <__alt_data_end+0xf40253b0>
   255a8:	01c000c4 	movi	r7,3
   255ac:	003f8006 	br	253b0 <__alt_data_end+0xf40253b0>
   255b0:	04c00104 	movi	r19,4
   255b4:	0021883a 	mov	r16,zero
   255b8:	0025883a 	mov	r18,zero
   255bc:	02400044 	movi	r9,1
   255c0:	003f6906 	br	25368 <__alt_data_end+0xf4025368>
   255c4:	04c00304 	movi	r19,12
   255c8:	024000c4 	movi	r9,3
   255cc:	003f6606 	br	25368 <__alt_data_end+0xf4025368>
   255d0:	01400434 	movhi	r5,16
   255d4:	0007883a 	mov	r3,zero
   255d8:	297fffc4 	addi	r5,r5,-1
   255dc:	04bfffc4 	movi	r18,-1
   255e0:	0081ffc4 	movi	r2,2047
   255e4:	003fa106 	br	2546c <__alt_data_end+0xf402546c>
   255e8:	00c00044 	movi	r3,1
   255ec:	1887c83a 	sub	r3,r3,r2
   255f0:	01000e04 	movi	r4,56
   255f4:	20c1210e 	bge	r4,r3,25a7c <__divdf3+0x78c>
   255f8:	98c0004c 	andi	r3,r19,1
   255fc:	0005883a 	mov	r2,zero
   25600:	000b883a 	mov	r5,zero
   25604:	0025883a 	mov	r18,zero
   25608:	003f9806 	br	2546c <__alt_data_end+0xf402546c>
   2560c:	8c00fd36 	bltu	r17,r16,25a04 <__divdf3+0x714>
   25610:	8440fb26 	beq	r16,r17,25a00 <__divdf3+0x710>
   25614:	8007883a 	mov	r3,r16
   25618:	ad7fffc4 	addi	r21,r21,-1
   2561c:	0021883a 	mov	r16,zero
   25620:	4004d63a 	srli	r2,r8,24
   25624:	8822923a 	slli	r17,r17,8
   25628:	1809883a 	mov	r4,r3
   2562c:	402c923a 	slli	r22,r8,8
   25630:	88b8b03a 	or	fp,r17,r2
   25634:	e028d43a 	srli	r20,fp,16
   25638:	d8c00015 	stw	r3,0(sp)
   2563c:	e5ffffcc 	andi	r23,fp,65535
   25640:	a00b883a 	mov	r5,r20
   25644:	00234880 	call	23488 <__udivsi3>
   25648:	d8c00017 	ldw	r3,0(sp)
   2564c:	a00b883a 	mov	r5,r20
   25650:	d8800315 	stw	r2,12(sp)
   25654:	1809883a 	mov	r4,r3
   25658:	00234ec0 	call	234ec <__umodsi3>
   2565c:	d9800317 	ldw	r6,12(sp)
   25660:	1006943a 	slli	r3,r2,16
   25664:	9004d43a 	srli	r2,r18,16
   25668:	b9a3383a 	mul	r17,r23,r6
   2566c:	10c4b03a 	or	r2,r2,r3
   25670:	1440062e 	bgeu	r2,r17,2568c <__divdf3+0x39c>
   25674:	1705883a 	add	r2,r2,fp
   25678:	30ffffc4 	addi	r3,r6,-1
   2567c:	1700ee36 	bltu	r2,fp,25a38 <__divdf3+0x748>
   25680:	1440ed2e 	bgeu	r2,r17,25a38 <__divdf3+0x748>
   25684:	31bfff84 	addi	r6,r6,-2
   25688:	1705883a 	add	r2,r2,fp
   2568c:	1463c83a 	sub	r17,r2,r17
   25690:	a00b883a 	mov	r5,r20
   25694:	8809883a 	mov	r4,r17
   25698:	d9800315 	stw	r6,12(sp)
   2569c:	00234880 	call	23488 <__udivsi3>
   256a0:	a00b883a 	mov	r5,r20
   256a4:	8809883a 	mov	r4,r17
   256a8:	d8800215 	stw	r2,8(sp)
   256ac:	00234ec0 	call	234ec <__umodsi3>
   256b0:	d9c00217 	ldw	r7,8(sp)
   256b4:	1004943a 	slli	r2,r2,16
   256b8:	94bfffcc 	andi	r18,r18,65535
   256bc:	b9d1383a 	mul	r8,r23,r7
   256c0:	90a4b03a 	or	r18,r18,r2
   256c4:	d9800317 	ldw	r6,12(sp)
   256c8:	9200062e 	bgeu	r18,r8,256e4 <__divdf3+0x3f4>
   256cc:	9725883a 	add	r18,r18,fp
   256d0:	38bfffc4 	addi	r2,r7,-1
   256d4:	9700d636 	bltu	r18,fp,25a30 <__divdf3+0x740>
   256d8:	9200d52e 	bgeu	r18,r8,25a30 <__divdf3+0x740>
   256dc:	39ffff84 	addi	r7,r7,-2
   256e0:	9725883a 	add	r18,r18,fp
   256e4:	3004943a 	slli	r2,r6,16
   256e8:	b012d43a 	srli	r9,r22,16
   256ec:	b1bfffcc 	andi	r6,r22,65535
   256f0:	11e2b03a 	or	r17,r2,r7
   256f4:	8806d43a 	srli	r3,r17,16
   256f8:	893fffcc 	andi	r4,r17,65535
   256fc:	218b383a 	mul	r5,r4,r6
   25700:	30c5383a 	mul	r2,r6,r3
   25704:	2249383a 	mul	r4,r4,r9
   25708:	280ed43a 	srli	r7,r5,16
   2570c:	9225c83a 	sub	r18,r18,r8
   25710:	2089883a 	add	r4,r4,r2
   25714:	3909883a 	add	r4,r7,r4
   25718:	1a47383a 	mul	r3,r3,r9
   2571c:	2080022e 	bgeu	r4,r2,25728 <__divdf3+0x438>
   25720:	00800074 	movhi	r2,1
   25724:	1887883a 	add	r3,r3,r2
   25728:	2004d43a 	srli	r2,r4,16
   2572c:	2008943a 	slli	r4,r4,16
   25730:	297fffcc 	andi	r5,r5,65535
   25734:	10c7883a 	add	r3,r2,r3
   25738:	2149883a 	add	r4,r4,r5
   2573c:	90c0a536 	bltu	r18,r3,259d4 <__divdf3+0x6e4>
   25740:	90c0bf26 	beq	r18,r3,25a40 <__divdf3+0x750>
   25744:	90c7c83a 	sub	r3,r18,r3
   25748:	810fc83a 	sub	r7,r16,r4
   2574c:	81e5803a 	cmpltu	r18,r16,r7
   25750:	1ca5c83a 	sub	r18,r3,r18
   25754:	e480c126 	beq	fp,r18,25a5c <__divdf3+0x76c>
   25758:	a00b883a 	mov	r5,r20
   2575c:	9009883a 	mov	r4,r18
   25760:	d9800315 	stw	r6,12(sp)
   25764:	d9c00215 	stw	r7,8(sp)
   25768:	da400115 	stw	r9,4(sp)
   2576c:	00234880 	call	23488 <__udivsi3>
   25770:	a00b883a 	mov	r5,r20
   25774:	9009883a 	mov	r4,r18
   25778:	d8800015 	stw	r2,0(sp)
   2577c:	00234ec0 	call	234ec <__umodsi3>
   25780:	d9c00217 	ldw	r7,8(sp)
   25784:	da000017 	ldw	r8,0(sp)
   25788:	1006943a 	slli	r3,r2,16
   2578c:	3804d43a 	srli	r2,r7,16
   25790:	ba21383a 	mul	r16,r23,r8
   25794:	d9800317 	ldw	r6,12(sp)
   25798:	10c4b03a 	or	r2,r2,r3
   2579c:	da400117 	ldw	r9,4(sp)
   257a0:	1400062e 	bgeu	r2,r16,257bc <__divdf3+0x4cc>
   257a4:	1705883a 	add	r2,r2,fp
   257a8:	40ffffc4 	addi	r3,r8,-1
   257ac:	1700ad36 	bltu	r2,fp,25a64 <__divdf3+0x774>
   257b0:	1400ac2e 	bgeu	r2,r16,25a64 <__divdf3+0x774>
   257b4:	423fff84 	addi	r8,r8,-2
   257b8:	1705883a 	add	r2,r2,fp
   257bc:	1421c83a 	sub	r16,r2,r16
   257c0:	a00b883a 	mov	r5,r20
   257c4:	8009883a 	mov	r4,r16
   257c8:	d9800315 	stw	r6,12(sp)
   257cc:	d9c00215 	stw	r7,8(sp)
   257d0:	da000015 	stw	r8,0(sp)
   257d4:	da400115 	stw	r9,4(sp)
   257d8:	00234880 	call	23488 <__udivsi3>
   257dc:	8009883a 	mov	r4,r16
   257e0:	a00b883a 	mov	r5,r20
   257e4:	1025883a 	mov	r18,r2
   257e8:	00234ec0 	call	234ec <__umodsi3>
   257ec:	d9c00217 	ldw	r7,8(sp)
   257f0:	1004943a 	slli	r2,r2,16
   257f4:	bcaf383a 	mul	r23,r23,r18
   257f8:	393fffcc 	andi	r4,r7,65535
   257fc:	2088b03a 	or	r4,r4,r2
   25800:	d9800317 	ldw	r6,12(sp)
   25804:	da000017 	ldw	r8,0(sp)
   25808:	da400117 	ldw	r9,4(sp)
   2580c:	25c0062e 	bgeu	r4,r23,25828 <__divdf3+0x538>
   25810:	2709883a 	add	r4,r4,fp
   25814:	90bfffc4 	addi	r2,r18,-1
   25818:	27009436 	bltu	r4,fp,25a6c <__divdf3+0x77c>
   2581c:	25c0932e 	bgeu	r4,r23,25a6c <__divdf3+0x77c>
   25820:	94bfff84 	addi	r18,r18,-2
   25824:	2709883a 	add	r4,r4,fp
   25828:	4004943a 	slli	r2,r8,16
   2582c:	25efc83a 	sub	r23,r4,r23
   25830:	1490b03a 	or	r8,r2,r18
   25834:	4008d43a 	srli	r4,r8,16
   25838:	40ffffcc 	andi	r3,r8,65535
   2583c:	30c5383a 	mul	r2,r6,r3
   25840:	1a47383a 	mul	r3,r3,r9
   25844:	310d383a 	mul	r6,r6,r4
   25848:	100ad43a 	srli	r5,r2,16
   2584c:	4913383a 	mul	r9,r9,r4
   25850:	1987883a 	add	r3,r3,r6
   25854:	28c7883a 	add	r3,r5,r3
   25858:	1980022e 	bgeu	r3,r6,25864 <__divdf3+0x574>
   2585c:	01000074 	movhi	r4,1
   25860:	4913883a 	add	r9,r9,r4
   25864:	1808d43a 	srli	r4,r3,16
   25868:	1806943a 	slli	r3,r3,16
   2586c:	10bfffcc 	andi	r2,r2,65535
   25870:	2253883a 	add	r9,r4,r9
   25874:	1887883a 	add	r3,r3,r2
   25878:	ba403836 	bltu	r23,r9,2595c <__divdf3+0x66c>
   2587c:	ba403626 	beq	r23,r9,25958 <__divdf3+0x668>
   25880:	42000054 	ori	r8,r8,1
   25884:	a880ffc4 	addi	r2,r21,1023
   25888:	00bf570e 	bge	zero,r2,255e8 <__alt_data_end+0xf40255e8>
   2588c:	40c001cc 	andi	r3,r8,7
   25890:	18000726 	beq	r3,zero,258b0 <__divdf3+0x5c0>
   25894:	40c003cc 	andi	r3,r8,15
   25898:	01000104 	movi	r4,4
   2589c:	19000426 	beq	r3,r4,258b0 <__divdf3+0x5c0>
   258a0:	4107883a 	add	r3,r8,r4
   258a4:	1a11803a 	cmpltu	r8,r3,r8
   258a8:	8a23883a 	add	r17,r17,r8
   258ac:	1811883a 	mov	r8,r3
   258b0:	88c0402c 	andhi	r3,r17,256
   258b4:	18000426 	beq	r3,zero,258c8 <__divdf3+0x5d8>
   258b8:	00ffc034 	movhi	r3,65280
   258bc:	18ffffc4 	addi	r3,r3,-1
   258c0:	a8810004 	addi	r2,r21,1024
   258c4:	88e2703a 	and	r17,r17,r3
   258c8:	00c1ff84 	movi	r3,2046
   258cc:	18bee316 	blt	r3,r2,2545c <__alt_data_end+0xf402545c>
   258d0:	8824977a 	slli	r18,r17,29
   258d4:	4010d0fa 	srli	r8,r8,3
   258d8:	8822927a 	slli	r17,r17,9
   258dc:	1081ffcc 	andi	r2,r2,2047
   258e0:	9224b03a 	or	r18,r18,r8
   258e4:	880ad33a 	srli	r5,r17,12
   258e8:	98c0004c 	andi	r3,r19,1
   258ec:	003edf06 	br	2546c <__alt_data_end+0xf402546c>
   258f0:	8080022c 	andhi	r2,r16,8
   258f4:	10001226 	beq	r2,zero,25940 <__divdf3+0x650>
   258f8:	8880022c 	andhi	r2,r17,8
   258fc:	1000101e 	bne	r2,zero,25940 <__divdf3+0x650>
   25900:	00800434 	movhi	r2,16
   25904:	89400234 	orhi	r5,r17,8
   25908:	10bfffc4 	addi	r2,r2,-1
   2590c:	b007883a 	mov	r3,r22
   25910:	288a703a 	and	r5,r5,r2
   25914:	4025883a 	mov	r18,r8
   25918:	003f3106 	br	255e0 <__alt_data_end+0xf40255e0>
   2591c:	008000c4 	movi	r2,3
   25920:	3880a626 	beq	r7,r2,25bbc <__divdf3+0x8cc>
   25924:	00800044 	movi	r2,1
   25928:	3880521e 	bne	r7,r2,25a74 <__divdf3+0x784>
   2592c:	b807883a 	mov	r3,r23
   25930:	0005883a 	mov	r2,zero
   25934:	000b883a 	mov	r5,zero
   25938:	0025883a 	mov	r18,zero
   2593c:	003ecb06 	br	2546c <__alt_data_end+0xf402546c>
   25940:	00800434 	movhi	r2,16
   25944:	81400234 	orhi	r5,r16,8
   25948:	10bfffc4 	addi	r2,r2,-1
   2594c:	a007883a 	mov	r3,r20
   25950:	288a703a 	and	r5,r5,r2
   25954:	003f2206 	br	255e0 <__alt_data_end+0xf40255e0>
   25958:	183fca26 	beq	r3,zero,25884 <__alt_data_end+0xf4025884>
   2595c:	e5ef883a 	add	r23,fp,r23
   25960:	40bfffc4 	addi	r2,r8,-1
   25964:	bf00392e 	bgeu	r23,fp,25a4c <__divdf3+0x75c>
   25968:	1011883a 	mov	r8,r2
   2596c:	ba7fc41e 	bne	r23,r9,25880 <__alt_data_end+0xf4025880>
   25970:	b0ffc31e 	bne	r22,r3,25880 <__alt_data_end+0xf4025880>
   25974:	003fc306 	br	25884 <__alt_data_end+0xf4025884>
   25978:	143ff604 	addi	r16,r2,-40
   2597c:	9c20983a 	sll	r16,r19,r16
   25980:	0025883a 	mov	r18,zero
   25984:	003ee206 	br	25510 <__alt_data_end+0xf4025510>
   25988:	d9800315 	stw	r6,12(sp)
   2598c:	d9c00215 	stw	r7,8(sp)
   25990:	00272580 	call	27258 <__clzsi2>
   25994:	10800804 	addi	r2,r2,32
   25998:	d9c00217 	ldw	r7,8(sp)
   2599c:	d9800317 	ldw	r6,12(sp)
   259a0:	003ed106 	br	254e8 <__alt_data_end+0xf40254e8>
   259a4:	147ff604 	addi	r17,r2,-40
   259a8:	3462983a 	sll	r17,r6,r17
   259ac:	0011883a 	mov	r8,zero
   259b0:	003ef506 	br	25588 <__alt_data_end+0xf4025588>
   259b4:	3009883a 	mov	r4,r6
   259b8:	d9800315 	stw	r6,12(sp)
   259bc:	da400115 	stw	r9,4(sp)
   259c0:	00272580 	call	27258 <__clzsi2>
   259c4:	10800804 	addi	r2,r2,32
   259c8:	da400117 	ldw	r9,4(sp)
   259cc:	d9800317 	ldw	r6,12(sp)
   259d0:	003ee306 	br	25560 <__alt_data_end+0xf4025560>
   259d4:	85a1883a 	add	r16,r16,r22
   259d8:	8585803a 	cmpltu	r2,r16,r22
   259dc:	1705883a 	add	r2,r2,fp
   259e0:	14a5883a 	add	r18,r2,r18
   259e4:	88bfffc4 	addi	r2,r17,-1
   259e8:	e4800c2e 	bgeu	fp,r18,25a1c <__divdf3+0x72c>
   259ec:	90c03e36 	bltu	r18,r3,25ae8 <__divdf3+0x7f8>
   259f0:	1c806926 	beq	r3,r18,25b98 <__divdf3+0x8a8>
   259f4:	90c7c83a 	sub	r3,r18,r3
   259f8:	1023883a 	mov	r17,r2
   259fc:	003f5206 	br	25748 <__alt_data_end+0xf4025748>
   25a00:	923f0436 	bltu	r18,r8,25614 <__alt_data_end+0xf4025614>
   25a04:	800897fa 	slli	r4,r16,31
   25a08:	9004d07a 	srli	r2,r18,1
   25a0c:	8006d07a 	srli	r3,r16,1
   25a10:	902097fa 	slli	r16,r18,31
   25a14:	20a4b03a 	or	r18,r4,r2
   25a18:	003f0106 	br	25620 <__alt_data_end+0xf4025620>
   25a1c:	e4bff51e 	bne	fp,r18,259f4 <__alt_data_end+0xf40259f4>
   25a20:	85bff22e 	bgeu	r16,r22,259ec <__alt_data_end+0xf40259ec>
   25a24:	e0c7c83a 	sub	r3,fp,r3
   25a28:	1023883a 	mov	r17,r2
   25a2c:	003f4606 	br	25748 <__alt_data_end+0xf4025748>
   25a30:	100f883a 	mov	r7,r2
   25a34:	003f2b06 	br	256e4 <__alt_data_end+0xf40256e4>
   25a38:	180d883a 	mov	r6,r3
   25a3c:	003f1306 	br	2568c <__alt_data_end+0xf402568c>
   25a40:	813fe436 	bltu	r16,r4,259d4 <__alt_data_end+0xf40259d4>
   25a44:	0007883a 	mov	r3,zero
   25a48:	003f3f06 	br	25748 <__alt_data_end+0xf4025748>
   25a4c:	ba402c36 	bltu	r23,r9,25b00 <__divdf3+0x810>
   25a50:	4dc05426 	beq	r9,r23,25ba4 <__divdf3+0x8b4>
   25a54:	1011883a 	mov	r8,r2
   25a58:	003f8906 	br	25880 <__alt_data_end+0xf4025880>
   25a5c:	023fffc4 	movi	r8,-1
   25a60:	003f8806 	br	25884 <__alt_data_end+0xf4025884>
   25a64:	1811883a 	mov	r8,r3
   25a68:	003f5406 	br	257bc <__alt_data_end+0xf40257bc>
   25a6c:	1025883a 	mov	r18,r2
   25a70:	003f6d06 	br	25828 <__alt_data_end+0xf4025828>
   25a74:	b827883a 	mov	r19,r23
   25a78:	003f8206 	br	25884 <__alt_data_end+0xf4025884>
   25a7c:	010007c4 	movi	r4,31
   25a80:	20c02616 	blt	r4,r3,25b1c <__divdf3+0x82c>
   25a84:	00800804 	movi	r2,32
   25a88:	10c5c83a 	sub	r2,r2,r3
   25a8c:	888a983a 	sll	r5,r17,r2
   25a90:	40c8d83a 	srl	r4,r8,r3
   25a94:	4084983a 	sll	r2,r8,r2
   25a98:	88e2d83a 	srl	r17,r17,r3
   25a9c:	2906b03a 	or	r3,r5,r4
   25aa0:	1004c03a 	cmpne	r2,r2,zero
   25aa4:	1886b03a 	or	r3,r3,r2
   25aa8:	188001cc 	andi	r2,r3,7
   25aac:	10000726 	beq	r2,zero,25acc <__divdf3+0x7dc>
   25ab0:	188003cc 	andi	r2,r3,15
   25ab4:	01000104 	movi	r4,4
   25ab8:	11000426 	beq	r2,r4,25acc <__divdf3+0x7dc>
   25abc:	1805883a 	mov	r2,r3
   25ac0:	10c00104 	addi	r3,r2,4
   25ac4:	1885803a 	cmpltu	r2,r3,r2
   25ac8:	88a3883a 	add	r17,r17,r2
   25acc:	8880202c 	andhi	r2,r17,128
   25ad0:	10002726 	beq	r2,zero,25b70 <__divdf3+0x880>
   25ad4:	98c0004c 	andi	r3,r19,1
   25ad8:	00800044 	movi	r2,1
   25adc:	000b883a 	mov	r5,zero
   25ae0:	0025883a 	mov	r18,zero
   25ae4:	003e6106 	br	2546c <__alt_data_end+0xf402546c>
   25ae8:	85a1883a 	add	r16,r16,r22
   25aec:	8585803a 	cmpltu	r2,r16,r22
   25af0:	1705883a 	add	r2,r2,fp
   25af4:	14a5883a 	add	r18,r2,r18
   25af8:	8c7fff84 	addi	r17,r17,-2
   25afc:	003f1106 	br	25744 <__alt_data_end+0xf4025744>
   25b00:	b589883a 	add	r4,r22,r22
   25b04:	25ad803a 	cmpltu	r22,r4,r22
   25b08:	b739883a 	add	fp,r22,fp
   25b0c:	40bfff84 	addi	r2,r8,-2
   25b10:	bf2f883a 	add	r23,r23,fp
   25b14:	202d883a 	mov	r22,r4
   25b18:	003f9306 	br	25968 <__alt_data_end+0xf4025968>
   25b1c:	013ff844 	movi	r4,-31
   25b20:	2085c83a 	sub	r2,r4,r2
   25b24:	8888d83a 	srl	r4,r17,r2
   25b28:	00800804 	movi	r2,32
   25b2c:	18802126 	beq	r3,r2,25bb4 <__divdf3+0x8c4>
   25b30:	00801004 	movi	r2,64
   25b34:	10c5c83a 	sub	r2,r2,r3
   25b38:	8884983a 	sll	r2,r17,r2
   25b3c:	1204b03a 	or	r2,r2,r8
   25b40:	1004c03a 	cmpne	r2,r2,zero
   25b44:	2084b03a 	or	r2,r4,r2
   25b48:	144001cc 	andi	r17,r2,7
   25b4c:	88000d1e 	bne	r17,zero,25b84 <__divdf3+0x894>
   25b50:	000b883a 	mov	r5,zero
   25b54:	1024d0fa 	srli	r18,r2,3
   25b58:	98c0004c 	andi	r3,r19,1
   25b5c:	0005883a 	mov	r2,zero
   25b60:	9464b03a 	or	r18,r18,r17
   25b64:	003e4106 	br	2546c <__alt_data_end+0xf402546c>
   25b68:	1007883a 	mov	r3,r2
   25b6c:	0023883a 	mov	r17,zero
   25b70:	880a927a 	slli	r5,r17,9
   25b74:	1805883a 	mov	r2,r3
   25b78:	8822977a 	slli	r17,r17,29
   25b7c:	280ad33a 	srli	r5,r5,12
   25b80:	003ff406 	br	25b54 <__alt_data_end+0xf4025b54>
   25b84:	10c003cc 	andi	r3,r2,15
   25b88:	01000104 	movi	r4,4
   25b8c:	193ff626 	beq	r3,r4,25b68 <__alt_data_end+0xf4025b68>
   25b90:	0023883a 	mov	r17,zero
   25b94:	003fca06 	br	25ac0 <__alt_data_end+0xf4025ac0>
   25b98:	813fd336 	bltu	r16,r4,25ae8 <__alt_data_end+0xf4025ae8>
   25b9c:	1023883a 	mov	r17,r2
   25ba0:	003fa806 	br	25a44 <__alt_data_end+0xf4025a44>
   25ba4:	b0ffd636 	bltu	r22,r3,25b00 <__alt_data_end+0xf4025b00>
   25ba8:	1011883a 	mov	r8,r2
   25bac:	b0ff341e 	bne	r22,r3,25880 <__alt_data_end+0xf4025880>
   25bb0:	003f3406 	br	25884 <__alt_data_end+0xf4025884>
   25bb4:	0005883a 	mov	r2,zero
   25bb8:	003fe006 	br	25b3c <__alt_data_end+0xf4025b3c>
   25bbc:	00800434 	movhi	r2,16
   25bc0:	89400234 	orhi	r5,r17,8
   25bc4:	10bfffc4 	addi	r2,r2,-1
   25bc8:	b807883a 	mov	r3,r23
   25bcc:	288a703a 	and	r5,r5,r2
   25bd0:	4025883a 	mov	r18,r8
   25bd4:	003e8206 	br	255e0 <__alt_data_end+0xf40255e0>

00025bd8 <__eqdf2>:
   25bd8:	2804d53a 	srli	r2,r5,20
   25bdc:	3806d53a 	srli	r3,r7,20
   25be0:	02000434 	movhi	r8,16
   25be4:	423fffc4 	addi	r8,r8,-1
   25be8:	1081ffcc 	andi	r2,r2,2047
   25bec:	0281ffc4 	movi	r10,2047
   25bf0:	2a12703a 	and	r9,r5,r8
   25bf4:	18c1ffcc 	andi	r3,r3,2047
   25bf8:	3a10703a 	and	r8,r7,r8
   25bfc:	280ad7fa 	srli	r5,r5,31
   25c00:	380ed7fa 	srli	r7,r7,31
   25c04:	12801026 	beq	r2,r10,25c48 <__eqdf2+0x70>
   25c08:	0281ffc4 	movi	r10,2047
   25c0c:	1a800a26 	beq	r3,r10,25c38 <__eqdf2+0x60>
   25c10:	10c00226 	beq	r2,r3,25c1c <__eqdf2+0x44>
   25c14:	00800044 	movi	r2,1
   25c18:	f800283a 	ret
   25c1c:	4a3ffd1e 	bne	r9,r8,25c14 <__alt_data_end+0xf4025c14>
   25c20:	21bffc1e 	bne	r4,r6,25c14 <__alt_data_end+0xf4025c14>
   25c24:	29c00c26 	beq	r5,r7,25c58 <__eqdf2+0x80>
   25c28:	103ffa1e 	bne	r2,zero,25c14 <__alt_data_end+0xf4025c14>
   25c2c:	2244b03a 	or	r2,r4,r9
   25c30:	1004c03a 	cmpne	r2,r2,zero
   25c34:	f800283a 	ret
   25c38:	3214b03a 	or	r10,r6,r8
   25c3c:	503ff426 	beq	r10,zero,25c10 <__alt_data_end+0xf4025c10>
   25c40:	00800044 	movi	r2,1
   25c44:	f800283a 	ret
   25c48:	2254b03a 	or	r10,r4,r9
   25c4c:	503fee26 	beq	r10,zero,25c08 <__alt_data_end+0xf4025c08>
   25c50:	00800044 	movi	r2,1
   25c54:	f800283a 	ret
   25c58:	0005883a 	mov	r2,zero
   25c5c:	f800283a 	ret

00025c60 <__gedf2>:
   25c60:	2804d53a 	srli	r2,r5,20
   25c64:	3806d53a 	srli	r3,r7,20
   25c68:	02000434 	movhi	r8,16
   25c6c:	423fffc4 	addi	r8,r8,-1
   25c70:	1081ffcc 	andi	r2,r2,2047
   25c74:	0241ffc4 	movi	r9,2047
   25c78:	2a14703a 	and	r10,r5,r8
   25c7c:	18c1ffcc 	andi	r3,r3,2047
   25c80:	3a10703a 	and	r8,r7,r8
   25c84:	280ad7fa 	srli	r5,r5,31
   25c88:	380ed7fa 	srli	r7,r7,31
   25c8c:	12401d26 	beq	r2,r9,25d04 <__gedf2+0xa4>
   25c90:	0241ffc4 	movi	r9,2047
   25c94:	1a401226 	beq	r3,r9,25ce0 <__gedf2+0x80>
   25c98:	1000081e 	bne	r2,zero,25cbc <__gedf2+0x5c>
   25c9c:	2296b03a 	or	r11,r4,r10
   25ca0:	5813003a 	cmpeq	r9,r11,zero
   25ca4:	1800091e 	bne	r3,zero,25ccc <__gedf2+0x6c>
   25ca8:	3218b03a 	or	r12,r6,r8
   25cac:	6000071e 	bne	r12,zero,25ccc <__gedf2+0x6c>
   25cb0:	0005883a 	mov	r2,zero
   25cb4:	5800101e 	bne	r11,zero,25cf8 <__gedf2+0x98>
   25cb8:	f800283a 	ret
   25cbc:	18000c1e 	bne	r3,zero,25cf0 <__gedf2+0x90>
   25cc0:	3212b03a 	or	r9,r6,r8
   25cc4:	48000c26 	beq	r9,zero,25cf8 <__gedf2+0x98>
   25cc8:	0013883a 	mov	r9,zero
   25ccc:	39c03fcc 	andi	r7,r7,255
   25cd0:	48000826 	beq	r9,zero,25cf4 <__gedf2+0x94>
   25cd4:	38000926 	beq	r7,zero,25cfc <__gedf2+0x9c>
   25cd8:	00800044 	movi	r2,1
   25cdc:	f800283a 	ret
   25ce0:	3212b03a 	or	r9,r6,r8
   25ce4:	483fec26 	beq	r9,zero,25c98 <__alt_data_end+0xf4025c98>
   25ce8:	00bfff84 	movi	r2,-2
   25cec:	f800283a 	ret
   25cf0:	39c03fcc 	andi	r7,r7,255
   25cf4:	29c00626 	beq	r5,r7,25d10 <__gedf2+0xb0>
   25cf8:	283ff726 	beq	r5,zero,25cd8 <__alt_data_end+0xf4025cd8>
   25cfc:	00bfffc4 	movi	r2,-1
   25d00:	f800283a 	ret
   25d04:	2292b03a 	or	r9,r4,r10
   25d08:	483fe126 	beq	r9,zero,25c90 <__alt_data_end+0xf4025c90>
   25d0c:	003ff606 	br	25ce8 <__alt_data_end+0xf4025ce8>
   25d10:	18bff916 	blt	r3,r2,25cf8 <__alt_data_end+0xf4025cf8>
   25d14:	10c00316 	blt	r2,r3,25d24 <__gedf2+0xc4>
   25d18:	42bff736 	bltu	r8,r10,25cf8 <__alt_data_end+0xf4025cf8>
   25d1c:	52000326 	beq	r10,r8,25d2c <__gedf2+0xcc>
   25d20:	5200042e 	bgeu	r10,r8,25d34 <__gedf2+0xd4>
   25d24:	283fec1e 	bne	r5,zero,25cd8 <__alt_data_end+0xf4025cd8>
   25d28:	003ff406 	br	25cfc <__alt_data_end+0xf4025cfc>
   25d2c:	313ff236 	bltu	r6,r4,25cf8 <__alt_data_end+0xf4025cf8>
   25d30:	21bffc36 	bltu	r4,r6,25d24 <__alt_data_end+0xf4025d24>
   25d34:	0005883a 	mov	r2,zero
   25d38:	f800283a 	ret

00025d3c <__ledf2>:
   25d3c:	2804d53a 	srli	r2,r5,20
   25d40:	3810d53a 	srli	r8,r7,20
   25d44:	00c00434 	movhi	r3,16
   25d48:	18ffffc4 	addi	r3,r3,-1
   25d4c:	1081ffcc 	andi	r2,r2,2047
   25d50:	0241ffc4 	movi	r9,2047
   25d54:	28d4703a 	and	r10,r5,r3
   25d58:	4201ffcc 	andi	r8,r8,2047
   25d5c:	38c6703a 	and	r3,r7,r3
   25d60:	280ad7fa 	srli	r5,r5,31
   25d64:	380ed7fa 	srli	r7,r7,31
   25d68:	12401f26 	beq	r2,r9,25de8 <__ledf2+0xac>
   25d6c:	0241ffc4 	movi	r9,2047
   25d70:	42401426 	beq	r8,r9,25dc4 <__ledf2+0x88>
   25d74:	1000091e 	bne	r2,zero,25d9c <__ledf2+0x60>
   25d78:	2296b03a 	or	r11,r4,r10
   25d7c:	5813003a 	cmpeq	r9,r11,zero
   25d80:	29403fcc 	andi	r5,r5,255
   25d84:	40000a1e 	bne	r8,zero,25db0 <__ledf2+0x74>
   25d88:	30d8b03a 	or	r12,r6,r3
   25d8c:	6000081e 	bne	r12,zero,25db0 <__ledf2+0x74>
   25d90:	0005883a 	mov	r2,zero
   25d94:	5800111e 	bne	r11,zero,25ddc <__ledf2+0xa0>
   25d98:	f800283a 	ret
   25d9c:	29403fcc 	andi	r5,r5,255
   25da0:	40000c1e 	bne	r8,zero,25dd4 <__ledf2+0x98>
   25da4:	30d2b03a 	or	r9,r6,r3
   25da8:	48000c26 	beq	r9,zero,25ddc <__ledf2+0xa0>
   25dac:	0013883a 	mov	r9,zero
   25db0:	39c03fcc 	andi	r7,r7,255
   25db4:	48000826 	beq	r9,zero,25dd8 <__ledf2+0x9c>
   25db8:	38001126 	beq	r7,zero,25e00 <__ledf2+0xc4>
   25dbc:	00800044 	movi	r2,1
   25dc0:	f800283a 	ret
   25dc4:	30d2b03a 	or	r9,r6,r3
   25dc8:	483fea26 	beq	r9,zero,25d74 <__alt_data_end+0xf4025d74>
   25dcc:	00800084 	movi	r2,2
   25dd0:	f800283a 	ret
   25dd4:	39c03fcc 	andi	r7,r7,255
   25dd8:	39400726 	beq	r7,r5,25df8 <__ledf2+0xbc>
   25ddc:	2800081e 	bne	r5,zero,25e00 <__ledf2+0xc4>
   25de0:	00800044 	movi	r2,1
   25de4:	f800283a 	ret
   25de8:	2292b03a 	or	r9,r4,r10
   25dec:	483fdf26 	beq	r9,zero,25d6c <__alt_data_end+0xf4025d6c>
   25df0:	00800084 	movi	r2,2
   25df4:	f800283a 	ret
   25df8:	4080030e 	bge	r8,r2,25e08 <__ledf2+0xcc>
   25dfc:	383fef26 	beq	r7,zero,25dbc <__alt_data_end+0xf4025dbc>
   25e00:	00bfffc4 	movi	r2,-1
   25e04:	f800283a 	ret
   25e08:	123feb16 	blt	r2,r8,25db8 <__alt_data_end+0xf4025db8>
   25e0c:	1abff336 	bltu	r3,r10,25ddc <__alt_data_end+0xf4025ddc>
   25e10:	50c00326 	beq	r10,r3,25e20 <__ledf2+0xe4>
   25e14:	50c0042e 	bgeu	r10,r3,25e28 <__ledf2+0xec>
   25e18:	283fe81e 	bne	r5,zero,25dbc <__alt_data_end+0xf4025dbc>
   25e1c:	003ff806 	br	25e00 <__alt_data_end+0xf4025e00>
   25e20:	313fee36 	bltu	r6,r4,25ddc <__alt_data_end+0xf4025ddc>
   25e24:	21bffc36 	bltu	r4,r6,25e18 <__alt_data_end+0xf4025e18>
   25e28:	0005883a 	mov	r2,zero
   25e2c:	f800283a 	ret

00025e30 <__muldf3>:
   25e30:	defff304 	addi	sp,sp,-52
   25e34:	2804d53a 	srli	r2,r5,20
   25e38:	dd800915 	stw	r22,36(sp)
   25e3c:	282cd7fa 	srli	r22,r5,31
   25e40:	dc000315 	stw	r16,12(sp)
   25e44:	04000434 	movhi	r16,16
   25e48:	dd400815 	stw	r21,32(sp)
   25e4c:	dc800515 	stw	r18,20(sp)
   25e50:	843fffc4 	addi	r16,r16,-1
   25e54:	dfc00c15 	stw	ra,48(sp)
   25e58:	df000b15 	stw	fp,44(sp)
   25e5c:	ddc00a15 	stw	r23,40(sp)
   25e60:	dd000715 	stw	r20,28(sp)
   25e64:	dcc00615 	stw	r19,24(sp)
   25e68:	dc400415 	stw	r17,16(sp)
   25e6c:	1481ffcc 	andi	r18,r2,2047
   25e70:	2c20703a 	and	r16,r5,r16
   25e74:	b02b883a 	mov	r21,r22
   25e78:	b2403fcc 	andi	r9,r22,255
   25e7c:	90006026 	beq	r18,zero,26000 <__muldf3+0x1d0>
   25e80:	0081ffc4 	movi	r2,2047
   25e84:	2029883a 	mov	r20,r4
   25e88:	90803626 	beq	r18,r2,25f64 <__muldf3+0x134>
   25e8c:	80800434 	orhi	r2,r16,16
   25e90:	100490fa 	slli	r2,r2,3
   25e94:	2020d77a 	srli	r16,r4,29
   25e98:	202890fa 	slli	r20,r4,3
   25e9c:	94bf0044 	addi	r18,r18,-1023
   25ea0:	80a0b03a 	or	r16,r16,r2
   25ea4:	0027883a 	mov	r19,zero
   25ea8:	0039883a 	mov	fp,zero
   25eac:	3804d53a 	srli	r2,r7,20
   25eb0:	382ed7fa 	srli	r23,r7,31
   25eb4:	04400434 	movhi	r17,16
   25eb8:	8c7fffc4 	addi	r17,r17,-1
   25ebc:	1081ffcc 	andi	r2,r2,2047
   25ec0:	3011883a 	mov	r8,r6
   25ec4:	3c62703a 	and	r17,r7,r17
   25ec8:	ba803fcc 	andi	r10,r23,255
   25ecc:	10006d26 	beq	r2,zero,26084 <__muldf3+0x254>
   25ed0:	00c1ffc4 	movi	r3,2047
   25ed4:	10c06526 	beq	r2,r3,2606c <__muldf3+0x23c>
   25ed8:	88c00434 	orhi	r3,r17,16
   25edc:	180690fa 	slli	r3,r3,3
   25ee0:	3022d77a 	srli	r17,r6,29
   25ee4:	301090fa 	slli	r8,r6,3
   25ee8:	10bf0044 	addi	r2,r2,-1023
   25eec:	88e2b03a 	or	r17,r17,r3
   25ef0:	000b883a 	mov	r5,zero
   25ef4:	9085883a 	add	r2,r18,r2
   25ef8:	2cc8b03a 	or	r4,r5,r19
   25efc:	00c003c4 	movi	r3,15
   25f00:	bdacf03a 	xor	r22,r23,r22
   25f04:	12c00044 	addi	r11,r2,1
   25f08:	19009936 	bltu	r3,r4,26170 <__muldf3+0x340>
   25f0c:	200890ba 	slli	r4,r4,2
   25f10:	00c000b4 	movhi	r3,2
   25f14:	18d7c904 	addi	r3,r3,24356
   25f18:	20c9883a 	add	r4,r4,r3
   25f1c:	20c00017 	ldw	r3,0(r4)
   25f20:	1800683a 	jmp	r3
   25f24:	00026170 	cmpltui	zero,zero,2437
   25f28:	00025f84 	movi	zero,2430
   25f2c:	00025f84 	movi	zero,2430
   25f30:	00025f80 	call	25f8 <__alt_mem_onchip_memory-0x1da08>
   25f34:	0002614c 	andi	zero,zero,2437
   25f38:	0002614c 	andi	zero,zero,2437
   25f3c:	00026134 	movhi	zero,2436
   25f40:	00025f80 	call	25f8 <__alt_mem_onchip_memory-0x1da08>
   25f44:	0002614c 	andi	zero,zero,2437
   25f48:	00026134 	movhi	zero,2436
   25f4c:	0002614c 	andi	zero,zero,2437
   25f50:	00025f80 	call	25f8 <__alt_mem_onchip_memory-0x1da08>
   25f54:	0002615c 	xori	zero,zero,2437
   25f58:	0002615c 	xori	zero,zero,2437
   25f5c:	0002615c 	xori	zero,zero,2437
   25f60:	00026378 	rdprs	zero,zero,2445
   25f64:	2404b03a 	or	r2,r4,r16
   25f68:	10006f1e 	bne	r2,zero,26128 <__muldf3+0x2f8>
   25f6c:	04c00204 	movi	r19,8
   25f70:	0021883a 	mov	r16,zero
   25f74:	0029883a 	mov	r20,zero
   25f78:	07000084 	movi	fp,2
   25f7c:	003fcb06 	br	25eac <__alt_data_end+0xf4025eac>
   25f80:	502d883a 	mov	r22,r10
   25f84:	00800084 	movi	r2,2
   25f88:	28805726 	beq	r5,r2,260e8 <__muldf3+0x2b8>
   25f8c:	008000c4 	movi	r2,3
   25f90:	28816626 	beq	r5,r2,2652c <__muldf3+0x6fc>
   25f94:	00800044 	movi	r2,1
   25f98:	2881411e 	bne	r5,r2,264a0 <__muldf3+0x670>
   25f9c:	b02b883a 	mov	r21,r22
   25fa0:	0005883a 	mov	r2,zero
   25fa4:	000b883a 	mov	r5,zero
   25fa8:	0029883a 	mov	r20,zero
   25fac:	1004953a 	slli	r2,r2,20
   25fb0:	a8c03fcc 	andi	r3,r21,255
   25fb4:	04400434 	movhi	r17,16
   25fb8:	8c7fffc4 	addi	r17,r17,-1
   25fbc:	180697fa 	slli	r3,r3,31
   25fc0:	2c4a703a 	and	r5,r5,r17
   25fc4:	288ab03a 	or	r5,r5,r2
   25fc8:	28c6b03a 	or	r3,r5,r3
   25fcc:	a005883a 	mov	r2,r20
   25fd0:	dfc00c17 	ldw	ra,48(sp)
   25fd4:	df000b17 	ldw	fp,44(sp)
   25fd8:	ddc00a17 	ldw	r23,40(sp)
   25fdc:	dd800917 	ldw	r22,36(sp)
   25fe0:	dd400817 	ldw	r21,32(sp)
   25fe4:	dd000717 	ldw	r20,28(sp)
   25fe8:	dcc00617 	ldw	r19,24(sp)
   25fec:	dc800517 	ldw	r18,20(sp)
   25ff0:	dc400417 	ldw	r17,16(sp)
   25ff4:	dc000317 	ldw	r16,12(sp)
   25ff8:	dec00d04 	addi	sp,sp,52
   25ffc:	f800283a 	ret
   26000:	2404b03a 	or	r2,r4,r16
   26004:	2027883a 	mov	r19,r4
   26008:	10004226 	beq	r2,zero,26114 <__muldf3+0x2e4>
   2600c:	8000fc26 	beq	r16,zero,26400 <__muldf3+0x5d0>
   26010:	8009883a 	mov	r4,r16
   26014:	d9800215 	stw	r6,8(sp)
   26018:	d9c00015 	stw	r7,0(sp)
   2601c:	da400115 	stw	r9,4(sp)
   26020:	00272580 	call	27258 <__clzsi2>
   26024:	d9800217 	ldw	r6,8(sp)
   26028:	d9c00017 	ldw	r7,0(sp)
   2602c:	da400117 	ldw	r9,4(sp)
   26030:	113ffd44 	addi	r4,r2,-11
   26034:	00c00704 	movi	r3,28
   26038:	1900ed16 	blt	r3,r4,263f0 <__muldf3+0x5c0>
   2603c:	00c00744 	movi	r3,29
   26040:	147ffe04 	addi	r17,r2,-8
   26044:	1907c83a 	sub	r3,r3,r4
   26048:	8460983a 	sll	r16,r16,r17
   2604c:	98c6d83a 	srl	r3,r19,r3
   26050:	9c68983a 	sll	r20,r19,r17
   26054:	1c20b03a 	or	r16,r3,r16
   26058:	1080fcc4 	addi	r2,r2,1011
   2605c:	00a5c83a 	sub	r18,zero,r2
   26060:	0027883a 	mov	r19,zero
   26064:	0039883a 	mov	fp,zero
   26068:	003f9006 	br	25eac <__alt_data_end+0xf4025eac>
   2606c:	3446b03a 	or	r3,r6,r17
   26070:	1800261e 	bne	r3,zero,2610c <__muldf3+0x2dc>
   26074:	0023883a 	mov	r17,zero
   26078:	0011883a 	mov	r8,zero
   2607c:	01400084 	movi	r5,2
   26080:	003f9c06 	br	25ef4 <__alt_data_end+0xf4025ef4>
   26084:	3446b03a 	or	r3,r6,r17
   26088:	18001c26 	beq	r3,zero,260fc <__muldf3+0x2cc>
   2608c:	8800ce26 	beq	r17,zero,263c8 <__muldf3+0x598>
   26090:	8809883a 	mov	r4,r17
   26094:	d9800215 	stw	r6,8(sp)
   26098:	da400115 	stw	r9,4(sp)
   2609c:	da800015 	stw	r10,0(sp)
   260a0:	00272580 	call	27258 <__clzsi2>
   260a4:	d9800217 	ldw	r6,8(sp)
   260a8:	da400117 	ldw	r9,4(sp)
   260ac:	da800017 	ldw	r10,0(sp)
   260b0:	113ffd44 	addi	r4,r2,-11
   260b4:	00c00704 	movi	r3,28
   260b8:	1900bf16 	blt	r3,r4,263b8 <__muldf3+0x588>
   260bc:	00c00744 	movi	r3,29
   260c0:	123ffe04 	addi	r8,r2,-8
   260c4:	1907c83a 	sub	r3,r3,r4
   260c8:	8a22983a 	sll	r17,r17,r8
   260cc:	30c6d83a 	srl	r3,r6,r3
   260d0:	3210983a 	sll	r8,r6,r8
   260d4:	1c62b03a 	or	r17,r3,r17
   260d8:	1080fcc4 	addi	r2,r2,1011
   260dc:	0085c83a 	sub	r2,zero,r2
   260e0:	000b883a 	mov	r5,zero
   260e4:	003f8306 	br	25ef4 <__alt_data_end+0xf4025ef4>
   260e8:	b02b883a 	mov	r21,r22
   260ec:	0081ffc4 	movi	r2,2047
   260f0:	000b883a 	mov	r5,zero
   260f4:	0029883a 	mov	r20,zero
   260f8:	003fac06 	br	25fac <__alt_data_end+0xf4025fac>
   260fc:	0023883a 	mov	r17,zero
   26100:	0011883a 	mov	r8,zero
   26104:	01400044 	movi	r5,1
   26108:	003f7a06 	br	25ef4 <__alt_data_end+0xf4025ef4>
   2610c:	014000c4 	movi	r5,3
   26110:	003f7806 	br	25ef4 <__alt_data_end+0xf4025ef4>
   26114:	04c00104 	movi	r19,4
   26118:	0021883a 	mov	r16,zero
   2611c:	0029883a 	mov	r20,zero
   26120:	07000044 	movi	fp,1
   26124:	003f6106 	br	25eac <__alt_data_end+0xf4025eac>
   26128:	04c00304 	movi	r19,12
   2612c:	070000c4 	movi	fp,3
   26130:	003f5e06 	br	25eac <__alt_data_end+0xf4025eac>
   26134:	01400434 	movhi	r5,16
   26138:	002b883a 	mov	r21,zero
   2613c:	297fffc4 	addi	r5,r5,-1
   26140:	053fffc4 	movi	r20,-1
   26144:	0081ffc4 	movi	r2,2047
   26148:	003f9806 	br	25fac <__alt_data_end+0xf4025fac>
   2614c:	8023883a 	mov	r17,r16
   26150:	a011883a 	mov	r8,r20
   26154:	e00b883a 	mov	r5,fp
   26158:	003f8a06 	br	25f84 <__alt_data_end+0xf4025f84>
   2615c:	8023883a 	mov	r17,r16
   26160:	a011883a 	mov	r8,r20
   26164:	482d883a 	mov	r22,r9
   26168:	e00b883a 	mov	r5,fp
   2616c:	003f8506 	br	25f84 <__alt_data_end+0xf4025f84>
   26170:	a00ad43a 	srli	r5,r20,16
   26174:	401ad43a 	srli	r13,r8,16
   26178:	a53fffcc 	andi	r20,r20,65535
   2617c:	423fffcc 	andi	r8,r8,65535
   26180:	4519383a 	mul	r12,r8,r20
   26184:	4147383a 	mul	r3,r8,r5
   26188:	6d09383a 	mul	r4,r13,r20
   2618c:	600cd43a 	srli	r6,r12,16
   26190:	2b5d383a 	mul	r14,r5,r13
   26194:	20c9883a 	add	r4,r4,r3
   26198:	310d883a 	add	r6,r6,r4
   2619c:	30c0022e 	bgeu	r6,r3,261a8 <__muldf3+0x378>
   261a0:	00c00074 	movhi	r3,1
   261a4:	70dd883a 	add	r14,r14,r3
   261a8:	8826d43a 	srli	r19,r17,16
   261ac:	8bffffcc 	andi	r15,r17,65535
   261b0:	7d23383a 	mul	r17,r15,r20
   261b4:	7949383a 	mul	r4,r15,r5
   261b8:	9d29383a 	mul	r20,r19,r20
   261bc:	8814d43a 	srli	r10,r17,16
   261c0:	3012943a 	slli	r9,r6,16
   261c4:	a129883a 	add	r20,r20,r4
   261c8:	633fffcc 	andi	r12,r12,65535
   261cc:	5515883a 	add	r10,r10,r20
   261d0:	3006d43a 	srli	r3,r6,16
   261d4:	4b13883a 	add	r9,r9,r12
   261d8:	2ccb383a 	mul	r5,r5,r19
   261dc:	5100022e 	bgeu	r10,r4,261e8 <__muldf3+0x3b8>
   261e0:	01000074 	movhi	r4,1
   261e4:	290b883a 	add	r5,r5,r4
   261e8:	802ad43a 	srli	r21,r16,16
   261ec:	843fffcc 	andi	r16,r16,65535
   261f0:	440d383a 	mul	r6,r8,r16
   261f4:	4565383a 	mul	r18,r8,r21
   261f8:	8349383a 	mul	r4,r16,r13
   261fc:	500e943a 	slli	r7,r10,16
   26200:	3010d43a 	srli	r8,r6,16
   26204:	5028d43a 	srli	r20,r10,16
   26208:	2489883a 	add	r4,r4,r18
   2620c:	8abfffcc 	andi	r10,r17,65535
   26210:	3a95883a 	add	r10,r7,r10
   26214:	4119883a 	add	r12,r8,r4
   26218:	a169883a 	add	r20,r20,r5
   2621c:	1a87883a 	add	r3,r3,r10
   26220:	6d5b383a 	mul	r13,r13,r21
   26224:	6480022e 	bgeu	r12,r18,26230 <__muldf3+0x400>
   26228:	01000074 	movhi	r4,1
   2622c:	691b883a 	add	r13,r13,r4
   26230:	7c25383a 	mul	r18,r15,r16
   26234:	7d4b383a 	mul	r5,r15,r21
   26238:	84cf383a 	mul	r7,r16,r19
   2623c:	901ed43a 	srli	r15,r18,16
   26240:	6008d43a 	srli	r4,r12,16
   26244:	6010943a 	slli	r8,r12,16
   26248:	394f883a 	add	r7,r7,r5
   2624c:	333fffcc 	andi	r12,r6,65535
   26250:	79df883a 	add	r15,r15,r7
   26254:	235b883a 	add	r13,r4,r13
   26258:	9d63383a 	mul	r17,r19,r21
   2625c:	4309883a 	add	r4,r8,r12
   26260:	7940022e 	bgeu	r15,r5,2626c <__muldf3+0x43c>
   26264:	01400074 	movhi	r5,1
   26268:	8963883a 	add	r17,r17,r5
   2626c:	780a943a 	slli	r5,r15,16
   26270:	91bfffcc 	andi	r6,r18,65535
   26274:	70c7883a 	add	r3,r14,r3
   26278:	298d883a 	add	r6,r5,r6
   2627c:	1a8f803a 	cmpltu	r7,r3,r10
   26280:	350b883a 	add	r5,r6,r20
   26284:	20c7883a 	add	r3,r4,r3
   26288:	3955883a 	add	r10,r7,r5
   2628c:	1909803a 	cmpltu	r4,r3,r4
   26290:	6a91883a 	add	r8,r13,r10
   26294:	780cd43a 	srli	r6,r15,16
   26298:	2219883a 	add	r12,r4,r8
   2629c:	2d0b803a 	cmpltu	r5,r5,r20
   262a0:	51cf803a 	cmpltu	r7,r10,r7
   262a4:	29ceb03a 	or	r7,r5,r7
   262a8:	4351803a 	cmpltu	r8,r8,r13
   262ac:	610b803a 	cmpltu	r5,r12,r4
   262b0:	4148b03a 	or	r4,r8,r5
   262b4:	398f883a 	add	r7,r7,r6
   262b8:	3909883a 	add	r4,r7,r4
   262bc:	1810927a 	slli	r8,r3,9
   262c0:	2449883a 	add	r4,r4,r17
   262c4:	2008927a 	slli	r4,r4,9
   262c8:	6022d5fa 	srli	r17,r12,23
   262cc:	1806d5fa 	srli	r3,r3,23
   262d0:	4252b03a 	or	r9,r8,r9
   262d4:	600a927a 	slli	r5,r12,9
   262d8:	4810c03a 	cmpne	r8,r9,zero
   262dc:	2462b03a 	or	r17,r4,r17
   262e0:	40c6b03a 	or	r3,r8,r3
   262e4:	8900402c 	andhi	r4,r17,256
   262e8:	1950b03a 	or	r8,r3,r5
   262ec:	20000726 	beq	r4,zero,2630c <__muldf3+0x4dc>
   262f0:	4006d07a 	srli	r3,r8,1
   262f4:	880497fa 	slli	r2,r17,31
   262f8:	4200004c 	andi	r8,r8,1
   262fc:	8822d07a 	srli	r17,r17,1
   26300:	1a10b03a 	or	r8,r3,r8
   26304:	1210b03a 	or	r8,r2,r8
   26308:	5805883a 	mov	r2,r11
   2630c:	1140ffc4 	addi	r5,r2,1023
   26310:	0140440e 	bge	zero,r5,26424 <__muldf3+0x5f4>
   26314:	40c001cc 	andi	r3,r8,7
   26318:	18000726 	beq	r3,zero,26338 <__muldf3+0x508>
   2631c:	40c003cc 	andi	r3,r8,15
   26320:	01000104 	movi	r4,4
   26324:	19000426 	beq	r3,r4,26338 <__muldf3+0x508>
   26328:	4107883a 	add	r3,r8,r4
   2632c:	1a11803a 	cmpltu	r8,r3,r8
   26330:	8a23883a 	add	r17,r17,r8
   26334:	1811883a 	mov	r8,r3
   26338:	88c0402c 	andhi	r3,r17,256
   2633c:	18000426 	beq	r3,zero,26350 <__muldf3+0x520>
   26340:	11410004 	addi	r5,r2,1024
   26344:	00bfc034 	movhi	r2,65280
   26348:	10bfffc4 	addi	r2,r2,-1
   2634c:	88a2703a 	and	r17,r17,r2
   26350:	0081ff84 	movi	r2,2046
   26354:	117f6416 	blt	r2,r5,260e8 <__alt_data_end+0xf40260e8>
   26358:	8828977a 	slli	r20,r17,29
   2635c:	4010d0fa 	srli	r8,r8,3
   26360:	8822927a 	slli	r17,r17,9
   26364:	2881ffcc 	andi	r2,r5,2047
   26368:	a228b03a 	or	r20,r20,r8
   2636c:	880ad33a 	srli	r5,r17,12
   26370:	b02b883a 	mov	r21,r22
   26374:	003f0d06 	br	25fac <__alt_data_end+0xf4025fac>
   26378:	8080022c 	andhi	r2,r16,8
   2637c:	10000926 	beq	r2,zero,263a4 <__muldf3+0x574>
   26380:	8880022c 	andhi	r2,r17,8
   26384:	1000071e 	bne	r2,zero,263a4 <__muldf3+0x574>
   26388:	00800434 	movhi	r2,16
   2638c:	89400234 	orhi	r5,r17,8
   26390:	10bfffc4 	addi	r2,r2,-1
   26394:	b82b883a 	mov	r21,r23
   26398:	288a703a 	and	r5,r5,r2
   2639c:	4029883a 	mov	r20,r8
   263a0:	003f6806 	br	26144 <__alt_data_end+0xf4026144>
   263a4:	00800434 	movhi	r2,16
   263a8:	81400234 	orhi	r5,r16,8
   263ac:	10bfffc4 	addi	r2,r2,-1
   263b0:	288a703a 	and	r5,r5,r2
   263b4:	003f6306 	br	26144 <__alt_data_end+0xf4026144>
   263b8:	147ff604 	addi	r17,r2,-40
   263bc:	3462983a 	sll	r17,r6,r17
   263c0:	0011883a 	mov	r8,zero
   263c4:	003f4406 	br	260d8 <__alt_data_end+0xf40260d8>
   263c8:	3009883a 	mov	r4,r6
   263cc:	d9800215 	stw	r6,8(sp)
   263d0:	da400115 	stw	r9,4(sp)
   263d4:	da800015 	stw	r10,0(sp)
   263d8:	00272580 	call	27258 <__clzsi2>
   263dc:	10800804 	addi	r2,r2,32
   263e0:	da800017 	ldw	r10,0(sp)
   263e4:	da400117 	ldw	r9,4(sp)
   263e8:	d9800217 	ldw	r6,8(sp)
   263ec:	003f3006 	br	260b0 <__alt_data_end+0xf40260b0>
   263f0:	143ff604 	addi	r16,r2,-40
   263f4:	9c20983a 	sll	r16,r19,r16
   263f8:	0029883a 	mov	r20,zero
   263fc:	003f1606 	br	26058 <__alt_data_end+0xf4026058>
   26400:	d9800215 	stw	r6,8(sp)
   26404:	d9c00015 	stw	r7,0(sp)
   26408:	da400115 	stw	r9,4(sp)
   2640c:	00272580 	call	27258 <__clzsi2>
   26410:	10800804 	addi	r2,r2,32
   26414:	da400117 	ldw	r9,4(sp)
   26418:	d9c00017 	ldw	r7,0(sp)
   2641c:	d9800217 	ldw	r6,8(sp)
   26420:	003f0306 	br	26030 <__alt_data_end+0xf4026030>
   26424:	00c00044 	movi	r3,1
   26428:	1947c83a 	sub	r3,r3,r5
   2642c:	00800e04 	movi	r2,56
   26430:	10feda16 	blt	r2,r3,25f9c <__alt_data_end+0xf4025f9c>
   26434:	008007c4 	movi	r2,31
   26438:	10c01b16 	blt	r2,r3,264a8 <__muldf3+0x678>
   2643c:	00800804 	movi	r2,32
   26440:	10c5c83a 	sub	r2,r2,r3
   26444:	888a983a 	sll	r5,r17,r2
   26448:	40c8d83a 	srl	r4,r8,r3
   2644c:	4084983a 	sll	r2,r8,r2
   26450:	88e2d83a 	srl	r17,r17,r3
   26454:	2906b03a 	or	r3,r5,r4
   26458:	1004c03a 	cmpne	r2,r2,zero
   2645c:	1886b03a 	or	r3,r3,r2
   26460:	188001cc 	andi	r2,r3,7
   26464:	10000726 	beq	r2,zero,26484 <__muldf3+0x654>
   26468:	188003cc 	andi	r2,r3,15
   2646c:	01000104 	movi	r4,4
   26470:	11000426 	beq	r2,r4,26484 <__muldf3+0x654>
   26474:	1805883a 	mov	r2,r3
   26478:	10c00104 	addi	r3,r2,4
   2647c:	1885803a 	cmpltu	r2,r3,r2
   26480:	88a3883a 	add	r17,r17,r2
   26484:	8880202c 	andhi	r2,r17,128
   26488:	10001c26 	beq	r2,zero,264fc <__muldf3+0x6cc>
   2648c:	b02b883a 	mov	r21,r22
   26490:	00800044 	movi	r2,1
   26494:	000b883a 	mov	r5,zero
   26498:	0029883a 	mov	r20,zero
   2649c:	003ec306 	br	25fac <__alt_data_end+0xf4025fac>
   264a0:	5805883a 	mov	r2,r11
   264a4:	003f9906 	br	2630c <__alt_data_end+0xf402630c>
   264a8:	00bff844 	movi	r2,-31
   264ac:	1145c83a 	sub	r2,r2,r5
   264b0:	8888d83a 	srl	r4,r17,r2
   264b4:	00800804 	movi	r2,32
   264b8:	18801a26 	beq	r3,r2,26524 <__muldf3+0x6f4>
   264bc:	00801004 	movi	r2,64
   264c0:	10c5c83a 	sub	r2,r2,r3
   264c4:	8884983a 	sll	r2,r17,r2
   264c8:	1204b03a 	or	r2,r2,r8
   264cc:	1004c03a 	cmpne	r2,r2,zero
   264d0:	2084b03a 	or	r2,r4,r2
   264d4:	144001cc 	andi	r17,r2,7
   264d8:	88000d1e 	bne	r17,zero,26510 <__muldf3+0x6e0>
   264dc:	000b883a 	mov	r5,zero
   264e0:	1028d0fa 	srli	r20,r2,3
   264e4:	b02b883a 	mov	r21,r22
   264e8:	0005883a 	mov	r2,zero
   264ec:	a468b03a 	or	r20,r20,r17
   264f0:	003eae06 	br	25fac <__alt_data_end+0xf4025fac>
   264f4:	1007883a 	mov	r3,r2
   264f8:	0023883a 	mov	r17,zero
   264fc:	880a927a 	slli	r5,r17,9
   26500:	1805883a 	mov	r2,r3
   26504:	8822977a 	slli	r17,r17,29
   26508:	280ad33a 	srli	r5,r5,12
   2650c:	003ff406 	br	264e0 <__alt_data_end+0xf40264e0>
   26510:	10c003cc 	andi	r3,r2,15
   26514:	01000104 	movi	r4,4
   26518:	193ff626 	beq	r3,r4,264f4 <__alt_data_end+0xf40264f4>
   2651c:	0023883a 	mov	r17,zero
   26520:	003fd506 	br	26478 <__alt_data_end+0xf4026478>
   26524:	0005883a 	mov	r2,zero
   26528:	003fe706 	br	264c8 <__alt_data_end+0xf40264c8>
   2652c:	00800434 	movhi	r2,16
   26530:	89400234 	orhi	r5,r17,8
   26534:	10bfffc4 	addi	r2,r2,-1
   26538:	b02b883a 	mov	r21,r22
   2653c:	288a703a 	and	r5,r5,r2
   26540:	4029883a 	mov	r20,r8
   26544:	003eff06 	br	26144 <__alt_data_end+0xf4026144>

00026548 <__subdf3>:
   26548:	02000434 	movhi	r8,16
   2654c:	423fffc4 	addi	r8,r8,-1
   26550:	defffb04 	addi	sp,sp,-20
   26554:	2a14703a 	and	r10,r5,r8
   26558:	3812d53a 	srli	r9,r7,20
   2655c:	3a10703a 	and	r8,r7,r8
   26560:	2006d77a 	srli	r3,r4,29
   26564:	3004d77a 	srli	r2,r6,29
   26568:	dc000015 	stw	r16,0(sp)
   2656c:	501490fa 	slli	r10,r10,3
   26570:	2820d53a 	srli	r16,r5,20
   26574:	401090fa 	slli	r8,r8,3
   26578:	dc800215 	stw	r18,8(sp)
   2657c:	dc400115 	stw	r17,4(sp)
   26580:	dfc00415 	stw	ra,16(sp)
   26584:	202290fa 	slli	r17,r4,3
   26588:	dcc00315 	stw	r19,12(sp)
   2658c:	4a41ffcc 	andi	r9,r9,2047
   26590:	0101ffc4 	movi	r4,2047
   26594:	2824d7fa 	srli	r18,r5,31
   26598:	8401ffcc 	andi	r16,r16,2047
   2659c:	50c6b03a 	or	r3,r10,r3
   265a0:	380ed7fa 	srli	r7,r7,31
   265a4:	408ab03a 	or	r5,r8,r2
   265a8:	300c90fa 	slli	r6,r6,3
   265ac:	49009626 	beq	r9,r4,26808 <__subdf3+0x2c0>
   265b0:	39c0005c 	xori	r7,r7,1
   265b4:	8245c83a 	sub	r2,r16,r9
   265b8:	3c807426 	beq	r7,r18,2678c <__subdf3+0x244>
   265bc:	0080af0e 	bge	zero,r2,2687c <__subdf3+0x334>
   265c0:	48002a1e 	bne	r9,zero,2666c <__subdf3+0x124>
   265c4:	2988b03a 	or	r4,r5,r6
   265c8:	20009a1e 	bne	r4,zero,26834 <__subdf3+0x2ec>
   265cc:	888001cc 	andi	r2,r17,7
   265d0:	10000726 	beq	r2,zero,265f0 <__subdf3+0xa8>
   265d4:	888003cc 	andi	r2,r17,15
   265d8:	01000104 	movi	r4,4
   265dc:	11000426 	beq	r2,r4,265f0 <__subdf3+0xa8>
   265e0:	890b883a 	add	r5,r17,r4
   265e4:	2c63803a 	cmpltu	r17,r5,r17
   265e8:	1c47883a 	add	r3,r3,r17
   265ec:	2823883a 	mov	r17,r5
   265f0:	1880202c 	andhi	r2,r3,128
   265f4:	10005926 	beq	r2,zero,2675c <__subdf3+0x214>
   265f8:	84000044 	addi	r16,r16,1
   265fc:	0081ffc4 	movi	r2,2047
   26600:	8080be26 	beq	r16,r2,268fc <__subdf3+0x3b4>
   26604:	017fe034 	movhi	r5,65408
   26608:	297fffc4 	addi	r5,r5,-1
   2660c:	1946703a 	and	r3,r3,r5
   26610:	1804977a 	slli	r2,r3,29
   26614:	1806927a 	slli	r3,r3,9
   26618:	8822d0fa 	srli	r17,r17,3
   2661c:	8401ffcc 	andi	r16,r16,2047
   26620:	180ad33a 	srli	r5,r3,12
   26624:	9100004c 	andi	r4,r18,1
   26628:	1444b03a 	or	r2,r2,r17
   2662c:	80c1ffcc 	andi	r3,r16,2047
   26630:	1820953a 	slli	r16,r3,20
   26634:	20c03fcc 	andi	r3,r4,255
   26638:	180897fa 	slli	r4,r3,31
   2663c:	00c00434 	movhi	r3,16
   26640:	18ffffc4 	addi	r3,r3,-1
   26644:	28c6703a 	and	r3,r5,r3
   26648:	1c06b03a 	or	r3,r3,r16
   2664c:	1906b03a 	or	r3,r3,r4
   26650:	dfc00417 	ldw	ra,16(sp)
   26654:	dcc00317 	ldw	r19,12(sp)
   26658:	dc800217 	ldw	r18,8(sp)
   2665c:	dc400117 	ldw	r17,4(sp)
   26660:	dc000017 	ldw	r16,0(sp)
   26664:	dec00504 	addi	sp,sp,20
   26668:	f800283a 	ret
   2666c:	0101ffc4 	movi	r4,2047
   26670:	813fd626 	beq	r16,r4,265cc <__alt_data_end+0xf40265cc>
   26674:	29402034 	orhi	r5,r5,128
   26678:	01000e04 	movi	r4,56
   2667c:	2080a316 	blt	r4,r2,2690c <__subdf3+0x3c4>
   26680:	010007c4 	movi	r4,31
   26684:	2080c616 	blt	r4,r2,269a0 <__subdf3+0x458>
   26688:	01000804 	movi	r4,32
   2668c:	2089c83a 	sub	r4,r4,r2
   26690:	2910983a 	sll	r8,r5,r4
   26694:	308ed83a 	srl	r7,r6,r2
   26698:	3108983a 	sll	r4,r6,r4
   2669c:	2884d83a 	srl	r2,r5,r2
   266a0:	41ccb03a 	or	r6,r8,r7
   266a4:	2008c03a 	cmpne	r4,r4,zero
   266a8:	310cb03a 	or	r6,r6,r4
   266ac:	898dc83a 	sub	r6,r17,r6
   266b0:	89a3803a 	cmpltu	r17,r17,r6
   266b4:	1887c83a 	sub	r3,r3,r2
   266b8:	1c47c83a 	sub	r3,r3,r17
   266bc:	3023883a 	mov	r17,r6
   266c0:	1880202c 	andhi	r2,r3,128
   266c4:	10002326 	beq	r2,zero,26754 <__subdf3+0x20c>
   266c8:	04c02034 	movhi	r19,128
   266cc:	9cffffc4 	addi	r19,r19,-1
   266d0:	1ce6703a 	and	r19,r3,r19
   266d4:	98007a26 	beq	r19,zero,268c0 <__subdf3+0x378>
   266d8:	9809883a 	mov	r4,r19
   266dc:	00272580 	call	27258 <__clzsi2>
   266e0:	113ffe04 	addi	r4,r2,-8
   266e4:	00c007c4 	movi	r3,31
   266e8:	19007b16 	blt	r3,r4,268d8 <__subdf3+0x390>
   266ec:	00800804 	movi	r2,32
   266f0:	1105c83a 	sub	r2,r2,r4
   266f4:	8884d83a 	srl	r2,r17,r2
   266f8:	9906983a 	sll	r3,r19,r4
   266fc:	8922983a 	sll	r17,r17,r4
   26700:	10c4b03a 	or	r2,r2,r3
   26704:	24007816 	blt	r4,r16,268e8 <__subdf3+0x3a0>
   26708:	2421c83a 	sub	r16,r4,r16
   2670c:	80c00044 	addi	r3,r16,1
   26710:	010007c4 	movi	r4,31
   26714:	20c09516 	blt	r4,r3,2696c <__subdf3+0x424>
   26718:	01400804 	movi	r5,32
   2671c:	28cbc83a 	sub	r5,r5,r3
   26720:	88c8d83a 	srl	r4,r17,r3
   26724:	8962983a 	sll	r17,r17,r5
   26728:	114a983a 	sll	r5,r2,r5
   2672c:	10c6d83a 	srl	r3,r2,r3
   26730:	8804c03a 	cmpne	r2,r17,zero
   26734:	290ab03a 	or	r5,r5,r4
   26738:	28a2b03a 	or	r17,r5,r2
   2673c:	0021883a 	mov	r16,zero
   26740:	003fa206 	br	265cc <__alt_data_end+0xf40265cc>
   26744:	2090b03a 	or	r8,r4,r2
   26748:	40018e26 	beq	r8,zero,26d84 <__subdf3+0x83c>
   2674c:	1007883a 	mov	r3,r2
   26750:	2023883a 	mov	r17,r4
   26754:	888001cc 	andi	r2,r17,7
   26758:	103f9e1e 	bne	r2,zero,265d4 <__alt_data_end+0xf40265d4>
   2675c:	1804977a 	slli	r2,r3,29
   26760:	8822d0fa 	srli	r17,r17,3
   26764:	1810d0fa 	srli	r8,r3,3
   26768:	9100004c 	andi	r4,r18,1
   2676c:	1444b03a 	or	r2,r2,r17
   26770:	00c1ffc4 	movi	r3,2047
   26774:	80c02826 	beq	r16,r3,26818 <__subdf3+0x2d0>
   26778:	01400434 	movhi	r5,16
   2677c:	297fffc4 	addi	r5,r5,-1
   26780:	80e0703a 	and	r16,r16,r3
   26784:	414a703a 	and	r5,r8,r5
   26788:	003fa806 	br	2662c <__alt_data_end+0xf402662c>
   2678c:	0080630e 	bge	zero,r2,2691c <__subdf3+0x3d4>
   26790:	48003026 	beq	r9,zero,26854 <__subdf3+0x30c>
   26794:	0101ffc4 	movi	r4,2047
   26798:	813f8c26 	beq	r16,r4,265cc <__alt_data_end+0xf40265cc>
   2679c:	29402034 	orhi	r5,r5,128
   267a0:	01000e04 	movi	r4,56
   267a4:	2080a90e 	bge	r4,r2,26a4c <__subdf3+0x504>
   267a8:	298cb03a 	or	r6,r5,r6
   267ac:	3012c03a 	cmpne	r9,r6,zero
   267b0:	0005883a 	mov	r2,zero
   267b4:	4c53883a 	add	r9,r9,r17
   267b8:	4c63803a 	cmpltu	r17,r9,r17
   267bc:	10c7883a 	add	r3,r2,r3
   267c0:	88c7883a 	add	r3,r17,r3
   267c4:	4823883a 	mov	r17,r9
   267c8:	1880202c 	andhi	r2,r3,128
   267cc:	1000d026 	beq	r2,zero,26b10 <__subdf3+0x5c8>
   267d0:	84000044 	addi	r16,r16,1
   267d4:	0081ffc4 	movi	r2,2047
   267d8:	8080fe26 	beq	r16,r2,26bd4 <__subdf3+0x68c>
   267dc:	00bfe034 	movhi	r2,65408
   267e0:	10bfffc4 	addi	r2,r2,-1
   267e4:	1886703a 	and	r3,r3,r2
   267e8:	880ad07a 	srli	r5,r17,1
   267ec:	180497fa 	slli	r2,r3,31
   267f0:	8900004c 	andi	r4,r17,1
   267f4:	2922b03a 	or	r17,r5,r4
   267f8:	1806d07a 	srli	r3,r3,1
   267fc:	1462b03a 	or	r17,r2,r17
   26800:	3825883a 	mov	r18,r7
   26804:	003f7106 	br	265cc <__alt_data_end+0xf40265cc>
   26808:	2984b03a 	or	r2,r5,r6
   2680c:	103f6826 	beq	r2,zero,265b0 <__alt_data_end+0xf40265b0>
   26810:	39c03fcc 	andi	r7,r7,255
   26814:	003f6706 	br	265b4 <__alt_data_end+0xf40265b4>
   26818:	4086b03a 	or	r3,r8,r2
   2681c:	18015226 	beq	r3,zero,26d68 <__subdf3+0x820>
   26820:	00c00434 	movhi	r3,16
   26824:	41400234 	orhi	r5,r8,8
   26828:	18ffffc4 	addi	r3,r3,-1
   2682c:	28ca703a 	and	r5,r5,r3
   26830:	003f7e06 	br	2662c <__alt_data_end+0xf402662c>
   26834:	10bfffc4 	addi	r2,r2,-1
   26838:	1000491e 	bne	r2,zero,26960 <__subdf3+0x418>
   2683c:	898fc83a 	sub	r7,r17,r6
   26840:	89e3803a 	cmpltu	r17,r17,r7
   26844:	1947c83a 	sub	r3,r3,r5
   26848:	1c47c83a 	sub	r3,r3,r17
   2684c:	3823883a 	mov	r17,r7
   26850:	003f9b06 	br	266c0 <__alt_data_end+0xf40266c0>
   26854:	2988b03a 	or	r4,r5,r6
   26858:	203f5c26 	beq	r4,zero,265cc <__alt_data_end+0xf40265cc>
   2685c:	10bfffc4 	addi	r2,r2,-1
   26860:	1000931e 	bne	r2,zero,26ab0 <__subdf3+0x568>
   26864:	898d883a 	add	r6,r17,r6
   26868:	3463803a 	cmpltu	r17,r6,r17
   2686c:	1947883a 	add	r3,r3,r5
   26870:	88c7883a 	add	r3,r17,r3
   26874:	3023883a 	mov	r17,r6
   26878:	003fd306 	br	267c8 <__alt_data_end+0xf40267c8>
   2687c:	1000541e 	bne	r2,zero,269d0 <__subdf3+0x488>
   26880:	80800044 	addi	r2,r16,1
   26884:	1081ffcc 	andi	r2,r2,2047
   26888:	01000044 	movi	r4,1
   2688c:	2080a20e 	bge	r4,r2,26b18 <__subdf3+0x5d0>
   26890:	8989c83a 	sub	r4,r17,r6
   26894:	8905803a 	cmpltu	r2,r17,r4
   26898:	1967c83a 	sub	r19,r3,r5
   2689c:	98a7c83a 	sub	r19,r19,r2
   268a0:	9880202c 	andhi	r2,r19,128
   268a4:	10006326 	beq	r2,zero,26a34 <__subdf3+0x4ec>
   268a8:	3463c83a 	sub	r17,r6,r17
   268ac:	28c7c83a 	sub	r3,r5,r3
   268b0:	344d803a 	cmpltu	r6,r6,r17
   268b4:	19a7c83a 	sub	r19,r3,r6
   268b8:	3825883a 	mov	r18,r7
   268bc:	983f861e 	bne	r19,zero,266d8 <__alt_data_end+0xf40266d8>
   268c0:	8809883a 	mov	r4,r17
   268c4:	00272580 	call	27258 <__clzsi2>
   268c8:	10800804 	addi	r2,r2,32
   268cc:	113ffe04 	addi	r4,r2,-8
   268d0:	00c007c4 	movi	r3,31
   268d4:	193f850e 	bge	r3,r4,266ec <__alt_data_end+0xf40266ec>
   268d8:	10bff604 	addi	r2,r2,-40
   268dc:	8884983a 	sll	r2,r17,r2
   268e0:	0023883a 	mov	r17,zero
   268e4:	243f880e 	bge	r4,r16,26708 <__alt_data_end+0xf4026708>
   268e8:	00ffe034 	movhi	r3,65408
   268ec:	18ffffc4 	addi	r3,r3,-1
   268f0:	8121c83a 	sub	r16,r16,r4
   268f4:	10c6703a 	and	r3,r2,r3
   268f8:	003f3406 	br	265cc <__alt_data_end+0xf40265cc>
   268fc:	9100004c 	andi	r4,r18,1
   26900:	000b883a 	mov	r5,zero
   26904:	0005883a 	mov	r2,zero
   26908:	003f4806 	br	2662c <__alt_data_end+0xf402662c>
   2690c:	298cb03a 	or	r6,r5,r6
   26910:	300cc03a 	cmpne	r6,r6,zero
   26914:	0005883a 	mov	r2,zero
   26918:	003f6406 	br	266ac <__alt_data_end+0xf40266ac>
   2691c:	10009a1e 	bne	r2,zero,26b88 <__subdf3+0x640>
   26920:	82400044 	addi	r9,r16,1
   26924:	4881ffcc 	andi	r2,r9,2047
   26928:	02800044 	movi	r10,1
   2692c:	5080670e 	bge	r10,r2,26acc <__subdf3+0x584>
   26930:	0081ffc4 	movi	r2,2047
   26934:	4880af26 	beq	r9,r2,26bf4 <__subdf3+0x6ac>
   26938:	898d883a 	add	r6,r17,r6
   2693c:	1945883a 	add	r2,r3,r5
   26940:	3447803a 	cmpltu	r3,r6,r17
   26944:	1887883a 	add	r3,r3,r2
   26948:	182297fa 	slli	r17,r3,31
   2694c:	300cd07a 	srli	r6,r6,1
   26950:	1806d07a 	srli	r3,r3,1
   26954:	4821883a 	mov	r16,r9
   26958:	89a2b03a 	or	r17,r17,r6
   2695c:	003f1b06 	br	265cc <__alt_data_end+0xf40265cc>
   26960:	0101ffc4 	movi	r4,2047
   26964:	813f441e 	bne	r16,r4,26678 <__alt_data_end+0xf4026678>
   26968:	003f1806 	br	265cc <__alt_data_end+0xf40265cc>
   2696c:	843ff844 	addi	r16,r16,-31
   26970:	01400804 	movi	r5,32
   26974:	1408d83a 	srl	r4,r2,r16
   26978:	19405026 	beq	r3,r5,26abc <__subdf3+0x574>
   2697c:	01401004 	movi	r5,64
   26980:	28c7c83a 	sub	r3,r5,r3
   26984:	10c4983a 	sll	r2,r2,r3
   26988:	88a2b03a 	or	r17,r17,r2
   2698c:	8822c03a 	cmpne	r17,r17,zero
   26990:	2462b03a 	or	r17,r4,r17
   26994:	0007883a 	mov	r3,zero
   26998:	0021883a 	mov	r16,zero
   2699c:	003f6d06 	br	26754 <__alt_data_end+0xf4026754>
   269a0:	11fff804 	addi	r7,r2,-32
   269a4:	01000804 	movi	r4,32
   269a8:	29ced83a 	srl	r7,r5,r7
   269ac:	11004526 	beq	r2,r4,26ac4 <__subdf3+0x57c>
   269b0:	01001004 	movi	r4,64
   269b4:	2089c83a 	sub	r4,r4,r2
   269b8:	2904983a 	sll	r2,r5,r4
   269bc:	118cb03a 	or	r6,r2,r6
   269c0:	300cc03a 	cmpne	r6,r6,zero
   269c4:	398cb03a 	or	r6,r7,r6
   269c8:	0005883a 	mov	r2,zero
   269cc:	003f3706 	br	266ac <__alt_data_end+0xf40266ac>
   269d0:	80002a26 	beq	r16,zero,26a7c <__subdf3+0x534>
   269d4:	0101ffc4 	movi	r4,2047
   269d8:	49006626 	beq	r9,r4,26b74 <__subdf3+0x62c>
   269dc:	0085c83a 	sub	r2,zero,r2
   269e0:	18c02034 	orhi	r3,r3,128
   269e4:	01000e04 	movi	r4,56
   269e8:	20807e16 	blt	r4,r2,26be4 <__subdf3+0x69c>
   269ec:	010007c4 	movi	r4,31
   269f0:	2080e716 	blt	r4,r2,26d90 <__subdf3+0x848>
   269f4:	01000804 	movi	r4,32
   269f8:	2089c83a 	sub	r4,r4,r2
   269fc:	1914983a 	sll	r10,r3,r4
   26a00:	8890d83a 	srl	r8,r17,r2
   26a04:	8908983a 	sll	r4,r17,r4
   26a08:	1884d83a 	srl	r2,r3,r2
   26a0c:	5222b03a 	or	r17,r10,r8
   26a10:	2006c03a 	cmpne	r3,r4,zero
   26a14:	88e2b03a 	or	r17,r17,r3
   26a18:	3463c83a 	sub	r17,r6,r17
   26a1c:	2885c83a 	sub	r2,r5,r2
   26a20:	344d803a 	cmpltu	r6,r6,r17
   26a24:	1187c83a 	sub	r3,r2,r6
   26a28:	4821883a 	mov	r16,r9
   26a2c:	3825883a 	mov	r18,r7
   26a30:	003f2306 	br	266c0 <__alt_data_end+0xf40266c0>
   26a34:	24d0b03a 	or	r8,r4,r19
   26a38:	40001b1e 	bne	r8,zero,26aa8 <__subdf3+0x560>
   26a3c:	0005883a 	mov	r2,zero
   26a40:	0009883a 	mov	r4,zero
   26a44:	0021883a 	mov	r16,zero
   26a48:	003f4906 	br	26770 <__alt_data_end+0xf4026770>
   26a4c:	010007c4 	movi	r4,31
   26a50:	20803a16 	blt	r4,r2,26b3c <__subdf3+0x5f4>
   26a54:	01000804 	movi	r4,32
   26a58:	2089c83a 	sub	r4,r4,r2
   26a5c:	2912983a 	sll	r9,r5,r4
   26a60:	3090d83a 	srl	r8,r6,r2
   26a64:	3108983a 	sll	r4,r6,r4
   26a68:	2884d83a 	srl	r2,r5,r2
   26a6c:	4a12b03a 	or	r9,r9,r8
   26a70:	2008c03a 	cmpne	r4,r4,zero
   26a74:	4912b03a 	or	r9,r9,r4
   26a78:	003f4e06 	br	267b4 <__alt_data_end+0xf40267b4>
   26a7c:	1c48b03a 	or	r4,r3,r17
   26a80:	20003c26 	beq	r4,zero,26b74 <__subdf3+0x62c>
   26a84:	0084303a 	nor	r2,zero,r2
   26a88:	1000381e 	bne	r2,zero,26b6c <__subdf3+0x624>
   26a8c:	3463c83a 	sub	r17,r6,r17
   26a90:	28c5c83a 	sub	r2,r5,r3
   26a94:	344d803a 	cmpltu	r6,r6,r17
   26a98:	1187c83a 	sub	r3,r2,r6
   26a9c:	4821883a 	mov	r16,r9
   26aa0:	3825883a 	mov	r18,r7
   26aa4:	003f0606 	br	266c0 <__alt_data_end+0xf40266c0>
   26aa8:	2023883a 	mov	r17,r4
   26aac:	003f0906 	br	266d4 <__alt_data_end+0xf40266d4>
   26ab0:	0101ffc4 	movi	r4,2047
   26ab4:	813f3a1e 	bne	r16,r4,267a0 <__alt_data_end+0xf40267a0>
   26ab8:	003ec406 	br	265cc <__alt_data_end+0xf40265cc>
   26abc:	0005883a 	mov	r2,zero
   26ac0:	003fb106 	br	26988 <__alt_data_end+0xf4026988>
   26ac4:	0005883a 	mov	r2,zero
   26ac8:	003fbc06 	br	269bc <__alt_data_end+0xf40269bc>
   26acc:	1c44b03a 	or	r2,r3,r17
   26ad0:	80008e1e 	bne	r16,zero,26d0c <__subdf3+0x7c4>
   26ad4:	1000c826 	beq	r2,zero,26df8 <__subdf3+0x8b0>
   26ad8:	2984b03a 	or	r2,r5,r6
   26adc:	103ebb26 	beq	r2,zero,265cc <__alt_data_end+0xf40265cc>
   26ae0:	8989883a 	add	r4,r17,r6
   26ae4:	1945883a 	add	r2,r3,r5
   26ae8:	2447803a 	cmpltu	r3,r4,r17
   26aec:	1887883a 	add	r3,r3,r2
   26af0:	1880202c 	andhi	r2,r3,128
   26af4:	2023883a 	mov	r17,r4
   26af8:	103f1626 	beq	r2,zero,26754 <__alt_data_end+0xf4026754>
   26afc:	00bfe034 	movhi	r2,65408
   26b00:	10bfffc4 	addi	r2,r2,-1
   26b04:	5021883a 	mov	r16,r10
   26b08:	1886703a 	and	r3,r3,r2
   26b0c:	003eaf06 	br	265cc <__alt_data_end+0xf40265cc>
   26b10:	3825883a 	mov	r18,r7
   26b14:	003f0f06 	br	26754 <__alt_data_end+0xf4026754>
   26b18:	1c44b03a 	or	r2,r3,r17
   26b1c:	8000251e 	bne	r16,zero,26bb4 <__subdf3+0x66c>
   26b20:	1000661e 	bne	r2,zero,26cbc <__subdf3+0x774>
   26b24:	2990b03a 	or	r8,r5,r6
   26b28:	40009626 	beq	r8,zero,26d84 <__subdf3+0x83c>
   26b2c:	2807883a 	mov	r3,r5
   26b30:	3023883a 	mov	r17,r6
   26b34:	3825883a 	mov	r18,r7
   26b38:	003ea406 	br	265cc <__alt_data_end+0xf40265cc>
   26b3c:	127ff804 	addi	r9,r2,-32
   26b40:	01000804 	movi	r4,32
   26b44:	2a52d83a 	srl	r9,r5,r9
   26b48:	11008c26 	beq	r2,r4,26d7c <__subdf3+0x834>
   26b4c:	01001004 	movi	r4,64
   26b50:	2085c83a 	sub	r2,r4,r2
   26b54:	2884983a 	sll	r2,r5,r2
   26b58:	118cb03a 	or	r6,r2,r6
   26b5c:	300cc03a 	cmpne	r6,r6,zero
   26b60:	4992b03a 	or	r9,r9,r6
   26b64:	0005883a 	mov	r2,zero
   26b68:	003f1206 	br	267b4 <__alt_data_end+0xf40267b4>
   26b6c:	0101ffc4 	movi	r4,2047
   26b70:	493f9c1e 	bne	r9,r4,269e4 <__alt_data_end+0xf40269e4>
   26b74:	2807883a 	mov	r3,r5
   26b78:	3023883a 	mov	r17,r6
   26b7c:	4821883a 	mov	r16,r9
   26b80:	3825883a 	mov	r18,r7
   26b84:	003e9106 	br	265cc <__alt_data_end+0xf40265cc>
   26b88:	80001f1e 	bne	r16,zero,26c08 <__subdf3+0x6c0>
   26b8c:	1c48b03a 	or	r4,r3,r17
   26b90:	20005a26 	beq	r4,zero,26cfc <__subdf3+0x7b4>
   26b94:	0084303a 	nor	r2,zero,r2
   26b98:	1000561e 	bne	r2,zero,26cf4 <__subdf3+0x7ac>
   26b9c:	89a3883a 	add	r17,r17,r6
   26ba0:	1945883a 	add	r2,r3,r5
   26ba4:	898d803a 	cmpltu	r6,r17,r6
   26ba8:	3087883a 	add	r3,r6,r2
   26bac:	4821883a 	mov	r16,r9
   26bb0:	003f0506 	br	267c8 <__alt_data_end+0xf40267c8>
   26bb4:	10002b1e 	bne	r2,zero,26c64 <__subdf3+0x71c>
   26bb8:	2984b03a 	or	r2,r5,r6
   26bbc:	10008026 	beq	r2,zero,26dc0 <__subdf3+0x878>
   26bc0:	2807883a 	mov	r3,r5
   26bc4:	3023883a 	mov	r17,r6
   26bc8:	3825883a 	mov	r18,r7
   26bcc:	0401ffc4 	movi	r16,2047
   26bd0:	003e7e06 	br	265cc <__alt_data_end+0xf40265cc>
   26bd4:	3809883a 	mov	r4,r7
   26bd8:	0011883a 	mov	r8,zero
   26bdc:	0005883a 	mov	r2,zero
   26be0:	003ee306 	br	26770 <__alt_data_end+0xf4026770>
   26be4:	1c62b03a 	or	r17,r3,r17
   26be8:	8822c03a 	cmpne	r17,r17,zero
   26bec:	0005883a 	mov	r2,zero
   26bf0:	003f8906 	br	26a18 <__alt_data_end+0xf4026a18>
   26bf4:	3809883a 	mov	r4,r7
   26bf8:	4821883a 	mov	r16,r9
   26bfc:	0011883a 	mov	r8,zero
   26c00:	0005883a 	mov	r2,zero
   26c04:	003eda06 	br	26770 <__alt_data_end+0xf4026770>
   26c08:	0101ffc4 	movi	r4,2047
   26c0c:	49003b26 	beq	r9,r4,26cfc <__subdf3+0x7b4>
   26c10:	0085c83a 	sub	r2,zero,r2
   26c14:	18c02034 	orhi	r3,r3,128
   26c18:	01000e04 	movi	r4,56
   26c1c:	20806e16 	blt	r4,r2,26dd8 <__subdf3+0x890>
   26c20:	010007c4 	movi	r4,31
   26c24:	20807716 	blt	r4,r2,26e04 <__subdf3+0x8bc>
   26c28:	01000804 	movi	r4,32
   26c2c:	2089c83a 	sub	r4,r4,r2
   26c30:	1914983a 	sll	r10,r3,r4
   26c34:	8890d83a 	srl	r8,r17,r2
   26c38:	8908983a 	sll	r4,r17,r4
   26c3c:	1884d83a 	srl	r2,r3,r2
   26c40:	5222b03a 	or	r17,r10,r8
   26c44:	2006c03a 	cmpne	r3,r4,zero
   26c48:	88e2b03a 	or	r17,r17,r3
   26c4c:	89a3883a 	add	r17,r17,r6
   26c50:	1145883a 	add	r2,r2,r5
   26c54:	898d803a 	cmpltu	r6,r17,r6
   26c58:	3087883a 	add	r3,r6,r2
   26c5c:	4821883a 	mov	r16,r9
   26c60:	003ed906 	br	267c8 <__alt_data_end+0xf40267c8>
   26c64:	2984b03a 	or	r2,r5,r6
   26c68:	10004226 	beq	r2,zero,26d74 <__subdf3+0x82c>
   26c6c:	1808d0fa 	srli	r4,r3,3
   26c70:	8822d0fa 	srli	r17,r17,3
   26c74:	1806977a 	slli	r3,r3,29
   26c78:	2080022c 	andhi	r2,r4,8
   26c7c:	1c62b03a 	or	r17,r3,r17
   26c80:	10000826 	beq	r2,zero,26ca4 <__subdf3+0x75c>
   26c84:	2812d0fa 	srli	r9,r5,3
   26c88:	4880022c 	andhi	r2,r9,8
   26c8c:	1000051e 	bne	r2,zero,26ca4 <__subdf3+0x75c>
   26c90:	300cd0fa 	srli	r6,r6,3
   26c94:	2804977a 	slli	r2,r5,29
   26c98:	4809883a 	mov	r4,r9
   26c9c:	3825883a 	mov	r18,r7
   26ca0:	11a2b03a 	or	r17,r2,r6
   26ca4:	8806d77a 	srli	r3,r17,29
   26ca8:	200890fa 	slli	r4,r4,3
   26cac:	882290fa 	slli	r17,r17,3
   26cb0:	0401ffc4 	movi	r16,2047
   26cb4:	1906b03a 	or	r3,r3,r4
   26cb8:	003e4406 	br	265cc <__alt_data_end+0xf40265cc>
   26cbc:	2984b03a 	or	r2,r5,r6
   26cc0:	103e4226 	beq	r2,zero,265cc <__alt_data_end+0xf40265cc>
   26cc4:	8989c83a 	sub	r4,r17,r6
   26cc8:	8911803a 	cmpltu	r8,r17,r4
   26ccc:	1945c83a 	sub	r2,r3,r5
   26cd0:	1205c83a 	sub	r2,r2,r8
   26cd4:	1200202c 	andhi	r8,r2,128
   26cd8:	403e9a26 	beq	r8,zero,26744 <__alt_data_end+0xf4026744>
   26cdc:	3463c83a 	sub	r17,r6,r17
   26ce0:	28c5c83a 	sub	r2,r5,r3
   26ce4:	344d803a 	cmpltu	r6,r6,r17
   26ce8:	1187c83a 	sub	r3,r2,r6
   26cec:	3825883a 	mov	r18,r7
   26cf0:	003e3606 	br	265cc <__alt_data_end+0xf40265cc>
   26cf4:	0101ffc4 	movi	r4,2047
   26cf8:	493fc71e 	bne	r9,r4,26c18 <__alt_data_end+0xf4026c18>
   26cfc:	2807883a 	mov	r3,r5
   26d00:	3023883a 	mov	r17,r6
   26d04:	4821883a 	mov	r16,r9
   26d08:	003e3006 	br	265cc <__alt_data_end+0xf40265cc>
   26d0c:	10003626 	beq	r2,zero,26de8 <__subdf3+0x8a0>
   26d10:	2984b03a 	or	r2,r5,r6
   26d14:	10001726 	beq	r2,zero,26d74 <__subdf3+0x82c>
   26d18:	1808d0fa 	srli	r4,r3,3
   26d1c:	8822d0fa 	srli	r17,r17,3
   26d20:	1806977a 	slli	r3,r3,29
   26d24:	2080022c 	andhi	r2,r4,8
   26d28:	1c62b03a 	or	r17,r3,r17
   26d2c:	10000726 	beq	r2,zero,26d4c <__subdf3+0x804>
   26d30:	2812d0fa 	srli	r9,r5,3
   26d34:	4880022c 	andhi	r2,r9,8
   26d38:	1000041e 	bne	r2,zero,26d4c <__subdf3+0x804>
   26d3c:	300cd0fa 	srli	r6,r6,3
   26d40:	2804977a 	slli	r2,r5,29
   26d44:	4809883a 	mov	r4,r9
   26d48:	11a2b03a 	or	r17,r2,r6
   26d4c:	8806d77a 	srli	r3,r17,29
   26d50:	200890fa 	slli	r4,r4,3
   26d54:	882290fa 	slli	r17,r17,3
   26d58:	3825883a 	mov	r18,r7
   26d5c:	1906b03a 	or	r3,r3,r4
   26d60:	0401ffc4 	movi	r16,2047
   26d64:	003e1906 	br	265cc <__alt_data_end+0xf40265cc>
   26d68:	000b883a 	mov	r5,zero
   26d6c:	0005883a 	mov	r2,zero
   26d70:	003e2e06 	br	2662c <__alt_data_end+0xf402662c>
   26d74:	0401ffc4 	movi	r16,2047
   26d78:	003e1406 	br	265cc <__alt_data_end+0xf40265cc>
   26d7c:	0005883a 	mov	r2,zero
   26d80:	003f7506 	br	26b58 <__alt_data_end+0xf4026b58>
   26d84:	0005883a 	mov	r2,zero
   26d88:	0009883a 	mov	r4,zero
   26d8c:	003e7806 	br	26770 <__alt_data_end+0xf4026770>
   26d90:	123ff804 	addi	r8,r2,-32
   26d94:	01000804 	movi	r4,32
   26d98:	1a10d83a 	srl	r8,r3,r8
   26d9c:	11002526 	beq	r2,r4,26e34 <__subdf3+0x8ec>
   26da0:	01001004 	movi	r4,64
   26da4:	2085c83a 	sub	r2,r4,r2
   26da8:	1884983a 	sll	r2,r3,r2
   26dac:	1444b03a 	or	r2,r2,r17
   26db0:	1004c03a 	cmpne	r2,r2,zero
   26db4:	40a2b03a 	or	r17,r8,r2
   26db8:	0005883a 	mov	r2,zero
   26dbc:	003f1606 	br	26a18 <__alt_data_end+0xf4026a18>
   26dc0:	02000434 	movhi	r8,16
   26dc4:	0009883a 	mov	r4,zero
   26dc8:	423fffc4 	addi	r8,r8,-1
   26dcc:	00bfffc4 	movi	r2,-1
   26dd0:	0401ffc4 	movi	r16,2047
   26dd4:	003e6606 	br	26770 <__alt_data_end+0xf4026770>
   26dd8:	1c62b03a 	or	r17,r3,r17
   26ddc:	8822c03a 	cmpne	r17,r17,zero
   26de0:	0005883a 	mov	r2,zero
   26de4:	003f9906 	br	26c4c <__alt_data_end+0xf4026c4c>
   26de8:	2807883a 	mov	r3,r5
   26dec:	3023883a 	mov	r17,r6
   26df0:	0401ffc4 	movi	r16,2047
   26df4:	003df506 	br	265cc <__alt_data_end+0xf40265cc>
   26df8:	2807883a 	mov	r3,r5
   26dfc:	3023883a 	mov	r17,r6
   26e00:	003df206 	br	265cc <__alt_data_end+0xf40265cc>
   26e04:	123ff804 	addi	r8,r2,-32
   26e08:	01000804 	movi	r4,32
   26e0c:	1a10d83a 	srl	r8,r3,r8
   26e10:	11000a26 	beq	r2,r4,26e3c <__subdf3+0x8f4>
   26e14:	01001004 	movi	r4,64
   26e18:	2085c83a 	sub	r2,r4,r2
   26e1c:	1884983a 	sll	r2,r3,r2
   26e20:	1444b03a 	or	r2,r2,r17
   26e24:	1004c03a 	cmpne	r2,r2,zero
   26e28:	40a2b03a 	or	r17,r8,r2
   26e2c:	0005883a 	mov	r2,zero
   26e30:	003f8606 	br	26c4c <__alt_data_end+0xf4026c4c>
   26e34:	0005883a 	mov	r2,zero
   26e38:	003fdc06 	br	26dac <__alt_data_end+0xf4026dac>
   26e3c:	0005883a 	mov	r2,zero
   26e40:	003ff706 	br	26e20 <__alt_data_end+0xf4026e20>

00026e44 <__fixdfsi>:
   26e44:	280cd53a 	srli	r6,r5,20
   26e48:	00c00434 	movhi	r3,16
   26e4c:	18ffffc4 	addi	r3,r3,-1
   26e50:	3181ffcc 	andi	r6,r6,2047
   26e54:	01c0ff84 	movi	r7,1022
   26e58:	28c6703a 	and	r3,r5,r3
   26e5c:	280ad7fa 	srli	r5,r5,31
   26e60:	3980120e 	bge	r7,r6,26eac <__fixdfsi+0x68>
   26e64:	00810744 	movi	r2,1053
   26e68:	11800c16 	blt	r2,r6,26e9c <__fixdfsi+0x58>
   26e6c:	00810cc4 	movi	r2,1075
   26e70:	1185c83a 	sub	r2,r2,r6
   26e74:	01c007c4 	movi	r7,31
   26e78:	18c00434 	orhi	r3,r3,16
   26e7c:	38800d16 	blt	r7,r2,26eb4 <__fixdfsi+0x70>
   26e80:	31befb44 	addi	r6,r6,-1043
   26e84:	2084d83a 	srl	r2,r4,r2
   26e88:	1986983a 	sll	r3,r3,r6
   26e8c:	1884b03a 	or	r2,r3,r2
   26e90:	28000726 	beq	r5,zero,26eb0 <__fixdfsi+0x6c>
   26e94:	0085c83a 	sub	r2,zero,r2
   26e98:	f800283a 	ret
   26e9c:	00a00034 	movhi	r2,32768
   26ea0:	10bfffc4 	addi	r2,r2,-1
   26ea4:	2885883a 	add	r2,r5,r2
   26ea8:	f800283a 	ret
   26eac:	0005883a 	mov	r2,zero
   26eb0:	f800283a 	ret
   26eb4:	008104c4 	movi	r2,1043
   26eb8:	1185c83a 	sub	r2,r2,r6
   26ebc:	1884d83a 	srl	r2,r3,r2
   26ec0:	003ff306 	br	26e90 <__alt_data_end+0xf4026e90>

00026ec4 <__floatsidf>:
   26ec4:	defffd04 	addi	sp,sp,-12
   26ec8:	dfc00215 	stw	ra,8(sp)
   26ecc:	dc400115 	stw	r17,4(sp)
   26ed0:	dc000015 	stw	r16,0(sp)
   26ed4:	20002b26 	beq	r4,zero,26f84 <__floatsidf+0xc0>
   26ed8:	2023883a 	mov	r17,r4
   26edc:	2020d7fa 	srli	r16,r4,31
   26ee0:	20002d16 	blt	r4,zero,26f98 <__floatsidf+0xd4>
   26ee4:	8809883a 	mov	r4,r17
   26ee8:	00272580 	call	27258 <__clzsi2>
   26eec:	01410784 	movi	r5,1054
   26ef0:	288bc83a 	sub	r5,r5,r2
   26ef4:	01010cc4 	movi	r4,1075
   26ef8:	2149c83a 	sub	r4,r4,r5
   26efc:	00c007c4 	movi	r3,31
   26f00:	1900160e 	bge	r3,r4,26f5c <__floatsidf+0x98>
   26f04:	00c104c4 	movi	r3,1043
   26f08:	1947c83a 	sub	r3,r3,r5
   26f0c:	88c6983a 	sll	r3,r17,r3
   26f10:	00800434 	movhi	r2,16
   26f14:	10bfffc4 	addi	r2,r2,-1
   26f18:	1886703a 	and	r3,r3,r2
   26f1c:	2941ffcc 	andi	r5,r5,2047
   26f20:	800d883a 	mov	r6,r16
   26f24:	0005883a 	mov	r2,zero
   26f28:	280a953a 	slli	r5,r5,20
   26f2c:	31803fcc 	andi	r6,r6,255
   26f30:	01000434 	movhi	r4,16
   26f34:	300c97fa 	slli	r6,r6,31
   26f38:	213fffc4 	addi	r4,r4,-1
   26f3c:	1906703a 	and	r3,r3,r4
   26f40:	1946b03a 	or	r3,r3,r5
   26f44:	1986b03a 	or	r3,r3,r6
   26f48:	dfc00217 	ldw	ra,8(sp)
   26f4c:	dc400117 	ldw	r17,4(sp)
   26f50:	dc000017 	ldw	r16,0(sp)
   26f54:	dec00304 	addi	sp,sp,12
   26f58:	f800283a 	ret
   26f5c:	00c002c4 	movi	r3,11
   26f60:	1887c83a 	sub	r3,r3,r2
   26f64:	88c6d83a 	srl	r3,r17,r3
   26f68:	8904983a 	sll	r2,r17,r4
   26f6c:	01000434 	movhi	r4,16
   26f70:	213fffc4 	addi	r4,r4,-1
   26f74:	2941ffcc 	andi	r5,r5,2047
   26f78:	1906703a 	and	r3,r3,r4
   26f7c:	800d883a 	mov	r6,r16
   26f80:	003fe906 	br	26f28 <__alt_data_end+0xf4026f28>
   26f84:	000d883a 	mov	r6,zero
   26f88:	000b883a 	mov	r5,zero
   26f8c:	0007883a 	mov	r3,zero
   26f90:	0005883a 	mov	r2,zero
   26f94:	003fe406 	br	26f28 <__alt_data_end+0xf4026f28>
   26f98:	0123c83a 	sub	r17,zero,r4
   26f9c:	003fd106 	br	26ee4 <__alt_data_end+0xf4026ee4>

00026fa0 <__extendsfdf2>:
   26fa0:	200ad5fa 	srli	r5,r4,23
   26fa4:	defffd04 	addi	sp,sp,-12
   26fa8:	dc400115 	stw	r17,4(sp)
   26fac:	29403fcc 	andi	r5,r5,255
   26fb0:	29800044 	addi	r6,r5,1
   26fb4:	04402034 	movhi	r17,128
   26fb8:	dc000015 	stw	r16,0(sp)
   26fbc:	8c7fffc4 	addi	r17,r17,-1
   26fc0:	dfc00215 	stw	ra,8(sp)
   26fc4:	31803fcc 	andi	r6,r6,255
   26fc8:	00800044 	movi	r2,1
   26fcc:	8922703a 	and	r17,r17,r4
   26fd0:	2020d7fa 	srli	r16,r4,31
   26fd4:	1180110e 	bge	r2,r6,2701c <__extendsfdf2+0x7c>
   26fd8:	880cd0fa 	srli	r6,r17,3
   26fdc:	8822977a 	slli	r17,r17,29
   26fe0:	2940e004 	addi	r5,r5,896
   26fe4:	2941ffcc 	andi	r5,r5,2047
   26fe8:	2804953a 	slli	r2,r5,20
   26fec:	01400434 	movhi	r5,16
   26ff0:	800697fa 	slli	r3,r16,31
   26ff4:	297fffc4 	addi	r5,r5,-1
   26ff8:	314a703a 	and	r5,r6,r5
   26ffc:	288ab03a 	or	r5,r5,r2
   27000:	28c6b03a 	or	r3,r5,r3
   27004:	8805883a 	mov	r2,r17
   27008:	dfc00217 	ldw	ra,8(sp)
   2700c:	dc400117 	ldw	r17,4(sp)
   27010:	dc000017 	ldw	r16,0(sp)
   27014:	dec00304 	addi	sp,sp,12
   27018:	f800283a 	ret
   2701c:	2800111e 	bne	r5,zero,27064 <__extendsfdf2+0xc4>
   27020:	88001c26 	beq	r17,zero,27094 <__extendsfdf2+0xf4>
   27024:	8809883a 	mov	r4,r17
   27028:	00272580 	call	27258 <__clzsi2>
   2702c:	00c00284 	movi	r3,10
   27030:	18801b16 	blt	r3,r2,270a0 <__extendsfdf2+0x100>
   27034:	018002c4 	movi	r6,11
   27038:	308dc83a 	sub	r6,r6,r2
   2703c:	11000544 	addi	r4,r2,21
   27040:	8986d83a 	srl	r3,r17,r6
   27044:	8922983a 	sll	r17,r17,r4
   27048:	0180e244 	movi	r6,905
   2704c:	01400434 	movhi	r5,16
   27050:	3085c83a 	sub	r2,r6,r2
   27054:	297fffc4 	addi	r5,r5,-1
   27058:	194c703a 	and	r6,r3,r5
   2705c:	1141ffcc 	andi	r5,r2,2047
   27060:	003fe006 	br	26fe4 <__alt_data_end+0xf4026fe4>
   27064:	88000826 	beq	r17,zero,27088 <__extendsfdf2+0xe8>
   27068:	880cd0fa 	srli	r6,r17,3
   2706c:	00800434 	movhi	r2,16
   27070:	10bfffc4 	addi	r2,r2,-1
   27074:	31800234 	orhi	r6,r6,8
   27078:	8822977a 	slli	r17,r17,29
   2707c:	308c703a 	and	r6,r6,r2
   27080:	0141ffc4 	movi	r5,2047
   27084:	003fd706 	br	26fe4 <__alt_data_end+0xf4026fe4>
   27088:	0141ffc4 	movi	r5,2047
   2708c:	000d883a 	mov	r6,zero
   27090:	003fd406 	br	26fe4 <__alt_data_end+0xf4026fe4>
   27094:	000b883a 	mov	r5,zero
   27098:	000d883a 	mov	r6,zero
   2709c:	003fd106 	br	26fe4 <__alt_data_end+0xf4026fe4>
   270a0:	11bffd44 	addi	r6,r2,-11
   270a4:	8986983a 	sll	r3,r17,r6
   270a8:	0023883a 	mov	r17,zero
   270ac:	003fe606 	br	27048 <__alt_data_end+0xf4027048>

000270b0 <__truncdfsf2>:
   270b0:	2810d53a 	srli	r8,r5,20
   270b4:	01c00434 	movhi	r7,16
   270b8:	39ffffc4 	addi	r7,r7,-1
   270bc:	29ce703a 	and	r7,r5,r7
   270c0:	4201ffcc 	andi	r8,r8,2047
   270c4:	380e90fa 	slli	r7,r7,3
   270c8:	200cd77a 	srli	r6,r4,29
   270cc:	42400044 	addi	r9,r8,1
   270d0:	4a41ffcc 	andi	r9,r9,2047
   270d4:	00c00044 	movi	r3,1
   270d8:	280ad7fa 	srli	r5,r5,31
   270dc:	31ceb03a 	or	r7,r6,r7
   270e0:	200490fa 	slli	r2,r4,3
   270e4:	1a40230e 	bge	r3,r9,27174 <__truncdfsf2+0xc4>
   270e8:	40ff2004 	addi	r3,r8,-896
   270ec:	01803f84 	movi	r6,254
   270f0:	30c01516 	blt	r6,r3,27148 <__truncdfsf2+0x98>
   270f4:	00c0380e 	bge	zero,r3,271d8 <__truncdfsf2+0x128>
   270f8:	200c91ba 	slli	r6,r4,6
   270fc:	380e90fa 	slli	r7,r7,3
   27100:	1004d77a 	srli	r2,r2,29
   27104:	300cc03a 	cmpne	r6,r6,zero
   27108:	31ccb03a 	or	r6,r6,r7
   2710c:	308cb03a 	or	r6,r6,r2
   27110:	308001cc 	andi	r2,r6,7
   27114:	10000426 	beq	r2,zero,27128 <__truncdfsf2+0x78>
   27118:	308003cc 	andi	r2,r6,15
   2711c:	01000104 	movi	r4,4
   27120:	11000126 	beq	r2,r4,27128 <__truncdfsf2+0x78>
   27124:	31800104 	addi	r6,r6,4
   27128:	3081002c 	andhi	r2,r6,1024
   2712c:	10001626 	beq	r2,zero,27188 <__truncdfsf2+0xd8>
   27130:	18c00044 	addi	r3,r3,1
   27134:	00803fc4 	movi	r2,255
   27138:	18800326 	beq	r3,r2,27148 <__truncdfsf2+0x98>
   2713c:	300c91ba 	slli	r6,r6,6
   27140:	300cd27a 	srli	r6,r6,9
   27144:	00000206 	br	27150 <__truncdfsf2+0xa0>
   27148:	00ffffc4 	movi	r3,-1
   2714c:	000d883a 	mov	r6,zero
   27150:	18c03fcc 	andi	r3,r3,255
   27154:	180895fa 	slli	r4,r3,23
   27158:	00c02034 	movhi	r3,128
   2715c:	280a97fa 	slli	r5,r5,31
   27160:	18ffffc4 	addi	r3,r3,-1
   27164:	30c6703a 	and	r3,r6,r3
   27168:	1906b03a 	or	r3,r3,r4
   2716c:	1944b03a 	or	r2,r3,r5
   27170:	f800283a 	ret
   27174:	40000b1e 	bne	r8,zero,271a4 <__truncdfsf2+0xf4>
   27178:	388cb03a 	or	r6,r7,r2
   2717c:	0007883a 	mov	r3,zero
   27180:	30000426 	beq	r6,zero,27194 <__truncdfsf2+0xe4>
   27184:	01800144 	movi	r6,5
   27188:	00803fc4 	movi	r2,255
   2718c:	300cd0fa 	srli	r6,r6,3
   27190:	18800a26 	beq	r3,r2,271bc <__truncdfsf2+0x10c>
   27194:	00802034 	movhi	r2,128
   27198:	10bfffc4 	addi	r2,r2,-1
   2719c:	308c703a 	and	r6,r6,r2
   271a0:	003feb06 	br	27150 <__alt_data_end+0xf4027150>
   271a4:	3888b03a 	or	r4,r7,r2
   271a8:	203fe726 	beq	r4,zero,27148 <__alt_data_end+0xf4027148>
   271ac:	380c90fa 	slli	r6,r7,3
   271b0:	00c03fc4 	movi	r3,255
   271b4:	31808034 	orhi	r6,r6,512
   271b8:	003fd506 	br	27110 <__alt_data_end+0xf4027110>
   271bc:	303fe226 	beq	r6,zero,27148 <__alt_data_end+0xf4027148>
   271c0:	00802034 	movhi	r2,128
   271c4:	31801034 	orhi	r6,r6,64
   271c8:	10bfffc4 	addi	r2,r2,-1
   271cc:	00ffffc4 	movi	r3,-1
   271d0:	308c703a 	and	r6,r6,r2
   271d4:	003fde06 	br	27150 <__alt_data_end+0xf4027150>
   271d8:	013ffa44 	movi	r4,-23
   271dc:	19000e16 	blt	r3,r4,27218 <__truncdfsf2+0x168>
   271e0:	01000784 	movi	r4,30
   271e4:	20c9c83a 	sub	r4,r4,r3
   271e8:	018007c4 	movi	r6,31
   271ec:	39c02034 	orhi	r7,r7,128
   271f0:	31000b16 	blt	r6,r4,27220 <__truncdfsf2+0x170>
   271f4:	423f2084 	addi	r8,r8,-894
   271f8:	120c983a 	sll	r6,r2,r8
   271fc:	3a0e983a 	sll	r7,r7,r8
   27200:	1104d83a 	srl	r2,r2,r4
   27204:	300cc03a 	cmpne	r6,r6,zero
   27208:	31ceb03a 	or	r7,r6,r7
   2720c:	388cb03a 	or	r6,r7,r2
   27210:	0007883a 	mov	r3,zero
   27214:	003fbe06 	br	27110 <__alt_data_end+0xf4027110>
   27218:	0007883a 	mov	r3,zero
   2721c:	003fd906 	br	27184 <__alt_data_end+0xf4027184>
   27220:	01bfff84 	movi	r6,-2
   27224:	30cdc83a 	sub	r6,r6,r3
   27228:	00c00804 	movi	r3,32
   2722c:	398cd83a 	srl	r6,r7,r6
   27230:	20c00726 	beq	r4,r3,27250 <__truncdfsf2+0x1a0>
   27234:	423f2884 	addi	r8,r8,-862
   27238:	3a0e983a 	sll	r7,r7,r8
   2723c:	3884b03a 	or	r2,r7,r2
   27240:	1004c03a 	cmpne	r2,r2,zero
   27244:	118cb03a 	or	r6,r2,r6
   27248:	0007883a 	mov	r3,zero
   2724c:	003fb006 	br	27110 <__alt_data_end+0xf4027110>
   27250:	000f883a 	mov	r7,zero
   27254:	003ff906 	br	2723c <__alt_data_end+0xf402723c>

00027258 <__clzsi2>:
   27258:	00bfffd4 	movui	r2,65535
   2725c:	11000536 	bltu	r2,r4,27274 <__clzsi2+0x1c>
   27260:	00803fc4 	movi	r2,255
   27264:	11000f36 	bltu	r2,r4,272a4 <__clzsi2+0x4c>
   27268:	00800804 	movi	r2,32
   2726c:	0007883a 	mov	r3,zero
   27270:	00000506 	br	27288 <__clzsi2+0x30>
   27274:	00804034 	movhi	r2,256
   27278:	10bfffc4 	addi	r2,r2,-1
   2727c:	11000c2e 	bgeu	r2,r4,272b0 <__clzsi2+0x58>
   27280:	00800204 	movi	r2,8
   27284:	00c00604 	movi	r3,24
   27288:	20c8d83a 	srl	r4,r4,r3
   2728c:	00c000f4 	movhi	r3,3
   27290:	18d6d404 	addi	r3,r3,23376
   27294:	1909883a 	add	r4,r3,r4
   27298:	20c00003 	ldbu	r3,0(r4)
   2729c:	10c5c83a 	sub	r2,r2,r3
   272a0:	f800283a 	ret
   272a4:	00800604 	movi	r2,24
   272a8:	00c00204 	movi	r3,8
   272ac:	003ff606 	br	27288 <__alt_data_end+0xf4027288>
   272b0:	00800404 	movi	r2,16
   272b4:	1007883a 	mov	r3,r2
   272b8:	003ff306 	br	27288 <__alt_data_end+0xf4027288>

000272bc <__errno>:
   272bc:	008000f4 	movhi	r2,3
   272c0:	109ea004 	addi	r2,r2,31360
   272c4:	10800017 	ldw	r2,0(r2)
   272c8:	f800283a 	ret

000272cc <_printf_r>:
   272cc:	defffd04 	addi	sp,sp,-12
   272d0:	2805883a 	mov	r2,r5
   272d4:	dfc00015 	stw	ra,0(sp)
   272d8:	d9800115 	stw	r6,4(sp)
   272dc:	d9c00215 	stw	r7,8(sp)
   272e0:	21400217 	ldw	r5,8(r4)
   272e4:	d9c00104 	addi	r7,sp,4
   272e8:	100d883a 	mov	r6,r2
   272ec:	00274a40 	call	274a4 <___vfprintf_internal_r>
   272f0:	dfc00017 	ldw	ra,0(sp)
   272f4:	dec00304 	addi	sp,sp,12
   272f8:	f800283a 	ret

000272fc <printf>:
   272fc:	defffc04 	addi	sp,sp,-16
   27300:	dfc00015 	stw	ra,0(sp)
   27304:	d9400115 	stw	r5,4(sp)
   27308:	d9800215 	stw	r6,8(sp)
   2730c:	d9c00315 	stw	r7,12(sp)
   27310:	008000f4 	movhi	r2,3
   27314:	109ea004 	addi	r2,r2,31360
   27318:	10800017 	ldw	r2,0(r2)
   2731c:	200b883a 	mov	r5,r4
   27320:	d9800104 	addi	r6,sp,4
   27324:	11000217 	ldw	r4,8(r2)
   27328:	002969c0 	call	2969c <__vfprintf_internal>
   2732c:	dfc00017 	ldw	ra,0(sp)
   27330:	dec00404 	addi	sp,sp,16
   27334:	f800283a 	ret

00027338 <_puts_r>:
   27338:	defff604 	addi	sp,sp,-40
   2733c:	dc000715 	stw	r16,28(sp)
   27340:	2021883a 	mov	r16,r4
   27344:	2809883a 	mov	r4,r5
   27348:	dc400815 	stw	r17,32(sp)
   2734c:	dfc00915 	stw	ra,36(sp)
   27350:	2823883a 	mov	r17,r5
   27354:	002740c0 	call	2740c <strlen>
   27358:	10c00044 	addi	r3,r2,1
   2735c:	d8800115 	stw	r2,4(sp)
   27360:	008000f4 	movhi	r2,3
   27364:	10971504 	addi	r2,r2,23636
   27368:	d8800215 	stw	r2,8(sp)
   2736c:	00800044 	movi	r2,1
   27370:	d8800315 	stw	r2,12(sp)
   27374:	00800084 	movi	r2,2
   27378:	dc400015 	stw	r17,0(sp)
   2737c:	d8c00615 	stw	r3,24(sp)
   27380:	dec00415 	stw	sp,16(sp)
   27384:	d8800515 	stw	r2,20(sp)
   27388:	80000226 	beq	r16,zero,27394 <_puts_r+0x5c>
   2738c:	80800e17 	ldw	r2,56(r16)
   27390:	10001426 	beq	r2,zero,273e4 <_puts_r+0xac>
   27394:	81400217 	ldw	r5,8(r16)
   27398:	2880030b 	ldhu	r2,12(r5)
   2739c:	10c8000c 	andi	r3,r2,8192
   273a0:	1800061e 	bne	r3,zero,273bc <_puts_r+0x84>
   273a4:	29001917 	ldw	r4,100(r5)
   273a8:	00f7ffc4 	movi	r3,-8193
   273ac:	10880014 	ori	r2,r2,8192
   273b0:	20c6703a 	and	r3,r4,r3
   273b4:	2880030d 	sth	r2,12(r5)
   273b8:	28c01915 	stw	r3,100(r5)
   273bc:	d9800404 	addi	r6,sp,16
   273c0:	8009883a 	mov	r4,r16
   273c4:	002bbcc0 	call	2bbcc <__sfvwrite_r>
   273c8:	1000091e 	bne	r2,zero,273f0 <_puts_r+0xb8>
   273cc:	00800284 	movi	r2,10
   273d0:	dfc00917 	ldw	ra,36(sp)
   273d4:	dc400817 	ldw	r17,32(sp)
   273d8:	dc000717 	ldw	r16,28(sp)
   273dc:	dec00a04 	addi	sp,sp,40
   273e0:	f800283a 	ret
   273e4:	8009883a 	mov	r4,r16
   273e8:	002b7480 	call	2b748 <__sinit>
   273ec:	003fe906 	br	27394 <__alt_data_end+0xf4027394>
   273f0:	00bfffc4 	movi	r2,-1
   273f4:	003ff606 	br	273d0 <__alt_data_end+0xf40273d0>

000273f8 <puts>:
   273f8:	008000f4 	movhi	r2,3
   273fc:	109ea004 	addi	r2,r2,31360
   27400:	200b883a 	mov	r5,r4
   27404:	11000017 	ldw	r4,0(r2)
   27408:	00273381 	jmpi	27338 <_puts_r>

0002740c <strlen>:
   2740c:	208000cc 	andi	r2,r4,3
   27410:	10002026 	beq	r2,zero,27494 <strlen+0x88>
   27414:	20800007 	ldb	r2,0(r4)
   27418:	10002026 	beq	r2,zero,2749c <strlen+0x90>
   2741c:	2005883a 	mov	r2,r4
   27420:	00000206 	br	2742c <strlen+0x20>
   27424:	10c00007 	ldb	r3,0(r2)
   27428:	18001826 	beq	r3,zero,2748c <strlen+0x80>
   2742c:	10800044 	addi	r2,r2,1
   27430:	10c000cc 	andi	r3,r2,3
   27434:	183ffb1e 	bne	r3,zero,27424 <__alt_data_end+0xf4027424>
   27438:	10c00017 	ldw	r3,0(r2)
   2743c:	01ffbff4 	movhi	r7,65279
   27440:	39ffbfc4 	addi	r7,r7,-257
   27444:	00ca303a 	nor	r5,zero,r3
   27448:	01a02074 	movhi	r6,32897
   2744c:	19c7883a 	add	r3,r3,r7
   27450:	31a02004 	addi	r6,r6,-32640
   27454:	1946703a 	and	r3,r3,r5
   27458:	1986703a 	and	r3,r3,r6
   2745c:	1800091e 	bne	r3,zero,27484 <strlen+0x78>
   27460:	10800104 	addi	r2,r2,4
   27464:	10c00017 	ldw	r3,0(r2)
   27468:	19cb883a 	add	r5,r3,r7
   2746c:	00c6303a 	nor	r3,zero,r3
   27470:	28c6703a 	and	r3,r5,r3
   27474:	1986703a 	and	r3,r3,r6
   27478:	183ff926 	beq	r3,zero,27460 <__alt_data_end+0xf4027460>
   2747c:	00000106 	br	27484 <strlen+0x78>
   27480:	10800044 	addi	r2,r2,1
   27484:	10c00007 	ldb	r3,0(r2)
   27488:	183ffd1e 	bne	r3,zero,27480 <__alt_data_end+0xf4027480>
   2748c:	1105c83a 	sub	r2,r2,r4
   27490:	f800283a 	ret
   27494:	2005883a 	mov	r2,r4
   27498:	003fe706 	br	27438 <__alt_data_end+0xf4027438>
   2749c:	0005883a 	mov	r2,zero
   274a0:	f800283a 	ret

000274a4 <___vfprintf_internal_r>:
   274a4:	deffb804 	addi	sp,sp,-288
   274a8:	dfc04715 	stw	ra,284(sp)
   274ac:	ddc04515 	stw	r23,276(sp)
   274b0:	dd404315 	stw	r21,268(sp)
   274b4:	d9002c15 	stw	r4,176(sp)
   274b8:	282f883a 	mov	r23,r5
   274bc:	302b883a 	mov	r21,r6
   274c0:	d9c02d15 	stw	r7,180(sp)
   274c4:	df004615 	stw	fp,280(sp)
   274c8:	dd804415 	stw	r22,272(sp)
   274cc:	dd004215 	stw	r20,264(sp)
   274d0:	dcc04115 	stw	r19,260(sp)
   274d4:	dc804015 	stw	r18,256(sp)
   274d8:	dc403f15 	stw	r17,252(sp)
   274dc:	dc003e15 	stw	r16,248(sp)
   274e0:	002c2bc0 	call	2c2bc <_localeconv_r>
   274e4:	10800017 	ldw	r2,0(r2)
   274e8:	1009883a 	mov	r4,r2
   274ec:	d8803415 	stw	r2,208(sp)
   274f0:	002740c0 	call	2740c <strlen>
   274f4:	d8803715 	stw	r2,220(sp)
   274f8:	d8802c17 	ldw	r2,176(sp)
   274fc:	10000226 	beq	r2,zero,27508 <___vfprintf_internal_r+0x64>
   27500:	10800e17 	ldw	r2,56(r2)
   27504:	1000f926 	beq	r2,zero,278ec <___vfprintf_internal_r+0x448>
   27508:	b880030b 	ldhu	r2,12(r23)
   2750c:	10c8000c 	andi	r3,r2,8192
   27510:	1800061e 	bne	r3,zero,2752c <___vfprintf_internal_r+0x88>
   27514:	b9001917 	ldw	r4,100(r23)
   27518:	00f7ffc4 	movi	r3,-8193
   2751c:	10880014 	ori	r2,r2,8192
   27520:	20c6703a 	and	r3,r4,r3
   27524:	b880030d 	sth	r2,12(r23)
   27528:	b8c01915 	stw	r3,100(r23)
   2752c:	10c0020c 	andi	r3,r2,8
   27530:	1800c126 	beq	r3,zero,27838 <___vfprintf_internal_r+0x394>
   27534:	b8c00417 	ldw	r3,16(r23)
   27538:	1800bf26 	beq	r3,zero,27838 <___vfprintf_internal_r+0x394>
   2753c:	1080068c 	andi	r2,r2,26
   27540:	00c00284 	movi	r3,10
   27544:	10c0c426 	beq	r2,r3,27858 <___vfprintf_internal_r+0x3b4>
   27548:	d8c00404 	addi	r3,sp,16
   2754c:	050000f4 	movhi	r20,3
   27550:	d9001e04 	addi	r4,sp,120
   27554:	a5172684 	addi	r20,r20,23706
   27558:	d8c01e15 	stw	r3,120(sp)
   2755c:	d8002015 	stw	zero,128(sp)
   27560:	d8001f15 	stw	zero,124(sp)
   27564:	d8003315 	stw	zero,204(sp)
   27568:	d8003615 	stw	zero,216(sp)
   2756c:	d8003815 	stw	zero,224(sp)
   27570:	1811883a 	mov	r8,r3
   27574:	d8003915 	stw	zero,228(sp)
   27578:	d8003a15 	stw	zero,232(sp)
   2757c:	d8002f15 	stw	zero,188(sp)
   27580:	d9002815 	stw	r4,160(sp)
   27584:	a8800007 	ldb	r2,0(r21)
   27588:	10027b26 	beq	r2,zero,27f78 <___vfprintf_internal_r+0xad4>
   2758c:	00c00944 	movi	r3,37
   27590:	a821883a 	mov	r16,r21
   27594:	10c0021e 	bne	r2,r3,275a0 <___vfprintf_internal_r+0xfc>
   27598:	00001406 	br	275ec <___vfprintf_internal_r+0x148>
   2759c:	10c00326 	beq	r2,r3,275ac <___vfprintf_internal_r+0x108>
   275a0:	84000044 	addi	r16,r16,1
   275a4:	80800007 	ldb	r2,0(r16)
   275a8:	103ffc1e 	bne	r2,zero,2759c <__alt_data_end+0xf402759c>
   275ac:	8563c83a 	sub	r17,r16,r21
   275b0:	88000e26 	beq	r17,zero,275ec <___vfprintf_internal_r+0x148>
   275b4:	d8c02017 	ldw	r3,128(sp)
   275b8:	d8801f17 	ldw	r2,124(sp)
   275bc:	45400015 	stw	r21,0(r8)
   275c0:	1c47883a 	add	r3,r3,r17
   275c4:	10800044 	addi	r2,r2,1
   275c8:	d8c02015 	stw	r3,128(sp)
   275cc:	44400115 	stw	r17,4(r8)
   275d0:	d8801f15 	stw	r2,124(sp)
   275d4:	00c001c4 	movi	r3,7
   275d8:	1880a716 	blt	r3,r2,27878 <___vfprintf_internal_r+0x3d4>
   275dc:	42000204 	addi	r8,r8,8
   275e0:	d9402f17 	ldw	r5,188(sp)
   275e4:	2c4b883a 	add	r5,r5,r17
   275e8:	d9402f15 	stw	r5,188(sp)
   275ec:	80800007 	ldb	r2,0(r16)
   275f0:	1000a826 	beq	r2,zero,27894 <___vfprintf_internal_r+0x3f0>
   275f4:	84400047 	ldb	r17,1(r16)
   275f8:	00bfffc4 	movi	r2,-1
   275fc:	85400044 	addi	r21,r16,1
   27600:	d8002785 	stb	zero,158(sp)
   27604:	0007883a 	mov	r3,zero
   27608:	000f883a 	mov	r7,zero
   2760c:	d8802915 	stw	r2,164(sp)
   27610:	d8003115 	stw	zero,196(sp)
   27614:	0025883a 	mov	r18,zero
   27618:	01401604 	movi	r5,88
   2761c:	01800244 	movi	r6,9
   27620:	02800a84 	movi	r10,42
   27624:	02401b04 	movi	r9,108
   27628:	ad400044 	addi	r21,r21,1
   2762c:	88bff804 	addi	r2,r17,-32
   27630:	28830436 	bltu	r5,r2,28244 <___vfprintf_internal_r+0xda0>
   27634:	100490ba 	slli	r2,r2,2
   27638:	010000b4 	movhi	r4,2
   2763c:	211d9304 	addi	r4,r4,30284
   27640:	1105883a 	add	r2,r2,r4
   27644:	10800017 	ldw	r2,0(r2)
   27648:	1000683a 	jmp	r2
   2764c:	00028164 	muli	zero,zero,2565
   27650:	00028244 	movi	zero,2569
   27654:	00028244 	movi	zero,2569
   27658:	00028184 	movi	zero,2566
   2765c:	00028244 	movi	zero,2569
   27660:	00028244 	movi	zero,2569
   27664:	00028244 	movi	zero,2569
   27668:	00028244 	movi	zero,2569
   2766c:	00028244 	movi	zero,2569
   27670:	00028244 	movi	zero,2569
   27674:	000278f8 	rdprs	zero,zero,2531
   27678:	000280a0 	cmpeqi	zero,zero,2562
   2767c:	00028244 	movi	zero,2569
   27680:	000277c0 	call	277c <__alt_mem_onchip_memory-0x1d884>
   27684:	00027920 	cmpeqi	zero,zero,2532
   27688:	00028244 	movi	zero,2569
   2768c:	00027960 	cmpeqi	zero,zero,2533
   27690:	0002796c 	andhi	zero,zero,2533
   27694:	0002796c 	andhi	zero,zero,2533
   27698:	0002796c 	andhi	zero,zero,2533
   2769c:	0002796c 	andhi	zero,zero,2533
   276a0:	0002796c 	andhi	zero,zero,2533
   276a4:	0002796c 	andhi	zero,zero,2533
   276a8:	0002796c 	andhi	zero,zero,2533
   276ac:	0002796c 	andhi	zero,zero,2533
   276b0:	0002796c 	andhi	zero,zero,2533
   276b4:	00028244 	movi	zero,2569
   276b8:	00028244 	movi	zero,2569
   276bc:	00028244 	movi	zero,2569
   276c0:	00028244 	movi	zero,2569
   276c4:	00028244 	movi	zero,2569
   276c8:	00028244 	movi	zero,2569
   276cc:	00028244 	movi	zero,2569
   276d0:	00028244 	movi	zero,2569
   276d4:	00028244 	movi	zero,2569
   276d8:	00028244 	movi	zero,2569
   276dc:	000279a0 	cmpeqi	zero,zero,2534
   276e0:	00027a5c 	xori	zero,zero,2537
   276e4:	00028244 	movi	zero,2569
   276e8:	00027a5c 	xori	zero,zero,2537
   276ec:	00028244 	movi	zero,2569
   276f0:	00028244 	movi	zero,2569
   276f4:	00028244 	movi	zero,2569
   276f8:	00028244 	movi	zero,2569
   276fc:	00027afc 	xorhi	zero,zero,2539
   27700:	00028244 	movi	zero,2569
   27704:	00028244 	movi	zero,2569
   27708:	00027b08 	cmpgei	zero,zero,2540
   2770c:	00028244 	movi	zero,2569
   27710:	00028244 	movi	zero,2569
   27714:	00028244 	movi	zero,2569
   27718:	00028244 	movi	zero,2569
   2771c:	00028244 	movi	zero,2569
   27720:	00027f80 	call	27f8 <__alt_mem_onchip_memory-0x1d808>
   27724:	00028244 	movi	zero,2569
   27728:	00028244 	movi	zero,2569
   2772c:	00027fe0 	cmpeqi	zero,zero,2559
   27730:	00028244 	movi	zero,2569
   27734:	00028244 	movi	zero,2569
   27738:	00028244 	movi	zero,2569
   2773c:	00028244 	movi	zero,2569
   27740:	00028244 	movi	zero,2569
   27744:	00028244 	movi	zero,2569
   27748:	00028244 	movi	zero,2569
   2774c:	00028244 	movi	zero,2569
   27750:	00028244 	movi	zero,2569
   27754:	00028244 	movi	zero,2569
   27758:	000281f0 	cmpltui	zero,zero,2567
   2775c:	00028190 	cmplti	zero,zero,2566
   27760:	00027a5c 	xori	zero,zero,2537
   27764:	00027a5c 	xori	zero,zero,2537
   27768:	00027a5c 	xori	zero,zero,2537
   2776c:	000281a0 	cmpeqi	zero,zero,2566
   27770:	00028190 	cmplti	zero,zero,2566
   27774:	00028244 	movi	zero,2569
   27778:	00028244 	movi	zero,2569
   2777c:	000281ac 	andhi	zero,zero,2566
   27780:	00028244 	movi	zero,2569
   27784:	000281bc 	xorhi	zero,zero,2566
   27788:	00028090 	cmplti	zero,zero,2562
   2778c:	000277cc 	andi	zero,zero,2527
   27790:	000280b0 	cmpltui	zero,zero,2562
   27794:	00028244 	movi	zero,2569
   27798:	000280bc 	xorhi	zero,zero,2562
   2779c:	00028244 	movi	zero,2569
   277a0:	00028118 	cmpnei	zero,zero,2564
   277a4:	00028244 	movi	zero,2569
   277a8:	00028244 	movi	zero,2569
   277ac:	00028128 	cmpgeui	zero,zero,2564
   277b0:	d9003117 	ldw	r4,196(sp)
   277b4:	d8802d15 	stw	r2,180(sp)
   277b8:	0109c83a 	sub	r4,zero,r4
   277bc:	d9003115 	stw	r4,196(sp)
   277c0:	94800114 	ori	r18,r18,4
   277c4:	ac400007 	ldb	r17,0(r21)
   277c8:	003f9706 	br	27628 <__alt_data_end+0xf4027628>
   277cc:	00800c04 	movi	r2,48
   277d0:	d9002d17 	ldw	r4,180(sp)
   277d4:	d9402917 	ldw	r5,164(sp)
   277d8:	d8802705 	stb	r2,156(sp)
   277dc:	00801e04 	movi	r2,120
   277e0:	d8802745 	stb	r2,157(sp)
   277e4:	d8002785 	stb	zero,158(sp)
   277e8:	20c00104 	addi	r3,r4,4
   277ec:	24c00017 	ldw	r19,0(r4)
   277f0:	002d883a 	mov	r22,zero
   277f4:	90800094 	ori	r2,r18,2
   277f8:	28029a16 	blt	r5,zero,28264 <___vfprintf_internal_r+0xdc0>
   277fc:	00bfdfc4 	movi	r2,-129
   27800:	90a4703a 	and	r18,r18,r2
   27804:	d8c02d15 	stw	r3,180(sp)
   27808:	94800094 	ori	r18,r18,2
   2780c:	9802871e 	bne	r19,zero,2822c <___vfprintf_internal_r+0xd88>
   27810:	008000f4 	movhi	r2,3
   27814:	10971f04 	addi	r2,r2,23676
   27818:	d8803915 	stw	r2,228(sp)
   2781c:	04401e04 	movi	r17,120
   27820:	d8802917 	ldw	r2,164(sp)
   27824:	0039883a 	mov	fp,zero
   27828:	1001e926 	beq	r2,zero,27fd0 <___vfprintf_internal_r+0xb2c>
   2782c:	0027883a 	mov	r19,zero
   27830:	002d883a 	mov	r22,zero
   27834:	00020506 	br	2804c <___vfprintf_internal_r+0xba8>
   27838:	d9002c17 	ldw	r4,176(sp)
   2783c:	b80b883a 	mov	r5,r23
   27840:	00297740 	call	29774 <__swsetup_r>
   27844:	1005ac1e 	bne	r2,zero,28ef8 <___vfprintf_internal_r+0x1a54>
   27848:	b880030b 	ldhu	r2,12(r23)
   2784c:	00c00284 	movi	r3,10
   27850:	1080068c 	andi	r2,r2,26
   27854:	10ff3c1e 	bne	r2,r3,27548 <__alt_data_end+0xf4027548>
   27858:	b880038f 	ldh	r2,14(r23)
   2785c:	103f3a16 	blt	r2,zero,27548 <__alt_data_end+0xf4027548>
   27860:	d9c02d17 	ldw	r7,180(sp)
   27864:	d9002c17 	ldw	r4,176(sp)
   27868:	a80d883a 	mov	r6,r21
   2786c:	b80b883a 	mov	r5,r23
   27870:	00296b80 	call	296b8 <__sbprintf>
   27874:	00001106 	br	278bc <___vfprintf_internal_r+0x418>
   27878:	d9002c17 	ldw	r4,176(sp)
   2787c:	d9801e04 	addi	r6,sp,120
   27880:	b80b883a 	mov	r5,r23
   27884:	002ea2c0 	call	2ea2c <__sprint_r>
   27888:	1000081e 	bne	r2,zero,278ac <___vfprintf_internal_r+0x408>
   2788c:	da000404 	addi	r8,sp,16
   27890:	003f5306 	br	275e0 <__alt_data_end+0xf40275e0>
   27894:	d8802017 	ldw	r2,128(sp)
   27898:	10000426 	beq	r2,zero,278ac <___vfprintf_internal_r+0x408>
   2789c:	d9002c17 	ldw	r4,176(sp)
   278a0:	d9801e04 	addi	r6,sp,120
   278a4:	b80b883a 	mov	r5,r23
   278a8:	002ea2c0 	call	2ea2c <__sprint_r>
   278ac:	b880030b 	ldhu	r2,12(r23)
   278b0:	1080100c 	andi	r2,r2,64
   278b4:	1005901e 	bne	r2,zero,28ef8 <___vfprintf_internal_r+0x1a54>
   278b8:	d8802f17 	ldw	r2,188(sp)
   278bc:	dfc04717 	ldw	ra,284(sp)
   278c0:	df004617 	ldw	fp,280(sp)
   278c4:	ddc04517 	ldw	r23,276(sp)
   278c8:	dd804417 	ldw	r22,272(sp)
   278cc:	dd404317 	ldw	r21,268(sp)
   278d0:	dd004217 	ldw	r20,264(sp)
   278d4:	dcc04117 	ldw	r19,260(sp)
   278d8:	dc804017 	ldw	r18,256(sp)
   278dc:	dc403f17 	ldw	r17,252(sp)
   278e0:	dc003e17 	ldw	r16,248(sp)
   278e4:	dec04804 	addi	sp,sp,288
   278e8:	f800283a 	ret
   278ec:	d9002c17 	ldw	r4,176(sp)
   278f0:	002b7480 	call	2b748 <__sinit>
   278f4:	003f0406 	br	27508 <__alt_data_end+0xf4027508>
   278f8:	d8802d17 	ldw	r2,180(sp)
   278fc:	d9002d17 	ldw	r4,180(sp)
   27900:	10800017 	ldw	r2,0(r2)
   27904:	d8803115 	stw	r2,196(sp)
   27908:	20800104 	addi	r2,r4,4
   2790c:	d9003117 	ldw	r4,196(sp)
   27910:	203fa716 	blt	r4,zero,277b0 <__alt_data_end+0xf40277b0>
   27914:	d8802d15 	stw	r2,180(sp)
   27918:	ac400007 	ldb	r17,0(r21)
   2791c:	003f4206 	br	27628 <__alt_data_end+0xf4027628>
   27920:	ac400007 	ldb	r17,0(r21)
   27924:	aac00044 	addi	r11,r21,1
   27928:	8a872826 	beq	r17,r10,295cc <___vfprintf_internal_r+0x2128>
   2792c:	88bff404 	addi	r2,r17,-48
   27930:	0009883a 	mov	r4,zero
   27934:	30867d36 	bltu	r6,r2,2932c <___vfprintf_internal_r+0x1e88>
   27938:	5c400007 	ldb	r17,0(r11)
   2793c:	210002a4 	muli	r4,r4,10
   27940:	5d400044 	addi	r21,r11,1
   27944:	a817883a 	mov	r11,r21
   27948:	2089883a 	add	r4,r4,r2
   2794c:	88bff404 	addi	r2,r17,-48
   27950:	30bff92e 	bgeu	r6,r2,27938 <__alt_data_end+0xf4027938>
   27954:	2005c916 	blt	r4,zero,2907c <___vfprintf_internal_r+0x1bd8>
   27958:	d9002915 	stw	r4,164(sp)
   2795c:	003f3306 	br	2762c <__alt_data_end+0xf402762c>
   27960:	94802014 	ori	r18,r18,128
   27964:	ac400007 	ldb	r17,0(r21)
   27968:	003f2f06 	br	27628 <__alt_data_end+0xf4027628>
   2796c:	a809883a 	mov	r4,r21
   27970:	d8003115 	stw	zero,196(sp)
   27974:	88bff404 	addi	r2,r17,-48
   27978:	0017883a 	mov	r11,zero
   2797c:	24400007 	ldb	r17,0(r4)
   27980:	5ac002a4 	muli	r11,r11,10
   27984:	ad400044 	addi	r21,r21,1
   27988:	a809883a 	mov	r4,r21
   2798c:	12d7883a 	add	r11,r2,r11
   27990:	88bff404 	addi	r2,r17,-48
   27994:	30bff92e 	bgeu	r6,r2,2797c <__alt_data_end+0xf402797c>
   27998:	dac03115 	stw	r11,196(sp)
   2799c:	003f2306 	br	2762c <__alt_data_end+0xf402762c>
   279a0:	18c03fcc 	andi	r3,r3,255
   279a4:	18072b1e 	bne	r3,zero,29654 <___vfprintf_internal_r+0x21b0>
   279a8:	94800414 	ori	r18,r18,16
   279ac:	9080080c 	andi	r2,r18,32
   279b0:	10037b26 	beq	r2,zero,287a0 <___vfprintf_internal_r+0x12fc>
   279b4:	d9402d17 	ldw	r5,180(sp)
   279b8:	28800117 	ldw	r2,4(r5)
   279bc:	2cc00017 	ldw	r19,0(r5)
   279c0:	29400204 	addi	r5,r5,8
   279c4:	d9402d15 	stw	r5,180(sp)
   279c8:	102d883a 	mov	r22,r2
   279cc:	10044b16 	blt	r2,zero,28afc <___vfprintf_internal_r+0x1658>
   279d0:	d9402917 	ldw	r5,164(sp)
   279d4:	df002783 	ldbu	fp,158(sp)
   279d8:	2803bc16 	blt	r5,zero,288cc <___vfprintf_internal_r+0x1428>
   279dc:	00ffdfc4 	movi	r3,-129
   279e0:	9d84b03a 	or	r2,r19,r22
   279e4:	90e4703a 	and	r18,r18,r3
   279e8:	10017726 	beq	r2,zero,27fc8 <___vfprintf_internal_r+0xb24>
   279ec:	b0038326 	beq	r22,zero,287fc <___vfprintf_internal_r+0x1358>
   279f0:	dc402a15 	stw	r17,168(sp)
   279f4:	dc001e04 	addi	r16,sp,120
   279f8:	b023883a 	mov	r17,r22
   279fc:	402d883a 	mov	r22,r8
   27a00:	9809883a 	mov	r4,r19
   27a04:	880b883a 	mov	r5,r17
   27a08:	01800284 	movi	r6,10
   27a0c:	000f883a 	mov	r7,zero
   27a10:	0030e240 	call	30e24 <__umoddi3>
   27a14:	10800c04 	addi	r2,r2,48
   27a18:	843fffc4 	addi	r16,r16,-1
   27a1c:	9809883a 	mov	r4,r19
   27a20:	880b883a 	mov	r5,r17
   27a24:	80800005 	stb	r2,0(r16)
   27a28:	01800284 	movi	r6,10
   27a2c:	000f883a 	mov	r7,zero
   27a30:	00308ac0 	call	308ac <__udivdi3>
   27a34:	1027883a 	mov	r19,r2
   27a38:	10c4b03a 	or	r2,r2,r3
   27a3c:	1823883a 	mov	r17,r3
   27a40:	103fef1e 	bne	r2,zero,27a00 <__alt_data_end+0xf4027a00>
   27a44:	d8c02817 	ldw	r3,160(sp)
   27a48:	dc402a17 	ldw	r17,168(sp)
   27a4c:	b011883a 	mov	r8,r22
   27a50:	1c07c83a 	sub	r3,r3,r16
   27a54:	d8c02e15 	stw	r3,184(sp)
   27a58:	00005906 	br	27bc0 <___vfprintf_internal_r+0x71c>
   27a5c:	18c03fcc 	andi	r3,r3,255
   27a60:	1806fa1e 	bne	r3,zero,2964c <___vfprintf_internal_r+0x21a8>
   27a64:	9080020c 	andi	r2,r18,8
   27a68:	10048a26 	beq	r2,zero,28c94 <___vfprintf_internal_r+0x17f0>
   27a6c:	d8c02d17 	ldw	r3,180(sp)
   27a70:	d9002d17 	ldw	r4,180(sp)
   27a74:	d9402d17 	ldw	r5,180(sp)
   27a78:	18c00017 	ldw	r3,0(r3)
   27a7c:	21000117 	ldw	r4,4(r4)
   27a80:	29400204 	addi	r5,r5,8
   27a84:	d8c03615 	stw	r3,216(sp)
   27a88:	d9003815 	stw	r4,224(sp)
   27a8c:	d9402d15 	stw	r5,180(sp)
   27a90:	d9003617 	ldw	r4,216(sp)
   27a94:	d9403817 	ldw	r5,224(sp)
   27a98:	da003d15 	stw	r8,244(sp)
   27a9c:	04000044 	movi	r16,1
   27aa0:	002315c0 	call	2315c <__fpclassifyd>
   27aa4:	da003d17 	ldw	r8,244(sp)
   27aa8:	14041f1e 	bne	r2,r16,28b28 <___vfprintf_internal_r+0x1684>
   27aac:	d9003617 	ldw	r4,216(sp)
   27ab0:	d9403817 	ldw	r5,224(sp)
   27ab4:	000d883a 	mov	r6,zero
   27ab8:	000f883a 	mov	r7,zero
   27abc:	0025d3c0 	call	25d3c <__ledf2>
   27ac0:	da003d17 	ldw	r8,244(sp)
   27ac4:	1005be16 	blt	r2,zero,291c0 <___vfprintf_internal_r+0x1d1c>
   27ac8:	df002783 	ldbu	fp,158(sp)
   27acc:	008011c4 	movi	r2,71
   27ad0:	1445330e 	bge	r2,r17,28fa0 <___vfprintf_internal_r+0x1afc>
   27ad4:	040000f4 	movhi	r16,3
   27ad8:	84171704 	addi	r16,r16,23644
   27adc:	00c000c4 	movi	r3,3
   27ae0:	00bfdfc4 	movi	r2,-129
   27ae4:	d8c02a15 	stw	r3,168(sp)
   27ae8:	90a4703a 	and	r18,r18,r2
   27aec:	d8c02e15 	stw	r3,184(sp)
   27af0:	d8002915 	stw	zero,164(sp)
   27af4:	d8003215 	stw	zero,200(sp)
   27af8:	00003706 	br	27bd8 <___vfprintf_internal_r+0x734>
   27afc:	94800214 	ori	r18,r18,8
   27b00:	ac400007 	ldb	r17,0(r21)
   27b04:	003ec806 	br	27628 <__alt_data_end+0xf4027628>
   27b08:	18c03fcc 	andi	r3,r3,255
   27b0c:	1806db1e 	bne	r3,zero,2967c <___vfprintf_internal_r+0x21d8>
   27b10:	94800414 	ori	r18,r18,16
   27b14:	9080080c 	andi	r2,r18,32
   27b18:	1002d826 	beq	r2,zero,2867c <___vfprintf_internal_r+0x11d8>
   27b1c:	d9402d17 	ldw	r5,180(sp)
   27b20:	d8c02917 	ldw	r3,164(sp)
   27b24:	d8002785 	stb	zero,158(sp)
   27b28:	28800204 	addi	r2,r5,8
   27b2c:	2cc00017 	ldw	r19,0(r5)
   27b30:	2d800117 	ldw	r22,4(r5)
   27b34:	18048f16 	blt	r3,zero,28d74 <___vfprintf_internal_r+0x18d0>
   27b38:	013fdfc4 	movi	r4,-129
   27b3c:	9d86b03a 	or	r3,r19,r22
   27b40:	d8802d15 	stw	r2,180(sp)
   27b44:	9124703a 	and	r18,r18,r4
   27b48:	1802d91e 	bne	r3,zero,286b0 <___vfprintf_internal_r+0x120c>
   27b4c:	d8c02917 	ldw	r3,164(sp)
   27b50:	0039883a 	mov	fp,zero
   27b54:	1805c326 	beq	r3,zero,29264 <___vfprintf_internal_r+0x1dc0>
   27b58:	0027883a 	mov	r19,zero
   27b5c:	002d883a 	mov	r22,zero
   27b60:	dc001e04 	addi	r16,sp,120
   27b64:	9806d0fa 	srli	r3,r19,3
   27b68:	b008977a 	slli	r4,r22,29
   27b6c:	b02cd0fa 	srli	r22,r22,3
   27b70:	9cc001cc 	andi	r19,r19,7
   27b74:	98800c04 	addi	r2,r19,48
   27b78:	843fffc4 	addi	r16,r16,-1
   27b7c:	20e6b03a 	or	r19,r4,r3
   27b80:	80800005 	stb	r2,0(r16)
   27b84:	9d86b03a 	or	r3,r19,r22
   27b88:	183ff61e 	bne	r3,zero,27b64 <__alt_data_end+0xf4027b64>
   27b8c:	90c0004c 	andi	r3,r18,1
   27b90:	18013b26 	beq	r3,zero,28080 <___vfprintf_internal_r+0xbdc>
   27b94:	10803fcc 	andi	r2,r2,255
   27b98:	1080201c 	xori	r2,r2,128
   27b9c:	10bfe004 	addi	r2,r2,-128
   27ba0:	00c00c04 	movi	r3,48
   27ba4:	10c13626 	beq	r2,r3,28080 <___vfprintf_internal_r+0xbdc>
   27ba8:	80ffffc5 	stb	r3,-1(r16)
   27bac:	d8c02817 	ldw	r3,160(sp)
   27bb0:	80bfffc4 	addi	r2,r16,-1
   27bb4:	1021883a 	mov	r16,r2
   27bb8:	1887c83a 	sub	r3,r3,r2
   27bbc:	d8c02e15 	stw	r3,184(sp)
   27bc0:	d8802e17 	ldw	r2,184(sp)
   27bc4:	d9002917 	ldw	r4,164(sp)
   27bc8:	1100010e 	bge	r2,r4,27bd0 <___vfprintf_internal_r+0x72c>
   27bcc:	2005883a 	mov	r2,r4
   27bd0:	d8802a15 	stw	r2,168(sp)
   27bd4:	d8003215 	stw	zero,200(sp)
   27bd8:	e7003fcc 	andi	fp,fp,255
   27bdc:	e700201c 	xori	fp,fp,128
   27be0:	e73fe004 	addi	fp,fp,-128
   27be4:	e0000326 	beq	fp,zero,27bf4 <___vfprintf_internal_r+0x750>
   27be8:	d8c02a17 	ldw	r3,168(sp)
   27bec:	18c00044 	addi	r3,r3,1
   27bf0:	d8c02a15 	stw	r3,168(sp)
   27bf4:	90c0008c 	andi	r3,r18,2
   27bf8:	d8c02b15 	stw	r3,172(sp)
   27bfc:	18000326 	beq	r3,zero,27c0c <___vfprintf_internal_r+0x768>
   27c00:	d8c02a17 	ldw	r3,168(sp)
   27c04:	18c00084 	addi	r3,r3,2
   27c08:	d8c02a15 	stw	r3,168(sp)
   27c0c:	90c0210c 	andi	r3,r18,132
   27c10:	d8c03015 	stw	r3,192(sp)
   27c14:	1801a31e 	bne	r3,zero,282a4 <___vfprintf_internal_r+0xe00>
   27c18:	d9003117 	ldw	r4,196(sp)
   27c1c:	d8c02a17 	ldw	r3,168(sp)
   27c20:	20e7c83a 	sub	r19,r4,r3
   27c24:	04c19f0e 	bge	zero,r19,282a4 <___vfprintf_internal_r+0xe00>
   27c28:	02400404 	movi	r9,16
   27c2c:	d8c02017 	ldw	r3,128(sp)
   27c30:	d8801f17 	ldw	r2,124(sp)
   27c34:	4cc50d0e 	bge	r9,r19,2906c <___vfprintf_internal_r+0x1bc8>
   27c38:	014000f4 	movhi	r5,3
   27c3c:	29572a84 	addi	r5,r5,23722
   27c40:	dc403b15 	stw	r17,236(sp)
   27c44:	d9403515 	stw	r5,212(sp)
   27c48:	9823883a 	mov	r17,r19
   27c4c:	482d883a 	mov	r22,r9
   27c50:	9027883a 	mov	r19,r18
   27c54:	070001c4 	movi	fp,7
   27c58:	8025883a 	mov	r18,r16
   27c5c:	dc002c17 	ldw	r16,176(sp)
   27c60:	00000306 	br	27c70 <___vfprintf_internal_r+0x7cc>
   27c64:	8c7ffc04 	addi	r17,r17,-16
   27c68:	42000204 	addi	r8,r8,8
   27c6c:	b440130e 	bge	r22,r17,27cbc <___vfprintf_internal_r+0x818>
   27c70:	010000f4 	movhi	r4,3
   27c74:	18c00404 	addi	r3,r3,16
   27c78:	10800044 	addi	r2,r2,1
   27c7c:	21172a84 	addi	r4,r4,23722
   27c80:	41000015 	stw	r4,0(r8)
   27c84:	45800115 	stw	r22,4(r8)
   27c88:	d8c02015 	stw	r3,128(sp)
   27c8c:	d8801f15 	stw	r2,124(sp)
   27c90:	e0bff40e 	bge	fp,r2,27c64 <__alt_data_end+0xf4027c64>
   27c94:	d9801e04 	addi	r6,sp,120
   27c98:	b80b883a 	mov	r5,r23
   27c9c:	8009883a 	mov	r4,r16
   27ca0:	002ea2c0 	call	2ea2c <__sprint_r>
   27ca4:	103f011e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   27ca8:	8c7ffc04 	addi	r17,r17,-16
   27cac:	d8c02017 	ldw	r3,128(sp)
   27cb0:	d8801f17 	ldw	r2,124(sp)
   27cb4:	da000404 	addi	r8,sp,16
   27cb8:	b47fed16 	blt	r22,r17,27c70 <__alt_data_end+0xf4027c70>
   27cbc:	9021883a 	mov	r16,r18
   27cc0:	9825883a 	mov	r18,r19
   27cc4:	8827883a 	mov	r19,r17
   27cc8:	dc403b17 	ldw	r17,236(sp)
   27ccc:	d9403517 	ldw	r5,212(sp)
   27cd0:	98c7883a 	add	r3,r19,r3
   27cd4:	10800044 	addi	r2,r2,1
   27cd8:	41400015 	stw	r5,0(r8)
   27cdc:	44c00115 	stw	r19,4(r8)
   27ce0:	d8c02015 	stw	r3,128(sp)
   27ce4:	d8801f15 	stw	r2,124(sp)
   27ce8:	010001c4 	movi	r4,7
   27cec:	2082a316 	blt	r4,r2,2877c <___vfprintf_internal_r+0x12d8>
   27cf0:	df002787 	ldb	fp,158(sp)
   27cf4:	42000204 	addi	r8,r8,8
   27cf8:	e0000c26 	beq	fp,zero,27d2c <___vfprintf_internal_r+0x888>
   27cfc:	d8801f17 	ldw	r2,124(sp)
   27d00:	d9002784 	addi	r4,sp,158
   27d04:	18c00044 	addi	r3,r3,1
   27d08:	10800044 	addi	r2,r2,1
   27d0c:	41000015 	stw	r4,0(r8)
   27d10:	01000044 	movi	r4,1
   27d14:	41000115 	stw	r4,4(r8)
   27d18:	d8c02015 	stw	r3,128(sp)
   27d1c:	d8801f15 	stw	r2,124(sp)
   27d20:	010001c4 	movi	r4,7
   27d24:	20823c16 	blt	r4,r2,28618 <___vfprintf_internal_r+0x1174>
   27d28:	42000204 	addi	r8,r8,8
   27d2c:	d8802b17 	ldw	r2,172(sp)
   27d30:	10000c26 	beq	r2,zero,27d64 <___vfprintf_internal_r+0x8c0>
   27d34:	d8801f17 	ldw	r2,124(sp)
   27d38:	d9002704 	addi	r4,sp,156
   27d3c:	18c00084 	addi	r3,r3,2
   27d40:	10800044 	addi	r2,r2,1
   27d44:	41000015 	stw	r4,0(r8)
   27d48:	01000084 	movi	r4,2
   27d4c:	41000115 	stw	r4,4(r8)
   27d50:	d8c02015 	stw	r3,128(sp)
   27d54:	d8801f15 	stw	r2,124(sp)
   27d58:	010001c4 	movi	r4,7
   27d5c:	20823616 	blt	r4,r2,28638 <___vfprintf_internal_r+0x1194>
   27d60:	42000204 	addi	r8,r8,8
   27d64:	d9003017 	ldw	r4,192(sp)
   27d68:	00802004 	movi	r2,128
   27d6c:	20819926 	beq	r4,r2,283d4 <___vfprintf_internal_r+0xf30>
   27d70:	d9402917 	ldw	r5,164(sp)
   27d74:	d8802e17 	ldw	r2,184(sp)
   27d78:	28adc83a 	sub	r22,r5,r2
   27d7c:	0580310e 	bge	zero,r22,27e44 <___vfprintf_internal_r+0x9a0>
   27d80:	07000404 	movi	fp,16
   27d84:	d8801f17 	ldw	r2,124(sp)
   27d88:	e584140e 	bge	fp,r22,28ddc <___vfprintf_internal_r+0x1938>
   27d8c:	014000f4 	movhi	r5,3
   27d90:	29572684 	addi	r5,r5,23706
   27d94:	dc402915 	stw	r17,164(sp)
   27d98:	d9402b15 	stw	r5,172(sp)
   27d9c:	b023883a 	mov	r17,r22
   27da0:	04c001c4 	movi	r19,7
   27da4:	a82d883a 	mov	r22,r21
   27da8:	902b883a 	mov	r21,r18
   27dac:	8025883a 	mov	r18,r16
   27db0:	dc002c17 	ldw	r16,176(sp)
   27db4:	00000306 	br	27dc4 <___vfprintf_internal_r+0x920>
   27db8:	8c7ffc04 	addi	r17,r17,-16
   27dbc:	42000204 	addi	r8,r8,8
   27dc0:	e440110e 	bge	fp,r17,27e08 <___vfprintf_internal_r+0x964>
   27dc4:	18c00404 	addi	r3,r3,16
   27dc8:	10800044 	addi	r2,r2,1
   27dcc:	45000015 	stw	r20,0(r8)
   27dd0:	47000115 	stw	fp,4(r8)
   27dd4:	d8c02015 	stw	r3,128(sp)
   27dd8:	d8801f15 	stw	r2,124(sp)
   27ddc:	98bff60e 	bge	r19,r2,27db8 <__alt_data_end+0xf4027db8>
   27de0:	d9801e04 	addi	r6,sp,120
   27de4:	b80b883a 	mov	r5,r23
   27de8:	8009883a 	mov	r4,r16
   27dec:	002ea2c0 	call	2ea2c <__sprint_r>
   27df0:	103eae1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   27df4:	8c7ffc04 	addi	r17,r17,-16
   27df8:	d8c02017 	ldw	r3,128(sp)
   27dfc:	d8801f17 	ldw	r2,124(sp)
   27e00:	da000404 	addi	r8,sp,16
   27e04:	e47fef16 	blt	fp,r17,27dc4 <__alt_data_end+0xf4027dc4>
   27e08:	9021883a 	mov	r16,r18
   27e0c:	a825883a 	mov	r18,r21
   27e10:	b02b883a 	mov	r21,r22
   27e14:	882d883a 	mov	r22,r17
   27e18:	dc402917 	ldw	r17,164(sp)
   27e1c:	d9002b17 	ldw	r4,172(sp)
   27e20:	1d87883a 	add	r3,r3,r22
   27e24:	10800044 	addi	r2,r2,1
   27e28:	41000015 	stw	r4,0(r8)
   27e2c:	45800115 	stw	r22,4(r8)
   27e30:	d8c02015 	stw	r3,128(sp)
   27e34:	d8801f15 	stw	r2,124(sp)
   27e38:	010001c4 	movi	r4,7
   27e3c:	2081ee16 	blt	r4,r2,285f8 <___vfprintf_internal_r+0x1154>
   27e40:	42000204 	addi	r8,r8,8
   27e44:	9080400c 	andi	r2,r18,256
   27e48:	1001181e 	bne	r2,zero,282ac <___vfprintf_internal_r+0xe08>
   27e4c:	d9402e17 	ldw	r5,184(sp)
   27e50:	d8801f17 	ldw	r2,124(sp)
   27e54:	44000015 	stw	r16,0(r8)
   27e58:	1947883a 	add	r3,r3,r5
   27e5c:	10800044 	addi	r2,r2,1
   27e60:	41400115 	stw	r5,4(r8)
   27e64:	d8c02015 	stw	r3,128(sp)
   27e68:	d8801f15 	stw	r2,124(sp)
   27e6c:	010001c4 	movi	r4,7
   27e70:	2081d316 	blt	r4,r2,285c0 <___vfprintf_internal_r+0x111c>
   27e74:	42000204 	addi	r8,r8,8
   27e78:	9480010c 	andi	r18,r18,4
   27e7c:	90003226 	beq	r18,zero,27f48 <___vfprintf_internal_r+0xaa4>
   27e80:	d9403117 	ldw	r5,196(sp)
   27e84:	d8802a17 	ldw	r2,168(sp)
   27e88:	28a1c83a 	sub	r16,r5,r2
   27e8c:	04002e0e 	bge	zero,r16,27f48 <___vfprintf_internal_r+0xaa4>
   27e90:	04400404 	movi	r17,16
   27e94:	d8801f17 	ldw	r2,124(sp)
   27e98:	8c04a20e 	bge	r17,r16,29124 <___vfprintf_internal_r+0x1c80>
   27e9c:	014000f4 	movhi	r5,3
   27ea0:	29572a84 	addi	r5,r5,23722
   27ea4:	d9403515 	stw	r5,212(sp)
   27ea8:	048001c4 	movi	r18,7
   27eac:	dcc02c17 	ldw	r19,176(sp)
   27eb0:	00000306 	br	27ec0 <___vfprintf_internal_r+0xa1c>
   27eb4:	843ffc04 	addi	r16,r16,-16
   27eb8:	42000204 	addi	r8,r8,8
   27ebc:	8c00130e 	bge	r17,r16,27f0c <___vfprintf_internal_r+0xa68>
   27ec0:	010000f4 	movhi	r4,3
   27ec4:	18c00404 	addi	r3,r3,16
   27ec8:	10800044 	addi	r2,r2,1
   27ecc:	21172a84 	addi	r4,r4,23722
   27ed0:	41000015 	stw	r4,0(r8)
   27ed4:	44400115 	stw	r17,4(r8)
   27ed8:	d8c02015 	stw	r3,128(sp)
   27edc:	d8801f15 	stw	r2,124(sp)
   27ee0:	90bff40e 	bge	r18,r2,27eb4 <__alt_data_end+0xf4027eb4>
   27ee4:	d9801e04 	addi	r6,sp,120
   27ee8:	b80b883a 	mov	r5,r23
   27eec:	9809883a 	mov	r4,r19
   27ef0:	002ea2c0 	call	2ea2c <__sprint_r>
   27ef4:	103e6d1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   27ef8:	843ffc04 	addi	r16,r16,-16
   27efc:	d8c02017 	ldw	r3,128(sp)
   27f00:	d8801f17 	ldw	r2,124(sp)
   27f04:	da000404 	addi	r8,sp,16
   27f08:	8c3fed16 	blt	r17,r16,27ec0 <__alt_data_end+0xf4027ec0>
   27f0c:	d9403517 	ldw	r5,212(sp)
   27f10:	1c07883a 	add	r3,r3,r16
   27f14:	10800044 	addi	r2,r2,1
   27f18:	41400015 	stw	r5,0(r8)
   27f1c:	44000115 	stw	r16,4(r8)
   27f20:	d8c02015 	stw	r3,128(sp)
   27f24:	d8801f15 	stw	r2,124(sp)
   27f28:	010001c4 	movi	r4,7
   27f2c:	2080060e 	bge	r4,r2,27f48 <___vfprintf_internal_r+0xaa4>
   27f30:	d9002c17 	ldw	r4,176(sp)
   27f34:	d9801e04 	addi	r6,sp,120
   27f38:	b80b883a 	mov	r5,r23
   27f3c:	002ea2c0 	call	2ea2c <__sprint_r>
   27f40:	103e5a1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   27f44:	d8c02017 	ldw	r3,128(sp)
   27f48:	d8803117 	ldw	r2,196(sp)
   27f4c:	d9002a17 	ldw	r4,168(sp)
   27f50:	1100010e 	bge	r2,r4,27f58 <___vfprintf_internal_r+0xab4>
   27f54:	2005883a 	mov	r2,r4
   27f58:	d9402f17 	ldw	r5,188(sp)
   27f5c:	288b883a 	add	r5,r5,r2
   27f60:	d9402f15 	stw	r5,188(sp)
   27f64:	18019e1e 	bne	r3,zero,285e0 <___vfprintf_internal_r+0x113c>
   27f68:	a8800007 	ldb	r2,0(r21)
   27f6c:	d8001f15 	stw	zero,124(sp)
   27f70:	da000404 	addi	r8,sp,16
   27f74:	103d851e 	bne	r2,zero,2758c <__alt_data_end+0xf402758c>
   27f78:	a821883a 	mov	r16,r21
   27f7c:	003d9b06 	br	275ec <__alt_data_end+0xf40275ec>
   27f80:	18c03fcc 	andi	r3,r3,255
   27f84:	1805c11e 	bne	r3,zero,2968c <___vfprintf_internal_r+0x21e8>
   27f88:	94800414 	ori	r18,r18,16
   27f8c:	9080080c 	andi	r2,r18,32
   27f90:	10020c26 	beq	r2,zero,287c4 <___vfprintf_internal_r+0x1320>
   27f94:	d8802d17 	ldw	r2,180(sp)
   27f98:	d9002917 	ldw	r4,164(sp)
   27f9c:	d8002785 	stb	zero,158(sp)
   27fa0:	10c00204 	addi	r3,r2,8
   27fa4:	14c00017 	ldw	r19,0(r2)
   27fa8:	15800117 	ldw	r22,4(r2)
   27fac:	20040f16 	blt	r4,zero,28fec <___vfprintf_internal_r+0x1b48>
   27fb0:	013fdfc4 	movi	r4,-129
   27fb4:	9d84b03a 	or	r2,r19,r22
   27fb8:	d8c02d15 	stw	r3,180(sp)
   27fbc:	9124703a 	and	r18,r18,r4
   27fc0:	0039883a 	mov	fp,zero
   27fc4:	103e891e 	bne	r2,zero,279ec <__alt_data_end+0xf40279ec>
   27fc8:	d9002917 	ldw	r4,164(sp)
   27fcc:	2002c11e 	bne	r4,zero,28ad4 <___vfprintf_internal_r+0x1630>
   27fd0:	d8002915 	stw	zero,164(sp)
   27fd4:	d8002e15 	stw	zero,184(sp)
   27fd8:	dc001e04 	addi	r16,sp,120
   27fdc:	003ef806 	br	27bc0 <__alt_data_end+0xf4027bc0>
   27fe0:	18c03fcc 	andi	r3,r3,255
   27fe4:	18059d1e 	bne	r3,zero,2965c <___vfprintf_internal_r+0x21b8>
   27fe8:	014000f4 	movhi	r5,3
   27fec:	29571a04 	addi	r5,r5,23656
   27ff0:	d9403915 	stw	r5,228(sp)
   27ff4:	9080080c 	andi	r2,r18,32
   27ff8:	10005226 	beq	r2,zero,28144 <___vfprintf_internal_r+0xca0>
   27ffc:	d8802d17 	ldw	r2,180(sp)
   28000:	14c00017 	ldw	r19,0(r2)
   28004:	15800117 	ldw	r22,4(r2)
   28008:	10800204 	addi	r2,r2,8
   2800c:	d8802d15 	stw	r2,180(sp)
   28010:	9080004c 	andi	r2,r18,1
   28014:	10019026 	beq	r2,zero,28658 <___vfprintf_internal_r+0x11b4>
   28018:	9d84b03a 	or	r2,r19,r22
   2801c:	10036926 	beq	r2,zero,28dc4 <___vfprintf_internal_r+0x1920>
   28020:	d8c02917 	ldw	r3,164(sp)
   28024:	00800c04 	movi	r2,48
   28028:	d8802705 	stb	r2,156(sp)
   2802c:	dc402745 	stb	r17,157(sp)
   28030:	d8002785 	stb	zero,158(sp)
   28034:	90800094 	ori	r2,r18,2
   28038:	18045d16 	blt	r3,zero,291b0 <___vfprintf_internal_r+0x1d0c>
   2803c:	00bfdfc4 	movi	r2,-129
   28040:	90a4703a 	and	r18,r18,r2
   28044:	94800094 	ori	r18,r18,2
   28048:	0039883a 	mov	fp,zero
   2804c:	d9003917 	ldw	r4,228(sp)
   28050:	dc001e04 	addi	r16,sp,120
   28054:	988003cc 	andi	r2,r19,15
   28058:	b006973a 	slli	r3,r22,28
   2805c:	2085883a 	add	r2,r4,r2
   28060:	9826d13a 	srli	r19,r19,4
   28064:	10800003 	ldbu	r2,0(r2)
   28068:	b02cd13a 	srli	r22,r22,4
   2806c:	843fffc4 	addi	r16,r16,-1
   28070:	1ce6b03a 	or	r19,r3,r19
   28074:	80800005 	stb	r2,0(r16)
   28078:	9d84b03a 	or	r2,r19,r22
   2807c:	103ff51e 	bne	r2,zero,28054 <__alt_data_end+0xf4028054>
   28080:	d8c02817 	ldw	r3,160(sp)
   28084:	1c07c83a 	sub	r3,r3,r16
   28088:	d8c02e15 	stw	r3,184(sp)
   2808c:	003ecc06 	br	27bc0 <__alt_data_end+0xf4027bc0>
   28090:	18c03fcc 	andi	r3,r3,255
   28094:	183e9f26 	beq	r3,zero,27b14 <__alt_data_end+0xf4027b14>
   28098:	d9c02785 	stb	r7,158(sp)
   2809c:	003e9d06 	br	27b14 <__alt_data_end+0xf4027b14>
   280a0:	00c00044 	movi	r3,1
   280a4:	01c00ac4 	movi	r7,43
   280a8:	ac400007 	ldb	r17,0(r21)
   280ac:	003d5e06 	br	27628 <__alt_data_end+0xf4027628>
   280b0:	94800814 	ori	r18,r18,32
   280b4:	ac400007 	ldb	r17,0(r21)
   280b8:	003d5b06 	br	27628 <__alt_data_end+0xf4027628>
   280bc:	d8c02d17 	ldw	r3,180(sp)
   280c0:	d8002785 	stb	zero,158(sp)
   280c4:	1c000017 	ldw	r16,0(r3)
   280c8:	1cc00104 	addi	r19,r3,4
   280cc:	80041926 	beq	r16,zero,29134 <___vfprintf_internal_r+0x1c90>
   280d0:	d9002917 	ldw	r4,164(sp)
   280d4:	2003d016 	blt	r4,zero,29018 <___vfprintf_internal_r+0x1b74>
   280d8:	200d883a 	mov	r6,r4
   280dc:	000b883a 	mov	r5,zero
   280e0:	8009883a 	mov	r4,r16
   280e4:	da003d15 	stw	r8,244(sp)
   280e8:	002ccb40 	call	2ccb4 <memchr>
   280ec:	da003d17 	ldw	r8,244(sp)
   280f0:	10045426 	beq	r2,zero,29244 <___vfprintf_internal_r+0x1da0>
   280f4:	1405c83a 	sub	r2,r2,r16
   280f8:	d8802e15 	stw	r2,184(sp)
   280fc:	1003cc16 	blt	r2,zero,29030 <___vfprintf_internal_r+0x1b8c>
   28100:	df002783 	ldbu	fp,158(sp)
   28104:	d8802a15 	stw	r2,168(sp)
   28108:	dcc02d15 	stw	r19,180(sp)
   2810c:	d8002915 	stw	zero,164(sp)
   28110:	d8003215 	stw	zero,200(sp)
   28114:	003eb006 	br	27bd8 <__alt_data_end+0xf4027bd8>
   28118:	18c03fcc 	andi	r3,r3,255
   2811c:	183f9b26 	beq	r3,zero,27f8c <__alt_data_end+0xf4027f8c>
   28120:	d9c02785 	stb	r7,158(sp)
   28124:	003f9906 	br	27f8c <__alt_data_end+0xf4027f8c>
   28128:	18c03fcc 	andi	r3,r3,255
   2812c:	1805551e 	bne	r3,zero,29684 <___vfprintf_internal_r+0x21e0>
   28130:	014000f4 	movhi	r5,3
   28134:	29571f04 	addi	r5,r5,23676
   28138:	d9403915 	stw	r5,228(sp)
   2813c:	9080080c 	andi	r2,r18,32
   28140:	103fae1e 	bne	r2,zero,27ffc <__alt_data_end+0xf4027ffc>
   28144:	9080040c 	andi	r2,r18,16
   28148:	1002de26 	beq	r2,zero,28cc4 <___vfprintf_internal_r+0x1820>
   2814c:	d8c02d17 	ldw	r3,180(sp)
   28150:	002d883a 	mov	r22,zero
   28154:	1cc00017 	ldw	r19,0(r3)
   28158:	18c00104 	addi	r3,r3,4
   2815c:	d8c02d15 	stw	r3,180(sp)
   28160:	003fab06 	br	28010 <__alt_data_end+0xf4028010>
   28164:	38803fcc 	andi	r2,r7,255
   28168:	1080201c 	xori	r2,r2,128
   2816c:	10bfe004 	addi	r2,r2,-128
   28170:	1002d21e 	bne	r2,zero,28cbc <___vfprintf_internal_r+0x1818>
   28174:	00c00044 	movi	r3,1
   28178:	01c00804 	movi	r7,32
   2817c:	ac400007 	ldb	r17,0(r21)
   28180:	003d2906 	br	27628 <__alt_data_end+0xf4027628>
   28184:	94800054 	ori	r18,r18,1
   28188:	ac400007 	ldb	r17,0(r21)
   2818c:	003d2606 	br	27628 <__alt_data_end+0xf4027628>
   28190:	18c03fcc 	andi	r3,r3,255
   28194:	183e0526 	beq	r3,zero,279ac <__alt_data_end+0xf40279ac>
   28198:	d9c02785 	stb	r7,158(sp)
   2819c:	003e0306 	br	279ac <__alt_data_end+0xf40279ac>
   281a0:	94801014 	ori	r18,r18,64
   281a4:	ac400007 	ldb	r17,0(r21)
   281a8:	003d1f06 	br	27628 <__alt_data_end+0xf4027628>
   281ac:	ac400007 	ldb	r17,0(r21)
   281b0:	8a438726 	beq	r17,r9,28fd0 <___vfprintf_internal_r+0x1b2c>
   281b4:	94800414 	ori	r18,r18,16
   281b8:	003d1b06 	br	27628 <__alt_data_end+0xf4027628>
   281bc:	18c03fcc 	andi	r3,r3,255
   281c0:	1805341e 	bne	r3,zero,29694 <___vfprintf_internal_r+0x21f0>
   281c4:	9080080c 	andi	r2,r18,32
   281c8:	1002cd26 	beq	r2,zero,28d00 <___vfprintf_internal_r+0x185c>
   281cc:	d9402d17 	ldw	r5,180(sp)
   281d0:	d9002f17 	ldw	r4,188(sp)
   281d4:	28800017 	ldw	r2,0(r5)
   281d8:	2007d7fa 	srai	r3,r4,31
   281dc:	29400104 	addi	r5,r5,4
   281e0:	d9402d15 	stw	r5,180(sp)
   281e4:	11000015 	stw	r4,0(r2)
   281e8:	10c00115 	stw	r3,4(r2)
   281ec:	003ce506 	br	27584 <__alt_data_end+0xf4027584>
   281f0:	d8c02d17 	ldw	r3,180(sp)
   281f4:	d9002d17 	ldw	r4,180(sp)
   281f8:	d8002785 	stb	zero,158(sp)
   281fc:	18800017 	ldw	r2,0(r3)
   28200:	21000104 	addi	r4,r4,4
   28204:	00c00044 	movi	r3,1
   28208:	d8c02a15 	stw	r3,168(sp)
   2820c:	d8801405 	stb	r2,80(sp)
   28210:	d9002d15 	stw	r4,180(sp)
   28214:	d8c02e15 	stw	r3,184(sp)
   28218:	d8002915 	stw	zero,164(sp)
   2821c:	d8003215 	stw	zero,200(sp)
   28220:	dc001404 	addi	r16,sp,80
   28224:	0039883a 	mov	fp,zero
   28228:	003e7206 	br	27bf4 <__alt_data_end+0xf4027bf4>
   2822c:	010000f4 	movhi	r4,3
   28230:	21171f04 	addi	r4,r4,23676
   28234:	0039883a 	mov	fp,zero
   28238:	d9003915 	stw	r4,228(sp)
   2823c:	04401e04 	movi	r17,120
   28240:	003f8206 	br	2804c <__alt_data_end+0xf402804c>
   28244:	18c03fcc 	andi	r3,r3,255
   28248:	1805061e 	bne	r3,zero,29664 <___vfprintf_internal_r+0x21c0>
   2824c:	883d9126 	beq	r17,zero,27894 <__alt_data_end+0xf4027894>
   28250:	00c00044 	movi	r3,1
   28254:	d8c02a15 	stw	r3,168(sp)
   28258:	dc401405 	stb	r17,80(sp)
   2825c:	d8002785 	stb	zero,158(sp)
   28260:	003fec06 	br	28214 <__alt_data_end+0xf4028214>
   28264:	014000f4 	movhi	r5,3
   28268:	29571f04 	addi	r5,r5,23676
   2826c:	d9403915 	stw	r5,228(sp)
   28270:	d8c02d15 	stw	r3,180(sp)
   28274:	1025883a 	mov	r18,r2
   28278:	04401e04 	movi	r17,120
   2827c:	9d84b03a 	or	r2,r19,r22
   28280:	1000fc1e 	bne	r2,zero,28674 <___vfprintf_internal_r+0x11d0>
   28284:	0039883a 	mov	fp,zero
   28288:	00800084 	movi	r2,2
   2828c:	10803fcc 	andi	r2,r2,255
   28290:	00c00044 	movi	r3,1
   28294:	10c20f26 	beq	r2,r3,28ad4 <___vfprintf_internal_r+0x1630>
   28298:	00c00084 	movi	r3,2
   2829c:	10fd6326 	beq	r2,r3,2782c <__alt_data_end+0xf402782c>
   282a0:	003e2d06 	br	27b58 <__alt_data_end+0xf4027b58>
   282a4:	d8c02017 	ldw	r3,128(sp)
   282a8:	003e9306 	br	27cf8 <__alt_data_end+0xf4027cf8>
   282ac:	00801944 	movi	r2,101
   282b0:	14407e0e 	bge	r2,r17,284ac <___vfprintf_internal_r+0x1008>
   282b4:	d9003617 	ldw	r4,216(sp)
   282b8:	d9403817 	ldw	r5,224(sp)
   282bc:	000d883a 	mov	r6,zero
   282c0:	000f883a 	mov	r7,zero
   282c4:	d8c03c15 	stw	r3,240(sp)
   282c8:	da003d15 	stw	r8,244(sp)
   282cc:	0025bd80 	call	25bd8 <__eqdf2>
   282d0:	d8c03c17 	ldw	r3,240(sp)
   282d4:	da003d17 	ldw	r8,244(sp)
   282d8:	1000f71e 	bne	r2,zero,286b8 <___vfprintf_internal_r+0x1214>
   282dc:	d8801f17 	ldw	r2,124(sp)
   282e0:	010000f4 	movhi	r4,3
   282e4:	21172604 	addi	r4,r4,23704
   282e8:	18c00044 	addi	r3,r3,1
   282ec:	10800044 	addi	r2,r2,1
   282f0:	41000015 	stw	r4,0(r8)
   282f4:	01000044 	movi	r4,1
   282f8:	41000115 	stw	r4,4(r8)
   282fc:	d8c02015 	stw	r3,128(sp)
   28300:	d8801f15 	stw	r2,124(sp)
   28304:	010001c4 	movi	r4,7
   28308:	2082b816 	blt	r4,r2,28dec <___vfprintf_internal_r+0x1948>
   2830c:	42000204 	addi	r8,r8,8
   28310:	d8802617 	ldw	r2,152(sp)
   28314:	d9403317 	ldw	r5,204(sp)
   28318:	11400216 	blt	r2,r5,28324 <___vfprintf_internal_r+0xe80>
   2831c:	9080004c 	andi	r2,r18,1
   28320:	103ed526 	beq	r2,zero,27e78 <__alt_data_end+0xf4027e78>
   28324:	d8803717 	ldw	r2,220(sp)
   28328:	d9003417 	ldw	r4,208(sp)
   2832c:	d9403717 	ldw	r5,220(sp)
   28330:	1887883a 	add	r3,r3,r2
   28334:	d8801f17 	ldw	r2,124(sp)
   28338:	41000015 	stw	r4,0(r8)
   2833c:	41400115 	stw	r5,4(r8)
   28340:	10800044 	addi	r2,r2,1
   28344:	d8c02015 	stw	r3,128(sp)
   28348:	d8801f15 	stw	r2,124(sp)
   2834c:	010001c4 	movi	r4,7
   28350:	20832916 	blt	r4,r2,28ff8 <___vfprintf_internal_r+0x1b54>
   28354:	42000204 	addi	r8,r8,8
   28358:	d8803317 	ldw	r2,204(sp)
   2835c:	143fffc4 	addi	r16,r2,-1
   28360:	043ec50e 	bge	zero,r16,27e78 <__alt_data_end+0xf4027e78>
   28364:	04400404 	movi	r17,16
   28368:	d8801f17 	ldw	r2,124(sp)
   2836c:	8c00880e 	bge	r17,r16,28590 <___vfprintf_internal_r+0x10ec>
   28370:	014000f4 	movhi	r5,3
   28374:	29572684 	addi	r5,r5,23706
   28378:	d9402b15 	stw	r5,172(sp)
   2837c:	058001c4 	movi	r22,7
   28380:	dcc02c17 	ldw	r19,176(sp)
   28384:	00000306 	br	28394 <___vfprintf_internal_r+0xef0>
   28388:	42000204 	addi	r8,r8,8
   2838c:	843ffc04 	addi	r16,r16,-16
   28390:	8c00820e 	bge	r17,r16,2859c <___vfprintf_internal_r+0x10f8>
   28394:	18c00404 	addi	r3,r3,16
   28398:	10800044 	addi	r2,r2,1
   2839c:	45000015 	stw	r20,0(r8)
   283a0:	44400115 	stw	r17,4(r8)
   283a4:	d8c02015 	stw	r3,128(sp)
   283a8:	d8801f15 	stw	r2,124(sp)
   283ac:	b0bff60e 	bge	r22,r2,28388 <__alt_data_end+0xf4028388>
   283b0:	d9801e04 	addi	r6,sp,120
   283b4:	b80b883a 	mov	r5,r23
   283b8:	9809883a 	mov	r4,r19
   283bc:	002ea2c0 	call	2ea2c <__sprint_r>
   283c0:	103d3a1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   283c4:	d8c02017 	ldw	r3,128(sp)
   283c8:	d8801f17 	ldw	r2,124(sp)
   283cc:	da000404 	addi	r8,sp,16
   283d0:	003fee06 	br	2838c <__alt_data_end+0xf402838c>
   283d4:	d9403117 	ldw	r5,196(sp)
   283d8:	d8802a17 	ldw	r2,168(sp)
   283dc:	28adc83a 	sub	r22,r5,r2
   283e0:	05be630e 	bge	zero,r22,27d70 <__alt_data_end+0xf4027d70>
   283e4:	07000404 	movi	fp,16
   283e8:	d8801f17 	ldw	r2,124(sp)
   283ec:	e5838f0e 	bge	fp,r22,2922c <___vfprintf_internal_r+0x1d88>
   283f0:	014000f4 	movhi	r5,3
   283f4:	29572684 	addi	r5,r5,23706
   283f8:	dc403015 	stw	r17,192(sp)
   283fc:	d9402b15 	stw	r5,172(sp)
   28400:	b023883a 	mov	r17,r22
   28404:	04c001c4 	movi	r19,7
   28408:	a82d883a 	mov	r22,r21
   2840c:	902b883a 	mov	r21,r18
   28410:	8025883a 	mov	r18,r16
   28414:	dc002c17 	ldw	r16,176(sp)
   28418:	00000306 	br	28428 <___vfprintf_internal_r+0xf84>
   2841c:	8c7ffc04 	addi	r17,r17,-16
   28420:	42000204 	addi	r8,r8,8
   28424:	e440110e 	bge	fp,r17,2846c <___vfprintf_internal_r+0xfc8>
   28428:	18c00404 	addi	r3,r3,16
   2842c:	10800044 	addi	r2,r2,1
   28430:	45000015 	stw	r20,0(r8)
   28434:	47000115 	stw	fp,4(r8)
   28438:	d8c02015 	stw	r3,128(sp)
   2843c:	d8801f15 	stw	r2,124(sp)
   28440:	98bff60e 	bge	r19,r2,2841c <__alt_data_end+0xf402841c>
   28444:	d9801e04 	addi	r6,sp,120
   28448:	b80b883a 	mov	r5,r23
   2844c:	8009883a 	mov	r4,r16
   28450:	002ea2c0 	call	2ea2c <__sprint_r>
   28454:	103d151e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28458:	8c7ffc04 	addi	r17,r17,-16
   2845c:	d8c02017 	ldw	r3,128(sp)
   28460:	d8801f17 	ldw	r2,124(sp)
   28464:	da000404 	addi	r8,sp,16
   28468:	e47fef16 	blt	fp,r17,28428 <__alt_data_end+0xf4028428>
   2846c:	9021883a 	mov	r16,r18
   28470:	a825883a 	mov	r18,r21
   28474:	b02b883a 	mov	r21,r22
   28478:	882d883a 	mov	r22,r17
   2847c:	dc403017 	ldw	r17,192(sp)
   28480:	d9002b17 	ldw	r4,172(sp)
   28484:	1d87883a 	add	r3,r3,r22
   28488:	10800044 	addi	r2,r2,1
   2848c:	41000015 	stw	r4,0(r8)
   28490:	45800115 	stw	r22,4(r8)
   28494:	d8c02015 	stw	r3,128(sp)
   28498:	d8801f15 	stw	r2,124(sp)
   2849c:	010001c4 	movi	r4,7
   284a0:	20818e16 	blt	r4,r2,28adc <___vfprintf_internal_r+0x1638>
   284a4:	42000204 	addi	r8,r8,8
   284a8:	003e3106 	br	27d70 <__alt_data_end+0xf4027d70>
   284ac:	d9403317 	ldw	r5,204(sp)
   284b0:	00800044 	movi	r2,1
   284b4:	18c00044 	addi	r3,r3,1
   284b8:	1141530e 	bge	r2,r5,28a08 <___vfprintf_internal_r+0x1564>
   284bc:	dc401f17 	ldw	r17,124(sp)
   284c0:	00800044 	movi	r2,1
   284c4:	40800115 	stw	r2,4(r8)
   284c8:	8c400044 	addi	r17,r17,1
   284cc:	44000015 	stw	r16,0(r8)
   284d0:	d8c02015 	stw	r3,128(sp)
   284d4:	dc401f15 	stw	r17,124(sp)
   284d8:	008001c4 	movi	r2,7
   284dc:	14416b16 	blt	r2,r17,28a8c <___vfprintf_internal_r+0x15e8>
   284e0:	42000204 	addi	r8,r8,8
   284e4:	d8803717 	ldw	r2,220(sp)
   284e8:	d9003417 	ldw	r4,208(sp)
   284ec:	8c400044 	addi	r17,r17,1
   284f0:	10c7883a 	add	r3,r2,r3
   284f4:	40800115 	stw	r2,4(r8)
   284f8:	41000015 	stw	r4,0(r8)
   284fc:	d8c02015 	stw	r3,128(sp)
   28500:	dc401f15 	stw	r17,124(sp)
   28504:	008001c4 	movi	r2,7
   28508:	14416916 	blt	r2,r17,28ab0 <___vfprintf_internal_r+0x160c>
   2850c:	45800204 	addi	r22,r8,8
   28510:	d9003617 	ldw	r4,216(sp)
   28514:	d9403817 	ldw	r5,224(sp)
   28518:	000d883a 	mov	r6,zero
   2851c:	000f883a 	mov	r7,zero
   28520:	d8c03c15 	stw	r3,240(sp)
   28524:	0025bd80 	call	25bd8 <__eqdf2>
   28528:	d8c03c17 	ldw	r3,240(sp)
   2852c:	1000bc26 	beq	r2,zero,28820 <___vfprintf_internal_r+0x137c>
   28530:	d9403317 	ldw	r5,204(sp)
   28534:	84000044 	addi	r16,r16,1
   28538:	8c400044 	addi	r17,r17,1
   2853c:	28bfffc4 	addi	r2,r5,-1
   28540:	1887883a 	add	r3,r3,r2
   28544:	b0800115 	stw	r2,4(r22)
   28548:	b4000015 	stw	r16,0(r22)
   2854c:	d8c02015 	stw	r3,128(sp)
   28550:	dc401f15 	stw	r17,124(sp)
   28554:	008001c4 	movi	r2,7
   28558:	14414316 	blt	r2,r17,28a68 <___vfprintf_internal_r+0x15c4>
   2855c:	b5800204 	addi	r22,r22,8
   28560:	d9003a17 	ldw	r4,232(sp)
   28564:	df0022c4 	addi	fp,sp,139
   28568:	8c400044 	addi	r17,r17,1
   2856c:	20c7883a 	add	r3,r4,r3
   28570:	b7000015 	stw	fp,0(r22)
   28574:	b1000115 	stw	r4,4(r22)
   28578:	d8c02015 	stw	r3,128(sp)
   2857c:	dc401f15 	stw	r17,124(sp)
   28580:	008001c4 	movi	r2,7
   28584:	14400e16 	blt	r2,r17,285c0 <___vfprintf_internal_r+0x111c>
   28588:	b2000204 	addi	r8,r22,8
   2858c:	003e3a06 	br	27e78 <__alt_data_end+0xf4027e78>
   28590:	010000f4 	movhi	r4,3
   28594:	21172684 	addi	r4,r4,23706
   28598:	d9002b15 	stw	r4,172(sp)
   2859c:	d9002b17 	ldw	r4,172(sp)
   285a0:	1c07883a 	add	r3,r3,r16
   285a4:	44000115 	stw	r16,4(r8)
   285a8:	41000015 	stw	r4,0(r8)
   285ac:	10800044 	addi	r2,r2,1
   285b0:	d8c02015 	stw	r3,128(sp)
   285b4:	d8801f15 	stw	r2,124(sp)
   285b8:	010001c4 	movi	r4,7
   285bc:	20be2d0e 	bge	r4,r2,27e74 <__alt_data_end+0xf4027e74>
   285c0:	d9002c17 	ldw	r4,176(sp)
   285c4:	d9801e04 	addi	r6,sp,120
   285c8:	b80b883a 	mov	r5,r23
   285cc:	002ea2c0 	call	2ea2c <__sprint_r>
   285d0:	103cb61e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   285d4:	d8c02017 	ldw	r3,128(sp)
   285d8:	da000404 	addi	r8,sp,16
   285dc:	003e2606 	br	27e78 <__alt_data_end+0xf4027e78>
   285e0:	d9002c17 	ldw	r4,176(sp)
   285e4:	d9801e04 	addi	r6,sp,120
   285e8:	b80b883a 	mov	r5,r23
   285ec:	002ea2c0 	call	2ea2c <__sprint_r>
   285f0:	103e5d26 	beq	r2,zero,27f68 <__alt_data_end+0xf4027f68>
   285f4:	003cad06 	br	278ac <__alt_data_end+0xf40278ac>
   285f8:	d9002c17 	ldw	r4,176(sp)
   285fc:	d9801e04 	addi	r6,sp,120
   28600:	b80b883a 	mov	r5,r23
   28604:	002ea2c0 	call	2ea2c <__sprint_r>
   28608:	103ca81e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   2860c:	d8c02017 	ldw	r3,128(sp)
   28610:	da000404 	addi	r8,sp,16
   28614:	003e0b06 	br	27e44 <__alt_data_end+0xf4027e44>
   28618:	d9002c17 	ldw	r4,176(sp)
   2861c:	d9801e04 	addi	r6,sp,120
   28620:	b80b883a 	mov	r5,r23
   28624:	002ea2c0 	call	2ea2c <__sprint_r>
   28628:	103ca01e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   2862c:	d8c02017 	ldw	r3,128(sp)
   28630:	da000404 	addi	r8,sp,16
   28634:	003dbd06 	br	27d2c <__alt_data_end+0xf4027d2c>
   28638:	d9002c17 	ldw	r4,176(sp)
   2863c:	d9801e04 	addi	r6,sp,120
   28640:	b80b883a 	mov	r5,r23
   28644:	002ea2c0 	call	2ea2c <__sprint_r>
   28648:	103c981e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   2864c:	d8c02017 	ldw	r3,128(sp)
   28650:	da000404 	addi	r8,sp,16
   28654:	003dc306 	br	27d64 <__alt_data_end+0xf4027d64>
   28658:	d8802917 	ldw	r2,164(sp)
   2865c:	d8002785 	stb	zero,158(sp)
   28660:	103f0616 	blt	r2,zero,2827c <__alt_data_end+0xf402827c>
   28664:	00ffdfc4 	movi	r3,-129
   28668:	9d84b03a 	or	r2,r19,r22
   2866c:	90e4703a 	and	r18,r18,r3
   28670:	103c6b26 	beq	r2,zero,27820 <__alt_data_end+0xf4027820>
   28674:	0039883a 	mov	fp,zero
   28678:	003e7406 	br	2804c <__alt_data_end+0xf402804c>
   2867c:	9080040c 	andi	r2,r18,16
   28680:	1001b326 	beq	r2,zero,28d50 <___vfprintf_internal_r+0x18ac>
   28684:	d9002d17 	ldw	r4,180(sp)
   28688:	d9402917 	ldw	r5,164(sp)
   2868c:	d8002785 	stb	zero,158(sp)
   28690:	20800104 	addi	r2,r4,4
   28694:	24c00017 	ldw	r19,0(r4)
   28698:	002d883a 	mov	r22,zero
   2869c:	2801b516 	blt	r5,zero,28d74 <___vfprintf_internal_r+0x18d0>
   286a0:	00ffdfc4 	movi	r3,-129
   286a4:	d8802d15 	stw	r2,180(sp)
   286a8:	90e4703a 	and	r18,r18,r3
   286ac:	983d2726 	beq	r19,zero,27b4c <__alt_data_end+0xf4027b4c>
   286b0:	0039883a 	mov	fp,zero
   286b4:	003d2a06 	br	27b60 <__alt_data_end+0xf4027b60>
   286b8:	dc402617 	ldw	r17,152(sp)
   286bc:	0441d30e 	bge	zero,r17,28e0c <___vfprintf_internal_r+0x1968>
   286c0:	dc403217 	ldw	r17,200(sp)
   286c4:	d8803317 	ldw	r2,204(sp)
   286c8:	1440010e 	bge	r2,r17,286d0 <___vfprintf_internal_r+0x122c>
   286cc:	1023883a 	mov	r17,r2
   286d0:	04400a0e 	bge	zero,r17,286fc <___vfprintf_internal_r+0x1258>
   286d4:	d8801f17 	ldw	r2,124(sp)
   286d8:	1c47883a 	add	r3,r3,r17
   286dc:	44000015 	stw	r16,0(r8)
   286e0:	10800044 	addi	r2,r2,1
   286e4:	44400115 	stw	r17,4(r8)
   286e8:	d8c02015 	stw	r3,128(sp)
   286ec:	d8801f15 	stw	r2,124(sp)
   286f0:	010001c4 	movi	r4,7
   286f4:	20826516 	blt	r4,r2,2908c <___vfprintf_internal_r+0x1be8>
   286f8:	42000204 	addi	r8,r8,8
   286fc:	88026116 	blt	r17,zero,29084 <___vfprintf_internal_r+0x1be0>
   28700:	d9003217 	ldw	r4,200(sp)
   28704:	2463c83a 	sub	r17,r4,r17
   28708:	04407b0e 	bge	zero,r17,288f8 <___vfprintf_internal_r+0x1454>
   2870c:	05800404 	movi	r22,16
   28710:	d8801f17 	ldw	r2,124(sp)
   28714:	b4419d0e 	bge	r22,r17,28d8c <___vfprintf_internal_r+0x18e8>
   28718:	010000f4 	movhi	r4,3
   2871c:	21172684 	addi	r4,r4,23706
   28720:	d9002b15 	stw	r4,172(sp)
   28724:	070001c4 	movi	fp,7
   28728:	dcc02c17 	ldw	r19,176(sp)
   2872c:	00000306 	br	2873c <___vfprintf_internal_r+0x1298>
   28730:	42000204 	addi	r8,r8,8
   28734:	8c7ffc04 	addi	r17,r17,-16
   28738:	b441970e 	bge	r22,r17,28d98 <___vfprintf_internal_r+0x18f4>
   2873c:	18c00404 	addi	r3,r3,16
   28740:	10800044 	addi	r2,r2,1
   28744:	45000015 	stw	r20,0(r8)
   28748:	45800115 	stw	r22,4(r8)
   2874c:	d8c02015 	stw	r3,128(sp)
   28750:	d8801f15 	stw	r2,124(sp)
   28754:	e0bff60e 	bge	fp,r2,28730 <__alt_data_end+0xf4028730>
   28758:	d9801e04 	addi	r6,sp,120
   2875c:	b80b883a 	mov	r5,r23
   28760:	9809883a 	mov	r4,r19
   28764:	002ea2c0 	call	2ea2c <__sprint_r>
   28768:	103c501e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   2876c:	d8c02017 	ldw	r3,128(sp)
   28770:	d8801f17 	ldw	r2,124(sp)
   28774:	da000404 	addi	r8,sp,16
   28778:	003fee06 	br	28734 <__alt_data_end+0xf4028734>
   2877c:	d9002c17 	ldw	r4,176(sp)
   28780:	d9801e04 	addi	r6,sp,120
   28784:	b80b883a 	mov	r5,r23
   28788:	002ea2c0 	call	2ea2c <__sprint_r>
   2878c:	103c471e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28790:	d8c02017 	ldw	r3,128(sp)
   28794:	df002787 	ldb	fp,158(sp)
   28798:	da000404 	addi	r8,sp,16
   2879c:	003d5606 	br	27cf8 <__alt_data_end+0xf4027cf8>
   287a0:	9080040c 	andi	r2,r18,16
   287a4:	10016126 	beq	r2,zero,28d2c <___vfprintf_internal_r+0x1888>
   287a8:	d8802d17 	ldw	r2,180(sp)
   287ac:	14c00017 	ldw	r19,0(r2)
   287b0:	10800104 	addi	r2,r2,4
   287b4:	d8802d15 	stw	r2,180(sp)
   287b8:	982dd7fa 	srai	r22,r19,31
   287bc:	b005883a 	mov	r2,r22
   287c0:	003c8206 	br	279cc <__alt_data_end+0xf40279cc>
   287c4:	9080040c 	andi	r2,r18,16
   287c8:	10003526 	beq	r2,zero,288a0 <___vfprintf_internal_r+0x13fc>
   287cc:	d9402d17 	ldw	r5,180(sp)
   287d0:	d8c02917 	ldw	r3,164(sp)
   287d4:	d8002785 	stb	zero,158(sp)
   287d8:	28800104 	addi	r2,r5,4
   287dc:	2cc00017 	ldw	r19,0(r5)
   287e0:	002d883a 	mov	r22,zero
   287e4:	18003716 	blt	r3,zero,288c4 <___vfprintf_internal_r+0x1420>
   287e8:	00ffdfc4 	movi	r3,-129
   287ec:	d8802d15 	stw	r2,180(sp)
   287f0:	90e4703a 	and	r18,r18,r3
   287f4:	0039883a 	mov	fp,zero
   287f8:	983df326 	beq	r19,zero,27fc8 <__alt_data_end+0xf4027fc8>
   287fc:	00800244 	movi	r2,9
   28800:	14fc7b36 	bltu	r2,r19,279f0 <__alt_data_end+0xf40279f0>
   28804:	d8c02817 	ldw	r3,160(sp)
   28808:	dc001dc4 	addi	r16,sp,119
   2880c:	9cc00c04 	addi	r19,r19,48
   28810:	1c07c83a 	sub	r3,r3,r16
   28814:	dcc01dc5 	stb	r19,119(sp)
   28818:	d8c02e15 	stw	r3,184(sp)
   2881c:	003ce806 	br	27bc0 <__alt_data_end+0xf4027bc0>
   28820:	d8803317 	ldw	r2,204(sp)
   28824:	143fffc4 	addi	r16,r2,-1
   28828:	043f4d0e 	bge	zero,r16,28560 <__alt_data_end+0xf4028560>
   2882c:	07000404 	movi	fp,16
   28830:	e400810e 	bge	fp,r16,28a38 <___vfprintf_internal_r+0x1594>
   28834:	014000f4 	movhi	r5,3
   28838:	29572684 	addi	r5,r5,23706
   2883c:	d9402b15 	stw	r5,172(sp)
   28840:	01c001c4 	movi	r7,7
   28844:	dcc02c17 	ldw	r19,176(sp)
   28848:	00000306 	br	28858 <___vfprintf_internal_r+0x13b4>
   2884c:	b5800204 	addi	r22,r22,8
   28850:	843ffc04 	addi	r16,r16,-16
   28854:	e4007b0e 	bge	fp,r16,28a44 <___vfprintf_internal_r+0x15a0>
   28858:	18c00404 	addi	r3,r3,16
   2885c:	8c400044 	addi	r17,r17,1
   28860:	b5000015 	stw	r20,0(r22)
   28864:	b7000115 	stw	fp,4(r22)
   28868:	d8c02015 	stw	r3,128(sp)
   2886c:	dc401f15 	stw	r17,124(sp)
   28870:	3c7ff60e 	bge	r7,r17,2884c <__alt_data_end+0xf402884c>
   28874:	d9801e04 	addi	r6,sp,120
   28878:	b80b883a 	mov	r5,r23
   2887c:	9809883a 	mov	r4,r19
   28880:	d9c03c15 	stw	r7,240(sp)
   28884:	002ea2c0 	call	2ea2c <__sprint_r>
   28888:	d9c03c17 	ldw	r7,240(sp)
   2888c:	103c071e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28890:	d8c02017 	ldw	r3,128(sp)
   28894:	dc401f17 	ldw	r17,124(sp)
   28898:	dd800404 	addi	r22,sp,16
   2889c:	003fec06 	br	28850 <__alt_data_end+0xf4028850>
   288a0:	9080100c 	andi	r2,r18,64
   288a4:	d8002785 	stb	zero,158(sp)
   288a8:	10010e26 	beq	r2,zero,28ce4 <___vfprintf_internal_r+0x1840>
   288ac:	d9002d17 	ldw	r4,180(sp)
   288b0:	d9402917 	ldw	r5,164(sp)
   288b4:	002d883a 	mov	r22,zero
   288b8:	20800104 	addi	r2,r4,4
   288bc:	24c0000b 	ldhu	r19,0(r4)
   288c0:	283fc90e 	bge	r5,zero,287e8 <__alt_data_end+0xf40287e8>
   288c4:	d8802d15 	stw	r2,180(sp)
   288c8:	0039883a 	mov	fp,zero
   288cc:	9d84b03a 	or	r2,r19,r22
   288d0:	103c461e 	bne	r2,zero,279ec <__alt_data_end+0xf40279ec>
   288d4:	00800044 	movi	r2,1
   288d8:	003e6c06 	br	2828c <__alt_data_end+0xf402828c>
   288dc:	d9002c17 	ldw	r4,176(sp)
   288e0:	d9801e04 	addi	r6,sp,120
   288e4:	b80b883a 	mov	r5,r23
   288e8:	002ea2c0 	call	2ea2c <__sprint_r>
   288ec:	103bef1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   288f0:	d8c02017 	ldw	r3,128(sp)
   288f4:	da000404 	addi	r8,sp,16
   288f8:	d9003217 	ldw	r4,200(sp)
   288fc:	d8802617 	ldw	r2,152(sp)
   28900:	d9403317 	ldw	r5,204(sp)
   28904:	8123883a 	add	r17,r16,r4
   28908:	11400216 	blt	r2,r5,28914 <___vfprintf_internal_r+0x1470>
   2890c:	9100004c 	andi	r4,r18,1
   28910:	20000d26 	beq	r4,zero,28948 <___vfprintf_internal_r+0x14a4>
   28914:	d9003717 	ldw	r4,220(sp)
   28918:	d9403417 	ldw	r5,208(sp)
   2891c:	1907883a 	add	r3,r3,r4
   28920:	d9001f17 	ldw	r4,124(sp)
   28924:	41400015 	stw	r5,0(r8)
   28928:	d9403717 	ldw	r5,220(sp)
   2892c:	21000044 	addi	r4,r4,1
   28930:	d8c02015 	stw	r3,128(sp)
   28934:	41400115 	stw	r5,4(r8)
   28938:	d9001f15 	stw	r4,124(sp)
   2893c:	014001c4 	movi	r5,7
   28940:	2901e816 	blt	r5,r4,290e4 <___vfprintf_internal_r+0x1c40>
   28944:	42000204 	addi	r8,r8,8
   28948:	d9003317 	ldw	r4,204(sp)
   2894c:	8121883a 	add	r16,r16,r4
   28950:	2085c83a 	sub	r2,r4,r2
   28954:	8461c83a 	sub	r16,r16,r17
   28958:	1400010e 	bge	r2,r16,28960 <___vfprintf_internal_r+0x14bc>
   2895c:	1021883a 	mov	r16,r2
   28960:	04000a0e 	bge	zero,r16,2898c <___vfprintf_internal_r+0x14e8>
   28964:	d9001f17 	ldw	r4,124(sp)
   28968:	1c07883a 	add	r3,r3,r16
   2896c:	44400015 	stw	r17,0(r8)
   28970:	21000044 	addi	r4,r4,1
   28974:	44000115 	stw	r16,4(r8)
   28978:	d8c02015 	stw	r3,128(sp)
   2897c:	d9001f15 	stw	r4,124(sp)
   28980:	014001c4 	movi	r5,7
   28984:	2901fb16 	blt	r5,r4,29174 <___vfprintf_internal_r+0x1cd0>
   28988:	42000204 	addi	r8,r8,8
   2898c:	8001f716 	blt	r16,zero,2916c <___vfprintf_internal_r+0x1cc8>
   28990:	1421c83a 	sub	r16,r2,r16
   28994:	043d380e 	bge	zero,r16,27e78 <__alt_data_end+0xf4027e78>
   28998:	04400404 	movi	r17,16
   2899c:	d8801f17 	ldw	r2,124(sp)
   289a0:	8c3efb0e 	bge	r17,r16,28590 <__alt_data_end+0xf4028590>
   289a4:	014000f4 	movhi	r5,3
   289a8:	29572684 	addi	r5,r5,23706
   289ac:	d9402b15 	stw	r5,172(sp)
   289b0:	058001c4 	movi	r22,7
   289b4:	dcc02c17 	ldw	r19,176(sp)
   289b8:	00000306 	br	289c8 <___vfprintf_internal_r+0x1524>
   289bc:	42000204 	addi	r8,r8,8
   289c0:	843ffc04 	addi	r16,r16,-16
   289c4:	8c3ef50e 	bge	r17,r16,2859c <__alt_data_end+0xf402859c>
   289c8:	18c00404 	addi	r3,r3,16
   289cc:	10800044 	addi	r2,r2,1
   289d0:	45000015 	stw	r20,0(r8)
   289d4:	44400115 	stw	r17,4(r8)
   289d8:	d8c02015 	stw	r3,128(sp)
   289dc:	d8801f15 	stw	r2,124(sp)
   289e0:	b0bff60e 	bge	r22,r2,289bc <__alt_data_end+0xf40289bc>
   289e4:	d9801e04 	addi	r6,sp,120
   289e8:	b80b883a 	mov	r5,r23
   289ec:	9809883a 	mov	r4,r19
   289f0:	002ea2c0 	call	2ea2c <__sprint_r>
   289f4:	103bad1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   289f8:	d8c02017 	ldw	r3,128(sp)
   289fc:	d8801f17 	ldw	r2,124(sp)
   28a00:	da000404 	addi	r8,sp,16
   28a04:	003fee06 	br	289c0 <__alt_data_end+0xf40289c0>
   28a08:	9088703a 	and	r4,r18,r2
   28a0c:	203eab1e 	bne	r4,zero,284bc <__alt_data_end+0xf40284bc>
   28a10:	dc401f17 	ldw	r17,124(sp)
   28a14:	40800115 	stw	r2,4(r8)
   28a18:	44000015 	stw	r16,0(r8)
   28a1c:	8c400044 	addi	r17,r17,1
   28a20:	d8c02015 	stw	r3,128(sp)
   28a24:	dc401f15 	stw	r17,124(sp)
   28a28:	008001c4 	movi	r2,7
   28a2c:	14400e16 	blt	r2,r17,28a68 <___vfprintf_internal_r+0x15c4>
   28a30:	45800204 	addi	r22,r8,8
   28a34:	003eca06 	br	28560 <__alt_data_end+0xf4028560>
   28a38:	010000f4 	movhi	r4,3
   28a3c:	21172684 	addi	r4,r4,23706
   28a40:	d9002b15 	stw	r4,172(sp)
   28a44:	d8802b17 	ldw	r2,172(sp)
   28a48:	1c07883a 	add	r3,r3,r16
   28a4c:	8c400044 	addi	r17,r17,1
   28a50:	b0800015 	stw	r2,0(r22)
   28a54:	b4000115 	stw	r16,4(r22)
   28a58:	d8c02015 	stw	r3,128(sp)
   28a5c:	dc401f15 	stw	r17,124(sp)
   28a60:	008001c4 	movi	r2,7
   28a64:	147ebd0e 	bge	r2,r17,2855c <__alt_data_end+0xf402855c>
   28a68:	d9002c17 	ldw	r4,176(sp)
   28a6c:	d9801e04 	addi	r6,sp,120
   28a70:	b80b883a 	mov	r5,r23
   28a74:	002ea2c0 	call	2ea2c <__sprint_r>
   28a78:	103b8c1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28a7c:	d8c02017 	ldw	r3,128(sp)
   28a80:	dc401f17 	ldw	r17,124(sp)
   28a84:	dd800404 	addi	r22,sp,16
   28a88:	003eb506 	br	28560 <__alt_data_end+0xf4028560>
   28a8c:	d9002c17 	ldw	r4,176(sp)
   28a90:	d9801e04 	addi	r6,sp,120
   28a94:	b80b883a 	mov	r5,r23
   28a98:	002ea2c0 	call	2ea2c <__sprint_r>
   28a9c:	103b831e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28aa0:	d8c02017 	ldw	r3,128(sp)
   28aa4:	dc401f17 	ldw	r17,124(sp)
   28aa8:	da000404 	addi	r8,sp,16
   28aac:	003e8d06 	br	284e4 <__alt_data_end+0xf40284e4>
   28ab0:	d9002c17 	ldw	r4,176(sp)
   28ab4:	d9801e04 	addi	r6,sp,120
   28ab8:	b80b883a 	mov	r5,r23
   28abc:	002ea2c0 	call	2ea2c <__sprint_r>
   28ac0:	103b7a1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28ac4:	d8c02017 	ldw	r3,128(sp)
   28ac8:	dc401f17 	ldw	r17,124(sp)
   28acc:	dd800404 	addi	r22,sp,16
   28ad0:	003e8f06 	br	28510 <__alt_data_end+0xf4028510>
   28ad4:	0027883a 	mov	r19,zero
   28ad8:	003f4a06 	br	28804 <__alt_data_end+0xf4028804>
   28adc:	d9002c17 	ldw	r4,176(sp)
   28ae0:	d9801e04 	addi	r6,sp,120
   28ae4:	b80b883a 	mov	r5,r23
   28ae8:	002ea2c0 	call	2ea2c <__sprint_r>
   28aec:	103b6f1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28af0:	d8c02017 	ldw	r3,128(sp)
   28af4:	da000404 	addi	r8,sp,16
   28af8:	003c9d06 	br	27d70 <__alt_data_end+0xf4027d70>
   28afc:	04e7c83a 	sub	r19,zero,r19
   28b00:	9804c03a 	cmpne	r2,r19,zero
   28b04:	05adc83a 	sub	r22,zero,r22
   28b08:	b0adc83a 	sub	r22,r22,r2
   28b0c:	d8802917 	ldw	r2,164(sp)
   28b10:	07000b44 	movi	fp,45
   28b14:	df002785 	stb	fp,158(sp)
   28b18:	10017b16 	blt	r2,zero,29108 <___vfprintf_internal_r+0x1c64>
   28b1c:	00bfdfc4 	movi	r2,-129
   28b20:	90a4703a 	and	r18,r18,r2
   28b24:	003bb106 	br	279ec <__alt_data_end+0xf40279ec>
   28b28:	d9003617 	ldw	r4,216(sp)
   28b2c:	d9403817 	ldw	r5,224(sp)
   28b30:	da003d15 	stw	r8,244(sp)
   28b34:	002315c0 	call	2315c <__fpclassifyd>
   28b38:	da003d17 	ldw	r8,244(sp)
   28b3c:	1000f026 	beq	r2,zero,28f00 <___vfprintf_internal_r+0x1a5c>
   28b40:	d9002917 	ldw	r4,164(sp)
   28b44:	05bff7c4 	movi	r22,-33
   28b48:	00bfffc4 	movi	r2,-1
   28b4c:	8dac703a 	and	r22,r17,r22
   28b50:	20820026 	beq	r4,r2,29354 <___vfprintf_internal_r+0x1eb0>
   28b54:	008011c4 	movi	r2,71
   28b58:	b081f726 	beq	r22,r2,29338 <___vfprintf_internal_r+0x1e94>
   28b5c:	d9003817 	ldw	r4,224(sp)
   28b60:	90c04014 	ori	r3,r18,256
   28b64:	d8c02b15 	stw	r3,172(sp)
   28b68:	20021516 	blt	r4,zero,293c0 <___vfprintf_internal_r+0x1f1c>
   28b6c:	dcc03817 	ldw	r19,224(sp)
   28b70:	d8002a05 	stb	zero,168(sp)
   28b74:	00801984 	movi	r2,102
   28b78:	8881f926 	beq	r17,r2,29360 <___vfprintf_internal_r+0x1ebc>
   28b7c:	00801184 	movi	r2,70
   28b80:	88821c26 	beq	r17,r2,293f4 <___vfprintf_internal_r+0x1f50>
   28b84:	00801144 	movi	r2,69
   28b88:	b081ef26 	beq	r22,r2,29348 <___vfprintf_internal_r+0x1ea4>
   28b8c:	d8c02917 	ldw	r3,164(sp)
   28b90:	d8802104 	addi	r2,sp,132
   28b94:	d8800315 	stw	r2,12(sp)
   28b98:	d9403617 	ldw	r5,216(sp)
   28b9c:	d8802504 	addi	r2,sp,148
   28ba0:	d9002c17 	ldw	r4,176(sp)
   28ba4:	d8800215 	stw	r2,8(sp)
   28ba8:	d8802604 	addi	r2,sp,152
   28bac:	d8c00015 	stw	r3,0(sp)
   28bb0:	d8800115 	stw	r2,4(sp)
   28bb4:	01c00084 	movi	r7,2
   28bb8:	980d883a 	mov	r6,r19
   28bbc:	d8c03c15 	stw	r3,240(sp)
   28bc0:	da003d15 	stw	r8,244(sp)
   28bc4:	0029ac80 	call	29ac8 <_dtoa_r>
   28bc8:	1021883a 	mov	r16,r2
   28bcc:	008019c4 	movi	r2,103
   28bd0:	d8c03c17 	ldw	r3,240(sp)
   28bd4:	da003d17 	ldw	r8,244(sp)
   28bd8:	88817126 	beq	r17,r2,291a0 <___vfprintf_internal_r+0x1cfc>
   28bdc:	008011c4 	movi	r2,71
   28be0:	88829226 	beq	r17,r2,2962c <___vfprintf_internal_r+0x2188>
   28be4:	80f9883a 	add	fp,r16,r3
   28be8:	d9003617 	ldw	r4,216(sp)
   28bec:	000d883a 	mov	r6,zero
   28bf0:	000f883a 	mov	r7,zero
   28bf4:	980b883a 	mov	r5,r19
   28bf8:	da003d15 	stw	r8,244(sp)
   28bfc:	0025bd80 	call	25bd8 <__eqdf2>
   28c00:	da003d17 	ldw	r8,244(sp)
   28c04:	10018d26 	beq	r2,zero,2923c <___vfprintf_internal_r+0x1d98>
   28c08:	d8802117 	ldw	r2,132(sp)
   28c0c:	1700062e 	bgeu	r2,fp,28c28 <___vfprintf_internal_r+0x1784>
   28c10:	01000c04 	movi	r4,48
   28c14:	10c00044 	addi	r3,r2,1
   28c18:	d8c02115 	stw	r3,132(sp)
   28c1c:	11000005 	stb	r4,0(r2)
   28c20:	d8802117 	ldw	r2,132(sp)
   28c24:	173ffb36 	bltu	r2,fp,28c14 <__alt_data_end+0xf4028c14>
   28c28:	1405c83a 	sub	r2,r2,r16
   28c2c:	d8803315 	stw	r2,204(sp)
   28c30:	008011c4 	movi	r2,71
   28c34:	b0817626 	beq	r22,r2,29210 <___vfprintf_internal_r+0x1d6c>
   28c38:	00801944 	movi	r2,101
   28c3c:	1442810e 	bge	r2,r17,29644 <___vfprintf_internal_r+0x21a0>
   28c40:	d8c02617 	ldw	r3,152(sp)
   28c44:	00801984 	movi	r2,102
   28c48:	d8c03215 	stw	r3,200(sp)
   28c4c:	8881fe26 	beq	r17,r2,29448 <___vfprintf_internal_r+0x1fa4>
   28c50:	d8c03217 	ldw	r3,200(sp)
   28c54:	d9003317 	ldw	r4,204(sp)
   28c58:	1901dd16 	blt	r3,r4,293d0 <___vfprintf_internal_r+0x1f2c>
   28c5c:	9480004c 	andi	r18,r18,1
   28c60:	90022b1e 	bne	r18,zero,29510 <___vfprintf_internal_r+0x206c>
   28c64:	1805883a 	mov	r2,r3
   28c68:	18028016 	blt	r3,zero,2966c <___vfprintf_internal_r+0x21c8>
   28c6c:	d8c03217 	ldw	r3,200(sp)
   28c70:	044019c4 	movi	r17,103
   28c74:	d8c02e15 	stw	r3,184(sp)
   28c78:	df002a07 	ldb	fp,168(sp)
   28c7c:	e001531e 	bne	fp,zero,291cc <___vfprintf_internal_r+0x1d28>
   28c80:	df002783 	ldbu	fp,158(sp)
   28c84:	d8802a15 	stw	r2,168(sp)
   28c88:	dc802b17 	ldw	r18,172(sp)
   28c8c:	d8002915 	stw	zero,164(sp)
   28c90:	003bd106 	br	27bd8 <__alt_data_end+0xf4027bd8>
   28c94:	d8802d17 	ldw	r2,180(sp)
   28c98:	d8c02d17 	ldw	r3,180(sp)
   28c9c:	d9002d17 	ldw	r4,180(sp)
   28ca0:	10800017 	ldw	r2,0(r2)
   28ca4:	18c00117 	ldw	r3,4(r3)
   28ca8:	21000204 	addi	r4,r4,8
   28cac:	d8803615 	stw	r2,216(sp)
   28cb0:	d8c03815 	stw	r3,224(sp)
   28cb4:	d9002d15 	stw	r4,180(sp)
   28cb8:	003b7506 	br	27a90 <__alt_data_end+0xf4027a90>
   28cbc:	ac400007 	ldb	r17,0(r21)
   28cc0:	003a5906 	br	27628 <__alt_data_end+0xf4027628>
   28cc4:	9080100c 	andi	r2,r18,64
   28cc8:	1000a826 	beq	r2,zero,28f6c <___vfprintf_internal_r+0x1ac8>
   28ccc:	d9002d17 	ldw	r4,180(sp)
   28cd0:	002d883a 	mov	r22,zero
   28cd4:	24c0000b 	ldhu	r19,0(r4)
   28cd8:	21000104 	addi	r4,r4,4
   28cdc:	d9002d15 	stw	r4,180(sp)
   28ce0:	003ccb06 	br	28010 <__alt_data_end+0xf4028010>
   28ce4:	d8c02d17 	ldw	r3,180(sp)
   28ce8:	d9002917 	ldw	r4,164(sp)
   28cec:	002d883a 	mov	r22,zero
   28cf0:	18800104 	addi	r2,r3,4
   28cf4:	1cc00017 	ldw	r19,0(r3)
   28cf8:	203ebb0e 	bge	r4,zero,287e8 <__alt_data_end+0xf40287e8>
   28cfc:	003ef106 	br	288c4 <__alt_data_end+0xf40288c4>
   28d00:	9080040c 	andi	r2,r18,16
   28d04:	1000921e 	bne	r2,zero,28f50 <___vfprintf_internal_r+0x1aac>
   28d08:	9480100c 	andi	r18,r18,64
   28d0c:	90013926 	beq	r18,zero,291f4 <___vfprintf_internal_r+0x1d50>
   28d10:	d9002d17 	ldw	r4,180(sp)
   28d14:	d9402f17 	ldw	r5,188(sp)
   28d18:	20800017 	ldw	r2,0(r4)
   28d1c:	21000104 	addi	r4,r4,4
   28d20:	d9002d15 	stw	r4,180(sp)
   28d24:	1140000d 	sth	r5,0(r2)
   28d28:	003a1606 	br	27584 <__alt_data_end+0xf4027584>
   28d2c:	9080100c 	andi	r2,r18,64
   28d30:	10008026 	beq	r2,zero,28f34 <___vfprintf_internal_r+0x1a90>
   28d34:	d8c02d17 	ldw	r3,180(sp)
   28d38:	1cc0000f 	ldh	r19,0(r3)
   28d3c:	18c00104 	addi	r3,r3,4
   28d40:	d8c02d15 	stw	r3,180(sp)
   28d44:	982dd7fa 	srai	r22,r19,31
   28d48:	b005883a 	mov	r2,r22
   28d4c:	003b1f06 	br	279cc <__alt_data_end+0xf40279cc>
   28d50:	9080100c 	andi	r2,r18,64
   28d54:	d8002785 	stb	zero,158(sp)
   28d58:	10008a1e 	bne	r2,zero,28f84 <___vfprintf_internal_r+0x1ae0>
   28d5c:	d9402d17 	ldw	r5,180(sp)
   28d60:	d8c02917 	ldw	r3,164(sp)
   28d64:	002d883a 	mov	r22,zero
   28d68:	28800104 	addi	r2,r5,4
   28d6c:	2cc00017 	ldw	r19,0(r5)
   28d70:	183e4b0e 	bge	r3,zero,286a0 <__alt_data_end+0xf40286a0>
   28d74:	9d86b03a 	or	r3,r19,r22
   28d78:	d8802d15 	stw	r2,180(sp)
   28d7c:	183e4c1e 	bne	r3,zero,286b0 <__alt_data_end+0xf40286b0>
   28d80:	0039883a 	mov	fp,zero
   28d84:	0005883a 	mov	r2,zero
   28d88:	003d4006 	br	2828c <__alt_data_end+0xf402828c>
   28d8c:	014000f4 	movhi	r5,3
   28d90:	29572684 	addi	r5,r5,23706
   28d94:	d9402b15 	stw	r5,172(sp)
   28d98:	d9402b17 	ldw	r5,172(sp)
   28d9c:	1c47883a 	add	r3,r3,r17
   28da0:	10800044 	addi	r2,r2,1
   28da4:	41400015 	stw	r5,0(r8)
   28da8:	44400115 	stw	r17,4(r8)
   28dac:	d8c02015 	stw	r3,128(sp)
   28db0:	d8801f15 	stw	r2,124(sp)
   28db4:	010001c4 	movi	r4,7
   28db8:	20bec816 	blt	r4,r2,288dc <__alt_data_end+0xf40288dc>
   28dbc:	42000204 	addi	r8,r8,8
   28dc0:	003ecd06 	br	288f8 <__alt_data_end+0xf40288f8>
   28dc4:	d9002917 	ldw	r4,164(sp)
   28dc8:	d8002785 	stb	zero,158(sp)
   28dcc:	203d2d16 	blt	r4,zero,28284 <__alt_data_end+0xf4028284>
   28dd0:	00bfdfc4 	movi	r2,-129
   28dd4:	90a4703a 	and	r18,r18,r2
   28dd8:	003a9106 	br	27820 <__alt_data_end+0xf4027820>
   28ddc:	010000f4 	movhi	r4,3
   28de0:	21172684 	addi	r4,r4,23706
   28de4:	d9002b15 	stw	r4,172(sp)
   28de8:	003c0c06 	br	27e1c <__alt_data_end+0xf4027e1c>
   28dec:	d9002c17 	ldw	r4,176(sp)
   28df0:	d9801e04 	addi	r6,sp,120
   28df4:	b80b883a 	mov	r5,r23
   28df8:	002ea2c0 	call	2ea2c <__sprint_r>
   28dfc:	103aab1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28e00:	d8c02017 	ldw	r3,128(sp)
   28e04:	da000404 	addi	r8,sp,16
   28e08:	003d4106 	br	28310 <__alt_data_end+0xf4028310>
   28e0c:	d8801f17 	ldw	r2,124(sp)
   28e10:	014000f4 	movhi	r5,3
   28e14:	01000044 	movi	r4,1
   28e18:	18c00044 	addi	r3,r3,1
   28e1c:	10800044 	addi	r2,r2,1
   28e20:	29572604 	addi	r5,r5,23704
   28e24:	41000115 	stw	r4,4(r8)
   28e28:	41400015 	stw	r5,0(r8)
   28e2c:	d8c02015 	stw	r3,128(sp)
   28e30:	d8801f15 	stw	r2,124(sp)
   28e34:	010001c4 	movi	r4,7
   28e38:	20805c16 	blt	r4,r2,28fac <___vfprintf_internal_r+0x1b08>
   28e3c:	42000204 	addi	r8,r8,8
   28e40:	8800041e 	bne	r17,zero,28e54 <___vfprintf_internal_r+0x19b0>
   28e44:	d8803317 	ldw	r2,204(sp)
   28e48:	1000021e 	bne	r2,zero,28e54 <___vfprintf_internal_r+0x19b0>
   28e4c:	9080004c 	andi	r2,r18,1
   28e50:	103c0926 	beq	r2,zero,27e78 <__alt_data_end+0xf4027e78>
   28e54:	d9003717 	ldw	r4,220(sp)
   28e58:	d8801f17 	ldw	r2,124(sp)
   28e5c:	d9403417 	ldw	r5,208(sp)
   28e60:	20c7883a 	add	r3,r4,r3
   28e64:	10800044 	addi	r2,r2,1
   28e68:	41000115 	stw	r4,4(r8)
   28e6c:	41400015 	stw	r5,0(r8)
   28e70:	d8c02015 	stw	r3,128(sp)
   28e74:	d8801f15 	stw	r2,124(sp)
   28e78:	010001c4 	movi	r4,7
   28e7c:	20812116 	blt	r4,r2,29304 <___vfprintf_internal_r+0x1e60>
   28e80:	42000204 	addi	r8,r8,8
   28e84:	0463c83a 	sub	r17,zero,r17
   28e88:	0440730e 	bge	zero,r17,29058 <___vfprintf_internal_r+0x1bb4>
   28e8c:	05800404 	movi	r22,16
   28e90:	b440860e 	bge	r22,r17,290ac <___vfprintf_internal_r+0x1c08>
   28e94:	014000f4 	movhi	r5,3
   28e98:	29572684 	addi	r5,r5,23706
   28e9c:	d9402b15 	stw	r5,172(sp)
   28ea0:	070001c4 	movi	fp,7
   28ea4:	dcc02c17 	ldw	r19,176(sp)
   28ea8:	00000306 	br	28eb8 <___vfprintf_internal_r+0x1a14>
   28eac:	42000204 	addi	r8,r8,8
   28eb0:	8c7ffc04 	addi	r17,r17,-16
   28eb4:	b440800e 	bge	r22,r17,290b8 <___vfprintf_internal_r+0x1c14>
   28eb8:	18c00404 	addi	r3,r3,16
   28ebc:	10800044 	addi	r2,r2,1
   28ec0:	45000015 	stw	r20,0(r8)
   28ec4:	45800115 	stw	r22,4(r8)
   28ec8:	d8c02015 	stw	r3,128(sp)
   28ecc:	d8801f15 	stw	r2,124(sp)
   28ed0:	e0bff60e 	bge	fp,r2,28eac <__alt_data_end+0xf4028eac>
   28ed4:	d9801e04 	addi	r6,sp,120
   28ed8:	b80b883a 	mov	r5,r23
   28edc:	9809883a 	mov	r4,r19
   28ee0:	002ea2c0 	call	2ea2c <__sprint_r>
   28ee4:	103a711e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28ee8:	d8c02017 	ldw	r3,128(sp)
   28eec:	d8801f17 	ldw	r2,124(sp)
   28ef0:	da000404 	addi	r8,sp,16
   28ef4:	003fee06 	br	28eb0 <__alt_data_end+0xf4028eb0>
   28ef8:	00bfffc4 	movi	r2,-1
   28efc:	003a6f06 	br	278bc <__alt_data_end+0xf40278bc>
   28f00:	008011c4 	movi	r2,71
   28f04:	1440b816 	blt	r2,r17,291e8 <___vfprintf_internal_r+0x1d44>
   28f08:	040000f4 	movhi	r16,3
   28f0c:	84171804 	addi	r16,r16,23648
   28f10:	00c000c4 	movi	r3,3
   28f14:	00bfdfc4 	movi	r2,-129
   28f18:	d8c02a15 	stw	r3,168(sp)
   28f1c:	90a4703a 	and	r18,r18,r2
   28f20:	df002783 	ldbu	fp,158(sp)
   28f24:	d8c02e15 	stw	r3,184(sp)
   28f28:	d8002915 	stw	zero,164(sp)
   28f2c:	d8003215 	stw	zero,200(sp)
   28f30:	003b2906 	br	27bd8 <__alt_data_end+0xf4027bd8>
   28f34:	d9002d17 	ldw	r4,180(sp)
   28f38:	24c00017 	ldw	r19,0(r4)
   28f3c:	21000104 	addi	r4,r4,4
   28f40:	d9002d15 	stw	r4,180(sp)
   28f44:	982dd7fa 	srai	r22,r19,31
   28f48:	b005883a 	mov	r2,r22
   28f4c:	003a9f06 	br	279cc <__alt_data_end+0xf40279cc>
   28f50:	d9402d17 	ldw	r5,180(sp)
   28f54:	d8c02f17 	ldw	r3,188(sp)
   28f58:	28800017 	ldw	r2,0(r5)
   28f5c:	29400104 	addi	r5,r5,4
   28f60:	d9402d15 	stw	r5,180(sp)
   28f64:	10c00015 	stw	r3,0(r2)
   28f68:	00398606 	br	27584 <__alt_data_end+0xf4027584>
   28f6c:	d9402d17 	ldw	r5,180(sp)
   28f70:	002d883a 	mov	r22,zero
   28f74:	2cc00017 	ldw	r19,0(r5)
   28f78:	29400104 	addi	r5,r5,4
   28f7c:	d9402d15 	stw	r5,180(sp)
   28f80:	003c2306 	br	28010 <__alt_data_end+0xf4028010>
   28f84:	d8c02d17 	ldw	r3,180(sp)
   28f88:	d9002917 	ldw	r4,164(sp)
   28f8c:	002d883a 	mov	r22,zero
   28f90:	18800104 	addi	r2,r3,4
   28f94:	1cc0000b 	ldhu	r19,0(r3)
   28f98:	203dc10e 	bge	r4,zero,286a0 <__alt_data_end+0xf40286a0>
   28f9c:	003f7506 	br	28d74 <__alt_data_end+0xf4028d74>
   28fa0:	040000f4 	movhi	r16,3
   28fa4:	84171604 	addi	r16,r16,23640
   28fa8:	003acc06 	br	27adc <__alt_data_end+0xf4027adc>
   28fac:	d9002c17 	ldw	r4,176(sp)
   28fb0:	d9801e04 	addi	r6,sp,120
   28fb4:	b80b883a 	mov	r5,r23
   28fb8:	002ea2c0 	call	2ea2c <__sprint_r>
   28fbc:	103a3b1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   28fc0:	dc402617 	ldw	r17,152(sp)
   28fc4:	d8c02017 	ldw	r3,128(sp)
   28fc8:	da000404 	addi	r8,sp,16
   28fcc:	003f9c06 	br	28e40 <__alt_data_end+0xf4028e40>
   28fd0:	ac400043 	ldbu	r17,1(r21)
   28fd4:	94800814 	ori	r18,r18,32
   28fd8:	ad400044 	addi	r21,r21,1
   28fdc:	8c403fcc 	andi	r17,r17,255
   28fe0:	8c40201c 	xori	r17,r17,128
   28fe4:	8c7fe004 	addi	r17,r17,-128
   28fe8:	00398f06 	br	27628 <__alt_data_end+0xf4027628>
   28fec:	d8c02d15 	stw	r3,180(sp)
   28ff0:	0039883a 	mov	fp,zero
   28ff4:	003e3506 	br	288cc <__alt_data_end+0xf40288cc>
   28ff8:	d9002c17 	ldw	r4,176(sp)
   28ffc:	d9801e04 	addi	r6,sp,120
   29000:	b80b883a 	mov	r5,r23
   29004:	002ea2c0 	call	2ea2c <__sprint_r>
   29008:	103a281e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   2900c:	d8c02017 	ldw	r3,128(sp)
   29010:	da000404 	addi	r8,sp,16
   29014:	003cd006 	br	28358 <__alt_data_end+0xf4028358>
   29018:	8009883a 	mov	r4,r16
   2901c:	da003d15 	stw	r8,244(sp)
   29020:	002740c0 	call	2740c <strlen>
   29024:	d8802e15 	stw	r2,184(sp)
   29028:	da003d17 	ldw	r8,244(sp)
   2902c:	103c340e 	bge	r2,zero,28100 <__alt_data_end+0xf4028100>
   29030:	0005883a 	mov	r2,zero
   29034:	003c3206 	br	28100 <__alt_data_end+0xf4028100>
   29038:	d9002c17 	ldw	r4,176(sp)
   2903c:	d9801e04 	addi	r6,sp,120
   29040:	b80b883a 	mov	r5,r23
   29044:	002ea2c0 	call	2ea2c <__sprint_r>
   29048:	103a181e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   2904c:	d8c02017 	ldw	r3,128(sp)
   29050:	d8801f17 	ldw	r2,124(sp)
   29054:	da000404 	addi	r8,sp,16
   29058:	d9403317 	ldw	r5,204(sp)
   2905c:	10800044 	addi	r2,r2,1
   29060:	44000015 	stw	r16,0(r8)
   29064:	28c7883a 	add	r3,r5,r3
   29068:	003b7d06 	br	27e60 <__alt_data_end+0xf4027e60>
   2906c:	010000f4 	movhi	r4,3
   29070:	21172a84 	addi	r4,r4,23722
   29074:	d9003515 	stw	r4,212(sp)
   29078:	003b1406 	br	27ccc <__alt_data_end+0xf4027ccc>
   2907c:	013fffc4 	movi	r4,-1
   29080:	003a3506 	br	27958 <__alt_data_end+0xf4027958>
   29084:	0023883a 	mov	r17,zero
   29088:	003d9d06 	br	28700 <__alt_data_end+0xf4028700>
   2908c:	d9002c17 	ldw	r4,176(sp)
   29090:	d9801e04 	addi	r6,sp,120
   29094:	b80b883a 	mov	r5,r23
   29098:	002ea2c0 	call	2ea2c <__sprint_r>
   2909c:	103a031e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   290a0:	d8c02017 	ldw	r3,128(sp)
   290a4:	da000404 	addi	r8,sp,16
   290a8:	003d9406 	br	286fc <__alt_data_end+0xf40286fc>
   290ac:	010000f4 	movhi	r4,3
   290b0:	21172684 	addi	r4,r4,23706
   290b4:	d9002b15 	stw	r4,172(sp)
   290b8:	d9002b17 	ldw	r4,172(sp)
   290bc:	1c47883a 	add	r3,r3,r17
   290c0:	10800044 	addi	r2,r2,1
   290c4:	41000015 	stw	r4,0(r8)
   290c8:	44400115 	stw	r17,4(r8)
   290cc:	d8c02015 	stw	r3,128(sp)
   290d0:	d8801f15 	stw	r2,124(sp)
   290d4:	010001c4 	movi	r4,7
   290d8:	20bfd716 	blt	r4,r2,29038 <__alt_data_end+0xf4029038>
   290dc:	42000204 	addi	r8,r8,8
   290e0:	003fdd06 	br	29058 <__alt_data_end+0xf4029058>
   290e4:	d9002c17 	ldw	r4,176(sp)
   290e8:	d9801e04 	addi	r6,sp,120
   290ec:	b80b883a 	mov	r5,r23
   290f0:	002ea2c0 	call	2ea2c <__sprint_r>
   290f4:	1039ed1e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   290f8:	d8802617 	ldw	r2,152(sp)
   290fc:	d8c02017 	ldw	r3,128(sp)
   29100:	da000404 	addi	r8,sp,16
   29104:	003e1006 	br	28948 <__alt_data_end+0xf4028948>
   29108:	00800044 	movi	r2,1
   2910c:	10803fcc 	andi	r2,r2,255
   29110:	00c00044 	movi	r3,1
   29114:	10fa3526 	beq	r2,r3,279ec <__alt_data_end+0xf40279ec>
   29118:	00c00084 	movi	r3,2
   2911c:	10fbcb26 	beq	r2,r3,2804c <__alt_data_end+0xf402804c>
   29120:	003a8f06 	br	27b60 <__alt_data_end+0xf4027b60>
   29124:	010000f4 	movhi	r4,3
   29128:	21172a84 	addi	r4,r4,23722
   2912c:	d9003515 	stw	r4,212(sp)
   29130:	003b7606 	br	27f0c <__alt_data_end+0xf4027f0c>
   29134:	d8802917 	ldw	r2,164(sp)
   29138:	00c00184 	movi	r3,6
   2913c:	1880012e 	bgeu	r3,r2,29144 <___vfprintf_internal_r+0x1ca0>
   29140:	1805883a 	mov	r2,r3
   29144:	d8802e15 	stw	r2,184(sp)
   29148:	1000ef16 	blt	r2,zero,29508 <___vfprintf_internal_r+0x2064>
   2914c:	040000f4 	movhi	r16,3
   29150:	d8802a15 	stw	r2,168(sp)
   29154:	dcc02d15 	stw	r19,180(sp)
   29158:	d8002915 	stw	zero,164(sp)
   2915c:	d8003215 	stw	zero,200(sp)
   29160:	84172404 	addi	r16,r16,23696
   29164:	0039883a 	mov	fp,zero
   29168:	003aa206 	br	27bf4 <__alt_data_end+0xf4027bf4>
   2916c:	0021883a 	mov	r16,zero
   29170:	003e0706 	br	28990 <__alt_data_end+0xf4028990>
   29174:	d9002c17 	ldw	r4,176(sp)
   29178:	d9801e04 	addi	r6,sp,120
   2917c:	b80b883a 	mov	r5,r23
   29180:	002ea2c0 	call	2ea2c <__sprint_r>
   29184:	1039c91e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   29188:	d8802617 	ldw	r2,152(sp)
   2918c:	d9403317 	ldw	r5,204(sp)
   29190:	d8c02017 	ldw	r3,128(sp)
   29194:	da000404 	addi	r8,sp,16
   29198:	2885c83a 	sub	r2,r5,r2
   2919c:	003dfb06 	br	2898c <__alt_data_end+0xf402898c>
   291a0:	9080004c 	andi	r2,r18,1
   291a4:	103e8f1e 	bne	r2,zero,28be4 <__alt_data_end+0xf4028be4>
   291a8:	d8802117 	ldw	r2,132(sp)
   291ac:	003e9e06 	br	28c28 <__alt_data_end+0xf4028c28>
   291b0:	1025883a 	mov	r18,r2
   291b4:	0039883a 	mov	fp,zero
   291b8:	00800084 	movi	r2,2
   291bc:	003fd306 	br	2910c <__alt_data_end+0xf402910c>
   291c0:	07000b44 	movi	fp,45
   291c4:	df002785 	stb	fp,158(sp)
   291c8:	003a4006 	br	27acc <__alt_data_end+0xf4027acc>
   291cc:	00c00b44 	movi	r3,45
   291d0:	d8c02785 	stb	r3,158(sp)
   291d4:	d8802a15 	stw	r2,168(sp)
   291d8:	dc802b17 	ldw	r18,172(sp)
   291dc:	d8002915 	stw	zero,164(sp)
   291e0:	07000b44 	movi	fp,45
   291e4:	003a8006 	br	27be8 <__alt_data_end+0xf4027be8>
   291e8:	040000f4 	movhi	r16,3
   291ec:	84171904 	addi	r16,r16,23652
   291f0:	003f4706 	br	28f10 <__alt_data_end+0xf4028f10>
   291f4:	d8c02d17 	ldw	r3,180(sp)
   291f8:	d9002f17 	ldw	r4,188(sp)
   291fc:	18800017 	ldw	r2,0(r3)
   29200:	18c00104 	addi	r3,r3,4
   29204:	d8c02d15 	stw	r3,180(sp)
   29208:	11000015 	stw	r4,0(r2)
   2920c:	0038dd06 	br	27584 <__alt_data_end+0xf4027584>
   29210:	dd802617 	ldw	r22,152(sp)
   29214:	00bfff44 	movi	r2,-3
   29218:	b0801c16 	blt	r22,r2,2928c <___vfprintf_internal_r+0x1de8>
   2921c:	d9402917 	ldw	r5,164(sp)
   29220:	2d801a16 	blt	r5,r22,2928c <___vfprintf_internal_r+0x1de8>
   29224:	dd803215 	stw	r22,200(sp)
   29228:	003e8906 	br	28c50 <__alt_data_end+0xf4028c50>
   2922c:	010000f4 	movhi	r4,3
   29230:	21172684 	addi	r4,r4,23706
   29234:	d9002b15 	stw	r4,172(sp)
   29238:	003c9106 	br	28480 <__alt_data_end+0xf4028480>
   2923c:	e005883a 	mov	r2,fp
   29240:	003e7906 	br	28c28 <__alt_data_end+0xf4028c28>
   29244:	d9402917 	ldw	r5,164(sp)
   29248:	df002783 	ldbu	fp,158(sp)
   2924c:	dcc02d15 	stw	r19,180(sp)
   29250:	d9402a15 	stw	r5,168(sp)
   29254:	d9402e15 	stw	r5,184(sp)
   29258:	d8002915 	stw	zero,164(sp)
   2925c:	d8003215 	stw	zero,200(sp)
   29260:	003a5d06 	br	27bd8 <__alt_data_end+0xf4027bd8>
   29264:	9080004c 	andi	r2,r18,1
   29268:	0039883a 	mov	fp,zero
   2926c:	10000426 	beq	r2,zero,29280 <___vfprintf_internal_r+0x1ddc>
   29270:	00800c04 	movi	r2,48
   29274:	dc001dc4 	addi	r16,sp,119
   29278:	d8801dc5 	stb	r2,119(sp)
   2927c:	003b8006 	br	28080 <__alt_data_end+0xf4028080>
   29280:	d8002e15 	stw	zero,184(sp)
   29284:	dc001e04 	addi	r16,sp,120
   29288:	003a4d06 	br	27bc0 <__alt_data_end+0xf4027bc0>
   2928c:	8c7fff84 	addi	r17,r17,-2
   29290:	b5bfffc4 	addi	r22,r22,-1
   29294:	dd802615 	stw	r22,152(sp)
   29298:	dc4022c5 	stb	r17,139(sp)
   2929c:	b000bf16 	blt	r22,zero,2959c <___vfprintf_internal_r+0x20f8>
   292a0:	00800ac4 	movi	r2,43
   292a4:	d8802305 	stb	r2,140(sp)
   292a8:	00800244 	movi	r2,9
   292ac:	15807016 	blt	r2,r22,29470 <___vfprintf_internal_r+0x1fcc>
   292b0:	00800c04 	movi	r2,48
   292b4:	b5800c04 	addi	r22,r22,48
   292b8:	d8802345 	stb	r2,141(sp)
   292bc:	dd802385 	stb	r22,142(sp)
   292c0:	d88023c4 	addi	r2,sp,143
   292c4:	df0022c4 	addi	fp,sp,139
   292c8:	d8c03317 	ldw	r3,204(sp)
   292cc:	1739c83a 	sub	fp,r2,fp
   292d0:	d9003317 	ldw	r4,204(sp)
   292d4:	e0c7883a 	add	r3,fp,r3
   292d8:	df003a15 	stw	fp,232(sp)
   292dc:	d8c02e15 	stw	r3,184(sp)
   292e0:	00800044 	movi	r2,1
   292e4:	1100b30e 	bge	r2,r4,295b4 <___vfprintf_internal_r+0x2110>
   292e8:	d8c02e17 	ldw	r3,184(sp)
   292ec:	18c00044 	addi	r3,r3,1
   292f0:	d8c02e15 	stw	r3,184(sp)
   292f4:	1805883a 	mov	r2,r3
   292f8:	1800ac16 	blt	r3,zero,295ac <___vfprintf_internal_r+0x2108>
   292fc:	d8003215 	stw	zero,200(sp)
   29300:	003e5d06 	br	28c78 <__alt_data_end+0xf4028c78>
   29304:	d9002c17 	ldw	r4,176(sp)
   29308:	d9801e04 	addi	r6,sp,120
   2930c:	b80b883a 	mov	r5,r23
   29310:	002ea2c0 	call	2ea2c <__sprint_r>
   29314:	1039651e 	bne	r2,zero,278ac <__alt_data_end+0xf40278ac>
   29318:	dc402617 	ldw	r17,152(sp)
   2931c:	d8c02017 	ldw	r3,128(sp)
   29320:	d8801f17 	ldw	r2,124(sp)
   29324:	da000404 	addi	r8,sp,16
   29328:	003ed606 	br	28e84 <__alt_data_end+0xf4028e84>
   2932c:	582b883a 	mov	r21,r11
   29330:	d8002915 	stw	zero,164(sp)
   29334:	0038bd06 	br	2762c <__alt_data_end+0xf402762c>
   29338:	d8802917 	ldw	r2,164(sp)
   2933c:	103e071e 	bne	r2,zero,28b5c <__alt_data_end+0xf4028b5c>
   29340:	dc002915 	stw	r16,164(sp)
   29344:	003e0506 	br	28b5c <__alt_data_end+0xf4028b5c>
   29348:	d9002917 	ldw	r4,164(sp)
   2934c:	20c00044 	addi	r3,r4,1
   29350:	003e0f06 	br	28b90 <__alt_data_end+0xf4028b90>
   29354:	01400184 	movi	r5,6
   29358:	d9402915 	stw	r5,164(sp)
   2935c:	003dff06 	br	28b5c <__alt_data_end+0xf4028b5c>
   29360:	d8802104 	addi	r2,sp,132
   29364:	d8800315 	stw	r2,12(sp)
   29368:	d8802504 	addi	r2,sp,148
   2936c:	d8800215 	stw	r2,8(sp)
   29370:	d8802604 	addi	r2,sp,152
   29374:	d8800115 	stw	r2,4(sp)
   29378:	d8802917 	ldw	r2,164(sp)
   2937c:	d9403617 	ldw	r5,216(sp)
   29380:	d9002c17 	ldw	r4,176(sp)
   29384:	d8800015 	stw	r2,0(sp)
   29388:	01c000c4 	movi	r7,3
   2938c:	980d883a 	mov	r6,r19
   29390:	da003d15 	stw	r8,244(sp)
   29394:	0029ac80 	call	29ac8 <_dtoa_r>
   29398:	d8c02917 	ldw	r3,164(sp)
   2939c:	da003d17 	ldw	r8,244(sp)
   293a0:	1021883a 	mov	r16,r2
   293a4:	10f9883a 	add	fp,r2,r3
   293a8:	81000007 	ldb	r4,0(r16)
   293ac:	00800c04 	movi	r2,48
   293b0:	20805e26 	beq	r4,r2,2952c <___vfprintf_internal_r+0x2088>
   293b4:	d8c02617 	ldw	r3,152(sp)
   293b8:	e0f9883a 	add	fp,fp,r3
   293bc:	003e0a06 	br	28be8 <__alt_data_end+0xf4028be8>
   293c0:	00c00b44 	movi	r3,45
   293c4:	24e0003c 	xorhi	r19,r4,32768
   293c8:	d8c02a05 	stb	r3,168(sp)
   293cc:	003de906 	br	28b74 <__alt_data_end+0xf4028b74>
   293d0:	d8c03217 	ldw	r3,200(sp)
   293d4:	00c07a0e 	bge	zero,r3,295c0 <___vfprintf_internal_r+0x211c>
   293d8:	00800044 	movi	r2,1
   293dc:	d9003317 	ldw	r4,204(sp)
   293e0:	1105883a 	add	r2,r2,r4
   293e4:	d8802e15 	stw	r2,184(sp)
   293e8:	10004e16 	blt	r2,zero,29524 <___vfprintf_internal_r+0x2080>
   293ec:	044019c4 	movi	r17,103
   293f0:	003e2106 	br	28c78 <__alt_data_end+0xf4028c78>
   293f4:	d9002917 	ldw	r4,164(sp)
   293f8:	d8802104 	addi	r2,sp,132
   293fc:	d8800315 	stw	r2,12(sp)
   29400:	d9000015 	stw	r4,0(sp)
   29404:	d8802504 	addi	r2,sp,148
   29408:	d9403617 	ldw	r5,216(sp)
   2940c:	d9002c17 	ldw	r4,176(sp)
   29410:	d8800215 	stw	r2,8(sp)
   29414:	d8802604 	addi	r2,sp,152
   29418:	d8800115 	stw	r2,4(sp)
   2941c:	01c000c4 	movi	r7,3
   29420:	980d883a 	mov	r6,r19
   29424:	da003d15 	stw	r8,244(sp)
   29428:	0029ac80 	call	29ac8 <_dtoa_r>
   2942c:	d8c02917 	ldw	r3,164(sp)
   29430:	da003d17 	ldw	r8,244(sp)
   29434:	1021883a 	mov	r16,r2
   29438:	00801184 	movi	r2,70
   2943c:	80f9883a 	add	fp,r16,r3
   29440:	88bfd926 	beq	r17,r2,293a8 <__alt_data_end+0xf40293a8>
   29444:	003de806 	br	28be8 <__alt_data_end+0xf4028be8>
   29448:	d9002917 	ldw	r4,164(sp)
   2944c:	00c04d0e 	bge	zero,r3,29584 <___vfprintf_internal_r+0x20e0>
   29450:	2000441e 	bne	r4,zero,29564 <___vfprintf_internal_r+0x20c0>
   29454:	9480004c 	andi	r18,r18,1
   29458:	9000421e 	bne	r18,zero,29564 <___vfprintf_internal_r+0x20c0>
   2945c:	1805883a 	mov	r2,r3
   29460:	18007016 	blt	r3,zero,29624 <___vfprintf_internal_r+0x2180>
   29464:	d8c03217 	ldw	r3,200(sp)
   29468:	d8c02e15 	stw	r3,184(sp)
   2946c:	003e0206 	br	28c78 <__alt_data_end+0xf4028c78>
   29470:	df0022c4 	addi	fp,sp,139
   29474:	dc002915 	stw	r16,164(sp)
   29478:	4027883a 	mov	r19,r8
   2947c:	e021883a 	mov	r16,fp
   29480:	b009883a 	mov	r4,r22
   29484:	01400284 	movi	r5,10
   29488:	00234140 	call	23414 <__modsi3>
   2948c:	10800c04 	addi	r2,r2,48
   29490:	843fffc4 	addi	r16,r16,-1
   29494:	b009883a 	mov	r4,r22
   29498:	01400284 	movi	r5,10
   2949c:	80800005 	stb	r2,0(r16)
   294a0:	00233900 	call	23390 <__divsi3>
   294a4:	102d883a 	mov	r22,r2
   294a8:	00800244 	movi	r2,9
   294ac:	15bff416 	blt	r2,r22,29480 <__alt_data_end+0xf4029480>
   294b0:	9811883a 	mov	r8,r19
   294b4:	b0800c04 	addi	r2,r22,48
   294b8:	8027883a 	mov	r19,r16
   294bc:	997fffc4 	addi	r5,r19,-1
   294c0:	98bfffc5 	stb	r2,-1(r19)
   294c4:	dc002917 	ldw	r16,164(sp)
   294c8:	2f006a2e 	bgeu	r5,fp,29674 <___vfprintf_internal_r+0x21d0>
   294cc:	d9c02384 	addi	r7,sp,142
   294d0:	3ccfc83a 	sub	r7,r7,r19
   294d4:	d9002344 	addi	r4,sp,141
   294d8:	e1cf883a 	add	r7,fp,r7
   294dc:	00000106 	br	294e4 <___vfprintf_internal_r+0x2040>
   294e0:	28800003 	ldbu	r2,0(r5)
   294e4:	20800005 	stb	r2,0(r4)
   294e8:	21000044 	addi	r4,r4,1
   294ec:	29400044 	addi	r5,r5,1
   294f0:	393ffb1e 	bne	r7,r4,294e0 <__alt_data_end+0xf40294e0>
   294f4:	d8802304 	addi	r2,sp,140
   294f8:	14c5c83a 	sub	r2,r2,r19
   294fc:	d8c02344 	addi	r3,sp,141
   29500:	1885883a 	add	r2,r3,r2
   29504:	003f7006 	br	292c8 <__alt_data_end+0xf40292c8>
   29508:	0005883a 	mov	r2,zero
   2950c:	003f0f06 	br	2914c <__alt_data_end+0xf402914c>
   29510:	d8c03217 	ldw	r3,200(sp)
   29514:	18c00044 	addi	r3,r3,1
   29518:	d8c02e15 	stw	r3,184(sp)
   2951c:	1805883a 	mov	r2,r3
   29520:	183fb20e 	bge	r3,zero,293ec <__alt_data_end+0xf40293ec>
   29524:	0005883a 	mov	r2,zero
   29528:	003fb006 	br	293ec <__alt_data_end+0xf40293ec>
   2952c:	d9003617 	ldw	r4,216(sp)
   29530:	000d883a 	mov	r6,zero
   29534:	000f883a 	mov	r7,zero
   29538:	980b883a 	mov	r5,r19
   2953c:	d8c03c15 	stw	r3,240(sp)
   29540:	da003d15 	stw	r8,244(sp)
   29544:	0025bd80 	call	25bd8 <__eqdf2>
   29548:	d8c03c17 	ldw	r3,240(sp)
   2954c:	da003d17 	ldw	r8,244(sp)
   29550:	103f9826 	beq	r2,zero,293b4 <__alt_data_end+0xf40293b4>
   29554:	00800044 	movi	r2,1
   29558:	10c7c83a 	sub	r3,r2,r3
   2955c:	d8c02615 	stw	r3,152(sp)
   29560:	003f9506 	br	293b8 <__alt_data_end+0xf40293b8>
   29564:	d9002917 	ldw	r4,164(sp)
   29568:	d8c03217 	ldw	r3,200(sp)
   2956c:	20800044 	addi	r2,r4,1
   29570:	1885883a 	add	r2,r3,r2
   29574:	d8802e15 	stw	r2,184(sp)
   29578:	103dbf0e 	bge	r2,zero,28c78 <__alt_data_end+0xf4028c78>
   2957c:	0005883a 	mov	r2,zero
   29580:	003dbd06 	br	28c78 <__alt_data_end+0xf4028c78>
   29584:	2000211e 	bne	r4,zero,2960c <___vfprintf_internal_r+0x2168>
   29588:	9480004c 	andi	r18,r18,1
   2958c:	90001f1e 	bne	r18,zero,2960c <___vfprintf_internal_r+0x2168>
   29590:	00800044 	movi	r2,1
   29594:	d8802e15 	stw	r2,184(sp)
   29598:	003db706 	br	28c78 <__alt_data_end+0xf4028c78>
   2959c:	00800b44 	movi	r2,45
   295a0:	05adc83a 	sub	r22,zero,r22
   295a4:	d8802305 	stb	r2,140(sp)
   295a8:	003f3f06 	br	292a8 <__alt_data_end+0xf40292a8>
   295ac:	0005883a 	mov	r2,zero
   295b0:	003f5206 	br	292fc <__alt_data_end+0xf40292fc>
   295b4:	90a4703a 	and	r18,r18,r2
   295b8:	903f4e26 	beq	r18,zero,292f4 <__alt_data_end+0xf40292f4>
   295bc:	003f4a06 	br	292e8 <__alt_data_end+0xf40292e8>
   295c0:	00800084 	movi	r2,2
   295c4:	10c5c83a 	sub	r2,r2,r3
   295c8:	003f8406 	br	293dc <__alt_data_end+0xf40293dc>
   295cc:	d8802d17 	ldw	r2,180(sp)
   295d0:	d9002d17 	ldw	r4,180(sp)
   295d4:	ac400043 	ldbu	r17,1(r21)
   295d8:	10800017 	ldw	r2,0(r2)
   295dc:	582b883a 	mov	r21,r11
   295e0:	d8802915 	stw	r2,164(sp)
   295e4:	20800104 	addi	r2,r4,4
   295e8:	d9002917 	ldw	r4,164(sp)
   295ec:	d8802d15 	stw	r2,180(sp)
   295f0:	203e7a0e 	bge	r4,zero,28fdc <__alt_data_end+0xf4028fdc>
   295f4:	8c403fcc 	andi	r17,r17,255
   295f8:	00bfffc4 	movi	r2,-1
   295fc:	8c40201c 	xori	r17,r17,128
   29600:	d8802915 	stw	r2,164(sp)
   29604:	8c7fe004 	addi	r17,r17,-128
   29608:	00380706 	br	27628 <__alt_data_end+0xf4027628>
   2960c:	d8c02917 	ldw	r3,164(sp)
   29610:	18c00084 	addi	r3,r3,2
   29614:	d8c02e15 	stw	r3,184(sp)
   29618:	1805883a 	mov	r2,r3
   2961c:	183d960e 	bge	r3,zero,28c78 <__alt_data_end+0xf4028c78>
   29620:	003fd606 	br	2957c <__alt_data_end+0xf402957c>
   29624:	0005883a 	mov	r2,zero
   29628:	003f8e06 	br	29464 <__alt_data_end+0xf4029464>
   2962c:	9080004c 	andi	r2,r18,1
   29630:	103f811e 	bne	r2,zero,29438 <__alt_data_end+0xf4029438>
   29634:	d8802117 	ldw	r2,132(sp)
   29638:	1405c83a 	sub	r2,r2,r16
   2963c:	d8803315 	stw	r2,204(sp)
   29640:	b47ef326 	beq	r22,r17,29210 <__alt_data_end+0xf4029210>
   29644:	dd802617 	ldw	r22,152(sp)
   29648:	003f1106 	br	29290 <__alt_data_end+0xf4029290>
   2964c:	d9c02785 	stb	r7,158(sp)
   29650:	00390406 	br	27a64 <__alt_data_end+0xf4027a64>
   29654:	d9c02785 	stb	r7,158(sp)
   29658:	0038d306 	br	279a8 <__alt_data_end+0xf40279a8>
   2965c:	d9c02785 	stb	r7,158(sp)
   29660:	003a6106 	br	27fe8 <__alt_data_end+0xf4027fe8>
   29664:	d9c02785 	stb	r7,158(sp)
   29668:	003af806 	br	2824c <__alt_data_end+0xf402824c>
   2966c:	0005883a 	mov	r2,zero
   29670:	003d7e06 	br	28c6c <__alt_data_end+0xf4028c6c>
   29674:	d8802344 	addi	r2,sp,141
   29678:	003f1306 	br	292c8 <__alt_data_end+0xf40292c8>
   2967c:	d9c02785 	stb	r7,158(sp)
   29680:	00392306 	br	27b10 <__alt_data_end+0xf4027b10>
   29684:	d9c02785 	stb	r7,158(sp)
   29688:	003aa906 	br	28130 <__alt_data_end+0xf4028130>
   2968c:	d9c02785 	stb	r7,158(sp)
   29690:	003a3d06 	br	27f88 <__alt_data_end+0xf4027f88>
   29694:	d9c02785 	stb	r7,158(sp)
   29698:	003aca06 	br	281c4 <__alt_data_end+0xf40281c4>

0002969c <__vfprintf_internal>:
   2969c:	008000f4 	movhi	r2,3
   296a0:	109ea004 	addi	r2,r2,31360
   296a4:	300f883a 	mov	r7,r6
   296a8:	280d883a 	mov	r6,r5
   296ac:	200b883a 	mov	r5,r4
   296b0:	11000017 	ldw	r4,0(r2)
   296b4:	00274a41 	jmpi	274a4 <___vfprintf_internal_r>

000296b8 <__sbprintf>:
   296b8:	2880030b 	ldhu	r2,12(r5)
   296bc:	2ac01917 	ldw	r11,100(r5)
   296c0:	2a80038b 	ldhu	r10,14(r5)
   296c4:	2a400717 	ldw	r9,28(r5)
   296c8:	2a000917 	ldw	r8,36(r5)
   296cc:	defee204 	addi	sp,sp,-1144
   296d0:	00c10004 	movi	r3,1024
   296d4:	dc011a15 	stw	r16,1128(sp)
   296d8:	10bfff4c 	andi	r2,r2,65533
   296dc:	2821883a 	mov	r16,r5
   296e0:	d8cb883a 	add	r5,sp,r3
   296e4:	dc811c15 	stw	r18,1136(sp)
   296e8:	dc411b15 	stw	r17,1132(sp)
   296ec:	dfc11d15 	stw	ra,1140(sp)
   296f0:	2025883a 	mov	r18,r4
   296f4:	d881030d 	sth	r2,1036(sp)
   296f8:	dac11915 	stw	r11,1124(sp)
   296fc:	da81038d 	sth	r10,1038(sp)
   29700:	da410715 	stw	r9,1052(sp)
   29704:	da010915 	stw	r8,1060(sp)
   29708:	dec10015 	stw	sp,1024(sp)
   2970c:	dec10415 	stw	sp,1040(sp)
   29710:	d8c10215 	stw	r3,1032(sp)
   29714:	d8c10515 	stw	r3,1044(sp)
   29718:	d8010615 	stw	zero,1048(sp)
   2971c:	00274a40 	call	274a4 <___vfprintf_internal_r>
   29720:	1023883a 	mov	r17,r2
   29724:	10000416 	blt	r2,zero,29738 <__sbprintf+0x80>
   29728:	d9410004 	addi	r5,sp,1024
   2972c:	9009883a 	mov	r4,r18
   29730:	002b36c0 	call	2b36c <_fflush_r>
   29734:	10000d1e 	bne	r2,zero,2976c <__sbprintf+0xb4>
   29738:	d881030b 	ldhu	r2,1036(sp)
   2973c:	1080100c 	andi	r2,r2,64
   29740:	10000326 	beq	r2,zero,29750 <__sbprintf+0x98>
   29744:	8080030b 	ldhu	r2,12(r16)
   29748:	10801014 	ori	r2,r2,64
   2974c:	8080030d 	sth	r2,12(r16)
   29750:	8805883a 	mov	r2,r17
   29754:	dfc11d17 	ldw	ra,1140(sp)
   29758:	dc811c17 	ldw	r18,1136(sp)
   2975c:	dc411b17 	ldw	r17,1132(sp)
   29760:	dc011a17 	ldw	r16,1128(sp)
   29764:	dec11e04 	addi	sp,sp,1144
   29768:	f800283a 	ret
   2976c:	047fffc4 	movi	r17,-1
   29770:	003ff106 	br	29738 <__alt_data_end+0xf4029738>

00029774 <__swsetup_r>:
   29774:	008000f4 	movhi	r2,3
   29778:	defffd04 	addi	sp,sp,-12
   2977c:	109ea004 	addi	r2,r2,31360
   29780:	dc400115 	stw	r17,4(sp)
   29784:	2023883a 	mov	r17,r4
   29788:	11000017 	ldw	r4,0(r2)
   2978c:	dc000015 	stw	r16,0(sp)
   29790:	dfc00215 	stw	ra,8(sp)
   29794:	2821883a 	mov	r16,r5
   29798:	20000226 	beq	r4,zero,297a4 <__swsetup_r+0x30>
   2979c:	20800e17 	ldw	r2,56(r4)
   297a0:	10003126 	beq	r2,zero,29868 <__swsetup_r+0xf4>
   297a4:	8080030b 	ldhu	r2,12(r16)
   297a8:	10c0020c 	andi	r3,r2,8
   297ac:	1009883a 	mov	r4,r2
   297b0:	18000f26 	beq	r3,zero,297f0 <__swsetup_r+0x7c>
   297b4:	80c00417 	ldw	r3,16(r16)
   297b8:	18001526 	beq	r3,zero,29810 <__swsetup_r+0x9c>
   297bc:	1100004c 	andi	r4,r2,1
   297c0:	20001c1e 	bne	r4,zero,29834 <__swsetup_r+0xc0>
   297c4:	1080008c 	andi	r2,r2,2
   297c8:	1000291e 	bne	r2,zero,29870 <__swsetup_r+0xfc>
   297cc:	80800517 	ldw	r2,20(r16)
   297d0:	80800215 	stw	r2,8(r16)
   297d4:	18001c26 	beq	r3,zero,29848 <__swsetup_r+0xd4>
   297d8:	0005883a 	mov	r2,zero
   297dc:	dfc00217 	ldw	ra,8(sp)
   297e0:	dc400117 	ldw	r17,4(sp)
   297e4:	dc000017 	ldw	r16,0(sp)
   297e8:	dec00304 	addi	sp,sp,12
   297ec:	f800283a 	ret
   297f0:	2080040c 	andi	r2,r4,16
   297f4:	10002e26 	beq	r2,zero,298b0 <__swsetup_r+0x13c>
   297f8:	2080010c 	andi	r2,r4,4
   297fc:	10001e1e 	bne	r2,zero,29878 <__swsetup_r+0x104>
   29800:	80c00417 	ldw	r3,16(r16)
   29804:	20800214 	ori	r2,r4,8
   29808:	8080030d 	sth	r2,12(r16)
   2980c:	183feb1e 	bne	r3,zero,297bc <__alt_data_end+0xf40297bc>
   29810:	1100a00c 	andi	r4,r2,640
   29814:	01408004 	movi	r5,512
   29818:	217fe826 	beq	r4,r5,297bc <__alt_data_end+0xf40297bc>
   2981c:	800b883a 	mov	r5,r16
   29820:	8809883a 	mov	r4,r17
   29824:	002c2ec0 	call	2c2ec <__smakebuf_r>
   29828:	8080030b 	ldhu	r2,12(r16)
   2982c:	80c00417 	ldw	r3,16(r16)
   29830:	003fe206 	br	297bc <__alt_data_end+0xf40297bc>
   29834:	80800517 	ldw	r2,20(r16)
   29838:	80000215 	stw	zero,8(r16)
   2983c:	0085c83a 	sub	r2,zero,r2
   29840:	80800615 	stw	r2,24(r16)
   29844:	183fe41e 	bne	r3,zero,297d8 <__alt_data_end+0xf40297d8>
   29848:	80c0030b 	ldhu	r3,12(r16)
   2984c:	0005883a 	mov	r2,zero
   29850:	1900200c 	andi	r4,r3,128
   29854:	203fe126 	beq	r4,zero,297dc <__alt_data_end+0xf40297dc>
   29858:	18c01014 	ori	r3,r3,64
   2985c:	80c0030d 	sth	r3,12(r16)
   29860:	00bfffc4 	movi	r2,-1
   29864:	003fdd06 	br	297dc <__alt_data_end+0xf40297dc>
   29868:	002b7480 	call	2b748 <__sinit>
   2986c:	003fcd06 	br	297a4 <__alt_data_end+0xf40297a4>
   29870:	0005883a 	mov	r2,zero
   29874:	003fd606 	br	297d0 <__alt_data_end+0xf40297d0>
   29878:	81400c17 	ldw	r5,48(r16)
   2987c:	28000626 	beq	r5,zero,29898 <__swsetup_r+0x124>
   29880:	80801004 	addi	r2,r16,64
   29884:	28800326 	beq	r5,r2,29894 <__swsetup_r+0x120>
   29888:	8809883a 	mov	r4,r17
   2988c:	002b8bc0 	call	2b8bc <_free_r>
   29890:	8100030b 	ldhu	r4,12(r16)
   29894:	80000c15 	stw	zero,48(r16)
   29898:	80c00417 	ldw	r3,16(r16)
   2989c:	00bff6c4 	movi	r2,-37
   298a0:	1108703a 	and	r4,r2,r4
   298a4:	80000115 	stw	zero,4(r16)
   298a8:	80c00015 	stw	r3,0(r16)
   298ac:	003fd506 	br	29804 <__alt_data_end+0xf4029804>
   298b0:	00800244 	movi	r2,9
   298b4:	88800015 	stw	r2,0(r17)
   298b8:	20801014 	ori	r2,r4,64
   298bc:	8080030d 	sth	r2,12(r16)
   298c0:	00bfffc4 	movi	r2,-1
   298c4:	003fc506 	br	297dc <__alt_data_end+0xf40297dc>

000298c8 <quorem>:
   298c8:	defff704 	addi	sp,sp,-36
   298cc:	dc800215 	stw	r18,8(sp)
   298d0:	20800417 	ldw	r2,16(r4)
   298d4:	2c800417 	ldw	r18,16(r5)
   298d8:	dfc00815 	stw	ra,32(sp)
   298dc:	ddc00715 	stw	r23,28(sp)
   298e0:	dd800615 	stw	r22,24(sp)
   298e4:	dd400515 	stw	r21,20(sp)
   298e8:	dd000415 	stw	r20,16(sp)
   298ec:	dcc00315 	stw	r19,12(sp)
   298f0:	dc400115 	stw	r17,4(sp)
   298f4:	dc000015 	stw	r16,0(sp)
   298f8:	14807116 	blt	r2,r18,29ac0 <quorem+0x1f8>
   298fc:	94bfffc4 	addi	r18,r18,-1
   29900:	94ad883a 	add	r22,r18,r18
   29904:	b5ad883a 	add	r22,r22,r22
   29908:	2c400504 	addi	r17,r5,20
   2990c:	8da9883a 	add	r20,r17,r22
   29910:	25400504 	addi	r21,r4,20
   29914:	282f883a 	mov	r23,r5
   29918:	adad883a 	add	r22,r21,r22
   2991c:	a1400017 	ldw	r5,0(r20)
   29920:	2021883a 	mov	r16,r4
   29924:	b1000017 	ldw	r4,0(r22)
   29928:	29400044 	addi	r5,r5,1
   2992c:	00234880 	call	23488 <__udivsi3>
   29930:	1027883a 	mov	r19,r2
   29934:	10002c26 	beq	r2,zero,299e8 <quorem+0x120>
   29938:	a813883a 	mov	r9,r21
   2993c:	880b883a 	mov	r5,r17
   29940:	0009883a 	mov	r4,zero
   29944:	000d883a 	mov	r6,zero
   29948:	2a000017 	ldw	r8,0(r5)
   2994c:	49c00017 	ldw	r7,0(r9)
   29950:	29400104 	addi	r5,r5,4
   29954:	40bfffcc 	andi	r2,r8,65535
   29958:	14c5383a 	mul	r2,r2,r19
   2995c:	4010d43a 	srli	r8,r8,16
   29960:	38ffffcc 	andi	r3,r7,65535
   29964:	1105883a 	add	r2,r2,r4
   29968:	1008d43a 	srli	r4,r2,16
   2996c:	44d1383a 	mul	r8,r8,r19
   29970:	198d883a 	add	r6,r3,r6
   29974:	10ffffcc 	andi	r3,r2,65535
   29978:	30c7c83a 	sub	r3,r6,r3
   2997c:	380ed43a 	srli	r7,r7,16
   29980:	4105883a 	add	r2,r8,r4
   29984:	180dd43a 	srai	r6,r3,16
   29988:	113fffcc 	andi	r4,r2,65535
   2998c:	390fc83a 	sub	r7,r7,r4
   29990:	398d883a 	add	r6,r7,r6
   29994:	300e943a 	slli	r7,r6,16
   29998:	18ffffcc 	andi	r3,r3,65535
   2999c:	1008d43a 	srli	r4,r2,16
   299a0:	38ceb03a 	or	r7,r7,r3
   299a4:	49c00015 	stw	r7,0(r9)
   299a8:	300dd43a 	srai	r6,r6,16
   299ac:	4a400104 	addi	r9,r9,4
   299b0:	a17fe52e 	bgeu	r20,r5,29948 <__alt_data_end+0xf4029948>
   299b4:	b0800017 	ldw	r2,0(r22)
   299b8:	10000b1e 	bne	r2,zero,299e8 <quorem+0x120>
   299bc:	b0bfff04 	addi	r2,r22,-4
   299c0:	a880082e 	bgeu	r21,r2,299e4 <quorem+0x11c>
   299c4:	b0ffff17 	ldw	r3,-4(r22)
   299c8:	18000326 	beq	r3,zero,299d8 <quorem+0x110>
   299cc:	00000506 	br	299e4 <quorem+0x11c>
   299d0:	10c00017 	ldw	r3,0(r2)
   299d4:	1800031e 	bne	r3,zero,299e4 <quorem+0x11c>
   299d8:	10bfff04 	addi	r2,r2,-4
   299dc:	94bfffc4 	addi	r18,r18,-1
   299e0:	a8bffb36 	bltu	r21,r2,299d0 <__alt_data_end+0xf40299d0>
   299e4:	84800415 	stw	r18,16(r16)
   299e8:	b80b883a 	mov	r5,r23
   299ec:	8009883a 	mov	r4,r16
   299f0:	002da2c0 	call	2da2c <__mcmp>
   299f4:	10002616 	blt	r2,zero,29a90 <quorem+0x1c8>
   299f8:	9cc00044 	addi	r19,r19,1
   299fc:	a805883a 	mov	r2,r21
   29a00:	000b883a 	mov	r5,zero
   29a04:	11000017 	ldw	r4,0(r2)
   29a08:	89800017 	ldw	r6,0(r17)
   29a0c:	10800104 	addi	r2,r2,4
   29a10:	20ffffcc 	andi	r3,r4,65535
   29a14:	194b883a 	add	r5,r3,r5
   29a18:	30ffffcc 	andi	r3,r6,65535
   29a1c:	28c7c83a 	sub	r3,r5,r3
   29a20:	300cd43a 	srli	r6,r6,16
   29a24:	2008d43a 	srli	r4,r4,16
   29a28:	180bd43a 	srai	r5,r3,16
   29a2c:	18ffffcc 	andi	r3,r3,65535
   29a30:	2189c83a 	sub	r4,r4,r6
   29a34:	2149883a 	add	r4,r4,r5
   29a38:	200c943a 	slli	r6,r4,16
   29a3c:	8c400104 	addi	r17,r17,4
   29a40:	200bd43a 	srai	r5,r4,16
   29a44:	30c6b03a 	or	r3,r6,r3
   29a48:	10ffff15 	stw	r3,-4(r2)
   29a4c:	a47fed2e 	bgeu	r20,r17,29a04 <__alt_data_end+0xf4029a04>
   29a50:	9485883a 	add	r2,r18,r18
   29a54:	1085883a 	add	r2,r2,r2
   29a58:	a887883a 	add	r3,r21,r2
   29a5c:	18800017 	ldw	r2,0(r3)
   29a60:	10000b1e 	bne	r2,zero,29a90 <quorem+0x1c8>
   29a64:	18bfff04 	addi	r2,r3,-4
   29a68:	a880082e 	bgeu	r21,r2,29a8c <quorem+0x1c4>
   29a6c:	18ffff17 	ldw	r3,-4(r3)
   29a70:	18000326 	beq	r3,zero,29a80 <quorem+0x1b8>
   29a74:	00000506 	br	29a8c <quorem+0x1c4>
   29a78:	10c00017 	ldw	r3,0(r2)
   29a7c:	1800031e 	bne	r3,zero,29a8c <quorem+0x1c4>
   29a80:	10bfff04 	addi	r2,r2,-4
   29a84:	94bfffc4 	addi	r18,r18,-1
   29a88:	a8bffb36 	bltu	r21,r2,29a78 <__alt_data_end+0xf4029a78>
   29a8c:	84800415 	stw	r18,16(r16)
   29a90:	9805883a 	mov	r2,r19
   29a94:	dfc00817 	ldw	ra,32(sp)
   29a98:	ddc00717 	ldw	r23,28(sp)
   29a9c:	dd800617 	ldw	r22,24(sp)
   29aa0:	dd400517 	ldw	r21,20(sp)
   29aa4:	dd000417 	ldw	r20,16(sp)
   29aa8:	dcc00317 	ldw	r19,12(sp)
   29aac:	dc800217 	ldw	r18,8(sp)
   29ab0:	dc400117 	ldw	r17,4(sp)
   29ab4:	dc000017 	ldw	r16,0(sp)
   29ab8:	dec00904 	addi	sp,sp,36
   29abc:	f800283a 	ret
   29ac0:	0005883a 	mov	r2,zero
   29ac4:	003ff306 	br	29a94 <__alt_data_end+0xf4029a94>

00029ac8 <_dtoa_r>:
   29ac8:	20801017 	ldw	r2,64(r4)
   29acc:	deffde04 	addi	sp,sp,-136
   29ad0:	df002015 	stw	fp,128(sp)
   29ad4:	dcc01b15 	stw	r19,108(sp)
   29ad8:	dc801a15 	stw	r18,104(sp)
   29adc:	dc401915 	stw	r17,100(sp)
   29ae0:	dc001815 	stw	r16,96(sp)
   29ae4:	dfc02115 	stw	ra,132(sp)
   29ae8:	ddc01f15 	stw	r23,124(sp)
   29aec:	dd801e15 	stw	r22,120(sp)
   29af0:	dd401d15 	stw	r21,116(sp)
   29af4:	dd001c15 	stw	r20,112(sp)
   29af8:	d9c00315 	stw	r7,12(sp)
   29afc:	2039883a 	mov	fp,r4
   29b00:	3023883a 	mov	r17,r6
   29b04:	2825883a 	mov	r18,r5
   29b08:	dc002417 	ldw	r16,144(sp)
   29b0c:	3027883a 	mov	r19,r6
   29b10:	10000826 	beq	r2,zero,29b34 <_dtoa_r+0x6c>
   29b14:	21801117 	ldw	r6,68(r4)
   29b18:	00c00044 	movi	r3,1
   29b1c:	100b883a 	mov	r5,r2
   29b20:	1986983a 	sll	r3,r3,r6
   29b24:	11800115 	stw	r6,4(r2)
   29b28:	10c00215 	stw	r3,8(r2)
   29b2c:	002d20c0 	call	2d20c <_Bfree>
   29b30:	e0001015 	stw	zero,64(fp)
   29b34:	88002e16 	blt	r17,zero,29bf0 <_dtoa_r+0x128>
   29b38:	80000015 	stw	zero,0(r16)
   29b3c:	889ffc2c 	andhi	r2,r17,32752
   29b40:	00dffc34 	movhi	r3,32752
   29b44:	10c01c26 	beq	r2,r3,29bb8 <_dtoa_r+0xf0>
   29b48:	000d883a 	mov	r6,zero
   29b4c:	000f883a 	mov	r7,zero
   29b50:	9009883a 	mov	r4,r18
   29b54:	980b883a 	mov	r5,r19
   29b58:	0025bd80 	call	25bd8 <__eqdf2>
   29b5c:	10002b1e 	bne	r2,zero,29c0c <_dtoa_r+0x144>
   29b60:	d9c02317 	ldw	r7,140(sp)
   29b64:	00800044 	movi	r2,1
   29b68:	38800015 	stw	r2,0(r7)
   29b6c:	d8802517 	ldw	r2,148(sp)
   29b70:	10019e26 	beq	r2,zero,2a1ec <_dtoa_r+0x724>
   29b74:	d8c02517 	ldw	r3,148(sp)
   29b78:	008000f4 	movhi	r2,3
   29b7c:	10972644 	addi	r2,r2,23705
   29b80:	18800015 	stw	r2,0(r3)
   29b84:	10bfffc4 	addi	r2,r2,-1
   29b88:	dfc02117 	ldw	ra,132(sp)
   29b8c:	df002017 	ldw	fp,128(sp)
   29b90:	ddc01f17 	ldw	r23,124(sp)
   29b94:	dd801e17 	ldw	r22,120(sp)
   29b98:	dd401d17 	ldw	r21,116(sp)
   29b9c:	dd001c17 	ldw	r20,112(sp)
   29ba0:	dcc01b17 	ldw	r19,108(sp)
   29ba4:	dc801a17 	ldw	r18,104(sp)
   29ba8:	dc401917 	ldw	r17,100(sp)
   29bac:	dc001817 	ldw	r16,96(sp)
   29bb0:	dec02204 	addi	sp,sp,136
   29bb4:	f800283a 	ret
   29bb8:	d8c02317 	ldw	r3,140(sp)
   29bbc:	0089c3c4 	movi	r2,9999
   29bc0:	18800015 	stw	r2,0(r3)
   29bc4:	90017726 	beq	r18,zero,2a1a4 <_dtoa_r+0x6dc>
   29bc8:	008000f4 	movhi	r2,3
   29bcc:	10973204 	addi	r2,r2,23752
   29bd0:	d9002517 	ldw	r4,148(sp)
   29bd4:	203fec26 	beq	r4,zero,29b88 <__alt_data_end+0xf4029b88>
   29bd8:	10c000c7 	ldb	r3,3(r2)
   29bdc:	1801781e 	bne	r3,zero,2a1c0 <_dtoa_r+0x6f8>
   29be0:	10c000c4 	addi	r3,r2,3
   29be4:	d9802517 	ldw	r6,148(sp)
   29be8:	30c00015 	stw	r3,0(r6)
   29bec:	003fe606 	br	29b88 <__alt_data_end+0xf4029b88>
   29bf0:	04e00034 	movhi	r19,32768
   29bf4:	9cffffc4 	addi	r19,r19,-1
   29bf8:	00800044 	movi	r2,1
   29bfc:	8ce6703a 	and	r19,r17,r19
   29c00:	80800015 	stw	r2,0(r16)
   29c04:	9823883a 	mov	r17,r19
   29c08:	003fcc06 	br	29b3c <__alt_data_end+0xf4029b3c>
   29c0c:	d8800204 	addi	r2,sp,8
   29c10:	d8800015 	stw	r2,0(sp)
   29c14:	d9c00104 	addi	r7,sp,4
   29c18:	900b883a 	mov	r5,r18
   29c1c:	980d883a 	mov	r6,r19
   29c20:	e009883a 	mov	r4,fp
   29c24:	8820d53a 	srli	r16,r17,20
   29c28:	002ddf80 	call	2ddf8 <__d2b>
   29c2c:	d8800915 	stw	r2,36(sp)
   29c30:	8001651e 	bne	r16,zero,2a1c8 <_dtoa_r+0x700>
   29c34:	dd800217 	ldw	r22,8(sp)
   29c38:	dc000117 	ldw	r16,4(sp)
   29c3c:	00800804 	movi	r2,32
   29c40:	b421883a 	add	r16,r22,r16
   29c44:	80c10c84 	addi	r3,r16,1074
   29c48:	10c2d10e 	bge	r2,r3,2a790 <_dtoa_r+0xcc8>
   29c4c:	00801004 	movi	r2,64
   29c50:	81010484 	addi	r4,r16,1042
   29c54:	10c7c83a 	sub	r3,r2,r3
   29c58:	9108d83a 	srl	r4,r18,r4
   29c5c:	88e2983a 	sll	r17,r17,r3
   29c60:	2448b03a 	or	r4,r4,r17
   29c64:	003135c0 	call	3135c <__floatunsidf>
   29c68:	017f8434 	movhi	r5,65040
   29c6c:	01800044 	movi	r6,1
   29c70:	1009883a 	mov	r4,r2
   29c74:	194b883a 	add	r5,r3,r5
   29c78:	843fffc4 	addi	r16,r16,-1
   29c7c:	d9801115 	stw	r6,68(sp)
   29c80:	000d883a 	mov	r6,zero
   29c84:	01cffe34 	movhi	r7,16376
   29c88:	00265480 	call	26548 <__subdf3>
   29c8c:	0198dbf4 	movhi	r6,25455
   29c90:	01cff4f4 	movhi	r7,16339
   29c94:	3190d844 	addi	r6,r6,17249
   29c98:	39e1e9c4 	addi	r7,r7,-30809
   29c9c:	1009883a 	mov	r4,r2
   29ca0:	180b883a 	mov	r5,r3
   29ca4:	0025e300 	call	25e30 <__muldf3>
   29ca8:	01a2d874 	movhi	r6,35681
   29cac:	01cff1f4 	movhi	r7,16327
   29cb0:	31b22cc4 	addi	r6,r6,-14157
   29cb4:	39e28a04 	addi	r7,r7,-30168
   29cb8:	180b883a 	mov	r5,r3
   29cbc:	1009883a 	mov	r4,r2
   29cc0:	0024a440 	call	24a44 <__adddf3>
   29cc4:	8009883a 	mov	r4,r16
   29cc8:	1029883a 	mov	r20,r2
   29ccc:	1823883a 	mov	r17,r3
   29cd0:	0026ec40 	call	26ec4 <__floatsidf>
   29cd4:	019427f4 	movhi	r6,20639
   29cd8:	01cff4f4 	movhi	r7,16339
   29cdc:	319e7ec4 	addi	r6,r6,31227
   29ce0:	39d104c4 	addi	r7,r7,17427
   29ce4:	1009883a 	mov	r4,r2
   29ce8:	180b883a 	mov	r5,r3
   29cec:	0025e300 	call	25e30 <__muldf3>
   29cf0:	100d883a 	mov	r6,r2
   29cf4:	180f883a 	mov	r7,r3
   29cf8:	a009883a 	mov	r4,r20
   29cfc:	880b883a 	mov	r5,r17
   29d00:	0024a440 	call	24a44 <__adddf3>
   29d04:	1009883a 	mov	r4,r2
   29d08:	180b883a 	mov	r5,r3
   29d0c:	1029883a 	mov	r20,r2
   29d10:	1823883a 	mov	r17,r3
   29d14:	0026e440 	call	26e44 <__fixdfsi>
   29d18:	000d883a 	mov	r6,zero
   29d1c:	000f883a 	mov	r7,zero
   29d20:	a009883a 	mov	r4,r20
   29d24:	880b883a 	mov	r5,r17
   29d28:	d8800515 	stw	r2,20(sp)
   29d2c:	0025d3c0 	call	25d3c <__ledf2>
   29d30:	10028716 	blt	r2,zero,2a750 <_dtoa_r+0xc88>
   29d34:	d8c00517 	ldw	r3,20(sp)
   29d38:	00800584 	movi	r2,22
   29d3c:	10c27536 	bltu	r2,r3,2a714 <_dtoa_r+0xc4c>
   29d40:	180490fa 	slli	r2,r3,3
   29d44:	00c000f4 	movhi	r3,3
   29d48:	18d74d04 	addi	r3,r3,23860
   29d4c:	1885883a 	add	r2,r3,r2
   29d50:	11000017 	ldw	r4,0(r2)
   29d54:	11400117 	ldw	r5,4(r2)
   29d58:	900d883a 	mov	r6,r18
   29d5c:	980f883a 	mov	r7,r19
   29d60:	0025c600 	call	25c60 <__gedf2>
   29d64:	00828d0e 	bge	zero,r2,2a79c <_dtoa_r+0xcd4>
   29d68:	d9000517 	ldw	r4,20(sp)
   29d6c:	d8000e15 	stw	zero,56(sp)
   29d70:	213fffc4 	addi	r4,r4,-1
   29d74:	d9000515 	stw	r4,20(sp)
   29d78:	b42dc83a 	sub	r22,r22,r16
   29d7c:	b5bfffc4 	addi	r22,r22,-1
   29d80:	b0026f16 	blt	r22,zero,2a740 <_dtoa_r+0xc78>
   29d84:	d8000815 	stw	zero,32(sp)
   29d88:	d9c00517 	ldw	r7,20(sp)
   29d8c:	38026416 	blt	r7,zero,2a720 <_dtoa_r+0xc58>
   29d90:	b1ed883a 	add	r22,r22,r7
   29d94:	d9c00d15 	stw	r7,52(sp)
   29d98:	d8000a15 	stw	zero,40(sp)
   29d9c:	d9800317 	ldw	r6,12(sp)
   29da0:	00800244 	movi	r2,9
   29da4:	11811436 	bltu	r2,r6,2a1f8 <_dtoa_r+0x730>
   29da8:	00800144 	movi	r2,5
   29dac:	1184e10e 	bge	r2,r6,2b134 <_dtoa_r+0x166c>
   29db0:	31bfff04 	addi	r6,r6,-4
   29db4:	d9800315 	stw	r6,12(sp)
   29db8:	0023883a 	mov	r17,zero
   29dbc:	d9800317 	ldw	r6,12(sp)
   29dc0:	008000c4 	movi	r2,3
   29dc4:	30836726 	beq	r6,r2,2ab64 <_dtoa_r+0x109c>
   29dc8:	1183410e 	bge	r2,r6,2aad0 <_dtoa_r+0x1008>
   29dcc:	d9c00317 	ldw	r7,12(sp)
   29dd0:	00800104 	movi	r2,4
   29dd4:	38827c26 	beq	r7,r2,2a7c8 <_dtoa_r+0xd00>
   29dd8:	00800144 	movi	r2,5
   29ddc:	3884c41e 	bne	r7,r2,2b0f0 <_dtoa_r+0x1628>
   29de0:	00800044 	movi	r2,1
   29de4:	d8800b15 	stw	r2,44(sp)
   29de8:	d8c00517 	ldw	r3,20(sp)
   29dec:	d9002217 	ldw	r4,136(sp)
   29df0:	1907883a 	add	r3,r3,r4
   29df4:	19800044 	addi	r6,r3,1
   29df8:	d8c00c15 	stw	r3,48(sp)
   29dfc:	d9800615 	stw	r6,24(sp)
   29e00:	0183a40e 	bge	zero,r6,2ac94 <_dtoa_r+0x11cc>
   29e04:	d9800617 	ldw	r6,24(sp)
   29e08:	3021883a 	mov	r16,r6
   29e0c:	e0001115 	stw	zero,68(fp)
   29e10:	008005c4 	movi	r2,23
   29e14:	1184c92e 	bgeu	r2,r6,2b13c <_dtoa_r+0x1674>
   29e18:	00c00044 	movi	r3,1
   29e1c:	00800104 	movi	r2,4
   29e20:	1085883a 	add	r2,r2,r2
   29e24:	11000504 	addi	r4,r2,20
   29e28:	180b883a 	mov	r5,r3
   29e2c:	18c00044 	addi	r3,r3,1
   29e30:	313ffb2e 	bgeu	r6,r4,29e20 <__alt_data_end+0xf4029e20>
   29e34:	e1401115 	stw	r5,68(fp)
   29e38:	e009883a 	mov	r4,fp
   29e3c:	002d1640 	call	2d164 <_Balloc>
   29e40:	d8800715 	stw	r2,28(sp)
   29e44:	e0801015 	stw	r2,64(fp)
   29e48:	00800384 	movi	r2,14
   29e4c:	1400f736 	bltu	r2,r16,2a22c <_dtoa_r+0x764>
   29e50:	8800f626 	beq	r17,zero,2a22c <_dtoa_r+0x764>
   29e54:	d9c00517 	ldw	r7,20(sp)
   29e58:	01c39a0e 	bge	zero,r7,2acc4 <_dtoa_r+0x11fc>
   29e5c:	388003cc 	andi	r2,r7,15
   29e60:	100490fa 	slli	r2,r2,3
   29e64:	382bd13a 	srai	r21,r7,4
   29e68:	00c000f4 	movhi	r3,3
   29e6c:	18d74d04 	addi	r3,r3,23860
   29e70:	1885883a 	add	r2,r3,r2
   29e74:	a8c0040c 	andi	r3,r21,16
   29e78:	12400017 	ldw	r9,0(r2)
   29e7c:	12000117 	ldw	r8,4(r2)
   29e80:	18037926 	beq	r3,zero,2ac68 <_dtoa_r+0x11a0>
   29e84:	008000f4 	movhi	r2,3
   29e88:	10974304 	addi	r2,r2,23820
   29e8c:	11800817 	ldw	r6,32(r2)
   29e90:	11c00917 	ldw	r7,36(r2)
   29e94:	9009883a 	mov	r4,r18
   29e98:	980b883a 	mov	r5,r19
   29e9c:	da001715 	stw	r8,92(sp)
   29ea0:	da401615 	stw	r9,88(sp)
   29ea4:	00252f00 	call	252f0 <__divdf3>
   29ea8:	da001717 	ldw	r8,92(sp)
   29eac:	da401617 	ldw	r9,88(sp)
   29eb0:	ad4003cc 	andi	r21,r21,15
   29eb4:	040000c4 	movi	r16,3
   29eb8:	1023883a 	mov	r17,r2
   29ebc:	1829883a 	mov	r20,r3
   29ec0:	a8001126 	beq	r21,zero,29f08 <_dtoa_r+0x440>
   29ec4:	05c000f4 	movhi	r23,3
   29ec8:	bdd74304 	addi	r23,r23,23820
   29ecc:	4805883a 	mov	r2,r9
   29ed0:	4007883a 	mov	r3,r8
   29ed4:	a980004c 	andi	r6,r21,1
   29ed8:	1009883a 	mov	r4,r2
   29edc:	a82bd07a 	srai	r21,r21,1
   29ee0:	180b883a 	mov	r5,r3
   29ee4:	30000426 	beq	r6,zero,29ef8 <_dtoa_r+0x430>
   29ee8:	b9800017 	ldw	r6,0(r23)
   29eec:	b9c00117 	ldw	r7,4(r23)
   29ef0:	84000044 	addi	r16,r16,1
   29ef4:	0025e300 	call	25e30 <__muldf3>
   29ef8:	bdc00204 	addi	r23,r23,8
   29efc:	a83ff51e 	bne	r21,zero,29ed4 <__alt_data_end+0xf4029ed4>
   29f00:	1013883a 	mov	r9,r2
   29f04:	1811883a 	mov	r8,r3
   29f08:	480d883a 	mov	r6,r9
   29f0c:	400f883a 	mov	r7,r8
   29f10:	8809883a 	mov	r4,r17
   29f14:	a00b883a 	mov	r5,r20
   29f18:	00252f00 	call	252f0 <__divdf3>
   29f1c:	d8800f15 	stw	r2,60(sp)
   29f20:	d8c01015 	stw	r3,64(sp)
   29f24:	d8c00e17 	ldw	r3,56(sp)
   29f28:	18000626 	beq	r3,zero,29f44 <_dtoa_r+0x47c>
   29f2c:	d9000f17 	ldw	r4,60(sp)
   29f30:	d9401017 	ldw	r5,64(sp)
   29f34:	000d883a 	mov	r6,zero
   29f38:	01cffc34 	movhi	r7,16368
   29f3c:	0025d3c0 	call	25d3c <__ledf2>
   29f40:	10040b16 	blt	r2,zero,2af70 <_dtoa_r+0x14a8>
   29f44:	8009883a 	mov	r4,r16
   29f48:	0026ec40 	call	26ec4 <__floatsidf>
   29f4c:	d9800f17 	ldw	r6,60(sp)
   29f50:	d9c01017 	ldw	r7,64(sp)
   29f54:	1009883a 	mov	r4,r2
   29f58:	180b883a 	mov	r5,r3
   29f5c:	0025e300 	call	25e30 <__muldf3>
   29f60:	000d883a 	mov	r6,zero
   29f64:	01d00734 	movhi	r7,16412
   29f68:	1009883a 	mov	r4,r2
   29f6c:	180b883a 	mov	r5,r3
   29f70:	0024a440 	call	24a44 <__adddf3>
   29f74:	1021883a 	mov	r16,r2
   29f78:	d8800617 	ldw	r2,24(sp)
   29f7c:	047f3034 	movhi	r17,64704
   29f80:	1c63883a 	add	r17,r3,r17
   29f84:	10031826 	beq	r2,zero,2abe8 <_dtoa_r+0x1120>
   29f88:	d8c00517 	ldw	r3,20(sp)
   29f8c:	db000617 	ldw	r12,24(sp)
   29f90:	d8c01315 	stw	r3,76(sp)
   29f94:	d9000b17 	ldw	r4,44(sp)
   29f98:	20038f26 	beq	r4,zero,2add8 <_dtoa_r+0x1310>
   29f9c:	60bfffc4 	addi	r2,r12,-1
   29fa0:	100490fa 	slli	r2,r2,3
   29fa4:	00c000f4 	movhi	r3,3
   29fa8:	18d74d04 	addi	r3,r3,23860
   29fac:	1885883a 	add	r2,r3,r2
   29fb0:	11800017 	ldw	r6,0(r2)
   29fb4:	11c00117 	ldw	r7,4(r2)
   29fb8:	d8800717 	ldw	r2,28(sp)
   29fbc:	0009883a 	mov	r4,zero
   29fc0:	014ff834 	movhi	r5,16352
   29fc4:	db001615 	stw	r12,88(sp)
   29fc8:	15c00044 	addi	r23,r2,1
   29fcc:	00252f00 	call	252f0 <__divdf3>
   29fd0:	800d883a 	mov	r6,r16
   29fd4:	880f883a 	mov	r7,r17
   29fd8:	1009883a 	mov	r4,r2
   29fdc:	180b883a 	mov	r5,r3
   29fe0:	00265480 	call	26548 <__subdf3>
   29fe4:	d9401017 	ldw	r5,64(sp)
   29fe8:	d9000f17 	ldw	r4,60(sp)
   29fec:	102b883a 	mov	r21,r2
   29ff0:	d8c01215 	stw	r3,72(sp)
   29ff4:	0026e440 	call	26e44 <__fixdfsi>
   29ff8:	1009883a 	mov	r4,r2
   29ffc:	1029883a 	mov	r20,r2
   2a000:	0026ec40 	call	26ec4 <__floatsidf>
   2a004:	d9000f17 	ldw	r4,60(sp)
   2a008:	d9401017 	ldw	r5,64(sp)
   2a00c:	100d883a 	mov	r6,r2
   2a010:	180f883a 	mov	r7,r3
   2a014:	00265480 	call	26548 <__subdf3>
   2a018:	1823883a 	mov	r17,r3
   2a01c:	d8c00717 	ldw	r3,28(sp)
   2a020:	d9401217 	ldw	r5,72(sp)
   2a024:	a2000c04 	addi	r8,r20,48
   2a028:	1021883a 	mov	r16,r2
   2a02c:	1a000005 	stb	r8,0(r3)
   2a030:	800d883a 	mov	r6,r16
   2a034:	880f883a 	mov	r7,r17
   2a038:	a809883a 	mov	r4,r21
   2a03c:	4029883a 	mov	r20,r8
   2a040:	0025c600 	call	25c60 <__gedf2>
   2a044:	00841d16 	blt	zero,r2,2b0bc <_dtoa_r+0x15f4>
   2a048:	800d883a 	mov	r6,r16
   2a04c:	880f883a 	mov	r7,r17
   2a050:	0009883a 	mov	r4,zero
   2a054:	014ffc34 	movhi	r5,16368
   2a058:	00265480 	call	26548 <__subdf3>
   2a05c:	d9401217 	ldw	r5,72(sp)
   2a060:	100d883a 	mov	r6,r2
   2a064:	180f883a 	mov	r7,r3
   2a068:	a809883a 	mov	r4,r21
   2a06c:	0025c600 	call	25c60 <__gedf2>
   2a070:	db001617 	ldw	r12,88(sp)
   2a074:	00840e16 	blt	zero,r2,2b0b0 <_dtoa_r+0x15e8>
   2a078:	00800044 	movi	r2,1
   2a07c:	13006b0e 	bge	r2,r12,2a22c <_dtoa_r+0x764>
   2a080:	d9000717 	ldw	r4,28(sp)
   2a084:	dd800f15 	stw	r22,60(sp)
   2a088:	dcc01015 	stw	r19,64(sp)
   2a08c:	2319883a 	add	r12,r4,r12
   2a090:	dcc01217 	ldw	r19,72(sp)
   2a094:	602d883a 	mov	r22,r12
   2a098:	dc801215 	stw	r18,72(sp)
   2a09c:	b825883a 	mov	r18,r23
   2a0a0:	00000906 	br	2a0c8 <_dtoa_r+0x600>
   2a0a4:	00265480 	call	26548 <__subdf3>
   2a0a8:	a80d883a 	mov	r6,r21
   2a0ac:	980f883a 	mov	r7,r19
   2a0b0:	1009883a 	mov	r4,r2
   2a0b4:	180b883a 	mov	r5,r3
   2a0b8:	0025d3c0 	call	25d3c <__ledf2>
   2a0bc:	1003e816 	blt	r2,zero,2b060 <_dtoa_r+0x1598>
   2a0c0:	b825883a 	mov	r18,r23
   2a0c4:	bd83e926 	beq	r23,r22,2b06c <_dtoa_r+0x15a4>
   2a0c8:	a809883a 	mov	r4,r21
   2a0cc:	980b883a 	mov	r5,r19
   2a0d0:	000d883a 	mov	r6,zero
   2a0d4:	01d00934 	movhi	r7,16420
   2a0d8:	0025e300 	call	25e30 <__muldf3>
   2a0dc:	000d883a 	mov	r6,zero
   2a0e0:	01d00934 	movhi	r7,16420
   2a0e4:	8009883a 	mov	r4,r16
   2a0e8:	880b883a 	mov	r5,r17
   2a0ec:	102b883a 	mov	r21,r2
   2a0f0:	1827883a 	mov	r19,r3
   2a0f4:	0025e300 	call	25e30 <__muldf3>
   2a0f8:	180b883a 	mov	r5,r3
   2a0fc:	1009883a 	mov	r4,r2
   2a100:	1821883a 	mov	r16,r3
   2a104:	1023883a 	mov	r17,r2
   2a108:	0026e440 	call	26e44 <__fixdfsi>
   2a10c:	1009883a 	mov	r4,r2
   2a110:	1029883a 	mov	r20,r2
   2a114:	0026ec40 	call	26ec4 <__floatsidf>
   2a118:	8809883a 	mov	r4,r17
   2a11c:	800b883a 	mov	r5,r16
   2a120:	100d883a 	mov	r6,r2
   2a124:	180f883a 	mov	r7,r3
   2a128:	00265480 	call	26548 <__subdf3>
   2a12c:	a5000c04 	addi	r20,r20,48
   2a130:	a80d883a 	mov	r6,r21
   2a134:	980f883a 	mov	r7,r19
   2a138:	1009883a 	mov	r4,r2
   2a13c:	180b883a 	mov	r5,r3
   2a140:	95000005 	stb	r20,0(r18)
   2a144:	1021883a 	mov	r16,r2
   2a148:	1823883a 	mov	r17,r3
   2a14c:	0025d3c0 	call	25d3c <__ledf2>
   2a150:	bdc00044 	addi	r23,r23,1
   2a154:	800d883a 	mov	r6,r16
   2a158:	880f883a 	mov	r7,r17
   2a15c:	0009883a 	mov	r4,zero
   2a160:	014ffc34 	movhi	r5,16368
   2a164:	103fcf0e 	bge	r2,zero,2a0a4 <__alt_data_end+0xf402a0a4>
   2a168:	d8c01317 	ldw	r3,76(sp)
   2a16c:	d8c00515 	stw	r3,20(sp)
   2a170:	d9400917 	ldw	r5,36(sp)
   2a174:	e009883a 	mov	r4,fp
   2a178:	002d20c0 	call	2d20c <_Bfree>
   2a17c:	d9000517 	ldw	r4,20(sp)
   2a180:	d9802317 	ldw	r6,140(sp)
   2a184:	d9c02517 	ldw	r7,148(sp)
   2a188:	b8000005 	stb	zero,0(r23)
   2a18c:	20800044 	addi	r2,r4,1
   2a190:	30800015 	stw	r2,0(r6)
   2a194:	3802aa26 	beq	r7,zero,2ac40 <_dtoa_r+0x1178>
   2a198:	3dc00015 	stw	r23,0(r7)
   2a19c:	d8800717 	ldw	r2,28(sp)
   2a1a0:	003e7906 	br	29b88 <__alt_data_end+0xf4029b88>
   2a1a4:	00800434 	movhi	r2,16
   2a1a8:	10bfffc4 	addi	r2,r2,-1
   2a1ac:	88a2703a 	and	r17,r17,r2
   2a1b0:	883e851e 	bne	r17,zero,29bc8 <__alt_data_end+0xf4029bc8>
   2a1b4:	008000f4 	movhi	r2,3
   2a1b8:	10972f04 	addi	r2,r2,23740
   2a1bc:	003e8406 	br	29bd0 <__alt_data_end+0xf4029bd0>
   2a1c0:	10c00204 	addi	r3,r2,8
   2a1c4:	003e8706 	br	29be4 <__alt_data_end+0xf4029be4>
   2a1c8:	01400434 	movhi	r5,16
   2a1cc:	297fffc4 	addi	r5,r5,-1
   2a1d0:	994a703a 	and	r5,r19,r5
   2a1d4:	9009883a 	mov	r4,r18
   2a1d8:	843f0044 	addi	r16,r16,-1023
   2a1dc:	294ffc34 	orhi	r5,r5,16368
   2a1e0:	dd800217 	ldw	r22,8(sp)
   2a1e4:	d8001115 	stw	zero,68(sp)
   2a1e8:	003ea506 	br	29c80 <__alt_data_end+0xf4029c80>
   2a1ec:	008000f4 	movhi	r2,3
   2a1f0:	10972604 	addi	r2,r2,23704
   2a1f4:	003e6406 	br	29b88 <__alt_data_end+0xf4029b88>
   2a1f8:	e0001115 	stw	zero,68(fp)
   2a1fc:	000b883a 	mov	r5,zero
   2a200:	e009883a 	mov	r4,fp
   2a204:	002d1640 	call	2d164 <_Balloc>
   2a208:	01bfffc4 	movi	r6,-1
   2a20c:	01c00044 	movi	r7,1
   2a210:	d8800715 	stw	r2,28(sp)
   2a214:	d9800c15 	stw	r6,48(sp)
   2a218:	e0801015 	stw	r2,64(fp)
   2a21c:	d8000315 	stw	zero,12(sp)
   2a220:	d9c00b15 	stw	r7,44(sp)
   2a224:	d9800615 	stw	r6,24(sp)
   2a228:	d8002215 	stw	zero,136(sp)
   2a22c:	d8800117 	ldw	r2,4(sp)
   2a230:	10008916 	blt	r2,zero,2a458 <_dtoa_r+0x990>
   2a234:	d9000517 	ldw	r4,20(sp)
   2a238:	00c00384 	movi	r3,14
   2a23c:	19008616 	blt	r3,r4,2a458 <_dtoa_r+0x990>
   2a240:	200490fa 	slli	r2,r4,3
   2a244:	00c000f4 	movhi	r3,3
   2a248:	d9802217 	ldw	r6,136(sp)
   2a24c:	18d74d04 	addi	r3,r3,23860
   2a250:	1885883a 	add	r2,r3,r2
   2a254:	14000017 	ldw	r16,0(r2)
   2a258:	14400117 	ldw	r17,4(r2)
   2a25c:	30016316 	blt	r6,zero,2a7ec <_dtoa_r+0xd24>
   2a260:	800d883a 	mov	r6,r16
   2a264:	880f883a 	mov	r7,r17
   2a268:	9009883a 	mov	r4,r18
   2a26c:	980b883a 	mov	r5,r19
   2a270:	00252f00 	call	252f0 <__divdf3>
   2a274:	180b883a 	mov	r5,r3
   2a278:	1009883a 	mov	r4,r2
   2a27c:	0026e440 	call	26e44 <__fixdfsi>
   2a280:	1009883a 	mov	r4,r2
   2a284:	102b883a 	mov	r21,r2
   2a288:	0026ec40 	call	26ec4 <__floatsidf>
   2a28c:	800d883a 	mov	r6,r16
   2a290:	880f883a 	mov	r7,r17
   2a294:	1009883a 	mov	r4,r2
   2a298:	180b883a 	mov	r5,r3
   2a29c:	0025e300 	call	25e30 <__muldf3>
   2a2a0:	100d883a 	mov	r6,r2
   2a2a4:	180f883a 	mov	r7,r3
   2a2a8:	9009883a 	mov	r4,r18
   2a2ac:	980b883a 	mov	r5,r19
   2a2b0:	00265480 	call	26548 <__subdf3>
   2a2b4:	d9c00717 	ldw	r7,28(sp)
   2a2b8:	1009883a 	mov	r4,r2
   2a2bc:	a8800c04 	addi	r2,r21,48
   2a2c0:	38800005 	stb	r2,0(r7)
   2a2c4:	3dc00044 	addi	r23,r7,1
   2a2c8:	d9c00617 	ldw	r7,24(sp)
   2a2cc:	01800044 	movi	r6,1
   2a2d0:	180b883a 	mov	r5,r3
   2a2d4:	2005883a 	mov	r2,r4
   2a2d8:	39803826 	beq	r7,r6,2a3bc <_dtoa_r+0x8f4>
   2a2dc:	000d883a 	mov	r6,zero
   2a2e0:	01d00934 	movhi	r7,16420
   2a2e4:	0025e300 	call	25e30 <__muldf3>
   2a2e8:	000d883a 	mov	r6,zero
   2a2ec:	000f883a 	mov	r7,zero
   2a2f0:	1009883a 	mov	r4,r2
   2a2f4:	180b883a 	mov	r5,r3
   2a2f8:	1025883a 	mov	r18,r2
   2a2fc:	1827883a 	mov	r19,r3
   2a300:	0025bd80 	call	25bd8 <__eqdf2>
   2a304:	103f9a26 	beq	r2,zero,2a170 <__alt_data_end+0xf402a170>
   2a308:	d9c00617 	ldw	r7,24(sp)
   2a30c:	d8c00717 	ldw	r3,28(sp)
   2a310:	b829883a 	mov	r20,r23
   2a314:	38bfffc4 	addi	r2,r7,-1
   2a318:	18ad883a 	add	r22,r3,r2
   2a31c:	00000a06 	br	2a348 <_dtoa_r+0x880>
   2a320:	0025e300 	call	25e30 <__muldf3>
   2a324:	000d883a 	mov	r6,zero
   2a328:	000f883a 	mov	r7,zero
   2a32c:	1009883a 	mov	r4,r2
   2a330:	180b883a 	mov	r5,r3
   2a334:	1025883a 	mov	r18,r2
   2a338:	1827883a 	mov	r19,r3
   2a33c:	b829883a 	mov	r20,r23
   2a340:	0025bd80 	call	25bd8 <__eqdf2>
   2a344:	103f8a26 	beq	r2,zero,2a170 <__alt_data_end+0xf402a170>
   2a348:	800d883a 	mov	r6,r16
   2a34c:	880f883a 	mov	r7,r17
   2a350:	9009883a 	mov	r4,r18
   2a354:	980b883a 	mov	r5,r19
   2a358:	00252f00 	call	252f0 <__divdf3>
   2a35c:	180b883a 	mov	r5,r3
   2a360:	1009883a 	mov	r4,r2
   2a364:	0026e440 	call	26e44 <__fixdfsi>
   2a368:	1009883a 	mov	r4,r2
   2a36c:	102b883a 	mov	r21,r2
   2a370:	0026ec40 	call	26ec4 <__floatsidf>
   2a374:	800d883a 	mov	r6,r16
   2a378:	880f883a 	mov	r7,r17
   2a37c:	1009883a 	mov	r4,r2
   2a380:	180b883a 	mov	r5,r3
   2a384:	0025e300 	call	25e30 <__muldf3>
   2a388:	100d883a 	mov	r6,r2
   2a38c:	180f883a 	mov	r7,r3
   2a390:	9009883a 	mov	r4,r18
   2a394:	980b883a 	mov	r5,r19
   2a398:	00265480 	call	26548 <__subdf3>
   2a39c:	aa000c04 	addi	r8,r21,48
   2a3a0:	a2000005 	stb	r8,0(r20)
   2a3a4:	000d883a 	mov	r6,zero
   2a3a8:	01d00934 	movhi	r7,16420
   2a3ac:	1009883a 	mov	r4,r2
   2a3b0:	180b883a 	mov	r5,r3
   2a3b4:	a5c00044 	addi	r23,r20,1
   2a3b8:	b53fd91e 	bne	r22,r20,2a320 <__alt_data_end+0xf402a320>
   2a3bc:	100d883a 	mov	r6,r2
   2a3c0:	180f883a 	mov	r7,r3
   2a3c4:	1009883a 	mov	r4,r2
   2a3c8:	180b883a 	mov	r5,r3
   2a3cc:	0024a440 	call	24a44 <__adddf3>
   2a3d0:	100d883a 	mov	r6,r2
   2a3d4:	180f883a 	mov	r7,r3
   2a3d8:	8009883a 	mov	r4,r16
   2a3dc:	880b883a 	mov	r5,r17
   2a3e0:	1027883a 	mov	r19,r2
   2a3e4:	1825883a 	mov	r18,r3
   2a3e8:	0025d3c0 	call	25d3c <__ledf2>
   2a3ec:	10000816 	blt	r2,zero,2a410 <_dtoa_r+0x948>
   2a3f0:	980d883a 	mov	r6,r19
   2a3f4:	900f883a 	mov	r7,r18
   2a3f8:	8009883a 	mov	r4,r16
   2a3fc:	880b883a 	mov	r5,r17
   2a400:	0025bd80 	call	25bd8 <__eqdf2>
   2a404:	103f5a1e 	bne	r2,zero,2a170 <__alt_data_end+0xf402a170>
   2a408:	ad40004c 	andi	r21,r21,1
   2a40c:	a83f5826 	beq	r21,zero,2a170 <__alt_data_end+0xf402a170>
   2a410:	bd3fffc3 	ldbu	r20,-1(r23)
   2a414:	b8bfffc4 	addi	r2,r23,-1
   2a418:	1007883a 	mov	r3,r2
   2a41c:	01400e44 	movi	r5,57
   2a420:	d9800717 	ldw	r6,28(sp)
   2a424:	00000506 	br	2a43c <_dtoa_r+0x974>
   2a428:	18ffffc4 	addi	r3,r3,-1
   2a42c:	11824726 	beq	r2,r6,2ad4c <_dtoa_r+0x1284>
   2a430:	1d000003 	ldbu	r20,0(r3)
   2a434:	102f883a 	mov	r23,r2
   2a438:	10bfffc4 	addi	r2,r2,-1
   2a43c:	a1003fcc 	andi	r4,r20,255
   2a440:	2100201c 	xori	r4,r4,128
   2a444:	213fe004 	addi	r4,r4,-128
   2a448:	217ff726 	beq	r4,r5,2a428 <__alt_data_end+0xf402a428>
   2a44c:	a2000044 	addi	r8,r20,1
   2a450:	12000005 	stb	r8,0(r2)
   2a454:	003f4606 	br	2a170 <__alt_data_end+0xf402a170>
   2a458:	d9000b17 	ldw	r4,44(sp)
   2a45c:	2000c826 	beq	r4,zero,2a780 <_dtoa_r+0xcb8>
   2a460:	d9800317 	ldw	r6,12(sp)
   2a464:	00c00044 	movi	r3,1
   2a468:	1980f90e 	bge	r3,r6,2a850 <_dtoa_r+0xd88>
   2a46c:	d8800617 	ldw	r2,24(sp)
   2a470:	d8c00a17 	ldw	r3,40(sp)
   2a474:	157fffc4 	addi	r21,r2,-1
   2a478:	1d41f316 	blt	r3,r21,2ac48 <_dtoa_r+0x1180>
   2a47c:	1d6bc83a 	sub	r21,r3,r21
   2a480:	d9c00617 	ldw	r7,24(sp)
   2a484:	3802aa16 	blt	r7,zero,2af30 <_dtoa_r+0x1468>
   2a488:	dd000817 	ldw	r20,32(sp)
   2a48c:	d8800617 	ldw	r2,24(sp)
   2a490:	d8c00817 	ldw	r3,32(sp)
   2a494:	01400044 	movi	r5,1
   2a498:	e009883a 	mov	r4,fp
   2a49c:	1887883a 	add	r3,r3,r2
   2a4a0:	d8c00815 	stw	r3,32(sp)
   2a4a4:	b0ad883a 	add	r22,r22,r2
   2a4a8:	002d5700 	call	2d570 <__i2b>
   2a4ac:	1023883a 	mov	r17,r2
   2a4b0:	a0000826 	beq	r20,zero,2a4d4 <_dtoa_r+0xa0c>
   2a4b4:	0580070e 	bge	zero,r22,2a4d4 <_dtoa_r+0xa0c>
   2a4b8:	a005883a 	mov	r2,r20
   2a4bc:	b500b916 	blt	r22,r20,2a7a4 <_dtoa_r+0xcdc>
   2a4c0:	d9000817 	ldw	r4,32(sp)
   2a4c4:	a0a9c83a 	sub	r20,r20,r2
   2a4c8:	b0adc83a 	sub	r22,r22,r2
   2a4cc:	2089c83a 	sub	r4,r4,r2
   2a4d0:	d9000815 	stw	r4,32(sp)
   2a4d4:	d9800a17 	ldw	r6,40(sp)
   2a4d8:	0181810e 	bge	zero,r6,2aae0 <_dtoa_r+0x1018>
   2a4dc:	d9c00b17 	ldw	r7,44(sp)
   2a4e0:	3800b326 	beq	r7,zero,2a7b0 <_dtoa_r+0xce8>
   2a4e4:	a800b226 	beq	r21,zero,2a7b0 <_dtoa_r+0xce8>
   2a4e8:	880b883a 	mov	r5,r17
   2a4ec:	a80d883a 	mov	r6,r21
   2a4f0:	e009883a 	mov	r4,fp
   2a4f4:	002d7a40 	call	2d7a4 <__pow5mult>
   2a4f8:	d9800917 	ldw	r6,36(sp)
   2a4fc:	100b883a 	mov	r5,r2
   2a500:	e009883a 	mov	r4,fp
   2a504:	1023883a 	mov	r17,r2
   2a508:	002d5ac0 	call	2d5ac <__multiply>
   2a50c:	1021883a 	mov	r16,r2
   2a510:	d8800a17 	ldw	r2,40(sp)
   2a514:	d9400917 	ldw	r5,36(sp)
   2a518:	e009883a 	mov	r4,fp
   2a51c:	1545c83a 	sub	r2,r2,r21
   2a520:	d8800a15 	stw	r2,40(sp)
   2a524:	002d20c0 	call	2d20c <_Bfree>
   2a528:	d8c00a17 	ldw	r3,40(sp)
   2a52c:	18009f1e 	bne	r3,zero,2a7ac <_dtoa_r+0xce4>
   2a530:	05c00044 	movi	r23,1
   2a534:	e009883a 	mov	r4,fp
   2a538:	b80b883a 	mov	r5,r23
   2a53c:	002d5700 	call	2d570 <__i2b>
   2a540:	d9000d17 	ldw	r4,52(sp)
   2a544:	102b883a 	mov	r21,r2
   2a548:	2000ce26 	beq	r4,zero,2a884 <_dtoa_r+0xdbc>
   2a54c:	200d883a 	mov	r6,r4
   2a550:	100b883a 	mov	r5,r2
   2a554:	e009883a 	mov	r4,fp
   2a558:	002d7a40 	call	2d7a4 <__pow5mult>
   2a55c:	d9800317 	ldw	r6,12(sp)
   2a560:	102b883a 	mov	r21,r2
   2a564:	b981810e 	bge	r23,r6,2ab6c <_dtoa_r+0x10a4>
   2a568:	0027883a 	mov	r19,zero
   2a56c:	a8800417 	ldw	r2,16(r21)
   2a570:	05c00804 	movi	r23,32
   2a574:	10800104 	addi	r2,r2,4
   2a578:	1085883a 	add	r2,r2,r2
   2a57c:	1085883a 	add	r2,r2,r2
   2a580:	a885883a 	add	r2,r21,r2
   2a584:	11000017 	ldw	r4,0(r2)
   2a588:	002d4580 	call	2d458 <__hi0bits>
   2a58c:	b885c83a 	sub	r2,r23,r2
   2a590:	1585883a 	add	r2,r2,r22
   2a594:	108007cc 	andi	r2,r2,31
   2a598:	1000b326 	beq	r2,zero,2a868 <_dtoa_r+0xda0>
   2a59c:	00c00804 	movi	r3,32
   2a5a0:	1887c83a 	sub	r3,r3,r2
   2a5a4:	01000104 	movi	r4,4
   2a5a8:	20c2cd0e 	bge	r4,r3,2b0e0 <_dtoa_r+0x1618>
   2a5ac:	00c00704 	movi	r3,28
   2a5b0:	1885c83a 	sub	r2,r3,r2
   2a5b4:	d8c00817 	ldw	r3,32(sp)
   2a5b8:	a0a9883a 	add	r20,r20,r2
   2a5bc:	b0ad883a 	add	r22,r22,r2
   2a5c0:	1887883a 	add	r3,r3,r2
   2a5c4:	d8c00815 	stw	r3,32(sp)
   2a5c8:	d9800817 	ldw	r6,32(sp)
   2a5cc:	0180040e 	bge	zero,r6,2a5e0 <_dtoa_r+0xb18>
   2a5d0:	800b883a 	mov	r5,r16
   2a5d4:	e009883a 	mov	r4,fp
   2a5d8:	002d8e40 	call	2d8e4 <__lshift>
   2a5dc:	1021883a 	mov	r16,r2
   2a5e0:	0580050e 	bge	zero,r22,2a5f8 <_dtoa_r+0xb30>
   2a5e4:	a80b883a 	mov	r5,r21
   2a5e8:	b00d883a 	mov	r6,r22
   2a5ec:	e009883a 	mov	r4,fp
   2a5f0:	002d8e40 	call	2d8e4 <__lshift>
   2a5f4:	102b883a 	mov	r21,r2
   2a5f8:	d9c00e17 	ldw	r7,56(sp)
   2a5fc:	3801211e 	bne	r7,zero,2aa84 <_dtoa_r+0xfbc>
   2a600:	d9800617 	ldw	r6,24(sp)
   2a604:	0181380e 	bge	zero,r6,2aae8 <_dtoa_r+0x1020>
   2a608:	d8c00b17 	ldw	r3,44(sp)
   2a60c:	1800ab1e 	bne	r3,zero,2a8bc <_dtoa_r+0xdf4>
   2a610:	dc800717 	ldw	r18,28(sp)
   2a614:	dcc00617 	ldw	r19,24(sp)
   2a618:	9029883a 	mov	r20,r18
   2a61c:	00000206 	br	2a628 <_dtoa_r+0xb60>
   2a620:	002d2340 	call	2d234 <__multadd>
   2a624:	1021883a 	mov	r16,r2
   2a628:	a80b883a 	mov	r5,r21
   2a62c:	8009883a 	mov	r4,r16
   2a630:	00298c80 	call	298c8 <quorem>
   2a634:	10800c04 	addi	r2,r2,48
   2a638:	90800005 	stb	r2,0(r18)
   2a63c:	94800044 	addi	r18,r18,1
   2a640:	9507c83a 	sub	r3,r18,r20
   2a644:	000f883a 	mov	r7,zero
   2a648:	01800284 	movi	r6,10
   2a64c:	800b883a 	mov	r5,r16
   2a650:	e009883a 	mov	r4,fp
   2a654:	1cfff216 	blt	r3,r19,2a620 <__alt_data_end+0xf402a620>
   2a658:	1011883a 	mov	r8,r2
   2a65c:	d8800617 	ldw	r2,24(sp)
   2a660:	0082370e 	bge	zero,r2,2af40 <_dtoa_r+0x1478>
   2a664:	d9000717 	ldw	r4,28(sp)
   2a668:	0025883a 	mov	r18,zero
   2a66c:	20af883a 	add	r23,r4,r2
   2a670:	01800044 	movi	r6,1
   2a674:	800b883a 	mov	r5,r16
   2a678:	e009883a 	mov	r4,fp
   2a67c:	da001715 	stw	r8,92(sp)
   2a680:	002d8e40 	call	2d8e4 <__lshift>
   2a684:	a80b883a 	mov	r5,r21
   2a688:	1009883a 	mov	r4,r2
   2a68c:	d8800915 	stw	r2,36(sp)
   2a690:	002da2c0 	call	2da2c <__mcmp>
   2a694:	da001717 	ldw	r8,92(sp)
   2a698:	0081800e 	bge	zero,r2,2ac9c <_dtoa_r+0x11d4>
   2a69c:	b93fffc3 	ldbu	r4,-1(r23)
   2a6a0:	b8bfffc4 	addi	r2,r23,-1
   2a6a4:	1007883a 	mov	r3,r2
   2a6a8:	01800e44 	movi	r6,57
   2a6ac:	d9c00717 	ldw	r7,28(sp)
   2a6b0:	00000506 	br	2a6c8 <_dtoa_r+0xc00>
   2a6b4:	18ffffc4 	addi	r3,r3,-1
   2a6b8:	11c12326 	beq	r2,r7,2ab48 <_dtoa_r+0x1080>
   2a6bc:	19000003 	ldbu	r4,0(r3)
   2a6c0:	102f883a 	mov	r23,r2
   2a6c4:	10bfffc4 	addi	r2,r2,-1
   2a6c8:	21403fcc 	andi	r5,r4,255
   2a6cc:	2940201c 	xori	r5,r5,128
   2a6d0:	297fe004 	addi	r5,r5,-128
   2a6d4:	29bff726 	beq	r5,r6,2a6b4 <__alt_data_end+0xf402a6b4>
   2a6d8:	21000044 	addi	r4,r4,1
   2a6dc:	11000005 	stb	r4,0(r2)
   2a6e0:	a80b883a 	mov	r5,r21
   2a6e4:	e009883a 	mov	r4,fp
   2a6e8:	002d20c0 	call	2d20c <_Bfree>
   2a6ec:	883ea026 	beq	r17,zero,2a170 <__alt_data_end+0xf402a170>
   2a6f0:	90000426 	beq	r18,zero,2a704 <_dtoa_r+0xc3c>
   2a6f4:	94400326 	beq	r18,r17,2a704 <_dtoa_r+0xc3c>
   2a6f8:	900b883a 	mov	r5,r18
   2a6fc:	e009883a 	mov	r4,fp
   2a700:	002d20c0 	call	2d20c <_Bfree>
   2a704:	880b883a 	mov	r5,r17
   2a708:	e009883a 	mov	r4,fp
   2a70c:	002d20c0 	call	2d20c <_Bfree>
   2a710:	003e9706 	br	2a170 <__alt_data_end+0xf402a170>
   2a714:	01800044 	movi	r6,1
   2a718:	d9800e15 	stw	r6,56(sp)
   2a71c:	003d9606 	br	29d78 <__alt_data_end+0xf4029d78>
   2a720:	d8800817 	ldw	r2,32(sp)
   2a724:	d8c00517 	ldw	r3,20(sp)
   2a728:	d8000d15 	stw	zero,52(sp)
   2a72c:	10c5c83a 	sub	r2,r2,r3
   2a730:	00c9c83a 	sub	r4,zero,r3
   2a734:	d8800815 	stw	r2,32(sp)
   2a738:	d9000a15 	stw	r4,40(sp)
   2a73c:	003d9706 	br	29d9c <__alt_data_end+0xf4029d9c>
   2a740:	05adc83a 	sub	r22,zero,r22
   2a744:	dd800815 	stw	r22,32(sp)
   2a748:	002d883a 	mov	r22,zero
   2a74c:	003d8e06 	br	29d88 <__alt_data_end+0xf4029d88>
   2a750:	d9000517 	ldw	r4,20(sp)
   2a754:	0026ec40 	call	26ec4 <__floatsidf>
   2a758:	100d883a 	mov	r6,r2
   2a75c:	180f883a 	mov	r7,r3
   2a760:	a009883a 	mov	r4,r20
   2a764:	880b883a 	mov	r5,r17
   2a768:	0025bd80 	call	25bd8 <__eqdf2>
   2a76c:	103d7126 	beq	r2,zero,29d34 <__alt_data_end+0xf4029d34>
   2a770:	d9c00517 	ldw	r7,20(sp)
   2a774:	39ffffc4 	addi	r7,r7,-1
   2a778:	d9c00515 	stw	r7,20(sp)
   2a77c:	003d6d06 	br	29d34 <__alt_data_end+0xf4029d34>
   2a780:	dd400a17 	ldw	r21,40(sp)
   2a784:	dd000817 	ldw	r20,32(sp)
   2a788:	0023883a 	mov	r17,zero
   2a78c:	003f4806 	br	2a4b0 <__alt_data_end+0xf402a4b0>
   2a790:	10e3c83a 	sub	r17,r2,r3
   2a794:	9448983a 	sll	r4,r18,r17
   2a798:	003d3206 	br	29c64 <__alt_data_end+0xf4029c64>
   2a79c:	d8000e15 	stw	zero,56(sp)
   2a7a0:	003d7506 	br	29d78 <__alt_data_end+0xf4029d78>
   2a7a4:	b005883a 	mov	r2,r22
   2a7a8:	003f4506 	br	2a4c0 <__alt_data_end+0xf402a4c0>
   2a7ac:	dc000915 	stw	r16,36(sp)
   2a7b0:	d9800a17 	ldw	r6,40(sp)
   2a7b4:	d9400917 	ldw	r5,36(sp)
   2a7b8:	e009883a 	mov	r4,fp
   2a7bc:	002d7a40 	call	2d7a4 <__pow5mult>
   2a7c0:	1021883a 	mov	r16,r2
   2a7c4:	003f5a06 	br	2a530 <__alt_data_end+0xf402a530>
   2a7c8:	01c00044 	movi	r7,1
   2a7cc:	d9c00b15 	stw	r7,44(sp)
   2a7d0:	d8802217 	ldw	r2,136(sp)
   2a7d4:	0081280e 	bge	zero,r2,2ac78 <_dtoa_r+0x11b0>
   2a7d8:	100d883a 	mov	r6,r2
   2a7dc:	1021883a 	mov	r16,r2
   2a7e0:	d8800c15 	stw	r2,48(sp)
   2a7e4:	d8800615 	stw	r2,24(sp)
   2a7e8:	003d8806 	br	29e0c <__alt_data_end+0xf4029e0c>
   2a7ec:	d8800617 	ldw	r2,24(sp)
   2a7f0:	00be9b16 	blt	zero,r2,2a260 <__alt_data_end+0xf402a260>
   2a7f4:	10010f1e 	bne	r2,zero,2ac34 <_dtoa_r+0x116c>
   2a7f8:	880b883a 	mov	r5,r17
   2a7fc:	000d883a 	mov	r6,zero
   2a800:	01d00534 	movhi	r7,16404
   2a804:	8009883a 	mov	r4,r16
   2a808:	0025e300 	call	25e30 <__muldf3>
   2a80c:	900d883a 	mov	r6,r18
   2a810:	980f883a 	mov	r7,r19
   2a814:	1009883a 	mov	r4,r2
   2a818:	180b883a 	mov	r5,r3
   2a81c:	0025c600 	call	25c60 <__gedf2>
   2a820:	002b883a 	mov	r21,zero
   2a824:	0023883a 	mov	r17,zero
   2a828:	1000bf16 	blt	r2,zero,2ab28 <_dtoa_r+0x1060>
   2a82c:	d9802217 	ldw	r6,136(sp)
   2a830:	ddc00717 	ldw	r23,28(sp)
   2a834:	018c303a 	nor	r6,zero,r6
   2a838:	d9800515 	stw	r6,20(sp)
   2a83c:	a80b883a 	mov	r5,r21
   2a840:	e009883a 	mov	r4,fp
   2a844:	002d20c0 	call	2d20c <_Bfree>
   2a848:	883e4926 	beq	r17,zero,2a170 <__alt_data_end+0xf402a170>
   2a84c:	003fad06 	br	2a704 <__alt_data_end+0xf402a704>
   2a850:	d9c01117 	ldw	r7,68(sp)
   2a854:	3801bc26 	beq	r7,zero,2af48 <_dtoa_r+0x1480>
   2a858:	10810cc4 	addi	r2,r2,1075
   2a85c:	dd400a17 	ldw	r21,40(sp)
   2a860:	dd000817 	ldw	r20,32(sp)
   2a864:	003f0a06 	br	2a490 <__alt_data_end+0xf402a490>
   2a868:	00800704 	movi	r2,28
   2a86c:	d9000817 	ldw	r4,32(sp)
   2a870:	a0a9883a 	add	r20,r20,r2
   2a874:	b0ad883a 	add	r22,r22,r2
   2a878:	2089883a 	add	r4,r4,r2
   2a87c:	d9000815 	stw	r4,32(sp)
   2a880:	003f5106 	br	2a5c8 <__alt_data_end+0xf402a5c8>
   2a884:	d8c00317 	ldw	r3,12(sp)
   2a888:	b8c1fc0e 	bge	r23,r3,2b07c <_dtoa_r+0x15b4>
   2a88c:	0027883a 	mov	r19,zero
   2a890:	b805883a 	mov	r2,r23
   2a894:	003f3e06 	br	2a590 <__alt_data_end+0xf402a590>
   2a898:	880b883a 	mov	r5,r17
   2a89c:	e009883a 	mov	r4,fp
   2a8a0:	000f883a 	mov	r7,zero
   2a8a4:	01800284 	movi	r6,10
   2a8a8:	002d2340 	call	2d234 <__multadd>
   2a8ac:	d9000c17 	ldw	r4,48(sp)
   2a8b0:	1023883a 	mov	r17,r2
   2a8b4:	0102040e 	bge	zero,r4,2b0c8 <_dtoa_r+0x1600>
   2a8b8:	d9000615 	stw	r4,24(sp)
   2a8bc:	0500050e 	bge	zero,r20,2a8d4 <_dtoa_r+0xe0c>
   2a8c0:	880b883a 	mov	r5,r17
   2a8c4:	a00d883a 	mov	r6,r20
   2a8c8:	e009883a 	mov	r4,fp
   2a8cc:	002d8e40 	call	2d8e4 <__lshift>
   2a8d0:	1023883a 	mov	r17,r2
   2a8d4:	9801241e 	bne	r19,zero,2ad68 <_dtoa_r+0x12a0>
   2a8d8:	8829883a 	mov	r20,r17
   2a8dc:	d9000617 	ldw	r4,24(sp)
   2a8e0:	dcc00717 	ldw	r19,28(sp)
   2a8e4:	9480004c 	andi	r18,r18,1
   2a8e8:	20bfffc4 	addi	r2,r4,-1
   2a8ec:	9885883a 	add	r2,r19,r2
   2a8f0:	d8800415 	stw	r2,16(sp)
   2a8f4:	dc800615 	stw	r18,24(sp)
   2a8f8:	a80b883a 	mov	r5,r21
   2a8fc:	8009883a 	mov	r4,r16
   2a900:	00298c80 	call	298c8 <quorem>
   2a904:	880b883a 	mov	r5,r17
   2a908:	8009883a 	mov	r4,r16
   2a90c:	102f883a 	mov	r23,r2
   2a910:	002da2c0 	call	2da2c <__mcmp>
   2a914:	a80b883a 	mov	r5,r21
   2a918:	a00d883a 	mov	r6,r20
   2a91c:	e009883a 	mov	r4,fp
   2a920:	102d883a 	mov	r22,r2
   2a924:	002da8c0 	call	2da8c <__mdiff>
   2a928:	1007883a 	mov	r3,r2
   2a92c:	10800317 	ldw	r2,12(r2)
   2a930:	bc800c04 	addi	r18,r23,48
   2a934:	180b883a 	mov	r5,r3
   2a938:	10004e1e 	bne	r2,zero,2aa74 <_dtoa_r+0xfac>
   2a93c:	8009883a 	mov	r4,r16
   2a940:	d8c01615 	stw	r3,88(sp)
   2a944:	002da2c0 	call	2da2c <__mcmp>
   2a948:	d8c01617 	ldw	r3,88(sp)
   2a94c:	e009883a 	mov	r4,fp
   2a950:	d8801615 	stw	r2,88(sp)
   2a954:	180b883a 	mov	r5,r3
   2a958:	002d20c0 	call	2d20c <_Bfree>
   2a95c:	d8801617 	ldw	r2,88(sp)
   2a960:	1000041e 	bne	r2,zero,2a974 <_dtoa_r+0xeac>
   2a964:	d9800317 	ldw	r6,12(sp)
   2a968:	3000021e 	bne	r6,zero,2a974 <_dtoa_r+0xeac>
   2a96c:	d8c00617 	ldw	r3,24(sp)
   2a970:	18003726 	beq	r3,zero,2aa50 <_dtoa_r+0xf88>
   2a974:	b0002016 	blt	r22,zero,2a9f8 <_dtoa_r+0xf30>
   2a978:	b000041e 	bne	r22,zero,2a98c <_dtoa_r+0xec4>
   2a97c:	d9000317 	ldw	r4,12(sp)
   2a980:	2000021e 	bne	r4,zero,2a98c <_dtoa_r+0xec4>
   2a984:	d8c00617 	ldw	r3,24(sp)
   2a988:	18001b26 	beq	r3,zero,2a9f8 <_dtoa_r+0xf30>
   2a98c:	00810716 	blt	zero,r2,2adac <_dtoa_r+0x12e4>
   2a990:	d8c00417 	ldw	r3,16(sp)
   2a994:	9d800044 	addi	r22,r19,1
   2a998:	9c800005 	stb	r18,0(r19)
   2a99c:	b02f883a 	mov	r23,r22
   2a9a0:	98c10626 	beq	r19,r3,2adbc <_dtoa_r+0x12f4>
   2a9a4:	800b883a 	mov	r5,r16
   2a9a8:	000f883a 	mov	r7,zero
   2a9ac:	01800284 	movi	r6,10
   2a9b0:	e009883a 	mov	r4,fp
   2a9b4:	002d2340 	call	2d234 <__multadd>
   2a9b8:	1021883a 	mov	r16,r2
   2a9bc:	000f883a 	mov	r7,zero
   2a9c0:	01800284 	movi	r6,10
   2a9c4:	880b883a 	mov	r5,r17
   2a9c8:	e009883a 	mov	r4,fp
   2a9cc:	8d002526 	beq	r17,r20,2aa64 <_dtoa_r+0xf9c>
   2a9d0:	002d2340 	call	2d234 <__multadd>
   2a9d4:	a00b883a 	mov	r5,r20
   2a9d8:	000f883a 	mov	r7,zero
   2a9dc:	01800284 	movi	r6,10
   2a9e0:	e009883a 	mov	r4,fp
   2a9e4:	1023883a 	mov	r17,r2
   2a9e8:	002d2340 	call	2d234 <__multadd>
   2a9ec:	1029883a 	mov	r20,r2
   2a9f0:	b027883a 	mov	r19,r22
   2a9f4:	003fc006 	br	2a8f8 <__alt_data_end+0xf402a8f8>
   2a9f8:	9011883a 	mov	r8,r18
   2a9fc:	00800e0e 	bge	zero,r2,2aa38 <_dtoa_r+0xf70>
   2aa00:	800b883a 	mov	r5,r16
   2aa04:	01800044 	movi	r6,1
   2aa08:	e009883a 	mov	r4,fp
   2aa0c:	da001715 	stw	r8,92(sp)
   2aa10:	002d8e40 	call	2d8e4 <__lshift>
   2aa14:	a80b883a 	mov	r5,r21
   2aa18:	1009883a 	mov	r4,r2
   2aa1c:	1021883a 	mov	r16,r2
   2aa20:	002da2c0 	call	2da2c <__mcmp>
   2aa24:	da001717 	ldw	r8,92(sp)
   2aa28:	0081960e 	bge	zero,r2,2b084 <_dtoa_r+0x15bc>
   2aa2c:	00800e44 	movi	r2,57
   2aa30:	40817026 	beq	r8,r2,2aff4 <_dtoa_r+0x152c>
   2aa34:	ba000c44 	addi	r8,r23,49
   2aa38:	8825883a 	mov	r18,r17
   2aa3c:	9dc00044 	addi	r23,r19,1
   2aa40:	9a000005 	stb	r8,0(r19)
   2aa44:	a023883a 	mov	r17,r20
   2aa48:	dc000915 	stw	r16,36(sp)
   2aa4c:	003f2406 	br	2a6e0 <__alt_data_end+0xf402a6e0>
   2aa50:	00800e44 	movi	r2,57
   2aa54:	9011883a 	mov	r8,r18
   2aa58:	90816626 	beq	r18,r2,2aff4 <_dtoa_r+0x152c>
   2aa5c:	05bff516 	blt	zero,r22,2aa34 <__alt_data_end+0xf402aa34>
   2aa60:	003ff506 	br	2aa38 <__alt_data_end+0xf402aa38>
   2aa64:	002d2340 	call	2d234 <__multadd>
   2aa68:	1023883a 	mov	r17,r2
   2aa6c:	1029883a 	mov	r20,r2
   2aa70:	003fdf06 	br	2a9f0 <__alt_data_end+0xf402a9f0>
   2aa74:	e009883a 	mov	r4,fp
   2aa78:	002d20c0 	call	2d20c <_Bfree>
   2aa7c:	00800044 	movi	r2,1
   2aa80:	003fbc06 	br	2a974 <__alt_data_end+0xf402a974>
   2aa84:	a80b883a 	mov	r5,r21
   2aa88:	8009883a 	mov	r4,r16
   2aa8c:	002da2c0 	call	2da2c <__mcmp>
   2aa90:	103edb0e 	bge	r2,zero,2a600 <__alt_data_end+0xf402a600>
   2aa94:	800b883a 	mov	r5,r16
   2aa98:	000f883a 	mov	r7,zero
   2aa9c:	01800284 	movi	r6,10
   2aaa0:	e009883a 	mov	r4,fp
   2aaa4:	002d2340 	call	2d234 <__multadd>
   2aaa8:	1021883a 	mov	r16,r2
   2aaac:	d8800517 	ldw	r2,20(sp)
   2aab0:	d8c00b17 	ldw	r3,44(sp)
   2aab4:	10bfffc4 	addi	r2,r2,-1
   2aab8:	d8800515 	stw	r2,20(sp)
   2aabc:	183f761e 	bne	r3,zero,2a898 <__alt_data_end+0xf402a898>
   2aac0:	d9000c17 	ldw	r4,48(sp)
   2aac4:	0101730e 	bge	zero,r4,2b094 <_dtoa_r+0x15cc>
   2aac8:	d9000615 	stw	r4,24(sp)
   2aacc:	003ed006 	br	2a610 <__alt_data_end+0xf402a610>
   2aad0:	00800084 	movi	r2,2
   2aad4:	3081861e 	bne	r6,r2,2b0f0 <_dtoa_r+0x1628>
   2aad8:	d8000b15 	stw	zero,44(sp)
   2aadc:	003f3c06 	br	2a7d0 <__alt_data_end+0xf402a7d0>
   2aae0:	dc000917 	ldw	r16,36(sp)
   2aae4:	003e9206 	br	2a530 <__alt_data_end+0xf402a530>
   2aae8:	d9c00317 	ldw	r7,12(sp)
   2aaec:	00800084 	movi	r2,2
   2aaf0:	11fec50e 	bge	r2,r7,2a608 <__alt_data_end+0xf402a608>
   2aaf4:	d9000617 	ldw	r4,24(sp)
   2aaf8:	20013c1e 	bne	r4,zero,2afec <_dtoa_r+0x1524>
   2aafc:	a80b883a 	mov	r5,r21
   2ab00:	000f883a 	mov	r7,zero
   2ab04:	01800144 	movi	r6,5
   2ab08:	e009883a 	mov	r4,fp
   2ab0c:	002d2340 	call	2d234 <__multadd>
   2ab10:	100b883a 	mov	r5,r2
   2ab14:	8009883a 	mov	r4,r16
   2ab18:	102b883a 	mov	r21,r2
   2ab1c:	002da2c0 	call	2da2c <__mcmp>
   2ab20:	dc000915 	stw	r16,36(sp)
   2ab24:	00bf410e 	bge	zero,r2,2a82c <__alt_data_end+0xf402a82c>
   2ab28:	d9c00717 	ldw	r7,28(sp)
   2ab2c:	00800c44 	movi	r2,49
   2ab30:	38800005 	stb	r2,0(r7)
   2ab34:	d8800517 	ldw	r2,20(sp)
   2ab38:	3dc00044 	addi	r23,r7,1
   2ab3c:	10800044 	addi	r2,r2,1
   2ab40:	d8800515 	stw	r2,20(sp)
   2ab44:	003f3d06 	br	2a83c <__alt_data_end+0xf402a83c>
   2ab48:	d9800517 	ldw	r6,20(sp)
   2ab4c:	d9c00717 	ldw	r7,28(sp)
   2ab50:	00800c44 	movi	r2,49
   2ab54:	31800044 	addi	r6,r6,1
   2ab58:	d9800515 	stw	r6,20(sp)
   2ab5c:	38800005 	stb	r2,0(r7)
   2ab60:	003edf06 	br	2a6e0 <__alt_data_end+0xf402a6e0>
   2ab64:	d8000b15 	stw	zero,44(sp)
   2ab68:	003c9f06 	br	29de8 <__alt_data_end+0xf4029de8>
   2ab6c:	903e7e1e 	bne	r18,zero,2a568 <__alt_data_end+0xf402a568>
   2ab70:	00800434 	movhi	r2,16
   2ab74:	10bfffc4 	addi	r2,r2,-1
   2ab78:	9884703a 	and	r2,r19,r2
   2ab7c:	1000ea1e 	bne	r2,zero,2af28 <_dtoa_r+0x1460>
   2ab80:	9cdffc2c 	andhi	r19,r19,32752
   2ab84:	9800e826 	beq	r19,zero,2af28 <_dtoa_r+0x1460>
   2ab88:	d9c00817 	ldw	r7,32(sp)
   2ab8c:	b5800044 	addi	r22,r22,1
   2ab90:	04c00044 	movi	r19,1
   2ab94:	39c00044 	addi	r7,r7,1
   2ab98:	d9c00815 	stw	r7,32(sp)
   2ab9c:	d8800d17 	ldw	r2,52(sp)
   2aba0:	103e721e 	bne	r2,zero,2a56c <__alt_data_end+0xf402a56c>
   2aba4:	00800044 	movi	r2,1
   2aba8:	003e7906 	br	2a590 <__alt_data_end+0xf402a590>
   2abac:	8009883a 	mov	r4,r16
   2abb0:	0026ec40 	call	26ec4 <__floatsidf>
   2abb4:	d9800f17 	ldw	r6,60(sp)
   2abb8:	d9c01017 	ldw	r7,64(sp)
   2abbc:	1009883a 	mov	r4,r2
   2abc0:	180b883a 	mov	r5,r3
   2abc4:	0025e300 	call	25e30 <__muldf3>
   2abc8:	000d883a 	mov	r6,zero
   2abcc:	01d00734 	movhi	r7,16412
   2abd0:	1009883a 	mov	r4,r2
   2abd4:	180b883a 	mov	r5,r3
   2abd8:	0024a440 	call	24a44 <__adddf3>
   2abdc:	047f3034 	movhi	r17,64704
   2abe0:	1021883a 	mov	r16,r2
   2abe4:	1c63883a 	add	r17,r3,r17
   2abe8:	d9000f17 	ldw	r4,60(sp)
   2abec:	d9401017 	ldw	r5,64(sp)
   2abf0:	000d883a 	mov	r6,zero
   2abf4:	01d00534 	movhi	r7,16404
   2abf8:	00265480 	call	26548 <__subdf3>
   2abfc:	800d883a 	mov	r6,r16
   2ac00:	880f883a 	mov	r7,r17
   2ac04:	1009883a 	mov	r4,r2
   2ac08:	180b883a 	mov	r5,r3
   2ac0c:	102b883a 	mov	r21,r2
   2ac10:	1829883a 	mov	r20,r3
   2ac14:	0025c600 	call	25c60 <__gedf2>
   2ac18:	00806c16 	blt	zero,r2,2adcc <_dtoa_r+0x1304>
   2ac1c:	89e0003c 	xorhi	r7,r17,32768
   2ac20:	800d883a 	mov	r6,r16
   2ac24:	a809883a 	mov	r4,r21
   2ac28:	a00b883a 	mov	r5,r20
   2ac2c:	0025d3c0 	call	25d3c <__ledf2>
   2ac30:	103d7e0e 	bge	r2,zero,2a22c <__alt_data_end+0xf402a22c>
   2ac34:	002b883a 	mov	r21,zero
   2ac38:	0023883a 	mov	r17,zero
   2ac3c:	003efb06 	br	2a82c <__alt_data_end+0xf402a82c>
   2ac40:	d8800717 	ldw	r2,28(sp)
   2ac44:	003bd006 	br	29b88 <__alt_data_end+0xf4029b88>
   2ac48:	d9000a17 	ldw	r4,40(sp)
   2ac4c:	d9800d17 	ldw	r6,52(sp)
   2ac50:	dd400a15 	stw	r21,40(sp)
   2ac54:	a905c83a 	sub	r2,r21,r4
   2ac58:	308d883a 	add	r6,r6,r2
   2ac5c:	d9800d15 	stw	r6,52(sp)
   2ac60:	002b883a 	mov	r21,zero
   2ac64:	003e0606 	br	2a480 <__alt_data_end+0xf402a480>
   2ac68:	9023883a 	mov	r17,r18
   2ac6c:	9829883a 	mov	r20,r19
   2ac70:	04000084 	movi	r16,2
   2ac74:	003c9206 	br	29ec0 <__alt_data_end+0xf4029ec0>
   2ac78:	04000044 	movi	r16,1
   2ac7c:	dc000c15 	stw	r16,48(sp)
   2ac80:	dc000615 	stw	r16,24(sp)
   2ac84:	dc002215 	stw	r16,136(sp)
   2ac88:	e0001115 	stw	zero,68(fp)
   2ac8c:	000b883a 	mov	r5,zero
   2ac90:	003c6906 	br	29e38 <__alt_data_end+0xf4029e38>
   2ac94:	3021883a 	mov	r16,r6
   2ac98:	003ffb06 	br	2ac88 <__alt_data_end+0xf402ac88>
   2ac9c:	1000021e 	bne	r2,zero,2aca8 <_dtoa_r+0x11e0>
   2aca0:	4200004c 	andi	r8,r8,1
   2aca4:	403e7d1e 	bne	r8,zero,2a69c <__alt_data_end+0xf402a69c>
   2aca8:	01000c04 	movi	r4,48
   2acac:	00000106 	br	2acb4 <_dtoa_r+0x11ec>
   2acb0:	102f883a 	mov	r23,r2
   2acb4:	b8bfffc4 	addi	r2,r23,-1
   2acb8:	10c00007 	ldb	r3,0(r2)
   2acbc:	193ffc26 	beq	r3,r4,2acb0 <__alt_data_end+0xf402acb0>
   2acc0:	003e8706 	br	2a6e0 <__alt_data_end+0xf402a6e0>
   2acc4:	d8800517 	ldw	r2,20(sp)
   2acc8:	00a3c83a 	sub	r17,zero,r2
   2accc:	8800a426 	beq	r17,zero,2af60 <_dtoa_r+0x1498>
   2acd0:	888003cc 	andi	r2,r17,15
   2acd4:	100490fa 	slli	r2,r2,3
   2acd8:	00c000f4 	movhi	r3,3
   2acdc:	18d74d04 	addi	r3,r3,23860
   2ace0:	1885883a 	add	r2,r3,r2
   2ace4:	11800017 	ldw	r6,0(r2)
   2ace8:	11c00117 	ldw	r7,4(r2)
   2acec:	9009883a 	mov	r4,r18
   2acf0:	980b883a 	mov	r5,r19
   2acf4:	8823d13a 	srai	r17,r17,4
   2acf8:	0025e300 	call	25e30 <__muldf3>
   2acfc:	d8800f15 	stw	r2,60(sp)
   2ad00:	d8c01015 	stw	r3,64(sp)
   2ad04:	8800e826 	beq	r17,zero,2b0a8 <_dtoa_r+0x15e0>
   2ad08:	050000f4 	movhi	r20,3
   2ad0c:	a5174304 	addi	r20,r20,23820
   2ad10:	04000084 	movi	r16,2
   2ad14:	8980004c 	andi	r6,r17,1
   2ad18:	1009883a 	mov	r4,r2
   2ad1c:	8823d07a 	srai	r17,r17,1
   2ad20:	180b883a 	mov	r5,r3
   2ad24:	30000426 	beq	r6,zero,2ad38 <_dtoa_r+0x1270>
   2ad28:	a1800017 	ldw	r6,0(r20)
   2ad2c:	a1c00117 	ldw	r7,4(r20)
   2ad30:	84000044 	addi	r16,r16,1
   2ad34:	0025e300 	call	25e30 <__muldf3>
   2ad38:	a5000204 	addi	r20,r20,8
   2ad3c:	883ff51e 	bne	r17,zero,2ad14 <__alt_data_end+0xf402ad14>
   2ad40:	d8800f15 	stw	r2,60(sp)
   2ad44:	d8c01015 	stw	r3,64(sp)
   2ad48:	003c7606 	br	29f24 <__alt_data_end+0xf4029f24>
   2ad4c:	00c00c04 	movi	r3,48
   2ad50:	10c00005 	stb	r3,0(r2)
   2ad54:	d8c00517 	ldw	r3,20(sp)
   2ad58:	bd3fffc3 	ldbu	r20,-1(r23)
   2ad5c:	18c00044 	addi	r3,r3,1
   2ad60:	d8c00515 	stw	r3,20(sp)
   2ad64:	003db906 	br	2a44c <__alt_data_end+0xf402a44c>
   2ad68:	89400117 	ldw	r5,4(r17)
   2ad6c:	e009883a 	mov	r4,fp
   2ad70:	002d1640 	call	2d164 <_Balloc>
   2ad74:	89800417 	ldw	r6,16(r17)
   2ad78:	89400304 	addi	r5,r17,12
   2ad7c:	11000304 	addi	r4,r2,12
   2ad80:	31800084 	addi	r6,r6,2
   2ad84:	318d883a 	add	r6,r6,r6
   2ad88:	318d883a 	add	r6,r6,r6
   2ad8c:	1027883a 	mov	r19,r2
   2ad90:	002cd980 	call	2cd98 <memcpy>
   2ad94:	01800044 	movi	r6,1
   2ad98:	980b883a 	mov	r5,r19
   2ad9c:	e009883a 	mov	r4,fp
   2ada0:	002d8e40 	call	2d8e4 <__lshift>
   2ada4:	1029883a 	mov	r20,r2
   2ada8:	003ecc06 	br	2a8dc <__alt_data_end+0xf402a8dc>
   2adac:	00800e44 	movi	r2,57
   2adb0:	90809026 	beq	r18,r2,2aff4 <_dtoa_r+0x152c>
   2adb4:	92000044 	addi	r8,r18,1
   2adb8:	003f1f06 	br	2aa38 <__alt_data_end+0xf402aa38>
   2adbc:	9011883a 	mov	r8,r18
   2adc0:	8825883a 	mov	r18,r17
   2adc4:	a023883a 	mov	r17,r20
   2adc8:	003e2906 	br	2a670 <__alt_data_end+0xf402a670>
   2adcc:	002b883a 	mov	r21,zero
   2add0:	0023883a 	mov	r17,zero
   2add4:	003f5406 	br	2ab28 <__alt_data_end+0xf402ab28>
   2add8:	61bfffc4 	addi	r6,r12,-1
   2addc:	300490fa 	slli	r2,r6,3
   2ade0:	00c000f4 	movhi	r3,3
   2ade4:	18d74d04 	addi	r3,r3,23860
   2ade8:	1885883a 	add	r2,r3,r2
   2adec:	11000017 	ldw	r4,0(r2)
   2adf0:	11400117 	ldw	r5,4(r2)
   2adf4:	d8800717 	ldw	r2,28(sp)
   2adf8:	880f883a 	mov	r7,r17
   2adfc:	d9801215 	stw	r6,72(sp)
   2ae00:	800d883a 	mov	r6,r16
   2ae04:	db001615 	stw	r12,88(sp)
   2ae08:	15c00044 	addi	r23,r2,1
   2ae0c:	0025e300 	call	25e30 <__muldf3>
   2ae10:	d9401017 	ldw	r5,64(sp)
   2ae14:	d9000f17 	ldw	r4,60(sp)
   2ae18:	d8c01515 	stw	r3,84(sp)
   2ae1c:	d8801415 	stw	r2,80(sp)
   2ae20:	0026e440 	call	26e44 <__fixdfsi>
   2ae24:	1009883a 	mov	r4,r2
   2ae28:	1021883a 	mov	r16,r2
   2ae2c:	0026ec40 	call	26ec4 <__floatsidf>
   2ae30:	d9000f17 	ldw	r4,60(sp)
   2ae34:	d9401017 	ldw	r5,64(sp)
   2ae38:	100d883a 	mov	r6,r2
   2ae3c:	180f883a 	mov	r7,r3
   2ae40:	00265480 	call	26548 <__subdf3>
   2ae44:	1829883a 	mov	r20,r3
   2ae48:	d8c00717 	ldw	r3,28(sp)
   2ae4c:	84000c04 	addi	r16,r16,48
   2ae50:	1023883a 	mov	r17,r2
   2ae54:	1c000005 	stb	r16,0(r3)
   2ae58:	db001617 	ldw	r12,88(sp)
   2ae5c:	00800044 	movi	r2,1
   2ae60:	60802226 	beq	r12,r2,2aeec <_dtoa_r+0x1424>
   2ae64:	d9c00717 	ldw	r7,28(sp)
   2ae68:	8805883a 	mov	r2,r17
   2ae6c:	b82b883a 	mov	r21,r23
   2ae70:	3b19883a 	add	r12,r7,r12
   2ae74:	6023883a 	mov	r17,r12
   2ae78:	a007883a 	mov	r3,r20
   2ae7c:	dc800f15 	stw	r18,60(sp)
   2ae80:	000d883a 	mov	r6,zero
   2ae84:	01d00934 	movhi	r7,16420
   2ae88:	1009883a 	mov	r4,r2
   2ae8c:	180b883a 	mov	r5,r3
   2ae90:	0025e300 	call	25e30 <__muldf3>
   2ae94:	180b883a 	mov	r5,r3
   2ae98:	1009883a 	mov	r4,r2
   2ae9c:	1829883a 	mov	r20,r3
   2aea0:	1025883a 	mov	r18,r2
   2aea4:	0026e440 	call	26e44 <__fixdfsi>
   2aea8:	1009883a 	mov	r4,r2
   2aeac:	1021883a 	mov	r16,r2
   2aeb0:	0026ec40 	call	26ec4 <__floatsidf>
   2aeb4:	100d883a 	mov	r6,r2
   2aeb8:	180f883a 	mov	r7,r3
   2aebc:	9009883a 	mov	r4,r18
   2aec0:	a00b883a 	mov	r5,r20
   2aec4:	84000c04 	addi	r16,r16,48
   2aec8:	00265480 	call	26548 <__subdf3>
   2aecc:	ad400044 	addi	r21,r21,1
   2aed0:	ac3fffc5 	stb	r16,-1(r21)
   2aed4:	ac7fea1e 	bne	r21,r17,2ae80 <__alt_data_end+0xf402ae80>
   2aed8:	1023883a 	mov	r17,r2
   2aedc:	d8801217 	ldw	r2,72(sp)
   2aee0:	dc800f17 	ldw	r18,60(sp)
   2aee4:	1829883a 	mov	r20,r3
   2aee8:	b8af883a 	add	r23,r23,r2
   2aeec:	d9001417 	ldw	r4,80(sp)
   2aef0:	d9401517 	ldw	r5,84(sp)
   2aef4:	000d883a 	mov	r6,zero
   2aef8:	01cff834 	movhi	r7,16352
   2aefc:	0024a440 	call	24a44 <__adddf3>
   2af00:	880d883a 	mov	r6,r17
   2af04:	a00f883a 	mov	r7,r20
   2af08:	1009883a 	mov	r4,r2
   2af0c:	180b883a 	mov	r5,r3
   2af10:	0025d3c0 	call	25d3c <__ledf2>
   2af14:	10003e0e 	bge	r2,zero,2b010 <_dtoa_r+0x1548>
   2af18:	d9001317 	ldw	r4,76(sp)
   2af1c:	bd3fffc3 	ldbu	r20,-1(r23)
   2af20:	d9000515 	stw	r4,20(sp)
   2af24:	003d3b06 	br	2a414 <__alt_data_end+0xf402a414>
   2af28:	0027883a 	mov	r19,zero
   2af2c:	003f1b06 	br	2ab9c <__alt_data_end+0xf402ab9c>
   2af30:	d8800817 	ldw	r2,32(sp)
   2af34:	11e9c83a 	sub	r20,r2,r7
   2af38:	0005883a 	mov	r2,zero
   2af3c:	003d5406 	br	2a490 <__alt_data_end+0xf402a490>
   2af40:	00800044 	movi	r2,1
   2af44:	003dc706 	br	2a664 <__alt_data_end+0xf402a664>
   2af48:	d8c00217 	ldw	r3,8(sp)
   2af4c:	00800d84 	movi	r2,54
   2af50:	dd400a17 	ldw	r21,40(sp)
   2af54:	10c5c83a 	sub	r2,r2,r3
   2af58:	dd000817 	ldw	r20,32(sp)
   2af5c:	003d4c06 	br	2a490 <__alt_data_end+0xf402a490>
   2af60:	dc800f15 	stw	r18,60(sp)
   2af64:	dcc01015 	stw	r19,64(sp)
   2af68:	04000084 	movi	r16,2
   2af6c:	003bed06 	br	29f24 <__alt_data_end+0xf4029f24>
   2af70:	d9000617 	ldw	r4,24(sp)
   2af74:	203f0d26 	beq	r4,zero,2abac <__alt_data_end+0xf402abac>
   2af78:	d9800c17 	ldw	r6,48(sp)
   2af7c:	01bcab0e 	bge	zero,r6,2a22c <__alt_data_end+0xf402a22c>
   2af80:	d9401017 	ldw	r5,64(sp)
   2af84:	d9000f17 	ldw	r4,60(sp)
   2af88:	000d883a 	mov	r6,zero
   2af8c:	01d00934 	movhi	r7,16420
   2af90:	0025e300 	call	25e30 <__muldf3>
   2af94:	81000044 	addi	r4,r16,1
   2af98:	d8800f15 	stw	r2,60(sp)
   2af9c:	d8c01015 	stw	r3,64(sp)
   2afa0:	0026ec40 	call	26ec4 <__floatsidf>
   2afa4:	d9800f17 	ldw	r6,60(sp)
   2afa8:	d9c01017 	ldw	r7,64(sp)
   2afac:	1009883a 	mov	r4,r2
   2afb0:	180b883a 	mov	r5,r3
   2afb4:	0025e300 	call	25e30 <__muldf3>
   2afb8:	01d00734 	movhi	r7,16412
   2afbc:	000d883a 	mov	r6,zero
   2afc0:	1009883a 	mov	r4,r2
   2afc4:	180b883a 	mov	r5,r3
   2afc8:	0024a440 	call	24a44 <__adddf3>
   2afcc:	d9c00517 	ldw	r7,20(sp)
   2afd0:	047f3034 	movhi	r17,64704
   2afd4:	1021883a 	mov	r16,r2
   2afd8:	39ffffc4 	addi	r7,r7,-1
   2afdc:	d9c01315 	stw	r7,76(sp)
   2afe0:	1c63883a 	add	r17,r3,r17
   2afe4:	db000c17 	ldw	r12,48(sp)
   2afe8:	003bea06 	br	29f94 <__alt_data_end+0xf4029f94>
   2afec:	dc000915 	stw	r16,36(sp)
   2aff0:	003e0e06 	br	2a82c <__alt_data_end+0xf402a82c>
   2aff4:	01000e44 	movi	r4,57
   2aff8:	8825883a 	mov	r18,r17
   2affc:	9dc00044 	addi	r23,r19,1
   2b000:	99000005 	stb	r4,0(r19)
   2b004:	a023883a 	mov	r17,r20
   2b008:	dc000915 	stw	r16,36(sp)
   2b00c:	003da406 	br	2a6a0 <__alt_data_end+0xf402a6a0>
   2b010:	d9801417 	ldw	r6,80(sp)
   2b014:	d9c01517 	ldw	r7,84(sp)
   2b018:	0009883a 	mov	r4,zero
   2b01c:	014ff834 	movhi	r5,16352
   2b020:	00265480 	call	26548 <__subdf3>
   2b024:	880d883a 	mov	r6,r17
   2b028:	a00f883a 	mov	r7,r20
   2b02c:	1009883a 	mov	r4,r2
   2b030:	180b883a 	mov	r5,r3
   2b034:	0025c600 	call	25c60 <__gedf2>
   2b038:	00bc7c0e 	bge	zero,r2,2a22c <__alt_data_end+0xf402a22c>
   2b03c:	01000c04 	movi	r4,48
   2b040:	00000106 	br	2b048 <_dtoa_r+0x1580>
   2b044:	102f883a 	mov	r23,r2
   2b048:	b8bfffc4 	addi	r2,r23,-1
   2b04c:	10c00007 	ldb	r3,0(r2)
   2b050:	193ffc26 	beq	r3,r4,2b044 <__alt_data_end+0xf402b044>
   2b054:	d9801317 	ldw	r6,76(sp)
   2b058:	d9800515 	stw	r6,20(sp)
   2b05c:	003c4406 	br	2a170 <__alt_data_end+0xf402a170>
   2b060:	d9801317 	ldw	r6,76(sp)
   2b064:	d9800515 	stw	r6,20(sp)
   2b068:	003cea06 	br	2a414 <__alt_data_end+0xf402a414>
   2b06c:	dd800f17 	ldw	r22,60(sp)
   2b070:	dcc01017 	ldw	r19,64(sp)
   2b074:	dc801217 	ldw	r18,72(sp)
   2b078:	003c6c06 	br	2a22c <__alt_data_end+0xf402a22c>
   2b07c:	903e031e 	bne	r18,zero,2a88c <__alt_data_end+0xf402a88c>
   2b080:	003ebb06 	br	2ab70 <__alt_data_end+0xf402ab70>
   2b084:	103e6c1e 	bne	r2,zero,2aa38 <__alt_data_end+0xf402aa38>
   2b088:	4080004c 	andi	r2,r8,1
   2b08c:	103e6a26 	beq	r2,zero,2aa38 <__alt_data_end+0xf402aa38>
   2b090:	003e6606 	br	2aa2c <__alt_data_end+0xf402aa2c>
   2b094:	d8c00317 	ldw	r3,12(sp)
   2b098:	00800084 	movi	r2,2
   2b09c:	10c02916 	blt	r2,r3,2b144 <_dtoa_r+0x167c>
   2b0a0:	d9000c17 	ldw	r4,48(sp)
   2b0a4:	003e8806 	br	2aac8 <__alt_data_end+0xf402aac8>
   2b0a8:	04000084 	movi	r16,2
   2b0ac:	003b9d06 	br	29f24 <__alt_data_end+0xf4029f24>
   2b0b0:	d9001317 	ldw	r4,76(sp)
   2b0b4:	d9000515 	stw	r4,20(sp)
   2b0b8:	003cd606 	br	2a414 <__alt_data_end+0xf402a414>
   2b0bc:	d8801317 	ldw	r2,76(sp)
   2b0c0:	d8800515 	stw	r2,20(sp)
   2b0c4:	003c2a06 	br	2a170 <__alt_data_end+0xf402a170>
   2b0c8:	d9800317 	ldw	r6,12(sp)
   2b0cc:	00800084 	movi	r2,2
   2b0d0:	11801516 	blt	r2,r6,2b128 <_dtoa_r+0x1660>
   2b0d4:	d9c00c17 	ldw	r7,48(sp)
   2b0d8:	d9c00615 	stw	r7,24(sp)
   2b0dc:	003df706 	br	2a8bc <__alt_data_end+0xf402a8bc>
   2b0e0:	193d3926 	beq	r3,r4,2a5c8 <__alt_data_end+0xf402a5c8>
   2b0e4:	00c00f04 	movi	r3,60
   2b0e8:	1885c83a 	sub	r2,r3,r2
   2b0ec:	003ddf06 	br	2a86c <__alt_data_end+0xf402a86c>
   2b0f0:	e009883a 	mov	r4,fp
   2b0f4:	e0001115 	stw	zero,68(fp)
   2b0f8:	000b883a 	mov	r5,zero
   2b0fc:	002d1640 	call	2d164 <_Balloc>
   2b100:	d8800715 	stw	r2,28(sp)
   2b104:	d8c00717 	ldw	r3,28(sp)
   2b108:	00bfffc4 	movi	r2,-1
   2b10c:	01000044 	movi	r4,1
   2b110:	d8800c15 	stw	r2,48(sp)
   2b114:	e0c01015 	stw	r3,64(fp)
   2b118:	d9000b15 	stw	r4,44(sp)
   2b11c:	d8800615 	stw	r2,24(sp)
   2b120:	d8002215 	stw	zero,136(sp)
   2b124:	003c4106 	br	2a22c <__alt_data_end+0xf402a22c>
   2b128:	d8c00c17 	ldw	r3,48(sp)
   2b12c:	d8c00615 	stw	r3,24(sp)
   2b130:	003e7006 	br	2aaf4 <__alt_data_end+0xf402aaf4>
   2b134:	04400044 	movi	r17,1
   2b138:	003b2006 	br	29dbc <__alt_data_end+0xf4029dbc>
   2b13c:	000b883a 	mov	r5,zero
   2b140:	003b3d06 	br	29e38 <__alt_data_end+0xf4029e38>
   2b144:	d8800c17 	ldw	r2,48(sp)
   2b148:	d8800615 	stw	r2,24(sp)
   2b14c:	003e6906 	br	2aaf4 <__alt_data_end+0xf402aaf4>

0002b150 <__sflush_r>:
   2b150:	2880030b 	ldhu	r2,12(r5)
   2b154:	defffb04 	addi	sp,sp,-20
   2b158:	dcc00315 	stw	r19,12(sp)
   2b15c:	dc400115 	stw	r17,4(sp)
   2b160:	dfc00415 	stw	ra,16(sp)
   2b164:	dc800215 	stw	r18,8(sp)
   2b168:	dc000015 	stw	r16,0(sp)
   2b16c:	10c0020c 	andi	r3,r2,8
   2b170:	2823883a 	mov	r17,r5
   2b174:	2027883a 	mov	r19,r4
   2b178:	1800311e 	bne	r3,zero,2b240 <__sflush_r+0xf0>
   2b17c:	28c00117 	ldw	r3,4(r5)
   2b180:	10820014 	ori	r2,r2,2048
   2b184:	2880030d 	sth	r2,12(r5)
   2b188:	00c04b0e 	bge	zero,r3,2b2b8 <__sflush_r+0x168>
   2b18c:	8a000a17 	ldw	r8,40(r17)
   2b190:	40002326 	beq	r8,zero,2b220 <__sflush_r+0xd0>
   2b194:	9c000017 	ldw	r16,0(r19)
   2b198:	10c4000c 	andi	r3,r2,4096
   2b19c:	98000015 	stw	zero,0(r19)
   2b1a0:	18004826 	beq	r3,zero,2b2c4 <__sflush_r+0x174>
   2b1a4:	89801417 	ldw	r6,80(r17)
   2b1a8:	10c0010c 	andi	r3,r2,4
   2b1ac:	18000626 	beq	r3,zero,2b1c8 <__sflush_r+0x78>
   2b1b0:	88c00117 	ldw	r3,4(r17)
   2b1b4:	88800c17 	ldw	r2,48(r17)
   2b1b8:	30cdc83a 	sub	r6,r6,r3
   2b1bc:	10000226 	beq	r2,zero,2b1c8 <__sflush_r+0x78>
   2b1c0:	88800f17 	ldw	r2,60(r17)
   2b1c4:	308dc83a 	sub	r6,r6,r2
   2b1c8:	89400717 	ldw	r5,28(r17)
   2b1cc:	000f883a 	mov	r7,zero
   2b1d0:	9809883a 	mov	r4,r19
   2b1d4:	403ee83a 	callr	r8
   2b1d8:	00ffffc4 	movi	r3,-1
   2b1dc:	10c04426 	beq	r2,r3,2b2f0 <__sflush_r+0x1a0>
   2b1e0:	88c0030b 	ldhu	r3,12(r17)
   2b1e4:	89000417 	ldw	r4,16(r17)
   2b1e8:	88000115 	stw	zero,4(r17)
   2b1ec:	197dffcc 	andi	r5,r3,63487
   2b1f0:	8940030d 	sth	r5,12(r17)
   2b1f4:	89000015 	stw	r4,0(r17)
   2b1f8:	18c4000c 	andi	r3,r3,4096
   2b1fc:	18002c1e 	bne	r3,zero,2b2b0 <__sflush_r+0x160>
   2b200:	89400c17 	ldw	r5,48(r17)
   2b204:	9c000015 	stw	r16,0(r19)
   2b208:	28000526 	beq	r5,zero,2b220 <__sflush_r+0xd0>
   2b20c:	88801004 	addi	r2,r17,64
   2b210:	28800226 	beq	r5,r2,2b21c <__sflush_r+0xcc>
   2b214:	9809883a 	mov	r4,r19
   2b218:	002b8bc0 	call	2b8bc <_free_r>
   2b21c:	88000c15 	stw	zero,48(r17)
   2b220:	0005883a 	mov	r2,zero
   2b224:	dfc00417 	ldw	ra,16(sp)
   2b228:	dcc00317 	ldw	r19,12(sp)
   2b22c:	dc800217 	ldw	r18,8(sp)
   2b230:	dc400117 	ldw	r17,4(sp)
   2b234:	dc000017 	ldw	r16,0(sp)
   2b238:	dec00504 	addi	sp,sp,20
   2b23c:	f800283a 	ret
   2b240:	2c800417 	ldw	r18,16(r5)
   2b244:	903ff626 	beq	r18,zero,2b220 <__alt_data_end+0xf402b220>
   2b248:	2c000017 	ldw	r16,0(r5)
   2b24c:	108000cc 	andi	r2,r2,3
   2b250:	2c800015 	stw	r18,0(r5)
   2b254:	84a1c83a 	sub	r16,r16,r18
   2b258:	1000131e 	bne	r2,zero,2b2a8 <__sflush_r+0x158>
   2b25c:	28800517 	ldw	r2,20(r5)
   2b260:	88800215 	stw	r2,8(r17)
   2b264:	04000316 	blt	zero,r16,2b274 <__sflush_r+0x124>
   2b268:	003fed06 	br	2b220 <__alt_data_end+0xf402b220>
   2b26c:	90a5883a 	add	r18,r18,r2
   2b270:	043feb0e 	bge	zero,r16,2b220 <__alt_data_end+0xf402b220>
   2b274:	88800917 	ldw	r2,36(r17)
   2b278:	89400717 	ldw	r5,28(r17)
   2b27c:	800f883a 	mov	r7,r16
   2b280:	900d883a 	mov	r6,r18
   2b284:	9809883a 	mov	r4,r19
   2b288:	103ee83a 	callr	r2
   2b28c:	80a1c83a 	sub	r16,r16,r2
   2b290:	00bff616 	blt	zero,r2,2b26c <__alt_data_end+0xf402b26c>
   2b294:	88c0030b 	ldhu	r3,12(r17)
   2b298:	00bfffc4 	movi	r2,-1
   2b29c:	18c01014 	ori	r3,r3,64
   2b2a0:	88c0030d 	sth	r3,12(r17)
   2b2a4:	003fdf06 	br	2b224 <__alt_data_end+0xf402b224>
   2b2a8:	0005883a 	mov	r2,zero
   2b2ac:	003fec06 	br	2b260 <__alt_data_end+0xf402b260>
   2b2b0:	88801415 	stw	r2,80(r17)
   2b2b4:	003fd206 	br	2b200 <__alt_data_end+0xf402b200>
   2b2b8:	28c00f17 	ldw	r3,60(r5)
   2b2bc:	00ffb316 	blt	zero,r3,2b18c <__alt_data_end+0xf402b18c>
   2b2c0:	003fd706 	br	2b220 <__alt_data_end+0xf402b220>
   2b2c4:	89400717 	ldw	r5,28(r17)
   2b2c8:	000d883a 	mov	r6,zero
   2b2cc:	01c00044 	movi	r7,1
   2b2d0:	9809883a 	mov	r4,r19
   2b2d4:	403ee83a 	callr	r8
   2b2d8:	100d883a 	mov	r6,r2
   2b2dc:	00bfffc4 	movi	r2,-1
   2b2e0:	30801426 	beq	r6,r2,2b334 <__sflush_r+0x1e4>
   2b2e4:	8880030b 	ldhu	r2,12(r17)
   2b2e8:	8a000a17 	ldw	r8,40(r17)
   2b2ec:	003fae06 	br	2b1a8 <__alt_data_end+0xf402b1a8>
   2b2f0:	98c00017 	ldw	r3,0(r19)
   2b2f4:	183fba26 	beq	r3,zero,2b1e0 <__alt_data_end+0xf402b1e0>
   2b2f8:	01000744 	movi	r4,29
   2b2fc:	19000626 	beq	r3,r4,2b318 <__sflush_r+0x1c8>
   2b300:	01000584 	movi	r4,22
   2b304:	19000426 	beq	r3,r4,2b318 <__sflush_r+0x1c8>
   2b308:	88c0030b 	ldhu	r3,12(r17)
   2b30c:	18c01014 	ori	r3,r3,64
   2b310:	88c0030d 	sth	r3,12(r17)
   2b314:	003fc306 	br	2b224 <__alt_data_end+0xf402b224>
   2b318:	8880030b 	ldhu	r2,12(r17)
   2b31c:	88c00417 	ldw	r3,16(r17)
   2b320:	88000115 	stw	zero,4(r17)
   2b324:	10bdffcc 	andi	r2,r2,63487
   2b328:	8880030d 	sth	r2,12(r17)
   2b32c:	88c00015 	stw	r3,0(r17)
   2b330:	003fb306 	br	2b200 <__alt_data_end+0xf402b200>
   2b334:	98800017 	ldw	r2,0(r19)
   2b338:	103fea26 	beq	r2,zero,2b2e4 <__alt_data_end+0xf402b2e4>
   2b33c:	00c00744 	movi	r3,29
   2b340:	10c00226 	beq	r2,r3,2b34c <__sflush_r+0x1fc>
   2b344:	00c00584 	movi	r3,22
   2b348:	10c0031e 	bne	r2,r3,2b358 <__sflush_r+0x208>
   2b34c:	9c000015 	stw	r16,0(r19)
   2b350:	0005883a 	mov	r2,zero
   2b354:	003fb306 	br	2b224 <__alt_data_end+0xf402b224>
   2b358:	88c0030b 	ldhu	r3,12(r17)
   2b35c:	3005883a 	mov	r2,r6
   2b360:	18c01014 	ori	r3,r3,64
   2b364:	88c0030d 	sth	r3,12(r17)
   2b368:	003fae06 	br	2b224 <__alt_data_end+0xf402b224>

0002b36c <_fflush_r>:
   2b36c:	defffd04 	addi	sp,sp,-12
   2b370:	dc000115 	stw	r16,4(sp)
   2b374:	dfc00215 	stw	ra,8(sp)
   2b378:	2021883a 	mov	r16,r4
   2b37c:	20000226 	beq	r4,zero,2b388 <_fflush_r+0x1c>
   2b380:	20800e17 	ldw	r2,56(r4)
   2b384:	10000c26 	beq	r2,zero,2b3b8 <_fflush_r+0x4c>
   2b388:	2880030f 	ldh	r2,12(r5)
   2b38c:	1000051e 	bne	r2,zero,2b3a4 <_fflush_r+0x38>
   2b390:	0005883a 	mov	r2,zero
   2b394:	dfc00217 	ldw	ra,8(sp)
   2b398:	dc000117 	ldw	r16,4(sp)
   2b39c:	dec00304 	addi	sp,sp,12
   2b3a0:	f800283a 	ret
   2b3a4:	8009883a 	mov	r4,r16
   2b3a8:	dfc00217 	ldw	ra,8(sp)
   2b3ac:	dc000117 	ldw	r16,4(sp)
   2b3b0:	dec00304 	addi	sp,sp,12
   2b3b4:	002b1501 	jmpi	2b150 <__sflush_r>
   2b3b8:	d9400015 	stw	r5,0(sp)
   2b3bc:	002b7480 	call	2b748 <__sinit>
   2b3c0:	d9400017 	ldw	r5,0(sp)
   2b3c4:	003ff006 	br	2b388 <__alt_data_end+0xf402b388>

0002b3c8 <fflush>:
   2b3c8:	20000526 	beq	r4,zero,2b3e0 <fflush+0x18>
   2b3cc:	008000f4 	movhi	r2,3
   2b3d0:	109ea004 	addi	r2,r2,31360
   2b3d4:	200b883a 	mov	r5,r4
   2b3d8:	11000017 	ldw	r4,0(r2)
   2b3dc:	002b36c1 	jmpi	2b36c <_fflush_r>
   2b3e0:	008000f4 	movhi	r2,3
   2b3e4:	109e9f04 	addi	r2,r2,31356
   2b3e8:	11000017 	ldw	r4,0(r2)
   2b3ec:	014000f4 	movhi	r5,3
   2b3f0:	296cdb04 	addi	r5,r5,-19604
   2b3f4:	002c14c1 	jmpi	2c14c <_fwalk_reent>

0002b3f8 <__fp_unlock>:
   2b3f8:	0005883a 	mov	r2,zero
   2b3fc:	f800283a 	ret

0002b400 <_cleanup_r>:
   2b400:	014000f4 	movhi	r5,3
   2b404:	29403c04 	addi	r5,r5,240
   2b408:	002c14c1 	jmpi	2c14c <_fwalk_reent>

0002b40c <__sinit.part.1>:
   2b40c:	defff704 	addi	sp,sp,-36
   2b410:	00c000f4 	movhi	r3,3
   2b414:	dfc00815 	stw	ra,32(sp)
   2b418:	ddc00715 	stw	r23,28(sp)
   2b41c:	dd800615 	stw	r22,24(sp)
   2b420:	dd400515 	stw	r21,20(sp)
   2b424:	dd000415 	stw	r20,16(sp)
   2b428:	dcc00315 	stw	r19,12(sp)
   2b42c:	dc800215 	stw	r18,8(sp)
   2b430:	dc400115 	stw	r17,4(sp)
   2b434:	dc000015 	stw	r16,0(sp)
   2b438:	18ed0004 	addi	r3,r3,-19456
   2b43c:	24000117 	ldw	r16,4(r4)
   2b440:	20c00f15 	stw	r3,60(r4)
   2b444:	2080bb04 	addi	r2,r4,748
   2b448:	00c000c4 	movi	r3,3
   2b44c:	20c0b915 	stw	r3,740(r4)
   2b450:	2080ba15 	stw	r2,744(r4)
   2b454:	2000b815 	stw	zero,736(r4)
   2b458:	05c00204 	movi	r23,8
   2b45c:	00800104 	movi	r2,4
   2b460:	2025883a 	mov	r18,r4
   2b464:	b80d883a 	mov	r6,r23
   2b468:	81001704 	addi	r4,r16,92
   2b46c:	000b883a 	mov	r5,zero
   2b470:	80000015 	stw	zero,0(r16)
   2b474:	80000115 	stw	zero,4(r16)
   2b478:	80000215 	stw	zero,8(r16)
   2b47c:	8080030d 	sth	r2,12(r16)
   2b480:	80001915 	stw	zero,100(r16)
   2b484:	8000038d 	sth	zero,14(r16)
   2b488:	80000415 	stw	zero,16(r16)
   2b48c:	80000515 	stw	zero,20(r16)
   2b490:	80000615 	stw	zero,24(r16)
   2b494:	002d03c0 	call	2d03c <memset>
   2b498:	058000f4 	movhi	r22,3
   2b49c:	94400217 	ldw	r17,8(r18)
   2b4a0:	054000f4 	movhi	r21,3
   2b4a4:	050000f4 	movhi	r20,3
   2b4a8:	04c000f4 	movhi	r19,3
   2b4ac:	b5b9c604 	addi	r22,r22,-6376
   2b4b0:	ad79dd04 	addi	r21,r21,-6284
   2b4b4:	a539fc04 	addi	r20,r20,-6160
   2b4b8:	9cfa1304 	addi	r19,r19,-6068
   2b4bc:	85800815 	stw	r22,32(r16)
   2b4c0:	85400915 	stw	r21,36(r16)
   2b4c4:	85000a15 	stw	r20,40(r16)
   2b4c8:	84c00b15 	stw	r19,44(r16)
   2b4cc:	84000715 	stw	r16,28(r16)
   2b4d0:	00800284 	movi	r2,10
   2b4d4:	8880030d 	sth	r2,12(r17)
   2b4d8:	00800044 	movi	r2,1
   2b4dc:	b80d883a 	mov	r6,r23
   2b4e0:	89001704 	addi	r4,r17,92
   2b4e4:	000b883a 	mov	r5,zero
   2b4e8:	88000015 	stw	zero,0(r17)
   2b4ec:	88000115 	stw	zero,4(r17)
   2b4f0:	88000215 	stw	zero,8(r17)
   2b4f4:	88001915 	stw	zero,100(r17)
   2b4f8:	8880038d 	sth	r2,14(r17)
   2b4fc:	88000415 	stw	zero,16(r17)
   2b500:	88000515 	stw	zero,20(r17)
   2b504:	88000615 	stw	zero,24(r17)
   2b508:	002d03c0 	call	2d03c <memset>
   2b50c:	94000317 	ldw	r16,12(r18)
   2b510:	00800484 	movi	r2,18
   2b514:	8c400715 	stw	r17,28(r17)
   2b518:	8d800815 	stw	r22,32(r17)
   2b51c:	8d400915 	stw	r21,36(r17)
   2b520:	8d000a15 	stw	r20,40(r17)
   2b524:	8cc00b15 	stw	r19,44(r17)
   2b528:	8080030d 	sth	r2,12(r16)
   2b52c:	00800084 	movi	r2,2
   2b530:	80000015 	stw	zero,0(r16)
   2b534:	80000115 	stw	zero,4(r16)
   2b538:	80000215 	stw	zero,8(r16)
   2b53c:	80001915 	stw	zero,100(r16)
   2b540:	8080038d 	sth	r2,14(r16)
   2b544:	80000415 	stw	zero,16(r16)
   2b548:	80000515 	stw	zero,20(r16)
   2b54c:	80000615 	stw	zero,24(r16)
   2b550:	b80d883a 	mov	r6,r23
   2b554:	000b883a 	mov	r5,zero
   2b558:	81001704 	addi	r4,r16,92
   2b55c:	002d03c0 	call	2d03c <memset>
   2b560:	00800044 	movi	r2,1
   2b564:	84000715 	stw	r16,28(r16)
   2b568:	85800815 	stw	r22,32(r16)
   2b56c:	85400915 	stw	r21,36(r16)
   2b570:	85000a15 	stw	r20,40(r16)
   2b574:	84c00b15 	stw	r19,44(r16)
   2b578:	90800e15 	stw	r2,56(r18)
   2b57c:	dfc00817 	ldw	ra,32(sp)
   2b580:	ddc00717 	ldw	r23,28(sp)
   2b584:	dd800617 	ldw	r22,24(sp)
   2b588:	dd400517 	ldw	r21,20(sp)
   2b58c:	dd000417 	ldw	r20,16(sp)
   2b590:	dcc00317 	ldw	r19,12(sp)
   2b594:	dc800217 	ldw	r18,8(sp)
   2b598:	dc400117 	ldw	r17,4(sp)
   2b59c:	dc000017 	ldw	r16,0(sp)
   2b5a0:	dec00904 	addi	sp,sp,36
   2b5a4:	f800283a 	ret

0002b5a8 <__fp_lock>:
   2b5a8:	0005883a 	mov	r2,zero
   2b5ac:	f800283a 	ret

0002b5b0 <__sfmoreglue>:
   2b5b0:	defffc04 	addi	sp,sp,-16
   2b5b4:	dc400115 	stw	r17,4(sp)
   2b5b8:	2c7fffc4 	addi	r17,r5,-1
   2b5bc:	8c401a24 	muli	r17,r17,104
   2b5c0:	dc800215 	stw	r18,8(sp)
   2b5c4:	2825883a 	mov	r18,r5
   2b5c8:	89401d04 	addi	r5,r17,116
   2b5cc:	dc000015 	stw	r16,0(sp)
   2b5d0:	dfc00315 	stw	ra,12(sp)
   2b5d4:	002c4a80 	call	2c4a8 <_malloc_r>
   2b5d8:	1021883a 	mov	r16,r2
   2b5dc:	10000726 	beq	r2,zero,2b5fc <__sfmoreglue+0x4c>
   2b5e0:	11000304 	addi	r4,r2,12
   2b5e4:	10000015 	stw	zero,0(r2)
   2b5e8:	14800115 	stw	r18,4(r2)
   2b5ec:	11000215 	stw	r4,8(r2)
   2b5f0:	89801a04 	addi	r6,r17,104
   2b5f4:	000b883a 	mov	r5,zero
   2b5f8:	002d03c0 	call	2d03c <memset>
   2b5fc:	8005883a 	mov	r2,r16
   2b600:	dfc00317 	ldw	ra,12(sp)
   2b604:	dc800217 	ldw	r18,8(sp)
   2b608:	dc400117 	ldw	r17,4(sp)
   2b60c:	dc000017 	ldw	r16,0(sp)
   2b610:	dec00404 	addi	sp,sp,16
   2b614:	f800283a 	ret

0002b618 <__sfp>:
   2b618:	defffb04 	addi	sp,sp,-20
   2b61c:	dc000015 	stw	r16,0(sp)
   2b620:	040000f4 	movhi	r16,3
   2b624:	841e9f04 	addi	r16,r16,31356
   2b628:	dcc00315 	stw	r19,12(sp)
   2b62c:	2027883a 	mov	r19,r4
   2b630:	81000017 	ldw	r4,0(r16)
   2b634:	dfc00415 	stw	ra,16(sp)
   2b638:	dc800215 	stw	r18,8(sp)
   2b63c:	20800e17 	ldw	r2,56(r4)
   2b640:	dc400115 	stw	r17,4(sp)
   2b644:	1000021e 	bne	r2,zero,2b650 <__sfp+0x38>
   2b648:	002b40c0 	call	2b40c <__sinit.part.1>
   2b64c:	81000017 	ldw	r4,0(r16)
   2b650:	2480b804 	addi	r18,r4,736
   2b654:	047fffc4 	movi	r17,-1
   2b658:	91000117 	ldw	r4,4(r18)
   2b65c:	94000217 	ldw	r16,8(r18)
   2b660:	213fffc4 	addi	r4,r4,-1
   2b664:	20000a16 	blt	r4,zero,2b690 <__sfp+0x78>
   2b668:	8080030f 	ldh	r2,12(r16)
   2b66c:	10000c26 	beq	r2,zero,2b6a0 <__sfp+0x88>
   2b670:	80c01d04 	addi	r3,r16,116
   2b674:	00000206 	br	2b680 <__sfp+0x68>
   2b678:	18bfe60f 	ldh	r2,-104(r3)
   2b67c:	10000826 	beq	r2,zero,2b6a0 <__sfp+0x88>
   2b680:	213fffc4 	addi	r4,r4,-1
   2b684:	1c3ffd04 	addi	r16,r3,-12
   2b688:	18c01a04 	addi	r3,r3,104
   2b68c:	247ffa1e 	bne	r4,r17,2b678 <__alt_data_end+0xf402b678>
   2b690:	90800017 	ldw	r2,0(r18)
   2b694:	10001d26 	beq	r2,zero,2b70c <__sfp+0xf4>
   2b698:	1025883a 	mov	r18,r2
   2b69c:	003fee06 	br	2b658 <__alt_data_end+0xf402b658>
   2b6a0:	00bfffc4 	movi	r2,-1
   2b6a4:	8080038d 	sth	r2,14(r16)
   2b6a8:	00800044 	movi	r2,1
   2b6ac:	8080030d 	sth	r2,12(r16)
   2b6b0:	80001915 	stw	zero,100(r16)
   2b6b4:	80000015 	stw	zero,0(r16)
   2b6b8:	80000215 	stw	zero,8(r16)
   2b6bc:	80000115 	stw	zero,4(r16)
   2b6c0:	80000415 	stw	zero,16(r16)
   2b6c4:	80000515 	stw	zero,20(r16)
   2b6c8:	80000615 	stw	zero,24(r16)
   2b6cc:	01800204 	movi	r6,8
   2b6d0:	000b883a 	mov	r5,zero
   2b6d4:	81001704 	addi	r4,r16,92
   2b6d8:	002d03c0 	call	2d03c <memset>
   2b6dc:	8005883a 	mov	r2,r16
   2b6e0:	80000c15 	stw	zero,48(r16)
   2b6e4:	80000d15 	stw	zero,52(r16)
   2b6e8:	80001115 	stw	zero,68(r16)
   2b6ec:	80001215 	stw	zero,72(r16)
   2b6f0:	dfc00417 	ldw	ra,16(sp)
   2b6f4:	dcc00317 	ldw	r19,12(sp)
   2b6f8:	dc800217 	ldw	r18,8(sp)
   2b6fc:	dc400117 	ldw	r17,4(sp)
   2b700:	dc000017 	ldw	r16,0(sp)
   2b704:	dec00504 	addi	sp,sp,20
   2b708:	f800283a 	ret
   2b70c:	01400104 	movi	r5,4
   2b710:	9809883a 	mov	r4,r19
   2b714:	002b5b00 	call	2b5b0 <__sfmoreglue>
   2b718:	90800015 	stw	r2,0(r18)
   2b71c:	103fde1e 	bne	r2,zero,2b698 <__alt_data_end+0xf402b698>
   2b720:	00800304 	movi	r2,12
   2b724:	98800015 	stw	r2,0(r19)
   2b728:	0005883a 	mov	r2,zero
   2b72c:	003ff006 	br	2b6f0 <__alt_data_end+0xf402b6f0>

0002b730 <_cleanup>:
   2b730:	008000f4 	movhi	r2,3
   2b734:	109e9f04 	addi	r2,r2,31356
   2b738:	11000017 	ldw	r4,0(r2)
   2b73c:	014000f4 	movhi	r5,3
   2b740:	29403c04 	addi	r5,r5,240
   2b744:	002c14c1 	jmpi	2c14c <_fwalk_reent>

0002b748 <__sinit>:
   2b748:	20800e17 	ldw	r2,56(r4)
   2b74c:	10000126 	beq	r2,zero,2b754 <__sinit+0xc>
   2b750:	f800283a 	ret
   2b754:	002b40c1 	jmpi	2b40c <__sinit.part.1>

0002b758 <__sfp_lock_acquire>:
   2b758:	f800283a 	ret

0002b75c <__sfp_lock_release>:
   2b75c:	f800283a 	ret

0002b760 <__sinit_lock_acquire>:
   2b760:	f800283a 	ret

0002b764 <__sinit_lock_release>:
   2b764:	f800283a 	ret

0002b768 <__fp_lock_all>:
   2b768:	008000f4 	movhi	r2,3
   2b76c:	109ea004 	addi	r2,r2,31360
   2b770:	11000017 	ldw	r4,0(r2)
   2b774:	014000f4 	movhi	r5,3
   2b778:	296d6a04 	addi	r5,r5,-19032
   2b77c:	002c0881 	jmpi	2c088 <_fwalk>

0002b780 <__fp_unlock_all>:
   2b780:	008000f4 	movhi	r2,3
   2b784:	109ea004 	addi	r2,r2,31360
   2b788:	11000017 	ldw	r4,0(r2)
   2b78c:	014000f4 	movhi	r5,3
   2b790:	296cfe04 	addi	r5,r5,-19464
   2b794:	002c0881 	jmpi	2c088 <_fwalk>

0002b798 <_malloc_trim_r>:
   2b798:	defffb04 	addi	sp,sp,-20
   2b79c:	dcc00315 	stw	r19,12(sp)
   2b7a0:	04c000f4 	movhi	r19,3
   2b7a4:	dc800215 	stw	r18,8(sp)
   2b7a8:	dc400115 	stw	r17,4(sp)
   2b7ac:	dc000015 	stw	r16,0(sp)
   2b7b0:	dfc00415 	stw	ra,16(sp)
   2b7b4:	2821883a 	mov	r16,r5
   2b7b8:	9cd8da04 	addi	r19,r19,25448
   2b7bc:	2025883a 	mov	r18,r4
   2b7c0:	00319800 	call	31980 <__malloc_lock>
   2b7c4:	98800217 	ldw	r2,8(r19)
   2b7c8:	14400117 	ldw	r17,4(r2)
   2b7cc:	00bfff04 	movi	r2,-4
   2b7d0:	88a2703a 	and	r17,r17,r2
   2b7d4:	8c21c83a 	sub	r16,r17,r16
   2b7d8:	8403fbc4 	addi	r16,r16,4079
   2b7dc:	8020d33a 	srli	r16,r16,12
   2b7e0:	0083ffc4 	movi	r2,4095
   2b7e4:	843fffc4 	addi	r16,r16,-1
   2b7e8:	8020933a 	slli	r16,r16,12
   2b7ec:	1400060e 	bge	r2,r16,2b808 <_malloc_trim_r+0x70>
   2b7f0:	000b883a 	mov	r5,zero
   2b7f4:	9009883a 	mov	r4,r18
   2b7f8:	002e6c40 	call	2e6c4 <_sbrk_r>
   2b7fc:	98c00217 	ldw	r3,8(r19)
   2b800:	1c47883a 	add	r3,r3,r17
   2b804:	10c00a26 	beq	r2,r3,2b830 <_malloc_trim_r+0x98>
   2b808:	9009883a 	mov	r4,r18
   2b80c:	00319a40 	call	319a4 <__malloc_unlock>
   2b810:	0005883a 	mov	r2,zero
   2b814:	dfc00417 	ldw	ra,16(sp)
   2b818:	dcc00317 	ldw	r19,12(sp)
   2b81c:	dc800217 	ldw	r18,8(sp)
   2b820:	dc400117 	ldw	r17,4(sp)
   2b824:	dc000017 	ldw	r16,0(sp)
   2b828:	dec00504 	addi	sp,sp,20
   2b82c:	f800283a 	ret
   2b830:	040bc83a 	sub	r5,zero,r16
   2b834:	9009883a 	mov	r4,r18
   2b838:	002e6c40 	call	2e6c4 <_sbrk_r>
   2b83c:	00ffffc4 	movi	r3,-1
   2b840:	10c00d26 	beq	r2,r3,2b878 <_malloc_trim_r+0xe0>
   2b844:	00c00134 	movhi	r3,4
   2b848:	18e5c404 	addi	r3,r3,-26864
   2b84c:	18800017 	ldw	r2,0(r3)
   2b850:	99000217 	ldw	r4,8(r19)
   2b854:	8c23c83a 	sub	r17,r17,r16
   2b858:	8c400054 	ori	r17,r17,1
   2b85c:	1421c83a 	sub	r16,r2,r16
   2b860:	24400115 	stw	r17,4(r4)
   2b864:	9009883a 	mov	r4,r18
   2b868:	1c000015 	stw	r16,0(r3)
   2b86c:	00319a40 	call	319a4 <__malloc_unlock>
   2b870:	00800044 	movi	r2,1
   2b874:	003fe706 	br	2b814 <__alt_data_end+0xf402b814>
   2b878:	000b883a 	mov	r5,zero
   2b87c:	9009883a 	mov	r4,r18
   2b880:	002e6c40 	call	2e6c4 <_sbrk_r>
   2b884:	99000217 	ldw	r4,8(r19)
   2b888:	014003c4 	movi	r5,15
   2b88c:	1107c83a 	sub	r3,r2,r4
   2b890:	28ffdd0e 	bge	r5,r3,2b808 <__alt_data_end+0xf402b808>
   2b894:	014000f4 	movhi	r5,3
   2b898:	295ea204 	addi	r5,r5,31368
   2b89c:	29400017 	ldw	r5,0(r5)
   2b8a0:	18c00054 	ori	r3,r3,1
   2b8a4:	20c00115 	stw	r3,4(r4)
   2b8a8:	00c00134 	movhi	r3,4
   2b8ac:	1145c83a 	sub	r2,r2,r5
   2b8b0:	18e5c404 	addi	r3,r3,-26864
   2b8b4:	18800015 	stw	r2,0(r3)
   2b8b8:	003fd306 	br	2b808 <__alt_data_end+0xf402b808>

0002b8bc <_free_r>:
   2b8bc:	28004126 	beq	r5,zero,2b9c4 <_free_r+0x108>
   2b8c0:	defffd04 	addi	sp,sp,-12
   2b8c4:	dc400115 	stw	r17,4(sp)
   2b8c8:	dc000015 	stw	r16,0(sp)
   2b8cc:	2023883a 	mov	r17,r4
   2b8d0:	2821883a 	mov	r16,r5
   2b8d4:	dfc00215 	stw	ra,8(sp)
   2b8d8:	00319800 	call	31980 <__malloc_lock>
   2b8dc:	81ffff17 	ldw	r7,-4(r16)
   2b8e0:	00bfff84 	movi	r2,-2
   2b8e4:	010000f4 	movhi	r4,3
   2b8e8:	81bffe04 	addi	r6,r16,-8
   2b8ec:	3884703a 	and	r2,r7,r2
   2b8f0:	2118da04 	addi	r4,r4,25448
   2b8f4:	308b883a 	add	r5,r6,r2
   2b8f8:	2a400117 	ldw	r9,4(r5)
   2b8fc:	22000217 	ldw	r8,8(r4)
   2b900:	00ffff04 	movi	r3,-4
   2b904:	48c6703a 	and	r3,r9,r3
   2b908:	2a005726 	beq	r5,r8,2ba68 <_free_r+0x1ac>
   2b90c:	28c00115 	stw	r3,4(r5)
   2b910:	39c0004c 	andi	r7,r7,1
   2b914:	3800091e 	bne	r7,zero,2b93c <_free_r+0x80>
   2b918:	823ffe17 	ldw	r8,-8(r16)
   2b91c:	22400204 	addi	r9,r4,8
   2b920:	320dc83a 	sub	r6,r6,r8
   2b924:	31c00217 	ldw	r7,8(r6)
   2b928:	1205883a 	add	r2,r2,r8
   2b92c:	3a406526 	beq	r7,r9,2bac4 <_free_r+0x208>
   2b930:	32000317 	ldw	r8,12(r6)
   2b934:	3a000315 	stw	r8,12(r7)
   2b938:	41c00215 	stw	r7,8(r8)
   2b93c:	28cf883a 	add	r7,r5,r3
   2b940:	39c00117 	ldw	r7,4(r7)
   2b944:	39c0004c 	andi	r7,r7,1
   2b948:	38003a26 	beq	r7,zero,2ba34 <_free_r+0x178>
   2b94c:	10c00054 	ori	r3,r2,1
   2b950:	30c00115 	stw	r3,4(r6)
   2b954:	3087883a 	add	r3,r6,r2
   2b958:	18800015 	stw	r2,0(r3)
   2b95c:	00c07fc4 	movi	r3,511
   2b960:	18801936 	bltu	r3,r2,2b9c8 <_free_r+0x10c>
   2b964:	1004d0fa 	srli	r2,r2,3
   2b968:	01c00044 	movi	r7,1
   2b96c:	21400117 	ldw	r5,4(r4)
   2b970:	10c00044 	addi	r3,r2,1
   2b974:	18c7883a 	add	r3,r3,r3
   2b978:	1005d0ba 	srai	r2,r2,2
   2b97c:	18c7883a 	add	r3,r3,r3
   2b980:	18c7883a 	add	r3,r3,r3
   2b984:	1907883a 	add	r3,r3,r4
   2b988:	3884983a 	sll	r2,r7,r2
   2b98c:	19c00017 	ldw	r7,0(r3)
   2b990:	1a3ffe04 	addi	r8,r3,-8
   2b994:	1144b03a 	or	r2,r2,r5
   2b998:	32000315 	stw	r8,12(r6)
   2b99c:	31c00215 	stw	r7,8(r6)
   2b9a0:	20800115 	stw	r2,4(r4)
   2b9a4:	19800015 	stw	r6,0(r3)
   2b9a8:	39800315 	stw	r6,12(r7)
   2b9ac:	8809883a 	mov	r4,r17
   2b9b0:	dfc00217 	ldw	ra,8(sp)
   2b9b4:	dc400117 	ldw	r17,4(sp)
   2b9b8:	dc000017 	ldw	r16,0(sp)
   2b9bc:	dec00304 	addi	sp,sp,12
   2b9c0:	00319a41 	jmpi	319a4 <__malloc_unlock>
   2b9c4:	f800283a 	ret
   2b9c8:	100ad27a 	srli	r5,r2,9
   2b9cc:	00c00104 	movi	r3,4
   2b9d0:	19404a36 	bltu	r3,r5,2bafc <_free_r+0x240>
   2b9d4:	100ad1ba 	srli	r5,r2,6
   2b9d8:	28c00e44 	addi	r3,r5,57
   2b9dc:	18c7883a 	add	r3,r3,r3
   2b9e0:	29400e04 	addi	r5,r5,56
   2b9e4:	18c7883a 	add	r3,r3,r3
   2b9e8:	18c7883a 	add	r3,r3,r3
   2b9ec:	1909883a 	add	r4,r3,r4
   2b9f0:	20c00017 	ldw	r3,0(r4)
   2b9f4:	01c000f4 	movhi	r7,3
   2b9f8:	213ffe04 	addi	r4,r4,-8
   2b9fc:	39d8da04 	addi	r7,r7,25448
   2ba00:	20c04426 	beq	r4,r3,2bb14 <_free_r+0x258>
   2ba04:	01ffff04 	movi	r7,-4
   2ba08:	19400117 	ldw	r5,4(r3)
   2ba0c:	29ca703a 	and	r5,r5,r7
   2ba10:	1140022e 	bgeu	r2,r5,2ba1c <_free_r+0x160>
   2ba14:	18c00217 	ldw	r3,8(r3)
   2ba18:	20fffb1e 	bne	r4,r3,2ba08 <__alt_data_end+0xf402ba08>
   2ba1c:	19000317 	ldw	r4,12(r3)
   2ba20:	31000315 	stw	r4,12(r6)
   2ba24:	30c00215 	stw	r3,8(r6)
   2ba28:	21800215 	stw	r6,8(r4)
   2ba2c:	19800315 	stw	r6,12(r3)
   2ba30:	003fde06 	br	2b9ac <__alt_data_end+0xf402b9ac>
   2ba34:	29c00217 	ldw	r7,8(r5)
   2ba38:	10c5883a 	add	r2,r2,r3
   2ba3c:	00c000f4 	movhi	r3,3
   2ba40:	18d8dc04 	addi	r3,r3,25456
   2ba44:	38c03b26 	beq	r7,r3,2bb34 <_free_r+0x278>
   2ba48:	2a000317 	ldw	r8,12(r5)
   2ba4c:	11400054 	ori	r5,r2,1
   2ba50:	3087883a 	add	r3,r6,r2
   2ba54:	3a000315 	stw	r8,12(r7)
   2ba58:	41c00215 	stw	r7,8(r8)
   2ba5c:	31400115 	stw	r5,4(r6)
   2ba60:	18800015 	stw	r2,0(r3)
   2ba64:	003fbd06 	br	2b95c <__alt_data_end+0xf402b95c>
   2ba68:	39c0004c 	andi	r7,r7,1
   2ba6c:	10c5883a 	add	r2,r2,r3
   2ba70:	3800071e 	bne	r7,zero,2ba90 <_free_r+0x1d4>
   2ba74:	81fffe17 	ldw	r7,-8(r16)
   2ba78:	31cdc83a 	sub	r6,r6,r7
   2ba7c:	30c00317 	ldw	r3,12(r6)
   2ba80:	31400217 	ldw	r5,8(r6)
   2ba84:	11c5883a 	add	r2,r2,r7
   2ba88:	28c00315 	stw	r3,12(r5)
   2ba8c:	19400215 	stw	r5,8(r3)
   2ba90:	10c00054 	ori	r3,r2,1
   2ba94:	30c00115 	stw	r3,4(r6)
   2ba98:	00c000f4 	movhi	r3,3
   2ba9c:	18dea304 	addi	r3,r3,31372
   2baa0:	18c00017 	ldw	r3,0(r3)
   2baa4:	21800215 	stw	r6,8(r4)
   2baa8:	10ffc036 	bltu	r2,r3,2b9ac <__alt_data_end+0xf402b9ac>
   2baac:	00800134 	movhi	r2,4
   2bab0:	10a5bb04 	addi	r2,r2,-26900
   2bab4:	11400017 	ldw	r5,0(r2)
   2bab8:	8809883a 	mov	r4,r17
   2babc:	002b7980 	call	2b798 <_malloc_trim_r>
   2bac0:	003fba06 	br	2b9ac <__alt_data_end+0xf402b9ac>
   2bac4:	28c9883a 	add	r4,r5,r3
   2bac8:	21000117 	ldw	r4,4(r4)
   2bacc:	2100004c 	andi	r4,r4,1
   2bad0:	2000391e 	bne	r4,zero,2bbb8 <_free_r+0x2fc>
   2bad4:	29c00217 	ldw	r7,8(r5)
   2bad8:	29000317 	ldw	r4,12(r5)
   2badc:	1885883a 	add	r2,r3,r2
   2bae0:	10c00054 	ori	r3,r2,1
   2bae4:	39000315 	stw	r4,12(r7)
   2bae8:	21c00215 	stw	r7,8(r4)
   2baec:	30c00115 	stw	r3,4(r6)
   2baf0:	308d883a 	add	r6,r6,r2
   2baf4:	30800015 	stw	r2,0(r6)
   2baf8:	003fac06 	br	2b9ac <__alt_data_end+0xf402b9ac>
   2bafc:	00c00504 	movi	r3,20
   2bb00:	19401536 	bltu	r3,r5,2bb58 <_free_r+0x29c>
   2bb04:	28c01704 	addi	r3,r5,92
   2bb08:	18c7883a 	add	r3,r3,r3
   2bb0c:	294016c4 	addi	r5,r5,91
   2bb10:	003fb406 	br	2b9e4 <__alt_data_end+0xf402b9e4>
   2bb14:	280bd0ba 	srai	r5,r5,2
   2bb18:	00c00044 	movi	r3,1
   2bb1c:	38800117 	ldw	r2,4(r7)
   2bb20:	194a983a 	sll	r5,r3,r5
   2bb24:	2007883a 	mov	r3,r4
   2bb28:	2884b03a 	or	r2,r5,r2
   2bb2c:	38800115 	stw	r2,4(r7)
   2bb30:	003fbb06 	br	2ba20 <__alt_data_end+0xf402ba20>
   2bb34:	21800515 	stw	r6,20(r4)
   2bb38:	21800415 	stw	r6,16(r4)
   2bb3c:	10c00054 	ori	r3,r2,1
   2bb40:	31c00315 	stw	r7,12(r6)
   2bb44:	31c00215 	stw	r7,8(r6)
   2bb48:	30c00115 	stw	r3,4(r6)
   2bb4c:	308d883a 	add	r6,r6,r2
   2bb50:	30800015 	stw	r2,0(r6)
   2bb54:	003f9506 	br	2b9ac <__alt_data_end+0xf402b9ac>
   2bb58:	00c01504 	movi	r3,84
   2bb5c:	19400536 	bltu	r3,r5,2bb74 <_free_r+0x2b8>
   2bb60:	100ad33a 	srli	r5,r2,12
   2bb64:	28c01bc4 	addi	r3,r5,111
   2bb68:	18c7883a 	add	r3,r3,r3
   2bb6c:	29401b84 	addi	r5,r5,110
   2bb70:	003f9c06 	br	2b9e4 <__alt_data_end+0xf402b9e4>
   2bb74:	00c05504 	movi	r3,340
   2bb78:	19400536 	bltu	r3,r5,2bb90 <_free_r+0x2d4>
   2bb7c:	100ad3fa 	srli	r5,r2,15
   2bb80:	28c01e04 	addi	r3,r5,120
   2bb84:	18c7883a 	add	r3,r3,r3
   2bb88:	29401dc4 	addi	r5,r5,119
   2bb8c:	003f9506 	br	2b9e4 <__alt_data_end+0xf402b9e4>
   2bb90:	00c15504 	movi	r3,1364
   2bb94:	19400536 	bltu	r3,r5,2bbac <_free_r+0x2f0>
   2bb98:	100ad4ba 	srli	r5,r2,18
   2bb9c:	28c01f44 	addi	r3,r5,125
   2bba0:	18c7883a 	add	r3,r3,r3
   2bba4:	29401f04 	addi	r5,r5,124
   2bba8:	003f8e06 	br	2b9e4 <__alt_data_end+0xf402b9e4>
   2bbac:	00c03f84 	movi	r3,254
   2bbb0:	01401f84 	movi	r5,126
   2bbb4:	003f8b06 	br	2b9e4 <__alt_data_end+0xf402b9e4>
   2bbb8:	10c00054 	ori	r3,r2,1
   2bbbc:	30c00115 	stw	r3,4(r6)
   2bbc0:	308d883a 	add	r6,r6,r2
   2bbc4:	30800015 	stw	r2,0(r6)
   2bbc8:	003f7806 	br	2b9ac <__alt_data_end+0xf402b9ac>

0002bbcc <__sfvwrite_r>:
   2bbcc:	30800217 	ldw	r2,8(r6)
   2bbd0:	10006726 	beq	r2,zero,2bd70 <__sfvwrite_r+0x1a4>
   2bbd4:	28c0030b 	ldhu	r3,12(r5)
   2bbd8:	defff404 	addi	sp,sp,-48
   2bbdc:	dd400715 	stw	r21,28(sp)
   2bbe0:	dd000615 	stw	r20,24(sp)
   2bbe4:	dc000215 	stw	r16,8(sp)
   2bbe8:	dfc00b15 	stw	ra,44(sp)
   2bbec:	df000a15 	stw	fp,40(sp)
   2bbf0:	ddc00915 	stw	r23,36(sp)
   2bbf4:	dd800815 	stw	r22,32(sp)
   2bbf8:	dcc00515 	stw	r19,20(sp)
   2bbfc:	dc800415 	stw	r18,16(sp)
   2bc00:	dc400315 	stw	r17,12(sp)
   2bc04:	1880020c 	andi	r2,r3,8
   2bc08:	2821883a 	mov	r16,r5
   2bc0c:	202b883a 	mov	r21,r4
   2bc10:	3029883a 	mov	r20,r6
   2bc14:	10002726 	beq	r2,zero,2bcb4 <__sfvwrite_r+0xe8>
   2bc18:	28800417 	ldw	r2,16(r5)
   2bc1c:	10002526 	beq	r2,zero,2bcb4 <__sfvwrite_r+0xe8>
   2bc20:	1880008c 	andi	r2,r3,2
   2bc24:	a4400017 	ldw	r17,0(r20)
   2bc28:	10002a26 	beq	r2,zero,2bcd4 <__sfvwrite_r+0x108>
   2bc2c:	05a00034 	movhi	r22,32768
   2bc30:	0027883a 	mov	r19,zero
   2bc34:	0025883a 	mov	r18,zero
   2bc38:	b5bf0004 	addi	r22,r22,-1024
   2bc3c:	980d883a 	mov	r6,r19
   2bc40:	a809883a 	mov	r4,r21
   2bc44:	90004626 	beq	r18,zero,2bd60 <__sfvwrite_r+0x194>
   2bc48:	900f883a 	mov	r7,r18
   2bc4c:	b480022e 	bgeu	r22,r18,2bc58 <__sfvwrite_r+0x8c>
   2bc50:	01e00034 	movhi	r7,32768
   2bc54:	39ff0004 	addi	r7,r7,-1024
   2bc58:	80800917 	ldw	r2,36(r16)
   2bc5c:	81400717 	ldw	r5,28(r16)
   2bc60:	103ee83a 	callr	r2
   2bc64:	0080570e 	bge	zero,r2,2bdc4 <__sfvwrite_r+0x1f8>
   2bc68:	a0c00217 	ldw	r3,8(r20)
   2bc6c:	98a7883a 	add	r19,r19,r2
   2bc70:	90a5c83a 	sub	r18,r18,r2
   2bc74:	1885c83a 	sub	r2,r3,r2
   2bc78:	a0800215 	stw	r2,8(r20)
   2bc7c:	103fef1e 	bne	r2,zero,2bc3c <__alt_data_end+0xf402bc3c>
   2bc80:	0005883a 	mov	r2,zero
   2bc84:	dfc00b17 	ldw	ra,44(sp)
   2bc88:	df000a17 	ldw	fp,40(sp)
   2bc8c:	ddc00917 	ldw	r23,36(sp)
   2bc90:	dd800817 	ldw	r22,32(sp)
   2bc94:	dd400717 	ldw	r21,28(sp)
   2bc98:	dd000617 	ldw	r20,24(sp)
   2bc9c:	dcc00517 	ldw	r19,20(sp)
   2bca0:	dc800417 	ldw	r18,16(sp)
   2bca4:	dc400317 	ldw	r17,12(sp)
   2bca8:	dc000217 	ldw	r16,8(sp)
   2bcac:	dec00c04 	addi	sp,sp,48
   2bcb0:	f800283a 	ret
   2bcb4:	800b883a 	mov	r5,r16
   2bcb8:	a809883a 	mov	r4,r21
   2bcbc:	00297740 	call	29774 <__swsetup_r>
   2bcc0:	1000eb1e 	bne	r2,zero,2c070 <__sfvwrite_r+0x4a4>
   2bcc4:	80c0030b 	ldhu	r3,12(r16)
   2bcc8:	a4400017 	ldw	r17,0(r20)
   2bccc:	1880008c 	andi	r2,r3,2
   2bcd0:	103fd61e 	bne	r2,zero,2bc2c <__alt_data_end+0xf402bc2c>
   2bcd4:	1880004c 	andi	r2,r3,1
   2bcd8:	10003f1e 	bne	r2,zero,2bdd8 <__sfvwrite_r+0x20c>
   2bcdc:	0039883a 	mov	fp,zero
   2bce0:	0025883a 	mov	r18,zero
   2bce4:	90001a26 	beq	r18,zero,2bd50 <__sfvwrite_r+0x184>
   2bce8:	1880800c 	andi	r2,r3,512
   2bcec:	84c00217 	ldw	r19,8(r16)
   2bcf0:	10002126 	beq	r2,zero,2bd78 <__sfvwrite_r+0x1ac>
   2bcf4:	982f883a 	mov	r23,r19
   2bcf8:	94c09336 	bltu	r18,r19,2bf48 <__sfvwrite_r+0x37c>
   2bcfc:	1881200c 	andi	r2,r3,1152
   2bd00:	10009e1e 	bne	r2,zero,2bf7c <__sfvwrite_r+0x3b0>
   2bd04:	81000017 	ldw	r4,0(r16)
   2bd08:	b80d883a 	mov	r6,r23
   2bd0c:	e00b883a 	mov	r5,fp
   2bd10:	002cee00 	call	2cee0 <memmove>
   2bd14:	80c00217 	ldw	r3,8(r16)
   2bd18:	81000017 	ldw	r4,0(r16)
   2bd1c:	9005883a 	mov	r2,r18
   2bd20:	1ce7c83a 	sub	r19,r3,r19
   2bd24:	25cf883a 	add	r7,r4,r23
   2bd28:	84c00215 	stw	r19,8(r16)
   2bd2c:	81c00015 	stw	r7,0(r16)
   2bd30:	a0c00217 	ldw	r3,8(r20)
   2bd34:	e0b9883a 	add	fp,fp,r2
   2bd38:	90a5c83a 	sub	r18,r18,r2
   2bd3c:	18a7c83a 	sub	r19,r3,r2
   2bd40:	a4c00215 	stw	r19,8(r20)
   2bd44:	983fce26 	beq	r19,zero,2bc80 <__alt_data_end+0xf402bc80>
   2bd48:	80c0030b 	ldhu	r3,12(r16)
   2bd4c:	903fe61e 	bne	r18,zero,2bce8 <__alt_data_end+0xf402bce8>
   2bd50:	8f000017 	ldw	fp,0(r17)
   2bd54:	8c800117 	ldw	r18,4(r17)
   2bd58:	8c400204 	addi	r17,r17,8
   2bd5c:	003fe106 	br	2bce4 <__alt_data_end+0xf402bce4>
   2bd60:	8cc00017 	ldw	r19,0(r17)
   2bd64:	8c800117 	ldw	r18,4(r17)
   2bd68:	8c400204 	addi	r17,r17,8
   2bd6c:	003fb306 	br	2bc3c <__alt_data_end+0xf402bc3c>
   2bd70:	0005883a 	mov	r2,zero
   2bd74:	f800283a 	ret
   2bd78:	81000017 	ldw	r4,0(r16)
   2bd7c:	80800417 	ldw	r2,16(r16)
   2bd80:	11005736 	bltu	r2,r4,2bee0 <__sfvwrite_r+0x314>
   2bd84:	85c00517 	ldw	r23,20(r16)
   2bd88:	95c05536 	bltu	r18,r23,2bee0 <__sfvwrite_r+0x314>
   2bd8c:	00a00034 	movhi	r2,32768
   2bd90:	10bfffc4 	addi	r2,r2,-1
   2bd94:	9009883a 	mov	r4,r18
   2bd98:	1480012e 	bgeu	r2,r18,2bda0 <__sfvwrite_r+0x1d4>
   2bd9c:	1009883a 	mov	r4,r2
   2bda0:	b80b883a 	mov	r5,r23
   2bda4:	00233900 	call	23390 <__divsi3>
   2bda8:	15cf383a 	mul	r7,r2,r23
   2bdac:	81400717 	ldw	r5,28(r16)
   2bdb0:	80800917 	ldw	r2,36(r16)
   2bdb4:	e00d883a 	mov	r6,fp
   2bdb8:	a809883a 	mov	r4,r21
   2bdbc:	103ee83a 	callr	r2
   2bdc0:	00bfdb16 	blt	zero,r2,2bd30 <__alt_data_end+0xf402bd30>
   2bdc4:	8080030b 	ldhu	r2,12(r16)
   2bdc8:	10801014 	ori	r2,r2,64
   2bdcc:	8080030d 	sth	r2,12(r16)
   2bdd0:	00bfffc4 	movi	r2,-1
   2bdd4:	003fab06 	br	2bc84 <__alt_data_end+0xf402bc84>
   2bdd8:	0027883a 	mov	r19,zero
   2bddc:	0011883a 	mov	r8,zero
   2bde0:	0039883a 	mov	fp,zero
   2bde4:	0025883a 	mov	r18,zero
   2bde8:	90001f26 	beq	r18,zero,2be68 <__sfvwrite_r+0x29c>
   2bdec:	40005a26 	beq	r8,zero,2bf58 <__sfvwrite_r+0x38c>
   2bdf0:	982d883a 	mov	r22,r19
   2bdf4:	94c0012e 	bgeu	r18,r19,2bdfc <__sfvwrite_r+0x230>
   2bdf8:	902d883a 	mov	r22,r18
   2bdfc:	81000017 	ldw	r4,0(r16)
   2be00:	80800417 	ldw	r2,16(r16)
   2be04:	b02f883a 	mov	r23,r22
   2be08:	81c00517 	ldw	r7,20(r16)
   2be0c:	1100032e 	bgeu	r2,r4,2be1c <__sfvwrite_r+0x250>
   2be10:	80c00217 	ldw	r3,8(r16)
   2be14:	38c7883a 	add	r3,r7,r3
   2be18:	1d801816 	blt	r3,r22,2be7c <__sfvwrite_r+0x2b0>
   2be1c:	b1c03e16 	blt	r22,r7,2bf18 <__sfvwrite_r+0x34c>
   2be20:	80800917 	ldw	r2,36(r16)
   2be24:	81400717 	ldw	r5,28(r16)
   2be28:	e00d883a 	mov	r6,fp
   2be2c:	da000115 	stw	r8,4(sp)
   2be30:	a809883a 	mov	r4,r21
   2be34:	103ee83a 	callr	r2
   2be38:	102f883a 	mov	r23,r2
   2be3c:	da000117 	ldw	r8,4(sp)
   2be40:	00bfe00e 	bge	zero,r2,2bdc4 <__alt_data_end+0xf402bdc4>
   2be44:	9de7c83a 	sub	r19,r19,r23
   2be48:	98001f26 	beq	r19,zero,2bec8 <__sfvwrite_r+0x2fc>
   2be4c:	a0800217 	ldw	r2,8(r20)
   2be50:	e5f9883a 	add	fp,fp,r23
   2be54:	95e5c83a 	sub	r18,r18,r23
   2be58:	15efc83a 	sub	r23,r2,r23
   2be5c:	a5c00215 	stw	r23,8(r20)
   2be60:	b83f8726 	beq	r23,zero,2bc80 <__alt_data_end+0xf402bc80>
   2be64:	903fe11e 	bne	r18,zero,2bdec <__alt_data_end+0xf402bdec>
   2be68:	8f000017 	ldw	fp,0(r17)
   2be6c:	8c800117 	ldw	r18,4(r17)
   2be70:	0011883a 	mov	r8,zero
   2be74:	8c400204 	addi	r17,r17,8
   2be78:	003fdb06 	br	2bde8 <__alt_data_end+0xf402bde8>
   2be7c:	180d883a 	mov	r6,r3
   2be80:	e00b883a 	mov	r5,fp
   2be84:	da000115 	stw	r8,4(sp)
   2be88:	d8c00015 	stw	r3,0(sp)
   2be8c:	002cee00 	call	2cee0 <memmove>
   2be90:	d8c00017 	ldw	r3,0(sp)
   2be94:	80800017 	ldw	r2,0(r16)
   2be98:	800b883a 	mov	r5,r16
   2be9c:	a809883a 	mov	r4,r21
   2bea0:	10c5883a 	add	r2,r2,r3
   2bea4:	80800015 	stw	r2,0(r16)
   2bea8:	d8c00015 	stw	r3,0(sp)
   2beac:	002b36c0 	call	2b36c <_fflush_r>
   2beb0:	d8c00017 	ldw	r3,0(sp)
   2beb4:	da000117 	ldw	r8,4(sp)
   2beb8:	103fc21e 	bne	r2,zero,2bdc4 <__alt_data_end+0xf402bdc4>
   2bebc:	182f883a 	mov	r23,r3
   2bec0:	9de7c83a 	sub	r19,r19,r23
   2bec4:	983fe11e 	bne	r19,zero,2be4c <__alt_data_end+0xf402be4c>
   2bec8:	800b883a 	mov	r5,r16
   2becc:	a809883a 	mov	r4,r21
   2bed0:	002b36c0 	call	2b36c <_fflush_r>
   2bed4:	103fbb1e 	bne	r2,zero,2bdc4 <__alt_data_end+0xf402bdc4>
   2bed8:	0011883a 	mov	r8,zero
   2bedc:	003fdb06 	br	2be4c <__alt_data_end+0xf402be4c>
   2bee0:	94c0012e 	bgeu	r18,r19,2bee8 <__sfvwrite_r+0x31c>
   2bee4:	9027883a 	mov	r19,r18
   2bee8:	980d883a 	mov	r6,r19
   2beec:	e00b883a 	mov	r5,fp
   2bef0:	002cee00 	call	2cee0 <memmove>
   2bef4:	80800217 	ldw	r2,8(r16)
   2bef8:	80c00017 	ldw	r3,0(r16)
   2befc:	14c5c83a 	sub	r2,r2,r19
   2bf00:	1cc7883a 	add	r3,r3,r19
   2bf04:	80800215 	stw	r2,8(r16)
   2bf08:	80c00015 	stw	r3,0(r16)
   2bf0c:	10004326 	beq	r2,zero,2c01c <__sfvwrite_r+0x450>
   2bf10:	9805883a 	mov	r2,r19
   2bf14:	003f8606 	br	2bd30 <__alt_data_end+0xf402bd30>
   2bf18:	b00d883a 	mov	r6,r22
   2bf1c:	e00b883a 	mov	r5,fp
   2bf20:	da000115 	stw	r8,4(sp)
   2bf24:	002cee00 	call	2cee0 <memmove>
   2bf28:	80800217 	ldw	r2,8(r16)
   2bf2c:	80c00017 	ldw	r3,0(r16)
   2bf30:	da000117 	ldw	r8,4(sp)
   2bf34:	1585c83a 	sub	r2,r2,r22
   2bf38:	1dad883a 	add	r22,r3,r22
   2bf3c:	80800215 	stw	r2,8(r16)
   2bf40:	85800015 	stw	r22,0(r16)
   2bf44:	003fbf06 	br	2be44 <__alt_data_end+0xf402be44>
   2bf48:	81000017 	ldw	r4,0(r16)
   2bf4c:	9027883a 	mov	r19,r18
   2bf50:	902f883a 	mov	r23,r18
   2bf54:	003f6c06 	br	2bd08 <__alt_data_end+0xf402bd08>
   2bf58:	900d883a 	mov	r6,r18
   2bf5c:	01400284 	movi	r5,10
   2bf60:	e009883a 	mov	r4,fp
   2bf64:	002ccb40 	call	2ccb4 <memchr>
   2bf68:	10003e26 	beq	r2,zero,2c064 <__sfvwrite_r+0x498>
   2bf6c:	10800044 	addi	r2,r2,1
   2bf70:	1727c83a 	sub	r19,r2,fp
   2bf74:	02000044 	movi	r8,1
   2bf78:	003f9d06 	br	2bdf0 <__alt_data_end+0xf402bdf0>
   2bf7c:	80800517 	ldw	r2,20(r16)
   2bf80:	81400417 	ldw	r5,16(r16)
   2bf84:	81c00017 	ldw	r7,0(r16)
   2bf88:	10a7883a 	add	r19,r2,r2
   2bf8c:	9885883a 	add	r2,r19,r2
   2bf90:	1026d7fa 	srli	r19,r2,31
   2bf94:	396dc83a 	sub	r22,r7,r5
   2bf98:	b1000044 	addi	r4,r22,1
   2bf9c:	9885883a 	add	r2,r19,r2
   2bfa0:	1027d07a 	srai	r19,r2,1
   2bfa4:	2485883a 	add	r2,r4,r18
   2bfa8:	980d883a 	mov	r6,r19
   2bfac:	9880022e 	bgeu	r19,r2,2bfb8 <__sfvwrite_r+0x3ec>
   2bfb0:	1027883a 	mov	r19,r2
   2bfb4:	100d883a 	mov	r6,r2
   2bfb8:	18c1000c 	andi	r3,r3,1024
   2bfbc:	18001c26 	beq	r3,zero,2c030 <__sfvwrite_r+0x464>
   2bfc0:	300b883a 	mov	r5,r6
   2bfc4:	a809883a 	mov	r4,r21
   2bfc8:	002c4a80 	call	2c4a8 <_malloc_r>
   2bfcc:	102f883a 	mov	r23,r2
   2bfd0:	10002926 	beq	r2,zero,2c078 <__sfvwrite_r+0x4ac>
   2bfd4:	81400417 	ldw	r5,16(r16)
   2bfd8:	b00d883a 	mov	r6,r22
   2bfdc:	1009883a 	mov	r4,r2
   2bfe0:	002cd980 	call	2cd98 <memcpy>
   2bfe4:	8080030b 	ldhu	r2,12(r16)
   2bfe8:	00fedfc4 	movi	r3,-1153
   2bfec:	10c4703a 	and	r2,r2,r3
   2bff0:	10802014 	ori	r2,r2,128
   2bff4:	8080030d 	sth	r2,12(r16)
   2bff8:	bd89883a 	add	r4,r23,r22
   2bffc:	9d8fc83a 	sub	r7,r19,r22
   2c000:	85c00415 	stw	r23,16(r16)
   2c004:	84c00515 	stw	r19,20(r16)
   2c008:	81000015 	stw	r4,0(r16)
   2c00c:	9027883a 	mov	r19,r18
   2c010:	81c00215 	stw	r7,8(r16)
   2c014:	902f883a 	mov	r23,r18
   2c018:	003f3b06 	br	2bd08 <__alt_data_end+0xf402bd08>
   2c01c:	800b883a 	mov	r5,r16
   2c020:	a809883a 	mov	r4,r21
   2c024:	002b36c0 	call	2b36c <_fflush_r>
   2c028:	103fb926 	beq	r2,zero,2bf10 <__alt_data_end+0xf402bf10>
   2c02c:	003f6506 	br	2bdc4 <__alt_data_end+0xf402bdc4>
   2c030:	a809883a 	mov	r4,r21
   2c034:	002e1600 	call	2e160 <_realloc_r>
   2c038:	102f883a 	mov	r23,r2
   2c03c:	103fee1e 	bne	r2,zero,2bff8 <__alt_data_end+0xf402bff8>
   2c040:	81400417 	ldw	r5,16(r16)
   2c044:	a809883a 	mov	r4,r21
   2c048:	002b8bc0 	call	2b8bc <_free_r>
   2c04c:	8080030b 	ldhu	r2,12(r16)
   2c050:	00ffdfc4 	movi	r3,-129
   2c054:	1884703a 	and	r2,r3,r2
   2c058:	00c00304 	movi	r3,12
   2c05c:	a8c00015 	stw	r3,0(r21)
   2c060:	003f5906 	br	2bdc8 <__alt_data_end+0xf402bdc8>
   2c064:	94c00044 	addi	r19,r18,1
   2c068:	02000044 	movi	r8,1
   2c06c:	003f6006 	br	2bdf0 <__alt_data_end+0xf402bdf0>
   2c070:	00bfffc4 	movi	r2,-1
   2c074:	003f0306 	br	2bc84 <__alt_data_end+0xf402bc84>
   2c078:	00800304 	movi	r2,12
   2c07c:	a8800015 	stw	r2,0(r21)
   2c080:	8080030b 	ldhu	r2,12(r16)
   2c084:	003f5006 	br	2bdc8 <__alt_data_end+0xf402bdc8>

0002c088 <_fwalk>:
   2c088:	defff704 	addi	sp,sp,-36
   2c08c:	dd000415 	stw	r20,16(sp)
   2c090:	dfc00815 	stw	ra,32(sp)
   2c094:	ddc00715 	stw	r23,28(sp)
   2c098:	dd800615 	stw	r22,24(sp)
   2c09c:	dd400515 	stw	r21,20(sp)
   2c0a0:	dcc00315 	stw	r19,12(sp)
   2c0a4:	dc800215 	stw	r18,8(sp)
   2c0a8:	dc400115 	stw	r17,4(sp)
   2c0ac:	dc000015 	stw	r16,0(sp)
   2c0b0:	2500b804 	addi	r20,r4,736
   2c0b4:	a0002326 	beq	r20,zero,2c144 <_fwalk+0xbc>
   2c0b8:	282b883a 	mov	r21,r5
   2c0bc:	002f883a 	mov	r23,zero
   2c0c0:	05800044 	movi	r22,1
   2c0c4:	04ffffc4 	movi	r19,-1
   2c0c8:	a4400117 	ldw	r17,4(r20)
   2c0cc:	a4800217 	ldw	r18,8(r20)
   2c0d0:	8c7fffc4 	addi	r17,r17,-1
   2c0d4:	88000d16 	blt	r17,zero,2c10c <_fwalk+0x84>
   2c0d8:	94000304 	addi	r16,r18,12
   2c0dc:	94800384 	addi	r18,r18,14
   2c0e0:	8080000b 	ldhu	r2,0(r16)
   2c0e4:	8c7fffc4 	addi	r17,r17,-1
   2c0e8:	813ffd04 	addi	r4,r16,-12
   2c0ec:	b080042e 	bgeu	r22,r2,2c100 <_fwalk+0x78>
   2c0f0:	9080000f 	ldh	r2,0(r18)
   2c0f4:	14c00226 	beq	r2,r19,2c100 <_fwalk+0x78>
   2c0f8:	a83ee83a 	callr	r21
   2c0fc:	b8aeb03a 	or	r23,r23,r2
   2c100:	84001a04 	addi	r16,r16,104
   2c104:	94801a04 	addi	r18,r18,104
   2c108:	8cfff51e 	bne	r17,r19,2c0e0 <__alt_data_end+0xf402c0e0>
   2c10c:	a5000017 	ldw	r20,0(r20)
   2c110:	a03fed1e 	bne	r20,zero,2c0c8 <__alt_data_end+0xf402c0c8>
   2c114:	b805883a 	mov	r2,r23
   2c118:	dfc00817 	ldw	ra,32(sp)
   2c11c:	ddc00717 	ldw	r23,28(sp)
   2c120:	dd800617 	ldw	r22,24(sp)
   2c124:	dd400517 	ldw	r21,20(sp)
   2c128:	dd000417 	ldw	r20,16(sp)
   2c12c:	dcc00317 	ldw	r19,12(sp)
   2c130:	dc800217 	ldw	r18,8(sp)
   2c134:	dc400117 	ldw	r17,4(sp)
   2c138:	dc000017 	ldw	r16,0(sp)
   2c13c:	dec00904 	addi	sp,sp,36
   2c140:	f800283a 	ret
   2c144:	002f883a 	mov	r23,zero
   2c148:	003ff206 	br	2c114 <__alt_data_end+0xf402c114>

0002c14c <_fwalk_reent>:
   2c14c:	defff704 	addi	sp,sp,-36
   2c150:	dd000415 	stw	r20,16(sp)
   2c154:	dfc00815 	stw	ra,32(sp)
   2c158:	ddc00715 	stw	r23,28(sp)
   2c15c:	dd800615 	stw	r22,24(sp)
   2c160:	dd400515 	stw	r21,20(sp)
   2c164:	dcc00315 	stw	r19,12(sp)
   2c168:	dc800215 	stw	r18,8(sp)
   2c16c:	dc400115 	stw	r17,4(sp)
   2c170:	dc000015 	stw	r16,0(sp)
   2c174:	2500b804 	addi	r20,r4,736
   2c178:	a0002326 	beq	r20,zero,2c208 <_fwalk_reent+0xbc>
   2c17c:	282b883a 	mov	r21,r5
   2c180:	2027883a 	mov	r19,r4
   2c184:	002f883a 	mov	r23,zero
   2c188:	05800044 	movi	r22,1
   2c18c:	04bfffc4 	movi	r18,-1
   2c190:	a4400117 	ldw	r17,4(r20)
   2c194:	a4000217 	ldw	r16,8(r20)
   2c198:	8c7fffc4 	addi	r17,r17,-1
   2c19c:	88000c16 	blt	r17,zero,2c1d0 <_fwalk_reent+0x84>
   2c1a0:	84000304 	addi	r16,r16,12
   2c1a4:	8080000b 	ldhu	r2,0(r16)
   2c1a8:	8c7fffc4 	addi	r17,r17,-1
   2c1ac:	817ffd04 	addi	r5,r16,-12
   2c1b0:	b080052e 	bgeu	r22,r2,2c1c8 <_fwalk_reent+0x7c>
   2c1b4:	8080008f 	ldh	r2,2(r16)
   2c1b8:	9809883a 	mov	r4,r19
   2c1bc:	14800226 	beq	r2,r18,2c1c8 <_fwalk_reent+0x7c>
   2c1c0:	a83ee83a 	callr	r21
   2c1c4:	b8aeb03a 	or	r23,r23,r2
   2c1c8:	84001a04 	addi	r16,r16,104
   2c1cc:	8cbff51e 	bne	r17,r18,2c1a4 <__alt_data_end+0xf402c1a4>
   2c1d0:	a5000017 	ldw	r20,0(r20)
   2c1d4:	a03fee1e 	bne	r20,zero,2c190 <__alt_data_end+0xf402c190>
   2c1d8:	b805883a 	mov	r2,r23
   2c1dc:	dfc00817 	ldw	ra,32(sp)
   2c1e0:	ddc00717 	ldw	r23,28(sp)
   2c1e4:	dd800617 	ldw	r22,24(sp)
   2c1e8:	dd400517 	ldw	r21,20(sp)
   2c1ec:	dd000417 	ldw	r20,16(sp)
   2c1f0:	dcc00317 	ldw	r19,12(sp)
   2c1f4:	dc800217 	ldw	r18,8(sp)
   2c1f8:	dc400117 	ldw	r17,4(sp)
   2c1fc:	dc000017 	ldw	r16,0(sp)
   2c200:	dec00904 	addi	sp,sp,36
   2c204:	f800283a 	ret
   2c208:	002f883a 	mov	r23,zero
   2c20c:	003ff206 	br	2c1d8 <__alt_data_end+0xf402c1d8>

0002c210 <_setlocale_r>:
   2c210:	30001b26 	beq	r6,zero,2c280 <_setlocale_r+0x70>
   2c214:	014000f4 	movhi	r5,3
   2c218:	defffe04 	addi	sp,sp,-8
   2c21c:	29573304 	addi	r5,r5,23756
   2c220:	3009883a 	mov	r4,r6
   2c224:	dc000015 	stw	r16,0(sp)
   2c228:	dfc00115 	stw	ra,4(sp)
   2c22c:	3021883a 	mov	r16,r6
   2c230:	002e8540 	call	2e854 <strcmp>
   2c234:	1000061e 	bne	r2,zero,2c250 <_setlocale_r+0x40>
   2c238:	008000f4 	movhi	r2,3
   2c23c:	10971404 	addi	r2,r2,23632
   2c240:	dfc00117 	ldw	ra,4(sp)
   2c244:	dc000017 	ldw	r16,0(sp)
   2c248:	dec00204 	addi	sp,sp,8
   2c24c:	f800283a 	ret
   2c250:	014000f4 	movhi	r5,3
   2c254:	29571404 	addi	r5,r5,23632
   2c258:	8009883a 	mov	r4,r16
   2c25c:	002e8540 	call	2e854 <strcmp>
   2c260:	103ff526 	beq	r2,zero,2c238 <__alt_data_end+0xf402c238>
   2c264:	014000f4 	movhi	r5,3
   2c268:	29571e04 	addi	r5,r5,23672
   2c26c:	8009883a 	mov	r4,r16
   2c270:	002e8540 	call	2e854 <strcmp>
   2c274:	103ff026 	beq	r2,zero,2c238 <__alt_data_end+0xf402c238>
   2c278:	0005883a 	mov	r2,zero
   2c27c:	003ff006 	br	2c240 <__alt_data_end+0xf402c240>
   2c280:	008000f4 	movhi	r2,3
   2c284:	10971404 	addi	r2,r2,23632
   2c288:	f800283a 	ret

0002c28c <__locale_charset>:
   2c28c:	008000f4 	movhi	r2,3
   2c290:	1098c404 	addi	r2,r2,25360
   2c294:	f800283a 	ret

0002c298 <__locale_mb_cur_max>:
   2c298:	008000f4 	movhi	r2,3
   2c29c:	109ea104 	addi	r2,r2,31364
   2c2a0:	10800017 	ldw	r2,0(r2)
   2c2a4:	f800283a 	ret

0002c2a8 <__locale_msgcharset>:
   2c2a8:	008000f4 	movhi	r2,3
   2c2ac:	1098bc04 	addi	r2,r2,25328
   2c2b0:	f800283a 	ret

0002c2b4 <__locale_cjk_lang>:
   2c2b4:	0005883a 	mov	r2,zero
   2c2b8:	f800283a 	ret

0002c2bc <_localeconv_r>:
   2c2bc:	008000f4 	movhi	r2,3
   2c2c0:	1098cc04 	addi	r2,r2,25392
   2c2c4:	f800283a 	ret

0002c2c8 <setlocale>:
   2c2c8:	008000f4 	movhi	r2,3
   2c2cc:	109ea004 	addi	r2,r2,31360
   2c2d0:	280d883a 	mov	r6,r5
   2c2d4:	200b883a 	mov	r5,r4
   2c2d8:	11000017 	ldw	r4,0(r2)
   2c2dc:	002c2101 	jmpi	2c210 <_setlocale_r>

0002c2e0 <localeconv>:
   2c2e0:	008000f4 	movhi	r2,3
   2c2e4:	1098cc04 	addi	r2,r2,25392
   2c2e8:	f800283a 	ret

0002c2ec <__smakebuf_r>:
   2c2ec:	2880030b 	ldhu	r2,12(r5)
   2c2f0:	10c0008c 	andi	r3,r2,2
   2c2f4:	1800411e 	bne	r3,zero,2c3fc <__smakebuf_r+0x110>
   2c2f8:	deffec04 	addi	sp,sp,-80
   2c2fc:	dc000f15 	stw	r16,60(sp)
   2c300:	2821883a 	mov	r16,r5
   2c304:	2940038f 	ldh	r5,14(r5)
   2c308:	dc401015 	stw	r17,64(sp)
   2c30c:	dfc01315 	stw	ra,76(sp)
   2c310:	dcc01215 	stw	r19,72(sp)
   2c314:	dc801115 	stw	r18,68(sp)
   2c318:	2023883a 	mov	r17,r4
   2c31c:	28001c16 	blt	r5,zero,2c390 <__smakebuf_r+0xa4>
   2c320:	d80d883a 	mov	r6,sp
   2c324:	00303fc0 	call	303fc <_fstat_r>
   2c328:	10001816 	blt	r2,zero,2c38c <__smakebuf_r+0xa0>
   2c32c:	d8800117 	ldw	r2,4(sp)
   2c330:	00e00014 	movui	r3,32768
   2c334:	10bc000c 	andi	r2,r2,61440
   2c338:	14c80020 	cmpeqi	r19,r2,8192
   2c33c:	10c03726 	beq	r2,r3,2c41c <__smakebuf_r+0x130>
   2c340:	80c0030b 	ldhu	r3,12(r16)
   2c344:	18c20014 	ori	r3,r3,2048
   2c348:	80c0030d 	sth	r3,12(r16)
   2c34c:	00c80004 	movi	r3,8192
   2c350:	10c0521e 	bne	r2,r3,2c49c <__smakebuf_r+0x1b0>
   2c354:	8140038f 	ldh	r5,14(r16)
   2c358:	8809883a 	mov	r4,r17
   2c35c:	00304580 	call	30458 <_isatty_r>
   2c360:	10004c26 	beq	r2,zero,2c494 <__smakebuf_r+0x1a8>
   2c364:	8080030b 	ldhu	r2,12(r16)
   2c368:	80c010c4 	addi	r3,r16,67
   2c36c:	80c00015 	stw	r3,0(r16)
   2c370:	10800054 	ori	r2,r2,1
   2c374:	8080030d 	sth	r2,12(r16)
   2c378:	00800044 	movi	r2,1
   2c37c:	80c00415 	stw	r3,16(r16)
   2c380:	80800515 	stw	r2,20(r16)
   2c384:	04810004 	movi	r18,1024
   2c388:	00000706 	br	2c3a8 <__smakebuf_r+0xbc>
   2c38c:	8080030b 	ldhu	r2,12(r16)
   2c390:	10c0200c 	andi	r3,r2,128
   2c394:	18001f1e 	bne	r3,zero,2c414 <__smakebuf_r+0x128>
   2c398:	04810004 	movi	r18,1024
   2c39c:	10820014 	ori	r2,r2,2048
   2c3a0:	8080030d 	sth	r2,12(r16)
   2c3a4:	0027883a 	mov	r19,zero
   2c3a8:	900b883a 	mov	r5,r18
   2c3ac:	8809883a 	mov	r4,r17
   2c3b0:	002c4a80 	call	2c4a8 <_malloc_r>
   2c3b4:	10002c26 	beq	r2,zero,2c468 <__smakebuf_r+0x17c>
   2c3b8:	80c0030b 	ldhu	r3,12(r16)
   2c3bc:	010000f4 	movhi	r4,3
   2c3c0:	212d0004 	addi	r4,r4,-19456
   2c3c4:	89000f15 	stw	r4,60(r17)
   2c3c8:	18c02014 	ori	r3,r3,128
   2c3cc:	80c0030d 	sth	r3,12(r16)
   2c3d0:	80800015 	stw	r2,0(r16)
   2c3d4:	80800415 	stw	r2,16(r16)
   2c3d8:	84800515 	stw	r18,20(r16)
   2c3dc:	98001a1e 	bne	r19,zero,2c448 <__smakebuf_r+0x15c>
   2c3e0:	dfc01317 	ldw	ra,76(sp)
   2c3e4:	dcc01217 	ldw	r19,72(sp)
   2c3e8:	dc801117 	ldw	r18,68(sp)
   2c3ec:	dc401017 	ldw	r17,64(sp)
   2c3f0:	dc000f17 	ldw	r16,60(sp)
   2c3f4:	dec01404 	addi	sp,sp,80
   2c3f8:	f800283a 	ret
   2c3fc:	288010c4 	addi	r2,r5,67
   2c400:	28800015 	stw	r2,0(r5)
   2c404:	28800415 	stw	r2,16(r5)
   2c408:	00800044 	movi	r2,1
   2c40c:	28800515 	stw	r2,20(r5)
   2c410:	f800283a 	ret
   2c414:	04801004 	movi	r18,64
   2c418:	003fe006 	br	2c39c <__alt_data_end+0xf402c39c>
   2c41c:	81000a17 	ldw	r4,40(r16)
   2c420:	00c000f4 	movhi	r3,3
   2c424:	18f9fc04 	addi	r3,r3,-6160
   2c428:	20ffc51e 	bne	r4,r3,2c340 <__alt_data_end+0xf402c340>
   2c42c:	8080030b 	ldhu	r2,12(r16)
   2c430:	04810004 	movi	r18,1024
   2c434:	84801315 	stw	r18,76(r16)
   2c438:	1484b03a 	or	r2,r2,r18
   2c43c:	8080030d 	sth	r2,12(r16)
   2c440:	0027883a 	mov	r19,zero
   2c444:	003fd806 	br	2c3a8 <__alt_data_end+0xf402c3a8>
   2c448:	8140038f 	ldh	r5,14(r16)
   2c44c:	8809883a 	mov	r4,r17
   2c450:	00304580 	call	30458 <_isatty_r>
   2c454:	103fe226 	beq	r2,zero,2c3e0 <__alt_data_end+0xf402c3e0>
   2c458:	8080030b 	ldhu	r2,12(r16)
   2c45c:	10800054 	ori	r2,r2,1
   2c460:	8080030d 	sth	r2,12(r16)
   2c464:	003fde06 	br	2c3e0 <__alt_data_end+0xf402c3e0>
   2c468:	8080030b 	ldhu	r2,12(r16)
   2c46c:	10c0800c 	andi	r3,r2,512
   2c470:	183fdb1e 	bne	r3,zero,2c3e0 <__alt_data_end+0xf402c3e0>
   2c474:	10800094 	ori	r2,r2,2
   2c478:	80c010c4 	addi	r3,r16,67
   2c47c:	8080030d 	sth	r2,12(r16)
   2c480:	00800044 	movi	r2,1
   2c484:	80c00015 	stw	r3,0(r16)
   2c488:	80c00415 	stw	r3,16(r16)
   2c48c:	80800515 	stw	r2,20(r16)
   2c490:	003fd306 	br	2c3e0 <__alt_data_end+0xf402c3e0>
   2c494:	04810004 	movi	r18,1024
   2c498:	003fc306 	br	2c3a8 <__alt_data_end+0xf402c3a8>
   2c49c:	0027883a 	mov	r19,zero
   2c4a0:	04810004 	movi	r18,1024
   2c4a4:	003fc006 	br	2c3a8 <__alt_data_end+0xf402c3a8>

0002c4a8 <_malloc_r>:
   2c4a8:	defff504 	addi	sp,sp,-44
   2c4ac:	dc800315 	stw	r18,12(sp)
   2c4b0:	dfc00a15 	stw	ra,40(sp)
   2c4b4:	df000915 	stw	fp,36(sp)
   2c4b8:	ddc00815 	stw	r23,32(sp)
   2c4bc:	dd800715 	stw	r22,28(sp)
   2c4c0:	dd400615 	stw	r21,24(sp)
   2c4c4:	dd000515 	stw	r20,20(sp)
   2c4c8:	dcc00415 	stw	r19,16(sp)
   2c4cc:	dc400215 	stw	r17,8(sp)
   2c4d0:	dc000115 	stw	r16,4(sp)
   2c4d4:	288002c4 	addi	r2,r5,11
   2c4d8:	00c00584 	movi	r3,22
   2c4dc:	2025883a 	mov	r18,r4
   2c4e0:	18807f2e 	bgeu	r3,r2,2c6e0 <_malloc_r+0x238>
   2c4e4:	047ffe04 	movi	r17,-8
   2c4e8:	1462703a 	and	r17,r2,r17
   2c4ec:	8800a316 	blt	r17,zero,2c77c <_malloc_r+0x2d4>
   2c4f0:	8940a236 	bltu	r17,r5,2c77c <_malloc_r+0x2d4>
   2c4f4:	00319800 	call	31980 <__malloc_lock>
   2c4f8:	00807dc4 	movi	r2,503
   2c4fc:	1441e92e 	bgeu	r2,r17,2cca4 <_malloc_r+0x7fc>
   2c500:	8804d27a 	srli	r2,r17,9
   2c504:	1000a126 	beq	r2,zero,2c78c <_malloc_r+0x2e4>
   2c508:	00c00104 	movi	r3,4
   2c50c:	18811e36 	bltu	r3,r2,2c988 <_malloc_r+0x4e0>
   2c510:	8804d1ba 	srli	r2,r17,6
   2c514:	12000e44 	addi	r8,r2,57
   2c518:	11c00e04 	addi	r7,r2,56
   2c51c:	4209883a 	add	r4,r8,r8
   2c520:	04c000f4 	movhi	r19,3
   2c524:	2109883a 	add	r4,r4,r4
   2c528:	9cd8da04 	addi	r19,r19,25448
   2c52c:	2109883a 	add	r4,r4,r4
   2c530:	9909883a 	add	r4,r19,r4
   2c534:	24000117 	ldw	r16,4(r4)
   2c538:	213ffe04 	addi	r4,r4,-8
   2c53c:	24009726 	beq	r4,r16,2c79c <_malloc_r+0x2f4>
   2c540:	80800117 	ldw	r2,4(r16)
   2c544:	01bfff04 	movi	r6,-4
   2c548:	014003c4 	movi	r5,15
   2c54c:	1184703a 	and	r2,r2,r6
   2c550:	1447c83a 	sub	r3,r2,r17
   2c554:	28c00716 	blt	r5,r3,2c574 <_malloc_r+0xcc>
   2c558:	1800920e 	bge	r3,zero,2c7a4 <_malloc_r+0x2fc>
   2c55c:	84000317 	ldw	r16,12(r16)
   2c560:	24008e26 	beq	r4,r16,2c79c <_malloc_r+0x2f4>
   2c564:	80800117 	ldw	r2,4(r16)
   2c568:	1184703a 	and	r2,r2,r6
   2c56c:	1447c83a 	sub	r3,r2,r17
   2c570:	28fff90e 	bge	r5,r3,2c558 <__alt_data_end+0xf402c558>
   2c574:	3809883a 	mov	r4,r7
   2c578:	018000f4 	movhi	r6,3
   2c57c:	9c000417 	ldw	r16,16(r19)
   2c580:	3198da04 	addi	r6,r6,25448
   2c584:	32000204 	addi	r8,r6,8
   2c588:	82013426 	beq	r16,r8,2ca5c <_malloc_r+0x5b4>
   2c58c:	80c00117 	ldw	r3,4(r16)
   2c590:	00bfff04 	movi	r2,-4
   2c594:	188e703a 	and	r7,r3,r2
   2c598:	3c45c83a 	sub	r2,r7,r17
   2c59c:	00c003c4 	movi	r3,15
   2c5a0:	18811f16 	blt	r3,r2,2ca20 <_malloc_r+0x578>
   2c5a4:	32000515 	stw	r8,20(r6)
   2c5a8:	32000415 	stw	r8,16(r6)
   2c5ac:	10007f0e 	bge	r2,zero,2c7ac <_malloc_r+0x304>
   2c5b0:	00807fc4 	movi	r2,511
   2c5b4:	11c0fd36 	bltu	r2,r7,2c9ac <_malloc_r+0x504>
   2c5b8:	3806d0fa 	srli	r3,r7,3
   2c5bc:	01c00044 	movi	r7,1
   2c5c0:	30800117 	ldw	r2,4(r6)
   2c5c4:	19400044 	addi	r5,r3,1
   2c5c8:	294b883a 	add	r5,r5,r5
   2c5cc:	1807d0ba 	srai	r3,r3,2
   2c5d0:	294b883a 	add	r5,r5,r5
   2c5d4:	294b883a 	add	r5,r5,r5
   2c5d8:	298b883a 	add	r5,r5,r6
   2c5dc:	38c6983a 	sll	r3,r7,r3
   2c5e0:	29c00017 	ldw	r7,0(r5)
   2c5e4:	2a7ffe04 	addi	r9,r5,-8
   2c5e8:	1886b03a 	or	r3,r3,r2
   2c5ec:	82400315 	stw	r9,12(r16)
   2c5f0:	81c00215 	stw	r7,8(r16)
   2c5f4:	30c00115 	stw	r3,4(r6)
   2c5f8:	2c000015 	stw	r16,0(r5)
   2c5fc:	3c000315 	stw	r16,12(r7)
   2c600:	2005d0ba 	srai	r2,r4,2
   2c604:	01400044 	movi	r5,1
   2c608:	288a983a 	sll	r5,r5,r2
   2c60c:	19406f36 	bltu	r3,r5,2c7cc <_malloc_r+0x324>
   2c610:	28c4703a 	and	r2,r5,r3
   2c614:	10000a1e 	bne	r2,zero,2c640 <_malloc_r+0x198>
   2c618:	00bfff04 	movi	r2,-4
   2c61c:	294b883a 	add	r5,r5,r5
   2c620:	2088703a 	and	r4,r4,r2
   2c624:	28c4703a 	and	r2,r5,r3
   2c628:	21000104 	addi	r4,r4,4
   2c62c:	1000041e 	bne	r2,zero,2c640 <_malloc_r+0x198>
   2c630:	294b883a 	add	r5,r5,r5
   2c634:	28c4703a 	and	r2,r5,r3
   2c638:	21000104 	addi	r4,r4,4
   2c63c:	103ffc26 	beq	r2,zero,2c630 <__alt_data_end+0xf402c630>
   2c640:	02bfff04 	movi	r10,-4
   2c644:	024003c4 	movi	r9,15
   2c648:	21800044 	addi	r6,r4,1
   2c64c:	318d883a 	add	r6,r6,r6
   2c650:	318d883a 	add	r6,r6,r6
   2c654:	318d883a 	add	r6,r6,r6
   2c658:	998d883a 	add	r6,r19,r6
   2c65c:	333ffe04 	addi	r12,r6,-8
   2c660:	2017883a 	mov	r11,r4
   2c664:	31800104 	addi	r6,r6,4
   2c668:	34000017 	ldw	r16,0(r6)
   2c66c:	31fffd04 	addi	r7,r6,-12
   2c670:	81c0041e 	bne	r16,r7,2c684 <_malloc_r+0x1dc>
   2c674:	0000fb06 	br	2ca64 <_malloc_r+0x5bc>
   2c678:	1801030e 	bge	r3,zero,2ca88 <_malloc_r+0x5e0>
   2c67c:	84000317 	ldw	r16,12(r16)
   2c680:	81c0f826 	beq	r16,r7,2ca64 <_malloc_r+0x5bc>
   2c684:	80800117 	ldw	r2,4(r16)
   2c688:	1284703a 	and	r2,r2,r10
   2c68c:	1447c83a 	sub	r3,r2,r17
   2c690:	48fff90e 	bge	r9,r3,2c678 <__alt_data_end+0xf402c678>
   2c694:	80800317 	ldw	r2,12(r16)
   2c698:	81000217 	ldw	r4,8(r16)
   2c69c:	89400054 	ori	r5,r17,1
   2c6a0:	81400115 	stw	r5,4(r16)
   2c6a4:	20800315 	stw	r2,12(r4)
   2c6a8:	11000215 	stw	r4,8(r2)
   2c6ac:	8463883a 	add	r17,r16,r17
   2c6b0:	9c400515 	stw	r17,20(r19)
   2c6b4:	9c400415 	stw	r17,16(r19)
   2c6b8:	18800054 	ori	r2,r3,1
   2c6bc:	88800115 	stw	r2,4(r17)
   2c6c0:	8a000315 	stw	r8,12(r17)
   2c6c4:	8a000215 	stw	r8,8(r17)
   2c6c8:	88e3883a 	add	r17,r17,r3
   2c6cc:	88c00015 	stw	r3,0(r17)
   2c6d0:	9009883a 	mov	r4,r18
   2c6d4:	00319a40 	call	319a4 <__malloc_unlock>
   2c6d8:	80800204 	addi	r2,r16,8
   2c6dc:	00001b06 	br	2c74c <_malloc_r+0x2a4>
   2c6e0:	04400404 	movi	r17,16
   2c6e4:	89402536 	bltu	r17,r5,2c77c <_malloc_r+0x2d4>
   2c6e8:	00319800 	call	31980 <__malloc_lock>
   2c6ec:	00800184 	movi	r2,6
   2c6f0:	01000084 	movi	r4,2
   2c6f4:	04c000f4 	movhi	r19,3
   2c6f8:	1085883a 	add	r2,r2,r2
   2c6fc:	9cd8da04 	addi	r19,r19,25448
   2c700:	1085883a 	add	r2,r2,r2
   2c704:	9885883a 	add	r2,r19,r2
   2c708:	14000117 	ldw	r16,4(r2)
   2c70c:	10fffe04 	addi	r3,r2,-8
   2c710:	80c0d926 	beq	r16,r3,2ca78 <_malloc_r+0x5d0>
   2c714:	80c00117 	ldw	r3,4(r16)
   2c718:	81000317 	ldw	r4,12(r16)
   2c71c:	00bfff04 	movi	r2,-4
   2c720:	1884703a 	and	r2,r3,r2
   2c724:	81400217 	ldw	r5,8(r16)
   2c728:	8085883a 	add	r2,r16,r2
   2c72c:	10c00117 	ldw	r3,4(r2)
   2c730:	29000315 	stw	r4,12(r5)
   2c734:	21400215 	stw	r5,8(r4)
   2c738:	18c00054 	ori	r3,r3,1
   2c73c:	10c00115 	stw	r3,4(r2)
   2c740:	9009883a 	mov	r4,r18
   2c744:	00319a40 	call	319a4 <__malloc_unlock>
   2c748:	80800204 	addi	r2,r16,8
   2c74c:	dfc00a17 	ldw	ra,40(sp)
   2c750:	df000917 	ldw	fp,36(sp)
   2c754:	ddc00817 	ldw	r23,32(sp)
   2c758:	dd800717 	ldw	r22,28(sp)
   2c75c:	dd400617 	ldw	r21,24(sp)
   2c760:	dd000517 	ldw	r20,20(sp)
   2c764:	dcc00417 	ldw	r19,16(sp)
   2c768:	dc800317 	ldw	r18,12(sp)
   2c76c:	dc400217 	ldw	r17,8(sp)
   2c770:	dc000117 	ldw	r16,4(sp)
   2c774:	dec00b04 	addi	sp,sp,44
   2c778:	f800283a 	ret
   2c77c:	00800304 	movi	r2,12
   2c780:	90800015 	stw	r2,0(r18)
   2c784:	0005883a 	mov	r2,zero
   2c788:	003ff006 	br	2c74c <__alt_data_end+0xf402c74c>
   2c78c:	01002004 	movi	r4,128
   2c790:	02001004 	movi	r8,64
   2c794:	01c00fc4 	movi	r7,63
   2c798:	003f6106 	br	2c520 <__alt_data_end+0xf402c520>
   2c79c:	4009883a 	mov	r4,r8
   2c7a0:	003f7506 	br	2c578 <__alt_data_end+0xf402c578>
   2c7a4:	81000317 	ldw	r4,12(r16)
   2c7a8:	003fde06 	br	2c724 <__alt_data_end+0xf402c724>
   2c7ac:	81c5883a 	add	r2,r16,r7
   2c7b0:	11400117 	ldw	r5,4(r2)
   2c7b4:	9009883a 	mov	r4,r18
   2c7b8:	29400054 	ori	r5,r5,1
   2c7bc:	11400115 	stw	r5,4(r2)
   2c7c0:	00319a40 	call	319a4 <__malloc_unlock>
   2c7c4:	80800204 	addi	r2,r16,8
   2c7c8:	003fe006 	br	2c74c <__alt_data_end+0xf402c74c>
   2c7cc:	9c000217 	ldw	r16,8(r19)
   2c7d0:	00bfff04 	movi	r2,-4
   2c7d4:	85800117 	ldw	r22,4(r16)
   2c7d8:	b0ac703a 	and	r22,r22,r2
   2c7dc:	b4400336 	bltu	r22,r17,2c7ec <_malloc_r+0x344>
   2c7e0:	b445c83a 	sub	r2,r22,r17
   2c7e4:	00c003c4 	movi	r3,15
   2c7e8:	18805d16 	blt	r3,r2,2c960 <_malloc_r+0x4b8>
   2c7ec:	05c000f4 	movhi	r23,3
   2c7f0:	00800134 	movhi	r2,4
   2c7f4:	10a5bb04 	addi	r2,r2,-26900
   2c7f8:	bddea204 	addi	r23,r23,31368
   2c7fc:	15400017 	ldw	r21,0(r2)
   2c800:	b8c00017 	ldw	r3,0(r23)
   2c804:	00bfffc4 	movi	r2,-1
   2c808:	858d883a 	add	r6,r16,r22
   2c80c:	8d6b883a 	add	r21,r17,r21
   2c810:	1880ea26 	beq	r3,r2,2cbbc <_malloc_r+0x714>
   2c814:	ad4403c4 	addi	r21,r21,4111
   2c818:	00bc0004 	movi	r2,-4096
   2c81c:	a8aa703a 	and	r21,r21,r2
   2c820:	a80b883a 	mov	r5,r21
   2c824:	9009883a 	mov	r4,r18
   2c828:	d9800015 	stw	r6,0(sp)
   2c82c:	002e6c40 	call	2e6c4 <_sbrk_r>
   2c830:	1029883a 	mov	r20,r2
   2c834:	00bfffc4 	movi	r2,-1
   2c838:	d9800017 	ldw	r6,0(sp)
   2c83c:	a080e826 	beq	r20,r2,2cbe0 <_malloc_r+0x738>
   2c840:	a180a636 	bltu	r20,r6,2cadc <_malloc_r+0x634>
   2c844:	07000134 	movhi	fp,4
   2c848:	e725c404 	addi	fp,fp,-26864
   2c84c:	e0800017 	ldw	r2,0(fp)
   2c850:	a887883a 	add	r3,r21,r2
   2c854:	e0c00015 	stw	r3,0(fp)
   2c858:	3500e626 	beq	r6,r20,2cbf4 <_malloc_r+0x74c>
   2c85c:	b9000017 	ldw	r4,0(r23)
   2c860:	00bfffc4 	movi	r2,-1
   2c864:	2080ee26 	beq	r4,r2,2cc20 <_malloc_r+0x778>
   2c868:	a185c83a 	sub	r2,r20,r6
   2c86c:	10c5883a 	add	r2,r2,r3
   2c870:	e0800015 	stw	r2,0(fp)
   2c874:	a0c001cc 	andi	r3,r20,7
   2c878:	1800bc26 	beq	r3,zero,2cb6c <_malloc_r+0x6c4>
   2c87c:	a0e9c83a 	sub	r20,r20,r3
   2c880:	00840204 	movi	r2,4104
   2c884:	a5000204 	addi	r20,r20,8
   2c888:	10c7c83a 	sub	r3,r2,r3
   2c88c:	a545883a 	add	r2,r20,r21
   2c890:	1083ffcc 	andi	r2,r2,4095
   2c894:	18abc83a 	sub	r21,r3,r2
   2c898:	a80b883a 	mov	r5,r21
   2c89c:	9009883a 	mov	r4,r18
   2c8a0:	002e6c40 	call	2e6c4 <_sbrk_r>
   2c8a4:	00ffffc4 	movi	r3,-1
   2c8a8:	10c0e126 	beq	r2,r3,2cc30 <_malloc_r+0x788>
   2c8ac:	1505c83a 	sub	r2,r2,r20
   2c8b0:	1545883a 	add	r2,r2,r21
   2c8b4:	10800054 	ori	r2,r2,1
   2c8b8:	e0c00017 	ldw	r3,0(fp)
   2c8bc:	9d000215 	stw	r20,8(r19)
   2c8c0:	a0800115 	stw	r2,4(r20)
   2c8c4:	a8c7883a 	add	r3,r21,r3
   2c8c8:	e0c00015 	stw	r3,0(fp)
   2c8cc:	84c00e26 	beq	r16,r19,2c908 <_malloc_r+0x460>
   2c8d0:	018003c4 	movi	r6,15
   2c8d4:	3580a72e 	bgeu	r6,r22,2cb74 <_malloc_r+0x6cc>
   2c8d8:	81400117 	ldw	r5,4(r16)
   2c8dc:	013ffe04 	movi	r4,-8
   2c8e0:	b0bffd04 	addi	r2,r22,-12
   2c8e4:	1104703a 	and	r2,r2,r4
   2c8e8:	2900004c 	andi	r4,r5,1
   2c8ec:	2088b03a 	or	r4,r4,r2
   2c8f0:	81000115 	stw	r4,4(r16)
   2c8f4:	01400144 	movi	r5,5
   2c8f8:	8089883a 	add	r4,r16,r2
   2c8fc:	21400115 	stw	r5,4(r4)
   2c900:	21400215 	stw	r5,8(r4)
   2c904:	3080cd36 	bltu	r6,r2,2cc3c <_malloc_r+0x794>
   2c908:	00800134 	movhi	r2,4
   2c90c:	10a5ba04 	addi	r2,r2,-26904
   2c910:	11000017 	ldw	r4,0(r2)
   2c914:	20c0012e 	bgeu	r4,r3,2c91c <_malloc_r+0x474>
   2c918:	10c00015 	stw	r3,0(r2)
   2c91c:	00800134 	movhi	r2,4
   2c920:	10a5b904 	addi	r2,r2,-26908
   2c924:	11000017 	ldw	r4,0(r2)
   2c928:	9c000217 	ldw	r16,8(r19)
   2c92c:	20c0012e 	bgeu	r4,r3,2c934 <_malloc_r+0x48c>
   2c930:	10c00015 	stw	r3,0(r2)
   2c934:	80c00117 	ldw	r3,4(r16)
   2c938:	00bfff04 	movi	r2,-4
   2c93c:	1886703a 	and	r3,r3,r2
   2c940:	1c45c83a 	sub	r2,r3,r17
   2c944:	1c400236 	bltu	r3,r17,2c950 <_malloc_r+0x4a8>
   2c948:	00c003c4 	movi	r3,15
   2c94c:	18800416 	blt	r3,r2,2c960 <_malloc_r+0x4b8>
   2c950:	9009883a 	mov	r4,r18
   2c954:	00319a40 	call	319a4 <__malloc_unlock>
   2c958:	0005883a 	mov	r2,zero
   2c95c:	003f7b06 	br	2c74c <__alt_data_end+0xf402c74c>
   2c960:	88c00054 	ori	r3,r17,1
   2c964:	80c00115 	stw	r3,4(r16)
   2c968:	8463883a 	add	r17,r16,r17
   2c96c:	10800054 	ori	r2,r2,1
   2c970:	9c400215 	stw	r17,8(r19)
   2c974:	88800115 	stw	r2,4(r17)
   2c978:	9009883a 	mov	r4,r18
   2c97c:	00319a40 	call	319a4 <__malloc_unlock>
   2c980:	80800204 	addi	r2,r16,8
   2c984:	003f7106 	br	2c74c <__alt_data_end+0xf402c74c>
   2c988:	00c00504 	movi	r3,20
   2c98c:	18804a2e 	bgeu	r3,r2,2cab8 <_malloc_r+0x610>
   2c990:	00c01504 	movi	r3,84
   2c994:	18806e36 	bltu	r3,r2,2cb50 <_malloc_r+0x6a8>
   2c998:	8804d33a 	srli	r2,r17,12
   2c99c:	12001bc4 	addi	r8,r2,111
   2c9a0:	11c01b84 	addi	r7,r2,110
   2c9a4:	4209883a 	add	r4,r8,r8
   2c9a8:	003edd06 	br	2c520 <__alt_data_end+0xf402c520>
   2c9ac:	3804d27a 	srli	r2,r7,9
   2c9b0:	00c00104 	movi	r3,4
   2c9b4:	1880442e 	bgeu	r3,r2,2cac8 <_malloc_r+0x620>
   2c9b8:	00c00504 	movi	r3,20
   2c9bc:	18808136 	bltu	r3,r2,2cbc4 <_malloc_r+0x71c>
   2c9c0:	11401704 	addi	r5,r2,92
   2c9c4:	10c016c4 	addi	r3,r2,91
   2c9c8:	294b883a 	add	r5,r5,r5
   2c9cc:	294b883a 	add	r5,r5,r5
   2c9d0:	294b883a 	add	r5,r5,r5
   2c9d4:	994b883a 	add	r5,r19,r5
   2c9d8:	28800017 	ldw	r2,0(r5)
   2c9dc:	018000f4 	movhi	r6,3
   2c9e0:	297ffe04 	addi	r5,r5,-8
   2c9e4:	3198da04 	addi	r6,r6,25448
   2c9e8:	28806526 	beq	r5,r2,2cb80 <_malloc_r+0x6d8>
   2c9ec:	01bfff04 	movi	r6,-4
   2c9f0:	10c00117 	ldw	r3,4(r2)
   2c9f4:	1986703a 	and	r3,r3,r6
   2c9f8:	38c0022e 	bgeu	r7,r3,2ca04 <_malloc_r+0x55c>
   2c9fc:	10800217 	ldw	r2,8(r2)
   2ca00:	28bffb1e 	bne	r5,r2,2c9f0 <__alt_data_end+0xf402c9f0>
   2ca04:	11400317 	ldw	r5,12(r2)
   2ca08:	98c00117 	ldw	r3,4(r19)
   2ca0c:	81400315 	stw	r5,12(r16)
   2ca10:	80800215 	stw	r2,8(r16)
   2ca14:	2c000215 	stw	r16,8(r5)
   2ca18:	14000315 	stw	r16,12(r2)
   2ca1c:	003ef806 	br	2c600 <__alt_data_end+0xf402c600>
   2ca20:	88c00054 	ori	r3,r17,1
   2ca24:	80c00115 	stw	r3,4(r16)
   2ca28:	8463883a 	add	r17,r16,r17
   2ca2c:	34400515 	stw	r17,20(r6)
   2ca30:	34400415 	stw	r17,16(r6)
   2ca34:	10c00054 	ori	r3,r2,1
   2ca38:	8a000315 	stw	r8,12(r17)
   2ca3c:	8a000215 	stw	r8,8(r17)
   2ca40:	88c00115 	stw	r3,4(r17)
   2ca44:	88a3883a 	add	r17,r17,r2
   2ca48:	88800015 	stw	r2,0(r17)
   2ca4c:	9009883a 	mov	r4,r18
   2ca50:	00319a40 	call	319a4 <__malloc_unlock>
   2ca54:	80800204 	addi	r2,r16,8
   2ca58:	003f3c06 	br	2c74c <__alt_data_end+0xf402c74c>
   2ca5c:	30c00117 	ldw	r3,4(r6)
   2ca60:	003ee706 	br	2c600 <__alt_data_end+0xf402c600>
   2ca64:	5ac00044 	addi	r11,r11,1
   2ca68:	588000cc 	andi	r2,r11,3
   2ca6c:	31800204 	addi	r6,r6,8
   2ca70:	103efd1e 	bne	r2,zero,2c668 <__alt_data_end+0xf402c668>
   2ca74:	00002406 	br	2cb08 <_malloc_r+0x660>
   2ca78:	14000317 	ldw	r16,12(r2)
   2ca7c:	143f251e 	bne	r2,r16,2c714 <__alt_data_end+0xf402c714>
   2ca80:	21000084 	addi	r4,r4,2
   2ca84:	003ebc06 	br	2c578 <__alt_data_end+0xf402c578>
   2ca88:	8085883a 	add	r2,r16,r2
   2ca8c:	10c00117 	ldw	r3,4(r2)
   2ca90:	81000317 	ldw	r4,12(r16)
   2ca94:	81400217 	ldw	r5,8(r16)
   2ca98:	18c00054 	ori	r3,r3,1
   2ca9c:	10c00115 	stw	r3,4(r2)
   2caa0:	29000315 	stw	r4,12(r5)
   2caa4:	21400215 	stw	r5,8(r4)
   2caa8:	9009883a 	mov	r4,r18
   2caac:	00319a40 	call	319a4 <__malloc_unlock>
   2cab0:	80800204 	addi	r2,r16,8
   2cab4:	003f2506 	br	2c74c <__alt_data_end+0xf402c74c>
   2cab8:	12001704 	addi	r8,r2,92
   2cabc:	11c016c4 	addi	r7,r2,91
   2cac0:	4209883a 	add	r4,r8,r8
   2cac4:	003e9606 	br	2c520 <__alt_data_end+0xf402c520>
   2cac8:	3804d1ba 	srli	r2,r7,6
   2cacc:	11400e44 	addi	r5,r2,57
   2cad0:	10c00e04 	addi	r3,r2,56
   2cad4:	294b883a 	add	r5,r5,r5
   2cad8:	003fbc06 	br	2c9cc <__alt_data_end+0xf402c9cc>
   2cadc:	84ff5926 	beq	r16,r19,2c844 <__alt_data_end+0xf402c844>
   2cae0:	008000f4 	movhi	r2,3
   2cae4:	1098da04 	addi	r2,r2,25448
   2cae8:	14000217 	ldw	r16,8(r2)
   2caec:	00bfff04 	movi	r2,-4
   2caf0:	80c00117 	ldw	r3,4(r16)
   2caf4:	1886703a 	and	r3,r3,r2
   2caf8:	003f9106 	br	2c940 <__alt_data_end+0xf402c940>
   2cafc:	60800217 	ldw	r2,8(r12)
   2cb00:	213fffc4 	addi	r4,r4,-1
   2cb04:	1300651e 	bne	r2,r12,2cc9c <_malloc_r+0x7f4>
   2cb08:	208000cc 	andi	r2,r4,3
   2cb0c:	633ffe04 	addi	r12,r12,-8
   2cb10:	103ffa1e 	bne	r2,zero,2cafc <__alt_data_end+0xf402cafc>
   2cb14:	98800117 	ldw	r2,4(r19)
   2cb18:	0146303a 	nor	r3,zero,r5
   2cb1c:	1884703a 	and	r2,r3,r2
   2cb20:	98800115 	stw	r2,4(r19)
   2cb24:	294b883a 	add	r5,r5,r5
   2cb28:	117f2836 	bltu	r2,r5,2c7cc <__alt_data_end+0xf402c7cc>
   2cb2c:	283f2726 	beq	r5,zero,2c7cc <__alt_data_end+0xf402c7cc>
   2cb30:	2886703a 	and	r3,r5,r2
   2cb34:	5809883a 	mov	r4,r11
   2cb38:	183ec31e 	bne	r3,zero,2c648 <__alt_data_end+0xf402c648>
   2cb3c:	294b883a 	add	r5,r5,r5
   2cb40:	2886703a 	and	r3,r5,r2
   2cb44:	21000104 	addi	r4,r4,4
   2cb48:	183ffc26 	beq	r3,zero,2cb3c <__alt_data_end+0xf402cb3c>
   2cb4c:	003ebe06 	br	2c648 <__alt_data_end+0xf402c648>
   2cb50:	00c05504 	movi	r3,340
   2cb54:	18801236 	bltu	r3,r2,2cba0 <_malloc_r+0x6f8>
   2cb58:	8804d3fa 	srli	r2,r17,15
   2cb5c:	12001e04 	addi	r8,r2,120
   2cb60:	11c01dc4 	addi	r7,r2,119
   2cb64:	4209883a 	add	r4,r8,r8
   2cb68:	003e6d06 	br	2c520 <__alt_data_end+0xf402c520>
   2cb6c:	00c40004 	movi	r3,4096
   2cb70:	003f4606 	br	2c88c <__alt_data_end+0xf402c88c>
   2cb74:	00800044 	movi	r2,1
   2cb78:	a0800115 	stw	r2,4(r20)
   2cb7c:	003f7406 	br	2c950 <__alt_data_end+0xf402c950>
   2cb80:	1805d0ba 	srai	r2,r3,2
   2cb84:	01c00044 	movi	r7,1
   2cb88:	30c00117 	ldw	r3,4(r6)
   2cb8c:	388e983a 	sll	r7,r7,r2
   2cb90:	2805883a 	mov	r2,r5
   2cb94:	38c6b03a 	or	r3,r7,r3
   2cb98:	30c00115 	stw	r3,4(r6)
   2cb9c:	003f9b06 	br	2ca0c <__alt_data_end+0xf402ca0c>
   2cba0:	00c15504 	movi	r3,1364
   2cba4:	18801a36 	bltu	r3,r2,2cc10 <_malloc_r+0x768>
   2cba8:	8804d4ba 	srli	r2,r17,18
   2cbac:	12001f44 	addi	r8,r2,125
   2cbb0:	11c01f04 	addi	r7,r2,124
   2cbb4:	4209883a 	add	r4,r8,r8
   2cbb8:	003e5906 	br	2c520 <__alt_data_end+0xf402c520>
   2cbbc:	ad400404 	addi	r21,r21,16
   2cbc0:	003f1706 	br	2c820 <__alt_data_end+0xf402c820>
   2cbc4:	00c01504 	movi	r3,84
   2cbc8:	18802336 	bltu	r3,r2,2cc58 <_malloc_r+0x7b0>
   2cbcc:	3804d33a 	srli	r2,r7,12
   2cbd0:	11401bc4 	addi	r5,r2,111
   2cbd4:	10c01b84 	addi	r3,r2,110
   2cbd8:	294b883a 	add	r5,r5,r5
   2cbdc:	003f7b06 	br	2c9cc <__alt_data_end+0xf402c9cc>
   2cbe0:	9c000217 	ldw	r16,8(r19)
   2cbe4:	00bfff04 	movi	r2,-4
   2cbe8:	80c00117 	ldw	r3,4(r16)
   2cbec:	1886703a 	and	r3,r3,r2
   2cbf0:	003f5306 	br	2c940 <__alt_data_end+0xf402c940>
   2cbf4:	3083ffcc 	andi	r2,r6,4095
   2cbf8:	103f181e 	bne	r2,zero,2c85c <__alt_data_end+0xf402c85c>
   2cbfc:	99000217 	ldw	r4,8(r19)
   2cc00:	b545883a 	add	r2,r22,r21
   2cc04:	10800054 	ori	r2,r2,1
   2cc08:	20800115 	stw	r2,4(r4)
   2cc0c:	003f3e06 	br	2c908 <__alt_data_end+0xf402c908>
   2cc10:	01003f84 	movi	r4,254
   2cc14:	02001fc4 	movi	r8,127
   2cc18:	01c01f84 	movi	r7,126
   2cc1c:	003e4006 	br	2c520 <__alt_data_end+0xf402c520>
   2cc20:	008000f4 	movhi	r2,3
   2cc24:	109ea204 	addi	r2,r2,31368
   2cc28:	15000015 	stw	r20,0(r2)
   2cc2c:	003f1106 	br	2c874 <__alt_data_end+0xf402c874>
   2cc30:	00800044 	movi	r2,1
   2cc34:	002b883a 	mov	r21,zero
   2cc38:	003f1f06 	br	2c8b8 <__alt_data_end+0xf402c8b8>
   2cc3c:	81400204 	addi	r5,r16,8
   2cc40:	9009883a 	mov	r4,r18
   2cc44:	002b8bc0 	call	2b8bc <_free_r>
   2cc48:	00800134 	movhi	r2,4
   2cc4c:	10a5c404 	addi	r2,r2,-26864
   2cc50:	10c00017 	ldw	r3,0(r2)
   2cc54:	003f2c06 	br	2c908 <__alt_data_end+0xf402c908>
   2cc58:	00c05504 	movi	r3,340
   2cc5c:	18800536 	bltu	r3,r2,2cc74 <_malloc_r+0x7cc>
   2cc60:	3804d3fa 	srli	r2,r7,15
   2cc64:	11401e04 	addi	r5,r2,120
   2cc68:	10c01dc4 	addi	r3,r2,119
   2cc6c:	294b883a 	add	r5,r5,r5
   2cc70:	003f5606 	br	2c9cc <__alt_data_end+0xf402c9cc>
   2cc74:	00c15504 	movi	r3,1364
   2cc78:	18800536 	bltu	r3,r2,2cc90 <_malloc_r+0x7e8>
   2cc7c:	3804d4ba 	srli	r2,r7,18
   2cc80:	11401f44 	addi	r5,r2,125
   2cc84:	10c01f04 	addi	r3,r2,124
   2cc88:	294b883a 	add	r5,r5,r5
   2cc8c:	003f4f06 	br	2c9cc <__alt_data_end+0xf402c9cc>
   2cc90:	01403f84 	movi	r5,254
   2cc94:	00c01f84 	movi	r3,126
   2cc98:	003f4c06 	br	2c9cc <__alt_data_end+0xf402c9cc>
   2cc9c:	98800117 	ldw	r2,4(r19)
   2cca0:	003fa006 	br	2cb24 <__alt_data_end+0xf402cb24>
   2cca4:	8808d0fa 	srli	r4,r17,3
   2cca8:	20800044 	addi	r2,r4,1
   2ccac:	1085883a 	add	r2,r2,r2
   2ccb0:	003e9006 	br	2c6f4 <__alt_data_end+0xf402c6f4>

0002ccb4 <memchr>:
   2ccb4:	208000cc 	andi	r2,r4,3
   2ccb8:	280f883a 	mov	r7,r5
   2ccbc:	10003426 	beq	r2,zero,2cd90 <memchr+0xdc>
   2ccc0:	30bfffc4 	addi	r2,r6,-1
   2ccc4:	30001a26 	beq	r6,zero,2cd30 <memchr+0x7c>
   2ccc8:	20c00003 	ldbu	r3,0(r4)
   2cccc:	29803fcc 	andi	r6,r5,255
   2ccd0:	30c0051e 	bne	r6,r3,2cce8 <memchr+0x34>
   2ccd4:	00001806 	br	2cd38 <memchr+0x84>
   2ccd8:	10001526 	beq	r2,zero,2cd30 <memchr+0x7c>
   2ccdc:	20c00003 	ldbu	r3,0(r4)
   2cce0:	10bfffc4 	addi	r2,r2,-1
   2cce4:	30c01426 	beq	r6,r3,2cd38 <memchr+0x84>
   2cce8:	21000044 	addi	r4,r4,1
   2ccec:	20c000cc 	andi	r3,r4,3
   2ccf0:	183ff91e 	bne	r3,zero,2ccd8 <__alt_data_end+0xf402ccd8>
   2ccf4:	020000c4 	movi	r8,3
   2ccf8:	40801136 	bltu	r8,r2,2cd40 <memchr+0x8c>
   2ccfc:	10000c26 	beq	r2,zero,2cd30 <memchr+0x7c>
   2cd00:	20c00003 	ldbu	r3,0(r4)
   2cd04:	29403fcc 	andi	r5,r5,255
   2cd08:	28c00b26 	beq	r5,r3,2cd38 <memchr+0x84>
   2cd0c:	20c00044 	addi	r3,r4,1
   2cd10:	39803fcc 	andi	r6,r7,255
   2cd14:	2089883a 	add	r4,r4,r2
   2cd18:	00000306 	br	2cd28 <memchr+0x74>
   2cd1c:	18c00044 	addi	r3,r3,1
   2cd20:	197fffc3 	ldbu	r5,-1(r3)
   2cd24:	31400526 	beq	r6,r5,2cd3c <memchr+0x88>
   2cd28:	1805883a 	mov	r2,r3
   2cd2c:	20fffb1e 	bne	r4,r3,2cd1c <__alt_data_end+0xf402cd1c>
   2cd30:	0005883a 	mov	r2,zero
   2cd34:	f800283a 	ret
   2cd38:	2005883a 	mov	r2,r4
   2cd3c:	f800283a 	ret
   2cd40:	28c03fcc 	andi	r3,r5,255
   2cd44:	1812923a 	slli	r9,r3,8
   2cd48:	02ffbff4 	movhi	r11,65279
   2cd4c:	02a02074 	movhi	r10,32897
   2cd50:	48d2b03a 	or	r9,r9,r3
   2cd54:	4806943a 	slli	r3,r9,16
   2cd58:	5affbfc4 	addi	r11,r11,-257
   2cd5c:	52a02004 	addi	r10,r10,-32640
   2cd60:	48d2b03a 	or	r9,r9,r3
   2cd64:	20c00017 	ldw	r3,0(r4)
   2cd68:	48c6f03a 	xor	r3,r9,r3
   2cd6c:	1acd883a 	add	r6,r3,r11
   2cd70:	00c6303a 	nor	r3,zero,r3
   2cd74:	30c6703a 	and	r3,r6,r3
   2cd78:	1a86703a 	and	r3,r3,r10
   2cd7c:	183fe01e 	bne	r3,zero,2cd00 <__alt_data_end+0xf402cd00>
   2cd80:	10bfff04 	addi	r2,r2,-4
   2cd84:	21000104 	addi	r4,r4,4
   2cd88:	40bff636 	bltu	r8,r2,2cd64 <__alt_data_end+0xf402cd64>
   2cd8c:	003fdb06 	br	2ccfc <__alt_data_end+0xf402ccfc>
   2cd90:	3005883a 	mov	r2,r6
   2cd94:	003fd706 	br	2ccf4 <__alt_data_end+0xf402ccf4>

0002cd98 <memcpy>:
   2cd98:	defffd04 	addi	sp,sp,-12
   2cd9c:	dfc00215 	stw	ra,8(sp)
   2cda0:	dc400115 	stw	r17,4(sp)
   2cda4:	dc000015 	stw	r16,0(sp)
   2cda8:	00c003c4 	movi	r3,15
   2cdac:	2005883a 	mov	r2,r4
   2cdb0:	1980452e 	bgeu	r3,r6,2cec8 <memcpy+0x130>
   2cdb4:	2906b03a 	or	r3,r5,r4
   2cdb8:	18c000cc 	andi	r3,r3,3
   2cdbc:	1800441e 	bne	r3,zero,2ced0 <memcpy+0x138>
   2cdc0:	347ffc04 	addi	r17,r6,-16
   2cdc4:	8822d13a 	srli	r17,r17,4
   2cdc8:	28c00104 	addi	r3,r5,4
   2cdcc:	23400104 	addi	r13,r4,4
   2cdd0:	8820913a 	slli	r16,r17,4
   2cdd4:	2b000204 	addi	r12,r5,8
   2cdd8:	22c00204 	addi	r11,r4,8
   2cddc:	84000504 	addi	r16,r16,20
   2cde0:	2a800304 	addi	r10,r5,12
   2cde4:	22400304 	addi	r9,r4,12
   2cde8:	2c21883a 	add	r16,r5,r16
   2cdec:	2811883a 	mov	r8,r5
   2cdf0:	200f883a 	mov	r7,r4
   2cdf4:	41000017 	ldw	r4,0(r8)
   2cdf8:	1fc00017 	ldw	ra,0(r3)
   2cdfc:	63c00017 	ldw	r15,0(r12)
   2ce00:	39000015 	stw	r4,0(r7)
   2ce04:	53800017 	ldw	r14,0(r10)
   2ce08:	6fc00015 	stw	ra,0(r13)
   2ce0c:	5bc00015 	stw	r15,0(r11)
   2ce10:	4b800015 	stw	r14,0(r9)
   2ce14:	18c00404 	addi	r3,r3,16
   2ce18:	39c00404 	addi	r7,r7,16
   2ce1c:	42000404 	addi	r8,r8,16
   2ce20:	6b400404 	addi	r13,r13,16
   2ce24:	63000404 	addi	r12,r12,16
   2ce28:	5ac00404 	addi	r11,r11,16
   2ce2c:	52800404 	addi	r10,r10,16
   2ce30:	4a400404 	addi	r9,r9,16
   2ce34:	1c3fef1e 	bne	r3,r16,2cdf4 <__alt_data_end+0xf402cdf4>
   2ce38:	89c00044 	addi	r7,r17,1
   2ce3c:	380e913a 	slli	r7,r7,4
   2ce40:	310003cc 	andi	r4,r6,15
   2ce44:	02c000c4 	movi	r11,3
   2ce48:	11c7883a 	add	r3,r2,r7
   2ce4c:	29cb883a 	add	r5,r5,r7
   2ce50:	5900212e 	bgeu	r11,r4,2ced8 <memcpy+0x140>
   2ce54:	1813883a 	mov	r9,r3
   2ce58:	2811883a 	mov	r8,r5
   2ce5c:	200f883a 	mov	r7,r4
   2ce60:	42800017 	ldw	r10,0(r8)
   2ce64:	4a400104 	addi	r9,r9,4
   2ce68:	39ffff04 	addi	r7,r7,-4
   2ce6c:	4abfff15 	stw	r10,-4(r9)
   2ce70:	42000104 	addi	r8,r8,4
   2ce74:	59fffa36 	bltu	r11,r7,2ce60 <__alt_data_end+0xf402ce60>
   2ce78:	213fff04 	addi	r4,r4,-4
   2ce7c:	2008d0ba 	srli	r4,r4,2
   2ce80:	318000cc 	andi	r6,r6,3
   2ce84:	21000044 	addi	r4,r4,1
   2ce88:	2109883a 	add	r4,r4,r4
   2ce8c:	2109883a 	add	r4,r4,r4
   2ce90:	1907883a 	add	r3,r3,r4
   2ce94:	290b883a 	add	r5,r5,r4
   2ce98:	30000626 	beq	r6,zero,2ceb4 <memcpy+0x11c>
   2ce9c:	198d883a 	add	r6,r3,r6
   2cea0:	29c00003 	ldbu	r7,0(r5)
   2cea4:	18c00044 	addi	r3,r3,1
   2cea8:	29400044 	addi	r5,r5,1
   2ceac:	19ffffc5 	stb	r7,-1(r3)
   2ceb0:	19bffb1e 	bne	r3,r6,2cea0 <__alt_data_end+0xf402cea0>
   2ceb4:	dfc00217 	ldw	ra,8(sp)
   2ceb8:	dc400117 	ldw	r17,4(sp)
   2cebc:	dc000017 	ldw	r16,0(sp)
   2cec0:	dec00304 	addi	sp,sp,12
   2cec4:	f800283a 	ret
   2cec8:	2007883a 	mov	r3,r4
   2cecc:	003ff206 	br	2ce98 <__alt_data_end+0xf402ce98>
   2ced0:	2007883a 	mov	r3,r4
   2ced4:	003ff106 	br	2ce9c <__alt_data_end+0xf402ce9c>
   2ced8:	200d883a 	mov	r6,r4
   2cedc:	003fee06 	br	2ce98 <__alt_data_end+0xf402ce98>

0002cee0 <memmove>:
   2cee0:	2005883a 	mov	r2,r4
   2cee4:	29000b2e 	bgeu	r5,r4,2cf14 <memmove+0x34>
   2cee8:	298f883a 	add	r7,r5,r6
   2ceec:	21c0092e 	bgeu	r4,r7,2cf14 <memmove+0x34>
   2cef0:	2187883a 	add	r3,r4,r6
   2cef4:	198bc83a 	sub	r5,r3,r6
   2cef8:	30004826 	beq	r6,zero,2d01c <memmove+0x13c>
   2cefc:	39ffffc4 	addi	r7,r7,-1
   2cf00:	39000003 	ldbu	r4,0(r7)
   2cf04:	18ffffc4 	addi	r3,r3,-1
   2cf08:	19000005 	stb	r4,0(r3)
   2cf0c:	28fffb1e 	bne	r5,r3,2cefc <__alt_data_end+0xf402cefc>
   2cf10:	f800283a 	ret
   2cf14:	00c003c4 	movi	r3,15
   2cf18:	1980412e 	bgeu	r3,r6,2d020 <memmove+0x140>
   2cf1c:	2886b03a 	or	r3,r5,r2
   2cf20:	18c000cc 	andi	r3,r3,3
   2cf24:	1800401e 	bne	r3,zero,2d028 <memmove+0x148>
   2cf28:	33fffc04 	addi	r15,r6,-16
   2cf2c:	781ed13a 	srli	r15,r15,4
   2cf30:	28c00104 	addi	r3,r5,4
   2cf34:	13400104 	addi	r13,r2,4
   2cf38:	781c913a 	slli	r14,r15,4
   2cf3c:	2b000204 	addi	r12,r5,8
   2cf40:	12c00204 	addi	r11,r2,8
   2cf44:	73800504 	addi	r14,r14,20
   2cf48:	2a800304 	addi	r10,r5,12
   2cf4c:	12400304 	addi	r9,r2,12
   2cf50:	2b9d883a 	add	r14,r5,r14
   2cf54:	2811883a 	mov	r8,r5
   2cf58:	100f883a 	mov	r7,r2
   2cf5c:	41000017 	ldw	r4,0(r8)
   2cf60:	39c00404 	addi	r7,r7,16
   2cf64:	18c00404 	addi	r3,r3,16
   2cf68:	393ffc15 	stw	r4,-16(r7)
   2cf6c:	193ffc17 	ldw	r4,-16(r3)
   2cf70:	6b400404 	addi	r13,r13,16
   2cf74:	5ac00404 	addi	r11,r11,16
   2cf78:	693ffc15 	stw	r4,-16(r13)
   2cf7c:	61000017 	ldw	r4,0(r12)
   2cf80:	4a400404 	addi	r9,r9,16
   2cf84:	42000404 	addi	r8,r8,16
   2cf88:	593ffc15 	stw	r4,-16(r11)
   2cf8c:	51000017 	ldw	r4,0(r10)
   2cf90:	63000404 	addi	r12,r12,16
   2cf94:	52800404 	addi	r10,r10,16
   2cf98:	493ffc15 	stw	r4,-16(r9)
   2cf9c:	1bbfef1e 	bne	r3,r14,2cf5c <__alt_data_end+0xf402cf5c>
   2cfa0:	79000044 	addi	r4,r15,1
   2cfa4:	2008913a 	slli	r4,r4,4
   2cfa8:	328003cc 	andi	r10,r6,15
   2cfac:	02c000c4 	movi	r11,3
   2cfb0:	1107883a 	add	r3,r2,r4
   2cfb4:	290b883a 	add	r5,r5,r4
   2cfb8:	5a801e2e 	bgeu	r11,r10,2d034 <memmove+0x154>
   2cfbc:	1813883a 	mov	r9,r3
   2cfc0:	2811883a 	mov	r8,r5
   2cfc4:	500f883a 	mov	r7,r10
   2cfc8:	41000017 	ldw	r4,0(r8)
   2cfcc:	4a400104 	addi	r9,r9,4
   2cfd0:	39ffff04 	addi	r7,r7,-4
   2cfd4:	493fff15 	stw	r4,-4(r9)
   2cfd8:	42000104 	addi	r8,r8,4
   2cfdc:	59fffa36 	bltu	r11,r7,2cfc8 <__alt_data_end+0xf402cfc8>
   2cfe0:	513fff04 	addi	r4,r10,-4
   2cfe4:	2008d0ba 	srli	r4,r4,2
   2cfe8:	318000cc 	andi	r6,r6,3
   2cfec:	21000044 	addi	r4,r4,1
   2cff0:	2109883a 	add	r4,r4,r4
   2cff4:	2109883a 	add	r4,r4,r4
   2cff8:	1907883a 	add	r3,r3,r4
   2cffc:	290b883a 	add	r5,r5,r4
   2d000:	30000b26 	beq	r6,zero,2d030 <memmove+0x150>
   2d004:	198d883a 	add	r6,r3,r6
   2d008:	29c00003 	ldbu	r7,0(r5)
   2d00c:	18c00044 	addi	r3,r3,1
   2d010:	29400044 	addi	r5,r5,1
   2d014:	19ffffc5 	stb	r7,-1(r3)
   2d018:	19bffb1e 	bne	r3,r6,2d008 <__alt_data_end+0xf402d008>
   2d01c:	f800283a 	ret
   2d020:	1007883a 	mov	r3,r2
   2d024:	003ff606 	br	2d000 <__alt_data_end+0xf402d000>
   2d028:	1007883a 	mov	r3,r2
   2d02c:	003ff506 	br	2d004 <__alt_data_end+0xf402d004>
   2d030:	f800283a 	ret
   2d034:	500d883a 	mov	r6,r10
   2d038:	003ff106 	br	2d000 <__alt_data_end+0xf402d000>

0002d03c <memset>:
   2d03c:	20c000cc 	andi	r3,r4,3
   2d040:	2005883a 	mov	r2,r4
   2d044:	18004426 	beq	r3,zero,2d158 <memset+0x11c>
   2d048:	31ffffc4 	addi	r7,r6,-1
   2d04c:	30004026 	beq	r6,zero,2d150 <memset+0x114>
   2d050:	2813883a 	mov	r9,r5
   2d054:	200d883a 	mov	r6,r4
   2d058:	2007883a 	mov	r3,r4
   2d05c:	00000406 	br	2d070 <memset+0x34>
   2d060:	3a3fffc4 	addi	r8,r7,-1
   2d064:	31800044 	addi	r6,r6,1
   2d068:	38003926 	beq	r7,zero,2d150 <memset+0x114>
   2d06c:	400f883a 	mov	r7,r8
   2d070:	18c00044 	addi	r3,r3,1
   2d074:	32400005 	stb	r9,0(r6)
   2d078:	1a0000cc 	andi	r8,r3,3
   2d07c:	403ff81e 	bne	r8,zero,2d060 <__alt_data_end+0xf402d060>
   2d080:	010000c4 	movi	r4,3
   2d084:	21c02d2e 	bgeu	r4,r7,2d13c <memset+0x100>
   2d088:	29003fcc 	andi	r4,r5,255
   2d08c:	200c923a 	slli	r6,r4,8
   2d090:	3108b03a 	or	r4,r6,r4
   2d094:	200c943a 	slli	r6,r4,16
   2d098:	218cb03a 	or	r6,r4,r6
   2d09c:	010003c4 	movi	r4,15
   2d0a0:	21c0182e 	bgeu	r4,r7,2d104 <memset+0xc8>
   2d0a4:	3b3ffc04 	addi	r12,r7,-16
   2d0a8:	6018d13a 	srli	r12,r12,4
   2d0ac:	1a000104 	addi	r8,r3,4
   2d0b0:	1ac00204 	addi	r11,r3,8
   2d0b4:	6008913a 	slli	r4,r12,4
   2d0b8:	1a800304 	addi	r10,r3,12
   2d0bc:	1813883a 	mov	r9,r3
   2d0c0:	21000504 	addi	r4,r4,20
   2d0c4:	1909883a 	add	r4,r3,r4
   2d0c8:	49800015 	stw	r6,0(r9)
   2d0cc:	41800015 	stw	r6,0(r8)
   2d0d0:	59800015 	stw	r6,0(r11)
   2d0d4:	51800015 	stw	r6,0(r10)
   2d0d8:	42000404 	addi	r8,r8,16
   2d0dc:	4a400404 	addi	r9,r9,16
   2d0e0:	5ac00404 	addi	r11,r11,16
   2d0e4:	52800404 	addi	r10,r10,16
   2d0e8:	413ff71e 	bne	r8,r4,2d0c8 <__alt_data_end+0xf402d0c8>
   2d0ec:	63000044 	addi	r12,r12,1
   2d0f0:	6018913a 	slli	r12,r12,4
   2d0f4:	39c003cc 	andi	r7,r7,15
   2d0f8:	010000c4 	movi	r4,3
   2d0fc:	1b07883a 	add	r3,r3,r12
   2d100:	21c00e2e 	bgeu	r4,r7,2d13c <memset+0x100>
   2d104:	1813883a 	mov	r9,r3
   2d108:	3811883a 	mov	r8,r7
   2d10c:	010000c4 	movi	r4,3
   2d110:	49800015 	stw	r6,0(r9)
   2d114:	423fff04 	addi	r8,r8,-4
   2d118:	4a400104 	addi	r9,r9,4
   2d11c:	223ffc36 	bltu	r4,r8,2d110 <__alt_data_end+0xf402d110>
   2d120:	393fff04 	addi	r4,r7,-4
   2d124:	2008d0ba 	srli	r4,r4,2
   2d128:	39c000cc 	andi	r7,r7,3
   2d12c:	21000044 	addi	r4,r4,1
   2d130:	2109883a 	add	r4,r4,r4
   2d134:	2109883a 	add	r4,r4,r4
   2d138:	1907883a 	add	r3,r3,r4
   2d13c:	38000526 	beq	r7,zero,2d154 <memset+0x118>
   2d140:	19cf883a 	add	r7,r3,r7
   2d144:	19400005 	stb	r5,0(r3)
   2d148:	18c00044 	addi	r3,r3,1
   2d14c:	38fffd1e 	bne	r7,r3,2d144 <__alt_data_end+0xf402d144>
   2d150:	f800283a 	ret
   2d154:	f800283a 	ret
   2d158:	2007883a 	mov	r3,r4
   2d15c:	300f883a 	mov	r7,r6
   2d160:	003fc706 	br	2d080 <__alt_data_end+0xf402d080>

0002d164 <_Balloc>:
   2d164:	20801317 	ldw	r2,76(r4)
   2d168:	defffc04 	addi	sp,sp,-16
   2d16c:	dc400115 	stw	r17,4(sp)
   2d170:	dc000015 	stw	r16,0(sp)
   2d174:	dfc00315 	stw	ra,12(sp)
   2d178:	dc800215 	stw	r18,8(sp)
   2d17c:	2023883a 	mov	r17,r4
   2d180:	2821883a 	mov	r16,r5
   2d184:	10000f26 	beq	r2,zero,2d1c4 <_Balloc+0x60>
   2d188:	8407883a 	add	r3,r16,r16
   2d18c:	18c7883a 	add	r3,r3,r3
   2d190:	10c7883a 	add	r3,r2,r3
   2d194:	18800017 	ldw	r2,0(r3)
   2d198:	10001126 	beq	r2,zero,2d1e0 <_Balloc+0x7c>
   2d19c:	11000017 	ldw	r4,0(r2)
   2d1a0:	19000015 	stw	r4,0(r3)
   2d1a4:	10000415 	stw	zero,16(r2)
   2d1a8:	10000315 	stw	zero,12(r2)
   2d1ac:	dfc00317 	ldw	ra,12(sp)
   2d1b0:	dc800217 	ldw	r18,8(sp)
   2d1b4:	dc400117 	ldw	r17,4(sp)
   2d1b8:	dc000017 	ldw	r16,0(sp)
   2d1bc:	dec00404 	addi	sp,sp,16
   2d1c0:	f800283a 	ret
   2d1c4:	01800844 	movi	r6,33
   2d1c8:	01400104 	movi	r5,4
   2d1cc:	003002c0 	call	3002c <_calloc_r>
   2d1d0:	88801315 	stw	r2,76(r17)
   2d1d4:	103fec1e 	bne	r2,zero,2d188 <__alt_data_end+0xf402d188>
   2d1d8:	0005883a 	mov	r2,zero
   2d1dc:	003ff306 	br	2d1ac <__alt_data_end+0xf402d1ac>
   2d1e0:	01400044 	movi	r5,1
   2d1e4:	2c24983a 	sll	r18,r5,r16
   2d1e8:	8809883a 	mov	r4,r17
   2d1ec:	91800144 	addi	r6,r18,5
   2d1f0:	318d883a 	add	r6,r6,r6
   2d1f4:	318d883a 	add	r6,r6,r6
   2d1f8:	003002c0 	call	3002c <_calloc_r>
   2d1fc:	103ff626 	beq	r2,zero,2d1d8 <__alt_data_end+0xf402d1d8>
   2d200:	14000115 	stw	r16,4(r2)
   2d204:	14800215 	stw	r18,8(r2)
   2d208:	003fe606 	br	2d1a4 <__alt_data_end+0xf402d1a4>

0002d20c <_Bfree>:
   2d20c:	28000826 	beq	r5,zero,2d230 <_Bfree+0x24>
   2d210:	28c00117 	ldw	r3,4(r5)
   2d214:	20801317 	ldw	r2,76(r4)
   2d218:	18c7883a 	add	r3,r3,r3
   2d21c:	18c7883a 	add	r3,r3,r3
   2d220:	10c5883a 	add	r2,r2,r3
   2d224:	10c00017 	ldw	r3,0(r2)
   2d228:	28c00015 	stw	r3,0(r5)
   2d22c:	11400015 	stw	r5,0(r2)
   2d230:	f800283a 	ret

0002d234 <__multadd>:
   2d234:	defffa04 	addi	sp,sp,-24
   2d238:	dc800315 	stw	r18,12(sp)
   2d23c:	dc400215 	stw	r17,8(sp)
   2d240:	dc000115 	stw	r16,4(sp)
   2d244:	2823883a 	mov	r17,r5
   2d248:	2c000417 	ldw	r16,16(r5)
   2d24c:	dfc00515 	stw	ra,20(sp)
   2d250:	dcc00415 	stw	r19,16(sp)
   2d254:	2025883a 	mov	r18,r4
   2d258:	29400504 	addi	r5,r5,20
   2d25c:	0011883a 	mov	r8,zero
   2d260:	28c00017 	ldw	r3,0(r5)
   2d264:	29400104 	addi	r5,r5,4
   2d268:	42000044 	addi	r8,r8,1
   2d26c:	18bfffcc 	andi	r2,r3,65535
   2d270:	1185383a 	mul	r2,r2,r6
   2d274:	1806d43a 	srli	r3,r3,16
   2d278:	11cf883a 	add	r7,r2,r7
   2d27c:	3808d43a 	srli	r4,r7,16
   2d280:	1987383a 	mul	r3,r3,r6
   2d284:	38bfffcc 	andi	r2,r7,65535
   2d288:	1907883a 	add	r3,r3,r4
   2d28c:	1808943a 	slli	r4,r3,16
   2d290:	180ed43a 	srli	r7,r3,16
   2d294:	2085883a 	add	r2,r4,r2
   2d298:	28bfff15 	stw	r2,-4(r5)
   2d29c:	443ff016 	blt	r8,r16,2d260 <__alt_data_end+0xf402d260>
   2d2a0:	38000926 	beq	r7,zero,2d2c8 <__multadd+0x94>
   2d2a4:	88800217 	ldw	r2,8(r17)
   2d2a8:	80800f0e 	bge	r16,r2,2d2e8 <__multadd+0xb4>
   2d2ac:	80800144 	addi	r2,r16,5
   2d2b0:	1085883a 	add	r2,r2,r2
   2d2b4:	1085883a 	add	r2,r2,r2
   2d2b8:	8885883a 	add	r2,r17,r2
   2d2bc:	11c00015 	stw	r7,0(r2)
   2d2c0:	84000044 	addi	r16,r16,1
   2d2c4:	8c000415 	stw	r16,16(r17)
   2d2c8:	8805883a 	mov	r2,r17
   2d2cc:	dfc00517 	ldw	ra,20(sp)
   2d2d0:	dcc00417 	ldw	r19,16(sp)
   2d2d4:	dc800317 	ldw	r18,12(sp)
   2d2d8:	dc400217 	ldw	r17,8(sp)
   2d2dc:	dc000117 	ldw	r16,4(sp)
   2d2e0:	dec00604 	addi	sp,sp,24
   2d2e4:	f800283a 	ret
   2d2e8:	89400117 	ldw	r5,4(r17)
   2d2ec:	9009883a 	mov	r4,r18
   2d2f0:	d9c00015 	stw	r7,0(sp)
   2d2f4:	29400044 	addi	r5,r5,1
   2d2f8:	002d1640 	call	2d164 <_Balloc>
   2d2fc:	89800417 	ldw	r6,16(r17)
   2d300:	89400304 	addi	r5,r17,12
   2d304:	11000304 	addi	r4,r2,12
   2d308:	31800084 	addi	r6,r6,2
   2d30c:	318d883a 	add	r6,r6,r6
   2d310:	318d883a 	add	r6,r6,r6
   2d314:	1027883a 	mov	r19,r2
   2d318:	002cd980 	call	2cd98 <memcpy>
   2d31c:	d9c00017 	ldw	r7,0(sp)
   2d320:	88000a26 	beq	r17,zero,2d34c <__multadd+0x118>
   2d324:	88c00117 	ldw	r3,4(r17)
   2d328:	90801317 	ldw	r2,76(r18)
   2d32c:	18c7883a 	add	r3,r3,r3
   2d330:	18c7883a 	add	r3,r3,r3
   2d334:	10c5883a 	add	r2,r2,r3
   2d338:	10c00017 	ldw	r3,0(r2)
   2d33c:	88c00015 	stw	r3,0(r17)
   2d340:	14400015 	stw	r17,0(r2)
   2d344:	9823883a 	mov	r17,r19
   2d348:	003fd806 	br	2d2ac <__alt_data_end+0xf402d2ac>
   2d34c:	9823883a 	mov	r17,r19
   2d350:	003fd606 	br	2d2ac <__alt_data_end+0xf402d2ac>

0002d354 <__s2b>:
   2d354:	defff904 	addi	sp,sp,-28
   2d358:	dc400115 	stw	r17,4(sp)
   2d35c:	dc000015 	stw	r16,0(sp)
   2d360:	2023883a 	mov	r17,r4
   2d364:	2821883a 	mov	r16,r5
   2d368:	39000204 	addi	r4,r7,8
   2d36c:	01400244 	movi	r5,9
   2d370:	dcc00315 	stw	r19,12(sp)
   2d374:	dc800215 	stw	r18,8(sp)
   2d378:	dfc00615 	stw	ra,24(sp)
   2d37c:	dd400515 	stw	r21,20(sp)
   2d380:	dd000415 	stw	r20,16(sp)
   2d384:	3825883a 	mov	r18,r7
   2d388:	3027883a 	mov	r19,r6
   2d38c:	00233900 	call	23390 <__divsi3>
   2d390:	00c00044 	movi	r3,1
   2d394:	000b883a 	mov	r5,zero
   2d398:	1880030e 	bge	r3,r2,2d3a8 <__s2b+0x54>
   2d39c:	18c7883a 	add	r3,r3,r3
   2d3a0:	29400044 	addi	r5,r5,1
   2d3a4:	18bffd16 	blt	r3,r2,2d39c <__alt_data_end+0xf402d39c>
   2d3a8:	8809883a 	mov	r4,r17
   2d3ac:	002d1640 	call	2d164 <_Balloc>
   2d3b0:	d8c00717 	ldw	r3,28(sp)
   2d3b4:	10c00515 	stw	r3,20(r2)
   2d3b8:	00c00044 	movi	r3,1
   2d3bc:	10c00415 	stw	r3,16(r2)
   2d3c0:	00c00244 	movi	r3,9
   2d3c4:	1cc0210e 	bge	r3,r19,2d44c <__s2b+0xf8>
   2d3c8:	80eb883a 	add	r21,r16,r3
   2d3cc:	a829883a 	mov	r20,r21
   2d3d0:	84e1883a 	add	r16,r16,r19
   2d3d4:	a1c00007 	ldb	r7,0(r20)
   2d3d8:	01800284 	movi	r6,10
   2d3dc:	a5000044 	addi	r20,r20,1
   2d3e0:	100b883a 	mov	r5,r2
   2d3e4:	39fff404 	addi	r7,r7,-48
   2d3e8:	8809883a 	mov	r4,r17
   2d3ec:	002d2340 	call	2d234 <__multadd>
   2d3f0:	a43ff81e 	bne	r20,r16,2d3d4 <__alt_data_end+0xf402d3d4>
   2d3f4:	ace1883a 	add	r16,r21,r19
   2d3f8:	843ffe04 	addi	r16,r16,-8
   2d3fc:	9c800a0e 	bge	r19,r18,2d428 <__s2b+0xd4>
   2d400:	94e5c83a 	sub	r18,r18,r19
   2d404:	84a5883a 	add	r18,r16,r18
   2d408:	81c00007 	ldb	r7,0(r16)
   2d40c:	01800284 	movi	r6,10
   2d410:	84000044 	addi	r16,r16,1
   2d414:	100b883a 	mov	r5,r2
   2d418:	39fff404 	addi	r7,r7,-48
   2d41c:	8809883a 	mov	r4,r17
   2d420:	002d2340 	call	2d234 <__multadd>
   2d424:	84bff81e 	bne	r16,r18,2d408 <__alt_data_end+0xf402d408>
   2d428:	dfc00617 	ldw	ra,24(sp)
   2d42c:	dd400517 	ldw	r21,20(sp)
   2d430:	dd000417 	ldw	r20,16(sp)
   2d434:	dcc00317 	ldw	r19,12(sp)
   2d438:	dc800217 	ldw	r18,8(sp)
   2d43c:	dc400117 	ldw	r17,4(sp)
   2d440:	dc000017 	ldw	r16,0(sp)
   2d444:	dec00704 	addi	sp,sp,28
   2d448:	f800283a 	ret
   2d44c:	84000284 	addi	r16,r16,10
   2d450:	1827883a 	mov	r19,r3
   2d454:	003fe906 	br	2d3fc <__alt_data_end+0xf402d3fc>

0002d458 <__hi0bits>:
   2d458:	20bfffec 	andhi	r2,r4,65535
   2d45c:	1000141e 	bne	r2,zero,2d4b0 <__hi0bits+0x58>
   2d460:	2008943a 	slli	r4,r4,16
   2d464:	00800404 	movi	r2,16
   2d468:	20ffc02c 	andhi	r3,r4,65280
   2d46c:	1800021e 	bne	r3,zero,2d478 <__hi0bits+0x20>
   2d470:	2008923a 	slli	r4,r4,8
   2d474:	10800204 	addi	r2,r2,8
   2d478:	20fc002c 	andhi	r3,r4,61440
   2d47c:	1800021e 	bne	r3,zero,2d488 <__hi0bits+0x30>
   2d480:	2008913a 	slli	r4,r4,4
   2d484:	10800104 	addi	r2,r2,4
   2d488:	20f0002c 	andhi	r3,r4,49152
   2d48c:	1800031e 	bne	r3,zero,2d49c <__hi0bits+0x44>
   2d490:	2109883a 	add	r4,r4,r4
   2d494:	10800084 	addi	r2,r2,2
   2d498:	2109883a 	add	r4,r4,r4
   2d49c:	20000316 	blt	r4,zero,2d4ac <__hi0bits+0x54>
   2d4a0:	2110002c 	andhi	r4,r4,16384
   2d4a4:	2000041e 	bne	r4,zero,2d4b8 <__hi0bits+0x60>
   2d4a8:	00800804 	movi	r2,32
   2d4ac:	f800283a 	ret
   2d4b0:	0005883a 	mov	r2,zero
   2d4b4:	003fec06 	br	2d468 <__alt_data_end+0xf402d468>
   2d4b8:	10800044 	addi	r2,r2,1
   2d4bc:	f800283a 	ret

0002d4c0 <__lo0bits>:
   2d4c0:	20c00017 	ldw	r3,0(r4)
   2d4c4:	188001cc 	andi	r2,r3,7
   2d4c8:	10000826 	beq	r2,zero,2d4ec <__lo0bits+0x2c>
   2d4cc:	1880004c 	andi	r2,r3,1
   2d4d0:	1000211e 	bne	r2,zero,2d558 <__lo0bits+0x98>
   2d4d4:	1880008c 	andi	r2,r3,2
   2d4d8:	1000211e 	bne	r2,zero,2d560 <__lo0bits+0xa0>
   2d4dc:	1806d0ba 	srli	r3,r3,2
   2d4e0:	00800084 	movi	r2,2
   2d4e4:	20c00015 	stw	r3,0(r4)
   2d4e8:	f800283a 	ret
   2d4ec:	18bfffcc 	andi	r2,r3,65535
   2d4f0:	10001326 	beq	r2,zero,2d540 <__lo0bits+0x80>
   2d4f4:	0005883a 	mov	r2,zero
   2d4f8:	19403fcc 	andi	r5,r3,255
   2d4fc:	2800021e 	bne	r5,zero,2d508 <__lo0bits+0x48>
   2d500:	1806d23a 	srli	r3,r3,8
   2d504:	10800204 	addi	r2,r2,8
   2d508:	194003cc 	andi	r5,r3,15
   2d50c:	2800021e 	bne	r5,zero,2d518 <__lo0bits+0x58>
   2d510:	1806d13a 	srli	r3,r3,4
   2d514:	10800104 	addi	r2,r2,4
   2d518:	194000cc 	andi	r5,r3,3
   2d51c:	2800021e 	bne	r5,zero,2d528 <__lo0bits+0x68>
   2d520:	1806d0ba 	srli	r3,r3,2
   2d524:	10800084 	addi	r2,r2,2
   2d528:	1940004c 	andi	r5,r3,1
   2d52c:	2800081e 	bne	r5,zero,2d550 <__lo0bits+0x90>
   2d530:	1806d07a 	srli	r3,r3,1
   2d534:	1800051e 	bne	r3,zero,2d54c <__lo0bits+0x8c>
   2d538:	00800804 	movi	r2,32
   2d53c:	f800283a 	ret
   2d540:	1806d43a 	srli	r3,r3,16
   2d544:	00800404 	movi	r2,16
   2d548:	003feb06 	br	2d4f8 <__alt_data_end+0xf402d4f8>
   2d54c:	10800044 	addi	r2,r2,1
   2d550:	20c00015 	stw	r3,0(r4)
   2d554:	f800283a 	ret
   2d558:	0005883a 	mov	r2,zero
   2d55c:	f800283a 	ret
   2d560:	1806d07a 	srli	r3,r3,1
   2d564:	00800044 	movi	r2,1
   2d568:	20c00015 	stw	r3,0(r4)
   2d56c:	f800283a 	ret

0002d570 <__i2b>:
   2d570:	defffd04 	addi	sp,sp,-12
   2d574:	dc000015 	stw	r16,0(sp)
   2d578:	04000044 	movi	r16,1
   2d57c:	dc400115 	stw	r17,4(sp)
   2d580:	2823883a 	mov	r17,r5
   2d584:	800b883a 	mov	r5,r16
   2d588:	dfc00215 	stw	ra,8(sp)
   2d58c:	002d1640 	call	2d164 <_Balloc>
   2d590:	14400515 	stw	r17,20(r2)
   2d594:	14000415 	stw	r16,16(r2)
   2d598:	dfc00217 	ldw	ra,8(sp)
   2d59c:	dc400117 	ldw	r17,4(sp)
   2d5a0:	dc000017 	ldw	r16,0(sp)
   2d5a4:	dec00304 	addi	sp,sp,12
   2d5a8:	f800283a 	ret

0002d5ac <__multiply>:
   2d5ac:	defffa04 	addi	sp,sp,-24
   2d5b0:	dcc00315 	stw	r19,12(sp)
   2d5b4:	dc800215 	stw	r18,8(sp)
   2d5b8:	34c00417 	ldw	r19,16(r6)
   2d5bc:	2c800417 	ldw	r18,16(r5)
   2d5c0:	dd000415 	stw	r20,16(sp)
   2d5c4:	dc400115 	stw	r17,4(sp)
   2d5c8:	dfc00515 	stw	ra,20(sp)
   2d5cc:	dc000015 	stw	r16,0(sp)
   2d5d0:	2829883a 	mov	r20,r5
   2d5d4:	3023883a 	mov	r17,r6
   2d5d8:	94c0050e 	bge	r18,r19,2d5f0 <__multiply+0x44>
   2d5dc:	9007883a 	mov	r3,r18
   2d5e0:	3029883a 	mov	r20,r6
   2d5e4:	9825883a 	mov	r18,r19
   2d5e8:	2823883a 	mov	r17,r5
   2d5ec:	1827883a 	mov	r19,r3
   2d5f0:	a0800217 	ldw	r2,8(r20)
   2d5f4:	94e1883a 	add	r16,r18,r19
   2d5f8:	a1400117 	ldw	r5,4(r20)
   2d5fc:	1400010e 	bge	r2,r16,2d604 <__multiply+0x58>
   2d600:	29400044 	addi	r5,r5,1
   2d604:	002d1640 	call	2d164 <_Balloc>
   2d608:	8415883a 	add	r10,r16,r16
   2d60c:	12c00504 	addi	r11,r2,20
   2d610:	5295883a 	add	r10,r10,r10
   2d614:	5a95883a 	add	r10,r11,r10
   2d618:	5807883a 	mov	r3,r11
   2d61c:	5a80032e 	bgeu	r11,r10,2d62c <__multiply+0x80>
   2d620:	18000015 	stw	zero,0(r3)
   2d624:	18c00104 	addi	r3,r3,4
   2d628:	1abffd36 	bltu	r3,r10,2d620 <__alt_data_end+0xf402d620>
   2d62c:	9ce7883a 	add	r19,r19,r19
   2d630:	94a5883a 	add	r18,r18,r18
   2d634:	89800504 	addi	r6,r17,20
   2d638:	9ce7883a 	add	r19,r19,r19
   2d63c:	a3400504 	addi	r13,r20,20
   2d640:	94a5883a 	add	r18,r18,r18
   2d644:	34d9883a 	add	r12,r6,r19
   2d648:	6c93883a 	add	r9,r13,r18
   2d64c:	3300422e 	bgeu	r6,r12,2d758 <__multiply+0x1ac>
   2d650:	37c00017 	ldw	ra,0(r6)
   2d654:	fbffffcc 	andi	r15,ra,65535
   2d658:	78001b26 	beq	r15,zero,2d6c8 <__multiply+0x11c>
   2d65c:	5811883a 	mov	r8,r11
   2d660:	681d883a 	mov	r14,r13
   2d664:	000f883a 	mov	r7,zero
   2d668:	71000017 	ldw	r4,0(r14)
   2d66c:	40c00017 	ldw	r3,0(r8)
   2d670:	73800104 	addi	r14,r14,4
   2d674:	217fffcc 	andi	r5,r4,65535
   2d678:	2bcb383a 	mul	r5,r5,r15
   2d67c:	2008d43a 	srli	r4,r4,16
   2d680:	1c7fffcc 	andi	r17,r3,65535
   2d684:	2c4b883a 	add	r5,r5,r17
   2d688:	29cb883a 	add	r5,r5,r7
   2d68c:	23c9383a 	mul	r4,r4,r15
   2d690:	1806d43a 	srli	r3,r3,16
   2d694:	280ed43a 	srli	r7,r5,16
   2d698:	297fffcc 	andi	r5,r5,65535
   2d69c:	20c7883a 	add	r3,r4,r3
   2d6a0:	19c7883a 	add	r3,r3,r7
   2d6a4:	1808943a 	slli	r4,r3,16
   2d6a8:	4023883a 	mov	r17,r8
   2d6ac:	180ed43a 	srli	r7,r3,16
   2d6b0:	214ab03a 	or	r5,r4,r5
   2d6b4:	41400015 	stw	r5,0(r8)
   2d6b8:	42000104 	addi	r8,r8,4
   2d6bc:	727fea36 	bltu	r14,r9,2d668 <__alt_data_end+0xf402d668>
   2d6c0:	89c00115 	stw	r7,4(r17)
   2d6c4:	37c00017 	ldw	ra,0(r6)
   2d6c8:	f83ed43a 	srli	ra,ra,16
   2d6cc:	f8001f26 	beq	ra,zero,2d74c <__multiply+0x1a0>
   2d6d0:	58c00017 	ldw	r3,0(r11)
   2d6d4:	681d883a 	mov	r14,r13
   2d6d8:	581f883a 	mov	r15,r11
   2d6dc:	1811883a 	mov	r8,r3
   2d6e0:	5825883a 	mov	r18,r11
   2d6e4:	000f883a 	mov	r7,zero
   2d6e8:	00000106 	br	2d6f0 <__multiply+0x144>
   2d6ec:	8825883a 	mov	r18,r17
   2d6f0:	7140000b 	ldhu	r5,0(r14)
   2d6f4:	4010d43a 	srli	r8,r8,16
   2d6f8:	193fffcc 	andi	r4,r3,65535
   2d6fc:	2fcb383a 	mul	r5,r5,ra
   2d700:	7bc00104 	addi	r15,r15,4
   2d704:	73800104 	addi	r14,r14,4
   2d708:	2a0b883a 	add	r5,r5,r8
   2d70c:	29cb883a 	add	r5,r5,r7
   2d710:	2806943a 	slli	r3,r5,16
   2d714:	94400104 	addi	r17,r18,4
   2d718:	280ad43a 	srli	r5,r5,16
   2d71c:	1908b03a 	or	r4,r3,r4
   2d720:	793fff15 	stw	r4,-4(r15)
   2d724:	70ffff17 	ldw	r3,-4(r14)
   2d728:	8a000017 	ldw	r8,0(r17)
   2d72c:	1806d43a 	srli	r3,r3,16
   2d730:	413fffcc 	andi	r4,r8,65535
   2d734:	1fc7383a 	mul	r3,r3,ra
   2d738:	1907883a 	add	r3,r3,r4
   2d73c:	1947883a 	add	r3,r3,r5
   2d740:	180ed43a 	srli	r7,r3,16
   2d744:	727fe936 	bltu	r14,r9,2d6ec <__alt_data_end+0xf402d6ec>
   2d748:	90c00115 	stw	r3,4(r18)
   2d74c:	31800104 	addi	r6,r6,4
   2d750:	5ac00104 	addi	r11,r11,4
   2d754:	333fbe36 	bltu	r6,r12,2d650 <__alt_data_end+0xf402d650>
   2d758:	0400090e 	bge	zero,r16,2d780 <__multiply+0x1d4>
   2d75c:	50ffff17 	ldw	r3,-4(r10)
   2d760:	52bfff04 	addi	r10,r10,-4
   2d764:	18000326 	beq	r3,zero,2d774 <__multiply+0x1c8>
   2d768:	00000506 	br	2d780 <__multiply+0x1d4>
   2d76c:	50c00017 	ldw	r3,0(r10)
   2d770:	1800031e 	bne	r3,zero,2d780 <__multiply+0x1d4>
   2d774:	843fffc4 	addi	r16,r16,-1
   2d778:	52bfff04 	addi	r10,r10,-4
   2d77c:	803ffb1e 	bne	r16,zero,2d76c <__alt_data_end+0xf402d76c>
   2d780:	14000415 	stw	r16,16(r2)
   2d784:	dfc00517 	ldw	ra,20(sp)
   2d788:	dd000417 	ldw	r20,16(sp)
   2d78c:	dcc00317 	ldw	r19,12(sp)
   2d790:	dc800217 	ldw	r18,8(sp)
   2d794:	dc400117 	ldw	r17,4(sp)
   2d798:	dc000017 	ldw	r16,0(sp)
   2d79c:	dec00604 	addi	sp,sp,24
   2d7a0:	f800283a 	ret

0002d7a4 <__pow5mult>:
   2d7a4:	defffa04 	addi	sp,sp,-24
   2d7a8:	dcc00315 	stw	r19,12(sp)
   2d7ac:	dc000015 	stw	r16,0(sp)
   2d7b0:	dfc00515 	stw	ra,20(sp)
   2d7b4:	dd000415 	stw	r20,16(sp)
   2d7b8:	dc800215 	stw	r18,8(sp)
   2d7bc:	dc400115 	stw	r17,4(sp)
   2d7c0:	308000cc 	andi	r2,r6,3
   2d7c4:	3021883a 	mov	r16,r6
   2d7c8:	2027883a 	mov	r19,r4
   2d7cc:	10002f1e 	bne	r2,zero,2d88c <__pow5mult+0xe8>
   2d7d0:	2825883a 	mov	r18,r5
   2d7d4:	8021d0ba 	srai	r16,r16,2
   2d7d8:	80001a26 	beq	r16,zero,2d844 <__pow5mult+0xa0>
   2d7dc:	9c401217 	ldw	r17,72(r19)
   2d7e0:	8800061e 	bne	r17,zero,2d7fc <__pow5mult+0x58>
   2d7e4:	00003406 	br	2d8b8 <__pow5mult+0x114>
   2d7e8:	8021d07a 	srai	r16,r16,1
   2d7ec:	80001526 	beq	r16,zero,2d844 <__pow5mult+0xa0>
   2d7f0:	88800017 	ldw	r2,0(r17)
   2d7f4:	10001c26 	beq	r2,zero,2d868 <__pow5mult+0xc4>
   2d7f8:	1023883a 	mov	r17,r2
   2d7fc:	8080004c 	andi	r2,r16,1
   2d800:	103ff926 	beq	r2,zero,2d7e8 <__alt_data_end+0xf402d7e8>
   2d804:	880d883a 	mov	r6,r17
   2d808:	900b883a 	mov	r5,r18
   2d80c:	9809883a 	mov	r4,r19
   2d810:	002d5ac0 	call	2d5ac <__multiply>
   2d814:	90001b26 	beq	r18,zero,2d884 <__pow5mult+0xe0>
   2d818:	91000117 	ldw	r4,4(r18)
   2d81c:	98c01317 	ldw	r3,76(r19)
   2d820:	8021d07a 	srai	r16,r16,1
   2d824:	2109883a 	add	r4,r4,r4
   2d828:	2109883a 	add	r4,r4,r4
   2d82c:	1907883a 	add	r3,r3,r4
   2d830:	19000017 	ldw	r4,0(r3)
   2d834:	91000015 	stw	r4,0(r18)
   2d838:	1c800015 	stw	r18,0(r3)
   2d83c:	1025883a 	mov	r18,r2
   2d840:	803feb1e 	bne	r16,zero,2d7f0 <__alt_data_end+0xf402d7f0>
   2d844:	9005883a 	mov	r2,r18
   2d848:	dfc00517 	ldw	ra,20(sp)
   2d84c:	dd000417 	ldw	r20,16(sp)
   2d850:	dcc00317 	ldw	r19,12(sp)
   2d854:	dc800217 	ldw	r18,8(sp)
   2d858:	dc400117 	ldw	r17,4(sp)
   2d85c:	dc000017 	ldw	r16,0(sp)
   2d860:	dec00604 	addi	sp,sp,24
   2d864:	f800283a 	ret
   2d868:	880d883a 	mov	r6,r17
   2d86c:	880b883a 	mov	r5,r17
   2d870:	9809883a 	mov	r4,r19
   2d874:	002d5ac0 	call	2d5ac <__multiply>
   2d878:	88800015 	stw	r2,0(r17)
   2d87c:	10000015 	stw	zero,0(r2)
   2d880:	003fdd06 	br	2d7f8 <__alt_data_end+0xf402d7f8>
   2d884:	1025883a 	mov	r18,r2
   2d888:	003fd706 	br	2d7e8 <__alt_data_end+0xf402d7e8>
   2d88c:	10bfffc4 	addi	r2,r2,-1
   2d890:	1085883a 	add	r2,r2,r2
   2d894:	00c000f4 	movhi	r3,3
   2d898:	18d73604 	addi	r3,r3,23768
   2d89c:	1085883a 	add	r2,r2,r2
   2d8a0:	1885883a 	add	r2,r3,r2
   2d8a4:	11800017 	ldw	r6,0(r2)
   2d8a8:	000f883a 	mov	r7,zero
   2d8ac:	002d2340 	call	2d234 <__multadd>
   2d8b0:	1025883a 	mov	r18,r2
   2d8b4:	003fc706 	br	2d7d4 <__alt_data_end+0xf402d7d4>
   2d8b8:	05000044 	movi	r20,1
   2d8bc:	a00b883a 	mov	r5,r20
   2d8c0:	9809883a 	mov	r4,r19
   2d8c4:	002d1640 	call	2d164 <_Balloc>
   2d8c8:	1023883a 	mov	r17,r2
   2d8cc:	00809c44 	movi	r2,625
   2d8d0:	88800515 	stw	r2,20(r17)
   2d8d4:	8d000415 	stw	r20,16(r17)
   2d8d8:	9c401215 	stw	r17,72(r19)
   2d8dc:	88000015 	stw	zero,0(r17)
   2d8e0:	003fc606 	br	2d7fc <__alt_data_end+0xf402d7fc>

0002d8e4 <__lshift>:
   2d8e4:	defff904 	addi	sp,sp,-28
   2d8e8:	dd400515 	stw	r21,20(sp)
   2d8ec:	dcc00315 	stw	r19,12(sp)
   2d8f0:	302bd17a 	srai	r21,r6,5
   2d8f4:	2cc00417 	ldw	r19,16(r5)
   2d8f8:	28800217 	ldw	r2,8(r5)
   2d8fc:	dd000415 	stw	r20,16(sp)
   2d900:	ace7883a 	add	r19,r21,r19
   2d904:	dc800215 	stw	r18,8(sp)
   2d908:	dc400115 	stw	r17,4(sp)
   2d90c:	dc000015 	stw	r16,0(sp)
   2d910:	dfc00615 	stw	ra,24(sp)
   2d914:	9c000044 	addi	r16,r19,1
   2d918:	2823883a 	mov	r17,r5
   2d91c:	3029883a 	mov	r20,r6
   2d920:	2025883a 	mov	r18,r4
   2d924:	29400117 	ldw	r5,4(r5)
   2d928:	1400030e 	bge	r2,r16,2d938 <__lshift+0x54>
   2d92c:	1085883a 	add	r2,r2,r2
   2d930:	29400044 	addi	r5,r5,1
   2d934:	143ffd16 	blt	r2,r16,2d92c <__alt_data_end+0xf402d92c>
   2d938:	9009883a 	mov	r4,r18
   2d93c:	002d1640 	call	2d164 <_Balloc>
   2d940:	10c00504 	addi	r3,r2,20
   2d944:	0540070e 	bge	zero,r21,2d964 <__lshift+0x80>
   2d948:	ad6b883a 	add	r21,r21,r21
   2d94c:	ad6b883a 	add	r21,r21,r21
   2d950:	1809883a 	mov	r4,r3
   2d954:	1d47883a 	add	r3,r3,r21
   2d958:	20000015 	stw	zero,0(r4)
   2d95c:	21000104 	addi	r4,r4,4
   2d960:	193ffd1e 	bne	r3,r4,2d958 <__alt_data_end+0xf402d958>
   2d964:	8a000417 	ldw	r8,16(r17)
   2d968:	89000504 	addi	r4,r17,20
   2d96c:	a18007cc 	andi	r6,r20,31
   2d970:	4211883a 	add	r8,r8,r8
   2d974:	4211883a 	add	r8,r8,r8
   2d978:	2211883a 	add	r8,r4,r8
   2d97c:	30002326 	beq	r6,zero,2da0c <__lshift+0x128>
   2d980:	02400804 	movi	r9,32
   2d984:	4993c83a 	sub	r9,r9,r6
   2d988:	000b883a 	mov	r5,zero
   2d98c:	21c00017 	ldw	r7,0(r4)
   2d990:	1815883a 	mov	r10,r3
   2d994:	18c00104 	addi	r3,r3,4
   2d998:	398e983a 	sll	r7,r7,r6
   2d99c:	21000104 	addi	r4,r4,4
   2d9a0:	394ab03a 	or	r5,r7,r5
   2d9a4:	197fff15 	stw	r5,-4(r3)
   2d9a8:	217fff17 	ldw	r5,-4(r4)
   2d9ac:	2a4ad83a 	srl	r5,r5,r9
   2d9b0:	223ff636 	bltu	r4,r8,2d98c <__alt_data_end+0xf402d98c>
   2d9b4:	51400115 	stw	r5,4(r10)
   2d9b8:	28001a1e 	bne	r5,zero,2da24 <__lshift+0x140>
   2d9bc:	843fffc4 	addi	r16,r16,-1
   2d9c0:	14000415 	stw	r16,16(r2)
   2d9c4:	88000826 	beq	r17,zero,2d9e8 <__lshift+0x104>
   2d9c8:	89000117 	ldw	r4,4(r17)
   2d9cc:	90c01317 	ldw	r3,76(r18)
   2d9d0:	2109883a 	add	r4,r4,r4
   2d9d4:	2109883a 	add	r4,r4,r4
   2d9d8:	1907883a 	add	r3,r3,r4
   2d9dc:	19000017 	ldw	r4,0(r3)
   2d9e0:	89000015 	stw	r4,0(r17)
   2d9e4:	1c400015 	stw	r17,0(r3)
   2d9e8:	dfc00617 	ldw	ra,24(sp)
   2d9ec:	dd400517 	ldw	r21,20(sp)
   2d9f0:	dd000417 	ldw	r20,16(sp)
   2d9f4:	dcc00317 	ldw	r19,12(sp)
   2d9f8:	dc800217 	ldw	r18,8(sp)
   2d9fc:	dc400117 	ldw	r17,4(sp)
   2da00:	dc000017 	ldw	r16,0(sp)
   2da04:	dec00704 	addi	sp,sp,28
   2da08:	f800283a 	ret
   2da0c:	21400017 	ldw	r5,0(r4)
   2da10:	18c00104 	addi	r3,r3,4
   2da14:	21000104 	addi	r4,r4,4
   2da18:	197fff15 	stw	r5,-4(r3)
   2da1c:	223ffb36 	bltu	r4,r8,2da0c <__alt_data_end+0xf402da0c>
   2da20:	003fe606 	br	2d9bc <__alt_data_end+0xf402d9bc>
   2da24:	9c000084 	addi	r16,r19,2
   2da28:	003fe406 	br	2d9bc <__alt_data_end+0xf402d9bc>

0002da2c <__mcmp>:
   2da2c:	20800417 	ldw	r2,16(r4)
   2da30:	28c00417 	ldw	r3,16(r5)
   2da34:	10c5c83a 	sub	r2,r2,r3
   2da38:	1000111e 	bne	r2,zero,2da80 <__mcmp+0x54>
   2da3c:	18c7883a 	add	r3,r3,r3
   2da40:	18c7883a 	add	r3,r3,r3
   2da44:	21000504 	addi	r4,r4,20
   2da48:	29400504 	addi	r5,r5,20
   2da4c:	20c5883a 	add	r2,r4,r3
   2da50:	28cb883a 	add	r5,r5,r3
   2da54:	00000106 	br	2da5c <__mcmp+0x30>
   2da58:	20800a2e 	bgeu	r4,r2,2da84 <__mcmp+0x58>
   2da5c:	10bfff04 	addi	r2,r2,-4
   2da60:	297fff04 	addi	r5,r5,-4
   2da64:	11800017 	ldw	r6,0(r2)
   2da68:	28c00017 	ldw	r3,0(r5)
   2da6c:	30fffa26 	beq	r6,r3,2da58 <__alt_data_end+0xf402da58>
   2da70:	30c00236 	bltu	r6,r3,2da7c <__mcmp+0x50>
   2da74:	00800044 	movi	r2,1
   2da78:	f800283a 	ret
   2da7c:	00bfffc4 	movi	r2,-1
   2da80:	f800283a 	ret
   2da84:	0005883a 	mov	r2,zero
   2da88:	f800283a 	ret

0002da8c <__mdiff>:
   2da8c:	28c00417 	ldw	r3,16(r5)
   2da90:	30800417 	ldw	r2,16(r6)
   2da94:	defffa04 	addi	sp,sp,-24
   2da98:	dcc00315 	stw	r19,12(sp)
   2da9c:	dc800215 	stw	r18,8(sp)
   2daa0:	dfc00515 	stw	ra,20(sp)
   2daa4:	dd000415 	stw	r20,16(sp)
   2daa8:	dc400115 	stw	r17,4(sp)
   2daac:	dc000015 	stw	r16,0(sp)
   2dab0:	1887c83a 	sub	r3,r3,r2
   2dab4:	2825883a 	mov	r18,r5
   2dab8:	3027883a 	mov	r19,r6
   2dabc:	1800141e 	bne	r3,zero,2db10 <__mdiff+0x84>
   2dac0:	1085883a 	add	r2,r2,r2
   2dac4:	1085883a 	add	r2,r2,r2
   2dac8:	2a000504 	addi	r8,r5,20
   2dacc:	34000504 	addi	r16,r6,20
   2dad0:	4087883a 	add	r3,r8,r2
   2dad4:	8085883a 	add	r2,r16,r2
   2dad8:	00000106 	br	2dae0 <__mdiff+0x54>
   2dadc:	40c0592e 	bgeu	r8,r3,2dc44 <__mdiff+0x1b8>
   2dae0:	18ffff04 	addi	r3,r3,-4
   2dae4:	10bfff04 	addi	r2,r2,-4
   2dae8:	19c00017 	ldw	r7,0(r3)
   2daec:	11400017 	ldw	r5,0(r2)
   2daf0:	397ffa26 	beq	r7,r5,2dadc <__alt_data_end+0xf402dadc>
   2daf4:	3940592e 	bgeu	r7,r5,2dc5c <__mdiff+0x1d0>
   2daf8:	9005883a 	mov	r2,r18
   2dafc:	4023883a 	mov	r17,r8
   2db00:	9825883a 	mov	r18,r19
   2db04:	05000044 	movi	r20,1
   2db08:	1027883a 	mov	r19,r2
   2db0c:	00000406 	br	2db20 <__mdiff+0x94>
   2db10:	18005616 	blt	r3,zero,2dc6c <__mdiff+0x1e0>
   2db14:	34400504 	addi	r17,r6,20
   2db18:	2c000504 	addi	r16,r5,20
   2db1c:	0029883a 	mov	r20,zero
   2db20:	91400117 	ldw	r5,4(r18)
   2db24:	002d1640 	call	2d164 <_Balloc>
   2db28:	92400417 	ldw	r9,16(r18)
   2db2c:	9b000417 	ldw	r12,16(r19)
   2db30:	12c00504 	addi	r11,r2,20
   2db34:	4a51883a 	add	r8,r9,r9
   2db38:	6319883a 	add	r12,r12,r12
   2db3c:	4211883a 	add	r8,r8,r8
   2db40:	6319883a 	add	r12,r12,r12
   2db44:	15000315 	stw	r20,12(r2)
   2db48:	8211883a 	add	r8,r16,r8
   2db4c:	8b19883a 	add	r12,r17,r12
   2db50:	0007883a 	mov	r3,zero
   2db54:	81400017 	ldw	r5,0(r16)
   2db58:	89c00017 	ldw	r7,0(r17)
   2db5c:	59800104 	addi	r6,r11,4
   2db60:	293fffcc 	andi	r4,r5,65535
   2db64:	20c7883a 	add	r3,r4,r3
   2db68:	393fffcc 	andi	r4,r7,65535
   2db6c:	1909c83a 	sub	r4,r3,r4
   2db70:	280ad43a 	srli	r5,r5,16
   2db74:	380ed43a 	srli	r7,r7,16
   2db78:	2007d43a 	srai	r3,r4,16
   2db7c:	213fffcc 	andi	r4,r4,65535
   2db80:	29cbc83a 	sub	r5,r5,r7
   2db84:	28c7883a 	add	r3,r5,r3
   2db88:	180a943a 	slli	r5,r3,16
   2db8c:	8c400104 	addi	r17,r17,4
   2db90:	84000104 	addi	r16,r16,4
   2db94:	2908b03a 	or	r4,r5,r4
   2db98:	59000015 	stw	r4,0(r11)
   2db9c:	1807d43a 	srai	r3,r3,16
   2dba0:	3015883a 	mov	r10,r6
   2dba4:	3017883a 	mov	r11,r6
   2dba8:	8b3fea36 	bltu	r17,r12,2db54 <__alt_data_end+0xf402db54>
   2dbac:	8200162e 	bgeu	r16,r8,2dc08 <__mdiff+0x17c>
   2dbb0:	8017883a 	mov	r11,r16
   2dbb4:	59400017 	ldw	r5,0(r11)
   2dbb8:	31800104 	addi	r6,r6,4
   2dbbc:	5ac00104 	addi	r11,r11,4
   2dbc0:	293fffcc 	andi	r4,r5,65535
   2dbc4:	20c7883a 	add	r3,r4,r3
   2dbc8:	280ed43a 	srli	r7,r5,16
   2dbcc:	180bd43a 	srai	r5,r3,16
   2dbd0:	193fffcc 	andi	r4,r3,65535
   2dbd4:	3947883a 	add	r3,r7,r5
   2dbd8:	180a943a 	slli	r5,r3,16
   2dbdc:	1807d43a 	srai	r3,r3,16
   2dbe0:	2908b03a 	or	r4,r5,r4
   2dbe4:	313fff15 	stw	r4,-4(r6)
   2dbe8:	5a3ff236 	bltu	r11,r8,2dbb4 <__alt_data_end+0xf402dbb4>
   2dbec:	0406303a 	nor	r3,zero,r16
   2dbf0:	1a07883a 	add	r3,r3,r8
   2dbf4:	1806d0ba 	srli	r3,r3,2
   2dbf8:	18c00044 	addi	r3,r3,1
   2dbfc:	18c7883a 	add	r3,r3,r3
   2dc00:	18c7883a 	add	r3,r3,r3
   2dc04:	50d5883a 	add	r10,r10,r3
   2dc08:	50ffff04 	addi	r3,r10,-4
   2dc0c:	2000041e 	bne	r4,zero,2dc20 <__mdiff+0x194>
   2dc10:	18ffff04 	addi	r3,r3,-4
   2dc14:	19000017 	ldw	r4,0(r3)
   2dc18:	4a7fffc4 	addi	r9,r9,-1
   2dc1c:	203ffc26 	beq	r4,zero,2dc10 <__alt_data_end+0xf402dc10>
   2dc20:	12400415 	stw	r9,16(r2)
   2dc24:	dfc00517 	ldw	ra,20(sp)
   2dc28:	dd000417 	ldw	r20,16(sp)
   2dc2c:	dcc00317 	ldw	r19,12(sp)
   2dc30:	dc800217 	ldw	r18,8(sp)
   2dc34:	dc400117 	ldw	r17,4(sp)
   2dc38:	dc000017 	ldw	r16,0(sp)
   2dc3c:	dec00604 	addi	sp,sp,24
   2dc40:	f800283a 	ret
   2dc44:	000b883a 	mov	r5,zero
   2dc48:	002d1640 	call	2d164 <_Balloc>
   2dc4c:	00c00044 	movi	r3,1
   2dc50:	10c00415 	stw	r3,16(r2)
   2dc54:	10000515 	stw	zero,20(r2)
   2dc58:	003ff206 	br	2dc24 <__alt_data_end+0xf402dc24>
   2dc5c:	8023883a 	mov	r17,r16
   2dc60:	0029883a 	mov	r20,zero
   2dc64:	4021883a 	mov	r16,r8
   2dc68:	003fad06 	br	2db20 <__alt_data_end+0xf402db20>
   2dc6c:	9005883a 	mov	r2,r18
   2dc70:	94400504 	addi	r17,r18,20
   2dc74:	9c000504 	addi	r16,r19,20
   2dc78:	9825883a 	mov	r18,r19
   2dc7c:	05000044 	movi	r20,1
   2dc80:	1027883a 	mov	r19,r2
   2dc84:	003fa606 	br	2db20 <__alt_data_end+0xf402db20>

0002dc88 <__ulp>:
   2dc88:	295ffc2c 	andhi	r5,r5,32752
   2dc8c:	00bf3034 	movhi	r2,64704
   2dc90:	2887883a 	add	r3,r5,r2
   2dc94:	00c0020e 	bge	zero,r3,2dca0 <__ulp+0x18>
   2dc98:	0005883a 	mov	r2,zero
   2dc9c:	f800283a 	ret
   2dca0:	00c7c83a 	sub	r3,zero,r3
   2dca4:	1807d53a 	srai	r3,r3,20
   2dca8:	008004c4 	movi	r2,19
   2dcac:	10c00b0e 	bge	r2,r3,2dcdc <__ulp+0x54>
   2dcb0:	18bffb04 	addi	r2,r3,-20
   2dcb4:	01000784 	movi	r4,30
   2dcb8:	0007883a 	mov	r3,zero
   2dcbc:	20800516 	blt	r4,r2,2dcd4 <__ulp+0x4c>
   2dcc0:	010007c4 	movi	r4,31
   2dcc4:	2089c83a 	sub	r4,r4,r2
   2dcc8:	00800044 	movi	r2,1
   2dccc:	1104983a 	sll	r2,r2,r4
   2dcd0:	f800283a 	ret
   2dcd4:	00800044 	movi	r2,1
   2dcd8:	f800283a 	ret
   2dcdc:	01400234 	movhi	r5,8
   2dce0:	28c7d83a 	sra	r3,r5,r3
   2dce4:	0005883a 	mov	r2,zero
   2dce8:	f800283a 	ret

0002dcec <__b2d>:
   2dcec:	defffa04 	addi	sp,sp,-24
   2dcf0:	dc000015 	stw	r16,0(sp)
   2dcf4:	24000417 	ldw	r16,16(r4)
   2dcf8:	dc400115 	stw	r17,4(sp)
   2dcfc:	24400504 	addi	r17,r4,20
   2dd00:	8421883a 	add	r16,r16,r16
   2dd04:	8421883a 	add	r16,r16,r16
   2dd08:	8c21883a 	add	r16,r17,r16
   2dd0c:	dc800215 	stw	r18,8(sp)
   2dd10:	84bfff17 	ldw	r18,-4(r16)
   2dd14:	dd000415 	stw	r20,16(sp)
   2dd18:	dcc00315 	stw	r19,12(sp)
   2dd1c:	9009883a 	mov	r4,r18
   2dd20:	2829883a 	mov	r20,r5
   2dd24:	dfc00515 	stw	ra,20(sp)
   2dd28:	002d4580 	call	2d458 <__hi0bits>
   2dd2c:	00c00804 	movi	r3,32
   2dd30:	1889c83a 	sub	r4,r3,r2
   2dd34:	a1000015 	stw	r4,0(r20)
   2dd38:	01000284 	movi	r4,10
   2dd3c:	84ffff04 	addi	r19,r16,-4
   2dd40:	20801216 	blt	r4,r2,2dd8c <__b2d+0xa0>
   2dd44:	018002c4 	movi	r6,11
   2dd48:	308dc83a 	sub	r6,r6,r2
   2dd4c:	9186d83a 	srl	r3,r18,r6
   2dd50:	18cffc34 	orhi	r3,r3,16368
   2dd54:	8cc0212e 	bgeu	r17,r19,2dddc <__b2d+0xf0>
   2dd58:	813ffe17 	ldw	r4,-8(r16)
   2dd5c:	218cd83a 	srl	r6,r4,r6
   2dd60:	10800544 	addi	r2,r2,21
   2dd64:	9084983a 	sll	r2,r18,r2
   2dd68:	1184b03a 	or	r2,r2,r6
   2dd6c:	dfc00517 	ldw	ra,20(sp)
   2dd70:	dd000417 	ldw	r20,16(sp)
   2dd74:	dcc00317 	ldw	r19,12(sp)
   2dd78:	dc800217 	ldw	r18,8(sp)
   2dd7c:	dc400117 	ldw	r17,4(sp)
   2dd80:	dc000017 	ldw	r16,0(sp)
   2dd84:	dec00604 	addi	sp,sp,24
   2dd88:	f800283a 	ret
   2dd8c:	8cc00f2e 	bgeu	r17,r19,2ddcc <__b2d+0xe0>
   2dd90:	117ffd44 	addi	r5,r2,-11
   2dd94:	80bffe17 	ldw	r2,-8(r16)
   2dd98:	28000e26 	beq	r5,zero,2ddd4 <__b2d+0xe8>
   2dd9c:	1949c83a 	sub	r4,r3,r5
   2dda0:	9164983a 	sll	r18,r18,r5
   2dda4:	1106d83a 	srl	r3,r2,r4
   2dda8:	81bffe04 	addi	r6,r16,-8
   2ddac:	948ffc34 	orhi	r18,r18,16368
   2ddb0:	90c6b03a 	or	r3,r18,r3
   2ddb4:	89800e2e 	bgeu	r17,r6,2ddf0 <__b2d+0x104>
   2ddb8:	81bffd17 	ldw	r6,-12(r16)
   2ddbc:	1144983a 	sll	r2,r2,r5
   2ddc0:	310ad83a 	srl	r5,r6,r4
   2ddc4:	2884b03a 	or	r2,r5,r2
   2ddc8:	003fe806 	br	2dd6c <__alt_data_end+0xf402dd6c>
   2ddcc:	10bffd44 	addi	r2,r2,-11
   2ddd0:	1000041e 	bne	r2,zero,2dde4 <__b2d+0xf8>
   2ddd4:	90cffc34 	orhi	r3,r18,16368
   2ddd8:	003fe406 	br	2dd6c <__alt_data_end+0xf402dd6c>
   2dddc:	000d883a 	mov	r6,zero
   2dde0:	003fdf06 	br	2dd60 <__alt_data_end+0xf402dd60>
   2dde4:	90a4983a 	sll	r18,r18,r2
   2dde8:	0005883a 	mov	r2,zero
   2ddec:	003ff906 	br	2ddd4 <__alt_data_end+0xf402ddd4>
   2ddf0:	1144983a 	sll	r2,r2,r5
   2ddf4:	003fdd06 	br	2dd6c <__alt_data_end+0xf402dd6c>

0002ddf8 <__d2b>:
   2ddf8:	defff804 	addi	sp,sp,-32
   2ddfc:	dc000215 	stw	r16,8(sp)
   2de00:	3021883a 	mov	r16,r6
   2de04:	dc400315 	stw	r17,12(sp)
   2de08:	8022907a 	slli	r17,r16,1
   2de0c:	dd000615 	stw	r20,24(sp)
   2de10:	2829883a 	mov	r20,r5
   2de14:	01400044 	movi	r5,1
   2de18:	dcc00515 	stw	r19,20(sp)
   2de1c:	dc800415 	stw	r18,16(sp)
   2de20:	dfc00715 	stw	ra,28(sp)
   2de24:	3825883a 	mov	r18,r7
   2de28:	8822d57a 	srli	r17,r17,21
   2de2c:	002d1640 	call	2d164 <_Balloc>
   2de30:	1027883a 	mov	r19,r2
   2de34:	00800434 	movhi	r2,16
   2de38:	10bfffc4 	addi	r2,r2,-1
   2de3c:	808c703a 	and	r6,r16,r2
   2de40:	88000126 	beq	r17,zero,2de48 <__d2b+0x50>
   2de44:	31800434 	orhi	r6,r6,16
   2de48:	d9800015 	stw	r6,0(sp)
   2de4c:	a0002426 	beq	r20,zero,2dee0 <__d2b+0xe8>
   2de50:	d9000104 	addi	r4,sp,4
   2de54:	dd000115 	stw	r20,4(sp)
   2de58:	002d4c00 	call	2d4c0 <__lo0bits>
   2de5c:	d8c00017 	ldw	r3,0(sp)
   2de60:	10002f1e 	bne	r2,zero,2df20 <__d2b+0x128>
   2de64:	d9000117 	ldw	r4,4(sp)
   2de68:	99000515 	stw	r4,20(r19)
   2de6c:	1821003a 	cmpeq	r16,r3,zero
   2de70:	01000084 	movi	r4,2
   2de74:	2421c83a 	sub	r16,r4,r16
   2de78:	98c00615 	stw	r3,24(r19)
   2de7c:	9c000415 	stw	r16,16(r19)
   2de80:	88001f1e 	bne	r17,zero,2df00 <__d2b+0x108>
   2de84:	10bef384 	addi	r2,r2,-1074
   2de88:	90800015 	stw	r2,0(r18)
   2de8c:	00900034 	movhi	r2,16384
   2de90:	10bfffc4 	addi	r2,r2,-1
   2de94:	8085883a 	add	r2,r16,r2
   2de98:	1085883a 	add	r2,r2,r2
   2de9c:	1085883a 	add	r2,r2,r2
   2dea0:	9885883a 	add	r2,r19,r2
   2dea4:	11000517 	ldw	r4,20(r2)
   2dea8:	8020917a 	slli	r16,r16,5
   2deac:	002d4580 	call	2d458 <__hi0bits>
   2deb0:	d8c00817 	ldw	r3,32(sp)
   2deb4:	8085c83a 	sub	r2,r16,r2
   2deb8:	18800015 	stw	r2,0(r3)
   2debc:	9805883a 	mov	r2,r19
   2dec0:	dfc00717 	ldw	ra,28(sp)
   2dec4:	dd000617 	ldw	r20,24(sp)
   2dec8:	dcc00517 	ldw	r19,20(sp)
   2decc:	dc800417 	ldw	r18,16(sp)
   2ded0:	dc400317 	ldw	r17,12(sp)
   2ded4:	dc000217 	ldw	r16,8(sp)
   2ded8:	dec00804 	addi	sp,sp,32
   2dedc:	f800283a 	ret
   2dee0:	d809883a 	mov	r4,sp
   2dee4:	002d4c00 	call	2d4c0 <__lo0bits>
   2dee8:	d8c00017 	ldw	r3,0(sp)
   2deec:	04000044 	movi	r16,1
   2def0:	9c000415 	stw	r16,16(r19)
   2def4:	98c00515 	stw	r3,20(r19)
   2def8:	10800804 	addi	r2,r2,32
   2defc:	883fe126 	beq	r17,zero,2de84 <__alt_data_end+0xf402de84>
   2df00:	00c00d44 	movi	r3,53
   2df04:	8c7ef344 	addi	r17,r17,-1075
   2df08:	88a3883a 	add	r17,r17,r2
   2df0c:	1885c83a 	sub	r2,r3,r2
   2df10:	d8c00817 	ldw	r3,32(sp)
   2df14:	94400015 	stw	r17,0(r18)
   2df18:	18800015 	stw	r2,0(r3)
   2df1c:	003fe706 	br	2debc <__alt_data_end+0xf402debc>
   2df20:	01000804 	movi	r4,32
   2df24:	2089c83a 	sub	r4,r4,r2
   2df28:	1908983a 	sll	r4,r3,r4
   2df2c:	d9400117 	ldw	r5,4(sp)
   2df30:	1886d83a 	srl	r3,r3,r2
   2df34:	2148b03a 	or	r4,r4,r5
   2df38:	99000515 	stw	r4,20(r19)
   2df3c:	d8c00015 	stw	r3,0(sp)
   2df40:	003fca06 	br	2de6c <__alt_data_end+0xf402de6c>

0002df44 <__ratio>:
   2df44:	defff904 	addi	sp,sp,-28
   2df48:	dc400315 	stw	r17,12(sp)
   2df4c:	2823883a 	mov	r17,r5
   2df50:	d9400104 	addi	r5,sp,4
   2df54:	dfc00615 	stw	ra,24(sp)
   2df58:	dcc00515 	stw	r19,20(sp)
   2df5c:	dc800415 	stw	r18,16(sp)
   2df60:	2027883a 	mov	r19,r4
   2df64:	dc000215 	stw	r16,8(sp)
   2df68:	002dcec0 	call	2dcec <__b2d>
   2df6c:	d80b883a 	mov	r5,sp
   2df70:	8809883a 	mov	r4,r17
   2df74:	1025883a 	mov	r18,r2
   2df78:	1821883a 	mov	r16,r3
   2df7c:	002dcec0 	call	2dcec <__b2d>
   2df80:	8a000417 	ldw	r8,16(r17)
   2df84:	99000417 	ldw	r4,16(r19)
   2df88:	d9400117 	ldw	r5,4(sp)
   2df8c:	2209c83a 	sub	r4,r4,r8
   2df90:	2010917a 	slli	r8,r4,5
   2df94:	d9000017 	ldw	r4,0(sp)
   2df98:	2909c83a 	sub	r4,r5,r4
   2df9c:	4109883a 	add	r4,r8,r4
   2dfa0:	01000e0e 	bge	zero,r4,2dfdc <__ratio+0x98>
   2dfa4:	2008953a 	slli	r4,r4,20
   2dfa8:	2421883a 	add	r16,r4,r16
   2dfac:	100d883a 	mov	r6,r2
   2dfb0:	180f883a 	mov	r7,r3
   2dfb4:	9009883a 	mov	r4,r18
   2dfb8:	800b883a 	mov	r5,r16
   2dfbc:	00252f00 	call	252f0 <__divdf3>
   2dfc0:	dfc00617 	ldw	ra,24(sp)
   2dfc4:	dcc00517 	ldw	r19,20(sp)
   2dfc8:	dc800417 	ldw	r18,16(sp)
   2dfcc:	dc400317 	ldw	r17,12(sp)
   2dfd0:	dc000217 	ldw	r16,8(sp)
   2dfd4:	dec00704 	addi	sp,sp,28
   2dfd8:	f800283a 	ret
   2dfdc:	2008953a 	slli	r4,r4,20
   2dfe0:	1907c83a 	sub	r3,r3,r4
   2dfe4:	003ff106 	br	2dfac <__alt_data_end+0xf402dfac>

0002dfe8 <_mprec_log10>:
   2dfe8:	defffe04 	addi	sp,sp,-8
   2dfec:	dc000015 	stw	r16,0(sp)
   2dff0:	dfc00115 	stw	ra,4(sp)
   2dff4:	008005c4 	movi	r2,23
   2dff8:	2021883a 	mov	r16,r4
   2dffc:	11000d0e 	bge	r2,r4,2e034 <_mprec_log10+0x4c>
   2e000:	0005883a 	mov	r2,zero
   2e004:	00cffc34 	movhi	r3,16368
   2e008:	843fffc4 	addi	r16,r16,-1
   2e00c:	000d883a 	mov	r6,zero
   2e010:	01d00934 	movhi	r7,16420
   2e014:	1009883a 	mov	r4,r2
   2e018:	180b883a 	mov	r5,r3
   2e01c:	0025e300 	call	25e30 <__muldf3>
   2e020:	803ff91e 	bne	r16,zero,2e008 <__alt_data_end+0xf402e008>
   2e024:	dfc00117 	ldw	ra,4(sp)
   2e028:	dc000017 	ldw	r16,0(sp)
   2e02c:	dec00204 	addi	sp,sp,8
   2e030:	f800283a 	ret
   2e034:	202090fa 	slli	r16,r4,3
   2e038:	008000f4 	movhi	r2,3
   2e03c:	10974d04 	addi	r2,r2,23860
   2e040:	1421883a 	add	r16,r2,r16
   2e044:	80800017 	ldw	r2,0(r16)
   2e048:	80c00117 	ldw	r3,4(r16)
   2e04c:	dfc00117 	ldw	ra,4(sp)
   2e050:	dc000017 	ldw	r16,0(sp)
   2e054:	dec00204 	addi	sp,sp,8
   2e058:	f800283a 	ret

0002e05c <__copybits>:
   2e05c:	297fffc4 	addi	r5,r5,-1
   2e060:	280fd17a 	srai	r7,r5,5
   2e064:	30c00417 	ldw	r3,16(r6)
   2e068:	30800504 	addi	r2,r6,20
   2e06c:	39c00044 	addi	r7,r7,1
   2e070:	18c7883a 	add	r3,r3,r3
   2e074:	39cf883a 	add	r7,r7,r7
   2e078:	18c7883a 	add	r3,r3,r3
   2e07c:	39cf883a 	add	r7,r7,r7
   2e080:	10c7883a 	add	r3,r2,r3
   2e084:	21cf883a 	add	r7,r4,r7
   2e088:	10c00d2e 	bgeu	r2,r3,2e0c0 <__copybits+0x64>
   2e08c:	200b883a 	mov	r5,r4
   2e090:	12000017 	ldw	r8,0(r2)
   2e094:	29400104 	addi	r5,r5,4
   2e098:	10800104 	addi	r2,r2,4
   2e09c:	2a3fff15 	stw	r8,-4(r5)
   2e0a0:	10fffb36 	bltu	r2,r3,2e090 <__alt_data_end+0xf402e090>
   2e0a4:	1985c83a 	sub	r2,r3,r6
   2e0a8:	10bffac4 	addi	r2,r2,-21
   2e0ac:	1004d0ba 	srli	r2,r2,2
   2e0b0:	10800044 	addi	r2,r2,1
   2e0b4:	1085883a 	add	r2,r2,r2
   2e0b8:	1085883a 	add	r2,r2,r2
   2e0bc:	2089883a 	add	r4,r4,r2
   2e0c0:	21c0032e 	bgeu	r4,r7,2e0d0 <__copybits+0x74>
   2e0c4:	20000015 	stw	zero,0(r4)
   2e0c8:	21000104 	addi	r4,r4,4
   2e0cc:	21fffd36 	bltu	r4,r7,2e0c4 <__alt_data_end+0xf402e0c4>
   2e0d0:	f800283a 	ret

0002e0d4 <__any_on>:
   2e0d4:	20c00417 	ldw	r3,16(r4)
   2e0d8:	2805d17a 	srai	r2,r5,5
   2e0dc:	21000504 	addi	r4,r4,20
   2e0e0:	18800d0e 	bge	r3,r2,2e118 <__any_on+0x44>
   2e0e4:	18c7883a 	add	r3,r3,r3
   2e0e8:	18c7883a 	add	r3,r3,r3
   2e0ec:	20c7883a 	add	r3,r4,r3
   2e0f0:	20c0192e 	bgeu	r4,r3,2e158 <__any_on+0x84>
   2e0f4:	18bfff17 	ldw	r2,-4(r3)
   2e0f8:	18ffff04 	addi	r3,r3,-4
   2e0fc:	1000041e 	bne	r2,zero,2e110 <__any_on+0x3c>
   2e100:	20c0142e 	bgeu	r4,r3,2e154 <__any_on+0x80>
   2e104:	18ffff04 	addi	r3,r3,-4
   2e108:	19400017 	ldw	r5,0(r3)
   2e10c:	283ffc26 	beq	r5,zero,2e100 <__alt_data_end+0xf402e100>
   2e110:	00800044 	movi	r2,1
   2e114:	f800283a 	ret
   2e118:	10c00a0e 	bge	r2,r3,2e144 <__any_on+0x70>
   2e11c:	1085883a 	add	r2,r2,r2
   2e120:	1085883a 	add	r2,r2,r2
   2e124:	294007cc 	andi	r5,r5,31
   2e128:	2087883a 	add	r3,r4,r2
   2e12c:	283ff026 	beq	r5,zero,2e0f0 <__alt_data_end+0xf402e0f0>
   2e130:	19800017 	ldw	r6,0(r3)
   2e134:	3144d83a 	srl	r2,r6,r5
   2e138:	114a983a 	sll	r5,r2,r5
   2e13c:	317ff41e 	bne	r6,r5,2e110 <__alt_data_end+0xf402e110>
   2e140:	003feb06 	br	2e0f0 <__alt_data_end+0xf402e0f0>
   2e144:	1085883a 	add	r2,r2,r2
   2e148:	1085883a 	add	r2,r2,r2
   2e14c:	2087883a 	add	r3,r4,r2
   2e150:	003fe706 	br	2e0f0 <__alt_data_end+0xf402e0f0>
   2e154:	f800283a 	ret
   2e158:	0005883a 	mov	r2,zero
   2e15c:	f800283a 	ret

0002e160 <_realloc_r>:
   2e160:	defff604 	addi	sp,sp,-40
   2e164:	dc800215 	stw	r18,8(sp)
   2e168:	dfc00915 	stw	ra,36(sp)
   2e16c:	df000815 	stw	fp,32(sp)
   2e170:	ddc00715 	stw	r23,28(sp)
   2e174:	dd800615 	stw	r22,24(sp)
   2e178:	dd400515 	stw	r21,20(sp)
   2e17c:	dd000415 	stw	r20,16(sp)
   2e180:	dcc00315 	stw	r19,12(sp)
   2e184:	dc400115 	stw	r17,4(sp)
   2e188:	dc000015 	stw	r16,0(sp)
   2e18c:	3025883a 	mov	r18,r6
   2e190:	2800b726 	beq	r5,zero,2e470 <_realloc_r+0x310>
   2e194:	282b883a 	mov	r21,r5
   2e198:	2029883a 	mov	r20,r4
   2e19c:	00319800 	call	31980 <__malloc_lock>
   2e1a0:	a8bfff17 	ldw	r2,-4(r21)
   2e1a4:	043fff04 	movi	r16,-4
   2e1a8:	90c002c4 	addi	r3,r18,11
   2e1ac:	01000584 	movi	r4,22
   2e1b0:	acfffe04 	addi	r19,r21,-8
   2e1b4:	1420703a 	and	r16,r2,r16
   2e1b8:	20c0332e 	bgeu	r4,r3,2e288 <_realloc_r+0x128>
   2e1bc:	047ffe04 	movi	r17,-8
   2e1c0:	1c62703a 	and	r17,r3,r17
   2e1c4:	8807883a 	mov	r3,r17
   2e1c8:	88005816 	blt	r17,zero,2e32c <_realloc_r+0x1cc>
   2e1cc:	8c805736 	bltu	r17,r18,2e32c <_realloc_r+0x1cc>
   2e1d0:	80c0300e 	bge	r16,r3,2e294 <_realloc_r+0x134>
   2e1d4:	070000f4 	movhi	fp,3
   2e1d8:	e718da04 	addi	fp,fp,25448
   2e1dc:	e1c00217 	ldw	r7,8(fp)
   2e1e0:	9c09883a 	add	r4,r19,r16
   2e1e4:	22000117 	ldw	r8,4(r4)
   2e1e8:	21c06326 	beq	r4,r7,2e378 <_realloc_r+0x218>
   2e1ec:	017fff84 	movi	r5,-2
   2e1f0:	414a703a 	and	r5,r8,r5
   2e1f4:	214b883a 	add	r5,r4,r5
   2e1f8:	29800117 	ldw	r6,4(r5)
   2e1fc:	3180004c 	andi	r6,r6,1
   2e200:	30003f26 	beq	r6,zero,2e300 <_realloc_r+0x1a0>
   2e204:	1080004c 	andi	r2,r2,1
   2e208:	10008326 	beq	r2,zero,2e418 <_realloc_r+0x2b8>
   2e20c:	900b883a 	mov	r5,r18
   2e210:	a009883a 	mov	r4,r20
   2e214:	002c4a80 	call	2c4a8 <_malloc_r>
   2e218:	1025883a 	mov	r18,r2
   2e21c:	10011e26 	beq	r2,zero,2e698 <_realloc_r+0x538>
   2e220:	a93fff17 	ldw	r4,-4(r21)
   2e224:	10fffe04 	addi	r3,r2,-8
   2e228:	00bfff84 	movi	r2,-2
   2e22c:	2084703a 	and	r2,r4,r2
   2e230:	9885883a 	add	r2,r19,r2
   2e234:	1880ee26 	beq	r3,r2,2e5f0 <_realloc_r+0x490>
   2e238:	81bfff04 	addi	r6,r16,-4
   2e23c:	00800904 	movi	r2,36
   2e240:	1180b836 	bltu	r2,r6,2e524 <_realloc_r+0x3c4>
   2e244:	00c004c4 	movi	r3,19
   2e248:	19809636 	bltu	r3,r6,2e4a4 <_realloc_r+0x344>
   2e24c:	9005883a 	mov	r2,r18
   2e250:	a807883a 	mov	r3,r21
   2e254:	19000017 	ldw	r4,0(r3)
   2e258:	11000015 	stw	r4,0(r2)
   2e25c:	19000117 	ldw	r4,4(r3)
   2e260:	11000115 	stw	r4,4(r2)
   2e264:	18c00217 	ldw	r3,8(r3)
   2e268:	10c00215 	stw	r3,8(r2)
   2e26c:	a80b883a 	mov	r5,r21
   2e270:	a009883a 	mov	r4,r20
   2e274:	002b8bc0 	call	2b8bc <_free_r>
   2e278:	a009883a 	mov	r4,r20
   2e27c:	00319a40 	call	319a4 <__malloc_unlock>
   2e280:	9005883a 	mov	r2,r18
   2e284:	00001206 	br	2e2d0 <_realloc_r+0x170>
   2e288:	00c00404 	movi	r3,16
   2e28c:	1823883a 	mov	r17,r3
   2e290:	003fce06 	br	2e1cc <__alt_data_end+0xf402e1cc>
   2e294:	a825883a 	mov	r18,r21
   2e298:	8445c83a 	sub	r2,r16,r17
   2e29c:	00c003c4 	movi	r3,15
   2e2a0:	18802636 	bltu	r3,r2,2e33c <_realloc_r+0x1dc>
   2e2a4:	99800117 	ldw	r6,4(r19)
   2e2a8:	9c07883a 	add	r3,r19,r16
   2e2ac:	3180004c 	andi	r6,r6,1
   2e2b0:	3420b03a 	or	r16,r6,r16
   2e2b4:	9c000115 	stw	r16,4(r19)
   2e2b8:	18800117 	ldw	r2,4(r3)
   2e2bc:	10800054 	ori	r2,r2,1
   2e2c0:	18800115 	stw	r2,4(r3)
   2e2c4:	a009883a 	mov	r4,r20
   2e2c8:	00319a40 	call	319a4 <__malloc_unlock>
   2e2cc:	9005883a 	mov	r2,r18
   2e2d0:	dfc00917 	ldw	ra,36(sp)
   2e2d4:	df000817 	ldw	fp,32(sp)
   2e2d8:	ddc00717 	ldw	r23,28(sp)
   2e2dc:	dd800617 	ldw	r22,24(sp)
   2e2e0:	dd400517 	ldw	r21,20(sp)
   2e2e4:	dd000417 	ldw	r20,16(sp)
   2e2e8:	dcc00317 	ldw	r19,12(sp)
   2e2ec:	dc800217 	ldw	r18,8(sp)
   2e2f0:	dc400117 	ldw	r17,4(sp)
   2e2f4:	dc000017 	ldw	r16,0(sp)
   2e2f8:	dec00a04 	addi	sp,sp,40
   2e2fc:	f800283a 	ret
   2e300:	017fff04 	movi	r5,-4
   2e304:	414a703a 	and	r5,r8,r5
   2e308:	814d883a 	add	r6,r16,r5
   2e30c:	30c01f16 	blt	r6,r3,2e38c <_realloc_r+0x22c>
   2e310:	20800317 	ldw	r2,12(r4)
   2e314:	20c00217 	ldw	r3,8(r4)
   2e318:	a825883a 	mov	r18,r21
   2e31c:	3021883a 	mov	r16,r6
   2e320:	18800315 	stw	r2,12(r3)
   2e324:	10c00215 	stw	r3,8(r2)
   2e328:	003fdb06 	br	2e298 <__alt_data_end+0xf402e298>
   2e32c:	00800304 	movi	r2,12
   2e330:	a0800015 	stw	r2,0(r20)
   2e334:	0005883a 	mov	r2,zero
   2e338:	003fe506 	br	2e2d0 <__alt_data_end+0xf402e2d0>
   2e33c:	98c00117 	ldw	r3,4(r19)
   2e340:	9c4b883a 	add	r5,r19,r17
   2e344:	11000054 	ori	r4,r2,1
   2e348:	18c0004c 	andi	r3,r3,1
   2e34c:	1c62b03a 	or	r17,r3,r17
   2e350:	9c400115 	stw	r17,4(r19)
   2e354:	29000115 	stw	r4,4(r5)
   2e358:	2885883a 	add	r2,r5,r2
   2e35c:	10c00117 	ldw	r3,4(r2)
   2e360:	29400204 	addi	r5,r5,8
   2e364:	a009883a 	mov	r4,r20
   2e368:	18c00054 	ori	r3,r3,1
   2e36c:	10c00115 	stw	r3,4(r2)
   2e370:	002b8bc0 	call	2b8bc <_free_r>
   2e374:	003fd306 	br	2e2c4 <__alt_data_end+0xf402e2c4>
   2e378:	017fff04 	movi	r5,-4
   2e37c:	414a703a 	and	r5,r8,r5
   2e380:	89800404 	addi	r6,r17,16
   2e384:	8151883a 	add	r8,r16,r5
   2e388:	4180590e 	bge	r8,r6,2e4f0 <_realloc_r+0x390>
   2e38c:	1080004c 	andi	r2,r2,1
   2e390:	103f9e1e 	bne	r2,zero,2e20c <__alt_data_end+0xf402e20c>
   2e394:	adbffe17 	ldw	r22,-8(r21)
   2e398:	00bfff04 	movi	r2,-4
   2e39c:	9dadc83a 	sub	r22,r19,r22
   2e3a0:	b1800117 	ldw	r6,4(r22)
   2e3a4:	3084703a 	and	r2,r6,r2
   2e3a8:	20002026 	beq	r4,zero,2e42c <_realloc_r+0x2cc>
   2e3ac:	80af883a 	add	r23,r16,r2
   2e3b0:	b96f883a 	add	r23,r23,r5
   2e3b4:	21c05f26 	beq	r4,r7,2e534 <_realloc_r+0x3d4>
   2e3b8:	b8c01c16 	blt	r23,r3,2e42c <_realloc_r+0x2cc>
   2e3bc:	20800317 	ldw	r2,12(r4)
   2e3c0:	20c00217 	ldw	r3,8(r4)
   2e3c4:	81bfff04 	addi	r6,r16,-4
   2e3c8:	01000904 	movi	r4,36
   2e3cc:	18800315 	stw	r2,12(r3)
   2e3d0:	10c00215 	stw	r3,8(r2)
   2e3d4:	b0c00217 	ldw	r3,8(r22)
   2e3d8:	b0800317 	ldw	r2,12(r22)
   2e3dc:	b4800204 	addi	r18,r22,8
   2e3e0:	18800315 	stw	r2,12(r3)
   2e3e4:	10c00215 	stw	r3,8(r2)
   2e3e8:	21801b36 	bltu	r4,r6,2e458 <_realloc_r+0x2f8>
   2e3ec:	008004c4 	movi	r2,19
   2e3f0:	1180352e 	bgeu	r2,r6,2e4c8 <_realloc_r+0x368>
   2e3f4:	a8800017 	ldw	r2,0(r21)
   2e3f8:	b0800215 	stw	r2,8(r22)
   2e3fc:	a8800117 	ldw	r2,4(r21)
   2e400:	b0800315 	stw	r2,12(r22)
   2e404:	008006c4 	movi	r2,27
   2e408:	11807f36 	bltu	r2,r6,2e608 <_realloc_r+0x4a8>
   2e40c:	b0800404 	addi	r2,r22,16
   2e410:	ad400204 	addi	r21,r21,8
   2e414:	00002d06 	br	2e4cc <_realloc_r+0x36c>
   2e418:	adbffe17 	ldw	r22,-8(r21)
   2e41c:	00bfff04 	movi	r2,-4
   2e420:	9dadc83a 	sub	r22,r19,r22
   2e424:	b1000117 	ldw	r4,4(r22)
   2e428:	2084703a 	and	r2,r4,r2
   2e42c:	b03f7726 	beq	r22,zero,2e20c <__alt_data_end+0xf402e20c>
   2e430:	80af883a 	add	r23,r16,r2
   2e434:	b8ff7516 	blt	r23,r3,2e20c <__alt_data_end+0xf402e20c>
   2e438:	b0800317 	ldw	r2,12(r22)
   2e43c:	b0c00217 	ldw	r3,8(r22)
   2e440:	81bfff04 	addi	r6,r16,-4
   2e444:	01000904 	movi	r4,36
   2e448:	18800315 	stw	r2,12(r3)
   2e44c:	10c00215 	stw	r3,8(r2)
   2e450:	b4800204 	addi	r18,r22,8
   2e454:	21bfe52e 	bgeu	r4,r6,2e3ec <__alt_data_end+0xf402e3ec>
   2e458:	a80b883a 	mov	r5,r21
   2e45c:	9009883a 	mov	r4,r18
   2e460:	002cee00 	call	2cee0 <memmove>
   2e464:	b821883a 	mov	r16,r23
   2e468:	b027883a 	mov	r19,r22
   2e46c:	003f8a06 	br	2e298 <__alt_data_end+0xf402e298>
   2e470:	300b883a 	mov	r5,r6
   2e474:	dfc00917 	ldw	ra,36(sp)
   2e478:	df000817 	ldw	fp,32(sp)
   2e47c:	ddc00717 	ldw	r23,28(sp)
   2e480:	dd800617 	ldw	r22,24(sp)
   2e484:	dd400517 	ldw	r21,20(sp)
   2e488:	dd000417 	ldw	r20,16(sp)
   2e48c:	dcc00317 	ldw	r19,12(sp)
   2e490:	dc800217 	ldw	r18,8(sp)
   2e494:	dc400117 	ldw	r17,4(sp)
   2e498:	dc000017 	ldw	r16,0(sp)
   2e49c:	dec00a04 	addi	sp,sp,40
   2e4a0:	002c4a81 	jmpi	2c4a8 <_malloc_r>
   2e4a4:	a8c00017 	ldw	r3,0(r21)
   2e4a8:	90c00015 	stw	r3,0(r18)
   2e4ac:	a8c00117 	ldw	r3,4(r21)
   2e4b0:	90c00115 	stw	r3,4(r18)
   2e4b4:	00c006c4 	movi	r3,27
   2e4b8:	19804536 	bltu	r3,r6,2e5d0 <_realloc_r+0x470>
   2e4bc:	90800204 	addi	r2,r18,8
   2e4c0:	a8c00204 	addi	r3,r21,8
   2e4c4:	003f6306 	br	2e254 <__alt_data_end+0xf402e254>
   2e4c8:	9005883a 	mov	r2,r18
   2e4cc:	a8c00017 	ldw	r3,0(r21)
   2e4d0:	b821883a 	mov	r16,r23
   2e4d4:	b027883a 	mov	r19,r22
   2e4d8:	10c00015 	stw	r3,0(r2)
   2e4dc:	a8c00117 	ldw	r3,4(r21)
   2e4e0:	10c00115 	stw	r3,4(r2)
   2e4e4:	a8c00217 	ldw	r3,8(r21)
   2e4e8:	10c00215 	stw	r3,8(r2)
   2e4ec:	003f6a06 	br	2e298 <__alt_data_end+0xf402e298>
   2e4f0:	9c67883a 	add	r19,r19,r17
   2e4f4:	4445c83a 	sub	r2,r8,r17
   2e4f8:	e4c00215 	stw	r19,8(fp)
   2e4fc:	10800054 	ori	r2,r2,1
   2e500:	98800115 	stw	r2,4(r19)
   2e504:	a8bfff17 	ldw	r2,-4(r21)
   2e508:	a009883a 	mov	r4,r20
   2e50c:	1080004c 	andi	r2,r2,1
   2e510:	1462b03a 	or	r17,r2,r17
   2e514:	ac7fff15 	stw	r17,-4(r21)
   2e518:	00319a40 	call	319a4 <__malloc_unlock>
   2e51c:	a805883a 	mov	r2,r21
   2e520:	003f6b06 	br	2e2d0 <__alt_data_end+0xf402e2d0>
   2e524:	a80b883a 	mov	r5,r21
   2e528:	9009883a 	mov	r4,r18
   2e52c:	002cee00 	call	2cee0 <memmove>
   2e530:	003f4e06 	br	2e26c <__alt_data_end+0xf402e26c>
   2e534:	89000404 	addi	r4,r17,16
   2e538:	b93fbc16 	blt	r23,r4,2e42c <__alt_data_end+0xf402e42c>
   2e53c:	b0800317 	ldw	r2,12(r22)
   2e540:	b0c00217 	ldw	r3,8(r22)
   2e544:	81bfff04 	addi	r6,r16,-4
   2e548:	01000904 	movi	r4,36
   2e54c:	18800315 	stw	r2,12(r3)
   2e550:	10c00215 	stw	r3,8(r2)
   2e554:	b4800204 	addi	r18,r22,8
   2e558:	21804336 	bltu	r4,r6,2e668 <_realloc_r+0x508>
   2e55c:	008004c4 	movi	r2,19
   2e560:	11803f2e 	bgeu	r2,r6,2e660 <_realloc_r+0x500>
   2e564:	a8800017 	ldw	r2,0(r21)
   2e568:	b0800215 	stw	r2,8(r22)
   2e56c:	a8800117 	ldw	r2,4(r21)
   2e570:	b0800315 	stw	r2,12(r22)
   2e574:	008006c4 	movi	r2,27
   2e578:	11803f36 	bltu	r2,r6,2e678 <_realloc_r+0x518>
   2e57c:	b0800404 	addi	r2,r22,16
   2e580:	ad400204 	addi	r21,r21,8
   2e584:	a8c00017 	ldw	r3,0(r21)
   2e588:	10c00015 	stw	r3,0(r2)
   2e58c:	a8c00117 	ldw	r3,4(r21)
   2e590:	10c00115 	stw	r3,4(r2)
   2e594:	a8c00217 	ldw	r3,8(r21)
   2e598:	10c00215 	stw	r3,8(r2)
   2e59c:	b447883a 	add	r3,r22,r17
   2e5a0:	bc45c83a 	sub	r2,r23,r17
   2e5a4:	e0c00215 	stw	r3,8(fp)
   2e5a8:	10800054 	ori	r2,r2,1
   2e5ac:	18800115 	stw	r2,4(r3)
   2e5b0:	b0800117 	ldw	r2,4(r22)
   2e5b4:	a009883a 	mov	r4,r20
   2e5b8:	1080004c 	andi	r2,r2,1
   2e5bc:	1462b03a 	or	r17,r2,r17
   2e5c0:	b4400115 	stw	r17,4(r22)
   2e5c4:	00319a40 	call	319a4 <__malloc_unlock>
   2e5c8:	9005883a 	mov	r2,r18
   2e5cc:	003f4006 	br	2e2d0 <__alt_data_end+0xf402e2d0>
   2e5d0:	a8c00217 	ldw	r3,8(r21)
   2e5d4:	90c00215 	stw	r3,8(r18)
   2e5d8:	a8c00317 	ldw	r3,12(r21)
   2e5dc:	90c00315 	stw	r3,12(r18)
   2e5e0:	30801126 	beq	r6,r2,2e628 <_realloc_r+0x4c8>
   2e5e4:	90800404 	addi	r2,r18,16
   2e5e8:	a8c00404 	addi	r3,r21,16
   2e5ec:	003f1906 	br	2e254 <__alt_data_end+0xf402e254>
   2e5f0:	90ffff17 	ldw	r3,-4(r18)
   2e5f4:	00bfff04 	movi	r2,-4
   2e5f8:	a825883a 	mov	r18,r21
   2e5fc:	1884703a 	and	r2,r3,r2
   2e600:	80a1883a 	add	r16,r16,r2
   2e604:	003f2406 	br	2e298 <__alt_data_end+0xf402e298>
   2e608:	a8800217 	ldw	r2,8(r21)
   2e60c:	b0800415 	stw	r2,16(r22)
   2e610:	a8800317 	ldw	r2,12(r21)
   2e614:	b0800515 	stw	r2,20(r22)
   2e618:	31000a26 	beq	r6,r4,2e644 <_realloc_r+0x4e4>
   2e61c:	b0800604 	addi	r2,r22,24
   2e620:	ad400404 	addi	r21,r21,16
   2e624:	003fa906 	br	2e4cc <__alt_data_end+0xf402e4cc>
   2e628:	a9000417 	ldw	r4,16(r21)
   2e62c:	90800604 	addi	r2,r18,24
   2e630:	a8c00604 	addi	r3,r21,24
   2e634:	91000415 	stw	r4,16(r18)
   2e638:	a9000517 	ldw	r4,20(r21)
   2e63c:	91000515 	stw	r4,20(r18)
   2e640:	003f0406 	br	2e254 <__alt_data_end+0xf402e254>
   2e644:	a8c00417 	ldw	r3,16(r21)
   2e648:	ad400604 	addi	r21,r21,24
   2e64c:	b0800804 	addi	r2,r22,32
   2e650:	b0c00615 	stw	r3,24(r22)
   2e654:	a8ffff17 	ldw	r3,-4(r21)
   2e658:	b0c00715 	stw	r3,28(r22)
   2e65c:	003f9b06 	br	2e4cc <__alt_data_end+0xf402e4cc>
   2e660:	9005883a 	mov	r2,r18
   2e664:	003fc706 	br	2e584 <__alt_data_end+0xf402e584>
   2e668:	a80b883a 	mov	r5,r21
   2e66c:	9009883a 	mov	r4,r18
   2e670:	002cee00 	call	2cee0 <memmove>
   2e674:	003fc906 	br	2e59c <__alt_data_end+0xf402e59c>
   2e678:	a8800217 	ldw	r2,8(r21)
   2e67c:	b0800415 	stw	r2,16(r22)
   2e680:	a8800317 	ldw	r2,12(r21)
   2e684:	b0800515 	stw	r2,20(r22)
   2e688:	31000726 	beq	r6,r4,2e6a8 <_realloc_r+0x548>
   2e68c:	b0800604 	addi	r2,r22,24
   2e690:	ad400404 	addi	r21,r21,16
   2e694:	003fbb06 	br	2e584 <__alt_data_end+0xf402e584>
   2e698:	a009883a 	mov	r4,r20
   2e69c:	00319a40 	call	319a4 <__malloc_unlock>
   2e6a0:	0005883a 	mov	r2,zero
   2e6a4:	003f0a06 	br	2e2d0 <__alt_data_end+0xf402e2d0>
   2e6a8:	a8c00417 	ldw	r3,16(r21)
   2e6ac:	ad400604 	addi	r21,r21,24
   2e6b0:	b0800804 	addi	r2,r22,32
   2e6b4:	b0c00615 	stw	r3,24(r22)
   2e6b8:	a8ffff17 	ldw	r3,-4(r21)
   2e6bc:	b0c00715 	stw	r3,28(r22)
   2e6c0:	003fb006 	br	2e584 <__alt_data_end+0xf402e584>

0002e6c4 <_sbrk_r>:
   2e6c4:	defffd04 	addi	sp,sp,-12
   2e6c8:	dc000015 	stw	r16,0(sp)
   2e6cc:	04000134 	movhi	r16,4
   2e6d0:	dc400115 	stw	r17,4(sp)
   2e6d4:	8425bc04 	addi	r16,r16,-26896
   2e6d8:	2023883a 	mov	r17,r4
   2e6dc:	2809883a 	mov	r4,r5
   2e6e0:	dfc00215 	stw	ra,8(sp)
   2e6e4:	80000015 	stw	zero,0(r16)
   2e6e8:	0031b640 	call	31b64 <sbrk>
   2e6ec:	00ffffc4 	movi	r3,-1
   2e6f0:	10c00526 	beq	r2,r3,2e708 <_sbrk_r+0x44>
   2e6f4:	dfc00217 	ldw	ra,8(sp)
   2e6f8:	dc400117 	ldw	r17,4(sp)
   2e6fc:	dc000017 	ldw	r16,0(sp)
   2e700:	dec00304 	addi	sp,sp,12
   2e704:	f800283a 	ret
   2e708:	80c00017 	ldw	r3,0(r16)
   2e70c:	183ff926 	beq	r3,zero,2e6f4 <__alt_data_end+0xf402e6f4>
   2e710:	88c00015 	stw	r3,0(r17)
   2e714:	003ff706 	br	2e6f4 <__alt_data_end+0xf402e6f4>

0002e718 <__sread>:
   2e718:	defffe04 	addi	sp,sp,-8
   2e71c:	dc000015 	stw	r16,0(sp)
   2e720:	2821883a 	mov	r16,r5
   2e724:	2940038f 	ldh	r5,14(r5)
   2e728:	dfc00115 	stw	ra,4(sp)
   2e72c:	003050c0 	call	3050c <_read_r>
   2e730:	10000716 	blt	r2,zero,2e750 <__sread+0x38>
   2e734:	80c01417 	ldw	r3,80(r16)
   2e738:	1887883a 	add	r3,r3,r2
   2e73c:	80c01415 	stw	r3,80(r16)
   2e740:	dfc00117 	ldw	ra,4(sp)
   2e744:	dc000017 	ldw	r16,0(sp)
   2e748:	dec00204 	addi	sp,sp,8
   2e74c:	f800283a 	ret
   2e750:	80c0030b 	ldhu	r3,12(r16)
   2e754:	18fbffcc 	andi	r3,r3,61439
   2e758:	80c0030d 	sth	r3,12(r16)
   2e75c:	dfc00117 	ldw	ra,4(sp)
   2e760:	dc000017 	ldw	r16,0(sp)
   2e764:	dec00204 	addi	sp,sp,8
   2e768:	f800283a 	ret

0002e76c <__seofread>:
   2e76c:	0005883a 	mov	r2,zero
   2e770:	f800283a 	ret

0002e774 <__swrite>:
   2e774:	2880030b 	ldhu	r2,12(r5)
   2e778:	defffb04 	addi	sp,sp,-20
   2e77c:	dcc00315 	stw	r19,12(sp)
   2e780:	dc800215 	stw	r18,8(sp)
   2e784:	dc400115 	stw	r17,4(sp)
   2e788:	dc000015 	stw	r16,0(sp)
   2e78c:	dfc00415 	stw	ra,16(sp)
   2e790:	10c0400c 	andi	r3,r2,256
   2e794:	2821883a 	mov	r16,r5
   2e798:	2023883a 	mov	r17,r4
   2e79c:	3025883a 	mov	r18,r6
   2e7a0:	3827883a 	mov	r19,r7
   2e7a4:	18000526 	beq	r3,zero,2e7bc <__swrite+0x48>
   2e7a8:	2940038f 	ldh	r5,14(r5)
   2e7ac:	01c00084 	movi	r7,2
   2e7b0:	000d883a 	mov	r6,zero
   2e7b4:	00304ac0 	call	304ac <_lseek_r>
   2e7b8:	8080030b 	ldhu	r2,12(r16)
   2e7bc:	8140038f 	ldh	r5,14(r16)
   2e7c0:	10bbffcc 	andi	r2,r2,61439
   2e7c4:	980f883a 	mov	r7,r19
   2e7c8:	900d883a 	mov	r6,r18
   2e7cc:	8809883a 	mov	r4,r17
   2e7d0:	8080030d 	sth	r2,12(r16)
   2e7d4:	dfc00417 	ldw	ra,16(sp)
   2e7d8:	dcc00317 	ldw	r19,12(sp)
   2e7dc:	dc800217 	ldw	r18,8(sp)
   2e7e0:	dc400117 	ldw	r17,4(sp)
   2e7e4:	dc000017 	ldw	r16,0(sp)
   2e7e8:	dec00504 	addi	sp,sp,20
   2e7ec:	002ff781 	jmpi	2ff78 <_write_r>

0002e7f0 <__sseek>:
   2e7f0:	defffe04 	addi	sp,sp,-8
   2e7f4:	dc000015 	stw	r16,0(sp)
   2e7f8:	2821883a 	mov	r16,r5
   2e7fc:	2940038f 	ldh	r5,14(r5)
   2e800:	dfc00115 	stw	ra,4(sp)
   2e804:	00304ac0 	call	304ac <_lseek_r>
   2e808:	00ffffc4 	movi	r3,-1
   2e80c:	10c00826 	beq	r2,r3,2e830 <__sseek+0x40>
   2e810:	80c0030b 	ldhu	r3,12(r16)
   2e814:	80801415 	stw	r2,80(r16)
   2e818:	18c40014 	ori	r3,r3,4096
   2e81c:	80c0030d 	sth	r3,12(r16)
   2e820:	dfc00117 	ldw	ra,4(sp)
   2e824:	dc000017 	ldw	r16,0(sp)
   2e828:	dec00204 	addi	sp,sp,8
   2e82c:	f800283a 	ret
   2e830:	80c0030b 	ldhu	r3,12(r16)
   2e834:	18fbffcc 	andi	r3,r3,61439
   2e838:	80c0030d 	sth	r3,12(r16)
   2e83c:	dfc00117 	ldw	ra,4(sp)
   2e840:	dc000017 	ldw	r16,0(sp)
   2e844:	dec00204 	addi	sp,sp,8
   2e848:	f800283a 	ret

0002e84c <__sclose>:
   2e84c:	2940038f 	ldh	r5,14(r5)
   2e850:	002ffd81 	jmpi	2ffd8 <_close_r>

0002e854 <strcmp>:
   2e854:	2144b03a 	or	r2,r4,r5
   2e858:	108000cc 	andi	r2,r2,3
   2e85c:	1000171e 	bne	r2,zero,2e8bc <strcmp+0x68>
   2e860:	20800017 	ldw	r2,0(r4)
   2e864:	28c00017 	ldw	r3,0(r5)
   2e868:	10c0141e 	bne	r2,r3,2e8bc <strcmp+0x68>
   2e86c:	027fbff4 	movhi	r9,65279
   2e870:	4a7fbfc4 	addi	r9,r9,-257
   2e874:	0086303a 	nor	r3,zero,r2
   2e878:	02202074 	movhi	r8,32897
   2e87c:	1245883a 	add	r2,r2,r9
   2e880:	42202004 	addi	r8,r8,-32640
   2e884:	10c4703a 	and	r2,r2,r3
   2e888:	1204703a 	and	r2,r2,r8
   2e88c:	10000226 	beq	r2,zero,2e898 <strcmp+0x44>
   2e890:	00002306 	br	2e920 <strcmp+0xcc>
   2e894:	1000221e 	bne	r2,zero,2e920 <strcmp+0xcc>
   2e898:	21000104 	addi	r4,r4,4
   2e89c:	20c00017 	ldw	r3,0(r4)
   2e8a0:	29400104 	addi	r5,r5,4
   2e8a4:	29800017 	ldw	r6,0(r5)
   2e8a8:	1a4f883a 	add	r7,r3,r9
   2e8ac:	00c4303a 	nor	r2,zero,r3
   2e8b0:	3884703a 	and	r2,r7,r2
   2e8b4:	1204703a 	and	r2,r2,r8
   2e8b8:	19bff626 	beq	r3,r6,2e894 <__alt_data_end+0xf402e894>
   2e8bc:	20800003 	ldbu	r2,0(r4)
   2e8c0:	10c03fcc 	andi	r3,r2,255
   2e8c4:	18c0201c 	xori	r3,r3,128
   2e8c8:	18ffe004 	addi	r3,r3,-128
   2e8cc:	18000c26 	beq	r3,zero,2e900 <strcmp+0xac>
   2e8d0:	29800007 	ldb	r6,0(r5)
   2e8d4:	19800326 	beq	r3,r6,2e8e4 <strcmp+0x90>
   2e8d8:	00001306 	br	2e928 <strcmp+0xd4>
   2e8dc:	29800007 	ldb	r6,0(r5)
   2e8e0:	11800b1e 	bne	r2,r6,2e910 <strcmp+0xbc>
   2e8e4:	21000044 	addi	r4,r4,1
   2e8e8:	20c00003 	ldbu	r3,0(r4)
   2e8ec:	29400044 	addi	r5,r5,1
   2e8f0:	18803fcc 	andi	r2,r3,255
   2e8f4:	1080201c 	xori	r2,r2,128
   2e8f8:	10bfe004 	addi	r2,r2,-128
   2e8fc:	103ff71e 	bne	r2,zero,2e8dc <__alt_data_end+0xf402e8dc>
   2e900:	0007883a 	mov	r3,zero
   2e904:	28800003 	ldbu	r2,0(r5)
   2e908:	1885c83a 	sub	r2,r3,r2
   2e90c:	f800283a 	ret
   2e910:	28800003 	ldbu	r2,0(r5)
   2e914:	18c03fcc 	andi	r3,r3,255
   2e918:	1885c83a 	sub	r2,r3,r2
   2e91c:	f800283a 	ret
   2e920:	0005883a 	mov	r2,zero
   2e924:	f800283a 	ret
   2e928:	10c03fcc 	andi	r3,r2,255
   2e92c:	003ff506 	br	2e904 <__alt_data_end+0xf402e904>

0002e930 <__sprint_r.part.0>:
   2e930:	28801917 	ldw	r2,100(r5)
   2e934:	defff604 	addi	sp,sp,-40
   2e938:	dd400515 	stw	r21,20(sp)
   2e93c:	dfc00915 	stw	ra,36(sp)
   2e940:	df000815 	stw	fp,32(sp)
   2e944:	ddc00715 	stw	r23,28(sp)
   2e948:	dd800615 	stw	r22,24(sp)
   2e94c:	dd000415 	stw	r20,16(sp)
   2e950:	dcc00315 	stw	r19,12(sp)
   2e954:	dc800215 	stw	r18,8(sp)
   2e958:	dc400115 	stw	r17,4(sp)
   2e95c:	dc000015 	stw	r16,0(sp)
   2e960:	1088000c 	andi	r2,r2,8192
   2e964:	302b883a 	mov	r21,r6
   2e968:	10002e26 	beq	r2,zero,2ea24 <__sprint_r.part.0+0xf4>
   2e96c:	30800217 	ldw	r2,8(r6)
   2e970:	35800017 	ldw	r22,0(r6)
   2e974:	10002926 	beq	r2,zero,2ea1c <__sprint_r.part.0+0xec>
   2e978:	2827883a 	mov	r19,r5
   2e97c:	2029883a 	mov	r20,r4
   2e980:	b5c00104 	addi	r23,r22,4
   2e984:	04bfffc4 	movi	r18,-1
   2e988:	bc400017 	ldw	r17,0(r23)
   2e98c:	b4000017 	ldw	r16,0(r22)
   2e990:	0039883a 	mov	fp,zero
   2e994:	8822d0ba 	srli	r17,r17,2
   2e998:	8800031e 	bne	r17,zero,2e9a8 <__sprint_r.part.0+0x78>
   2e99c:	00001806 	br	2ea00 <__sprint_r.part.0+0xd0>
   2e9a0:	84000104 	addi	r16,r16,4
   2e9a4:	8f001526 	beq	r17,fp,2e9fc <__sprint_r.part.0+0xcc>
   2e9a8:	81400017 	ldw	r5,0(r16)
   2e9ac:	980d883a 	mov	r6,r19
   2e9b0:	a009883a 	mov	r4,r20
   2e9b4:	00303580 	call	30358 <_fputwc_r>
   2e9b8:	e7000044 	addi	fp,fp,1
   2e9bc:	14bff81e 	bne	r2,r18,2e9a0 <__alt_data_end+0xf402e9a0>
   2e9c0:	9005883a 	mov	r2,r18
   2e9c4:	a8000215 	stw	zero,8(r21)
   2e9c8:	a8000115 	stw	zero,4(r21)
   2e9cc:	dfc00917 	ldw	ra,36(sp)
   2e9d0:	df000817 	ldw	fp,32(sp)
   2e9d4:	ddc00717 	ldw	r23,28(sp)
   2e9d8:	dd800617 	ldw	r22,24(sp)
   2e9dc:	dd400517 	ldw	r21,20(sp)
   2e9e0:	dd000417 	ldw	r20,16(sp)
   2e9e4:	dcc00317 	ldw	r19,12(sp)
   2e9e8:	dc800217 	ldw	r18,8(sp)
   2e9ec:	dc400117 	ldw	r17,4(sp)
   2e9f0:	dc000017 	ldw	r16,0(sp)
   2e9f4:	dec00a04 	addi	sp,sp,40
   2e9f8:	f800283a 	ret
   2e9fc:	a8800217 	ldw	r2,8(r21)
   2ea00:	8c63883a 	add	r17,r17,r17
   2ea04:	8c63883a 	add	r17,r17,r17
   2ea08:	1445c83a 	sub	r2,r2,r17
   2ea0c:	a8800215 	stw	r2,8(r21)
   2ea10:	b5800204 	addi	r22,r22,8
   2ea14:	bdc00204 	addi	r23,r23,8
   2ea18:	103fdb1e 	bne	r2,zero,2e988 <__alt_data_end+0xf402e988>
   2ea1c:	0005883a 	mov	r2,zero
   2ea20:	003fe806 	br	2e9c4 <__alt_data_end+0xf402e9c4>
   2ea24:	002bbcc0 	call	2bbcc <__sfvwrite_r>
   2ea28:	003fe606 	br	2e9c4 <__alt_data_end+0xf402e9c4>

0002ea2c <__sprint_r>:
   2ea2c:	30c00217 	ldw	r3,8(r6)
   2ea30:	18000126 	beq	r3,zero,2ea38 <__sprint_r+0xc>
   2ea34:	002e9301 	jmpi	2e930 <__sprint_r.part.0>
   2ea38:	30000115 	stw	zero,4(r6)
   2ea3c:	0005883a 	mov	r2,zero
   2ea40:	f800283a 	ret

0002ea44 <___vfiprintf_internal_r>:
   2ea44:	deffc904 	addi	sp,sp,-220
   2ea48:	df003515 	stw	fp,212(sp)
   2ea4c:	dd003115 	stw	r20,196(sp)
   2ea50:	dfc03615 	stw	ra,216(sp)
   2ea54:	ddc03415 	stw	r23,208(sp)
   2ea58:	dd803315 	stw	r22,204(sp)
   2ea5c:	dd403215 	stw	r21,200(sp)
   2ea60:	dcc03015 	stw	r19,192(sp)
   2ea64:	dc802f15 	stw	r18,188(sp)
   2ea68:	dc402e15 	stw	r17,184(sp)
   2ea6c:	dc002d15 	stw	r16,180(sp)
   2ea70:	d9002015 	stw	r4,128(sp)
   2ea74:	d9c02215 	stw	r7,136(sp)
   2ea78:	2829883a 	mov	r20,r5
   2ea7c:	3039883a 	mov	fp,r6
   2ea80:	20000226 	beq	r4,zero,2ea8c <___vfiprintf_internal_r+0x48>
   2ea84:	20800e17 	ldw	r2,56(r4)
   2ea88:	1000cf26 	beq	r2,zero,2edc8 <___vfiprintf_internal_r+0x384>
   2ea8c:	a080030b 	ldhu	r2,12(r20)
   2ea90:	10c8000c 	andi	r3,r2,8192
   2ea94:	1800061e 	bne	r3,zero,2eab0 <___vfiprintf_internal_r+0x6c>
   2ea98:	a1001917 	ldw	r4,100(r20)
   2ea9c:	00f7ffc4 	movi	r3,-8193
   2eaa0:	10880014 	ori	r2,r2,8192
   2eaa4:	20c6703a 	and	r3,r4,r3
   2eaa8:	a080030d 	sth	r2,12(r20)
   2eaac:	a0c01915 	stw	r3,100(r20)
   2eab0:	10c0020c 	andi	r3,r2,8
   2eab4:	1800a926 	beq	r3,zero,2ed5c <___vfiprintf_internal_r+0x318>
   2eab8:	a0c00417 	ldw	r3,16(r20)
   2eabc:	1800a726 	beq	r3,zero,2ed5c <___vfiprintf_internal_r+0x318>
   2eac0:	1080068c 	andi	r2,r2,26
   2eac4:	00c00284 	movi	r3,10
   2eac8:	10c0ac26 	beq	r2,r3,2ed7c <___vfiprintf_internal_r+0x338>
   2eacc:	da801a04 	addi	r10,sp,104
   2ead0:	da801e15 	stw	r10,120(sp)
   2ead4:	d8801e17 	ldw	r2,120(sp)
   2ead8:	da8019c4 	addi	r10,sp,103
   2eadc:	058000f4 	movhi	r22,3
   2eae0:	05c000f4 	movhi	r23,3
   2eae4:	da801f15 	stw	r10,124(sp)
   2eae8:	1295c83a 	sub	r10,r2,r10
   2eaec:	b5978304 	addi	r22,r22,24076
   2eaf0:	bdd77f04 	addi	r23,r23,24060
   2eaf4:	dec01a15 	stw	sp,104(sp)
   2eaf8:	d8001c15 	stw	zero,112(sp)
   2eafc:	d8001b15 	stw	zero,108(sp)
   2eb00:	d8002615 	stw	zero,152(sp)
   2eb04:	d8002315 	stw	zero,140(sp)
   2eb08:	da802715 	stw	r10,156(sp)
   2eb0c:	d811883a 	mov	r8,sp
   2eb10:	dd002115 	stw	r20,132(sp)
   2eb14:	e021883a 	mov	r16,fp
   2eb18:	80800007 	ldb	r2,0(r16)
   2eb1c:	1003ea26 	beq	r2,zero,2fac8 <___vfiprintf_internal_r+0x1084>
   2eb20:	00c00944 	movi	r3,37
   2eb24:	8025883a 	mov	r18,r16
   2eb28:	10c0021e 	bne	r2,r3,2eb34 <___vfiprintf_internal_r+0xf0>
   2eb2c:	00001606 	br	2eb88 <___vfiprintf_internal_r+0x144>
   2eb30:	10c00326 	beq	r2,r3,2eb40 <___vfiprintf_internal_r+0xfc>
   2eb34:	94800044 	addi	r18,r18,1
   2eb38:	90800007 	ldb	r2,0(r18)
   2eb3c:	103ffc1e 	bne	r2,zero,2eb30 <__alt_data_end+0xf402eb30>
   2eb40:	9423c83a 	sub	r17,r18,r16
   2eb44:	88001026 	beq	r17,zero,2eb88 <___vfiprintf_internal_r+0x144>
   2eb48:	d8c01c17 	ldw	r3,112(sp)
   2eb4c:	d8801b17 	ldw	r2,108(sp)
   2eb50:	44000015 	stw	r16,0(r8)
   2eb54:	88c7883a 	add	r3,r17,r3
   2eb58:	10800044 	addi	r2,r2,1
   2eb5c:	44400115 	stw	r17,4(r8)
   2eb60:	d8c01c15 	stw	r3,112(sp)
   2eb64:	d8801b15 	stw	r2,108(sp)
   2eb68:	010001c4 	movi	r4,7
   2eb6c:	2080760e 	bge	r4,r2,2ed48 <___vfiprintf_internal_r+0x304>
   2eb70:	1803821e 	bne	r3,zero,2f97c <___vfiprintf_internal_r+0xf38>
   2eb74:	da802317 	ldw	r10,140(sp)
   2eb78:	d8001b15 	stw	zero,108(sp)
   2eb7c:	d811883a 	mov	r8,sp
   2eb80:	5455883a 	add	r10,r10,r17
   2eb84:	da802315 	stw	r10,140(sp)
   2eb88:	90800007 	ldb	r2,0(r18)
   2eb8c:	10044626 	beq	r2,zero,2fca8 <___vfiprintf_internal_r+0x1264>
   2eb90:	90c00047 	ldb	r3,1(r18)
   2eb94:	94000044 	addi	r16,r18,1
   2eb98:	d8001d85 	stb	zero,118(sp)
   2eb9c:	0009883a 	mov	r4,zero
   2eba0:	000f883a 	mov	r7,zero
   2eba4:	027fffc4 	movi	r9,-1
   2eba8:	0023883a 	mov	r17,zero
   2ebac:	0029883a 	mov	r20,zero
   2ebb0:	01401604 	movi	r5,88
   2ebb4:	01800244 	movi	r6,9
   2ebb8:	03400a84 	movi	r13,42
   2ebbc:	03001b04 	movi	r12,108
   2ebc0:	84000044 	addi	r16,r16,1
   2ebc4:	18bff804 	addi	r2,r3,-32
   2ebc8:	28827336 	bltu	r5,r2,2f598 <___vfiprintf_internal_r+0xb54>
   2ebcc:	100490ba 	slli	r2,r2,2
   2ebd0:	028000f4 	movhi	r10,3
   2ebd4:	52baf904 	addi	r10,r10,-5148
   2ebd8:	1285883a 	add	r2,r2,r10
   2ebdc:	10800017 	ldw	r2,0(r2)
   2ebe0:	1000683a 	jmp	r2
   2ebe4:	0002f2cc 	andi	zero,zero,3019
   2ebe8:	0002f598 	cmpnei	zero,zero,3030
   2ebec:	0002f598 	cmpnei	zero,zero,3030
   2ebf0:	0002f2ec 	andhi	zero,zero,3019
   2ebf4:	0002f598 	cmpnei	zero,zero,3030
   2ebf8:	0002f598 	cmpnei	zero,zero,3030
   2ebfc:	0002f598 	cmpnei	zero,zero,3030
   2ec00:	0002f598 	cmpnei	zero,zero,3030
   2ec04:	0002f598 	cmpnei	zero,zero,3030
   2ec08:	0002f598 	cmpnei	zero,zero,3030
   2ec0c:	0002f4d4 	movui	zero,3027
   2ec10:	0002f4f0 	cmpltui	zero,zero,3027
   2ec14:	0002f598 	cmpnei	zero,zero,3030
   2ec18:	0002edd8 	cmpnei	zero,zero,2999
   2ec1c:	0002f500 	call	2f50 <__alt_mem_onchip_memory-0x1d0b0>
   2ec20:	0002f598 	cmpnei	zero,zero,3030
   2ec24:	0002f2f8 	rdprs	zero,zero,3019
   2ec28:	0002f304 	movi	zero,3020
   2ec2c:	0002f304 	movi	zero,3020
   2ec30:	0002f304 	movi	zero,3020
   2ec34:	0002f304 	movi	zero,3020
   2ec38:	0002f304 	movi	zero,3020
   2ec3c:	0002f304 	movi	zero,3020
   2ec40:	0002f304 	movi	zero,3020
   2ec44:	0002f304 	movi	zero,3020
   2ec48:	0002f304 	movi	zero,3020
   2ec4c:	0002f598 	cmpnei	zero,zero,3030
   2ec50:	0002f598 	cmpnei	zero,zero,3030
   2ec54:	0002f598 	cmpnei	zero,zero,3030
   2ec58:	0002f598 	cmpnei	zero,zero,3030
   2ec5c:	0002f598 	cmpnei	zero,zero,3030
   2ec60:	0002f598 	cmpnei	zero,zero,3030
   2ec64:	0002f598 	cmpnei	zero,zero,3030
   2ec68:	0002f598 	cmpnei	zero,zero,3030
   2ec6c:	0002f598 	cmpnei	zero,zero,3030
   2ec70:	0002f598 	cmpnei	zero,zero,3030
   2ec74:	0002f330 	cmpltui	zero,zero,3020
   2ec78:	0002f598 	cmpnei	zero,zero,3030
   2ec7c:	0002f598 	cmpnei	zero,zero,3030
   2ec80:	0002f598 	cmpnei	zero,zero,3030
   2ec84:	0002f598 	cmpnei	zero,zero,3030
   2ec88:	0002f598 	cmpnei	zero,zero,3030
   2ec8c:	0002f598 	cmpnei	zero,zero,3030
   2ec90:	0002f598 	cmpnei	zero,zero,3030
   2ec94:	0002f598 	cmpnei	zero,zero,3030
   2ec98:	0002f598 	cmpnei	zero,zero,3030
   2ec9c:	0002f598 	cmpnei	zero,zero,3030
   2eca0:	0002f368 	cmpgeui	zero,zero,3021
   2eca4:	0002f598 	cmpnei	zero,zero,3030
   2eca8:	0002f598 	cmpnei	zero,zero,3030
   2ecac:	0002f598 	cmpnei	zero,zero,3030
   2ecb0:	0002f598 	cmpnei	zero,zero,3030
   2ecb4:	0002f598 	cmpnei	zero,zero,3030
   2ecb8:	0002f3c0 	call	2f3c <__alt_mem_onchip_memory-0x1d0c4>
   2ecbc:	0002f598 	cmpnei	zero,zero,3030
   2ecc0:	0002f598 	cmpnei	zero,zero,3030
   2ecc4:	0002f430 	cmpltui	zero,zero,3024
   2ecc8:	0002f598 	cmpnei	zero,zero,3030
   2eccc:	0002f598 	cmpnei	zero,zero,3030
   2ecd0:	0002f598 	cmpnei	zero,zero,3030
   2ecd4:	0002f598 	cmpnei	zero,zero,3030
   2ecd8:	0002f598 	cmpnei	zero,zero,3030
   2ecdc:	0002f598 	cmpnei	zero,zero,3030
   2ece0:	0002f598 	cmpnei	zero,zero,3030
   2ece4:	0002f598 	cmpnei	zero,zero,3030
   2ece8:	0002f598 	cmpnei	zero,zero,3030
   2ecec:	0002f598 	cmpnei	zero,zero,3030
   2ecf0:	0002f1dc 	xori	zero,zero,3015
   2ecf4:	0002f208 	cmpgei	zero,zero,3016
   2ecf8:	0002f598 	cmpnei	zero,zero,3030
   2ecfc:	0002f598 	cmpnei	zero,zero,3030
   2ed00:	0002f598 	cmpnei	zero,zero,3030
   2ed04:	0002f540 	call	2f54 <__alt_mem_onchip_memory-0x1d0ac>
   2ed08:	0002f208 	cmpgei	zero,zero,3016
   2ed0c:	0002f598 	cmpnei	zero,zero,3030
   2ed10:	0002f598 	cmpnei	zero,zero,3030
   2ed14:	0002f09c 	xori	zero,zero,3010
   2ed18:	0002f598 	cmpnei	zero,zero,3030
   2ed1c:	0002f0ac 	andhi	zero,zero,3010
   2ed20:	0002f0e8 	cmpgeui	zero,zero,3011
   2ed24:	0002ede4 	muli	zero,zero,2999
   2ed28:	0002f090 	cmplti	zero,zero,3010
   2ed2c:	0002f598 	cmpnei	zero,zero,3030
   2ed30:	0002f46c 	andhi	zero,zero,3025
   2ed34:	0002f598 	cmpnei	zero,zero,3030
   2ed38:	0002f4c4 	movi	zero,3027
   2ed3c:	0002f598 	cmpnei	zero,zero,3030
   2ed40:	0002f598 	cmpnei	zero,zero,3030
   2ed44:	0002f188 	cmpgei	zero,zero,3014
   2ed48:	42000204 	addi	r8,r8,8
   2ed4c:	da802317 	ldw	r10,140(sp)
   2ed50:	5455883a 	add	r10,r10,r17
   2ed54:	da802315 	stw	r10,140(sp)
   2ed58:	003f8b06 	br	2eb88 <__alt_data_end+0xf402eb88>
   2ed5c:	d9002017 	ldw	r4,128(sp)
   2ed60:	a00b883a 	mov	r5,r20
   2ed64:	00297740 	call	29774 <__swsetup_r>
   2ed68:	1003b11e 	bne	r2,zero,2fc30 <___vfiprintf_internal_r+0x11ec>
   2ed6c:	a080030b 	ldhu	r2,12(r20)
   2ed70:	00c00284 	movi	r3,10
   2ed74:	1080068c 	andi	r2,r2,26
   2ed78:	10ff541e 	bne	r2,r3,2eacc <__alt_data_end+0xf402eacc>
   2ed7c:	a080038f 	ldh	r2,14(r20)
   2ed80:	103f5216 	blt	r2,zero,2eacc <__alt_data_end+0xf402eacc>
   2ed84:	d9c02217 	ldw	r7,136(sp)
   2ed88:	d9002017 	ldw	r4,128(sp)
   2ed8c:	e00d883a 	mov	r6,fp
   2ed90:	a00b883a 	mov	r5,r20
   2ed94:	002febc0 	call	2febc <__sbprintf>
   2ed98:	dfc03617 	ldw	ra,216(sp)
   2ed9c:	df003517 	ldw	fp,212(sp)
   2eda0:	ddc03417 	ldw	r23,208(sp)
   2eda4:	dd803317 	ldw	r22,204(sp)
   2eda8:	dd403217 	ldw	r21,200(sp)
   2edac:	dd003117 	ldw	r20,196(sp)
   2edb0:	dcc03017 	ldw	r19,192(sp)
   2edb4:	dc802f17 	ldw	r18,188(sp)
   2edb8:	dc402e17 	ldw	r17,184(sp)
   2edbc:	dc002d17 	ldw	r16,180(sp)
   2edc0:	dec03704 	addi	sp,sp,220
   2edc4:	f800283a 	ret
   2edc8:	002b7480 	call	2b748 <__sinit>
   2edcc:	003f2f06 	br	2ea8c <__alt_data_end+0xf402ea8c>
   2edd0:	0463c83a 	sub	r17,zero,r17
   2edd4:	d8802215 	stw	r2,136(sp)
   2edd8:	a5000114 	ori	r20,r20,4
   2eddc:	80c00007 	ldb	r3,0(r16)
   2ede0:	003f7706 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2ede4:	00800c04 	movi	r2,48
   2ede8:	da802217 	ldw	r10,136(sp)
   2edec:	d8801d05 	stb	r2,116(sp)
   2edf0:	00801e04 	movi	r2,120
   2edf4:	d8801d45 	stb	r2,117(sp)
   2edf8:	d8001d85 	stb	zero,118(sp)
   2edfc:	50c00104 	addi	r3,r10,4
   2ee00:	54800017 	ldw	r18,0(r10)
   2ee04:	0027883a 	mov	r19,zero
   2ee08:	a0800094 	ori	r2,r20,2
   2ee0c:	48030b16 	blt	r9,zero,2fa3c <___vfiprintf_internal_r+0xff8>
   2ee10:	00bfdfc4 	movi	r2,-129
   2ee14:	a096703a 	and	r11,r20,r2
   2ee18:	d8c02215 	stw	r3,136(sp)
   2ee1c:	5d000094 	ori	r20,r11,2
   2ee20:	90032b1e 	bne	r18,zero,2fad0 <___vfiprintf_internal_r+0x108c>
   2ee24:	008000f4 	movhi	r2,3
   2ee28:	10971f04 	addi	r2,r2,23676
   2ee2c:	d8802615 	stw	r2,152(sp)
   2ee30:	0039883a 	mov	fp,zero
   2ee34:	48017b1e 	bne	r9,zero,2f424 <___vfiprintf_internal_r+0x9e0>
   2ee38:	0013883a 	mov	r9,zero
   2ee3c:	0027883a 	mov	r19,zero
   2ee40:	dd401a04 	addi	r21,sp,104
   2ee44:	4825883a 	mov	r18,r9
   2ee48:	4cc0010e 	bge	r9,r19,2ee50 <___vfiprintf_internal_r+0x40c>
   2ee4c:	9825883a 	mov	r18,r19
   2ee50:	e7003fcc 	andi	fp,fp,255
   2ee54:	e700201c 	xori	fp,fp,128
   2ee58:	e73fe004 	addi	fp,fp,-128
   2ee5c:	e0000126 	beq	fp,zero,2ee64 <___vfiprintf_internal_r+0x420>
   2ee60:	94800044 	addi	r18,r18,1
   2ee64:	a380008c 	andi	r14,r20,2
   2ee68:	70000126 	beq	r14,zero,2ee70 <___vfiprintf_internal_r+0x42c>
   2ee6c:	94800084 	addi	r18,r18,2
   2ee70:	a700210c 	andi	fp,r20,132
   2ee74:	e001df1e 	bne	fp,zero,2f5f4 <___vfiprintf_internal_r+0xbb0>
   2ee78:	8c87c83a 	sub	r3,r17,r18
   2ee7c:	00c1dd0e 	bge	zero,r3,2f5f4 <___vfiprintf_internal_r+0xbb0>
   2ee80:	01c00404 	movi	r7,16
   2ee84:	d8801c17 	ldw	r2,112(sp)
   2ee88:	38c3ad0e 	bge	r7,r3,2fd40 <___vfiprintf_internal_r+0x12fc>
   2ee8c:	028000f4 	movhi	r10,3
   2ee90:	52978304 	addi	r10,r10,24076
   2ee94:	dc002915 	stw	r16,164(sp)
   2ee98:	d9801b17 	ldw	r6,108(sp)
   2ee9c:	da802415 	stw	r10,144(sp)
   2eea0:	03c001c4 	movi	r15,7
   2eea4:	da402515 	stw	r9,148(sp)
   2eea8:	db802815 	stw	r14,160(sp)
   2eeac:	1821883a 	mov	r16,r3
   2eeb0:	00000506 	br	2eec8 <___vfiprintf_internal_r+0x484>
   2eeb4:	31400084 	addi	r5,r6,2
   2eeb8:	42000204 	addi	r8,r8,8
   2eebc:	200d883a 	mov	r6,r4
   2eec0:	843ffc04 	addi	r16,r16,-16
   2eec4:	3c000d0e 	bge	r7,r16,2eefc <___vfiprintf_internal_r+0x4b8>
   2eec8:	10800404 	addi	r2,r2,16
   2eecc:	31000044 	addi	r4,r6,1
   2eed0:	45800015 	stw	r22,0(r8)
   2eed4:	41c00115 	stw	r7,4(r8)
   2eed8:	d8801c15 	stw	r2,112(sp)
   2eedc:	d9001b15 	stw	r4,108(sp)
   2eee0:	793ff40e 	bge	r15,r4,2eeb4 <__alt_data_end+0xf402eeb4>
   2eee4:	1001b51e 	bne	r2,zero,2f5bc <___vfiprintf_internal_r+0xb78>
   2eee8:	843ffc04 	addi	r16,r16,-16
   2eeec:	000d883a 	mov	r6,zero
   2eef0:	01400044 	movi	r5,1
   2eef4:	d811883a 	mov	r8,sp
   2eef8:	3c3ff316 	blt	r7,r16,2eec8 <__alt_data_end+0xf402eec8>
   2eefc:	8007883a 	mov	r3,r16
   2ef00:	da402517 	ldw	r9,148(sp)
   2ef04:	db802817 	ldw	r14,160(sp)
   2ef08:	dc002917 	ldw	r16,164(sp)
   2ef0c:	da802417 	ldw	r10,144(sp)
   2ef10:	1885883a 	add	r2,r3,r2
   2ef14:	40c00115 	stw	r3,4(r8)
   2ef18:	42800015 	stw	r10,0(r8)
   2ef1c:	d8801c15 	stw	r2,112(sp)
   2ef20:	d9401b15 	stw	r5,108(sp)
   2ef24:	00c001c4 	movi	r3,7
   2ef28:	19426016 	blt	r3,r5,2f8ac <___vfiprintf_internal_r+0xe68>
   2ef2c:	d8c01d87 	ldb	r3,118(sp)
   2ef30:	42000204 	addi	r8,r8,8
   2ef34:	29000044 	addi	r4,r5,1
   2ef38:	1801b31e 	bne	r3,zero,2f608 <___vfiprintf_internal_r+0xbc4>
   2ef3c:	7001c026 	beq	r14,zero,2f640 <___vfiprintf_internal_r+0xbfc>
   2ef40:	d8c01d04 	addi	r3,sp,116
   2ef44:	10800084 	addi	r2,r2,2
   2ef48:	40c00015 	stw	r3,0(r8)
   2ef4c:	00c00084 	movi	r3,2
   2ef50:	40c00115 	stw	r3,4(r8)
   2ef54:	d8801c15 	stw	r2,112(sp)
   2ef58:	d9001b15 	stw	r4,108(sp)
   2ef5c:	00c001c4 	movi	r3,7
   2ef60:	1902650e 	bge	r3,r4,2f8f8 <___vfiprintf_internal_r+0xeb4>
   2ef64:	10029a1e 	bne	r2,zero,2f9d0 <___vfiprintf_internal_r+0xf8c>
   2ef68:	00c02004 	movi	r3,128
   2ef6c:	01000044 	movi	r4,1
   2ef70:	000b883a 	mov	r5,zero
   2ef74:	d811883a 	mov	r8,sp
   2ef78:	e0c1b31e 	bne	fp,r3,2f648 <___vfiprintf_internal_r+0xc04>
   2ef7c:	8cb9c83a 	sub	fp,r17,r18
   2ef80:	0701b10e 	bge	zero,fp,2f648 <___vfiprintf_internal_r+0xc04>
   2ef84:	01c00404 	movi	r7,16
   2ef88:	3f03890e 	bge	r7,fp,2fdb0 <___vfiprintf_internal_r+0x136c>
   2ef8c:	00c000f4 	movhi	r3,3
   2ef90:	18d77f04 	addi	r3,r3,24060
   2ef94:	d8c02415 	stw	r3,144(sp)
   2ef98:	8007883a 	mov	r3,r16
   2ef9c:	034001c4 	movi	r13,7
   2efa0:	e021883a 	mov	r16,fp
   2efa4:	da402515 	stw	r9,148(sp)
   2efa8:	1839883a 	mov	fp,r3
   2efac:	00000506 	br	2efc4 <___vfiprintf_internal_r+0x580>
   2efb0:	29800084 	addi	r6,r5,2
   2efb4:	42000204 	addi	r8,r8,8
   2efb8:	180b883a 	mov	r5,r3
   2efbc:	843ffc04 	addi	r16,r16,-16
   2efc0:	3c000d0e 	bge	r7,r16,2eff8 <___vfiprintf_internal_r+0x5b4>
   2efc4:	10800404 	addi	r2,r2,16
   2efc8:	28c00044 	addi	r3,r5,1
   2efcc:	45c00015 	stw	r23,0(r8)
   2efd0:	41c00115 	stw	r7,4(r8)
   2efd4:	d8801c15 	stw	r2,112(sp)
   2efd8:	d8c01b15 	stw	r3,108(sp)
   2efdc:	68fff40e 	bge	r13,r3,2efb0 <__alt_data_end+0xf402efb0>
   2efe0:	1002241e 	bne	r2,zero,2f874 <___vfiprintf_internal_r+0xe30>
   2efe4:	843ffc04 	addi	r16,r16,-16
   2efe8:	01800044 	movi	r6,1
   2efec:	000b883a 	mov	r5,zero
   2eff0:	d811883a 	mov	r8,sp
   2eff4:	3c3ff316 	blt	r7,r16,2efc4 <__alt_data_end+0xf402efc4>
   2eff8:	da402517 	ldw	r9,148(sp)
   2effc:	e007883a 	mov	r3,fp
   2f000:	8039883a 	mov	fp,r16
   2f004:	1821883a 	mov	r16,r3
   2f008:	d8c02417 	ldw	r3,144(sp)
   2f00c:	1705883a 	add	r2,r2,fp
   2f010:	47000115 	stw	fp,4(r8)
   2f014:	40c00015 	stw	r3,0(r8)
   2f018:	d8801c15 	stw	r2,112(sp)
   2f01c:	d9801b15 	stw	r6,108(sp)
   2f020:	00c001c4 	movi	r3,7
   2f024:	19827616 	blt	r3,r6,2fa00 <___vfiprintf_internal_r+0xfbc>
   2f028:	4cf9c83a 	sub	fp,r9,r19
   2f02c:	42000204 	addi	r8,r8,8
   2f030:	31000044 	addi	r4,r6,1
   2f034:	300b883a 	mov	r5,r6
   2f038:	07018516 	blt	zero,fp,2f650 <___vfiprintf_internal_r+0xc0c>
   2f03c:	9885883a 	add	r2,r19,r2
   2f040:	45400015 	stw	r21,0(r8)
   2f044:	44c00115 	stw	r19,4(r8)
   2f048:	d8801c15 	stw	r2,112(sp)
   2f04c:	d9001b15 	stw	r4,108(sp)
   2f050:	00c001c4 	movi	r3,7
   2f054:	1901dd0e 	bge	r3,r4,2f7cc <___vfiprintf_internal_r+0xd88>
   2f058:	1002401e 	bne	r2,zero,2f95c <___vfiprintf_internal_r+0xf18>
   2f05c:	d8001b15 	stw	zero,108(sp)
   2f060:	a2c0010c 	andi	r11,r20,4
   2f064:	58000226 	beq	r11,zero,2f070 <___vfiprintf_internal_r+0x62c>
   2f068:	8ca7c83a 	sub	r19,r17,r18
   2f06c:	04c2f216 	blt	zero,r19,2fc38 <___vfiprintf_internal_r+0x11f4>
   2f070:	8c80010e 	bge	r17,r18,2f078 <___vfiprintf_internal_r+0x634>
   2f074:	9023883a 	mov	r17,r18
   2f078:	da802317 	ldw	r10,140(sp)
   2f07c:	5455883a 	add	r10,r10,r17
   2f080:	da802315 	stw	r10,140(sp)
   2f084:	d8001b15 	stw	zero,108(sp)
   2f088:	d811883a 	mov	r8,sp
   2f08c:	003ea206 	br	2eb18 <__alt_data_end+0xf402eb18>
   2f090:	a5000814 	ori	r20,r20,32
   2f094:	80c00007 	ldb	r3,0(r16)
   2f098:	003ec906 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f09c:	80c00007 	ldb	r3,0(r16)
   2f0a0:	1b030926 	beq	r3,r12,2fcc8 <___vfiprintf_internal_r+0x1284>
   2f0a4:	a5000414 	ori	r20,r20,16
   2f0a8:	003ec506 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f0ac:	21003fcc 	andi	r4,r4,255
   2f0b0:	20035e1e 	bne	r4,zero,2fe2c <___vfiprintf_internal_r+0x13e8>
   2f0b4:	a080080c 	andi	r2,r20,32
   2f0b8:	1002a526 	beq	r2,zero,2fb50 <___vfiprintf_internal_r+0x110c>
   2f0bc:	da802217 	ldw	r10,136(sp)
   2f0c0:	50800017 	ldw	r2,0(r10)
   2f0c4:	da802317 	ldw	r10,140(sp)
   2f0c8:	5007d7fa 	srai	r3,r10,31
   2f0cc:	da802217 	ldw	r10,136(sp)
   2f0d0:	10c00115 	stw	r3,4(r2)
   2f0d4:	52800104 	addi	r10,r10,4
   2f0d8:	da802215 	stw	r10,136(sp)
   2f0dc:	da802317 	ldw	r10,140(sp)
   2f0e0:	12800015 	stw	r10,0(r2)
   2f0e4:	003e8c06 	br	2eb18 <__alt_data_end+0xf402eb18>
   2f0e8:	21003fcc 	andi	r4,r4,255
   2f0ec:	2003511e 	bne	r4,zero,2fe34 <___vfiprintf_internal_r+0x13f0>
   2f0f0:	a080080c 	andi	r2,r20,32
   2f0f4:	1000a126 	beq	r2,zero,2f37c <___vfiprintf_internal_r+0x938>
   2f0f8:	da802217 	ldw	r10,136(sp)
   2f0fc:	d8001d85 	stb	zero,118(sp)
   2f100:	50800204 	addi	r2,r10,8
   2f104:	54800017 	ldw	r18,0(r10)
   2f108:	54c00117 	ldw	r19,4(r10)
   2f10c:	4802b416 	blt	r9,zero,2fbe0 <___vfiprintf_internal_r+0x119c>
   2f110:	013fdfc4 	movi	r4,-129
   2f114:	94c6b03a 	or	r3,r18,r19
   2f118:	d8802215 	stw	r2,136(sp)
   2f11c:	a128703a 	and	r20,r20,r4
   2f120:	1800a226 	beq	r3,zero,2f3ac <___vfiprintf_internal_r+0x968>
   2f124:	0039883a 	mov	fp,zero
   2f128:	dd401a04 	addi	r21,sp,104
   2f12c:	9006d0fa 	srli	r3,r18,3
   2f130:	9808977a 	slli	r4,r19,29
   2f134:	9826d0fa 	srli	r19,r19,3
   2f138:	948001cc 	andi	r18,r18,7
   2f13c:	90800c04 	addi	r2,r18,48
   2f140:	ad7fffc4 	addi	r21,r21,-1
   2f144:	20e4b03a 	or	r18,r4,r3
   2f148:	a8800005 	stb	r2,0(r21)
   2f14c:	94c6b03a 	or	r3,r18,r19
   2f150:	183ff61e 	bne	r3,zero,2f12c <__alt_data_end+0xf402f12c>
   2f154:	a0c0004c 	andi	r3,r20,1
   2f158:	18005926 	beq	r3,zero,2f2c0 <___vfiprintf_internal_r+0x87c>
   2f15c:	10803fcc 	andi	r2,r2,255
   2f160:	1080201c 	xori	r2,r2,128
   2f164:	10bfe004 	addi	r2,r2,-128
   2f168:	00c00c04 	movi	r3,48
   2f16c:	10c05426 	beq	r2,r3,2f2c0 <___vfiprintf_internal_r+0x87c>
   2f170:	da801e17 	ldw	r10,120(sp)
   2f174:	a8bfffc4 	addi	r2,r21,-1
   2f178:	a8ffffc5 	stb	r3,-1(r21)
   2f17c:	50a7c83a 	sub	r19,r10,r2
   2f180:	102b883a 	mov	r21,r2
   2f184:	003f2f06 	br	2ee44 <__alt_data_end+0xf402ee44>
   2f188:	21003fcc 	andi	r4,r4,255
   2f18c:	2003421e 	bne	r4,zero,2fe98 <___vfiprintf_internal_r+0x1454>
   2f190:	008000f4 	movhi	r2,3
   2f194:	10971f04 	addi	r2,r2,23676
   2f198:	d8802615 	stw	r2,152(sp)
   2f19c:	a080080c 	andi	r2,r20,32
   2f1a0:	1000aa26 	beq	r2,zero,2f44c <___vfiprintf_internal_r+0xa08>
   2f1a4:	da802217 	ldw	r10,136(sp)
   2f1a8:	54800017 	ldw	r18,0(r10)
   2f1ac:	54c00117 	ldw	r19,4(r10)
   2f1b0:	52800204 	addi	r10,r10,8
   2f1b4:	da802215 	stw	r10,136(sp)
   2f1b8:	a080004c 	andi	r2,r20,1
   2f1bc:	1001d226 	beq	r2,zero,2f908 <___vfiprintf_internal_r+0xec4>
   2f1c0:	94c4b03a 	or	r2,r18,r19
   2f1c4:	1002351e 	bne	r2,zero,2fa9c <___vfiprintf_internal_r+0x1058>
   2f1c8:	d8001d85 	stb	zero,118(sp)
   2f1cc:	48022216 	blt	r9,zero,2fa58 <___vfiprintf_internal_r+0x1014>
   2f1d0:	00bfdfc4 	movi	r2,-129
   2f1d4:	a0a8703a 	and	r20,r20,r2
   2f1d8:	003f1506 	br	2ee30 <__alt_data_end+0xf402ee30>
   2f1dc:	da802217 	ldw	r10,136(sp)
   2f1e0:	04800044 	movi	r18,1
   2f1e4:	d8001d85 	stb	zero,118(sp)
   2f1e8:	50800017 	ldw	r2,0(r10)
   2f1ec:	52800104 	addi	r10,r10,4
   2f1f0:	da802215 	stw	r10,136(sp)
   2f1f4:	d8801005 	stb	r2,64(sp)
   2f1f8:	9027883a 	mov	r19,r18
   2f1fc:	dd401004 	addi	r21,sp,64
   2f200:	0013883a 	mov	r9,zero
   2f204:	003f1706 	br	2ee64 <__alt_data_end+0xf402ee64>
   2f208:	21003fcc 	andi	r4,r4,255
   2f20c:	2003201e 	bne	r4,zero,2fe90 <___vfiprintf_internal_r+0x144c>
   2f210:	a080080c 	andi	r2,r20,32
   2f214:	10004b26 	beq	r2,zero,2f344 <___vfiprintf_internal_r+0x900>
   2f218:	da802217 	ldw	r10,136(sp)
   2f21c:	50800117 	ldw	r2,4(r10)
   2f220:	54800017 	ldw	r18,0(r10)
   2f224:	52800204 	addi	r10,r10,8
   2f228:	da802215 	stw	r10,136(sp)
   2f22c:	1027883a 	mov	r19,r2
   2f230:	10022c16 	blt	r2,zero,2fae4 <___vfiprintf_internal_r+0x10a0>
   2f234:	df001d83 	ldbu	fp,118(sp)
   2f238:	48007216 	blt	r9,zero,2f404 <___vfiprintf_internal_r+0x9c0>
   2f23c:	00ffdfc4 	movi	r3,-129
   2f240:	94c4b03a 	or	r2,r18,r19
   2f244:	a0e8703a 	and	r20,r20,r3
   2f248:	1000cc26 	beq	r2,zero,2f57c <___vfiprintf_internal_r+0xb38>
   2f24c:	98021026 	beq	r19,zero,2fa90 <___vfiprintf_internal_r+0x104c>
   2f250:	dc402415 	stw	r17,144(sp)
   2f254:	dc002515 	stw	r16,148(sp)
   2f258:	9823883a 	mov	r17,r19
   2f25c:	9021883a 	mov	r16,r18
   2f260:	dd401a04 	addi	r21,sp,104
   2f264:	4825883a 	mov	r18,r9
   2f268:	4027883a 	mov	r19,r8
   2f26c:	8009883a 	mov	r4,r16
   2f270:	880b883a 	mov	r5,r17
   2f274:	01800284 	movi	r6,10
   2f278:	000f883a 	mov	r7,zero
   2f27c:	0030e240 	call	30e24 <__umoddi3>
   2f280:	10800c04 	addi	r2,r2,48
   2f284:	ad7fffc4 	addi	r21,r21,-1
   2f288:	8009883a 	mov	r4,r16
   2f28c:	880b883a 	mov	r5,r17
   2f290:	a8800005 	stb	r2,0(r21)
   2f294:	01800284 	movi	r6,10
   2f298:	000f883a 	mov	r7,zero
   2f29c:	00308ac0 	call	308ac <__udivdi3>
   2f2a0:	1021883a 	mov	r16,r2
   2f2a4:	10c4b03a 	or	r2,r2,r3
   2f2a8:	1823883a 	mov	r17,r3
   2f2ac:	103fef1e 	bne	r2,zero,2f26c <__alt_data_end+0xf402f26c>
   2f2b0:	dc402417 	ldw	r17,144(sp)
   2f2b4:	dc002517 	ldw	r16,148(sp)
   2f2b8:	9013883a 	mov	r9,r18
   2f2bc:	9811883a 	mov	r8,r19
   2f2c0:	da801e17 	ldw	r10,120(sp)
   2f2c4:	5567c83a 	sub	r19,r10,r21
   2f2c8:	003ede06 	br	2ee44 <__alt_data_end+0xf402ee44>
   2f2cc:	38803fcc 	andi	r2,r7,255
   2f2d0:	1080201c 	xori	r2,r2,128
   2f2d4:	10bfe004 	addi	r2,r2,-128
   2f2d8:	1002371e 	bne	r2,zero,2fbb8 <___vfiprintf_internal_r+0x1174>
   2f2dc:	01000044 	movi	r4,1
   2f2e0:	01c00804 	movi	r7,32
   2f2e4:	80c00007 	ldb	r3,0(r16)
   2f2e8:	003e3506 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f2ec:	a5000054 	ori	r20,r20,1
   2f2f0:	80c00007 	ldb	r3,0(r16)
   2f2f4:	003e3206 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f2f8:	a5002014 	ori	r20,r20,128
   2f2fc:	80c00007 	ldb	r3,0(r16)
   2f300:	003e2f06 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f304:	8015883a 	mov	r10,r16
   2f308:	0023883a 	mov	r17,zero
   2f30c:	18bff404 	addi	r2,r3,-48
   2f310:	50c00007 	ldb	r3,0(r10)
   2f314:	8c4002a4 	muli	r17,r17,10
   2f318:	84000044 	addi	r16,r16,1
   2f31c:	8015883a 	mov	r10,r16
   2f320:	1463883a 	add	r17,r2,r17
   2f324:	18bff404 	addi	r2,r3,-48
   2f328:	30bff92e 	bgeu	r6,r2,2f310 <__alt_data_end+0xf402f310>
   2f32c:	003e2506 	br	2ebc4 <__alt_data_end+0xf402ebc4>
   2f330:	21003fcc 	andi	r4,r4,255
   2f334:	2002d41e 	bne	r4,zero,2fe88 <___vfiprintf_internal_r+0x1444>
   2f338:	a5000414 	ori	r20,r20,16
   2f33c:	a080080c 	andi	r2,r20,32
   2f340:	103fb51e 	bne	r2,zero,2f218 <__alt_data_end+0xf402f218>
   2f344:	a080040c 	andi	r2,r20,16
   2f348:	1001f826 	beq	r2,zero,2fb2c <___vfiprintf_internal_r+0x10e8>
   2f34c:	da802217 	ldw	r10,136(sp)
   2f350:	54800017 	ldw	r18,0(r10)
   2f354:	52800104 	addi	r10,r10,4
   2f358:	da802215 	stw	r10,136(sp)
   2f35c:	9027d7fa 	srai	r19,r18,31
   2f360:	9805883a 	mov	r2,r19
   2f364:	003fb206 	br	2f230 <__alt_data_end+0xf402f230>
   2f368:	21003fcc 	andi	r4,r4,255
   2f36c:	2002c41e 	bne	r4,zero,2fe80 <___vfiprintf_internal_r+0x143c>
   2f370:	a5000414 	ori	r20,r20,16
   2f374:	a080080c 	andi	r2,r20,32
   2f378:	103f5f1e 	bne	r2,zero,2f0f8 <__alt_data_end+0xf402f0f8>
   2f37c:	a080040c 	andi	r2,r20,16
   2f380:	10020f26 	beq	r2,zero,2fbc0 <___vfiprintf_internal_r+0x117c>
   2f384:	da802217 	ldw	r10,136(sp)
   2f388:	d8001d85 	stb	zero,118(sp)
   2f38c:	0027883a 	mov	r19,zero
   2f390:	50800104 	addi	r2,r10,4
   2f394:	54800017 	ldw	r18,0(r10)
   2f398:	48021116 	blt	r9,zero,2fbe0 <___vfiprintf_internal_r+0x119c>
   2f39c:	00ffdfc4 	movi	r3,-129
   2f3a0:	d8802215 	stw	r2,136(sp)
   2f3a4:	a0e8703a 	and	r20,r20,r3
   2f3a8:	903f5e1e 	bne	r18,zero,2f124 <__alt_data_end+0xf402f124>
   2f3ac:	0039883a 	mov	fp,zero
   2f3b0:	4802a626 	beq	r9,zero,2fe4c <___vfiprintf_internal_r+0x1408>
   2f3b4:	0025883a 	mov	r18,zero
   2f3b8:	0027883a 	mov	r19,zero
   2f3bc:	003f5a06 	br	2f128 <__alt_data_end+0xf402f128>
   2f3c0:	21003fcc 	andi	r4,r4,255
   2f3c4:	20029f1e 	bne	r4,zero,2fe44 <___vfiprintf_internal_r+0x1400>
   2f3c8:	a5000414 	ori	r20,r20,16
   2f3cc:	a080080c 	andi	r2,r20,32
   2f3d0:	10005e1e 	bne	r2,zero,2f54c <___vfiprintf_internal_r+0xb08>
   2f3d4:	a080040c 	andi	r2,r20,16
   2f3d8:	1001a21e 	bne	r2,zero,2fa64 <___vfiprintf_internal_r+0x1020>
   2f3dc:	a080100c 	andi	r2,r20,64
   2f3e0:	d8001d85 	stb	zero,118(sp)
   2f3e4:	da802217 	ldw	r10,136(sp)
   2f3e8:	1002231e 	bne	r2,zero,2fc78 <___vfiprintf_internal_r+0x1234>
   2f3ec:	50800104 	addi	r2,r10,4
   2f3f0:	54800017 	ldw	r18,0(r10)
   2f3f4:	0027883a 	mov	r19,zero
   2f3f8:	4801a00e 	bge	r9,zero,2fa7c <___vfiprintf_internal_r+0x1038>
   2f3fc:	d8802215 	stw	r2,136(sp)
   2f400:	0039883a 	mov	fp,zero
   2f404:	94c4b03a 	or	r2,r18,r19
   2f408:	103f901e 	bne	r2,zero,2f24c <__alt_data_end+0xf402f24c>
   2f40c:	00800044 	movi	r2,1
   2f410:	10803fcc 	andi	r2,r2,255
   2f414:	00c00044 	movi	r3,1
   2f418:	10c05926 	beq	r2,r3,2f580 <___vfiprintf_internal_r+0xb3c>
   2f41c:	00c00084 	movi	r3,2
   2f420:	10ffe41e 	bne	r2,r3,2f3b4 <__alt_data_end+0xf402f3b4>
   2f424:	0025883a 	mov	r18,zero
   2f428:	0027883a 	mov	r19,zero
   2f42c:	00013d06 	br	2f924 <___vfiprintf_internal_r+0xee0>
   2f430:	21003fcc 	andi	r4,r4,255
   2f434:	2002811e 	bne	r4,zero,2fe3c <___vfiprintf_internal_r+0x13f8>
   2f438:	008000f4 	movhi	r2,3
   2f43c:	10971a04 	addi	r2,r2,23656
   2f440:	d8802615 	stw	r2,152(sp)
   2f444:	a080080c 	andi	r2,r20,32
   2f448:	103f561e 	bne	r2,zero,2f1a4 <__alt_data_end+0xf402f1a4>
   2f44c:	a080040c 	andi	r2,r20,16
   2f450:	1001d126 	beq	r2,zero,2fb98 <___vfiprintf_internal_r+0x1154>
   2f454:	da802217 	ldw	r10,136(sp)
   2f458:	0027883a 	mov	r19,zero
   2f45c:	54800017 	ldw	r18,0(r10)
   2f460:	52800104 	addi	r10,r10,4
   2f464:	da802215 	stw	r10,136(sp)
   2f468:	003f5306 	br	2f1b8 <__alt_data_end+0xf402f1b8>
   2f46c:	da802217 	ldw	r10,136(sp)
   2f470:	d8001d85 	stb	zero,118(sp)
   2f474:	55400017 	ldw	r21,0(r10)
   2f478:	50c00104 	addi	r3,r10,4
   2f47c:	a8024226 	beq	r21,zero,2fd88 <___vfiprintf_internal_r+0x1344>
   2f480:	48021816 	blt	r9,zero,2fce4 <___vfiprintf_internal_r+0x12a0>
   2f484:	480d883a 	mov	r6,r9
   2f488:	000b883a 	mov	r5,zero
   2f48c:	a809883a 	mov	r4,r21
   2f490:	d8c02a15 	stw	r3,168(sp)
   2f494:	da002b15 	stw	r8,172(sp)
   2f498:	da402c15 	stw	r9,176(sp)
   2f49c:	002ccb40 	call	2ccb4 <memchr>
   2f4a0:	d8c02a17 	ldw	r3,168(sp)
   2f4a4:	da002b17 	ldw	r8,172(sp)
   2f4a8:	da402c17 	ldw	r9,176(sp)
   2f4ac:	10024826 	beq	r2,zero,2fdd0 <___vfiprintf_internal_r+0x138c>
   2f4b0:	1567c83a 	sub	r19,r2,r21
   2f4b4:	df001d83 	ldbu	fp,118(sp)
   2f4b8:	d8c02215 	stw	r3,136(sp)
   2f4bc:	0013883a 	mov	r9,zero
   2f4c0:	003e6006 	br	2ee44 <__alt_data_end+0xf402ee44>
   2f4c4:	21003fcc 	andi	r4,r4,255
   2f4c8:	203fc026 	beq	r4,zero,2f3cc <__alt_data_end+0xf402f3cc>
   2f4cc:	d9c01d85 	stb	r7,118(sp)
   2f4d0:	003fbe06 	br	2f3cc <__alt_data_end+0xf402f3cc>
   2f4d4:	da802217 	ldw	r10,136(sp)
   2f4d8:	54400017 	ldw	r17,0(r10)
   2f4dc:	50800104 	addi	r2,r10,4
   2f4e0:	883e3b16 	blt	r17,zero,2edd0 <__alt_data_end+0xf402edd0>
   2f4e4:	d8802215 	stw	r2,136(sp)
   2f4e8:	80c00007 	ldb	r3,0(r16)
   2f4ec:	003db406 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f4f0:	01000044 	movi	r4,1
   2f4f4:	01c00ac4 	movi	r7,43
   2f4f8:	80c00007 	ldb	r3,0(r16)
   2f4fc:	003db006 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f500:	80c00007 	ldb	r3,0(r16)
   2f504:	82800044 	addi	r10,r16,1
   2f508:	1b423c26 	beq	r3,r13,2fdfc <___vfiprintf_internal_r+0x13b8>
   2f50c:	18bff404 	addi	r2,r3,-48
   2f510:	0013883a 	mov	r9,zero
   2f514:	30822b36 	bltu	r6,r2,2fdc4 <___vfiprintf_internal_r+0x1380>
   2f518:	50c00007 	ldb	r3,0(r10)
   2f51c:	4a4002a4 	muli	r9,r9,10
   2f520:	54000044 	addi	r16,r10,1
   2f524:	8015883a 	mov	r10,r16
   2f528:	4893883a 	add	r9,r9,r2
   2f52c:	18bff404 	addi	r2,r3,-48
   2f530:	30bff92e 	bgeu	r6,r2,2f518 <__alt_data_end+0xf402f518>
   2f534:	483da30e 	bge	r9,zero,2ebc4 <__alt_data_end+0xf402ebc4>
   2f538:	027fffc4 	movi	r9,-1
   2f53c:	003da106 	br	2ebc4 <__alt_data_end+0xf402ebc4>
   2f540:	a5001014 	ori	r20,r20,64
   2f544:	80c00007 	ldb	r3,0(r16)
   2f548:	003d9d06 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2f54c:	da802217 	ldw	r10,136(sp)
   2f550:	d8001d85 	stb	zero,118(sp)
   2f554:	50c00204 	addi	r3,r10,8
   2f558:	54800017 	ldw	r18,0(r10)
   2f55c:	54c00117 	ldw	r19,4(r10)
   2f560:	4801ca16 	blt	r9,zero,2fc8c <___vfiprintf_internal_r+0x1248>
   2f564:	013fdfc4 	movi	r4,-129
   2f568:	94c4b03a 	or	r2,r18,r19
   2f56c:	d8c02215 	stw	r3,136(sp)
   2f570:	a128703a 	and	r20,r20,r4
   2f574:	0039883a 	mov	fp,zero
   2f578:	103f341e 	bne	r2,zero,2f24c <__alt_data_end+0xf402f24c>
   2f57c:	483e2e26 	beq	r9,zero,2ee38 <__alt_data_end+0xf402ee38>
   2f580:	0025883a 	mov	r18,zero
   2f584:	94800c04 	addi	r18,r18,48
   2f588:	dc8019c5 	stb	r18,103(sp)
   2f58c:	dcc02717 	ldw	r19,156(sp)
   2f590:	dd4019c4 	addi	r21,sp,103
   2f594:	003e2b06 	br	2ee44 <__alt_data_end+0xf402ee44>
   2f598:	21003fcc 	andi	r4,r4,255
   2f59c:	2002361e 	bne	r4,zero,2fe78 <___vfiprintf_internal_r+0x1434>
   2f5a0:	1801c126 	beq	r3,zero,2fca8 <___vfiprintf_internal_r+0x1264>
   2f5a4:	04800044 	movi	r18,1
   2f5a8:	d8c01005 	stb	r3,64(sp)
   2f5ac:	d8001d85 	stb	zero,118(sp)
   2f5b0:	9027883a 	mov	r19,r18
   2f5b4:	dd401004 	addi	r21,sp,64
   2f5b8:	003f1106 	br	2f200 <__alt_data_end+0xf402f200>
   2f5bc:	d9402117 	ldw	r5,132(sp)
   2f5c0:	d9002017 	ldw	r4,128(sp)
   2f5c4:	d9801a04 	addi	r6,sp,104
   2f5c8:	d9c02b15 	stw	r7,172(sp)
   2f5cc:	dbc02a15 	stw	r15,168(sp)
   2f5d0:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f5d4:	d9c02b17 	ldw	r7,172(sp)
   2f5d8:	dbc02a17 	ldw	r15,168(sp)
   2f5dc:	10006d1e 	bne	r2,zero,2f794 <___vfiprintf_internal_r+0xd50>
   2f5e0:	d9801b17 	ldw	r6,108(sp)
   2f5e4:	d8801c17 	ldw	r2,112(sp)
   2f5e8:	d811883a 	mov	r8,sp
   2f5ec:	31400044 	addi	r5,r6,1
   2f5f0:	003e3306 	br	2eec0 <__alt_data_end+0xf402eec0>
   2f5f4:	d9401b17 	ldw	r5,108(sp)
   2f5f8:	d8801c17 	ldw	r2,112(sp)
   2f5fc:	29000044 	addi	r4,r5,1
   2f600:	d8c01d87 	ldb	r3,118(sp)
   2f604:	183e4d26 	beq	r3,zero,2ef3c <__alt_data_end+0xf402ef3c>
   2f608:	00c00044 	movi	r3,1
   2f60c:	d9401d84 	addi	r5,sp,118
   2f610:	10c5883a 	add	r2,r2,r3
   2f614:	41400015 	stw	r5,0(r8)
   2f618:	40c00115 	stw	r3,4(r8)
   2f61c:	d8801c15 	stw	r2,112(sp)
   2f620:	d9001b15 	stw	r4,108(sp)
   2f624:	014001c4 	movi	r5,7
   2f628:	2900a90e 	bge	r5,r4,2f8d0 <___vfiprintf_internal_r+0xe8c>
   2f62c:	1000da1e 	bne	r2,zero,2f998 <___vfiprintf_internal_r+0xf54>
   2f630:	7000ab1e 	bne	r14,zero,2f8e0 <___vfiprintf_internal_r+0xe9c>
   2f634:	000b883a 	mov	r5,zero
   2f638:	1809883a 	mov	r4,r3
   2f63c:	d811883a 	mov	r8,sp
   2f640:	00c02004 	movi	r3,128
   2f644:	e0fe4d26 	beq	fp,r3,2ef7c <__alt_data_end+0xf402ef7c>
   2f648:	4cf9c83a 	sub	fp,r9,r19
   2f64c:	073e7b0e 	bge	zero,fp,2f03c <__alt_data_end+0xf402f03c>
   2f650:	01c00404 	movi	r7,16
   2f654:	3f01900e 	bge	r7,fp,2fc98 <___vfiprintf_internal_r+0x1254>
   2f658:	00c000f4 	movhi	r3,3
   2f65c:	18d77f04 	addi	r3,r3,24060
   2f660:	d8c02415 	stw	r3,144(sp)
   2f664:	034001c4 	movi	r13,7
   2f668:	00000506 	br	2f680 <___vfiprintf_internal_r+0xc3c>
   2f66c:	29000084 	addi	r4,r5,2
   2f670:	42000204 	addi	r8,r8,8
   2f674:	180b883a 	mov	r5,r3
   2f678:	e73ffc04 	addi	fp,fp,-16
   2f67c:	3f000d0e 	bge	r7,fp,2f6b4 <___vfiprintf_internal_r+0xc70>
   2f680:	10800404 	addi	r2,r2,16
   2f684:	28c00044 	addi	r3,r5,1
   2f688:	45c00015 	stw	r23,0(r8)
   2f68c:	41c00115 	stw	r7,4(r8)
   2f690:	d8801c15 	stw	r2,112(sp)
   2f694:	d8c01b15 	stw	r3,108(sp)
   2f698:	68fff40e 	bge	r13,r3,2f66c <__alt_data_end+0xf402f66c>
   2f69c:	1000101e 	bne	r2,zero,2f6e0 <___vfiprintf_internal_r+0xc9c>
   2f6a0:	e73ffc04 	addi	fp,fp,-16
   2f6a4:	01000044 	movi	r4,1
   2f6a8:	000b883a 	mov	r5,zero
   2f6ac:	d811883a 	mov	r8,sp
   2f6b0:	3f3ff316 	blt	r7,fp,2f680 <__alt_data_end+0xf402f680>
   2f6b4:	da802417 	ldw	r10,144(sp)
   2f6b8:	1705883a 	add	r2,r2,fp
   2f6bc:	47000115 	stw	fp,4(r8)
   2f6c0:	42800015 	stw	r10,0(r8)
   2f6c4:	d8801c15 	stw	r2,112(sp)
   2f6c8:	d9001b15 	stw	r4,108(sp)
   2f6cc:	00c001c4 	movi	r3,7
   2f6d0:	19003616 	blt	r3,r4,2f7ac <___vfiprintf_internal_r+0xd68>
   2f6d4:	42000204 	addi	r8,r8,8
   2f6d8:	21000044 	addi	r4,r4,1
   2f6dc:	003e5706 	br	2f03c <__alt_data_end+0xf402f03c>
   2f6e0:	d9402117 	ldw	r5,132(sp)
   2f6e4:	d9002017 	ldw	r4,128(sp)
   2f6e8:	d9801a04 	addi	r6,sp,104
   2f6ec:	d9c02b15 	stw	r7,172(sp)
   2f6f0:	db402a15 	stw	r13,168(sp)
   2f6f4:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f6f8:	d9c02b17 	ldw	r7,172(sp)
   2f6fc:	db402a17 	ldw	r13,168(sp)
   2f700:	1000241e 	bne	r2,zero,2f794 <___vfiprintf_internal_r+0xd50>
   2f704:	d9401b17 	ldw	r5,108(sp)
   2f708:	d8801c17 	ldw	r2,112(sp)
   2f70c:	d811883a 	mov	r8,sp
   2f710:	29000044 	addi	r4,r5,1
   2f714:	003fd806 	br	2f678 <__alt_data_end+0xf402f678>
   2f718:	d9401b17 	ldw	r5,108(sp)
   2f71c:	00c000f4 	movhi	r3,3
   2f720:	18d78304 	addi	r3,r3,24076
   2f724:	d8c02415 	stw	r3,144(sp)
   2f728:	29400044 	addi	r5,r5,1
   2f72c:	d8c02417 	ldw	r3,144(sp)
   2f730:	14c5883a 	add	r2,r2,r19
   2f734:	44c00115 	stw	r19,4(r8)
   2f738:	40c00015 	stw	r3,0(r8)
   2f73c:	d8801c15 	stw	r2,112(sp)
   2f740:	d9401b15 	stw	r5,108(sp)
   2f744:	00c001c4 	movi	r3,7
   2f748:	1940070e 	bge	r3,r5,2f768 <___vfiprintf_internal_r+0xd24>
   2f74c:	103e4826 	beq	r2,zero,2f070 <__alt_data_end+0xf402f070>
   2f750:	d9402117 	ldw	r5,132(sp)
   2f754:	d9002017 	ldw	r4,128(sp)
   2f758:	d9801a04 	addi	r6,sp,104
   2f75c:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f760:	10000c1e 	bne	r2,zero,2f794 <___vfiprintf_internal_r+0xd50>
   2f764:	d8801c17 	ldw	r2,112(sp)
   2f768:	8c80010e 	bge	r17,r18,2f770 <___vfiprintf_internal_r+0xd2c>
   2f76c:	9023883a 	mov	r17,r18
   2f770:	da802317 	ldw	r10,140(sp)
   2f774:	5455883a 	add	r10,r10,r17
   2f778:	da802315 	stw	r10,140(sp)
   2f77c:	103e4126 	beq	r2,zero,2f084 <__alt_data_end+0xf402f084>
   2f780:	d9402117 	ldw	r5,132(sp)
   2f784:	d9002017 	ldw	r4,128(sp)
   2f788:	d9801a04 	addi	r6,sp,104
   2f78c:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f790:	103e3c26 	beq	r2,zero,2f084 <__alt_data_end+0xf402f084>
   2f794:	dd002117 	ldw	r20,132(sp)
   2f798:	a080030b 	ldhu	r2,12(r20)
   2f79c:	1080100c 	andi	r2,r2,64
   2f7a0:	1001231e 	bne	r2,zero,2fc30 <___vfiprintf_internal_r+0x11ec>
   2f7a4:	d8802317 	ldw	r2,140(sp)
   2f7a8:	003d7b06 	br	2ed98 <__alt_data_end+0xf402ed98>
   2f7ac:	1000991e 	bne	r2,zero,2fa14 <___vfiprintf_internal_r+0xfd0>
   2f7b0:	00c00044 	movi	r3,1
   2f7b4:	9805883a 	mov	r2,r19
   2f7b8:	dd400015 	stw	r21,0(sp)
   2f7bc:	dcc00115 	stw	r19,4(sp)
   2f7c0:	dcc01c15 	stw	r19,112(sp)
   2f7c4:	d8c01b15 	stw	r3,108(sp)
   2f7c8:	d811883a 	mov	r8,sp
   2f7cc:	42000204 	addi	r8,r8,8
   2f7d0:	a2c0010c 	andi	r11,r20,4
   2f7d4:	583fe426 	beq	r11,zero,2f768 <__alt_data_end+0xf402f768>
   2f7d8:	8ca7c83a 	sub	r19,r17,r18
   2f7dc:	04ffe20e 	bge	zero,r19,2f768 <__alt_data_end+0xf402f768>
   2f7e0:	01c00404 	movi	r7,16
   2f7e4:	3cffcc0e 	bge	r7,r19,2f718 <__alt_data_end+0xf402f718>
   2f7e8:	028000f4 	movhi	r10,3
   2f7ec:	52978304 	addi	r10,r10,24076
   2f7f0:	d9001b17 	ldw	r4,108(sp)
   2f7f4:	da802415 	stw	r10,144(sp)
   2f7f8:	382b883a 	mov	r21,r7
   2f7fc:	050001c4 	movi	r20,7
   2f800:	df002017 	ldw	fp,128(sp)
   2f804:	00000506 	br	2f81c <___vfiprintf_internal_r+0xdd8>
   2f808:	21400084 	addi	r5,r4,2
   2f80c:	42000204 	addi	r8,r8,8
   2f810:	1809883a 	mov	r4,r3
   2f814:	9cfffc04 	addi	r19,r19,-16
   2f818:	acffc40e 	bge	r21,r19,2f72c <__alt_data_end+0xf402f72c>
   2f81c:	10800404 	addi	r2,r2,16
   2f820:	20c00044 	addi	r3,r4,1
   2f824:	45800015 	stw	r22,0(r8)
   2f828:	45400115 	stw	r21,4(r8)
   2f82c:	d8801c15 	stw	r2,112(sp)
   2f830:	d8c01b15 	stw	r3,108(sp)
   2f834:	a0fff40e 	bge	r20,r3,2f808 <__alt_data_end+0xf402f808>
   2f838:	1000041e 	bne	r2,zero,2f84c <___vfiprintf_internal_r+0xe08>
   2f83c:	01400044 	movi	r5,1
   2f840:	0009883a 	mov	r4,zero
   2f844:	d811883a 	mov	r8,sp
   2f848:	003ff206 	br	2f814 <__alt_data_end+0xf402f814>
   2f84c:	d9402117 	ldw	r5,132(sp)
   2f850:	d9801a04 	addi	r6,sp,104
   2f854:	e009883a 	mov	r4,fp
   2f858:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f85c:	103fcd1e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2f860:	d9001b17 	ldw	r4,108(sp)
   2f864:	d8801c17 	ldw	r2,112(sp)
   2f868:	d811883a 	mov	r8,sp
   2f86c:	21400044 	addi	r5,r4,1
   2f870:	003fe806 	br	2f814 <__alt_data_end+0xf402f814>
   2f874:	d9402117 	ldw	r5,132(sp)
   2f878:	d9002017 	ldw	r4,128(sp)
   2f87c:	d9801a04 	addi	r6,sp,104
   2f880:	d9c02b15 	stw	r7,172(sp)
   2f884:	db402a15 	stw	r13,168(sp)
   2f888:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f88c:	d9c02b17 	ldw	r7,172(sp)
   2f890:	db402a17 	ldw	r13,168(sp)
   2f894:	103fbf1e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2f898:	d9401b17 	ldw	r5,108(sp)
   2f89c:	d8801c17 	ldw	r2,112(sp)
   2f8a0:	d811883a 	mov	r8,sp
   2f8a4:	29800044 	addi	r6,r5,1
   2f8a8:	003dc406 	br	2efbc <__alt_data_end+0xf402efbc>
   2f8ac:	1000d21e 	bne	r2,zero,2fbf8 <___vfiprintf_internal_r+0x11b4>
   2f8b0:	d8c01d87 	ldb	r3,118(sp)
   2f8b4:	18009526 	beq	r3,zero,2fb0c <___vfiprintf_internal_r+0x10c8>
   2f8b8:	00800044 	movi	r2,1
   2f8bc:	d8c01d84 	addi	r3,sp,118
   2f8c0:	1009883a 	mov	r4,r2
   2f8c4:	d8c00015 	stw	r3,0(sp)
   2f8c8:	d8800115 	stw	r2,4(sp)
   2f8cc:	d811883a 	mov	r8,sp
   2f8d0:	200b883a 	mov	r5,r4
   2f8d4:	42000204 	addi	r8,r8,8
   2f8d8:	21000044 	addi	r4,r4,1
   2f8dc:	003d9706 	br	2ef3c <__alt_data_end+0xf402ef3c>
   2f8e0:	d9001d04 	addi	r4,sp,116
   2f8e4:	00800084 	movi	r2,2
   2f8e8:	d9000015 	stw	r4,0(sp)
   2f8ec:	d8800115 	stw	r2,4(sp)
   2f8f0:	1809883a 	mov	r4,r3
   2f8f4:	d811883a 	mov	r8,sp
   2f8f8:	200b883a 	mov	r5,r4
   2f8fc:	42000204 	addi	r8,r8,8
   2f900:	21000044 	addi	r4,r4,1
   2f904:	003f4e06 	br	2f640 <__alt_data_end+0xf402f640>
   2f908:	d8001d85 	stb	zero,118(sp)
   2f90c:	48005016 	blt	r9,zero,2fa50 <___vfiprintf_internal_r+0x100c>
   2f910:	00ffdfc4 	movi	r3,-129
   2f914:	94c4b03a 	or	r2,r18,r19
   2f918:	a0e8703a 	and	r20,r20,r3
   2f91c:	103d4426 	beq	r2,zero,2ee30 <__alt_data_end+0xf402ee30>
   2f920:	0039883a 	mov	fp,zero
   2f924:	d9002617 	ldw	r4,152(sp)
   2f928:	dd401a04 	addi	r21,sp,104
   2f92c:	908003cc 	andi	r2,r18,15
   2f930:	9806973a 	slli	r3,r19,28
   2f934:	2085883a 	add	r2,r4,r2
   2f938:	9024d13a 	srli	r18,r18,4
   2f93c:	10800003 	ldbu	r2,0(r2)
   2f940:	9826d13a 	srli	r19,r19,4
   2f944:	ad7fffc4 	addi	r21,r21,-1
   2f948:	1ca4b03a 	or	r18,r3,r18
   2f94c:	a8800005 	stb	r2,0(r21)
   2f950:	94c4b03a 	or	r2,r18,r19
   2f954:	103ff51e 	bne	r2,zero,2f92c <__alt_data_end+0xf402f92c>
   2f958:	003e5906 	br	2f2c0 <__alt_data_end+0xf402f2c0>
   2f95c:	d9402117 	ldw	r5,132(sp)
   2f960:	d9002017 	ldw	r4,128(sp)
   2f964:	d9801a04 	addi	r6,sp,104
   2f968:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f96c:	103f891e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2f970:	d8801c17 	ldw	r2,112(sp)
   2f974:	d811883a 	mov	r8,sp
   2f978:	003f9506 	br	2f7d0 <__alt_data_end+0xf402f7d0>
   2f97c:	d9402117 	ldw	r5,132(sp)
   2f980:	d9002017 	ldw	r4,128(sp)
   2f984:	d9801a04 	addi	r6,sp,104
   2f988:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f98c:	103f811e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2f990:	d811883a 	mov	r8,sp
   2f994:	003ced06 	br	2ed4c <__alt_data_end+0xf402ed4c>
   2f998:	d9402117 	ldw	r5,132(sp)
   2f99c:	d9002017 	ldw	r4,128(sp)
   2f9a0:	d9801a04 	addi	r6,sp,104
   2f9a4:	da402c15 	stw	r9,176(sp)
   2f9a8:	db802a15 	stw	r14,168(sp)
   2f9ac:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f9b0:	da402c17 	ldw	r9,176(sp)
   2f9b4:	db802a17 	ldw	r14,168(sp)
   2f9b8:	103f761e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2f9bc:	d9401b17 	ldw	r5,108(sp)
   2f9c0:	d8801c17 	ldw	r2,112(sp)
   2f9c4:	d811883a 	mov	r8,sp
   2f9c8:	29000044 	addi	r4,r5,1
   2f9cc:	003d5b06 	br	2ef3c <__alt_data_end+0xf402ef3c>
   2f9d0:	d9402117 	ldw	r5,132(sp)
   2f9d4:	d9002017 	ldw	r4,128(sp)
   2f9d8:	d9801a04 	addi	r6,sp,104
   2f9dc:	da402c15 	stw	r9,176(sp)
   2f9e0:	002e9300 	call	2e930 <__sprint_r.part.0>
   2f9e4:	da402c17 	ldw	r9,176(sp)
   2f9e8:	103f6a1e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2f9ec:	d9401b17 	ldw	r5,108(sp)
   2f9f0:	d8801c17 	ldw	r2,112(sp)
   2f9f4:	d811883a 	mov	r8,sp
   2f9f8:	29000044 	addi	r4,r5,1
   2f9fc:	003f1006 	br	2f640 <__alt_data_end+0xf402f640>
   2fa00:	1000c31e 	bne	r2,zero,2fd10 <___vfiprintf_internal_r+0x12cc>
   2fa04:	01000044 	movi	r4,1
   2fa08:	000b883a 	mov	r5,zero
   2fa0c:	d811883a 	mov	r8,sp
   2fa10:	003f0d06 	br	2f648 <__alt_data_end+0xf402f648>
   2fa14:	d9402117 	ldw	r5,132(sp)
   2fa18:	d9002017 	ldw	r4,128(sp)
   2fa1c:	d9801a04 	addi	r6,sp,104
   2fa20:	002e9300 	call	2e930 <__sprint_r.part.0>
   2fa24:	103f5b1e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2fa28:	d9001b17 	ldw	r4,108(sp)
   2fa2c:	d8801c17 	ldw	r2,112(sp)
   2fa30:	d811883a 	mov	r8,sp
   2fa34:	21000044 	addi	r4,r4,1
   2fa38:	003d8006 	br	2f03c <__alt_data_end+0xf402f03c>
   2fa3c:	010000f4 	movhi	r4,3
   2fa40:	21171f04 	addi	r4,r4,23676
   2fa44:	d9002615 	stw	r4,152(sp)
   2fa48:	d8c02215 	stw	r3,136(sp)
   2fa4c:	1029883a 	mov	r20,r2
   2fa50:	94c4b03a 	or	r2,r18,r19
   2fa54:	103fb21e 	bne	r2,zero,2f920 <__alt_data_end+0xf402f920>
   2fa58:	0039883a 	mov	fp,zero
   2fa5c:	00800084 	movi	r2,2
   2fa60:	003e6b06 	br	2f410 <__alt_data_end+0xf402f410>
   2fa64:	da802217 	ldw	r10,136(sp)
   2fa68:	d8001d85 	stb	zero,118(sp)
   2fa6c:	0027883a 	mov	r19,zero
   2fa70:	50800104 	addi	r2,r10,4
   2fa74:	54800017 	ldw	r18,0(r10)
   2fa78:	483e6016 	blt	r9,zero,2f3fc <__alt_data_end+0xf402f3fc>
   2fa7c:	00ffdfc4 	movi	r3,-129
   2fa80:	d8802215 	stw	r2,136(sp)
   2fa84:	a0e8703a 	and	r20,r20,r3
   2fa88:	0039883a 	mov	fp,zero
   2fa8c:	903ebb26 	beq	r18,zero,2f57c <__alt_data_end+0xf402f57c>
   2fa90:	00800244 	movi	r2,9
   2fa94:	14bdee36 	bltu	r2,r18,2f250 <__alt_data_end+0xf402f250>
   2fa98:	003eba06 	br	2f584 <__alt_data_end+0xf402f584>
   2fa9c:	00800c04 	movi	r2,48
   2faa0:	d8c01d45 	stb	r3,117(sp)
   2faa4:	d8801d05 	stb	r2,116(sp)
   2faa8:	d8001d85 	stb	zero,118(sp)
   2faac:	a0c00094 	ori	r3,r20,2
   2fab0:	4800a916 	blt	r9,zero,2fd58 <___vfiprintf_internal_r+0x1314>
   2fab4:	00bfdfc4 	movi	r2,-129
   2fab8:	a096703a 	and	r11,r20,r2
   2fabc:	5d000094 	ori	r20,r11,2
   2fac0:	0039883a 	mov	fp,zero
   2fac4:	003f9706 	br	2f924 <__alt_data_end+0xf402f924>
   2fac8:	8025883a 	mov	r18,r16
   2facc:	003c2e06 	br	2eb88 <__alt_data_end+0xf402eb88>
   2fad0:	008000f4 	movhi	r2,3
   2fad4:	10971f04 	addi	r2,r2,23676
   2fad8:	0039883a 	mov	fp,zero
   2fadc:	d8802615 	stw	r2,152(sp)
   2fae0:	003f9006 	br	2f924 <__alt_data_end+0xf402f924>
   2fae4:	04a5c83a 	sub	r18,zero,r18
   2fae8:	07000b44 	movi	fp,45
   2faec:	9004c03a 	cmpne	r2,r18,zero
   2faf0:	04e7c83a 	sub	r19,zero,r19
   2faf4:	df001d85 	stb	fp,118(sp)
   2faf8:	98a7c83a 	sub	r19,r19,r2
   2fafc:	48009f16 	blt	r9,zero,2fd7c <___vfiprintf_internal_r+0x1338>
   2fb00:	00bfdfc4 	movi	r2,-129
   2fb04:	a0a8703a 	and	r20,r20,r2
   2fb08:	003dd006 	br	2f24c <__alt_data_end+0xf402f24c>
   2fb0c:	70004c26 	beq	r14,zero,2fc40 <___vfiprintf_internal_r+0x11fc>
   2fb10:	00800084 	movi	r2,2
   2fb14:	d8c01d04 	addi	r3,sp,116
   2fb18:	d8c00015 	stw	r3,0(sp)
   2fb1c:	d8800115 	stw	r2,4(sp)
   2fb20:	01000044 	movi	r4,1
   2fb24:	d811883a 	mov	r8,sp
   2fb28:	003f7306 	br	2f8f8 <__alt_data_end+0xf402f8f8>
   2fb2c:	a080100c 	andi	r2,r20,64
   2fb30:	da802217 	ldw	r10,136(sp)
   2fb34:	103e0626 	beq	r2,zero,2f350 <__alt_data_end+0xf402f350>
   2fb38:	5480000f 	ldh	r18,0(r10)
   2fb3c:	52800104 	addi	r10,r10,4
   2fb40:	da802215 	stw	r10,136(sp)
   2fb44:	9027d7fa 	srai	r19,r18,31
   2fb48:	9805883a 	mov	r2,r19
   2fb4c:	003db806 	br	2f230 <__alt_data_end+0xf402f230>
   2fb50:	a080040c 	andi	r2,r20,16
   2fb54:	1000091e 	bne	r2,zero,2fb7c <___vfiprintf_internal_r+0x1138>
   2fb58:	a2c0100c 	andi	r11,r20,64
   2fb5c:	58000726 	beq	r11,zero,2fb7c <___vfiprintf_internal_r+0x1138>
   2fb60:	da802217 	ldw	r10,136(sp)
   2fb64:	50800017 	ldw	r2,0(r10)
   2fb68:	52800104 	addi	r10,r10,4
   2fb6c:	da802215 	stw	r10,136(sp)
   2fb70:	da802317 	ldw	r10,140(sp)
   2fb74:	1280000d 	sth	r10,0(r2)
   2fb78:	003be706 	br	2eb18 <__alt_data_end+0xf402eb18>
   2fb7c:	da802217 	ldw	r10,136(sp)
   2fb80:	50800017 	ldw	r2,0(r10)
   2fb84:	52800104 	addi	r10,r10,4
   2fb88:	da802215 	stw	r10,136(sp)
   2fb8c:	da802317 	ldw	r10,140(sp)
   2fb90:	12800015 	stw	r10,0(r2)
   2fb94:	003be006 	br	2eb18 <__alt_data_end+0xf402eb18>
   2fb98:	a080100c 	andi	r2,r20,64
   2fb9c:	da802217 	ldw	r10,136(sp)
   2fba0:	10003026 	beq	r2,zero,2fc64 <___vfiprintf_internal_r+0x1220>
   2fba4:	5480000b 	ldhu	r18,0(r10)
   2fba8:	52800104 	addi	r10,r10,4
   2fbac:	0027883a 	mov	r19,zero
   2fbb0:	da802215 	stw	r10,136(sp)
   2fbb4:	003d8006 	br	2f1b8 <__alt_data_end+0xf402f1b8>
   2fbb8:	80c00007 	ldb	r3,0(r16)
   2fbbc:	003c0006 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2fbc0:	a080100c 	andi	r2,r20,64
   2fbc4:	d8001d85 	stb	zero,118(sp)
   2fbc8:	da802217 	ldw	r10,136(sp)
   2fbcc:	1000201e 	bne	r2,zero,2fc50 <___vfiprintf_internal_r+0x120c>
   2fbd0:	50800104 	addi	r2,r10,4
   2fbd4:	54800017 	ldw	r18,0(r10)
   2fbd8:	0027883a 	mov	r19,zero
   2fbdc:	483def0e 	bge	r9,zero,2f39c <__alt_data_end+0xf402f39c>
   2fbe0:	94c6b03a 	or	r3,r18,r19
   2fbe4:	d8802215 	stw	r2,136(sp)
   2fbe8:	183d4e1e 	bne	r3,zero,2f124 <__alt_data_end+0xf402f124>
   2fbec:	0039883a 	mov	fp,zero
   2fbf0:	0005883a 	mov	r2,zero
   2fbf4:	003e0606 	br	2f410 <__alt_data_end+0xf402f410>
   2fbf8:	d9402117 	ldw	r5,132(sp)
   2fbfc:	d9002017 	ldw	r4,128(sp)
   2fc00:	d9801a04 	addi	r6,sp,104
   2fc04:	da402c15 	stw	r9,176(sp)
   2fc08:	db802a15 	stw	r14,168(sp)
   2fc0c:	002e9300 	call	2e930 <__sprint_r.part.0>
   2fc10:	da402c17 	ldw	r9,176(sp)
   2fc14:	db802a17 	ldw	r14,168(sp)
   2fc18:	103ede1e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2fc1c:	d9401b17 	ldw	r5,108(sp)
   2fc20:	d8801c17 	ldw	r2,112(sp)
   2fc24:	d811883a 	mov	r8,sp
   2fc28:	29000044 	addi	r4,r5,1
   2fc2c:	003e7406 	br	2f600 <__alt_data_end+0xf402f600>
   2fc30:	00bfffc4 	movi	r2,-1
   2fc34:	003c5806 	br	2ed98 <__alt_data_end+0xf402ed98>
   2fc38:	d811883a 	mov	r8,sp
   2fc3c:	003ee806 	br	2f7e0 <__alt_data_end+0xf402f7e0>
   2fc40:	000b883a 	mov	r5,zero
   2fc44:	01000044 	movi	r4,1
   2fc48:	d811883a 	mov	r8,sp
   2fc4c:	003e7c06 	br	2f640 <__alt_data_end+0xf402f640>
   2fc50:	50800104 	addi	r2,r10,4
   2fc54:	5480000b 	ldhu	r18,0(r10)
   2fc58:	0027883a 	mov	r19,zero
   2fc5c:	483dcf0e 	bge	r9,zero,2f39c <__alt_data_end+0xf402f39c>
   2fc60:	003fdf06 	br	2fbe0 <__alt_data_end+0xf402fbe0>
   2fc64:	54800017 	ldw	r18,0(r10)
   2fc68:	52800104 	addi	r10,r10,4
   2fc6c:	0027883a 	mov	r19,zero
   2fc70:	da802215 	stw	r10,136(sp)
   2fc74:	003d5006 	br	2f1b8 <__alt_data_end+0xf402f1b8>
   2fc78:	50800104 	addi	r2,r10,4
   2fc7c:	5480000b 	ldhu	r18,0(r10)
   2fc80:	0027883a 	mov	r19,zero
   2fc84:	483f7d0e 	bge	r9,zero,2fa7c <__alt_data_end+0xf402fa7c>
   2fc88:	003ddc06 	br	2f3fc <__alt_data_end+0xf402f3fc>
   2fc8c:	d8c02215 	stw	r3,136(sp)
   2fc90:	0039883a 	mov	fp,zero
   2fc94:	003ddb06 	br	2f404 <__alt_data_end+0xf402f404>
   2fc98:	028000f4 	movhi	r10,3
   2fc9c:	52977f04 	addi	r10,r10,24060
   2fca0:	da802415 	stw	r10,144(sp)
   2fca4:	003e8306 	br	2f6b4 <__alt_data_end+0xf402f6b4>
   2fca8:	d8801c17 	ldw	r2,112(sp)
   2fcac:	dd002117 	ldw	r20,132(sp)
   2fcb0:	103eb926 	beq	r2,zero,2f798 <__alt_data_end+0xf402f798>
   2fcb4:	d9002017 	ldw	r4,128(sp)
   2fcb8:	d9801a04 	addi	r6,sp,104
   2fcbc:	a00b883a 	mov	r5,r20
   2fcc0:	002e9300 	call	2e930 <__sprint_r.part.0>
   2fcc4:	003eb406 	br	2f798 <__alt_data_end+0xf402f798>
   2fcc8:	80c00043 	ldbu	r3,1(r16)
   2fccc:	a5000814 	ori	r20,r20,32
   2fcd0:	84000044 	addi	r16,r16,1
   2fcd4:	18c03fcc 	andi	r3,r3,255
   2fcd8:	18c0201c 	xori	r3,r3,128
   2fcdc:	18ffe004 	addi	r3,r3,-128
   2fce0:	003bb706 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2fce4:	a809883a 	mov	r4,r21
   2fce8:	d8c02a15 	stw	r3,168(sp)
   2fcec:	da002b15 	stw	r8,172(sp)
   2fcf0:	002740c0 	call	2740c <strlen>
   2fcf4:	d8c02a17 	ldw	r3,168(sp)
   2fcf8:	1027883a 	mov	r19,r2
   2fcfc:	df001d83 	ldbu	fp,118(sp)
   2fd00:	d8c02215 	stw	r3,136(sp)
   2fd04:	0013883a 	mov	r9,zero
   2fd08:	da002b17 	ldw	r8,172(sp)
   2fd0c:	003c4d06 	br	2ee44 <__alt_data_end+0xf402ee44>
   2fd10:	d9402117 	ldw	r5,132(sp)
   2fd14:	d9002017 	ldw	r4,128(sp)
   2fd18:	d9801a04 	addi	r6,sp,104
   2fd1c:	da402c15 	stw	r9,176(sp)
   2fd20:	002e9300 	call	2e930 <__sprint_r.part.0>
   2fd24:	da402c17 	ldw	r9,176(sp)
   2fd28:	103e9a1e 	bne	r2,zero,2f794 <__alt_data_end+0xf402f794>
   2fd2c:	d9401b17 	ldw	r5,108(sp)
   2fd30:	d8801c17 	ldw	r2,112(sp)
   2fd34:	d811883a 	mov	r8,sp
   2fd38:	29000044 	addi	r4,r5,1
   2fd3c:	003e4206 	br	2f648 <__alt_data_end+0xf402f648>
   2fd40:	d9401b17 	ldw	r5,108(sp)
   2fd44:	010000f4 	movhi	r4,3
   2fd48:	21178304 	addi	r4,r4,24076
   2fd4c:	d9002415 	stw	r4,144(sp)
   2fd50:	29400044 	addi	r5,r5,1
   2fd54:	003c6d06 	br	2ef0c <__alt_data_end+0xf402ef0c>
   2fd58:	0039883a 	mov	fp,zero
   2fd5c:	00800084 	movi	r2,2
   2fd60:	10803fcc 	andi	r2,r2,255
   2fd64:	01000044 	movi	r4,1
   2fd68:	11001e26 	beq	r2,r4,2fde4 <___vfiprintf_internal_r+0x13a0>
   2fd6c:	01000084 	movi	r4,2
   2fd70:	11001e1e 	bne	r2,r4,2fdec <___vfiprintf_internal_r+0x13a8>
   2fd74:	1829883a 	mov	r20,r3
   2fd78:	003eea06 	br	2f924 <__alt_data_end+0xf402f924>
   2fd7c:	a007883a 	mov	r3,r20
   2fd80:	00800044 	movi	r2,1
   2fd84:	003ff606 	br	2fd60 <__alt_data_end+0xf402fd60>
   2fd88:	00800184 	movi	r2,6
   2fd8c:	1240012e 	bgeu	r2,r9,2fd94 <___vfiprintf_internal_r+0x1350>
   2fd90:	1013883a 	mov	r9,r2
   2fd94:	4827883a 	mov	r19,r9
   2fd98:	4825883a 	mov	r18,r9
   2fd9c:	48001516 	blt	r9,zero,2fdf4 <___vfiprintf_internal_r+0x13b0>
   2fda0:	054000f4 	movhi	r21,3
   2fda4:	d8c02215 	stw	r3,136(sp)
   2fda8:	ad572404 	addi	r21,r21,23696
   2fdac:	003d1406 	br	2f200 <__alt_data_end+0xf402f200>
   2fdb0:	028000f4 	movhi	r10,3
   2fdb4:	52977f04 	addi	r10,r10,24060
   2fdb8:	da802415 	stw	r10,144(sp)
   2fdbc:	200d883a 	mov	r6,r4
   2fdc0:	003c9106 	br	2f008 <__alt_data_end+0xf402f008>
   2fdc4:	5021883a 	mov	r16,r10
   2fdc8:	0013883a 	mov	r9,zero
   2fdcc:	003b7d06 	br	2ebc4 <__alt_data_end+0xf402ebc4>
   2fdd0:	4827883a 	mov	r19,r9
   2fdd4:	df001d83 	ldbu	fp,118(sp)
   2fdd8:	d8c02215 	stw	r3,136(sp)
   2fddc:	0013883a 	mov	r9,zero
   2fde0:	003c1806 	br	2ee44 <__alt_data_end+0xf402ee44>
   2fde4:	1829883a 	mov	r20,r3
   2fde8:	003d1806 	br	2f24c <__alt_data_end+0xf402f24c>
   2fdec:	1829883a 	mov	r20,r3
   2fdf0:	003ccd06 	br	2f128 <__alt_data_end+0xf402f128>
   2fdf4:	0025883a 	mov	r18,zero
   2fdf8:	003fe906 	br	2fda0 <__alt_data_end+0xf402fda0>
   2fdfc:	d8802217 	ldw	r2,136(sp)
   2fe00:	80c00043 	ldbu	r3,1(r16)
   2fe04:	5021883a 	mov	r16,r10
   2fe08:	12400017 	ldw	r9,0(r2)
   2fe0c:	10800104 	addi	r2,r2,4
   2fe10:	d8802215 	stw	r2,136(sp)
   2fe14:	483faf0e 	bge	r9,zero,2fcd4 <__alt_data_end+0xf402fcd4>
   2fe18:	18c03fcc 	andi	r3,r3,255
   2fe1c:	18c0201c 	xori	r3,r3,128
   2fe20:	027fffc4 	movi	r9,-1
   2fe24:	18ffe004 	addi	r3,r3,-128
   2fe28:	003b6506 	br	2ebc0 <__alt_data_end+0xf402ebc0>
   2fe2c:	d9c01d85 	stb	r7,118(sp)
   2fe30:	003ca006 	br	2f0b4 <__alt_data_end+0xf402f0b4>
   2fe34:	d9c01d85 	stb	r7,118(sp)
   2fe38:	003cad06 	br	2f0f0 <__alt_data_end+0xf402f0f0>
   2fe3c:	d9c01d85 	stb	r7,118(sp)
   2fe40:	003d7d06 	br	2f438 <__alt_data_end+0xf402f438>
   2fe44:	d9c01d85 	stb	r7,118(sp)
   2fe48:	003d5f06 	br	2f3c8 <__alt_data_end+0xf402f3c8>
   2fe4c:	a080004c 	andi	r2,r20,1
   2fe50:	0039883a 	mov	fp,zero
   2fe54:	10000526 	beq	r2,zero,2fe6c <___vfiprintf_internal_r+0x1428>
   2fe58:	00800c04 	movi	r2,48
   2fe5c:	d88019c5 	stb	r2,103(sp)
   2fe60:	dcc02717 	ldw	r19,156(sp)
   2fe64:	dd4019c4 	addi	r21,sp,103
   2fe68:	003bf606 	br	2ee44 <__alt_data_end+0xf402ee44>
   2fe6c:	0027883a 	mov	r19,zero
   2fe70:	dd401a04 	addi	r21,sp,104
   2fe74:	003bf306 	br	2ee44 <__alt_data_end+0xf402ee44>
   2fe78:	d9c01d85 	stb	r7,118(sp)
   2fe7c:	003dc806 	br	2f5a0 <__alt_data_end+0xf402f5a0>
   2fe80:	d9c01d85 	stb	r7,118(sp)
   2fe84:	003d3a06 	br	2f370 <__alt_data_end+0xf402f370>
   2fe88:	d9c01d85 	stb	r7,118(sp)
   2fe8c:	003d2a06 	br	2f338 <__alt_data_end+0xf402f338>
   2fe90:	d9c01d85 	stb	r7,118(sp)
   2fe94:	003cde06 	br	2f210 <__alt_data_end+0xf402f210>
   2fe98:	d9c01d85 	stb	r7,118(sp)
   2fe9c:	003cbc06 	br	2f190 <__alt_data_end+0xf402f190>

0002fea0 <__vfiprintf_internal>:
   2fea0:	008000f4 	movhi	r2,3
   2fea4:	109ea004 	addi	r2,r2,31360
   2fea8:	300f883a 	mov	r7,r6
   2feac:	280d883a 	mov	r6,r5
   2feb0:	200b883a 	mov	r5,r4
   2feb4:	11000017 	ldw	r4,0(r2)
   2feb8:	002ea441 	jmpi	2ea44 <___vfiprintf_internal_r>

0002febc <__sbprintf>:
   2febc:	2880030b 	ldhu	r2,12(r5)
   2fec0:	2ac01917 	ldw	r11,100(r5)
   2fec4:	2a80038b 	ldhu	r10,14(r5)
   2fec8:	2a400717 	ldw	r9,28(r5)
   2fecc:	2a000917 	ldw	r8,36(r5)
   2fed0:	defee204 	addi	sp,sp,-1144
   2fed4:	00c10004 	movi	r3,1024
   2fed8:	dc011a15 	stw	r16,1128(sp)
   2fedc:	10bfff4c 	andi	r2,r2,65533
   2fee0:	2821883a 	mov	r16,r5
   2fee4:	d8cb883a 	add	r5,sp,r3
   2fee8:	dc811c15 	stw	r18,1136(sp)
   2feec:	dc411b15 	stw	r17,1132(sp)
   2fef0:	dfc11d15 	stw	ra,1140(sp)
   2fef4:	2025883a 	mov	r18,r4
   2fef8:	d881030d 	sth	r2,1036(sp)
   2fefc:	dac11915 	stw	r11,1124(sp)
   2ff00:	da81038d 	sth	r10,1038(sp)
   2ff04:	da410715 	stw	r9,1052(sp)
   2ff08:	da010915 	stw	r8,1060(sp)
   2ff0c:	dec10015 	stw	sp,1024(sp)
   2ff10:	dec10415 	stw	sp,1040(sp)
   2ff14:	d8c10215 	stw	r3,1032(sp)
   2ff18:	d8c10515 	stw	r3,1044(sp)
   2ff1c:	d8010615 	stw	zero,1048(sp)
   2ff20:	002ea440 	call	2ea44 <___vfiprintf_internal_r>
   2ff24:	1023883a 	mov	r17,r2
   2ff28:	10000416 	blt	r2,zero,2ff3c <__sbprintf+0x80>
   2ff2c:	d9410004 	addi	r5,sp,1024
   2ff30:	9009883a 	mov	r4,r18
   2ff34:	002b36c0 	call	2b36c <_fflush_r>
   2ff38:	10000d1e 	bne	r2,zero,2ff70 <__sbprintf+0xb4>
   2ff3c:	d881030b 	ldhu	r2,1036(sp)
   2ff40:	1080100c 	andi	r2,r2,64
   2ff44:	10000326 	beq	r2,zero,2ff54 <__sbprintf+0x98>
   2ff48:	8080030b 	ldhu	r2,12(r16)
   2ff4c:	10801014 	ori	r2,r2,64
   2ff50:	8080030d 	sth	r2,12(r16)
   2ff54:	8805883a 	mov	r2,r17
   2ff58:	dfc11d17 	ldw	ra,1140(sp)
   2ff5c:	dc811c17 	ldw	r18,1136(sp)
   2ff60:	dc411b17 	ldw	r17,1132(sp)
   2ff64:	dc011a17 	ldw	r16,1128(sp)
   2ff68:	dec11e04 	addi	sp,sp,1144
   2ff6c:	f800283a 	ret
   2ff70:	047fffc4 	movi	r17,-1
   2ff74:	003ff106 	br	2ff3c <__alt_data_end+0xf402ff3c>

0002ff78 <_write_r>:
   2ff78:	defffd04 	addi	sp,sp,-12
   2ff7c:	2805883a 	mov	r2,r5
   2ff80:	dc000015 	stw	r16,0(sp)
   2ff84:	04000134 	movhi	r16,4
   2ff88:	dc400115 	stw	r17,4(sp)
   2ff8c:	300b883a 	mov	r5,r6
   2ff90:	8425bc04 	addi	r16,r16,-26896
   2ff94:	2023883a 	mov	r17,r4
   2ff98:	380d883a 	mov	r6,r7
   2ff9c:	1009883a 	mov	r4,r2
   2ffa0:	dfc00215 	stw	ra,8(sp)
   2ffa4:	80000015 	stw	zero,0(r16)
   2ffa8:	0031c800 	call	31c80 <write>
   2ffac:	00ffffc4 	movi	r3,-1
   2ffb0:	10c00526 	beq	r2,r3,2ffc8 <_write_r+0x50>
   2ffb4:	dfc00217 	ldw	ra,8(sp)
   2ffb8:	dc400117 	ldw	r17,4(sp)
   2ffbc:	dc000017 	ldw	r16,0(sp)
   2ffc0:	dec00304 	addi	sp,sp,12
   2ffc4:	f800283a 	ret
   2ffc8:	80c00017 	ldw	r3,0(r16)
   2ffcc:	183ff926 	beq	r3,zero,2ffb4 <__alt_data_end+0xf402ffb4>
   2ffd0:	88c00015 	stw	r3,0(r17)
   2ffd4:	003ff706 	br	2ffb4 <__alt_data_end+0xf402ffb4>

0002ffd8 <_close_r>:
   2ffd8:	defffd04 	addi	sp,sp,-12
   2ffdc:	dc000015 	stw	r16,0(sp)
   2ffe0:	04000134 	movhi	r16,4
   2ffe4:	dc400115 	stw	r17,4(sp)
   2ffe8:	8425bc04 	addi	r16,r16,-26896
   2ffec:	2023883a 	mov	r17,r4
   2fff0:	2809883a 	mov	r4,r5
   2fff4:	dfc00215 	stw	ra,8(sp)
   2fff8:	80000015 	stw	zero,0(r16)
   2fffc:	00314400 	call	31440 <close>
   30000:	00ffffc4 	movi	r3,-1
   30004:	10c00526 	beq	r2,r3,3001c <_close_r+0x44>
   30008:	dfc00217 	ldw	ra,8(sp)
   3000c:	dc400117 	ldw	r17,4(sp)
   30010:	dc000017 	ldw	r16,0(sp)
   30014:	dec00304 	addi	sp,sp,12
   30018:	f800283a 	ret
   3001c:	80c00017 	ldw	r3,0(r16)
   30020:	183ff926 	beq	r3,zero,30008 <__alt_data_end+0xf4030008>
   30024:	88c00015 	stw	r3,0(r17)
   30028:	003ff706 	br	30008 <__alt_data_end+0xf4030008>

0003002c <_calloc_r>:
   3002c:	298b383a 	mul	r5,r5,r6
   30030:	defffe04 	addi	sp,sp,-8
   30034:	dfc00115 	stw	ra,4(sp)
   30038:	dc000015 	stw	r16,0(sp)
   3003c:	002c4a80 	call	2c4a8 <_malloc_r>
   30040:	10002926 	beq	r2,zero,300e8 <_calloc_r+0xbc>
   30044:	11bfff17 	ldw	r6,-4(r2)
   30048:	1021883a 	mov	r16,r2
   3004c:	00bfff04 	movi	r2,-4
   30050:	308c703a 	and	r6,r6,r2
   30054:	00c00904 	movi	r3,36
   30058:	308d883a 	add	r6,r6,r2
   3005c:	19801636 	bltu	r3,r6,300b8 <_calloc_r+0x8c>
   30060:	008004c4 	movi	r2,19
   30064:	11800b2e 	bgeu	r2,r6,30094 <_calloc_r+0x68>
   30068:	80000015 	stw	zero,0(r16)
   3006c:	80000115 	stw	zero,4(r16)
   30070:	008006c4 	movi	r2,27
   30074:	11801a2e 	bgeu	r2,r6,300e0 <_calloc_r+0xb4>
   30078:	80000215 	stw	zero,8(r16)
   3007c:	80000315 	stw	zero,12(r16)
   30080:	30c0151e 	bne	r6,r3,300d8 <_calloc_r+0xac>
   30084:	80000415 	stw	zero,16(r16)
   30088:	80800604 	addi	r2,r16,24
   3008c:	80000515 	stw	zero,20(r16)
   30090:	00000106 	br	30098 <_calloc_r+0x6c>
   30094:	8005883a 	mov	r2,r16
   30098:	10000015 	stw	zero,0(r2)
   3009c:	10000115 	stw	zero,4(r2)
   300a0:	10000215 	stw	zero,8(r2)
   300a4:	8005883a 	mov	r2,r16
   300a8:	dfc00117 	ldw	ra,4(sp)
   300ac:	dc000017 	ldw	r16,0(sp)
   300b0:	dec00204 	addi	sp,sp,8
   300b4:	f800283a 	ret
   300b8:	000b883a 	mov	r5,zero
   300bc:	8009883a 	mov	r4,r16
   300c0:	002d03c0 	call	2d03c <memset>
   300c4:	8005883a 	mov	r2,r16
   300c8:	dfc00117 	ldw	ra,4(sp)
   300cc:	dc000017 	ldw	r16,0(sp)
   300d0:	dec00204 	addi	sp,sp,8
   300d4:	f800283a 	ret
   300d8:	80800404 	addi	r2,r16,16
   300dc:	003fee06 	br	30098 <__alt_data_end+0xf4030098>
   300e0:	80800204 	addi	r2,r16,8
   300e4:	003fec06 	br	30098 <__alt_data_end+0xf4030098>
   300e8:	0005883a 	mov	r2,zero
   300ec:	003fee06 	br	300a8 <__alt_data_end+0xf40300a8>

000300f0 <_fclose_r>:
   300f0:	28003926 	beq	r5,zero,301d8 <_fclose_r+0xe8>
   300f4:	defffc04 	addi	sp,sp,-16
   300f8:	dc400115 	stw	r17,4(sp)
   300fc:	dc000015 	stw	r16,0(sp)
   30100:	dfc00315 	stw	ra,12(sp)
   30104:	dc800215 	stw	r18,8(sp)
   30108:	2023883a 	mov	r17,r4
   3010c:	2821883a 	mov	r16,r5
   30110:	20000226 	beq	r4,zero,3011c <_fclose_r+0x2c>
   30114:	20800e17 	ldw	r2,56(r4)
   30118:	10002726 	beq	r2,zero,301b8 <_fclose_r+0xc8>
   3011c:	8080030f 	ldh	r2,12(r16)
   30120:	1000071e 	bne	r2,zero,30140 <_fclose_r+0x50>
   30124:	0005883a 	mov	r2,zero
   30128:	dfc00317 	ldw	ra,12(sp)
   3012c:	dc800217 	ldw	r18,8(sp)
   30130:	dc400117 	ldw	r17,4(sp)
   30134:	dc000017 	ldw	r16,0(sp)
   30138:	dec00404 	addi	sp,sp,16
   3013c:	f800283a 	ret
   30140:	800b883a 	mov	r5,r16
   30144:	8809883a 	mov	r4,r17
   30148:	002b1500 	call	2b150 <__sflush_r>
   3014c:	1025883a 	mov	r18,r2
   30150:	80800b17 	ldw	r2,44(r16)
   30154:	10000426 	beq	r2,zero,30168 <_fclose_r+0x78>
   30158:	81400717 	ldw	r5,28(r16)
   3015c:	8809883a 	mov	r4,r17
   30160:	103ee83a 	callr	r2
   30164:	10001616 	blt	r2,zero,301c0 <_fclose_r+0xd0>
   30168:	8080030b 	ldhu	r2,12(r16)
   3016c:	1080200c 	andi	r2,r2,128
   30170:	1000151e 	bne	r2,zero,301c8 <_fclose_r+0xd8>
   30174:	81400c17 	ldw	r5,48(r16)
   30178:	28000526 	beq	r5,zero,30190 <_fclose_r+0xa0>
   3017c:	80801004 	addi	r2,r16,64
   30180:	28800226 	beq	r5,r2,3018c <_fclose_r+0x9c>
   30184:	8809883a 	mov	r4,r17
   30188:	002b8bc0 	call	2b8bc <_free_r>
   3018c:	80000c15 	stw	zero,48(r16)
   30190:	81401117 	ldw	r5,68(r16)
   30194:	28000326 	beq	r5,zero,301a4 <_fclose_r+0xb4>
   30198:	8809883a 	mov	r4,r17
   3019c:	002b8bc0 	call	2b8bc <_free_r>
   301a0:	80001115 	stw	zero,68(r16)
   301a4:	002b7580 	call	2b758 <__sfp_lock_acquire>
   301a8:	8000030d 	sth	zero,12(r16)
   301ac:	002b75c0 	call	2b75c <__sfp_lock_release>
   301b0:	9005883a 	mov	r2,r18
   301b4:	003fdc06 	br	30128 <__alt_data_end+0xf4030128>
   301b8:	002b7480 	call	2b748 <__sinit>
   301bc:	003fd706 	br	3011c <__alt_data_end+0xf403011c>
   301c0:	04bfffc4 	movi	r18,-1
   301c4:	003fe806 	br	30168 <__alt_data_end+0xf4030168>
   301c8:	81400417 	ldw	r5,16(r16)
   301cc:	8809883a 	mov	r4,r17
   301d0:	002b8bc0 	call	2b8bc <_free_r>
   301d4:	003fe706 	br	30174 <__alt_data_end+0xf4030174>
   301d8:	0005883a 	mov	r2,zero
   301dc:	f800283a 	ret

000301e0 <fclose>:
   301e0:	008000f4 	movhi	r2,3
   301e4:	109ea004 	addi	r2,r2,31360
   301e8:	200b883a 	mov	r5,r4
   301ec:	11000017 	ldw	r4,0(r2)
   301f0:	00300f01 	jmpi	300f0 <_fclose_r>

000301f4 <__fputwc>:
   301f4:	defff804 	addi	sp,sp,-32
   301f8:	dcc00415 	stw	r19,16(sp)
   301fc:	dc800315 	stw	r18,12(sp)
   30200:	dc000115 	stw	r16,4(sp)
   30204:	dfc00715 	stw	ra,28(sp)
   30208:	dd400615 	stw	r21,24(sp)
   3020c:	dd000515 	stw	r20,20(sp)
   30210:	dc400215 	stw	r17,8(sp)
   30214:	2027883a 	mov	r19,r4
   30218:	2825883a 	mov	r18,r5
   3021c:	3021883a 	mov	r16,r6
   30220:	002c2980 	call	2c298 <__locale_mb_cur_max>
   30224:	00c00044 	movi	r3,1
   30228:	10c03e26 	beq	r2,r3,30324 <__fputwc+0x130>
   3022c:	81c01704 	addi	r7,r16,92
   30230:	900d883a 	mov	r6,r18
   30234:	d80b883a 	mov	r5,sp
   30238:	9809883a 	mov	r4,r19
   3023c:	00306c40 	call	306c4 <_wcrtomb_r>
   30240:	1029883a 	mov	r20,r2
   30244:	00bfffc4 	movi	r2,-1
   30248:	a0802026 	beq	r20,r2,302cc <__fputwc+0xd8>
   3024c:	d9400003 	ldbu	r5,0(sp)
   30250:	a0001c26 	beq	r20,zero,302c4 <__fputwc+0xd0>
   30254:	0023883a 	mov	r17,zero
   30258:	05400284 	movi	r21,10
   3025c:	00000906 	br	30284 <__fputwc+0x90>
   30260:	80800017 	ldw	r2,0(r16)
   30264:	11400005 	stb	r5,0(r2)
   30268:	80c00017 	ldw	r3,0(r16)
   3026c:	18c00044 	addi	r3,r3,1
   30270:	80c00015 	stw	r3,0(r16)
   30274:	8c400044 	addi	r17,r17,1
   30278:	dc45883a 	add	r2,sp,r17
   3027c:	8d00112e 	bgeu	r17,r20,302c4 <__fputwc+0xd0>
   30280:	11400003 	ldbu	r5,0(r2)
   30284:	80c00217 	ldw	r3,8(r16)
   30288:	18ffffc4 	addi	r3,r3,-1
   3028c:	80c00215 	stw	r3,8(r16)
   30290:	183ff30e 	bge	r3,zero,30260 <__alt_data_end+0xf4030260>
   30294:	80800617 	ldw	r2,24(r16)
   30298:	18801916 	blt	r3,r2,30300 <__fputwc+0x10c>
   3029c:	80800017 	ldw	r2,0(r16)
   302a0:	11400005 	stb	r5,0(r2)
   302a4:	80800017 	ldw	r2,0(r16)
   302a8:	10c00003 	ldbu	r3,0(r2)
   302ac:	10800044 	addi	r2,r2,1
   302b0:	1d402326 	beq	r3,r21,30340 <__fputwc+0x14c>
   302b4:	80800015 	stw	r2,0(r16)
   302b8:	8c400044 	addi	r17,r17,1
   302bc:	dc45883a 	add	r2,sp,r17
   302c0:	8d3fef36 	bltu	r17,r20,30280 <__alt_data_end+0xf4030280>
   302c4:	9005883a 	mov	r2,r18
   302c8:	00000406 	br	302dc <__fputwc+0xe8>
   302cc:	80c0030b 	ldhu	r3,12(r16)
   302d0:	a005883a 	mov	r2,r20
   302d4:	18c01014 	ori	r3,r3,64
   302d8:	80c0030d 	sth	r3,12(r16)
   302dc:	dfc00717 	ldw	ra,28(sp)
   302e0:	dd400617 	ldw	r21,24(sp)
   302e4:	dd000517 	ldw	r20,20(sp)
   302e8:	dcc00417 	ldw	r19,16(sp)
   302ec:	dc800317 	ldw	r18,12(sp)
   302f0:	dc400217 	ldw	r17,8(sp)
   302f4:	dc000117 	ldw	r16,4(sp)
   302f8:	dec00804 	addi	sp,sp,32
   302fc:	f800283a 	ret
   30300:	800d883a 	mov	r6,r16
   30304:	29403fcc 	andi	r5,r5,255
   30308:	9809883a 	mov	r4,r19
   3030c:	003056c0 	call	3056c <__swbuf_r>
   30310:	10bfffe0 	cmpeqi	r2,r2,-1
   30314:	10803fcc 	andi	r2,r2,255
   30318:	103fd626 	beq	r2,zero,30274 <__alt_data_end+0xf4030274>
   3031c:	00bfffc4 	movi	r2,-1
   30320:	003fee06 	br	302dc <__alt_data_end+0xf40302dc>
   30324:	90ffffc4 	addi	r3,r18,-1
   30328:	01003f84 	movi	r4,254
   3032c:	20ffbf36 	bltu	r4,r3,3022c <__alt_data_end+0xf403022c>
   30330:	900b883a 	mov	r5,r18
   30334:	dc800005 	stb	r18,0(sp)
   30338:	1029883a 	mov	r20,r2
   3033c:	003fc506 	br	30254 <__alt_data_end+0xf4030254>
   30340:	800d883a 	mov	r6,r16
   30344:	a80b883a 	mov	r5,r21
   30348:	9809883a 	mov	r4,r19
   3034c:	003056c0 	call	3056c <__swbuf_r>
   30350:	10bfffe0 	cmpeqi	r2,r2,-1
   30354:	003fef06 	br	30314 <__alt_data_end+0xf4030314>

00030358 <_fputwc_r>:
   30358:	3080030b 	ldhu	r2,12(r6)
   3035c:	10c8000c 	andi	r3,r2,8192
   30360:	1800051e 	bne	r3,zero,30378 <_fputwc_r+0x20>
   30364:	30c01917 	ldw	r3,100(r6)
   30368:	10880014 	ori	r2,r2,8192
   3036c:	3080030d 	sth	r2,12(r6)
   30370:	18880014 	ori	r2,r3,8192
   30374:	30801915 	stw	r2,100(r6)
   30378:	00301f41 	jmpi	301f4 <__fputwc>

0003037c <fputwc>:
   3037c:	008000f4 	movhi	r2,3
   30380:	defffc04 	addi	sp,sp,-16
   30384:	109ea004 	addi	r2,r2,31360
   30388:	dc000115 	stw	r16,4(sp)
   3038c:	14000017 	ldw	r16,0(r2)
   30390:	dc400215 	stw	r17,8(sp)
   30394:	dfc00315 	stw	ra,12(sp)
   30398:	2023883a 	mov	r17,r4
   3039c:	80000226 	beq	r16,zero,303a8 <fputwc+0x2c>
   303a0:	80800e17 	ldw	r2,56(r16)
   303a4:	10001026 	beq	r2,zero,303e8 <fputwc+0x6c>
   303a8:	2880030b 	ldhu	r2,12(r5)
   303ac:	10c8000c 	andi	r3,r2,8192
   303b0:	1800051e 	bne	r3,zero,303c8 <fputwc+0x4c>
   303b4:	28c01917 	ldw	r3,100(r5)
   303b8:	10880014 	ori	r2,r2,8192
   303bc:	2880030d 	sth	r2,12(r5)
   303c0:	18880014 	ori	r2,r3,8192
   303c4:	28801915 	stw	r2,100(r5)
   303c8:	280d883a 	mov	r6,r5
   303cc:	8009883a 	mov	r4,r16
   303d0:	880b883a 	mov	r5,r17
   303d4:	dfc00317 	ldw	ra,12(sp)
   303d8:	dc400217 	ldw	r17,8(sp)
   303dc:	dc000117 	ldw	r16,4(sp)
   303e0:	dec00404 	addi	sp,sp,16
   303e4:	00301f41 	jmpi	301f4 <__fputwc>
   303e8:	8009883a 	mov	r4,r16
   303ec:	d9400015 	stw	r5,0(sp)
   303f0:	002b7480 	call	2b748 <__sinit>
   303f4:	d9400017 	ldw	r5,0(sp)
   303f8:	003feb06 	br	303a8 <__alt_data_end+0xf40303a8>

000303fc <_fstat_r>:
   303fc:	defffd04 	addi	sp,sp,-12
   30400:	2805883a 	mov	r2,r5
   30404:	dc000015 	stw	r16,0(sp)
   30408:	04000134 	movhi	r16,4
   3040c:	dc400115 	stw	r17,4(sp)
   30410:	8425bc04 	addi	r16,r16,-26896
   30414:	2023883a 	mov	r17,r4
   30418:	300b883a 	mov	r5,r6
   3041c:	1009883a 	mov	r4,r2
   30420:	dfc00215 	stw	ra,8(sp)
   30424:	80000015 	stw	zero,0(r16)
   30428:	00315780 	call	31578 <fstat>
   3042c:	00ffffc4 	movi	r3,-1
   30430:	10c00526 	beq	r2,r3,30448 <_fstat_r+0x4c>
   30434:	dfc00217 	ldw	ra,8(sp)
   30438:	dc400117 	ldw	r17,4(sp)
   3043c:	dc000017 	ldw	r16,0(sp)
   30440:	dec00304 	addi	sp,sp,12
   30444:	f800283a 	ret
   30448:	80c00017 	ldw	r3,0(r16)
   3044c:	183ff926 	beq	r3,zero,30434 <__alt_data_end+0xf4030434>
   30450:	88c00015 	stw	r3,0(r17)
   30454:	003ff706 	br	30434 <__alt_data_end+0xf4030434>

00030458 <_isatty_r>:
   30458:	defffd04 	addi	sp,sp,-12
   3045c:	dc000015 	stw	r16,0(sp)
   30460:	04000134 	movhi	r16,4
   30464:	dc400115 	stw	r17,4(sp)
   30468:	8425bc04 	addi	r16,r16,-26896
   3046c:	2023883a 	mov	r17,r4
   30470:	2809883a 	mov	r4,r5
   30474:	dfc00215 	stw	ra,8(sp)
   30478:	80000015 	stw	zero,0(r16)
   3047c:	00316640 	call	31664 <isatty>
   30480:	00ffffc4 	movi	r3,-1
   30484:	10c00526 	beq	r2,r3,3049c <_isatty_r+0x44>
   30488:	dfc00217 	ldw	ra,8(sp)
   3048c:	dc400117 	ldw	r17,4(sp)
   30490:	dc000017 	ldw	r16,0(sp)
   30494:	dec00304 	addi	sp,sp,12
   30498:	f800283a 	ret
   3049c:	80c00017 	ldw	r3,0(r16)
   304a0:	183ff926 	beq	r3,zero,30488 <__alt_data_end+0xf4030488>
   304a4:	88c00015 	stw	r3,0(r17)
   304a8:	003ff706 	br	30488 <__alt_data_end+0xf4030488>

000304ac <_lseek_r>:
   304ac:	defffd04 	addi	sp,sp,-12
   304b0:	2805883a 	mov	r2,r5
   304b4:	dc000015 	stw	r16,0(sp)
   304b8:	04000134 	movhi	r16,4
   304bc:	dc400115 	stw	r17,4(sp)
   304c0:	300b883a 	mov	r5,r6
   304c4:	8425bc04 	addi	r16,r16,-26896
   304c8:	2023883a 	mov	r17,r4
   304cc:	380d883a 	mov	r6,r7
   304d0:	1009883a 	mov	r4,r2
   304d4:	dfc00215 	stw	ra,8(sp)
   304d8:	80000015 	stw	zero,0(r16)
   304dc:	00318300 	call	31830 <lseek>
   304e0:	00ffffc4 	movi	r3,-1
   304e4:	10c00526 	beq	r2,r3,304fc <_lseek_r+0x50>
   304e8:	dfc00217 	ldw	ra,8(sp)
   304ec:	dc400117 	ldw	r17,4(sp)
   304f0:	dc000017 	ldw	r16,0(sp)
   304f4:	dec00304 	addi	sp,sp,12
   304f8:	f800283a 	ret
   304fc:	80c00017 	ldw	r3,0(r16)
   30500:	183ff926 	beq	r3,zero,304e8 <__alt_data_end+0xf40304e8>
   30504:	88c00015 	stw	r3,0(r17)
   30508:	003ff706 	br	304e8 <__alt_data_end+0xf40304e8>

0003050c <_read_r>:
   3050c:	defffd04 	addi	sp,sp,-12
   30510:	2805883a 	mov	r2,r5
   30514:	dc000015 	stw	r16,0(sp)
   30518:	04000134 	movhi	r16,4
   3051c:	dc400115 	stw	r17,4(sp)
   30520:	300b883a 	mov	r5,r6
   30524:	8425bc04 	addi	r16,r16,-26896
   30528:	2023883a 	mov	r17,r4
   3052c:	380d883a 	mov	r6,r7
   30530:	1009883a 	mov	r4,r2
   30534:	dfc00215 	stw	ra,8(sp)
   30538:	80000015 	stw	zero,0(r16)
   3053c:	0031a040 	call	31a04 <read>
   30540:	00ffffc4 	movi	r3,-1
   30544:	10c00526 	beq	r2,r3,3055c <_read_r+0x50>
   30548:	dfc00217 	ldw	ra,8(sp)
   3054c:	dc400117 	ldw	r17,4(sp)
   30550:	dc000017 	ldw	r16,0(sp)
   30554:	dec00304 	addi	sp,sp,12
   30558:	f800283a 	ret
   3055c:	80c00017 	ldw	r3,0(r16)
   30560:	183ff926 	beq	r3,zero,30548 <__alt_data_end+0xf4030548>
   30564:	88c00015 	stw	r3,0(r17)
   30568:	003ff706 	br	30548 <__alt_data_end+0xf4030548>

0003056c <__swbuf_r>:
   3056c:	defffb04 	addi	sp,sp,-20
   30570:	dcc00315 	stw	r19,12(sp)
   30574:	dc800215 	stw	r18,8(sp)
   30578:	dc000015 	stw	r16,0(sp)
   3057c:	dfc00415 	stw	ra,16(sp)
   30580:	dc400115 	stw	r17,4(sp)
   30584:	2025883a 	mov	r18,r4
   30588:	2827883a 	mov	r19,r5
   3058c:	3021883a 	mov	r16,r6
   30590:	20000226 	beq	r4,zero,3059c <__swbuf_r+0x30>
   30594:	20800e17 	ldw	r2,56(r4)
   30598:	10004226 	beq	r2,zero,306a4 <__swbuf_r+0x138>
   3059c:	80800617 	ldw	r2,24(r16)
   305a0:	8100030b 	ldhu	r4,12(r16)
   305a4:	80800215 	stw	r2,8(r16)
   305a8:	2080020c 	andi	r2,r4,8
   305ac:	10003626 	beq	r2,zero,30688 <__swbuf_r+0x11c>
   305b0:	80c00417 	ldw	r3,16(r16)
   305b4:	18003426 	beq	r3,zero,30688 <__swbuf_r+0x11c>
   305b8:	2088000c 	andi	r2,r4,8192
   305bc:	9c403fcc 	andi	r17,r19,255
   305c0:	10001a26 	beq	r2,zero,3062c <__swbuf_r+0xc0>
   305c4:	80800017 	ldw	r2,0(r16)
   305c8:	81000517 	ldw	r4,20(r16)
   305cc:	10c7c83a 	sub	r3,r2,r3
   305d0:	1900200e 	bge	r3,r4,30654 <__swbuf_r+0xe8>
   305d4:	18c00044 	addi	r3,r3,1
   305d8:	81000217 	ldw	r4,8(r16)
   305dc:	11400044 	addi	r5,r2,1
   305e0:	81400015 	stw	r5,0(r16)
   305e4:	213fffc4 	addi	r4,r4,-1
   305e8:	81000215 	stw	r4,8(r16)
   305ec:	14c00005 	stb	r19,0(r2)
   305f0:	80800517 	ldw	r2,20(r16)
   305f4:	10c01e26 	beq	r2,r3,30670 <__swbuf_r+0x104>
   305f8:	8080030b 	ldhu	r2,12(r16)
   305fc:	1080004c 	andi	r2,r2,1
   30600:	10000226 	beq	r2,zero,3060c <__swbuf_r+0xa0>
   30604:	00800284 	movi	r2,10
   30608:	88801926 	beq	r17,r2,30670 <__swbuf_r+0x104>
   3060c:	8805883a 	mov	r2,r17
   30610:	dfc00417 	ldw	ra,16(sp)
   30614:	dcc00317 	ldw	r19,12(sp)
   30618:	dc800217 	ldw	r18,8(sp)
   3061c:	dc400117 	ldw	r17,4(sp)
   30620:	dc000017 	ldw	r16,0(sp)
   30624:	dec00504 	addi	sp,sp,20
   30628:	f800283a 	ret
   3062c:	81401917 	ldw	r5,100(r16)
   30630:	00b7ffc4 	movi	r2,-8193
   30634:	21080014 	ori	r4,r4,8192
   30638:	2884703a 	and	r2,r5,r2
   3063c:	80801915 	stw	r2,100(r16)
   30640:	80800017 	ldw	r2,0(r16)
   30644:	8100030d 	sth	r4,12(r16)
   30648:	81000517 	ldw	r4,20(r16)
   3064c:	10c7c83a 	sub	r3,r2,r3
   30650:	193fe016 	blt	r3,r4,305d4 <__alt_data_end+0xf40305d4>
   30654:	800b883a 	mov	r5,r16
   30658:	9009883a 	mov	r4,r18
   3065c:	002b36c0 	call	2b36c <_fflush_r>
   30660:	1000071e 	bne	r2,zero,30680 <__swbuf_r+0x114>
   30664:	80800017 	ldw	r2,0(r16)
   30668:	00c00044 	movi	r3,1
   3066c:	003fda06 	br	305d8 <__alt_data_end+0xf40305d8>
   30670:	800b883a 	mov	r5,r16
   30674:	9009883a 	mov	r4,r18
   30678:	002b36c0 	call	2b36c <_fflush_r>
   3067c:	103fe326 	beq	r2,zero,3060c <__alt_data_end+0xf403060c>
   30680:	00bfffc4 	movi	r2,-1
   30684:	003fe206 	br	30610 <__alt_data_end+0xf4030610>
   30688:	800b883a 	mov	r5,r16
   3068c:	9009883a 	mov	r4,r18
   30690:	00297740 	call	29774 <__swsetup_r>
   30694:	103ffa1e 	bne	r2,zero,30680 <__alt_data_end+0xf4030680>
   30698:	8100030b 	ldhu	r4,12(r16)
   3069c:	80c00417 	ldw	r3,16(r16)
   306a0:	003fc506 	br	305b8 <__alt_data_end+0xf40305b8>
   306a4:	002b7480 	call	2b748 <__sinit>
   306a8:	003fbc06 	br	3059c <__alt_data_end+0xf403059c>

000306ac <__swbuf>:
   306ac:	008000f4 	movhi	r2,3
   306b0:	109ea004 	addi	r2,r2,31360
   306b4:	280d883a 	mov	r6,r5
   306b8:	200b883a 	mov	r5,r4
   306bc:	11000017 	ldw	r4,0(r2)
   306c0:	003056c1 	jmpi	3056c <__swbuf_r>

000306c4 <_wcrtomb_r>:
   306c4:	defff604 	addi	sp,sp,-40
   306c8:	008000f4 	movhi	r2,3
   306cc:	dc800815 	stw	r18,32(sp)
   306d0:	dc400715 	stw	r17,28(sp)
   306d4:	dc000615 	stw	r16,24(sp)
   306d8:	109ea404 	addi	r2,r2,31376
   306dc:	dfc00915 	stw	ra,36(sp)
   306e0:	2021883a 	mov	r16,r4
   306e4:	3823883a 	mov	r17,r7
   306e8:	14800017 	ldw	r18,0(r2)
   306ec:	28001426 	beq	r5,zero,30740 <_wcrtomb_r+0x7c>
   306f0:	d9400415 	stw	r5,16(sp)
   306f4:	d9800515 	stw	r6,20(sp)
   306f8:	002c28c0 	call	2c28c <__locale_charset>
   306fc:	d9800517 	ldw	r6,20(sp)
   30700:	d9400417 	ldw	r5,16(sp)
   30704:	100f883a 	mov	r7,r2
   30708:	dc400015 	stw	r17,0(sp)
   3070c:	8009883a 	mov	r4,r16
   30710:	903ee83a 	callr	r18
   30714:	00ffffc4 	movi	r3,-1
   30718:	10c0031e 	bne	r2,r3,30728 <_wcrtomb_r+0x64>
   3071c:	88000015 	stw	zero,0(r17)
   30720:	00c02284 	movi	r3,138
   30724:	80c00015 	stw	r3,0(r16)
   30728:	dfc00917 	ldw	ra,36(sp)
   3072c:	dc800817 	ldw	r18,32(sp)
   30730:	dc400717 	ldw	r17,28(sp)
   30734:	dc000617 	ldw	r16,24(sp)
   30738:	dec00a04 	addi	sp,sp,40
   3073c:	f800283a 	ret
   30740:	002c28c0 	call	2c28c <__locale_charset>
   30744:	100f883a 	mov	r7,r2
   30748:	dc400015 	stw	r17,0(sp)
   3074c:	000d883a 	mov	r6,zero
   30750:	d9400104 	addi	r5,sp,4
   30754:	8009883a 	mov	r4,r16
   30758:	903ee83a 	callr	r18
   3075c:	003fed06 	br	30714 <__alt_data_end+0xf4030714>

00030760 <wcrtomb>:
   30760:	defff604 	addi	sp,sp,-40
   30764:	008000f4 	movhi	r2,3
   30768:	dc800615 	stw	r18,24(sp)
   3076c:	dc400515 	stw	r17,20(sp)
   30770:	109ea004 	addi	r2,r2,31360
   30774:	dfc00915 	stw	ra,36(sp)
   30778:	dd000815 	stw	r20,32(sp)
   3077c:	dcc00715 	stw	r19,28(sp)
   30780:	dc000415 	stw	r16,16(sp)
   30784:	3025883a 	mov	r18,r6
   30788:	14400017 	ldw	r17,0(r2)
   3078c:	20001926 	beq	r4,zero,307f4 <wcrtomb+0x94>
   30790:	008000f4 	movhi	r2,3
   30794:	109ea404 	addi	r2,r2,31376
   30798:	15000017 	ldw	r20,0(r2)
   3079c:	2021883a 	mov	r16,r4
   307a0:	2827883a 	mov	r19,r5
   307a4:	002c28c0 	call	2c28c <__locale_charset>
   307a8:	100f883a 	mov	r7,r2
   307ac:	dc800015 	stw	r18,0(sp)
   307b0:	980d883a 	mov	r6,r19
   307b4:	800b883a 	mov	r5,r16
   307b8:	8809883a 	mov	r4,r17
   307bc:	a03ee83a 	callr	r20
   307c0:	00ffffc4 	movi	r3,-1
   307c4:	10c0031e 	bne	r2,r3,307d4 <wcrtomb+0x74>
   307c8:	90000015 	stw	zero,0(r18)
   307cc:	00c02284 	movi	r3,138
   307d0:	88c00015 	stw	r3,0(r17)
   307d4:	dfc00917 	ldw	ra,36(sp)
   307d8:	dd000817 	ldw	r20,32(sp)
   307dc:	dcc00717 	ldw	r19,28(sp)
   307e0:	dc800617 	ldw	r18,24(sp)
   307e4:	dc400517 	ldw	r17,20(sp)
   307e8:	dc000417 	ldw	r16,16(sp)
   307ec:	dec00a04 	addi	sp,sp,40
   307f0:	f800283a 	ret
   307f4:	008000f4 	movhi	r2,3
   307f8:	109ea404 	addi	r2,r2,31376
   307fc:	14000017 	ldw	r16,0(r2)
   30800:	002c28c0 	call	2c28c <__locale_charset>
   30804:	100f883a 	mov	r7,r2
   30808:	dc800015 	stw	r18,0(sp)
   3080c:	000d883a 	mov	r6,zero
   30810:	d9400104 	addi	r5,sp,4
   30814:	8809883a 	mov	r4,r17
   30818:	803ee83a 	callr	r16
   3081c:	003fe806 	br	307c0 <__alt_data_end+0xf40307c0>

00030820 <__ascii_wctomb>:
   30820:	28000526 	beq	r5,zero,30838 <__ascii_wctomb+0x18>
   30824:	00803fc4 	movi	r2,255
   30828:	11800536 	bltu	r2,r6,30840 <__ascii_wctomb+0x20>
   3082c:	29800005 	stb	r6,0(r5)
   30830:	00800044 	movi	r2,1
   30834:	f800283a 	ret
   30838:	0005883a 	mov	r2,zero
   3083c:	f800283a 	ret
   30840:	00802284 	movi	r2,138
   30844:	20800015 	stw	r2,0(r4)
   30848:	00bfffc4 	movi	r2,-1
   3084c:	f800283a 	ret

00030850 <_wctomb_r>:
   30850:	008000f4 	movhi	r2,3
   30854:	defff904 	addi	sp,sp,-28
   30858:	109ea404 	addi	r2,r2,31376
   3085c:	dfc00615 	stw	ra,24(sp)
   30860:	dc400515 	stw	r17,20(sp)
   30864:	dc000415 	stw	r16,16(sp)
   30868:	3823883a 	mov	r17,r7
   3086c:	14000017 	ldw	r16,0(r2)
   30870:	d9000115 	stw	r4,4(sp)
   30874:	d9400215 	stw	r5,8(sp)
   30878:	d9800315 	stw	r6,12(sp)
   3087c:	002c28c0 	call	2c28c <__locale_charset>
   30880:	d9800317 	ldw	r6,12(sp)
   30884:	d9400217 	ldw	r5,8(sp)
   30888:	d9000117 	ldw	r4,4(sp)
   3088c:	100f883a 	mov	r7,r2
   30890:	dc400015 	stw	r17,0(sp)
   30894:	803ee83a 	callr	r16
   30898:	dfc00617 	ldw	ra,24(sp)
   3089c:	dc400517 	ldw	r17,20(sp)
   308a0:	dc000417 	ldw	r16,16(sp)
   308a4:	dec00704 	addi	sp,sp,28
   308a8:	f800283a 	ret

000308ac <__udivdi3>:
   308ac:	defff504 	addi	sp,sp,-44
   308b0:	dcc00415 	stw	r19,16(sp)
   308b4:	dc000115 	stw	r16,4(sp)
   308b8:	dfc00a15 	stw	ra,40(sp)
   308bc:	df000915 	stw	fp,36(sp)
   308c0:	ddc00815 	stw	r23,32(sp)
   308c4:	dd800715 	stw	r22,28(sp)
   308c8:	dd400615 	stw	r21,24(sp)
   308cc:	dd000515 	stw	r20,20(sp)
   308d0:	dc800315 	stw	r18,12(sp)
   308d4:	dc400215 	stw	r17,8(sp)
   308d8:	2027883a 	mov	r19,r4
   308dc:	2821883a 	mov	r16,r5
   308e0:	3800411e 	bne	r7,zero,309e8 <__udivdi3+0x13c>
   308e4:	3023883a 	mov	r17,r6
   308e8:	2025883a 	mov	r18,r4
   308ec:	2980522e 	bgeu	r5,r6,30a38 <__udivdi3+0x18c>
   308f0:	00bfffd4 	movui	r2,65535
   308f4:	282d883a 	mov	r22,r5
   308f8:	1180a836 	bltu	r2,r6,30b9c <__udivdi3+0x2f0>
   308fc:	00803fc4 	movi	r2,255
   30900:	1185803a 	cmpltu	r2,r2,r6
   30904:	100490fa 	slli	r2,r2,3
   30908:	3086d83a 	srl	r3,r6,r2
   3090c:	010000f4 	movhi	r4,3
   30910:	2116d404 	addi	r4,r4,23376
   30914:	20c7883a 	add	r3,r4,r3
   30918:	18c00003 	ldbu	r3,0(r3)
   3091c:	1885883a 	add	r2,r3,r2
   30920:	00c00804 	movi	r3,32
   30924:	1887c83a 	sub	r3,r3,r2
   30928:	18000526 	beq	r3,zero,30940 <__udivdi3+0x94>
   3092c:	80e0983a 	sll	r16,r16,r3
   30930:	9884d83a 	srl	r2,r19,r2
   30934:	30e2983a 	sll	r17,r6,r3
   30938:	98e4983a 	sll	r18,r19,r3
   3093c:	142cb03a 	or	r22,r2,r16
   30940:	882ad43a 	srli	r21,r17,16
   30944:	b009883a 	mov	r4,r22
   30948:	8d3fffcc 	andi	r20,r17,65535
   3094c:	a80b883a 	mov	r5,r21
   30950:	00234ec0 	call	234ec <__umodsi3>
   30954:	b009883a 	mov	r4,r22
   30958:	a80b883a 	mov	r5,r21
   3095c:	1027883a 	mov	r19,r2
   30960:	00234880 	call	23488 <__udivsi3>
   30964:	102d883a 	mov	r22,r2
   30968:	9826943a 	slli	r19,r19,16
   3096c:	9004d43a 	srli	r2,r18,16
   30970:	a5a1383a 	mul	r16,r20,r22
   30974:	14c4b03a 	or	r2,r2,r19
   30978:	1400052e 	bgeu	r2,r16,30990 <__udivdi3+0xe4>
   3097c:	1445883a 	add	r2,r2,r17
   30980:	b0ffffc4 	addi	r3,r22,-1
   30984:	14400136 	bltu	r2,r17,3098c <__udivdi3+0xe0>
   30988:	14012336 	bltu	r2,r16,30e18 <__udivdi3+0x56c>
   3098c:	182d883a 	mov	r22,r3
   30990:	1421c83a 	sub	r16,r2,r16
   30994:	a80b883a 	mov	r5,r21
   30998:	8009883a 	mov	r4,r16
   3099c:	00234ec0 	call	234ec <__umodsi3>
   309a0:	1027883a 	mov	r19,r2
   309a4:	a80b883a 	mov	r5,r21
   309a8:	8009883a 	mov	r4,r16
   309ac:	00234880 	call	23488 <__udivsi3>
   309b0:	9826943a 	slli	r19,r19,16
   309b4:	a0a9383a 	mul	r20,r20,r2
   309b8:	94bfffcc 	andi	r18,r18,65535
   309bc:	94e4b03a 	or	r18,r18,r19
   309c0:	9500052e 	bgeu	r18,r20,309d8 <__udivdi3+0x12c>
   309c4:	8ca5883a 	add	r18,r17,r18
   309c8:	10ffffc4 	addi	r3,r2,-1
   309cc:	9440f136 	bltu	r18,r17,30d94 <__udivdi3+0x4e8>
   309d0:	9500f02e 	bgeu	r18,r20,30d94 <__udivdi3+0x4e8>
   309d4:	10bfff84 	addi	r2,r2,-2
   309d8:	b00c943a 	slli	r6,r22,16
   309dc:	0007883a 	mov	r3,zero
   309e0:	3084b03a 	or	r2,r6,r2
   309e4:	00005906 	br	30b4c <__udivdi3+0x2a0>
   309e8:	29c05636 	bltu	r5,r7,30b44 <__udivdi3+0x298>
   309ec:	00bfffd4 	movui	r2,65535
   309f0:	11c0622e 	bgeu	r2,r7,30b7c <__udivdi3+0x2d0>
   309f4:	00804034 	movhi	r2,256
   309f8:	10bfffc4 	addi	r2,r2,-1
   309fc:	11c0ee36 	bltu	r2,r7,30db8 <__udivdi3+0x50c>
   30a00:	00800404 	movi	r2,16
   30a04:	3886d83a 	srl	r3,r7,r2
   30a08:	010000f4 	movhi	r4,3
   30a0c:	2116d404 	addi	r4,r4,23376
   30a10:	20c7883a 	add	r3,r4,r3
   30a14:	18c00003 	ldbu	r3,0(r3)
   30a18:	05400804 	movi	r21,32
   30a1c:	1885883a 	add	r2,r3,r2
   30a20:	a8abc83a 	sub	r21,r21,r2
   30a24:	a800621e 	bne	r21,zero,30bb0 <__udivdi3+0x304>
   30a28:	3c00e936 	bltu	r7,r16,30dd0 <__udivdi3+0x524>
   30a2c:	9985403a 	cmpgeu	r2,r19,r6
   30a30:	0007883a 	mov	r3,zero
   30a34:	00004506 	br	30b4c <__udivdi3+0x2a0>
   30a38:	3000041e 	bne	r6,zero,30a4c <__udivdi3+0x1a0>
   30a3c:	000b883a 	mov	r5,zero
   30a40:	01000044 	movi	r4,1
   30a44:	00234880 	call	23488 <__udivsi3>
   30a48:	1023883a 	mov	r17,r2
   30a4c:	00bfffd4 	movui	r2,65535
   30a50:	14404e2e 	bgeu	r2,r17,30b8c <__udivdi3+0x2e0>
   30a54:	00804034 	movhi	r2,256
   30a58:	10bfffc4 	addi	r2,r2,-1
   30a5c:	1440d836 	bltu	r2,r17,30dc0 <__udivdi3+0x514>
   30a60:	00800404 	movi	r2,16
   30a64:	8886d83a 	srl	r3,r17,r2
   30a68:	010000f4 	movhi	r4,3
   30a6c:	2116d404 	addi	r4,r4,23376
   30a70:	20c7883a 	add	r3,r4,r3
   30a74:	18c00003 	ldbu	r3,0(r3)
   30a78:	1885883a 	add	r2,r3,r2
   30a7c:	00c00804 	movi	r3,32
   30a80:	1887c83a 	sub	r3,r3,r2
   30a84:	18008f1e 	bne	r3,zero,30cc4 <__udivdi3+0x418>
   30a88:	882ad43a 	srli	r21,r17,16
   30a8c:	8461c83a 	sub	r16,r16,r17
   30a90:	8d3fffcc 	andi	r20,r17,65535
   30a94:	00c00044 	movi	r3,1
   30a98:	8009883a 	mov	r4,r16
   30a9c:	a80b883a 	mov	r5,r21
   30aa0:	d8c00015 	stw	r3,0(sp)
   30aa4:	00234ec0 	call	234ec <__umodsi3>
   30aa8:	8009883a 	mov	r4,r16
   30aac:	a80b883a 	mov	r5,r21
   30ab0:	1027883a 	mov	r19,r2
   30ab4:	00234880 	call	23488 <__udivsi3>
   30ab8:	9826943a 	slli	r19,r19,16
   30abc:	9008d43a 	srli	r4,r18,16
   30ac0:	1521383a 	mul	r16,r2,r20
   30ac4:	102d883a 	mov	r22,r2
   30ac8:	24c8b03a 	or	r4,r4,r19
   30acc:	d8c00017 	ldw	r3,0(sp)
   30ad0:	2400052e 	bgeu	r4,r16,30ae8 <__udivdi3+0x23c>
   30ad4:	2449883a 	add	r4,r4,r17
   30ad8:	b0bfffc4 	addi	r2,r22,-1
   30adc:	24400136 	bltu	r4,r17,30ae4 <__udivdi3+0x238>
   30ae0:	2400ca36 	bltu	r4,r16,30e0c <__udivdi3+0x560>
   30ae4:	102d883a 	mov	r22,r2
   30ae8:	2421c83a 	sub	r16,r4,r16
   30aec:	a80b883a 	mov	r5,r21
   30af0:	8009883a 	mov	r4,r16
   30af4:	d8c00015 	stw	r3,0(sp)
   30af8:	00234ec0 	call	234ec <__umodsi3>
   30afc:	1027883a 	mov	r19,r2
   30b00:	a80b883a 	mov	r5,r21
   30b04:	8009883a 	mov	r4,r16
   30b08:	00234880 	call	23488 <__udivsi3>
   30b0c:	9826943a 	slli	r19,r19,16
   30b10:	1529383a 	mul	r20,r2,r20
   30b14:	94bfffcc 	andi	r18,r18,65535
   30b18:	94e4b03a 	or	r18,r18,r19
   30b1c:	d8c00017 	ldw	r3,0(sp)
   30b20:	9500052e 	bgeu	r18,r20,30b38 <__udivdi3+0x28c>
   30b24:	8ca5883a 	add	r18,r17,r18
   30b28:	113fffc4 	addi	r4,r2,-1
   30b2c:	94409736 	bltu	r18,r17,30d8c <__udivdi3+0x4e0>
   30b30:	9500962e 	bgeu	r18,r20,30d8c <__udivdi3+0x4e0>
   30b34:	10bfff84 	addi	r2,r2,-2
   30b38:	b00c943a 	slli	r6,r22,16
   30b3c:	3084b03a 	or	r2,r6,r2
   30b40:	00000206 	br	30b4c <__udivdi3+0x2a0>
   30b44:	0007883a 	mov	r3,zero
   30b48:	0005883a 	mov	r2,zero
   30b4c:	dfc00a17 	ldw	ra,40(sp)
   30b50:	df000917 	ldw	fp,36(sp)
   30b54:	ddc00817 	ldw	r23,32(sp)
   30b58:	dd800717 	ldw	r22,28(sp)
   30b5c:	dd400617 	ldw	r21,24(sp)
   30b60:	dd000517 	ldw	r20,20(sp)
   30b64:	dcc00417 	ldw	r19,16(sp)
   30b68:	dc800317 	ldw	r18,12(sp)
   30b6c:	dc400217 	ldw	r17,8(sp)
   30b70:	dc000117 	ldw	r16,4(sp)
   30b74:	dec00b04 	addi	sp,sp,44
   30b78:	f800283a 	ret
   30b7c:	00803fc4 	movi	r2,255
   30b80:	11c5803a 	cmpltu	r2,r2,r7
   30b84:	100490fa 	slli	r2,r2,3
   30b88:	003f9e06 	br	30a04 <__alt_data_end+0xf4030a04>
   30b8c:	00803fc4 	movi	r2,255
   30b90:	1445803a 	cmpltu	r2,r2,r17
   30b94:	100490fa 	slli	r2,r2,3
   30b98:	003fb206 	br	30a64 <__alt_data_end+0xf4030a64>
   30b9c:	00804034 	movhi	r2,256
   30ba0:	10bfffc4 	addi	r2,r2,-1
   30ba4:	11808836 	bltu	r2,r6,30dc8 <__udivdi3+0x51c>
   30ba8:	00800404 	movi	r2,16
   30bac:	003f5606 	br	30908 <__alt_data_end+0xf4030908>
   30bb0:	30aed83a 	srl	r23,r6,r2
   30bb4:	3d4e983a 	sll	r7,r7,r21
   30bb8:	80acd83a 	srl	r22,r16,r2
   30bbc:	9884d83a 	srl	r2,r19,r2
   30bc0:	3deeb03a 	or	r23,r7,r23
   30bc4:	b824d43a 	srli	r18,r23,16
   30bc8:	8560983a 	sll	r16,r16,r21
   30bcc:	b009883a 	mov	r4,r22
   30bd0:	900b883a 	mov	r5,r18
   30bd4:	3568983a 	sll	r20,r6,r21
   30bd8:	1420b03a 	or	r16,r2,r16
   30bdc:	00234ec0 	call	234ec <__umodsi3>
   30be0:	b009883a 	mov	r4,r22
   30be4:	900b883a 	mov	r5,r18
   30be8:	1023883a 	mov	r17,r2
   30bec:	00234880 	call	23488 <__udivsi3>
   30bf0:	8808943a 	slli	r4,r17,16
   30bf4:	bf3fffcc 	andi	fp,r23,65535
   30bf8:	8006d43a 	srli	r3,r16,16
   30bfc:	e0a3383a 	mul	r17,fp,r2
   30c00:	100d883a 	mov	r6,r2
   30c04:	1906b03a 	or	r3,r3,r4
   30c08:	1c40042e 	bgeu	r3,r17,30c1c <__udivdi3+0x370>
   30c0c:	1dc7883a 	add	r3,r3,r23
   30c10:	10bfffc4 	addi	r2,r2,-1
   30c14:	1dc0752e 	bgeu	r3,r23,30dec <__udivdi3+0x540>
   30c18:	100d883a 	mov	r6,r2
   30c1c:	1c63c83a 	sub	r17,r3,r17
   30c20:	900b883a 	mov	r5,r18
   30c24:	8809883a 	mov	r4,r17
   30c28:	d9800015 	stw	r6,0(sp)
   30c2c:	00234ec0 	call	234ec <__umodsi3>
   30c30:	102d883a 	mov	r22,r2
   30c34:	8809883a 	mov	r4,r17
   30c38:	900b883a 	mov	r5,r18
   30c3c:	00234880 	call	23488 <__udivsi3>
   30c40:	b02c943a 	slli	r22,r22,16
   30c44:	e089383a 	mul	r4,fp,r2
   30c48:	843fffcc 	andi	r16,r16,65535
   30c4c:	85a0b03a 	or	r16,r16,r22
   30c50:	d9800017 	ldw	r6,0(sp)
   30c54:	8100042e 	bgeu	r16,r4,30c68 <__udivdi3+0x3bc>
   30c58:	85e1883a 	add	r16,r16,r23
   30c5c:	10ffffc4 	addi	r3,r2,-1
   30c60:	85c05e2e 	bgeu	r16,r23,30ddc <__udivdi3+0x530>
   30c64:	1805883a 	mov	r2,r3
   30c68:	300c943a 	slli	r6,r6,16
   30c6c:	a17fffcc 	andi	r5,r20,65535
   30c70:	a028d43a 	srli	r20,r20,16
   30c74:	3084b03a 	or	r2,r6,r2
   30c78:	10ffffcc 	andi	r3,r2,65535
   30c7c:	100cd43a 	srli	r6,r2,16
   30c80:	194f383a 	mul	r7,r3,r5
   30c84:	1d07383a 	mul	r3,r3,r20
   30c88:	314b383a 	mul	r5,r6,r5
   30c8c:	3810d43a 	srli	r8,r7,16
   30c90:	8121c83a 	sub	r16,r16,r4
   30c94:	1947883a 	add	r3,r3,r5
   30c98:	40c7883a 	add	r3,r8,r3
   30c9c:	350d383a 	mul	r6,r6,r20
   30ca0:	1940022e 	bgeu	r3,r5,30cac <__udivdi3+0x400>
   30ca4:	01000074 	movhi	r4,1
   30ca8:	310d883a 	add	r6,r6,r4
   30cac:	1828d43a 	srli	r20,r3,16
   30cb0:	a18d883a 	add	r6,r20,r6
   30cb4:	81803e36 	bltu	r16,r6,30db0 <__udivdi3+0x504>
   30cb8:	81803826 	beq	r16,r6,30d9c <__udivdi3+0x4f0>
   30cbc:	0007883a 	mov	r3,zero
   30cc0:	003fa206 	br	30b4c <__alt_data_end+0xf4030b4c>
   30cc4:	88e2983a 	sll	r17,r17,r3
   30cc8:	80a8d83a 	srl	r20,r16,r2
   30ccc:	80e0983a 	sll	r16,r16,r3
   30cd0:	882ad43a 	srli	r21,r17,16
   30cd4:	9884d83a 	srl	r2,r19,r2
   30cd8:	a009883a 	mov	r4,r20
   30cdc:	a80b883a 	mov	r5,r21
   30ce0:	142eb03a 	or	r23,r2,r16
   30ce4:	98e4983a 	sll	r18,r19,r3
   30ce8:	00234ec0 	call	234ec <__umodsi3>
   30cec:	a009883a 	mov	r4,r20
   30cf0:	a80b883a 	mov	r5,r21
   30cf4:	1021883a 	mov	r16,r2
   30cf8:	00234880 	call	23488 <__udivsi3>
   30cfc:	1039883a 	mov	fp,r2
   30d00:	8d3fffcc 	andi	r20,r17,65535
   30d04:	8020943a 	slli	r16,r16,16
   30d08:	b804d43a 	srli	r2,r23,16
   30d0c:	a72d383a 	mul	r22,r20,fp
   30d10:	1404b03a 	or	r2,r2,r16
   30d14:	1580062e 	bgeu	r2,r22,30d30 <__udivdi3+0x484>
   30d18:	1445883a 	add	r2,r2,r17
   30d1c:	e0ffffc4 	addi	r3,fp,-1
   30d20:	14403836 	bltu	r2,r17,30e04 <__udivdi3+0x558>
   30d24:	1580372e 	bgeu	r2,r22,30e04 <__udivdi3+0x558>
   30d28:	e73fff84 	addi	fp,fp,-2
   30d2c:	1445883a 	add	r2,r2,r17
   30d30:	15adc83a 	sub	r22,r2,r22
   30d34:	a80b883a 	mov	r5,r21
   30d38:	b009883a 	mov	r4,r22
   30d3c:	00234ec0 	call	234ec <__umodsi3>
   30d40:	1027883a 	mov	r19,r2
   30d44:	b009883a 	mov	r4,r22
   30d48:	a80b883a 	mov	r5,r21
   30d4c:	00234880 	call	23488 <__udivsi3>
   30d50:	9826943a 	slli	r19,r19,16
   30d54:	a0a1383a 	mul	r16,r20,r2
   30d58:	b93fffcc 	andi	r4,r23,65535
   30d5c:	24c8b03a 	or	r4,r4,r19
   30d60:	2400062e 	bgeu	r4,r16,30d7c <__udivdi3+0x4d0>
   30d64:	2449883a 	add	r4,r4,r17
   30d68:	10ffffc4 	addi	r3,r2,-1
   30d6c:	24402336 	bltu	r4,r17,30dfc <__udivdi3+0x550>
   30d70:	2400222e 	bgeu	r4,r16,30dfc <__udivdi3+0x550>
   30d74:	10bfff84 	addi	r2,r2,-2
   30d78:	2449883a 	add	r4,r4,r17
   30d7c:	e038943a 	slli	fp,fp,16
   30d80:	2421c83a 	sub	r16,r4,r16
   30d84:	e086b03a 	or	r3,fp,r2
   30d88:	003f4306 	br	30a98 <__alt_data_end+0xf4030a98>
   30d8c:	2005883a 	mov	r2,r4
   30d90:	003f6906 	br	30b38 <__alt_data_end+0xf4030b38>
   30d94:	1805883a 	mov	r2,r3
   30d98:	003f0f06 	br	309d8 <__alt_data_end+0xf40309d8>
   30d9c:	1806943a 	slli	r3,r3,16
   30da0:	9d66983a 	sll	r19,r19,r21
   30da4:	39ffffcc 	andi	r7,r7,65535
   30da8:	19c7883a 	add	r3,r3,r7
   30dac:	98ffc32e 	bgeu	r19,r3,30cbc <__alt_data_end+0xf4030cbc>
   30db0:	10bfffc4 	addi	r2,r2,-1
   30db4:	003fc106 	br	30cbc <__alt_data_end+0xf4030cbc>
   30db8:	00800604 	movi	r2,24
   30dbc:	003f1106 	br	30a04 <__alt_data_end+0xf4030a04>
   30dc0:	00800604 	movi	r2,24
   30dc4:	003f2706 	br	30a64 <__alt_data_end+0xf4030a64>
   30dc8:	00800604 	movi	r2,24
   30dcc:	003ece06 	br	30908 <__alt_data_end+0xf4030908>
   30dd0:	0007883a 	mov	r3,zero
   30dd4:	00800044 	movi	r2,1
   30dd8:	003f5c06 	br	30b4c <__alt_data_end+0xf4030b4c>
   30ddc:	813fa12e 	bgeu	r16,r4,30c64 <__alt_data_end+0xf4030c64>
   30de0:	10bfff84 	addi	r2,r2,-2
   30de4:	85e1883a 	add	r16,r16,r23
   30de8:	003f9f06 	br	30c68 <__alt_data_end+0xf4030c68>
   30dec:	1c7f8a2e 	bgeu	r3,r17,30c18 <__alt_data_end+0xf4030c18>
   30df0:	31bfff84 	addi	r6,r6,-2
   30df4:	1dc7883a 	add	r3,r3,r23
   30df8:	003f8806 	br	30c1c <__alt_data_end+0xf4030c1c>
   30dfc:	1805883a 	mov	r2,r3
   30e00:	003fde06 	br	30d7c <__alt_data_end+0xf4030d7c>
   30e04:	1839883a 	mov	fp,r3
   30e08:	003fc906 	br	30d30 <__alt_data_end+0xf4030d30>
   30e0c:	b5bfff84 	addi	r22,r22,-2
   30e10:	2449883a 	add	r4,r4,r17
   30e14:	003f3406 	br	30ae8 <__alt_data_end+0xf4030ae8>
   30e18:	b5bfff84 	addi	r22,r22,-2
   30e1c:	1445883a 	add	r2,r2,r17
   30e20:	003edb06 	br	30990 <__alt_data_end+0xf4030990>

00030e24 <__umoddi3>:
   30e24:	defff404 	addi	sp,sp,-48
   30e28:	df000a15 	stw	fp,40(sp)
   30e2c:	dc400315 	stw	r17,12(sp)
   30e30:	dc000215 	stw	r16,8(sp)
   30e34:	dfc00b15 	stw	ra,44(sp)
   30e38:	ddc00915 	stw	r23,36(sp)
   30e3c:	dd800815 	stw	r22,32(sp)
   30e40:	dd400715 	stw	r21,28(sp)
   30e44:	dd000615 	stw	r20,24(sp)
   30e48:	dcc00515 	stw	r19,20(sp)
   30e4c:	dc800415 	stw	r18,16(sp)
   30e50:	2021883a 	mov	r16,r4
   30e54:	2823883a 	mov	r17,r5
   30e58:	2839883a 	mov	fp,r5
   30e5c:	38003c1e 	bne	r7,zero,30f50 <__umoddi3+0x12c>
   30e60:	3027883a 	mov	r19,r6
   30e64:	2029883a 	mov	r20,r4
   30e68:	2980512e 	bgeu	r5,r6,30fb0 <__umoddi3+0x18c>
   30e6c:	00bfffd4 	movui	r2,65535
   30e70:	11809a36 	bltu	r2,r6,310dc <__umoddi3+0x2b8>
   30e74:	01003fc4 	movi	r4,255
   30e78:	2189803a 	cmpltu	r4,r4,r6
   30e7c:	200890fa 	slli	r4,r4,3
   30e80:	3104d83a 	srl	r2,r6,r4
   30e84:	00c000f4 	movhi	r3,3
   30e88:	18d6d404 	addi	r3,r3,23376
   30e8c:	1885883a 	add	r2,r3,r2
   30e90:	10c00003 	ldbu	r3,0(r2)
   30e94:	00800804 	movi	r2,32
   30e98:	1909883a 	add	r4,r3,r4
   30e9c:	1125c83a 	sub	r18,r2,r4
   30ea0:	90000526 	beq	r18,zero,30eb8 <__umoddi3+0x94>
   30ea4:	8ca2983a 	sll	r17,r17,r18
   30ea8:	8108d83a 	srl	r4,r16,r4
   30eac:	34a6983a 	sll	r19,r6,r18
   30eb0:	84a8983a 	sll	r20,r16,r18
   30eb4:	2478b03a 	or	fp,r4,r17
   30eb8:	982ed43a 	srli	r23,r19,16
   30ebc:	e009883a 	mov	r4,fp
   30ec0:	9dbfffcc 	andi	r22,r19,65535
   30ec4:	b80b883a 	mov	r5,r23
   30ec8:	00234ec0 	call	234ec <__umodsi3>
   30ecc:	e009883a 	mov	r4,fp
   30ed0:	b80b883a 	mov	r5,r23
   30ed4:	102b883a 	mov	r21,r2
   30ed8:	00234880 	call	23488 <__udivsi3>
   30edc:	a806943a 	slli	r3,r21,16
   30ee0:	a008d43a 	srli	r4,r20,16
   30ee4:	b085383a 	mul	r2,r22,r2
   30ee8:	20c8b03a 	or	r4,r4,r3
   30eec:	2080032e 	bgeu	r4,r2,30efc <__umoddi3+0xd8>
   30ef0:	24c9883a 	add	r4,r4,r19
   30ef4:	24c00136 	bltu	r4,r19,30efc <__umoddi3+0xd8>
   30ef8:	20811036 	bltu	r4,r2,3133c <__umoddi3+0x518>
   30efc:	20abc83a 	sub	r21,r4,r2
   30f00:	b80b883a 	mov	r5,r23
   30f04:	a809883a 	mov	r4,r21
   30f08:	00234ec0 	call	234ec <__umodsi3>
   30f0c:	1023883a 	mov	r17,r2
   30f10:	b80b883a 	mov	r5,r23
   30f14:	a809883a 	mov	r4,r21
   30f18:	00234880 	call	23488 <__udivsi3>
   30f1c:	8822943a 	slli	r17,r17,16
   30f20:	b085383a 	mul	r2,r22,r2
   30f24:	a0ffffcc 	andi	r3,r20,65535
   30f28:	1c46b03a 	or	r3,r3,r17
   30f2c:	1880042e 	bgeu	r3,r2,30f40 <__umoddi3+0x11c>
   30f30:	1cc7883a 	add	r3,r3,r19
   30f34:	1cc00236 	bltu	r3,r19,30f40 <__umoddi3+0x11c>
   30f38:	1880012e 	bgeu	r3,r2,30f40 <__umoddi3+0x11c>
   30f3c:	1cc7883a 	add	r3,r3,r19
   30f40:	1885c83a 	sub	r2,r3,r2
   30f44:	1484d83a 	srl	r2,r2,r18
   30f48:	0007883a 	mov	r3,zero
   30f4c:	00004f06 	br	3108c <__umoddi3+0x268>
   30f50:	29c04c36 	bltu	r5,r7,31084 <__umoddi3+0x260>
   30f54:	00bfffd4 	movui	r2,65535
   30f58:	11c0582e 	bgeu	r2,r7,310bc <__umoddi3+0x298>
   30f5c:	00804034 	movhi	r2,256
   30f60:	10bfffc4 	addi	r2,r2,-1
   30f64:	11c0e736 	bltu	r2,r7,31304 <__umoddi3+0x4e0>
   30f68:	01000404 	movi	r4,16
   30f6c:	3904d83a 	srl	r2,r7,r4
   30f70:	00c000f4 	movhi	r3,3
   30f74:	18d6d404 	addi	r3,r3,23376
   30f78:	1885883a 	add	r2,r3,r2
   30f7c:	14c00003 	ldbu	r19,0(r2)
   30f80:	00c00804 	movi	r3,32
   30f84:	9927883a 	add	r19,r19,r4
   30f88:	1ce9c83a 	sub	r20,r3,r19
   30f8c:	a000581e 	bne	r20,zero,310f0 <__umoddi3+0x2cc>
   30f90:	3c400136 	bltu	r7,r17,30f98 <__umoddi3+0x174>
   30f94:	8180eb36 	bltu	r16,r6,31344 <__umoddi3+0x520>
   30f98:	8185c83a 	sub	r2,r16,r6
   30f9c:	89e3c83a 	sub	r17,r17,r7
   30fa0:	8089803a 	cmpltu	r4,r16,r2
   30fa4:	8939c83a 	sub	fp,r17,r4
   30fa8:	e007883a 	mov	r3,fp
   30fac:	00003706 	br	3108c <__umoddi3+0x268>
   30fb0:	3000041e 	bne	r6,zero,30fc4 <__umoddi3+0x1a0>
   30fb4:	000b883a 	mov	r5,zero
   30fb8:	01000044 	movi	r4,1
   30fbc:	00234880 	call	23488 <__udivsi3>
   30fc0:	1027883a 	mov	r19,r2
   30fc4:	00bfffd4 	movui	r2,65535
   30fc8:	14c0402e 	bgeu	r2,r19,310cc <__umoddi3+0x2a8>
   30fcc:	00804034 	movhi	r2,256
   30fd0:	10bfffc4 	addi	r2,r2,-1
   30fd4:	14c0cd36 	bltu	r2,r19,3130c <__umoddi3+0x4e8>
   30fd8:	00800404 	movi	r2,16
   30fdc:	9886d83a 	srl	r3,r19,r2
   30fe0:	010000f4 	movhi	r4,3
   30fe4:	2116d404 	addi	r4,r4,23376
   30fe8:	20c7883a 	add	r3,r4,r3
   30fec:	18c00003 	ldbu	r3,0(r3)
   30ff0:	1887883a 	add	r3,r3,r2
   30ff4:	00800804 	movi	r2,32
   30ff8:	10e5c83a 	sub	r18,r2,r3
   30ffc:	9000901e 	bne	r18,zero,31240 <__umoddi3+0x41c>
   31000:	982cd43a 	srli	r22,r19,16
   31004:	8ce3c83a 	sub	r17,r17,r19
   31008:	9d7fffcc 	andi	r21,r19,65535
   3100c:	b00b883a 	mov	r5,r22
   31010:	8809883a 	mov	r4,r17
   31014:	00234ec0 	call	234ec <__umodsi3>
   31018:	8809883a 	mov	r4,r17
   3101c:	b00b883a 	mov	r5,r22
   31020:	1021883a 	mov	r16,r2
   31024:	00234880 	call	23488 <__udivsi3>
   31028:	8006943a 	slli	r3,r16,16
   3102c:	a008d43a 	srli	r4,r20,16
   31030:	1545383a 	mul	r2,r2,r21
   31034:	20c8b03a 	or	r4,r4,r3
   31038:	2080042e 	bgeu	r4,r2,3104c <__umoddi3+0x228>
   3103c:	24c9883a 	add	r4,r4,r19
   31040:	24c00236 	bltu	r4,r19,3104c <__umoddi3+0x228>
   31044:	2080012e 	bgeu	r4,r2,3104c <__umoddi3+0x228>
   31048:	24c9883a 	add	r4,r4,r19
   3104c:	20a1c83a 	sub	r16,r4,r2
   31050:	b00b883a 	mov	r5,r22
   31054:	8009883a 	mov	r4,r16
   31058:	00234ec0 	call	234ec <__umodsi3>
   3105c:	1023883a 	mov	r17,r2
   31060:	b00b883a 	mov	r5,r22
   31064:	8009883a 	mov	r4,r16
   31068:	00234880 	call	23488 <__udivsi3>
   3106c:	8822943a 	slli	r17,r17,16
   31070:	1545383a 	mul	r2,r2,r21
   31074:	a53fffcc 	andi	r20,r20,65535
   31078:	a446b03a 	or	r3,r20,r17
   3107c:	18bfb02e 	bgeu	r3,r2,30f40 <__alt_data_end+0xf4030f40>
   31080:	003fab06 	br	30f30 <__alt_data_end+0xf4030f30>
   31084:	2005883a 	mov	r2,r4
   31088:	2807883a 	mov	r3,r5
   3108c:	dfc00b17 	ldw	ra,44(sp)
   31090:	df000a17 	ldw	fp,40(sp)
   31094:	ddc00917 	ldw	r23,36(sp)
   31098:	dd800817 	ldw	r22,32(sp)
   3109c:	dd400717 	ldw	r21,28(sp)
   310a0:	dd000617 	ldw	r20,24(sp)
   310a4:	dcc00517 	ldw	r19,20(sp)
   310a8:	dc800417 	ldw	r18,16(sp)
   310ac:	dc400317 	ldw	r17,12(sp)
   310b0:	dc000217 	ldw	r16,8(sp)
   310b4:	dec00c04 	addi	sp,sp,48
   310b8:	f800283a 	ret
   310bc:	04c03fc4 	movi	r19,255
   310c0:	99c9803a 	cmpltu	r4,r19,r7
   310c4:	200890fa 	slli	r4,r4,3
   310c8:	003fa806 	br	30f6c <__alt_data_end+0xf4030f6c>
   310cc:	00803fc4 	movi	r2,255
   310d0:	14c5803a 	cmpltu	r2,r2,r19
   310d4:	100490fa 	slli	r2,r2,3
   310d8:	003fc006 	br	30fdc <__alt_data_end+0xf4030fdc>
   310dc:	00804034 	movhi	r2,256
   310e0:	10bfffc4 	addi	r2,r2,-1
   310e4:	11808b36 	bltu	r2,r6,31314 <__umoddi3+0x4f0>
   310e8:	01000404 	movi	r4,16
   310ec:	003f6406 	br	30e80 <__alt_data_end+0xf4030e80>
   310f0:	34c4d83a 	srl	r2,r6,r19
   310f4:	3d0e983a 	sll	r7,r7,r20
   310f8:	8cf8d83a 	srl	fp,r17,r19
   310fc:	8d10983a 	sll	r8,r17,r20
   31100:	38aab03a 	or	r21,r7,r2
   31104:	a82cd43a 	srli	r22,r21,16
   31108:	84e2d83a 	srl	r17,r16,r19
   3110c:	e009883a 	mov	r4,fp
   31110:	b00b883a 	mov	r5,r22
   31114:	8a22b03a 	or	r17,r17,r8
   31118:	3524983a 	sll	r18,r6,r20
   3111c:	00234ec0 	call	234ec <__umodsi3>
   31120:	e009883a 	mov	r4,fp
   31124:	b00b883a 	mov	r5,r22
   31128:	102f883a 	mov	r23,r2
   3112c:	00234880 	call	23488 <__udivsi3>
   31130:	100d883a 	mov	r6,r2
   31134:	b808943a 	slli	r4,r23,16
   31138:	aa3fffcc 	andi	r8,r21,65535
   3113c:	8804d43a 	srli	r2,r17,16
   31140:	41af383a 	mul	r23,r8,r6
   31144:	8520983a 	sll	r16,r16,r20
   31148:	1104b03a 	or	r2,r2,r4
   3114c:	15c0042e 	bgeu	r2,r23,31160 <__umoddi3+0x33c>
   31150:	1545883a 	add	r2,r2,r21
   31154:	30ffffc4 	addi	r3,r6,-1
   31158:	1540742e 	bgeu	r2,r21,3132c <__umoddi3+0x508>
   3115c:	180d883a 	mov	r6,r3
   31160:	15efc83a 	sub	r23,r2,r23
   31164:	b00b883a 	mov	r5,r22
   31168:	b809883a 	mov	r4,r23
   3116c:	d9800115 	stw	r6,4(sp)
   31170:	da000015 	stw	r8,0(sp)
   31174:	00234ec0 	call	234ec <__umodsi3>
   31178:	b00b883a 	mov	r5,r22
   3117c:	b809883a 	mov	r4,r23
   31180:	1039883a 	mov	fp,r2
   31184:	00234880 	call	23488 <__udivsi3>
   31188:	da000017 	ldw	r8,0(sp)
   3118c:	e038943a 	slli	fp,fp,16
   31190:	100b883a 	mov	r5,r2
   31194:	4089383a 	mul	r4,r8,r2
   31198:	8a3fffcc 	andi	r8,r17,65535
   3119c:	4710b03a 	or	r8,r8,fp
   311a0:	d9800117 	ldw	r6,4(sp)
   311a4:	4100042e 	bgeu	r8,r4,311b8 <__umoddi3+0x394>
   311a8:	4551883a 	add	r8,r8,r21
   311ac:	10bfffc4 	addi	r2,r2,-1
   311b0:	45405a2e 	bgeu	r8,r21,3131c <__umoddi3+0x4f8>
   311b4:	100b883a 	mov	r5,r2
   311b8:	300c943a 	slli	r6,r6,16
   311bc:	91ffffcc 	andi	r7,r18,65535
   311c0:	9004d43a 	srli	r2,r18,16
   311c4:	314cb03a 	or	r6,r6,r5
   311c8:	317fffcc 	andi	r5,r6,65535
   311cc:	300cd43a 	srli	r6,r6,16
   311d0:	29d3383a 	mul	r9,r5,r7
   311d4:	288b383a 	mul	r5,r5,r2
   311d8:	31cf383a 	mul	r7,r6,r7
   311dc:	4806d43a 	srli	r3,r9,16
   311e0:	4111c83a 	sub	r8,r8,r4
   311e4:	29cb883a 	add	r5,r5,r7
   311e8:	194b883a 	add	r5,r3,r5
   311ec:	3085383a 	mul	r2,r6,r2
   311f0:	29c0022e 	bgeu	r5,r7,311fc <__umoddi3+0x3d8>
   311f4:	00c00074 	movhi	r3,1
   311f8:	10c5883a 	add	r2,r2,r3
   311fc:	2808d43a 	srli	r4,r5,16
   31200:	280a943a 	slli	r5,r5,16
   31204:	4a7fffcc 	andi	r9,r9,65535
   31208:	2085883a 	add	r2,r4,r2
   3120c:	2a4b883a 	add	r5,r5,r9
   31210:	40803636 	bltu	r8,r2,312ec <__umoddi3+0x4c8>
   31214:	40804d26 	beq	r8,r2,3134c <__umoddi3+0x528>
   31218:	4089c83a 	sub	r4,r8,r2
   3121c:	280f883a 	mov	r7,r5
   31220:	81cfc83a 	sub	r7,r16,r7
   31224:	81c7803a 	cmpltu	r3,r16,r7
   31228:	20c7c83a 	sub	r3,r4,r3
   3122c:	1cc4983a 	sll	r2,r3,r19
   31230:	3d0ed83a 	srl	r7,r7,r20
   31234:	1d06d83a 	srl	r3,r3,r20
   31238:	11c4b03a 	or	r2,r2,r7
   3123c:	003f9306 	br	3108c <__alt_data_end+0xf403108c>
   31240:	9ca6983a 	sll	r19,r19,r18
   31244:	88e8d83a 	srl	r20,r17,r3
   31248:	80c4d83a 	srl	r2,r16,r3
   3124c:	982cd43a 	srli	r22,r19,16
   31250:	8ca2983a 	sll	r17,r17,r18
   31254:	a009883a 	mov	r4,r20
   31258:	b00b883a 	mov	r5,r22
   3125c:	1478b03a 	or	fp,r2,r17
   31260:	00234ec0 	call	234ec <__umodsi3>
   31264:	a009883a 	mov	r4,r20
   31268:	b00b883a 	mov	r5,r22
   3126c:	1023883a 	mov	r17,r2
   31270:	00234880 	call	23488 <__udivsi3>
   31274:	9d7fffcc 	andi	r21,r19,65535
   31278:	880a943a 	slli	r5,r17,16
   3127c:	e008d43a 	srli	r4,fp,16
   31280:	a885383a 	mul	r2,r21,r2
   31284:	84a8983a 	sll	r20,r16,r18
   31288:	2148b03a 	or	r4,r4,r5
   3128c:	2080042e 	bgeu	r4,r2,312a0 <__umoddi3+0x47c>
   31290:	24c9883a 	add	r4,r4,r19
   31294:	24c00236 	bltu	r4,r19,312a0 <__umoddi3+0x47c>
   31298:	2080012e 	bgeu	r4,r2,312a0 <__umoddi3+0x47c>
   3129c:	24c9883a 	add	r4,r4,r19
   312a0:	20a3c83a 	sub	r17,r4,r2
   312a4:	b00b883a 	mov	r5,r22
   312a8:	8809883a 	mov	r4,r17
   312ac:	00234ec0 	call	234ec <__umodsi3>
   312b0:	102f883a 	mov	r23,r2
   312b4:	8809883a 	mov	r4,r17
   312b8:	b00b883a 	mov	r5,r22
   312bc:	00234880 	call	23488 <__udivsi3>
   312c0:	b82e943a 	slli	r23,r23,16
   312c4:	a885383a 	mul	r2,r21,r2
   312c8:	e13fffcc 	andi	r4,fp,65535
   312cc:	25c8b03a 	or	r4,r4,r23
   312d0:	2080042e 	bgeu	r4,r2,312e4 <__umoddi3+0x4c0>
   312d4:	24c9883a 	add	r4,r4,r19
   312d8:	24c00236 	bltu	r4,r19,312e4 <__umoddi3+0x4c0>
   312dc:	2080012e 	bgeu	r4,r2,312e4 <__umoddi3+0x4c0>
   312e0:	24c9883a 	add	r4,r4,r19
   312e4:	20a3c83a 	sub	r17,r4,r2
   312e8:	003f4806 	br	3100c <__alt_data_end+0xf403100c>
   312ec:	2c8fc83a 	sub	r7,r5,r18
   312f0:	1545c83a 	sub	r2,r2,r21
   312f4:	29cb803a 	cmpltu	r5,r5,r7
   312f8:	1145c83a 	sub	r2,r2,r5
   312fc:	4089c83a 	sub	r4,r8,r2
   31300:	003fc706 	br	31220 <__alt_data_end+0xf4031220>
   31304:	01000604 	movi	r4,24
   31308:	003f1806 	br	30f6c <__alt_data_end+0xf4030f6c>
   3130c:	00800604 	movi	r2,24
   31310:	003f3206 	br	30fdc <__alt_data_end+0xf4030fdc>
   31314:	01000604 	movi	r4,24
   31318:	003ed906 	br	30e80 <__alt_data_end+0xf4030e80>
   3131c:	413fa52e 	bgeu	r8,r4,311b4 <__alt_data_end+0xf40311b4>
   31320:	297fff84 	addi	r5,r5,-2
   31324:	4551883a 	add	r8,r8,r21
   31328:	003fa306 	br	311b8 <__alt_data_end+0xf40311b8>
   3132c:	15ff8b2e 	bgeu	r2,r23,3115c <__alt_data_end+0xf403115c>
   31330:	31bfff84 	addi	r6,r6,-2
   31334:	1545883a 	add	r2,r2,r21
   31338:	003f8906 	br	31160 <__alt_data_end+0xf4031160>
   3133c:	24c9883a 	add	r4,r4,r19
   31340:	003eee06 	br	30efc <__alt_data_end+0xf4030efc>
   31344:	8005883a 	mov	r2,r16
   31348:	003f1706 	br	30fa8 <__alt_data_end+0xf4030fa8>
   3134c:	817fe736 	bltu	r16,r5,312ec <__alt_data_end+0xf40312ec>
   31350:	280f883a 	mov	r7,r5
   31354:	0009883a 	mov	r4,zero
   31358:	003fb106 	br	31220 <__alt_data_end+0xf4031220>

0003135c <__floatunsidf>:
   3135c:	defffe04 	addi	sp,sp,-8
   31360:	dc000015 	stw	r16,0(sp)
   31364:	dfc00115 	stw	ra,4(sp)
   31368:	2021883a 	mov	r16,r4
   3136c:	20002226 	beq	r4,zero,313f8 <__floatunsidf+0x9c>
   31370:	00272580 	call	27258 <__clzsi2>
   31374:	01010784 	movi	r4,1054
   31378:	2089c83a 	sub	r4,r4,r2
   3137c:	01810cc4 	movi	r6,1075
   31380:	310dc83a 	sub	r6,r6,r4
   31384:	00c007c4 	movi	r3,31
   31388:	1980120e 	bge	r3,r6,313d4 <__floatunsidf+0x78>
   3138c:	00c104c4 	movi	r3,1043
   31390:	1907c83a 	sub	r3,r3,r4
   31394:	80ca983a 	sll	r5,r16,r3
   31398:	00800434 	movhi	r2,16
   3139c:	10bfffc4 	addi	r2,r2,-1
   313a0:	2101ffcc 	andi	r4,r4,2047
   313a4:	0021883a 	mov	r16,zero
   313a8:	288a703a 	and	r5,r5,r2
   313ac:	2008953a 	slli	r4,r4,20
   313b0:	00c00434 	movhi	r3,16
   313b4:	18ffffc4 	addi	r3,r3,-1
   313b8:	28c6703a 	and	r3,r5,r3
   313bc:	8005883a 	mov	r2,r16
   313c0:	1906b03a 	or	r3,r3,r4
   313c4:	dfc00117 	ldw	ra,4(sp)
   313c8:	dc000017 	ldw	r16,0(sp)
   313cc:	dec00204 	addi	sp,sp,8
   313d0:	f800283a 	ret
   313d4:	00c002c4 	movi	r3,11
   313d8:	188bc83a 	sub	r5,r3,r2
   313dc:	814ad83a 	srl	r5,r16,r5
   313e0:	00c00434 	movhi	r3,16
   313e4:	18ffffc4 	addi	r3,r3,-1
   313e8:	81a0983a 	sll	r16,r16,r6
   313ec:	2101ffcc 	andi	r4,r4,2047
   313f0:	28ca703a 	and	r5,r5,r3
   313f4:	003fed06 	br	313ac <__alt_data_end+0xf40313ac>
   313f8:	0009883a 	mov	r4,zero
   313fc:	000b883a 	mov	r5,zero
   31400:	003fea06 	br	313ac <__alt_data_end+0xf40313ac>

00031404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31404:	defffe04 	addi	sp,sp,-8
   31408:	dfc00115 	stw	ra,4(sp)
   3140c:	df000015 	stw	fp,0(sp)
   31410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31414:	d0a00c17 	ldw	r2,-32720(gp)
   31418:	10000326 	beq	r2,zero,31428 <alt_get_errno+0x24>
   3141c:	d0a00c17 	ldw	r2,-32720(gp)
   31420:	103ee83a 	callr	r2
   31424:	00000106 	br	3142c <alt_get_errno+0x28>
   31428:	d0a71e04 	addi	r2,gp,-25480
}
   3142c:	e037883a 	mov	sp,fp
   31430:	dfc00117 	ldw	ra,4(sp)
   31434:	df000017 	ldw	fp,0(sp)
   31438:	dec00204 	addi	sp,sp,8
   3143c:	f800283a 	ret

00031440 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   31440:	defffb04 	addi	sp,sp,-20
   31444:	dfc00415 	stw	ra,16(sp)
   31448:	df000315 	stw	fp,12(sp)
   3144c:	df000304 	addi	fp,sp,12
   31450:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   31454:	e0bfff17 	ldw	r2,-4(fp)
   31458:	10000616 	blt	r2,zero,31474 <close+0x34>
   3145c:	e0bfff17 	ldw	r2,-4(fp)
   31460:	10c00324 	muli	r3,r2,12
   31464:	008000f4 	movhi	r2,3
   31468:	1099e604 	addi	r2,r2,26520
   3146c:	1885883a 	add	r2,r3,r2
   31470:	00000106 	br	31478 <close+0x38>
   31474:	0005883a 	mov	r2,zero
   31478:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   3147c:	e0bffd17 	ldw	r2,-12(fp)
   31480:	10001926 	beq	r2,zero,314e8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   31484:	e0bffd17 	ldw	r2,-12(fp)
   31488:	10800017 	ldw	r2,0(r2)
   3148c:	10800417 	ldw	r2,16(r2)
   31490:	10000626 	beq	r2,zero,314ac <close+0x6c>
   31494:	e0bffd17 	ldw	r2,-12(fp)
   31498:	10800017 	ldw	r2,0(r2)
   3149c:	10800417 	ldw	r2,16(r2)
   314a0:	e13ffd17 	ldw	r4,-12(fp)
   314a4:	103ee83a 	callr	r2
   314a8:	00000106 	br	314b0 <close+0x70>
   314ac:	0005883a 	mov	r2,zero
   314b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   314b4:	e13fff17 	ldw	r4,-4(fp)
   314b8:	0031b000 	call	31b00 <alt_release_fd>
    if (rval < 0)
   314bc:	e0bffe17 	ldw	r2,-8(fp)
   314c0:	1000070e 	bge	r2,zero,314e0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   314c4:	00314040 	call	31404 <alt_get_errno>
   314c8:	1007883a 	mov	r3,r2
   314cc:	e0bffe17 	ldw	r2,-8(fp)
   314d0:	0085c83a 	sub	r2,zero,r2
   314d4:	18800015 	stw	r2,0(r3)
      return -1;
   314d8:	00bfffc4 	movi	r2,-1
   314dc:	00000706 	br	314fc <close+0xbc>
    }
    return 0;
   314e0:	0005883a 	mov	r2,zero
   314e4:	00000506 	br	314fc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   314e8:	00314040 	call	31404 <alt_get_errno>
   314ec:	1007883a 	mov	r3,r2
   314f0:	00801444 	movi	r2,81
   314f4:	18800015 	stw	r2,0(r3)
    return -1;
   314f8:	00bfffc4 	movi	r2,-1
  }
}
   314fc:	e037883a 	mov	sp,fp
   31500:	dfc00117 	ldw	ra,4(sp)
   31504:	df000017 	ldw	fp,0(sp)
   31508:	dec00204 	addi	sp,sp,8
   3150c:	f800283a 	ret

00031510 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   31510:	defffc04 	addi	sp,sp,-16
   31514:	df000315 	stw	fp,12(sp)
   31518:	df000304 	addi	fp,sp,12
   3151c:	e13ffd15 	stw	r4,-12(fp)
   31520:	e17ffe15 	stw	r5,-8(fp)
   31524:	e1bfff15 	stw	r6,-4(fp)
  return len;
   31528:	e0bfff17 	ldw	r2,-4(fp)
}
   3152c:	e037883a 	mov	sp,fp
   31530:	df000017 	ldw	fp,0(sp)
   31534:	dec00104 	addi	sp,sp,4
   31538:	f800283a 	ret

0003153c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3153c:	defffe04 	addi	sp,sp,-8
   31540:	dfc00115 	stw	ra,4(sp)
   31544:	df000015 	stw	fp,0(sp)
   31548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3154c:	d0a00c17 	ldw	r2,-32720(gp)
   31550:	10000326 	beq	r2,zero,31560 <alt_get_errno+0x24>
   31554:	d0a00c17 	ldw	r2,-32720(gp)
   31558:	103ee83a 	callr	r2
   3155c:	00000106 	br	31564 <alt_get_errno+0x28>
   31560:	d0a71e04 	addi	r2,gp,-25480
}
   31564:	e037883a 	mov	sp,fp
   31568:	dfc00117 	ldw	ra,4(sp)
   3156c:	df000017 	ldw	fp,0(sp)
   31570:	dec00204 	addi	sp,sp,8
   31574:	f800283a 	ret

00031578 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   31578:	defffb04 	addi	sp,sp,-20
   3157c:	dfc00415 	stw	ra,16(sp)
   31580:	df000315 	stw	fp,12(sp)
   31584:	df000304 	addi	fp,sp,12
   31588:	e13ffe15 	stw	r4,-8(fp)
   3158c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31590:	e0bffe17 	ldw	r2,-8(fp)
   31594:	10000616 	blt	r2,zero,315b0 <fstat+0x38>
   31598:	e0bffe17 	ldw	r2,-8(fp)
   3159c:	10c00324 	muli	r3,r2,12
   315a0:	008000f4 	movhi	r2,3
   315a4:	1099e604 	addi	r2,r2,26520
   315a8:	1885883a 	add	r2,r3,r2
   315ac:	00000106 	br	315b4 <fstat+0x3c>
   315b0:	0005883a 	mov	r2,zero
   315b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   315b8:	e0bffd17 	ldw	r2,-12(fp)
   315bc:	10001026 	beq	r2,zero,31600 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   315c0:	e0bffd17 	ldw	r2,-12(fp)
   315c4:	10800017 	ldw	r2,0(r2)
   315c8:	10800817 	ldw	r2,32(r2)
   315cc:	10000726 	beq	r2,zero,315ec <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   315d0:	e0bffd17 	ldw	r2,-12(fp)
   315d4:	10800017 	ldw	r2,0(r2)
   315d8:	10800817 	ldw	r2,32(r2)
   315dc:	e17fff17 	ldw	r5,-4(fp)
   315e0:	e13ffd17 	ldw	r4,-12(fp)
   315e4:	103ee83a 	callr	r2
   315e8:	00000a06 	br	31614 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   315ec:	e0bfff17 	ldw	r2,-4(fp)
   315f0:	00c80004 	movi	r3,8192
   315f4:	10c00115 	stw	r3,4(r2)
      return 0;
   315f8:	0005883a 	mov	r2,zero
   315fc:	00000506 	br	31614 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   31600:	003153c0 	call	3153c <alt_get_errno>
   31604:	1007883a 	mov	r3,r2
   31608:	00801444 	movi	r2,81
   3160c:	18800015 	stw	r2,0(r3)
    return -1;
   31610:	00bfffc4 	movi	r2,-1
  }
}
   31614:	e037883a 	mov	sp,fp
   31618:	dfc00117 	ldw	ra,4(sp)
   3161c:	df000017 	ldw	fp,0(sp)
   31620:	dec00204 	addi	sp,sp,8
   31624:	f800283a 	ret

00031628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31628:	defffe04 	addi	sp,sp,-8
   3162c:	dfc00115 	stw	ra,4(sp)
   31630:	df000015 	stw	fp,0(sp)
   31634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31638:	d0a00c17 	ldw	r2,-32720(gp)
   3163c:	10000326 	beq	r2,zero,3164c <alt_get_errno+0x24>
   31640:	d0a00c17 	ldw	r2,-32720(gp)
   31644:	103ee83a 	callr	r2
   31648:	00000106 	br	31650 <alt_get_errno+0x28>
   3164c:	d0a71e04 	addi	r2,gp,-25480
}
   31650:	e037883a 	mov	sp,fp
   31654:	dfc00117 	ldw	ra,4(sp)
   31658:	df000017 	ldw	fp,0(sp)
   3165c:	dec00204 	addi	sp,sp,8
   31660:	f800283a 	ret

00031664 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   31664:	deffed04 	addi	sp,sp,-76
   31668:	dfc01215 	stw	ra,72(sp)
   3166c:	df001115 	stw	fp,68(sp)
   31670:	df001104 	addi	fp,sp,68
   31674:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31678:	e0bfff17 	ldw	r2,-4(fp)
   3167c:	10000616 	blt	r2,zero,31698 <isatty+0x34>
   31680:	e0bfff17 	ldw	r2,-4(fp)
   31684:	10c00324 	muli	r3,r2,12
   31688:	008000f4 	movhi	r2,3
   3168c:	1099e604 	addi	r2,r2,26520
   31690:	1885883a 	add	r2,r3,r2
   31694:	00000106 	br	3169c <isatty+0x38>
   31698:	0005883a 	mov	r2,zero
   3169c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   316a0:	e0bfef17 	ldw	r2,-68(fp)
   316a4:	10000e26 	beq	r2,zero,316e0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   316a8:	e0bfef17 	ldw	r2,-68(fp)
   316ac:	10800017 	ldw	r2,0(r2)
   316b0:	10800817 	ldw	r2,32(r2)
   316b4:	1000021e 	bne	r2,zero,316c0 <isatty+0x5c>
    {
      return 1;
   316b8:	00800044 	movi	r2,1
   316bc:	00000d06 	br	316f4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   316c0:	e0bff004 	addi	r2,fp,-64
   316c4:	100b883a 	mov	r5,r2
   316c8:	e13fff17 	ldw	r4,-4(fp)
   316cc:	00315780 	call	31578 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   316d0:	e0bff117 	ldw	r2,-60(fp)
   316d4:	10880020 	cmpeqi	r2,r2,8192
   316d8:	10803fcc 	andi	r2,r2,255
   316dc:	00000506 	br	316f4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   316e0:	00316280 	call	31628 <alt_get_errno>
   316e4:	1007883a 	mov	r3,r2
   316e8:	00801444 	movi	r2,81
   316ec:	18800015 	stw	r2,0(r3)
    return 0;
   316f0:	0005883a 	mov	r2,zero
  }
}
   316f4:	e037883a 	mov	sp,fp
   316f8:	dfc00117 	ldw	ra,4(sp)
   316fc:	df000017 	ldw	fp,0(sp)
   31700:	dec00204 	addi	sp,sp,8
   31704:	f800283a 	ret

00031708 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   31708:	defffc04 	addi	sp,sp,-16
   3170c:	df000315 	stw	fp,12(sp)
   31710:	df000304 	addi	fp,sp,12
   31714:	e13ffd15 	stw	r4,-12(fp)
   31718:	e17ffe15 	stw	r5,-8(fp)
   3171c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   31720:	e0fffe17 	ldw	r3,-8(fp)
   31724:	e0bffd17 	ldw	r2,-12(fp)
   31728:	18800c26 	beq	r3,r2,3175c <alt_load_section+0x54>
  {
    while( to != end )
   3172c:	00000806 	br	31750 <alt_load_section+0x48>
    {
      *to++ = *from++;
   31730:	e0bffe17 	ldw	r2,-8(fp)
   31734:	10c00104 	addi	r3,r2,4
   31738:	e0fffe15 	stw	r3,-8(fp)
   3173c:	e0fffd17 	ldw	r3,-12(fp)
   31740:	19000104 	addi	r4,r3,4
   31744:	e13ffd15 	stw	r4,-12(fp)
   31748:	18c00017 	ldw	r3,0(r3)
   3174c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   31750:	e0fffe17 	ldw	r3,-8(fp)
   31754:	e0bfff17 	ldw	r2,-4(fp)
   31758:	18bff51e 	bne	r3,r2,31730 <__alt_data_end+0xf4031730>
    {
      *to++ = *from++;
    }
  }
}
   3175c:	0001883a 	nop
   31760:	e037883a 	mov	sp,fp
   31764:	df000017 	ldw	fp,0(sp)
   31768:	dec00104 	addi	sp,sp,4
   3176c:	f800283a 	ret

00031770 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   31770:	defffe04 	addi	sp,sp,-8
   31774:	dfc00115 	stw	ra,4(sp)
   31778:	df000015 	stw	fp,0(sp)
   3177c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   31780:	018000f4 	movhi	r6,3
   31784:	319eb304 	addi	r6,r6,31436
   31788:	014000f4 	movhi	r5,3
   3178c:	2957b304 	addi	r5,r5,24268
   31790:	010000f4 	movhi	r4,3
   31794:	211eb304 	addi	r4,r4,31436
   31798:	00317080 	call	31708 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   3179c:	018000b4 	movhi	r6,2
   317a0:	31809204 	addi	r6,r6,584
   317a4:	014000b4 	movhi	r5,2
   317a8:	29400804 	addi	r5,r5,32
   317ac:	010000b4 	movhi	r4,2
   317b0:	21000804 	addi	r4,r4,32
   317b4:	00317080 	call	31708 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   317b8:	018000f4 	movhi	r6,3
   317bc:	3197b304 	addi	r6,r6,24268
   317c0:	014000f4 	movhi	r5,3
   317c4:	2955a804 	addi	r5,r5,22176
   317c8:	010000f4 	movhi	r4,3
   317cc:	2115a804 	addi	r4,r4,22176
   317d0:	00317080 	call	31708 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   317d4:	00346ac0 	call	346ac <alt_dcache_flush_all>
  alt_icache_flush_all();
   317d8:	00349240 	call	34924 <alt_icache_flush_all>
}
   317dc:	0001883a 	nop
   317e0:	e037883a 	mov	sp,fp
   317e4:	dfc00117 	ldw	ra,4(sp)
   317e8:	df000017 	ldw	fp,0(sp)
   317ec:	dec00204 	addi	sp,sp,8
   317f0:	f800283a 	ret

000317f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   317f4:	defffe04 	addi	sp,sp,-8
   317f8:	dfc00115 	stw	ra,4(sp)
   317fc:	df000015 	stw	fp,0(sp)
   31800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31804:	d0a00c17 	ldw	r2,-32720(gp)
   31808:	10000326 	beq	r2,zero,31818 <alt_get_errno+0x24>
   3180c:	d0a00c17 	ldw	r2,-32720(gp)
   31810:	103ee83a 	callr	r2
   31814:	00000106 	br	3181c <alt_get_errno+0x28>
   31818:	d0a71e04 	addi	r2,gp,-25480
}
   3181c:	e037883a 	mov	sp,fp
   31820:	dfc00117 	ldw	ra,4(sp)
   31824:	df000017 	ldw	fp,0(sp)
   31828:	dec00204 	addi	sp,sp,8
   3182c:	f800283a 	ret

00031830 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   31830:	defff904 	addi	sp,sp,-28
   31834:	dfc00615 	stw	ra,24(sp)
   31838:	df000515 	stw	fp,20(sp)
   3183c:	df000504 	addi	fp,sp,20
   31840:	e13ffd15 	stw	r4,-12(fp)
   31844:	e17ffe15 	stw	r5,-8(fp)
   31848:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   3184c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31850:	e0bffd17 	ldw	r2,-12(fp)
   31854:	10000616 	blt	r2,zero,31870 <lseek+0x40>
   31858:	e0bffd17 	ldw	r2,-12(fp)
   3185c:	10c00324 	muli	r3,r2,12
   31860:	008000f4 	movhi	r2,3
   31864:	1099e604 	addi	r2,r2,26520
   31868:	1885883a 	add	r2,r3,r2
   3186c:	00000106 	br	31874 <lseek+0x44>
   31870:	0005883a 	mov	r2,zero
   31874:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   31878:	e0bffc17 	ldw	r2,-16(fp)
   3187c:	10001026 	beq	r2,zero,318c0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   31880:	e0bffc17 	ldw	r2,-16(fp)
   31884:	10800017 	ldw	r2,0(r2)
   31888:	10800717 	ldw	r2,28(r2)
   3188c:	10000926 	beq	r2,zero,318b4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   31890:	e0bffc17 	ldw	r2,-16(fp)
   31894:	10800017 	ldw	r2,0(r2)
   31898:	10800717 	ldw	r2,28(r2)
   3189c:	e1bfff17 	ldw	r6,-4(fp)
   318a0:	e17ffe17 	ldw	r5,-8(fp)
   318a4:	e13ffc17 	ldw	r4,-16(fp)
   318a8:	103ee83a 	callr	r2
   318ac:	e0bffb15 	stw	r2,-20(fp)
   318b0:	00000506 	br	318c8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   318b4:	00bfde84 	movi	r2,-134
   318b8:	e0bffb15 	stw	r2,-20(fp)
   318bc:	00000206 	br	318c8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   318c0:	00bfebc4 	movi	r2,-81
   318c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   318c8:	e0bffb17 	ldw	r2,-20(fp)
   318cc:	1000070e 	bge	r2,zero,318ec <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   318d0:	00317f40 	call	317f4 <alt_get_errno>
   318d4:	1007883a 	mov	r3,r2
   318d8:	e0bffb17 	ldw	r2,-20(fp)
   318dc:	0085c83a 	sub	r2,zero,r2
   318e0:	18800015 	stw	r2,0(r3)
    rc = -1;
   318e4:	00bfffc4 	movi	r2,-1
   318e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   318ec:	e0bffb17 	ldw	r2,-20(fp)
}
   318f0:	e037883a 	mov	sp,fp
   318f4:	dfc00117 	ldw	ra,4(sp)
   318f8:	df000017 	ldw	fp,0(sp)
   318fc:	dec00204 	addi	sp,sp,8
   31900:	f800283a 	ret

00031904 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   31904:	defffd04 	addi	sp,sp,-12
   31908:	dfc00215 	stw	ra,8(sp)
   3190c:	df000115 	stw	fp,4(sp)
   31910:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   31914:	0009883a 	mov	r4,zero
   31918:	0031e500 	call	31e50 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   3191c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   31920:	0031e880 	call	31e88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   31924:	018000f4 	movhi	r6,3
   31928:	31978a04 	addi	r6,r6,24104
   3192c:	014000f4 	movhi	r5,3
   31930:	29578a04 	addi	r5,r5,24104
   31934:	010000f4 	movhi	r4,3
   31938:	21178a04 	addi	r4,r4,24104
   3193c:	0034a1c0 	call	34a1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   31940:	00347d40 	call	347d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   31944:	010000f4 	movhi	r4,3
   31948:	21120d04 	addi	r4,r4,18484
   3194c:	003530c0 	call	3530c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   31950:	d0a71f17 	ldw	r2,-25476(gp)
   31954:	d0e72017 	ldw	r3,-25472(gp)
   31958:	d1272117 	ldw	r4,-25468(gp)
   3195c:	200d883a 	mov	r6,r4
   31960:	180b883a 	mov	r5,r3
   31964:	1009883a 	mov	r4,r2
   31968:	00202940 	call	20294 <main>
   3196c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   31970:	01000044 	movi	r4,1
   31974:	00314400 	call	31440 <close>
  exit (result);
   31978:	e13fff17 	ldw	r4,-4(fp)
   3197c:	00353200 	call	35320 <exit>

00031980 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   31980:	defffe04 	addi	sp,sp,-8
   31984:	df000115 	stw	fp,4(sp)
   31988:	df000104 	addi	fp,sp,4
   3198c:	e13fff15 	stw	r4,-4(fp)
}
   31990:	0001883a 	nop
   31994:	e037883a 	mov	sp,fp
   31998:	df000017 	ldw	fp,0(sp)
   3199c:	dec00104 	addi	sp,sp,4
   319a0:	f800283a 	ret

000319a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   319a4:	defffe04 	addi	sp,sp,-8
   319a8:	df000115 	stw	fp,4(sp)
   319ac:	df000104 	addi	fp,sp,4
   319b0:	e13fff15 	stw	r4,-4(fp)
}
   319b4:	0001883a 	nop
   319b8:	e037883a 	mov	sp,fp
   319bc:	df000017 	ldw	fp,0(sp)
   319c0:	dec00104 	addi	sp,sp,4
   319c4:	f800283a 	ret

000319c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   319c8:	defffe04 	addi	sp,sp,-8
   319cc:	dfc00115 	stw	ra,4(sp)
   319d0:	df000015 	stw	fp,0(sp)
   319d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   319d8:	d0a00c17 	ldw	r2,-32720(gp)
   319dc:	10000326 	beq	r2,zero,319ec <alt_get_errno+0x24>
   319e0:	d0a00c17 	ldw	r2,-32720(gp)
   319e4:	103ee83a 	callr	r2
   319e8:	00000106 	br	319f0 <alt_get_errno+0x28>
   319ec:	d0a71e04 	addi	r2,gp,-25480
}
   319f0:	e037883a 	mov	sp,fp
   319f4:	dfc00117 	ldw	ra,4(sp)
   319f8:	df000017 	ldw	fp,0(sp)
   319fc:	dec00204 	addi	sp,sp,8
   31a00:	f800283a 	ret

00031a04 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   31a04:	defff904 	addi	sp,sp,-28
   31a08:	dfc00615 	stw	ra,24(sp)
   31a0c:	df000515 	stw	fp,20(sp)
   31a10:	df000504 	addi	fp,sp,20
   31a14:	e13ffd15 	stw	r4,-12(fp)
   31a18:	e17ffe15 	stw	r5,-8(fp)
   31a1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31a20:	e0bffd17 	ldw	r2,-12(fp)
   31a24:	10000616 	blt	r2,zero,31a40 <read+0x3c>
   31a28:	e0bffd17 	ldw	r2,-12(fp)
   31a2c:	10c00324 	muli	r3,r2,12
   31a30:	008000f4 	movhi	r2,3
   31a34:	1099e604 	addi	r2,r2,26520
   31a38:	1885883a 	add	r2,r3,r2
   31a3c:	00000106 	br	31a44 <read+0x40>
   31a40:	0005883a 	mov	r2,zero
   31a44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   31a48:	e0bffb17 	ldw	r2,-20(fp)
   31a4c:	10002226 	beq	r2,zero,31ad8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31a50:	e0bffb17 	ldw	r2,-20(fp)
   31a54:	10800217 	ldw	r2,8(r2)
   31a58:	108000cc 	andi	r2,r2,3
   31a5c:	10800060 	cmpeqi	r2,r2,1
   31a60:	1000181e 	bne	r2,zero,31ac4 <read+0xc0>
        (fd->dev->read))
   31a64:	e0bffb17 	ldw	r2,-20(fp)
   31a68:	10800017 	ldw	r2,0(r2)
   31a6c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31a70:	10001426 	beq	r2,zero,31ac4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   31a74:	e0bffb17 	ldw	r2,-20(fp)
   31a78:	10800017 	ldw	r2,0(r2)
   31a7c:	10800517 	ldw	r2,20(r2)
   31a80:	e0ffff17 	ldw	r3,-4(fp)
   31a84:	180d883a 	mov	r6,r3
   31a88:	e17ffe17 	ldw	r5,-8(fp)
   31a8c:	e13ffb17 	ldw	r4,-20(fp)
   31a90:	103ee83a 	callr	r2
   31a94:	e0bffc15 	stw	r2,-16(fp)
   31a98:	e0bffc17 	ldw	r2,-16(fp)
   31a9c:	1000070e 	bge	r2,zero,31abc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   31aa0:	00319c80 	call	319c8 <alt_get_errno>
   31aa4:	1007883a 	mov	r3,r2
   31aa8:	e0bffc17 	ldw	r2,-16(fp)
   31aac:	0085c83a 	sub	r2,zero,r2
   31ab0:	18800015 	stw	r2,0(r3)
          return -1;
   31ab4:	00bfffc4 	movi	r2,-1
   31ab8:	00000c06 	br	31aec <read+0xe8>
        }
        return rval;
   31abc:	e0bffc17 	ldw	r2,-16(fp)
   31ac0:	00000a06 	br	31aec <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   31ac4:	00319c80 	call	319c8 <alt_get_errno>
   31ac8:	1007883a 	mov	r3,r2
   31acc:	00800344 	movi	r2,13
   31ad0:	18800015 	stw	r2,0(r3)
   31ad4:	00000406 	br	31ae8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   31ad8:	00319c80 	call	319c8 <alt_get_errno>
   31adc:	1007883a 	mov	r3,r2
   31ae0:	00801444 	movi	r2,81
   31ae4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   31ae8:	00bfffc4 	movi	r2,-1
}
   31aec:	e037883a 	mov	sp,fp
   31af0:	dfc00117 	ldw	ra,4(sp)
   31af4:	df000017 	ldw	fp,0(sp)
   31af8:	dec00204 	addi	sp,sp,8
   31afc:	f800283a 	ret

00031b00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   31b00:	defffe04 	addi	sp,sp,-8
   31b04:	df000115 	stw	fp,4(sp)
   31b08:	df000104 	addi	fp,sp,4
   31b0c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   31b10:	e0bfff17 	ldw	r2,-4(fp)
   31b14:	108000d0 	cmplti	r2,r2,3
   31b18:	10000d1e 	bne	r2,zero,31b50 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   31b1c:	008000f4 	movhi	r2,3
   31b20:	1099e604 	addi	r2,r2,26520
   31b24:	e0ffff17 	ldw	r3,-4(fp)
   31b28:	18c00324 	muli	r3,r3,12
   31b2c:	10c5883a 	add	r2,r2,r3
   31b30:	10800204 	addi	r2,r2,8
   31b34:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   31b38:	008000f4 	movhi	r2,3
   31b3c:	1099e604 	addi	r2,r2,26520
   31b40:	e0ffff17 	ldw	r3,-4(fp)
   31b44:	18c00324 	muli	r3,r3,12
   31b48:	10c5883a 	add	r2,r2,r3
   31b4c:	10000015 	stw	zero,0(r2)
  }
}
   31b50:	0001883a 	nop
   31b54:	e037883a 	mov	sp,fp
   31b58:	df000017 	ldw	fp,0(sp)
   31b5c:	dec00104 	addi	sp,sp,4
   31b60:	f800283a 	ret

00031b64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   31b64:	defff904 	addi	sp,sp,-28
   31b68:	df000615 	stw	fp,24(sp)
   31b6c:	df000604 	addi	fp,sp,24
   31b70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31b74:	0005303a 	rdctl	r2,status
   31b78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31b7c:	e0fffe17 	ldw	r3,-8(fp)
   31b80:	00bfff84 	movi	r2,-2
   31b84:	1884703a 	and	r2,r3,r2
   31b88:	1001703a 	wrctl	status,r2
  
  return context;
   31b8c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   31b90:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   31b94:	d0a00d17 	ldw	r2,-32716(gp)
   31b98:	10c000c4 	addi	r3,r2,3
   31b9c:	00bfff04 	movi	r2,-4
   31ba0:	1884703a 	and	r2,r3,r2
   31ba4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   31ba8:	d0e00d17 	ldw	r3,-32716(gp)
   31bac:	e0bfff17 	ldw	r2,-4(fp)
   31bb0:	1887883a 	add	r3,r3,r2
   31bb4:	00830034 	movhi	r2,3072
   31bb8:	10800004 	addi	r2,r2,0
   31bbc:	10c0062e 	bgeu	r2,r3,31bd8 <sbrk+0x74>
   31bc0:	e0bffb17 	ldw	r2,-20(fp)
   31bc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31bc8:	e0bffa17 	ldw	r2,-24(fp)
   31bcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   31bd0:	00bfffc4 	movi	r2,-1
   31bd4:	00000b06 	br	31c04 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   31bd8:	d0a00d17 	ldw	r2,-32716(gp)
   31bdc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   31be0:	d0e00d17 	ldw	r3,-32716(gp)
   31be4:	e0bfff17 	ldw	r2,-4(fp)
   31be8:	1885883a 	add	r2,r3,r2
   31bec:	d0a00d15 	stw	r2,-32716(gp)
   31bf0:	e0bffb17 	ldw	r2,-20(fp)
   31bf4:	e0bffc15 	stw	r2,-16(fp)
   31bf8:	e0bffc17 	ldw	r2,-16(fp)
   31bfc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   31c00:	e0bffd17 	ldw	r2,-12(fp)
} 
   31c04:	e037883a 	mov	sp,fp
   31c08:	df000017 	ldw	fp,0(sp)
   31c0c:	dec00104 	addi	sp,sp,4
   31c10:	f800283a 	ret

00031c14 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   31c14:	defffd04 	addi	sp,sp,-12
   31c18:	dfc00215 	stw	ra,8(sp)
   31c1c:	df000115 	stw	fp,4(sp)
   31c20:	df000104 	addi	fp,sp,4
   31c24:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   31c28:	e13fff17 	ldw	r4,-4(fp)
   31c2c:	00345540 	call	34554 <alt_busy_sleep>
}
   31c30:	e037883a 	mov	sp,fp
   31c34:	dfc00117 	ldw	ra,4(sp)
   31c38:	df000017 	ldw	fp,0(sp)
   31c3c:	dec00204 	addi	sp,sp,8
   31c40:	f800283a 	ret

00031c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31c44:	defffe04 	addi	sp,sp,-8
   31c48:	dfc00115 	stw	ra,4(sp)
   31c4c:	df000015 	stw	fp,0(sp)
   31c50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31c54:	d0a00c17 	ldw	r2,-32720(gp)
   31c58:	10000326 	beq	r2,zero,31c68 <alt_get_errno+0x24>
   31c5c:	d0a00c17 	ldw	r2,-32720(gp)
   31c60:	103ee83a 	callr	r2
   31c64:	00000106 	br	31c6c <alt_get_errno+0x28>
   31c68:	d0a71e04 	addi	r2,gp,-25480
}
   31c6c:	e037883a 	mov	sp,fp
   31c70:	dfc00117 	ldw	ra,4(sp)
   31c74:	df000017 	ldw	fp,0(sp)
   31c78:	dec00204 	addi	sp,sp,8
   31c7c:	f800283a 	ret

00031c80 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   31c80:	defff904 	addi	sp,sp,-28
   31c84:	dfc00615 	stw	ra,24(sp)
   31c88:	df000515 	stw	fp,20(sp)
   31c8c:	df000504 	addi	fp,sp,20
   31c90:	e13ffd15 	stw	r4,-12(fp)
   31c94:	e17ffe15 	stw	r5,-8(fp)
   31c98:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31c9c:	e0bffd17 	ldw	r2,-12(fp)
   31ca0:	10000616 	blt	r2,zero,31cbc <write+0x3c>
   31ca4:	e0bffd17 	ldw	r2,-12(fp)
   31ca8:	10c00324 	muli	r3,r2,12
   31cac:	008000f4 	movhi	r2,3
   31cb0:	1099e604 	addi	r2,r2,26520
   31cb4:	1885883a 	add	r2,r3,r2
   31cb8:	00000106 	br	31cc0 <write+0x40>
   31cbc:	0005883a 	mov	r2,zero
   31cc0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   31cc4:	e0bffb17 	ldw	r2,-20(fp)
   31cc8:	10002126 	beq	r2,zero,31d50 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   31ccc:	e0bffb17 	ldw	r2,-20(fp)
   31cd0:	10800217 	ldw	r2,8(r2)
   31cd4:	108000cc 	andi	r2,r2,3
   31cd8:	10001826 	beq	r2,zero,31d3c <write+0xbc>
   31cdc:	e0bffb17 	ldw	r2,-20(fp)
   31ce0:	10800017 	ldw	r2,0(r2)
   31ce4:	10800617 	ldw	r2,24(r2)
   31ce8:	10001426 	beq	r2,zero,31d3c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   31cec:	e0bffb17 	ldw	r2,-20(fp)
   31cf0:	10800017 	ldw	r2,0(r2)
   31cf4:	10800617 	ldw	r2,24(r2)
   31cf8:	e0ffff17 	ldw	r3,-4(fp)
   31cfc:	180d883a 	mov	r6,r3
   31d00:	e17ffe17 	ldw	r5,-8(fp)
   31d04:	e13ffb17 	ldw	r4,-20(fp)
   31d08:	103ee83a 	callr	r2
   31d0c:	e0bffc15 	stw	r2,-16(fp)
   31d10:	e0bffc17 	ldw	r2,-16(fp)
   31d14:	1000070e 	bge	r2,zero,31d34 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   31d18:	0031c440 	call	31c44 <alt_get_errno>
   31d1c:	1007883a 	mov	r3,r2
   31d20:	e0bffc17 	ldw	r2,-16(fp)
   31d24:	0085c83a 	sub	r2,zero,r2
   31d28:	18800015 	stw	r2,0(r3)
        return -1;
   31d2c:	00bfffc4 	movi	r2,-1
   31d30:	00000c06 	br	31d64 <write+0xe4>
      }
      return rval;
   31d34:	e0bffc17 	ldw	r2,-16(fp)
   31d38:	00000a06 	br	31d64 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   31d3c:	0031c440 	call	31c44 <alt_get_errno>
   31d40:	1007883a 	mov	r3,r2
   31d44:	00800344 	movi	r2,13
   31d48:	18800015 	stw	r2,0(r3)
   31d4c:	00000406 	br	31d60 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   31d50:	0031c440 	call	31c44 <alt_get_errno>
   31d54:	1007883a 	mov	r3,r2
   31d58:	00801444 	movi	r2,81
   31d5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   31d60:	00bfffc4 	movi	r2,-1
}
   31d64:	e037883a 	mov	sp,fp
   31d68:	dfc00117 	ldw	ra,4(sp)
   31d6c:	df000017 	ldw	fp,0(sp)
   31d70:	dec00204 	addi	sp,sp,8
   31d74:	f800283a 	ret

00031d78 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   31d78:	defffd04 	addi	sp,sp,-12
   31d7c:	dfc00215 	stw	ra,8(sp)
   31d80:	df000115 	stw	fp,4(sp)
   31d84:	df000104 	addi	fp,sp,4
   31d88:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   31d8c:	d1600904 	addi	r5,gp,-32732
   31d90:	e13fff17 	ldw	r4,-4(fp)
   31d94:	00347300 	call	34730 <alt_dev_llist_insert>
}
   31d98:	e037883a 	mov	sp,fp
   31d9c:	dfc00117 	ldw	ra,4(sp)
   31da0:	df000017 	ldw	fp,0(sp)
   31da4:	dec00204 	addi	sp,sp,8
   31da8:	f800283a 	ret

00031dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31dac:	defffe04 	addi	sp,sp,-8
   31db0:	dfc00115 	stw	ra,4(sp)
   31db4:	df000015 	stw	fp,0(sp)
   31db8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31dbc:	d0a00c17 	ldw	r2,-32720(gp)
   31dc0:	10000326 	beq	r2,zero,31dd0 <alt_get_errno+0x24>
   31dc4:	d0a00c17 	ldw	r2,-32720(gp)
   31dc8:	103ee83a 	callr	r2
   31dcc:	00000106 	br	31dd4 <alt_get_errno+0x28>
   31dd0:	d0a71e04 	addi	r2,gp,-25480
}
   31dd4:	e037883a 	mov	sp,fp
   31dd8:	dfc00117 	ldw	ra,4(sp)
   31ddc:	df000017 	ldw	fp,0(sp)
   31de0:	dec00204 	addi	sp,sp,8
   31de4:	f800283a 	ret

00031de8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
   31de8:	defffc04 	addi	sp,sp,-16
   31dec:	dfc00315 	stw	ra,12(sp)
   31df0:	df000215 	stw	fp,8(sp)
   31df4:	df000204 	addi	fp,sp,8
   31df8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   31dfc:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
   31e00:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
   31e04:	e0bffe17 	ldw	r2,-8(fp)
   31e08:	1000051e 	bne	r2,zero,31e20 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   31e0c:	d1601004 	addi	r5,gp,-32704
   31e10:	e13fff17 	ldw	r4,-4(fp)
   31e14:	00347300 	call	34730 <alt_dev_llist_insert>
   31e18:	e0bffe15 	stw	r2,-8(fp)
   31e1c:	00000606 	br	31e38 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
   31e20:	0031dac0 	call	31dac <alt_get_errno>
   31e24:	1007883a 	mov	r3,r2
   31e28:	00800304 	movi	r2,12
   31e2c:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
   31e30:	00bffd04 	movi	r2,-12
   31e34:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
   31e38:	e0bffe17 	ldw	r2,-8(fp)
}
   31e3c:	e037883a 	mov	sp,fp
   31e40:	dfc00117 	ldw	ra,4(sp)
   31e44:	df000017 	ldw	fp,0(sp)
   31e48:	dec00204 	addi	sp,sp,8
   31e4c:	f800283a 	ret

00031e50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   31e50:	defffd04 	addi	sp,sp,-12
   31e54:	dfc00215 	stw	ra,8(sp)
   31e58:	df000115 	stw	fp,4(sp)
   31e5c:	df000104 	addi	fp,sp,4
   31e60:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_SOUND_ACQUISITION, nios2_sound_acquisition);
   31e64:	00350100 	call	35010 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   31e68:	00800044 	movi	r2,1
   31e6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   31e70:	0001883a 	nop
   31e74:	e037883a 	mov	sp,fp
   31e78:	dfc00117 	ldw	ra,4(sp)
   31e7c:	df000017 	ldw	fp,0(sp)
   31e80:	dec00204 	addi	sp,sp,8
   31e84:	f800283a 	ret

00031e88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   31e88:	defffe04 	addi	sp,sp,-8
   31e8c:	dfc00115 	stw	ra,4(sp)
   31e90:	df000015 	stw	fp,0(sp)
   31e94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   31e98:	01800044 	movi	r6,1
   31e9c:	000b883a 	mov	r5,zero
   31ea0:	010000f4 	movhi	r4,3
   31ea4:	211a5004 	addi	r4,r4,26944
   31ea8:	00320840 	call	32084 <altera_avalon_jtag_uart_init>
   31eac:	010000f4 	movhi	r4,3
   31eb0:	211a4604 	addi	r4,r4,26904
   31eb4:	0031d780 	call	31d78 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_FFT, mailbox_to_FFT);
   31eb8:	018000c4 	movi	r6,3
   31ebc:	000b883a 	mov	r5,zero
   31ec0:	010000f4 	movhi	r4,3
   31ec4:	211e5e04 	addi	r4,r4,31096
   31ec8:	0032c700 	call	32c70 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_SOUND_ACQUISITION, mailbox_to_Sound_Acquisition);
   31ecc:	01800104 	movi	r6,4
   31ed0:	000b883a 	mov	r5,zero
   31ed4:	010000f4 	movhi	r4,3
   31ed8:	211e7004 	addi	r4,r4,31168
   31edc:	0032c700 	call	32c70 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
   31ee0:	010000f4 	movhi	r4,3
   31ee4:	211e8204 	addi	r4,r4,31240
   31ee8:	0031de80 	call	31de8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   31eec:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
   31ef0:	010000f4 	movhi	r4,3
   31ef4:	211e8604 	addi	r4,r4,31256
   31ef8:	0031d780 	call	31d78 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
   31efc:	010000f4 	movhi	r4,3
   31f00:	211e9204 	addi	r4,r4,31304
   31f04:	0031d780 	call	31d78 <alt_dev_reg>
}
   31f08:	0001883a 	nop
   31f0c:	e037883a 	mov	sp,fp
   31f10:	dfc00117 	ldw	ra,4(sp)
   31f14:	df000017 	ldw	fp,0(sp)
   31f18:	dec00204 	addi	sp,sp,8
   31f1c:	f800283a 	ret

00031f20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   31f20:	defffa04 	addi	sp,sp,-24
   31f24:	dfc00515 	stw	ra,20(sp)
   31f28:	df000415 	stw	fp,16(sp)
   31f2c:	df000404 	addi	fp,sp,16
   31f30:	e13ffd15 	stw	r4,-12(fp)
   31f34:	e17ffe15 	stw	r5,-8(fp)
   31f38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   31f3c:	e0bffd17 	ldw	r2,-12(fp)
   31f40:	10800017 	ldw	r2,0(r2)
   31f44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   31f48:	e0bffc17 	ldw	r2,-16(fp)
   31f4c:	10c00a04 	addi	r3,r2,40
   31f50:	e0bffd17 	ldw	r2,-12(fp)
   31f54:	10800217 	ldw	r2,8(r2)
   31f58:	100f883a 	mov	r7,r2
   31f5c:	e1bfff17 	ldw	r6,-4(fp)
   31f60:	e17ffe17 	ldw	r5,-8(fp)
   31f64:	1809883a 	mov	r4,r3
   31f68:	00325400 	call	32540 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   31f6c:	e037883a 	mov	sp,fp
   31f70:	dfc00117 	ldw	ra,4(sp)
   31f74:	df000017 	ldw	fp,0(sp)
   31f78:	dec00204 	addi	sp,sp,8
   31f7c:	f800283a 	ret

00031f80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   31f80:	defffa04 	addi	sp,sp,-24
   31f84:	dfc00515 	stw	ra,20(sp)
   31f88:	df000415 	stw	fp,16(sp)
   31f8c:	df000404 	addi	fp,sp,16
   31f90:	e13ffd15 	stw	r4,-12(fp)
   31f94:	e17ffe15 	stw	r5,-8(fp)
   31f98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   31f9c:	e0bffd17 	ldw	r2,-12(fp)
   31fa0:	10800017 	ldw	r2,0(r2)
   31fa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   31fa8:	e0bffc17 	ldw	r2,-16(fp)
   31fac:	10c00a04 	addi	r3,r2,40
   31fb0:	e0bffd17 	ldw	r2,-12(fp)
   31fb4:	10800217 	ldw	r2,8(r2)
   31fb8:	100f883a 	mov	r7,r2
   31fbc:	e1bfff17 	ldw	r6,-4(fp)
   31fc0:	e17ffe17 	ldw	r5,-8(fp)
   31fc4:	1809883a 	mov	r4,r3
   31fc8:	003275c0 	call	3275c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   31fcc:	e037883a 	mov	sp,fp
   31fd0:	dfc00117 	ldw	ra,4(sp)
   31fd4:	df000017 	ldw	fp,0(sp)
   31fd8:	dec00204 	addi	sp,sp,8
   31fdc:	f800283a 	ret

00031fe0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   31fe0:	defffc04 	addi	sp,sp,-16
   31fe4:	dfc00315 	stw	ra,12(sp)
   31fe8:	df000215 	stw	fp,8(sp)
   31fec:	df000204 	addi	fp,sp,8
   31ff0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   31ff4:	e0bfff17 	ldw	r2,-4(fp)
   31ff8:	10800017 	ldw	r2,0(r2)
   31ffc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   32000:	e0bffe17 	ldw	r2,-8(fp)
   32004:	10c00a04 	addi	r3,r2,40
   32008:	e0bfff17 	ldw	r2,-4(fp)
   3200c:	10800217 	ldw	r2,8(r2)
   32010:	100b883a 	mov	r5,r2
   32014:	1809883a 	mov	r4,r3
   32018:	00323e80 	call	323e8 <altera_avalon_jtag_uart_close>
}
   3201c:	e037883a 	mov	sp,fp
   32020:	dfc00117 	ldw	ra,4(sp)
   32024:	df000017 	ldw	fp,0(sp)
   32028:	dec00204 	addi	sp,sp,8
   3202c:	f800283a 	ret

00032030 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   32030:	defffa04 	addi	sp,sp,-24
   32034:	dfc00515 	stw	ra,20(sp)
   32038:	df000415 	stw	fp,16(sp)
   3203c:	df000404 	addi	fp,sp,16
   32040:	e13ffd15 	stw	r4,-12(fp)
   32044:	e17ffe15 	stw	r5,-8(fp)
   32048:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   3204c:	e0bffd17 	ldw	r2,-12(fp)
   32050:	10800017 	ldw	r2,0(r2)
   32054:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   32058:	e0bffc17 	ldw	r2,-16(fp)
   3205c:	10800a04 	addi	r2,r2,40
   32060:	e1bfff17 	ldw	r6,-4(fp)
   32064:	e17ffe17 	ldw	r5,-8(fp)
   32068:	1009883a 	mov	r4,r2
   3206c:	00324500 	call	32450 <altera_avalon_jtag_uart_ioctl>
}
   32070:	e037883a 	mov	sp,fp
   32074:	dfc00117 	ldw	ra,4(sp)
   32078:	df000017 	ldw	fp,0(sp)
   3207c:	dec00204 	addi	sp,sp,8
   32080:	f800283a 	ret

00032084 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   32084:	defffb04 	addi	sp,sp,-20
   32088:	dfc00415 	stw	ra,16(sp)
   3208c:	df000315 	stw	fp,12(sp)
   32090:	df000304 	addi	fp,sp,12
   32094:	e13ffd15 	stw	r4,-12(fp)
   32098:	e17ffe15 	stw	r5,-8(fp)
   3209c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   320a0:	e0bffd17 	ldw	r2,-12(fp)
   320a4:	00c00044 	movi	r3,1
   320a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   320ac:	e0bffd17 	ldw	r2,-12(fp)
   320b0:	10800017 	ldw	r2,0(r2)
   320b4:	10800104 	addi	r2,r2,4
   320b8:	1007883a 	mov	r3,r2
   320bc:	e0bffd17 	ldw	r2,-12(fp)
   320c0:	10800817 	ldw	r2,32(r2)
   320c4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   320c8:	e0bfff17 	ldw	r2,-4(fp)
   320cc:	018000f4 	movhi	r6,3
   320d0:	31884e04 	addi	r6,r6,8504
   320d4:	e17ffd17 	ldw	r5,-12(fp)
   320d8:	1009883a 	mov	r4,r2
   320dc:	0034a980 	call	34a98 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   320e0:	e0bffd17 	ldw	r2,-12(fp)
   320e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   320e8:	e0bffd17 	ldw	r2,-12(fp)
   320ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   320f0:	d0e72317 	ldw	r3,-25460(gp)
   320f4:	e1fffd17 	ldw	r7,-12(fp)
   320f8:	018000f4 	movhi	r6,3
   320fc:	3188d204 	addi	r6,r6,9032
   32100:	180b883a 	mov	r5,r3
   32104:	1009883a 	mov	r4,r2
   32108:	00344280 	call	34428 <alt_alarm_start>
   3210c:	1000040e 	bge	r2,zero,32120 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   32110:	e0fffd17 	ldw	r3,-12(fp)
   32114:	00a00034 	movhi	r2,32768
   32118:	10bfffc4 	addi	r2,r2,-1
   3211c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   32120:	0001883a 	nop
   32124:	e037883a 	mov	sp,fp
   32128:	dfc00117 	ldw	ra,4(sp)
   3212c:	df000017 	ldw	fp,0(sp)
   32130:	dec00204 	addi	sp,sp,8
   32134:	f800283a 	ret

00032138 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   32138:	defff704 	addi	sp,sp,-36
   3213c:	df000815 	stw	fp,32(sp)
   32140:	df000804 	addi	fp,sp,32
   32144:	e13ffe15 	stw	r4,-8(fp)
   32148:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   3214c:	e0bffe17 	ldw	r2,-8(fp)
   32150:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   32154:	e0bffa17 	ldw	r2,-24(fp)
   32158:	10800017 	ldw	r2,0(r2)
   3215c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   32160:	e0bffb17 	ldw	r2,-20(fp)
   32164:	10800104 	addi	r2,r2,4
   32168:	10800037 	ldwio	r2,0(r2)
   3216c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   32170:	e0bffc17 	ldw	r2,-16(fp)
   32174:	1080c00c 	andi	r2,r2,768
   32178:	10006d26 	beq	r2,zero,32330 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   3217c:	e0bffc17 	ldw	r2,-16(fp)
   32180:	1080400c 	andi	r2,r2,256
   32184:	10003526 	beq	r2,zero,3225c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   32188:	00800074 	movhi	r2,1
   3218c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32190:	e0bffa17 	ldw	r2,-24(fp)
   32194:	10800a17 	ldw	r2,40(r2)
   32198:	10800044 	addi	r2,r2,1
   3219c:	1081ffcc 	andi	r2,r2,2047
   321a0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   321a4:	e0bffa17 	ldw	r2,-24(fp)
   321a8:	10c00b17 	ldw	r3,44(r2)
   321ac:	e0bffd17 	ldw	r2,-12(fp)
   321b0:	18801526 	beq	r3,r2,32208 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   321b4:	e0bffb17 	ldw	r2,-20(fp)
   321b8:	10800037 	ldwio	r2,0(r2)
   321bc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   321c0:	e0bff817 	ldw	r2,-32(fp)
   321c4:	10a0000c 	andi	r2,r2,32768
   321c8:	10001126 	beq	r2,zero,32210 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   321cc:	e0bffa17 	ldw	r2,-24(fp)
   321d0:	10800a17 	ldw	r2,40(r2)
   321d4:	e0fff817 	ldw	r3,-32(fp)
   321d8:	1809883a 	mov	r4,r3
   321dc:	e0fffa17 	ldw	r3,-24(fp)
   321e0:	1885883a 	add	r2,r3,r2
   321e4:	10800e04 	addi	r2,r2,56
   321e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   321ec:	e0bffa17 	ldw	r2,-24(fp)
   321f0:	10800a17 	ldw	r2,40(r2)
   321f4:	10800044 	addi	r2,r2,1
   321f8:	10c1ffcc 	andi	r3,r2,2047
   321fc:	e0bffa17 	ldw	r2,-24(fp)
   32200:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   32204:	003fe206 	br	32190 <__alt_data_end+0xf4032190>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   32208:	0001883a 	nop
   3220c:	00000106 	br	32214 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   32210:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   32214:	e0bff817 	ldw	r2,-32(fp)
   32218:	10bfffec 	andhi	r2,r2,65535
   3221c:	10000f26 	beq	r2,zero,3225c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   32220:	e0bffa17 	ldw	r2,-24(fp)
   32224:	10c00817 	ldw	r3,32(r2)
   32228:	00bfff84 	movi	r2,-2
   3222c:	1886703a 	and	r3,r3,r2
   32230:	e0bffa17 	ldw	r2,-24(fp)
   32234:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   32238:	e0bffb17 	ldw	r2,-20(fp)
   3223c:	10800104 	addi	r2,r2,4
   32240:	1007883a 	mov	r3,r2
   32244:	e0bffa17 	ldw	r2,-24(fp)
   32248:	10800817 	ldw	r2,32(r2)
   3224c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   32250:	e0bffb17 	ldw	r2,-20(fp)
   32254:	10800104 	addi	r2,r2,4
   32258:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3225c:	e0bffc17 	ldw	r2,-16(fp)
   32260:	1080800c 	andi	r2,r2,512
   32264:	103fbe26 	beq	r2,zero,32160 <__alt_data_end+0xf4032160>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   32268:	e0bffc17 	ldw	r2,-16(fp)
   3226c:	1004d43a 	srli	r2,r2,16
   32270:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   32274:	00001406 	br	322c8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   32278:	e0bffb17 	ldw	r2,-20(fp)
   3227c:	e0fffa17 	ldw	r3,-24(fp)
   32280:	18c00d17 	ldw	r3,52(r3)
   32284:	e13ffa17 	ldw	r4,-24(fp)
   32288:	20c7883a 	add	r3,r4,r3
   3228c:	18c20e04 	addi	r3,r3,2104
   32290:	18c00003 	ldbu	r3,0(r3)
   32294:	18c03fcc 	andi	r3,r3,255
   32298:	18c0201c 	xori	r3,r3,128
   3229c:	18ffe004 	addi	r3,r3,-128
   322a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   322a4:	e0bffa17 	ldw	r2,-24(fp)
   322a8:	10800d17 	ldw	r2,52(r2)
   322ac:	10800044 	addi	r2,r2,1
   322b0:	10c1ffcc 	andi	r3,r2,2047
   322b4:	e0bffa17 	ldw	r2,-24(fp)
   322b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   322bc:	e0bff917 	ldw	r2,-28(fp)
   322c0:	10bfffc4 	addi	r2,r2,-1
   322c4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   322c8:	e0bff917 	ldw	r2,-28(fp)
   322cc:	10000526 	beq	r2,zero,322e4 <altera_avalon_jtag_uart_irq+0x1ac>
   322d0:	e0bffa17 	ldw	r2,-24(fp)
   322d4:	10c00d17 	ldw	r3,52(r2)
   322d8:	e0bffa17 	ldw	r2,-24(fp)
   322dc:	10800c17 	ldw	r2,48(r2)
   322e0:	18bfe51e 	bne	r3,r2,32278 <__alt_data_end+0xf4032278>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   322e4:	e0bff917 	ldw	r2,-28(fp)
   322e8:	103f9d26 	beq	r2,zero,32160 <__alt_data_end+0xf4032160>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   322ec:	e0bffa17 	ldw	r2,-24(fp)
   322f0:	10c00817 	ldw	r3,32(r2)
   322f4:	00bfff44 	movi	r2,-3
   322f8:	1886703a 	and	r3,r3,r2
   322fc:	e0bffa17 	ldw	r2,-24(fp)
   32300:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32304:	e0bffa17 	ldw	r2,-24(fp)
   32308:	10800017 	ldw	r2,0(r2)
   3230c:	10800104 	addi	r2,r2,4
   32310:	1007883a 	mov	r3,r2
   32314:	e0bffa17 	ldw	r2,-24(fp)
   32318:	10800817 	ldw	r2,32(r2)
   3231c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   32320:	e0bffb17 	ldw	r2,-20(fp)
   32324:	10800104 	addi	r2,r2,4
   32328:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   3232c:	003f8c06 	br	32160 <__alt_data_end+0xf4032160>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   32330:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   32334:	0001883a 	nop
   32338:	e037883a 	mov	sp,fp
   3233c:	df000017 	ldw	fp,0(sp)
   32340:	dec00104 	addi	sp,sp,4
   32344:	f800283a 	ret

00032348 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   32348:	defff804 	addi	sp,sp,-32
   3234c:	df000715 	stw	fp,28(sp)
   32350:	df000704 	addi	fp,sp,28
   32354:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   32358:	e0bffb17 	ldw	r2,-20(fp)
   3235c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   32360:	e0bff917 	ldw	r2,-28(fp)
   32364:	10800017 	ldw	r2,0(r2)
   32368:	10800104 	addi	r2,r2,4
   3236c:	10800037 	ldwio	r2,0(r2)
   32370:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   32374:	e0bffa17 	ldw	r2,-24(fp)
   32378:	1081000c 	andi	r2,r2,1024
   3237c:	10000b26 	beq	r2,zero,323ac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   32380:	e0bff917 	ldw	r2,-28(fp)
   32384:	10800017 	ldw	r2,0(r2)
   32388:	10800104 	addi	r2,r2,4
   3238c:	1007883a 	mov	r3,r2
   32390:	e0bff917 	ldw	r2,-28(fp)
   32394:	10800817 	ldw	r2,32(r2)
   32398:	10810014 	ori	r2,r2,1024
   3239c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   323a0:	e0bff917 	ldw	r2,-28(fp)
   323a4:	10000915 	stw	zero,36(r2)
   323a8:	00000a06 	br	323d4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   323ac:	e0bff917 	ldw	r2,-28(fp)
   323b0:	10c00917 	ldw	r3,36(r2)
   323b4:	00a00034 	movhi	r2,32768
   323b8:	10bfff04 	addi	r2,r2,-4
   323bc:	10c00536 	bltu	r2,r3,323d4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   323c0:	e0bff917 	ldw	r2,-28(fp)
   323c4:	10800917 	ldw	r2,36(r2)
   323c8:	10c00044 	addi	r3,r2,1
   323cc:	e0bff917 	ldw	r2,-28(fp)
   323d0:	10c00915 	stw	r3,36(r2)
   323d4:	d0a72317 	ldw	r2,-25460(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   323d8:	e037883a 	mov	sp,fp
   323dc:	df000017 	ldw	fp,0(sp)
   323e0:	dec00104 	addi	sp,sp,4
   323e4:	f800283a 	ret

000323e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   323e8:	defffd04 	addi	sp,sp,-12
   323ec:	df000215 	stw	fp,8(sp)
   323f0:	df000204 	addi	fp,sp,8
   323f4:	e13ffe15 	stw	r4,-8(fp)
   323f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   323fc:	00000506 	br	32414 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   32400:	e0bfff17 	ldw	r2,-4(fp)
   32404:	1090000c 	andi	r2,r2,16384
   32408:	10000226 	beq	r2,zero,32414 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3240c:	00bffd44 	movi	r2,-11
   32410:	00000b06 	br	32440 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   32414:	e0bffe17 	ldw	r2,-8(fp)
   32418:	10c00d17 	ldw	r3,52(r2)
   3241c:	e0bffe17 	ldw	r2,-8(fp)
   32420:	10800c17 	ldw	r2,48(r2)
   32424:	18800526 	beq	r3,r2,3243c <altera_avalon_jtag_uart_close+0x54>
   32428:	e0bffe17 	ldw	r2,-8(fp)
   3242c:	10c00917 	ldw	r3,36(r2)
   32430:	e0bffe17 	ldw	r2,-8(fp)
   32434:	10800117 	ldw	r2,4(r2)
   32438:	18bff136 	bltu	r3,r2,32400 <__alt_data_end+0xf4032400>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3243c:	0005883a 	mov	r2,zero
}
   32440:	e037883a 	mov	sp,fp
   32444:	df000017 	ldw	fp,0(sp)
   32448:	dec00104 	addi	sp,sp,4
   3244c:	f800283a 	ret

00032450 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   32450:	defffa04 	addi	sp,sp,-24
   32454:	df000515 	stw	fp,20(sp)
   32458:	df000504 	addi	fp,sp,20
   3245c:	e13ffd15 	stw	r4,-12(fp)
   32460:	e17ffe15 	stw	r5,-8(fp)
   32464:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   32468:	00bff9c4 	movi	r2,-25
   3246c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   32470:	e0bffe17 	ldw	r2,-8(fp)
   32474:	10da8060 	cmpeqi	r3,r2,27137
   32478:	1800031e 	bne	r3,zero,32488 <altera_avalon_jtag_uart_ioctl+0x38>
   3247c:	109a80a0 	cmpeqi	r2,r2,27138
   32480:	1000181e 	bne	r2,zero,324e4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   32484:	00002906 	br	3252c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   32488:	e0bffd17 	ldw	r2,-12(fp)
   3248c:	10c00117 	ldw	r3,4(r2)
   32490:	00a00034 	movhi	r2,32768
   32494:	10bfffc4 	addi	r2,r2,-1
   32498:	18802126 	beq	r3,r2,32520 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   3249c:	e0bfff17 	ldw	r2,-4(fp)
   324a0:	10800017 	ldw	r2,0(r2)
   324a4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   324a8:	e0bffc17 	ldw	r2,-16(fp)
   324ac:	10800090 	cmplti	r2,r2,2
   324b0:	1000061e 	bne	r2,zero,324cc <altera_avalon_jtag_uart_ioctl+0x7c>
   324b4:	e0fffc17 	ldw	r3,-16(fp)
   324b8:	00a00034 	movhi	r2,32768
   324bc:	10bfffc4 	addi	r2,r2,-1
   324c0:	18800226 	beq	r3,r2,324cc <altera_avalon_jtag_uart_ioctl+0x7c>
   324c4:	e0bffc17 	ldw	r2,-16(fp)
   324c8:	00000206 	br	324d4 <altera_avalon_jtag_uart_ioctl+0x84>
   324cc:	00a00034 	movhi	r2,32768
   324d0:	10bfff84 	addi	r2,r2,-2
   324d4:	e0fffd17 	ldw	r3,-12(fp)
   324d8:	18800115 	stw	r2,4(r3)
      rc = 0;
   324dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   324e0:	00000f06 	br	32520 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   324e4:	e0bffd17 	ldw	r2,-12(fp)
   324e8:	10c00117 	ldw	r3,4(r2)
   324ec:	00a00034 	movhi	r2,32768
   324f0:	10bfffc4 	addi	r2,r2,-1
   324f4:	18800c26 	beq	r3,r2,32528 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   324f8:	e0bffd17 	ldw	r2,-12(fp)
   324fc:	10c00917 	ldw	r3,36(r2)
   32500:	e0bffd17 	ldw	r2,-12(fp)
   32504:	10800117 	ldw	r2,4(r2)
   32508:	1885803a 	cmpltu	r2,r3,r2
   3250c:	10c03fcc 	andi	r3,r2,255
   32510:	e0bfff17 	ldw	r2,-4(fp)
   32514:	10c00015 	stw	r3,0(r2)
      rc = 0;
   32518:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3251c:	00000206 	br	32528 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   32520:	0001883a 	nop
   32524:	00000106 	br	3252c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   32528:	0001883a 	nop

  default:
    break;
  }

  return rc;
   3252c:	e0bffb17 	ldw	r2,-20(fp)
}
   32530:	e037883a 	mov	sp,fp
   32534:	df000017 	ldw	fp,0(sp)
   32538:	dec00104 	addi	sp,sp,4
   3253c:	f800283a 	ret

00032540 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   32540:	defff304 	addi	sp,sp,-52
   32544:	dfc00c15 	stw	ra,48(sp)
   32548:	df000b15 	stw	fp,44(sp)
   3254c:	df000b04 	addi	fp,sp,44
   32550:	e13ffc15 	stw	r4,-16(fp)
   32554:	e17ffd15 	stw	r5,-12(fp)
   32558:	e1bffe15 	stw	r6,-8(fp)
   3255c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   32560:	e0bffd17 	ldw	r2,-12(fp)
   32564:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   32568:	00004706 	br	32688 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3256c:	e0bffc17 	ldw	r2,-16(fp)
   32570:	10800a17 	ldw	r2,40(r2)
   32574:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   32578:	e0bffc17 	ldw	r2,-16(fp)
   3257c:	10800b17 	ldw	r2,44(r2)
   32580:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   32584:	e0fff717 	ldw	r3,-36(fp)
   32588:	e0bff817 	ldw	r2,-32(fp)
   3258c:	18800536 	bltu	r3,r2,325a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   32590:	e0fff717 	ldw	r3,-36(fp)
   32594:	e0bff817 	ldw	r2,-32(fp)
   32598:	1885c83a 	sub	r2,r3,r2
   3259c:	e0bff615 	stw	r2,-40(fp)
   325a0:	00000406 	br	325b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   325a4:	00c20004 	movi	r3,2048
   325a8:	e0bff817 	ldw	r2,-32(fp)
   325ac:	1885c83a 	sub	r2,r3,r2
   325b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   325b4:	e0bff617 	ldw	r2,-40(fp)
   325b8:	10001e26 	beq	r2,zero,32634 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   325bc:	e0fffe17 	ldw	r3,-8(fp)
   325c0:	e0bff617 	ldw	r2,-40(fp)
   325c4:	1880022e 	bgeu	r3,r2,325d0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   325c8:	e0bffe17 	ldw	r2,-8(fp)
   325cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   325d0:	e0bffc17 	ldw	r2,-16(fp)
   325d4:	10c00e04 	addi	r3,r2,56
   325d8:	e0bff817 	ldw	r2,-32(fp)
   325dc:	1885883a 	add	r2,r3,r2
   325e0:	e1bff617 	ldw	r6,-40(fp)
   325e4:	100b883a 	mov	r5,r2
   325e8:	e13ff517 	ldw	r4,-44(fp)
   325ec:	002cd980 	call	2cd98 <memcpy>
      ptr   += n;
   325f0:	e0fff517 	ldw	r3,-44(fp)
   325f4:	e0bff617 	ldw	r2,-40(fp)
   325f8:	1885883a 	add	r2,r3,r2
   325fc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   32600:	e0fffe17 	ldw	r3,-8(fp)
   32604:	e0bff617 	ldw	r2,-40(fp)
   32608:	1885c83a 	sub	r2,r3,r2
   3260c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32610:	e0fff817 	ldw	r3,-32(fp)
   32614:	e0bff617 	ldw	r2,-40(fp)
   32618:	1885883a 	add	r2,r3,r2
   3261c:	10c1ffcc 	andi	r3,r2,2047
   32620:	e0bffc17 	ldw	r2,-16(fp)
   32624:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   32628:	e0bffe17 	ldw	r2,-8(fp)
   3262c:	00bfcf16 	blt	zero,r2,3256c <__alt_data_end+0xf403256c>
   32630:	00000106 	br	32638 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   32634:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   32638:	e0fff517 	ldw	r3,-44(fp)
   3263c:	e0bffd17 	ldw	r2,-12(fp)
   32640:	1880141e 	bne	r3,r2,32694 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   32644:	e0bfff17 	ldw	r2,-4(fp)
   32648:	1090000c 	andi	r2,r2,16384
   3264c:	1000131e 	bne	r2,zero,3269c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   32650:	0001883a 	nop
   32654:	e0bffc17 	ldw	r2,-16(fp)
   32658:	10c00a17 	ldw	r3,40(r2)
   3265c:	e0bff717 	ldw	r2,-36(fp)
   32660:	1880051e 	bne	r3,r2,32678 <altera_avalon_jtag_uart_read+0x138>
   32664:	e0bffc17 	ldw	r2,-16(fp)
   32668:	10c00917 	ldw	r3,36(r2)
   3266c:	e0bffc17 	ldw	r2,-16(fp)
   32670:	10800117 	ldw	r2,4(r2)
   32674:	18bff736 	bltu	r3,r2,32654 <__alt_data_end+0xf4032654>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   32678:	e0bffc17 	ldw	r2,-16(fp)
   3267c:	10c00a17 	ldw	r3,40(r2)
   32680:	e0bff717 	ldw	r2,-36(fp)
   32684:	18800726 	beq	r3,r2,326a4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   32688:	e0bffe17 	ldw	r2,-8(fp)
   3268c:	00bfb716 	blt	zero,r2,3256c <__alt_data_end+0xf403256c>
   32690:	00000506 	br	326a8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   32694:	0001883a 	nop
   32698:	00000306 	br	326a8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   3269c:	0001883a 	nop
   326a0:	00000106 	br	326a8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   326a4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   326a8:	e0fff517 	ldw	r3,-44(fp)
   326ac:	e0bffd17 	ldw	r2,-12(fp)
   326b0:	18801826 	beq	r3,r2,32714 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   326b4:	0005303a 	rdctl	r2,status
   326b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   326bc:	e0fffb17 	ldw	r3,-20(fp)
   326c0:	00bfff84 	movi	r2,-2
   326c4:	1884703a 	and	r2,r3,r2
   326c8:	1001703a 	wrctl	status,r2
  
  return context;
   326cc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   326d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   326d4:	e0bffc17 	ldw	r2,-16(fp)
   326d8:	10800817 	ldw	r2,32(r2)
   326dc:	10c00054 	ori	r3,r2,1
   326e0:	e0bffc17 	ldw	r2,-16(fp)
   326e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   326e8:	e0bffc17 	ldw	r2,-16(fp)
   326ec:	10800017 	ldw	r2,0(r2)
   326f0:	10800104 	addi	r2,r2,4
   326f4:	1007883a 	mov	r3,r2
   326f8:	e0bffc17 	ldw	r2,-16(fp)
   326fc:	10800817 	ldw	r2,32(r2)
   32700:	18800035 	stwio	r2,0(r3)
   32704:	e0bffa17 	ldw	r2,-24(fp)
   32708:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3270c:	e0bff917 	ldw	r2,-28(fp)
   32710:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   32714:	e0fff517 	ldw	r3,-44(fp)
   32718:	e0bffd17 	ldw	r2,-12(fp)
   3271c:	18800426 	beq	r3,r2,32730 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   32720:	e0fff517 	ldw	r3,-44(fp)
   32724:	e0bffd17 	ldw	r2,-12(fp)
   32728:	1885c83a 	sub	r2,r3,r2
   3272c:	00000606 	br	32748 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   32730:	e0bfff17 	ldw	r2,-4(fp)
   32734:	1090000c 	andi	r2,r2,16384
   32738:	10000226 	beq	r2,zero,32744 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   3273c:	00bffd44 	movi	r2,-11
   32740:	00000106 	br	32748 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   32744:	00bffec4 	movi	r2,-5
}
   32748:	e037883a 	mov	sp,fp
   3274c:	dfc00117 	ldw	ra,4(sp)
   32750:	df000017 	ldw	fp,0(sp)
   32754:	dec00204 	addi	sp,sp,8
   32758:	f800283a 	ret

0003275c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   3275c:	defff304 	addi	sp,sp,-52
   32760:	dfc00c15 	stw	ra,48(sp)
   32764:	df000b15 	stw	fp,44(sp)
   32768:	df000b04 	addi	fp,sp,44
   3276c:	e13ffc15 	stw	r4,-16(fp)
   32770:	e17ffd15 	stw	r5,-12(fp)
   32774:	e1bffe15 	stw	r6,-8(fp)
   32778:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   3277c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   32780:	e0bffd17 	ldw	r2,-12(fp)
   32784:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32788:	00003706 	br	32868 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   3278c:	e0bffc17 	ldw	r2,-16(fp)
   32790:	10800c17 	ldw	r2,48(r2)
   32794:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   32798:	e0bffc17 	ldw	r2,-16(fp)
   3279c:	10800d17 	ldw	r2,52(r2)
   327a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   327a4:	e0fff917 	ldw	r3,-28(fp)
   327a8:	e0bff517 	ldw	r2,-44(fp)
   327ac:	1880062e 	bgeu	r3,r2,327c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   327b0:	e0fff517 	ldw	r3,-44(fp)
   327b4:	e0bff917 	ldw	r2,-28(fp)
   327b8:	1885c83a 	sub	r2,r3,r2
   327bc:	10bfffc4 	addi	r2,r2,-1
   327c0:	e0bff615 	stw	r2,-40(fp)
   327c4:	00000b06 	br	327f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   327c8:	e0bff517 	ldw	r2,-44(fp)
   327cc:	10000526 	beq	r2,zero,327e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   327d0:	00c20004 	movi	r3,2048
   327d4:	e0bff917 	ldw	r2,-28(fp)
   327d8:	1885c83a 	sub	r2,r3,r2
   327dc:	e0bff615 	stw	r2,-40(fp)
   327e0:	00000406 	br	327f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   327e4:	00c1ffc4 	movi	r3,2047
   327e8:	e0bff917 	ldw	r2,-28(fp)
   327ec:	1885c83a 	sub	r2,r3,r2
   327f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   327f4:	e0bff617 	ldw	r2,-40(fp)
   327f8:	10001e26 	beq	r2,zero,32874 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   327fc:	e0fffe17 	ldw	r3,-8(fp)
   32800:	e0bff617 	ldw	r2,-40(fp)
   32804:	1880022e 	bgeu	r3,r2,32810 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   32808:	e0bffe17 	ldw	r2,-8(fp)
   3280c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   32810:	e0bffc17 	ldw	r2,-16(fp)
   32814:	10c20e04 	addi	r3,r2,2104
   32818:	e0bff917 	ldw	r2,-28(fp)
   3281c:	1885883a 	add	r2,r3,r2
   32820:	e1bff617 	ldw	r6,-40(fp)
   32824:	e17ffd17 	ldw	r5,-12(fp)
   32828:	1009883a 	mov	r4,r2
   3282c:	002cd980 	call	2cd98 <memcpy>
      ptr   += n;
   32830:	e0fffd17 	ldw	r3,-12(fp)
   32834:	e0bff617 	ldw	r2,-40(fp)
   32838:	1885883a 	add	r2,r3,r2
   3283c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   32840:	e0fffe17 	ldw	r3,-8(fp)
   32844:	e0bff617 	ldw	r2,-40(fp)
   32848:	1885c83a 	sub	r2,r3,r2
   3284c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32850:	e0fff917 	ldw	r3,-28(fp)
   32854:	e0bff617 	ldw	r2,-40(fp)
   32858:	1885883a 	add	r2,r3,r2
   3285c:	10c1ffcc 	andi	r3,r2,2047
   32860:	e0bffc17 	ldw	r2,-16(fp)
   32864:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32868:	e0bffe17 	ldw	r2,-8(fp)
   3286c:	00bfc716 	blt	zero,r2,3278c <__alt_data_end+0xf403278c>
   32870:	00000106 	br	32878 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   32874:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32878:	0005303a 	rdctl	r2,status
   3287c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32880:	e0fffb17 	ldw	r3,-20(fp)
   32884:	00bfff84 	movi	r2,-2
   32888:	1884703a 	and	r2,r3,r2
   3288c:	1001703a 	wrctl	status,r2
  
  return context;
   32890:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   32894:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   32898:	e0bffc17 	ldw	r2,-16(fp)
   3289c:	10800817 	ldw	r2,32(r2)
   328a0:	10c00094 	ori	r3,r2,2
   328a4:	e0bffc17 	ldw	r2,-16(fp)
   328a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   328ac:	e0bffc17 	ldw	r2,-16(fp)
   328b0:	10800017 	ldw	r2,0(r2)
   328b4:	10800104 	addi	r2,r2,4
   328b8:	1007883a 	mov	r3,r2
   328bc:	e0bffc17 	ldw	r2,-16(fp)
   328c0:	10800817 	ldw	r2,32(r2)
   328c4:	18800035 	stwio	r2,0(r3)
   328c8:	e0bffa17 	ldw	r2,-24(fp)
   328cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   328d0:	e0bff817 	ldw	r2,-32(fp)
   328d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   328d8:	e0bffe17 	ldw	r2,-8(fp)
   328dc:	0080100e 	bge	zero,r2,32920 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   328e0:	e0bfff17 	ldw	r2,-4(fp)
   328e4:	1090000c 	andi	r2,r2,16384
   328e8:	1000101e 	bne	r2,zero,3292c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   328ec:	0001883a 	nop
   328f0:	e0bffc17 	ldw	r2,-16(fp)
   328f4:	10c00d17 	ldw	r3,52(r2)
   328f8:	e0bff517 	ldw	r2,-44(fp)
   328fc:	1880051e 	bne	r3,r2,32914 <altera_avalon_jtag_uart_write+0x1b8>
   32900:	e0bffc17 	ldw	r2,-16(fp)
   32904:	10c00917 	ldw	r3,36(r2)
   32908:	e0bffc17 	ldw	r2,-16(fp)
   3290c:	10800117 	ldw	r2,4(r2)
   32910:	18bff736 	bltu	r3,r2,328f0 <__alt_data_end+0xf40328f0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   32914:	e0bffc17 	ldw	r2,-16(fp)
   32918:	10800917 	ldw	r2,36(r2)
   3291c:	1000051e 	bne	r2,zero,32934 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   32920:	e0bffe17 	ldw	r2,-8(fp)
   32924:	00bfd016 	blt	zero,r2,32868 <__alt_data_end+0xf4032868>
   32928:	00000306 	br	32938 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   3292c:	0001883a 	nop
   32930:	00000106 	br	32938 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   32934:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   32938:	e0fffd17 	ldw	r3,-12(fp)
   3293c:	e0bff717 	ldw	r2,-36(fp)
   32940:	18800426 	beq	r3,r2,32954 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   32944:	e0fffd17 	ldw	r3,-12(fp)
   32948:	e0bff717 	ldw	r2,-36(fp)
   3294c:	1885c83a 	sub	r2,r3,r2
   32950:	00000606 	br	3296c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   32954:	e0bfff17 	ldw	r2,-4(fp)
   32958:	1090000c 	andi	r2,r2,16384
   3295c:	10000226 	beq	r2,zero,32968 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   32960:	00bffd44 	movi	r2,-11
   32964:	00000106 	br	3296c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   32968:	00bffec4 	movi	r2,-5
}
   3296c:	e037883a 	mov	sp,fp
   32970:	dfc00117 	ldw	ra,4(sp)
   32974:	df000017 	ldw	fp,0(sp)
   32978:	dec00204 	addi	sp,sp,8
   3297c:	f800283a 	ret

00032980 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
   32980:	defffd04 	addi	sp,sp,-12
   32984:	df000215 	stw	fp,8(sp)
   32988:	df000204 	addi	fp,sp,8
   3298c:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
   32990:	008e84b4 	movhi	r2,14866
   32994:	10ac1144 	addi	r2,r2,-20411
   32998:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
   3299c:	e0bfff17 	ldw	r2,-4(fp)
   329a0:	10800a17 	ldw	r2,40(r2)
   329a4:	10800104 	addi	r2,r2,4
   329a8:	1007883a 	mov	r3,r2
   329ac:	e0bffe17 	ldw	r2,-8(fp)
   329b0:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
   329b4:	e0bfff17 	ldw	r2,-4(fp)
   329b8:	10800a17 	ldw	r2,40(r2)
   329bc:	10800104 	addi	r2,r2,4
   329c0:	10800037 	ldwio	r2,0(r2)
   329c4:	1007883a 	mov	r3,r2
   329c8:	e0bffe17 	ldw	r2,-8(fp)
   329cc:	1880081e 	bne	r3,r2,329f0 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
   329d0:	e0bfff17 	ldw	r2,-4(fp)
   329d4:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
   329d8:	e0bfff17 	ldw	r2,-4(fp)
   329dc:	10800a17 	ldw	r2,40(r2)
   329e0:	10800104 	addi	r2,r2,4
   329e4:	0007883a 	mov	r3,zero
   329e8:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
   329ec:	00000306 	br	329fc <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
   329f0:	e0bfff17 	ldw	r2,-4(fp)
   329f4:	00c00044 	movi	r3,1
   329f8:	10c00f15 	stw	r3,60(r2)
    }
}
   329fc:	0001883a 	nop
   32a00:	e037883a 	mov	sp,fp
   32a04:	df000017 	ldw	fp,0(sp)
   32a08:	dec00104 	addi	sp,sp,4
   32a0c:	f800283a 	ret

00032a10 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
   32a10:	defffc04 	addi	sp,sp,-16
   32a14:	df000315 	stw	fp,12(sp)
   32a18:	df000304 	addi	fp,sp,12
   32a1c:	e13ffe15 	stw	r4,-8(fp)
   32a20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
   32a24:	e0bfff17 	ldw	r2,-4(fp)
   32a28:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
   32a2c:	e0bffd17 	ldw	r2,-12(fp)
   32a30:	10001026 	beq	r2,zero,32a74 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
   32a34:	e0bffe17 	ldw	r2,-8(fp)
   32a38:	10800a17 	ldw	r2,40(r2)
   32a3c:	10800104 	addi	r2,r2,4
   32a40:	1007883a 	mov	r3,r2
   32a44:	e0bffd17 	ldw	r2,-12(fp)
   32a48:	10800104 	addi	r2,r2,4
   32a4c:	10800017 	ldw	r2,0(r2)
   32a50:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
   32a54:	e0bffe17 	ldw	r2,-8(fp)
   32a58:	10800a17 	ldw	r2,40(r2)
   32a5c:	1007883a 	mov	r3,r2
   32a60:	e0bffd17 	ldw	r2,-12(fp)
   32a64:	10800017 	ldw	r2,0(r2)
   32a68:	18800035 	stwio	r2,0(r3)
        return 0;
   32a6c:	0005883a 	mov	r2,zero
   32a70:	00000106 	br	32a78 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
   32a74:	00bffa84 	movi	r2,-22
}
   32a78:	e037883a 	mov	sp,fp
   32a7c:	df000017 	ldw	fp,0(sp)
   32a80:	dec00104 	addi	sp,sp,4
   32a84:	f800283a 	ret

00032a88 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
   32a88:	defff504 	addi	sp,sp,-44
   32a8c:	dfc00a15 	stw	ra,40(sp)
   32a90:	df000915 	stw	fp,36(sp)
   32a94:	df000904 	addi	fp,sp,36
   32a98:	e13ffe15 	stw	r4,-8(fp)
   32a9c:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   32aa0:	e0bffe17 	ldw	r2,-8(fp)
   32aa4:	e0bff715 	stw	r2,-36(fp)
    int status = 0;
   32aa8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
   32aac:	e0bff717 	ldw	r2,-36(fp)
   32ab0:	10801017 	ldw	r2,64(r2)
   32ab4:	e0bff915 	stw	r2,-28(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   32ab8:	e0bff717 	ldw	r2,-36(fp)
   32abc:	10800a17 	ldw	r2,40(r2)
   32ac0:	10800304 	addi	r2,r2,12
   32ac4:	10800037 	ldwio	r2,0(r2)
   32ac8:	1007883a 	mov	r3,r2
   32acc:	00bfff44 	movi	r2,-3
   32ad0:	1884703a 	and	r2,r3,r2
   32ad4:	e0bffa15 	stw	r2,-24(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   32ad8:	e0bff717 	ldw	r2,-36(fp)
   32adc:	10800a17 	ldw	r2,40(r2)
   32ae0:	10800304 	addi	r2,r2,12
   32ae4:	1007883a 	mov	r3,r2
   32ae8:	e0bffa17 	ldw	r2,-24(fp)
   32aec:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
   32af0:	e0bff917 	ldw	r2,-28(fp)
   32af4:	10002d26 	beq	r2,zero,32bac <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
   32af8:	e0bff717 	ldw	r2,-36(fp)
   32afc:	10800a17 	ldw	r2,40(r2)
   32b00:	10800104 	addi	r2,r2,4
   32b04:	1007883a 	mov	r3,r2
   32b08:	e0bff917 	ldw	r2,-28(fp)
   32b0c:	10800104 	addi	r2,r2,4
   32b10:	10800017 	ldw	r2,0(r2)
   32b14:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
   32b18:	e0bff717 	ldw	r2,-36(fp)
   32b1c:	10800a17 	ldw	r2,40(r2)
   32b20:	1007883a 	mov	r3,r2
   32b24:	e0bff917 	ldw	r2,-28(fp)
   32b28:	10800017 	ldw	r2,0(r2)
   32b2c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   32b30:	e0bff717 	ldw	r2,-36(fp)
   32b34:	10800a17 	ldw	r2,40(r2)
   32b38:	10800204 	addi	r2,r2,8
   32b3c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   32b40:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   32b44:	1005d07a 	srai	r2,r2,1
   32b48:	e0bff815 	stw	r2,-32(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
   32b4c:	e0bff717 	ldw	r2,-36(fp)
   32b50:	10800d17 	ldw	r2,52(r2)
   32b54:	10001126 	beq	r2,zero,32b9c <altera_avalon_mailbox_simple_tx_isr+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32b58:	0005303a 	rdctl	r2,status
   32b5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32b60:	e0fffc17 	ldw	r3,-16(fp)
   32b64:	00bfff84 	movi	r2,-2
   32b68:	1884703a 	and	r2,r3,r2
   32b6c:	1001703a 	wrctl	status,r2
  
  return context;
   32b70:	e0bffc17 	ldw	r2,-16(fp)
        {
            cpu_sr = alt_irq_disable_all();
   32b74:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
   32b78:	e0bff717 	ldw	r2,-36(fp)
   32b7c:	10800d17 	ldw	r2,52(r2)
   32b80:	e17ff817 	ldw	r5,-32(fp)
   32b84:	e13ff917 	ldw	r4,-28(fp)
   32b88:	103ee83a 	callr	r2
   32b8c:	e0bffb17 	ldw	r2,-20(fp)
   32b90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32b94:	e0bffd17 	ldw	r2,-12(fp)
   32b98:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   32b9c:	e0bff717 	ldw	r2,-36(fp)
   32ba0:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
   32ba4:	e0bff717 	ldw	r2,-36(fp)
   32ba8:	10001105 	stb	zero,68(r2)
    }
}
   32bac:	0001883a 	nop
   32bb0:	e037883a 	mov	sp,fp
   32bb4:	dfc00117 	ldw	ra,4(sp)
   32bb8:	df000017 	ldw	fp,0(sp)
   32bbc:	dec00204 	addi	sp,sp,8
   32bc0:	f800283a 	ret

00032bc4 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
   32bc4:	defff604 	addi	sp,sp,-40
   32bc8:	dfc00915 	stw	ra,36(sp)
   32bcc:	df000815 	stw	fp,32(sp)
   32bd0:	df000804 	addi	fp,sp,32
   32bd4:	e13ffe15 	stw	r4,-8(fp)
   32bd8:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   32bdc:	e0bffe17 	ldw	r2,-8(fp)
   32be0:	e0bff815 	stw	r2,-32(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   32be4:	e0bff817 	ldw	r2,-32(fp)
   32be8:	10800a17 	ldw	r2,40(r2)
   32bec:	10800104 	addi	r2,r2,4
   32bf0:	10800037 	ldwio	r2,0(r2)
   32bf4:	e0bffd15 	stw	r2,-12(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   32bf8:	e0bff817 	ldw	r2,-32(fp)
   32bfc:	10800a17 	ldw	r2,40(r2)
   32c00:	10800037 	ldwio	r2,0(r2)
   32c04:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
   32c08:	e0bff817 	ldw	r2,-32(fp)
   32c0c:	10800e17 	ldw	r2,56(r2)
   32c10:	10001126 	beq	r2,zero,32c58 <altera_avalon_mailbox_simple_rx_isr+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32c14:	0005303a 	rdctl	r2,status
   32c18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32c1c:	e0fffa17 	ldw	r3,-24(fp)
   32c20:	00bfff84 	movi	r2,-2
   32c24:	1884703a 	and	r2,r3,r2
   32c28:	1001703a 	wrctl	status,r2
  
  return context;
   32c2c:	e0bffa17 	ldw	r2,-24(fp)
    {
        cpu_sr = alt_irq_disable_all();
   32c30:	e0bff915 	stw	r2,-28(fp)
        (dev->rx_cb)(inbox);
   32c34:	e0bff817 	ldw	r2,-32(fp)
   32c38:	10800e17 	ldw	r2,56(r2)
   32c3c:	e0fffc04 	addi	r3,fp,-16
   32c40:	1809883a 	mov	r4,r3
   32c44:	103ee83a 	callr	r2
   32c48:	e0bff917 	ldw	r2,-28(fp)
   32c4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32c50:	e0bffb17 	ldw	r2,-20(fp)
   32c54:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
   32c58:	0001883a 	nop
   32c5c:	e037883a 	mov	sp,fp
   32c60:	dfc00117 	ldw	ra,4(sp)
   32c64:	df000017 	ldw	fp,0(sp)
   32c68:	dec00204 	addi	sp,sp,8
   32c6c:	f800283a 	ret

00032c70 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
   32c70:	defffb04 	addi	sp,sp,-20
   32c74:	dfc00415 	stw	ra,16(sp)
   32c78:	df000315 	stw	fp,12(sp)
   32c7c:	df000304 	addi	fp,sp,12
   32c80:	e13ffd15 	stw	r4,-12(fp)
   32c84:	e17ffe15 	stw	r5,-8(fp)
   32c88:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
   32c8c:	d1600e04 	addi	r5,gp,-32712
   32c90:	e13ffd17 	ldw	r4,-12(fp)
   32c94:	00347300 	call	34730 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
   32c98:	e0ffff17 	ldw	r3,-4(fp)
   32c9c:	e0bffd17 	ldw	r2,-12(fp)
   32ca0:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
   32ca4:	e0fffe17 	ldw	r3,-8(fp)
   32ca8:	e0bffd17 	ldw	r2,-12(fp)
   32cac:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
   32cb0:	e0bffd17 	ldw	r2,-12(fp)
   32cb4:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
   32cb8:	e0bffd17 	ldw	r2,-12(fp)
   32cbc:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
   32cc0:	e0bffd17 	ldw	r2,-12(fp)
   32cc4:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
   32cc8:	e13ffd17 	ldw	r4,-12(fp)
   32ccc:	00329800 	call	32980 <altera_avalon_mailbox_identify>
}
   32cd0:	0001883a 	nop
   32cd4:	e037883a 	mov	sp,fp
   32cd8:	dfc00117 	ldw	ra,4(sp)
   32cdc:	df000017 	ldw	fp,0(sp)
   32ce0:	dec00204 	addi	sp,sp,8
   32ce4:	f800283a 	ret

00032ce8 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
   32ce8:	defff904 	addi	sp,sp,-28
   32cec:	dfc00615 	stw	ra,24(sp)
   32cf0:	df000515 	stw	fp,20(sp)
   32cf4:	df000504 	addi	fp,sp,20
   32cf8:	e13ffd15 	stw	r4,-12(fp)
   32cfc:	e17ffe15 	stw	r5,-8(fp)
   32d00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
   32d04:	d1600e04 	addi	r5,gp,-32712
   32d08:	e13ffd17 	ldw	r4,-12(fp)
   32d0c:	00348940 	call	34894 <alt_find_dev>
   32d10:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
   32d14:	e0bffb17 	ldw	r2,-20(fp)
   32d18:	1000021e 	bne	r2,zero,32d24 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
   32d1c:	0005883a 	mov	r2,zero
   32d20:	00005d06 	br	32e98 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   32d24:	e0bffb17 	ldw	r2,-20(fp)
   32d28:	10800a17 	ldw	r2,40(r2)
   32d2c:	10800304 	addi	r2,r2,12
   32d30:	10800037 	ldwio	r2,0(r2)
   32d34:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
   32d38:	e0bffb17 	ldw	r2,-20(fp)
   32d3c:	10800f17 	ldw	r2,60(r2)
   32d40:	1000081e 	bne	r2,zero,32d64 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   32d44:	e0bffb17 	ldw	r2,-20(fp)
   32d48:	10800a17 	ldw	r2,40(r2)
   32d4c:	10800304 	addi	r2,r2,12
   32d50:	1009883a 	mov	r4,r2
   32d54:	e0fffc17 	ldw	r3,-16(fp)
   32d58:	00bfff44 	movi	r2,-3
   32d5c:	1884703a 	and	r2,r3,r2
   32d60:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
   32d64:	e0bffb17 	ldw	r2,-20(fp)
   32d68:	10800f17 	ldw	r2,60(r2)
   32d6c:	10800058 	cmpnei	r2,r2,1
   32d70:	1000081e 	bne	r2,zero,32d94 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   32d74:	e0bffb17 	ldw	r2,-20(fp)
   32d78:	10800a17 	ldw	r2,40(r2)
   32d7c:	10800304 	addi	r2,r2,12
   32d80:	1009883a 	mov	r4,r2
   32d84:	e0fffc17 	ldw	r3,-16(fp)
   32d88:	00bfff84 	movi	r2,-2
   32d8c:	1884703a 	and	r2,r3,r2
   32d90:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
   32d94:	e0bffb17 	ldw	r2,-20(fp)
   32d98:	10800b17 	ldw	r2,44(r2)
   32d9c:	10bfffd8 	cmpnei	r2,r2,-1
   32da0:	1000021e 	bne	r2,zero,32dac <altera_avalon_mailbox_open+0xc4>
        return dev;
   32da4:	e0bffb17 	ldw	r2,-20(fp)
   32da8:	00003b06 	br	32e98 <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
   32dac:	e0bffe17 	ldw	r2,-8(fp)
   32db0:	1000041e 	bne	r2,zero,32dc4 <altera_avalon_mailbox_open+0xdc>
   32db4:	e0bfff17 	ldw	r2,-4(fp)
   32db8:	1000021e 	bne	r2,zero,32dc4 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
   32dbc:	e0bffb17 	ldw	r2,-20(fp)
   32dc0:	00003506 	br	32e98 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   32dc4:	e0bffb17 	ldw	r2,-20(fp)
   32dc8:	10800f17 	ldw	r2,60(r2)
   32dcc:	1000021e 	bne	r2,zero,32dd8 <altera_avalon_mailbox_open+0xf0>
   32dd0:	e0bfff17 	ldw	r2,-4(fp)
   32dd4:	1000061e 	bne	r2,zero,32df0 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   32dd8:	e0bffb17 	ldw	r2,-20(fp)
   32ddc:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   32de0:	10800058 	cmpnei	r2,r2,1
   32de4:	1000041e 	bne	r2,zero,32df8 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   32de8:	e0bffe17 	ldw	r2,-8(fp)
   32dec:	10000226 	beq	r2,zero,32df8 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
   32df0:	0005883a 	mov	r2,zero
   32df4:	00002806 	br	32e98 <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
   32df8:	e0bffb17 	ldw	r2,-20(fp)
   32dfc:	e0fffe17 	ldw	r3,-8(fp)
   32e00:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
   32e04:	e0bffb17 	ldw	r2,-20(fp)
   32e08:	e0ffff17 	ldw	r3,-4(fp)
   32e0c:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
   32e10:	e0bffb17 	ldw	r2,-20(fp)
   32e14:	10800f17 	ldw	r2,60(r2)
   32e18:	1000071e 	bne	r2,zero,32e38 <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
   32e1c:	e0bffb17 	ldw	r2,-20(fp)
   32e20:	10800b17 	ldw	r2,44(r2)
   32e24:	018000f4 	movhi	r6,3
   32e28:	318aa204 	addi	r6,r6,10888
   32e2c:	e17ffb17 	ldw	r5,-20(fp)
   32e30:	1009883a 	mov	r4,r2
   32e34:	0034a980 	call	34a98 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
   32e38:	e0bffb17 	ldw	r2,-20(fp)
   32e3c:	10800f17 	ldw	r2,60(r2)
   32e40:	10800058 	cmpnei	r2,r2,1
   32e44:	1000131e 	bne	r2,zero,32e94 <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
   32e48:	e0bffb17 	ldw	r2,-20(fp)
   32e4c:	10800b17 	ldw	r2,44(r2)
   32e50:	018000f4 	movhi	r6,3
   32e54:	318af104 	addi	r6,r6,11204
   32e58:	e17ffb17 	ldw	r5,-20(fp)
   32e5c:	1009883a 	mov	r4,r2
   32e60:	0034a980 	call	34a98 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   32e64:	e0bffb17 	ldw	r2,-20(fp)
   32e68:	10800a17 	ldw	r2,40(r2)
   32e6c:	10800304 	addi	r2,r2,12
   32e70:	10800037 	ldwio	r2,0(r2)
   32e74:	10800054 	ori	r2,r2,1
   32e78:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   32e7c:	e0bffb17 	ldw	r2,-20(fp)
   32e80:	10800a17 	ldw	r2,40(r2)
   32e84:	10800304 	addi	r2,r2,12
   32e88:	1007883a 	mov	r3,r2
   32e8c:	e0bffc17 	ldw	r2,-16(fp)
   32e90:	18800035 	stwio	r2,0(r3)
    }
    return dev;
   32e94:	e0bffb17 	ldw	r2,-20(fp)
}
   32e98:	e037883a 	mov	sp,fp
   32e9c:	dfc00117 	ldw	ra,4(sp)
   32ea0:	df000017 	ldw	fp,0(sp)
   32ea4:	dec00204 	addi	sp,sp,8
   32ea8:	f800283a 	ret

00032eac <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
   32eac:	defffc04 	addi	sp,sp,-16
   32eb0:	dfc00315 	stw	ra,12(sp)
   32eb4:	df000215 	stw	fp,8(sp)
   32eb8:	df000204 	addi	fp,sp,8
   32ebc:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
   32ec0:	e0bfff17 	ldw	r2,-4(fp)
   32ec4:	10003526 	beq	r2,zero,32f9c <altera_avalon_mailbox_close+0xf0>
   32ec8:	e0bfff17 	ldw	r2,-4(fp)
   32ecc:	10800b17 	ldw	r2,44(r2)
   32ed0:	10bfffe0 	cmpeqi	r2,r2,-1
   32ed4:	1000311e 	bne	r2,zero,32f9c <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
   32ed8:	e0bfff17 	ldw	r2,-4(fp)
   32edc:	10800f17 	ldw	r2,60(r2)
   32ee0:	10000e1e 	bne	r2,zero,32f1c <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   32ee4:	e0bfff17 	ldw	r2,-4(fp)
   32ee8:	10800a17 	ldw	r2,40(r2)
   32eec:	10800304 	addi	r2,r2,12
   32ef0:	10800037 	ldwio	r2,0(r2)
   32ef4:	1007883a 	mov	r3,r2
   32ef8:	00bfff44 	movi	r2,-3
   32efc:	1884703a 	and	r2,r3,r2
   32f00:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   32f04:	e0bfff17 	ldw	r2,-4(fp)
   32f08:	10800a17 	ldw	r2,40(r2)
   32f0c:	10800304 	addi	r2,r2,12
   32f10:	1007883a 	mov	r3,r2
   32f14:	e0bffe17 	ldw	r2,-8(fp)
   32f18:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
   32f1c:	e0bfff17 	ldw	r2,-4(fp)
   32f20:	10800f17 	ldw	r2,60(r2)
   32f24:	10800058 	cmpnei	r2,r2,1
   32f28:	10000e1e 	bne	r2,zero,32f64 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   32f2c:	e0bfff17 	ldw	r2,-4(fp)
   32f30:	10800a17 	ldw	r2,40(r2)
   32f34:	10800304 	addi	r2,r2,12
   32f38:	10800037 	ldwio	r2,0(r2)
   32f3c:	1007883a 	mov	r3,r2
   32f40:	00bfff84 	movi	r2,-2
   32f44:	1884703a 	and	r2,r3,r2
   32f48:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   32f4c:	e0bfff17 	ldw	r2,-4(fp)
   32f50:	10800a17 	ldw	r2,40(r2)
   32f54:	10800304 	addi	r2,r2,12
   32f58:	1007883a 	mov	r3,r2
   32f5c:	e0bffe17 	ldw	r2,-8(fp)
   32f60:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
   32f64:	e0bfff17 	ldw	r2,-4(fp)
   32f68:	10800b17 	ldw	r2,44(r2)
   32f6c:	10bfffe0 	cmpeqi	r2,r2,-1
   32f70:	1000061e 	bne	r2,zero,32f8c <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
   32f74:	e0bfff17 	ldw	r2,-4(fp)
   32f78:	10800b17 	ldw	r2,44(r2)
   32f7c:	000d883a 	mov	r6,zero
   32f80:	e17fff17 	ldw	r5,-4(fp)
   32f84:	1009883a 	mov	r4,r2
   32f88:	0034a980 	call	34a98 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
   32f8c:	e0bfff17 	ldw	r2,-4(fp)
   32f90:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
   32f94:	e0bfff17 	ldw	r2,-4(fp)
   32f98:	10000e15 	stw	zero,56(r2)
    }
}
   32f9c:	0001883a 	nop
   32fa0:	e037883a 	mov	sp,fp
   32fa4:	dfc00117 	ldw	ra,4(sp)
   32fa8:	df000017 	ldw	fp,0(sp)
   32fac:	dec00204 	addi	sp,sp,8
   32fb0:	f800283a 	ret

00032fb4 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
   32fb4:	defffd04 	addi	sp,sp,-12
   32fb8:	df000215 	stw	fp,8(sp)
   32fbc:	df000204 	addi	fp,sp,8
   32fc0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
   32fc4:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
   32fc8:	e0bfff17 	ldw	r2,-4(fp)
   32fcc:	10800a17 	ldw	r2,40(r2)
   32fd0:	10800204 	addi	r2,r2,8
   32fd4:	10800037 	ldwio	r2,0(r2)
   32fd8:	108000cc 	andi	r2,r2,3
   32fdc:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
   32fe0:	e0bfff17 	ldw	r2,-4(fp)
   32fe4:	10800f17 	ldw	r2,60(r2)
   32fe8:	1000041e 	bne	r2,zero,32ffc <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   32fec:	e0bffe17 	ldw	r2,-8(fp)
   32ff0:	1080008c 	andi	r2,r2,2
   32ff4:	1004d07a 	srli	r2,r2,1
   32ff8:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
   32ffc:	e0bfff17 	ldw	r2,-4(fp)
   33000:	10800f17 	ldw	r2,60(r2)
   33004:	10800058 	cmpnei	r2,r2,1
   33008:	1000031e 	bne	r2,zero,33018 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
   3300c:	e0bffe17 	ldw	r2,-8(fp)
   33010:	1080004c 	andi	r2,r2,1
   33014:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
   33018:	e0bffe17 	ldw	r2,-8(fp)
}
   3301c:	e037883a 	mov	sp,fp
   33020:	df000017 	ldw	fp,0(sp)
   33024:	dec00104 	addi	sp,sp,4
   33028:	f800283a 	ret

0003302c <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
   3302c:	defff704 	addi	sp,sp,-36
   33030:	dfc00815 	stw	ra,32(sp)
   33034:	df000715 	stw	fp,28(sp)
   33038:	df000704 	addi	fp,sp,28
   3303c:	e13ffc15 	stw	r4,-16(fp)
   33040:	e17ffd15 	stw	r5,-12(fp)
   33044:	e1bffe15 	stw	r6,-8(fp)
   33048:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
   3304c:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   33050:	e0bffc17 	ldw	r2,-16(fp)
   33054:	10801103 	ldbu	r2,68(r2)
   33058:	10803fcc 	andi	r2,r2,255
   3305c:	1000061e 	bne	r2,zero,33078 <altera_avalon_mailbox_send+0x4c>
   33060:	e0bffc17 	ldw	r2,-16(fp)
   33064:	10800a17 	ldw	r2,40(r2)
   33068:	10800204 	addi	r2,r2,8
   3306c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
   33070:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   33074:	10000226 	beq	r2,zero,33080 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
   33078:	00bfffc4 	movi	r2,-1
   3307c:	00003a06 	br	33168 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
   33080:	e0bffc17 	ldw	r2,-16(fp)
   33084:	e0fffd17 	ldw	r3,-12(fp)
   33088:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
   3308c:	e0bffc17 	ldw	r2,-16(fp)
   33090:	00c00044 	movi	r3,1
   33094:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
   33098:	e0bffc17 	ldw	r2,-16(fp)
   3309c:	10800b17 	ldw	r2,44(r2)
   330a0:	10bfffe0 	cmpeqi	r2,r2,-1
   330a4:	1000031e 	bne	r2,zero,330b4 <altera_avalon_mailbox_send+0x88>
   330a8:	e0bfff17 	ldw	r2,-4(fp)
   330ac:	10800058 	cmpnei	r2,r2,1
   330b0:	1000201e 	bne	r2,zero,33134 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
   330b4:	e0bffe17 	ldw	r2,-8(fp)
   330b8:	1000061e 	bne	r2,zero,330d4 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   330bc:	e13ffc17 	ldw	r4,-16(fp)
   330c0:	0032fb40 	call	32fb4 <altera_avalon_mailbox_status>
   330c4:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
   330c8:	e0bffb17 	ldw	r2,-20(fp)
   330cc:	103ffb1e 	bne	r2,zero,330bc <__alt_data_end+0xf40330bc>
   330d0:	00000e06 	br	3310c <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   330d4:	e13ffc17 	ldw	r4,-16(fp)
   330d8:	0032fb40 	call	32fb4 <altera_avalon_mailbox_status>
   330dc:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
   330e0:	e0bffe17 	ldw	r2,-8(fp)
   330e4:	10bfffc4 	addi	r2,r2,-1
   330e8:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
   330ec:	e0bffb17 	ldw	r2,-20(fp)
   330f0:	10000226 	beq	r2,zero,330fc <altera_avalon_mailbox_send+0xd0>
   330f4:	e0bffe17 	ldw	r2,-8(fp)
   330f8:	103ff61e 	bne	r2,zero,330d4 <__alt_data_end+0xf40330d4>
            if (timeout == 0)
   330fc:	e0bffe17 	ldw	r2,-8(fp)
   33100:	1000021e 	bne	r2,zero,3310c <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
   33104:	00bff084 	movi	r2,-62
   33108:	00001706 	br	33168 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
   3310c:	e17ffd17 	ldw	r5,-12(fp)
   33110:	e13ffc17 	ldw	r4,-16(fp)
   33114:	0032a100 	call	32a10 <altera_avalon_mailbox_post>
   33118:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   3311c:	e0bffc17 	ldw	r2,-16(fp)
   33120:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
   33124:	e0bffc17 	ldw	r2,-16(fp)
   33128:	10001105 	stb	zero,68(r2)
        return status;
   3312c:	e0bff917 	ldw	r2,-28(fp)
   33130:	00000d06 	br	33168 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   33134:	e0bffc17 	ldw	r2,-16(fp)
   33138:	10800a17 	ldw	r2,40(r2)
   3313c:	10800304 	addi	r2,r2,12
   33140:	10800037 	ldwio	r2,0(r2)
   33144:	10800094 	ori	r2,r2,2
   33148:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   3314c:	e0bffc17 	ldw	r2,-16(fp)
   33150:	10800a17 	ldw	r2,40(r2)
   33154:	10800304 	addi	r2,r2,12
   33158:	1007883a 	mov	r3,r2
   3315c:	e0bffa17 	ldw	r2,-24(fp)
   33160:	18800035 	stwio	r2,0(r3)
    }
  return 0;
   33164:	0005883a 	mov	r2,zero
}
   33168:	e037883a 	mov	sp,fp
   3316c:	dfc00117 	ldw	ra,4(sp)
   33170:	df000017 	ldw	fp,0(sp)
   33174:	dec00204 	addi	sp,sp,8
   33178:	f800283a 	ret

0003317c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
   3317c:	defff904 	addi	sp,sp,-28
   33180:	dfc00615 	stw	ra,24(sp)
   33184:	df000515 	stw	fp,20(sp)
   33188:	df000504 	addi	fp,sp,20
   3318c:	e13ffd15 	stw	r4,-12(fp)
   33190:	e17ffe15 	stw	r5,-8(fp)
   33194:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
   33198:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
   3319c:	e0bffd17 	ldw	r2,-12(fp)
   331a0:	10003a26 	beq	r2,zero,3328c <altera_avalon_mailbox_retrieve_poll+0x110>
   331a4:	e0bffe17 	ldw	r2,-8(fp)
   331a8:	10003826 	beq	r2,zero,3328c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   331ac:	e0bffd17 	ldw	r2,-12(fp)
   331b0:	10800a17 	ldw	r2,40(r2)
   331b4:	10800304 	addi	r2,r2,12
   331b8:	10800037 	ldwio	r2,0(r2)
   331bc:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
   331c0:	e0bffd17 	ldw	r2,-12(fp)
   331c4:	10800a17 	ldw	r2,40(r2)
   331c8:	10800304 	addi	r2,r2,12
   331cc:	1009883a 	mov	r4,r2
   331d0:	e0fffc17 	ldw	r3,-16(fp)
   331d4:	00bfff84 	movi	r2,-2
   331d8:	1884703a 	and	r2,r3,r2
   331dc:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
   331e0:	e0bfff17 	ldw	r2,-4(fp)
   331e4:	1000061e 	bne	r2,zero,33200 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
   331e8:	e13ffd17 	ldw	r4,-12(fp)
   331ec:	0032fb40 	call	32fb4 <altera_avalon_mailbox_status>
   331f0:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
   331f4:	e0bffb17 	ldw	r2,-20(fp)
   331f8:	103ffb26 	beq	r2,zero,331e8 <__alt_data_end+0xf40331e8>
   331fc:	00000a06 	br	33228 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
   33200:	e13ffd17 	ldw	r4,-12(fp)
   33204:	0032fb40 	call	32fb4 <altera_avalon_mailbox_status>
   33208:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
   3320c:	e0bfff17 	ldw	r2,-4(fp)
   33210:	10bfffc4 	addi	r2,r2,-1
   33214:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
   33218:	e0bffb17 	ldw	r2,-20(fp)
   3321c:	1000021e 	bne	r2,zero,33228 <altera_avalon_mailbox_retrieve_poll+0xac>
   33220:	e0bfff17 	ldw	r2,-4(fp)
   33224:	103ff61e 	bne	r2,zero,33200 <__alt_data_end+0xf4033200>
        }

        /* if timeout, status remain 0 */
        if (status)
   33228:	e0bffb17 	ldw	r2,-20(fp)
   3322c:	10000d26 	beq	r2,zero,33264 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   33230:	e0bffe17 	ldw	r2,-8(fp)
   33234:	10800104 	addi	r2,r2,4
   33238:	e0fffd17 	ldw	r3,-12(fp)
   3323c:	18c00a17 	ldw	r3,40(r3)
   33240:	18c00104 	addi	r3,r3,4
   33244:	18c00037 	ldwio	r3,0(r3)
   33248:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   3324c:	e0bffd17 	ldw	r2,-12(fp)
   33250:	10800a17 	ldw	r2,40(r2)
   33254:	10800037 	ldwio	r2,0(r2)
   33258:	1007883a 	mov	r3,r2
   3325c:	e0bffe17 	ldw	r2,-8(fp)
   33260:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   33264:	e0bffd17 	ldw	r2,-12(fp)
   33268:	10800a17 	ldw	r2,40(r2)
   3326c:	10800304 	addi	r2,r2,12
   33270:	1007883a 	mov	r3,r2
   33274:	e0bffc17 	ldw	r2,-16(fp)
   33278:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
   3327c:	e0bffb17 	ldw	r2,-20(fp)
   33280:	10000226 	beq	r2,zero,3328c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
   33284:	0005883a 	mov	r2,zero
   33288:	00000606 	br	332a4 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
   3328c:	e0bffe17 	ldw	r2,-8(fp)
   33290:	10800104 	addi	r2,r2,4
   33294:	10000015 	stw	zero,0(r2)
      message[0] = 0;
   33298:	e0bffe17 	ldw	r2,-8(fp)
   3329c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
   332a0:	00bffa84 	movi	r2,-22
}
   332a4:	e037883a 	mov	sp,fp
   332a8:	dfc00117 	ldw	ra,4(sp)
   332ac:	df000017 	ldw	fp,0(sp)
   332b0:	dec00204 	addi	sp,sp,8
   332b4:	f800283a 	ret

000332b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   332b8:	defffe04 	addi	sp,sp,-8
   332bc:	dfc00115 	stw	ra,4(sp)
   332c0:	df000015 	stw	fp,0(sp)
   332c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   332c8:	d0a00c17 	ldw	r2,-32720(gp)
   332cc:	10000326 	beq	r2,zero,332dc <alt_get_errno+0x24>
   332d0:	d0a00c17 	ldw	r2,-32720(gp)
   332d4:	103ee83a 	callr	r2
   332d8:	00000106 	br	332e0 <alt_get_errno+0x28>
   332dc:	d0a71e04 	addi	r2,gp,-25480
}
   332e0:	e037883a 	mov	sp,fp
   332e4:	dfc00117 	ldw	ra,4(sp)
   332e8:	df000017 	ldw	fp,0(sp)
   332ec:	dec00204 	addi	sp,sp,8
   332f0:	f800283a 	ret

000332f4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   332f4:	defff904 	addi	sp,sp,-28
   332f8:	df000615 	stw	fp,24(sp)
   332fc:	df000604 	addi	fp,sp,24
   33300:	e13ffe15 	stw	r4,-8(fp)
   33304:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
   33308:	00bfffc4 	movi	r2,-1
   3330c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
   33310:	0005317a 	rdctl	r2,cpuid
   33314:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   33318:	e0bffb17 	ldw	r2,-20(fp)
   3331c:	1006943a 	slli	r3,r2,16
   33320:	e0bfff17 	ldw	r2,-4(fp)
   33324:	1884b03a 	or	r2,r3,r2
   33328:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   3332c:	e0bffe17 	ldw	r2,-8(fp)
   33330:	10800317 	ldw	r2,12(r2)
   33334:	e0fffc17 	ldw	r3,-16(fp)
   33338:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   3333c:	e0bffe17 	ldw	r2,-8(fp)
   33340:	10800317 	ldw	r2,12(r2)
   33344:	10800037 	ldwio	r2,0(r2)
   33348:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
   3334c:	e0fffd17 	ldw	r3,-12(fp)
   33350:	e0bffc17 	ldw	r2,-16(fp)
   33354:	1880011e 	bne	r3,r2,3335c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
   33358:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
   3335c:	e0bffa17 	ldw	r2,-24(fp)
}
   33360:	e037883a 	mov	sp,fp
   33364:	df000017 	ldw	fp,0(sp)
   33368:	dec00104 	addi	sp,sp,4
   3336c:	f800283a 	ret

00033370 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   33370:	defffc04 	addi	sp,sp,-16
   33374:	dfc00315 	stw	ra,12(sp)
   33378:	df000215 	stw	fp,8(sp)
   3337c:	df000204 	addi	fp,sp,8
   33380:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   33384:	d1601004 	addi	r5,gp,-32704
   33388:	e13fff17 	ldw	r4,-4(fp)
   3338c:	00348940 	call	34894 <alt_find_dev>
   33390:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
   33394:	e0bffe17 	ldw	r2,-8(fp)
   33398:	1000041e 	bne	r2,zero,333ac <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   3339c:	00332b80 	call	332b8 <alt_get_errno>
   333a0:	1007883a 	mov	r3,r2
   333a4:	008004c4 	movi	r2,19
   333a8:	18800015 	stw	r2,0(r3)
  }

  return dev;
   333ac:	e0bffe17 	ldw	r2,-8(fp)
}
   333b0:	e037883a 	mov	sp,fp
   333b4:	dfc00117 	ldw	ra,4(sp)
   333b8:	df000017 	ldw	fp,0(sp)
   333bc:	dec00204 	addi	sp,sp,8
   333c0:	f800283a 	ret

000333c4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
   333c4:	defffe04 	addi	sp,sp,-8
   333c8:	df000115 	stw	fp,4(sp)
   333cc:	df000104 	addi	fp,sp,4
   333d0:	e13fff15 	stw	r4,-4(fp)
  return;
   333d4:	0001883a 	nop
}
   333d8:	e037883a 	mov	sp,fp
   333dc:	df000017 	ldw	fp,0(sp)
   333e0:	dec00104 	addi	sp,sp,4
   333e4:	f800283a 	ret

000333e8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   333e8:	defffc04 	addi	sp,sp,-16
   333ec:	dfc00315 	stw	ra,12(sp)
   333f0:	df000215 	stw	fp,8(sp)
   333f4:	df000204 	addi	fp,sp,8
   333f8:	e13ffe15 	stw	r4,-8(fp)
   333fc:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   33400:	0001883a 	nop
   33404:	e17fff17 	ldw	r5,-4(fp)
   33408:	e13ffe17 	ldw	r4,-8(fp)
   3340c:	00332f40 	call	332f4 <alt_mutex_trylock>
   33410:	103ffc1e 	bne	r2,zero,33404 <__alt_data_end+0xf4033404>
}
   33414:	0001883a 	nop
   33418:	e037883a 	mov	sp,fp
   3341c:	dfc00117 	ldw	ra,4(sp)
   33420:	df000017 	ldw	fp,0(sp)
   33424:	dec00204 	addi	sp,sp,8
   33428:	f800283a 	ret

0003342c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   3342c:	defffa04 	addi	sp,sp,-24
   33430:	dfc00515 	stw	ra,20(sp)
   33434:	df000415 	stw	fp,16(sp)
   33438:	df000404 	addi	fp,sp,16
   3343c:	e13ffd15 	stw	r4,-12(fp)
   33440:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   33444:	e17ffe17 	ldw	r5,-8(fp)
   33448:	e13ffd17 	ldw	r4,-12(fp)
   3344c:	00332f40 	call	332f4 <alt_mutex_trylock>
   33450:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
   33454:	e0bffc17 	ldw	r2,-16(fp)
}
   33458:	e037883a 	mov	sp,fp
   3345c:	dfc00117 	ldw	ra,4(sp)
   33460:	df000017 	ldw	fp,0(sp)
   33464:	dec00204 	addi	sp,sp,8
   33468:	f800283a 	ret

0003346c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
   3346c:	defffd04 	addi	sp,sp,-12
   33470:	df000215 	stw	fp,8(sp)
   33474:	df000204 	addi	fp,sp,8
   33478:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   3347c:	0005317a 	rdctl	r2,cpuid
   33480:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   33484:	e0bfff17 	ldw	r2,-4(fp)
   33488:	10800317 	ldw	r2,12(r2)
   3348c:	10800104 	addi	r2,r2,4
   33490:	00c00044 	movi	r3,1
   33494:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   33498:	e0bfff17 	ldw	r2,-4(fp)
   3349c:	10800317 	ldw	r2,12(r2)
   334a0:	e0fffe17 	ldw	r3,-8(fp)
   334a4:	1806943a 	slli	r3,r3,16
   334a8:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   334ac:	0001883a 	nop
   334b0:	e037883a 	mov	sp,fp
   334b4:	df000017 	ldw	fp,0(sp)
   334b8:	dec00104 	addi	sp,sp,4
   334bc:	f800283a 	ret

000334c0 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
   334c0:	defff904 	addi	sp,sp,-28
   334c4:	df000615 	stw	fp,24(sp)
   334c8:	df000604 	addi	fp,sp,24
   334cc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
   334d0:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
   334d4:	0005317a 	rdctl	r2,cpuid
   334d8:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   334dc:	e0bfff17 	ldw	r2,-4(fp)
   334e0:	10800317 	ldw	r2,12(r2)
   334e4:	10800037 	ldwio	r2,0(r2)
   334e8:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
   334ec:	e0bffc17 	ldw	r2,-16(fp)
   334f0:	1004d43a 	srli	r2,r2,16
   334f4:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   334f8:	e0fffd17 	ldw	r3,-12(fp)
   334fc:	e0bffb17 	ldw	r2,-20(fp)
   33500:	1880071e 	bne	r3,r2,33520 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
   33504:	e0bffc17 	ldw	r2,-16(fp)
   33508:	10bfffcc 	andi	r2,r2,65535
   3350c:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
   33510:	e0bffe17 	ldw	r2,-8(fp)
   33514:	10000226 	beq	r2,zero,33520 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
   33518:	00800044 	movi	r2,1
   3351c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
   33520:	e0bffa17 	ldw	r2,-24(fp)
}
   33524:	e037883a 	mov	sp,fp
   33528:	df000017 	ldw	fp,0(sp)
   3352c:	dec00104 	addi	sp,sp,4
   33530:	f800283a 	ret

00033534 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
   33534:	defffc04 	addi	sp,sp,-16
   33538:	df000315 	stw	fp,12(sp)
   3353c:	df000304 	addi	fp,sp,12
   33540:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
   33544:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   33548:	e0bfff17 	ldw	r2,-4(fp)
   3354c:	10800317 	ldw	r2,12(r2)
   33550:	10800104 	addi	r2,r2,4
   33554:	10800037 	ldwio	r2,0(r2)
   33558:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
   3355c:	e0bffe17 	ldw	r2,-8(fp)
   33560:	1080004c 	andi	r2,r2,1
   33564:	10000226 	beq	r2,zero,33570 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
   33568:	00800044 	movi	r2,1
   3356c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
   33570:	e0bffd17 	ldw	r2,-12(fp)
}
   33574:	e037883a 	mov	sp,fp
   33578:	df000017 	ldw	fp,0(sp)
   3357c:	dec00104 	addi	sp,sp,4
   33580:	f800283a 	ret

00033584 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
   33584:	defffc04 	addi	sp,sp,-16
   33588:	dfc00315 	stw	ra,12(sp)
   3358c:	df000215 	stw	fp,8(sp)
   33590:	df000204 	addi	fp,sp,8
   33594:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
   33598:	d1600904 	addi	r5,gp,-32732
   3359c:	e13fff17 	ldw	r4,-4(fp)
   335a0:	00348940 	call	34894 <alt_find_dev>
   335a4:	e0bffe15 	stw	r2,-8(fp)
  return dev;
   335a8:	e0bffe17 	ldw	r2,-8(fp)
}
   335ac:	e037883a 	mov	sp,fp
   335b0:	dfc00117 	ldw	ra,4(sp)
   335b4:	df000017 	ldw	fp,0(sp)
   335b8:	dec00204 	addi	sp,sp,8
   335bc:	f800283a 	ret

000335c0 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
   335c0:	defffd04 	addi	sp,sp,-12
   335c4:	df000215 	stw	fp,8(sp)
   335c8:	df000204 	addi	fp,sp,8
   335cc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   335d0:	e0bfff17 	ldw	r2,-4(fp)
   335d4:	10800a17 	ldw	r2,40(r2)
   335d8:	10800037 	ldwio	r2,0(r2)
   335dc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
   335e0:	e0bffe17 	ldw	r2,-8(fp)
   335e4:	10800054 	ori	r2,r2,1
   335e8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   335ec:	e0bfff17 	ldw	r2,-4(fp)
   335f0:	10800a17 	ldw	r2,40(r2)
   335f4:	1007883a 	mov	r3,r2
   335f8:	e0bffe17 	ldw	r2,-8(fp)
   335fc:	18800035 	stwio	r2,0(r3)
}
   33600:	0001883a 	nop
   33604:	e037883a 	mov	sp,fp
   33608:	df000017 	ldw	fp,0(sp)
   3360c:	dec00104 	addi	sp,sp,4
   33610:	f800283a 	ret

00033614 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
   33614:	defffd04 	addi	sp,sp,-12
   33618:	df000215 	stw	fp,8(sp)
   3361c:	df000204 	addi	fp,sp,8
   33620:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   33624:	e0bfff17 	ldw	r2,-4(fp)
   33628:	10800a17 	ldw	r2,40(r2)
   3362c:	10800037 	ldwio	r2,0(r2)
   33630:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
   33634:	e0fffe17 	ldw	r3,-8(fp)
   33638:	00bfff84 	movi	r2,-2
   3363c:	1884703a 	and	r2,r3,r2
   33640:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   33644:	e0bfff17 	ldw	r2,-4(fp)
   33648:	10800a17 	ldw	r2,40(r2)
   3364c:	1007883a 	mov	r3,r2
   33650:	e0bffe17 	ldw	r2,-8(fp)
   33654:	18800035 	stwio	r2,0(r3)
}
   33658:	0001883a 	nop
   3365c:	e037883a 	mov	sp,fp
   33660:	df000017 	ldw	fp,0(sp)
   33664:	dec00104 	addi	sp,sp,4
   33668:	f800283a 	ret

0003366c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
   3366c:	defffd04 	addi	sp,sp,-12
   33670:	df000215 	stw	fp,8(sp)
   33674:	df000204 	addi	fp,sp,8
   33678:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   3367c:	e0bfff17 	ldw	r2,-4(fp)
   33680:	10800a17 	ldw	r2,40(r2)
   33684:	10800037 	ldwio	r2,0(r2)
   33688:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
   3368c:	e0bffe17 	ldw	r2,-8(fp)
   33690:	10800094 	ori	r2,r2,2
   33694:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   33698:	e0bfff17 	ldw	r2,-4(fp)
   3369c:	10800a17 	ldw	r2,40(r2)
   336a0:	1007883a 	mov	r3,r2
   336a4:	e0bffe17 	ldw	r2,-8(fp)
   336a8:	18800035 	stwio	r2,0(r3)
}
   336ac:	0001883a 	nop
   336b0:	e037883a 	mov	sp,fp
   336b4:	df000017 	ldw	fp,0(sp)
   336b8:	dec00104 	addi	sp,sp,4
   336bc:	f800283a 	ret

000336c0 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
   336c0:	defffd04 	addi	sp,sp,-12
   336c4:	df000215 	stw	fp,8(sp)
   336c8:	df000204 	addi	fp,sp,8
   336cc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   336d0:	e0bfff17 	ldw	r2,-4(fp)
   336d4:	10800a17 	ldw	r2,40(r2)
   336d8:	10800037 	ldwio	r2,0(r2)
   336dc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
   336e0:	e0fffe17 	ldw	r3,-8(fp)
   336e4:	00bfff44 	movi	r2,-3
   336e8:	1884703a 	and	r2,r3,r2
   336ec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   336f0:	e0bfff17 	ldw	r2,-4(fp)
   336f4:	10800a17 	ldw	r2,40(r2)
   336f8:	1007883a 	mov	r3,r2
   336fc:	e0bffe17 	ldw	r2,-8(fp)
   33700:	18800035 	stwio	r2,0(r3)
}
   33704:	0001883a 	nop
   33708:	e037883a 	mov	sp,fp
   3370c:	df000017 	ldw	fp,0(sp)
   33710:	dec00104 	addi	sp,sp,4
   33714:	f800283a 	ret

00033718 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
   33718:	defffd04 	addi	sp,sp,-12
   3371c:	df000215 	stw	fp,8(sp)
   33720:	df000204 	addi	fp,sp,8
   33724:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   33728:	e0bfff17 	ldw	r2,-4(fp)
   3372c:	10800a17 	ldw	r2,40(r2)
   33730:	10800037 	ldwio	r2,0(r2)
   33734:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
   33738:	e0bffe17 	ldw	r2,-8(fp)
   3373c:	1080400c 	andi	r2,r2,256
   33740:	1004c03a 	cmpne	r2,r2,zero
   33744:	10803fcc 	andi	r2,r2,255
}
   33748:	e037883a 	mov	sp,fp
   3374c:	df000017 	ldw	fp,0(sp)
   33750:	dec00104 	addi	sp,sp,4
   33754:	f800283a 	ret

00033758 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
   33758:	defffd04 	addi	sp,sp,-12
   3375c:	df000215 	stw	fp,8(sp)
   33760:	df000204 	addi	fp,sp,8
   33764:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   33768:	e0bfff17 	ldw	r2,-4(fp)
   3376c:	10800a17 	ldw	r2,40(r2)
   33770:	10800037 	ldwio	r2,0(r2)
   33774:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
   33778:	e0bffe17 	ldw	r2,-8(fp)
   3377c:	1080800c 	andi	r2,r2,512
   33780:	1004c03a 	cmpne	r2,r2,zero
   33784:	10803fcc 	andi	r2,r2,255
}
   33788:	e037883a 	mov	sp,fp
   3378c:	df000017 	ldw	fp,0(sp)
   33790:	dec00104 	addi	sp,sp,4
   33794:	f800283a 	ret

00033798 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
   33798:	defffd04 	addi	sp,sp,-12
   3379c:	df000215 	stw	fp,8(sp)
   337a0:	df000204 	addi	fp,sp,8
   337a4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   337a8:	e0bfff17 	ldw	r2,-4(fp)
   337ac:	10800a17 	ldw	r2,40(r2)
   337b0:	10800037 	ldwio	r2,0(r2)
   337b4:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
   337b8:	e0bffe17 	ldw	r2,-8(fp)
   337bc:	10800114 	ori	r2,r2,4
   337c0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
   337c4:	e0bffe17 	ldw	r2,-8(fp)
   337c8:	10800214 	ori	r2,r2,8
   337cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   337d0:	e0bfff17 	ldw	r2,-4(fp)
   337d4:	10800a17 	ldw	r2,40(r2)
   337d8:	1007883a 	mov	r3,r2
   337dc:	e0bffe17 	ldw	r2,-8(fp)
   337e0:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
   337e4:	e0fffe17 	ldw	r3,-8(fp)
   337e8:	00bffec4 	movi	r2,-5
   337ec:	1884703a 	and	r2,r3,r2
   337f0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
   337f4:	e0fffe17 	ldw	r3,-8(fp)
   337f8:	00bffdc4 	movi	r2,-9
   337fc:	1884703a 	and	r2,r3,r2
   33800:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   33804:	e0bfff17 	ldw	r2,-4(fp)
   33808:	10800a17 	ldw	r2,40(r2)
   3380c:	1007883a 	mov	r3,r2
   33810:	e0bffe17 	ldw	r2,-8(fp)
   33814:	18800035 	stwio	r2,0(r3)
}
   33818:	0001883a 	nop
   3381c:	e037883a 	mov	sp,fp
   33820:	df000017 	ldw	fp,0(sp)
   33824:	dec00104 	addi	sp,sp,4
   33828:	f800283a 	ret

0003382c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
   3382c:	defffc04 	addi	sp,sp,-16
   33830:	df000315 	stw	fp,12(sp)
   33834:	df000304 	addi	fp,sp,12
   33838:	e13ffe15 	stw	r4,-8(fp)
   3383c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   33840:	e0bffe17 	ldw	r2,-8(fp)
   33844:	10800a17 	ldw	r2,40(r2)
   33848:	10800104 	addi	r2,r2,4
   3384c:	10800037 	ldwio	r2,0(r2)
   33850:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
   33854:	e0bfff17 	ldw	r2,-4(fp)
   33858:	1000041e 	bne	r2,zero,3386c <alt_up_audio_read_fifo_avail+0x40>
   3385c:	e0bffd17 	ldw	r2,-12(fp)
   33860:	10bfc00c 	andi	r2,r2,65280
   33864:	1004d23a 	srli	r2,r2,8
   33868:	00000206 	br	33874 <alt_up_audio_read_fifo_avail+0x48>
   3386c:	e0bffd17 	ldw	r2,-12(fp)
   33870:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   33874:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
   33878:	e0bffd17 	ldw	r2,-12(fp)
}
   3387c:	e037883a 	mov	sp,fp
   33880:	df000017 	ldw	fp,0(sp)
   33884:	dec00104 	addi	sp,sp,4
   33888:	f800283a 	ret

0003388c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   3388c:	defffa04 	addi	sp,sp,-24
   33890:	dfc00515 	stw	ra,20(sp)
   33894:	df000415 	stw	fp,16(sp)
   33898:	df000404 	addi	fp,sp,16
   3389c:	e13ffd15 	stw	r4,-12(fp)
   338a0:	e17ffe15 	stw	r5,-8(fp)
   338a4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
   338a8:	01400044 	movi	r5,1
   338ac:	e13ffd17 	ldw	r4,-12(fp)
   338b0:	003382c0 	call	3382c <alt_up_audio_read_fifo_avail>
   338b4:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   338b8:	e0bffc17 	ldw	r2,-16(fp)
   338bc:	10801868 	cmpgeui	r2,r2,97
   338c0:	1000021e 	bne	r2,zero,338cc <alt_up_audio_record_r+0x40>
		return 0;
   338c4:	0005883a 	mov	r2,zero
   338c8:	00000506 	br	338e0 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   338cc:	01c00044 	movi	r7,1
   338d0:	e1bfff17 	ldw	r6,-4(fp)
   338d4:	e17ffe17 	ldw	r5,-8(fp)
   338d8:	e13ffd17 	ldw	r4,-12(fp)
   338dc:	0033a8c0 	call	33a8c <alt_up_audio_read_fifo>
}
   338e0:	e037883a 	mov	sp,fp
   338e4:	dfc00117 	ldw	ra,4(sp)
   338e8:	df000017 	ldw	fp,0(sp)
   338ec:	dec00204 	addi	sp,sp,8
   338f0:	f800283a 	ret

000338f4 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   338f4:	defffa04 	addi	sp,sp,-24
   338f8:	dfc00515 	stw	ra,20(sp)
   338fc:	df000415 	stw	fp,16(sp)
   33900:	df000404 	addi	fp,sp,16
   33904:	e13ffd15 	stw	r4,-12(fp)
   33908:	e17ffe15 	stw	r5,-8(fp)
   3390c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
   33910:	000b883a 	mov	r5,zero
   33914:	e13ffd17 	ldw	r4,-12(fp)
   33918:	003382c0 	call	3382c <alt_up_audio_read_fifo_avail>
   3391c:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   33920:	e0bffc17 	ldw	r2,-16(fp)
   33924:	10801868 	cmpgeui	r2,r2,97
   33928:	1000021e 	bne	r2,zero,33934 <alt_up_audio_record_l+0x40>
		return 0;
   3392c:	0005883a 	mov	r2,zero
   33930:	00000506 	br	33948 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   33934:	000f883a 	mov	r7,zero
   33938:	e1bfff17 	ldw	r6,-4(fp)
   3393c:	e17ffe17 	ldw	r5,-8(fp)
   33940:	e13ffd17 	ldw	r4,-12(fp)
   33944:	0033a8c0 	call	33a8c <alt_up_audio_read_fifo>
}
   33948:	e037883a 	mov	sp,fp
   3394c:	dfc00117 	ldw	ra,4(sp)
   33950:	df000017 	ldw	fp,0(sp)
   33954:	dec00204 	addi	sp,sp,8
   33958:	f800283a 	ret

0003395c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
   3395c:	defffc04 	addi	sp,sp,-16
   33960:	df000315 	stw	fp,12(sp)
   33964:	df000304 	addi	fp,sp,12
   33968:	e13ffe15 	stw	r4,-8(fp)
   3396c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   33970:	e0bffe17 	ldw	r2,-8(fp)
   33974:	10800a17 	ldw	r2,40(r2)
   33978:	10800104 	addi	r2,r2,4
   3397c:	10800037 	ldwio	r2,0(r2)
   33980:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   33984:	e0bfff17 	ldw	r2,-4(fp)
   33988:	1000031e 	bne	r2,zero,33998 <alt_up_audio_write_fifo_space+0x3c>
   3398c:	e0bffd17 	ldw	r2,-12(fp)
   33990:	1004d63a 	srli	r2,r2,24
   33994:	00000306 	br	339a4 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   33998:	e0bffd17 	ldw	r2,-12(fp)
   3399c:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   339a0:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   339a4:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
   339a8:	e0bffd17 	ldw	r2,-12(fp)
}
   339ac:	e037883a 	mov	sp,fp
   339b0:	df000017 	ldw	fp,0(sp)
   339b4:	dec00104 	addi	sp,sp,4
   339b8:	f800283a 	ret

000339bc <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   339bc:	defffa04 	addi	sp,sp,-24
   339c0:	dfc00515 	stw	ra,20(sp)
   339c4:	df000415 	stw	fp,16(sp)
   339c8:	df000404 	addi	fp,sp,16
   339cc:	e13ffd15 	stw	r4,-12(fp)
   339d0:	e17ffe15 	stw	r5,-8(fp)
   339d4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
   339d8:	01400044 	movi	r5,1
   339dc:	e13ffd17 	ldw	r4,-12(fp)
   339e0:	003395c0 	call	3395c <alt_up_audio_write_fifo_space>
   339e4:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   339e8:	e0bffc17 	ldw	r2,-16(fp)
   339ec:	10801868 	cmpgeui	r2,r2,97
   339f0:	1000021e 	bne	r2,zero,339fc <alt_up_audio_play_r+0x40>
		return 0;
   339f4:	0005883a 	mov	r2,zero
   339f8:	00000506 	br	33a10 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   339fc:	01c00044 	movi	r7,1
   33a00:	e1bfff17 	ldw	r6,-4(fp)
   33a04:	e17ffe17 	ldw	r5,-8(fp)
   33a08:	e13ffd17 	ldw	r4,-12(fp)
   33a0c:	0033b6c0 	call	33b6c <alt_up_audio_write_fifo>
}
   33a10:	e037883a 	mov	sp,fp
   33a14:	dfc00117 	ldw	ra,4(sp)
   33a18:	df000017 	ldw	fp,0(sp)
   33a1c:	dec00204 	addi	sp,sp,8
   33a20:	f800283a 	ret

00033a24 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   33a24:	defffa04 	addi	sp,sp,-24
   33a28:	dfc00515 	stw	ra,20(sp)
   33a2c:	df000415 	stw	fp,16(sp)
   33a30:	df000404 	addi	fp,sp,16
   33a34:	e13ffd15 	stw	r4,-12(fp)
   33a38:	e17ffe15 	stw	r5,-8(fp)
   33a3c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
   33a40:	000b883a 	mov	r5,zero
   33a44:	e13ffd17 	ldw	r4,-12(fp)
   33a48:	003395c0 	call	3395c <alt_up_audio_write_fifo_space>
   33a4c:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   33a50:	e0bffc17 	ldw	r2,-16(fp)
   33a54:	10801868 	cmpgeui	r2,r2,97
   33a58:	1000021e 	bne	r2,zero,33a64 <alt_up_audio_play_l+0x40>
		return 0;
   33a5c:	0005883a 	mov	r2,zero
   33a60:	00000506 	br	33a78 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   33a64:	000f883a 	mov	r7,zero
   33a68:	e1bfff17 	ldw	r6,-4(fp)
   33a6c:	e17ffe17 	ldw	r5,-8(fp)
   33a70:	e13ffd17 	ldw	r4,-12(fp)
   33a74:	0033b6c0 	call	33b6c <alt_up_audio_write_fifo>
}
   33a78:	e037883a 	mov	sp,fp
   33a7c:	dfc00117 	ldw	ra,4(sp)
   33a80:	df000017 	ldw	fp,0(sp)
   33a84:	dec00204 	addi	sp,sp,8
   33a88:	f800283a 	ret

00033a8c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   33a8c:	defff904 	addi	sp,sp,-28
   33a90:	df000615 	stw	fp,24(sp)
   33a94:	df000604 	addi	fp,sp,24
   33a98:	e13ffc15 	stw	r4,-16(fp)
   33a9c:	e17ffd15 	stw	r5,-12(fp)
   33aa0:	e1bffe15 	stw	r6,-8(fp)
   33aa4:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   33aa8:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   33aac:	00002506 	br	33b44 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   33ab0:	e0bffc17 	ldw	r2,-16(fp)
   33ab4:	10800a17 	ldw	r2,40(r2)
   33ab8:	10800104 	addi	r2,r2,4
   33abc:	10800037 	ldwio	r2,0(r2)
   33ac0:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
   33ac4:	e0bfff17 	ldw	r2,-4(fp)
   33ac8:	1000041e 	bne	r2,zero,33adc <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
   33acc:	e0bffb17 	ldw	r2,-20(fp)
   33ad0:	10bfc00c 	andi	r2,r2,65280
			:
   33ad4:	1004d23a 	srli	r2,r2,8
   33ad8:	00000206 	br	33ae4 <alt_up_audio_read_fifo+0x58>
   33adc:	e0bffb17 	ldw	r2,-20(fp)
   33ae0:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   33ae4:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
   33ae8:	e0bffb17 	ldw	r2,-20(fp)
   33aec:	10001926 	beq	r2,zero,33b54 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   33af0:	e0bffa17 	ldw	r2,-24(fp)
   33af4:	1085883a 	add	r2,r2,r2
   33af8:	1085883a 	add	r2,r2,r2
   33afc:	1007883a 	mov	r3,r2
   33b00:	e0bffd17 	ldw	r2,-12(fp)
   33b04:	10c5883a 	add	r2,r2,r3
   33b08:	e0ffff17 	ldw	r3,-4(fp)
   33b0c:	1800051e 	bne	r3,zero,33b24 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   33b10:	e0fffc17 	ldw	r3,-16(fp)
   33b14:	18c00a17 	ldw	r3,40(r3)
   33b18:	18c00204 	addi	r3,r3,8
   33b1c:	18c00037 	ldwio	r3,0(r3)
   33b20:	00000406 	br	33b34 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
   33b24:	e0fffc17 	ldw	r3,-16(fp)
   33b28:	18c00a17 	ldw	r3,40(r3)
   33b2c:	18c00304 	addi	r3,r3,12
   33b30:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   33b34:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
   33b38:	e0bffa17 	ldw	r2,-24(fp)
   33b3c:	10800044 	addi	r2,r2,1
   33b40:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   33b44:	e0fffa17 	ldw	r3,-24(fp)
   33b48:	e0bffe17 	ldw	r2,-8(fp)
   33b4c:	18bfd816 	blt	r3,r2,33ab0 <__alt_data_end+0xf4033ab0>
   33b50:	00000106 	br	33b58 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
   33b54:	0001883a 	nop
		}
	}
	return count;
   33b58:	e0bffa17 	ldw	r2,-24(fp)
}
   33b5c:	e037883a 	mov	sp,fp
   33b60:	df000017 	ldw	fp,0(sp)
   33b64:	dec00104 	addi	sp,sp,4
   33b68:	f800283a 	ret

00033b6c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   33b6c:	defff904 	addi	sp,sp,-28
   33b70:	df000615 	stw	fp,24(sp)
   33b74:	df000604 	addi	fp,sp,24
   33b78:	e13ffc15 	stw	r4,-16(fp)
   33b7c:	e17ffd15 	stw	r5,-12(fp)
   33b80:	e1bffe15 	stw	r6,-8(fp)
   33b84:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   33b88:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   33b8c:	00002f06 	br	33c4c <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   33b90:	e0bffc17 	ldw	r2,-16(fp)
   33b94:	10800a17 	ldw	r2,40(r2)
   33b98:	10800104 	addi	r2,r2,4
   33b9c:	10800037 	ldwio	r2,0(r2)
   33ba0:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   33ba4:	e0bfff17 	ldw	r2,-4(fp)
   33ba8:	1000031e 	bne	r2,zero,33bb8 <alt_up_audio_write_fifo+0x4c>
   33bac:	e0bffb17 	ldw	r2,-20(fp)
   33bb0:	1004d63a 	srli	r2,r2,24
   33bb4:	00000306 	br	33bc4 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   33bb8:	e0bffb17 	ldw	r2,-20(fp)
   33bbc:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   33bc0:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   33bc4:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
   33bc8:	e0bffb17 	ldw	r2,-20(fp)
   33bcc:	10002326 	beq	r2,zero,33c5c <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
   33bd0:	e0bfff17 	ldw	r2,-4(fp)
   33bd4:	10000f1e 	bne	r2,zero,33c14 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
   33bd8:	e0bffc17 	ldw	r2,-16(fp)
   33bdc:	10800a17 	ldw	r2,40(r2)
   33be0:	10800204 	addi	r2,r2,8
   33be4:	1009883a 	mov	r4,r2
   33be8:	e0bffa17 	ldw	r2,-24(fp)
   33bec:	10c00044 	addi	r3,r2,1
   33bf0:	e0fffa15 	stw	r3,-24(fp)
   33bf4:	1085883a 	add	r2,r2,r2
   33bf8:	1085883a 	add	r2,r2,r2
   33bfc:	1007883a 	mov	r3,r2
   33c00:	e0bffd17 	ldw	r2,-12(fp)
   33c04:	10c5883a 	add	r2,r2,r3
   33c08:	10800017 	ldw	r2,0(r2)
   33c0c:	20800035 	stwio	r2,0(r4)
   33c10:	00000e06 	br	33c4c <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
   33c14:	e0bffc17 	ldw	r2,-16(fp)
   33c18:	10800a17 	ldw	r2,40(r2)
   33c1c:	10800304 	addi	r2,r2,12
   33c20:	1009883a 	mov	r4,r2
   33c24:	e0bffa17 	ldw	r2,-24(fp)
   33c28:	10c00044 	addi	r3,r2,1
   33c2c:	e0fffa15 	stw	r3,-24(fp)
   33c30:	1085883a 	add	r2,r2,r2
   33c34:	1085883a 	add	r2,r2,r2
   33c38:	1007883a 	mov	r3,r2
   33c3c:	e0bffd17 	ldw	r2,-12(fp)
   33c40:	10c5883a 	add	r2,r2,r3
   33c44:	10800017 	ldw	r2,0(r2)
   33c48:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   33c4c:	e0fffa17 	ldw	r3,-24(fp)
   33c50:	e0bffe17 	ldw	r2,-8(fp)
   33c54:	18bfce16 	blt	r3,r2,33b90 <__alt_data_end+0xf4033b90>
   33c58:	00000106 	br	33c60 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
   33c5c:	0001883a 	nop
		}
	}
	return count;
   33c60:	e0bffa17 	ldw	r2,-24(fp)
}
   33c64:	e037883a 	mov	sp,fp
   33c68:	df000017 	ldw	fp,0(sp)
   33c6c:	dec00104 	addi	sp,sp,4
   33c70:	f800283a 	ret

00033c74 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
   33c74:	defffd04 	addi	sp,sp,-12
   33c78:	df000215 	stw	fp,8(sp)
   33c7c:	df000204 	addi	fp,sp,8
   33c80:	e13ffe15 	stw	r4,-8(fp)
   33c84:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   33c88:	e0bfff17 	ldw	r2,-4(fp)
   33c8c:	1000051e 	bne	r2,zero,33ca4 <alt_up_audio_read_fifo_head+0x30>
   33c90:	e0bffe17 	ldw	r2,-8(fp)
   33c94:	10800a17 	ldw	r2,40(r2)
   33c98:	10800204 	addi	r2,r2,8
   33c9c:	10800037 	ldwio	r2,0(r2)
   33ca0:	00000406 	br	33cb4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
   33ca4:	e0bffe17 	ldw	r2,-8(fp)
   33ca8:	10800a17 	ldw	r2,40(r2)
   33cac:	10800304 	addi	r2,r2,12
   33cb0:	10800037 	ldwio	r2,0(r2)
}
   33cb4:	e037883a 	mov	sp,fp
   33cb8:	df000017 	ldw	fp,0(sp)
   33cbc:	dec00104 	addi	sp,sp,4
   33cc0:	f800283a 	ret

00033cc4 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
   33cc4:	defffc04 	addi	sp,sp,-16
   33cc8:	df000315 	stw	fp,12(sp)
   33ccc:	df000304 	addi	fp,sp,12
   33cd0:	e13ffd15 	stw	r4,-12(fp)
   33cd4:	e17ffe15 	stw	r5,-8(fp)
   33cd8:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
   33cdc:	e0bfff17 	ldw	r2,-4(fp)
   33ce0:	1000071e 	bne	r2,zero,33d00 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
   33ce4:	e0bffd17 	ldw	r2,-12(fp)
   33ce8:	10800a17 	ldw	r2,40(r2)
   33cec:	10800204 	addi	r2,r2,8
   33cf0:	1007883a 	mov	r3,r2
   33cf4:	e0bffe17 	ldw	r2,-8(fp)
   33cf8:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
   33cfc:	00000606 	br	33d18 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
   33d00:	e0bffd17 	ldw	r2,-12(fp)
   33d04:	10800a17 	ldw	r2,40(r2)
   33d08:	10800304 	addi	r2,r2,12
   33d0c:	1007883a 	mov	r3,r2
   33d10:	e0bffe17 	ldw	r2,-8(fp)
   33d14:	18800035 	stwio	r2,0(r3)
}
   33d18:	0001883a 	nop
   33d1c:	e037883a 	mov	sp,fp
   33d20:	df000017 	ldw	fp,0(sp)
   33d24:	dec00104 	addi	sp,sp,4
   33d28:	f800283a 	ret

00033d2c <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
   33d2c:	defffc04 	addi	sp,sp,-16
   33d30:	dfc00315 	stw	ra,12(sp)
   33d34:	df000215 	stw	fp,8(sp)
   33d38:	df000204 	addi	fp,sp,8
   33d3c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
   33d40:	d1600904 	addi	r5,gp,-32732
   33d44:	e13fff17 	ldw	r4,-4(fp)
   33d48:	00348940 	call	34894 <alt_find_dev>
   33d4c:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
   33d50:	e0bffe17 	ldw	r2,-8(fp)
   33d54:	10800a17 	ldw	r2,40(r2)
   33d58:	10800104 	addi	r2,r2,4
   33d5c:	10800037 	ldwio	r2,0(r2)
   33d60:	10803fec 	andhi	r2,r2,255
   33d64:	1005d43a 	srai	r2,r2,16
   33d68:	1007883a 	mov	r3,r2
   33d6c:	e0bffe17 	ldw	r2,-8(fp)
   33d70:	10c00b15 	stw	r3,44(r2)

  return dev;
   33d74:	e0bffe17 	ldw	r2,-8(fp)
}
   33d78:	e037883a 	mov	sp,fp
   33d7c:	dfc00117 	ldw	ra,4(sp)
   33d80:	df000017 	ldw	fp,0(sp)
   33d84:	dec00204 	addi	sp,sp,8
   33d88:	f800283a 	ret

00033d8c <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   33d8c:	defffc04 	addi	sp,sp,-16
   33d90:	df000315 	stw	fp,12(sp)
   33d94:	df000304 	addi	fp,sp,12
   33d98:	e13ffd15 	stw	r4,-12(fp)
   33d9c:	e17ffe15 	stw	r5,-8(fp)
   33da0:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   33da4:	e0bffd17 	ldw	r2,-12(fp)
   33da8:	10800a17 	ldw	r2,40(r2)
   33dac:	10800204 	addi	r2,r2,8
   33db0:	1007883a 	mov	r3,r2
   33db4:	e0bffe17 	ldw	r2,-8(fp)
   33db8:	10803fcc 	andi	r2,r2,255
   33dbc:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
   33dc0:	e0bffd17 	ldw	r2,-12(fp)
   33dc4:	10800a17 	ldw	r2,40(r2)
   33dc8:	10800304 	addi	r2,r2,12
   33dcc:	1007883a 	mov	r3,r2
   33dd0:	e0bfff17 	ldw	r2,-4(fp)
   33dd4:	10bfffcc 	andi	r2,r2,65535
   33dd8:	18800035 	stwio	r2,0(r3)

	return 0;
   33ddc:	0005883a 	mov	r2,zero
}
   33de0:	e037883a 	mov	sp,fp
   33de4:	df000017 	ldw	fp,0(sp)
   33de8:	dec00104 	addi	sp,sp,4
   33dec:	f800283a 	ret

00033df0 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
   33df0:	defffb04 	addi	sp,sp,-20
   33df4:	dfc00415 	stw	ra,16(sp)
   33df8:	df000315 	stw	fp,12(sp)
   33dfc:	df000304 	addi	fp,sp,12
   33e00:	e13ffd15 	stw	r4,-12(fp)
   33e04:	e17ffe15 	stw	r5,-8(fp)
   33e08:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   33e0c:	e0bffd17 	ldw	r2,-12(fp)
   33e10:	10800a17 	ldw	r2,40(r2)
   33e14:	10800204 	addi	r2,r2,8
   33e18:	1007883a 	mov	r3,r2
   33e1c:	e0bffe17 	ldw	r2,-8(fp)
   33e20:	10803fcc 	andi	r2,r2,255
   33e24:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
   33e28:	e0bffd17 	ldw	r2,-12(fp)
   33e2c:	10800a17 	ldw	r2,40(r2)
   33e30:	10800304 	addi	r2,r2,12
   33e34:	10800037 	ldwio	r2,0(r2)
   33e38:	1007883a 	mov	r3,r2
   33e3c:	e0bfff17 	ldw	r2,-4(fp)
   33e40:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
   33e44:	e13ffd17 	ldw	r4,-12(fp)
   33e48:	0033f140 	call	33f14 <alt_up_av_config_read_acknowledge>
   33e4c:	10000226 	beq	r2,zero,33e58 <alt_up_av_config_read_data+0x68>
		return -1;
   33e50:	00bfffc4 	movi	r2,-1
   33e54:	00000106 	br	33e5c <alt_up_av_config_read_data+0x6c>

	return 0;
   33e58:	0005883a 	mov	r2,zero
}
   33e5c:	e037883a 	mov	sp,fp
   33e60:	dfc00117 	ldw	ra,4(sp)
   33e64:	df000017 	ldw	fp,0(sp)
   33e68:	dec00204 	addi	sp,sp,8
   33e6c:	f800283a 	ret

00033e70 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
   33e70:	defffe04 	addi	sp,sp,-8
   33e74:	df000115 	stw	fp,4(sp)
   33e78:	df000104 	addi	fp,sp,4
   33e7c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
   33e80:	e0bfff17 	ldw	r2,-4(fp)
   33e84:	10800a17 	ldw	r2,40(r2)
   33e88:	1007883a 	mov	r3,r2
   33e8c:	00800044 	movi	r2,1
   33e90:	18800025 	stbio	r2,0(r3)
	return 0;
   33e94:	0005883a 	mov	r2,zero
}
   33e98:	e037883a 	mov	sp,fp
   33e9c:	df000017 	ldw	fp,0(sp)
   33ea0:	dec00104 	addi	sp,sp,4
   33ea4:	f800283a 	ret

00033ea8 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
   33ea8:	defffe04 	addi	sp,sp,-8
   33eac:	df000115 	stw	fp,4(sp)
   33eb0:	df000104 	addi	fp,sp,4
   33eb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
   33eb8:	e0bfff17 	ldw	r2,-4(fp)
   33ebc:	10800a17 	ldw	r2,40(r2)
   33ec0:	1007883a 	mov	r3,r2
   33ec4:	00800084 	movi	r2,2
   33ec8:	18800025 	stbio	r2,0(r3)
	return 0;
   33ecc:	0005883a 	mov	r2,zero
}
   33ed0:	e037883a 	mov	sp,fp
   33ed4:	df000017 	ldw	fp,0(sp)
   33ed8:	dec00104 	addi	sp,sp,4
   33edc:	f800283a 	ret

00033ee0 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
   33ee0:	defffe04 	addi	sp,sp,-8
   33ee4:	df000115 	stw	fp,4(sp)
   33ee8:	df000104 	addi	fp,sp,4
   33eec:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
   33ef0:	e0bfff17 	ldw	r2,-4(fp)
   33ef4:	10800a17 	ldw	r2,40(r2)
   33ef8:	0007883a 	mov	r3,zero
   33efc:	10c00025 	stbio	r3,0(r2)
	return 0;
   33f00:	0005883a 	mov	r2,zero
}
   33f04:	e037883a 	mov	sp,fp
   33f08:	df000017 	ldw	fp,0(sp)
   33f0c:	dec00104 	addi	sp,sp,4
   33f10:	f800283a 	ret

00033f14 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
   33f14:	defffe04 	addi	sp,sp,-8
   33f18:	df000115 	stw	fp,4(sp)
   33f1c:	df000104 	addi	fp,sp,4
   33f20:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
   33f24:	e0bfff17 	ldw	r2,-4(fp)
   33f28:	10800a17 	ldw	r2,40(r2)
   33f2c:	10800104 	addi	r2,r2,4
   33f30:	10800037 	ldwio	r2,0(r2)
   33f34:	1080008c 	andi	r2,r2,2
   33f38:	1005d07a 	srai	r2,r2,1
   33f3c:	10000626 	beq	r2,zero,33f58 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
   33f40:	e0bfff17 	ldw	r2,-4(fp)
   33f44:	10800a17 	ldw	r2,40(r2)
   33f48:	10800104 	addi	r2,r2,4
   33f4c:	10800037 	ldwio	r2,0(r2)
   33f50:	1080004c 	andi	r2,r2,1
   33f54:	00000106 	br	33f5c <alt_up_av_config_read_acknowledge+0x48>
	return -1;
   33f58:	00bfffc4 	movi	r2,-1
}
   33f5c:	e037883a 	mov	sp,fp
   33f60:	df000017 	ldw	fp,0(sp)
   33f64:	dec00104 	addi	sp,sp,4
   33f68:	f800283a 	ret

00033f6c <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
   33f6c:	defffe04 	addi	sp,sp,-8
   33f70:	df000115 	stw	fp,4(sp)
   33f74:	df000104 	addi	fp,sp,4
   33f78:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
   33f7c:	e0bfff17 	ldw	r2,-4(fp)
   33f80:	10800a17 	ldw	r2,40(r2)
   33f84:	10800104 	addi	r2,r2,4
   33f88:	10800037 	ldwio	r2,0(r2)
   33f8c:	1080008c 	andi	r2,r2,2
   33f90:	1005d07a 	srai	r2,r2,1
}
   33f94:	e037883a 	mov	sp,fp
   33f98:	df000017 	ldw	fp,0(sp)
   33f9c:	dec00104 	addi	sp,sp,4
   33fa0:	f800283a 	ret

00033fa4 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   33fa4:	defffa04 	addi	sp,sp,-24
   33fa8:	dfc00515 	stw	ra,20(sp)
   33fac:	df000415 	stw	fp,16(sp)
   33fb0:	df000404 	addi	fp,sp,16
   33fb4:	e13ffd15 	stw	r4,-12(fp)
   33fb8:	e17ffe15 	stw	r5,-8(fp)
   33fbc:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   33fc0:	e0bffd17 	ldw	r2,-12(fp)
   33fc4:	10800b17 	ldw	r2,44(r2)
   33fc8:	10800060 	cmpeqi	r2,r2,1
   33fcc:	10000e1e 	bne	r2,zero,34008 <alt_up_av_config_write_audio_cfg_register+0x64>
   33fd0:	e0bffd17 	ldw	r2,-12(fp)
   33fd4:	10800b17 	ldw	r2,44(r2)
   33fd8:	108000a0 	cmpeqi	r2,r2,2
   33fdc:	10000a1e 	bne	r2,zero,34008 <alt_up_av_config_write_audio_cfg_register+0x64>
   33fe0:	e0bffd17 	ldw	r2,-12(fp)
   33fe4:	10800b17 	ldw	r2,44(r2)
   33fe8:	108000e0 	cmpeqi	r2,r2,3
   33fec:	1000061e 	bne	r2,zero,34008 <alt_up_av_config_write_audio_cfg_register+0x64>
   33ff0:	e0bffd17 	ldw	r2,-12(fp)
   33ff4:	10800b17 	ldw	r2,44(r2)
   33ff8:	10800120 	cmpeqi	r2,r2,4
   33ffc:	1000021e 	bne	r2,zero,34008 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
   34000:	00bffa84 	movi	r2,-22
   34004:	00000b06 	br	34034 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
   34008:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
   3400c:	e0bffd17 	ldw	r2,-12(fp)
   34010:	10800a17 	ldw	r2,40(r2)
   34014:	10800084 	addi	r2,r2,2
   34018:	1007883a 	mov	r3,r2
   3401c:	e0bffc17 	ldw	r2,-16(fp)
   34020:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
   34024:	e1bfff17 	ldw	r6,-4(fp)
   34028:	e17ffe17 	ldw	r5,-8(fp)
   3402c:	e13ffd17 	ldw	r4,-12(fp)
   34030:	0033d8c0 	call	33d8c <alt_up_av_config_write_data>
}
   34034:	e037883a 	mov	sp,fp
   34038:	dfc00117 	ldw	ra,4(sp)
   3403c:	df000017 	ldw	fp,0(sp)
   34040:	dec00204 	addi	sp,sp,8
   34044:	f800283a 	ret

00034048 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
   34048:	defffa04 	addi	sp,sp,-24
   3404c:	dfc00515 	stw	ra,20(sp)
   34050:	df000415 	stw	fp,16(sp)
   34054:	df000404 	addi	fp,sp,16
   34058:	e13ffc15 	stw	r4,-16(fp)
   3405c:	e17ffd15 	stw	r5,-12(fp)
   34060:	e1bffe15 	stw	r6,-8(fp)
   34064:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   34068:	e0bffc17 	ldw	r2,-16(fp)
   3406c:	10800b17 	ldw	r2,44(r2)
   34070:	108000a0 	cmpeqi	r2,r2,2
   34074:	10000a1e 	bne	r2,zero,340a0 <alt_up_av_config_read_video_cfg_register+0x58>
   34078:	e0bffc17 	ldw	r2,-16(fp)
   3407c:	10800b17 	ldw	r2,44(r2)
   34080:	108000e0 	cmpeqi	r2,r2,3
   34084:	1000061e 	bne	r2,zero,340a0 <alt_up_av_config_read_video_cfg_register+0x58>
   34088:	e0bffc17 	ldw	r2,-16(fp)
   3408c:	10800b17 	ldw	r2,44(r2)
   34090:	10800120 	cmpeqi	r2,r2,4
   34094:	1000021e 	bne	r2,zero,340a0 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
   34098:	00bffa84 	movi	r2,-22
   3409c:	00001f06 	br	3411c <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   340a0:	e0bffc17 	ldw	r2,-16(fp)
   340a4:	10800b17 	ldw	r2,44(r2)
   340a8:	108000a0 	cmpeqi	r2,r2,2
   340ac:	1000041e 	bne	r2,zero,340c0 <alt_up_av_config_read_video_cfg_register+0x78>
   340b0:	e0bffc17 	ldw	r2,-16(fp)
   340b4:	10800b17 	ldw	r2,44(r2)
   340b8:	10800118 	cmpnei	r2,r2,4
   340bc:	1000051e 	bne	r2,zero,340d4 <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   340c0:	e0bfff17 	ldw	r2,-4(fp)
   340c4:	10800060 	cmpeqi	r2,r2,1
   340c8:	10000a1e 	bne	r2,zero,340f4 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
   340cc:	00bffa84 	movi	r2,-22
   340d0:	00001206 	br	3411c <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   340d4:	e0bfff17 	ldw	r2,-4(fp)
   340d8:	10800060 	cmpeqi	r2,r2,1
   340dc:	1000051e 	bne	r2,zero,340f4 <alt_up_av_config_read_video_cfg_register+0xac>
   340e0:	e0bfff17 	ldw	r2,-4(fp)
   340e4:	108000a0 	cmpeqi	r2,r2,2
   340e8:	1000021e 	bne	r2,zero,340f4 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
   340ec:	00bffa84 	movi	r2,-22
   340f0:	00000a06 	br	3411c <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   340f4:	e0bffc17 	ldw	r2,-16(fp)
   340f8:	10800a17 	ldw	r2,40(r2)
   340fc:	10800084 	addi	r2,r2,2
   34100:	1007883a 	mov	r3,r2
   34104:	e0bfff17 	ldw	r2,-4(fp)
   34108:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
   3410c:	e1bffe17 	ldw	r6,-8(fp)
   34110:	e17ffd17 	ldw	r5,-12(fp)
   34114:	e13ffc17 	ldw	r4,-16(fp)
   34118:	0033df00 	call	33df0 <alt_up_av_config_read_data>
}
   3411c:	e037883a 	mov	sp,fp
   34120:	dfc00117 	ldw	ra,4(sp)
   34124:	df000017 	ldw	fp,0(sp)
   34128:	dec00204 	addi	sp,sp,8
   3412c:	f800283a 	ret

00034130 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
   34130:	defffa04 	addi	sp,sp,-24
   34134:	dfc00515 	stw	ra,20(sp)
   34138:	df000415 	stw	fp,16(sp)
   3413c:	df000404 	addi	fp,sp,16
   34140:	e13ffc15 	stw	r4,-16(fp)
   34144:	e17ffd15 	stw	r5,-12(fp)
   34148:	e1bffe15 	stw	r6,-8(fp)
   3414c:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   34150:	e0bffc17 	ldw	r2,-16(fp)
   34154:	10800b17 	ldw	r2,44(r2)
   34158:	108000a0 	cmpeqi	r2,r2,2
   3415c:	10000a1e 	bne	r2,zero,34188 <alt_up_av_config_write_video_cfg_register+0x58>
   34160:	e0bffc17 	ldw	r2,-16(fp)
   34164:	10800b17 	ldw	r2,44(r2)
   34168:	108000e0 	cmpeqi	r2,r2,3
   3416c:	1000061e 	bne	r2,zero,34188 <alt_up_av_config_write_video_cfg_register+0x58>
   34170:	e0bffc17 	ldw	r2,-16(fp)
   34174:	10800b17 	ldw	r2,44(r2)
   34178:	10800120 	cmpeqi	r2,r2,4
   3417c:	1000021e 	bne	r2,zero,34188 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
   34180:	00bffa84 	movi	r2,-22
   34184:	00001f06 	br	34204 <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   34188:	e0bffc17 	ldw	r2,-16(fp)
   3418c:	10800b17 	ldw	r2,44(r2)
   34190:	108000a0 	cmpeqi	r2,r2,2
   34194:	1000041e 	bne	r2,zero,341a8 <alt_up_av_config_write_video_cfg_register+0x78>
   34198:	e0bffc17 	ldw	r2,-16(fp)
   3419c:	10800b17 	ldw	r2,44(r2)
   341a0:	10800118 	cmpnei	r2,r2,4
   341a4:	1000051e 	bne	r2,zero,341bc <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   341a8:	e0bfff17 	ldw	r2,-4(fp)
   341ac:	10800060 	cmpeqi	r2,r2,1
   341b0:	10000a1e 	bne	r2,zero,341dc <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
   341b4:	00bffa84 	movi	r2,-22
   341b8:	00001206 	br	34204 <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   341bc:	e0bfff17 	ldw	r2,-4(fp)
   341c0:	10800060 	cmpeqi	r2,r2,1
   341c4:	1000051e 	bne	r2,zero,341dc <alt_up_av_config_write_video_cfg_register+0xac>
   341c8:	e0bfff17 	ldw	r2,-4(fp)
   341cc:	108000a0 	cmpeqi	r2,r2,2
   341d0:	1000021e 	bne	r2,zero,341dc <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
   341d4:	00bffa84 	movi	r2,-22
   341d8:	00000a06 	br	34204 <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   341dc:	e0bffc17 	ldw	r2,-16(fp)
   341e0:	10800a17 	ldw	r2,40(r2)
   341e4:	10800084 	addi	r2,r2,2
   341e8:	1007883a 	mov	r3,r2
   341ec:	e0bfff17 	ldw	r2,-4(fp)
   341f0:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
   341f4:	e1bffe17 	ldw	r6,-8(fp)
   341f8:	e17ffd17 	ldw	r5,-12(fp)
   341fc:	e13ffc17 	ldw	r4,-16(fp)
   34200:	0033d8c0 	call	33d8c <alt_up_av_config_write_data>
}
   34204:	e037883a 	mov	sp,fp
   34208:	dfc00117 	ldw	ra,4(sp)
   3420c:	df000017 	ldw	fp,0(sp)
   34210:	dec00204 	addi	sp,sp,8
   34214:	f800283a 	ret

00034218 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   34218:	defffb04 	addi	sp,sp,-20
   3421c:	dfc00415 	stw	ra,16(sp)
   34220:	df000315 	stw	fp,12(sp)
   34224:	df000304 	addi	fp,sp,12
   34228:	e13ffd15 	stw	r4,-12(fp)
   3422c:	e17ffe15 	stw	r5,-8(fp)
   34230:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   34234:	e0bffd17 	ldw	r2,-12(fp)
   34238:	10800b17 	ldw	r2,44(r2)
   3423c:	10800220 	cmpeqi	r2,r2,8
   34240:	1000021e 	bne	r2,zero,3424c <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
   34244:	00bffa84 	movi	r2,-22
   34248:	00000406 	br	3425c <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
   3424c:	e1bfff17 	ldw	r6,-4(fp)
   34250:	e17ffe17 	ldw	r5,-8(fp)
   34254:	e13ffd17 	ldw	r4,-12(fp)
   34258:	0033df00 	call	33df0 <alt_up_av_config_read_data>
}
   3425c:	e037883a 	mov	sp,fp
   34260:	dfc00117 	ldw	ra,4(sp)
   34264:	df000017 	ldw	fp,0(sp)
   34268:	dec00204 	addi	sp,sp,8
   3426c:	f800283a 	ret

00034270 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   34270:	defffb04 	addi	sp,sp,-20
   34274:	dfc00415 	stw	ra,16(sp)
   34278:	df000315 	stw	fp,12(sp)
   3427c:	df000304 	addi	fp,sp,12
   34280:	e13ffd15 	stw	r4,-12(fp)
   34284:	e17ffe15 	stw	r5,-8(fp)
   34288:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   3428c:	e0bffd17 	ldw	r2,-12(fp)
   34290:	10800b17 	ldw	r2,44(r2)
   34294:	10800220 	cmpeqi	r2,r2,8
   34298:	1000021e 	bne	r2,zero,342a4 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
   3429c:	00bffa84 	movi	r2,-22
   342a0:	00000406 	br	342b4 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
   342a4:	e1bfff17 	ldw	r6,-4(fp)
   342a8:	e17ffe17 	ldw	r5,-8(fp)
   342ac:	e13ffd17 	ldw	r4,-12(fp)
   342b0:	0033d8c0 	call	33d8c <alt_up_av_config_write_data>
}
   342b4:	e037883a 	mov	sp,fp
   342b8:	dfc00117 	ldw	ra,4(sp)
   342bc:	df000017 	ldw	fp,0(sp)
   342c0:	dec00204 	addi	sp,sp,8
   342c4:	f800283a 	ret

000342c8 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   342c8:	defffb04 	addi	sp,sp,-20
   342cc:	dfc00415 	stw	ra,16(sp)
   342d0:	df000315 	stw	fp,12(sp)
   342d4:	df000304 	addi	fp,sp,12
   342d8:	e13ffd15 	stw	r4,-12(fp)
   342dc:	e17ffe15 	stw	r5,-8(fp)
   342e0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   342e4:	e0bffd17 	ldw	r2,-12(fp)
   342e8:	10800b17 	ldw	r2,44(r2)
   342ec:	10800260 	cmpeqi	r2,r2,9
   342f0:	1000021e 	bne	r2,zero,342fc <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
   342f4:	00bffa84 	movi	r2,-22
   342f8:	00000406 	br	3430c <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
   342fc:	e1bfff17 	ldw	r6,-4(fp)
   34300:	e17ffe17 	ldw	r5,-8(fp)
   34304:	e13ffd17 	ldw	r4,-12(fp)
   34308:	0033df00 	call	33df0 <alt_up_av_config_read_data>
}
   3430c:	e037883a 	mov	sp,fp
   34310:	dfc00117 	ldw	ra,4(sp)
   34314:	df000017 	ldw	fp,0(sp)
   34318:	dec00204 	addi	sp,sp,8
   3431c:	f800283a 	ret

00034320 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   34320:	defffb04 	addi	sp,sp,-20
   34324:	dfc00415 	stw	ra,16(sp)
   34328:	df000315 	stw	fp,12(sp)
   3432c:	df000304 	addi	fp,sp,12
   34330:	e13ffd15 	stw	r4,-12(fp)
   34334:	e17ffe15 	stw	r5,-8(fp)
   34338:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   3433c:	e0bffd17 	ldw	r2,-12(fp)
   34340:	10800b17 	ldw	r2,44(r2)
   34344:	10800260 	cmpeqi	r2,r2,9
   34348:	1000021e 	bne	r2,zero,34354 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
   3434c:	00bffa84 	movi	r2,-22
   34350:	00000406 	br	34364 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
   34354:	e1bfff17 	ldw	r6,-4(fp)
   34358:	e17ffe17 	ldw	r5,-8(fp)
   3435c:	e13ffd17 	ldw	r4,-12(fp)
   34360:	0033d8c0 	call	33d8c <alt_up_av_config_write_data>
}
   34364:	e037883a 	mov	sp,fp
   34368:	dfc00117 	ldw	ra,4(sp)
   3436c:	df000017 	ldw	fp,0(sp)
   34370:	dec00204 	addi	sp,sp,8
   34374:	f800283a 	ret

00034378 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   34378:	defffb04 	addi	sp,sp,-20
   3437c:	dfc00415 	stw	ra,16(sp)
   34380:	df000315 	stw	fp,12(sp)
   34384:	df000304 	addi	fp,sp,12
   34388:	e13ffd15 	stw	r4,-12(fp)
   3438c:	e17ffe15 	stw	r5,-8(fp)
   34390:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   34394:	e0bffd17 	ldw	r2,-12(fp)
   34398:	10800b17 	ldw	r2,44(r2)
   3439c:	108002a0 	cmpeqi	r2,r2,10
   343a0:	1000021e 	bne	r2,zero,343ac <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
   343a4:	00bffa84 	movi	r2,-22
   343a8:	00000406 	br	343bc <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
   343ac:	e1bfff17 	ldw	r6,-4(fp)
   343b0:	e17ffe17 	ldw	r5,-8(fp)
   343b4:	e13ffd17 	ldw	r4,-12(fp)
   343b8:	0033df00 	call	33df0 <alt_up_av_config_read_data>
}
   343bc:	e037883a 	mov	sp,fp
   343c0:	dfc00117 	ldw	ra,4(sp)
   343c4:	df000017 	ldw	fp,0(sp)
   343c8:	dec00204 	addi	sp,sp,8
   343cc:	f800283a 	ret

000343d0 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   343d0:	defffb04 	addi	sp,sp,-20
   343d4:	dfc00415 	stw	ra,16(sp)
   343d8:	df000315 	stw	fp,12(sp)
   343dc:	df000304 	addi	fp,sp,12
   343e0:	e13ffd15 	stw	r4,-12(fp)
   343e4:	e17ffe15 	stw	r5,-8(fp)
   343e8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   343ec:	e0bffd17 	ldw	r2,-12(fp)
   343f0:	10800b17 	ldw	r2,44(r2)
   343f4:	108002a0 	cmpeqi	r2,r2,10
   343f8:	1000021e 	bne	r2,zero,34404 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
   343fc:	00bffa84 	movi	r2,-22
   34400:	00000406 	br	34414 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
   34404:	e1bfff17 	ldw	r6,-4(fp)
   34408:	e17ffe17 	ldw	r5,-8(fp)
   3440c:	e13ffd17 	ldw	r4,-12(fp)
   34410:	0033d8c0 	call	33d8c <alt_up_av_config_write_data>
}
   34414:	e037883a 	mov	sp,fp
   34418:	dfc00117 	ldw	ra,4(sp)
   3441c:	df000017 	ldw	fp,0(sp)
   34420:	dec00204 	addi	sp,sp,8
   34424:	f800283a 	ret

00034428 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   34428:	defff504 	addi	sp,sp,-44
   3442c:	df000a15 	stw	fp,40(sp)
   34430:	df000a04 	addi	fp,sp,40
   34434:	e13ffc15 	stw	r4,-16(fp)
   34438:	e17ffd15 	stw	r5,-12(fp)
   3443c:	e1bffe15 	stw	r6,-8(fp)
   34440:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   34444:	e03ff615 	stw	zero,-40(fp)
   34448:	d0a72317 	ldw	r2,-25460(gp)
  
  if (alt_ticks_per_second ())
   3444c:	10003c26 	beq	r2,zero,34540 <alt_alarm_start+0x118>
  {
    if (alarm)
   34450:	e0bffc17 	ldw	r2,-16(fp)
   34454:	10003826 	beq	r2,zero,34538 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   34458:	e0bffc17 	ldw	r2,-16(fp)
   3445c:	e0fffe17 	ldw	r3,-8(fp)
   34460:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   34464:	e0bffc17 	ldw	r2,-16(fp)
   34468:	e0ffff17 	ldw	r3,-4(fp)
   3446c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34470:	0005303a 	rdctl	r2,status
   34474:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34478:	e0fff917 	ldw	r3,-28(fp)
   3447c:	00bfff84 	movi	r2,-2
   34480:	1884703a 	and	r2,r3,r2
   34484:	1001703a 	wrctl	status,r2
  
  return context;
   34488:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   3448c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   34490:	d0a72417 	ldw	r2,-25456(gp)
      
      current_nticks = alt_nticks();
   34494:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   34498:	e0fffd17 	ldw	r3,-12(fp)
   3449c:	e0bff617 	ldw	r2,-40(fp)
   344a0:	1885883a 	add	r2,r3,r2
   344a4:	10c00044 	addi	r3,r2,1
   344a8:	e0bffc17 	ldw	r2,-16(fp)
   344ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   344b0:	e0bffc17 	ldw	r2,-16(fp)
   344b4:	10c00217 	ldw	r3,8(r2)
   344b8:	e0bff617 	ldw	r2,-40(fp)
   344bc:	1880042e 	bgeu	r3,r2,344d0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   344c0:	e0bffc17 	ldw	r2,-16(fp)
   344c4:	00c00044 	movi	r3,1
   344c8:	10c00405 	stb	r3,16(r2)
   344cc:	00000206 	br	344d8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   344d0:	e0bffc17 	ldw	r2,-16(fp)
   344d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   344d8:	e0bffc17 	ldw	r2,-16(fp)
   344dc:	d0e01304 	addi	r3,gp,-32692
   344e0:	e0fffa15 	stw	r3,-24(fp)
   344e4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   344e8:	e0bffb17 	ldw	r2,-20(fp)
   344ec:	e0fffa17 	ldw	r3,-24(fp)
   344f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   344f4:	e0bffa17 	ldw	r2,-24(fp)
   344f8:	10c00017 	ldw	r3,0(r2)
   344fc:	e0bffb17 	ldw	r2,-20(fp)
   34500:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   34504:	e0bffa17 	ldw	r2,-24(fp)
   34508:	10800017 	ldw	r2,0(r2)
   3450c:	e0fffb17 	ldw	r3,-20(fp)
   34510:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   34514:	e0bffa17 	ldw	r2,-24(fp)
   34518:	e0fffb17 	ldw	r3,-20(fp)
   3451c:	10c00015 	stw	r3,0(r2)
   34520:	e0bff817 	ldw	r2,-32(fp)
   34524:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34528:	e0bff717 	ldw	r2,-36(fp)
   3452c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   34530:	0005883a 	mov	r2,zero
   34534:	00000306 	br	34544 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   34538:	00bffa84 	movi	r2,-22
   3453c:	00000106 	br	34544 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   34540:	00bfde84 	movi	r2,-134
  }
}
   34544:	e037883a 	mov	sp,fp
   34548:	df000017 	ldw	fp,0(sp)
   3454c:	dec00104 	addi	sp,sp,4
   34550:	f800283a 	ret

00034554 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   34554:	defffa04 	addi	sp,sp,-24
   34558:	dfc00515 	stw	ra,20(sp)
   3455c:	df000415 	stw	fp,16(sp)
   34560:	df000404 	addi	fp,sp,16
   34564:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   34568:	008000c4 	movi	r2,3
   3456c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   34570:	e0fffd17 	ldw	r3,-12(fp)
   34574:	008003f4 	movhi	r2,15
   34578:	10909004 	addi	r2,r2,16960
   3457c:	1885383a 	mul	r2,r3,r2
   34580:	100b883a 	mov	r5,r2
   34584:	0100bef4 	movhi	r4,763
   34588:	213c2004 	addi	r4,r4,-3968
   3458c:	00234880 	call	23488 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   34590:	100b883a 	mov	r5,r2
   34594:	01200034 	movhi	r4,32768
   34598:	213fffc4 	addi	r4,r4,-1
   3459c:	00234880 	call	23488 <__udivsi3>
   345a0:	100b883a 	mov	r5,r2
   345a4:	e13fff17 	ldw	r4,-4(fp)
   345a8:	00234880 	call	23488 <__udivsi3>
   345ac:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   345b0:	e0bffe17 	ldw	r2,-8(fp)
   345b4:	10002a26 	beq	r2,zero,34660 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   345b8:	e03ffc15 	stw	zero,-16(fp)
   345bc:	00001706 	br	3461c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   345c0:	00a00034 	movhi	r2,32768
   345c4:	10bfffc4 	addi	r2,r2,-1
   345c8:	10bfffc4 	addi	r2,r2,-1
   345cc:	103ffe1e 	bne	r2,zero,345c8 <__alt_data_end+0xf40345c8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   345d0:	e0fffd17 	ldw	r3,-12(fp)
   345d4:	008003f4 	movhi	r2,15
   345d8:	10909004 	addi	r2,r2,16960
   345dc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   345e0:	100b883a 	mov	r5,r2
   345e4:	0100bef4 	movhi	r4,763
   345e8:	213c2004 	addi	r4,r4,-3968
   345ec:	00234880 	call	23488 <__udivsi3>
   345f0:	100b883a 	mov	r5,r2
   345f4:	01200034 	movhi	r4,32768
   345f8:	213fffc4 	addi	r4,r4,-1
   345fc:	00234880 	call	23488 <__udivsi3>
   34600:	1007883a 	mov	r3,r2
   34604:	e0bfff17 	ldw	r2,-4(fp)
   34608:	10c5c83a 	sub	r2,r2,r3
   3460c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   34610:	e0bffc17 	ldw	r2,-16(fp)
   34614:	10800044 	addi	r2,r2,1
   34618:	e0bffc15 	stw	r2,-16(fp)
   3461c:	e0fffc17 	ldw	r3,-16(fp)
   34620:	e0bffe17 	ldw	r2,-8(fp)
   34624:	18bfe616 	blt	r3,r2,345c0 <__alt_data_end+0xf40345c0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   34628:	e0fffd17 	ldw	r3,-12(fp)
   3462c:	008003f4 	movhi	r2,15
   34630:	10909004 	addi	r2,r2,16960
   34634:	1885383a 	mul	r2,r3,r2
   34638:	100b883a 	mov	r5,r2
   3463c:	0100bef4 	movhi	r4,763
   34640:	213c2004 	addi	r4,r4,-3968
   34644:	00234880 	call	23488 <__udivsi3>
   34648:	1007883a 	mov	r3,r2
   3464c:	e0bfff17 	ldw	r2,-4(fp)
   34650:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   34654:	10bfffc4 	addi	r2,r2,-1
   34658:	103ffe1e 	bne	r2,zero,34654 <__alt_data_end+0xf4034654>
   3465c:	00000d06 	br	34694 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   34660:	e0fffd17 	ldw	r3,-12(fp)
   34664:	008003f4 	movhi	r2,15
   34668:	10909004 	addi	r2,r2,16960
   3466c:	1885383a 	mul	r2,r3,r2
   34670:	100b883a 	mov	r5,r2
   34674:	0100bef4 	movhi	r4,763
   34678:	213c2004 	addi	r4,r4,-3968
   3467c:	00234880 	call	23488 <__udivsi3>
   34680:	1007883a 	mov	r3,r2
   34684:	e0bfff17 	ldw	r2,-4(fp)
   34688:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   3468c:	10bfffc4 	addi	r2,r2,-1
   34690:	00bffe16 	blt	zero,r2,3468c <__alt_data_end+0xf403468c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   34694:	0005883a 	mov	r2,zero
}
   34698:	e037883a 	mov	sp,fp
   3469c:	dfc00117 	ldw	ra,4(sp)
   346a0:	df000017 	ldw	fp,0(sp)
   346a4:	dec00204 	addi	sp,sp,8
   346a8:	f800283a 	ret

000346ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   346ac:	defffe04 	addi	sp,sp,-8
   346b0:	df000115 	stw	fp,4(sp)
   346b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   346b8:	e03fff15 	stw	zero,-4(fp)
   346bc:	00000506 	br	346d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   346c0:	e0bfff17 	ldw	r2,-4(fp)
   346c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   346c8:	e0bfff17 	ldw	r2,-4(fp)
   346cc:	10800804 	addi	r2,r2,32
   346d0:	e0bfff15 	stw	r2,-4(fp)
   346d4:	e0bfff17 	ldw	r2,-4(fp)
   346d8:	10820030 	cmpltui	r2,r2,2048
   346dc:	103ff81e 	bne	r2,zero,346c0 <__alt_data_end+0xf40346c0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   346e0:	0001883a 	nop
   346e4:	e037883a 	mov	sp,fp
   346e8:	df000017 	ldw	fp,0(sp)
   346ec:	dec00104 	addi	sp,sp,4
   346f0:	f800283a 	ret

000346f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   346f4:	defffe04 	addi	sp,sp,-8
   346f8:	dfc00115 	stw	ra,4(sp)
   346fc:	df000015 	stw	fp,0(sp)
   34700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   34704:	d0a00c17 	ldw	r2,-32720(gp)
   34708:	10000326 	beq	r2,zero,34718 <alt_get_errno+0x24>
   3470c:	d0a00c17 	ldw	r2,-32720(gp)
   34710:	103ee83a 	callr	r2
   34714:	00000106 	br	3471c <alt_get_errno+0x28>
   34718:	d0a71e04 	addi	r2,gp,-25480
}
   3471c:	e037883a 	mov	sp,fp
   34720:	dfc00117 	ldw	ra,4(sp)
   34724:	df000017 	ldw	fp,0(sp)
   34728:	dec00204 	addi	sp,sp,8
   3472c:	f800283a 	ret

00034730 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   34730:	defffa04 	addi	sp,sp,-24
   34734:	dfc00515 	stw	ra,20(sp)
   34738:	df000415 	stw	fp,16(sp)
   3473c:	df000404 	addi	fp,sp,16
   34740:	e13ffe15 	stw	r4,-8(fp)
   34744:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   34748:	e0bffe17 	ldw	r2,-8(fp)
   3474c:	10000326 	beq	r2,zero,3475c <alt_dev_llist_insert+0x2c>
   34750:	e0bffe17 	ldw	r2,-8(fp)
   34754:	10800217 	ldw	r2,8(r2)
   34758:	1000061e 	bne	r2,zero,34774 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   3475c:	00346f40 	call	346f4 <alt_get_errno>
   34760:	1007883a 	mov	r3,r2
   34764:	00800584 	movi	r2,22
   34768:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   3476c:	00bffa84 	movi	r2,-22
   34770:	00001306 	br	347c0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   34774:	e0bffe17 	ldw	r2,-8(fp)
   34778:	e0ffff17 	ldw	r3,-4(fp)
   3477c:	e0fffc15 	stw	r3,-16(fp)
   34780:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   34784:	e0bffd17 	ldw	r2,-12(fp)
   34788:	e0fffc17 	ldw	r3,-16(fp)
   3478c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   34790:	e0bffc17 	ldw	r2,-16(fp)
   34794:	10c00017 	ldw	r3,0(r2)
   34798:	e0bffd17 	ldw	r2,-12(fp)
   3479c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   347a0:	e0bffc17 	ldw	r2,-16(fp)
   347a4:	10800017 	ldw	r2,0(r2)
   347a8:	e0fffd17 	ldw	r3,-12(fp)
   347ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   347b0:	e0bffc17 	ldw	r2,-16(fp)
   347b4:	e0fffd17 	ldw	r3,-12(fp)
   347b8:	10c00015 	stw	r3,0(r2)

  return 0;  
   347bc:	0005883a 	mov	r2,zero
}
   347c0:	e037883a 	mov	sp,fp
   347c4:	dfc00117 	ldw	ra,4(sp)
   347c8:	df000017 	ldw	fp,0(sp)
   347cc:	dec00204 	addi	sp,sp,8
   347d0:	f800283a 	ret

000347d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   347d4:	defffd04 	addi	sp,sp,-12
   347d8:	dfc00215 	stw	ra,8(sp)
   347dc:	df000115 	stw	fp,4(sp)
   347e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   347e4:	008000f4 	movhi	r2,3
   347e8:	1095a704 	addi	r2,r2,22172
   347ec:	e0bfff15 	stw	r2,-4(fp)
   347f0:	00000606 	br	3480c <_do_ctors+0x38>
        (*ctor) (); 
   347f4:	e0bfff17 	ldw	r2,-4(fp)
   347f8:	10800017 	ldw	r2,0(r2)
   347fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   34800:	e0bfff17 	ldw	r2,-4(fp)
   34804:	10bfff04 	addi	r2,r2,-4
   34808:	e0bfff15 	stw	r2,-4(fp)
   3480c:	e0ffff17 	ldw	r3,-4(fp)
   34810:	008000f4 	movhi	r2,3
   34814:	1095a804 	addi	r2,r2,22176
   34818:	18bff62e 	bgeu	r3,r2,347f4 <__alt_data_end+0xf40347f4>
        (*ctor) (); 
}
   3481c:	0001883a 	nop
   34820:	e037883a 	mov	sp,fp
   34824:	dfc00117 	ldw	ra,4(sp)
   34828:	df000017 	ldw	fp,0(sp)
   3482c:	dec00204 	addi	sp,sp,8
   34830:	f800283a 	ret

00034834 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   34834:	defffd04 	addi	sp,sp,-12
   34838:	dfc00215 	stw	ra,8(sp)
   3483c:	df000115 	stw	fp,4(sp)
   34840:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   34844:	008000f4 	movhi	r2,3
   34848:	1095a704 	addi	r2,r2,22172
   3484c:	e0bfff15 	stw	r2,-4(fp)
   34850:	00000606 	br	3486c <_do_dtors+0x38>
        (*dtor) (); 
   34854:	e0bfff17 	ldw	r2,-4(fp)
   34858:	10800017 	ldw	r2,0(r2)
   3485c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   34860:	e0bfff17 	ldw	r2,-4(fp)
   34864:	10bfff04 	addi	r2,r2,-4
   34868:	e0bfff15 	stw	r2,-4(fp)
   3486c:	e0ffff17 	ldw	r3,-4(fp)
   34870:	008000f4 	movhi	r2,3
   34874:	1095a804 	addi	r2,r2,22176
   34878:	18bff62e 	bgeu	r3,r2,34854 <__alt_data_end+0xf4034854>
        (*dtor) (); 
}
   3487c:	0001883a 	nop
   34880:	e037883a 	mov	sp,fp
   34884:	dfc00117 	ldw	ra,4(sp)
   34888:	df000017 	ldw	fp,0(sp)
   3488c:	dec00204 	addi	sp,sp,8
   34890:	f800283a 	ret

00034894 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   34894:	defffa04 	addi	sp,sp,-24
   34898:	dfc00515 	stw	ra,20(sp)
   3489c:	df000415 	stw	fp,16(sp)
   348a0:	df000404 	addi	fp,sp,16
   348a4:	e13ffe15 	stw	r4,-8(fp)
   348a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   348ac:	e0bfff17 	ldw	r2,-4(fp)
   348b0:	10800017 	ldw	r2,0(r2)
   348b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   348b8:	e13ffe17 	ldw	r4,-8(fp)
   348bc:	002740c0 	call	2740c <strlen>
   348c0:	10800044 	addi	r2,r2,1
   348c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   348c8:	00000d06 	br	34900 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   348cc:	e0bffc17 	ldw	r2,-16(fp)
   348d0:	10800217 	ldw	r2,8(r2)
   348d4:	e0fffd17 	ldw	r3,-12(fp)
   348d8:	180d883a 	mov	r6,r3
   348dc:	e17ffe17 	ldw	r5,-8(fp)
   348e0:	1009883a 	mov	r4,r2
   348e4:	00353580 	call	35358 <memcmp>
   348e8:	1000021e 	bne	r2,zero,348f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   348ec:	e0bffc17 	ldw	r2,-16(fp)
   348f0:	00000706 	br	34910 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   348f4:	e0bffc17 	ldw	r2,-16(fp)
   348f8:	10800017 	ldw	r2,0(r2)
   348fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   34900:	e0fffc17 	ldw	r3,-16(fp)
   34904:	e0bfff17 	ldw	r2,-4(fp)
   34908:	18bff01e 	bne	r3,r2,348cc <__alt_data_end+0xf40348cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   3490c:	0005883a 	mov	r2,zero
}
   34910:	e037883a 	mov	sp,fp
   34914:	dfc00117 	ldw	ra,4(sp)
   34918:	df000017 	ldw	fp,0(sp)
   3491c:	dec00204 	addi	sp,sp,8
   34920:	f800283a 	ret

00034924 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   34924:	defffe04 	addi	sp,sp,-8
   34928:	dfc00115 	stw	ra,4(sp)
   3492c:	df000015 	stw	fp,0(sp)
   34930:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   34934:	01440004 	movi	r5,4096
   34938:	0009883a 	mov	r4,zero
   3493c:	00351e00 	call	351e0 <alt_icache_flush>
#endif
}
   34940:	0001883a 	nop
   34944:	e037883a 	mov	sp,fp
   34948:	dfc00117 	ldw	ra,4(sp)
   3494c:	df000017 	ldw	fp,0(sp)
   34950:	dec00204 	addi	sp,sp,8
   34954:	f800283a 	ret

00034958 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   34958:	defff904 	addi	sp,sp,-28
   3495c:	dfc00615 	stw	ra,24(sp)
   34960:	df000515 	stw	fp,20(sp)
   34964:	df000504 	addi	fp,sp,20
   34968:	e13ffc15 	stw	r4,-16(fp)
   3496c:	e17ffd15 	stw	r5,-12(fp)
   34970:	e1bffe15 	stw	r6,-8(fp)
   34974:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   34978:	e1bfff17 	ldw	r6,-4(fp)
   3497c:	e17ffe17 	ldw	r5,-8(fp)
   34980:	e13ffd17 	ldw	r4,-12(fp)
   34984:	0034d180 	call	34d18 <open>
   34988:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3498c:	e0bffb17 	ldw	r2,-20(fp)
   34990:	10001c16 	blt	r2,zero,34a04 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   34994:	008000f4 	movhi	r2,3
   34998:	1099e604 	addi	r2,r2,26520
   3499c:	e0fffb17 	ldw	r3,-20(fp)
   349a0:	18c00324 	muli	r3,r3,12
   349a4:	10c5883a 	add	r2,r2,r3
   349a8:	10c00017 	ldw	r3,0(r2)
   349ac:	e0bffc17 	ldw	r2,-16(fp)
   349b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   349b4:	008000f4 	movhi	r2,3
   349b8:	1099e604 	addi	r2,r2,26520
   349bc:	e0fffb17 	ldw	r3,-20(fp)
   349c0:	18c00324 	muli	r3,r3,12
   349c4:	10c5883a 	add	r2,r2,r3
   349c8:	10800104 	addi	r2,r2,4
   349cc:	10c00017 	ldw	r3,0(r2)
   349d0:	e0bffc17 	ldw	r2,-16(fp)
   349d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   349d8:	008000f4 	movhi	r2,3
   349dc:	1099e604 	addi	r2,r2,26520
   349e0:	e0fffb17 	ldw	r3,-20(fp)
   349e4:	18c00324 	muli	r3,r3,12
   349e8:	10c5883a 	add	r2,r2,r3
   349ec:	10800204 	addi	r2,r2,8
   349f0:	10c00017 	ldw	r3,0(r2)
   349f4:	e0bffc17 	ldw	r2,-16(fp)
   349f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   349fc:	e13ffb17 	ldw	r4,-20(fp)
   34a00:	0031b000 	call	31b00 <alt_release_fd>
  }
} 
   34a04:	0001883a 	nop
   34a08:	e037883a 	mov	sp,fp
   34a0c:	dfc00117 	ldw	ra,4(sp)
   34a10:	df000017 	ldw	fp,0(sp)
   34a14:	dec00204 	addi	sp,sp,8
   34a18:	f800283a 	ret

00034a1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   34a1c:	defffb04 	addi	sp,sp,-20
   34a20:	dfc00415 	stw	ra,16(sp)
   34a24:	df000315 	stw	fp,12(sp)
   34a28:	df000304 	addi	fp,sp,12
   34a2c:	e13ffd15 	stw	r4,-12(fp)
   34a30:	e17ffe15 	stw	r5,-8(fp)
   34a34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   34a38:	01c07fc4 	movi	r7,511
   34a3c:	01800044 	movi	r6,1
   34a40:	e17ffd17 	ldw	r5,-12(fp)
   34a44:	010000f4 	movhi	r4,3
   34a48:	2119e904 	addi	r4,r4,26532
   34a4c:	00349580 	call	34958 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   34a50:	01c07fc4 	movi	r7,511
   34a54:	000d883a 	mov	r6,zero
   34a58:	e17ffe17 	ldw	r5,-8(fp)
   34a5c:	010000f4 	movhi	r4,3
   34a60:	2119e604 	addi	r4,r4,26520
   34a64:	00349580 	call	34958 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   34a68:	01c07fc4 	movi	r7,511
   34a6c:	01800044 	movi	r6,1
   34a70:	e17fff17 	ldw	r5,-4(fp)
   34a74:	010000f4 	movhi	r4,3
   34a78:	2119ec04 	addi	r4,r4,26544
   34a7c:	00349580 	call	34958 <alt_open_fd>
}  
   34a80:	0001883a 	nop
   34a84:	e037883a 	mov	sp,fp
   34a88:	dfc00117 	ldw	ra,4(sp)
   34a8c:	df000017 	ldw	fp,0(sp)
   34a90:	dec00204 	addi	sp,sp,8
   34a94:	f800283a 	ret

00034a98 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   34a98:	defff004 	addi	sp,sp,-64
   34a9c:	df000f15 	stw	fp,60(sp)
   34aa0:	df000f04 	addi	fp,sp,60
   34aa4:	e13ffd15 	stw	r4,-12(fp)
   34aa8:	e17ffe15 	stw	r5,-8(fp)
   34aac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   34ab0:	00bffa84 	movi	r2,-22
   34ab4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   34ab8:	e0bffd17 	ldw	r2,-12(fp)
   34abc:	10800828 	cmpgeui	r2,r2,32
   34ac0:	1000501e 	bne	r2,zero,34c04 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34ac4:	0005303a 	rdctl	r2,status
   34ac8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34acc:	e0fff617 	ldw	r3,-40(fp)
   34ad0:	00bfff84 	movi	r2,-2
   34ad4:	1884703a 	and	r2,r3,r2
   34ad8:	1001703a 	wrctl	status,r2
  
  return context;
   34adc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   34ae0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   34ae4:	00800134 	movhi	r2,4
   34ae8:	10a5ce04 	addi	r2,r2,-26824
   34aec:	e0fffd17 	ldw	r3,-12(fp)
   34af0:	180690fa 	slli	r3,r3,3
   34af4:	10c5883a 	add	r2,r2,r3
   34af8:	e0ffff17 	ldw	r3,-4(fp)
   34afc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   34b00:	00800134 	movhi	r2,4
   34b04:	10a5ce04 	addi	r2,r2,-26824
   34b08:	e0fffd17 	ldw	r3,-12(fp)
   34b0c:	180690fa 	slli	r3,r3,3
   34b10:	10c5883a 	add	r2,r2,r3
   34b14:	10800104 	addi	r2,r2,4
   34b18:	e0fffe17 	ldw	r3,-8(fp)
   34b1c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   34b20:	e0bfff17 	ldw	r2,-4(fp)
   34b24:	10001926 	beq	r2,zero,34b8c <alt_irq_register+0xf4>
   34b28:	e0bffd17 	ldw	r2,-12(fp)
   34b2c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34b30:	0005303a 	rdctl	r2,status
   34b34:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34b38:	e0fff717 	ldw	r3,-36(fp)
   34b3c:	00bfff84 	movi	r2,-2
   34b40:	1884703a 	and	r2,r3,r2
   34b44:	1001703a 	wrctl	status,r2
  
  return context;
   34b48:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   34b4c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   34b50:	00c00044 	movi	r3,1
   34b54:	e0bff217 	ldw	r2,-56(fp)
   34b58:	1884983a 	sll	r2,r3,r2
   34b5c:	1007883a 	mov	r3,r2
   34b60:	d0a72217 	ldw	r2,-25464(gp)
   34b64:	1884b03a 	or	r2,r3,r2
   34b68:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   34b6c:	d0a72217 	ldw	r2,-25464(gp)
   34b70:	100170fa 	wrctl	ienable,r2
   34b74:	e0bff817 	ldw	r2,-32(fp)
   34b78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34b7c:	e0bff917 	ldw	r2,-28(fp)
   34b80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   34b84:	0005883a 	mov	r2,zero
   34b88:	00001906 	br	34bf0 <alt_irq_register+0x158>
   34b8c:	e0bffd17 	ldw	r2,-12(fp)
   34b90:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34b94:	0005303a 	rdctl	r2,status
   34b98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34b9c:	e0fffa17 	ldw	r3,-24(fp)
   34ba0:	00bfff84 	movi	r2,-2
   34ba4:	1884703a 	and	r2,r3,r2
   34ba8:	1001703a 	wrctl	status,r2
  
  return context;
   34bac:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   34bb0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   34bb4:	00c00044 	movi	r3,1
   34bb8:	e0bff417 	ldw	r2,-48(fp)
   34bbc:	1884983a 	sll	r2,r3,r2
   34bc0:	0084303a 	nor	r2,zero,r2
   34bc4:	1007883a 	mov	r3,r2
   34bc8:	d0a72217 	ldw	r2,-25464(gp)
   34bcc:	1884703a 	and	r2,r3,r2
   34bd0:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   34bd4:	d0a72217 	ldw	r2,-25464(gp)
   34bd8:	100170fa 	wrctl	ienable,r2
   34bdc:	e0bffb17 	ldw	r2,-20(fp)
   34be0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34be4:	e0bffc17 	ldw	r2,-16(fp)
   34be8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   34bec:	0005883a 	mov	r2,zero
   34bf0:	e0bff115 	stw	r2,-60(fp)
   34bf4:	e0bff317 	ldw	r2,-52(fp)
   34bf8:	e0bff515 	stw	r2,-44(fp)
   34bfc:	e0bff517 	ldw	r2,-44(fp)
   34c00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   34c04:	e0bff117 	ldw	r2,-60(fp)
}
   34c08:	e037883a 	mov	sp,fp
   34c0c:	df000017 	ldw	fp,0(sp)
   34c10:	dec00104 	addi	sp,sp,4
   34c14:	f800283a 	ret

00034c18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   34c18:	defffe04 	addi	sp,sp,-8
   34c1c:	dfc00115 	stw	ra,4(sp)
   34c20:	df000015 	stw	fp,0(sp)
   34c24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   34c28:	d0a00c17 	ldw	r2,-32720(gp)
   34c2c:	10000326 	beq	r2,zero,34c3c <alt_get_errno+0x24>
   34c30:	d0a00c17 	ldw	r2,-32720(gp)
   34c34:	103ee83a 	callr	r2
   34c38:	00000106 	br	34c40 <alt_get_errno+0x28>
   34c3c:	d0a71e04 	addi	r2,gp,-25480
}
   34c40:	e037883a 	mov	sp,fp
   34c44:	dfc00117 	ldw	ra,4(sp)
   34c48:	df000017 	ldw	fp,0(sp)
   34c4c:	dec00204 	addi	sp,sp,8
   34c50:	f800283a 	ret

00034c54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   34c54:	defffd04 	addi	sp,sp,-12
   34c58:	df000215 	stw	fp,8(sp)
   34c5c:	df000204 	addi	fp,sp,8
   34c60:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   34c64:	e0bfff17 	ldw	r2,-4(fp)
   34c68:	10800217 	ldw	r2,8(r2)
   34c6c:	10d00034 	orhi	r3,r2,16384
   34c70:	e0bfff17 	ldw	r2,-4(fp)
   34c74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   34c78:	e03ffe15 	stw	zero,-8(fp)
   34c7c:	00001d06 	br	34cf4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   34c80:	008000f4 	movhi	r2,3
   34c84:	1099e604 	addi	r2,r2,26520
   34c88:	e0fffe17 	ldw	r3,-8(fp)
   34c8c:	18c00324 	muli	r3,r3,12
   34c90:	10c5883a 	add	r2,r2,r3
   34c94:	10c00017 	ldw	r3,0(r2)
   34c98:	e0bfff17 	ldw	r2,-4(fp)
   34c9c:	10800017 	ldw	r2,0(r2)
   34ca0:	1880111e 	bne	r3,r2,34ce8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   34ca4:	008000f4 	movhi	r2,3
   34ca8:	1099e604 	addi	r2,r2,26520
   34cac:	e0fffe17 	ldw	r3,-8(fp)
   34cb0:	18c00324 	muli	r3,r3,12
   34cb4:	10c5883a 	add	r2,r2,r3
   34cb8:	10800204 	addi	r2,r2,8
   34cbc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   34cc0:	1000090e 	bge	r2,zero,34ce8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   34cc4:	e0bffe17 	ldw	r2,-8(fp)
   34cc8:	10c00324 	muli	r3,r2,12
   34ccc:	008000f4 	movhi	r2,3
   34cd0:	1099e604 	addi	r2,r2,26520
   34cd4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   34cd8:	e0bfff17 	ldw	r2,-4(fp)
   34cdc:	18800226 	beq	r3,r2,34ce8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   34ce0:	00bffcc4 	movi	r2,-13
   34ce4:	00000806 	br	34d08 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   34ce8:	e0bffe17 	ldw	r2,-8(fp)
   34cec:	10800044 	addi	r2,r2,1
   34cf0:	e0bffe15 	stw	r2,-8(fp)
   34cf4:	d0a00b17 	ldw	r2,-32724(gp)
   34cf8:	1007883a 	mov	r3,r2
   34cfc:	e0bffe17 	ldw	r2,-8(fp)
   34d00:	18bfdf2e 	bgeu	r3,r2,34c80 <__alt_data_end+0xf4034c80>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   34d04:	0005883a 	mov	r2,zero
}
   34d08:	e037883a 	mov	sp,fp
   34d0c:	df000017 	ldw	fp,0(sp)
   34d10:	dec00104 	addi	sp,sp,4
   34d14:	f800283a 	ret

00034d18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   34d18:	defff604 	addi	sp,sp,-40
   34d1c:	dfc00915 	stw	ra,36(sp)
   34d20:	df000815 	stw	fp,32(sp)
   34d24:	df000804 	addi	fp,sp,32
   34d28:	e13ffd15 	stw	r4,-12(fp)
   34d2c:	e17ffe15 	stw	r5,-8(fp)
   34d30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   34d34:	00bfffc4 	movi	r2,-1
   34d38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   34d3c:	00bffb44 	movi	r2,-19
   34d40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   34d44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   34d48:	d1600904 	addi	r5,gp,-32732
   34d4c:	e13ffd17 	ldw	r4,-12(fp)
   34d50:	00348940 	call	34894 <alt_find_dev>
   34d54:	e0bff815 	stw	r2,-32(fp)
   34d58:	e0bff817 	ldw	r2,-32(fp)
   34d5c:	1000051e 	bne	r2,zero,34d74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   34d60:	e13ffd17 	ldw	r4,-12(fp)
   34d64:	00350340 	call	35034 <alt_find_file>
   34d68:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   34d6c:	00800044 	movi	r2,1
   34d70:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   34d74:	e0bff817 	ldw	r2,-32(fp)
   34d78:	10002926 	beq	r2,zero,34e20 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   34d7c:	e13ff817 	ldw	r4,-32(fp)
   34d80:	003513c0 	call	3513c <alt_get_fd>
   34d84:	e0bff915 	stw	r2,-28(fp)
   34d88:	e0bff917 	ldw	r2,-28(fp)
   34d8c:	1000030e 	bge	r2,zero,34d9c <open+0x84>
    {
      status = index;
   34d90:	e0bff917 	ldw	r2,-28(fp)
   34d94:	e0bffa15 	stw	r2,-24(fp)
   34d98:	00002306 	br	34e28 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   34d9c:	e0bff917 	ldw	r2,-28(fp)
   34da0:	10c00324 	muli	r3,r2,12
   34da4:	008000f4 	movhi	r2,3
   34da8:	1099e604 	addi	r2,r2,26520
   34dac:	1885883a 	add	r2,r3,r2
   34db0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   34db4:	e0fffe17 	ldw	r3,-8(fp)
   34db8:	00900034 	movhi	r2,16384
   34dbc:	10bfffc4 	addi	r2,r2,-1
   34dc0:	1886703a 	and	r3,r3,r2
   34dc4:	e0bffc17 	ldw	r2,-16(fp)
   34dc8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   34dcc:	e0bffb17 	ldw	r2,-20(fp)
   34dd0:	1000051e 	bne	r2,zero,34de8 <open+0xd0>
   34dd4:	e13ffc17 	ldw	r4,-16(fp)
   34dd8:	0034c540 	call	34c54 <alt_file_locked>
   34ddc:	e0bffa15 	stw	r2,-24(fp)
   34de0:	e0bffa17 	ldw	r2,-24(fp)
   34de4:	10001016 	blt	r2,zero,34e28 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   34de8:	e0bff817 	ldw	r2,-32(fp)
   34dec:	10800317 	ldw	r2,12(r2)
   34df0:	10000826 	beq	r2,zero,34e14 <open+0xfc>
   34df4:	e0bff817 	ldw	r2,-32(fp)
   34df8:	10800317 	ldw	r2,12(r2)
   34dfc:	e1ffff17 	ldw	r7,-4(fp)
   34e00:	e1bffe17 	ldw	r6,-8(fp)
   34e04:	e17ffd17 	ldw	r5,-12(fp)
   34e08:	e13ffc17 	ldw	r4,-16(fp)
   34e0c:	103ee83a 	callr	r2
   34e10:	00000106 	br	34e18 <open+0x100>
   34e14:	0005883a 	mov	r2,zero
   34e18:	e0bffa15 	stw	r2,-24(fp)
   34e1c:	00000206 	br	34e28 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   34e20:	00bffb44 	movi	r2,-19
   34e24:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   34e28:	e0bffa17 	ldw	r2,-24(fp)
   34e2c:	1000090e 	bge	r2,zero,34e54 <open+0x13c>
  {
    alt_release_fd (index);  
   34e30:	e13ff917 	ldw	r4,-28(fp)
   34e34:	0031b000 	call	31b00 <alt_release_fd>
    ALT_ERRNO = -status;
   34e38:	0034c180 	call	34c18 <alt_get_errno>
   34e3c:	1007883a 	mov	r3,r2
   34e40:	e0bffa17 	ldw	r2,-24(fp)
   34e44:	0085c83a 	sub	r2,zero,r2
   34e48:	18800015 	stw	r2,0(r3)
    return -1;
   34e4c:	00bfffc4 	movi	r2,-1
   34e50:	00000106 	br	34e58 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   34e54:	e0bff917 	ldw	r2,-28(fp)
}
   34e58:	e037883a 	mov	sp,fp
   34e5c:	dfc00117 	ldw	ra,4(sp)
   34e60:	df000017 	ldw	fp,0(sp)
   34e64:	dec00204 	addi	sp,sp,8
   34e68:	f800283a 	ret

00034e6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   34e6c:	defffa04 	addi	sp,sp,-24
   34e70:	df000515 	stw	fp,20(sp)
   34e74:	df000504 	addi	fp,sp,20
   34e78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34e7c:	0005303a 	rdctl	r2,status
   34e80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34e84:	e0fffc17 	ldw	r3,-16(fp)
   34e88:	00bfff84 	movi	r2,-2
   34e8c:	1884703a 	and	r2,r3,r2
   34e90:	1001703a 	wrctl	status,r2
  
  return context;
   34e94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   34e98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   34e9c:	e0bfff17 	ldw	r2,-4(fp)
   34ea0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   34ea4:	e0bffd17 	ldw	r2,-12(fp)
   34ea8:	10800017 	ldw	r2,0(r2)
   34eac:	e0fffd17 	ldw	r3,-12(fp)
   34eb0:	18c00117 	ldw	r3,4(r3)
   34eb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   34eb8:	e0bffd17 	ldw	r2,-12(fp)
   34ebc:	10800117 	ldw	r2,4(r2)
   34ec0:	e0fffd17 	ldw	r3,-12(fp)
   34ec4:	18c00017 	ldw	r3,0(r3)
   34ec8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   34ecc:	e0bffd17 	ldw	r2,-12(fp)
   34ed0:	e0fffd17 	ldw	r3,-12(fp)
   34ed4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   34ed8:	e0bffd17 	ldw	r2,-12(fp)
   34edc:	e0fffd17 	ldw	r3,-12(fp)
   34ee0:	10c00015 	stw	r3,0(r2)
   34ee4:	e0bffb17 	ldw	r2,-20(fp)
   34ee8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34eec:	e0bffe17 	ldw	r2,-8(fp)
   34ef0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   34ef4:	0001883a 	nop
   34ef8:	e037883a 	mov	sp,fp
   34efc:	df000017 	ldw	fp,0(sp)
   34f00:	dec00104 	addi	sp,sp,4
   34f04:	f800283a 	ret

00034f08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   34f08:	defffb04 	addi	sp,sp,-20
   34f0c:	dfc00415 	stw	ra,16(sp)
   34f10:	df000315 	stw	fp,12(sp)
   34f14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   34f18:	d0a01317 	ldw	r2,-32692(gp)
   34f1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   34f20:	d0a72417 	ldw	r2,-25456(gp)
   34f24:	10800044 	addi	r2,r2,1
   34f28:	d0a72415 	stw	r2,-25456(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   34f2c:	00002e06 	br	34fe8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   34f30:	e0bffd17 	ldw	r2,-12(fp)
   34f34:	10800017 	ldw	r2,0(r2)
   34f38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   34f3c:	e0bffd17 	ldw	r2,-12(fp)
   34f40:	10800403 	ldbu	r2,16(r2)
   34f44:	10803fcc 	andi	r2,r2,255
   34f48:	10000426 	beq	r2,zero,34f5c <alt_tick+0x54>
   34f4c:	d0a72417 	ldw	r2,-25456(gp)
   34f50:	1000021e 	bne	r2,zero,34f5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   34f54:	e0bffd17 	ldw	r2,-12(fp)
   34f58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   34f5c:	e0bffd17 	ldw	r2,-12(fp)
   34f60:	10800217 	ldw	r2,8(r2)
   34f64:	d0e72417 	ldw	r3,-25456(gp)
   34f68:	18801d36 	bltu	r3,r2,34fe0 <alt_tick+0xd8>
   34f6c:	e0bffd17 	ldw	r2,-12(fp)
   34f70:	10800403 	ldbu	r2,16(r2)
   34f74:	10803fcc 	andi	r2,r2,255
   34f78:	1000191e 	bne	r2,zero,34fe0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   34f7c:	e0bffd17 	ldw	r2,-12(fp)
   34f80:	10800317 	ldw	r2,12(r2)
   34f84:	e0fffd17 	ldw	r3,-12(fp)
   34f88:	18c00517 	ldw	r3,20(r3)
   34f8c:	1809883a 	mov	r4,r3
   34f90:	103ee83a 	callr	r2
   34f94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   34f98:	e0bfff17 	ldw	r2,-4(fp)
   34f9c:	1000031e 	bne	r2,zero,34fac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   34fa0:	e13ffd17 	ldw	r4,-12(fp)
   34fa4:	0034e6c0 	call	34e6c <alt_alarm_stop>
   34fa8:	00000d06 	br	34fe0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   34fac:	e0bffd17 	ldw	r2,-12(fp)
   34fb0:	10c00217 	ldw	r3,8(r2)
   34fb4:	e0bfff17 	ldw	r2,-4(fp)
   34fb8:	1887883a 	add	r3,r3,r2
   34fbc:	e0bffd17 	ldw	r2,-12(fp)
   34fc0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   34fc4:	e0bffd17 	ldw	r2,-12(fp)
   34fc8:	10c00217 	ldw	r3,8(r2)
   34fcc:	d0a72417 	ldw	r2,-25456(gp)
   34fd0:	1880032e 	bgeu	r3,r2,34fe0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   34fd4:	e0bffd17 	ldw	r2,-12(fp)
   34fd8:	00c00044 	movi	r3,1
   34fdc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   34fe0:	e0bffe17 	ldw	r2,-8(fp)
   34fe4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   34fe8:	e0fffd17 	ldw	r3,-12(fp)
   34fec:	d0a01304 	addi	r2,gp,-32692
   34ff0:	18bfcf1e 	bne	r3,r2,34f30 <__alt_data_end+0xf4034f30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   34ff4:	0001883a 	nop
}
   34ff8:	0001883a 	nop
   34ffc:	e037883a 	mov	sp,fp
   35000:	dfc00117 	ldw	ra,4(sp)
   35004:	df000017 	ldw	fp,0(sp)
   35008:	dec00204 	addi	sp,sp,8
   3500c:	f800283a 	ret

00035010 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   35010:	deffff04 	addi	sp,sp,-4
   35014:	df000015 	stw	fp,0(sp)
   35018:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3501c:	000170fa 	wrctl	ienable,zero
}
   35020:	0001883a 	nop
   35024:	e037883a 	mov	sp,fp
   35028:	df000017 	ldw	fp,0(sp)
   3502c:	dec00104 	addi	sp,sp,4
   35030:	f800283a 	ret

00035034 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   35034:	defffb04 	addi	sp,sp,-20
   35038:	dfc00415 	stw	ra,16(sp)
   3503c:	df000315 	stw	fp,12(sp)
   35040:	df000304 	addi	fp,sp,12
   35044:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   35048:	d0a00717 	ldw	r2,-32740(gp)
   3504c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   35050:	00003106 	br	35118 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   35054:	e0bffd17 	ldw	r2,-12(fp)
   35058:	10800217 	ldw	r2,8(r2)
   3505c:	1009883a 	mov	r4,r2
   35060:	002740c0 	call	2740c <strlen>
   35064:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   35068:	e0bffd17 	ldw	r2,-12(fp)
   3506c:	10c00217 	ldw	r3,8(r2)
   35070:	e0bffe17 	ldw	r2,-8(fp)
   35074:	10bfffc4 	addi	r2,r2,-1
   35078:	1885883a 	add	r2,r3,r2
   3507c:	10800003 	ldbu	r2,0(r2)
   35080:	10803fcc 	andi	r2,r2,255
   35084:	1080201c 	xori	r2,r2,128
   35088:	10bfe004 	addi	r2,r2,-128
   3508c:	10800bd8 	cmpnei	r2,r2,47
   35090:	1000031e 	bne	r2,zero,350a0 <alt_find_file+0x6c>
    {
      len -= 1;
   35094:	e0bffe17 	ldw	r2,-8(fp)
   35098:	10bfffc4 	addi	r2,r2,-1
   3509c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   350a0:	e0bffe17 	ldw	r2,-8(fp)
   350a4:	e0ffff17 	ldw	r3,-4(fp)
   350a8:	1885883a 	add	r2,r3,r2
   350ac:	10800003 	ldbu	r2,0(r2)
   350b0:	10803fcc 	andi	r2,r2,255
   350b4:	1080201c 	xori	r2,r2,128
   350b8:	10bfe004 	addi	r2,r2,-128
   350bc:	10800be0 	cmpeqi	r2,r2,47
   350c0:	1000081e 	bne	r2,zero,350e4 <alt_find_file+0xb0>
   350c4:	e0bffe17 	ldw	r2,-8(fp)
   350c8:	e0ffff17 	ldw	r3,-4(fp)
   350cc:	1885883a 	add	r2,r3,r2
   350d0:	10800003 	ldbu	r2,0(r2)
   350d4:	10803fcc 	andi	r2,r2,255
   350d8:	1080201c 	xori	r2,r2,128
   350dc:	10bfe004 	addi	r2,r2,-128
   350e0:	10000a1e 	bne	r2,zero,3510c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   350e4:	e0bffd17 	ldw	r2,-12(fp)
   350e8:	10800217 	ldw	r2,8(r2)
   350ec:	e0fffe17 	ldw	r3,-8(fp)
   350f0:	180d883a 	mov	r6,r3
   350f4:	e17fff17 	ldw	r5,-4(fp)
   350f8:	1009883a 	mov	r4,r2
   350fc:	00353580 	call	35358 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   35100:	1000021e 	bne	r2,zero,3510c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   35104:	e0bffd17 	ldw	r2,-12(fp)
   35108:	00000706 	br	35128 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   3510c:	e0bffd17 	ldw	r2,-12(fp)
   35110:	10800017 	ldw	r2,0(r2)
   35114:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   35118:	e0fffd17 	ldw	r3,-12(fp)
   3511c:	d0a00704 	addi	r2,gp,-32740
   35120:	18bfcc1e 	bne	r3,r2,35054 <__alt_data_end+0xf4035054>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   35124:	0005883a 	mov	r2,zero
}
   35128:	e037883a 	mov	sp,fp
   3512c:	dfc00117 	ldw	ra,4(sp)
   35130:	df000017 	ldw	fp,0(sp)
   35134:	dec00204 	addi	sp,sp,8
   35138:	f800283a 	ret

0003513c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3513c:	defffc04 	addi	sp,sp,-16
   35140:	df000315 	stw	fp,12(sp)
   35144:	df000304 	addi	fp,sp,12
   35148:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   3514c:	00bffa04 	movi	r2,-24
   35150:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   35154:	e03ffd15 	stw	zero,-12(fp)
   35158:	00001906 	br	351c0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   3515c:	008000f4 	movhi	r2,3
   35160:	1099e604 	addi	r2,r2,26520
   35164:	e0fffd17 	ldw	r3,-12(fp)
   35168:	18c00324 	muli	r3,r3,12
   3516c:	10c5883a 	add	r2,r2,r3
   35170:	10800017 	ldw	r2,0(r2)
   35174:	10000f1e 	bne	r2,zero,351b4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   35178:	008000f4 	movhi	r2,3
   3517c:	1099e604 	addi	r2,r2,26520
   35180:	e0fffd17 	ldw	r3,-12(fp)
   35184:	18c00324 	muli	r3,r3,12
   35188:	10c5883a 	add	r2,r2,r3
   3518c:	e0ffff17 	ldw	r3,-4(fp)
   35190:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   35194:	d0e00b17 	ldw	r3,-32724(gp)
   35198:	e0bffd17 	ldw	r2,-12(fp)
   3519c:	1880020e 	bge	r3,r2,351a8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   351a0:	e0bffd17 	ldw	r2,-12(fp)
   351a4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   351a8:	e0bffd17 	ldw	r2,-12(fp)
   351ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   351b0:	00000606 	br	351cc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   351b4:	e0bffd17 	ldw	r2,-12(fp)
   351b8:	10800044 	addi	r2,r2,1
   351bc:	e0bffd15 	stw	r2,-12(fp)
   351c0:	e0bffd17 	ldw	r2,-12(fp)
   351c4:	10800810 	cmplti	r2,r2,32
   351c8:	103fe41e 	bne	r2,zero,3515c <__alt_data_end+0xf403515c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   351cc:	e0bffe17 	ldw	r2,-8(fp)
}
   351d0:	e037883a 	mov	sp,fp
   351d4:	df000017 	ldw	fp,0(sp)
   351d8:	dec00104 	addi	sp,sp,4
   351dc:	f800283a 	ret

000351e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   351e0:	defffb04 	addi	sp,sp,-20
   351e4:	df000415 	stw	fp,16(sp)
   351e8:	df000404 	addi	fp,sp,16
   351ec:	e13ffe15 	stw	r4,-8(fp)
   351f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   351f4:	e0bfff17 	ldw	r2,-4(fp)
   351f8:	10840070 	cmpltui	r2,r2,4097
   351fc:	1000021e 	bne	r2,zero,35208 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   35200:	00840004 	movi	r2,4096
   35204:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   35208:	e0fffe17 	ldw	r3,-8(fp)
   3520c:	e0bfff17 	ldw	r2,-4(fp)
   35210:	1885883a 	add	r2,r3,r2
   35214:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   35218:	e0bffe17 	ldw	r2,-8(fp)
   3521c:	e0bffc15 	stw	r2,-16(fp)
   35220:	00000506 	br	35238 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   35224:	e0bffc17 	ldw	r2,-16(fp)
   35228:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   3522c:	e0bffc17 	ldw	r2,-16(fp)
   35230:	10800804 	addi	r2,r2,32
   35234:	e0bffc15 	stw	r2,-16(fp)
   35238:	e0fffc17 	ldw	r3,-16(fp)
   3523c:	e0bffd17 	ldw	r2,-12(fp)
   35240:	18bff836 	bltu	r3,r2,35224 <__alt_data_end+0xf4035224>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   35244:	e0bffe17 	ldw	r2,-8(fp)
   35248:	108007cc 	andi	r2,r2,31
   3524c:	10000226 	beq	r2,zero,35258 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   35250:	e0bffc17 	ldw	r2,-16(fp)
   35254:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   35258:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   3525c:	0001883a 	nop
   35260:	e037883a 	mov	sp,fp
   35264:	df000017 	ldw	fp,0(sp)
   35268:	dec00104 	addi	sp,sp,4
   3526c:	f800283a 	ret

00035270 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   35270:	defffe04 	addi	sp,sp,-8
   35274:	df000115 	stw	fp,4(sp)
   35278:	df000104 	addi	fp,sp,4
   3527c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   35280:	e0bfff17 	ldw	r2,-4(fp)
   35284:	10bffe84 	addi	r2,r2,-6
   35288:	10c00428 	cmpgeui	r3,r2,16
   3528c:	18001a1e 	bne	r3,zero,352f8 <alt_exception_cause_generated_bad_addr+0x88>
   35290:	100690ba 	slli	r3,r2,2
   35294:	008000f4 	movhi	r2,3
   35298:	1094aa04 	addi	r2,r2,21160
   3529c:	1885883a 	add	r2,r3,r2
   352a0:	10800017 	ldw	r2,0(r2)
   352a4:	1000683a 	jmp	r2
   352a8:	000352e8 	cmpgeui	zero,zero,3403
   352ac:	000352e8 	cmpgeui	zero,zero,3403
   352b0:	000352f8 	rdprs	zero,zero,3403
   352b4:	000352f8 	rdprs	zero,zero,3403
   352b8:	000352f8 	rdprs	zero,zero,3403
   352bc:	000352e8 	cmpgeui	zero,zero,3403
   352c0:	000352f0 	cmpltui	zero,zero,3403
   352c4:	000352f8 	rdprs	zero,zero,3403
   352c8:	000352e8 	cmpgeui	zero,zero,3403
   352cc:	000352e8 	cmpgeui	zero,zero,3403
   352d0:	000352f8 	rdprs	zero,zero,3403
   352d4:	000352e8 	cmpgeui	zero,zero,3403
   352d8:	000352f0 	cmpltui	zero,zero,3403
   352dc:	000352f8 	rdprs	zero,zero,3403
   352e0:	000352f8 	rdprs	zero,zero,3403
   352e4:	000352e8 	cmpgeui	zero,zero,3403
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   352e8:	00800044 	movi	r2,1
   352ec:	00000306 	br	352fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   352f0:	0005883a 	mov	r2,zero
   352f4:	00000106 	br	352fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   352f8:	0005883a 	mov	r2,zero
  }
}
   352fc:	e037883a 	mov	sp,fp
   35300:	df000017 	ldw	fp,0(sp)
   35304:	dec00104 	addi	sp,sp,4
   35308:	f800283a 	ret

0003530c <atexit>:
   3530c:	200b883a 	mov	r5,r4
   35310:	000f883a 	mov	r7,zero
   35314:	000d883a 	mov	r6,zero
   35318:	0009883a 	mov	r4,zero
   3531c:	00353d41 	jmpi	353d4 <__register_exitproc>

00035320 <exit>:
   35320:	defffe04 	addi	sp,sp,-8
   35324:	000b883a 	mov	r5,zero
   35328:	dc000015 	stw	r16,0(sp)
   3532c:	dfc00115 	stw	ra,4(sp)
   35330:	2021883a 	mov	r16,r4
   35334:	00354ec0 	call	354ec <__call_exitprocs>
   35338:	008000f4 	movhi	r2,3
   3533c:	109e9f04 	addi	r2,r2,31356
   35340:	11000017 	ldw	r4,0(r2)
   35344:	20800f17 	ldw	r2,60(r4)
   35348:	10000126 	beq	r2,zero,35350 <exit+0x30>
   3534c:	103ee83a 	callr	r2
   35350:	8009883a 	mov	r4,r16
   35354:	003566c0 	call	3566c <_exit>

00035358 <memcmp>:
   35358:	01c000c4 	movi	r7,3
   3535c:	3980192e 	bgeu	r7,r6,353c4 <memcmp+0x6c>
   35360:	2144b03a 	or	r2,r4,r5
   35364:	11c4703a 	and	r2,r2,r7
   35368:	10000f26 	beq	r2,zero,353a8 <memcmp+0x50>
   3536c:	20800003 	ldbu	r2,0(r4)
   35370:	28c00003 	ldbu	r3,0(r5)
   35374:	10c0151e 	bne	r2,r3,353cc <memcmp+0x74>
   35378:	31bfff84 	addi	r6,r6,-2
   3537c:	01ffffc4 	movi	r7,-1
   35380:	00000406 	br	35394 <memcmp+0x3c>
   35384:	20800003 	ldbu	r2,0(r4)
   35388:	28c00003 	ldbu	r3,0(r5)
   3538c:	31bfffc4 	addi	r6,r6,-1
   35390:	10c00e1e 	bne	r2,r3,353cc <memcmp+0x74>
   35394:	21000044 	addi	r4,r4,1
   35398:	29400044 	addi	r5,r5,1
   3539c:	31fff91e 	bne	r6,r7,35384 <__alt_data_end+0xf4035384>
   353a0:	0005883a 	mov	r2,zero
   353a4:	f800283a 	ret
   353a8:	20c00017 	ldw	r3,0(r4)
   353ac:	28800017 	ldw	r2,0(r5)
   353b0:	18bfee1e 	bne	r3,r2,3536c <__alt_data_end+0xf403536c>
   353b4:	31bfff04 	addi	r6,r6,-4
   353b8:	21000104 	addi	r4,r4,4
   353bc:	29400104 	addi	r5,r5,4
   353c0:	39bff936 	bltu	r7,r6,353a8 <__alt_data_end+0xf40353a8>
   353c4:	303fe91e 	bne	r6,zero,3536c <__alt_data_end+0xf403536c>
   353c8:	003ff506 	br	353a0 <__alt_data_end+0xf40353a0>
   353cc:	10c5c83a 	sub	r2,r2,r3
   353d0:	f800283a 	ret

000353d4 <__register_exitproc>:
   353d4:	defffa04 	addi	sp,sp,-24
   353d8:	dc000315 	stw	r16,12(sp)
   353dc:	040000f4 	movhi	r16,3
   353e0:	841e9f04 	addi	r16,r16,31356
   353e4:	80c00017 	ldw	r3,0(r16)
   353e8:	dc400415 	stw	r17,16(sp)
   353ec:	dfc00515 	stw	ra,20(sp)
   353f0:	18805217 	ldw	r2,328(r3)
   353f4:	2023883a 	mov	r17,r4
   353f8:	10003726 	beq	r2,zero,354d8 <__register_exitproc+0x104>
   353fc:	10c00117 	ldw	r3,4(r2)
   35400:	010007c4 	movi	r4,31
   35404:	20c00e16 	blt	r4,r3,35440 <__register_exitproc+0x6c>
   35408:	1a000044 	addi	r8,r3,1
   3540c:	8800221e 	bne	r17,zero,35498 <__register_exitproc+0xc4>
   35410:	18c00084 	addi	r3,r3,2
   35414:	18c7883a 	add	r3,r3,r3
   35418:	18c7883a 	add	r3,r3,r3
   3541c:	12000115 	stw	r8,4(r2)
   35420:	10c7883a 	add	r3,r2,r3
   35424:	19400015 	stw	r5,0(r3)
   35428:	0005883a 	mov	r2,zero
   3542c:	dfc00517 	ldw	ra,20(sp)
   35430:	dc400417 	ldw	r17,16(sp)
   35434:	dc000317 	ldw	r16,12(sp)
   35438:	dec00604 	addi	sp,sp,24
   3543c:	f800283a 	ret
   35440:	00800034 	movhi	r2,0
   35444:	10800004 	addi	r2,r2,0
   35448:	10002626 	beq	r2,zero,354e4 <__register_exitproc+0x110>
   3544c:	01006404 	movi	r4,400
   35450:	d9400015 	stw	r5,0(sp)
   35454:	d9800115 	stw	r6,4(sp)
   35458:	d9c00215 	stw	r7,8(sp)
   3545c:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>
   35460:	d9400017 	ldw	r5,0(sp)
   35464:	d9800117 	ldw	r6,4(sp)
   35468:	d9c00217 	ldw	r7,8(sp)
   3546c:	10001d26 	beq	r2,zero,354e4 <__register_exitproc+0x110>
   35470:	81000017 	ldw	r4,0(r16)
   35474:	10000115 	stw	zero,4(r2)
   35478:	02000044 	movi	r8,1
   3547c:	22405217 	ldw	r9,328(r4)
   35480:	0007883a 	mov	r3,zero
   35484:	12400015 	stw	r9,0(r2)
   35488:	20805215 	stw	r2,328(r4)
   3548c:	10006215 	stw	zero,392(r2)
   35490:	10006315 	stw	zero,396(r2)
   35494:	883fde26 	beq	r17,zero,35410 <__alt_data_end+0xf4035410>
   35498:	18c9883a 	add	r4,r3,r3
   3549c:	2109883a 	add	r4,r4,r4
   354a0:	1109883a 	add	r4,r2,r4
   354a4:	21802215 	stw	r6,136(r4)
   354a8:	01800044 	movi	r6,1
   354ac:	12406217 	ldw	r9,392(r2)
   354b0:	30cc983a 	sll	r6,r6,r3
   354b4:	4992b03a 	or	r9,r9,r6
   354b8:	12406215 	stw	r9,392(r2)
   354bc:	21c04215 	stw	r7,264(r4)
   354c0:	01000084 	movi	r4,2
   354c4:	893fd21e 	bne	r17,r4,35410 <__alt_data_end+0xf4035410>
   354c8:	11006317 	ldw	r4,396(r2)
   354cc:	218cb03a 	or	r6,r4,r6
   354d0:	11806315 	stw	r6,396(r2)
   354d4:	003fce06 	br	35410 <__alt_data_end+0xf4035410>
   354d8:	18805304 	addi	r2,r3,332
   354dc:	18805215 	stw	r2,328(r3)
   354e0:	003fc606 	br	353fc <__alt_data_end+0xf40353fc>
   354e4:	00bfffc4 	movi	r2,-1
   354e8:	003fd006 	br	3542c <__alt_data_end+0xf403542c>

000354ec <__call_exitprocs>:
   354ec:	defff504 	addi	sp,sp,-44
   354f0:	df000915 	stw	fp,36(sp)
   354f4:	dd400615 	stw	r21,24(sp)
   354f8:	dc800315 	stw	r18,12(sp)
   354fc:	dfc00a15 	stw	ra,40(sp)
   35500:	ddc00815 	stw	r23,32(sp)
   35504:	dd800715 	stw	r22,28(sp)
   35508:	dd000515 	stw	r20,20(sp)
   3550c:	dcc00415 	stw	r19,16(sp)
   35510:	dc400215 	stw	r17,8(sp)
   35514:	dc000115 	stw	r16,4(sp)
   35518:	d9000015 	stw	r4,0(sp)
   3551c:	2839883a 	mov	fp,r5
   35520:	04800044 	movi	r18,1
   35524:	057fffc4 	movi	r21,-1
   35528:	008000f4 	movhi	r2,3
   3552c:	109e9f04 	addi	r2,r2,31356
   35530:	12000017 	ldw	r8,0(r2)
   35534:	45005217 	ldw	r20,328(r8)
   35538:	44c05204 	addi	r19,r8,328
   3553c:	a0001c26 	beq	r20,zero,355b0 <__call_exitprocs+0xc4>
   35540:	a0800117 	ldw	r2,4(r20)
   35544:	15ffffc4 	addi	r23,r2,-1
   35548:	b8000d16 	blt	r23,zero,35580 <__call_exitprocs+0x94>
   3554c:	14000044 	addi	r16,r2,1
   35550:	8421883a 	add	r16,r16,r16
   35554:	8421883a 	add	r16,r16,r16
   35558:	84402004 	addi	r17,r16,128
   3555c:	a463883a 	add	r17,r20,r17
   35560:	a421883a 	add	r16,r20,r16
   35564:	e0001e26 	beq	fp,zero,355e0 <__call_exitprocs+0xf4>
   35568:	80804017 	ldw	r2,256(r16)
   3556c:	e0801c26 	beq	fp,r2,355e0 <__call_exitprocs+0xf4>
   35570:	bdffffc4 	addi	r23,r23,-1
   35574:	843fff04 	addi	r16,r16,-4
   35578:	8c7fff04 	addi	r17,r17,-4
   3557c:	bd7ff91e 	bne	r23,r21,35564 <__alt_data_end+0xf4035564>
   35580:	00800034 	movhi	r2,0
   35584:	10800004 	addi	r2,r2,0
   35588:	10000926 	beq	r2,zero,355b0 <__call_exitprocs+0xc4>
   3558c:	a0800117 	ldw	r2,4(r20)
   35590:	1000301e 	bne	r2,zero,35654 <__call_exitprocs+0x168>
   35594:	a0800017 	ldw	r2,0(r20)
   35598:	10003226 	beq	r2,zero,35664 <__call_exitprocs+0x178>
   3559c:	a009883a 	mov	r4,r20
   355a0:	98800015 	stw	r2,0(r19)
   355a4:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>
   355a8:	9d000017 	ldw	r20,0(r19)
   355ac:	a03fe41e 	bne	r20,zero,35540 <__alt_data_end+0xf4035540>
   355b0:	dfc00a17 	ldw	ra,40(sp)
   355b4:	df000917 	ldw	fp,36(sp)
   355b8:	ddc00817 	ldw	r23,32(sp)
   355bc:	dd800717 	ldw	r22,28(sp)
   355c0:	dd400617 	ldw	r21,24(sp)
   355c4:	dd000517 	ldw	r20,20(sp)
   355c8:	dcc00417 	ldw	r19,16(sp)
   355cc:	dc800317 	ldw	r18,12(sp)
   355d0:	dc400217 	ldw	r17,8(sp)
   355d4:	dc000117 	ldw	r16,4(sp)
   355d8:	dec00b04 	addi	sp,sp,44
   355dc:	f800283a 	ret
   355e0:	a0800117 	ldw	r2,4(r20)
   355e4:	80c00017 	ldw	r3,0(r16)
   355e8:	10bfffc4 	addi	r2,r2,-1
   355ec:	15c01426 	beq	r2,r23,35640 <__call_exitprocs+0x154>
   355f0:	80000015 	stw	zero,0(r16)
   355f4:	183fde26 	beq	r3,zero,35570 <__alt_data_end+0xf4035570>
   355f8:	95c8983a 	sll	r4,r18,r23
   355fc:	a0806217 	ldw	r2,392(r20)
   35600:	a5800117 	ldw	r22,4(r20)
   35604:	2084703a 	and	r2,r4,r2
   35608:	10000b26 	beq	r2,zero,35638 <__call_exitprocs+0x14c>
   3560c:	a0806317 	ldw	r2,396(r20)
   35610:	2088703a 	and	r4,r4,r2
   35614:	20000c1e 	bne	r4,zero,35648 <__call_exitprocs+0x15c>
   35618:	89400017 	ldw	r5,0(r17)
   3561c:	d9000017 	ldw	r4,0(sp)
   35620:	183ee83a 	callr	r3
   35624:	a0800117 	ldw	r2,4(r20)
   35628:	15bfbf1e 	bne	r2,r22,35528 <__alt_data_end+0xf4035528>
   3562c:	98800017 	ldw	r2,0(r19)
   35630:	153fcf26 	beq	r2,r20,35570 <__alt_data_end+0xf4035570>
   35634:	003fbc06 	br	35528 <__alt_data_end+0xf4035528>
   35638:	183ee83a 	callr	r3
   3563c:	003ff906 	br	35624 <__alt_data_end+0xf4035624>
   35640:	a5c00115 	stw	r23,4(r20)
   35644:	003feb06 	br	355f4 <__alt_data_end+0xf40355f4>
   35648:	89000017 	ldw	r4,0(r17)
   3564c:	183ee83a 	callr	r3
   35650:	003ff406 	br	35624 <__alt_data_end+0xf4035624>
   35654:	a0800017 	ldw	r2,0(r20)
   35658:	a027883a 	mov	r19,r20
   3565c:	1029883a 	mov	r20,r2
   35660:	003fb606 	br	3553c <__alt_data_end+0xf403553c>
   35664:	0005883a 	mov	r2,zero
   35668:	003ffb06 	br	35658 <__alt_data_end+0xf4035658>

0003566c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3566c:	defffd04 	addi	sp,sp,-12
   35670:	df000215 	stw	fp,8(sp)
   35674:	df000204 	addi	fp,sp,8
   35678:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   3567c:	0001883a 	nop
   35680:	e0bfff17 	ldw	r2,-4(fp)
   35684:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   35688:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   3568c:	10000226 	beq	r2,zero,35698 <_exit+0x2c>
    ALT_SIM_FAIL();
   35690:	002af070 	cmpltui	zero,zero,43969
   35694:	00000106 	br	3569c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   35698:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3569c:	003fff06 	br	3569c <__alt_data_end+0xf403569c>
