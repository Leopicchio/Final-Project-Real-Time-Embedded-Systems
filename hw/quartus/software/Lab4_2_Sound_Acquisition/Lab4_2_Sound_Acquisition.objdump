
Lab4_2_Sound_Acquisition.elf:     file format elf32-littlenios2
Lab4_2_Sound_Acquisition.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000228

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x08000000 align 2**12
         filesz 0x00000228 memsz 0x00000228 flags r-x
    LOAD off    0x00002228 vaddr 0x08000228 paddr 0x08000228 align 2**12
         filesz 0x00015a34 memsz 0x00015a34 flags r-x
    LOAD off    0x00017c5c vaddr 0x08015c5c paddr 0x08017814 align 2**12
         filesz 0x00001bb8 memsz 0x00001bb8 flags rw-
    LOAD off    0x0001a3cc vaddr 0x080193cc paddr 0x080193cc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00020020  08000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015318  08000228  08000228  00002228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000071c  08015540  08015540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb8  08015c5c  08017814  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080193cc  080193cc  0001a3cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00020248  00020248  00019814  2**0
                  CONTENTS
  7 .SDRAM_controller 00000000  0801952c  0801952c  00019814  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019814  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001230  00000000  00000000  00019838  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028f0f  00000000  00000000  0001aa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000afd4  00000000  00000000  00043977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e356  00000000  00000000  0004e94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002eb4  00000000  00000000  0005cca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004b77  00000000  00000000  0005fb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cc75  00000000  00000000  000646cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00081344  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f80  00000000  00000000  000813a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008757a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000017  00000000  00000000  0008757d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00087594  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00087595  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00087596  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008759a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008759e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000875a2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000875ad  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000875b8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000875c3  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  000875ce  2**0
                  CONTENTS, READONLY
 30 .jdi          0000baf4  00000000  00000000  0008760d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b7736  00000000  00000000  00093101  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
08000228 l    d  .text	00000000 .text
08015540 l    d  .rodata	00000000 .rodata
08015c5c l    d  .rwdata	00000000 .rwdata
080193cc l    d  .bss	00000000 .bss
00020248 l    d  .onchip_memory	00000000 .onchip_memory
0801952c l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_2_Sound_Acquisition_bsp//obj/HAL/src/crt0.o
08000270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Sound_Acquisition.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
080157a8 l     O .rodata	00000108 two_over_pi
08015728 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
080158f0 l     O .rodata	00000010 init_jk
080158b0 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08015c5c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08015a4a l     O .rodata	00000010 zeroes.4404
0800956c l     F .text	000000bc __sbprintf
08015a5a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800977c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800b2ac l     F .text	00000008 __fp_unlock
0800b2c0 l     F .text	0000019c __sinit.part.1
0800b45c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
080160a0 l     O .rwdata	00000020 lc_ctype_charset
08016080 l     O .rwdata	00000020 lc_message_charset
080160c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08015a88 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e7e4 l     F .text	000000fc __sprint_r.part.0
08015bbc l     O .rodata	00000010 blanks.4348
08015bac l     O .rodata	00000010 zeroes.4349
0800fd70 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
080112b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080113c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080113f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080114dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080115bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080116a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0801187c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080177f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08011af8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08011c2c l     F .text	00000034 alt_dev_reg
08011c60 l     F .text	0000003c alt_get_errno
08011c9c l     F .text	00000068 alt_avalon_mutex_reg
080166a8 l     O .rwdata	00001060 jtag_uart_0
08017708 l     O .rwdata	00000048 mailbox_simple_0
08017750 l     O .rwdata	00000010 mutex_SDRAM
08017760 l     O .rwdata	00000030 audio_and_video_config_0
08017790 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08011fd8 l     F .text	00000210 altera_avalon_jtag_uart_irq
080121e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
08012820 l     F .text	00000090 altera_avalon_mailbox_identify
080128b0 l     F .text	00000078 altera_avalon_mailbox_post
08012928 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
08012a64 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08013158 l     F .text	0000003c alt_get_errno
08013194 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08014594 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080147f8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08014ab8 l     F .text	0000003c alt_get_errno
08014af4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08019400 g     O .bss	00000004 alt_instruction_exception_handler
08013d10 g     F .text	00000038 alt_up_av_config_reset
0800de9c g     F .text	00000074 _mprec_log10
08014168 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
08012ecc g     F .text	00000150 altera_avalon_mailbox_send
0800df88 g     F .text	0000008c __any_on
0801030c g     F .text	00000054 _isatty_r
08015a94 g     O .rodata	00000028 __mprec_tinytens
08013d80 g     F .text	00000034 alt_up_av_config_disable_interrupt
080117b8 g     F .text	0000007c alt_main
080071ec g     F .text	000000c0 _puts_r
0801942c g     O .bss	00000100 alt_irq
08002e10 g     F .text	00000014 fabs
08010360 g     F .text	00000060 _lseek_r
08000dec g     F .text	00000130 sqrt
08017814 g       *ABS*	00000000 __flash_rwdata_start
08005a8c g     F .text	00000088 .hidden __eqdf2
080136cc g     F .text	00000060 alt_up_audio_read_fifo_avail
08013e44 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
0801952c g       *ABS*	00000000 __alt_heap_start
080071b0 g     F .text	0000003c printf
0801372c g     F .text	00000068 alt_up_audio_record_r
08010578 g     F .text	0000009c _wcrtomb_r
0800e6a4 g     F .text	0000005c __sseek
0800b5fc g     F .text	00000010 __sinit
08010420 g     F .text	00000140 __swbuf_r
0800c0c4 g     F .text	0000007c _setlocale_r
0800b464 g     F .text	00000068 __sfmoreglue
08011858 g     F .text	00000024 __malloc_unlock
080038c0 g     F .text	00000440 .hidden __divsf3
08013638 g     F .text	00000094 alt_up_audio_reset_audio_core
0800cd94 g     F .text	0000015c memmove
0800b5e4 g     F .text	00000018 _cleanup
080132cc g     F .text	00000040 altera_avalon_mutex_trylock
0800d018 g     F .text	000000a8 _Balloc
08004764 g     F .text	00000070 .hidden __fixsfsi
08005b14 g     F .text	000000dc .hidden __gtdf2
08014eb0 g     F .text	00000024 altera_nios2_gen2_irq_init
08007170 g     F .text	00000010 __errno
00020000 g     F .entry	0000001c __reset
08013360 g     F .text	00000074 altera_avalon_mutex_is_mine
08000000 g       *ABS*	00000000 __flash_exceptions_start
080102b0 g     F .text	0000005c _fstat_r
080193e4 g     O .bss	00000004 errno
08002e24 g     F .text	000001ec floor
0800e620 g     F .text	00000008 __seofread
080135f8 g     F .text	00000040 alt_up_audio_write_interrupt_pending
080193ec g     O .bss	00000004 alt_argv
0801f7c0 g       *ABS*	00000000 _gp
0801301c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
08011ac8 g     F .text	00000030 usleep
08004280 g     F .text	000004e4 .hidden __subsf3
08016528 g     O .rwdata	00000180 alt_fd_list
08000f1c g     F .text	0000076c __ieee754_rem_pio2
08014734 g     F .text	00000090 alt_find_dev
0800cc4c g     F .text	00000148 memcpy
0800b2b4 g     F .text	0000000c _cleanup_r
08006d78 g     F .text	000000dc .hidden __floatsidf
080148bc g     F .text	0000007c alt_io_redirect
08005bf0 g     F .text	000000f4 .hidden __ltdf2
08015540 g       *ABS*	00000000 __DTOR_END__
080072ac g     F .text	00000014 puts
08015110 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08012b10 g     F .text	00000078 altera_avalon_mailbox_simple_init
08003010 g     F .text	00000074 __fpclassifyd
0800ddf8 g     F .text	000000a4 __ratio
0800fd54 g     F .text	0000001c __vfiprintf_internal
08013b14 g     F .text	00000050 alt_up_audio_read_fifo_head
080123e0 g     F .text	0000021c altera_avalon_jtag_uart_read
08007180 g     F .text	00000030 _printf_r
0800333c g     F .text	00000064 .hidden __udivsi3
08011518 g     F .text	000000a4 isatty
08015ae4 g     O .rodata	000000c8 __mprec_tens
08012e54 g     F .text	00000078 altera_avalon_mailbox_status
08012d4c g     F .text	00000108 altera_avalon_mailbox_close
0800c140 g     F .text	0000000c __locale_charset
08001910 g     F .text	000004a4 __kernel_cos
08003dbc g     F .text	000000c8 .hidden __lesf2
08015080 g     F .text	00000090 alt_icache_flush
080193e0 g     O .bss	00000004 __malloc_top_pad
08013c90 g     F .text	00000080 alt_up_av_config_read_data
080177cc g     O .rwdata	00000004 __mb_cur_max
0800c170 g     F .text	0000000c _localeconv_r
0800d424 g     F .text	0000003c __i2b
0800ba80 g     F .text	000004bc __sfvwrite_r
0800e578 g     F .text	00000054 _sbrk_r
080103c0 g     F .text	00000060 _read_r
080177ec g     O .rwdata	00000004 alt_max_fd
08013b64 g     F .text	00000068 alt_up_audio_write_fifo_head
0800ffa4 g     F .text	000000f0 _fclose_r
0800b27c g     F .text	00000030 fflush
080193dc g     O .bss	00000004 __malloc_max_sbrked_mem
08014938 g     F .text	00000180 alt_irq_register
08002b44 g     F .text	000002cc __kernel_sin
08006e54 g     F .text	00000110 .hidden __extendsfdf2
080048f8 g     F .text	000008ac .hidden __adddf3
0800dba0 g     F .text	0000010c __b2d
08010cd8 g     F .text	00000538 .hidden __umoddi3
080116e4 g     F .text	000000d4 lseek
080133d4 g     F .text	00000050 altera_avalon_mutex_first_lock
080177c0 g     O .rwdata	00000004 __fdlib_version
080177c4 g     O .rwdata	00000004 _global_impure_ptr
0800e014 g     F .text	00000564 _realloc_r
0801952c g       *ABS*	00000000 __bss_end
08014da8 g     F .text	00000108 alt_tick
08010760 g     F .text	00000578 .hidden __udivdi3
0801020c g     F .text	00000024 _fputwc_r
08000bc0 g     F .text	000000e8 start_recording
08015abc g     O .rodata	00000028 __mprec_bigtens
0800d208 g     F .text	00000104 __s2b
08011210 g     F .text	000000a8 .hidden __floatunsidf
0800d8e0 g     F .text	00000060 __mcmp
08013424 g     F .text	0000003c alt_up_audio_open_dev
0800b61c g     F .text	00000018 __fp_lock_all
08000a78 g     F .text	00000148 average_amplitude
0801385c g     F .text	00000068 alt_up_audio_play_r
08014d0c g     F .text	0000009c alt_alarm_stop
080193f4 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d8 alt_irq_handler
08016500 g     O .rwdata	00000028 alt_dev_null
08001db4 g     F .text	00000d90 __kernel_rem_pio2
08013210 g     F .text	00000054 altera_avalon_mutex_open
0801454c g     F .text	00000048 alt_dcache_flush_all
0800d30c g     F .text	00000068 __hi0bits
08006cf8 g     F .text	00000080 .hidden __fixdfsi
08017814 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
080177e4 g     O .rwdata	00000008 alt_dev_list
08011b34 g     F .text	000000f8 write
08003d00 g     F .text	000000bc .hidden __gtsf2
08017800 g     O .rwdata	00000008 alt_mutex_list
08015c5c g       *ABS*	00000000 __ram_rodata_end
0801142c g     F .text	000000b0 fstat
08005bf0 g     F .text	000000f4 .hidden __ledf2
0800d658 g     F .text	00000140 __pow5mult
0800e8f8 g     F .text	0000145c ___vfiprintf_internal_r
080193d4 g     O .bss	00000004 __nlocale_changed
080033a0 g     F .text	00000058 .hidden __umodsi3
0801952c g       *ABS*	00000000 end
08011f24 g     F .text	000000b4 altera_avalon_jtag_uart_init
000201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
08015540 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800710c g     F .text	00000064 .hidden __clzsi2
080125fc g     F .text	00000224 altera_avalon_jtag_uart_write
0800b60c g     F .text	00000004 __sfp_lock_acquire
0800cb68 g     F .text	000000e4 memchr
08007358 g     F .text	000021f8 ___vfprintf_internal_r
0800b770 g     F .text	00000310 _free_r
0800c14c g     F .text	00000010 __locale_mb_cur_max
0801538c g     F .text	00000180 __call_exitprocs
080193d0 g     O .bss	00000004 __mlocale_changed
080177d0 g     O .rwdata	00000004 __malloc_sbrk_base
08000228 g     F .text	0000004c _start
080193f8 g     O .bss	00000004 _alt_tick_rate
080006cc g     F .text	00000110 play_file
08000cfc g     F .text	000000f0 sin
08013a0c g     F .text	00000108 alt_up_audio_write_fifo
0800d798 g     F .text	00000148 __lshift
08013c2c g     F .text	00000064 alt_up_av_config_write_data
080193fc g     O .bss	00000004 _alt_nticks
080118b8 g     F .text	000000fc read
08011d3c g     F .text	00000084 alt_sys_init
080047d4 g     F .text	00000124 .hidden __floatsisf
0801392c g     F .text	000000e0 alt_up_audio_read_fifo
08015274 g     F .text	00000118 __register_exitproc
08014270 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
08013560 g     F .text	00000058 alt_up_audio_disable_write_interrupt
0801330c g     F .text	00000054 altera_avalon_mutex_unlock
0800d460 g     F .text	000001f8 __multiply
08012288 g     F .text	00000068 altera_avalon_jtag_uart_close
08015c5c g       *ABS*	00000000 __ram_rwdata_start
08015540 g       *ABS*	00000000 __ram_rodata_start
08019404 g     O .bss	00000028 __malloc_current_mallinfo
0800dcac g     F .text	0000014c __d2b
080009dc g     F .text	0000009c show_amplitude_on_LEDS
08011dc0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08014fdc g     F .text	000000a4 alt_get_fd
080143f4 g     F .text	00000158 alt_busy_sleep
0800fe8c g     F .text	00000054 _close_r
0801350c g     F .text	00000054 alt_up_audio_enable_write_interrupt
080151f8 g     F .text	0000007c memcmp
08011e80 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801952c g       *ABS*	00000000 __alt_stack_base
08011ed0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009628 g     F .text	00000154 __swsetup_r
080051a4 g     F .text	000008e8 .hidden __divdf3
080134b4 g     F .text	00000058 alt_up_audio_disable_read_interrupt
0800b4cc g     F .text	00000118 __sfp
0800df10 g     F .text	00000078 __copybits
080160f8 g     O .rwdata	00000408 __malloc_av_
0800b618 g     F .text	00000004 __sinit_lock_release
08005ce4 g     F .text	00000718 .hidden __muldf3
0800e5cc g     F .text	00000054 __sread
08014ed4 g     F .text	00000108 alt_find_file
080145d0 g     F .text	000000a4 alt_dev_llist_insert
08011834 g     F .text	00000024 __malloc_lock
08011a18 g     F .text	000000b0 sbrk
0800b220 g     F .text	0000005c _fflush_r
0800fee0 g     F .text	000000c4 _calloc_r
080193cc g       *ABS*	00000000 __bss_start
0800cef0 g     F .text	00000128 memset
08000274 g     F .text	00000458 main
080137fc g     F .text	00000060 alt_up_audio_write_fifo_space
080193f0 g     O .bss	00000004 alt_envp
080193d8 g     O .bss	00000004 __malloc_max_total_mem
08011e20 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08010560 g     F .text	00000018 __swbuf
08003dbc g     F .text	000000c8 .hidden __ltsf2
0800e700 g     F .text	00000008 __sclose
08003084 g     F .text	00000008 matherr
0c000000 g       *ABS*	00000000 __alt_heap_limit
08010094 g     F .text	00000014 fclose
08006f64 g     F .text	000001a8 .hidden __truncdfsf2
08013288 g     F .text	00000044 altera_avalon_mutex_lock
0800997c g     F .text	00001688 _dtoa_r
0800c35c g     F .text	0000080c _malloc_r
080106d4 g     F .text	00000030 __ascii_wctomb
080177f0 g     O .rwdata	00000004 alt_errno
0800bf3c g     F .text	000000c4 _fwalk
08003244 g     F .text	00000084 .hidden __divsi3
0800b64c g     F .text	00000124 _malloc_trim_r
08015540 g       *ABS*	00000000 __CTOR_END__
08003e84 g     F .text	000003fc .hidden __mulsf3
0800e708 g     F .text	000000dc strcmp
08015540 g       *ABS*	00000000 __flash_rodata_start
08015540 g       *ABS*	00000000 __DTOR_LIST__
08003228 g     F .text	0000001c copysign
08005a8c g     F .text	00000088 .hidden __nedf2
08000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
08013bcc g     F .text	00000060 alt_up_av_config_open_dev
08011d04 g     F .text	00000038 alt_irq_init
080119b4 g     F .text	00000064 alt_release_fd
08015900 g     O .rodata	00000100 .hidden __clz_tab
080193cc g     O .bss	00000004 _PathLocale
080007dc g     F .text	00000200 generate_sinusoid
080151ac g     F .text	00000014 atexit
08003d00 g     F .text	000000bc .hidden __gesf2
0800fe2c g     F .text	00000060 _write_r
08013e0c g     F .text	00000038 alt_up_av_config_read_ready
0800c17c g     F .text	00000018 setlocale
080177c8 g     O .rwdata	00000004 _impure_ptr
080193e8 g     O .bss	00000004 alt_argc
0800b004 g     F .text	0000021c __sflush_r
0800308c g     F .text	0000019c scalbn
080146d4 g     F .text	00000060 _do_dtors
0800c168 g     F .text	00000008 __locale_cjk_lang
08000ca8 g     F .text	00000054 mailbox_callback
00020020 g       .exceptions	00000000 alt_irq_entry
0800db3c g     F .text	00000064 __ulp
0800b634 g     F .text	00000018 __fp_unlock_all
080177dc g     O .rwdata	00000008 alt_fs_list
08013794 g     F .text	00000068 alt_up_audio_record_l
00020020 g       *ABS*	00000000 __ram_exceptions_start
0800c194 g     F .text	0000000c localeconv
08001688 g     F .text	00000288 __ieee754_sqrt
08013d48 g     F .text	00000038 alt_up_av_config_enable_interrupt
08013db4 g     F .text	00000058 alt_up_av_config_read_acknowledge
08014110 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
08017814 g       *ABS*	00000000 _edata
0801952c g       *ABS*	00000000 _end
080100a8 g     F .text	00000164 __fputwc
00020248 g       *ABS*	00000000 __ram_exceptions_end
080122f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080138c4 g     F .text	00000068 alt_up_audio_play_l
080177f8 g     O .rwdata	00000008 alt_mailbox_simple_list
0800e628 g     F .text	0000007c __swrite
080177d4 g     O .rwdata	00000004 __malloc_trim_threshold
0800c15c g     F .text	0000000c __locale_msgcharset
080151c0 g     F .text	00000038 exit
0800c000 g     F .text	000000c4 _fwalk_reent
0800d940 g     F .text	000001fc __mdiff
08014218 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
080032c8 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0800b610 g     F .text	00000004 __sfp_lock_release
08012b88 g     F .text	000001c4 altera_avalon_mailbox_open
0801550c g     F .text	00000034 _exit
080142c8 g     F .text	0000012c alt_alarm_start
0800c1a0 g     F .text	000001bc __smakebuf_r
080072c0 g     F .text	00000098 strlen
08014bb8 g     F .text	00000154 open
08005b14 g     F .text	000000dc .hidden __gedf2
08013ee8 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
080177d8 g     O .rwdata	00000004 __wctomb
0800e8e0 g     F .text	00000018 __sprint_r
080147c4 g     F .text	00000034 alt_icache_flush_all
08017808 g     O .rwdata	00000004 alt_priority_mask
08009550 g     F .text	0000001c __vfprintf_internal
08013264 g     F .text	00000024 altera_avalon_mutex_close
080141c0 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
08010704 g     F .text	0000005c _wctomb_r
080063fc g     F .text	000008fc .hidden __subdf3
0800d374 g     F .text	000000b0 __lo0bits
0801780c g     O .rwdata	00000008 alt_alarm_list
08014674 g     F .text	00000060 _do_ctors
08010614 g     F .text	000000c0 wcrtomb
080112f4 g     F .text	000000d0 close
080033f8 g     F .text	000004c8 .hidden __addsf3
08011624 g     F .text	00000084 alt_load
08013460 g     F .text	00000054 alt_up_audio_enable_read_interrupt
08013fd0 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
08010230 g     F .text	00000080 fputwc
0800b614 g     F .text	00000004 __sinit_lock_acquire
0800d0e8 g     F .text	00000120 __multadd
0800d0c0 g     F .text	00000028 _Bfree
080140b8 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
080135b8 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf4020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   20014:	08408a14 	ori	at,at,552
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d40 	call	201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	008200b4 	movhi	r2,2050
   20140:	10a50b04 	addi	r2,r2,-27604
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008200b4 	movhi	r2,2050
   20158:	10a50b04 	addi	r2,r2,-27604
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	e17ffd17 	ldw	r5,-12(fp)
   20174:	1009883a 	mov	r4,r2
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <__alt_data_end+0xf402012c>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <__alt_data_end+0xf4020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	0001883a 	nop
   201c0:	e037883a 	mov	sp,fp
   201c4:	dfc00117 	ldw	ra,4(sp)
   201c8:	df000017 	ldw	fp,0(sp)
   201cc:	dec00204 	addi	sp,sp,8
   201d0:	f800283a 	ret

000201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d4:	defffb04 	addi	sp,sp,-20
   201d8:	dfc00415 	stw	ra,16(sp)
   201dc:	df000315 	stw	fp,12(sp)
   201e0:	df000304 	addi	fp,sp,12
   201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e8:	000531fa 	rdctl	r2,exception
   201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	10801f0c 	andi	r2,r2,124
   201f8:	1004d0ba 	srli	r2,r2,2
   201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20200:	0005333a 	rdctl	r2,badaddr
   20204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20208:	d0a71017 	ldw	r2,-25536(gp)
   2020c:	10000726 	beq	r2,zero,2022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20210:	d0a71017 	ldw	r2,-25536(gp)
   20214:	e0fffd17 	ldw	r3,-12(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	e17fff17 	ldw	r5,-4(fp)
   20220:	1809883a 	mov	r4,r3
   20224:	103ee83a 	callr	r2
   20228:	00000206 	br	20234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20230:	0005883a 	mov	r2,zero
}
   20234:	e037883a 	mov	sp,fp
   20238:	dfc00117 	ldw	ra,4(sp)
   2023c:	df000017 	ldw	fp,0(sp)
   20240:	dec00204 	addi	sp,sp,8
   20244:	f800283a 	ret

Disassembly of section .text:

08000228 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000228:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 800022c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000230:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000234:	00bffd16 	blt	zero,r2,800022c <__alt_data_end+0xfc00022c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000238:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 800023c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000240:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000244:	d6bdf014 	ori	gp,gp,63424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000248:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 800024c:	10a4f314 	ori	r2,r2,37836

    movhi r3, %hi(__bss_end)
 8000250:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000254:	18e54b14 	ori	r3,r3,38188

    beq r2, r3, 1f
 8000258:	10c00326 	beq	r2,r3,8000268 <_start+0x40>

0:
    stw zero, (r2)
 800025c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000264:	10fffd36 	bltu	r2,r3,800025c <__alt_data_end+0xfc00025c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000268:	80116240 	call	8011624 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 800026c:	80117b80 	call	80117b8 <alt_main>

08000270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000270:	003fff06 	br	8000270 <__alt_data_end+0xfc000270>

08000274 <main>:



//-------------------------------------------- MAIN ------------------------------------------------------
int main()
{
 8000274:	defffe04 	addi	sp,sp,-8
 8000278:	dfc00115 	stw	ra,4(sp)
 800027c:	df000015 	stw	fp,0(sp)
 8000280:	d839883a 	mov	fp,sp
 8000284:	023ffdf4 	movhi	r8,65527
 8000288:	420cf804 	addi	r8,r8,13280
 800028c:	da37883a 	add	sp,sp,r8
	float sound_loudness = 0;
 8000290:	00bffdf4 	movhi	r2,65527
 8000294:	108cf904 	addi	r2,r2,13284
 8000298:	1705883a 	add	r2,r2,fp
 800029c:	10000015 	stw	zero,0(r2)
	unsigned int recording_buffer[RECORDING_BUFFER_SIZE], n_samples_in_FIFO;
	unsigned int beep_sound[BEEP_SAMPLES], recording[RECORDING_SAMPLES];
	alt_up_audio_dev *audio_device;
	alt_up_av_config_dev *audio_config;
	altera_avalon_mailbox_dev* mailbox;	// handle to the Mailbox
	alt_u32 message[2] =  {0x00001111, 0xaa55aa55};
 80002a0:	00800274 	movhi	r2,9
 80002a4:	10b30504 	addi	r2,r2,-13292
 80002a8:	00fffdf4 	movhi	r3,65527
 80002ac:	18ccf904 	addi	r3,r3,13284
 80002b0:	1f07883a 	add	r3,r3,fp
 80002b4:	1885883a 	add	r2,r3,r2
 80002b8:	00c44444 	movi	r3,4369
 80002bc:	10c00015 	stw	r3,0(r2)
 80002c0:	00800274 	movhi	r2,9
 80002c4:	10b30504 	addi	r2,r2,-13292
 80002c8:	013ffdf4 	movhi	r4,65527
 80002cc:	210cf904 	addi	r4,r4,13284
 80002d0:	2709883a 	add	r4,r4,fp
 80002d4:	2087883a 	add	r3,r4,r2
 80002d8:	00aa95b4 	movhi	r2,43606
 80002dc:	10aa9544 	addi	r2,r2,-21931
 80002e0:	18800115 	stw	r2,4(r3)


	/* Open mailbox on sender processor */
	mailbox = altera_avalon_mailbox_open("/dev/mailbox_simple_0", mailbox_callback, NULL);
 80002e4:	000d883a 	mov	r6,zero
 80002e8:	01420034 	movhi	r5,2048
 80002ec:	29432a04 	addi	r5,r5,3240
 80002f0:	01020074 	movhi	r4,2049
 80002f4:	21155004 	addi	r4,r4,21824
 80002f8:	8012b880 	call	8012b88 <altera_avalon_mailbox_open>
 80002fc:	00fffdf4 	movhi	r3,65527
 8000300:	18ccfa04 	addi	r3,r3,13288
 8000304:	1f07883a 	add	r3,r3,fp
 8000308:	18800015 	stw	r2,0(r3)
	if (!mailbox){
 800030c:	013ffdf4 	movhi	r4,65527
 8000310:	210cfa04 	addi	r4,r4,13288
 8000314:	2709883a 	add	r4,r4,fp
 8000318:	20800017 	ldw	r2,0(r4)
 800031c:	1000051e 	bne	r2,zero,8000334 <main+0xc0>
		printf ("FAIL: Unable to open mailbox\n");
 8000320:	01020074 	movhi	r4,2049
 8000324:	21155604 	addi	r4,r4,21848
 8000328:	80072ac0 	call	80072ac <puts>
		return 1;
 800032c:	00800044 	movi	r2,1
 8000330:	0000e106 	br	80006b8 <main+0x444>
	}


	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);
 8000334:	01020074 	movhi	r4,2049
 8000338:	21155e04 	addi	r4,r4,21880
 800033c:	80134240 	call	8013424 <alt_up_audio_open_dev>
 8000340:	00fffdf4 	movhi	r3,65527
 8000344:	18ccfb04 	addi	r3,r3,13292
 8000348:	1f07883a 	add	r3,r3,fp
 800034c:	18800015 	stw	r2,0(r3)
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
 8000350:	01020074 	movhi	r4,2049
 8000354:	21156204 	addi	r4,r4,21896
 8000358:	8013bcc0 	call	8013bcc <alt_up_av_config_open_dev>
 800035c:	013ffdf4 	movhi	r4,65527
 8000360:	210cfc04 	addi	r4,r4,13296
 8000364:	2709883a 	add	r4,r4,fp
 8000368:	20800015 	stw	r2,0(r4)

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
 800036c:	00000306 	br	800037c <main+0x108>
		printf("Audio CODEC not ready\n");
 8000370:	01020074 	movhi	r4,2049
 8000374:	21156a04 	addi	r4,r4,21928
 8000378:	80072ac0 	call	80072ac <puts>

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
 800037c:	00bffdf4 	movhi	r2,65527
 8000380:	108cfc04 	addi	r2,r2,13296
 8000384:	1705883a 	add	r2,r2,fp
 8000388:	11000017 	ldw	r4,0(r2)
 800038c:	8013e0c0 	call	8013e0c <alt_up_av_config_read_ready>
 8000390:	103ff726 	beq	r2,zero,8000370 <__alt_data_end+0xfc000370>
		printf("Audio CODEC not ready\n");
	}

	// resets the audio CODEC just in case
	if (alt_up_av_config_reset(audio_config))
 8000394:	00fffdf4 	movhi	r3,65527
 8000398:	18ccfc04 	addi	r3,r3,13296
 800039c:	1f07883a 	add	r3,r3,fp
 80003a0:	19000017 	ldw	r4,0(r3)
 80003a4:	8013d100 	call	8013d10 <alt_up_av_config_reset>
 80003a8:	10000326 	beq	r2,zero,80003b8 <main+0x144>
		printf("Error resetting the audio CODEC\n");
 80003ac:	01020074 	movhi	r4,2049
 80003b0:	21157004 	addi	r4,r4,21952
 80003b4:	80072ac0 	call	80072ac <puts>


	// initialize the LEDS parallel port
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_LEDS_BASE, 0xFFFFFFFF);	// sets all pins as output
 80003b8:	00ffffc4 	movi	r3,-1
 80003bc:	00800134 	movhi	r2,4
 80003c0:	10840104 	addi	r2,r2,4100
 80003c4:	10c00035 	stwio	r3,0(r2)

	// creates a sinusoid in memory to test the jack output
	printf("Generating sinusoid for beep sound. Please wait...\n");
 80003c8:	01020074 	movhi	r4,2049
 80003cc:	21157804 	addi	r4,r4,21984
 80003d0:	80072ac0 	call	80072ac <puts>
	generate_sinusoid(SAMPLING_FREQ, BEEP_FREQUENCY, BEEP_AMPLITUDE, BEEP_SAMPLES, beep_sound);
 80003d4:	013ffdf4 	movhi	r4,65527
 80003d8:	210d7e04 	addi	r4,r4,13816
 80003dc:	e105883a 	add	r2,fp,r4
 80003e0:	d8800015 	stw	r2,0(sp)
 80003e4:	01eee014 	movui	r7,48000
 80003e8:	01800044 	movi	r6,1
 80003ec:	0150feb4 	movhi	r5,17402
 80003f0:	012ee014 	movui	r4,48000
 80003f4:	80007dc0 	call	80007dc <generate_sinusoid>
	printf("Sinusoid created\n\n\n");
 80003f8:	01020074 	movhi	r4,2049
 80003fc:	21158504 	addi	r4,r4,22036
 8000400:	80072ac0 	call	80072ac <puts>

	printf("Make a loud noise to start recording. Try snapping your fingers.\n");
 8000404:	01020074 	movhi	r4,2049
 8000408:	21158a04 	addi	r4,r4,22056
 800040c:	80072ac0 	call	80072ac <puts>
	// infinite loop that monitors the sound loudness
	while(1)
	{
		// reads the incoming FIFO from the audio CODEC (audio from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);	// checks how many elements are in the FIFO
 8000410:	000b883a 	mov	r5,zero
 8000414:	00bffdf4 	movhi	r2,65527
 8000418:	108cfb04 	addi	r2,r2,13292
 800041c:	1705883a 	add	r2,r2,fp
 8000420:	11000017 	ldw	r4,0(r2)
 8000424:	80136cc0 	call	80136cc <alt_up_audio_read_fifo_avail>
 8000428:	00fffdf4 	movhi	r3,65527
 800042c:	18ccfd04 	addi	r3,r3,13300
 8000430:	1f07883a 	add	r3,r3,fp
 8000434:	18800015 	stw	r2,0(r3)
		alt_up_audio_read_fifo(audio_device, recording_buffer, n_samples_in_FIFO, 0);	// reads the content of the FIFO
 8000438:	013ffdf4 	movhi	r4,65527
 800043c:	210cfd04 	addi	r4,r4,13300
 8000440:	2709883a 	add	r4,r4,fp
 8000444:	20c00017 	ldw	r3,0(r4)
 8000448:	013ffdf4 	movhi	r4,65527
 800044c:	210cfe04 	addi	r4,r4,13304
 8000450:	e105883a 	add	r2,fp,r4
 8000454:	000f883a 	mov	r7,zero
 8000458:	180d883a 	mov	r6,r3
 800045c:	100b883a 	mov	r5,r2
 8000460:	00bffdf4 	movhi	r2,65527
 8000464:	108cfb04 	addi	r2,r2,13292
 8000468:	1705883a 	add	r2,r2,fp
 800046c:	11000017 	ldw	r4,0(r2)
 8000470:	801392c0 	call	801392c <alt_up_audio_read_fifo>

		sound_loudness = average_amplitude(recording_buffer, n_samples_in_FIFO);	// computes the sound loudness
 8000474:	013ffdf4 	movhi	r4,65527
 8000478:	210cfd04 	addi	r4,r4,13300
 800047c:	2709883a 	add	r4,r4,fp
 8000480:	20c00017 	ldw	r3,0(r4)
 8000484:	013ffdf4 	movhi	r4,65527
 8000488:	210cfe04 	addi	r4,r4,13304
 800048c:	e105883a 	add	r2,fp,r4
 8000490:	180b883a 	mov	r5,r3
 8000494:	1009883a 	mov	r4,r2
 8000498:	8000a780 	call	8000a78 <average_amplitude>
 800049c:	00fffdf4 	movhi	r3,65527
 80004a0:	18ccf904 	addi	r3,r3,13284
 80004a4:	1f07883a 	add	r3,r3,fp
 80004a8:	18800015 	stw	r2,0(r3)
		show_amplitude_on_LEDS(sound_loudness);		// shows the amplitude on the LEDs
 80004ac:	00bffdf4 	movhi	r2,65527
 80004b0:	108cf904 	addi	r2,r2,13284
 80004b4:	1705883a 	add	r2,r2,fp
 80004b8:	11000017 	ldw	r4,0(r2)
 80004bc:	80009dc0 	call	80009dc <show_amplitude_on_LEDS>
		if (sound_loudness > LOUDNESS_THRESHOLD)
 80004c0:	014fc034 	movhi	r5,16128
 80004c4:	00fffdf4 	movhi	r3,65527
 80004c8:	18ccf904 	addi	r3,r3,13284
 80004cc:	1f07883a 	add	r3,r3,fp
 80004d0:	19000017 	ldw	r4,0(r3)
 80004d4:	8003d000 	call	8003d00 <__gesf2>
 80004d8:	0080760e 	bge	zero,r2,80006b4 <main+0x440>
		{
			printf("Loud noise detected! Recording starting in:\n3...\n");
 80004dc:	01020074 	movhi	r4,2049
 80004e0:	21159b04 	addi	r4,r4,22124
 80004e4:	80072ac0 	call	80072ac <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 80004e8:	013ffdf4 	movhi	r4,65527
 80004ec:	210d7e04 	addi	r4,r4,13816
 80004f0:	e105883a 	add	r2,fp,r4
 80004f4:	00fffdf4 	movhi	r3,65527
 80004f8:	18ccfb04 	addi	r3,r3,13292
 80004fc:	1f07883a 	add	r3,r3,fp
 8000500:	19800017 	ldw	r6,0(r3)
 8000504:	016ee014 	movui	r5,48000
 8000508:	1009883a 	mov	r4,r2
 800050c:	80006cc0 	call	80006cc <play_file>
			usleep(500000);
 8000510:	01000234 	movhi	r4,8
 8000514:	21284804 	addi	r4,r4,-24288
 8000518:	8011ac80 	call	8011ac8 <usleep>
			printf("2...\n");
 800051c:	01020074 	movhi	r4,2049
 8000520:	2115a804 	addi	r4,r4,22176
 8000524:	80072ac0 	call	80072ac <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 8000528:	013ffdf4 	movhi	r4,65527
 800052c:	210d7e04 	addi	r4,r4,13816
 8000530:	e105883a 	add	r2,fp,r4
 8000534:	00fffdf4 	movhi	r3,65527
 8000538:	18ccfb04 	addi	r3,r3,13292
 800053c:	1f07883a 	add	r3,r3,fp
 8000540:	19800017 	ldw	r6,0(r3)
 8000544:	016ee014 	movui	r5,48000
 8000548:	1009883a 	mov	r4,r2
 800054c:	80006cc0 	call	80006cc <play_file>
			usleep(500000);
 8000550:	01000234 	movhi	r4,8
 8000554:	21284804 	addi	r4,r4,-24288
 8000558:	8011ac80 	call	8011ac8 <usleep>
			printf("1...\n");
 800055c:	01020074 	movhi	r4,2049
 8000560:	2115aa04 	addi	r4,r4,22184
 8000564:	80072ac0 	call	80072ac <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 8000568:	013ffdf4 	movhi	r4,65527
 800056c:	210d7e04 	addi	r4,r4,13816
 8000570:	e105883a 	add	r2,fp,r4
 8000574:	00fffdf4 	movhi	r3,65527
 8000578:	18ccfb04 	addi	r3,r3,13292
 800057c:	1f07883a 	add	r3,r3,fp
 8000580:	19800017 	ldw	r6,0(r3)
 8000584:	016ee014 	movui	r5,48000
 8000588:	1009883a 	mov	r4,r2
 800058c:	80006cc0 	call	80006cc <play_file>
			usleep(500000);
 8000590:	01000234 	movhi	r4,8
 8000594:	21284804 	addi	r4,r4,-24288
 8000598:	8011ac80 	call	8011ac8 <usleep>

			printf("Recording...\n");
 800059c:	01020074 	movhi	r4,2049
 80005a0:	2115ac04 	addi	r4,r4,22192
 80005a4:	80072ac0 	call	80072ac <puts>
			start_recording(recording, RECORDING_SAMPLES, audio_device);	// starts the recording
 80005a8:	008000f4 	movhi	r2,3
 80005ac:	10bc0504 	addi	r2,r2,-4076
 80005b0:	013ffdf4 	movhi	r4,65527
 80005b4:	210cf904 	addi	r4,r4,13284
 80005b8:	2709883a 	add	r4,r4,fp
 80005bc:	2085883a 	add	r2,r4,r2
 80005c0:	00fffdf4 	movhi	r3,65527
 80005c4:	18ccfb04 	addi	r3,r3,13292
 80005c8:	1f07883a 	add	r3,r3,fp
 80005cc:	19800017 	ldw	r6,0(r3)
 80005d0:	01400074 	movhi	r5,1
 80005d4:	295dc004 	addi	r5,r5,30464
 80005d8:	1009883a 	mov	r4,r2
 80005dc:	8000bc00 	call	8000bc0 <start_recording>
			printf("Finished recording...\n");
 80005e0:	01020074 	movhi	r4,2049
 80005e4:	2115b004 	addi	r4,r4,22208
 80005e8:	80072ac0 	call	80072ac <puts>

			message[0] = recording;			// puts the address of the file containing the recording
 80005ec:	008000f4 	movhi	r2,3
 80005f0:	10bc0504 	addi	r2,r2,-4076
 80005f4:	013ffdf4 	movhi	r4,65527
 80005f8:	210cf904 	addi	r4,r4,13284
 80005fc:	2709883a 	add	r4,r4,fp
 8000600:	2087883a 	add	r3,r4,r2
 8000604:	00800274 	movhi	r2,9
 8000608:	10b30504 	addi	r2,r2,-13292
 800060c:	013ffdf4 	movhi	r4,65527
 8000610:	210cf904 	addi	r4,r4,13284
 8000614:	2709883a 	add	r4,r4,fp
 8000618:	2085883a 	add	r2,r4,r2
 800061c:	10c00015 	stw	r3,0(r2)
			message[1] = RECORDING_SAMPLES;	// puts the length of the file
 8000620:	00800274 	movhi	r2,9
 8000624:	10b30504 	addi	r2,r2,-13292
 8000628:	013ffdf4 	movhi	r4,65527
 800062c:	210cf904 	addi	r4,r4,13284
 8000630:	2709883a 	add	r4,r4,fp
 8000634:	2087883a 	add	r3,r4,r2
 8000638:	00800074 	movhi	r2,1
 800063c:	109dc004 	addi	r2,r2,30464
 8000640:	18800115 	stw	r2,4(r3)
			altera_avalon_mailbox_send (mailbox, message, 0, ISR);	// sends the info through the mailbox
 8000644:	00800274 	movhi	r2,9
 8000648:	10b30504 	addi	r2,r2,-13292
 800064c:	00fffdf4 	movhi	r3,65527
 8000650:	18ccf904 	addi	r3,r3,13284
 8000654:	1f07883a 	add	r3,r3,fp
 8000658:	1885883a 	add	r2,r3,r2
 800065c:	000f883a 	mov	r7,zero
 8000660:	000d883a 	mov	r6,zero
 8000664:	100b883a 	mov	r5,r2
 8000668:	00bffdf4 	movhi	r2,65527
 800066c:	108cfa04 	addi	r2,r2,13288
 8000670:	1705883a 	add	r2,r2,fp
 8000674:	11000017 	ldw	r4,0(r2)
 8000678:	8012ecc0 	call	8012ecc <altera_avalon_mailbox_send>

			play_file(recording, RECORDING_SAMPLES, audio_device);			// plays back the recording
 800067c:	008000f4 	movhi	r2,3
 8000680:	10bc0504 	addi	r2,r2,-4076
 8000684:	00fffdf4 	movhi	r3,65527
 8000688:	18ccf904 	addi	r3,r3,13284
 800068c:	1f07883a 	add	r3,r3,fp
 8000690:	1885883a 	add	r2,r3,r2
 8000694:	013ffdf4 	movhi	r4,65527
 8000698:	210cfb04 	addi	r4,r4,13292
 800069c:	2709883a 	add	r4,r4,fp
 80006a0:	21800017 	ldw	r6,0(r4)
 80006a4:	01400074 	movhi	r5,1
 80006a8:	295dc004 	addi	r5,r5,30464
 80006ac:	1009883a 	mov	r4,r2
 80006b0:	80006cc0 	call	80006cc <play_file>
		}
	}
 80006b4:	003f5606 	br	8000410 <__alt_data_end+0xfc000410>


	altera_avalon_mailbox_close (mailbox); 	// closing the handle to the mailbox
	return 0;
}
 80006b8:	e037883a 	mov	sp,fp
 80006bc:	dfc00117 	ldw	ra,4(sp)
 80006c0:	df000017 	ldw	fp,0(sp)
 80006c4:	dec00204 	addi	sp,sp,8
 80006c8:	f800283a 	ret

080006cc <play_file>:



// this function plays an audio file trough the output jack (green). To do so it needs to send bursts of data to the outgoing FIFO.
void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device)
{
 80006cc:	defff804 	addi	sp,sp,-32
 80006d0:	dfc00715 	stw	ra,28(sp)
 80006d4:	df000615 	stw	fp,24(sp)
 80006d8:	df000604 	addi	fp,sp,24
 80006dc:	e13ffd15 	stw	r4,-12(fp)
 80006e0:	e17ffe15 	stw	r5,-8(fp)
 80006e4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)
 80006e8:	00801904 	movi	r2,100
 80006ec:	e0bffb15 	stw	r2,-20(fp)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 80006f0:	e03ffa15 	stw	zero,-24(fp)
 80006f4:	00003006 	br	80007b8 <play_file+0xec>
	{
		file_pointer = file + i;
 80006f8:	e0bffa17 	ldw	r2,-24(fp)
 80006fc:	1085883a 	add	r2,r2,r2
 8000700:	1085883a 	add	r2,r2,r2
 8000704:	1007883a 	mov	r3,r2
 8000708:	e0bffd17 	ldw	r2,-12(fp)
 800070c:	10c5883a 	add	r2,r2,r3
 8000710:	e0bffc15 	stw	r2,-16(fp)
		if (file_size - i > BURST_LENGTH) {
 8000714:	e0fffe17 	ldw	r3,-8(fp)
 8000718:	e0bffa17 	ldw	r2,-24(fp)
 800071c:	1885c83a 	sub	r2,r3,r2
 8000720:	e0fffb17 	ldw	r3,-20(fp)
 8000724:	18800b2e 	bgeu	r3,r2,8000754 <play_file+0x88>
			alt_up_audio_play_r(audio_device, file_pointer, BURST_LENGTH);
 8000728:	e0bffb17 	ldw	r2,-20(fp)
 800072c:	100d883a 	mov	r6,r2
 8000730:	e17ffc17 	ldw	r5,-16(fp)
 8000734:	e13fff17 	ldw	r4,-4(fp)
 8000738:	801385c0 	call	801385c <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, BURST_LENGTH);
 800073c:	e0bffb17 	ldw	r2,-20(fp)
 8000740:	100d883a 	mov	r6,r2
 8000744:	e17ffc17 	ldw	r5,-16(fp)
 8000748:	e13fff17 	ldw	r4,-4(fp)
 800074c:	80138c40 	call	80138c4 <alt_up_audio_play_l>
 8000750:	00000e06 	br	800078c <play_file+0xc0>
		} else {
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
 8000754:	e0fffe17 	ldw	r3,-8(fp)
 8000758:	e0bffa17 	ldw	r2,-24(fp)
 800075c:	1885c83a 	sub	r2,r3,r2
 8000760:	100d883a 	mov	r6,r2
 8000764:	e17ffc17 	ldw	r5,-16(fp)
 8000768:	e13fff17 	ldw	r4,-4(fp)
 800076c:	801385c0 	call	801385c <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
 8000770:	e0fffe17 	ldw	r3,-8(fp)
 8000774:	e0bffa17 	ldw	r2,-24(fp)
 8000778:	1885c83a 	sub	r2,r3,r2
 800077c:	100d883a 	mov	r6,r2
 8000780:	e17ffc17 	ldw	r5,-16(fp)
 8000784:	e13fff17 	ldw	r4,-4(fp)
 8000788:	80138c40 	call	80138c4 <alt_up_audio_play_l>
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
 800078c:	0001883a 	nop
 8000790:	000b883a 	mov	r5,zero
 8000794:	e13fff17 	ldw	r4,-4(fp)
 8000798:	80137fc0 	call	80137fc <alt_up_audio_write_fifo_space>
 800079c:	1007883a 	mov	r3,r2
 80007a0:	e0bffb17 	ldw	r2,-20(fp)
 80007a4:	18bffa36 	bltu	r3,r2,8000790 <__alt_data_end+0xfc000790>
{
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 80007a8:	e0fffa17 	ldw	r3,-24(fp)
 80007ac:	e0bffb17 	ldw	r2,-20(fp)
 80007b0:	1885883a 	add	r2,r3,r2
 80007b4:	e0bffa15 	stw	r2,-24(fp)
 80007b8:	e0bffe17 	ldw	r2,-8(fp)
 80007bc:	e0fffa17 	ldw	r3,-24(fp)
 80007c0:	18bfcd36 	bltu	r3,r2,80006f8 <__alt_data_end+0xfc0006f8>
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
	}
}
 80007c4:	0001883a 	nop
 80007c8:	e037883a 	mov	sp,fp
 80007cc:	dfc00117 	ldw	ra,4(sp)
 80007d0:	df000017 	ldw	fp,0(sp)
 80007d4:	dec00204 	addi	sp,sp,8
 80007d8:	f800283a 	ret

080007dc <generate_sinusoid>:


/* creates a sinusoidal waveform in the memory (at the location pointed by "unsigned int *file"), n_samples specifies the length*/
// of the file to create.
void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int n_samples, unsigned int *file)
{
 80007dc:	defff404 	addi	sp,sp,-48
 80007e0:	dfc00b15 	stw	ra,44(sp)
 80007e4:	df000a15 	stw	fp,40(sp)
 80007e8:	dc400915 	stw	r17,36(sp)
 80007ec:	dc000815 	stw	r16,32(sp)
 80007f0:	df000a04 	addi	fp,sp,40
 80007f4:	e13ffa15 	stw	r4,-24(fp)
 80007f8:	e17ffb15 	stw	r5,-20(fp)
 80007fc:	3005883a 	mov	r2,r6
 8000800:	e1fffd15 	stw	r7,-12(fp)
 8000804:	e0bffc05 	stb	r2,-16(fp)
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow
 8000808:	e13ffb17 	ldw	r4,-20(fp)
 800080c:	8006e540 	call	8006e54 <__extendsfdf2>
 8000810:	1011883a 	mov	r8,r2
 8000814:	1813883a 	mov	r9,r3
 8000818:	01951134 	movhi	r6,21572
 800081c:	318b4604 	addi	r6,r6,11544
 8000820:	01d00674 	movhi	r7,16409
 8000824:	39c87ec4 	addi	r7,r7,8699
 8000828:	4009883a 	mov	r4,r8
 800082c:	480b883a 	mov	r5,r9
 8000830:	8005ce40 	call	8005ce4 <__muldf3>
 8000834:	1009883a 	mov	r4,r2
 8000838:	180b883a 	mov	r5,r3
 800083c:	2021883a 	mov	r16,r4
 8000840:	2823883a 	mov	r17,r5
 8000844:	e13ffa17 	ldw	r4,-24(fp)
 8000848:	8006d780 	call	8006d78 <__floatsidf>
 800084c:	1009883a 	mov	r4,r2
 8000850:	180b883a 	mov	r5,r3
 8000854:	200d883a 	mov	r6,r4
 8000858:	280f883a 	mov	r7,r5
 800085c:	8009883a 	mov	r4,r16
 8000860:	880b883a 	mov	r5,r17
 8000864:	80051a40 	call	80051a4 <__divdf3>
 8000868:	1009883a 	mov	r4,r2
 800086c:	180b883a 	mov	r5,r3
 8000870:	2005883a 	mov	r2,r4
 8000874:	2807883a 	mov	r3,r5
 8000878:	1009883a 	mov	r4,r2
 800087c:	180b883a 	mov	r5,r3
 8000880:	8006f640 	call	8006f64 <__truncdfsf2>
 8000884:	1007883a 	mov	r3,r2
 8000888:	e0fff715 	stw	r3,-36(fp)

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
 800088c:	e0bffc07 	ldb	r2,-16(fp)
 8000890:	1009883a 	mov	r4,r2
 8000894:	80047d40 	call	80047d4 <__floatsisf>
 8000898:	1007883a 	mov	r3,r2
 800089c:	0153e034 	movhi	r5,20352
 80008a0:	1809883a 	mov	r4,r3
 80008a4:	8003e840 	call	8003e84 <__mulsf3>
 80008a8:	1007883a 	mov	r3,r2
 80008ac:	1805883a 	mov	r2,r3
 80008b0:	1009883a 	mov	r4,r2
 80008b4:	8006e540 	call	8006e54 <__extendsfdf2>
 80008b8:	1011883a 	mov	r8,r2
 80008bc:	1813883a 	mov	r9,r3
 80008c0:	000d883a 	mov	r6,zero
 80008c4:	01d01674 	movhi	r7,16473
 80008c8:	4009883a 	mov	r4,r8
 80008cc:	480b883a 	mov	r5,r9
 80008d0:	80051a40 	call	80051a4 <__divdf3>
 80008d4:	1009883a 	mov	r4,r2
 80008d8:	180b883a 	mov	r5,r3
 80008dc:	2005883a 	mov	r2,r4
 80008e0:	2807883a 	mov	r3,r5
 80008e4:	1009883a 	mov	r4,r2
 80008e8:	180b883a 	mov	r5,r3
 80008ec:	8006cf80 	call	8006cf8 <__fixdfsi>
 80008f0:	e0bff815 	stw	r2,-32(fp)
	for(i=0; i<n_samples; i++)
 80008f4:	e03ff615 	stw	zero,-40(fp)
 80008f8:	00002d06 	br	80009b0 <generate_sinusoid+0x1d4>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
 80008fc:	e13ff817 	ldw	r4,-32(fp)
 8000900:	8006d780 	call	8006d78 <__floatsidf>
 8000904:	1021883a 	mov	r16,r2
 8000908:	1823883a 	mov	r17,r3
 800090c:	e13ff617 	ldw	r4,-40(fp)
 8000910:	80047d40 	call	80047d4 <__floatsisf>
 8000914:	1007883a 	mov	r3,r2
 8000918:	e17ff717 	ldw	r5,-36(fp)
 800091c:	1809883a 	mov	r4,r3
 8000920:	8003e840 	call	8003e84 <__mulsf3>
 8000924:	1007883a 	mov	r3,r2
 8000928:	1805883a 	mov	r2,r3
 800092c:	1009883a 	mov	r4,r2
 8000930:	8006e540 	call	8006e54 <__extendsfdf2>
 8000934:	100b883a 	mov	r5,r2
 8000938:	180d883a 	mov	r6,r3
 800093c:	2809883a 	mov	r4,r5
 8000940:	300b883a 	mov	r5,r6
 8000944:	8000cfc0 	call	8000cfc <sin>
 8000948:	1009883a 	mov	r4,r2
 800094c:	180b883a 	mov	r5,r3
 8000950:	200d883a 	mov	r6,r4
 8000954:	280f883a 	mov	r7,r5
 8000958:	8009883a 	mov	r4,r16
 800095c:	880b883a 	mov	r5,r17
 8000960:	8005ce40 	call	8005ce4 <__muldf3>
 8000964:	1009883a 	mov	r4,r2
 8000968:	180b883a 	mov	r5,r3
 800096c:	2005883a 	mov	r2,r4
 8000970:	2807883a 	mov	r3,r5
 8000974:	1009883a 	mov	r4,r2
 8000978:	180b883a 	mov	r5,r3
 800097c:	8006cf80 	call	8006cf8 <__fixdfsi>
 8000980:	e0bff915 	stw	r2,-28(fp)
		IOWR_32DIRECT(file, i*4, sample_amplitude);
 8000984:	e0bff617 	ldw	r2,-40(fp)
 8000988:	1085883a 	add	r2,r2,r2
 800098c:	1085883a 	add	r2,r2,r2
 8000990:	1007883a 	mov	r3,r2
 8000994:	e0800217 	ldw	r2,8(fp)
 8000998:	10c5883a 	add	r2,r2,r3
 800099c:	e0fff917 	ldw	r3,-28(fp)
 80009a0:	10c00035 	stwio	r3,0(r2)
{
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
	for(i=0; i<n_samples; i++)
 80009a4:	e0bff617 	ldw	r2,-40(fp)
 80009a8:	10800044 	addi	r2,r2,1
 80009ac:	e0bff615 	stw	r2,-40(fp)
 80009b0:	e0fff617 	ldw	r3,-40(fp)
 80009b4:	e0bffd17 	ldw	r2,-12(fp)
 80009b8:	18bfd036 	bltu	r3,r2,80008fc <__alt_data_end+0xfc0008fc>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
		IOWR_32DIRECT(file, i*4, sample_amplitude);
	}
}
 80009bc:	0001883a 	nop
 80009c0:	e6fffe04 	addi	sp,fp,-8
 80009c4:	dfc00317 	ldw	ra,12(sp)
 80009c8:	df000217 	ldw	fp,8(sp)
 80009cc:	dc400117 	ldw	r17,4(sp)
 80009d0:	dc000017 	ldw	r16,0(sp)
 80009d4:	dec00404 	addi	sp,sp,16
 80009d8:	f800283a 	ret

080009dc <show_amplitude_on_LEDS>:


// outputs the amplitude on the LEDs
void show_amplitude_on_LEDS(float amplitude)
{
 80009dc:	defffd04 	addi	sp,sp,-12
 80009e0:	dfc00215 	stw	ra,8(sp)
 80009e4:	df000115 	stw	fp,4(sp)
 80009e8:	df000104 	addi	fp,sp,4
 80009ec:	e13fff15 	stw	r4,-4(fp)
	amplitude = sqrt(amplitude);	// the way we perceive sound is not linear, this is why I take the square root of the amplitude
 80009f0:	e13fff17 	ldw	r4,-4(fp)
 80009f4:	8006e540 	call	8006e54 <__extendsfdf2>
 80009f8:	100b883a 	mov	r5,r2
 80009fc:	180d883a 	mov	r6,r3
 8000a00:	2809883a 	mov	r4,r5
 8000a04:	300b883a 	mov	r5,r6
 8000a08:	8000dec0 	call	8000dec <sqrt>
 8000a0c:	100b883a 	mov	r5,r2
 8000a10:	180d883a 	mov	r6,r3
 8000a14:	2809883a 	mov	r4,r5
 8000a18:	300b883a 	mov	r5,r6
 8000a1c:	8006f640 	call	8006f64 <__truncdfsf2>
 8000a20:	1007883a 	mov	r3,r2
 8000a24:	e0ffff15 	stw	r3,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, (0x01<<((int)(amplitude*PIO_LEDS_NUMBER)))-1);
 8000a28:	01504834 	movhi	r5,16672
 8000a2c:	e13fff17 	ldw	r4,-4(fp)
 8000a30:	8003e840 	call	8003e84 <__mulsf3>
 8000a34:	1007883a 	mov	r3,r2
 8000a38:	1805883a 	mov	r2,r3
 8000a3c:	1009883a 	mov	r4,r2
 8000a40:	80047640 	call	8004764 <__fixsfsi>
 8000a44:	1007883a 	mov	r3,r2
 8000a48:	00800044 	movi	r2,1
 8000a4c:	10c4983a 	sll	r2,r2,r3
 8000a50:	10ffffc4 	addi	r3,r2,-1
 8000a54:	00800134 	movhi	r2,4
 8000a58:	10840004 	addi	r2,r2,4096
 8000a5c:	10c00035 	stwio	r3,0(r2)
}
 8000a60:	0001883a 	nop
 8000a64:	e037883a 	mov	sp,fp
 8000a68:	dfc00117 	ldw	ra,4(sp)
 8000a6c:	df000017 	ldw	fp,0(sp)
 8000a70:	dec00204 	addi	sp,sp,8
 8000a74:	f800283a 	ret

08000a78 <average_amplitude>:


// computes the average amplitude of an array of sound samples
float average_amplitude(int *data, int length)
{
 8000a78:	defffa04 	addi	sp,sp,-24
 8000a7c:	dfc00515 	stw	ra,20(sp)
 8000a80:	df000415 	stw	fp,16(sp)
 8000a84:	df000404 	addi	fp,sp,16
 8000a88:	e13ffe15 	stw	r4,-8(fp)
 8000a8c:	e17fff15 	stw	r5,-4(fp)
	int i;
	float average_amplitude = 0;
 8000a90:	e03ffd15 	stw	zero,-12(fp)

	// computes the average
	for (i=0; i<length; i++)
 8000a94:	e03ffc15 	stw	zero,-16(fp)
 8000a98:	00002a06 	br	8000b44 <average_amplitude+0xcc>
	{
		if (data[i] < 0)
 8000a9c:	e0bffc17 	ldw	r2,-16(fp)
 8000aa0:	1085883a 	add	r2,r2,r2
 8000aa4:	1085883a 	add	r2,r2,r2
 8000aa8:	1007883a 	mov	r3,r2
 8000aac:	e0bffe17 	ldw	r2,-8(fp)
 8000ab0:	10c5883a 	add	r2,r2,r3
 8000ab4:	10800017 	ldw	r2,0(r2)
 8000ab8:	1000100e 	bge	r2,zero,8000afc <average_amplitude+0x84>
			average_amplitude -= data[i];
 8000abc:	e0bffc17 	ldw	r2,-16(fp)
 8000ac0:	1085883a 	add	r2,r2,r2
 8000ac4:	1085883a 	add	r2,r2,r2
 8000ac8:	1007883a 	mov	r3,r2
 8000acc:	e0bffe17 	ldw	r2,-8(fp)
 8000ad0:	10c5883a 	add	r2,r2,r3
 8000ad4:	10800017 	ldw	r2,0(r2)
 8000ad8:	1009883a 	mov	r4,r2
 8000adc:	80047d40 	call	80047d4 <__floatsisf>
 8000ae0:	1007883a 	mov	r3,r2
 8000ae4:	180b883a 	mov	r5,r3
 8000ae8:	e13ffd17 	ldw	r4,-12(fp)
 8000aec:	80042800 	call	8004280 <__subsf3>
 8000af0:	1007883a 	mov	r3,r2
 8000af4:	e0fffd15 	stw	r3,-12(fp)
 8000af8:	00000f06 	br	8000b38 <average_amplitude+0xc0>
		else
			average_amplitude += data[i];
 8000afc:	e0bffc17 	ldw	r2,-16(fp)
 8000b00:	1085883a 	add	r2,r2,r2
 8000b04:	1085883a 	add	r2,r2,r2
 8000b08:	1007883a 	mov	r3,r2
 8000b0c:	e0bffe17 	ldw	r2,-8(fp)
 8000b10:	10c5883a 	add	r2,r2,r3
 8000b14:	10800017 	ldw	r2,0(r2)
 8000b18:	1009883a 	mov	r4,r2
 8000b1c:	80047d40 	call	80047d4 <__floatsisf>
 8000b20:	1007883a 	mov	r3,r2
 8000b24:	180b883a 	mov	r5,r3
 8000b28:	e13ffd17 	ldw	r4,-12(fp)
 8000b2c:	80033f80 	call	80033f8 <__addsf3>
 8000b30:	1007883a 	mov	r3,r2
 8000b34:	e0fffd15 	stw	r3,-12(fp)
{
	int i;
	float average_amplitude = 0;

	// computes the average
	for (i=0; i<length; i++)
 8000b38:	e0bffc17 	ldw	r2,-16(fp)
 8000b3c:	10800044 	addi	r2,r2,1
 8000b40:	e0bffc15 	stw	r2,-16(fp)
 8000b44:	e0fffc17 	ldw	r3,-16(fp)
 8000b48:	e0bfff17 	ldw	r2,-4(fp)
 8000b4c:	18bfd316 	blt	r3,r2,8000a9c <__alt_data_end+0xfc000a9c>
		else
			average_amplitude += data[i];
	}

	// normalizes to a range from 0 to 1
	average_amplitude /= INT_MAX;
 8000b50:	0153c034 	movhi	r5,20224
 8000b54:	e13ffd17 	ldw	r4,-12(fp)
 8000b58:	80038c00 	call	80038c0 <__divsf3>
 8000b5c:	1007883a 	mov	r3,r2
 8000b60:	e0fffd15 	stw	r3,-12(fp)
	average_amplitude /= length;
 8000b64:	e13fff17 	ldw	r4,-4(fp)
 8000b68:	80047d40 	call	80047d4 <__floatsisf>
 8000b6c:	1007883a 	mov	r3,r2
 8000b70:	180b883a 	mov	r5,r3
 8000b74:	e13ffd17 	ldw	r4,-12(fp)
 8000b78:	80038c00 	call	80038c0 <__divsf3>
 8000b7c:	1007883a 	mov	r3,r2
 8000b80:	e0fffd15 	stw	r3,-12(fp)
	if (average_amplitude < 0)
 8000b84:	000b883a 	mov	r5,zero
 8000b88:	e13ffd17 	ldw	r4,-12(fp)
 8000b8c:	8003dbc0 	call	8003dbc <__lesf2>
 8000b90:	1000030e 	bge	r2,zero,8000ba0 <average_amplitude+0x128>
		average_amplitude *= -1;
 8000b94:	e0bffd17 	ldw	r2,-12(fp)
 8000b98:	10a0003c 	xorhi	r2,r2,32768
 8000b9c:	e0bffd15 	stw	r2,-12(fp)

	return average_amplitude;
 8000ba0:	e0bffd17 	ldw	r2,-12(fp)
 8000ba4:	1007883a 	mov	r3,r2
}
 8000ba8:	1805883a 	mov	r2,r3
 8000bac:	e037883a 	mov	sp,fp
 8000bb0:	dfc00117 	ldw	ra,4(sp)
 8000bb4:	df000017 	ldw	fp,0(sp)
 8000bb8:	dec00204 	addi	sp,sp,8
 8000bbc:	f800283a 	ret

08000bc0 <start_recording>:



// records a sound from the microphone and stores it in the SDRAM (at location pointed by *file)
void start_recording(unsigned int *file, unsigned int n_samples, alt_up_audio_dev *audio_device)
{
 8000bc0:	defff804 	addi	sp,sp,-32
 8000bc4:	dfc00715 	stw	ra,28(sp)
 8000bc8:	df000615 	stw	fp,24(sp)
 8000bcc:	df000604 	addi	fp,sp,24
 8000bd0:	e13ffd15 	stw	r4,-12(fp)
 8000bd4:	e17ffe15 	stw	r5,-8(fp)
 8000bd8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, *end_of_file;
	unsigned int n_samples_in_FIFO = 0;
 8000bdc:	e03ffb15 	stw	zero,-20(fp)

	if (n_samples > RECORDING_SAMPLES)
 8000be0:	e0fffe17 	ldw	r3,-8(fp)
 8000be4:	00800074 	movhi	r2,1
 8000be8:	109dc004 	addi	r2,r2,30464
 8000bec:	10c0042e 	bgeu	r2,r3,8000c00 <start_recording+0x40>
	{
		printf("Error, can't record a file so long\n");
 8000bf0:	01020074 	movhi	r4,2049
 8000bf4:	2115b604 	addi	r4,r4,22232
 8000bf8:	80072ac0 	call	80072ac <puts>
		return;
 8000bfc:	00002506 	br	8000c94 <start_recording+0xd4>
	}
	file_pointer = file;
 8000c00:	e0bffd17 	ldw	r2,-12(fp)
 8000c04:	e0bffa15 	stw	r2,-24(fp)
	end_of_file = &(file[n_samples]);
 8000c08:	e0bffe17 	ldw	r2,-8(fp)
 8000c0c:	1085883a 	add	r2,r2,r2
 8000c10:	1085883a 	add	r2,r2,r2
 8000c14:	1007883a 	mov	r3,r2
 8000c18:	e0bffd17 	ldw	r2,-12(fp)
 8000c1c:	10c5883a 	add	r2,r2,r3
 8000c20:	e0bffc15 	stw	r2,-16(fp)

	while(file_pointer < end_of_file )
 8000c24:	00001806 	br	8000c88 <start_recording+0xc8>
	{
		// reads data from the incoming FIFO (sound from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);
 8000c28:	000b883a 	mov	r5,zero
 8000c2c:	e13fff17 	ldw	r4,-4(fp)
 8000c30:	80136cc0 	call	80136cc <alt_up_audio_read_fifo_avail>
 8000c34:	e0bffb15 	stw	r2,-20(fp)
		alt_up_audio_read_fifo(audio_device, file_pointer, n_samples_in_FIFO, 0);
 8000c38:	e0bffb17 	ldw	r2,-20(fp)
 8000c3c:	000f883a 	mov	r7,zero
 8000c40:	100d883a 	mov	r6,r2
 8000c44:	e17ffa17 	ldw	r5,-24(fp)
 8000c48:	e13fff17 	ldw	r4,-4(fp)
 8000c4c:	801392c0 	call	801392c <alt_up_audio_read_fifo>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs
 8000c50:	e0bffb17 	ldw	r2,-20(fp)
 8000c54:	100b883a 	mov	r5,r2
 8000c58:	e13ffa17 	ldw	r4,-24(fp)
 8000c5c:	8000a780 	call	8000a78 <average_amplitude>
 8000c60:	1007883a 	mov	r3,r2
 8000c64:	1809883a 	mov	r4,r3
 8000c68:	80009dc0 	call	80009dc <show_amplitude_on_LEDS>

		file_pointer += n_samples_in_FIFO;
 8000c6c:	e0bffb17 	ldw	r2,-20(fp)
 8000c70:	1085883a 	add	r2,r2,r2
 8000c74:	1085883a 	add	r2,r2,r2
 8000c78:	1007883a 	mov	r3,r2
 8000c7c:	e0bffa17 	ldw	r2,-24(fp)
 8000c80:	10c5883a 	add	r2,r2,r3
 8000c84:	e0bffa15 	stw	r2,-24(fp)
		return;
	}
	file_pointer = file;
	end_of_file = &(file[n_samples]);

	while(file_pointer < end_of_file )
 8000c88:	e0fffa17 	ldw	r3,-24(fp)
 8000c8c:	e0bffc17 	ldw	r2,-16(fp)
 8000c90:	18bfe536 	bltu	r3,r2,8000c28 <__alt_data_end+0xfc000c28>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs

		file_pointer += n_samples_in_FIFO;
	}
}
 8000c94:	e037883a 	mov	sp,fp
 8000c98:	dfc00117 	ldw	ra,4(sp)
 8000c9c:	df000017 	ldw	fp,0(sp)
 8000ca0:	dec00204 	addi	sp,sp,8
 8000ca4:	f800283a 	ret

08000ca8 <mailbox_callback>:




void mailbox_callback(void* report, int status) {
 8000ca8:	defffc04 	addi	sp,sp,-16
 8000cac:	dfc00315 	stw	ra,12(sp)
 8000cb0:	df000215 	stw	fp,8(sp)
 8000cb4:	df000204 	addi	fp,sp,8
 8000cb8:	e13ffe15 	stw	r4,-8(fp)
 8000cbc:	e17fff15 	stw	r5,-4(fp)
	if (status) {
 8000cc0:	e0bfff17 	ldw	r2,-4(fp)
 8000cc4:	10000426 	beq	r2,zero,8000cd8 <mailbox_callback+0x30>
		printf("Transfer done");
 8000cc8:	01020074 	movhi	r4,2049
 8000ccc:	2115bf04 	addi	r4,r4,22268
 8000cd0:	80071b00 	call	80071b0 <printf>
	} else {
		printf("error in transfer");
	}
}
 8000cd4:	00000306 	br	8000ce4 <mailbox_callback+0x3c>

void mailbox_callback(void* report, int status) {
	if (status) {
		printf("Transfer done");
	} else {
		printf("error in transfer");
 8000cd8:	01020074 	movhi	r4,2049
 8000cdc:	2115c304 	addi	r4,r4,22284
 8000ce0:	80071b00 	call	80071b0 <printf>
	}
}
 8000ce4:	0001883a 	nop
 8000ce8:	e037883a 	mov	sp,fp
 8000cec:	dfc00117 	ldw	ra,4(sp)
 8000cf0:	df000017 	ldw	fp,0(sp)
 8000cf4:	dec00204 	addi	sp,sp,8
 8000cf8:	f800283a 	ret

08000cfc <sin>:
 8000cfc:	00a00034 	movhi	r2,32768
 8000d00:	defffa04 	addi	sp,sp,-24
 8000d04:	10bfffc4 	addi	r2,r2,-1
 8000d08:	00cffa74 	movhi	r3,16361
 8000d0c:	dfc00515 	stw	ra,20(sp)
 8000d10:	2884703a 	and	r2,r5,r2
 8000d14:	18c87ec4 	addi	r3,r3,8699
 8000d18:	1880180e 	bge	r3,r2,8000d7c <sin+0x80>
 8000d1c:	00dffc34 	movhi	r3,32752
 8000d20:	18ffffc4 	addi	r3,r3,-1
 8000d24:	1880060e 	bge	r3,r2,8000d40 <sin+0x44>
 8000d28:	280f883a 	mov	r7,r5
 8000d2c:	200d883a 	mov	r6,r4
 8000d30:	80063fc0 	call	80063fc <__subdf3>
 8000d34:	dfc00517 	ldw	ra,20(sp)
 8000d38:	dec00604 	addi	sp,sp,24
 8000d3c:	f800283a 	ret
 8000d40:	d9800104 	addi	r6,sp,4
 8000d44:	8000f1c0 	call	8000f1c <__ieee754_rem_pio2>
 8000d48:	108000cc 	andi	r2,r2,3
 8000d4c:	00c00044 	movi	r3,1
 8000d50:	10c01926 	beq	r2,r3,8000db8 <sin+0xbc>
 8000d54:	01000084 	movi	r4,2
 8000d58:	11000f26 	beq	r2,r4,8000d98 <sin+0x9c>
 8000d5c:	10001c26 	beq	r2,zero,8000dd0 <sin+0xd4>
 8000d60:	d9800317 	ldw	r6,12(sp)
 8000d64:	d9c00417 	ldw	r7,16(sp)
 8000d68:	d9000117 	ldw	r4,4(sp)
 8000d6c:	d9400217 	ldw	r5,8(sp)
 8000d70:	80019100 	call	8001910 <__kernel_cos>
 8000d74:	18e0003c 	xorhi	r3,r3,32768
 8000d78:	003fee06 	br	8000d34 <__alt_data_end+0xfc000d34>
 8000d7c:	d8000015 	stw	zero,0(sp)
 8000d80:	000d883a 	mov	r6,zero
 8000d84:	000f883a 	mov	r7,zero
 8000d88:	8002b440 	call	8002b44 <__kernel_sin>
 8000d8c:	dfc00517 	ldw	ra,20(sp)
 8000d90:	dec00604 	addi	sp,sp,24
 8000d94:	f800283a 	ret
 8000d98:	d9800317 	ldw	r6,12(sp)
 8000d9c:	d9c00417 	ldw	r7,16(sp)
 8000da0:	d9000117 	ldw	r4,4(sp)
 8000da4:	d9400217 	ldw	r5,8(sp)
 8000da8:	d8c00015 	stw	r3,0(sp)
 8000dac:	8002b440 	call	8002b44 <__kernel_sin>
 8000db0:	18e0003c 	xorhi	r3,r3,32768
 8000db4:	003fdf06 	br	8000d34 <__alt_data_end+0xfc000d34>
 8000db8:	d9800317 	ldw	r6,12(sp)
 8000dbc:	d9c00417 	ldw	r7,16(sp)
 8000dc0:	d9000117 	ldw	r4,4(sp)
 8000dc4:	d9400217 	ldw	r5,8(sp)
 8000dc8:	80019100 	call	8001910 <__kernel_cos>
 8000dcc:	003fd906 	br	8000d34 <__alt_data_end+0xfc000d34>
 8000dd0:	d9800317 	ldw	r6,12(sp)
 8000dd4:	d9c00417 	ldw	r7,16(sp)
 8000dd8:	d9000117 	ldw	r4,4(sp)
 8000ddc:	d9400217 	ldw	r5,8(sp)
 8000de0:	d8c00015 	stw	r3,0(sp)
 8000de4:	8002b440 	call	8002b44 <__kernel_sin>
 8000de8:	003fd206 	br	8000d34 <__alt_data_end+0xfc000d34>

08000dec <sqrt>:
 8000dec:	defff104 	addi	sp,sp,-60
 8000df0:	dd000d15 	stw	r20,52(sp)
 8000df4:	05020074 	movhi	r20,2049
 8000df8:	dcc00c15 	stw	r19,48(sp)
 8000dfc:	dc800b15 	stw	r18,44(sp)
 8000e00:	dc400a15 	stw	r17,40(sp)
 8000e04:	dc000915 	stw	r16,36(sp)
 8000e08:	dfc00e15 	stw	ra,56(sp)
 8000e0c:	a51df004 	addi	r20,r20,30656
 8000e10:	2027883a 	mov	r19,r4
 8000e14:	2825883a 	mov	r18,r5
 8000e18:	80016880 	call	8001688 <__ieee754_sqrt>
 8000e1c:	1821883a 	mov	r16,r3
 8000e20:	a0c00017 	ldw	r3,0(r20)
 8000e24:	1023883a 	mov	r17,r2
 8000e28:	00bfffc4 	movi	r2,-1
 8000e2c:	18800a26 	beq	r3,r2,8000e58 <sqrt+0x6c>
 8000e30:	9809883a 	mov	r4,r19
 8000e34:	900b883a 	mov	r5,r18
 8000e38:	80030100 	call	8003010 <__fpclassifyd>
 8000e3c:	10000626 	beq	r2,zero,8000e58 <sqrt+0x6c>
 8000e40:	000d883a 	mov	r6,zero
 8000e44:	000f883a 	mov	r7,zero
 8000e48:	9809883a 	mov	r4,r19
 8000e4c:	900b883a 	mov	r5,r18
 8000e50:	8005bf00 	call	8005bf0 <__ledf2>
 8000e54:	10000a16 	blt	r2,zero,8000e80 <sqrt+0x94>
 8000e58:	8805883a 	mov	r2,r17
 8000e5c:	8007883a 	mov	r3,r16
 8000e60:	dfc00e17 	ldw	ra,56(sp)
 8000e64:	dd000d17 	ldw	r20,52(sp)
 8000e68:	dcc00c17 	ldw	r19,48(sp)
 8000e6c:	dc800b17 	ldw	r18,44(sp)
 8000e70:	dc400a17 	ldw	r17,40(sp)
 8000e74:	dc000917 	ldw	r16,36(sp)
 8000e78:	dec00f04 	addi	sp,sp,60
 8000e7c:	f800283a 	ret
 8000e80:	00800044 	movi	r2,1
 8000e84:	d8800015 	stw	r2,0(sp)
 8000e88:	a4000017 	ldw	r16,0(r20)
 8000e8c:	00820074 	movhi	r2,2049
 8000e90:	1095c804 	addi	r2,r2,22304
 8000e94:	d8800115 	stw	r2,4(sp)
 8000e98:	d8000815 	stw	zero,32(sp)
 8000e9c:	dcc00415 	stw	r19,16(sp)
 8000ea0:	dc800515 	stw	r18,20(sp)
 8000ea4:	dcc00215 	stw	r19,8(sp)
 8000ea8:	dc800315 	stw	r18,12(sp)
 8000eac:	80000a1e 	bne	r16,zero,8000ed8 <sqrt+0xec>
 8000eb0:	d8000615 	stw	zero,24(sp)
 8000eb4:	d8000715 	stw	zero,28(sp)
 8000eb8:	d809883a 	mov	r4,sp
 8000ebc:	80030840 	call	8003084 <matherr>
 8000ec0:	10000e26 	beq	r2,zero,8000efc <sqrt+0x110>
 8000ec4:	d8800817 	ldw	r2,32(sp)
 8000ec8:	1000101e 	bne	r2,zero,8000f0c <sqrt+0x120>
 8000ecc:	d8800617 	ldw	r2,24(sp)
 8000ed0:	d8c00717 	ldw	r3,28(sp)
 8000ed4:	003fe206 	br	8000e60 <__alt_data_end+0xfc000e60>
 8000ed8:	000d883a 	mov	r6,zero
 8000edc:	000f883a 	mov	r7,zero
 8000ee0:	0009883a 	mov	r4,zero
 8000ee4:	000b883a 	mov	r5,zero
 8000ee8:	80051a40 	call	80051a4 <__divdf3>
 8000eec:	d8800615 	stw	r2,24(sp)
 8000ef0:	d8c00715 	stw	r3,28(sp)
 8000ef4:	00800084 	movi	r2,2
 8000ef8:	80bfef1e 	bne	r16,r2,8000eb8 <__alt_data_end+0xfc000eb8>
 8000efc:	80071700 	call	8007170 <__errno>
 8000f00:	00c00844 	movi	r3,33
 8000f04:	10c00015 	stw	r3,0(r2)
 8000f08:	003fee06 	br	8000ec4 <__alt_data_end+0xfc000ec4>
 8000f0c:	80071700 	call	8007170 <__errno>
 8000f10:	d8c00817 	ldw	r3,32(sp)
 8000f14:	10c00015 	stw	r3,0(r2)
 8000f18:	003fec06 	br	8000ecc <__alt_data_end+0xfc000ecc>

08000f1c <__ieee754_rem_pio2>:
 8000f1c:	02200034 	movhi	r8,32768
 8000f20:	deffea04 	addi	sp,sp,-88
 8000f24:	423fffc4 	addi	r8,r8,-1
 8000f28:	00cffa74 	movhi	r3,16361
 8000f2c:	ddc01315 	stw	r23,76(sp)
 8000f30:	dc400d15 	stw	r17,52(sp)
 8000f34:	dfc01515 	stw	ra,84(sp)
 8000f38:	df001415 	stw	fp,80(sp)
 8000f3c:	dd801215 	stw	r22,72(sp)
 8000f40:	dd401115 	stw	r21,68(sp)
 8000f44:	dd001015 	stw	r20,64(sp)
 8000f48:	dcc00f15 	stw	r19,60(sp)
 8000f4c:	dc800e15 	stw	r18,56(sp)
 8000f50:	dc000c15 	stw	r16,48(sp)
 8000f54:	2a2e703a 	and	r23,r5,r8
 8000f58:	18c87ec4 	addi	r3,r3,8699
 8000f5c:	2823883a 	mov	r17,r5
 8000f60:	1dc0790e 	bge	r3,r23,8001148 <__ieee754_rem_pio2+0x22c>
 8000f64:	009000f4 	movhi	r2,16387
 8000f68:	10b65ec4 	addi	r2,r2,-9861
 8000f6c:	3021883a 	mov	r16,r6
 8000f70:	2027883a 	mov	r19,r4
 8000f74:	15c02316 	blt	r2,r23,8001004 <__ieee754_rem_pio2+0xe8>
 8000f78:	01cffe74 	movhi	r7,16377
 8000f7c:	39c87ec4 	addi	r7,r7,8699
 8000f80:	01951034 	movhi	r6,21568
 8000f84:	01417a0e 	bge	zero,r5,8001570 <__ieee754_rem_pio2+0x654>
 8000f88:	80063fc0 	call	80063fc <__subdf3>
 8000f8c:	1025883a 	mov	r18,r2
 8000f90:	008ffe74 	movhi	r2,16377
 8000f94:	10887ec4 	addi	r2,r2,8699
 8000f98:	1823883a 	mov	r17,r3
 8000f9c:	b8808426 	beq	r23,r2,80011b0 <__ieee754_rem_pio2+0x294>
 8000fa0:	018698b4 	movhi	r6,6754
 8000fa4:	01cf7474 	movhi	r7,15825
 8000fa8:	3198cc44 	addi	r6,r6,25393
 8000fac:	39ed1844 	addi	r7,r7,-19359
 8000fb0:	9009883a 	mov	r4,r18
 8000fb4:	180b883a 	mov	r5,r3
 8000fb8:	80063fc0 	call	80063fc <__subdf3>
 8000fbc:	100d883a 	mov	r6,r2
 8000fc0:	180f883a 	mov	r7,r3
 8000fc4:	9009883a 	mov	r4,r18
 8000fc8:	880b883a 	mov	r5,r17
 8000fcc:	80800015 	stw	r2,0(r16)
 8000fd0:	80c00115 	stw	r3,4(r16)
 8000fd4:	80063fc0 	call	80063fc <__subdf3>
 8000fd8:	018698b4 	movhi	r6,6754
 8000fdc:	01cf7474 	movhi	r7,15825
 8000fe0:	3198cc44 	addi	r6,r6,25393
 8000fe4:	39ed1844 	addi	r7,r7,-19359
 8000fe8:	1009883a 	mov	r4,r2
 8000fec:	180b883a 	mov	r5,r3
 8000ff0:	80063fc0 	call	80063fc <__subdf3>
 8000ff4:	80800215 	stw	r2,8(r16)
 8000ff8:	80c00315 	stw	r3,12(r16)
 8000ffc:	00800044 	movi	r2,1
 8001000:	00005606 	br	800115c <__ieee754_rem_pio2+0x240>
 8001004:	00904e74 	movhi	r2,16697
 8001008:	10887ec4 	addi	r2,r2,8699
 800100c:	15c0830e 	bge	r2,r23,800121c <__ieee754_rem_pio2+0x300>
 8001010:	009ffc34 	movhi	r2,32752
 8001014:	10bfffc4 	addi	r2,r2,-1
 8001018:	15c05c16 	blt	r2,r23,800118c <__ieee754_rem_pio2+0x270>
 800101c:	b829d53a 	srai	r20,r23,20
 8001020:	a53efa84 	addi	r20,r20,-1046
 8001024:	a024953a 	slli	r18,r20,20
 8001028:	bca5c83a 	sub	r18,r23,r18
 800102c:	900b883a 	mov	r5,r18
 8001030:	8006cf80 	call	8006cf8 <__fixdfsi>
 8001034:	1009883a 	mov	r4,r2
 8001038:	8006d780 	call	8006d78 <__floatsidf>
 800103c:	9809883a 	mov	r4,r19
 8001040:	900b883a 	mov	r5,r18
 8001044:	100d883a 	mov	r6,r2
 8001048:	180f883a 	mov	r7,r3
 800104c:	d8800215 	stw	r2,8(sp)
 8001050:	d8c00315 	stw	r3,12(sp)
 8001054:	80063fc0 	call	80063fc <__subdf3>
 8001058:	000d883a 	mov	r6,zero
 800105c:	01d05c34 	movhi	r7,16752
 8001060:	1009883a 	mov	r4,r2
 8001064:	180b883a 	mov	r5,r3
 8001068:	8005ce40 	call	8005ce4 <__muldf3>
 800106c:	180b883a 	mov	r5,r3
 8001070:	1009883a 	mov	r4,r2
 8001074:	182b883a 	mov	r21,r3
 8001078:	102d883a 	mov	r22,r2
 800107c:	8006cf80 	call	8006cf8 <__fixdfsi>
 8001080:	1009883a 	mov	r4,r2
 8001084:	8006d780 	call	8006d78 <__floatsidf>
 8001088:	100d883a 	mov	r6,r2
 800108c:	180f883a 	mov	r7,r3
 8001090:	b009883a 	mov	r4,r22
 8001094:	a80b883a 	mov	r5,r21
 8001098:	1027883a 	mov	r19,r2
 800109c:	1825883a 	mov	r18,r3
 80010a0:	d8800415 	stw	r2,16(sp)
 80010a4:	d8c00515 	stw	r3,20(sp)
 80010a8:	80063fc0 	call	80063fc <__subdf3>
 80010ac:	000d883a 	mov	r6,zero
 80010b0:	01d05c34 	movhi	r7,16752
 80010b4:	1009883a 	mov	r4,r2
 80010b8:	180b883a 	mov	r5,r3
 80010bc:	8005ce40 	call	8005ce4 <__muldf3>
 80010c0:	000d883a 	mov	r6,zero
 80010c4:	000f883a 	mov	r7,zero
 80010c8:	1009883a 	mov	r4,r2
 80010cc:	180b883a 	mov	r5,r3
 80010d0:	d8800615 	stw	r2,24(sp)
 80010d4:	d8c00715 	stw	r3,28(sp)
 80010d8:	8005a8c0 	call	8005a8c <__eqdf2>
 80010dc:	1001431e 	bne	r2,zero,80015ec <__ieee754_rem_pio2+0x6d0>
 80010e0:	000f883a 	mov	r7,zero
 80010e4:	000d883a 	mov	r6,zero
 80010e8:	9809883a 	mov	r4,r19
 80010ec:	900b883a 	mov	r5,r18
 80010f0:	8005a8c0 	call	8005a8c <__eqdf2>
 80010f4:	100f003a 	cmpeq	r7,r2,zero
 80010f8:	00800084 	movi	r2,2
 80010fc:	11cfc83a 	sub	r7,r2,r7
 8001100:	00800084 	movi	r2,2
 8001104:	d8800015 	stw	r2,0(sp)
 8001108:	00820074 	movhi	r2,2049
 800110c:	1095ea04 	addi	r2,r2,22440
 8001110:	d8800115 	stw	r2,4(sp)
 8001114:	a00d883a 	mov	r6,r20
 8001118:	800b883a 	mov	r5,r16
 800111c:	d9000204 	addi	r4,sp,8
 8001120:	8001db40 	call	8001db4 <__kernel_rem_pio2>
 8001124:	88000d0e 	bge	r17,zero,800115c <__ieee754_rem_pio2+0x240>
 8001128:	81000117 	ldw	r4,4(r16)
 800112c:	80c00317 	ldw	r3,12(r16)
 8001130:	0085c83a 	sub	r2,zero,r2
 8001134:	2120003c 	xorhi	r4,r4,32768
 8001138:	18e0003c 	xorhi	r3,r3,32768
 800113c:	81000115 	stw	r4,4(r16)
 8001140:	80c00315 	stw	r3,12(r16)
 8001144:	00000506 	br	800115c <__ieee754_rem_pio2+0x240>
 8001148:	31000015 	stw	r4,0(r6)
 800114c:	31400115 	stw	r5,4(r6)
 8001150:	30000215 	stw	zero,8(r6)
 8001154:	30000315 	stw	zero,12(r6)
 8001158:	0005883a 	mov	r2,zero
 800115c:	dfc01517 	ldw	ra,84(sp)
 8001160:	df001417 	ldw	fp,80(sp)
 8001164:	ddc01317 	ldw	r23,76(sp)
 8001168:	dd801217 	ldw	r22,72(sp)
 800116c:	dd401117 	ldw	r21,68(sp)
 8001170:	dd001017 	ldw	r20,64(sp)
 8001174:	dcc00f17 	ldw	r19,60(sp)
 8001178:	dc800e17 	ldw	r18,56(sp)
 800117c:	dc400d17 	ldw	r17,52(sp)
 8001180:	dc000c17 	ldw	r16,48(sp)
 8001184:	dec01604 	addi	sp,sp,88
 8001188:	f800283a 	ret
 800118c:	200d883a 	mov	r6,r4
 8001190:	280f883a 	mov	r7,r5
 8001194:	80063fc0 	call	80063fc <__subdf3>
 8001198:	80800215 	stw	r2,8(r16)
 800119c:	80800015 	stw	r2,0(r16)
 80011a0:	80c00315 	stw	r3,12(r16)
 80011a4:	80c00115 	stw	r3,4(r16)
 80011a8:	0005883a 	mov	r2,zero
 80011ac:	003feb06 	br	800115c <__alt_data_end+0xfc00115c>
 80011b0:	01cf7474 	movhi	r7,15825
 80011b4:	9009883a 	mov	r4,r18
 80011b8:	39ed1844 	addi	r7,r7,-19359
 80011bc:	01869834 	movhi	r6,6752
 80011c0:	180b883a 	mov	r5,r3
 80011c4:	80063fc0 	call	80063fc <__subdf3>
 80011c8:	018b80f4 	movhi	r6,11779
 80011cc:	01cee8f4 	movhi	r7,15267
 80011d0:	319c1cc4 	addi	r6,r6,28787
 80011d4:	39c66284 	addi	r7,r7,6538
 80011d8:	1009883a 	mov	r4,r2
 80011dc:	180b883a 	mov	r5,r3
 80011e0:	1025883a 	mov	r18,r2
 80011e4:	1823883a 	mov	r17,r3
 80011e8:	80063fc0 	call	80063fc <__subdf3>
 80011ec:	100d883a 	mov	r6,r2
 80011f0:	180f883a 	mov	r7,r3
 80011f4:	9009883a 	mov	r4,r18
 80011f8:	880b883a 	mov	r5,r17
 80011fc:	80800015 	stw	r2,0(r16)
 8001200:	80c00115 	stw	r3,4(r16)
 8001204:	80063fc0 	call	80063fc <__subdf3>
 8001208:	018b80f4 	movhi	r6,11779
 800120c:	01cee8f4 	movhi	r7,15267
 8001210:	319c1cc4 	addi	r6,r6,28787
 8001214:	39c66284 	addi	r7,r7,6538
 8001218:	003f7306 	br	8000fe8 <__alt_data_end+0xfc000fe8>
 800121c:	8002e100 	call	8002e10 <fabs>
 8001220:	019b72b4 	movhi	r6,28106
 8001224:	01cff934 	movhi	r7,16356
 8001228:	31b220c4 	addi	r6,r6,-14205
 800122c:	39d7cc04 	addi	r7,r7,24368
 8001230:	1009883a 	mov	r4,r2
 8001234:	180b883a 	mov	r5,r3
 8001238:	102d883a 	mov	r22,r2
 800123c:	182b883a 	mov	r21,r3
 8001240:	8005ce40 	call	8005ce4 <__muldf3>
 8001244:	000d883a 	mov	r6,zero
 8001248:	01cff834 	movhi	r7,16352
 800124c:	1009883a 	mov	r4,r2
 8001250:	180b883a 	mov	r5,r3
 8001254:	80048f80 	call	80048f8 <__adddf3>
 8001258:	180b883a 	mov	r5,r3
 800125c:	1009883a 	mov	r4,r2
 8001260:	8006cf80 	call	8006cf8 <__fixdfsi>
 8001264:	1009883a 	mov	r4,r2
 8001268:	1025883a 	mov	r18,r2
 800126c:	8006d780 	call	8006d78 <__floatsidf>
 8001270:	01cffe74 	movhi	r7,16377
 8001274:	39c87ec4 	addi	r7,r7,8699
 8001278:	01951034 	movhi	r6,21568
 800127c:	1009883a 	mov	r4,r2
 8001280:	180b883a 	mov	r5,r3
 8001284:	1029883a 	mov	r20,r2
 8001288:	1827883a 	mov	r19,r3
 800128c:	8005ce40 	call	8005ce4 <__muldf3>
 8001290:	b009883a 	mov	r4,r22
 8001294:	a80b883a 	mov	r5,r21
 8001298:	100d883a 	mov	r6,r2
 800129c:	180f883a 	mov	r7,r3
 80012a0:	80063fc0 	call	80063fc <__subdf3>
 80012a4:	018698b4 	movhi	r6,6754
 80012a8:	01cf7474 	movhi	r7,15825
 80012ac:	a009883a 	mov	r4,r20
 80012b0:	3198cc44 	addi	r6,r6,25393
 80012b4:	39ed1844 	addi	r7,r7,-19359
 80012b8:	980b883a 	mov	r5,r19
 80012bc:	1039883a 	mov	fp,r2
 80012c0:	d8c00815 	stw	r3,32(sp)
 80012c4:	8005ce40 	call	8005ce4 <__muldf3>
 80012c8:	010007c4 	movi	r4,31
 80012cc:	e017883a 	mov	r11,fp
 80012d0:	da800817 	ldw	r10,32(sp)
 80012d4:	102d883a 	mov	r22,r2
 80012d8:	182b883a 	mov	r21,r3
 80012dc:	24802816 	blt	r4,r18,8001380 <__ieee754_rem_pio2+0x464>
 80012e0:	913fffc4 	addi	r4,r18,-1
 80012e4:	2109883a 	add	r4,r4,r4
 80012e8:	01420074 	movhi	r5,2049
 80012ec:	2109883a 	add	r4,r4,r4
 80012f0:	2955ca04 	addi	r5,r5,22312
 80012f4:	2909883a 	add	r4,r5,r4
 80012f8:	21000017 	ldw	r4,0(r4)
 80012fc:	b9002026 	beq	r23,r4,8001380 <__ieee754_rem_pio2+0x464>
 8001300:	100d883a 	mov	r6,r2
 8001304:	180f883a 	mov	r7,r3
 8001308:	e009883a 	mov	r4,fp
 800130c:	500b883a 	mov	r5,r10
 8001310:	da800b15 	stw	r10,44(sp)
 8001314:	df000a15 	stw	fp,40(sp)
 8001318:	80063fc0 	call	80063fc <__subdf3>
 800131c:	da800b17 	ldw	r10,44(sp)
 8001320:	dac00a17 	ldw	r11,40(sp)
 8001324:	1019883a 	mov	r12,r2
 8001328:	1813883a 	mov	r9,r3
 800132c:	80800015 	stw	r2,0(r16)
 8001330:	80c00115 	stw	r3,4(r16)
 8001334:	600d883a 	mov	r6,r12
 8001338:	480f883a 	mov	r7,r9
 800133c:	5809883a 	mov	r4,r11
 8001340:	500b883a 	mov	r5,r10
 8001344:	da400b15 	stw	r9,44(sp)
 8001348:	db000a15 	stw	r12,40(sp)
 800134c:	80063fc0 	call	80063fc <__subdf3>
 8001350:	b00d883a 	mov	r6,r22
 8001354:	a80f883a 	mov	r7,r21
 8001358:	1009883a 	mov	r4,r2
 800135c:	180b883a 	mov	r5,r3
 8001360:	80063fc0 	call	80063fc <__subdf3>
 8001364:	80800215 	stw	r2,8(r16)
 8001368:	80c00315 	stw	r3,12(r16)
 800136c:	da400b17 	ldw	r9,44(sp)
 8001370:	db000a17 	ldw	r12,40(sp)
 8001374:	88009f16 	blt	r17,zero,80015f4 <__ieee754_rem_pio2+0x6d8>
 8001378:	9005883a 	mov	r2,r18
 800137c:	003f7706 	br	800115c <__alt_data_end+0xfc00115c>
 8001380:	d9400817 	ldw	r5,32(sp)
 8001384:	100d883a 	mov	r6,r2
 8001388:	180f883a 	mov	r7,r3
 800138c:	e009883a 	mov	r4,fp
 8001390:	da800b15 	stw	r10,44(sp)
 8001394:	dac00a15 	stw	r11,40(sp)
 8001398:	80063fc0 	call	80063fc <__subdf3>
 800139c:	1019883a 	mov	r12,r2
 80013a0:	1804d53a 	srli	r2,r3,20
 80013a4:	b811d53a 	srai	r8,r23,20
 80013a8:	1813883a 	mov	r9,r3
 80013ac:	1081ffcc 	andi	r2,r2,2047
 80013b0:	80c00115 	stw	r3,4(r16)
 80013b4:	83000015 	stw	r12,0(r16)
 80013b8:	4085c83a 	sub	r2,r8,r2
 80013bc:	00c00404 	movi	r3,16
 80013c0:	da800b17 	ldw	r10,44(sp)
 80013c4:	dac00a17 	ldw	r11,40(sp)
 80013c8:	18bfda0e 	bge	r3,r2,8001334 <__alt_data_end+0xfc001334>
 80013cc:	01cf7474 	movhi	r7,15825
 80013d0:	39ed1844 	addi	r7,r7,-19359
 80013d4:	01869834 	movhi	r6,6752
 80013d8:	a009883a 	mov	r4,r20
 80013dc:	980b883a 	mov	r5,r19
 80013e0:	da000a15 	stw	r8,40(sp)
 80013e4:	8005ce40 	call	8005ce4 <__muldf3>
 80013e8:	d9400817 	ldw	r5,32(sp)
 80013ec:	100d883a 	mov	r6,r2
 80013f0:	180f883a 	mov	r7,r3
 80013f4:	e009883a 	mov	r4,fp
 80013f8:	102d883a 	mov	r22,r2
 80013fc:	182b883a 	mov	r21,r3
 8001400:	80063fc0 	call	80063fc <__subdf3>
 8001404:	d9400817 	ldw	r5,32(sp)
 8001408:	100d883a 	mov	r6,r2
 800140c:	180f883a 	mov	r7,r3
 8001410:	e009883a 	mov	r4,fp
 8001414:	182f883a 	mov	r23,r3
 8001418:	d8800915 	stw	r2,36(sp)
 800141c:	80063fc0 	call	80063fc <__subdf3>
 8001420:	b00d883a 	mov	r6,r22
 8001424:	a80f883a 	mov	r7,r21
 8001428:	1009883a 	mov	r4,r2
 800142c:	180b883a 	mov	r5,r3
 8001430:	80063fc0 	call	80063fc <__subdf3>
 8001434:	018b80f4 	movhi	r6,11779
 8001438:	01cee8f4 	movhi	r7,15267
 800143c:	319c1cc4 	addi	r6,r6,28787
 8001440:	39c66284 	addi	r7,r7,6538
 8001444:	a009883a 	mov	r4,r20
 8001448:	980b883a 	mov	r5,r19
 800144c:	102d883a 	mov	r22,r2
 8001450:	182b883a 	mov	r21,r3
 8001454:	8005ce40 	call	8005ce4 <__muldf3>
 8001458:	b00d883a 	mov	r6,r22
 800145c:	a80f883a 	mov	r7,r21
 8001460:	1009883a 	mov	r4,r2
 8001464:	180b883a 	mov	r5,r3
 8001468:	80063fc0 	call	80063fc <__subdf3>
 800146c:	d9000917 	ldw	r4,36(sp)
 8001470:	100d883a 	mov	r6,r2
 8001474:	180f883a 	mov	r7,r3
 8001478:	b80b883a 	mov	r5,r23
 800147c:	102d883a 	mov	r22,r2
 8001480:	182b883a 	mov	r21,r3
 8001484:	80063fc0 	call	80063fc <__subdf3>
 8001488:	1019883a 	mov	r12,r2
 800148c:	1804d53a 	srli	r2,r3,20
 8001490:	da000a17 	ldw	r8,40(sp)
 8001494:	83000015 	stw	r12,0(r16)
 8001498:	1081ffcc 	andi	r2,r2,2047
 800149c:	4091c83a 	sub	r8,r8,r2
 80014a0:	80c00115 	stw	r3,4(r16)
 80014a4:	00800c44 	movi	r2,49
 80014a8:	1813883a 	mov	r9,r3
 80014ac:	1200730e 	bge	r2,r8,800167c <__ieee754_rem_pio2+0x760>
 80014b0:	01cee8f4 	movhi	r7,15267
 80014b4:	39c66284 	addi	r7,r7,6538
 80014b8:	018b8034 	movhi	r6,11776
 80014bc:	a009883a 	mov	r4,r20
 80014c0:	980b883a 	mov	r5,r19
 80014c4:	8005ce40 	call	8005ce4 <__muldf3>
 80014c8:	d9000917 	ldw	r4,36(sp)
 80014cc:	100d883a 	mov	r6,r2
 80014d0:	180f883a 	mov	r7,r3
 80014d4:	b80b883a 	mov	r5,r23
 80014d8:	102d883a 	mov	r22,r2
 80014dc:	182b883a 	mov	r21,r3
 80014e0:	80063fc0 	call	80063fc <__subdf3>
 80014e4:	d9000917 	ldw	r4,36(sp)
 80014e8:	100d883a 	mov	r6,r2
 80014ec:	180f883a 	mov	r7,r3
 80014f0:	b80b883a 	mov	r5,r23
 80014f4:	d8c00b15 	stw	r3,44(sp)
 80014f8:	d8800a15 	stw	r2,40(sp)
 80014fc:	80063fc0 	call	80063fc <__subdf3>
 8001500:	b00d883a 	mov	r6,r22
 8001504:	a80f883a 	mov	r7,r21
 8001508:	1009883a 	mov	r4,r2
 800150c:	180b883a 	mov	r5,r3
 8001510:	80063fc0 	call	80063fc <__subdf3>
 8001514:	01894834 	movhi	r6,9504
 8001518:	01ce5f34 	movhi	r7,14716
 800151c:	31927044 	addi	r6,r6,18881
 8001520:	39e0e684 	addi	r7,r7,-31846
 8001524:	a009883a 	mov	r4,r20
 8001528:	980b883a 	mov	r5,r19
 800152c:	102d883a 	mov	r22,r2
 8001530:	182b883a 	mov	r21,r3
 8001534:	8005ce40 	call	8005ce4 <__muldf3>
 8001538:	b00d883a 	mov	r6,r22
 800153c:	a80f883a 	mov	r7,r21
 8001540:	1009883a 	mov	r4,r2
 8001544:	180b883a 	mov	r5,r3
 8001548:	80063fc0 	call	80063fc <__subdf3>
 800154c:	dac00a17 	ldw	r11,40(sp)
 8001550:	da800b17 	ldw	r10,44(sp)
 8001554:	102d883a 	mov	r22,r2
 8001558:	182b883a 	mov	r21,r3
 800155c:	100d883a 	mov	r6,r2
 8001560:	180f883a 	mov	r7,r3
 8001564:	5809883a 	mov	r4,r11
 8001568:	500b883a 	mov	r5,r10
 800156c:	003f6a06 	br	8001318 <__alt_data_end+0xfc001318>
 8001570:	80048f80 	call	80048f8 <__adddf3>
 8001574:	1025883a 	mov	r18,r2
 8001578:	008ffe74 	movhi	r2,16377
 800157c:	10887ec4 	addi	r2,r2,8699
 8001580:	1823883a 	mov	r17,r3
 8001584:	b8802226 	beq	r23,r2,8001610 <__ieee754_rem_pio2+0x6f4>
 8001588:	018698b4 	movhi	r6,6754
 800158c:	01cf7474 	movhi	r7,15825
 8001590:	3198cc44 	addi	r6,r6,25393
 8001594:	39ed1844 	addi	r7,r7,-19359
 8001598:	9009883a 	mov	r4,r18
 800159c:	180b883a 	mov	r5,r3
 80015a0:	80048f80 	call	80048f8 <__adddf3>
 80015a4:	100d883a 	mov	r6,r2
 80015a8:	180f883a 	mov	r7,r3
 80015ac:	9009883a 	mov	r4,r18
 80015b0:	880b883a 	mov	r5,r17
 80015b4:	80800015 	stw	r2,0(r16)
 80015b8:	80c00115 	stw	r3,4(r16)
 80015bc:	80063fc0 	call	80063fc <__subdf3>
 80015c0:	018698b4 	movhi	r6,6754
 80015c4:	01cf7474 	movhi	r7,15825
 80015c8:	3198cc44 	addi	r6,r6,25393
 80015cc:	39ed1844 	addi	r7,r7,-19359
 80015d0:	1009883a 	mov	r4,r2
 80015d4:	180b883a 	mov	r5,r3
 80015d8:	80048f80 	call	80048f8 <__adddf3>
 80015dc:	80800215 	stw	r2,8(r16)
 80015e0:	80c00315 	stw	r3,12(r16)
 80015e4:	00bfffc4 	movi	r2,-1
 80015e8:	003edc06 	br	800115c <__alt_data_end+0xfc00115c>
 80015ec:	01c000c4 	movi	r7,3
 80015f0:	003ec306 	br	8001100 <__alt_data_end+0xfc001100>
 80015f4:	4a60003c 	xorhi	r9,r9,32768
 80015f8:	18e0003c 	xorhi	r3,r3,32768
 80015fc:	83000015 	stw	r12,0(r16)
 8001600:	82400115 	stw	r9,4(r16)
 8001604:	80c00315 	stw	r3,12(r16)
 8001608:	0485c83a 	sub	r2,zero,r18
 800160c:	003ed306 	br	800115c <__alt_data_end+0xfc00115c>
 8001610:	01cf7474 	movhi	r7,15825
 8001614:	9009883a 	mov	r4,r18
 8001618:	39ed1844 	addi	r7,r7,-19359
 800161c:	01869834 	movhi	r6,6752
 8001620:	180b883a 	mov	r5,r3
 8001624:	80048f80 	call	80048f8 <__adddf3>
 8001628:	018b80f4 	movhi	r6,11779
 800162c:	01cee8f4 	movhi	r7,15267
 8001630:	319c1cc4 	addi	r6,r6,28787
 8001634:	39c66284 	addi	r7,r7,6538
 8001638:	1009883a 	mov	r4,r2
 800163c:	180b883a 	mov	r5,r3
 8001640:	1025883a 	mov	r18,r2
 8001644:	1823883a 	mov	r17,r3
 8001648:	80048f80 	call	80048f8 <__adddf3>
 800164c:	100d883a 	mov	r6,r2
 8001650:	180f883a 	mov	r7,r3
 8001654:	9009883a 	mov	r4,r18
 8001658:	880b883a 	mov	r5,r17
 800165c:	80800015 	stw	r2,0(r16)
 8001660:	80c00115 	stw	r3,4(r16)
 8001664:	80063fc0 	call	80063fc <__subdf3>
 8001668:	018b80f4 	movhi	r6,11779
 800166c:	01cee8f4 	movhi	r7,15267
 8001670:	319c1cc4 	addi	r6,r6,28787
 8001674:	39c66284 	addi	r7,r7,6538
 8001678:	003fd506 	br	80015d0 <__alt_data_end+0xfc0015d0>
 800167c:	dac00917 	ldw	r11,36(sp)
 8001680:	b815883a 	mov	r10,r23
 8001684:	003f2b06 	br	8001334 <__alt_data_end+0xfc001334>

08001688 <__ieee754_sqrt>:
 8001688:	defffd04 	addi	sp,sp,-12
 800168c:	dc400115 	stw	r17,4(sp)
 8001690:	dc000015 	stw	r16,0(sp)
 8001694:	dfc00215 	stw	ra,8(sp)
 8001698:	28dffc2c 	andhi	r3,r5,32752
 800169c:	009ffc34 	movhi	r2,32752
 80016a0:	2821883a 	mov	r16,r5
 80016a4:	2023883a 	mov	r17,r4
 80016a8:	200d883a 	mov	r6,r4
 80016ac:	18807b26 	beq	r3,r2,800189c <__ieee754_sqrt+0x214>
 80016b0:	01405f0e 	bge	zero,r5,8001830 <__ieee754_sqrt+0x1a8>
 80016b4:	2815d53a 	srai	r10,r5,20
 80016b8:	50006a26 	beq	r10,zero,8001864 <__ieee754_sqrt+0x1dc>
 80016bc:	00c00434 	movhi	r3,16
 80016c0:	52bf0044 	addi	r10,r10,-1023
 80016c4:	18ffffc4 	addi	r3,r3,-1
 80016c8:	80c6703a 	and	r3,r16,r3
 80016cc:	5080004c 	andi	r2,r10,1
 80016d0:	18c00434 	orhi	r3,r3,16
 80016d4:	1000511e 	bne	r2,zero,800181c <__ieee754_sqrt+0x194>
 80016d8:	3004d7fa 	srli	r2,r6,31
 80016dc:	5015d07a 	srai	r10,r10,1
 80016e0:	18c7883a 	add	r3,r3,r3
 80016e4:	10c5883a 	add	r2,r2,r3
 80016e8:	01400584 	movi	r5,22
 80016ec:	3187883a 	add	r3,r6,r6
 80016f0:	0013883a 	mov	r9,zero
 80016f4:	000f883a 	mov	r7,zero
 80016f8:	01000834 	movhi	r4,32
 80016fc:	390d883a 	add	r6,r7,r4
 8001700:	1810d7fa 	srli	r8,r3,31
 8001704:	297fffc4 	addi	r5,r5,-1
 8001708:	11800316 	blt	r2,r6,8001718 <__ieee754_sqrt+0x90>
 800170c:	1185c83a 	sub	r2,r2,r6
 8001710:	310f883a 	add	r7,r6,r4
 8001714:	4913883a 	add	r9,r9,r4
 8001718:	1085883a 	add	r2,r2,r2
 800171c:	4085883a 	add	r2,r8,r2
 8001720:	18c7883a 	add	r3,r3,r3
 8001724:	2008d07a 	srli	r4,r4,1
 8001728:	283ff41e 	bne	r5,zero,80016fc <__alt_data_end+0xfc0016fc>
 800172c:	01200034 	movhi	r4,32768
 8001730:	01800804 	movi	r6,32
 8001734:	0011883a 	mov	r8,zero
 8001738:	0019883a 	mov	r12,zero
 800173c:	201b883a 	mov	r13,r4
 8001740:	00000806 	br	8001764 <__ieee754_sqrt+0xdc>
 8001744:	38801726 	beq	r7,r2,80017a4 <__ieee754_sqrt+0x11c>
 8001748:	180ad7fa 	srli	r5,r3,31
 800174c:	1085883a 	add	r2,r2,r2
 8001750:	31bfffc4 	addi	r6,r6,-1
 8001754:	2885883a 	add	r2,r5,r2
 8001758:	18c7883a 	add	r3,r3,r3
 800175c:	2008d07a 	srli	r4,r4,1
 8001760:	30001726 	beq	r6,zero,80017c0 <__ieee754_sqrt+0x138>
 8001764:	230b883a 	add	r5,r4,r12
 8001768:	38bff60e 	bge	r7,r2,8001744 <__alt_data_end+0xfc001744>
 800176c:	2ae0002c 	andhi	r11,r5,32768
 8001770:	2919883a 	add	r12,r5,r4
 8001774:	5b400826 	beq	r11,r13,8001798 <__ieee754_sqrt+0x110>
 8001778:	3817883a 	mov	r11,r7
 800177c:	11c5c83a 	sub	r2,r2,r7
 8001780:	1940012e 	bgeu	r3,r5,8001788 <__ieee754_sqrt+0x100>
 8001784:	10bfffc4 	addi	r2,r2,-1
 8001788:	1947c83a 	sub	r3,r3,r5
 800178c:	4111883a 	add	r8,r8,r4
 8001790:	580f883a 	mov	r7,r11
 8001794:	003fec06 	br	8001748 <__alt_data_end+0xfc001748>
 8001798:	603ff716 	blt	r12,zero,8001778 <__alt_data_end+0xfc001778>
 800179c:	3ac00044 	addi	r11,r7,1
 80017a0:	003ff606 	br	800177c <__alt_data_end+0xfc00177c>
 80017a4:	19401936 	bltu	r3,r5,800180c <__ieee754_sqrt+0x184>
 80017a8:	2ae0002c 	andhi	r11,r5,32768
 80017ac:	2919883a 	add	r12,r5,r4
 80017b0:	5b404526 	beq	r11,r13,80018c8 <__ieee754_sqrt+0x240>
 80017b4:	1017883a 	mov	r11,r2
 80017b8:	0005883a 	mov	r2,zero
 80017bc:	003ff206 	br	8001788 <__alt_data_end+0xfc001788>
 80017c0:	10c4b03a 	or	r2,r2,r3
 80017c4:	10000426 	beq	r2,zero,80017d8 <__ieee754_sqrt+0x150>
 80017c8:	00bfffc4 	movi	r2,-1
 80017cc:	40804026 	beq	r8,r2,80018d0 <__ieee754_sqrt+0x248>
 80017d0:	4080004c 	andi	r2,r8,1
 80017d4:	4091883a 	add	r8,r8,r2
 80017d8:	4004d07a 	srli	r2,r8,1
 80017dc:	4807d07a 	srai	r3,r9,1
 80017e0:	010ff834 	movhi	r4,16352
 80017e4:	4a40004c 	andi	r9,r9,1
 80017e8:	1909883a 	add	r4,r3,r4
 80017ec:	4800091e 	bne	r9,zero,8001814 <__ieee754_sqrt+0x18c>
 80017f0:	5006953a 	slli	r3,r10,20
 80017f4:	1907883a 	add	r3,r3,r4
 80017f8:	dfc00217 	ldw	ra,8(sp)
 80017fc:	dc400117 	ldw	r17,4(sp)
 8001800:	dc000017 	ldw	r16,0(sp)
 8001804:	dec00304 	addi	sp,sp,12
 8001808:	f800283a 	ret
 800180c:	3805883a 	mov	r2,r7
 8001810:	003fcd06 	br	8001748 <__alt_data_end+0xfc001748>
 8001814:	10a00034 	orhi	r2,r2,32768
 8001818:	003ff506 	br	80017f0 <__alt_data_end+0xfc0017f0>
 800181c:	3004d7fa 	srli	r2,r6,31
 8001820:	18c7883a 	add	r3,r3,r3
 8001824:	318d883a 	add	r6,r6,r6
 8001828:	10c7883a 	add	r3,r2,r3
 800182c:	003faa06 	br	80016d8 <__alt_data_end+0xfc0016d8>
 8001830:	00a00034 	movhi	r2,32768
 8001834:	10bfffc4 	addi	r2,r2,-1
 8001838:	2884703a 	and	r2,r5,r2
 800183c:	1104b03a 	or	r2,r2,r4
 8001840:	10001e26 	beq	r2,zero,80018bc <__ieee754_sqrt+0x234>
 8001844:	2800291e 	bne	r5,zero,80018ec <__ieee754_sqrt+0x264>
 8001848:	0015883a 	mov	r10,zero
 800184c:	3020d2fa 	srli	r16,r6,11
 8001850:	52bffac4 	addi	r10,r10,-21
 8001854:	300c957a 	slli	r6,r6,21
 8001858:	803ffc26 	beq	r16,zero,800184c <__alt_data_end+0xfc00184c>
 800185c:	8080042c 	andhi	r2,r16,16
 8001860:	10001e1e 	bne	r2,zero,80018dc <__ieee754_sqrt+0x254>
 8001864:	0005883a 	mov	r2,zero
 8001868:	00000106 	br	8001870 <__ieee754_sqrt+0x1e8>
 800186c:	1805883a 	mov	r2,r3
 8001870:	8421883a 	add	r16,r16,r16
 8001874:	8100042c 	andhi	r4,r16,16
 8001878:	10c00044 	addi	r3,r2,1
 800187c:	203ffb26 	beq	r4,zero,800186c <__alt_data_end+0xfc00186c>
 8001880:	01000804 	movi	r4,32
 8001884:	20c9c83a 	sub	r4,r4,r3
 8001888:	3108d83a 	srl	r4,r6,r4
 800188c:	5095c83a 	sub	r10,r10,r2
 8001890:	30cc983a 	sll	r6,r6,r3
 8001894:	2420b03a 	or	r16,r4,r16
 8001898:	003f8806 	br	80016bc <__alt_data_end+0xfc0016bc>
 800189c:	280f883a 	mov	r7,r5
 80018a0:	8005ce40 	call	8005ce4 <__muldf3>
 80018a4:	880d883a 	mov	r6,r17
 80018a8:	800f883a 	mov	r7,r16
 80018ac:	1009883a 	mov	r4,r2
 80018b0:	180b883a 	mov	r5,r3
 80018b4:	80048f80 	call	80048f8 <__adddf3>
 80018b8:	003fcf06 	br	80017f8 <__alt_data_end+0xfc0017f8>
 80018bc:	2005883a 	mov	r2,r4
 80018c0:	2807883a 	mov	r3,r5
 80018c4:	003fcc06 	br	80017f8 <__alt_data_end+0xfc0017f8>
 80018c8:	603fba16 	blt	r12,zero,80017b4 <__alt_data_end+0xfc0017b4>
 80018cc:	003fb306 	br	800179c <__alt_data_end+0xfc00179c>
 80018d0:	4a400044 	addi	r9,r9,1
 80018d4:	0005883a 	mov	r2,zero
 80018d8:	003fc006 	br	80017dc <__alt_data_end+0xfc0017dc>
 80018dc:	01000804 	movi	r4,32
 80018e0:	00bfffc4 	movi	r2,-1
 80018e4:	0007883a 	mov	r3,zero
 80018e8:	003fe706 	br	8001888 <__alt_data_end+0xfc001888>
 80018ec:	200d883a 	mov	r6,r4
 80018f0:	280f883a 	mov	r7,r5
 80018f4:	80063fc0 	call	80063fc <__subdf3>
 80018f8:	100d883a 	mov	r6,r2
 80018fc:	180f883a 	mov	r7,r3
 8001900:	1009883a 	mov	r4,r2
 8001904:	180b883a 	mov	r5,r3
 8001908:	80051a40 	call	80051a4 <__divdf3>
 800190c:	003fba06 	br	80017f8 <__alt_data_end+0xfc0017f8>

08001910 <__kernel_cos>:
 8001910:	defff304 	addi	sp,sp,-52
 8001914:	dc000315 	stw	r16,12(sp)
 8001918:	04200034 	movhi	r16,32768
 800191c:	843fffc4 	addi	r16,r16,-1
 8001920:	008f9034 	movhi	r2,15936
 8001924:	df000b15 	stw	fp,44(sp)
 8001928:	ddc00a15 	stw	r23,40(sp)
 800192c:	dd800915 	stw	r22,36(sp)
 8001930:	dcc00615 	stw	r19,24(sp)
 8001934:	dfc00c15 	stw	ra,48(sp)
 8001938:	dd400815 	stw	r21,32(sp)
 800193c:	dd000715 	stw	r20,28(sp)
 8001940:	dc800515 	stw	r18,20(sp)
 8001944:	dc400415 	stw	r17,16(sp)
 8001948:	2c20703a 	and	r16,r5,r16
 800194c:	10bfffc4 	addi	r2,r2,-1
 8001950:	2827883a 	mov	r19,r5
 8001954:	202d883a 	mov	r22,r4
 8001958:	302f883a 	mov	r23,r6
 800195c:	3839883a 	mov	fp,r7
 8001960:	14007516 	blt	r2,r16,8001b38 <__kernel_cos+0x228>
 8001964:	8006cf80 	call	8006cf8 <__fixdfsi>
 8001968:	10010f26 	beq	r2,zero,8001da8 <__kernel_cos+0x498>
 800196c:	b00d883a 	mov	r6,r22
 8001970:	980f883a 	mov	r7,r19
 8001974:	b009883a 	mov	r4,r22
 8001978:	980b883a 	mov	r5,r19
 800197c:	8005ce40 	call	8005ce4 <__muldf3>
 8001980:	01afa234 	movhi	r6,48776
 8001984:	01ef6a74 	movhi	r7,48553
 8001988:	318e3504 	addi	r6,r6,14548
 800198c:	39feba44 	addi	r7,r7,-1303
 8001990:	1009883a 	mov	r4,r2
 8001994:	180b883a 	mov	r5,r3
 8001998:	102b883a 	mov	r21,r2
 800199c:	1829883a 	mov	r20,r3
 80019a0:	8005ce40 	call	8005ce4 <__muldf3>
 80019a4:	01af6d74 	movhi	r6,48565
 80019a8:	01cf88b4 	movhi	r7,15906
 80019ac:	31ac7104 	addi	r6,r6,-20028
 80019b0:	39fba784 	addi	r7,r7,-4450
 80019b4:	1009883a 	mov	r4,r2
 80019b8:	180b883a 	mov	r5,r3
 80019bc:	80048f80 	call	80048f8 <__adddf3>
 80019c0:	a80d883a 	mov	r6,r21
 80019c4:	a00f883a 	mov	r7,r20
 80019c8:	1009883a 	mov	r4,r2
 80019cc:	180b883a 	mov	r5,r3
 80019d0:	8005ce40 	call	8005ce4 <__muldf3>
 80019d4:	01a02734 	movhi	r6,32924
 80019d8:	01cfa4b4 	movhi	r7,16018
 80019dc:	3194ab44 	addi	r6,r6,21165
 80019e0:	39df93c4 	addi	r7,r7,32335
 80019e4:	1009883a 	mov	r4,r2
 80019e8:	180b883a 	mov	r5,r3
 80019ec:	80063fc0 	call	80063fc <__subdf3>
 80019f0:	a80d883a 	mov	r6,r21
 80019f4:	a00f883a 	mov	r7,r20
 80019f8:	1009883a 	mov	r4,r2
 80019fc:	180b883a 	mov	r5,r3
 8001a00:	8005ce40 	call	8005ce4 <__muldf3>
 8001a04:	018672f4 	movhi	r6,6603
 8001a08:	01cfbeb4 	movhi	r7,16122
 8001a0c:	31856404 	addi	r6,r6,5520
 8001a10:	39c06804 	addi	r7,r7,416
 8001a14:	1009883a 	mov	r4,r2
 8001a18:	180b883a 	mov	r5,r3
 8001a1c:	80048f80 	call	80048f8 <__adddf3>
 8001a20:	a80d883a 	mov	r6,r21
 8001a24:	a00f883a 	mov	r7,r20
 8001a28:	1009883a 	mov	r4,r2
 8001a2c:	180b883a 	mov	r5,r3
 8001a30:	8005ce40 	call	8005ce4 <__muldf3>
 8001a34:	0185b074 	movhi	r6,5825
 8001a38:	01cfd5f4 	movhi	r7,16215
 8001a3c:	31945dc4 	addi	r6,r6,20855
 8001a40:	39f05b04 	addi	r7,r7,-16020
 8001a44:	1009883a 	mov	r4,r2
 8001a48:	180b883a 	mov	r5,r3
 8001a4c:	80063fc0 	call	80063fc <__subdf3>
 8001a50:	a80d883a 	mov	r6,r21
 8001a54:	a00f883a 	mov	r7,r20
 8001a58:	1009883a 	mov	r4,r2
 8001a5c:	180b883a 	mov	r5,r3
 8001a60:	8005ce40 	call	8005ce4 <__muldf3>
 8001a64:	01955574 	movhi	r6,21845
 8001a68:	01cfe974 	movhi	r7,16293
 8001a6c:	31955304 	addi	r6,r6,21836
 8001a70:	39d55544 	addi	r7,r7,21845
 8001a74:	1009883a 	mov	r4,r2
 8001a78:	180b883a 	mov	r5,r3
 8001a7c:	80048f80 	call	80048f8 <__adddf3>
 8001a80:	a80d883a 	mov	r6,r21
 8001a84:	a00f883a 	mov	r7,r20
 8001a88:	1009883a 	mov	r4,r2
 8001a8c:	180b883a 	mov	r5,r3
 8001a90:	8005ce40 	call	8005ce4 <__muldf3>
 8001a94:	1017883a 	mov	r11,r2
 8001a98:	1815883a 	mov	r10,r3
 8001a9c:	a809883a 	mov	r4,r21
 8001aa0:	a00b883a 	mov	r5,r20
 8001aa4:	000d883a 	mov	r6,zero
 8001aa8:	01cff834 	movhi	r7,16352
 8001aac:	da800215 	stw	r10,8(sp)
 8001ab0:	dac00115 	stw	r11,4(sp)
 8001ab4:	8005ce40 	call	8005ce4 <__muldf3>
 8001ab8:	dac00117 	ldw	r11,4(sp)
 8001abc:	da800217 	ldw	r10,8(sp)
 8001ac0:	a809883a 	mov	r4,r21
 8001ac4:	580d883a 	mov	r6,r11
 8001ac8:	500f883a 	mov	r7,r10
 8001acc:	a00b883a 	mov	r5,r20
 8001ad0:	1023883a 	mov	r17,r2
 8001ad4:	1821883a 	mov	r16,r3
 8001ad8:	8005ce40 	call	8005ce4 <__muldf3>
 8001adc:	b80d883a 	mov	r6,r23
 8001ae0:	e00f883a 	mov	r7,fp
 8001ae4:	b009883a 	mov	r4,r22
 8001ae8:	980b883a 	mov	r5,r19
 8001aec:	1029883a 	mov	r20,r2
 8001af0:	1825883a 	mov	r18,r3
 8001af4:	8005ce40 	call	8005ce4 <__muldf3>
 8001af8:	a009883a 	mov	r4,r20
 8001afc:	900b883a 	mov	r5,r18
 8001b00:	100d883a 	mov	r6,r2
 8001b04:	180f883a 	mov	r7,r3
 8001b08:	80063fc0 	call	80063fc <__subdf3>
 8001b0c:	8809883a 	mov	r4,r17
 8001b10:	800b883a 	mov	r5,r16
 8001b14:	100d883a 	mov	r6,r2
 8001b18:	180f883a 	mov	r7,r3
 8001b1c:	80063fc0 	call	80063fc <__subdf3>
 8001b20:	100d883a 	mov	r6,r2
 8001b24:	180f883a 	mov	r7,r3
 8001b28:	0009883a 	mov	r4,zero
 8001b2c:	014ffc34 	movhi	r5,16368
 8001b30:	80063fc0 	call	80063fc <__subdf3>
 8001b34:	00008b06 	br	8001d64 <__kernel_cos+0x454>
 8001b38:	200d883a 	mov	r6,r4
 8001b3c:	280f883a 	mov	r7,r5
 8001b40:	8005ce40 	call	8005ce4 <__muldf3>
 8001b44:	01afa234 	movhi	r6,48776
 8001b48:	01ef6a74 	movhi	r7,48553
 8001b4c:	318e3504 	addi	r6,r6,14548
 8001b50:	39feba44 	addi	r7,r7,-1303
 8001b54:	1009883a 	mov	r4,r2
 8001b58:	180b883a 	mov	r5,r3
 8001b5c:	1025883a 	mov	r18,r2
 8001b60:	1823883a 	mov	r17,r3
 8001b64:	8005ce40 	call	8005ce4 <__muldf3>
 8001b68:	01af6d74 	movhi	r6,48565
 8001b6c:	01cf88b4 	movhi	r7,15906
 8001b70:	31ac7104 	addi	r6,r6,-20028
 8001b74:	39fba784 	addi	r7,r7,-4450
 8001b78:	1009883a 	mov	r4,r2
 8001b7c:	180b883a 	mov	r5,r3
 8001b80:	80048f80 	call	80048f8 <__adddf3>
 8001b84:	900d883a 	mov	r6,r18
 8001b88:	880f883a 	mov	r7,r17
 8001b8c:	1009883a 	mov	r4,r2
 8001b90:	180b883a 	mov	r5,r3
 8001b94:	8005ce40 	call	8005ce4 <__muldf3>
 8001b98:	01a02734 	movhi	r6,32924
 8001b9c:	01cfa4b4 	movhi	r7,16018
 8001ba0:	3194ab44 	addi	r6,r6,21165
 8001ba4:	39df93c4 	addi	r7,r7,32335
 8001ba8:	1009883a 	mov	r4,r2
 8001bac:	180b883a 	mov	r5,r3
 8001bb0:	80063fc0 	call	80063fc <__subdf3>
 8001bb4:	900d883a 	mov	r6,r18
 8001bb8:	880f883a 	mov	r7,r17
 8001bbc:	1009883a 	mov	r4,r2
 8001bc0:	180b883a 	mov	r5,r3
 8001bc4:	8005ce40 	call	8005ce4 <__muldf3>
 8001bc8:	018672f4 	movhi	r6,6603
 8001bcc:	01cfbeb4 	movhi	r7,16122
 8001bd0:	31856404 	addi	r6,r6,5520
 8001bd4:	39c06804 	addi	r7,r7,416
 8001bd8:	1009883a 	mov	r4,r2
 8001bdc:	180b883a 	mov	r5,r3
 8001be0:	80048f80 	call	80048f8 <__adddf3>
 8001be4:	900d883a 	mov	r6,r18
 8001be8:	880f883a 	mov	r7,r17
 8001bec:	1009883a 	mov	r4,r2
 8001bf0:	180b883a 	mov	r5,r3
 8001bf4:	8005ce40 	call	8005ce4 <__muldf3>
 8001bf8:	0185b074 	movhi	r6,5825
 8001bfc:	01cfd5f4 	movhi	r7,16215
 8001c00:	31945dc4 	addi	r6,r6,20855
 8001c04:	39f05b04 	addi	r7,r7,-16020
 8001c08:	1009883a 	mov	r4,r2
 8001c0c:	180b883a 	mov	r5,r3
 8001c10:	80063fc0 	call	80063fc <__subdf3>
 8001c14:	900d883a 	mov	r6,r18
 8001c18:	880f883a 	mov	r7,r17
 8001c1c:	1009883a 	mov	r4,r2
 8001c20:	180b883a 	mov	r5,r3
 8001c24:	8005ce40 	call	8005ce4 <__muldf3>
 8001c28:	01955574 	movhi	r6,21845
 8001c2c:	01cfe974 	movhi	r7,16293
 8001c30:	31955304 	addi	r6,r6,21836
 8001c34:	39d55544 	addi	r7,r7,21845
 8001c38:	1009883a 	mov	r4,r2
 8001c3c:	180b883a 	mov	r5,r3
 8001c40:	80048f80 	call	80048f8 <__adddf3>
 8001c44:	900d883a 	mov	r6,r18
 8001c48:	880f883a 	mov	r7,r17
 8001c4c:	1009883a 	mov	r4,r2
 8001c50:	180b883a 	mov	r5,r3
 8001c54:	8005ce40 	call	8005ce4 <__muldf3>
 8001c58:	1013883a 	mov	r9,r2
 8001c5c:	1017883a 	mov	r11,r2
 8001c60:	008ff4f4 	movhi	r2,16339
 8001c64:	108ccc84 	addi	r2,r2,13106
 8001c68:	1811883a 	mov	r8,r3
 8001c6c:	902b883a 	mov	r21,r18
 8001c70:	8829883a 	mov	r20,r17
 8001c74:	1815883a 	mov	r10,r3
 8001c78:	143f880e 	bge	r2,r16,8001a9c <__alt_data_end+0xfc001a9c>
 8001c7c:	008ffa74 	movhi	r2,16361
 8001c80:	14004416 	blt	r2,r16,8001d94 <__kernel_cos+0x484>
 8001c84:	00bff834 	movhi	r2,65504
 8001c88:	80a1883a 	add	r16,r16,r2
 8001c8c:	000d883a 	mov	r6,zero
 8001c90:	800f883a 	mov	r7,r16
 8001c94:	0009883a 	mov	r4,zero
 8001c98:	014ffc34 	movhi	r5,16368
 8001c9c:	da400115 	stw	r9,4(sp)
 8001ca0:	d8c00215 	stw	r3,8(sp)
 8001ca4:	80063fc0 	call	80063fc <__subdf3>
 8001ca8:	da000217 	ldw	r8,8(sp)
 8001cac:	da400117 	ldw	r9,4(sp)
 8001cb0:	102b883a 	mov	r21,r2
 8001cb4:	d8c00015 	stw	r3,0(sp)
 8001cb8:	9009883a 	mov	r4,r18
 8001cbc:	880b883a 	mov	r5,r17
 8001cc0:	000d883a 	mov	r6,zero
 8001cc4:	01cff834 	movhi	r7,16352
 8001cc8:	da000215 	stw	r8,8(sp)
 8001ccc:	da400115 	stw	r9,4(sp)
 8001cd0:	8005ce40 	call	8005ce4 <__muldf3>
 8001cd4:	800f883a 	mov	r7,r16
 8001cd8:	000d883a 	mov	r6,zero
 8001cdc:	1009883a 	mov	r4,r2
 8001ce0:	180b883a 	mov	r5,r3
 8001ce4:	80063fc0 	call	80063fc <__subdf3>
 8001ce8:	da400117 	ldw	r9,4(sp)
 8001cec:	da000217 	ldw	r8,8(sp)
 8001cf0:	9009883a 	mov	r4,r18
 8001cf4:	480d883a 	mov	r6,r9
 8001cf8:	400f883a 	mov	r7,r8
 8001cfc:	880b883a 	mov	r5,r17
 8001d00:	1029883a 	mov	r20,r2
 8001d04:	1821883a 	mov	r16,r3
 8001d08:	8005ce40 	call	8005ce4 <__muldf3>
 8001d0c:	b80d883a 	mov	r6,r23
 8001d10:	e00f883a 	mov	r7,fp
 8001d14:	b009883a 	mov	r4,r22
 8001d18:	980b883a 	mov	r5,r19
 8001d1c:	1025883a 	mov	r18,r2
 8001d20:	1823883a 	mov	r17,r3
 8001d24:	8005ce40 	call	8005ce4 <__muldf3>
 8001d28:	100d883a 	mov	r6,r2
 8001d2c:	180f883a 	mov	r7,r3
 8001d30:	9009883a 	mov	r4,r18
 8001d34:	880b883a 	mov	r5,r17
 8001d38:	80063fc0 	call	80063fc <__subdf3>
 8001d3c:	100d883a 	mov	r6,r2
 8001d40:	180f883a 	mov	r7,r3
 8001d44:	a009883a 	mov	r4,r20
 8001d48:	800b883a 	mov	r5,r16
 8001d4c:	80063fc0 	call	80063fc <__subdf3>
 8001d50:	d9400017 	ldw	r5,0(sp)
 8001d54:	100d883a 	mov	r6,r2
 8001d58:	180f883a 	mov	r7,r3
 8001d5c:	a809883a 	mov	r4,r21
 8001d60:	80063fc0 	call	80063fc <__subdf3>
 8001d64:	dfc00c17 	ldw	ra,48(sp)
 8001d68:	df000b17 	ldw	fp,44(sp)
 8001d6c:	ddc00a17 	ldw	r23,40(sp)
 8001d70:	dd800917 	ldw	r22,36(sp)
 8001d74:	dd400817 	ldw	r21,32(sp)
 8001d78:	dd000717 	ldw	r20,28(sp)
 8001d7c:	dcc00617 	ldw	r19,24(sp)
 8001d80:	dc800517 	ldw	r18,20(sp)
 8001d84:	dc400417 	ldw	r17,16(sp)
 8001d88:	dc000317 	ldw	r16,12(sp)
 8001d8c:	dec00d04 	addi	sp,sp,52
 8001d90:	f800283a 	ret
 8001d94:	008ff9f4 	movhi	r2,16359
 8001d98:	002b883a 	mov	r21,zero
 8001d9c:	d8800015 	stw	r2,0(sp)
 8001da0:	040ff4b4 	movhi	r16,16338
 8001da4:	003fc406 	br	8001cb8 <__alt_data_end+0xfc001cb8>
 8001da8:	0005883a 	mov	r2,zero
 8001dac:	00cffc34 	movhi	r3,16368
 8001db0:	003fec06 	br	8001d64 <__alt_data_end+0xfc001d64>

08001db4 <__kernel_rem_pio2>:
 8001db4:	deff5a04 	addi	sp,sp,-664
 8001db8:	da00a617 	ldw	r8,664(sp)
 8001dbc:	00c20074 	movhi	r3,2049
 8001dc0:	18d63c04 	addi	r3,r3,22768
 8001dc4:	4205883a 	add	r2,r8,r8
 8001dc8:	1085883a 	add	r2,r2,r2
 8001dcc:	1885883a 	add	r2,r3,r2
 8001dd0:	d9008e15 	stw	r4,568(sp)
 8001dd4:	d9408f15 	stw	r5,572(sp)
 8001dd8:	313fff44 	addi	r4,r6,-3
 8001ddc:	01400604 	movi	r5,24
 8001de0:	dd80a215 	stw	r22,648(sp)
 8001de4:	dc009c15 	stw	r16,624(sp)
 8001de8:	dfc0a515 	stw	ra,660(sp)
 8001dec:	df00a415 	stw	fp,656(sp)
 8001df0:	ddc0a315 	stw	r23,652(sp)
 8001df4:	dd40a115 	stw	r21,644(sp)
 8001df8:	dd00a015 	stw	r20,640(sp)
 8001dfc:	dcc09f15 	stw	r19,636(sp)
 8001e00:	dc809e15 	stw	r18,632(sp)
 8001e04:	dc409d15 	stw	r17,628(sp)
 8001e08:	3021883a 	mov	r16,r6
 8001e0c:	d9c09315 	stw	r7,588(sp)
 8001e10:	15800017 	ldw	r22,0(r2)
 8001e14:	80032440 	call	8003244 <__divsi3>
 8001e18:	da009317 	ldw	r8,588(sp)
 8001e1c:	d8809215 	stw	r2,584(sp)
 8001e20:	423fffc4 	addi	r8,r8,-1
 8001e24:	da008d15 	stw	r8,564(sp)
 8001e28:	10033b16 	blt	r2,zero,8002b18 <__kernel_rem_pio2+0xd64>
 8001e2c:	da009217 	ldw	r8,584(sp)
 8001e30:	d9009217 	ldw	r4,584(sp)
 8001e34:	42000044 	addi	r8,r8,1
 8001e38:	40fffa24 	muli	r3,r8,-24
 8001e3c:	da009515 	stw	r8,596(sp)
 8001e40:	da008d17 	ldw	r8,564(sp)
 8001e44:	1c07883a 	add	r3,r3,r16
 8001e48:	d8c09015 	stw	r3,576(sp)
 8001e4c:	b205883a 	add	r2,r22,r8
 8001e50:	2223c83a 	sub	r17,r4,r8
 8001e54:	10001016 	blt	r2,zero,8001e98 <__kernel_rem_pio2+0xe4>
 8001e58:	da00a717 	ldw	r8,668(sp)
 8001e5c:	8c65883a 	add	r18,r17,r17
 8001e60:	94a5883a 	add	r18,r18,r18
 8001e64:	1445883a 	add	r2,r2,r17
 8001e68:	dcc05004 	addi	r19,sp,320
 8001e6c:	44a5883a 	add	r18,r8,r18
 8001e70:	14000044 	addi	r16,r2,1
 8001e74:	88015316 	blt	r17,zero,80023c4 <__kernel_rem_pio2+0x610>
 8001e78:	91000017 	ldw	r4,0(r18)
 8001e7c:	8006d780 	call	8006d78 <__floatsidf>
 8001e80:	98800015 	stw	r2,0(r19)
 8001e84:	98c00115 	stw	r3,4(r19)
 8001e88:	8c400044 	addi	r17,r17,1
 8001e8c:	9cc00204 	addi	r19,r19,8
 8001e90:	94800104 	addi	r18,r18,4
 8001e94:	8c3ff71e 	bne	r17,r16,8001e74 <__alt_data_end+0xfc001e74>
 8001e98:	b0002816 	blt	r22,zero,8001f3c <__kernel_rem_pio2+0x188>
 8001e9c:	da008d17 	ldw	r8,564(sp)
 8001ea0:	b4c00044 	addi	r19,r22,1
 8001ea4:	982690fa 	slli	r19,r19,3
 8001ea8:	402490fa 	slli	r18,r8,3
 8001eac:	da008e17 	ldw	r8,568(sp)
 8001eb0:	d8805004 	addi	r2,sp,320
 8001eb4:	94000204 	addi	r16,r18,8
 8001eb8:	d823883a 	mov	r17,sp
 8001ebc:	14a5883a 	add	r18,r2,r18
 8001ec0:	dcef883a 	add	r23,sp,r19
 8001ec4:	4421883a 	add	r16,r8,r16
 8001ec8:	dd809115 	stw	r22,580(sp)
 8001ecc:	4039883a 	mov	fp,r8
 8001ed0:	da008d17 	ldw	r8,564(sp)
 8001ed4:	40016016 	blt	r8,zero,8002458 <__kernel_rem_pio2+0x6a4>
 8001ed8:	e027883a 	mov	r19,fp
 8001edc:	9029883a 	mov	r20,r18
 8001ee0:	002d883a 	mov	r22,zero
 8001ee4:	002b883a 	mov	r21,zero
 8001ee8:	a1800017 	ldw	r6,0(r20)
 8001eec:	a1c00117 	ldw	r7,4(r20)
 8001ef0:	99000017 	ldw	r4,0(r19)
 8001ef4:	99400117 	ldw	r5,4(r19)
 8001ef8:	9cc00204 	addi	r19,r19,8
 8001efc:	a53ffe04 	addi	r20,r20,-8
 8001f00:	8005ce40 	call	8005ce4 <__muldf3>
 8001f04:	b009883a 	mov	r4,r22
 8001f08:	a80b883a 	mov	r5,r21
 8001f0c:	100d883a 	mov	r6,r2
 8001f10:	180f883a 	mov	r7,r3
 8001f14:	80048f80 	call	80048f8 <__adddf3>
 8001f18:	102d883a 	mov	r22,r2
 8001f1c:	182b883a 	mov	r21,r3
 8001f20:	9c3ff11e 	bne	r19,r16,8001ee8 <__alt_data_end+0xfc001ee8>
 8001f24:	8d800015 	stw	r22,0(r17)
 8001f28:	8d400115 	stw	r21,4(r17)
 8001f2c:	8c400204 	addi	r17,r17,8
 8001f30:	94800204 	addi	r18,r18,8
 8001f34:	8dffe61e 	bne	r17,r23,8001ed0 <__alt_data_end+0xfc001ed0>
 8001f38:	dd809117 	ldw	r22,580(sp)
 8001f3c:	00d00034 	movhi	r3,16384
 8001f40:	da009317 	ldw	r8,588(sp)
 8001f44:	18ffff84 	addi	r3,r3,-2
 8001f48:	b0c7883a 	add	r3,r22,r3
 8001f4c:	18c7883a 	add	r3,r3,r3
 8001f50:	402090fa 	slli	r16,r8,3
 8001f54:	18c7883a 	add	r3,r3,r3
 8001f58:	da007804 	addi	r8,sp,480
 8001f5c:	40d1883a 	add	r8,r8,r3
 8001f60:	b0bfffc4 	addi	r2,r22,-1
 8001f64:	da009615 	stw	r8,600(sp)
 8001f68:	da008e17 	ldw	r8,568(sp)
 8001f6c:	1085883a 	add	r2,r2,r2
 8001f70:	1085883a 	add	r2,r2,r2
 8001f74:	19000104 	addi	r4,r3,4
 8001f78:	d885883a 	add	r2,sp,r2
 8001f7c:	4421883a 	add	r16,r8,r16
 8001f80:	da007804 	addi	r8,sp,480
 8001f84:	4111883a 	add	r8,r8,r4
 8001f88:	10807804 	addi	r2,r2,480
 8001f8c:	da009715 	stw	r8,604(sp)
 8001f90:	b025883a 	mov	r18,r22
 8001f94:	d8809815 	stw	r2,608(sp)
 8001f98:	dd809415 	stw	r22,592(sp)
 8001f9c:	900490fa 	slli	r2,r18,3
 8001fa0:	d885883a 	add	r2,sp,r2
 8001fa4:	17000017 	ldw	fp,0(r2)
 8001fa8:	15400117 	ldw	r21,4(r2)
 8001fac:	04802b0e 	bge	zero,r18,800205c <__kernel_rem_pio2+0x2a8>
 8001fb0:	00880034 	movhi	r2,8192
 8001fb4:	10bfffc4 	addi	r2,r2,-1
 8001fb8:	90a9883a 	add	r20,r18,r2
 8001fbc:	a02890fa 	slli	r20,r20,3
 8001fc0:	dc407804 	addi	r17,sp,480
 8001fc4:	dcfffe04 	addi	r19,sp,-8
 8001fc8:	dd29883a 	add	r20,sp,r20
 8001fcc:	000d883a 	mov	r6,zero
 8001fd0:	01cf9c34 	movhi	r7,15984
 8001fd4:	e009883a 	mov	r4,fp
 8001fd8:	a80b883a 	mov	r5,r21
 8001fdc:	8005ce40 	call	8005ce4 <__muldf3>
 8001fe0:	180b883a 	mov	r5,r3
 8001fe4:	1009883a 	mov	r4,r2
 8001fe8:	8006cf80 	call	8006cf8 <__fixdfsi>
 8001fec:	1009883a 	mov	r4,r2
 8001ff0:	8006d780 	call	8006d78 <__floatsidf>
 8001ff4:	000d883a 	mov	r6,zero
 8001ff8:	01d05c34 	movhi	r7,16752
 8001ffc:	1009883a 	mov	r4,r2
 8002000:	180b883a 	mov	r5,r3
 8002004:	102f883a 	mov	r23,r2
 8002008:	182d883a 	mov	r22,r3
 800200c:	8005ce40 	call	8005ce4 <__muldf3>
 8002010:	100d883a 	mov	r6,r2
 8002014:	180f883a 	mov	r7,r3
 8002018:	e009883a 	mov	r4,fp
 800201c:	a80b883a 	mov	r5,r21
 8002020:	80063fc0 	call	80063fc <__subdf3>
 8002024:	180b883a 	mov	r5,r3
 8002028:	1009883a 	mov	r4,r2
 800202c:	8006cf80 	call	8006cf8 <__fixdfsi>
 8002030:	a1800017 	ldw	r6,0(r20)
 8002034:	a1c00117 	ldw	r7,4(r20)
 8002038:	88800015 	stw	r2,0(r17)
 800203c:	b809883a 	mov	r4,r23
 8002040:	b00b883a 	mov	r5,r22
 8002044:	80048f80 	call	80048f8 <__adddf3>
 8002048:	a53ffe04 	addi	r20,r20,-8
 800204c:	1039883a 	mov	fp,r2
 8002050:	182b883a 	mov	r21,r3
 8002054:	8c400104 	addi	r17,r17,4
 8002058:	a4ffdc1e 	bne	r20,r19,8001fcc <__alt_data_end+0xfc001fcc>
 800205c:	d9809017 	ldw	r6,576(sp)
 8002060:	a80b883a 	mov	r5,r21
 8002064:	e009883a 	mov	r4,fp
 8002068:	800308c0 	call	800308c <scalbn>
 800206c:	000d883a 	mov	r6,zero
 8002070:	01cff034 	movhi	r7,16320
 8002074:	1009883a 	mov	r4,r2
 8002078:	180b883a 	mov	r5,r3
 800207c:	1027883a 	mov	r19,r2
 8002080:	1823883a 	mov	r17,r3
 8002084:	8005ce40 	call	8005ce4 <__muldf3>
 8002088:	1009883a 	mov	r4,r2
 800208c:	180b883a 	mov	r5,r3
 8002090:	8002e240 	call	8002e24 <floor>
 8002094:	000d883a 	mov	r6,zero
 8002098:	01d00834 	movhi	r7,16416
 800209c:	1009883a 	mov	r4,r2
 80020a0:	180b883a 	mov	r5,r3
 80020a4:	8005ce40 	call	8005ce4 <__muldf3>
 80020a8:	100d883a 	mov	r6,r2
 80020ac:	180f883a 	mov	r7,r3
 80020b0:	9809883a 	mov	r4,r19
 80020b4:	880b883a 	mov	r5,r17
 80020b8:	80063fc0 	call	80063fc <__subdf3>
 80020bc:	180b883a 	mov	r5,r3
 80020c0:	1009883a 	mov	r4,r2
 80020c4:	1827883a 	mov	r19,r3
 80020c8:	1029883a 	mov	r20,r2
 80020cc:	8006cf80 	call	8006cf8 <__fixdfsi>
 80020d0:	1009883a 	mov	r4,r2
 80020d4:	1023883a 	mov	r17,r2
 80020d8:	8006d780 	call	8006d78 <__floatsidf>
 80020dc:	a009883a 	mov	r4,r20
 80020e0:	100d883a 	mov	r6,r2
 80020e4:	180f883a 	mov	r7,r3
 80020e8:	980b883a 	mov	r5,r19
 80020ec:	80063fc0 	call	80063fc <__subdf3>
 80020f0:	d9009017 	ldw	r4,576(sp)
 80020f4:	1013883a 	mov	r9,r2
 80020f8:	102b883a 	mov	r21,r2
 80020fc:	1811883a 	mov	r8,r3
 8002100:	0100b30e 	bge	zero,r4,80023d0 <__kernel_rem_pio2+0x61c>
 8002104:	90bfffc4 	addi	r2,r18,-1
 8002108:	1085883a 	add	r2,r2,r2
 800210c:	1085883a 	add	r2,r2,r2
 8002110:	d885883a 	add	r2,sp,r2
 8002114:	10807804 	addi	r2,r2,480
 8002118:	d9809017 	ldw	r6,576(sp)
 800211c:	11400017 	ldw	r5,0(r2)
 8002120:	01000604 	movi	r4,24
 8002124:	2189c83a 	sub	r4,r4,r6
 8002128:	290dd83a 	sra	r6,r5,r4
 800212c:	d9c09017 	ldw	r7,576(sp)
 8002130:	04c005c4 	movi	r19,23
 8002134:	3108983a 	sll	r4,r6,r4
 8002138:	99e7c83a 	sub	r19,r19,r7
 800213c:	89a3883a 	add	r17,r17,r6
 8002140:	2909c83a 	sub	r4,r5,r4
 8002144:	24e7d83a 	sra	r19,r4,r19
 8002148:	11000015 	stw	r4,0(r2)
 800214c:	04c02a0e 	bge	zero,r19,80021f8 <__kernel_rem_pio2+0x444>
 8002150:	8c400044 	addi	r17,r17,1
 8002154:	0481570e 	bge	zero,r18,80026b4 <__kernel_rem_pio2+0x900>
 8002158:	02804034 	movhi	r10,256
 800215c:	52bfffc4 	addi	r10,r10,-1
 8002160:	d8807804 	addi	r2,sp,480
 8002164:	000b883a 	mov	r5,zero
 8002168:	0029883a 	mov	r20,zero
 800216c:	01c04034 	movhi	r7,256
 8002170:	00000706 	br	8002190 <__kernel_rem_pio2+0x3dc>
 8002174:	390dc83a 	sub	r6,r7,r4
 8002178:	20000226 	beq	r4,zero,8002184 <__kernel_rem_pio2+0x3d0>
 800217c:	11800015 	stw	r6,0(r2)
 8002180:	05000044 	movi	r20,1
 8002184:	29400044 	addi	r5,r5,1
 8002188:	10800104 	addi	r2,r2,4
 800218c:	2c80080e 	bge	r5,r18,80021b0 <__kernel_rem_pio2+0x3fc>
 8002190:	11000017 	ldw	r4,0(r2)
 8002194:	a03ff726 	beq	r20,zero,8002174 <__alt_data_end+0xfc002174>
 8002198:	5109c83a 	sub	r4,r10,r4
 800219c:	11000015 	stw	r4,0(r2)
 80021a0:	29400044 	addi	r5,r5,1
 80021a4:	05000044 	movi	r20,1
 80021a8:	10800104 	addi	r2,r2,4
 80021ac:	2cbff816 	blt	r5,r18,8002190 <__alt_data_end+0xfc002190>
 80021b0:	d9009017 	ldw	r4,576(sp)
 80021b4:	01000e0e 	bge	zero,r4,80021f0 <__kernel_rem_pio2+0x43c>
 80021b8:	00800044 	movi	r2,1
 80021bc:	20808d26 	beq	r4,r2,80023f4 <__kernel_rem_pio2+0x640>
 80021c0:	00800084 	movi	r2,2
 80021c4:	20800a1e 	bne	r4,r2,80021f0 <__kernel_rem_pio2+0x43c>
 80021c8:	90bfffc4 	addi	r2,r18,-1
 80021cc:	1085883a 	add	r2,r2,r2
 80021d0:	1085883a 	add	r2,r2,r2
 80021d4:	d885883a 	add	r2,sp,r2
 80021d8:	10807804 	addi	r2,r2,480
 80021dc:	11400017 	ldw	r5,0(r2)
 80021e0:	01001034 	movhi	r4,64
 80021e4:	213fffc4 	addi	r4,r4,-1
 80021e8:	2908703a 	and	r4,r5,r4
 80021ec:	11000015 	stw	r4,0(r2)
 80021f0:	00800084 	movi	r2,2
 80021f4:	98805d26 	beq	r19,r2,800236c <__kernel_rem_pio2+0x5b8>
 80021f8:	400b883a 	mov	r5,r8
 80021fc:	000d883a 	mov	r6,zero
 8002200:	000f883a 	mov	r7,zero
 8002204:	a809883a 	mov	r4,r21
 8002208:	da009b15 	stw	r8,620(sp)
 800220c:	8005a8c0 	call	8005a8c <__eqdf2>
 8002210:	da009b17 	ldw	r8,620(sp)
 8002214:	10012b1e 	bne	r2,zero,80026c4 <__kernel_rem_pio2+0x910>
 8002218:	da009417 	ldw	r8,592(sp)
 800221c:	917fffc4 	addi	r5,r18,-1
 8002220:	2a000e16 	blt	r5,r8,800225c <__kernel_rem_pio2+0x4a8>
 8002224:	00900034 	movhi	r2,16384
 8002228:	10bfffc4 	addi	r2,r2,-1
 800222c:	9085883a 	add	r2,r18,r2
 8002230:	1085883a 	add	r2,r2,r2
 8002234:	d9809717 	ldw	r6,604(sp)
 8002238:	1085883a 	add	r2,r2,r2
 800223c:	d9007804 	addi	r4,sp,480
 8002240:	0007883a 	mov	r3,zero
 8002244:	2085883a 	add	r2,r4,r2
 8002248:	11000017 	ldw	r4,0(r2)
 800224c:	10bfff04 	addi	r2,r2,-4
 8002250:	1906b03a 	or	r3,r3,r4
 8002254:	11bffc1e 	bne	r2,r6,8002248 <__alt_data_end+0xfc002248>
 8002258:	1800821e 	bne	r3,zero,8002464 <__kernel_rem_pio2+0x6b0>
 800225c:	da009817 	ldw	r8,608(sp)
 8002260:	40800017 	ldw	r2,0(r8)
 8002264:	1001151e 	bne	r2,zero,80026bc <__kernel_rem_pio2+0x908>
 8002268:	d8809617 	ldw	r2,600(sp)
 800226c:	05000044 	movi	r20,1
 8002270:	10bfff04 	addi	r2,r2,-4
 8002274:	10c00117 	ldw	r3,4(r2)
 8002278:	a5000044 	addi	r20,r20,1
 800227c:	183ffc26 	beq	r3,zero,8002270 <__alt_data_end+0xfc002270>
 8002280:	9529883a 	add	r20,r18,r20
 8002284:	90800044 	addi	r2,r18,1
 8002288:	dd009115 	stw	r20,580(sp)
 800228c:	a0803216 	blt	r20,r2,8002358 <__kernel_rem_pio2+0x5a4>
 8002290:	da009317 	ldw	r8,588(sp)
 8002294:	d8c09117 	ldw	r3,580(sp)
 8002298:	44a3883a 	add	r17,r8,r18
 800229c:	da009217 	ldw	r8,584(sp)
 80022a0:	882290fa 	slli	r17,r17,3
 80022a4:	40a5883a 	add	r18,r8,r2
 80022a8:	da009517 	ldw	r8,596(sp)
 80022ac:	100490fa 	slli	r2,r2,3
 80022b0:	94a5883a 	add	r18,r18,r18
 80022b4:	40eb883a 	add	r21,r8,r3
 80022b8:	da00a717 	ldw	r8,668(sp)
 80022bc:	ad6b883a 	add	r21,r21,r21
 80022c0:	94a5883a 	add	r18,r18,r18
 80022c4:	ad6b883a 	add	r21,r21,r21
 80022c8:	d8c05004 	addi	r3,sp,320
 80022cc:	44a5883a 	add	r18,r8,r18
 80022d0:	1c63883a 	add	r17,r3,r17
 80022d4:	d8a7883a 	add	r19,sp,r2
 80022d8:	456b883a 	add	r21,r8,r21
 80022dc:	91000017 	ldw	r4,0(r18)
 80022e0:	8006d780 	call	8006d78 <__floatsidf>
 80022e4:	da008d17 	ldw	r8,564(sp)
 80022e8:	88800015 	stw	r2,0(r17)
 80022ec:	88c00115 	stw	r3,4(r17)
 80022f0:	40001b16 	blt	r8,zero,8002360 <__kernel_rem_pio2+0x5ac>
 80022f4:	dd008e17 	ldw	r20,568(sp)
 80022f8:	882d883a 	mov	r22,r17
 80022fc:	002f883a 	mov	r23,zero
 8002300:	0039883a 	mov	fp,zero
 8002304:	b1800017 	ldw	r6,0(r22)
 8002308:	b1c00117 	ldw	r7,4(r22)
 800230c:	a1000017 	ldw	r4,0(r20)
 8002310:	a1400117 	ldw	r5,4(r20)
 8002314:	a5000204 	addi	r20,r20,8
 8002318:	b5bffe04 	addi	r22,r22,-8
 800231c:	8005ce40 	call	8005ce4 <__muldf3>
 8002320:	b809883a 	mov	r4,r23
 8002324:	e00b883a 	mov	r5,fp
 8002328:	100d883a 	mov	r6,r2
 800232c:	180f883a 	mov	r7,r3
 8002330:	80048f80 	call	80048f8 <__adddf3>
 8002334:	102f883a 	mov	r23,r2
 8002338:	1839883a 	mov	fp,r3
 800233c:	a43ff11e 	bne	r20,r16,8002304 <__alt_data_end+0xfc002304>
 8002340:	9dc00015 	stw	r23,0(r19)
 8002344:	9f000115 	stw	fp,4(r19)
 8002348:	94800104 	addi	r18,r18,4
 800234c:	8c400204 	addi	r17,r17,8
 8002350:	9cc00204 	addi	r19,r19,8
 8002354:	957fe11e 	bne	r18,r21,80022dc <__alt_data_end+0xfc0022dc>
 8002358:	dc809117 	ldw	r18,580(sp)
 800235c:	003f0f06 	br	8001f9c <__alt_data_end+0xfc001f9c>
 8002360:	002f883a 	mov	r23,zero
 8002364:	0039883a 	mov	fp,zero
 8002368:	003ff506 	br	8002340 <__alt_data_end+0xfc002340>
 800236c:	480d883a 	mov	r6,r9
 8002370:	180f883a 	mov	r7,r3
 8002374:	0009883a 	mov	r4,zero
 8002378:	014ffc34 	movhi	r5,16368
 800237c:	80063fc0 	call	80063fc <__subdf3>
 8002380:	102b883a 	mov	r21,r2
 8002384:	1811883a 	mov	r8,r3
 8002388:	a03f9b26 	beq	r20,zero,80021f8 <__alt_data_end+0xfc0021f8>
 800238c:	d9809017 	ldw	r6,576(sp)
 8002390:	0009883a 	mov	r4,zero
 8002394:	014ffc34 	movhi	r5,16368
 8002398:	d8c09b15 	stw	r3,620(sp)
 800239c:	800308c0 	call	800308c <scalbn>
 80023a0:	da009b17 	ldw	r8,620(sp)
 80023a4:	a809883a 	mov	r4,r21
 80023a8:	100d883a 	mov	r6,r2
 80023ac:	400b883a 	mov	r5,r8
 80023b0:	180f883a 	mov	r7,r3
 80023b4:	80063fc0 	call	80063fc <__subdf3>
 80023b8:	102b883a 	mov	r21,r2
 80023bc:	1811883a 	mov	r8,r3
 80023c0:	003f8d06 	br	80021f8 <__alt_data_end+0xfc0021f8>
 80023c4:	0005883a 	mov	r2,zero
 80023c8:	0007883a 	mov	r3,zero
 80023cc:	003eac06 	br	8001e80 <__alt_data_end+0xfc001e80>
 80023d0:	d8809017 	ldw	r2,576(sp)
 80023d4:	1000121e 	bne	r2,zero,8002420 <__kernel_rem_pio2+0x66c>
 80023d8:	90bfffc4 	addi	r2,r18,-1
 80023dc:	1085883a 	add	r2,r2,r2
 80023e0:	1085883a 	add	r2,r2,r2
 80023e4:	d885883a 	add	r2,sp,r2
 80023e8:	14c07817 	ldw	r19,480(r2)
 80023ec:	9827d5fa 	srai	r19,r19,23
 80023f0:	003f5606 	br	800214c <__alt_data_end+0xfc00214c>
 80023f4:	90bfffc4 	addi	r2,r18,-1
 80023f8:	1085883a 	add	r2,r2,r2
 80023fc:	1085883a 	add	r2,r2,r2
 8002400:	d885883a 	add	r2,sp,r2
 8002404:	10807804 	addi	r2,r2,480
 8002408:	11000017 	ldw	r4,0(r2)
 800240c:	01402034 	movhi	r5,128
 8002410:	297fffc4 	addi	r5,r5,-1
 8002414:	2148703a 	and	r4,r4,r5
 8002418:	11000015 	stw	r4,0(r2)
 800241c:	003f7406 	br	80021f0 <__alt_data_end+0xfc0021f0>
 8002420:	4809883a 	mov	r4,r9
 8002424:	180b883a 	mov	r5,r3
 8002428:	000d883a 	mov	r6,zero
 800242c:	01cff834 	movhi	r7,16352
 8002430:	d8c09a15 	stw	r3,616(sp)
 8002434:	d8c09b15 	stw	r3,620(sp)
 8002438:	da409915 	stw	r9,612(sp)
 800243c:	8005b140 	call	8005b14 <__gedf2>
 8002440:	d8c09a17 	ldw	r3,616(sp)
 8002444:	da009b17 	ldw	r8,620(sp)
 8002448:	da409917 	ldw	r9,612(sp)
 800244c:	1000920e 	bge	r2,zero,8002698 <__kernel_rem_pio2+0x8e4>
 8002450:	0027883a 	mov	r19,zero
 8002454:	003f6806 	br	80021f8 <__alt_data_end+0xfc0021f8>
 8002458:	002d883a 	mov	r22,zero
 800245c:	002b883a 	mov	r21,zero
 8002460:	003eb006 	br	8001f24 <__alt_data_end+0xfc001f24>
 8002464:	2945883a 	add	r2,r5,r5
 8002468:	da009017 	ldw	r8,576(sp)
 800246c:	1085883a 	add	r2,r2,r2
 8002470:	d885883a 	add	r2,sp,r2
 8002474:	10807817 	ldw	r2,480(r2)
 8002478:	423ffa04 	addi	r8,r8,-24
 800247c:	dc409115 	stw	r17,580(sp)
 8002480:	dcc08d15 	stw	r19,564(sp)
 8002484:	da009015 	stw	r8,576(sp)
 8002488:	dd809417 	ldw	r22,592(sp)
 800248c:	2823883a 	mov	r17,r5
 8002490:	10000e1e 	bne	r2,zero,80024cc <__kernel_rem_pio2+0x718>
 8002494:	00900034 	movhi	r2,16384
 8002498:	10bfffc4 	addi	r2,r2,-1
 800249c:	2885883a 	add	r2,r5,r2
 80024a0:	1085883a 	add	r2,r2,r2
 80024a4:	d8c07804 	addi	r3,sp,480
 80024a8:	1085883a 	add	r2,r2,r2
 80024ac:	1885883a 	add	r2,r3,r2
 80024b0:	4007883a 	mov	r3,r8
 80024b4:	10bfff04 	addi	r2,r2,-4
 80024b8:	11000117 	ldw	r4,4(r2)
 80024bc:	8c7fffc4 	addi	r17,r17,-1
 80024c0:	18fffa04 	addi	r3,r3,-24
 80024c4:	203ffb26 	beq	r4,zero,80024b4 <__alt_data_end+0xfc0024b4>
 80024c8:	d8c09015 	stw	r3,576(sp)
 80024cc:	d9809017 	ldw	r6,576(sp)
 80024d0:	0009883a 	mov	r4,zero
 80024d4:	014ffc34 	movhi	r5,16368
 80024d8:	800308c0 	call	800308c <scalbn>
 80024dc:	1029883a 	mov	r20,r2
 80024e0:	182b883a 	mov	r21,r3
 80024e4:	88018416 	blt	r17,zero,8002af8 <__kernel_rem_pio2+0xd44>
 80024e8:	881090fa 	slli	r8,r17,3
 80024ec:	d8c07804 	addi	r3,sp,480
 80024f0:	da008e15 	stw	r8,568(sp)
 80024f4:	d8808e17 	ldw	r2,568(sp)
 80024f8:	8c51883a 	add	r8,r17,r17
 80024fc:	4211883a 	add	r8,r8,r8
 8002500:	d8a1883a 	add	r16,sp,r2
 8002504:	1a25883a 	add	r18,r3,r8
 8002508:	da3ffe04 	addi	r8,sp,-8
 800250c:	da008c15 	stw	r8,560(sp)
 8002510:	8039883a 	mov	fp,r16
 8002514:	91000017 	ldw	r4,0(r18)
 8002518:	e73ffe04 	addi	fp,fp,-8
 800251c:	94bfff04 	addi	r18,r18,-4
 8002520:	8006d780 	call	8006d78 <__floatsidf>
 8002524:	a00d883a 	mov	r6,r20
 8002528:	a80f883a 	mov	r7,r21
 800252c:	1009883a 	mov	r4,r2
 8002530:	180b883a 	mov	r5,r3
 8002534:	8005ce40 	call	8005ce4 <__muldf3>
 8002538:	a009883a 	mov	r4,r20
 800253c:	a80b883a 	mov	r5,r21
 8002540:	e0800215 	stw	r2,8(fp)
 8002544:	e0c00315 	stw	r3,12(fp)
 8002548:	000d883a 	mov	r6,zero
 800254c:	01cf9c34 	movhi	r7,15984
 8002550:	8005ce40 	call	8005ce4 <__muldf3>
 8002554:	da008c17 	ldw	r8,560(sp)
 8002558:	1029883a 	mov	r20,r2
 800255c:	182b883a 	mov	r21,r3
 8002560:	e23fec1e 	bne	fp,r8,8002514 <__alt_data_end+0xfc002514>
 8002564:	0029883a 	mov	r20,zero
 8002568:	b0004f16 	blt	r22,zero,80026a8 <__kernel_rem_pio2+0x8f4>
 800256c:	05420074 	movhi	r21,2049
 8002570:	014ffe74 	movhi	r5,16377
 8002574:	ad562e04 	addi	r21,r21,22712
 8002578:	8027883a 	mov	r19,r16
 800257c:	01100034 	movhi	r4,16384
 8002580:	29487ec4 	addi	r5,r5,8699
 8002584:	0039883a 	mov	fp,zero
 8002588:	002f883a 	mov	r23,zero
 800258c:	0025883a 	mov	r18,zero
 8002590:	00000506 	br	80025a8 <__kernel_rem_pio2+0x7f4>
 8002594:	9cc00204 	addi	r19,r19,8
 8002598:	a4800f16 	blt	r20,r18,80025d8 <__kernel_rem_pio2+0x824>
 800259c:	a9000017 	ldw	r4,0(r21)
 80025a0:	a9400117 	ldw	r5,4(r21)
 80025a4:	ad400204 	addi	r21,r21,8
 80025a8:	99800017 	ldw	r6,0(r19)
 80025ac:	99c00117 	ldw	r7,4(r19)
 80025b0:	94800044 	addi	r18,r18,1
 80025b4:	8005ce40 	call	8005ce4 <__muldf3>
 80025b8:	e009883a 	mov	r4,fp
 80025bc:	b80b883a 	mov	r5,r23
 80025c0:	100d883a 	mov	r6,r2
 80025c4:	180f883a 	mov	r7,r3
 80025c8:	80048f80 	call	80048f8 <__adddf3>
 80025cc:	1039883a 	mov	fp,r2
 80025d0:	182f883a 	mov	r23,r3
 80025d4:	b4bfef0e 	bge	r22,r18,8002594 <__alt_data_end+0xfc002594>
 80025d8:	a00490fa 	slli	r2,r20,3
 80025dc:	da008c17 	ldw	r8,560(sp)
 80025e0:	843ffe04 	addi	r16,r16,-8
 80025e4:	d885883a 	add	r2,sp,r2
 80025e8:	10802804 	addi	r2,r2,160
 80025ec:	17000015 	stw	fp,0(r2)
 80025f0:	15c00115 	stw	r23,4(r2)
 80025f4:	a5000044 	addi	r20,r20,1
 80025f8:	823fdb1e 	bne	r16,r8,8002568 <__alt_data_end+0xfc002568>
 80025fc:	da00a617 	ldw	r8,664(sp)
 8002600:	00800084 	movi	r2,2
 8002604:	12006616 	blt	r2,r8,80027a0 <__kernel_rem_pio2+0x9ec>
 8002608:	0200de16 	blt	zero,r8,8002984 <__kernel_rem_pio2+0xbd0>
 800260c:	4000141e 	bne	r8,zero,8002660 <__kernel_rem_pio2+0x8ac>
 8002610:	da008e17 	ldw	r8,568(sp)
 8002614:	d8802804 	addi	r2,sp,160
 8002618:	0007883a 	mov	r3,zero
 800261c:	1225883a 	add	r18,r2,r8
 8002620:	043fffc4 	movi	r16,-1
 8002624:	0005883a 	mov	r2,zero
 8002628:	91800017 	ldw	r6,0(r18)
 800262c:	91c00117 	ldw	r7,4(r18)
 8002630:	1009883a 	mov	r4,r2
 8002634:	180b883a 	mov	r5,r3
 8002638:	8c7fffc4 	addi	r17,r17,-1
 800263c:	80048f80 	call	80048f8 <__adddf3>
 8002640:	94bffe04 	addi	r18,r18,-8
 8002644:	8c3ff81e 	bne	r17,r16,8002628 <__alt_data_end+0xfc002628>
 8002648:	da008d17 	ldw	r8,564(sp)
 800264c:	40000126 	beq	r8,zero,8002654 <__kernel_rem_pio2+0x8a0>
 8002650:	18e0003c 	xorhi	r3,r3,32768
 8002654:	da008f17 	ldw	r8,572(sp)
 8002658:	40800015 	stw	r2,0(r8)
 800265c:	40c00115 	stw	r3,4(r8)
 8002660:	da009117 	ldw	r8,580(sp)
 8002664:	408001cc 	andi	r2,r8,7
 8002668:	dfc0a517 	ldw	ra,660(sp)
 800266c:	df00a417 	ldw	fp,656(sp)
 8002670:	ddc0a317 	ldw	r23,652(sp)
 8002674:	dd80a217 	ldw	r22,648(sp)
 8002678:	dd40a117 	ldw	r21,644(sp)
 800267c:	dd00a017 	ldw	r20,640(sp)
 8002680:	dcc09f17 	ldw	r19,636(sp)
 8002684:	dc809e17 	ldw	r18,632(sp)
 8002688:	dc409d17 	ldw	r17,628(sp)
 800268c:	dc009c17 	ldw	r16,624(sp)
 8002690:	dec0a604 	addi	sp,sp,664
 8002694:	f800283a 	ret
 8002698:	8c400044 	addi	r17,r17,1
 800269c:	04810d0e 	bge	zero,r18,8002ad4 <__kernel_rem_pio2+0xd20>
 80026a0:	04c00084 	movi	r19,2
 80026a4:	003eac06 	br	8002158 <__alt_data_end+0xfc002158>
 80026a8:	0039883a 	mov	fp,zero
 80026ac:	002f883a 	mov	r23,zero
 80026b0:	003fc906 	br	80025d8 <__alt_data_end+0xfc0025d8>
 80026b4:	0029883a 	mov	r20,zero
 80026b8:	003ebd06 	br	80021b0 <__alt_data_end+0xfc0021b0>
 80026bc:	05000044 	movi	r20,1
 80026c0:	003eef06 	br	8002280 <__alt_data_end+0xfc002280>
 80026c4:	4029883a 	mov	r20,r8
 80026c8:	da009017 	ldw	r8,576(sp)
 80026cc:	a809883a 	mov	r4,r21
 80026d0:	a00b883a 	mov	r5,r20
 80026d4:	020dc83a 	sub	r6,zero,r8
 80026d8:	dc409115 	stw	r17,580(sp)
 80026dc:	dd809417 	ldw	r22,592(sp)
 80026e0:	dcc08d15 	stw	r19,564(sp)
 80026e4:	800308c0 	call	800308c <scalbn>
 80026e8:	000d883a 	mov	r6,zero
 80026ec:	01d05c34 	movhi	r7,16752
 80026f0:	1009883a 	mov	r4,r2
 80026f4:	180b883a 	mov	r5,r3
 80026f8:	102b883a 	mov	r21,r2
 80026fc:	1823883a 	mov	r17,r3
 8002700:	8005b140 	call	8005b14 <__gedf2>
 8002704:	1000e916 	blt	r2,zero,8002aac <__kernel_rem_pio2+0xcf8>
 8002708:	000d883a 	mov	r6,zero
 800270c:	01cf9c34 	movhi	r7,15984
 8002710:	880b883a 	mov	r5,r17
 8002714:	a809883a 	mov	r4,r21
 8002718:	8005ce40 	call	8005ce4 <__muldf3>
 800271c:	180b883a 	mov	r5,r3
 8002720:	1009883a 	mov	r4,r2
 8002724:	8006cf80 	call	8006cf8 <__fixdfsi>
 8002728:	1029883a 	mov	r20,r2
 800272c:	9485883a 	add	r2,r18,r18
 8002730:	1085883a 	add	r2,r2,r2
 8002734:	a009883a 	mov	r4,r20
 8002738:	d8a1883a 	add	r16,sp,r2
 800273c:	8006d780 	call	8006d78 <__floatsidf>
 8002740:	000d883a 	mov	r6,zero
 8002744:	01d05c34 	movhi	r7,16752
 8002748:	1009883a 	mov	r4,r2
 800274c:	180b883a 	mov	r5,r3
 8002750:	8005ce40 	call	8005ce4 <__muldf3>
 8002754:	880b883a 	mov	r5,r17
 8002758:	100d883a 	mov	r6,r2
 800275c:	180f883a 	mov	r7,r3
 8002760:	a809883a 	mov	r4,r21
 8002764:	80063fc0 	call	80063fc <__subdf3>
 8002768:	180b883a 	mov	r5,r3
 800276c:	1009883a 	mov	r4,r2
 8002770:	8006cf80 	call	8006cf8 <__fixdfsi>
 8002774:	da009017 	ldw	r8,576(sp)
 8002778:	94400044 	addi	r17,r18,1
 800277c:	8c47883a 	add	r3,r17,r17
 8002780:	84007804 	addi	r16,r16,480
 8002784:	18c7883a 	add	r3,r3,r3
 8002788:	80800015 	stw	r2,0(r16)
 800278c:	d8c7883a 	add	r3,sp,r3
 8002790:	42000604 	addi	r8,r8,24
 8002794:	da009015 	stw	r8,576(sp)
 8002798:	1d007815 	stw	r20,480(r3)
 800279c:	003f4b06 	br	80024cc <__alt_data_end+0xfc0024cc>
 80027a0:	da00a617 	ldw	r8,664(sp)
 80027a4:	008000c4 	movi	r2,3
 80027a8:	40bfad1e 	bne	r8,r2,8002660 <__alt_data_end+0xfc002660>
 80027ac:	0440bc0e 	bge	zero,r17,8002aa0 <__kernel_rem_pio2+0xcec>
 80027b0:	da008e17 	ldw	r8,568(sp)
 80027b4:	882090fa 	slli	r16,r17,3
 80027b8:	dd402804 	addi	r21,sp,160
 80027bc:	da05883a 	add	r2,sp,r8
 80027c0:	10802804 	addi	r2,r2,160
 80027c4:	15c00017 	ldw	r23,0(r2)
 80027c8:	15800117 	ldw	r22,4(r2)
 80027cc:	8029883a 	mov	r20,r16
 80027d0:	843ffe04 	addi	r16,r16,-8
 80027d4:	ac21883a 	add	r16,r21,r16
 80027d8:	ad29883a 	add	r20,r21,r20
 80027dc:	dac02604 	addi	r11,sp,152
 80027e0:	8811883a 	mov	r8,r17
 80027e4:	84400017 	ldw	r17,0(r16)
 80027e8:	87000117 	ldw	fp,4(r16)
 80027ec:	b80d883a 	mov	r6,r23
 80027f0:	b00f883a 	mov	r7,r22
 80027f4:	8809883a 	mov	r4,r17
 80027f8:	e00b883a 	mov	r5,fp
 80027fc:	da009b15 	stw	r8,620(sp)
 8002800:	dac09915 	stw	r11,612(sp)
 8002804:	80048f80 	call	80048f8 <__adddf3>
 8002808:	100d883a 	mov	r6,r2
 800280c:	180f883a 	mov	r7,r3
 8002810:	8809883a 	mov	r4,r17
 8002814:	e00b883a 	mov	r5,fp
 8002818:	1027883a 	mov	r19,r2
 800281c:	1825883a 	mov	r18,r3
 8002820:	80063fc0 	call	80063fc <__subdf3>
 8002824:	b80d883a 	mov	r6,r23
 8002828:	b00f883a 	mov	r7,r22
 800282c:	1009883a 	mov	r4,r2
 8002830:	180b883a 	mov	r5,r3
 8002834:	80048f80 	call	80048f8 <__adddf3>
 8002838:	dac09917 	ldw	r11,612(sp)
 800283c:	a0800015 	stw	r2,0(r20)
 8002840:	a0c00115 	stw	r3,4(r20)
 8002844:	84c00015 	stw	r19,0(r16)
 8002848:	84800115 	stw	r18,4(r16)
 800284c:	843ffe04 	addi	r16,r16,-8
 8002850:	a53ffe04 	addi	r20,r20,-8
 8002854:	982f883a 	mov	r23,r19
 8002858:	902d883a 	mov	r22,r18
 800285c:	da009b17 	ldw	r8,620(sp)
 8002860:	5c3fe01e 	bne	r11,r16,80027e4 <__alt_data_end+0xfc0027e4>
 8002864:	00800044 	movi	r2,1
 8002868:	12008d0e 	bge	r2,r8,8002aa0 <__kernel_rem_pio2+0xcec>
 800286c:	402090fa 	slli	r16,r8,3
 8002870:	da008e17 	ldw	r8,568(sp)
 8002874:	8023883a 	mov	r17,r16
 8002878:	da05883a 	add	r2,sp,r8
 800287c:	10802804 	addi	r2,r2,160
 8002880:	15800017 	ldw	r22,0(r2)
 8002884:	15000117 	ldw	r20,4(r2)
 8002888:	ac63883a 	add	r17,r21,r17
 800288c:	843ffe04 	addi	r16,r16,-8
 8002890:	ac21883a 	add	r16,r21,r16
 8002894:	8825883a 	mov	r18,r17
 8002898:	8811883a 	mov	r8,r17
 800289c:	84400017 	ldw	r17,0(r16)
 80028a0:	87000117 	ldw	fp,4(r16)
 80028a4:	b009883a 	mov	r4,r22
 80028a8:	a00b883a 	mov	r5,r20
 80028ac:	880d883a 	mov	r6,r17
 80028b0:	e00f883a 	mov	r7,fp
 80028b4:	da009b15 	stw	r8,620(sp)
 80028b8:	80048f80 	call	80048f8 <__adddf3>
 80028bc:	100d883a 	mov	r6,r2
 80028c0:	180f883a 	mov	r7,r3
 80028c4:	8809883a 	mov	r4,r17
 80028c8:	e00b883a 	mov	r5,fp
 80028cc:	102f883a 	mov	r23,r2
 80028d0:	1827883a 	mov	r19,r3
 80028d4:	80063fc0 	call	80063fc <__subdf3>
 80028d8:	b00d883a 	mov	r6,r22
 80028dc:	a00f883a 	mov	r7,r20
 80028e0:	1009883a 	mov	r4,r2
 80028e4:	180b883a 	mov	r5,r3
 80028e8:	80048f80 	call	80048f8 <__adddf3>
 80028ec:	90800015 	stw	r2,0(r18)
 80028f0:	90c00115 	stw	r3,4(r18)
 80028f4:	85c00015 	stw	r23,0(r16)
 80028f8:	84c00115 	stw	r19,4(r16)
 80028fc:	843ffe04 	addi	r16,r16,-8
 8002900:	94bffe04 	addi	r18,r18,-8
 8002904:	b82d883a 	mov	r22,r23
 8002908:	9829883a 	mov	r20,r19
 800290c:	da009b17 	ldw	r8,620(sp)
 8002910:	ac3fe21e 	bne	r21,r16,800289c <__alt_data_end+0xfc00289c>
 8002914:	4023883a 	mov	r17,r8
 8002918:	dc002a04 	addi	r16,sp,168
 800291c:	0005883a 	mov	r2,zero
 8002920:	0007883a 	mov	r3,zero
 8002924:	89800017 	ldw	r6,0(r17)
 8002928:	89c00117 	ldw	r7,4(r17)
 800292c:	1009883a 	mov	r4,r2
 8002930:	8c7ffe04 	addi	r17,r17,-8
 8002934:	180b883a 	mov	r5,r3
 8002938:	80048f80 	call	80048f8 <__adddf3>
 800293c:	847ff91e 	bne	r16,r17,8002924 <__alt_data_end+0xfc002924>
 8002940:	da008d17 	ldw	r8,564(sp)
 8002944:	40004726 	beq	r8,zero,8002a64 <__kernel_rem_pio2+0xcb0>
 8002948:	d9002b17 	ldw	r4,172(sp)
 800294c:	d9402917 	ldw	r5,164(sp)
 8002950:	d9802a17 	ldw	r6,168(sp)
 8002954:	da008f17 	ldw	r8,572(sp)
 8002958:	d9c02817 	ldw	r7,160(sp)
 800295c:	2960003c 	xorhi	r5,r5,32768
 8002960:	2120003c 	xorhi	r4,r4,32768
 8002964:	18e0003c 	xorhi	r3,r3,32768
 8002968:	41c00015 	stw	r7,0(r8)
 800296c:	41400115 	stw	r5,4(r8)
 8002970:	41800215 	stw	r6,8(r8)
 8002974:	41000315 	stw	r4,12(r8)
 8002978:	40800415 	stw	r2,16(r8)
 800297c:	40c00515 	stw	r3,20(r8)
 8002980:	003f3706 	br	8002660 <__alt_data_end+0xfc002660>
 8002984:	da008e17 	ldw	r8,568(sp)
 8002988:	d8802804 	addi	r2,sp,160
 800298c:	dc002604 	addi	r16,sp,152
 8002990:	1225883a 	add	r18,r2,r8
 8002994:	0007883a 	mov	r3,zero
 8002998:	0005883a 	mov	r2,zero
 800299c:	91800017 	ldw	r6,0(r18)
 80029a0:	91c00117 	ldw	r7,4(r18)
 80029a4:	1009883a 	mov	r4,r2
 80029a8:	94bffe04 	addi	r18,r18,-8
 80029ac:	180b883a 	mov	r5,r3
 80029b0:	80048f80 	call	80048f8 <__adddf3>
 80029b4:	943ff91e 	bne	r18,r16,800299c <__alt_data_end+0xfc00299c>
 80029b8:	da008d17 	ldw	r8,564(sp)
 80029bc:	d9002817 	ldw	r4,160(sp)
 80029c0:	d9402917 	ldw	r5,164(sp)
 80029c4:	40001a26 	beq	r8,zero,8002a30 <__kernel_rem_pio2+0xc7c>
 80029c8:	da008f17 	ldw	r8,572(sp)
 80029cc:	19a0003c 	xorhi	r6,r3,32768
 80029d0:	180f883a 	mov	r7,r3
 80029d4:	41800115 	stw	r6,4(r8)
 80029d8:	40800015 	stw	r2,0(r8)
 80029dc:	100d883a 	mov	r6,r2
 80029e0:	80063fc0 	call	80063fc <__subdf3>
 80029e4:	04400c0e 	bge	zero,r17,8002a18 <__kernel_rem_pio2+0xc64>
 80029e8:	dc002a04 	addi	r16,sp,168
 80029ec:	04800044 	movi	r18,1
 80029f0:	81800017 	ldw	r6,0(r16)
 80029f4:	81c00117 	ldw	r7,4(r16)
 80029f8:	1009883a 	mov	r4,r2
 80029fc:	180b883a 	mov	r5,r3
 8002a00:	94800044 	addi	r18,r18,1
 8002a04:	80048f80 	call	80048f8 <__adddf3>
 8002a08:	84000204 	addi	r16,r16,8
 8002a0c:	8cbff80e 	bge	r17,r18,80029f0 <__alt_data_end+0xfc0029f0>
 8002a10:	da008d17 	ldw	r8,564(sp)
 8002a14:	40004226 	beq	r8,zero,8002b20 <__kernel_rem_pio2+0xd6c>
 8002a18:	da008f17 	ldw	r8,572(sp)
 8002a1c:	1009883a 	mov	r4,r2
 8002a20:	18a0003c 	xorhi	r2,r3,32768
 8002a24:	41000215 	stw	r4,8(r8)
 8002a28:	40800315 	stw	r2,12(r8)
 8002a2c:	003f0c06 	br	8002660 <__alt_data_end+0xfc002660>
 8002a30:	da008f17 	ldw	r8,572(sp)
 8002a34:	100d883a 	mov	r6,r2
 8002a38:	180f883a 	mov	r7,r3
 8002a3c:	40800015 	stw	r2,0(r8)
 8002a40:	40c00115 	stw	r3,4(r8)
 8002a44:	80063fc0 	call	80063fc <__subdf3>
 8002a48:	047fe716 	blt	zero,r17,80029e8 <__alt_data_end+0xfc0029e8>
 8002a4c:	da008f17 	ldw	r8,572(sp)
 8002a50:	1009883a 	mov	r4,r2
 8002a54:	1805883a 	mov	r2,r3
 8002a58:	41000215 	stw	r4,8(r8)
 8002a5c:	40800315 	stw	r2,12(r8)
 8002a60:	003eff06 	br	8002660 <__alt_data_end+0xfc002660>
 8002a64:	da008f17 	ldw	r8,572(sp)
 8002a68:	d9802817 	ldw	r6,160(sp)
 8002a6c:	d9402a17 	ldw	r5,168(sp)
 8002a70:	d9002b17 	ldw	r4,172(sp)
 8002a74:	41800015 	stw	r6,0(r8)
 8002a78:	d9802917 	ldw	r6,164(sp)
 8002a7c:	41400215 	stw	r5,8(r8)
 8002a80:	41000315 	stw	r4,12(r8)
 8002a84:	41800115 	stw	r6,4(r8)
 8002a88:	40800415 	stw	r2,16(r8)
 8002a8c:	40c00515 	stw	r3,20(r8)
 8002a90:	003ef306 	br	8002660 <__alt_data_end+0xfc002660>
 8002a94:	da00a617 	ldw	r8,664(sp)
 8002a98:	008000c4 	movi	r2,3
 8002a9c:	40bef01e 	bne	r8,r2,8002660 <__alt_data_end+0xfc002660>
 8002aa0:	0005883a 	mov	r2,zero
 8002aa4:	0007883a 	mov	r3,zero
 8002aa8:	003fa506 	br	8002940 <__alt_data_end+0xfc002940>
 8002aac:	9485883a 	add	r2,r18,r18
 8002ab0:	1085883a 	add	r2,r2,r2
 8002ab4:	d8a1883a 	add	r16,sp,r2
 8002ab8:	880b883a 	mov	r5,r17
 8002abc:	a809883a 	mov	r4,r21
 8002ac0:	84007804 	addi	r16,r16,480
 8002ac4:	8006cf80 	call	8006cf8 <__fixdfsi>
 8002ac8:	80800015 	stw	r2,0(r16)
 8002acc:	9023883a 	mov	r17,r18
 8002ad0:	003e7e06 	br	80024cc <__alt_data_end+0xfc0024cc>
 8002ad4:	a80d883a 	mov	r6,r21
 8002ad8:	400f883a 	mov	r7,r8
 8002adc:	0009883a 	mov	r4,zero
 8002ae0:	014ffc34 	movhi	r5,16368
 8002ae4:	80063fc0 	call	80063fc <__subdf3>
 8002ae8:	102b883a 	mov	r21,r2
 8002aec:	1811883a 	mov	r8,r3
 8002af0:	04c00084 	movi	r19,2
 8002af4:	003dc006 	br	80021f8 <__alt_data_end+0xfc0021f8>
 8002af8:	da00a617 	ldw	r8,664(sp)
 8002afc:	00800084 	movi	r2,2
 8002b00:	123fe416 	blt	r2,r8,8002a94 <__alt_data_end+0xfc002a94>
 8002b04:	02000c16 	blt	zero,r8,8002b38 <__kernel_rem_pio2+0xd84>
 8002b08:	403ed51e 	bne	r8,zero,8002660 <__alt_data_end+0xfc002660>
 8002b0c:	0005883a 	mov	r2,zero
 8002b10:	0007883a 	mov	r3,zero
 8002b14:	003ecc06 	br	8002648 <__alt_data_end+0xfc002648>
 8002b18:	d8009215 	stw	zero,584(sp)
 8002b1c:	003cc306 	br	8001e2c <__alt_data_end+0xfc001e2c>
 8002b20:	da008f17 	ldw	r8,572(sp)
 8002b24:	1009883a 	mov	r4,r2
 8002b28:	1805883a 	mov	r2,r3
 8002b2c:	41000215 	stw	r4,8(r8)
 8002b30:	40800315 	stw	r2,12(r8)
 8002b34:	003eca06 	br	8002660 <__alt_data_end+0xfc002660>
 8002b38:	0005883a 	mov	r2,zero
 8002b3c:	0007883a 	mov	r3,zero
 8002b40:	003f9d06 	br	80029b8 <__alt_data_end+0xfc0029b8>

08002b44 <__kernel_sin>:
 8002b44:	00a00034 	movhi	r2,32768
 8002b48:	defff404 	addi	sp,sp,-48
 8002b4c:	10bfffc4 	addi	r2,r2,-1
 8002b50:	00cf9034 	movhi	r3,15936
 8002b54:	ddc00915 	stw	r23,36(sp)
 8002b58:	dd800815 	stw	r22,32(sp)
 8002b5c:	dc400315 	stw	r17,12(sp)
 8002b60:	dc000215 	stw	r16,8(sp)
 8002b64:	dfc00b15 	stw	ra,44(sp)
 8002b68:	df000a15 	stw	fp,40(sp)
 8002b6c:	dd400715 	stw	r21,28(sp)
 8002b70:	dd000615 	stw	r20,24(sp)
 8002b74:	dcc00515 	stw	r19,20(sp)
 8002b78:	dc800415 	stw	r18,16(sp)
 8002b7c:	2884703a 	and	r2,r5,r2
 8002b80:	18ffffc4 	addi	r3,r3,-1
 8002b84:	2821883a 	mov	r16,r5
 8002b88:	2023883a 	mov	r17,r4
 8002b8c:	302f883a 	mov	r23,r6
 8002b90:	382d883a 	mov	r22,r7
 8002b94:	18800216 	blt	r3,r2,8002ba0 <__kernel_sin+0x5c>
 8002b98:	8006cf80 	call	8006cf8 <__fixdfsi>
 8002b9c:	10009926 	beq	r2,zero,8002e04 <__kernel_sin+0x2c0>
 8002ba0:	880d883a 	mov	r6,r17
 8002ba4:	800f883a 	mov	r7,r16
 8002ba8:	8809883a 	mov	r4,r17
 8002bac:	800b883a 	mov	r5,r16
 8002bb0:	8005ce40 	call	8005ce4 <__muldf3>
 8002bb4:	100d883a 	mov	r6,r2
 8002bb8:	180f883a 	mov	r7,r3
 8002bbc:	8809883a 	mov	r4,r17
 8002bc0:	800b883a 	mov	r5,r16
 8002bc4:	1027883a 	mov	r19,r2
 8002bc8:	1825883a 	mov	r18,r3
 8002bcc:	8005ce40 	call	8005ce4 <__muldf3>
 8002bd0:	0196b434 	movhi	r6,23248
 8002bd4:	01cf79b4 	movhi	r7,15846
 8002bd8:	31b55f04 	addi	r6,r6,-10884
 8002bdc:	39f64e84 	addi	r7,r7,-9926
 8002be0:	9809883a 	mov	r4,r19
 8002be4:	900b883a 	mov	r5,r18
 8002be8:	102b883a 	mov	r21,r2
 8002bec:	1829883a 	mov	r20,r3
 8002bf0:	8005ce40 	call	8005ce4 <__muldf3>
 8002bf4:	01a28b34 	movhi	r6,35372
 8002bf8:	01cf96f4 	movhi	r7,15963
 8002bfc:	31a73ac4 	addi	r6,r6,-25365
 8002c00:	39f97984 	addi	r7,r7,-6682
 8002c04:	1009883a 	mov	r4,r2
 8002c08:	180b883a 	mov	r5,r3
 8002c0c:	80063fc0 	call	80063fc <__subdf3>
 8002c10:	980d883a 	mov	r6,r19
 8002c14:	900f883a 	mov	r7,r18
 8002c18:	1009883a 	mov	r4,r2
 8002c1c:	180b883a 	mov	r5,r3
 8002c20:	8005ce40 	call	8005ce4 <__muldf3>
 8002c24:	0195ecb4 	movhi	r6,22450
 8002c28:	01cfb1f4 	movhi	r7,16071
 8002c2c:	31bf9f44 	addi	r6,r6,-387
 8002c30:	39c778c4 	addi	r7,r7,7651
 8002c34:	1009883a 	mov	r4,r2
 8002c38:	180b883a 	mov	r5,r3
 8002c3c:	80048f80 	call	80048f8 <__adddf3>
 8002c40:	980d883a 	mov	r6,r19
 8002c44:	900f883a 	mov	r7,r18
 8002c48:	1009883a 	mov	r4,r2
 8002c4c:	180b883a 	mov	r5,r3
 8002c50:	8005ce40 	call	8005ce4 <__muldf3>
 8002c54:	01867074 	movhi	r6,6593
 8002c58:	01cfcab4 	movhi	r7,16170
 8002c5c:	31987544 	addi	r6,r6,25045
 8002c60:	39c06804 	addi	r7,r7,416
 8002c64:	1009883a 	mov	r4,r2
 8002c68:	180b883a 	mov	r5,r3
 8002c6c:	80063fc0 	call	80063fc <__subdf3>
 8002c70:	980d883a 	mov	r6,r19
 8002c74:	900f883a 	mov	r7,r18
 8002c78:	1009883a 	mov	r4,r2
 8002c7c:	180b883a 	mov	r5,r3
 8002c80:	8005ce40 	call	8005ce4 <__muldf3>
 8002c84:	01844474 	movhi	r6,4369
 8002c88:	01cfe074 	movhi	r7,16257
 8002c8c:	31be2984 	addi	r6,r6,-1882
 8002c90:	39c44444 	addi	r7,r7,4369
 8002c94:	1009883a 	mov	r4,r2
 8002c98:	180b883a 	mov	r5,r3
 8002c9c:	80048f80 	call	80048f8 <__adddf3>
 8002ca0:	1011883a 	mov	r8,r2
 8002ca4:	d8800c17 	ldw	r2,48(sp)
 8002ca8:	1839883a 	mov	fp,r3
 8002cac:	10003e26 	beq	r2,zero,8002da8 <__kernel_sin+0x264>
 8002cb0:	000d883a 	mov	r6,zero
 8002cb4:	01cff834 	movhi	r7,16352
 8002cb8:	b809883a 	mov	r4,r23
 8002cbc:	b00b883a 	mov	r5,r22
 8002cc0:	da000015 	stw	r8,0(sp)
 8002cc4:	8005ce40 	call	8005ce4 <__muldf3>
 8002cc8:	da000017 	ldw	r8,0(sp)
 8002ccc:	e00f883a 	mov	r7,fp
 8002cd0:	a809883a 	mov	r4,r21
 8002cd4:	400d883a 	mov	r6,r8
 8002cd8:	a00b883a 	mov	r5,r20
 8002cdc:	d8c00115 	stw	r3,4(sp)
 8002ce0:	d8800015 	stw	r2,0(sp)
 8002ce4:	8005ce40 	call	8005ce4 <__muldf3>
 8002ce8:	da800017 	ldw	r10,0(sp)
 8002cec:	da400117 	ldw	r9,4(sp)
 8002cf0:	100d883a 	mov	r6,r2
 8002cf4:	5009883a 	mov	r4,r10
 8002cf8:	480b883a 	mov	r5,r9
 8002cfc:	180f883a 	mov	r7,r3
 8002d00:	80063fc0 	call	80063fc <__subdf3>
 8002d04:	980d883a 	mov	r6,r19
 8002d08:	900f883a 	mov	r7,r18
 8002d0c:	1009883a 	mov	r4,r2
 8002d10:	180b883a 	mov	r5,r3
 8002d14:	8005ce40 	call	8005ce4 <__muldf3>
 8002d18:	b80d883a 	mov	r6,r23
 8002d1c:	b00f883a 	mov	r7,r22
 8002d20:	1009883a 	mov	r4,r2
 8002d24:	180b883a 	mov	r5,r3
 8002d28:	80063fc0 	call	80063fc <__subdf3>
 8002d2c:	01955574 	movhi	r6,21845
 8002d30:	01cff174 	movhi	r7,16325
 8002d34:	31955244 	addi	r6,r6,21833
 8002d38:	39d55544 	addi	r7,r7,21845
 8002d3c:	a809883a 	mov	r4,r21
 8002d40:	a00b883a 	mov	r5,r20
 8002d44:	1027883a 	mov	r19,r2
 8002d48:	1825883a 	mov	r18,r3
 8002d4c:	8005ce40 	call	8005ce4 <__muldf3>
 8002d50:	100d883a 	mov	r6,r2
 8002d54:	180f883a 	mov	r7,r3
 8002d58:	9809883a 	mov	r4,r19
 8002d5c:	900b883a 	mov	r5,r18
 8002d60:	80048f80 	call	80048f8 <__adddf3>
 8002d64:	100d883a 	mov	r6,r2
 8002d68:	180f883a 	mov	r7,r3
 8002d6c:	8809883a 	mov	r4,r17
 8002d70:	800b883a 	mov	r5,r16
 8002d74:	80063fc0 	call	80063fc <__subdf3>
 8002d78:	dfc00b17 	ldw	ra,44(sp)
 8002d7c:	df000a17 	ldw	fp,40(sp)
 8002d80:	ddc00917 	ldw	r23,36(sp)
 8002d84:	dd800817 	ldw	r22,32(sp)
 8002d88:	dd400717 	ldw	r21,28(sp)
 8002d8c:	dd000617 	ldw	r20,24(sp)
 8002d90:	dcc00517 	ldw	r19,20(sp)
 8002d94:	dc800417 	ldw	r18,16(sp)
 8002d98:	dc400317 	ldw	r17,12(sp)
 8002d9c:	dc000217 	ldw	r16,8(sp)
 8002da0:	dec00c04 	addi	sp,sp,48
 8002da4:	f800283a 	ret
 8002da8:	400d883a 	mov	r6,r8
 8002dac:	9809883a 	mov	r4,r19
 8002db0:	900b883a 	mov	r5,r18
 8002db4:	180f883a 	mov	r7,r3
 8002db8:	8005ce40 	call	8005ce4 <__muldf3>
 8002dbc:	01955574 	movhi	r6,21845
 8002dc0:	01cff174 	movhi	r7,16325
 8002dc4:	31955244 	addi	r6,r6,21833
 8002dc8:	39d55544 	addi	r7,r7,21845
 8002dcc:	1009883a 	mov	r4,r2
 8002dd0:	180b883a 	mov	r5,r3
 8002dd4:	80063fc0 	call	80063fc <__subdf3>
 8002dd8:	a80d883a 	mov	r6,r21
 8002ddc:	a00f883a 	mov	r7,r20
 8002de0:	1009883a 	mov	r4,r2
 8002de4:	180b883a 	mov	r5,r3
 8002de8:	8005ce40 	call	8005ce4 <__muldf3>
 8002dec:	880d883a 	mov	r6,r17
 8002df0:	800f883a 	mov	r7,r16
 8002df4:	1009883a 	mov	r4,r2
 8002df8:	180b883a 	mov	r5,r3
 8002dfc:	80048f80 	call	80048f8 <__adddf3>
 8002e00:	003fdd06 	br	8002d78 <__alt_data_end+0xfc002d78>
 8002e04:	8805883a 	mov	r2,r17
 8002e08:	8007883a 	mov	r3,r16
 8002e0c:	003fda06 	br	8002d78 <__alt_data_end+0xfc002d78>

08002e10 <fabs>:
 8002e10:	00e00034 	movhi	r3,32768
 8002e14:	18ffffc4 	addi	r3,r3,-1
 8002e18:	2005883a 	mov	r2,r4
 8002e1c:	28c6703a 	and	r3,r5,r3
 8002e20:	f800283a 	ret

08002e24 <floor>:
 8002e24:	2811d53a 	srai	r8,r5,20
 8002e28:	defffa04 	addi	sp,sp,-24
 8002e2c:	dcc00315 	stw	r19,12(sp)
 8002e30:	4201ffcc 	andi	r8,r8,2047
 8002e34:	dc800215 	stw	r18,8(sp)
 8002e38:	dc400115 	stw	r17,4(sp)
 8002e3c:	dc000015 	stw	r16,0(sp)
 8002e40:	dfc00515 	stw	ra,20(sp)
 8002e44:	dd000415 	stw	r20,16(sp)
 8002e48:	44bf0044 	addi	r18,r8,-1023
 8002e4c:	018004c4 	movi	r6,19
 8002e50:	2821883a 	mov	r16,r5
 8002e54:	2005883a 	mov	r2,r4
 8002e58:	280f883a 	mov	r7,r5
 8002e5c:	2827883a 	mov	r19,r5
 8002e60:	2023883a 	mov	r17,r4
 8002e64:	34801916 	blt	r6,r18,8002ecc <floor+0xa8>
 8002e68:	90003c16 	blt	r18,zero,8002f5c <floor+0x138>
 8002e6c:	05000434 	movhi	r20,16
 8002e70:	a53fffc4 	addi	r20,r20,-1
 8002e74:	a4a9d83a 	sra	r20,r20,r18
 8002e78:	2d0c703a 	and	r6,r5,r20
 8002e7c:	310cb03a 	or	r6,r6,r4
 8002e80:	30001626 	beq	r6,zero,8002edc <floor+0xb8>
 8002e84:	01a20034 	movhi	r6,34816
 8002e88:	01df8e34 	movhi	r7,32312
 8002e8c:	319d6704 	addi	r6,r6,30108
 8002e90:	39f90f04 	addi	r7,r7,-7108
 8002e94:	80048f80 	call	80048f8 <__adddf3>
 8002e98:	000d883a 	mov	r6,zero
 8002e9c:	000f883a 	mov	r7,zero
 8002ea0:	1009883a 	mov	r4,r2
 8002ea4:	180b883a 	mov	r5,r3
 8002ea8:	8005b140 	call	8005b14 <__gedf2>
 8002eac:	0080040e 	bge	zero,r2,8002ec0 <floor+0x9c>
 8002eb0:	80003c16 	blt	r16,zero,8002fa4 <floor+0x180>
 8002eb4:	0520303a 	nor	r16,zero,r20
 8002eb8:	84e0703a 	and	r16,r16,r19
 8002ebc:	0023883a 	mov	r17,zero
 8002ec0:	8805883a 	mov	r2,r17
 8002ec4:	8007883a 	mov	r3,r16
 8002ec8:	00000506 	br	8002ee0 <floor+0xbc>
 8002ecc:	01800cc4 	movi	r6,51
 8002ed0:	34800b0e 	bge	r6,r18,8002f00 <floor+0xdc>
 8002ed4:	01810004 	movi	r6,1024
 8002ed8:	91802f26 	beq	r18,r6,8002f98 <floor+0x174>
 8002edc:	3807883a 	mov	r3,r7
 8002ee0:	dfc00517 	ldw	ra,20(sp)
 8002ee4:	dd000417 	ldw	r20,16(sp)
 8002ee8:	dcc00317 	ldw	r19,12(sp)
 8002eec:	dc800217 	ldw	r18,8(sp)
 8002ef0:	dc400117 	ldw	r17,4(sp)
 8002ef4:	dc000017 	ldw	r16,0(sp)
 8002ef8:	dec00604 	addi	sp,sp,24
 8002efc:	f800283a 	ret
 8002f00:	423efb44 	addi	r8,r8,-1043
 8002f04:	053fffc4 	movi	r20,-1
 8002f08:	a228d83a 	srl	r20,r20,r8
 8002f0c:	250c703a 	and	r6,r4,r20
 8002f10:	303ff226 	beq	r6,zero,8002edc <__alt_data_end+0xfc002edc>
 8002f14:	01a20034 	movhi	r6,34816
 8002f18:	01df8e34 	movhi	r7,32312
 8002f1c:	319d6704 	addi	r6,r6,30108
 8002f20:	39f90f04 	addi	r7,r7,-7108
 8002f24:	80048f80 	call	80048f8 <__adddf3>
 8002f28:	000d883a 	mov	r6,zero
 8002f2c:	000f883a 	mov	r7,zero
 8002f30:	1009883a 	mov	r4,r2
 8002f34:	180b883a 	mov	r5,r3
 8002f38:	8005b140 	call	8005b14 <__gedf2>
 8002f3c:	00bfe00e 	bge	zero,r2,8002ec0 <__alt_data_end+0xfc002ec0>
 8002f40:	80001c16 	blt	r16,zero,8002fb4 <floor+0x190>
 8002f44:	0510303a 	nor	r8,zero,r20
 8002f48:	9821883a 	mov	r16,r19
 8002f4c:	8a22703a 	and	r17,r17,r8
 8002f50:	8805883a 	mov	r2,r17
 8002f54:	8007883a 	mov	r3,r16
 8002f58:	003fe106 	br	8002ee0 <__alt_data_end+0xfc002ee0>
 8002f5c:	01a20034 	movhi	r6,34816
 8002f60:	01df8e34 	movhi	r7,32312
 8002f64:	319d6704 	addi	r6,r6,30108
 8002f68:	39f90f04 	addi	r7,r7,-7108
 8002f6c:	80048f80 	call	80048f8 <__adddf3>
 8002f70:	000d883a 	mov	r6,zero
 8002f74:	000f883a 	mov	r7,zero
 8002f78:	1009883a 	mov	r4,r2
 8002f7c:	180b883a 	mov	r5,r3
 8002f80:	8005b140 	call	8005b14 <__gedf2>
 8002f84:	00bfce0e 	bge	zero,r2,8002ec0 <__alt_data_end+0xfc002ec0>
 8002f88:	80001516 	blt	r16,zero,8002fe0 <floor+0x1bc>
 8002f8c:	0023883a 	mov	r17,zero
 8002f90:	0021883a 	mov	r16,zero
 8002f94:	003fca06 	br	8002ec0 <__alt_data_end+0xfc002ec0>
 8002f98:	200d883a 	mov	r6,r4
 8002f9c:	80048f80 	call	80048f8 <__adddf3>
 8002fa0:	003fcf06 	br	8002ee0 <__alt_data_end+0xfc002ee0>
 8002fa4:	00800434 	movhi	r2,16
 8002fa8:	14a5d83a 	sra	r18,r2,r18
 8002fac:	84a7883a 	add	r19,r16,r18
 8002fb0:	003fc006 	br	8002eb4 <__alt_data_end+0xfc002eb4>
 8002fb4:	00800504 	movi	r2,20
 8002fb8:	90801326 	beq	r18,r2,8003008 <floor+0x1e4>
 8002fbc:	00800d04 	movi	r2,52
 8002fc0:	14a5c83a 	sub	r18,r2,r18
 8002fc4:	00800044 	movi	r2,1
 8002fc8:	1484983a 	sll	r2,r2,r18
 8002fcc:	1445883a 	add	r2,r2,r17
 8002fd0:	14400b2e 	bgeu	r2,r17,8003000 <floor+0x1dc>
 8002fd4:	84c00044 	addi	r19,r16,1
 8002fd8:	1023883a 	mov	r17,r2
 8002fdc:	003fd906 	br	8002f44 <__alt_data_end+0xfc002f44>
 8002fe0:	00a00034 	movhi	r2,32768
 8002fe4:	10bfffc4 	addi	r2,r2,-1
 8002fe8:	8084703a 	and	r2,r16,r2
 8002fec:	1462b03a 	or	r17,r2,r17
 8002ff0:	883fb326 	beq	r17,zero,8002ec0 <__alt_data_end+0xfc002ec0>
 8002ff4:	0023883a 	mov	r17,zero
 8002ff8:	042ffc34 	movhi	r16,49136
 8002ffc:	003fb006 	br	8002ec0 <__alt_data_end+0xfc002ec0>
 8003000:	1023883a 	mov	r17,r2
 8003004:	003fcf06 	br	8002f44 <__alt_data_end+0xfc002f44>
 8003008:	84c00044 	addi	r19,r16,1
 800300c:	003fcd06 	br	8002f44 <__alt_data_end+0xfc002f44>

08003010 <__fpclassifyd>:
 8003010:	00a00034 	movhi	r2,32768
 8003014:	10bfffc4 	addi	r2,r2,-1
 8003018:	2884703a 	and	r2,r5,r2
 800301c:	10000726 	beq	r2,zero,800303c <__fpclassifyd+0x2c>
 8003020:	00fffc34 	movhi	r3,65520
 8003024:	019ff834 	movhi	r6,32736
 8003028:	28c7883a 	add	r3,r5,r3
 800302c:	31bfffc4 	addi	r6,r6,-1
 8003030:	30c00536 	bltu	r6,r3,8003048 <__fpclassifyd+0x38>
 8003034:	00800104 	movi	r2,4
 8003038:	f800283a 	ret
 800303c:	2000021e 	bne	r4,zero,8003048 <__fpclassifyd+0x38>
 8003040:	00800084 	movi	r2,2
 8003044:	f800283a 	ret
 8003048:	00dffc34 	movhi	r3,32752
 800304c:	019ff834 	movhi	r6,32736
 8003050:	28cb883a 	add	r5,r5,r3
 8003054:	31bfffc4 	addi	r6,r6,-1
 8003058:	317ff62e 	bgeu	r6,r5,8003034 <__alt_data_end+0xfc003034>
 800305c:	01400434 	movhi	r5,16
 8003060:	297fffc4 	addi	r5,r5,-1
 8003064:	28800236 	bltu	r5,r2,8003070 <__fpclassifyd+0x60>
 8003068:	008000c4 	movi	r2,3
 800306c:	f800283a 	ret
 8003070:	10c00226 	beq	r2,r3,800307c <__fpclassifyd+0x6c>
 8003074:	0005883a 	mov	r2,zero
 8003078:	f800283a 	ret
 800307c:	2005003a 	cmpeq	r2,r4,zero
 8003080:	f800283a 	ret

08003084 <matherr>:
 8003084:	0005883a 	mov	r2,zero
 8003088:	f800283a 	ret

0800308c <scalbn>:
 800308c:	2a1ffc2c 	andhi	r8,r5,32752
 8003090:	4011d53a 	srai	r8,r8,20
 8003094:	defffe04 	addi	sp,sp,-8
 8003098:	dc000015 	stw	r16,0(sp)
 800309c:	dfc00115 	stw	ra,4(sp)
 80030a0:	280f883a 	mov	r7,r5
 80030a4:	2015883a 	mov	r10,r4
 80030a8:	3021883a 	mov	r16,r6
 80030ac:	40001e1e 	bne	r8,zero,8003128 <scalbn+0x9c>
 80030b0:	00a00034 	movhi	r2,32768
 80030b4:	10bfffc4 	addi	r2,r2,-1
 80030b8:	2884703a 	and	r2,r5,r2
 80030bc:	1104b03a 	or	r2,r2,r4
 80030c0:	10002226 	beq	r2,zero,800314c <scalbn+0xc0>
 80030c4:	01d0d434 	movhi	r7,17232
 80030c8:	000d883a 	mov	r6,zero
 80030cc:	8005ce40 	call	8005ce4 <__muldf3>
 80030d0:	013ffff4 	movhi	r4,65535
 80030d4:	210f2c04 	addi	r4,r4,15536
 80030d8:	1015883a 	mov	r10,r2
 80030dc:	180f883a 	mov	r7,r3
 80030e0:	81002a16 	blt	r16,r4,800318c <scalbn+0x100>
 80030e4:	191ffc2c 	andhi	r4,r3,32752
 80030e8:	2009d53a 	srai	r4,r4,20
 80030ec:	223ff284 	addi	r8,r4,-54
 80030f0:	8211883a 	add	r8,r16,r8
 80030f4:	0081ff84 	movi	r2,2046
 80030f8:	12002f16 	blt	r2,r8,80031b8 <scalbn+0x12c>
 80030fc:	0200190e 	bge	zero,r8,8003164 <scalbn+0xd8>
 8003100:	4010953a 	slli	r8,r8,20
 8003104:	01600434 	movhi	r5,32784
 8003108:	297fffc4 	addi	r5,r5,-1
 800310c:	194e703a 	and	r7,r3,r5
 8003110:	5005883a 	mov	r2,r10
 8003114:	3a06b03a 	or	r3,r7,r8
 8003118:	dfc00117 	ldw	ra,4(sp)
 800311c:	dc000017 	ldw	r16,0(sp)
 8003120:	dec00204 	addi	sp,sp,8
 8003124:	f800283a 	ret
 8003128:	0081ffc4 	movi	r2,2047
 800312c:	2807883a 	mov	r3,r5
 8003130:	40bfef1e 	bne	r8,r2,80030f0 <__alt_data_end+0xfc0030f0>
 8003134:	200d883a 	mov	r6,r4
 8003138:	80048f80 	call	80048f8 <__adddf3>
 800313c:	dfc00117 	ldw	ra,4(sp)
 8003140:	dc000017 	ldw	r16,0(sp)
 8003144:	dec00204 	addi	sp,sp,8
 8003148:	f800283a 	ret
 800314c:	2005883a 	mov	r2,r4
 8003150:	2807883a 	mov	r3,r5
 8003154:	dfc00117 	ldw	ra,4(sp)
 8003158:	dc000017 	ldw	r16,0(sp)
 800315c:	dec00204 	addi	sp,sp,8
 8003160:	f800283a 	ret
 8003164:	00bff2c4 	movi	r2,-53
 8003168:	4080240e 	bge	r8,r2,80031fc <scalbn+0x170>
 800316c:	00b0d414 	movui	r2,50000
 8003170:	14001116 	blt	r2,r16,80031b8 <scalbn+0x12c>
 8003174:	0130be74 	movhi	r4,49913
 8003178:	01406974 	movhi	r5,421
 800317c:	213cd644 	addi	r4,r4,-3239
 8003180:	295b87c4 	addi	r5,r5,28191
 8003184:	500d883a 	mov	r6,r10
 8003188:	80032280 	call	8003228 <copysign>
 800318c:	01b0be74 	movhi	r6,49913
 8003190:	01c06974 	movhi	r7,421
 8003194:	31bcd644 	addi	r6,r6,-3239
 8003198:	39db87c4 	addi	r7,r7,28191
 800319c:	1009883a 	mov	r4,r2
 80031a0:	180b883a 	mov	r5,r3
 80031a4:	8005ce40 	call	8005ce4 <__muldf3>
 80031a8:	dfc00117 	ldw	ra,4(sp)
 80031ac:	dc000017 	ldw	r16,0(sp)
 80031b0:	dec00204 	addi	sp,sp,8
 80031b4:	f800283a 	ret
 80031b8:	01220034 	movhi	r4,34816
 80031bc:	015f8e34 	movhi	r5,32312
 80031c0:	500d883a 	mov	r6,r10
 80031c4:	211d6704 	addi	r4,r4,30108
 80031c8:	29790f04 	addi	r5,r5,-7108
 80031cc:	80032280 	call	8003228 <copysign>
 80031d0:	01a20034 	movhi	r6,34816
 80031d4:	01df8e34 	movhi	r7,32312
 80031d8:	319d6704 	addi	r6,r6,30108
 80031dc:	39f90f04 	addi	r7,r7,-7108
 80031e0:	1009883a 	mov	r4,r2
 80031e4:	180b883a 	mov	r5,r3
 80031e8:	8005ce40 	call	8005ce4 <__muldf3>
 80031ec:	dfc00117 	ldw	ra,4(sp)
 80031f0:	dc000017 	ldw	r16,0(sp)
 80031f4:	dec00204 	addi	sp,sp,8
 80031f8:	f800283a 	ret
 80031fc:	42000d84 	addi	r8,r8,54
 8003200:	4012953a 	slli	r9,r8,20
 8003204:	01e00434 	movhi	r7,32784
 8003208:	39ffffc4 	addi	r7,r7,-1
 800320c:	19ca703a 	and	r5,r3,r7
 8003210:	000d883a 	mov	r6,zero
 8003214:	01cf2434 	movhi	r7,15504
 8003218:	5009883a 	mov	r4,r10
 800321c:	494ab03a 	or	r5,r9,r5
 8003220:	8005ce40 	call	8005ce4 <__muldf3>
 8003224:	003fbc06 	br	8003118 <__alt_data_end+0xfc003118>

08003228 <copysign>:
 8003228:	2005883a 	mov	r2,r4
 800322c:	01200034 	movhi	r4,32768
 8003230:	213fffc4 	addi	r4,r4,-1
 8003234:	38e0002c 	andhi	r3,r7,32768
 8003238:	290a703a 	and	r5,r5,r4
 800323c:	28c6b03a 	or	r3,r5,r3
 8003240:	f800283a 	ret

08003244 <__divsi3>:
 8003244:	20001b16 	blt	r4,zero,80032b4 <__divsi3+0x70>
 8003248:	000f883a 	mov	r7,zero
 800324c:	28001616 	blt	r5,zero,80032a8 <__divsi3+0x64>
 8003250:	200d883a 	mov	r6,r4
 8003254:	29001a2e 	bgeu	r5,r4,80032c0 <__divsi3+0x7c>
 8003258:	00800804 	movi	r2,32
 800325c:	00c00044 	movi	r3,1
 8003260:	00000106 	br	8003268 <__divsi3+0x24>
 8003264:	10000d26 	beq	r2,zero,800329c <__divsi3+0x58>
 8003268:	294b883a 	add	r5,r5,r5
 800326c:	10bfffc4 	addi	r2,r2,-1
 8003270:	18c7883a 	add	r3,r3,r3
 8003274:	293ffb36 	bltu	r5,r4,8003264 <__alt_data_end+0xfc003264>
 8003278:	0005883a 	mov	r2,zero
 800327c:	18000726 	beq	r3,zero,800329c <__divsi3+0x58>
 8003280:	0005883a 	mov	r2,zero
 8003284:	31400236 	bltu	r6,r5,8003290 <__divsi3+0x4c>
 8003288:	314dc83a 	sub	r6,r6,r5
 800328c:	10c4b03a 	or	r2,r2,r3
 8003290:	1806d07a 	srli	r3,r3,1
 8003294:	280ad07a 	srli	r5,r5,1
 8003298:	183ffa1e 	bne	r3,zero,8003284 <__alt_data_end+0xfc003284>
 800329c:	38000126 	beq	r7,zero,80032a4 <__divsi3+0x60>
 80032a0:	0085c83a 	sub	r2,zero,r2
 80032a4:	f800283a 	ret
 80032a8:	014bc83a 	sub	r5,zero,r5
 80032ac:	39c0005c 	xori	r7,r7,1
 80032b0:	003fe706 	br	8003250 <__alt_data_end+0xfc003250>
 80032b4:	0109c83a 	sub	r4,zero,r4
 80032b8:	01c00044 	movi	r7,1
 80032bc:	003fe306 	br	800324c <__alt_data_end+0xfc00324c>
 80032c0:	00c00044 	movi	r3,1
 80032c4:	003fee06 	br	8003280 <__alt_data_end+0xfc003280>

080032c8 <__modsi3>:
 80032c8:	20001716 	blt	r4,zero,8003328 <__modsi3+0x60>
 80032cc:	000f883a 	mov	r7,zero
 80032d0:	2005883a 	mov	r2,r4
 80032d4:	28001216 	blt	r5,zero,8003320 <__modsi3+0x58>
 80032d8:	2900162e 	bgeu	r5,r4,8003334 <__modsi3+0x6c>
 80032dc:	01800804 	movi	r6,32
 80032e0:	00c00044 	movi	r3,1
 80032e4:	00000106 	br	80032ec <__modsi3+0x24>
 80032e8:	30000a26 	beq	r6,zero,8003314 <__modsi3+0x4c>
 80032ec:	294b883a 	add	r5,r5,r5
 80032f0:	31bfffc4 	addi	r6,r6,-1
 80032f4:	18c7883a 	add	r3,r3,r3
 80032f8:	293ffb36 	bltu	r5,r4,80032e8 <__alt_data_end+0xfc0032e8>
 80032fc:	18000526 	beq	r3,zero,8003314 <__modsi3+0x4c>
 8003300:	1806d07a 	srli	r3,r3,1
 8003304:	11400136 	bltu	r2,r5,800330c <__modsi3+0x44>
 8003308:	1145c83a 	sub	r2,r2,r5
 800330c:	280ad07a 	srli	r5,r5,1
 8003310:	183ffb1e 	bne	r3,zero,8003300 <__alt_data_end+0xfc003300>
 8003314:	38000126 	beq	r7,zero,800331c <__modsi3+0x54>
 8003318:	0085c83a 	sub	r2,zero,r2
 800331c:	f800283a 	ret
 8003320:	014bc83a 	sub	r5,zero,r5
 8003324:	003fec06 	br	80032d8 <__alt_data_end+0xfc0032d8>
 8003328:	0109c83a 	sub	r4,zero,r4
 800332c:	01c00044 	movi	r7,1
 8003330:	003fe706 	br	80032d0 <__alt_data_end+0xfc0032d0>
 8003334:	00c00044 	movi	r3,1
 8003338:	003ff106 	br	8003300 <__alt_data_end+0xfc003300>

0800333c <__udivsi3>:
 800333c:	200d883a 	mov	r6,r4
 8003340:	2900152e 	bgeu	r5,r4,8003398 <__udivsi3+0x5c>
 8003344:	28001416 	blt	r5,zero,8003398 <__udivsi3+0x5c>
 8003348:	00800804 	movi	r2,32
 800334c:	00c00044 	movi	r3,1
 8003350:	00000206 	br	800335c <__udivsi3+0x20>
 8003354:	10000e26 	beq	r2,zero,8003390 <__udivsi3+0x54>
 8003358:	28000516 	blt	r5,zero,8003370 <__udivsi3+0x34>
 800335c:	294b883a 	add	r5,r5,r5
 8003360:	10bfffc4 	addi	r2,r2,-1
 8003364:	18c7883a 	add	r3,r3,r3
 8003368:	293ffa36 	bltu	r5,r4,8003354 <__alt_data_end+0xfc003354>
 800336c:	18000826 	beq	r3,zero,8003390 <__udivsi3+0x54>
 8003370:	0005883a 	mov	r2,zero
 8003374:	31400236 	bltu	r6,r5,8003380 <__udivsi3+0x44>
 8003378:	314dc83a 	sub	r6,r6,r5
 800337c:	10c4b03a 	or	r2,r2,r3
 8003380:	1806d07a 	srli	r3,r3,1
 8003384:	280ad07a 	srli	r5,r5,1
 8003388:	183ffa1e 	bne	r3,zero,8003374 <__alt_data_end+0xfc003374>
 800338c:	f800283a 	ret
 8003390:	0005883a 	mov	r2,zero
 8003394:	f800283a 	ret
 8003398:	00c00044 	movi	r3,1
 800339c:	003ff406 	br	8003370 <__alt_data_end+0xfc003370>

080033a0 <__umodsi3>:
 80033a0:	2005883a 	mov	r2,r4
 80033a4:	2900122e 	bgeu	r5,r4,80033f0 <__umodsi3+0x50>
 80033a8:	28001116 	blt	r5,zero,80033f0 <__umodsi3+0x50>
 80033ac:	01800804 	movi	r6,32
 80033b0:	00c00044 	movi	r3,1
 80033b4:	00000206 	br	80033c0 <__umodsi3+0x20>
 80033b8:	30000c26 	beq	r6,zero,80033ec <__umodsi3+0x4c>
 80033bc:	28000516 	blt	r5,zero,80033d4 <__umodsi3+0x34>
 80033c0:	294b883a 	add	r5,r5,r5
 80033c4:	31bfffc4 	addi	r6,r6,-1
 80033c8:	18c7883a 	add	r3,r3,r3
 80033cc:	293ffa36 	bltu	r5,r4,80033b8 <__alt_data_end+0xfc0033b8>
 80033d0:	18000626 	beq	r3,zero,80033ec <__umodsi3+0x4c>
 80033d4:	1806d07a 	srli	r3,r3,1
 80033d8:	11400136 	bltu	r2,r5,80033e0 <__umodsi3+0x40>
 80033dc:	1145c83a 	sub	r2,r2,r5
 80033e0:	280ad07a 	srli	r5,r5,1
 80033e4:	183ffb1e 	bne	r3,zero,80033d4 <__alt_data_end+0xfc0033d4>
 80033e8:	f800283a 	ret
 80033ec:	f800283a 	ret
 80033f0:	00c00044 	movi	r3,1
 80033f4:	003ff706 	br	80033d4 <__alt_data_end+0xfc0033d4>

080033f8 <__addsf3>:
 80033f8:	defffc04 	addi	sp,sp,-16
 80033fc:	2004d7fa 	srli	r2,r4,31
 8003400:	280cd5fa 	srli	r6,r5,23
 8003404:	dc000015 	stw	r16,0(sp)
 8003408:	00c02034 	movhi	r3,128
 800340c:	2020d5fa 	srli	r16,r4,23
 8003410:	280ed7fa 	srli	r7,r5,31
 8003414:	18ffffc4 	addi	r3,r3,-1
 8003418:	dc400115 	stw	r17,4(sp)
 800341c:	1908703a 	and	r4,r3,r4
 8003420:	194a703a 	and	r5,r3,r5
 8003424:	dfc00315 	stw	ra,12(sp)
 8003428:	dc800215 	stw	r18,8(sp)
 800342c:	14403fcc 	andi	r17,r2,255
 8003430:	84003fcc 	andi	r16,r16,255
 8003434:	200890fa 	slli	r4,r4,3
 8003438:	31803fcc 	andi	r6,r6,255
 800343c:	280a90fa 	slli	r5,r5,3
 8003440:	89c05026 	beq	r17,r7,8003584 <__addsf3+0x18c>
 8003444:	8185c83a 	sub	r2,r16,r6
 8003448:	00807a0e 	bge	zero,r2,8003634 <__addsf3+0x23c>
 800344c:	30001e1e 	bne	r6,zero,80034c8 <__addsf3+0xd0>
 8003450:	28006d1e 	bne	r5,zero,8003608 <__addsf3+0x210>
 8003454:	208001cc 	andi	r2,r4,7
 8003458:	10000426 	beq	r2,zero,800346c <__addsf3+0x74>
 800345c:	208003cc 	andi	r2,r4,15
 8003460:	00c00104 	movi	r3,4
 8003464:	10c00126 	beq	r2,r3,800346c <__addsf3+0x74>
 8003468:	20c9883a 	add	r4,r4,r3
 800346c:	2081002c 	andhi	r2,r4,1024
 8003470:	10003926 	beq	r2,zero,8003558 <__addsf3+0x160>
 8003474:	84000044 	addi	r16,r16,1
 8003478:	00803fc4 	movi	r2,255
 800347c:	80807826 	beq	r16,r2,8003660 <__addsf3+0x268>
 8003480:	200891ba 	slli	r4,r4,6
 8003484:	8805883a 	mov	r2,r17
 8003488:	2008d27a 	srli	r4,r4,9
 800348c:	84003fcc 	andi	r16,r16,255
 8003490:	800695fa 	slli	r3,r16,23
 8003494:	10803fcc 	andi	r2,r2,255
 8003498:	04002034 	movhi	r16,128
 800349c:	843fffc4 	addi	r16,r16,-1
 80034a0:	100497fa 	slli	r2,r2,31
 80034a4:	2408703a 	and	r4,r4,r16
 80034a8:	20e0b03a 	or	r16,r4,r3
 80034ac:	8084b03a 	or	r2,r16,r2
 80034b0:	dfc00317 	ldw	ra,12(sp)
 80034b4:	dc800217 	ldw	r18,8(sp)
 80034b8:	dc400117 	ldw	r17,4(sp)
 80034bc:	dc000017 	ldw	r16,0(sp)
 80034c0:	dec00404 	addi	sp,sp,16
 80034c4:	f800283a 	ret
 80034c8:	00c03fc4 	movi	r3,255
 80034cc:	80ffe126 	beq	r16,r3,8003454 <__alt_data_end+0xfc003454>
 80034d0:	29410034 	orhi	r5,r5,1024
 80034d4:	00c006c4 	movi	r3,27
 80034d8:	18807516 	blt	r3,r2,80036b0 <__addsf3+0x2b8>
 80034dc:	00c00804 	movi	r3,32
 80034e0:	1887c83a 	sub	r3,r3,r2
 80034e4:	28c6983a 	sll	r3,r5,r3
 80034e8:	288ad83a 	srl	r5,r5,r2
 80034ec:	1804c03a 	cmpne	r2,r3,zero
 80034f0:	288ab03a 	or	r5,r5,r2
 80034f4:	2149c83a 	sub	r4,r4,r5
 80034f8:	2081002c 	andhi	r2,r4,1024
 80034fc:	10001426 	beq	r2,zero,8003550 <__addsf3+0x158>
 8003500:	04810034 	movhi	r18,1024
 8003504:	94bfffc4 	addi	r18,r18,-1
 8003508:	24a4703a 	and	r18,r4,r18
 800350c:	9009883a 	mov	r4,r18
 8003510:	800710c0 	call	800710c <__clzsi2>
 8003514:	10bffec4 	addi	r2,r2,-5
 8003518:	90a4983a 	sll	r18,r18,r2
 800351c:	14005416 	blt	r2,r16,8003670 <__addsf3+0x278>
 8003520:	1405c83a 	sub	r2,r2,r16
 8003524:	11000044 	addi	r4,r2,1
 8003528:	00800804 	movi	r2,32
 800352c:	1105c83a 	sub	r2,r2,r4
 8003530:	9084983a 	sll	r2,r18,r2
 8003534:	9124d83a 	srl	r18,r18,r4
 8003538:	0021883a 	mov	r16,zero
 800353c:	1008c03a 	cmpne	r4,r2,zero
 8003540:	9108b03a 	or	r4,r18,r4
 8003544:	003fc306 	br	8003454 <__alt_data_end+0xfc003454>
 8003548:	1000db26 	beq	r2,zero,80038b8 <__addsf3+0x4c0>
 800354c:	1009883a 	mov	r4,r2
 8003550:	208001cc 	andi	r2,r4,7
 8003554:	103fc11e 	bne	r2,zero,800345c <__alt_data_end+0xfc00345c>
 8003558:	2006d0fa 	srli	r3,r4,3
 800355c:	01003fc4 	movi	r4,255
 8003560:	8805883a 	mov	r2,r17
 8003564:	8100241e 	bne	r16,r4,80035f8 <__addsf3+0x200>
 8003568:	18006e26 	beq	r3,zero,8003724 <__addsf3+0x32c>
 800356c:	19001034 	orhi	r4,r3,64
 8003570:	00c02034 	movhi	r3,128
 8003574:	18ffffc4 	addi	r3,r3,-1
 8003578:	043fffc4 	movi	r16,-1
 800357c:	20c8703a 	and	r4,r4,r3
 8003580:	003fc206 	br	800348c <__alt_data_end+0xfc00348c>
 8003584:	8187c83a 	sub	r3,r16,r6
 8003588:	00c03e0e 	bge	zero,r3,8003684 <__addsf3+0x28c>
 800358c:	30002326 	beq	r6,zero,800361c <__addsf3+0x224>
 8003590:	01803fc4 	movi	r6,255
 8003594:	81bfaf26 	beq	r16,r6,8003454 <__alt_data_end+0xfc003454>
 8003598:	29410034 	orhi	r5,r5,1024
 800359c:	018006c4 	movi	r6,27
 80035a0:	30c07416 	blt	r6,r3,8003774 <__addsf3+0x37c>
 80035a4:	01800804 	movi	r6,32
 80035a8:	30cdc83a 	sub	r6,r6,r3
 80035ac:	298c983a 	sll	r6,r5,r6
 80035b0:	28cad83a 	srl	r5,r5,r3
 80035b4:	3006c03a 	cmpne	r3,r6,zero
 80035b8:	28cab03a 	or	r5,r5,r3
 80035bc:	2149883a 	add	r4,r4,r5
 80035c0:	20c1002c 	andhi	r3,r4,1024
 80035c4:	183fe226 	beq	r3,zero,8003550 <__alt_data_end+0xfc003550>
 80035c8:	84000044 	addi	r16,r16,1
 80035cc:	00c03fc4 	movi	r3,255
 80035d0:	80c05426 	beq	r16,r3,8003724 <__addsf3+0x32c>
 80035d4:	00bf0034 	movhi	r2,64512
 80035d8:	10bfffc4 	addi	r2,r2,-1
 80035dc:	20c0004c 	andi	r3,r4,1
 80035e0:	2088703a 	and	r4,r4,r2
 80035e4:	2008d07a 	srli	r4,r4,1
 80035e8:	20c8b03a 	or	r4,r4,r3
 80035ec:	003f9906 	br	8003454 <__alt_data_end+0xfc003454>
 80035f0:	0007883a 	mov	r3,zero
 80035f4:	0005883a 	mov	r2,zero
 80035f8:	01002034 	movhi	r4,128
 80035fc:	213fffc4 	addi	r4,r4,-1
 8003600:	1908703a 	and	r4,r3,r4
 8003604:	003fa106 	br	800348c <__alt_data_end+0xfc00348c>
 8003608:	10bfffc4 	addi	r2,r2,-1
 800360c:	103fb926 	beq	r2,zero,80034f4 <__alt_data_end+0xfc0034f4>
 8003610:	00c03fc4 	movi	r3,255
 8003614:	80ffaf1e 	bne	r16,r3,80034d4 <__alt_data_end+0xfc0034d4>
 8003618:	003f8e06 	br	8003454 <__alt_data_end+0xfc003454>
 800361c:	283f8d26 	beq	r5,zero,8003454 <__alt_data_end+0xfc003454>
 8003620:	18ffffc4 	addi	r3,r3,-1
 8003624:	183fe526 	beq	r3,zero,80035bc <__alt_data_end+0xfc0035bc>
 8003628:	01803fc4 	movi	r6,255
 800362c:	81bfdb1e 	bne	r16,r6,800359c <__alt_data_end+0xfc00359c>
 8003630:	003f8806 	br	8003454 <__alt_data_end+0xfc003454>
 8003634:	1000201e 	bne	r2,zero,80036b8 <__addsf3+0x2c0>
 8003638:	80800044 	addi	r2,r16,1
 800363c:	10803fcc 	andi	r2,r2,255
 8003640:	01800044 	movi	r6,1
 8003644:	3080450e 	bge	r6,r2,800375c <__addsf3+0x364>
 8003648:	2165c83a 	sub	r18,r4,r5
 800364c:	90c1002c 	andhi	r3,r18,1024
 8003650:	18002b26 	beq	r3,zero,8003700 <__addsf3+0x308>
 8003654:	2925c83a 	sub	r18,r5,r4
 8003658:	3823883a 	mov	r17,r7
 800365c:	003fab06 	br	800350c <__alt_data_end+0xfc00350c>
 8003660:	8805883a 	mov	r2,r17
 8003664:	043fffc4 	movi	r16,-1
 8003668:	0009883a 	mov	r4,zero
 800366c:	003f8706 	br	800348c <__alt_data_end+0xfc00348c>
 8003670:	013f0034 	movhi	r4,64512
 8003674:	213fffc4 	addi	r4,r4,-1
 8003678:	80a1c83a 	sub	r16,r16,r2
 800367c:	9108703a 	and	r4,r18,r4
 8003680:	003f7406 	br	8003454 <__alt_data_end+0xfc003454>
 8003684:	1800411e 	bne	r3,zero,800378c <__addsf3+0x394>
 8003688:	80c00044 	addi	r3,r16,1
 800368c:	19c03fcc 	andi	r7,r3,255
 8003690:	01800044 	movi	r6,1
 8003694:	31c0260e 	bge	r6,r7,8003730 <__addsf3+0x338>
 8003698:	01803fc4 	movi	r6,255
 800369c:	19802126 	beq	r3,r6,8003724 <__addsf3+0x32c>
 80036a0:	2149883a 	add	r4,r4,r5
 80036a4:	2008d07a 	srli	r4,r4,1
 80036a8:	1821883a 	mov	r16,r3
 80036ac:	003f6906 	br	8003454 <__alt_data_end+0xfc003454>
 80036b0:	01400044 	movi	r5,1
 80036b4:	003f8f06 	br	80034f4 <__alt_data_end+0xfc0034f4>
 80036b8:	8000151e 	bne	r16,zero,8003710 <__addsf3+0x318>
 80036bc:	20002f26 	beq	r4,zero,800377c <__addsf3+0x384>
 80036c0:	0084303a 	nor	r2,zero,r2
 80036c4:	10000a26 	beq	r2,zero,80036f0 <__addsf3+0x2f8>
 80036c8:	00c03fc4 	movi	r3,255
 80036cc:	30c02b26 	beq	r6,r3,800377c <__addsf3+0x384>
 80036d0:	00c006c4 	movi	r3,27
 80036d4:	18806d16 	blt	r3,r2,800388c <__addsf3+0x494>
 80036d8:	00c00804 	movi	r3,32
 80036dc:	1887c83a 	sub	r3,r3,r2
 80036e0:	20c6983a 	sll	r3,r4,r3
 80036e4:	2084d83a 	srl	r2,r4,r2
 80036e8:	1808c03a 	cmpne	r4,r3,zero
 80036ec:	1108b03a 	or	r4,r2,r4
 80036f0:	2909c83a 	sub	r4,r5,r4
 80036f4:	3021883a 	mov	r16,r6
 80036f8:	3823883a 	mov	r17,r7
 80036fc:	003f7e06 	br	80034f8 <__alt_data_end+0xfc0034f8>
 8003700:	903f821e 	bne	r18,zero,800350c <__alt_data_end+0xfc00350c>
 8003704:	0005883a 	mov	r2,zero
 8003708:	0021883a 	mov	r16,zero
 800370c:	003fba06 	br	80035f8 <__alt_data_end+0xfc0035f8>
 8003710:	00c03fc4 	movi	r3,255
 8003714:	30c01926 	beq	r6,r3,800377c <__addsf3+0x384>
 8003718:	0085c83a 	sub	r2,zero,r2
 800371c:	21010034 	orhi	r4,r4,1024
 8003720:	003feb06 	br	80036d0 <__alt_data_end+0xfc0036d0>
 8003724:	043fffc4 	movi	r16,-1
 8003728:	0009883a 	mov	r4,zero
 800372c:	003f5706 	br	800348c <__alt_data_end+0xfc00348c>
 8003730:	80004a1e 	bne	r16,zero,800385c <__addsf3+0x464>
 8003734:	20005926 	beq	r4,zero,800389c <__addsf3+0x4a4>
 8003738:	283f4626 	beq	r5,zero,8003454 <__alt_data_end+0xfc003454>
 800373c:	2149883a 	add	r4,r4,r5
 8003740:	2081002c 	andhi	r2,r4,1024
 8003744:	103f8226 	beq	r2,zero,8003550 <__alt_data_end+0xfc003550>
 8003748:	00bf0034 	movhi	r2,64512
 800374c:	10bfffc4 	addi	r2,r2,-1
 8003750:	3021883a 	mov	r16,r6
 8003754:	2088703a 	and	r4,r4,r2
 8003758:	003f3e06 	br	8003454 <__alt_data_end+0xfc003454>
 800375c:	8000121e 	bne	r16,zero,80037a8 <__addsf3+0x3b0>
 8003760:	2000261e 	bne	r4,zero,80037fc <__addsf3+0x404>
 8003764:	283fa226 	beq	r5,zero,80035f0 <__alt_data_end+0xfc0035f0>
 8003768:	2809883a 	mov	r4,r5
 800376c:	3823883a 	mov	r17,r7
 8003770:	003f3806 	br	8003454 <__alt_data_end+0xfc003454>
 8003774:	01400044 	movi	r5,1
 8003778:	003f9006 	br	80035bc <__alt_data_end+0xfc0035bc>
 800377c:	2809883a 	mov	r4,r5
 8003780:	3021883a 	mov	r16,r6
 8003784:	3823883a 	mov	r17,r7
 8003788:	003f3206 	br	8003454 <__alt_data_end+0xfc003454>
 800378c:	80000c1e 	bne	r16,zero,80037c0 <__addsf3+0x3c8>
 8003790:	20002f26 	beq	r4,zero,8003850 <__addsf3+0x458>
 8003794:	00c6303a 	nor	r3,zero,r3
 8003798:	18002b1e 	bne	r3,zero,8003848 <__addsf3+0x450>
 800379c:	2149883a 	add	r4,r4,r5
 80037a0:	3021883a 	mov	r16,r6
 80037a4:	003f8606 	br	80035c0 <__alt_data_end+0xfc0035c0>
 80037a8:	20001b1e 	bne	r4,zero,8003818 <__addsf3+0x420>
 80037ac:	28003926 	beq	r5,zero,8003894 <__addsf3+0x49c>
 80037b0:	2809883a 	mov	r4,r5
 80037b4:	3823883a 	mov	r17,r7
 80037b8:	04003fc4 	movi	r16,255
 80037bc:	003f2506 	br	8003454 <__alt_data_end+0xfc003454>
 80037c0:	01c03fc4 	movi	r7,255
 80037c4:	31c02226 	beq	r6,r7,8003850 <__addsf3+0x458>
 80037c8:	00c7c83a 	sub	r3,zero,r3
 80037cc:	21010034 	orhi	r4,r4,1024
 80037d0:	01c006c4 	movi	r7,27
 80037d4:	38c03616 	blt	r7,r3,80038b0 <__addsf3+0x4b8>
 80037d8:	01c00804 	movi	r7,32
 80037dc:	38cfc83a 	sub	r7,r7,r3
 80037e0:	21ce983a 	sll	r7,r4,r7
 80037e4:	20c6d83a 	srl	r3,r4,r3
 80037e8:	3808c03a 	cmpne	r4,r7,zero
 80037ec:	1906b03a 	or	r3,r3,r4
 80037f0:	1949883a 	add	r4,r3,r5
 80037f4:	3021883a 	mov	r16,r6
 80037f8:	003f7106 	br	80035c0 <__alt_data_end+0xfc0035c0>
 80037fc:	283f1526 	beq	r5,zero,8003454 <__alt_data_end+0xfc003454>
 8003800:	2145c83a 	sub	r2,r4,r5
 8003804:	10c1002c 	andhi	r3,r2,1024
 8003808:	183f4f26 	beq	r3,zero,8003548 <__alt_data_end+0xfc003548>
 800380c:	2909c83a 	sub	r4,r5,r4
 8003810:	3823883a 	mov	r17,r7
 8003814:	003f0f06 	br	8003454 <__alt_data_end+0xfc003454>
 8003818:	28001a26 	beq	r5,zero,8003884 <__addsf3+0x48c>
 800381c:	2008d0fa 	srli	r4,r4,3
 8003820:	2080102c 	andhi	r2,r4,64
 8003824:	10000526 	beq	r2,zero,800383c <__addsf3+0x444>
 8003828:	280ad0fa 	srli	r5,r5,3
 800382c:	2880102c 	andhi	r2,r5,64
 8003830:	1000021e 	bne	r2,zero,800383c <__addsf3+0x444>
 8003834:	2809883a 	mov	r4,r5
 8003838:	3823883a 	mov	r17,r7
 800383c:	200890fa 	slli	r4,r4,3
 8003840:	04003fc4 	movi	r16,255
 8003844:	003f0306 	br	8003454 <__alt_data_end+0xfc003454>
 8003848:	01c03fc4 	movi	r7,255
 800384c:	31ffe01e 	bne	r6,r7,80037d0 <__alt_data_end+0xfc0037d0>
 8003850:	2809883a 	mov	r4,r5
 8003854:	3021883a 	mov	r16,r6
 8003858:	003efe06 	br	8003454 <__alt_data_end+0xfc003454>
 800385c:	20001126 	beq	r4,zero,80038a4 <__addsf3+0x4ac>
 8003860:	28000826 	beq	r5,zero,8003884 <__addsf3+0x48c>
 8003864:	2008d0fa 	srli	r4,r4,3
 8003868:	2080102c 	andhi	r2,r4,64
 800386c:	103ff326 	beq	r2,zero,800383c <__alt_data_end+0xfc00383c>
 8003870:	280ad0fa 	srli	r5,r5,3
 8003874:	2880102c 	andhi	r2,r5,64
 8003878:	103ff01e 	bne	r2,zero,800383c <__alt_data_end+0xfc00383c>
 800387c:	2809883a 	mov	r4,r5
 8003880:	003fee06 	br	800383c <__alt_data_end+0xfc00383c>
 8003884:	04003fc4 	movi	r16,255
 8003888:	003ef206 	br	8003454 <__alt_data_end+0xfc003454>
 800388c:	01000044 	movi	r4,1
 8003890:	003f9706 	br	80036f0 <__alt_data_end+0xfc0036f0>
 8003894:	0005883a 	mov	r2,zero
 8003898:	003f3406 	br	800356c <__alt_data_end+0xfc00356c>
 800389c:	2809883a 	mov	r4,r5
 80038a0:	003eec06 	br	8003454 <__alt_data_end+0xfc003454>
 80038a4:	2809883a 	mov	r4,r5
 80038a8:	04003fc4 	movi	r16,255
 80038ac:	003ee906 	br	8003454 <__alt_data_end+0xfc003454>
 80038b0:	00c00044 	movi	r3,1
 80038b4:	003fce06 	br	80037f0 <__alt_data_end+0xfc0037f0>
 80038b8:	0005883a 	mov	r2,zero
 80038bc:	003f4e06 	br	80035f8 <__alt_data_end+0xfc0035f8>

080038c0 <__divsf3>:
 80038c0:	defff504 	addi	sp,sp,-44
 80038c4:	200cd5fa 	srli	r6,r4,23
 80038c8:	dcc00415 	stw	r19,16(sp)
 80038cc:	2026d7fa 	srli	r19,r4,31
 80038d0:	00c02034 	movhi	r3,128
 80038d4:	dd800715 	stw	r22,28(sp)
 80038d8:	dd000515 	stw	r20,20(sp)
 80038dc:	dc800315 	stw	r18,12(sp)
 80038e0:	18ffffc4 	addi	r3,r3,-1
 80038e4:	dfc00a15 	stw	ra,40(sp)
 80038e8:	df000915 	stw	fp,36(sp)
 80038ec:	ddc00815 	stw	r23,32(sp)
 80038f0:	dd400615 	stw	r21,24(sp)
 80038f4:	dc400215 	stw	r17,8(sp)
 80038f8:	dc000115 	stw	r16,4(sp)
 80038fc:	35003fcc 	andi	r20,r6,255
 8003900:	1924703a 	and	r18,r3,r4
 8003904:	9d803fcc 	andi	r22,r19,255
 8003908:	a0005226 	beq	r20,zero,8003a54 <__divsf3+0x194>
 800390c:	00803fc4 	movi	r2,255
 8003910:	a0802e26 	beq	r20,r2,80039cc <__divsf3+0x10c>
 8003914:	91002034 	orhi	r4,r18,128
 8003918:	202490fa 	slli	r18,r4,3
 800391c:	a53fe044 	addi	r20,r20,-127
 8003920:	0021883a 	mov	r16,zero
 8003924:	002f883a 	mov	r23,zero
 8003928:	280cd5fa 	srli	r6,r5,23
 800392c:	282ad7fa 	srli	r21,r5,31
 8003930:	00c02034 	movhi	r3,128
 8003934:	18ffffc4 	addi	r3,r3,-1
 8003938:	31803fcc 	andi	r6,r6,255
 800393c:	1962703a 	and	r17,r3,r5
 8003940:	af003fcc 	andi	fp,r21,255
 8003944:	30004a26 	beq	r6,zero,8003a70 <__divsf3+0x1b0>
 8003948:	00803fc4 	movi	r2,255
 800394c:	30804526 	beq	r6,r2,8003a64 <__divsf3+0x1a4>
 8003950:	89402034 	orhi	r5,r17,128
 8003954:	282290fa 	slli	r17,r5,3
 8003958:	31bfe044 	addi	r6,r6,-127
 800395c:	000b883a 	mov	r5,zero
 8003960:	2c20b03a 	or	r16,r5,r16
 8003964:	802090ba 	slli	r16,r16,2
 8003968:	00820034 	movhi	r2,2048
 800396c:	108e6304 	addi	r2,r2,14732
 8003970:	80a1883a 	add	r16,r16,r2
 8003974:	81000017 	ldw	r4,0(r16)
 8003978:	9d46f03a 	xor	r3,r19,r21
 800397c:	180f883a 	mov	r7,r3
 8003980:	18803fcc 	andi	r2,r3,255
 8003984:	a18dc83a 	sub	r6,r20,r6
 8003988:	2000683a 	jmp	r4
 800398c:	08003b70 	cmpltui	zero,at,237
 8003990:	080039f4 	orhi	zero,at,231
 8003994:	08003b64 	muli	zero,at,237
 8003998:	080039e0 	cmpeqi	zero,at,231
 800399c:	08003b64 	muli	zero,at,237
 80039a0:	08003b3c 	xorhi	zero,at,236
 80039a4:	08003b64 	muli	zero,at,237
 80039a8:	080039e0 	cmpeqi	zero,at,231
 80039ac:	080039f4 	orhi	zero,at,231
 80039b0:	080039f4 	orhi	zero,at,231
 80039b4:	08003b3c 	xorhi	zero,at,236
 80039b8:	080039e0 	cmpeqi	zero,at,231
 80039bc:	08003c50 	cmplti	zero,at,241
 80039c0:	08003c50 	cmplti	zero,at,241
 80039c4:	08003c50 	cmplti	zero,at,241
 80039c8:	08003c04 	addi	zero,at,240
 80039cc:	9000581e 	bne	r18,zero,8003b30 <__divsf3+0x270>
 80039d0:	04000204 	movi	r16,8
 80039d4:	05c00084 	movi	r23,2
 80039d8:	003fd306 	br	8003928 <__alt_data_end+0xfc003928>
 80039dc:	0023883a 	mov	r17,zero
 80039e0:	e02d883a 	mov	r22,fp
 80039e4:	282f883a 	mov	r23,r5
 80039e8:	00800084 	movi	r2,2
 80039ec:	b8808f1e 	bne	r23,r2,8003c2c <__divsf3+0x36c>
 80039f0:	b005883a 	mov	r2,r22
 80039f4:	11c0004c 	andi	r7,r2,1
 80039f8:	013fffc4 	movi	r4,-1
 80039fc:	000d883a 	mov	r6,zero
 8003a00:	21003fcc 	andi	r4,r4,255
 8003a04:	200895fa 	slli	r4,r4,23
 8003a08:	38803fcc 	andi	r2,r7,255
 8003a0c:	00c02034 	movhi	r3,128
 8003a10:	100497fa 	slli	r2,r2,31
 8003a14:	18ffffc4 	addi	r3,r3,-1
 8003a18:	30c6703a 	and	r3,r6,r3
 8003a1c:	1906b03a 	or	r3,r3,r4
 8003a20:	1884b03a 	or	r2,r3,r2
 8003a24:	dfc00a17 	ldw	ra,40(sp)
 8003a28:	df000917 	ldw	fp,36(sp)
 8003a2c:	ddc00817 	ldw	r23,32(sp)
 8003a30:	dd800717 	ldw	r22,28(sp)
 8003a34:	dd400617 	ldw	r21,24(sp)
 8003a38:	dd000517 	ldw	r20,20(sp)
 8003a3c:	dcc00417 	ldw	r19,16(sp)
 8003a40:	dc800317 	ldw	r18,12(sp)
 8003a44:	dc400217 	ldw	r17,8(sp)
 8003a48:	dc000117 	ldw	r16,4(sp)
 8003a4c:	dec00b04 	addi	sp,sp,44
 8003a50:	f800283a 	ret
 8003a54:	90002b1e 	bne	r18,zero,8003b04 <__divsf3+0x244>
 8003a58:	04000104 	movi	r16,4
 8003a5c:	05c00044 	movi	r23,1
 8003a60:	003fb106 	br	8003928 <__alt_data_end+0xfc003928>
 8003a64:	8800251e 	bne	r17,zero,8003afc <__divsf3+0x23c>
 8003a68:	01400084 	movi	r5,2
 8003a6c:	00000206 	br	8003a78 <__divsf3+0x1b8>
 8003a70:	88001a1e 	bne	r17,zero,8003adc <__divsf3+0x21c>
 8003a74:	01400044 	movi	r5,1
 8003a78:	8160b03a 	or	r16,r16,r5
 8003a7c:	802090ba 	slli	r16,r16,2
 8003a80:	00c20034 	movhi	r3,2048
 8003a84:	18cea704 	addi	r3,r3,15004
 8003a88:	80e1883a 	add	r16,r16,r3
 8003a8c:	80c00017 	ldw	r3,0(r16)
 8003a90:	9d44f03a 	xor	r2,r19,r21
 8003a94:	a18dc83a 	sub	r6,r20,r6
 8003a98:	1800683a 	jmp	r3
 8003a9c:	080039f4 	orhi	zero,at,231
 8003aa0:	080039f4 	orhi	zero,at,231
 8003aa4:	08003c40 	call	8003c4 <__ram_exceptions_end+0x7e017c>
 8003aa8:	080039dc 	xori	zero,at,231
 8003aac:	08003c40 	call	8003c4 <__ram_exceptions_end+0x7e017c>
 8003ab0:	08003b3c 	xorhi	zero,at,236
 8003ab4:	08003c40 	call	8003c4 <__ram_exceptions_end+0x7e017c>
 8003ab8:	080039dc 	xori	zero,at,231
 8003abc:	080039f4 	orhi	zero,at,231
 8003ac0:	080039f4 	orhi	zero,at,231
 8003ac4:	08003b3c 	xorhi	zero,at,236
 8003ac8:	080039dc 	xori	zero,at,231
 8003acc:	08003c50 	cmplti	zero,at,241
 8003ad0:	08003c50 	cmplti	zero,at,241
 8003ad4:	08003c50 	cmplti	zero,at,241
 8003ad8:	08003c68 	cmpgeui	zero,at,241
 8003adc:	8809883a 	mov	r4,r17
 8003ae0:	800710c0 	call	800710c <__clzsi2>
 8003ae4:	10fffec4 	addi	r3,r2,-5
 8003ae8:	10801d84 	addi	r2,r2,118
 8003aec:	88e2983a 	sll	r17,r17,r3
 8003af0:	008dc83a 	sub	r6,zero,r2
 8003af4:	000b883a 	mov	r5,zero
 8003af8:	003f9906 	br	8003960 <__alt_data_end+0xfc003960>
 8003afc:	014000c4 	movi	r5,3
 8003b00:	003f9706 	br	8003960 <__alt_data_end+0xfc003960>
 8003b04:	9009883a 	mov	r4,r18
 8003b08:	d9400015 	stw	r5,0(sp)
 8003b0c:	800710c0 	call	800710c <__clzsi2>
 8003b10:	10fffec4 	addi	r3,r2,-5
 8003b14:	11801d84 	addi	r6,r2,118
 8003b18:	90e4983a 	sll	r18,r18,r3
 8003b1c:	01a9c83a 	sub	r20,zero,r6
 8003b20:	0021883a 	mov	r16,zero
 8003b24:	002f883a 	mov	r23,zero
 8003b28:	d9400017 	ldw	r5,0(sp)
 8003b2c:	003f7e06 	br	8003928 <__alt_data_end+0xfc003928>
 8003b30:	04000304 	movi	r16,12
 8003b34:	05c000c4 	movi	r23,3
 8003b38:	003f7b06 	br	8003928 <__alt_data_end+0xfc003928>
 8003b3c:	01802034 	movhi	r6,128
 8003b40:	000f883a 	mov	r7,zero
 8003b44:	31bfffc4 	addi	r6,r6,-1
 8003b48:	013fffc4 	movi	r4,-1
 8003b4c:	003fac06 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003b50:	01400044 	movi	r5,1
 8003b54:	2909c83a 	sub	r4,r5,r4
 8003b58:	00c006c4 	movi	r3,27
 8003b5c:	19004b0e 	bge	r3,r4,8003c8c <__divsf3+0x3cc>
 8003b60:	114e703a 	and	r7,r2,r5
 8003b64:	0009883a 	mov	r4,zero
 8003b68:	000d883a 	mov	r6,zero
 8003b6c:	003fa406 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003b70:	9006917a 	slli	r3,r18,5
 8003b74:	8822917a 	slli	r17,r17,5
 8003b78:	1c40372e 	bgeu	r3,r17,8003c58 <__divsf3+0x398>
 8003b7c:	31bfffc4 	addi	r6,r6,-1
 8003b80:	010006c4 	movi	r4,27
 8003b84:	000b883a 	mov	r5,zero
 8003b88:	180f883a 	mov	r7,r3
 8003b8c:	294b883a 	add	r5,r5,r5
 8003b90:	18c7883a 	add	r3,r3,r3
 8003b94:	38000116 	blt	r7,zero,8003b9c <__divsf3+0x2dc>
 8003b98:	1c400236 	bltu	r3,r17,8003ba4 <__divsf3+0x2e4>
 8003b9c:	1c47c83a 	sub	r3,r3,r17
 8003ba0:	29400054 	ori	r5,r5,1
 8003ba4:	213fffc4 	addi	r4,r4,-1
 8003ba8:	203ff71e 	bne	r4,zero,8003b88 <__alt_data_end+0xfc003b88>
 8003bac:	1806c03a 	cmpne	r3,r3,zero
 8003bb0:	1962b03a 	or	r17,r3,r5
 8003bb4:	31001fc4 	addi	r4,r6,127
 8003bb8:	013fe50e 	bge	zero,r4,8003b50 <__alt_data_end+0xfc003b50>
 8003bbc:	88c001cc 	andi	r3,r17,7
 8003bc0:	18000426 	beq	r3,zero,8003bd4 <__divsf3+0x314>
 8003bc4:	88c003cc 	andi	r3,r17,15
 8003bc8:	01400104 	movi	r5,4
 8003bcc:	19400126 	beq	r3,r5,8003bd4 <__divsf3+0x314>
 8003bd0:	8963883a 	add	r17,r17,r5
 8003bd4:	88c2002c 	andhi	r3,r17,2048
 8003bd8:	18000426 	beq	r3,zero,8003bec <__divsf3+0x32c>
 8003bdc:	00fe0034 	movhi	r3,63488
 8003be0:	18ffffc4 	addi	r3,r3,-1
 8003be4:	31002004 	addi	r4,r6,128
 8003be8:	88e2703a 	and	r17,r17,r3
 8003bec:	00c03f84 	movi	r3,254
 8003bf0:	193f8016 	blt	r3,r4,80039f4 <__alt_data_end+0xfc0039f4>
 8003bf4:	880c91ba 	slli	r6,r17,6
 8003bf8:	11c0004c 	andi	r7,r2,1
 8003bfc:	300cd27a 	srli	r6,r6,9
 8003c00:	003f7f06 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003c04:	9080102c 	andhi	r2,r18,64
 8003c08:	10000226 	beq	r2,zero,8003c14 <__divsf3+0x354>
 8003c0c:	8880102c 	andhi	r2,r17,64
 8003c10:	10001826 	beq	r2,zero,8003c74 <__divsf3+0x3b4>
 8003c14:	00802034 	movhi	r2,128
 8003c18:	91801034 	orhi	r6,r18,64
 8003c1c:	10bfffc4 	addi	r2,r2,-1
 8003c20:	980f883a 	mov	r7,r19
 8003c24:	308c703a 	and	r6,r6,r2
 8003c28:	003fc706 	br	8003b48 <__alt_data_end+0xfc003b48>
 8003c2c:	008000c4 	movi	r2,3
 8003c30:	b8802d26 	beq	r23,r2,8003ce8 <__divsf3+0x428>
 8003c34:	00c00044 	movi	r3,1
 8003c38:	b005883a 	mov	r2,r22
 8003c3c:	b8ffdd1e 	bne	r23,r3,8003bb4 <__alt_data_end+0xfc003bb4>
 8003c40:	11c0004c 	andi	r7,r2,1
 8003c44:	0009883a 	mov	r4,zero
 8003c48:	000d883a 	mov	r6,zero
 8003c4c:	003f6c06 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003c50:	9023883a 	mov	r17,r18
 8003c54:	003f6406 	br	80039e8 <__alt_data_end+0xfc0039e8>
 8003c58:	1c47c83a 	sub	r3,r3,r17
 8003c5c:	01000684 	movi	r4,26
 8003c60:	01400044 	movi	r5,1
 8003c64:	003fc806 	br	8003b88 <__alt_data_end+0xfc003b88>
 8003c68:	9080102c 	andhi	r2,r18,64
 8003c6c:	103fe926 	beq	r2,zero,8003c14 <__alt_data_end+0xfc003c14>
 8003c70:	0023883a 	mov	r17,zero
 8003c74:	00802034 	movhi	r2,128
 8003c78:	89801034 	orhi	r6,r17,64
 8003c7c:	10bfffc4 	addi	r2,r2,-1
 8003c80:	a80f883a 	mov	r7,r21
 8003c84:	308c703a 	and	r6,r6,r2
 8003c88:	003faf06 	br	8003b48 <__alt_data_end+0xfc003b48>
 8003c8c:	01c00804 	movi	r7,32
 8003c90:	390fc83a 	sub	r7,r7,r4
 8003c94:	89ce983a 	sll	r7,r17,r7
 8003c98:	890ad83a 	srl	r5,r17,r4
 8003c9c:	380ec03a 	cmpne	r7,r7,zero
 8003ca0:	29cab03a 	or	r5,r5,r7
 8003ca4:	28c001cc 	andi	r3,r5,7
 8003ca8:	18000426 	beq	r3,zero,8003cbc <__divsf3+0x3fc>
 8003cac:	28c003cc 	andi	r3,r5,15
 8003cb0:	01000104 	movi	r4,4
 8003cb4:	19000126 	beq	r3,r4,8003cbc <__divsf3+0x3fc>
 8003cb8:	290b883a 	add	r5,r5,r4
 8003cbc:	28c1002c 	andhi	r3,r5,1024
 8003cc0:	18000426 	beq	r3,zero,8003cd4 <__divsf3+0x414>
 8003cc4:	11c0004c 	andi	r7,r2,1
 8003cc8:	01000044 	movi	r4,1
 8003ccc:	000d883a 	mov	r6,zero
 8003cd0:	003f4b06 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003cd4:	280a91ba 	slli	r5,r5,6
 8003cd8:	11c0004c 	andi	r7,r2,1
 8003cdc:	0009883a 	mov	r4,zero
 8003ce0:	280cd27a 	srli	r6,r5,9
 8003ce4:	003f4606 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003ce8:	00802034 	movhi	r2,128
 8003cec:	89801034 	orhi	r6,r17,64
 8003cf0:	10bfffc4 	addi	r2,r2,-1
 8003cf4:	b00f883a 	mov	r7,r22
 8003cf8:	308c703a 	and	r6,r6,r2
 8003cfc:	003f9206 	br	8003b48 <__alt_data_end+0xfc003b48>

08003d00 <__gesf2>:
 8003d00:	2004d5fa 	srli	r2,r4,23
 8003d04:	2806d5fa 	srli	r3,r5,23
 8003d08:	01802034 	movhi	r6,128
 8003d0c:	31bfffc4 	addi	r6,r6,-1
 8003d10:	10803fcc 	andi	r2,r2,255
 8003d14:	01c03fc4 	movi	r7,255
 8003d18:	3110703a 	and	r8,r6,r4
 8003d1c:	18c03fcc 	andi	r3,r3,255
 8003d20:	314c703a 	and	r6,r6,r5
 8003d24:	2008d7fa 	srli	r4,r4,31
 8003d28:	280ad7fa 	srli	r5,r5,31
 8003d2c:	11c01926 	beq	r2,r7,8003d94 <__gesf2+0x94>
 8003d30:	01c03fc4 	movi	r7,255
 8003d34:	19c00f26 	beq	r3,r7,8003d74 <__gesf2+0x74>
 8003d38:	1000061e 	bne	r2,zero,8003d54 <__gesf2+0x54>
 8003d3c:	400f003a 	cmpeq	r7,r8,zero
 8003d40:	1800071e 	bne	r3,zero,8003d60 <__gesf2+0x60>
 8003d44:	3000061e 	bne	r6,zero,8003d60 <__gesf2+0x60>
 8003d48:	0005883a 	mov	r2,zero
 8003d4c:	40000e1e 	bne	r8,zero,8003d88 <__gesf2+0x88>
 8003d50:	f800283a 	ret
 8003d54:	18000a1e 	bne	r3,zero,8003d80 <__gesf2+0x80>
 8003d58:	30000b26 	beq	r6,zero,8003d88 <__gesf2+0x88>
 8003d5c:	000f883a 	mov	r7,zero
 8003d60:	29403fcc 	andi	r5,r5,255
 8003d64:	38000726 	beq	r7,zero,8003d84 <__gesf2+0x84>
 8003d68:	28000826 	beq	r5,zero,8003d8c <__gesf2+0x8c>
 8003d6c:	00800044 	movi	r2,1
 8003d70:	f800283a 	ret
 8003d74:	303ff026 	beq	r6,zero,8003d38 <__alt_data_end+0xfc003d38>
 8003d78:	00bfff84 	movi	r2,-2
 8003d7c:	f800283a 	ret
 8003d80:	29403fcc 	andi	r5,r5,255
 8003d84:	21400526 	beq	r4,r5,8003d9c <__gesf2+0x9c>
 8003d88:	203ff826 	beq	r4,zero,8003d6c <__alt_data_end+0xfc003d6c>
 8003d8c:	00bfffc4 	movi	r2,-1
 8003d90:	f800283a 	ret
 8003d94:	403fe626 	beq	r8,zero,8003d30 <__alt_data_end+0xfc003d30>
 8003d98:	003ff706 	br	8003d78 <__alt_data_end+0xfc003d78>
 8003d9c:	18bffa16 	blt	r3,r2,8003d88 <__alt_data_end+0xfc003d88>
 8003da0:	10c00216 	blt	r2,r3,8003dac <__gesf2+0xac>
 8003da4:	323ff836 	bltu	r6,r8,8003d88 <__alt_data_end+0xfc003d88>
 8003da8:	4180022e 	bgeu	r8,r6,8003db4 <__gesf2+0xb4>
 8003dac:	203fef1e 	bne	r4,zero,8003d6c <__alt_data_end+0xfc003d6c>
 8003db0:	003ff606 	br	8003d8c <__alt_data_end+0xfc003d8c>
 8003db4:	0005883a 	mov	r2,zero
 8003db8:	f800283a 	ret

08003dbc <__lesf2>:
 8003dbc:	2004d5fa 	srli	r2,r4,23
 8003dc0:	280cd5fa 	srli	r6,r5,23
 8003dc4:	00c02034 	movhi	r3,128
 8003dc8:	18ffffc4 	addi	r3,r3,-1
 8003dcc:	10803fcc 	andi	r2,r2,255
 8003dd0:	01c03fc4 	movi	r7,255
 8003dd4:	1910703a 	and	r8,r3,r4
 8003dd8:	31803fcc 	andi	r6,r6,255
 8003ddc:	1946703a 	and	r3,r3,r5
 8003de0:	2008d7fa 	srli	r4,r4,31
 8003de4:	280ad7fa 	srli	r5,r5,31
 8003de8:	11c01b26 	beq	r2,r7,8003e58 <__lesf2+0x9c>
 8003dec:	01c03fc4 	movi	r7,255
 8003df0:	31c01126 	beq	r6,r7,8003e38 <__lesf2+0x7c>
 8003df4:	1000071e 	bne	r2,zero,8003e14 <__lesf2+0x58>
 8003df8:	400f003a 	cmpeq	r7,r8,zero
 8003dfc:	21003fcc 	andi	r4,r4,255
 8003e00:	3000081e 	bne	r6,zero,8003e24 <__lesf2+0x68>
 8003e04:	1800071e 	bne	r3,zero,8003e24 <__lesf2+0x68>
 8003e08:	0005883a 	mov	r2,zero
 8003e0c:	40000f1e 	bne	r8,zero,8003e4c <__lesf2+0x90>
 8003e10:	f800283a 	ret
 8003e14:	21003fcc 	andi	r4,r4,255
 8003e18:	30000a1e 	bne	r6,zero,8003e44 <__lesf2+0x88>
 8003e1c:	18000b26 	beq	r3,zero,8003e4c <__lesf2+0x90>
 8003e20:	000f883a 	mov	r7,zero
 8003e24:	29403fcc 	andi	r5,r5,255
 8003e28:	38000726 	beq	r7,zero,8003e48 <__lesf2+0x8c>
 8003e2c:	28000826 	beq	r5,zero,8003e50 <__lesf2+0x94>
 8003e30:	00800044 	movi	r2,1
 8003e34:	f800283a 	ret
 8003e38:	183fee26 	beq	r3,zero,8003df4 <__alt_data_end+0xfc003df4>
 8003e3c:	00800084 	movi	r2,2
 8003e40:	f800283a 	ret
 8003e44:	29403fcc 	andi	r5,r5,255
 8003e48:	21400626 	beq	r4,r5,8003e64 <__lesf2+0xa8>
 8003e4c:	203ff826 	beq	r4,zero,8003e30 <__alt_data_end+0xfc003e30>
 8003e50:	00bfffc4 	movi	r2,-1
 8003e54:	f800283a 	ret
 8003e58:	403fe426 	beq	r8,zero,8003dec <__alt_data_end+0xfc003dec>
 8003e5c:	00800084 	movi	r2,2
 8003e60:	f800283a 	ret
 8003e64:	30bff916 	blt	r6,r2,8003e4c <__alt_data_end+0xfc003e4c>
 8003e68:	11800216 	blt	r2,r6,8003e74 <__lesf2+0xb8>
 8003e6c:	1a3ff736 	bltu	r3,r8,8003e4c <__alt_data_end+0xfc003e4c>
 8003e70:	40c0022e 	bgeu	r8,r3,8003e7c <__lesf2+0xc0>
 8003e74:	203fee1e 	bne	r4,zero,8003e30 <__alt_data_end+0xfc003e30>
 8003e78:	003ff506 	br	8003e50 <__alt_data_end+0xfc003e50>
 8003e7c:	0005883a 	mov	r2,zero
 8003e80:	f800283a 	ret

08003e84 <__mulsf3>:
 8003e84:	defff504 	addi	sp,sp,-44
 8003e88:	dc000115 	stw	r16,4(sp)
 8003e8c:	2020d5fa 	srli	r16,r4,23
 8003e90:	dd400615 	stw	r21,24(sp)
 8003e94:	202ad7fa 	srli	r21,r4,31
 8003e98:	dc800315 	stw	r18,12(sp)
 8003e9c:	04802034 	movhi	r18,128
 8003ea0:	df000915 	stw	fp,36(sp)
 8003ea4:	dd000515 	stw	r20,20(sp)
 8003ea8:	94bfffc4 	addi	r18,r18,-1
 8003eac:	dfc00a15 	stw	ra,40(sp)
 8003eb0:	ddc00815 	stw	r23,32(sp)
 8003eb4:	dd800715 	stw	r22,28(sp)
 8003eb8:	dcc00415 	stw	r19,16(sp)
 8003ebc:	dc400215 	stw	r17,8(sp)
 8003ec0:	84003fcc 	andi	r16,r16,255
 8003ec4:	9124703a 	and	r18,r18,r4
 8003ec8:	a829883a 	mov	r20,r21
 8003ecc:	af003fcc 	andi	fp,r21,255
 8003ed0:	80005426 	beq	r16,zero,8004024 <__mulsf3+0x1a0>
 8003ed4:	00803fc4 	movi	r2,255
 8003ed8:	80802f26 	beq	r16,r2,8003f98 <__mulsf3+0x114>
 8003edc:	91002034 	orhi	r4,r18,128
 8003ee0:	202490fa 	slli	r18,r4,3
 8003ee4:	843fe044 	addi	r16,r16,-127
 8003ee8:	0023883a 	mov	r17,zero
 8003eec:	002f883a 	mov	r23,zero
 8003ef0:	2804d5fa 	srli	r2,r5,23
 8003ef4:	282cd7fa 	srli	r22,r5,31
 8003ef8:	01002034 	movhi	r4,128
 8003efc:	213fffc4 	addi	r4,r4,-1
 8003f00:	10803fcc 	andi	r2,r2,255
 8003f04:	2166703a 	and	r19,r4,r5
 8003f08:	b1803fcc 	andi	r6,r22,255
 8003f0c:	10004c26 	beq	r2,zero,8004040 <__mulsf3+0x1bc>
 8003f10:	00c03fc4 	movi	r3,255
 8003f14:	10c04726 	beq	r2,r3,8004034 <__mulsf3+0x1b0>
 8003f18:	99002034 	orhi	r4,r19,128
 8003f1c:	202690fa 	slli	r19,r4,3
 8003f20:	10bfe044 	addi	r2,r2,-127
 8003f24:	0007883a 	mov	r3,zero
 8003f28:	80a1883a 	add	r16,r16,r2
 8003f2c:	010003c4 	movi	r4,15
 8003f30:	1c44b03a 	or	r2,r3,r17
 8003f34:	b56af03a 	xor	r21,r22,r21
 8003f38:	81c00044 	addi	r7,r16,1
 8003f3c:	20806b36 	bltu	r4,r2,80040ec <__mulsf3+0x268>
 8003f40:	100490ba 	slli	r2,r2,2
 8003f44:	01020034 	movhi	r4,2048
 8003f48:	210fd604 	addi	r4,r4,16216
 8003f4c:	1105883a 	add	r2,r2,r4
 8003f50:	10800017 	ldw	r2,0(r2)
 8003f54:	1000683a 	jmp	r2
 8003f58:	080040ec 	andhi	zero,at,259
 8003f5c:	08003fac 	andhi	zero,at,254
 8003f60:	08003fac 	andhi	zero,at,254
 8003f64:	08003fa8 	cmpgeui	zero,at,254
 8003f68:	080040d0 	cmplti	zero,at,259
 8003f6c:	080040d0 	cmplti	zero,at,259
 8003f70:	080040bc 	xorhi	zero,at,258
 8003f74:	08003fa8 	cmpgeui	zero,at,254
 8003f78:	080040d0 	cmplti	zero,at,259
 8003f7c:	080040bc 	xorhi	zero,at,258
 8003f80:	080040d0 	cmplti	zero,at,259
 8003f84:	08003fa8 	cmpgeui	zero,at,254
 8003f88:	080040dc 	xori	zero,at,259
 8003f8c:	080040dc 	xori	zero,at,259
 8003f90:	080040dc 	xori	zero,at,259
 8003f94:	080041b8 	rdprs	zero,at,262
 8003f98:	90003b1e 	bne	r18,zero,8004088 <__mulsf3+0x204>
 8003f9c:	04400204 	movi	r17,8
 8003fa0:	05c00084 	movi	r23,2
 8003fa4:	003fd206 	br	8003ef0 <__alt_data_end+0xfc003ef0>
 8003fa8:	302b883a 	mov	r21,r6
 8003fac:	00800084 	movi	r2,2
 8003fb0:	18802626 	beq	r3,r2,800404c <__mulsf3+0x1c8>
 8003fb4:	008000c4 	movi	r2,3
 8003fb8:	1880ab26 	beq	r3,r2,8004268 <__mulsf3+0x3e4>
 8003fbc:	00800044 	movi	r2,1
 8003fc0:	1880a21e 	bne	r3,r2,800424c <__mulsf3+0x3c8>
 8003fc4:	a829883a 	mov	r20,r21
 8003fc8:	0007883a 	mov	r3,zero
 8003fcc:	0009883a 	mov	r4,zero
 8003fd0:	18803fcc 	andi	r2,r3,255
 8003fd4:	100695fa 	slli	r3,r2,23
 8003fd8:	a0803fcc 	andi	r2,r20,255
 8003fdc:	100a97fa 	slli	r5,r2,31
 8003fe0:	00802034 	movhi	r2,128
 8003fe4:	10bfffc4 	addi	r2,r2,-1
 8003fe8:	2084703a 	and	r2,r4,r2
 8003fec:	10c4b03a 	or	r2,r2,r3
 8003ff0:	1144b03a 	or	r2,r2,r5
 8003ff4:	dfc00a17 	ldw	ra,40(sp)
 8003ff8:	df000917 	ldw	fp,36(sp)
 8003ffc:	ddc00817 	ldw	r23,32(sp)
 8004000:	dd800717 	ldw	r22,28(sp)
 8004004:	dd400617 	ldw	r21,24(sp)
 8004008:	dd000517 	ldw	r20,20(sp)
 800400c:	dcc00417 	ldw	r19,16(sp)
 8004010:	dc800317 	ldw	r18,12(sp)
 8004014:	dc400217 	ldw	r17,8(sp)
 8004018:	dc000117 	ldw	r16,4(sp)
 800401c:	dec00b04 	addi	sp,sp,44
 8004020:	f800283a 	ret
 8004024:	90000d1e 	bne	r18,zero,800405c <__mulsf3+0x1d8>
 8004028:	04400104 	movi	r17,4
 800402c:	05c00044 	movi	r23,1
 8004030:	003faf06 	br	8003ef0 <__alt_data_end+0xfc003ef0>
 8004034:	9806c03a 	cmpne	r3,r19,zero
 8004038:	18c00084 	addi	r3,r3,2
 800403c:	003fba06 	br	8003f28 <__alt_data_end+0xfc003f28>
 8004040:	9800141e 	bne	r19,zero,8004094 <__mulsf3+0x210>
 8004044:	00c00044 	movi	r3,1
 8004048:	003fb706 	br	8003f28 <__alt_data_end+0xfc003f28>
 800404c:	a829883a 	mov	r20,r21
 8004050:	00ffffc4 	movi	r3,-1
 8004054:	0009883a 	mov	r4,zero
 8004058:	003fdd06 	br	8003fd0 <__alt_data_end+0xfc003fd0>
 800405c:	9009883a 	mov	r4,r18
 8004060:	d9400015 	stw	r5,0(sp)
 8004064:	800710c0 	call	800710c <__clzsi2>
 8004068:	10fffec4 	addi	r3,r2,-5
 800406c:	10801d84 	addi	r2,r2,118
 8004070:	90e4983a 	sll	r18,r18,r3
 8004074:	00a1c83a 	sub	r16,zero,r2
 8004078:	0023883a 	mov	r17,zero
 800407c:	002f883a 	mov	r23,zero
 8004080:	d9400017 	ldw	r5,0(sp)
 8004084:	003f9a06 	br	8003ef0 <__alt_data_end+0xfc003ef0>
 8004088:	04400304 	movi	r17,12
 800408c:	05c000c4 	movi	r23,3
 8004090:	003f9706 	br	8003ef0 <__alt_data_end+0xfc003ef0>
 8004094:	9809883a 	mov	r4,r19
 8004098:	d9800015 	stw	r6,0(sp)
 800409c:	800710c0 	call	800710c <__clzsi2>
 80040a0:	10fffec4 	addi	r3,r2,-5
 80040a4:	10801d84 	addi	r2,r2,118
 80040a8:	98e6983a 	sll	r19,r19,r3
 80040ac:	0085c83a 	sub	r2,zero,r2
 80040b0:	0007883a 	mov	r3,zero
 80040b4:	d9800017 	ldw	r6,0(sp)
 80040b8:	003f9b06 	br	8003f28 <__alt_data_end+0xfc003f28>
 80040bc:	01002034 	movhi	r4,128
 80040c0:	0029883a 	mov	r20,zero
 80040c4:	213fffc4 	addi	r4,r4,-1
 80040c8:	00ffffc4 	movi	r3,-1
 80040cc:	003fc006 	br	8003fd0 <__alt_data_end+0xfc003fd0>
 80040d0:	9027883a 	mov	r19,r18
 80040d4:	b807883a 	mov	r3,r23
 80040d8:	003fb406 	br	8003fac <__alt_data_end+0xfc003fac>
 80040dc:	9027883a 	mov	r19,r18
 80040e0:	e02b883a 	mov	r21,fp
 80040e4:	b807883a 	mov	r3,r23
 80040e8:	003fb006 	br	8003fac <__alt_data_end+0xfc003fac>
 80040ec:	9004d43a 	srli	r2,r18,16
 80040f0:	9810d43a 	srli	r8,r19,16
 80040f4:	94bfffcc 	andi	r18,r18,65535
 80040f8:	993fffcc 	andi	r4,r19,65535
 80040fc:	910d383a 	mul	r6,r18,r4
 8004100:	20a7383a 	mul	r19,r4,r2
 8004104:	9225383a 	mul	r18,r18,r8
 8004108:	3006d43a 	srli	r3,r6,16
 800410c:	1211383a 	mul	r8,r2,r8
 8004110:	94e5883a 	add	r18,r18,r19
 8004114:	1c87883a 	add	r3,r3,r18
 8004118:	1cc0022e 	bgeu	r3,r19,8004124 <__mulsf3+0x2a0>
 800411c:	00800074 	movhi	r2,1
 8004120:	4091883a 	add	r8,r8,r2
 8004124:	1804943a 	slli	r2,r3,16
 8004128:	31bfffcc 	andi	r6,r6,65535
 800412c:	1806d43a 	srli	r3,r3,16
 8004130:	1185883a 	add	r2,r2,r6
 8004134:	102691ba 	slli	r19,r2,6
 8004138:	1a07883a 	add	r3,r3,r8
 800413c:	1004d6ba 	srli	r2,r2,26
 8004140:	180891ba 	slli	r4,r3,6
 8004144:	9826c03a 	cmpne	r19,r19,zero
 8004148:	9884b03a 	or	r2,r19,r2
 800414c:	1126b03a 	or	r19,r2,r4
 8004150:	9882002c 	andhi	r2,r19,2048
 8004154:	10000426 	beq	r2,zero,8004168 <__mulsf3+0x2e4>
 8004158:	9804d07a 	srli	r2,r19,1
 800415c:	9900004c 	andi	r4,r19,1
 8004160:	3821883a 	mov	r16,r7
 8004164:	1126b03a 	or	r19,r2,r4
 8004168:	80c01fc4 	addi	r3,r16,127
 800416c:	00c0210e 	bge	zero,r3,80041f4 <__mulsf3+0x370>
 8004170:	988001cc 	andi	r2,r19,7
 8004174:	10000426 	beq	r2,zero,8004188 <__mulsf3+0x304>
 8004178:	988003cc 	andi	r2,r19,15
 800417c:	01000104 	movi	r4,4
 8004180:	11000126 	beq	r2,r4,8004188 <__mulsf3+0x304>
 8004184:	9927883a 	add	r19,r19,r4
 8004188:	9882002c 	andhi	r2,r19,2048
 800418c:	10000426 	beq	r2,zero,80041a0 <__mulsf3+0x31c>
 8004190:	00be0034 	movhi	r2,63488
 8004194:	10bfffc4 	addi	r2,r2,-1
 8004198:	80c02004 	addi	r3,r16,128
 800419c:	98a6703a 	and	r19,r19,r2
 80041a0:	00803f84 	movi	r2,254
 80041a4:	10ffa916 	blt	r2,r3,800404c <__alt_data_end+0xfc00404c>
 80041a8:	980891ba 	slli	r4,r19,6
 80041ac:	a829883a 	mov	r20,r21
 80041b0:	2008d27a 	srli	r4,r4,9
 80041b4:	003f8606 	br	8003fd0 <__alt_data_end+0xfc003fd0>
 80041b8:	9080102c 	andhi	r2,r18,64
 80041bc:	10000826 	beq	r2,zero,80041e0 <__mulsf3+0x35c>
 80041c0:	9880102c 	andhi	r2,r19,64
 80041c4:	1000061e 	bne	r2,zero,80041e0 <__mulsf3+0x35c>
 80041c8:	00802034 	movhi	r2,128
 80041cc:	99001034 	orhi	r4,r19,64
 80041d0:	10bfffc4 	addi	r2,r2,-1
 80041d4:	b029883a 	mov	r20,r22
 80041d8:	2088703a 	and	r4,r4,r2
 80041dc:	003fba06 	br	80040c8 <__alt_data_end+0xfc0040c8>
 80041e0:	00802034 	movhi	r2,128
 80041e4:	91001034 	orhi	r4,r18,64
 80041e8:	10bfffc4 	addi	r2,r2,-1
 80041ec:	2088703a 	and	r4,r4,r2
 80041f0:	003fb506 	br	80040c8 <__alt_data_end+0xfc0040c8>
 80041f4:	00800044 	movi	r2,1
 80041f8:	10c7c83a 	sub	r3,r2,r3
 80041fc:	008006c4 	movi	r2,27
 8004200:	10ff7016 	blt	r2,r3,8003fc4 <__alt_data_end+0xfc003fc4>
 8004204:	00800804 	movi	r2,32
 8004208:	10c5c83a 	sub	r2,r2,r3
 800420c:	9884983a 	sll	r2,r19,r2
 8004210:	98c6d83a 	srl	r3,r19,r3
 8004214:	1004c03a 	cmpne	r2,r2,zero
 8004218:	1884b03a 	or	r2,r3,r2
 800421c:	10c001cc 	andi	r3,r2,7
 8004220:	18000426 	beq	r3,zero,8004234 <__mulsf3+0x3b0>
 8004224:	10c003cc 	andi	r3,r2,15
 8004228:	01000104 	movi	r4,4
 800422c:	19000126 	beq	r3,r4,8004234 <__mulsf3+0x3b0>
 8004230:	1105883a 	add	r2,r2,r4
 8004234:	10c1002c 	andhi	r3,r2,1024
 8004238:	18000626 	beq	r3,zero,8004254 <__mulsf3+0x3d0>
 800423c:	a829883a 	mov	r20,r21
 8004240:	00c00044 	movi	r3,1
 8004244:	0009883a 	mov	r4,zero
 8004248:	003f6106 	br	8003fd0 <__alt_data_end+0xfc003fd0>
 800424c:	3821883a 	mov	r16,r7
 8004250:	003fc506 	br	8004168 <__alt_data_end+0xfc004168>
 8004254:	100491ba 	slli	r2,r2,6
 8004258:	a829883a 	mov	r20,r21
 800425c:	0007883a 	mov	r3,zero
 8004260:	1008d27a 	srli	r4,r2,9
 8004264:	003f5a06 	br	8003fd0 <__alt_data_end+0xfc003fd0>
 8004268:	00802034 	movhi	r2,128
 800426c:	99001034 	orhi	r4,r19,64
 8004270:	10bfffc4 	addi	r2,r2,-1
 8004274:	a829883a 	mov	r20,r21
 8004278:	2088703a 	and	r4,r4,r2
 800427c:	003f9206 	br	80040c8 <__alt_data_end+0xfc0040c8>

08004280 <__subsf3>:
 8004280:	defffc04 	addi	sp,sp,-16
 8004284:	280cd5fa 	srli	r6,r5,23
 8004288:	dc000015 	stw	r16,0(sp)
 800428c:	01c02034 	movhi	r7,128
 8004290:	2020d5fa 	srli	r16,r4,23
 8004294:	39ffffc4 	addi	r7,r7,-1
 8004298:	3906703a 	and	r3,r7,r4
 800429c:	dc400115 	stw	r17,4(sp)
 80042a0:	394e703a 	and	r7,r7,r5
 80042a4:	2022d7fa 	srli	r17,r4,31
 80042a8:	dfc00315 	stw	ra,12(sp)
 80042ac:	dc800215 	stw	r18,8(sp)
 80042b0:	31803fcc 	andi	r6,r6,255
 80042b4:	01003fc4 	movi	r4,255
 80042b8:	84003fcc 	andi	r16,r16,255
 80042bc:	180690fa 	slli	r3,r3,3
 80042c0:	2804d7fa 	srli	r2,r5,31
 80042c4:	380e90fa 	slli	r7,r7,3
 80042c8:	31006d26 	beq	r6,r4,8004480 <__subsf3+0x200>
 80042cc:	1080005c 	xori	r2,r2,1
 80042d0:	8189c83a 	sub	r4,r16,r6
 80042d4:	14404f26 	beq	r2,r17,8004414 <__subsf3+0x194>
 80042d8:	0100770e 	bge	zero,r4,80044b8 <__subsf3+0x238>
 80042dc:	30001e1e 	bne	r6,zero,8004358 <__subsf3+0xd8>
 80042e0:	38006a1e 	bne	r7,zero,800448c <__subsf3+0x20c>
 80042e4:	188001cc 	andi	r2,r3,7
 80042e8:	10000426 	beq	r2,zero,80042fc <__subsf3+0x7c>
 80042ec:	188003cc 	andi	r2,r3,15
 80042f0:	01000104 	movi	r4,4
 80042f4:	11000126 	beq	r2,r4,80042fc <__subsf3+0x7c>
 80042f8:	1907883a 	add	r3,r3,r4
 80042fc:	1881002c 	andhi	r2,r3,1024
 8004300:	10003926 	beq	r2,zero,80043e8 <__subsf3+0x168>
 8004304:	84000044 	addi	r16,r16,1
 8004308:	00803fc4 	movi	r2,255
 800430c:	80807526 	beq	r16,r2,80044e4 <__subsf3+0x264>
 8004310:	180691ba 	slli	r3,r3,6
 8004314:	8880004c 	andi	r2,r17,1
 8004318:	180ad27a 	srli	r5,r3,9
 800431c:	84003fcc 	andi	r16,r16,255
 8004320:	800695fa 	slli	r3,r16,23
 8004324:	10803fcc 	andi	r2,r2,255
 8004328:	01002034 	movhi	r4,128
 800432c:	213fffc4 	addi	r4,r4,-1
 8004330:	100497fa 	slli	r2,r2,31
 8004334:	2920703a 	and	r16,r5,r4
 8004338:	80e0b03a 	or	r16,r16,r3
 800433c:	8084b03a 	or	r2,r16,r2
 8004340:	dfc00317 	ldw	ra,12(sp)
 8004344:	dc800217 	ldw	r18,8(sp)
 8004348:	dc400117 	ldw	r17,4(sp)
 800434c:	dc000017 	ldw	r16,0(sp)
 8004350:	dec00404 	addi	sp,sp,16
 8004354:	f800283a 	ret
 8004358:	00803fc4 	movi	r2,255
 800435c:	80bfe126 	beq	r16,r2,80042e4 <__alt_data_end+0xfc0042e4>
 8004360:	39c10034 	orhi	r7,r7,1024
 8004364:	008006c4 	movi	r2,27
 8004368:	11007416 	blt	r2,r4,800453c <__subsf3+0x2bc>
 800436c:	00800804 	movi	r2,32
 8004370:	1105c83a 	sub	r2,r2,r4
 8004374:	3884983a 	sll	r2,r7,r2
 8004378:	390ed83a 	srl	r7,r7,r4
 800437c:	1008c03a 	cmpne	r4,r2,zero
 8004380:	390eb03a 	or	r7,r7,r4
 8004384:	19c7c83a 	sub	r3,r3,r7
 8004388:	1881002c 	andhi	r2,r3,1024
 800438c:	10001426 	beq	r2,zero,80043e0 <__subsf3+0x160>
 8004390:	04810034 	movhi	r18,1024
 8004394:	94bfffc4 	addi	r18,r18,-1
 8004398:	1ca4703a 	and	r18,r3,r18
 800439c:	9009883a 	mov	r4,r18
 80043a0:	800710c0 	call	800710c <__clzsi2>
 80043a4:	10bffec4 	addi	r2,r2,-5
 80043a8:	90a4983a 	sll	r18,r18,r2
 80043ac:	14005116 	blt	r2,r16,80044f4 <__subsf3+0x274>
 80043b0:	1405c83a 	sub	r2,r2,r16
 80043b4:	10c00044 	addi	r3,r2,1
 80043b8:	00800804 	movi	r2,32
 80043bc:	10c5c83a 	sub	r2,r2,r3
 80043c0:	9084983a 	sll	r2,r18,r2
 80043c4:	90e4d83a 	srl	r18,r18,r3
 80043c8:	0021883a 	mov	r16,zero
 80043cc:	1006c03a 	cmpne	r3,r2,zero
 80043d0:	90c6b03a 	or	r3,r18,r3
 80043d4:	003fc306 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80043d8:	2000e026 	beq	r4,zero,800475c <__subsf3+0x4dc>
 80043dc:	2007883a 	mov	r3,r4
 80043e0:	188001cc 	andi	r2,r3,7
 80043e4:	103fc11e 	bne	r2,zero,80042ec <__alt_data_end+0xfc0042ec>
 80043e8:	180ad0fa 	srli	r5,r3,3
 80043ec:	00c03fc4 	movi	r3,255
 80043f0:	8880004c 	andi	r2,r17,1
 80043f4:	80c0031e 	bne	r16,r3,8004404 <__subsf3+0x184>
 80043f8:	28006d26 	beq	r5,zero,80045b0 <__subsf3+0x330>
 80043fc:	29401034 	orhi	r5,r5,64
 8004400:	043fffc4 	movi	r16,-1
 8004404:	00c02034 	movhi	r3,128
 8004408:	18ffffc4 	addi	r3,r3,-1
 800440c:	28ca703a 	and	r5,r5,r3
 8004410:	003fc206 	br	800431c <__alt_data_end+0xfc00431c>
 8004414:	01003c0e 	bge	zero,r4,8004508 <__subsf3+0x288>
 8004418:	30002126 	beq	r6,zero,80044a0 <__subsf3+0x220>
 800441c:	01403fc4 	movi	r5,255
 8004420:	817fb026 	beq	r16,r5,80042e4 <__alt_data_end+0xfc0042e4>
 8004424:	39c10034 	orhi	r7,r7,1024
 8004428:	014006c4 	movi	r5,27
 800442c:	29007416 	blt	r5,r4,8004600 <__subsf3+0x380>
 8004430:	01400804 	movi	r5,32
 8004434:	290bc83a 	sub	r5,r5,r4
 8004438:	394a983a 	sll	r5,r7,r5
 800443c:	390ed83a 	srl	r7,r7,r4
 8004440:	2808c03a 	cmpne	r4,r5,zero
 8004444:	390eb03a 	or	r7,r7,r4
 8004448:	19c7883a 	add	r3,r3,r7
 800444c:	1901002c 	andhi	r4,r3,1024
 8004450:	20003826 	beq	r4,zero,8004534 <__subsf3+0x2b4>
 8004454:	84000044 	addi	r16,r16,1
 8004458:	01003fc4 	movi	r4,255
 800445c:	81005426 	beq	r16,r4,80045b0 <__subsf3+0x330>
 8004460:	1023883a 	mov	r17,r2
 8004464:	00bf0034 	movhi	r2,64512
 8004468:	10bfffc4 	addi	r2,r2,-1
 800446c:	1900004c 	andi	r4,r3,1
 8004470:	1886703a 	and	r3,r3,r2
 8004474:	1806d07a 	srli	r3,r3,1
 8004478:	1906b03a 	or	r3,r3,r4
 800447c:	003f9906 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004480:	383f9226 	beq	r7,zero,80042cc <__alt_data_end+0xfc0042cc>
 8004484:	10803fcc 	andi	r2,r2,255
 8004488:	003f9106 	br	80042d0 <__alt_data_end+0xfc0042d0>
 800448c:	213fffc4 	addi	r4,r4,-1
 8004490:	203fbc26 	beq	r4,zero,8004384 <__alt_data_end+0xfc004384>
 8004494:	00803fc4 	movi	r2,255
 8004498:	80bfb21e 	bne	r16,r2,8004364 <__alt_data_end+0xfc004364>
 800449c:	003f9106 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80044a0:	383f9026 	beq	r7,zero,80042e4 <__alt_data_end+0xfc0042e4>
 80044a4:	213fffc4 	addi	r4,r4,-1
 80044a8:	203fe726 	beq	r4,zero,8004448 <__alt_data_end+0xfc004448>
 80044ac:	01403fc4 	movi	r5,255
 80044b0:	817fdd1e 	bne	r16,r5,8004428 <__alt_data_end+0xfc004428>
 80044b4:	003f8b06 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80044b8:	2000221e 	bne	r4,zero,8004544 <__subsf3+0x2c4>
 80044bc:	81000044 	addi	r4,r16,1
 80044c0:	21003fcc 	andi	r4,r4,255
 80044c4:	01400044 	movi	r5,1
 80044c8:	2900470e 	bge	r5,r4,80045e8 <__subsf3+0x368>
 80044cc:	19e5c83a 	sub	r18,r3,r7
 80044d0:	9141002c 	andhi	r5,r18,1024
 80044d4:	28002d26 	beq	r5,zero,800458c <__subsf3+0x30c>
 80044d8:	38e5c83a 	sub	r18,r7,r3
 80044dc:	1023883a 	mov	r17,r2
 80044e0:	003fae06 	br	800439c <__alt_data_end+0xfc00439c>
 80044e4:	8880004c 	andi	r2,r17,1
 80044e8:	043fffc4 	movi	r16,-1
 80044ec:	000b883a 	mov	r5,zero
 80044f0:	003f8a06 	br	800431c <__alt_data_end+0xfc00431c>
 80044f4:	00ff0034 	movhi	r3,64512
 80044f8:	18ffffc4 	addi	r3,r3,-1
 80044fc:	80a1c83a 	sub	r16,r16,r2
 8004500:	90c6703a 	and	r3,r18,r3
 8004504:	003f7706 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004508:	2000431e 	bne	r4,zero,8004618 <__subsf3+0x398>
 800450c:	81000044 	addi	r4,r16,1
 8004510:	21803fcc 	andi	r6,r4,255
 8004514:	01400044 	movi	r5,1
 8004518:	2980280e 	bge	r5,r6,80045bc <__subsf3+0x33c>
 800451c:	01403fc4 	movi	r5,255
 8004520:	21402326 	beq	r4,r5,80045b0 <__subsf3+0x330>
 8004524:	19c7883a 	add	r3,r3,r7
 8004528:	1806d07a 	srli	r3,r3,1
 800452c:	2021883a 	mov	r16,r4
 8004530:	003f6c06 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004534:	1023883a 	mov	r17,r2
 8004538:	003fa906 	br	80043e0 <__alt_data_end+0xfc0043e0>
 800453c:	01c00044 	movi	r7,1
 8004540:	003f9006 	br	8004384 <__alt_data_end+0xfc004384>
 8004544:	8000151e 	bne	r16,zero,800459c <__subsf3+0x31c>
 8004548:	18002f26 	beq	r3,zero,8004608 <__subsf3+0x388>
 800454c:	0108303a 	nor	r4,zero,r4
 8004550:	20000a26 	beq	r4,zero,800457c <__subsf3+0x2fc>
 8004554:	01403fc4 	movi	r5,255
 8004558:	31402b26 	beq	r6,r5,8004608 <__subsf3+0x388>
 800455c:	014006c4 	movi	r5,27
 8004560:	29006e16 	blt	r5,r4,800471c <__subsf3+0x49c>
 8004564:	01400804 	movi	r5,32
 8004568:	290bc83a 	sub	r5,r5,r4
 800456c:	194a983a 	sll	r5,r3,r5
 8004570:	1908d83a 	srl	r4,r3,r4
 8004574:	2806c03a 	cmpne	r3,r5,zero
 8004578:	20c6b03a 	or	r3,r4,r3
 800457c:	38c7c83a 	sub	r3,r7,r3
 8004580:	3021883a 	mov	r16,r6
 8004584:	1023883a 	mov	r17,r2
 8004588:	003f7f06 	br	8004388 <__alt_data_end+0xfc004388>
 800458c:	903f831e 	bne	r18,zero,800439c <__alt_data_end+0xfc00439c>
 8004590:	0005883a 	mov	r2,zero
 8004594:	0021883a 	mov	r16,zero
 8004598:	003f9a06 	br	8004404 <__alt_data_end+0xfc004404>
 800459c:	01403fc4 	movi	r5,255
 80045a0:	31401926 	beq	r6,r5,8004608 <__subsf3+0x388>
 80045a4:	0109c83a 	sub	r4,zero,r4
 80045a8:	18c10034 	orhi	r3,r3,1024
 80045ac:	003feb06 	br	800455c <__alt_data_end+0xfc00455c>
 80045b0:	043fffc4 	movi	r16,-1
 80045b4:	000b883a 	mov	r5,zero
 80045b8:	003f5806 	br	800431c <__alt_data_end+0xfc00431c>
 80045bc:	8000481e 	bne	r16,zero,80046e0 <__subsf3+0x460>
 80045c0:	18006226 	beq	r3,zero,800474c <__subsf3+0x4cc>
 80045c4:	383f4726 	beq	r7,zero,80042e4 <__alt_data_end+0xfc0042e4>
 80045c8:	19c7883a 	add	r3,r3,r7
 80045cc:	1881002c 	andhi	r2,r3,1024
 80045d0:	103f8326 	beq	r2,zero,80043e0 <__alt_data_end+0xfc0043e0>
 80045d4:	00bf0034 	movhi	r2,64512
 80045d8:	10bfffc4 	addi	r2,r2,-1
 80045dc:	2821883a 	mov	r16,r5
 80045e0:	1886703a 	and	r3,r3,r2
 80045e4:	003f3f06 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80045e8:	80001c1e 	bne	r16,zero,800465c <__subsf3+0x3dc>
 80045ec:	1800261e 	bne	r3,zero,8004688 <__subsf3+0x408>
 80045f0:	38004c26 	beq	r7,zero,8004724 <__subsf3+0x4a4>
 80045f4:	3807883a 	mov	r3,r7
 80045f8:	1023883a 	mov	r17,r2
 80045fc:	003f3906 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004600:	01c00044 	movi	r7,1
 8004604:	003f9006 	br	8004448 <__alt_data_end+0xfc004448>
 8004608:	3807883a 	mov	r3,r7
 800460c:	3021883a 	mov	r16,r6
 8004610:	1023883a 	mov	r17,r2
 8004614:	003f3306 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004618:	8000161e 	bne	r16,zero,8004674 <__subsf3+0x3f4>
 800461c:	18002d26 	beq	r3,zero,80046d4 <__subsf3+0x454>
 8004620:	0108303a 	nor	r4,zero,r4
 8004624:	20000a26 	beq	r4,zero,8004650 <__subsf3+0x3d0>
 8004628:	01403fc4 	movi	r5,255
 800462c:	31402926 	beq	r6,r5,80046d4 <__subsf3+0x454>
 8004630:	014006c4 	movi	r5,27
 8004634:	29004716 	blt	r5,r4,8004754 <__subsf3+0x4d4>
 8004638:	01400804 	movi	r5,32
 800463c:	290bc83a 	sub	r5,r5,r4
 8004640:	194a983a 	sll	r5,r3,r5
 8004644:	1908d83a 	srl	r4,r3,r4
 8004648:	2806c03a 	cmpne	r3,r5,zero
 800464c:	20c6b03a 	or	r3,r4,r3
 8004650:	19c7883a 	add	r3,r3,r7
 8004654:	3021883a 	mov	r16,r6
 8004658:	003f7c06 	br	800444c <__alt_data_end+0xfc00444c>
 800465c:	1800111e 	bne	r3,zero,80046a4 <__subsf3+0x424>
 8004660:	38003326 	beq	r7,zero,8004730 <__subsf3+0x4b0>
 8004664:	3807883a 	mov	r3,r7
 8004668:	1023883a 	mov	r17,r2
 800466c:	04003fc4 	movi	r16,255
 8004670:	003f1c06 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004674:	01403fc4 	movi	r5,255
 8004678:	31401626 	beq	r6,r5,80046d4 <__subsf3+0x454>
 800467c:	0109c83a 	sub	r4,zero,r4
 8004680:	18c10034 	orhi	r3,r3,1024
 8004684:	003fea06 	br	8004630 <__alt_data_end+0xfc004630>
 8004688:	383f1626 	beq	r7,zero,80042e4 <__alt_data_end+0xfc0042e4>
 800468c:	19c9c83a 	sub	r4,r3,r7
 8004690:	2141002c 	andhi	r5,r4,1024
 8004694:	283f5026 	beq	r5,zero,80043d8 <__alt_data_end+0xfc0043d8>
 8004698:	38c7c83a 	sub	r3,r7,r3
 800469c:	1023883a 	mov	r17,r2
 80046a0:	003f1006 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80046a4:	38001b26 	beq	r7,zero,8004714 <__subsf3+0x494>
 80046a8:	1806d0fa 	srli	r3,r3,3
 80046ac:	1900102c 	andhi	r4,r3,64
 80046b0:	20000526 	beq	r4,zero,80046c8 <__subsf3+0x448>
 80046b4:	380ed0fa 	srli	r7,r7,3
 80046b8:	3900102c 	andhi	r4,r7,64
 80046bc:	2000021e 	bne	r4,zero,80046c8 <__subsf3+0x448>
 80046c0:	3807883a 	mov	r3,r7
 80046c4:	1023883a 	mov	r17,r2
 80046c8:	180690fa 	slli	r3,r3,3
 80046cc:	04003fc4 	movi	r16,255
 80046d0:	003f0406 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80046d4:	3807883a 	mov	r3,r7
 80046d8:	3021883a 	mov	r16,r6
 80046dc:	003f0106 	br	80042e4 <__alt_data_end+0xfc0042e4>
 80046e0:	18001726 	beq	r3,zero,8004740 <__subsf3+0x4c0>
 80046e4:	38000b26 	beq	r7,zero,8004714 <__subsf3+0x494>
 80046e8:	1806d0fa 	srli	r3,r3,3
 80046ec:	1900102c 	andhi	r4,r3,64
 80046f0:	20000426 	beq	r4,zero,8004704 <__subsf3+0x484>
 80046f4:	380ed0fa 	srli	r7,r7,3
 80046f8:	3900102c 	andhi	r4,r7,64
 80046fc:	2000011e 	bne	r4,zero,8004704 <__subsf3+0x484>
 8004700:	3807883a 	mov	r3,r7
 8004704:	180690fa 	slli	r3,r3,3
 8004708:	1023883a 	mov	r17,r2
 800470c:	04003fc4 	movi	r16,255
 8004710:	003ef406 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004714:	04003fc4 	movi	r16,255
 8004718:	003ef206 	br	80042e4 <__alt_data_end+0xfc0042e4>
 800471c:	00c00044 	movi	r3,1
 8004720:	003f9606 	br	800457c <__alt_data_end+0xfc00457c>
 8004724:	000b883a 	mov	r5,zero
 8004728:	0005883a 	mov	r2,zero
 800472c:	003f3506 	br	8004404 <__alt_data_end+0xfc004404>
 8004730:	01402034 	movhi	r5,128
 8004734:	297fffc4 	addi	r5,r5,-1
 8004738:	0005883a 	mov	r2,zero
 800473c:	003f2f06 	br	80043fc <__alt_data_end+0xfc0043fc>
 8004740:	3807883a 	mov	r3,r7
 8004744:	04003fc4 	movi	r16,255
 8004748:	003ee606 	br	80042e4 <__alt_data_end+0xfc0042e4>
 800474c:	3807883a 	mov	r3,r7
 8004750:	003ee406 	br	80042e4 <__alt_data_end+0xfc0042e4>
 8004754:	00c00044 	movi	r3,1
 8004758:	003fbd06 	br	8004650 <__alt_data_end+0xfc004650>
 800475c:	0005883a 	mov	r2,zero
 8004760:	003f2806 	br	8004404 <__alt_data_end+0xfc004404>

08004764 <__fixsfsi>:
 8004764:	200ad5fa 	srli	r5,r4,23
 8004768:	00c02034 	movhi	r3,128
 800476c:	18ffffc4 	addi	r3,r3,-1
 8004770:	29403fcc 	andi	r5,r5,255
 8004774:	00801f84 	movi	r2,126
 8004778:	1906703a 	and	r3,r3,r4
 800477c:	2008d7fa 	srli	r4,r4,31
 8004780:	11400e0e 	bge	r2,r5,80047bc <__fixsfsi+0x58>
 8004784:	00802744 	movi	r2,157
 8004788:	11400816 	blt	r2,r5,80047ac <__fixsfsi+0x48>
 800478c:	00802544 	movi	r2,149
 8004790:	18c02034 	orhi	r3,r3,128
 8004794:	11400b0e 	bge	r2,r5,80047c4 <__fixsfsi+0x60>
 8004798:	28bfda84 	addi	r2,r5,-150
 800479c:	1884983a 	sll	r2,r3,r2
 80047a0:	20000726 	beq	r4,zero,80047c0 <__fixsfsi+0x5c>
 80047a4:	0085c83a 	sub	r2,zero,r2
 80047a8:	f800283a 	ret
 80047ac:	00a00034 	movhi	r2,32768
 80047b0:	10bfffc4 	addi	r2,r2,-1
 80047b4:	2085883a 	add	r2,r4,r2
 80047b8:	f800283a 	ret
 80047bc:	0005883a 	mov	r2,zero
 80047c0:	f800283a 	ret
 80047c4:	00802584 	movi	r2,150
 80047c8:	1145c83a 	sub	r2,r2,r5
 80047cc:	1884d83a 	srl	r2,r3,r2
 80047d0:	003ff306 	br	80047a0 <__alt_data_end+0xfc0047a0>

080047d4 <__floatsisf>:
 80047d4:	defffd04 	addi	sp,sp,-12
 80047d8:	dfc00215 	stw	ra,8(sp)
 80047dc:	dc400115 	stw	r17,4(sp)
 80047e0:	dc000015 	stw	r16,0(sp)
 80047e4:	20003526 	beq	r4,zero,80048bc <__floatsisf+0xe8>
 80047e8:	2021883a 	mov	r16,r4
 80047ec:	2022d7fa 	srli	r17,r4,31
 80047f0:	20003616 	blt	r4,zero,80048cc <__floatsisf+0xf8>
 80047f4:	8009883a 	mov	r4,r16
 80047f8:	800710c0 	call	800710c <__clzsi2>
 80047fc:	00c02784 	movi	r3,158
 8004800:	1887c83a 	sub	r3,r3,r2
 8004804:	01002584 	movi	r4,150
 8004808:	20c01416 	blt	r4,r3,800485c <__floatsisf+0x88>
 800480c:	20c9c83a 	sub	r4,r4,r3
 8004810:	8120983a 	sll	r16,r16,r4
 8004814:	00802034 	movhi	r2,128
 8004818:	10bfffc4 	addi	r2,r2,-1
 800481c:	8809883a 	mov	r4,r17
 8004820:	80a0703a 	and	r16,r16,r2
 8004824:	18803fcc 	andi	r2,r3,255
 8004828:	100695fa 	slli	r3,r2,23
 800482c:	20803fcc 	andi	r2,r4,255
 8004830:	100897fa 	slli	r4,r2,31
 8004834:	00802034 	movhi	r2,128
 8004838:	10bfffc4 	addi	r2,r2,-1
 800483c:	8084703a 	and	r2,r16,r2
 8004840:	10c4b03a 	or	r2,r2,r3
 8004844:	1104b03a 	or	r2,r2,r4
 8004848:	dfc00217 	ldw	ra,8(sp)
 800484c:	dc400117 	ldw	r17,4(sp)
 8004850:	dc000017 	ldw	r16,0(sp)
 8004854:	dec00304 	addi	sp,sp,12
 8004858:	f800283a 	ret
 800485c:	01002644 	movi	r4,153
 8004860:	20c01c16 	blt	r4,r3,80048d4 <__floatsisf+0x100>
 8004864:	20c9c83a 	sub	r4,r4,r3
 8004868:	8120983a 	sll	r16,r16,r4
 800486c:	013f0034 	movhi	r4,64512
 8004870:	213fffc4 	addi	r4,r4,-1
 8004874:	814001cc 	andi	r5,r16,7
 8004878:	8108703a 	and	r4,r16,r4
 800487c:	28000426 	beq	r5,zero,8004890 <__floatsisf+0xbc>
 8004880:	840003cc 	andi	r16,r16,15
 8004884:	01400104 	movi	r5,4
 8004888:	81400126 	beq	r16,r5,8004890 <__floatsisf+0xbc>
 800488c:	2149883a 	add	r4,r4,r5
 8004890:	2141002c 	andhi	r5,r4,1024
 8004894:	28000526 	beq	r5,zero,80048ac <__floatsisf+0xd8>
 8004898:	00c027c4 	movi	r3,159
 800489c:	1887c83a 	sub	r3,r3,r2
 80048a0:	00bf0034 	movhi	r2,64512
 80048a4:	10bfffc4 	addi	r2,r2,-1
 80048a8:	2088703a 	and	r4,r4,r2
 80048ac:	202091ba 	slli	r16,r4,6
 80048b0:	8809883a 	mov	r4,r17
 80048b4:	8020d27a 	srli	r16,r16,9
 80048b8:	003fda06 	br	8004824 <__alt_data_end+0xfc004824>
 80048bc:	0009883a 	mov	r4,zero
 80048c0:	0007883a 	mov	r3,zero
 80048c4:	0021883a 	mov	r16,zero
 80048c8:	003fd606 	br	8004824 <__alt_data_end+0xfc004824>
 80048cc:	0121c83a 	sub	r16,zero,r4
 80048d0:	003fc806 	br	80047f4 <__alt_data_end+0xfc0047f4>
 80048d4:	01002e44 	movi	r4,185
 80048d8:	20c9c83a 	sub	r4,r4,r3
 80048dc:	01400144 	movi	r5,5
 80048e0:	8108983a 	sll	r4,r16,r4
 80048e4:	288bc83a 	sub	r5,r5,r2
 80048e8:	8160d83a 	srl	r16,r16,r5
 80048ec:	2008c03a 	cmpne	r4,r4,zero
 80048f0:	8120b03a 	or	r16,r16,r4
 80048f4:	003fdd06 	br	800486c <__alt_data_end+0xfc00486c>

080048f8 <__adddf3>:
 80048f8:	02c00434 	movhi	r11,16
 80048fc:	5affffc4 	addi	r11,r11,-1
 8004900:	2806d7fa 	srli	r3,r5,31
 8004904:	2ad4703a 	and	r10,r5,r11
 8004908:	3ad2703a 	and	r9,r7,r11
 800490c:	3804d53a 	srli	r2,r7,20
 8004910:	3018d77a 	srli	r12,r6,29
 8004914:	280ad53a 	srli	r5,r5,20
 8004918:	501490fa 	slli	r10,r10,3
 800491c:	2010d77a 	srli	r8,r4,29
 8004920:	481290fa 	slli	r9,r9,3
 8004924:	380ed7fa 	srli	r7,r7,31
 8004928:	defffb04 	addi	sp,sp,-20
 800492c:	dc800215 	stw	r18,8(sp)
 8004930:	dc400115 	stw	r17,4(sp)
 8004934:	dc000015 	stw	r16,0(sp)
 8004938:	dfc00415 	stw	ra,16(sp)
 800493c:	dcc00315 	stw	r19,12(sp)
 8004940:	1c803fcc 	andi	r18,r3,255
 8004944:	2c01ffcc 	andi	r16,r5,2047
 8004948:	5210b03a 	or	r8,r10,r8
 800494c:	202290fa 	slli	r17,r4,3
 8004950:	1081ffcc 	andi	r2,r2,2047
 8004954:	4b12b03a 	or	r9,r9,r12
 8004958:	300c90fa 	slli	r6,r6,3
 800495c:	91c07526 	beq	r18,r7,8004b34 <__adddf3+0x23c>
 8004960:	8087c83a 	sub	r3,r16,r2
 8004964:	00c0ab0e 	bge	zero,r3,8004c14 <__adddf3+0x31c>
 8004968:	10002a1e 	bne	r2,zero,8004a14 <__adddf3+0x11c>
 800496c:	4984b03a 	or	r2,r9,r6
 8004970:	1000961e 	bne	r2,zero,8004bcc <__adddf3+0x2d4>
 8004974:	888001cc 	andi	r2,r17,7
 8004978:	10000726 	beq	r2,zero,8004998 <__adddf3+0xa0>
 800497c:	888003cc 	andi	r2,r17,15
 8004980:	00c00104 	movi	r3,4
 8004984:	10c00426 	beq	r2,r3,8004998 <__adddf3+0xa0>
 8004988:	88c7883a 	add	r3,r17,r3
 800498c:	1c63803a 	cmpltu	r17,r3,r17
 8004990:	4451883a 	add	r8,r8,r17
 8004994:	1823883a 	mov	r17,r3
 8004998:	4080202c 	andhi	r2,r8,128
 800499c:	10005926 	beq	r2,zero,8004b04 <__adddf3+0x20c>
 80049a0:	84000044 	addi	r16,r16,1
 80049a4:	0081ffc4 	movi	r2,2047
 80049a8:	8080ba26 	beq	r16,r2,8004c94 <__adddf3+0x39c>
 80049ac:	00bfe034 	movhi	r2,65408
 80049b0:	10bfffc4 	addi	r2,r2,-1
 80049b4:	4090703a 	and	r8,r8,r2
 80049b8:	4004977a 	slli	r2,r8,29
 80049bc:	4010927a 	slli	r8,r8,9
 80049c0:	8822d0fa 	srli	r17,r17,3
 80049c4:	8401ffcc 	andi	r16,r16,2047
 80049c8:	4010d33a 	srli	r8,r8,12
 80049cc:	9007883a 	mov	r3,r18
 80049d0:	1444b03a 	or	r2,r2,r17
 80049d4:	8401ffcc 	andi	r16,r16,2047
 80049d8:	8020953a 	slli	r16,r16,20
 80049dc:	18c03fcc 	andi	r3,r3,255
 80049e0:	01000434 	movhi	r4,16
 80049e4:	213fffc4 	addi	r4,r4,-1
 80049e8:	180697fa 	slli	r3,r3,31
 80049ec:	4110703a 	and	r8,r8,r4
 80049f0:	4410b03a 	or	r8,r8,r16
 80049f4:	40c6b03a 	or	r3,r8,r3
 80049f8:	dfc00417 	ldw	ra,16(sp)
 80049fc:	dcc00317 	ldw	r19,12(sp)
 8004a00:	dc800217 	ldw	r18,8(sp)
 8004a04:	dc400117 	ldw	r17,4(sp)
 8004a08:	dc000017 	ldw	r16,0(sp)
 8004a0c:	dec00504 	addi	sp,sp,20
 8004a10:	f800283a 	ret
 8004a14:	0081ffc4 	movi	r2,2047
 8004a18:	80bfd626 	beq	r16,r2,8004974 <__alt_data_end+0xfc004974>
 8004a1c:	4a402034 	orhi	r9,r9,128
 8004a20:	00800e04 	movi	r2,56
 8004a24:	10c09f16 	blt	r2,r3,8004ca4 <__adddf3+0x3ac>
 8004a28:	008007c4 	movi	r2,31
 8004a2c:	10c0c216 	blt	r2,r3,8004d38 <__adddf3+0x440>
 8004a30:	00800804 	movi	r2,32
 8004a34:	10c5c83a 	sub	r2,r2,r3
 8004a38:	488a983a 	sll	r5,r9,r2
 8004a3c:	30c8d83a 	srl	r4,r6,r3
 8004a40:	3084983a 	sll	r2,r6,r2
 8004a44:	48c6d83a 	srl	r3,r9,r3
 8004a48:	290cb03a 	or	r6,r5,r4
 8004a4c:	1004c03a 	cmpne	r2,r2,zero
 8004a50:	308cb03a 	or	r6,r6,r2
 8004a54:	898dc83a 	sub	r6,r17,r6
 8004a58:	89a3803a 	cmpltu	r17,r17,r6
 8004a5c:	40d1c83a 	sub	r8,r8,r3
 8004a60:	4451c83a 	sub	r8,r8,r17
 8004a64:	3023883a 	mov	r17,r6
 8004a68:	4080202c 	andhi	r2,r8,128
 8004a6c:	10002326 	beq	r2,zero,8004afc <__adddf3+0x204>
 8004a70:	04c02034 	movhi	r19,128
 8004a74:	9cffffc4 	addi	r19,r19,-1
 8004a78:	44e6703a 	and	r19,r8,r19
 8004a7c:	98007626 	beq	r19,zero,8004c58 <__adddf3+0x360>
 8004a80:	9809883a 	mov	r4,r19
 8004a84:	800710c0 	call	800710c <__clzsi2>
 8004a88:	10fffe04 	addi	r3,r2,-8
 8004a8c:	010007c4 	movi	r4,31
 8004a90:	20c07716 	blt	r4,r3,8004c70 <__adddf3+0x378>
 8004a94:	00800804 	movi	r2,32
 8004a98:	10c5c83a 	sub	r2,r2,r3
 8004a9c:	8884d83a 	srl	r2,r17,r2
 8004aa0:	98d0983a 	sll	r8,r19,r3
 8004aa4:	88e2983a 	sll	r17,r17,r3
 8004aa8:	1204b03a 	or	r2,r2,r8
 8004aac:	1c007416 	blt	r3,r16,8004c80 <__adddf3+0x388>
 8004ab0:	1c21c83a 	sub	r16,r3,r16
 8004ab4:	82000044 	addi	r8,r16,1
 8004ab8:	00c007c4 	movi	r3,31
 8004abc:	1a009116 	blt	r3,r8,8004d04 <__adddf3+0x40c>
 8004ac0:	00c00804 	movi	r3,32
 8004ac4:	1a07c83a 	sub	r3,r3,r8
 8004ac8:	8a08d83a 	srl	r4,r17,r8
 8004acc:	88e2983a 	sll	r17,r17,r3
 8004ad0:	10c6983a 	sll	r3,r2,r3
 8004ad4:	1210d83a 	srl	r8,r2,r8
 8004ad8:	8804c03a 	cmpne	r2,r17,zero
 8004adc:	1906b03a 	or	r3,r3,r4
 8004ae0:	18a2b03a 	or	r17,r3,r2
 8004ae4:	0021883a 	mov	r16,zero
 8004ae8:	003fa206 	br	8004974 <__alt_data_end+0xfc004974>
 8004aec:	1890b03a 	or	r8,r3,r2
 8004af0:	40017d26 	beq	r8,zero,80050e8 <__adddf3+0x7f0>
 8004af4:	1011883a 	mov	r8,r2
 8004af8:	1823883a 	mov	r17,r3
 8004afc:	888001cc 	andi	r2,r17,7
 8004b00:	103f9e1e 	bne	r2,zero,800497c <__alt_data_end+0xfc00497c>
 8004b04:	4004977a 	slli	r2,r8,29
 8004b08:	8822d0fa 	srli	r17,r17,3
 8004b0c:	4010d0fa 	srli	r8,r8,3
 8004b10:	9007883a 	mov	r3,r18
 8004b14:	1444b03a 	or	r2,r2,r17
 8004b18:	0101ffc4 	movi	r4,2047
 8004b1c:	81002426 	beq	r16,r4,8004bb0 <__adddf3+0x2b8>
 8004b20:	8120703a 	and	r16,r16,r4
 8004b24:	01000434 	movhi	r4,16
 8004b28:	213fffc4 	addi	r4,r4,-1
 8004b2c:	4110703a 	and	r8,r8,r4
 8004b30:	003fa806 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004b34:	8089c83a 	sub	r4,r16,r2
 8004b38:	01005e0e 	bge	zero,r4,8004cb4 <__adddf3+0x3bc>
 8004b3c:	10002b26 	beq	r2,zero,8004bec <__adddf3+0x2f4>
 8004b40:	0081ffc4 	movi	r2,2047
 8004b44:	80bf8b26 	beq	r16,r2,8004974 <__alt_data_end+0xfc004974>
 8004b48:	4a402034 	orhi	r9,r9,128
 8004b4c:	00800e04 	movi	r2,56
 8004b50:	1100a40e 	bge	r2,r4,8004de4 <__adddf3+0x4ec>
 8004b54:	498cb03a 	or	r6,r9,r6
 8004b58:	300ac03a 	cmpne	r5,r6,zero
 8004b5c:	0013883a 	mov	r9,zero
 8004b60:	2c4b883a 	add	r5,r5,r17
 8004b64:	2c63803a 	cmpltu	r17,r5,r17
 8004b68:	4a11883a 	add	r8,r9,r8
 8004b6c:	8a11883a 	add	r8,r17,r8
 8004b70:	2823883a 	mov	r17,r5
 8004b74:	4080202c 	andhi	r2,r8,128
 8004b78:	103fe026 	beq	r2,zero,8004afc <__alt_data_end+0xfc004afc>
 8004b7c:	84000044 	addi	r16,r16,1
 8004b80:	0081ffc4 	movi	r2,2047
 8004b84:	8080d226 	beq	r16,r2,8004ed0 <__adddf3+0x5d8>
 8004b88:	00bfe034 	movhi	r2,65408
 8004b8c:	10bfffc4 	addi	r2,r2,-1
 8004b90:	4090703a 	and	r8,r8,r2
 8004b94:	880ad07a 	srli	r5,r17,1
 8004b98:	400897fa 	slli	r4,r8,31
 8004b9c:	88c0004c 	andi	r3,r17,1
 8004ba0:	28e2b03a 	or	r17,r5,r3
 8004ba4:	4010d07a 	srli	r8,r8,1
 8004ba8:	2462b03a 	or	r17,r4,r17
 8004bac:	003f7106 	br	8004974 <__alt_data_end+0xfc004974>
 8004bb0:	4088b03a 	or	r4,r8,r2
 8004bb4:	20014526 	beq	r4,zero,80050cc <__adddf3+0x7d4>
 8004bb8:	01000434 	movhi	r4,16
 8004bbc:	42000234 	orhi	r8,r8,8
 8004bc0:	213fffc4 	addi	r4,r4,-1
 8004bc4:	4110703a 	and	r8,r8,r4
 8004bc8:	003f8206 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004bcc:	18ffffc4 	addi	r3,r3,-1
 8004bd0:	1800491e 	bne	r3,zero,8004cf8 <__adddf3+0x400>
 8004bd4:	898bc83a 	sub	r5,r17,r6
 8004bd8:	8963803a 	cmpltu	r17,r17,r5
 8004bdc:	4251c83a 	sub	r8,r8,r9
 8004be0:	4451c83a 	sub	r8,r8,r17
 8004be4:	2823883a 	mov	r17,r5
 8004be8:	003f9f06 	br	8004a68 <__alt_data_end+0xfc004a68>
 8004bec:	4984b03a 	or	r2,r9,r6
 8004bf0:	103f6026 	beq	r2,zero,8004974 <__alt_data_end+0xfc004974>
 8004bf4:	213fffc4 	addi	r4,r4,-1
 8004bf8:	2000931e 	bne	r4,zero,8004e48 <__adddf3+0x550>
 8004bfc:	898d883a 	add	r6,r17,r6
 8004c00:	3463803a 	cmpltu	r17,r6,r17
 8004c04:	4251883a 	add	r8,r8,r9
 8004c08:	8a11883a 	add	r8,r17,r8
 8004c0c:	3023883a 	mov	r17,r6
 8004c10:	003fd806 	br	8004b74 <__alt_data_end+0xfc004b74>
 8004c14:	1800541e 	bne	r3,zero,8004d68 <__adddf3+0x470>
 8004c18:	80800044 	addi	r2,r16,1
 8004c1c:	1081ffcc 	andi	r2,r2,2047
 8004c20:	00c00044 	movi	r3,1
 8004c24:	1880a00e 	bge	r3,r2,8004ea8 <__adddf3+0x5b0>
 8004c28:	8989c83a 	sub	r4,r17,r6
 8004c2c:	8905803a 	cmpltu	r2,r17,r4
 8004c30:	4267c83a 	sub	r19,r8,r9
 8004c34:	98a7c83a 	sub	r19,r19,r2
 8004c38:	9880202c 	andhi	r2,r19,128
 8004c3c:	10006326 	beq	r2,zero,8004dcc <__adddf3+0x4d4>
 8004c40:	3463c83a 	sub	r17,r6,r17
 8004c44:	4a07c83a 	sub	r3,r9,r8
 8004c48:	344d803a 	cmpltu	r6,r6,r17
 8004c4c:	19a7c83a 	sub	r19,r3,r6
 8004c50:	3825883a 	mov	r18,r7
 8004c54:	983f8a1e 	bne	r19,zero,8004a80 <__alt_data_end+0xfc004a80>
 8004c58:	8809883a 	mov	r4,r17
 8004c5c:	800710c0 	call	800710c <__clzsi2>
 8004c60:	10800804 	addi	r2,r2,32
 8004c64:	10fffe04 	addi	r3,r2,-8
 8004c68:	010007c4 	movi	r4,31
 8004c6c:	20ff890e 	bge	r4,r3,8004a94 <__alt_data_end+0xfc004a94>
 8004c70:	10bff604 	addi	r2,r2,-40
 8004c74:	8884983a 	sll	r2,r17,r2
 8004c78:	0023883a 	mov	r17,zero
 8004c7c:	1c3f8c0e 	bge	r3,r16,8004ab0 <__alt_data_end+0xfc004ab0>
 8004c80:	023fe034 	movhi	r8,65408
 8004c84:	423fffc4 	addi	r8,r8,-1
 8004c88:	80e1c83a 	sub	r16,r16,r3
 8004c8c:	1210703a 	and	r8,r2,r8
 8004c90:	003f3806 	br	8004974 <__alt_data_end+0xfc004974>
 8004c94:	9007883a 	mov	r3,r18
 8004c98:	0011883a 	mov	r8,zero
 8004c9c:	0005883a 	mov	r2,zero
 8004ca0:	003f4c06 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004ca4:	498cb03a 	or	r6,r9,r6
 8004ca8:	300cc03a 	cmpne	r6,r6,zero
 8004cac:	0007883a 	mov	r3,zero
 8004cb0:	003f6806 	br	8004a54 <__alt_data_end+0xfc004a54>
 8004cb4:	20009c1e 	bne	r4,zero,8004f28 <__adddf3+0x630>
 8004cb8:	80800044 	addi	r2,r16,1
 8004cbc:	1141ffcc 	andi	r5,r2,2047
 8004cc0:	01000044 	movi	r4,1
 8004cc4:	2140670e 	bge	r4,r5,8004e64 <__adddf3+0x56c>
 8004cc8:	0101ffc4 	movi	r4,2047
 8004ccc:	11007f26 	beq	r2,r4,8004ecc <__adddf3+0x5d4>
 8004cd0:	898d883a 	add	r6,r17,r6
 8004cd4:	4247883a 	add	r3,r8,r9
 8004cd8:	3451803a 	cmpltu	r8,r6,r17
 8004cdc:	40d1883a 	add	r8,r8,r3
 8004ce0:	402297fa 	slli	r17,r8,31
 8004ce4:	300cd07a 	srli	r6,r6,1
 8004ce8:	4010d07a 	srli	r8,r8,1
 8004cec:	1021883a 	mov	r16,r2
 8004cf0:	89a2b03a 	or	r17,r17,r6
 8004cf4:	003f1f06 	br	8004974 <__alt_data_end+0xfc004974>
 8004cf8:	0081ffc4 	movi	r2,2047
 8004cfc:	80bf481e 	bne	r16,r2,8004a20 <__alt_data_end+0xfc004a20>
 8004d00:	003f1c06 	br	8004974 <__alt_data_end+0xfc004974>
 8004d04:	843ff844 	addi	r16,r16,-31
 8004d08:	01000804 	movi	r4,32
 8004d0c:	1406d83a 	srl	r3,r2,r16
 8004d10:	41005026 	beq	r8,r4,8004e54 <__adddf3+0x55c>
 8004d14:	01001004 	movi	r4,64
 8004d18:	2211c83a 	sub	r8,r4,r8
 8004d1c:	1204983a 	sll	r2,r2,r8
 8004d20:	88a2b03a 	or	r17,r17,r2
 8004d24:	8822c03a 	cmpne	r17,r17,zero
 8004d28:	1c62b03a 	or	r17,r3,r17
 8004d2c:	0011883a 	mov	r8,zero
 8004d30:	0021883a 	mov	r16,zero
 8004d34:	003f7106 	br	8004afc <__alt_data_end+0xfc004afc>
 8004d38:	193ff804 	addi	r4,r3,-32
 8004d3c:	00800804 	movi	r2,32
 8004d40:	4908d83a 	srl	r4,r9,r4
 8004d44:	18804526 	beq	r3,r2,8004e5c <__adddf3+0x564>
 8004d48:	00801004 	movi	r2,64
 8004d4c:	10c5c83a 	sub	r2,r2,r3
 8004d50:	4886983a 	sll	r3,r9,r2
 8004d54:	198cb03a 	or	r6,r3,r6
 8004d58:	300cc03a 	cmpne	r6,r6,zero
 8004d5c:	218cb03a 	or	r6,r4,r6
 8004d60:	0007883a 	mov	r3,zero
 8004d64:	003f3b06 	br	8004a54 <__alt_data_end+0xfc004a54>
 8004d68:	80002a26 	beq	r16,zero,8004e14 <__adddf3+0x51c>
 8004d6c:	0101ffc4 	movi	r4,2047
 8004d70:	11006826 	beq	r2,r4,8004f14 <__adddf3+0x61c>
 8004d74:	00c7c83a 	sub	r3,zero,r3
 8004d78:	42002034 	orhi	r8,r8,128
 8004d7c:	01000e04 	movi	r4,56
 8004d80:	20c07c16 	blt	r4,r3,8004f74 <__adddf3+0x67c>
 8004d84:	010007c4 	movi	r4,31
 8004d88:	20c0da16 	blt	r4,r3,80050f4 <__adddf3+0x7fc>
 8004d8c:	01000804 	movi	r4,32
 8004d90:	20c9c83a 	sub	r4,r4,r3
 8004d94:	4114983a 	sll	r10,r8,r4
 8004d98:	88cad83a 	srl	r5,r17,r3
 8004d9c:	8908983a 	sll	r4,r17,r4
 8004da0:	40c6d83a 	srl	r3,r8,r3
 8004da4:	5162b03a 	or	r17,r10,r5
 8004da8:	2008c03a 	cmpne	r4,r4,zero
 8004dac:	8922b03a 	or	r17,r17,r4
 8004db0:	3463c83a 	sub	r17,r6,r17
 8004db4:	48c7c83a 	sub	r3,r9,r3
 8004db8:	344d803a 	cmpltu	r6,r6,r17
 8004dbc:	1991c83a 	sub	r8,r3,r6
 8004dc0:	1021883a 	mov	r16,r2
 8004dc4:	3825883a 	mov	r18,r7
 8004dc8:	003f2706 	br	8004a68 <__alt_data_end+0xfc004a68>
 8004dcc:	24d0b03a 	or	r8,r4,r19
 8004dd0:	40001b1e 	bne	r8,zero,8004e40 <__adddf3+0x548>
 8004dd4:	0005883a 	mov	r2,zero
 8004dd8:	0007883a 	mov	r3,zero
 8004ddc:	0021883a 	mov	r16,zero
 8004de0:	003f4d06 	br	8004b18 <__alt_data_end+0xfc004b18>
 8004de4:	008007c4 	movi	r2,31
 8004de8:	11003c16 	blt	r2,r4,8004edc <__adddf3+0x5e4>
 8004dec:	00800804 	movi	r2,32
 8004df0:	1105c83a 	sub	r2,r2,r4
 8004df4:	488e983a 	sll	r7,r9,r2
 8004df8:	310ad83a 	srl	r5,r6,r4
 8004dfc:	3084983a 	sll	r2,r6,r2
 8004e00:	4912d83a 	srl	r9,r9,r4
 8004e04:	394ab03a 	or	r5,r7,r5
 8004e08:	1004c03a 	cmpne	r2,r2,zero
 8004e0c:	288ab03a 	or	r5,r5,r2
 8004e10:	003f5306 	br	8004b60 <__alt_data_end+0xfc004b60>
 8004e14:	4448b03a 	or	r4,r8,r17
 8004e18:	20003e26 	beq	r4,zero,8004f14 <__adddf3+0x61c>
 8004e1c:	00c6303a 	nor	r3,zero,r3
 8004e20:	18003a1e 	bne	r3,zero,8004f0c <__adddf3+0x614>
 8004e24:	3463c83a 	sub	r17,r6,r17
 8004e28:	4a07c83a 	sub	r3,r9,r8
 8004e2c:	344d803a 	cmpltu	r6,r6,r17
 8004e30:	1991c83a 	sub	r8,r3,r6
 8004e34:	1021883a 	mov	r16,r2
 8004e38:	3825883a 	mov	r18,r7
 8004e3c:	003f0a06 	br	8004a68 <__alt_data_end+0xfc004a68>
 8004e40:	2023883a 	mov	r17,r4
 8004e44:	003f0d06 	br	8004a7c <__alt_data_end+0xfc004a7c>
 8004e48:	0081ffc4 	movi	r2,2047
 8004e4c:	80bf3f1e 	bne	r16,r2,8004b4c <__alt_data_end+0xfc004b4c>
 8004e50:	003ec806 	br	8004974 <__alt_data_end+0xfc004974>
 8004e54:	0005883a 	mov	r2,zero
 8004e58:	003fb106 	br	8004d20 <__alt_data_end+0xfc004d20>
 8004e5c:	0007883a 	mov	r3,zero
 8004e60:	003fbc06 	br	8004d54 <__alt_data_end+0xfc004d54>
 8004e64:	4444b03a 	or	r2,r8,r17
 8004e68:	8000871e 	bne	r16,zero,8005088 <__adddf3+0x790>
 8004e6c:	1000ba26 	beq	r2,zero,8005158 <__adddf3+0x860>
 8004e70:	4984b03a 	or	r2,r9,r6
 8004e74:	103ebf26 	beq	r2,zero,8004974 <__alt_data_end+0xfc004974>
 8004e78:	8985883a 	add	r2,r17,r6
 8004e7c:	4247883a 	add	r3,r8,r9
 8004e80:	1451803a 	cmpltu	r8,r2,r17
 8004e84:	40d1883a 	add	r8,r8,r3
 8004e88:	40c0202c 	andhi	r3,r8,128
 8004e8c:	1023883a 	mov	r17,r2
 8004e90:	183f1a26 	beq	r3,zero,8004afc <__alt_data_end+0xfc004afc>
 8004e94:	00bfe034 	movhi	r2,65408
 8004e98:	10bfffc4 	addi	r2,r2,-1
 8004e9c:	2021883a 	mov	r16,r4
 8004ea0:	4090703a 	and	r8,r8,r2
 8004ea4:	003eb306 	br	8004974 <__alt_data_end+0xfc004974>
 8004ea8:	4444b03a 	or	r2,r8,r17
 8004eac:	8000291e 	bne	r16,zero,8004f54 <__adddf3+0x65c>
 8004eb0:	10004b1e 	bne	r2,zero,8004fe0 <__adddf3+0x6e8>
 8004eb4:	4990b03a 	or	r8,r9,r6
 8004eb8:	40008b26 	beq	r8,zero,80050e8 <__adddf3+0x7f0>
 8004ebc:	4811883a 	mov	r8,r9
 8004ec0:	3023883a 	mov	r17,r6
 8004ec4:	3825883a 	mov	r18,r7
 8004ec8:	003eaa06 	br	8004974 <__alt_data_end+0xfc004974>
 8004ecc:	1021883a 	mov	r16,r2
 8004ed0:	0011883a 	mov	r8,zero
 8004ed4:	0005883a 	mov	r2,zero
 8004ed8:	003f0f06 	br	8004b18 <__alt_data_end+0xfc004b18>
 8004edc:	217ff804 	addi	r5,r4,-32
 8004ee0:	00800804 	movi	r2,32
 8004ee4:	494ad83a 	srl	r5,r9,r5
 8004ee8:	20807d26 	beq	r4,r2,80050e0 <__adddf3+0x7e8>
 8004eec:	00801004 	movi	r2,64
 8004ef0:	1109c83a 	sub	r4,r2,r4
 8004ef4:	4912983a 	sll	r9,r9,r4
 8004ef8:	498cb03a 	or	r6,r9,r6
 8004efc:	300cc03a 	cmpne	r6,r6,zero
 8004f00:	298ab03a 	or	r5,r5,r6
 8004f04:	0013883a 	mov	r9,zero
 8004f08:	003f1506 	br	8004b60 <__alt_data_end+0xfc004b60>
 8004f0c:	0101ffc4 	movi	r4,2047
 8004f10:	113f9a1e 	bne	r2,r4,8004d7c <__alt_data_end+0xfc004d7c>
 8004f14:	4811883a 	mov	r8,r9
 8004f18:	3023883a 	mov	r17,r6
 8004f1c:	1021883a 	mov	r16,r2
 8004f20:	3825883a 	mov	r18,r7
 8004f24:	003e9306 	br	8004974 <__alt_data_end+0xfc004974>
 8004f28:	8000161e 	bne	r16,zero,8004f84 <__adddf3+0x68c>
 8004f2c:	444ab03a 	or	r5,r8,r17
 8004f30:	28005126 	beq	r5,zero,8005078 <__adddf3+0x780>
 8004f34:	0108303a 	nor	r4,zero,r4
 8004f38:	20004d1e 	bne	r4,zero,8005070 <__adddf3+0x778>
 8004f3c:	89a3883a 	add	r17,r17,r6
 8004f40:	4253883a 	add	r9,r8,r9
 8004f44:	898d803a 	cmpltu	r6,r17,r6
 8004f48:	3251883a 	add	r8,r6,r9
 8004f4c:	1021883a 	mov	r16,r2
 8004f50:	003f0806 	br	8004b74 <__alt_data_end+0xfc004b74>
 8004f54:	1000301e 	bne	r2,zero,8005018 <__adddf3+0x720>
 8004f58:	4984b03a 	or	r2,r9,r6
 8004f5c:	10007126 	beq	r2,zero,8005124 <__adddf3+0x82c>
 8004f60:	4811883a 	mov	r8,r9
 8004f64:	3023883a 	mov	r17,r6
 8004f68:	3825883a 	mov	r18,r7
 8004f6c:	0401ffc4 	movi	r16,2047
 8004f70:	003e8006 	br	8004974 <__alt_data_end+0xfc004974>
 8004f74:	4462b03a 	or	r17,r8,r17
 8004f78:	8822c03a 	cmpne	r17,r17,zero
 8004f7c:	0007883a 	mov	r3,zero
 8004f80:	003f8b06 	br	8004db0 <__alt_data_end+0xfc004db0>
 8004f84:	0141ffc4 	movi	r5,2047
 8004f88:	11403b26 	beq	r2,r5,8005078 <__adddf3+0x780>
 8004f8c:	0109c83a 	sub	r4,zero,r4
 8004f90:	42002034 	orhi	r8,r8,128
 8004f94:	01400e04 	movi	r5,56
 8004f98:	29006716 	blt	r5,r4,8005138 <__adddf3+0x840>
 8004f9c:	014007c4 	movi	r5,31
 8004fa0:	29007016 	blt	r5,r4,8005164 <__adddf3+0x86c>
 8004fa4:	01400804 	movi	r5,32
 8004fa8:	290bc83a 	sub	r5,r5,r4
 8004fac:	4154983a 	sll	r10,r8,r5
 8004fb0:	890ed83a 	srl	r7,r17,r4
 8004fb4:	894a983a 	sll	r5,r17,r5
 8004fb8:	4108d83a 	srl	r4,r8,r4
 8004fbc:	51e2b03a 	or	r17,r10,r7
 8004fc0:	280ac03a 	cmpne	r5,r5,zero
 8004fc4:	8962b03a 	or	r17,r17,r5
 8004fc8:	89a3883a 	add	r17,r17,r6
 8004fcc:	2253883a 	add	r9,r4,r9
 8004fd0:	898d803a 	cmpltu	r6,r17,r6
 8004fd4:	3251883a 	add	r8,r6,r9
 8004fd8:	1021883a 	mov	r16,r2
 8004fdc:	003ee506 	br	8004b74 <__alt_data_end+0xfc004b74>
 8004fe0:	4984b03a 	or	r2,r9,r6
 8004fe4:	103e6326 	beq	r2,zero,8004974 <__alt_data_end+0xfc004974>
 8004fe8:	8987c83a 	sub	r3,r17,r6
 8004fec:	88c9803a 	cmpltu	r4,r17,r3
 8004ff0:	4245c83a 	sub	r2,r8,r9
 8004ff4:	1105c83a 	sub	r2,r2,r4
 8004ff8:	1100202c 	andhi	r4,r2,128
 8004ffc:	203ebb26 	beq	r4,zero,8004aec <__alt_data_end+0xfc004aec>
 8005000:	3463c83a 	sub	r17,r6,r17
 8005004:	4a07c83a 	sub	r3,r9,r8
 8005008:	344d803a 	cmpltu	r6,r6,r17
 800500c:	1991c83a 	sub	r8,r3,r6
 8005010:	3825883a 	mov	r18,r7
 8005014:	003e5706 	br	8004974 <__alt_data_end+0xfc004974>
 8005018:	4984b03a 	or	r2,r9,r6
 800501c:	10002e26 	beq	r2,zero,80050d8 <__adddf3+0x7e0>
 8005020:	4004d0fa 	srli	r2,r8,3
 8005024:	8822d0fa 	srli	r17,r17,3
 8005028:	4010977a 	slli	r8,r8,29
 800502c:	10c0022c 	andhi	r3,r2,8
 8005030:	4462b03a 	or	r17,r8,r17
 8005034:	18000826 	beq	r3,zero,8005058 <__adddf3+0x760>
 8005038:	4808d0fa 	srli	r4,r9,3
 800503c:	20c0022c 	andhi	r3,r4,8
 8005040:	1800051e 	bne	r3,zero,8005058 <__adddf3+0x760>
 8005044:	300cd0fa 	srli	r6,r6,3
 8005048:	4806977a 	slli	r3,r9,29
 800504c:	2005883a 	mov	r2,r4
 8005050:	3825883a 	mov	r18,r7
 8005054:	19a2b03a 	or	r17,r3,r6
 8005058:	8810d77a 	srli	r8,r17,29
 800505c:	100490fa 	slli	r2,r2,3
 8005060:	882290fa 	slli	r17,r17,3
 8005064:	0401ffc4 	movi	r16,2047
 8005068:	4090b03a 	or	r8,r8,r2
 800506c:	003e4106 	br	8004974 <__alt_data_end+0xfc004974>
 8005070:	0141ffc4 	movi	r5,2047
 8005074:	117fc71e 	bne	r2,r5,8004f94 <__alt_data_end+0xfc004f94>
 8005078:	4811883a 	mov	r8,r9
 800507c:	3023883a 	mov	r17,r6
 8005080:	1021883a 	mov	r16,r2
 8005084:	003e3b06 	br	8004974 <__alt_data_end+0xfc004974>
 8005088:	10002f26 	beq	r2,zero,8005148 <__adddf3+0x850>
 800508c:	4984b03a 	or	r2,r9,r6
 8005090:	10001126 	beq	r2,zero,80050d8 <__adddf3+0x7e0>
 8005094:	4004d0fa 	srli	r2,r8,3
 8005098:	8822d0fa 	srli	r17,r17,3
 800509c:	4010977a 	slli	r8,r8,29
 80050a0:	10c0022c 	andhi	r3,r2,8
 80050a4:	4462b03a 	or	r17,r8,r17
 80050a8:	183feb26 	beq	r3,zero,8005058 <__alt_data_end+0xfc005058>
 80050ac:	4808d0fa 	srli	r4,r9,3
 80050b0:	20c0022c 	andhi	r3,r4,8
 80050b4:	183fe81e 	bne	r3,zero,8005058 <__alt_data_end+0xfc005058>
 80050b8:	300cd0fa 	srli	r6,r6,3
 80050bc:	4806977a 	slli	r3,r9,29
 80050c0:	2005883a 	mov	r2,r4
 80050c4:	19a2b03a 	or	r17,r3,r6
 80050c8:	003fe306 	br	8005058 <__alt_data_end+0xfc005058>
 80050cc:	0011883a 	mov	r8,zero
 80050d0:	0005883a 	mov	r2,zero
 80050d4:	003e3f06 	br	80049d4 <__alt_data_end+0xfc0049d4>
 80050d8:	0401ffc4 	movi	r16,2047
 80050dc:	003e2506 	br	8004974 <__alt_data_end+0xfc004974>
 80050e0:	0013883a 	mov	r9,zero
 80050e4:	003f8406 	br	8004ef8 <__alt_data_end+0xfc004ef8>
 80050e8:	0005883a 	mov	r2,zero
 80050ec:	0007883a 	mov	r3,zero
 80050f0:	003e8906 	br	8004b18 <__alt_data_end+0xfc004b18>
 80050f4:	197ff804 	addi	r5,r3,-32
 80050f8:	01000804 	movi	r4,32
 80050fc:	414ad83a 	srl	r5,r8,r5
 8005100:	19002426 	beq	r3,r4,8005194 <__adddf3+0x89c>
 8005104:	01001004 	movi	r4,64
 8005108:	20c7c83a 	sub	r3,r4,r3
 800510c:	40c6983a 	sll	r3,r8,r3
 8005110:	1c46b03a 	or	r3,r3,r17
 8005114:	1806c03a 	cmpne	r3,r3,zero
 8005118:	28e2b03a 	or	r17,r5,r3
 800511c:	0007883a 	mov	r3,zero
 8005120:	003f2306 	br	8004db0 <__alt_data_end+0xfc004db0>
 8005124:	0007883a 	mov	r3,zero
 8005128:	5811883a 	mov	r8,r11
 800512c:	00bfffc4 	movi	r2,-1
 8005130:	0401ffc4 	movi	r16,2047
 8005134:	003e7806 	br	8004b18 <__alt_data_end+0xfc004b18>
 8005138:	4462b03a 	or	r17,r8,r17
 800513c:	8822c03a 	cmpne	r17,r17,zero
 8005140:	0009883a 	mov	r4,zero
 8005144:	003fa006 	br	8004fc8 <__alt_data_end+0xfc004fc8>
 8005148:	4811883a 	mov	r8,r9
 800514c:	3023883a 	mov	r17,r6
 8005150:	0401ffc4 	movi	r16,2047
 8005154:	003e0706 	br	8004974 <__alt_data_end+0xfc004974>
 8005158:	4811883a 	mov	r8,r9
 800515c:	3023883a 	mov	r17,r6
 8005160:	003e0406 	br	8004974 <__alt_data_end+0xfc004974>
 8005164:	21fff804 	addi	r7,r4,-32
 8005168:	01400804 	movi	r5,32
 800516c:	41ced83a 	srl	r7,r8,r7
 8005170:	21400a26 	beq	r4,r5,800519c <__adddf3+0x8a4>
 8005174:	01401004 	movi	r5,64
 8005178:	2909c83a 	sub	r4,r5,r4
 800517c:	4108983a 	sll	r4,r8,r4
 8005180:	2448b03a 	or	r4,r4,r17
 8005184:	2008c03a 	cmpne	r4,r4,zero
 8005188:	3922b03a 	or	r17,r7,r4
 800518c:	0009883a 	mov	r4,zero
 8005190:	003f8d06 	br	8004fc8 <__alt_data_end+0xfc004fc8>
 8005194:	0007883a 	mov	r3,zero
 8005198:	003fdd06 	br	8005110 <__alt_data_end+0xfc005110>
 800519c:	0009883a 	mov	r4,zero
 80051a0:	003ff706 	br	8005180 <__alt_data_end+0xfc005180>

080051a4 <__divdf3>:
 80051a4:	defff204 	addi	sp,sp,-56
 80051a8:	dd400915 	stw	r21,36(sp)
 80051ac:	282ad53a 	srli	r21,r5,20
 80051b0:	dd000815 	stw	r20,32(sp)
 80051b4:	2828d7fa 	srli	r20,r5,31
 80051b8:	dc000415 	stw	r16,16(sp)
 80051bc:	04000434 	movhi	r16,16
 80051c0:	df000c15 	stw	fp,48(sp)
 80051c4:	843fffc4 	addi	r16,r16,-1
 80051c8:	dfc00d15 	stw	ra,52(sp)
 80051cc:	ddc00b15 	stw	r23,44(sp)
 80051d0:	dd800a15 	stw	r22,40(sp)
 80051d4:	dcc00715 	stw	r19,28(sp)
 80051d8:	dc800615 	stw	r18,24(sp)
 80051dc:	dc400515 	stw	r17,20(sp)
 80051e0:	ad41ffcc 	andi	r21,r21,2047
 80051e4:	2c20703a 	and	r16,r5,r16
 80051e8:	a7003fcc 	andi	fp,r20,255
 80051ec:	a8006126 	beq	r21,zero,8005374 <__divdf3+0x1d0>
 80051f0:	0081ffc4 	movi	r2,2047
 80051f4:	2025883a 	mov	r18,r4
 80051f8:	a8803726 	beq	r21,r2,80052d8 <__divdf3+0x134>
 80051fc:	80800434 	orhi	r2,r16,16
 8005200:	100490fa 	slli	r2,r2,3
 8005204:	2020d77a 	srli	r16,r4,29
 8005208:	202490fa 	slli	r18,r4,3
 800520c:	ad7f0044 	addi	r21,r21,-1023
 8005210:	80a0b03a 	or	r16,r16,r2
 8005214:	0027883a 	mov	r19,zero
 8005218:	0013883a 	mov	r9,zero
 800521c:	3804d53a 	srli	r2,r7,20
 8005220:	382cd7fa 	srli	r22,r7,31
 8005224:	04400434 	movhi	r17,16
 8005228:	8c7fffc4 	addi	r17,r17,-1
 800522c:	1081ffcc 	andi	r2,r2,2047
 8005230:	3011883a 	mov	r8,r6
 8005234:	3c62703a 	and	r17,r7,r17
 8005238:	b5c03fcc 	andi	r23,r22,255
 800523c:	10006c26 	beq	r2,zero,80053f0 <__divdf3+0x24c>
 8005240:	00c1ffc4 	movi	r3,2047
 8005244:	10c06426 	beq	r2,r3,80053d8 <__divdf3+0x234>
 8005248:	88c00434 	orhi	r3,r17,16
 800524c:	180690fa 	slli	r3,r3,3
 8005250:	3022d77a 	srli	r17,r6,29
 8005254:	301090fa 	slli	r8,r6,3
 8005258:	10bf0044 	addi	r2,r2,-1023
 800525c:	88e2b03a 	or	r17,r17,r3
 8005260:	000f883a 	mov	r7,zero
 8005264:	a58cf03a 	xor	r6,r20,r22
 8005268:	3cc8b03a 	or	r4,r7,r19
 800526c:	a8abc83a 	sub	r21,r21,r2
 8005270:	008003c4 	movi	r2,15
 8005274:	3007883a 	mov	r3,r6
 8005278:	34c03fcc 	andi	r19,r6,255
 800527c:	11009036 	bltu	r2,r4,80054c0 <__divdf3+0x31c>
 8005280:	200890ba 	slli	r4,r4,2
 8005284:	00820034 	movhi	r2,2048
 8005288:	1094a604 	addi	r2,r2,21144
 800528c:	2089883a 	add	r4,r4,r2
 8005290:	20800017 	ldw	r2,0(r4)
 8005294:	1000683a 	jmp	r2
 8005298:	080054c0 	call	80054c <__ram_exceptions_end+0x7e0304>
 800529c:	08005310 	cmplti	zero,at,332
 80052a0:	080054b0 	cmpltui	zero,at,338
 80052a4:	08005304 	addi	zero,at,332
 80052a8:	080054b0 	cmpltui	zero,at,338
 80052ac:	08005484 	addi	zero,at,338
 80052b0:	080054b0 	cmpltui	zero,at,338
 80052b4:	08005304 	addi	zero,at,332
 80052b8:	08005310 	cmplti	zero,at,332
 80052bc:	08005310 	cmplti	zero,at,332
 80052c0:	08005484 	addi	zero,at,338
 80052c4:	08005304 	addi	zero,at,332
 80052c8:	080052f4 	orhi	zero,at,331
 80052cc:	080052f4 	orhi	zero,at,331
 80052d0:	080052f4 	orhi	zero,at,331
 80052d4:	080057a4 	muli	zero,at,350
 80052d8:	2404b03a 	or	r2,r4,r16
 80052dc:	1000661e 	bne	r2,zero,8005478 <__divdf3+0x2d4>
 80052e0:	04c00204 	movi	r19,8
 80052e4:	0021883a 	mov	r16,zero
 80052e8:	0025883a 	mov	r18,zero
 80052ec:	02400084 	movi	r9,2
 80052f0:	003fca06 	br	800521c <__alt_data_end+0xfc00521c>
 80052f4:	8023883a 	mov	r17,r16
 80052f8:	9011883a 	mov	r8,r18
 80052fc:	e02f883a 	mov	r23,fp
 8005300:	480f883a 	mov	r7,r9
 8005304:	00800084 	movi	r2,2
 8005308:	3881311e 	bne	r7,r2,80057d0 <__divdf3+0x62c>
 800530c:	b827883a 	mov	r19,r23
 8005310:	98c0004c 	andi	r3,r19,1
 8005314:	0081ffc4 	movi	r2,2047
 8005318:	000b883a 	mov	r5,zero
 800531c:	0025883a 	mov	r18,zero
 8005320:	1004953a 	slli	r2,r2,20
 8005324:	18c03fcc 	andi	r3,r3,255
 8005328:	04400434 	movhi	r17,16
 800532c:	8c7fffc4 	addi	r17,r17,-1
 8005330:	180697fa 	slli	r3,r3,31
 8005334:	2c4a703a 	and	r5,r5,r17
 8005338:	288ab03a 	or	r5,r5,r2
 800533c:	28c6b03a 	or	r3,r5,r3
 8005340:	9005883a 	mov	r2,r18
 8005344:	dfc00d17 	ldw	ra,52(sp)
 8005348:	df000c17 	ldw	fp,48(sp)
 800534c:	ddc00b17 	ldw	r23,44(sp)
 8005350:	dd800a17 	ldw	r22,40(sp)
 8005354:	dd400917 	ldw	r21,36(sp)
 8005358:	dd000817 	ldw	r20,32(sp)
 800535c:	dcc00717 	ldw	r19,28(sp)
 8005360:	dc800617 	ldw	r18,24(sp)
 8005364:	dc400517 	ldw	r17,20(sp)
 8005368:	dc000417 	ldw	r16,16(sp)
 800536c:	dec00e04 	addi	sp,sp,56
 8005370:	f800283a 	ret
 8005374:	2404b03a 	or	r2,r4,r16
 8005378:	2027883a 	mov	r19,r4
 800537c:	10003926 	beq	r2,zero,8005464 <__divdf3+0x2c0>
 8005380:	80012e26 	beq	r16,zero,800583c <__divdf3+0x698>
 8005384:	8009883a 	mov	r4,r16
 8005388:	d9800315 	stw	r6,12(sp)
 800538c:	d9c00215 	stw	r7,8(sp)
 8005390:	800710c0 	call	800710c <__clzsi2>
 8005394:	d9800317 	ldw	r6,12(sp)
 8005398:	d9c00217 	ldw	r7,8(sp)
 800539c:	113ffd44 	addi	r4,r2,-11
 80053a0:	00c00704 	movi	r3,28
 80053a4:	19012116 	blt	r3,r4,800582c <__divdf3+0x688>
 80053a8:	00c00744 	movi	r3,29
 80053ac:	147ffe04 	addi	r17,r2,-8
 80053b0:	1907c83a 	sub	r3,r3,r4
 80053b4:	8460983a 	sll	r16,r16,r17
 80053b8:	98c6d83a 	srl	r3,r19,r3
 80053bc:	9c64983a 	sll	r18,r19,r17
 80053c0:	1c20b03a 	or	r16,r3,r16
 80053c4:	1080fcc4 	addi	r2,r2,1011
 80053c8:	00abc83a 	sub	r21,zero,r2
 80053cc:	0027883a 	mov	r19,zero
 80053d0:	0013883a 	mov	r9,zero
 80053d4:	003f9106 	br	800521c <__alt_data_end+0xfc00521c>
 80053d8:	3446b03a 	or	r3,r6,r17
 80053dc:	18001f1e 	bne	r3,zero,800545c <__divdf3+0x2b8>
 80053e0:	0023883a 	mov	r17,zero
 80053e4:	0011883a 	mov	r8,zero
 80053e8:	01c00084 	movi	r7,2
 80053ec:	003f9d06 	br	8005264 <__alt_data_end+0xfc005264>
 80053f0:	3446b03a 	or	r3,r6,r17
 80053f4:	18001526 	beq	r3,zero,800544c <__divdf3+0x2a8>
 80053f8:	88011b26 	beq	r17,zero,8005868 <__divdf3+0x6c4>
 80053fc:	8809883a 	mov	r4,r17
 8005400:	d9800315 	stw	r6,12(sp)
 8005404:	da400115 	stw	r9,4(sp)
 8005408:	800710c0 	call	800710c <__clzsi2>
 800540c:	d9800317 	ldw	r6,12(sp)
 8005410:	da400117 	ldw	r9,4(sp)
 8005414:	113ffd44 	addi	r4,r2,-11
 8005418:	00c00704 	movi	r3,28
 800541c:	19010e16 	blt	r3,r4,8005858 <__divdf3+0x6b4>
 8005420:	00c00744 	movi	r3,29
 8005424:	123ffe04 	addi	r8,r2,-8
 8005428:	1907c83a 	sub	r3,r3,r4
 800542c:	8a22983a 	sll	r17,r17,r8
 8005430:	30c6d83a 	srl	r3,r6,r3
 8005434:	3210983a 	sll	r8,r6,r8
 8005438:	1c62b03a 	or	r17,r3,r17
 800543c:	1080fcc4 	addi	r2,r2,1011
 8005440:	0085c83a 	sub	r2,zero,r2
 8005444:	000f883a 	mov	r7,zero
 8005448:	003f8606 	br	8005264 <__alt_data_end+0xfc005264>
 800544c:	0023883a 	mov	r17,zero
 8005450:	0011883a 	mov	r8,zero
 8005454:	01c00044 	movi	r7,1
 8005458:	003f8206 	br	8005264 <__alt_data_end+0xfc005264>
 800545c:	01c000c4 	movi	r7,3
 8005460:	003f8006 	br	8005264 <__alt_data_end+0xfc005264>
 8005464:	04c00104 	movi	r19,4
 8005468:	0021883a 	mov	r16,zero
 800546c:	0025883a 	mov	r18,zero
 8005470:	02400044 	movi	r9,1
 8005474:	003f6906 	br	800521c <__alt_data_end+0xfc00521c>
 8005478:	04c00304 	movi	r19,12
 800547c:	024000c4 	movi	r9,3
 8005480:	003f6606 	br	800521c <__alt_data_end+0xfc00521c>
 8005484:	01400434 	movhi	r5,16
 8005488:	0007883a 	mov	r3,zero
 800548c:	297fffc4 	addi	r5,r5,-1
 8005490:	04bfffc4 	movi	r18,-1
 8005494:	0081ffc4 	movi	r2,2047
 8005498:	003fa106 	br	8005320 <__alt_data_end+0xfc005320>
 800549c:	00c00044 	movi	r3,1
 80054a0:	1887c83a 	sub	r3,r3,r2
 80054a4:	01000e04 	movi	r4,56
 80054a8:	20c1210e 	bge	r4,r3,8005930 <__divdf3+0x78c>
 80054ac:	98c0004c 	andi	r3,r19,1
 80054b0:	0005883a 	mov	r2,zero
 80054b4:	000b883a 	mov	r5,zero
 80054b8:	0025883a 	mov	r18,zero
 80054bc:	003f9806 	br	8005320 <__alt_data_end+0xfc005320>
 80054c0:	8c00fd36 	bltu	r17,r16,80058b8 <__divdf3+0x714>
 80054c4:	8440fb26 	beq	r16,r17,80058b4 <__divdf3+0x710>
 80054c8:	8007883a 	mov	r3,r16
 80054cc:	ad7fffc4 	addi	r21,r21,-1
 80054d0:	0021883a 	mov	r16,zero
 80054d4:	4004d63a 	srli	r2,r8,24
 80054d8:	8822923a 	slli	r17,r17,8
 80054dc:	1809883a 	mov	r4,r3
 80054e0:	402c923a 	slli	r22,r8,8
 80054e4:	88b8b03a 	or	fp,r17,r2
 80054e8:	e028d43a 	srli	r20,fp,16
 80054ec:	d8c00015 	stw	r3,0(sp)
 80054f0:	e5ffffcc 	andi	r23,fp,65535
 80054f4:	a00b883a 	mov	r5,r20
 80054f8:	800333c0 	call	800333c <__udivsi3>
 80054fc:	d8c00017 	ldw	r3,0(sp)
 8005500:	a00b883a 	mov	r5,r20
 8005504:	d8800315 	stw	r2,12(sp)
 8005508:	1809883a 	mov	r4,r3
 800550c:	80033a00 	call	80033a0 <__umodsi3>
 8005510:	d9800317 	ldw	r6,12(sp)
 8005514:	1006943a 	slli	r3,r2,16
 8005518:	9004d43a 	srli	r2,r18,16
 800551c:	b9a3383a 	mul	r17,r23,r6
 8005520:	10c4b03a 	or	r2,r2,r3
 8005524:	1440062e 	bgeu	r2,r17,8005540 <__divdf3+0x39c>
 8005528:	1705883a 	add	r2,r2,fp
 800552c:	30ffffc4 	addi	r3,r6,-1
 8005530:	1700ee36 	bltu	r2,fp,80058ec <__divdf3+0x748>
 8005534:	1440ed2e 	bgeu	r2,r17,80058ec <__divdf3+0x748>
 8005538:	31bfff84 	addi	r6,r6,-2
 800553c:	1705883a 	add	r2,r2,fp
 8005540:	1463c83a 	sub	r17,r2,r17
 8005544:	a00b883a 	mov	r5,r20
 8005548:	8809883a 	mov	r4,r17
 800554c:	d9800315 	stw	r6,12(sp)
 8005550:	800333c0 	call	800333c <__udivsi3>
 8005554:	a00b883a 	mov	r5,r20
 8005558:	8809883a 	mov	r4,r17
 800555c:	d8800215 	stw	r2,8(sp)
 8005560:	80033a00 	call	80033a0 <__umodsi3>
 8005564:	d9c00217 	ldw	r7,8(sp)
 8005568:	1004943a 	slli	r2,r2,16
 800556c:	94bfffcc 	andi	r18,r18,65535
 8005570:	b9d1383a 	mul	r8,r23,r7
 8005574:	90a4b03a 	or	r18,r18,r2
 8005578:	d9800317 	ldw	r6,12(sp)
 800557c:	9200062e 	bgeu	r18,r8,8005598 <__divdf3+0x3f4>
 8005580:	9725883a 	add	r18,r18,fp
 8005584:	38bfffc4 	addi	r2,r7,-1
 8005588:	9700d636 	bltu	r18,fp,80058e4 <__divdf3+0x740>
 800558c:	9200d52e 	bgeu	r18,r8,80058e4 <__divdf3+0x740>
 8005590:	39ffff84 	addi	r7,r7,-2
 8005594:	9725883a 	add	r18,r18,fp
 8005598:	3004943a 	slli	r2,r6,16
 800559c:	b012d43a 	srli	r9,r22,16
 80055a0:	b1bfffcc 	andi	r6,r22,65535
 80055a4:	11e2b03a 	or	r17,r2,r7
 80055a8:	8806d43a 	srli	r3,r17,16
 80055ac:	893fffcc 	andi	r4,r17,65535
 80055b0:	218b383a 	mul	r5,r4,r6
 80055b4:	30c5383a 	mul	r2,r6,r3
 80055b8:	2249383a 	mul	r4,r4,r9
 80055bc:	280ed43a 	srli	r7,r5,16
 80055c0:	9225c83a 	sub	r18,r18,r8
 80055c4:	2089883a 	add	r4,r4,r2
 80055c8:	3909883a 	add	r4,r7,r4
 80055cc:	1a47383a 	mul	r3,r3,r9
 80055d0:	2080022e 	bgeu	r4,r2,80055dc <__divdf3+0x438>
 80055d4:	00800074 	movhi	r2,1
 80055d8:	1887883a 	add	r3,r3,r2
 80055dc:	2004d43a 	srli	r2,r4,16
 80055e0:	2008943a 	slli	r4,r4,16
 80055e4:	297fffcc 	andi	r5,r5,65535
 80055e8:	10c7883a 	add	r3,r2,r3
 80055ec:	2149883a 	add	r4,r4,r5
 80055f0:	90c0a536 	bltu	r18,r3,8005888 <__divdf3+0x6e4>
 80055f4:	90c0bf26 	beq	r18,r3,80058f4 <__divdf3+0x750>
 80055f8:	90c7c83a 	sub	r3,r18,r3
 80055fc:	810fc83a 	sub	r7,r16,r4
 8005600:	81e5803a 	cmpltu	r18,r16,r7
 8005604:	1ca5c83a 	sub	r18,r3,r18
 8005608:	e480c126 	beq	fp,r18,8005910 <__divdf3+0x76c>
 800560c:	a00b883a 	mov	r5,r20
 8005610:	9009883a 	mov	r4,r18
 8005614:	d9800315 	stw	r6,12(sp)
 8005618:	d9c00215 	stw	r7,8(sp)
 800561c:	da400115 	stw	r9,4(sp)
 8005620:	800333c0 	call	800333c <__udivsi3>
 8005624:	a00b883a 	mov	r5,r20
 8005628:	9009883a 	mov	r4,r18
 800562c:	d8800015 	stw	r2,0(sp)
 8005630:	80033a00 	call	80033a0 <__umodsi3>
 8005634:	d9c00217 	ldw	r7,8(sp)
 8005638:	da000017 	ldw	r8,0(sp)
 800563c:	1006943a 	slli	r3,r2,16
 8005640:	3804d43a 	srli	r2,r7,16
 8005644:	ba21383a 	mul	r16,r23,r8
 8005648:	d9800317 	ldw	r6,12(sp)
 800564c:	10c4b03a 	or	r2,r2,r3
 8005650:	da400117 	ldw	r9,4(sp)
 8005654:	1400062e 	bgeu	r2,r16,8005670 <__divdf3+0x4cc>
 8005658:	1705883a 	add	r2,r2,fp
 800565c:	40ffffc4 	addi	r3,r8,-1
 8005660:	1700ad36 	bltu	r2,fp,8005918 <__divdf3+0x774>
 8005664:	1400ac2e 	bgeu	r2,r16,8005918 <__divdf3+0x774>
 8005668:	423fff84 	addi	r8,r8,-2
 800566c:	1705883a 	add	r2,r2,fp
 8005670:	1421c83a 	sub	r16,r2,r16
 8005674:	a00b883a 	mov	r5,r20
 8005678:	8009883a 	mov	r4,r16
 800567c:	d9800315 	stw	r6,12(sp)
 8005680:	d9c00215 	stw	r7,8(sp)
 8005684:	da000015 	stw	r8,0(sp)
 8005688:	da400115 	stw	r9,4(sp)
 800568c:	800333c0 	call	800333c <__udivsi3>
 8005690:	8009883a 	mov	r4,r16
 8005694:	a00b883a 	mov	r5,r20
 8005698:	1025883a 	mov	r18,r2
 800569c:	80033a00 	call	80033a0 <__umodsi3>
 80056a0:	d9c00217 	ldw	r7,8(sp)
 80056a4:	1004943a 	slli	r2,r2,16
 80056a8:	bcaf383a 	mul	r23,r23,r18
 80056ac:	393fffcc 	andi	r4,r7,65535
 80056b0:	2088b03a 	or	r4,r4,r2
 80056b4:	d9800317 	ldw	r6,12(sp)
 80056b8:	da000017 	ldw	r8,0(sp)
 80056bc:	da400117 	ldw	r9,4(sp)
 80056c0:	25c0062e 	bgeu	r4,r23,80056dc <__divdf3+0x538>
 80056c4:	2709883a 	add	r4,r4,fp
 80056c8:	90bfffc4 	addi	r2,r18,-1
 80056cc:	27009436 	bltu	r4,fp,8005920 <__divdf3+0x77c>
 80056d0:	25c0932e 	bgeu	r4,r23,8005920 <__divdf3+0x77c>
 80056d4:	94bfff84 	addi	r18,r18,-2
 80056d8:	2709883a 	add	r4,r4,fp
 80056dc:	4004943a 	slli	r2,r8,16
 80056e0:	25efc83a 	sub	r23,r4,r23
 80056e4:	1490b03a 	or	r8,r2,r18
 80056e8:	4008d43a 	srli	r4,r8,16
 80056ec:	40ffffcc 	andi	r3,r8,65535
 80056f0:	30c5383a 	mul	r2,r6,r3
 80056f4:	1a47383a 	mul	r3,r3,r9
 80056f8:	310d383a 	mul	r6,r6,r4
 80056fc:	100ad43a 	srli	r5,r2,16
 8005700:	4913383a 	mul	r9,r9,r4
 8005704:	1987883a 	add	r3,r3,r6
 8005708:	28c7883a 	add	r3,r5,r3
 800570c:	1980022e 	bgeu	r3,r6,8005718 <__divdf3+0x574>
 8005710:	01000074 	movhi	r4,1
 8005714:	4913883a 	add	r9,r9,r4
 8005718:	1808d43a 	srli	r4,r3,16
 800571c:	1806943a 	slli	r3,r3,16
 8005720:	10bfffcc 	andi	r2,r2,65535
 8005724:	2253883a 	add	r9,r4,r9
 8005728:	1887883a 	add	r3,r3,r2
 800572c:	ba403836 	bltu	r23,r9,8005810 <__divdf3+0x66c>
 8005730:	ba403626 	beq	r23,r9,800580c <__divdf3+0x668>
 8005734:	42000054 	ori	r8,r8,1
 8005738:	a880ffc4 	addi	r2,r21,1023
 800573c:	00bf570e 	bge	zero,r2,800549c <__alt_data_end+0xfc00549c>
 8005740:	40c001cc 	andi	r3,r8,7
 8005744:	18000726 	beq	r3,zero,8005764 <__divdf3+0x5c0>
 8005748:	40c003cc 	andi	r3,r8,15
 800574c:	01000104 	movi	r4,4
 8005750:	19000426 	beq	r3,r4,8005764 <__divdf3+0x5c0>
 8005754:	4107883a 	add	r3,r8,r4
 8005758:	1a11803a 	cmpltu	r8,r3,r8
 800575c:	8a23883a 	add	r17,r17,r8
 8005760:	1811883a 	mov	r8,r3
 8005764:	88c0402c 	andhi	r3,r17,256
 8005768:	18000426 	beq	r3,zero,800577c <__divdf3+0x5d8>
 800576c:	00ffc034 	movhi	r3,65280
 8005770:	18ffffc4 	addi	r3,r3,-1
 8005774:	a8810004 	addi	r2,r21,1024
 8005778:	88e2703a 	and	r17,r17,r3
 800577c:	00c1ff84 	movi	r3,2046
 8005780:	18bee316 	blt	r3,r2,8005310 <__alt_data_end+0xfc005310>
 8005784:	8824977a 	slli	r18,r17,29
 8005788:	4010d0fa 	srli	r8,r8,3
 800578c:	8822927a 	slli	r17,r17,9
 8005790:	1081ffcc 	andi	r2,r2,2047
 8005794:	9224b03a 	or	r18,r18,r8
 8005798:	880ad33a 	srli	r5,r17,12
 800579c:	98c0004c 	andi	r3,r19,1
 80057a0:	003edf06 	br	8005320 <__alt_data_end+0xfc005320>
 80057a4:	8080022c 	andhi	r2,r16,8
 80057a8:	10001226 	beq	r2,zero,80057f4 <__divdf3+0x650>
 80057ac:	8880022c 	andhi	r2,r17,8
 80057b0:	1000101e 	bne	r2,zero,80057f4 <__divdf3+0x650>
 80057b4:	00800434 	movhi	r2,16
 80057b8:	89400234 	orhi	r5,r17,8
 80057bc:	10bfffc4 	addi	r2,r2,-1
 80057c0:	b007883a 	mov	r3,r22
 80057c4:	288a703a 	and	r5,r5,r2
 80057c8:	4025883a 	mov	r18,r8
 80057cc:	003f3106 	br	8005494 <__alt_data_end+0xfc005494>
 80057d0:	008000c4 	movi	r2,3
 80057d4:	3880a626 	beq	r7,r2,8005a70 <__divdf3+0x8cc>
 80057d8:	00800044 	movi	r2,1
 80057dc:	3880521e 	bne	r7,r2,8005928 <__divdf3+0x784>
 80057e0:	b807883a 	mov	r3,r23
 80057e4:	0005883a 	mov	r2,zero
 80057e8:	000b883a 	mov	r5,zero
 80057ec:	0025883a 	mov	r18,zero
 80057f0:	003ecb06 	br	8005320 <__alt_data_end+0xfc005320>
 80057f4:	00800434 	movhi	r2,16
 80057f8:	81400234 	orhi	r5,r16,8
 80057fc:	10bfffc4 	addi	r2,r2,-1
 8005800:	a007883a 	mov	r3,r20
 8005804:	288a703a 	and	r5,r5,r2
 8005808:	003f2206 	br	8005494 <__alt_data_end+0xfc005494>
 800580c:	183fca26 	beq	r3,zero,8005738 <__alt_data_end+0xfc005738>
 8005810:	e5ef883a 	add	r23,fp,r23
 8005814:	40bfffc4 	addi	r2,r8,-1
 8005818:	bf00392e 	bgeu	r23,fp,8005900 <__divdf3+0x75c>
 800581c:	1011883a 	mov	r8,r2
 8005820:	ba7fc41e 	bne	r23,r9,8005734 <__alt_data_end+0xfc005734>
 8005824:	b0ffc31e 	bne	r22,r3,8005734 <__alt_data_end+0xfc005734>
 8005828:	003fc306 	br	8005738 <__alt_data_end+0xfc005738>
 800582c:	143ff604 	addi	r16,r2,-40
 8005830:	9c20983a 	sll	r16,r19,r16
 8005834:	0025883a 	mov	r18,zero
 8005838:	003ee206 	br	80053c4 <__alt_data_end+0xfc0053c4>
 800583c:	d9800315 	stw	r6,12(sp)
 8005840:	d9c00215 	stw	r7,8(sp)
 8005844:	800710c0 	call	800710c <__clzsi2>
 8005848:	10800804 	addi	r2,r2,32
 800584c:	d9c00217 	ldw	r7,8(sp)
 8005850:	d9800317 	ldw	r6,12(sp)
 8005854:	003ed106 	br	800539c <__alt_data_end+0xfc00539c>
 8005858:	147ff604 	addi	r17,r2,-40
 800585c:	3462983a 	sll	r17,r6,r17
 8005860:	0011883a 	mov	r8,zero
 8005864:	003ef506 	br	800543c <__alt_data_end+0xfc00543c>
 8005868:	3009883a 	mov	r4,r6
 800586c:	d9800315 	stw	r6,12(sp)
 8005870:	da400115 	stw	r9,4(sp)
 8005874:	800710c0 	call	800710c <__clzsi2>
 8005878:	10800804 	addi	r2,r2,32
 800587c:	da400117 	ldw	r9,4(sp)
 8005880:	d9800317 	ldw	r6,12(sp)
 8005884:	003ee306 	br	8005414 <__alt_data_end+0xfc005414>
 8005888:	85a1883a 	add	r16,r16,r22
 800588c:	8585803a 	cmpltu	r2,r16,r22
 8005890:	1705883a 	add	r2,r2,fp
 8005894:	14a5883a 	add	r18,r2,r18
 8005898:	88bfffc4 	addi	r2,r17,-1
 800589c:	e4800c2e 	bgeu	fp,r18,80058d0 <__divdf3+0x72c>
 80058a0:	90c03e36 	bltu	r18,r3,800599c <__divdf3+0x7f8>
 80058a4:	1c806926 	beq	r3,r18,8005a4c <__divdf3+0x8a8>
 80058a8:	90c7c83a 	sub	r3,r18,r3
 80058ac:	1023883a 	mov	r17,r2
 80058b0:	003f5206 	br	80055fc <__alt_data_end+0xfc0055fc>
 80058b4:	923f0436 	bltu	r18,r8,80054c8 <__alt_data_end+0xfc0054c8>
 80058b8:	800897fa 	slli	r4,r16,31
 80058bc:	9004d07a 	srli	r2,r18,1
 80058c0:	8006d07a 	srli	r3,r16,1
 80058c4:	902097fa 	slli	r16,r18,31
 80058c8:	20a4b03a 	or	r18,r4,r2
 80058cc:	003f0106 	br	80054d4 <__alt_data_end+0xfc0054d4>
 80058d0:	e4bff51e 	bne	fp,r18,80058a8 <__alt_data_end+0xfc0058a8>
 80058d4:	85bff22e 	bgeu	r16,r22,80058a0 <__alt_data_end+0xfc0058a0>
 80058d8:	e0c7c83a 	sub	r3,fp,r3
 80058dc:	1023883a 	mov	r17,r2
 80058e0:	003f4606 	br	80055fc <__alt_data_end+0xfc0055fc>
 80058e4:	100f883a 	mov	r7,r2
 80058e8:	003f2b06 	br	8005598 <__alt_data_end+0xfc005598>
 80058ec:	180d883a 	mov	r6,r3
 80058f0:	003f1306 	br	8005540 <__alt_data_end+0xfc005540>
 80058f4:	813fe436 	bltu	r16,r4,8005888 <__alt_data_end+0xfc005888>
 80058f8:	0007883a 	mov	r3,zero
 80058fc:	003f3f06 	br	80055fc <__alt_data_end+0xfc0055fc>
 8005900:	ba402c36 	bltu	r23,r9,80059b4 <__divdf3+0x810>
 8005904:	4dc05426 	beq	r9,r23,8005a58 <__divdf3+0x8b4>
 8005908:	1011883a 	mov	r8,r2
 800590c:	003f8906 	br	8005734 <__alt_data_end+0xfc005734>
 8005910:	023fffc4 	movi	r8,-1
 8005914:	003f8806 	br	8005738 <__alt_data_end+0xfc005738>
 8005918:	1811883a 	mov	r8,r3
 800591c:	003f5406 	br	8005670 <__alt_data_end+0xfc005670>
 8005920:	1025883a 	mov	r18,r2
 8005924:	003f6d06 	br	80056dc <__alt_data_end+0xfc0056dc>
 8005928:	b827883a 	mov	r19,r23
 800592c:	003f8206 	br	8005738 <__alt_data_end+0xfc005738>
 8005930:	010007c4 	movi	r4,31
 8005934:	20c02616 	blt	r4,r3,80059d0 <__divdf3+0x82c>
 8005938:	00800804 	movi	r2,32
 800593c:	10c5c83a 	sub	r2,r2,r3
 8005940:	888a983a 	sll	r5,r17,r2
 8005944:	40c8d83a 	srl	r4,r8,r3
 8005948:	4084983a 	sll	r2,r8,r2
 800594c:	88e2d83a 	srl	r17,r17,r3
 8005950:	2906b03a 	or	r3,r5,r4
 8005954:	1004c03a 	cmpne	r2,r2,zero
 8005958:	1886b03a 	or	r3,r3,r2
 800595c:	188001cc 	andi	r2,r3,7
 8005960:	10000726 	beq	r2,zero,8005980 <__divdf3+0x7dc>
 8005964:	188003cc 	andi	r2,r3,15
 8005968:	01000104 	movi	r4,4
 800596c:	11000426 	beq	r2,r4,8005980 <__divdf3+0x7dc>
 8005970:	1805883a 	mov	r2,r3
 8005974:	10c00104 	addi	r3,r2,4
 8005978:	1885803a 	cmpltu	r2,r3,r2
 800597c:	88a3883a 	add	r17,r17,r2
 8005980:	8880202c 	andhi	r2,r17,128
 8005984:	10002726 	beq	r2,zero,8005a24 <__divdf3+0x880>
 8005988:	98c0004c 	andi	r3,r19,1
 800598c:	00800044 	movi	r2,1
 8005990:	000b883a 	mov	r5,zero
 8005994:	0025883a 	mov	r18,zero
 8005998:	003e6106 	br	8005320 <__alt_data_end+0xfc005320>
 800599c:	85a1883a 	add	r16,r16,r22
 80059a0:	8585803a 	cmpltu	r2,r16,r22
 80059a4:	1705883a 	add	r2,r2,fp
 80059a8:	14a5883a 	add	r18,r2,r18
 80059ac:	8c7fff84 	addi	r17,r17,-2
 80059b0:	003f1106 	br	80055f8 <__alt_data_end+0xfc0055f8>
 80059b4:	b589883a 	add	r4,r22,r22
 80059b8:	25ad803a 	cmpltu	r22,r4,r22
 80059bc:	b739883a 	add	fp,r22,fp
 80059c0:	40bfff84 	addi	r2,r8,-2
 80059c4:	bf2f883a 	add	r23,r23,fp
 80059c8:	202d883a 	mov	r22,r4
 80059cc:	003f9306 	br	800581c <__alt_data_end+0xfc00581c>
 80059d0:	013ff844 	movi	r4,-31
 80059d4:	2085c83a 	sub	r2,r4,r2
 80059d8:	8888d83a 	srl	r4,r17,r2
 80059dc:	00800804 	movi	r2,32
 80059e0:	18802126 	beq	r3,r2,8005a68 <__divdf3+0x8c4>
 80059e4:	00801004 	movi	r2,64
 80059e8:	10c5c83a 	sub	r2,r2,r3
 80059ec:	8884983a 	sll	r2,r17,r2
 80059f0:	1204b03a 	or	r2,r2,r8
 80059f4:	1004c03a 	cmpne	r2,r2,zero
 80059f8:	2084b03a 	or	r2,r4,r2
 80059fc:	144001cc 	andi	r17,r2,7
 8005a00:	88000d1e 	bne	r17,zero,8005a38 <__divdf3+0x894>
 8005a04:	000b883a 	mov	r5,zero
 8005a08:	1024d0fa 	srli	r18,r2,3
 8005a0c:	98c0004c 	andi	r3,r19,1
 8005a10:	0005883a 	mov	r2,zero
 8005a14:	9464b03a 	or	r18,r18,r17
 8005a18:	003e4106 	br	8005320 <__alt_data_end+0xfc005320>
 8005a1c:	1007883a 	mov	r3,r2
 8005a20:	0023883a 	mov	r17,zero
 8005a24:	880a927a 	slli	r5,r17,9
 8005a28:	1805883a 	mov	r2,r3
 8005a2c:	8822977a 	slli	r17,r17,29
 8005a30:	280ad33a 	srli	r5,r5,12
 8005a34:	003ff406 	br	8005a08 <__alt_data_end+0xfc005a08>
 8005a38:	10c003cc 	andi	r3,r2,15
 8005a3c:	01000104 	movi	r4,4
 8005a40:	193ff626 	beq	r3,r4,8005a1c <__alt_data_end+0xfc005a1c>
 8005a44:	0023883a 	mov	r17,zero
 8005a48:	003fca06 	br	8005974 <__alt_data_end+0xfc005974>
 8005a4c:	813fd336 	bltu	r16,r4,800599c <__alt_data_end+0xfc00599c>
 8005a50:	1023883a 	mov	r17,r2
 8005a54:	003fa806 	br	80058f8 <__alt_data_end+0xfc0058f8>
 8005a58:	b0ffd636 	bltu	r22,r3,80059b4 <__alt_data_end+0xfc0059b4>
 8005a5c:	1011883a 	mov	r8,r2
 8005a60:	b0ff341e 	bne	r22,r3,8005734 <__alt_data_end+0xfc005734>
 8005a64:	003f3406 	br	8005738 <__alt_data_end+0xfc005738>
 8005a68:	0005883a 	mov	r2,zero
 8005a6c:	003fe006 	br	80059f0 <__alt_data_end+0xfc0059f0>
 8005a70:	00800434 	movhi	r2,16
 8005a74:	89400234 	orhi	r5,r17,8
 8005a78:	10bfffc4 	addi	r2,r2,-1
 8005a7c:	b807883a 	mov	r3,r23
 8005a80:	288a703a 	and	r5,r5,r2
 8005a84:	4025883a 	mov	r18,r8
 8005a88:	003e8206 	br	8005494 <__alt_data_end+0xfc005494>

08005a8c <__eqdf2>:
 8005a8c:	2804d53a 	srli	r2,r5,20
 8005a90:	3806d53a 	srli	r3,r7,20
 8005a94:	02000434 	movhi	r8,16
 8005a98:	423fffc4 	addi	r8,r8,-1
 8005a9c:	1081ffcc 	andi	r2,r2,2047
 8005aa0:	0281ffc4 	movi	r10,2047
 8005aa4:	2a12703a 	and	r9,r5,r8
 8005aa8:	18c1ffcc 	andi	r3,r3,2047
 8005aac:	3a10703a 	and	r8,r7,r8
 8005ab0:	280ad7fa 	srli	r5,r5,31
 8005ab4:	380ed7fa 	srli	r7,r7,31
 8005ab8:	12801026 	beq	r2,r10,8005afc <__eqdf2+0x70>
 8005abc:	0281ffc4 	movi	r10,2047
 8005ac0:	1a800a26 	beq	r3,r10,8005aec <__eqdf2+0x60>
 8005ac4:	10c00226 	beq	r2,r3,8005ad0 <__eqdf2+0x44>
 8005ac8:	00800044 	movi	r2,1
 8005acc:	f800283a 	ret
 8005ad0:	4a3ffd1e 	bne	r9,r8,8005ac8 <__alt_data_end+0xfc005ac8>
 8005ad4:	21bffc1e 	bne	r4,r6,8005ac8 <__alt_data_end+0xfc005ac8>
 8005ad8:	29c00c26 	beq	r5,r7,8005b0c <__eqdf2+0x80>
 8005adc:	103ffa1e 	bne	r2,zero,8005ac8 <__alt_data_end+0xfc005ac8>
 8005ae0:	2244b03a 	or	r2,r4,r9
 8005ae4:	1004c03a 	cmpne	r2,r2,zero
 8005ae8:	f800283a 	ret
 8005aec:	3214b03a 	or	r10,r6,r8
 8005af0:	503ff426 	beq	r10,zero,8005ac4 <__alt_data_end+0xfc005ac4>
 8005af4:	00800044 	movi	r2,1
 8005af8:	f800283a 	ret
 8005afc:	2254b03a 	or	r10,r4,r9
 8005b00:	503fee26 	beq	r10,zero,8005abc <__alt_data_end+0xfc005abc>
 8005b04:	00800044 	movi	r2,1
 8005b08:	f800283a 	ret
 8005b0c:	0005883a 	mov	r2,zero
 8005b10:	f800283a 	ret

08005b14 <__gedf2>:
 8005b14:	2804d53a 	srli	r2,r5,20
 8005b18:	3806d53a 	srli	r3,r7,20
 8005b1c:	02000434 	movhi	r8,16
 8005b20:	423fffc4 	addi	r8,r8,-1
 8005b24:	1081ffcc 	andi	r2,r2,2047
 8005b28:	0241ffc4 	movi	r9,2047
 8005b2c:	2a14703a 	and	r10,r5,r8
 8005b30:	18c1ffcc 	andi	r3,r3,2047
 8005b34:	3a10703a 	and	r8,r7,r8
 8005b38:	280ad7fa 	srli	r5,r5,31
 8005b3c:	380ed7fa 	srli	r7,r7,31
 8005b40:	12401d26 	beq	r2,r9,8005bb8 <__gedf2+0xa4>
 8005b44:	0241ffc4 	movi	r9,2047
 8005b48:	1a401226 	beq	r3,r9,8005b94 <__gedf2+0x80>
 8005b4c:	1000081e 	bne	r2,zero,8005b70 <__gedf2+0x5c>
 8005b50:	2296b03a 	or	r11,r4,r10
 8005b54:	5813003a 	cmpeq	r9,r11,zero
 8005b58:	1800091e 	bne	r3,zero,8005b80 <__gedf2+0x6c>
 8005b5c:	3218b03a 	or	r12,r6,r8
 8005b60:	6000071e 	bne	r12,zero,8005b80 <__gedf2+0x6c>
 8005b64:	0005883a 	mov	r2,zero
 8005b68:	5800101e 	bne	r11,zero,8005bac <__gedf2+0x98>
 8005b6c:	f800283a 	ret
 8005b70:	18000c1e 	bne	r3,zero,8005ba4 <__gedf2+0x90>
 8005b74:	3212b03a 	or	r9,r6,r8
 8005b78:	48000c26 	beq	r9,zero,8005bac <__gedf2+0x98>
 8005b7c:	0013883a 	mov	r9,zero
 8005b80:	39c03fcc 	andi	r7,r7,255
 8005b84:	48000826 	beq	r9,zero,8005ba8 <__gedf2+0x94>
 8005b88:	38000926 	beq	r7,zero,8005bb0 <__gedf2+0x9c>
 8005b8c:	00800044 	movi	r2,1
 8005b90:	f800283a 	ret
 8005b94:	3212b03a 	or	r9,r6,r8
 8005b98:	483fec26 	beq	r9,zero,8005b4c <__alt_data_end+0xfc005b4c>
 8005b9c:	00bfff84 	movi	r2,-2
 8005ba0:	f800283a 	ret
 8005ba4:	39c03fcc 	andi	r7,r7,255
 8005ba8:	29c00626 	beq	r5,r7,8005bc4 <__gedf2+0xb0>
 8005bac:	283ff726 	beq	r5,zero,8005b8c <__alt_data_end+0xfc005b8c>
 8005bb0:	00bfffc4 	movi	r2,-1
 8005bb4:	f800283a 	ret
 8005bb8:	2292b03a 	or	r9,r4,r10
 8005bbc:	483fe126 	beq	r9,zero,8005b44 <__alt_data_end+0xfc005b44>
 8005bc0:	003ff606 	br	8005b9c <__alt_data_end+0xfc005b9c>
 8005bc4:	18bff916 	blt	r3,r2,8005bac <__alt_data_end+0xfc005bac>
 8005bc8:	10c00316 	blt	r2,r3,8005bd8 <__gedf2+0xc4>
 8005bcc:	42bff736 	bltu	r8,r10,8005bac <__alt_data_end+0xfc005bac>
 8005bd0:	52000326 	beq	r10,r8,8005be0 <__gedf2+0xcc>
 8005bd4:	5200042e 	bgeu	r10,r8,8005be8 <__gedf2+0xd4>
 8005bd8:	283fec1e 	bne	r5,zero,8005b8c <__alt_data_end+0xfc005b8c>
 8005bdc:	003ff406 	br	8005bb0 <__alt_data_end+0xfc005bb0>
 8005be0:	313ff236 	bltu	r6,r4,8005bac <__alt_data_end+0xfc005bac>
 8005be4:	21bffc36 	bltu	r4,r6,8005bd8 <__alt_data_end+0xfc005bd8>
 8005be8:	0005883a 	mov	r2,zero
 8005bec:	f800283a 	ret

08005bf0 <__ledf2>:
 8005bf0:	2804d53a 	srli	r2,r5,20
 8005bf4:	3810d53a 	srli	r8,r7,20
 8005bf8:	00c00434 	movhi	r3,16
 8005bfc:	18ffffc4 	addi	r3,r3,-1
 8005c00:	1081ffcc 	andi	r2,r2,2047
 8005c04:	0241ffc4 	movi	r9,2047
 8005c08:	28d4703a 	and	r10,r5,r3
 8005c0c:	4201ffcc 	andi	r8,r8,2047
 8005c10:	38c6703a 	and	r3,r7,r3
 8005c14:	280ad7fa 	srli	r5,r5,31
 8005c18:	380ed7fa 	srli	r7,r7,31
 8005c1c:	12401f26 	beq	r2,r9,8005c9c <__ledf2+0xac>
 8005c20:	0241ffc4 	movi	r9,2047
 8005c24:	42401426 	beq	r8,r9,8005c78 <__ledf2+0x88>
 8005c28:	1000091e 	bne	r2,zero,8005c50 <__ledf2+0x60>
 8005c2c:	2296b03a 	or	r11,r4,r10
 8005c30:	5813003a 	cmpeq	r9,r11,zero
 8005c34:	29403fcc 	andi	r5,r5,255
 8005c38:	40000a1e 	bne	r8,zero,8005c64 <__ledf2+0x74>
 8005c3c:	30d8b03a 	or	r12,r6,r3
 8005c40:	6000081e 	bne	r12,zero,8005c64 <__ledf2+0x74>
 8005c44:	0005883a 	mov	r2,zero
 8005c48:	5800111e 	bne	r11,zero,8005c90 <__ledf2+0xa0>
 8005c4c:	f800283a 	ret
 8005c50:	29403fcc 	andi	r5,r5,255
 8005c54:	40000c1e 	bne	r8,zero,8005c88 <__ledf2+0x98>
 8005c58:	30d2b03a 	or	r9,r6,r3
 8005c5c:	48000c26 	beq	r9,zero,8005c90 <__ledf2+0xa0>
 8005c60:	0013883a 	mov	r9,zero
 8005c64:	39c03fcc 	andi	r7,r7,255
 8005c68:	48000826 	beq	r9,zero,8005c8c <__ledf2+0x9c>
 8005c6c:	38001126 	beq	r7,zero,8005cb4 <__ledf2+0xc4>
 8005c70:	00800044 	movi	r2,1
 8005c74:	f800283a 	ret
 8005c78:	30d2b03a 	or	r9,r6,r3
 8005c7c:	483fea26 	beq	r9,zero,8005c28 <__alt_data_end+0xfc005c28>
 8005c80:	00800084 	movi	r2,2
 8005c84:	f800283a 	ret
 8005c88:	39c03fcc 	andi	r7,r7,255
 8005c8c:	39400726 	beq	r7,r5,8005cac <__ledf2+0xbc>
 8005c90:	2800081e 	bne	r5,zero,8005cb4 <__ledf2+0xc4>
 8005c94:	00800044 	movi	r2,1
 8005c98:	f800283a 	ret
 8005c9c:	2292b03a 	or	r9,r4,r10
 8005ca0:	483fdf26 	beq	r9,zero,8005c20 <__alt_data_end+0xfc005c20>
 8005ca4:	00800084 	movi	r2,2
 8005ca8:	f800283a 	ret
 8005cac:	4080030e 	bge	r8,r2,8005cbc <__ledf2+0xcc>
 8005cb0:	383fef26 	beq	r7,zero,8005c70 <__alt_data_end+0xfc005c70>
 8005cb4:	00bfffc4 	movi	r2,-1
 8005cb8:	f800283a 	ret
 8005cbc:	123feb16 	blt	r2,r8,8005c6c <__alt_data_end+0xfc005c6c>
 8005cc0:	1abff336 	bltu	r3,r10,8005c90 <__alt_data_end+0xfc005c90>
 8005cc4:	50c00326 	beq	r10,r3,8005cd4 <__ledf2+0xe4>
 8005cc8:	50c0042e 	bgeu	r10,r3,8005cdc <__ledf2+0xec>
 8005ccc:	283fe81e 	bne	r5,zero,8005c70 <__alt_data_end+0xfc005c70>
 8005cd0:	003ff806 	br	8005cb4 <__alt_data_end+0xfc005cb4>
 8005cd4:	313fee36 	bltu	r6,r4,8005c90 <__alt_data_end+0xfc005c90>
 8005cd8:	21bffc36 	bltu	r4,r6,8005ccc <__alt_data_end+0xfc005ccc>
 8005cdc:	0005883a 	mov	r2,zero
 8005ce0:	f800283a 	ret

08005ce4 <__muldf3>:
 8005ce4:	defff304 	addi	sp,sp,-52
 8005ce8:	2804d53a 	srli	r2,r5,20
 8005cec:	dd800915 	stw	r22,36(sp)
 8005cf0:	282cd7fa 	srli	r22,r5,31
 8005cf4:	dc000315 	stw	r16,12(sp)
 8005cf8:	04000434 	movhi	r16,16
 8005cfc:	dd400815 	stw	r21,32(sp)
 8005d00:	dc800515 	stw	r18,20(sp)
 8005d04:	843fffc4 	addi	r16,r16,-1
 8005d08:	dfc00c15 	stw	ra,48(sp)
 8005d0c:	df000b15 	stw	fp,44(sp)
 8005d10:	ddc00a15 	stw	r23,40(sp)
 8005d14:	dd000715 	stw	r20,28(sp)
 8005d18:	dcc00615 	stw	r19,24(sp)
 8005d1c:	dc400415 	stw	r17,16(sp)
 8005d20:	1481ffcc 	andi	r18,r2,2047
 8005d24:	2c20703a 	and	r16,r5,r16
 8005d28:	b02b883a 	mov	r21,r22
 8005d2c:	b2403fcc 	andi	r9,r22,255
 8005d30:	90006026 	beq	r18,zero,8005eb4 <__muldf3+0x1d0>
 8005d34:	0081ffc4 	movi	r2,2047
 8005d38:	2029883a 	mov	r20,r4
 8005d3c:	90803626 	beq	r18,r2,8005e18 <__muldf3+0x134>
 8005d40:	80800434 	orhi	r2,r16,16
 8005d44:	100490fa 	slli	r2,r2,3
 8005d48:	2020d77a 	srli	r16,r4,29
 8005d4c:	202890fa 	slli	r20,r4,3
 8005d50:	94bf0044 	addi	r18,r18,-1023
 8005d54:	80a0b03a 	or	r16,r16,r2
 8005d58:	0027883a 	mov	r19,zero
 8005d5c:	0039883a 	mov	fp,zero
 8005d60:	3804d53a 	srli	r2,r7,20
 8005d64:	382ed7fa 	srli	r23,r7,31
 8005d68:	04400434 	movhi	r17,16
 8005d6c:	8c7fffc4 	addi	r17,r17,-1
 8005d70:	1081ffcc 	andi	r2,r2,2047
 8005d74:	3011883a 	mov	r8,r6
 8005d78:	3c62703a 	and	r17,r7,r17
 8005d7c:	ba803fcc 	andi	r10,r23,255
 8005d80:	10006d26 	beq	r2,zero,8005f38 <__muldf3+0x254>
 8005d84:	00c1ffc4 	movi	r3,2047
 8005d88:	10c06526 	beq	r2,r3,8005f20 <__muldf3+0x23c>
 8005d8c:	88c00434 	orhi	r3,r17,16
 8005d90:	180690fa 	slli	r3,r3,3
 8005d94:	3022d77a 	srli	r17,r6,29
 8005d98:	301090fa 	slli	r8,r6,3
 8005d9c:	10bf0044 	addi	r2,r2,-1023
 8005da0:	88e2b03a 	or	r17,r17,r3
 8005da4:	000b883a 	mov	r5,zero
 8005da8:	9085883a 	add	r2,r18,r2
 8005dac:	2cc8b03a 	or	r4,r5,r19
 8005db0:	00c003c4 	movi	r3,15
 8005db4:	bdacf03a 	xor	r22,r23,r22
 8005db8:	12c00044 	addi	r11,r2,1
 8005dbc:	19009936 	bltu	r3,r4,8006024 <__muldf3+0x340>
 8005dc0:	200890ba 	slli	r4,r4,2
 8005dc4:	00c20034 	movhi	r3,2048
 8005dc8:	18d77604 	addi	r3,r3,24024
 8005dcc:	20c9883a 	add	r4,r4,r3
 8005dd0:	20c00017 	ldw	r3,0(r4)
 8005dd4:	1800683a 	jmp	r3
 8005dd8:	08006024 	muli	zero,at,384
 8005ddc:	08005e38 	rdprs	zero,at,376
 8005de0:	08005e38 	rdprs	zero,at,376
 8005de4:	08005e34 	orhi	zero,at,376
 8005de8:	08006000 	call	800600 <__ram_exceptions_end+0x7e03b8>
 8005dec:	08006000 	call	800600 <__ram_exceptions_end+0x7e03b8>
 8005df0:	08005fe8 	cmpgeui	zero,at,383
 8005df4:	08005e34 	orhi	zero,at,376
 8005df8:	08006000 	call	800600 <__ram_exceptions_end+0x7e03b8>
 8005dfc:	08005fe8 	cmpgeui	zero,at,383
 8005e00:	08006000 	call	800600 <__ram_exceptions_end+0x7e03b8>
 8005e04:	08005e34 	orhi	zero,at,376
 8005e08:	08006010 	cmplti	zero,at,384
 8005e0c:	08006010 	cmplti	zero,at,384
 8005e10:	08006010 	cmplti	zero,at,384
 8005e14:	0800622c 	andhi	zero,at,392
 8005e18:	2404b03a 	or	r2,r4,r16
 8005e1c:	10006f1e 	bne	r2,zero,8005fdc <__muldf3+0x2f8>
 8005e20:	04c00204 	movi	r19,8
 8005e24:	0021883a 	mov	r16,zero
 8005e28:	0029883a 	mov	r20,zero
 8005e2c:	07000084 	movi	fp,2
 8005e30:	003fcb06 	br	8005d60 <__alt_data_end+0xfc005d60>
 8005e34:	502d883a 	mov	r22,r10
 8005e38:	00800084 	movi	r2,2
 8005e3c:	28805726 	beq	r5,r2,8005f9c <__muldf3+0x2b8>
 8005e40:	008000c4 	movi	r2,3
 8005e44:	28816626 	beq	r5,r2,80063e0 <__muldf3+0x6fc>
 8005e48:	00800044 	movi	r2,1
 8005e4c:	2881411e 	bne	r5,r2,8006354 <__muldf3+0x670>
 8005e50:	b02b883a 	mov	r21,r22
 8005e54:	0005883a 	mov	r2,zero
 8005e58:	000b883a 	mov	r5,zero
 8005e5c:	0029883a 	mov	r20,zero
 8005e60:	1004953a 	slli	r2,r2,20
 8005e64:	a8c03fcc 	andi	r3,r21,255
 8005e68:	04400434 	movhi	r17,16
 8005e6c:	8c7fffc4 	addi	r17,r17,-1
 8005e70:	180697fa 	slli	r3,r3,31
 8005e74:	2c4a703a 	and	r5,r5,r17
 8005e78:	288ab03a 	or	r5,r5,r2
 8005e7c:	28c6b03a 	or	r3,r5,r3
 8005e80:	a005883a 	mov	r2,r20
 8005e84:	dfc00c17 	ldw	ra,48(sp)
 8005e88:	df000b17 	ldw	fp,44(sp)
 8005e8c:	ddc00a17 	ldw	r23,40(sp)
 8005e90:	dd800917 	ldw	r22,36(sp)
 8005e94:	dd400817 	ldw	r21,32(sp)
 8005e98:	dd000717 	ldw	r20,28(sp)
 8005e9c:	dcc00617 	ldw	r19,24(sp)
 8005ea0:	dc800517 	ldw	r18,20(sp)
 8005ea4:	dc400417 	ldw	r17,16(sp)
 8005ea8:	dc000317 	ldw	r16,12(sp)
 8005eac:	dec00d04 	addi	sp,sp,52
 8005eb0:	f800283a 	ret
 8005eb4:	2404b03a 	or	r2,r4,r16
 8005eb8:	2027883a 	mov	r19,r4
 8005ebc:	10004226 	beq	r2,zero,8005fc8 <__muldf3+0x2e4>
 8005ec0:	8000fc26 	beq	r16,zero,80062b4 <__muldf3+0x5d0>
 8005ec4:	8009883a 	mov	r4,r16
 8005ec8:	d9800215 	stw	r6,8(sp)
 8005ecc:	d9c00015 	stw	r7,0(sp)
 8005ed0:	da400115 	stw	r9,4(sp)
 8005ed4:	800710c0 	call	800710c <__clzsi2>
 8005ed8:	d9800217 	ldw	r6,8(sp)
 8005edc:	d9c00017 	ldw	r7,0(sp)
 8005ee0:	da400117 	ldw	r9,4(sp)
 8005ee4:	113ffd44 	addi	r4,r2,-11
 8005ee8:	00c00704 	movi	r3,28
 8005eec:	1900ed16 	blt	r3,r4,80062a4 <__muldf3+0x5c0>
 8005ef0:	00c00744 	movi	r3,29
 8005ef4:	147ffe04 	addi	r17,r2,-8
 8005ef8:	1907c83a 	sub	r3,r3,r4
 8005efc:	8460983a 	sll	r16,r16,r17
 8005f00:	98c6d83a 	srl	r3,r19,r3
 8005f04:	9c68983a 	sll	r20,r19,r17
 8005f08:	1c20b03a 	or	r16,r3,r16
 8005f0c:	1080fcc4 	addi	r2,r2,1011
 8005f10:	00a5c83a 	sub	r18,zero,r2
 8005f14:	0027883a 	mov	r19,zero
 8005f18:	0039883a 	mov	fp,zero
 8005f1c:	003f9006 	br	8005d60 <__alt_data_end+0xfc005d60>
 8005f20:	3446b03a 	or	r3,r6,r17
 8005f24:	1800261e 	bne	r3,zero,8005fc0 <__muldf3+0x2dc>
 8005f28:	0023883a 	mov	r17,zero
 8005f2c:	0011883a 	mov	r8,zero
 8005f30:	01400084 	movi	r5,2
 8005f34:	003f9c06 	br	8005da8 <__alt_data_end+0xfc005da8>
 8005f38:	3446b03a 	or	r3,r6,r17
 8005f3c:	18001c26 	beq	r3,zero,8005fb0 <__muldf3+0x2cc>
 8005f40:	8800ce26 	beq	r17,zero,800627c <__muldf3+0x598>
 8005f44:	8809883a 	mov	r4,r17
 8005f48:	d9800215 	stw	r6,8(sp)
 8005f4c:	da400115 	stw	r9,4(sp)
 8005f50:	da800015 	stw	r10,0(sp)
 8005f54:	800710c0 	call	800710c <__clzsi2>
 8005f58:	d9800217 	ldw	r6,8(sp)
 8005f5c:	da400117 	ldw	r9,4(sp)
 8005f60:	da800017 	ldw	r10,0(sp)
 8005f64:	113ffd44 	addi	r4,r2,-11
 8005f68:	00c00704 	movi	r3,28
 8005f6c:	1900bf16 	blt	r3,r4,800626c <__muldf3+0x588>
 8005f70:	00c00744 	movi	r3,29
 8005f74:	123ffe04 	addi	r8,r2,-8
 8005f78:	1907c83a 	sub	r3,r3,r4
 8005f7c:	8a22983a 	sll	r17,r17,r8
 8005f80:	30c6d83a 	srl	r3,r6,r3
 8005f84:	3210983a 	sll	r8,r6,r8
 8005f88:	1c62b03a 	or	r17,r3,r17
 8005f8c:	1080fcc4 	addi	r2,r2,1011
 8005f90:	0085c83a 	sub	r2,zero,r2
 8005f94:	000b883a 	mov	r5,zero
 8005f98:	003f8306 	br	8005da8 <__alt_data_end+0xfc005da8>
 8005f9c:	b02b883a 	mov	r21,r22
 8005fa0:	0081ffc4 	movi	r2,2047
 8005fa4:	000b883a 	mov	r5,zero
 8005fa8:	0029883a 	mov	r20,zero
 8005fac:	003fac06 	br	8005e60 <__alt_data_end+0xfc005e60>
 8005fb0:	0023883a 	mov	r17,zero
 8005fb4:	0011883a 	mov	r8,zero
 8005fb8:	01400044 	movi	r5,1
 8005fbc:	003f7a06 	br	8005da8 <__alt_data_end+0xfc005da8>
 8005fc0:	014000c4 	movi	r5,3
 8005fc4:	003f7806 	br	8005da8 <__alt_data_end+0xfc005da8>
 8005fc8:	04c00104 	movi	r19,4
 8005fcc:	0021883a 	mov	r16,zero
 8005fd0:	0029883a 	mov	r20,zero
 8005fd4:	07000044 	movi	fp,1
 8005fd8:	003f6106 	br	8005d60 <__alt_data_end+0xfc005d60>
 8005fdc:	04c00304 	movi	r19,12
 8005fe0:	070000c4 	movi	fp,3
 8005fe4:	003f5e06 	br	8005d60 <__alt_data_end+0xfc005d60>
 8005fe8:	01400434 	movhi	r5,16
 8005fec:	002b883a 	mov	r21,zero
 8005ff0:	297fffc4 	addi	r5,r5,-1
 8005ff4:	053fffc4 	movi	r20,-1
 8005ff8:	0081ffc4 	movi	r2,2047
 8005ffc:	003f9806 	br	8005e60 <__alt_data_end+0xfc005e60>
 8006000:	8023883a 	mov	r17,r16
 8006004:	a011883a 	mov	r8,r20
 8006008:	e00b883a 	mov	r5,fp
 800600c:	003f8a06 	br	8005e38 <__alt_data_end+0xfc005e38>
 8006010:	8023883a 	mov	r17,r16
 8006014:	a011883a 	mov	r8,r20
 8006018:	482d883a 	mov	r22,r9
 800601c:	e00b883a 	mov	r5,fp
 8006020:	003f8506 	br	8005e38 <__alt_data_end+0xfc005e38>
 8006024:	a00ad43a 	srli	r5,r20,16
 8006028:	401ad43a 	srli	r13,r8,16
 800602c:	a53fffcc 	andi	r20,r20,65535
 8006030:	423fffcc 	andi	r8,r8,65535
 8006034:	4519383a 	mul	r12,r8,r20
 8006038:	4147383a 	mul	r3,r8,r5
 800603c:	6d09383a 	mul	r4,r13,r20
 8006040:	600cd43a 	srli	r6,r12,16
 8006044:	2b5d383a 	mul	r14,r5,r13
 8006048:	20c9883a 	add	r4,r4,r3
 800604c:	310d883a 	add	r6,r6,r4
 8006050:	30c0022e 	bgeu	r6,r3,800605c <__muldf3+0x378>
 8006054:	00c00074 	movhi	r3,1
 8006058:	70dd883a 	add	r14,r14,r3
 800605c:	8826d43a 	srli	r19,r17,16
 8006060:	8bffffcc 	andi	r15,r17,65535
 8006064:	7d23383a 	mul	r17,r15,r20
 8006068:	7949383a 	mul	r4,r15,r5
 800606c:	9d29383a 	mul	r20,r19,r20
 8006070:	8814d43a 	srli	r10,r17,16
 8006074:	3012943a 	slli	r9,r6,16
 8006078:	a129883a 	add	r20,r20,r4
 800607c:	633fffcc 	andi	r12,r12,65535
 8006080:	5515883a 	add	r10,r10,r20
 8006084:	3006d43a 	srli	r3,r6,16
 8006088:	4b13883a 	add	r9,r9,r12
 800608c:	2ccb383a 	mul	r5,r5,r19
 8006090:	5100022e 	bgeu	r10,r4,800609c <__muldf3+0x3b8>
 8006094:	01000074 	movhi	r4,1
 8006098:	290b883a 	add	r5,r5,r4
 800609c:	802ad43a 	srli	r21,r16,16
 80060a0:	843fffcc 	andi	r16,r16,65535
 80060a4:	440d383a 	mul	r6,r8,r16
 80060a8:	4565383a 	mul	r18,r8,r21
 80060ac:	8349383a 	mul	r4,r16,r13
 80060b0:	500e943a 	slli	r7,r10,16
 80060b4:	3010d43a 	srli	r8,r6,16
 80060b8:	5028d43a 	srli	r20,r10,16
 80060bc:	2489883a 	add	r4,r4,r18
 80060c0:	8abfffcc 	andi	r10,r17,65535
 80060c4:	3a95883a 	add	r10,r7,r10
 80060c8:	4119883a 	add	r12,r8,r4
 80060cc:	a169883a 	add	r20,r20,r5
 80060d0:	1a87883a 	add	r3,r3,r10
 80060d4:	6d5b383a 	mul	r13,r13,r21
 80060d8:	6480022e 	bgeu	r12,r18,80060e4 <__muldf3+0x400>
 80060dc:	01000074 	movhi	r4,1
 80060e0:	691b883a 	add	r13,r13,r4
 80060e4:	7c25383a 	mul	r18,r15,r16
 80060e8:	7d4b383a 	mul	r5,r15,r21
 80060ec:	84cf383a 	mul	r7,r16,r19
 80060f0:	901ed43a 	srli	r15,r18,16
 80060f4:	6008d43a 	srli	r4,r12,16
 80060f8:	6010943a 	slli	r8,r12,16
 80060fc:	394f883a 	add	r7,r7,r5
 8006100:	333fffcc 	andi	r12,r6,65535
 8006104:	79df883a 	add	r15,r15,r7
 8006108:	235b883a 	add	r13,r4,r13
 800610c:	9d63383a 	mul	r17,r19,r21
 8006110:	4309883a 	add	r4,r8,r12
 8006114:	7940022e 	bgeu	r15,r5,8006120 <__muldf3+0x43c>
 8006118:	01400074 	movhi	r5,1
 800611c:	8963883a 	add	r17,r17,r5
 8006120:	780a943a 	slli	r5,r15,16
 8006124:	91bfffcc 	andi	r6,r18,65535
 8006128:	70c7883a 	add	r3,r14,r3
 800612c:	298d883a 	add	r6,r5,r6
 8006130:	1a8f803a 	cmpltu	r7,r3,r10
 8006134:	350b883a 	add	r5,r6,r20
 8006138:	20c7883a 	add	r3,r4,r3
 800613c:	3955883a 	add	r10,r7,r5
 8006140:	1909803a 	cmpltu	r4,r3,r4
 8006144:	6a91883a 	add	r8,r13,r10
 8006148:	780cd43a 	srli	r6,r15,16
 800614c:	2219883a 	add	r12,r4,r8
 8006150:	2d0b803a 	cmpltu	r5,r5,r20
 8006154:	51cf803a 	cmpltu	r7,r10,r7
 8006158:	29ceb03a 	or	r7,r5,r7
 800615c:	4351803a 	cmpltu	r8,r8,r13
 8006160:	610b803a 	cmpltu	r5,r12,r4
 8006164:	4148b03a 	or	r4,r8,r5
 8006168:	398f883a 	add	r7,r7,r6
 800616c:	3909883a 	add	r4,r7,r4
 8006170:	1810927a 	slli	r8,r3,9
 8006174:	2449883a 	add	r4,r4,r17
 8006178:	2008927a 	slli	r4,r4,9
 800617c:	6022d5fa 	srli	r17,r12,23
 8006180:	1806d5fa 	srli	r3,r3,23
 8006184:	4252b03a 	or	r9,r8,r9
 8006188:	600a927a 	slli	r5,r12,9
 800618c:	4810c03a 	cmpne	r8,r9,zero
 8006190:	2462b03a 	or	r17,r4,r17
 8006194:	40c6b03a 	or	r3,r8,r3
 8006198:	8900402c 	andhi	r4,r17,256
 800619c:	1950b03a 	or	r8,r3,r5
 80061a0:	20000726 	beq	r4,zero,80061c0 <__muldf3+0x4dc>
 80061a4:	4006d07a 	srli	r3,r8,1
 80061a8:	880497fa 	slli	r2,r17,31
 80061ac:	4200004c 	andi	r8,r8,1
 80061b0:	8822d07a 	srli	r17,r17,1
 80061b4:	1a10b03a 	or	r8,r3,r8
 80061b8:	1210b03a 	or	r8,r2,r8
 80061bc:	5805883a 	mov	r2,r11
 80061c0:	1140ffc4 	addi	r5,r2,1023
 80061c4:	0140440e 	bge	zero,r5,80062d8 <__muldf3+0x5f4>
 80061c8:	40c001cc 	andi	r3,r8,7
 80061cc:	18000726 	beq	r3,zero,80061ec <__muldf3+0x508>
 80061d0:	40c003cc 	andi	r3,r8,15
 80061d4:	01000104 	movi	r4,4
 80061d8:	19000426 	beq	r3,r4,80061ec <__muldf3+0x508>
 80061dc:	4107883a 	add	r3,r8,r4
 80061e0:	1a11803a 	cmpltu	r8,r3,r8
 80061e4:	8a23883a 	add	r17,r17,r8
 80061e8:	1811883a 	mov	r8,r3
 80061ec:	88c0402c 	andhi	r3,r17,256
 80061f0:	18000426 	beq	r3,zero,8006204 <__muldf3+0x520>
 80061f4:	11410004 	addi	r5,r2,1024
 80061f8:	00bfc034 	movhi	r2,65280
 80061fc:	10bfffc4 	addi	r2,r2,-1
 8006200:	88a2703a 	and	r17,r17,r2
 8006204:	0081ff84 	movi	r2,2046
 8006208:	117f6416 	blt	r2,r5,8005f9c <__alt_data_end+0xfc005f9c>
 800620c:	8828977a 	slli	r20,r17,29
 8006210:	4010d0fa 	srli	r8,r8,3
 8006214:	8822927a 	slli	r17,r17,9
 8006218:	2881ffcc 	andi	r2,r5,2047
 800621c:	a228b03a 	or	r20,r20,r8
 8006220:	880ad33a 	srli	r5,r17,12
 8006224:	b02b883a 	mov	r21,r22
 8006228:	003f0d06 	br	8005e60 <__alt_data_end+0xfc005e60>
 800622c:	8080022c 	andhi	r2,r16,8
 8006230:	10000926 	beq	r2,zero,8006258 <__muldf3+0x574>
 8006234:	8880022c 	andhi	r2,r17,8
 8006238:	1000071e 	bne	r2,zero,8006258 <__muldf3+0x574>
 800623c:	00800434 	movhi	r2,16
 8006240:	89400234 	orhi	r5,r17,8
 8006244:	10bfffc4 	addi	r2,r2,-1
 8006248:	b82b883a 	mov	r21,r23
 800624c:	288a703a 	and	r5,r5,r2
 8006250:	4029883a 	mov	r20,r8
 8006254:	003f6806 	br	8005ff8 <__alt_data_end+0xfc005ff8>
 8006258:	00800434 	movhi	r2,16
 800625c:	81400234 	orhi	r5,r16,8
 8006260:	10bfffc4 	addi	r2,r2,-1
 8006264:	288a703a 	and	r5,r5,r2
 8006268:	003f6306 	br	8005ff8 <__alt_data_end+0xfc005ff8>
 800626c:	147ff604 	addi	r17,r2,-40
 8006270:	3462983a 	sll	r17,r6,r17
 8006274:	0011883a 	mov	r8,zero
 8006278:	003f4406 	br	8005f8c <__alt_data_end+0xfc005f8c>
 800627c:	3009883a 	mov	r4,r6
 8006280:	d9800215 	stw	r6,8(sp)
 8006284:	da400115 	stw	r9,4(sp)
 8006288:	da800015 	stw	r10,0(sp)
 800628c:	800710c0 	call	800710c <__clzsi2>
 8006290:	10800804 	addi	r2,r2,32
 8006294:	da800017 	ldw	r10,0(sp)
 8006298:	da400117 	ldw	r9,4(sp)
 800629c:	d9800217 	ldw	r6,8(sp)
 80062a0:	003f3006 	br	8005f64 <__alt_data_end+0xfc005f64>
 80062a4:	143ff604 	addi	r16,r2,-40
 80062a8:	9c20983a 	sll	r16,r19,r16
 80062ac:	0029883a 	mov	r20,zero
 80062b0:	003f1606 	br	8005f0c <__alt_data_end+0xfc005f0c>
 80062b4:	d9800215 	stw	r6,8(sp)
 80062b8:	d9c00015 	stw	r7,0(sp)
 80062bc:	da400115 	stw	r9,4(sp)
 80062c0:	800710c0 	call	800710c <__clzsi2>
 80062c4:	10800804 	addi	r2,r2,32
 80062c8:	da400117 	ldw	r9,4(sp)
 80062cc:	d9c00017 	ldw	r7,0(sp)
 80062d0:	d9800217 	ldw	r6,8(sp)
 80062d4:	003f0306 	br	8005ee4 <__alt_data_end+0xfc005ee4>
 80062d8:	00c00044 	movi	r3,1
 80062dc:	1947c83a 	sub	r3,r3,r5
 80062e0:	00800e04 	movi	r2,56
 80062e4:	10feda16 	blt	r2,r3,8005e50 <__alt_data_end+0xfc005e50>
 80062e8:	008007c4 	movi	r2,31
 80062ec:	10c01b16 	blt	r2,r3,800635c <__muldf3+0x678>
 80062f0:	00800804 	movi	r2,32
 80062f4:	10c5c83a 	sub	r2,r2,r3
 80062f8:	888a983a 	sll	r5,r17,r2
 80062fc:	40c8d83a 	srl	r4,r8,r3
 8006300:	4084983a 	sll	r2,r8,r2
 8006304:	88e2d83a 	srl	r17,r17,r3
 8006308:	2906b03a 	or	r3,r5,r4
 800630c:	1004c03a 	cmpne	r2,r2,zero
 8006310:	1886b03a 	or	r3,r3,r2
 8006314:	188001cc 	andi	r2,r3,7
 8006318:	10000726 	beq	r2,zero,8006338 <__muldf3+0x654>
 800631c:	188003cc 	andi	r2,r3,15
 8006320:	01000104 	movi	r4,4
 8006324:	11000426 	beq	r2,r4,8006338 <__muldf3+0x654>
 8006328:	1805883a 	mov	r2,r3
 800632c:	10c00104 	addi	r3,r2,4
 8006330:	1885803a 	cmpltu	r2,r3,r2
 8006334:	88a3883a 	add	r17,r17,r2
 8006338:	8880202c 	andhi	r2,r17,128
 800633c:	10001c26 	beq	r2,zero,80063b0 <__muldf3+0x6cc>
 8006340:	b02b883a 	mov	r21,r22
 8006344:	00800044 	movi	r2,1
 8006348:	000b883a 	mov	r5,zero
 800634c:	0029883a 	mov	r20,zero
 8006350:	003ec306 	br	8005e60 <__alt_data_end+0xfc005e60>
 8006354:	5805883a 	mov	r2,r11
 8006358:	003f9906 	br	80061c0 <__alt_data_end+0xfc0061c0>
 800635c:	00bff844 	movi	r2,-31
 8006360:	1145c83a 	sub	r2,r2,r5
 8006364:	8888d83a 	srl	r4,r17,r2
 8006368:	00800804 	movi	r2,32
 800636c:	18801a26 	beq	r3,r2,80063d8 <__muldf3+0x6f4>
 8006370:	00801004 	movi	r2,64
 8006374:	10c5c83a 	sub	r2,r2,r3
 8006378:	8884983a 	sll	r2,r17,r2
 800637c:	1204b03a 	or	r2,r2,r8
 8006380:	1004c03a 	cmpne	r2,r2,zero
 8006384:	2084b03a 	or	r2,r4,r2
 8006388:	144001cc 	andi	r17,r2,7
 800638c:	88000d1e 	bne	r17,zero,80063c4 <__muldf3+0x6e0>
 8006390:	000b883a 	mov	r5,zero
 8006394:	1028d0fa 	srli	r20,r2,3
 8006398:	b02b883a 	mov	r21,r22
 800639c:	0005883a 	mov	r2,zero
 80063a0:	a468b03a 	or	r20,r20,r17
 80063a4:	003eae06 	br	8005e60 <__alt_data_end+0xfc005e60>
 80063a8:	1007883a 	mov	r3,r2
 80063ac:	0023883a 	mov	r17,zero
 80063b0:	880a927a 	slli	r5,r17,9
 80063b4:	1805883a 	mov	r2,r3
 80063b8:	8822977a 	slli	r17,r17,29
 80063bc:	280ad33a 	srli	r5,r5,12
 80063c0:	003ff406 	br	8006394 <__alt_data_end+0xfc006394>
 80063c4:	10c003cc 	andi	r3,r2,15
 80063c8:	01000104 	movi	r4,4
 80063cc:	193ff626 	beq	r3,r4,80063a8 <__alt_data_end+0xfc0063a8>
 80063d0:	0023883a 	mov	r17,zero
 80063d4:	003fd506 	br	800632c <__alt_data_end+0xfc00632c>
 80063d8:	0005883a 	mov	r2,zero
 80063dc:	003fe706 	br	800637c <__alt_data_end+0xfc00637c>
 80063e0:	00800434 	movhi	r2,16
 80063e4:	89400234 	orhi	r5,r17,8
 80063e8:	10bfffc4 	addi	r2,r2,-1
 80063ec:	b02b883a 	mov	r21,r22
 80063f0:	288a703a 	and	r5,r5,r2
 80063f4:	4029883a 	mov	r20,r8
 80063f8:	003eff06 	br	8005ff8 <__alt_data_end+0xfc005ff8>

080063fc <__subdf3>:
 80063fc:	02000434 	movhi	r8,16
 8006400:	423fffc4 	addi	r8,r8,-1
 8006404:	defffb04 	addi	sp,sp,-20
 8006408:	2a14703a 	and	r10,r5,r8
 800640c:	3812d53a 	srli	r9,r7,20
 8006410:	3a10703a 	and	r8,r7,r8
 8006414:	2006d77a 	srli	r3,r4,29
 8006418:	3004d77a 	srli	r2,r6,29
 800641c:	dc000015 	stw	r16,0(sp)
 8006420:	501490fa 	slli	r10,r10,3
 8006424:	2820d53a 	srli	r16,r5,20
 8006428:	401090fa 	slli	r8,r8,3
 800642c:	dc800215 	stw	r18,8(sp)
 8006430:	dc400115 	stw	r17,4(sp)
 8006434:	dfc00415 	stw	ra,16(sp)
 8006438:	202290fa 	slli	r17,r4,3
 800643c:	dcc00315 	stw	r19,12(sp)
 8006440:	4a41ffcc 	andi	r9,r9,2047
 8006444:	0101ffc4 	movi	r4,2047
 8006448:	2824d7fa 	srli	r18,r5,31
 800644c:	8401ffcc 	andi	r16,r16,2047
 8006450:	50c6b03a 	or	r3,r10,r3
 8006454:	380ed7fa 	srli	r7,r7,31
 8006458:	408ab03a 	or	r5,r8,r2
 800645c:	300c90fa 	slli	r6,r6,3
 8006460:	49009626 	beq	r9,r4,80066bc <__subdf3+0x2c0>
 8006464:	39c0005c 	xori	r7,r7,1
 8006468:	8245c83a 	sub	r2,r16,r9
 800646c:	3c807426 	beq	r7,r18,8006640 <__subdf3+0x244>
 8006470:	0080af0e 	bge	zero,r2,8006730 <__subdf3+0x334>
 8006474:	48002a1e 	bne	r9,zero,8006520 <__subdf3+0x124>
 8006478:	2988b03a 	or	r4,r5,r6
 800647c:	20009a1e 	bne	r4,zero,80066e8 <__subdf3+0x2ec>
 8006480:	888001cc 	andi	r2,r17,7
 8006484:	10000726 	beq	r2,zero,80064a4 <__subdf3+0xa8>
 8006488:	888003cc 	andi	r2,r17,15
 800648c:	01000104 	movi	r4,4
 8006490:	11000426 	beq	r2,r4,80064a4 <__subdf3+0xa8>
 8006494:	890b883a 	add	r5,r17,r4
 8006498:	2c63803a 	cmpltu	r17,r5,r17
 800649c:	1c47883a 	add	r3,r3,r17
 80064a0:	2823883a 	mov	r17,r5
 80064a4:	1880202c 	andhi	r2,r3,128
 80064a8:	10005926 	beq	r2,zero,8006610 <__subdf3+0x214>
 80064ac:	84000044 	addi	r16,r16,1
 80064b0:	0081ffc4 	movi	r2,2047
 80064b4:	8080be26 	beq	r16,r2,80067b0 <__subdf3+0x3b4>
 80064b8:	017fe034 	movhi	r5,65408
 80064bc:	297fffc4 	addi	r5,r5,-1
 80064c0:	1946703a 	and	r3,r3,r5
 80064c4:	1804977a 	slli	r2,r3,29
 80064c8:	1806927a 	slli	r3,r3,9
 80064cc:	8822d0fa 	srli	r17,r17,3
 80064d0:	8401ffcc 	andi	r16,r16,2047
 80064d4:	180ad33a 	srli	r5,r3,12
 80064d8:	9100004c 	andi	r4,r18,1
 80064dc:	1444b03a 	or	r2,r2,r17
 80064e0:	80c1ffcc 	andi	r3,r16,2047
 80064e4:	1820953a 	slli	r16,r3,20
 80064e8:	20c03fcc 	andi	r3,r4,255
 80064ec:	180897fa 	slli	r4,r3,31
 80064f0:	00c00434 	movhi	r3,16
 80064f4:	18ffffc4 	addi	r3,r3,-1
 80064f8:	28c6703a 	and	r3,r5,r3
 80064fc:	1c06b03a 	or	r3,r3,r16
 8006500:	1906b03a 	or	r3,r3,r4
 8006504:	dfc00417 	ldw	ra,16(sp)
 8006508:	dcc00317 	ldw	r19,12(sp)
 800650c:	dc800217 	ldw	r18,8(sp)
 8006510:	dc400117 	ldw	r17,4(sp)
 8006514:	dc000017 	ldw	r16,0(sp)
 8006518:	dec00504 	addi	sp,sp,20
 800651c:	f800283a 	ret
 8006520:	0101ffc4 	movi	r4,2047
 8006524:	813fd626 	beq	r16,r4,8006480 <__alt_data_end+0xfc006480>
 8006528:	29402034 	orhi	r5,r5,128
 800652c:	01000e04 	movi	r4,56
 8006530:	2080a316 	blt	r4,r2,80067c0 <__subdf3+0x3c4>
 8006534:	010007c4 	movi	r4,31
 8006538:	2080c616 	blt	r4,r2,8006854 <__subdf3+0x458>
 800653c:	01000804 	movi	r4,32
 8006540:	2089c83a 	sub	r4,r4,r2
 8006544:	2910983a 	sll	r8,r5,r4
 8006548:	308ed83a 	srl	r7,r6,r2
 800654c:	3108983a 	sll	r4,r6,r4
 8006550:	2884d83a 	srl	r2,r5,r2
 8006554:	41ccb03a 	or	r6,r8,r7
 8006558:	2008c03a 	cmpne	r4,r4,zero
 800655c:	310cb03a 	or	r6,r6,r4
 8006560:	898dc83a 	sub	r6,r17,r6
 8006564:	89a3803a 	cmpltu	r17,r17,r6
 8006568:	1887c83a 	sub	r3,r3,r2
 800656c:	1c47c83a 	sub	r3,r3,r17
 8006570:	3023883a 	mov	r17,r6
 8006574:	1880202c 	andhi	r2,r3,128
 8006578:	10002326 	beq	r2,zero,8006608 <__subdf3+0x20c>
 800657c:	04c02034 	movhi	r19,128
 8006580:	9cffffc4 	addi	r19,r19,-1
 8006584:	1ce6703a 	and	r19,r3,r19
 8006588:	98007a26 	beq	r19,zero,8006774 <__subdf3+0x378>
 800658c:	9809883a 	mov	r4,r19
 8006590:	800710c0 	call	800710c <__clzsi2>
 8006594:	113ffe04 	addi	r4,r2,-8
 8006598:	00c007c4 	movi	r3,31
 800659c:	19007b16 	blt	r3,r4,800678c <__subdf3+0x390>
 80065a0:	00800804 	movi	r2,32
 80065a4:	1105c83a 	sub	r2,r2,r4
 80065a8:	8884d83a 	srl	r2,r17,r2
 80065ac:	9906983a 	sll	r3,r19,r4
 80065b0:	8922983a 	sll	r17,r17,r4
 80065b4:	10c4b03a 	or	r2,r2,r3
 80065b8:	24007816 	blt	r4,r16,800679c <__subdf3+0x3a0>
 80065bc:	2421c83a 	sub	r16,r4,r16
 80065c0:	80c00044 	addi	r3,r16,1
 80065c4:	010007c4 	movi	r4,31
 80065c8:	20c09516 	blt	r4,r3,8006820 <__subdf3+0x424>
 80065cc:	01400804 	movi	r5,32
 80065d0:	28cbc83a 	sub	r5,r5,r3
 80065d4:	88c8d83a 	srl	r4,r17,r3
 80065d8:	8962983a 	sll	r17,r17,r5
 80065dc:	114a983a 	sll	r5,r2,r5
 80065e0:	10c6d83a 	srl	r3,r2,r3
 80065e4:	8804c03a 	cmpne	r2,r17,zero
 80065e8:	290ab03a 	or	r5,r5,r4
 80065ec:	28a2b03a 	or	r17,r5,r2
 80065f0:	0021883a 	mov	r16,zero
 80065f4:	003fa206 	br	8006480 <__alt_data_end+0xfc006480>
 80065f8:	2090b03a 	or	r8,r4,r2
 80065fc:	40018e26 	beq	r8,zero,8006c38 <__subdf3+0x83c>
 8006600:	1007883a 	mov	r3,r2
 8006604:	2023883a 	mov	r17,r4
 8006608:	888001cc 	andi	r2,r17,7
 800660c:	103f9e1e 	bne	r2,zero,8006488 <__alt_data_end+0xfc006488>
 8006610:	1804977a 	slli	r2,r3,29
 8006614:	8822d0fa 	srli	r17,r17,3
 8006618:	1810d0fa 	srli	r8,r3,3
 800661c:	9100004c 	andi	r4,r18,1
 8006620:	1444b03a 	or	r2,r2,r17
 8006624:	00c1ffc4 	movi	r3,2047
 8006628:	80c02826 	beq	r16,r3,80066cc <__subdf3+0x2d0>
 800662c:	01400434 	movhi	r5,16
 8006630:	297fffc4 	addi	r5,r5,-1
 8006634:	80e0703a 	and	r16,r16,r3
 8006638:	414a703a 	and	r5,r8,r5
 800663c:	003fa806 	br	80064e0 <__alt_data_end+0xfc0064e0>
 8006640:	0080630e 	bge	zero,r2,80067d0 <__subdf3+0x3d4>
 8006644:	48003026 	beq	r9,zero,8006708 <__subdf3+0x30c>
 8006648:	0101ffc4 	movi	r4,2047
 800664c:	813f8c26 	beq	r16,r4,8006480 <__alt_data_end+0xfc006480>
 8006650:	29402034 	orhi	r5,r5,128
 8006654:	01000e04 	movi	r4,56
 8006658:	2080a90e 	bge	r4,r2,8006900 <__subdf3+0x504>
 800665c:	298cb03a 	or	r6,r5,r6
 8006660:	3012c03a 	cmpne	r9,r6,zero
 8006664:	0005883a 	mov	r2,zero
 8006668:	4c53883a 	add	r9,r9,r17
 800666c:	4c63803a 	cmpltu	r17,r9,r17
 8006670:	10c7883a 	add	r3,r2,r3
 8006674:	88c7883a 	add	r3,r17,r3
 8006678:	4823883a 	mov	r17,r9
 800667c:	1880202c 	andhi	r2,r3,128
 8006680:	1000d026 	beq	r2,zero,80069c4 <__subdf3+0x5c8>
 8006684:	84000044 	addi	r16,r16,1
 8006688:	0081ffc4 	movi	r2,2047
 800668c:	8080fe26 	beq	r16,r2,8006a88 <__subdf3+0x68c>
 8006690:	00bfe034 	movhi	r2,65408
 8006694:	10bfffc4 	addi	r2,r2,-1
 8006698:	1886703a 	and	r3,r3,r2
 800669c:	880ad07a 	srli	r5,r17,1
 80066a0:	180497fa 	slli	r2,r3,31
 80066a4:	8900004c 	andi	r4,r17,1
 80066a8:	2922b03a 	or	r17,r5,r4
 80066ac:	1806d07a 	srli	r3,r3,1
 80066b0:	1462b03a 	or	r17,r2,r17
 80066b4:	3825883a 	mov	r18,r7
 80066b8:	003f7106 	br	8006480 <__alt_data_end+0xfc006480>
 80066bc:	2984b03a 	or	r2,r5,r6
 80066c0:	103f6826 	beq	r2,zero,8006464 <__alt_data_end+0xfc006464>
 80066c4:	39c03fcc 	andi	r7,r7,255
 80066c8:	003f6706 	br	8006468 <__alt_data_end+0xfc006468>
 80066cc:	4086b03a 	or	r3,r8,r2
 80066d0:	18015226 	beq	r3,zero,8006c1c <__subdf3+0x820>
 80066d4:	00c00434 	movhi	r3,16
 80066d8:	41400234 	orhi	r5,r8,8
 80066dc:	18ffffc4 	addi	r3,r3,-1
 80066e0:	28ca703a 	and	r5,r5,r3
 80066e4:	003f7e06 	br	80064e0 <__alt_data_end+0xfc0064e0>
 80066e8:	10bfffc4 	addi	r2,r2,-1
 80066ec:	1000491e 	bne	r2,zero,8006814 <__subdf3+0x418>
 80066f0:	898fc83a 	sub	r7,r17,r6
 80066f4:	89e3803a 	cmpltu	r17,r17,r7
 80066f8:	1947c83a 	sub	r3,r3,r5
 80066fc:	1c47c83a 	sub	r3,r3,r17
 8006700:	3823883a 	mov	r17,r7
 8006704:	003f9b06 	br	8006574 <__alt_data_end+0xfc006574>
 8006708:	2988b03a 	or	r4,r5,r6
 800670c:	203f5c26 	beq	r4,zero,8006480 <__alt_data_end+0xfc006480>
 8006710:	10bfffc4 	addi	r2,r2,-1
 8006714:	1000931e 	bne	r2,zero,8006964 <__subdf3+0x568>
 8006718:	898d883a 	add	r6,r17,r6
 800671c:	3463803a 	cmpltu	r17,r6,r17
 8006720:	1947883a 	add	r3,r3,r5
 8006724:	88c7883a 	add	r3,r17,r3
 8006728:	3023883a 	mov	r17,r6
 800672c:	003fd306 	br	800667c <__alt_data_end+0xfc00667c>
 8006730:	1000541e 	bne	r2,zero,8006884 <__subdf3+0x488>
 8006734:	80800044 	addi	r2,r16,1
 8006738:	1081ffcc 	andi	r2,r2,2047
 800673c:	01000044 	movi	r4,1
 8006740:	2080a20e 	bge	r4,r2,80069cc <__subdf3+0x5d0>
 8006744:	8989c83a 	sub	r4,r17,r6
 8006748:	8905803a 	cmpltu	r2,r17,r4
 800674c:	1967c83a 	sub	r19,r3,r5
 8006750:	98a7c83a 	sub	r19,r19,r2
 8006754:	9880202c 	andhi	r2,r19,128
 8006758:	10006326 	beq	r2,zero,80068e8 <__subdf3+0x4ec>
 800675c:	3463c83a 	sub	r17,r6,r17
 8006760:	28c7c83a 	sub	r3,r5,r3
 8006764:	344d803a 	cmpltu	r6,r6,r17
 8006768:	19a7c83a 	sub	r19,r3,r6
 800676c:	3825883a 	mov	r18,r7
 8006770:	983f861e 	bne	r19,zero,800658c <__alt_data_end+0xfc00658c>
 8006774:	8809883a 	mov	r4,r17
 8006778:	800710c0 	call	800710c <__clzsi2>
 800677c:	10800804 	addi	r2,r2,32
 8006780:	113ffe04 	addi	r4,r2,-8
 8006784:	00c007c4 	movi	r3,31
 8006788:	193f850e 	bge	r3,r4,80065a0 <__alt_data_end+0xfc0065a0>
 800678c:	10bff604 	addi	r2,r2,-40
 8006790:	8884983a 	sll	r2,r17,r2
 8006794:	0023883a 	mov	r17,zero
 8006798:	243f880e 	bge	r4,r16,80065bc <__alt_data_end+0xfc0065bc>
 800679c:	00ffe034 	movhi	r3,65408
 80067a0:	18ffffc4 	addi	r3,r3,-1
 80067a4:	8121c83a 	sub	r16,r16,r4
 80067a8:	10c6703a 	and	r3,r2,r3
 80067ac:	003f3406 	br	8006480 <__alt_data_end+0xfc006480>
 80067b0:	9100004c 	andi	r4,r18,1
 80067b4:	000b883a 	mov	r5,zero
 80067b8:	0005883a 	mov	r2,zero
 80067bc:	003f4806 	br	80064e0 <__alt_data_end+0xfc0064e0>
 80067c0:	298cb03a 	or	r6,r5,r6
 80067c4:	300cc03a 	cmpne	r6,r6,zero
 80067c8:	0005883a 	mov	r2,zero
 80067cc:	003f6406 	br	8006560 <__alt_data_end+0xfc006560>
 80067d0:	10009a1e 	bne	r2,zero,8006a3c <__subdf3+0x640>
 80067d4:	82400044 	addi	r9,r16,1
 80067d8:	4881ffcc 	andi	r2,r9,2047
 80067dc:	02800044 	movi	r10,1
 80067e0:	5080670e 	bge	r10,r2,8006980 <__subdf3+0x584>
 80067e4:	0081ffc4 	movi	r2,2047
 80067e8:	4880af26 	beq	r9,r2,8006aa8 <__subdf3+0x6ac>
 80067ec:	898d883a 	add	r6,r17,r6
 80067f0:	1945883a 	add	r2,r3,r5
 80067f4:	3447803a 	cmpltu	r3,r6,r17
 80067f8:	1887883a 	add	r3,r3,r2
 80067fc:	182297fa 	slli	r17,r3,31
 8006800:	300cd07a 	srli	r6,r6,1
 8006804:	1806d07a 	srli	r3,r3,1
 8006808:	4821883a 	mov	r16,r9
 800680c:	89a2b03a 	or	r17,r17,r6
 8006810:	003f1b06 	br	8006480 <__alt_data_end+0xfc006480>
 8006814:	0101ffc4 	movi	r4,2047
 8006818:	813f441e 	bne	r16,r4,800652c <__alt_data_end+0xfc00652c>
 800681c:	003f1806 	br	8006480 <__alt_data_end+0xfc006480>
 8006820:	843ff844 	addi	r16,r16,-31
 8006824:	01400804 	movi	r5,32
 8006828:	1408d83a 	srl	r4,r2,r16
 800682c:	19405026 	beq	r3,r5,8006970 <__subdf3+0x574>
 8006830:	01401004 	movi	r5,64
 8006834:	28c7c83a 	sub	r3,r5,r3
 8006838:	10c4983a 	sll	r2,r2,r3
 800683c:	88a2b03a 	or	r17,r17,r2
 8006840:	8822c03a 	cmpne	r17,r17,zero
 8006844:	2462b03a 	or	r17,r4,r17
 8006848:	0007883a 	mov	r3,zero
 800684c:	0021883a 	mov	r16,zero
 8006850:	003f6d06 	br	8006608 <__alt_data_end+0xfc006608>
 8006854:	11fff804 	addi	r7,r2,-32
 8006858:	01000804 	movi	r4,32
 800685c:	29ced83a 	srl	r7,r5,r7
 8006860:	11004526 	beq	r2,r4,8006978 <__subdf3+0x57c>
 8006864:	01001004 	movi	r4,64
 8006868:	2089c83a 	sub	r4,r4,r2
 800686c:	2904983a 	sll	r2,r5,r4
 8006870:	118cb03a 	or	r6,r2,r6
 8006874:	300cc03a 	cmpne	r6,r6,zero
 8006878:	398cb03a 	or	r6,r7,r6
 800687c:	0005883a 	mov	r2,zero
 8006880:	003f3706 	br	8006560 <__alt_data_end+0xfc006560>
 8006884:	80002a26 	beq	r16,zero,8006930 <__subdf3+0x534>
 8006888:	0101ffc4 	movi	r4,2047
 800688c:	49006626 	beq	r9,r4,8006a28 <__subdf3+0x62c>
 8006890:	0085c83a 	sub	r2,zero,r2
 8006894:	18c02034 	orhi	r3,r3,128
 8006898:	01000e04 	movi	r4,56
 800689c:	20807e16 	blt	r4,r2,8006a98 <__subdf3+0x69c>
 80068a0:	010007c4 	movi	r4,31
 80068a4:	2080e716 	blt	r4,r2,8006c44 <__subdf3+0x848>
 80068a8:	01000804 	movi	r4,32
 80068ac:	2089c83a 	sub	r4,r4,r2
 80068b0:	1914983a 	sll	r10,r3,r4
 80068b4:	8890d83a 	srl	r8,r17,r2
 80068b8:	8908983a 	sll	r4,r17,r4
 80068bc:	1884d83a 	srl	r2,r3,r2
 80068c0:	5222b03a 	or	r17,r10,r8
 80068c4:	2006c03a 	cmpne	r3,r4,zero
 80068c8:	88e2b03a 	or	r17,r17,r3
 80068cc:	3463c83a 	sub	r17,r6,r17
 80068d0:	2885c83a 	sub	r2,r5,r2
 80068d4:	344d803a 	cmpltu	r6,r6,r17
 80068d8:	1187c83a 	sub	r3,r2,r6
 80068dc:	4821883a 	mov	r16,r9
 80068e0:	3825883a 	mov	r18,r7
 80068e4:	003f2306 	br	8006574 <__alt_data_end+0xfc006574>
 80068e8:	24d0b03a 	or	r8,r4,r19
 80068ec:	40001b1e 	bne	r8,zero,800695c <__subdf3+0x560>
 80068f0:	0005883a 	mov	r2,zero
 80068f4:	0009883a 	mov	r4,zero
 80068f8:	0021883a 	mov	r16,zero
 80068fc:	003f4906 	br	8006624 <__alt_data_end+0xfc006624>
 8006900:	010007c4 	movi	r4,31
 8006904:	20803a16 	blt	r4,r2,80069f0 <__subdf3+0x5f4>
 8006908:	01000804 	movi	r4,32
 800690c:	2089c83a 	sub	r4,r4,r2
 8006910:	2912983a 	sll	r9,r5,r4
 8006914:	3090d83a 	srl	r8,r6,r2
 8006918:	3108983a 	sll	r4,r6,r4
 800691c:	2884d83a 	srl	r2,r5,r2
 8006920:	4a12b03a 	or	r9,r9,r8
 8006924:	2008c03a 	cmpne	r4,r4,zero
 8006928:	4912b03a 	or	r9,r9,r4
 800692c:	003f4e06 	br	8006668 <__alt_data_end+0xfc006668>
 8006930:	1c48b03a 	or	r4,r3,r17
 8006934:	20003c26 	beq	r4,zero,8006a28 <__subdf3+0x62c>
 8006938:	0084303a 	nor	r2,zero,r2
 800693c:	1000381e 	bne	r2,zero,8006a20 <__subdf3+0x624>
 8006940:	3463c83a 	sub	r17,r6,r17
 8006944:	28c5c83a 	sub	r2,r5,r3
 8006948:	344d803a 	cmpltu	r6,r6,r17
 800694c:	1187c83a 	sub	r3,r2,r6
 8006950:	4821883a 	mov	r16,r9
 8006954:	3825883a 	mov	r18,r7
 8006958:	003f0606 	br	8006574 <__alt_data_end+0xfc006574>
 800695c:	2023883a 	mov	r17,r4
 8006960:	003f0906 	br	8006588 <__alt_data_end+0xfc006588>
 8006964:	0101ffc4 	movi	r4,2047
 8006968:	813f3a1e 	bne	r16,r4,8006654 <__alt_data_end+0xfc006654>
 800696c:	003ec406 	br	8006480 <__alt_data_end+0xfc006480>
 8006970:	0005883a 	mov	r2,zero
 8006974:	003fb106 	br	800683c <__alt_data_end+0xfc00683c>
 8006978:	0005883a 	mov	r2,zero
 800697c:	003fbc06 	br	8006870 <__alt_data_end+0xfc006870>
 8006980:	1c44b03a 	or	r2,r3,r17
 8006984:	80008e1e 	bne	r16,zero,8006bc0 <__subdf3+0x7c4>
 8006988:	1000c826 	beq	r2,zero,8006cac <__subdf3+0x8b0>
 800698c:	2984b03a 	or	r2,r5,r6
 8006990:	103ebb26 	beq	r2,zero,8006480 <__alt_data_end+0xfc006480>
 8006994:	8989883a 	add	r4,r17,r6
 8006998:	1945883a 	add	r2,r3,r5
 800699c:	2447803a 	cmpltu	r3,r4,r17
 80069a0:	1887883a 	add	r3,r3,r2
 80069a4:	1880202c 	andhi	r2,r3,128
 80069a8:	2023883a 	mov	r17,r4
 80069ac:	103f1626 	beq	r2,zero,8006608 <__alt_data_end+0xfc006608>
 80069b0:	00bfe034 	movhi	r2,65408
 80069b4:	10bfffc4 	addi	r2,r2,-1
 80069b8:	5021883a 	mov	r16,r10
 80069bc:	1886703a 	and	r3,r3,r2
 80069c0:	003eaf06 	br	8006480 <__alt_data_end+0xfc006480>
 80069c4:	3825883a 	mov	r18,r7
 80069c8:	003f0f06 	br	8006608 <__alt_data_end+0xfc006608>
 80069cc:	1c44b03a 	or	r2,r3,r17
 80069d0:	8000251e 	bne	r16,zero,8006a68 <__subdf3+0x66c>
 80069d4:	1000661e 	bne	r2,zero,8006b70 <__subdf3+0x774>
 80069d8:	2990b03a 	or	r8,r5,r6
 80069dc:	40009626 	beq	r8,zero,8006c38 <__subdf3+0x83c>
 80069e0:	2807883a 	mov	r3,r5
 80069e4:	3023883a 	mov	r17,r6
 80069e8:	3825883a 	mov	r18,r7
 80069ec:	003ea406 	br	8006480 <__alt_data_end+0xfc006480>
 80069f0:	127ff804 	addi	r9,r2,-32
 80069f4:	01000804 	movi	r4,32
 80069f8:	2a52d83a 	srl	r9,r5,r9
 80069fc:	11008c26 	beq	r2,r4,8006c30 <__subdf3+0x834>
 8006a00:	01001004 	movi	r4,64
 8006a04:	2085c83a 	sub	r2,r4,r2
 8006a08:	2884983a 	sll	r2,r5,r2
 8006a0c:	118cb03a 	or	r6,r2,r6
 8006a10:	300cc03a 	cmpne	r6,r6,zero
 8006a14:	4992b03a 	or	r9,r9,r6
 8006a18:	0005883a 	mov	r2,zero
 8006a1c:	003f1206 	br	8006668 <__alt_data_end+0xfc006668>
 8006a20:	0101ffc4 	movi	r4,2047
 8006a24:	493f9c1e 	bne	r9,r4,8006898 <__alt_data_end+0xfc006898>
 8006a28:	2807883a 	mov	r3,r5
 8006a2c:	3023883a 	mov	r17,r6
 8006a30:	4821883a 	mov	r16,r9
 8006a34:	3825883a 	mov	r18,r7
 8006a38:	003e9106 	br	8006480 <__alt_data_end+0xfc006480>
 8006a3c:	80001f1e 	bne	r16,zero,8006abc <__subdf3+0x6c0>
 8006a40:	1c48b03a 	or	r4,r3,r17
 8006a44:	20005a26 	beq	r4,zero,8006bb0 <__subdf3+0x7b4>
 8006a48:	0084303a 	nor	r2,zero,r2
 8006a4c:	1000561e 	bne	r2,zero,8006ba8 <__subdf3+0x7ac>
 8006a50:	89a3883a 	add	r17,r17,r6
 8006a54:	1945883a 	add	r2,r3,r5
 8006a58:	898d803a 	cmpltu	r6,r17,r6
 8006a5c:	3087883a 	add	r3,r6,r2
 8006a60:	4821883a 	mov	r16,r9
 8006a64:	003f0506 	br	800667c <__alt_data_end+0xfc00667c>
 8006a68:	10002b1e 	bne	r2,zero,8006b18 <__subdf3+0x71c>
 8006a6c:	2984b03a 	or	r2,r5,r6
 8006a70:	10008026 	beq	r2,zero,8006c74 <__subdf3+0x878>
 8006a74:	2807883a 	mov	r3,r5
 8006a78:	3023883a 	mov	r17,r6
 8006a7c:	3825883a 	mov	r18,r7
 8006a80:	0401ffc4 	movi	r16,2047
 8006a84:	003e7e06 	br	8006480 <__alt_data_end+0xfc006480>
 8006a88:	3809883a 	mov	r4,r7
 8006a8c:	0011883a 	mov	r8,zero
 8006a90:	0005883a 	mov	r2,zero
 8006a94:	003ee306 	br	8006624 <__alt_data_end+0xfc006624>
 8006a98:	1c62b03a 	or	r17,r3,r17
 8006a9c:	8822c03a 	cmpne	r17,r17,zero
 8006aa0:	0005883a 	mov	r2,zero
 8006aa4:	003f8906 	br	80068cc <__alt_data_end+0xfc0068cc>
 8006aa8:	3809883a 	mov	r4,r7
 8006aac:	4821883a 	mov	r16,r9
 8006ab0:	0011883a 	mov	r8,zero
 8006ab4:	0005883a 	mov	r2,zero
 8006ab8:	003eda06 	br	8006624 <__alt_data_end+0xfc006624>
 8006abc:	0101ffc4 	movi	r4,2047
 8006ac0:	49003b26 	beq	r9,r4,8006bb0 <__subdf3+0x7b4>
 8006ac4:	0085c83a 	sub	r2,zero,r2
 8006ac8:	18c02034 	orhi	r3,r3,128
 8006acc:	01000e04 	movi	r4,56
 8006ad0:	20806e16 	blt	r4,r2,8006c8c <__subdf3+0x890>
 8006ad4:	010007c4 	movi	r4,31
 8006ad8:	20807716 	blt	r4,r2,8006cb8 <__subdf3+0x8bc>
 8006adc:	01000804 	movi	r4,32
 8006ae0:	2089c83a 	sub	r4,r4,r2
 8006ae4:	1914983a 	sll	r10,r3,r4
 8006ae8:	8890d83a 	srl	r8,r17,r2
 8006aec:	8908983a 	sll	r4,r17,r4
 8006af0:	1884d83a 	srl	r2,r3,r2
 8006af4:	5222b03a 	or	r17,r10,r8
 8006af8:	2006c03a 	cmpne	r3,r4,zero
 8006afc:	88e2b03a 	or	r17,r17,r3
 8006b00:	89a3883a 	add	r17,r17,r6
 8006b04:	1145883a 	add	r2,r2,r5
 8006b08:	898d803a 	cmpltu	r6,r17,r6
 8006b0c:	3087883a 	add	r3,r6,r2
 8006b10:	4821883a 	mov	r16,r9
 8006b14:	003ed906 	br	800667c <__alt_data_end+0xfc00667c>
 8006b18:	2984b03a 	or	r2,r5,r6
 8006b1c:	10004226 	beq	r2,zero,8006c28 <__subdf3+0x82c>
 8006b20:	1808d0fa 	srli	r4,r3,3
 8006b24:	8822d0fa 	srli	r17,r17,3
 8006b28:	1806977a 	slli	r3,r3,29
 8006b2c:	2080022c 	andhi	r2,r4,8
 8006b30:	1c62b03a 	or	r17,r3,r17
 8006b34:	10000826 	beq	r2,zero,8006b58 <__subdf3+0x75c>
 8006b38:	2812d0fa 	srli	r9,r5,3
 8006b3c:	4880022c 	andhi	r2,r9,8
 8006b40:	1000051e 	bne	r2,zero,8006b58 <__subdf3+0x75c>
 8006b44:	300cd0fa 	srli	r6,r6,3
 8006b48:	2804977a 	slli	r2,r5,29
 8006b4c:	4809883a 	mov	r4,r9
 8006b50:	3825883a 	mov	r18,r7
 8006b54:	11a2b03a 	or	r17,r2,r6
 8006b58:	8806d77a 	srli	r3,r17,29
 8006b5c:	200890fa 	slli	r4,r4,3
 8006b60:	882290fa 	slli	r17,r17,3
 8006b64:	0401ffc4 	movi	r16,2047
 8006b68:	1906b03a 	or	r3,r3,r4
 8006b6c:	003e4406 	br	8006480 <__alt_data_end+0xfc006480>
 8006b70:	2984b03a 	or	r2,r5,r6
 8006b74:	103e4226 	beq	r2,zero,8006480 <__alt_data_end+0xfc006480>
 8006b78:	8989c83a 	sub	r4,r17,r6
 8006b7c:	8911803a 	cmpltu	r8,r17,r4
 8006b80:	1945c83a 	sub	r2,r3,r5
 8006b84:	1205c83a 	sub	r2,r2,r8
 8006b88:	1200202c 	andhi	r8,r2,128
 8006b8c:	403e9a26 	beq	r8,zero,80065f8 <__alt_data_end+0xfc0065f8>
 8006b90:	3463c83a 	sub	r17,r6,r17
 8006b94:	28c5c83a 	sub	r2,r5,r3
 8006b98:	344d803a 	cmpltu	r6,r6,r17
 8006b9c:	1187c83a 	sub	r3,r2,r6
 8006ba0:	3825883a 	mov	r18,r7
 8006ba4:	003e3606 	br	8006480 <__alt_data_end+0xfc006480>
 8006ba8:	0101ffc4 	movi	r4,2047
 8006bac:	493fc71e 	bne	r9,r4,8006acc <__alt_data_end+0xfc006acc>
 8006bb0:	2807883a 	mov	r3,r5
 8006bb4:	3023883a 	mov	r17,r6
 8006bb8:	4821883a 	mov	r16,r9
 8006bbc:	003e3006 	br	8006480 <__alt_data_end+0xfc006480>
 8006bc0:	10003626 	beq	r2,zero,8006c9c <__subdf3+0x8a0>
 8006bc4:	2984b03a 	or	r2,r5,r6
 8006bc8:	10001726 	beq	r2,zero,8006c28 <__subdf3+0x82c>
 8006bcc:	1808d0fa 	srli	r4,r3,3
 8006bd0:	8822d0fa 	srli	r17,r17,3
 8006bd4:	1806977a 	slli	r3,r3,29
 8006bd8:	2080022c 	andhi	r2,r4,8
 8006bdc:	1c62b03a 	or	r17,r3,r17
 8006be0:	10000726 	beq	r2,zero,8006c00 <__subdf3+0x804>
 8006be4:	2812d0fa 	srli	r9,r5,3
 8006be8:	4880022c 	andhi	r2,r9,8
 8006bec:	1000041e 	bne	r2,zero,8006c00 <__subdf3+0x804>
 8006bf0:	300cd0fa 	srli	r6,r6,3
 8006bf4:	2804977a 	slli	r2,r5,29
 8006bf8:	4809883a 	mov	r4,r9
 8006bfc:	11a2b03a 	or	r17,r2,r6
 8006c00:	8806d77a 	srli	r3,r17,29
 8006c04:	200890fa 	slli	r4,r4,3
 8006c08:	882290fa 	slli	r17,r17,3
 8006c0c:	3825883a 	mov	r18,r7
 8006c10:	1906b03a 	or	r3,r3,r4
 8006c14:	0401ffc4 	movi	r16,2047
 8006c18:	003e1906 	br	8006480 <__alt_data_end+0xfc006480>
 8006c1c:	000b883a 	mov	r5,zero
 8006c20:	0005883a 	mov	r2,zero
 8006c24:	003e2e06 	br	80064e0 <__alt_data_end+0xfc0064e0>
 8006c28:	0401ffc4 	movi	r16,2047
 8006c2c:	003e1406 	br	8006480 <__alt_data_end+0xfc006480>
 8006c30:	0005883a 	mov	r2,zero
 8006c34:	003f7506 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006c38:	0005883a 	mov	r2,zero
 8006c3c:	0009883a 	mov	r4,zero
 8006c40:	003e7806 	br	8006624 <__alt_data_end+0xfc006624>
 8006c44:	123ff804 	addi	r8,r2,-32
 8006c48:	01000804 	movi	r4,32
 8006c4c:	1a10d83a 	srl	r8,r3,r8
 8006c50:	11002526 	beq	r2,r4,8006ce8 <__subdf3+0x8ec>
 8006c54:	01001004 	movi	r4,64
 8006c58:	2085c83a 	sub	r2,r4,r2
 8006c5c:	1884983a 	sll	r2,r3,r2
 8006c60:	1444b03a 	or	r2,r2,r17
 8006c64:	1004c03a 	cmpne	r2,r2,zero
 8006c68:	40a2b03a 	or	r17,r8,r2
 8006c6c:	0005883a 	mov	r2,zero
 8006c70:	003f1606 	br	80068cc <__alt_data_end+0xfc0068cc>
 8006c74:	02000434 	movhi	r8,16
 8006c78:	0009883a 	mov	r4,zero
 8006c7c:	423fffc4 	addi	r8,r8,-1
 8006c80:	00bfffc4 	movi	r2,-1
 8006c84:	0401ffc4 	movi	r16,2047
 8006c88:	003e6606 	br	8006624 <__alt_data_end+0xfc006624>
 8006c8c:	1c62b03a 	or	r17,r3,r17
 8006c90:	8822c03a 	cmpne	r17,r17,zero
 8006c94:	0005883a 	mov	r2,zero
 8006c98:	003f9906 	br	8006b00 <__alt_data_end+0xfc006b00>
 8006c9c:	2807883a 	mov	r3,r5
 8006ca0:	3023883a 	mov	r17,r6
 8006ca4:	0401ffc4 	movi	r16,2047
 8006ca8:	003df506 	br	8006480 <__alt_data_end+0xfc006480>
 8006cac:	2807883a 	mov	r3,r5
 8006cb0:	3023883a 	mov	r17,r6
 8006cb4:	003df206 	br	8006480 <__alt_data_end+0xfc006480>
 8006cb8:	123ff804 	addi	r8,r2,-32
 8006cbc:	01000804 	movi	r4,32
 8006cc0:	1a10d83a 	srl	r8,r3,r8
 8006cc4:	11000a26 	beq	r2,r4,8006cf0 <__subdf3+0x8f4>
 8006cc8:	01001004 	movi	r4,64
 8006ccc:	2085c83a 	sub	r2,r4,r2
 8006cd0:	1884983a 	sll	r2,r3,r2
 8006cd4:	1444b03a 	or	r2,r2,r17
 8006cd8:	1004c03a 	cmpne	r2,r2,zero
 8006cdc:	40a2b03a 	or	r17,r8,r2
 8006ce0:	0005883a 	mov	r2,zero
 8006ce4:	003f8606 	br	8006b00 <__alt_data_end+0xfc006b00>
 8006ce8:	0005883a 	mov	r2,zero
 8006cec:	003fdc06 	br	8006c60 <__alt_data_end+0xfc006c60>
 8006cf0:	0005883a 	mov	r2,zero
 8006cf4:	003ff706 	br	8006cd4 <__alt_data_end+0xfc006cd4>

08006cf8 <__fixdfsi>:
 8006cf8:	280cd53a 	srli	r6,r5,20
 8006cfc:	00c00434 	movhi	r3,16
 8006d00:	18ffffc4 	addi	r3,r3,-1
 8006d04:	3181ffcc 	andi	r6,r6,2047
 8006d08:	01c0ff84 	movi	r7,1022
 8006d0c:	28c6703a 	and	r3,r5,r3
 8006d10:	280ad7fa 	srli	r5,r5,31
 8006d14:	3980120e 	bge	r7,r6,8006d60 <__fixdfsi+0x68>
 8006d18:	00810744 	movi	r2,1053
 8006d1c:	11800c16 	blt	r2,r6,8006d50 <__fixdfsi+0x58>
 8006d20:	00810cc4 	movi	r2,1075
 8006d24:	1185c83a 	sub	r2,r2,r6
 8006d28:	01c007c4 	movi	r7,31
 8006d2c:	18c00434 	orhi	r3,r3,16
 8006d30:	38800d16 	blt	r7,r2,8006d68 <__fixdfsi+0x70>
 8006d34:	31befb44 	addi	r6,r6,-1043
 8006d38:	2084d83a 	srl	r2,r4,r2
 8006d3c:	1986983a 	sll	r3,r3,r6
 8006d40:	1884b03a 	or	r2,r3,r2
 8006d44:	28000726 	beq	r5,zero,8006d64 <__fixdfsi+0x6c>
 8006d48:	0085c83a 	sub	r2,zero,r2
 8006d4c:	f800283a 	ret
 8006d50:	00a00034 	movhi	r2,32768
 8006d54:	10bfffc4 	addi	r2,r2,-1
 8006d58:	2885883a 	add	r2,r5,r2
 8006d5c:	f800283a 	ret
 8006d60:	0005883a 	mov	r2,zero
 8006d64:	f800283a 	ret
 8006d68:	008104c4 	movi	r2,1043
 8006d6c:	1185c83a 	sub	r2,r2,r6
 8006d70:	1884d83a 	srl	r2,r3,r2
 8006d74:	003ff306 	br	8006d44 <__alt_data_end+0xfc006d44>

08006d78 <__floatsidf>:
 8006d78:	defffd04 	addi	sp,sp,-12
 8006d7c:	dfc00215 	stw	ra,8(sp)
 8006d80:	dc400115 	stw	r17,4(sp)
 8006d84:	dc000015 	stw	r16,0(sp)
 8006d88:	20002b26 	beq	r4,zero,8006e38 <__floatsidf+0xc0>
 8006d8c:	2023883a 	mov	r17,r4
 8006d90:	2020d7fa 	srli	r16,r4,31
 8006d94:	20002d16 	blt	r4,zero,8006e4c <__floatsidf+0xd4>
 8006d98:	8809883a 	mov	r4,r17
 8006d9c:	800710c0 	call	800710c <__clzsi2>
 8006da0:	01410784 	movi	r5,1054
 8006da4:	288bc83a 	sub	r5,r5,r2
 8006da8:	01010cc4 	movi	r4,1075
 8006dac:	2149c83a 	sub	r4,r4,r5
 8006db0:	00c007c4 	movi	r3,31
 8006db4:	1900160e 	bge	r3,r4,8006e10 <__floatsidf+0x98>
 8006db8:	00c104c4 	movi	r3,1043
 8006dbc:	1947c83a 	sub	r3,r3,r5
 8006dc0:	88c6983a 	sll	r3,r17,r3
 8006dc4:	00800434 	movhi	r2,16
 8006dc8:	10bfffc4 	addi	r2,r2,-1
 8006dcc:	1886703a 	and	r3,r3,r2
 8006dd0:	2941ffcc 	andi	r5,r5,2047
 8006dd4:	800d883a 	mov	r6,r16
 8006dd8:	0005883a 	mov	r2,zero
 8006ddc:	280a953a 	slli	r5,r5,20
 8006de0:	31803fcc 	andi	r6,r6,255
 8006de4:	01000434 	movhi	r4,16
 8006de8:	300c97fa 	slli	r6,r6,31
 8006dec:	213fffc4 	addi	r4,r4,-1
 8006df0:	1906703a 	and	r3,r3,r4
 8006df4:	1946b03a 	or	r3,r3,r5
 8006df8:	1986b03a 	or	r3,r3,r6
 8006dfc:	dfc00217 	ldw	ra,8(sp)
 8006e00:	dc400117 	ldw	r17,4(sp)
 8006e04:	dc000017 	ldw	r16,0(sp)
 8006e08:	dec00304 	addi	sp,sp,12
 8006e0c:	f800283a 	ret
 8006e10:	00c002c4 	movi	r3,11
 8006e14:	1887c83a 	sub	r3,r3,r2
 8006e18:	88c6d83a 	srl	r3,r17,r3
 8006e1c:	8904983a 	sll	r2,r17,r4
 8006e20:	01000434 	movhi	r4,16
 8006e24:	213fffc4 	addi	r4,r4,-1
 8006e28:	2941ffcc 	andi	r5,r5,2047
 8006e2c:	1906703a 	and	r3,r3,r4
 8006e30:	800d883a 	mov	r6,r16
 8006e34:	003fe906 	br	8006ddc <__alt_data_end+0xfc006ddc>
 8006e38:	000d883a 	mov	r6,zero
 8006e3c:	000b883a 	mov	r5,zero
 8006e40:	0007883a 	mov	r3,zero
 8006e44:	0005883a 	mov	r2,zero
 8006e48:	003fe406 	br	8006ddc <__alt_data_end+0xfc006ddc>
 8006e4c:	0123c83a 	sub	r17,zero,r4
 8006e50:	003fd106 	br	8006d98 <__alt_data_end+0xfc006d98>

08006e54 <__extendsfdf2>:
 8006e54:	200ad5fa 	srli	r5,r4,23
 8006e58:	defffd04 	addi	sp,sp,-12
 8006e5c:	dc400115 	stw	r17,4(sp)
 8006e60:	29403fcc 	andi	r5,r5,255
 8006e64:	29800044 	addi	r6,r5,1
 8006e68:	04402034 	movhi	r17,128
 8006e6c:	dc000015 	stw	r16,0(sp)
 8006e70:	8c7fffc4 	addi	r17,r17,-1
 8006e74:	dfc00215 	stw	ra,8(sp)
 8006e78:	31803fcc 	andi	r6,r6,255
 8006e7c:	00800044 	movi	r2,1
 8006e80:	8922703a 	and	r17,r17,r4
 8006e84:	2020d7fa 	srli	r16,r4,31
 8006e88:	1180110e 	bge	r2,r6,8006ed0 <__extendsfdf2+0x7c>
 8006e8c:	880cd0fa 	srli	r6,r17,3
 8006e90:	8822977a 	slli	r17,r17,29
 8006e94:	2940e004 	addi	r5,r5,896
 8006e98:	2941ffcc 	andi	r5,r5,2047
 8006e9c:	2804953a 	slli	r2,r5,20
 8006ea0:	01400434 	movhi	r5,16
 8006ea4:	800697fa 	slli	r3,r16,31
 8006ea8:	297fffc4 	addi	r5,r5,-1
 8006eac:	314a703a 	and	r5,r6,r5
 8006eb0:	288ab03a 	or	r5,r5,r2
 8006eb4:	28c6b03a 	or	r3,r5,r3
 8006eb8:	8805883a 	mov	r2,r17
 8006ebc:	dfc00217 	ldw	ra,8(sp)
 8006ec0:	dc400117 	ldw	r17,4(sp)
 8006ec4:	dc000017 	ldw	r16,0(sp)
 8006ec8:	dec00304 	addi	sp,sp,12
 8006ecc:	f800283a 	ret
 8006ed0:	2800111e 	bne	r5,zero,8006f18 <__extendsfdf2+0xc4>
 8006ed4:	88001c26 	beq	r17,zero,8006f48 <__extendsfdf2+0xf4>
 8006ed8:	8809883a 	mov	r4,r17
 8006edc:	800710c0 	call	800710c <__clzsi2>
 8006ee0:	00c00284 	movi	r3,10
 8006ee4:	18801b16 	blt	r3,r2,8006f54 <__extendsfdf2+0x100>
 8006ee8:	018002c4 	movi	r6,11
 8006eec:	308dc83a 	sub	r6,r6,r2
 8006ef0:	11000544 	addi	r4,r2,21
 8006ef4:	8986d83a 	srl	r3,r17,r6
 8006ef8:	8922983a 	sll	r17,r17,r4
 8006efc:	0180e244 	movi	r6,905
 8006f00:	01400434 	movhi	r5,16
 8006f04:	3085c83a 	sub	r2,r6,r2
 8006f08:	297fffc4 	addi	r5,r5,-1
 8006f0c:	194c703a 	and	r6,r3,r5
 8006f10:	1141ffcc 	andi	r5,r2,2047
 8006f14:	003fe006 	br	8006e98 <__alt_data_end+0xfc006e98>
 8006f18:	88000826 	beq	r17,zero,8006f3c <__extendsfdf2+0xe8>
 8006f1c:	880cd0fa 	srli	r6,r17,3
 8006f20:	00800434 	movhi	r2,16
 8006f24:	10bfffc4 	addi	r2,r2,-1
 8006f28:	31800234 	orhi	r6,r6,8
 8006f2c:	8822977a 	slli	r17,r17,29
 8006f30:	308c703a 	and	r6,r6,r2
 8006f34:	0141ffc4 	movi	r5,2047
 8006f38:	003fd706 	br	8006e98 <__alt_data_end+0xfc006e98>
 8006f3c:	0141ffc4 	movi	r5,2047
 8006f40:	000d883a 	mov	r6,zero
 8006f44:	003fd406 	br	8006e98 <__alt_data_end+0xfc006e98>
 8006f48:	000b883a 	mov	r5,zero
 8006f4c:	000d883a 	mov	r6,zero
 8006f50:	003fd106 	br	8006e98 <__alt_data_end+0xfc006e98>
 8006f54:	11bffd44 	addi	r6,r2,-11
 8006f58:	8986983a 	sll	r3,r17,r6
 8006f5c:	0023883a 	mov	r17,zero
 8006f60:	003fe606 	br	8006efc <__alt_data_end+0xfc006efc>

08006f64 <__truncdfsf2>:
 8006f64:	2810d53a 	srli	r8,r5,20
 8006f68:	01c00434 	movhi	r7,16
 8006f6c:	39ffffc4 	addi	r7,r7,-1
 8006f70:	29ce703a 	and	r7,r5,r7
 8006f74:	4201ffcc 	andi	r8,r8,2047
 8006f78:	380e90fa 	slli	r7,r7,3
 8006f7c:	200cd77a 	srli	r6,r4,29
 8006f80:	42400044 	addi	r9,r8,1
 8006f84:	4a41ffcc 	andi	r9,r9,2047
 8006f88:	00c00044 	movi	r3,1
 8006f8c:	280ad7fa 	srli	r5,r5,31
 8006f90:	31ceb03a 	or	r7,r6,r7
 8006f94:	200490fa 	slli	r2,r4,3
 8006f98:	1a40230e 	bge	r3,r9,8007028 <__truncdfsf2+0xc4>
 8006f9c:	40ff2004 	addi	r3,r8,-896
 8006fa0:	01803f84 	movi	r6,254
 8006fa4:	30c01516 	blt	r6,r3,8006ffc <__truncdfsf2+0x98>
 8006fa8:	00c0380e 	bge	zero,r3,800708c <__truncdfsf2+0x128>
 8006fac:	200c91ba 	slli	r6,r4,6
 8006fb0:	380e90fa 	slli	r7,r7,3
 8006fb4:	1004d77a 	srli	r2,r2,29
 8006fb8:	300cc03a 	cmpne	r6,r6,zero
 8006fbc:	31ccb03a 	or	r6,r6,r7
 8006fc0:	308cb03a 	or	r6,r6,r2
 8006fc4:	308001cc 	andi	r2,r6,7
 8006fc8:	10000426 	beq	r2,zero,8006fdc <__truncdfsf2+0x78>
 8006fcc:	308003cc 	andi	r2,r6,15
 8006fd0:	01000104 	movi	r4,4
 8006fd4:	11000126 	beq	r2,r4,8006fdc <__truncdfsf2+0x78>
 8006fd8:	31800104 	addi	r6,r6,4
 8006fdc:	3081002c 	andhi	r2,r6,1024
 8006fe0:	10001626 	beq	r2,zero,800703c <__truncdfsf2+0xd8>
 8006fe4:	18c00044 	addi	r3,r3,1
 8006fe8:	00803fc4 	movi	r2,255
 8006fec:	18800326 	beq	r3,r2,8006ffc <__truncdfsf2+0x98>
 8006ff0:	300c91ba 	slli	r6,r6,6
 8006ff4:	300cd27a 	srli	r6,r6,9
 8006ff8:	00000206 	br	8007004 <__truncdfsf2+0xa0>
 8006ffc:	00ffffc4 	movi	r3,-1
 8007000:	000d883a 	mov	r6,zero
 8007004:	18c03fcc 	andi	r3,r3,255
 8007008:	180895fa 	slli	r4,r3,23
 800700c:	00c02034 	movhi	r3,128
 8007010:	280a97fa 	slli	r5,r5,31
 8007014:	18ffffc4 	addi	r3,r3,-1
 8007018:	30c6703a 	and	r3,r6,r3
 800701c:	1906b03a 	or	r3,r3,r4
 8007020:	1944b03a 	or	r2,r3,r5
 8007024:	f800283a 	ret
 8007028:	40000b1e 	bne	r8,zero,8007058 <__truncdfsf2+0xf4>
 800702c:	388cb03a 	or	r6,r7,r2
 8007030:	0007883a 	mov	r3,zero
 8007034:	30000426 	beq	r6,zero,8007048 <__truncdfsf2+0xe4>
 8007038:	01800144 	movi	r6,5
 800703c:	00803fc4 	movi	r2,255
 8007040:	300cd0fa 	srli	r6,r6,3
 8007044:	18800a26 	beq	r3,r2,8007070 <__truncdfsf2+0x10c>
 8007048:	00802034 	movhi	r2,128
 800704c:	10bfffc4 	addi	r2,r2,-1
 8007050:	308c703a 	and	r6,r6,r2
 8007054:	003feb06 	br	8007004 <__alt_data_end+0xfc007004>
 8007058:	3888b03a 	or	r4,r7,r2
 800705c:	203fe726 	beq	r4,zero,8006ffc <__alt_data_end+0xfc006ffc>
 8007060:	380c90fa 	slli	r6,r7,3
 8007064:	00c03fc4 	movi	r3,255
 8007068:	31808034 	orhi	r6,r6,512
 800706c:	003fd506 	br	8006fc4 <__alt_data_end+0xfc006fc4>
 8007070:	303fe226 	beq	r6,zero,8006ffc <__alt_data_end+0xfc006ffc>
 8007074:	00802034 	movhi	r2,128
 8007078:	31801034 	orhi	r6,r6,64
 800707c:	10bfffc4 	addi	r2,r2,-1
 8007080:	00ffffc4 	movi	r3,-1
 8007084:	308c703a 	and	r6,r6,r2
 8007088:	003fde06 	br	8007004 <__alt_data_end+0xfc007004>
 800708c:	013ffa44 	movi	r4,-23
 8007090:	19000e16 	blt	r3,r4,80070cc <__truncdfsf2+0x168>
 8007094:	01000784 	movi	r4,30
 8007098:	20c9c83a 	sub	r4,r4,r3
 800709c:	018007c4 	movi	r6,31
 80070a0:	39c02034 	orhi	r7,r7,128
 80070a4:	31000b16 	blt	r6,r4,80070d4 <__truncdfsf2+0x170>
 80070a8:	423f2084 	addi	r8,r8,-894
 80070ac:	120c983a 	sll	r6,r2,r8
 80070b0:	3a0e983a 	sll	r7,r7,r8
 80070b4:	1104d83a 	srl	r2,r2,r4
 80070b8:	300cc03a 	cmpne	r6,r6,zero
 80070bc:	31ceb03a 	or	r7,r6,r7
 80070c0:	388cb03a 	or	r6,r7,r2
 80070c4:	0007883a 	mov	r3,zero
 80070c8:	003fbe06 	br	8006fc4 <__alt_data_end+0xfc006fc4>
 80070cc:	0007883a 	mov	r3,zero
 80070d0:	003fd906 	br	8007038 <__alt_data_end+0xfc007038>
 80070d4:	01bfff84 	movi	r6,-2
 80070d8:	30cdc83a 	sub	r6,r6,r3
 80070dc:	00c00804 	movi	r3,32
 80070e0:	398cd83a 	srl	r6,r7,r6
 80070e4:	20c00726 	beq	r4,r3,8007104 <__truncdfsf2+0x1a0>
 80070e8:	423f2884 	addi	r8,r8,-862
 80070ec:	3a0e983a 	sll	r7,r7,r8
 80070f0:	3884b03a 	or	r2,r7,r2
 80070f4:	1004c03a 	cmpne	r2,r2,zero
 80070f8:	118cb03a 	or	r6,r2,r6
 80070fc:	0007883a 	mov	r3,zero
 8007100:	003fb006 	br	8006fc4 <__alt_data_end+0xfc006fc4>
 8007104:	000f883a 	mov	r7,zero
 8007108:	003ff906 	br	80070f0 <__alt_data_end+0xfc0070f0>

0800710c <__clzsi2>:
 800710c:	00bfffd4 	movui	r2,65535
 8007110:	11000536 	bltu	r2,r4,8007128 <__clzsi2+0x1c>
 8007114:	00803fc4 	movi	r2,255
 8007118:	11000f36 	bltu	r2,r4,8007158 <__clzsi2+0x4c>
 800711c:	00800804 	movi	r2,32
 8007120:	0007883a 	mov	r3,zero
 8007124:	00000506 	br	800713c <__clzsi2+0x30>
 8007128:	00804034 	movhi	r2,256
 800712c:	10bfffc4 	addi	r2,r2,-1
 8007130:	11000c2e 	bgeu	r2,r4,8007164 <__clzsi2+0x58>
 8007134:	00800204 	movi	r2,8
 8007138:	00c00604 	movi	r3,24
 800713c:	20c8d83a 	srl	r4,r4,r3
 8007140:	00c20074 	movhi	r3,2049
 8007144:	18d64004 	addi	r3,r3,22784
 8007148:	1909883a 	add	r4,r3,r4
 800714c:	20c00003 	ldbu	r3,0(r4)
 8007150:	10c5c83a 	sub	r2,r2,r3
 8007154:	f800283a 	ret
 8007158:	00800604 	movi	r2,24
 800715c:	00c00204 	movi	r3,8
 8007160:	003ff606 	br	800713c <__alt_data_end+0xfc00713c>
 8007164:	00800404 	movi	r2,16
 8007168:	1007883a 	mov	r3,r2
 800716c:	003ff306 	br	800713c <__alt_data_end+0xfc00713c>

08007170 <__errno>:
 8007170:	00820074 	movhi	r2,2049
 8007174:	109df204 	addi	r2,r2,30664
 8007178:	10800017 	ldw	r2,0(r2)
 800717c:	f800283a 	ret

08007180 <_printf_r>:
 8007180:	defffd04 	addi	sp,sp,-12
 8007184:	2805883a 	mov	r2,r5
 8007188:	dfc00015 	stw	ra,0(sp)
 800718c:	d9800115 	stw	r6,4(sp)
 8007190:	d9c00215 	stw	r7,8(sp)
 8007194:	21400217 	ldw	r5,8(r4)
 8007198:	d9c00104 	addi	r7,sp,4
 800719c:	100d883a 	mov	r6,r2
 80071a0:	80073580 	call	8007358 <___vfprintf_internal_r>
 80071a4:	dfc00017 	ldw	ra,0(sp)
 80071a8:	dec00304 	addi	sp,sp,12
 80071ac:	f800283a 	ret

080071b0 <printf>:
 80071b0:	defffc04 	addi	sp,sp,-16
 80071b4:	dfc00015 	stw	ra,0(sp)
 80071b8:	d9400115 	stw	r5,4(sp)
 80071bc:	d9800215 	stw	r6,8(sp)
 80071c0:	d9c00315 	stw	r7,12(sp)
 80071c4:	00820074 	movhi	r2,2049
 80071c8:	109df204 	addi	r2,r2,30664
 80071cc:	10800017 	ldw	r2,0(r2)
 80071d0:	200b883a 	mov	r5,r4
 80071d4:	d9800104 	addi	r6,sp,4
 80071d8:	11000217 	ldw	r4,8(r2)
 80071dc:	80095500 	call	8009550 <__vfprintf_internal>
 80071e0:	dfc00017 	ldw	ra,0(sp)
 80071e4:	dec00404 	addi	sp,sp,16
 80071e8:	f800283a 	ret

080071ec <_puts_r>:
 80071ec:	defff604 	addi	sp,sp,-40
 80071f0:	dc000715 	stw	r16,28(sp)
 80071f4:	2021883a 	mov	r16,r4
 80071f8:	2809883a 	mov	r4,r5
 80071fc:	dc400815 	stw	r17,32(sp)
 8007200:	dfc00915 	stw	ra,36(sp)
 8007204:	2823883a 	mov	r17,r5
 8007208:	80072c00 	call	80072c0 <strlen>
 800720c:	10c00044 	addi	r3,r2,1
 8007210:	d8800115 	stw	r2,4(sp)
 8007214:	00820074 	movhi	r2,2049
 8007218:	10968104 	addi	r2,r2,23044
 800721c:	d8800215 	stw	r2,8(sp)
 8007220:	00800044 	movi	r2,1
 8007224:	d8800315 	stw	r2,12(sp)
 8007228:	00800084 	movi	r2,2
 800722c:	dc400015 	stw	r17,0(sp)
 8007230:	d8c00615 	stw	r3,24(sp)
 8007234:	dec00415 	stw	sp,16(sp)
 8007238:	d8800515 	stw	r2,20(sp)
 800723c:	80000226 	beq	r16,zero,8007248 <_puts_r+0x5c>
 8007240:	80800e17 	ldw	r2,56(r16)
 8007244:	10001426 	beq	r2,zero,8007298 <_puts_r+0xac>
 8007248:	81400217 	ldw	r5,8(r16)
 800724c:	2880030b 	ldhu	r2,12(r5)
 8007250:	10c8000c 	andi	r3,r2,8192
 8007254:	1800061e 	bne	r3,zero,8007270 <_puts_r+0x84>
 8007258:	29001917 	ldw	r4,100(r5)
 800725c:	00f7ffc4 	movi	r3,-8193
 8007260:	10880014 	ori	r2,r2,8192
 8007264:	20c6703a 	and	r3,r4,r3
 8007268:	2880030d 	sth	r2,12(r5)
 800726c:	28c01915 	stw	r3,100(r5)
 8007270:	d9800404 	addi	r6,sp,16
 8007274:	8009883a 	mov	r4,r16
 8007278:	800ba800 	call	800ba80 <__sfvwrite_r>
 800727c:	1000091e 	bne	r2,zero,80072a4 <_puts_r+0xb8>
 8007280:	00800284 	movi	r2,10
 8007284:	dfc00917 	ldw	ra,36(sp)
 8007288:	dc400817 	ldw	r17,32(sp)
 800728c:	dc000717 	ldw	r16,28(sp)
 8007290:	dec00a04 	addi	sp,sp,40
 8007294:	f800283a 	ret
 8007298:	8009883a 	mov	r4,r16
 800729c:	800b5fc0 	call	800b5fc <__sinit>
 80072a0:	003fe906 	br	8007248 <__alt_data_end+0xfc007248>
 80072a4:	00bfffc4 	movi	r2,-1
 80072a8:	003ff606 	br	8007284 <__alt_data_end+0xfc007284>

080072ac <puts>:
 80072ac:	00820074 	movhi	r2,2049
 80072b0:	109df204 	addi	r2,r2,30664
 80072b4:	200b883a 	mov	r5,r4
 80072b8:	11000017 	ldw	r4,0(r2)
 80072bc:	80071ec1 	jmpi	80071ec <_puts_r>

080072c0 <strlen>:
 80072c0:	208000cc 	andi	r2,r4,3
 80072c4:	10002026 	beq	r2,zero,8007348 <strlen+0x88>
 80072c8:	20800007 	ldb	r2,0(r4)
 80072cc:	10002026 	beq	r2,zero,8007350 <strlen+0x90>
 80072d0:	2005883a 	mov	r2,r4
 80072d4:	00000206 	br	80072e0 <strlen+0x20>
 80072d8:	10c00007 	ldb	r3,0(r2)
 80072dc:	18001826 	beq	r3,zero,8007340 <strlen+0x80>
 80072e0:	10800044 	addi	r2,r2,1
 80072e4:	10c000cc 	andi	r3,r2,3
 80072e8:	183ffb1e 	bne	r3,zero,80072d8 <__alt_data_end+0xfc0072d8>
 80072ec:	10c00017 	ldw	r3,0(r2)
 80072f0:	01ffbff4 	movhi	r7,65279
 80072f4:	39ffbfc4 	addi	r7,r7,-257
 80072f8:	00ca303a 	nor	r5,zero,r3
 80072fc:	01a02074 	movhi	r6,32897
 8007300:	19c7883a 	add	r3,r3,r7
 8007304:	31a02004 	addi	r6,r6,-32640
 8007308:	1946703a 	and	r3,r3,r5
 800730c:	1986703a 	and	r3,r3,r6
 8007310:	1800091e 	bne	r3,zero,8007338 <strlen+0x78>
 8007314:	10800104 	addi	r2,r2,4
 8007318:	10c00017 	ldw	r3,0(r2)
 800731c:	19cb883a 	add	r5,r3,r7
 8007320:	00c6303a 	nor	r3,zero,r3
 8007324:	28c6703a 	and	r3,r5,r3
 8007328:	1986703a 	and	r3,r3,r6
 800732c:	183ff926 	beq	r3,zero,8007314 <__alt_data_end+0xfc007314>
 8007330:	00000106 	br	8007338 <strlen+0x78>
 8007334:	10800044 	addi	r2,r2,1
 8007338:	10c00007 	ldb	r3,0(r2)
 800733c:	183ffd1e 	bne	r3,zero,8007334 <__alt_data_end+0xfc007334>
 8007340:	1105c83a 	sub	r2,r2,r4
 8007344:	f800283a 	ret
 8007348:	2005883a 	mov	r2,r4
 800734c:	003fe706 	br	80072ec <__alt_data_end+0xfc0072ec>
 8007350:	0005883a 	mov	r2,zero
 8007354:	f800283a 	ret

08007358 <___vfprintf_internal_r>:
 8007358:	deffb804 	addi	sp,sp,-288
 800735c:	dfc04715 	stw	ra,284(sp)
 8007360:	ddc04515 	stw	r23,276(sp)
 8007364:	dd404315 	stw	r21,268(sp)
 8007368:	d9002c15 	stw	r4,176(sp)
 800736c:	282f883a 	mov	r23,r5
 8007370:	302b883a 	mov	r21,r6
 8007374:	d9c02d15 	stw	r7,180(sp)
 8007378:	df004615 	stw	fp,280(sp)
 800737c:	dd804415 	stw	r22,272(sp)
 8007380:	dd004215 	stw	r20,264(sp)
 8007384:	dcc04115 	stw	r19,260(sp)
 8007388:	dc804015 	stw	r18,256(sp)
 800738c:	dc403f15 	stw	r17,252(sp)
 8007390:	dc003e15 	stw	r16,248(sp)
 8007394:	800c1700 	call	800c170 <_localeconv_r>
 8007398:	10800017 	ldw	r2,0(r2)
 800739c:	1009883a 	mov	r4,r2
 80073a0:	d8803415 	stw	r2,208(sp)
 80073a4:	80072c00 	call	80072c0 <strlen>
 80073a8:	d8803715 	stw	r2,220(sp)
 80073ac:	d8802c17 	ldw	r2,176(sp)
 80073b0:	10000226 	beq	r2,zero,80073bc <___vfprintf_internal_r+0x64>
 80073b4:	10800e17 	ldw	r2,56(r2)
 80073b8:	1000f926 	beq	r2,zero,80077a0 <___vfprintf_internal_r+0x448>
 80073bc:	b880030b 	ldhu	r2,12(r23)
 80073c0:	10c8000c 	andi	r3,r2,8192
 80073c4:	1800061e 	bne	r3,zero,80073e0 <___vfprintf_internal_r+0x88>
 80073c8:	b9001917 	ldw	r4,100(r23)
 80073cc:	00f7ffc4 	movi	r3,-8193
 80073d0:	10880014 	ori	r2,r2,8192
 80073d4:	20c6703a 	and	r3,r4,r3
 80073d8:	b880030d 	sth	r2,12(r23)
 80073dc:	b8c01915 	stw	r3,100(r23)
 80073e0:	10c0020c 	andi	r3,r2,8
 80073e4:	1800c126 	beq	r3,zero,80076ec <___vfprintf_internal_r+0x394>
 80073e8:	b8c00417 	ldw	r3,16(r23)
 80073ec:	1800bf26 	beq	r3,zero,80076ec <___vfprintf_internal_r+0x394>
 80073f0:	1080068c 	andi	r2,r2,26
 80073f4:	00c00284 	movi	r3,10
 80073f8:	10c0c426 	beq	r2,r3,800770c <___vfprintf_internal_r+0x3b4>
 80073fc:	d8c00404 	addi	r3,sp,16
 8007400:	05020074 	movhi	r20,2049
 8007404:	d9001e04 	addi	r4,sp,120
 8007408:	a5169284 	addi	r20,r20,23114
 800740c:	d8c01e15 	stw	r3,120(sp)
 8007410:	d8002015 	stw	zero,128(sp)
 8007414:	d8001f15 	stw	zero,124(sp)
 8007418:	d8003315 	stw	zero,204(sp)
 800741c:	d8003615 	stw	zero,216(sp)
 8007420:	d8003815 	stw	zero,224(sp)
 8007424:	1811883a 	mov	r8,r3
 8007428:	d8003915 	stw	zero,228(sp)
 800742c:	d8003a15 	stw	zero,232(sp)
 8007430:	d8002f15 	stw	zero,188(sp)
 8007434:	d9002815 	stw	r4,160(sp)
 8007438:	a8800007 	ldb	r2,0(r21)
 800743c:	10027b26 	beq	r2,zero,8007e2c <___vfprintf_internal_r+0xad4>
 8007440:	00c00944 	movi	r3,37
 8007444:	a821883a 	mov	r16,r21
 8007448:	10c0021e 	bne	r2,r3,8007454 <___vfprintf_internal_r+0xfc>
 800744c:	00001406 	br	80074a0 <___vfprintf_internal_r+0x148>
 8007450:	10c00326 	beq	r2,r3,8007460 <___vfprintf_internal_r+0x108>
 8007454:	84000044 	addi	r16,r16,1
 8007458:	80800007 	ldb	r2,0(r16)
 800745c:	103ffc1e 	bne	r2,zero,8007450 <__alt_data_end+0xfc007450>
 8007460:	8563c83a 	sub	r17,r16,r21
 8007464:	88000e26 	beq	r17,zero,80074a0 <___vfprintf_internal_r+0x148>
 8007468:	d8c02017 	ldw	r3,128(sp)
 800746c:	d8801f17 	ldw	r2,124(sp)
 8007470:	45400015 	stw	r21,0(r8)
 8007474:	1c47883a 	add	r3,r3,r17
 8007478:	10800044 	addi	r2,r2,1
 800747c:	d8c02015 	stw	r3,128(sp)
 8007480:	44400115 	stw	r17,4(r8)
 8007484:	d8801f15 	stw	r2,124(sp)
 8007488:	00c001c4 	movi	r3,7
 800748c:	1880a716 	blt	r3,r2,800772c <___vfprintf_internal_r+0x3d4>
 8007490:	42000204 	addi	r8,r8,8
 8007494:	d9402f17 	ldw	r5,188(sp)
 8007498:	2c4b883a 	add	r5,r5,r17
 800749c:	d9402f15 	stw	r5,188(sp)
 80074a0:	80800007 	ldb	r2,0(r16)
 80074a4:	1000a826 	beq	r2,zero,8007748 <___vfprintf_internal_r+0x3f0>
 80074a8:	84400047 	ldb	r17,1(r16)
 80074ac:	00bfffc4 	movi	r2,-1
 80074b0:	85400044 	addi	r21,r16,1
 80074b4:	d8002785 	stb	zero,158(sp)
 80074b8:	0007883a 	mov	r3,zero
 80074bc:	000f883a 	mov	r7,zero
 80074c0:	d8802915 	stw	r2,164(sp)
 80074c4:	d8003115 	stw	zero,196(sp)
 80074c8:	0025883a 	mov	r18,zero
 80074cc:	01401604 	movi	r5,88
 80074d0:	01800244 	movi	r6,9
 80074d4:	02800a84 	movi	r10,42
 80074d8:	02401b04 	movi	r9,108
 80074dc:	ad400044 	addi	r21,r21,1
 80074e0:	88bff804 	addi	r2,r17,-32
 80074e4:	28830436 	bltu	r5,r2,80080f8 <___vfprintf_internal_r+0xda0>
 80074e8:	100490ba 	slli	r2,r2,2
 80074ec:	01020034 	movhi	r4,2048
 80074f0:	211d4004 	addi	r4,r4,29952
 80074f4:	1105883a 	add	r2,r2,r4
 80074f8:	10800017 	ldw	r2,0(r2)
 80074fc:	1000683a 	jmp	r2
 8007500:	08008018 	cmpnei	zero,at,512
 8007504:	080080f8 	rdprs	zero,at,515
 8007508:	080080f8 	rdprs	zero,at,515
 800750c:	08008038 	rdprs	zero,at,512
 8007510:	080080f8 	rdprs	zero,at,515
 8007514:	080080f8 	rdprs	zero,at,515
 8007518:	080080f8 	rdprs	zero,at,515
 800751c:	080080f8 	rdprs	zero,at,515
 8007520:	080080f8 	rdprs	zero,at,515
 8007524:	080080f8 	rdprs	zero,at,515
 8007528:	080077ac 	andhi	zero,at,478
 800752c:	08007f54 	ori	zero,at,509
 8007530:	080080f8 	rdprs	zero,at,515
 8007534:	08007674 	orhi	zero,at,473
 8007538:	080077d4 	ori	zero,at,479
 800753c:	080080f8 	rdprs	zero,at,515
 8007540:	08007814 	ori	zero,at,480
 8007544:	08007820 	cmpeqi	zero,at,480
 8007548:	08007820 	cmpeqi	zero,at,480
 800754c:	08007820 	cmpeqi	zero,at,480
 8007550:	08007820 	cmpeqi	zero,at,480
 8007554:	08007820 	cmpeqi	zero,at,480
 8007558:	08007820 	cmpeqi	zero,at,480
 800755c:	08007820 	cmpeqi	zero,at,480
 8007560:	08007820 	cmpeqi	zero,at,480
 8007564:	08007820 	cmpeqi	zero,at,480
 8007568:	080080f8 	rdprs	zero,at,515
 800756c:	080080f8 	rdprs	zero,at,515
 8007570:	080080f8 	rdprs	zero,at,515
 8007574:	080080f8 	rdprs	zero,at,515
 8007578:	080080f8 	rdprs	zero,at,515
 800757c:	080080f8 	rdprs	zero,at,515
 8007580:	080080f8 	rdprs	zero,at,515
 8007584:	080080f8 	rdprs	zero,at,515
 8007588:	080080f8 	rdprs	zero,at,515
 800758c:	080080f8 	rdprs	zero,at,515
 8007590:	08007854 	ori	zero,at,481
 8007594:	08007910 	cmplti	zero,at,484
 8007598:	080080f8 	rdprs	zero,at,515
 800759c:	08007910 	cmplti	zero,at,484
 80075a0:	080080f8 	rdprs	zero,at,515
 80075a4:	080080f8 	rdprs	zero,at,515
 80075a8:	080080f8 	rdprs	zero,at,515
 80075ac:	080080f8 	rdprs	zero,at,515
 80075b0:	080079b0 	cmpltui	zero,at,486
 80075b4:	080080f8 	rdprs	zero,at,515
 80075b8:	080080f8 	rdprs	zero,at,515
 80075bc:	080079bc 	xorhi	zero,at,486
 80075c0:	080080f8 	rdprs	zero,at,515
 80075c4:	080080f8 	rdprs	zero,at,515
 80075c8:	080080f8 	rdprs	zero,at,515
 80075cc:	080080f8 	rdprs	zero,at,515
 80075d0:	080080f8 	rdprs	zero,at,515
 80075d4:	08007e34 	orhi	zero,at,504
 80075d8:	080080f8 	rdprs	zero,at,515
 80075dc:	080080f8 	rdprs	zero,at,515
 80075e0:	08007e94 	ori	zero,at,506
 80075e4:	080080f8 	rdprs	zero,at,515
 80075e8:	080080f8 	rdprs	zero,at,515
 80075ec:	080080f8 	rdprs	zero,at,515
 80075f0:	080080f8 	rdprs	zero,at,515
 80075f4:	080080f8 	rdprs	zero,at,515
 80075f8:	080080f8 	rdprs	zero,at,515
 80075fc:	080080f8 	rdprs	zero,at,515
 8007600:	080080f8 	rdprs	zero,at,515
 8007604:	080080f8 	rdprs	zero,at,515
 8007608:	080080f8 	rdprs	zero,at,515
 800760c:	080080a4 	muli	zero,at,514
 8007610:	08008044 	addi	zero,at,513
 8007614:	08007910 	cmplti	zero,at,484
 8007618:	08007910 	cmplti	zero,at,484
 800761c:	08007910 	cmplti	zero,at,484
 8007620:	08008054 	ori	zero,at,513
 8007624:	08008044 	addi	zero,at,513
 8007628:	080080f8 	rdprs	zero,at,515
 800762c:	080080f8 	rdprs	zero,at,515
 8007630:	08008060 	cmpeqi	zero,at,513
 8007634:	080080f8 	rdprs	zero,at,515
 8007638:	08008070 	cmpltui	zero,at,513
 800763c:	08007f44 	addi	zero,at,509
 8007640:	08007680 	call	800768 <__ram_exceptions_end+0x7e0520>
 8007644:	08007f64 	muli	zero,at,509
 8007648:	080080f8 	rdprs	zero,at,515
 800764c:	08007f70 	cmpltui	zero,at,509
 8007650:	080080f8 	rdprs	zero,at,515
 8007654:	08007fcc 	andi	zero,at,511
 8007658:	080080f8 	rdprs	zero,at,515
 800765c:	080080f8 	rdprs	zero,at,515
 8007660:	08007fdc 	xori	zero,at,511
 8007664:	d9003117 	ldw	r4,196(sp)
 8007668:	d8802d15 	stw	r2,180(sp)
 800766c:	0109c83a 	sub	r4,zero,r4
 8007670:	d9003115 	stw	r4,196(sp)
 8007674:	94800114 	ori	r18,r18,4
 8007678:	ac400007 	ldb	r17,0(r21)
 800767c:	003f9706 	br	80074dc <__alt_data_end+0xfc0074dc>
 8007680:	00800c04 	movi	r2,48
 8007684:	d9002d17 	ldw	r4,180(sp)
 8007688:	d9402917 	ldw	r5,164(sp)
 800768c:	d8802705 	stb	r2,156(sp)
 8007690:	00801e04 	movi	r2,120
 8007694:	d8802745 	stb	r2,157(sp)
 8007698:	d8002785 	stb	zero,158(sp)
 800769c:	20c00104 	addi	r3,r4,4
 80076a0:	24c00017 	ldw	r19,0(r4)
 80076a4:	002d883a 	mov	r22,zero
 80076a8:	90800094 	ori	r2,r18,2
 80076ac:	28029a16 	blt	r5,zero,8008118 <___vfprintf_internal_r+0xdc0>
 80076b0:	00bfdfc4 	movi	r2,-129
 80076b4:	90a4703a 	and	r18,r18,r2
 80076b8:	d8c02d15 	stw	r3,180(sp)
 80076bc:	94800094 	ori	r18,r18,2
 80076c0:	9802871e 	bne	r19,zero,80080e0 <___vfprintf_internal_r+0xd88>
 80076c4:	00820074 	movhi	r2,2049
 80076c8:	10968b04 	addi	r2,r2,23084
 80076cc:	d8803915 	stw	r2,228(sp)
 80076d0:	04401e04 	movi	r17,120
 80076d4:	d8802917 	ldw	r2,164(sp)
 80076d8:	0039883a 	mov	fp,zero
 80076dc:	1001e926 	beq	r2,zero,8007e84 <___vfprintf_internal_r+0xb2c>
 80076e0:	0027883a 	mov	r19,zero
 80076e4:	002d883a 	mov	r22,zero
 80076e8:	00020506 	br	8007f00 <___vfprintf_internal_r+0xba8>
 80076ec:	d9002c17 	ldw	r4,176(sp)
 80076f0:	b80b883a 	mov	r5,r23
 80076f4:	80096280 	call	8009628 <__swsetup_r>
 80076f8:	1005ac1e 	bne	r2,zero,8008dac <___vfprintf_internal_r+0x1a54>
 80076fc:	b880030b 	ldhu	r2,12(r23)
 8007700:	00c00284 	movi	r3,10
 8007704:	1080068c 	andi	r2,r2,26
 8007708:	10ff3c1e 	bne	r2,r3,80073fc <__alt_data_end+0xfc0073fc>
 800770c:	b880038f 	ldh	r2,14(r23)
 8007710:	103f3a16 	blt	r2,zero,80073fc <__alt_data_end+0xfc0073fc>
 8007714:	d9c02d17 	ldw	r7,180(sp)
 8007718:	d9002c17 	ldw	r4,176(sp)
 800771c:	a80d883a 	mov	r6,r21
 8007720:	b80b883a 	mov	r5,r23
 8007724:	800956c0 	call	800956c <__sbprintf>
 8007728:	00001106 	br	8007770 <___vfprintf_internal_r+0x418>
 800772c:	d9002c17 	ldw	r4,176(sp)
 8007730:	d9801e04 	addi	r6,sp,120
 8007734:	b80b883a 	mov	r5,r23
 8007738:	800e8e00 	call	800e8e0 <__sprint_r>
 800773c:	1000081e 	bne	r2,zero,8007760 <___vfprintf_internal_r+0x408>
 8007740:	da000404 	addi	r8,sp,16
 8007744:	003f5306 	br	8007494 <__alt_data_end+0xfc007494>
 8007748:	d8802017 	ldw	r2,128(sp)
 800774c:	10000426 	beq	r2,zero,8007760 <___vfprintf_internal_r+0x408>
 8007750:	d9002c17 	ldw	r4,176(sp)
 8007754:	d9801e04 	addi	r6,sp,120
 8007758:	b80b883a 	mov	r5,r23
 800775c:	800e8e00 	call	800e8e0 <__sprint_r>
 8007760:	b880030b 	ldhu	r2,12(r23)
 8007764:	1080100c 	andi	r2,r2,64
 8007768:	1005901e 	bne	r2,zero,8008dac <___vfprintf_internal_r+0x1a54>
 800776c:	d8802f17 	ldw	r2,188(sp)
 8007770:	dfc04717 	ldw	ra,284(sp)
 8007774:	df004617 	ldw	fp,280(sp)
 8007778:	ddc04517 	ldw	r23,276(sp)
 800777c:	dd804417 	ldw	r22,272(sp)
 8007780:	dd404317 	ldw	r21,268(sp)
 8007784:	dd004217 	ldw	r20,264(sp)
 8007788:	dcc04117 	ldw	r19,260(sp)
 800778c:	dc804017 	ldw	r18,256(sp)
 8007790:	dc403f17 	ldw	r17,252(sp)
 8007794:	dc003e17 	ldw	r16,248(sp)
 8007798:	dec04804 	addi	sp,sp,288
 800779c:	f800283a 	ret
 80077a0:	d9002c17 	ldw	r4,176(sp)
 80077a4:	800b5fc0 	call	800b5fc <__sinit>
 80077a8:	003f0406 	br	80073bc <__alt_data_end+0xfc0073bc>
 80077ac:	d8802d17 	ldw	r2,180(sp)
 80077b0:	d9002d17 	ldw	r4,180(sp)
 80077b4:	10800017 	ldw	r2,0(r2)
 80077b8:	d8803115 	stw	r2,196(sp)
 80077bc:	20800104 	addi	r2,r4,4
 80077c0:	d9003117 	ldw	r4,196(sp)
 80077c4:	203fa716 	blt	r4,zero,8007664 <__alt_data_end+0xfc007664>
 80077c8:	d8802d15 	stw	r2,180(sp)
 80077cc:	ac400007 	ldb	r17,0(r21)
 80077d0:	003f4206 	br	80074dc <__alt_data_end+0xfc0074dc>
 80077d4:	ac400007 	ldb	r17,0(r21)
 80077d8:	aac00044 	addi	r11,r21,1
 80077dc:	8a872826 	beq	r17,r10,8009480 <___vfprintf_internal_r+0x2128>
 80077e0:	88bff404 	addi	r2,r17,-48
 80077e4:	0009883a 	mov	r4,zero
 80077e8:	30867d36 	bltu	r6,r2,80091e0 <___vfprintf_internal_r+0x1e88>
 80077ec:	5c400007 	ldb	r17,0(r11)
 80077f0:	210002a4 	muli	r4,r4,10
 80077f4:	5d400044 	addi	r21,r11,1
 80077f8:	a817883a 	mov	r11,r21
 80077fc:	2089883a 	add	r4,r4,r2
 8007800:	88bff404 	addi	r2,r17,-48
 8007804:	30bff92e 	bgeu	r6,r2,80077ec <__alt_data_end+0xfc0077ec>
 8007808:	2005c916 	blt	r4,zero,8008f30 <___vfprintf_internal_r+0x1bd8>
 800780c:	d9002915 	stw	r4,164(sp)
 8007810:	003f3306 	br	80074e0 <__alt_data_end+0xfc0074e0>
 8007814:	94802014 	ori	r18,r18,128
 8007818:	ac400007 	ldb	r17,0(r21)
 800781c:	003f2f06 	br	80074dc <__alt_data_end+0xfc0074dc>
 8007820:	a809883a 	mov	r4,r21
 8007824:	d8003115 	stw	zero,196(sp)
 8007828:	88bff404 	addi	r2,r17,-48
 800782c:	0017883a 	mov	r11,zero
 8007830:	24400007 	ldb	r17,0(r4)
 8007834:	5ac002a4 	muli	r11,r11,10
 8007838:	ad400044 	addi	r21,r21,1
 800783c:	a809883a 	mov	r4,r21
 8007840:	12d7883a 	add	r11,r2,r11
 8007844:	88bff404 	addi	r2,r17,-48
 8007848:	30bff92e 	bgeu	r6,r2,8007830 <__alt_data_end+0xfc007830>
 800784c:	dac03115 	stw	r11,196(sp)
 8007850:	003f2306 	br	80074e0 <__alt_data_end+0xfc0074e0>
 8007854:	18c03fcc 	andi	r3,r3,255
 8007858:	18072b1e 	bne	r3,zero,8009508 <___vfprintf_internal_r+0x21b0>
 800785c:	94800414 	ori	r18,r18,16
 8007860:	9080080c 	andi	r2,r18,32
 8007864:	10037b26 	beq	r2,zero,8008654 <___vfprintf_internal_r+0x12fc>
 8007868:	d9402d17 	ldw	r5,180(sp)
 800786c:	28800117 	ldw	r2,4(r5)
 8007870:	2cc00017 	ldw	r19,0(r5)
 8007874:	29400204 	addi	r5,r5,8
 8007878:	d9402d15 	stw	r5,180(sp)
 800787c:	102d883a 	mov	r22,r2
 8007880:	10044b16 	blt	r2,zero,80089b0 <___vfprintf_internal_r+0x1658>
 8007884:	d9402917 	ldw	r5,164(sp)
 8007888:	df002783 	ldbu	fp,158(sp)
 800788c:	2803bc16 	blt	r5,zero,8008780 <___vfprintf_internal_r+0x1428>
 8007890:	00ffdfc4 	movi	r3,-129
 8007894:	9d84b03a 	or	r2,r19,r22
 8007898:	90e4703a 	and	r18,r18,r3
 800789c:	10017726 	beq	r2,zero,8007e7c <___vfprintf_internal_r+0xb24>
 80078a0:	b0038326 	beq	r22,zero,80086b0 <___vfprintf_internal_r+0x1358>
 80078a4:	dc402a15 	stw	r17,168(sp)
 80078a8:	dc001e04 	addi	r16,sp,120
 80078ac:	b023883a 	mov	r17,r22
 80078b0:	402d883a 	mov	r22,r8
 80078b4:	9809883a 	mov	r4,r19
 80078b8:	880b883a 	mov	r5,r17
 80078bc:	01800284 	movi	r6,10
 80078c0:	000f883a 	mov	r7,zero
 80078c4:	8010cd80 	call	8010cd8 <__umoddi3>
 80078c8:	10800c04 	addi	r2,r2,48
 80078cc:	843fffc4 	addi	r16,r16,-1
 80078d0:	9809883a 	mov	r4,r19
 80078d4:	880b883a 	mov	r5,r17
 80078d8:	80800005 	stb	r2,0(r16)
 80078dc:	01800284 	movi	r6,10
 80078e0:	000f883a 	mov	r7,zero
 80078e4:	80107600 	call	8010760 <__udivdi3>
 80078e8:	1027883a 	mov	r19,r2
 80078ec:	10c4b03a 	or	r2,r2,r3
 80078f0:	1823883a 	mov	r17,r3
 80078f4:	103fef1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 80078f8:	d8c02817 	ldw	r3,160(sp)
 80078fc:	dc402a17 	ldw	r17,168(sp)
 8007900:	b011883a 	mov	r8,r22
 8007904:	1c07c83a 	sub	r3,r3,r16
 8007908:	d8c02e15 	stw	r3,184(sp)
 800790c:	00005906 	br	8007a74 <___vfprintf_internal_r+0x71c>
 8007910:	18c03fcc 	andi	r3,r3,255
 8007914:	1806fa1e 	bne	r3,zero,8009500 <___vfprintf_internal_r+0x21a8>
 8007918:	9080020c 	andi	r2,r18,8
 800791c:	10048a26 	beq	r2,zero,8008b48 <___vfprintf_internal_r+0x17f0>
 8007920:	d8c02d17 	ldw	r3,180(sp)
 8007924:	d9002d17 	ldw	r4,180(sp)
 8007928:	d9402d17 	ldw	r5,180(sp)
 800792c:	18c00017 	ldw	r3,0(r3)
 8007930:	21000117 	ldw	r4,4(r4)
 8007934:	29400204 	addi	r5,r5,8
 8007938:	d8c03615 	stw	r3,216(sp)
 800793c:	d9003815 	stw	r4,224(sp)
 8007940:	d9402d15 	stw	r5,180(sp)
 8007944:	d9003617 	ldw	r4,216(sp)
 8007948:	d9403817 	ldw	r5,224(sp)
 800794c:	da003d15 	stw	r8,244(sp)
 8007950:	04000044 	movi	r16,1
 8007954:	80030100 	call	8003010 <__fpclassifyd>
 8007958:	da003d17 	ldw	r8,244(sp)
 800795c:	14041f1e 	bne	r2,r16,80089dc <___vfprintf_internal_r+0x1684>
 8007960:	d9003617 	ldw	r4,216(sp)
 8007964:	d9403817 	ldw	r5,224(sp)
 8007968:	000d883a 	mov	r6,zero
 800796c:	000f883a 	mov	r7,zero
 8007970:	8005bf00 	call	8005bf0 <__ledf2>
 8007974:	da003d17 	ldw	r8,244(sp)
 8007978:	1005be16 	blt	r2,zero,8009074 <___vfprintf_internal_r+0x1d1c>
 800797c:	df002783 	ldbu	fp,158(sp)
 8007980:	008011c4 	movi	r2,71
 8007984:	1445330e 	bge	r2,r17,8008e54 <___vfprintf_internal_r+0x1afc>
 8007988:	04020074 	movhi	r16,2049
 800798c:	84168304 	addi	r16,r16,23052
 8007990:	00c000c4 	movi	r3,3
 8007994:	00bfdfc4 	movi	r2,-129
 8007998:	d8c02a15 	stw	r3,168(sp)
 800799c:	90a4703a 	and	r18,r18,r2
 80079a0:	d8c02e15 	stw	r3,184(sp)
 80079a4:	d8002915 	stw	zero,164(sp)
 80079a8:	d8003215 	stw	zero,200(sp)
 80079ac:	00003706 	br	8007a8c <___vfprintf_internal_r+0x734>
 80079b0:	94800214 	ori	r18,r18,8
 80079b4:	ac400007 	ldb	r17,0(r21)
 80079b8:	003ec806 	br	80074dc <__alt_data_end+0xfc0074dc>
 80079bc:	18c03fcc 	andi	r3,r3,255
 80079c0:	1806db1e 	bne	r3,zero,8009530 <___vfprintf_internal_r+0x21d8>
 80079c4:	94800414 	ori	r18,r18,16
 80079c8:	9080080c 	andi	r2,r18,32
 80079cc:	1002d826 	beq	r2,zero,8008530 <___vfprintf_internal_r+0x11d8>
 80079d0:	d9402d17 	ldw	r5,180(sp)
 80079d4:	d8c02917 	ldw	r3,164(sp)
 80079d8:	d8002785 	stb	zero,158(sp)
 80079dc:	28800204 	addi	r2,r5,8
 80079e0:	2cc00017 	ldw	r19,0(r5)
 80079e4:	2d800117 	ldw	r22,4(r5)
 80079e8:	18048f16 	blt	r3,zero,8008c28 <___vfprintf_internal_r+0x18d0>
 80079ec:	013fdfc4 	movi	r4,-129
 80079f0:	9d86b03a 	or	r3,r19,r22
 80079f4:	d8802d15 	stw	r2,180(sp)
 80079f8:	9124703a 	and	r18,r18,r4
 80079fc:	1802d91e 	bne	r3,zero,8008564 <___vfprintf_internal_r+0x120c>
 8007a00:	d8c02917 	ldw	r3,164(sp)
 8007a04:	0039883a 	mov	fp,zero
 8007a08:	1805c326 	beq	r3,zero,8009118 <___vfprintf_internal_r+0x1dc0>
 8007a0c:	0027883a 	mov	r19,zero
 8007a10:	002d883a 	mov	r22,zero
 8007a14:	dc001e04 	addi	r16,sp,120
 8007a18:	9806d0fa 	srli	r3,r19,3
 8007a1c:	b008977a 	slli	r4,r22,29
 8007a20:	b02cd0fa 	srli	r22,r22,3
 8007a24:	9cc001cc 	andi	r19,r19,7
 8007a28:	98800c04 	addi	r2,r19,48
 8007a2c:	843fffc4 	addi	r16,r16,-1
 8007a30:	20e6b03a 	or	r19,r4,r3
 8007a34:	80800005 	stb	r2,0(r16)
 8007a38:	9d86b03a 	or	r3,r19,r22
 8007a3c:	183ff61e 	bne	r3,zero,8007a18 <__alt_data_end+0xfc007a18>
 8007a40:	90c0004c 	andi	r3,r18,1
 8007a44:	18013b26 	beq	r3,zero,8007f34 <___vfprintf_internal_r+0xbdc>
 8007a48:	10803fcc 	andi	r2,r2,255
 8007a4c:	1080201c 	xori	r2,r2,128
 8007a50:	10bfe004 	addi	r2,r2,-128
 8007a54:	00c00c04 	movi	r3,48
 8007a58:	10c13626 	beq	r2,r3,8007f34 <___vfprintf_internal_r+0xbdc>
 8007a5c:	80ffffc5 	stb	r3,-1(r16)
 8007a60:	d8c02817 	ldw	r3,160(sp)
 8007a64:	80bfffc4 	addi	r2,r16,-1
 8007a68:	1021883a 	mov	r16,r2
 8007a6c:	1887c83a 	sub	r3,r3,r2
 8007a70:	d8c02e15 	stw	r3,184(sp)
 8007a74:	d8802e17 	ldw	r2,184(sp)
 8007a78:	d9002917 	ldw	r4,164(sp)
 8007a7c:	1100010e 	bge	r2,r4,8007a84 <___vfprintf_internal_r+0x72c>
 8007a80:	2005883a 	mov	r2,r4
 8007a84:	d8802a15 	stw	r2,168(sp)
 8007a88:	d8003215 	stw	zero,200(sp)
 8007a8c:	e7003fcc 	andi	fp,fp,255
 8007a90:	e700201c 	xori	fp,fp,128
 8007a94:	e73fe004 	addi	fp,fp,-128
 8007a98:	e0000326 	beq	fp,zero,8007aa8 <___vfprintf_internal_r+0x750>
 8007a9c:	d8c02a17 	ldw	r3,168(sp)
 8007aa0:	18c00044 	addi	r3,r3,1
 8007aa4:	d8c02a15 	stw	r3,168(sp)
 8007aa8:	90c0008c 	andi	r3,r18,2
 8007aac:	d8c02b15 	stw	r3,172(sp)
 8007ab0:	18000326 	beq	r3,zero,8007ac0 <___vfprintf_internal_r+0x768>
 8007ab4:	d8c02a17 	ldw	r3,168(sp)
 8007ab8:	18c00084 	addi	r3,r3,2
 8007abc:	d8c02a15 	stw	r3,168(sp)
 8007ac0:	90c0210c 	andi	r3,r18,132
 8007ac4:	d8c03015 	stw	r3,192(sp)
 8007ac8:	1801a31e 	bne	r3,zero,8008158 <___vfprintf_internal_r+0xe00>
 8007acc:	d9003117 	ldw	r4,196(sp)
 8007ad0:	d8c02a17 	ldw	r3,168(sp)
 8007ad4:	20e7c83a 	sub	r19,r4,r3
 8007ad8:	04c19f0e 	bge	zero,r19,8008158 <___vfprintf_internal_r+0xe00>
 8007adc:	02400404 	movi	r9,16
 8007ae0:	d8c02017 	ldw	r3,128(sp)
 8007ae4:	d8801f17 	ldw	r2,124(sp)
 8007ae8:	4cc50d0e 	bge	r9,r19,8008f20 <___vfprintf_internal_r+0x1bc8>
 8007aec:	01420074 	movhi	r5,2049
 8007af0:	29569684 	addi	r5,r5,23130
 8007af4:	dc403b15 	stw	r17,236(sp)
 8007af8:	d9403515 	stw	r5,212(sp)
 8007afc:	9823883a 	mov	r17,r19
 8007b00:	482d883a 	mov	r22,r9
 8007b04:	9027883a 	mov	r19,r18
 8007b08:	070001c4 	movi	fp,7
 8007b0c:	8025883a 	mov	r18,r16
 8007b10:	dc002c17 	ldw	r16,176(sp)
 8007b14:	00000306 	br	8007b24 <___vfprintf_internal_r+0x7cc>
 8007b18:	8c7ffc04 	addi	r17,r17,-16
 8007b1c:	42000204 	addi	r8,r8,8
 8007b20:	b440130e 	bge	r22,r17,8007b70 <___vfprintf_internal_r+0x818>
 8007b24:	01020074 	movhi	r4,2049
 8007b28:	18c00404 	addi	r3,r3,16
 8007b2c:	10800044 	addi	r2,r2,1
 8007b30:	21169684 	addi	r4,r4,23130
 8007b34:	41000015 	stw	r4,0(r8)
 8007b38:	45800115 	stw	r22,4(r8)
 8007b3c:	d8c02015 	stw	r3,128(sp)
 8007b40:	d8801f15 	stw	r2,124(sp)
 8007b44:	e0bff40e 	bge	fp,r2,8007b18 <__alt_data_end+0xfc007b18>
 8007b48:	d9801e04 	addi	r6,sp,120
 8007b4c:	b80b883a 	mov	r5,r23
 8007b50:	8009883a 	mov	r4,r16
 8007b54:	800e8e00 	call	800e8e0 <__sprint_r>
 8007b58:	103f011e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8007b5c:	8c7ffc04 	addi	r17,r17,-16
 8007b60:	d8c02017 	ldw	r3,128(sp)
 8007b64:	d8801f17 	ldw	r2,124(sp)
 8007b68:	da000404 	addi	r8,sp,16
 8007b6c:	b47fed16 	blt	r22,r17,8007b24 <__alt_data_end+0xfc007b24>
 8007b70:	9021883a 	mov	r16,r18
 8007b74:	9825883a 	mov	r18,r19
 8007b78:	8827883a 	mov	r19,r17
 8007b7c:	dc403b17 	ldw	r17,236(sp)
 8007b80:	d9403517 	ldw	r5,212(sp)
 8007b84:	98c7883a 	add	r3,r19,r3
 8007b88:	10800044 	addi	r2,r2,1
 8007b8c:	41400015 	stw	r5,0(r8)
 8007b90:	44c00115 	stw	r19,4(r8)
 8007b94:	d8c02015 	stw	r3,128(sp)
 8007b98:	d8801f15 	stw	r2,124(sp)
 8007b9c:	010001c4 	movi	r4,7
 8007ba0:	2082a316 	blt	r4,r2,8008630 <___vfprintf_internal_r+0x12d8>
 8007ba4:	df002787 	ldb	fp,158(sp)
 8007ba8:	42000204 	addi	r8,r8,8
 8007bac:	e0000c26 	beq	fp,zero,8007be0 <___vfprintf_internal_r+0x888>
 8007bb0:	d8801f17 	ldw	r2,124(sp)
 8007bb4:	d9002784 	addi	r4,sp,158
 8007bb8:	18c00044 	addi	r3,r3,1
 8007bbc:	10800044 	addi	r2,r2,1
 8007bc0:	41000015 	stw	r4,0(r8)
 8007bc4:	01000044 	movi	r4,1
 8007bc8:	41000115 	stw	r4,4(r8)
 8007bcc:	d8c02015 	stw	r3,128(sp)
 8007bd0:	d8801f15 	stw	r2,124(sp)
 8007bd4:	010001c4 	movi	r4,7
 8007bd8:	20823c16 	blt	r4,r2,80084cc <___vfprintf_internal_r+0x1174>
 8007bdc:	42000204 	addi	r8,r8,8
 8007be0:	d8802b17 	ldw	r2,172(sp)
 8007be4:	10000c26 	beq	r2,zero,8007c18 <___vfprintf_internal_r+0x8c0>
 8007be8:	d8801f17 	ldw	r2,124(sp)
 8007bec:	d9002704 	addi	r4,sp,156
 8007bf0:	18c00084 	addi	r3,r3,2
 8007bf4:	10800044 	addi	r2,r2,1
 8007bf8:	41000015 	stw	r4,0(r8)
 8007bfc:	01000084 	movi	r4,2
 8007c00:	41000115 	stw	r4,4(r8)
 8007c04:	d8c02015 	stw	r3,128(sp)
 8007c08:	d8801f15 	stw	r2,124(sp)
 8007c0c:	010001c4 	movi	r4,7
 8007c10:	20823616 	blt	r4,r2,80084ec <___vfprintf_internal_r+0x1194>
 8007c14:	42000204 	addi	r8,r8,8
 8007c18:	d9003017 	ldw	r4,192(sp)
 8007c1c:	00802004 	movi	r2,128
 8007c20:	20819926 	beq	r4,r2,8008288 <___vfprintf_internal_r+0xf30>
 8007c24:	d9402917 	ldw	r5,164(sp)
 8007c28:	d8802e17 	ldw	r2,184(sp)
 8007c2c:	28adc83a 	sub	r22,r5,r2
 8007c30:	0580310e 	bge	zero,r22,8007cf8 <___vfprintf_internal_r+0x9a0>
 8007c34:	07000404 	movi	fp,16
 8007c38:	d8801f17 	ldw	r2,124(sp)
 8007c3c:	e584140e 	bge	fp,r22,8008c90 <___vfprintf_internal_r+0x1938>
 8007c40:	01420074 	movhi	r5,2049
 8007c44:	29569284 	addi	r5,r5,23114
 8007c48:	dc402915 	stw	r17,164(sp)
 8007c4c:	d9402b15 	stw	r5,172(sp)
 8007c50:	b023883a 	mov	r17,r22
 8007c54:	04c001c4 	movi	r19,7
 8007c58:	a82d883a 	mov	r22,r21
 8007c5c:	902b883a 	mov	r21,r18
 8007c60:	8025883a 	mov	r18,r16
 8007c64:	dc002c17 	ldw	r16,176(sp)
 8007c68:	00000306 	br	8007c78 <___vfprintf_internal_r+0x920>
 8007c6c:	8c7ffc04 	addi	r17,r17,-16
 8007c70:	42000204 	addi	r8,r8,8
 8007c74:	e440110e 	bge	fp,r17,8007cbc <___vfprintf_internal_r+0x964>
 8007c78:	18c00404 	addi	r3,r3,16
 8007c7c:	10800044 	addi	r2,r2,1
 8007c80:	45000015 	stw	r20,0(r8)
 8007c84:	47000115 	stw	fp,4(r8)
 8007c88:	d8c02015 	stw	r3,128(sp)
 8007c8c:	d8801f15 	stw	r2,124(sp)
 8007c90:	98bff60e 	bge	r19,r2,8007c6c <__alt_data_end+0xfc007c6c>
 8007c94:	d9801e04 	addi	r6,sp,120
 8007c98:	b80b883a 	mov	r5,r23
 8007c9c:	8009883a 	mov	r4,r16
 8007ca0:	800e8e00 	call	800e8e0 <__sprint_r>
 8007ca4:	103eae1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8007ca8:	8c7ffc04 	addi	r17,r17,-16
 8007cac:	d8c02017 	ldw	r3,128(sp)
 8007cb0:	d8801f17 	ldw	r2,124(sp)
 8007cb4:	da000404 	addi	r8,sp,16
 8007cb8:	e47fef16 	blt	fp,r17,8007c78 <__alt_data_end+0xfc007c78>
 8007cbc:	9021883a 	mov	r16,r18
 8007cc0:	a825883a 	mov	r18,r21
 8007cc4:	b02b883a 	mov	r21,r22
 8007cc8:	882d883a 	mov	r22,r17
 8007ccc:	dc402917 	ldw	r17,164(sp)
 8007cd0:	d9002b17 	ldw	r4,172(sp)
 8007cd4:	1d87883a 	add	r3,r3,r22
 8007cd8:	10800044 	addi	r2,r2,1
 8007cdc:	41000015 	stw	r4,0(r8)
 8007ce0:	45800115 	stw	r22,4(r8)
 8007ce4:	d8c02015 	stw	r3,128(sp)
 8007ce8:	d8801f15 	stw	r2,124(sp)
 8007cec:	010001c4 	movi	r4,7
 8007cf0:	2081ee16 	blt	r4,r2,80084ac <___vfprintf_internal_r+0x1154>
 8007cf4:	42000204 	addi	r8,r8,8
 8007cf8:	9080400c 	andi	r2,r18,256
 8007cfc:	1001181e 	bne	r2,zero,8008160 <___vfprintf_internal_r+0xe08>
 8007d00:	d9402e17 	ldw	r5,184(sp)
 8007d04:	d8801f17 	ldw	r2,124(sp)
 8007d08:	44000015 	stw	r16,0(r8)
 8007d0c:	1947883a 	add	r3,r3,r5
 8007d10:	10800044 	addi	r2,r2,1
 8007d14:	41400115 	stw	r5,4(r8)
 8007d18:	d8c02015 	stw	r3,128(sp)
 8007d1c:	d8801f15 	stw	r2,124(sp)
 8007d20:	010001c4 	movi	r4,7
 8007d24:	2081d316 	blt	r4,r2,8008474 <___vfprintf_internal_r+0x111c>
 8007d28:	42000204 	addi	r8,r8,8
 8007d2c:	9480010c 	andi	r18,r18,4
 8007d30:	90003226 	beq	r18,zero,8007dfc <___vfprintf_internal_r+0xaa4>
 8007d34:	d9403117 	ldw	r5,196(sp)
 8007d38:	d8802a17 	ldw	r2,168(sp)
 8007d3c:	28a1c83a 	sub	r16,r5,r2
 8007d40:	04002e0e 	bge	zero,r16,8007dfc <___vfprintf_internal_r+0xaa4>
 8007d44:	04400404 	movi	r17,16
 8007d48:	d8801f17 	ldw	r2,124(sp)
 8007d4c:	8c04a20e 	bge	r17,r16,8008fd8 <___vfprintf_internal_r+0x1c80>
 8007d50:	01420074 	movhi	r5,2049
 8007d54:	29569684 	addi	r5,r5,23130
 8007d58:	d9403515 	stw	r5,212(sp)
 8007d5c:	048001c4 	movi	r18,7
 8007d60:	dcc02c17 	ldw	r19,176(sp)
 8007d64:	00000306 	br	8007d74 <___vfprintf_internal_r+0xa1c>
 8007d68:	843ffc04 	addi	r16,r16,-16
 8007d6c:	42000204 	addi	r8,r8,8
 8007d70:	8c00130e 	bge	r17,r16,8007dc0 <___vfprintf_internal_r+0xa68>
 8007d74:	01020074 	movhi	r4,2049
 8007d78:	18c00404 	addi	r3,r3,16
 8007d7c:	10800044 	addi	r2,r2,1
 8007d80:	21169684 	addi	r4,r4,23130
 8007d84:	41000015 	stw	r4,0(r8)
 8007d88:	44400115 	stw	r17,4(r8)
 8007d8c:	d8c02015 	stw	r3,128(sp)
 8007d90:	d8801f15 	stw	r2,124(sp)
 8007d94:	90bff40e 	bge	r18,r2,8007d68 <__alt_data_end+0xfc007d68>
 8007d98:	d9801e04 	addi	r6,sp,120
 8007d9c:	b80b883a 	mov	r5,r23
 8007da0:	9809883a 	mov	r4,r19
 8007da4:	800e8e00 	call	800e8e0 <__sprint_r>
 8007da8:	103e6d1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8007dac:	843ffc04 	addi	r16,r16,-16
 8007db0:	d8c02017 	ldw	r3,128(sp)
 8007db4:	d8801f17 	ldw	r2,124(sp)
 8007db8:	da000404 	addi	r8,sp,16
 8007dbc:	8c3fed16 	blt	r17,r16,8007d74 <__alt_data_end+0xfc007d74>
 8007dc0:	d9403517 	ldw	r5,212(sp)
 8007dc4:	1c07883a 	add	r3,r3,r16
 8007dc8:	10800044 	addi	r2,r2,1
 8007dcc:	41400015 	stw	r5,0(r8)
 8007dd0:	44000115 	stw	r16,4(r8)
 8007dd4:	d8c02015 	stw	r3,128(sp)
 8007dd8:	d8801f15 	stw	r2,124(sp)
 8007ddc:	010001c4 	movi	r4,7
 8007de0:	2080060e 	bge	r4,r2,8007dfc <___vfprintf_internal_r+0xaa4>
 8007de4:	d9002c17 	ldw	r4,176(sp)
 8007de8:	d9801e04 	addi	r6,sp,120
 8007dec:	b80b883a 	mov	r5,r23
 8007df0:	800e8e00 	call	800e8e0 <__sprint_r>
 8007df4:	103e5a1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8007df8:	d8c02017 	ldw	r3,128(sp)
 8007dfc:	d8803117 	ldw	r2,196(sp)
 8007e00:	d9002a17 	ldw	r4,168(sp)
 8007e04:	1100010e 	bge	r2,r4,8007e0c <___vfprintf_internal_r+0xab4>
 8007e08:	2005883a 	mov	r2,r4
 8007e0c:	d9402f17 	ldw	r5,188(sp)
 8007e10:	288b883a 	add	r5,r5,r2
 8007e14:	d9402f15 	stw	r5,188(sp)
 8007e18:	18019e1e 	bne	r3,zero,8008494 <___vfprintf_internal_r+0x113c>
 8007e1c:	a8800007 	ldb	r2,0(r21)
 8007e20:	d8001f15 	stw	zero,124(sp)
 8007e24:	da000404 	addi	r8,sp,16
 8007e28:	103d851e 	bne	r2,zero,8007440 <__alt_data_end+0xfc007440>
 8007e2c:	a821883a 	mov	r16,r21
 8007e30:	003d9b06 	br	80074a0 <__alt_data_end+0xfc0074a0>
 8007e34:	18c03fcc 	andi	r3,r3,255
 8007e38:	1805c11e 	bne	r3,zero,8009540 <___vfprintf_internal_r+0x21e8>
 8007e3c:	94800414 	ori	r18,r18,16
 8007e40:	9080080c 	andi	r2,r18,32
 8007e44:	10020c26 	beq	r2,zero,8008678 <___vfprintf_internal_r+0x1320>
 8007e48:	d8802d17 	ldw	r2,180(sp)
 8007e4c:	d9002917 	ldw	r4,164(sp)
 8007e50:	d8002785 	stb	zero,158(sp)
 8007e54:	10c00204 	addi	r3,r2,8
 8007e58:	14c00017 	ldw	r19,0(r2)
 8007e5c:	15800117 	ldw	r22,4(r2)
 8007e60:	20040f16 	blt	r4,zero,8008ea0 <___vfprintf_internal_r+0x1b48>
 8007e64:	013fdfc4 	movi	r4,-129
 8007e68:	9d84b03a 	or	r2,r19,r22
 8007e6c:	d8c02d15 	stw	r3,180(sp)
 8007e70:	9124703a 	and	r18,r18,r4
 8007e74:	0039883a 	mov	fp,zero
 8007e78:	103e891e 	bne	r2,zero,80078a0 <__alt_data_end+0xfc0078a0>
 8007e7c:	d9002917 	ldw	r4,164(sp)
 8007e80:	2002c11e 	bne	r4,zero,8008988 <___vfprintf_internal_r+0x1630>
 8007e84:	d8002915 	stw	zero,164(sp)
 8007e88:	d8002e15 	stw	zero,184(sp)
 8007e8c:	dc001e04 	addi	r16,sp,120
 8007e90:	003ef806 	br	8007a74 <__alt_data_end+0xfc007a74>
 8007e94:	18c03fcc 	andi	r3,r3,255
 8007e98:	18059d1e 	bne	r3,zero,8009510 <___vfprintf_internal_r+0x21b8>
 8007e9c:	01420074 	movhi	r5,2049
 8007ea0:	29568604 	addi	r5,r5,23064
 8007ea4:	d9403915 	stw	r5,228(sp)
 8007ea8:	9080080c 	andi	r2,r18,32
 8007eac:	10005226 	beq	r2,zero,8007ff8 <___vfprintf_internal_r+0xca0>
 8007eb0:	d8802d17 	ldw	r2,180(sp)
 8007eb4:	14c00017 	ldw	r19,0(r2)
 8007eb8:	15800117 	ldw	r22,4(r2)
 8007ebc:	10800204 	addi	r2,r2,8
 8007ec0:	d8802d15 	stw	r2,180(sp)
 8007ec4:	9080004c 	andi	r2,r18,1
 8007ec8:	10019026 	beq	r2,zero,800850c <___vfprintf_internal_r+0x11b4>
 8007ecc:	9d84b03a 	or	r2,r19,r22
 8007ed0:	10036926 	beq	r2,zero,8008c78 <___vfprintf_internal_r+0x1920>
 8007ed4:	d8c02917 	ldw	r3,164(sp)
 8007ed8:	00800c04 	movi	r2,48
 8007edc:	d8802705 	stb	r2,156(sp)
 8007ee0:	dc402745 	stb	r17,157(sp)
 8007ee4:	d8002785 	stb	zero,158(sp)
 8007ee8:	90800094 	ori	r2,r18,2
 8007eec:	18045d16 	blt	r3,zero,8009064 <___vfprintf_internal_r+0x1d0c>
 8007ef0:	00bfdfc4 	movi	r2,-129
 8007ef4:	90a4703a 	and	r18,r18,r2
 8007ef8:	94800094 	ori	r18,r18,2
 8007efc:	0039883a 	mov	fp,zero
 8007f00:	d9003917 	ldw	r4,228(sp)
 8007f04:	dc001e04 	addi	r16,sp,120
 8007f08:	988003cc 	andi	r2,r19,15
 8007f0c:	b006973a 	slli	r3,r22,28
 8007f10:	2085883a 	add	r2,r4,r2
 8007f14:	9826d13a 	srli	r19,r19,4
 8007f18:	10800003 	ldbu	r2,0(r2)
 8007f1c:	b02cd13a 	srli	r22,r22,4
 8007f20:	843fffc4 	addi	r16,r16,-1
 8007f24:	1ce6b03a 	or	r19,r3,r19
 8007f28:	80800005 	stb	r2,0(r16)
 8007f2c:	9d84b03a 	or	r2,r19,r22
 8007f30:	103ff51e 	bne	r2,zero,8007f08 <__alt_data_end+0xfc007f08>
 8007f34:	d8c02817 	ldw	r3,160(sp)
 8007f38:	1c07c83a 	sub	r3,r3,r16
 8007f3c:	d8c02e15 	stw	r3,184(sp)
 8007f40:	003ecc06 	br	8007a74 <__alt_data_end+0xfc007a74>
 8007f44:	18c03fcc 	andi	r3,r3,255
 8007f48:	183e9f26 	beq	r3,zero,80079c8 <__alt_data_end+0xfc0079c8>
 8007f4c:	d9c02785 	stb	r7,158(sp)
 8007f50:	003e9d06 	br	80079c8 <__alt_data_end+0xfc0079c8>
 8007f54:	00c00044 	movi	r3,1
 8007f58:	01c00ac4 	movi	r7,43
 8007f5c:	ac400007 	ldb	r17,0(r21)
 8007f60:	003d5e06 	br	80074dc <__alt_data_end+0xfc0074dc>
 8007f64:	94800814 	ori	r18,r18,32
 8007f68:	ac400007 	ldb	r17,0(r21)
 8007f6c:	003d5b06 	br	80074dc <__alt_data_end+0xfc0074dc>
 8007f70:	d8c02d17 	ldw	r3,180(sp)
 8007f74:	d8002785 	stb	zero,158(sp)
 8007f78:	1c000017 	ldw	r16,0(r3)
 8007f7c:	1cc00104 	addi	r19,r3,4
 8007f80:	80041926 	beq	r16,zero,8008fe8 <___vfprintf_internal_r+0x1c90>
 8007f84:	d9002917 	ldw	r4,164(sp)
 8007f88:	2003d016 	blt	r4,zero,8008ecc <___vfprintf_internal_r+0x1b74>
 8007f8c:	200d883a 	mov	r6,r4
 8007f90:	000b883a 	mov	r5,zero
 8007f94:	8009883a 	mov	r4,r16
 8007f98:	da003d15 	stw	r8,244(sp)
 8007f9c:	800cb680 	call	800cb68 <memchr>
 8007fa0:	da003d17 	ldw	r8,244(sp)
 8007fa4:	10045426 	beq	r2,zero,80090f8 <___vfprintf_internal_r+0x1da0>
 8007fa8:	1405c83a 	sub	r2,r2,r16
 8007fac:	d8802e15 	stw	r2,184(sp)
 8007fb0:	1003cc16 	blt	r2,zero,8008ee4 <___vfprintf_internal_r+0x1b8c>
 8007fb4:	df002783 	ldbu	fp,158(sp)
 8007fb8:	d8802a15 	stw	r2,168(sp)
 8007fbc:	dcc02d15 	stw	r19,180(sp)
 8007fc0:	d8002915 	stw	zero,164(sp)
 8007fc4:	d8003215 	stw	zero,200(sp)
 8007fc8:	003eb006 	br	8007a8c <__alt_data_end+0xfc007a8c>
 8007fcc:	18c03fcc 	andi	r3,r3,255
 8007fd0:	183f9b26 	beq	r3,zero,8007e40 <__alt_data_end+0xfc007e40>
 8007fd4:	d9c02785 	stb	r7,158(sp)
 8007fd8:	003f9906 	br	8007e40 <__alt_data_end+0xfc007e40>
 8007fdc:	18c03fcc 	andi	r3,r3,255
 8007fe0:	1805551e 	bne	r3,zero,8009538 <___vfprintf_internal_r+0x21e0>
 8007fe4:	01420074 	movhi	r5,2049
 8007fe8:	29568b04 	addi	r5,r5,23084
 8007fec:	d9403915 	stw	r5,228(sp)
 8007ff0:	9080080c 	andi	r2,r18,32
 8007ff4:	103fae1e 	bne	r2,zero,8007eb0 <__alt_data_end+0xfc007eb0>
 8007ff8:	9080040c 	andi	r2,r18,16
 8007ffc:	1002de26 	beq	r2,zero,8008b78 <___vfprintf_internal_r+0x1820>
 8008000:	d8c02d17 	ldw	r3,180(sp)
 8008004:	002d883a 	mov	r22,zero
 8008008:	1cc00017 	ldw	r19,0(r3)
 800800c:	18c00104 	addi	r3,r3,4
 8008010:	d8c02d15 	stw	r3,180(sp)
 8008014:	003fab06 	br	8007ec4 <__alt_data_end+0xfc007ec4>
 8008018:	38803fcc 	andi	r2,r7,255
 800801c:	1080201c 	xori	r2,r2,128
 8008020:	10bfe004 	addi	r2,r2,-128
 8008024:	1002d21e 	bne	r2,zero,8008b70 <___vfprintf_internal_r+0x1818>
 8008028:	00c00044 	movi	r3,1
 800802c:	01c00804 	movi	r7,32
 8008030:	ac400007 	ldb	r17,0(r21)
 8008034:	003d2906 	br	80074dc <__alt_data_end+0xfc0074dc>
 8008038:	94800054 	ori	r18,r18,1
 800803c:	ac400007 	ldb	r17,0(r21)
 8008040:	003d2606 	br	80074dc <__alt_data_end+0xfc0074dc>
 8008044:	18c03fcc 	andi	r3,r3,255
 8008048:	183e0526 	beq	r3,zero,8007860 <__alt_data_end+0xfc007860>
 800804c:	d9c02785 	stb	r7,158(sp)
 8008050:	003e0306 	br	8007860 <__alt_data_end+0xfc007860>
 8008054:	94801014 	ori	r18,r18,64
 8008058:	ac400007 	ldb	r17,0(r21)
 800805c:	003d1f06 	br	80074dc <__alt_data_end+0xfc0074dc>
 8008060:	ac400007 	ldb	r17,0(r21)
 8008064:	8a438726 	beq	r17,r9,8008e84 <___vfprintf_internal_r+0x1b2c>
 8008068:	94800414 	ori	r18,r18,16
 800806c:	003d1b06 	br	80074dc <__alt_data_end+0xfc0074dc>
 8008070:	18c03fcc 	andi	r3,r3,255
 8008074:	1805341e 	bne	r3,zero,8009548 <___vfprintf_internal_r+0x21f0>
 8008078:	9080080c 	andi	r2,r18,32
 800807c:	1002cd26 	beq	r2,zero,8008bb4 <___vfprintf_internal_r+0x185c>
 8008080:	d9402d17 	ldw	r5,180(sp)
 8008084:	d9002f17 	ldw	r4,188(sp)
 8008088:	28800017 	ldw	r2,0(r5)
 800808c:	2007d7fa 	srai	r3,r4,31
 8008090:	29400104 	addi	r5,r5,4
 8008094:	d9402d15 	stw	r5,180(sp)
 8008098:	11000015 	stw	r4,0(r2)
 800809c:	10c00115 	stw	r3,4(r2)
 80080a0:	003ce506 	br	8007438 <__alt_data_end+0xfc007438>
 80080a4:	d8c02d17 	ldw	r3,180(sp)
 80080a8:	d9002d17 	ldw	r4,180(sp)
 80080ac:	d8002785 	stb	zero,158(sp)
 80080b0:	18800017 	ldw	r2,0(r3)
 80080b4:	21000104 	addi	r4,r4,4
 80080b8:	00c00044 	movi	r3,1
 80080bc:	d8c02a15 	stw	r3,168(sp)
 80080c0:	d8801405 	stb	r2,80(sp)
 80080c4:	d9002d15 	stw	r4,180(sp)
 80080c8:	d8c02e15 	stw	r3,184(sp)
 80080cc:	d8002915 	stw	zero,164(sp)
 80080d0:	d8003215 	stw	zero,200(sp)
 80080d4:	dc001404 	addi	r16,sp,80
 80080d8:	0039883a 	mov	fp,zero
 80080dc:	003e7206 	br	8007aa8 <__alt_data_end+0xfc007aa8>
 80080e0:	01020074 	movhi	r4,2049
 80080e4:	21168b04 	addi	r4,r4,23084
 80080e8:	0039883a 	mov	fp,zero
 80080ec:	d9003915 	stw	r4,228(sp)
 80080f0:	04401e04 	movi	r17,120
 80080f4:	003f8206 	br	8007f00 <__alt_data_end+0xfc007f00>
 80080f8:	18c03fcc 	andi	r3,r3,255
 80080fc:	1805061e 	bne	r3,zero,8009518 <___vfprintf_internal_r+0x21c0>
 8008100:	883d9126 	beq	r17,zero,8007748 <__alt_data_end+0xfc007748>
 8008104:	00c00044 	movi	r3,1
 8008108:	d8c02a15 	stw	r3,168(sp)
 800810c:	dc401405 	stb	r17,80(sp)
 8008110:	d8002785 	stb	zero,158(sp)
 8008114:	003fec06 	br	80080c8 <__alt_data_end+0xfc0080c8>
 8008118:	01420074 	movhi	r5,2049
 800811c:	29568b04 	addi	r5,r5,23084
 8008120:	d9403915 	stw	r5,228(sp)
 8008124:	d8c02d15 	stw	r3,180(sp)
 8008128:	1025883a 	mov	r18,r2
 800812c:	04401e04 	movi	r17,120
 8008130:	9d84b03a 	or	r2,r19,r22
 8008134:	1000fc1e 	bne	r2,zero,8008528 <___vfprintf_internal_r+0x11d0>
 8008138:	0039883a 	mov	fp,zero
 800813c:	00800084 	movi	r2,2
 8008140:	10803fcc 	andi	r2,r2,255
 8008144:	00c00044 	movi	r3,1
 8008148:	10c20f26 	beq	r2,r3,8008988 <___vfprintf_internal_r+0x1630>
 800814c:	00c00084 	movi	r3,2
 8008150:	10fd6326 	beq	r2,r3,80076e0 <__alt_data_end+0xfc0076e0>
 8008154:	003e2d06 	br	8007a0c <__alt_data_end+0xfc007a0c>
 8008158:	d8c02017 	ldw	r3,128(sp)
 800815c:	003e9306 	br	8007bac <__alt_data_end+0xfc007bac>
 8008160:	00801944 	movi	r2,101
 8008164:	14407e0e 	bge	r2,r17,8008360 <___vfprintf_internal_r+0x1008>
 8008168:	d9003617 	ldw	r4,216(sp)
 800816c:	d9403817 	ldw	r5,224(sp)
 8008170:	000d883a 	mov	r6,zero
 8008174:	000f883a 	mov	r7,zero
 8008178:	d8c03c15 	stw	r3,240(sp)
 800817c:	da003d15 	stw	r8,244(sp)
 8008180:	8005a8c0 	call	8005a8c <__eqdf2>
 8008184:	d8c03c17 	ldw	r3,240(sp)
 8008188:	da003d17 	ldw	r8,244(sp)
 800818c:	1000f71e 	bne	r2,zero,800856c <___vfprintf_internal_r+0x1214>
 8008190:	d8801f17 	ldw	r2,124(sp)
 8008194:	01020074 	movhi	r4,2049
 8008198:	21169204 	addi	r4,r4,23112
 800819c:	18c00044 	addi	r3,r3,1
 80081a0:	10800044 	addi	r2,r2,1
 80081a4:	41000015 	stw	r4,0(r8)
 80081a8:	01000044 	movi	r4,1
 80081ac:	41000115 	stw	r4,4(r8)
 80081b0:	d8c02015 	stw	r3,128(sp)
 80081b4:	d8801f15 	stw	r2,124(sp)
 80081b8:	010001c4 	movi	r4,7
 80081bc:	2082b816 	blt	r4,r2,8008ca0 <___vfprintf_internal_r+0x1948>
 80081c0:	42000204 	addi	r8,r8,8
 80081c4:	d8802617 	ldw	r2,152(sp)
 80081c8:	d9403317 	ldw	r5,204(sp)
 80081cc:	11400216 	blt	r2,r5,80081d8 <___vfprintf_internal_r+0xe80>
 80081d0:	9080004c 	andi	r2,r18,1
 80081d4:	103ed526 	beq	r2,zero,8007d2c <__alt_data_end+0xfc007d2c>
 80081d8:	d8803717 	ldw	r2,220(sp)
 80081dc:	d9003417 	ldw	r4,208(sp)
 80081e0:	d9403717 	ldw	r5,220(sp)
 80081e4:	1887883a 	add	r3,r3,r2
 80081e8:	d8801f17 	ldw	r2,124(sp)
 80081ec:	41000015 	stw	r4,0(r8)
 80081f0:	41400115 	stw	r5,4(r8)
 80081f4:	10800044 	addi	r2,r2,1
 80081f8:	d8c02015 	stw	r3,128(sp)
 80081fc:	d8801f15 	stw	r2,124(sp)
 8008200:	010001c4 	movi	r4,7
 8008204:	20832916 	blt	r4,r2,8008eac <___vfprintf_internal_r+0x1b54>
 8008208:	42000204 	addi	r8,r8,8
 800820c:	d8803317 	ldw	r2,204(sp)
 8008210:	143fffc4 	addi	r16,r2,-1
 8008214:	043ec50e 	bge	zero,r16,8007d2c <__alt_data_end+0xfc007d2c>
 8008218:	04400404 	movi	r17,16
 800821c:	d8801f17 	ldw	r2,124(sp)
 8008220:	8c00880e 	bge	r17,r16,8008444 <___vfprintf_internal_r+0x10ec>
 8008224:	01420074 	movhi	r5,2049
 8008228:	29569284 	addi	r5,r5,23114
 800822c:	d9402b15 	stw	r5,172(sp)
 8008230:	058001c4 	movi	r22,7
 8008234:	dcc02c17 	ldw	r19,176(sp)
 8008238:	00000306 	br	8008248 <___vfprintf_internal_r+0xef0>
 800823c:	42000204 	addi	r8,r8,8
 8008240:	843ffc04 	addi	r16,r16,-16
 8008244:	8c00820e 	bge	r17,r16,8008450 <___vfprintf_internal_r+0x10f8>
 8008248:	18c00404 	addi	r3,r3,16
 800824c:	10800044 	addi	r2,r2,1
 8008250:	45000015 	stw	r20,0(r8)
 8008254:	44400115 	stw	r17,4(r8)
 8008258:	d8c02015 	stw	r3,128(sp)
 800825c:	d8801f15 	stw	r2,124(sp)
 8008260:	b0bff60e 	bge	r22,r2,800823c <__alt_data_end+0xfc00823c>
 8008264:	d9801e04 	addi	r6,sp,120
 8008268:	b80b883a 	mov	r5,r23
 800826c:	9809883a 	mov	r4,r19
 8008270:	800e8e00 	call	800e8e0 <__sprint_r>
 8008274:	103d3a1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008278:	d8c02017 	ldw	r3,128(sp)
 800827c:	d8801f17 	ldw	r2,124(sp)
 8008280:	da000404 	addi	r8,sp,16
 8008284:	003fee06 	br	8008240 <__alt_data_end+0xfc008240>
 8008288:	d9403117 	ldw	r5,196(sp)
 800828c:	d8802a17 	ldw	r2,168(sp)
 8008290:	28adc83a 	sub	r22,r5,r2
 8008294:	05be630e 	bge	zero,r22,8007c24 <__alt_data_end+0xfc007c24>
 8008298:	07000404 	movi	fp,16
 800829c:	d8801f17 	ldw	r2,124(sp)
 80082a0:	e5838f0e 	bge	fp,r22,80090e0 <___vfprintf_internal_r+0x1d88>
 80082a4:	01420074 	movhi	r5,2049
 80082a8:	29569284 	addi	r5,r5,23114
 80082ac:	dc403015 	stw	r17,192(sp)
 80082b0:	d9402b15 	stw	r5,172(sp)
 80082b4:	b023883a 	mov	r17,r22
 80082b8:	04c001c4 	movi	r19,7
 80082bc:	a82d883a 	mov	r22,r21
 80082c0:	902b883a 	mov	r21,r18
 80082c4:	8025883a 	mov	r18,r16
 80082c8:	dc002c17 	ldw	r16,176(sp)
 80082cc:	00000306 	br	80082dc <___vfprintf_internal_r+0xf84>
 80082d0:	8c7ffc04 	addi	r17,r17,-16
 80082d4:	42000204 	addi	r8,r8,8
 80082d8:	e440110e 	bge	fp,r17,8008320 <___vfprintf_internal_r+0xfc8>
 80082dc:	18c00404 	addi	r3,r3,16
 80082e0:	10800044 	addi	r2,r2,1
 80082e4:	45000015 	stw	r20,0(r8)
 80082e8:	47000115 	stw	fp,4(r8)
 80082ec:	d8c02015 	stw	r3,128(sp)
 80082f0:	d8801f15 	stw	r2,124(sp)
 80082f4:	98bff60e 	bge	r19,r2,80082d0 <__alt_data_end+0xfc0082d0>
 80082f8:	d9801e04 	addi	r6,sp,120
 80082fc:	b80b883a 	mov	r5,r23
 8008300:	8009883a 	mov	r4,r16
 8008304:	800e8e00 	call	800e8e0 <__sprint_r>
 8008308:	103d151e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 800830c:	8c7ffc04 	addi	r17,r17,-16
 8008310:	d8c02017 	ldw	r3,128(sp)
 8008314:	d8801f17 	ldw	r2,124(sp)
 8008318:	da000404 	addi	r8,sp,16
 800831c:	e47fef16 	blt	fp,r17,80082dc <__alt_data_end+0xfc0082dc>
 8008320:	9021883a 	mov	r16,r18
 8008324:	a825883a 	mov	r18,r21
 8008328:	b02b883a 	mov	r21,r22
 800832c:	882d883a 	mov	r22,r17
 8008330:	dc403017 	ldw	r17,192(sp)
 8008334:	d9002b17 	ldw	r4,172(sp)
 8008338:	1d87883a 	add	r3,r3,r22
 800833c:	10800044 	addi	r2,r2,1
 8008340:	41000015 	stw	r4,0(r8)
 8008344:	45800115 	stw	r22,4(r8)
 8008348:	d8c02015 	stw	r3,128(sp)
 800834c:	d8801f15 	stw	r2,124(sp)
 8008350:	010001c4 	movi	r4,7
 8008354:	20818e16 	blt	r4,r2,8008990 <___vfprintf_internal_r+0x1638>
 8008358:	42000204 	addi	r8,r8,8
 800835c:	003e3106 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008360:	d9403317 	ldw	r5,204(sp)
 8008364:	00800044 	movi	r2,1
 8008368:	18c00044 	addi	r3,r3,1
 800836c:	1141530e 	bge	r2,r5,80088bc <___vfprintf_internal_r+0x1564>
 8008370:	dc401f17 	ldw	r17,124(sp)
 8008374:	00800044 	movi	r2,1
 8008378:	40800115 	stw	r2,4(r8)
 800837c:	8c400044 	addi	r17,r17,1
 8008380:	44000015 	stw	r16,0(r8)
 8008384:	d8c02015 	stw	r3,128(sp)
 8008388:	dc401f15 	stw	r17,124(sp)
 800838c:	008001c4 	movi	r2,7
 8008390:	14416b16 	blt	r2,r17,8008940 <___vfprintf_internal_r+0x15e8>
 8008394:	42000204 	addi	r8,r8,8
 8008398:	d8803717 	ldw	r2,220(sp)
 800839c:	d9003417 	ldw	r4,208(sp)
 80083a0:	8c400044 	addi	r17,r17,1
 80083a4:	10c7883a 	add	r3,r2,r3
 80083a8:	40800115 	stw	r2,4(r8)
 80083ac:	41000015 	stw	r4,0(r8)
 80083b0:	d8c02015 	stw	r3,128(sp)
 80083b4:	dc401f15 	stw	r17,124(sp)
 80083b8:	008001c4 	movi	r2,7
 80083bc:	14416916 	blt	r2,r17,8008964 <___vfprintf_internal_r+0x160c>
 80083c0:	45800204 	addi	r22,r8,8
 80083c4:	d9003617 	ldw	r4,216(sp)
 80083c8:	d9403817 	ldw	r5,224(sp)
 80083cc:	000d883a 	mov	r6,zero
 80083d0:	000f883a 	mov	r7,zero
 80083d4:	d8c03c15 	stw	r3,240(sp)
 80083d8:	8005a8c0 	call	8005a8c <__eqdf2>
 80083dc:	d8c03c17 	ldw	r3,240(sp)
 80083e0:	1000bc26 	beq	r2,zero,80086d4 <___vfprintf_internal_r+0x137c>
 80083e4:	d9403317 	ldw	r5,204(sp)
 80083e8:	84000044 	addi	r16,r16,1
 80083ec:	8c400044 	addi	r17,r17,1
 80083f0:	28bfffc4 	addi	r2,r5,-1
 80083f4:	1887883a 	add	r3,r3,r2
 80083f8:	b0800115 	stw	r2,4(r22)
 80083fc:	b4000015 	stw	r16,0(r22)
 8008400:	d8c02015 	stw	r3,128(sp)
 8008404:	dc401f15 	stw	r17,124(sp)
 8008408:	008001c4 	movi	r2,7
 800840c:	14414316 	blt	r2,r17,800891c <___vfprintf_internal_r+0x15c4>
 8008410:	b5800204 	addi	r22,r22,8
 8008414:	d9003a17 	ldw	r4,232(sp)
 8008418:	df0022c4 	addi	fp,sp,139
 800841c:	8c400044 	addi	r17,r17,1
 8008420:	20c7883a 	add	r3,r4,r3
 8008424:	b7000015 	stw	fp,0(r22)
 8008428:	b1000115 	stw	r4,4(r22)
 800842c:	d8c02015 	stw	r3,128(sp)
 8008430:	dc401f15 	stw	r17,124(sp)
 8008434:	008001c4 	movi	r2,7
 8008438:	14400e16 	blt	r2,r17,8008474 <___vfprintf_internal_r+0x111c>
 800843c:	b2000204 	addi	r8,r22,8
 8008440:	003e3a06 	br	8007d2c <__alt_data_end+0xfc007d2c>
 8008444:	01020074 	movhi	r4,2049
 8008448:	21169284 	addi	r4,r4,23114
 800844c:	d9002b15 	stw	r4,172(sp)
 8008450:	d9002b17 	ldw	r4,172(sp)
 8008454:	1c07883a 	add	r3,r3,r16
 8008458:	44000115 	stw	r16,4(r8)
 800845c:	41000015 	stw	r4,0(r8)
 8008460:	10800044 	addi	r2,r2,1
 8008464:	d8c02015 	stw	r3,128(sp)
 8008468:	d8801f15 	stw	r2,124(sp)
 800846c:	010001c4 	movi	r4,7
 8008470:	20be2d0e 	bge	r4,r2,8007d28 <__alt_data_end+0xfc007d28>
 8008474:	d9002c17 	ldw	r4,176(sp)
 8008478:	d9801e04 	addi	r6,sp,120
 800847c:	b80b883a 	mov	r5,r23
 8008480:	800e8e00 	call	800e8e0 <__sprint_r>
 8008484:	103cb61e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008488:	d8c02017 	ldw	r3,128(sp)
 800848c:	da000404 	addi	r8,sp,16
 8008490:	003e2606 	br	8007d2c <__alt_data_end+0xfc007d2c>
 8008494:	d9002c17 	ldw	r4,176(sp)
 8008498:	d9801e04 	addi	r6,sp,120
 800849c:	b80b883a 	mov	r5,r23
 80084a0:	800e8e00 	call	800e8e0 <__sprint_r>
 80084a4:	103e5d26 	beq	r2,zero,8007e1c <__alt_data_end+0xfc007e1c>
 80084a8:	003cad06 	br	8007760 <__alt_data_end+0xfc007760>
 80084ac:	d9002c17 	ldw	r4,176(sp)
 80084b0:	d9801e04 	addi	r6,sp,120
 80084b4:	b80b883a 	mov	r5,r23
 80084b8:	800e8e00 	call	800e8e0 <__sprint_r>
 80084bc:	103ca81e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 80084c0:	d8c02017 	ldw	r3,128(sp)
 80084c4:	da000404 	addi	r8,sp,16
 80084c8:	003e0b06 	br	8007cf8 <__alt_data_end+0xfc007cf8>
 80084cc:	d9002c17 	ldw	r4,176(sp)
 80084d0:	d9801e04 	addi	r6,sp,120
 80084d4:	b80b883a 	mov	r5,r23
 80084d8:	800e8e00 	call	800e8e0 <__sprint_r>
 80084dc:	103ca01e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 80084e0:	d8c02017 	ldw	r3,128(sp)
 80084e4:	da000404 	addi	r8,sp,16
 80084e8:	003dbd06 	br	8007be0 <__alt_data_end+0xfc007be0>
 80084ec:	d9002c17 	ldw	r4,176(sp)
 80084f0:	d9801e04 	addi	r6,sp,120
 80084f4:	b80b883a 	mov	r5,r23
 80084f8:	800e8e00 	call	800e8e0 <__sprint_r>
 80084fc:	103c981e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008500:	d8c02017 	ldw	r3,128(sp)
 8008504:	da000404 	addi	r8,sp,16
 8008508:	003dc306 	br	8007c18 <__alt_data_end+0xfc007c18>
 800850c:	d8802917 	ldw	r2,164(sp)
 8008510:	d8002785 	stb	zero,158(sp)
 8008514:	103f0616 	blt	r2,zero,8008130 <__alt_data_end+0xfc008130>
 8008518:	00ffdfc4 	movi	r3,-129
 800851c:	9d84b03a 	or	r2,r19,r22
 8008520:	90e4703a 	and	r18,r18,r3
 8008524:	103c6b26 	beq	r2,zero,80076d4 <__alt_data_end+0xfc0076d4>
 8008528:	0039883a 	mov	fp,zero
 800852c:	003e7406 	br	8007f00 <__alt_data_end+0xfc007f00>
 8008530:	9080040c 	andi	r2,r18,16
 8008534:	1001b326 	beq	r2,zero,8008c04 <___vfprintf_internal_r+0x18ac>
 8008538:	d9002d17 	ldw	r4,180(sp)
 800853c:	d9402917 	ldw	r5,164(sp)
 8008540:	d8002785 	stb	zero,158(sp)
 8008544:	20800104 	addi	r2,r4,4
 8008548:	24c00017 	ldw	r19,0(r4)
 800854c:	002d883a 	mov	r22,zero
 8008550:	2801b516 	blt	r5,zero,8008c28 <___vfprintf_internal_r+0x18d0>
 8008554:	00ffdfc4 	movi	r3,-129
 8008558:	d8802d15 	stw	r2,180(sp)
 800855c:	90e4703a 	and	r18,r18,r3
 8008560:	983d2726 	beq	r19,zero,8007a00 <__alt_data_end+0xfc007a00>
 8008564:	0039883a 	mov	fp,zero
 8008568:	003d2a06 	br	8007a14 <__alt_data_end+0xfc007a14>
 800856c:	dc402617 	ldw	r17,152(sp)
 8008570:	0441d30e 	bge	zero,r17,8008cc0 <___vfprintf_internal_r+0x1968>
 8008574:	dc403217 	ldw	r17,200(sp)
 8008578:	d8803317 	ldw	r2,204(sp)
 800857c:	1440010e 	bge	r2,r17,8008584 <___vfprintf_internal_r+0x122c>
 8008580:	1023883a 	mov	r17,r2
 8008584:	04400a0e 	bge	zero,r17,80085b0 <___vfprintf_internal_r+0x1258>
 8008588:	d8801f17 	ldw	r2,124(sp)
 800858c:	1c47883a 	add	r3,r3,r17
 8008590:	44000015 	stw	r16,0(r8)
 8008594:	10800044 	addi	r2,r2,1
 8008598:	44400115 	stw	r17,4(r8)
 800859c:	d8c02015 	stw	r3,128(sp)
 80085a0:	d8801f15 	stw	r2,124(sp)
 80085a4:	010001c4 	movi	r4,7
 80085a8:	20826516 	blt	r4,r2,8008f40 <___vfprintf_internal_r+0x1be8>
 80085ac:	42000204 	addi	r8,r8,8
 80085b0:	88026116 	blt	r17,zero,8008f38 <___vfprintf_internal_r+0x1be0>
 80085b4:	d9003217 	ldw	r4,200(sp)
 80085b8:	2463c83a 	sub	r17,r4,r17
 80085bc:	04407b0e 	bge	zero,r17,80087ac <___vfprintf_internal_r+0x1454>
 80085c0:	05800404 	movi	r22,16
 80085c4:	d8801f17 	ldw	r2,124(sp)
 80085c8:	b4419d0e 	bge	r22,r17,8008c40 <___vfprintf_internal_r+0x18e8>
 80085cc:	01020074 	movhi	r4,2049
 80085d0:	21169284 	addi	r4,r4,23114
 80085d4:	d9002b15 	stw	r4,172(sp)
 80085d8:	070001c4 	movi	fp,7
 80085dc:	dcc02c17 	ldw	r19,176(sp)
 80085e0:	00000306 	br	80085f0 <___vfprintf_internal_r+0x1298>
 80085e4:	42000204 	addi	r8,r8,8
 80085e8:	8c7ffc04 	addi	r17,r17,-16
 80085ec:	b441970e 	bge	r22,r17,8008c4c <___vfprintf_internal_r+0x18f4>
 80085f0:	18c00404 	addi	r3,r3,16
 80085f4:	10800044 	addi	r2,r2,1
 80085f8:	45000015 	stw	r20,0(r8)
 80085fc:	45800115 	stw	r22,4(r8)
 8008600:	d8c02015 	stw	r3,128(sp)
 8008604:	d8801f15 	stw	r2,124(sp)
 8008608:	e0bff60e 	bge	fp,r2,80085e4 <__alt_data_end+0xfc0085e4>
 800860c:	d9801e04 	addi	r6,sp,120
 8008610:	b80b883a 	mov	r5,r23
 8008614:	9809883a 	mov	r4,r19
 8008618:	800e8e00 	call	800e8e0 <__sprint_r>
 800861c:	103c501e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008620:	d8c02017 	ldw	r3,128(sp)
 8008624:	d8801f17 	ldw	r2,124(sp)
 8008628:	da000404 	addi	r8,sp,16
 800862c:	003fee06 	br	80085e8 <__alt_data_end+0xfc0085e8>
 8008630:	d9002c17 	ldw	r4,176(sp)
 8008634:	d9801e04 	addi	r6,sp,120
 8008638:	b80b883a 	mov	r5,r23
 800863c:	800e8e00 	call	800e8e0 <__sprint_r>
 8008640:	103c471e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008644:	d8c02017 	ldw	r3,128(sp)
 8008648:	df002787 	ldb	fp,158(sp)
 800864c:	da000404 	addi	r8,sp,16
 8008650:	003d5606 	br	8007bac <__alt_data_end+0xfc007bac>
 8008654:	9080040c 	andi	r2,r18,16
 8008658:	10016126 	beq	r2,zero,8008be0 <___vfprintf_internal_r+0x1888>
 800865c:	d8802d17 	ldw	r2,180(sp)
 8008660:	14c00017 	ldw	r19,0(r2)
 8008664:	10800104 	addi	r2,r2,4
 8008668:	d8802d15 	stw	r2,180(sp)
 800866c:	982dd7fa 	srai	r22,r19,31
 8008670:	b005883a 	mov	r2,r22
 8008674:	003c8206 	br	8007880 <__alt_data_end+0xfc007880>
 8008678:	9080040c 	andi	r2,r18,16
 800867c:	10003526 	beq	r2,zero,8008754 <___vfprintf_internal_r+0x13fc>
 8008680:	d9402d17 	ldw	r5,180(sp)
 8008684:	d8c02917 	ldw	r3,164(sp)
 8008688:	d8002785 	stb	zero,158(sp)
 800868c:	28800104 	addi	r2,r5,4
 8008690:	2cc00017 	ldw	r19,0(r5)
 8008694:	002d883a 	mov	r22,zero
 8008698:	18003716 	blt	r3,zero,8008778 <___vfprintf_internal_r+0x1420>
 800869c:	00ffdfc4 	movi	r3,-129
 80086a0:	d8802d15 	stw	r2,180(sp)
 80086a4:	90e4703a 	and	r18,r18,r3
 80086a8:	0039883a 	mov	fp,zero
 80086ac:	983df326 	beq	r19,zero,8007e7c <__alt_data_end+0xfc007e7c>
 80086b0:	00800244 	movi	r2,9
 80086b4:	14fc7b36 	bltu	r2,r19,80078a4 <__alt_data_end+0xfc0078a4>
 80086b8:	d8c02817 	ldw	r3,160(sp)
 80086bc:	dc001dc4 	addi	r16,sp,119
 80086c0:	9cc00c04 	addi	r19,r19,48
 80086c4:	1c07c83a 	sub	r3,r3,r16
 80086c8:	dcc01dc5 	stb	r19,119(sp)
 80086cc:	d8c02e15 	stw	r3,184(sp)
 80086d0:	003ce806 	br	8007a74 <__alt_data_end+0xfc007a74>
 80086d4:	d8803317 	ldw	r2,204(sp)
 80086d8:	143fffc4 	addi	r16,r2,-1
 80086dc:	043f4d0e 	bge	zero,r16,8008414 <__alt_data_end+0xfc008414>
 80086e0:	07000404 	movi	fp,16
 80086e4:	e400810e 	bge	fp,r16,80088ec <___vfprintf_internal_r+0x1594>
 80086e8:	01420074 	movhi	r5,2049
 80086ec:	29569284 	addi	r5,r5,23114
 80086f0:	d9402b15 	stw	r5,172(sp)
 80086f4:	01c001c4 	movi	r7,7
 80086f8:	dcc02c17 	ldw	r19,176(sp)
 80086fc:	00000306 	br	800870c <___vfprintf_internal_r+0x13b4>
 8008700:	b5800204 	addi	r22,r22,8
 8008704:	843ffc04 	addi	r16,r16,-16
 8008708:	e4007b0e 	bge	fp,r16,80088f8 <___vfprintf_internal_r+0x15a0>
 800870c:	18c00404 	addi	r3,r3,16
 8008710:	8c400044 	addi	r17,r17,1
 8008714:	b5000015 	stw	r20,0(r22)
 8008718:	b7000115 	stw	fp,4(r22)
 800871c:	d8c02015 	stw	r3,128(sp)
 8008720:	dc401f15 	stw	r17,124(sp)
 8008724:	3c7ff60e 	bge	r7,r17,8008700 <__alt_data_end+0xfc008700>
 8008728:	d9801e04 	addi	r6,sp,120
 800872c:	b80b883a 	mov	r5,r23
 8008730:	9809883a 	mov	r4,r19
 8008734:	d9c03c15 	stw	r7,240(sp)
 8008738:	800e8e00 	call	800e8e0 <__sprint_r>
 800873c:	d9c03c17 	ldw	r7,240(sp)
 8008740:	103c071e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008744:	d8c02017 	ldw	r3,128(sp)
 8008748:	dc401f17 	ldw	r17,124(sp)
 800874c:	dd800404 	addi	r22,sp,16
 8008750:	003fec06 	br	8008704 <__alt_data_end+0xfc008704>
 8008754:	9080100c 	andi	r2,r18,64
 8008758:	d8002785 	stb	zero,158(sp)
 800875c:	10010e26 	beq	r2,zero,8008b98 <___vfprintf_internal_r+0x1840>
 8008760:	d9002d17 	ldw	r4,180(sp)
 8008764:	d9402917 	ldw	r5,164(sp)
 8008768:	002d883a 	mov	r22,zero
 800876c:	20800104 	addi	r2,r4,4
 8008770:	24c0000b 	ldhu	r19,0(r4)
 8008774:	283fc90e 	bge	r5,zero,800869c <__alt_data_end+0xfc00869c>
 8008778:	d8802d15 	stw	r2,180(sp)
 800877c:	0039883a 	mov	fp,zero
 8008780:	9d84b03a 	or	r2,r19,r22
 8008784:	103c461e 	bne	r2,zero,80078a0 <__alt_data_end+0xfc0078a0>
 8008788:	00800044 	movi	r2,1
 800878c:	003e6c06 	br	8008140 <__alt_data_end+0xfc008140>
 8008790:	d9002c17 	ldw	r4,176(sp)
 8008794:	d9801e04 	addi	r6,sp,120
 8008798:	b80b883a 	mov	r5,r23
 800879c:	800e8e00 	call	800e8e0 <__sprint_r>
 80087a0:	103bef1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 80087a4:	d8c02017 	ldw	r3,128(sp)
 80087a8:	da000404 	addi	r8,sp,16
 80087ac:	d9003217 	ldw	r4,200(sp)
 80087b0:	d8802617 	ldw	r2,152(sp)
 80087b4:	d9403317 	ldw	r5,204(sp)
 80087b8:	8123883a 	add	r17,r16,r4
 80087bc:	11400216 	blt	r2,r5,80087c8 <___vfprintf_internal_r+0x1470>
 80087c0:	9100004c 	andi	r4,r18,1
 80087c4:	20000d26 	beq	r4,zero,80087fc <___vfprintf_internal_r+0x14a4>
 80087c8:	d9003717 	ldw	r4,220(sp)
 80087cc:	d9403417 	ldw	r5,208(sp)
 80087d0:	1907883a 	add	r3,r3,r4
 80087d4:	d9001f17 	ldw	r4,124(sp)
 80087d8:	41400015 	stw	r5,0(r8)
 80087dc:	d9403717 	ldw	r5,220(sp)
 80087e0:	21000044 	addi	r4,r4,1
 80087e4:	d8c02015 	stw	r3,128(sp)
 80087e8:	41400115 	stw	r5,4(r8)
 80087ec:	d9001f15 	stw	r4,124(sp)
 80087f0:	014001c4 	movi	r5,7
 80087f4:	2901e816 	blt	r5,r4,8008f98 <___vfprintf_internal_r+0x1c40>
 80087f8:	42000204 	addi	r8,r8,8
 80087fc:	d9003317 	ldw	r4,204(sp)
 8008800:	8121883a 	add	r16,r16,r4
 8008804:	2085c83a 	sub	r2,r4,r2
 8008808:	8461c83a 	sub	r16,r16,r17
 800880c:	1400010e 	bge	r2,r16,8008814 <___vfprintf_internal_r+0x14bc>
 8008810:	1021883a 	mov	r16,r2
 8008814:	04000a0e 	bge	zero,r16,8008840 <___vfprintf_internal_r+0x14e8>
 8008818:	d9001f17 	ldw	r4,124(sp)
 800881c:	1c07883a 	add	r3,r3,r16
 8008820:	44400015 	stw	r17,0(r8)
 8008824:	21000044 	addi	r4,r4,1
 8008828:	44000115 	stw	r16,4(r8)
 800882c:	d8c02015 	stw	r3,128(sp)
 8008830:	d9001f15 	stw	r4,124(sp)
 8008834:	014001c4 	movi	r5,7
 8008838:	2901fb16 	blt	r5,r4,8009028 <___vfprintf_internal_r+0x1cd0>
 800883c:	42000204 	addi	r8,r8,8
 8008840:	8001f716 	blt	r16,zero,8009020 <___vfprintf_internal_r+0x1cc8>
 8008844:	1421c83a 	sub	r16,r2,r16
 8008848:	043d380e 	bge	zero,r16,8007d2c <__alt_data_end+0xfc007d2c>
 800884c:	04400404 	movi	r17,16
 8008850:	d8801f17 	ldw	r2,124(sp)
 8008854:	8c3efb0e 	bge	r17,r16,8008444 <__alt_data_end+0xfc008444>
 8008858:	01420074 	movhi	r5,2049
 800885c:	29569284 	addi	r5,r5,23114
 8008860:	d9402b15 	stw	r5,172(sp)
 8008864:	058001c4 	movi	r22,7
 8008868:	dcc02c17 	ldw	r19,176(sp)
 800886c:	00000306 	br	800887c <___vfprintf_internal_r+0x1524>
 8008870:	42000204 	addi	r8,r8,8
 8008874:	843ffc04 	addi	r16,r16,-16
 8008878:	8c3ef50e 	bge	r17,r16,8008450 <__alt_data_end+0xfc008450>
 800887c:	18c00404 	addi	r3,r3,16
 8008880:	10800044 	addi	r2,r2,1
 8008884:	45000015 	stw	r20,0(r8)
 8008888:	44400115 	stw	r17,4(r8)
 800888c:	d8c02015 	stw	r3,128(sp)
 8008890:	d8801f15 	stw	r2,124(sp)
 8008894:	b0bff60e 	bge	r22,r2,8008870 <__alt_data_end+0xfc008870>
 8008898:	d9801e04 	addi	r6,sp,120
 800889c:	b80b883a 	mov	r5,r23
 80088a0:	9809883a 	mov	r4,r19
 80088a4:	800e8e00 	call	800e8e0 <__sprint_r>
 80088a8:	103bad1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 80088ac:	d8c02017 	ldw	r3,128(sp)
 80088b0:	d8801f17 	ldw	r2,124(sp)
 80088b4:	da000404 	addi	r8,sp,16
 80088b8:	003fee06 	br	8008874 <__alt_data_end+0xfc008874>
 80088bc:	9088703a 	and	r4,r18,r2
 80088c0:	203eab1e 	bne	r4,zero,8008370 <__alt_data_end+0xfc008370>
 80088c4:	dc401f17 	ldw	r17,124(sp)
 80088c8:	40800115 	stw	r2,4(r8)
 80088cc:	44000015 	stw	r16,0(r8)
 80088d0:	8c400044 	addi	r17,r17,1
 80088d4:	d8c02015 	stw	r3,128(sp)
 80088d8:	dc401f15 	stw	r17,124(sp)
 80088dc:	008001c4 	movi	r2,7
 80088e0:	14400e16 	blt	r2,r17,800891c <___vfprintf_internal_r+0x15c4>
 80088e4:	45800204 	addi	r22,r8,8
 80088e8:	003eca06 	br	8008414 <__alt_data_end+0xfc008414>
 80088ec:	01020074 	movhi	r4,2049
 80088f0:	21169284 	addi	r4,r4,23114
 80088f4:	d9002b15 	stw	r4,172(sp)
 80088f8:	d8802b17 	ldw	r2,172(sp)
 80088fc:	1c07883a 	add	r3,r3,r16
 8008900:	8c400044 	addi	r17,r17,1
 8008904:	b0800015 	stw	r2,0(r22)
 8008908:	b4000115 	stw	r16,4(r22)
 800890c:	d8c02015 	stw	r3,128(sp)
 8008910:	dc401f15 	stw	r17,124(sp)
 8008914:	008001c4 	movi	r2,7
 8008918:	147ebd0e 	bge	r2,r17,8008410 <__alt_data_end+0xfc008410>
 800891c:	d9002c17 	ldw	r4,176(sp)
 8008920:	d9801e04 	addi	r6,sp,120
 8008924:	b80b883a 	mov	r5,r23
 8008928:	800e8e00 	call	800e8e0 <__sprint_r>
 800892c:	103b8c1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008930:	d8c02017 	ldw	r3,128(sp)
 8008934:	dc401f17 	ldw	r17,124(sp)
 8008938:	dd800404 	addi	r22,sp,16
 800893c:	003eb506 	br	8008414 <__alt_data_end+0xfc008414>
 8008940:	d9002c17 	ldw	r4,176(sp)
 8008944:	d9801e04 	addi	r6,sp,120
 8008948:	b80b883a 	mov	r5,r23
 800894c:	800e8e00 	call	800e8e0 <__sprint_r>
 8008950:	103b831e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008954:	d8c02017 	ldw	r3,128(sp)
 8008958:	dc401f17 	ldw	r17,124(sp)
 800895c:	da000404 	addi	r8,sp,16
 8008960:	003e8d06 	br	8008398 <__alt_data_end+0xfc008398>
 8008964:	d9002c17 	ldw	r4,176(sp)
 8008968:	d9801e04 	addi	r6,sp,120
 800896c:	b80b883a 	mov	r5,r23
 8008970:	800e8e00 	call	800e8e0 <__sprint_r>
 8008974:	103b7a1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008978:	d8c02017 	ldw	r3,128(sp)
 800897c:	dc401f17 	ldw	r17,124(sp)
 8008980:	dd800404 	addi	r22,sp,16
 8008984:	003e8f06 	br	80083c4 <__alt_data_end+0xfc0083c4>
 8008988:	0027883a 	mov	r19,zero
 800898c:	003f4a06 	br	80086b8 <__alt_data_end+0xfc0086b8>
 8008990:	d9002c17 	ldw	r4,176(sp)
 8008994:	d9801e04 	addi	r6,sp,120
 8008998:	b80b883a 	mov	r5,r23
 800899c:	800e8e00 	call	800e8e0 <__sprint_r>
 80089a0:	103b6f1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 80089a4:	d8c02017 	ldw	r3,128(sp)
 80089a8:	da000404 	addi	r8,sp,16
 80089ac:	003c9d06 	br	8007c24 <__alt_data_end+0xfc007c24>
 80089b0:	04e7c83a 	sub	r19,zero,r19
 80089b4:	9804c03a 	cmpne	r2,r19,zero
 80089b8:	05adc83a 	sub	r22,zero,r22
 80089bc:	b0adc83a 	sub	r22,r22,r2
 80089c0:	d8802917 	ldw	r2,164(sp)
 80089c4:	07000b44 	movi	fp,45
 80089c8:	df002785 	stb	fp,158(sp)
 80089cc:	10017b16 	blt	r2,zero,8008fbc <___vfprintf_internal_r+0x1c64>
 80089d0:	00bfdfc4 	movi	r2,-129
 80089d4:	90a4703a 	and	r18,r18,r2
 80089d8:	003bb106 	br	80078a0 <__alt_data_end+0xfc0078a0>
 80089dc:	d9003617 	ldw	r4,216(sp)
 80089e0:	d9403817 	ldw	r5,224(sp)
 80089e4:	da003d15 	stw	r8,244(sp)
 80089e8:	80030100 	call	8003010 <__fpclassifyd>
 80089ec:	da003d17 	ldw	r8,244(sp)
 80089f0:	1000f026 	beq	r2,zero,8008db4 <___vfprintf_internal_r+0x1a5c>
 80089f4:	d9002917 	ldw	r4,164(sp)
 80089f8:	05bff7c4 	movi	r22,-33
 80089fc:	00bfffc4 	movi	r2,-1
 8008a00:	8dac703a 	and	r22,r17,r22
 8008a04:	20820026 	beq	r4,r2,8009208 <___vfprintf_internal_r+0x1eb0>
 8008a08:	008011c4 	movi	r2,71
 8008a0c:	b081f726 	beq	r22,r2,80091ec <___vfprintf_internal_r+0x1e94>
 8008a10:	d9003817 	ldw	r4,224(sp)
 8008a14:	90c04014 	ori	r3,r18,256
 8008a18:	d8c02b15 	stw	r3,172(sp)
 8008a1c:	20021516 	blt	r4,zero,8009274 <___vfprintf_internal_r+0x1f1c>
 8008a20:	dcc03817 	ldw	r19,224(sp)
 8008a24:	d8002a05 	stb	zero,168(sp)
 8008a28:	00801984 	movi	r2,102
 8008a2c:	8881f926 	beq	r17,r2,8009214 <___vfprintf_internal_r+0x1ebc>
 8008a30:	00801184 	movi	r2,70
 8008a34:	88821c26 	beq	r17,r2,80092a8 <___vfprintf_internal_r+0x1f50>
 8008a38:	00801144 	movi	r2,69
 8008a3c:	b081ef26 	beq	r22,r2,80091fc <___vfprintf_internal_r+0x1ea4>
 8008a40:	d8c02917 	ldw	r3,164(sp)
 8008a44:	d8802104 	addi	r2,sp,132
 8008a48:	d8800315 	stw	r2,12(sp)
 8008a4c:	d9403617 	ldw	r5,216(sp)
 8008a50:	d8802504 	addi	r2,sp,148
 8008a54:	d9002c17 	ldw	r4,176(sp)
 8008a58:	d8800215 	stw	r2,8(sp)
 8008a5c:	d8802604 	addi	r2,sp,152
 8008a60:	d8c00015 	stw	r3,0(sp)
 8008a64:	d8800115 	stw	r2,4(sp)
 8008a68:	01c00084 	movi	r7,2
 8008a6c:	980d883a 	mov	r6,r19
 8008a70:	d8c03c15 	stw	r3,240(sp)
 8008a74:	da003d15 	stw	r8,244(sp)
 8008a78:	800997c0 	call	800997c <_dtoa_r>
 8008a7c:	1021883a 	mov	r16,r2
 8008a80:	008019c4 	movi	r2,103
 8008a84:	d8c03c17 	ldw	r3,240(sp)
 8008a88:	da003d17 	ldw	r8,244(sp)
 8008a8c:	88817126 	beq	r17,r2,8009054 <___vfprintf_internal_r+0x1cfc>
 8008a90:	008011c4 	movi	r2,71
 8008a94:	88829226 	beq	r17,r2,80094e0 <___vfprintf_internal_r+0x2188>
 8008a98:	80f9883a 	add	fp,r16,r3
 8008a9c:	d9003617 	ldw	r4,216(sp)
 8008aa0:	000d883a 	mov	r6,zero
 8008aa4:	000f883a 	mov	r7,zero
 8008aa8:	980b883a 	mov	r5,r19
 8008aac:	da003d15 	stw	r8,244(sp)
 8008ab0:	8005a8c0 	call	8005a8c <__eqdf2>
 8008ab4:	da003d17 	ldw	r8,244(sp)
 8008ab8:	10018d26 	beq	r2,zero,80090f0 <___vfprintf_internal_r+0x1d98>
 8008abc:	d8802117 	ldw	r2,132(sp)
 8008ac0:	1700062e 	bgeu	r2,fp,8008adc <___vfprintf_internal_r+0x1784>
 8008ac4:	01000c04 	movi	r4,48
 8008ac8:	10c00044 	addi	r3,r2,1
 8008acc:	d8c02115 	stw	r3,132(sp)
 8008ad0:	11000005 	stb	r4,0(r2)
 8008ad4:	d8802117 	ldw	r2,132(sp)
 8008ad8:	173ffb36 	bltu	r2,fp,8008ac8 <__alt_data_end+0xfc008ac8>
 8008adc:	1405c83a 	sub	r2,r2,r16
 8008ae0:	d8803315 	stw	r2,204(sp)
 8008ae4:	008011c4 	movi	r2,71
 8008ae8:	b0817626 	beq	r22,r2,80090c4 <___vfprintf_internal_r+0x1d6c>
 8008aec:	00801944 	movi	r2,101
 8008af0:	1442810e 	bge	r2,r17,80094f8 <___vfprintf_internal_r+0x21a0>
 8008af4:	d8c02617 	ldw	r3,152(sp)
 8008af8:	00801984 	movi	r2,102
 8008afc:	d8c03215 	stw	r3,200(sp)
 8008b00:	8881fe26 	beq	r17,r2,80092fc <___vfprintf_internal_r+0x1fa4>
 8008b04:	d8c03217 	ldw	r3,200(sp)
 8008b08:	d9003317 	ldw	r4,204(sp)
 8008b0c:	1901dd16 	blt	r3,r4,8009284 <___vfprintf_internal_r+0x1f2c>
 8008b10:	9480004c 	andi	r18,r18,1
 8008b14:	90022b1e 	bne	r18,zero,80093c4 <___vfprintf_internal_r+0x206c>
 8008b18:	1805883a 	mov	r2,r3
 8008b1c:	18028016 	blt	r3,zero,8009520 <___vfprintf_internal_r+0x21c8>
 8008b20:	d8c03217 	ldw	r3,200(sp)
 8008b24:	044019c4 	movi	r17,103
 8008b28:	d8c02e15 	stw	r3,184(sp)
 8008b2c:	df002a07 	ldb	fp,168(sp)
 8008b30:	e001531e 	bne	fp,zero,8009080 <___vfprintf_internal_r+0x1d28>
 8008b34:	df002783 	ldbu	fp,158(sp)
 8008b38:	d8802a15 	stw	r2,168(sp)
 8008b3c:	dc802b17 	ldw	r18,172(sp)
 8008b40:	d8002915 	stw	zero,164(sp)
 8008b44:	003bd106 	br	8007a8c <__alt_data_end+0xfc007a8c>
 8008b48:	d8802d17 	ldw	r2,180(sp)
 8008b4c:	d8c02d17 	ldw	r3,180(sp)
 8008b50:	d9002d17 	ldw	r4,180(sp)
 8008b54:	10800017 	ldw	r2,0(r2)
 8008b58:	18c00117 	ldw	r3,4(r3)
 8008b5c:	21000204 	addi	r4,r4,8
 8008b60:	d8803615 	stw	r2,216(sp)
 8008b64:	d8c03815 	stw	r3,224(sp)
 8008b68:	d9002d15 	stw	r4,180(sp)
 8008b6c:	003b7506 	br	8007944 <__alt_data_end+0xfc007944>
 8008b70:	ac400007 	ldb	r17,0(r21)
 8008b74:	003a5906 	br	80074dc <__alt_data_end+0xfc0074dc>
 8008b78:	9080100c 	andi	r2,r18,64
 8008b7c:	1000a826 	beq	r2,zero,8008e20 <___vfprintf_internal_r+0x1ac8>
 8008b80:	d9002d17 	ldw	r4,180(sp)
 8008b84:	002d883a 	mov	r22,zero
 8008b88:	24c0000b 	ldhu	r19,0(r4)
 8008b8c:	21000104 	addi	r4,r4,4
 8008b90:	d9002d15 	stw	r4,180(sp)
 8008b94:	003ccb06 	br	8007ec4 <__alt_data_end+0xfc007ec4>
 8008b98:	d8c02d17 	ldw	r3,180(sp)
 8008b9c:	d9002917 	ldw	r4,164(sp)
 8008ba0:	002d883a 	mov	r22,zero
 8008ba4:	18800104 	addi	r2,r3,4
 8008ba8:	1cc00017 	ldw	r19,0(r3)
 8008bac:	203ebb0e 	bge	r4,zero,800869c <__alt_data_end+0xfc00869c>
 8008bb0:	003ef106 	br	8008778 <__alt_data_end+0xfc008778>
 8008bb4:	9080040c 	andi	r2,r18,16
 8008bb8:	1000921e 	bne	r2,zero,8008e04 <___vfprintf_internal_r+0x1aac>
 8008bbc:	9480100c 	andi	r18,r18,64
 8008bc0:	90013926 	beq	r18,zero,80090a8 <___vfprintf_internal_r+0x1d50>
 8008bc4:	d9002d17 	ldw	r4,180(sp)
 8008bc8:	d9402f17 	ldw	r5,188(sp)
 8008bcc:	20800017 	ldw	r2,0(r4)
 8008bd0:	21000104 	addi	r4,r4,4
 8008bd4:	d9002d15 	stw	r4,180(sp)
 8008bd8:	1140000d 	sth	r5,0(r2)
 8008bdc:	003a1606 	br	8007438 <__alt_data_end+0xfc007438>
 8008be0:	9080100c 	andi	r2,r18,64
 8008be4:	10008026 	beq	r2,zero,8008de8 <___vfprintf_internal_r+0x1a90>
 8008be8:	d8c02d17 	ldw	r3,180(sp)
 8008bec:	1cc0000f 	ldh	r19,0(r3)
 8008bf0:	18c00104 	addi	r3,r3,4
 8008bf4:	d8c02d15 	stw	r3,180(sp)
 8008bf8:	982dd7fa 	srai	r22,r19,31
 8008bfc:	b005883a 	mov	r2,r22
 8008c00:	003b1f06 	br	8007880 <__alt_data_end+0xfc007880>
 8008c04:	9080100c 	andi	r2,r18,64
 8008c08:	d8002785 	stb	zero,158(sp)
 8008c0c:	10008a1e 	bne	r2,zero,8008e38 <___vfprintf_internal_r+0x1ae0>
 8008c10:	d9402d17 	ldw	r5,180(sp)
 8008c14:	d8c02917 	ldw	r3,164(sp)
 8008c18:	002d883a 	mov	r22,zero
 8008c1c:	28800104 	addi	r2,r5,4
 8008c20:	2cc00017 	ldw	r19,0(r5)
 8008c24:	183e4b0e 	bge	r3,zero,8008554 <__alt_data_end+0xfc008554>
 8008c28:	9d86b03a 	or	r3,r19,r22
 8008c2c:	d8802d15 	stw	r2,180(sp)
 8008c30:	183e4c1e 	bne	r3,zero,8008564 <__alt_data_end+0xfc008564>
 8008c34:	0039883a 	mov	fp,zero
 8008c38:	0005883a 	mov	r2,zero
 8008c3c:	003d4006 	br	8008140 <__alt_data_end+0xfc008140>
 8008c40:	01420074 	movhi	r5,2049
 8008c44:	29569284 	addi	r5,r5,23114
 8008c48:	d9402b15 	stw	r5,172(sp)
 8008c4c:	d9402b17 	ldw	r5,172(sp)
 8008c50:	1c47883a 	add	r3,r3,r17
 8008c54:	10800044 	addi	r2,r2,1
 8008c58:	41400015 	stw	r5,0(r8)
 8008c5c:	44400115 	stw	r17,4(r8)
 8008c60:	d8c02015 	stw	r3,128(sp)
 8008c64:	d8801f15 	stw	r2,124(sp)
 8008c68:	010001c4 	movi	r4,7
 8008c6c:	20bec816 	blt	r4,r2,8008790 <__alt_data_end+0xfc008790>
 8008c70:	42000204 	addi	r8,r8,8
 8008c74:	003ecd06 	br	80087ac <__alt_data_end+0xfc0087ac>
 8008c78:	d9002917 	ldw	r4,164(sp)
 8008c7c:	d8002785 	stb	zero,158(sp)
 8008c80:	203d2d16 	blt	r4,zero,8008138 <__alt_data_end+0xfc008138>
 8008c84:	00bfdfc4 	movi	r2,-129
 8008c88:	90a4703a 	and	r18,r18,r2
 8008c8c:	003a9106 	br	80076d4 <__alt_data_end+0xfc0076d4>
 8008c90:	01020074 	movhi	r4,2049
 8008c94:	21169284 	addi	r4,r4,23114
 8008c98:	d9002b15 	stw	r4,172(sp)
 8008c9c:	003c0c06 	br	8007cd0 <__alt_data_end+0xfc007cd0>
 8008ca0:	d9002c17 	ldw	r4,176(sp)
 8008ca4:	d9801e04 	addi	r6,sp,120
 8008ca8:	b80b883a 	mov	r5,r23
 8008cac:	800e8e00 	call	800e8e0 <__sprint_r>
 8008cb0:	103aab1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008cb4:	d8c02017 	ldw	r3,128(sp)
 8008cb8:	da000404 	addi	r8,sp,16
 8008cbc:	003d4106 	br	80081c4 <__alt_data_end+0xfc0081c4>
 8008cc0:	d8801f17 	ldw	r2,124(sp)
 8008cc4:	01420074 	movhi	r5,2049
 8008cc8:	01000044 	movi	r4,1
 8008ccc:	18c00044 	addi	r3,r3,1
 8008cd0:	10800044 	addi	r2,r2,1
 8008cd4:	29569204 	addi	r5,r5,23112
 8008cd8:	41000115 	stw	r4,4(r8)
 8008cdc:	41400015 	stw	r5,0(r8)
 8008ce0:	d8c02015 	stw	r3,128(sp)
 8008ce4:	d8801f15 	stw	r2,124(sp)
 8008ce8:	010001c4 	movi	r4,7
 8008cec:	20805c16 	blt	r4,r2,8008e60 <___vfprintf_internal_r+0x1b08>
 8008cf0:	42000204 	addi	r8,r8,8
 8008cf4:	8800041e 	bne	r17,zero,8008d08 <___vfprintf_internal_r+0x19b0>
 8008cf8:	d8803317 	ldw	r2,204(sp)
 8008cfc:	1000021e 	bne	r2,zero,8008d08 <___vfprintf_internal_r+0x19b0>
 8008d00:	9080004c 	andi	r2,r18,1
 8008d04:	103c0926 	beq	r2,zero,8007d2c <__alt_data_end+0xfc007d2c>
 8008d08:	d9003717 	ldw	r4,220(sp)
 8008d0c:	d8801f17 	ldw	r2,124(sp)
 8008d10:	d9403417 	ldw	r5,208(sp)
 8008d14:	20c7883a 	add	r3,r4,r3
 8008d18:	10800044 	addi	r2,r2,1
 8008d1c:	41000115 	stw	r4,4(r8)
 8008d20:	41400015 	stw	r5,0(r8)
 8008d24:	d8c02015 	stw	r3,128(sp)
 8008d28:	d8801f15 	stw	r2,124(sp)
 8008d2c:	010001c4 	movi	r4,7
 8008d30:	20812116 	blt	r4,r2,80091b8 <___vfprintf_internal_r+0x1e60>
 8008d34:	42000204 	addi	r8,r8,8
 8008d38:	0463c83a 	sub	r17,zero,r17
 8008d3c:	0440730e 	bge	zero,r17,8008f0c <___vfprintf_internal_r+0x1bb4>
 8008d40:	05800404 	movi	r22,16
 8008d44:	b440860e 	bge	r22,r17,8008f60 <___vfprintf_internal_r+0x1c08>
 8008d48:	01420074 	movhi	r5,2049
 8008d4c:	29569284 	addi	r5,r5,23114
 8008d50:	d9402b15 	stw	r5,172(sp)
 8008d54:	070001c4 	movi	fp,7
 8008d58:	dcc02c17 	ldw	r19,176(sp)
 8008d5c:	00000306 	br	8008d6c <___vfprintf_internal_r+0x1a14>
 8008d60:	42000204 	addi	r8,r8,8
 8008d64:	8c7ffc04 	addi	r17,r17,-16
 8008d68:	b440800e 	bge	r22,r17,8008f6c <___vfprintf_internal_r+0x1c14>
 8008d6c:	18c00404 	addi	r3,r3,16
 8008d70:	10800044 	addi	r2,r2,1
 8008d74:	45000015 	stw	r20,0(r8)
 8008d78:	45800115 	stw	r22,4(r8)
 8008d7c:	d8c02015 	stw	r3,128(sp)
 8008d80:	d8801f15 	stw	r2,124(sp)
 8008d84:	e0bff60e 	bge	fp,r2,8008d60 <__alt_data_end+0xfc008d60>
 8008d88:	d9801e04 	addi	r6,sp,120
 8008d8c:	b80b883a 	mov	r5,r23
 8008d90:	9809883a 	mov	r4,r19
 8008d94:	800e8e00 	call	800e8e0 <__sprint_r>
 8008d98:	103a711e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008d9c:	d8c02017 	ldw	r3,128(sp)
 8008da0:	d8801f17 	ldw	r2,124(sp)
 8008da4:	da000404 	addi	r8,sp,16
 8008da8:	003fee06 	br	8008d64 <__alt_data_end+0xfc008d64>
 8008dac:	00bfffc4 	movi	r2,-1
 8008db0:	003a6f06 	br	8007770 <__alt_data_end+0xfc007770>
 8008db4:	008011c4 	movi	r2,71
 8008db8:	1440b816 	blt	r2,r17,800909c <___vfprintf_internal_r+0x1d44>
 8008dbc:	04020074 	movhi	r16,2049
 8008dc0:	84168404 	addi	r16,r16,23056
 8008dc4:	00c000c4 	movi	r3,3
 8008dc8:	00bfdfc4 	movi	r2,-129
 8008dcc:	d8c02a15 	stw	r3,168(sp)
 8008dd0:	90a4703a 	and	r18,r18,r2
 8008dd4:	df002783 	ldbu	fp,158(sp)
 8008dd8:	d8c02e15 	stw	r3,184(sp)
 8008ddc:	d8002915 	stw	zero,164(sp)
 8008de0:	d8003215 	stw	zero,200(sp)
 8008de4:	003b2906 	br	8007a8c <__alt_data_end+0xfc007a8c>
 8008de8:	d9002d17 	ldw	r4,180(sp)
 8008dec:	24c00017 	ldw	r19,0(r4)
 8008df0:	21000104 	addi	r4,r4,4
 8008df4:	d9002d15 	stw	r4,180(sp)
 8008df8:	982dd7fa 	srai	r22,r19,31
 8008dfc:	b005883a 	mov	r2,r22
 8008e00:	003a9f06 	br	8007880 <__alt_data_end+0xfc007880>
 8008e04:	d9402d17 	ldw	r5,180(sp)
 8008e08:	d8c02f17 	ldw	r3,188(sp)
 8008e0c:	28800017 	ldw	r2,0(r5)
 8008e10:	29400104 	addi	r5,r5,4
 8008e14:	d9402d15 	stw	r5,180(sp)
 8008e18:	10c00015 	stw	r3,0(r2)
 8008e1c:	00398606 	br	8007438 <__alt_data_end+0xfc007438>
 8008e20:	d9402d17 	ldw	r5,180(sp)
 8008e24:	002d883a 	mov	r22,zero
 8008e28:	2cc00017 	ldw	r19,0(r5)
 8008e2c:	29400104 	addi	r5,r5,4
 8008e30:	d9402d15 	stw	r5,180(sp)
 8008e34:	003c2306 	br	8007ec4 <__alt_data_end+0xfc007ec4>
 8008e38:	d8c02d17 	ldw	r3,180(sp)
 8008e3c:	d9002917 	ldw	r4,164(sp)
 8008e40:	002d883a 	mov	r22,zero
 8008e44:	18800104 	addi	r2,r3,4
 8008e48:	1cc0000b 	ldhu	r19,0(r3)
 8008e4c:	203dc10e 	bge	r4,zero,8008554 <__alt_data_end+0xfc008554>
 8008e50:	003f7506 	br	8008c28 <__alt_data_end+0xfc008c28>
 8008e54:	04020074 	movhi	r16,2049
 8008e58:	84168204 	addi	r16,r16,23048
 8008e5c:	003acc06 	br	8007990 <__alt_data_end+0xfc007990>
 8008e60:	d9002c17 	ldw	r4,176(sp)
 8008e64:	d9801e04 	addi	r6,sp,120
 8008e68:	b80b883a 	mov	r5,r23
 8008e6c:	800e8e00 	call	800e8e0 <__sprint_r>
 8008e70:	103a3b1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008e74:	dc402617 	ldw	r17,152(sp)
 8008e78:	d8c02017 	ldw	r3,128(sp)
 8008e7c:	da000404 	addi	r8,sp,16
 8008e80:	003f9c06 	br	8008cf4 <__alt_data_end+0xfc008cf4>
 8008e84:	ac400043 	ldbu	r17,1(r21)
 8008e88:	94800814 	ori	r18,r18,32
 8008e8c:	ad400044 	addi	r21,r21,1
 8008e90:	8c403fcc 	andi	r17,r17,255
 8008e94:	8c40201c 	xori	r17,r17,128
 8008e98:	8c7fe004 	addi	r17,r17,-128
 8008e9c:	00398f06 	br	80074dc <__alt_data_end+0xfc0074dc>
 8008ea0:	d8c02d15 	stw	r3,180(sp)
 8008ea4:	0039883a 	mov	fp,zero
 8008ea8:	003e3506 	br	8008780 <__alt_data_end+0xfc008780>
 8008eac:	d9002c17 	ldw	r4,176(sp)
 8008eb0:	d9801e04 	addi	r6,sp,120
 8008eb4:	b80b883a 	mov	r5,r23
 8008eb8:	800e8e00 	call	800e8e0 <__sprint_r>
 8008ebc:	103a281e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008ec0:	d8c02017 	ldw	r3,128(sp)
 8008ec4:	da000404 	addi	r8,sp,16
 8008ec8:	003cd006 	br	800820c <__alt_data_end+0xfc00820c>
 8008ecc:	8009883a 	mov	r4,r16
 8008ed0:	da003d15 	stw	r8,244(sp)
 8008ed4:	80072c00 	call	80072c0 <strlen>
 8008ed8:	d8802e15 	stw	r2,184(sp)
 8008edc:	da003d17 	ldw	r8,244(sp)
 8008ee0:	103c340e 	bge	r2,zero,8007fb4 <__alt_data_end+0xfc007fb4>
 8008ee4:	0005883a 	mov	r2,zero
 8008ee8:	003c3206 	br	8007fb4 <__alt_data_end+0xfc007fb4>
 8008eec:	d9002c17 	ldw	r4,176(sp)
 8008ef0:	d9801e04 	addi	r6,sp,120
 8008ef4:	b80b883a 	mov	r5,r23
 8008ef8:	800e8e00 	call	800e8e0 <__sprint_r>
 8008efc:	103a181e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008f00:	d8c02017 	ldw	r3,128(sp)
 8008f04:	d8801f17 	ldw	r2,124(sp)
 8008f08:	da000404 	addi	r8,sp,16
 8008f0c:	d9403317 	ldw	r5,204(sp)
 8008f10:	10800044 	addi	r2,r2,1
 8008f14:	44000015 	stw	r16,0(r8)
 8008f18:	28c7883a 	add	r3,r5,r3
 8008f1c:	003b7d06 	br	8007d14 <__alt_data_end+0xfc007d14>
 8008f20:	01020074 	movhi	r4,2049
 8008f24:	21169684 	addi	r4,r4,23130
 8008f28:	d9003515 	stw	r4,212(sp)
 8008f2c:	003b1406 	br	8007b80 <__alt_data_end+0xfc007b80>
 8008f30:	013fffc4 	movi	r4,-1
 8008f34:	003a3506 	br	800780c <__alt_data_end+0xfc00780c>
 8008f38:	0023883a 	mov	r17,zero
 8008f3c:	003d9d06 	br	80085b4 <__alt_data_end+0xfc0085b4>
 8008f40:	d9002c17 	ldw	r4,176(sp)
 8008f44:	d9801e04 	addi	r6,sp,120
 8008f48:	b80b883a 	mov	r5,r23
 8008f4c:	800e8e00 	call	800e8e0 <__sprint_r>
 8008f50:	103a031e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008f54:	d8c02017 	ldw	r3,128(sp)
 8008f58:	da000404 	addi	r8,sp,16
 8008f5c:	003d9406 	br	80085b0 <__alt_data_end+0xfc0085b0>
 8008f60:	01020074 	movhi	r4,2049
 8008f64:	21169284 	addi	r4,r4,23114
 8008f68:	d9002b15 	stw	r4,172(sp)
 8008f6c:	d9002b17 	ldw	r4,172(sp)
 8008f70:	1c47883a 	add	r3,r3,r17
 8008f74:	10800044 	addi	r2,r2,1
 8008f78:	41000015 	stw	r4,0(r8)
 8008f7c:	44400115 	stw	r17,4(r8)
 8008f80:	d8c02015 	stw	r3,128(sp)
 8008f84:	d8801f15 	stw	r2,124(sp)
 8008f88:	010001c4 	movi	r4,7
 8008f8c:	20bfd716 	blt	r4,r2,8008eec <__alt_data_end+0xfc008eec>
 8008f90:	42000204 	addi	r8,r8,8
 8008f94:	003fdd06 	br	8008f0c <__alt_data_end+0xfc008f0c>
 8008f98:	d9002c17 	ldw	r4,176(sp)
 8008f9c:	d9801e04 	addi	r6,sp,120
 8008fa0:	b80b883a 	mov	r5,r23
 8008fa4:	800e8e00 	call	800e8e0 <__sprint_r>
 8008fa8:	1039ed1e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 8008fac:	d8802617 	ldw	r2,152(sp)
 8008fb0:	d8c02017 	ldw	r3,128(sp)
 8008fb4:	da000404 	addi	r8,sp,16
 8008fb8:	003e1006 	br	80087fc <__alt_data_end+0xfc0087fc>
 8008fbc:	00800044 	movi	r2,1
 8008fc0:	10803fcc 	andi	r2,r2,255
 8008fc4:	00c00044 	movi	r3,1
 8008fc8:	10fa3526 	beq	r2,r3,80078a0 <__alt_data_end+0xfc0078a0>
 8008fcc:	00c00084 	movi	r3,2
 8008fd0:	10fbcb26 	beq	r2,r3,8007f00 <__alt_data_end+0xfc007f00>
 8008fd4:	003a8f06 	br	8007a14 <__alt_data_end+0xfc007a14>
 8008fd8:	01020074 	movhi	r4,2049
 8008fdc:	21169684 	addi	r4,r4,23130
 8008fe0:	d9003515 	stw	r4,212(sp)
 8008fe4:	003b7606 	br	8007dc0 <__alt_data_end+0xfc007dc0>
 8008fe8:	d8802917 	ldw	r2,164(sp)
 8008fec:	00c00184 	movi	r3,6
 8008ff0:	1880012e 	bgeu	r3,r2,8008ff8 <___vfprintf_internal_r+0x1ca0>
 8008ff4:	1805883a 	mov	r2,r3
 8008ff8:	d8802e15 	stw	r2,184(sp)
 8008ffc:	1000ef16 	blt	r2,zero,80093bc <___vfprintf_internal_r+0x2064>
 8009000:	04020074 	movhi	r16,2049
 8009004:	d8802a15 	stw	r2,168(sp)
 8009008:	dcc02d15 	stw	r19,180(sp)
 800900c:	d8002915 	stw	zero,164(sp)
 8009010:	d8003215 	stw	zero,200(sp)
 8009014:	84169004 	addi	r16,r16,23104
 8009018:	0039883a 	mov	fp,zero
 800901c:	003aa206 	br	8007aa8 <__alt_data_end+0xfc007aa8>
 8009020:	0021883a 	mov	r16,zero
 8009024:	003e0706 	br	8008844 <__alt_data_end+0xfc008844>
 8009028:	d9002c17 	ldw	r4,176(sp)
 800902c:	d9801e04 	addi	r6,sp,120
 8009030:	b80b883a 	mov	r5,r23
 8009034:	800e8e00 	call	800e8e0 <__sprint_r>
 8009038:	1039c91e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 800903c:	d8802617 	ldw	r2,152(sp)
 8009040:	d9403317 	ldw	r5,204(sp)
 8009044:	d8c02017 	ldw	r3,128(sp)
 8009048:	da000404 	addi	r8,sp,16
 800904c:	2885c83a 	sub	r2,r5,r2
 8009050:	003dfb06 	br	8008840 <__alt_data_end+0xfc008840>
 8009054:	9080004c 	andi	r2,r18,1
 8009058:	103e8f1e 	bne	r2,zero,8008a98 <__alt_data_end+0xfc008a98>
 800905c:	d8802117 	ldw	r2,132(sp)
 8009060:	003e9e06 	br	8008adc <__alt_data_end+0xfc008adc>
 8009064:	1025883a 	mov	r18,r2
 8009068:	0039883a 	mov	fp,zero
 800906c:	00800084 	movi	r2,2
 8009070:	003fd306 	br	8008fc0 <__alt_data_end+0xfc008fc0>
 8009074:	07000b44 	movi	fp,45
 8009078:	df002785 	stb	fp,158(sp)
 800907c:	003a4006 	br	8007980 <__alt_data_end+0xfc007980>
 8009080:	00c00b44 	movi	r3,45
 8009084:	d8c02785 	stb	r3,158(sp)
 8009088:	d8802a15 	stw	r2,168(sp)
 800908c:	dc802b17 	ldw	r18,172(sp)
 8009090:	d8002915 	stw	zero,164(sp)
 8009094:	07000b44 	movi	fp,45
 8009098:	003a8006 	br	8007a9c <__alt_data_end+0xfc007a9c>
 800909c:	04020074 	movhi	r16,2049
 80090a0:	84168504 	addi	r16,r16,23060
 80090a4:	003f4706 	br	8008dc4 <__alt_data_end+0xfc008dc4>
 80090a8:	d8c02d17 	ldw	r3,180(sp)
 80090ac:	d9002f17 	ldw	r4,188(sp)
 80090b0:	18800017 	ldw	r2,0(r3)
 80090b4:	18c00104 	addi	r3,r3,4
 80090b8:	d8c02d15 	stw	r3,180(sp)
 80090bc:	11000015 	stw	r4,0(r2)
 80090c0:	0038dd06 	br	8007438 <__alt_data_end+0xfc007438>
 80090c4:	dd802617 	ldw	r22,152(sp)
 80090c8:	00bfff44 	movi	r2,-3
 80090cc:	b0801c16 	blt	r22,r2,8009140 <___vfprintf_internal_r+0x1de8>
 80090d0:	d9402917 	ldw	r5,164(sp)
 80090d4:	2d801a16 	blt	r5,r22,8009140 <___vfprintf_internal_r+0x1de8>
 80090d8:	dd803215 	stw	r22,200(sp)
 80090dc:	003e8906 	br	8008b04 <__alt_data_end+0xfc008b04>
 80090e0:	01020074 	movhi	r4,2049
 80090e4:	21169284 	addi	r4,r4,23114
 80090e8:	d9002b15 	stw	r4,172(sp)
 80090ec:	003c9106 	br	8008334 <__alt_data_end+0xfc008334>
 80090f0:	e005883a 	mov	r2,fp
 80090f4:	003e7906 	br	8008adc <__alt_data_end+0xfc008adc>
 80090f8:	d9402917 	ldw	r5,164(sp)
 80090fc:	df002783 	ldbu	fp,158(sp)
 8009100:	dcc02d15 	stw	r19,180(sp)
 8009104:	d9402a15 	stw	r5,168(sp)
 8009108:	d9402e15 	stw	r5,184(sp)
 800910c:	d8002915 	stw	zero,164(sp)
 8009110:	d8003215 	stw	zero,200(sp)
 8009114:	003a5d06 	br	8007a8c <__alt_data_end+0xfc007a8c>
 8009118:	9080004c 	andi	r2,r18,1
 800911c:	0039883a 	mov	fp,zero
 8009120:	10000426 	beq	r2,zero,8009134 <___vfprintf_internal_r+0x1ddc>
 8009124:	00800c04 	movi	r2,48
 8009128:	dc001dc4 	addi	r16,sp,119
 800912c:	d8801dc5 	stb	r2,119(sp)
 8009130:	003b8006 	br	8007f34 <__alt_data_end+0xfc007f34>
 8009134:	d8002e15 	stw	zero,184(sp)
 8009138:	dc001e04 	addi	r16,sp,120
 800913c:	003a4d06 	br	8007a74 <__alt_data_end+0xfc007a74>
 8009140:	8c7fff84 	addi	r17,r17,-2
 8009144:	b5bfffc4 	addi	r22,r22,-1
 8009148:	dd802615 	stw	r22,152(sp)
 800914c:	dc4022c5 	stb	r17,139(sp)
 8009150:	b000bf16 	blt	r22,zero,8009450 <___vfprintf_internal_r+0x20f8>
 8009154:	00800ac4 	movi	r2,43
 8009158:	d8802305 	stb	r2,140(sp)
 800915c:	00800244 	movi	r2,9
 8009160:	15807016 	blt	r2,r22,8009324 <___vfprintf_internal_r+0x1fcc>
 8009164:	00800c04 	movi	r2,48
 8009168:	b5800c04 	addi	r22,r22,48
 800916c:	d8802345 	stb	r2,141(sp)
 8009170:	dd802385 	stb	r22,142(sp)
 8009174:	d88023c4 	addi	r2,sp,143
 8009178:	df0022c4 	addi	fp,sp,139
 800917c:	d8c03317 	ldw	r3,204(sp)
 8009180:	1739c83a 	sub	fp,r2,fp
 8009184:	d9003317 	ldw	r4,204(sp)
 8009188:	e0c7883a 	add	r3,fp,r3
 800918c:	df003a15 	stw	fp,232(sp)
 8009190:	d8c02e15 	stw	r3,184(sp)
 8009194:	00800044 	movi	r2,1
 8009198:	1100b30e 	bge	r2,r4,8009468 <___vfprintf_internal_r+0x2110>
 800919c:	d8c02e17 	ldw	r3,184(sp)
 80091a0:	18c00044 	addi	r3,r3,1
 80091a4:	d8c02e15 	stw	r3,184(sp)
 80091a8:	1805883a 	mov	r2,r3
 80091ac:	1800ac16 	blt	r3,zero,8009460 <___vfprintf_internal_r+0x2108>
 80091b0:	d8003215 	stw	zero,200(sp)
 80091b4:	003e5d06 	br	8008b2c <__alt_data_end+0xfc008b2c>
 80091b8:	d9002c17 	ldw	r4,176(sp)
 80091bc:	d9801e04 	addi	r6,sp,120
 80091c0:	b80b883a 	mov	r5,r23
 80091c4:	800e8e00 	call	800e8e0 <__sprint_r>
 80091c8:	1039651e 	bne	r2,zero,8007760 <__alt_data_end+0xfc007760>
 80091cc:	dc402617 	ldw	r17,152(sp)
 80091d0:	d8c02017 	ldw	r3,128(sp)
 80091d4:	d8801f17 	ldw	r2,124(sp)
 80091d8:	da000404 	addi	r8,sp,16
 80091dc:	003ed606 	br	8008d38 <__alt_data_end+0xfc008d38>
 80091e0:	582b883a 	mov	r21,r11
 80091e4:	d8002915 	stw	zero,164(sp)
 80091e8:	0038bd06 	br	80074e0 <__alt_data_end+0xfc0074e0>
 80091ec:	d8802917 	ldw	r2,164(sp)
 80091f0:	103e071e 	bne	r2,zero,8008a10 <__alt_data_end+0xfc008a10>
 80091f4:	dc002915 	stw	r16,164(sp)
 80091f8:	003e0506 	br	8008a10 <__alt_data_end+0xfc008a10>
 80091fc:	d9002917 	ldw	r4,164(sp)
 8009200:	20c00044 	addi	r3,r4,1
 8009204:	003e0f06 	br	8008a44 <__alt_data_end+0xfc008a44>
 8009208:	01400184 	movi	r5,6
 800920c:	d9402915 	stw	r5,164(sp)
 8009210:	003dff06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8009214:	d8802104 	addi	r2,sp,132
 8009218:	d8800315 	stw	r2,12(sp)
 800921c:	d8802504 	addi	r2,sp,148
 8009220:	d8800215 	stw	r2,8(sp)
 8009224:	d8802604 	addi	r2,sp,152
 8009228:	d8800115 	stw	r2,4(sp)
 800922c:	d8802917 	ldw	r2,164(sp)
 8009230:	d9403617 	ldw	r5,216(sp)
 8009234:	d9002c17 	ldw	r4,176(sp)
 8009238:	d8800015 	stw	r2,0(sp)
 800923c:	01c000c4 	movi	r7,3
 8009240:	980d883a 	mov	r6,r19
 8009244:	da003d15 	stw	r8,244(sp)
 8009248:	800997c0 	call	800997c <_dtoa_r>
 800924c:	d8c02917 	ldw	r3,164(sp)
 8009250:	da003d17 	ldw	r8,244(sp)
 8009254:	1021883a 	mov	r16,r2
 8009258:	10f9883a 	add	fp,r2,r3
 800925c:	81000007 	ldb	r4,0(r16)
 8009260:	00800c04 	movi	r2,48
 8009264:	20805e26 	beq	r4,r2,80093e0 <___vfprintf_internal_r+0x2088>
 8009268:	d8c02617 	ldw	r3,152(sp)
 800926c:	e0f9883a 	add	fp,fp,r3
 8009270:	003e0a06 	br	8008a9c <__alt_data_end+0xfc008a9c>
 8009274:	00c00b44 	movi	r3,45
 8009278:	24e0003c 	xorhi	r19,r4,32768
 800927c:	d8c02a05 	stb	r3,168(sp)
 8009280:	003de906 	br	8008a28 <__alt_data_end+0xfc008a28>
 8009284:	d8c03217 	ldw	r3,200(sp)
 8009288:	00c07a0e 	bge	zero,r3,8009474 <___vfprintf_internal_r+0x211c>
 800928c:	00800044 	movi	r2,1
 8009290:	d9003317 	ldw	r4,204(sp)
 8009294:	1105883a 	add	r2,r2,r4
 8009298:	d8802e15 	stw	r2,184(sp)
 800929c:	10004e16 	blt	r2,zero,80093d8 <___vfprintf_internal_r+0x2080>
 80092a0:	044019c4 	movi	r17,103
 80092a4:	003e2106 	br	8008b2c <__alt_data_end+0xfc008b2c>
 80092a8:	d9002917 	ldw	r4,164(sp)
 80092ac:	d8802104 	addi	r2,sp,132
 80092b0:	d8800315 	stw	r2,12(sp)
 80092b4:	d9000015 	stw	r4,0(sp)
 80092b8:	d8802504 	addi	r2,sp,148
 80092bc:	d9403617 	ldw	r5,216(sp)
 80092c0:	d9002c17 	ldw	r4,176(sp)
 80092c4:	d8800215 	stw	r2,8(sp)
 80092c8:	d8802604 	addi	r2,sp,152
 80092cc:	d8800115 	stw	r2,4(sp)
 80092d0:	01c000c4 	movi	r7,3
 80092d4:	980d883a 	mov	r6,r19
 80092d8:	da003d15 	stw	r8,244(sp)
 80092dc:	800997c0 	call	800997c <_dtoa_r>
 80092e0:	d8c02917 	ldw	r3,164(sp)
 80092e4:	da003d17 	ldw	r8,244(sp)
 80092e8:	1021883a 	mov	r16,r2
 80092ec:	00801184 	movi	r2,70
 80092f0:	80f9883a 	add	fp,r16,r3
 80092f4:	88bfd926 	beq	r17,r2,800925c <__alt_data_end+0xfc00925c>
 80092f8:	003de806 	br	8008a9c <__alt_data_end+0xfc008a9c>
 80092fc:	d9002917 	ldw	r4,164(sp)
 8009300:	00c04d0e 	bge	zero,r3,8009438 <___vfprintf_internal_r+0x20e0>
 8009304:	2000441e 	bne	r4,zero,8009418 <___vfprintf_internal_r+0x20c0>
 8009308:	9480004c 	andi	r18,r18,1
 800930c:	9000421e 	bne	r18,zero,8009418 <___vfprintf_internal_r+0x20c0>
 8009310:	1805883a 	mov	r2,r3
 8009314:	18007016 	blt	r3,zero,80094d8 <___vfprintf_internal_r+0x2180>
 8009318:	d8c03217 	ldw	r3,200(sp)
 800931c:	d8c02e15 	stw	r3,184(sp)
 8009320:	003e0206 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8009324:	df0022c4 	addi	fp,sp,139
 8009328:	dc002915 	stw	r16,164(sp)
 800932c:	4027883a 	mov	r19,r8
 8009330:	e021883a 	mov	r16,fp
 8009334:	b009883a 	mov	r4,r22
 8009338:	01400284 	movi	r5,10
 800933c:	80032c80 	call	80032c8 <__modsi3>
 8009340:	10800c04 	addi	r2,r2,48
 8009344:	843fffc4 	addi	r16,r16,-1
 8009348:	b009883a 	mov	r4,r22
 800934c:	01400284 	movi	r5,10
 8009350:	80800005 	stb	r2,0(r16)
 8009354:	80032440 	call	8003244 <__divsi3>
 8009358:	102d883a 	mov	r22,r2
 800935c:	00800244 	movi	r2,9
 8009360:	15bff416 	blt	r2,r22,8009334 <__alt_data_end+0xfc009334>
 8009364:	9811883a 	mov	r8,r19
 8009368:	b0800c04 	addi	r2,r22,48
 800936c:	8027883a 	mov	r19,r16
 8009370:	997fffc4 	addi	r5,r19,-1
 8009374:	98bfffc5 	stb	r2,-1(r19)
 8009378:	dc002917 	ldw	r16,164(sp)
 800937c:	2f006a2e 	bgeu	r5,fp,8009528 <___vfprintf_internal_r+0x21d0>
 8009380:	d9c02384 	addi	r7,sp,142
 8009384:	3ccfc83a 	sub	r7,r7,r19
 8009388:	d9002344 	addi	r4,sp,141
 800938c:	e1cf883a 	add	r7,fp,r7
 8009390:	00000106 	br	8009398 <___vfprintf_internal_r+0x2040>
 8009394:	28800003 	ldbu	r2,0(r5)
 8009398:	20800005 	stb	r2,0(r4)
 800939c:	21000044 	addi	r4,r4,1
 80093a0:	29400044 	addi	r5,r5,1
 80093a4:	393ffb1e 	bne	r7,r4,8009394 <__alt_data_end+0xfc009394>
 80093a8:	d8802304 	addi	r2,sp,140
 80093ac:	14c5c83a 	sub	r2,r2,r19
 80093b0:	d8c02344 	addi	r3,sp,141
 80093b4:	1885883a 	add	r2,r3,r2
 80093b8:	003f7006 	br	800917c <__alt_data_end+0xfc00917c>
 80093bc:	0005883a 	mov	r2,zero
 80093c0:	003f0f06 	br	8009000 <__alt_data_end+0xfc009000>
 80093c4:	d8c03217 	ldw	r3,200(sp)
 80093c8:	18c00044 	addi	r3,r3,1
 80093cc:	d8c02e15 	stw	r3,184(sp)
 80093d0:	1805883a 	mov	r2,r3
 80093d4:	183fb20e 	bge	r3,zero,80092a0 <__alt_data_end+0xfc0092a0>
 80093d8:	0005883a 	mov	r2,zero
 80093dc:	003fb006 	br	80092a0 <__alt_data_end+0xfc0092a0>
 80093e0:	d9003617 	ldw	r4,216(sp)
 80093e4:	000d883a 	mov	r6,zero
 80093e8:	000f883a 	mov	r7,zero
 80093ec:	980b883a 	mov	r5,r19
 80093f0:	d8c03c15 	stw	r3,240(sp)
 80093f4:	da003d15 	stw	r8,244(sp)
 80093f8:	8005a8c0 	call	8005a8c <__eqdf2>
 80093fc:	d8c03c17 	ldw	r3,240(sp)
 8009400:	da003d17 	ldw	r8,244(sp)
 8009404:	103f9826 	beq	r2,zero,8009268 <__alt_data_end+0xfc009268>
 8009408:	00800044 	movi	r2,1
 800940c:	10c7c83a 	sub	r3,r2,r3
 8009410:	d8c02615 	stw	r3,152(sp)
 8009414:	003f9506 	br	800926c <__alt_data_end+0xfc00926c>
 8009418:	d9002917 	ldw	r4,164(sp)
 800941c:	d8c03217 	ldw	r3,200(sp)
 8009420:	20800044 	addi	r2,r4,1
 8009424:	1885883a 	add	r2,r3,r2
 8009428:	d8802e15 	stw	r2,184(sp)
 800942c:	103dbf0e 	bge	r2,zero,8008b2c <__alt_data_end+0xfc008b2c>
 8009430:	0005883a 	mov	r2,zero
 8009434:	003dbd06 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8009438:	2000211e 	bne	r4,zero,80094c0 <___vfprintf_internal_r+0x2168>
 800943c:	9480004c 	andi	r18,r18,1
 8009440:	90001f1e 	bne	r18,zero,80094c0 <___vfprintf_internal_r+0x2168>
 8009444:	00800044 	movi	r2,1
 8009448:	d8802e15 	stw	r2,184(sp)
 800944c:	003db706 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8009450:	00800b44 	movi	r2,45
 8009454:	05adc83a 	sub	r22,zero,r22
 8009458:	d8802305 	stb	r2,140(sp)
 800945c:	003f3f06 	br	800915c <__alt_data_end+0xfc00915c>
 8009460:	0005883a 	mov	r2,zero
 8009464:	003f5206 	br	80091b0 <__alt_data_end+0xfc0091b0>
 8009468:	90a4703a 	and	r18,r18,r2
 800946c:	903f4e26 	beq	r18,zero,80091a8 <__alt_data_end+0xfc0091a8>
 8009470:	003f4a06 	br	800919c <__alt_data_end+0xfc00919c>
 8009474:	00800084 	movi	r2,2
 8009478:	10c5c83a 	sub	r2,r2,r3
 800947c:	003f8406 	br	8009290 <__alt_data_end+0xfc009290>
 8009480:	d8802d17 	ldw	r2,180(sp)
 8009484:	d9002d17 	ldw	r4,180(sp)
 8009488:	ac400043 	ldbu	r17,1(r21)
 800948c:	10800017 	ldw	r2,0(r2)
 8009490:	582b883a 	mov	r21,r11
 8009494:	d8802915 	stw	r2,164(sp)
 8009498:	20800104 	addi	r2,r4,4
 800949c:	d9002917 	ldw	r4,164(sp)
 80094a0:	d8802d15 	stw	r2,180(sp)
 80094a4:	203e7a0e 	bge	r4,zero,8008e90 <__alt_data_end+0xfc008e90>
 80094a8:	8c403fcc 	andi	r17,r17,255
 80094ac:	00bfffc4 	movi	r2,-1
 80094b0:	8c40201c 	xori	r17,r17,128
 80094b4:	d8802915 	stw	r2,164(sp)
 80094b8:	8c7fe004 	addi	r17,r17,-128
 80094bc:	00380706 	br	80074dc <__alt_data_end+0xfc0074dc>
 80094c0:	d8c02917 	ldw	r3,164(sp)
 80094c4:	18c00084 	addi	r3,r3,2
 80094c8:	d8c02e15 	stw	r3,184(sp)
 80094cc:	1805883a 	mov	r2,r3
 80094d0:	183d960e 	bge	r3,zero,8008b2c <__alt_data_end+0xfc008b2c>
 80094d4:	003fd606 	br	8009430 <__alt_data_end+0xfc009430>
 80094d8:	0005883a 	mov	r2,zero
 80094dc:	003f8e06 	br	8009318 <__alt_data_end+0xfc009318>
 80094e0:	9080004c 	andi	r2,r18,1
 80094e4:	103f811e 	bne	r2,zero,80092ec <__alt_data_end+0xfc0092ec>
 80094e8:	d8802117 	ldw	r2,132(sp)
 80094ec:	1405c83a 	sub	r2,r2,r16
 80094f0:	d8803315 	stw	r2,204(sp)
 80094f4:	b47ef326 	beq	r22,r17,80090c4 <__alt_data_end+0xfc0090c4>
 80094f8:	dd802617 	ldw	r22,152(sp)
 80094fc:	003f1106 	br	8009144 <__alt_data_end+0xfc009144>
 8009500:	d9c02785 	stb	r7,158(sp)
 8009504:	00390406 	br	8007918 <__alt_data_end+0xfc007918>
 8009508:	d9c02785 	stb	r7,158(sp)
 800950c:	0038d306 	br	800785c <__alt_data_end+0xfc00785c>
 8009510:	d9c02785 	stb	r7,158(sp)
 8009514:	003a6106 	br	8007e9c <__alt_data_end+0xfc007e9c>
 8009518:	d9c02785 	stb	r7,158(sp)
 800951c:	003af806 	br	8008100 <__alt_data_end+0xfc008100>
 8009520:	0005883a 	mov	r2,zero
 8009524:	003d7e06 	br	8008b20 <__alt_data_end+0xfc008b20>
 8009528:	d8802344 	addi	r2,sp,141
 800952c:	003f1306 	br	800917c <__alt_data_end+0xfc00917c>
 8009530:	d9c02785 	stb	r7,158(sp)
 8009534:	00392306 	br	80079c4 <__alt_data_end+0xfc0079c4>
 8009538:	d9c02785 	stb	r7,158(sp)
 800953c:	003aa906 	br	8007fe4 <__alt_data_end+0xfc007fe4>
 8009540:	d9c02785 	stb	r7,158(sp)
 8009544:	003a3d06 	br	8007e3c <__alt_data_end+0xfc007e3c>
 8009548:	d9c02785 	stb	r7,158(sp)
 800954c:	003aca06 	br	8008078 <__alt_data_end+0xfc008078>

08009550 <__vfprintf_internal>:
 8009550:	00820074 	movhi	r2,2049
 8009554:	109df204 	addi	r2,r2,30664
 8009558:	300f883a 	mov	r7,r6
 800955c:	280d883a 	mov	r6,r5
 8009560:	200b883a 	mov	r5,r4
 8009564:	11000017 	ldw	r4,0(r2)
 8009568:	80073581 	jmpi	8007358 <___vfprintf_internal_r>

0800956c <__sbprintf>:
 800956c:	2880030b 	ldhu	r2,12(r5)
 8009570:	2ac01917 	ldw	r11,100(r5)
 8009574:	2a80038b 	ldhu	r10,14(r5)
 8009578:	2a400717 	ldw	r9,28(r5)
 800957c:	2a000917 	ldw	r8,36(r5)
 8009580:	defee204 	addi	sp,sp,-1144
 8009584:	00c10004 	movi	r3,1024
 8009588:	dc011a15 	stw	r16,1128(sp)
 800958c:	10bfff4c 	andi	r2,r2,65533
 8009590:	2821883a 	mov	r16,r5
 8009594:	d8cb883a 	add	r5,sp,r3
 8009598:	dc811c15 	stw	r18,1136(sp)
 800959c:	dc411b15 	stw	r17,1132(sp)
 80095a0:	dfc11d15 	stw	ra,1140(sp)
 80095a4:	2025883a 	mov	r18,r4
 80095a8:	d881030d 	sth	r2,1036(sp)
 80095ac:	dac11915 	stw	r11,1124(sp)
 80095b0:	da81038d 	sth	r10,1038(sp)
 80095b4:	da410715 	stw	r9,1052(sp)
 80095b8:	da010915 	stw	r8,1060(sp)
 80095bc:	dec10015 	stw	sp,1024(sp)
 80095c0:	dec10415 	stw	sp,1040(sp)
 80095c4:	d8c10215 	stw	r3,1032(sp)
 80095c8:	d8c10515 	stw	r3,1044(sp)
 80095cc:	d8010615 	stw	zero,1048(sp)
 80095d0:	80073580 	call	8007358 <___vfprintf_internal_r>
 80095d4:	1023883a 	mov	r17,r2
 80095d8:	10000416 	blt	r2,zero,80095ec <__sbprintf+0x80>
 80095dc:	d9410004 	addi	r5,sp,1024
 80095e0:	9009883a 	mov	r4,r18
 80095e4:	800b2200 	call	800b220 <_fflush_r>
 80095e8:	10000d1e 	bne	r2,zero,8009620 <__sbprintf+0xb4>
 80095ec:	d881030b 	ldhu	r2,1036(sp)
 80095f0:	1080100c 	andi	r2,r2,64
 80095f4:	10000326 	beq	r2,zero,8009604 <__sbprintf+0x98>
 80095f8:	8080030b 	ldhu	r2,12(r16)
 80095fc:	10801014 	ori	r2,r2,64
 8009600:	8080030d 	sth	r2,12(r16)
 8009604:	8805883a 	mov	r2,r17
 8009608:	dfc11d17 	ldw	ra,1140(sp)
 800960c:	dc811c17 	ldw	r18,1136(sp)
 8009610:	dc411b17 	ldw	r17,1132(sp)
 8009614:	dc011a17 	ldw	r16,1128(sp)
 8009618:	dec11e04 	addi	sp,sp,1144
 800961c:	f800283a 	ret
 8009620:	047fffc4 	movi	r17,-1
 8009624:	003ff106 	br	80095ec <__alt_data_end+0xfc0095ec>

08009628 <__swsetup_r>:
 8009628:	00820074 	movhi	r2,2049
 800962c:	defffd04 	addi	sp,sp,-12
 8009630:	109df204 	addi	r2,r2,30664
 8009634:	dc400115 	stw	r17,4(sp)
 8009638:	2023883a 	mov	r17,r4
 800963c:	11000017 	ldw	r4,0(r2)
 8009640:	dc000015 	stw	r16,0(sp)
 8009644:	dfc00215 	stw	ra,8(sp)
 8009648:	2821883a 	mov	r16,r5
 800964c:	20000226 	beq	r4,zero,8009658 <__swsetup_r+0x30>
 8009650:	20800e17 	ldw	r2,56(r4)
 8009654:	10003126 	beq	r2,zero,800971c <__swsetup_r+0xf4>
 8009658:	8080030b 	ldhu	r2,12(r16)
 800965c:	10c0020c 	andi	r3,r2,8
 8009660:	1009883a 	mov	r4,r2
 8009664:	18000f26 	beq	r3,zero,80096a4 <__swsetup_r+0x7c>
 8009668:	80c00417 	ldw	r3,16(r16)
 800966c:	18001526 	beq	r3,zero,80096c4 <__swsetup_r+0x9c>
 8009670:	1100004c 	andi	r4,r2,1
 8009674:	20001c1e 	bne	r4,zero,80096e8 <__swsetup_r+0xc0>
 8009678:	1080008c 	andi	r2,r2,2
 800967c:	1000291e 	bne	r2,zero,8009724 <__swsetup_r+0xfc>
 8009680:	80800517 	ldw	r2,20(r16)
 8009684:	80800215 	stw	r2,8(r16)
 8009688:	18001c26 	beq	r3,zero,80096fc <__swsetup_r+0xd4>
 800968c:	0005883a 	mov	r2,zero
 8009690:	dfc00217 	ldw	ra,8(sp)
 8009694:	dc400117 	ldw	r17,4(sp)
 8009698:	dc000017 	ldw	r16,0(sp)
 800969c:	dec00304 	addi	sp,sp,12
 80096a0:	f800283a 	ret
 80096a4:	2080040c 	andi	r2,r4,16
 80096a8:	10002e26 	beq	r2,zero,8009764 <__swsetup_r+0x13c>
 80096ac:	2080010c 	andi	r2,r4,4
 80096b0:	10001e1e 	bne	r2,zero,800972c <__swsetup_r+0x104>
 80096b4:	80c00417 	ldw	r3,16(r16)
 80096b8:	20800214 	ori	r2,r4,8
 80096bc:	8080030d 	sth	r2,12(r16)
 80096c0:	183feb1e 	bne	r3,zero,8009670 <__alt_data_end+0xfc009670>
 80096c4:	1100a00c 	andi	r4,r2,640
 80096c8:	01408004 	movi	r5,512
 80096cc:	217fe826 	beq	r4,r5,8009670 <__alt_data_end+0xfc009670>
 80096d0:	800b883a 	mov	r5,r16
 80096d4:	8809883a 	mov	r4,r17
 80096d8:	800c1a00 	call	800c1a0 <__smakebuf_r>
 80096dc:	8080030b 	ldhu	r2,12(r16)
 80096e0:	80c00417 	ldw	r3,16(r16)
 80096e4:	003fe206 	br	8009670 <__alt_data_end+0xfc009670>
 80096e8:	80800517 	ldw	r2,20(r16)
 80096ec:	80000215 	stw	zero,8(r16)
 80096f0:	0085c83a 	sub	r2,zero,r2
 80096f4:	80800615 	stw	r2,24(r16)
 80096f8:	183fe41e 	bne	r3,zero,800968c <__alt_data_end+0xfc00968c>
 80096fc:	80c0030b 	ldhu	r3,12(r16)
 8009700:	0005883a 	mov	r2,zero
 8009704:	1900200c 	andi	r4,r3,128
 8009708:	203fe126 	beq	r4,zero,8009690 <__alt_data_end+0xfc009690>
 800970c:	18c01014 	ori	r3,r3,64
 8009710:	80c0030d 	sth	r3,12(r16)
 8009714:	00bfffc4 	movi	r2,-1
 8009718:	003fdd06 	br	8009690 <__alt_data_end+0xfc009690>
 800971c:	800b5fc0 	call	800b5fc <__sinit>
 8009720:	003fcd06 	br	8009658 <__alt_data_end+0xfc009658>
 8009724:	0005883a 	mov	r2,zero
 8009728:	003fd606 	br	8009684 <__alt_data_end+0xfc009684>
 800972c:	81400c17 	ldw	r5,48(r16)
 8009730:	28000626 	beq	r5,zero,800974c <__swsetup_r+0x124>
 8009734:	80801004 	addi	r2,r16,64
 8009738:	28800326 	beq	r5,r2,8009748 <__swsetup_r+0x120>
 800973c:	8809883a 	mov	r4,r17
 8009740:	800b7700 	call	800b770 <_free_r>
 8009744:	8100030b 	ldhu	r4,12(r16)
 8009748:	80000c15 	stw	zero,48(r16)
 800974c:	80c00417 	ldw	r3,16(r16)
 8009750:	00bff6c4 	movi	r2,-37
 8009754:	1108703a 	and	r4,r2,r4
 8009758:	80000115 	stw	zero,4(r16)
 800975c:	80c00015 	stw	r3,0(r16)
 8009760:	003fd506 	br	80096b8 <__alt_data_end+0xfc0096b8>
 8009764:	00800244 	movi	r2,9
 8009768:	88800015 	stw	r2,0(r17)
 800976c:	20801014 	ori	r2,r4,64
 8009770:	8080030d 	sth	r2,12(r16)
 8009774:	00bfffc4 	movi	r2,-1
 8009778:	003fc506 	br	8009690 <__alt_data_end+0xfc009690>

0800977c <quorem>:
 800977c:	defff704 	addi	sp,sp,-36
 8009780:	dc800215 	stw	r18,8(sp)
 8009784:	20800417 	ldw	r2,16(r4)
 8009788:	2c800417 	ldw	r18,16(r5)
 800978c:	dfc00815 	stw	ra,32(sp)
 8009790:	ddc00715 	stw	r23,28(sp)
 8009794:	dd800615 	stw	r22,24(sp)
 8009798:	dd400515 	stw	r21,20(sp)
 800979c:	dd000415 	stw	r20,16(sp)
 80097a0:	dcc00315 	stw	r19,12(sp)
 80097a4:	dc400115 	stw	r17,4(sp)
 80097a8:	dc000015 	stw	r16,0(sp)
 80097ac:	14807116 	blt	r2,r18,8009974 <quorem+0x1f8>
 80097b0:	94bfffc4 	addi	r18,r18,-1
 80097b4:	94ad883a 	add	r22,r18,r18
 80097b8:	b5ad883a 	add	r22,r22,r22
 80097bc:	2c400504 	addi	r17,r5,20
 80097c0:	8da9883a 	add	r20,r17,r22
 80097c4:	25400504 	addi	r21,r4,20
 80097c8:	282f883a 	mov	r23,r5
 80097cc:	adad883a 	add	r22,r21,r22
 80097d0:	a1400017 	ldw	r5,0(r20)
 80097d4:	2021883a 	mov	r16,r4
 80097d8:	b1000017 	ldw	r4,0(r22)
 80097dc:	29400044 	addi	r5,r5,1
 80097e0:	800333c0 	call	800333c <__udivsi3>
 80097e4:	1027883a 	mov	r19,r2
 80097e8:	10002c26 	beq	r2,zero,800989c <quorem+0x120>
 80097ec:	a813883a 	mov	r9,r21
 80097f0:	880b883a 	mov	r5,r17
 80097f4:	0009883a 	mov	r4,zero
 80097f8:	000d883a 	mov	r6,zero
 80097fc:	2a000017 	ldw	r8,0(r5)
 8009800:	49c00017 	ldw	r7,0(r9)
 8009804:	29400104 	addi	r5,r5,4
 8009808:	40bfffcc 	andi	r2,r8,65535
 800980c:	14c5383a 	mul	r2,r2,r19
 8009810:	4010d43a 	srli	r8,r8,16
 8009814:	38ffffcc 	andi	r3,r7,65535
 8009818:	1105883a 	add	r2,r2,r4
 800981c:	1008d43a 	srli	r4,r2,16
 8009820:	44d1383a 	mul	r8,r8,r19
 8009824:	198d883a 	add	r6,r3,r6
 8009828:	10ffffcc 	andi	r3,r2,65535
 800982c:	30c7c83a 	sub	r3,r6,r3
 8009830:	380ed43a 	srli	r7,r7,16
 8009834:	4105883a 	add	r2,r8,r4
 8009838:	180dd43a 	srai	r6,r3,16
 800983c:	113fffcc 	andi	r4,r2,65535
 8009840:	390fc83a 	sub	r7,r7,r4
 8009844:	398d883a 	add	r6,r7,r6
 8009848:	300e943a 	slli	r7,r6,16
 800984c:	18ffffcc 	andi	r3,r3,65535
 8009850:	1008d43a 	srli	r4,r2,16
 8009854:	38ceb03a 	or	r7,r7,r3
 8009858:	49c00015 	stw	r7,0(r9)
 800985c:	300dd43a 	srai	r6,r6,16
 8009860:	4a400104 	addi	r9,r9,4
 8009864:	a17fe52e 	bgeu	r20,r5,80097fc <__alt_data_end+0xfc0097fc>
 8009868:	b0800017 	ldw	r2,0(r22)
 800986c:	10000b1e 	bne	r2,zero,800989c <quorem+0x120>
 8009870:	b0bfff04 	addi	r2,r22,-4
 8009874:	a880082e 	bgeu	r21,r2,8009898 <quorem+0x11c>
 8009878:	b0ffff17 	ldw	r3,-4(r22)
 800987c:	18000326 	beq	r3,zero,800988c <quorem+0x110>
 8009880:	00000506 	br	8009898 <quorem+0x11c>
 8009884:	10c00017 	ldw	r3,0(r2)
 8009888:	1800031e 	bne	r3,zero,8009898 <quorem+0x11c>
 800988c:	10bfff04 	addi	r2,r2,-4
 8009890:	94bfffc4 	addi	r18,r18,-1
 8009894:	a8bffb36 	bltu	r21,r2,8009884 <__alt_data_end+0xfc009884>
 8009898:	84800415 	stw	r18,16(r16)
 800989c:	b80b883a 	mov	r5,r23
 80098a0:	8009883a 	mov	r4,r16
 80098a4:	800d8e00 	call	800d8e0 <__mcmp>
 80098a8:	10002616 	blt	r2,zero,8009944 <quorem+0x1c8>
 80098ac:	9cc00044 	addi	r19,r19,1
 80098b0:	a805883a 	mov	r2,r21
 80098b4:	000b883a 	mov	r5,zero
 80098b8:	11000017 	ldw	r4,0(r2)
 80098bc:	89800017 	ldw	r6,0(r17)
 80098c0:	10800104 	addi	r2,r2,4
 80098c4:	20ffffcc 	andi	r3,r4,65535
 80098c8:	194b883a 	add	r5,r3,r5
 80098cc:	30ffffcc 	andi	r3,r6,65535
 80098d0:	28c7c83a 	sub	r3,r5,r3
 80098d4:	300cd43a 	srli	r6,r6,16
 80098d8:	2008d43a 	srli	r4,r4,16
 80098dc:	180bd43a 	srai	r5,r3,16
 80098e0:	18ffffcc 	andi	r3,r3,65535
 80098e4:	2189c83a 	sub	r4,r4,r6
 80098e8:	2149883a 	add	r4,r4,r5
 80098ec:	200c943a 	slli	r6,r4,16
 80098f0:	8c400104 	addi	r17,r17,4
 80098f4:	200bd43a 	srai	r5,r4,16
 80098f8:	30c6b03a 	or	r3,r6,r3
 80098fc:	10ffff15 	stw	r3,-4(r2)
 8009900:	a47fed2e 	bgeu	r20,r17,80098b8 <__alt_data_end+0xfc0098b8>
 8009904:	9485883a 	add	r2,r18,r18
 8009908:	1085883a 	add	r2,r2,r2
 800990c:	a887883a 	add	r3,r21,r2
 8009910:	18800017 	ldw	r2,0(r3)
 8009914:	10000b1e 	bne	r2,zero,8009944 <quorem+0x1c8>
 8009918:	18bfff04 	addi	r2,r3,-4
 800991c:	a880082e 	bgeu	r21,r2,8009940 <quorem+0x1c4>
 8009920:	18ffff17 	ldw	r3,-4(r3)
 8009924:	18000326 	beq	r3,zero,8009934 <quorem+0x1b8>
 8009928:	00000506 	br	8009940 <quorem+0x1c4>
 800992c:	10c00017 	ldw	r3,0(r2)
 8009930:	1800031e 	bne	r3,zero,8009940 <quorem+0x1c4>
 8009934:	10bfff04 	addi	r2,r2,-4
 8009938:	94bfffc4 	addi	r18,r18,-1
 800993c:	a8bffb36 	bltu	r21,r2,800992c <__alt_data_end+0xfc00992c>
 8009940:	84800415 	stw	r18,16(r16)
 8009944:	9805883a 	mov	r2,r19
 8009948:	dfc00817 	ldw	ra,32(sp)
 800994c:	ddc00717 	ldw	r23,28(sp)
 8009950:	dd800617 	ldw	r22,24(sp)
 8009954:	dd400517 	ldw	r21,20(sp)
 8009958:	dd000417 	ldw	r20,16(sp)
 800995c:	dcc00317 	ldw	r19,12(sp)
 8009960:	dc800217 	ldw	r18,8(sp)
 8009964:	dc400117 	ldw	r17,4(sp)
 8009968:	dc000017 	ldw	r16,0(sp)
 800996c:	dec00904 	addi	sp,sp,36
 8009970:	f800283a 	ret
 8009974:	0005883a 	mov	r2,zero
 8009978:	003ff306 	br	8009948 <__alt_data_end+0xfc009948>

0800997c <_dtoa_r>:
 800997c:	20801017 	ldw	r2,64(r4)
 8009980:	deffde04 	addi	sp,sp,-136
 8009984:	df002015 	stw	fp,128(sp)
 8009988:	dcc01b15 	stw	r19,108(sp)
 800998c:	dc801a15 	stw	r18,104(sp)
 8009990:	dc401915 	stw	r17,100(sp)
 8009994:	dc001815 	stw	r16,96(sp)
 8009998:	dfc02115 	stw	ra,132(sp)
 800999c:	ddc01f15 	stw	r23,124(sp)
 80099a0:	dd801e15 	stw	r22,120(sp)
 80099a4:	dd401d15 	stw	r21,116(sp)
 80099a8:	dd001c15 	stw	r20,112(sp)
 80099ac:	d9c00315 	stw	r7,12(sp)
 80099b0:	2039883a 	mov	fp,r4
 80099b4:	3023883a 	mov	r17,r6
 80099b8:	2825883a 	mov	r18,r5
 80099bc:	dc002417 	ldw	r16,144(sp)
 80099c0:	3027883a 	mov	r19,r6
 80099c4:	10000826 	beq	r2,zero,80099e8 <_dtoa_r+0x6c>
 80099c8:	21801117 	ldw	r6,68(r4)
 80099cc:	00c00044 	movi	r3,1
 80099d0:	100b883a 	mov	r5,r2
 80099d4:	1986983a 	sll	r3,r3,r6
 80099d8:	11800115 	stw	r6,4(r2)
 80099dc:	10c00215 	stw	r3,8(r2)
 80099e0:	800d0c00 	call	800d0c0 <_Bfree>
 80099e4:	e0001015 	stw	zero,64(fp)
 80099e8:	88002e16 	blt	r17,zero,8009aa4 <_dtoa_r+0x128>
 80099ec:	80000015 	stw	zero,0(r16)
 80099f0:	889ffc2c 	andhi	r2,r17,32752
 80099f4:	00dffc34 	movhi	r3,32752
 80099f8:	10c01c26 	beq	r2,r3,8009a6c <_dtoa_r+0xf0>
 80099fc:	000d883a 	mov	r6,zero
 8009a00:	000f883a 	mov	r7,zero
 8009a04:	9009883a 	mov	r4,r18
 8009a08:	980b883a 	mov	r5,r19
 8009a0c:	8005a8c0 	call	8005a8c <__eqdf2>
 8009a10:	10002b1e 	bne	r2,zero,8009ac0 <_dtoa_r+0x144>
 8009a14:	d9c02317 	ldw	r7,140(sp)
 8009a18:	00800044 	movi	r2,1
 8009a1c:	38800015 	stw	r2,0(r7)
 8009a20:	d8802517 	ldw	r2,148(sp)
 8009a24:	10019e26 	beq	r2,zero,800a0a0 <_dtoa_r+0x724>
 8009a28:	d8c02517 	ldw	r3,148(sp)
 8009a2c:	00820074 	movhi	r2,2049
 8009a30:	10969244 	addi	r2,r2,23113
 8009a34:	18800015 	stw	r2,0(r3)
 8009a38:	10bfffc4 	addi	r2,r2,-1
 8009a3c:	dfc02117 	ldw	ra,132(sp)
 8009a40:	df002017 	ldw	fp,128(sp)
 8009a44:	ddc01f17 	ldw	r23,124(sp)
 8009a48:	dd801e17 	ldw	r22,120(sp)
 8009a4c:	dd401d17 	ldw	r21,116(sp)
 8009a50:	dd001c17 	ldw	r20,112(sp)
 8009a54:	dcc01b17 	ldw	r19,108(sp)
 8009a58:	dc801a17 	ldw	r18,104(sp)
 8009a5c:	dc401917 	ldw	r17,100(sp)
 8009a60:	dc001817 	ldw	r16,96(sp)
 8009a64:	dec02204 	addi	sp,sp,136
 8009a68:	f800283a 	ret
 8009a6c:	d8c02317 	ldw	r3,140(sp)
 8009a70:	0089c3c4 	movi	r2,9999
 8009a74:	18800015 	stw	r2,0(r3)
 8009a78:	90017726 	beq	r18,zero,800a058 <_dtoa_r+0x6dc>
 8009a7c:	00820074 	movhi	r2,2049
 8009a80:	10969e04 	addi	r2,r2,23160
 8009a84:	d9002517 	ldw	r4,148(sp)
 8009a88:	203fec26 	beq	r4,zero,8009a3c <__alt_data_end+0xfc009a3c>
 8009a8c:	10c000c7 	ldb	r3,3(r2)
 8009a90:	1801781e 	bne	r3,zero,800a074 <_dtoa_r+0x6f8>
 8009a94:	10c000c4 	addi	r3,r2,3
 8009a98:	d9802517 	ldw	r6,148(sp)
 8009a9c:	30c00015 	stw	r3,0(r6)
 8009aa0:	003fe606 	br	8009a3c <__alt_data_end+0xfc009a3c>
 8009aa4:	04e00034 	movhi	r19,32768
 8009aa8:	9cffffc4 	addi	r19,r19,-1
 8009aac:	00800044 	movi	r2,1
 8009ab0:	8ce6703a 	and	r19,r17,r19
 8009ab4:	80800015 	stw	r2,0(r16)
 8009ab8:	9823883a 	mov	r17,r19
 8009abc:	003fcc06 	br	80099f0 <__alt_data_end+0xfc0099f0>
 8009ac0:	d8800204 	addi	r2,sp,8
 8009ac4:	d8800015 	stw	r2,0(sp)
 8009ac8:	d9c00104 	addi	r7,sp,4
 8009acc:	900b883a 	mov	r5,r18
 8009ad0:	980d883a 	mov	r6,r19
 8009ad4:	e009883a 	mov	r4,fp
 8009ad8:	8820d53a 	srli	r16,r17,20
 8009adc:	800dcac0 	call	800dcac <__d2b>
 8009ae0:	d8800915 	stw	r2,36(sp)
 8009ae4:	8001651e 	bne	r16,zero,800a07c <_dtoa_r+0x700>
 8009ae8:	dd800217 	ldw	r22,8(sp)
 8009aec:	dc000117 	ldw	r16,4(sp)
 8009af0:	00800804 	movi	r2,32
 8009af4:	b421883a 	add	r16,r22,r16
 8009af8:	80c10c84 	addi	r3,r16,1074
 8009afc:	10c2d10e 	bge	r2,r3,800a644 <_dtoa_r+0xcc8>
 8009b00:	00801004 	movi	r2,64
 8009b04:	81010484 	addi	r4,r16,1042
 8009b08:	10c7c83a 	sub	r3,r2,r3
 8009b0c:	9108d83a 	srl	r4,r18,r4
 8009b10:	88e2983a 	sll	r17,r17,r3
 8009b14:	2448b03a 	or	r4,r4,r17
 8009b18:	80112100 	call	8011210 <__floatunsidf>
 8009b1c:	017f8434 	movhi	r5,65040
 8009b20:	01800044 	movi	r6,1
 8009b24:	1009883a 	mov	r4,r2
 8009b28:	194b883a 	add	r5,r3,r5
 8009b2c:	843fffc4 	addi	r16,r16,-1
 8009b30:	d9801115 	stw	r6,68(sp)
 8009b34:	000d883a 	mov	r6,zero
 8009b38:	01cffe34 	movhi	r7,16376
 8009b3c:	80063fc0 	call	80063fc <__subdf3>
 8009b40:	0198dbf4 	movhi	r6,25455
 8009b44:	01cff4f4 	movhi	r7,16339
 8009b48:	3190d844 	addi	r6,r6,17249
 8009b4c:	39e1e9c4 	addi	r7,r7,-30809
 8009b50:	1009883a 	mov	r4,r2
 8009b54:	180b883a 	mov	r5,r3
 8009b58:	8005ce40 	call	8005ce4 <__muldf3>
 8009b5c:	01a2d874 	movhi	r6,35681
 8009b60:	01cff1f4 	movhi	r7,16327
 8009b64:	31b22cc4 	addi	r6,r6,-14157
 8009b68:	39e28a04 	addi	r7,r7,-30168
 8009b6c:	180b883a 	mov	r5,r3
 8009b70:	1009883a 	mov	r4,r2
 8009b74:	80048f80 	call	80048f8 <__adddf3>
 8009b78:	8009883a 	mov	r4,r16
 8009b7c:	1029883a 	mov	r20,r2
 8009b80:	1823883a 	mov	r17,r3
 8009b84:	8006d780 	call	8006d78 <__floatsidf>
 8009b88:	019427f4 	movhi	r6,20639
 8009b8c:	01cff4f4 	movhi	r7,16339
 8009b90:	319e7ec4 	addi	r6,r6,31227
 8009b94:	39d104c4 	addi	r7,r7,17427
 8009b98:	1009883a 	mov	r4,r2
 8009b9c:	180b883a 	mov	r5,r3
 8009ba0:	8005ce40 	call	8005ce4 <__muldf3>
 8009ba4:	100d883a 	mov	r6,r2
 8009ba8:	180f883a 	mov	r7,r3
 8009bac:	a009883a 	mov	r4,r20
 8009bb0:	880b883a 	mov	r5,r17
 8009bb4:	80048f80 	call	80048f8 <__adddf3>
 8009bb8:	1009883a 	mov	r4,r2
 8009bbc:	180b883a 	mov	r5,r3
 8009bc0:	1029883a 	mov	r20,r2
 8009bc4:	1823883a 	mov	r17,r3
 8009bc8:	8006cf80 	call	8006cf8 <__fixdfsi>
 8009bcc:	000d883a 	mov	r6,zero
 8009bd0:	000f883a 	mov	r7,zero
 8009bd4:	a009883a 	mov	r4,r20
 8009bd8:	880b883a 	mov	r5,r17
 8009bdc:	d8800515 	stw	r2,20(sp)
 8009be0:	8005bf00 	call	8005bf0 <__ledf2>
 8009be4:	10028716 	blt	r2,zero,800a604 <_dtoa_r+0xc88>
 8009be8:	d8c00517 	ldw	r3,20(sp)
 8009bec:	00800584 	movi	r2,22
 8009bf0:	10c27536 	bltu	r2,r3,800a5c8 <_dtoa_r+0xc4c>
 8009bf4:	180490fa 	slli	r2,r3,3
 8009bf8:	00c20074 	movhi	r3,2049
 8009bfc:	18d6b904 	addi	r3,r3,23268
 8009c00:	1885883a 	add	r2,r3,r2
 8009c04:	11000017 	ldw	r4,0(r2)
 8009c08:	11400117 	ldw	r5,4(r2)
 8009c0c:	900d883a 	mov	r6,r18
 8009c10:	980f883a 	mov	r7,r19
 8009c14:	8005b140 	call	8005b14 <__gedf2>
 8009c18:	00828d0e 	bge	zero,r2,800a650 <_dtoa_r+0xcd4>
 8009c1c:	d9000517 	ldw	r4,20(sp)
 8009c20:	d8000e15 	stw	zero,56(sp)
 8009c24:	213fffc4 	addi	r4,r4,-1
 8009c28:	d9000515 	stw	r4,20(sp)
 8009c2c:	b42dc83a 	sub	r22,r22,r16
 8009c30:	b5bfffc4 	addi	r22,r22,-1
 8009c34:	b0026f16 	blt	r22,zero,800a5f4 <_dtoa_r+0xc78>
 8009c38:	d8000815 	stw	zero,32(sp)
 8009c3c:	d9c00517 	ldw	r7,20(sp)
 8009c40:	38026416 	blt	r7,zero,800a5d4 <_dtoa_r+0xc58>
 8009c44:	b1ed883a 	add	r22,r22,r7
 8009c48:	d9c00d15 	stw	r7,52(sp)
 8009c4c:	d8000a15 	stw	zero,40(sp)
 8009c50:	d9800317 	ldw	r6,12(sp)
 8009c54:	00800244 	movi	r2,9
 8009c58:	11811436 	bltu	r2,r6,800a0ac <_dtoa_r+0x730>
 8009c5c:	00800144 	movi	r2,5
 8009c60:	1184e10e 	bge	r2,r6,800afe8 <_dtoa_r+0x166c>
 8009c64:	31bfff04 	addi	r6,r6,-4
 8009c68:	d9800315 	stw	r6,12(sp)
 8009c6c:	0023883a 	mov	r17,zero
 8009c70:	d9800317 	ldw	r6,12(sp)
 8009c74:	008000c4 	movi	r2,3
 8009c78:	30836726 	beq	r6,r2,800aa18 <_dtoa_r+0x109c>
 8009c7c:	1183410e 	bge	r2,r6,800a984 <_dtoa_r+0x1008>
 8009c80:	d9c00317 	ldw	r7,12(sp)
 8009c84:	00800104 	movi	r2,4
 8009c88:	38827c26 	beq	r7,r2,800a67c <_dtoa_r+0xd00>
 8009c8c:	00800144 	movi	r2,5
 8009c90:	3884c41e 	bne	r7,r2,800afa4 <_dtoa_r+0x1628>
 8009c94:	00800044 	movi	r2,1
 8009c98:	d8800b15 	stw	r2,44(sp)
 8009c9c:	d8c00517 	ldw	r3,20(sp)
 8009ca0:	d9002217 	ldw	r4,136(sp)
 8009ca4:	1907883a 	add	r3,r3,r4
 8009ca8:	19800044 	addi	r6,r3,1
 8009cac:	d8c00c15 	stw	r3,48(sp)
 8009cb0:	d9800615 	stw	r6,24(sp)
 8009cb4:	0183a40e 	bge	zero,r6,800ab48 <_dtoa_r+0x11cc>
 8009cb8:	d9800617 	ldw	r6,24(sp)
 8009cbc:	3021883a 	mov	r16,r6
 8009cc0:	e0001115 	stw	zero,68(fp)
 8009cc4:	008005c4 	movi	r2,23
 8009cc8:	1184c92e 	bgeu	r2,r6,800aff0 <_dtoa_r+0x1674>
 8009ccc:	00c00044 	movi	r3,1
 8009cd0:	00800104 	movi	r2,4
 8009cd4:	1085883a 	add	r2,r2,r2
 8009cd8:	11000504 	addi	r4,r2,20
 8009cdc:	180b883a 	mov	r5,r3
 8009ce0:	18c00044 	addi	r3,r3,1
 8009ce4:	313ffb2e 	bgeu	r6,r4,8009cd4 <__alt_data_end+0xfc009cd4>
 8009ce8:	e1401115 	stw	r5,68(fp)
 8009cec:	e009883a 	mov	r4,fp
 8009cf0:	800d0180 	call	800d018 <_Balloc>
 8009cf4:	d8800715 	stw	r2,28(sp)
 8009cf8:	e0801015 	stw	r2,64(fp)
 8009cfc:	00800384 	movi	r2,14
 8009d00:	1400f736 	bltu	r2,r16,800a0e0 <_dtoa_r+0x764>
 8009d04:	8800f626 	beq	r17,zero,800a0e0 <_dtoa_r+0x764>
 8009d08:	d9c00517 	ldw	r7,20(sp)
 8009d0c:	01c39a0e 	bge	zero,r7,800ab78 <_dtoa_r+0x11fc>
 8009d10:	388003cc 	andi	r2,r7,15
 8009d14:	100490fa 	slli	r2,r2,3
 8009d18:	382bd13a 	srai	r21,r7,4
 8009d1c:	00c20074 	movhi	r3,2049
 8009d20:	18d6b904 	addi	r3,r3,23268
 8009d24:	1885883a 	add	r2,r3,r2
 8009d28:	a8c0040c 	andi	r3,r21,16
 8009d2c:	12400017 	ldw	r9,0(r2)
 8009d30:	12000117 	ldw	r8,4(r2)
 8009d34:	18037926 	beq	r3,zero,800ab1c <_dtoa_r+0x11a0>
 8009d38:	00820074 	movhi	r2,2049
 8009d3c:	1096af04 	addi	r2,r2,23228
 8009d40:	11800817 	ldw	r6,32(r2)
 8009d44:	11c00917 	ldw	r7,36(r2)
 8009d48:	9009883a 	mov	r4,r18
 8009d4c:	980b883a 	mov	r5,r19
 8009d50:	da001715 	stw	r8,92(sp)
 8009d54:	da401615 	stw	r9,88(sp)
 8009d58:	80051a40 	call	80051a4 <__divdf3>
 8009d5c:	da001717 	ldw	r8,92(sp)
 8009d60:	da401617 	ldw	r9,88(sp)
 8009d64:	ad4003cc 	andi	r21,r21,15
 8009d68:	040000c4 	movi	r16,3
 8009d6c:	1023883a 	mov	r17,r2
 8009d70:	1829883a 	mov	r20,r3
 8009d74:	a8001126 	beq	r21,zero,8009dbc <_dtoa_r+0x440>
 8009d78:	05c20074 	movhi	r23,2049
 8009d7c:	bdd6af04 	addi	r23,r23,23228
 8009d80:	4805883a 	mov	r2,r9
 8009d84:	4007883a 	mov	r3,r8
 8009d88:	a980004c 	andi	r6,r21,1
 8009d8c:	1009883a 	mov	r4,r2
 8009d90:	a82bd07a 	srai	r21,r21,1
 8009d94:	180b883a 	mov	r5,r3
 8009d98:	30000426 	beq	r6,zero,8009dac <_dtoa_r+0x430>
 8009d9c:	b9800017 	ldw	r6,0(r23)
 8009da0:	b9c00117 	ldw	r7,4(r23)
 8009da4:	84000044 	addi	r16,r16,1
 8009da8:	8005ce40 	call	8005ce4 <__muldf3>
 8009dac:	bdc00204 	addi	r23,r23,8
 8009db0:	a83ff51e 	bne	r21,zero,8009d88 <__alt_data_end+0xfc009d88>
 8009db4:	1013883a 	mov	r9,r2
 8009db8:	1811883a 	mov	r8,r3
 8009dbc:	480d883a 	mov	r6,r9
 8009dc0:	400f883a 	mov	r7,r8
 8009dc4:	8809883a 	mov	r4,r17
 8009dc8:	a00b883a 	mov	r5,r20
 8009dcc:	80051a40 	call	80051a4 <__divdf3>
 8009dd0:	d8800f15 	stw	r2,60(sp)
 8009dd4:	d8c01015 	stw	r3,64(sp)
 8009dd8:	d8c00e17 	ldw	r3,56(sp)
 8009ddc:	18000626 	beq	r3,zero,8009df8 <_dtoa_r+0x47c>
 8009de0:	d9000f17 	ldw	r4,60(sp)
 8009de4:	d9401017 	ldw	r5,64(sp)
 8009de8:	000d883a 	mov	r6,zero
 8009dec:	01cffc34 	movhi	r7,16368
 8009df0:	8005bf00 	call	8005bf0 <__ledf2>
 8009df4:	10040b16 	blt	r2,zero,800ae24 <_dtoa_r+0x14a8>
 8009df8:	8009883a 	mov	r4,r16
 8009dfc:	8006d780 	call	8006d78 <__floatsidf>
 8009e00:	d9800f17 	ldw	r6,60(sp)
 8009e04:	d9c01017 	ldw	r7,64(sp)
 8009e08:	1009883a 	mov	r4,r2
 8009e0c:	180b883a 	mov	r5,r3
 8009e10:	8005ce40 	call	8005ce4 <__muldf3>
 8009e14:	000d883a 	mov	r6,zero
 8009e18:	01d00734 	movhi	r7,16412
 8009e1c:	1009883a 	mov	r4,r2
 8009e20:	180b883a 	mov	r5,r3
 8009e24:	80048f80 	call	80048f8 <__adddf3>
 8009e28:	1021883a 	mov	r16,r2
 8009e2c:	d8800617 	ldw	r2,24(sp)
 8009e30:	047f3034 	movhi	r17,64704
 8009e34:	1c63883a 	add	r17,r3,r17
 8009e38:	10031826 	beq	r2,zero,800aa9c <_dtoa_r+0x1120>
 8009e3c:	d8c00517 	ldw	r3,20(sp)
 8009e40:	db000617 	ldw	r12,24(sp)
 8009e44:	d8c01315 	stw	r3,76(sp)
 8009e48:	d9000b17 	ldw	r4,44(sp)
 8009e4c:	20038f26 	beq	r4,zero,800ac8c <_dtoa_r+0x1310>
 8009e50:	60bfffc4 	addi	r2,r12,-1
 8009e54:	100490fa 	slli	r2,r2,3
 8009e58:	00c20074 	movhi	r3,2049
 8009e5c:	18d6b904 	addi	r3,r3,23268
 8009e60:	1885883a 	add	r2,r3,r2
 8009e64:	11800017 	ldw	r6,0(r2)
 8009e68:	11c00117 	ldw	r7,4(r2)
 8009e6c:	d8800717 	ldw	r2,28(sp)
 8009e70:	0009883a 	mov	r4,zero
 8009e74:	014ff834 	movhi	r5,16352
 8009e78:	db001615 	stw	r12,88(sp)
 8009e7c:	15c00044 	addi	r23,r2,1
 8009e80:	80051a40 	call	80051a4 <__divdf3>
 8009e84:	800d883a 	mov	r6,r16
 8009e88:	880f883a 	mov	r7,r17
 8009e8c:	1009883a 	mov	r4,r2
 8009e90:	180b883a 	mov	r5,r3
 8009e94:	80063fc0 	call	80063fc <__subdf3>
 8009e98:	d9401017 	ldw	r5,64(sp)
 8009e9c:	d9000f17 	ldw	r4,60(sp)
 8009ea0:	102b883a 	mov	r21,r2
 8009ea4:	d8c01215 	stw	r3,72(sp)
 8009ea8:	8006cf80 	call	8006cf8 <__fixdfsi>
 8009eac:	1009883a 	mov	r4,r2
 8009eb0:	1029883a 	mov	r20,r2
 8009eb4:	8006d780 	call	8006d78 <__floatsidf>
 8009eb8:	d9000f17 	ldw	r4,60(sp)
 8009ebc:	d9401017 	ldw	r5,64(sp)
 8009ec0:	100d883a 	mov	r6,r2
 8009ec4:	180f883a 	mov	r7,r3
 8009ec8:	80063fc0 	call	80063fc <__subdf3>
 8009ecc:	1823883a 	mov	r17,r3
 8009ed0:	d8c00717 	ldw	r3,28(sp)
 8009ed4:	d9401217 	ldw	r5,72(sp)
 8009ed8:	a2000c04 	addi	r8,r20,48
 8009edc:	1021883a 	mov	r16,r2
 8009ee0:	1a000005 	stb	r8,0(r3)
 8009ee4:	800d883a 	mov	r6,r16
 8009ee8:	880f883a 	mov	r7,r17
 8009eec:	a809883a 	mov	r4,r21
 8009ef0:	4029883a 	mov	r20,r8
 8009ef4:	8005b140 	call	8005b14 <__gedf2>
 8009ef8:	00841d16 	blt	zero,r2,800af70 <_dtoa_r+0x15f4>
 8009efc:	800d883a 	mov	r6,r16
 8009f00:	880f883a 	mov	r7,r17
 8009f04:	0009883a 	mov	r4,zero
 8009f08:	014ffc34 	movhi	r5,16368
 8009f0c:	80063fc0 	call	80063fc <__subdf3>
 8009f10:	d9401217 	ldw	r5,72(sp)
 8009f14:	100d883a 	mov	r6,r2
 8009f18:	180f883a 	mov	r7,r3
 8009f1c:	a809883a 	mov	r4,r21
 8009f20:	8005b140 	call	8005b14 <__gedf2>
 8009f24:	db001617 	ldw	r12,88(sp)
 8009f28:	00840e16 	blt	zero,r2,800af64 <_dtoa_r+0x15e8>
 8009f2c:	00800044 	movi	r2,1
 8009f30:	13006b0e 	bge	r2,r12,800a0e0 <_dtoa_r+0x764>
 8009f34:	d9000717 	ldw	r4,28(sp)
 8009f38:	dd800f15 	stw	r22,60(sp)
 8009f3c:	dcc01015 	stw	r19,64(sp)
 8009f40:	2319883a 	add	r12,r4,r12
 8009f44:	dcc01217 	ldw	r19,72(sp)
 8009f48:	602d883a 	mov	r22,r12
 8009f4c:	dc801215 	stw	r18,72(sp)
 8009f50:	b825883a 	mov	r18,r23
 8009f54:	00000906 	br	8009f7c <_dtoa_r+0x600>
 8009f58:	80063fc0 	call	80063fc <__subdf3>
 8009f5c:	a80d883a 	mov	r6,r21
 8009f60:	980f883a 	mov	r7,r19
 8009f64:	1009883a 	mov	r4,r2
 8009f68:	180b883a 	mov	r5,r3
 8009f6c:	8005bf00 	call	8005bf0 <__ledf2>
 8009f70:	1003e816 	blt	r2,zero,800af14 <_dtoa_r+0x1598>
 8009f74:	b825883a 	mov	r18,r23
 8009f78:	bd83e926 	beq	r23,r22,800af20 <_dtoa_r+0x15a4>
 8009f7c:	a809883a 	mov	r4,r21
 8009f80:	980b883a 	mov	r5,r19
 8009f84:	000d883a 	mov	r6,zero
 8009f88:	01d00934 	movhi	r7,16420
 8009f8c:	8005ce40 	call	8005ce4 <__muldf3>
 8009f90:	000d883a 	mov	r6,zero
 8009f94:	01d00934 	movhi	r7,16420
 8009f98:	8009883a 	mov	r4,r16
 8009f9c:	880b883a 	mov	r5,r17
 8009fa0:	102b883a 	mov	r21,r2
 8009fa4:	1827883a 	mov	r19,r3
 8009fa8:	8005ce40 	call	8005ce4 <__muldf3>
 8009fac:	180b883a 	mov	r5,r3
 8009fb0:	1009883a 	mov	r4,r2
 8009fb4:	1821883a 	mov	r16,r3
 8009fb8:	1023883a 	mov	r17,r2
 8009fbc:	8006cf80 	call	8006cf8 <__fixdfsi>
 8009fc0:	1009883a 	mov	r4,r2
 8009fc4:	1029883a 	mov	r20,r2
 8009fc8:	8006d780 	call	8006d78 <__floatsidf>
 8009fcc:	8809883a 	mov	r4,r17
 8009fd0:	800b883a 	mov	r5,r16
 8009fd4:	100d883a 	mov	r6,r2
 8009fd8:	180f883a 	mov	r7,r3
 8009fdc:	80063fc0 	call	80063fc <__subdf3>
 8009fe0:	a5000c04 	addi	r20,r20,48
 8009fe4:	a80d883a 	mov	r6,r21
 8009fe8:	980f883a 	mov	r7,r19
 8009fec:	1009883a 	mov	r4,r2
 8009ff0:	180b883a 	mov	r5,r3
 8009ff4:	95000005 	stb	r20,0(r18)
 8009ff8:	1021883a 	mov	r16,r2
 8009ffc:	1823883a 	mov	r17,r3
 800a000:	8005bf00 	call	8005bf0 <__ledf2>
 800a004:	bdc00044 	addi	r23,r23,1
 800a008:	800d883a 	mov	r6,r16
 800a00c:	880f883a 	mov	r7,r17
 800a010:	0009883a 	mov	r4,zero
 800a014:	014ffc34 	movhi	r5,16368
 800a018:	103fcf0e 	bge	r2,zero,8009f58 <__alt_data_end+0xfc009f58>
 800a01c:	d8c01317 	ldw	r3,76(sp)
 800a020:	d8c00515 	stw	r3,20(sp)
 800a024:	d9400917 	ldw	r5,36(sp)
 800a028:	e009883a 	mov	r4,fp
 800a02c:	800d0c00 	call	800d0c0 <_Bfree>
 800a030:	d9000517 	ldw	r4,20(sp)
 800a034:	d9802317 	ldw	r6,140(sp)
 800a038:	d9c02517 	ldw	r7,148(sp)
 800a03c:	b8000005 	stb	zero,0(r23)
 800a040:	20800044 	addi	r2,r4,1
 800a044:	30800015 	stw	r2,0(r6)
 800a048:	3802aa26 	beq	r7,zero,800aaf4 <_dtoa_r+0x1178>
 800a04c:	3dc00015 	stw	r23,0(r7)
 800a050:	d8800717 	ldw	r2,28(sp)
 800a054:	003e7906 	br	8009a3c <__alt_data_end+0xfc009a3c>
 800a058:	00800434 	movhi	r2,16
 800a05c:	10bfffc4 	addi	r2,r2,-1
 800a060:	88a2703a 	and	r17,r17,r2
 800a064:	883e851e 	bne	r17,zero,8009a7c <__alt_data_end+0xfc009a7c>
 800a068:	00820074 	movhi	r2,2049
 800a06c:	10969b04 	addi	r2,r2,23148
 800a070:	003e8406 	br	8009a84 <__alt_data_end+0xfc009a84>
 800a074:	10c00204 	addi	r3,r2,8
 800a078:	003e8706 	br	8009a98 <__alt_data_end+0xfc009a98>
 800a07c:	01400434 	movhi	r5,16
 800a080:	297fffc4 	addi	r5,r5,-1
 800a084:	994a703a 	and	r5,r19,r5
 800a088:	9009883a 	mov	r4,r18
 800a08c:	843f0044 	addi	r16,r16,-1023
 800a090:	294ffc34 	orhi	r5,r5,16368
 800a094:	dd800217 	ldw	r22,8(sp)
 800a098:	d8001115 	stw	zero,68(sp)
 800a09c:	003ea506 	br	8009b34 <__alt_data_end+0xfc009b34>
 800a0a0:	00820074 	movhi	r2,2049
 800a0a4:	10969204 	addi	r2,r2,23112
 800a0a8:	003e6406 	br	8009a3c <__alt_data_end+0xfc009a3c>
 800a0ac:	e0001115 	stw	zero,68(fp)
 800a0b0:	000b883a 	mov	r5,zero
 800a0b4:	e009883a 	mov	r4,fp
 800a0b8:	800d0180 	call	800d018 <_Balloc>
 800a0bc:	01bfffc4 	movi	r6,-1
 800a0c0:	01c00044 	movi	r7,1
 800a0c4:	d8800715 	stw	r2,28(sp)
 800a0c8:	d9800c15 	stw	r6,48(sp)
 800a0cc:	e0801015 	stw	r2,64(fp)
 800a0d0:	d8000315 	stw	zero,12(sp)
 800a0d4:	d9c00b15 	stw	r7,44(sp)
 800a0d8:	d9800615 	stw	r6,24(sp)
 800a0dc:	d8002215 	stw	zero,136(sp)
 800a0e0:	d8800117 	ldw	r2,4(sp)
 800a0e4:	10008916 	blt	r2,zero,800a30c <_dtoa_r+0x990>
 800a0e8:	d9000517 	ldw	r4,20(sp)
 800a0ec:	00c00384 	movi	r3,14
 800a0f0:	19008616 	blt	r3,r4,800a30c <_dtoa_r+0x990>
 800a0f4:	200490fa 	slli	r2,r4,3
 800a0f8:	00c20074 	movhi	r3,2049
 800a0fc:	d9802217 	ldw	r6,136(sp)
 800a100:	18d6b904 	addi	r3,r3,23268
 800a104:	1885883a 	add	r2,r3,r2
 800a108:	14000017 	ldw	r16,0(r2)
 800a10c:	14400117 	ldw	r17,4(r2)
 800a110:	30016316 	blt	r6,zero,800a6a0 <_dtoa_r+0xd24>
 800a114:	800d883a 	mov	r6,r16
 800a118:	880f883a 	mov	r7,r17
 800a11c:	9009883a 	mov	r4,r18
 800a120:	980b883a 	mov	r5,r19
 800a124:	80051a40 	call	80051a4 <__divdf3>
 800a128:	180b883a 	mov	r5,r3
 800a12c:	1009883a 	mov	r4,r2
 800a130:	8006cf80 	call	8006cf8 <__fixdfsi>
 800a134:	1009883a 	mov	r4,r2
 800a138:	102b883a 	mov	r21,r2
 800a13c:	8006d780 	call	8006d78 <__floatsidf>
 800a140:	800d883a 	mov	r6,r16
 800a144:	880f883a 	mov	r7,r17
 800a148:	1009883a 	mov	r4,r2
 800a14c:	180b883a 	mov	r5,r3
 800a150:	8005ce40 	call	8005ce4 <__muldf3>
 800a154:	100d883a 	mov	r6,r2
 800a158:	180f883a 	mov	r7,r3
 800a15c:	9009883a 	mov	r4,r18
 800a160:	980b883a 	mov	r5,r19
 800a164:	80063fc0 	call	80063fc <__subdf3>
 800a168:	d9c00717 	ldw	r7,28(sp)
 800a16c:	1009883a 	mov	r4,r2
 800a170:	a8800c04 	addi	r2,r21,48
 800a174:	38800005 	stb	r2,0(r7)
 800a178:	3dc00044 	addi	r23,r7,1
 800a17c:	d9c00617 	ldw	r7,24(sp)
 800a180:	01800044 	movi	r6,1
 800a184:	180b883a 	mov	r5,r3
 800a188:	2005883a 	mov	r2,r4
 800a18c:	39803826 	beq	r7,r6,800a270 <_dtoa_r+0x8f4>
 800a190:	000d883a 	mov	r6,zero
 800a194:	01d00934 	movhi	r7,16420
 800a198:	8005ce40 	call	8005ce4 <__muldf3>
 800a19c:	000d883a 	mov	r6,zero
 800a1a0:	000f883a 	mov	r7,zero
 800a1a4:	1009883a 	mov	r4,r2
 800a1a8:	180b883a 	mov	r5,r3
 800a1ac:	1025883a 	mov	r18,r2
 800a1b0:	1827883a 	mov	r19,r3
 800a1b4:	8005a8c0 	call	8005a8c <__eqdf2>
 800a1b8:	103f9a26 	beq	r2,zero,800a024 <__alt_data_end+0xfc00a024>
 800a1bc:	d9c00617 	ldw	r7,24(sp)
 800a1c0:	d8c00717 	ldw	r3,28(sp)
 800a1c4:	b829883a 	mov	r20,r23
 800a1c8:	38bfffc4 	addi	r2,r7,-1
 800a1cc:	18ad883a 	add	r22,r3,r2
 800a1d0:	00000a06 	br	800a1fc <_dtoa_r+0x880>
 800a1d4:	8005ce40 	call	8005ce4 <__muldf3>
 800a1d8:	000d883a 	mov	r6,zero
 800a1dc:	000f883a 	mov	r7,zero
 800a1e0:	1009883a 	mov	r4,r2
 800a1e4:	180b883a 	mov	r5,r3
 800a1e8:	1025883a 	mov	r18,r2
 800a1ec:	1827883a 	mov	r19,r3
 800a1f0:	b829883a 	mov	r20,r23
 800a1f4:	8005a8c0 	call	8005a8c <__eqdf2>
 800a1f8:	103f8a26 	beq	r2,zero,800a024 <__alt_data_end+0xfc00a024>
 800a1fc:	800d883a 	mov	r6,r16
 800a200:	880f883a 	mov	r7,r17
 800a204:	9009883a 	mov	r4,r18
 800a208:	980b883a 	mov	r5,r19
 800a20c:	80051a40 	call	80051a4 <__divdf3>
 800a210:	180b883a 	mov	r5,r3
 800a214:	1009883a 	mov	r4,r2
 800a218:	8006cf80 	call	8006cf8 <__fixdfsi>
 800a21c:	1009883a 	mov	r4,r2
 800a220:	102b883a 	mov	r21,r2
 800a224:	8006d780 	call	8006d78 <__floatsidf>
 800a228:	800d883a 	mov	r6,r16
 800a22c:	880f883a 	mov	r7,r17
 800a230:	1009883a 	mov	r4,r2
 800a234:	180b883a 	mov	r5,r3
 800a238:	8005ce40 	call	8005ce4 <__muldf3>
 800a23c:	100d883a 	mov	r6,r2
 800a240:	180f883a 	mov	r7,r3
 800a244:	9009883a 	mov	r4,r18
 800a248:	980b883a 	mov	r5,r19
 800a24c:	80063fc0 	call	80063fc <__subdf3>
 800a250:	aa000c04 	addi	r8,r21,48
 800a254:	a2000005 	stb	r8,0(r20)
 800a258:	000d883a 	mov	r6,zero
 800a25c:	01d00934 	movhi	r7,16420
 800a260:	1009883a 	mov	r4,r2
 800a264:	180b883a 	mov	r5,r3
 800a268:	a5c00044 	addi	r23,r20,1
 800a26c:	b53fd91e 	bne	r22,r20,800a1d4 <__alt_data_end+0xfc00a1d4>
 800a270:	100d883a 	mov	r6,r2
 800a274:	180f883a 	mov	r7,r3
 800a278:	1009883a 	mov	r4,r2
 800a27c:	180b883a 	mov	r5,r3
 800a280:	80048f80 	call	80048f8 <__adddf3>
 800a284:	100d883a 	mov	r6,r2
 800a288:	180f883a 	mov	r7,r3
 800a28c:	8009883a 	mov	r4,r16
 800a290:	880b883a 	mov	r5,r17
 800a294:	1027883a 	mov	r19,r2
 800a298:	1825883a 	mov	r18,r3
 800a29c:	8005bf00 	call	8005bf0 <__ledf2>
 800a2a0:	10000816 	blt	r2,zero,800a2c4 <_dtoa_r+0x948>
 800a2a4:	980d883a 	mov	r6,r19
 800a2a8:	900f883a 	mov	r7,r18
 800a2ac:	8009883a 	mov	r4,r16
 800a2b0:	880b883a 	mov	r5,r17
 800a2b4:	8005a8c0 	call	8005a8c <__eqdf2>
 800a2b8:	103f5a1e 	bne	r2,zero,800a024 <__alt_data_end+0xfc00a024>
 800a2bc:	ad40004c 	andi	r21,r21,1
 800a2c0:	a83f5826 	beq	r21,zero,800a024 <__alt_data_end+0xfc00a024>
 800a2c4:	bd3fffc3 	ldbu	r20,-1(r23)
 800a2c8:	b8bfffc4 	addi	r2,r23,-1
 800a2cc:	1007883a 	mov	r3,r2
 800a2d0:	01400e44 	movi	r5,57
 800a2d4:	d9800717 	ldw	r6,28(sp)
 800a2d8:	00000506 	br	800a2f0 <_dtoa_r+0x974>
 800a2dc:	18ffffc4 	addi	r3,r3,-1
 800a2e0:	11824726 	beq	r2,r6,800ac00 <_dtoa_r+0x1284>
 800a2e4:	1d000003 	ldbu	r20,0(r3)
 800a2e8:	102f883a 	mov	r23,r2
 800a2ec:	10bfffc4 	addi	r2,r2,-1
 800a2f0:	a1003fcc 	andi	r4,r20,255
 800a2f4:	2100201c 	xori	r4,r4,128
 800a2f8:	213fe004 	addi	r4,r4,-128
 800a2fc:	217ff726 	beq	r4,r5,800a2dc <__alt_data_end+0xfc00a2dc>
 800a300:	a2000044 	addi	r8,r20,1
 800a304:	12000005 	stb	r8,0(r2)
 800a308:	003f4606 	br	800a024 <__alt_data_end+0xfc00a024>
 800a30c:	d9000b17 	ldw	r4,44(sp)
 800a310:	2000c826 	beq	r4,zero,800a634 <_dtoa_r+0xcb8>
 800a314:	d9800317 	ldw	r6,12(sp)
 800a318:	00c00044 	movi	r3,1
 800a31c:	1980f90e 	bge	r3,r6,800a704 <_dtoa_r+0xd88>
 800a320:	d8800617 	ldw	r2,24(sp)
 800a324:	d8c00a17 	ldw	r3,40(sp)
 800a328:	157fffc4 	addi	r21,r2,-1
 800a32c:	1d41f316 	blt	r3,r21,800aafc <_dtoa_r+0x1180>
 800a330:	1d6bc83a 	sub	r21,r3,r21
 800a334:	d9c00617 	ldw	r7,24(sp)
 800a338:	3802aa16 	blt	r7,zero,800ade4 <_dtoa_r+0x1468>
 800a33c:	dd000817 	ldw	r20,32(sp)
 800a340:	d8800617 	ldw	r2,24(sp)
 800a344:	d8c00817 	ldw	r3,32(sp)
 800a348:	01400044 	movi	r5,1
 800a34c:	e009883a 	mov	r4,fp
 800a350:	1887883a 	add	r3,r3,r2
 800a354:	d8c00815 	stw	r3,32(sp)
 800a358:	b0ad883a 	add	r22,r22,r2
 800a35c:	800d4240 	call	800d424 <__i2b>
 800a360:	1023883a 	mov	r17,r2
 800a364:	a0000826 	beq	r20,zero,800a388 <_dtoa_r+0xa0c>
 800a368:	0580070e 	bge	zero,r22,800a388 <_dtoa_r+0xa0c>
 800a36c:	a005883a 	mov	r2,r20
 800a370:	b500b916 	blt	r22,r20,800a658 <_dtoa_r+0xcdc>
 800a374:	d9000817 	ldw	r4,32(sp)
 800a378:	a0a9c83a 	sub	r20,r20,r2
 800a37c:	b0adc83a 	sub	r22,r22,r2
 800a380:	2089c83a 	sub	r4,r4,r2
 800a384:	d9000815 	stw	r4,32(sp)
 800a388:	d9800a17 	ldw	r6,40(sp)
 800a38c:	0181810e 	bge	zero,r6,800a994 <_dtoa_r+0x1018>
 800a390:	d9c00b17 	ldw	r7,44(sp)
 800a394:	3800b326 	beq	r7,zero,800a664 <_dtoa_r+0xce8>
 800a398:	a800b226 	beq	r21,zero,800a664 <_dtoa_r+0xce8>
 800a39c:	880b883a 	mov	r5,r17
 800a3a0:	a80d883a 	mov	r6,r21
 800a3a4:	e009883a 	mov	r4,fp
 800a3a8:	800d6580 	call	800d658 <__pow5mult>
 800a3ac:	d9800917 	ldw	r6,36(sp)
 800a3b0:	100b883a 	mov	r5,r2
 800a3b4:	e009883a 	mov	r4,fp
 800a3b8:	1023883a 	mov	r17,r2
 800a3bc:	800d4600 	call	800d460 <__multiply>
 800a3c0:	1021883a 	mov	r16,r2
 800a3c4:	d8800a17 	ldw	r2,40(sp)
 800a3c8:	d9400917 	ldw	r5,36(sp)
 800a3cc:	e009883a 	mov	r4,fp
 800a3d0:	1545c83a 	sub	r2,r2,r21
 800a3d4:	d8800a15 	stw	r2,40(sp)
 800a3d8:	800d0c00 	call	800d0c0 <_Bfree>
 800a3dc:	d8c00a17 	ldw	r3,40(sp)
 800a3e0:	18009f1e 	bne	r3,zero,800a660 <_dtoa_r+0xce4>
 800a3e4:	05c00044 	movi	r23,1
 800a3e8:	e009883a 	mov	r4,fp
 800a3ec:	b80b883a 	mov	r5,r23
 800a3f0:	800d4240 	call	800d424 <__i2b>
 800a3f4:	d9000d17 	ldw	r4,52(sp)
 800a3f8:	102b883a 	mov	r21,r2
 800a3fc:	2000ce26 	beq	r4,zero,800a738 <_dtoa_r+0xdbc>
 800a400:	200d883a 	mov	r6,r4
 800a404:	100b883a 	mov	r5,r2
 800a408:	e009883a 	mov	r4,fp
 800a40c:	800d6580 	call	800d658 <__pow5mult>
 800a410:	d9800317 	ldw	r6,12(sp)
 800a414:	102b883a 	mov	r21,r2
 800a418:	b981810e 	bge	r23,r6,800aa20 <_dtoa_r+0x10a4>
 800a41c:	0027883a 	mov	r19,zero
 800a420:	a8800417 	ldw	r2,16(r21)
 800a424:	05c00804 	movi	r23,32
 800a428:	10800104 	addi	r2,r2,4
 800a42c:	1085883a 	add	r2,r2,r2
 800a430:	1085883a 	add	r2,r2,r2
 800a434:	a885883a 	add	r2,r21,r2
 800a438:	11000017 	ldw	r4,0(r2)
 800a43c:	800d30c0 	call	800d30c <__hi0bits>
 800a440:	b885c83a 	sub	r2,r23,r2
 800a444:	1585883a 	add	r2,r2,r22
 800a448:	108007cc 	andi	r2,r2,31
 800a44c:	1000b326 	beq	r2,zero,800a71c <_dtoa_r+0xda0>
 800a450:	00c00804 	movi	r3,32
 800a454:	1887c83a 	sub	r3,r3,r2
 800a458:	01000104 	movi	r4,4
 800a45c:	20c2cd0e 	bge	r4,r3,800af94 <_dtoa_r+0x1618>
 800a460:	00c00704 	movi	r3,28
 800a464:	1885c83a 	sub	r2,r3,r2
 800a468:	d8c00817 	ldw	r3,32(sp)
 800a46c:	a0a9883a 	add	r20,r20,r2
 800a470:	b0ad883a 	add	r22,r22,r2
 800a474:	1887883a 	add	r3,r3,r2
 800a478:	d8c00815 	stw	r3,32(sp)
 800a47c:	d9800817 	ldw	r6,32(sp)
 800a480:	0180040e 	bge	zero,r6,800a494 <_dtoa_r+0xb18>
 800a484:	800b883a 	mov	r5,r16
 800a488:	e009883a 	mov	r4,fp
 800a48c:	800d7980 	call	800d798 <__lshift>
 800a490:	1021883a 	mov	r16,r2
 800a494:	0580050e 	bge	zero,r22,800a4ac <_dtoa_r+0xb30>
 800a498:	a80b883a 	mov	r5,r21
 800a49c:	b00d883a 	mov	r6,r22
 800a4a0:	e009883a 	mov	r4,fp
 800a4a4:	800d7980 	call	800d798 <__lshift>
 800a4a8:	102b883a 	mov	r21,r2
 800a4ac:	d9c00e17 	ldw	r7,56(sp)
 800a4b0:	3801211e 	bne	r7,zero,800a938 <_dtoa_r+0xfbc>
 800a4b4:	d9800617 	ldw	r6,24(sp)
 800a4b8:	0181380e 	bge	zero,r6,800a99c <_dtoa_r+0x1020>
 800a4bc:	d8c00b17 	ldw	r3,44(sp)
 800a4c0:	1800ab1e 	bne	r3,zero,800a770 <_dtoa_r+0xdf4>
 800a4c4:	dc800717 	ldw	r18,28(sp)
 800a4c8:	dcc00617 	ldw	r19,24(sp)
 800a4cc:	9029883a 	mov	r20,r18
 800a4d0:	00000206 	br	800a4dc <_dtoa_r+0xb60>
 800a4d4:	800d0e80 	call	800d0e8 <__multadd>
 800a4d8:	1021883a 	mov	r16,r2
 800a4dc:	a80b883a 	mov	r5,r21
 800a4e0:	8009883a 	mov	r4,r16
 800a4e4:	800977c0 	call	800977c <quorem>
 800a4e8:	10800c04 	addi	r2,r2,48
 800a4ec:	90800005 	stb	r2,0(r18)
 800a4f0:	94800044 	addi	r18,r18,1
 800a4f4:	9507c83a 	sub	r3,r18,r20
 800a4f8:	000f883a 	mov	r7,zero
 800a4fc:	01800284 	movi	r6,10
 800a500:	800b883a 	mov	r5,r16
 800a504:	e009883a 	mov	r4,fp
 800a508:	1cfff216 	blt	r3,r19,800a4d4 <__alt_data_end+0xfc00a4d4>
 800a50c:	1011883a 	mov	r8,r2
 800a510:	d8800617 	ldw	r2,24(sp)
 800a514:	0082370e 	bge	zero,r2,800adf4 <_dtoa_r+0x1478>
 800a518:	d9000717 	ldw	r4,28(sp)
 800a51c:	0025883a 	mov	r18,zero
 800a520:	20af883a 	add	r23,r4,r2
 800a524:	01800044 	movi	r6,1
 800a528:	800b883a 	mov	r5,r16
 800a52c:	e009883a 	mov	r4,fp
 800a530:	da001715 	stw	r8,92(sp)
 800a534:	800d7980 	call	800d798 <__lshift>
 800a538:	a80b883a 	mov	r5,r21
 800a53c:	1009883a 	mov	r4,r2
 800a540:	d8800915 	stw	r2,36(sp)
 800a544:	800d8e00 	call	800d8e0 <__mcmp>
 800a548:	da001717 	ldw	r8,92(sp)
 800a54c:	0081800e 	bge	zero,r2,800ab50 <_dtoa_r+0x11d4>
 800a550:	b93fffc3 	ldbu	r4,-1(r23)
 800a554:	b8bfffc4 	addi	r2,r23,-1
 800a558:	1007883a 	mov	r3,r2
 800a55c:	01800e44 	movi	r6,57
 800a560:	d9c00717 	ldw	r7,28(sp)
 800a564:	00000506 	br	800a57c <_dtoa_r+0xc00>
 800a568:	18ffffc4 	addi	r3,r3,-1
 800a56c:	11c12326 	beq	r2,r7,800a9fc <_dtoa_r+0x1080>
 800a570:	19000003 	ldbu	r4,0(r3)
 800a574:	102f883a 	mov	r23,r2
 800a578:	10bfffc4 	addi	r2,r2,-1
 800a57c:	21403fcc 	andi	r5,r4,255
 800a580:	2940201c 	xori	r5,r5,128
 800a584:	297fe004 	addi	r5,r5,-128
 800a588:	29bff726 	beq	r5,r6,800a568 <__alt_data_end+0xfc00a568>
 800a58c:	21000044 	addi	r4,r4,1
 800a590:	11000005 	stb	r4,0(r2)
 800a594:	a80b883a 	mov	r5,r21
 800a598:	e009883a 	mov	r4,fp
 800a59c:	800d0c00 	call	800d0c0 <_Bfree>
 800a5a0:	883ea026 	beq	r17,zero,800a024 <__alt_data_end+0xfc00a024>
 800a5a4:	90000426 	beq	r18,zero,800a5b8 <_dtoa_r+0xc3c>
 800a5a8:	94400326 	beq	r18,r17,800a5b8 <_dtoa_r+0xc3c>
 800a5ac:	900b883a 	mov	r5,r18
 800a5b0:	e009883a 	mov	r4,fp
 800a5b4:	800d0c00 	call	800d0c0 <_Bfree>
 800a5b8:	880b883a 	mov	r5,r17
 800a5bc:	e009883a 	mov	r4,fp
 800a5c0:	800d0c00 	call	800d0c0 <_Bfree>
 800a5c4:	003e9706 	br	800a024 <__alt_data_end+0xfc00a024>
 800a5c8:	01800044 	movi	r6,1
 800a5cc:	d9800e15 	stw	r6,56(sp)
 800a5d0:	003d9606 	br	8009c2c <__alt_data_end+0xfc009c2c>
 800a5d4:	d8800817 	ldw	r2,32(sp)
 800a5d8:	d8c00517 	ldw	r3,20(sp)
 800a5dc:	d8000d15 	stw	zero,52(sp)
 800a5e0:	10c5c83a 	sub	r2,r2,r3
 800a5e4:	00c9c83a 	sub	r4,zero,r3
 800a5e8:	d8800815 	stw	r2,32(sp)
 800a5ec:	d9000a15 	stw	r4,40(sp)
 800a5f0:	003d9706 	br	8009c50 <__alt_data_end+0xfc009c50>
 800a5f4:	05adc83a 	sub	r22,zero,r22
 800a5f8:	dd800815 	stw	r22,32(sp)
 800a5fc:	002d883a 	mov	r22,zero
 800a600:	003d8e06 	br	8009c3c <__alt_data_end+0xfc009c3c>
 800a604:	d9000517 	ldw	r4,20(sp)
 800a608:	8006d780 	call	8006d78 <__floatsidf>
 800a60c:	100d883a 	mov	r6,r2
 800a610:	180f883a 	mov	r7,r3
 800a614:	a009883a 	mov	r4,r20
 800a618:	880b883a 	mov	r5,r17
 800a61c:	8005a8c0 	call	8005a8c <__eqdf2>
 800a620:	103d7126 	beq	r2,zero,8009be8 <__alt_data_end+0xfc009be8>
 800a624:	d9c00517 	ldw	r7,20(sp)
 800a628:	39ffffc4 	addi	r7,r7,-1
 800a62c:	d9c00515 	stw	r7,20(sp)
 800a630:	003d6d06 	br	8009be8 <__alt_data_end+0xfc009be8>
 800a634:	dd400a17 	ldw	r21,40(sp)
 800a638:	dd000817 	ldw	r20,32(sp)
 800a63c:	0023883a 	mov	r17,zero
 800a640:	003f4806 	br	800a364 <__alt_data_end+0xfc00a364>
 800a644:	10e3c83a 	sub	r17,r2,r3
 800a648:	9448983a 	sll	r4,r18,r17
 800a64c:	003d3206 	br	8009b18 <__alt_data_end+0xfc009b18>
 800a650:	d8000e15 	stw	zero,56(sp)
 800a654:	003d7506 	br	8009c2c <__alt_data_end+0xfc009c2c>
 800a658:	b005883a 	mov	r2,r22
 800a65c:	003f4506 	br	800a374 <__alt_data_end+0xfc00a374>
 800a660:	dc000915 	stw	r16,36(sp)
 800a664:	d9800a17 	ldw	r6,40(sp)
 800a668:	d9400917 	ldw	r5,36(sp)
 800a66c:	e009883a 	mov	r4,fp
 800a670:	800d6580 	call	800d658 <__pow5mult>
 800a674:	1021883a 	mov	r16,r2
 800a678:	003f5a06 	br	800a3e4 <__alt_data_end+0xfc00a3e4>
 800a67c:	01c00044 	movi	r7,1
 800a680:	d9c00b15 	stw	r7,44(sp)
 800a684:	d8802217 	ldw	r2,136(sp)
 800a688:	0081280e 	bge	zero,r2,800ab2c <_dtoa_r+0x11b0>
 800a68c:	100d883a 	mov	r6,r2
 800a690:	1021883a 	mov	r16,r2
 800a694:	d8800c15 	stw	r2,48(sp)
 800a698:	d8800615 	stw	r2,24(sp)
 800a69c:	003d8806 	br	8009cc0 <__alt_data_end+0xfc009cc0>
 800a6a0:	d8800617 	ldw	r2,24(sp)
 800a6a4:	00be9b16 	blt	zero,r2,800a114 <__alt_data_end+0xfc00a114>
 800a6a8:	10010f1e 	bne	r2,zero,800aae8 <_dtoa_r+0x116c>
 800a6ac:	880b883a 	mov	r5,r17
 800a6b0:	000d883a 	mov	r6,zero
 800a6b4:	01d00534 	movhi	r7,16404
 800a6b8:	8009883a 	mov	r4,r16
 800a6bc:	8005ce40 	call	8005ce4 <__muldf3>
 800a6c0:	900d883a 	mov	r6,r18
 800a6c4:	980f883a 	mov	r7,r19
 800a6c8:	1009883a 	mov	r4,r2
 800a6cc:	180b883a 	mov	r5,r3
 800a6d0:	8005b140 	call	8005b14 <__gedf2>
 800a6d4:	002b883a 	mov	r21,zero
 800a6d8:	0023883a 	mov	r17,zero
 800a6dc:	1000bf16 	blt	r2,zero,800a9dc <_dtoa_r+0x1060>
 800a6e0:	d9802217 	ldw	r6,136(sp)
 800a6e4:	ddc00717 	ldw	r23,28(sp)
 800a6e8:	018c303a 	nor	r6,zero,r6
 800a6ec:	d9800515 	stw	r6,20(sp)
 800a6f0:	a80b883a 	mov	r5,r21
 800a6f4:	e009883a 	mov	r4,fp
 800a6f8:	800d0c00 	call	800d0c0 <_Bfree>
 800a6fc:	883e4926 	beq	r17,zero,800a024 <__alt_data_end+0xfc00a024>
 800a700:	003fad06 	br	800a5b8 <__alt_data_end+0xfc00a5b8>
 800a704:	d9c01117 	ldw	r7,68(sp)
 800a708:	3801bc26 	beq	r7,zero,800adfc <_dtoa_r+0x1480>
 800a70c:	10810cc4 	addi	r2,r2,1075
 800a710:	dd400a17 	ldw	r21,40(sp)
 800a714:	dd000817 	ldw	r20,32(sp)
 800a718:	003f0a06 	br	800a344 <__alt_data_end+0xfc00a344>
 800a71c:	00800704 	movi	r2,28
 800a720:	d9000817 	ldw	r4,32(sp)
 800a724:	a0a9883a 	add	r20,r20,r2
 800a728:	b0ad883a 	add	r22,r22,r2
 800a72c:	2089883a 	add	r4,r4,r2
 800a730:	d9000815 	stw	r4,32(sp)
 800a734:	003f5106 	br	800a47c <__alt_data_end+0xfc00a47c>
 800a738:	d8c00317 	ldw	r3,12(sp)
 800a73c:	b8c1fc0e 	bge	r23,r3,800af30 <_dtoa_r+0x15b4>
 800a740:	0027883a 	mov	r19,zero
 800a744:	b805883a 	mov	r2,r23
 800a748:	003f3e06 	br	800a444 <__alt_data_end+0xfc00a444>
 800a74c:	880b883a 	mov	r5,r17
 800a750:	e009883a 	mov	r4,fp
 800a754:	000f883a 	mov	r7,zero
 800a758:	01800284 	movi	r6,10
 800a75c:	800d0e80 	call	800d0e8 <__multadd>
 800a760:	d9000c17 	ldw	r4,48(sp)
 800a764:	1023883a 	mov	r17,r2
 800a768:	0102040e 	bge	zero,r4,800af7c <_dtoa_r+0x1600>
 800a76c:	d9000615 	stw	r4,24(sp)
 800a770:	0500050e 	bge	zero,r20,800a788 <_dtoa_r+0xe0c>
 800a774:	880b883a 	mov	r5,r17
 800a778:	a00d883a 	mov	r6,r20
 800a77c:	e009883a 	mov	r4,fp
 800a780:	800d7980 	call	800d798 <__lshift>
 800a784:	1023883a 	mov	r17,r2
 800a788:	9801241e 	bne	r19,zero,800ac1c <_dtoa_r+0x12a0>
 800a78c:	8829883a 	mov	r20,r17
 800a790:	d9000617 	ldw	r4,24(sp)
 800a794:	dcc00717 	ldw	r19,28(sp)
 800a798:	9480004c 	andi	r18,r18,1
 800a79c:	20bfffc4 	addi	r2,r4,-1
 800a7a0:	9885883a 	add	r2,r19,r2
 800a7a4:	d8800415 	stw	r2,16(sp)
 800a7a8:	dc800615 	stw	r18,24(sp)
 800a7ac:	a80b883a 	mov	r5,r21
 800a7b0:	8009883a 	mov	r4,r16
 800a7b4:	800977c0 	call	800977c <quorem>
 800a7b8:	880b883a 	mov	r5,r17
 800a7bc:	8009883a 	mov	r4,r16
 800a7c0:	102f883a 	mov	r23,r2
 800a7c4:	800d8e00 	call	800d8e0 <__mcmp>
 800a7c8:	a80b883a 	mov	r5,r21
 800a7cc:	a00d883a 	mov	r6,r20
 800a7d0:	e009883a 	mov	r4,fp
 800a7d4:	102d883a 	mov	r22,r2
 800a7d8:	800d9400 	call	800d940 <__mdiff>
 800a7dc:	1007883a 	mov	r3,r2
 800a7e0:	10800317 	ldw	r2,12(r2)
 800a7e4:	bc800c04 	addi	r18,r23,48
 800a7e8:	180b883a 	mov	r5,r3
 800a7ec:	10004e1e 	bne	r2,zero,800a928 <_dtoa_r+0xfac>
 800a7f0:	8009883a 	mov	r4,r16
 800a7f4:	d8c01615 	stw	r3,88(sp)
 800a7f8:	800d8e00 	call	800d8e0 <__mcmp>
 800a7fc:	d8c01617 	ldw	r3,88(sp)
 800a800:	e009883a 	mov	r4,fp
 800a804:	d8801615 	stw	r2,88(sp)
 800a808:	180b883a 	mov	r5,r3
 800a80c:	800d0c00 	call	800d0c0 <_Bfree>
 800a810:	d8801617 	ldw	r2,88(sp)
 800a814:	1000041e 	bne	r2,zero,800a828 <_dtoa_r+0xeac>
 800a818:	d9800317 	ldw	r6,12(sp)
 800a81c:	3000021e 	bne	r6,zero,800a828 <_dtoa_r+0xeac>
 800a820:	d8c00617 	ldw	r3,24(sp)
 800a824:	18003726 	beq	r3,zero,800a904 <_dtoa_r+0xf88>
 800a828:	b0002016 	blt	r22,zero,800a8ac <_dtoa_r+0xf30>
 800a82c:	b000041e 	bne	r22,zero,800a840 <_dtoa_r+0xec4>
 800a830:	d9000317 	ldw	r4,12(sp)
 800a834:	2000021e 	bne	r4,zero,800a840 <_dtoa_r+0xec4>
 800a838:	d8c00617 	ldw	r3,24(sp)
 800a83c:	18001b26 	beq	r3,zero,800a8ac <_dtoa_r+0xf30>
 800a840:	00810716 	blt	zero,r2,800ac60 <_dtoa_r+0x12e4>
 800a844:	d8c00417 	ldw	r3,16(sp)
 800a848:	9d800044 	addi	r22,r19,1
 800a84c:	9c800005 	stb	r18,0(r19)
 800a850:	b02f883a 	mov	r23,r22
 800a854:	98c10626 	beq	r19,r3,800ac70 <_dtoa_r+0x12f4>
 800a858:	800b883a 	mov	r5,r16
 800a85c:	000f883a 	mov	r7,zero
 800a860:	01800284 	movi	r6,10
 800a864:	e009883a 	mov	r4,fp
 800a868:	800d0e80 	call	800d0e8 <__multadd>
 800a86c:	1021883a 	mov	r16,r2
 800a870:	000f883a 	mov	r7,zero
 800a874:	01800284 	movi	r6,10
 800a878:	880b883a 	mov	r5,r17
 800a87c:	e009883a 	mov	r4,fp
 800a880:	8d002526 	beq	r17,r20,800a918 <_dtoa_r+0xf9c>
 800a884:	800d0e80 	call	800d0e8 <__multadd>
 800a888:	a00b883a 	mov	r5,r20
 800a88c:	000f883a 	mov	r7,zero
 800a890:	01800284 	movi	r6,10
 800a894:	e009883a 	mov	r4,fp
 800a898:	1023883a 	mov	r17,r2
 800a89c:	800d0e80 	call	800d0e8 <__multadd>
 800a8a0:	1029883a 	mov	r20,r2
 800a8a4:	b027883a 	mov	r19,r22
 800a8a8:	003fc006 	br	800a7ac <__alt_data_end+0xfc00a7ac>
 800a8ac:	9011883a 	mov	r8,r18
 800a8b0:	00800e0e 	bge	zero,r2,800a8ec <_dtoa_r+0xf70>
 800a8b4:	800b883a 	mov	r5,r16
 800a8b8:	01800044 	movi	r6,1
 800a8bc:	e009883a 	mov	r4,fp
 800a8c0:	da001715 	stw	r8,92(sp)
 800a8c4:	800d7980 	call	800d798 <__lshift>
 800a8c8:	a80b883a 	mov	r5,r21
 800a8cc:	1009883a 	mov	r4,r2
 800a8d0:	1021883a 	mov	r16,r2
 800a8d4:	800d8e00 	call	800d8e0 <__mcmp>
 800a8d8:	da001717 	ldw	r8,92(sp)
 800a8dc:	0081960e 	bge	zero,r2,800af38 <_dtoa_r+0x15bc>
 800a8e0:	00800e44 	movi	r2,57
 800a8e4:	40817026 	beq	r8,r2,800aea8 <_dtoa_r+0x152c>
 800a8e8:	ba000c44 	addi	r8,r23,49
 800a8ec:	8825883a 	mov	r18,r17
 800a8f0:	9dc00044 	addi	r23,r19,1
 800a8f4:	9a000005 	stb	r8,0(r19)
 800a8f8:	a023883a 	mov	r17,r20
 800a8fc:	dc000915 	stw	r16,36(sp)
 800a900:	003f2406 	br	800a594 <__alt_data_end+0xfc00a594>
 800a904:	00800e44 	movi	r2,57
 800a908:	9011883a 	mov	r8,r18
 800a90c:	90816626 	beq	r18,r2,800aea8 <_dtoa_r+0x152c>
 800a910:	05bff516 	blt	zero,r22,800a8e8 <__alt_data_end+0xfc00a8e8>
 800a914:	003ff506 	br	800a8ec <__alt_data_end+0xfc00a8ec>
 800a918:	800d0e80 	call	800d0e8 <__multadd>
 800a91c:	1023883a 	mov	r17,r2
 800a920:	1029883a 	mov	r20,r2
 800a924:	003fdf06 	br	800a8a4 <__alt_data_end+0xfc00a8a4>
 800a928:	e009883a 	mov	r4,fp
 800a92c:	800d0c00 	call	800d0c0 <_Bfree>
 800a930:	00800044 	movi	r2,1
 800a934:	003fbc06 	br	800a828 <__alt_data_end+0xfc00a828>
 800a938:	a80b883a 	mov	r5,r21
 800a93c:	8009883a 	mov	r4,r16
 800a940:	800d8e00 	call	800d8e0 <__mcmp>
 800a944:	103edb0e 	bge	r2,zero,800a4b4 <__alt_data_end+0xfc00a4b4>
 800a948:	800b883a 	mov	r5,r16
 800a94c:	000f883a 	mov	r7,zero
 800a950:	01800284 	movi	r6,10
 800a954:	e009883a 	mov	r4,fp
 800a958:	800d0e80 	call	800d0e8 <__multadd>
 800a95c:	1021883a 	mov	r16,r2
 800a960:	d8800517 	ldw	r2,20(sp)
 800a964:	d8c00b17 	ldw	r3,44(sp)
 800a968:	10bfffc4 	addi	r2,r2,-1
 800a96c:	d8800515 	stw	r2,20(sp)
 800a970:	183f761e 	bne	r3,zero,800a74c <__alt_data_end+0xfc00a74c>
 800a974:	d9000c17 	ldw	r4,48(sp)
 800a978:	0101730e 	bge	zero,r4,800af48 <_dtoa_r+0x15cc>
 800a97c:	d9000615 	stw	r4,24(sp)
 800a980:	003ed006 	br	800a4c4 <__alt_data_end+0xfc00a4c4>
 800a984:	00800084 	movi	r2,2
 800a988:	3081861e 	bne	r6,r2,800afa4 <_dtoa_r+0x1628>
 800a98c:	d8000b15 	stw	zero,44(sp)
 800a990:	003f3c06 	br	800a684 <__alt_data_end+0xfc00a684>
 800a994:	dc000917 	ldw	r16,36(sp)
 800a998:	003e9206 	br	800a3e4 <__alt_data_end+0xfc00a3e4>
 800a99c:	d9c00317 	ldw	r7,12(sp)
 800a9a0:	00800084 	movi	r2,2
 800a9a4:	11fec50e 	bge	r2,r7,800a4bc <__alt_data_end+0xfc00a4bc>
 800a9a8:	d9000617 	ldw	r4,24(sp)
 800a9ac:	20013c1e 	bne	r4,zero,800aea0 <_dtoa_r+0x1524>
 800a9b0:	a80b883a 	mov	r5,r21
 800a9b4:	000f883a 	mov	r7,zero
 800a9b8:	01800144 	movi	r6,5
 800a9bc:	e009883a 	mov	r4,fp
 800a9c0:	800d0e80 	call	800d0e8 <__multadd>
 800a9c4:	100b883a 	mov	r5,r2
 800a9c8:	8009883a 	mov	r4,r16
 800a9cc:	102b883a 	mov	r21,r2
 800a9d0:	800d8e00 	call	800d8e0 <__mcmp>
 800a9d4:	dc000915 	stw	r16,36(sp)
 800a9d8:	00bf410e 	bge	zero,r2,800a6e0 <__alt_data_end+0xfc00a6e0>
 800a9dc:	d9c00717 	ldw	r7,28(sp)
 800a9e0:	00800c44 	movi	r2,49
 800a9e4:	38800005 	stb	r2,0(r7)
 800a9e8:	d8800517 	ldw	r2,20(sp)
 800a9ec:	3dc00044 	addi	r23,r7,1
 800a9f0:	10800044 	addi	r2,r2,1
 800a9f4:	d8800515 	stw	r2,20(sp)
 800a9f8:	003f3d06 	br	800a6f0 <__alt_data_end+0xfc00a6f0>
 800a9fc:	d9800517 	ldw	r6,20(sp)
 800aa00:	d9c00717 	ldw	r7,28(sp)
 800aa04:	00800c44 	movi	r2,49
 800aa08:	31800044 	addi	r6,r6,1
 800aa0c:	d9800515 	stw	r6,20(sp)
 800aa10:	38800005 	stb	r2,0(r7)
 800aa14:	003edf06 	br	800a594 <__alt_data_end+0xfc00a594>
 800aa18:	d8000b15 	stw	zero,44(sp)
 800aa1c:	003c9f06 	br	8009c9c <__alt_data_end+0xfc009c9c>
 800aa20:	903e7e1e 	bne	r18,zero,800a41c <__alt_data_end+0xfc00a41c>
 800aa24:	00800434 	movhi	r2,16
 800aa28:	10bfffc4 	addi	r2,r2,-1
 800aa2c:	9884703a 	and	r2,r19,r2
 800aa30:	1000ea1e 	bne	r2,zero,800addc <_dtoa_r+0x1460>
 800aa34:	9cdffc2c 	andhi	r19,r19,32752
 800aa38:	9800e826 	beq	r19,zero,800addc <_dtoa_r+0x1460>
 800aa3c:	d9c00817 	ldw	r7,32(sp)
 800aa40:	b5800044 	addi	r22,r22,1
 800aa44:	04c00044 	movi	r19,1
 800aa48:	39c00044 	addi	r7,r7,1
 800aa4c:	d9c00815 	stw	r7,32(sp)
 800aa50:	d8800d17 	ldw	r2,52(sp)
 800aa54:	103e721e 	bne	r2,zero,800a420 <__alt_data_end+0xfc00a420>
 800aa58:	00800044 	movi	r2,1
 800aa5c:	003e7906 	br	800a444 <__alt_data_end+0xfc00a444>
 800aa60:	8009883a 	mov	r4,r16
 800aa64:	8006d780 	call	8006d78 <__floatsidf>
 800aa68:	d9800f17 	ldw	r6,60(sp)
 800aa6c:	d9c01017 	ldw	r7,64(sp)
 800aa70:	1009883a 	mov	r4,r2
 800aa74:	180b883a 	mov	r5,r3
 800aa78:	8005ce40 	call	8005ce4 <__muldf3>
 800aa7c:	000d883a 	mov	r6,zero
 800aa80:	01d00734 	movhi	r7,16412
 800aa84:	1009883a 	mov	r4,r2
 800aa88:	180b883a 	mov	r5,r3
 800aa8c:	80048f80 	call	80048f8 <__adddf3>
 800aa90:	047f3034 	movhi	r17,64704
 800aa94:	1021883a 	mov	r16,r2
 800aa98:	1c63883a 	add	r17,r3,r17
 800aa9c:	d9000f17 	ldw	r4,60(sp)
 800aaa0:	d9401017 	ldw	r5,64(sp)
 800aaa4:	000d883a 	mov	r6,zero
 800aaa8:	01d00534 	movhi	r7,16404
 800aaac:	80063fc0 	call	80063fc <__subdf3>
 800aab0:	800d883a 	mov	r6,r16
 800aab4:	880f883a 	mov	r7,r17
 800aab8:	1009883a 	mov	r4,r2
 800aabc:	180b883a 	mov	r5,r3
 800aac0:	102b883a 	mov	r21,r2
 800aac4:	1829883a 	mov	r20,r3
 800aac8:	8005b140 	call	8005b14 <__gedf2>
 800aacc:	00806c16 	blt	zero,r2,800ac80 <_dtoa_r+0x1304>
 800aad0:	89e0003c 	xorhi	r7,r17,32768
 800aad4:	800d883a 	mov	r6,r16
 800aad8:	a809883a 	mov	r4,r21
 800aadc:	a00b883a 	mov	r5,r20
 800aae0:	8005bf00 	call	8005bf0 <__ledf2>
 800aae4:	103d7e0e 	bge	r2,zero,800a0e0 <__alt_data_end+0xfc00a0e0>
 800aae8:	002b883a 	mov	r21,zero
 800aaec:	0023883a 	mov	r17,zero
 800aaf0:	003efb06 	br	800a6e0 <__alt_data_end+0xfc00a6e0>
 800aaf4:	d8800717 	ldw	r2,28(sp)
 800aaf8:	003bd006 	br	8009a3c <__alt_data_end+0xfc009a3c>
 800aafc:	d9000a17 	ldw	r4,40(sp)
 800ab00:	d9800d17 	ldw	r6,52(sp)
 800ab04:	dd400a15 	stw	r21,40(sp)
 800ab08:	a905c83a 	sub	r2,r21,r4
 800ab0c:	308d883a 	add	r6,r6,r2
 800ab10:	d9800d15 	stw	r6,52(sp)
 800ab14:	002b883a 	mov	r21,zero
 800ab18:	003e0606 	br	800a334 <__alt_data_end+0xfc00a334>
 800ab1c:	9023883a 	mov	r17,r18
 800ab20:	9829883a 	mov	r20,r19
 800ab24:	04000084 	movi	r16,2
 800ab28:	003c9206 	br	8009d74 <__alt_data_end+0xfc009d74>
 800ab2c:	04000044 	movi	r16,1
 800ab30:	dc000c15 	stw	r16,48(sp)
 800ab34:	dc000615 	stw	r16,24(sp)
 800ab38:	dc002215 	stw	r16,136(sp)
 800ab3c:	e0001115 	stw	zero,68(fp)
 800ab40:	000b883a 	mov	r5,zero
 800ab44:	003c6906 	br	8009cec <__alt_data_end+0xfc009cec>
 800ab48:	3021883a 	mov	r16,r6
 800ab4c:	003ffb06 	br	800ab3c <__alt_data_end+0xfc00ab3c>
 800ab50:	1000021e 	bne	r2,zero,800ab5c <_dtoa_r+0x11e0>
 800ab54:	4200004c 	andi	r8,r8,1
 800ab58:	403e7d1e 	bne	r8,zero,800a550 <__alt_data_end+0xfc00a550>
 800ab5c:	01000c04 	movi	r4,48
 800ab60:	00000106 	br	800ab68 <_dtoa_r+0x11ec>
 800ab64:	102f883a 	mov	r23,r2
 800ab68:	b8bfffc4 	addi	r2,r23,-1
 800ab6c:	10c00007 	ldb	r3,0(r2)
 800ab70:	193ffc26 	beq	r3,r4,800ab64 <__alt_data_end+0xfc00ab64>
 800ab74:	003e8706 	br	800a594 <__alt_data_end+0xfc00a594>
 800ab78:	d8800517 	ldw	r2,20(sp)
 800ab7c:	00a3c83a 	sub	r17,zero,r2
 800ab80:	8800a426 	beq	r17,zero,800ae14 <_dtoa_r+0x1498>
 800ab84:	888003cc 	andi	r2,r17,15
 800ab88:	100490fa 	slli	r2,r2,3
 800ab8c:	00c20074 	movhi	r3,2049
 800ab90:	18d6b904 	addi	r3,r3,23268
 800ab94:	1885883a 	add	r2,r3,r2
 800ab98:	11800017 	ldw	r6,0(r2)
 800ab9c:	11c00117 	ldw	r7,4(r2)
 800aba0:	9009883a 	mov	r4,r18
 800aba4:	980b883a 	mov	r5,r19
 800aba8:	8823d13a 	srai	r17,r17,4
 800abac:	8005ce40 	call	8005ce4 <__muldf3>
 800abb0:	d8800f15 	stw	r2,60(sp)
 800abb4:	d8c01015 	stw	r3,64(sp)
 800abb8:	8800e826 	beq	r17,zero,800af5c <_dtoa_r+0x15e0>
 800abbc:	05020074 	movhi	r20,2049
 800abc0:	a516af04 	addi	r20,r20,23228
 800abc4:	04000084 	movi	r16,2
 800abc8:	8980004c 	andi	r6,r17,1
 800abcc:	1009883a 	mov	r4,r2
 800abd0:	8823d07a 	srai	r17,r17,1
 800abd4:	180b883a 	mov	r5,r3
 800abd8:	30000426 	beq	r6,zero,800abec <_dtoa_r+0x1270>
 800abdc:	a1800017 	ldw	r6,0(r20)
 800abe0:	a1c00117 	ldw	r7,4(r20)
 800abe4:	84000044 	addi	r16,r16,1
 800abe8:	8005ce40 	call	8005ce4 <__muldf3>
 800abec:	a5000204 	addi	r20,r20,8
 800abf0:	883ff51e 	bne	r17,zero,800abc8 <__alt_data_end+0xfc00abc8>
 800abf4:	d8800f15 	stw	r2,60(sp)
 800abf8:	d8c01015 	stw	r3,64(sp)
 800abfc:	003c7606 	br	8009dd8 <__alt_data_end+0xfc009dd8>
 800ac00:	00c00c04 	movi	r3,48
 800ac04:	10c00005 	stb	r3,0(r2)
 800ac08:	d8c00517 	ldw	r3,20(sp)
 800ac0c:	bd3fffc3 	ldbu	r20,-1(r23)
 800ac10:	18c00044 	addi	r3,r3,1
 800ac14:	d8c00515 	stw	r3,20(sp)
 800ac18:	003db906 	br	800a300 <__alt_data_end+0xfc00a300>
 800ac1c:	89400117 	ldw	r5,4(r17)
 800ac20:	e009883a 	mov	r4,fp
 800ac24:	800d0180 	call	800d018 <_Balloc>
 800ac28:	89800417 	ldw	r6,16(r17)
 800ac2c:	89400304 	addi	r5,r17,12
 800ac30:	11000304 	addi	r4,r2,12
 800ac34:	31800084 	addi	r6,r6,2
 800ac38:	318d883a 	add	r6,r6,r6
 800ac3c:	318d883a 	add	r6,r6,r6
 800ac40:	1027883a 	mov	r19,r2
 800ac44:	800cc4c0 	call	800cc4c <memcpy>
 800ac48:	01800044 	movi	r6,1
 800ac4c:	980b883a 	mov	r5,r19
 800ac50:	e009883a 	mov	r4,fp
 800ac54:	800d7980 	call	800d798 <__lshift>
 800ac58:	1029883a 	mov	r20,r2
 800ac5c:	003ecc06 	br	800a790 <__alt_data_end+0xfc00a790>
 800ac60:	00800e44 	movi	r2,57
 800ac64:	90809026 	beq	r18,r2,800aea8 <_dtoa_r+0x152c>
 800ac68:	92000044 	addi	r8,r18,1
 800ac6c:	003f1f06 	br	800a8ec <__alt_data_end+0xfc00a8ec>
 800ac70:	9011883a 	mov	r8,r18
 800ac74:	8825883a 	mov	r18,r17
 800ac78:	a023883a 	mov	r17,r20
 800ac7c:	003e2906 	br	800a524 <__alt_data_end+0xfc00a524>
 800ac80:	002b883a 	mov	r21,zero
 800ac84:	0023883a 	mov	r17,zero
 800ac88:	003f5406 	br	800a9dc <__alt_data_end+0xfc00a9dc>
 800ac8c:	61bfffc4 	addi	r6,r12,-1
 800ac90:	300490fa 	slli	r2,r6,3
 800ac94:	00c20074 	movhi	r3,2049
 800ac98:	18d6b904 	addi	r3,r3,23268
 800ac9c:	1885883a 	add	r2,r3,r2
 800aca0:	11000017 	ldw	r4,0(r2)
 800aca4:	11400117 	ldw	r5,4(r2)
 800aca8:	d8800717 	ldw	r2,28(sp)
 800acac:	880f883a 	mov	r7,r17
 800acb0:	d9801215 	stw	r6,72(sp)
 800acb4:	800d883a 	mov	r6,r16
 800acb8:	db001615 	stw	r12,88(sp)
 800acbc:	15c00044 	addi	r23,r2,1
 800acc0:	8005ce40 	call	8005ce4 <__muldf3>
 800acc4:	d9401017 	ldw	r5,64(sp)
 800acc8:	d9000f17 	ldw	r4,60(sp)
 800accc:	d8c01515 	stw	r3,84(sp)
 800acd0:	d8801415 	stw	r2,80(sp)
 800acd4:	8006cf80 	call	8006cf8 <__fixdfsi>
 800acd8:	1009883a 	mov	r4,r2
 800acdc:	1021883a 	mov	r16,r2
 800ace0:	8006d780 	call	8006d78 <__floatsidf>
 800ace4:	d9000f17 	ldw	r4,60(sp)
 800ace8:	d9401017 	ldw	r5,64(sp)
 800acec:	100d883a 	mov	r6,r2
 800acf0:	180f883a 	mov	r7,r3
 800acf4:	80063fc0 	call	80063fc <__subdf3>
 800acf8:	1829883a 	mov	r20,r3
 800acfc:	d8c00717 	ldw	r3,28(sp)
 800ad00:	84000c04 	addi	r16,r16,48
 800ad04:	1023883a 	mov	r17,r2
 800ad08:	1c000005 	stb	r16,0(r3)
 800ad0c:	db001617 	ldw	r12,88(sp)
 800ad10:	00800044 	movi	r2,1
 800ad14:	60802226 	beq	r12,r2,800ada0 <_dtoa_r+0x1424>
 800ad18:	d9c00717 	ldw	r7,28(sp)
 800ad1c:	8805883a 	mov	r2,r17
 800ad20:	b82b883a 	mov	r21,r23
 800ad24:	3b19883a 	add	r12,r7,r12
 800ad28:	6023883a 	mov	r17,r12
 800ad2c:	a007883a 	mov	r3,r20
 800ad30:	dc800f15 	stw	r18,60(sp)
 800ad34:	000d883a 	mov	r6,zero
 800ad38:	01d00934 	movhi	r7,16420
 800ad3c:	1009883a 	mov	r4,r2
 800ad40:	180b883a 	mov	r5,r3
 800ad44:	8005ce40 	call	8005ce4 <__muldf3>
 800ad48:	180b883a 	mov	r5,r3
 800ad4c:	1009883a 	mov	r4,r2
 800ad50:	1829883a 	mov	r20,r3
 800ad54:	1025883a 	mov	r18,r2
 800ad58:	8006cf80 	call	8006cf8 <__fixdfsi>
 800ad5c:	1009883a 	mov	r4,r2
 800ad60:	1021883a 	mov	r16,r2
 800ad64:	8006d780 	call	8006d78 <__floatsidf>
 800ad68:	100d883a 	mov	r6,r2
 800ad6c:	180f883a 	mov	r7,r3
 800ad70:	9009883a 	mov	r4,r18
 800ad74:	a00b883a 	mov	r5,r20
 800ad78:	84000c04 	addi	r16,r16,48
 800ad7c:	80063fc0 	call	80063fc <__subdf3>
 800ad80:	ad400044 	addi	r21,r21,1
 800ad84:	ac3fffc5 	stb	r16,-1(r21)
 800ad88:	ac7fea1e 	bne	r21,r17,800ad34 <__alt_data_end+0xfc00ad34>
 800ad8c:	1023883a 	mov	r17,r2
 800ad90:	d8801217 	ldw	r2,72(sp)
 800ad94:	dc800f17 	ldw	r18,60(sp)
 800ad98:	1829883a 	mov	r20,r3
 800ad9c:	b8af883a 	add	r23,r23,r2
 800ada0:	d9001417 	ldw	r4,80(sp)
 800ada4:	d9401517 	ldw	r5,84(sp)
 800ada8:	000d883a 	mov	r6,zero
 800adac:	01cff834 	movhi	r7,16352
 800adb0:	80048f80 	call	80048f8 <__adddf3>
 800adb4:	880d883a 	mov	r6,r17
 800adb8:	a00f883a 	mov	r7,r20
 800adbc:	1009883a 	mov	r4,r2
 800adc0:	180b883a 	mov	r5,r3
 800adc4:	8005bf00 	call	8005bf0 <__ledf2>
 800adc8:	10003e0e 	bge	r2,zero,800aec4 <_dtoa_r+0x1548>
 800adcc:	d9001317 	ldw	r4,76(sp)
 800add0:	bd3fffc3 	ldbu	r20,-1(r23)
 800add4:	d9000515 	stw	r4,20(sp)
 800add8:	003d3b06 	br	800a2c8 <__alt_data_end+0xfc00a2c8>
 800addc:	0027883a 	mov	r19,zero
 800ade0:	003f1b06 	br	800aa50 <__alt_data_end+0xfc00aa50>
 800ade4:	d8800817 	ldw	r2,32(sp)
 800ade8:	11e9c83a 	sub	r20,r2,r7
 800adec:	0005883a 	mov	r2,zero
 800adf0:	003d5406 	br	800a344 <__alt_data_end+0xfc00a344>
 800adf4:	00800044 	movi	r2,1
 800adf8:	003dc706 	br	800a518 <__alt_data_end+0xfc00a518>
 800adfc:	d8c00217 	ldw	r3,8(sp)
 800ae00:	00800d84 	movi	r2,54
 800ae04:	dd400a17 	ldw	r21,40(sp)
 800ae08:	10c5c83a 	sub	r2,r2,r3
 800ae0c:	dd000817 	ldw	r20,32(sp)
 800ae10:	003d4c06 	br	800a344 <__alt_data_end+0xfc00a344>
 800ae14:	dc800f15 	stw	r18,60(sp)
 800ae18:	dcc01015 	stw	r19,64(sp)
 800ae1c:	04000084 	movi	r16,2
 800ae20:	003bed06 	br	8009dd8 <__alt_data_end+0xfc009dd8>
 800ae24:	d9000617 	ldw	r4,24(sp)
 800ae28:	203f0d26 	beq	r4,zero,800aa60 <__alt_data_end+0xfc00aa60>
 800ae2c:	d9800c17 	ldw	r6,48(sp)
 800ae30:	01bcab0e 	bge	zero,r6,800a0e0 <__alt_data_end+0xfc00a0e0>
 800ae34:	d9401017 	ldw	r5,64(sp)
 800ae38:	d9000f17 	ldw	r4,60(sp)
 800ae3c:	000d883a 	mov	r6,zero
 800ae40:	01d00934 	movhi	r7,16420
 800ae44:	8005ce40 	call	8005ce4 <__muldf3>
 800ae48:	81000044 	addi	r4,r16,1
 800ae4c:	d8800f15 	stw	r2,60(sp)
 800ae50:	d8c01015 	stw	r3,64(sp)
 800ae54:	8006d780 	call	8006d78 <__floatsidf>
 800ae58:	d9800f17 	ldw	r6,60(sp)
 800ae5c:	d9c01017 	ldw	r7,64(sp)
 800ae60:	1009883a 	mov	r4,r2
 800ae64:	180b883a 	mov	r5,r3
 800ae68:	8005ce40 	call	8005ce4 <__muldf3>
 800ae6c:	01d00734 	movhi	r7,16412
 800ae70:	000d883a 	mov	r6,zero
 800ae74:	1009883a 	mov	r4,r2
 800ae78:	180b883a 	mov	r5,r3
 800ae7c:	80048f80 	call	80048f8 <__adddf3>
 800ae80:	d9c00517 	ldw	r7,20(sp)
 800ae84:	047f3034 	movhi	r17,64704
 800ae88:	1021883a 	mov	r16,r2
 800ae8c:	39ffffc4 	addi	r7,r7,-1
 800ae90:	d9c01315 	stw	r7,76(sp)
 800ae94:	1c63883a 	add	r17,r3,r17
 800ae98:	db000c17 	ldw	r12,48(sp)
 800ae9c:	003bea06 	br	8009e48 <__alt_data_end+0xfc009e48>
 800aea0:	dc000915 	stw	r16,36(sp)
 800aea4:	003e0e06 	br	800a6e0 <__alt_data_end+0xfc00a6e0>
 800aea8:	01000e44 	movi	r4,57
 800aeac:	8825883a 	mov	r18,r17
 800aeb0:	9dc00044 	addi	r23,r19,1
 800aeb4:	99000005 	stb	r4,0(r19)
 800aeb8:	a023883a 	mov	r17,r20
 800aebc:	dc000915 	stw	r16,36(sp)
 800aec0:	003da406 	br	800a554 <__alt_data_end+0xfc00a554>
 800aec4:	d9801417 	ldw	r6,80(sp)
 800aec8:	d9c01517 	ldw	r7,84(sp)
 800aecc:	0009883a 	mov	r4,zero
 800aed0:	014ff834 	movhi	r5,16352
 800aed4:	80063fc0 	call	80063fc <__subdf3>
 800aed8:	880d883a 	mov	r6,r17
 800aedc:	a00f883a 	mov	r7,r20
 800aee0:	1009883a 	mov	r4,r2
 800aee4:	180b883a 	mov	r5,r3
 800aee8:	8005b140 	call	8005b14 <__gedf2>
 800aeec:	00bc7c0e 	bge	zero,r2,800a0e0 <__alt_data_end+0xfc00a0e0>
 800aef0:	01000c04 	movi	r4,48
 800aef4:	00000106 	br	800aefc <_dtoa_r+0x1580>
 800aef8:	102f883a 	mov	r23,r2
 800aefc:	b8bfffc4 	addi	r2,r23,-1
 800af00:	10c00007 	ldb	r3,0(r2)
 800af04:	193ffc26 	beq	r3,r4,800aef8 <__alt_data_end+0xfc00aef8>
 800af08:	d9801317 	ldw	r6,76(sp)
 800af0c:	d9800515 	stw	r6,20(sp)
 800af10:	003c4406 	br	800a024 <__alt_data_end+0xfc00a024>
 800af14:	d9801317 	ldw	r6,76(sp)
 800af18:	d9800515 	stw	r6,20(sp)
 800af1c:	003cea06 	br	800a2c8 <__alt_data_end+0xfc00a2c8>
 800af20:	dd800f17 	ldw	r22,60(sp)
 800af24:	dcc01017 	ldw	r19,64(sp)
 800af28:	dc801217 	ldw	r18,72(sp)
 800af2c:	003c6c06 	br	800a0e0 <__alt_data_end+0xfc00a0e0>
 800af30:	903e031e 	bne	r18,zero,800a740 <__alt_data_end+0xfc00a740>
 800af34:	003ebb06 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800af38:	103e6c1e 	bne	r2,zero,800a8ec <__alt_data_end+0xfc00a8ec>
 800af3c:	4080004c 	andi	r2,r8,1
 800af40:	103e6a26 	beq	r2,zero,800a8ec <__alt_data_end+0xfc00a8ec>
 800af44:	003e6606 	br	800a8e0 <__alt_data_end+0xfc00a8e0>
 800af48:	d8c00317 	ldw	r3,12(sp)
 800af4c:	00800084 	movi	r2,2
 800af50:	10c02916 	blt	r2,r3,800aff8 <_dtoa_r+0x167c>
 800af54:	d9000c17 	ldw	r4,48(sp)
 800af58:	003e8806 	br	800a97c <__alt_data_end+0xfc00a97c>
 800af5c:	04000084 	movi	r16,2
 800af60:	003b9d06 	br	8009dd8 <__alt_data_end+0xfc009dd8>
 800af64:	d9001317 	ldw	r4,76(sp)
 800af68:	d9000515 	stw	r4,20(sp)
 800af6c:	003cd606 	br	800a2c8 <__alt_data_end+0xfc00a2c8>
 800af70:	d8801317 	ldw	r2,76(sp)
 800af74:	d8800515 	stw	r2,20(sp)
 800af78:	003c2a06 	br	800a024 <__alt_data_end+0xfc00a024>
 800af7c:	d9800317 	ldw	r6,12(sp)
 800af80:	00800084 	movi	r2,2
 800af84:	11801516 	blt	r2,r6,800afdc <_dtoa_r+0x1660>
 800af88:	d9c00c17 	ldw	r7,48(sp)
 800af8c:	d9c00615 	stw	r7,24(sp)
 800af90:	003df706 	br	800a770 <__alt_data_end+0xfc00a770>
 800af94:	193d3926 	beq	r3,r4,800a47c <__alt_data_end+0xfc00a47c>
 800af98:	00c00f04 	movi	r3,60
 800af9c:	1885c83a 	sub	r2,r3,r2
 800afa0:	003ddf06 	br	800a720 <__alt_data_end+0xfc00a720>
 800afa4:	e009883a 	mov	r4,fp
 800afa8:	e0001115 	stw	zero,68(fp)
 800afac:	000b883a 	mov	r5,zero
 800afb0:	800d0180 	call	800d018 <_Balloc>
 800afb4:	d8800715 	stw	r2,28(sp)
 800afb8:	d8c00717 	ldw	r3,28(sp)
 800afbc:	00bfffc4 	movi	r2,-1
 800afc0:	01000044 	movi	r4,1
 800afc4:	d8800c15 	stw	r2,48(sp)
 800afc8:	e0c01015 	stw	r3,64(fp)
 800afcc:	d9000b15 	stw	r4,44(sp)
 800afd0:	d8800615 	stw	r2,24(sp)
 800afd4:	d8002215 	stw	zero,136(sp)
 800afd8:	003c4106 	br	800a0e0 <__alt_data_end+0xfc00a0e0>
 800afdc:	d8c00c17 	ldw	r3,48(sp)
 800afe0:	d8c00615 	stw	r3,24(sp)
 800afe4:	003e7006 	br	800a9a8 <__alt_data_end+0xfc00a9a8>
 800afe8:	04400044 	movi	r17,1
 800afec:	003b2006 	br	8009c70 <__alt_data_end+0xfc009c70>
 800aff0:	000b883a 	mov	r5,zero
 800aff4:	003b3d06 	br	8009cec <__alt_data_end+0xfc009cec>
 800aff8:	d8800c17 	ldw	r2,48(sp)
 800affc:	d8800615 	stw	r2,24(sp)
 800b000:	003e6906 	br	800a9a8 <__alt_data_end+0xfc00a9a8>

0800b004 <__sflush_r>:
 800b004:	2880030b 	ldhu	r2,12(r5)
 800b008:	defffb04 	addi	sp,sp,-20
 800b00c:	dcc00315 	stw	r19,12(sp)
 800b010:	dc400115 	stw	r17,4(sp)
 800b014:	dfc00415 	stw	ra,16(sp)
 800b018:	dc800215 	stw	r18,8(sp)
 800b01c:	dc000015 	stw	r16,0(sp)
 800b020:	10c0020c 	andi	r3,r2,8
 800b024:	2823883a 	mov	r17,r5
 800b028:	2027883a 	mov	r19,r4
 800b02c:	1800311e 	bne	r3,zero,800b0f4 <__sflush_r+0xf0>
 800b030:	28c00117 	ldw	r3,4(r5)
 800b034:	10820014 	ori	r2,r2,2048
 800b038:	2880030d 	sth	r2,12(r5)
 800b03c:	00c04b0e 	bge	zero,r3,800b16c <__sflush_r+0x168>
 800b040:	8a000a17 	ldw	r8,40(r17)
 800b044:	40002326 	beq	r8,zero,800b0d4 <__sflush_r+0xd0>
 800b048:	9c000017 	ldw	r16,0(r19)
 800b04c:	10c4000c 	andi	r3,r2,4096
 800b050:	98000015 	stw	zero,0(r19)
 800b054:	18004826 	beq	r3,zero,800b178 <__sflush_r+0x174>
 800b058:	89801417 	ldw	r6,80(r17)
 800b05c:	10c0010c 	andi	r3,r2,4
 800b060:	18000626 	beq	r3,zero,800b07c <__sflush_r+0x78>
 800b064:	88c00117 	ldw	r3,4(r17)
 800b068:	88800c17 	ldw	r2,48(r17)
 800b06c:	30cdc83a 	sub	r6,r6,r3
 800b070:	10000226 	beq	r2,zero,800b07c <__sflush_r+0x78>
 800b074:	88800f17 	ldw	r2,60(r17)
 800b078:	308dc83a 	sub	r6,r6,r2
 800b07c:	89400717 	ldw	r5,28(r17)
 800b080:	000f883a 	mov	r7,zero
 800b084:	9809883a 	mov	r4,r19
 800b088:	403ee83a 	callr	r8
 800b08c:	00ffffc4 	movi	r3,-1
 800b090:	10c04426 	beq	r2,r3,800b1a4 <__sflush_r+0x1a0>
 800b094:	88c0030b 	ldhu	r3,12(r17)
 800b098:	89000417 	ldw	r4,16(r17)
 800b09c:	88000115 	stw	zero,4(r17)
 800b0a0:	197dffcc 	andi	r5,r3,63487
 800b0a4:	8940030d 	sth	r5,12(r17)
 800b0a8:	89000015 	stw	r4,0(r17)
 800b0ac:	18c4000c 	andi	r3,r3,4096
 800b0b0:	18002c1e 	bne	r3,zero,800b164 <__sflush_r+0x160>
 800b0b4:	89400c17 	ldw	r5,48(r17)
 800b0b8:	9c000015 	stw	r16,0(r19)
 800b0bc:	28000526 	beq	r5,zero,800b0d4 <__sflush_r+0xd0>
 800b0c0:	88801004 	addi	r2,r17,64
 800b0c4:	28800226 	beq	r5,r2,800b0d0 <__sflush_r+0xcc>
 800b0c8:	9809883a 	mov	r4,r19
 800b0cc:	800b7700 	call	800b770 <_free_r>
 800b0d0:	88000c15 	stw	zero,48(r17)
 800b0d4:	0005883a 	mov	r2,zero
 800b0d8:	dfc00417 	ldw	ra,16(sp)
 800b0dc:	dcc00317 	ldw	r19,12(sp)
 800b0e0:	dc800217 	ldw	r18,8(sp)
 800b0e4:	dc400117 	ldw	r17,4(sp)
 800b0e8:	dc000017 	ldw	r16,0(sp)
 800b0ec:	dec00504 	addi	sp,sp,20
 800b0f0:	f800283a 	ret
 800b0f4:	2c800417 	ldw	r18,16(r5)
 800b0f8:	903ff626 	beq	r18,zero,800b0d4 <__alt_data_end+0xfc00b0d4>
 800b0fc:	2c000017 	ldw	r16,0(r5)
 800b100:	108000cc 	andi	r2,r2,3
 800b104:	2c800015 	stw	r18,0(r5)
 800b108:	84a1c83a 	sub	r16,r16,r18
 800b10c:	1000131e 	bne	r2,zero,800b15c <__sflush_r+0x158>
 800b110:	28800517 	ldw	r2,20(r5)
 800b114:	88800215 	stw	r2,8(r17)
 800b118:	04000316 	blt	zero,r16,800b128 <__sflush_r+0x124>
 800b11c:	003fed06 	br	800b0d4 <__alt_data_end+0xfc00b0d4>
 800b120:	90a5883a 	add	r18,r18,r2
 800b124:	043feb0e 	bge	zero,r16,800b0d4 <__alt_data_end+0xfc00b0d4>
 800b128:	88800917 	ldw	r2,36(r17)
 800b12c:	89400717 	ldw	r5,28(r17)
 800b130:	800f883a 	mov	r7,r16
 800b134:	900d883a 	mov	r6,r18
 800b138:	9809883a 	mov	r4,r19
 800b13c:	103ee83a 	callr	r2
 800b140:	80a1c83a 	sub	r16,r16,r2
 800b144:	00bff616 	blt	zero,r2,800b120 <__alt_data_end+0xfc00b120>
 800b148:	88c0030b 	ldhu	r3,12(r17)
 800b14c:	00bfffc4 	movi	r2,-1
 800b150:	18c01014 	ori	r3,r3,64
 800b154:	88c0030d 	sth	r3,12(r17)
 800b158:	003fdf06 	br	800b0d8 <__alt_data_end+0xfc00b0d8>
 800b15c:	0005883a 	mov	r2,zero
 800b160:	003fec06 	br	800b114 <__alt_data_end+0xfc00b114>
 800b164:	88801415 	stw	r2,80(r17)
 800b168:	003fd206 	br	800b0b4 <__alt_data_end+0xfc00b0b4>
 800b16c:	28c00f17 	ldw	r3,60(r5)
 800b170:	00ffb316 	blt	zero,r3,800b040 <__alt_data_end+0xfc00b040>
 800b174:	003fd706 	br	800b0d4 <__alt_data_end+0xfc00b0d4>
 800b178:	89400717 	ldw	r5,28(r17)
 800b17c:	000d883a 	mov	r6,zero
 800b180:	01c00044 	movi	r7,1
 800b184:	9809883a 	mov	r4,r19
 800b188:	403ee83a 	callr	r8
 800b18c:	100d883a 	mov	r6,r2
 800b190:	00bfffc4 	movi	r2,-1
 800b194:	30801426 	beq	r6,r2,800b1e8 <__sflush_r+0x1e4>
 800b198:	8880030b 	ldhu	r2,12(r17)
 800b19c:	8a000a17 	ldw	r8,40(r17)
 800b1a0:	003fae06 	br	800b05c <__alt_data_end+0xfc00b05c>
 800b1a4:	98c00017 	ldw	r3,0(r19)
 800b1a8:	183fba26 	beq	r3,zero,800b094 <__alt_data_end+0xfc00b094>
 800b1ac:	01000744 	movi	r4,29
 800b1b0:	19000626 	beq	r3,r4,800b1cc <__sflush_r+0x1c8>
 800b1b4:	01000584 	movi	r4,22
 800b1b8:	19000426 	beq	r3,r4,800b1cc <__sflush_r+0x1c8>
 800b1bc:	88c0030b 	ldhu	r3,12(r17)
 800b1c0:	18c01014 	ori	r3,r3,64
 800b1c4:	88c0030d 	sth	r3,12(r17)
 800b1c8:	003fc306 	br	800b0d8 <__alt_data_end+0xfc00b0d8>
 800b1cc:	8880030b 	ldhu	r2,12(r17)
 800b1d0:	88c00417 	ldw	r3,16(r17)
 800b1d4:	88000115 	stw	zero,4(r17)
 800b1d8:	10bdffcc 	andi	r2,r2,63487
 800b1dc:	8880030d 	sth	r2,12(r17)
 800b1e0:	88c00015 	stw	r3,0(r17)
 800b1e4:	003fb306 	br	800b0b4 <__alt_data_end+0xfc00b0b4>
 800b1e8:	98800017 	ldw	r2,0(r19)
 800b1ec:	103fea26 	beq	r2,zero,800b198 <__alt_data_end+0xfc00b198>
 800b1f0:	00c00744 	movi	r3,29
 800b1f4:	10c00226 	beq	r2,r3,800b200 <__sflush_r+0x1fc>
 800b1f8:	00c00584 	movi	r3,22
 800b1fc:	10c0031e 	bne	r2,r3,800b20c <__sflush_r+0x208>
 800b200:	9c000015 	stw	r16,0(r19)
 800b204:	0005883a 	mov	r2,zero
 800b208:	003fb306 	br	800b0d8 <__alt_data_end+0xfc00b0d8>
 800b20c:	88c0030b 	ldhu	r3,12(r17)
 800b210:	3005883a 	mov	r2,r6
 800b214:	18c01014 	ori	r3,r3,64
 800b218:	88c0030d 	sth	r3,12(r17)
 800b21c:	003fae06 	br	800b0d8 <__alt_data_end+0xfc00b0d8>

0800b220 <_fflush_r>:
 800b220:	defffd04 	addi	sp,sp,-12
 800b224:	dc000115 	stw	r16,4(sp)
 800b228:	dfc00215 	stw	ra,8(sp)
 800b22c:	2021883a 	mov	r16,r4
 800b230:	20000226 	beq	r4,zero,800b23c <_fflush_r+0x1c>
 800b234:	20800e17 	ldw	r2,56(r4)
 800b238:	10000c26 	beq	r2,zero,800b26c <_fflush_r+0x4c>
 800b23c:	2880030f 	ldh	r2,12(r5)
 800b240:	1000051e 	bne	r2,zero,800b258 <_fflush_r+0x38>
 800b244:	0005883a 	mov	r2,zero
 800b248:	dfc00217 	ldw	ra,8(sp)
 800b24c:	dc000117 	ldw	r16,4(sp)
 800b250:	dec00304 	addi	sp,sp,12
 800b254:	f800283a 	ret
 800b258:	8009883a 	mov	r4,r16
 800b25c:	dfc00217 	ldw	ra,8(sp)
 800b260:	dc000117 	ldw	r16,4(sp)
 800b264:	dec00304 	addi	sp,sp,12
 800b268:	800b0041 	jmpi	800b004 <__sflush_r>
 800b26c:	d9400015 	stw	r5,0(sp)
 800b270:	800b5fc0 	call	800b5fc <__sinit>
 800b274:	d9400017 	ldw	r5,0(sp)
 800b278:	003ff006 	br	800b23c <__alt_data_end+0xfc00b23c>

0800b27c <fflush>:
 800b27c:	20000526 	beq	r4,zero,800b294 <fflush+0x18>
 800b280:	00820074 	movhi	r2,2049
 800b284:	109df204 	addi	r2,r2,30664
 800b288:	200b883a 	mov	r5,r4
 800b28c:	11000017 	ldw	r4,0(r2)
 800b290:	800b2201 	jmpi	800b220 <_fflush_r>
 800b294:	00820074 	movhi	r2,2049
 800b298:	109df104 	addi	r2,r2,30660
 800b29c:	11000017 	ldw	r4,0(r2)
 800b2a0:	01420074 	movhi	r5,2049
 800b2a4:	296c8804 	addi	r5,r5,-19936
 800b2a8:	800c0001 	jmpi	800c000 <_fwalk_reent>

0800b2ac <__fp_unlock>:
 800b2ac:	0005883a 	mov	r2,zero
 800b2b0:	f800283a 	ret

0800b2b4 <_cleanup_r>:
 800b2b4:	01420074 	movhi	r5,2049
 800b2b8:	297fe904 	addi	r5,r5,-92
 800b2bc:	800c0001 	jmpi	800c000 <_fwalk_reent>

0800b2c0 <__sinit.part.1>:
 800b2c0:	defff704 	addi	sp,sp,-36
 800b2c4:	00c20074 	movhi	r3,2049
 800b2c8:	dfc00815 	stw	ra,32(sp)
 800b2cc:	ddc00715 	stw	r23,28(sp)
 800b2d0:	dd800615 	stw	r22,24(sp)
 800b2d4:	dd400515 	stw	r21,20(sp)
 800b2d8:	dd000415 	stw	r20,16(sp)
 800b2dc:	dcc00315 	stw	r19,12(sp)
 800b2e0:	dc800215 	stw	r18,8(sp)
 800b2e4:	dc400115 	stw	r17,4(sp)
 800b2e8:	dc000015 	stw	r16,0(sp)
 800b2ec:	18ecad04 	addi	r3,r3,-19788
 800b2f0:	24000117 	ldw	r16,4(r4)
 800b2f4:	20c00f15 	stw	r3,60(r4)
 800b2f8:	2080bb04 	addi	r2,r4,748
 800b2fc:	00c000c4 	movi	r3,3
 800b300:	20c0b915 	stw	r3,740(r4)
 800b304:	2080ba15 	stw	r2,744(r4)
 800b308:	2000b815 	stw	zero,736(r4)
 800b30c:	05c00204 	movi	r23,8
 800b310:	00800104 	movi	r2,4
 800b314:	2025883a 	mov	r18,r4
 800b318:	b80d883a 	mov	r6,r23
 800b31c:	81001704 	addi	r4,r16,92
 800b320:	000b883a 	mov	r5,zero
 800b324:	80000015 	stw	zero,0(r16)
 800b328:	80000115 	stw	zero,4(r16)
 800b32c:	80000215 	stw	zero,8(r16)
 800b330:	8080030d 	sth	r2,12(r16)
 800b334:	80001915 	stw	zero,100(r16)
 800b338:	8000038d 	sth	zero,14(r16)
 800b33c:	80000415 	stw	zero,16(r16)
 800b340:	80000515 	stw	zero,20(r16)
 800b344:	80000615 	stw	zero,24(r16)
 800b348:	800cef00 	call	800cef0 <memset>
 800b34c:	05820074 	movhi	r22,2049
 800b350:	94400217 	ldw	r17,8(r18)
 800b354:	05420074 	movhi	r21,2049
 800b358:	05020074 	movhi	r20,2049
 800b35c:	04c20074 	movhi	r19,2049
 800b360:	b5b97304 	addi	r22,r22,-6708
 800b364:	ad798a04 	addi	r21,r21,-6616
 800b368:	a539a904 	addi	r20,r20,-6492
 800b36c:	9cf9c004 	addi	r19,r19,-6400
 800b370:	85800815 	stw	r22,32(r16)
 800b374:	85400915 	stw	r21,36(r16)
 800b378:	85000a15 	stw	r20,40(r16)
 800b37c:	84c00b15 	stw	r19,44(r16)
 800b380:	84000715 	stw	r16,28(r16)
 800b384:	00800284 	movi	r2,10
 800b388:	8880030d 	sth	r2,12(r17)
 800b38c:	00800044 	movi	r2,1
 800b390:	b80d883a 	mov	r6,r23
 800b394:	89001704 	addi	r4,r17,92
 800b398:	000b883a 	mov	r5,zero
 800b39c:	88000015 	stw	zero,0(r17)
 800b3a0:	88000115 	stw	zero,4(r17)
 800b3a4:	88000215 	stw	zero,8(r17)
 800b3a8:	88001915 	stw	zero,100(r17)
 800b3ac:	8880038d 	sth	r2,14(r17)
 800b3b0:	88000415 	stw	zero,16(r17)
 800b3b4:	88000515 	stw	zero,20(r17)
 800b3b8:	88000615 	stw	zero,24(r17)
 800b3bc:	800cef00 	call	800cef0 <memset>
 800b3c0:	94000317 	ldw	r16,12(r18)
 800b3c4:	00800484 	movi	r2,18
 800b3c8:	8c400715 	stw	r17,28(r17)
 800b3cc:	8d800815 	stw	r22,32(r17)
 800b3d0:	8d400915 	stw	r21,36(r17)
 800b3d4:	8d000a15 	stw	r20,40(r17)
 800b3d8:	8cc00b15 	stw	r19,44(r17)
 800b3dc:	8080030d 	sth	r2,12(r16)
 800b3e0:	00800084 	movi	r2,2
 800b3e4:	80000015 	stw	zero,0(r16)
 800b3e8:	80000115 	stw	zero,4(r16)
 800b3ec:	80000215 	stw	zero,8(r16)
 800b3f0:	80001915 	stw	zero,100(r16)
 800b3f4:	8080038d 	sth	r2,14(r16)
 800b3f8:	80000415 	stw	zero,16(r16)
 800b3fc:	80000515 	stw	zero,20(r16)
 800b400:	80000615 	stw	zero,24(r16)
 800b404:	b80d883a 	mov	r6,r23
 800b408:	000b883a 	mov	r5,zero
 800b40c:	81001704 	addi	r4,r16,92
 800b410:	800cef00 	call	800cef0 <memset>
 800b414:	00800044 	movi	r2,1
 800b418:	84000715 	stw	r16,28(r16)
 800b41c:	85800815 	stw	r22,32(r16)
 800b420:	85400915 	stw	r21,36(r16)
 800b424:	85000a15 	stw	r20,40(r16)
 800b428:	84c00b15 	stw	r19,44(r16)
 800b42c:	90800e15 	stw	r2,56(r18)
 800b430:	dfc00817 	ldw	ra,32(sp)
 800b434:	ddc00717 	ldw	r23,28(sp)
 800b438:	dd800617 	ldw	r22,24(sp)
 800b43c:	dd400517 	ldw	r21,20(sp)
 800b440:	dd000417 	ldw	r20,16(sp)
 800b444:	dcc00317 	ldw	r19,12(sp)
 800b448:	dc800217 	ldw	r18,8(sp)
 800b44c:	dc400117 	ldw	r17,4(sp)
 800b450:	dc000017 	ldw	r16,0(sp)
 800b454:	dec00904 	addi	sp,sp,36
 800b458:	f800283a 	ret

0800b45c <__fp_lock>:
 800b45c:	0005883a 	mov	r2,zero
 800b460:	f800283a 	ret

0800b464 <__sfmoreglue>:
 800b464:	defffc04 	addi	sp,sp,-16
 800b468:	dc400115 	stw	r17,4(sp)
 800b46c:	2c7fffc4 	addi	r17,r5,-1
 800b470:	8c401a24 	muli	r17,r17,104
 800b474:	dc800215 	stw	r18,8(sp)
 800b478:	2825883a 	mov	r18,r5
 800b47c:	89401d04 	addi	r5,r17,116
 800b480:	dc000015 	stw	r16,0(sp)
 800b484:	dfc00315 	stw	ra,12(sp)
 800b488:	800c35c0 	call	800c35c <_malloc_r>
 800b48c:	1021883a 	mov	r16,r2
 800b490:	10000726 	beq	r2,zero,800b4b0 <__sfmoreglue+0x4c>
 800b494:	11000304 	addi	r4,r2,12
 800b498:	10000015 	stw	zero,0(r2)
 800b49c:	14800115 	stw	r18,4(r2)
 800b4a0:	11000215 	stw	r4,8(r2)
 800b4a4:	89801a04 	addi	r6,r17,104
 800b4a8:	000b883a 	mov	r5,zero
 800b4ac:	800cef00 	call	800cef0 <memset>
 800b4b0:	8005883a 	mov	r2,r16
 800b4b4:	dfc00317 	ldw	ra,12(sp)
 800b4b8:	dc800217 	ldw	r18,8(sp)
 800b4bc:	dc400117 	ldw	r17,4(sp)
 800b4c0:	dc000017 	ldw	r16,0(sp)
 800b4c4:	dec00404 	addi	sp,sp,16
 800b4c8:	f800283a 	ret

0800b4cc <__sfp>:
 800b4cc:	defffb04 	addi	sp,sp,-20
 800b4d0:	dc000015 	stw	r16,0(sp)
 800b4d4:	04020074 	movhi	r16,2049
 800b4d8:	841df104 	addi	r16,r16,30660
 800b4dc:	dcc00315 	stw	r19,12(sp)
 800b4e0:	2027883a 	mov	r19,r4
 800b4e4:	81000017 	ldw	r4,0(r16)
 800b4e8:	dfc00415 	stw	ra,16(sp)
 800b4ec:	dc800215 	stw	r18,8(sp)
 800b4f0:	20800e17 	ldw	r2,56(r4)
 800b4f4:	dc400115 	stw	r17,4(sp)
 800b4f8:	1000021e 	bne	r2,zero,800b504 <__sfp+0x38>
 800b4fc:	800b2c00 	call	800b2c0 <__sinit.part.1>
 800b500:	81000017 	ldw	r4,0(r16)
 800b504:	2480b804 	addi	r18,r4,736
 800b508:	047fffc4 	movi	r17,-1
 800b50c:	91000117 	ldw	r4,4(r18)
 800b510:	94000217 	ldw	r16,8(r18)
 800b514:	213fffc4 	addi	r4,r4,-1
 800b518:	20000a16 	blt	r4,zero,800b544 <__sfp+0x78>
 800b51c:	8080030f 	ldh	r2,12(r16)
 800b520:	10000c26 	beq	r2,zero,800b554 <__sfp+0x88>
 800b524:	80c01d04 	addi	r3,r16,116
 800b528:	00000206 	br	800b534 <__sfp+0x68>
 800b52c:	18bfe60f 	ldh	r2,-104(r3)
 800b530:	10000826 	beq	r2,zero,800b554 <__sfp+0x88>
 800b534:	213fffc4 	addi	r4,r4,-1
 800b538:	1c3ffd04 	addi	r16,r3,-12
 800b53c:	18c01a04 	addi	r3,r3,104
 800b540:	247ffa1e 	bne	r4,r17,800b52c <__alt_data_end+0xfc00b52c>
 800b544:	90800017 	ldw	r2,0(r18)
 800b548:	10001d26 	beq	r2,zero,800b5c0 <__sfp+0xf4>
 800b54c:	1025883a 	mov	r18,r2
 800b550:	003fee06 	br	800b50c <__alt_data_end+0xfc00b50c>
 800b554:	00bfffc4 	movi	r2,-1
 800b558:	8080038d 	sth	r2,14(r16)
 800b55c:	00800044 	movi	r2,1
 800b560:	8080030d 	sth	r2,12(r16)
 800b564:	80001915 	stw	zero,100(r16)
 800b568:	80000015 	stw	zero,0(r16)
 800b56c:	80000215 	stw	zero,8(r16)
 800b570:	80000115 	stw	zero,4(r16)
 800b574:	80000415 	stw	zero,16(r16)
 800b578:	80000515 	stw	zero,20(r16)
 800b57c:	80000615 	stw	zero,24(r16)
 800b580:	01800204 	movi	r6,8
 800b584:	000b883a 	mov	r5,zero
 800b588:	81001704 	addi	r4,r16,92
 800b58c:	800cef00 	call	800cef0 <memset>
 800b590:	8005883a 	mov	r2,r16
 800b594:	80000c15 	stw	zero,48(r16)
 800b598:	80000d15 	stw	zero,52(r16)
 800b59c:	80001115 	stw	zero,68(r16)
 800b5a0:	80001215 	stw	zero,72(r16)
 800b5a4:	dfc00417 	ldw	ra,16(sp)
 800b5a8:	dcc00317 	ldw	r19,12(sp)
 800b5ac:	dc800217 	ldw	r18,8(sp)
 800b5b0:	dc400117 	ldw	r17,4(sp)
 800b5b4:	dc000017 	ldw	r16,0(sp)
 800b5b8:	dec00504 	addi	sp,sp,20
 800b5bc:	f800283a 	ret
 800b5c0:	01400104 	movi	r5,4
 800b5c4:	9809883a 	mov	r4,r19
 800b5c8:	800b4640 	call	800b464 <__sfmoreglue>
 800b5cc:	90800015 	stw	r2,0(r18)
 800b5d0:	103fde1e 	bne	r2,zero,800b54c <__alt_data_end+0xfc00b54c>
 800b5d4:	00800304 	movi	r2,12
 800b5d8:	98800015 	stw	r2,0(r19)
 800b5dc:	0005883a 	mov	r2,zero
 800b5e0:	003ff006 	br	800b5a4 <__alt_data_end+0xfc00b5a4>

0800b5e4 <_cleanup>:
 800b5e4:	00820074 	movhi	r2,2049
 800b5e8:	109df104 	addi	r2,r2,30660
 800b5ec:	11000017 	ldw	r4,0(r2)
 800b5f0:	01420074 	movhi	r5,2049
 800b5f4:	297fe904 	addi	r5,r5,-92
 800b5f8:	800c0001 	jmpi	800c000 <_fwalk_reent>

0800b5fc <__sinit>:
 800b5fc:	20800e17 	ldw	r2,56(r4)
 800b600:	10000126 	beq	r2,zero,800b608 <__sinit+0xc>
 800b604:	f800283a 	ret
 800b608:	800b2c01 	jmpi	800b2c0 <__sinit.part.1>

0800b60c <__sfp_lock_acquire>:
 800b60c:	f800283a 	ret

0800b610 <__sfp_lock_release>:
 800b610:	f800283a 	ret

0800b614 <__sinit_lock_acquire>:
 800b614:	f800283a 	ret

0800b618 <__sinit_lock_release>:
 800b618:	f800283a 	ret

0800b61c <__fp_lock_all>:
 800b61c:	00820074 	movhi	r2,2049
 800b620:	109df204 	addi	r2,r2,30664
 800b624:	11000017 	ldw	r4,0(r2)
 800b628:	01420074 	movhi	r5,2049
 800b62c:	296d1704 	addi	r5,r5,-19364
 800b630:	800bf3c1 	jmpi	800bf3c <_fwalk>

0800b634 <__fp_unlock_all>:
 800b634:	00820074 	movhi	r2,2049
 800b638:	109df204 	addi	r2,r2,30664
 800b63c:	11000017 	ldw	r4,0(r2)
 800b640:	01420074 	movhi	r5,2049
 800b644:	296cab04 	addi	r5,r5,-19796
 800b648:	800bf3c1 	jmpi	800bf3c <_fwalk>

0800b64c <_malloc_trim_r>:
 800b64c:	defffb04 	addi	sp,sp,-20
 800b650:	dcc00315 	stw	r19,12(sp)
 800b654:	04c20074 	movhi	r19,2049
 800b658:	dc800215 	stw	r18,8(sp)
 800b65c:	dc400115 	stw	r17,4(sp)
 800b660:	dc000015 	stw	r16,0(sp)
 800b664:	dfc00415 	stw	ra,16(sp)
 800b668:	2821883a 	mov	r16,r5
 800b66c:	9cd83e04 	addi	r19,r19,24824
 800b670:	2025883a 	mov	r18,r4
 800b674:	80118340 	call	8011834 <__malloc_lock>
 800b678:	98800217 	ldw	r2,8(r19)
 800b67c:	14400117 	ldw	r17,4(r2)
 800b680:	00bfff04 	movi	r2,-4
 800b684:	88a2703a 	and	r17,r17,r2
 800b688:	8c21c83a 	sub	r16,r17,r16
 800b68c:	8403fbc4 	addi	r16,r16,4079
 800b690:	8020d33a 	srli	r16,r16,12
 800b694:	0083ffc4 	movi	r2,4095
 800b698:	843fffc4 	addi	r16,r16,-1
 800b69c:	8020933a 	slli	r16,r16,12
 800b6a0:	1400060e 	bge	r2,r16,800b6bc <_malloc_trim_r+0x70>
 800b6a4:	000b883a 	mov	r5,zero
 800b6a8:	9009883a 	mov	r4,r18
 800b6ac:	800e5780 	call	800e578 <_sbrk_r>
 800b6b0:	98c00217 	ldw	r3,8(r19)
 800b6b4:	1c47883a 	add	r3,r3,r17
 800b6b8:	10c00a26 	beq	r2,r3,800b6e4 <_malloc_trim_r+0x98>
 800b6bc:	9009883a 	mov	r4,r18
 800b6c0:	80118580 	call	8011858 <__malloc_unlock>
 800b6c4:	0005883a 	mov	r2,zero
 800b6c8:	dfc00417 	ldw	ra,16(sp)
 800b6cc:	dcc00317 	ldw	r19,12(sp)
 800b6d0:	dc800217 	ldw	r18,8(sp)
 800b6d4:	dc400117 	ldw	r17,4(sp)
 800b6d8:	dc000017 	ldw	r16,0(sp)
 800b6dc:	dec00504 	addi	sp,sp,20
 800b6e0:	f800283a 	ret
 800b6e4:	040bc83a 	sub	r5,zero,r16
 800b6e8:	9009883a 	mov	r4,r18
 800b6ec:	800e5780 	call	800e578 <_sbrk_r>
 800b6f0:	00ffffc4 	movi	r3,-1
 800b6f4:	10c00d26 	beq	r2,r3,800b72c <_malloc_trim_r+0xe0>
 800b6f8:	00c200b4 	movhi	r3,2050
 800b6fc:	18e50104 	addi	r3,r3,-27644
 800b700:	18800017 	ldw	r2,0(r3)
 800b704:	99000217 	ldw	r4,8(r19)
 800b708:	8c23c83a 	sub	r17,r17,r16
 800b70c:	8c400054 	ori	r17,r17,1
 800b710:	1421c83a 	sub	r16,r2,r16
 800b714:	24400115 	stw	r17,4(r4)
 800b718:	9009883a 	mov	r4,r18
 800b71c:	1c000015 	stw	r16,0(r3)
 800b720:	80118580 	call	8011858 <__malloc_unlock>
 800b724:	00800044 	movi	r2,1
 800b728:	003fe706 	br	800b6c8 <__alt_data_end+0xfc00b6c8>
 800b72c:	000b883a 	mov	r5,zero
 800b730:	9009883a 	mov	r4,r18
 800b734:	800e5780 	call	800e578 <_sbrk_r>
 800b738:	99000217 	ldw	r4,8(r19)
 800b73c:	014003c4 	movi	r5,15
 800b740:	1107c83a 	sub	r3,r2,r4
 800b744:	28ffdd0e 	bge	r5,r3,800b6bc <__alt_data_end+0xfc00b6bc>
 800b748:	01420074 	movhi	r5,2049
 800b74c:	295df404 	addi	r5,r5,30672
 800b750:	29400017 	ldw	r5,0(r5)
 800b754:	18c00054 	ori	r3,r3,1
 800b758:	20c00115 	stw	r3,4(r4)
 800b75c:	00c200b4 	movhi	r3,2050
 800b760:	1145c83a 	sub	r2,r2,r5
 800b764:	18e50104 	addi	r3,r3,-27644
 800b768:	18800015 	stw	r2,0(r3)
 800b76c:	003fd306 	br	800b6bc <__alt_data_end+0xfc00b6bc>

0800b770 <_free_r>:
 800b770:	28004126 	beq	r5,zero,800b878 <_free_r+0x108>
 800b774:	defffd04 	addi	sp,sp,-12
 800b778:	dc400115 	stw	r17,4(sp)
 800b77c:	dc000015 	stw	r16,0(sp)
 800b780:	2023883a 	mov	r17,r4
 800b784:	2821883a 	mov	r16,r5
 800b788:	dfc00215 	stw	ra,8(sp)
 800b78c:	80118340 	call	8011834 <__malloc_lock>
 800b790:	81ffff17 	ldw	r7,-4(r16)
 800b794:	00bfff84 	movi	r2,-2
 800b798:	01020074 	movhi	r4,2049
 800b79c:	81bffe04 	addi	r6,r16,-8
 800b7a0:	3884703a 	and	r2,r7,r2
 800b7a4:	21183e04 	addi	r4,r4,24824
 800b7a8:	308b883a 	add	r5,r6,r2
 800b7ac:	2a400117 	ldw	r9,4(r5)
 800b7b0:	22000217 	ldw	r8,8(r4)
 800b7b4:	00ffff04 	movi	r3,-4
 800b7b8:	48c6703a 	and	r3,r9,r3
 800b7bc:	2a005726 	beq	r5,r8,800b91c <_free_r+0x1ac>
 800b7c0:	28c00115 	stw	r3,4(r5)
 800b7c4:	39c0004c 	andi	r7,r7,1
 800b7c8:	3800091e 	bne	r7,zero,800b7f0 <_free_r+0x80>
 800b7cc:	823ffe17 	ldw	r8,-8(r16)
 800b7d0:	22400204 	addi	r9,r4,8
 800b7d4:	320dc83a 	sub	r6,r6,r8
 800b7d8:	31c00217 	ldw	r7,8(r6)
 800b7dc:	1205883a 	add	r2,r2,r8
 800b7e0:	3a406526 	beq	r7,r9,800b978 <_free_r+0x208>
 800b7e4:	32000317 	ldw	r8,12(r6)
 800b7e8:	3a000315 	stw	r8,12(r7)
 800b7ec:	41c00215 	stw	r7,8(r8)
 800b7f0:	28cf883a 	add	r7,r5,r3
 800b7f4:	39c00117 	ldw	r7,4(r7)
 800b7f8:	39c0004c 	andi	r7,r7,1
 800b7fc:	38003a26 	beq	r7,zero,800b8e8 <_free_r+0x178>
 800b800:	10c00054 	ori	r3,r2,1
 800b804:	30c00115 	stw	r3,4(r6)
 800b808:	3087883a 	add	r3,r6,r2
 800b80c:	18800015 	stw	r2,0(r3)
 800b810:	00c07fc4 	movi	r3,511
 800b814:	18801936 	bltu	r3,r2,800b87c <_free_r+0x10c>
 800b818:	1004d0fa 	srli	r2,r2,3
 800b81c:	01c00044 	movi	r7,1
 800b820:	21400117 	ldw	r5,4(r4)
 800b824:	10c00044 	addi	r3,r2,1
 800b828:	18c7883a 	add	r3,r3,r3
 800b82c:	1005d0ba 	srai	r2,r2,2
 800b830:	18c7883a 	add	r3,r3,r3
 800b834:	18c7883a 	add	r3,r3,r3
 800b838:	1907883a 	add	r3,r3,r4
 800b83c:	3884983a 	sll	r2,r7,r2
 800b840:	19c00017 	ldw	r7,0(r3)
 800b844:	1a3ffe04 	addi	r8,r3,-8
 800b848:	1144b03a 	or	r2,r2,r5
 800b84c:	32000315 	stw	r8,12(r6)
 800b850:	31c00215 	stw	r7,8(r6)
 800b854:	20800115 	stw	r2,4(r4)
 800b858:	19800015 	stw	r6,0(r3)
 800b85c:	39800315 	stw	r6,12(r7)
 800b860:	8809883a 	mov	r4,r17
 800b864:	dfc00217 	ldw	ra,8(sp)
 800b868:	dc400117 	ldw	r17,4(sp)
 800b86c:	dc000017 	ldw	r16,0(sp)
 800b870:	dec00304 	addi	sp,sp,12
 800b874:	80118581 	jmpi	8011858 <__malloc_unlock>
 800b878:	f800283a 	ret
 800b87c:	100ad27a 	srli	r5,r2,9
 800b880:	00c00104 	movi	r3,4
 800b884:	19404a36 	bltu	r3,r5,800b9b0 <_free_r+0x240>
 800b888:	100ad1ba 	srli	r5,r2,6
 800b88c:	28c00e44 	addi	r3,r5,57
 800b890:	18c7883a 	add	r3,r3,r3
 800b894:	29400e04 	addi	r5,r5,56
 800b898:	18c7883a 	add	r3,r3,r3
 800b89c:	18c7883a 	add	r3,r3,r3
 800b8a0:	1909883a 	add	r4,r3,r4
 800b8a4:	20c00017 	ldw	r3,0(r4)
 800b8a8:	01c20074 	movhi	r7,2049
 800b8ac:	213ffe04 	addi	r4,r4,-8
 800b8b0:	39d83e04 	addi	r7,r7,24824
 800b8b4:	20c04426 	beq	r4,r3,800b9c8 <_free_r+0x258>
 800b8b8:	01ffff04 	movi	r7,-4
 800b8bc:	19400117 	ldw	r5,4(r3)
 800b8c0:	29ca703a 	and	r5,r5,r7
 800b8c4:	1140022e 	bgeu	r2,r5,800b8d0 <_free_r+0x160>
 800b8c8:	18c00217 	ldw	r3,8(r3)
 800b8cc:	20fffb1e 	bne	r4,r3,800b8bc <__alt_data_end+0xfc00b8bc>
 800b8d0:	19000317 	ldw	r4,12(r3)
 800b8d4:	31000315 	stw	r4,12(r6)
 800b8d8:	30c00215 	stw	r3,8(r6)
 800b8dc:	21800215 	stw	r6,8(r4)
 800b8e0:	19800315 	stw	r6,12(r3)
 800b8e4:	003fde06 	br	800b860 <__alt_data_end+0xfc00b860>
 800b8e8:	29c00217 	ldw	r7,8(r5)
 800b8ec:	10c5883a 	add	r2,r2,r3
 800b8f0:	00c20074 	movhi	r3,2049
 800b8f4:	18d84004 	addi	r3,r3,24832
 800b8f8:	38c03b26 	beq	r7,r3,800b9e8 <_free_r+0x278>
 800b8fc:	2a000317 	ldw	r8,12(r5)
 800b900:	11400054 	ori	r5,r2,1
 800b904:	3087883a 	add	r3,r6,r2
 800b908:	3a000315 	stw	r8,12(r7)
 800b90c:	41c00215 	stw	r7,8(r8)
 800b910:	31400115 	stw	r5,4(r6)
 800b914:	18800015 	stw	r2,0(r3)
 800b918:	003fbd06 	br	800b810 <__alt_data_end+0xfc00b810>
 800b91c:	39c0004c 	andi	r7,r7,1
 800b920:	10c5883a 	add	r2,r2,r3
 800b924:	3800071e 	bne	r7,zero,800b944 <_free_r+0x1d4>
 800b928:	81fffe17 	ldw	r7,-8(r16)
 800b92c:	31cdc83a 	sub	r6,r6,r7
 800b930:	30c00317 	ldw	r3,12(r6)
 800b934:	31400217 	ldw	r5,8(r6)
 800b938:	11c5883a 	add	r2,r2,r7
 800b93c:	28c00315 	stw	r3,12(r5)
 800b940:	19400215 	stw	r5,8(r3)
 800b944:	10c00054 	ori	r3,r2,1
 800b948:	30c00115 	stw	r3,4(r6)
 800b94c:	00c20074 	movhi	r3,2049
 800b950:	18ddf504 	addi	r3,r3,30676
 800b954:	18c00017 	ldw	r3,0(r3)
 800b958:	21800215 	stw	r6,8(r4)
 800b95c:	10ffc036 	bltu	r2,r3,800b860 <__alt_data_end+0xfc00b860>
 800b960:	008200b4 	movhi	r2,2050
 800b964:	10a4f804 	addi	r2,r2,-27680
 800b968:	11400017 	ldw	r5,0(r2)
 800b96c:	8809883a 	mov	r4,r17
 800b970:	800b64c0 	call	800b64c <_malloc_trim_r>
 800b974:	003fba06 	br	800b860 <__alt_data_end+0xfc00b860>
 800b978:	28c9883a 	add	r4,r5,r3
 800b97c:	21000117 	ldw	r4,4(r4)
 800b980:	2100004c 	andi	r4,r4,1
 800b984:	2000391e 	bne	r4,zero,800ba6c <_free_r+0x2fc>
 800b988:	29c00217 	ldw	r7,8(r5)
 800b98c:	29000317 	ldw	r4,12(r5)
 800b990:	1885883a 	add	r2,r3,r2
 800b994:	10c00054 	ori	r3,r2,1
 800b998:	39000315 	stw	r4,12(r7)
 800b99c:	21c00215 	stw	r7,8(r4)
 800b9a0:	30c00115 	stw	r3,4(r6)
 800b9a4:	308d883a 	add	r6,r6,r2
 800b9a8:	30800015 	stw	r2,0(r6)
 800b9ac:	003fac06 	br	800b860 <__alt_data_end+0xfc00b860>
 800b9b0:	00c00504 	movi	r3,20
 800b9b4:	19401536 	bltu	r3,r5,800ba0c <_free_r+0x29c>
 800b9b8:	28c01704 	addi	r3,r5,92
 800b9bc:	18c7883a 	add	r3,r3,r3
 800b9c0:	294016c4 	addi	r5,r5,91
 800b9c4:	003fb406 	br	800b898 <__alt_data_end+0xfc00b898>
 800b9c8:	280bd0ba 	srai	r5,r5,2
 800b9cc:	00c00044 	movi	r3,1
 800b9d0:	38800117 	ldw	r2,4(r7)
 800b9d4:	194a983a 	sll	r5,r3,r5
 800b9d8:	2007883a 	mov	r3,r4
 800b9dc:	2884b03a 	or	r2,r5,r2
 800b9e0:	38800115 	stw	r2,4(r7)
 800b9e4:	003fbb06 	br	800b8d4 <__alt_data_end+0xfc00b8d4>
 800b9e8:	21800515 	stw	r6,20(r4)
 800b9ec:	21800415 	stw	r6,16(r4)
 800b9f0:	10c00054 	ori	r3,r2,1
 800b9f4:	31c00315 	stw	r7,12(r6)
 800b9f8:	31c00215 	stw	r7,8(r6)
 800b9fc:	30c00115 	stw	r3,4(r6)
 800ba00:	308d883a 	add	r6,r6,r2
 800ba04:	30800015 	stw	r2,0(r6)
 800ba08:	003f9506 	br	800b860 <__alt_data_end+0xfc00b860>
 800ba0c:	00c01504 	movi	r3,84
 800ba10:	19400536 	bltu	r3,r5,800ba28 <_free_r+0x2b8>
 800ba14:	100ad33a 	srli	r5,r2,12
 800ba18:	28c01bc4 	addi	r3,r5,111
 800ba1c:	18c7883a 	add	r3,r3,r3
 800ba20:	29401b84 	addi	r5,r5,110
 800ba24:	003f9c06 	br	800b898 <__alt_data_end+0xfc00b898>
 800ba28:	00c05504 	movi	r3,340
 800ba2c:	19400536 	bltu	r3,r5,800ba44 <_free_r+0x2d4>
 800ba30:	100ad3fa 	srli	r5,r2,15
 800ba34:	28c01e04 	addi	r3,r5,120
 800ba38:	18c7883a 	add	r3,r3,r3
 800ba3c:	29401dc4 	addi	r5,r5,119
 800ba40:	003f9506 	br	800b898 <__alt_data_end+0xfc00b898>
 800ba44:	00c15504 	movi	r3,1364
 800ba48:	19400536 	bltu	r3,r5,800ba60 <_free_r+0x2f0>
 800ba4c:	100ad4ba 	srli	r5,r2,18
 800ba50:	28c01f44 	addi	r3,r5,125
 800ba54:	18c7883a 	add	r3,r3,r3
 800ba58:	29401f04 	addi	r5,r5,124
 800ba5c:	003f8e06 	br	800b898 <__alt_data_end+0xfc00b898>
 800ba60:	00c03f84 	movi	r3,254
 800ba64:	01401f84 	movi	r5,126
 800ba68:	003f8b06 	br	800b898 <__alt_data_end+0xfc00b898>
 800ba6c:	10c00054 	ori	r3,r2,1
 800ba70:	30c00115 	stw	r3,4(r6)
 800ba74:	308d883a 	add	r6,r6,r2
 800ba78:	30800015 	stw	r2,0(r6)
 800ba7c:	003f7806 	br	800b860 <__alt_data_end+0xfc00b860>

0800ba80 <__sfvwrite_r>:
 800ba80:	30800217 	ldw	r2,8(r6)
 800ba84:	10006726 	beq	r2,zero,800bc24 <__sfvwrite_r+0x1a4>
 800ba88:	28c0030b 	ldhu	r3,12(r5)
 800ba8c:	defff404 	addi	sp,sp,-48
 800ba90:	dd400715 	stw	r21,28(sp)
 800ba94:	dd000615 	stw	r20,24(sp)
 800ba98:	dc000215 	stw	r16,8(sp)
 800ba9c:	dfc00b15 	stw	ra,44(sp)
 800baa0:	df000a15 	stw	fp,40(sp)
 800baa4:	ddc00915 	stw	r23,36(sp)
 800baa8:	dd800815 	stw	r22,32(sp)
 800baac:	dcc00515 	stw	r19,20(sp)
 800bab0:	dc800415 	stw	r18,16(sp)
 800bab4:	dc400315 	stw	r17,12(sp)
 800bab8:	1880020c 	andi	r2,r3,8
 800babc:	2821883a 	mov	r16,r5
 800bac0:	202b883a 	mov	r21,r4
 800bac4:	3029883a 	mov	r20,r6
 800bac8:	10002726 	beq	r2,zero,800bb68 <__sfvwrite_r+0xe8>
 800bacc:	28800417 	ldw	r2,16(r5)
 800bad0:	10002526 	beq	r2,zero,800bb68 <__sfvwrite_r+0xe8>
 800bad4:	1880008c 	andi	r2,r3,2
 800bad8:	a4400017 	ldw	r17,0(r20)
 800badc:	10002a26 	beq	r2,zero,800bb88 <__sfvwrite_r+0x108>
 800bae0:	05a00034 	movhi	r22,32768
 800bae4:	0027883a 	mov	r19,zero
 800bae8:	0025883a 	mov	r18,zero
 800baec:	b5bf0004 	addi	r22,r22,-1024
 800baf0:	980d883a 	mov	r6,r19
 800baf4:	a809883a 	mov	r4,r21
 800baf8:	90004626 	beq	r18,zero,800bc14 <__sfvwrite_r+0x194>
 800bafc:	900f883a 	mov	r7,r18
 800bb00:	b480022e 	bgeu	r22,r18,800bb0c <__sfvwrite_r+0x8c>
 800bb04:	01e00034 	movhi	r7,32768
 800bb08:	39ff0004 	addi	r7,r7,-1024
 800bb0c:	80800917 	ldw	r2,36(r16)
 800bb10:	81400717 	ldw	r5,28(r16)
 800bb14:	103ee83a 	callr	r2
 800bb18:	0080570e 	bge	zero,r2,800bc78 <__sfvwrite_r+0x1f8>
 800bb1c:	a0c00217 	ldw	r3,8(r20)
 800bb20:	98a7883a 	add	r19,r19,r2
 800bb24:	90a5c83a 	sub	r18,r18,r2
 800bb28:	1885c83a 	sub	r2,r3,r2
 800bb2c:	a0800215 	stw	r2,8(r20)
 800bb30:	103fef1e 	bne	r2,zero,800baf0 <__alt_data_end+0xfc00baf0>
 800bb34:	0005883a 	mov	r2,zero
 800bb38:	dfc00b17 	ldw	ra,44(sp)
 800bb3c:	df000a17 	ldw	fp,40(sp)
 800bb40:	ddc00917 	ldw	r23,36(sp)
 800bb44:	dd800817 	ldw	r22,32(sp)
 800bb48:	dd400717 	ldw	r21,28(sp)
 800bb4c:	dd000617 	ldw	r20,24(sp)
 800bb50:	dcc00517 	ldw	r19,20(sp)
 800bb54:	dc800417 	ldw	r18,16(sp)
 800bb58:	dc400317 	ldw	r17,12(sp)
 800bb5c:	dc000217 	ldw	r16,8(sp)
 800bb60:	dec00c04 	addi	sp,sp,48
 800bb64:	f800283a 	ret
 800bb68:	800b883a 	mov	r5,r16
 800bb6c:	a809883a 	mov	r4,r21
 800bb70:	80096280 	call	8009628 <__swsetup_r>
 800bb74:	1000eb1e 	bne	r2,zero,800bf24 <__sfvwrite_r+0x4a4>
 800bb78:	80c0030b 	ldhu	r3,12(r16)
 800bb7c:	a4400017 	ldw	r17,0(r20)
 800bb80:	1880008c 	andi	r2,r3,2
 800bb84:	103fd61e 	bne	r2,zero,800bae0 <__alt_data_end+0xfc00bae0>
 800bb88:	1880004c 	andi	r2,r3,1
 800bb8c:	10003f1e 	bne	r2,zero,800bc8c <__sfvwrite_r+0x20c>
 800bb90:	0039883a 	mov	fp,zero
 800bb94:	0025883a 	mov	r18,zero
 800bb98:	90001a26 	beq	r18,zero,800bc04 <__sfvwrite_r+0x184>
 800bb9c:	1880800c 	andi	r2,r3,512
 800bba0:	84c00217 	ldw	r19,8(r16)
 800bba4:	10002126 	beq	r2,zero,800bc2c <__sfvwrite_r+0x1ac>
 800bba8:	982f883a 	mov	r23,r19
 800bbac:	94c09336 	bltu	r18,r19,800bdfc <__sfvwrite_r+0x37c>
 800bbb0:	1881200c 	andi	r2,r3,1152
 800bbb4:	10009e1e 	bne	r2,zero,800be30 <__sfvwrite_r+0x3b0>
 800bbb8:	81000017 	ldw	r4,0(r16)
 800bbbc:	b80d883a 	mov	r6,r23
 800bbc0:	e00b883a 	mov	r5,fp
 800bbc4:	800cd940 	call	800cd94 <memmove>
 800bbc8:	80c00217 	ldw	r3,8(r16)
 800bbcc:	81000017 	ldw	r4,0(r16)
 800bbd0:	9005883a 	mov	r2,r18
 800bbd4:	1ce7c83a 	sub	r19,r3,r19
 800bbd8:	25cf883a 	add	r7,r4,r23
 800bbdc:	84c00215 	stw	r19,8(r16)
 800bbe0:	81c00015 	stw	r7,0(r16)
 800bbe4:	a0c00217 	ldw	r3,8(r20)
 800bbe8:	e0b9883a 	add	fp,fp,r2
 800bbec:	90a5c83a 	sub	r18,r18,r2
 800bbf0:	18a7c83a 	sub	r19,r3,r2
 800bbf4:	a4c00215 	stw	r19,8(r20)
 800bbf8:	983fce26 	beq	r19,zero,800bb34 <__alt_data_end+0xfc00bb34>
 800bbfc:	80c0030b 	ldhu	r3,12(r16)
 800bc00:	903fe61e 	bne	r18,zero,800bb9c <__alt_data_end+0xfc00bb9c>
 800bc04:	8f000017 	ldw	fp,0(r17)
 800bc08:	8c800117 	ldw	r18,4(r17)
 800bc0c:	8c400204 	addi	r17,r17,8
 800bc10:	003fe106 	br	800bb98 <__alt_data_end+0xfc00bb98>
 800bc14:	8cc00017 	ldw	r19,0(r17)
 800bc18:	8c800117 	ldw	r18,4(r17)
 800bc1c:	8c400204 	addi	r17,r17,8
 800bc20:	003fb306 	br	800baf0 <__alt_data_end+0xfc00baf0>
 800bc24:	0005883a 	mov	r2,zero
 800bc28:	f800283a 	ret
 800bc2c:	81000017 	ldw	r4,0(r16)
 800bc30:	80800417 	ldw	r2,16(r16)
 800bc34:	11005736 	bltu	r2,r4,800bd94 <__sfvwrite_r+0x314>
 800bc38:	85c00517 	ldw	r23,20(r16)
 800bc3c:	95c05536 	bltu	r18,r23,800bd94 <__sfvwrite_r+0x314>
 800bc40:	00a00034 	movhi	r2,32768
 800bc44:	10bfffc4 	addi	r2,r2,-1
 800bc48:	9009883a 	mov	r4,r18
 800bc4c:	1480012e 	bgeu	r2,r18,800bc54 <__sfvwrite_r+0x1d4>
 800bc50:	1009883a 	mov	r4,r2
 800bc54:	b80b883a 	mov	r5,r23
 800bc58:	80032440 	call	8003244 <__divsi3>
 800bc5c:	15cf383a 	mul	r7,r2,r23
 800bc60:	81400717 	ldw	r5,28(r16)
 800bc64:	80800917 	ldw	r2,36(r16)
 800bc68:	e00d883a 	mov	r6,fp
 800bc6c:	a809883a 	mov	r4,r21
 800bc70:	103ee83a 	callr	r2
 800bc74:	00bfdb16 	blt	zero,r2,800bbe4 <__alt_data_end+0xfc00bbe4>
 800bc78:	8080030b 	ldhu	r2,12(r16)
 800bc7c:	10801014 	ori	r2,r2,64
 800bc80:	8080030d 	sth	r2,12(r16)
 800bc84:	00bfffc4 	movi	r2,-1
 800bc88:	003fab06 	br	800bb38 <__alt_data_end+0xfc00bb38>
 800bc8c:	0027883a 	mov	r19,zero
 800bc90:	0011883a 	mov	r8,zero
 800bc94:	0039883a 	mov	fp,zero
 800bc98:	0025883a 	mov	r18,zero
 800bc9c:	90001f26 	beq	r18,zero,800bd1c <__sfvwrite_r+0x29c>
 800bca0:	40005a26 	beq	r8,zero,800be0c <__sfvwrite_r+0x38c>
 800bca4:	982d883a 	mov	r22,r19
 800bca8:	94c0012e 	bgeu	r18,r19,800bcb0 <__sfvwrite_r+0x230>
 800bcac:	902d883a 	mov	r22,r18
 800bcb0:	81000017 	ldw	r4,0(r16)
 800bcb4:	80800417 	ldw	r2,16(r16)
 800bcb8:	b02f883a 	mov	r23,r22
 800bcbc:	81c00517 	ldw	r7,20(r16)
 800bcc0:	1100032e 	bgeu	r2,r4,800bcd0 <__sfvwrite_r+0x250>
 800bcc4:	80c00217 	ldw	r3,8(r16)
 800bcc8:	38c7883a 	add	r3,r7,r3
 800bccc:	1d801816 	blt	r3,r22,800bd30 <__sfvwrite_r+0x2b0>
 800bcd0:	b1c03e16 	blt	r22,r7,800bdcc <__sfvwrite_r+0x34c>
 800bcd4:	80800917 	ldw	r2,36(r16)
 800bcd8:	81400717 	ldw	r5,28(r16)
 800bcdc:	e00d883a 	mov	r6,fp
 800bce0:	da000115 	stw	r8,4(sp)
 800bce4:	a809883a 	mov	r4,r21
 800bce8:	103ee83a 	callr	r2
 800bcec:	102f883a 	mov	r23,r2
 800bcf0:	da000117 	ldw	r8,4(sp)
 800bcf4:	00bfe00e 	bge	zero,r2,800bc78 <__alt_data_end+0xfc00bc78>
 800bcf8:	9de7c83a 	sub	r19,r19,r23
 800bcfc:	98001f26 	beq	r19,zero,800bd7c <__sfvwrite_r+0x2fc>
 800bd00:	a0800217 	ldw	r2,8(r20)
 800bd04:	e5f9883a 	add	fp,fp,r23
 800bd08:	95e5c83a 	sub	r18,r18,r23
 800bd0c:	15efc83a 	sub	r23,r2,r23
 800bd10:	a5c00215 	stw	r23,8(r20)
 800bd14:	b83f8726 	beq	r23,zero,800bb34 <__alt_data_end+0xfc00bb34>
 800bd18:	903fe11e 	bne	r18,zero,800bca0 <__alt_data_end+0xfc00bca0>
 800bd1c:	8f000017 	ldw	fp,0(r17)
 800bd20:	8c800117 	ldw	r18,4(r17)
 800bd24:	0011883a 	mov	r8,zero
 800bd28:	8c400204 	addi	r17,r17,8
 800bd2c:	003fdb06 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800bd30:	180d883a 	mov	r6,r3
 800bd34:	e00b883a 	mov	r5,fp
 800bd38:	da000115 	stw	r8,4(sp)
 800bd3c:	d8c00015 	stw	r3,0(sp)
 800bd40:	800cd940 	call	800cd94 <memmove>
 800bd44:	d8c00017 	ldw	r3,0(sp)
 800bd48:	80800017 	ldw	r2,0(r16)
 800bd4c:	800b883a 	mov	r5,r16
 800bd50:	a809883a 	mov	r4,r21
 800bd54:	10c5883a 	add	r2,r2,r3
 800bd58:	80800015 	stw	r2,0(r16)
 800bd5c:	d8c00015 	stw	r3,0(sp)
 800bd60:	800b2200 	call	800b220 <_fflush_r>
 800bd64:	d8c00017 	ldw	r3,0(sp)
 800bd68:	da000117 	ldw	r8,4(sp)
 800bd6c:	103fc21e 	bne	r2,zero,800bc78 <__alt_data_end+0xfc00bc78>
 800bd70:	182f883a 	mov	r23,r3
 800bd74:	9de7c83a 	sub	r19,r19,r23
 800bd78:	983fe11e 	bne	r19,zero,800bd00 <__alt_data_end+0xfc00bd00>
 800bd7c:	800b883a 	mov	r5,r16
 800bd80:	a809883a 	mov	r4,r21
 800bd84:	800b2200 	call	800b220 <_fflush_r>
 800bd88:	103fbb1e 	bne	r2,zero,800bc78 <__alt_data_end+0xfc00bc78>
 800bd8c:	0011883a 	mov	r8,zero
 800bd90:	003fdb06 	br	800bd00 <__alt_data_end+0xfc00bd00>
 800bd94:	94c0012e 	bgeu	r18,r19,800bd9c <__sfvwrite_r+0x31c>
 800bd98:	9027883a 	mov	r19,r18
 800bd9c:	980d883a 	mov	r6,r19
 800bda0:	e00b883a 	mov	r5,fp
 800bda4:	800cd940 	call	800cd94 <memmove>
 800bda8:	80800217 	ldw	r2,8(r16)
 800bdac:	80c00017 	ldw	r3,0(r16)
 800bdb0:	14c5c83a 	sub	r2,r2,r19
 800bdb4:	1cc7883a 	add	r3,r3,r19
 800bdb8:	80800215 	stw	r2,8(r16)
 800bdbc:	80c00015 	stw	r3,0(r16)
 800bdc0:	10004326 	beq	r2,zero,800bed0 <__sfvwrite_r+0x450>
 800bdc4:	9805883a 	mov	r2,r19
 800bdc8:	003f8606 	br	800bbe4 <__alt_data_end+0xfc00bbe4>
 800bdcc:	b00d883a 	mov	r6,r22
 800bdd0:	e00b883a 	mov	r5,fp
 800bdd4:	da000115 	stw	r8,4(sp)
 800bdd8:	800cd940 	call	800cd94 <memmove>
 800bddc:	80800217 	ldw	r2,8(r16)
 800bde0:	80c00017 	ldw	r3,0(r16)
 800bde4:	da000117 	ldw	r8,4(sp)
 800bde8:	1585c83a 	sub	r2,r2,r22
 800bdec:	1dad883a 	add	r22,r3,r22
 800bdf0:	80800215 	stw	r2,8(r16)
 800bdf4:	85800015 	stw	r22,0(r16)
 800bdf8:	003fbf06 	br	800bcf8 <__alt_data_end+0xfc00bcf8>
 800bdfc:	81000017 	ldw	r4,0(r16)
 800be00:	9027883a 	mov	r19,r18
 800be04:	902f883a 	mov	r23,r18
 800be08:	003f6c06 	br	800bbbc <__alt_data_end+0xfc00bbbc>
 800be0c:	900d883a 	mov	r6,r18
 800be10:	01400284 	movi	r5,10
 800be14:	e009883a 	mov	r4,fp
 800be18:	800cb680 	call	800cb68 <memchr>
 800be1c:	10003e26 	beq	r2,zero,800bf18 <__sfvwrite_r+0x498>
 800be20:	10800044 	addi	r2,r2,1
 800be24:	1727c83a 	sub	r19,r2,fp
 800be28:	02000044 	movi	r8,1
 800be2c:	003f9d06 	br	800bca4 <__alt_data_end+0xfc00bca4>
 800be30:	80800517 	ldw	r2,20(r16)
 800be34:	81400417 	ldw	r5,16(r16)
 800be38:	81c00017 	ldw	r7,0(r16)
 800be3c:	10a7883a 	add	r19,r2,r2
 800be40:	9885883a 	add	r2,r19,r2
 800be44:	1026d7fa 	srli	r19,r2,31
 800be48:	396dc83a 	sub	r22,r7,r5
 800be4c:	b1000044 	addi	r4,r22,1
 800be50:	9885883a 	add	r2,r19,r2
 800be54:	1027d07a 	srai	r19,r2,1
 800be58:	2485883a 	add	r2,r4,r18
 800be5c:	980d883a 	mov	r6,r19
 800be60:	9880022e 	bgeu	r19,r2,800be6c <__sfvwrite_r+0x3ec>
 800be64:	1027883a 	mov	r19,r2
 800be68:	100d883a 	mov	r6,r2
 800be6c:	18c1000c 	andi	r3,r3,1024
 800be70:	18001c26 	beq	r3,zero,800bee4 <__sfvwrite_r+0x464>
 800be74:	300b883a 	mov	r5,r6
 800be78:	a809883a 	mov	r4,r21
 800be7c:	800c35c0 	call	800c35c <_malloc_r>
 800be80:	102f883a 	mov	r23,r2
 800be84:	10002926 	beq	r2,zero,800bf2c <__sfvwrite_r+0x4ac>
 800be88:	81400417 	ldw	r5,16(r16)
 800be8c:	b00d883a 	mov	r6,r22
 800be90:	1009883a 	mov	r4,r2
 800be94:	800cc4c0 	call	800cc4c <memcpy>
 800be98:	8080030b 	ldhu	r2,12(r16)
 800be9c:	00fedfc4 	movi	r3,-1153
 800bea0:	10c4703a 	and	r2,r2,r3
 800bea4:	10802014 	ori	r2,r2,128
 800bea8:	8080030d 	sth	r2,12(r16)
 800beac:	bd89883a 	add	r4,r23,r22
 800beb0:	9d8fc83a 	sub	r7,r19,r22
 800beb4:	85c00415 	stw	r23,16(r16)
 800beb8:	84c00515 	stw	r19,20(r16)
 800bebc:	81000015 	stw	r4,0(r16)
 800bec0:	9027883a 	mov	r19,r18
 800bec4:	81c00215 	stw	r7,8(r16)
 800bec8:	902f883a 	mov	r23,r18
 800becc:	003f3b06 	br	800bbbc <__alt_data_end+0xfc00bbbc>
 800bed0:	800b883a 	mov	r5,r16
 800bed4:	a809883a 	mov	r4,r21
 800bed8:	800b2200 	call	800b220 <_fflush_r>
 800bedc:	103fb926 	beq	r2,zero,800bdc4 <__alt_data_end+0xfc00bdc4>
 800bee0:	003f6506 	br	800bc78 <__alt_data_end+0xfc00bc78>
 800bee4:	a809883a 	mov	r4,r21
 800bee8:	800e0140 	call	800e014 <_realloc_r>
 800beec:	102f883a 	mov	r23,r2
 800bef0:	103fee1e 	bne	r2,zero,800beac <__alt_data_end+0xfc00beac>
 800bef4:	81400417 	ldw	r5,16(r16)
 800bef8:	a809883a 	mov	r4,r21
 800befc:	800b7700 	call	800b770 <_free_r>
 800bf00:	8080030b 	ldhu	r2,12(r16)
 800bf04:	00ffdfc4 	movi	r3,-129
 800bf08:	1884703a 	and	r2,r3,r2
 800bf0c:	00c00304 	movi	r3,12
 800bf10:	a8c00015 	stw	r3,0(r21)
 800bf14:	003f5906 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800bf18:	94c00044 	addi	r19,r18,1
 800bf1c:	02000044 	movi	r8,1
 800bf20:	003f6006 	br	800bca4 <__alt_data_end+0xfc00bca4>
 800bf24:	00bfffc4 	movi	r2,-1
 800bf28:	003f0306 	br	800bb38 <__alt_data_end+0xfc00bb38>
 800bf2c:	00800304 	movi	r2,12
 800bf30:	a8800015 	stw	r2,0(r21)
 800bf34:	8080030b 	ldhu	r2,12(r16)
 800bf38:	003f5006 	br	800bc7c <__alt_data_end+0xfc00bc7c>

0800bf3c <_fwalk>:
 800bf3c:	defff704 	addi	sp,sp,-36
 800bf40:	dd000415 	stw	r20,16(sp)
 800bf44:	dfc00815 	stw	ra,32(sp)
 800bf48:	ddc00715 	stw	r23,28(sp)
 800bf4c:	dd800615 	stw	r22,24(sp)
 800bf50:	dd400515 	stw	r21,20(sp)
 800bf54:	dcc00315 	stw	r19,12(sp)
 800bf58:	dc800215 	stw	r18,8(sp)
 800bf5c:	dc400115 	stw	r17,4(sp)
 800bf60:	dc000015 	stw	r16,0(sp)
 800bf64:	2500b804 	addi	r20,r4,736
 800bf68:	a0002326 	beq	r20,zero,800bff8 <_fwalk+0xbc>
 800bf6c:	282b883a 	mov	r21,r5
 800bf70:	002f883a 	mov	r23,zero
 800bf74:	05800044 	movi	r22,1
 800bf78:	04ffffc4 	movi	r19,-1
 800bf7c:	a4400117 	ldw	r17,4(r20)
 800bf80:	a4800217 	ldw	r18,8(r20)
 800bf84:	8c7fffc4 	addi	r17,r17,-1
 800bf88:	88000d16 	blt	r17,zero,800bfc0 <_fwalk+0x84>
 800bf8c:	94000304 	addi	r16,r18,12
 800bf90:	94800384 	addi	r18,r18,14
 800bf94:	8080000b 	ldhu	r2,0(r16)
 800bf98:	8c7fffc4 	addi	r17,r17,-1
 800bf9c:	813ffd04 	addi	r4,r16,-12
 800bfa0:	b080042e 	bgeu	r22,r2,800bfb4 <_fwalk+0x78>
 800bfa4:	9080000f 	ldh	r2,0(r18)
 800bfa8:	14c00226 	beq	r2,r19,800bfb4 <_fwalk+0x78>
 800bfac:	a83ee83a 	callr	r21
 800bfb0:	b8aeb03a 	or	r23,r23,r2
 800bfb4:	84001a04 	addi	r16,r16,104
 800bfb8:	94801a04 	addi	r18,r18,104
 800bfbc:	8cfff51e 	bne	r17,r19,800bf94 <__alt_data_end+0xfc00bf94>
 800bfc0:	a5000017 	ldw	r20,0(r20)
 800bfc4:	a03fed1e 	bne	r20,zero,800bf7c <__alt_data_end+0xfc00bf7c>
 800bfc8:	b805883a 	mov	r2,r23
 800bfcc:	dfc00817 	ldw	ra,32(sp)
 800bfd0:	ddc00717 	ldw	r23,28(sp)
 800bfd4:	dd800617 	ldw	r22,24(sp)
 800bfd8:	dd400517 	ldw	r21,20(sp)
 800bfdc:	dd000417 	ldw	r20,16(sp)
 800bfe0:	dcc00317 	ldw	r19,12(sp)
 800bfe4:	dc800217 	ldw	r18,8(sp)
 800bfe8:	dc400117 	ldw	r17,4(sp)
 800bfec:	dc000017 	ldw	r16,0(sp)
 800bff0:	dec00904 	addi	sp,sp,36
 800bff4:	f800283a 	ret
 800bff8:	002f883a 	mov	r23,zero
 800bffc:	003ff206 	br	800bfc8 <__alt_data_end+0xfc00bfc8>

0800c000 <_fwalk_reent>:
 800c000:	defff704 	addi	sp,sp,-36
 800c004:	dd000415 	stw	r20,16(sp)
 800c008:	dfc00815 	stw	ra,32(sp)
 800c00c:	ddc00715 	stw	r23,28(sp)
 800c010:	dd800615 	stw	r22,24(sp)
 800c014:	dd400515 	stw	r21,20(sp)
 800c018:	dcc00315 	stw	r19,12(sp)
 800c01c:	dc800215 	stw	r18,8(sp)
 800c020:	dc400115 	stw	r17,4(sp)
 800c024:	dc000015 	stw	r16,0(sp)
 800c028:	2500b804 	addi	r20,r4,736
 800c02c:	a0002326 	beq	r20,zero,800c0bc <_fwalk_reent+0xbc>
 800c030:	282b883a 	mov	r21,r5
 800c034:	2027883a 	mov	r19,r4
 800c038:	002f883a 	mov	r23,zero
 800c03c:	05800044 	movi	r22,1
 800c040:	04bfffc4 	movi	r18,-1
 800c044:	a4400117 	ldw	r17,4(r20)
 800c048:	a4000217 	ldw	r16,8(r20)
 800c04c:	8c7fffc4 	addi	r17,r17,-1
 800c050:	88000c16 	blt	r17,zero,800c084 <_fwalk_reent+0x84>
 800c054:	84000304 	addi	r16,r16,12
 800c058:	8080000b 	ldhu	r2,0(r16)
 800c05c:	8c7fffc4 	addi	r17,r17,-1
 800c060:	817ffd04 	addi	r5,r16,-12
 800c064:	b080052e 	bgeu	r22,r2,800c07c <_fwalk_reent+0x7c>
 800c068:	8080008f 	ldh	r2,2(r16)
 800c06c:	9809883a 	mov	r4,r19
 800c070:	14800226 	beq	r2,r18,800c07c <_fwalk_reent+0x7c>
 800c074:	a83ee83a 	callr	r21
 800c078:	b8aeb03a 	or	r23,r23,r2
 800c07c:	84001a04 	addi	r16,r16,104
 800c080:	8cbff51e 	bne	r17,r18,800c058 <__alt_data_end+0xfc00c058>
 800c084:	a5000017 	ldw	r20,0(r20)
 800c088:	a03fee1e 	bne	r20,zero,800c044 <__alt_data_end+0xfc00c044>
 800c08c:	b805883a 	mov	r2,r23
 800c090:	dfc00817 	ldw	ra,32(sp)
 800c094:	ddc00717 	ldw	r23,28(sp)
 800c098:	dd800617 	ldw	r22,24(sp)
 800c09c:	dd400517 	ldw	r21,20(sp)
 800c0a0:	dd000417 	ldw	r20,16(sp)
 800c0a4:	dcc00317 	ldw	r19,12(sp)
 800c0a8:	dc800217 	ldw	r18,8(sp)
 800c0ac:	dc400117 	ldw	r17,4(sp)
 800c0b0:	dc000017 	ldw	r16,0(sp)
 800c0b4:	dec00904 	addi	sp,sp,36
 800c0b8:	f800283a 	ret
 800c0bc:	002f883a 	mov	r23,zero
 800c0c0:	003ff206 	br	800c08c <__alt_data_end+0xfc00c08c>

0800c0c4 <_setlocale_r>:
 800c0c4:	30001b26 	beq	r6,zero,800c134 <_setlocale_r+0x70>
 800c0c8:	01420074 	movhi	r5,2049
 800c0cc:	defffe04 	addi	sp,sp,-8
 800c0d0:	29569f04 	addi	r5,r5,23164
 800c0d4:	3009883a 	mov	r4,r6
 800c0d8:	dc000015 	stw	r16,0(sp)
 800c0dc:	dfc00115 	stw	ra,4(sp)
 800c0e0:	3021883a 	mov	r16,r6
 800c0e4:	800e7080 	call	800e708 <strcmp>
 800c0e8:	1000061e 	bne	r2,zero,800c104 <_setlocale_r+0x40>
 800c0ec:	00820074 	movhi	r2,2049
 800c0f0:	10968004 	addi	r2,r2,23040
 800c0f4:	dfc00117 	ldw	ra,4(sp)
 800c0f8:	dc000017 	ldw	r16,0(sp)
 800c0fc:	dec00204 	addi	sp,sp,8
 800c100:	f800283a 	ret
 800c104:	01420074 	movhi	r5,2049
 800c108:	29568004 	addi	r5,r5,23040
 800c10c:	8009883a 	mov	r4,r16
 800c110:	800e7080 	call	800e708 <strcmp>
 800c114:	103ff526 	beq	r2,zero,800c0ec <__alt_data_end+0xfc00c0ec>
 800c118:	01420074 	movhi	r5,2049
 800c11c:	29568a04 	addi	r5,r5,23080
 800c120:	8009883a 	mov	r4,r16
 800c124:	800e7080 	call	800e708 <strcmp>
 800c128:	103ff026 	beq	r2,zero,800c0ec <__alt_data_end+0xfc00c0ec>
 800c12c:	0005883a 	mov	r2,zero
 800c130:	003ff006 	br	800c0f4 <__alt_data_end+0xfc00c0f4>
 800c134:	00820074 	movhi	r2,2049
 800c138:	10968004 	addi	r2,r2,23040
 800c13c:	f800283a 	ret

0800c140 <__locale_charset>:
 800c140:	00820074 	movhi	r2,2049
 800c144:	10982804 	addi	r2,r2,24736
 800c148:	f800283a 	ret

0800c14c <__locale_mb_cur_max>:
 800c14c:	00820074 	movhi	r2,2049
 800c150:	109df304 	addi	r2,r2,30668
 800c154:	10800017 	ldw	r2,0(r2)
 800c158:	f800283a 	ret

0800c15c <__locale_msgcharset>:
 800c15c:	00820074 	movhi	r2,2049
 800c160:	10982004 	addi	r2,r2,24704
 800c164:	f800283a 	ret

0800c168 <__locale_cjk_lang>:
 800c168:	0005883a 	mov	r2,zero
 800c16c:	f800283a 	ret

0800c170 <_localeconv_r>:
 800c170:	00820074 	movhi	r2,2049
 800c174:	10983004 	addi	r2,r2,24768
 800c178:	f800283a 	ret

0800c17c <setlocale>:
 800c17c:	00820074 	movhi	r2,2049
 800c180:	109df204 	addi	r2,r2,30664
 800c184:	280d883a 	mov	r6,r5
 800c188:	200b883a 	mov	r5,r4
 800c18c:	11000017 	ldw	r4,0(r2)
 800c190:	800c0c41 	jmpi	800c0c4 <_setlocale_r>

0800c194 <localeconv>:
 800c194:	00820074 	movhi	r2,2049
 800c198:	10983004 	addi	r2,r2,24768
 800c19c:	f800283a 	ret

0800c1a0 <__smakebuf_r>:
 800c1a0:	2880030b 	ldhu	r2,12(r5)
 800c1a4:	10c0008c 	andi	r3,r2,2
 800c1a8:	1800411e 	bne	r3,zero,800c2b0 <__smakebuf_r+0x110>
 800c1ac:	deffec04 	addi	sp,sp,-80
 800c1b0:	dc000f15 	stw	r16,60(sp)
 800c1b4:	2821883a 	mov	r16,r5
 800c1b8:	2940038f 	ldh	r5,14(r5)
 800c1bc:	dc401015 	stw	r17,64(sp)
 800c1c0:	dfc01315 	stw	ra,76(sp)
 800c1c4:	dcc01215 	stw	r19,72(sp)
 800c1c8:	dc801115 	stw	r18,68(sp)
 800c1cc:	2023883a 	mov	r17,r4
 800c1d0:	28001c16 	blt	r5,zero,800c244 <__smakebuf_r+0xa4>
 800c1d4:	d80d883a 	mov	r6,sp
 800c1d8:	80102b00 	call	80102b0 <_fstat_r>
 800c1dc:	10001816 	blt	r2,zero,800c240 <__smakebuf_r+0xa0>
 800c1e0:	d8800117 	ldw	r2,4(sp)
 800c1e4:	00e00014 	movui	r3,32768
 800c1e8:	10bc000c 	andi	r2,r2,61440
 800c1ec:	14c80020 	cmpeqi	r19,r2,8192
 800c1f0:	10c03726 	beq	r2,r3,800c2d0 <__smakebuf_r+0x130>
 800c1f4:	80c0030b 	ldhu	r3,12(r16)
 800c1f8:	18c20014 	ori	r3,r3,2048
 800c1fc:	80c0030d 	sth	r3,12(r16)
 800c200:	00c80004 	movi	r3,8192
 800c204:	10c0521e 	bne	r2,r3,800c350 <__smakebuf_r+0x1b0>
 800c208:	8140038f 	ldh	r5,14(r16)
 800c20c:	8809883a 	mov	r4,r17
 800c210:	801030c0 	call	801030c <_isatty_r>
 800c214:	10004c26 	beq	r2,zero,800c348 <__smakebuf_r+0x1a8>
 800c218:	8080030b 	ldhu	r2,12(r16)
 800c21c:	80c010c4 	addi	r3,r16,67
 800c220:	80c00015 	stw	r3,0(r16)
 800c224:	10800054 	ori	r2,r2,1
 800c228:	8080030d 	sth	r2,12(r16)
 800c22c:	00800044 	movi	r2,1
 800c230:	80c00415 	stw	r3,16(r16)
 800c234:	80800515 	stw	r2,20(r16)
 800c238:	04810004 	movi	r18,1024
 800c23c:	00000706 	br	800c25c <__smakebuf_r+0xbc>
 800c240:	8080030b 	ldhu	r2,12(r16)
 800c244:	10c0200c 	andi	r3,r2,128
 800c248:	18001f1e 	bne	r3,zero,800c2c8 <__smakebuf_r+0x128>
 800c24c:	04810004 	movi	r18,1024
 800c250:	10820014 	ori	r2,r2,2048
 800c254:	8080030d 	sth	r2,12(r16)
 800c258:	0027883a 	mov	r19,zero
 800c25c:	900b883a 	mov	r5,r18
 800c260:	8809883a 	mov	r4,r17
 800c264:	800c35c0 	call	800c35c <_malloc_r>
 800c268:	10002c26 	beq	r2,zero,800c31c <__smakebuf_r+0x17c>
 800c26c:	80c0030b 	ldhu	r3,12(r16)
 800c270:	01020074 	movhi	r4,2049
 800c274:	212cad04 	addi	r4,r4,-19788
 800c278:	89000f15 	stw	r4,60(r17)
 800c27c:	18c02014 	ori	r3,r3,128
 800c280:	80c0030d 	sth	r3,12(r16)
 800c284:	80800015 	stw	r2,0(r16)
 800c288:	80800415 	stw	r2,16(r16)
 800c28c:	84800515 	stw	r18,20(r16)
 800c290:	98001a1e 	bne	r19,zero,800c2fc <__smakebuf_r+0x15c>
 800c294:	dfc01317 	ldw	ra,76(sp)
 800c298:	dcc01217 	ldw	r19,72(sp)
 800c29c:	dc801117 	ldw	r18,68(sp)
 800c2a0:	dc401017 	ldw	r17,64(sp)
 800c2a4:	dc000f17 	ldw	r16,60(sp)
 800c2a8:	dec01404 	addi	sp,sp,80
 800c2ac:	f800283a 	ret
 800c2b0:	288010c4 	addi	r2,r5,67
 800c2b4:	28800015 	stw	r2,0(r5)
 800c2b8:	28800415 	stw	r2,16(r5)
 800c2bc:	00800044 	movi	r2,1
 800c2c0:	28800515 	stw	r2,20(r5)
 800c2c4:	f800283a 	ret
 800c2c8:	04801004 	movi	r18,64
 800c2cc:	003fe006 	br	800c250 <__alt_data_end+0xfc00c250>
 800c2d0:	81000a17 	ldw	r4,40(r16)
 800c2d4:	00c20074 	movhi	r3,2049
 800c2d8:	18f9a904 	addi	r3,r3,-6492
 800c2dc:	20ffc51e 	bne	r4,r3,800c1f4 <__alt_data_end+0xfc00c1f4>
 800c2e0:	8080030b 	ldhu	r2,12(r16)
 800c2e4:	04810004 	movi	r18,1024
 800c2e8:	84801315 	stw	r18,76(r16)
 800c2ec:	1484b03a 	or	r2,r2,r18
 800c2f0:	8080030d 	sth	r2,12(r16)
 800c2f4:	0027883a 	mov	r19,zero
 800c2f8:	003fd806 	br	800c25c <__alt_data_end+0xfc00c25c>
 800c2fc:	8140038f 	ldh	r5,14(r16)
 800c300:	8809883a 	mov	r4,r17
 800c304:	801030c0 	call	801030c <_isatty_r>
 800c308:	103fe226 	beq	r2,zero,800c294 <__alt_data_end+0xfc00c294>
 800c30c:	8080030b 	ldhu	r2,12(r16)
 800c310:	10800054 	ori	r2,r2,1
 800c314:	8080030d 	sth	r2,12(r16)
 800c318:	003fde06 	br	800c294 <__alt_data_end+0xfc00c294>
 800c31c:	8080030b 	ldhu	r2,12(r16)
 800c320:	10c0800c 	andi	r3,r2,512
 800c324:	183fdb1e 	bne	r3,zero,800c294 <__alt_data_end+0xfc00c294>
 800c328:	10800094 	ori	r2,r2,2
 800c32c:	80c010c4 	addi	r3,r16,67
 800c330:	8080030d 	sth	r2,12(r16)
 800c334:	00800044 	movi	r2,1
 800c338:	80c00015 	stw	r3,0(r16)
 800c33c:	80c00415 	stw	r3,16(r16)
 800c340:	80800515 	stw	r2,20(r16)
 800c344:	003fd306 	br	800c294 <__alt_data_end+0xfc00c294>
 800c348:	04810004 	movi	r18,1024
 800c34c:	003fc306 	br	800c25c <__alt_data_end+0xfc00c25c>
 800c350:	0027883a 	mov	r19,zero
 800c354:	04810004 	movi	r18,1024
 800c358:	003fc006 	br	800c25c <__alt_data_end+0xfc00c25c>

0800c35c <_malloc_r>:
 800c35c:	defff504 	addi	sp,sp,-44
 800c360:	dc800315 	stw	r18,12(sp)
 800c364:	dfc00a15 	stw	ra,40(sp)
 800c368:	df000915 	stw	fp,36(sp)
 800c36c:	ddc00815 	stw	r23,32(sp)
 800c370:	dd800715 	stw	r22,28(sp)
 800c374:	dd400615 	stw	r21,24(sp)
 800c378:	dd000515 	stw	r20,20(sp)
 800c37c:	dcc00415 	stw	r19,16(sp)
 800c380:	dc400215 	stw	r17,8(sp)
 800c384:	dc000115 	stw	r16,4(sp)
 800c388:	288002c4 	addi	r2,r5,11
 800c38c:	00c00584 	movi	r3,22
 800c390:	2025883a 	mov	r18,r4
 800c394:	18807f2e 	bgeu	r3,r2,800c594 <_malloc_r+0x238>
 800c398:	047ffe04 	movi	r17,-8
 800c39c:	1462703a 	and	r17,r2,r17
 800c3a0:	8800a316 	blt	r17,zero,800c630 <_malloc_r+0x2d4>
 800c3a4:	8940a236 	bltu	r17,r5,800c630 <_malloc_r+0x2d4>
 800c3a8:	80118340 	call	8011834 <__malloc_lock>
 800c3ac:	00807dc4 	movi	r2,503
 800c3b0:	1441e92e 	bgeu	r2,r17,800cb58 <_malloc_r+0x7fc>
 800c3b4:	8804d27a 	srli	r2,r17,9
 800c3b8:	1000a126 	beq	r2,zero,800c640 <_malloc_r+0x2e4>
 800c3bc:	00c00104 	movi	r3,4
 800c3c0:	18811e36 	bltu	r3,r2,800c83c <_malloc_r+0x4e0>
 800c3c4:	8804d1ba 	srli	r2,r17,6
 800c3c8:	12000e44 	addi	r8,r2,57
 800c3cc:	11c00e04 	addi	r7,r2,56
 800c3d0:	4209883a 	add	r4,r8,r8
 800c3d4:	04c20074 	movhi	r19,2049
 800c3d8:	2109883a 	add	r4,r4,r4
 800c3dc:	9cd83e04 	addi	r19,r19,24824
 800c3e0:	2109883a 	add	r4,r4,r4
 800c3e4:	9909883a 	add	r4,r19,r4
 800c3e8:	24000117 	ldw	r16,4(r4)
 800c3ec:	213ffe04 	addi	r4,r4,-8
 800c3f0:	24009726 	beq	r4,r16,800c650 <_malloc_r+0x2f4>
 800c3f4:	80800117 	ldw	r2,4(r16)
 800c3f8:	01bfff04 	movi	r6,-4
 800c3fc:	014003c4 	movi	r5,15
 800c400:	1184703a 	and	r2,r2,r6
 800c404:	1447c83a 	sub	r3,r2,r17
 800c408:	28c00716 	blt	r5,r3,800c428 <_malloc_r+0xcc>
 800c40c:	1800920e 	bge	r3,zero,800c658 <_malloc_r+0x2fc>
 800c410:	84000317 	ldw	r16,12(r16)
 800c414:	24008e26 	beq	r4,r16,800c650 <_malloc_r+0x2f4>
 800c418:	80800117 	ldw	r2,4(r16)
 800c41c:	1184703a 	and	r2,r2,r6
 800c420:	1447c83a 	sub	r3,r2,r17
 800c424:	28fff90e 	bge	r5,r3,800c40c <__alt_data_end+0xfc00c40c>
 800c428:	3809883a 	mov	r4,r7
 800c42c:	01820074 	movhi	r6,2049
 800c430:	9c000417 	ldw	r16,16(r19)
 800c434:	31983e04 	addi	r6,r6,24824
 800c438:	32000204 	addi	r8,r6,8
 800c43c:	82013426 	beq	r16,r8,800c910 <_malloc_r+0x5b4>
 800c440:	80c00117 	ldw	r3,4(r16)
 800c444:	00bfff04 	movi	r2,-4
 800c448:	188e703a 	and	r7,r3,r2
 800c44c:	3c45c83a 	sub	r2,r7,r17
 800c450:	00c003c4 	movi	r3,15
 800c454:	18811f16 	blt	r3,r2,800c8d4 <_malloc_r+0x578>
 800c458:	32000515 	stw	r8,20(r6)
 800c45c:	32000415 	stw	r8,16(r6)
 800c460:	10007f0e 	bge	r2,zero,800c660 <_malloc_r+0x304>
 800c464:	00807fc4 	movi	r2,511
 800c468:	11c0fd36 	bltu	r2,r7,800c860 <_malloc_r+0x504>
 800c46c:	3806d0fa 	srli	r3,r7,3
 800c470:	01c00044 	movi	r7,1
 800c474:	30800117 	ldw	r2,4(r6)
 800c478:	19400044 	addi	r5,r3,1
 800c47c:	294b883a 	add	r5,r5,r5
 800c480:	1807d0ba 	srai	r3,r3,2
 800c484:	294b883a 	add	r5,r5,r5
 800c488:	294b883a 	add	r5,r5,r5
 800c48c:	298b883a 	add	r5,r5,r6
 800c490:	38c6983a 	sll	r3,r7,r3
 800c494:	29c00017 	ldw	r7,0(r5)
 800c498:	2a7ffe04 	addi	r9,r5,-8
 800c49c:	1886b03a 	or	r3,r3,r2
 800c4a0:	82400315 	stw	r9,12(r16)
 800c4a4:	81c00215 	stw	r7,8(r16)
 800c4a8:	30c00115 	stw	r3,4(r6)
 800c4ac:	2c000015 	stw	r16,0(r5)
 800c4b0:	3c000315 	stw	r16,12(r7)
 800c4b4:	2005d0ba 	srai	r2,r4,2
 800c4b8:	01400044 	movi	r5,1
 800c4bc:	288a983a 	sll	r5,r5,r2
 800c4c0:	19406f36 	bltu	r3,r5,800c680 <_malloc_r+0x324>
 800c4c4:	28c4703a 	and	r2,r5,r3
 800c4c8:	10000a1e 	bne	r2,zero,800c4f4 <_malloc_r+0x198>
 800c4cc:	00bfff04 	movi	r2,-4
 800c4d0:	294b883a 	add	r5,r5,r5
 800c4d4:	2088703a 	and	r4,r4,r2
 800c4d8:	28c4703a 	and	r2,r5,r3
 800c4dc:	21000104 	addi	r4,r4,4
 800c4e0:	1000041e 	bne	r2,zero,800c4f4 <_malloc_r+0x198>
 800c4e4:	294b883a 	add	r5,r5,r5
 800c4e8:	28c4703a 	and	r2,r5,r3
 800c4ec:	21000104 	addi	r4,r4,4
 800c4f0:	103ffc26 	beq	r2,zero,800c4e4 <__alt_data_end+0xfc00c4e4>
 800c4f4:	02bfff04 	movi	r10,-4
 800c4f8:	024003c4 	movi	r9,15
 800c4fc:	21800044 	addi	r6,r4,1
 800c500:	318d883a 	add	r6,r6,r6
 800c504:	318d883a 	add	r6,r6,r6
 800c508:	318d883a 	add	r6,r6,r6
 800c50c:	998d883a 	add	r6,r19,r6
 800c510:	333ffe04 	addi	r12,r6,-8
 800c514:	2017883a 	mov	r11,r4
 800c518:	31800104 	addi	r6,r6,4
 800c51c:	34000017 	ldw	r16,0(r6)
 800c520:	31fffd04 	addi	r7,r6,-12
 800c524:	81c0041e 	bne	r16,r7,800c538 <_malloc_r+0x1dc>
 800c528:	0000fb06 	br	800c918 <_malloc_r+0x5bc>
 800c52c:	1801030e 	bge	r3,zero,800c93c <_malloc_r+0x5e0>
 800c530:	84000317 	ldw	r16,12(r16)
 800c534:	81c0f826 	beq	r16,r7,800c918 <_malloc_r+0x5bc>
 800c538:	80800117 	ldw	r2,4(r16)
 800c53c:	1284703a 	and	r2,r2,r10
 800c540:	1447c83a 	sub	r3,r2,r17
 800c544:	48fff90e 	bge	r9,r3,800c52c <__alt_data_end+0xfc00c52c>
 800c548:	80800317 	ldw	r2,12(r16)
 800c54c:	81000217 	ldw	r4,8(r16)
 800c550:	89400054 	ori	r5,r17,1
 800c554:	81400115 	stw	r5,4(r16)
 800c558:	20800315 	stw	r2,12(r4)
 800c55c:	11000215 	stw	r4,8(r2)
 800c560:	8463883a 	add	r17,r16,r17
 800c564:	9c400515 	stw	r17,20(r19)
 800c568:	9c400415 	stw	r17,16(r19)
 800c56c:	18800054 	ori	r2,r3,1
 800c570:	88800115 	stw	r2,4(r17)
 800c574:	8a000315 	stw	r8,12(r17)
 800c578:	8a000215 	stw	r8,8(r17)
 800c57c:	88e3883a 	add	r17,r17,r3
 800c580:	88c00015 	stw	r3,0(r17)
 800c584:	9009883a 	mov	r4,r18
 800c588:	80118580 	call	8011858 <__malloc_unlock>
 800c58c:	80800204 	addi	r2,r16,8
 800c590:	00001b06 	br	800c600 <_malloc_r+0x2a4>
 800c594:	04400404 	movi	r17,16
 800c598:	89402536 	bltu	r17,r5,800c630 <_malloc_r+0x2d4>
 800c59c:	80118340 	call	8011834 <__malloc_lock>
 800c5a0:	00800184 	movi	r2,6
 800c5a4:	01000084 	movi	r4,2
 800c5a8:	04c20074 	movhi	r19,2049
 800c5ac:	1085883a 	add	r2,r2,r2
 800c5b0:	9cd83e04 	addi	r19,r19,24824
 800c5b4:	1085883a 	add	r2,r2,r2
 800c5b8:	9885883a 	add	r2,r19,r2
 800c5bc:	14000117 	ldw	r16,4(r2)
 800c5c0:	10fffe04 	addi	r3,r2,-8
 800c5c4:	80c0d926 	beq	r16,r3,800c92c <_malloc_r+0x5d0>
 800c5c8:	80c00117 	ldw	r3,4(r16)
 800c5cc:	81000317 	ldw	r4,12(r16)
 800c5d0:	00bfff04 	movi	r2,-4
 800c5d4:	1884703a 	and	r2,r3,r2
 800c5d8:	81400217 	ldw	r5,8(r16)
 800c5dc:	8085883a 	add	r2,r16,r2
 800c5e0:	10c00117 	ldw	r3,4(r2)
 800c5e4:	29000315 	stw	r4,12(r5)
 800c5e8:	21400215 	stw	r5,8(r4)
 800c5ec:	18c00054 	ori	r3,r3,1
 800c5f0:	10c00115 	stw	r3,4(r2)
 800c5f4:	9009883a 	mov	r4,r18
 800c5f8:	80118580 	call	8011858 <__malloc_unlock>
 800c5fc:	80800204 	addi	r2,r16,8
 800c600:	dfc00a17 	ldw	ra,40(sp)
 800c604:	df000917 	ldw	fp,36(sp)
 800c608:	ddc00817 	ldw	r23,32(sp)
 800c60c:	dd800717 	ldw	r22,28(sp)
 800c610:	dd400617 	ldw	r21,24(sp)
 800c614:	dd000517 	ldw	r20,20(sp)
 800c618:	dcc00417 	ldw	r19,16(sp)
 800c61c:	dc800317 	ldw	r18,12(sp)
 800c620:	dc400217 	ldw	r17,8(sp)
 800c624:	dc000117 	ldw	r16,4(sp)
 800c628:	dec00b04 	addi	sp,sp,44
 800c62c:	f800283a 	ret
 800c630:	00800304 	movi	r2,12
 800c634:	90800015 	stw	r2,0(r18)
 800c638:	0005883a 	mov	r2,zero
 800c63c:	003ff006 	br	800c600 <__alt_data_end+0xfc00c600>
 800c640:	01002004 	movi	r4,128
 800c644:	02001004 	movi	r8,64
 800c648:	01c00fc4 	movi	r7,63
 800c64c:	003f6106 	br	800c3d4 <__alt_data_end+0xfc00c3d4>
 800c650:	4009883a 	mov	r4,r8
 800c654:	003f7506 	br	800c42c <__alt_data_end+0xfc00c42c>
 800c658:	81000317 	ldw	r4,12(r16)
 800c65c:	003fde06 	br	800c5d8 <__alt_data_end+0xfc00c5d8>
 800c660:	81c5883a 	add	r2,r16,r7
 800c664:	11400117 	ldw	r5,4(r2)
 800c668:	9009883a 	mov	r4,r18
 800c66c:	29400054 	ori	r5,r5,1
 800c670:	11400115 	stw	r5,4(r2)
 800c674:	80118580 	call	8011858 <__malloc_unlock>
 800c678:	80800204 	addi	r2,r16,8
 800c67c:	003fe006 	br	800c600 <__alt_data_end+0xfc00c600>
 800c680:	9c000217 	ldw	r16,8(r19)
 800c684:	00bfff04 	movi	r2,-4
 800c688:	85800117 	ldw	r22,4(r16)
 800c68c:	b0ac703a 	and	r22,r22,r2
 800c690:	b4400336 	bltu	r22,r17,800c6a0 <_malloc_r+0x344>
 800c694:	b445c83a 	sub	r2,r22,r17
 800c698:	00c003c4 	movi	r3,15
 800c69c:	18805d16 	blt	r3,r2,800c814 <_malloc_r+0x4b8>
 800c6a0:	05c20074 	movhi	r23,2049
 800c6a4:	008200b4 	movhi	r2,2050
 800c6a8:	10a4f804 	addi	r2,r2,-27680
 800c6ac:	bdddf404 	addi	r23,r23,30672
 800c6b0:	15400017 	ldw	r21,0(r2)
 800c6b4:	b8c00017 	ldw	r3,0(r23)
 800c6b8:	00bfffc4 	movi	r2,-1
 800c6bc:	858d883a 	add	r6,r16,r22
 800c6c0:	8d6b883a 	add	r21,r17,r21
 800c6c4:	1880ea26 	beq	r3,r2,800ca70 <_malloc_r+0x714>
 800c6c8:	ad4403c4 	addi	r21,r21,4111
 800c6cc:	00bc0004 	movi	r2,-4096
 800c6d0:	a8aa703a 	and	r21,r21,r2
 800c6d4:	a80b883a 	mov	r5,r21
 800c6d8:	9009883a 	mov	r4,r18
 800c6dc:	d9800015 	stw	r6,0(sp)
 800c6e0:	800e5780 	call	800e578 <_sbrk_r>
 800c6e4:	1029883a 	mov	r20,r2
 800c6e8:	00bfffc4 	movi	r2,-1
 800c6ec:	d9800017 	ldw	r6,0(sp)
 800c6f0:	a080e826 	beq	r20,r2,800ca94 <_malloc_r+0x738>
 800c6f4:	a180a636 	bltu	r20,r6,800c990 <_malloc_r+0x634>
 800c6f8:	070200b4 	movhi	fp,2050
 800c6fc:	e7250104 	addi	fp,fp,-27644
 800c700:	e0800017 	ldw	r2,0(fp)
 800c704:	a887883a 	add	r3,r21,r2
 800c708:	e0c00015 	stw	r3,0(fp)
 800c70c:	3500e626 	beq	r6,r20,800caa8 <_malloc_r+0x74c>
 800c710:	b9000017 	ldw	r4,0(r23)
 800c714:	00bfffc4 	movi	r2,-1
 800c718:	2080ee26 	beq	r4,r2,800cad4 <_malloc_r+0x778>
 800c71c:	a185c83a 	sub	r2,r20,r6
 800c720:	10c5883a 	add	r2,r2,r3
 800c724:	e0800015 	stw	r2,0(fp)
 800c728:	a0c001cc 	andi	r3,r20,7
 800c72c:	1800bc26 	beq	r3,zero,800ca20 <_malloc_r+0x6c4>
 800c730:	a0e9c83a 	sub	r20,r20,r3
 800c734:	00840204 	movi	r2,4104
 800c738:	a5000204 	addi	r20,r20,8
 800c73c:	10c7c83a 	sub	r3,r2,r3
 800c740:	a545883a 	add	r2,r20,r21
 800c744:	1083ffcc 	andi	r2,r2,4095
 800c748:	18abc83a 	sub	r21,r3,r2
 800c74c:	a80b883a 	mov	r5,r21
 800c750:	9009883a 	mov	r4,r18
 800c754:	800e5780 	call	800e578 <_sbrk_r>
 800c758:	00ffffc4 	movi	r3,-1
 800c75c:	10c0e126 	beq	r2,r3,800cae4 <_malloc_r+0x788>
 800c760:	1505c83a 	sub	r2,r2,r20
 800c764:	1545883a 	add	r2,r2,r21
 800c768:	10800054 	ori	r2,r2,1
 800c76c:	e0c00017 	ldw	r3,0(fp)
 800c770:	9d000215 	stw	r20,8(r19)
 800c774:	a0800115 	stw	r2,4(r20)
 800c778:	a8c7883a 	add	r3,r21,r3
 800c77c:	e0c00015 	stw	r3,0(fp)
 800c780:	84c00e26 	beq	r16,r19,800c7bc <_malloc_r+0x460>
 800c784:	018003c4 	movi	r6,15
 800c788:	3580a72e 	bgeu	r6,r22,800ca28 <_malloc_r+0x6cc>
 800c78c:	81400117 	ldw	r5,4(r16)
 800c790:	013ffe04 	movi	r4,-8
 800c794:	b0bffd04 	addi	r2,r22,-12
 800c798:	1104703a 	and	r2,r2,r4
 800c79c:	2900004c 	andi	r4,r5,1
 800c7a0:	2088b03a 	or	r4,r4,r2
 800c7a4:	81000115 	stw	r4,4(r16)
 800c7a8:	01400144 	movi	r5,5
 800c7ac:	8089883a 	add	r4,r16,r2
 800c7b0:	21400115 	stw	r5,4(r4)
 800c7b4:	21400215 	stw	r5,8(r4)
 800c7b8:	3080cd36 	bltu	r6,r2,800caf0 <_malloc_r+0x794>
 800c7bc:	008200b4 	movhi	r2,2050
 800c7c0:	10a4f704 	addi	r2,r2,-27684
 800c7c4:	11000017 	ldw	r4,0(r2)
 800c7c8:	20c0012e 	bgeu	r4,r3,800c7d0 <_malloc_r+0x474>
 800c7cc:	10c00015 	stw	r3,0(r2)
 800c7d0:	008200b4 	movhi	r2,2050
 800c7d4:	10a4f604 	addi	r2,r2,-27688
 800c7d8:	11000017 	ldw	r4,0(r2)
 800c7dc:	9c000217 	ldw	r16,8(r19)
 800c7e0:	20c0012e 	bgeu	r4,r3,800c7e8 <_malloc_r+0x48c>
 800c7e4:	10c00015 	stw	r3,0(r2)
 800c7e8:	80c00117 	ldw	r3,4(r16)
 800c7ec:	00bfff04 	movi	r2,-4
 800c7f0:	1886703a 	and	r3,r3,r2
 800c7f4:	1c45c83a 	sub	r2,r3,r17
 800c7f8:	1c400236 	bltu	r3,r17,800c804 <_malloc_r+0x4a8>
 800c7fc:	00c003c4 	movi	r3,15
 800c800:	18800416 	blt	r3,r2,800c814 <_malloc_r+0x4b8>
 800c804:	9009883a 	mov	r4,r18
 800c808:	80118580 	call	8011858 <__malloc_unlock>
 800c80c:	0005883a 	mov	r2,zero
 800c810:	003f7b06 	br	800c600 <__alt_data_end+0xfc00c600>
 800c814:	88c00054 	ori	r3,r17,1
 800c818:	80c00115 	stw	r3,4(r16)
 800c81c:	8463883a 	add	r17,r16,r17
 800c820:	10800054 	ori	r2,r2,1
 800c824:	9c400215 	stw	r17,8(r19)
 800c828:	88800115 	stw	r2,4(r17)
 800c82c:	9009883a 	mov	r4,r18
 800c830:	80118580 	call	8011858 <__malloc_unlock>
 800c834:	80800204 	addi	r2,r16,8
 800c838:	003f7106 	br	800c600 <__alt_data_end+0xfc00c600>
 800c83c:	00c00504 	movi	r3,20
 800c840:	18804a2e 	bgeu	r3,r2,800c96c <_malloc_r+0x610>
 800c844:	00c01504 	movi	r3,84
 800c848:	18806e36 	bltu	r3,r2,800ca04 <_malloc_r+0x6a8>
 800c84c:	8804d33a 	srli	r2,r17,12
 800c850:	12001bc4 	addi	r8,r2,111
 800c854:	11c01b84 	addi	r7,r2,110
 800c858:	4209883a 	add	r4,r8,r8
 800c85c:	003edd06 	br	800c3d4 <__alt_data_end+0xfc00c3d4>
 800c860:	3804d27a 	srli	r2,r7,9
 800c864:	00c00104 	movi	r3,4
 800c868:	1880442e 	bgeu	r3,r2,800c97c <_malloc_r+0x620>
 800c86c:	00c00504 	movi	r3,20
 800c870:	18808136 	bltu	r3,r2,800ca78 <_malloc_r+0x71c>
 800c874:	11401704 	addi	r5,r2,92
 800c878:	10c016c4 	addi	r3,r2,91
 800c87c:	294b883a 	add	r5,r5,r5
 800c880:	294b883a 	add	r5,r5,r5
 800c884:	294b883a 	add	r5,r5,r5
 800c888:	994b883a 	add	r5,r19,r5
 800c88c:	28800017 	ldw	r2,0(r5)
 800c890:	01820074 	movhi	r6,2049
 800c894:	297ffe04 	addi	r5,r5,-8
 800c898:	31983e04 	addi	r6,r6,24824
 800c89c:	28806526 	beq	r5,r2,800ca34 <_malloc_r+0x6d8>
 800c8a0:	01bfff04 	movi	r6,-4
 800c8a4:	10c00117 	ldw	r3,4(r2)
 800c8a8:	1986703a 	and	r3,r3,r6
 800c8ac:	38c0022e 	bgeu	r7,r3,800c8b8 <_malloc_r+0x55c>
 800c8b0:	10800217 	ldw	r2,8(r2)
 800c8b4:	28bffb1e 	bne	r5,r2,800c8a4 <__alt_data_end+0xfc00c8a4>
 800c8b8:	11400317 	ldw	r5,12(r2)
 800c8bc:	98c00117 	ldw	r3,4(r19)
 800c8c0:	81400315 	stw	r5,12(r16)
 800c8c4:	80800215 	stw	r2,8(r16)
 800c8c8:	2c000215 	stw	r16,8(r5)
 800c8cc:	14000315 	stw	r16,12(r2)
 800c8d0:	003ef806 	br	800c4b4 <__alt_data_end+0xfc00c4b4>
 800c8d4:	88c00054 	ori	r3,r17,1
 800c8d8:	80c00115 	stw	r3,4(r16)
 800c8dc:	8463883a 	add	r17,r16,r17
 800c8e0:	34400515 	stw	r17,20(r6)
 800c8e4:	34400415 	stw	r17,16(r6)
 800c8e8:	10c00054 	ori	r3,r2,1
 800c8ec:	8a000315 	stw	r8,12(r17)
 800c8f0:	8a000215 	stw	r8,8(r17)
 800c8f4:	88c00115 	stw	r3,4(r17)
 800c8f8:	88a3883a 	add	r17,r17,r2
 800c8fc:	88800015 	stw	r2,0(r17)
 800c900:	9009883a 	mov	r4,r18
 800c904:	80118580 	call	8011858 <__malloc_unlock>
 800c908:	80800204 	addi	r2,r16,8
 800c90c:	003f3c06 	br	800c600 <__alt_data_end+0xfc00c600>
 800c910:	30c00117 	ldw	r3,4(r6)
 800c914:	003ee706 	br	800c4b4 <__alt_data_end+0xfc00c4b4>
 800c918:	5ac00044 	addi	r11,r11,1
 800c91c:	588000cc 	andi	r2,r11,3
 800c920:	31800204 	addi	r6,r6,8
 800c924:	103efd1e 	bne	r2,zero,800c51c <__alt_data_end+0xfc00c51c>
 800c928:	00002406 	br	800c9bc <_malloc_r+0x660>
 800c92c:	14000317 	ldw	r16,12(r2)
 800c930:	143f251e 	bne	r2,r16,800c5c8 <__alt_data_end+0xfc00c5c8>
 800c934:	21000084 	addi	r4,r4,2
 800c938:	003ebc06 	br	800c42c <__alt_data_end+0xfc00c42c>
 800c93c:	8085883a 	add	r2,r16,r2
 800c940:	10c00117 	ldw	r3,4(r2)
 800c944:	81000317 	ldw	r4,12(r16)
 800c948:	81400217 	ldw	r5,8(r16)
 800c94c:	18c00054 	ori	r3,r3,1
 800c950:	10c00115 	stw	r3,4(r2)
 800c954:	29000315 	stw	r4,12(r5)
 800c958:	21400215 	stw	r5,8(r4)
 800c95c:	9009883a 	mov	r4,r18
 800c960:	80118580 	call	8011858 <__malloc_unlock>
 800c964:	80800204 	addi	r2,r16,8
 800c968:	003f2506 	br	800c600 <__alt_data_end+0xfc00c600>
 800c96c:	12001704 	addi	r8,r2,92
 800c970:	11c016c4 	addi	r7,r2,91
 800c974:	4209883a 	add	r4,r8,r8
 800c978:	003e9606 	br	800c3d4 <__alt_data_end+0xfc00c3d4>
 800c97c:	3804d1ba 	srli	r2,r7,6
 800c980:	11400e44 	addi	r5,r2,57
 800c984:	10c00e04 	addi	r3,r2,56
 800c988:	294b883a 	add	r5,r5,r5
 800c98c:	003fbc06 	br	800c880 <__alt_data_end+0xfc00c880>
 800c990:	84ff5926 	beq	r16,r19,800c6f8 <__alt_data_end+0xfc00c6f8>
 800c994:	00820074 	movhi	r2,2049
 800c998:	10983e04 	addi	r2,r2,24824
 800c99c:	14000217 	ldw	r16,8(r2)
 800c9a0:	00bfff04 	movi	r2,-4
 800c9a4:	80c00117 	ldw	r3,4(r16)
 800c9a8:	1886703a 	and	r3,r3,r2
 800c9ac:	003f9106 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800c9b0:	60800217 	ldw	r2,8(r12)
 800c9b4:	213fffc4 	addi	r4,r4,-1
 800c9b8:	1300651e 	bne	r2,r12,800cb50 <_malloc_r+0x7f4>
 800c9bc:	208000cc 	andi	r2,r4,3
 800c9c0:	633ffe04 	addi	r12,r12,-8
 800c9c4:	103ffa1e 	bne	r2,zero,800c9b0 <__alt_data_end+0xfc00c9b0>
 800c9c8:	98800117 	ldw	r2,4(r19)
 800c9cc:	0146303a 	nor	r3,zero,r5
 800c9d0:	1884703a 	and	r2,r3,r2
 800c9d4:	98800115 	stw	r2,4(r19)
 800c9d8:	294b883a 	add	r5,r5,r5
 800c9dc:	117f2836 	bltu	r2,r5,800c680 <__alt_data_end+0xfc00c680>
 800c9e0:	283f2726 	beq	r5,zero,800c680 <__alt_data_end+0xfc00c680>
 800c9e4:	2886703a 	and	r3,r5,r2
 800c9e8:	5809883a 	mov	r4,r11
 800c9ec:	183ec31e 	bne	r3,zero,800c4fc <__alt_data_end+0xfc00c4fc>
 800c9f0:	294b883a 	add	r5,r5,r5
 800c9f4:	2886703a 	and	r3,r5,r2
 800c9f8:	21000104 	addi	r4,r4,4
 800c9fc:	183ffc26 	beq	r3,zero,800c9f0 <__alt_data_end+0xfc00c9f0>
 800ca00:	003ebe06 	br	800c4fc <__alt_data_end+0xfc00c4fc>
 800ca04:	00c05504 	movi	r3,340
 800ca08:	18801236 	bltu	r3,r2,800ca54 <_malloc_r+0x6f8>
 800ca0c:	8804d3fa 	srli	r2,r17,15
 800ca10:	12001e04 	addi	r8,r2,120
 800ca14:	11c01dc4 	addi	r7,r2,119
 800ca18:	4209883a 	add	r4,r8,r8
 800ca1c:	003e6d06 	br	800c3d4 <__alt_data_end+0xfc00c3d4>
 800ca20:	00c40004 	movi	r3,4096
 800ca24:	003f4606 	br	800c740 <__alt_data_end+0xfc00c740>
 800ca28:	00800044 	movi	r2,1
 800ca2c:	a0800115 	stw	r2,4(r20)
 800ca30:	003f7406 	br	800c804 <__alt_data_end+0xfc00c804>
 800ca34:	1805d0ba 	srai	r2,r3,2
 800ca38:	01c00044 	movi	r7,1
 800ca3c:	30c00117 	ldw	r3,4(r6)
 800ca40:	388e983a 	sll	r7,r7,r2
 800ca44:	2805883a 	mov	r2,r5
 800ca48:	38c6b03a 	or	r3,r7,r3
 800ca4c:	30c00115 	stw	r3,4(r6)
 800ca50:	003f9b06 	br	800c8c0 <__alt_data_end+0xfc00c8c0>
 800ca54:	00c15504 	movi	r3,1364
 800ca58:	18801a36 	bltu	r3,r2,800cac4 <_malloc_r+0x768>
 800ca5c:	8804d4ba 	srli	r2,r17,18
 800ca60:	12001f44 	addi	r8,r2,125
 800ca64:	11c01f04 	addi	r7,r2,124
 800ca68:	4209883a 	add	r4,r8,r8
 800ca6c:	003e5906 	br	800c3d4 <__alt_data_end+0xfc00c3d4>
 800ca70:	ad400404 	addi	r21,r21,16
 800ca74:	003f1706 	br	800c6d4 <__alt_data_end+0xfc00c6d4>
 800ca78:	00c01504 	movi	r3,84
 800ca7c:	18802336 	bltu	r3,r2,800cb0c <_malloc_r+0x7b0>
 800ca80:	3804d33a 	srli	r2,r7,12
 800ca84:	11401bc4 	addi	r5,r2,111
 800ca88:	10c01b84 	addi	r3,r2,110
 800ca8c:	294b883a 	add	r5,r5,r5
 800ca90:	003f7b06 	br	800c880 <__alt_data_end+0xfc00c880>
 800ca94:	9c000217 	ldw	r16,8(r19)
 800ca98:	00bfff04 	movi	r2,-4
 800ca9c:	80c00117 	ldw	r3,4(r16)
 800caa0:	1886703a 	and	r3,r3,r2
 800caa4:	003f5306 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800caa8:	3083ffcc 	andi	r2,r6,4095
 800caac:	103f181e 	bne	r2,zero,800c710 <__alt_data_end+0xfc00c710>
 800cab0:	99000217 	ldw	r4,8(r19)
 800cab4:	b545883a 	add	r2,r22,r21
 800cab8:	10800054 	ori	r2,r2,1
 800cabc:	20800115 	stw	r2,4(r4)
 800cac0:	003f3e06 	br	800c7bc <__alt_data_end+0xfc00c7bc>
 800cac4:	01003f84 	movi	r4,254
 800cac8:	02001fc4 	movi	r8,127
 800cacc:	01c01f84 	movi	r7,126
 800cad0:	003e4006 	br	800c3d4 <__alt_data_end+0xfc00c3d4>
 800cad4:	00820074 	movhi	r2,2049
 800cad8:	109df404 	addi	r2,r2,30672
 800cadc:	15000015 	stw	r20,0(r2)
 800cae0:	003f1106 	br	800c728 <__alt_data_end+0xfc00c728>
 800cae4:	00800044 	movi	r2,1
 800cae8:	002b883a 	mov	r21,zero
 800caec:	003f1f06 	br	800c76c <__alt_data_end+0xfc00c76c>
 800caf0:	81400204 	addi	r5,r16,8
 800caf4:	9009883a 	mov	r4,r18
 800caf8:	800b7700 	call	800b770 <_free_r>
 800cafc:	008200b4 	movhi	r2,2050
 800cb00:	10a50104 	addi	r2,r2,-27644
 800cb04:	10c00017 	ldw	r3,0(r2)
 800cb08:	003f2c06 	br	800c7bc <__alt_data_end+0xfc00c7bc>
 800cb0c:	00c05504 	movi	r3,340
 800cb10:	18800536 	bltu	r3,r2,800cb28 <_malloc_r+0x7cc>
 800cb14:	3804d3fa 	srli	r2,r7,15
 800cb18:	11401e04 	addi	r5,r2,120
 800cb1c:	10c01dc4 	addi	r3,r2,119
 800cb20:	294b883a 	add	r5,r5,r5
 800cb24:	003f5606 	br	800c880 <__alt_data_end+0xfc00c880>
 800cb28:	00c15504 	movi	r3,1364
 800cb2c:	18800536 	bltu	r3,r2,800cb44 <_malloc_r+0x7e8>
 800cb30:	3804d4ba 	srli	r2,r7,18
 800cb34:	11401f44 	addi	r5,r2,125
 800cb38:	10c01f04 	addi	r3,r2,124
 800cb3c:	294b883a 	add	r5,r5,r5
 800cb40:	003f4f06 	br	800c880 <__alt_data_end+0xfc00c880>
 800cb44:	01403f84 	movi	r5,254
 800cb48:	00c01f84 	movi	r3,126
 800cb4c:	003f4c06 	br	800c880 <__alt_data_end+0xfc00c880>
 800cb50:	98800117 	ldw	r2,4(r19)
 800cb54:	003fa006 	br	800c9d8 <__alt_data_end+0xfc00c9d8>
 800cb58:	8808d0fa 	srli	r4,r17,3
 800cb5c:	20800044 	addi	r2,r4,1
 800cb60:	1085883a 	add	r2,r2,r2
 800cb64:	003e9006 	br	800c5a8 <__alt_data_end+0xfc00c5a8>

0800cb68 <memchr>:
 800cb68:	208000cc 	andi	r2,r4,3
 800cb6c:	280f883a 	mov	r7,r5
 800cb70:	10003426 	beq	r2,zero,800cc44 <memchr+0xdc>
 800cb74:	30bfffc4 	addi	r2,r6,-1
 800cb78:	30001a26 	beq	r6,zero,800cbe4 <memchr+0x7c>
 800cb7c:	20c00003 	ldbu	r3,0(r4)
 800cb80:	29803fcc 	andi	r6,r5,255
 800cb84:	30c0051e 	bne	r6,r3,800cb9c <memchr+0x34>
 800cb88:	00001806 	br	800cbec <memchr+0x84>
 800cb8c:	10001526 	beq	r2,zero,800cbe4 <memchr+0x7c>
 800cb90:	20c00003 	ldbu	r3,0(r4)
 800cb94:	10bfffc4 	addi	r2,r2,-1
 800cb98:	30c01426 	beq	r6,r3,800cbec <memchr+0x84>
 800cb9c:	21000044 	addi	r4,r4,1
 800cba0:	20c000cc 	andi	r3,r4,3
 800cba4:	183ff91e 	bne	r3,zero,800cb8c <__alt_data_end+0xfc00cb8c>
 800cba8:	020000c4 	movi	r8,3
 800cbac:	40801136 	bltu	r8,r2,800cbf4 <memchr+0x8c>
 800cbb0:	10000c26 	beq	r2,zero,800cbe4 <memchr+0x7c>
 800cbb4:	20c00003 	ldbu	r3,0(r4)
 800cbb8:	29403fcc 	andi	r5,r5,255
 800cbbc:	28c00b26 	beq	r5,r3,800cbec <memchr+0x84>
 800cbc0:	20c00044 	addi	r3,r4,1
 800cbc4:	39803fcc 	andi	r6,r7,255
 800cbc8:	2089883a 	add	r4,r4,r2
 800cbcc:	00000306 	br	800cbdc <memchr+0x74>
 800cbd0:	18c00044 	addi	r3,r3,1
 800cbd4:	197fffc3 	ldbu	r5,-1(r3)
 800cbd8:	31400526 	beq	r6,r5,800cbf0 <memchr+0x88>
 800cbdc:	1805883a 	mov	r2,r3
 800cbe0:	20fffb1e 	bne	r4,r3,800cbd0 <__alt_data_end+0xfc00cbd0>
 800cbe4:	0005883a 	mov	r2,zero
 800cbe8:	f800283a 	ret
 800cbec:	2005883a 	mov	r2,r4
 800cbf0:	f800283a 	ret
 800cbf4:	28c03fcc 	andi	r3,r5,255
 800cbf8:	1812923a 	slli	r9,r3,8
 800cbfc:	02ffbff4 	movhi	r11,65279
 800cc00:	02a02074 	movhi	r10,32897
 800cc04:	48d2b03a 	or	r9,r9,r3
 800cc08:	4806943a 	slli	r3,r9,16
 800cc0c:	5affbfc4 	addi	r11,r11,-257
 800cc10:	52a02004 	addi	r10,r10,-32640
 800cc14:	48d2b03a 	or	r9,r9,r3
 800cc18:	20c00017 	ldw	r3,0(r4)
 800cc1c:	48c6f03a 	xor	r3,r9,r3
 800cc20:	1acd883a 	add	r6,r3,r11
 800cc24:	00c6303a 	nor	r3,zero,r3
 800cc28:	30c6703a 	and	r3,r6,r3
 800cc2c:	1a86703a 	and	r3,r3,r10
 800cc30:	183fe01e 	bne	r3,zero,800cbb4 <__alt_data_end+0xfc00cbb4>
 800cc34:	10bfff04 	addi	r2,r2,-4
 800cc38:	21000104 	addi	r4,r4,4
 800cc3c:	40bff636 	bltu	r8,r2,800cc18 <__alt_data_end+0xfc00cc18>
 800cc40:	003fdb06 	br	800cbb0 <__alt_data_end+0xfc00cbb0>
 800cc44:	3005883a 	mov	r2,r6
 800cc48:	003fd706 	br	800cba8 <__alt_data_end+0xfc00cba8>

0800cc4c <memcpy>:
 800cc4c:	defffd04 	addi	sp,sp,-12
 800cc50:	dfc00215 	stw	ra,8(sp)
 800cc54:	dc400115 	stw	r17,4(sp)
 800cc58:	dc000015 	stw	r16,0(sp)
 800cc5c:	00c003c4 	movi	r3,15
 800cc60:	2005883a 	mov	r2,r4
 800cc64:	1980452e 	bgeu	r3,r6,800cd7c <memcpy+0x130>
 800cc68:	2906b03a 	or	r3,r5,r4
 800cc6c:	18c000cc 	andi	r3,r3,3
 800cc70:	1800441e 	bne	r3,zero,800cd84 <memcpy+0x138>
 800cc74:	347ffc04 	addi	r17,r6,-16
 800cc78:	8822d13a 	srli	r17,r17,4
 800cc7c:	28c00104 	addi	r3,r5,4
 800cc80:	23400104 	addi	r13,r4,4
 800cc84:	8820913a 	slli	r16,r17,4
 800cc88:	2b000204 	addi	r12,r5,8
 800cc8c:	22c00204 	addi	r11,r4,8
 800cc90:	84000504 	addi	r16,r16,20
 800cc94:	2a800304 	addi	r10,r5,12
 800cc98:	22400304 	addi	r9,r4,12
 800cc9c:	2c21883a 	add	r16,r5,r16
 800cca0:	2811883a 	mov	r8,r5
 800cca4:	200f883a 	mov	r7,r4
 800cca8:	41000017 	ldw	r4,0(r8)
 800ccac:	1fc00017 	ldw	ra,0(r3)
 800ccb0:	63c00017 	ldw	r15,0(r12)
 800ccb4:	39000015 	stw	r4,0(r7)
 800ccb8:	53800017 	ldw	r14,0(r10)
 800ccbc:	6fc00015 	stw	ra,0(r13)
 800ccc0:	5bc00015 	stw	r15,0(r11)
 800ccc4:	4b800015 	stw	r14,0(r9)
 800ccc8:	18c00404 	addi	r3,r3,16
 800cccc:	39c00404 	addi	r7,r7,16
 800ccd0:	42000404 	addi	r8,r8,16
 800ccd4:	6b400404 	addi	r13,r13,16
 800ccd8:	63000404 	addi	r12,r12,16
 800ccdc:	5ac00404 	addi	r11,r11,16
 800cce0:	52800404 	addi	r10,r10,16
 800cce4:	4a400404 	addi	r9,r9,16
 800cce8:	1c3fef1e 	bne	r3,r16,800cca8 <__alt_data_end+0xfc00cca8>
 800ccec:	89c00044 	addi	r7,r17,1
 800ccf0:	380e913a 	slli	r7,r7,4
 800ccf4:	310003cc 	andi	r4,r6,15
 800ccf8:	02c000c4 	movi	r11,3
 800ccfc:	11c7883a 	add	r3,r2,r7
 800cd00:	29cb883a 	add	r5,r5,r7
 800cd04:	5900212e 	bgeu	r11,r4,800cd8c <memcpy+0x140>
 800cd08:	1813883a 	mov	r9,r3
 800cd0c:	2811883a 	mov	r8,r5
 800cd10:	200f883a 	mov	r7,r4
 800cd14:	42800017 	ldw	r10,0(r8)
 800cd18:	4a400104 	addi	r9,r9,4
 800cd1c:	39ffff04 	addi	r7,r7,-4
 800cd20:	4abfff15 	stw	r10,-4(r9)
 800cd24:	42000104 	addi	r8,r8,4
 800cd28:	59fffa36 	bltu	r11,r7,800cd14 <__alt_data_end+0xfc00cd14>
 800cd2c:	213fff04 	addi	r4,r4,-4
 800cd30:	2008d0ba 	srli	r4,r4,2
 800cd34:	318000cc 	andi	r6,r6,3
 800cd38:	21000044 	addi	r4,r4,1
 800cd3c:	2109883a 	add	r4,r4,r4
 800cd40:	2109883a 	add	r4,r4,r4
 800cd44:	1907883a 	add	r3,r3,r4
 800cd48:	290b883a 	add	r5,r5,r4
 800cd4c:	30000626 	beq	r6,zero,800cd68 <memcpy+0x11c>
 800cd50:	198d883a 	add	r6,r3,r6
 800cd54:	29c00003 	ldbu	r7,0(r5)
 800cd58:	18c00044 	addi	r3,r3,1
 800cd5c:	29400044 	addi	r5,r5,1
 800cd60:	19ffffc5 	stb	r7,-1(r3)
 800cd64:	19bffb1e 	bne	r3,r6,800cd54 <__alt_data_end+0xfc00cd54>
 800cd68:	dfc00217 	ldw	ra,8(sp)
 800cd6c:	dc400117 	ldw	r17,4(sp)
 800cd70:	dc000017 	ldw	r16,0(sp)
 800cd74:	dec00304 	addi	sp,sp,12
 800cd78:	f800283a 	ret
 800cd7c:	2007883a 	mov	r3,r4
 800cd80:	003ff206 	br	800cd4c <__alt_data_end+0xfc00cd4c>
 800cd84:	2007883a 	mov	r3,r4
 800cd88:	003ff106 	br	800cd50 <__alt_data_end+0xfc00cd50>
 800cd8c:	200d883a 	mov	r6,r4
 800cd90:	003fee06 	br	800cd4c <__alt_data_end+0xfc00cd4c>

0800cd94 <memmove>:
 800cd94:	2005883a 	mov	r2,r4
 800cd98:	29000b2e 	bgeu	r5,r4,800cdc8 <memmove+0x34>
 800cd9c:	298f883a 	add	r7,r5,r6
 800cda0:	21c0092e 	bgeu	r4,r7,800cdc8 <memmove+0x34>
 800cda4:	2187883a 	add	r3,r4,r6
 800cda8:	198bc83a 	sub	r5,r3,r6
 800cdac:	30004826 	beq	r6,zero,800ced0 <memmove+0x13c>
 800cdb0:	39ffffc4 	addi	r7,r7,-1
 800cdb4:	39000003 	ldbu	r4,0(r7)
 800cdb8:	18ffffc4 	addi	r3,r3,-1
 800cdbc:	19000005 	stb	r4,0(r3)
 800cdc0:	28fffb1e 	bne	r5,r3,800cdb0 <__alt_data_end+0xfc00cdb0>
 800cdc4:	f800283a 	ret
 800cdc8:	00c003c4 	movi	r3,15
 800cdcc:	1980412e 	bgeu	r3,r6,800ced4 <memmove+0x140>
 800cdd0:	2886b03a 	or	r3,r5,r2
 800cdd4:	18c000cc 	andi	r3,r3,3
 800cdd8:	1800401e 	bne	r3,zero,800cedc <memmove+0x148>
 800cddc:	33fffc04 	addi	r15,r6,-16
 800cde0:	781ed13a 	srli	r15,r15,4
 800cde4:	28c00104 	addi	r3,r5,4
 800cde8:	13400104 	addi	r13,r2,4
 800cdec:	781c913a 	slli	r14,r15,4
 800cdf0:	2b000204 	addi	r12,r5,8
 800cdf4:	12c00204 	addi	r11,r2,8
 800cdf8:	73800504 	addi	r14,r14,20
 800cdfc:	2a800304 	addi	r10,r5,12
 800ce00:	12400304 	addi	r9,r2,12
 800ce04:	2b9d883a 	add	r14,r5,r14
 800ce08:	2811883a 	mov	r8,r5
 800ce0c:	100f883a 	mov	r7,r2
 800ce10:	41000017 	ldw	r4,0(r8)
 800ce14:	39c00404 	addi	r7,r7,16
 800ce18:	18c00404 	addi	r3,r3,16
 800ce1c:	393ffc15 	stw	r4,-16(r7)
 800ce20:	193ffc17 	ldw	r4,-16(r3)
 800ce24:	6b400404 	addi	r13,r13,16
 800ce28:	5ac00404 	addi	r11,r11,16
 800ce2c:	693ffc15 	stw	r4,-16(r13)
 800ce30:	61000017 	ldw	r4,0(r12)
 800ce34:	4a400404 	addi	r9,r9,16
 800ce38:	42000404 	addi	r8,r8,16
 800ce3c:	593ffc15 	stw	r4,-16(r11)
 800ce40:	51000017 	ldw	r4,0(r10)
 800ce44:	63000404 	addi	r12,r12,16
 800ce48:	52800404 	addi	r10,r10,16
 800ce4c:	493ffc15 	stw	r4,-16(r9)
 800ce50:	1bbfef1e 	bne	r3,r14,800ce10 <__alt_data_end+0xfc00ce10>
 800ce54:	79000044 	addi	r4,r15,1
 800ce58:	2008913a 	slli	r4,r4,4
 800ce5c:	328003cc 	andi	r10,r6,15
 800ce60:	02c000c4 	movi	r11,3
 800ce64:	1107883a 	add	r3,r2,r4
 800ce68:	290b883a 	add	r5,r5,r4
 800ce6c:	5a801e2e 	bgeu	r11,r10,800cee8 <memmove+0x154>
 800ce70:	1813883a 	mov	r9,r3
 800ce74:	2811883a 	mov	r8,r5
 800ce78:	500f883a 	mov	r7,r10
 800ce7c:	41000017 	ldw	r4,0(r8)
 800ce80:	4a400104 	addi	r9,r9,4
 800ce84:	39ffff04 	addi	r7,r7,-4
 800ce88:	493fff15 	stw	r4,-4(r9)
 800ce8c:	42000104 	addi	r8,r8,4
 800ce90:	59fffa36 	bltu	r11,r7,800ce7c <__alt_data_end+0xfc00ce7c>
 800ce94:	513fff04 	addi	r4,r10,-4
 800ce98:	2008d0ba 	srli	r4,r4,2
 800ce9c:	318000cc 	andi	r6,r6,3
 800cea0:	21000044 	addi	r4,r4,1
 800cea4:	2109883a 	add	r4,r4,r4
 800cea8:	2109883a 	add	r4,r4,r4
 800ceac:	1907883a 	add	r3,r3,r4
 800ceb0:	290b883a 	add	r5,r5,r4
 800ceb4:	30000b26 	beq	r6,zero,800cee4 <memmove+0x150>
 800ceb8:	198d883a 	add	r6,r3,r6
 800cebc:	29c00003 	ldbu	r7,0(r5)
 800cec0:	18c00044 	addi	r3,r3,1
 800cec4:	29400044 	addi	r5,r5,1
 800cec8:	19ffffc5 	stb	r7,-1(r3)
 800cecc:	19bffb1e 	bne	r3,r6,800cebc <__alt_data_end+0xfc00cebc>
 800ced0:	f800283a 	ret
 800ced4:	1007883a 	mov	r3,r2
 800ced8:	003ff606 	br	800ceb4 <__alt_data_end+0xfc00ceb4>
 800cedc:	1007883a 	mov	r3,r2
 800cee0:	003ff506 	br	800ceb8 <__alt_data_end+0xfc00ceb8>
 800cee4:	f800283a 	ret
 800cee8:	500d883a 	mov	r6,r10
 800ceec:	003ff106 	br	800ceb4 <__alt_data_end+0xfc00ceb4>

0800cef0 <memset>:
 800cef0:	20c000cc 	andi	r3,r4,3
 800cef4:	2005883a 	mov	r2,r4
 800cef8:	18004426 	beq	r3,zero,800d00c <memset+0x11c>
 800cefc:	31ffffc4 	addi	r7,r6,-1
 800cf00:	30004026 	beq	r6,zero,800d004 <memset+0x114>
 800cf04:	2813883a 	mov	r9,r5
 800cf08:	200d883a 	mov	r6,r4
 800cf0c:	2007883a 	mov	r3,r4
 800cf10:	00000406 	br	800cf24 <memset+0x34>
 800cf14:	3a3fffc4 	addi	r8,r7,-1
 800cf18:	31800044 	addi	r6,r6,1
 800cf1c:	38003926 	beq	r7,zero,800d004 <memset+0x114>
 800cf20:	400f883a 	mov	r7,r8
 800cf24:	18c00044 	addi	r3,r3,1
 800cf28:	32400005 	stb	r9,0(r6)
 800cf2c:	1a0000cc 	andi	r8,r3,3
 800cf30:	403ff81e 	bne	r8,zero,800cf14 <__alt_data_end+0xfc00cf14>
 800cf34:	010000c4 	movi	r4,3
 800cf38:	21c02d2e 	bgeu	r4,r7,800cff0 <memset+0x100>
 800cf3c:	29003fcc 	andi	r4,r5,255
 800cf40:	200c923a 	slli	r6,r4,8
 800cf44:	3108b03a 	or	r4,r6,r4
 800cf48:	200c943a 	slli	r6,r4,16
 800cf4c:	218cb03a 	or	r6,r4,r6
 800cf50:	010003c4 	movi	r4,15
 800cf54:	21c0182e 	bgeu	r4,r7,800cfb8 <memset+0xc8>
 800cf58:	3b3ffc04 	addi	r12,r7,-16
 800cf5c:	6018d13a 	srli	r12,r12,4
 800cf60:	1a000104 	addi	r8,r3,4
 800cf64:	1ac00204 	addi	r11,r3,8
 800cf68:	6008913a 	slli	r4,r12,4
 800cf6c:	1a800304 	addi	r10,r3,12
 800cf70:	1813883a 	mov	r9,r3
 800cf74:	21000504 	addi	r4,r4,20
 800cf78:	1909883a 	add	r4,r3,r4
 800cf7c:	49800015 	stw	r6,0(r9)
 800cf80:	41800015 	stw	r6,0(r8)
 800cf84:	59800015 	stw	r6,0(r11)
 800cf88:	51800015 	stw	r6,0(r10)
 800cf8c:	42000404 	addi	r8,r8,16
 800cf90:	4a400404 	addi	r9,r9,16
 800cf94:	5ac00404 	addi	r11,r11,16
 800cf98:	52800404 	addi	r10,r10,16
 800cf9c:	413ff71e 	bne	r8,r4,800cf7c <__alt_data_end+0xfc00cf7c>
 800cfa0:	63000044 	addi	r12,r12,1
 800cfa4:	6018913a 	slli	r12,r12,4
 800cfa8:	39c003cc 	andi	r7,r7,15
 800cfac:	010000c4 	movi	r4,3
 800cfb0:	1b07883a 	add	r3,r3,r12
 800cfb4:	21c00e2e 	bgeu	r4,r7,800cff0 <memset+0x100>
 800cfb8:	1813883a 	mov	r9,r3
 800cfbc:	3811883a 	mov	r8,r7
 800cfc0:	010000c4 	movi	r4,3
 800cfc4:	49800015 	stw	r6,0(r9)
 800cfc8:	423fff04 	addi	r8,r8,-4
 800cfcc:	4a400104 	addi	r9,r9,4
 800cfd0:	223ffc36 	bltu	r4,r8,800cfc4 <__alt_data_end+0xfc00cfc4>
 800cfd4:	393fff04 	addi	r4,r7,-4
 800cfd8:	2008d0ba 	srli	r4,r4,2
 800cfdc:	39c000cc 	andi	r7,r7,3
 800cfe0:	21000044 	addi	r4,r4,1
 800cfe4:	2109883a 	add	r4,r4,r4
 800cfe8:	2109883a 	add	r4,r4,r4
 800cfec:	1907883a 	add	r3,r3,r4
 800cff0:	38000526 	beq	r7,zero,800d008 <memset+0x118>
 800cff4:	19cf883a 	add	r7,r3,r7
 800cff8:	19400005 	stb	r5,0(r3)
 800cffc:	18c00044 	addi	r3,r3,1
 800d000:	38fffd1e 	bne	r7,r3,800cff8 <__alt_data_end+0xfc00cff8>
 800d004:	f800283a 	ret
 800d008:	f800283a 	ret
 800d00c:	2007883a 	mov	r3,r4
 800d010:	300f883a 	mov	r7,r6
 800d014:	003fc706 	br	800cf34 <__alt_data_end+0xfc00cf34>

0800d018 <_Balloc>:
 800d018:	20801317 	ldw	r2,76(r4)
 800d01c:	defffc04 	addi	sp,sp,-16
 800d020:	dc400115 	stw	r17,4(sp)
 800d024:	dc000015 	stw	r16,0(sp)
 800d028:	dfc00315 	stw	ra,12(sp)
 800d02c:	dc800215 	stw	r18,8(sp)
 800d030:	2023883a 	mov	r17,r4
 800d034:	2821883a 	mov	r16,r5
 800d038:	10000f26 	beq	r2,zero,800d078 <_Balloc+0x60>
 800d03c:	8407883a 	add	r3,r16,r16
 800d040:	18c7883a 	add	r3,r3,r3
 800d044:	10c7883a 	add	r3,r2,r3
 800d048:	18800017 	ldw	r2,0(r3)
 800d04c:	10001126 	beq	r2,zero,800d094 <_Balloc+0x7c>
 800d050:	11000017 	ldw	r4,0(r2)
 800d054:	19000015 	stw	r4,0(r3)
 800d058:	10000415 	stw	zero,16(r2)
 800d05c:	10000315 	stw	zero,12(r2)
 800d060:	dfc00317 	ldw	ra,12(sp)
 800d064:	dc800217 	ldw	r18,8(sp)
 800d068:	dc400117 	ldw	r17,4(sp)
 800d06c:	dc000017 	ldw	r16,0(sp)
 800d070:	dec00404 	addi	sp,sp,16
 800d074:	f800283a 	ret
 800d078:	01800844 	movi	r6,33
 800d07c:	01400104 	movi	r5,4
 800d080:	800fee00 	call	800fee0 <_calloc_r>
 800d084:	88801315 	stw	r2,76(r17)
 800d088:	103fec1e 	bne	r2,zero,800d03c <__alt_data_end+0xfc00d03c>
 800d08c:	0005883a 	mov	r2,zero
 800d090:	003ff306 	br	800d060 <__alt_data_end+0xfc00d060>
 800d094:	01400044 	movi	r5,1
 800d098:	2c24983a 	sll	r18,r5,r16
 800d09c:	8809883a 	mov	r4,r17
 800d0a0:	91800144 	addi	r6,r18,5
 800d0a4:	318d883a 	add	r6,r6,r6
 800d0a8:	318d883a 	add	r6,r6,r6
 800d0ac:	800fee00 	call	800fee0 <_calloc_r>
 800d0b0:	103ff626 	beq	r2,zero,800d08c <__alt_data_end+0xfc00d08c>
 800d0b4:	14000115 	stw	r16,4(r2)
 800d0b8:	14800215 	stw	r18,8(r2)
 800d0bc:	003fe606 	br	800d058 <__alt_data_end+0xfc00d058>

0800d0c0 <_Bfree>:
 800d0c0:	28000826 	beq	r5,zero,800d0e4 <_Bfree+0x24>
 800d0c4:	28c00117 	ldw	r3,4(r5)
 800d0c8:	20801317 	ldw	r2,76(r4)
 800d0cc:	18c7883a 	add	r3,r3,r3
 800d0d0:	18c7883a 	add	r3,r3,r3
 800d0d4:	10c5883a 	add	r2,r2,r3
 800d0d8:	10c00017 	ldw	r3,0(r2)
 800d0dc:	28c00015 	stw	r3,0(r5)
 800d0e0:	11400015 	stw	r5,0(r2)
 800d0e4:	f800283a 	ret

0800d0e8 <__multadd>:
 800d0e8:	defffa04 	addi	sp,sp,-24
 800d0ec:	dc800315 	stw	r18,12(sp)
 800d0f0:	dc400215 	stw	r17,8(sp)
 800d0f4:	dc000115 	stw	r16,4(sp)
 800d0f8:	2823883a 	mov	r17,r5
 800d0fc:	2c000417 	ldw	r16,16(r5)
 800d100:	dfc00515 	stw	ra,20(sp)
 800d104:	dcc00415 	stw	r19,16(sp)
 800d108:	2025883a 	mov	r18,r4
 800d10c:	29400504 	addi	r5,r5,20
 800d110:	0011883a 	mov	r8,zero
 800d114:	28c00017 	ldw	r3,0(r5)
 800d118:	29400104 	addi	r5,r5,4
 800d11c:	42000044 	addi	r8,r8,1
 800d120:	18bfffcc 	andi	r2,r3,65535
 800d124:	1185383a 	mul	r2,r2,r6
 800d128:	1806d43a 	srli	r3,r3,16
 800d12c:	11cf883a 	add	r7,r2,r7
 800d130:	3808d43a 	srli	r4,r7,16
 800d134:	1987383a 	mul	r3,r3,r6
 800d138:	38bfffcc 	andi	r2,r7,65535
 800d13c:	1907883a 	add	r3,r3,r4
 800d140:	1808943a 	slli	r4,r3,16
 800d144:	180ed43a 	srli	r7,r3,16
 800d148:	2085883a 	add	r2,r4,r2
 800d14c:	28bfff15 	stw	r2,-4(r5)
 800d150:	443ff016 	blt	r8,r16,800d114 <__alt_data_end+0xfc00d114>
 800d154:	38000926 	beq	r7,zero,800d17c <__multadd+0x94>
 800d158:	88800217 	ldw	r2,8(r17)
 800d15c:	80800f0e 	bge	r16,r2,800d19c <__multadd+0xb4>
 800d160:	80800144 	addi	r2,r16,5
 800d164:	1085883a 	add	r2,r2,r2
 800d168:	1085883a 	add	r2,r2,r2
 800d16c:	8885883a 	add	r2,r17,r2
 800d170:	11c00015 	stw	r7,0(r2)
 800d174:	84000044 	addi	r16,r16,1
 800d178:	8c000415 	stw	r16,16(r17)
 800d17c:	8805883a 	mov	r2,r17
 800d180:	dfc00517 	ldw	ra,20(sp)
 800d184:	dcc00417 	ldw	r19,16(sp)
 800d188:	dc800317 	ldw	r18,12(sp)
 800d18c:	dc400217 	ldw	r17,8(sp)
 800d190:	dc000117 	ldw	r16,4(sp)
 800d194:	dec00604 	addi	sp,sp,24
 800d198:	f800283a 	ret
 800d19c:	89400117 	ldw	r5,4(r17)
 800d1a0:	9009883a 	mov	r4,r18
 800d1a4:	d9c00015 	stw	r7,0(sp)
 800d1a8:	29400044 	addi	r5,r5,1
 800d1ac:	800d0180 	call	800d018 <_Balloc>
 800d1b0:	89800417 	ldw	r6,16(r17)
 800d1b4:	89400304 	addi	r5,r17,12
 800d1b8:	11000304 	addi	r4,r2,12
 800d1bc:	31800084 	addi	r6,r6,2
 800d1c0:	318d883a 	add	r6,r6,r6
 800d1c4:	318d883a 	add	r6,r6,r6
 800d1c8:	1027883a 	mov	r19,r2
 800d1cc:	800cc4c0 	call	800cc4c <memcpy>
 800d1d0:	d9c00017 	ldw	r7,0(sp)
 800d1d4:	88000a26 	beq	r17,zero,800d200 <__multadd+0x118>
 800d1d8:	88c00117 	ldw	r3,4(r17)
 800d1dc:	90801317 	ldw	r2,76(r18)
 800d1e0:	18c7883a 	add	r3,r3,r3
 800d1e4:	18c7883a 	add	r3,r3,r3
 800d1e8:	10c5883a 	add	r2,r2,r3
 800d1ec:	10c00017 	ldw	r3,0(r2)
 800d1f0:	88c00015 	stw	r3,0(r17)
 800d1f4:	14400015 	stw	r17,0(r2)
 800d1f8:	9823883a 	mov	r17,r19
 800d1fc:	003fd806 	br	800d160 <__alt_data_end+0xfc00d160>
 800d200:	9823883a 	mov	r17,r19
 800d204:	003fd606 	br	800d160 <__alt_data_end+0xfc00d160>

0800d208 <__s2b>:
 800d208:	defff904 	addi	sp,sp,-28
 800d20c:	dc400115 	stw	r17,4(sp)
 800d210:	dc000015 	stw	r16,0(sp)
 800d214:	2023883a 	mov	r17,r4
 800d218:	2821883a 	mov	r16,r5
 800d21c:	39000204 	addi	r4,r7,8
 800d220:	01400244 	movi	r5,9
 800d224:	dcc00315 	stw	r19,12(sp)
 800d228:	dc800215 	stw	r18,8(sp)
 800d22c:	dfc00615 	stw	ra,24(sp)
 800d230:	dd400515 	stw	r21,20(sp)
 800d234:	dd000415 	stw	r20,16(sp)
 800d238:	3825883a 	mov	r18,r7
 800d23c:	3027883a 	mov	r19,r6
 800d240:	80032440 	call	8003244 <__divsi3>
 800d244:	00c00044 	movi	r3,1
 800d248:	000b883a 	mov	r5,zero
 800d24c:	1880030e 	bge	r3,r2,800d25c <__s2b+0x54>
 800d250:	18c7883a 	add	r3,r3,r3
 800d254:	29400044 	addi	r5,r5,1
 800d258:	18bffd16 	blt	r3,r2,800d250 <__alt_data_end+0xfc00d250>
 800d25c:	8809883a 	mov	r4,r17
 800d260:	800d0180 	call	800d018 <_Balloc>
 800d264:	d8c00717 	ldw	r3,28(sp)
 800d268:	10c00515 	stw	r3,20(r2)
 800d26c:	00c00044 	movi	r3,1
 800d270:	10c00415 	stw	r3,16(r2)
 800d274:	00c00244 	movi	r3,9
 800d278:	1cc0210e 	bge	r3,r19,800d300 <__s2b+0xf8>
 800d27c:	80eb883a 	add	r21,r16,r3
 800d280:	a829883a 	mov	r20,r21
 800d284:	84e1883a 	add	r16,r16,r19
 800d288:	a1c00007 	ldb	r7,0(r20)
 800d28c:	01800284 	movi	r6,10
 800d290:	a5000044 	addi	r20,r20,1
 800d294:	100b883a 	mov	r5,r2
 800d298:	39fff404 	addi	r7,r7,-48
 800d29c:	8809883a 	mov	r4,r17
 800d2a0:	800d0e80 	call	800d0e8 <__multadd>
 800d2a4:	a43ff81e 	bne	r20,r16,800d288 <__alt_data_end+0xfc00d288>
 800d2a8:	ace1883a 	add	r16,r21,r19
 800d2ac:	843ffe04 	addi	r16,r16,-8
 800d2b0:	9c800a0e 	bge	r19,r18,800d2dc <__s2b+0xd4>
 800d2b4:	94e5c83a 	sub	r18,r18,r19
 800d2b8:	84a5883a 	add	r18,r16,r18
 800d2bc:	81c00007 	ldb	r7,0(r16)
 800d2c0:	01800284 	movi	r6,10
 800d2c4:	84000044 	addi	r16,r16,1
 800d2c8:	100b883a 	mov	r5,r2
 800d2cc:	39fff404 	addi	r7,r7,-48
 800d2d0:	8809883a 	mov	r4,r17
 800d2d4:	800d0e80 	call	800d0e8 <__multadd>
 800d2d8:	84bff81e 	bne	r16,r18,800d2bc <__alt_data_end+0xfc00d2bc>
 800d2dc:	dfc00617 	ldw	ra,24(sp)
 800d2e0:	dd400517 	ldw	r21,20(sp)
 800d2e4:	dd000417 	ldw	r20,16(sp)
 800d2e8:	dcc00317 	ldw	r19,12(sp)
 800d2ec:	dc800217 	ldw	r18,8(sp)
 800d2f0:	dc400117 	ldw	r17,4(sp)
 800d2f4:	dc000017 	ldw	r16,0(sp)
 800d2f8:	dec00704 	addi	sp,sp,28
 800d2fc:	f800283a 	ret
 800d300:	84000284 	addi	r16,r16,10
 800d304:	1827883a 	mov	r19,r3
 800d308:	003fe906 	br	800d2b0 <__alt_data_end+0xfc00d2b0>

0800d30c <__hi0bits>:
 800d30c:	20bfffec 	andhi	r2,r4,65535
 800d310:	1000141e 	bne	r2,zero,800d364 <__hi0bits+0x58>
 800d314:	2008943a 	slli	r4,r4,16
 800d318:	00800404 	movi	r2,16
 800d31c:	20ffc02c 	andhi	r3,r4,65280
 800d320:	1800021e 	bne	r3,zero,800d32c <__hi0bits+0x20>
 800d324:	2008923a 	slli	r4,r4,8
 800d328:	10800204 	addi	r2,r2,8
 800d32c:	20fc002c 	andhi	r3,r4,61440
 800d330:	1800021e 	bne	r3,zero,800d33c <__hi0bits+0x30>
 800d334:	2008913a 	slli	r4,r4,4
 800d338:	10800104 	addi	r2,r2,4
 800d33c:	20f0002c 	andhi	r3,r4,49152
 800d340:	1800031e 	bne	r3,zero,800d350 <__hi0bits+0x44>
 800d344:	2109883a 	add	r4,r4,r4
 800d348:	10800084 	addi	r2,r2,2
 800d34c:	2109883a 	add	r4,r4,r4
 800d350:	20000316 	blt	r4,zero,800d360 <__hi0bits+0x54>
 800d354:	2110002c 	andhi	r4,r4,16384
 800d358:	2000041e 	bne	r4,zero,800d36c <__hi0bits+0x60>
 800d35c:	00800804 	movi	r2,32
 800d360:	f800283a 	ret
 800d364:	0005883a 	mov	r2,zero
 800d368:	003fec06 	br	800d31c <__alt_data_end+0xfc00d31c>
 800d36c:	10800044 	addi	r2,r2,1
 800d370:	f800283a 	ret

0800d374 <__lo0bits>:
 800d374:	20c00017 	ldw	r3,0(r4)
 800d378:	188001cc 	andi	r2,r3,7
 800d37c:	10000826 	beq	r2,zero,800d3a0 <__lo0bits+0x2c>
 800d380:	1880004c 	andi	r2,r3,1
 800d384:	1000211e 	bne	r2,zero,800d40c <__lo0bits+0x98>
 800d388:	1880008c 	andi	r2,r3,2
 800d38c:	1000211e 	bne	r2,zero,800d414 <__lo0bits+0xa0>
 800d390:	1806d0ba 	srli	r3,r3,2
 800d394:	00800084 	movi	r2,2
 800d398:	20c00015 	stw	r3,0(r4)
 800d39c:	f800283a 	ret
 800d3a0:	18bfffcc 	andi	r2,r3,65535
 800d3a4:	10001326 	beq	r2,zero,800d3f4 <__lo0bits+0x80>
 800d3a8:	0005883a 	mov	r2,zero
 800d3ac:	19403fcc 	andi	r5,r3,255
 800d3b0:	2800021e 	bne	r5,zero,800d3bc <__lo0bits+0x48>
 800d3b4:	1806d23a 	srli	r3,r3,8
 800d3b8:	10800204 	addi	r2,r2,8
 800d3bc:	194003cc 	andi	r5,r3,15
 800d3c0:	2800021e 	bne	r5,zero,800d3cc <__lo0bits+0x58>
 800d3c4:	1806d13a 	srli	r3,r3,4
 800d3c8:	10800104 	addi	r2,r2,4
 800d3cc:	194000cc 	andi	r5,r3,3
 800d3d0:	2800021e 	bne	r5,zero,800d3dc <__lo0bits+0x68>
 800d3d4:	1806d0ba 	srli	r3,r3,2
 800d3d8:	10800084 	addi	r2,r2,2
 800d3dc:	1940004c 	andi	r5,r3,1
 800d3e0:	2800081e 	bne	r5,zero,800d404 <__lo0bits+0x90>
 800d3e4:	1806d07a 	srli	r3,r3,1
 800d3e8:	1800051e 	bne	r3,zero,800d400 <__lo0bits+0x8c>
 800d3ec:	00800804 	movi	r2,32
 800d3f0:	f800283a 	ret
 800d3f4:	1806d43a 	srli	r3,r3,16
 800d3f8:	00800404 	movi	r2,16
 800d3fc:	003feb06 	br	800d3ac <__alt_data_end+0xfc00d3ac>
 800d400:	10800044 	addi	r2,r2,1
 800d404:	20c00015 	stw	r3,0(r4)
 800d408:	f800283a 	ret
 800d40c:	0005883a 	mov	r2,zero
 800d410:	f800283a 	ret
 800d414:	1806d07a 	srli	r3,r3,1
 800d418:	00800044 	movi	r2,1
 800d41c:	20c00015 	stw	r3,0(r4)
 800d420:	f800283a 	ret

0800d424 <__i2b>:
 800d424:	defffd04 	addi	sp,sp,-12
 800d428:	dc000015 	stw	r16,0(sp)
 800d42c:	04000044 	movi	r16,1
 800d430:	dc400115 	stw	r17,4(sp)
 800d434:	2823883a 	mov	r17,r5
 800d438:	800b883a 	mov	r5,r16
 800d43c:	dfc00215 	stw	ra,8(sp)
 800d440:	800d0180 	call	800d018 <_Balloc>
 800d444:	14400515 	stw	r17,20(r2)
 800d448:	14000415 	stw	r16,16(r2)
 800d44c:	dfc00217 	ldw	ra,8(sp)
 800d450:	dc400117 	ldw	r17,4(sp)
 800d454:	dc000017 	ldw	r16,0(sp)
 800d458:	dec00304 	addi	sp,sp,12
 800d45c:	f800283a 	ret

0800d460 <__multiply>:
 800d460:	defffa04 	addi	sp,sp,-24
 800d464:	dcc00315 	stw	r19,12(sp)
 800d468:	dc800215 	stw	r18,8(sp)
 800d46c:	34c00417 	ldw	r19,16(r6)
 800d470:	2c800417 	ldw	r18,16(r5)
 800d474:	dd000415 	stw	r20,16(sp)
 800d478:	dc400115 	stw	r17,4(sp)
 800d47c:	dfc00515 	stw	ra,20(sp)
 800d480:	dc000015 	stw	r16,0(sp)
 800d484:	2829883a 	mov	r20,r5
 800d488:	3023883a 	mov	r17,r6
 800d48c:	94c0050e 	bge	r18,r19,800d4a4 <__multiply+0x44>
 800d490:	9007883a 	mov	r3,r18
 800d494:	3029883a 	mov	r20,r6
 800d498:	9825883a 	mov	r18,r19
 800d49c:	2823883a 	mov	r17,r5
 800d4a0:	1827883a 	mov	r19,r3
 800d4a4:	a0800217 	ldw	r2,8(r20)
 800d4a8:	94e1883a 	add	r16,r18,r19
 800d4ac:	a1400117 	ldw	r5,4(r20)
 800d4b0:	1400010e 	bge	r2,r16,800d4b8 <__multiply+0x58>
 800d4b4:	29400044 	addi	r5,r5,1
 800d4b8:	800d0180 	call	800d018 <_Balloc>
 800d4bc:	8415883a 	add	r10,r16,r16
 800d4c0:	12c00504 	addi	r11,r2,20
 800d4c4:	5295883a 	add	r10,r10,r10
 800d4c8:	5a95883a 	add	r10,r11,r10
 800d4cc:	5807883a 	mov	r3,r11
 800d4d0:	5a80032e 	bgeu	r11,r10,800d4e0 <__multiply+0x80>
 800d4d4:	18000015 	stw	zero,0(r3)
 800d4d8:	18c00104 	addi	r3,r3,4
 800d4dc:	1abffd36 	bltu	r3,r10,800d4d4 <__alt_data_end+0xfc00d4d4>
 800d4e0:	9ce7883a 	add	r19,r19,r19
 800d4e4:	94a5883a 	add	r18,r18,r18
 800d4e8:	89800504 	addi	r6,r17,20
 800d4ec:	9ce7883a 	add	r19,r19,r19
 800d4f0:	a3400504 	addi	r13,r20,20
 800d4f4:	94a5883a 	add	r18,r18,r18
 800d4f8:	34d9883a 	add	r12,r6,r19
 800d4fc:	6c93883a 	add	r9,r13,r18
 800d500:	3300422e 	bgeu	r6,r12,800d60c <__multiply+0x1ac>
 800d504:	37c00017 	ldw	ra,0(r6)
 800d508:	fbffffcc 	andi	r15,ra,65535
 800d50c:	78001b26 	beq	r15,zero,800d57c <__multiply+0x11c>
 800d510:	5811883a 	mov	r8,r11
 800d514:	681d883a 	mov	r14,r13
 800d518:	000f883a 	mov	r7,zero
 800d51c:	71000017 	ldw	r4,0(r14)
 800d520:	40c00017 	ldw	r3,0(r8)
 800d524:	73800104 	addi	r14,r14,4
 800d528:	217fffcc 	andi	r5,r4,65535
 800d52c:	2bcb383a 	mul	r5,r5,r15
 800d530:	2008d43a 	srli	r4,r4,16
 800d534:	1c7fffcc 	andi	r17,r3,65535
 800d538:	2c4b883a 	add	r5,r5,r17
 800d53c:	29cb883a 	add	r5,r5,r7
 800d540:	23c9383a 	mul	r4,r4,r15
 800d544:	1806d43a 	srli	r3,r3,16
 800d548:	280ed43a 	srli	r7,r5,16
 800d54c:	297fffcc 	andi	r5,r5,65535
 800d550:	20c7883a 	add	r3,r4,r3
 800d554:	19c7883a 	add	r3,r3,r7
 800d558:	1808943a 	slli	r4,r3,16
 800d55c:	4023883a 	mov	r17,r8
 800d560:	180ed43a 	srli	r7,r3,16
 800d564:	214ab03a 	or	r5,r4,r5
 800d568:	41400015 	stw	r5,0(r8)
 800d56c:	42000104 	addi	r8,r8,4
 800d570:	727fea36 	bltu	r14,r9,800d51c <__alt_data_end+0xfc00d51c>
 800d574:	89c00115 	stw	r7,4(r17)
 800d578:	37c00017 	ldw	ra,0(r6)
 800d57c:	f83ed43a 	srli	ra,ra,16
 800d580:	f8001f26 	beq	ra,zero,800d600 <__multiply+0x1a0>
 800d584:	58c00017 	ldw	r3,0(r11)
 800d588:	681d883a 	mov	r14,r13
 800d58c:	581f883a 	mov	r15,r11
 800d590:	1811883a 	mov	r8,r3
 800d594:	5825883a 	mov	r18,r11
 800d598:	000f883a 	mov	r7,zero
 800d59c:	00000106 	br	800d5a4 <__multiply+0x144>
 800d5a0:	8825883a 	mov	r18,r17
 800d5a4:	7140000b 	ldhu	r5,0(r14)
 800d5a8:	4010d43a 	srli	r8,r8,16
 800d5ac:	193fffcc 	andi	r4,r3,65535
 800d5b0:	2fcb383a 	mul	r5,r5,ra
 800d5b4:	7bc00104 	addi	r15,r15,4
 800d5b8:	73800104 	addi	r14,r14,4
 800d5bc:	2a0b883a 	add	r5,r5,r8
 800d5c0:	29cb883a 	add	r5,r5,r7
 800d5c4:	2806943a 	slli	r3,r5,16
 800d5c8:	94400104 	addi	r17,r18,4
 800d5cc:	280ad43a 	srli	r5,r5,16
 800d5d0:	1908b03a 	or	r4,r3,r4
 800d5d4:	793fff15 	stw	r4,-4(r15)
 800d5d8:	70ffff17 	ldw	r3,-4(r14)
 800d5dc:	8a000017 	ldw	r8,0(r17)
 800d5e0:	1806d43a 	srli	r3,r3,16
 800d5e4:	413fffcc 	andi	r4,r8,65535
 800d5e8:	1fc7383a 	mul	r3,r3,ra
 800d5ec:	1907883a 	add	r3,r3,r4
 800d5f0:	1947883a 	add	r3,r3,r5
 800d5f4:	180ed43a 	srli	r7,r3,16
 800d5f8:	727fe936 	bltu	r14,r9,800d5a0 <__alt_data_end+0xfc00d5a0>
 800d5fc:	90c00115 	stw	r3,4(r18)
 800d600:	31800104 	addi	r6,r6,4
 800d604:	5ac00104 	addi	r11,r11,4
 800d608:	333fbe36 	bltu	r6,r12,800d504 <__alt_data_end+0xfc00d504>
 800d60c:	0400090e 	bge	zero,r16,800d634 <__multiply+0x1d4>
 800d610:	50ffff17 	ldw	r3,-4(r10)
 800d614:	52bfff04 	addi	r10,r10,-4
 800d618:	18000326 	beq	r3,zero,800d628 <__multiply+0x1c8>
 800d61c:	00000506 	br	800d634 <__multiply+0x1d4>
 800d620:	50c00017 	ldw	r3,0(r10)
 800d624:	1800031e 	bne	r3,zero,800d634 <__multiply+0x1d4>
 800d628:	843fffc4 	addi	r16,r16,-1
 800d62c:	52bfff04 	addi	r10,r10,-4
 800d630:	803ffb1e 	bne	r16,zero,800d620 <__alt_data_end+0xfc00d620>
 800d634:	14000415 	stw	r16,16(r2)
 800d638:	dfc00517 	ldw	ra,20(sp)
 800d63c:	dd000417 	ldw	r20,16(sp)
 800d640:	dcc00317 	ldw	r19,12(sp)
 800d644:	dc800217 	ldw	r18,8(sp)
 800d648:	dc400117 	ldw	r17,4(sp)
 800d64c:	dc000017 	ldw	r16,0(sp)
 800d650:	dec00604 	addi	sp,sp,24
 800d654:	f800283a 	ret

0800d658 <__pow5mult>:
 800d658:	defffa04 	addi	sp,sp,-24
 800d65c:	dcc00315 	stw	r19,12(sp)
 800d660:	dc000015 	stw	r16,0(sp)
 800d664:	dfc00515 	stw	ra,20(sp)
 800d668:	dd000415 	stw	r20,16(sp)
 800d66c:	dc800215 	stw	r18,8(sp)
 800d670:	dc400115 	stw	r17,4(sp)
 800d674:	308000cc 	andi	r2,r6,3
 800d678:	3021883a 	mov	r16,r6
 800d67c:	2027883a 	mov	r19,r4
 800d680:	10002f1e 	bne	r2,zero,800d740 <__pow5mult+0xe8>
 800d684:	2825883a 	mov	r18,r5
 800d688:	8021d0ba 	srai	r16,r16,2
 800d68c:	80001a26 	beq	r16,zero,800d6f8 <__pow5mult+0xa0>
 800d690:	9c401217 	ldw	r17,72(r19)
 800d694:	8800061e 	bne	r17,zero,800d6b0 <__pow5mult+0x58>
 800d698:	00003406 	br	800d76c <__pow5mult+0x114>
 800d69c:	8021d07a 	srai	r16,r16,1
 800d6a0:	80001526 	beq	r16,zero,800d6f8 <__pow5mult+0xa0>
 800d6a4:	88800017 	ldw	r2,0(r17)
 800d6a8:	10001c26 	beq	r2,zero,800d71c <__pow5mult+0xc4>
 800d6ac:	1023883a 	mov	r17,r2
 800d6b0:	8080004c 	andi	r2,r16,1
 800d6b4:	103ff926 	beq	r2,zero,800d69c <__alt_data_end+0xfc00d69c>
 800d6b8:	880d883a 	mov	r6,r17
 800d6bc:	900b883a 	mov	r5,r18
 800d6c0:	9809883a 	mov	r4,r19
 800d6c4:	800d4600 	call	800d460 <__multiply>
 800d6c8:	90001b26 	beq	r18,zero,800d738 <__pow5mult+0xe0>
 800d6cc:	91000117 	ldw	r4,4(r18)
 800d6d0:	98c01317 	ldw	r3,76(r19)
 800d6d4:	8021d07a 	srai	r16,r16,1
 800d6d8:	2109883a 	add	r4,r4,r4
 800d6dc:	2109883a 	add	r4,r4,r4
 800d6e0:	1907883a 	add	r3,r3,r4
 800d6e4:	19000017 	ldw	r4,0(r3)
 800d6e8:	91000015 	stw	r4,0(r18)
 800d6ec:	1c800015 	stw	r18,0(r3)
 800d6f0:	1025883a 	mov	r18,r2
 800d6f4:	803feb1e 	bne	r16,zero,800d6a4 <__alt_data_end+0xfc00d6a4>
 800d6f8:	9005883a 	mov	r2,r18
 800d6fc:	dfc00517 	ldw	ra,20(sp)
 800d700:	dd000417 	ldw	r20,16(sp)
 800d704:	dcc00317 	ldw	r19,12(sp)
 800d708:	dc800217 	ldw	r18,8(sp)
 800d70c:	dc400117 	ldw	r17,4(sp)
 800d710:	dc000017 	ldw	r16,0(sp)
 800d714:	dec00604 	addi	sp,sp,24
 800d718:	f800283a 	ret
 800d71c:	880d883a 	mov	r6,r17
 800d720:	880b883a 	mov	r5,r17
 800d724:	9809883a 	mov	r4,r19
 800d728:	800d4600 	call	800d460 <__multiply>
 800d72c:	88800015 	stw	r2,0(r17)
 800d730:	10000015 	stw	zero,0(r2)
 800d734:	003fdd06 	br	800d6ac <__alt_data_end+0xfc00d6ac>
 800d738:	1025883a 	mov	r18,r2
 800d73c:	003fd706 	br	800d69c <__alt_data_end+0xfc00d69c>
 800d740:	10bfffc4 	addi	r2,r2,-1
 800d744:	1085883a 	add	r2,r2,r2
 800d748:	00c20074 	movhi	r3,2049
 800d74c:	18d6a204 	addi	r3,r3,23176
 800d750:	1085883a 	add	r2,r2,r2
 800d754:	1885883a 	add	r2,r3,r2
 800d758:	11800017 	ldw	r6,0(r2)
 800d75c:	000f883a 	mov	r7,zero
 800d760:	800d0e80 	call	800d0e8 <__multadd>
 800d764:	1025883a 	mov	r18,r2
 800d768:	003fc706 	br	800d688 <__alt_data_end+0xfc00d688>
 800d76c:	05000044 	movi	r20,1
 800d770:	a00b883a 	mov	r5,r20
 800d774:	9809883a 	mov	r4,r19
 800d778:	800d0180 	call	800d018 <_Balloc>
 800d77c:	1023883a 	mov	r17,r2
 800d780:	00809c44 	movi	r2,625
 800d784:	88800515 	stw	r2,20(r17)
 800d788:	8d000415 	stw	r20,16(r17)
 800d78c:	9c401215 	stw	r17,72(r19)
 800d790:	88000015 	stw	zero,0(r17)
 800d794:	003fc606 	br	800d6b0 <__alt_data_end+0xfc00d6b0>

0800d798 <__lshift>:
 800d798:	defff904 	addi	sp,sp,-28
 800d79c:	dd400515 	stw	r21,20(sp)
 800d7a0:	dcc00315 	stw	r19,12(sp)
 800d7a4:	302bd17a 	srai	r21,r6,5
 800d7a8:	2cc00417 	ldw	r19,16(r5)
 800d7ac:	28800217 	ldw	r2,8(r5)
 800d7b0:	dd000415 	stw	r20,16(sp)
 800d7b4:	ace7883a 	add	r19,r21,r19
 800d7b8:	dc800215 	stw	r18,8(sp)
 800d7bc:	dc400115 	stw	r17,4(sp)
 800d7c0:	dc000015 	stw	r16,0(sp)
 800d7c4:	dfc00615 	stw	ra,24(sp)
 800d7c8:	9c000044 	addi	r16,r19,1
 800d7cc:	2823883a 	mov	r17,r5
 800d7d0:	3029883a 	mov	r20,r6
 800d7d4:	2025883a 	mov	r18,r4
 800d7d8:	29400117 	ldw	r5,4(r5)
 800d7dc:	1400030e 	bge	r2,r16,800d7ec <__lshift+0x54>
 800d7e0:	1085883a 	add	r2,r2,r2
 800d7e4:	29400044 	addi	r5,r5,1
 800d7e8:	143ffd16 	blt	r2,r16,800d7e0 <__alt_data_end+0xfc00d7e0>
 800d7ec:	9009883a 	mov	r4,r18
 800d7f0:	800d0180 	call	800d018 <_Balloc>
 800d7f4:	10c00504 	addi	r3,r2,20
 800d7f8:	0540070e 	bge	zero,r21,800d818 <__lshift+0x80>
 800d7fc:	ad6b883a 	add	r21,r21,r21
 800d800:	ad6b883a 	add	r21,r21,r21
 800d804:	1809883a 	mov	r4,r3
 800d808:	1d47883a 	add	r3,r3,r21
 800d80c:	20000015 	stw	zero,0(r4)
 800d810:	21000104 	addi	r4,r4,4
 800d814:	193ffd1e 	bne	r3,r4,800d80c <__alt_data_end+0xfc00d80c>
 800d818:	8a000417 	ldw	r8,16(r17)
 800d81c:	89000504 	addi	r4,r17,20
 800d820:	a18007cc 	andi	r6,r20,31
 800d824:	4211883a 	add	r8,r8,r8
 800d828:	4211883a 	add	r8,r8,r8
 800d82c:	2211883a 	add	r8,r4,r8
 800d830:	30002326 	beq	r6,zero,800d8c0 <__lshift+0x128>
 800d834:	02400804 	movi	r9,32
 800d838:	4993c83a 	sub	r9,r9,r6
 800d83c:	000b883a 	mov	r5,zero
 800d840:	21c00017 	ldw	r7,0(r4)
 800d844:	1815883a 	mov	r10,r3
 800d848:	18c00104 	addi	r3,r3,4
 800d84c:	398e983a 	sll	r7,r7,r6
 800d850:	21000104 	addi	r4,r4,4
 800d854:	394ab03a 	or	r5,r7,r5
 800d858:	197fff15 	stw	r5,-4(r3)
 800d85c:	217fff17 	ldw	r5,-4(r4)
 800d860:	2a4ad83a 	srl	r5,r5,r9
 800d864:	223ff636 	bltu	r4,r8,800d840 <__alt_data_end+0xfc00d840>
 800d868:	51400115 	stw	r5,4(r10)
 800d86c:	28001a1e 	bne	r5,zero,800d8d8 <__lshift+0x140>
 800d870:	843fffc4 	addi	r16,r16,-1
 800d874:	14000415 	stw	r16,16(r2)
 800d878:	88000826 	beq	r17,zero,800d89c <__lshift+0x104>
 800d87c:	89000117 	ldw	r4,4(r17)
 800d880:	90c01317 	ldw	r3,76(r18)
 800d884:	2109883a 	add	r4,r4,r4
 800d888:	2109883a 	add	r4,r4,r4
 800d88c:	1907883a 	add	r3,r3,r4
 800d890:	19000017 	ldw	r4,0(r3)
 800d894:	89000015 	stw	r4,0(r17)
 800d898:	1c400015 	stw	r17,0(r3)
 800d89c:	dfc00617 	ldw	ra,24(sp)
 800d8a0:	dd400517 	ldw	r21,20(sp)
 800d8a4:	dd000417 	ldw	r20,16(sp)
 800d8a8:	dcc00317 	ldw	r19,12(sp)
 800d8ac:	dc800217 	ldw	r18,8(sp)
 800d8b0:	dc400117 	ldw	r17,4(sp)
 800d8b4:	dc000017 	ldw	r16,0(sp)
 800d8b8:	dec00704 	addi	sp,sp,28
 800d8bc:	f800283a 	ret
 800d8c0:	21400017 	ldw	r5,0(r4)
 800d8c4:	18c00104 	addi	r3,r3,4
 800d8c8:	21000104 	addi	r4,r4,4
 800d8cc:	197fff15 	stw	r5,-4(r3)
 800d8d0:	223ffb36 	bltu	r4,r8,800d8c0 <__alt_data_end+0xfc00d8c0>
 800d8d4:	003fe606 	br	800d870 <__alt_data_end+0xfc00d870>
 800d8d8:	9c000084 	addi	r16,r19,2
 800d8dc:	003fe406 	br	800d870 <__alt_data_end+0xfc00d870>

0800d8e0 <__mcmp>:
 800d8e0:	20800417 	ldw	r2,16(r4)
 800d8e4:	28c00417 	ldw	r3,16(r5)
 800d8e8:	10c5c83a 	sub	r2,r2,r3
 800d8ec:	1000111e 	bne	r2,zero,800d934 <__mcmp+0x54>
 800d8f0:	18c7883a 	add	r3,r3,r3
 800d8f4:	18c7883a 	add	r3,r3,r3
 800d8f8:	21000504 	addi	r4,r4,20
 800d8fc:	29400504 	addi	r5,r5,20
 800d900:	20c5883a 	add	r2,r4,r3
 800d904:	28cb883a 	add	r5,r5,r3
 800d908:	00000106 	br	800d910 <__mcmp+0x30>
 800d90c:	20800a2e 	bgeu	r4,r2,800d938 <__mcmp+0x58>
 800d910:	10bfff04 	addi	r2,r2,-4
 800d914:	297fff04 	addi	r5,r5,-4
 800d918:	11800017 	ldw	r6,0(r2)
 800d91c:	28c00017 	ldw	r3,0(r5)
 800d920:	30fffa26 	beq	r6,r3,800d90c <__alt_data_end+0xfc00d90c>
 800d924:	30c00236 	bltu	r6,r3,800d930 <__mcmp+0x50>
 800d928:	00800044 	movi	r2,1
 800d92c:	f800283a 	ret
 800d930:	00bfffc4 	movi	r2,-1
 800d934:	f800283a 	ret
 800d938:	0005883a 	mov	r2,zero
 800d93c:	f800283a 	ret

0800d940 <__mdiff>:
 800d940:	28c00417 	ldw	r3,16(r5)
 800d944:	30800417 	ldw	r2,16(r6)
 800d948:	defffa04 	addi	sp,sp,-24
 800d94c:	dcc00315 	stw	r19,12(sp)
 800d950:	dc800215 	stw	r18,8(sp)
 800d954:	dfc00515 	stw	ra,20(sp)
 800d958:	dd000415 	stw	r20,16(sp)
 800d95c:	dc400115 	stw	r17,4(sp)
 800d960:	dc000015 	stw	r16,0(sp)
 800d964:	1887c83a 	sub	r3,r3,r2
 800d968:	2825883a 	mov	r18,r5
 800d96c:	3027883a 	mov	r19,r6
 800d970:	1800141e 	bne	r3,zero,800d9c4 <__mdiff+0x84>
 800d974:	1085883a 	add	r2,r2,r2
 800d978:	1085883a 	add	r2,r2,r2
 800d97c:	2a000504 	addi	r8,r5,20
 800d980:	34000504 	addi	r16,r6,20
 800d984:	4087883a 	add	r3,r8,r2
 800d988:	8085883a 	add	r2,r16,r2
 800d98c:	00000106 	br	800d994 <__mdiff+0x54>
 800d990:	40c0592e 	bgeu	r8,r3,800daf8 <__mdiff+0x1b8>
 800d994:	18ffff04 	addi	r3,r3,-4
 800d998:	10bfff04 	addi	r2,r2,-4
 800d99c:	19c00017 	ldw	r7,0(r3)
 800d9a0:	11400017 	ldw	r5,0(r2)
 800d9a4:	397ffa26 	beq	r7,r5,800d990 <__alt_data_end+0xfc00d990>
 800d9a8:	3940592e 	bgeu	r7,r5,800db10 <__mdiff+0x1d0>
 800d9ac:	9005883a 	mov	r2,r18
 800d9b0:	4023883a 	mov	r17,r8
 800d9b4:	9825883a 	mov	r18,r19
 800d9b8:	05000044 	movi	r20,1
 800d9bc:	1027883a 	mov	r19,r2
 800d9c0:	00000406 	br	800d9d4 <__mdiff+0x94>
 800d9c4:	18005616 	blt	r3,zero,800db20 <__mdiff+0x1e0>
 800d9c8:	34400504 	addi	r17,r6,20
 800d9cc:	2c000504 	addi	r16,r5,20
 800d9d0:	0029883a 	mov	r20,zero
 800d9d4:	91400117 	ldw	r5,4(r18)
 800d9d8:	800d0180 	call	800d018 <_Balloc>
 800d9dc:	92400417 	ldw	r9,16(r18)
 800d9e0:	9b000417 	ldw	r12,16(r19)
 800d9e4:	12c00504 	addi	r11,r2,20
 800d9e8:	4a51883a 	add	r8,r9,r9
 800d9ec:	6319883a 	add	r12,r12,r12
 800d9f0:	4211883a 	add	r8,r8,r8
 800d9f4:	6319883a 	add	r12,r12,r12
 800d9f8:	15000315 	stw	r20,12(r2)
 800d9fc:	8211883a 	add	r8,r16,r8
 800da00:	8b19883a 	add	r12,r17,r12
 800da04:	0007883a 	mov	r3,zero
 800da08:	81400017 	ldw	r5,0(r16)
 800da0c:	89c00017 	ldw	r7,0(r17)
 800da10:	59800104 	addi	r6,r11,4
 800da14:	293fffcc 	andi	r4,r5,65535
 800da18:	20c7883a 	add	r3,r4,r3
 800da1c:	393fffcc 	andi	r4,r7,65535
 800da20:	1909c83a 	sub	r4,r3,r4
 800da24:	280ad43a 	srli	r5,r5,16
 800da28:	380ed43a 	srli	r7,r7,16
 800da2c:	2007d43a 	srai	r3,r4,16
 800da30:	213fffcc 	andi	r4,r4,65535
 800da34:	29cbc83a 	sub	r5,r5,r7
 800da38:	28c7883a 	add	r3,r5,r3
 800da3c:	180a943a 	slli	r5,r3,16
 800da40:	8c400104 	addi	r17,r17,4
 800da44:	84000104 	addi	r16,r16,4
 800da48:	2908b03a 	or	r4,r5,r4
 800da4c:	59000015 	stw	r4,0(r11)
 800da50:	1807d43a 	srai	r3,r3,16
 800da54:	3015883a 	mov	r10,r6
 800da58:	3017883a 	mov	r11,r6
 800da5c:	8b3fea36 	bltu	r17,r12,800da08 <__alt_data_end+0xfc00da08>
 800da60:	8200162e 	bgeu	r16,r8,800dabc <__mdiff+0x17c>
 800da64:	8017883a 	mov	r11,r16
 800da68:	59400017 	ldw	r5,0(r11)
 800da6c:	31800104 	addi	r6,r6,4
 800da70:	5ac00104 	addi	r11,r11,4
 800da74:	293fffcc 	andi	r4,r5,65535
 800da78:	20c7883a 	add	r3,r4,r3
 800da7c:	280ed43a 	srli	r7,r5,16
 800da80:	180bd43a 	srai	r5,r3,16
 800da84:	193fffcc 	andi	r4,r3,65535
 800da88:	3947883a 	add	r3,r7,r5
 800da8c:	180a943a 	slli	r5,r3,16
 800da90:	1807d43a 	srai	r3,r3,16
 800da94:	2908b03a 	or	r4,r5,r4
 800da98:	313fff15 	stw	r4,-4(r6)
 800da9c:	5a3ff236 	bltu	r11,r8,800da68 <__alt_data_end+0xfc00da68>
 800daa0:	0406303a 	nor	r3,zero,r16
 800daa4:	1a07883a 	add	r3,r3,r8
 800daa8:	1806d0ba 	srli	r3,r3,2
 800daac:	18c00044 	addi	r3,r3,1
 800dab0:	18c7883a 	add	r3,r3,r3
 800dab4:	18c7883a 	add	r3,r3,r3
 800dab8:	50d5883a 	add	r10,r10,r3
 800dabc:	50ffff04 	addi	r3,r10,-4
 800dac0:	2000041e 	bne	r4,zero,800dad4 <__mdiff+0x194>
 800dac4:	18ffff04 	addi	r3,r3,-4
 800dac8:	19000017 	ldw	r4,0(r3)
 800dacc:	4a7fffc4 	addi	r9,r9,-1
 800dad0:	203ffc26 	beq	r4,zero,800dac4 <__alt_data_end+0xfc00dac4>
 800dad4:	12400415 	stw	r9,16(r2)
 800dad8:	dfc00517 	ldw	ra,20(sp)
 800dadc:	dd000417 	ldw	r20,16(sp)
 800dae0:	dcc00317 	ldw	r19,12(sp)
 800dae4:	dc800217 	ldw	r18,8(sp)
 800dae8:	dc400117 	ldw	r17,4(sp)
 800daec:	dc000017 	ldw	r16,0(sp)
 800daf0:	dec00604 	addi	sp,sp,24
 800daf4:	f800283a 	ret
 800daf8:	000b883a 	mov	r5,zero
 800dafc:	800d0180 	call	800d018 <_Balloc>
 800db00:	00c00044 	movi	r3,1
 800db04:	10c00415 	stw	r3,16(r2)
 800db08:	10000515 	stw	zero,20(r2)
 800db0c:	003ff206 	br	800dad8 <__alt_data_end+0xfc00dad8>
 800db10:	8023883a 	mov	r17,r16
 800db14:	0029883a 	mov	r20,zero
 800db18:	4021883a 	mov	r16,r8
 800db1c:	003fad06 	br	800d9d4 <__alt_data_end+0xfc00d9d4>
 800db20:	9005883a 	mov	r2,r18
 800db24:	94400504 	addi	r17,r18,20
 800db28:	9c000504 	addi	r16,r19,20
 800db2c:	9825883a 	mov	r18,r19
 800db30:	05000044 	movi	r20,1
 800db34:	1027883a 	mov	r19,r2
 800db38:	003fa606 	br	800d9d4 <__alt_data_end+0xfc00d9d4>

0800db3c <__ulp>:
 800db3c:	295ffc2c 	andhi	r5,r5,32752
 800db40:	00bf3034 	movhi	r2,64704
 800db44:	2887883a 	add	r3,r5,r2
 800db48:	00c0020e 	bge	zero,r3,800db54 <__ulp+0x18>
 800db4c:	0005883a 	mov	r2,zero
 800db50:	f800283a 	ret
 800db54:	00c7c83a 	sub	r3,zero,r3
 800db58:	1807d53a 	srai	r3,r3,20
 800db5c:	008004c4 	movi	r2,19
 800db60:	10c00b0e 	bge	r2,r3,800db90 <__ulp+0x54>
 800db64:	18bffb04 	addi	r2,r3,-20
 800db68:	01000784 	movi	r4,30
 800db6c:	0007883a 	mov	r3,zero
 800db70:	20800516 	blt	r4,r2,800db88 <__ulp+0x4c>
 800db74:	010007c4 	movi	r4,31
 800db78:	2089c83a 	sub	r4,r4,r2
 800db7c:	00800044 	movi	r2,1
 800db80:	1104983a 	sll	r2,r2,r4
 800db84:	f800283a 	ret
 800db88:	00800044 	movi	r2,1
 800db8c:	f800283a 	ret
 800db90:	01400234 	movhi	r5,8
 800db94:	28c7d83a 	sra	r3,r5,r3
 800db98:	0005883a 	mov	r2,zero
 800db9c:	f800283a 	ret

0800dba0 <__b2d>:
 800dba0:	defffa04 	addi	sp,sp,-24
 800dba4:	dc000015 	stw	r16,0(sp)
 800dba8:	24000417 	ldw	r16,16(r4)
 800dbac:	dc400115 	stw	r17,4(sp)
 800dbb0:	24400504 	addi	r17,r4,20
 800dbb4:	8421883a 	add	r16,r16,r16
 800dbb8:	8421883a 	add	r16,r16,r16
 800dbbc:	8c21883a 	add	r16,r17,r16
 800dbc0:	dc800215 	stw	r18,8(sp)
 800dbc4:	84bfff17 	ldw	r18,-4(r16)
 800dbc8:	dd000415 	stw	r20,16(sp)
 800dbcc:	dcc00315 	stw	r19,12(sp)
 800dbd0:	9009883a 	mov	r4,r18
 800dbd4:	2829883a 	mov	r20,r5
 800dbd8:	dfc00515 	stw	ra,20(sp)
 800dbdc:	800d30c0 	call	800d30c <__hi0bits>
 800dbe0:	00c00804 	movi	r3,32
 800dbe4:	1889c83a 	sub	r4,r3,r2
 800dbe8:	a1000015 	stw	r4,0(r20)
 800dbec:	01000284 	movi	r4,10
 800dbf0:	84ffff04 	addi	r19,r16,-4
 800dbf4:	20801216 	blt	r4,r2,800dc40 <__b2d+0xa0>
 800dbf8:	018002c4 	movi	r6,11
 800dbfc:	308dc83a 	sub	r6,r6,r2
 800dc00:	9186d83a 	srl	r3,r18,r6
 800dc04:	18cffc34 	orhi	r3,r3,16368
 800dc08:	8cc0212e 	bgeu	r17,r19,800dc90 <__b2d+0xf0>
 800dc0c:	813ffe17 	ldw	r4,-8(r16)
 800dc10:	218cd83a 	srl	r6,r4,r6
 800dc14:	10800544 	addi	r2,r2,21
 800dc18:	9084983a 	sll	r2,r18,r2
 800dc1c:	1184b03a 	or	r2,r2,r6
 800dc20:	dfc00517 	ldw	ra,20(sp)
 800dc24:	dd000417 	ldw	r20,16(sp)
 800dc28:	dcc00317 	ldw	r19,12(sp)
 800dc2c:	dc800217 	ldw	r18,8(sp)
 800dc30:	dc400117 	ldw	r17,4(sp)
 800dc34:	dc000017 	ldw	r16,0(sp)
 800dc38:	dec00604 	addi	sp,sp,24
 800dc3c:	f800283a 	ret
 800dc40:	8cc00f2e 	bgeu	r17,r19,800dc80 <__b2d+0xe0>
 800dc44:	117ffd44 	addi	r5,r2,-11
 800dc48:	80bffe17 	ldw	r2,-8(r16)
 800dc4c:	28000e26 	beq	r5,zero,800dc88 <__b2d+0xe8>
 800dc50:	1949c83a 	sub	r4,r3,r5
 800dc54:	9164983a 	sll	r18,r18,r5
 800dc58:	1106d83a 	srl	r3,r2,r4
 800dc5c:	81bffe04 	addi	r6,r16,-8
 800dc60:	948ffc34 	orhi	r18,r18,16368
 800dc64:	90c6b03a 	or	r3,r18,r3
 800dc68:	89800e2e 	bgeu	r17,r6,800dca4 <__b2d+0x104>
 800dc6c:	81bffd17 	ldw	r6,-12(r16)
 800dc70:	1144983a 	sll	r2,r2,r5
 800dc74:	310ad83a 	srl	r5,r6,r4
 800dc78:	2884b03a 	or	r2,r5,r2
 800dc7c:	003fe806 	br	800dc20 <__alt_data_end+0xfc00dc20>
 800dc80:	10bffd44 	addi	r2,r2,-11
 800dc84:	1000041e 	bne	r2,zero,800dc98 <__b2d+0xf8>
 800dc88:	90cffc34 	orhi	r3,r18,16368
 800dc8c:	003fe406 	br	800dc20 <__alt_data_end+0xfc00dc20>
 800dc90:	000d883a 	mov	r6,zero
 800dc94:	003fdf06 	br	800dc14 <__alt_data_end+0xfc00dc14>
 800dc98:	90a4983a 	sll	r18,r18,r2
 800dc9c:	0005883a 	mov	r2,zero
 800dca0:	003ff906 	br	800dc88 <__alt_data_end+0xfc00dc88>
 800dca4:	1144983a 	sll	r2,r2,r5
 800dca8:	003fdd06 	br	800dc20 <__alt_data_end+0xfc00dc20>

0800dcac <__d2b>:
 800dcac:	defff804 	addi	sp,sp,-32
 800dcb0:	dc000215 	stw	r16,8(sp)
 800dcb4:	3021883a 	mov	r16,r6
 800dcb8:	dc400315 	stw	r17,12(sp)
 800dcbc:	8022907a 	slli	r17,r16,1
 800dcc0:	dd000615 	stw	r20,24(sp)
 800dcc4:	2829883a 	mov	r20,r5
 800dcc8:	01400044 	movi	r5,1
 800dccc:	dcc00515 	stw	r19,20(sp)
 800dcd0:	dc800415 	stw	r18,16(sp)
 800dcd4:	dfc00715 	stw	ra,28(sp)
 800dcd8:	3825883a 	mov	r18,r7
 800dcdc:	8822d57a 	srli	r17,r17,21
 800dce0:	800d0180 	call	800d018 <_Balloc>
 800dce4:	1027883a 	mov	r19,r2
 800dce8:	00800434 	movhi	r2,16
 800dcec:	10bfffc4 	addi	r2,r2,-1
 800dcf0:	808c703a 	and	r6,r16,r2
 800dcf4:	88000126 	beq	r17,zero,800dcfc <__d2b+0x50>
 800dcf8:	31800434 	orhi	r6,r6,16
 800dcfc:	d9800015 	stw	r6,0(sp)
 800dd00:	a0002426 	beq	r20,zero,800dd94 <__d2b+0xe8>
 800dd04:	d9000104 	addi	r4,sp,4
 800dd08:	dd000115 	stw	r20,4(sp)
 800dd0c:	800d3740 	call	800d374 <__lo0bits>
 800dd10:	d8c00017 	ldw	r3,0(sp)
 800dd14:	10002f1e 	bne	r2,zero,800ddd4 <__d2b+0x128>
 800dd18:	d9000117 	ldw	r4,4(sp)
 800dd1c:	99000515 	stw	r4,20(r19)
 800dd20:	1821003a 	cmpeq	r16,r3,zero
 800dd24:	01000084 	movi	r4,2
 800dd28:	2421c83a 	sub	r16,r4,r16
 800dd2c:	98c00615 	stw	r3,24(r19)
 800dd30:	9c000415 	stw	r16,16(r19)
 800dd34:	88001f1e 	bne	r17,zero,800ddb4 <__d2b+0x108>
 800dd38:	10bef384 	addi	r2,r2,-1074
 800dd3c:	90800015 	stw	r2,0(r18)
 800dd40:	00900034 	movhi	r2,16384
 800dd44:	10bfffc4 	addi	r2,r2,-1
 800dd48:	8085883a 	add	r2,r16,r2
 800dd4c:	1085883a 	add	r2,r2,r2
 800dd50:	1085883a 	add	r2,r2,r2
 800dd54:	9885883a 	add	r2,r19,r2
 800dd58:	11000517 	ldw	r4,20(r2)
 800dd5c:	8020917a 	slli	r16,r16,5
 800dd60:	800d30c0 	call	800d30c <__hi0bits>
 800dd64:	d8c00817 	ldw	r3,32(sp)
 800dd68:	8085c83a 	sub	r2,r16,r2
 800dd6c:	18800015 	stw	r2,0(r3)
 800dd70:	9805883a 	mov	r2,r19
 800dd74:	dfc00717 	ldw	ra,28(sp)
 800dd78:	dd000617 	ldw	r20,24(sp)
 800dd7c:	dcc00517 	ldw	r19,20(sp)
 800dd80:	dc800417 	ldw	r18,16(sp)
 800dd84:	dc400317 	ldw	r17,12(sp)
 800dd88:	dc000217 	ldw	r16,8(sp)
 800dd8c:	dec00804 	addi	sp,sp,32
 800dd90:	f800283a 	ret
 800dd94:	d809883a 	mov	r4,sp
 800dd98:	800d3740 	call	800d374 <__lo0bits>
 800dd9c:	d8c00017 	ldw	r3,0(sp)
 800dda0:	04000044 	movi	r16,1
 800dda4:	9c000415 	stw	r16,16(r19)
 800dda8:	98c00515 	stw	r3,20(r19)
 800ddac:	10800804 	addi	r2,r2,32
 800ddb0:	883fe126 	beq	r17,zero,800dd38 <__alt_data_end+0xfc00dd38>
 800ddb4:	00c00d44 	movi	r3,53
 800ddb8:	8c7ef344 	addi	r17,r17,-1075
 800ddbc:	88a3883a 	add	r17,r17,r2
 800ddc0:	1885c83a 	sub	r2,r3,r2
 800ddc4:	d8c00817 	ldw	r3,32(sp)
 800ddc8:	94400015 	stw	r17,0(r18)
 800ddcc:	18800015 	stw	r2,0(r3)
 800ddd0:	003fe706 	br	800dd70 <__alt_data_end+0xfc00dd70>
 800ddd4:	01000804 	movi	r4,32
 800ddd8:	2089c83a 	sub	r4,r4,r2
 800dddc:	1908983a 	sll	r4,r3,r4
 800dde0:	d9400117 	ldw	r5,4(sp)
 800dde4:	1886d83a 	srl	r3,r3,r2
 800dde8:	2148b03a 	or	r4,r4,r5
 800ddec:	99000515 	stw	r4,20(r19)
 800ddf0:	d8c00015 	stw	r3,0(sp)
 800ddf4:	003fca06 	br	800dd20 <__alt_data_end+0xfc00dd20>

0800ddf8 <__ratio>:
 800ddf8:	defff904 	addi	sp,sp,-28
 800ddfc:	dc400315 	stw	r17,12(sp)
 800de00:	2823883a 	mov	r17,r5
 800de04:	d9400104 	addi	r5,sp,4
 800de08:	dfc00615 	stw	ra,24(sp)
 800de0c:	dcc00515 	stw	r19,20(sp)
 800de10:	dc800415 	stw	r18,16(sp)
 800de14:	2027883a 	mov	r19,r4
 800de18:	dc000215 	stw	r16,8(sp)
 800de1c:	800dba00 	call	800dba0 <__b2d>
 800de20:	d80b883a 	mov	r5,sp
 800de24:	8809883a 	mov	r4,r17
 800de28:	1025883a 	mov	r18,r2
 800de2c:	1821883a 	mov	r16,r3
 800de30:	800dba00 	call	800dba0 <__b2d>
 800de34:	8a000417 	ldw	r8,16(r17)
 800de38:	99000417 	ldw	r4,16(r19)
 800de3c:	d9400117 	ldw	r5,4(sp)
 800de40:	2209c83a 	sub	r4,r4,r8
 800de44:	2010917a 	slli	r8,r4,5
 800de48:	d9000017 	ldw	r4,0(sp)
 800de4c:	2909c83a 	sub	r4,r5,r4
 800de50:	4109883a 	add	r4,r8,r4
 800de54:	01000e0e 	bge	zero,r4,800de90 <__ratio+0x98>
 800de58:	2008953a 	slli	r4,r4,20
 800de5c:	2421883a 	add	r16,r4,r16
 800de60:	100d883a 	mov	r6,r2
 800de64:	180f883a 	mov	r7,r3
 800de68:	9009883a 	mov	r4,r18
 800de6c:	800b883a 	mov	r5,r16
 800de70:	80051a40 	call	80051a4 <__divdf3>
 800de74:	dfc00617 	ldw	ra,24(sp)
 800de78:	dcc00517 	ldw	r19,20(sp)
 800de7c:	dc800417 	ldw	r18,16(sp)
 800de80:	dc400317 	ldw	r17,12(sp)
 800de84:	dc000217 	ldw	r16,8(sp)
 800de88:	dec00704 	addi	sp,sp,28
 800de8c:	f800283a 	ret
 800de90:	2008953a 	slli	r4,r4,20
 800de94:	1907c83a 	sub	r3,r3,r4
 800de98:	003ff106 	br	800de60 <__alt_data_end+0xfc00de60>

0800de9c <_mprec_log10>:
 800de9c:	defffe04 	addi	sp,sp,-8
 800dea0:	dc000015 	stw	r16,0(sp)
 800dea4:	dfc00115 	stw	ra,4(sp)
 800dea8:	008005c4 	movi	r2,23
 800deac:	2021883a 	mov	r16,r4
 800deb0:	11000d0e 	bge	r2,r4,800dee8 <_mprec_log10+0x4c>
 800deb4:	0005883a 	mov	r2,zero
 800deb8:	00cffc34 	movhi	r3,16368
 800debc:	843fffc4 	addi	r16,r16,-1
 800dec0:	000d883a 	mov	r6,zero
 800dec4:	01d00934 	movhi	r7,16420
 800dec8:	1009883a 	mov	r4,r2
 800decc:	180b883a 	mov	r5,r3
 800ded0:	8005ce40 	call	8005ce4 <__muldf3>
 800ded4:	803ff91e 	bne	r16,zero,800debc <__alt_data_end+0xfc00debc>
 800ded8:	dfc00117 	ldw	ra,4(sp)
 800dedc:	dc000017 	ldw	r16,0(sp)
 800dee0:	dec00204 	addi	sp,sp,8
 800dee4:	f800283a 	ret
 800dee8:	202090fa 	slli	r16,r4,3
 800deec:	00820074 	movhi	r2,2049
 800def0:	1096b904 	addi	r2,r2,23268
 800def4:	1421883a 	add	r16,r2,r16
 800def8:	80800017 	ldw	r2,0(r16)
 800defc:	80c00117 	ldw	r3,4(r16)
 800df00:	dfc00117 	ldw	ra,4(sp)
 800df04:	dc000017 	ldw	r16,0(sp)
 800df08:	dec00204 	addi	sp,sp,8
 800df0c:	f800283a 	ret

0800df10 <__copybits>:
 800df10:	297fffc4 	addi	r5,r5,-1
 800df14:	280fd17a 	srai	r7,r5,5
 800df18:	30c00417 	ldw	r3,16(r6)
 800df1c:	30800504 	addi	r2,r6,20
 800df20:	39c00044 	addi	r7,r7,1
 800df24:	18c7883a 	add	r3,r3,r3
 800df28:	39cf883a 	add	r7,r7,r7
 800df2c:	18c7883a 	add	r3,r3,r3
 800df30:	39cf883a 	add	r7,r7,r7
 800df34:	10c7883a 	add	r3,r2,r3
 800df38:	21cf883a 	add	r7,r4,r7
 800df3c:	10c00d2e 	bgeu	r2,r3,800df74 <__copybits+0x64>
 800df40:	200b883a 	mov	r5,r4
 800df44:	12000017 	ldw	r8,0(r2)
 800df48:	29400104 	addi	r5,r5,4
 800df4c:	10800104 	addi	r2,r2,4
 800df50:	2a3fff15 	stw	r8,-4(r5)
 800df54:	10fffb36 	bltu	r2,r3,800df44 <__alt_data_end+0xfc00df44>
 800df58:	1985c83a 	sub	r2,r3,r6
 800df5c:	10bffac4 	addi	r2,r2,-21
 800df60:	1004d0ba 	srli	r2,r2,2
 800df64:	10800044 	addi	r2,r2,1
 800df68:	1085883a 	add	r2,r2,r2
 800df6c:	1085883a 	add	r2,r2,r2
 800df70:	2089883a 	add	r4,r4,r2
 800df74:	21c0032e 	bgeu	r4,r7,800df84 <__copybits+0x74>
 800df78:	20000015 	stw	zero,0(r4)
 800df7c:	21000104 	addi	r4,r4,4
 800df80:	21fffd36 	bltu	r4,r7,800df78 <__alt_data_end+0xfc00df78>
 800df84:	f800283a 	ret

0800df88 <__any_on>:
 800df88:	20c00417 	ldw	r3,16(r4)
 800df8c:	2805d17a 	srai	r2,r5,5
 800df90:	21000504 	addi	r4,r4,20
 800df94:	18800d0e 	bge	r3,r2,800dfcc <__any_on+0x44>
 800df98:	18c7883a 	add	r3,r3,r3
 800df9c:	18c7883a 	add	r3,r3,r3
 800dfa0:	20c7883a 	add	r3,r4,r3
 800dfa4:	20c0192e 	bgeu	r4,r3,800e00c <__any_on+0x84>
 800dfa8:	18bfff17 	ldw	r2,-4(r3)
 800dfac:	18ffff04 	addi	r3,r3,-4
 800dfb0:	1000041e 	bne	r2,zero,800dfc4 <__any_on+0x3c>
 800dfb4:	20c0142e 	bgeu	r4,r3,800e008 <__any_on+0x80>
 800dfb8:	18ffff04 	addi	r3,r3,-4
 800dfbc:	19400017 	ldw	r5,0(r3)
 800dfc0:	283ffc26 	beq	r5,zero,800dfb4 <__alt_data_end+0xfc00dfb4>
 800dfc4:	00800044 	movi	r2,1
 800dfc8:	f800283a 	ret
 800dfcc:	10c00a0e 	bge	r2,r3,800dff8 <__any_on+0x70>
 800dfd0:	1085883a 	add	r2,r2,r2
 800dfd4:	1085883a 	add	r2,r2,r2
 800dfd8:	294007cc 	andi	r5,r5,31
 800dfdc:	2087883a 	add	r3,r4,r2
 800dfe0:	283ff026 	beq	r5,zero,800dfa4 <__alt_data_end+0xfc00dfa4>
 800dfe4:	19800017 	ldw	r6,0(r3)
 800dfe8:	3144d83a 	srl	r2,r6,r5
 800dfec:	114a983a 	sll	r5,r2,r5
 800dff0:	317ff41e 	bne	r6,r5,800dfc4 <__alt_data_end+0xfc00dfc4>
 800dff4:	003feb06 	br	800dfa4 <__alt_data_end+0xfc00dfa4>
 800dff8:	1085883a 	add	r2,r2,r2
 800dffc:	1085883a 	add	r2,r2,r2
 800e000:	2087883a 	add	r3,r4,r2
 800e004:	003fe706 	br	800dfa4 <__alt_data_end+0xfc00dfa4>
 800e008:	f800283a 	ret
 800e00c:	0005883a 	mov	r2,zero
 800e010:	f800283a 	ret

0800e014 <_realloc_r>:
 800e014:	defff604 	addi	sp,sp,-40
 800e018:	dc800215 	stw	r18,8(sp)
 800e01c:	dfc00915 	stw	ra,36(sp)
 800e020:	df000815 	stw	fp,32(sp)
 800e024:	ddc00715 	stw	r23,28(sp)
 800e028:	dd800615 	stw	r22,24(sp)
 800e02c:	dd400515 	stw	r21,20(sp)
 800e030:	dd000415 	stw	r20,16(sp)
 800e034:	dcc00315 	stw	r19,12(sp)
 800e038:	dc400115 	stw	r17,4(sp)
 800e03c:	dc000015 	stw	r16,0(sp)
 800e040:	3025883a 	mov	r18,r6
 800e044:	2800b726 	beq	r5,zero,800e324 <_realloc_r+0x310>
 800e048:	282b883a 	mov	r21,r5
 800e04c:	2029883a 	mov	r20,r4
 800e050:	80118340 	call	8011834 <__malloc_lock>
 800e054:	a8bfff17 	ldw	r2,-4(r21)
 800e058:	043fff04 	movi	r16,-4
 800e05c:	90c002c4 	addi	r3,r18,11
 800e060:	01000584 	movi	r4,22
 800e064:	acfffe04 	addi	r19,r21,-8
 800e068:	1420703a 	and	r16,r2,r16
 800e06c:	20c0332e 	bgeu	r4,r3,800e13c <_realloc_r+0x128>
 800e070:	047ffe04 	movi	r17,-8
 800e074:	1c62703a 	and	r17,r3,r17
 800e078:	8807883a 	mov	r3,r17
 800e07c:	88005816 	blt	r17,zero,800e1e0 <_realloc_r+0x1cc>
 800e080:	8c805736 	bltu	r17,r18,800e1e0 <_realloc_r+0x1cc>
 800e084:	80c0300e 	bge	r16,r3,800e148 <_realloc_r+0x134>
 800e088:	07020074 	movhi	fp,2049
 800e08c:	e7183e04 	addi	fp,fp,24824
 800e090:	e1c00217 	ldw	r7,8(fp)
 800e094:	9c09883a 	add	r4,r19,r16
 800e098:	22000117 	ldw	r8,4(r4)
 800e09c:	21c06326 	beq	r4,r7,800e22c <_realloc_r+0x218>
 800e0a0:	017fff84 	movi	r5,-2
 800e0a4:	414a703a 	and	r5,r8,r5
 800e0a8:	214b883a 	add	r5,r4,r5
 800e0ac:	29800117 	ldw	r6,4(r5)
 800e0b0:	3180004c 	andi	r6,r6,1
 800e0b4:	30003f26 	beq	r6,zero,800e1b4 <_realloc_r+0x1a0>
 800e0b8:	1080004c 	andi	r2,r2,1
 800e0bc:	10008326 	beq	r2,zero,800e2cc <_realloc_r+0x2b8>
 800e0c0:	900b883a 	mov	r5,r18
 800e0c4:	a009883a 	mov	r4,r20
 800e0c8:	800c35c0 	call	800c35c <_malloc_r>
 800e0cc:	1025883a 	mov	r18,r2
 800e0d0:	10011e26 	beq	r2,zero,800e54c <_realloc_r+0x538>
 800e0d4:	a93fff17 	ldw	r4,-4(r21)
 800e0d8:	10fffe04 	addi	r3,r2,-8
 800e0dc:	00bfff84 	movi	r2,-2
 800e0e0:	2084703a 	and	r2,r4,r2
 800e0e4:	9885883a 	add	r2,r19,r2
 800e0e8:	1880ee26 	beq	r3,r2,800e4a4 <_realloc_r+0x490>
 800e0ec:	81bfff04 	addi	r6,r16,-4
 800e0f0:	00800904 	movi	r2,36
 800e0f4:	1180b836 	bltu	r2,r6,800e3d8 <_realloc_r+0x3c4>
 800e0f8:	00c004c4 	movi	r3,19
 800e0fc:	19809636 	bltu	r3,r6,800e358 <_realloc_r+0x344>
 800e100:	9005883a 	mov	r2,r18
 800e104:	a807883a 	mov	r3,r21
 800e108:	19000017 	ldw	r4,0(r3)
 800e10c:	11000015 	stw	r4,0(r2)
 800e110:	19000117 	ldw	r4,4(r3)
 800e114:	11000115 	stw	r4,4(r2)
 800e118:	18c00217 	ldw	r3,8(r3)
 800e11c:	10c00215 	stw	r3,8(r2)
 800e120:	a80b883a 	mov	r5,r21
 800e124:	a009883a 	mov	r4,r20
 800e128:	800b7700 	call	800b770 <_free_r>
 800e12c:	a009883a 	mov	r4,r20
 800e130:	80118580 	call	8011858 <__malloc_unlock>
 800e134:	9005883a 	mov	r2,r18
 800e138:	00001206 	br	800e184 <_realloc_r+0x170>
 800e13c:	00c00404 	movi	r3,16
 800e140:	1823883a 	mov	r17,r3
 800e144:	003fce06 	br	800e080 <__alt_data_end+0xfc00e080>
 800e148:	a825883a 	mov	r18,r21
 800e14c:	8445c83a 	sub	r2,r16,r17
 800e150:	00c003c4 	movi	r3,15
 800e154:	18802636 	bltu	r3,r2,800e1f0 <_realloc_r+0x1dc>
 800e158:	99800117 	ldw	r6,4(r19)
 800e15c:	9c07883a 	add	r3,r19,r16
 800e160:	3180004c 	andi	r6,r6,1
 800e164:	3420b03a 	or	r16,r6,r16
 800e168:	9c000115 	stw	r16,4(r19)
 800e16c:	18800117 	ldw	r2,4(r3)
 800e170:	10800054 	ori	r2,r2,1
 800e174:	18800115 	stw	r2,4(r3)
 800e178:	a009883a 	mov	r4,r20
 800e17c:	80118580 	call	8011858 <__malloc_unlock>
 800e180:	9005883a 	mov	r2,r18
 800e184:	dfc00917 	ldw	ra,36(sp)
 800e188:	df000817 	ldw	fp,32(sp)
 800e18c:	ddc00717 	ldw	r23,28(sp)
 800e190:	dd800617 	ldw	r22,24(sp)
 800e194:	dd400517 	ldw	r21,20(sp)
 800e198:	dd000417 	ldw	r20,16(sp)
 800e19c:	dcc00317 	ldw	r19,12(sp)
 800e1a0:	dc800217 	ldw	r18,8(sp)
 800e1a4:	dc400117 	ldw	r17,4(sp)
 800e1a8:	dc000017 	ldw	r16,0(sp)
 800e1ac:	dec00a04 	addi	sp,sp,40
 800e1b0:	f800283a 	ret
 800e1b4:	017fff04 	movi	r5,-4
 800e1b8:	414a703a 	and	r5,r8,r5
 800e1bc:	814d883a 	add	r6,r16,r5
 800e1c0:	30c01f16 	blt	r6,r3,800e240 <_realloc_r+0x22c>
 800e1c4:	20800317 	ldw	r2,12(r4)
 800e1c8:	20c00217 	ldw	r3,8(r4)
 800e1cc:	a825883a 	mov	r18,r21
 800e1d0:	3021883a 	mov	r16,r6
 800e1d4:	18800315 	stw	r2,12(r3)
 800e1d8:	10c00215 	stw	r3,8(r2)
 800e1dc:	003fdb06 	br	800e14c <__alt_data_end+0xfc00e14c>
 800e1e0:	00800304 	movi	r2,12
 800e1e4:	a0800015 	stw	r2,0(r20)
 800e1e8:	0005883a 	mov	r2,zero
 800e1ec:	003fe506 	br	800e184 <__alt_data_end+0xfc00e184>
 800e1f0:	98c00117 	ldw	r3,4(r19)
 800e1f4:	9c4b883a 	add	r5,r19,r17
 800e1f8:	11000054 	ori	r4,r2,1
 800e1fc:	18c0004c 	andi	r3,r3,1
 800e200:	1c62b03a 	or	r17,r3,r17
 800e204:	9c400115 	stw	r17,4(r19)
 800e208:	29000115 	stw	r4,4(r5)
 800e20c:	2885883a 	add	r2,r5,r2
 800e210:	10c00117 	ldw	r3,4(r2)
 800e214:	29400204 	addi	r5,r5,8
 800e218:	a009883a 	mov	r4,r20
 800e21c:	18c00054 	ori	r3,r3,1
 800e220:	10c00115 	stw	r3,4(r2)
 800e224:	800b7700 	call	800b770 <_free_r>
 800e228:	003fd306 	br	800e178 <__alt_data_end+0xfc00e178>
 800e22c:	017fff04 	movi	r5,-4
 800e230:	414a703a 	and	r5,r8,r5
 800e234:	89800404 	addi	r6,r17,16
 800e238:	8151883a 	add	r8,r16,r5
 800e23c:	4180590e 	bge	r8,r6,800e3a4 <_realloc_r+0x390>
 800e240:	1080004c 	andi	r2,r2,1
 800e244:	103f9e1e 	bne	r2,zero,800e0c0 <__alt_data_end+0xfc00e0c0>
 800e248:	adbffe17 	ldw	r22,-8(r21)
 800e24c:	00bfff04 	movi	r2,-4
 800e250:	9dadc83a 	sub	r22,r19,r22
 800e254:	b1800117 	ldw	r6,4(r22)
 800e258:	3084703a 	and	r2,r6,r2
 800e25c:	20002026 	beq	r4,zero,800e2e0 <_realloc_r+0x2cc>
 800e260:	80af883a 	add	r23,r16,r2
 800e264:	b96f883a 	add	r23,r23,r5
 800e268:	21c05f26 	beq	r4,r7,800e3e8 <_realloc_r+0x3d4>
 800e26c:	b8c01c16 	blt	r23,r3,800e2e0 <_realloc_r+0x2cc>
 800e270:	20800317 	ldw	r2,12(r4)
 800e274:	20c00217 	ldw	r3,8(r4)
 800e278:	81bfff04 	addi	r6,r16,-4
 800e27c:	01000904 	movi	r4,36
 800e280:	18800315 	stw	r2,12(r3)
 800e284:	10c00215 	stw	r3,8(r2)
 800e288:	b0c00217 	ldw	r3,8(r22)
 800e28c:	b0800317 	ldw	r2,12(r22)
 800e290:	b4800204 	addi	r18,r22,8
 800e294:	18800315 	stw	r2,12(r3)
 800e298:	10c00215 	stw	r3,8(r2)
 800e29c:	21801b36 	bltu	r4,r6,800e30c <_realloc_r+0x2f8>
 800e2a0:	008004c4 	movi	r2,19
 800e2a4:	1180352e 	bgeu	r2,r6,800e37c <_realloc_r+0x368>
 800e2a8:	a8800017 	ldw	r2,0(r21)
 800e2ac:	b0800215 	stw	r2,8(r22)
 800e2b0:	a8800117 	ldw	r2,4(r21)
 800e2b4:	b0800315 	stw	r2,12(r22)
 800e2b8:	008006c4 	movi	r2,27
 800e2bc:	11807f36 	bltu	r2,r6,800e4bc <_realloc_r+0x4a8>
 800e2c0:	b0800404 	addi	r2,r22,16
 800e2c4:	ad400204 	addi	r21,r21,8
 800e2c8:	00002d06 	br	800e380 <_realloc_r+0x36c>
 800e2cc:	adbffe17 	ldw	r22,-8(r21)
 800e2d0:	00bfff04 	movi	r2,-4
 800e2d4:	9dadc83a 	sub	r22,r19,r22
 800e2d8:	b1000117 	ldw	r4,4(r22)
 800e2dc:	2084703a 	and	r2,r4,r2
 800e2e0:	b03f7726 	beq	r22,zero,800e0c0 <__alt_data_end+0xfc00e0c0>
 800e2e4:	80af883a 	add	r23,r16,r2
 800e2e8:	b8ff7516 	blt	r23,r3,800e0c0 <__alt_data_end+0xfc00e0c0>
 800e2ec:	b0800317 	ldw	r2,12(r22)
 800e2f0:	b0c00217 	ldw	r3,8(r22)
 800e2f4:	81bfff04 	addi	r6,r16,-4
 800e2f8:	01000904 	movi	r4,36
 800e2fc:	18800315 	stw	r2,12(r3)
 800e300:	10c00215 	stw	r3,8(r2)
 800e304:	b4800204 	addi	r18,r22,8
 800e308:	21bfe52e 	bgeu	r4,r6,800e2a0 <__alt_data_end+0xfc00e2a0>
 800e30c:	a80b883a 	mov	r5,r21
 800e310:	9009883a 	mov	r4,r18
 800e314:	800cd940 	call	800cd94 <memmove>
 800e318:	b821883a 	mov	r16,r23
 800e31c:	b027883a 	mov	r19,r22
 800e320:	003f8a06 	br	800e14c <__alt_data_end+0xfc00e14c>
 800e324:	300b883a 	mov	r5,r6
 800e328:	dfc00917 	ldw	ra,36(sp)
 800e32c:	df000817 	ldw	fp,32(sp)
 800e330:	ddc00717 	ldw	r23,28(sp)
 800e334:	dd800617 	ldw	r22,24(sp)
 800e338:	dd400517 	ldw	r21,20(sp)
 800e33c:	dd000417 	ldw	r20,16(sp)
 800e340:	dcc00317 	ldw	r19,12(sp)
 800e344:	dc800217 	ldw	r18,8(sp)
 800e348:	dc400117 	ldw	r17,4(sp)
 800e34c:	dc000017 	ldw	r16,0(sp)
 800e350:	dec00a04 	addi	sp,sp,40
 800e354:	800c35c1 	jmpi	800c35c <_malloc_r>
 800e358:	a8c00017 	ldw	r3,0(r21)
 800e35c:	90c00015 	stw	r3,0(r18)
 800e360:	a8c00117 	ldw	r3,4(r21)
 800e364:	90c00115 	stw	r3,4(r18)
 800e368:	00c006c4 	movi	r3,27
 800e36c:	19804536 	bltu	r3,r6,800e484 <_realloc_r+0x470>
 800e370:	90800204 	addi	r2,r18,8
 800e374:	a8c00204 	addi	r3,r21,8
 800e378:	003f6306 	br	800e108 <__alt_data_end+0xfc00e108>
 800e37c:	9005883a 	mov	r2,r18
 800e380:	a8c00017 	ldw	r3,0(r21)
 800e384:	b821883a 	mov	r16,r23
 800e388:	b027883a 	mov	r19,r22
 800e38c:	10c00015 	stw	r3,0(r2)
 800e390:	a8c00117 	ldw	r3,4(r21)
 800e394:	10c00115 	stw	r3,4(r2)
 800e398:	a8c00217 	ldw	r3,8(r21)
 800e39c:	10c00215 	stw	r3,8(r2)
 800e3a0:	003f6a06 	br	800e14c <__alt_data_end+0xfc00e14c>
 800e3a4:	9c67883a 	add	r19,r19,r17
 800e3a8:	4445c83a 	sub	r2,r8,r17
 800e3ac:	e4c00215 	stw	r19,8(fp)
 800e3b0:	10800054 	ori	r2,r2,1
 800e3b4:	98800115 	stw	r2,4(r19)
 800e3b8:	a8bfff17 	ldw	r2,-4(r21)
 800e3bc:	a009883a 	mov	r4,r20
 800e3c0:	1080004c 	andi	r2,r2,1
 800e3c4:	1462b03a 	or	r17,r2,r17
 800e3c8:	ac7fff15 	stw	r17,-4(r21)
 800e3cc:	80118580 	call	8011858 <__malloc_unlock>
 800e3d0:	a805883a 	mov	r2,r21
 800e3d4:	003f6b06 	br	800e184 <__alt_data_end+0xfc00e184>
 800e3d8:	a80b883a 	mov	r5,r21
 800e3dc:	9009883a 	mov	r4,r18
 800e3e0:	800cd940 	call	800cd94 <memmove>
 800e3e4:	003f4e06 	br	800e120 <__alt_data_end+0xfc00e120>
 800e3e8:	89000404 	addi	r4,r17,16
 800e3ec:	b93fbc16 	blt	r23,r4,800e2e0 <__alt_data_end+0xfc00e2e0>
 800e3f0:	b0800317 	ldw	r2,12(r22)
 800e3f4:	b0c00217 	ldw	r3,8(r22)
 800e3f8:	81bfff04 	addi	r6,r16,-4
 800e3fc:	01000904 	movi	r4,36
 800e400:	18800315 	stw	r2,12(r3)
 800e404:	10c00215 	stw	r3,8(r2)
 800e408:	b4800204 	addi	r18,r22,8
 800e40c:	21804336 	bltu	r4,r6,800e51c <_realloc_r+0x508>
 800e410:	008004c4 	movi	r2,19
 800e414:	11803f2e 	bgeu	r2,r6,800e514 <_realloc_r+0x500>
 800e418:	a8800017 	ldw	r2,0(r21)
 800e41c:	b0800215 	stw	r2,8(r22)
 800e420:	a8800117 	ldw	r2,4(r21)
 800e424:	b0800315 	stw	r2,12(r22)
 800e428:	008006c4 	movi	r2,27
 800e42c:	11803f36 	bltu	r2,r6,800e52c <_realloc_r+0x518>
 800e430:	b0800404 	addi	r2,r22,16
 800e434:	ad400204 	addi	r21,r21,8
 800e438:	a8c00017 	ldw	r3,0(r21)
 800e43c:	10c00015 	stw	r3,0(r2)
 800e440:	a8c00117 	ldw	r3,4(r21)
 800e444:	10c00115 	stw	r3,4(r2)
 800e448:	a8c00217 	ldw	r3,8(r21)
 800e44c:	10c00215 	stw	r3,8(r2)
 800e450:	b447883a 	add	r3,r22,r17
 800e454:	bc45c83a 	sub	r2,r23,r17
 800e458:	e0c00215 	stw	r3,8(fp)
 800e45c:	10800054 	ori	r2,r2,1
 800e460:	18800115 	stw	r2,4(r3)
 800e464:	b0800117 	ldw	r2,4(r22)
 800e468:	a009883a 	mov	r4,r20
 800e46c:	1080004c 	andi	r2,r2,1
 800e470:	1462b03a 	or	r17,r2,r17
 800e474:	b4400115 	stw	r17,4(r22)
 800e478:	80118580 	call	8011858 <__malloc_unlock>
 800e47c:	9005883a 	mov	r2,r18
 800e480:	003f4006 	br	800e184 <__alt_data_end+0xfc00e184>
 800e484:	a8c00217 	ldw	r3,8(r21)
 800e488:	90c00215 	stw	r3,8(r18)
 800e48c:	a8c00317 	ldw	r3,12(r21)
 800e490:	90c00315 	stw	r3,12(r18)
 800e494:	30801126 	beq	r6,r2,800e4dc <_realloc_r+0x4c8>
 800e498:	90800404 	addi	r2,r18,16
 800e49c:	a8c00404 	addi	r3,r21,16
 800e4a0:	003f1906 	br	800e108 <__alt_data_end+0xfc00e108>
 800e4a4:	90ffff17 	ldw	r3,-4(r18)
 800e4a8:	00bfff04 	movi	r2,-4
 800e4ac:	a825883a 	mov	r18,r21
 800e4b0:	1884703a 	and	r2,r3,r2
 800e4b4:	80a1883a 	add	r16,r16,r2
 800e4b8:	003f2406 	br	800e14c <__alt_data_end+0xfc00e14c>
 800e4bc:	a8800217 	ldw	r2,8(r21)
 800e4c0:	b0800415 	stw	r2,16(r22)
 800e4c4:	a8800317 	ldw	r2,12(r21)
 800e4c8:	b0800515 	stw	r2,20(r22)
 800e4cc:	31000a26 	beq	r6,r4,800e4f8 <_realloc_r+0x4e4>
 800e4d0:	b0800604 	addi	r2,r22,24
 800e4d4:	ad400404 	addi	r21,r21,16
 800e4d8:	003fa906 	br	800e380 <__alt_data_end+0xfc00e380>
 800e4dc:	a9000417 	ldw	r4,16(r21)
 800e4e0:	90800604 	addi	r2,r18,24
 800e4e4:	a8c00604 	addi	r3,r21,24
 800e4e8:	91000415 	stw	r4,16(r18)
 800e4ec:	a9000517 	ldw	r4,20(r21)
 800e4f0:	91000515 	stw	r4,20(r18)
 800e4f4:	003f0406 	br	800e108 <__alt_data_end+0xfc00e108>
 800e4f8:	a8c00417 	ldw	r3,16(r21)
 800e4fc:	ad400604 	addi	r21,r21,24
 800e500:	b0800804 	addi	r2,r22,32
 800e504:	b0c00615 	stw	r3,24(r22)
 800e508:	a8ffff17 	ldw	r3,-4(r21)
 800e50c:	b0c00715 	stw	r3,28(r22)
 800e510:	003f9b06 	br	800e380 <__alt_data_end+0xfc00e380>
 800e514:	9005883a 	mov	r2,r18
 800e518:	003fc706 	br	800e438 <__alt_data_end+0xfc00e438>
 800e51c:	a80b883a 	mov	r5,r21
 800e520:	9009883a 	mov	r4,r18
 800e524:	800cd940 	call	800cd94 <memmove>
 800e528:	003fc906 	br	800e450 <__alt_data_end+0xfc00e450>
 800e52c:	a8800217 	ldw	r2,8(r21)
 800e530:	b0800415 	stw	r2,16(r22)
 800e534:	a8800317 	ldw	r2,12(r21)
 800e538:	b0800515 	stw	r2,20(r22)
 800e53c:	31000726 	beq	r6,r4,800e55c <_realloc_r+0x548>
 800e540:	b0800604 	addi	r2,r22,24
 800e544:	ad400404 	addi	r21,r21,16
 800e548:	003fbb06 	br	800e438 <__alt_data_end+0xfc00e438>
 800e54c:	a009883a 	mov	r4,r20
 800e550:	80118580 	call	8011858 <__malloc_unlock>
 800e554:	0005883a 	mov	r2,zero
 800e558:	003f0a06 	br	800e184 <__alt_data_end+0xfc00e184>
 800e55c:	a8c00417 	ldw	r3,16(r21)
 800e560:	ad400604 	addi	r21,r21,24
 800e564:	b0800804 	addi	r2,r22,32
 800e568:	b0c00615 	stw	r3,24(r22)
 800e56c:	a8ffff17 	ldw	r3,-4(r21)
 800e570:	b0c00715 	stw	r3,28(r22)
 800e574:	003fb006 	br	800e438 <__alt_data_end+0xfc00e438>

0800e578 <_sbrk_r>:
 800e578:	defffd04 	addi	sp,sp,-12
 800e57c:	dc000015 	stw	r16,0(sp)
 800e580:	040200b4 	movhi	r16,2050
 800e584:	dc400115 	stw	r17,4(sp)
 800e588:	8424f904 	addi	r16,r16,-27676
 800e58c:	2023883a 	mov	r17,r4
 800e590:	2809883a 	mov	r4,r5
 800e594:	dfc00215 	stw	ra,8(sp)
 800e598:	80000015 	stw	zero,0(r16)
 800e59c:	8011a180 	call	8011a18 <sbrk>
 800e5a0:	00ffffc4 	movi	r3,-1
 800e5a4:	10c00526 	beq	r2,r3,800e5bc <_sbrk_r+0x44>
 800e5a8:	dfc00217 	ldw	ra,8(sp)
 800e5ac:	dc400117 	ldw	r17,4(sp)
 800e5b0:	dc000017 	ldw	r16,0(sp)
 800e5b4:	dec00304 	addi	sp,sp,12
 800e5b8:	f800283a 	ret
 800e5bc:	80c00017 	ldw	r3,0(r16)
 800e5c0:	183ff926 	beq	r3,zero,800e5a8 <__alt_data_end+0xfc00e5a8>
 800e5c4:	88c00015 	stw	r3,0(r17)
 800e5c8:	003ff706 	br	800e5a8 <__alt_data_end+0xfc00e5a8>

0800e5cc <__sread>:
 800e5cc:	defffe04 	addi	sp,sp,-8
 800e5d0:	dc000015 	stw	r16,0(sp)
 800e5d4:	2821883a 	mov	r16,r5
 800e5d8:	2940038f 	ldh	r5,14(r5)
 800e5dc:	dfc00115 	stw	ra,4(sp)
 800e5e0:	80103c00 	call	80103c0 <_read_r>
 800e5e4:	10000716 	blt	r2,zero,800e604 <__sread+0x38>
 800e5e8:	80c01417 	ldw	r3,80(r16)
 800e5ec:	1887883a 	add	r3,r3,r2
 800e5f0:	80c01415 	stw	r3,80(r16)
 800e5f4:	dfc00117 	ldw	ra,4(sp)
 800e5f8:	dc000017 	ldw	r16,0(sp)
 800e5fc:	dec00204 	addi	sp,sp,8
 800e600:	f800283a 	ret
 800e604:	80c0030b 	ldhu	r3,12(r16)
 800e608:	18fbffcc 	andi	r3,r3,61439
 800e60c:	80c0030d 	sth	r3,12(r16)
 800e610:	dfc00117 	ldw	ra,4(sp)
 800e614:	dc000017 	ldw	r16,0(sp)
 800e618:	dec00204 	addi	sp,sp,8
 800e61c:	f800283a 	ret

0800e620 <__seofread>:
 800e620:	0005883a 	mov	r2,zero
 800e624:	f800283a 	ret

0800e628 <__swrite>:
 800e628:	2880030b 	ldhu	r2,12(r5)
 800e62c:	defffb04 	addi	sp,sp,-20
 800e630:	dcc00315 	stw	r19,12(sp)
 800e634:	dc800215 	stw	r18,8(sp)
 800e638:	dc400115 	stw	r17,4(sp)
 800e63c:	dc000015 	stw	r16,0(sp)
 800e640:	dfc00415 	stw	ra,16(sp)
 800e644:	10c0400c 	andi	r3,r2,256
 800e648:	2821883a 	mov	r16,r5
 800e64c:	2023883a 	mov	r17,r4
 800e650:	3025883a 	mov	r18,r6
 800e654:	3827883a 	mov	r19,r7
 800e658:	18000526 	beq	r3,zero,800e670 <__swrite+0x48>
 800e65c:	2940038f 	ldh	r5,14(r5)
 800e660:	01c00084 	movi	r7,2
 800e664:	000d883a 	mov	r6,zero
 800e668:	80103600 	call	8010360 <_lseek_r>
 800e66c:	8080030b 	ldhu	r2,12(r16)
 800e670:	8140038f 	ldh	r5,14(r16)
 800e674:	10bbffcc 	andi	r2,r2,61439
 800e678:	980f883a 	mov	r7,r19
 800e67c:	900d883a 	mov	r6,r18
 800e680:	8809883a 	mov	r4,r17
 800e684:	8080030d 	sth	r2,12(r16)
 800e688:	dfc00417 	ldw	ra,16(sp)
 800e68c:	dcc00317 	ldw	r19,12(sp)
 800e690:	dc800217 	ldw	r18,8(sp)
 800e694:	dc400117 	ldw	r17,4(sp)
 800e698:	dc000017 	ldw	r16,0(sp)
 800e69c:	dec00504 	addi	sp,sp,20
 800e6a0:	800fe2c1 	jmpi	800fe2c <_write_r>

0800e6a4 <__sseek>:
 800e6a4:	defffe04 	addi	sp,sp,-8
 800e6a8:	dc000015 	stw	r16,0(sp)
 800e6ac:	2821883a 	mov	r16,r5
 800e6b0:	2940038f 	ldh	r5,14(r5)
 800e6b4:	dfc00115 	stw	ra,4(sp)
 800e6b8:	80103600 	call	8010360 <_lseek_r>
 800e6bc:	00ffffc4 	movi	r3,-1
 800e6c0:	10c00826 	beq	r2,r3,800e6e4 <__sseek+0x40>
 800e6c4:	80c0030b 	ldhu	r3,12(r16)
 800e6c8:	80801415 	stw	r2,80(r16)
 800e6cc:	18c40014 	ori	r3,r3,4096
 800e6d0:	80c0030d 	sth	r3,12(r16)
 800e6d4:	dfc00117 	ldw	ra,4(sp)
 800e6d8:	dc000017 	ldw	r16,0(sp)
 800e6dc:	dec00204 	addi	sp,sp,8
 800e6e0:	f800283a 	ret
 800e6e4:	80c0030b 	ldhu	r3,12(r16)
 800e6e8:	18fbffcc 	andi	r3,r3,61439
 800e6ec:	80c0030d 	sth	r3,12(r16)
 800e6f0:	dfc00117 	ldw	ra,4(sp)
 800e6f4:	dc000017 	ldw	r16,0(sp)
 800e6f8:	dec00204 	addi	sp,sp,8
 800e6fc:	f800283a 	ret

0800e700 <__sclose>:
 800e700:	2940038f 	ldh	r5,14(r5)
 800e704:	800fe8c1 	jmpi	800fe8c <_close_r>

0800e708 <strcmp>:
 800e708:	2144b03a 	or	r2,r4,r5
 800e70c:	108000cc 	andi	r2,r2,3
 800e710:	1000171e 	bne	r2,zero,800e770 <strcmp+0x68>
 800e714:	20800017 	ldw	r2,0(r4)
 800e718:	28c00017 	ldw	r3,0(r5)
 800e71c:	10c0141e 	bne	r2,r3,800e770 <strcmp+0x68>
 800e720:	027fbff4 	movhi	r9,65279
 800e724:	4a7fbfc4 	addi	r9,r9,-257
 800e728:	0086303a 	nor	r3,zero,r2
 800e72c:	02202074 	movhi	r8,32897
 800e730:	1245883a 	add	r2,r2,r9
 800e734:	42202004 	addi	r8,r8,-32640
 800e738:	10c4703a 	and	r2,r2,r3
 800e73c:	1204703a 	and	r2,r2,r8
 800e740:	10000226 	beq	r2,zero,800e74c <strcmp+0x44>
 800e744:	00002306 	br	800e7d4 <strcmp+0xcc>
 800e748:	1000221e 	bne	r2,zero,800e7d4 <strcmp+0xcc>
 800e74c:	21000104 	addi	r4,r4,4
 800e750:	20c00017 	ldw	r3,0(r4)
 800e754:	29400104 	addi	r5,r5,4
 800e758:	29800017 	ldw	r6,0(r5)
 800e75c:	1a4f883a 	add	r7,r3,r9
 800e760:	00c4303a 	nor	r2,zero,r3
 800e764:	3884703a 	and	r2,r7,r2
 800e768:	1204703a 	and	r2,r2,r8
 800e76c:	19bff626 	beq	r3,r6,800e748 <__alt_data_end+0xfc00e748>
 800e770:	20800003 	ldbu	r2,0(r4)
 800e774:	10c03fcc 	andi	r3,r2,255
 800e778:	18c0201c 	xori	r3,r3,128
 800e77c:	18ffe004 	addi	r3,r3,-128
 800e780:	18000c26 	beq	r3,zero,800e7b4 <strcmp+0xac>
 800e784:	29800007 	ldb	r6,0(r5)
 800e788:	19800326 	beq	r3,r6,800e798 <strcmp+0x90>
 800e78c:	00001306 	br	800e7dc <strcmp+0xd4>
 800e790:	29800007 	ldb	r6,0(r5)
 800e794:	11800b1e 	bne	r2,r6,800e7c4 <strcmp+0xbc>
 800e798:	21000044 	addi	r4,r4,1
 800e79c:	20c00003 	ldbu	r3,0(r4)
 800e7a0:	29400044 	addi	r5,r5,1
 800e7a4:	18803fcc 	andi	r2,r3,255
 800e7a8:	1080201c 	xori	r2,r2,128
 800e7ac:	10bfe004 	addi	r2,r2,-128
 800e7b0:	103ff71e 	bne	r2,zero,800e790 <__alt_data_end+0xfc00e790>
 800e7b4:	0007883a 	mov	r3,zero
 800e7b8:	28800003 	ldbu	r2,0(r5)
 800e7bc:	1885c83a 	sub	r2,r3,r2
 800e7c0:	f800283a 	ret
 800e7c4:	28800003 	ldbu	r2,0(r5)
 800e7c8:	18c03fcc 	andi	r3,r3,255
 800e7cc:	1885c83a 	sub	r2,r3,r2
 800e7d0:	f800283a 	ret
 800e7d4:	0005883a 	mov	r2,zero
 800e7d8:	f800283a 	ret
 800e7dc:	10c03fcc 	andi	r3,r2,255
 800e7e0:	003ff506 	br	800e7b8 <__alt_data_end+0xfc00e7b8>

0800e7e4 <__sprint_r.part.0>:
 800e7e4:	28801917 	ldw	r2,100(r5)
 800e7e8:	defff604 	addi	sp,sp,-40
 800e7ec:	dd400515 	stw	r21,20(sp)
 800e7f0:	dfc00915 	stw	ra,36(sp)
 800e7f4:	df000815 	stw	fp,32(sp)
 800e7f8:	ddc00715 	stw	r23,28(sp)
 800e7fc:	dd800615 	stw	r22,24(sp)
 800e800:	dd000415 	stw	r20,16(sp)
 800e804:	dcc00315 	stw	r19,12(sp)
 800e808:	dc800215 	stw	r18,8(sp)
 800e80c:	dc400115 	stw	r17,4(sp)
 800e810:	dc000015 	stw	r16,0(sp)
 800e814:	1088000c 	andi	r2,r2,8192
 800e818:	302b883a 	mov	r21,r6
 800e81c:	10002e26 	beq	r2,zero,800e8d8 <__sprint_r.part.0+0xf4>
 800e820:	30800217 	ldw	r2,8(r6)
 800e824:	35800017 	ldw	r22,0(r6)
 800e828:	10002926 	beq	r2,zero,800e8d0 <__sprint_r.part.0+0xec>
 800e82c:	2827883a 	mov	r19,r5
 800e830:	2029883a 	mov	r20,r4
 800e834:	b5c00104 	addi	r23,r22,4
 800e838:	04bfffc4 	movi	r18,-1
 800e83c:	bc400017 	ldw	r17,0(r23)
 800e840:	b4000017 	ldw	r16,0(r22)
 800e844:	0039883a 	mov	fp,zero
 800e848:	8822d0ba 	srli	r17,r17,2
 800e84c:	8800031e 	bne	r17,zero,800e85c <__sprint_r.part.0+0x78>
 800e850:	00001806 	br	800e8b4 <__sprint_r.part.0+0xd0>
 800e854:	84000104 	addi	r16,r16,4
 800e858:	8f001526 	beq	r17,fp,800e8b0 <__sprint_r.part.0+0xcc>
 800e85c:	81400017 	ldw	r5,0(r16)
 800e860:	980d883a 	mov	r6,r19
 800e864:	a009883a 	mov	r4,r20
 800e868:	801020c0 	call	801020c <_fputwc_r>
 800e86c:	e7000044 	addi	fp,fp,1
 800e870:	14bff81e 	bne	r2,r18,800e854 <__alt_data_end+0xfc00e854>
 800e874:	9005883a 	mov	r2,r18
 800e878:	a8000215 	stw	zero,8(r21)
 800e87c:	a8000115 	stw	zero,4(r21)
 800e880:	dfc00917 	ldw	ra,36(sp)
 800e884:	df000817 	ldw	fp,32(sp)
 800e888:	ddc00717 	ldw	r23,28(sp)
 800e88c:	dd800617 	ldw	r22,24(sp)
 800e890:	dd400517 	ldw	r21,20(sp)
 800e894:	dd000417 	ldw	r20,16(sp)
 800e898:	dcc00317 	ldw	r19,12(sp)
 800e89c:	dc800217 	ldw	r18,8(sp)
 800e8a0:	dc400117 	ldw	r17,4(sp)
 800e8a4:	dc000017 	ldw	r16,0(sp)
 800e8a8:	dec00a04 	addi	sp,sp,40
 800e8ac:	f800283a 	ret
 800e8b0:	a8800217 	ldw	r2,8(r21)
 800e8b4:	8c63883a 	add	r17,r17,r17
 800e8b8:	8c63883a 	add	r17,r17,r17
 800e8bc:	1445c83a 	sub	r2,r2,r17
 800e8c0:	a8800215 	stw	r2,8(r21)
 800e8c4:	b5800204 	addi	r22,r22,8
 800e8c8:	bdc00204 	addi	r23,r23,8
 800e8cc:	103fdb1e 	bne	r2,zero,800e83c <__alt_data_end+0xfc00e83c>
 800e8d0:	0005883a 	mov	r2,zero
 800e8d4:	003fe806 	br	800e878 <__alt_data_end+0xfc00e878>
 800e8d8:	800ba800 	call	800ba80 <__sfvwrite_r>
 800e8dc:	003fe606 	br	800e878 <__alt_data_end+0xfc00e878>

0800e8e0 <__sprint_r>:
 800e8e0:	30c00217 	ldw	r3,8(r6)
 800e8e4:	18000126 	beq	r3,zero,800e8ec <__sprint_r+0xc>
 800e8e8:	800e7e41 	jmpi	800e7e4 <__sprint_r.part.0>
 800e8ec:	30000115 	stw	zero,4(r6)
 800e8f0:	0005883a 	mov	r2,zero
 800e8f4:	f800283a 	ret

0800e8f8 <___vfiprintf_internal_r>:
 800e8f8:	deffc904 	addi	sp,sp,-220
 800e8fc:	df003515 	stw	fp,212(sp)
 800e900:	dd003115 	stw	r20,196(sp)
 800e904:	dfc03615 	stw	ra,216(sp)
 800e908:	ddc03415 	stw	r23,208(sp)
 800e90c:	dd803315 	stw	r22,204(sp)
 800e910:	dd403215 	stw	r21,200(sp)
 800e914:	dcc03015 	stw	r19,192(sp)
 800e918:	dc802f15 	stw	r18,188(sp)
 800e91c:	dc402e15 	stw	r17,184(sp)
 800e920:	dc002d15 	stw	r16,180(sp)
 800e924:	d9002015 	stw	r4,128(sp)
 800e928:	d9c02215 	stw	r7,136(sp)
 800e92c:	2829883a 	mov	r20,r5
 800e930:	3039883a 	mov	fp,r6
 800e934:	20000226 	beq	r4,zero,800e940 <___vfiprintf_internal_r+0x48>
 800e938:	20800e17 	ldw	r2,56(r4)
 800e93c:	1000cf26 	beq	r2,zero,800ec7c <___vfiprintf_internal_r+0x384>
 800e940:	a080030b 	ldhu	r2,12(r20)
 800e944:	10c8000c 	andi	r3,r2,8192
 800e948:	1800061e 	bne	r3,zero,800e964 <___vfiprintf_internal_r+0x6c>
 800e94c:	a1001917 	ldw	r4,100(r20)
 800e950:	00f7ffc4 	movi	r3,-8193
 800e954:	10880014 	ori	r2,r2,8192
 800e958:	20c6703a 	and	r3,r4,r3
 800e95c:	a080030d 	sth	r2,12(r20)
 800e960:	a0c01915 	stw	r3,100(r20)
 800e964:	10c0020c 	andi	r3,r2,8
 800e968:	1800a926 	beq	r3,zero,800ec10 <___vfiprintf_internal_r+0x318>
 800e96c:	a0c00417 	ldw	r3,16(r20)
 800e970:	1800a726 	beq	r3,zero,800ec10 <___vfiprintf_internal_r+0x318>
 800e974:	1080068c 	andi	r2,r2,26
 800e978:	00c00284 	movi	r3,10
 800e97c:	10c0ac26 	beq	r2,r3,800ec30 <___vfiprintf_internal_r+0x338>
 800e980:	da801a04 	addi	r10,sp,104
 800e984:	da801e15 	stw	r10,120(sp)
 800e988:	d8801e17 	ldw	r2,120(sp)
 800e98c:	da8019c4 	addi	r10,sp,103
 800e990:	05820074 	movhi	r22,2049
 800e994:	05c20074 	movhi	r23,2049
 800e998:	da801f15 	stw	r10,124(sp)
 800e99c:	1295c83a 	sub	r10,r2,r10
 800e9a0:	b596ef04 	addi	r22,r22,23484
 800e9a4:	bdd6eb04 	addi	r23,r23,23468
 800e9a8:	dec01a15 	stw	sp,104(sp)
 800e9ac:	d8001c15 	stw	zero,112(sp)
 800e9b0:	d8001b15 	stw	zero,108(sp)
 800e9b4:	d8002615 	stw	zero,152(sp)
 800e9b8:	d8002315 	stw	zero,140(sp)
 800e9bc:	da802715 	stw	r10,156(sp)
 800e9c0:	d811883a 	mov	r8,sp
 800e9c4:	dd002115 	stw	r20,132(sp)
 800e9c8:	e021883a 	mov	r16,fp
 800e9cc:	80800007 	ldb	r2,0(r16)
 800e9d0:	1003ea26 	beq	r2,zero,800f97c <___vfiprintf_internal_r+0x1084>
 800e9d4:	00c00944 	movi	r3,37
 800e9d8:	8025883a 	mov	r18,r16
 800e9dc:	10c0021e 	bne	r2,r3,800e9e8 <___vfiprintf_internal_r+0xf0>
 800e9e0:	00001606 	br	800ea3c <___vfiprintf_internal_r+0x144>
 800e9e4:	10c00326 	beq	r2,r3,800e9f4 <___vfiprintf_internal_r+0xfc>
 800e9e8:	94800044 	addi	r18,r18,1
 800e9ec:	90800007 	ldb	r2,0(r18)
 800e9f0:	103ffc1e 	bne	r2,zero,800e9e4 <__alt_data_end+0xfc00e9e4>
 800e9f4:	9423c83a 	sub	r17,r18,r16
 800e9f8:	88001026 	beq	r17,zero,800ea3c <___vfiprintf_internal_r+0x144>
 800e9fc:	d8c01c17 	ldw	r3,112(sp)
 800ea00:	d8801b17 	ldw	r2,108(sp)
 800ea04:	44000015 	stw	r16,0(r8)
 800ea08:	88c7883a 	add	r3,r17,r3
 800ea0c:	10800044 	addi	r2,r2,1
 800ea10:	44400115 	stw	r17,4(r8)
 800ea14:	d8c01c15 	stw	r3,112(sp)
 800ea18:	d8801b15 	stw	r2,108(sp)
 800ea1c:	010001c4 	movi	r4,7
 800ea20:	2080760e 	bge	r4,r2,800ebfc <___vfiprintf_internal_r+0x304>
 800ea24:	1803821e 	bne	r3,zero,800f830 <___vfiprintf_internal_r+0xf38>
 800ea28:	da802317 	ldw	r10,140(sp)
 800ea2c:	d8001b15 	stw	zero,108(sp)
 800ea30:	d811883a 	mov	r8,sp
 800ea34:	5455883a 	add	r10,r10,r17
 800ea38:	da802315 	stw	r10,140(sp)
 800ea3c:	90800007 	ldb	r2,0(r18)
 800ea40:	10044626 	beq	r2,zero,800fb5c <___vfiprintf_internal_r+0x1264>
 800ea44:	90c00047 	ldb	r3,1(r18)
 800ea48:	94000044 	addi	r16,r18,1
 800ea4c:	d8001d85 	stb	zero,118(sp)
 800ea50:	0009883a 	mov	r4,zero
 800ea54:	000f883a 	mov	r7,zero
 800ea58:	027fffc4 	movi	r9,-1
 800ea5c:	0023883a 	mov	r17,zero
 800ea60:	0029883a 	mov	r20,zero
 800ea64:	01401604 	movi	r5,88
 800ea68:	01800244 	movi	r6,9
 800ea6c:	03400a84 	movi	r13,42
 800ea70:	03001b04 	movi	r12,108
 800ea74:	84000044 	addi	r16,r16,1
 800ea78:	18bff804 	addi	r2,r3,-32
 800ea7c:	28827336 	bltu	r5,r2,800f44c <___vfiprintf_internal_r+0xb54>
 800ea80:	100490ba 	slli	r2,r2,2
 800ea84:	02820074 	movhi	r10,2049
 800ea88:	52baa604 	addi	r10,r10,-5480
 800ea8c:	1285883a 	add	r2,r2,r10
 800ea90:	10800017 	ldw	r2,0(r2)
 800ea94:	1000683a 	jmp	r2
 800ea98:	0800f180 	call	800f18 <__ram_exceptions_end+0x7e0cd0>
 800ea9c:	0800f44c 	andi	zero,at,977
 800eaa0:	0800f44c 	andi	zero,at,977
 800eaa4:	0800f1a0 	cmpeqi	zero,at,966
 800eaa8:	0800f44c 	andi	zero,at,977
 800eaac:	0800f44c 	andi	zero,at,977
 800eab0:	0800f44c 	andi	zero,at,977
 800eab4:	0800f44c 	andi	zero,at,977
 800eab8:	0800f44c 	andi	zero,at,977
 800eabc:	0800f44c 	andi	zero,at,977
 800eac0:	0800f388 	cmpgei	zero,at,974
 800eac4:	0800f3a4 	muli	zero,at,974
 800eac8:	0800f44c 	andi	zero,at,977
 800eacc:	0800ec8c 	andi	zero,at,946
 800ead0:	0800f3b4 	orhi	zero,at,974
 800ead4:	0800f44c 	andi	zero,at,977
 800ead8:	0800f1ac 	andhi	zero,at,966
 800eadc:	0800f1b8 	rdprs	zero,at,966
 800eae0:	0800f1b8 	rdprs	zero,at,966
 800eae4:	0800f1b8 	rdprs	zero,at,966
 800eae8:	0800f1b8 	rdprs	zero,at,966
 800eaec:	0800f1b8 	rdprs	zero,at,966
 800eaf0:	0800f1b8 	rdprs	zero,at,966
 800eaf4:	0800f1b8 	rdprs	zero,at,966
 800eaf8:	0800f1b8 	rdprs	zero,at,966
 800eafc:	0800f1b8 	rdprs	zero,at,966
 800eb00:	0800f44c 	andi	zero,at,977
 800eb04:	0800f44c 	andi	zero,at,977
 800eb08:	0800f44c 	andi	zero,at,977
 800eb0c:	0800f44c 	andi	zero,at,977
 800eb10:	0800f44c 	andi	zero,at,977
 800eb14:	0800f44c 	andi	zero,at,977
 800eb18:	0800f44c 	andi	zero,at,977
 800eb1c:	0800f44c 	andi	zero,at,977
 800eb20:	0800f44c 	andi	zero,at,977
 800eb24:	0800f44c 	andi	zero,at,977
 800eb28:	0800f1e4 	muli	zero,at,967
 800eb2c:	0800f44c 	andi	zero,at,977
 800eb30:	0800f44c 	andi	zero,at,977
 800eb34:	0800f44c 	andi	zero,at,977
 800eb38:	0800f44c 	andi	zero,at,977
 800eb3c:	0800f44c 	andi	zero,at,977
 800eb40:	0800f44c 	andi	zero,at,977
 800eb44:	0800f44c 	andi	zero,at,977
 800eb48:	0800f44c 	andi	zero,at,977
 800eb4c:	0800f44c 	andi	zero,at,977
 800eb50:	0800f44c 	andi	zero,at,977
 800eb54:	0800f21c 	xori	zero,at,968
 800eb58:	0800f44c 	andi	zero,at,977
 800eb5c:	0800f44c 	andi	zero,at,977
 800eb60:	0800f44c 	andi	zero,at,977
 800eb64:	0800f44c 	andi	zero,at,977
 800eb68:	0800f44c 	andi	zero,at,977
 800eb6c:	0800f274 	orhi	zero,at,969
 800eb70:	0800f44c 	andi	zero,at,977
 800eb74:	0800f44c 	andi	zero,at,977
 800eb78:	0800f2e4 	muli	zero,at,971
 800eb7c:	0800f44c 	andi	zero,at,977
 800eb80:	0800f44c 	andi	zero,at,977
 800eb84:	0800f44c 	andi	zero,at,977
 800eb88:	0800f44c 	andi	zero,at,977
 800eb8c:	0800f44c 	andi	zero,at,977
 800eb90:	0800f44c 	andi	zero,at,977
 800eb94:	0800f44c 	andi	zero,at,977
 800eb98:	0800f44c 	andi	zero,at,977
 800eb9c:	0800f44c 	andi	zero,at,977
 800eba0:	0800f44c 	andi	zero,at,977
 800eba4:	0800f090 	cmplti	zero,at,962
 800eba8:	0800f0bc 	xorhi	zero,at,962
 800ebac:	0800f44c 	andi	zero,at,977
 800ebb0:	0800f44c 	andi	zero,at,977
 800ebb4:	0800f44c 	andi	zero,at,977
 800ebb8:	0800f3f4 	orhi	zero,at,975
 800ebbc:	0800f0bc 	xorhi	zero,at,962
 800ebc0:	0800f44c 	andi	zero,at,977
 800ebc4:	0800f44c 	andi	zero,at,977
 800ebc8:	0800ef50 	cmplti	zero,at,957
 800ebcc:	0800f44c 	andi	zero,at,977
 800ebd0:	0800ef60 	cmpeqi	zero,at,957
 800ebd4:	0800ef9c 	xori	zero,at,958
 800ebd8:	0800ec98 	cmpnei	zero,at,946
 800ebdc:	0800ef44 	addi	zero,at,957
 800ebe0:	0800f44c 	andi	zero,at,977
 800ebe4:	0800f320 	cmpeqi	zero,at,972
 800ebe8:	0800f44c 	andi	zero,at,977
 800ebec:	0800f378 	rdprs	zero,at,973
 800ebf0:	0800f44c 	andi	zero,at,977
 800ebf4:	0800f44c 	andi	zero,at,977
 800ebf8:	0800f03c 	xorhi	zero,at,960
 800ebfc:	42000204 	addi	r8,r8,8
 800ec00:	da802317 	ldw	r10,140(sp)
 800ec04:	5455883a 	add	r10,r10,r17
 800ec08:	da802315 	stw	r10,140(sp)
 800ec0c:	003f8b06 	br	800ea3c <__alt_data_end+0xfc00ea3c>
 800ec10:	d9002017 	ldw	r4,128(sp)
 800ec14:	a00b883a 	mov	r5,r20
 800ec18:	80096280 	call	8009628 <__swsetup_r>
 800ec1c:	1003b11e 	bne	r2,zero,800fae4 <___vfiprintf_internal_r+0x11ec>
 800ec20:	a080030b 	ldhu	r2,12(r20)
 800ec24:	00c00284 	movi	r3,10
 800ec28:	1080068c 	andi	r2,r2,26
 800ec2c:	10ff541e 	bne	r2,r3,800e980 <__alt_data_end+0xfc00e980>
 800ec30:	a080038f 	ldh	r2,14(r20)
 800ec34:	103f5216 	blt	r2,zero,800e980 <__alt_data_end+0xfc00e980>
 800ec38:	d9c02217 	ldw	r7,136(sp)
 800ec3c:	d9002017 	ldw	r4,128(sp)
 800ec40:	e00d883a 	mov	r6,fp
 800ec44:	a00b883a 	mov	r5,r20
 800ec48:	800fd700 	call	800fd70 <__sbprintf>
 800ec4c:	dfc03617 	ldw	ra,216(sp)
 800ec50:	df003517 	ldw	fp,212(sp)
 800ec54:	ddc03417 	ldw	r23,208(sp)
 800ec58:	dd803317 	ldw	r22,204(sp)
 800ec5c:	dd403217 	ldw	r21,200(sp)
 800ec60:	dd003117 	ldw	r20,196(sp)
 800ec64:	dcc03017 	ldw	r19,192(sp)
 800ec68:	dc802f17 	ldw	r18,188(sp)
 800ec6c:	dc402e17 	ldw	r17,184(sp)
 800ec70:	dc002d17 	ldw	r16,180(sp)
 800ec74:	dec03704 	addi	sp,sp,220
 800ec78:	f800283a 	ret
 800ec7c:	800b5fc0 	call	800b5fc <__sinit>
 800ec80:	003f2f06 	br	800e940 <__alt_data_end+0xfc00e940>
 800ec84:	0463c83a 	sub	r17,zero,r17
 800ec88:	d8802215 	stw	r2,136(sp)
 800ec8c:	a5000114 	ori	r20,r20,4
 800ec90:	80c00007 	ldb	r3,0(r16)
 800ec94:	003f7706 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800ec98:	00800c04 	movi	r2,48
 800ec9c:	da802217 	ldw	r10,136(sp)
 800eca0:	d8801d05 	stb	r2,116(sp)
 800eca4:	00801e04 	movi	r2,120
 800eca8:	d8801d45 	stb	r2,117(sp)
 800ecac:	d8001d85 	stb	zero,118(sp)
 800ecb0:	50c00104 	addi	r3,r10,4
 800ecb4:	54800017 	ldw	r18,0(r10)
 800ecb8:	0027883a 	mov	r19,zero
 800ecbc:	a0800094 	ori	r2,r20,2
 800ecc0:	48030b16 	blt	r9,zero,800f8f0 <___vfiprintf_internal_r+0xff8>
 800ecc4:	00bfdfc4 	movi	r2,-129
 800ecc8:	a096703a 	and	r11,r20,r2
 800eccc:	d8c02215 	stw	r3,136(sp)
 800ecd0:	5d000094 	ori	r20,r11,2
 800ecd4:	90032b1e 	bne	r18,zero,800f984 <___vfiprintf_internal_r+0x108c>
 800ecd8:	00820074 	movhi	r2,2049
 800ecdc:	10968b04 	addi	r2,r2,23084
 800ece0:	d8802615 	stw	r2,152(sp)
 800ece4:	0039883a 	mov	fp,zero
 800ece8:	48017b1e 	bne	r9,zero,800f2d8 <___vfiprintf_internal_r+0x9e0>
 800ecec:	0013883a 	mov	r9,zero
 800ecf0:	0027883a 	mov	r19,zero
 800ecf4:	dd401a04 	addi	r21,sp,104
 800ecf8:	4825883a 	mov	r18,r9
 800ecfc:	4cc0010e 	bge	r9,r19,800ed04 <___vfiprintf_internal_r+0x40c>
 800ed00:	9825883a 	mov	r18,r19
 800ed04:	e7003fcc 	andi	fp,fp,255
 800ed08:	e700201c 	xori	fp,fp,128
 800ed0c:	e73fe004 	addi	fp,fp,-128
 800ed10:	e0000126 	beq	fp,zero,800ed18 <___vfiprintf_internal_r+0x420>
 800ed14:	94800044 	addi	r18,r18,1
 800ed18:	a380008c 	andi	r14,r20,2
 800ed1c:	70000126 	beq	r14,zero,800ed24 <___vfiprintf_internal_r+0x42c>
 800ed20:	94800084 	addi	r18,r18,2
 800ed24:	a700210c 	andi	fp,r20,132
 800ed28:	e001df1e 	bne	fp,zero,800f4a8 <___vfiprintf_internal_r+0xbb0>
 800ed2c:	8c87c83a 	sub	r3,r17,r18
 800ed30:	00c1dd0e 	bge	zero,r3,800f4a8 <___vfiprintf_internal_r+0xbb0>
 800ed34:	01c00404 	movi	r7,16
 800ed38:	d8801c17 	ldw	r2,112(sp)
 800ed3c:	38c3ad0e 	bge	r7,r3,800fbf4 <___vfiprintf_internal_r+0x12fc>
 800ed40:	02820074 	movhi	r10,2049
 800ed44:	5296ef04 	addi	r10,r10,23484
 800ed48:	dc002915 	stw	r16,164(sp)
 800ed4c:	d9801b17 	ldw	r6,108(sp)
 800ed50:	da802415 	stw	r10,144(sp)
 800ed54:	03c001c4 	movi	r15,7
 800ed58:	da402515 	stw	r9,148(sp)
 800ed5c:	db802815 	stw	r14,160(sp)
 800ed60:	1821883a 	mov	r16,r3
 800ed64:	00000506 	br	800ed7c <___vfiprintf_internal_r+0x484>
 800ed68:	31400084 	addi	r5,r6,2
 800ed6c:	42000204 	addi	r8,r8,8
 800ed70:	200d883a 	mov	r6,r4
 800ed74:	843ffc04 	addi	r16,r16,-16
 800ed78:	3c000d0e 	bge	r7,r16,800edb0 <___vfiprintf_internal_r+0x4b8>
 800ed7c:	10800404 	addi	r2,r2,16
 800ed80:	31000044 	addi	r4,r6,1
 800ed84:	45800015 	stw	r22,0(r8)
 800ed88:	41c00115 	stw	r7,4(r8)
 800ed8c:	d8801c15 	stw	r2,112(sp)
 800ed90:	d9001b15 	stw	r4,108(sp)
 800ed94:	793ff40e 	bge	r15,r4,800ed68 <__alt_data_end+0xfc00ed68>
 800ed98:	1001b51e 	bne	r2,zero,800f470 <___vfiprintf_internal_r+0xb78>
 800ed9c:	843ffc04 	addi	r16,r16,-16
 800eda0:	000d883a 	mov	r6,zero
 800eda4:	01400044 	movi	r5,1
 800eda8:	d811883a 	mov	r8,sp
 800edac:	3c3ff316 	blt	r7,r16,800ed7c <__alt_data_end+0xfc00ed7c>
 800edb0:	8007883a 	mov	r3,r16
 800edb4:	da402517 	ldw	r9,148(sp)
 800edb8:	db802817 	ldw	r14,160(sp)
 800edbc:	dc002917 	ldw	r16,164(sp)
 800edc0:	da802417 	ldw	r10,144(sp)
 800edc4:	1885883a 	add	r2,r3,r2
 800edc8:	40c00115 	stw	r3,4(r8)
 800edcc:	42800015 	stw	r10,0(r8)
 800edd0:	d8801c15 	stw	r2,112(sp)
 800edd4:	d9401b15 	stw	r5,108(sp)
 800edd8:	00c001c4 	movi	r3,7
 800eddc:	19426016 	blt	r3,r5,800f760 <___vfiprintf_internal_r+0xe68>
 800ede0:	d8c01d87 	ldb	r3,118(sp)
 800ede4:	42000204 	addi	r8,r8,8
 800ede8:	29000044 	addi	r4,r5,1
 800edec:	1801b31e 	bne	r3,zero,800f4bc <___vfiprintf_internal_r+0xbc4>
 800edf0:	7001c026 	beq	r14,zero,800f4f4 <___vfiprintf_internal_r+0xbfc>
 800edf4:	d8c01d04 	addi	r3,sp,116
 800edf8:	10800084 	addi	r2,r2,2
 800edfc:	40c00015 	stw	r3,0(r8)
 800ee00:	00c00084 	movi	r3,2
 800ee04:	40c00115 	stw	r3,4(r8)
 800ee08:	d8801c15 	stw	r2,112(sp)
 800ee0c:	d9001b15 	stw	r4,108(sp)
 800ee10:	00c001c4 	movi	r3,7
 800ee14:	1902650e 	bge	r3,r4,800f7ac <___vfiprintf_internal_r+0xeb4>
 800ee18:	10029a1e 	bne	r2,zero,800f884 <___vfiprintf_internal_r+0xf8c>
 800ee1c:	00c02004 	movi	r3,128
 800ee20:	01000044 	movi	r4,1
 800ee24:	000b883a 	mov	r5,zero
 800ee28:	d811883a 	mov	r8,sp
 800ee2c:	e0c1b31e 	bne	fp,r3,800f4fc <___vfiprintf_internal_r+0xc04>
 800ee30:	8cb9c83a 	sub	fp,r17,r18
 800ee34:	0701b10e 	bge	zero,fp,800f4fc <___vfiprintf_internal_r+0xc04>
 800ee38:	01c00404 	movi	r7,16
 800ee3c:	3f03890e 	bge	r7,fp,800fc64 <___vfiprintf_internal_r+0x136c>
 800ee40:	00c20074 	movhi	r3,2049
 800ee44:	18d6eb04 	addi	r3,r3,23468
 800ee48:	d8c02415 	stw	r3,144(sp)
 800ee4c:	8007883a 	mov	r3,r16
 800ee50:	034001c4 	movi	r13,7
 800ee54:	e021883a 	mov	r16,fp
 800ee58:	da402515 	stw	r9,148(sp)
 800ee5c:	1839883a 	mov	fp,r3
 800ee60:	00000506 	br	800ee78 <___vfiprintf_internal_r+0x580>
 800ee64:	29800084 	addi	r6,r5,2
 800ee68:	42000204 	addi	r8,r8,8
 800ee6c:	180b883a 	mov	r5,r3
 800ee70:	843ffc04 	addi	r16,r16,-16
 800ee74:	3c000d0e 	bge	r7,r16,800eeac <___vfiprintf_internal_r+0x5b4>
 800ee78:	10800404 	addi	r2,r2,16
 800ee7c:	28c00044 	addi	r3,r5,1
 800ee80:	45c00015 	stw	r23,0(r8)
 800ee84:	41c00115 	stw	r7,4(r8)
 800ee88:	d8801c15 	stw	r2,112(sp)
 800ee8c:	d8c01b15 	stw	r3,108(sp)
 800ee90:	68fff40e 	bge	r13,r3,800ee64 <__alt_data_end+0xfc00ee64>
 800ee94:	1002241e 	bne	r2,zero,800f728 <___vfiprintf_internal_r+0xe30>
 800ee98:	843ffc04 	addi	r16,r16,-16
 800ee9c:	01800044 	movi	r6,1
 800eea0:	000b883a 	mov	r5,zero
 800eea4:	d811883a 	mov	r8,sp
 800eea8:	3c3ff316 	blt	r7,r16,800ee78 <__alt_data_end+0xfc00ee78>
 800eeac:	da402517 	ldw	r9,148(sp)
 800eeb0:	e007883a 	mov	r3,fp
 800eeb4:	8039883a 	mov	fp,r16
 800eeb8:	1821883a 	mov	r16,r3
 800eebc:	d8c02417 	ldw	r3,144(sp)
 800eec0:	1705883a 	add	r2,r2,fp
 800eec4:	47000115 	stw	fp,4(r8)
 800eec8:	40c00015 	stw	r3,0(r8)
 800eecc:	d8801c15 	stw	r2,112(sp)
 800eed0:	d9801b15 	stw	r6,108(sp)
 800eed4:	00c001c4 	movi	r3,7
 800eed8:	19827616 	blt	r3,r6,800f8b4 <___vfiprintf_internal_r+0xfbc>
 800eedc:	4cf9c83a 	sub	fp,r9,r19
 800eee0:	42000204 	addi	r8,r8,8
 800eee4:	31000044 	addi	r4,r6,1
 800eee8:	300b883a 	mov	r5,r6
 800eeec:	07018516 	blt	zero,fp,800f504 <___vfiprintf_internal_r+0xc0c>
 800eef0:	9885883a 	add	r2,r19,r2
 800eef4:	45400015 	stw	r21,0(r8)
 800eef8:	44c00115 	stw	r19,4(r8)
 800eefc:	d8801c15 	stw	r2,112(sp)
 800ef00:	d9001b15 	stw	r4,108(sp)
 800ef04:	00c001c4 	movi	r3,7
 800ef08:	1901dd0e 	bge	r3,r4,800f680 <___vfiprintf_internal_r+0xd88>
 800ef0c:	1002401e 	bne	r2,zero,800f810 <___vfiprintf_internal_r+0xf18>
 800ef10:	d8001b15 	stw	zero,108(sp)
 800ef14:	a2c0010c 	andi	r11,r20,4
 800ef18:	58000226 	beq	r11,zero,800ef24 <___vfiprintf_internal_r+0x62c>
 800ef1c:	8ca7c83a 	sub	r19,r17,r18
 800ef20:	04c2f216 	blt	zero,r19,800faec <___vfiprintf_internal_r+0x11f4>
 800ef24:	8c80010e 	bge	r17,r18,800ef2c <___vfiprintf_internal_r+0x634>
 800ef28:	9023883a 	mov	r17,r18
 800ef2c:	da802317 	ldw	r10,140(sp)
 800ef30:	5455883a 	add	r10,r10,r17
 800ef34:	da802315 	stw	r10,140(sp)
 800ef38:	d8001b15 	stw	zero,108(sp)
 800ef3c:	d811883a 	mov	r8,sp
 800ef40:	003ea206 	br	800e9cc <__alt_data_end+0xfc00e9cc>
 800ef44:	a5000814 	ori	r20,r20,32
 800ef48:	80c00007 	ldb	r3,0(r16)
 800ef4c:	003ec906 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800ef50:	80c00007 	ldb	r3,0(r16)
 800ef54:	1b030926 	beq	r3,r12,800fb7c <___vfiprintf_internal_r+0x1284>
 800ef58:	a5000414 	ori	r20,r20,16
 800ef5c:	003ec506 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800ef60:	21003fcc 	andi	r4,r4,255
 800ef64:	20035e1e 	bne	r4,zero,800fce0 <___vfiprintf_internal_r+0x13e8>
 800ef68:	a080080c 	andi	r2,r20,32
 800ef6c:	1002a526 	beq	r2,zero,800fa04 <___vfiprintf_internal_r+0x110c>
 800ef70:	da802217 	ldw	r10,136(sp)
 800ef74:	50800017 	ldw	r2,0(r10)
 800ef78:	da802317 	ldw	r10,140(sp)
 800ef7c:	5007d7fa 	srai	r3,r10,31
 800ef80:	da802217 	ldw	r10,136(sp)
 800ef84:	10c00115 	stw	r3,4(r2)
 800ef88:	52800104 	addi	r10,r10,4
 800ef8c:	da802215 	stw	r10,136(sp)
 800ef90:	da802317 	ldw	r10,140(sp)
 800ef94:	12800015 	stw	r10,0(r2)
 800ef98:	003e8c06 	br	800e9cc <__alt_data_end+0xfc00e9cc>
 800ef9c:	21003fcc 	andi	r4,r4,255
 800efa0:	2003511e 	bne	r4,zero,800fce8 <___vfiprintf_internal_r+0x13f0>
 800efa4:	a080080c 	andi	r2,r20,32
 800efa8:	1000a126 	beq	r2,zero,800f230 <___vfiprintf_internal_r+0x938>
 800efac:	da802217 	ldw	r10,136(sp)
 800efb0:	d8001d85 	stb	zero,118(sp)
 800efb4:	50800204 	addi	r2,r10,8
 800efb8:	54800017 	ldw	r18,0(r10)
 800efbc:	54c00117 	ldw	r19,4(r10)
 800efc0:	4802b416 	blt	r9,zero,800fa94 <___vfiprintf_internal_r+0x119c>
 800efc4:	013fdfc4 	movi	r4,-129
 800efc8:	94c6b03a 	or	r3,r18,r19
 800efcc:	d8802215 	stw	r2,136(sp)
 800efd0:	a128703a 	and	r20,r20,r4
 800efd4:	1800a226 	beq	r3,zero,800f260 <___vfiprintf_internal_r+0x968>
 800efd8:	0039883a 	mov	fp,zero
 800efdc:	dd401a04 	addi	r21,sp,104
 800efe0:	9006d0fa 	srli	r3,r18,3
 800efe4:	9808977a 	slli	r4,r19,29
 800efe8:	9826d0fa 	srli	r19,r19,3
 800efec:	948001cc 	andi	r18,r18,7
 800eff0:	90800c04 	addi	r2,r18,48
 800eff4:	ad7fffc4 	addi	r21,r21,-1
 800eff8:	20e4b03a 	or	r18,r4,r3
 800effc:	a8800005 	stb	r2,0(r21)
 800f000:	94c6b03a 	or	r3,r18,r19
 800f004:	183ff61e 	bne	r3,zero,800efe0 <__alt_data_end+0xfc00efe0>
 800f008:	a0c0004c 	andi	r3,r20,1
 800f00c:	18005926 	beq	r3,zero,800f174 <___vfiprintf_internal_r+0x87c>
 800f010:	10803fcc 	andi	r2,r2,255
 800f014:	1080201c 	xori	r2,r2,128
 800f018:	10bfe004 	addi	r2,r2,-128
 800f01c:	00c00c04 	movi	r3,48
 800f020:	10c05426 	beq	r2,r3,800f174 <___vfiprintf_internal_r+0x87c>
 800f024:	da801e17 	ldw	r10,120(sp)
 800f028:	a8bfffc4 	addi	r2,r21,-1
 800f02c:	a8ffffc5 	stb	r3,-1(r21)
 800f030:	50a7c83a 	sub	r19,r10,r2
 800f034:	102b883a 	mov	r21,r2
 800f038:	003f2f06 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800f03c:	21003fcc 	andi	r4,r4,255
 800f040:	2003421e 	bne	r4,zero,800fd4c <___vfiprintf_internal_r+0x1454>
 800f044:	00820074 	movhi	r2,2049
 800f048:	10968b04 	addi	r2,r2,23084
 800f04c:	d8802615 	stw	r2,152(sp)
 800f050:	a080080c 	andi	r2,r20,32
 800f054:	1000aa26 	beq	r2,zero,800f300 <___vfiprintf_internal_r+0xa08>
 800f058:	da802217 	ldw	r10,136(sp)
 800f05c:	54800017 	ldw	r18,0(r10)
 800f060:	54c00117 	ldw	r19,4(r10)
 800f064:	52800204 	addi	r10,r10,8
 800f068:	da802215 	stw	r10,136(sp)
 800f06c:	a080004c 	andi	r2,r20,1
 800f070:	1001d226 	beq	r2,zero,800f7bc <___vfiprintf_internal_r+0xec4>
 800f074:	94c4b03a 	or	r2,r18,r19
 800f078:	1002351e 	bne	r2,zero,800f950 <___vfiprintf_internal_r+0x1058>
 800f07c:	d8001d85 	stb	zero,118(sp)
 800f080:	48022216 	blt	r9,zero,800f90c <___vfiprintf_internal_r+0x1014>
 800f084:	00bfdfc4 	movi	r2,-129
 800f088:	a0a8703a 	and	r20,r20,r2
 800f08c:	003f1506 	br	800ece4 <__alt_data_end+0xfc00ece4>
 800f090:	da802217 	ldw	r10,136(sp)
 800f094:	04800044 	movi	r18,1
 800f098:	d8001d85 	stb	zero,118(sp)
 800f09c:	50800017 	ldw	r2,0(r10)
 800f0a0:	52800104 	addi	r10,r10,4
 800f0a4:	da802215 	stw	r10,136(sp)
 800f0a8:	d8801005 	stb	r2,64(sp)
 800f0ac:	9027883a 	mov	r19,r18
 800f0b0:	dd401004 	addi	r21,sp,64
 800f0b4:	0013883a 	mov	r9,zero
 800f0b8:	003f1706 	br	800ed18 <__alt_data_end+0xfc00ed18>
 800f0bc:	21003fcc 	andi	r4,r4,255
 800f0c0:	2003201e 	bne	r4,zero,800fd44 <___vfiprintf_internal_r+0x144c>
 800f0c4:	a080080c 	andi	r2,r20,32
 800f0c8:	10004b26 	beq	r2,zero,800f1f8 <___vfiprintf_internal_r+0x900>
 800f0cc:	da802217 	ldw	r10,136(sp)
 800f0d0:	50800117 	ldw	r2,4(r10)
 800f0d4:	54800017 	ldw	r18,0(r10)
 800f0d8:	52800204 	addi	r10,r10,8
 800f0dc:	da802215 	stw	r10,136(sp)
 800f0e0:	1027883a 	mov	r19,r2
 800f0e4:	10022c16 	blt	r2,zero,800f998 <___vfiprintf_internal_r+0x10a0>
 800f0e8:	df001d83 	ldbu	fp,118(sp)
 800f0ec:	48007216 	blt	r9,zero,800f2b8 <___vfiprintf_internal_r+0x9c0>
 800f0f0:	00ffdfc4 	movi	r3,-129
 800f0f4:	94c4b03a 	or	r2,r18,r19
 800f0f8:	a0e8703a 	and	r20,r20,r3
 800f0fc:	1000cc26 	beq	r2,zero,800f430 <___vfiprintf_internal_r+0xb38>
 800f100:	98021026 	beq	r19,zero,800f944 <___vfiprintf_internal_r+0x104c>
 800f104:	dc402415 	stw	r17,144(sp)
 800f108:	dc002515 	stw	r16,148(sp)
 800f10c:	9823883a 	mov	r17,r19
 800f110:	9021883a 	mov	r16,r18
 800f114:	dd401a04 	addi	r21,sp,104
 800f118:	4825883a 	mov	r18,r9
 800f11c:	4027883a 	mov	r19,r8
 800f120:	8009883a 	mov	r4,r16
 800f124:	880b883a 	mov	r5,r17
 800f128:	01800284 	movi	r6,10
 800f12c:	000f883a 	mov	r7,zero
 800f130:	8010cd80 	call	8010cd8 <__umoddi3>
 800f134:	10800c04 	addi	r2,r2,48
 800f138:	ad7fffc4 	addi	r21,r21,-1
 800f13c:	8009883a 	mov	r4,r16
 800f140:	880b883a 	mov	r5,r17
 800f144:	a8800005 	stb	r2,0(r21)
 800f148:	01800284 	movi	r6,10
 800f14c:	000f883a 	mov	r7,zero
 800f150:	80107600 	call	8010760 <__udivdi3>
 800f154:	1021883a 	mov	r16,r2
 800f158:	10c4b03a 	or	r2,r2,r3
 800f15c:	1823883a 	mov	r17,r3
 800f160:	103fef1e 	bne	r2,zero,800f120 <__alt_data_end+0xfc00f120>
 800f164:	dc402417 	ldw	r17,144(sp)
 800f168:	dc002517 	ldw	r16,148(sp)
 800f16c:	9013883a 	mov	r9,r18
 800f170:	9811883a 	mov	r8,r19
 800f174:	da801e17 	ldw	r10,120(sp)
 800f178:	5567c83a 	sub	r19,r10,r21
 800f17c:	003ede06 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800f180:	38803fcc 	andi	r2,r7,255
 800f184:	1080201c 	xori	r2,r2,128
 800f188:	10bfe004 	addi	r2,r2,-128
 800f18c:	1002371e 	bne	r2,zero,800fa6c <___vfiprintf_internal_r+0x1174>
 800f190:	01000044 	movi	r4,1
 800f194:	01c00804 	movi	r7,32
 800f198:	80c00007 	ldb	r3,0(r16)
 800f19c:	003e3506 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f1a0:	a5000054 	ori	r20,r20,1
 800f1a4:	80c00007 	ldb	r3,0(r16)
 800f1a8:	003e3206 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f1ac:	a5002014 	ori	r20,r20,128
 800f1b0:	80c00007 	ldb	r3,0(r16)
 800f1b4:	003e2f06 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f1b8:	8015883a 	mov	r10,r16
 800f1bc:	0023883a 	mov	r17,zero
 800f1c0:	18bff404 	addi	r2,r3,-48
 800f1c4:	50c00007 	ldb	r3,0(r10)
 800f1c8:	8c4002a4 	muli	r17,r17,10
 800f1cc:	84000044 	addi	r16,r16,1
 800f1d0:	8015883a 	mov	r10,r16
 800f1d4:	1463883a 	add	r17,r2,r17
 800f1d8:	18bff404 	addi	r2,r3,-48
 800f1dc:	30bff92e 	bgeu	r6,r2,800f1c4 <__alt_data_end+0xfc00f1c4>
 800f1e0:	003e2506 	br	800ea78 <__alt_data_end+0xfc00ea78>
 800f1e4:	21003fcc 	andi	r4,r4,255
 800f1e8:	2002d41e 	bne	r4,zero,800fd3c <___vfiprintf_internal_r+0x1444>
 800f1ec:	a5000414 	ori	r20,r20,16
 800f1f0:	a080080c 	andi	r2,r20,32
 800f1f4:	103fb51e 	bne	r2,zero,800f0cc <__alt_data_end+0xfc00f0cc>
 800f1f8:	a080040c 	andi	r2,r20,16
 800f1fc:	1001f826 	beq	r2,zero,800f9e0 <___vfiprintf_internal_r+0x10e8>
 800f200:	da802217 	ldw	r10,136(sp)
 800f204:	54800017 	ldw	r18,0(r10)
 800f208:	52800104 	addi	r10,r10,4
 800f20c:	da802215 	stw	r10,136(sp)
 800f210:	9027d7fa 	srai	r19,r18,31
 800f214:	9805883a 	mov	r2,r19
 800f218:	003fb206 	br	800f0e4 <__alt_data_end+0xfc00f0e4>
 800f21c:	21003fcc 	andi	r4,r4,255
 800f220:	2002c41e 	bne	r4,zero,800fd34 <___vfiprintf_internal_r+0x143c>
 800f224:	a5000414 	ori	r20,r20,16
 800f228:	a080080c 	andi	r2,r20,32
 800f22c:	103f5f1e 	bne	r2,zero,800efac <__alt_data_end+0xfc00efac>
 800f230:	a080040c 	andi	r2,r20,16
 800f234:	10020f26 	beq	r2,zero,800fa74 <___vfiprintf_internal_r+0x117c>
 800f238:	da802217 	ldw	r10,136(sp)
 800f23c:	d8001d85 	stb	zero,118(sp)
 800f240:	0027883a 	mov	r19,zero
 800f244:	50800104 	addi	r2,r10,4
 800f248:	54800017 	ldw	r18,0(r10)
 800f24c:	48021116 	blt	r9,zero,800fa94 <___vfiprintf_internal_r+0x119c>
 800f250:	00ffdfc4 	movi	r3,-129
 800f254:	d8802215 	stw	r2,136(sp)
 800f258:	a0e8703a 	and	r20,r20,r3
 800f25c:	903f5e1e 	bne	r18,zero,800efd8 <__alt_data_end+0xfc00efd8>
 800f260:	0039883a 	mov	fp,zero
 800f264:	4802a626 	beq	r9,zero,800fd00 <___vfiprintf_internal_r+0x1408>
 800f268:	0025883a 	mov	r18,zero
 800f26c:	0027883a 	mov	r19,zero
 800f270:	003f5a06 	br	800efdc <__alt_data_end+0xfc00efdc>
 800f274:	21003fcc 	andi	r4,r4,255
 800f278:	20029f1e 	bne	r4,zero,800fcf8 <___vfiprintf_internal_r+0x1400>
 800f27c:	a5000414 	ori	r20,r20,16
 800f280:	a080080c 	andi	r2,r20,32
 800f284:	10005e1e 	bne	r2,zero,800f400 <___vfiprintf_internal_r+0xb08>
 800f288:	a080040c 	andi	r2,r20,16
 800f28c:	1001a21e 	bne	r2,zero,800f918 <___vfiprintf_internal_r+0x1020>
 800f290:	a080100c 	andi	r2,r20,64
 800f294:	d8001d85 	stb	zero,118(sp)
 800f298:	da802217 	ldw	r10,136(sp)
 800f29c:	1002231e 	bne	r2,zero,800fb2c <___vfiprintf_internal_r+0x1234>
 800f2a0:	50800104 	addi	r2,r10,4
 800f2a4:	54800017 	ldw	r18,0(r10)
 800f2a8:	0027883a 	mov	r19,zero
 800f2ac:	4801a00e 	bge	r9,zero,800f930 <___vfiprintf_internal_r+0x1038>
 800f2b0:	d8802215 	stw	r2,136(sp)
 800f2b4:	0039883a 	mov	fp,zero
 800f2b8:	94c4b03a 	or	r2,r18,r19
 800f2bc:	103f901e 	bne	r2,zero,800f100 <__alt_data_end+0xfc00f100>
 800f2c0:	00800044 	movi	r2,1
 800f2c4:	10803fcc 	andi	r2,r2,255
 800f2c8:	00c00044 	movi	r3,1
 800f2cc:	10c05926 	beq	r2,r3,800f434 <___vfiprintf_internal_r+0xb3c>
 800f2d0:	00c00084 	movi	r3,2
 800f2d4:	10ffe41e 	bne	r2,r3,800f268 <__alt_data_end+0xfc00f268>
 800f2d8:	0025883a 	mov	r18,zero
 800f2dc:	0027883a 	mov	r19,zero
 800f2e0:	00013d06 	br	800f7d8 <___vfiprintf_internal_r+0xee0>
 800f2e4:	21003fcc 	andi	r4,r4,255
 800f2e8:	2002811e 	bne	r4,zero,800fcf0 <___vfiprintf_internal_r+0x13f8>
 800f2ec:	00820074 	movhi	r2,2049
 800f2f0:	10968604 	addi	r2,r2,23064
 800f2f4:	d8802615 	stw	r2,152(sp)
 800f2f8:	a080080c 	andi	r2,r20,32
 800f2fc:	103f561e 	bne	r2,zero,800f058 <__alt_data_end+0xfc00f058>
 800f300:	a080040c 	andi	r2,r20,16
 800f304:	1001d126 	beq	r2,zero,800fa4c <___vfiprintf_internal_r+0x1154>
 800f308:	da802217 	ldw	r10,136(sp)
 800f30c:	0027883a 	mov	r19,zero
 800f310:	54800017 	ldw	r18,0(r10)
 800f314:	52800104 	addi	r10,r10,4
 800f318:	da802215 	stw	r10,136(sp)
 800f31c:	003f5306 	br	800f06c <__alt_data_end+0xfc00f06c>
 800f320:	da802217 	ldw	r10,136(sp)
 800f324:	d8001d85 	stb	zero,118(sp)
 800f328:	55400017 	ldw	r21,0(r10)
 800f32c:	50c00104 	addi	r3,r10,4
 800f330:	a8024226 	beq	r21,zero,800fc3c <___vfiprintf_internal_r+0x1344>
 800f334:	48021816 	blt	r9,zero,800fb98 <___vfiprintf_internal_r+0x12a0>
 800f338:	480d883a 	mov	r6,r9
 800f33c:	000b883a 	mov	r5,zero
 800f340:	a809883a 	mov	r4,r21
 800f344:	d8c02a15 	stw	r3,168(sp)
 800f348:	da002b15 	stw	r8,172(sp)
 800f34c:	da402c15 	stw	r9,176(sp)
 800f350:	800cb680 	call	800cb68 <memchr>
 800f354:	d8c02a17 	ldw	r3,168(sp)
 800f358:	da002b17 	ldw	r8,172(sp)
 800f35c:	da402c17 	ldw	r9,176(sp)
 800f360:	10024826 	beq	r2,zero,800fc84 <___vfiprintf_internal_r+0x138c>
 800f364:	1567c83a 	sub	r19,r2,r21
 800f368:	df001d83 	ldbu	fp,118(sp)
 800f36c:	d8c02215 	stw	r3,136(sp)
 800f370:	0013883a 	mov	r9,zero
 800f374:	003e6006 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800f378:	21003fcc 	andi	r4,r4,255
 800f37c:	203fc026 	beq	r4,zero,800f280 <__alt_data_end+0xfc00f280>
 800f380:	d9c01d85 	stb	r7,118(sp)
 800f384:	003fbe06 	br	800f280 <__alt_data_end+0xfc00f280>
 800f388:	da802217 	ldw	r10,136(sp)
 800f38c:	54400017 	ldw	r17,0(r10)
 800f390:	50800104 	addi	r2,r10,4
 800f394:	883e3b16 	blt	r17,zero,800ec84 <__alt_data_end+0xfc00ec84>
 800f398:	d8802215 	stw	r2,136(sp)
 800f39c:	80c00007 	ldb	r3,0(r16)
 800f3a0:	003db406 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f3a4:	01000044 	movi	r4,1
 800f3a8:	01c00ac4 	movi	r7,43
 800f3ac:	80c00007 	ldb	r3,0(r16)
 800f3b0:	003db006 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f3b4:	80c00007 	ldb	r3,0(r16)
 800f3b8:	82800044 	addi	r10,r16,1
 800f3bc:	1b423c26 	beq	r3,r13,800fcb0 <___vfiprintf_internal_r+0x13b8>
 800f3c0:	18bff404 	addi	r2,r3,-48
 800f3c4:	0013883a 	mov	r9,zero
 800f3c8:	30822b36 	bltu	r6,r2,800fc78 <___vfiprintf_internal_r+0x1380>
 800f3cc:	50c00007 	ldb	r3,0(r10)
 800f3d0:	4a4002a4 	muli	r9,r9,10
 800f3d4:	54000044 	addi	r16,r10,1
 800f3d8:	8015883a 	mov	r10,r16
 800f3dc:	4893883a 	add	r9,r9,r2
 800f3e0:	18bff404 	addi	r2,r3,-48
 800f3e4:	30bff92e 	bgeu	r6,r2,800f3cc <__alt_data_end+0xfc00f3cc>
 800f3e8:	483da30e 	bge	r9,zero,800ea78 <__alt_data_end+0xfc00ea78>
 800f3ec:	027fffc4 	movi	r9,-1
 800f3f0:	003da106 	br	800ea78 <__alt_data_end+0xfc00ea78>
 800f3f4:	a5001014 	ori	r20,r20,64
 800f3f8:	80c00007 	ldb	r3,0(r16)
 800f3fc:	003d9d06 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f400:	da802217 	ldw	r10,136(sp)
 800f404:	d8001d85 	stb	zero,118(sp)
 800f408:	50c00204 	addi	r3,r10,8
 800f40c:	54800017 	ldw	r18,0(r10)
 800f410:	54c00117 	ldw	r19,4(r10)
 800f414:	4801ca16 	blt	r9,zero,800fb40 <___vfiprintf_internal_r+0x1248>
 800f418:	013fdfc4 	movi	r4,-129
 800f41c:	94c4b03a 	or	r2,r18,r19
 800f420:	d8c02215 	stw	r3,136(sp)
 800f424:	a128703a 	and	r20,r20,r4
 800f428:	0039883a 	mov	fp,zero
 800f42c:	103f341e 	bne	r2,zero,800f100 <__alt_data_end+0xfc00f100>
 800f430:	483e2e26 	beq	r9,zero,800ecec <__alt_data_end+0xfc00ecec>
 800f434:	0025883a 	mov	r18,zero
 800f438:	94800c04 	addi	r18,r18,48
 800f43c:	dc8019c5 	stb	r18,103(sp)
 800f440:	dcc02717 	ldw	r19,156(sp)
 800f444:	dd4019c4 	addi	r21,sp,103
 800f448:	003e2b06 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800f44c:	21003fcc 	andi	r4,r4,255
 800f450:	2002361e 	bne	r4,zero,800fd2c <___vfiprintf_internal_r+0x1434>
 800f454:	1801c126 	beq	r3,zero,800fb5c <___vfiprintf_internal_r+0x1264>
 800f458:	04800044 	movi	r18,1
 800f45c:	d8c01005 	stb	r3,64(sp)
 800f460:	d8001d85 	stb	zero,118(sp)
 800f464:	9027883a 	mov	r19,r18
 800f468:	dd401004 	addi	r21,sp,64
 800f46c:	003f1106 	br	800f0b4 <__alt_data_end+0xfc00f0b4>
 800f470:	d9402117 	ldw	r5,132(sp)
 800f474:	d9002017 	ldw	r4,128(sp)
 800f478:	d9801a04 	addi	r6,sp,104
 800f47c:	d9c02b15 	stw	r7,172(sp)
 800f480:	dbc02a15 	stw	r15,168(sp)
 800f484:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f488:	d9c02b17 	ldw	r7,172(sp)
 800f48c:	dbc02a17 	ldw	r15,168(sp)
 800f490:	10006d1e 	bne	r2,zero,800f648 <___vfiprintf_internal_r+0xd50>
 800f494:	d9801b17 	ldw	r6,108(sp)
 800f498:	d8801c17 	ldw	r2,112(sp)
 800f49c:	d811883a 	mov	r8,sp
 800f4a0:	31400044 	addi	r5,r6,1
 800f4a4:	003e3306 	br	800ed74 <__alt_data_end+0xfc00ed74>
 800f4a8:	d9401b17 	ldw	r5,108(sp)
 800f4ac:	d8801c17 	ldw	r2,112(sp)
 800f4b0:	29000044 	addi	r4,r5,1
 800f4b4:	d8c01d87 	ldb	r3,118(sp)
 800f4b8:	183e4d26 	beq	r3,zero,800edf0 <__alt_data_end+0xfc00edf0>
 800f4bc:	00c00044 	movi	r3,1
 800f4c0:	d9401d84 	addi	r5,sp,118
 800f4c4:	10c5883a 	add	r2,r2,r3
 800f4c8:	41400015 	stw	r5,0(r8)
 800f4cc:	40c00115 	stw	r3,4(r8)
 800f4d0:	d8801c15 	stw	r2,112(sp)
 800f4d4:	d9001b15 	stw	r4,108(sp)
 800f4d8:	014001c4 	movi	r5,7
 800f4dc:	2900a90e 	bge	r5,r4,800f784 <___vfiprintf_internal_r+0xe8c>
 800f4e0:	1000da1e 	bne	r2,zero,800f84c <___vfiprintf_internal_r+0xf54>
 800f4e4:	7000ab1e 	bne	r14,zero,800f794 <___vfiprintf_internal_r+0xe9c>
 800f4e8:	000b883a 	mov	r5,zero
 800f4ec:	1809883a 	mov	r4,r3
 800f4f0:	d811883a 	mov	r8,sp
 800f4f4:	00c02004 	movi	r3,128
 800f4f8:	e0fe4d26 	beq	fp,r3,800ee30 <__alt_data_end+0xfc00ee30>
 800f4fc:	4cf9c83a 	sub	fp,r9,r19
 800f500:	073e7b0e 	bge	zero,fp,800eef0 <__alt_data_end+0xfc00eef0>
 800f504:	01c00404 	movi	r7,16
 800f508:	3f01900e 	bge	r7,fp,800fb4c <___vfiprintf_internal_r+0x1254>
 800f50c:	00c20074 	movhi	r3,2049
 800f510:	18d6eb04 	addi	r3,r3,23468
 800f514:	d8c02415 	stw	r3,144(sp)
 800f518:	034001c4 	movi	r13,7
 800f51c:	00000506 	br	800f534 <___vfiprintf_internal_r+0xc3c>
 800f520:	29000084 	addi	r4,r5,2
 800f524:	42000204 	addi	r8,r8,8
 800f528:	180b883a 	mov	r5,r3
 800f52c:	e73ffc04 	addi	fp,fp,-16
 800f530:	3f000d0e 	bge	r7,fp,800f568 <___vfiprintf_internal_r+0xc70>
 800f534:	10800404 	addi	r2,r2,16
 800f538:	28c00044 	addi	r3,r5,1
 800f53c:	45c00015 	stw	r23,0(r8)
 800f540:	41c00115 	stw	r7,4(r8)
 800f544:	d8801c15 	stw	r2,112(sp)
 800f548:	d8c01b15 	stw	r3,108(sp)
 800f54c:	68fff40e 	bge	r13,r3,800f520 <__alt_data_end+0xfc00f520>
 800f550:	1000101e 	bne	r2,zero,800f594 <___vfiprintf_internal_r+0xc9c>
 800f554:	e73ffc04 	addi	fp,fp,-16
 800f558:	01000044 	movi	r4,1
 800f55c:	000b883a 	mov	r5,zero
 800f560:	d811883a 	mov	r8,sp
 800f564:	3f3ff316 	blt	r7,fp,800f534 <__alt_data_end+0xfc00f534>
 800f568:	da802417 	ldw	r10,144(sp)
 800f56c:	1705883a 	add	r2,r2,fp
 800f570:	47000115 	stw	fp,4(r8)
 800f574:	42800015 	stw	r10,0(r8)
 800f578:	d8801c15 	stw	r2,112(sp)
 800f57c:	d9001b15 	stw	r4,108(sp)
 800f580:	00c001c4 	movi	r3,7
 800f584:	19003616 	blt	r3,r4,800f660 <___vfiprintf_internal_r+0xd68>
 800f588:	42000204 	addi	r8,r8,8
 800f58c:	21000044 	addi	r4,r4,1
 800f590:	003e5706 	br	800eef0 <__alt_data_end+0xfc00eef0>
 800f594:	d9402117 	ldw	r5,132(sp)
 800f598:	d9002017 	ldw	r4,128(sp)
 800f59c:	d9801a04 	addi	r6,sp,104
 800f5a0:	d9c02b15 	stw	r7,172(sp)
 800f5a4:	db402a15 	stw	r13,168(sp)
 800f5a8:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f5ac:	d9c02b17 	ldw	r7,172(sp)
 800f5b0:	db402a17 	ldw	r13,168(sp)
 800f5b4:	1000241e 	bne	r2,zero,800f648 <___vfiprintf_internal_r+0xd50>
 800f5b8:	d9401b17 	ldw	r5,108(sp)
 800f5bc:	d8801c17 	ldw	r2,112(sp)
 800f5c0:	d811883a 	mov	r8,sp
 800f5c4:	29000044 	addi	r4,r5,1
 800f5c8:	003fd806 	br	800f52c <__alt_data_end+0xfc00f52c>
 800f5cc:	d9401b17 	ldw	r5,108(sp)
 800f5d0:	00c20074 	movhi	r3,2049
 800f5d4:	18d6ef04 	addi	r3,r3,23484
 800f5d8:	d8c02415 	stw	r3,144(sp)
 800f5dc:	29400044 	addi	r5,r5,1
 800f5e0:	d8c02417 	ldw	r3,144(sp)
 800f5e4:	14c5883a 	add	r2,r2,r19
 800f5e8:	44c00115 	stw	r19,4(r8)
 800f5ec:	40c00015 	stw	r3,0(r8)
 800f5f0:	d8801c15 	stw	r2,112(sp)
 800f5f4:	d9401b15 	stw	r5,108(sp)
 800f5f8:	00c001c4 	movi	r3,7
 800f5fc:	1940070e 	bge	r3,r5,800f61c <___vfiprintf_internal_r+0xd24>
 800f600:	103e4826 	beq	r2,zero,800ef24 <__alt_data_end+0xfc00ef24>
 800f604:	d9402117 	ldw	r5,132(sp)
 800f608:	d9002017 	ldw	r4,128(sp)
 800f60c:	d9801a04 	addi	r6,sp,104
 800f610:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f614:	10000c1e 	bne	r2,zero,800f648 <___vfiprintf_internal_r+0xd50>
 800f618:	d8801c17 	ldw	r2,112(sp)
 800f61c:	8c80010e 	bge	r17,r18,800f624 <___vfiprintf_internal_r+0xd2c>
 800f620:	9023883a 	mov	r17,r18
 800f624:	da802317 	ldw	r10,140(sp)
 800f628:	5455883a 	add	r10,r10,r17
 800f62c:	da802315 	stw	r10,140(sp)
 800f630:	103e4126 	beq	r2,zero,800ef38 <__alt_data_end+0xfc00ef38>
 800f634:	d9402117 	ldw	r5,132(sp)
 800f638:	d9002017 	ldw	r4,128(sp)
 800f63c:	d9801a04 	addi	r6,sp,104
 800f640:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f644:	103e3c26 	beq	r2,zero,800ef38 <__alt_data_end+0xfc00ef38>
 800f648:	dd002117 	ldw	r20,132(sp)
 800f64c:	a080030b 	ldhu	r2,12(r20)
 800f650:	1080100c 	andi	r2,r2,64
 800f654:	1001231e 	bne	r2,zero,800fae4 <___vfiprintf_internal_r+0x11ec>
 800f658:	d8802317 	ldw	r2,140(sp)
 800f65c:	003d7b06 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800f660:	1000991e 	bne	r2,zero,800f8c8 <___vfiprintf_internal_r+0xfd0>
 800f664:	00c00044 	movi	r3,1
 800f668:	9805883a 	mov	r2,r19
 800f66c:	dd400015 	stw	r21,0(sp)
 800f670:	dcc00115 	stw	r19,4(sp)
 800f674:	dcc01c15 	stw	r19,112(sp)
 800f678:	d8c01b15 	stw	r3,108(sp)
 800f67c:	d811883a 	mov	r8,sp
 800f680:	42000204 	addi	r8,r8,8
 800f684:	a2c0010c 	andi	r11,r20,4
 800f688:	583fe426 	beq	r11,zero,800f61c <__alt_data_end+0xfc00f61c>
 800f68c:	8ca7c83a 	sub	r19,r17,r18
 800f690:	04ffe20e 	bge	zero,r19,800f61c <__alt_data_end+0xfc00f61c>
 800f694:	01c00404 	movi	r7,16
 800f698:	3cffcc0e 	bge	r7,r19,800f5cc <__alt_data_end+0xfc00f5cc>
 800f69c:	02820074 	movhi	r10,2049
 800f6a0:	5296ef04 	addi	r10,r10,23484
 800f6a4:	d9001b17 	ldw	r4,108(sp)
 800f6a8:	da802415 	stw	r10,144(sp)
 800f6ac:	382b883a 	mov	r21,r7
 800f6b0:	050001c4 	movi	r20,7
 800f6b4:	df002017 	ldw	fp,128(sp)
 800f6b8:	00000506 	br	800f6d0 <___vfiprintf_internal_r+0xdd8>
 800f6bc:	21400084 	addi	r5,r4,2
 800f6c0:	42000204 	addi	r8,r8,8
 800f6c4:	1809883a 	mov	r4,r3
 800f6c8:	9cfffc04 	addi	r19,r19,-16
 800f6cc:	acffc40e 	bge	r21,r19,800f5e0 <__alt_data_end+0xfc00f5e0>
 800f6d0:	10800404 	addi	r2,r2,16
 800f6d4:	20c00044 	addi	r3,r4,1
 800f6d8:	45800015 	stw	r22,0(r8)
 800f6dc:	45400115 	stw	r21,4(r8)
 800f6e0:	d8801c15 	stw	r2,112(sp)
 800f6e4:	d8c01b15 	stw	r3,108(sp)
 800f6e8:	a0fff40e 	bge	r20,r3,800f6bc <__alt_data_end+0xfc00f6bc>
 800f6ec:	1000041e 	bne	r2,zero,800f700 <___vfiprintf_internal_r+0xe08>
 800f6f0:	01400044 	movi	r5,1
 800f6f4:	0009883a 	mov	r4,zero
 800f6f8:	d811883a 	mov	r8,sp
 800f6fc:	003ff206 	br	800f6c8 <__alt_data_end+0xfc00f6c8>
 800f700:	d9402117 	ldw	r5,132(sp)
 800f704:	d9801a04 	addi	r6,sp,104
 800f708:	e009883a 	mov	r4,fp
 800f70c:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f710:	103fcd1e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f714:	d9001b17 	ldw	r4,108(sp)
 800f718:	d8801c17 	ldw	r2,112(sp)
 800f71c:	d811883a 	mov	r8,sp
 800f720:	21400044 	addi	r5,r4,1
 800f724:	003fe806 	br	800f6c8 <__alt_data_end+0xfc00f6c8>
 800f728:	d9402117 	ldw	r5,132(sp)
 800f72c:	d9002017 	ldw	r4,128(sp)
 800f730:	d9801a04 	addi	r6,sp,104
 800f734:	d9c02b15 	stw	r7,172(sp)
 800f738:	db402a15 	stw	r13,168(sp)
 800f73c:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f740:	d9c02b17 	ldw	r7,172(sp)
 800f744:	db402a17 	ldw	r13,168(sp)
 800f748:	103fbf1e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f74c:	d9401b17 	ldw	r5,108(sp)
 800f750:	d8801c17 	ldw	r2,112(sp)
 800f754:	d811883a 	mov	r8,sp
 800f758:	29800044 	addi	r6,r5,1
 800f75c:	003dc406 	br	800ee70 <__alt_data_end+0xfc00ee70>
 800f760:	1000d21e 	bne	r2,zero,800faac <___vfiprintf_internal_r+0x11b4>
 800f764:	d8c01d87 	ldb	r3,118(sp)
 800f768:	18009526 	beq	r3,zero,800f9c0 <___vfiprintf_internal_r+0x10c8>
 800f76c:	00800044 	movi	r2,1
 800f770:	d8c01d84 	addi	r3,sp,118
 800f774:	1009883a 	mov	r4,r2
 800f778:	d8c00015 	stw	r3,0(sp)
 800f77c:	d8800115 	stw	r2,4(sp)
 800f780:	d811883a 	mov	r8,sp
 800f784:	200b883a 	mov	r5,r4
 800f788:	42000204 	addi	r8,r8,8
 800f78c:	21000044 	addi	r4,r4,1
 800f790:	003d9706 	br	800edf0 <__alt_data_end+0xfc00edf0>
 800f794:	d9001d04 	addi	r4,sp,116
 800f798:	00800084 	movi	r2,2
 800f79c:	d9000015 	stw	r4,0(sp)
 800f7a0:	d8800115 	stw	r2,4(sp)
 800f7a4:	1809883a 	mov	r4,r3
 800f7a8:	d811883a 	mov	r8,sp
 800f7ac:	200b883a 	mov	r5,r4
 800f7b0:	42000204 	addi	r8,r8,8
 800f7b4:	21000044 	addi	r4,r4,1
 800f7b8:	003f4e06 	br	800f4f4 <__alt_data_end+0xfc00f4f4>
 800f7bc:	d8001d85 	stb	zero,118(sp)
 800f7c0:	48005016 	blt	r9,zero,800f904 <___vfiprintf_internal_r+0x100c>
 800f7c4:	00ffdfc4 	movi	r3,-129
 800f7c8:	94c4b03a 	or	r2,r18,r19
 800f7cc:	a0e8703a 	and	r20,r20,r3
 800f7d0:	103d4426 	beq	r2,zero,800ece4 <__alt_data_end+0xfc00ece4>
 800f7d4:	0039883a 	mov	fp,zero
 800f7d8:	d9002617 	ldw	r4,152(sp)
 800f7dc:	dd401a04 	addi	r21,sp,104
 800f7e0:	908003cc 	andi	r2,r18,15
 800f7e4:	9806973a 	slli	r3,r19,28
 800f7e8:	2085883a 	add	r2,r4,r2
 800f7ec:	9024d13a 	srli	r18,r18,4
 800f7f0:	10800003 	ldbu	r2,0(r2)
 800f7f4:	9826d13a 	srli	r19,r19,4
 800f7f8:	ad7fffc4 	addi	r21,r21,-1
 800f7fc:	1ca4b03a 	or	r18,r3,r18
 800f800:	a8800005 	stb	r2,0(r21)
 800f804:	94c4b03a 	or	r2,r18,r19
 800f808:	103ff51e 	bne	r2,zero,800f7e0 <__alt_data_end+0xfc00f7e0>
 800f80c:	003e5906 	br	800f174 <__alt_data_end+0xfc00f174>
 800f810:	d9402117 	ldw	r5,132(sp)
 800f814:	d9002017 	ldw	r4,128(sp)
 800f818:	d9801a04 	addi	r6,sp,104
 800f81c:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f820:	103f891e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f824:	d8801c17 	ldw	r2,112(sp)
 800f828:	d811883a 	mov	r8,sp
 800f82c:	003f9506 	br	800f684 <__alt_data_end+0xfc00f684>
 800f830:	d9402117 	ldw	r5,132(sp)
 800f834:	d9002017 	ldw	r4,128(sp)
 800f838:	d9801a04 	addi	r6,sp,104
 800f83c:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f840:	103f811e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f844:	d811883a 	mov	r8,sp
 800f848:	003ced06 	br	800ec00 <__alt_data_end+0xfc00ec00>
 800f84c:	d9402117 	ldw	r5,132(sp)
 800f850:	d9002017 	ldw	r4,128(sp)
 800f854:	d9801a04 	addi	r6,sp,104
 800f858:	da402c15 	stw	r9,176(sp)
 800f85c:	db802a15 	stw	r14,168(sp)
 800f860:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f864:	da402c17 	ldw	r9,176(sp)
 800f868:	db802a17 	ldw	r14,168(sp)
 800f86c:	103f761e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f870:	d9401b17 	ldw	r5,108(sp)
 800f874:	d8801c17 	ldw	r2,112(sp)
 800f878:	d811883a 	mov	r8,sp
 800f87c:	29000044 	addi	r4,r5,1
 800f880:	003d5b06 	br	800edf0 <__alt_data_end+0xfc00edf0>
 800f884:	d9402117 	ldw	r5,132(sp)
 800f888:	d9002017 	ldw	r4,128(sp)
 800f88c:	d9801a04 	addi	r6,sp,104
 800f890:	da402c15 	stw	r9,176(sp)
 800f894:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f898:	da402c17 	ldw	r9,176(sp)
 800f89c:	103f6a1e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f8a0:	d9401b17 	ldw	r5,108(sp)
 800f8a4:	d8801c17 	ldw	r2,112(sp)
 800f8a8:	d811883a 	mov	r8,sp
 800f8ac:	29000044 	addi	r4,r5,1
 800f8b0:	003f1006 	br	800f4f4 <__alt_data_end+0xfc00f4f4>
 800f8b4:	1000c31e 	bne	r2,zero,800fbc4 <___vfiprintf_internal_r+0x12cc>
 800f8b8:	01000044 	movi	r4,1
 800f8bc:	000b883a 	mov	r5,zero
 800f8c0:	d811883a 	mov	r8,sp
 800f8c4:	003f0d06 	br	800f4fc <__alt_data_end+0xfc00f4fc>
 800f8c8:	d9402117 	ldw	r5,132(sp)
 800f8cc:	d9002017 	ldw	r4,128(sp)
 800f8d0:	d9801a04 	addi	r6,sp,104
 800f8d4:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800f8d8:	103f5b1e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f8dc:	d9001b17 	ldw	r4,108(sp)
 800f8e0:	d8801c17 	ldw	r2,112(sp)
 800f8e4:	d811883a 	mov	r8,sp
 800f8e8:	21000044 	addi	r4,r4,1
 800f8ec:	003d8006 	br	800eef0 <__alt_data_end+0xfc00eef0>
 800f8f0:	01020074 	movhi	r4,2049
 800f8f4:	21168b04 	addi	r4,r4,23084
 800f8f8:	d9002615 	stw	r4,152(sp)
 800f8fc:	d8c02215 	stw	r3,136(sp)
 800f900:	1029883a 	mov	r20,r2
 800f904:	94c4b03a 	or	r2,r18,r19
 800f908:	103fb21e 	bne	r2,zero,800f7d4 <__alt_data_end+0xfc00f7d4>
 800f90c:	0039883a 	mov	fp,zero
 800f910:	00800084 	movi	r2,2
 800f914:	003e6b06 	br	800f2c4 <__alt_data_end+0xfc00f2c4>
 800f918:	da802217 	ldw	r10,136(sp)
 800f91c:	d8001d85 	stb	zero,118(sp)
 800f920:	0027883a 	mov	r19,zero
 800f924:	50800104 	addi	r2,r10,4
 800f928:	54800017 	ldw	r18,0(r10)
 800f92c:	483e6016 	blt	r9,zero,800f2b0 <__alt_data_end+0xfc00f2b0>
 800f930:	00ffdfc4 	movi	r3,-129
 800f934:	d8802215 	stw	r2,136(sp)
 800f938:	a0e8703a 	and	r20,r20,r3
 800f93c:	0039883a 	mov	fp,zero
 800f940:	903ebb26 	beq	r18,zero,800f430 <__alt_data_end+0xfc00f430>
 800f944:	00800244 	movi	r2,9
 800f948:	14bdee36 	bltu	r2,r18,800f104 <__alt_data_end+0xfc00f104>
 800f94c:	003eba06 	br	800f438 <__alt_data_end+0xfc00f438>
 800f950:	00800c04 	movi	r2,48
 800f954:	d8c01d45 	stb	r3,117(sp)
 800f958:	d8801d05 	stb	r2,116(sp)
 800f95c:	d8001d85 	stb	zero,118(sp)
 800f960:	a0c00094 	ori	r3,r20,2
 800f964:	4800a916 	blt	r9,zero,800fc0c <___vfiprintf_internal_r+0x1314>
 800f968:	00bfdfc4 	movi	r2,-129
 800f96c:	a096703a 	and	r11,r20,r2
 800f970:	5d000094 	ori	r20,r11,2
 800f974:	0039883a 	mov	fp,zero
 800f978:	003f9706 	br	800f7d8 <__alt_data_end+0xfc00f7d8>
 800f97c:	8025883a 	mov	r18,r16
 800f980:	003c2e06 	br	800ea3c <__alt_data_end+0xfc00ea3c>
 800f984:	00820074 	movhi	r2,2049
 800f988:	10968b04 	addi	r2,r2,23084
 800f98c:	0039883a 	mov	fp,zero
 800f990:	d8802615 	stw	r2,152(sp)
 800f994:	003f9006 	br	800f7d8 <__alt_data_end+0xfc00f7d8>
 800f998:	04a5c83a 	sub	r18,zero,r18
 800f99c:	07000b44 	movi	fp,45
 800f9a0:	9004c03a 	cmpne	r2,r18,zero
 800f9a4:	04e7c83a 	sub	r19,zero,r19
 800f9a8:	df001d85 	stb	fp,118(sp)
 800f9ac:	98a7c83a 	sub	r19,r19,r2
 800f9b0:	48009f16 	blt	r9,zero,800fc30 <___vfiprintf_internal_r+0x1338>
 800f9b4:	00bfdfc4 	movi	r2,-129
 800f9b8:	a0a8703a 	and	r20,r20,r2
 800f9bc:	003dd006 	br	800f100 <__alt_data_end+0xfc00f100>
 800f9c0:	70004c26 	beq	r14,zero,800faf4 <___vfiprintf_internal_r+0x11fc>
 800f9c4:	00800084 	movi	r2,2
 800f9c8:	d8c01d04 	addi	r3,sp,116
 800f9cc:	d8c00015 	stw	r3,0(sp)
 800f9d0:	d8800115 	stw	r2,4(sp)
 800f9d4:	01000044 	movi	r4,1
 800f9d8:	d811883a 	mov	r8,sp
 800f9dc:	003f7306 	br	800f7ac <__alt_data_end+0xfc00f7ac>
 800f9e0:	a080100c 	andi	r2,r20,64
 800f9e4:	da802217 	ldw	r10,136(sp)
 800f9e8:	103e0626 	beq	r2,zero,800f204 <__alt_data_end+0xfc00f204>
 800f9ec:	5480000f 	ldh	r18,0(r10)
 800f9f0:	52800104 	addi	r10,r10,4
 800f9f4:	da802215 	stw	r10,136(sp)
 800f9f8:	9027d7fa 	srai	r19,r18,31
 800f9fc:	9805883a 	mov	r2,r19
 800fa00:	003db806 	br	800f0e4 <__alt_data_end+0xfc00f0e4>
 800fa04:	a080040c 	andi	r2,r20,16
 800fa08:	1000091e 	bne	r2,zero,800fa30 <___vfiprintf_internal_r+0x1138>
 800fa0c:	a2c0100c 	andi	r11,r20,64
 800fa10:	58000726 	beq	r11,zero,800fa30 <___vfiprintf_internal_r+0x1138>
 800fa14:	da802217 	ldw	r10,136(sp)
 800fa18:	50800017 	ldw	r2,0(r10)
 800fa1c:	52800104 	addi	r10,r10,4
 800fa20:	da802215 	stw	r10,136(sp)
 800fa24:	da802317 	ldw	r10,140(sp)
 800fa28:	1280000d 	sth	r10,0(r2)
 800fa2c:	003be706 	br	800e9cc <__alt_data_end+0xfc00e9cc>
 800fa30:	da802217 	ldw	r10,136(sp)
 800fa34:	50800017 	ldw	r2,0(r10)
 800fa38:	52800104 	addi	r10,r10,4
 800fa3c:	da802215 	stw	r10,136(sp)
 800fa40:	da802317 	ldw	r10,140(sp)
 800fa44:	12800015 	stw	r10,0(r2)
 800fa48:	003be006 	br	800e9cc <__alt_data_end+0xfc00e9cc>
 800fa4c:	a080100c 	andi	r2,r20,64
 800fa50:	da802217 	ldw	r10,136(sp)
 800fa54:	10003026 	beq	r2,zero,800fb18 <___vfiprintf_internal_r+0x1220>
 800fa58:	5480000b 	ldhu	r18,0(r10)
 800fa5c:	52800104 	addi	r10,r10,4
 800fa60:	0027883a 	mov	r19,zero
 800fa64:	da802215 	stw	r10,136(sp)
 800fa68:	003d8006 	br	800f06c <__alt_data_end+0xfc00f06c>
 800fa6c:	80c00007 	ldb	r3,0(r16)
 800fa70:	003c0006 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800fa74:	a080100c 	andi	r2,r20,64
 800fa78:	d8001d85 	stb	zero,118(sp)
 800fa7c:	da802217 	ldw	r10,136(sp)
 800fa80:	1000201e 	bne	r2,zero,800fb04 <___vfiprintf_internal_r+0x120c>
 800fa84:	50800104 	addi	r2,r10,4
 800fa88:	54800017 	ldw	r18,0(r10)
 800fa8c:	0027883a 	mov	r19,zero
 800fa90:	483def0e 	bge	r9,zero,800f250 <__alt_data_end+0xfc00f250>
 800fa94:	94c6b03a 	or	r3,r18,r19
 800fa98:	d8802215 	stw	r2,136(sp)
 800fa9c:	183d4e1e 	bne	r3,zero,800efd8 <__alt_data_end+0xfc00efd8>
 800faa0:	0039883a 	mov	fp,zero
 800faa4:	0005883a 	mov	r2,zero
 800faa8:	003e0606 	br	800f2c4 <__alt_data_end+0xfc00f2c4>
 800faac:	d9402117 	ldw	r5,132(sp)
 800fab0:	d9002017 	ldw	r4,128(sp)
 800fab4:	d9801a04 	addi	r6,sp,104
 800fab8:	da402c15 	stw	r9,176(sp)
 800fabc:	db802a15 	stw	r14,168(sp)
 800fac0:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800fac4:	da402c17 	ldw	r9,176(sp)
 800fac8:	db802a17 	ldw	r14,168(sp)
 800facc:	103ede1e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800fad0:	d9401b17 	ldw	r5,108(sp)
 800fad4:	d8801c17 	ldw	r2,112(sp)
 800fad8:	d811883a 	mov	r8,sp
 800fadc:	29000044 	addi	r4,r5,1
 800fae0:	003e7406 	br	800f4b4 <__alt_data_end+0xfc00f4b4>
 800fae4:	00bfffc4 	movi	r2,-1
 800fae8:	003c5806 	br	800ec4c <__alt_data_end+0xfc00ec4c>
 800faec:	d811883a 	mov	r8,sp
 800faf0:	003ee806 	br	800f694 <__alt_data_end+0xfc00f694>
 800faf4:	000b883a 	mov	r5,zero
 800faf8:	01000044 	movi	r4,1
 800fafc:	d811883a 	mov	r8,sp
 800fb00:	003e7c06 	br	800f4f4 <__alt_data_end+0xfc00f4f4>
 800fb04:	50800104 	addi	r2,r10,4
 800fb08:	5480000b 	ldhu	r18,0(r10)
 800fb0c:	0027883a 	mov	r19,zero
 800fb10:	483dcf0e 	bge	r9,zero,800f250 <__alt_data_end+0xfc00f250>
 800fb14:	003fdf06 	br	800fa94 <__alt_data_end+0xfc00fa94>
 800fb18:	54800017 	ldw	r18,0(r10)
 800fb1c:	52800104 	addi	r10,r10,4
 800fb20:	0027883a 	mov	r19,zero
 800fb24:	da802215 	stw	r10,136(sp)
 800fb28:	003d5006 	br	800f06c <__alt_data_end+0xfc00f06c>
 800fb2c:	50800104 	addi	r2,r10,4
 800fb30:	5480000b 	ldhu	r18,0(r10)
 800fb34:	0027883a 	mov	r19,zero
 800fb38:	483f7d0e 	bge	r9,zero,800f930 <__alt_data_end+0xfc00f930>
 800fb3c:	003ddc06 	br	800f2b0 <__alt_data_end+0xfc00f2b0>
 800fb40:	d8c02215 	stw	r3,136(sp)
 800fb44:	0039883a 	mov	fp,zero
 800fb48:	003ddb06 	br	800f2b8 <__alt_data_end+0xfc00f2b8>
 800fb4c:	02820074 	movhi	r10,2049
 800fb50:	5296eb04 	addi	r10,r10,23468
 800fb54:	da802415 	stw	r10,144(sp)
 800fb58:	003e8306 	br	800f568 <__alt_data_end+0xfc00f568>
 800fb5c:	d8801c17 	ldw	r2,112(sp)
 800fb60:	dd002117 	ldw	r20,132(sp)
 800fb64:	103eb926 	beq	r2,zero,800f64c <__alt_data_end+0xfc00f64c>
 800fb68:	d9002017 	ldw	r4,128(sp)
 800fb6c:	d9801a04 	addi	r6,sp,104
 800fb70:	a00b883a 	mov	r5,r20
 800fb74:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800fb78:	003eb406 	br	800f64c <__alt_data_end+0xfc00f64c>
 800fb7c:	80c00043 	ldbu	r3,1(r16)
 800fb80:	a5000814 	ori	r20,r20,32
 800fb84:	84000044 	addi	r16,r16,1
 800fb88:	18c03fcc 	andi	r3,r3,255
 800fb8c:	18c0201c 	xori	r3,r3,128
 800fb90:	18ffe004 	addi	r3,r3,-128
 800fb94:	003bb706 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800fb98:	a809883a 	mov	r4,r21
 800fb9c:	d8c02a15 	stw	r3,168(sp)
 800fba0:	da002b15 	stw	r8,172(sp)
 800fba4:	80072c00 	call	80072c0 <strlen>
 800fba8:	d8c02a17 	ldw	r3,168(sp)
 800fbac:	1027883a 	mov	r19,r2
 800fbb0:	df001d83 	ldbu	fp,118(sp)
 800fbb4:	d8c02215 	stw	r3,136(sp)
 800fbb8:	0013883a 	mov	r9,zero
 800fbbc:	da002b17 	ldw	r8,172(sp)
 800fbc0:	003c4d06 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800fbc4:	d9402117 	ldw	r5,132(sp)
 800fbc8:	d9002017 	ldw	r4,128(sp)
 800fbcc:	d9801a04 	addi	r6,sp,104
 800fbd0:	da402c15 	stw	r9,176(sp)
 800fbd4:	800e7e40 	call	800e7e4 <__sprint_r.part.0>
 800fbd8:	da402c17 	ldw	r9,176(sp)
 800fbdc:	103e9a1e 	bne	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800fbe0:	d9401b17 	ldw	r5,108(sp)
 800fbe4:	d8801c17 	ldw	r2,112(sp)
 800fbe8:	d811883a 	mov	r8,sp
 800fbec:	29000044 	addi	r4,r5,1
 800fbf0:	003e4206 	br	800f4fc <__alt_data_end+0xfc00f4fc>
 800fbf4:	d9401b17 	ldw	r5,108(sp)
 800fbf8:	01020074 	movhi	r4,2049
 800fbfc:	2116ef04 	addi	r4,r4,23484
 800fc00:	d9002415 	stw	r4,144(sp)
 800fc04:	29400044 	addi	r5,r5,1
 800fc08:	003c6d06 	br	800edc0 <__alt_data_end+0xfc00edc0>
 800fc0c:	0039883a 	mov	fp,zero
 800fc10:	00800084 	movi	r2,2
 800fc14:	10803fcc 	andi	r2,r2,255
 800fc18:	01000044 	movi	r4,1
 800fc1c:	11001e26 	beq	r2,r4,800fc98 <___vfiprintf_internal_r+0x13a0>
 800fc20:	01000084 	movi	r4,2
 800fc24:	11001e1e 	bne	r2,r4,800fca0 <___vfiprintf_internal_r+0x13a8>
 800fc28:	1829883a 	mov	r20,r3
 800fc2c:	003eea06 	br	800f7d8 <__alt_data_end+0xfc00f7d8>
 800fc30:	a007883a 	mov	r3,r20
 800fc34:	00800044 	movi	r2,1
 800fc38:	003ff606 	br	800fc14 <__alt_data_end+0xfc00fc14>
 800fc3c:	00800184 	movi	r2,6
 800fc40:	1240012e 	bgeu	r2,r9,800fc48 <___vfiprintf_internal_r+0x1350>
 800fc44:	1013883a 	mov	r9,r2
 800fc48:	4827883a 	mov	r19,r9
 800fc4c:	4825883a 	mov	r18,r9
 800fc50:	48001516 	blt	r9,zero,800fca8 <___vfiprintf_internal_r+0x13b0>
 800fc54:	05420074 	movhi	r21,2049
 800fc58:	d8c02215 	stw	r3,136(sp)
 800fc5c:	ad569004 	addi	r21,r21,23104
 800fc60:	003d1406 	br	800f0b4 <__alt_data_end+0xfc00f0b4>
 800fc64:	02820074 	movhi	r10,2049
 800fc68:	5296eb04 	addi	r10,r10,23468
 800fc6c:	da802415 	stw	r10,144(sp)
 800fc70:	200d883a 	mov	r6,r4
 800fc74:	003c9106 	br	800eebc <__alt_data_end+0xfc00eebc>
 800fc78:	5021883a 	mov	r16,r10
 800fc7c:	0013883a 	mov	r9,zero
 800fc80:	003b7d06 	br	800ea78 <__alt_data_end+0xfc00ea78>
 800fc84:	4827883a 	mov	r19,r9
 800fc88:	df001d83 	ldbu	fp,118(sp)
 800fc8c:	d8c02215 	stw	r3,136(sp)
 800fc90:	0013883a 	mov	r9,zero
 800fc94:	003c1806 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800fc98:	1829883a 	mov	r20,r3
 800fc9c:	003d1806 	br	800f100 <__alt_data_end+0xfc00f100>
 800fca0:	1829883a 	mov	r20,r3
 800fca4:	003ccd06 	br	800efdc <__alt_data_end+0xfc00efdc>
 800fca8:	0025883a 	mov	r18,zero
 800fcac:	003fe906 	br	800fc54 <__alt_data_end+0xfc00fc54>
 800fcb0:	d8802217 	ldw	r2,136(sp)
 800fcb4:	80c00043 	ldbu	r3,1(r16)
 800fcb8:	5021883a 	mov	r16,r10
 800fcbc:	12400017 	ldw	r9,0(r2)
 800fcc0:	10800104 	addi	r2,r2,4
 800fcc4:	d8802215 	stw	r2,136(sp)
 800fcc8:	483faf0e 	bge	r9,zero,800fb88 <__alt_data_end+0xfc00fb88>
 800fccc:	18c03fcc 	andi	r3,r3,255
 800fcd0:	18c0201c 	xori	r3,r3,128
 800fcd4:	027fffc4 	movi	r9,-1
 800fcd8:	18ffe004 	addi	r3,r3,-128
 800fcdc:	003b6506 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800fce0:	d9c01d85 	stb	r7,118(sp)
 800fce4:	003ca006 	br	800ef68 <__alt_data_end+0xfc00ef68>
 800fce8:	d9c01d85 	stb	r7,118(sp)
 800fcec:	003cad06 	br	800efa4 <__alt_data_end+0xfc00efa4>
 800fcf0:	d9c01d85 	stb	r7,118(sp)
 800fcf4:	003d7d06 	br	800f2ec <__alt_data_end+0xfc00f2ec>
 800fcf8:	d9c01d85 	stb	r7,118(sp)
 800fcfc:	003d5f06 	br	800f27c <__alt_data_end+0xfc00f27c>
 800fd00:	a080004c 	andi	r2,r20,1
 800fd04:	0039883a 	mov	fp,zero
 800fd08:	10000526 	beq	r2,zero,800fd20 <___vfiprintf_internal_r+0x1428>
 800fd0c:	00800c04 	movi	r2,48
 800fd10:	d88019c5 	stb	r2,103(sp)
 800fd14:	dcc02717 	ldw	r19,156(sp)
 800fd18:	dd4019c4 	addi	r21,sp,103
 800fd1c:	003bf606 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800fd20:	0027883a 	mov	r19,zero
 800fd24:	dd401a04 	addi	r21,sp,104
 800fd28:	003bf306 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800fd2c:	d9c01d85 	stb	r7,118(sp)
 800fd30:	003dc806 	br	800f454 <__alt_data_end+0xfc00f454>
 800fd34:	d9c01d85 	stb	r7,118(sp)
 800fd38:	003d3a06 	br	800f224 <__alt_data_end+0xfc00f224>
 800fd3c:	d9c01d85 	stb	r7,118(sp)
 800fd40:	003d2a06 	br	800f1ec <__alt_data_end+0xfc00f1ec>
 800fd44:	d9c01d85 	stb	r7,118(sp)
 800fd48:	003cde06 	br	800f0c4 <__alt_data_end+0xfc00f0c4>
 800fd4c:	d9c01d85 	stb	r7,118(sp)
 800fd50:	003cbc06 	br	800f044 <__alt_data_end+0xfc00f044>

0800fd54 <__vfiprintf_internal>:
 800fd54:	00820074 	movhi	r2,2049
 800fd58:	109df204 	addi	r2,r2,30664
 800fd5c:	300f883a 	mov	r7,r6
 800fd60:	280d883a 	mov	r6,r5
 800fd64:	200b883a 	mov	r5,r4
 800fd68:	11000017 	ldw	r4,0(r2)
 800fd6c:	800e8f81 	jmpi	800e8f8 <___vfiprintf_internal_r>

0800fd70 <__sbprintf>:
 800fd70:	2880030b 	ldhu	r2,12(r5)
 800fd74:	2ac01917 	ldw	r11,100(r5)
 800fd78:	2a80038b 	ldhu	r10,14(r5)
 800fd7c:	2a400717 	ldw	r9,28(r5)
 800fd80:	2a000917 	ldw	r8,36(r5)
 800fd84:	defee204 	addi	sp,sp,-1144
 800fd88:	00c10004 	movi	r3,1024
 800fd8c:	dc011a15 	stw	r16,1128(sp)
 800fd90:	10bfff4c 	andi	r2,r2,65533
 800fd94:	2821883a 	mov	r16,r5
 800fd98:	d8cb883a 	add	r5,sp,r3
 800fd9c:	dc811c15 	stw	r18,1136(sp)
 800fda0:	dc411b15 	stw	r17,1132(sp)
 800fda4:	dfc11d15 	stw	ra,1140(sp)
 800fda8:	2025883a 	mov	r18,r4
 800fdac:	d881030d 	sth	r2,1036(sp)
 800fdb0:	dac11915 	stw	r11,1124(sp)
 800fdb4:	da81038d 	sth	r10,1038(sp)
 800fdb8:	da410715 	stw	r9,1052(sp)
 800fdbc:	da010915 	stw	r8,1060(sp)
 800fdc0:	dec10015 	stw	sp,1024(sp)
 800fdc4:	dec10415 	stw	sp,1040(sp)
 800fdc8:	d8c10215 	stw	r3,1032(sp)
 800fdcc:	d8c10515 	stw	r3,1044(sp)
 800fdd0:	d8010615 	stw	zero,1048(sp)
 800fdd4:	800e8f80 	call	800e8f8 <___vfiprintf_internal_r>
 800fdd8:	1023883a 	mov	r17,r2
 800fddc:	10000416 	blt	r2,zero,800fdf0 <__sbprintf+0x80>
 800fde0:	d9410004 	addi	r5,sp,1024
 800fde4:	9009883a 	mov	r4,r18
 800fde8:	800b2200 	call	800b220 <_fflush_r>
 800fdec:	10000d1e 	bne	r2,zero,800fe24 <__sbprintf+0xb4>
 800fdf0:	d881030b 	ldhu	r2,1036(sp)
 800fdf4:	1080100c 	andi	r2,r2,64
 800fdf8:	10000326 	beq	r2,zero,800fe08 <__sbprintf+0x98>
 800fdfc:	8080030b 	ldhu	r2,12(r16)
 800fe00:	10801014 	ori	r2,r2,64
 800fe04:	8080030d 	sth	r2,12(r16)
 800fe08:	8805883a 	mov	r2,r17
 800fe0c:	dfc11d17 	ldw	ra,1140(sp)
 800fe10:	dc811c17 	ldw	r18,1136(sp)
 800fe14:	dc411b17 	ldw	r17,1132(sp)
 800fe18:	dc011a17 	ldw	r16,1128(sp)
 800fe1c:	dec11e04 	addi	sp,sp,1144
 800fe20:	f800283a 	ret
 800fe24:	047fffc4 	movi	r17,-1
 800fe28:	003ff106 	br	800fdf0 <__alt_data_end+0xfc00fdf0>

0800fe2c <_write_r>:
 800fe2c:	defffd04 	addi	sp,sp,-12
 800fe30:	2805883a 	mov	r2,r5
 800fe34:	dc000015 	stw	r16,0(sp)
 800fe38:	040200b4 	movhi	r16,2050
 800fe3c:	dc400115 	stw	r17,4(sp)
 800fe40:	300b883a 	mov	r5,r6
 800fe44:	8424f904 	addi	r16,r16,-27676
 800fe48:	2023883a 	mov	r17,r4
 800fe4c:	380d883a 	mov	r6,r7
 800fe50:	1009883a 	mov	r4,r2
 800fe54:	dfc00215 	stw	ra,8(sp)
 800fe58:	80000015 	stw	zero,0(r16)
 800fe5c:	8011b340 	call	8011b34 <write>
 800fe60:	00ffffc4 	movi	r3,-1
 800fe64:	10c00526 	beq	r2,r3,800fe7c <_write_r+0x50>
 800fe68:	dfc00217 	ldw	ra,8(sp)
 800fe6c:	dc400117 	ldw	r17,4(sp)
 800fe70:	dc000017 	ldw	r16,0(sp)
 800fe74:	dec00304 	addi	sp,sp,12
 800fe78:	f800283a 	ret
 800fe7c:	80c00017 	ldw	r3,0(r16)
 800fe80:	183ff926 	beq	r3,zero,800fe68 <__alt_data_end+0xfc00fe68>
 800fe84:	88c00015 	stw	r3,0(r17)
 800fe88:	003ff706 	br	800fe68 <__alt_data_end+0xfc00fe68>

0800fe8c <_close_r>:
 800fe8c:	defffd04 	addi	sp,sp,-12
 800fe90:	dc000015 	stw	r16,0(sp)
 800fe94:	040200b4 	movhi	r16,2050
 800fe98:	dc400115 	stw	r17,4(sp)
 800fe9c:	8424f904 	addi	r16,r16,-27676
 800fea0:	2023883a 	mov	r17,r4
 800fea4:	2809883a 	mov	r4,r5
 800fea8:	dfc00215 	stw	ra,8(sp)
 800feac:	80000015 	stw	zero,0(r16)
 800feb0:	80112f40 	call	80112f4 <close>
 800feb4:	00ffffc4 	movi	r3,-1
 800feb8:	10c00526 	beq	r2,r3,800fed0 <_close_r+0x44>
 800febc:	dfc00217 	ldw	ra,8(sp)
 800fec0:	dc400117 	ldw	r17,4(sp)
 800fec4:	dc000017 	ldw	r16,0(sp)
 800fec8:	dec00304 	addi	sp,sp,12
 800fecc:	f800283a 	ret
 800fed0:	80c00017 	ldw	r3,0(r16)
 800fed4:	183ff926 	beq	r3,zero,800febc <__alt_data_end+0xfc00febc>
 800fed8:	88c00015 	stw	r3,0(r17)
 800fedc:	003ff706 	br	800febc <__alt_data_end+0xfc00febc>

0800fee0 <_calloc_r>:
 800fee0:	298b383a 	mul	r5,r5,r6
 800fee4:	defffe04 	addi	sp,sp,-8
 800fee8:	dfc00115 	stw	ra,4(sp)
 800feec:	dc000015 	stw	r16,0(sp)
 800fef0:	800c35c0 	call	800c35c <_malloc_r>
 800fef4:	10002926 	beq	r2,zero,800ff9c <_calloc_r+0xbc>
 800fef8:	11bfff17 	ldw	r6,-4(r2)
 800fefc:	1021883a 	mov	r16,r2
 800ff00:	00bfff04 	movi	r2,-4
 800ff04:	308c703a 	and	r6,r6,r2
 800ff08:	00c00904 	movi	r3,36
 800ff0c:	308d883a 	add	r6,r6,r2
 800ff10:	19801636 	bltu	r3,r6,800ff6c <_calloc_r+0x8c>
 800ff14:	008004c4 	movi	r2,19
 800ff18:	11800b2e 	bgeu	r2,r6,800ff48 <_calloc_r+0x68>
 800ff1c:	80000015 	stw	zero,0(r16)
 800ff20:	80000115 	stw	zero,4(r16)
 800ff24:	008006c4 	movi	r2,27
 800ff28:	11801a2e 	bgeu	r2,r6,800ff94 <_calloc_r+0xb4>
 800ff2c:	80000215 	stw	zero,8(r16)
 800ff30:	80000315 	stw	zero,12(r16)
 800ff34:	30c0151e 	bne	r6,r3,800ff8c <_calloc_r+0xac>
 800ff38:	80000415 	stw	zero,16(r16)
 800ff3c:	80800604 	addi	r2,r16,24
 800ff40:	80000515 	stw	zero,20(r16)
 800ff44:	00000106 	br	800ff4c <_calloc_r+0x6c>
 800ff48:	8005883a 	mov	r2,r16
 800ff4c:	10000015 	stw	zero,0(r2)
 800ff50:	10000115 	stw	zero,4(r2)
 800ff54:	10000215 	stw	zero,8(r2)
 800ff58:	8005883a 	mov	r2,r16
 800ff5c:	dfc00117 	ldw	ra,4(sp)
 800ff60:	dc000017 	ldw	r16,0(sp)
 800ff64:	dec00204 	addi	sp,sp,8
 800ff68:	f800283a 	ret
 800ff6c:	000b883a 	mov	r5,zero
 800ff70:	8009883a 	mov	r4,r16
 800ff74:	800cef00 	call	800cef0 <memset>
 800ff78:	8005883a 	mov	r2,r16
 800ff7c:	dfc00117 	ldw	ra,4(sp)
 800ff80:	dc000017 	ldw	r16,0(sp)
 800ff84:	dec00204 	addi	sp,sp,8
 800ff88:	f800283a 	ret
 800ff8c:	80800404 	addi	r2,r16,16
 800ff90:	003fee06 	br	800ff4c <__alt_data_end+0xfc00ff4c>
 800ff94:	80800204 	addi	r2,r16,8
 800ff98:	003fec06 	br	800ff4c <__alt_data_end+0xfc00ff4c>
 800ff9c:	0005883a 	mov	r2,zero
 800ffa0:	003fee06 	br	800ff5c <__alt_data_end+0xfc00ff5c>

0800ffa4 <_fclose_r>:
 800ffa4:	28003926 	beq	r5,zero,801008c <_fclose_r+0xe8>
 800ffa8:	defffc04 	addi	sp,sp,-16
 800ffac:	dc400115 	stw	r17,4(sp)
 800ffb0:	dc000015 	stw	r16,0(sp)
 800ffb4:	dfc00315 	stw	ra,12(sp)
 800ffb8:	dc800215 	stw	r18,8(sp)
 800ffbc:	2023883a 	mov	r17,r4
 800ffc0:	2821883a 	mov	r16,r5
 800ffc4:	20000226 	beq	r4,zero,800ffd0 <_fclose_r+0x2c>
 800ffc8:	20800e17 	ldw	r2,56(r4)
 800ffcc:	10002726 	beq	r2,zero,801006c <_fclose_r+0xc8>
 800ffd0:	8080030f 	ldh	r2,12(r16)
 800ffd4:	1000071e 	bne	r2,zero,800fff4 <_fclose_r+0x50>
 800ffd8:	0005883a 	mov	r2,zero
 800ffdc:	dfc00317 	ldw	ra,12(sp)
 800ffe0:	dc800217 	ldw	r18,8(sp)
 800ffe4:	dc400117 	ldw	r17,4(sp)
 800ffe8:	dc000017 	ldw	r16,0(sp)
 800ffec:	dec00404 	addi	sp,sp,16
 800fff0:	f800283a 	ret
 800fff4:	800b883a 	mov	r5,r16
 800fff8:	8809883a 	mov	r4,r17
 800fffc:	800b0040 	call	800b004 <__sflush_r>
 8010000:	1025883a 	mov	r18,r2
 8010004:	80800b17 	ldw	r2,44(r16)
 8010008:	10000426 	beq	r2,zero,801001c <_fclose_r+0x78>
 801000c:	81400717 	ldw	r5,28(r16)
 8010010:	8809883a 	mov	r4,r17
 8010014:	103ee83a 	callr	r2
 8010018:	10001616 	blt	r2,zero,8010074 <_fclose_r+0xd0>
 801001c:	8080030b 	ldhu	r2,12(r16)
 8010020:	1080200c 	andi	r2,r2,128
 8010024:	1000151e 	bne	r2,zero,801007c <_fclose_r+0xd8>
 8010028:	81400c17 	ldw	r5,48(r16)
 801002c:	28000526 	beq	r5,zero,8010044 <_fclose_r+0xa0>
 8010030:	80801004 	addi	r2,r16,64
 8010034:	28800226 	beq	r5,r2,8010040 <_fclose_r+0x9c>
 8010038:	8809883a 	mov	r4,r17
 801003c:	800b7700 	call	800b770 <_free_r>
 8010040:	80000c15 	stw	zero,48(r16)
 8010044:	81401117 	ldw	r5,68(r16)
 8010048:	28000326 	beq	r5,zero,8010058 <_fclose_r+0xb4>
 801004c:	8809883a 	mov	r4,r17
 8010050:	800b7700 	call	800b770 <_free_r>
 8010054:	80001115 	stw	zero,68(r16)
 8010058:	800b60c0 	call	800b60c <__sfp_lock_acquire>
 801005c:	8000030d 	sth	zero,12(r16)
 8010060:	800b6100 	call	800b610 <__sfp_lock_release>
 8010064:	9005883a 	mov	r2,r18
 8010068:	003fdc06 	br	800ffdc <__alt_data_end+0xfc00ffdc>
 801006c:	800b5fc0 	call	800b5fc <__sinit>
 8010070:	003fd706 	br	800ffd0 <__alt_data_end+0xfc00ffd0>
 8010074:	04bfffc4 	movi	r18,-1
 8010078:	003fe806 	br	801001c <__alt_data_end+0xfc01001c>
 801007c:	81400417 	ldw	r5,16(r16)
 8010080:	8809883a 	mov	r4,r17
 8010084:	800b7700 	call	800b770 <_free_r>
 8010088:	003fe706 	br	8010028 <__alt_data_end+0xfc010028>
 801008c:	0005883a 	mov	r2,zero
 8010090:	f800283a 	ret

08010094 <fclose>:
 8010094:	00820074 	movhi	r2,2049
 8010098:	109df204 	addi	r2,r2,30664
 801009c:	200b883a 	mov	r5,r4
 80100a0:	11000017 	ldw	r4,0(r2)
 80100a4:	800ffa41 	jmpi	800ffa4 <_fclose_r>

080100a8 <__fputwc>:
 80100a8:	defff804 	addi	sp,sp,-32
 80100ac:	dcc00415 	stw	r19,16(sp)
 80100b0:	dc800315 	stw	r18,12(sp)
 80100b4:	dc000115 	stw	r16,4(sp)
 80100b8:	dfc00715 	stw	ra,28(sp)
 80100bc:	dd400615 	stw	r21,24(sp)
 80100c0:	dd000515 	stw	r20,20(sp)
 80100c4:	dc400215 	stw	r17,8(sp)
 80100c8:	2027883a 	mov	r19,r4
 80100cc:	2825883a 	mov	r18,r5
 80100d0:	3021883a 	mov	r16,r6
 80100d4:	800c14c0 	call	800c14c <__locale_mb_cur_max>
 80100d8:	00c00044 	movi	r3,1
 80100dc:	10c03e26 	beq	r2,r3,80101d8 <__fputwc+0x130>
 80100e0:	81c01704 	addi	r7,r16,92
 80100e4:	900d883a 	mov	r6,r18
 80100e8:	d80b883a 	mov	r5,sp
 80100ec:	9809883a 	mov	r4,r19
 80100f0:	80105780 	call	8010578 <_wcrtomb_r>
 80100f4:	1029883a 	mov	r20,r2
 80100f8:	00bfffc4 	movi	r2,-1
 80100fc:	a0802026 	beq	r20,r2,8010180 <__fputwc+0xd8>
 8010100:	d9400003 	ldbu	r5,0(sp)
 8010104:	a0001c26 	beq	r20,zero,8010178 <__fputwc+0xd0>
 8010108:	0023883a 	mov	r17,zero
 801010c:	05400284 	movi	r21,10
 8010110:	00000906 	br	8010138 <__fputwc+0x90>
 8010114:	80800017 	ldw	r2,0(r16)
 8010118:	11400005 	stb	r5,0(r2)
 801011c:	80c00017 	ldw	r3,0(r16)
 8010120:	18c00044 	addi	r3,r3,1
 8010124:	80c00015 	stw	r3,0(r16)
 8010128:	8c400044 	addi	r17,r17,1
 801012c:	dc45883a 	add	r2,sp,r17
 8010130:	8d00112e 	bgeu	r17,r20,8010178 <__fputwc+0xd0>
 8010134:	11400003 	ldbu	r5,0(r2)
 8010138:	80c00217 	ldw	r3,8(r16)
 801013c:	18ffffc4 	addi	r3,r3,-1
 8010140:	80c00215 	stw	r3,8(r16)
 8010144:	183ff30e 	bge	r3,zero,8010114 <__alt_data_end+0xfc010114>
 8010148:	80800617 	ldw	r2,24(r16)
 801014c:	18801916 	blt	r3,r2,80101b4 <__fputwc+0x10c>
 8010150:	80800017 	ldw	r2,0(r16)
 8010154:	11400005 	stb	r5,0(r2)
 8010158:	80800017 	ldw	r2,0(r16)
 801015c:	10c00003 	ldbu	r3,0(r2)
 8010160:	10800044 	addi	r2,r2,1
 8010164:	1d402326 	beq	r3,r21,80101f4 <__fputwc+0x14c>
 8010168:	80800015 	stw	r2,0(r16)
 801016c:	8c400044 	addi	r17,r17,1
 8010170:	dc45883a 	add	r2,sp,r17
 8010174:	8d3fef36 	bltu	r17,r20,8010134 <__alt_data_end+0xfc010134>
 8010178:	9005883a 	mov	r2,r18
 801017c:	00000406 	br	8010190 <__fputwc+0xe8>
 8010180:	80c0030b 	ldhu	r3,12(r16)
 8010184:	a005883a 	mov	r2,r20
 8010188:	18c01014 	ori	r3,r3,64
 801018c:	80c0030d 	sth	r3,12(r16)
 8010190:	dfc00717 	ldw	ra,28(sp)
 8010194:	dd400617 	ldw	r21,24(sp)
 8010198:	dd000517 	ldw	r20,20(sp)
 801019c:	dcc00417 	ldw	r19,16(sp)
 80101a0:	dc800317 	ldw	r18,12(sp)
 80101a4:	dc400217 	ldw	r17,8(sp)
 80101a8:	dc000117 	ldw	r16,4(sp)
 80101ac:	dec00804 	addi	sp,sp,32
 80101b0:	f800283a 	ret
 80101b4:	800d883a 	mov	r6,r16
 80101b8:	29403fcc 	andi	r5,r5,255
 80101bc:	9809883a 	mov	r4,r19
 80101c0:	80104200 	call	8010420 <__swbuf_r>
 80101c4:	10bfffe0 	cmpeqi	r2,r2,-1
 80101c8:	10803fcc 	andi	r2,r2,255
 80101cc:	103fd626 	beq	r2,zero,8010128 <__alt_data_end+0xfc010128>
 80101d0:	00bfffc4 	movi	r2,-1
 80101d4:	003fee06 	br	8010190 <__alt_data_end+0xfc010190>
 80101d8:	90ffffc4 	addi	r3,r18,-1
 80101dc:	01003f84 	movi	r4,254
 80101e0:	20ffbf36 	bltu	r4,r3,80100e0 <__alt_data_end+0xfc0100e0>
 80101e4:	900b883a 	mov	r5,r18
 80101e8:	dc800005 	stb	r18,0(sp)
 80101ec:	1029883a 	mov	r20,r2
 80101f0:	003fc506 	br	8010108 <__alt_data_end+0xfc010108>
 80101f4:	800d883a 	mov	r6,r16
 80101f8:	a80b883a 	mov	r5,r21
 80101fc:	9809883a 	mov	r4,r19
 8010200:	80104200 	call	8010420 <__swbuf_r>
 8010204:	10bfffe0 	cmpeqi	r2,r2,-1
 8010208:	003fef06 	br	80101c8 <__alt_data_end+0xfc0101c8>

0801020c <_fputwc_r>:
 801020c:	3080030b 	ldhu	r2,12(r6)
 8010210:	10c8000c 	andi	r3,r2,8192
 8010214:	1800051e 	bne	r3,zero,801022c <_fputwc_r+0x20>
 8010218:	30c01917 	ldw	r3,100(r6)
 801021c:	10880014 	ori	r2,r2,8192
 8010220:	3080030d 	sth	r2,12(r6)
 8010224:	18880014 	ori	r2,r3,8192
 8010228:	30801915 	stw	r2,100(r6)
 801022c:	80100a81 	jmpi	80100a8 <__fputwc>

08010230 <fputwc>:
 8010230:	00820074 	movhi	r2,2049
 8010234:	defffc04 	addi	sp,sp,-16
 8010238:	109df204 	addi	r2,r2,30664
 801023c:	dc000115 	stw	r16,4(sp)
 8010240:	14000017 	ldw	r16,0(r2)
 8010244:	dc400215 	stw	r17,8(sp)
 8010248:	dfc00315 	stw	ra,12(sp)
 801024c:	2023883a 	mov	r17,r4
 8010250:	80000226 	beq	r16,zero,801025c <fputwc+0x2c>
 8010254:	80800e17 	ldw	r2,56(r16)
 8010258:	10001026 	beq	r2,zero,801029c <fputwc+0x6c>
 801025c:	2880030b 	ldhu	r2,12(r5)
 8010260:	10c8000c 	andi	r3,r2,8192
 8010264:	1800051e 	bne	r3,zero,801027c <fputwc+0x4c>
 8010268:	28c01917 	ldw	r3,100(r5)
 801026c:	10880014 	ori	r2,r2,8192
 8010270:	2880030d 	sth	r2,12(r5)
 8010274:	18880014 	ori	r2,r3,8192
 8010278:	28801915 	stw	r2,100(r5)
 801027c:	280d883a 	mov	r6,r5
 8010280:	8009883a 	mov	r4,r16
 8010284:	880b883a 	mov	r5,r17
 8010288:	dfc00317 	ldw	ra,12(sp)
 801028c:	dc400217 	ldw	r17,8(sp)
 8010290:	dc000117 	ldw	r16,4(sp)
 8010294:	dec00404 	addi	sp,sp,16
 8010298:	80100a81 	jmpi	80100a8 <__fputwc>
 801029c:	8009883a 	mov	r4,r16
 80102a0:	d9400015 	stw	r5,0(sp)
 80102a4:	800b5fc0 	call	800b5fc <__sinit>
 80102a8:	d9400017 	ldw	r5,0(sp)
 80102ac:	003feb06 	br	801025c <__alt_data_end+0xfc01025c>

080102b0 <_fstat_r>:
 80102b0:	defffd04 	addi	sp,sp,-12
 80102b4:	2805883a 	mov	r2,r5
 80102b8:	dc000015 	stw	r16,0(sp)
 80102bc:	040200b4 	movhi	r16,2050
 80102c0:	dc400115 	stw	r17,4(sp)
 80102c4:	8424f904 	addi	r16,r16,-27676
 80102c8:	2023883a 	mov	r17,r4
 80102cc:	300b883a 	mov	r5,r6
 80102d0:	1009883a 	mov	r4,r2
 80102d4:	dfc00215 	stw	ra,8(sp)
 80102d8:	80000015 	stw	zero,0(r16)
 80102dc:	801142c0 	call	801142c <fstat>
 80102e0:	00ffffc4 	movi	r3,-1
 80102e4:	10c00526 	beq	r2,r3,80102fc <_fstat_r+0x4c>
 80102e8:	dfc00217 	ldw	ra,8(sp)
 80102ec:	dc400117 	ldw	r17,4(sp)
 80102f0:	dc000017 	ldw	r16,0(sp)
 80102f4:	dec00304 	addi	sp,sp,12
 80102f8:	f800283a 	ret
 80102fc:	80c00017 	ldw	r3,0(r16)
 8010300:	183ff926 	beq	r3,zero,80102e8 <__alt_data_end+0xfc0102e8>
 8010304:	88c00015 	stw	r3,0(r17)
 8010308:	003ff706 	br	80102e8 <__alt_data_end+0xfc0102e8>

0801030c <_isatty_r>:
 801030c:	defffd04 	addi	sp,sp,-12
 8010310:	dc000015 	stw	r16,0(sp)
 8010314:	040200b4 	movhi	r16,2050
 8010318:	dc400115 	stw	r17,4(sp)
 801031c:	8424f904 	addi	r16,r16,-27676
 8010320:	2023883a 	mov	r17,r4
 8010324:	2809883a 	mov	r4,r5
 8010328:	dfc00215 	stw	ra,8(sp)
 801032c:	80000015 	stw	zero,0(r16)
 8010330:	80115180 	call	8011518 <isatty>
 8010334:	00ffffc4 	movi	r3,-1
 8010338:	10c00526 	beq	r2,r3,8010350 <_isatty_r+0x44>
 801033c:	dfc00217 	ldw	ra,8(sp)
 8010340:	dc400117 	ldw	r17,4(sp)
 8010344:	dc000017 	ldw	r16,0(sp)
 8010348:	dec00304 	addi	sp,sp,12
 801034c:	f800283a 	ret
 8010350:	80c00017 	ldw	r3,0(r16)
 8010354:	183ff926 	beq	r3,zero,801033c <__alt_data_end+0xfc01033c>
 8010358:	88c00015 	stw	r3,0(r17)
 801035c:	003ff706 	br	801033c <__alt_data_end+0xfc01033c>

08010360 <_lseek_r>:
 8010360:	defffd04 	addi	sp,sp,-12
 8010364:	2805883a 	mov	r2,r5
 8010368:	dc000015 	stw	r16,0(sp)
 801036c:	040200b4 	movhi	r16,2050
 8010370:	dc400115 	stw	r17,4(sp)
 8010374:	300b883a 	mov	r5,r6
 8010378:	8424f904 	addi	r16,r16,-27676
 801037c:	2023883a 	mov	r17,r4
 8010380:	380d883a 	mov	r6,r7
 8010384:	1009883a 	mov	r4,r2
 8010388:	dfc00215 	stw	ra,8(sp)
 801038c:	80000015 	stw	zero,0(r16)
 8010390:	80116e40 	call	80116e4 <lseek>
 8010394:	00ffffc4 	movi	r3,-1
 8010398:	10c00526 	beq	r2,r3,80103b0 <_lseek_r+0x50>
 801039c:	dfc00217 	ldw	ra,8(sp)
 80103a0:	dc400117 	ldw	r17,4(sp)
 80103a4:	dc000017 	ldw	r16,0(sp)
 80103a8:	dec00304 	addi	sp,sp,12
 80103ac:	f800283a 	ret
 80103b0:	80c00017 	ldw	r3,0(r16)
 80103b4:	183ff926 	beq	r3,zero,801039c <__alt_data_end+0xfc01039c>
 80103b8:	88c00015 	stw	r3,0(r17)
 80103bc:	003ff706 	br	801039c <__alt_data_end+0xfc01039c>

080103c0 <_read_r>:
 80103c0:	defffd04 	addi	sp,sp,-12
 80103c4:	2805883a 	mov	r2,r5
 80103c8:	dc000015 	stw	r16,0(sp)
 80103cc:	040200b4 	movhi	r16,2050
 80103d0:	dc400115 	stw	r17,4(sp)
 80103d4:	300b883a 	mov	r5,r6
 80103d8:	8424f904 	addi	r16,r16,-27676
 80103dc:	2023883a 	mov	r17,r4
 80103e0:	380d883a 	mov	r6,r7
 80103e4:	1009883a 	mov	r4,r2
 80103e8:	dfc00215 	stw	ra,8(sp)
 80103ec:	80000015 	stw	zero,0(r16)
 80103f0:	80118b80 	call	80118b8 <read>
 80103f4:	00ffffc4 	movi	r3,-1
 80103f8:	10c00526 	beq	r2,r3,8010410 <_read_r+0x50>
 80103fc:	dfc00217 	ldw	ra,8(sp)
 8010400:	dc400117 	ldw	r17,4(sp)
 8010404:	dc000017 	ldw	r16,0(sp)
 8010408:	dec00304 	addi	sp,sp,12
 801040c:	f800283a 	ret
 8010410:	80c00017 	ldw	r3,0(r16)
 8010414:	183ff926 	beq	r3,zero,80103fc <__alt_data_end+0xfc0103fc>
 8010418:	88c00015 	stw	r3,0(r17)
 801041c:	003ff706 	br	80103fc <__alt_data_end+0xfc0103fc>

08010420 <__swbuf_r>:
 8010420:	defffb04 	addi	sp,sp,-20
 8010424:	dcc00315 	stw	r19,12(sp)
 8010428:	dc800215 	stw	r18,8(sp)
 801042c:	dc000015 	stw	r16,0(sp)
 8010430:	dfc00415 	stw	ra,16(sp)
 8010434:	dc400115 	stw	r17,4(sp)
 8010438:	2025883a 	mov	r18,r4
 801043c:	2827883a 	mov	r19,r5
 8010440:	3021883a 	mov	r16,r6
 8010444:	20000226 	beq	r4,zero,8010450 <__swbuf_r+0x30>
 8010448:	20800e17 	ldw	r2,56(r4)
 801044c:	10004226 	beq	r2,zero,8010558 <__swbuf_r+0x138>
 8010450:	80800617 	ldw	r2,24(r16)
 8010454:	8100030b 	ldhu	r4,12(r16)
 8010458:	80800215 	stw	r2,8(r16)
 801045c:	2080020c 	andi	r2,r4,8
 8010460:	10003626 	beq	r2,zero,801053c <__swbuf_r+0x11c>
 8010464:	80c00417 	ldw	r3,16(r16)
 8010468:	18003426 	beq	r3,zero,801053c <__swbuf_r+0x11c>
 801046c:	2088000c 	andi	r2,r4,8192
 8010470:	9c403fcc 	andi	r17,r19,255
 8010474:	10001a26 	beq	r2,zero,80104e0 <__swbuf_r+0xc0>
 8010478:	80800017 	ldw	r2,0(r16)
 801047c:	81000517 	ldw	r4,20(r16)
 8010480:	10c7c83a 	sub	r3,r2,r3
 8010484:	1900200e 	bge	r3,r4,8010508 <__swbuf_r+0xe8>
 8010488:	18c00044 	addi	r3,r3,1
 801048c:	81000217 	ldw	r4,8(r16)
 8010490:	11400044 	addi	r5,r2,1
 8010494:	81400015 	stw	r5,0(r16)
 8010498:	213fffc4 	addi	r4,r4,-1
 801049c:	81000215 	stw	r4,8(r16)
 80104a0:	14c00005 	stb	r19,0(r2)
 80104a4:	80800517 	ldw	r2,20(r16)
 80104a8:	10c01e26 	beq	r2,r3,8010524 <__swbuf_r+0x104>
 80104ac:	8080030b 	ldhu	r2,12(r16)
 80104b0:	1080004c 	andi	r2,r2,1
 80104b4:	10000226 	beq	r2,zero,80104c0 <__swbuf_r+0xa0>
 80104b8:	00800284 	movi	r2,10
 80104bc:	88801926 	beq	r17,r2,8010524 <__swbuf_r+0x104>
 80104c0:	8805883a 	mov	r2,r17
 80104c4:	dfc00417 	ldw	ra,16(sp)
 80104c8:	dcc00317 	ldw	r19,12(sp)
 80104cc:	dc800217 	ldw	r18,8(sp)
 80104d0:	dc400117 	ldw	r17,4(sp)
 80104d4:	dc000017 	ldw	r16,0(sp)
 80104d8:	dec00504 	addi	sp,sp,20
 80104dc:	f800283a 	ret
 80104e0:	81401917 	ldw	r5,100(r16)
 80104e4:	00b7ffc4 	movi	r2,-8193
 80104e8:	21080014 	ori	r4,r4,8192
 80104ec:	2884703a 	and	r2,r5,r2
 80104f0:	80801915 	stw	r2,100(r16)
 80104f4:	80800017 	ldw	r2,0(r16)
 80104f8:	8100030d 	sth	r4,12(r16)
 80104fc:	81000517 	ldw	r4,20(r16)
 8010500:	10c7c83a 	sub	r3,r2,r3
 8010504:	193fe016 	blt	r3,r4,8010488 <__alt_data_end+0xfc010488>
 8010508:	800b883a 	mov	r5,r16
 801050c:	9009883a 	mov	r4,r18
 8010510:	800b2200 	call	800b220 <_fflush_r>
 8010514:	1000071e 	bne	r2,zero,8010534 <__swbuf_r+0x114>
 8010518:	80800017 	ldw	r2,0(r16)
 801051c:	00c00044 	movi	r3,1
 8010520:	003fda06 	br	801048c <__alt_data_end+0xfc01048c>
 8010524:	800b883a 	mov	r5,r16
 8010528:	9009883a 	mov	r4,r18
 801052c:	800b2200 	call	800b220 <_fflush_r>
 8010530:	103fe326 	beq	r2,zero,80104c0 <__alt_data_end+0xfc0104c0>
 8010534:	00bfffc4 	movi	r2,-1
 8010538:	003fe206 	br	80104c4 <__alt_data_end+0xfc0104c4>
 801053c:	800b883a 	mov	r5,r16
 8010540:	9009883a 	mov	r4,r18
 8010544:	80096280 	call	8009628 <__swsetup_r>
 8010548:	103ffa1e 	bne	r2,zero,8010534 <__alt_data_end+0xfc010534>
 801054c:	8100030b 	ldhu	r4,12(r16)
 8010550:	80c00417 	ldw	r3,16(r16)
 8010554:	003fc506 	br	801046c <__alt_data_end+0xfc01046c>
 8010558:	800b5fc0 	call	800b5fc <__sinit>
 801055c:	003fbc06 	br	8010450 <__alt_data_end+0xfc010450>

08010560 <__swbuf>:
 8010560:	00820074 	movhi	r2,2049
 8010564:	109df204 	addi	r2,r2,30664
 8010568:	280d883a 	mov	r6,r5
 801056c:	200b883a 	mov	r5,r4
 8010570:	11000017 	ldw	r4,0(r2)
 8010574:	80104201 	jmpi	8010420 <__swbuf_r>

08010578 <_wcrtomb_r>:
 8010578:	defff604 	addi	sp,sp,-40
 801057c:	00820074 	movhi	r2,2049
 8010580:	dc800815 	stw	r18,32(sp)
 8010584:	dc400715 	stw	r17,28(sp)
 8010588:	dc000615 	stw	r16,24(sp)
 801058c:	109df604 	addi	r2,r2,30680
 8010590:	dfc00915 	stw	ra,36(sp)
 8010594:	2021883a 	mov	r16,r4
 8010598:	3823883a 	mov	r17,r7
 801059c:	14800017 	ldw	r18,0(r2)
 80105a0:	28001426 	beq	r5,zero,80105f4 <_wcrtomb_r+0x7c>
 80105a4:	d9400415 	stw	r5,16(sp)
 80105a8:	d9800515 	stw	r6,20(sp)
 80105ac:	800c1400 	call	800c140 <__locale_charset>
 80105b0:	d9800517 	ldw	r6,20(sp)
 80105b4:	d9400417 	ldw	r5,16(sp)
 80105b8:	100f883a 	mov	r7,r2
 80105bc:	dc400015 	stw	r17,0(sp)
 80105c0:	8009883a 	mov	r4,r16
 80105c4:	903ee83a 	callr	r18
 80105c8:	00ffffc4 	movi	r3,-1
 80105cc:	10c0031e 	bne	r2,r3,80105dc <_wcrtomb_r+0x64>
 80105d0:	88000015 	stw	zero,0(r17)
 80105d4:	00c02284 	movi	r3,138
 80105d8:	80c00015 	stw	r3,0(r16)
 80105dc:	dfc00917 	ldw	ra,36(sp)
 80105e0:	dc800817 	ldw	r18,32(sp)
 80105e4:	dc400717 	ldw	r17,28(sp)
 80105e8:	dc000617 	ldw	r16,24(sp)
 80105ec:	dec00a04 	addi	sp,sp,40
 80105f0:	f800283a 	ret
 80105f4:	800c1400 	call	800c140 <__locale_charset>
 80105f8:	100f883a 	mov	r7,r2
 80105fc:	dc400015 	stw	r17,0(sp)
 8010600:	000d883a 	mov	r6,zero
 8010604:	d9400104 	addi	r5,sp,4
 8010608:	8009883a 	mov	r4,r16
 801060c:	903ee83a 	callr	r18
 8010610:	003fed06 	br	80105c8 <__alt_data_end+0xfc0105c8>

08010614 <wcrtomb>:
 8010614:	defff604 	addi	sp,sp,-40
 8010618:	00820074 	movhi	r2,2049
 801061c:	dc800615 	stw	r18,24(sp)
 8010620:	dc400515 	stw	r17,20(sp)
 8010624:	109df204 	addi	r2,r2,30664
 8010628:	dfc00915 	stw	ra,36(sp)
 801062c:	dd000815 	stw	r20,32(sp)
 8010630:	dcc00715 	stw	r19,28(sp)
 8010634:	dc000415 	stw	r16,16(sp)
 8010638:	3025883a 	mov	r18,r6
 801063c:	14400017 	ldw	r17,0(r2)
 8010640:	20001926 	beq	r4,zero,80106a8 <wcrtomb+0x94>
 8010644:	00820074 	movhi	r2,2049
 8010648:	109df604 	addi	r2,r2,30680
 801064c:	15000017 	ldw	r20,0(r2)
 8010650:	2021883a 	mov	r16,r4
 8010654:	2827883a 	mov	r19,r5
 8010658:	800c1400 	call	800c140 <__locale_charset>
 801065c:	100f883a 	mov	r7,r2
 8010660:	dc800015 	stw	r18,0(sp)
 8010664:	980d883a 	mov	r6,r19
 8010668:	800b883a 	mov	r5,r16
 801066c:	8809883a 	mov	r4,r17
 8010670:	a03ee83a 	callr	r20
 8010674:	00ffffc4 	movi	r3,-1
 8010678:	10c0031e 	bne	r2,r3,8010688 <wcrtomb+0x74>
 801067c:	90000015 	stw	zero,0(r18)
 8010680:	00c02284 	movi	r3,138
 8010684:	88c00015 	stw	r3,0(r17)
 8010688:	dfc00917 	ldw	ra,36(sp)
 801068c:	dd000817 	ldw	r20,32(sp)
 8010690:	dcc00717 	ldw	r19,28(sp)
 8010694:	dc800617 	ldw	r18,24(sp)
 8010698:	dc400517 	ldw	r17,20(sp)
 801069c:	dc000417 	ldw	r16,16(sp)
 80106a0:	dec00a04 	addi	sp,sp,40
 80106a4:	f800283a 	ret
 80106a8:	00820074 	movhi	r2,2049
 80106ac:	109df604 	addi	r2,r2,30680
 80106b0:	14000017 	ldw	r16,0(r2)
 80106b4:	800c1400 	call	800c140 <__locale_charset>
 80106b8:	100f883a 	mov	r7,r2
 80106bc:	dc800015 	stw	r18,0(sp)
 80106c0:	000d883a 	mov	r6,zero
 80106c4:	d9400104 	addi	r5,sp,4
 80106c8:	8809883a 	mov	r4,r17
 80106cc:	803ee83a 	callr	r16
 80106d0:	003fe806 	br	8010674 <__alt_data_end+0xfc010674>

080106d4 <__ascii_wctomb>:
 80106d4:	28000526 	beq	r5,zero,80106ec <__ascii_wctomb+0x18>
 80106d8:	00803fc4 	movi	r2,255
 80106dc:	11800536 	bltu	r2,r6,80106f4 <__ascii_wctomb+0x20>
 80106e0:	29800005 	stb	r6,0(r5)
 80106e4:	00800044 	movi	r2,1
 80106e8:	f800283a 	ret
 80106ec:	0005883a 	mov	r2,zero
 80106f0:	f800283a 	ret
 80106f4:	00802284 	movi	r2,138
 80106f8:	20800015 	stw	r2,0(r4)
 80106fc:	00bfffc4 	movi	r2,-1
 8010700:	f800283a 	ret

08010704 <_wctomb_r>:
 8010704:	00820074 	movhi	r2,2049
 8010708:	defff904 	addi	sp,sp,-28
 801070c:	109df604 	addi	r2,r2,30680
 8010710:	dfc00615 	stw	ra,24(sp)
 8010714:	dc400515 	stw	r17,20(sp)
 8010718:	dc000415 	stw	r16,16(sp)
 801071c:	3823883a 	mov	r17,r7
 8010720:	14000017 	ldw	r16,0(r2)
 8010724:	d9000115 	stw	r4,4(sp)
 8010728:	d9400215 	stw	r5,8(sp)
 801072c:	d9800315 	stw	r6,12(sp)
 8010730:	800c1400 	call	800c140 <__locale_charset>
 8010734:	d9800317 	ldw	r6,12(sp)
 8010738:	d9400217 	ldw	r5,8(sp)
 801073c:	d9000117 	ldw	r4,4(sp)
 8010740:	100f883a 	mov	r7,r2
 8010744:	dc400015 	stw	r17,0(sp)
 8010748:	803ee83a 	callr	r16
 801074c:	dfc00617 	ldw	ra,24(sp)
 8010750:	dc400517 	ldw	r17,20(sp)
 8010754:	dc000417 	ldw	r16,16(sp)
 8010758:	dec00704 	addi	sp,sp,28
 801075c:	f800283a 	ret

08010760 <__udivdi3>:
 8010760:	defff504 	addi	sp,sp,-44
 8010764:	dcc00415 	stw	r19,16(sp)
 8010768:	dc000115 	stw	r16,4(sp)
 801076c:	dfc00a15 	stw	ra,40(sp)
 8010770:	df000915 	stw	fp,36(sp)
 8010774:	ddc00815 	stw	r23,32(sp)
 8010778:	dd800715 	stw	r22,28(sp)
 801077c:	dd400615 	stw	r21,24(sp)
 8010780:	dd000515 	stw	r20,20(sp)
 8010784:	dc800315 	stw	r18,12(sp)
 8010788:	dc400215 	stw	r17,8(sp)
 801078c:	2027883a 	mov	r19,r4
 8010790:	2821883a 	mov	r16,r5
 8010794:	3800411e 	bne	r7,zero,801089c <__udivdi3+0x13c>
 8010798:	3023883a 	mov	r17,r6
 801079c:	2025883a 	mov	r18,r4
 80107a0:	2980522e 	bgeu	r5,r6,80108ec <__udivdi3+0x18c>
 80107a4:	00bfffd4 	movui	r2,65535
 80107a8:	282d883a 	mov	r22,r5
 80107ac:	1180a836 	bltu	r2,r6,8010a50 <__udivdi3+0x2f0>
 80107b0:	00803fc4 	movi	r2,255
 80107b4:	1185803a 	cmpltu	r2,r2,r6
 80107b8:	100490fa 	slli	r2,r2,3
 80107bc:	3086d83a 	srl	r3,r6,r2
 80107c0:	01020074 	movhi	r4,2049
 80107c4:	21164004 	addi	r4,r4,22784
 80107c8:	20c7883a 	add	r3,r4,r3
 80107cc:	18c00003 	ldbu	r3,0(r3)
 80107d0:	1885883a 	add	r2,r3,r2
 80107d4:	00c00804 	movi	r3,32
 80107d8:	1887c83a 	sub	r3,r3,r2
 80107dc:	18000526 	beq	r3,zero,80107f4 <__udivdi3+0x94>
 80107e0:	80e0983a 	sll	r16,r16,r3
 80107e4:	9884d83a 	srl	r2,r19,r2
 80107e8:	30e2983a 	sll	r17,r6,r3
 80107ec:	98e4983a 	sll	r18,r19,r3
 80107f0:	142cb03a 	or	r22,r2,r16
 80107f4:	882ad43a 	srli	r21,r17,16
 80107f8:	b009883a 	mov	r4,r22
 80107fc:	8d3fffcc 	andi	r20,r17,65535
 8010800:	a80b883a 	mov	r5,r21
 8010804:	80033a00 	call	80033a0 <__umodsi3>
 8010808:	b009883a 	mov	r4,r22
 801080c:	a80b883a 	mov	r5,r21
 8010810:	1027883a 	mov	r19,r2
 8010814:	800333c0 	call	800333c <__udivsi3>
 8010818:	102d883a 	mov	r22,r2
 801081c:	9826943a 	slli	r19,r19,16
 8010820:	9004d43a 	srli	r2,r18,16
 8010824:	a5a1383a 	mul	r16,r20,r22
 8010828:	14c4b03a 	or	r2,r2,r19
 801082c:	1400052e 	bgeu	r2,r16,8010844 <__udivdi3+0xe4>
 8010830:	1445883a 	add	r2,r2,r17
 8010834:	b0ffffc4 	addi	r3,r22,-1
 8010838:	14400136 	bltu	r2,r17,8010840 <__udivdi3+0xe0>
 801083c:	14012336 	bltu	r2,r16,8010ccc <__udivdi3+0x56c>
 8010840:	182d883a 	mov	r22,r3
 8010844:	1421c83a 	sub	r16,r2,r16
 8010848:	a80b883a 	mov	r5,r21
 801084c:	8009883a 	mov	r4,r16
 8010850:	80033a00 	call	80033a0 <__umodsi3>
 8010854:	1027883a 	mov	r19,r2
 8010858:	a80b883a 	mov	r5,r21
 801085c:	8009883a 	mov	r4,r16
 8010860:	800333c0 	call	800333c <__udivsi3>
 8010864:	9826943a 	slli	r19,r19,16
 8010868:	a0a9383a 	mul	r20,r20,r2
 801086c:	94bfffcc 	andi	r18,r18,65535
 8010870:	94e4b03a 	or	r18,r18,r19
 8010874:	9500052e 	bgeu	r18,r20,801088c <__udivdi3+0x12c>
 8010878:	8ca5883a 	add	r18,r17,r18
 801087c:	10ffffc4 	addi	r3,r2,-1
 8010880:	9440f136 	bltu	r18,r17,8010c48 <__udivdi3+0x4e8>
 8010884:	9500f02e 	bgeu	r18,r20,8010c48 <__udivdi3+0x4e8>
 8010888:	10bfff84 	addi	r2,r2,-2
 801088c:	b00c943a 	slli	r6,r22,16
 8010890:	0007883a 	mov	r3,zero
 8010894:	3084b03a 	or	r2,r6,r2
 8010898:	00005906 	br	8010a00 <__udivdi3+0x2a0>
 801089c:	29c05636 	bltu	r5,r7,80109f8 <__udivdi3+0x298>
 80108a0:	00bfffd4 	movui	r2,65535
 80108a4:	11c0622e 	bgeu	r2,r7,8010a30 <__udivdi3+0x2d0>
 80108a8:	00804034 	movhi	r2,256
 80108ac:	10bfffc4 	addi	r2,r2,-1
 80108b0:	11c0ee36 	bltu	r2,r7,8010c6c <__udivdi3+0x50c>
 80108b4:	00800404 	movi	r2,16
 80108b8:	3886d83a 	srl	r3,r7,r2
 80108bc:	01020074 	movhi	r4,2049
 80108c0:	21164004 	addi	r4,r4,22784
 80108c4:	20c7883a 	add	r3,r4,r3
 80108c8:	18c00003 	ldbu	r3,0(r3)
 80108cc:	05400804 	movi	r21,32
 80108d0:	1885883a 	add	r2,r3,r2
 80108d4:	a8abc83a 	sub	r21,r21,r2
 80108d8:	a800621e 	bne	r21,zero,8010a64 <__udivdi3+0x304>
 80108dc:	3c00e936 	bltu	r7,r16,8010c84 <__udivdi3+0x524>
 80108e0:	9985403a 	cmpgeu	r2,r19,r6
 80108e4:	0007883a 	mov	r3,zero
 80108e8:	00004506 	br	8010a00 <__udivdi3+0x2a0>
 80108ec:	3000041e 	bne	r6,zero,8010900 <__udivdi3+0x1a0>
 80108f0:	000b883a 	mov	r5,zero
 80108f4:	01000044 	movi	r4,1
 80108f8:	800333c0 	call	800333c <__udivsi3>
 80108fc:	1023883a 	mov	r17,r2
 8010900:	00bfffd4 	movui	r2,65535
 8010904:	14404e2e 	bgeu	r2,r17,8010a40 <__udivdi3+0x2e0>
 8010908:	00804034 	movhi	r2,256
 801090c:	10bfffc4 	addi	r2,r2,-1
 8010910:	1440d836 	bltu	r2,r17,8010c74 <__udivdi3+0x514>
 8010914:	00800404 	movi	r2,16
 8010918:	8886d83a 	srl	r3,r17,r2
 801091c:	01020074 	movhi	r4,2049
 8010920:	21164004 	addi	r4,r4,22784
 8010924:	20c7883a 	add	r3,r4,r3
 8010928:	18c00003 	ldbu	r3,0(r3)
 801092c:	1885883a 	add	r2,r3,r2
 8010930:	00c00804 	movi	r3,32
 8010934:	1887c83a 	sub	r3,r3,r2
 8010938:	18008f1e 	bne	r3,zero,8010b78 <__udivdi3+0x418>
 801093c:	882ad43a 	srli	r21,r17,16
 8010940:	8461c83a 	sub	r16,r16,r17
 8010944:	8d3fffcc 	andi	r20,r17,65535
 8010948:	00c00044 	movi	r3,1
 801094c:	8009883a 	mov	r4,r16
 8010950:	a80b883a 	mov	r5,r21
 8010954:	d8c00015 	stw	r3,0(sp)
 8010958:	80033a00 	call	80033a0 <__umodsi3>
 801095c:	8009883a 	mov	r4,r16
 8010960:	a80b883a 	mov	r5,r21
 8010964:	1027883a 	mov	r19,r2
 8010968:	800333c0 	call	800333c <__udivsi3>
 801096c:	9826943a 	slli	r19,r19,16
 8010970:	9008d43a 	srli	r4,r18,16
 8010974:	1521383a 	mul	r16,r2,r20
 8010978:	102d883a 	mov	r22,r2
 801097c:	24c8b03a 	or	r4,r4,r19
 8010980:	d8c00017 	ldw	r3,0(sp)
 8010984:	2400052e 	bgeu	r4,r16,801099c <__udivdi3+0x23c>
 8010988:	2449883a 	add	r4,r4,r17
 801098c:	b0bfffc4 	addi	r2,r22,-1
 8010990:	24400136 	bltu	r4,r17,8010998 <__udivdi3+0x238>
 8010994:	2400ca36 	bltu	r4,r16,8010cc0 <__udivdi3+0x560>
 8010998:	102d883a 	mov	r22,r2
 801099c:	2421c83a 	sub	r16,r4,r16
 80109a0:	a80b883a 	mov	r5,r21
 80109a4:	8009883a 	mov	r4,r16
 80109a8:	d8c00015 	stw	r3,0(sp)
 80109ac:	80033a00 	call	80033a0 <__umodsi3>
 80109b0:	1027883a 	mov	r19,r2
 80109b4:	a80b883a 	mov	r5,r21
 80109b8:	8009883a 	mov	r4,r16
 80109bc:	800333c0 	call	800333c <__udivsi3>
 80109c0:	9826943a 	slli	r19,r19,16
 80109c4:	1529383a 	mul	r20,r2,r20
 80109c8:	94bfffcc 	andi	r18,r18,65535
 80109cc:	94e4b03a 	or	r18,r18,r19
 80109d0:	d8c00017 	ldw	r3,0(sp)
 80109d4:	9500052e 	bgeu	r18,r20,80109ec <__udivdi3+0x28c>
 80109d8:	8ca5883a 	add	r18,r17,r18
 80109dc:	113fffc4 	addi	r4,r2,-1
 80109e0:	94409736 	bltu	r18,r17,8010c40 <__udivdi3+0x4e0>
 80109e4:	9500962e 	bgeu	r18,r20,8010c40 <__udivdi3+0x4e0>
 80109e8:	10bfff84 	addi	r2,r2,-2
 80109ec:	b00c943a 	slli	r6,r22,16
 80109f0:	3084b03a 	or	r2,r6,r2
 80109f4:	00000206 	br	8010a00 <__udivdi3+0x2a0>
 80109f8:	0007883a 	mov	r3,zero
 80109fc:	0005883a 	mov	r2,zero
 8010a00:	dfc00a17 	ldw	ra,40(sp)
 8010a04:	df000917 	ldw	fp,36(sp)
 8010a08:	ddc00817 	ldw	r23,32(sp)
 8010a0c:	dd800717 	ldw	r22,28(sp)
 8010a10:	dd400617 	ldw	r21,24(sp)
 8010a14:	dd000517 	ldw	r20,20(sp)
 8010a18:	dcc00417 	ldw	r19,16(sp)
 8010a1c:	dc800317 	ldw	r18,12(sp)
 8010a20:	dc400217 	ldw	r17,8(sp)
 8010a24:	dc000117 	ldw	r16,4(sp)
 8010a28:	dec00b04 	addi	sp,sp,44
 8010a2c:	f800283a 	ret
 8010a30:	00803fc4 	movi	r2,255
 8010a34:	11c5803a 	cmpltu	r2,r2,r7
 8010a38:	100490fa 	slli	r2,r2,3
 8010a3c:	003f9e06 	br	80108b8 <__alt_data_end+0xfc0108b8>
 8010a40:	00803fc4 	movi	r2,255
 8010a44:	1445803a 	cmpltu	r2,r2,r17
 8010a48:	100490fa 	slli	r2,r2,3
 8010a4c:	003fb206 	br	8010918 <__alt_data_end+0xfc010918>
 8010a50:	00804034 	movhi	r2,256
 8010a54:	10bfffc4 	addi	r2,r2,-1
 8010a58:	11808836 	bltu	r2,r6,8010c7c <__udivdi3+0x51c>
 8010a5c:	00800404 	movi	r2,16
 8010a60:	003f5606 	br	80107bc <__alt_data_end+0xfc0107bc>
 8010a64:	30aed83a 	srl	r23,r6,r2
 8010a68:	3d4e983a 	sll	r7,r7,r21
 8010a6c:	80acd83a 	srl	r22,r16,r2
 8010a70:	9884d83a 	srl	r2,r19,r2
 8010a74:	3deeb03a 	or	r23,r7,r23
 8010a78:	b824d43a 	srli	r18,r23,16
 8010a7c:	8560983a 	sll	r16,r16,r21
 8010a80:	b009883a 	mov	r4,r22
 8010a84:	900b883a 	mov	r5,r18
 8010a88:	3568983a 	sll	r20,r6,r21
 8010a8c:	1420b03a 	or	r16,r2,r16
 8010a90:	80033a00 	call	80033a0 <__umodsi3>
 8010a94:	b009883a 	mov	r4,r22
 8010a98:	900b883a 	mov	r5,r18
 8010a9c:	1023883a 	mov	r17,r2
 8010aa0:	800333c0 	call	800333c <__udivsi3>
 8010aa4:	8808943a 	slli	r4,r17,16
 8010aa8:	bf3fffcc 	andi	fp,r23,65535
 8010aac:	8006d43a 	srli	r3,r16,16
 8010ab0:	e0a3383a 	mul	r17,fp,r2
 8010ab4:	100d883a 	mov	r6,r2
 8010ab8:	1906b03a 	or	r3,r3,r4
 8010abc:	1c40042e 	bgeu	r3,r17,8010ad0 <__udivdi3+0x370>
 8010ac0:	1dc7883a 	add	r3,r3,r23
 8010ac4:	10bfffc4 	addi	r2,r2,-1
 8010ac8:	1dc0752e 	bgeu	r3,r23,8010ca0 <__udivdi3+0x540>
 8010acc:	100d883a 	mov	r6,r2
 8010ad0:	1c63c83a 	sub	r17,r3,r17
 8010ad4:	900b883a 	mov	r5,r18
 8010ad8:	8809883a 	mov	r4,r17
 8010adc:	d9800015 	stw	r6,0(sp)
 8010ae0:	80033a00 	call	80033a0 <__umodsi3>
 8010ae4:	102d883a 	mov	r22,r2
 8010ae8:	8809883a 	mov	r4,r17
 8010aec:	900b883a 	mov	r5,r18
 8010af0:	800333c0 	call	800333c <__udivsi3>
 8010af4:	b02c943a 	slli	r22,r22,16
 8010af8:	e089383a 	mul	r4,fp,r2
 8010afc:	843fffcc 	andi	r16,r16,65535
 8010b00:	85a0b03a 	or	r16,r16,r22
 8010b04:	d9800017 	ldw	r6,0(sp)
 8010b08:	8100042e 	bgeu	r16,r4,8010b1c <__udivdi3+0x3bc>
 8010b0c:	85e1883a 	add	r16,r16,r23
 8010b10:	10ffffc4 	addi	r3,r2,-1
 8010b14:	85c05e2e 	bgeu	r16,r23,8010c90 <__udivdi3+0x530>
 8010b18:	1805883a 	mov	r2,r3
 8010b1c:	300c943a 	slli	r6,r6,16
 8010b20:	a17fffcc 	andi	r5,r20,65535
 8010b24:	a028d43a 	srli	r20,r20,16
 8010b28:	3084b03a 	or	r2,r6,r2
 8010b2c:	10ffffcc 	andi	r3,r2,65535
 8010b30:	100cd43a 	srli	r6,r2,16
 8010b34:	194f383a 	mul	r7,r3,r5
 8010b38:	1d07383a 	mul	r3,r3,r20
 8010b3c:	314b383a 	mul	r5,r6,r5
 8010b40:	3810d43a 	srli	r8,r7,16
 8010b44:	8121c83a 	sub	r16,r16,r4
 8010b48:	1947883a 	add	r3,r3,r5
 8010b4c:	40c7883a 	add	r3,r8,r3
 8010b50:	350d383a 	mul	r6,r6,r20
 8010b54:	1940022e 	bgeu	r3,r5,8010b60 <__udivdi3+0x400>
 8010b58:	01000074 	movhi	r4,1
 8010b5c:	310d883a 	add	r6,r6,r4
 8010b60:	1828d43a 	srli	r20,r3,16
 8010b64:	a18d883a 	add	r6,r20,r6
 8010b68:	81803e36 	bltu	r16,r6,8010c64 <__udivdi3+0x504>
 8010b6c:	81803826 	beq	r16,r6,8010c50 <__udivdi3+0x4f0>
 8010b70:	0007883a 	mov	r3,zero
 8010b74:	003fa206 	br	8010a00 <__alt_data_end+0xfc010a00>
 8010b78:	88e2983a 	sll	r17,r17,r3
 8010b7c:	80a8d83a 	srl	r20,r16,r2
 8010b80:	80e0983a 	sll	r16,r16,r3
 8010b84:	882ad43a 	srli	r21,r17,16
 8010b88:	9884d83a 	srl	r2,r19,r2
 8010b8c:	a009883a 	mov	r4,r20
 8010b90:	a80b883a 	mov	r5,r21
 8010b94:	142eb03a 	or	r23,r2,r16
 8010b98:	98e4983a 	sll	r18,r19,r3
 8010b9c:	80033a00 	call	80033a0 <__umodsi3>
 8010ba0:	a009883a 	mov	r4,r20
 8010ba4:	a80b883a 	mov	r5,r21
 8010ba8:	1021883a 	mov	r16,r2
 8010bac:	800333c0 	call	800333c <__udivsi3>
 8010bb0:	1039883a 	mov	fp,r2
 8010bb4:	8d3fffcc 	andi	r20,r17,65535
 8010bb8:	8020943a 	slli	r16,r16,16
 8010bbc:	b804d43a 	srli	r2,r23,16
 8010bc0:	a72d383a 	mul	r22,r20,fp
 8010bc4:	1404b03a 	or	r2,r2,r16
 8010bc8:	1580062e 	bgeu	r2,r22,8010be4 <__udivdi3+0x484>
 8010bcc:	1445883a 	add	r2,r2,r17
 8010bd0:	e0ffffc4 	addi	r3,fp,-1
 8010bd4:	14403836 	bltu	r2,r17,8010cb8 <__udivdi3+0x558>
 8010bd8:	1580372e 	bgeu	r2,r22,8010cb8 <__udivdi3+0x558>
 8010bdc:	e73fff84 	addi	fp,fp,-2
 8010be0:	1445883a 	add	r2,r2,r17
 8010be4:	15adc83a 	sub	r22,r2,r22
 8010be8:	a80b883a 	mov	r5,r21
 8010bec:	b009883a 	mov	r4,r22
 8010bf0:	80033a00 	call	80033a0 <__umodsi3>
 8010bf4:	1027883a 	mov	r19,r2
 8010bf8:	b009883a 	mov	r4,r22
 8010bfc:	a80b883a 	mov	r5,r21
 8010c00:	800333c0 	call	800333c <__udivsi3>
 8010c04:	9826943a 	slli	r19,r19,16
 8010c08:	a0a1383a 	mul	r16,r20,r2
 8010c0c:	b93fffcc 	andi	r4,r23,65535
 8010c10:	24c8b03a 	or	r4,r4,r19
 8010c14:	2400062e 	bgeu	r4,r16,8010c30 <__udivdi3+0x4d0>
 8010c18:	2449883a 	add	r4,r4,r17
 8010c1c:	10ffffc4 	addi	r3,r2,-1
 8010c20:	24402336 	bltu	r4,r17,8010cb0 <__udivdi3+0x550>
 8010c24:	2400222e 	bgeu	r4,r16,8010cb0 <__udivdi3+0x550>
 8010c28:	10bfff84 	addi	r2,r2,-2
 8010c2c:	2449883a 	add	r4,r4,r17
 8010c30:	e038943a 	slli	fp,fp,16
 8010c34:	2421c83a 	sub	r16,r4,r16
 8010c38:	e086b03a 	or	r3,fp,r2
 8010c3c:	003f4306 	br	801094c <__alt_data_end+0xfc01094c>
 8010c40:	2005883a 	mov	r2,r4
 8010c44:	003f6906 	br	80109ec <__alt_data_end+0xfc0109ec>
 8010c48:	1805883a 	mov	r2,r3
 8010c4c:	003f0f06 	br	801088c <__alt_data_end+0xfc01088c>
 8010c50:	1806943a 	slli	r3,r3,16
 8010c54:	9d66983a 	sll	r19,r19,r21
 8010c58:	39ffffcc 	andi	r7,r7,65535
 8010c5c:	19c7883a 	add	r3,r3,r7
 8010c60:	98ffc32e 	bgeu	r19,r3,8010b70 <__alt_data_end+0xfc010b70>
 8010c64:	10bfffc4 	addi	r2,r2,-1
 8010c68:	003fc106 	br	8010b70 <__alt_data_end+0xfc010b70>
 8010c6c:	00800604 	movi	r2,24
 8010c70:	003f1106 	br	80108b8 <__alt_data_end+0xfc0108b8>
 8010c74:	00800604 	movi	r2,24
 8010c78:	003f2706 	br	8010918 <__alt_data_end+0xfc010918>
 8010c7c:	00800604 	movi	r2,24
 8010c80:	003ece06 	br	80107bc <__alt_data_end+0xfc0107bc>
 8010c84:	0007883a 	mov	r3,zero
 8010c88:	00800044 	movi	r2,1
 8010c8c:	003f5c06 	br	8010a00 <__alt_data_end+0xfc010a00>
 8010c90:	813fa12e 	bgeu	r16,r4,8010b18 <__alt_data_end+0xfc010b18>
 8010c94:	10bfff84 	addi	r2,r2,-2
 8010c98:	85e1883a 	add	r16,r16,r23
 8010c9c:	003f9f06 	br	8010b1c <__alt_data_end+0xfc010b1c>
 8010ca0:	1c7f8a2e 	bgeu	r3,r17,8010acc <__alt_data_end+0xfc010acc>
 8010ca4:	31bfff84 	addi	r6,r6,-2
 8010ca8:	1dc7883a 	add	r3,r3,r23
 8010cac:	003f8806 	br	8010ad0 <__alt_data_end+0xfc010ad0>
 8010cb0:	1805883a 	mov	r2,r3
 8010cb4:	003fde06 	br	8010c30 <__alt_data_end+0xfc010c30>
 8010cb8:	1839883a 	mov	fp,r3
 8010cbc:	003fc906 	br	8010be4 <__alt_data_end+0xfc010be4>
 8010cc0:	b5bfff84 	addi	r22,r22,-2
 8010cc4:	2449883a 	add	r4,r4,r17
 8010cc8:	003f3406 	br	801099c <__alt_data_end+0xfc01099c>
 8010ccc:	b5bfff84 	addi	r22,r22,-2
 8010cd0:	1445883a 	add	r2,r2,r17
 8010cd4:	003edb06 	br	8010844 <__alt_data_end+0xfc010844>

08010cd8 <__umoddi3>:
 8010cd8:	defff404 	addi	sp,sp,-48
 8010cdc:	df000a15 	stw	fp,40(sp)
 8010ce0:	dc400315 	stw	r17,12(sp)
 8010ce4:	dc000215 	stw	r16,8(sp)
 8010ce8:	dfc00b15 	stw	ra,44(sp)
 8010cec:	ddc00915 	stw	r23,36(sp)
 8010cf0:	dd800815 	stw	r22,32(sp)
 8010cf4:	dd400715 	stw	r21,28(sp)
 8010cf8:	dd000615 	stw	r20,24(sp)
 8010cfc:	dcc00515 	stw	r19,20(sp)
 8010d00:	dc800415 	stw	r18,16(sp)
 8010d04:	2021883a 	mov	r16,r4
 8010d08:	2823883a 	mov	r17,r5
 8010d0c:	2839883a 	mov	fp,r5
 8010d10:	38003c1e 	bne	r7,zero,8010e04 <__umoddi3+0x12c>
 8010d14:	3027883a 	mov	r19,r6
 8010d18:	2029883a 	mov	r20,r4
 8010d1c:	2980512e 	bgeu	r5,r6,8010e64 <__umoddi3+0x18c>
 8010d20:	00bfffd4 	movui	r2,65535
 8010d24:	11809a36 	bltu	r2,r6,8010f90 <__umoddi3+0x2b8>
 8010d28:	01003fc4 	movi	r4,255
 8010d2c:	2189803a 	cmpltu	r4,r4,r6
 8010d30:	200890fa 	slli	r4,r4,3
 8010d34:	3104d83a 	srl	r2,r6,r4
 8010d38:	00c20074 	movhi	r3,2049
 8010d3c:	18d64004 	addi	r3,r3,22784
 8010d40:	1885883a 	add	r2,r3,r2
 8010d44:	10c00003 	ldbu	r3,0(r2)
 8010d48:	00800804 	movi	r2,32
 8010d4c:	1909883a 	add	r4,r3,r4
 8010d50:	1125c83a 	sub	r18,r2,r4
 8010d54:	90000526 	beq	r18,zero,8010d6c <__umoddi3+0x94>
 8010d58:	8ca2983a 	sll	r17,r17,r18
 8010d5c:	8108d83a 	srl	r4,r16,r4
 8010d60:	34a6983a 	sll	r19,r6,r18
 8010d64:	84a8983a 	sll	r20,r16,r18
 8010d68:	2478b03a 	or	fp,r4,r17
 8010d6c:	982ed43a 	srli	r23,r19,16
 8010d70:	e009883a 	mov	r4,fp
 8010d74:	9dbfffcc 	andi	r22,r19,65535
 8010d78:	b80b883a 	mov	r5,r23
 8010d7c:	80033a00 	call	80033a0 <__umodsi3>
 8010d80:	e009883a 	mov	r4,fp
 8010d84:	b80b883a 	mov	r5,r23
 8010d88:	102b883a 	mov	r21,r2
 8010d8c:	800333c0 	call	800333c <__udivsi3>
 8010d90:	a806943a 	slli	r3,r21,16
 8010d94:	a008d43a 	srli	r4,r20,16
 8010d98:	b085383a 	mul	r2,r22,r2
 8010d9c:	20c8b03a 	or	r4,r4,r3
 8010da0:	2080032e 	bgeu	r4,r2,8010db0 <__umoddi3+0xd8>
 8010da4:	24c9883a 	add	r4,r4,r19
 8010da8:	24c00136 	bltu	r4,r19,8010db0 <__umoddi3+0xd8>
 8010dac:	20811036 	bltu	r4,r2,80111f0 <__umoddi3+0x518>
 8010db0:	20abc83a 	sub	r21,r4,r2
 8010db4:	b80b883a 	mov	r5,r23
 8010db8:	a809883a 	mov	r4,r21
 8010dbc:	80033a00 	call	80033a0 <__umodsi3>
 8010dc0:	1023883a 	mov	r17,r2
 8010dc4:	b80b883a 	mov	r5,r23
 8010dc8:	a809883a 	mov	r4,r21
 8010dcc:	800333c0 	call	800333c <__udivsi3>
 8010dd0:	8822943a 	slli	r17,r17,16
 8010dd4:	b085383a 	mul	r2,r22,r2
 8010dd8:	a0ffffcc 	andi	r3,r20,65535
 8010ddc:	1c46b03a 	or	r3,r3,r17
 8010de0:	1880042e 	bgeu	r3,r2,8010df4 <__umoddi3+0x11c>
 8010de4:	1cc7883a 	add	r3,r3,r19
 8010de8:	1cc00236 	bltu	r3,r19,8010df4 <__umoddi3+0x11c>
 8010dec:	1880012e 	bgeu	r3,r2,8010df4 <__umoddi3+0x11c>
 8010df0:	1cc7883a 	add	r3,r3,r19
 8010df4:	1885c83a 	sub	r2,r3,r2
 8010df8:	1484d83a 	srl	r2,r2,r18
 8010dfc:	0007883a 	mov	r3,zero
 8010e00:	00004f06 	br	8010f40 <__umoddi3+0x268>
 8010e04:	29c04c36 	bltu	r5,r7,8010f38 <__umoddi3+0x260>
 8010e08:	00bfffd4 	movui	r2,65535
 8010e0c:	11c0582e 	bgeu	r2,r7,8010f70 <__umoddi3+0x298>
 8010e10:	00804034 	movhi	r2,256
 8010e14:	10bfffc4 	addi	r2,r2,-1
 8010e18:	11c0e736 	bltu	r2,r7,80111b8 <__umoddi3+0x4e0>
 8010e1c:	01000404 	movi	r4,16
 8010e20:	3904d83a 	srl	r2,r7,r4
 8010e24:	00c20074 	movhi	r3,2049
 8010e28:	18d64004 	addi	r3,r3,22784
 8010e2c:	1885883a 	add	r2,r3,r2
 8010e30:	14c00003 	ldbu	r19,0(r2)
 8010e34:	00c00804 	movi	r3,32
 8010e38:	9927883a 	add	r19,r19,r4
 8010e3c:	1ce9c83a 	sub	r20,r3,r19
 8010e40:	a000581e 	bne	r20,zero,8010fa4 <__umoddi3+0x2cc>
 8010e44:	3c400136 	bltu	r7,r17,8010e4c <__umoddi3+0x174>
 8010e48:	8180eb36 	bltu	r16,r6,80111f8 <__umoddi3+0x520>
 8010e4c:	8185c83a 	sub	r2,r16,r6
 8010e50:	89e3c83a 	sub	r17,r17,r7
 8010e54:	8089803a 	cmpltu	r4,r16,r2
 8010e58:	8939c83a 	sub	fp,r17,r4
 8010e5c:	e007883a 	mov	r3,fp
 8010e60:	00003706 	br	8010f40 <__umoddi3+0x268>
 8010e64:	3000041e 	bne	r6,zero,8010e78 <__umoddi3+0x1a0>
 8010e68:	000b883a 	mov	r5,zero
 8010e6c:	01000044 	movi	r4,1
 8010e70:	800333c0 	call	800333c <__udivsi3>
 8010e74:	1027883a 	mov	r19,r2
 8010e78:	00bfffd4 	movui	r2,65535
 8010e7c:	14c0402e 	bgeu	r2,r19,8010f80 <__umoddi3+0x2a8>
 8010e80:	00804034 	movhi	r2,256
 8010e84:	10bfffc4 	addi	r2,r2,-1
 8010e88:	14c0cd36 	bltu	r2,r19,80111c0 <__umoddi3+0x4e8>
 8010e8c:	00800404 	movi	r2,16
 8010e90:	9886d83a 	srl	r3,r19,r2
 8010e94:	01020074 	movhi	r4,2049
 8010e98:	21164004 	addi	r4,r4,22784
 8010e9c:	20c7883a 	add	r3,r4,r3
 8010ea0:	18c00003 	ldbu	r3,0(r3)
 8010ea4:	1887883a 	add	r3,r3,r2
 8010ea8:	00800804 	movi	r2,32
 8010eac:	10e5c83a 	sub	r18,r2,r3
 8010eb0:	9000901e 	bne	r18,zero,80110f4 <__umoddi3+0x41c>
 8010eb4:	982cd43a 	srli	r22,r19,16
 8010eb8:	8ce3c83a 	sub	r17,r17,r19
 8010ebc:	9d7fffcc 	andi	r21,r19,65535
 8010ec0:	b00b883a 	mov	r5,r22
 8010ec4:	8809883a 	mov	r4,r17
 8010ec8:	80033a00 	call	80033a0 <__umodsi3>
 8010ecc:	8809883a 	mov	r4,r17
 8010ed0:	b00b883a 	mov	r5,r22
 8010ed4:	1021883a 	mov	r16,r2
 8010ed8:	800333c0 	call	800333c <__udivsi3>
 8010edc:	8006943a 	slli	r3,r16,16
 8010ee0:	a008d43a 	srli	r4,r20,16
 8010ee4:	1545383a 	mul	r2,r2,r21
 8010ee8:	20c8b03a 	or	r4,r4,r3
 8010eec:	2080042e 	bgeu	r4,r2,8010f00 <__umoddi3+0x228>
 8010ef0:	24c9883a 	add	r4,r4,r19
 8010ef4:	24c00236 	bltu	r4,r19,8010f00 <__umoddi3+0x228>
 8010ef8:	2080012e 	bgeu	r4,r2,8010f00 <__umoddi3+0x228>
 8010efc:	24c9883a 	add	r4,r4,r19
 8010f00:	20a1c83a 	sub	r16,r4,r2
 8010f04:	b00b883a 	mov	r5,r22
 8010f08:	8009883a 	mov	r4,r16
 8010f0c:	80033a00 	call	80033a0 <__umodsi3>
 8010f10:	1023883a 	mov	r17,r2
 8010f14:	b00b883a 	mov	r5,r22
 8010f18:	8009883a 	mov	r4,r16
 8010f1c:	800333c0 	call	800333c <__udivsi3>
 8010f20:	8822943a 	slli	r17,r17,16
 8010f24:	1545383a 	mul	r2,r2,r21
 8010f28:	a53fffcc 	andi	r20,r20,65535
 8010f2c:	a446b03a 	or	r3,r20,r17
 8010f30:	18bfb02e 	bgeu	r3,r2,8010df4 <__alt_data_end+0xfc010df4>
 8010f34:	003fab06 	br	8010de4 <__alt_data_end+0xfc010de4>
 8010f38:	2005883a 	mov	r2,r4
 8010f3c:	2807883a 	mov	r3,r5
 8010f40:	dfc00b17 	ldw	ra,44(sp)
 8010f44:	df000a17 	ldw	fp,40(sp)
 8010f48:	ddc00917 	ldw	r23,36(sp)
 8010f4c:	dd800817 	ldw	r22,32(sp)
 8010f50:	dd400717 	ldw	r21,28(sp)
 8010f54:	dd000617 	ldw	r20,24(sp)
 8010f58:	dcc00517 	ldw	r19,20(sp)
 8010f5c:	dc800417 	ldw	r18,16(sp)
 8010f60:	dc400317 	ldw	r17,12(sp)
 8010f64:	dc000217 	ldw	r16,8(sp)
 8010f68:	dec00c04 	addi	sp,sp,48
 8010f6c:	f800283a 	ret
 8010f70:	04c03fc4 	movi	r19,255
 8010f74:	99c9803a 	cmpltu	r4,r19,r7
 8010f78:	200890fa 	slli	r4,r4,3
 8010f7c:	003fa806 	br	8010e20 <__alt_data_end+0xfc010e20>
 8010f80:	00803fc4 	movi	r2,255
 8010f84:	14c5803a 	cmpltu	r2,r2,r19
 8010f88:	100490fa 	slli	r2,r2,3
 8010f8c:	003fc006 	br	8010e90 <__alt_data_end+0xfc010e90>
 8010f90:	00804034 	movhi	r2,256
 8010f94:	10bfffc4 	addi	r2,r2,-1
 8010f98:	11808b36 	bltu	r2,r6,80111c8 <__umoddi3+0x4f0>
 8010f9c:	01000404 	movi	r4,16
 8010fa0:	003f6406 	br	8010d34 <__alt_data_end+0xfc010d34>
 8010fa4:	34c4d83a 	srl	r2,r6,r19
 8010fa8:	3d0e983a 	sll	r7,r7,r20
 8010fac:	8cf8d83a 	srl	fp,r17,r19
 8010fb0:	8d10983a 	sll	r8,r17,r20
 8010fb4:	38aab03a 	or	r21,r7,r2
 8010fb8:	a82cd43a 	srli	r22,r21,16
 8010fbc:	84e2d83a 	srl	r17,r16,r19
 8010fc0:	e009883a 	mov	r4,fp
 8010fc4:	b00b883a 	mov	r5,r22
 8010fc8:	8a22b03a 	or	r17,r17,r8
 8010fcc:	3524983a 	sll	r18,r6,r20
 8010fd0:	80033a00 	call	80033a0 <__umodsi3>
 8010fd4:	e009883a 	mov	r4,fp
 8010fd8:	b00b883a 	mov	r5,r22
 8010fdc:	102f883a 	mov	r23,r2
 8010fe0:	800333c0 	call	800333c <__udivsi3>
 8010fe4:	100d883a 	mov	r6,r2
 8010fe8:	b808943a 	slli	r4,r23,16
 8010fec:	aa3fffcc 	andi	r8,r21,65535
 8010ff0:	8804d43a 	srli	r2,r17,16
 8010ff4:	41af383a 	mul	r23,r8,r6
 8010ff8:	8520983a 	sll	r16,r16,r20
 8010ffc:	1104b03a 	or	r2,r2,r4
 8011000:	15c0042e 	bgeu	r2,r23,8011014 <__umoddi3+0x33c>
 8011004:	1545883a 	add	r2,r2,r21
 8011008:	30ffffc4 	addi	r3,r6,-1
 801100c:	1540742e 	bgeu	r2,r21,80111e0 <__umoddi3+0x508>
 8011010:	180d883a 	mov	r6,r3
 8011014:	15efc83a 	sub	r23,r2,r23
 8011018:	b00b883a 	mov	r5,r22
 801101c:	b809883a 	mov	r4,r23
 8011020:	d9800115 	stw	r6,4(sp)
 8011024:	da000015 	stw	r8,0(sp)
 8011028:	80033a00 	call	80033a0 <__umodsi3>
 801102c:	b00b883a 	mov	r5,r22
 8011030:	b809883a 	mov	r4,r23
 8011034:	1039883a 	mov	fp,r2
 8011038:	800333c0 	call	800333c <__udivsi3>
 801103c:	da000017 	ldw	r8,0(sp)
 8011040:	e038943a 	slli	fp,fp,16
 8011044:	100b883a 	mov	r5,r2
 8011048:	4089383a 	mul	r4,r8,r2
 801104c:	8a3fffcc 	andi	r8,r17,65535
 8011050:	4710b03a 	or	r8,r8,fp
 8011054:	d9800117 	ldw	r6,4(sp)
 8011058:	4100042e 	bgeu	r8,r4,801106c <__umoddi3+0x394>
 801105c:	4551883a 	add	r8,r8,r21
 8011060:	10bfffc4 	addi	r2,r2,-1
 8011064:	45405a2e 	bgeu	r8,r21,80111d0 <__umoddi3+0x4f8>
 8011068:	100b883a 	mov	r5,r2
 801106c:	300c943a 	slli	r6,r6,16
 8011070:	91ffffcc 	andi	r7,r18,65535
 8011074:	9004d43a 	srli	r2,r18,16
 8011078:	314cb03a 	or	r6,r6,r5
 801107c:	317fffcc 	andi	r5,r6,65535
 8011080:	300cd43a 	srli	r6,r6,16
 8011084:	29d3383a 	mul	r9,r5,r7
 8011088:	288b383a 	mul	r5,r5,r2
 801108c:	31cf383a 	mul	r7,r6,r7
 8011090:	4806d43a 	srli	r3,r9,16
 8011094:	4111c83a 	sub	r8,r8,r4
 8011098:	29cb883a 	add	r5,r5,r7
 801109c:	194b883a 	add	r5,r3,r5
 80110a0:	3085383a 	mul	r2,r6,r2
 80110a4:	29c0022e 	bgeu	r5,r7,80110b0 <__umoddi3+0x3d8>
 80110a8:	00c00074 	movhi	r3,1
 80110ac:	10c5883a 	add	r2,r2,r3
 80110b0:	2808d43a 	srli	r4,r5,16
 80110b4:	280a943a 	slli	r5,r5,16
 80110b8:	4a7fffcc 	andi	r9,r9,65535
 80110bc:	2085883a 	add	r2,r4,r2
 80110c0:	2a4b883a 	add	r5,r5,r9
 80110c4:	40803636 	bltu	r8,r2,80111a0 <__umoddi3+0x4c8>
 80110c8:	40804d26 	beq	r8,r2,8011200 <__umoddi3+0x528>
 80110cc:	4089c83a 	sub	r4,r8,r2
 80110d0:	280f883a 	mov	r7,r5
 80110d4:	81cfc83a 	sub	r7,r16,r7
 80110d8:	81c7803a 	cmpltu	r3,r16,r7
 80110dc:	20c7c83a 	sub	r3,r4,r3
 80110e0:	1cc4983a 	sll	r2,r3,r19
 80110e4:	3d0ed83a 	srl	r7,r7,r20
 80110e8:	1d06d83a 	srl	r3,r3,r20
 80110ec:	11c4b03a 	or	r2,r2,r7
 80110f0:	003f9306 	br	8010f40 <__alt_data_end+0xfc010f40>
 80110f4:	9ca6983a 	sll	r19,r19,r18
 80110f8:	88e8d83a 	srl	r20,r17,r3
 80110fc:	80c4d83a 	srl	r2,r16,r3
 8011100:	982cd43a 	srli	r22,r19,16
 8011104:	8ca2983a 	sll	r17,r17,r18
 8011108:	a009883a 	mov	r4,r20
 801110c:	b00b883a 	mov	r5,r22
 8011110:	1478b03a 	or	fp,r2,r17
 8011114:	80033a00 	call	80033a0 <__umodsi3>
 8011118:	a009883a 	mov	r4,r20
 801111c:	b00b883a 	mov	r5,r22
 8011120:	1023883a 	mov	r17,r2
 8011124:	800333c0 	call	800333c <__udivsi3>
 8011128:	9d7fffcc 	andi	r21,r19,65535
 801112c:	880a943a 	slli	r5,r17,16
 8011130:	e008d43a 	srli	r4,fp,16
 8011134:	a885383a 	mul	r2,r21,r2
 8011138:	84a8983a 	sll	r20,r16,r18
 801113c:	2148b03a 	or	r4,r4,r5
 8011140:	2080042e 	bgeu	r4,r2,8011154 <__umoddi3+0x47c>
 8011144:	24c9883a 	add	r4,r4,r19
 8011148:	24c00236 	bltu	r4,r19,8011154 <__umoddi3+0x47c>
 801114c:	2080012e 	bgeu	r4,r2,8011154 <__umoddi3+0x47c>
 8011150:	24c9883a 	add	r4,r4,r19
 8011154:	20a3c83a 	sub	r17,r4,r2
 8011158:	b00b883a 	mov	r5,r22
 801115c:	8809883a 	mov	r4,r17
 8011160:	80033a00 	call	80033a0 <__umodsi3>
 8011164:	102f883a 	mov	r23,r2
 8011168:	8809883a 	mov	r4,r17
 801116c:	b00b883a 	mov	r5,r22
 8011170:	800333c0 	call	800333c <__udivsi3>
 8011174:	b82e943a 	slli	r23,r23,16
 8011178:	a885383a 	mul	r2,r21,r2
 801117c:	e13fffcc 	andi	r4,fp,65535
 8011180:	25c8b03a 	or	r4,r4,r23
 8011184:	2080042e 	bgeu	r4,r2,8011198 <__umoddi3+0x4c0>
 8011188:	24c9883a 	add	r4,r4,r19
 801118c:	24c00236 	bltu	r4,r19,8011198 <__umoddi3+0x4c0>
 8011190:	2080012e 	bgeu	r4,r2,8011198 <__umoddi3+0x4c0>
 8011194:	24c9883a 	add	r4,r4,r19
 8011198:	20a3c83a 	sub	r17,r4,r2
 801119c:	003f4806 	br	8010ec0 <__alt_data_end+0xfc010ec0>
 80111a0:	2c8fc83a 	sub	r7,r5,r18
 80111a4:	1545c83a 	sub	r2,r2,r21
 80111a8:	29cb803a 	cmpltu	r5,r5,r7
 80111ac:	1145c83a 	sub	r2,r2,r5
 80111b0:	4089c83a 	sub	r4,r8,r2
 80111b4:	003fc706 	br	80110d4 <__alt_data_end+0xfc0110d4>
 80111b8:	01000604 	movi	r4,24
 80111bc:	003f1806 	br	8010e20 <__alt_data_end+0xfc010e20>
 80111c0:	00800604 	movi	r2,24
 80111c4:	003f3206 	br	8010e90 <__alt_data_end+0xfc010e90>
 80111c8:	01000604 	movi	r4,24
 80111cc:	003ed906 	br	8010d34 <__alt_data_end+0xfc010d34>
 80111d0:	413fa52e 	bgeu	r8,r4,8011068 <__alt_data_end+0xfc011068>
 80111d4:	297fff84 	addi	r5,r5,-2
 80111d8:	4551883a 	add	r8,r8,r21
 80111dc:	003fa306 	br	801106c <__alt_data_end+0xfc01106c>
 80111e0:	15ff8b2e 	bgeu	r2,r23,8011010 <__alt_data_end+0xfc011010>
 80111e4:	31bfff84 	addi	r6,r6,-2
 80111e8:	1545883a 	add	r2,r2,r21
 80111ec:	003f8906 	br	8011014 <__alt_data_end+0xfc011014>
 80111f0:	24c9883a 	add	r4,r4,r19
 80111f4:	003eee06 	br	8010db0 <__alt_data_end+0xfc010db0>
 80111f8:	8005883a 	mov	r2,r16
 80111fc:	003f1706 	br	8010e5c <__alt_data_end+0xfc010e5c>
 8011200:	817fe736 	bltu	r16,r5,80111a0 <__alt_data_end+0xfc0111a0>
 8011204:	280f883a 	mov	r7,r5
 8011208:	0009883a 	mov	r4,zero
 801120c:	003fb106 	br	80110d4 <__alt_data_end+0xfc0110d4>

08011210 <__floatunsidf>:
 8011210:	defffe04 	addi	sp,sp,-8
 8011214:	dc000015 	stw	r16,0(sp)
 8011218:	dfc00115 	stw	ra,4(sp)
 801121c:	2021883a 	mov	r16,r4
 8011220:	20002226 	beq	r4,zero,80112ac <__floatunsidf+0x9c>
 8011224:	800710c0 	call	800710c <__clzsi2>
 8011228:	01010784 	movi	r4,1054
 801122c:	2089c83a 	sub	r4,r4,r2
 8011230:	01810cc4 	movi	r6,1075
 8011234:	310dc83a 	sub	r6,r6,r4
 8011238:	00c007c4 	movi	r3,31
 801123c:	1980120e 	bge	r3,r6,8011288 <__floatunsidf+0x78>
 8011240:	00c104c4 	movi	r3,1043
 8011244:	1907c83a 	sub	r3,r3,r4
 8011248:	80ca983a 	sll	r5,r16,r3
 801124c:	00800434 	movhi	r2,16
 8011250:	10bfffc4 	addi	r2,r2,-1
 8011254:	2101ffcc 	andi	r4,r4,2047
 8011258:	0021883a 	mov	r16,zero
 801125c:	288a703a 	and	r5,r5,r2
 8011260:	2008953a 	slli	r4,r4,20
 8011264:	00c00434 	movhi	r3,16
 8011268:	18ffffc4 	addi	r3,r3,-1
 801126c:	28c6703a 	and	r3,r5,r3
 8011270:	8005883a 	mov	r2,r16
 8011274:	1906b03a 	or	r3,r3,r4
 8011278:	dfc00117 	ldw	ra,4(sp)
 801127c:	dc000017 	ldw	r16,0(sp)
 8011280:	dec00204 	addi	sp,sp,8
 8011284:	f800283a 	ret
 8011288:	00c002c4 	movi	r3,11
 801128c:	188bc83a 	sub	r5,r3,r2
 8011290:	814ad83a 	srl	r5,r16,r5
 8011294:	00c00434 	movhi	r3,16
 8011298:	18ffffc4 	addi	r3,r3,-1
 801129c:	81a0983a 	sll	r16,r16,r6
 80112a0:	2101ffcc 	andi	r4,r4,2047
 80112a4:	28ca703a 	and	r5,r5,r3
 80112a8:	003fed06 	br	8011260 <__alt_data_end+0xfc011260>
 80112ac:	0009883a 	mov	r4,zero
 80112b0:	000b883a 	mov	r5,zero
 80112b4:	003fea06 	br	8011260 <__alt_data_end+0xfc011260>

080112b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80112b8:	defffe04 	addi	sp,sp,-8
 80112bc:	dfc00115 	stw	ra,4(sp)
 80112c0:	df000015 	stw	fp,0(sp)
 80112c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80112c8:	d0a00c17 	ldw	r2,-32720(gp)
 80112cc:	10000326 	beq	r2,zero,80112dc <alt_get_errno+0x24>
 80112d0:	d0a00c17 	ldw	r2,-32720(gp)
 80112d4:	103ee83a 	callr	r2
 80112d8:	00000106 	br	80112e0 <alt_get_errno+0x28>
 80112dc:	d0a70904 	addi	r2,gp,-25564
}
 80112e0:	e037883a 	mov	sp,fp
 80112e4:	dfc00117 	ldw	ra,4(sp)
 80112e8:	df000017 	ldw	fp,0(sp)
 80112ec:	dec00204 	addi	sp,sp,8
 80112f0:	f800283a 	ret

080112f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80112f4:	defffb04 	addi	sp,sp,-20
 80112f8:	dfc00415 	stw	ra,16(sp)
 80112fc:	df000315 	stw	fp,12(sp)
 8011300:	df000304 	addi	fp,sp,12
 8011304:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8011308:	e0bfff17 	ldw	r2,-4(fp)
 801130c:	10000616 	blt	r2,zero,8011328 <close+0x34>
 8011310:	e0bfff17 	ldw	r2,-4(fp)
 8011314:	10c00324 	muli	r3,r2,12
 8011318:	00820074 	movhi	r2,2049
 801131c:	10994a04 	addi	r2,r2,25896
 8011320:	1885883a 	add	r2,r3,r2
 8011324:	00000106 	br	801132c <close+0x38>
 8011328:	0005883a 	mov	r2,zero
 801132c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8011330:	e0bffd17 	ldw	r2,-12(fp)
 8011334:	10001926 	beq	r2,zero,801139c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8011338:	e0bffd17 	ldw	r2,-12(fp)
 801133c:	10800017 	ldw	r2,0(r2)
 8011340:	10800417 	ldw	r2,16(r2)
 8011344:	10000626 	beq	r2,zero,8011360 <close+0x6c>
 8011348:	e0bffd17 	ldw	r2,-12(fp)
 801134c:	10800017 	ldw	r2,0(r2)
 8011350:	10800417 	ldw	r2,16(r2)
 8011354:	e13ffd17 	ldw	r4,-12(fp)
 8011358:	103ee83a 	callr	r2
 801135c:	00000106 	br	8011364 <close+0x70>
 8011360:	0005883a 	mov	r2,zero
 8011364:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8011368:	e13fff17 	ldw	r4,-4(fp)
 801136c:	80119b40 	call	80119b4 <alt_release_fd>
    if (rval < 0)
 8011370:	e0bffe17 	ldw	r2,-8(fp)
 8011374:	1000070e 	bge	r2,zero,8011394 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8011378:	80112b80 	call	80112b8 <alt_get_errno>
 801137c:	1007883a 	mov	r3,r2
 8011380:	e0bffe17 	ldw	r2,-8(fp)
 8011384:	0085c83a 	sub	r2,zero,r2
 8011388:	18800015 	stw	r2,0(r3)
      return -1;
 801138c:	00bfffc4 	movi	r2,-1
 8011390:	00000706 	br	80113b0 <close+0xbc>
    }
    return 0;
 8011394:	0005883a 	mov	r2,zero
 8011398:	00000506 	br	80113b0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801139c:	80112b80 	call	80112b8 <alt_get_errno>
 80113a0:	1007883a 	mov	r3,r2
 80113a4:	00801444 	movi	r2,81
 80113a8:	18800015 	stw	r2,0(r3)
    return -1;
 80113ac:	00bfffc4 	movi	r2,-1
  }
}
 80113b0:	e037883a 	mov	sp,fp
 80113b4:	dfc00117 	ldw	ra,4(sp)
 80113b8:	df000017 	ldw	fp,0(sp)
 80113bc:	dec00204 	addi	sp,sp,8
 80113c0:	f800283a 	ret

080113c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80113c4:	defffc04 	addi	sp,sp,-16
 80113c8:	df000315 	stw	fp,12(sp)
 80113cc:	df000304 	addi	fp,sp,12
 80113d0:	e13ffd15 	stw	r4,-12(fp)
 80113d4:	e17ffe15 	stw	r5,-8(fp)
 80113d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80113dc:	e0bfff17 	ldw	r2,-4(fp)
}
 80113e0:	e037883a 	mov	sp,fp
 80113e4:	df000017 	ldw	fp,0(sp)
 80113e8:	dec00104 	addi	sp,sp,4
 80113ec:	f800283a 	ret

080113f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80113f0:	defffe04 	addi	sp,sp,-8
 80113f4:	dfc00115 	stw	ra,4(sp)
 80113f8:	df000015 	stw	fp,0(sp)
 80113fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011400:	d0a00c17 	ldw	r2,-32720(gp)
 8011404:	10000326 	beq	r2,zero,8011414 <alt_get_errno+0x24>
 8011408:	d0a00c17 	ldw	r2,-32720(gp)
 801140c:	103ee83a 	callr	r2
 8011410:	00000106 	br	8011418 <alt_get_errno+0x28>
 8011414:	d0a70904 	addi	r2,gp,-25564
}
 8011418:	e037883a 	mov	sp,fp
 801141c:	dfc00117 	ldw	ra,4(sp)
 8011420:	df000017 	ldw	fp,0(sp)
 8011424:	dec00204 	addi	sp,sp,8
 8011428:	f800283a 	ret

0801142c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 801142c:	defffb04 	addi	sp,sp,-20
 8011430:	dfc00415 	stw	ra,16(sp)
 8011434:	df000315 	stw	fp,12(sp)
 8011438:	df000304 	addi	fp,sp,12
 801143c:	e13ffe15 	stw	r4,-8(fp)
 8011440:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011444:	e0bffe17 	ldw	r2,-8(fp)
 8011448:	10000616 	blt	r2,zero,8011464 <fstat+0x38>
 801144c:	e0bffe17 	ldw	r2,-8(fp)
 8011450:	10c00324 	muli	r3,r2,12
 8011454:	00820074 	movhi	r2,2049
 8011458:	10994a04 	addi	r2,r2,25896
 801145c:	1885883a 	add	r2,r3,r2
 8011460:	00000106 	br	8011468 <fstat+0x3c>
 8011464:	0005883a 	mov	r2,zero
 8011468:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 801146c:	e0bffd17 	ldw	r2,-12(fp)
 8011470:	10001026 	beq	r2,zero,80114b4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8011474:	e0bffd17 	ldw	r2,-12(fp)
 8011478:	10800017 	ldw	r2,0(r2)
 801147c:	10800817 	ldw	r2,32(r2)
 8011480:	10000726 	beq	r2,zero,80114a0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8011484:	e0bffd17 	ldw	r2,-12(fp)
 8011488:	10800017 	ldw	r2,0(r2)
 801148c:	10800817 	ldw	r2,32(r2)
 8011490:	e17fff17 	ldw	r5,-4(fp)
 8011494:	e13ffd17 	ldw	r4,-12(fp)
 8011498:	103ee83a 	callr	r2
 801149c:	00000a06 	br	80114c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80114a0:	e0bfff17 	ldw	r2,-4(fp)
 80114a4:	00c80004 	movi	r3,8192
 80114a8:	10c00115 	stw	r3,4(r2)
      return 0;
 80114ac:	0005883a 	mov	r2,zero
 80114b0:	00000506 	br	80114c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80114b4:	80113f00 	call	80113f0 <alt_get_errno>
 80114b8:	1007883a 	mov	r3,r2
 80114bc:	00801444 	movi	r2,81
 80114c0:	18800015 	stw	r2,0(r3)
    return -1;
 80114c4:	00bfffc4 	movi	r2,-1
  }
}
 80114c8:	e037883a 	mov	sp,fp
 80114cc:	dfc00117 	ldw	ra,4(sp)
 80114d0:	df000017 	ldw	fp,0(sp)
 80114d4:	dec00204 	addi	sp,sp,8
 80114d8:	f800283a 	ret

080114dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80114dc:	defffe04 	addi	sp,sp,-8
 80114e0:	dfc00115 	stw	ra,4(sp)
 80114e4:	df000015 	stw	fp,0(sp)
 80114e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80114ec:	d0a00c17 	ldw	r2,-32720(gp)
 80114f0:	10000326 	beq	r2,zero,8011500 <alt_get_errno+0x24>
 80114f4:	d0a00c17 	ldw	r2,-32720(gp)
 80114f8:	103ee83a 	callr	r2
 80114fc:	00000106 	br	8011504 <alt_get_errno+0x28>
 8011500:	d0a70904 	addi	r2,gp,-25564
}
 8011504:	e037883a 	mov	sp,fp
 8011508:	dfc00117 	ldw	ra,4(sp)
 801150c:	df000017 	ldw	fp,0(sp)
 8011510:	dec00204 	addi	sp,sp,8
 8011514:	f800283a 	ret

08011518 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8011518:	deffed04 	addi	sp,sp,-76
 801151c:	dfc01215 	stw	ra,72(sp)
 8011520:	df001115 	stw	fp,68(sp)
 8011524:	df001104 	addi	fp,sp,68
 8011528:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801152c:	e0bfff17 	ldw	r2,-4(fp)
 8011530:	10000616 	blt	r2,zero,801154c <isatty+0x34>
 8011534:	e0bfff17 	ldw	r2,-4(fp)
 8011538:	10c00324 	muli	r3,r2,12
 801153c:	00820074 	movhi	r2,2049
 8011540:	10994a04 	addi	r2,r2,25896
 8011544:	1885883a 	add	r2,r3,r2
 8011548:	00000106 	br	8011550 <isatty+0x38>
 801154c:	0005883a 	mov	r2,zero
 8011550:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8011554:	e0bfef17 	ldw	r2,-68(fp)
 8011558:	10000e26 	beq	r2,zero,8011594 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 801155c:	e0bfef17 	ldw	r2,-68(fp)
 8011560:	10800017 	ldw	r2,0(r2)
 8011564:	10800817 	ldw	r2,32(r2)
 8011568:	1000021e 	bne	r2,zero,8011574 <isatty+0x5c>
    {
      return 1;
 801156c:	00800044 	movi	r2,1
 8011570:	00000d06 	br	80115a8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8011574:	e0bff004 	addi	r2,fp,-64
 8011578:	100b883a 	mov	r5,r2
 801157c:	e13fff17 	ldw	r4,-4(fp)
 8011580:	801142c0 	call	801142c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8011584:	e0bff117 	ldw	r2,-60(fp)
 8011588:	10880020 	cmpeqi	r2,r2,8192
 801158c:	10803fcc 	andi	r2,r2,255
 8011590:	00000506 	br	80115a8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8011594:	80114dc0 	call	80114dc <alt_get_errno>
 8011598:	1007883a 	mov	r3,r2
 801159c:	00801444 	movi	r2,81
 80115a0:	18800015 	stw	r2,0(r3)
    return 0;
 80115a4:	0005883a 	mov	r2,zero
  }
}
 80115a8:	e037883a 	mov	sp,fp
 80115ac:	dfc00117 	ldw	ra,4(sp)
 80115b0:	df000017 	ldw	fp,0(sp)
 80115b4:	dec00204 	addi	sp,sp,8
 80115b8:	f800283a 	ret

080115bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80115bc:	defffc04 	addi	sp,sp,-16
 80115c0:	df000315 	stw	fp,12(sp)
 80115c4:	df000304 	addi	fp,sp,12
 80115c8:	e13ffd15 	stw	r4,-12(fp)
 80115cc:	e17ffe15 	stw	r5,-8(fp)
 80115d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80115d4:	e0fffe17 	ldw	r3,-8(fp)
 80115d8:	e0bffd17 	ldw	r2,-12(fp)
 80115dc:	18800c26 	beq	r3,r2,8011610 <alt_load_section+0x54>
  {
    while( to != end )
 80115e0:	00000806 	br	8011604 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80115e4:	e0bffe17 	ldw	r2,-8(fp)
 80115e8:	10c00104 	addi	r3,r2,4
 80115ec:	e0fffe15 	stw	r3,-8(fp)
 80115f0:	e0fffd17 	ldw	r3,-12(fp)
 80115f4:	19000104 	addi	r4,r3,4
 80115f8:	e13ffd15 	stw	r4,-12(fp)
 80115fc:	18c00017 	ldw	r3,0(r3)
 8011600:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8011604:	e0fffe17 	ldw	r3,-8(fp)
 8011608:	e0bfff17 	ldw	r2,-4(fp)
 801160c:	18bff51e 	bne	r3,r2,80115e4 <__alt_data_end+0xfc0115e4>
    {
      *to++ = *from++;
    }
  }
}
 8011610:	0001883a 	nop
 8011614:	e037883a 	mov	sp,fp
 8011618:	df000017 	ldw	fp,0(sp)
 801161c:	dec00104 	addi	sp,sp,4
 8011620:	f800283a 	ret

08011624 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8011624:	defffe04 	addi	sp,sp,-8
 8011628:	dfc00115 	stw	ra,4(sp)
 801162c:	df000015 	stw	fp,0(sp)
 8011630:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8011634:	01820074 	movhi	r6,2049
 8011638:	319e0504 	addi	r6,r6,30740
 801163c:	01420074 	movhi	r5,2049
 8011640:	29571704 	addi	r5,r5,23644
 8011644:	01020074 	movhi	r4,2049
 8011648:	211e0504 	addi	r4,r4,30740
 801164c:	80115bc0 	call	80115bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8011650:	018000b4 	movhi	r6,2
 8011654:	31809204 	addi	r6,r6,584
 8011658:	014000b4 	movhi	r5,2
 801165c:	29400804 	addi	r5,r5,32
 8011660:	01020034 	movhi	r4,2048
 8011664:	21000004 	addi	r4,r4,0
 8011668:	80115bc0 	call	80115bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 801166c:	01820074 	movhi	r6,2049
 8011670:	31971704 	addi	r6,r6,23644
 8011674:	01420074 	movhi	r5,2049
 8011678:	29555004 	addi	r5,r5,21824
 801167c:	01020074 	movhi	r4,2049
 8011680:	21155004 	addi	r4,r4,21824
 8011684:	80115bc0 	call	80115bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8011688:	801454c0 	call	801454c <alt_dcache_flush_all>
  alt_icache_flush_all();
 801168c:	80147c40 	call	80147c4 <alt_icache_flush_all>
}
 8011690:	0001883a 	nop
 8011694:	e037883a 	mov	sp,fp
 8011698:	dfc00117 	ldw	ra,4(sp)
 801169c:	df000017 	ldw	fp,0(sp)
 80116a0:	dec00204 	addi	sp,sp,8
 80116a4:	f800283a 	ret

080116a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80116a8:	defffe04 	addi	sp,sp,-8
 80116ac:	dfc00115 	stw	ra,4(sp)
 80116b0:	df000015 	stw	fp,0(sp)
 80116b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80116b8:	d0a00c17 	ldw	r2,-32720(gp)
 80116bc:	10000326 	beq	r2,zero,80116cc <alt_get_errno+0x24>
 80116c0:	d0a00c17 	ldw	r2,-32720(gp)
 80116c4:	103ee83a 	callr	r2
 80116c8:	00000106 	br	80116d0 <alt_get_errno+0x28>
 80116cc:	d0a70904 	addi	r2,gp,-25564
}
 80116d0:	e037883a 	mov	sp,fp
 80116d4:	dfc00117 	ldw	ra,4(sp)
 80116d8:	df000017 	ldw	fp,0(sp)
 80116dc:	dec00204 	addi	sp,sp,8
 80116e0:	f800283a 	ret

080116e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80116e4:	defff904 	addi	sp,sp,-28
 80116e8:	dfc00615 	stw	ra,24(sp)
 80116ec:	df000515 	stw	fp,20(sp)
 80116f0:	df000504 	addi	fp,sp,20
 80116f4:	e13ffd15 	stw	r4,-12(fp)
 80116f8:	e17ffe15 	stw	r5,-8(fp)
 80116fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8011700:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011704:	e0bffd17 	ldw	r2,-12(fp)
 8011708:	10000616 	blt	r2,zero,8011724 <lseek+0x40>
 801170c:	e0bffd17 	ldw	r2,-12(fp)
 8011710:	10c00324 	muli	r3,r2,12
 8011714:	00820074 	movhi	r2,2049
 8011718:	10994a04 	addi	r2,r2,25896
 801171c:	1885883a 	add	r2,r3,r2
 8011720:	00000106 	br	8011728 <lseek+0x44>
 8011724:	0005883a 	mov	r2,zero
 8011728:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 801172c:	e0bffc17 	ldw	r2,-16(fp)
 8011730:	10001026 	beq	r2,zero,8011774 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8011734:	e0bffc17 	ldw	r2,-16(fp)
 8011738:	10800017 	ldw	r2,0(r2)
 801173c:	10800717 	ldw	r2,28(r2)
 8011740:	10000926 	beq	r2,zero,8011768 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8011744:	e0bffc17 	ldw	r2,-16(fp)
 8011748:	10800017 	ldw	r2,0(r2)
 801174c:	10800717 	ldw	r2,28(r2)
 8011750:	e1bfff17 	ldw	r6,-4(fp)
 8011754:	e17ffe17 	ldw	r5,-8(fp)
 8011758:	e13ffc17 	ldw	r4,-16(fp)
 801175c:	103ee83a 	callr	r2
 8011760:	e0bffb15 	stw	r2,-20(fp)
 8011764:	00000506 	br	801177c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8011768:	00bfde84 	movi	r2,-134
 801176c:	e0bffb15 	stw	r2,-20(fp)
 8011770:	00000206 	br	801177c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8011774:	00bfebc4 	movi	r2,-81
 8011778:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 801177c:	e0bffb17 	ldw	r2,-20(fp)
 8011780:	1000070e 	bge	r2,zero,80117a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8011784:	80116a80 	call	80116a8 <alt_get_errno>
 8011788:	1007883a 	mov	r3,r2
 801178c:	e0bffb17 	ldw	r2,-20(fp)
 8011790:	0085c83a 	sub	r2,zero,r2
 8011794:	18800015 	stw	r2,0(r3)
    rc = -1;
 8011798:	00bfffc4 	movi	r2,-1
 801179c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80117a0:	e0bffb17 	ldw	r2,-20(fp)
}
 80117a4:	e037883a 	mov	sp,fp
 80117a8:	dfc00117 	ldw	ra,4(sp)
 80117ac:	df000017 	ldw	fp,0(sp)
 80117b0:	dec00204 	addi	sp,sp,8
 80117b4:	f800283a 	ret

080117b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80117b8:	defffd04 	addi	sp,sp,-12
 80117bc:	dfc00215 	stw	ra,8(sp)
 80117c0:	df000115 	stw	fp,4(sp)
 80117c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80117c8:	0009883a 	mov	r4,zero
 80117cc:	8011d040 	call	8011d04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80117d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80117d4:	8011d3c0 	call	8011d3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80117d8:	01820074 	movhi	r6,2049
 80117dc:	3196f604 	addi	r6,r6,23512
 80117e0:	01420074 	movhi	r5,2049
 80117e4:	2956f604 	addi	r5,r5,23512
 80117e8:	01020074 	movhi	r4,2049
 80117ec:	2116f604 	addi	r4,r4,23512
 80117f0:	80148bc0 	call	80148bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80117f4:	80146740 	call	8014674 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80117f8:	01020074 	movhi	r4,2049
 80117fc:	2111b504 	addi	r4,r4,18132
 8011800:	80151ac0 	call	80151ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8011804:	d0a70a17 	ldw	r2,-25560(gp)
 8011808:	d0e70b17 	ldw	r3,-25556(gp)
 801180c:	d1270c17 	ldw	r4,-25552(gp)
 8011810:	200d883a 	mov	r6,r4
 8011814:	180b883a 	mov	r5,r3
 8011818:	1009883a 	mov	r4,r2
 801181c:	80002740 	call	8000274 <main>
 8011820:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8011824:	01000044 	movi	r4,1
 8011828:	80112f40 	call	80112f4 <close>
  exit (result);
 801182c:	e13fff17 	ldw	r4,-4(fp)
 8011830:	80151c00 	call	80151c0 <exit>

08011834 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8011834:	defffe04 	addi	sp,sp,-8
 8011838:	df000115 	stw	fp,4(sp)
 801183c:	df000104 	addi	fp,sp,4
 8011840:	e13fff15 	stw	r4,-4(fp)
}
 8011844:	0001883a 	nop
 8011848:	e037883a 	mov	sp,fp
 801184c:	df000017 	ldw	fp,0(sp)
 8011850:	dec00104 	addi	sp,sp,4
 8011854:	f800283a 	ret

08011858 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8011858:	defffe04 	addi	sp,sp,-8
 801185c:	df000115 	stw	fp,4(sp)
 8011860:	df000104 	addi	fp,sp,4
 8011864:	e13fff15 	stw	r4,-4(fp)
}
 8011868:	0001883a 	nop
 801186c:	e037883a 	mov	sp,fp
 8011870:	df000017 	ldw	fp,0(sp)
 8011874:	dec00104 	addi	sp,sp,4
 8011878:	f800283a 	ret

0801187c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801187c:	defffe04 	addi	sp,sp,-8
 8011880:	dfc00115 	stw	ra,4(sp)
 8011884:	df000015 	stw	fp,0(sp)
 8011888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801188c:	d0a00c17 	ldw	r2,-32720(gp)
 8011890:	10000326 	beq	r2,zero,80118a0 <alt_get_errno+0x24>
 8011894:	d0a00c17 	ldw	r2,-32720(gp)
 8011898:	103ee83a 	callr	r2
 801189c:	00000106 	br	80118a4 <alt_get_errno+0x28>
 80118a0:	d0a70904 	addi	r2,gp,-25564
}
 80118a4:	e037883a 	mov	sp,fp
 80118a8:	dfc00117 	ldw	ra,4(sp)
 80118ac:	df000017 	ldw	fp,0(sp)
 80118b0:	dec00204 	addi	sp,sp,8
 80118b4:	f800283a 	ret

080118b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80118b8:	defff904 	addi	sp,sp,-28
 80118bc:	dfc00615 	stw	ra,24(sp)
 80118c0:	df000515 	stw	fp,20(sp)
 80118c4:	df000504 	addi	fp,sp,20
 80118c8:	e13ffd15 	stw	r4,-12(fp)
 80118cc:	e17ffe15 	stw	r5,-8(fp)
 80118d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80118d4:	e0bffd17 	ldw	r2,-12(fp)
 80118d8:	10000616 	blt	r2,zero,80118f4 <read+0x3c>
 80118dc:	e0bffd17 	ldw	r2,-12(fp)
 80118e0:	10c00324 	muli	r3,r2,12
 80118e4:	00820074 	movhi	r2,2049
 80118e8:	10994a04 	addi	r2,r2,25896
 80118ec:	1885883a 	add	r2,r3,r2
 80118f0:	00000106 	br	80118f8 <read+0x40>
 80118f4:	0005883a 	mov	r2,zero
 80118f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80118fc:	e0bffb17 	ldw	r2,-20(fp)
 8011900:	10002226 	beq	r2,zero,801198c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8011904:	e0bffb17 	ldw	r2,-20(fp)
 8011908:	10800217 	ldw	r2,8(r2)
 801190c:	108000cc 	andi	r2,r2,3
 8011910:	10800060 	cmpeqi	r2,r2,1
 8011914:	1000181e 	bne	r2,zero,8011978 <read+0xc0>
        (fd->dev->read))
 8011918:	e0bffb17 	ldw	r2,-20(fp)
 801191c:	10800017 	ldw	r2,0(r2)
 8011920:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8011924:	10001426 	beq	r2,zero,8011978 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8011928:	e0bffb17 	ldw	r2,-20(fp)
 801192c:	10800017 	ldw	r2,0(r2)
 8011930:	10800517 	ldw	r2,20(r2)
 8011934:	e0ffff17 	ldw	r3,-4(fp)
 8011938:	180d883a 	mov	r6,r3
 801193c:	e17ffe17 	ldw	r5,-8(fp)
 8011940:	e13ffb17 	ldw	r4,-20(fp)
 8011944:	103ee83a 	callr	r2
 8011948:	e0bffc15 	stw	r2,-16(fp)
 801194c:	e0bffc17 	ldw	r2,-16(fp)
 8011950:	1000070e 	bge	r2,zero,8011970 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8011954:	801187c0 	call	801187c <alt_get_errno>
 8011958:	1007883a 	mov	r3,r2
 801195c:	e0bffc17 	ldw	r2,-16(fp)
 8011960:	0085c83a 	sub	r2,zero,r2
 8011964:	18800015 	stw	r2,0(r3)
          return -1;
 8011968:	00bfffc4 	movi	r2,-1
 801196c:	00000c06 	br	80119a0 <read+0xe8>
        }
        return rval;
 8011970:	e0bffc17 	ldw	r2,-16(fp)
 8011974:	00000a06 	br	80119a0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8011978:	801187c0 	call	801187c <alt_get_errno>
 801197c:	1007883a 	mov	r3,r2
 8011980:	00800344 	movi	r2,13
 8011984:	18800015 	stw	r2,0(r3)
 8011988:	00000406 	br	801199c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 801198c:	801187c0 	call	801187c <alt_get_errno>
 8011990:	1007883a 	mov	r3,r2
 8011994:	00801444 	movi	r2,81
 8011998:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801199c:	00bfffc4 	movi	r2,-1
}
 80119a0:	e037883a 	mov	sp,fp
 80119a4:	dfc00117 	ldw	ra,4(sp)
 80119a8:	df000017 	ldw	fp,0(sp)
 80119ac:	dec00204 	addi	sp,sp,8
 80119b0:	f800283a 	ret

080119b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80119b4:	defffe04 	addi	sp,sp,-8
 80119b8:	df000115 	stw	fp,4(sp)
 80119bc:	df000104 	addi	fp,sp,4
 80119c0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 80119c4:	e0bfff17 	ldw	r2,-4(fp)
 80119c8:	108000d0 	cmplti	r2,r2,3
 80119cc:	10000d1e 	bne	r2,zero,8011a04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80119d0:	00820074 	movhi	r2,2049
 80119d4:	10994a04 	addi	r2,r2,25896
 80119d8:	e0ffff17 	ldw	r3,-4(fp)
 80119dc:	18c00324 	muli	r3,r3,12
 80119e0:	10c5883a 	add	r2,r2,r3
 80119e4:	10800204 	addi	r2,r2,8
 80119e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80119ec:	00820074 	movhi	r2,2049
 80119f0:	10994a04 	addi	r2,r2,25896
 80119f4:	e0ffff17 	ldw	r3,-4(fp)
 80119f8:	18c00324 	muli	r3,r3,12
 80119fc:	10c5883a 	add	r2,r2,r3
 8011a00:	10000015 	stw	zero,0(r2)
  }
}
 8011a04:	0001883a 	nop
 8011a08:	e037883a 	mov	sp,fp
 8011a0c:	df000017 	ldw	fp,0(sp)
 8011a10:	dec00104 	addi	sp,sp,4
 8011a14:	f800283a 	ret

08011a18 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8011a18:	defff904 	addi	sp,sp,-28
 8011a1c:	df000615 	stw	fp,24(sp)
 8011a20:	df000604 	addi	fp,sp,24
 8011a24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011a28:	0005303a 	rdctl	r2,status
 8011a2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011a30:	e0fffe17 	ldw	r3,-8(fp)
 8011a34:	00bfff84 	movi	r2,-2
 8011a38:	1884703a 	and	r2,r3,r2
 8011a3c:	1001703a 	wrctl	status,r2
  
  return context;
 8011a40:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8011a44:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8011a48:	d0a00d17 	ldw	r2,-32716(gp)
 8011a4c:	10c000c4 	addi	r3,r2,3
 8011a50:	00bfff04 	movi	r2,-4
 8011a54:	1884703a 	and	r2,r3,r2
 8011a58:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8011a5c:	d0e00d17 	ldw	r3,-32716(gp)
 8011a60:	e0bfff17 	ldw	r2,-4(fp)
 8011a64:	1887883a 	add	r3,r3,r2
 8011a68:	00830034 	movhi	r2,3072
 8011a6c:	10800004 	addi	r2,r2,0
 8011a70:	10c0062e 	bgeu	r2,r3,8011a8c <sbrk+0x74>
 8011a74:	e0bffb17 	ldw	r2,-20(fp)
 8011a78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011a7c:	e0bffa17 	ldw	r2,-24(fp)
 8011a80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8011a84:	00bfffc4 	movi	r2,-1
 8011a88:	00000b06 	br	8011ab8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8011a8c:	d0a00d17 	ldw	r2,-32716(gp)
 8011a90:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8011a94:	d0e00d17 	ldw	r3,-32716(gp)
 8011a98:	e0bfff17 	ldw	r2,-4(fp)
 8011a9c:	1885883a 	add	r2,r3,r2
 8011aa0:	d0a00d15 	stw	r2,-32716(gp)
 8011aa4:	e0bffb17 	ldw	r2,-20(fp)
 8011aa8:	e0bffc15 	stw	r2,-16(fp)
 8011aac:	e0bffc17 	ldw	r2,-16(fp)
 8011ab0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8011ab4:	e0bffd17 	ldw	r2,-12(fp)
} 
 8011ab8:	e037883a 	mov	sp,fp
 8011abc:	df000017 	ldw	fp,0(sp)
 8011ac0:	dec00104 	addi	sp,sp,4
 8011ac4:	f800283a 	ret

08011ac8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8011ac8:	defffd04 	addi	sp,sp,-12
 8011acc:	dfc00215 	stw	ra,8(sp)
 8011ad0:	df000115 	stw	fp,4(sp)
 8011ad4:	df000104 	addi	fp,sp,4
 8011ad8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8011adc:	e13fff17 	ldw	r4,-4(fp)
 8011ae0:	80143f40 	call	80143f4 <alt_busy_sleep>
}
 8011ae4:	e037883a 	mov	sp,fp
 8011ae8:	dfc00117 	ldw	ra,4(sp)
 8011aec:	df000017 	ldw	fp,0(sp)
 8011af0:	dec00204 	addi	sp,sp,8
 8011af4:	f800283a 	ret

08011af8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011af8:	defffe04 	addi	sp,sp,-8
 8011afc:	dfc00115 	stw	ra,4(sp)
 8011b00:	df000015 	stw	fp,0(sp)
 8011b04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011b08:	d0a00c17 	ldw	r2,-32720(gp)
 8011b0c:	10000326 	beq	r2,zero,8011b1c <alt_get_errno+0x24>
 8011b10:	d0a00c17 	ldw	r2,-32720(gp)
 8011b14:	103ee83a 	callr	r2
 8011b18:	00000106 	br	8011b20 <alt_get_errno+0x28>
 8011b1c:	d0a70904 	addi	r2,gp,-25564
}
 8011b20:	e037883a 	mov	sp,fp
 8011b24:	dfc00117 	ldw	ra,4(sp)
 8011b28:	df000017 	ldw	fp,0(sp)
 8011b2c:	dec00204 	addi	sp,sp,8
 8011b30:	f800283a 	ret

08011b34 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8011b34:	defff904 	addi	sp,sp,-28
 8011b38:	dfc00615 	stw	ra,24(sp)
 8011b3c:	df000515 	stw	fp,20(sp)
 8011b40:	df000504 	addi	fp,sp,20
 8011b44:	e13ffd15 	stw	r4,-12(fp)
 8011b48:	e17ffe15 	stw	r5,-8(fp)
 8011b4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011b50:	e0bffd17 	ldw	r2,-12(fp)
 8011b54:	10000616 	blt	r2,zero,8011b70 <write+0x3c>
 8011b58:	e0bffd17 	ldw	r2,-12(fp)
 8011b5c:	10c00324 	muli	r3,r2,12
 8011b60:	00820074 	movhi	r2,2049
 8011b64:	10994a04 	addi	r2,r2,25896
 8011b68:	1885883a 	add	r2,r3,r2
 8011b6c:	00000106 	br	8011b74 <write+0x40>
 8011b70:	0005883a 	mov	r2,zero
 8011b74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8011b78:	e0bffb17 	ldw	r2,-20(fp)
 8011b7c:	10002126 	beq	r2,zero,8011c04 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8011b80:	e0bffb17 	ldw	r2,-20(fp)
 8011b84:	10800217 	ldw	r2,8(r2)
 8011b88:	108000cc 	andi	r2,r2,3
 8011b8c:	10001826 	beq	r2,zero,8011bf0 <write+0xbc>
 8011b90:	e0bffb17 	ldw	r2,-20(fp)
 8011b94:	10800017 	ldw	r2,0(r2)
 8011b98:	10800617 	ldw	r2,24(r2)
 8011b9c:	10001426 	beq	r2,zero,8011bf0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8011ba0:	e0bffb17 	ldw	r2,-20(fp)
 8011ba4:	10800017 	ldw	r2,0(r2)
 8011ba8:	10800617 	ldw	r2,24(r2)
 8011bac:	e0ffff17 	ldw	r3,-4(fp)
 8011bb0:	180d883a 	mov	r6,r3
 8011bb4:	e17ffe17 	ldw	r5,-8(fp)
 8011bb8:	e13ffb17 	ldw	r4,-20(fp)
 8011bbc:	103ee83a 	callr	r2
 8011bc0:	e0bffc15 	stw	r2,-16(fp)
 8011bc4:	e0bffc17 	ldw	r2,-16(fp)
 8011bc8:	1000070e 	bge	r2,zero,8011be8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8011bcc:	8011af80 	call	8011af8 <alt_get_errno>
 8011bd0:	1007883a 	mov	r3,r2
 8011bd4:	e0bffc17 	ldw	r2,-16(fp)
 8011bd8:	0085c83a 	sub	r2,zero,r2
 8011bdc:	18800015 	stw	r2,0(r3)
        return -1;
 8011be0:	00bfffc4 	movi	r2,-1
 8011be4:	00000c06 	br	8011c18 <write+0xe4>
      }
      return rval;
 8011be8:	e0bffc17 	ldw	r2,-16(fp)
 8011bec:	00000a06 	br	8011c18 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8011bf0:	8011af80 	call	8011af8 <alt_get_errno>
 8011bf4:	1007883a 	mov	r3,r2
 8011bf8:	00800344 	movi	r2,13
 8011bfc:	18800015 	stw	r2,0(r3)
 8011c00:	00000406 	br	8011c14 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8011c04:	8011af80 	call	8011af8 <alt_get_errno>
 8011c08:	1007883a 	mov	r3,r2
 8011c0c:	00801444 	movi	r2,81
 8011c10:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8011c14:	00bfffc4 	movi	r2,-1
}
 8011c18:	e037883a 	mov	sp,fp
 8011c1c:	dfc00117 	ldw	ra,4(sp)
 8011c20:	df000017 	ldw	fp,0(sp)
 8011c24:	dec00204 	addi	sp,sp,8
 8011c28:	f800283a 	ret

08011c2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8011c2c:	defffd04 	addi	sp,sp,-12
 8011c30:	dfc00215 	stw	ra,8(sp)
 8011c34:	df000115 	stw	fp,4(sp)
 8011c38:	df000104 	addi	fp,sp,4
 8011c3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8011c40:	d1600904 	addi	r5,gp,-32732
 8011c44:	e13fff17 	ldw	r4,-4(fp)
 8011c48:	80145d00 	call	80145d0 <alt_dev_llist_insert>
}
 8011c4c:	e037883a 	mov	sp,fp
 8011c50:	dfc00117 	ldw	ra,4(sp)
 8011c54:	df000017 	ldw	fp,0(sp)
 8011c58:	dec00204 	addi	sp,sp,8
 8011c5c:	f800283a 	ret

08011c60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011c60:	defffe04 	addi	sp,sp,-8
 8011c64:	dfc00115 	stw	ra,4(sp)
 8011c68:	df000015 	stw	fp,0(sp)
 8011c6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011c70:	d0a00c17 	ldw	r2,-32720(gp)
 8011c74:	10000326 	beq	r2,zero,8011c84 <alt_get_errno+0x24>
 8011c78:	d0a00c17 	ldw	r2,-32720(gp)
 8011c7c:	103ee83a 	callr	r2
 8011c80:	00000106 	br	8011c88 <alt_get_errno+0x28>
 8011c84:	d0a70904 	addi	r2,gp,-25564
}
 8011c88:	e037883a 	mov	sp,fp
 8011c8c:	dfc00117 	ldw	ra,4(sp)
 8011c90:	df000017 	ldw	fp,0(sp)
 8011c94:	dec00204 	addi	sp,sp,8
 8011c98:	f800283a 	ret

08011c9c <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 8011c9c:	defffc04 	addi	sp,sp,-16
 8011ca0:	dfc00315 	stw	ra,12(sp)
 8011ca4:	df000215 	stw	fp,8(sp)
 8011ca8:	df000204 	addi	fp,sp,8
 8011cac:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8011cb0:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 8011cb4:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 8011cb8:	e0bffe17 	ldw	r2,-8(fp)
 8011cbc:	1000051e 	bne	r2,zero,8011cd4 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 8011cc0:	d1601004 	addi	r5,gp,-32704
 8011cc4:	e13fff17 	ldw	r4,-4(fp)
 8011cc8:	80145d00 	call	80145d0 <alt_dev_llist_insert>
 8011ccc:	e0bffe15 	stw	r2,-8(fp)
 8011cd0:	00000606 	br	8011cec <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 8011cd4:	8011c600 	call	8011c60 <alt_get_errno>
 8011cd8:	1007883a 	mov	r3,r2
 8011cdc:	00800304 	movi	r2,12
 8011ce0:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 8011ce4:	00bffd04 	movi	r2,-12
 8011ce8:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 8011cec:	e0bffe17 	ldw	r2,-8(fp)
}
 8011cf0:	e037883a 	mov	sp,fp
 8011cf4:	dfc00117 	ldw	ra,4(sp)
 8011cf8:	df000017 	ldw	fp,0(sp)
 8011cfc:	dec00204 	addi	sp,sp,8
 8011d00:	f800283a 	ret

08011d04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8011d04:	defffd04 	addi	sp,sp,-12
 8011d08:	dfc00215 	stw	ra,8(sp)
 8011d0c:	df000115 	stw	fp,4(sp)
 8011d10:	df000104 	addi	fp,sp,4
 8011d14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_SOUND_ACQUISITION, nios2_sound_acquisition);
 8011d18:	8014eb00 	call	8014eb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8011d1c:	00800044 	movi	r2,1
 8011d20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8011d24:	0001883a 	nop
 8011d28:	e037883a 	mov	sp,fp
 8011d2c:	dfc00117 	ldw	ra,4(sp)
 8011d30:	df000017 	ldw	fp,0(sp)
 8011d34:	dec00204 	addi	sp,sp,8
 8011d38:	f800283a 	ret

08011d3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8011d3c:	defffe04 	addi	sp,sp,-8
 8011d40:	dfc00115 	stw	ra,4(sp)
 8011d44:	df000015 	stw	fp,0(sp)
 8011d48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8011d4c:	01800044 	movi	r6,1
 8011d50:	000b883a 	mov	r5,zero
 8011d54:	01020074 	movhi	r4,2049
 8011d58:	2119b404 	addi	r4,r4,26320
 8011d5c:	8011f240 	call	8011f24 <altera_avalon_jtag_uart_init>
 8011d60:	01020074 	movhi	r4,2049
 8011d64:	2119aa04 	addi	r4,r4,26280
 8011d68:	8011c2c0 	call	8011c2c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 8011d6c:	018000c4 	movi	r6,3
 8011d70:	000b883a 	mov	r5,zero
 8011d74:	01020074 	movhi	r4,2049
 8011d78:	211dc204 	addi	r4,r4,30472
 8011d7c:	8012b100 	call	8012b10 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
 8011d80:	01020074 	movhi	r4,2049
 8011d84:	211dd404 	addi	r4,r4,30544
 8011d88:	8011c9c0 	call	8011c9c <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8011d8c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 8011d90:	01020074 	movhi	r4,2049
 8011d94:	211dd804 	addi	r4,r4,30560
 8011d98:	8011c2c0 	call	8011c2c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 8011d9c:	01020074 	movhi	r4,2049
 8011da0:	211de404 	addi	r4,r4,30608
 8011da4:	8011c2c0 	call	8011c2c <alt_dev_reg>
}
 8011da8:	0001883a 	nop
 8011dac:	e037883a 	mov	sp,fp
 8011db0:	dfc00117 	ldw	ra,4(sp)
 8011db4:	df000017 	ldw	fp,0(sp)
 8011db8:	dec00204 	addi	sp,sp,8
 8011dbc:	f800283a 	ret

08011dc0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8011dc0:	defffa04 	addi	sp,sp,-24
 8011dc4:	dfc00515 	stw	ra,20(sp)
 8011dc8:	df000415 	stw	fp,16(sp)
 8011dcc:	df000404 	addi	fp,sp,16
 8011dd0:	e13ffd15 	stw	r4,-12(fp)
 8011dd4:	e17ffe15 	stw	r5,-8(fp)
 8011dd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011ddc:	e0bffd17 	ldw	r2,-12(fp)
 8011de0:	10800017 	ldw	r2,0(r2)
 8011de4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8011de8:	e0bffc17 	ldw	r2,-16(fp)
 8011dec:	10c00a04 	addi	r3,r2,40
 8011df0:	e0bffd17 	ldw	r2,-12(fp)
 8011df4:	10800217 	ldw	r2,8(r2)
 8011df8:	100f883a 	mov	r7,r2
 8011dfc:	e1bfff17 	ldw	r6,-4(fp)
 8011e00:	e17ffe17 	ldw	r5,-8(fp)
 8011e04:	1809883a 	mov	r4,r3
 8011e08:	80123e00 	call	80123e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8011e0c:	e037883a 	mov	sp,fp
 8011e10:	dfc00117 	ldw	ra,4(sp)
 8011e14:	df000017 	ldw	fp,0(sp)
 8011e18:	dec00204 	addi	sp,sp,8
 8011e1c:	f800283a 	ret

08011e20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8011e20:	defffa04 	addi	sp,sp,-24
 8011e24:	dfc00515 	stw	ra,20(sp)
 8011e28:	df000415 	stw	fp,16(sp)
 8011e2c:	df000404 	addi	fp,sp,16
 8011e30:	e13ffd15 	stw	r4,-12(fp)
 8011e34:	e17ffe15 	stw	r5,-8(fp)
 8011e38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011e3c:	e0bffd17 	ldw	r2,-12(fp)
 8011e40:	10800017 	ldw	r2,0(r2)
 8011e44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8011e48:	e0bffc17 	ldw	r2,-16(fp)
 8011e4c:	10c00a04 	addi	r3,r2,40
 8011e50:	e0bffd17 	ldw	r2,-12(fp)
 8011e54:	10800217 	ldw	r2,8(r2)
 8011e58:	100f883a 	mov	r7,r2
 8011e5c:	e1bfff17 	ldw	r6,-4(fp)
 8011e60:	e17ffe17 	ldw	r5,-8(fp)
 8011e64:	1809883a 	mov	r4,r3
 8011e68:	80125fc0 	call	80125fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8011e6c:	e037883a 	mov	sp,fp
 8011e70:	dfc00117 	ldw	ra,4(sp)
 8011e74:	df000017 	ldw	fp,0(sp)
 8011e78:	dec00204 	addi	sp,sp,8
 8011e7c:	f800283a 	ret

08011e80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8011e80:	defffc04 	addi	sp,sp,-16
 8011e84:	dfc00315 	stw	ra,12(sp)
 8011e88:	df000215 	stw	fp,8(sp)
 8011e8c:	df000204 	addi	fp,sp,8
 8011e90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011e94:	e0bfff17 	ldw	r2,-4(fp)
 8011e98:	10800017 	ldw	r2,0(r2)
 8011e9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8011ea0:	e0bffe17 	ldw	r2,-8(fp)
 8011ea4:	10c00a04 	addi	r3,r2,40
 8011ea8:	e0bfff17 	ldw	r2,-4(fp)
 8011eac:	10800217 	ldw	r2,8(r2)
 8011eb0:	100b883a 	mov	r5,r2
 8011eb4:	1809883a 	mov	r4,r3
 8011eb8:	80122880 	call	8012288 <altera_avalon_jtag_uart_close>
}
 8011ebc:	e037883a 	mov	sp,fp
 8011ec0:	dfc00117 	ldw	ra,4(sp)
 8011ec4:	df000017 	ldw	fp,0(sp)
 8011ec8:	dec00204 	addi	sp,sp,8
 8011ecc:	f800283a 	ret

08011ed0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8011ed0:	defffa04 	addi	sp,sp,-24
 8011ed4:	dfc00515 	stw	ra,20(sp)
 8011ed8:	df000415 	stw	fp,16(sp)
 8011edc:	df000404 	addi	fp,sp,16
 8011ee0:	e13ffd15 	stw	r4,-12(fp)
 8011ee4:	e17ffe15 	stw	r5,-8(fp)
 8011ee8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8011eec:	e0bffd17 	ldw	r2,-12(fp)
 8011ef0:	10800017 	ldw	r2,0(r2)
 8011ef4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8011ef8:	e0bffc17 	ldw	r2,-16(fp)
 8011efc:	10800a04 	addi	r2,r2,40
 8011f00:	e1bfff17 	ldw	r6,-4(fp)
 8011f04:	e17ffe17 	ldw	r5,-8(fp)
 8011f08:	1009883a 	mov	r4,r2
 8011f0c:	80122f00 	call	80122f0 <altera_avalon_jtag_uart_ioctl>
}
 8011f10:	e037883a 	mov	sp,fp
 8011f14:	dfc00117 	ldw	ra,4(sp)
 8011f18:	df000017 	ldw	fp,0(sp)
 8011f1c:	dec00204 	addi	sp,sp,8
 8011f20:	f800283a 	ret

08011f24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8011f24:	defffb04 	addi	sp,sp,-20
 8011f28:	dfc00415 	stw	ra,16(sp)
 8011f2c:	df000315 	stw	fp,12(sp)
 8011f30:	df000304 	addi	fp,sp,12
 8011f34:	e13ffd15 	stw	r4,-12(fp)
 8011f38:	e17ffe15 	stw	r5,-8(fp)
 8011f3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011f40:	e0bffd17 	ldw	r2,-12(fp)
 8011f44:	00c00044 	movi	r3,1
 8011f48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8011f4c:	e0bffd17 	ldw	r2,-12(fp)
 8011f50:	10800017 	ldw	r2,0(r2)
 8011f54:	10800104 	addi	r2,r2,4
 8011f58:	1007883a 	mov	r3,r2
 8011f5c:	e0bffd17 	ldw	r2,-12(fp)
 8011f60:	10800817 	ldw	r2,32(r2)
 8011f64:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 8011f68:	e0bfff17 	ldw	r2,-4(fp)
 8011f6c:	01820074 	movhi	r6,2049
 8011f70:	3187f604 	addi	r6,r6,8152
 8011f74:	e17ffd17 	ldw	r5,-12(fp)
 8011f78:	1009883a 	mov	r4,r2
 8011f7c:	80149380 	call	8014938 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8011f80:	e0bffd17 	ldw	r2,-12(fp)
 8011f84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8011f88:	e0bffd17 	ldw	r2,-12(fp)
 8011f8c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8011f90:	d0e70e17 	ldw	r3,-25544(gp)
 8011f94:	e1fffd17 	ldw	r7,-12(fp)
 8011f98:	01820074 	movhi	r6,2049
 8011f9c:	31887a04 	addi	r6,r6,8680
 8011fa0:	180b883a 	mov	r5,r3
 8011fa4:	1009883a 	mov	r4,r2
 8011fa8:	80142c80 	call	80142c8 <alt_alarm_start>
 8011fac:	1000040e 	bge	r2,zero,8011fc0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8011fb0:	e0fffd17 	ldw	r3,-12(fp)
 8011fb4:	00a00034 	movhi	r2,32768
 8011fb8:	10bfffc4 	addi	r2,r2,-1
 8011fbc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8011fc0:	0001883a 	nop
 8011fc4:	e037883a 	mov	sp,fp
 8011fc8:	dfc00117 	ldw	ra,4(sp)
 8011fcc:	df000017 	ldw	fp,0(sp)
 8011fd0:	dec00204 	addi	sp,sp,8
 8011fd4:	f800283a 	ret

08011fd8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8011fd8:	defff704 	addi	sp,sp,-36
 8011fdc:	df000815 	stw	fp,32(sp)
 8011fe0:	df000804 	addi	fp,sp,32
 8011fe4:	e13ffe15 	stw	r4,-8(fp)
 8011fe8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8011fec:	e0bffe17 	ldw	r2,-8(fp)
 8011ff0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 8011ff4:	e0bffa17 	ldw	r2,-24(fp)
 8011ff8:	10800017 	ldw	r2,0(r2)
 8011ffc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012000:	e0bffb17 	ldw	r2,-20(fp)
 8012004:	10800104 	addi	r2,r2,4
 8012008:	10800037 	ldwio	r2,0(r2)
 801200c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8012010:	e0bffc17 	ldw	r2,-16(fp)
 8012014:	1080c00c 	andi	r2,r2,768
 8012018:	10006d26 	beq	r2,zero,80121d0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801201c:	e0bffc17 	ldw	r2,-16(fp)
 8012020:	1080400c 	andi	r2,r2,256
 8012024:	10003526 	beq	r2,zero,80120fc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8012028:	00800074 	movhi	r2,1
 801202c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012030:	e0bffa17 	ldw	r2,-24(fp)
 8012034:	10800a17 	ldw	r2,40(r2)
 8012038:	10800044 	addi	r2,r2,1
 801203c:	1081ffcc 	andi	r2,r2,2047
 8012040:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 8012044:	e0bffa17 	ldw	r2,-24(fp)
 8012048:	10c00b17 	ldw	r3,44(r2)
 801204c:	e0bffd17 	ldw	r2,-12(fp)
 8012050:	18801526 	beq	r3,r2,80120a8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8012054:	e0bffb17 	ldw	r2,-20(fp)
 8012058:	10800037 	ldwio	r2,0(r2)
 801205c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8012060:	e0bff817 	ldw	r2,-32(fp)
 8012064:	10a0000c 	andi	r2,r2,32768
 8012068:	10001126 	beq	r2,zero,80120b0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801206c:	e0bffa17 	ldw	r2,-24(fp)
 8012070:	10800a17 	ldw	r2,40(r2)
 8012074:	e0fff817 	ldw	r3,-32(fp)
 8012078:	1809883a 	mov	r4,r3
 801207c:	e0fffa17 	ldw	r3,-24(fp)
 8012080:	1885883a 	add	r2,r3,r2
 8012084:	10800e04 	addi	r2,r2,56
 8012088:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801208c:	e0bffa17 	ldw	r2,-24(fp)
 8012090:	10800a17 	ldw	r2,40(r2)
 8012094:	10800044 	addi	r2,r2,1
 8012098:	10c1ffcc 	andi	r3,r2,2047
 801209c:	e0bffa17 	ldw	r2,-24(fp)
 80120a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80120a4:	003fe206 	br	8012030 <__alt_data_end+0xfc012030>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80120a8:	0001883a 	nop
 80120ac:	00000106 	br	80120b4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80120b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80120b4:	e0bff817 	ldw	r2,-32(fp)
 80120b8:	10bfffec 	andhi	r2,r2,65535
 80120bc:	10000f26 	beq	r2,zero,80120fc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80120c0:	e0bffa17 	ldw	r2,-24(fp)
 80120c4:	10c00817 	ldw	r3,32(r2)
 80120c8:	00bfff84 	movi	r2,-2
 80120cc:	1886703a 	and	r3,r3,r2
 80120d0:	e0bffa17 	ldw	r2,-24(fp)
 80120d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80120d8:	e0bffb17 	ldw	r2,-20(fp)
 80120dc:	10800104 	addi	r2,r2,4
 80120e0:	1007883a 	mov	r3,r2
 80120e4:	e0bffa17 	ldw	r2,-24(fp)
 80120e8:	10800817 	ldw	r2,32(r2)
 80120ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80120f0:	e0bffb17 	ldw	r2,-20(fp)
 80120f4:	10800104 	addi	r2,r2,4
 80120f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80120fc:	e0bffc17 	ldw	r2,-16(fp)
 8012100:	1080800c 	andi	r2,r2,512
 8012104:	103fbe26 	beq	r2,zero,8012000 <__alt_data_end+0xfc012000>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8012108:	e0bffc17 	ldw	r2,-16(fp)
 801210c:	1004d43a 	srli	r2,r2,16
 8012110:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8012114:	00001406 	br	8012168 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8012118:	e0bffb17 	ldw	r2,-20(fp)
 801211c:	e0fffa17 	ldw	r3,-24(fp)
 8012120:	18c00d17 	ldw	r3,52(r3)
 8012124:	e13ffa17 	ldw	r4,-24(fp)
 8012128:	20c7883a 	add	r3,r4,r3
 801212c:	18c20e04 	addi	r3,r3,2104
 8012130:	18c00003 	ldbu	r3,0(r3)
 8012134:	18c03fcc 	andi	r3,r3,255
 8012138:	18c0201c 	xori	r3,r3,128
 801213c:	18ffe004 	addi	r3,r3,-128
 8012140:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012144:	e0bffa17 	ldw	r2,-24(fp)
 8012148:	10800d17 	ldw	r2,52(r2)
 801214c:	10800044 	addi	r2,r2,1
 8012150:	10c1ffcc 	andi	r3,r2,2047
 8012154:	e0bffa17 	ldw	r2,-24(fp)
 8012158:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801215c:	e0bff917 	ldw	r2,-28(fp)
 8012160:	10bfffc4 	addi	r2,r2,-1
 8012164:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8012168:	e0bff917 	ldw	r2,-28(fp)
 801216c:	10000526 	beq	r2,zero,8012184 <altera_avalon_jtag_uart_irq+0x1ac>
 8012170:	e0bffa17 	ldw	r2,-24(fp)
 8012174:	10c00d17 	ldw	r3,52(r2)
 8012178:	e0bffa17 	ldw	r2,-24(fp)
 801217c:	10800c17 	ldw	r2,48(r2)
 8012180:	18bfe51e 	bne	r3,r2,8012118 <__alt_data_end+0xfc012118>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8012184:	e0bff917 	ldw	r2,-28(fp)
 8012188:	103f9d26 	beq	r2,zero,8012000 <__alt_data_end+0xfc012000>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801218c:	e0bffa17 	ldw	r2,-24(fp)
 8012190:	10c00817 	ldw	r3,32(r2)
 8012194:	00bfff44 	movi	r2,-3
 8012198:	1886703a 	and	r3,r3,r2
 801219c:	e0bffa17 	ldw	r2,-24(fp)
 80121a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80121a4:	e0bffa17 	ldw	r2,-24(fp)
 80121a8:	10800017 	ldw	r2,0(r2)
 80121ac:	10800104 	addi	r2,r2,4
 80121b0:	1007883a 	mov	r3,r2
 80121b4:	e0bffa17 	ldw	r2,-24(fp)
 80121b8:	10800817 	ldw	r2,32(r2)
 80121bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80121c0:	e0bffb17 	ldw	r2,-20(fp)
 80121c4:	10800104 	addi	r2,r2,4
 80121c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80121cc:	003f8c06 	br	8012000 <__alt_data_end+0xfc012000>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80121d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80121d4:	0001883a 	nop
 80121d8:	e037883a 	mov	sp,fp
 80121dc:	df000017 	ldw	fp,0(sp)
 80121e0:	dec00104 	addi	sp,sp,4
 80121e4:	f800283a 	ret

080121e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80121e8:	defff804 	addi	sp,sp,-32
 80121ec:	df000715 	stw	fp,28(sp)
 80121f0:	df000704 	addi	fp,sp,28
 80121f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80121f8:	e0bffb17 	ldw	r2,-20(fp)
 80121fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8012200:	e0bff917 	ldw	r2,-28(fp)
 8012204:	10800017 	ldw	r2,0(r2)
 8012208:	10800104 	addi	r2,r2,4
 801220c:	10800037 	ldwio	r2,0(r2)
 8012210:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8012214:	e0bffa17 	ldw	r2,-24(fp)
 8012218:	1081000c 	andi	r2,r2,1024
 801221c:	10000b26 	beq	r2,zero,801224c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8012220:	e0bff917 	ldw	r2,-28(fp)
 8012224:	10800017 	ldw	r2,0(r2)
 8012228:	10800104 	addi	r2,r2,4
 801222c:	1007883a 	mov	r3,r2
 8012230:	e0bff917 	ldw	r2,-28(fp)
 8012234:	10800817 	ldw	r2,32(r2)
 8012238:	10810014 	ori	r2,r2,1024
 801223c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8012240:	e0bff917 	ldw	r2,-28(fp)
 8012244:	10000915 	stw	zero,36(r2)
 8012248:	00000a06 	br	8012274 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801224c:	e0bff917 	ldw	r2,-28(fp)
 8012250:	10c00917 	ldw	r3,36(r2)
 8012254:	00a00034 	movhi	r2,32768
 8012258:	10bfff04 	addi	r2,r2,-4
 801225c:	10c00536 	bltu	r2,r3,8012274 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8012260:	e0bff917 	ldw	r2,-28(fp)
 8012264:	10800917 	ldw	r2,36(r2)
 8012268:	10c00044 	addi	r3,r2,1
 801226c:	e0bff917 	ldw	r2,-28(fp)
 8012270:	10c00915 	stw	r3,36(r2)
 8012274:	d0a70e17 	ldw	r2,-25544(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8012278:	e037883a 	mov	sp,fp
 801227c:	df000017 	ldw	fp,0(sp)
 8012280:	dec00104 	addi	sp,sp,4
 8012284:	f800283a 	ret

08012288 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8012288:	defffd04 	addi	sp,sp,-12
 801228c:	df000215 	stw	fp,8(sp)
 8012290:	df000204 	addi	fp,sp,8
 8012294:	e13ffe15 	stw	r4,-8(fp)
 8012298:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801229c:	00000506 	br	80122b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80122a0:	e0bfff17 	ldw	r2,-4(fp)
 80122a4:	1090000c 	andi	r2,r2,16384
 80122a8:	10000226 	beq	r2,zero,80122b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80122ac:	00bffd44 	movi	r2,-11
 80122b0:	00000b06 	br	80122e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80122b4:	e0bffe17 	ldw	r2,-8(fp)
 80122b8:	10c00d17 	ldw	r3,52(r2)
 80122bc:	e0bffe17 	ldw	r2,-8(fp)
 80122c0:	10800c17 	ldw	r2,48(r2)
 80122c4:	18800526 	beq	r3,r2,80122dc <altera_avalon_jtag_uart_close+0x54>
 80122c8:	e0bffe17 	ldw	r2,-8(fp)
 80122cc:	10c00917 	ldw	r3,36(r2)
 80122d0:	e0bffe17 	ldw	r2,-8(fp)
 80122d4:	10800117 	ldw	r2,4(r2)
 80122d8:	18bff136 	bltu	r3,r2,80122a0 <__alt_data_end+0xfc0122a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80122dc:	0005883a 	mov	r2,zero
}
 80122e0:	e037883a 	mov	sp,fp
 80122e4:	df000017 	ldw	fp,0(sp)
 80122e8:	dec00104 	addi	sp,sp,4
 80122ec:	f800283a 	ret

080122f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80122f0:	defffa04 	addi	sp,sp,-24
 80122f4:	df000515 	stw	fp,20(sp)
 80122f8:	df000504 	addi	fp,sp,20
 80122fc:	e13ffd15 	stw	r4,-12(fp)
 8012300:	e17ffe15 	stw	r5,-8(fp)
 8012304:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8012308:	00bff9c4 	movi	r2,-25
 801230c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8012310:	e0bffe17 	ldw	r2,-8(fp)
 8012314:	10da8060 	cmpeqi	r3,r2,27137
 8012318:	1800031e 	bne	r3,zero,8012328 <altera_avalon_jtag_uart_ioctl+0x38>
 801231c:	109a80a0 	cmpeqi	r2,r2,27138
 8012320:	1000181e 	bne	r2,zero,8012384 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8012324:	00002906 	br	80123cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8012328:	e0bffd17 	ldw	r2,-12(fp)
 801232c:	10c00117 	ldw	r3,4(r2)
 8012330:	00a00034 	movhi	r2,32768
 8012334:	10bfffc4 	addi	r2,r2,-1
 8012338:	18802126 	beq	r3,r2,80123c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 801233c:	e0bfff17 	ldw	r2,-4(fp)
 8012340:	10800017 	ldw	r2,0(r2)
 8012344:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8012348:	e0bffc17 	ldw	r2,-16(fp)
 801234c:	10800090 	cmplti	r2,r2,2
 8012350:	1000061e 	bne	r2,zero,801236c <altera_avalon_jtag_uart_ioctl+0x7c>
 8012354:	e0fffc17 	ldw	r3,-16(fp)
 8012358:	00a00034 	movhi	r2,32768
 801235c:	10bfffc4 	addi	r2,r2,-1
 8012360:	18800226 	beq	r3,r2,801236c <altera_avalon_jtag_uart_ioctl+0x7c>
 8012364:	e0bffc17 	ldw	r2,-16(fp)
 8012368:	00000206 	br	8012374 <altera_avalon_jtag_uart_ioctl+0x84>
 801236c:	00a00034 	movhi	r2,32768
 8012370:	10bfff84 	addi	r2,r2,-2
 8012374:	e0fffd17 	ldw	r3,-12(fp)
 8012378:	18800115 	stw	r2,4(r3)
      rc = 0;
 801237c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8012380:	00000f06 	br	80123c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8012384:	e0bffd17 	ldw	r2,-12(fp)
 8012388:	10c00117 	ldw	r3,4(r2)
 801238c:	00a00034 	movhi	r2,32768
 8012390:	10bfffc4 	addi	r2,r2,-1
 8012394:	18800c26 	beq	r3,r2,80123c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8012398:	e0bffd17 	ldw	r2,-12(fp)
 801239c:	10c00917 	ldw	r3,36(r2)
 80123a0:	e0bffd17 	ldw	r2,-12(fp)
 80123a4:	10800117 	ldw	r2,4(r2)
 80123a8:	1885803a 	cmpltu	r2,r3,r2
 80123ac:	10c03fcc 	andi	r3,r2,255
 80123b0:	e0bfff17 	ldw	r2,-4(fp)
 80123b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80123b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80123bc:	00000206 	br	80123c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80123c0:	0001883a 	nop
 80123c4:	00000106 	br	80123cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80123c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80123cc:	e0bffb17 	ldw	r2,-20(fp)
}
 80123d0:	e037883a 	mov	sp,fp
 80123d4:	df000017 	ldw	fp,0(sp)
 80123d8:	dec00104 	addi	sp,sp,4
 80123dc:	f800283a 	ret

080123e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80123e0:	defff304 	addi	sp,sp,-52
 80123e4:	dfc00c15 	stw	ra,48(sp)
 80123e8:	df000b15 	stw	fp,44(sp)
 80123ec:	df000b04 	addi	fp,sp,44
 80123f0:	e13ffc15 	stw	r4,-16(fp)
 80123f4:	e17ffd15 	stw	r5,-12(fp)
 80123f8:	e1bffe15 	stw	r6,-8(fp)
 80123fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8012400:	e0bffd17 	ldw	r2,-12(fp)
 8012404:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8012408:	00004706 	br	8012528 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801240c:	e0bffc17 	ldw	r2,-16(fp)
 8012410:	10800a17 	ldw	r2,40(r2)
 8012414:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8012418:	e0bffc17 	ldw	r2,-16(fp)
 801241c:	10800b17 	ldw	r2,44(r2)
 8012420:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8012424:	e0fff717 	ldw	r3,-36(fp)
 8012428:	e0bff817 	ldw	r2,-32(fp)
 801242c:	18800536 	bltu	r3,r2,8012444 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8012430:	e0fff717 	ldw	r3,-36(fp)
 8012434:	e0bff817 	ldw	r2,-32(fp)
 8012438:	1885c83a 	sub	r2,r3,r2
 801243c:	e0bff615 	stw	r2,-40(fp)
 8012440:	00000406 	br	8012454 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8012444:	00c20004 	movi	r3,2048
 8012448:	e0bff817 	ldw	r2,-32(fp)
 801244c:	1885c83a 	sub	r2,r3,r2
 8012450:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8012454:	e0bff617 	ldw	r2,-40(fp)
 8012458:	10001e26 	beq	r2,zero,80124d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 801245c:	e0fffe17 	ldw	r3,-8(fp)
 8012460:	e0bff617 	ldw	r2,-40(fp)
 8012464:	1880022e 	bgeu	r3,r2,8012470 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8012468:	e0bffe17 	ldw	r2,-8(fp)
 801246c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8012470:	e0bffc17 	ldw	r2,-16(fp)
 8012474:	10c00e04 	addi	r3,r2,56
 8012478:	e0bff817 	ldw	r2,-32(fp)
 801247c:	1885883a 	add	r2,r3,r2
 8012480:	e1bff617 	ldw	r6,-40(fp)
 8012484:	100b883a 	mov	r5,r2
 8012488:	e13ff517 	ldw	r4,-44(fp)
 801248c:	800cc4c0 	call	800cc4c <memcpy>
      ptr   += n;
 8012490:	e0fff517 	ldw	r3,-44(fp)
 8012494:	e0bff617 	ldw	r2,-40(fp)
 8012498:	1885883a 	add	r2,r3,r2
 801249c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80124a0:	e0fffe17 	ldw	r3,-8(fp)
 80124a4:	e0bff617 	ldw	r2,-40(fp)
 80124a8:	1885c83a 	sub	r2,r3,r2
 80124ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80124b0:	e0fff817 	ldw	r3,-32(fp)
 80124b4:	e0bff617 	ldw	r2,-40(fp)
 80124b8:	1885883a 	add	r2,r3,r2
 80124bc:	10c1ffcc 	andi	r3,r2,2047
 80124c0:	e0bffc17 	ldw	r2,-16(fp)
 80124c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80124c8:	e0bffe17 	ldw	r2,-8(fp)
 80124cc:	00bfcf16 	blt	zero,r2,801240c <__alt_data_end+0xfc01240c>
 80124d0:	00000106 	br	80124d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80124d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80124d8:	e0fff517 	ldw	r3,-44(fp)
 80124dc:	e0bffd17 	ldw	r2,-12(fp)
 80124e0:	1880141e 	bne	r3,r2,8012534 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80124e4:	e0bfff17 	ldw	r2,-4(fp)
 80124e8:	1090000c 	andi	r2,r2,16384
 80124ec:	1000131e 	bne	r2,zero,801253c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80124f0:	0001883a 	nop
 80124f4:	e0bffc17 	ldw	r2,-16(fp)
 80124f8:	10c00a17 	ldw	r3,40(r2)
 80124fc:	e0bff717 	ldw	r2,-36(fp)
 8012500:	1880051e 	bne	r3,r2,8012518 <altera_avalon_jtag_uart_read+0x138>
 8012504:	e0bffc17 	ldw	r2,-16(fp)
 8012508:	10c00917 	ldw	r3,36(r2)
 801250c:	e0bffc17 	ldw	r2,-16(fp)
 8012510:	10800117 	ldw	r2,4(r2)
 8012514:	18bff736 	bltu	r3,r2,80124f4 <__alt_data_end+0xfc0124f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8012518:	e0bffc17 	ldw	r2,-16(fp)
 801251c:	10c00a17 	ldw	r3,40(r2)
 8012520:	e0bff717 	ldw	r2,-36(fp)
 8012524:	18800726 	beq	r3,r2,8012544 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8012528:	e0bffe17 	ldw	r2,-8(fp)
 801252c:	00bfb716 	blt	zero,r2,801240c <__alt_data_end+0xfc01240c>
 8012530:	00000506 	br	8012548 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8012534:	0001883a 	nop
 8012538:	00000306 	br	8012548 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 801253c:	0001883a 	nop
 8012540:	00000106 	br	8012548 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8012544:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8012548:	e0fff517 	ldw	r3,-44(fp)
 801254c:	e0bffd17 	ldw	r2,-12(fp)
 8012550:	18801826 	beq	r3,r2,80125b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012554:	0005303a 	rdctl	r2,status
 8012558:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801255c:	e0fffb17 	ldw	r3,-20(fp)
 8012560:	00bfff84 	movi	r2,-2
 8012564:	1884703a 	and	r2,r3,r2
 8012568:	1001703a 	wrctl	status,r2
  
  return context;
 801256c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8012570:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8012574:	e0bffc17 	ldw	r2,-16(fp)
 8012578:	10800817 	ldw	r2,32(r2)
 801257c:	10c00054 	ori	r3,r2,1
 8012580:	e0bffc17 	ldw	r2,-16(fp)
 8012584:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8012588:	e0bffc17 	ldw	r2,-16(fp)
 801258c:	10800017 	ldw	r2,0(r2)
 8012590:	10800104 	addi	r2,r2,4
 8012594:	1007883a 	mov	r3,r2
 8012598:	e0bffc17 	ldw	r2,-16(fp)
 801259c:	10800817 	ldw	r2,32(r2)
 80125a0:	18800035 	stwio	r2,0(r3)
 80125a4:	e0bffa17 	ldw	r2,-24(fp)
 80125a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80125ac:	e0bff917 	ldw	r2,-28(fp)
 80125b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80125b4:	e0fff517 	ldw	r3,-44(fp)
 80125b8:	e0bffd17 	ldw	r2,-12(fp)
 80125bc:	18800426 	beq	r3,r2,80125d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80125c0:	e0fff517 	ldw	r3,-44(fp)
 80125c4:	e0bffd17 	ldw	r2,-12(fp)
 80125c8:	1885c83a 	sub	r2,r3,r2
 80125cc:	00000606 	br	80125e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80125d0:	e0bfff17 	ldw	r2,-4(fp)
 80125d4:	1090000c 	andi	r2,r2,16384
 80125d8:	10000226 	beq	r2,zero,80125e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80125dc:	00bffd44 	movi	r2,-11
 80125e0:	00000106 	br	80125e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80125e4:	00bffec4 	movi	r2,-5
}
 80125e8:	e037883a 	mov	sp,fp
 80125ec:	dfc00117 	ldw	ra,4(sp)
 80125f0:	df000017 	ldw	fp,0(sp)
 80125f4:	dec00204 	addi	sp,sp,8
 80125f8:	f800283a 	ret

080125fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80125fc:	defff304 	addi	sp,sp,-52
 8012600:	dfc00c15 	stw	ra,48(sp)
 8012604:	df000b15 	stw	fp,44(sp)
 8012608:	df000b04 	addi	fp,sp,44
 801260c:	e13ffc15 	stw	r4,-16(fp)
 8012610:	e17ffd15 	stw	r5,-12(fp)
 8012614:	e1bffe15 	stw	r6,-8(fp)
 8012618:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801261c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8012620:	e0bffd17 	ldw	r2,-12(fp)
 8012624:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8012628:	00003706 	br	8012708 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801262c:	e0bffc17 	ldw	r2,-16(fp)
 8012630:	10800c17 	ldw	r2,48(r2)
 8012634:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8012638:	e0bffc17 	ldw	r2,-16(fp)
 801263c:	10800d17 	ldw	r2,52(r2)
 8012640:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8012644:	e0fff917 	ldw	r3,-28(fp)
 8012648:	e0bff517 	ldw	r2,-44(fp)
 801264c:	1880062e 	bgeu	r3,r2,8012668 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8012650:	e0fff517 	ldw	r3,-44(fp)
 8012654:	e0bff917 	ldw	r2,-28(fp)
 8012658:	1885c83a 	sub	r2,r3,r2
 801265c:	10bfffc4 	addi	r2,r2,-1
 8012660:	e0bff615 	stw	r2,-40(fp)
 8012664:	00000b06 	br	8012694 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8012668:	e0bff517 	ldw	r2,-44(fp)
 801266c:	10000526 	beq	r2,zero,8012684 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8012670:	00c20004 	movi	r3,2048
 8012674:	e0bff917 	ldw	r2,-28(fp)
 8012678:	1885c83a 	sub	r2,r3,r2
 801267c:	e0bff615 	stw	r2,-40(fp)
 8012680:	00000406 	br	8012694 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8012684:	00c1ffc4 	movi	r3,2047
 8012688:	e0bff917 	ldw	r2,-28(fp)
 801268c:	1885c83a 	sub	r2,r3,r2
 8012690:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8012694:	e0bff617 	ldw	r2,-40(fp)
 8012698:	10001e26 	beq	r2,zero,8012714 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 801269c:	e0fffe17 	ldw	r3,-8(fp)
 80126a0:	e0bff617 	ldw	r2,-40(fp)
 80126a4:	1880022e 	bgeu	r3,r2,80126b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80126a8:	e0bffe17 	ldw	r2,-8(fp)
 80126ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80126b0:	e0bffc17 	ldw	r2,-16(fp)
 80126b4:	10c20e04 	addi	r3,r2,2104
 80126b8:	e0bff917 	ldw	r2,-28(fp)
 80126bc:	1885883a 	add	r2,r3,r2
 80126c0:	e1bff617 	ldw	r6,-40(fp)
 80126c4:	e17ffd17 	ldw	r5,-12(fp)
 80126c8:	1009883a 	mov	r4,r2
 80126cc:	800cc4c0 	call	800cc4c <memcpy>
      ptr   += n;
 80126d0:	e0fffd17 	ldw	r3,-12(fp)
 80126d4:	e0bff617 	ldw	r2,-40(fp)
 80126d8:	1885883a 	add	r2,r3,r2
 80126dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80126e0:	e0fffe17 	ldw	r3,-8(fp)
 80126e4:	e0bff617 	ldw	r2,-40(fp)
 80126e8:	1885c83a 	sub	r2,r3,r2
 80126ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80126f0:	e0fff917 	ldw	r3,-28(fp)
 80126f4:	e0bff617 	ldw	r2,-40(fp)
 80126f8:	1885883a 	add	r2,r3,r2
 80126fc:	10c1ffcc 	andi	r3,r2,2047
 8012700:	e0bffc17 	ldw	r2,-16(fp)
 8012704:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8012708:	e0bffe17 	ldw	r2,-8(fp)
 801270c:	00bfc716 	blt	zero,r2,801262c <__alt_data_end+0xfc01262c>
 8012710:	00000106 	br	8012718 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8012714:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012718:	0005303a 	rdctl	r2,status
 801271c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012720:	e0fffb17 	ldw	r3,-20(fp)
 8012724:	00bfff84 	movi	r2,-2
 8012728:	1884703a 	and	r2,r3,r2
 801272c:	1001703a 	wrctl	status,r2
  
  return context;
 8012730:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8012734:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8012738:	e0bffc17 	ldw	r2,-16(fp)
 801273c:	10800817 	ldw	r2,32(r2)
 8012740:	10c00094 	ori	r3,r2,2
 8012744:	e0bffc17 	ldw	r2,-16(fp)
 8012748:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801274c:	e0bffc17 	ldw	r2,-16(fp)
 8012750:	10800017 	ldw	r2,0(r2)
 8012754:	10800104 	addi	r2,r2,4
 8012758:	1007883a 	mov	r3,r2
 801275c:	e0bffc17 	ldw	r2,-16(fp)
 8012760:	10800817 	ldw	r2,32(r2)
 8012764:	18800035 	stwio	r2,0(r3)
 8012768:	e0bffa17 	ldw	r2,-24(fp)
 801276c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012770:	e0bff817 	ldw	r2,-32(fp)
 8012774:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8012778:	e0bffe17 	ldw	r2,-8(fp)
 801277c:	0080100e 	bge	zero,r2,80127c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8012780:	e0bfff17 	ldw	r2,-4(fp)
 8012784:	1090000c 	andi	r2,r2,16384
 8012788:	1000101e 	bne	r2,zero,80127cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801278c:	0001883a 	nop
 8012790:	e0bffc17 	ldw	r2,-16(fp)
 8012794:	10c00d17 	ldw	r3,52(r2)
 8012798:	e0bff517 	ldw	r2,-44(fp)
 801279c:	1880051e 	bne	r3,r2,80127b4 <altera_avalon_jtag_uart_write+0x1b8>
 80127a0:	e0bffc17 	ldw	r2,-16(fp)
 80127a4:	10c00917 	ldw	r3,36(r2)
 80127a8:	e0bffc17 	ldw	r2,-16(fp)
 80127ac:	10800117 	ldw	r2,4(r2)
 80127b0:	18bff736 	bltu	r3,r2,8012790 <__alt_data_end+0xfc012790>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80127b4:	e0bffc17 	ldw	r2,-16(fp)
 80127b8:	10800917 	ldw	r2,36(r2)
 80127bc:	1000051e 	bne	r2,zero,80127d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80127c0:	e0bffe17 	ldw	r2,-8(fp)
 80127c4:	00bfd016 	blt	zero,r2,8012708 <__alt_data_end+0xfc012708>
 80127c8:	00000306 	br	80127d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80127cc:	0001883a 	nop
 80127d0:	00000106 	br	80127d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80127d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80127d8:	e0fffd17 	ldw	r3,-12(fp)
 80127dc:	e0bff717 	ldw	r2,-36(fp)
 80127e0:	18800426 	beq	r3,r2,80127f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80127e4:	e0fffd17 	ldw	r3,-12(fp)
 80127e8:	e0bff717 	ldw	r2,-36(fp)
 80127ec:	1885c83a 	sub	r2,r3,r2
 80127f0:	00000606 	br	801280c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80127f4:	e0bfff17 	ldw	r2,-4(fp)
 80127f8:	1090000c 	andi	r2,r2,16384
 80127fc:	10000226 	beq	r2,zero,8012808 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8012800:	00bffd44 	movi	r2,-11
 8012804:	00000106 	br	801280c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8012808:	00bffec4 	movi	r2,-5
}
 801280c:	e037883a 	mov	sp,fp
 8012810:	dfc00117 	ldw	ra,4(sp)
 8012814:	df000017 	ldw	fp,0(sp)
 8012818:	dec00204 	addi	sp,sp,8
 801281c:	f800283a 	ret

08012820 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 8012820:	defffd04 	addi	sp,sp,-12
 8012824:	df000215 	stw	fp,8(sp)
 8012828:	df000204 	addi	fp,sp,8
 801282c:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 8012830:	008e84b4 	movhi	r2,14866
 8012834:	10ac1144 	addi	r2,r2,-20411
 8012838:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 801283c:	e0bfff17 	ldw	r2,-4(fp)
 8012840:	10800a17 	ldw	r2,40(r2)
 8012844:	10800104 	addi	r2,r2,4
 8012848:	1007883a 	mov	r3,r2
 801284c:	e0bffe17 	ldw	r2,-8(fp)
 8012850:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 8012854:	e0bfff17 	ldw	r2,-4(fp)
 8012858:	10800a17 	ldw	r2,40(r2)
 801285c:	10800104 	addi	r2,r2,4
 8012860:	10800037 	ldwio	r2,0(r2)
 8012864:	1007883a 	mov	r3,r2
 8012868:	e0bffe17 	ldw	r2,-8(fp)
 801286c:	1880081e 	bne	r3,r2,8012890 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 8012870:	e0bfff17 	ldw	r2,-4(fp)
 8012874:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 8012878:	e0bfff17 	ldw	r2,-4(fp)
 801287c:	10800a17 	ldw	r2,40(r2)
 8012880:	10800104 	addi	r2,r2,4
 8012884:	0007883a 	mov	r3,zero
 8012888:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 801288c:	00000306 	br	801289c <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 8012890:	e0bfff17 	ldw	r2,-4(fp)
 8012894:	00c00044 	movi	r3,1
 8012898:	10c00f15 	stw	r3,60(r2)
    }
}
 801289c:	0001883a 	nop
 80128a0:	e037883a 	mov	sp,fp
 80128a4:	df000017 	ldw	fp,0(sp)
 80128a8:	dec00104 	addi	sp,sp,4
 80128ac:	f800283a 	ret

080128b0 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 80128b0:	defffc04 	addi	sp,sp,-16
 80128b4:	df000315 	stw	fp,12(sp)
 80128b8:	df000304 	addi	fp,sp,12
 80128bc:	e13ffe15 	stw	r4,-8(fp)
 80128c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 80128c4:	e0bfff17 	ldw	r2,-4(fp)
 80128c8:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 80128cc:	e0bffd17 	ldw	r2,-12(fp)
 80128d0:	10001026 	beq	r2,zero,8012914 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 80128d4:	e0bffe17 	ldw	r2,-8(fp)
 80128d8:	10800a17 	ldw	r2,40(r2)
 80128dc:	10800104 	addi	r2,r2,4
 80128e0:	1007883a 	mov	r3,r2
 80128e4:	e0bffd17 	ldw	r2,-12(fp)
 80128e8:	10800104 	addi	r2,r2,4
 80128ec:	10800017 	ldw	r2,0(r2)
 80128f0:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 80128f4:	e0bffe17 	ldw	r2,-8(fp)
 80128f8:	10800a17 	ldw	r2,40(r2)
 80128fc:	1007883a 	mov	r3,r2
 8012900:	e0bffd17 	ldw	r2,-12(fp)
 8012904:	10800017 	ldw	r2,0(r2)
 8012908:	18800035 	stwio	r2,0(r3)
        return 0;
 801290c:	0005883a 	mov	r2,zero
 8012910:	00000106 	br	8012918 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 8012914:	00bffa84 	movi	r2,-22
}
 8012918:	e037883a 	mov	sp,fp
 801291c:	df000017 	ldw	fp,0(sp)
 8012920:	dec00104 	addi	sp,sp,4
 8012924:	f800283a 	ret

08012928 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 8012928:	defff504 	addi	sp,sp,-44
 801292c:	dfc00a15 	stw	ra,40(sp)
 8012930:	df000915 	stw	fp,36(sp)
 8012934:	df000904 	addi	fp,sp,36
 8012938:	e13ffe15 	stw	r4,-8(fp)
 801293c:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8012940:	e0bffe17 	ldw	r2,-8(fp)
 8012944:	e0bff715 	stw	r2,-36(fp)
    int status = 0;
 8012948:	e03ff815 	stw	zero,-32(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 801294c:	e0bff717 	ldw	r2,-36(fp)
 8012950:	10801017 	ldw	r2,64(r2)
 8012954:	e0bff915 	stw	r2,-28(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8012958:	e0bff717 	ldw	r2,-36(fp)
 801295c:	10800a17 	ldw	r2,40(r2)
 8012960:	10800304 	addi	r2,r2,12
 8012964:	10800037 	ldwio	r2,0(r2)
 8012968:	1007883a 	mov	r3,r2
 801296c:	00bfff44 	movi	r2,-3
 8012970:	1884703a 	and	r2,r3,r2
 8012974:	e0bffa15 	stw	r2,-24(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012978:	e0bff717 	ldw	r2,-36(fp)
 801297c:	10800a17 	ldw	r2,40(r2)
 8012980:	10800304 	addi	r2,r2,12
 8012984:	1007883a 	mov	r3,r2
 8012988:	e0bffa17 	ldw	r2,-24(fp)
 801298c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 8012990:	e0bff917 	ldw	r2,-28(fp)
 8012994:	10002d26 	beq	r2,zero,8012a4c <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 8012998:	e0bff717 	ldw	r2,-36(fp)
 801299c:	10800a17 	ldw	r2,40(r2)
 80129a0:	10800104 	addi	r2,r2,4
 80129a4:	1007883a 	mov	r3,r2
 80129a8:	e0bff917 	ldw	r2,-28(fp)
 80129ac:	10800104 	addi	r2,r2,4
 80129b0:	10800017 	ldw	r2,0(r2)
 80129b4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 80129b8:	e0bff717 	ldw	r2,-36(fp)
 80129bc:	10800a17 	ldw	r2,40(r2)
 80129c0:	1007883a 	mov	r3,r2
 80129c4:	e0bff917 	ldw	r2,-28(fp)
 80129c8:	10800017 	ldw	r2,0(r2)
 80129cc:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 80129d0:	e0bff717 	ldw	r2,-36(fp)
 80129d4:	10800a17 	ldw	r2,40(r2)
 80129d8:	10800204 	addi	r2,r2,8
 80129dc:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 80129e0:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 80129e4:	1005d07a 	srai	r2,r2,1
 80129e8:	e0bff815 	stw	r2,-32(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 80129ec:	e0bff717 	ldw	r2,-36(fp)
 80129f0:	10800d17 	ldw	r2,52(r2)
 80129f4:	10001126 	beq	r2,zero,8012a3c <altera_avalon_mailbox_simple_tx_isr+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80129f8:	0005303a 	rdctl	r2,status
 80129fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012a00:	e0fffc17 	ldw	r3,-16(fp)
 8012a04:	00bfff84 	movi	r2,-2
 8012a08:	1884703a 	and	r2,r3,r2
 8012a0c:	1001703a 	wrctl	status,r2
  
  return context;
 8012a10:	e0bffc17 	ldw	r2,-16(fp)
        {
            cpu_sr = alt_irq_disable_all();
 8012a14:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 8012a18:	e0bff717 	ldw	r2,-36(fp)
 8012a1c:	10800d17 	ldw	r2,52(r2)
 8012a20:	e17ff817 	ldw	r5,-32(fp)
 8012a24:	e13ff917 	ldw	r4,-28(fp)
 8012a28:	103ee83a 	callr	r2
 8012a2c:	e0bffb17 	ldw	r2,-20(fp)
 8012a30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012a34:	e0bffd17 	ldw	r2,-12(fp)
 8012a38:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8012a3c:	e0bff717 	ldw	r2,-36(fp)
 8012a40:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 8012a44:	e0bff717 	ldw	r2,-36(fp)
 8012a48:	10001105 	stb	zero,68(r2)
    }
}
 8012a4c:	0001883a 	nop
 8012a50:	e037883a 	mov	sp,fp
 8012a54:	dfc00117 	ldw	ra,4(sp)
 8012a58:	df000017 	ldw	fp,0(sp)
 8012a5c:	dec00204 	addi	sp,sp,8
 8012a60:	f800283a 	ret

08012a64 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 8012a64:	defff604 	addi	sp,sp,-40
 8012a68:	dfc00915 	stw	ra,36(sp)
 8012a6c:	df000815 	stw	fp,32(sp)
 8012a70:	df000804 	addi	fp,sp,32
 8012a74:	e13ffe15 	stw	r4,-8(fp)
 8012a78:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8012a7c:	e0bffe17 	ldw	r2,-8(fp)
 8012a80:	e0bff815 	stw	r2,-32(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8012a84:	e0bff817 	ldw	r2,-32(fp)
 8012a88:	10800a17 	ldw	r2,40(r2)
 8012a8c:	10800104 	addi	r2,r2,4
 8012a90:	10800037 	ldwio	r2,0(r2)
 8012a94:	e0bffd15 	stw	r2,-12(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8012a98:	e0bff817 	ldw	r2,-32(fp)
 8012a9c:	10800a17 	ldw	r2,40(r2)
 8012aa0:	10800037 	ldwio	r2,0(r2)
 8012aa4:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 8012aa8:	e0bff817 	ldw	r2,-32(fp)
 8012aac:	10800e17 	ldw	r2,56(r2)
 8012ab0:	10001126 	beq	r2,zero,8012af8 <altera_avalon_mailbox_simple_rx_isr+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012ab4:	0005303a 	rdctl	r2,status
 8012ab8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012abc:	e0fffa17 	ldw	r3,-24(fp)
 8012ac0:	00bfff84 	movi	r2,-2
 8012ac4:	1884703a 	and	r2,r3,r2
 8012ac8:	1001703a 	wrctl	status,r2
  
  return context;
 8012acc:	e0bffa17 	ldw	r2,-24(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8012ad0:	e0bff915 	stw	r2,-28(fp)
        (dev->rx_cb)(inbox);
 8012ad4:	e0bff817 	ldw	r2,-32(fp)
 8012ad8:	10800e17 	ldw	r2,56(r2)
 8012adc:	e0fffc04 	addi	r3,fp,-16
 8012ae0:	1809883a 	mov	r4,r3
 8012ae4:	103ee83a 	callr	r2
 8012ae8:	e0bff917 	ldw	r2,-28(fp)
 8012aec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012af0:	e0bffb17 	ldw	r2,-20(fp)
 8012af4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 8012af8:	0001883a 	nop
 8012afc:	e037883a 	mov	sp,fp
 8012b00:	dfc00117 	ldw	ra,4(sp)
 8012b04:	df000017 	ldw	fp,0(sp)
 8012b08:	dec00204 	addi	sp,sp,8
 8012b0c:	f800283a 	ret

08012b10 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 8012b10:	defffb04 	addi	sp,sp,-20
 8012b14:	dfc00415 	stw	ra,16(sp)
 8012b18:	df000315 	stw	fp,12(sp)
 8012b1c:	df000304 	addi	fp,sp,12
 8012b20:	e13ffd15 	stw	r4,-12(fp)
 8012b24:	e17ffe15 	stw	r5,-8(fp)
 8012b28:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 8012b2c:	d1600e04 	addi	r5,gp,-32712
 8012b30:	e13ffd17 	ldw	r4,-12(fp)
 8012b34:	80145d00 	call	80145d0 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 8012b38:	e0ffff17 	ldw	r3,-4(fp)
 8012b3c:	e0bffd17 	ldw	r2,-12(fp)
 8012b40:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 8012b44:	e0fffe17 	ldw	r3,-8(fp)
 8012b48:	e0bffd17 	ldw	r2,-12(fp)
 8012b4c:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 8012b50:	e0bffd17 	ldw	r2,-12(fp)
 8012b54:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 8012b58:	e0bffd17 	ldw	r2,-12(fp)
 8012b5c:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 8012b60:	e0bffd17 	ldw	r2,-12(fp)
 8012b64:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 8012b68:	e13ffd17 	ldw	r4,-12(fp)
 8012b6c:	80128200 	call	8012820 <altera_avalon_mailbox_identify>
}
 8012b70:	0001883a 	nop
 8012b74:	e037883a 	mov	sp,fp
 8012b78:	dfc00117 	ldw	ra,4(sp)
 8012b7c:	df000017 	ldw	fp,0(sp)
 8012b80:	dec00204 	addi	sp,sp,8
 8012b84:	f800283a 	ret

08012b88 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 8012b88:	defff904 	addi	sp,sp,-28
 8012b8c:	dfc00615 	stw	ra,24(sp)
 8012b90:	df000515 	stw	fp,20(sp)
 8012b94:	df000504 	addi	fp,sp,20
 8012b98:	e13ffd15 	stw	r4,-12(fp)
 8012b9c:	e17ffe15 	stw	r5,-8(fp)
 8012ba0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 8012ba4:	d1600e04 	addi	r5,gp,-32712
 8012ba8:	e13ffd17 	ldw	r4,-12(fp)
 8012bac:	80147340 	call	8014734 <alt_find_dev>
 8012bb0:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 8012bb4:	e0bffb17 	ldw	r2,-20(fp)
 8012bb8:	1000021e 	bne	r2,zero,8012bc4 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 8012bbc:	0005883a 	mov	r2,zero
 8012bc0:	00005d06 	br	8012d38 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8012bc4:	e0bffb17 	ldw	r2,-20(fp)
 8012bc8:	10800a17 	ldw	r2,40(r2)
 8012bcc:	10800304 	addi	r2,r2,12
 8012bd0:	10800037 	ldwio	r2,0(r2)
 8012bd4:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 8012bd8:	e0bffb17 	ldw	r2,-20(fp)
 8012bdc:	10800f17 	ldw	r2,60(r2)
 8012be0:	1000081e 	bne	r2,zero,8012c04 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8012be4:	e0bffb17 	ldw	r2,-20(fp)
 8012be8:	10800a17 	ldw	r2,40(r2)
 8012bec:	10800304 	addi	r2,r2,12
 8012bf0:	1009883a 	mov	r4,r2
 8012bf4:	e0fffc17 	ldw	r3,-16(fp)
 8012bf8:	00bfff44 	movi	r2,-3
 8012bfc:	1884703a 	and	r2,r3,r2
 8012c00:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 8012c04:	e0bffb17 	ldw	r2,-20(fp)
 8012c08:	10800f17 	ldw	r2,60(r2)
 8012c0c:	10800058 	cmpnei	r2,r2,1
 8012c10:	1000081e 	bne	r2,zero,8012c34 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8012c14:	e0bffb17 	ldw	r2,-20(fp)
 8012c18:	10800a17 	ldw	r2,40(r2)
 8012c1c:	10800304 	addi	r2,r2,12
 8012c20:	1009883a 	mov	r4,r2
 8012c24:	e0fffc17 	ldw	r3,-16(fp)
 8012c28:	00bfff84 	movi	r2,-2
 8012c2c:	1884703a 	and	r2,r3,r2
 8012c30:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 8012c34:	e0bffb17 	ldw	r2,-20(fp)
 8012c38:	10800b17 	ldw	r2,44(r2)
 8012c3c:	10bfffd8 	cmpnei	r2,r2,-1
 8012c40:	1000021e 	bne	r2,zero,8012c4c <altera_avalon_mailbox_open+0xc4>
        return dev;
 8012c44:	e0bffb17 	ldw	r2,-20(fp)
 8012c48:	00003b06 	br	8012d38 <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 8012c4c:	e0bffe17 	ldw	r2,-8(fp)
 8012c50:	1000041e 	bne	r2,zero,8012c64 <altera_avalon_mailbox_open+0xdc>
 8012c54:	e0bfff17 	ldw	r2,-4(fp)
 8012c58:	1000021e 	bne	r2,zero,8012c64 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 8012c5c:	e0bffb17 	ldw	r2,-20(fp)
 8012c60:	00003506 	br	8012d38 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8012c64:	e0bffb17 	ldw	r2,-20(fp)
 8012c68:	10800f17 	ldw	r2,60(r2)
 8012c6c:	1000021e 	bne	r2,zero,8012c78 <altera_avalon_mailbox_open+0xf0>
 8012c70:	e0bfff17 	ldw	r2,-4(fp)
 8012c74:	1000061e 	bne	r2,zero,8012c90 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8012c78:	e0bffb17 	ldw	r2,-20(fp)
 8012c7c:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8012c80:	10800058 	cmpnei	r2,r2,1
 8012c84:	1000041e 	bne	r2,zero,8012c98 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8012c88:	e0bffe17 	ldw	r2,-8(fp)
 8012c8c:	10000226 	beq	r2,zero,8012c98 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 8012c90:	0005883a 	mov	r2,zero
 8012c94:	00002806 	br	8012d38 <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 8012c98:	e0bffb17 	ldw	r2,-20(fp)
 8012c9c:	e0fffe17 	ldw	r3,-8(fp)
 8012ca0:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 8012ca4:	e0bffb17 	ldw	r2,-20(fp)
 8012ca8:	e0ffff17 	ldw	r3,-4(fp)
 8012cac:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 8012cb0:	e0bffb17 	ldw	r2,-20(fp)
 8012cb4:	10800f17 	ldw	r2,60(r2)
 8012cb8:	1000071e 	bne	r2,zero,8012cd8 <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
 8012cbc:	e0bffb17 	ldw	r2,-20(fp)
 8012cc0:	10800b17 	ldw	r2,44(r2)
 8012cc4:	01820074 	movhi	r6,2049
 8012cc8:	318a4a04 	addi	r6,r6,10536
 8012ccc:	e17ffb17 	ldw	r5,-20(fp)
 8012cd0:	1009883a 	mov	r4,r2
 8012cd4:	80149380 	call	8014938 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 8012cd8:	e0bffb17 	ldw	r2,-20(fp)
 8012cdc:	10800f17 	ldw	r2,60(r2)
 8012ce0:	10800058 	cmpnei	r2,r2,1
 8012ce4:	1000131e 	bne	r2,zero,8012d34 <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
 8012ce8:	e0bffb17 	ldw	r2,-20(fp)
 8012cec:	10800b17 	ldw	r2,44(r2)
 8012cf0:	01820074 	movhi	r6,2049
 8012cf4:	318a9904 	addi	r6,r6,10852
 8012cf8:	e17ffb17 	ldw	r5,-20(fp)
 8012cfc:	1009883a 	mov	r4,r2
 8012d00:	80149380 	call	8014938 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8012d04:	e0bffb17 	ldw	r2,-20(fp)
 8012d08:	10800a17 	ldw	r2,40(r2)
 8012d0c:	10800304 	addi	r2,r2,12
 8012d10:	10800037 	ldwio	r2,0(r2)
 8012d14:	10800054 	ori	r2,r2,1
 8012d18:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012d1c:	e0bffb17 	ldw	r2,-20(fp)
 8012d20:	10800a17 	ldw	r2,40(r2)
 8012d24:	10800304 	addi	r2,r2,12
 8012d28:	1007883a 	mov	r3,r2
 8012d2c:	e0bffc17 	ldw	r2,-16(fp)
 8012d30:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 8012d34:	e0bffb17 	ldw	r2,-20(fp)
}
 8012d38:	e037883a 	mov	sp,fp
 8012d3c:	dfc00117 	ldw	ra,4(sp)
 8012d40:	df000017 	ldw	fp,0(sp)
 8012d44:	dec00204 	addi	sp,sp,8
 8012d48:	f800283a 	ret

08012d4c <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 8012d4c:	defffc04 	addi	sp,sp,-16
 8012d50:	dfc00315 	stw	ra,12(sp)
 8012d54:	df000215 	stw	fp,8(sp)
 8012d58:	df000204 	addi	fp,sp,8
 8012d5c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 8012d60:	e0bfff17 	ldw	r2,-4(fp)
 8012d64:	10003526 	beq	r2,zero,8012e3c <altera_avalon_mailbox_close+0xf0>
 8012d68:	e0bfff17 	ldw	r2,-4(fp)
 8012d6c:	10800b17 	ldw	r2,44(r2)
 8012d70:	10bfffe0 	cmpeqi	r2,r2,-1
 8012d74:	1000311e 	bne	r2,zero,8012e3c <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 8012d78:	e0bfff17 	ldw	r2,-4(fp)
 8012d7c:	10800f17 	ldw	r2,60(r2)
 8012d80:	10000e1e 	bne	r2,zero,8012dbc <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8012d84:	e0bfff17 	ldw	r2,-4(fp)
 8012d88:	10800a17 	ldw	r2,40(r2)
 8012d8c:	10800304 	addi	r2,r2,12
 8012d90:	10800037 	ldwio	r2,0(r2)
 8012d94:	1007883a 	mov	r3,r2
 8012d98:	00bfff44 	movi	r2,-3
 8012d9c:	1884703a 	and	r2,r3,r2
 8012da0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012da4:	e0bfff17 	ldw	r2,-4(fp)
 8012da8:	10800a17 	ldw	r2,40(r2)
 8012dac:	10800304 	addi	r2,r2,12
 8012db0:	1007883a 	mov	r3,r2
 8012db4:	e0bffe17 	ldw	r2,-8(fp)
 8012db8:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 8012dbc:	e0bfff17 	ldw	r2,-4(fp)
 8012dc0:	10800f17 	ldw	r2,60(r2)
 8012dc4:	10800058 	cmpnei	r2,r2,1
 8012dc8:	10000e1e 	bne	r2,zero,8012e04 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8012dcc:	e0bfff17 	ldw	r2,-4(fp)
 8012dd0:	10800a17 	ldw	r2,40(r2)
 8012dd4:	10800304 	addi	r2,r2,12
 8012dd8:	10800037 	ldwio	r2,0(r2)
 8012ddc:	1007883a 	mov	r3,r2
 8012de0:	00bfff84 	movi	r2,-2
 8012de4:	1884703a 	and	r2,r3,r2
 8012de8:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012dec:	e0bfff17 	ldw	r2,-4(fp)
 8012df0:	10800a17 	ldw	r2,40(r2)
 8012df4:	10800304 	addi	r2,r2,12
 8012df8:	1007883a 	mov	r3,r2
 8012dfc:	e0bffe17 	ldw	r2,-8(fp)
 8012e00:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 8012e04:	e0bfff17 	ldw	r2,-4(fp)
 8012e08:	10800b17 	ldw	r2,44(r2)
 8012e0c:	10bfffe0 	cmpeqi	r2,r2,-1
 8012e10:	1000061e 	bne	r2,zero,8012e2c <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
 8012e14:	e0bfff17 	ldw	r2,-4(fp)
 8012e18:	10800b17 	ldw	r2,44(r2)
 8012e1c:	000d883a 	mov	r6,zero
 8012e20:	e17fff17 	ldw	r5,-4(fp)
 8012e24:	1009883a 	mov	r4,r2
 8012e28:	80149380 	call	8014938 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 8012e2c:	e0bfff17 	ldw	r2,-4(fp)
 8012e30:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 8012e34:	e0bfff17 	ldw	r2,-4(fp)
 8012e38:	10000e15 	stw	zero,56(r2)
    }
}
 8012e3c:	0001883a 	nop
 8012e40:	e037883a 	mov	sp,fp
 8012e44:	dfc00117 	ldw	ra,4(sp)
 8012e48:	df000017 	ldw	fp,0(sp)
 8012e4c:	dec00204 	addi	sp,sp,8
 8012e50:	f800283a 	ret

08012e54 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 8012e54:	defffd04 	addi	sp,sp,-12
 8012e58:	df000215 	stw	fp,8(sp)
 8012e5c:	df000204 	addi	fp,sp,8
 8012e60:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 8012e64:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 8012e68:	e0bfff17 	ldw	r2,-4(fp)
 8012e6c:	10800a17 	ldw	r2,40(r2)
 8012e70:	10800204 	addi	r2,r2,8
 8012e74:	10800037 	ldwio	r2,0(r2)
 8012e78:	108000cc 	andi	r2,r2,3
 8012e7c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 8012e80:	e0bfff17 	ldw	r2,-4(fp)
 8012e84:	10800f17 	ldw	r2,60(r2)
 8012e88:	1000041e 	bne	r2,zero,8012e9c <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8012e8c:	e0bffe17 	ldw	r2,-8(fp)
 8012e90:	1080008c 	andi	r2,r2,2
 8012e94:	1004d07a 	srli	r2,r2,1
 8012e98:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 8012e9c:	e0bfff17 	ldw	r2,-4(fp)
 8012ea0:	10800f17 	ldw	r2,60(r2)
 8012ea4:	10800058 	cmpnei	r2,r2,1
 8012ea8:	1000031e 	bne	r2,zero,8012eb8 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 8012eac:	e0bffe17 	ldw	r2,-8(fp)
 8012eb0:	1080004c 	andi	r2,r2,1
 8012eb4:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 8012eb8:	e0bffe17 	ldw	r2,-8(fp)
}
 8012ebc:	e037883a 	mov	sp,fp
 8012ec0:	df000017 	ldw	fp,0(sp)
 8012ec4:	dec00104 	addi	sp,sp,4
 8012ec8:	f800283a 	ret

08012ecc <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 8012ecc:	defff704 	addi	sp,sp,-36
 8012ed0:	dfc00815 	stw	ra,32(sp)
 8012ed4:	df000715 	stw	fp,28(sp)
 8012ed8:	df000704 	addi	fp,sp,28
 8012edc:	e13ffc15 	stw	r4,-16(fp)
 8012ee0:	e17ffd15 	stw	r5,-12(fp)
 8012ee4:	e1bffe15 	stw	r6,-8(fp)
 8012ee8:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 8012eec:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8012ef0:	e0bffc17 	ldw	r2,-16(fp)
 8012ef4:	10801103 	ldbu	r2,68(r2)
 8012ef8:	10803fcc 	andi	r2,r2,255
 8012efc:	1000061e 	bne	r2,zero,8012f18 <altera_avalon_mailbox_send+0x4c>
 8012f00:	e0bffc17 	ldw	r2,-16(fp)
 8012f04:	10800a17 	ldw	r2,40(r2)
 8012f08:	10800204 	addi	r2,r2,8
 8012f0c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 8012f10:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8012f14:	10000226 	beq	r2,zero,8012f20 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 8012f18:	00bfffc4 	movi	r2,-1
 8012f1c:	00003a06 	br	8013008 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 8012f20:	e0bffc17 	ldw	r2,-16(fp)
 8012f24:	e0fffd17 	ldw	r3,-12(fp)
 8012f28:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 8012f2c:	e0bffc17 	ldw	r2,-16(fp)
 8012f30:	00c00044 	movi	r3,1
 8012f34:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 8012f38:	e0bffc17 	ldw	r2,-16(fp)
 8012f3c:	10800b17 	ldw	r2,44(r2)
 8012f40:	10bfffe0 	cmpeqi	r2,r2,-1
 8012f44:	1000031e 	bne	r2,zero,8012f54 <altera_avalon_mailbox_send+0x88>
 8012f48:	e0bfff17 	ldw	r2,-4(fp)
 8012f4c:	10800058 	cmpnei	r2,r2,1
 8012f50:	1000201e 	bne	r2,zero,8012fd4 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 8012f54:	e0bffe17 	ldw	r2,-8(fp)
 8012f58:	1000061e 	bne	r2,zero,8012f74 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8012f5c:	e13ffc17 	ldw	r4,-16(fp)
 8012f60:	8012e540 	call	8012e54 <altera_avalon_mailbox_status>
 8012f64:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 8012f68:	e0bffb17 	ldw	r2,-20(fp)
 8012f6c:	103ffb1e 	bne	r2,zero,8012f5c <__alt_data_end+0xfc012f5c>
 8012f70:	00000e06 	br	8012fac <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8012f74:	e13ffc17 	ldw	r4,-16(fp)
 8012f78:	8012e540 	call	8012e54 <altera_avalon_mailbox_status>
 8012f7c:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 8012f80:	e0bffe17 	ldw	r2,-8(fp)
 8012f84:	10bfffc4 	addi	r2,r2,-1
 8012f88:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 8012f8c:	e0bffb17 	ldw	r2,-20(fp)
 8012f90:	10000226 	beq	r2,zero,8012f9c <altera_avalon_mailbox_send+0xd0>
 8012f94:	e0bffe17 	ldw	r2,-8(fp)
 8012f98:	103ff61e 	bne	r2,zero,8012f74 <__alt_data_end+0xfc012f74>
            if (timeout == 0)
 8012f9c:	e0bffe17 	ldw	r2,-8(fp)
 8012fa0:	1000021e 	bne	r2,zero,8012fac <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 8012fa4:	00bff084 	movi	r2,-62
 8012fa8:	00001706 	br	8013008 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 8012fac:	e17ffd17 	ldw	r5,-12(fp)
 8012fb0:	e13ffc17 	ldw	r4,-16(fp)
 8012fb4:	80128b00 	call	80128b0 <altera_avalon_mailbox_post>
 8012fb8:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8012fbc:	e0bffc17 	ldw	r2,-16(fp)
 8012fc0:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 8012fc4:	e0bffc17 	ldw	r2,-16(fp)
 8012fc8:	10001105 	stb	zero,68(r2)
        return status;
 8012fcc:	e0bff917 	ldw	r2,-28(fp)
 8012fd0:	00000d06 	br	8013008 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8012fd4:	e0bffc17 	ldw	r2,-16(fp)
 8012fd8:	10800a17 	ldw	r2,40(r2)
 8012fdc:	10800304 	addi	r2,r2,12
 8012fe0:	10800037 	ldwio	r2,0(r2)
 8012fe4:	10800094 	ori	r2,r2,2
 8012fe8:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012fec:	e0bffc17 	ldw	r2,-16(fp)
 8012ff0:	10800a17 	ldw	r2,40(r2)
 8012ff4:	10800304 	addi	r2,r2,12
 8012ff8:	1007883a 	mov	r3,r2
 8012ffc:	e0bffa17 	ldw	r2,-24(fp)
 8013000:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 8013004:	0005883a 	mov	r2,zero
}
 8013008:	e037883a 	mov	sp,fp
 801300c:	dfc00117 	ldw	ra,4(sp)
 8013010:	df000017 	ldw	fp,0(sp)
 8013014:	dec00204 	addi	sp,sp,8
 8013018:	f800283a 	ret

0801301c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 801301c:	defff904 	addi	sp,sp,-28
 8013020:	dfc00615 	stw	ra,24(sp)
 8013024:	df000515 	stw	fp,20(sp)
 8013028:	df000504 	addi	fp,sp,20
 801302c:	e13ffd15 	stw	r4,-12(fp)
 8013030:	e17ffe15 	stw	r5,-8(fp)
 8013034:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 8013038:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 801303c:	e0bffd17 	ldw	r2,-12(fp)
 8013040:	10003a26 	beq	r2,zero,801312c <altera_avalon_mailbox_retrieve_poll+0x110>
 8013044:	e0bffe17 	ldw	r2,-8(fp)
 8013048:	10003826 	beq	r2,zero,801312c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 801304c:	e0bffd17 	ldw	r2,-12(fp)
 8013050:	10800a17 	ldw	r2,40(r2)
 8013054:	10800304 	addi	r2,r2,12
 8013058:	10800037 	ldwio	r2,0(r2)
 801305c:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 8013060:	e0bffd17 	ldw	r2,-12(fp)
 8013064:	10800a17 	ldw	r2,40(r2)
 8013068:	10800304 	addi	r2,r2,12
 801306c:	1009883a 	mov	r4,r2
 8013070:	e0fffc17 	ldw	r3,-16(fp)
 8013074:	00bfff84 	movi	r2,-2
 8013078:	1884703a 	and	r2,r3,r2
 801307c:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 8013080:	e0bfff17 	ldw	r2,-4(fp)
 8013084:	1000061e 	bne	r2,zero,80130a0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 8013088:	e13ffd17 	ldw	r4,-12(fp)
 801308c:	8012e540 	call	8012e54 <altera_avalon_mailbox_status>
 8013090:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 8013094:	e0bffb17 	ldw	r2,-20(fp)
 8013098:	103ffb26 	beq	r2,zero,8013088 <__alt_data_end+0xfc013088>
 801309c:	00000a06 	br	80130c8 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 80130a0:	e13ffd17 	ldw	r4,-12(fp)
 80130a4:	8012e540 	call	8012e54 <altera_avalon_mailbox_status>
 80130a8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 80130ac:	e0bfff17 	ldw	r2,-4(fp)
 80130b0:	10bfffc4 	addi	r2,r2,-1
 80130b4:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 80130b8:	e0bffb17 	ldw	r2,-20(fp)
 80130bc:	1000021e 	bne	r2,zero,80130c8 <altera_avalon_mailbox_retrieve_poll+0xac>
 80130c0:	e0bfff17 	ldw	r2,-4(fp)
 80130c4:	103ff61e 	bne	r2,zero,80130a0 <__alt_data_end+0xfc0130a0>
        }

        /* if timeout, status remain 0 */
        if (status)
 80130c8:	e0bffb17 	ldw	r2,-20(fp)
 80130cc:	10000d26 	beq	r2,zero,8013104 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 80130d0:	e0bffe17 	ldw	r2,-8(fp)
 80130d4:	10800104 	addi	r2,r2,4
 80130d8:	e0fffd17 	ldw	r3,-12(fp)
 80130dc:	18c00a17 	ldw	r3,40(r3)
 80130e0:	18c00104 	addi	r3,r3,4
 80130e4:	18c00037 	ldwio	r3,0(r3)
 80130e8:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 80130ec:	e0bffd17 	ldw	r2,-12(fp)
 80130f0:	10800a17 	ldw	r2,40(r2)
 80130f4:	10800037 	ldwio	r2,0(r2)
 80130f8:	1007883a 	mov	r3,r2
 80130fc:	e0bffe17 	ldw	r2,-8(fp)
 8013100:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8013104:	e0bffd17 	ldw	r2,-12(fp)
 8013108:	10800a17 	ldw	r2,40(r2)
 801310c:	10800304 	addi	r2,r2,12
 8013110:	1007883a 	mov	r3,r2
 8013114:	e0bffc17 	ldw	r2,-16(fp)
 8013118:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 801311c:	e0bffb17 	ldw	r2,-20(fp)
 8013120:	10000226 	beq	r2,zero,801312c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 8013124:	0005883a 	mov	r2,zero
 8013128:	00000606 	br	8013144 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 801312c:	e0bffe17 	ldw	r2,-8(fp)
 8013130:	10800104 	addi	r2,r2,4
 8013134:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 8013138:	e0bffe17 	ldw	r2,-8(fp)
 801313c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 8013140:	00bffa84 	movi	r2,-22
}
 8013144:	e037883a 	mov	sp,fp
 8013148:	dfc00117 	ldw	ra,4(sp)
 801314c:	df000017 	ldw	fp,0(sp)
 8013150:	dec00204 	addi	sp,sp,8
 8013154:	f800283a 	ret

08013158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013158:	defffe04 	addi	sp,sp,-8
 801315c:	dfc00115 	stw	ra,4(sp)
 8013160:	df000015 	stw	fp,0(sp)
 8013164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013168:	d0a00c17 	ldw	r2,-32720(gp)
 801316c:	10000326 	beq	r2,zero,801317c <alt_get_errno+0x24>
 8013170:	d0a00c17 	ldw	r2,-32720(gp)
 8013174:	103ee83a 	callr	r2
 8013178:	00000106 	br	8013180 <alt_get_errno+0x28>
 801317c:	d0a70904 	addi	r2,gp,-25564
}
 8013180:	e037883a 	mov	sp,fp
 8013184:	dfc00117 	ldw	ra,4(sp)
 8013188:	df000017 	ldw	fp,0(sp)
 801318c:	dec00204 	addi	sp,sp,8
 8013190:	f800283a 	ret

08013194 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8013194:	defff904 	addi	sp,sp,-28
 8013198:	df000615 	stw	fp,24(sp)
 801319c:	df000604 	addi	fp,sp,24
 80131a0:	e13ffe15 	stw	r4,-8(fp)
 80131a4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 80131a8:	00bfffc4 	movi	r2,-1
 80131ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 80131b0:	0005317a 	rdctl	r2,cpuid
 80131b4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 80131b8:	e0bffb17 	ldw	r2,-20(fp)
 80131bc:	1006943a 	slli	r3,r2,16
 80131c0:	e0bfff17 	ldw	r2,-4(fp)
 80131c4:	1884b03a 	or	r2,r3,r2
 80131c8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 80131cc:	e0bffe17 	ldw	r2,-8(fp)
 80131d0:	10800317 	ldw	r2,12(r2)
 80131d4:	e0fffc17 	ldw	r3,-16(fp)
 80131d8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 80131dc:	e0bffe17 	ldw	r2,-8(fp)
 80131e0:	10800317 	ldw	r2,12(r2)
 80131e4:	10800037 	ldwio	r2,0(r2)
 80131e8:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 80131ec:	e0fffd17 	ldw	r3,-12(fp)
 80131f0:	e0bffc17 	ldw	r2,-16(fp)
 80131f4:	1880011e 	bne	r3,r2,80131fc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 80131f8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 80131fc:	e0bffa17 	ldw	r2,-24(fp)
}
 8013200:	e037883a 	mov	sp,fp
 8013204:	df000017 	ldw	fp,0(sp)
 8013208:	dec00104 	addi	sp,sp,4
 801320c:	f800283a 	ret

08013210 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8013210:	defffc04 	addi	sp,sp,-16
 8013214:	dfc00315 	stw	ra,12(sp)
 8013218:	df000215 	stw	fp,8(sp)
 801321c:	df000204 	addi	fp,sp,8
 8013220:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8013224:	d1601004 	addi	r5,gp,-32704
 8013228:	e13fff17 	ldw	r4,-4(fp)
 801322c:	80147340 	call	8014734 <alt_find_dev>
 8013230:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 8013234:	e0bffe17 	ldw	r2,-8(fp)
 8013238:	1000041e 	bne	r2,zero,801324c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 801323c:	80131580 	call	8013158 <alt_get_errno>
 8013240:	1007883a 	mov	r3,r2
 8013244:	008004c4 	movi	r2,19
 8013248:	18800015 	stw	r2,0(r3)
  }

  return dev;
 801324c:	e0bffe17 	ldw	r2,-8(fp)
}
 8013250:	e037883a 	mov	sp,fp
 8013254:	dfc00117 	ldw	ra,4(sp)
 8013258:	df000017 	ldw	fp,0(sp)
 801325c:	dec00204 	addi	sp,sp,8
 8013260:	f800283a 	ret

08013264 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8013264:	defffe04 	addi	sp,sp,-8
 8013268:	df000115 	stw	fp,4(sp)
 801326c:	df000104 	addi	fp,sp,4
 8013270:	e13fff15 	stw	r4,-4(fp)
  return;
 8013274:	0001883a 	nop
}
 8013278:	e037883a 	mov	sp,fp
 801327c:	df000017 	ldw	fp,0(sp)
 8013280:	dec00104 	addi	sp,sp,4
 8013284:	f800283a 	ret

08013288 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 8013288:	defffc04 	addi	sp,sp,-16
 801328c:	dfc00315 	stw	ra,12(sp)
 8013290:	df000215 	stw	fp,8(sp)
 8013294:	df000204 	addi	fp,sp,8
 8013298:	e13ffe15 	stw	r4,-8(fp)
 801329c:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 80132a0:	0001883a 	nop
 80132a4:	e17fff17 	ldw	r5,-4(fp)
 80132a8:	e13ffe17 	ldw	r4,-8(fp)
 80132ac:	80131940 	call	8013194 <alt_mutex_trylock>
 80132b0:	103ffc1e 	bne	r2,zero,80132a4 <__alt_data_end+0xfc0132a4>
}
 80132b4:	0001883a 	nop
 80132b8:	e037883a 	mov	sp,fp
 80132bc:	dfc00117 	ldw	ra,4(sp)
 80132c0:	df000017 	ldw	fp,0(sp)
 80132c4:	dec00204 	addi	sp,sp,8
 80132c8:	f800283a 	ret

080132cc <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 80132cc:	defffa04 	addi	sp,sp,-24
 80132d0:	dfc00515 	stw	ra,20(sp)
 80132d4:	df000415 	stw	fp,16(sp)
 80132d8:	df000404 	addi	fp,sp,16
 80132dc:	e13ffd15 	stw	r4,-12(fp)
 80132e0:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 80132e4:	e17ffe17 	ldw	r5,-8(fp)
 80132e8:	e13ffd17 	ldw	r4,-12(fp)
 80132ec:	80131940 	call	8013194 <alt_mutex_trylock>
 80132f0:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 80132f4:	e0bffc17 	ldw	r2,-16(fp)
}
 80132f8:	e037883a 	mov	sp,fp
 80132fc:	dfc00117 	ldw	ra,4(sp)
 8013300:	df000017 	ldw	fp,0(sp)
 8013304:	dec00204 	addi	sp,sp,8
 8013308:	f800283a 	ret

0801330c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 801330c:	defffd04 	addi	sp,sp,-12
 8013310:	df000215 	stw	fp,8(sp)
 8013314:	df000204 	addi	fp,sp,8
 8013318:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 801331c:	0005317a 	rdctl	r2,cpuid
 8013320:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8013324:	e0bfff17 	ldw	r2,-4(fp)
 8013328:	10800317 	ldw	r2,12(r2)
 801332c:	10800104 	addi	r2,r2,4
 8013330:	00c00044 	movi	r3,1
 8013334:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 8013338:	e0bfff17 	ldw	r2,-4(fp)
 801333c:	10800317 	ldw	r2,12(r2)
 8013340:	e0fffe17 	ldw	r3,-8(fp)
 8013344:	1806943a 	slli	r3,r3,16
 8013348:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 801334c:	0001883a 	nop
 8013350:	e037883a 	mov	sp,fp
 8013354:	df000017 	ldw	fp,0(sp)
 8013358:	dec00104 	addi	sp,sp,4
 801335c:	f800283a 	ret

08013360 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8013360:	defff904 	addi	sp,sp,-28
 8013364:	df000615 	stw	fp,24(sp)
 8013368:	df000604 	addi	fp,sp,24
 801336c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 8013370:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 8013374:	0005317a 	rdctl	r2,cpuid
 8013378:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 801337c:	e0bfff17 	ldw	r2,-4(fp)
 8013380:	10800317 	ldw	r2,12(r2)
 8013384:	10800037 	ldwio	r2,0(r2)
 8013388:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 801338c:	e0bffc17 	ldw	r2,-16(fp)
 8013390:	1004d43a 	srli	r2,r2,16
 8013394:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 8013398:	e0fffd17 	ldw	r3,-12(fp)
 801339c:	e0bffb17 	ldw	r2,-20(fp)
 80133a0:	1880071e 	bne	r3,r2,80133c0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 80133a4:	e0bffc17 	ldw	r2,-16(fp)
 80133a8:	10bfffcc 	andi	r2,r2,65535
 80133ac:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 80133b0:	e0bffe17 	ldw	r2,-8(fp)
 80133b4:	10000226 	beq	r2,zero,80133c0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 80133b8:	00800044 	movi	r2,1
 80133bc:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 80133c0:	e0bffa17 	ldw	r2,-24(fp)
}
 80133c4:	e037883a 	mov	sp,fp
 80133c8:	df000017 	ldw	fp,0(sp)
 80133cc:	dec00104 	addi	sp,sp,4
 80133d0:	f800283a 	ret

080133d4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 80133d4:	defffc04 	addi	sp,sp,-16
 80133d8:	df000315 	stw	fp,12(sp)
 80133dc:	df000304 	addi	fp,sp,12
 80133e0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 80133e4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 80133e8:	e0bfff17 	ldw	r2,-4(fp)
 80133ec:	10800317 	ldw	r2,12(r2)
 80133f0:	10800104 	addi	r2,r2,4
 80133f4:	10800037 	ldwio	r2,0(r2)
 80133f8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 80133fc:	e0bffe17 	ldw	r2,-8(fp)
 8013400:	1080004c 	andi	r2,r2,1
 8013404:	10000226 	beq	r2,zero,8013410 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 8013408:	00800044 	movi	r2,1
 801340c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 8013410:	e0bffd17 	ldw	r2,-12(fp)
}
 8013414:	e037883a 	mov	sp,fp
 8013418:	df000017 	ldw	fp,0(sp)
 801341c:	dec00104 	addi	sp,sp,4
 8013420:	f800283a 	ret

08013424 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 8013424:	defffc04 	addi	sp,sp,-16
 8013428:	dfc00315 	stw	ra,12(sp)
 801342c:	df000215 	stw	fp,8(sp)
 8013430:	df000204 	addi	fp,sp,8
 8013434:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 8013438:	d1600904 	addi	r5,gp,-32732
 801343c:	e13fff17 	ldw	r4,-4(fp)
 8013440:	80147340 	call	8014734 <alt_find_dev>
 8013444:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 8013448:	e0bffe17 	ldw	r2,-8(fp)
}
 801344c:	e037883a 	mov	sp,fp
 8013450:	dfc00117 	ldw	ra,4(sp)
 8013454:	df000017 	ldw	fp,0(sp)
 8013458:	dec00204 	addi	sp,sp,8
 801345c:	f800283a 	ret

08013460 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 8013460:	defffd04 	addi	sp,sp,-12
 8013464:	df000215 	stw	fp,8(sp)
 8013468:	df000204 	addi	fp,sp,8
 801346c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8013470:	e0bfff17 	ldw	r2,-4(fp)
 8013474:	10800a17 	ldw	r2,40(r2)
 8013478:	10800037 	ldwio	r2,0(r2)
 801347c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 8013480:	e0bffe17 	ldw	r2,-8(fp)
 8013484:	10800054 	ori	r2,r2,1
 8013488:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 801348c:	e0bfff17 	ldw	r2,-4(fp)
 8013490:	10800a17 	ldw	r2,40(r2)
 8013494:	1007883a 	mov	r3,r2
 8013498:	e0bffe17 	ldw	r2,-8(fp)
 801349c:	18800035 	stwio	r2,0(r3)
}
 80134a0:	0001883a 	nop
 80134a4:	e037883a 	mov	sp,fp
 80134a8:	df000017 	ldw	fp,0(sp)
 80134ac:	dec00104 	addi	sp,sp,4
 80134b0:	f800283a 	ret

080134b4 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 80134b4:	defffd04 	addi	sp,sp,-12
 80134b8:	df000215 	stw	fp,8(sp)
 80134bc:	df000204 	addi	fp,sp,8
 80134c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 80134c4:	e0bfff17 	ldw	r2,-4(fp)
 80134c8:	10800a17 	ldw	r2,40(r2)
 80134cc:	10800037 	ldwio	r2,0(r2)
 80134d0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 80134d4:	e0fffe17 	ldw	r3,-8(fp)
 80134d8:	00bfff84 	movi	r2,-2
 80134dc:	1884703a 	and	r2,r3,r2
 80134e0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 80134e4:	e0bfff17 	ldw	r2,-4(fp)
 80134e8:	10800a17 	ldw	r2,40(r2)
 80134ec:	1007883a 	mov	r3,r2
 80134f0:	e0bffe17 	ldw	r2,-8(fp)
 80134f4:	18800035 	stwio	r2,0(r3)
}
 80134f8:	0001883a 	nop
 80134fc:	e037883a 	mov	sp,fp
 8013500:	df000017 	ldw	fp,0(sp)
 8013504:	dec00104 	addi	sp,sp,4
 8013508:	f800283a 	ret

0801350c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 801350c:	defffd04 	addi	sp,sp,-12
 8013510:	df000215 	stw	fp,8(sp)
 8013514:	df000204 	addi	fp,sp,8
 8013518:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 801351c:	e0bfff17 	ldw	r2,-4(fp)
 8013520:	10800a17 	ldw	r2,40(r2)
 8013524:	10800037 	ldwio	r2,0(r2)
 8013528:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 801352c:	e0bffe17 	ldw	r2,-8(fp)
 8013530:	10800094 	ori	r2,r2,2
 8013534:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8013538:	e0bfff17 	ldw	r2,-4(fp)
 801353c:	10800a17 	ldw	r2,40(r2)
 8013540:	1007883a 	mov	r3,r2
 8013544:	e0bffe17 	ldw	r2,-8(fp)
 8013548:	18800035 	stwio	r2,0(r3)
}
 801354c:	0001883a 	nop
 8013550:	e037883a 	mov	sp,fp
 8013554:	df000017 	ldw	fp,0(sp)
 8013558:	dec00104 	addi	sp,sp,4
 801355c:	f800283a 	ret

08013560 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 8013560:	defffd04 	addi	sp,sp,-12
 8013564:	df000215 	stw	fp,8(sp)
 8013568:	df000204 	addi	fp,sp,8
 801356c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8013570:	e0bfff17 	ldw	r2,-4(fp)
 8013574:	10800a17 	ldw	r2,40(r2)
 8013578:	10800037 	ldwio	r2,0(r2)
 801357c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 8013580:	e0fffe17 	ldw	r3,-8(fp)
 8013584:	00bfff44 	movi	r2,-3
 8013588:	1884703a 	and	r2,r3,r2
 801358c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8013590:	e0bfff17 	ldw	r2,-4(fp)
 8013594:	10800a17 	ldw	r2,40(r2)
 8013598:	1007883a 	mov	r3,r2
 801359c:	e0bffe17 	ldw	r2,-8(fp)
 80135a0:	18800035 	stwio	r2,0(r3)
}
 80135a4:	0001883a 	nop
 80135a8:	e037883a 	mov	sp,fp
 80135ac:	df000017 	ldw	fp,0(sp)
 80135b0:	dec00104 	addi	sp,sp,4
 80135b4:	f800283a 	ret

080135b8 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 80135b8:	defffd04 	addi	sp,sp,-12
 80135bc:	df000215 	stw	fp,8(sp)
 80135c0:	df000204 	addi	fp,sp,8
 80135c4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 80135c8:	e0bfff17 	ldw	r2,-4(fp)
 80135cc:	10800a17 	ldw	r2,40(r2)
 80135d0:	10800037 	ldwio	r2,0(r2)
 80135d4:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 80135d8:	e0bffe17 	ldw	r2,-8(fp)
 80135dc:	1080400c 	andi	r2,r2,256
 80135e0:	1004c03a 	cmpne	r2,r2,zero
 80135e4:	10803fcc 	andi	r2,r2,255
}
 80135e8:	e037883a 	mov	sp,fp
 80135ec:	df000017 	ldw	fp,0(sp)
 80135f0:	dec00104 	addi	sp,sp,4
 80135f4:	f800283a 	ret

080135f8 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 80135f8:	defffd04 	addi	sp,sp,-12
 80135fc:	df000215 	stw	fp,8(sp)
 8013600:	df000204 	addi	fp,sp,8
 8013604:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8013608:	e0bfff17 	ldw	r2,-4(fp)
 801360c:	10800a17 	ldw	r2,40(r2)
 8013610:	10800037 	ldwio	r2,0(r2)
 8013614:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 8013618:	e0bffe17 	ldw	r2,-8(fp)
 801361c:	1080800c 	andi	r2,r2,512
 8013620:	1004c03a 	cmpne	r2,r2,zero
 8013624:	10803fcc 	andi	r2,r2,255
}
 8013628:	e037883a 	mov	sp,fp
 801362c:	df000017 	ldw	fp,0(sp)
 8013630:	dec00104 	addi	sp,sp,4
 8013634:	f800283a 	ret

08013638 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 8013638:	defffd04 	addi	sp,sp,-12
 801363c:	df000215 	stw	fp,8(sp)
 8013640:	df000204 	addi	fp,sp,8
 8013644:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8013648:	e0bfff17 	ldw	r2,-4(fp)
 801364c:	10800a17 	ldw	r2,40(r2)
 8013650:	10800037 	ldwio	r2,0(r2)
 8013654:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 8013658:	e0bffe17 	ldw	r2,-8(fp)
 801365c:	10800114 	ori	r2,r2,4
 8013660:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 8013664:	e0bffe17 	ldw	r2,-8(fp)
 8013668:	10800214 	ori	r2,r2,8
 801366c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8013670:	e0bfff17 	ldw	r2,-4(fp)
 8013674:	10800a17 	ldw	r2,40(r2)
 8013678:	1007883a 	mov	r3,r2
 801367c:	e0bffe17 	ldw	r2,-8(fp)
 8013680:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 8013684:	e0fffe17 	ldw	r3,-8(fp)
 8013688:	00bffec4 	movi	r2,-5
 801368c:	1884703a 	and	r2,r3,r2
 8013690:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 8013694:	e0fffe17 	ldw	r3,-8(fp)
 8013698:	00bffdc4 	movi	r2,-9
 801369c:	1884703a 	and	r2,r3,r2
 80136a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 80136a4:	e0bfff17 	ldw	r2,-4(fp)
 80136a8:	10800a17 	ldw	r2,40(r2)
 80136ac:	1007883a 	mov	r3,r2
 80136b0:	e0bffe17 	ldw	r2,-8(fp)
 80136b4:	18800035 	stwio	r2,0(r3)
}
 80136b8:	0001883a 	nop
 80136bc:	e037883a 	mov	sp,fp
 80136c0:	df000017 	ldw	fp,0(sp)
 80136c4:	dec00104 	addi	sp,sp,4
 80136c8:	f800283a 	ret

080136cc <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 80136cc:	defffc04 	addi	sp,sp,-16
 80136d0:	df000315 	stw	fp,12(sp)
 80136d4:	df000304 	addi	fp,sp,12
 80136d8:	e13ffe15 	stw	r4,-8(fp)
 80136dc:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 80136e0:	e0bffe17 	ldw	r2,-8(fp)
 80136e4:	10800a17 	ldw	r2,40(r2)
 80136e8:	10800104 	addi	r2,r2,4
 80136ec:	10800037 	ldwio	r2,0(r2)
 80136f0:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 80136f4:	e0bfff17 	ldw	r2,-4(fp)
 80136f8:	1000041e 	bne	r2,zero,801370c <alt_up_audio_read_fifo_avail+0x40>
 80136fc:	e0bffd17 	ldw	r2,-12(fp)
 8013700:	10bfc00c 	andi	r2,r2,65280
 8013704:	1004d23a 	srli	r2,r2,8
 8013708:	00000206 	br	8013714 <alt_up_audio_read_fifo_avail+0x48>
 801370c:	e0bffd17 	ldw	r2,-12(fp)
 8013710:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013714:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 8013718:	e0bffd17 	ldw	r2,-12(fp)
}
 801371c:	e037883a 	mov	sp,fp
 8013720:	df000017 	ldw	fp,0(sp)
 8013724:	dec00104 	addi	sp,sp,4
 8013728:	f800283a 	ret

0801372c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 801372c:	defffa04 	addi	sp,sp,-24
 8013730:	dfc00515 	stw	ra,20(sp)
 8013734:	df000415 	stw	fp,16(sp)
 8013738:	df000404 	addi	fp,sp,16
 801373c:	e13ffd15 	stw	r4,-12(fp)
 8013740:	e17ffe15 	stw	r5,-8(fp)
 8013744:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 8013748:	01400044 	movi	r5,1
 801374c:	e13ffd17 	ldw	r4,-12(fp)
 8013750:	80136cc0 	call	80136cc <alt_up_audio_read_fifo_avail>
 8013754:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 8013758:	e0bffc17 	ldw	r2,-16(fp)
 801375c:	10801868 	cmpgeui	r2,r2,97
 8013760:	1000021e 	bne	r2,zero,801376c <alt_up_audio_record_r+0x40>
		return 0;
 8013764:	0005883a 	mov	r2,zero
 8013768:	00000506 	br	8013780 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 801376c:	01c00044 	movi	r7,1
 8013770:	e1bfff17 	ldw	r6,-4(fp)
 8013774:	e17ffe17 	ldw	r5,-8(fp)
 8013778:	e13ffd17 	ldw	r4,-12(fp)
 801377c:	801392c0 	call	801392c <alt_up_audio_read_fifo>
}
 8013780:	e037883a 	mov	sp,fp
 8013784:	dfc00117 	ldw	ra,4(sp)
 8013788:	df000017 	ldw	fp,0(sp)
 801378c:	dec00204 	addi	sp,sp,8
 8013790:	f800283a 	ret

08013794 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8013794:	defffa04 	addi	sp,sp,-24
 8013798:	dfc00515 	stw	ra,20(sp)
 801379c:	df000415 	stw	fp,16(sp)
 80137a0:	df000404 	addi	fp,sp,16
 80137a4:	e13ffd15 	stw	r4,-12(fp)
 80137a8:	e17ffe15 	stw	r5,-8(fp)
 80137ac:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 80137b0:	000b883a 	mov	r5,zero
 80137b4:	e13ffd17 	ldw	r4,-12(fp)
 80137b8:	80136cc0 	call	80136cc <alt_up_audio_read_fifo_avail>
 80137bc:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 80137c0:	e0bffc17 	ldw	r2,-16(fp)
 80137c4:	10801868 	cmpgeui	r2,r2,97
 80137c8:	1000021e 	bne	r2,zero,80137d4 <alt_up_audio_record_l+0x40>
		return 0;
 80137cc:	0005883a 	mov	r2,zero
 80137d0:	00000506 	br	80137e8 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 80137d4:	000f883a 	mov	r7,zero
 80137d8:	e1bfff17 	ldw	r6,-4(fp)
 80137dc:	e17ffe17 	ldw	r5,-8(fp)
 80137e0:	e13ffd17 	ldw	r4,-12(fp)
 80137e4:	801392c0 	call	801392c <alt_up_audio_read_fifo>
}
 80137e8:	e037883a 	mov	sp,fp
 80137ec:	dfc00117 	ldw	ra,4(sp)
 80137f0:	df000017 	ldw	fp,0(sp)
 80137f4:	dec00204 	addi	sp,sp,8
 80137f8:	f800283a 	ret

080137fc <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 80137fc:	defffc04 	addi	sp,sp,-16
 8013800:	df000315 	stw	fp,12(sp)
 8013804:	df000304 	addi	fp,sp,12
 8013808:	e13ffe15 	stw	r4,-8(fp)
 801380c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8013810:	e0bffe17 	ldw	r2,-8(fp)
 8013814:	10800a17 	ldw	r2,40(r2)
 8013818:	10800104 	addi	r2,r2,4
 801381c:	10800037 	ldwio	r2,0(r2)
 8013820:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8013824:	e0bfff17 	ldw	r2,-4(fp)
 8013828:	1000031e 	bne	r2,zero,8013838 <alt_up_audio_write_fifo_space+0x3c>
 801382c:	e0bffd17 	ldw	r2,-12(fp)
 8013830:	1004d63a 	srli	r2,r2,24
 8013834:	00000306 	br	8013844 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 8013838:	e0bffd17 	ldw	r2,-12(fp)
 801383c:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8013840:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013844:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 8013848:	e0bffd17 	ldw	r2,-12(fp)
}
 801384c:	e037883a 	mov	sp,fp
 8013850:	df000017 	ldw	fp,0(sp)
 8013854:	dec00104 	addi	sp,sp,4
 8013858:	f800283a 	ret

0801385c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 801385c:	defffa04 	addi	sp,sp,-24
 8013860:	dfc00515 	stw	ra,20(sp)
 8013864:	df000415 	stw	fp,16(sp)
 8013868:	df000404 	addi	fp,sp,16
 801386c:	e13ffd15 	stw	r4,-12(fp)
 8013870:	e17ffe15 	stw	r5,-8(fp)
 8013874:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 8013878:	01400044 	movi	r5,1
 801387c:	e13ffd17 	ldw	r4,-12(fp)
 8013880:	80137fc0 	call	80137fc <alt_up_audio_write_fifo_space>
 8013884:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 8013888:	e0bffc17 	ldw	r2,-16(fp)
 801388c:	10801868 	cmpgeui	r2,r2,97
 8013890:	1000021e 	bne	r2,zero,801389c <alt_up_audio_play_r+0x40>
		return 0;
 8013894:	0005883a 	mov	r2,zero
 8013898:	00000506 	br	80138b0 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 801389c:	01c00044 	movi	r7,1
 80138a0:	e1bfff17 	ldw	r6,-4(fp)
 80138a4:	e17ffe17 	ldw	r5,-8(fp)
 80138a8:	e13ffd17 	ldw	r4,-12(fp)
 80138ac:	8013a0c0 	call	8013a0c <alt_up_audio_write_fifo>
}
 80138b0:	e037883a 	mov	sp,fp
 80138b4:	dfc00117 	ldw	ra,4(sp)
 80138b8:	df000017 	ldw	fp,0(sp)
 80138bc:	dec00204 	addi	sp,sp,8
 80138c0:	f800283a 	ret

080138c4 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 80138c4:	defffa04 	addi	sp,sp,-24
 80138c8:	dfc00515 	stw	ra,20(sp)
 80138cc:	df000415 	stw	fp,16(sp)
 80138d0:	df000404 	addi	fp,sp,16
 80138d4:	e13ffd15 	stw	r4,-12(fp)
 80138d8:	e17ffe15 	stw	r5,-8(fp)
 80138dc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 80138e0:	000b883a 	mov	r5,zero
 80138e4:	e13ffd17 	ldw	r4,-12(fp)
 80138e8:	80137fc0 	call	80137fc <alt_up_audio_write_fifo_space>
 80138ec:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 80138f0:	e0bffc17 	ldw	r2,-16(fp)
 80138f4:	10801868 	cmpgeui	r2,r2,97
 80138f8:	1000021e 	bne	r2,zero,8013904 <alt_up_audio_play_l+0x40>
		return 0;
 80138fc:	0005883a 	mov	r2,zero
 8013900:	00000506 	br	8013918 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 8013904:	000f883a 	mov	r7,zero
 8013908:	e1bfff17 	ldw	r6,-4(fp)
 801390c:	e17ffe17 	ldw	r5,-8(fp)
 8013910:	e13ffd17 	ldw	r4,-12(fp)
 8013914:	8013a0c0 	call	8013a0c <alt_up_audio_write_fifo>
}
 8013918:	e037883a 	mov	sp,fp
 801391c:	dfc00117 	ldw	ra,4(sp)
 8013920:	df000017 	ldw	fp,0(sp)
 8013924:	dec00204 	addi	sp,sp,8
 8013928:	f800283a 	ret

0801392c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 801392c:	defff904 	addi	sp,sp,-28
 8013930:	df000615 	stw	fp,24(sp)
 8013934:	df000604 	addi	fp,sp,24
 8013938:	e13ffc15 	stw	r4,-16(fp)
 801393c:	e17ffd15 	stw	r5,-12(fp)
 8013940:	e1bffe15 	stw	r6,-8(fp)
 8013944:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 8013948:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 801394c:	00002506 	br	80139e4 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8013950:	e0bffc17 	ldw	r2,-16(fp)
 8013954:	10800a17 	ldw	r2,40(r2)
 8013958:	10800104 	addi	r2,r2,4
 801395c:	10800037 	ldwio	r2,0(r2)
 8013960:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 8013964:	e0bfff17 	ldw	r2,-4(fp)
 8013968:	1000041e 	bne	r2,zero,801397c <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 801396c:	e0bffb17 	ldw	r2,-20(fp)
 8013970:	10bfc00c 	andi	r2,r2,65280
			:
 8013974:	1004d23a 	srli	r2,r2,8
 8013978:	00000206 	br	8013984 <alt_up_audio_read_fifo+0x58>
 801397c:	e0bffb17 	ldw	r2,-20(fp)
 8013980:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013984:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 8013988:	e0bffb17 	ldw	r2,-20(fp)
 801398c:	10001926 	beq	r2,zero,80139f4 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013990:	e0bffa17 	ldw	r2,-24(fp)
 8013994:	1085883a 	add	r2,r2,r2
 8013998:	1085883a 	add	r2,r2,r2
 801399c:	1007883a 	mov	r3,r2
 80139a0:	e0bffd17 	ldw	r2,-12(fp)
 80139a4:	10c5883a 	add	r2,r2,r3
 80139a8:	e0ffff17 	ldw	r3,-4(fp)
 80139ac:	1800051e 	bne	r3,zero,80139c4 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 80139b0:	e0fffc17 	ldw	r3,-16(fp)
 80139b4:	18c00a17 	ldw	r3,40(r3)
 80139b8:	18c00204 	addi	r3,r3,8
 80139bc:	18c00037 	ldwio	r3,0(r3)
 80139c0:	00000406 	br	80139d4 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 80139c4:	e0fffc17 	ldw	r3,-16(fp)
 80139c8:	18c00a17 	ldw	r3,40(r3)
 80139cc:	18c00304 	addi	r3,r3,12
 80139d0:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 80139d4:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 80139d8:	e0bffa17 	ldw	r2,-24(fp)
 80139dc:	10800044 	addi	r2,r2,1
 80139e0:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 80139e4:	e0fffa17 	ldw	r3,-24(fp)
 80139e8:	e0bffe17 	ldw	r2,-8(fp)
 80139ec:	18bfd816 	blt	r3,r2,8013950 <__alt_data_end+0xfc013950>
 80139f0:	00000106 	br	80139f8 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 80139f4:	0001883a 	nop
		}
	}
	return count;
 80139f8:	e0bffa17 	ldw	r2,-24(fp)
}
 80139fc:	e037883a 	mov	sp,fp
 8013a00:	df000017 	ldw	fp,0(sp)
 8013a04:	dec00104 	addi	sp,sp,4
 8013a08:	f800283a 	ret

08013a0c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 8013a0c:	defff904 	addi	sp,sp,-28
 8013a10:	df000615 	stw	fp,24(sp)
 8013a14:	df000604 	addi	fp,sp,24
 8013a18:	e13ffc15 	stw	r4,-16(fp)
 8013a1c:	e17ffd15 	stw	r5,-12(fp)
 8013a20:	e1bffe15 	stw	r6,-8(fp)
 8013a24:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 8013a28:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 8013a2c:	00002f06 	br	8013aec <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8013a30:	e0bffc17 	ldw	r2,-16(fp)
 8013a34:	10800a17 	ldw	r2,40(r2)
 8013a38:	10800104 	addi	r2,r2,4
 8013a3c:	10800037 	ldwio	r2,0(r2)
 8013a40:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8013a44:	e0bfff17 	ldw	r2,-4(fp)
 8013a48:	1000031e 	bne	r2,zero,8013a58 <alt_up_audio_write_fifo+0x4c>
 8013a4c:	e0bffb17 	ldw	r2,-20(fp)
 8013a50:	1004d63a 	srli	r2,r2,24
 8013a54:	00000306 	br	8013a64 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 8013a58:	e0bffb17 	ldw	r2,-20(fp)
 8013a5c:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8013a60:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013a64:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 8013a68:	e0bffb17 	ldw	r2,-20(fp)
 8013a6c:	10002326 	beq	r2,zero,8013afc <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 8013a70:	e0bfff17 	ldw	r2,-4(fp)
 8013a74:	10000f1e 	bne	r2,zero,8013ab4 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 8013a78:	e0bffc17 	ldw	r2,-16(fp)
 8013a7c:	10800a17 	ldw	r2,40(r2)
 8013a80:	10800204 	addi	r2,r2,8
 8013a84:	1009883a 	mov	r4,r2
 8013a88:	e0bffa17 	ldw	r2,-24(fp)
 8013a8c:	10c00044 	addi	r3,r2,1
 8013a90:	e0fffa15 	stw	r3,-24(fp)
 8013a94:	1085883a 	add	r2,r2,r2
 8013a98:	1085883a 	add	r2,r2,r2
 8013a9c:	1007883a 	mov	r3,r2
 8013aa0:	e0bffd17 	ldw	r2,-12(fp)
 8013aa4:	10c5883a 	add	r2,r2,r3
 8013aa8:	10800017 	ldw	r2,0(r2)
 8013aac:	20800035 	stwio	r2,0(r4)
 8013ab0:	00000e06 	br	8013aec <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 8013ab4:	e0bffc17 	ldw	r2,-16(fp)
 8013ab8:	10800a17 	ldw	r2,40(r2)
 8013abc:	10800304 	addi	r2,r2,12
 8013ac0:	1009883a 	mov	r4,r2
 8013ac4:	e0bffa17 	ldw	r2,-24(fp)
 8013ac8:	10c00044 	addi	r3,r2,1
 8013acc:	e0fffa15 	stw	r3,-24(fp)
 8013ad0:	1085883a 	add	r2,r2,r2
 8013ad4:	1085883a 	add	r2,r2,r2
 8013ad8:	1007883a 	mov	r3,r2
 8013adc:	e0bffd17 	ldw	r2,-12(fp)
 8013ae0:	10c5883a 	add	r2,r2,r3
 8013ae4:	10800017 	ldw	r2,0(r2)
 8013ae8:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 8013aec:	e0fffa17 	ldw	r3,-24(fp)
 8013af0:	e0bffe17 	ldw	r2,-8(fp)
 8013af4:	18bfce16 	blt	r3,r2,8013a30 <__alt_data_end+0xfc013a30>
 8013af8:	00000106 	br	8013b00 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 8013afc:	0001883a 	nop
		}
	}
	return count;
 8013b00:	e0bffa17 	ldw	r2,-24(fp)
}
 8013b04:	e037883a 	mov	sp,fp
 8013b08:	df000017 	ldw	fp,0(sp)
 8013b0c:	dec00104 	addi	sp,sp,4
 8013b10:	f800283a 	ret

08013b14 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 8013b14:	defffd04 	addi	sp,sp,-12
 8013b18:	df000215 	stw	fp,8(sp)
 8013b1c:	df000204 	addi	fp,sp,8
 8013b20:	e13ffe15 	stw	r4,-8(fp)
 8013b24:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 8013b28:	e0bfff17 	ldw	r2,-4(fp)
 8013b2c:	1000051e 	bne	r2,zero,8013b44 <alt_up_audio_read_fifo_head+0x30>
 8013b30:	e0bffe17 	ldw	r2,-8(fp)
 8013b34:	10800a17 	ldw	r2,40(r2)
 8013b38:	10800204 	addi	r2,r2,8
 8013b3c:	10800037 	ldwio	r2,0(r2)
 8013b40:	00000406 	br	8013b54 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 8013b44:	e0bffe17 	ldw	r2,-8(fp)
 8013b48:	10800a17 	ldw	r2,40(r2)
 8013b4c:	10800304 	addi	r2,r2,12
 8013b50:	10800037 	ldwio	r2,0(r2)
}
 8013b54:	e037883a 	mov	sp,fp
 8013b58:	df000017 	ldw	fp,0(sp)
 8013b5c:	dec00104 	addi	sp,sp,4
 8013b60:	f800283a 	ret

08013b64 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 8013b64:	defffc04 	addi	sp,sp,-16
 8013b68:	df000315 	stw	fp,12(sp)
 8013b6c:	df000304 	addi	fp,sp,12
 8013b70:	e13ffd15 	stw	r4,-12(fp)
 8013b74:	e17ffe15 	stw	r5,-8(fp)
 8013b78:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 8013b7c:	e0bfff17 	ldw	r2,-4(fp)
 8013b80:	1000071e 	bne	r2,zero,8013ba0 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 8013b84:	e0bffd17 	ldw	r2,-12(fp)
 8013b88:	10800a17 	ldw	r2,40(r2)
 8013b8c:	10800204 	addi	r2,r2,8
 8013b90:	1007883a 	mov	r3,r2
 8013b94:	e0bffe17 	ldw	r2,-8(fp)
 8013b98:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 8013b9c:	00000606 	br	8013bb8 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 8013ba0:	e0bffd17 	ldw	r2,-12(fp)
 8013ba4:	10800a17 	ldw	r2,40(r2)
 8013ba8:	10800304 	addi	r2,r2,12
 8013bac:	1007883a 	mov	r3,r2
 8013bb0:	e0bffe17 	ldw	r2,-8(fp)
 8013bb4:	18800035 	stwio	r2,0(r3)
}
 8013bb8:	0001883a 	nop
 8013bbc:	e037883a 	mov	sp,fp
 8013bc0:	df000017 	ldw	fp,0(sp)
 8013bc4:	dec00104 	addi	sp,sp,4
 8013bc8:	f800283a 	ret

08013bcc <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 8013bcc:	defffc04 	addi	sp,sp,-16
 8013bd0:	dfc00315 	stw	ra,12(sp)
 8013bd4:	df000215 	stw	fp,8(sp)
 8013bd8:	df000204 	addi	fp,sp,8
 8013bdc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 8013be0:	d1600904 	addi	r5,gp,-32732
 8013be4:	e13fff17 	ldw	r4,-4(fp)
 8013be8:	80147340 	call	8014734 <alt_find_dev>
 8013bec:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 8013bf0:	e0bffe17 	ldw	r2,-8(fp)
 8013bf4:	10800a17 	ldw	r2,40(r2)
 8013bf8:	10800104 	addi	r2,r2,4
 8013bfc:	10800037 	ldwio	r2,0(r2)
 8013c00:	10803fec 	andhi	r2,r2,255
 8013c04:	1005d43a 	srai	r2,r2,16
 8013c08:	1007883a 	mov	r3,r2
 8013c0c:	e0bffe17 	ldw	r2,-8(fp)
 8013c10:	10c00b15 	stw	r3,44(r2)

  return dev;
 8013c14:	e0bffe17 	ldw	r2,-8(fp)
}
 8013c18:	e037883a 	mov	sp,fp
 8013c1c:	dfc00117 	ldw	ra,4(sp)
 8013c20:	df000017 	ldw	fp,0(sp)
 8013c24:	dec00204 	addi	sp,sp,8
 8013c28:	f800283a 	ret

08013c2c <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8013c2c:	defffc04 	addi	sp,sp,-16
 8013c30:	df000315 	stw	fp,12(sp)
 8013c34:	df000304 	addi	fp,sp,12
 8013c38:	e13ffd15 	stw	r4,-12(fp)
 8013c3c:	e17ffe15 	stw	r5,-8(fp)
 8013c40:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 8013c44:	e0bffd17 	ldw	r2,-12(fp)
 8013c48:	10800a17 	ldw	r2,40(r2)
 8013c4c:	10800204 	addi	r2,r2,8
 8013c50:	1007883a 	mov	r3,r2
 8013c54:	e0bffe17 	ldw	r2,-8(fp)
 8013c58:	10803fcc 	andi	r2,r2,255
 8013c5c:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 8013c60:	e0bffd17 	ldw	r2,-12(fp)
 8013c64:	10800a17 	ldw	r2,40(r2)
 8013c68:	10800304 	addi	r2,r2,12
 8013c6c:	1007883a 	mov	r3,r2
 8013c70:	e0bfff17 	ldw	r2,-4(fp)
 8013c74:	10bfffcc 	andi	r2,r2,65535
 8013c78:	18800035 	stwio	r2,0(r3)

	return 0;
 8013c7c:	0005883a 	mov	r2,zero
}
 8013c80:	e037883a 	mov	sp,fp
 8013c84:	df000017 	ldw	fp,0(sp)
 8013c88:	dec00104 	addi	sp,sp,4
 8013c8c:	f800283a 	ret

08013c90 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 8013c90:	defffb04 	addi	sp,sp,-20
 8013c94:	dfc00415 	stw	ra,16(sp)
 8013c98:	df000315 	stw	fp,12(sp)
 8013c9c:	df000304 	addi	fp,sp,12
 8013ca0:	e13ffd15 	stw	r4,-12(fp)
 8013ca4:	e17ffe15 	stw	r5,-8(fp)
 8013ca8:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 8013cac:	e0bffd17 	ldw	r2,-12(fp)
 8013cb0:	10800a17 	ldw	r2,40(r2)
 8013cb4:	10800204 	addi	r2,r2,8
 8013cb8:	1007883a 	mov	r3,r2
 8013cbc:	e0bffe17 	ldw	r2,-8(fp)
 8013cc0:	10803fcc 	andi	r2,r2,255
 8013cc4:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 8013cc8:	e0bffd17 	ldw	r2,-12(fp)
 8013ccc:	10800a17 	ldw	r2,40(r2)
 8013cd0:	10800304 	addi	r2,r2,12
 8013cd4:	10800037 	ldwio	r2,0(r2)
 8013cd8:	1007883a 	mov	r3,r2
 8013cdc:	e0bfff17 	ldw	r2,-4(fp)
 8013ce0:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 8013ce4:	e13ffd17 	ldw	r4,-12(fp)
 8013ce8:	8013db40 	call	8013db4 <alt_up_av_config_read_acknowledge>
 8013cec:	10000226 	beq	r2,zero,8013cf8 <alt_up_av_config_read_data+0x68>
		return -1;
 8013cf0:	00bfffc4 	movi	r2,-1
 8013cf4:	00000106 	br	8013cfc <alt_up_av_config_read_data+0x6c>

	return 0;
 8013cf8:	0005883a 	mov	r2,zero
}
 8013cfc:	e037883a 	mov	sp,fp
 8013d00:	dfc00117 	ldw	ra,4(sp)
 8013d04:	df000017 	ldw	fp,0(sp)
 8013d08:	dec00204 	addi	sp,sp,8
 8013d0c:	f800283a 	ret

08013d10 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 8013d10:	defffe04 	addi	sp,sp,-8
 8013d14:	df000115 	stw	fp,4(sp)
 8013d18:	df000104 	addi	fp,sp,4
 8013d1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 8013d20:	e0bfff17 	ldw	r2,-4(fp)
 8013d24:	10800a17 	ldw	r2,40(r2)
 8013d28:	1007883a 	mov	r3,r2
 8013d2c:	00800044 	movi	r2,1
 8013d30:	18800025 	stbio	r2,0(r3)
	return 0;
 8013d34:	0005883a 	mov	r2,zero
}
 8013d38:	e037883a 	mov	sp,fp
 8013d3c:	df000017 	ldw	fp,0(sp)
 8013d40:	dec00104 	addi	sp,sp,4
 8013d44:	f800283a 	ret

08013d48 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 8013d48:	defffe04 	addi	sp,sp,-8
 8013d4c:	df000115 	stw	fp,4(sp)
 8013d50:	df000104 	addi	fp,sp,4
 8013d54:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 8013d58:	e0bfff17 	ldw	r2,-4(fp)
 8013d5c:	10800a17 	ldw	r2,40(r2)
 8013d60:	1007883a 	mov	r3,r2
 8013d64:	00800084 	movi	r2,2
 8013d68:	18800025 	stbio	r2,0(r3)
	return 0;
 8013d6c:	0005883a 	mov	r2,zero
}
 8013d70:	e037883a 	mov	sp,fp
 8013d74:	df000017 	ldw	fp,0(sp)
 8013d78:	dec00104 	addi	sp,sp,4
 8013d7c:	f800283a 	ret

08013d80 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 8013d80:	defffe04 	addi	sp,sp,-8
 8013d84:	df000115 	stw	fp,4(sp)
 8013d88:	df000104 	addi	fp,sp,4
 8013d8c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 8013d90:	e0bfff17 	ldw	r2,-4(fp)
 8013d94:	10800a17 	ldw	r2,40(r2)
 8013d98:	0007883a 	mov	r3,zero
 8013d9c:	10c00025 	stbio	r3,0(r2)
	return 0;
 8013da0:	0005883a 	mov	r2,zero
}
 8013da4:	e037883a 	mov	sp,fp
 8013da8:	df000017 	ldw	fp,0(sp)
 8013dac:	dec00104 	addi	sp,sp,4
 8013db0:	f800283a 	ret

08013db4 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 8013db4:	defffe04 	addi	sp,sp,-8
 8013db8:	df000115 	stw	fp,4(sp)
 8013dbc:	df000104 	addi	fp,sp,4
 8013dc0:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 8013dc4:	e0bfff17 	ldw	r2,-4(fp)
 8013dc8:	10800a17 	ldw	r2,40(r2)
 8013dcc:	10800104 	addi	r2,r2,4
 8013dd0:	10800037 	ldwio	r2,0(r2)
 8013dd4:	1080008c 	andi	r2,r2,2
 8013dd8:	1005d07a 	srai	r2,r2,1
 8013ddc:	10000626 	beq	r2,zero,8013df8 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 8013de0:	e0bfff17 	ldw	r2,-4(fp)
 8013de4:	10800a17 	ldw	r2,40(r2)
 8013de8:	10800104 	addi	r2,r2,4
 8013dec:	10800037 	ldwio	r2,0(r2)
 8013df0:	1080004c 	andi	r2,r2,1
 8013df4:	00000106 	br	8013dfc <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 8013df8:	00bfffc4 	movi	r2,-1
}
 8013dfc:	e037883a 	mov	sp,fp
 8013e00:	df000017 	ldw	fp,0(sp)
 8013e04:	dec00104 	addi	sp,sp,4
 8013e08:	f800283a 	ret

08013e0c <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 8013e0c:	defffe04 	addi	sp,sp,-8
 8013e10:	df000115 	stw	fp,4(sp)
 8013e14:	df000104 	addi	fp,sp,4
 8013e18:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 8013e1c:	e0bfff17 	ldw	r2,-4(fp)
 8013e20:	10800a17 	ldw	r2,40(r2)
 8013e24:	10800104 	addi	r2,r2,4
 8013e28:	10800037 	ldwio	r2,0(r2)
 8013e2c:	1080008c 	andi	r2,r2,2
 8013e30:	1005d07a 	srai	r2,r2,1
}
 8013e34:	e037883a 	mov	sp,fp
 8013e38:	df000017 	ldw	fp,0(sp)
 8013e3c:	dec00104 	addi	sp,sp,4
 8013e40:	f800283a 	ret

08013e44 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8013e44:	defffa04 	addi	sp,sp,-24
 8013e48:	dfc00515 	stw	ra,20(sp)
 8013e4c:	df000415 	stw	fp,16(sp)
 8013e50:	df000404 	addi	fp,sp,16
 8013e54:	e13ffd15 	stw	r4,-12(fp)
 8013e58:	e17ffe15 	stw	r5,-8(fp)
 8013e5c:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 8013e60:	e0bffd17 	ldw	r2,-12(fp)
 8013e64:	10800b17 	ldw	r2,44(r2)
 8013e68:	10800060 	cmpeqi	r2,r2,1
 8013e6c:	10000e1e 	bne	r2,zero,8013ea8 <alt_up_av_config_write_audio_cfg_register+0x64>
 8013e70:	e0bffd17 	ldw	r2,-12(fp)
 8013e74:	10800b17 	ldw	r2,44(r2)
 8013e78:	108000a0 	cmpeqi	r2,r2,2
 8013e7c:	10000a1e 	bne	r2,zero,8013ea8 <alt_up_av_config_write_audio_cfg_register+0x64>
 8013e80:	e0bffd17 	ldw	r2,-12(fp)
 8013e84:	10800b17 	ldw	r2,44(r2)
 8013e88:	108000e0 	cmpeqi	r2,r2,3
 8013e8c:	1000061e 	bne	r2,zero,8013ea8 <alt_up_av_config_write_audio_cfg_register+0x64>
 8013e90:	e0bffd17 	ldw	r2,-12(fp)
 8013e94:	10800b17 	ldw	r2,44(r2)
 8013e98:	10800120 	cmpeqi	r2,r2,4
 8013e9c:	1000021e 	bne	r2,zero,8013ea8 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 8013ea0:	00bffa84 	movi	r2,-22
 8013ea4:	00000b06 	br	8013ed4 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 8013ea8:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 8013eac:	e0bffd17 	ldw	r2,-12(fp)
 8013eb0:	10800a17 	ldw	r2,40(r2)
 8013eb4:	10800084 	addi	r2,r2,2
 8013eb8:	1007883a 	mov	r3,r2
 8013ebc:	e0bffc17 	ldw	r2,-16(fp)
 8013ec0:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 8013ec4:	e1bfff17 	ldw	r6,-4(fp)
 8013ec8:	e17ffe17 	ldw	r5,-8(fp)
 8013ecc:	e13ffd17 	ldw	r4,-12(fp)
 8013ed0:	8013c2c0 	call	8013c2c <alt_up_av_config_write_data>
}
 8013ed4:	e037883a 	mov	sp,fp
 8013ed8:	dfc00117 	ldw	ra,4(sp)
 8013edc:	df000017 	ldw	fp,0(sp)
 8013ee0:	dec00204 	addi	sp,sp,8
 8013ee4:	f800283a 	ret

08013ee8 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 8013ee8:	defffa04 	addi	sp,sp,-24
 8013eec:	dfc00515 	stw	ra,20(sp)
 8013ef0:	df000415 	stw	fp,16(sp)
 8013ef4:	df000404 	addi	fp,sp,16
 8013ef8:	e13ffc15 	stw	r4,-16(fp)
 8013efc:	e17ffd15 	stw	r5,-12(fp)
 8013f00:	e1bffe15 	stw	r6,-8(fp)
 8013f04:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 8013f08:	e0bffc17 	ldw	r2,-16(fp)
 8013f0c:	10800b17 	ldw	r2,44(r2)
 8013f10:	108000a0 	cmpeqi	r2,r2,2
 8013f14:	10000a1e 	bne	r2,zero,8013f40 <alt_up_av_config_read_video_cfg_register+0x58>
 8013f18:	e0bffc17 	ldw	r2,-16(fp)
 8013f1c:	10800b17 	ldw	r2,44(r2)
 8013f20:	108000e0 	cmpeqi	r2,r2,3
 8013f24:	1000061e 	bne	r2,zero,8013f40 <alt_up_av_config_read_video_cfg_register+0x58>
 8013f28:	e0bffc17 	ldw	r2,-16(fp)
 8013f2c:	10800b17 	ldw	r2,44(r2)
 8013f30:	10800120 	cmpeqi	r2,r2,4
 8013f34:	1000021e 	bne	r2,zero,8013f40 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 8013f38:	00bffa84 	movi	r2,-22
 8013f3c:	00001f06 	br	8013fbc <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 8013f40:	e0bffc17 	ldw	r2,-16(fp)
 8013f44:	10800b17 	ldw	r2,44(r2)
 8013f48:	108000a0 	cmpeqi	r2,r2,2
 8013f4c:	1000041e 	bne	r2,zero,8013f60 <alt_up_av_config_read_video_cfg_register+0x78>
 8013f50:	e0bffc17 	ldw	r2,-16(fp)
 8013f54:	10800b17 	ldw	r2,44(r2)
 8013f58:	10800118 	cmpnei	r2,r2,4
 8013f5c:	1000051e 	bne	r2,zero,8013f74 <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 8013f60:	e0bfff17 	ldw	r2,-4(fp)
 8013f64:	10800060 	cmpeqi	r2,r2,1
 8013f68:	10000a1e 	bne	r2,zero,8013f94 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 8013f6c:	00bffa84 	movi	r2,-22
 8013f70:	00001206 	br	8013fbc <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 8013f74:	e0bfff17 	ldw	r2,-4(fp)
 8013f78:	10800060 	cmpeqi	r2,r2,1
 8013f7c:	1000051e 	bne	r2,zero,8013f94 <alt_up_av_config_read_video_cfg_register+0xac>
 8013f80:	e0bfff17 	ldw	r2,-4(fp)
 8013f84:	108000a0 	cmpeqi	r2,r2,2
 8013f88:	1000021e 	bne	r2,zero,8013f94 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 8013f8c:	00bffa84 	movi	r2,-22
 8013f90:	00000a06 	br	8013fbc <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 8013f94:	e0bffc17 	ldw	r2,-16(fp)
 8013f98:	10800a17 	ldw	r2,40(r2)
 8013f9c:	10800084 	addi	r2,r2,2
 8013fa0:	1007883a 	mov	r3,r2
 8013fa4:	e0bfff17 	ldw	r2,-4(fp)
 8013fa8:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 8013fac:	e1bffe17 	ldw	r6,-8(fp)
 8013fb0:	e17ffd17 	ldw	r5,-12(fp)
 8013fb4:	e13ffc17 	ldw	r4,-16(fp)
 8013fb8:	8013c900 	call	8013c90 <alt_up_av_config_read_data>
}
 8013fbc:	e037883a 	mov	sp,fp
 8013fc0:	dfc00117 	ldw	ra,4(sp)
 8013fc4:	df000017 	ldw	fp,0(sp)
 8013fc8:	dec00204 	addi	sp,sp,8
 8013fcc:	f800283a 	ret

08013fd0 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 8013fd0:	defffa04 	addi	sp,sp,-24
 8013fd4:	dfc00515 	stw	ra,20(sp)
 8013fd8:	df000415 	stw	fp,16(sp)
 8013fdc:	df000404 	addi	fp,sp,16
 8013fe0:	e13ffc15 	stw	r4,-16(fp)
 8013fe4:	e17ffd15 	stw	r5,-12(fp)
 8013fe8:	e1bffe15 	stw	r6,-8(fp)
 8013fec:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 8013ff0:	e0bffc17 	ldw	r2,-16(fp)
 8013ff4:	10800b17 	ldw	r2,44(r2)
 8013ff8:	108000a0 	cmpeqi	r2,r2,2
 8013ffc:	10000a1e 	bne	r2,zero,8014028 <alt_up_av_config_write_video_cfg_register+0x58>
 8014000:	e0bffc17 	ldw	r2,-16(fp)
 8014004:	10800b17 	ldw	r2,44(r2)
 8014008:	108000e0 	cmpeqi	r2,r2,3
 801400c:	1000061e 	bne	r2,zero,8014028 <alt_up_av_config_write_video_cfg_register+0x58>
 8014010:	e0bffc17 	ldw	r2,-16(fp)
 8014014:	10800b17 	ldw	r2,44(r2)
 8014018:	10800120 	cmpeqi	r2,r2,4
 801401c:	1000021e 	bne	r2,zero,8014028 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 8014020:	00bffa84 	movi	r2,-22
 8014024:	00001f06 	br	80140a4 <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 8014028:	e0bffc17 	ldw	r2,-16(fp)
 801402c:	10800b17 	ldw	r2,44(r2)
 8014030:	108000a0 	cmpeqi	r2,r2,2
 8014034:	1000041e 	bne	r2,zero,8014048 <alt_up_av_config_write_video_cfg_register+0x78>
 8014038:	e0bffc17 	ldw	r2,-16(fp)
 801403c:	10800b17 	ldw	r2,44(r2)
 8014040:	10800118 	cmpnei	r2,r2,4
 8014044:	1000051e 	bne	r2,zero,801405c <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 8014048:	e0bfff17 	ldw	r2,-4(fp)
 801404c:	10800060 	cmpeqi	r2,r2,1
 8014050:	10000a1e 	bne	r2,zero,801407c <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 8014054:	00bffa84 	movi	r2,-22
 8014058:	00001206 	br	80140a4 <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 801405c:	e0bfff17 	ldw	r2,-4(fp)
 8014060:	10800060 	cmpeqi	r2,r2,1
 8014064:	1000051e 	bne	r2,zero,801407c <alt_up_av_config_write_video_cfg_register+0xac>
 8014068:	e0bfff17 	ldw	r2,-4(fp)
 801406c:	108000a0 	cmpeqi	r2,r2,2
 8014070:	1000021e 	bne	r2,zero,801407c <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 8014074:	00bffa84 	movi	r2,-22
 8014078:	00000a06 	br	80140a4 <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 801407c:	e0bffc17 	ldw	r2,-16(fp)
 8014080:	10800a17 	ldw	r2,40(r2)
 8014084:	10800084 	addi	r2,r2,2
 8014088:	1007883a 	mov	r3,r2
 801408c:	e0bfff17 	ldw	r2,-4(fp)
 8014090:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 8014094:	e1bffe17 	ldw	r6,-8(fp)
 8014098:	e17ffd17 	ldw	r5,-12(fp)
 801409c:	e13ffc17 	ldw	r4,-16(fp)
 80140a0:	8013c2c0 	call	8013c2c <alt_up_av_config_write_data>
}
 80140a4:	e037883a 	mov	sp,fp
 80140a8:	dfc00117 	ldw	ra,4(sp)
 80140ac:	df000017 	ldw	fp,0(sp)
 80140b0:	dec00204 	addi	sp,sp,8
 80140b4:	f800283a 	ret

080140b8 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 80140b8:	defffb04 	addi	sp,sp,-20
 80140bc:	dfc00415 	stw	ra,16(sp)
 80140c0:	df000315 	stw	fp,12(sp)
 80140c4:	df000304 	addi	fp,sp,12
 80140c8:	e13ffd15 	stw	r4,-12(fp)
 80140cc:	e17ffe15 	stw	r5,-8(fp)
 80140d0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 80140d4:	e0bffd17 	ldw	r2,-12(fp)
 80140d8:	10800b17 	ldw	r2,44(r2)
 80140dc:	10800220 	cmpeqi	r2,r2,8
 80140e0:	1000021e 	bne	r2,zero,80140ec <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 80140e4:	00bffa84 	movi	r2,-22
 80140e8:	00000406 	br	80140fc <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 80140ec:	e1bfff17 	ldw	r6,-4(fp)
 80140f0:	e17ffe17 	ldw	r5,-8(fp)
 80140f4:	e13ffd17 	ldw	r4,-12(fp)
 80140f8:	8013c900 	call	8013c90 <alt_up_av_config_read_data>
}
 80140fc:	e037883a 	mov	sp,fp
 8014100:	dfc00117 	ldw	ra,4(sp)
 8014104:	df000017 	ldw	fp,0(sp)
 8014108:	dec00204 	addi	sp,sp,8
 801410c:	f800283a 	ret

08014110 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8014110:	defffb04 	addi	sp,sp,-20
 8014114:	dfc00415 	stw	ra,16(sp)
 8014118:	df000315 	stw	fp,12(sp)
 801411c:	df000304 	addi	fp,sp,12
 8014120:	e13ffd15 	stw	r4,-12(fp)
 8014124:	e17ffe15 	stw	r5,-8(fp)
 8014128:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 801412c:	e0bffd17 	ldw	r2,-12(fp)
 8014130:	10800b17 	ldw	r2,44(r2)
 8014134:	10800220 	cmpeqi	r2,r2,8
 8014138:	1000021e 	bne	r2,zero,8014144 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 801413c:	00bffa84 	movi	r2,-22
 8014140:	00000406 	br	8014154 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 8014144:	e1bfff17 	ldw	r6,-4(fp)
 8014148:	e17ffe17 	ldw	r5,-8(fp)
 801414c:	e13ffd17 	ldw	r4,-12(fp)
 8014150:	8013c2c0 	call	8013c2c <alt_up_av_config_write_data>
}
 8014154:	e037883a 	mov	sp,fp
 8014158:	dfc00117 	ldw	ra,4(sp)
 801415c:	df000017 	ldw	fp,0(sp)
 8014160:	dec00204 	addi	sp,sp,8
 8014164:	f800283a 	ret

08014168 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 8014168:	defffb04 	addi	sp,sp,-20
 801416c:	dfc00415 	stw	ra,16(sp)
 8014170:	df000315 	stw	fp,12(sp)
 8014174:	df000304 	addi	fp,sp,12
 8014178:	e13ffd15 	stw	r4,-12(fp)
 801417c:	e17ffe15 	stw	r5,-8(fp)
 8014180:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 8014184:	e0bffd17 	ldw	r2,-12(fp)
 8014188:	10800b17 	ldw	r2,44(r2)
 801418c:	10800260 	cmpeqi	r2,r2,9
 8014190:	1000021e 	bne	r2,zero,801419c <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 8014194:	00bffa84 	movi	r2,-22
 8014198:	00000406 	br	80141ac <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 801419c:	e1bfff17 	ldw	r6,-4(fp)
 80141a0:	e17ffe17 	ldw	r5,-8(fp)
 80141a4:	e13ffd17 	ldw	r4,-12(fp)
 80141a8:	8013c900 	call	8013c90 <alt_up_av_config_read_data>
}
 80141ac:	e037883a 	mov	sp,fp
 80141b0:	dfc00117 	ldw	ra,4(sp)
 80141b4:	df000017 	ldw	fp,0(sp)
 80141b8:	dec00204 	addi	sp,sp,8
 80141bc:	f800283a 	ret

080141c0 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 80141c0:	defffb04 	addi	sp,sp,-20
 80141c4:	dfc00415 	stw	ra,16(sp)
 80141c8:	df000315 	stw	fp,12(sp)
 80141cc:	df000304 	addi	fp,sp,12
 80141d0:	e13ffd15 	stw	r4,-12(fp)
 80141d4:	e17ffe15 	stw	r5,-8(fp)
 80141d8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 80141dc:	e0bffd17 	ldw	r2,-12(fp)
 80141e0:	10800b17 	ldw	r2,44(r2)
 80141e4:	10800260 	cmpeqi	r2,r2,9
 80141e8:	1000021e 	bne	r2,zero,80141f4 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 80141ec:	00bffa84 	movi	r2,-22
 80141f0:	00000406 	br	8014204 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 80141f4:	e1bfff17 	ldw	r6,-4(fp)
 80141f8:	e17ffe17 	ldw	r5,-8(fp)
 80141fc:	e13ffd17 	ldw	r4,-12(fp)
 8014200:	8013c2c0 	call	8013c2c <alt_up_av_config_write_data>
}
 8014204:	e037883a 	mov	sp,fp
 8014208:	dfc00117 	ldw	ra,4(sp)
 801420c:	df000017 	ldw	fp,0(sp)
 8014210:	dec00204 	addi	sp,sp,8
 8014214:	f800283a 	ret

08014218 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 8014218:	defffb04 	addi	sp,sp,-20
 801421c:	dfc00415 	stw	ra,16(sp)
 8014220:	df000315 	stw	fp,12(sp)
 8014224:	df000304 	addi	fp,sp,12
 8014228:	e13ffd15 	stw	r4,-12(fp)
 801422c:	e17ffe15 	stw	r5,-8(fp)
 8014230:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 8014234:	e0bffd17 	ldw	r2,-12(fp)
 8014238:	10800b17 	ldw	r2,44(r2)
 801423c:	108002a0 	cmpeqi	r2,r2,10
 8014240:	1000021e 	bne	r2,zero,801424c <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 8014244:	00bffa84 	movi	r2,-22
 8014248:	00000406 	br	801425c <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 801424c:	e1bfff17 	ldw	r6,-4(fp)
 8014250:	e17ffe17 	ldw	r5,-8(fp)
 8014254:	e13ffd17 	ldw	r4,-12(fp)
 8014258:	8013c900 	call	8013c90 <alt_up_av_config_read_data>
}
 801425c:	e037883a 	mov	sp,fp
 8014260:	dfc00117 	ldw	ra,4(sp)
 8014264:	df000017 	ldw	fp,0(sp)
 8014268:	dec00204 	addi	sp,sp,8
 801426c:	f800283a 	ret

08014270 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8014270:	defffb04 	addi	sp,sp,-20
 8014274:	dfc00415 	stw	ra,16(sp)
 8014278:	df000315 	stw	fp,12(sp)
 801427c:	df000304 	addi	fp,sp,12
 8014280:	e13ffd15 	stw	r4,-12(fp)
 8014284:	e17ffe15 	stw	r5,-8(fp)
 8014288:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 801428c:	e0bffd17 	ldw	r2,-12(fp)
 8014290:	10800b17 	ldw	r2,44(r2)
 8014294:	108002a0 	cmpeqi	r2,r2,10
 8014298:	1000021e 	bne	r2,zero,80142a4 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 801429c:	00bffa84 	movi	r2,-22
 80142a0:	00000406 	br	80142b4 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 80142a4:	e1bfff17 	ldw	r6,-4(fp)
 80142a8:	e17ffe17 	ldw	r5,-8(fp)
 80142ac:	e13ffd17 	ldw	r4,-12(fp)
 80142b0:	8013c2c0 	call	8013c2c <alt_up_av_config_write_data>
}
 80142b4:	e037883a 	mov	sp,fp
 80142b8:	dfc00117 	ldw	ra,4(sp)
 80142bc:	df000017 	ldw	fp,0(sp)
 80142c0:	dec00204 	addi	sp,sp,8
 80142c4:	f800283a 	ret

080142c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80142c8:	defff504 	addi	sp,sp,-44
 80142cc:	df000a15 	stw	fp,40(sp)
 80142d0:	df000a04 	addi	fp,sp,40
 80142d4:	e13ffc15 	stw	r4,-16(fp)
 80142d8:	e17ffd15 	stw	r5,-12(fp)
 80142dc:	e1bffe15 	stw	r6,-8(fp)
 80142e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80142e4:	e03ff615 	stw	zero,-40(fp)
 80142e8:	d0a70e17 	ldw	r2,-25544(gp)
  
  if (alt_ticks_per_second ())
 80142ec:	10003c26 	beq	r2,zero,80143e0 <alt_alarm_start+0x118>
  {
    if (alarm)
 80142f0:	e0bffc17 	ldw	r2,-16(fp)
 80142f4:	10003826 	beq	r2,zero,80143d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80142f8:	e0bffc17 	ldw	r2,-16(fp)
 80142fc:	e0fffe17 	ldw	r3,-8(fp)
 8014300:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8014304:	e0bffc17 	ldw	r2,-16(fp)
 8014308:	e0ffff17 	ldw	r3,-4(fp)
 801430c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014310:	0005303a 	rdctl	r2,status
 8014314:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014318:	e0fff917 	ldw	r3,-28(fp)
 801431c:	00bfff84 	movi	r2,-2
 8014320:	1884703a 	and	r2,r3,r2
 8014324:	1001703a 	wrctl	status,r2
  
  return context;
 8014328:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 801432c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8014330:	d0a70f17 	ldw	r2,-25540(gp)
      
      current_nticks = alt_nticks();
 8014334:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8014338:	e0fffd17 	ldw	r3,-12(fp)
 801433c:	e0bff617 	ldw	r2,-40(fp)
 8014340:	1885883a 	add	r2,r3,r2
 8014344:	10c00044 	addi	r3,r2,1
 8014348:	e0bffc17 	ldw	r2,-16(fp)
 801434c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8014350:	e0bffc17 	ldw	r2,-16(fp)
 8014354:	10c00217 	ldw	r3,8(r2)
 8014358:	e0bff617 	ldw	r2,-40(fp)
 801435c:	1880042e 	bgeu	r3,r2,8014370 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8014360:	e0bffc17 	ldw	r2,-16(fp)
 8014364:	00c00044 	movi	r3,1
 8014368:	10c00405 	stb	r3,16(r2)
 801436c:	00000206 	br	8014378 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8014370:	e0bffc17 	ldw	r2,-16(fp)
 8014374:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8014378:	e0bffc17 	ldw	r2,-16(fp)
 801437c:	d0e01304 	addi	r3,gp,-32692
 8014380:	e0fffa15 	stw	r3,-24(fp)
 8014384:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014388:	e0bffb17 	ldw	r2,-20(fp)
 801438c:	e0fffa17 	ldw	r3,-24(fp)
 8014390:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014394:	e0bffa17 	ldw	r2,-24(fp)
 8014398:	10c00017 	ldw	r3,0(r2)
 801439c:	e0bffb17 	ldw	r2,-20(fp)
 80143a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80143a4:	e0bffa17 	ldw	r2,-24(fp)
 80143a8:	10800017 	ldw	r2,0(r2)
 80143ac:	e0fffb17 	ldw	r3,-20(fp)
 80143b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80143b4:	e0bffa17 	ldw	r2,-24(fp)
 80143b8:	e0fffb17 	ldw	r3,-20(fp)
 80143bc:	10c00015 	stw	r3,0(r2)
 80143c0:	e0bff817 	ldw	r2,-32(fp)
 80143c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80143c8:	e0bff717 	ldw	r2,-36(fp)
 80143cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80143d0:	0005883a 	mov	r2,zero
 80143d4:	00000306 	br	80143e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80143d8:	00bffa84 	movi	r2,-22
 80143dc:	00000106 	br	80143e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80143e0:	00bfde84 	movi	r2,-134
  }
}
 80143e4:	e037883a 	mov	sp,fp
 80143e8:	df000017 	ldw	fp,0(sp)
 80143ec:	dec00104 	addi	sp,sp,4
 80143f0:	f800283a 	ret

080143f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80143f4:	defffa04 	addi	sp,sp,-24
 80143f8:	dfc00515 	stw	ra,20(sp)
 80143fc:	df000415 	stw	fp,16(sp)
 8014400:	df000404 	addi	fp,sp,16
 8014404:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8014408:	008000c4 	movi	r2,3
 801440c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8014410:	e0fffd17 	ldw	r3,-12(fp)
 8014414:	008003f4 	movhi	r2,15
 8014418:	10909004 	addi	r2,r2,16960
 801441c:	1885383a 	mul	r2,r3,r2
 8014420:	100b883a 	mov	r5,r2
 8014424:	0100bef4 	movhi	r4,763
 8014428:	213c2004 	addi	r4,r4,-3968
 801442c:	800333c0 	call	800333c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8014430:	100b883a 	mov	r5,r2
 8014434:	01200034 	movhi	r4,32768
 8014438:	213fffc4 	addi	r4,r4,-1
 801443c:	800333c0 	call	800333c <__udivsi3>
 8014440:	100b883a 	mov	r5,r2
 8014444:	e13fff17 	ldw	r4,-4(fp)
 8014448:	800333c0 	call	800333c <__udivsi3>
 801444c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8014450:	e0bffe17 	ldw	r2,-8(fp)
 8014454:	10002a26 	beq	r2,zero,8014500 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8014458:	e03ffc15 	stw	zero,-16(fp)
 801445c:	00001706 	br	80144bc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8014460:	00a00034 	movhi	r2,32768
 8014464:	10bfffc4 	addi	r2,r2,-1
 8014468:	10bfffc4 	addi	r2,r2,-1
 801446c:	103ffe1e 	bne	r2,zero,8014468 <__alt_data_end+0xfc014468>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8014470:	e0fffd17 	ldw	r3,-12(fp)
 8014474:	008003f4 	movhi	r2,15
 8014478:	10909004 	addi	r2,r2,16960
 801447c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8014480:	100b883a 	mov	r5,r2
 8014484:	0100bef4 	movhi	r4,763
 8014488:	213c2004 	addi	r4,r4,-3968
 801448c:	800333c0 	call	800333c <__udivsi3>
 8014490:	100b883a 	mov	r5,r2
 8014494:	01200034 	movhi	r4,32768
 8014498:	213fffc4 	addi	r4,r4,-1
 801449c:	800333c0 	call	800333c <__udivsi3>
 80144a0:	1007883a 	mov	r3,r2
 80144a4:	e0bfff17 	ldw	r2,-4(fp)
 80144a8:	10c5c83a 	sub	r2,r2,r3
 80144ac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80144b0:	e0bffc17 	ldw	r2,-16(fp)
 80144b4:	10800044 	addi	r2,r2,1
 80144b8:	e0bffc15 	stw	r2,-16(fp)
 80144bc:	e0fffc17 	ldw	r3,-16(fp)
 80144c0:	e0bffe17 	ldw	r2,-8(fp)
 80144c4:	18bfe616 	blt	r3,r2,8014460 <__alt_data_end+0xfc014460>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80144c8:	e0fffd17 	ldw	r3,-12(fp)
 80144cc:	008003f4 	movhi	r2,15
 80144d0:	10909004 	addi	r2,r2,16960
 80144d4:	1885383a 	mul	r2,r3,r2
 80144d8:	100b883a 	mov	r5,r2
 80144dc:	0100bef4 	movhi	r4,763
 80144e0:	213c2004 	addi	r4,r4,-3968
 80144e4:	800333c0 	call	800333c <__udivsi3>
 80144e8:	1007883a 	mov	r3,r2
 80144ec:	e0bfff17 	ldw	r2,-4(fp)
 80144f0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80144f4:	10bfffc4 	addi	r2,r2,-1
 80144f8:	103ffe1e 	bne	r2,zero,80144f4 <__alt_data_end+0xfc0144f4>
 80144fc:	00000d06 	br	8014534 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014500:	e0fffd17 	ldw	r3,-12(fp)
 8014504:	008003f4 	movhi	r2,15
 8014508:	10909004 	addi	r2,r2,16960
 801450c:	1885383a 	mul	r2,r3,r2
 8014510:	100b883a 	mov	r5,r2
 8014514:	0100bef4 	movhi	r4,763
 8014518:	213c2004 	addi	r4,r4,-3968
 801451c:	800333c0 	call	800333c <__udivsi3>
 8014520:	1007883a 	mov	r3,r2
 8014524:	e0bfff17 	ldw	r2,-4(fp)
 8014528:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801452c:	10bfffc4 	addi	r2,r2,-1
 8014530:	00bffe16 	blt	zero,r2,801452c <__alt_data_end+0xfc01452c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8014534:	0005883a 	mov	r2,zero
}
 8014538:	e037883a 	mov	sp,fp
 801453c:	dfc00117 	ldw	ra,4(sp)
 8014540:	df000017 	ldw	fp,0(sp)
 8014544:	dec00204 	addi	sp,sp,8
 8014548:	f800283a 	ret

0801454c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 801454c:	defffe04 	addi	sp,sp,-8
 8014550:	df000115 	stw	fp,4(sp)
 8014554:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8014558:	e03fff15 	stw	zero,-4(fp)
 801455c:	00000506 	br	8014574 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8014560:	e0bfff17 	ldw	r2,-4(fp)
 8014564:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8014568:	e0bfff17 	ldw	r2,-4(fp)
 801456c:	10800804 	addi	r2,r2,32
 8014570:	e0bfff15 	stw	r2,-4(fp)
 8014574:	e0bfff17 	ldw	r2,-4(fp)
 8014578:	10820030 	cmpltui	r2,r2,2048
 801457c:	103ff81e 	bne	r2,zero,8014560 <__alt_data_end+0xfc014560>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8014580:	0001883a 	nop
 8014584:	e037883a 	mov	sp,fp
 8014588:	df000017 	ldw	fp,0(sp)
 801458c:	dec00104 	addi	sp,sp,4
 8014590:	f800283a 	ret

08014594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014594:	defffe04 	addi	sp,sp,-8
 8014598:	dfc00115 	stw	ra,4(sp)
 801459c:	df000015 	stw	fp,0(sp)
 80145a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80145a4:	d0a00c17 	ldw	r2,-32720(gp)
 80145a8:	10000326 	beq	r2,zero,80145b8 <alt_get_errno+0x24>
 80145ac:	d0a00c17 	ldw	r2,-32720(gp)
 80145b0:	103ee83a 	callr	r2
 80145b4:	00000106 	br	80145bc <alt_get_errno+0x28>
 80145b8:	d0a70904 	addi	r2,gp,-25564
}
 80145bc:	e037883a 	mov	sp,fp
 80145c0:	dfc00117 	ldw	ra,4(sp)
 80145c4:	df000017 	ldw	fp,0(sp)
 80145c8:	dec00204 	addi	sp,sp,8
 80145cc:	f800283a 	ret

080145d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80145d0:	defffa04 	addi	sp,sp,-24
 80145d4:	dfc00515 	stw	ra,20(sp)
 80145d8:	df000415 	stw	fp,16(sp)
 80145dc:	df000404 	addi	fp,sp,16
 80145e0:	e13ffe15 	stw	r4,-8(fp)
 80145e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80145e8:	e0bffe17 	ldw	r2,-8(fp)
 80145ec:	10000326 	beq	r2,zero,80145fc <alt_dev_llist_insert+0x2c>
 80145f0:	e0bffe17 	ldw	r2,-8(fp)
 80145f4:	10800217 	ldw	r2,8(r2)
 80145f8:	1000061e 	bne	r2,zero,8014614 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80145fc:	80145940 	call	8014594 <alt_get_errno>
 8014600:	1007883a 	mov	r3,r2
 8014604:	00800584 	movi	r2,22
 8014608:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801460c:	00bffa84 	movi	r2,-22
 8014610:	00001306 	br	8014660 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8014614:	e0bffe17 	ldw	r2,-8(fp)
 8014618:	e0ffff17 	ldw	r3,-4(fp)
 801461c:	e0fffc15 	stw	r3,-16(fp)
 8014620:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014624:	e0bffd17 	ldw	r2,-12(fp)
 8014628:	e0fffc17 	ldw	r3,-16(fp)
 801462c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014630:	e0bffc17 	ldw	r2,-16(fp)
 8014634:	10c00017 	ldw	r3,0(r2)
 8014638:	e0bffd17 	ldw	r2,-12(fp)
 801463c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8014640:	e0bffc17 	ldw	r2,-16(fp)
 8014644:	10800017 	ldw	r2,0(r2)
 8014648:	e0fffd17 	ldw	r3,-12(fp)
 801464c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014650:	e0bffc17 	ldw	r2,-16(fp)
 8014654:	e0fffd17 	ldw	r3,-12(fp)
 8014658:	10c00015 	stw	r3,0(r2)

  return 0;  
 801465c:	0005883a 	mov	r2,zero
}
 8014660:	e037883a 	mov	sp,fp
 8014664:	dfc00117 	ldw	ra,4(sp)
 8014668:	df000017 	ldw	fp,0(sp)
 801466c:	dec00204 	addi	sp,sp,8
 8014670:	f800283a 	ret

08014674 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8014674:	defffd04 	addi	sp,sp,-12
 8014678:	dfc00215 	stw	ra,8(sp)
 801467c:	df000115 	stw	fp,4(sp)
 8014680:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014684:	00820074 	movhi	r2,2049
 8014688:	10954f04 	addi	r2,r2,21820
 801468c:	e0bfff15 	stw	r2,-4(fp)
 8014690:	00000606 	br	80146ac <_do_ctors+0x38>
        (*ctor) (); 
 8014694:	e0bfff17 	ldw	r2,-4(fp)
 8014698:	10800017 	ldw	r2,0(r2)
 801469c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80146a0:	e0bfff17 	ldw	r2,-4(fp)
 80146a4:	10bfff04 	addi	r2,r2,-4
 80146a8:	e0bfff15 	stw	r2,-4(fp)
 80146ac:	e0ffff17 	ldw	r3,-4(fp)
 80146b0:	00820074 	movhi	r2,2049
 80146b4:	10955004 	addi	r2,r2,21824
 80146b8:	18bff62e 	bgeu	r3,r2,8014694 <__alt_data_end+0xfc014694>
        (*ctor) (); 
}
 80146bc:	0001883a 	nop
 80146c0:	e037883a 	mov	sp,fp
 80146c4:	dfc00117 	ldw	ra,4(sp)
 80146c8:	df000017 	ldw	fp,0(sp)
 80146cc:	dec00204 	addi	sp,sp,8
 80146d0:	f800283a 	ret

080146d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80146d4:	defffd04 	addi	sp,sp,-12
 80146d8:	dfc00215 	stw	ra,8(sp)
 80146dc:	df000115 	stw	fp,4(sp)
 80146e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80146e4:	00820074 	movhi	r2,2049
 80146e8:	10954f04 	addi	r2,r2,21820
 80146ec:	e0bfff15 	stw	r2,-4(fp)
 80146f0:	00000606 	br	801470c <_do_dtors+0x38>
        (*dtor) (); 
 80146f4:	e0bfff17 	ldw	r2,-4(fp)
 80146f8:	10800017 	ldw	r2,0(r2)
 80146fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014700:	e0bfff17 	ldw	r2,-4(fp)
 8014704:	10bfff04 	addi	r2,r2,-4
 8014708:	e0bfff15 	stw	r2,-4(fp)
 801470c:	e0ffff17 	ldw	r3,-4(fp)
 8014710:	00820074 	movhi	r2,2049
 8014714:	10955004 	addi	r2,r2,21824
 8014718:	18bff62e 	bgeu	r3,r2,80146f4 <__alt_data_end+0xfc0146f4>
        (*dtor) (); 
}
 801471c:	0001883a 	nop
 8014720:	e037883a 	mov	sp,fp
 8014724:	dfc00117 	ldw	ra,4(sp)
 8014728:	df000017 	ldw	fp,0(sp)
 801472c:	dec00204 	addi	sp,sp,8
 8014730:	f800283a 	ret

08014734 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8014734:	defffa04 	addi	sp,sp,-24
 8014738:	dfc00515 	stw	ra,20(sp)
 801473c:	df000415 	stw	fp,16(sp)
 8014740:	df000404 	addi	fp,sp,16
 8014744:	e13ffe15 	stw	r4,-8(fp)
 8014748:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801474c:	e0bfff17 	ldw	r2,-4(fp)
 8014750:	10800017 	ldw	r2,0(r2)
 8014754:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8014758:	e13ffe17 	ldw	r4,-8(fp)
 801475c:	80072c00 	call	80072c0 <strlen>
 8014760:	10800044 	addi	r2,r2,1
 8014764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014768:	00000d06 	br	80147a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801476c:	e0bffc17 	ldw	r2,-16(fp)
 8014770:	10800217 	ldw	r2,8(r2)
 8014774:	e0fffd17 	ldw	r3,-12(fp)
 8014778:	180d883a 	mov	r6,r3
 801477c:	e17ffe17 	ldw	r5,-8(fp)
 8014780:	1009883a 	mov	r4,r2
 8014784:	80151f80 	call	80151f8 <memcmp>
 8014788:	1000021e 	bne	r2,zero,8014794 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801478c:	e0bffc17 	ldw	r2,-16(fp)
 8014790:	00000706 	br	80147b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8014794:	e0bffc17 	ldw	r2,-16(fp)
 8014798:	10800017 	ldw	r2,0(r2)
 801479c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80147a0:	e0fffc17 	ldw	r3,-16(fp)
 80147a4:	e0bfff17 	ldw	r2,-4(fp)
 80147a8:	18bff01e 	bne	r3,r2,801476c <__alt_data_end+0xfc01476c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80147ac:	0005883a 	mov	r2,zero
}
 80147b0:	e037883a 	mov	sp,fp
 80147b4:	dfc00117 	ldw	ra,4(sp)
 80147b8:	df000017 	ldw	fp,0(sp)
 80147bc:	dec00204 	addi	sp,sp,8
 80147c0:	f800283a 	ret

080147c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80147c4:	defffe04 	addi	sp,sp,-8
 80147c8:	dfc00115 	stw	ra,4(sp)
 80147cc:	df000015 	stw	fp,0(sp)
 80147d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80147d4:	01440004 	movi	r5,4096
 80147d8:	0009883a 	mov	r4,zero
 80147dc:	80150800 	call	8015080 <alt_icache_flush>
#endif
}
 80147e0:	0001883a 	nop
 80147e4:	e037883a 	mov	sp,fp
 80147e8:	dfc00117 	ldw	ra,4(sp)
 80147ec:	df000017 	ldw	fp,0(sp)
 80147f0:	dec00204 	addi	sp,sp,8
 80147f4:	f800283a 	ret

080147f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80147f8:	defff904 	addi	sp,sp,-28
 80147fc:	dfc00615 	stw	ra,24(sp)
 8014800:	df000515 	stw	fp,20(sp)
 8014804:	df000504 	addi	fp,sp,20
 8014808:	e13ffc15 	stw	r4,-16(fp)
 801480c:	e17ffd15 	stw	r5,-12(fp)
 8014810:	e1bffe15 	stw	r6,-8(fp)
 8014814:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8014818:	e1bfff17 	ldw	r6,-4(fp)
 801481c:	e17ffe17 	ldw	r5,-8(fp)
 8014820:	e13ffd17 	ldw	r4,-12(fp)
 8014824:	8014bb80 	call	8014bb8 <open>
 8014828:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801482c:	e0bffb17 	ldw	r2,-20(fp)
 8014830:	10001c16 	blt	r2,zero,80148a4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8014834:	00820074 	movhi	r2,2049
 8014838:	10994a04 	addi	r2,r2,25896
 801483c:	e0fffb17 	ldw	r3,-20(fp)
 8014840:	18c00324 	muli	r3,r3,12
 8014844:	10c5883a 	add	r2,r2,r3
 8014848:	10c00017 	ldw	r3,0(r2)
 801484c:	e0bffc17 	ldw	r2,-16(fp)
 8014850:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8014854:	00820074 	movhi	r2,2049
 8014858:	10994a04 	addi	r2,r2,25896
 801485c:	e0fffb17 	ldw	r3,-20(fp)
 8014860:	18c00324 	muli	r3,r3,12
 8014864:	10c5883a 	add	r2,r2,r3
 8014868:	10800104 	addi	r2,r2,4
 801486c:	10c00017 	ldw	r3,0(r2)
 8014870:	e0bffc17 	ldw	r2,-16(fp)
 8014874:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8014878:	00820074 	movhi	r2,2049
 801487c:	10994a04 	addi	r2,r2,25896
 8014880:	e0fffb17 	ldw	r3,-20(fp)
 8014884:	18c00324 	muli	r3,r3,12
 8014888:	10c5883a 	add	r2,r2,r3
 801488c:	10800204 	addi	r2,r2,8
 8014890:	10c00017 	ldw	r3,0(r2)
 8014894:	e0bffc17 	ldw	r2,-16(fp)
 8014898:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801489c:	e13ffb17 	ldw	r4,-20(fp)
 80148a0:	80119b40 	call	80119b4 <alt_release_fd>
  }
} 
 80148a4:	0001883a 	nop
 80148a8:	e037883a 	mov	sp,fp
 80148ac:	dfc00117 	ldw	ra,4(sp)
 80148b0:	df000017 	ldw	fp,0(sp)
 80148b4:	dec00204 	addi	sp,sp,8
 80148b8:	f800283a 	ret

080148bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80148bc:	defffb04 	addi	sp,sp,-20
 80148c0:	dfc00415 	stw	ra,16(sp)
 80148c4:	df000315 	stw	fp,12(sp)
 80148c8:	df000304 	addi	fp,sp,12
 80148cc:	e13ffd15 	stw	r4,-12(fp)
 80148d0:	e17ffe15 	stw	r5,-8(fp)
 80148d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80148d8:	01c07fc4 	movi	r7,511
 80148dc:	01800044 	movi	r6,1
 80148e0:	e17ffd17 	ldw	r5,-12(fp)
 80148e4:	01020074 	movhi	r4,2049
 80148e8:	21194d04 	addi	r4,r4,25908
 80148ec:	80147f80 	call	80147f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80148f0:	01c07fc4 	movi	r7,511
 80148f4:	000d883a 	mov	r6,zero
 80148f8:	e17ffe17 	ldw	r5,-8(fp)
 80148fc:	01020074 	movhi	r4,2049
 8014900:	21194a04 	addi	r4,r4,25896
 8014904:	80147f80 	call	80147f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8014908:	01c07fc4 	movi	r7,511
 801490c:	01800044 	movi	r6,1
 8014910:	e17fff17 	ldw	r5,-4(fp)
 8014914:	01020074 	movhi	r4,2049
 8014918:	21195004 	addi	r4,r4,25920
 801491c:	80147f80 	call	80147f8 <alt_open_fd>
}  
 8014920:	0001883a 	nop
 8014924:	e037883a 	mov	sp,fp
 8014928:	dfc00117 	ldw	ra,4(sp)
 801492c:	df000017 	ldw	fp,0(sp)
 8014930:	dec00204 	addi	sp,sp,8
 8014934:	f800283a 	ret

08014938 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 8014938:	defff004 	addi	sp,sp,-64
 801493c:	df000f15 	stw	fp,60(sp)
 8014940:	df000f04 	addi	fp,sp,60
 8014944:	e13ffd15 	stw	r4,-12(fp)
 8014948:	e17ffe15 	stw	r5,-8(fp)
 801494c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 8014950:	00bffa84 	movi	r2,-22
 8014954:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8014958:	e0bffd17 	ldw	r2,-12(fp)
 801495c:	10800828 	cmpgeui	r2,r2,32
 8014960:	1000501e 	bne	r2,zero,8014aa4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014964:	0005303a 	rdctl	r2,status
 8014968:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801496c:	e0fff617 	ldw	r3,-40(fp)
 8014970:	00bfff84 	movi	r2,-2
 8014974:	1884703a 	and	r2,r3,r2
 8014978:	1001703a 	wrctl	status,r2
  
  return context;
 801497c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8014980:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 8014984:	008200b4 	movhi	r2,2050
 8014988:	10a50b04 	addi	r2,r2,-27604
 801498c:	e0fffd17 	ldw	r3,-12(fp)
 8014990:	180690fa 	slli	r3,r3,3
 8014994:	10c5883a 	add	r2,r2,r3
 8014998:	e0ffff17 	ldw	r3,-4(fp)
 801499c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 80149a0:	008200b4 	movhi	r2,2050
 80149a4:	10a50b04 	addi	r2,r2,-27604
 80149a8:	e0fffd17 	ldw	r3,-12(fp)
 80149ac:	180690fa 	slli	r3,r3,3
 80149b0:	10c5883a 	add	r2,r2,r3
 80149b4:	10800104 	addi	r2,r2,4
 80149b8:	e0fffe17 	ldw	r3,-8(fp)
 80149bc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 80149c0:	e0bfff17 	ldw	r2,-4(fp)
 80149c4:	10001926 	beq	r2,zero,8014a2c <alt_irq_register+0xf4>
 80149c8:	e0bffd17 	ldw	r2,-12(fp)
 80149cc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80149d0:	0005303a 	rdctl	r2,status
 80149d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80149d8:	e0fff717 	ldw	r3,-36(fp)
 80149dc:	00bfff84 	movi	r2,-2
 80149e0:	1884703a 	and	r2,r3,r2
 80149e4:	1001703a 	wrctl	status,r2
  
  return context;
 80149e8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80149ec:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 80149f0:	00c00044 	movi	r3,1
 80149f4:	e0bff217 	ldw	r2,-56(fp)
 80149f8:	1884983a 	sll	r2,r3,r2
 80149fc:	1007883a 	mov	r3,r2
 8014a00:	d0a70d17 	ldw	r2,-25548(gp)
 8014a04:	1884b03a 	or	r2,r3,r2
 8014a08:	d0a70d15 	stw	r2,-25548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014a0c:	d0a70d17 	ldw	r2,-25548(gp)
 8014a10:	100170fa 	wrctl	ienable,r2
 8014a14:	e0bff817 	ldw	r2,-32(fp)
 8014a18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014a1c:	e0bff917 	ldw	r2,-28(fp)
 8014a20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014a24:	0005883a 	mov	r2,zero
 8014a28:	00001906 	br	8014a90 <alt_irq_register+0x158>
 8014a2c:	e0bffd17 	ldw	r2,-12(fp)
 8014a30:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014a34:	0005303a 	rdctl	r2,status
 8014a38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014a3c:	e0fffa17 	ldw	r3,-24(fp)
 8014a40:	00bfff84 	movi	r2,-2
 8014a44:	1884703a 	and	r2,r3,r2
 8014a48:	1001703a 	wrctl	status,r2
  
  return context;
 8014a4c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014a50:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8014a54:	00c00044 	movi	r3,1
 8014a58:	e0bff417 	ldw	r2,-48(fp)
 8014a5c:	1884983a 	sll	r2,r3,r2
 8014a60:	0084303a 	nor	r2,zero,r2
 8014a64:	1007883a 	mov	r3,r2
 8014a68:	d0a70d17 	ldw	r2,-25548(gp)
 8014a6c:	1884703a 	and	r2,r3,r2
 8014a70:	d0a70d15 	stw	r2,-25548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014a74:	d0a70d17 	ldw	r2,-25548(gp)
 8014a78:	100170fa 	wrctl	ienable,r2
 8014a7c:	e0bffb17 	ldw	r2,-20(fp)
 8014a80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014a84:	e0bffc17 	ldw	r2,-16(fp)
 8014a88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014a8c:	0005883a 	mov	r2,zero
 8014a90:	e0bff115 	stw	r2,-60(fp)
 8014a94:	e0bff317 	ldw	r2,-52(fp)
 8014a98:	e0bff515 	stw	r2,-44(fp)
 8014a9c:	e0bff517 	ldw	r2,-44(fp)
 8014aa0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 8014aa4:	e0bff117 	ldw	r2,-60(fp)
}
 8014aa8:	e037883a 	mov	sp,fp
 8014aac:	df000017 	ldw	fp,0(sp)
 8014ab0:	dec00104 	addi	sp,sp,4
 8014ab4:	f800283a 	ret

08014ab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014ab8:	defffe04 	addi	sp,sp,-8
 8014abc:	dfc00115 	stw	ra,4(sp)
 8014ac0:	df000015 	stw	fp,0(sp)
 8014ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014ac8:	d0a00c17 	ldw	r2,-32720(gp)
 8014acc:	10000326 	beq	r2,zero,8014adc <alt_get_errno+0x24>
 8014ad0:	d0a00c17 	ldw	r2,-32720(gp)
 8014ad4:	103ee83a 	callr	r2
 8014ad8:	00000106 	br	8014ae0 <alt_get_errno+0x28>
 8014adc:	d0a70904 	addi	r2,gp,-25564
}
 8014ae0:	e037883a 	mov	sp,fp
 8014ae4:	dfc00117 	ldw	ra,4(sp)
 8014ae8:	df000017 	ldw	fp,0(sp)
 8014aec:	dec00204 	addi	sp,sp,8
 8014af0:	f800283a 	ret

08014af4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8014af4:	defffd04 	addi	sp,sp,-12
 8014af8:	df000215 	stw	fp,8(sp)
 8014afc:	df000204 	addi	fp,sp,8
 8014b00:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8014b04:	e0bfff17 	ldw	r2,-4(fp)
 8014b08:	10800217 	ldw	r2,8(r2)
 8014b0c:	10d00034 	orhi	r3,r2,16384
 8014b10:	e0bfff17 	ldw	r2,-4(fp)
 8014b14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014b18:	e03ffe15 	stw	zero,-8(fp)
 8014b1c:	00001d06 	br	8014b94 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014b20:	00820074 	movhi	r2,2049
 8014b24:	10994a04 	addi	r2,r2,25896
 8014b28:	e0fffe17 	ldw	r3,-8(fp)
 8014b2c:	18c00324 	muli	r3,r3,12
 8014b30:	10c5883a 	add	r2,r2,r3
 8014b34:	10c00017 	ldw	r3,0(r2)
 8014b38:	e0bfff17 	ldw	r2,-4(fp)
 8014b3c:	10800017 	ldw	r2,0(r2)
 8014b40:	1880111e 	bne	r3,r2,8014b88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014b44:	00820074 	movhi	r2,2049
 8014b48:	10994a04 	addi	r2,r2,25896
 8014b4c:	e0fffe17 	ldw	r3,-8(fp)
 8014b50:	18c00324 	muli	r3,r3,12
 8014b54:	10c5883a 	add	r2,r2,r3
 8014b58:	10800204 	addi	r2,r2,8
 8014b5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014b60:	1000090e 	bge	r2,zero,8014b88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8014b64:	e0bffe17 	ldw	r2,-8(fp)
 8014b68:	10c00324 	muli	r3,r2,12
 8014b6c:	00820074 	movhi	r2,2049
 8014b70:	10994a04 	addi	r2,r2,25896
 8014b74:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014b78:	e0bfff17 	ldw	r2,-4(fp)
 8014b7c:	18800226 	beq	r3,r2,8014b88 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8014b80:	00bffcc4 	movi	r2,-13
 8014b84:	00000806 	br	8014ba8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014b88:	e0bffe17 	ldw	r2,-8(fp)
 8014b8c:	10800044 	addi	r2,r2,1
 8014b90:	e0bffe15 	stw	r2,-8(fp)
 8014b94:	d0a00b17 	ldw	r2,-32724(gp)
 8014b98:	1007883a 	mov	r3,r2
 8014b9c:	e0bffe17 	ldw	r2,-8(fp)
 8014ba0:	18bfdf2e 	bgeu	r3,r2,8014b20 <__alt_data_end+0xfc014b20>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8014ba4:	0005883a 	mov	r2,zero
}
 8014ba8:	e037883a 	mov	sp,fp
 8014bac:	df000017 	ldw	fp,0(sp)
 8014bb0:	dec00104 	addi	sp,sp,4
 8014bb4:	f800283a 	ret

08014bb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8014bb8:	defff604 	addi	sp,sp,-40
 8014bbc:	dfc00915 	stw	ra,36(sp)
 8014bc0:	df000815 	stw	fp,32(sp)
 8014bc4:	df000804 	addi	fp,sp,32
 8014bc8:	e13ffd15 	stw	r4,-12(fp)
 8014bcc:	e17ffe15 	stw	r5,-8(fp)
 8014bd0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8014bd4:	00bfffc4 	movi	r2,-1
 8014bd8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8014bdc:	00bffb44 	movi	r2,-19
 8014be0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8014be4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8014be8:	d1600904 	addi	r5,gp,-32732
 8014bec:	e13ffd17 	ldw	r4,-12(fp)
 8014bf0:	80147340 	call	8014734 <alt_find_dev>
 8014bf4:	e0bff815 	stw	r2,-32(fp)
 8014bf8:	e0bff817 	ldw	r2,-32(fp)
 8014bfc:	1000051e 	bne	r2,zero,8014c14 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8014c00:	e13ffd17 	ldw	r4,-12(fp)
 8014c04:	8014ed40 	call	8014ed4 <alt_find_file>
 8014c08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8014c0c:	00800044 	movi	r2,1
 8014c10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8014c14:	e0bff817 	ldw	r2,-32(fp)
 8014c18:	10002926 	beq	r2,zero,8014cc0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8014c1c:	e13ff817 	ldw	r4,-32(fp)
 8014c20:	8014fdc0 	call	8014fdc <alt_get_fd>
 8014c24:	e0bff915 	stw	r2,-28(fp)
 8014c28:	e0bff917 	ldw	r2,-28(fp)
 8014c2c:	1000030e 	bge	r2,zero,8014c3c <open+0x84>
    {
      status = index;
 8014c30:	e0bff917 	ldw	r2,-28(fp)
 8014c34:	e0bffa15 	stw	r2,-24(fp)
 8014c38:	00002306 	br	8014cc8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8014c3c:	e0bff917 	ldw	r2,-28(fp)
 8014c40:	10c00324 	muli	r3,r2,12
 8014c44:	00820074 	movhi	r2,2049
 8014c48:	10994a04 	addi	r2,r2,25896
 8014c4c:	1885883a 	add	r2,r3,r2
 8014c50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8014c54:	e0fffe17 	ldw	r3,-8(fp)
 8014c58:	00900034 	movhi	r2,16384
 8014c5c:	10bfffc4 	addi	r2,r2,-1
 8014c60:	1886703a 	and	r3,r3,r2
 8014c64:	e0bffc17 	ldw	r2,-16(fp)
 8014c68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8014c6c:	e0bffb17 	ldw	r2,-20(fp)
 8014c70:	1000051e 	bne	r2,zero,8014c88 <open+0xd0>
 8014c74:	e13ffc17 	ldw	r4,-16(fp)
 8014c78:	8014af40 	call	8014af4 <alt_file_locked>
 8014c7c:	e0bffa15 	stw	r2,-24(fp)
 8014c80:	e0bffa17 	ldw	r2,-24(fp)
 8014c84:	10001016 	blt	r2,zero,8014cc8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8014c88:	e0bff817 	ldw	r2,-32(fp)
 8014c8c:	10800317 	ldw	r2,12(r2)
 8014c90:	10000826 	beq	r2,zero,8014cb4 <open+0xfc>
 8014c94:	e0bff817 	ldw	r2,-32(fp)
 8014c98:	10800317 	ldw	r2,12(r2)
 8014c9c:	e1ffff17 	ldw	r7,-4(fp)
 8014ca0:	e1bffe17 	ldw	r6,-8(fp)
 8014ca4:	e17ffd17 	ldw	r5,-12(fp)
 8014ca8:	e13ffc17 	ldw	r4,-16(fp)
 8014cac:	103ee83a 	callr	r2
 8014cb0:	00000106 	br	8014cb8 <open+0x100>
 8014cb4:	0005883a 	mov	r2,zero
 8014cb8:	e0bffa15 	stw	r2,-24(fp)
 8014cbc:	00000206 	br	8014cc8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8014cc0:	00bffb44 	movi	r2,-19
 8014cc4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8014cc8:	e0bffa17 	ldw	r2,-24(fp)
 8014ccc:	1000090e 	bge	r2,zero,8014cf4 <open+0x13c>
  {
    alt_release_fd (index);  
 8014cd0:	e13ff917 	ldw	r4,-28(fp)
 8014cd4:	80119b40 	call	80119b4 <alt_release_fd>
    ALT_ERRNO = -status;
 8014cd8:	8014ab80 	call	8014ab8 <alt_get_errno>
 8014cdc:	1007883a 	mov	r3,r2
 8014ce0:	e0bffa17 	ldw	r2,-24(fp)
 8014ce4:	0085c83a 	sub	r2,zero,r2
 8014ce8:	18800015 	stw	r2,0(r3)
    return -1;
 8014cec:	00bfffc4 	movi	r2,-1
 8014cf0:	00000106 	br	8014cf8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8014cf4:	e0bff917 	ldw	r2,-28(fp)
}
 8014cf8:	e037883a 	mov	sp,fp
 8014cfc:	dfc00117 	ldw	ra,4(sp)
 8014d00:	df000017 	ldw	fp,0(sp)
 8014d04:	dec00204 	addi	sp,sp,8
 8014d08:	f800283a 	ret

08014d0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8014d0c:	defffa04 	addi	sp,sp,-24
 8014d10:	df000515 	stw	fp,20(sp)
 8014d14:	df000504 	addi	fp,sp,20
 8014d18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014d1c:	0005303a 	rdctl	r2,status
 8014d20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014d24:	e0fffc17 	ldw	r3,-16(fp)
 8014d28:	00bfff84 	movi	r2,-2
 8014d2c:	1884703a 	and	r2,r3,r2
 8014d30:	1001703a 	wrctl	status,r2
  
  return context;
 8014d34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8014d38:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8014d3c:	e0bfff17 	ldw	r2,-4(fp)
 8014d40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8014d44:	e0bffd17 	ldw	r2,-12(fp)
 8014d48:	10800017 	ldw	r2,0(r2)
 8014d4c:	e0fffd17 	ldw	r3,-12(fp)
 8014d50:	18c00117 	ldw	r3,4(r3)
 8014d54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8014d58:	e0bffd17 	ldw	r2,-12(fp)
 8014d5c:	10800117 	ldw	r2,4(r2)
 8014d60:	e0fffd17 	ldw	r3,-12(fp)
 8014d64:	18c00017 	ldw	r3,0(r3)
 8014d68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8014d6c:	e0bffd17 	ldw	r2,-12(fp)
 8014d70:	e0fffd17 	ldw	r3,-12(fp)
 8014d74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8014d78:	e0bffd17 	ldw	r2,-12(fp)
 8014d7c:	e0fffd17 	ldw	r3,-12(fp)
 8014d80:	10c00015 	stw	r3,0(r2)
 8014d84:	e0bffb17 	ldw	r2,-20(fp)
 8014d88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014d8c:	e0bffe17 	ldw	r2,-8(fp)
 8014d90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8014d94:	0001883a 	nop
 8014d98:	e037883a 	mov	sp,fp
 8014d9c:	df000017 	ldw	fp,0(sp)
 8014da0:	dec00104 	addi	sp,sp,4
 8014da4:	f800283a 	ret

08014da8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8014da8:	defffb04 	addi	sp,sp,-20
 8014dac:	dfc00415 	stw	ra,16(sp)
 8014db0:	df000315 	stw	fp,12(sp)
 8014db4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8014db8:	d0a01317 	ldw	r2,-32692(gp)
 8014dbc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8014dc0:	d0a70f17 	ldw	r2,-25540(gp)
 8014dc4:	10800044 	addi	r2,r2,1
 8014dc8:	d0a70f15 	stw	r2,-25540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014dcc:	00002e06 	br	8014e88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8014dd0:	e0bffd17 	ldw	r2,-12(fp)
 8014dd4:	10800017 	ldw	r2,0(r2)
 8014dd8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8014ddc:	e0bffd17 	ldw	r2,-12(fp)
 8014de0:	10800403 	ldbu	r2,16(r2)
 8014de4:	10803fcc 	andi	r2,r2,255
 8014de8:	10000426 	beq	r2,zero,8014dfc <alt_tick+0x54>
 8014dec:	d0a70f17 	ldw	r2,-25540(gp)
 8014df0:	1000021e 	bne	r2,zero,8014dfc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8014df4:	e0bffd17 	ldw	r2,-12(fp)
 8014df8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8014dfc:	e0bffd17 	ldw	r2,-12(fp)
 8014e00:	10800217 	ldw	r2,8(r2)
 8014e04:	d0e70f17 	ldw	r3,-25540(gp)
 8014e08:	18801d36 	bltu	r3,r2,8014e80 <alt_tick+0xd8>
 8014e0c:	e0bffd17 	ldw	r2,-12(fp)
 8014e10:	10800403 	ldbu	r2,16(r2)
 8014e14:	10803fcc 	andi	r2,r2,255
 8014e18:	1000191e 	bne	r2,zero,8014e80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8014e1c:	e0bffd17 	ldw	r2,-12(fp)
 8014e20:	10800317 	ldw	r2,12(r2)
 8014e24:	e0fffd17 	ldw	r3,-12(fp)
 8014e28:	18c00517 	ldw	r3,20(r3)
 8014e2c:	1809883a 	mov	r4,r3
 8014e30:	103ee83a 	callr	r2
 8014e34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8014e38:	e0bfff17 	ldw	r2,-4(fp)
 8014e3c:	1000031e 	bne	r2,zero,8014e4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8014e40:	e13ffd17 	ldw	r4,-12(fp)
 8014e44:	8014d0c0 	call	8014d0c <alt_alarm_stop>
 8014e48:	00000d06 	br	8014e80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8014e4c:	e0bffd17 	ldw	r2,-12(fp)
 8014e50:	10c00217 	ldw	r3,8(r2)
 8014e54:	e0bfff17 	ldw	r2,-4(fp)
 8014e58:	1887883a 	add	r3,r3,r2
 8014e5c:	e0bffd17 	ldw	r2,-12(fp)
 8014e60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8014e64:	e0bffd17 	ldw	r2,-12(fp)
 8014e68:	10c00217 	ldw	r3,8(r2)
 8014e6c:	d0a70f17 	ldw	r2,-25540(gp)
 8014e70:	1880032e 	bgeu	r3,r2,8014e80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8014e74:	e0bffd17 	ldw	r2,-12(fp)
 8014e78:	00c00044 	movi	r3,1
 8014e7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8014e80:	e0bffe17 	ldw	r2,-8(fp)
 8014e84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014e88:	e0fffd17 	ldw	r3,-12(fp)
 8014e8c:	d0a01304 	addi	r2,gp,-32692
 8014e90:	18bfcf1e 	bne	r3,r2,8014dd0 <__alt_data_end+0xfc014dd0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8014e94:	0001883a 	nop
}
 8014e98:	0001883a 	nop
 8014e9c:	e037883a 	mov	sp,fp
 8014ea0:	dfc00117 	ldw	ra,4(sp)
 8014ea4:	df000017 	ldw	fp,0(sp)
 8014ea8:	dec00204 	addi	sp,sp,8
 8014eac:	f800283a 	ret

08014eb0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8014eb0:	deffff04 	addi	sp,sp,-4
 8014eb4:	df000015 	stw	fp,0(sp)
 8014eb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8014ebc:	000170fa 	wrctl	ienable,zero
}
 8014ec0:	0001883a 	nop
 8014ec4:	e037883a 	mov	sp,fp
 8014ec8:	df000017 	ldw	fp,0(sp)
 8014ecc:	dec00104 	addi	sp,sp,4
 8014ed0:	f800283a 	ret

08014ed4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8014ed4:	defffb04 	addi	sp,sp,-20
 8014ed8:	dfc00415 	stw	ra,16(sp)
 8014edc:	df000315 	stw	fp,12(sp)
 8014ee0:	df000304 	addi	fp,sp,12
 8014ee4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8014ee8:	d0a00717 	ldw	r2,-32740(gp)
 8014eec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8014ef0:	00003106 	br	8014fb8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8014ef4:	e0bffd17 	ldw	r2,-12(fp)
 8014ef8:	10800217 	ldw	r2,8(r2)
 8014efc:	1009883a 	mov	r4,r2
 8014f00:	80072c00 	call	80072c0 <strlen>
 8014f04:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8014f08:	e0bffd17 	ldw	r2,-12(fp)
 8014f0c:	10c00217 	ldw	r3,8(r2)
 8014f10:	e0bffe17 	ldw	r2,-8(fp)
 8014f14:	10bfffc4 	addi	r2,r2,-1
 8014f18:	1885883a 	add	r2,r3,r2
 8014f1c:	10800003 	ldbu	r2,0(r2)
 8014f20:	10803fcc 	andi	r2,r2,255
 8014f24:	1080201c 	xori	r2,r2,128
 8014f28:	10bfe004 	addi	r2,r2,-128
 8014f2c:	10800bd8 	cmpnei	r2,r2,47
 8014f30:	1000031e 	bne	r2,zero,8014f40 <alt_find_file+0x6c>
    {
      len -= 1;
 8014f34:	e0bffe17 	ldw	r2,-8(fp)
 8014f38:	10bfffc4 	addi	r2,r2,-1
 8014f3c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8014f40:	e0bffe17 	ldw	r2,-8(fp)
 8014f44:	e0ffff17 	ldw	r3,-4(fp)
 8014f48:	1885883a 	add	r2,r3,r2
 8014f4c:	10800003 	ldbu	r2,0(r2)
 8014f50:	10803fcc 	andi	r2,r2,255
 8014f54:	1080201c 	xori	r2,r2,128
 8014f58:	10bfe004 	addi	r2,r2,-128
 8014f5c:	10800be0 	cmpeqi	r2,r2,47
 8014f60:	1000081e 	bne	r2,zero,8014f84 <alt_find_file+0xb0>
 8014f64:	e0bffe17 	ldw	r2,-8(fp)
 8014f68:	e0ffff17 	ldw	r3,-4(fp)
 8014f6c:	1885883a 	add	r2,r3,r2
 8014f70:	10800003 	ldbu	r2,0(r2)
 8014f74:	10803fcc 	andi	r2,r2,255
 8014f78:	1080201c 	xori	r2,r2,128
 8014f7c:	10bfe004 	addi	r2,r2,-128
 8014f80:	10000a1e 	bne	r2,zero,8014fac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8014f84:	e0bffd17 	ldw	r2,-12(fp)
 8014f88:	10800217 	ldw	r2,8(r2)
 8014f8c:	e0fffe17 	ldw	r3,-8(fp)
 8014f90:	180d883a 	mov	r6,r3
 8014f94:	e17fff17 	ldw	r5,-4(fp)
 8014f98:	1009883a 	mov	r4,r2
 8014f9c:	80151f80 	call	80151f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8014fa0:	1000021e 	bne	r2,zero,8014fac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8014fa4:	e0bffd17 	ldw	r2,-12(fp)
 8014fa8:	00000706 	br	8014fc8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8014fac:	e0bffd17 	ldw	r2,-12(fp)
 8014fb0:	10800017 	ldw	r2,0(r2)
 8014fb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8014fb8:	e0fffd17 	ldw	r3,-12(fp)
 8014fbc:	d0a00704 	addi	r2,gp,-32740
 8014fc0:	18bfcc1e 	bne	r3,r2,8014ef4 <__alt_data_end+0xfc014ef4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8014fc4:	0005883a 	mov	r2,zero
}
 8014fc8:	e037883a 	mov	sp,fp
 8014fcc:	dfc00117 	ldw	ra,4(sp)
 8014fd0:	df000017 	ldw	fp,0(sp)
 8014fd4:	dec00204 	addi	sp,sp,8
 8014fd8:	f800283a 	ret

08014fdc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8014fdc:	defffc04 	addi	sp,sp,-16
 8014fe0:	df000315 	stw	fp,12(sp)
 8014fe4:	df000304 	addi	fp,sp,12
 8014fe8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8014fec:	00bffa04 	movi	r2,-24
 8014ff0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8014ff4:	e03ffd15 	stw	zero,-12(fp)
 8014ff8:	00001906 	br	8015060 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8014ffc:	00820074 	movhi	r2,2049
 8015000:	10994a04 	addi	r2,r2,25896
 8015004:	e0fffd17 	ldw	r3,-12(fp)
 8015008:	18c00324 	muli	r3,r3,12
 801500c:	10c5883a 	add	r2,r2,r3
 8015010:	10800017 	ldw	r2,0(r2)
 8015014:	10000f1e 	bne	r2,zero,8015054 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8015018:	00820074 	movhi	r2,2049
 801501c:	10994a04 	addi	r2,r2,25896
 8015020:	e0fffd17 	ldw	r3,-12(fp)
 8015024:	18c00324 	muli	r3,r3,12
 8015028:	10c5883a 	add	r2,r2,r3
 801502c:	e0ffff17 	ldw	r3,-4(fp)
 8015030:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8015034:	d0e00b17 	ldw	r3,-32724(gp)
 8015038:	e0bffd17 	ldw	r2,-12(fp)
 801503c:	1880020e 	bge	r3,r2,8015048 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8015040:	e0bffd17 	ldw	r2,-12(fp)
 8015044:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 8015048:	e0bffd17 	ldw	r2,-12(fp)
 801504c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8015050:	00000606 	br	801506c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015054:	e0bffd17 	ldw	r2,-12(fp)
 8015058:	10800044 	addi	r2,r2,1
 801505c:	e0bffd15 	stw	r2,-12(fp)
 8015060:	e0bffd17 	ldw	r2,-12(fp)
 8015064:	10800810 	cmplti	r2,r2,32
 8015068:	103fe41e 	bne	r2,zero,8014ffc <__alt_data_end+0xfc014ffc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801506c:	e0bffe17 	ldw	r2,-8(fp)
}
 8015070:	e037883a 	mov	sp,fp
 8015074:	df000017 	ldw	fp,0(sp)
 8015078:	dec00104 	addi	sp,sp,4
 801507c:	f800283a 	ret

08015080 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8015080:	defffb04 	addi	sp,sp,-20
 8015084:	df000415 	stw	fp,16(sp)
 8015088:	df000404 	addi	fp,sp,16
 801508c:	e13ffe15 	stw	r4,-8(fp)
 8015090:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8015094:	e0bfff17 	ldw	r2,-4(fp)
 8015098:	10840070 	cmpltui	r2,r2,4097
 801509c:	1000021e 	bne	r2,zero,80150a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80150a0:	00840004 	movi	r2,4096
 80150a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80150a8:	e0fffe17 	ldw	r3,-8(fp)
 80150ac:	e0bfff17 	ldw	r2,-4(fp)
 80150b0:	1885883a 	add	r2,r3,r2
 80150b4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80150b8:	e0bffe17 	ldw	r2,-8(fp)
 80150bc:	e0bffc15 	stw	r2,-16(fp)
 80150c0:	00000506 	br	80150d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80150c4:	e0bffc17 	ldw	r2,-16(fp)
 80150c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80150cc:	e0bffc17 	ldw	r2,-16(fp)
 80150d0:	10800804 	addi	r2,r2,32
 80150d4:	e0bffc15 	stw	r2,-16(fp)
 80150d8:	e0fffc17 	ldw	r3,-16(fp)
 80150dc:	e0bffd17 	ldw	r2,-12(fp)
 80150e0:	18bff836 	bltu	r3,r2,80150c4 <__alt_data_end+0xfc0150c4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80150e4:	e0bffe17 	ldw	r2,-8(fp)
 80150e8:	108007cc 	andi	r2,r2,31
 80150ec:	10000226 	beq	r2,zero,80150f8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80150f0:	e0bffc17 	ldw	r2,-16(fp)
 80150f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80150f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80150fc:	0001883a 	nop
 8015100:	e037883a 	mov	sp,fp
 8015104:	df000017 	ldw	fp,0(sp)
 8015108:	dec00104 	addi	sp,sp,4
 801510c:	f800283a 	ret

08015110 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8015110:	defffe04 	addi	sp,sp,-8
 8015114:	df000115 	stw	fp,4(sp)
 8015118:	df000104 	addi	fp,sp,4
 801511c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8015120:	e0bfff17 	ldw	r2,-4(fp)
 8015124:	10bffe84 	addi	r2,r2,-6
 8015128:	10c00428 	cmpgeui	r3,r2,16
 801512c:	18001a1e 	bne	r3,zero,8015198 <alt_exception_cause_generated_bad_addr+0x88>
 8015130:	100690ba 	slli	r3,r2,2
 8015134:	00820074 	movhi	r2,2049
 8015138:	10945204 	addi	r2,r2,20808
 801513c:	1885883a 	add	r2,r3,r2
 8015140:	10800017 	ldw	r2,0(r2)
 8015144:	1000683a 	jmp	r2
 8015148:	08015188 	cmpgei	zero,at,1350
 801514c:	08015188 	cmpgei	zero,at,1350
 8015150:	08015198 	cmpnei	zero,at,1350
 8015154:	08015198 	cmpnei	zero,at,1350
 8015158:	08015198 	cmpnei	zero,at,1350
 801515c:	08015188 	cmpgei	zero,at,1350
 8015160:	08015190 	cmplti	zero,at,1350
 8015164:	08015198 	cmpnei	zero,at,1350
 8015168:	08015188 	cmpgei	zero,at,1350
 801516c:	08015188 	cmpgei	zero,at,1350
 8015170:	08015198 	cmpnei	zero,at,1350
 8015174:	08015188 	cmpgei	zero,at,1350
 8015178:	08015190 	cmplti	zero,at,1350
 801517c:	08015198 	cmpnei	zero,at,1350
 8015180:	08015198 	cmpnei	zero,at,1350
 8015184:	08015188 	cmpgei	zero,at,1350
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8015188:	00800044 	movi	r2,1
 801518c:	00000306 	br	801519c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8015190:	0005883a 	mov	r2,zero
 8015194:	00000106 	br	801519c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8015198:	0005883a 	mov	r2,zero
  }
}
 801519c:	e037883a 	mov	sp,fp
 80151a0:	df000017 	ldw	fp,0(sp)
 80151a4:	dec00104 	addi	sp,sp,4
 80151a8:	f800283a 	ret

080151ac <atexit>:
 80151ac:	200b883a 	mov	r5,r4
 80151b0:	000f883a 	mov	r7,zero
 80151b4:	000d883a 	mov	r6,zero
 80151b8:	0009883a 	mov	r4,zero
 80151bc:	80152741 	jmpi	8015274 <__register_exitproc>

080151c0 <exit>:
 80151c0:	defffe04 	addi	sp,sp,-8
 80151c4:	000b883a 	mov	r5,zero
 80151c8:	dc000015 	stw	r16,0(sp)
 80151cc:	dfc00115 	stw	ra,4(sp)
 80151d0:	2021883a 	mov	r16,r4
 80151d4:	801538c0 	call	801538c <__call_exitprocs>
 80151d8:	00820074 	movhi	r2,2049
 80151dc:	109df104 	addi	r2,r2,30660
 80151e0:	11000017 	ldw	r4,0(r2)
 80151e4:	20800f17 	ldw	r2,60(r4)
 80151e8:	10000126 	beq	r2,zero,80151f0 <exit+0x30>
 80151ec:	103ee83a 	callr	r2
 80151f0:	8009883a 	mov	r4,r16
 80151f4:	801550c0 	call	801550c <_exit>

080151f8 <memcmp>:
 80151f8:	01c000c4 	movi	r7,3
 80151fc:	3980192e 	bgeu	r7,r6,8015264 <memcmp+0x6c>
 8015200:	2144b03a 	or	r2,r4,r5
 8015204:	11c4703a 	and	r2,r2,r7
 8015208:	10000f26 	beq	r2,zero,8015248 <memcmp+0x50>
 801520c:	20800003 	ldbu	r2,0(r4)
 8015210:	28c00003 	ldbu	r3,0(r5)
 8015214:	10c0151e 	bne	r2,r3,801526c <memcmp+0x74>
 8015218:	31bfff84 	addi	r6,r6,-2
 801521c:	01ffffc4 	movi	r7,-1
 8015220:	00000406 	br	8015234 <memcmp+0x3c>
 8015224:	20800003 	ldbu	r2,0(r4)
 8015228:	28c00003 	ldbu	r3,0(r5)
 801522c:	31bfffc4 	addi	r6,r6,-1
 8015230:	10c00e1e 	bne	r2,r3,801526c <memcmp+0x74>
 8015234:	21000044 	addi	r4,r4,1
 8015238:	29400044 	addi	r5,r5,1
 801523c:	31fff91e 	bne	r6,r7,8015224 <__alt_data_end+0xfc015224>
 8015240:	0005883a 	mov	r2,zero
 8015244:	f800283a 	ret
 8015248:	20c00017 	ldw	r3,0(r4)
 801524c:	28800017 	ldw	r2,0(r5)
 8015250:	18bfee1e 	bne	r3,r2,801520c <__alt_data_end+0xfc01520c>
 8015254:	31bfff04 	addi	r6,r6,-4
 8015258:	21000104 	addi	r4,r4,4
 801525c:	29400104 	addi	r5,r5,4
 8015260:	39bff936 	bltu	r7,r6,8015248 <__alt_data_end+0xfc015248>
 8015264:	303fe91e 	bne	r6,zero,801520c <__alt_data_end+0xfc01520c>
 8015268:	003ff506 	br	8015240 <__alt_data_end+0xfc015240>
 801526c:	10c5c83a 	sub	r2,r2,r3
 8015270:	f800283a 	ret

08015274 <__register_exitproc>:
 8015274:	defffa04 	addi	sp,sp,-24
 8015278:	dc000315 	stw	r16,12(sp)
 801527c:	04020074 	movhi	r16,2049
 8015280:	841df104 	addi	r16,r16,30660
 8015284:	80c00017 	ldw	r3,0(r16)
 8015288:	dc400415 	stw	r17,16(sp)
 801528c:	dfc00515 	stw	ra,20(sp)
 8015290:	18805217 	ldw	r2,328(r3)
 8015294:	2023883a 	mov	r17,r4
 8015298:	10003726 	beq	r2,zero,8015378 <__register_exitproc+0x104>
 801529c:	10c00117 	ldw	r3,4(r2)
 80152a0:	010007c4 	movi	r4,31
 80152a4:	20c00e16 	blt	r4,r3,80152e0 <__register_exitproc+0x6c>
 80152a8:	1a000044 	addi	r8,r3,1
 80152ac:	8800221e 	bne	r17,zero,8015338 <__register_exitproc+0xc4>
 80152b0:	18c00084 	addi	r3,r3,2
 80152b4:	18c7883a 	add	r3,r3,r3
 80152b8:	18c7883a 	add	r3,r3,r3
 80152bc:	12000115 	stw	r8,4(r2)
 80152c0:	10c7883a 	add	r3,r2,r3
 80152c4:	19400015 	stw	r5,0(r3)
 80152c8:	0005883a 	mov	r2,zero
 80152cc:	dfc00517 	ldw	ra,20(sp)
 80152d0:	dc400417 	ldw	r17,16(sp)
 80152d4:	dc000317 	ldw	r16,12(sp)
 80152d8:	dec00604 	addi	sp,sp,24
 80152dc:	f800283a 	ret
 80152e0:	00800034 	movhi	r2,0
 80152e4:	10800004 	addi	r2,r2,0
 80152e8:	10002626 	beq	r2,zero,8015384 <__register_exitproc+0x110>
 80152ec:	01006404 	movi	r4,400
 80152f0:	d9400015 	stw	r5,0(sp)
 80152f4:	d9800115 	stw	r6,4(sp)
 80152f8:	d9c00215 	stw	r7,8(sp)
 80152fc:	00000000 	call	0 <__reset-0x20000>
 8015300:	d9400017 	ldw	r5,0(sp)
 8015304:	d9800117 	ldw	r6,4(sp)
 8015308:	d9c00217 	ldw	r7,8(sp)
 801530c:	10001d26 	beq	r2,zero,8015384 <__register_exitproc+0x110>
 8015310:	81000017 	ldw	r4,0(r16)
 8015314:	10000115 	stw	zero,4(r2)
 8015318:	02000044 	movi	r8,1
 801531c:	22405217 	ldw	r9,328(r4)
 8015320:	0007883a 	mov	r3,zero
 8015324:	12400015 	stw	r9,0(r2)
 8015328:	20805215 	stw	r2,328(r4)
 801532c:	10006215 	stw	zero,392(r2)
 8015330:	10006315 	stw	zero,396(r2)
 8015334:	883fde26 	beq	r17,zero,80152b0 <__alt_data_end+0xfc0152b0>
 8015338:	18c9883a 	add	r4,r3,r3
 801533c:	2109883a 	add	r4,r4,r4
 8015340:	1109883a 	add	r4,r2,r4
 8015344:	21802215 	stw	r6,136(r4)
 8015348:	01800044 	movi	r6,1
 801534c:	12406217 	ldw	r9,392(r2)
 8015350:	30cc983a 	sll	r6,r6,r3
 8015354:	4992b03a 	or	r9,r9,r6
 8015358:	12406215 	stw	r9,392(r2)
 801535c:	21c04215 	stw	r7,264(r4)
 8015360:	01000084 	movi	r4,2
 8015364:	893fd21e 	bne	r17,r4,80152b0 <__alt_data_end+0xfc0152b0>
 8015368:	11006317 	ldw	r4,396(r2)
 801536c:	218cb03a 	or	r6,r4,r6
 8015370:	11806315 	stw	r6,396(r2)
 8015374:	003fce06 	br	80152b0 <__alt_data_end+0xfc0152b0>
 8015378:	18805304 	addi	r2,r3,332
 801537c:	18805215 	stw	r2,328(r3)
 8015380:	003fc606 	br	801529c <__alt_data_end+0xfc01529c>
 8015384:	00bfffc4 	movi	r2,-1
 8015388:	003fd006 	br	80152cc <__alt_data_end+0xfc0152cc>

0801538c <__call_exitprocs>:
 801538c:	defff504 	addi	sp,sp,-44
 8015390:	df000915 	stw	fp,36(sp)
 8015394:	dd400615 	stw	r21,24(sp)
 8015398:	dc800315 	stw	r18,12(sp)
 801539c:	dfc00a15 	stw	ra,40(sp)
 80153a0:	ddc00815 	stw	r23,32(sp)
 80153a4:	dd800715 	stw	r22,28(sp)
 80153a8:	dd000515 	stw	r20,20(sp)
 80153ac:	dcc00415 	stw	r19,16(sp)
 80153b0:	dc400215 	stw	r17,8(sp)
 80153b4:	dc000115 	stw	r16,4(sp)
 80153b8:	d9000015 	stw	r4,0(sp)
 80153bc:	2839883a 	mov	fp,r5
 80153c0:	04800044 	movi	r18,1
 80153c4:	057fffc4 	movi	r21,-1
 80153c8:	00820074 	movhi	r2,2049
 80153cc:	109df104 	addi	r2,r2,30660
 80153d0:	12000017 	ldw	r8,0(r2)
 80153d4:	45005217 	ldw	r20,328(r8)
 80153d8:	44c05204 	addi	r19,r8,328
 80153dc:	a0001c26 	beq	r20,zero,8015450 <__call_exitprocs+0xc4>
 80153e0:	a0800117 	ldw	r2,4(r20)
 80153e4:	15ffffc4 	addi	r23,r2,-1
 80153e8:	b8000d16 	blt	r23,zero,8015420 <__call_exitprocs+0x94>
 80153ec:	14000044 	addi	r16,r2,1
 80153f0:	8421883a 	add	r16,r16,r16
 80153f4:	8421883a 	add	r16,r16,r16
 80153f8:	84402004 	addi	r17,r16,128
 80153fc:	a463883a 	add	r17,r20,r17
 8015400:	a421883a 	add	r16,r20,r16
 8015404:	e0001e26 	beq	fp,zero,8015480 <__call_exitprocs+0xf4>
 8015408:	80804017 	ldw	r2,256(r16)
 801540c:	e0801c26 	beq	fp,r2,8015480 <__call_exitprocs+0xf4>
 8015410:	bdffffc4 	addi	r23,r23,-1
 8015414:	843fff04 	addi	r16,r16,-4
 8015418:	8c7fff04 	addi	r17,r17,-4
 801541c:	bd7ff91e 	bne	r23,r21,8015404 <__alt_data_end+0xfc015404>
 8015420:	00800034 	movhi	r2,0
 8015424:	10800004 	addi	r2,r2,0
 8015428:	10000926 	beq	r2,zero,8015450 <__call_exitprocs+0xc4>
 801542c:	a0800117 	ldw	r2,4(r20)
 8015430:	1000301e 	bne	r2,zero,80154f4 <__call_exitprocs+0x168>
 8015434:	a0800017 	ldw	r2,0(r20)
 8015438:	10003226 	beq	r2,zero,8015504 <__call_exitprocs+0x178>
 801543c:	a009883a 	mov	r4,r20
 8015440:	98800015 	stw	r2,0(r19)
 8015444:	00000000 	call	0 <__reset-0x20000>
 8015448:	9d000017 	ldw	r20,0(r19)
 801544c:	a03fe41e 	bne	r20,zero,80153e0 <__alt_data_end+0xfc0153e0>
 8015450:	dfc00a17 	ldw	ra,40(sp)
 8015454:	df000917 	ldw	fp,36(sp)
 8015458:	ddc00817 	ldw	r23,32(sp)
 801545c:	dd800717 	ldw	r22,28(sp)
 8015460:	dd400617 	ldw	r21,24(sp)
 8015464:	dd000517 	ldw	r20,20(sp)
 8015468:	dcc00417 	ldw	r19,16(sp)
 801546c:	dc800317 	ldw	r18,12(sp)
 8015470:	dc400217 	ldw	r17,8(sp)
 8015474:	dc000117 	ldw	r16,4(sp)
 8015478:	dec00b04 	addi	sp,sp,44
 801547c:	f800283a 	ret
 8015480:	a0800117 	ldw	r2,4(r20)
 8015484:	80c00017 	ldw	r3,0(r16)
 8015488:	10bfffc4 	addi	r2,r2,-1
 801548c:	15c01426 	beq	r2,r23,80154e0 <__call_exitprocs+0x154>
 8015490:	80000015 	stw	zero,0(r16)
 8015494:	183fde26 	beq	r3,zero,8015410 <__alt_data_end+0xfc015410>
 8015498:	95c8983a 	sll	r4,r18,r23
 801549c:	a0806217 	ldw	r2,392(r20)
 80154a0:	a5800117 	ldw	r22,4(r20)
 80154a4:	2084703a 	and	r2,r4,r2
 80154a8:	10000b26 	beq	r2,zero,80154d8 <__call_exitprocs+0x14c>
 80154ac:	a0806317 	ldw	r2,396(r20)
 80154b0:	2088703a 	and	r4,r4,r2
 80154b4:	20000c1e 	bne	r4,zero,80154e8 <__call_exitprocs+0x15c>
 80154b8:	89400017 	ldw	r5,0(r17)
 80154bc:	d9000017 	ldw	r4,0(sp)
 80154c0:	183ee83a 	callr	r3
 80154c4:	a0800117 	ldw	r2,4(r20)
 80154c8:	15bfbf1e 	bne	r2,r22,80153c8 <__alt_data_end+0xfc0153c8>
 80154cc:	98800017 	ldw	r2,0(r19)
 80154d0:	153fcf26 	beq	r2,r20,8015410 <__alt_data_end+0xfc015410>
 80154d4:	003fbc06 	br	80153c8 <__alt_data_end+0xfc0153c8>
 80154d8:	183ee83a 	callr	r3
 80154dc:	003ff906 	br	80154c4 <__alt_data_end+0xfc0154c4>
 80154e0:	a5c00115 	stw	r23,4(r20)
 80154e4:	003feb06 	br	8015494 <__alt_data_end+0xfc015494>
 80154e8:	89000017 	ldw	r4,0(r17)
 80154ec:	183ee83a 	callr	r3
 80154f0:	003ff406 	br	80154c4 <__alt_data_end+0xfc0154c4>
 80154f4:	a0800017 	ldw	r2,0(r20)
 80154f8:	a027883a 	mov	r19,r20
 80154fc:	1029883a 	mov	r20,r2
 8015500:	003fb606 	br	80153dc <__alt_data_end+0xfc0153dc>
 8015504:	0005883a 	mov	r2,zero
 8015508:	003ffb06 	br	80154f8 <__alt_data_end+0xfc0154f8>

0801550c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801550c:	defffd04 	addi	sp,sp,-12
 8015510:	df000215 	stw	fp,8(sp)
 8015514:	df000204 	addi	fp,sp,8
 8015518:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801551c:	0001883a 	nop
 8015520:	e0bfff17 	ldw	r2,-4(fp)
 8015524:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8015528:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801552c:	10000226 	beq	r2,zero,8015538 <_exit+0x2c>
    ALT_SIM_FAIL();
 8015530:	002af070 	cmpltui	zero,zero,43969
 8015534:	00000106 	br	801553c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8015538:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801553c:	003fff06 	br	801553c <__alt_data_end+0xfc01553c>
