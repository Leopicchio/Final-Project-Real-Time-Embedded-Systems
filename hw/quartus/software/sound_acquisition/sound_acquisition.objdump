
sound_acquisition.elf:     file format elf32-littlenios2
sound_acquisition.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000228

Program Header:
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x04000000 align 2**12
         filesz 0x00000228 memsz 0x00000228 flags r-x
    LOAD off    0x00002228 vaddr 0x04000228 paddr 0x04000228 align 2**12
         filesz 0x0000e164 memsz 0x0000e164 flags r-x
    LOAD off    0x0001038c vaddr 0x0400e38c paddr 0x0400fec4 align 2**12
         filesz 0x00001b38 memsz 0x00001b38 flags rw-
    LOAD off    0x000129fc vaddr 0x040119fc paddr 0x040119fc align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-
    LOAD off    0x00012000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00012000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  08020020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dc68  04000228  04000228  00002228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004fc  0400de90  0400de90  0000fe90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b38  0400e38c  0400fec4  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  040119fc  040119fc  000129fc  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_controller 00000000  04011b50  04011b50  00012020  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08020248  08020248  00012020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f20  00000000  00000000  00012048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001df33  00000000  00000000  00012f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008cb7  00000000  00000000  00030e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aa09  00000000  00000000  00039b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000025dc  00000000  00000000  0004455c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004190  00000000  00000000  00046b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00010140  00000000  00000000  0004acc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0005ae08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001700  00000000  00000000  0005ae68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005fee2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000017  00000000  00000000  0005fee5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005fefc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005fefd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005fefe  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005ff02  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005ff06  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0005ff0a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0005ff15  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0005ff20  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005ff2b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0005ff36  2**0
                  CONTENTS, READONLY
 30 .jdi          0000a6be  00000000  00000000  0005ff75  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000af4d1  00000000  00000000  0006a633  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
04000228 l    d  .text	00000000 .text
0400de90 l    d  .rodata	00000000 .rodata
0400e38c l    d  .rwdata	00000000 .rwdata
040119fc l    d  .bss	00000000 .bss
04011b50 l    d  .SDRAM_controller	00000000 .SDRAM_controller
08020248 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sound_acquisition_bsp//obj/HAL/src/crt0.o
04000270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sound_acquisition.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0400e09c l     O .rodata	00000108 two_over_pi
0400e01c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0400e1e4 l     O .rodata	00000010 init_jk
0400e1a4 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0400e38c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
04007160 l     F .text	00000008 __fp_unlock
04007174 l     F .text	0000019c __sinit.part.1
04007310 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
04009c08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04009d14 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04009d40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04009e2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04009f0c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04009ff8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400a1cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400fea4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400a448 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400a57c l     F .text	00000034 alt_dev_reg
0400a5b0 l     F .text	0000003c alt_get_errno
0400a5ec l     F .text	00000068 alt_avalon_mutex_reg
0400ed60 l     O .rwdata	00001060 jtag_uart_0
0400fdc0 l     O .rwdata	00000048 mailbox_simple_0
0400fe08 l     O .rwdata	00000010 mutex_SDRAM
0400fe18 l     O .rwdata	00000030 audio_and_video_config_0
0400fe48 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400a928 l     F .text	00000210 altera_avalon_jtag_uart_irq
0400ab38 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0400b170 l     F .text	00000090 altera_avalon_mailbox_identify
0400b200 l     F .text	00000078 altera_avalon_mailbox_post
0400b278 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
0400b3b4 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0400baa8 l     F .text	0000003c alt_get_errno
0400bae4 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400cee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400d148 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400d408 l     F .text	0000003c alt_get_errno
0400d444 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04011a24 g     O .bss	00000004 alt_instruction_exception_handler
0400c660 g     F .text	00000038 alt_up_av_config_reset
0400cab8 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
0400b81c g     F .text	00000150 altera_avalon_mailbox_send
04009bb4 g     F .text	00000054 _isatty_r
0400c6d0 g     F .text	00000034 alt_up_av_config_disable_interrupt
0400a108 g     F .text	0000007c alt_main
04006ff4 g     F .text	000000c0 _puts_r
04011a50 g     O .bss	00000100 alt_irq
04002c84 g     F .text	00000014 fabs
040098dc g     F .text	00000060 _lseek_r
04000c60 g     F .text	00000130 sqrt
0400fec4 g       *ABS*	00000000 __flash_rwdata_start
04005900 g     F .text	00000088 .hidden __eqdf2
0400c01c g     F .text	00000060 alt_up_audio_read_fifo_avail
0400c794 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
04011b50 g       *ABS*	00000000 __alt_heap_start
0400c07c g     F .text	00000068 alt_up_audio_record_r
04008e90 g     F .text	0000005c __sseek
040074b0 g     F .text	00000010 __sinit
04007318 g     F .text	00000068 __sfmoreglue
0400a1a8 g     F .text	00000024 __malloc_unlock
04003734 g     F .text	00000440 .hidden __divsf3
0400bf88 g     F .text	00000094 alt_up_audio_reset_audio_core
0400857c g     F .text	0000015c memmove
04007498 g     F .text	00000018 _cleanup
0400bc1c g     F .text	00000040 altera_avalon_mutex_trylock
040045d8 g     F .text	00000070 .hidden __fixsfsi
04005988 g     F .text	000000dc .hidden __gtdf2
0400d800 g     F .text	00000024 altera_nios2_gen2_irq_init
04006fe4 g     F .text	00000010 __errno
08020000 g     F .entry	0000001c __reset
0400bcb0 g     F .text	00000074 altera_avalon_mutex_is_mine
04000000 g       *ABS*	00000000 __flash_exceptions_start
04009b58 g     F .text	0000005c _fstat_r
04011a08 g     O .bss	00000004 errno
04002c98 g     F .text	000001ec floor
04008e0c g     F .text	00000008 __seofread
0400bf48 g     F .text	00000040 alt_up_audio_write_interrupt_pending
04011a10 g     O .bss	00000004 alt_argv
04017e78 g       *ABS*	00000000 _gp
0400b96c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
0400a418 g     F .text	00000030 usleep
040040f4 g     F .text	000004e4 .hidden __subsf3
0400ebe0 g     O .rwdata	00000180 alt_fd_list
04000d90 g     F .text	0000076c __ieee754_rem_pio2
0400d084 g     F .text	00000090 alt_find_dev
04008434 g     F .text	00000148 memcpy
04007168 g     F .text	0000000c _cleanup_r
04006bec g     F .text	000000dc .hidden __floatsidf
0400d20c g     F .text	0000007c alt_io_redirect
04005a64 g     F .text	000000f4 .hidden __ltdf2
0400de90 g       *ABS*	00000000 __DTOR_END__
040070b4 g     F .text	00000014 puts
0400da60 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400b460 g     F .text	00000078 altera_avalon_mailbox_simple_init
04002e84 g     F .text	00000074 __fpclassifyd
0400c464 g     F .text	00000050 alt_up_audio_read_fifo_head
0400ad30 g     F .text	0000021c altera_avalon_jtag_uart_read
040031b0 g     F .text	00000064 .hidden __udivsi3
04009e68 g     F .text	000000a4 isatty
0400b7a4 g     F .text	00000078 altera_avalon_mailbox_status
0400b69c g     F .text	00000108 altera_avalon_mailbox_close
04001784 g     F .text	000004a4 __kernel_cos
04003c30 g     F .text	000000c8 .hidden __lesf2
0400d9d0 g     F .text	00000090 alt_icache_flush
04011a04 g     O .bss	00000004 __malloc_top_pad
0400c5e0 g     F .text	00000080 alt_up_av_config_read_data
04007500 g     F .text	000004bc __sfvwrite_r
04008d64 g     F .text	00000054 _sbrk_r
04009af8 g     F .text	00000060 _read_r
0400fe9c g     O .rwdata	00000004 alt_max_fd
0400c4b4 g     F .text	00000068 alt_up_audio_write_fifo_head
040090fc g     F .text	000000f0 _fclose_r
04009478 g     F .text	00000030 fflush
04011a00 g     O .bss	00000004 __malloc_max_sbrked_mem
0400d288 g     F .text	00000180 alt_irq_register
040029b8 g     F .text	000002cc __kernel_sin
04006cc8 g     F .text	00000110 .hidden __extendsfdf2
0400476c g     F .text	000008ac .hidden __adddf3
0400a034 g     F .text	000000d4 lseek
0400bd24 g     F .text	00000050 altera_avalon_mutex_first_lock
0400fe78 g     O .rwdata	00000004 __fdlib_version
0400fe7c g     O .rwdata	00000004 _global_impure_ptr
04008800 g     F .text	00000564 _realloc_r
04011b50 g       *ABS*	00000000 __bss_end
0400d6f8 g     F .text	00000108 alt_tick
04000a88 g     F .text	000000e8 start_recording
0400bd74 g     F .text	0000003c alt_up_audio_open_dev
040074d0 g     F .text	00000018 __fp_lock_all
04000940 g     F .text	00000148 average_amplitude
0400c1ac g     F .text	00000068 alt_up_audio_play_r
0400d65c g     F .text	0000009c alt_alarm_stop
04011a18 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d8 alt_irq_handler
0400ebb8 g     O .rwdata	00000028 alt_dev_null
04001c28 g     F .text	00000d90 __kernel_rem_pio2
0400bb60 g     F .text	00000054 altera_avalon_mutex_open
0400ce9c g     F .text	00000048 alt_dcache_flush_all
04006b6c g     F .text	00000080 .hidden __fixdfsi
0400fec4 g       *ABS*	00000000 __ram_rwdata_end
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory
0400fe94 g     O .rwdata	00000008 alt_dev_list
0400a484 g     F .text	000000f8 write
04003b74 g     F .text	000000bc .hidden __gtsf2
0400feb0 g     O .rwdata	00000008 alt_mutex_list
0400e38c g       *ABS*	00000000 __ram_rodata_end
04009d7c g     F .text	000000b0 fstat
04005a64 g     F .text	000000f4 .hidden __ledf2
04003214 g     F .text	00000058 .hidden __umodsi3
04011b50 g       *ABS*	00000000 end
0400a874 g     F .text	000000b4 altera_avalon_jtag_uart_init
080201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0400de90 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04006f80 g     F .text	00000064 .hidden __clzsi2
0400af4c g     F .text	00000224 altera_avalon_jtag_uart_write
040074c0 g     F .text	00000004 __sfp_lock_acquire
04008350 g     F .text	000000e4 memchr
040095cc g     F .text	00000310 _free_r
0400dcdc g     F .text	00000180 __call_exitprocs
0400fe84 g     O .rwdata	00000004 __malloc_sbrk_base
04000228 g     F .text	0000004c _start
04011a1c g     O .bss	00000004 _alt_tick_rate
04000594 g     F .text	00000110 play_file
04000b70 g     F .text	000000f0 sin
0400c35c g     F .text	00000108 alt_up_audio_write_fifo
0400c57c g     F .text	00000064 alt_up_av_config_write_data
04011a20 g     O .bss	00000004 _alt_nticks
0400a208 g     F .text	000000fc read
0400a68c g     F .text	00000084 alt_sys_init
04004648 g     F .text	00000124 .hidden __floatsisf
0400c27c g     F .text	000000e0 alt_up_audio_read_fifo
0400dbc4 g     F .text	00000118 __register_exitproc
0400cbc0 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
0400beb0 g     F .text	00000058 alt_up_audio_disable_write_interrupt
0400bc5c g     F .text	00000054 altera_avalon_mutex_unlock
0400abd8 g     F .text	00000068 altera_avalon_jtag_uart_close
0400e38c g       *ABS*	00000000 __ram_rwdata_start
0400de90 g       *ABS*	00000000 __ram_rodata_start
04011a28 g     O .bss	00000028 __malloc_current_mallinfo
040008a4 g     F .text	0000009c show_amplitude_on_LEDS
0400a710 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400d92c g     F .text	000000a4 alt_get_fd
0400cd44 g     F .text	00000158 alt_busy_sleep
040090a8 g     F .text	00000054 _close_r
0400be5c g     F .text	00000054 alt_up_audio_enable_write_interrupt
0400db48 g     F .text	0000007c memcmp
0400a7d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04011b50 g       *ABS*	00000000 __alt_stack_base
0400a820 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04008f54 g     F .text	00000154 __swsetup_r
04005018 g     F .text	000008e8 .hidden __divdf3
0400be04 g     F .text	00000058 alt_up_audio_disable_read_interrupt
04007380 g     F .text	00000118 __sfp
0400e7b0 g     O .rwdata	00000408 __malloc_av_
040074cc g     F .text	00000004 __sinit_lock_release
04005b58 g     F .text	00000718 .hidden __muldf3
04008db8 g     F .text	00000054 __sread
0400d824 g     F .text	00000108 alt_find_file
0400cf20 g     F .text	000000a4 alt_dev_llist_insert
0400a184 g     F .text	00000024 __malloc_lock
0400a368 g     F .text	000000b0 sbrk
0400941c g     F .text	0000005c _fflush_r
040119fc g       *ABS*	00000000 __bss_start
040086d8 g     F .text	00000128 memset
04000274 g     F .text	00000320 main
0400c14c g     F .text	00000060 alt_up_audio_write_fifo_space
04011a14 g     O .bss	00000004 alt_envp
040119fc g     O .bss	00000004 __malloc_max_total_mem
0400a770 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04003c30 g     F .text	000000c8 .hidden __ltsf2
04008eec g     F .text	00000008 __sclose
04002ef8 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
040091ec g     F .text	00000014 fclose
04006dd8 g     F .text	000001a8 .hidden __truncdfsf2
0400bbd8 g     F .text	00000044 altera_avalon_mutex_lock
04007b44 g     F .text	0000080c _malloc_r
0400fea0 g     O .rwdata	00000004 alt_errno
040079bc g     F .text	000000c4 _fwalk
040030b8 g     F .text	00000084 .hidden __divsi3
040094a8 g     F .text	00000124 _malloc_trim_r
0400de90 g       *ABS*	00000000 __CTOR_END__
04003cf8 g     F .text	000003fc .hidden __mulsf3
0400de90 g       *ABS*	00000000 __flash_rodata_start
0400de90 g       *ABS*	00000000 __DTOR_LIST__
0400309c g     F .text	0000001c copysign
04005900 g     F .text	00000088 .hidden __nedf2
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0400c51c g     F .text	00000060 alt_up_av_config_open_dev
0400a654 g     F .text	00000038 alt_irq_init
0400a304 g     F .text	00000064 alt_release_fd
0400e1f4 g     O .rodata	00000100 .hidden __clz_tab
040006a4 g     F .text	00000200 generate_sinusoid
0400dafc g     F .text	00000014 atexit
04003b74 g     F .text	000000bc .hidden __gesf2
04008ef4 g     F .text	00000060 _write_r
0400c75c g     F .text	00000038 alt_up_av_config_read_ready
0400fe80 g     O .rwdata	00000004 _impure_ptr
04011a0c g     O .bss	00000004 alt_argc
04009200 g     F .text	0000021c __sflush_r
04002f00 g     F .text	0000019c scalbn
0400d024 g     F .text	00000060 _do_dtors
08020020 g       .exceptions	00000000 alt_irq_entry
040074e8 g     F .text	00000018 __fp_unlock_all
0400fe8c g     O .rwdata	00000008 alt_fs_list
0400c0e4 g     F .text	00000068 alt_up_audio_record_l
08020020 g       *ABS*	00000000 __ram_exceptions_start
040014fc g     F .text	00000288 __ieee754_sqrt
0400c698 g     F .text	00000038 alt_up_av_config_enable_interrupt
0400c704 g     F .text	00000058 alt_up_av_config_read_acknowledge
0400ca60 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
0400fec4 g       *ABS*	00000000 _edata
04011b50 g       *ABS*	00000000 _end
08020248 g       *ABS*	00000000 __ram_exceptions_end
0400ac40 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400c214 g     F .text	00000068 alt_up_audio_play_l
0400fea8 g     O .rwdata	00000008 alt_mailbox_simple_list
04008e14 g     F .text	0000007c __swrite
0400fe88 g     O .rwdata	00000004 __malloc_trim_threshold
0400db10 g     F .text	00000038 exit
04007a80 g     F .text	000000c4 _fwalk_reent
0400cb68 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
0400313c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
040074c4 g     F .text	00000004 __sfp_lock_release
0400b4d8 g     F .text	000001c4 altera_avalon_mailbox_open
0400de5c g     F .text	00000034 _exit
0400cc18 g     F .text	0000012c alt_alarm_start
0400993c g     F .text	000001bc __smakebuf_r
040070c8 g     F .text	00000098 strlen
0400d508 g     F .text	00000154 open
04005988 g     F .text	000000dc .hidden __gedf2
0400c838 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
0400d114 g     F .text	00000034 alt_icache_flush_all
0400feb8 g     O .rwdata	00000004 alt_priority_mask
0400bbb4 g     F .text	00000024 altera_avalon_mutex_close
0400cb10 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
04006270 g     F .text	000008fc .hidden __subdf3
0400febc g     O .rwdata	00000008 alt_alarm_list
0400cfc4 g     F .text	00000060 _do_ctors
04009c44 g     F .text	000000d0 close
0400326c g     F .text	000004c8 .hidden __addsf3
04009f74 g     F .text	00000084 alt_load
0400bdb0 g     F .text	00000054 alt_up_audio_enable_read_interrupt
0400c920 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
040074c8 g     F .text	00000004 __sinit_lock_acquire
0400ca08 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
0400bf08 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

08020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 802000c:	00bffd16 	blt	zero,r2,8020004 <__ram_exceptions_end+0xfffffdbc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8020014:	08408a14 	ori	at,at,552
    jmp r1
 8020018:	0800683a 	jmp	at
 802001c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x4000000>

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d40 	call	80201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001526 	beq	r2,zero,8020190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 802013c:	00810074 	movhi	r2,1025
 8020140:	10869404 	addi	r2,r2,6736
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	00810074 	movhi	r2,1025
 8020158:	10869404 	addi	r2,r2,6736
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	e17ffd17 	ldw	r5,-12(fp)
 8020174:	1009883a 	mov	r4,r2
 8020178:	183ee83a 	callr	r3
#endif
        break;
 802017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020180:	0005313a 	rdctl	r2,ipending
 8020184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020188:	e0bfff17 	ldw	r2,-4(fp)
 802018c:	00000706 	br	80201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 8020190:	e0bffc17 	ldw	r2,-16(fp)
 8020194:	1085883a 	add	r2,r2,r2
 8020198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 802019c:	e0bffd17 	ldw	r2,-12(fp)
 80201a0:	10800044 	addi	r2,r2,1
 80201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a8:	003fe006 	br	802012c <__ram_exceptions_end+0xfffffee4>

    active = alt_irq_pending ();
 80201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201b0:	e0bffb17 	ldw	r2,-20(fp)
 80201b4:	103fda1e 	bne	r2,zero,8020120 <__ram_exceptions_end+0xfffffed8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b8:	0001883a 	nop
}
 80201bc:	0001883a 	nop
 80201c0:	e037883a 	mov	sp,fp
 80201c4:	dfc00117 	ldw	ra,4(sp)
 80201c8:	df000017 	ldw	fp,0(sp)
 80201cc:	dec00204 	addi	sp,sp,8
 80201d0:	f800283a 	ret

080201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d4:	defffb04 	addi	sp,sp,-20
 80201d8:	dfc00415 	stw	ra,16(sp)
 80201dc:	df000315 	stw	fp,12(sp)
 80201e0:	df000304 	addi	fp,sp,12
 80201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80201e8:	000531fa 	rdctl	r2,exception
 80201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80201f0:	e0bffd17 	ldw	r2,-12(fp)
 80201f4:	10801f0c 	andi	r2,r2,124
 80201f8:	1004d0ba 	srli	r2,r2,2
 80201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 8020200:	0005333a 	rdctl	r2,badaddr
 8020204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8020208:	d0a6eb17 	ldw	r2,-25684(gp)
 802020c:	10000726 	beq	r2,zero,802022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8020210:	d0a6eb17 	ldw	r2,-25684(gp)
 8020214:	e0fffd17 	ldw	r3,-12(fp)
 8020218:	e1bffe17 	ldw	r6,-8(fp)
 802021c:	e17fff17 	ldw	r5,-4(fp)
 8020220:	1809883a 	mov	r4,r3
 8020224:	103ee83a 	callr	r2
 8020228:	00000206 	br	8020234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 802022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8020230:	0005883a 	mov	r2,zero
}
 8020234:	e037883a 	mov	sp,fp
 8020238:	dfc00117 	ldw	ra,4(sp)
 802023c:	df000017 	ldw	fp,0(sp)
 8020240:	dec00204 	addi	sp,sp,8
 8020244:	f800283a 	ret

Disassembly of section .text:

04000228 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000228:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 400022c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000230:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000234:	00bffd16 	blt	zero,r2,400022c <__ram_exceptions_end+0xfbfdffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000238:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 400023c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000240:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000244:	d69f9e14 	ori	gp,gp,32376
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000248:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 400024c:	10867f14 	ori	r2,r2,6652

    movhi r3, %hi(__bss_end)
 4000250:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000254:	18c6d414 	ori	r3,r3,6992

    beq r2, r3, 1f
 4000258:	10c00326 	beq	r2,r3,4000268 <_start+0x40>

0:
    stw zero, (r2)
 400025c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000264:	10fffd36 	bltu	r2,r3,400025c <__ram_exceptions_end+0xfbfe0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000268:	4009f740 	call	4009f74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 400026c:	400a1080 	call	400a108 <alt_main>

04000270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000270:	003fff06 	br	4000270 <__ram_exceptions_end+0xfbfe0028>

04000274 <main>:



//-------------------------------------------- MAIN ------------------------------------------------------
int main()
{
 4000274:	defffe04 	addi	sp,sp,-8
 4000278:	dfc00115 	stw	ra,4(sp)
 400027c:	df000015 	stw	fp,0(sp)
 4000280:	d839883a 	mov	fp,sp
 4000284:	023ffbb4 	movhi	r8,65518
 4000288:	421a7b04 	addi	r8,r8,27116
 400028c:	da37883a 	add	sp,sp,r8
	float sound_loudness = 0;
 4000290:	00bffbb4 	movhi	r2,65518
 4000294:	109a7c04 	addi	r2,r2,27120
 4000298:	1705883a 	add	r2,r2,fp
 400029c:	10000015 	stw	zero,0(r2)
	unsigned int recording_buffer[RECORDING_BUFFER_SIZE], n_samples_in_FIFO;
	unsigned int beep_sound[BEEP_SAMPLES], recording[RECORDING_SAMPLES];
	alt_up_audio_dev *audio_device;
	alt_up_av_config_dev *audio_config;

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);
 40002a0:	01010074 	movhi	r4,1025
 40002a4:	2137a404 	addi	r4,r4,-8560
 40002a8:	400bd740 	call	400bd74 <alt_up_audio_open_dev>
 40002ac:	00fffbb4 	movhi	r3,65518
 40002b0:	18da7d04 	addi	r3,r3,27124
 40002b4:	1f07883a 	add	r3,r3,fp
 40002b8:	18800015 	stw	r2,0(r3)
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
 40002bc:	01010074 	movhi	r4,1025
 40002c0:	2137a804 	addi	r4,r4,-8544
 40002c4:	400c51c0 	call	400c51c <alt_up_av_config_open_dev>
 40002c8:	013ffbb4 	movhi	r4,65518
 40002cc:	211a7e04 	addi	r4,r4,27128
 40002d0:	2709883a 	add	r4,r4,fp
 40002d4:	20800015 	stw	r2,0(r4)

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
 40002d8:	00000306 	br	40002e8 <main+0x74>
		printf("Audio CODEC not ready\n");
 40002dc:	01010074 	movhi	r4,1025
 40002e0:	2137b004 	addi	r4,r4,-8512
 40002e4:	40070b40 	call	40070b4 <puts>

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
 40002e8:	00bffbb4 	movhi	r2,65518
 40002ec:	109a7e04 	addi	r2,r2,27128
 40002f0:	1705883a 	add	r2,r2,fp
 40002f4:	11000017 	ldw	r4,0(r2)
 40002f8:	400c75c0 	call	400c75c <alt_up_av_config_read_ready>
 40002fc:	103ff726 	beq	r2,zero,40002dc <__ram_exceptions_end+0xfbfe0094>
		printf("Audio CODEC not ready\n");
	}

	// resets the audio CODEC just in case
	if (alt_up_av_config_reset(audio_config))
 4000300:	00fffbb4 	movhi	r3,65518
 4000304:	18da7e04 	addi	r3,r3,27128
 4000308:	1f07883a 	add	r3,r3,fp
 400030c:	19000017 	ldw	r4,0(r3)
 4000310:	400c6600 	call	400c660 <alt_up_av_config_reset>
 4000314:	10000326 	beq	r2,zero,4000324 <main+0xb0>
		printf("Error resetting the audio CODEC\n");
 4000318:	01010074 	movhi	r4,1025
 400031c:	2137b604 	addi	r4,r4,-8488
 4000320:	40070b40 	call	40070b4 <puts>


	// initialize the LEDS parallel port
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_LEDS_BASE, 0xFFFFFFFF);	// sets all pins as output
 4000324:	00ffffc4 	movi	r3,-1
 4000328:	00820134 	movhi	r2,2052
 400032c:	10840504 	addi	r2,r2,4116
 4000330:	10c00035 	stwio	r3,0(r2)

	// creates a sinusoid in memory to test the jack output
	printf("Generating sinusoid for beep sound. Please wait...\n");
 4000334:	01010074 	movhi	r4,1025
 4000338:	2137be04 	addi	r4,r4,-8456
 400033c:	40070b40 	call	40070b4 <puts>
	generate_sinusoid(SAMPLING_FREQ, BEEP_FREQUENCY, BEEP_AMPLITUDE, BEEP_SAMPLES, beep_sound);
 4000340:	013ffbb4 	movhi	r4,65518
 4000344:	211b0004 	addi	r4,r4,27648
 4000348:	e105883a 	add	r2,fp,r4
 400034c:	d8800015 	stw	r2,0(sp)
 4000350:	01eee014 	movui	r7,48000
 4000354:	01800044 	movi	r6,1
 4000358:	0150feb4 	movhi	r5,17402
 400035c:	012ee014 	movui	r4,48000
 4000360:	40006a40 	call	40006a4 <generate_sinusoid>
	printf("Sinusoid created\n\n\n");
 4000364:	01010074 	movhi	r4,1025
 4000368:	2137cb04 	addi	r4,r4,-8404
 400036c:	40070b40 	call	40070b4 <puts>

	printf("Make a loud noise to start recording. Try snapping your fingers.\n");
 4000370:	01010074 	movhi	r4,1025
 4000374:	2137d004 	addi	r4,r4,-8384
 4000378:	40070b40 	call	40070b4 <puts>
	// infinite loop that monitors the sound loudness
	while(1)
	{
		// reads the incoming FIFO from the audio CODEC (audio from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);	// checks how many elements are in the FIFO
 400037c:	000b883a 	mov	r5,zero
 4000380:	00bffbb4 	movhi	r2,65518
 4000384:	109a7d04 	addi	r2,r2,27124
 4000388:	1705883a 	add	r2,r2,fp
 400038c:	11000017 	ldw	r4,0(r2)
 4000390:	400c01c0 	call	400c01c <alt_up_audio_read_fifo_avail>
 4000394:	00fffbb4 	movhi	r3,65518
 4000398:	18da7f04 	addi	r3,r3,27132
 400039c:	1f07883a 	add	r3,r3,fp
 40003a0:	18800015 	stw	r2,0(r3)
		alt_up_audio_read_fifo(audio_device, recording_buffer, n_samples_in_FIFO, 0);	// reads the content of the FIFO
 40003a4:	013ffbb4 	movhi	r4,65518
 40003a8:	211a7f04 	addi	r4,r4,27132
 40003ac:	2709883a 	add	r4,r4,fp
 40003b0:	20c00017 	ldw	r3,0(r4)
 40003b4:	013ffbb4 	movhi	r4,65518
 40003b8:	211a8004 	addi	r4,r4,27136
 40003bc:	e105883a 	add	r2,fp,r4
 40003c0:	000f883a 	mov	r7,zero
 40003c4:	180d883a 	mov	r6,r3
 40003c8:	100b883a 	mov	r5,r2
 40003cc:	00bffbb4 	movhi	r2,65518
 40003d0:	109a7d04 	addi	r2,r2,27124
 40003d4:	1705883a 	add	r2,r2,fp
 40003d8:	11000017 	ldw	r4,0(r2)
 40003dc:	400c27c0 	call	400c27c <alt_up_audio_read_fifo>

		sound_loudness = average_amplitude(recording_buffer, n_samples_in_FIFO);	// computes the sound loudness
 40003e0:	013ffbb4 	movhi	r4,65518
 40003e4:	211a7f04 	addi	r4,r4,27132
 40003e8:	2709883a 	add	r4,r4,fp
 40003ec:	20c00017 	ldw	r3,0(r4)
 40003f0:	013ffbb4 	movhi	r4,65518
 40003f4:	211a8004 	addi	r4,r4,27136
 40003f8:	e105883a 	add	r2,fp,r4
 40003fc:	180b883a 	mov	r5,r3
 4000400:	1009883a 	mov	r4,r2
 4000404:	40009400 	call	4000940 <average_amplitude>
 4000408:	00fffbb4 	movhi	r3,65518
 400040c:	18da7c04 	addi	r3,r3,27120
 4000410:	1f07883a 	add	r3,r3,fp
 4000414:	18800015 	stw	r2,0(r3)
		show_amplitude_on_LEDS(sound_loudness);		// shows the amplitude on the LEDs
 4000418:	00bffbb4 	movhi	r2,65518
 400041c:	109a7c04 	addi	r2,r2,27120
 4000420:	1705883a 	add	r2,r2,fp
 4000424:	11000017 	ldw	r4,0(r2)
 4000428:	40008a40 	call	40008a4 <show_amplitude_on_LEDS>
		if (sound_loudness > LOUDNESS_THRESHOLD)
 400042c:	014fc034 	movhi	r5,16128
 4000430:	00fffbb4 	movhi	r3,65518
 4000434:	18da7c04 	addi	r3,r3,27120
 4000438:	1f07883a 	add	r3,r3,fp
 400043c:	19000017 	ldw	r4,0(r3)
 4000440:	4003b740 	call	4003b74 <__gesf2>
 4000444:	0080520e 	bge	zero,r2,4000590 <main+0x31c>
		{
			printf("Loud noise detected! Recording starting in:\n3...\n");
 4000448:	01010074 	movhi	r4,1025
 400044c:	2137e104 	addi	r4,r4,-8316
 4000450:	40070b40 	call	40070b4 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 4000454:	013ffbb4 	movhi	r4,65518
 4000458:	211b0004 	addi	r4,r4,27648
 400045c:	e105883a 	add	r2,fp,r4
 4000460:	00fffbb4 	movhi	r3,65518
 4000464:	18da7d04 	addi	r3,r3,27124
 4000468:	1f07883a 	add	r3,r3,fp
 400046c:	19800017 	ldw	r6,0(r3)
 4000470:	016ee014 	movui	r5,48000
 4000474:	1009883a 	mov	r4,r2
 4000478:	40005940 	call	4000594 <play_file>
			usleep(1000000);
 400047c:	010003f4 	movhi	r4,15
 4000480:	21109004 	addi	r4,r4,16960
 4000484:	400a4180 	call	400a418 <usleep>
			printf("2...\n");
 4000488:	01010074 	movhi	r4,1025
 400048c:	2137ee04 	addi	r4,r4,-8264
 4000490:	40070b40 	call	40070b4 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 4000494:	013ffbb4 	movhi	r4,65518
 4000498:	211b0004 	addi	r4,r4,27648
 400049c:	e105883a 	add	r2,fp,r4
 40004a0:	00fffbb4 	movhi	r3,65518
 40004a4:	18da7d04 	addi	r3,r3,27124
 40004a8:	1f07883a 	add	r3,r3,fp
 40004ac:	19800017 	ldw	r6,0(r3)
 40004b0:	016ee014 	movui	r5,48000
 40004b4:	1009883a 	mov	r4,r2
 40004b8:	40005940 	call	4000594 <play_file>
			usleep(1000000);
 40004bc:	010003f4 	movhi	r4,15
 40004c0:	21109004 	addi	r4,r4,16960
 40004c4:	400a4180 	call	400a418 <usleep>
			printf("1...\n");
 40004c8:	01010074 	movhi	r4,1025
 40004cc:	2137f004 	addi	r4,r4,-8256
 40004d0:	40070b40 	call	40070b4 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 40004d4:	013ffbb4 	movhi	r4,65518
 40004d8:	211b0004 	addi	r4,r4,27648
 40004dc:	e105883a 	add	r2,fp,r4
 40004e0:	00fffbb4 	movhi	r3,65518
 40004e4:	18da7d04 	addi	r3,r3,27124
 40004e8:	1f07883a 	add	r3,r3,fp
 40004ec:	19800017 	ldw	r6,0(r3)
 40004f0:	016ee014 	movui	r5,48000
 40004f4:	1009883a 	mov	r4,r2
 40004f8:	40005940 	call	4000594 <play_file>
			usleep(1000000);
 40004fc:	010003f4 	movhi	r4,15
 4000500:	21109004 	addi	r4,r4,16960
 4000504:	400a4180 	call	400a418 <usleep>

			printf("Recording...\n");
 4000508:	01010074 	movhi	r4,1025
 400050c:	2137f204 	addi	r4,r4,-8248
 4000510:	40070b40 	call	40070b4 <puts>
			start_recording(recording, RECORDING_SAMPLES, audio_device);	// starts the recording
 4000514:	008000f4 	movhi	r2,3
 4000518:	10bc0404 	addi	r2,r2,-4080
 400051c:	013ffbb4 	movhi	r4,65518
 4000520:	211a7c04 	addi	r4,r4,27120
 4000524:	2709883a 	add	r4,r4,fp
 4000528:	2085883a 	add	r2,r4,r2
 400052c:	00fffbb4 	movhi	r3,65518
 4000530:	18da7d04 	addi	r3,r3,27124
 4000534:	1f07883a 	add	r3,r3,fp
 4000538:	19800017 	ldw	r6,0(r3)
 400053c:	01400134 	movhi	r5,4
 4000540:	296a6004 	addi	r5,r5,-22144
 4000544:	1009883a 	mov	r4,r2
 4000548:	4000a880 	call	4000a88 <start_recording>
			printf("Finished recording...\n");
 400054c:	01010074 	movhi	r4,1025
 4000550:	2137f604 	addi	r4,r4,-8232
 4000554:	40070b40 	call	40070b4 <puts>
			play_file(recording, RECORDING_SAMPLES, audio_device);			// plays back the recording
 4000558:	008000f4 	movhi	r2,3
 400055c:	10bc0404 	addi	r2,r2,-4080
 4000560:	013ffbb4 	movhi	r4,65518
 4000564:	211a7c04 	addi	r4,r4,27120
 4000568:	2709883a 	add	r4,r4,fp
 400056c:	2085883a 	add	r2,r4,r2
 4000570:	00fffbb4 	movhi	r3,65518
 4000574:	18da7d04 	addi	r3,r3,27124
 4000578:	1f07883a 	add	r3,r3,fp
 400057c:	19800017 	ldw	r6,0(r3)
 4000580:	01400134 	movhi	r5,4
 4000584:	296a6004 	addi	r5,r5,-22144
 4000588:	1009883a 	mov	r4,r2
 400058c:	40005940 	call	4000594 <play_file>
		}
	}
 4000590:	003f7a06 	br	400037c <__ram_exceptions_end+0xfbfe0134>

04000594 <play_file>:



// this function plays an audio file trough the output jack (green). To do so it needs to send bursts of data to the outgoing FIFO.
void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device)
{
 4000594:	defff804 	addi	sp,sp,-32
 4000598:	dfc00715 	stw	ra,28(sp)
 400059c:	df000615 	stw	fp,24(sp)
 40005a0:	df000604 	addi	fp,sp,24
 40005a4:	e13ffd15 	stw	r4,-12(fp)
 40005a8:	e17ffe15 	stw	r5,-8(fp)
 40005ac:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)
 40005b0:	00801904 	movi	r2,100
 40005b4:	e0bffb15 	stw	r2,-20(fp)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 40005b8:	e03ffa15 	stw	zero,-24(fp)
 40005bc:	00003006 	br	4000680 <play_file+0xec>
	{
		file_pointer = file + i;
 40005c0:	e0bffa17 	ldw	r2,-24(fp)
 40005c4:	1085883a 	add	r2,r2,r2
 40005c8:	1085883a 	add	r2,r2,r2
 40005cc:	1007883a 	mov	r3,r2
 40005d0:	e0bffd17 	ldw	r2,-12(fp)
 40005d4:	10c5883a 	add	r2,r2,r3
 40005d8:	e0bffc15 	stw	r2,-16(fp)
		if (file_size - i > BURST_LENGTH) {
 40005dc:	e0fffe17 	ldw	r3,-8(fp)
 40005e0:	e0bffa17 	ldw	r2,-24(fp)
 40005e4:	1885c83a 	sub	r2,r3,r2
 40005e8:	e0fffb17 	ldw	r3,-20(fp)
 40005ec:	18800b2e 	bgeu	r3,r2,400061c <play_file+0x88>
			alt_up_audio_play_r(audio_device, file_pointer, BURST_LENGTH);
 40005f0:	e0bffb17 	ldw	r2,-20(fp)
 40005f4:	100d883a 	mov	r6,r2
 40005f8:	e17ffc17 	ldw	r5,-16(fp)
 40005fc:	e13fff17 	ldw	r4,-4(fp)
 4000600:	400c1ac0 	call	400c1ac <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, BURST_LENGTH);
 4000604:	e0bffb17 	ldw	r2,-20(fp)
 4000608:	100d883a 	mov	r6,r2
 400060c:	e17ffc17 	ldw	r5,-16(fp)
 4000610:	e13fff17 	ldw	r4,-4(fp)
 4000614:	400c2140 	call	400c214 <alt_up_audio_play_l>
 4000618:	00000e06 	br	4000654 <play_file+0xc0>
		} else {
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
 400061c:	e0fffe17 	ldw	r3,-8(fp)
 4000620:	e0bffa17 	ldw	r2,-24(fp)
 4000624:	1885c83a 	sub	r2,r3,r2
 4000628:	100d883a 	mov	r6,r2
 400062c:	e17ffc17 	ldw	r5,-16(fp)
 4000630:	e13fff17 	ldw	r4,-4(fp)
 4000634:	400c1ac0 	call	400c1ac <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
 4000638:	e0fffe17 	ldw	r3,-8(fp)
 400063c:	e0bffa17 	ldw	r2,-24(fp)
 4000640:	1885c83a 	sub	r2,r3,r2
 4000644:	100d883a 	mov	r6,r2
 4000648:	e17ffc17 	ldw	r5,-16(fp)
 400064c:	e13fff17 	ldw	r4,-4(fp)
 4000650:	400c2140 	call	400c214 <alt_up_audio_play_l>
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
 4000654:	0001883a 	nop
 4000658:	000b883a 	mov	r5,zero
 400065c:	e13fff17 	ldw	r4,-4(fp)
 4000660:	400c14c0 	call	400c14c <alt_up_audio_write_fifo_space>
 4000664:	1007883a 	mov	r3,r2
 4000668:	e0bffb17 	ldw	r2,-20(fp)
 400066c:	18bffa36 	bltu	r3,r2,4000658 <__ram_exceptions_end+0xfbfe0410>
{
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 4000670:	e0fffa17 	ldw	r3,-24(fp)
 4000674:	e0bffb17 	ldw	r2,-20(fp)
 4000678:	1885883a 	add	r2,r3,r2
 400067c:	e0bffa15 	stw	r2,-24(fp)
 4000680:	e0bffe17 	ldw	r2,-8(fp)
 4000684:	e0fffa17 	ldw	r3,-24(fp)
 4000688:	18bfcd36 	bltu	r3,r2,40005c0 <__ram_exceptions_end+0xfbfe0378>
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
	}
}
 400068c:	0001883a 	nop
 4000690:	e037883a 	mov	sp,fp
 4000694:	dfc00117 	ldw	ra,4(sp)
 4000698:	df000017 	ldw	fp,0(sp)
 400069c:	dec00204 	addi	sp,sp,8
 40006a0:	f800283a 	ret

040006a4 <generate_sinusoid>:


// creates a sinusoidal waveform in the memory (at the location pointed by "unsigned int *file"), n_samples specifies the length
// of the file to create.
void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int n_samples, unsigned int *file)
{
 40006a4:	defff304 	addi	sp,sp,-52
 40006a8:	dfc00c15 	stw	ra,48(sp)
 40006ac:	df000b15 	stw	fp,44(sp)
 40006b0:	dcc00a15 	stw	r19,40(sp)
 40006b4:	dc800915 	stw	r18,36(sp)
 40006b8:	dc400815 	stw	r17,32(sp)
 40006bc:	dc000715 	stw	r16,28(sp)
 40006c0:	df000b04 	addi	fp,sp,44
 40006c4:	e13ff815 	stw	r4,-32(fp)
 40006c8:	e17ff915 	stw	r5,-28(fp)
 40006cc:	3005883a 	mov	r2,r6
 40006d0:	e1fffb15 	stw	r7,-20(fp)
 40006d4:	e0bffa05 	stb	r2,-24(fp)
	int i, sample_amplitude, amplitude_factor;

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
 40006d8:	e0bffa07 	ldb	r2,-24(fp)
 40006dc:	1009883a 	mov	r4,r2
 40006e0:	40046480 	call	4004648 <__floatsisf>
 40006e4:	1007883a 	mov	r3,r2
 40006e8:	0153e034 	movhi	r5,20352
 40006ec:	1809883a 	mov	r4,r3
 40006f0:	4003cf80 	call	4003cf8 <__mulsf3>
 40006f4:	1007883a 	mov	r3,r2
 40006f8:	1805883a 	mov	r2,r3
 40006fc:	1009883a 	mov	r4,r2
 4000700:	4006cc80 	call	4006cc8 <__extendsfdf2>
 4000704:	1011883a 	mov	r8,r2
 4000708:	1813883a 	mov	r9,r3
 400070c:	000d883a 	mov	r6,zero
 4000710:	01d01674 	movhi	r7,16473
 4000714:	4009883a 	mov	r4,r8
 4000718:	480b883a 	mov	r5,r9
 400071c:	40050180 	call	4005018 <__divdf3>
 4000720:	1009883a 	mov	r4,r2
 4000724:	180b883a 	mov	r5,r3
 4000728:	2005883a 	mov	r2,r4
 400072c:	2807883a 	mov	r3,r5
 4000730:	1009883a 	mov	r4,r2
 4000734:	180b883a 	mov	r5,r3
 4000738:	4006b6c0 	call	4006b6c <__fixdfsi>
 400073c:	e0bff615 	stw	r2,-40(fp)
	for(i=0; i<n_samples; i++)
 4000740:	e03ff515 	stw	zero,-44(fp)
 4000744:	00004a06 	br	4000870 <generate_sinusoid+0x1cc>
	{
		sample_amplitude = amplitude_factor *  sin(2 * M_PI * i * freq / sampling_freq);
 4000748:	e13ff617 	ldw	r4,-40(fp)
 400074c:	4006bec0 	call	4006bec <__floatsidf>
 4000750:	1021883a 	mov	r16,r2
 4000754:	1823883a 	mov	r17,r3
 4000758:	e13ff517 	ldw	r4,-44(fp)
 400075c:	4006bec0 	call	4006bec <__floatsidf>
 4000760:	1011883a 	mov	r8,r2
 4000764:	1813883a 	mov	r9,r3
 4000768:	01951134 	movhi	r6,21572
 400076c:	318b4604 	addi	r6,r6,11544
 4000770:	01d00674 	movhi	r7,16409
 4000774:	39c87ec4 	addi	r7,r7,8699
 4000778:	4009883a 	mov	r4,r8
 400077c:	480b883a 	mov	r5,r9
 4000780:	4005b580 	call	4005b58 <__muldf3>
 4000784:	1009883a 	mov	r4,r2
 4000788:	180b883a 	mov	r5,r3
 400078c:	2025883a 	mov	r18,r4
 4000790:	2827883a 	mov	r19,r5
 4000794:	e13ff917 	ldw	r4,-28(fp)
 4000798:	4006cc80 	call	4006cc8 <__extendsfdf2>
 400079c:	1009883a 	mov	r4,r2
 40007a0:	180b883a 	mov	r5,r3
 40007a4:	200d883a 	mov	r6,r4
 40007a8:	280f883a 	mov	r7,r5
 40007ac:	9009883a 	mov	r4,r18
 40007b0:	980b883a 	mov	r5,r19
 40007b4:	4005b580 	call	4005b58 <__muldf3>
 40007b8:	1009883a 	mov	r4,r2
 40007bc:	180b883a 	mov	r5,r3
 40007c0:	2025883a 	mov	r18,r4
 40007c4:	2827883a 	mov	r19,r5
 40007c8:	e13ff817 	ldw	r4,-32(fp)
 40007cc:	4006bec0 	call	4006bec <__floatsidf>
 40007d0:	1009883a 	mov	r4,r2
 40007d4:	180b883a 	mov	r5,r3
 40007d8:	200d883a 	mov	r6,r4
 40007dc:	280f883a 	mov	r7,r5
 40007e0:	9009883a 	mov	r4,r18
 40007e4:	980b883a 	mov	r5,r19
 40007e8:	40050180 	call	4005018 <__divdf3>
 40007ec:	1009883a 	mov	r4,r2
 40007f0:	180b883a 	mov	r5,r3
 40007f4:	2005883a 	mov	r2,r4
 40007f8:	2807883a 	mov	r3,r5
 40007fc:	1009883a 	mov	r4,r2
 4000800:	180b883a 	mov	r5,r3
 4000804:	4000b700 	call	4000b70 <sin>
 4000808:	1009883a 	mov	r4,r2
 400080c:	180b883a 	mov	r5,r3
 4000810:	200d883a 	mov	r6,r4
 4000814:	280f883a 	mov	r7,r5
 4000818:	8009883a 	mov	r4,r16
 400081c:	880b883a 	mov	r5,r17
 4000820:	4005b580 	call	4005b58 <__muldf3>
 4000824:	1009883a 	mov	r4,r2
 4000828:	180b883a 	mov	r5,r3
 400082c:	2005883a 	mov	r2,r4
 4000830:	2807883a 	mov	r3,r5
 4000834:	1009883a 	mov	r4,r2
 4000838:	180b883a 	mov	r5,r3
 400083c:	4006b6c0 	call	4006b6c <__fixdfsi>
 4000840:	e0bff715 	stw	r2,-36(fp)
		IOWR_32DIRECT(file, i*4, sample_amplitude);
 4000844:	e0bff517 	ldw	r2,-44(fp)
 4000848:	1085883a 	add	r2,r2,r2
 400084c:	1085883a 	add	r2,r2,r2
 4000850:	1007883a 	mov	r3,r2
 4000854:	e0800217 	ldw	r2,8(fp)
 4000858:	10c5883a 	add	r2,r2,r3
 400085c:	e0fff717 	ldw	r3,-36(fp)
 4000860:	10c00035 	stwio	r3,0(r2)
void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int n_samples, unsigned int *file)
{
	int i, sample_amplitude, amplitude_factor;

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
	for(i=0; i<n_samples; i++)
 4000864:	e0bff517 	ldw	r2,-44(fp)
 4000868:	10800044 	addi	r2,r2,1
 400086c:	e0bff515 	stw	r2,-44(fp)
 4000870:	e0fff517 	ldw	r3,-44(fp)
 4000874:	e0bffb17 	ldw	r2,-20(fp)
 4000878:	18bfb336 	bltu	r3,r2,4000748 <__ram_exceptions_end+0xfbfe0500>
	{
		sample_amplitude = amplitude_factor *  sin(2 * M_PI * i * freq / sampling_freq);
		IOWR_32DIRECT(file, i*4, sample_amplitude);
	}
}
 400087c:	0001883a 	nop
 4000880:	e6fffc04 	addi	sp,fp,-16
 4000884:	dfc00517 	ldw	ra,20(sp)
 4000888:	df000417 	ldw	fp,16(sp)
 400088c:	dcc00317 	ldw	r19,12(sp)
 4000890:	dc800217 	ldw	r18,8(sp)
 4000894:	dc400117 	ldw	r17,4(sp)
 4000898:	dc000017 	ldw	r16,0(sp)
 400089c:	dec00604 	addi	sp,sp,24
 40008a0:	f800283a 	ret

040008a4 <show_amplitude_on_LEDS>:


// outputs the amplitude on the LEDs
void show_amplitude_on_LEDS(float amplitude)
{
 40008a4:	defffd04 	addi	sp,sp,-12
 40008a8:	dfc00215 	stw	ra,8(sp)
 40008ac:	df000115 	stw	fp,4(sp)
 40008b0:	df000104 	addi	fp,sp,4
 40008b4:	e13fff15 	stw	r4,-4(fp)
	amplitude = sqrt(amplitude);	// the way we perceive sound is not linear, this is why I take the square root of the amplitude
 40008b8:	e13fff17 	ldw	r4,-4(fp)
 40008bc:	4006cc80 	call	4006cc8 <__extendsfdf2>
 40008c0:	100b883a 	mov	r5,r2
 40008c4:	180d883a 	mov	r6,r3
 40008c8:	2809883a 	mov	r4,r5
 40008cc:	300b883a 	mov	r5,r6
 40008d0:	4000c600 	call	4000c60 <sqrt>
 40008d4:	100b883a 	mov	r5,r2
 40008d8:	180d883a 	mov	r6,r3
 40008dc:	2809883a 	mov	r4,r5
 40008e0:	300b883a 	mov	r5,r6
 40008e4:	4006dd80 	call	4006dd8 <__truncdfsf2>
 40008e8:	1007883a 	mov	r3,r2
 40008ec:	e0ffff15 	stw	r3,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, (0x01<<((int)(amplitude*PIO_LEDS_NUMBER)))-1);
 40008f0:	01504834 	movhi	r5,16672
 40008f4:	e13fff17 	ldw	r4,-4(fp)
 40008f8:	4003cf80 	call	4003cf8 <__mulsf3>
 40008fc:	1007883a 	mov	r3,r2
 4000900:	1805883a 	mov	r2,r3
 4000904:	1009883a 	mov	r4,r2
 4000908:	40045d80 	call	40045d8 <__fixsfsi>
 400090c:	1007883a 	mov	r3,r2
 4000910:	00800044 	movi	r2,1
 4000914:	10c4983a 	sll	r2,r2,r3
 4000918:	10ffffc4 	addi	r3,r2,-1
 400091c:	00820134 	movhi	r2,2052
 4000920:	10840404 	addi	r2,r2,4112
 4000924:	10c00035 	stwio	r3,0(r2)
}
 4000928:	0001883a 	nop
 400092c:	e037883a 	mov	sp,fp
 4000930:	dfc00117 	ldw	ra,4(sp)
 4000934:	df000017 	ldw	fp,0(sp)
 4000938:	dec00204 	addi	sp,sp,8
 400093c:	f800283a 	ret

04000940 <average_amplitude>:


// computes the average amplitude of an array of sound samples
float average_amplitude(int *data, int length)
{
 4000940:	defffa04 	addi	sp,sp,-24
 4000944:	dfc00515 	stw	ra,20(sp)
 4000948:	df000415 	stw	fp,16(sp)
 400094c:	df000404 	addi	fp,sp,16
 4000950:	e13ffe15 	stw	r4,-8(fp)
 4000954:	e17fff15 	stw	r5,-4(fp)
	int i;
	float average_amplitude = 0;
 4000958:	e03ffd15 	stw	zero,-12(fp)

	// computes the average
	for (i=0; i<length; i++)
 400095c:	e03ffc15 	stw	zero,-16(fp)
 4000960:	00002a06 	br	4000a0c <average_amplitude+0xcc>
	{
		if (data[i] < 0)
 4000964:	e0bffc17 	ldw	r2,-16(fp)
 4000968:	1085883a 	add	r2,r2,r2
 400096c:	1085883a 	add	r2,r2,r2
 4000970:	1007883a 	mov	r3,r2
 4000974:	e0bffe17 	ldw	r2,-8(fp)
 4000978:	10c5883a 	add	r2,r2,r3
 400097c:	10800017 	ldw	r2,0(r2)
 4000980:	1000100e 	bge	r2,zero,40009c4 <average_amplitude+0x84>
			average_amplitude -= data[i];
 4000984:	e0bffc17 	ldw	r2,-16(fp)
 4000988:	1085883a 	add	r2,r2,r2
 400098c:	1085883a 	add	r2,r2,r2
 4000990:	1007883a 	mov	r3,r2
 4000994:	e0bffe17 	ldw	r2,-8(fp)
 4000998:	10c5883a 	add	r2,r2,r3
 400099c:	10800017 	ldw	r2,0(r2)
 40009a0:	1009883a 	mov	r4,r2
 40009a4:	40046480 	call	4004648 <__floatsisf>
 40009a8:	1007883a 	mov	r3,r2
 40009ac:	180b883a 	mov	r5,r3
 40009b0:	e13ffd17 	ldw	r4,-12(fp)
 40009b4:	40040f40 	call	40040f4 <__subsf3>
 40009b8:	1007883a 	mov	r3,r2
 40009bc:	e0fffd15 	stw	r3,-12(fp)
 40009c0:	00000f06 	br	4000a00 <average_amplitude+0xc0>
		else
			average_amplitude += data[i];
 40009c4:	e0bffc17 	ldw	r2,-16(fp)
 40009c8:	1085883a 	add	r2,r2,r2
 40009cc:	1085883a 	add	r2,r2,r2
 40009d0:	1007883a 	mov	r3,r2
 40009d4:	e0bffe17 	ldw	r2,-8(fp)
 40009d8:	10c5883a 	add	r2,r2,r3
 40009dc:	10800017 	ldw	r2,0(r2)
 40009e0:	1009883a 	mov	r4,r2
 40009e4:	40046480 	call	4004648 <__floatsisf>
 40009e8:	1007883a 	mov	r3,r2
 40009ec:	180b883a 	mov	r5,r3
 40009f0:	e13ffd17 	ldw	r4,-12(fp)
 40009f4:	400326c0 	call	400326c <__addsf3>
 40009f8:	1007883a 	mov	r3,r2
 40009fc:	e0fffd15 	stw	r3,-12(fp)
{
	int i;
	float average_amplitude = 0;

	// computes the average
	for (i=0; i<length; i++)
 4000a00:	e0bffc17 	ldw	r2,-16(fp)
 4000a04:	10800044 	addi	r2,r2,1
 4000a08:	e0bffc15 	stw	r2,-16(fp)
 4000a0c:	e0fffc17 	ldw	r3,-16(fp)
 4000a10:	e0bfff17 	ldw	r2,-4(fp)
 4000a14:	18bfd316 	blt	r3,r2,4000964 <__ram_exceptions_end+0xfbfe071c>
		else
			average_amplitude += data[i];
	}

	// normalizes to a range from 0 to 1
	average_amplitude /= INT_MAX;
 4000a18:	0153c034 	movhi	r5,20224
 4000a1c:	e13ffd17 	ldw	r4,-12(fp)
 4000a20:	40037340 	call	4003734 <__divsf3>
 4000a24:	1007883a 	mov	r3,r2
 4000a28:	e0fffd15 	stw	r3,-12(fp)
	average_amplitude /= length;
 4000a2c:	e13fff17 	ldw	r4,-4(fp)
 4000a30:	40046480 	call	4004648 <__floatsisf>
 4000a34:	1007883a 	mov	r3,r2
 4000a38:	180b883a 	mov	r5,r3
 4000a3c:	e13ffd17 	ldw	r4,-12(fp)
 4000a40:	40037340 	call	4003734 <__divsf3>
 4000a44:	1007883a 	mov	r3,r2
 4000a48:	e0fffd15 	stw	r3,-12(fp)
	if (average_amplitude < 0)
 4000a4c:	000b883a 	mov	r5,zero
 4000a50:	e13ffd17 	ldw	r4,-12(fp)
 4000a54:	4003c300 	call	4003c30 <__lesf2>
 4000a58:	1000030e 	bge	r2,zero,4000a68 <average_amplitude+0x128>
		average_amplitude *= -1;
 4000a5c:	e0bffd17 	ldw	r2,-12(fp)
 4000a60:	10a0003c 	xorhi	r2,r2,32768
 4000a64:	e0bffd15 	stw	r2,-12(fp)

	return average_amplitude;
 4000a68:	e0bffd17 	ldw	r2,-12(fp)
 4000a6c:	1007883a 	mov	r3,r2
}
 4000a70:	1805883a 	mov	r2,r3
 4000a74:	e037883a 	mov	sp,fp
 4000a78:	dfc00117 	ldw	ra,4(sp)
 4000a7c:	df000017 	ldw	fp,0(sp)
 4000a80:	dec00204 	addi	sp,sp,8
 4000a84:	f800283a 	ret

04000a88 <start_recording>:



// records a sound from the microphone and stores it in the SDRAM (at location pointed by *file)
void start_recording(unsigned int *file, unsigned int n_samples, alt_up_audio_dev *audio_device)
{
 4000a88:	defff804 	addi	sp,sp,-32
 4000a8c:	dfc00715 	stw	ra,28(sp)
 4000a90:	df000615 	stw	fp,24(sp)
 4000a94:	df000604 	addi	fp,sp,24
 4000a98:	e13ffd15 	stw	r4,-12(fp)
 4000a9c:	e17ffe15 	stw	r5,-8(fp)
 4000aa0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, *end_of_file;
	unsigned int n_samples_in_FIFO = 0;
 4000aa4:	e03ffb15 	stw	zero,-20(fp)

	if (n_samples > RECORDING_SAMPLES)
 4000aa8:	e0fffe17 	ldw	r3,-8(fp)
 4000aac:	00800134 	movhi	r2,4
 4000ab0:	10aa6004 	addi	r2,r2,-22144
 4000ab4:	10c0042e 	bgeu	r2,r3,4000ac8 <start_recording+0x40>
	{
		printf("Error, can't record a file so long\n");
 4000ab8:	01010074 	movhi	r4,1025
 4000abc:	2137fc04 	addi	r4,r4,-8208
 4000ac0:	40070b40 	call	40070b4 <puts>
		return;
 4000ac4:	00002506 	br	4000b5c <start_recording+0xd4>
	}
	file_pointer = file;
 4000ac8:	e0bffd17 	ldw	r2,-12(fp)
 4000acc:	e0bffa15 	stw	r2,-24(fp)
	end_of_file = &(file[n_samples]);
 4000ad0:	e0bffe17 	ldw	r2,-8(fp)
 4000ad4:	1085883a 	add	r2,r2,r2
 4000ad8:	1085883a 	add	r2,r2,r2
 4000adc:	1007883a 	mov	r3,r2
 4000ae0:	e0bffd17 	ldw	r2,-12(fp)
 4000ae4:	10c5883a 	add	r2,r2,r3
 4000ae8:	e0bffc15 	stw	r2,-16(fp)

	while(file_pointer < end_of_file )
 4000aec:	00001806 	br	4000b50 <start_recording+0xc8>
	{
		// reads data from the incoming FIFO (sound from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);
 4000af0:	000b883a 	mov	r5,zero
 4000af4:	e13fff17 	ldw	r4,-4(fp)
 4000af8:	400c01c0 	call	400c01c <alt_up_audio_read_fifo_avail>
 4000afc:	e0bffb15 	stw	r2,-20(fp)
		alt_up_audio_read_fifo(audio_device, file_pointer, n_samples_in_FIFO, 0);
 4000b00:	e0bffb17 	ldw	r2,-20(fp)
 4000b04:	000f883a 	mov	r7,zero
 4000b08:	100d883a 	mov	r6,r2
 4000b0c:	e17ffa17 	ldw	r5,-24(fp)
 4000b10:	e13fff17 	ldw	r4,-4(fp)
 4000b14:	400c27c0 	call	400c27c <alt_up_audio_read_fifo>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs
 4000b18:	e0bffb17 	ldw	r2,-20(fp)
 4000b1c:	100b883a 	mov	r5,r2
 4000b20:	e13ffa17 	ldw	r4,-24(fp)
 4000b24:	40009400 	call	4000940 <average_amplitude>
 4000b28:	1007883a 	mov	r3,r2
 4000b2c:	1809883a 	mov	r4,r3
 4000b30:	40008a40 	call	40008a4 <show_amplitude_on_LEDS>

		file_pointer += n_samples_in_FIFO;
 4000b34:	e0bffb17 	ldw	r2,-20(fp)
 4000b38:	1085883a 	add	r2,r2,r2
 4000b3c:	1085883a 	add	r2,r2,r2
 4000b40:	1007883a 	mov	r3,r2
 4000b44:	e0bffa17 	ldw	r2,-24(fp)
 4000b48:	10c5883a 	add	r2,r2,r3
 4000b4c:	e0bffa15 	stw	r2,-24(fp)
		return;
	}
	file_pointer = file;
	end_of_file = &(file[n_samples]);

	while(file_pointer < end_of_file )
 4000b50:	e0fffa17 	ldw	r3,-24(fp)
 4000b54:	e0bffc17 	ldw	r2,-16(fp)
 4000b58:	18bfe536 	bltu	r3,r2,4000af0 <__ram_exceptions_end+0xfbfe08a8>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs

		file_pointer += n_samples_in_FIFO;
	}
}
 4000b5c:	e037883a 	mov	sp,fp
 4000b60:	dfc00117 	ldw	ra,4(sp)
 4000b64:	df000017 	ldw	fp,0(sp)
 4000b68:	dec00204 	addi	sp,sp,8
 4000b6c:	f800283a 	ret

04000b70 <sin>:
 4000b70:	00a00034 	movhi	r2,32768
 4000b74:	defffa04 	addi	sp,sp,-24
 4000b78:	10bfffc4 	addi	r2,r2,-1
 4000b7c:	00cffa74 	movhi	r3,16361
 4000b80:	dfc00515 	stw	ra,20(sp)
 4000b84:	2884703a 	and	r2,r5,r2
 4000b88:	18c87ec4 	addi	r3,r3,8699
 4000b8c:	1880180e 	bge	r3,r2,4000bf0 <sin+0x80>
 4000b90:	00dffc34 	movhi	r3,32752
 4000b94:	18ffffc4 	addi	r3,r3,-1
 4000b98:	1880060e 	bge	r3,r2,4000bb4 <sin+0x44>
 4000b9c:	280f883a 	mov	r7,r5
 4000ba0:	200d883a 	mov	r6,r4
 4000ba4:	40062700 	call	4006270 <__subdf3>
 4000ba8:	dfc00517 	ldw	ra,20(sp)
 4000bac:	dec00604 	addi	sp,sp,24
 4000bb0:	f800283a 	ret
 4000bb4:	d9800104 	addi	r6,sp,4
 4000bb8:	4000d900 	call	4000d90 <__ieee754_rem_pio2>
 4000bbc:	108000cc 	andi	r2,r2,3
 4000bc0:	00c00044 	movi	r3,1
 4000bc4:	10c01926 	beq	r2,r3,4000c2c <sin+0xbc>
 4000bc8:	01000084 	movi	r4,2
 4000bcc:	11000f26 	beq	r2,r4,4000c0c <sin+0x9c>
 4000bd0:	10001c26 	beq	r2,zero,4000c44 <sin+0xd4>
 4000bd4:	d9800317 	ldw	r6,12(sp)
 4000bd8:	d9c00417 	ldw	r7,16(sp)
 4000bdc:	d9000117 	ldw	r4,4(sp)
 4000be0:	d9400217 	ldw	r5,8(sp)
 4000be4:	40017840 	call	4001784 <__kernel_cos>
 4000be8:	18e0003c 	xorhi	r3,r3,32768
 4000bec:	003fee06 	br	4000ba8 <__ram_exceptions_end+0xfbfe0960>
 4000bf0:	d8000015 	stw	zero,0(sp)
 4000bf4:	000d883a 	mov	r6,zero
 4000bf8:	000f883a 	mov	r7,zero
 4000bfc:	40029b80 	call	40029b8 <__kernel_sin>
 4000c00:	dfc00517 	ldw	ra,20(sp)
 4000c04:	dec00604 	addi	sp,sp,24
 4000c08:	f800283a 	ret
 4000c0c:	d9800317 	ldw	r6,12(sp)
 4000c10:	d9c00417 	ldw	r7,16(sp)
 4000c14:	d9000117 	ldw	r4,4(sp)
 4000c18:	d9400217 	ldw	r5,8(sp)
 4000c1c:	d8c00015 	stw	r3,0(sp)
 4000c20:	40029b80 	call	40029b8 <__kernel_sin>
 4000c24:	18e0003c 	xorhi	r3,r3,32768
 4000c28:	003fdf06 	br	4000ba8 <__ram_exceptions_end+0xfbfe0960>
 4000c2c:	d9800317 	ldw	r6,12(sp)
 4000c30:	d9c00417 	ldw	r7,16(sp)
 4000c34:	d9000117 	ldw	r4,4(sp)
 4000c38:	d9400217 	ldw	r5,8(sp)
 4000c3c:	40017840 	call	4001784 <__kernel_cos>
 4000c40:	003fd906 	br	4000ba8 <__ram_exceptions_end+0xfbfe0960>
 4000c44:	d9800317 	ldw	r6,12(sp)
 4000c48:	d9c00417 	ldw	r7,16(sp)
 4000c4c:	d9000117 	ldw	r4,4(sp)
 4000c50:	d9400217 	ldw	r5,8(sp)
 4000c54:	d8c00015 	stw	r3,0(sp)
 4000c58:	40029b80 	call	40029b8 <__kernel_sin>
 4000c5c:	003fd206 	br	4000ba8 <__ram_exceptions_end+0xfbfe0960>

04000c60 <sqrt>:
 4000c60:	defff104 	addi	sp,sp,-60
 4000c64:	dd000d15 	stw	r20,52(sp)
 4000c68:	05010074 	movhi	r20,1025
 4000c6c:	dcc00c15 	stw	r19,48(sp)
 4000c70:	dc800b15 	stw	r18,44(sp)
 4000c74:	dc400a15 	stw	r17,40(sp)
 4000c78:	dc000915 	stw	r16,36(sp)
 4000c7c:	dfc00e15 	stw	ra,56(sp)
 4000c80:	a53f9e04 	addi	r20,r20,-392
 4000c84:	2027883a 	mov	r19,r4
 4000c88:	2825883a 	mov	r18,r5
 4000c8c:	40014fc0 	call	40014fc <__ieee754_sqrt>
 4000c90:	1821883a 	mov	r16,r3
 4000c94:	a0c00017 	ldw	r3,0(r20)
 4000c98:	1023883a 	mov	r17,r2
 4000c9c:	00bfffc4 	movi	r2,-1
 4000ca0:	18800a26 	beq	r3,r2,4000ccc <sqrt+0x6c>
 4000ca4:	9809883a 	mov	r4,r19
 4000ca8:	900b883a 	mov	r5,r18
 4000cac:	4002e840 	call	4002e84 <__fpclassifyd>
 4000cb0:	10000626 	beq	r2,zero,4000ccc <sqrt+0x6c>
 4000cb4:	000d883a 	mov	r6,zero
 4000cb8:	000f883a 	mov	r7,zero
 4000cbc:	9809883a 	mov	r4,r19
 4000cc0:	900b883a 	mov	r5,r18
 4000cc4:	4005a640 	call	4005a64 <__ledf2>
 4000cc8:	10000a16 	blt	r2,zero,4000cf4 <sqrt+0x94>
 4000ccc:	8805883a 	mov	r2,r17
 4000cd0:	8007883a 	mov	r3,r16
 4000cd4:	dfc00e17 	ldw	ra,56(sp)
 4000cd8:	dd000d17 	ldw	r20,52(sp)
 4000cdc:	dcc00c17 	ldw	r19,48(sp)
 4000ce0:	dc800b17 	ldw	r18,44(sp)
 4000ce4:	dc400a17 	ldw	r17,40(sp)
 4000ce8:	dc000917 	ldw	r16,36(sp)
 4000cec:	dec00f04 	addi	sp,sp,60
 4000cf0:	f800283a 	ret
 4000cf4:	00800044 	movi	r2,1
 4000cf8:	d8800015 	stw	r2,0(sp)
 4000cfc:	a4000017 	ldw	r16,0(r20)
 4000d00:	00810074 	movhi	r2,1025
 4000d04:	10b80504 	addi	r2,r2,-8172
 4000d08:	d8800115 	stw	r2,4(sp)
 4000d0c:	d8000815 	stw	zero,32(sp)
 4000d10:	dcc00415 	stw	r19,16(sp)
 4000d14:	dc800515 	stw	r18,20(sp)
 4000d18:	dcc00215 	stw	r19,8(sp)
 4000d1c:	dc800315 	stw	r18,12(sp)
 4000d20:	80000a1e 	bne	r16,zero,4000d4c <sqrt+0xec>
 4000d24:	d8000615 	stw	zero,24(sp)
 4000d28:	d8000715 	stw	zero,28(sp)
 4000d2c:	d809883a 	mov	r4,sp
 4000d30:	4002ef80 	call	4002ef8 <matherr>
 4000d34:	10000e26 	beq	r2,zero,4000d70 <sqrt+0x110>
 4000d38:	d8800817 	ldw	r2,32(sp)
 4000d3c:	1000101e 	bne	r2,zero,4000d80 <sqrt+0x120>
 4000d40:	d8800617 	ldw	r2,24(sp)
 4000d44:	d8c00717 	ldw	r3,28(sp)
 4000d48:	003fe206 	br	4000cd4 <__ram_exceptions_end+0xfbfe0a8c>
 4000d4c:	000d883a 	mov	r6,zero
 4000d50:	000f883a 	mov	r7,zero
 4000d54:	0009883a 	mov	r4,zero
 4000d58:	000b883a 	mov	r5,zero
 4000d5c:	40050180 	call	4005018 <__divdf3>
 4000d60:	d8800615 	stw	r2,24(sp)
 4000d64:	d8c00715 	stw	r3,28(sp)
 4000d68:	00800084 	movi	r2,2
 4000d6c:	80bfef1e 	bne	r16,r2,4000d2c <__ram_exceptions_end+0xfbfe0ae4>
 4000d70:	4006fe40 	call	4006fe4 <__errno>
 4000d74:	00c00844 	movi	r3,33
 4000d78:	10c00015 	stw	r3,0(r2)
 4000d7c:	003fee06 	br	4000d38 <__ram_exceptions_end+0xfbfe0af0>
 4000d80:	4006fe40 	call	4006fe4 <__errno>
 4000d84:	d8c00817 	ldw	r3,32(sp)
 4000d88:	10c00015 	stw	r3,0(r2)
 4000d8c:	003fec06 	br	4000d40 <__ram_exceptions_end+0xfbfe0af8>

04000d90 <__ieee754_rem_pio2>:
 4000d90:	02200034 	movhi	r8,32768
 4000d94:	deffea04 	addi	sp,sp,-88
 4000d98:	423fffc4 	addi	r8,r8,-1
 4000d9c:	00cffa74 	movhi	r3,16361
 4000da0:	ddc01315 	stw	r23,76(sp)
 4000da4:	dc400d15 	stw	r17,52(sp)
 4000da8:	dfc01515 	stw	ra,84(sp)
 4000dac:	df001415 	stw	fp,80(sp)
 4000db0:	dd801215 	stw	r22,72(sp)
 4000db4:	dd401115 	stw	r21,68(sp)
 4000db8:	dd001015 	stw	r20,64(sp)
 4000dbc:	dcc00f15 	stw	r19,60(sp)
 4000dc0:	dc800e15 	stw	r18,56(sp)
 4000dc4:	dc000c15 	stw	r16,48(sp)
 4000dc8:	2a2e703a 	and	r23,r5,r8
 4000dcc:	18c87ec4 	addi	r3,r3,8699
 4000dd0:	2823883a 	mov	r17,r5
 4000dd4:	1dc0790e 	bge	r3,r23,4000fbc <__ieee754_rem_pio2+0x22c>
 4000dd8:	009000f4 	movhi	r2,16387
 4000ddc:	10b65ec4 	addi	r2,r2,-9861
 4000de0:	3021883a 	mov	r16,r6
 4000de4:	2027883a 	mov	r19,r4
 4000de8:	15c02316 	blt	r2,r23,4000e78 <__ieee754_rem_pio2+0xe8>
 4000dec:	01cffe74 	movhi	r7,16377
 4000df0:	39c87ec4 	addi	r7,r7,8699
 4000df4:	01951034 	movhi	r6,21568
 4000df8:	01417a0e 	bge	zero,r5,40013e4 <__ieee754_rem_pio2+0x654>
 4000dfc:	40062700 	call	4006270 <__subdf3>
 4000e00:	1025883a 	mov	r18,r2
 4000e04:	008ffe74 	movhi	r2,16377
 4000e08:	10887ec4 	addi	r2,r2,8699
 4000e0c:	1823883a 	mov	r17,r3
 4000e10:	b8808426 	beq	r23,r2,4001024 <__ieee754_rem_pio2+0x294>
 4000e14:	018698b4 	movhi	r6,6754
 4000e18:	01cf7474 	movhi	r7,15825
 4000e1c:	3198cc44 	addi	r6,r6,25393
 4000e20:	39ed1844 	addi	r7,r7,-19359
 4000e24:	9009883a 	mov	r4,r18
 4000e28:	180b883a 	mov	r5,r3
 4000e2c:	40062700 	call	4006270 <__subdf3>
 4000e30:	100d883a 	mov	r6,r2
 4000e34:	180f883a 	mov	r7,r3
 4000e38:	9009883a 	mov	r4,r18
 4000e3c:	880b883a 	mov	r5,r17
 4000e40:	80800015 	stw	r2,0(r16)
 4000e44:	80c00115 	stw	r3,4(r16)
 4000e48:	40062700 	call	4006270 <__subdf3>
 4000e4c:	018698b4 	movhi	r6,6754
 4000e50:	01cf7474 	movhi	r7,15825
 4000e54:	3198cc44 	addi	r6,r6,25393
 4000e58:	39ed1844 	addi	r7,r7,-19359
 4000e5c:	1009883a 	mov	r4,r2
 4000e60:	180b883a 	mov	r5,r3
 4000e64:	40062700 	call	4006270 <__subdf3>
 4000e68:	80800215 	stw	r2,8(r16)
 4000e6c:	80c00315 	stw	r3,12(r16)
 4000e70:	00800044 	movi	r2,1
 4000e74:	00005606 	br	4000fd0 <__ieee754_rem_pio2+0x240>
 4000e78:	00904e74 	movhi	r2,16697
 4000e7c:	10887ec4 	addi	r2,r2,8699
 4000e80:	15c0830e 	bge	r2,r23,4001090 <__ieee754_rem_pio2+0x300>
 4000e84:	009ffc34 	movhi	r2,32752
 4000e88:	10bfffc4 	addi	r2,r2,-1
 4000e8c:	15c05c16 	blt	r2,r23,4001000 <__ieee754_rem_pio2+0x270>
 4000e90:	b829d53a 	srai	r20,r23,20
 4000e94:	a53efa84 	addi	r20,r20,-1046
 4000e98:	a024953a 	slli	r18,r20,20
 4000e9c:	bca5c83a 	sub	r18,r23,r18
 4000ea0:	900b883a 	mov	r5,r18
 4000ea4:	4006b6c0 	call	4006b6c <__fixdfsi>
 4000ea8:	1009883a 	mov	r4,r2
 4000eac:	4006bec0 	call	4006bec <__floatsidf>
 4000eb0:	9809883a 	mov	r4,r19
 4000eb4:	900b883a 	mov	r5,r18
 4000eb8:	100d883a 	mov	r6,r2
 4000ebc:	180f883a 	mov	r7,r3
 4000ec0:	d8800215 	stw	r2,8(sp)
 4000ec4:	d8c00315 	stw	r3,12(sp)
 4000ec8:	40062700 	call	4006270 <__subdf3>
 4000ecc:	000d883a 	mov	r6,zero
 4000ed0:	01d05c34 	movhi	r7,16752
 4000ed4:	1009883a 	mov	r4,r2
 4000ed8:	180b883a 	mov	r5,r3
 4000edc:	4005b580 	call	4005b58 <__muldf3>
 4000ee0:	180b883a 	mov	r5,r3
 4000ee4:	1009883a 	mov	r4,r2
 4000ee8:	182b883a 	mov	r21,r3
 4000eec:	102d883a 	mov	r22,r2
 4000ef0:	4006b6c0 	call	4006b6c <__fixdfsi>
 4000ef4:	1009883a 	mov	r4,r2
 4000ef8:	4006bec0 	call	4006bec <__floatsidf>
 4000efc:	100d883a 	mov	r6,r2
 4000f00:	180f883a 	mov	r7,r3
 4000f04:	b009883a 	mov	r4,r22
 4000f08:	a80b883a 	mov	r5,r21
 4000f0c:	1027883a 	mov	r19,r2
 4000f10:	1825883a 	mov	r18,r3
 4000f14:	d8800415 	stw	r2,16(sp)
 4000f18:	d8c00515 	stw	r3,20(sp)
 4000f1c:	40062700 	call	4006270 <__subdf3>
 4000f20:	000d883a 	mov	r6,zero
 4000f24:	01d05c34 	movhi	r7,16752
 4000f28:	1009883a 	mov	r4,r2
 4000f2c:	180b883a 	mov	r5,r3
 4000f30:	4005b580 	call	4005b58 <__muldf3>
 4000f34:	000d883a 	mov	r6,zero
 4000f38:	000f883a 	mov	r7,zero
 4000f3c:	1009883a 	mov	r4,r2
 4000f40:	180b883a 	mov	r5,r3
 4000f44:	d8800615 	stw	r2,24(sp)
 4000f48:	d8c00715 	stw	r3,28(sp)
 4000f4c:	40059000 	call	4005900 <__eqdf2>
 4000f50:	1001431e 	bne	r2,zero,4001460 <__ieee754_rem_pio2+0x6d0>
 4000f54:	000f883a 	mov	r7,zero
 4000f58:	000d883a 	mov	r6,zero
 4000f5c:	9809883a 	mov	r4,r19
 4000f60:	900b883a 	mov	r5,r18
 4000f64:	40059000 	call	4005900 <__eqdf2>
 4000f68:	100f003a 	cmpeq	r7,r2,zero
 4000f6c:	00800084 	movi	r2,2
 4000f70:	11cfc83a 	sub	r7,r2,r7
 4000f74:	00800084 	movi	r2,2
 4000f78:	d8800015 	stw	r2,0(sp)
 4000f7c:	00810074 	movhi	r2,1025
 4000f80:	10b82704 	addi	r2,r2,-8036
 4000f84:	d8800115 	stw	r2,4(sp)
 4000f88:	a00d883a 	mov	r6,r20
 4000f8c:	800b883a 	mov	r5,r16
 4000f90:	d9000204 	addi	r4,sp,8
 4000f94:	4001c280 	call	4001c28 <__kernel_rem_pio2>
 4000f98:	88000d0e 	bge	r17,zero,4000fd0 <__ieee754_rem_pio2+0x240>
 4000f9c:	81000117 	ldw	r4,4(r16)
 4000fa0:	80c00317 	ldw	r3,12(r16)
 4000fa4:	0085c83a 	sub	r2,zero,r2
 4000fa8:	2120003c 	xorhi	r4,r4,32768
 4000fac:	18e0003c 	xorhi	r3,r3,32768
 4000fb0:	81000115 	stw	r4,4(r16)
 4000fb4:	80c00315 	stw	r3,12(r16)
 4000fb8:	00000506 	br	4000fd0 <__ieee754_rem_pio2+0x240>
 4000fbc:	31000015 	stw	r4,0(r6)
 4000fc0:	31400115 	stw	r5,4(r6)
 4000fc4:	30000215 	stw	zero,8(r6)
 4000fc8:	30000315 	stw	zero,12(r6)
 4000fcc:	0005883a 	mov	r2,zero
 4000fd0:	dfc01517 	ldw	ra,84(sp)
 4000fd4:	df001417 	ldw	fp,80(sp)
 4000fd8:	ddc01317 	ldw	r23,76(sp)
 4000fdc:	dd801217 	ldw	r22,72(sp)
 4000fe0:	dd401117 	ldw	r21,68(sp)
 4000fe4:	dd001017 	ldw	r20,64(sp)
 4000fe8:	dcc00f17 	ldw	r19,60(sp)
 4000fec:	dc800e17 	ldw	r18,56(sp)
 4000ff0:	dc400d17 	ldw	r17,52(sp)
 4000ff4:	dc000c17 	ldw	r16,48(sp)
 4000ff8:	dec01604 	addi	sp,sp,88
 4000ffc:	f800283a 	ret
 4001000:	200d883a 	mov	r6,r4
 4001004:	280f883a 	mov	r7,r5
 4001008:	40062700 	call	4006270 <__subdf3>
 400100c:	80800215 	stw	r2,8(r16)
 4001010:	80800015 	stw	r2,0(r16)
 4001014:	80c00315 	stw	r3,12(r16)
 4001018:	80c00115 	stw	r3,4(r16)
 400101c:	0005883a 	mov	r2,zero
 4001020:	003feb06 	br	4000fd0 <__ram_exceptions_end+0xfbfe0d88>
 4001024:	01cf7474 	movhi	r7,15825
 4001028:	9009883a 	mov	r4,r18
 400102c:	39ed1844 	addi	r7,r7,-19359
 4001030:	01869834 	movhi	r6,6752
 4001034:	180b883a 	mov	r5,r3
 4001038:	40062700 	call	4006270 <__subdf3>
 400103c:	018b80f4 	movhi	r6,11779
 4001040:	01cee8f4 	movhi	r7,15267
 4001044:	319c1cc4 	addi	r6,r6,28787
 4001048:	39c66284 	addi	r7,r7,6538
 400104c:	1009883a 	mov	r4,r2
 4001050:	180b883a 	mov	r5,r3
 4001054:	1025883a 	mov	r18,r2
 4001058:	1823883a 	mov	r17,r3
 400105c:	40062700 	call	4006270 <__subdf3>
 4001060:	100d883a 	mov	r6,r2
 4001064:	180f883a 	mov	r7,r3
 4001068:	9009883a 	mov	r4,r18
 400106c:	880b883a 	mov	r5,r17
 4001070:	80800015 	stw	r2,0(r16)
 4001074:	80c00115 	stw	r3,4(r16)
 4001078:	40062700 	call	4006270 <__subdf3>
 400107c:	018b80f4 	movhi	r6,11779
 4001080:	01cee8f4 	movhi	r7,15267
 4001084:	319c1cc4 	addi	r6,r6,28787
 4001088:	39c66284 	addi	r7,r7,6538
 400108c:	003f7306 	br	4000e5c <__ram_exceptions_end+0xfbfe0c14>
 4001090:	4002c840 	call	4002c84 <fabs>
 4001094:	019b72b4 	movhi	r6,28106
 4001098:	01cff934 	movhi	r7,16356
 400109c:	31b220c4 	addi	r6,r6,-14205
 40010a0:	39d7cc04 	addi	r7,r7,24368
 40010a4:	1009883a 	mov	r4,r2
 40010a8:	180b883a 	mov	r5,r3
 40010ac:	102d883a 	mov	r22,r2
 40010b0:	182b883a 	mov	r21,r3
 40010b4:	4005b580 	call	4005b58 <__muldf3>
 40010b8:	000d883a 	mov	r6,zero
 40010bc:	01cff834 	movhi	r7,16352
 40010c0:	1009883a 	mov	r4,r2
 40010c4:	180b883a 	mov	r5,r3
 40010c8:	400476c0 	call	400476c <__adddf3>
 40010cc:	180b883a 	mov	r5,r3
 40010d0:	1009883a 	mov	r4,r2
 40010d4:	4006b6c0 	call	4006b6c <__fixdfsi>
 40010d8:	1009883a 	mov	r4,r2
 40010dc:	1025883a 	mov	r18,r2
 40010e0:	4006bec0 	call	4006bec <__floatsidf>
 40010e4:	01cffe74 	movhi	r7,16377
 40010e8:	39c87ec4 	addi	r7,r7,8699
 40010ec:	01951034 	movhi	r6,21568
 40010f0:	1009883a 	mov	r4,r2
 40010f4:	180b883a 	mov	r5,r3
 40010f8:	1029883a 	mov	r20,r2
 40010fc:	1827883a 	mov	r19,r3
 4001100:	4005b580 	call	4005b58 <__muldf3>
 4001104:	b009883a 	mov	r4,r22
 4001108:	a80b883a 	mov	r5,r21
 400110c:	100d883a 	mov	r6,r2
 4001110:	180f883a 	mov	r7,r3
 4001114:	40062700 	call	4006270 <__subdf3>
 4001118:	018698b4 	movhi	r6,6754
 400111c:	01cf7474 	movhi	r7,15825
 4001120:	a009883a 	mov	r4,r20
 4001124:	3198cc44 	addi	r6,r6,25393
 4001128:	39ed1844 	addi	r7,r7,-19359
 400112c:	980b883a 	mov	r5,r19
 4001130:	1039883a 	mov	fp,r2
 4001134:	d8c00815 	stw	r3,32(sp)
 4001138:	4005b580 	call	4005b58 <__muldf3>
 400113c:	010007c4 	movi	r4,31
 4001140:	e017883a 	mov	r11,fp
 4001144:	da800817 	ldw	r10,32(sp)
 4001148:	102d883a 	mov	r22,r2
 400114c:	182b883a 	mov	r21,r3
 4001150:	24802816 	blt	r4,r18,40011f4 <__ieee754_rem_pio2+0x464>
 4001154:	913fffc4 	addi	r4,r18,-1
 4001158:	2109883a 	add	r4,r4,r4
 400115c:	01410074 	movhi	r5,1025
 4001160:	2109883a 	add	r4,r4,r4
 4001164:	29780704 	addi	r5,r5,-8164
 4001168:	2909883a 	add	r4,r5,r4
 400116c:	21000017 	ldw	r4,0(r4)
 4001170:	b9002026 	beq	r23,r4,40011f4 <__ieee754_rem_pio2+0x464>
 4001174:	100d883a 	mov	r6,r2
 4001178:	180f883a 	mov	r7,r3
 400117c:	e009883a 	mov	r4,fp
 4001180:	500b883a 	mov	r5,r10
 4001184:	da800b15 	stw	r10,44(sp)
 4001188:	df000a15 	stw	fp,40(sp)
 400118c:	40062700 	call	4006270 <__subdf3>
 4001190:	da800b17 	ldw	r10,44(sp)
 4001194:	dac00a17 	ldw	r11,40(sp)
 4001198:	1019883a 	mov	r12,r2
 400119c:	1813883a 	mov	r9,r3
 40011a0:	80800015 	stw	r2,0(r16)
 40011a4:	80c00115 	stw	r3,4(r16)
 40011a8:	600d883a 	mov	r6,r12
 40011ac:	480f883a 	mov	r7,r9
 40011b0:	5809883a 	mov	r4,r11
 40011b4:	500b883a 	mov	r5,r10
 40011b8:	da400b15 	stw	r9,44(sp)
 40011bc:	db000a15 	stw	r12,40(sp)
 40011c0:	40062700 	call	4006270 <__subdf3>
 40011c4:	b00d883a 	mov	r6,r22
 40011c8:	a80f883a 	mov	r7,r21
 40011cc:	1009883a 	mov	r4,r2
 40011d0:	180b883a 	mov	r5,r3
 40011d4:	40062700 	call	4006270 <__subdf3>
 40011d8:	80800215 	stw	r2,8(r16)
 40011dc:	80c00315 	stw	r3,12(r16)
 40011e0:	da400b17 	ldw	r9,44(sp)
 40011e4:	db000a17 	ldw	r12,40(sp)
 40011e8:	88009f16 	blt	r17,zero,4001468 <__ieee754_rem_pio2+0x6d8>
 40011ec:	9005883a 	mov	r2,r18
 40011f0:	003f7706 	br	4000fd0 <__ram_exceptions_end+0xfbfe0d88>
 40011f4:	d9400817 	ldw	r5,32(sp)
 40011f8:	100d883a 	mov	r6,r2
 40011fc:	180f883a 	mov	r7,r3
 4001200:	e009883a 	mov	r4,fp
 4001204:	da800b15 	stw	r10,44(sp)
 4001208:	dac00a15 	stw	r11,40(sp)
 400120c:	40062700 	call	4006270 <__subdf3>
 4001210:	1019883a 	mov	r12,r2
 4001214:	1804d53a 	srli	r2,r3,20
 4001218:	b811d53a 	srai	r8,r23,20
 400121c:	1813883a 	mov	r9,r3
 4001220:	1081ffcc 	andi	r2,r2,2047
 4001224:	80c00115 	stw	r3,4(r16)
 4001228:	83000015 	stw	r12,0(r16)
 400122c:	4085c83a 	sub	r2,r8,r2
 4001230:	00c00404 	movi	r3,16
 4001234:	da800b17 	ldw	r10,44(sp)
 4001238:	dac00a17 	ldw	r11,40(sp)
 400123c:	18bfda0e 	bge	r3,r2,40011a8 <__ram_exceptions_end+0xfbfe0f60>
 4001240:	01cf7474 	movhi	r7,15825
 4001244:	39ed1844 	addi	r7,r7,-19359
 4001248:	01869834 	movhi	r6,6752
 400124c:	a009883a 	mov	r4,r20
 4001250:	980b883a 	mov	r5,r19
 4001254:	da000a15 	stw	r8,40(sp)
 4001258:	4005b580 	call	4005b58 <__muldf3>
 400125c:	d9400817 	ldw	r5,32(sp)
 4001260:	100d883a 	mov	r6,r2
 4001264:	180f883a 	mov	r7,r3
 4001268:	e009883a 	mov	r4,fp
 400126c:	102d883a 	mov	r22,r2
 4001270:	182b883a 	mov	r21,r3
 4001274:	40062700 	call	4006270 <__subdf3>
 4001278:	d9400817 	ldw	r5,32(sp)
 400127c:	100d883a 	mov	r6,r2
 4001280:	180f883a 	mov	r7,r3
 4001284:	e009883a 	mov	r4,fp
 4001288:	182f883a 	mov	r23,r3
 400128c:	d8800915 	stw	r2,36(sp)
 4001290:	40062700 	call	4006270 <__subdf3>
 4001294:	b00d883a 	mov	r6,r22
 4001298:	a80f883a 	mov	r7,r21
 400129c:	1009883a 	mov	r4,r2
 40012a0:	180b883a 	mov	r5,r3
 40012a4:	40062700 	call	4006270 <__subdf3>
 40012a8:	018b80f4 	movhi	r6,11779
 40012ac:	01cee8f4 	movhi	r7,15267
 40012b0:	319c1cc4 	addi	r6,r6,28787
 40012b4:	39c66284 	addi	r7,r7,6538
 40012b8:	a009883a 	mov	r4,r20
 40012bc:	980b883a 	mov	r5,r19
 40012c0:	102d883a 	mov	r22,r2
 40012c4:	182b883a 	mov	r21,r3
 40012c8:	4005b580 	call	4005b58 <__muldf3>
 40012cc:	b00d883a 	mov	r6,r22
 40012d0:	a80f883a 	mov	r7,r21
 40012d4:	1009883a 	mov	r4,r2
 40012d8:	180b883a 	mov	r5,r3
 40012dc:	40062700 	call	4006270 <__subdf3>
 40012e0:	d9000917 	ldw	r4,36(sp)
 40012e4:	100d883a 	mov	r6,r2
 40012e8:	180f883a 	mov	r7,r3
 40012ec:	b80b883a 	mov	r5,r23
 40012f0:	102d883a 	mov	r22,r2
 40012f4:	182b883a 	mov	r21,r3
 40012f8:	40062700 	call	4006270 <__subdf3>
 40012fc:	1019883a 	mov	r12,r2
 4001300:	1804d53a 	srli	r2,r3,20
 4001304:	da000a17 	ldw	r8,40(sp)
 4001308:	83000015 	stw	r12,0(r16)
 400130c:	1081ffcc 	andi	r2,r2,2047
 4001310:	4091c83a 	sub	r8,r8,r2
 4001314:	80c00115 	stw	r3,4(r16)
 4001318:	00800c44 	movi	r2,49
 400131c:	1813883a 	mov	r9,r3
 4001320:	1200730e 	bge	r2,r8,40014f0 <__ieee754_rem_pio2+0x760>
 4001324:	01cee8f4 	movhi	r7,15267
 4001328:	39c66284 	addi	r7,r7,6538
 400132c:	018b8034 	movhi	r6,11776
 4001330:	a009883a 	mov	r4,r20
 4001334:	980b883a 	mov	r5,r19
 4001338:	4005b580 	call	4005b58 <__muldf3>
 400133c:	d9000917 	ldw	r4,36(sp)
 4001340:	100d883a 	mov	r6,r2
 4001344:	180f883a 	mov	r7,r3
 4001348:	b80b883a 	mov	r5,r23
 400134c:	102d883a 	mov	r22,r2
 4001350:	182b883a 	mov	r21,r3
 4001354:	40062700 	call	4006270 <__subdf3>
 4001358:	d9000917 	ldw	r4,36(sp)
 400135c:	100d883a 	mov	r6,r2
 4001360:	180f883a 	mov	r7,r3
 4001364:	b80b883a 	mov	r5,r23
 4001368:	d8c00b15 	stw	r3,44(sp)
 400136c:	d8800a15 	stw	r2,40(sp)
 4001370:	40062700 	call	4006270 <__subdf3>
 4001374:	b00d883a 	mov	r6,r22
 4001378:	a80f883a 	mov	r7,r21
 400137c:	1009883a 	mov	r4,r2
 4001380:	180b883a 	mov	r5,r3
 4001384:	40062700 	call	4006270 <__subdf3>
 4001388:	01894834 	movhi	r6,9504
 400138c:	01ce5f34 	movhi	r7,14716
 4001390:	31927044 	addi	r6,r6,18881
 4001394:	39e0e684 	addi	r7,r7,-31846
 4001398:	a009883a 	mov	r4,r20
 400139c:	980b883a 	mov	r5,r19
 40013a0:	102d883a 	mov	r22,r2
 40013a4:	182b883a 	mov	r21,r3
 40013a8:	4005b580 	call	4005b58 <__muldf3>
 40013ac:	b00d883a 	mov	r6,r22
 40013b0:	a80f883a 	mov	r7,r21
 40013b4:	1009883a 	mov	r4,r2
 40013b8:	180b883a 	mov	r5,r3
 40013bc:	40062700 	call	4006270 <__subdf3>
 40013c0:	dac00a17 	ldw	r11,40(sp)
 40013c4:	da800b17 	ldw	r10,44(sp)
 40013c8:	102d883a 	mov	r22,r2
 40013cc:	182b883a 	mov	r21,r3
 40013d0:	100d883a 	mov	r6,r2
 40013d4:	180f883a 	mov	r7,r3
 40013d8:	5809883a 	mov	r4,r11
 40013dc:	500b883a 	mov	r5,r10
 40013e0:	003f6a06 	br	400118c <__ram_exceptions_end+0xfbfe0f44>
 40013e4:	400476c0 	call	400476c <__adddf3>
 40013e8:	1025883a 	mov	r18,r2
 40013ec:	008ffe74 	movhi	r2,16377
 40013f0:	10887ec4 	addi	r2,r2,8699
 40013f4:	1823883a 	mov	r17,r3
 40013f8:	b8802226 	beq	r23,r2,4001484 <__ieee754_rem_pio2+0x6f4>
 40013fc:	018698b4 	movhi	r6,6754
 4001400:	01cf7474 	movhi	r7,15825
 4001404:	3198cc44 	addi	r6,r6,25393
 4001408:	39ed1844 	addi	r7,r7,-19359
 400140c:	9009883a 	mov	r4,r18
 4001410:	180b883a 	mov	r5,r3
 4001414:	400476c0 	call	400476c <__adddf3>
 4001418:	100d883a 	mov	r6,r2
 400141c:	180f883a 	mov	r7,r3
 4001420:	9009883a 	mov	r4,r18
 4001424:	880b883a 	mov	r5,r17
 4001428:	80800015 	stw	r2,0(r16)
 400142c:	80c00115 	stw	r3,4(r16)
 4001430:	40062700 	call	4006270 <__subdf3>
 4001434:	018698b4 	movhi	r6,6754
 4001438:	01cf7474 	movhi	r7,15825
 400143c:	3198cc44 	addi	r6,r6,25393
 4001440:	39ed1844 	addi	r7,r7,-19359
 4001444:	1009883a 	mov	r4,r2
 4001448:	180b883a 	mov	r5,r3
 400144c:	400476c0 	call	400476c <__adddf3>
 4001450:	80800215 	stw	r2,8(r16)
 4001454:	80c00315 	stw	r3,12(r16)
 4001458:	00bfffc4 	movi	r2,-1
 400145c:	003edc06 	br	4000fd0 <__ram_exceptions_end+0xfbfe0d88>
 4001460:	01c000c4 	movi	r7,3
 4001464:	003ec306 	br	4000f74 <__ram_exceptions_end+0xfbfe0d2c>
 4001468:	4a60003c 	xorhi	r9,r9,32768
 400146c:	18e0003c 	xorhi	r3,r3,32768
 4001470:	83000015 	stw	r12,0(r16)
 4001474:	82400115 	stw	r9,4(r16)
 4001478:	80c00315 	stw	r3,12(r16)
 400147c:	0485c83a 	sub	r2,zero,r18
 4001480:	003ed306 	br	4000fd0 <__ram_exceptions_end+0xfbfe0d88>
 4001484:	01cf7474 	movhi	r7,15825
 4001488:	9009883a 	mov	r4,r18
 400148c:	39ed1844 	addi	r7,r7,-19359
 4001490:	01869834 	movhi	r6,6752
 4001494:	180b883a 	mov	r5,r3
 4001498:	400476c0 	call	400476c <__adddf3>
 400149c:	018b80f4 	movhi	r6,11779
 40014a0:	01cee8f4 	movhi	r7,15267
 40014a4:	319c1cc4 	addi	r6,r6,28787
 40014a8:	39c66284 	addi	r7,r7,6538
 40014ac:	1009883a 	mov	r4,r2
 40014b0:	180b883a 	mov	r5,r3
 40014b4:	1025883a 	mov	r18,r2
 40014b8:	1823883a 	mov	r17,r3
 40014bc:	400476c0 	call	400476c <__adddf3>
 40014c0:	100d883a 	mov	r6,r2
 40014c4:	180f883a 	mov	r7,r3
 40014c8:	9009883a 	mov	r4,r18
 40014cc:	880b883a 	mov	r5,r17
 40014d0:	80800015 	stw	r2,0(r16)
 40014d4:	80c00115 	stw	r3,4(r16)
 40014d8:	40062700 	call	4006270 <__subdf3>
 40014dc:	018b80f4 	movhi	r6,11779
 40014e0:	01cee8f4 	movhi	r7,15267
 40014e4:	319c1cc4 	addi	r6,r6,28787
 40014e8:	39c66284 	addi	r7,r7,6538
 40014ec:	003fd506 	br	4001444 <__ram_exceptions_end+0xfbfe11fc>
 40014f0:	dac00917 	ldw	r11,36(sp)
 40014f4:	b815883a 	mov	r10,r23
 40014f8:	003f2b06 	br	40011a8 <__ram_exceptions_end+0xfbfe0f60>

040014fc <__ieee754_sqrt>:
 40014fc:	defffd04 	addi	sp,sp,-12
 4001500:	dc400115 	stw	r17,4(sp)
 4001504:	dc000015 	stw	r16,0(sp)
 4001508:	dfc00215 	stw	ra,8(sp)
 400150c:	28dffc2c 	andhi	r3,r5,32752
 4001510:	009ffc34 	movhi	r2,32752
 4001514:	2821883a 	mov	r16,r5
 4001518:	2023883a 	mov	r17,r4
 400151c:	200d883a 	mov	r6,r4
 4001520:	18807b26 	beq	r3,r2,4001710 <__ieee754_sqrt+0x214>
 4001524:	01405f0e 	bge	zero,r5,40016a4 <__ieee754_sqrt+0x1a8>
 4001528:	2815d53a 	srai	r10,r5,20
 400152c:	50006a26 	beq	r10,zero,40016d8 <__ieee754_sqrt+0x1dc>
 4001530:	00c00434 	movhi	r3,16
 4001534:	52bf0044 	addi	r10,r10,-1023
 4001538:	18ffffc4 	addi	r3,r3,-1
 400153c:	80c6703a 	and	r3,r16,r3
 4001540:	5080004c 	andi	r2,r10,1
 4001544:	18c00434 	orhi	r3,r3,16
 4001548:	1000511e 	bne	r2,zero,4001690 <__ieee754_sqrt+0x194>
 400154c:	3004d7fa 	srli	r2,r6,31
 4001550:	5015d07a 	srai	r10,r10,1
 4001554:	18c7883a 	add	r3,r3,r3
 4001558:	10c5883a 	add	r2,r2,r3
 400155c:	01400584 	movi	r5,22
 4001560:	3187883a 	add	r3,r6,r6
 4001564:	0013883a 	mov	r9,zero
 4001568:	000f883a 	mov	r7,zero
 400156c:	01000834 	movhi	r4,32
 4001570:	390d883a 	add	r6,r7,r4
 4001574:	1810d7fa 	srli	r8,r3,31
 4001578:	297fffc4 	addi	r5,r5,-1
 400157c:	11800316 	blt	r2,r6,400158c <__ieee754_sqrt+0x90>
 4001580:	1185c83a 	sub	r2,r2,r6
 4001584:	310f883a 	add	r7,r6,r4
 4001588:	4913883a 	add	r9,r9,r4
 400158c:	1085883a 	add	r2,r2,r2
 4001590:	4085883a 	add	r2,r8,r2
 4001594:	18c7883a 	add	r3,r3,r3
 4001598:	2008d07a 	srli	r4,r4,1
 400159c:	283ff41e 	bne	r5,zero,4001570 <__ram_exceptions_end+0xfbfe1328>
 40015a0:	01200034 	movhi	r4,32768
 40015a4:	01800804 	movi	r6,32
 40015a8:	0011883a 	mov	r8,zero
 40015ac:	0019883a 	mov	r12,zero
 40015b0:	201b883a 	mov	r13,r4
 40015b4:	00000806 	br	40015d8 <__ieee754_sqrt+0xdc>
 40015b8:	38801726 	beq	r7,r2,4001618 <__ieee754_sqrt+0x11c>
 40015bc:	180ad7fa 	srli	r5,r3,31
 40015c0:	1085883a 	add	r2,r2,r2
 40015c4:	31bfffc4 	addi	r6,r6,-1
 40015c8:	2885883a 	add	r2,r5,r2
 40015cc:	18c7883a 	add	r3,r3,r3
 40015d0:	2008d07a 	srli	r4,r4,1
 40015d4:	30001726 	beq	r6,zero,4001634 <__ieee754_sqrt+0x138>
 40015d8:	230b883a 	add	r5,r4,r12
 40015dc:	38bff60e 	bge	r7,r2,40015b8 <__ram_exceptions_end+0xfbfe1370>
 40015e0:	2ae0002c 	andhi	r11,r5,32768
 40015e4:	2919883a 	add	r12,r5,r4
 40015e8:	5b400826 	beq	r11,r13,400160c <__ieee754_sqrt+0x110>
 40015ec:	3817883a 	mov	r11,r7
 40015f0:	11c5c83a 	sub	r2,r2,r7
 40015f4:	1940012e 	bgeu	r3,r5,40015fc <__ieee754_sqrt+0x100>
 40015f8:	10bfffc4 	addi	r2,r2,-1
 40015fc:	1947c83a 	sub	r3,r3,r5
 4001600:	4111883a 	add	r8,r8,r4
 4001604:	580f883a 	mov	r7,r11
 4001608:	003fec06 	br	40015bc <__ram_exceptions_end+0xfbfe1374>
 400160c:	603ff716 	blt	r12,zero,40015ec <__ram_exceptions_end+0xfbfe13a4>
 4001610:	3ac00044 	addi	r11,r7,1
 4001614:	003ff606 	br	40015f0 <__ram_exceptions_end+0xfbfe13a8>
 4001618:	19401936 	bltu	r3,r5,4001680 <__ieee754_sqrt+0x184>
 400161c:	2ae0002c 	andhi	r11,r5,32768
 4001620:	2919883a 	add	r12,r5,r4
 4001624:	5b404526 	beq	r11,r13,400173c <__ieee754_sqrt+0x240>
 4001628:	1017883a 	mov	r11,r2
 400162c:	0005883a 	mov	r2,zero
 4001630:	003ff206 	br	40015fc <__ram_exceptions_end+0xfbfe13b4>
 4001634:	10c4b03a 	or	r2,r2,r3
 4001638:	10000426 	beq	r2,zero,400164c <__ieee754_sqrt+0x150>
 400163c:	00bfffc4 	movi	r2,-1
 4001640:	40804026 	beq	r8,r2,4001744 <__ieee754_sqrt+0x248>
 4001644:	4080004c 	andi	r2,r8,1
 4001648:	4091883a 	add	r8,r8,r2
 400164c:	4004d07a 	srli	r2,r8,1
 4001650:	4807d07a 	srai	r3,r9,1
 4001654:	010ff834 	movhi	r4,16352
 4001658:	4a40004c 	andi	r9,r9,1
 400165c:	1909883a 	add	r4,r3,r4
 4001660:	4800091e 	bne	r9,zero,4001688 <__ieee754_sqrt+0x18c>
 4001664:	5006953a 	slli	r3,r10,20
 4001668:	1907883a 	add	r3,r3,r4
 400166c:	dfc00217 	ldw	ra,8(sp)
 4001670:	dc400117 	ldw	r17,4(sp)
 4001674:	dc000017 	ldw	r16,0(sp)
 4001678:	dec00304 	addi	sp,sp,12
 400167c:	f800283a 	ret
 4001680:	3805883a 	mov	r2,r7
 4001684:	003fcd06 	br	40015bc <__ram_exceptions_end+0xfbfe1374>
 4001688:	10a00034 	orhi	r2,r2,32768
 400168c:	003ff506 	br	4001664 <__ram_exceptions_end+0xfbfe141c>
 4001690:	3004d7fa 	srli	r2,r6,31
 4001694:	18c7883a 	add	r3,r3,r3
 4001698:	318d883a 	add	r6,r6,r6
 400169c:	10c7883a 	add	r3,r2,r3
 40016a0:	003faa06 	br	400154c <__ram_exceptions_end+0xfbfe1304>
 40016a4:	00a00034 	movhi	r2,32768
 40016a8:	10bfffc4 	addi	r2,r2,-1
 40016ac:	2884703a 	and	r2,r5,r2
 40016b0:	1104b03a 	or	r2,r2,r4
 40016b4:	10001e26 	beq	r2,zero,4001730 <__ieee754_sqrt+0x234>
 40016b8:	2800291e 	bne	r5,zero,4001760 <__ieee754_sqrt+0x264>
 40016bc:	0015883a 	mov	r10,zero
 40016c0:	3020d2fa 	srli	r16,r6,11
 40016c4:	52bffac4 	addi	r10,r10,-21
 40016c8:	300c957a 	slli	r6,r6,21
 40016cc:	803ffc26 	beq	r16,zero,40016c0 <__ram_exceptions_end+0xfbfe1478>
 40016d0:	8080042c 	andhi	r2,r16,16
 40016d4:	10001e1e 	bne	r2,zero,4001750 <__ieee754_sqrt+0x254>
 40016d8:	0005883a 	mov	r2,zero
 40016dc:	00000106 	br	40016e4 <__ieee754_sqrt+0x1e8>
 40016e0:	1805883a 	mov	r2,r3
 40016e4:	8421883a 	add	r16,r16,r16
 40016e8:	8100042c 	andhi	r4,r16,16
 40016ec:	10c00044 	addi	r3,r2,1
 40016f0:	203ffb26 	beq	r4,zero,40016e0 <__ram_exceptions_end+0xfbfe1498>
 40016f4:	01000804 	movi	r4,32
 40016f8:	20c9c83a 	sub	r4,r4,r3
 40016fc:	3108d83a 	srl	r4,r6,r4
 4001700:	5095c83a 	sub	r10,r10,r2
 4001704:	30cc983a 	sll	r6,r6,r3
 4001708:	2420b03a 	or	r16,r4,r16
 400170c:	003f8806 	br	4001530 <__ram_exceptions_end+0xfbfe12e8>
 4001710:	280f883a 	mov	r7,r5
 4001714:	4005b580 	call	4005b58 <__muldf3>
 4001718:	880d883a 	mov	r6,r17
 400171c:	800f883a 	mov	r7,r16
 4001720:	1009883a 	mov	r4,r2
 4001724:	180b883a 	mov	r5,r3
 4001728:	400476c0 	call	400476c <__adddf3>
 400172c:	003fcf06 	br	400166c <__ram_exceptions_end+0xfbfe1424>
 4001730:	2005883a 	mov	r2,r4
 4001734:	2807883a 	mov	r3,r5
 4001738:	003fcc06 	br	400166c <__ram_exceptions_end+0xfbfe1424>
 400173c:	603fba16 	blt	r12,zero,4001628 <__ram_exceptions_end+0xfbfe13e0>
 4001740:	003fb306 	br	4001610 <__ram_exceptions_end+0xfbfe13c8>
 4001744:	4a400044 	addi	r9,r9,1
 4001748:	0005883a 	mov	r2,zero
 400174c:	003fc006 	br	4001650 <__ram_exceptions_end+0xfbfe1408>
 4001750:	01000804 	movi	r4,32
 4001754:	00bfffc4 	movi	r2,-1
 4001758:	0007883a 	mov	r3,zero
 400175c:	003fe706 	br	40016fc <__ram_exceptions_end+0xfbfe14b4>
 4001760:	200d883a 	mov	r6,r4
 4001764:	280f883a 	mov	r7,r5
 4001768:	40062700 	call	4006270 <__subdf3>
 400176c:	100d883a 	mov	r6,r2
 4001770:	180f883a 	mov	r7,r3
 4001774:	1009883a 	mov	r4,r2
 4001778:	180b883a 	mov	r5,r3
 400177c:	40050180 	call	4005018 <__divdf3>
 4001780:	003fba06 	br	400166c <__ram_exceptions_end+0xfbfe1424>

04001784 <__kernel_cos>:
 4001784:	defff304 	addi	sp,sp,-52
 4001788:	dc000315 	stw	r16,12(sp)
 400178c:	04200034 	movhi	r16,32768
 4001790:	843fffc4 	addi	r16,r16,-1
 4001794:	008f9034 	movhi	r2,15936
 4001798:	df000b15 	stw	fp,44(sp)
 400179c:	ddc00a15 	stw	r23,40(sp)
 40017a0:	dd800915 	stw	r22,36(sp)
 40017a4:	dcc00615 	stw	r19,24(sp)
 40017a8:	dfc00c15 	stw	ra,48(sp)
 40017ac:	dd400815 	stw	r21,32(sp)
 40017b0:	dd000715 	stw	r20,28(sp)
 40017b4:	dc800515 	stw	r18,20(sp)
 40017b8:	dc400415 	stw	r17,16(sp)
 40017bc:	2c20703a 	and	r16,r5,r16
 40017c0:	10bfffc4 	addi	r2,r2,-1
 40017c4:	2827883a 	mov	r19,r5
 40017c8:	202d883a 	mov	r22,r4
 40017cc:	302f883a 	mov	r23,r6
 40017d0:	3839883a 	mov	fp,r7
 40017d4:	14007516 	blt	r2,r16,40019ac <__kernel_cos+0x228>
 40017d8:	4006b6c0 	call	4006b6c <__fixdfsi>
 40017dc:	10010f26 	beq	r2,zero,4001c1c <__kernel_cos+0x498>
 40017e0:	b00d883a 	mov	r6,r22
 40017e4:	980f883a 	mov	r7,r19
 40017e8:	b009883a 	mov	r4,r22
 40017ec:	980b883a 	mov	r5,r19
 40017f0:	4005b580 	call	4005b58 <__muldf3>
 40017f4:	01afa234 	movhi	r6,48776
 40017f8:	01ef6a74 	movhi	r7,48553
 40017fc:	318e3504 	addi	r6,r6,14548
 4001800:	39feba44 	addi	r7,r7,-1303
 4001804:	1009883a 	mov	r4,r2
 4001808:	180b883a 	mov	r5,r3
 400180c:	102b883a 	mov	r21,r2
 4001810:	1829883a 	mov	r20,r3
 4001814:	4005b580 	call	4005b58 <__muldf3>
 4001818:	01af6d74 	movhi	r6,48565
 400181c:	01cf88b4 	movhi	r7,15906
 4001820:	31ac7104 	addi	r6,r6,-20028
 4001824:	39fba784 	addi	r7,r7,-4450
 4001828:	1009883a 	mov	r4,r2
 400182c:	180b883a 	mov	r5,r3
 4001830:	400476c0 	call	400476c <__adddf3>
 4001834:	a80d883a 	mov	r6,r21
 4001838:	a00f883a 	mov	r7,r20
 400183c:	1009883a 	mov	r4,r2
 4001840:	180b883a 	mov	r5,r3
 4001844:	4005b580 	call	4005b58 <__muldf3>
 4001848:	01a02734 	movhi	r6,32924
 400184c:	01cfa4b4 	movhi	r7,16018
 4001850:	3194ab44 	addi	r6,r6,21165
 4001854:	39df93c4 	addi	r7,r7,32335
 4001858:	1009883a 	mov	r4,r2
 400185c:	180b883a 	mov	r5,r3
 4001860:	40062700 	call	4006270 <__subdf3>
 4001864:	a80d883a 	mov	r6,r21
 4001868:	a00f883a 	mov	r7,r20
 400186c:	1009883a 	mov	r4,r2
 4001870:	180b883a 	mov	r5,r3
 4001874:	4005b580 	call	4005b58 <__muldf3>
 4001878:	018672f4 	movhi	r6,6603
 400187c:	01cfbeb4 	movhi	r7,16122
 4001880:	31856404 	addi	r6,r6,5520
 4001884:	39c06804 	addi	r7,r7,416
 4001888:	1009883a 	mov	r4,r2
 400188c:	180b883a 	mov	r5,r3
 4001890:	400476c0 	call	400476c <__adddf3>
 4001894:	a80d883a 	mov	r6,r21
 4001898:	a00f883a 	mov	r7,r20
 400189c:	1009883a 	mov	r4,r2
 40018a0:	180b883a 	mov	r5,r3
 40018a4:	4005b580 	call	4005b58 <__muldf3>
 40018a8:	0185b074 	movhi	r6,5825
 40018ac:	01cfd5f4 	movhi	r7,16215
 40018b0:	31945dc4 	addi	r6,r6,20855
 40018b4:	39f05b04 	addi	r7,r7,-16020
 40018b8:	1009883a 	mov	r4,r2
 40018bc:	180b883a 	mov	r5,r3
 40018c0:	40062700 	call	4006270 <__subdf3>
 40018c4:	a80d883a 	mov	r6,r21
 40018c8:	a00f883a 	mov	r7,r20
 40018cc:	1009883a 	mov	r4,r2
 40018d0:	180b883a 	mov	r5,r3
 40018d4:	4005b580 	call	4005b58 <__muldf3>
 40018d8:	01955574 	movhi	r6,21845
 40018dc:	01cfe974 	movhi	r7,16293
 40018e0:	31955304 	addi	r6,r6,21836
 40018e4:	39d55544 	addi	r7,r7,21845
 40018e8:	1009883a 	mov	r4,r2
 40018ec:	180b883a 	mov	r5,r3
 40018f0:	400476c0 	call	400476c <__adddf3>
 40018f4:	a80d883a 	mov	r6,r21
 40018f8:	a00f883a 	mov	r7,r20
 40018fc:	1009883a 	mov	r4,r2
 4001900:	180b883a 	mov	r5,r3
 4001904:	4005b580 	call	4005b58 <__muldf3>
 4001908:	1017883a 	mov	r11,r2
 400190c:	1815883a 	mov	r10,r3
 4001910:	a809883a 	mov	r4,r21
 4001914:	a00b883a 	mov	r5,r20
 4001918:	000d883a 	mov	r6,zero
 400191c:	01cff834 	movhi	r7,16352
 4001920:	da800215 	stw	r10,8(sp)
 4001924:	dac00115 	stw	r11,4(sp)
 4001928:	4005b580 	call	4005b58 <__muldf3>
 400192c:	dac00117 	ldw	r11,4(sp)
 4001930:	da800217 	ldw	r10,8(sp)
 4001934:	a809883a 	mov	r4,r21
 4001938:	580d883a 	mov	r6,r11
 400193c:	500f883a 	mov	r7,r10
 4001940:	a00b883a 	mov	r5,r20
 4001944:	1023883a 	mov	r17,r2
 4001948:	1821883a 	mov	r16,r3
 400194c:	4005b580 	call	4005b58 <__muldf3>
 4001950:	b80d883a 	mov	r6,r23
 4001954:	e00f883a 	mov	r7,fp
 4001958:	b009883a 	mov	r4,r22
 400195c:	980b883a 	mov	r5,r19
 4001960:	1029883a 	mov	r20,r2
 4001964:	1825883a 	mov	r18,r3
 4001968:	4005b580 	call	4005b58 <__muldf3>
 400196c:	a009883a 	mov	r4,r20
 4001970:	900b883a 	mov	r5,r18
 4001974:	100d883a 	mov	r6,r2
 4001978:	180f883a 	mov	r7,r3
 400197c:	40062700 	call	4006270 <__subdf3>
 4001980:	8809883a 	mov	r4,r17
 4001984:	800b883a 	mov	r5,r16
 4001988:	100d883a 	mov	r6,r2
 400198c:	180f883a 	mov	r7,r3
 4001990:	40062700 	call	4006270 <__subdf3>
 4001994:	100d883a 	mov	r6,r2
 4001998:	180f883a 	mov	r7,r3
 400199c:	0009883a 	mov	r4,zero
 40019a0:	014ffc34 	movhi	r5,16368
 40019a4:	40062700 	call	4006270 <__subdf3>
 40019a8:	00008b06 	br	4001bd8 <__kernel_cos+0x454>
 40019ac:	200d883a 	mov	r6,r4
 40019b0:	280f883a 	mov	r7,r5
 40019b4:	4005b580 	call	4005b58 <__muldf3>
 40019b8:	01afa234 	movhi	r6,48776
 40019bc:	01ef6a74 	movhi	r7,48553
 40019c0:	318e3504 	addi	r6,r6,14548
 40019c4:	39feba44 	addi	r7,r7,-1303
 40019c8:	1009883a 	mov	r4,r2
 40019cc:	180b883a 	mov	r5,r3
 40019d0:	1025883a 	mov	r18,r2
 40019d4:	1823883a 	mov	r17,r3
 40019d8:	4005b580 	call	4005b58 <__muldf3>
 40019dc:	01af6d74 	movhi	r6,48565
 40019e0:	01cf88b4 	movhi	r7,15906
 40019e4:	31ac7104 	addi	r6,r6,-20028
 40019e8:	39fba784 	addi	r7,r7,-4450
 40019ec:	1009883a 	mov	r4,r2
 40019f0:	180b883a 	mov	r5,r3
 40019f4:	400476c0 	call	400476c <__adddf3>
 40019f8:	900d883a 	mov	r6,r18
 40019fc:	880f883a 	mov	r7,r17
 4001a00:	1009883a 	mov	r4,r2
 4001a04:	180b883a 	mov	r5,r3
 4001a08:	4005b580 	call	4005b58 <__muldf3>
 4001a0c:	01a02734 	movhi	r6,32924
 4001a10:	01cfa4b4 	movhi	r7,16018
 4001a14:	3194ab44 	addi	r6,r6,21165
 4001a18:	39df93c4 	addi	r7,r7,32335
 4001a1c:	1009883a 	mov	r4,r2
 4001a20:	180b883a 	mov	r5,r3
 4001a24:	40062700 	call	4006270 <__subdf3>
 4001a28:	900d883a 	mov	r6,r18
 4001a2c:	880f883a 	mov	r7,r17
 4001a30:	1009883a 	mov	r4,r2
 4001a34:	180b883a 	mov	r5,r3
 4001a38:	4005b580 	call	4005b58 <__muldf3>
 4001a3c:	018672f4 	movhi	r6,6603
 4001a40:	01cfbeb4 	movhi	r7,16122
 4001a44:	31856404 	addi	r6,r6,5520
 4001a48:	39c06804 	addi	r7,r7,416
 4001a4c:	1009883a 	mov	r4,r2
 4001a50:	180b883a 	mov	r5,r3
 4001a54:	400476c0 	call	400476c <__adddf3>
 4001a58:	900d883a 	mov	r6,r18
 4001a5c:	880f883a 	mov	r7,r17
 4001a60:	1009883a 	mov	r4,r2
 4001a64:	180b883a 	mov	r5,r3
 4001a68:	4005b580 	call	4005b58 <__muldf3>
 4001a6c:	0185b074 	movhi	r6,5825
 4001a70:	01cfd5f4 	movhi	r7,16215
 4001a74:	31945dc4 	addi	r6,r6,20855
 4001a78:	39f05b04 	addi	r7,r7,-16020
 4001a7c:	1009883a 	mov	r4,r2
 4001a80:	180b883a 	mov	r5,r3
 4001a84:	40062700 	call	4006270 <__subdf3>
 4001a88:	900d883a 	mov	r6,r18
 4001a8c:	880f883a 	mov	r7,r17
 4001a90:	1009883a 	mov	r4,r2
 4001a94:	180b883a 	mov	r5,r3
 4001a98:	4005b580 	call	4005b58 <__muldf3>
 4001a9c:	01955574 	movhi	r6,21845
 4001aa0:	01cfe974 	movhi	r7,16293
 4001aa4:	31955304 	addi	r6,r6,21836
 4001aa8:	39d55544 	addi	r7,r7,21845
 4001aac:	1009883a 	mov	r4,r2
 4001ab0:	180b883a 	mov	r5,r3
 4001ab4:	400476c0 	call	400476c <__adddf3>
 4001ab8:	900d883a 	mov	r6,r18
 4001abc:	880f883a 	mov	r7,r17
 4001ac0:	1009883a 	mov	r4,r2
 4001ac4:	180b883a 	mov	r5,r3
 4001ac8:	4005b580 	call	4005b58 <__muldf3>
 4001acc:	1013883a 	mov	r9,r2
 4001ad0:	1017883a 	mov	r11,r2
 4001ad4:	008ff4f4 	movhi	r2,16339
 4001ad8:	108ccc84 	addi	r2,r2,13106
 4001adc:	1811883a 	mov	r8,r3
 4001ae0:	902b883a 	mov	r21,r18
 4001ae4:	8829883a 	mov	r20,r17
 4001ae8:	1815883a 	mov	r10,r3
 4001aec:	143f880e 	bge	r2,r16,4001910 <__ram_exceptions_end+0xfbfe16c8>
 4001af0:	008ffa74 	movhi	r2,16361
 4001af4:	14004416 	blt	r2,r16,4001c08 <__kernel_cos+0x484>
 4001af8:	00bff834 	movhi	r2,65504
 4001afc:	80a1883a 	add	r16,r16,r2
 4001b00:	000d883a 	mov	r6,zero
 4001b04:	800f883a 	mov	r7,r16
 4001b08:	0009883a 	mov	r4,zero
 4001b0c:	014ffc34 	movhi	r5,16368
 4001b10:	da400115 	stw	r9,4(sp)
 4001b14:	d8c00215 	stw	r3,8(sp)
 4001b18:	40062700 	call	4006270 <__subdf3>
 4001b1c:	da000217 	ldw	r8,8(sp)
 4001b20:	da400117 	ldw	r9,4(sp)
 4001b24:	102b883a 	mov	r21,r2
 4001b28:	d8c00015 	stw	r3,0(sp)
 4001b2c:	9009883a 	mov	r4,r18
 4001b30:	880b883a 	mov	r5,r17
 4001b34:	000d883a 	mov	r6,zero
 4001b38:	01cff834 	movhi	r7,16352
 4001b3c:	da000215 	stw	r8,8(sp)
 4001b40:	da400115 	stw	r9,4(sp)
 4001b44:	4005b580 	call	4005b58 <__muldf3>
 4001b48:	800f883a 	mov	r7,r16
 4001b4c:	000d883a 	mov	r6,zero
 4001b50:	1009883a 	mov	r4,r2
 4001b54:	180b883a 	mov	r5,r3
 4001b58:	40062700 	call	4006270 <__subdf3>
 4001b5c:	da400117 	ldw	r9,4(sp)
 4001b60:	da000217 	ldw	r8,8(sp)
 4001b64:	9009883a 	mov	r4,r18
 4001b68:	480d883a 	mov	r6,r9
 4001b6c:	400f883a 	mov	r7,r8
 4001b70:	880b883a 	mov	r5,r17
 4001b74:	1029883a 	mov	r20,r2
 4001b78:	1821883a 	mov	r16,r3
 4001b7c:	4005b580 	call	4005b58 <__muldf3>
 4001b80:	b80d883a 	mov	r6,r23
 4001b84:	e00f883a 	mov	r7,fp
 4001b88:	b009883a 	mov	r4,r22
 4001b8c:	980b883a 	mov	r5,r19
 4001b90:	1025883a 	mov	r18,r2
 4001b94:	1823883a 	mov	r17,r3
 4001b98:	4005b580 	call	4005b58 <__muldf3>
 4001b9c:	100d883a 	mov	r6,r2
 4001ba0:	180f883a 	mov	r7,r3
 4001ba4:	9009883a 	mov	r4,r18
 4001ba8:	880b883a 	mov	r5,r17
 4001bac:	40062700 	call	4006270 <__subdf3>
 4001bb0:	100d883a 	mov	r6,r2
 4001bb4:	180f883a 	mov	r7,r3
 4001bb8:	a009883a 	mov	r4,r20
 4001bbc:	800b883a 	mov	r5,r16
 4001bc0:	40062700 	call	4006270 <__subdf3>
 4001bc4:	d9400017 	ldw	r5,0(sp)
 4001bc8:	100d883a 	mov	r6,r2
 4001bcc:	180f883a 	mov	r7,r3
 4001bd0:	a809883a 	mov	r4,r21
 4001bd4:	40062700 	call	4006270 <__subdf3>
 4001bd8:	dfc00c17 	ldw	ra,48(sp)
 4001bdc:	df000b17 	ldw	fp,44(sp)
 4001be0:	ddc00a17 	ldw	r23,40(sp)
 4001be4:	dd800917 	ldw	r22,36(sp)
 4001be8:	dd400817 	ldw	r21,32(sp)
 4001bec:	dd000717 	ldw	r20,28(sp)
 4001bf0:	dcc00617 	ldw	r19,24(sp)
 4001bf4:	dc800517 	ldw	r18,20(sp)
 4001bf8:	dc400417 	ldw	r17,16(sp)
 4001bfc:	dc000317 	ldw	r16,12(sp)
 4001c00:	dec00d04 	addi	sp,sp,52
 4001c04:	f800283a 	ret
 4001c08:	008ff9f4 	movhi	r2,16359
 4001c0c:	002b883a 	mov	r21,zero
 4001c10:	d8800015 	stw	r2,0(sp)
 4001c14:	040ff4b4 	movhi	r16,16338
 4001c18:	003fc406 	br	4001b2c <__ram_exceptions_end+0xfbfe18e4>
 4001c1c:	0005883a 	mov	r2,zero
 4001c20:	00cffc34 	movhi	r3,16368
 4001c24:	003fec06 	br	4001bd8 <__ram_exceptions_end+0xfbfe1990>

04001c28 <__kernel_rem_pio2>:
 4001c28:	deff5a04 	addi	sp,sp,-664
 4001c2c:	da00a617 	ldw	r8,664(sp)
 4001c30:	00c10074 	movhi	r3,1025
 4001c34:	18f87904 	addi	r3,r3,-7708
 4001c38:	4205883a 	add	r2,r8,r8
 4001c3c:	1085883a 	add	r2,r2,r2
 4001c40:	1885883a 	add	r2,r3,r2
 4001c44:	d9008e15 	stw	r4,568(sp)
 4001c48:	d9408f15 	stw	r5,572(sp)
 4001c4c:	313fff44 	addi	r4,r6,-3
 4001c50:	01400604 	movi	r5,24
 4001c54:	dd80a215 	stw	r22,648(sp)
 4001c58:	dc009c15 	stw	r16,624(sp)
 4001c5c:	dfc0a515 	stw	ra,660(sp)
 4001c60:	df00a415 	stw	fp,656(sp)
 4001c64:	ddc0a315 	stw	r23,652(sp)
 4001c68:	dd40a115 	stw	r21,644(sp)
 4001c6c:	dd00a015 	stw	r20,640(sp)
 4001c70:	dcc09f15 	stw	r19,636(sp)
 4001c74:	dc809e15 	stw	r18,632(sp)
 4001c78:	dc409d15 	stw	r17,628(sp)
 4001c7c:	3021883a 	mov	r16,r6
 4001c80:	d9c09315 	stw	r7,588(sp)
 4001c84:	15800017 	ldw	r22,0(r2)
 4001c88:	40030b80 	call	40030b8 <__divsi3>
 4001c8c:	da009317 	ldw	r8,588(sp)
 4001c90:	d8809215 	stw	r2,584(sp)
 4001c94:	423fffc4 	addi	r8,r8,-1
 4001c98:	da008d15 	stw	r8,564(sp)
 4001c9c:	10033b16 	blt	r2,zero,400298c <__kernel_rem_pio2+0xd64>
 4001ca0:	da009217 	ldw	r8,584(sp)
 4001ca4:	d9009217 	ldw	r4,584(sp)
 4001ca8:	42000044 	addi	r8,r8,1
 4001cac:	40fffa24 	muli	r3,r8,-24
 4001cb0:	da009515 	stw	r8,596(sp)
 4001cb4:	da008d17 	ldw	r8,564(sp)
 4001cb8:	1c07883a 	add	r3,r3,r16
 4001cbc:	d8c09015 	stw	r3,576(sp)
 4001cc0:	b205883a 	add	r2,r22,r8
 4001cc4:	2223c83a 	sub	r17,r4,r8
 4001cc8:	10001016 	blt	r2,zero,4001d0c <__kernel_rem_pio2+0xe4>
 4001ccc:	da00a717 	ldw	r8,668(sp)
 4001cd0:	8c65883a 	add	r18,r17,r17
 4001cd4:	94a5883a 	add	r18,r18,r18
 4001cd8:	1445883a 	add	r2,r2,r17
 4001cdc:	dcc05004 	addi	r19,sp,320
 4001ce0:	44a5883a 	add	r18,r8,r18
 4001ce4:	14000044 	addi	r16,r2,1
 4001ce8:	88015316 	blt	r17,zero,4002238 <__kernel_rem_pio2+0x610>
 4001cec:	91000017 	ldw	r4,0(r18)
 4001cf0:	4006bec0 	call	4006bec <__floatsidf>
 4001cf4:	98800015 	stw	r2,0(r19)
 4001cf8:	98c00115 	stw	r3,4(r19)
 4001cfc:	8c400044 	addi	r17,r17,1
 4001d00:	9cc00204 	addi	r19,r19,8
 4001d04:	94800104 	addi	r18,r18,4
 4001d08:	8c3ff71e 	bne	r17,r16,4001ce8 <__ram_exceptions_end+0xfbfe1aa0>
 4001d0c:	b0002816 	blt	r22,zero,4001db0 <__kernel_rem_pio2+0x188>
 4001d10:	da008d17 	ldw	r8,564(sp)
 4001d14:	b4c00044 	addi	r19,r22,1
 4001d18:	982690fa 	slli	r19,r19,3
 4001d1c:	402490fa 	slli	r18,r8,3
 4001d20:	da008e17 	ldw	r8,568(sp)
 4001d24:	d8805004 	addi	r2,sp,320
 4001d28:	94000204 	addi	r16,r18,8
 4001d2c:	d823883a 	mov	r17,sp
 4001d30:	14a5883a 	add	r18,r2,r18
 4001d34:	dcef883a 	add	r23,sp,r19
 4001d38:	4421883a 	add	r16,r8,r16
 4001d3c:	dd809115 	stw	r22,580(sp)
 4001d40:	4039883a 	mov	fp,r8
 4001d44:	da008d17 	ldw	r8,564(sp)
 4001d48:	40016016 	blt	r8,zero,40022cc <__kernel_rem_pio2+0x6a4>
 4001d4c:	e027883a 	mov	r19,fp
 4001d50:	9029883a 	mov	r20,r18
 4001d54:	002d883a 	mov	r22,zero
 4001d58:	002b883a 	mov	r21,zero
 4001d5c:	a1800017 	ldw	r6,0(r20)
 4001d60:	a1c00117 	ldw	r7,4(r20)
 4001d64:	99000017 	ldw	r4,0(r19)
 4001d68:	99400117 	ldw	r5,4(r19)
 4001d6c:	9cc00204 	addi	r19,r19,8
 4001d70:	a53ffe04 	addi	r20,r20,-8
 4001d74:	4005b580 	call	4005b58 <__muldf3>
 4001d78:	b009883a 	mov	r4,r22
 4001d7c:	a80b883a 	mov	r5,r21
 4001d80:	100d883a 	mov	r6,r2
 4001d84:	180f883a 	mov	r7,r3
 4001d88:	400476c0 	call	400476c <__adddf3>
 4001d8c:	102d883a 	mov	r22,r2
 4001d90:	182b883a 	mov	r21,r3
 4001d94:	9c3ff11e 	bne	r19,r16,4001d5c <__ram_exceptions_end+0xfbfe1b14>
 4001d98:	8d800015 	stw	r22,0(r17)
 4001d9c:	8d400115 	stw	r21,4(r17)
 4001da0:	8c400204 	addi	r17,r17,8
 4001da4:	94800204 	addi	r18,r18,8
 4001da8:	8dffe61e 	bne	r17,r23,4001d44 <__ram_exceptions_end+0xfbfe1afc>
 4001dac:	dd809117 	ldw	r22,580(sp)
 4001db0:	00d00034 	movhi	r3,16384
 4001db4:	da009317 	ldw	r8,588(sp)
 4001db8:	18ffff84 	addi	r3,r3,-2
 4001dbc:	b0c7883a 	add	r3,r22,r3
 4001dc0:	18c7883a 	add	r3,r3,r3
 4001dc4:	402090fa 	slli	r16,r8,3
 4001dc8:	18c7883a 	add	r3,r3,r3
 4001dcc:	da007804 	addi	r8,sp,480
 4001dd0:	40d1883a 	add	r8,r8,r3
 4001dd4:	b0bfffc4 	addi	r2,r22,-1
 4001dd8:	da009615 	stw	r8,600(sp)
 4001ddc:	da008e17 	ldw	r8,568(sp)
 4001de0:	1085883a 	add	r2,r2,r2
 4001de4:	1085883a 	add	r2,r2,r2
 4001de8:	19000104 	addi	r4,r3,4
 4001dec:	d885883a 	add	r2,sp,r2
 4001df0:	4421883a 	add	r16,r8,r16
 4001df4:	da007804 	addi	r8,sp,480
 4001df8:	4111883a 	add	r8,r8,r4
 4001dfc:	10807804 	addi	r2,r2,480
 4001e00:	da009715 	stw	r8,604(sp)
 4001e04:	b025883a 	mov	r18,r22
 4001e08:	d8809815 	stw	r2,608(sp)
 4001e0c:	dd809415 	stw	r22,592(sp)
 4001e10:	900490fa 	slli	r2,r18,3
 4001e14:	d885883a 	add	r2,sp,r2
 4001e18:	17000017 	ldw	fp,0(r2)
 4001e1c:	15400117 	ldw	r21,4(r2)
 4001e20:	04802b0e 	bge	zero,r18,4001ed0 <__kernel_rem_pio2+0x2a8>
 4001e24:	00880034 	movhi	r2,8192
 4001e28:	10bfffc4 	addi	r2,r2,-1
 4001e2c:	90a9883a 	add	r20,r18,r2
 4001e30:	a02890fa 	slli	r20,r20,3
 4001e34:	dc407804 	addi	r17,sp,480
 4001e38:	dcfffe04 	addi	r19,sp,-8
 4001e3c:	dd29883a 	add	r20,sp,r20
 4001e40:	000d883a 	mov	r6,zero
 4001e44:	01cf9c34 	movhi	r7,15984
 4001e48:	e009883a 	mov	r4,fp
 4001e4c:	a80b883a 	mov	r5,r21
 4001e50:	4005b580 	call	4005b58 <__muldf3>
 4001e54:	180b883a 	mov	r5,r3
 4001e58:	1009883a 	mov	r4,r2
 4001e5c:	4006b6c0 	call	4006b6c <__fixdfsi>
 4001e60:	1009883a 	mov	r4,r2
 4001e64:	4006bec0 	call	4006bec <__floatsidf>
 4001e68:	000d883a 	mov	r6,zero
 4001e6c:	01d05c34 	movhi	r7,16752
 4001e70:	1009883a 	mov	r4,r2
 4001e74:	180b883a 	mov	r5,r3
 4001e78:	102f883a 	mov	r23,r2
 4001e7c:	182d883a 	mov	r22,r3
 4001e80:	4005b580 	call	4005b58 <__muldf3>
 4001e84:	100d883a 	mov	r6,r2
 4001e88:	180f883a 	mov	r7,r3
 4001e8c:	e009883a 	mov	r4,fp
 4001e90:	a80b883a 	mov	r5,r21
 4001e94:	40062700 	call	4006270 <__subdf3>
 4001e98:	180b883a 	mov	r5,r3
 4001e9c:	1009883a 	mov	r4,r2
 4001ea0:	4006b6c0 	call	4006b6c <__fixdfsi>
 4001ea4:	a1800017 	ldw	r6,0(r20)
 4001ea8:	a1c00117 	ldw	r7,4(r20)
 4001eac:	88800015 	stw	r2,0(r17)
 4001eb0:	b809883a 	mov	r4,r23
 4001eb4:	b00b883a 	mov	r5,r22
 4001eb8:	400476c0 	call	400476c <__adddf3>
 4001ebc:	a53ffe04 	addi	r20,r20,-8
 4001ec0:	1039883a 	mov	fp,r2
 4001ec4:	182b883a 	mov	r21,r3
 4001ec8:	8c400104 	addi	r17,r17,4
 4001ecc:	a4ffdc1e 	bne	r20,r19,4001e40 <__ram_exceptions_end+0xfbfe1bf8>
 4001ed0:	d9809017 	ldw	r6,576(sp)
 4001ed4:	a80b883a 	mov	r5,r21
 4001ed8:	e009883a 	mov	r4,fp
 4001edc:	4002f000 	call	4002f00 <scalbn>
 4001ee0:	000d883a 	mov	r6,zero
 4001ee4:	01cff034 	movhi	r7,16320
 4001ee8:	1009883a 	mov	r4,r2
 4001eec:	180b883a 	mov	r5,r3
 4001ef0:	1027883a 	mov	r19,r2
 4001ef4:	1823883a 	mov	r17,r3
 4001ef8:	4005b580 	call	4005b58 <__muldf3>
 4001efc:	1009883a 	mov	r4,r2
 4001f00:	180b883a 	mov	r5,r3
 4001f04:	4002c980 	call	4002c98 <floor>
 4001f08:	000d883a 	mov	r6,zero
 4001f0c:	01d00834 	movhi	r7,16416
 4001f10:	1009883a 	mov	r4,r2
 4001f14:	180b883a 	mov	r5,r3
 4001f18:	4005b580 	call	4005b58 <__muldf3>
 4001f1c:	100d883a 	mov	r6,r2
 4001f20:	180f883a 	mov	r7,r3
 4001f24:	9809883a 	mov	r4,r19
 4001f28:	880b883a 	mov	r5,r17
 4001f2c:	40062700 	call	4006270 <__subdf3>
 4001f30:	180b883a 	mov	r5,r3
 4001f34:	1009883a 	mov	r4,r2
 4001f38:	1827883a 	mov	r19,r3
 4001f3c:	1029883a 	mov	r20,r2
 4001f40:	4006b6c0 	call	4006b6c <__fixdfsi>
 4001f44:	1009883a 	mov	r4,r2
 4001f48:	1023883a 	mov	r17,r2
 4001f4c:	4006bec0 	call	4006bec <__floatsidf>
 4001f50:	a009883a 	mov	r4,r20
 4001f54:	100d883a 	mov	r6,r2
 4001f58:	180f883a 	mov	r7,r3
 4001f5c:	980b883a 	mov	r5,r19
 4001f60:	40062700 	call	4006270 <__subdf3>
 4001f64:	d9009017 	ldw	r4,576(sp)
 4001f68:	1013883a 	mov	r9,r2
 4001f6c:	102b883a 	mov	r21,r2
 4001f70:	1811883a 	mov	r8,r3
 4001f74:	0100b30e 	bge	zero,r4,4002244 <__kernel_rem_pio2+0x61c>
 4001f78:	90bfffc4 	addi	r2,r18,-1
 4001f7c:	1085883a 	add	r2,r2,r2
 4001f80:	1085883a 	add	r2,r2,r2
 4001f84:	d885883a 	add	r2,sp,r2
 4001f88:	10807804 	addi	r2,r2,480
 4001f8c:	d9809017 	ldw	r6,576(sp)
 4001f90:	11400017 	ldw	r5,0(r2)
 4001f94:	01000604 	movi	r4,24
 4001f98:	2189c83a 	sub	r4,r4,r6
 4001f9c:	290dd83a 	sra	r6,r5,r4
 4001fa0:	d9c09017 	ldw	r7,576(sp)
 4001fa4:	04c005c4 	movi	r19,23
 4001fa8:	3108983a 	sll	r4,r6,r4
 4001fac:	99e7c83a 	sub	r19,r19,r7
 4001fb0:	89a3883a 	add	r17,r17,r6
 4001fb4:	2909c83a 	sub	r4,r5,r4
 4001fb8:	24e7d83a 	sra	r19,r4,r19
 4001fbc:	11000015 	stw	r4,0(r2)
 4001fc0:	04c02a0e 	bge	zero,r19,400206c <__kernel_rem_pio2+0x444>
 4001fc4:	8c400044 	addi	r17,r17,1
 4001fc8:	0481570e 	bge	zero,r18,4002528 <__kernel_rem_pio2+0x900>
 4001fcc:	02804034 	movhi	r10,256
 4001fd0:	52bfffc4 	addi	r10,r10,-1
 4001fd4:	d8807804 	addi	r2,sp,480
 4001fd8:	000b883a 	mov	r5,zero
 4001fdc:	0029883a 	mov	r20,zero
 4001fe0:	01c04034 	movhi	r7,256
 4001fe4:	00000706 	br	4002004 <__kernel_rem_pio2+0x3dc>
 4001fe8:	390dc83a 	sub	r6,r7,r4
 4001fec:	20000226 	beq	r4,zero,4001ff8 <__kernel_rem_pio2+0x3d0>
 4001ff0:	11800015 	stw	r6,0(r2)
 4001ff4:	05000044 	movi	r20,1
 4001ff8:	29400044 	addi	r5,r5,1
 4001ffc:	10800104 	addi	r2,r2,4
 4002000:	2c80080e 	bge	r5,r18,4002024 <__kernel_rem_pio2+0x3fc>
 4002004:	11000017 	ldw	r4,0(r2)
 4002008:	a03ff726 	beq	r20,zero,4001fe8 <__ram_exceptions_end+0xfbfe1da0>
 400200c:	5109c83a 	sub	r4,r10,r4
 4002010:	11000015 	stw	r4,0(r2)
 4002014:	29400044 	addi	r5,r5,1
 4002018:	05000044 	movi	r20,1
 400201c:	10800104 	addi	r2,r2,4
 4002020:	2cbff816 	blt	r5,r18,4002004 <__ram_exceptions_end+0xfbfe1dbc>
 4002024:	d9009017 	ldw	r4,576(sp)
 4002028:	01000e0e 	bge	zero,r4,4002064 <__kernel_rem_pio2+0x43c>
 400202c:	00800044 	movi	r2,1
 4002030:	20808d26 	beq	r4,r2,4002268 <__kernel_rem_pio2+0x640>
 4002034:	00800084 	movi	r2,2
 4002038:	20800a1e 	bne	r4,r2,4002064 <__kernel_rem_pio2+0x43c>
 400203c:	90bfffc4 	addi	r2,r18,-1
 4002040:	1085883a 	add	r2,r2,r2
 4002044:	1085883a 	add	r2,r2,r2
 4002048:	d885883a 	add	r2,sp,r2
 400204c:	10807804 	addi	r2,r2,480
 4002050:	11400017 	ldw	r5,0(r2)
 4002054:	01001034 	movhi	r4,64
 4002058:	213fffc4 	addi	r4,r4,-1
 400205c:	2908703a 	and	r4,r5,r4
 4002060:	11000015 	stw	r4,0(r2)
 4002064:	00800084 	movi	r2,2
 4002068:	98805d26 	beq	r19,r2,40021e0 <__kernel_rem_pio2+0x5b8>
 400206c:	400b883a 	mov	r5,r8
 4002070:	000d883a 	mov	r6,zero
 4002074:	000f883a 	mov	r7,zero
 4002078:	a809883a 	mov	r4,r21
 400207c:	da009b15 	stw	r8,620(sp)
 4002080:	40059000 	call	4005900 <__eqdf2>
 4002084:	da009b17 	ldw	r8,620(sp)
 4002088:	10012b1e 	bne	r2,zero,4002538 <__kernel_rem_pio2+0x910>
 400208c:	da009417 	ldw	r8,592(sp)
 4002090:	917fffc4 	addi	r5,r18,-1
 4002094:	2a000e16 	blt	r5,r8,40020d0 <__kernel_rem_pio2+0x4a8>
 4002098:	00900034 	movhi	r2,16384
 400209c:	10bfffc4 	addi	r2,r2,-1
 40020a0:	9085883a 	add	r2,r18,r2
 40020a4:	1085883a 	add	r2,r2,r2
 40020a8:	d9809717 	ldw	r6,604(sp)
 40020ac:	1085883a 	add	r2,r2,r2
 40020b0:	d9007804 	addi	r4,sp,480
 40020b4:	0007883a 	mov	r3,zero
 40020b8:	2085883a 	add	r2,r4,r2
 40020bc:	11000017 	ldw	r4,0(r2)
 40020c0:	10bfff04 	addi	r2,r2,-4
 40020c4:	1906b03a 	or	r3,r3,r4
 40020c8:	11bffc1e 	bne	r2,r6,40020bc <__ram_exceptions_end+0xfbfe1e74>
 40020cc:	1800821e 	bne	r3,zero,40022d8 <__kernel_rem_pio2+0x6b0>
 40020d0:	da009817 	ldw	r8,608(sp)
 40020d4:	40800017 	ldw	r2,0(r8)
 40020d8:	1001151e 	bne	r2,zero,4002530 <__kernel_rem_pio2+0x908>
 40020dc:	d8809617 	ldw	r2,600(sp)
 40020e0:	05000044 	movi	r20,1
 40020e4:	10bfff04 	addi	r2,r2,-4
 40020e8:	10c00117 	ldw	r3,4(r2)
 40020ec:	a5000044 	addi	r20,r20,1
 40020f0:	183ffc26 	beq	r3,zero,40020e4 <__ram_exceptions_end+0xfbfe1e9c>
 40020f4:	9529883a 	add	r20,r18,r20
 40020f8:	90800044 	addi	r2,r18,1
 40020fc:	dd009115 	stw	r20,580(sp)
 4002100:	a0803216 	blt	r20,r2,40021cc <__kernel_rem_pio2+0x5a4>
 4002104:	da009317 	ldw	r8,588(sp)
 4002108:	d8c09117 	ldw	r3,580(sp)
 400210c:	44a3883a 	add	r17,r8,r18
 4002110:	da009217 	ldw	r8,584(sp)
 4002114:	882290fa 	slli	r17,r17,3
 4002118:	40a5883a 	add	r18,r8,r2
 400211c:	da009517 	ldw	r8,596(sp)
 4002120:	100490fa 	slli	r2,r2,3
 4002124:	94a5883a 	add	r18,r18,r18
 4002128:	40eb883a 	add	r21,r8,r3
 400212c:	da00a717 	ldw	r8,668(sp)
 4002130:	ad6b883a 	add	r21,r21,r21
 4002134:	94a5883a 	add	r18,r18,r18
 4002138:	ad6b883a 	add	r21,r21,r21
 400213c:	d8c05004 	addi	r3,sp,320
 4002140:	44a5883a 	add	r18,r8,r18
 4002144:	1c63883a 	add	r17,r3,r17
 4002148:	d8a7883a 	add	r19,sp,r2
 400214c:	456b883a 	add	r21,r8,r21
 4002150:	91000017 	ldw	r4,0(r18)
 4002154:	4006bec0 	call	4006bec <__floatsidf>
 4002158:	da008d17 	ldw	r8,564(sp)
 400215c:	88800015 	stw	r2,0(r17)
 4002160:	88c00115 	stw	r3,4(r17)
 4002164:	40001b16 	blt	r8,zero,40021d4 <__kernel_rem_pio2+0x5ac>
 4002168:	dd008e17 	ldw	r20,568(sp)
 400216c:	882d883a 	mov	r22,r17
 4002170:	002f883a 	mov	r23,zero
 4002174:	0039883a 	mov	fp,zero
 4002178:	b1800017 	ldw	r6,0(r22)
 400217c:	b1c00117 	ldw	r7,4(r22)
 4002180:	a1000017 	ldw	r4,0(r20)
 4002184:	a1400117 	ldw	r5,4(r20)
 4002188:	a5000204 	addi	r20,r20,8
 400218c:	b5bffe04 	addi	r22,r22,-8
 4002190:	4005b580 	call	4005b58 <__muldf3>
 4002194:	b809883a 	mov	r4,r23
 4002198:	e00b883a 	mov	r5,fp
 400219c:	100d883a 	mov	r6,r2
 40021a0:	180f883a 	mov	r7,r3
 40021a4:	400476c0 	call	400476c <__adddf3>
 40021a8:	102f883a 	mov	r23,r2
 40021ac:	1839883a 	mov	fp,r3
 40021b0:	a43ff11e 	bne	r20,r16,4002178 <__ram_exceptions_end+0xfbfe1f30>
 40021b4:	9dc00015 	stw	r23,0(r19)
 40021b8:	9f000115 	stw	fp,4(r19)
 40021bc:	94800104 	addi	r18,r18,4
 40021c0:	8c400204 	addi	r17,r17,8
 40021c4:	9cc00204 	addi	r19,r19,8
 40021c8:	957fe11e 	bne	r18,r21,4002150 <__ram_exceptions_end+0xfbfe1f08>
 40021cc:	dc809117 	ldw	r18,580(sp)
 40021d0:	003f0f06 	br	4001e10 <__ram_exceptions_end+0xfbfe1bc8>
 40021d4:	002f883a 	mov	r23,zero
 40021d8:	0039883a 	mov	fp,zero
 40021dc:	003ff506 	br	40021b4 <__ram_exceptions_end+0xfbfe1f6c>
 40021e0:	480d883a 	mov	r6,r9
 40021e4:	180f883a 	mov	r7,r3
 40021e8:	0009883a 	mov	r4,zero
 40021ec:	014ffc34 	movhi	r5,16368
 40021f0:	40062700 	call	4006270 <__subdf3>
 40021f4:	102b883a 	mov	r21,r2
 40021f8:	1811883a 	mov	r8,r3
 40021fc:	a03f9b26 	beq	r20,zero,400206c <__ram_exceptions_end+0xfbfe1e24>
 4002200:	d9809017 	ldw	r6,576(sp)
 4002204:	0009883a 	mov	r4,zero
 4002208:	014ffc34 	movhi	r5,16368
 400220c:	d8c09b15 	stw	r3,620(sp)
 4002210:	4002f000 	call	4002f00 <scalbn>
 4002214:	da009b17 	ldw	r8,620(sp)
 4002218:	a809883a 	mov	r4,r21
 400221c:	100d883a 	mov	r6,r2
 4002220:	400b883a 	mov	r5,r8
 4002224:	180f883a 	mov	r7,r3
 4002228:	40062700 	call	4006270 <__subdf3>
 400222c:	102b883a 	mov	r21,r2
 4002230:	1811883a 	mov	r8,r3
 4002234:	003f8d06 	br	400206c <__ram_exceptions_end+0xfbfe1e24>
 4002238:	0005883a 	mov	r2,zero
 400223c:	0007883a 	mov	r3,zero
 4002240:	003eac06 	br	4001cf4 <__ram_exceptions_end+0xfbfe1aac>
 4002244:	d8809017 	ldw	r2,576(sp)
 4002248:	1000121e 	bne	r2,zero,4002294 <__kernel_rem_pio2+0x66c>
 400224c:	90bfffc4 	addi	r2,r18,-1
 4002250:	1085883a 	add	r2,r2,r2
 4002254:	1085883a 	add	r2,r2,r2
 4002258:	d885883a 	add	r2,sp,r2
 400225c:	14c07817 	ldw	r19,480(r2)
 4002260:	9827d5fa 	srai	r19,r19,23
 4002264:	003f5606 	br	4001fc0 <__ram_exceptions_end+0xfbfe1d78>
 4002268:	90bfffc4 	addi	r2,r18,-1
 400226c:	1085883a 	add	r2,r2,r2
 4002270:	1085883a 	add	r2,r2,r2
 4002274:	d885883a 	add	r2,sp,r2
 4002278:	10807804 	addi	r2,r2,480
 400227c:	11000017 	ldw	r4,0(r2)
 4002280:	01402034 	movhi	r5,128
 4002284:	297fffc4 	addi	r5,r5,-1
 4002288:	2148703a 	and	r4,r4,r5
 400228c:	11000015 	stw	r4,0(r2)
 4002290:	003f7406 	br	4002064 <__ram_exceptions_end+0xfbfe1e1c>
 4002294:	4809883a 	mov	r4,r9
 4002298:	180b883a 	mov	r5,r3
 400229c:	000d883a 	mov	r6,zero
 40022a0:	01cff834 	movhi	r7,16352
 40022a4:	d8c09a15 	stw	r3,616(sp)
 40022a8:	d8c09b15 	stw	r3,620(sp)
 40022ac:	da409915 	stw	r9,612(sp)
 40022b0:	40059880 	call	4005988 <__gedf2>
 40022b4:	d8c09a17 	ldw	r3,616(sp)
 40022b8:	da009b17 	ldw	r8,620(sp)
 40022bc:	da409917 	ldw	r9,612(sp)
 40022c0:	1000920e 	bge	r2,zero,400250c <__kernel_rem_pio2+0x8e4>
 40022c4:	0027883a 	mov	r19,zero
 40022c8:	003f6806 	br	400206c <__ram_exceptions_end+0xfbfe1e24>
 40022cc:	002d883a 	mov	r22,zero
 40022d0:	002b883a 	mov	r21,zero
 40022d4:	003eb006 	br	4001d98 <__ram_exceptions_end+0xfbfe1b50>
 40022d8:	2945883a 	add	r2,r5,r5
 40022dc:	da009017 	ldw	r8,576(sp)
 40022e0:	1085883a 	add	r2,r2,r2
 40022e4:	d885883a 	add	r2,sp,r2
 40022e8:	10807817 	ldw	r2,480(r2)
 40022ec:	423ffa04 	addi	r8,r8,-24
 40022f0:	dc409115 	stw	r17,580(sp)
 40022f4:	dcc08d15 	stw	r19,564(sp)
 40022f8:	da009015 	stw	r8,576(sp)
 40022fc:	dd809417 	ldw	r22,592(sp)
 4002300:	2823883a 	mov	r17,r5
 4002304:	10000e1e 	bne	r2,zero,4002340 <__kernel_rem_pio2+0x718>
 4002308:	00900034 	movhi	r2,16384
 400230c:	10bfffc4 	addi	r2,r2,-1
 4002310:	2885883a 	add	r2,r5,r2
 4002314:	1085883a 	add	r2,r2,r2
 4002318:	d8c07804 	addi	r3,sp,480
 400231c:	1085883a 	add	r2,r2,r2
 4002320:	1885883a 	add	r2,r3,r2
 4002324:	4007883a 	mov	r3,r8
 4002328:	10bfff04 	addi	r2,r2,-4
 400232c:	11000117 	ldw	r4,4(r2)
 4002330:	8c7fffc4 	addi	r17,r17,-1
 4002334:	18fffa04 	addi	r3,r3,-24
 4002338:	203ffb26 	beq	r4,zero,4002328 <__ram_exceptions_end+0xfbfe20e0>
 400233c:	d8c09015 	stw	r3,576(sp)
 4002340:	d9809017 	ldw	r6,576(sp)
 4002344:	0009883a 	mov	r4,zero
 4002348:	014ffc34 	movhi	r5,16368
 400234c:	4002f000 	call	4002f00 <scalbn>
 4002350:	1029883a 	mov	r20,r2
 4002354:	182b883a 	mov	r21,r3
 4002358:	88018416 	blt	r17,zero,400296c <__kernel_rem_pio2+0xd44>
 400235c:	881090fa 	slli	r8,r17,3
 4002360:	d8c07804 	addi	r3,sp,480
 4002364:	da008e15 	stw	r8,568(sp)
 4002368:	d8808e17 	ldw	r2,568(sp)
 400236c:	8c51883a 	add	r8,r17,r17
 4002370:	4211883a 	add	r8,r8,r8
 4002374:	d8a1883a 	add	r16,sp,r2
 4002378:	1a25883a 	add	r18,r3,r8
 400237c:	da3ffe04 	addi	r8,sp,-8
 4002380:	da008c15 	stw	r8,560(sp)
 4002384:	8039883a 	mov	fp,r16
 4002388:	91000017 	ldw	r4,0(r18)
 400238c:	e73ffe04 	addi	fp,fp,-8
 4002390:	94bfff04 	addi	r18,r18,-4
 4002394:	4006bec0 	call	4006bec <__floatsidf>
 4002398:	a00d883a 	mov	r6,r20
 400239c:	a80f883a 	mov	r7,r21
 40023a0:	1009883a 	mov	r4,r2
 40023a4:	180b883a 	mov	r5,r3
 40023a8:	4005b580 	call	4005b58 <__muldf3>
 40023ac:	a009883a 	mov	r4,r20
 40023b0:	a80b883a 	mov	r5,r21
 40023b4:	e0800215 	stw	r2,8(fp)
 40023b8:	e0c00315 	stw	r3,12(fp)
 40023bc:	000d883a 	mov	r6,zero
 40023c0:	01cf9c34 	movhi	r7,15984
 40023c4:	4005b580 	call	4005b58 <__muldf3>
 40023c8:	da008c17 	ldw	r8,560(sp)
 40023cc:	1029883a 	mov	r20,r2
 40023d0:	182b883a 	mov	r21,r3
 40023d4:	e23fec1e 	bne	fp,r8,4002388 <__ram_exceptions_end+0xfbfe2140>
 40023d8:	0029883a 	mov	r20,zero
 40023dc:	b0004f16 	blt	r22,zero,400251c <__kernel_rem_pio2+0x8f4>
 40023e0:	05410074 	movhi	r21,1025
 40023e4:	014ffe74 	movhi	r5,16377
 40023e8:	ad786b04 	addi	r21,r21,-7764
 40023ec:	8027883a 	mov	r19,r16
 40023f0:	01100034 	movhi	r4,16384
 40023f4:	29487ec4 	addi	r5,r5,8699
 40023f8:	0039883a 	mov	fp,zero
 40023fc:	002f883a 	mov	r23,zero
 4002400:	0025883a 	mov	r18,zero
 4002404:	00000506 	br	400241c <__kernel_rem_pio2+0x7f4>
 4002408:	9cc00204 	addi	r19,r19,8
 400240c:	a4800f16 	blt	r20,r18,400244c <__kernel_rem_pio2+0x824>
 4002410:	a9000017 	ldw	r4,0(r21)
 4002414:	a9400117 	ldw	r5,4(r21)
 4002418:	ad400204 	addi	r21,r21,8
 400241c:	99800017 	ldw	r6,0(r19)
 4002420:	99c00117 	ldw	r7,4(r19)
 4002424:	94800044 	addi	r18,r18,1
 4002428:	4005b580 	call	4005b58 <__muldf3>
 400242c:	e009883a 	mov	r4,fp
 4002430:	b80b883a 	mov	r5,r23
 4002434:	100d883a 	mov	r6,r2
 4002438:	180f883a 	mov	r7,r3
 400243c:	400476c0 	call	400476c <__adddf3>
 4002440:	1039883a 	mov	fp,r2
 4002444:	182f883a 	mov	r23,r3
 4002448:	b4bfef0e 	bge	r22,r18,4002408 <__ram_exceptions_end+0xfbfe21c0>
 400244c:	a00490fa 	slli	r2,r20,3
 4002450:	da008c17 	ldw	r8,560(sp)
 4002454:	843ffe04 	addi	r16,r16,-8
 4002458:	d885883a 	add	r2,sp,r2
 400245c:	10802804 	addi	r2,r2,160
 4002460:	17000015 	stw	fp,0(r2)
 4002464:	15c00115 	stw	r23,4(r2)
 4002468:	a5000044 	addi	r20,r20,1
 400246c:	823fdb1e 	bne	r16,r8,40023dc <__ram_exceptions_end+0xfbfe2194>
 4002470:	da00a617 	ldw	r8,664(sp)
 4002474:	00800084 	movi	r2,2
 4002478:	12006616 	blt	r2,r8,4002614 <__kernel_rem_pio2+0x9ec>
 400247c:	0200de16 	blt	zero,r8,40027f8 <__kernel_rem_pio2+0xbd0>
 4002480:	4000141e 	bne	r8,zero,40024d4 <__kernel_rem_pio2+0x8ac>
 4002484:	da008e17 	ldw	r8,568(sp)
 4002488:	d8802804 	addi	r2,sp,160
 400248c:	0007883a 	mov	r3,zero
 4002490:	1225883a 	add	r18,r2,r8
 4002494:	043fffc4 	movi	r16,-1
 4002498:	0005883a 	mov	r2,zero
 400249c:	91800017 	ldw	r6,0(r18)
 40024a0:	91c00117 	ldw	r7,4(r18)
 40024a4:	1009883a 	mov	r4,r2
 40024a8:	180b883a 	mov	r5,r3
 40024ac:	8c7fffc4 	addi	r17,r17,-1
 40024b0:	400476c0 	call	400476c <__adddf3>
 40024b4:	94bffe04 	addi	r18,r18,-8
 40024b8:	8c3ff81e 	bne	r17,r16,400249c <__ram_exceptions_end+0xfbfe2254>
 40024bc:	da008d17 	ldw	r8,564(sp)
 40024c0:	40000126 	beq	r8,zero,40024c8 <__kernel_rem_pio2+0x8a0>
 40024c4:	18e0003c 	xorhi	r3,r3,32768
 40024c8:	da008f17 	ldw	r8,572(sp)
 40024cc:	40800015 	stw	r2,0(r8)
 40024d0:	40c00115 	stw	r3,4(r8)
 40024d4:	da009117 	ldw	r8,580(sp)
 40024d8:	408001cc 	andi	r2,r8,7
 40024dc:	dfc0a517 	ldw	ra,660(sp)
 40024e0:	df00a417 	ldw	fp,656(sp)
 40024e4:	ddc0a317 	ldw	r23,652(sp)
 40024e8:	dd80a217 	ldw	r22,648(sp)
 40024ec:	dd40a117 	ldw	r21,644(sp)
 40024f0:	dd00a017 	ldw	r20,640(sp)
 40024f4:	dcc09f17 	ldw	r19,636(sp)
 40024f8:	dc809e17 	ldw	r18,632(sp)
 40024fc:	dc409d17 	ldw	r17,628(sp)
 4002500:	dc009c17 	ldw	r16,624(sp)
 4002504:	dec0a604 	addi	sp,sp,664
 4002508:	f800283a 	ret
 400250c:	8c400044 	addi	r17,r17,1
 4002510:	04810d0e 	bge	zero,r18,4002948 <__kernel_rem_pio2+0xd20>
 4002514:	04c00084 	movi	r19,2
 4002518:	003eac06 	br	4001fcc <__ram_exceptions_end+0xfbfe1d84>
 400251c:	0039883a 	mov	fp,zero
 4002520:	002f883a 	mov	r23,zero
 4002524:	003fc906 	br	400244c <__ram_exceptions_end+0xfbfe2204>
 4002528:	0029883a 	mov	r20,zero
 400252c:	003ebd06 	br	4002024 <__ram_exceptions_end+0xfbfe1ddc>
 4002530:	05000044 	movi	r20,1
 4002534:	003eef06 	br	40020f4 <__ram_exceptions_end+0xfbfe1eac>
 4002538:	4029883a 	mov	r20,r8
 400253c:	da009017 	ldw	r8,576(sp)
 4002540:	a809883a 	mov	r4,r21
 4002544:	a00b883a 	mov	r5,r20
 4002548:	020dc83a 	sub	r6,zero,r8
 400254c:	dc409115 	stw	r17,580(sp)
 4002550:	dd809417 	ldw	r22,592(sp)
 4002554:	dcc08d15 	stw	r19,564(sp)
 4002558:	4002f000 	call	4002f00 <scalbn>
 400255c:	000d883a 	mov	r6,zero
 4002560:	01d05c34 	movhi	r7,16752
 4002564:	1009883a 	mov	r4,r2
 4002568:	180b883a 	mov	r5,r3
 400256c:	102b883a 	mov	r21,r2
 4002570:	1823883a 	mov	r17,r3
 4002574:	40059880 	call	4005988 <__gedf2>
 4002578:	1000e916 	blt	r2,zero,4002920 <__kernel_rem_pio2+0xcf8>
 400257c:	000d883a 	mov	r6,zero
 4002580:	01cf9c34 	movhi	r7,15984
 4002584:	880b883a 	mov	r5,r17
 4002588:	a809883a 	mov	r4,r21
 400258c:	4005b580 	call	4005b58 <__muldf3>
 4002590:	180b883a 	mov	r5,r3
 4002594:	1009883a 	mov	r4,r2
 4002598:	4006b6c0 	call	4006b6c <__fixdfsi>
 400259c:	1029883a 	mov	r20,r2
 40025a0:	9485883a 	add	r2,r18,r18
 40025a4:	1085883a 	add	r2,r2,r2
 40025a8:	a009883a 	mov	r4,r20
 40025ac:	d8a1883a 	add	r16,sp,r2
 40025b0:	4006bec0 	call	4006bec <__floatsidf>
 40025b4:	000d883a 	mov	r6,zero
 40025b8:	01d05c34 	movhi	r7,16752
 40025bc:	1009883a 	mov	r4,r2
 40025c0:	180b883a 	mov	r5,r3
 40025c4:	4005b580 	call	4005b58 <__muldf3>
 40025c8:	880b883a 	mov	r5,r17
 40025cc:	100d883a 	mov	r6,r2
 40025d0:	180f883a 	mov	r7,r3
 40025d4:	a809883a 	mov	r4,r21
 40025d8:	40062700 	call	4006270 <__subdf3>
 40025dc:	180b883a 	mov	r5,r3
 40025e0:	1009883a 	mov	r4,r2
 40025e4:	4006b6c0 	call	4006b6c <__fixdfsi>
 40025e8:	da009017 	ldw	r8,576(sp)
 40025ec:	94400044 	addi	r17,r18,1
 40025f0:	8c47883a 	add	r3,r17,r17
 40025f4:	84007804 	addi	r16,r16,480
 40025f8:	18c7883a 	add	r3,r3,r3
 40025fc:	80800015 	stw	r2,0(r16)
 4002600:	d8c7883a 	add	r3,sp,r3
 4002604:	42000604 	addi	r8,r8,24
 4002608:	da009015 	stw	r8,576(sp)
 400260c:	1d007815 	stw	r20,480(r3)
 4002610:	003f4b06 	br	4002340 <__ram_exceptions_end+0xfbfe20f8>
 4002614:	da00a617 	ldw	r8,664(sp)
 4002618:	008000c4 	movi	r2,3
 400261c:	40bfad1e 	bne	r8,r2,40024d4 <__ram_exceptions_end+0xfbfe228c>
 4002620:	0440bc0e 	bge	zero,r17,4002914 <__kernel_rem_pio2+0xcec>
 4002624:	da008e17 	ldw	r8,568(sp)
 4002628:	882090fa 	slli	r16,r17,3
 400262c:	dd402804 	addi	r21,sp,160
 4002630:	da05883a 	add	r2,sp,r8
 4002634:	10802804 	addi	r2,r2,160
 4002638:	15c00017 	ldw	r23,0(r2)
 400263c:	15800117 	ldw	r22,4(r2)
 4002640:	8029883a 	mov	r20,r16
 4002644:	843ffe04 	addi	r16,r16,-8
 4002648:	ac21883a 	add	r16,r21,r16
 400264c:	ad29883a 	add	r20,r21,r20
 4002650:	dac02604 	addi	r11,sp,152
 4002654:	8811883a 	mov	r8,r17
 4002658:	84400017 	ldw	r17,0(r16)
 400265c:	87000117 	ldw	fp,4(r16)
 4002660:	b80d883a 	mov	r6,r23
 4002664:	b00f883a 	mov	r7,r22
 4002668:	8809883a 	mov	r4,r17
 400266c:	e00b883a 	mov	r5,fp
 4002670:	da009b15 	stw	r8,620(sp)
 4002674:	dac09915 	stw	r11,612(sp)
 4002678:	400476c0 	call	400476c <__adddf3>
 400267c:	100d883a 	mov	r6,r2
 4002680:	180f883a 	mov	r7,r3
 4002684:	8809883a 	mov	r4,r17
 4002688:	e00b883a 	mov	r5,fp
 400268c:	1027883a 	mov	r19,r2
 4002690:	1825883a 	mov	r18,r3
 4002694:	40062700 	call	4006270 <__subdf3>
 4002698:	b80d883a 	mov	r6,r23
 400269c:	b00f883a 	mov	r7,r22
 40026a0:	1009883a 	mov	r4,r2
 40026a4:	180b883a 	mov	r5,r3
 40026a8:	400476c0 	call	400476c <__adddf3>
 40026ac:	dac09917 	ldw	r11,612(sp)
 40026b0:	a0800015 	stw	r2,0(r20)
 40026b4:	a0c00115 	stw	r3,4(r20)
 40026b8:	84c00015 	stw	r19,0(r16)
 40026bc:	84800115 	stw	r18,4(r16)
 40026c0:	843ffe04 	addi	r16,r16,-8
 40026c4:	a53ffe04 	addi	r20,r20,-8
 40026c8:	982f883a 	mov	r23,r19
 40026cc:	902d883a 	mov	r22,r18
 40026d0:	da009b17 	ldw	r8,620(sp)
 40026d4:	5c3fe01e 	bne	r11,r16,4002658 <__ram_exceptions_end+0xfbfe2410>
 40026d8:	00800044 	movi	r2,1
 40026dc:	12008d0e 	bge	r2,r8,4002914 <__kernel_rem_pio2+0xcec>
 40026e0:	402090fa 	slli	r16,r8,3
 40026e4:	da008e17 	ldw	r8,568(sp)
 40026e8:	8023883a 	mov	r17,r16
 40026ec:	da05883a 	add	r2,sp,r8
 40026f0:	10802804 	addi	r2,r2,160
 40026f4:	15800017 	ldw	r22,0(r2)
 40026f8:	15000117 	ldw	r20,4(r2)
 40026fc:	ac63883a 	add	r17,r21,r17
 4002700:	843ffe04 	addi	r16,r16,-8
 4002704:	ac21883a 	add	r16,r21,r16
 4002708:	8825883a 	mov	r18,r17
 400270c:	8811883a 	mov	r8,r17
 4002710:	84400017 	ldw	r17,0(r16)
 4002714:	87000117 	ldw	fp,4(r16)
 4002718:	b009883a 	mov	r4,r22
 400271c:	a00b883a 	mov	r5,r20
 4002720:	880d883a 	mov	r6,r17
 4002724:	e00f883a 	mov	r7,fp
 4002728:	da009b15 	stw	r8,620(sp)
 400272c:	400476c0 	call	400476c <__adddf3>
 4002730:	100d883a 	mov	r6,r2
 4002734:	180f883a 	mov	r7,r3
 4002738:	8809883a 	mov	r4,r17
 400273c:	e00b883a 	mov	r5,fp
 4002740:	102f883a 	mov	r23,r2
 4002744:	1827883a 	mov	r19,r3
 4002748:	40062700 	call	4006270 <__subdf3>
 400274c:	b00d883a 	mov	r6,r22
 4002750:	a00f883a 	mov	r7,r20
 4002754:	1009883a 	mov	r4,r2
 4002758:	180b883a 	mov	r5,r3
 400275c:	400476c0 	call	400476c <__adddf3>
 4002760:	90800015 	stw	r2,0(r18)
 4002764:	90c00115 	stw	r3,4(r18)
 4002768:	85c00015 	stw	r23,0(r16)
 400276c:	84c00115 	stw	r19,4(r16)
 4002770:	843ffe04 	addi	r16,r16,-8
 4002774:	94bffe04 	addi	r18,r18,-8
 4002778:	b82d883a 	mov	r22,r23
 400277c:	9829883a 	mov	r20,r19
 4002780:	da009b17 	ldw	r8,620(sp)
 4002784:	ac3fe21e 	bne	r21,r16,4002710 <__ram_exceptions_end+0xfbfe24c8>
 4002788:	4023883a 	mov	r17,r8
 400278c:	dc002a04 	addi	r16,sp,168
 4002790:	0005883a 	mov	r2,zero
 4002794:	0007883a 	mov	r3,zero
 4002798:	89800017 	ldw	r6,0(r17)
 400279c:	89c00117 	ldw	r7,4(r17)
 40027a0:	1009883a 	mov	r4,r2
 40027a4:	8c7ffe04 	addi	r17,r17,-8
 40027a8:	180b883a 	mov	r5,r3
 40027ac:	400476c0 	call	400476c <__adddf3>
 40027b0:	847ff91e 	bne	r16,r17,4002798 <__ram_exceptions_end+0xfbfe2550>
 40027b4:	da008d17 	ldw	r8,564(sp)
 40027b8:	40004726 	beq	r8,zero,40028d8 <__kernel_rem_pio2+0xcb0>
 40027bc:	d9002b17 	ldw	r4,172(sp)
 40027c0:	d9402917 	ldw	r5,164(sp)
 40027c4:	d9802a17 	ldw	r6,168(sp)
 40027c8:	da008f17 	ldw	r8,572(sp)
 40027cc:	d9c02817 	ldw	r7,160(sp)
 40027d0:	2960003c 	xorhi	r5,r5,32768
 40027d4:	2120003c 	xorhi	r4,r4,32768
 40027d8:	18e0003c 	xorhi	r3,r3,32768
 40027dc:	41c00015 	stw	r7,0(r8)
 40027e0:	41400115 	stw	r5,4(r8)
 40027e4:	41800215 	stw	r6,8(r8)
 40027e8:	41000315 	stw	r4,12(r8)
 40027ec:	40800415 	stw	r2,16(r8)
 40027f0:	40c00515 	stw	r3,20(r8)
 40027f4:	003f3706 	br	40024d4 <__ram_exceptions_end+0xfbfe228c>
 40027f8:	da008e17 	ldw	r8,568(sp)
 40027fc:	d8802804 	addi	r2,sp,160
 4002800:	dc002604 	addi	r16,sp,152
 4002804:	1225883a 	add	r18,r2,r8
 4002808:	0007883a 	mov	r3,zero
 400280c:	0005883a 	mov	r2,zero
 4002810:	91800017 	ldw	r6,0(r18)
 4002814:	91c00117 	ldw	r7,4(r18)
 4002818:	1009883a 	mov	r4,r2
 400281c:	94bffe04 	addi	r18,r18,-8
 4002820:	180b883a 	mov	r5,r3
 4002824:	400476c0 	call	400476c <__adddf3>
 4002828:	943ff91e 	bne	r18,r16,4002810 <__ram_exceptions_end+0xfbfe25c8>
 400282c:	da008d17 	ldw	r8,564(sp)
 4002830:	d9002817 	ldw	r4,160(sp)
 4002834:	d9402917 	ldw	r5,164(sp)
 4002838:	40001a26 	beq	r8,zero,40028a4 <__kernel_rem_pio2+0xc7c>
 400283c:	da008f17 	ldw	r8,572(sp)
 4002840:	19a0003c 	xorhi	r6,r3,32768
 4002844:	180f883a 	mov	r7,r3
 4002848:	41800115 	stw	r6,4(r8)
 400284c:	40800015 	stw	r2,0(r8)
 4002850:	100d883a 	mov	r6,r2
 4002854:	40062700 	call	4006270 <__subdf3>
 4002858:	04400c0e 	bge	zero,r17,400288c <__kernel_rem_pio2+0xc64>
 400285c:	dc002a04 	addi	r16,sp,168
 4002860:	04800044 	movi	r18,1
 4002864:	81800017 	ldw	r6,0(r16)
 4002868:	81c00117 	ldw	r7,4(r16)
 400286c:	1009883a 	mov	r4,r2
 4002870:	180b883a 	mov	r5,r3
 4002874:	94800044 	addi	r18,r18,1
 4002878:	400476c0 	call	400476c <__adddf3>
 400287c:	84000204 	addi	r16,r16,8
 4002880:	8cbff80e 	bge	r17,r18,4002864 <__ram_exceptions_end+0xfbfe261c>
 4002884:	da008d17 	ldw	r8,564(sp)
 4002888:	40004226 	beq	r8,zero,4002994 <__kernel_rem_pio2+0xd6c>
 400288c:	da008f17 	ldw	r8,572(sp)
 4002890:	1009883a 	mov	r4,r2
 4002894:	18a0003c 	xorhi	r2,r3,32768
 4002898:	41000215 	stw	r4,8(r8)
 400289c:	40800315 	stw	r2,12(r8)
 40028a0:	003f0c06 	br	40024d4 <__ram_exceptions_end+0xfbfe228c>
 40028a4:	da008f17 	ldw	r8,572(sp)
 40028a8:	100d883a 	mov	r6,r2
 40028ac:	180f883a 	mov	r7,r3
 40028b0:	40800015 	stw	r2,0(r8)
 40028b4:	40c00115 	stw	r3,4(r8)
 40028b8:	40062700 	call	4006270 <__subdf3>
 40028bc:	047fe716 	blt	zero,r17,400285c <__ram_exceptions_end+0xfbfe2614>
 40028c0:	da008f17 	ldw	r8,572(sp)
 40028c4:	1009883a 	mov	r4,r2
 40028c8:	1805883a 	mov	r2,r3
 40028cc:	41000215 	stw	r4,8(r8)
 40028d0:	40800315 	stw	r2,12(r8)
 40028d4:	003eff06 	br	40024d4 <__ram_exceptions_end+0xfbfe228c>
 40028d8:	da008f17 	ldw	r8,572(sp)
 40028dc:	d9802817 	ldw	r6,160(sp)
 40028e0:	d9402a17 	ldw	r5,168(sp)
 40028e4:	d9002b17 	ldw	r4,172(sp)
 40028e8:	41800015 	stw	r6,0(r8)
 40028ec:	d9802917 	ldw	r6,164(sp)
 40028f0:	41400215 	stw	r5,8(r8)
 40028f4:	41000315 	stw	r4,12(r8)
 40028f8:	41800115 	stw	r6,4(r8)
 40028fc:	40800415 	stw	r2,16(r8)
 4002900:	40c00515 	stw	r3,20(r8)
 4002904:	003ef306 	br	40024d4 <__ram_exceptions_end+0xfbfe228c>
 4002908:	da00a617 	ldw	r8,664(sp)
 400290c:	008000c4 	movi	r2,3
 4002910:	40bef01e 	bne	r8,r2,40024d4 <__ram_exceptions_end+0xfbfe228c>
 4002914:	0005883a 	mov	r2,zero
 4002918:	0007883a 	mov	r3,zero
 400291c:	003fa506 	br	40027b4 <__ram_exceptions_end+0xfbfe256c>
 4002920:	9485883a 	add	r2,r18,r18
 4002924:	1085883a 	add	r2,r2,r2
 4002928:	d8a1883a 	add	r16,sp,r2
 400292c:	880b883a 	mov	r5,r17
 4002930:	a809883a 	mov	r4,r21
 4002934:	84007804 	addi	r16,r16,480
 4002938:	4006b6c0 	call	4006b6c <__fixdfsi>
 400293c:	80800015 	stw	r2,0(r16)
 4002940:	9023883a 	mov	r17,r18
 4002944:	003e7e06 	br	4002340 <__ram_exceptions_end+0xfbfe20f8>
 4002948:	a80d883a 	mov	r6,r21
 400294c:	400f883a 	mov	r7,r8
 4002950:	0009883a 	mov	r4,zero
 4002954:	014ffc34 	movhi	r5,16368
 4002958:	40062700 	call	4006270 <__subdf3>
 400295c:	102b883a 	mov	r21,r2
 4002960:	1811883a 	mov	r8,r3
 4002964:	04c00084 	movi	r19,2
 4002968:	003dc006 	br	400206c <__ram_exceptions_end+0xfbfe1e24>
 400296c:	da00a617 	ldw	r8,664(sp)
 4002970:	00800084 	movi	r2,2
 4002974:	123fe416 	blt	r2,r8,4002908 <__ram_exceptions_end+0xfbfe26c0>
 4002978:	02000c16 	blt	zero,r8,40029ac <__kernel_rem_pio2+0xd84>
 400297c:	403ed51e 	bne	r8,zero,40024d4 <__ram_exceptions_end+0xfbfe228c>
 4002980:	0005883a 	mov	r2,zero
 4002984:	0007883a 	mov	r3,zero
 4002988:	003ecc06 	br	40024bc <__ram_exceptions_end+0xfbfe2274>
 400298c:	d8009215 	stw	zero,584(sp)
 4002990:	003cc306 	br	4001ca0 <__ram_exceptions_end+0xfbfe1a58>
 4002994:	da008f17 	ldw	r8,572(sp)
 4002998:	1009883a 	mov	r4,r2
 400299c:	1805883a 	mov	r2,r3
 40029a0:	41000215 	stw	r4,8(r8)
 40029a4:	40800315 	stw	r2,12(r8)
 40029a8:	003eca06 	br	40024d4 <__ram_exceptions_end+0xfbfe228c>
 40029ac:	0005883a 	mov	r2,zero
 40029b0:	0007883a 	mov	r3,zero
 40029b4:	003f9d06 	br	400282c <__ram_exceptions_end+0xfbfe25e4>

040029b8 <__kernel_sin>:
 40029b8:	00a00034 	movhi	r2,32768
 40029bc:	defff404 	addi	sp,sp,-48
 40029c0:	10bfffc4 	addi	r2,r2,-1
 40029c4:	00cf9034 	movhi	r3,15936
 40029c8:	ddc00915 	stw	r23,36(sp)
 40029cc:	dd800815 	stw	r22,32(sp)
 40029d0:	dc400315 	stw	r17,12(sp)
 40029d4:	dc000215 	stw	r16,8(sp)
 40029d8:	dfc00b15 	stw	ra,44(sp)
 40029dc:	df000a15 	stw	fp,40(sp)
 40029e0:	dd400715 	stw	r21,28(sp)
 40029e4:	dd000615 	stw	r20,24(sp)
 40029e8:	dcc00515 	stw	r19,20(sp)
 40029ec:	dc800415 	stw	r18,16(sp)
 40029f0:	2884703a 	and	r2,r5,r2
 40029f4:	18ffffc4 	addi	r3,r3,-1
 40029f8:	2821883a 	mov	r16,r5
 40029fc:	2023883a 	mov	r17,r4
 4002a00:	302f883a 	mov	r23,r6
 4002a04:	382d883a 	mov	r22,r7
 4002a08:	18800216 	blt	r3,r2,4002a14 <__kernel_sin+0x5c>
 4002a0c:	4006b6c0 	call	4006b6c <__fixdfsi>
 4002a10:	10009926 	beq	r2,zero,4002c78 <__kernel_sin+0x2c0>
 4002a14:	880d883a 	mov	r6,r17
 4002a18:	800f883a 	mov	r7,r16
 4002a1c:	8809883a 	mov	r4,r17
 4002a20:	800b883a 	mov	r5,r16
 4002a24:	4005b580 	call	4005b58 <__muldf3>
 4002a28:	100d883a 	mov	r6,r2
 4002a2c:	180f883a 	mov	r7,r3
 4002a30:	8809883a 	mov	r4,r17
 4002a34:	800b883a 	mov	r5,r16
 4002a38:	1027883a 	mov	r19,r2
 4002a3c:	1825883a 	mov	r18,r3
 4002a40:	4005b580 	call	4005b58 <__muldf3>
 4002a44:	0196b434 	movhi	r6,23248
 4002a48:	01cf79b4 	movhi	r7,15846
 4002a4c:	31b55f04 	addi	r6,r6,-10884
 4002a50:	39f64e84 	addi	r7,r7,-9926
 4002a54:	9809883a 	mov	r4,r19
 4002a58:	900b883a 	mov	r5,r18
 4002a5c:	102b883a 	mov	r21,r2
 4002a60:	1829883a 	mov	r20,r3
 4002a64:	4005b580 	call	4005b58 <__muldf3>
 4002a68:	01a28b34 	movhi	r6,35372
 4002a6c:	01cf96f4 	movhi	r7,15963
 4002a70:	31a73ac4 	addi	r6,r6,-25365
 4002a74:	39f97984 	addi	r7,r7,-6682
 4002a78:	1009883a 	mov	r4,r2
 4002a7c:	180b883a 	mov	r5,r3
 4002a80:	40062700 	call	4006270 <__subdf3>
 4002a84:	980d883a 	mov	r6,r19
 4002a88:	900f883a 	mov	r7,r18
 4002a8c:	1009883a 	mov	r4,r2
 4002a90:	180b883a 	mov	r5,r3
 4002a94:	4005b580 	call	4005b58 <__muldf3>
 4002a98:	0195ecb4 	movhi	r6,22450
 4002a9c:	01cfb1f4 	movhi	r7,16071
 4002aa0:	31bf9f44 	addi	r6,r6,-387
 4002aa4:	39c778c4 	addi	r7,r7,7651
 4002aa8:	1009883a 	mov	r4,r2
 4002aac:	180b883a 	mov	r5,r3
 4002ab0:	400476c0 	call	400476c <__adddf3>
 4002ab4:	980d883a 	mov	r6,r19
 4002ab8:	900f883a 	mov	r7,r18
 4002abc:	1009883a 	mov	r4,r2
 4002ac0:	180b883a 	mov	r5,r3
 4002ac4:	4005b580 	call	4005b58 <__muldf3>
 4002ac8:	01867074 	movhi	r6,6593
 4002acc:	01cfcab4 	movhi	r7,16170
 4002ad0:	31987544 	addi	r6,r6,25045
 4002ad4:	39c06804 	addi	r7,r7,416
 4002ad8:	1009883a 	mov	r4,r2
 4002adc:	180b883a 	mov	r5,r3
 4002ae0:	40062700 	call	4006270 <__subdf3>
 4002ae4:	980d883a 	mov	r6,r19
 4002ae8:	900f883a 	mov	r7,r18
 4002aec:	1009883a 	mov	r4,r2
 4002af0:	180b883a 	mov	r5,r3
 4002af4:	4005b580 	call	4005b58 <__muldf3>
 4002af8:	01844474 	movhi	r6,4369
 4002afc:	01cfe074 	movhi	r7,16257
 4002b00:	31be2984 	addi	r6,r6,-1882
 4002b04:	39c44444 	addi	r7,r7,4369
 4002b08:	1009883a 	mov	r4,r2
 4002b0c:	180b883a 	mov	r5,r3
 4002b10:	400476c0 	call	400476c <__adddf3>
 4002b14:	1011883a 	mov	r8,r2
 4002b18:	d8800c17 	ldw	r2,48(sp)
 4002b1c:	1839883a 	mov	fp,r3
 4002b20:	10003e26 	beq	r2,zero,4002c1c <__kernel_sin+0x264>
 4002b24:	000d883a 	mov	r6,zero
 4002b28:	01cff834 	movhi	r7,16352
 4002b2c:	b809883a 	mov	r4,r23
 4002b30:	b00b883a 	mov	r5,r22
 4002b34:	da000015 	stw	r8,0(sp)
 4002b38:	4005b580 	call	4005b58 <__muldf3>
 4002b3c:	da000017 	ldw	r8,0(sp)
 4002b40:	e00f883a 	mov	r7,fp
 4002b44:	a809883a 	mov	r4,r21
 4002b48:	400d883a 	mov	r6,r8
 4002b4c:	a00b883a 	mov	r5,r20
 4002b50:	d8c00115 	stw	r3,4(sp)
 4002b54:	d8800015 	stw	r2,0(sp)
 4002b58:	4005b580 	call	4005b58 <__muldf3>
 4002b5c:	da800017 	ldw	r10,0(sp)
 4002b60:	da400117 	ldw	r9,4(sp)
 4002b64:	100d883a 	mov	r6,r2
 4002b68:	5009883a 	mov	r4,r10
 4002b6c:	480b883a 	mov	r5,r9
 4002b70:	180f883a 	mov	r7,r3
 4002b74:	40062700 	call	4006270 <__subdf3>
 4002b78:	980d883a 	mov	r6,r19
 4002b7c:	900f883a 	mov	r7,r18
 4002b80:	1009883a 	mov	r4,r2
 4002b84:	180b883a 	mov	r5,r3
 4002b88:	4005b580 	call	4005b58 <__muldf3>
 4002b8c:	b80d883a 	mov	r6,r23
 4002b90:	b00f883a 	mov	r7,r22
 4002b94:	1009883a 	mov	r4,r2
 4002b98:	180b883a 	mov	r5,r3
 4002b9c:	40062700 	call	4006270 <__subdf3>
 4002ba0:	01955574 	movhi	r6,21845
 4002ba4:	01cff174 	movhi	r7,16325
 4002ba8:	31955244 	addi	r6,r6,21833
 4002bac:	39d55544 	addi	r7,r7,21845
 4002bb0:	a809883a 	mov	r4,r21
 4002bb4:	a00b883a 	mov	r5,r20
 4002bb8:	1027883a 	mov	r19,r2
 4002bbc:	1825883a 	mov	r18,r3
 4002bc0:	4005b580 	call	4005b58 <__muldf3>
 4002bc4:	100d883a 	mov	r6,r2
 4002bc8:	180f883a 	mov	r7,r3
 4002bcc:	9809883a 	mov	r4,r19
 4002bd0:	900b883a 	mov	r5,r18
 4002bd4:	400476c0 	call	400476c <__adddf3>
 4002bd8:	100d883a 	mov	r6,r2
 4002bdc:	180f883a 	mov	r7,r3
 4002be0:	8809883a 	mov	r4,r17
 4002be4:	800b883a 	mov	r5,r16
 4002be8:	40062700 	call	4006270 <__subdf3>
 4002bec:	dfc00b17 	ldw	ra,44(sp)
 4002bf0:	df000a17 	ldw	fp,40(sp)
 4002bf4:	ddc00917 	ldw	r23,36(sp)
 4002bf8:	dd800817 	ldw	r22,32(sp)
 4002bfc:	dd400717 	ldw	r21,28(sp)
 4002c00:	dd000617 	ldw	r20,24(sp)
 4002c04:	dcc00517 	ldw	r19,20(sp)
 4002c08:	dc800417 	ldw	r18,16(sp)
 4002c0c:	dc400317 	ldw	r17,12(sp)
 4002c10:	dc000217 	ldw	r16,8(sp)
 4002c14:	dec00c04 	addi	sp,sp,48
 4002c18:	f800283a 	ret
 4002c1c:	400d883a 	mov	r6,r8
 4002c20:	9809883a 	mov	r4,r19
 4002c24:	900b883a 	mov	r5,r18
 4002c28:	180f883a 	mov	r7,r3
 4002c2c:	4005b580 	call	4005b58 <__muldf3>
 4002c30:	01955574 	movhi	r6,21845
 4002c34:	01cff174 	movhi	r7,16325
 4002c38:	31955244 	addi	r6,r6,21833
 4002c3c:	39d55544 	addi	r7,r7,21845
 4002c40:	1009883a 	mov	r4,r2
 4002c44:	180b883a 	mov	r5,r3
 4002c48:	40062700 	call	4006270 <__subdf3>
 4002c4c:	a80d883a 	mov	r6,r21
 4002c50:	a00f883a 	mov	r7,r20
 4002c54:	1009883a 	mov	r4,r2
 4002c58:	180b883a 	mov	r5,r3
 4002c5c:	4005b580 	call	4005b58 <__muldf3>
 4002c60:	880d883a 	mov	r6,r17
 4002c64:	800f883a 	mov	r7,r16
 4002c68:	1009883a 	mov	r4,r2
 4002c6c:	180b883a 	mov	r5,r3
 4002c70:	400476c0 	call	400476c <__adddf3>
 4002c74:	003fdd06 	br	4002bec <__ram_exceptions_end+0xfbfe29a4>
 4002c78:	8805883a 	mov	r2,r17
 4002c7c:	8007883a 	mov	r3,r16
 4002c80:	003fda06 	br	4002bec <__ram_exceptions_end+0xfbfe29a4>

04002c84 <fabs>:
 4002c84:	00e00034 	movhi	r3,32768
 4002c88:	18ffffc4 	addi	r3,r3,-1
 4002c8c:	2005883a 	mov	r2,r4
 4002c90:	28c6703a 	and	r3,r5,r3
 4002c94:	f800283a 	ret

04002c98 <floor>:
 4002c98:	2811d53a 	srai	r8,r5,20
 4002c9c:	defffa04 	addi	sp,sp,-24
 4002ca0:	dcc00315 	stw	r19,12(sp)
 4002ca4:	4201ffcc 	andi	r8,r8,2047
 4002ca8:	dc800215 	stw	r18,8(sp)
 4002cac:	dc400115 	stw	r17,4(sp)
 4002cb0:	dc000015 	stw	r16,0(sp)
 4002cb4:	dfc00515 	stw	ra,20(sp)
 4002cb8:	dd000415 	stw	r20,16(sp)
 4002cbc:	44bf0044 	addi	r18,r8,-1023
 4002cc0:	018004c4 	movi	r6,19
 4002cc4:	2821883a 	mov	r16,r5
 4002cc8:	2005883a 	mov	r2,r4
 4002ccc:	280f883a 	mov	r7,r5
 4002cd0:	2827883a 	mov	r19,r5
 4002cd4:	2023883a 	mov	r17,r4
 4002cd8:	34801916 	blt	r6,r18,4002d40 <floor+0xa8>
 4002cdc:	90003c16 	blt	r18,zero,4002dd0 <floor+0x138>
 4002ce0:	05000434 	movhi	r20,16
 4002ce4:	a53fffc4 	addi	r20,r20,-1
 4002ce8:	a4a9d83a 	sra	r20,r20,r18
 4002cec:	2d0c703a 	and	r6,r5,r20
 4002cf0:	310cb03a 	or	r6,r6,r4
 4002cf4:	30001626 	beq	r6,zero,4002d50 <floor+0xb8>
 4002cf8:	01a20034 	movhi	r6,34816
 4002cfc:	01df8e34 	movhi	r7,32312
 4002d00:	319d6704 	addi	r6,r6,30108
 4002d04:	39f90f04 	addi	r7,r7,-7108
 4002d08:	400476c0 	call	400476c <__adddf3>
 4002d0c:	000d883a 	mov	r6,zero
 4002d10:	000f883a 	mov	r7,zero
 4002d14:	1009883a 	mov	r4,r2
 4002d18:	180b883a 	mov	r5,r3
 4002d1c:	40059880 	call	4005988 <__gedf2>
 4002d20:	0080040e 	bge	zero,r2,4002d34 <floor+0x9c>
 4002d24:	80003c16 	blt	r16,zero,4002e18 <floor+0x180>
 4002d28:	0520303a 	nor	r16,zero,r20
 4002d2c:	84e0703a 	and	r16,r16,r19
 4002d30:	0023883a 	mov	r17,zero
 4002d34:	8805883a 	mov	r2,r17
 4002d38:	8007883a 	mov	r3,r16
 4002d3c:	00000506 	br	4002d54 <floor+0xbc>
 4002d40:	01800cc4 	movi	r6,51
 4002d44:	34800b0e 	bge	r6,r18,4002d74 <floor+0xdc>
 4002d48:	01810004 	movi	r6,1024
 4002d4c:	91802f26 	beq	r18,r6,4002e0c <floor+0x174>
 4002d50:	3807883a 	mov	r3,r7
 4002d54:	dfc00517 	ldw	ra,20(sp)
 4002d58:	dd000417 	ldw	r20,16(sp)
 4002d5c:	dcc00317 	ldw	r19,12(sp)
 4002d60:	dc800217 	ldw	r18,8(sp)
 4002d64:	dc400117 	ldw	r17,4(sp)
 4002d68:	dc000017 	ldw	r16,0(sp)
 4002d6c:	dec00604 	addi	sp,sp,24
 4002d70:	f800283a 	ret
 4002d74:	423efb44 	addi	r8,r8,-1043
 4002d78:	053fffc4 	movi	r20,-1
 4002d7c:	a228d83a 	srl	r20,r20,r8
 4002d80:	250c703a 	and	r6,r4,r20
 4002d84:	303ff226 	beq	r6,zero,4002d50 <__ram_exceptions_end+0xfbfe2b08>
 4002d88:	01a20034 	movhi	r6,34816
 4002d8c:	01df8e34 	movhi	r7,32312
 4002d90:	319d6704 	addi	r6,r6,30108
 4002d94:	39f90f04 	addi	r7,r7,-7108
 4002d98:	400476c0 	call	400476c <__adddf3>
 4002d9c:	000d883a 	mov	r6,zero
 4002da0:	000f883a 	mov	r7,zero
 4002da4:	1009883a 	mov	r4,r2
 4002da8:	180b883a 	mov	r5,r3
 4002dac:	40059880 	call	4005988 <__gedf2>
 4002db0:	00bfe00e 	bge	zero,r2,4002d34 <__ram_exceptions_end+0xfbfe2aec>
 4002db4:	80001c16 	blt	r16,zero,4002e28 <floor+0x190>
 4002db8:	0510303a 	nor	r8,zero,r20
 4002dbc:	9821883a 	mov	r16,r19
 4002dc0:	8a22703a 	and	r17,r17,r8
 4002dc4:	8805883a 	mov	r2,r17
 4002dc8:	8007883a 	mov	r3,r16
 4002dcc:	003fe106 	br	4002d54 <__ram_exceptions_end+0xfbfe2b0c>
 4002dd0:	01a20034 	movhi	r6,34816
 4002dd4:	01df8e34 	movhi	r7,32312
 4002dd8:	319d6704 	addi	r6,r6,30108
 4002ddc:	39f90f04 	addi	r7,r7,-7108
 4002de0:	400476c0 	call	400476c <__adddf3>
 4002de4:	000d883a 	mov	r6,zero
 4002de8:	000f883a 	mov	r7,zero
 4002dec:	1009883a 	mov	r4,r2
 4002df0:	180b883a 	mov	r5,r3
 4002df4:	40059880 	call	4005988 <__gedf2>
 4002df8:	00bfce0e 	bge	zero,r2,4002d34 <__ram_exceptions_end+0xfbfe2aec>
 4002dfc:	80001516 	blt	r16,zero,4002e54 <floor+0x1bc>
 4002e00:	0023883a 	mov	r17,zero
 4002e04:	0021883a 	mov	r16,zero
 4002e08:	003fca06 	br	4002d34 <__ram_exceptions_end+0xfbfe2aec>
 4002e0c:	200d883a 	mov	r6,r4
 4002e10:	400476c0 	call	400476c <__adddf3>
 4002e14:	003fcf06 	br	4002d54 <__ram_exceptions_end+0xfbfe2b0c>
 4002e18:	00800434 	movhi	r2,16
 4002e1c:	14a5d83a 	sra	r18,r2,r18
 4002e20:	84a7883a 	add	r19,r16,r18
 4002e24:	003fc006 	br	4002d28 <__ram_exceptions_end+0xfbfe2ae0>
 4002e28:	00800504 	movi	r2,20
 4002e2c:	90801326 	beq	r18,r2,4002e7c <floor+0x1e4>
 4002e30:	00800d04 	movi	r2,52
 4002e34:	14a5c83a 	sub	r18,r2,r18
 4002e38:	00800044 	movi	r2,1
 4002e3c:	1484983a 	sll	r2,r2,r18
 4002e40:	1445883a 	add	r2,r2,r17
 4002e44:	14400b2e 	bgeu	r2,r17,4002e74 <floor+0x1dc>
 4002e48:	84c00044 	addi	r19,r16,1
 4002e4c:	1023883a 	mov	r17,r2
 4002e50:	003fd906 	br	4002db8 <__ram_exceptions_end+0xfbfe2b70>
 4002e54:	00a00034 	movhi	r2,32768
 4002e58:	10bfffc4 	addi	r2,r2,-1
 4002e5c:	8084703a 	and	r2,r16,r2
 4002e60:	1462b03a 	or	r17,r2,r17
 4002e64:	883fb326 	beq	r17,zero,4002d34 <__ram_exceptions_end+0xfbfe2aec>
 4002e68:	0023883a 	mov	r17,zero
 4002e6c:	042ffc34 	movhi	r16,49136
 4002e70:	003fb006 	br	4002d34 <__ram_exceptions_end+0xfbfe2aec>
 4002e74:	1023883a 	mov	r17,r2
 4002e78:	003fcf06 	br	4002db8 <__ram_exceptions_end+0xfbfe2b70>
 4002e7c:	84c00044 	addi	r19,r16,1
 4002e80:	003fcd06 	br	4002db8 <__ram_exceptions_end+0xfbfe2b70>

04002e84 <__fpclassifyd>:
 4002e84:	00a00034 	movhi	r2,32768
 4002e88:	10bfffc4 	addi	r2,r2,-1
 4002e8c:	2884703a 	and	r2,r5,r2
 4002e90:	10000726 	beq	r2,zero,4002eb0 <__fpclassifyd+0x2c>
 4002e94:	00fffc34 	movhi	r3,65520
 4002e98:	019ff834 	movhi	r6,32736
 4002e9c:	28c7883a 	add	r3,r5,r3
 4002ea0:	31bfffc4 	addi	r6,r6,-1
 4002ea4:	30c00536 	bltu	r6,r3,4002ebc <__fpclassifyd+0x38>
 4002ea8:	00800104 	movi	r2,4
 4002eac:	f800283a 	ret
 4002eb0:	2000021e 	bne	r4,zero,4002ebc <__fpclassifyd+0x38>
 4002eb4:	00800084 	movi	r2,2
 4002eb8:	f800283a 	ret
 4002ebc:	00dffc34 	movhi	r3,32752
 4002ec0:	019ff834 	movhi	r6,32736
 4002ec4:	28cb883a 	add	r5,r5,r3
 4002ec8:	31bfffc4 	addi	r6,r6,-1
 4002ecc:	317ff62e 	bgeu	r6,r5,4002ea8 <__ram_exceptions_end+0xfbfe2c60>
 4002ed0:	01400434 	movhi	r5,16
 4002ed4:	297fffc4 	addi	r5,r5,-1
 4002ed8:	28800236 	bltu	r5,r2,4002ee4 <__fpclassifyd+0x60>
 4002edc:	008000c4 	movi	r2,3
 4002ee0:	f800283a 	ret
 4002ee4:	10c00226 	beq	r2,r3,4002ef0 <__fpclassifyd+0x6c>
 4002ee8:	0005883a 	mov	r2,zero
 4002eec:	f800283a 	ret
 4002ef0:	2005003a 	cmpeq	r2,r4,zero
 4002ef4:	f800283a 	ret

04002ef8 <matherr>:
 4002ef8:	0005883a 	mov	r2,zero
 4002efc:	f800283a 	ret

04002f00 <scalbn>:
 4002f00:	2a1ffc2c 	andhi	r8,r5,32752
 4002f04:	4011d53a 	srai	r8,r8,20
 4002f08:	defffe04 	addi	sp,sp,-8
 4002f0c:	dc000015 	stw	r16,0(sp)
 4002f10:	dfc00115 	stw	ra,4(sp)
 4002f14:	280f883a 	mov	r7,r5
 4002f18:	2015883a 	mov	r10,r4
 4002f1c:	3021883a 	mov	r16,r6
 4002f20:	40001e1e 	bne	r8,zero,4002f9c <scalbn+0x9c>
 4002f24:	00a00034 	movhi	r2,32768
 4002f28:	10bfffc4 	addi	r2,r2,-1
 4002f2c:	2884703a 	and	r2,r5,r2
 4002f30:	1104b03a 	or	r2,r2,r4
 4002f34:	10002226 	beq	r2,zero,4002fc0 <scalbn+0xc0>
 4002f38:	01d0d434 	movhi	r7,17232
 4002f3c:	000d883a 	mov	r6,zero
 4002f40:	4005b580 	call	4005b58 <__muldf3>
 4002f44:	013ffff4 	movhi	r4,65535
 4002f48:	210f2c04 	addi	r4,r4,15536
 4002f4c:	1015883a 	mov	r10,r2
 4002f50:	180f883a 	mov	r7,r3
 4002f54:	81002a16 	blt	r16,r4,4003000 <scalbn+0x100>
 4002f58:	191ffc2c 	andhi	r4,r3,32752
 4002f5c:	2009d53a 	srai	r4,r4,20
 4002f60:	223ff284 	addi	r8,r4,-54
 4002f64:	8211883a 	add	r8,r16,r8
 4002f68:	0081ff84 	movi	r2,2046
 4002f6c:	12002f16 	blt	r2,r8,400302c <scalbn+0x12c>
 4002f70:	0200190e 	bge	zero,r8,4002fd8 <scalbn+0xd8>
 4002f74:	4010953a 	slli	r8,r8,20
 4002f78:	01600434 	movhi	r5,32784
 4002f7c:	297fffc4 	addi	r5,r5,-1
 4002f80:	194e703a 	and	r7,r3,r5
 4002f84:	5005883a 	mov	r2,r10
 4002f88:	3a06b03a 	or	r3,r7,r8
 4002f8c:	dfc00117 	ldw	ra,4(sp)
 4002f90:	dc000017 	ldw	r16,0(sp)
 4002f94:	dec00204 	addi	sp,sp,8
 4002f98:	f800283a 	ret
 4002f9c:	0081ffc4 	movi	r2,2047
 4002fa0:	2807883a 	mov	r3,r5
 4002fa4:	40bfef1e 	bne	r8,r2,4002f64 <__ram_exceptions_end+0xfbfe2d1c>
 4002fa8:	200d883a 	mov	r6,r4
 4002fac:	400476c0 	call	400476c <__adddf3>
 4002fb0:	dfc00117 	ldw	ra,4(sp)
 4002fb4:	dc000017 	ldw	r16,0(sp)
 4002fb8:	dec00204 	addi	sp,sp,8
 4002fbc:	f800283a 	ret
 4002fc0:	2005883a 	mov	r2,r4
 4002fc4:	2807883a 	mov	r3,r5
 4002fc8:	dfc00117 	ldw	ra,4(sp)
 4002fcc:	dc000017 	ldw	r16,0(sp)
 4002fd0:	dec00204 	addi	sp,sp,8
 4002fd4:	f800283a 	ret
 4002fd8:	00bff2c4 	movi	r2,-53
 4002fdc:	4080240e 	bge	r8,r2,4003070 <scalbn+0x170>
 4002fe0:	00b0d414 	movui	r2,50000
 4002fe4:	14001116 	blt	r2,r16,400302c <scalbn+0x12c>
 4002fe8:	0130be74 	movhi	r4,49913
 4002fec:	01406974 	movhi	r5,421
 4002ff0:	213cd644 	addi	r4,r4,-3239
 4002ff4:	295b87c4 	addi	r5,r5,28191
 4002ff8:	500d883a 	mov	r6,r10
 4002ffc:	400309c0 	call	400309c <copysign>
 4003000:	01b0be74 	movhi	r6,49913
 4003004:	01c06974 	movhi	r7,421
 4003008:	31bcd644 	addi	r6,r6,-3239
 400300c:	39db87c4 	addi	r7,r7,28191
 4003010:	1009883a 	mov	r4,r2
 4003014:	180b883a 	mov	r5,r3
 4003018:	4005b580 	call	4005b58 <__muldf3>
 400301c:	dfc00117 	ldw	ra,4(sp)
 4003020:	dc000017 	ldw	r16,0(sp)
 4003024:	dec00204 	addi	sp,sp,8
 4003028:	f800283a 	ret
 400302c:	01220034 	movhi	r4,34816
 4003030:	015f8e34 	movhi	r5,32312
 4003034:	500d883a 	mov	r6,r10
 4003038:	211d6704 	addi	r4,r4,30108
 400303c:	29790f04 	addi	r5,r5,-7108
 4003040:	400309c0 	call	400309c <copysign>
 4003044:	01a20034 	movhi	r6,34816
 4003048:	01df8e34 	movhi	r7,32312
 400304c:	319d6704 	addi	r6,r6,30108
 4003050:	39f90f04 	addi	r7,r7,-7108
 4003054:	1009883a 	mov	r4,r2
 4003058:	180b883a 	mov	r5,r3
 400305c:	4005b580 	call	4005b58 <__muldf3>
 4003060:	dfc00117 	ldw	ra,4(sp)
 4003064:	dc000017 	ldw	r16,0(sp)
 4003068:	dec00204 	addi	sp,sp,8
 400306c:	f800283a 	ret
 4003070:	42000d84 	addi	r8,r8,54
 4003074:	4012953a 	slli	r9,r8,20
 4003078:	01e00434 	movhi	r7,32784
 400307c:	39ffffc4 	addi	r7,r7,-1
 4003080:	19ca703a 	and	r5,r3,r7
 4003084:	000d883a 	mov	r6,zero
 4003088:	01cf2434 	movhi	r7,15504
 400308c:	5009883a 	mov	r4,r10
 4003090:	494ab03a 	or	r5,r9,r5
 4003094:	4005b580 	call	4005b58 <__muldf3>
 4003098:	003fbc06 	br	4002f8c <__ram_exceptions_end+0xfbfe2d44>

0400309c <copysign>:
 400309c:	2005883a 	mov	r2,r4
 40030a0:	01200034 	movhi	r4,32768
 40030a4:	213fffc4 	addi	r4,r4,-1
 40030a8:	38e0002c 	andhi	r3,r7,32768
 40030ac:	290a703a 	and	r5,r5,r4
 40030b0:	28c6b03a 	or	r3,r5,r3
 40030b4:	f800283a 	ret

040030b8 <__divsi3>:
 40030b8:	20001b16 	blt	r4,zero,4003128 <__divsi3+0x70>
 40030bc:	000f883a 	mov	r7,zero
 40030c0:	28001616 	blt	r5,zero,400311c <__divsi3+0x64>
 40030c4:	200d883a 	mov	r6,r4
 40030c8:	29001a2e 	bgeu	r5,r4,4003134 <__divsi3+0x7c>
 40030cc:	00800804 	movi	r2,32
 40030d0:	00c00044 	movi	r3,1
 40030d4:	00000106 	br	40030dc <__divsi3+0x24>
 40030d8:	10000d26 	beq	r2,zero,4003110 <__divsi3+0x58>
 40030dc:	294b883a 	add	r5,r5,r5
 40030e0:	10bfffc4 	addi	r2,r2,-1
 40030e4:	18c7883a 	add	r3,r3,r3
 40030e8:	293ffb36 	bltu	r5,r4,40030d8 <__ram_exceptions_end+0xfbfe2e90>
 40030ec:	0005883a 	mov	r2,zero
 40030f0:	18000726 	beq	r3,zero,4003110 <__divsi3+0x58>
 40030f4:	0005883a 	mov	r2,zero
 40030f8:	31400236 	bltu	r6,r5,4003104 <__divsi3+0x4c>
 40030fc:	314dc83a 	sub	r6,r6,r5
 4003100:	10c4b03a 	or	r2,r2,r3
 4003104:	1806d07a 	srli	r3,r3,1
 4003108:	280ad07a 	srli	r5,r5,1
 400310c:	183ffa1e 	bne	r3,zero,40030f8 <__ram_exceptions_end+0xfbfe2eb0>
 4003110:	38000126 	beq	r7,zero,4003118 <__divsi3+0x60>
 4003114:	0085c83a 	sub	r2,zero,r2
 4003118:	f800283a 	ret
 400311c:	014bc83a 	sub	r5,zero,r5
 4003120:	39c0005c 	xori	r7,r7,1
 4003124:	003fe706 	br	40030c4 <__ram_exceptions_end+0xfbfe2e7c>
 4003128:	0109c83a 	sub	r4,zero,r4
 400312c:	01c00044 	movi	r7,1
 4003130:	003fe306 	br	40030c0 <__ram_exceptions_end+0xfbfe2e78>
 4003134:	00c00044 	movi	r3,1
 4003138:	003fee06 	br	40030f4 <__ram_exceptions_end+0xfbfe2eac>

0400313c <__modsi3>:
 400313c:	20001716 	blt	r4,zero,400319c <__modsi3+0x60>
 4003140:	000f883a 	mov	r7,zero
 4003144:	2005883a 	mov	r2,r4
 4003148:	28001216 	blt	r5,zero,4003194 <__modsi3+0x58>
 400314c:	2900162e 	bgeu	r5,r4,40031a8 <__modsi3+0x6c>
 4003150:	01800804 	movi	r6,32
 4003154:	00c00044 	movi	r3,1
 4003158:	00000106 	br	4003160 <__modsi3+0x24>
 400315c:	30000a26 	beq	r6,zero,4003188 <__modsi3+0x4c>
 4003160:	294b883a 	add	r5,r5,r5
 4003164:	31bfffc4 	addi	r6,r6,-1
 4003168:	18c7883a 	add	r3,r3,r3
 400316c:	293ffb36 	bltu	r5,r4,400315c <__ram_exceptions_end+0xfbfe2f14>
 4003170:	18000526 	beq	r3,zero,4003188 <__modsi3+0x4c>
 4003174:	1806d07a 	srli	r3,r3,1
 4003178:	11400136 	bltu	r2,r5,4003180 <__modsi3+0x44>
 400317c:	1145c83a 	sub	r2,r2,r5
 4003180:	280ad07a 	srli	r5,r5,1
 4003184:	183ffb1e 	bne	r3,zero,4003174 <__ram_exceptions_end+0xfbfe2f2c>
 4003188:	38000126 	beq	r7,zero,4003190 <__modsi3+0x54>
 400318c:	0085c83a 	sub	r2,zero,r2
 4003190:	f800283a 	ret
 4003194:	014bc83a 	sub	r5,zero,r5
 4003198:	003fec06 	br	400314c <__ram_exceptions_end+0xfbfe2f04>
 400319c:	0109c83a 	sub	r4,zero,r4
 40031a0:	01c00044 	movi	r7,1
 40031a4:	003fe706 	br	4003144 <__ram_exceptions_end+0xfbfe2efc>
 40031a8:	00c00044 	movi	r3,1
 40031ac:	003ff106 	br	4003174 <__ram_exceptions_end+0xfbfe2f2c>

040031b0 <__udivsi3>:
 40031b0:	200d883a 	mov	r6,r4
 40031b4:	2900152e 	bgeu	r5,r4,400320c <__udivsi3+0x5c>
 40031b8:	28001416 	blt	r5,zero,400320c <__udivsi3+0x5c>
 40031bc:	00800804 	movi	r2,32
 40031c0:	00c00044 	movi	r3,1
 40031c4:	00000206 	br	40031d0 <__udivsi3+0x20>
 40031c8:	10000e26 	beq	r2,zero,4003204 <__udivsi3+0x54>
 40031cc:	28000516 	blt	r5,zero,40031e4 <__udivsi3+0x34>
 40031d0:	294b883a 	add	r5,r5,r5
 40031d4:	10bfffc4 	addi	r2,r2,-1
 40031d8:	18c7883a 	add	r3,r3,r3
 40031dc:	293ffa36 	bltu	r5,r4,40031c8 <__ram_exceptions_end+0xfbfe2f80>
 40031e0:	18000826 	beq	r3,zero,4003204 <__udivsi3+0x54>
 40031e4:	0005883a 	mov	r2,zero
 40031e8:	31400236 	bltu	r6,r5,40031f4 <__udivsi3+0x44>
 40031ec:	314dc83a 	sub	r6,r6,r5
 40031f0:	10c4b03a 	or	r2,r2,r3
 40031f4:	1806d07a 	srli	r3,r3,1
 40031f8:	280ad07a 	srli	r5,r5,1
 40031fc:	183ffa1e 	bne	r3,zero,40031e8 <__ram_exceptions_end+0xfbfe2fa0>
 4003200:	f800283a 	ret
 4003204:	0005883a 	mov	r2,zero
 4003208:	f800283a 	ret
 400320c:	00c00044 	movi	r3,1
 4003210:	003ff406 	br	40031e4 <__ram_exceptions_end+0xfbfe2f9c>

04003214 <__umodsi3>:
 4003214:	2005883a 	mov	r2,r4
 4003218:	2900122e 	bgeu	r5,r4,4003264 <__umodsi3+0x50>
 400321c:	28001116 	blt	r5,zero,4003264 <__umodsi3+0x50>
 4003220:	01800804 	movi	r6,32
 4003224:	00c00044 	movi	r3,1
 4003228:	00000206 	br	4003234 <__umodsi3+0x20>
 400322c:	30000c26 	beq	r6,zero,4003260 <__umodsi3+0x4c>
 4003230:	28000516 	blt	r5,zero,4003248 <__umodsi3+0x34>
 4003234:	294b883a 	add	r5,r5,r5
 4003238:	31bfffc4 	addi	r6,r6,-1
 400323c:	18c7883a 	add	r3,r3,r3
 4003240:	293ffa36 	bltu	r5,r4,400322c <__ram_exceptions_end+0xfbfe2fe4>
 4003244:	18000626 	beq	r3,zero,4003260 <__umodsi3+0x4c>
 4003248:	1806d07a 	srli	r3,r3,1
 400324c:	11400136 	bltu	r2,r5,4003254 <__umodsi3+0x40>
 4003250:	1145c83a 	sub	r2,r2,r5
 4003254:	280ad07a 	srli	r5,r5,1
 4003258:	183ffb1e 	bne	r3,zero,4003248 <__ram_exceptions_end+0xfbfe3000>
 400325c:	f800283a 	ret
 4003260:	f800283a 	ret
 4003264:	00c00044 	movi	r3,1
 4003268:	003ff706 	br	4003248 <__ram_exceptions_end+0xfbfe3000>

0400326c <__addsf3>:
 400326c:	defffc04 	addi	sp,sp,-16
 4003270:	2004d7fa 	srli	r2,r4,31
 4003274:	280cd5fa 	srli	r6,r5,23
 4003278:	dc000015 	stw	r16,0(sp)
 400327c:	00c02034 	movhi	r3,128
 4003280:	2020d5fa 	srli	r16,r4,23
 4003284:	280ed7fa 	srli	r7,r5,31
 4003288:	18ffffc4 	addi	r3,r3,-1
 400328c:	dc400115 	stw	r17,4(sp)
 4003290:	1908703a 	and	r4,r3,r4
 4003294:	194a703a 	and	r5,r3,r5
 4003298:	dfc00315 	stw	ra,12(sp)
 400329c:	dc800215 	stw	r18,8(sp)
 40032a0:	14403fcc 	andi	r17,r2,255
 40032a4:	84003fcc 	andi	r16,r16,255
 40032a8:	200890fa 	slli	r4,r4,3
 40032ac:	31803fcc 	andi	r6,r6,255
 40032b0:	280a90fa 	slli	r5,r5,3
 40032b4:	89c05026 	beq	r17,r7,40033f8 <__addsf3+0x18c>
 40032b8:	8185c83a 	sub	r2,r16,r6
 40032bc:	00807a0e 	bge	zero,r2,40034a8 <__addsf3+0x23c>
 40032c0:	30001e1e 	bne	r6,zero,400333c <__addsf3+0xd0>
 40032c4:	28006d1e 	bne	r5,zero,400347c <__addsf3+0x210>
 40032c8:	208001cc 	andi	r2,r4,7
 40032cc:	10000426 	beq	r2,zero,40032e0 <__addsf3+0x74>
 40032d0:	208003cc 	andi	r2,r4,15
 40032d4:	00c00104 	movi	r3,4
 40032d8:	10c00126 	beq	r2,r3,40032e0 <__addsf3+0x74>
 40032dc:	20c9883a 	add	r4,r4,r3
 40032e0:	2081002c 	andhi	r2,r4,1024
 40032e4:	10003926 	beq	r2,zero,40033cc <__addsf3+0x160>
 40032e8:	84000044 	addi	r16,r16,1
 40032ec:	00803fc4 	movi	r2,255
 40032f0:	80807826 	beq	r16,r2,40034d4 <__addsf3+0x268>
 40032f4:	200891ba 	slli	r4,r4,6
 40032f8:	8805883a 	mov	r2,r17
 40032fc:	2008d27a 	srli	r4,r4,9
 4003300:	84003fcc 	andi	r16,r16,255
 4003304:	800695fa 	slli	r3,r16,23
 4003308:	10803fcc 	andi	r2,r2,255
 400330c:	04002034 	movhi	r16,128
 4003310:	843fffc4 	addi	r16,r16,-1
 4003314:	100497fa 	slli	r2,r2,31
 4003318:	2408703a 	and	r4,r4,r16
 400331c:	20e0b03a 	or	r16,r4,r3
 4003320:	8084b03a 	or	r2,r16,r2
 4003324:	dfc00317 	ldw	ra,12(sp)
 4003328:	dc800217 	ldw	r18,8(sp)
 400332c:	dc400117 	ldw	r17,4(sp)
 4003330:	dc000017 	ldw	r16,0(sp)
 4003334:	dec00404 	addi	sp,sp,16
 4003338:	f800283a 	ret
 400333c:	00c03fc4 	movi	r3,255
 4003340:	80ffe126 	beq	r16,r3,40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003344:	29410034 	orhi	r5,r5,1024
 4003348:	00c006c4 	movi	r3,27
 400334c:	18807516 	blt	r3,r2,4003524 <__addsf3+0x2b8>
 4003350:	00c00804 	movi	r3,32
 4003354:	1887c83a 	sub	r3,r3,r2
 4003358:	28c6983a 	sll	r3,r5,r3
 400335c:	288ad83a 	srl	r5,r5,r2
 4003360:	1804c03a 	cmpne	r2,r3,zero
 4003364:	288ab03a 	or	r5,r5,r2
 4003368:	2149c83a 	sub	r4,r4,r5
 400336c:	2081002c 	andhi	r2,r4,1024
 4003370:	10001426 	beq	r2,zero,40033c4 <__addsf3+0x158>
 4003374:	04810034 	movhi	r18,1024
 4003378:	94bfffc4 	addi	r18,r18,-1
 400337c:	24a4703a 	and	r18,r4,r18
 4003380:	9009883a 	mov	r4,r18
 4003384:	4006f800 	call	4006f80 <__clzsi2>
 4003388:	10bffec4 	addi	r2,r2,-5
 400338c:	90a4983a 	sll	r18,r18,r2
 4003390:	14005416 	blt	r2,r16,40034e4 <__addsf3+0x278>
 4003394:	1405c83a 	sub	r2,r2,r16
 4003398:	11000044 	addi	r4,r2,1
 400339c:	00800804 	movi	r2,32
 40033a0:	1105c83a 	sub	r2,r2,r4
 40033a4:	9084983a 	sll	r2,r18,r2
 40033a8:	9124d83a 	srl	r18,r18,r4
 40033ac:	0021883a 	mov	r16,zero
 40033b0:	1008c03a 	cmpne	r4,r2,zero
 40033b4:	9108b03a 	or	r4,r18,r4
 40033b8:	003fc306 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 40033bc:	1000db26 	beq	r2,zero,400372c <__addsf3+0x4c0>
 40033c0:	1009883a 	mov	r4,r2
 40033c4:	208001cc 	andi	r2,r4,7
 40033c8:	103fc11e 	bne	r2,zero,40032d0 <__ram_exceptions_end+0xfbfe3088>
 40033cc:	2006d0fa 	srli	r3,r4,3
 40033d0:	01003fc4 	movi	r4,255
 40033d4:	8805883a 	mov	r2,r17
 40033d8:	8100241e 	bne	r16,r4,400346c <__addsf3+0x200>
 40033dc:	18006e26 	beq	r3,zero,4003598 <__addsf3+0x32c>
 40033e0:	19001034 	orhi	r4,r3,64
 40033e4:	00c02034 	movhi	r3,128
 40033e8:	18ffffc4 	addi	r3,r3,-1
 40033ec:	043fffc4 	movi	r16,-1
 40033f0:	20c8703a 	and	r4,r4,r3
 40033f4:	003fc206 	br	4003300 <__ram_exceptions_end+0xfbfe30b8>
 40033f8:	8187c83a 	sub	r3,r16,r6
 40033fc:	00c03e0e 	bge	zero,r3,40034f8 <__addsf3+0x28c>
 4003400:	30002326 	beq	r6,zero,4003490 <__addsf3+0x224>
 4003404:	01803fc4 	movi	r6,255
 4003408:	81bfaf26 	beq	r16,r6,40032c8 <__ram_exceptions_end+0xfbfe3080>
 400340c:	29410034 	orhi	r5,r5,1024
 4003410:	018006c4 	movi	r6,27
 4003414:	30c07416 	blt	r6,r3,40035e8 <__addsf3+0x37c>
 4003418:	01800804 	movi	r6,32
 400341c:	30cdc83a 	sub	r6,r6,r3
 4003420:	298c983a 	sll	r6,r5,r6
 4003424:	28cad83a 	srl	r5,r5,r3
 4003428:	3006c03a 	cmpne	r3,r6,zero
 400342c:	28cab03a 	or	r5,r5,r3
 4003430:	2149883a 	add	r4,r4,r5
 4003434:	20c1002c 	andhi	r3,r4,1024
 4003438:	183fe226 	beq	r3,zero,40033c4 <__ram_exceptions_end+0xfbfe317c>
 400343c:	84000044 	addi	r16,r16,1
 4003440:	00c03fc4 	movi	r3,255
 4003444:	80c05426 	beq	r16,r3,4003598 <__addsf3+0x32c>
 4003448:	00bf0034 	movhi	r2,64512
 400344c:	10bfffc4 	addi	r2,r2,-1
 4003450:	20c0004c 	andi	r3,r4,1
 4003454:	2088703a 	and	r4,r4,r2
 4003458:	2008d07a 	srli	r4,r4,1
 400345c:	20c8b03a 	or	r4,r4,r3
 4003460:	003f9906 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003464:	0007883a 	mov	r3,zero
 4003468:	0005883a 	mov	r2,zero
 400346c:	01002034 	movhi	r4,128
 4003470:	213fffc4 	addi	r4,r4,-1
 4003474:	1908703a 	and	r4,r3,r4
 4003478:	003fa106 	br	4003300 <__ram_exceptions_end+0xfbfe30b8>
 400347c:	10bfffc4 	addi	r2,r2,-1
 4003480:	103fb926 	beq	r2,zero,4003368 <__ram_exceptions_end+0xfbfe3120>
 4003484:	00c03fc4 	movi	r3,255
 4003488:	80ffaf1e 	bne	r16,r3,4003348 <__ram_exceptions_end+0xfbfe3100>
 400348c:	003f8e06 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003490:	283f8d26 	beq	r5,zero,40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003494:	18ffffc4 	addi	r3,r3,-1
 4003498:	183fe526 	beq	r3,zero,4003430 <__ram_exceptions_end+0xfbfe31e8>
 400349c:	01803fc4 	movi	r6,255
 40034a0:	81bfdb1e 	bne	r16,r6,4003410 <__ram_exceptions_end+0xfbfe31c8>
 40034a4:	003f8806 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 40034a8:	1000201e 	bne	r2,zero,400352c <__addsf3+0x2c0>
 40034ac:	80800044 	addi	r2,r16,1
 40034b0:	10803fcc 	andi	r2,r2,255
 40034b4:	01800044 	movi	r6,1
 40034b8:	3080450e 	bge	r6,r2,40035d0 <__addsf3+0x364>
 40034bc:	2165c83a 	sub	r18,r4,r5
 40034c0:	90c1002c 	andhi	r3,r18,1024
 40034c4:	18002b26 	beq	r3,zero,4003574 <__addsf3+0x308>
 40034c8:	2925c83a 	sub	r18,r5,r4
 40034cc:	3823883a 	mov	r17,r7
 40034d0:	003fab06 	br	4003380 <__ram_exceptions_end+0xfbfe3138>
 40034d4:	8805883a 	mov	r2,r17
 40034d8:	043fffc4 	movi	r16,-1
 40034dc:	0009883a 	mov	r4,zero
 40034e0:	003f8706 	br	4003300 <__ram_exceptions_end+0xfbfe30b8>
 40034e4:	013f0034 	movhi	r4,64512
 40034e8:	213fffc4 	addi	r4,r4,-1
 40034ec:	80a1c83a 	sub	r16,r16,r2
 40034f0:	9108703a 	and	r4,r18,r4
 40034f4:	003f7406 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 40034f8:	1800411e 	bne	r3,zero,4003600 <__addsf3+0x394>
 40034fc:	80c00044 	addi	r3,r16,1
 4003500:	19c03fcc 	andi	r7,r3,255
 4003504:	01800044 	movi	r6,1
 4003508:	31c0260e 	bge	r6,r7,40035a4 <__addsf3+0x338>
 400350c:	01803fc4 	movi	r6,255
 4003510:	19802126 	beq	r3,r6,4003598 <__addsf3+0x32c>
 4003514:	2149883a 	add	r4,r4,r5
 4003518:	2008d07a 	srli	r4,r4,1
 400351c:	1821883a 	mov	r16,r3
 4003520:	003f6906 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003524:	01400044 	movi	r5,1
 4003528:	003f8f06 	br	4003368 <__ram_exceptions_end+0xfbfe3120>
 400352c:	8000151e 	bne	r16,zero,4003584 <__addsf3+0x318>
 4003530:	20002f26 	beq	r4,zero,40035f0 <__addsf3+0x384>
 4003534:	0084303a 	nor	r2,zero,r2
 4003538:	10000a26 	beq	r2,zero,4003564 <__addsf3+0x2f8>
 400353c:	00c03fc4 	movi	r3,255
 4003540:	30c02b26 	beq	r6,r3,40035f0 <__addsf3+0x384>
 4003544:	00c006c4 	movi	r3,27
 4003548:	18806d16 	blt	r3,r2,4003700 <__addsf3+0x494>
 400354c:	00c00804 	movi	r3,32
 4003550:	1887c83a 	sub	r3,r3,r2
 4003554:	20c6983a 	sll	r3,r4,r3
 4003558:	2084d83a 	srl	r2,r4,r2
 400355c:	1808c03a 	cmpne	r4,r3,zero
 4003560:	1108b03a 	or	r4,r2,r4
 4003564:	2909c83a 	sub	r4,r5,r4
 4003568:	3021883a 	mov	r16,r6
 400356c:	3823883a 	mov	r17,r7
 4003570:	003f7e06 	br	400336c <__ram_exceptions_end+0xfbfe3124>
 4003574:	903f821e 	bne	r18,zero,4003380 <__ram_exceptions_end+0xfbfe3138>
 4003578:	0005883a 	mov	r2,zero
 400357c:	0021883a 	mov	r16,zero
 4003580:	003fba06 	br	400346c <__ram_exceptions_end+0xfbfe3224>
 4003584:	00c03fc4 	movi	r3,255
 4003588:	30c01926 	beq	r6,r3,40035f0 <__addsf3+0x384>
 400358c:	0085c83a 	sub	r2,zero,r2
 4003590:	21010034 	orhi	r4,r4,1024
 4003594:	003feb06 	br	4003544 <__ram_exceptions_end+0xfbfe32fc>
 4003598:	043fffc4 	movi	r16,-1
 400359c:	0009883a 	mov	r4,zero
 40035a0:	003f5706 	br	4003300 <__ram_exceptions_end+0xfbfe30b8>
 40035a4:	80004a1e 	bne	r16,zero,40036d0 <__addsf3+0x464>
 40035a8:	20005926 	beq	r4,zero,4003710 <__addsf3+0x4a4>
 40035ac:	283f4626 	beq	r5,zero,40032c8 <__ram_exceptions_end+0xfbfe3080>
 40035b0:	2149883a 	add	r4,r4,r5
 40035b4:	2081002c 	andhi	r2,r4,1024
 40035b8:	103f8226 	beq	r2,zero,40033c4 <__ram_exceptions_end+0xfbfe317c>
 40035bc:	00bf0034 	movhi	r2,64512
 40035c0:	10bfffc4 	addi	r2,r2,-1
 40035c4:	3021883a 	mov	r16,r6
 40035c8:	2088703a 	and	r4,r4,r2
 40035cc:	003f3e06 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 40035d0:	8000121e 	bne	r16,zero,400361c <__addsf3+0x3b0>
 40035d4:	2000261e 	bne	r4,zero,4003670 <__addsf3+0x404>
 40035d8:	283fa226 	beq	r5,zero,4003464 <__ram_exceptions_end+0xfbfe321c>
 40035dc:	2809883a 	mov	r4,r5
 40035e0:	3823883a 	mov	r17,r7
 40035e4:	003f3806 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 40035e8:	01400044 	movi	r5,1
 40035ec:	003f9006 	br	4003430 <__ram_exceptions_end+0xfbfe31e8>
 40035f0:	2809883a 	mov	r4,r5
 40035f4:	3021883a 	mov	r16,r6
 40035f8:	3823883a 	mov	r17,r7
 40035fc:	003f3206 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003600:	80000c1e 	bne	r16,zero,4003634 <__addsf3+0x3c8>
 4003604:	20002f26 	beq	r4,zero,40036c4 <__addsf3+0x458>
 4003608:	00c6303a 	nor	r3,zero,r3
 400360c:	18002b1e 	bne	r3,zero,40036bc <__addsf3+0x450>
 4003610:	2149883a 	add	r4,r4,r5
 4003614:	3021883a 	mov	r16,r6
 4003618:	003f8606 	br	4003434 <__ram_exceptions_end+0xfbfe31ec>
 400361c:	20001b1e 	bne	r4,zero,400368c <__addsf3+0x420>
 4003620:	28003926 	beq	r5,zero,4003708 <__addsf3+0x49c>
 4003624:	2809883a 	mov	r4,r5
 4003628:	3823883a 	mov	r17,r7
 400362c:	04003fc4 	movi	r16,255
 4003630:	003f2506 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003634:	01c03fc4 	movi	r7,255
 4003638:	31c02226 	beq	r6,r7,40036c4 <__addsf3+0x458>
 400363c:	00c7c83a 	sub	r3,zero,r3
 4003640:	21010034 	orhi	r4,r4,1024
 4003644:	01c006c4 	movi	r7,27
 4003648:	38c03616 	blt	r7,r3,4003724 <__addsf3+0x4b8>
 400364c:	01c00804 	movi	r7,32
 4003650:	38cfc83a 	sub	r7,r7,r3
 4003654:	21ce983a 	sll	r7,r4,r7
 4003658:	20c6d83a 	srl	r3,r4,r3
 400365c:	3808c03a 	cmpne	r4,r7,zero
 4003660:	1906b03a 	or	r3,r3,r4
 4003664:	1949883a 	add	r4,r3,r5
 4003668:	3021883a 	mov	r16,r6
 400366c:	003f7106 	br	4003434 <__ram_exceptions_end+0xfbfe31ec>
 4003670:	283f1526 	beq	r5,zero,40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003674:	2145c83a 	sub	r2,r4,r5
 4003678:	10c1002c 	andhi	r3,r2,1024
 400367c:	183f4f26 	beq	r3,zero,40033bc <__ram_exceptions_end+0xfbfe3174>
 4003680:	2909c83a 	sub	r4,r5,r4
 4003684:	3823883a 	mov	r17,r7
 4003688:	003f0f06 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 400368c:	28001a26 	beq	r5,zero,40036f8 <__addsf3+0x48c>
 4003690:	2008d0fa 	srli	r4,r4,3
 4003694:	2080102c 	andhi	r2,r4,64
 4003698:	10000526 	beq	r2,zero,40036b0 <__addsf3+0x444>
 400369c:	280ad0fa 	srli	r5,r5,3
 40036a0:	2880102c 	andhi	r2,r5,64
 40036a4:	1000021e 	bne	r2,zero,40036b0 <__addsf3+0x444>
 40036a8:	2809883a 	mov	r4,r5
 40036ac:	3823883a 	mov	r17,r7
 40036b0:	200890fa 	slli	r4,r4,3
 40036b4:	04003fc4 	movi	r16,255
 40036b8:	003f0306 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 40036bc:	01c03fc4 	movi	r7,255
 40036c0:	31ffe01e 	bne	r6,r7,4003644 <__ram_exceptions_end+0xfbfe33fc>
 40036c4:	2809883a 	mov	r4,r5
 40036c8:	3021883a 	mov	r16,r6
 40036cc:	003efe06 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 40036d0:	20001126 	beq	r4,zero,4003718 <__addsf3+0x4ac>
 40036d4:	28000826 	beq	r5,zero,40036f8 <__addsf3+0x48c>
 40036d8:	2008d0fa 	srli	r4,r4,3
 40036dc:	2080102c 	andhi	r2,r4,64
 40036e0:	103ff326 	beq	r2,zero,40036b0 <__ram_exceptions_end+0xfbfe3468>
 40036e4:	280ad0fa 	srli	r5,r5,3
 40036e8:	2880102c 	andhi	r2,r5,64
 40036ec:	103ff01e 	bne	r2,zero,40036b0 <__ram_exceptions_end+0xfbfe3468>
 40036f0:	2809883a 	mov	r4,r5
 40036f4:	003fee06 	br	40036b0 <__ram_exceptions_end+0xfbfe3468>
 40036f8:	04003fc4 	movi	r16,255
 40036fc:	003ef206 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003700:	01000044 	movi	r4,1
 4003704:	003f9706 	br	4003564 <__ram_exceptions_end+0xfbfe331c>
 4003708:	0005883a 	mov	r2,zero
 400370c:	003f3406 	br	40033e0 <__ram_exceptions_end+0xfbfe3198>
 4003710:	2809883a 	mov	r4,r5
 4003714:	003eec06 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003718:	2809883a 	mov	r4,r5
 400371c:	04003fc4 	movi	r16,255
 4003720:	003ee906 	br	40032c8 <__ram_exceptions_end+0xfbfe3080>
 4003724:	00c00044 	movi	r3,1
 4003728:	003fce06 	br	4003664 <__ram_exceptions_end+0xfbfe341c>
 400372c:	0005883a 	mov	r2,zero
 4003730:	003f4e06 	br	400346c <__ram_exceptions_end+0xfbfe3224>

04003734 <__divsf3>:
 4003734:	defff504 	addi	sp,sp,-44
 4003738:	200cd5fa 	srli	r6,r4,23
 400373c:	dcc00415 	stw	r19,16(sp)
 4003740:	2026d7fa 	srli	r19,r4,31
 4003744:	00c02034 	movhi	r3,128
 4003748:	dd800715 	stw	r22,28(sp)
 400374c:	dd000515 	stw	r20,20(sp)
 4003750:	dc800315 	stw	r18,12(sp)
 4003754:	18ffffc4 	addi	r3,r3,-1
 4003758:	dfc00a15 	stw	ra,40(sp)
 400375c:	df000915 	stw	fp,36(sp)
 4003760:	ddc00815 	stw	r23,32(sp)
 4003764:	dd400615 	stw	r21,24(sp)
 4003768:	dc400215 	stw	r17,8(sp)
 400376c:	dc000115 	stw	r16,4(sp)
 4003770:	35003fcc 	andi	r20,r6,255
 4003774:	1924703a 	and	r18,r3,r4
 4003778:	9d803fcc 	andi	r22,r19,255
 400377c:	a0005226 	beq	r20,zero,40038c8 <__divsf3+0x194>
 4003780:	00803fc4 	movi	r2,255
 4003784:	a0802e26 	beq	r20,r2,4003840 <__divsf3+0x10c>
 4003788:	91002034 	orhi	r4,r18,128
 400378c:	202490fa 	slli	r18,r4,3
 4003790:	a53fe044 	addi	r20,r20,-127
 4003794:	0021883a 	mov	r16,zero
 4003798:	002f883a 	mov	r23,zero
 400379c:	280cd5fa 	srli	r6,r5,23
 40037a0:	282ad7fa 	srli	r21,r5,31
 40037a4:	00c02034 	movhi	r3,128
 40037a8:	18ffffc4 	addi	r3,r3,-1
 40037ac:	31803fcc 	andi	r6,r6,255
 40037b0:	1962703a 	and	r17,r3,r5
 40037b4:	af003fcc 	andi	fp,r21,255
 40037b8:	30004a26 	beq	r6,zero,40038e4 <__divsf3+0x1b0>
 40037bc:	00803fc4 	movi	r2,255
 40037c0:	30804526 	beq	r6,r2,40038d8 <__divsf3+0x1a4>
 40037c4:	89402034 	orhi	r5,r17,128
 40037c8:	282290fa 	slli	r17,r5,3
 40037cc:	31bfe044 	addi	r6,r6,-127
 40037d0:	000b883a 	mov	r5,zero
 40037d4:	2c20b03a 	or	r16,r5,r16
 40037d8:	802090ba 	slli	r16,r16,2
 40037dc:	00810034 	movhi	r2,1024
 40037e0:	108e0004 	addi	r2,r2,14336
 40037e4:	80a1883a 	add	r16,r16,r2
 40037e8:	81000017 	ldw	r4,0(r16)
 40037ec:	9d46f03a 	xor	r3,r19,r21
 40037f0:	180f883a 	mov	r7,r3
 40037f4:	18803fcc 	andi	r2,r3,255
 40037f8:	a18dc83a 	sub	r6,r20,r6
 40037fc:	2000683a 	jmp	r4
 4003800:	040039e4 	muli	r16,zero,231
 4003804:	04003868 	cmpgeui	r16,zero,225
 4003808:	040039d8 	cmpnei	r16,zero,231
 400380c:	04003854 	movui	r16,225
 4003810:	040039d8 	cmpnei	r16,zero,231
 4003814:	040039b0 	cmpltui	r16,zero,230
 4003818:	040039d8 	cmpnei	r16,zero,231
 400381c:	04003854 	movui	r16,225
 4003820:	04003868 	cmpgeui	r16,zero,225
 4003824:	04003868 	cmpgeui	r16,zero,225
 4003828:	040039b0 	cmpltui	r16,zero,230
 400382c:	04003854 	movui	r16,225
 4003830:	04003ac4 	movi	r16,235
 4003834:	04003ac4 	movi	r16,235
 4003838:	04003ac4 	movi	r16,235
 400383c:	04003a78 	rdprs	r16,zero,233
 4003840:	9000581e 	bne	r18,zero,40039a4 <__divsf3+0x270>
 4003844:	04000204 	movi	r16,8
 4003848:	05c00084 	movi	r23,2
 400384c:	003fd306 	br	400379c <__ram_exceptions_end+0xfbfe3554>
 4003850:	0023883a 	mov	r17,zero
 4003854:	e02d883a 	mov	r22,fp
 4003858:	282f883a 	mov	r23,r5
 400385c:	00800084 	movi	r2,2
 4003860:	b8808f1e 	bne	r23,r2,4003aa0 <__divsf3+0x36c>
 4003864:	b005883a 	mov	r2,r22
 4003868:	11c0004c 	andi	r7,r2,1
 400386c:	013fffc4 	movi	r4,-1
 4003870:	000d883a 	mov	r6,zero
 4003874:	21003fcc 	andi	r4,r4,255
 4003878:	200895fa 	slli	r4,r4,23
 400387c:	38803fcc 	andi	r2,r7,255
 4003880:	00c02034 	movhi	r3,128
 4003884:	100497fa 	slli	r2,r2,31
 4003888:	18ffffc4 	addi	r3,r3,-1
 400388c:	30c6703a 	and	r3,r6,r3
 4003890:	1906b03a 	or	r3,r3,r4
 4003894:	1884b03a 	or	r2,r3,r2
 4003898:	dfc00a17 	ldw	ra,40(sp)
 400389c:	df000917 	ldw	fp,36(sp)
 40038a0:	ddc00817 	ldw	r23,32(sp)
 40038a4:	dd800717 	ldw	r22,28(sp)
 40038a8:	dd400617 	ldw	r21,24(sp)
 40038ac:	dd000517 	ldw	r20,20(sp)
 40038b0:	dcc00417 	ldw	r19,16(sp)
 40038b4:	dc800317 	ldw	r18,12(sp)
 40038b8:	dc400217 	ldw	r17,8(sp)
 40038bc:	dc000117 	ldw	r16,4(sp)
 40038c0:	dec00b04 	addi	sp,sp,44
 40038c4:	f800283a 	ret
 40038c8:	90002b1e 	bne	r18,zero,4003978 <__divsf3+0x244>
 40038cc:	04000104 	movi	r16,4
 40038d0:	05c00044 	movi	r23,1
 40038d4:	003fb106 	br	400379c <__ram_exceptions_end+0xfbfe3554>
 40038d8:	8800251e 	bne	r17,zero,4003970 <__divsf3+0x23c>
 40038dc:	01400084 	movi	r5,2
 40038e0:	00000206 	br	40038ec <__divsf3+0x1b8>
 40038e4:	88001a1e 	bne	r17,zero,4003950 <__divsf3+0x21c>
 40038e8:	01400044 	movi	r5,1
 40038ec:	8160b03a 	or	r16,r16,r5
 40038f0:	802090ba 	slli	r16,r16,2
 40038f4:	00c10034 	movhi	r3,1024
 40038f8:	18ce4404 	addi	r3,r3,14608
 40038fc:	80e1883a 	add	r16,r16,r3
 4003900:	80c00017 	ldw	r3,0(r16)
 4003904:	9d44f03a 	xor	r2,r19,r21
 4003908:	a18dc83a 	sub	r6,r20,r6
 400390c:	1800683a 	jmp	r3
 4003910:	04003868 	cmpgeui	r16,zero,225
 4003914:	04003868 	cmpgeui	r16,zero,225
 4003918:	04003ab4 	movhi	r16,234
 400391c:	04003850 	cmplti	r16,zero,225
 4003920:	04003ab4 	movhi	r16,234
 4003924:	040039b0 	cmpltui	r16,zero,230
 4003928:	04003ab4 	movhi	r16,234
 400392c:	04003850 	cmplti	r16,zero,225
 4003930:	04003868 	cmpgeui	r16,zero,225
 4003934:	04003868 	cmpgeui	r16,zero,225
 4003938:	040039b0 	cmpltui	r16,zero,230
 400393c:	04003850 	cmplti	r16,zero,225
 4003940:	04003ac4 	movi	r16,235
 4003944:	04003ac4 	movi	r16,235
 4003948:	04003ac4 	movi	r16,235
 400394c:	04003adc 	xori	r16,zero,235
 4003950:	8809883a 	mov	r4,r17
 4003954:	4006f800 	call	4006f80 <__clzsi2>
 4003958:	10fffec4 	addi	r3,r2,-5
 400395c:	10801d84 	addi	r2,r2,118
 4003960:	88e2983a 	sll	r17,r17,r3
 4003964:	008dc83a 	sub	r6,zero,r2
 4003968:	000b883a 	mov	r5,zero
 400396c:	003f9906 	br	40037d4 <__ram_exceptions_end+0xfbfe358c>
 4003970:	014000c4 	movi	r5,3
 4003974:	003f9706 	br	40037d4 <__ram_exceptions_end+0xfbfe358c>
 4003978:	9009883a 	mov	r4,r18
 400397c:	d9400015 	stw	r5,0(sp)
 4003980:	4006f800 	call	4006f80 <__clzsi2>
 4003984:	10fffec4 	addi	r3,r2,-5
 4003988:	11801d84 	addi	r6,r2,118
 400398c:	90e4983a 	sll	r18,r18,r3
 4003990:	01a9c83a 	sub	r20,zero,r6
 4003994:	0021883a 	mov	r16,zero
 4003998:	002f883a 	mov	r23,zero
 400399c:	d9400017 	ldw	r5,0(sp)
 40039a0:	003f7e06 	br	400379c <__ram_exceptions_end+0xfbfe3554>
 40039a4:	04000304 	movi	r16,12
 40039a8:	05c000c4 	movi	r23,3
 40039ac:	003f7b06 	br	400379c <__ram_exceptions_end+0xfbfe3554>
 40039b0:	01802034 	movhi	r6,128
 40039b4:	000f883a 	mov	r7,zero
 40039b8:	31bfffc4 	addi	r6,r6,-1
 40039bc:	013fffc4 	movi	r4,-1
 40039c0:	003fac06 	br	4003874 <__ram_exceptions_end+0xfbfe362c>
 40039c4:	01400044 	movi	r5,1
 40039c8:	2909c83a 	sub	r4,r5,r4
 40039cc:	00c006c4 	movi	r3,27
 40039d0:	19004b0e 	bge	r3,r4,4003b00 <__divsf3+0x3cc>
 40039d4:	114e703a 	and	r7,r2,r5
 40039d8:	0009883a 	mov	r4,zero
 40039dc:	000d883a 	mov	r6,zero
 40039e0:	003fa406 	br	4003874 <__ram_exceptions_end+0xfbfe362c>
 40039e4:	9006917a 	slli	r3,r18,5
 40039e8:	8822917a 	slli	r17,r17,5
 40039ec:	1c40372e 	bgeu	r3,r17,4003acc <__divsf3+0x398>
 40039f0:	31bfffc4 	addi	r6,r6,-1
 40039f4:	010006c4 	movi	r4,27
 40039f8:	000b883a 	mov	r5,zero
 40039fc:	180f883a 	mov	r7,r3
 4003a00:	294b883a 	add	r5,r5,r5
 4003a04:	18c7883a 	add	r3,r3,r3
 4003a08:	38000116 	blt	r7,zero,4003a10 <__divsf3+0x2dc>
 4003a0c:	1c400236 	bltu	r3,r17,4003a18 <__divsf3+0x2e4>
 4003a10:	1c47c83a 	sub	r3,r3,r17
 4003a14:	29400054 	ori	r5,r5,1
 4003a18:	213fffc4 	addi	r4,r4,-1
 4003a1c:	203ff71e 	bne	r4,zero,40039fc <__ram_exceptions_end+0xfbfe37b4>
 4003a20:	1806c03a 	cmpne	r3,r3,zero
 4003a24:	1962b03a 	or	r17,r3,r5
 4003a28:	31001fc4 	addi	r4,r6,127
 4003a2c:	013fe50e 	bge	zero,r4,40039c4 <__ram_exceptions_end+0xfbfe377c>
 4003a30:	88c001cc 	andi	r3,r17,7
 4003a34:	18000426 	beq	r3,zero,4003a48 <__divsf3+0x314>
 4003a38:	88c003cc 	andi	r3,r17,15
 4003a3c:	01400104 	movi	r5,4
 4003a40:	19400126 	beq	r3,r5,4003a48 <__divsf3+0x314>
 4003a44:	8963883a 	add	r17,r17,r5
 4003a48:	88c2002c 	andhi	r3,r17,2048
 4003a4c:	18000426 	beq	r3,zero,4003a60 <__divsf3+0x32c>
 4003a50:	00fe0034 	movhi	r3,63488
 4003a54:	18ffffc4 	addi	r3,r3,-1
 4003a58:	31002004 	addi	r4,r6,128
 4003a5c:	88e2703a 	and	r17,r17,r3
 4003a60:	00c03f84 	movi	r3,254
 4003a64:	193f8016 	blt	r3,r4,4003868 <__ram_exceptions_end+0xfbfe3620>
 4003a68:	880c91ba 	slli	r6,r17,6
 4003a6c:	11c0004c 	andi	r7,r2,1
 4003a70:	300cd27a 	srli	r6,r6,9
 4003a74:	003f7f06 	br	4003874 <__ram_exceptions_end+0xfbfe362c>
 4003a78:	9080102c 	andhi	r2,r18,64
 4003a7c:	10000226 	beq	r2,zero,4003a88 <__divsf3+0x354>
 4003a80:	8880102c 	andhi	r2,r17,64
 4003a84:	10001826 	beq	r2,zero,4003ae8 <__divsf3+0x3b4>
 4003a88:	00802034 	movhi	r2,128
 4003a8c:	91801034 	orhi	r6,r18,64
 4003a90:	10bfffc4 	addi	r2,r2,-1
 4003a94:	980f883a 	mov	r7,r19
 4003a98:	308c703a 	and	r6,r6,r2
 4003a9c:	003fc706 	br	40039bc <__ram_exceptions_end+0xfbfe3774>
 4003aa0:	008000c4 	movi	r2,3
 4003aa4:	b8802d26 	beq	r23,r2,4003b5c <__divsf3+0x428>
 4003aa8:	00c00044 	movi	r3,1
 4003aac:	b005883a 	mov	r2,r22
 4003ab0:	b8ffdd1e 	bne	r23,r3,4003a28 <__ram_exceptions_end+0xfbfe37e0>
 4003ab4:	11c0004c 	andi	r7,r2,1
 4003ab8:	0009883a 	mov	r4,zero
 4003abc:	000d883a 	mov	r6,zero
 4003ac0:	003f6c06 	br	4003874 <__ram_exceptions_end+0xfbfe362c>
 4003ac4:	9023883a 	mov	r17,r18
 4003ac8:	003f6406 	br	400385c <__ram_exceptions_end+0xfbfe3614>
 4003acc:	1c47c83a 	sub	r3,r3,r17
 4003ad0:	01000684 	movi	r4,26
 4003ad4:	01400044 	movi	r5,1
 4003ad8:	003fc806 	br	40039fc <__ram_exceptions_end+0xfbfe37b4>
 4003adc:	9080102c 	andhi	r2,r18,64
 4003ae0:	103fe926 	beq	r2,zero,4003a88 <__ram_exceptions_end+0xfbfe3840>
 4003ae4:	0023883a 	mov	r17,zero
 4003ae8:	00802034 	movhi	r2,128
 4003aec:	89801034 	orhi	r6,r17,64
 4003af0:	10bfffc4 	addi	r2,r2,-1
 4003af4:	a80f883a 	mov	r7,r21
 4003af8:	308c703a 	and	r6,r6,r2
 4003afc:	003faf06 	br	40039bc <__ram_exceptions_end+0xfbfe3774>
 4003b00:	01c00804 	movi	r7,32
 4003b04:	390fc83a 	sub	r7,r7,r4
 4003b08:	89ce983a 	sll	r7,r17,r7
 4003b0c:	890ad83a 	srl	r5,r17,r4
 4003b10:	380ec03a 	cmpne	r7,r7,zero
 4003b14:	29cab03a 	or	r5,r5,r7
 4003b18:	28c001cc 	andi	r3,r5,7
 4003b1c:	18000426 	beq	r3,zero,4003b30 <__divsf3+0x3fc>
 4003b20:	28c003cc 	andi	r3,r5,15
 4003b24:	01000104 	movi	r4,4
 4003b28:	19000126 	beq	r3,r4,4003b30 <__divsf3+0x3fc>
 4003b2c:	290b883a 	add	r5,r5,r4
 4003b30:	28c1002c 	andhi	r3,r5,1024
 4003b34:	18000426 	beq	r3,zero,4003b48 <__divsf3+0x414>
 4003b38:	11c0004c 	andi	r7,r2,1
 4003b3c:	01000044 	movi	r4,1
 4003b40:	000d883a 	mov	r6,zero
 4003b44:	003f4b06 	br	4003874 <__ram_exceptions_end+0xfbfe362c>
 4003b48:	280a91ba 	slli	r5,r5,6
 4003b4c:	11c0004c 	andi	r7,r2,1
 4003b50:	0009883a 	mov	r4,zero
 4003b54:	280cd27a 	srli	r6,r5,9
 4003b58:	003f4606 	br	4003874 <__ram_exceptions_end+0xfbfe362c>
 4003b5c:	00802034 	movhi	r2,128
 4003b60:	89801034 	orhi	r6,r17,64
 4003b64:	10bfffc4 	addi	r2,r2,-1
 4003b68:	b00f883a 	mov	r7,r22
 4003b6c:	308c703a 	and	r6,r6,r2
 4003b70:	003f9206 	br	40039bc <__ram_exceptions_end+0xfbfe3774>

04003b74 <__gesf2>:
 4003b74:	2004d5fa 	srli	r2,r4,23
 4003b78:	2806d5fa 	srli	r3,r5,23
 4003b7c:	01802034 	movhi	r6,128
 4003b80:	31bfffc4 	addi	r6,r6,-1
 4003b84:	10803fcc 	andi	r2,r2,255
 4003b88:	01c03fc4 	movi	r7,255
 4003b8c:	3110703a 	and	r8,r6,r4
 4003b90:	18c03fcc 	andi	r3,r3,255
 4003b94:	314c703a 	and	r6,r6,r5
 4003b98:	2008d7fa 	srli	r4,r4,31
 4003b9c:	280ad7fa 	srli	r5,r5,31
 4003ba0:	11c01926 	beq	r2,r7,4003c08 <__gesf2+0x94>
 4003ba4:	01c03fc4 	movi	r7,255
 4003ba8:	19c00f26 	beq	r3,r7,4003be8 <__gesf2+0x74>
 4003bac:	1000061e 	bne	r2,zero,4003bc8 <__gesf2+0x54>
 4003bb0:	400f003a 	cmpeq	r7,r8,zero
 4003bb4:	1800071e 	bne	r3,zero,4003bd4 <__gesf2+0x60>
 4003bb8:	3000061e 	bne	r6,zero,4003bd4 <__gesf2+0x60>
 4003bbc:	0005883a 	mov	r2,zero
 4003bc0:	40000e1e 	bne	r8,zero,4003bfc <__gesf2+0x88>
 4003bc4:	f800283a 	ret
 4003bc8:	18000a1e 	bne	r3,zero,4003bf4 <__gesf2+0x80>
 4003bcc:	30000b26 	beq	r6,zero,4003bfc <__gesf2+0x88>
 4003bd0:	000f883a 	mov	r7,zero
 4003bd4:	29403fcc 	andi	r5,r5,255
 4003bd8:	38000726 	beq	r7,zero,4003bf8 <__gesf2+0x84>
 4003bdc:	28000826 	beq	r5,zero,4003c00 <__gesf2+0x8c>
 4003be0:	00800044 	movi	r2,1
 4003be4:	f800283a 	ret
 4003be8:	303ff026 	beq	r6,zero,4003bac <__ram_exceptions_end+0xfbfe3964>
 4003bec:	00bfff84 	movi	r2,-2
 4003bf0:	f800283a 	ret
 4003bf4:	29403fcc 	andi	r5,r5,255
 4003bf8:	21400526 	beq	r4,r5,4003c10 <__gesf2+0x9c>
 4003bfc:	203ff826 	beq	r4,zero,4003be0 <__ram_exceptions_end+0xfbfe3998>
 4003c00:	00bfffc4 	movi	r2,-1
 4003c04:	f800283a 	ret
 4003c08:	403fe626 	beq	r8,zero,4003ba4 <__ram_exceptions_end+0xfbfe395c>
 4003c0c:	003ff706 	br	4003bec <__ram_exceptions_end+0xfbfe39a4>
 4003c10:	18bffa16 	blt	r3,r2,4003bfc <__ram_exceptions_end+0xfbfe39b4>
 4003c14:	10c00216 	blt	r2,r3,4003c20 <__gesf2+0xac>
 4003c18:	323ff836 	bltu	r6,r8,4003bfc <__ram_exceptions_end+0xfbfe39b4>
 4003c1c:	4180022e 	bgeu	r8,r6,4003c28 <__gesf2+0xb4>
 4003c20:	203fef1e 	bne	r4,zero,4003be0 <__ram_exceptions_end+0xfbfe3998>
 4003c24:	003ff606 	br	4003c00 <__ram_exceptions_end+0xfbfe39b8>
 4003c28:	0005883a 	mov	r2,zero
 4003c2c:	f800283a 	ret

04003c30 <__lesf2>:
 4003c30:	2004d5fa 	srli	r2,r4,23
 4003c34:	280cd5fa 	srli	r6,r5,23
 4003c38:	00c02034 	movhi	r3,128
 4003c3c:	18ffffc4 	addi	r3,r3,-1
 4003c40:	10803fcc 	andi	r2,r2,255
 4003c44:	01c03fc4 	movi	r7,255
 4003c48:	1910703a 	and	r8,r3,r4
 4003c4c:	31803fcc 	andi	r6,r6,255
 4003c50:	1946703a 	and	r3,r3,r5
 4003c54:	2008d7fa 	srli	r4,r4,31
 4003c58:	280ad7fa 	srli	r5,r5,31
 4003c5c:	11c01b26 	beq	r2,r7,4003ccc <__lesf2+0x9c>
 4003c60:	01c03fc4 	movi	r7,255
 4003c64:	31c01126 	beq	r6,r7,4003cac <__lesf2+0x7c>
 4003c68:	1000071e 	bne	r2,zero,4003c88 <__lesf2+0x58>
 4003c6c:	400f003a 	cmpeq	r7,r8,zero
 4003c70:	21003fcc 	andi	r4,r4,255
 4003c74:	3000081e 	bne	r6,zero,4003c98 <__lesf2+0x68>
 4003c78:	1800071e 	bne	r3,zero,4003c98 <__lesf2+0x68>
 4003c7c:	0005883a 	mov	r2,zero
 4003c80:	40000f1e 	bne	r8,zero,4003cc0 <__lesf2+0x90>
 4003c84:	f800283a 	ret
 4003c88:	21003fcc 	andi	r4,r4,255
 4003c8c:	30000a1e 	bne	r6,zero,4003cb8 <__lesf2+0x88>
 4003c90:	18000b26 	beq	r3,zero,4003cc0 <__lesf2+0x90>
 4003c94:	000f883a 	mov	r7,zero
 4003c98:	29403fcc 	andi	r5,r5,255
 4003c9c:	38000726 	beq	r7,zero,4003cbc <__lesf2+0x8c>
 4003ca0:	28000826 	beq	r5,zero,4003cc4 <__lesf2+0x94>
 4003ca4:	00800044 	movi	r2,1
 4003ca8:	f800283a 	ret
 4003cac:	183fee26 	beq	r3,zero,4003c68 <__ram_exceptions_end+0xfbfe3a20>
 4003cb0:	00800084 	movi	r2,2
 4003cb4:	f800283a 	ret
 4003cb8:	29403fcc 	andi	r5,r5,255
 4003cbc:	21400626 	beq	r4,r5,4003cd8 <__lesf2+0xa8>
 4003cc0:	203ff826 	beq	r4,zero,4003ca4 <__ram_exceptions_end+0xfbfe3a5c>
 4003cc4:	00bfffc4 	movi	r2,-1
 4003cc8:	f800283a 	ret
 4003ccc:	403fe426 	beq	r8,zero,4003c60 <__ram_exceptions_end+0xfbfe3a18>
 4003cd0:	00800084 	movi	r2,2
 4003cd4:	f800283a 	ret
 4003cd8:	30bff916 	blt	r6,r2,4003cc0 <__ram_exceptions_end+0xfbfe3a78>
 4003cdc:	11800216 	blt	r2,r6,4003ce8 <__lesf2+0xb8>
 4003ce0:	1a3ff736 	bltu	r3,r8,4003cc0 <__ram_exceptions_end+0xfbfe3a78>
 4003ce4:	40c0022e 	bgeu	r8,r3,4003cf0 <__lesf2+0xc0>
 4003ce8:	203fee1e 	bne	r4,zero,4003ca4 <__ram_exceptions_end+0xfbfe3a5c>
 4003cec:	003ff506 	br	4003cc4 <__ram_exceptions_end+0xfbfe3a7c>
 4003cf0:	0005883a 	mov	r2,zero
 4003cf4:	f800283a 	ret

04003cf8 <__mulsf3>:
 4003cf8:	defff504 	addi	sp,sp,-44
 4003cfc:	dc000115 	stw	r16,4(sp)
 4003d00:	2020d5fa 	srli	r16,r4,23
 4003d04:	dd400615 	stw	r21,24(sp)
 4003d08:	202ad7fa 	srli	r21,r4,31
 4003d0c:	dc800315 	stw	r18,12(sp)
 4003d10:	04802034 	movhi	r18,128
 4003d14:	df000915 	stw	fp,36(sp)
 4003d18:	dd000515 	stw	r20,20(sp)
 4003d1c:	94bfffc4 	addi	r18,r18,-1
 4003d20:	dfc00a15 	stw	ra,40(sp)
 4003d24:	ddc00815 	stw	r23,32(sp)
 4003d28:	dd800715 	stw	r22,28(sp)
 4003d2c:	dcc00415 	stw	r19,16(sp)
 4003d30:	dc400215 	stw	r17,8(sp)
 4003d34:	84003fcc 	andi	r16,r16,255
 4003d38:	9124703a 	and	r18,r18,r4
 4003d3c:	a829883a 	mov	r20,r21
 4003d40:	af003fcc 	andi	fp,r21,255
 4003d44:	80005426 	beq	r16,zero,4003e98 <__mulsf3+0x1a0>
 4003d48:	00803fc4 	movi	r2,255
 4003d4c:	80802f26 	beq	r16,r2,4003e0c <__mulsf3+0x114>
 4003d50:	91002034 	orhi	r4,r18,128
 4003d54:	202490fa 	slli	r18,r4,3
 4003d58:	843fe044 	addi	r16,r16,-127
 4003d5c:	0023883a 	mov	r17,zero
 4003d60:	002f883a 	mov	r23,zero
 4003d64:	2804d5fa 	srli	r2,r5,23
 4003d68:	282cd7fa 	srli	r22,r5,31
 4003d6c:	01002034 	movhi	r4,128
 4003d70:	213fffc4 	addi	r4,r4,-1
 4003d74:	10803fcc 	andi	r2,r2,255
 4003d78:	2166703a 	and	r19,r4,r5
 4003d7c:	b1803fcc 	andi	r6,r22,255
 4003d80:	10004c26 	beq	r2,zero,4003eb4 <__mulsf3+0x1bc>
 4003d84:	00c03fc4 	movi	r3,255
 4003d88:	10c04726 	beq	r2,r3,4003ea8 <__mulsf3+0x1b0>
 4003d8c:	99002034 	orhi	r4,r19,128
 4003d90:	202690fa 	slli	r19,r4,3
 4003d94:	10bfe044 	addi	r2,r2,-127
 4003d98:	0007883a 	mov	r3,zero
 4003d9c:	80a1883a 	add	r16,r16,r2
 4003da0:	010003c4 	movi	r4,15
 4003da4:	1c44b03a 	or	r2,r3,r17
 4003da8:	b56af03a 	xor	r21,r22,r21
 4003dac:	81c00044 	addi	r7,r16,1
 4003db0:	20806b36 	bltu	r4,r2,4003f60 <__mulsf3+0x268>
 4003db4:	100490ba 	slli	r2,r2,2
 4003db8:	01010034 	movhi	r4,1024
 4003dbc:	210f7304 	addi	r4,r4,15820
 4003dc0:	1105883a 	add	r2,r2,r4
 4003dc4:	10800017 	ldw	r2,0(r2)
 4003dc8:	1000683a 	jmp	r2
 4003dcc:	04003f60 	cmpeqi	r16,zero,253
 4003dd0:	04003e20 	cmpeqi	r16,zero,248
 4003dd4:	04003e20 	cmpeqi	r16,zero,248
 4003dd8:	04003e1c 	xori	r16,zero,248
 4003ddc:	04003f44 	movi	r16,253
 4003de0:	04003f44 	movi	r16,253
 4003de4:	04003f30 	cmpltui	r16,zero,252
 4003de8:	04003e1c 	xori	r16,zero,248
 4003dec:	04003f44 	movi	r16,253
 4003df0:	04003f30 	cmpltui	r16,zero,252
 4003df4:	04003f44 	movi	r16,253
 4003df8:	04003e1c 	xori	r16,zero,248
 4003dfc:	04003f50 	cmplti	r16,zero,253
 4003e00:	04003f50 	cmplti	r16,zero,253
 4003e04:	04003f50 	cmplti	r16,zero,253
 4003e08:	0400402c 	andhi	r16,zero,256
 4003e0c:	90003b1e 	bne	r18,zero,4003efc <__mulsf3+0x204>
 4003e10:	04400204 	movi	r17,8
 4003e14:	05c00084 	movi	r23,2
 4003e18:	003fd206 	br	4003d64 <__ram_exceptions_end+0xfbfe3b1c>
 4003e1c:	302b883a 	mov	r21,r6
 4003e20:	00800084 	movi	r2,2
 4003e24:	18802626 	beq	r3,r2,4003ec0 <__mulsf3+0x1c8>
 4003e28:	008000c4 	movi	r2,3
 4003e2c:	1880ab26 	beq	r3,r2,40040dc <__mulsf3+0x3e4>
 4003e30:	00800044 	movi	r2,1
 4003e34:	1880a21e 	bne	r3,r2,40040c0 <__mulsf3+0x3c8>
 4003e38:	a829883a 	mov	r20,r21
 4003e3c:	0007883a 	mov	r3,zero
 4003e40:	0009883a 	mov	r4,zero
 4003e44:	18803fcc 	andi	r2,r3,255
 4003e48:	100695fa 	slli	r3,r2,23
 4003e4c:	a0803fcc 	andi	r2,r20,255
 4003e50:	100a97fa 	slli	r5,r2,31
 4003e54:	00802034 	movhi	r2,128
 4003e58:	10bfffc4 	addi	r2,r2,-1
 4003e5c:	2084703a 	and	r2,r4,r2
 4003e60:	10c4b03a 	or	r2,r2,r3
 4003e64:	1144b03a 	or	r2,r2,r5
 4003e68:	dfc00a17 	ldw	ra,40(sp)
 4003e6c:	df000917 	ldw	fp,36(sp)
 4003e70:	ddc00817 	ldw	r23,32(sp)
 4003e74:	dd800717 	ldw	r22,28(sp)
 4003e78:	dd400617 	ldw	r21,24(sp)
 4003e7c:	dd000517 	ldw	r20,20(sp)
 4003e80:	dcc00417 	ldw	r19,16(sp)
 4003e84:	dc800317 	ldw	r18,12(sp)
 4003e88:	dc400217 	ldw	r17,8(sp)
 4003e8c:	dc000117 	ldw	r16,4(sp)
 4003e90:	dec00b04 	addi	sp,sp,44
 4003e94:	f800283a 	ret
 4003e98:	90000d1e 	bne	r18,zero,4003ed0 <__mulsf3+0x1d8>
 4003e9c:	04400104 	movi	r17,4
 4003ea0:	05c00044 	movi	r23,1
 4003ea4:	003faf06 	br	4003d64 <__ram_exceptions_end+0xfbfe3b1c>
 4003ea8:	9806c03a 	cmpne	r3,r19,zero
 4003eac:	18c00084 	addi	r3,r3,2
 4003eb0:	003fba06 	br	4003d9c <__ram_exceptions_end+0xfbfe3b54>
 4003eb4:	9800141e 	bne	r19,zero,4003f08 <__mulsf3+0x210>
 4003eb8:	00c00044 	movi	r3,1
 4003ebc:	003fb706 	br	4003d9c <__ram_exceptions_end+0xfbfe3b54>
 4003ec0:	a829883a 	mov	r20,r21
 4003ec4:	00ffffc4 	movi	r3,-1
 4003ec8:	0009883a 	mov	r4,zero
 4003ecc:	003fdd06 	br	4003e44 <__ram_exceptions_end+0xfbfe3bfc>
 4003ed0:	9009883a 	mov	r4,r18
 4003ed4:	d9400015 	stw	r5,0(sp)
 4003ed8:	4006f800 	call	4006f80 <__clzsi2>
 4003edc:	10fffec4 	addi	r3,r2,-5
 4003ee0:	10801d84 	addi	r2,r2,118
 4003ee4:	90e4983a 	sll	r18,r18,r3
 4003ee8:	00a1c83a 	sub	r16,zero,r2
 4003eec:	0023883a 	mov	r17,zero
 4003ef0:	002f883a 	mov	r23,zero
 4003ef4:	d9400017 	ldw	r5,0(sp)
 4003ef8:	003f9a06 	br	4003d64 <__ram_exceptions_end+0xfbfe3b1c>
 4003efc:	04400304 	movi	r17,12
 4003f00:	05c000c4 	movi	r23,3
 4003f04:	003f9706 	br	4003d64 <__ram_exceptions_end+0xfbfe3b1c>
 4003f08:	9809883a 	mov	r4,r19
 4003f0c:	d9800015 	stw	r6,0(sp)
 4003f10:	4006f800 	call	4006f80 <__clzsi2>
 4003f14:	10fffec4 	addi	r3,r2,-5
 4003f18:	10801d84 	addi	r2,r2,118
 4003f1c:	98e6983a 	sll	r19,r19,r3
 4003f20:	0085c83a 	sub	r2,zero,r2
 4003f24:	0007883a 	mov	r3,zero
 4003f28:	d9800017 	ldw	r6,0(sp)
 4003f2c:	003f9b06 	br	4003d9c <__ram_exceptions_end+0xfbfe3b54>
 4003f30:	01002034 	movhi	r4,128
 4003f34:	0029883a 	mov	r20,zero
 4003f38:	213fffc4 	addi	r4,r4,-1
 4003f3c:	00ffffc4 	movi	r3,-1
 4003f40:	003fc006 	br	4003e44 <__ram_exceptions_end+0xfbfe3bfc>
 4003f44:	9027883a 	mov	r19,r18
 4003f48:	b807883a 	mov	r3,r23
 4003f4c:	003fb406 	br	4003e20 <__ram_exceptions_end+0xfbfe3bd8>
 4003f50:	9027883a 	mov	r19,r18
 4003f54:	e02b883a 	mov	r21,fp
 4003f58:	b807883a 	mov	r3,r23
 4003f5c:	003fb006 	br	4003e20 <__ram_exceptions_end+0xfbfe3bd8>
 4003f60:	9004d43a 	srli	r2,r18,16
 4003f64:	9810d43a 	srli	r8,r19,16
 4003f68:	94bfffcc 	andi	r18,r18,65535
 4003f6c:	993fffcc 	andi	r4,r19,65535
 4003f70:	910d383a 	mul	r6,r18,r4
 4003f74:	20a7383a 	mul	r19,r4,r2
 4003f78:	9225383a 	mul	r18,r18,r8
 4003f7c:	3006d43a 	srli	r3,r6,16
 4003f80:	1211383a 	mul	r8,r2,r8
 4003f84:	94e5883a 	add	r18,r18,r19
 4003f88:	1c87883a 	add	r3,r3,r18
 4003f8c:	1cc0022e 	bgeu	r3,r19,4003f98 <__mulsf3+0x2a0>
 4003f90:	00800074 	movhi	r2,1
 4003f94:	4091883a 	add	r8,r8,r2
 4003f98:	1804943a 	slli	r2,r3,16
 4003f9c:	31bfffcc 	andi	r6,r6,65535
 4003fa0:	1806d43a 	srli	r3,r3,16
 4003fa4:	1185883a 	add	r2,r2,r6
 4003fa8:	102691ba 	slli	r19,r2,6
 4003fac:	1a07883a 	add	r3,r3,r8
 4003fb0:	1004d6ba 	srli	r2,r2,26
 4003fb4:	180891ba 	slli	r4,r3,6
 4003fb8:	9826c03a 	cmpne	r19,r19,zero
 4003fbc:	9884b03a 	or	r2,r19,r2
 4003fc0:	1126b03a 	or	r19,r2,r4
 4003fc4:	9882002c 	andhi	r2,r19,2048
 4003fc8:	10000426 	beq	r2,zero,4003fdc <__mulsf3+0x2e4>
 4003fcc:	9804d07a 	srli	r2,r19,1
 4003fd0:	9900004c 	andi	r4,r19,1
 4003fd4:	3821883a 	mov	r16,r7
 4003fd8:	1126b03a 	or	r19,r2,r4
 4003fdc:	80c01fc4 	addi	r3,r16,127
 4003fe0:	00c0210e 	bge	zero,r3,4004068 <__mulsf3+0x370>
 4003fe4:	988001cc 	andi	r2,r19,7
 4003fe8:	10000426 	beq	r2,zero,4003ffc <__mulsf3+0x304>
 4003fec:	988003cc 	andi	r2,r19,15
 4003ff0:	01000104 	movi	r4,4
 4003ff4:	11000126 	beq	r2,r4,4003ffc <__mulsf3+0x304>
 4003ff8:	9927883a 	add	r19,r19,r4
 4003ffc:	9882002c 	andhi	r2,r19,2048
 4004000:	10000426 	beq	r2,zero,4004014 <__mulsf3+0x31c>
 4004004:	00be0034 	movhi	r2,63488
 4004008:	10bfffc4 	addi	r2,r2,-1
 400400c:	80c02004 	addi	r3,r16,128
 4004010:	98a6703a 	and	r19,r19,r2
 4004014:	00803f84 	movi	r2,254
 4004018:	10ffa916 	blt	r2,r3,4003ec0 <__ram_exceptions_end+0xfbfe3c78>
 400401c:	980891ba 	slli	r4,r19,6
 4004020:	a829883a 	mov	r20,r21
 4004024:	2008d27a 	srli	r4,r4,9
 4004028:	003f8606 	br	4003e44 <__ram_exceptions_end+0xfbfe3bfc>
 400402c:	9080102c 	andhi	r2,r18,64
 4004030:	10000826 	beq	r2,zero,4004054 <__mulsf3+0x35c>
 4004034:	9880102c 	andhi	r2,r19,64
 4004038:	1000061e 	bne	r2,zero,4004054 <__mulsf3+0x35c>
 400403c:	00802034 	movhi	r2,128
 4004040:	99001034 	orhi	r4,r19,64
 4004044:	10bfffc4 	addi	r2,r2,-1
 4004048:	b029883a 	mov	r20,r22
 400404c:	2088703a 	and	r4,r4,r2
 4004050:	003fba06 	br	4003f3c <__ram_exceptions_end+0xfbfe3cf4>
 4004054:	00802034 	movhi	r2,128
 4004058:	91001034 	orhi	r4,r18,64
 400405c:	10bfffc4 	addi	r2,r2,-1
 4004060:	2088703a 	and	r4,r4,r2
 4004064:	003fb506 	br	4003f3c <__ram_exceptions_end+0xfbfe3cf4>
 4004068:	00800044 	movi	r2,1
 400406c:	10c7c83a 	sub	r3,r2,r3
 4004070:	008006c4 	movi	r2,27
 4004074:	10ff7016 	blt	r2,r3,4003e38 <__ram_exceptions_end+0xfbfe3bf0>
 4004078:	00800804 	movi	r2,32
 400407c:	10c5c83a 	sub	r2,r2,r3
 4004080:	9884983a 	sll	r2,r19,r2
 4004084:	98c6d83a 	srl	r3,r19,r3
 4004088:	1004c03a 	cmpne	r2,r2,zero
 400408c:	1884b03a 	or	r2,r3,r2
 4004090:	10c001cc 	andi	r3,r2,7
 4004094:	18000426 	beq	r3,zero,40040a8 <__mulsf3+0x3b0>
 4004098:	10c003cc 	andi	r3,r2,15
 400409c:	01000104 	movi	r4,4
 40040a0:	19000126 	beq	r3,r4,40040a8 <__mulsf3+0x3b0>
 40040a4:	1105883a 	add	r2,r2,r4
 40040a8:	10c1002c 	andhi	r3,r2,1024
 40040ac:	18000626 	beq	r3,zero,40040c8 <__mulsf3+0x3d0>
 40040b0:	a829883a 	mov	r20,r21
 40040b4:	00c00044 	movi	r3,1
 40040b8:	0009883a 	mov	r4,zero
 40040bc:	003f6106 	br	4003e44 <__ram_exceptions_end+0xfbfe3bfc>
 40040c0:	3821883a 	mov	r16,r7
 40040c4:	003fc506 	br	4003fdc <__ram_exceptions_end+0xfbfe3d94>
 40040c8:	100491ba 	slli	r2,r2,6
 40040cc:	a829883a 	mov	r20,r21
 40040d0:	0007883a 	mov	r3,zero
 40040d4:	1008d27a 	srli	r4,r2,9
 40040d8:	003f5a06 	br	4003e44 <__ram_exceptions_end+0xfbfe3bfc>
 40040dc:	00802034 	movhi	r2,128
 40040e0:	99001034 	orhi	r4,r19,64
 40040e4:	10bfffc4 	addi	r2,r2,-1
 40040e8:	a829883a 	mov	r20,r21
 40040ec:	2088703a 	and	r4,r4,r2
 40040f0:	003f9206 	br	4003f3c <__ram_exceptions_end+0xfbfe3cf4>

040040f4 <__subsf3>:
 40040f4:	defffc04 	addi	sp,sp,-16
 40040f8:	280cd5fa 	srli	r6,r5,23
 40040fc:	dc000015 	stw	r16,0(sp)
 4004100:	01c02034 	movhi	r7,128
 4004104:	2020d5fa 	srli	r16,r4,23
 4004108:	39ffffc4 	addi	r7,r7,-1
 400410c:	3906703a 	and	r3,r7,r4
 4004110:	dc400115 	stw	r17,4(sp)
 4004114:	394e703a 	and	r7,r7,r5
 4004118:	2022d7fa 	srli	r17,r4,31
 400411c:	dfc00315 	stw	ra,12(sp)
 4004120:	dc800215 	stw	r18,8(sp)
 4004124:	31803fcc 	andi	r6,r6,255
 4004128:	01003fc4 	movi	r4,255
 400412c:	84003fcc 	andi	r16,r16,255
 4004130:	180690fa 	slli	r3,r3,3
 4004134:	2804d7fa 	srli	r2,r5,31
 4004138:	380e90fa 	slli	r7,r7,3
 400413c:	31006d26 	beq	r6,r4,40042f4 <__subsf3+0x200>
 4004140:	1080005c 	xori	r2,r2,1
 4004144:	8189c83a 	sub	r4,r16,r6
 4004148:	14404f26 	beq	r2,r17,4004288 <__subsf3+0x194>
 400414c:	0100770e 	bge	zero,r4,400432c <__subsf3+0x238>
 4004150:	30001e1e 	bne	r6,zero,40041cc <__subsf3+0xd8>
 4004154:	38006a1e 	bne	r7,zero,4004300 <__subsf3+0x20c>
 4004158:	188001cc 	andi	r2,r3,7
 400415c:	10000426 	beq	r2,zero,4004170 <__subsf3+0x7c>
 4004160:	188003cc 	andi	r2,r3,15
 4004164:	01000104 	movi	r4,4
 4004168:	11000126 	beq	r2,r4,4004170 <__subsf3+0x7c>
 400416c:	1907883a 	add	r3,r3,r4
 4004170:	1881002c 	andhi	r2,r3,1024
 4004174:	10003926 	beq	r2,zero,400425c <__subsf3+0x168>
 4004178:	84000044 	addi	r16,r16,1
 400417c:	00803fc4 	movi	r2,255
 4004180:	80807526 	beq	r16,r2,4004358 <__subsf3+0x264>
 4004184:	180691ba 	slli	r3,r3,6
 4004188:	8880004c 	andi	r2,r17,1
 400418c:	180ad27a 	srli	r5,r3,9
 4004190:	84003fcc 	andi	r16,r16,255
 4004194:	800695fa 	slli	r3,r16,23
 4004198:	10803fcc 	andi	r2,r2,255
 400419c:	01002034 	movhi	r4,128
 40041a0:	213fffc4 	addi	r4,r4,-1
 40041a4:	100497fa 	slli	r2,r2,31
 40041a8:	2920703a 	and	r16,r5,r4
 40041ac:	80e0b03a 	or	r16,r16,r3
 40041b0:	8084b03a 	or	r2,r16,r2
 40041b4:	dfc00317 	ldw	ra,12(sp)
 40041b8:	dc800217 	ldw	r18,8(sp)
 40041bc:	dc400117 	ldw	r17,4(sp)
 40041c0:	dc000017 	ldw	r16,0(sp)
 40041c4:	dec00404 	addi	sp,sp,16
 40041c8:	f800283a 	ret
 40041cc:	00803fc4 	movi	r2,255
 40041d0:	80bfe126 	beq	r16,r2,4004158 <__ram_exceptions_end+0xfbfe3f10>
 40041d4:	39c10034 	orhi	r7,r7,1024
 40041d8:	008006c4 	movi	r2,27
 40041dc:	11007416 	blt	r2,r4,40043b0 <__subsf3+0x2bc>
 40041e0:	00800804 	movi	r2,32
 40041e4:	1105c83a 	sub	r2,r2,r4
 40041e8:	3884983a 	sll	r2,r7,r2
 40041ec:	390ed83a 	srl	r7,r7,r4
 40041f0:	1008c03a 	cmpne	r4,r2,zero
 40041f4:	390eb03a 	or	r7,r7,r4
 40041f8:	19c7c83a 	sub	r3,r3,r7
 40041fc:	1881002c 	andhi	r2,r3,1024
 4004200:	10001426 	beq	r2,zero,4004254 <__subsf3+0x160>
 4004204:	04810034 	movhi	r18,1024
 4004208:	94bfffc4 	addi	r18,r18,-1
 400420c:	1ca4703a 	and	r18,r3,r18
 4004210:	9009883a 	mov	r4,r18
 4004214:	4006f800 	call	4006f80 <__clzsi2>
 4004218:	10bffec4 	addi	r2,r2,-5
 400421c:	90a4983a 	sll	r18,r18,r2
 4004220:	14005116 	blt	r2,r16,4004368 <__subsf3+0x274>
 4004224:	1405c83a 	sub	r2,r2,r16
 4004228:	10c00044 	addi	r3,r2,1
 400422c:	00800804 	movi	r2,32
 4004230:	10c5c83a 	sub	r2,r2,r3
 4004234:	9084983a 	sll	r2,r18,r2
 4004238:	90e4d83a 	srl	r18,r18,r3
 400423c:	0021883a 	mov	r16,zero
 4004240:	1006c03a 	cmpne	r3,r2,zero
 4004244:	90c6b03a 	or	r3,r18,r3
 4004248:	003fc306 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 400424c:	2000e026 	beq	r4,zero,40045d0 <__subsf3+0x4dc>
 4004250:	2007883a 	mov	r3,r4
 4004254:	188001cc 	andi	r2,r3,7
 4004258:	103fc11e 	bne	r2,zero,4004160 <__ram_exceptions_end+0xfbfe3f18>
 400425c:	180ad0fa 	srli	r5,r3,3
 4004260:	00c03fc4 	movi	r3,255
 4004264:	8880004c 	andi	r2,r17,1
 4004268:	80c0031e 	bne	r16,r3,4004278 <__subsf3+0x184>
 400426c:	28006d26 	beq	r5,zero,4004424 <__subsf3+0x330>
 4004270:	29401034 	orhi	r5,r5,64
 4004274:	043fffc4 	movi	r16,-1
 4004278:	00c02034 	movhi	r3,128
 400427c:	18ffffc4 	addi	r3,r3,-1
 4004280:	28ca703a 	and	r5,r5,r3
 4004284:	003fc206 	br	4004190 <__ram_exceptions_end+0xfbfe3f48>
 4004288:	01003c0e 	bge	zero,r4,400437c <__subsf3+0x288>
 400428c:	30002126 	beq	r6,zero,4004314 <__subsf3+0x220>
 4004290:	01403fc4 	movi	r5,255
 4004294:	817fb026 	beq	r16,r5,4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004298:	39c10034 	orhi	r7,r7,1024
 400429c:	014006c4 	movi	r5,27
 40042a0:	29007416 	blt	r5,r4,4004474 <__subsf3+0x380>
 40042a4:	01400804 	movi	r5,32
 40042a8:	290bc83a 	sub	r5,r5,r4
 40042ac:	394a983a 	sll	r5,r7,r5
 40042b0:	390ed83a 	srl	r7,r7,r4
 40042b4:	2808c03a 	cmpne	r4,r5,zero
 40042b8:	390eb03a 	or	r7,r7,r4
 40042bc:	19c7883a 	add	r3,r3,r7
 40042c0:	1901002c 	andhi	r4,r3,1024
 40042c4:	20003826 	beq	r4,zero,40043a8 <__subsf3+0x2b4>
 40042c8:	84000044 	addi	r16,r16,1
 40042cc:	01003fc4 	movi	r4,255
 40042d0:	81005426 	beq	r16,r4,4004424 <__subsf3+0x330>
 40042d4:	1023883a 	mov	r17,r2
 40042d8:	00bf0034 	movhi	r2,64512
 40042dc:	10bfffc4 	addi	r2,r2,-1
 40042e0:	1900004c 	andi	r4,r3,1
 40042e4:	1886703a 	and	r3,r3,r2
 40042e8:	1806d07a 	srli	r3,r3,1
 40042ec:	1906b03a 	or	r3,r3,r4
 40042f0:	003f9906 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 40042f4:	383f9226 	beq	r7,zero,4004140 <__ram_exceptions_end+0xfbfe3ef8>
 40042f8:	10803fcc 	andi	r2,r2,255
 40042fc:	003f9106 	br	4004144 <__ram_exceptions_end+0xfbfe3efc>
 4004300:	213fffc4 	addi	r4,r4,-1
 4004304:	203fbc26 	beq	r4,zero,40041f8 <__ram_exceptions_end+0xfbfe3fb0>
 4004308:	00803fc4 	movi	r2,255
 400430c:	80bfb21e 	bne	r16,r2,40041d8 <__ram_exceptions_end+0xfbfe3f90>
 4004310:	003f9106 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004314:	383f9026 	beq	r7,zero,4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004318:	213fffc4 	addi	r4,r4,-1
 400431c:	203fe726 	beq	r4,zero,40042bc <__ram_exceptions_end+0xfbfe4074>
 4004320:	01403fc4 	movi	r5,255
 4004324:	817fdd1e 	bne	r16,r5,400429c <__ram_exceptions_end+0xfbfe4054>
 4004328:	003f8b06 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 400432c:	2000221e 	bne	r4,zero,40043b8 <__subsf3+0x2c4>
 4004330:	81000044 	addi	r4,r16,1
 4004334:	21003fcc 	andi	r4,r4,255
 4004338:	01400044 	movi	r5,1
 400433c:	2900470e 	bge	r5,r4,400445c <__subsf3+0x368>
 4004340:	19e5c83a 	sub	r18,r3,r7
 4004344:	9141002c 	andhi	r5,r18,1024
 4004348:	28002d26 	beq	r5,zero,4004400 <__subsf3+0x30c>
 400434c:	38e5c83a 	sub	r18,r7,r3
 4004350:	1023883a 	mov	r17,r2
 4004354:	003fae06 	br	4004210 <__ram_exceptions_end+0xfbfe3fc8>
 4004358:	8880004c 	andi	r2,r17,1
 400435c:	043fffc4 	movi	r16,-1
 4004360:	000b883a 	mov	r5,zero
 4004364:	003f8a06 	br	4004190 <__ram_exceptions_end+0xfbfe3f48>
 4004368:	00ff0034 	movhi	r3,64512
 400436c:	18ffffc4 	addi	r3,r3,-1
 4004370:	80a1c83a 	sub	r16,r16,r2
 4004374:	90c6703a 	and	r3,r18,r3
 4004378:	003f7706 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 400437c:	2000431e 	bne	r4,zero,400448c <__subsf3+0x398>
 4004380:	81000044 	addi	r4,r16,1
 4004384:	21803fcc 	andi	r6,r4,255
 4004388:	01400044 	movi	r5,1
 400438c:	2980280e 	bge	r5,r6,4004430 <__subsf3+0x33c>
 4004390:	01403fc4 	movi	r5,255
 4004394:	21402326 	beq	r4,r5,4004424 <__subsf3+0x330>
 4004398:	19c7883a 	add	r3,r3,r7
 400439c:	1806d07a 	srli	r3,r3,1
 40043a0:	2021883a 	mov	r16,r4
 40043a4:	003f6c06 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 40043a8:	1023883a 	mov	r17,r2
 40043ac:	003fa906 	br	4004254 <__ram_exceptions_end+0xfbfe400c>
 40043b0:	01c00044 	movi	r7,1
 40043b4:	003f9006 	br	40041f8 <__ram_exceptions_end+0xfbfe3fb0>
 40043b8:	8000151e 	bne	r16,zero,4004410 <__subsf3+0x31c>
 40043bc:	18002f26 	beq	r3,zero,400447c <__subsf3+0x388>
 40043c0:	0108303a 	nor	r4,zero,r4
 40043c4:	20000a26 	beq	r4,zero,40043f0 <__subsf3+0x2fc>
 40043c8:	01403fc4 	movi	r5,255
 40043cc:	31402b26 	beq	r6,r5,400447c <__subsf3+0x388>
 40043d0:	014006c4 	movi	r5,27
 40043d4:	29006e16 	blt	r5,r4,4004590 <__subsf3+0x49c>
 40043d8:	01400804 	movi	r5,32
 40043dc:	290bc83a 	sub	r5,r5,r4
 40043e0:	194a983a 	sll	r5,r3,r5
 40043e4:	1908d83a 	srl	r4,r3,r4
 40043e8:	2806c03a 	cmpne	r3,r5,zero
 40043ec:	20c6b03a 	or	r3,r4,r3
 40043f0:	38c7c83a 	sub	r3,r7,r3
 40043f4:	3021883a 	mov	r16,r6
 40043f8:	1023883a 	mov	r17,r2
 40043fc:	003f7f06 	br	40041fc <__ram_exceptions_end+0xfbfe3fb4>
 4004400:	903f831e 	bne	r18,zero,4004210 <__ram_exceptions_end+0xfbfe3fc8>
 4004404:	0005883a 	mov	r2,zero
 4004408:	0021883a 	mov	r16,zero
 400440c:	003f9a06 	br	4004278 <__ram_exceptions_end+0xfbfe4030>
 4004410:	01403fc4 	movi	r5,255
 4004414:	31401926 	beq	r6,r5,400447c <__subsf3+0x388>
 4004418:	0109c83a 	sub	r4,zero,r4
 400441c:	18c10034 	orhi	r3,r3,1024
 4004420:	003feb06 	br	40043d0 <__ram_exceptions_end+0xfbfe4188>
 4004424:	043fffc4 	movi	r16,-1
 4004428:	000b883a 	mov	r5,zero
 400442c:	003f5806 	br	4004190 <__ram_exceptions_end+0xfbfe3f48>
 4004430:	8000481e 	bne	r16,zero,4004554 <__subsf3+0x460>
 4004434:	18006226 	beq	r3,zero,40045c0 <__subsf3+0x4cc>
 4004438:	383f4726 	beq	r7,zero,4004158 <__ram_exceptions_end+0xfbfe3f10>
 400443c:	19c7883a 	add	r3,r3,r7
 4004440:	1881002c 	andhi	r2,r3,1024
 4004444:	103f8326 	beq	r2,zero,4004254 <__ram_exceptions_end+0xfbfe400c>
 4004448:	00bf0034 	movhi	r2,64512
 400444c:	10bfffc4 	addi	r2,r2,-1
 4004450:	2821883a 	mov	r16,r5
 4004454:	1886703a 	and	r3,r3,r2
 4004458:	003f3f06 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 400445c:	80001c1e 	bne	r16,zero,40044d0 <__subsf3+0x3dc>
 4004460:	1800261e 	bne	r3,zero,40044fc <__subsf3+0x408>
 4004464:	38004c26 	beq	r7,zero,4004598 <__subsf3+0x4a4>
 4004468:	3807883a 	mov	r3,r7
 400446c:	1023883a 	mov	r17,r2
 4004470:	003f3906 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004474:	01c00044 	movi	r7,1
 4004478:	003f9006 	br	40042bc <__ram_exceptions_end+0xfbfe4074>
 400447c:	3807883a 	mov	r3,r7
 4004480:	3021883a 	mov	r16,r6
 4004484:	1023883a 	mov	r17,r2
 4004488:	003f3306 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 400448c:	8000161e 	bne	r16,zero,40044e8 <__subsf3+0x3f4>
 4004490:	18002d26 	beq	r3,zero,4004548 <__subsf3+0x454>
 4004494:	0108303a 	nor	r4,zero,r4
 4004498:	20000a26 	beq	r4,zero,40044c4 <__subsf3+0x3d0>
 400449c:	01403fc4 	movi	r5,255
 40044a0:	31402926 	beq	r6,r5,4004548 <__subsf3+0x454>
 40044a4:	014006c4 	movi	r5,27
 40044a8:	29004716 	blt	r5,r4,40045c8 <__subsf3+0x4d4>
 40044ac:	01400804 	movi	r5,32
 40044b0:	290bc83a 	sub	r5,r5,r4
 40044b4:	194a983a 	sll	r5,r3,r5
 40044b8:	1908d83a 	srl	r4,r3,r4
 40044bc:	2806c03a 	cmpne	r3,r5,zero
 40044c0:	20c6b03a 	or	r3,r4,r3
 40044c4:	19c7883a 	add	r3,r3,r7
 40044c8:	3021883a 	mov	r16,r6
 40044cc:	003f7c06 	br	40042c0 <__ram_exceptions_end+0xfbfe4078>
 40044d0:	1800111e 	bne	r3,zero,4004518 <__subsf3+0x424>
 40044d4:	38003326 	beq	r7,zero,40045a4 <__subsf3+0x4b0>
 40044d8:	3807883a 	mov	r3,r7
 40044dc:	1023883a 	mov	r17,r2
 40044e0:	04003fc4 	movi	r16,255
 40044e4:	003f1c06 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 40044e8:	01403fc4 	movi	r5,255
 40044ec:	31401626 	beq	r6,r5,4004548 <__subsf3+0x454>
 40044f0:	0109c83a 	sub	r4,zero,r4
 40044f4:	18c10034 	orhi	r3,r3,1024
 40044f8:	003fea06 	br	40044a4 <__ram_exceptions_end+0xfbfe425c>
 40044fc:	383f1626 	beq	r7,zero,4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004500:	19c9c83a 	sub	r4,r3,r7
 4004504:	2141002c 	andhi	r5,r4,1024
 4004508:	283f5026 	beq	r5,zero,400424c <__ram_exceptions_end+0xfbfe4004>
 400450c:	38c7c83a 	sub	r3,r7,r3
 4004510:	1023883a 	mov	r17,r2
 4004514:	003f1006 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004518:	38001b26 	beq	r7,zero,4004588 <__subsf3+0x494>
 400451c:	1806d0fa 	srli	r3,r3,3
 4004520:	1900102c 	andhi	r4,r3,64
 4004524:	20000526 	beq	r4,zero,400453c <__subsf3+0x448>
 4004528:	380ed0fa 	srli	r7,r7,3
 400452c:	3900102c 	andhi	r4,r7,64
 4004530:	2000021e 	bne	r4,zero,400453c <__subsf3+0x448>
 4004534:	3807883a 	mov	r3,r7
 4004538:	1023883a 	mov	r17,r2
 400453c:	180690fa 	slli	r3,r3,3
 4004540:	04003fc4 	movi	r16,255
 4004544:	003f0406 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004548:	3807883a 	mov	r3,r7
 400454c:	3021883a 	mov	r16,r6
 4004550:	003f0106 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004554:	18001726 	beq	r3,zero,40045b4 <__subsf3+0x4c0>
 4004558:	38000b26 	beq	r7,zero,4004588 <__subsf3+0x494>
 400455c:	1806d0fa 	srli	r3,r3,3
 4004560:	1900102c 	andhi	r4,r3,64
 4004564:	20000426 	beq	r4,zero,4004578 <__subsf3+0x484>
 4004568:	380ed0fa 	srli	r7,r7,3
 400456c:	3900102c 	andhi	r4,r7,64
 4004570:	2000011e 	bne	r4,zero,4004578 <__subsf3+0x484>
 4004574:	3807883a 	mov	r3,r7
 4004578:	180690fa 	slli	r3,r3,3
 400457c:	1023883a 	mov	r17,r2
 4004580:	04003fc4 	movi	r16,255
 4004584:	003ef406 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004588:	04003fc4 	movi	r16,255
 400458c:	003ef206 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 4004590:	00c00044 	movi	r3,1
 4004594:	003f9606 	br	40043f0 <__ram_exceptions_end+0xfbfe41a8>
 4004598:	000b883a 	mov	r5,zero
 400459c:	0005883a 	mov	r2,zero
 40045a0:	003f3506 	br	4004278 <__ram_exceptions_end+0xfbfe4030>
 40045a4:	01402034 	movhi	r5,128
 40045a8:	297fffc4 	addi	r5,r5,-1
 40045ac:	0005883a 	mov	r2,zero
 40045b0:	003f2f06 	br	4004270 <__ram_exceptions_end+0xfbfe4028>
 40045b4:	3807883a 	mov	r3,r7
 40045b8:	04003fc4 	movi	r16,255
 40045bc:	003ee606 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 40045c0:	3807883a 	mov	r3,r7
 40045c4:	003ee406 	br	4004158 <__ram_exceptions_end+0xfbfe3f10>
 40045c8:	00c00044 	movi	r3,1
 40045cc:	003fbd06 	br	40044c4 <__ram_exceptions_end+0xfbfe427c>
 40045d0:	0005883a 	mov	r2,zero
 40045d4:	003f2806 	br	4004278 <__ram_exceptions_end+0xfbfe4030>

040045d8 <__fixsfsi>:
 40045d8:	200ad5fa 	srli	r5,r4,23
 40045dc:	00c02034 	movhi	r3,128
 40045e0:	18ffffc4 	addi	r3,r3,-1
 40045e4:	29403fcc 	andi	r5,r5,255
 40045e8:	00801f84 	movi	r2,126
 40045ec:	1906703a 	and	r3,r3,r4
 40045f0:	2008d7fa 	srli	r4,r4,31
 40045f4:	11400e0e 	bge	r2,r5,4004630 <__fixsfsi+0x58>
 40045f8:	00802744 	movi	r2,157
 40045fc:	11400816 	blt	r2,r5,4004620 <__fixsfsi+0x48>
 4004600:	00802544 	movi	r2,149
 4004604:	18c02034 	orhi	r3,r3,128
 4004608:	11400b0e 	bge	r2,r5,4004638 <__fixsfsi+0x60>
 400460c:	28bfda84 	addi	r2,r5,-150
 4004610:	1884983a 	sll	r2,r3,r2
 4004614:	20000726 	beq	r4,zero,4004634 <__fixsfsi+0x5c>
 4004618:	0085c83a 	sub	r2,zero,r2
 400461c:	f800283a 	ret
 4004620:	00a00034 	movhi	r2,32768
 4004624:	10bfffc4 	addi	r2,r2,-1
 4004628:	2085883a 	add	r2,r4,r2
 400462c:	f800283a 	ret
 4004630:	0005883a 	mov	r2,zero
 4004634:	f800283a 	ret
 4004638:	00802584 	movi	r2,150
 400463c:	1145c83a 	sub	r2,r2,r5
 4004640:	1884d83a 	srl	r2,r3,r2
 4004644:	003ff306 	br	4004614 <__ram_exceptions_end+0xfbfe43cc>

04004648 <__floatsisf>:
 4004648:	defffd04 	addi	sp,sp,-12
 400464c:	dfc00215 	stw	ra,8(sp)
 4004650:	dc400115 	stw	r17,4(sp)
 4004654:	dc000015 	stw	r16,0(sp)
 4004658:	20003526 	beq	r4,zero,4004730 <__floatsisf+0xe8>
 400465c:	2021883a 	mov	r16,r4
 4004660:	2022d7fa 	srli	r17,r4,31
 4004664:	20003616 	blt	r4,zero,4004740 <__floatsisf+0xf8>
 4004668:	8009883a 	mov	r4,r16
 400466c:	4006f800 	call	4006f80 <__clzsi2>
 4004670:	00c02784 	movi	r3,158
 4004674:	1887c83a 	sub	r3,r3,r2
 4004678:	01002584 	movi	r4,150
 400467c:	20c01416 	blt	r4,r3,40046d0 <__floatsisf+0x88>
 4004680:	20c9c83a 	sub	r4,r4,r3
 4004684:	8120983a 	sll	r16,r16,r4
 4004688:	00802034 	movhi	r2,128
 400468c:	10bfffc4 	addi	r2,r2,-1
 4004690:	8809883a 	mov	r4,r17
 4004694:	80a0703a 	and	r16,r16,r2
 4004698:	18803fcc 	andi	r2,r3,255
 400469c:	100695fa 	slli	r3,r2,23
 40046a0:	20803fcc 	andi	r2,r4,255
 40046a4:	100897fa 	slli	r4,r2,31
 40046a8:	00802034 	movhi	r2,128
 40046ac:	10bfffc4 	addi	r2,r2,-1
 40046b0:	8084703a 	and	r2,r16,r2
 40046b4:	10c4b03a 	or	r2,r2,r3
 40046b8:	1104b03a 	or	r2,r2,r4
 40046bc:	dfc00217 	ldw	ra,8(sp)
 40046c0:	dc400117 	ldw	r17,4(sp)
 40046c4:	dc000017 	ldw	r16,0(sp)
 40046c8:	dec00304 	addi	sp,sp,12
 40046cc:	f800283a 	ret
 40046d0:	01002644 	movi	r4,153
 40046d4:	20c01c16 	blt	r4,r3,4004748 <__floatsisf+0x100>
 40046d8:	20c9c83a 	sub	r4,r4,r3
 40046dc:	8120983a 	sll	r16,r16,r4
 40046e0:	013f0034 	movhi	r4,64512
 40046e4:	213fffc4 	addi	r4,r4,-1
 40046e8:	814001cc 	andi	r5,r16,7
 40046ec:	8108703a 	and	r4,r16,r4
 40046f0:	28000426 	beq	r5,zero,4004704 <__floatsisf+0xbc>
 40046f4:	840003cc 	andi	r16,r16,15
 40046f8:	01400104 	movi	r5,4
 40046fc:	81400126 	beq	r16,r5,4004704 <__floatsisf+0xbc>
 4004700:	2149883a 	add	r4,r4,r5
 4004704:	2141002c 	andhi	r5,r4,1024
 4004708:	28000526 	beq	r5,zero,4004720 <__floatsisf+0xd8>
 400470c:	00c027c4 	movi	r3,159
 4004710:	1887c83a 	sub	r3,r3,r2
 4004714:	00bf0034 	movhi	r2,64512
 4004718:	10bfffc4 	addi	r2,r2,-1
 400471c:	2088703a 	and	r4,r4,r2
 4004720:	202091ba 	slli	r16,r4,6
 4004724:	8809883a 	mov	r4,r17
 4004728:	8020d27a 	srli	r16,r16,9
 400472c:	003fda06 	br	4004698 <__ram_exceptions_end+0xfbfe4450>
 4004730:	0009883a 	mov	r4,zero
 4004734:	0007883a 	mov	r3,zero
 4004738:	0021883a 	mov	r16,zero
 400473c:	003fd606 	br	4004698 <__ram_exceptions_end+0xfbfe4450>
 4004740:	0121c83a 	sub	r16,zero,r4
 4004744:	003fc806 	br	4004668 <__ram_exceptions_end+0xfbfe4420>
 4004748:	01002e44 	movi	r4,185
 400474c:	20c9c83a 	sub	r4,r4,r3
 4004750:	01400144 	movi	r5,5
 4004754:	8108983a 	sll	r4,r16,r4
 4004758:	288bc83a 	sub	r5,r5,r2
 400475c:	8160d83a 	srl	r16,r16,r5
 4004760:	2008c03a 	cmpne	r4,r4,zero
 4004764:	8120b03a 	or	r16,r16,r4
 4004768:	003fdd06 	br	40046e0 <__ram_exceptions_end+0xfbfe4498>

0400476c <__adddf3>:
 400476c:	02c00434 	movhi	r11,16
 4004770:	5affffc4 	addi	r11,r11,-1
 4004774:	2806d7fa 	srli	r3,r5,31
 4004778:	2ad4703a 	and	r10,r5,r11
 400477c:	3ad2703a 	and	r9,r7,r11
 4004780:	3804d53a 	srli	r2,r7,20
 4004784:	3018d77a 	srli	r12,r6,29
 4004788:	280ad53a 	srli	r5,r5,20
 400478c:	501490fa 	slli	r10,r10,3
 4004790:	2010d77a 	srli	r8,r4,29
 4004794:	481290fa 	slli	r9,r9,3
 4004798:	380ed7fa 	srli	r7,r7,31
 400479c:	defffb04 	addi	sp,sp,-20
 40047a0:	dc800215 	stw	r18,8(sp)
 40047a4:	dc400115 	stw	r17,4(sp)
 40047a8:	dc000015 	stw	r16,0(sp)
 40047ac:	dfc00415 	stw	ra,16(sp)
 40047b0:	dcc00315 	stw	r19,12(sp)
 40047b4:	1c803fcc 	andi	r18,r3,255
 40047b8:	2c01ffcc 	andi	r16,r5,2047
 40047bc:	5210b03a 	or	r8,r10,r8
 40047c0:	202290fa 	slli	r17,r4,3
 40047c4:	1081ffcc 	andi	r2,r2,2047
 40047c8:	4b12b03a 	or	r9,r9,r12
 40047cc:	300c90fa 	slli	r6,r6,3
 40047d0:	91c07526 	beq	r18,r7,40049a8 <__adddf3+0x23c>
 40047d4:	8087c83a 	sub	r3,r16,r2
 40047d8:	00c0ab0e 	bge	zero,r3,4004a88 <__adddf3+0x31c>
 40047dc:	10002a1e 	bne	r2,zero,4004888 <__adddf3+0x11c>
 40047e0:	4984b03a 	or	r2,r9,r6
 40047e4:	1000961e 	bne	r2,zero,4004a40 <__adddf3+0x2d4>
 40047e8:	888001cc 	andi	r2,r17,7
 40047ec:	10000726 	beq	r2,zero,400480c <__adddf3+0xa0>
 40047f0:	888003cc 	andi	r2,r17,15
 40047f4:	00c00104 	movi	r3,4
 40047f8:	10c00426 	beq	r2,r3,400480c <__adddf3+0xa0>
 40047fc:	88c7883a 	add	r3,r17,r3
 4004800:	1c63803a 	cmpltu	r17,r3,r17
 4004804:	4451883a 	add	r8,r8,r17
 4004808:	1823883a 	mov	r17,r3
 400480c:	4080202c 	andhi	r2,r8,128
 4004810:	10005926 	beq	r2,zero,4004978 <__adddf3+0x20c>
 4004814:	84000044 	addi	r16,r16,1
 4004818:	0081ffc4 	movi	r2,2047
 400481c:	8080ba26 	beq	r16,r2,4004b08 <__adddf3+0x39c>
 4004820:	00bfe034 	movhi	r2,65408
 4004824:	10bfffc4 	addi	r2,r2,-1
 4004828:	4090703a 	and	r8,r8,r2
 400482c:	4004977a 	slli	r2,r8,29
 4004830:	4010927a 	slli	r8,r8,9
 4004834:	8822d0fa 	srli	r17,r17,3
 4004838:	8401ffcc 	andi	r16,r16,2047
 400483c:	4010d33a 	srli	r8,r8,12
 4004840:	9007883a 	mov	r3,r18
 4004844:	1444b03a 	or	r2,r2,r17
 4004848:	8401ffcc 	andi	r16,r16,2047
 400484c:	8020953a 	slli	r16,r16,20
 4004850:	18c03fcc 	andi	r3,r3,255
 4004854:	01000434 	movhi	r4,16
 4004858:	213fffc4 	addi	r4,r4,-1
 400485c:	180697fa 	slli	r3,r3,31
 4004860:	4110703a 	and	r8,r8,r4
 4004864:	4410b03a 	or	r8,r8,r16
 4004868:	40c6b03a 	or	r3,r8,r3
 400486c:	dfc00417 	ldw	ra,16(sp)
 4004870:	dcc00317 	ldw	r19,12(sp)
 4004874:	dc800217 	ldw	r18,8(sp)
 4004878:	dc400117 	ldw	r17,4(sp)
 400487c:	dc000017 	ldw	r16,0(sp)
 4004880:	dec00504 	addi	sp,sp,20
 4004884:	f800283a 	ret
 4004888:	0081ffc4 	movi	r2,2047
 400488c:	80bfd626 	beq	r16,r2,40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004890:	4a402034 	orhi	r9,r9,128
 4004894:	00800e04 	movi	r2,56
 4004898:	10c09f16 	blt	r2,r3,4004b18 <__adddf3+0x3ac>
 400489c:	008007c4 	movi	r2,31
 40048a0:	10c0c216 	blt	r2,r3,4004bac <__adddf3+0x440>
 40048a4:	00800804 	movi	r2,32
 40048a8:	10c5c83a 	sub	r2,r2,r3
 40048ac:	488a983a 	sll	r5,r9,r2
 40048b0:	30c8d83a 	srl	r4,r6,r3
 40048b4:	3084983a 	sll	r2,r6,r2
 40048b8:	48c6d83a 	srl	r3,r9,r3
 40048bc:	290cb03a 	or	r6,r5,r4
 40048c0:	1004c03a 	cmpne	r2,r2,zero
 40048c4:	308cb03a 	or	r6,r6,r2
 40048c8:	898dc83a 	sub	r6,r17,r6
 40048cc:	89a3803a 	cmpltu	r17,r17,r6
 40048d0:	40d1c83a 	sub	r8,r8,r3
 40048d4:	4451c83a 	sub	r8,r8,r17
 40048d8:	3023883a 	mov	r17,r6
 40048dc:	4080202c 	andhi	r2,r8,128
 40048e0:	10002326 	beq	r2,zero,4004970 <__adddf3+0x204>
 40048e4:	04c02034 	movhi	r19,128
 40048e8:	9cffffc4 	addi	r19,r19,-1
 40048ec:	44e6703a 	and	r19,r8,r19
 40048f0:	98007626 	beq	r19,zero,4004acc <__adddf3+0x360>
 40048f4:	9809883a 	mov	r4,r19
 40048f8:	4006f800 	call	4006f80 <__clzsi2>
 40048fc:	10fffe04 	addi	r3,r2,-8
 4004900:	010007c4 	movi	r4,31
 4004904:	20c07716 	blt	r4,r3,4004ae4 <__adddf3+0x378>
 4004908:	00800804 	movi	r2,32
 400490c:	10c5c83a 	sub	r2,r2,r3
 4004910:	8884d83a 	srl	r2,r17,r2
 4004914:	98d0983a 	sll	r8,r19,r3
 4004918:	88e2983a 	sll	r17,r17,r3
 400491c:	1204b03a 	or	r2,r2,r8
 4004920:	1c007416 	blt	r3,r16,4004af4 <__adddf3+0x388>
 4004924:	1c21c83a 	sub	r16,r3,r16
 4004928:	82000044 	addi	r8,r16,1
 400492c:	00c007c4 	movi	r3,31
 4004930:	1a009116 	blt	r3,r8,4004b78 <__adddf3+0x40c>
 4004934:	00c00804 	movi	r3,32
 4004938:	1a07c83a 	sub	r3,r3,r8
 400493c:	8a08d83a 	srl	r4,r17,r8
 4004940:	88e2983a 	sll	r17,r17,r3
 4004944:	10c6983a 	sll	r3,r2,r3
 4004948:	1210d83a 	srl	r8,r2,r8
 400494c:	8804c03a 	cmpne	r2,r17,zero
 4004950:	1906b03a 	or	r3,r3,r4
 4004954:	18a2b03a 	or	r17,r3,r2
 4004958:	0021883a 	mov	r16,zero
 400495c:	003fa206 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004960:	1890b03a 	or	r8,r3,r2
 4004964:	40017d26 	beq	r8,zero,4004f5c <__adddf3+0x7f0>
 4004968:	1011883a 	mov	r8,r2
 400496c:	1823883a 	mov	r17,r3
 4004970:	888001cc 	andi	r2,r17,7
 4004974:	103f9e1e 	bne	r2,zero,40047f0 <__ram_exceptions_end+0xfbfe45a8>
 4004978:	4004977a 	slli	r2,r8,29
 400497c:	8822d0fa 	srli	r17,r17,3
 4004980:	4010d0fa 	srli	r8,r8,3
 4004984:	9007883a 	mov	r3,r18
 4004988:	1444b03a 	or	r2,r2,r17
 400498c:	0101ffc4 	movi	r4,2047
 4004990:	81002426 	beq	r16,r4,4004a24 <__adddf3+0x2b8>
 4004994:	8120703a 	and	r16,r16,r4
 4004998:	01000434 	movhi	r4,16
 400499c:	213fffc4 	addi	r4,r4,-1
 40049a0:	4110703a 	and	r8,r8,r4
 40049a4:	003fa806 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 40049a8:	8089c83a 	sub	r4,r16,r2
 40049ac:	01005e0e 	bge	zero,r4,4004b28 <__adddf3+0x3bc>
 40049b0:	10002b26 	beq	r2,zero,4004a60 <__adddf3+0x2f4>
 40049b4:	0081ffc4 	movi	r2,2047
 40049b8:	80bf8b26 	beq	r16,r2,40047e8 <__ram_exceptions_end+0xfbfe45a0>
 40049bc:	4a402034 	orhi	r9,r9,128
 40049c0:	00800e04 	movi	r2,56
 40049c4:	1100a40e 	bge	r2,r4,4004c58 <__adddf3+0x4ec>
 40049c8:	498cb03a 	or	r6,r9,r6
 40049cc:	300ac03a 	cmpne	r5,r6,zero
 40049d0:	0013883a 	mov	r9,zero
 40049d4:	2c4b883a 	add	r5,r5,r17
 40049d8:	2c63803a 	cmpltu	r17,r5,r17
 40049dc:	4a11883a 	add	r8,r9,r8
 40049e0:	8a11883a 	add	r8,r17,r8
 40049e4:	2823883a 	mov	r17,r5
 40049e8:	4080202c 	andhi	r2,r8,128
 40049ec:	103fe026 	beq	r2,zero,4004970 <__ram_exceptions_end+0xfbfe4728>
 40049f0:	84000044 	addi	r16,r16,1
 40049f4:	0081ffc4 	movi	r2,2047
 40049f8:	8080d226 	beq	r16,r2,4004d44 <__adddf3+0x5d8>
 40049fc:	00bfe034 	movhi	r2,65408
 4004a00:	10bfffc4 	addi	r2,r2,-1
 4004a04:	4090703a 	and	r8,r8,r2
 4004a08:	880ad07a 	srli	r5,r17,1
 4004a0c:	400897fa 	slli	r4,r8,31
 4004a10:	88c0004c 	andi	r3,r17,1
 4004a14:	28e2b03a 	or	r17,r5,r3
 4004a18:	4010d07a 	srli	r8,r8,1
 4004a1c:	2462b03a 	or	r17,r4,r17
 4004a20:	003f7106 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004a24:	4088b03a 	or	r4,r8,r2
 4004a28:	20014526 	beq	r4,zero,4004f40 <__adddf3+0x7d4>
 4004a2c:	01000434 	movhi	r4,16
 4004a30:	42000234 	orhi	r8,r8,8
 4004a34:	213fffc4 	addi	r4,r4,-1
 4004a38:	4110703a 	and	r8,r8,r4
 4004a3c:	003f8206 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 4004a40:	18ffffc4 	addi	r3,r3,-1
 4004a44:	1800491e 	bne	r3,zero,4004b6c <__adddf3+0x400>
 4004a48:	898bc83a 	sub	r5,r17,r6
 4004a4c:	8963803a 	cmpltu	r17,r17,r5
 4004a50:	4251c83a 	sub	r8,r8,r9
 4004a54:	4451c83a 	sub	r8,r8,r17
 4004a58:	2823883a 	mov	r17,r5
 4004a5c:	003f9f06 	br	40048dc <__ram_exceptions_end+0xfbfe4694>
 4004a60:	4984b03a 	or	r2,r9,r6
 4004a64:	103f6026 	beq	r2,zero,40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004a68:	213fffc4 	addi	r4,r4,-1
 4004a6c:	2000931e 	bne	r4,zero,4004cbc <__adddf3+0x550>
 4004a70:	898d883a 	add	r6,r17,r6
 4004a74:	3463803a 	cmpltu	r17,r6,r17
 4004a78:	4251883a 	add	r8,r8,r9
 4004a7c:	8a11883a 	add	r8,r17,r8
 4004a80:	3023883a 	mov	r17,r6
 4004a84:	003fd806 	br	40049e8 <__ram_exceptions_end+0xfbfe47a0>
 4004a88:	1800541e 	bne	r3,zero,4004bdc <__adddf3+0x470>
 4004a8c:	80800044 	addi	r2,r16,1
 4004a90:	1081ffcc 	andi	r2,r2,2047
 4004a94:	00c00044 	movi	r3,1
 4004a98:	1880a00e 	bge	r3,r2,4004d1c <__adddf3+0x5b0>
 4004a9c:	8989c83a 	sub	r4,r17,r6
 4004aa0:	8905803a 	cmpltu	r2,r17,r4
 4004aa4:	4267c83a 	sub	r19,r8,r9
 4004aa8:	98a7c83a 	sub	r19,r19,r2
 4004aac:	9880202c 	andhi	r2,r19,128
 4004ab0:	10006326 	beq	r2,zero,4004c40 <__adddf3+0x4d4>
 4004ab4:	3463c83a 	sub	r17,r6,r17
 4004ab8:	4a07c83a 	sub	r3,r9,r8
 4004abc:	344d803a 	cmpltu	r6,r6,r17
 4004ac0:	19a7c83a 	sub	r19,r3,r6
 4004ac4:	3825883a 	mov	r18,r7
 4004ac8:	983f8a1e 	bne	r19,zero,40048f4 <__ram_exceptions_end+0xfbfe46ac>
 4004acc:	8809883a 	mov	r4,r17
 4004ad0:	4006f800 	call	4006f80 <__clzsi2>
 4004ad4:	10800804 	addi	r2,r2,32
 4004ad8:	10fffe04 	addi	r3,r2,-8
 4004adc:	010007c4 	movi	r4,31
 4004ae0:	20ff890e 	bge	r4,r3,4004908 <__ram_exceptions_end+0xfbfe46c0>
 4004ae4:	10bff604 	addi	r2,r2,-40
 4004ae8:	8884983a 	sll	r2,r17,r2
 4004aec:	0023883a 	mov	r17,zero
 4004af0:	1c3f8c0e 	bge	r3,r16,4004924 <__ram_exceptions_end+0xfbfe46dc>
 4004af4:	023fe034 	movhi	r8,65408
 4004af8:	423fffc4 	addi	r8,r8,-1
 4004afc:	80e1c83a 	sub	r16,r16,r3
 4004b00:	1210703a 	and	r8,r2,r8
 4004b04:	003f3806 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004b08:	9007883a 	mov	r3,r18
 4004b0c:	0011883a 	mov	r8,zero
 4004b10:	0005883a 	mov	r2,zero
 4004b14:	003f4c06 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 4004b18:	498cb03a 	or	r6,r9,r6
 4004b1c:	300cc03a 	cmpne	r6,r6,zero
 4004b20:	0007883a 	mov	r3,zero
 4004b24:	003f6806 	br	40048c8 <__ram_exceptions_end+0xfbfe4680>
 4004b28:	20009c1e 	bne	r4,zero,4004d9c <__adddf3+0x630>
 4004b2c:	80800044 	addi	r2,r16,1
 4004b30:	1141ffcc 	andi	r5,r2,2047
 4004b34:	01000044 	movi	r4,1
 4004b38:	2140670e 	bge	r4,r5,4004cd8 <__adddf3+0x56c>
 4004b3c:	0101ffc4 	movi	r4,2047
 4004b40:	11007f26 	beq	r2,r4,4004d40 <__adddf3+0x5d4>
 4004b44:	898d883a 	add	r6,r17,r6
 4004b48:	4247883a 	add	r3,r8,r9
 4004b4c:	3451803a 	cmpltu	r8,r6,r17
 4004b50:	40d1883a 	add	r8,r8,r3
 4004b54:	402297fa 	slli	r17,r8,31
 4004b58:	300cd07a 	srli	r6,r6,1
 4004b5c:	4010d07a 	srli	r8,r8,1
 4004b60:	1021883a 	mov	r16,r2
 4004b64:	89a2b03a 	or	r17,r17,r6
 4004b68:	003f1f06 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004b6c:	0081ffc4 	movi	r2,2047
 4004b70:	80bf481e 	bne	r16,r2,4004894 <__ram_exceptions_end+0xfbfe464c>
 4004b74:	003f1c06 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004b78:	843ff844 	addi	r16,r16,-31
 4004b7c:	01000804 	movi	r4,32
 4004b80:	1406d83a 	srl	r3,r2,r16
 4004b84:	41005026 	beq	r8,r4,4004cc8 <__adddf3+0x55c>
 4004b88:	01001004 	movi	r4,64
 4004b8c:	2211c83a 	sub	r8,r4,r8
 4004b90:	1204983a 	sll	r2,r2,r8
 4004b94:	88a2b03a 	or	r17,r17,r2
 4004b98:	8822c03a 	cmpne	r17,r17,zero
 4004b9c:	1c62b03a 	or	r17,r3,r17
 4004ba0:	0011883a 	mov	r8,zero
 4004ba4:	0021883a 	mov	r16,zero
 4004ba8:	003f7106 	br	4004970 <__ram_exceptions_end+0xfbfe4728>
 4004bac:	193ff804 	addi	r4,r3,-32
 4004bb0:	00800804 	movi	r2,32
 4004bb4:	4908d83a 	srl	r4,r9,r4
 4004bb8:	18804526 	beq	r3,r2,4004cd0 <__adddf3+0x564>
 4004bbc:	00801004 	movi	r2,64
 4004bc0:	10c5c83a 	sub	r2,r2,r3
 4004bc4:	4886983a 	sll	r3,r9,r2
 4004bc8:	198cb03a 	or	r6,r3,r6
 4004bcc:	300cc03a 	cmpne	r6,r6,zero
 4004bd0:	218cb03a 	or	r6,r4,r6
 4004bd4:	0007883a 	mov	r3,zero
 4004bd8:	003f3b06 	br	40048c8 <__ram_exceptions_end+0xfbfe4680>
 4004bdc:	80002a26 	beq	r16,zero,4004c88 <__adddf3+0x51c>
 4004be0:	0101ffc4 	movi	r4,2047
 4004be4:	11006826 	beq	r2,r4,4004d88 <__adddf3+0x61c>
 4004be8:	00c7c83a 	sub	r3,zero,r3
 4004bec:	42002034 	orhi	r8,r8,128
 4004bf0:	01000e04 	movi	r4,56
 4004bf4:	20c07c16 	blt	r4,r3,4004de8 <__adddf3+0x67c>
 4004bf8:	010007c4 	movi	r4,31
 4004bfc:	20c0da16 	blt	r4,r3,4004f68 <__adddf3+0x7fc>
 4004c00:	01000804 	movi	r4,32
 4004c04:	20c9c83a 	sub	r4,r4,r3
 4004c08:	4114983a 	sll	r10,r8,r4
 4004c0c:	88cad83a 	srl	r5,r17,r3
 4004c10:	8908983a 	sll	r4,r17,r4
 4004c14:	40c6d83a 	srl	r3,r8,r3
 4004c18:	5162b03a 	or	r17,r10,r5
 4004c1c:	2008c03a 	cmpne	r4,r4,zero
 4004c20:	8922b03a 	or	r17,r17,r4
 4004c24:	3463c83a 	sub	r17,r6,r17
 4004c28:	48c7c83a 	sub	r3,r9,r3
 4004c2c:	344d803a 	cmpltu	r6,r6,r17
 4004c30:	1991c83a 	sub	r8,r3,r6
 4004c34:	1021883a 	mov	r16,r2
 4004c38:	3825883a 	mov	r18,r7
 4004c3c:	003f2706 	br	40048dc <__ram_exceptions_end+0xfbfe4694>
 4004c40:	24d0b03a 	or	r8,r4,r19
 4004c44:	40001b1e 	bne	r8,zero,4004cb4 <__adddf3+0x548>
 4004c48:	0005883a 	mov	r2,zero
 4004c4c:	0007883a 	mov	r3,zero
 4004c50:	0021883a 	mov	r16,zero
 4004c54:	003f4d06 	br	400498c <__ram_exceptions_end+0xfbfe4744>
 4004c58:	008007c4 	movi	r2,31
 4004c5c:	11003c16 	blt	r2,r4,4004d50 <__adddf3+0x5e4>
 4004c60:	00800804 	movi	r2,32
 4004c64:	1105c83a 	sub	r2,r2,r4
 4004c68:	488e983a 	sll	r7,r9,r2
 4004c6c:	310ad83a 	srl	r5,r6,r4
 4004c70:	3084983a 	sll	r2,r6,r2
 4004c74:	4912d83a 	srl	r9,r9,r4
 4004c78:	394ab03a 	or	r5,r7,r5
 4004c7c:	1004c03a 	cmpne	r2,r2,zero
 4004c80:	288ab03a 	or	r5,r5,r2
 4004c84:	003f5306 	br	40049d4 <__ram_exceptions_end+0xfbfe478c>
 4004c88:	4448b03a 	or	r4,r8,r17
 4004c8c:	20003e26 	beq	r4,zero,4004d88 <__adddf3+0x61c>
 4004c90:	00c6303a 	nor	r3,zero,r3
 4004c94:	18003a1e 	bne	r3,zero,4004d80 <__adddf3+0x614>
 4004c98:	3463c83a 	sub	r17,r6,r17
 4004c9c:	4a07c83a 	sub	r3,r9,r8
 4004ca0:	344d803a 	cmpltu	r6,r6,r17
 4004ca4:	1991c83a 	sub	r8,r3,r6
 4004ca8:	1021883a 	mov	r16,r2
 4004cac:	3825883a 	mov	r18,r7
 4004cb0:	003f0a06 	br	40048dc <__ram_exceptions_end+0xfbfe4694>
 4004cb4:	2023883a 	mov	r17,r4
 4004cb8:	003f0d06 	br	40048f0 <__ram_exceptions_end+0xfbfe46a8>
 4004cbc:	0081ffc4 	movi	r2,2047
 4004cc0:	80bf3f1e 	bne	r16,r2,40049c0 <__ram_exceptions_end+0xfbfe4778>
 4004cc4:	003ec806 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004cc8:	0005883a 	mov	r2,zero
 4004ccc:	003fb106 	br	4004b94 <__ram_exceptions_end+0xfbfe494c>
 4004cd0:	0007883a 	mov	r3,zero
 4004cd4:	003fbc06 	br	4004bc8 <__ram_exceptions_end+0xfbfe4980>
 4004cd8:	4444b03a 	or	r2,r8,r17
 4004cdc:	8000871e 	bne	r16,zero,4004efc <__adddf3+0x790>
 4004ce0:	1000ba26 	beq	r2,zero,4004fcc <__adddf3+0x860>
 4004ce4:	4984b03a 	or	r2,r9,r6
 4004ce8:	103ebf26 	beq	r2,zero,40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004cec:	8985883a 	add	r2,r17,r6
 4004cf0:	4247883a 	add	r3,r8,r9
 4004cf4:	1451803a 	cmpltu	r8,r2,r17
 4004cf8:	40d1883a 	add	r8,r8,r3
 4004cfc:	40c0202c 	andhi	r3,r8,128
 4004d00:	1023883a 	mov	r17,r2
 4004d04:	183f1a26 	beq	r3,zero,4004970 <__ram_exceptions_end+0xfbfe4728>
 4004d08:	00bfe034 	movhi	r2,65408
 4004d0c:	10bfffc4 	addi	r2,r2,-1
 4004d10:	2021883a 	mov	r16,r4
 4004d14:	4090703a 	and	r8,r8,r2
 4004d18:	003eb306 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004d1c:	4444b03a 	or	r2,r8,r17
 4004d20:	8000291e 	bne	r16,zero,4004dc8 <__adddf3+0x65c>
 4004d24:	10004b1e 	bne	r2,zero,4004e54 <__adddf3+0x6e8>
 4004d28:	4990b03a 	or	r8,r9,r6
 4004d2c:	40008b26 	beq	r8,zero,4004f5c <__adddf3+0x7f0>
 4004d30:	4811883a 	mov	r8,r9
 4004d34:	3023883a 	mov	r17,r6
 4004d38:	3825883a 	mov	r18,r7
 4004d3c:	003eaa06 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004d40:	1021883a 	mov	r16,r2
 4004d44:	0011883a 	mov	r8,zero
 4004d48:	0005883a 	mov	r2,zero
 4004d4c:	003f0f06 	br	400498c <__ram_exceptions_end+0xfbfe4744>
 4004d50:	217ff804 	addi	r5,r4,-32
 4004d54:	00800804 	movi	r2,32
 4004d58:	494ad83a 	srl	r5,r9,r5
 4004d5c:	20807d26 	beq	r4,r2,4004f54 <__adddf3+0x7e8>
 4004d60:	00801004 	movi	r2,64
 4004d64:	1109c83a 	sub	r4,r2,r4
 4004d68:	4912983a 	sll	r9,r9,r4
 4004d6c:	498cb03a 	or	r6,r9,r6
 4004d70:	300cc03a 	cmpne	r6,r6,zero
 4004d74:	298ab03a 	or	r5,r5,r6
 4004d78:	0013883a 	mov	r9,zero
 4004d7c:	003f1506 	br	40049d4 <__ram_exceptions_end+0xfbfe478c>
 4004d80:	0101ffc4 	movi	r4,2047
 4004d84:	113f9a1e 	bne	r2,r4,4004bf0 <__ram_exceptions_end+0xfbfe49a8>
 4004d88:	4811883a 	mov	r8,r9
 4004d8c:	3023883a 	mov	r17,r6
 4004d90:	1021883a 	mov	r16,r2
 4004d94:	3825883a 	mov	r18,r7
 4004d98:	003e9306 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004d9c:	8000161e 	bne	r16,zero,4004df8 <__adddf3+0x68c>
 4004da0:	444ab03a 	or	r5,r8,r17
 4004da4:	28005126 	beq	r5,zero,4004eec <__adddf3+0x780>
 4004da8:	0108303a 	nor	r4,zero,r4
 4004dac:	20004d1e 	bne	r4,zero,4004ee4 <__adddf3+0x778>
 4004db0:	89a3883a 	add	r17,r17,r6
 4004db4:	4253883a 	add	r9,r8,r9
 4004db8:	898d803a 	cmpltu	r6,r17,r6
 4004dbc:	3251883a 	add	r8,r6,r9
 4004dc0:	1021883a 	mov	r16,r2
 4004dc4:	003f0806 	br	40049e8 <__ram_exceptions_end+0xfbfe47a0>
 4004dc8:	1000301e 	bne	r2,zero,4004e8c <__adddf3+0x720>
 4004dcc:	4984b03a 	or	r2,r9,r6
 4004dd0:	10007126 	beq	r2,zero,4004f98 <__adddf3+0x82c>
 4004dd4:	4811883a 	mov	r8,r9
 4004dd8:	3023883a 	mov	r17,r6
 4004ddc:	3825883a 	mov	r18,r7
 4004de0:	0401ffc4 	movi	r16,2047
 4004de4:	003e8006 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004de8:	4462b03a 	or	r17,r8,r17
 4004dec:	8822c03a 	cmpne	r17,r17,zero
 4004df0:	0007883a 	mov	r3,zero
 4004df4:	003f8b06 	br	4004c24 <__ram_exceptions_end+0xfbfe49dc>
 4004df8:	0141ffc4 	movi	r5,2047
 4004dfc:	11403b26 	beq	r2,r5,4004eec <__adddf3+0x780>
 4004e00:	0109c83a 	sub	r4,zero,r4
 4004e04:	42002034 	orhi	r8,r8,128
 4004e08:	01400e04 	movi	r5,56
 4004e0c:	29006716 	blt	r5,r4,4004fac <__adddf3+0x840>
 4004e10:	014007c4 	movi	r5,31
 4004e14:	29007016 	blt	r5,r4,4004fd8 <__adddf3+0x86c>
 4004e18:	01400804 	movi	r5,32
 4004e1c:	290bc83a 	sub	r5,r5,r4
 4004e20:	4154983a 	sll	r10,r8,r5
 4004e24:	890ed83a 	srl	r7,r17,r4
 4004e28:	894a983a 	sll	r5,r17,r5
 4004e2c:	4108d83a 	srl	r4,r8,r4
 4004e30:	51e2b03a 	or	r17,r10,r7
 4004e34:	280ac03a 	cmpne	r5,r5,zero
 4004e38:	8962b03a 	or	r17,r17,r5
 4004e3c:	89a3883a 	add	r17,r17,r6
 4004e40:	2253883a 	add	r9,r4,r9
 4004e44:	898d803a 	cmpltu	r6,r17,r6
 4004e48:	3251883a 	add	r8,r6,r9
 4004e4c:	1021883a 	mov	r16,r2
 4004e50:	003ee506 	br	40049e8 <__ram_exceptions_end+0xfbfe47a0>
 4004e54:	4984b03a 	or	r2,r9,r6
 4004e58:	103e6326 	beq	r2,zero,40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004e5c:	8987c83a 	sub	r3,r17,r6
 4004e60:	88c9803a 	cmpltu	r4,r17,r3
 4004e64:	4245c83a 	sub	r2,r8,r9
 4004e68:	1105c83a 	sub	r2,r2,r4
 4004e6c:	1100202c 	andhi	r4,r2,128
 4004e70:	203ebb26 	beq	r4,zero,4004960 <__ram_exceptions_end+0xfbfe4718>
 4004e74:	3463c83a 	sub	r17,r6,r17
 4004e78:	4a07c83a 	sub	r3,r9,r8
 4004e7c:	344d803a 	cmpltu	r6,r6,r17
 4004e80:	1991c83a 	sub	r8,r3,r6
 4004e84:	3825883a 	mov	r18,r7
 4004e88:	003e5706 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004e8c:	4984b03a 	or	r2,r9,r6
 4004e90:	10002e26 	beq	r2,zero,4004f4c <__adddf3+0x7e0>
 4004e94:	4004d0fa 	srli	r2,r8,3
 4004e98:	8822d0fa 	srli	r17,r17,3
 4004e9c:	4010977a 	slli	r8,r8,29
 4004ea0:	10c0022c 	andhi	r3,r2,8
 4004ea4:	4462b03a 	or	r17,r8,r17
 4004ea8:	18000826 	beq	r3,zero,4004ecc <__adddf3+0x760>
 4004eac:	4808d0fa 	srli	r4,r9,3
 4004eb0:	20c0022c 	andhi	r3,r4,8
 4004eb4:	1800051e 	bne	r3,zero,4004ecc <__adddf3+0x760>
 4004eb8:	300cd0fa 	srli	r6,r6,3
 4004ebc:	4806977a 	slli	r3,r9,29
 4004ec0:	2005883a 	mov	r2,r4
 4004ec4:	3825883a 	mov	r18,r7
 4004ec8:	19a2b03a 	or	r17,r3,r6
 4004ecc:	8810d77a 	srli	r8,r17,29
 4004ed0:	100490fa 	slli	r2,r2,3
 4004ed4:	882290fa 	slli	r17,r17,3
 4004ed8:	0401ffc4 	movi	r16,2047
 4004edc:	4090b03a 	or	r8,r8,r2
 4004ee0:	003e4106 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004ee4:	0141ffc4 	movi	r5,2047
 4004ee8:	117fc71e 	bne	r2,r5,4004e08 <__ram_exceptions_end+0xfbfe4bc0>
 4004eec:	4811883a 	mov	r8,r9
 4004ef0:	3023883a 	mov	r17,r6
 4004ef4:	1021883a 	mov	r16,r2
 4004ef8:	003e3b06 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004efc:	10002f26 	beq	r2,zero,4004fbc <__adddf3+0x850>
 4004f00:	4984b03a 	or	r2,r9,r6
 4004f04:	10001126 	beq	r2,zero,4004f4c <__adddf3+0x7e0>
 4004f08:	4004d0fa 	srli	r2,r8,3
 4004f0c:	8822d0fa 	srli	r17,r17,3
 4004f10:	4010977a 	slli	r8,r8,29
 4004f14:	10c0022c 	andhi	r3,r2,8
 4004f18:	4462b03a 	or	r17,r8,r17
 4004f1c:	183feb26 	beq	r3,zero,4004ecc <__ram_exceptions_end+0xfbfe4c84>
 4004f20:	4808d0fa 	srli	r4,r9,3
 4004f24:	20c0022c 	andhi	r3,r4,8
 4004f28:	183fe81e 	bne	r3,zero,4004ecc <__ram_exceptions_end+0xfbfe4c84>
 4004f2c:	300cd0fa 	srli	r6,r6,3
 4004f30:	4806977a 	slli	r3,r9,29
 4004f34:	2005883a 	mov	r2,r4
 4004f38:	19a2b03a 	or	r17,r3,r6
 4004f3c:	003fe306 	br	4004ecc <__ram_exceptions_end+0xfbfe4c84>
 4004f40:	0011883a 	mov	r8,zero
 4004f44:	0005883a 	mov	r2,zero
 4004f48:	003e3f06 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 4004f4c:	0401ffc4 	movi	r16,2047
 4004f50:	003e2506 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004f54:	0013883a 	mov	r9,zero
 4004f58:	003f8406 	br	4004d6c <__ram_exceptions_end+0xfbfe4b24>
 4004f5c:	0005883a 	mov	r2,zero
 4004f60:	0007883a 	mov	r3,zero
 4004f64:	003e8906 	br	400498c <__ram_exceptions_end+0xfbfe4744>
 4004f68:	197ff804 	addi	r5,r3,-32
 4004f6c:	01000804 	movi	r4,32
 4004f70:	414ad83a 	srl	r5,r8,r5
 4004f74:	19002426 	beq	r3,r4,4005008 <__adddf3+0x89c>
 4004f78:	01001004 	movi	r4,64
 4004f7c:	20c7c83a 	sub	r3,r4,r3
 4004f80:	40c6983a 	sll	r3,r8,r3
 4004f84:	1c46b03a 	or	r3,r3,r17
 4004f88:	1806c03a 	cmpne	r3,r3,zero
 4004f8c:	28e2b03a 	or	r17,r5,r3
 4004f90:	0007883a 	mov	r3,zero
 4004f94:	003f2306 	br	4004c24 <__ram_exceptions_end+0xfbfe49dc>
 4004f98:	0007883a 	mov	r3,zero
 4004f9c:	5811883a 	mov	r8,r11
 4004fa0:	00bfffc4 	movi	r2,-1
 4004fa4:	0401ffc4 	movi	r16,2047
 4004fa8:	003e7806 	br	400498c <__ram_exceptions_end+0xfbfe4744>
 4004fac:	4462b03a 	or	r17,r8,r17
 4004fb0:	8822c03a 	cmpne	r17,r17,zero
 4004fb4:	0009883a 	mov	r4,zero
 4004fb8:	003fa006 	br	4004e3c <__ram_exceptions_end+0xfbfe4bf4>
 4004fbc:	4811883a 	mov	r8,r9
 4004fc0:	3023883a 	mov	r17,r6
 4004fc4:	0401ffc4 	movi	r16,2047
 4004fc8:	003e0706 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004fcc:	4811883a 	mov	r8,r9
 4004fd0:	3023883a 	mov	r17,r6
 4004fd4:	003e0406 	br	40047e8 <__ram_exceptions_end+0xfbfe45a0>
 4004fd8:	21fff804 	addi	r7,r4,-32
 4004fdc:	01400804 	movi	r5,32
 4004fe0:	41ced83a 	srl	r7,r8,r7
 4004fe4:	21400a26 	beq	r4,r5,4005010 <__adddf3+0x8a4>
 4004fe8:	01401004 	movi	r5,64
 4004fec:	2909c83a 	sub	r4,r5,r4
 4004ff0:	4108983a 	sll	r4,r8,r4
 4004ff4:	2448b03a 	or	r4,r4,r17
 4004ff8:	2008c03a 	cmpne	r4,r4,zero
 4004ffc:	3922b03a 	or	r17,r7,r4
 4005000:	0009883a 	mov	r4,zero
 4005004:	003f8d06 	br	4004e3c <__ram_exceptions_end+0xfbfe4bf4>
 4005008:	0007883a 	mov	r3,zero
 400500c:	003fdd06 	br	4004f84 <__ram_exceptions_end+0xfbfe4d3c>
 4005010:	0009883a 	mov	r4,zero
 4005014:	003ff706 	br	4004ff4 <__ram_exceptions_end+0xfbfe4dac>

04005018 <__divdf3>:
 4005018:	defff204 	addi	sp,sp,-56
 400501c:	dd400915 	stw	r21,36(sp)
 4005020:	282ad53a 	srli	r21,r5,20
 4005024:	dd000815 	stw	r20,32(sp)
 4005028:	2828d7fa 	srli	r20,r5,31
 400502c:	dc000415 	stw	r16,16(sp)
 4005030:	04000434 	movhi	r16,16
 4005034:	df000c15 	stw	fp,48(sp)
 4005038:	843fffc4 	addi	r16,r16,-1
 400503c:	dfc00d15 	stw	ra,52(sp)
 4005040:	ddc00b15 	stw	r23,44(sp)
 4005044:	dd800a15 	stw	r22,40(sp)
 4005048:	dcc00715 	stw	r19,28(sp)
 400504c:	dc800615 	stw	r18,24(sp)
 4005050:	dc400515 	stw	r17,20(sp)
 4005054:	ad41ffcc 	andi	r21,r21,2047
 4005058:	2c20703a 	and	r16,r5,r16
 400505c:	a7003fcc 	andi	fp,r20,255
 4005060:	a8006126 	beq	r21,zero,40051e8 <__divdf3+0x1d0>
 4005064:	0081ffc4 	movi	r2,2047
 4005068:	2025883a 	mov	r18,r4
 400506c:	a8803726 	beq	r21,r2,400514c <__divdf3+0x134>
 4005070:	80800434 	orhi	r2,r16,16
 4005074:	100490fa 	slli	r2,r2,3
 4005078:	2020d77a 	srli	r16,r4,29
 400507c:	202490fa 	slli	r18,r4,3
 4005080:	ad7f0044 	addi	r21,r21,-1023
 4005084:	80a0b03a 	or	r16,r16,r2
 4005088:	0027883a 	mov	r19,zero
 400508c:	0013883a 	mov	r9,zero
 4005090:	3804d53a 	srli	r2,r7,20
 4005094:	382cd7fa 	srli	r22,r7,31
 4005098:	04400434 	movhi	r17,16
 400509c:	8c7fffc4 	addi	r17,r17,-1
 40050a0:	1081ffcc 	andi	r2,r2,2047
 40050a4:	3011883a 	mov	r8,r6
 40050a8:	3c62703a 	and	r17,r7,r17
 40050ac:	b5c03fcc 	andi	r23,r22,255
 40050b0:	10006c26 	beq	r2,zero,4005264 <__divdf3+0x24c>
 40050b4:	00c1ffc4 	movi	r3,2047
 40050b8:	10c06426 	beq	r2,r3,400524c <__divdf3+0x234>
 40050bc:	88c00434 	orhi	r3,r17,16
 40050c0:	180690fa 	slli	r3,r3,3
 40050c4:	3022d77a 	srli	r17,r6,29
 40050c8:	301090fa 	slli	r8,r6,3
 40050cc:	10bf0044 	addi	r2,r2,-1023
 40050d0:	88e2b03a 	or	r17,r17,r3
 40050d4:	000f883a 	mov	r7,zero
 40050d8:	a58cf03a 	xor	r6,r20,r22
 40050dc:	3cc8b03a 	or	r4,r7,r19
 40050e0:	a8abc83a 	sub	r21,r21,r2
 40050e4:	008003c4 	movi	r2,15
 40050e8:	3007883a 	mov	r3,r6
 40050ec:	34c03fcc 	andi	r19,r6,255
 40050f0:	11009036 	bltu	r2,r4,4005334 <__divdf3+0x31c>
 40050f4:	200890ba 	slli	r4,r4,2
 40050f8:	00810034 	movhi	r2,1024
 40050fc:	10944304 	addi	r2,r2,20748
 4005100:	2089883a 	add	r4,r4,r2
 4005104:	20800017 	ldw	r2,0(r4)
 4005108:	1000683a 	jmp	r2
 400510c:	04005334 	movhi	r16,332
 4005110:	04005184 	movi	r16,326
 4005114:	04005324 	muli	r16,zero,332
 4005118:	04005178 	rdprs	r16,zero,325
 400511c:	04005324 	muli	r16,zero,332
 4005120:	040052f8 	rdprs	r16,zero,331
 4005124:	04005324 	muli	r16,zero,332
 4005128:	04005178 	rdprs	r16,zero,325
 400512c:	04005184 	movi	r16,326
 4005130:	04005184 	movi	r16,326
 4005134:	040052f8 	rdprs	r16,zero,331
 4005138:	04005178 	rdprs	r16,zero,325
 400513c:	04005168 	cmpgeui	r16,zero,325
 4005140:	04005168 	cmpgeui	r16,zero,325
 4005144:	04005168 	cmpgeui	r16,zero,325
 4005148:	04005618 	cmpnei	r16,zero,344
 400514c:	2404b03a 	or	r2,r4,r16
 4005150:	1000661e 	bne	r2,zero,40052ec <__divdf3+0x2d4>
 4005154:	04c00204 	movi	r19,8
 4005158:	0021883a 	mov	r16,zero
 400515c:	0025883a 	mov	r18,zero
 4005160:	02400084 	movi	r9,2
 4005164:	003fca06 	br	4005090 <__ram_exceptions_end+0xfbfe4e48>
 4005168:	8023883a 	mov	r17,r16
 400516c:	9011883a 	mov	r8,r18
 4005170:	e02f883a 	mov	r23,fp
 4005174:	480f883a 	mov	r7,r9
 4005178:	00800084 	movi	r2,2
 400517c:	3881311e 	bne	r7,r2,4005644 <__divdf3+0x62c>
 4005180:	b827883a 	mov	r19,r23
 4005184:	98c0004c 	andi	r3,r19,1
 4005188:	0081ffc4 	movi	r2,2047
 400518c:	000b883a 	mov	r5,zero
 4005190:	0025883a 	mov	r18,zero
 4005194:	1004953a 	slli	r2,r2,20
 4005198:	18c03fcc 	andi	r3,r3,255
 400519c:	04400434 	movhi	r17,16
 40051a0:	8c7fffc4 	addi	r17,r17,-1
 40051a4:	180697fa 	slli	r3,r3,31
 40051a8:	2c4a703a 	and	r5,r5,r17
 40051ac:	288ab03a 	or	r5,r5,r2
 40051b0:	28c6b03a 	or	r3,r5,r3
 40051b4:	9005883a 	mov	r2,r18
 40051b8:	dfc00d17 	ldw	ra,52(sp)
 40051bc:	df000c17 	ldw	fp,48(sp)
 40051c0:	ddc00b17 	ldw	r23,44(sp)
 40051c4:	dd800a17 	ldw	r22,40(sp)
 40051c8:	dd400917 	ldw	r21,36(sp)
 40051cc:	dd000817 	ldw	r20,32(sp)
 40051d0:	dcc00717 	ldw	r19,28(sp)
 40051d4:	dc800617 	ldw	r18,24(sp)
 40051d8:	dc400517 	ldw	r17,20(sp)
 40051dc:	dc000417 	ldw	r16,16(sp)
 40051e0:	dec00e04 	addi	sp,sp,56
 40051e4:	f800283a 	ret
 40051e8:	2404b03a 	or	r2,r4,r16
 40051ec:	2027883a 	mov	r19,r4
 40051f0:	10003926 	beq	r2,zero,40052d8 <__divdf3+0x2c0>
 40051f4:	80012e26 	beq	r16,zero,40056b0 <__divdf3+0x698>
 40051f8:	8009883a 	mov	r4,r16
 40051fc:	d9800315 	stw	r6,12(sp)
 4005200:	d9c00215 	stw	r7,8(sp)
 4005204:	4006f800 	call	4006f80 <__clzsi2>
 4005208:	d9800317 	ldw	r6,12(sp)
 400520c:	d9c00217 	ldw	r7,8(sp)
 4005210:	113ffd44 	addi	r4,r2,-11
 4005214:	00c00704 	movi	r3,28
 4005218:	19012116 	blt	r3,r4,40056a0 <__divdf3+0x688>
 400521c:	00c00744 	movi	r3,29
 4005220:	147ffe04 	addi	r17,r2,-8
 4005224:	1907c83a 	sub	r3,r3,r4
 4005228:	8460983a 	sll	r16,r16,r17
 400522c:	98c6d83a 	srl	r3,r19,r3
 4005230:	9c64983a 	sll	r18,r19,r17
 4005234:	1c20b03a 	or	r16,r3,r16
 4005238:	1080fcc4 	addi	r2,r2,1011
 400523c:	00abc83a 	sub	r21,zero,r2
 4005240:	0027883a 	mov	r19,zero
 4005244:	0013883a 	mov	r9,zero
 4005248:	003f9106 	br	4005090 <__ram_exceptions_end+0xfbfe4e48>
 400524c:	3446b03a 	or	r3,r6,r17
 4005250:	18001f1e 	bne	r3,zero,40052d0 <__divdf3+0x2b8>
 4005254:	0023883a 	mov	r17,zero
 4005258:	0011883a 	mov	r8,zero
 400525c:	01c00084 	movi	r7,2
 4005260:	003f9d06 	br	40050d8 <__ram_exceptions_end+0xfbfe4e90>
 4005264:	3446b03a 	or	r3,r6,r17
 4005268:	18001526 	beq	r3,zero,40052c0 <__divdf3+0x2a8>
 400526c:	88011b26 	beq	r17,zero,40056dc <__divdf3+0x6c4>
 4005270:	8809883a 	mov	r4,r17
 4005274:	d9800315 	stw	r6,12(sp)
 4005278:	da400115 	stw	r9,4(sp)
 400527c:	4006f800 	call	4006f80 <__clzsi2>
 4005280:	d9800317 	ldw	r6,12(sp)
 4005284:	da400117 	ldw	r9,4(sp)
 4005288:	113ffd44 	addi	r4,r2,-11
 400528c:	00c00704 	movi	r3,28
 4005290:	19010e16 	blt	r3,r4,40056cc <__divdf3+0x6b4>
 4005294:	00c00744 	movi	r3,29
 4005298:	123ffe04 	addi	r8,r2,-8
 400529c:	1907c83a 	sub	r3,r3,r4
 40052a0:	8a22983a 	sll	r17,r17,r8
 40052a4:	30c6d83a 	srl	r3,r6,r3
 40052a8:	3210983a 	sll	r8,r6,r8
 40052ac:	1c62b03a 	or	r17,r3,r17
 40052b0:	1080fcc4 	addi	r2,r2,1011
 40052b4:	0085c83a 	sub	r2,zero,r2
 40052b8:	000f883a 	mov	r7,zero
 40052bc:	003f8606 	br	40050d8 <__ram_exceptions_end+0xfbfe4e90>
 40052c0:	0023883a 	mov	r17,zero
 40052c4:	0011883a 	mov	r8,zero
 40052c8:	01c00044 	movi	r7,1
 40052cc:	003f8206 	br	40050d8 <__ram_exceptions_end+0xfbfe4e90>
 40052d0:	01c000c4 	movi	r7,3
 40052d4:	003f8006 	br	40050d8 <__ram_exceptions_end+0xfbfe4e90>
 40052d8:	04c00104 	movi	r19,4
 40052dc:	0021883a 	mov	r16,zero
 40052e0:	0025883a 	mov	r18,zero
 40052e4:	02400044 	movi	r9,1
 40052e8:	003f6906 	br	4005090 <__ram_exceptions_end+0xfbfe4e48>
 40052ec:	04c00304 	movi	r19,12
 40052f0:	024000c4 	movi	r9,3
 40052f4:	003f6606 	br	4005090 <__ram_exceptions_end+0xfbfe4e48>
 40052f8:	01400434 	movhi	r5,16
 40052fc:	0007883a 	mov	r3,zero
 4005300:	297fffc4 	addi	r5,r5,-1
 4005304:	04bfffc4 	movi	r18,-1
 4005308:	0081ffc4 	movi	r2,2047
 400530c:	003fa106 	br	4005194 <__ram_exceptions_end+0xfbfe4f4c>
 4005310:	00c00044 	movi	r3,1
 4005314:	1887c83a 	sub	r3,r3,r2
 4005318:	01000e04 	movi	r4,56
 400531c:	20c1210e 	bge	r4,r3,40057a4 <__divdf3+0x78c>
 4005320:	98c0004c 	andi	r3,r19,1
 4005324:	0005883a 	mov	r2,zero
 4005328:	000b883a 	mov	r5,zero
 400532c:	0025883a 	mov	r18,zero
 4005330:	003f9806 	br	4005194 <__ram_exceptions_end+0xfbfe4f4c>
 4005334:	8c00fd36 	bltu	r17,r16,400572c <__divdf3+0x714>
 4005338:	8440fb26 	beq	r16,r17,4005728 <__divdf3+0x710>
 400533c:	8007883a 	mov	r3,r16
 4005340:	ad7fffc4 	addi	r21,r21,-1
 4005344:	0021883a 	mov	r16,zero
 4005348:	4004d63a 	srli	r2,r8,24
 400534c:	8822923a 	slli	r17,r17,8
 4005350:	1809883a 	mov	r4,r3
 4005354:	402c923a 	slli	r22,r8,8
 4005358:	88b8b03a 	or	fp,r17,r2
 400535c:	e028d43a 	srli	r20,fp,16
 4005360:	d8c00015 	stw	r3,0(sp)
 4005364:	e5ffffcc 	andi	r23,fp,65535
 4005368:	a00b883a 	mov	r5,r20
 400536c:	40031b00 	call	40031b0 <__udivsi3>
 4005370:	d8c00017 	ldw	r3,0(sp)
 4005374:	a00b883a 	mov	r5,r20
 4005378:	d8800315 	stw	r2,12(sp)
 400537c:	1809883a 	mov	r4,r3
 4005380:	40032140 	call	4003214 <__umodsi3>
 4005384:	d9800317 	ldw	r6,12(sp)
 4005388:	1006943a 	slli	r3,r2,16
 400538c:	9004d43a 	srli	r2,r18,16
 4005390:	b9a3383a 	mul	r17,r23,r6
 4005394:	10c4b03a 	or	r2,r2,r3
 4005398:	1440062e 	bgeu	r2,r17,40053b4 <__divdf3+0x39c>
 400539c:	1705883a 	add	r2,r2,fp
 40053a0:	30ffffc4 	addi	r3,r6,-1
 40053a4:	1700ee36 	bltu	r2,fp,4005760 <__divdf3+0x748>
 40053a8:	1440ed2e 	bgeu	r2,r17,4005760 <__divdf3+0x748>
 40053ac:	31bfff84 	addi	r6,r6,-2
 40053b0:	1705883a 	add	r2,r2,fp
 40053b4:	1463c83a 	sub	r17,r2,r17
 40053b8:	a00b883a 	mov	r5,r20
 40053bc:	8809883a 	mov	r4,r17
 40053c0:	d9800315 	stw	r6,12(sp)
 40053c4:	40031b00 	call	40031b0 <__udivsi3>
 40053c8:	a00b883a 	mov	r5,r20
 40053cc:	8809883a 	mov	r4,r17
 40053d0:	d8800215 	stw	r2,8(sp)
 40053d4:	40032140 	call	4003214 <__umodsi3>
 40053d8:	d9c00217 	ldw	r7,8(sp)
 40053dc:	1004943a 	slli	r2,r2,16
 40053e0:	94bfffcc 	andi	r18,r18,65535
 40053e4:	b9d1383a 	mul	r8,r23,r7
 40053e8:	90a4b03a 	or	r18,r18,r2
 40053ec:	d9800317 	ldw	r6,12(sp)
 40053f0:	9200062e 	bgeu	r18,r8,400540c <__divdf3+0x3f4>
 40053f4:	9725883a 	add	r18,r18,fp
 40053f8:	38bfffc4 	addi	r2,r7,-1
 40053fc:	9700d636 	bltu	r18,fp,4005758 <__divdf3+0x740>
 4005400:	9200d52e 	bgeu	r18,r8,4005758 <__divdf3+0x740>
 4005404:	39ffff84 	addi	r7,r7,-2
 4005408:	9725883a 	add	r18,r18,fp
 400540c:	3004943a 	slli	r2,r6,16
 4005410:	b012d43a 	srli	r9,r22,16
 4005414:	b1bfffcc 	andi	r6,r22,65535
 4005418:	11e2b03a 	or	r17,r2,r7
 400541c:	8806d43a 	srli	r3,r17,16
 4005420:	893fffcc 	andi	r4,r17,65535
 4005424:	218b383a 	mul	r5,r4,r6
 4005428:	30c5383a 	mul	r2,r6,r3
 400542c:	2249383a 	mul	r4,r4,r9
 4005430:	280ed43a 	srli	r7,r5,16
 4005434:	9225c83a 	sub	r18,r18,r8
 4005438:	2089883a 	add	r4,r4,r2
 400543c:	3909883a 	add	r4,r7,r4
 4005440:	1a47383a 	mul	r3,r3,r9
 4005444:	2080022e 	bgeu	r4,r2,4005450 <__divdf3+0x438>
 4005448:	00800074 	movhi	r2,1
 400544c:	1887883a 	add	r3,r3,r2
 4005450:	2004d43a 	srli	r2,r4,16
 4005454:	2008943a 	slli	r4,r4,16
 4005458:	297fffcc 	andi	r5,r5,65535
 400545c:	10c7883a 	add	r3,r2,r3
 4005460:	2149883a 	add	r4,r4,r5
 4005464:	90c0a536 	bltu	r18,r3,40056fc <__divdf3+0x6e4>
 4005468:	90c0bf26 	beq	r18,r3,4005768 <__divdf3+0x750>
 400546c:	90c7c83a 	sub	r3,r18,r3
 4005470:	810fc83a 	sub	r7,r16,r4
 4005474:	81e5803a 	cmpltu	r18,r16,r7
 4005478:	1ca5c83a 	sub	r18,r3,r18
 400547c:	e480c126 	beq	fp,r18,4005784 <__divdf3+0x76c>
 4005480:	a00b883a 	mov	r5,r20
 4005484:	9009883a 	mov	r4,r18
 4005488:	d9800315 	stw	r6,12(sp)
 400548c:	d9c00215 	stw	r7,8(sp)
 4005490:	da400115 	stw	r9,4(sp)
 4005494:	40031b00 	call	40031b0 <__udivsi3>
 4005498:	a00b883a 	mov	r5,r20
 400549c:	9009883a 	mov	r4,r18
 40054a0:	d8800015 	stw	r2,0(sp)
 40054a4:	40032140 	call	4003214 <__umodsi3>
 40054a8:	d9c00217 	ldw	r7,8(sp)
 40054ac:	da000017 	ldw	r8,0(sp)
 40054b0:	1006943a 	slli	r3,r2,16
 40054b4:	3804d43a 	srli	r2,r7,16
 40054b8:	ba21383a 	mul	r16,r23,r8
 40054bc:	d9800317 	ldw	r6,12(sp)
 40054c0:	10c4b03a 	or	r2,r2,r3
 40054c4:	da400117 	ldw	r9,4(sp)
 40054c8:	1400062e 	bgeu	r2,r16,40054e4 <__divdf3+0x4cc>
 40054cc:	1705883a 	add	r2,r2,fp
 40054d0:	40ffffc4 	addi	r3,r8,-1
 40054d4:	1700ad36 	bltu	r2,fp,400578c <__divdf3+0x774>
 40054d8:	1400ac2e 	bgeu	r2,r16,400578c <__divdf3+0x774>
 40054dc:	423fff84 	addi	r8,r8,-2
 40054e0:	1705883a 	add	r2,r2,fp
 40054e4:	1421c83a 	sub	r16,r2,r16
 40054e8:	a00b883a 	mov	r5,r20
 40054ec:	8009883a 	mov	r4,r16
 40054f0:	d9800315 	stw	r6,12(sp)
 40054f4:	d9c00215 	stw	r7,8(sp)
 40054f8:	da000015 	stw	r8,0(sp)
 40054fc:	da400115 	stw	r9,4(sp)
 4005500:	40031b00 	call	40031b0 <__udivsi3>
 4005504:	8009883a 	mov	r4,r16
 4005508:	a00b883a 	mov	r5,r20
 400550c:	1025883a 	mov	r18,r2
 4005510:	40032140 	call	4003214 <__umodsi3>
 4005514:	d9c00217 	ldw	r7,8(sp)
 4005518:	1004943a 	slli	r2,r2,16
 400551c:	bcaf383a 	mul	r23,r23,r18
 4005520:	393fffcc 	andi	r4,r7,65535
 4005524:	2088b03a 	or	r4,r4,r2
 4005528:	d9800317 	ldw	r6,12(sp)
 400552c:	da000017 	ldw	r8,0(sp)
 4005530:	da400117 	ldw	r9,4(sp)
 4005534:	25c0062e 	bgeu	r4,r23,4005550 <__divdf3+0x538>
 4005538:	2709883a 	add	r4,r4,fp
 400553c:	90bfffc4 	addi	r2,r18,-1
 4005540:	27009436 	bltu	r4,fp,4005794 <__divdf3+0x77c>
 4005544:	25c0932e 	bgeu	r4,r23,4005794 <__divdf3+0x77c>
 4005548:	94bfff84 	addi	r18,r18,-2
 400554c:	2709883a 	add	r4,r4,fp
 4005550:	4004943a 	slli	r2,r8,16
 4005554:	25efc83a 	sub	r23,r4,r23
 4005558:	1490b03a 	or	r8,r2,r18
 400555c:	4008d43a 	srli	r4,r8,16
 4005560:	40ffffcc 	andi	r3,r8,65535
 4005564:	30c5383a 	mul	r2,r6,r3
 4005568:	1a47383a 	mul	r3,r3,r9
 400556c:	310d383a 	mul	r6,r6,r4
 4005570:	100ad43a 	srli	r5,r2,16
 4005574:	4913383a 	mul	r9,r9,r4
 4005578:	1987883a 	add	r3,r3,r6
 400557c:	28c7883a 	add	r3,r5,r3
 4005580:	1980022e 	bgeu	r3,r6,400558c <__divdf3+0x574>
 4005584:	01000074 	movhi	r4,1
 4005588:	4913883a 	add	r9,r9,r4
 400558c:	1808d43a 	srli	r4,r3,16
 4005590:	1806943a 	slli	r3,r3,16
 4005594:	10bfffcc 	andi	r2,r2,65535
 4005598:	2253883a 	add	r9,r4,r9
 400559c:	1887883a 	add	r3,r3,r2
 40055a0:	ba403836 	bltu	r23,r9,4005684 <__divdf3+0x66c>
 40055a4:	ba403626 	beq	r23,r9,4005680 <__divdf3+0x668>
 40055a8:	42000054 	ori	r8,r8,1
 40055ac:	a880ffc4 	addi	r2,r21,1023
 40055b0:	00bf570e 	bge	zero,r2,4005310 <__ram_exceptions_end+0xfbfe50c8>
 40055b4:	40c001cc 	andi	r3,r8,7
 40055b8:	18000726 	beq	r3,zero,40055d8 <__divdf3+0x5c0>
 40055bc:	40c003cc 	andi	r3,r8,15
 40055c0:	01000104 	movi	r4,4
 40055c4:	19000426 	beq	r3,r4,40055d8 <__divdf3+0x5c0>
 40055c8:	4107883a 	add	r3,r8,r4
 40055cc:	1a11803a 	cmpltu	r8,r3,r8
 40055d0:	8a23883a 	add	r17,r17,r8
 40055d4:	1811883a 	mov	r8,r3
 40055d8:	88c0402c 	andhi	r3,r17,256
 40055dc:	18000426 	beq	r3,zero,40055f0 <__divdf3+0x5d8>
 40055e0:	00ffc034 	movhi	r3,65280
 40055e4:	18ffffc4 	addi	r3,r3,-1
 40055e8:	a8810004 	addi	r2,r21,1024
 40055ec:	88e2703a 	and	r17,r17,r3
 40055f0:	00c1ff84 	movi	r3,2046
 40055f4:	18bee316 	blt	r3,r2,4005184 <__ram_exceptions_end+0xfbfe4f3c>
 40055f8:	8824977a 	slli	r18,r17,29
 40055fc:	4010d0fa 	srli	r8,r8,3
 4005600:	8822927a 	slli	r17,r17,9
 4005604:	1081ffcc 	andi	r2,r2,2047
 4005608:	9224b03a 	or	r18,r18,r8
 400560c:	880ad33a 	srli	r5,r17,12
 4005610:	98c0004c 	andi	r3,r19,1
 4005614:	003edf06 	br	4005194 <__ram_exceptions_end+0xfbfe4f4c>
 4005618:	8080022c 	andhi	r2,r16,8
 400561c:	10001226 	beq	r2,zero,4005668 <__divdf3+0x650>
 4005620:	8880022c 	andhi	r2,r17,8
 4005624:	1000101e 	bne	r2,zero,4005668 <__divdf3+0x650>
 4005628:	00800434 	movhi	r2,16
 400562c:	89400234 	orhi	r5,r17,8
 4005630:	10bfffc4 	addi	r2,r2,-1
 4005634:	b007883a 	mov	r3,r22
 4005638:	288a703a 	and	r5,r5,r2
 400563c:	4025883a 	mov	r18,r8
 4005640:	003f3106 	br	4005308 <__ram_exceptions_end+0xfbfe50c0>
 4005644:	008000c4 	movi	r2,3
 4005648:	3880a626 	beq	r7,r2,40058e4 <__divdf3+0x8cc>
 400564c:	00800044 	movi	r2,1
 4005650:	3880521e 	bne	r7,r2,400579c <__divdf3+0x784>
 4005654:	b807883a 	mov	r3,r23
 4005658:	0005883a 	mov	r2,zero
 400565c:	000b883a 	mov	r5,zero
 4005660:	0025883a 	mov	r18,zero
 4005664:	003ecb06 	br	4005194 <__ram_exceptions_end+0xfbfe4f4c>
 4005668:	00800434 	movhi	r2,16
 400566c:	81400234 	orhi	r5,r16,8
 4005670:	10bfffc4 	addi	r2,r2,-1
 4005674:	a007883a 	mov	r3,r20
 4005678:	288a703a 	and	r5,r5,r2
 400567c:	003f2206 	br	4005308 <__ram_exceptions_end+0xfbfe50c0>
 4005680:	183fca26 	beq	r3,zero,40055ac <__ram_exceptions_end+0xfbfe5364>
 4005684:	e5ef883a 	add	r23,fp,r23
 4005688:	40bfffc4 	addi	r2,r8,-1
 400568c:	bf00392e 	bgeu	r23,fp,4005774 <__divdf3+0x75c>
 4005690:	1011883a 	mov	r8,r2
 4005694:	ba7fc41e 	bne	r23,r9,40055a8 <__ram_exceptions_end+0xfbfe5360>
 4005698:	b0ffc31e 	bne	r22,r3,40055a8 <__ram_exceptions_end+0xfbfe5360>
 400569c:	003fc306 	br	40055ac <__ram_exceptions_end+0xfbfe5364>
 40056a0:	143ff604 	addi	r16,r2,-40
 40056a4:	9c20983a 	sll	r16,r19,r16
 40056a8:	0025883a 	mov	r18,zero
 40056ac:	003ee206 	br	4005238 <__ram_exceptions_end+0xfbfe4ff0>
 40056b0:	d9800315 	stw	r6,12(sp)
 40056b4:	d9c00215 	stw	r7,8(sp)
 40056b8:	4006f800 	call	4006f80 <__clzsi2>
 40056bc:	10800804 	addi	r2,r2,32
 40056c0:	d9c00217 	ldw	r7,8(sp)
 40056c4:	d9800317 	ldw	r6,12(sp)
 40056c8:	003ed106 	br	4005210 <__ram_exceptions_end+0xfbfe4fc8>
 40056cc:	147ff604 	addi	r17,r2,-40
 40056d0:	3462983a 	sll	r17,r6,r17
 40056d4:	0011883a 	mov	r8,zero
 40056d8:	003ef506 	br	40052b0 <__ram_exceptions_end+0xfbfe5068>
 40056dc:	3009883a 	mov	r4,r6
 40056e0:	d9800315 	stw	r6,12(sp)
 40056e4:	da400115 	stw	r9,4(sp)
 40056e8:	4006f800 	call	4006f80 <__clzsi2>
 40056ec:	10800804 	addi	r2,r2,32
 40056f0:	da400117 	ldw	r9,4(sp)
 40056f4:	d9800317 	ldw	r6,12(sp)
 40056f8:	003ee306 	br	4005288 <__ram_exceptions_end+0xfbfe5040>
 40056fc:	85a1883a 	add	r16,r16,r22
 4005700:	8585803a 	cmpltu	r2,r16,r22
 4005704:	1705883a 	add	r2,r2,fp
 4005708:	14a5883a 	add	r18,r2,r18
 400570c:	88bfffc4 	addi	r2,r17,-1
 4005710:	e4800c2e 	bgeu	fp,r18,4005744 <__divdf3+0x72c>
 4005714:	90c03e36 	bltu	r18,r3,4005810 <__divdf3+0x7f8>
 4005718:	1c806926 	beq	r3,r18,40058c0 <__divdf3+0x8a8>
 400571c:	90c7c83a 	sub	r3,r18,r3
 4005720:	1023883a 	mov	r17,r2
 4005724:	003f5206 	br	4005470 <__ram_exceptions_end+0xfbfe5228>
 4005728:	923f0436 	bltu	r18,r8,400533c <__ram_exceptions_end+0xfbfe50f4>
 400572c:	800897fa 	slli	r4,r16,31
 4005730:	9004d07a 	srli	r2,r18,1
 4005734:	8006d07a 	srli	r3,r16,1
 4005738:	902097fa 	slli	r16,r18,31
 400573c:	20a4b03a 	or	r18,r4,r2
 4005740:	003f0106 	br	4005348 <__ram_exceptions_end+0xfbfe5100>
 4005744:	e4bff51e 	bne	fp,r18,400571c <__ram_exceptions_end+0xfbfe54d4>
 4005748:	85bff22e 	bgeu	r16,r22,4005714 <__ram_exceptions_end+0xfbfe54cc>
 400574c:	e0c7c83a 	sub	r3,fp,r3
 4005750:	1023883a 	mov	r17,r2
 4005754:	003f4606 	br	4005470 <__ram_exceptions_end+0xfbfe5228>
 4005758:	100f883a 	mov	r7,r2
 400575c:	003f2b06 	br	400540c <__ram_exceptions_end+0xfbfe51c4>
 4005760:	180d883a 	mov	r6,r3
 4005764:	003f1306 	br	40053b4 <__ram_exceptions_end+0xfbfe516c>
 4005768:	813fe436 	bltu	r16,r4,40056fc <__ram_exceptions_end+0xfbfe54b4>
 400576c:	0007883a 	mov	r3,zero
 4005770:	003f3f06 	br	4005470 <__ram_exceptions_end+0xfbfe5228>
 4005774:	ba402c36 	bltu	r23,r9,4005828 <__divdf3+0x810>
 4005778:	4dc05426 	beq	r9,r23,40058cc <__divdf3+0x8b4>
 400577c:	1011883a 	mov	r8,r2
 4005780:	003f8906 	br	40055a8 <__ram_exceptions_end+0xfbfe5360>
 4005784:	023fffc4 	movi	r8,-1
 4005788:	003f8806 	br	40055ac <__ram_exceptions_end+0xfbfe5364>
 400578c:	1811883a 	mov	r8,r3
 4005790:	003f5406 	br	40054e4 <__ram_exceptions_end+0xfbfe529c>
 4005794:	1025883a 	mov	r18,r2
 4005798:	003f6d06 	br	4005550 <__ram_exceptions_end+0xfbfe5308>
 400579c:	b827883a 	mov	r19,r23
 40057a0:	003f8206 	br	40055ac <__ram_exceptions_end+0xfbfe5364>
 40057a4:	010007c4 	movi	r4,31
 40057a8:	20c02616 	blt	r4,r3,4005844 <__divdf3+0x82c>
 40057ac:	00800804 	movi	r2,32
 40057b0:	10c5c83a 	sub	r2,r2,r3
 40057b4:	888a983a 	sll	r5,r17,r2
 40057b8:	40c8d83a 	srl	r4,r8,r3
 40057bc:	4084983a 	sll	r2,r8,r2
 40057c0:	88e2d83a 	srl	r17,r17,r3
 40057c4:	2906b03a 	or	r3,r5,r4
 40057c8:	1004c03a 	cmpne	r2,r2,zero
 40057cc:	1886b03a 	or	r3,r3,r2
 40057d0:	188001cc 	andi	r2,r3,7
 40057d4:	10000726 	beq	r2,zero,40057f4 <__divdf3+0x7dc>
 40057d8:	188003cc 	andi	r2,r3,15
 40057dc:	01000104 	movi	r4,4
 40057e0:	11000426 	beq	r2,r4,40057f4 <__divdf3+0x7dc>
 40057e4:	1805883a 	mov	r2,r3
 40057e8:	10c00104 	addi	r3,r2,4
 40057ec:	1885803a 	cmpltu	r2,r3,r2
 40057f0:	88a3883a 	add	r17,r17,r2
 40057f4:	8880202c 	andhi	r2,r17,128
 40057f8:	10002726 	beq	r2,zero,4005898 <__divdf3+0x880>
 40057fc:	98c0004c 	andi	r3,r19,1
 4005800:	00800044 	movi	r2,1
 4005804:	000b883a 	mov	r5,zero
 4005808:	0025883a 	mov	r18,zero
 400580c:	003e6106 	br	4005194 <__ram_exceptions_end+0xfbfe4f4c>
 4005810:	85a1883a 	add	r16,r16,r22
 4005814:	8585803a 	cmpltu	r2,r16,r22
 4005818:	1705883a 	add	r2,r2,fp
 400581c:	14a5883a 	add	r18,r2,r18
 4005820:	8c7fff84 	addi	r17,r17,-2
 4005824:	003f1106 	br	400546c <__ram_exceptions_end+0xfbfe5224>
 4005828:	b589883a 	add	r4,r22,r22
 400582c:	25ad803a 	cmpltu	r22,r4,r22
 4005830:	b739883a 	add	fp,r22,fp
 4005834:	40bfff84 	addi	r2,r8,-2
 4005838:	bf2f883a 	add	r23,r23,fp
 400583c:	202d883a 	mov	r22,r4
 4005840:	003f9306 	br	4005690 <__ram_exceptions_end+0xfbfe5448>
 4005844:	013ff844 	movi	r4,-31
 4005848:	2085c83a 	sub	r2,r4,r2
 400584c:	8888d83a 	srl	r4,r17,r2
 4005850:	00800804 	movi	r2,32
 4005854:	18802126 	beq	r3,r2,40058dc <__divdf3+0x8c4>
 4005858:	00801004 	movi	r2,64
 400585c:	10c5c83a 	sub	r2,r2,r3
 4005860:	8884983a 	sll	r2,r17,r2
 4005864:	1204b03a 	or	r2,r2,r8
 4005868:	1004c03a 	cmpne	r2,r2,zero
 400586c:	2084b03a 	or	r2,r4,r2
 4005870:	144001cc 	andi	r17,r2,7
 4005874:	88000d1e 	bne	r17,zero,40058ac <__divdf3+0x894>
 4005878:	000b883a 	mov	r5,zero
 400587c:	1024d0fa 	srli	r18,r2,3
 4005880:	98c0004c 	andi	r3,r19,1
 4005884:	0005883a 	mov	r2,zero
 4005888:	9464b03a 	or	r18,r18,r17
 400588c:	003e4106 	br	4005194 <__ram_exceptions_end+0xfbfe4f4c>
 4005890:	1007883a 	mov	r3,r2
 4005894:	0023883a 	mov	r17,zero
 4005898:	880a927a 	slli	r5,r17,9
 400589c:	1805883a 	mov	r2,r3
 40058a0:	8822977a 	slli	r17,r17,29
 40058a4:	280ad33a 	srli	r5,r5,12
 40058a8:	003ff406 	br	400587c <__ram_exceptions_end+0xfbfe5634>
 40058ac:	10c003cc 	andi	r3,r2,15
 40058b0:	01000104 	movi	r4,4
 40058b4:	193ff626 	beq	r3,r4,4005890 <__ram_exceptions_end+0xfbfe5648>
 40058b8:	0023883a 	mov	r17,zero
 40058bc:	003fca06 	br	40057e8 <__ram_exceptions_end+0xfbfe55a0>
 40058c0:	813fd336 	bltu	r16,r4,4005810 <__ram_exceptions_end+0xfbfe55c8>
 40058c4:	1023883a 	mov	r17,r2
 40058c8:	003fa806 	br	400576c <__ram_exceptions_end+0xfbfe5524>
 40058cc:	b0ffd636 	bltu	r22,r3,4005828 <__ram_exceptions_end+0xfbfe55e0>
 40058d0:	1011883a 	mov	r8,r2
 40058d4:	b0ff341e 	bne	r22,r3,40055a8 <__ram_exceptions_end+0xfbfe5360>
 40058d8:	003f3406 	br	40055ac <__ram_exceptions_end+0xfbfe5364>
 40058dc:	0005883a 	mov	r2,zero
 40058e0:	003fe006 	br	4005864 <__ram_exceptions_end+0xfbfe561c>
 40058e4:	00800434 	movhi	r2,16
 40058e8:	89400234 	orhi	r5,r17,8
 40058ec:	10bfffc4 	addi	r2,r2,-1
 40058f0:	b807883a 	mov	r3,r23
 40058f4:	288a703a 	and	r5,r5,r2
 40058f8:	4025883a 	mov	r18,r8
 40058fc:	003e8206 	br	4005308 <__ram_exceptions_end+0xfbfe50c0>

04005900 <__eqdf2>:
 4005900:	2804d53a 	srli	r2,r5,20
 4005904:	3806d53a 	srli	r3,r7,20
 4005908:	02000434 	movhi	r8,16
 400590c:	423fffc4 	addi	r8,r8,-1
 4005910:	1081ffcc 	andi	r2,r2,2047
 4005914:	0281ffc4 	movi	r10,2047
 4005918:	2a12703a 	and	r9,r5,r8
 400591c:	18c1ffcc 	andi	r3,r3,2047
 4005920:	3a10703a 	and	r8,r7,r8
 4005924:	280ad7fa 	srli	r5,r5,31
 4005928:	380ed7fa 	srli	r7,r7,31
 400592c:	12801026 	beq	r2,r10,4005970 <__eqdf2+0x70>
 4005930:	0281ffc4 	movi	r10,2047
 4005934:	1a800a26 	beq	r3,r10,4005960 <__eqdf2+0x60>
 4005938:	10c00226 	beq	r2,r3,4005944 <__eqdf2+0x44>
 400593c:	00800044 	movi	r2,1
 4005940:	f800283a 	ret
 4005944:	4a3ffd1e 	bne	r9,r8,400593c <__ram_exceptions_end+0xfbfe56f4>
 4005948:	21bffc1e 	bne	r4,r6,400593c <__ram_exceptions_end+0xfbfe56f4>
 400594c:	29c00c26 	beq	r5,r7,4005980 <__eqdf2+0x80>
 4005950:	103ffa1e 	bne	r2,zero,400593c <__ram_exceptions_end+0xfbfe56f4>
 4005954:	2244b03a 	or	r2,r4,r9
 4005958:	1004c03a 	cmpne	r2,r2,zero
 400595c:	f800283a 	ret
 4005960:	3214b03a 	or	r10,r6,r8
 4005964:	503ff426 	beq	r10,zero,4005938 <__ram_exceptions_end+0xfbfe56f0>
 4005968:	00800044 	movi	r2,1
 400596c:	f800283a 	ret
 4005970:	2254b03a 	or	r10,r4,r9
 4005974:	503fee26 	beq	r10,zero,4005930 <__ram_exceptions_end+0xfbfe56e8>
 4005978:	00800044 	movi	r2,1
 400597c:	f800283a 	ret
 4005980:	0005883a 	mov	r2,zero
 4005984:	f800283a 	ret

04005988 <__gedf2>:
 4005988:	2804d53a 	srli	r2,r5,20
 400598c:	3806d53a 	srli	r3,r7,20
 4005990:	02000434 	movhi	r8,16
 4005994:	423fffc4 	addi	r8,r8,-1
 4005998:	1081ffcc 	andi	r2,r2,2047
 400599c:	0241ffc4 	movi	r9,2047
 40059a0:	2a14703a 	and	r10,r5,r8
 40059a4:	18c1ffcc 	andi	r3,r3,2047
 40059a8:	3a10703a 	and	r8,r7,r8
 40059ac:	280ad7fa 	srli	r5,r5,31
 40059b0:	380ed7fa 	srli	r7,r7,31
 40059b4:	12401d26 	beq	r2,r9,4005a2c <__gedf2+0xa4>
 40059b8:	0241ffc4 	movi	r9,2047
 40059bc:	1a401226 	beq	r3,r9,4005a08 <__gedf2+0x80>
 40059c0:	1000081e 	bne	r2,zero,40059e4 <__gedf2+0x5c>
 40059c4:	2296b03a 	or	r11,r4,r10
 40059c8:	5813003a 	cmpeq	r9,r11,zero
 40059cc:	1800091e 	bne	r3,zero,40059f4 <__gedf2+0x6c>
 40059d0:	3218b03a 	or	r12,r6,r8
 40059d4:	6000071e 	bne	r12,zero,40059f4 <__gedf2+0x6c>
 40059d8:	0005883a 	mov	r2,zero
 40059dc:	5800101e 	bne	r11,zero,4005a20 <__gedf2+0x98>
 40059e0:	f800283a 	ret
 40059e4:	18000c1e 	bne	r3,zero,4005a18 <__gedf2+0x90>
 40059e8:	3212b03a 	or	r9,r6,r8
 40059ec:	48000c26 	beq	r9,zero,4005a20 <__gedf2+0x98>
 40059f0:	0013883a 	mov	r9,zero
 40059f4:	39c03fcc 	andi	r7,r7,255
 40059f8:	48000826 	beq	r9,zero,4005a1c <__gedf2+0x94>
 40059fc:	38000926 	beq	r7,zero,4005a24 <__gedf2+0x9c>
 4005a00:	00800044 	movi	r2,1
 4005a04:	f800283a 	ret
 4005a08:	3212b03a 	or	r9,r6,r8
 4005a0c:	483fec26 	beq	r9,zero,40059c0 <__ram_exceptions_end+0xfbfe5778>
 4005a10:	00bfff84 	movi	r2,-2
 4005a14:	f800283a 	ret
 4005a18:	39c03fcc 	andi	r7,r7,255
 4005a1c:	29c00626 	beq	r5,r7,4005a38 <__gedf2+0xb0>
 4005a20:	283ff726 	beq	r5,zero,4005a00 <__ram_exceptions_end+0xfbfe57b8>
 4005a24:	00bfffc4 	movi	r2,-1
 4005a28:	f800283a 	ret
 4005a2c:	2292b03a 	or	r9,r4,r10
 4005a30:	483fe126 	beq	r9,zero,40059b8 <__ram_exceptions_end+0xfbfe5770>
 4005a34:	003ff606 	br	4005a10 <__ram_exceptions_end+0xfbfe57c8>
 4005a38:	18bff916 	blt	r3,r2,4005a20 <__ram_exceptions_end+0xfbfe57d8>
 4005a3c:	10c00316 	blt	r2,r3,4005a4c <__gedf2+0xc4>
 4005a40:	42bff736 	bltu	r8,r10,4005a20 <__ram_exceptions_end+0xfbfe57d8>
 4005a44:	52000326 	beq	r10,r8,4005a54 <__gedf2+0xcc>
 4005a48:	5200042e 	bgeu	r10,r8,4005a5c <__gedf2+0xd4>
 4005a4c:	283fec1e 	bne	r5,zero,4005a00 <__ram_exceptions_end+0xfbfe57b8>
 4005a50:	003ff406 	br	4005a24 <__ram_exceptions_end+0xfbfe57dc>
 4005a54:	313ff236 	bltu	r6,r4,4005a20 <__ram_exceptions_end+0xfbfe57d8>
 4005a58:	21bffc36 	bltu	r4,r6,4005a4c <__ram_exceptions_end+0xfbfe5804>
 4005a5c:	0005883a 	mov	r2,zero
 4005a60:	f800283a 	ret

04005a64 <__ledf2>:
 4005a64:	2804d53a 	srli	r2,r5,20
 4005a68:	3810d53a 	srli	r8,r7,20
 4005a6c:	00c00434 	movhi	r3,16
 4005a70:	18ffffc4 	addi	r3,r3,-1
 4005a74:	1081ffcc 	andi	r2,r2,2047
 4005a78:	0241ffc4 	movi	r9,2047
 4005a7c:	28d4703a 	and	r10,r5,r3
 4005a80:	4201ffcc 	andi	r8,r8,2047
 4005a84:	38c6703a 	and	r3,r7,r3
 4005a88:	280ad7fa 	srli	r5,r5,31
 4005a8c:	380ed7fa 	srli	r7,r7,31
 4005a90:	12401f26 	beq	r2,r9,4005b10 <__ledf2+0xac>
 4005a94:	0241ffc4 	movi	r9,2047
 4005a98:	42401426 	beq	r8,r9,4005aec <__ledf2+0x88>
 4005a9c:	1000091e 	bne	r2,zero,4005ac4 <__ledf2+0x60>
 4005aa0:	2296b03a 	or	r11,r4,r10
 4005aa4:	5813003a 	cmpeq	r9,r11,zero
 4005aa8:	29403fcc 	andi	r5,r5,255
 4005aac:	40000a1e 	bne	r8,zero,4005ad8 <__ledf2+0x74>
 4005ab0:	30d8b03a 	or	r12,r6,r3
 4005ab4:	6000081e 	bne	r12,zero,4005ad8 <__ledf2+0x74>
 4005ab8:	0005883a 	mov	r2,zero
 4005abc:	5800111e 	bne	r11,zero,4005b04 <__ledf2+0xa0>
 4005ac0:	f800283a 	ret
 4005ac4:	29403fcc 	andi	r5,r5,255
 4005ac8:	40000c1e 	bne	r8,zero,4005afc <__ledf2+0x98>
 4005acc:	30d2b03a 	or	r9,r6,r3
 4005ad0:	48000c26 	beq	r9,zero,4005b04 <__ledf2+0xa0>
 4005ad4:	0013883a 	mov	r9,zero
 4005ad8:	39c03fcc 	andi	r7,r7,255
 4005adc:	48000826 	beq	r9,zero,4005b00 <__ledf2+0x9c>
 4005ae0:	38001126 	beq	r7,zero,4005b28 <__ledf2+0xc4>
 4005ae4:	00800044 	movi	r2,1
 4005ae8:	f800283a 	ret
 4005aec:	30d2b03a 	or	r9,r6,r3
 4005af0:	483fea26 	beq	r9,zero,4005a9c <__ram_exceptions_end+0xfbfe5854>
 4005af4:	00800084 	movi	r2,2
 4005af8:	f800283a 	ret
 4005afc:	39c03fcc 	andi	r7,r7,255
 4005b00:	39400726 	beq	r7,r5,4005b20 <__ledf2+0xbc>
 4005b04:	2800081e 	bne	r5,zero,4005b28 <__ledf2+0xc4>
 4005b08:	00800044 	movi	r2,1
 4005b0c:	f800283a 	ret
 4005b10:	2292b03a 	or	r9,r4,r10
 4005b14:	483fdf26 	beq	r9,zero,4005a94 <__ram_exceptions_end+0xfbfe584c>
 4005b18:	00800084 	movi	r2,2
 4005b1c:	f800283a 	ret
 4005b20:	4080030e 	bge	r8,r2,4005b30 <__ledf2+0xcc>
 4005b24:	383fef26 	beq	r7,zero,4005ae4 <__ram_exceptions_end+0xfbfe589c>
 4005b28:	00bfffc4 	movi	r2,-1
 4005b2c:	f800283a 	ret
 4005b30:	123feb16 	blt	r2,r8,4005ae0 <__ram_exceptions_end+0xfbfe5898>
 4005b34:	1abff336 	bltu	r3,r10,4005b04 <__ram_exceptions_end+0xfbfe58bc>
 4005b38:	50c00326 	beq	r10,r3,4005b48 <__ledf2+0xe4>
 4005b3c:	50c0042e 	bgeu	r10,r3,4005b50 <__ledf2+0xec>
 4005b40:	283fe81e 	bne	r5,zero,4005ae4 <__ram_exceptions_end+0xfbfe589c>
 4005b44:	003ff806 	br	4005b28 <__ram_exceptions_end+0xfbfe58e0>
 4005b48:	313fee36 	bltu	r6,r4,4005b04 <__ram_exceptions_end+0xfbfe58bc>
 4005b4c:	21bffc36 	bltu	r4,r6,4005b40 <__ram_exceptions_end+0xfbfe58f8>
 4005b50:	0005883a 	mov	r2,zero
 4005b54:	f800283a 	ret

04005b58 <__muldf3>:
 4005b58:	defff304 	addi	sp,sp,-52
 4005b5c:	2804d53a 	srli	r2,r5,20
 4005b60:	dd800915 	stw	r22,36(sp)
 4005b64:	282cd7fa 	srli	r22,r5,31
 4005b68:	dc000315 	stw	r16,12(sp)
 4005b6c:	04000434 	movhi	r16,16
 4005b70:	dd400815 	stw	r21,32(sp)
 4005b74:	dc800515 	stw	r18,20(sp)
 4005b78:	843fffc4 	addi	r16,r16,-1
 4005b7c:	dfc00c15 	stw	ra,48(sp)
 4005b80:	df000b15 	stw	fp,44(sp)
 4005b84:	ddc00a15 	stw	r23,40(sp)
 4005b88:	dd000715 	stw	r20,28(sp)
 4005b8c:	dcc00615 	stw	r19,24(sp)
 4005b90:	dc400415 	stw	r17,16(sp)
 4005b94:	1481ffcc 	andi	r18,r2,2047
 4005b98:	2c20703a 	and	r16,r5,r16
 4005b9c:	b02b883a 	mov	r21,r22
 4005ba0:	b2403fcc 	andi	r9,r22,255
 4005ba4:	90006026 	beq	r18,zero,4005d28 <__muldf3+0x1d0>
 4005ba8:	0081ffc4 	movi	r2,2047
 4005bac:	2029883a 	mov	r20,r4
 4005bb0:	90803626 	beq	r18,r2,4005c8c <__muldf3+0x134>
 4005bb4:	80800434 	orhi	r2,r16,16
 4005bb8:	100490fa 	slli	r2,r2,3
 4005bbc:	2020d77a 	srli	r16,r4,29
 4005bc0:	202890fa 	slli	r20,r4,3
 4005bc4:	94bf0044 	addi	r18,r18,-1023
 4005bc8:	80a0b03a 	or	r16,r16,r2
 4005bcc:	0027883a 	mov	r19,zero
 4005bd0:	0039883a 	mov	fp,zero
 4005bd4:	3804d53a 	srli	r2,r7,20
 4005bd8:	382ed7fa 	srli	r23,r7,31
 4005bdc:	04400434 	movhi	r17,16
 4005be0:	8c7fffc4 	addi	r17,r17,-1
 4005be4:	1081ffcc 	andi	r2,r2,2047
 4005be8:	3011883a 	mov	r8,r6
 4005bec:	3c62703a 	and	r17,r7,r17
 4005bf0:	ba803fcc 	andi	r10,r23,255
 4005bf4:	10006d26 	beq	r2,zero,4005dac <__muldf3+0x254>
 4005bf8:	00c1ffc4 	movi	r3,2047
 4005bfc:	10c06526 	beq	r2,r3,4005d94 <__muldf3+0x23c>
 4005c00:	88c00434 	orhi	r3,r17,16
 4005c04:	180690fa 	slli	r3,r3,3
 4005c08:	3022d77a 	srli	r17,r6,29
 4005c0c:	301090fa 	slli	r8,r6,3
 4005c10:	10bf0044 	addi	r2,r2,-1023
 4005c14:	88e2b03a 	or	r17,r17,r3
 4005c18:	000b883a 	mov	r5,zero
 4005c1c:	9085883a 	add	r2,r18,r2
 4005c20:	2cc8b03a 	or	r4,r5,r19
 4005c24:	00c003c4 	movi	r3,15
 4005c28:	bdacf03a 	xor	r22,r23,r22
 4005c2c:	12c00044 	addi	r11,r2,1
 4005c30:	19009936 	bltu	r3,r4,4005e98 <__muldf3+0x340>
 4005c34:	200890ba 	slli	r4,r4,2
 4005c38:	00c10034 	movhi	r3,1024
 4005c3c:	18d71304 	addi	r3,r3,23628
 4005c40:	20c9883a 	add	r4,r4,r3
 4005c44:	20c00017 	ldw	r3,0(r4)
 4005c48:	1800683a 	jmp	r3
 4005c4c:	04005e98 	cmpnei	r16,zero,378
 4005c50:	04005cac 	andhi	r16,zero,370
 4005c54:	04005cac 	andhi	r16,zero,370
 4005c58:	04005ca8 	cmpgeui	r16,zero,370
 4005c5c:	04005e74 	movhi	r16,377
 4005c60:	04005e74 	movhi	r16,377
 4005c64:	04005e5c 	xori	r16,zero,377
 4005c68:	04005ca8 	cmpgeui	r16,zero,370
 4005c6c:	04005e74 	movhi	r16,377
 4005c70:	04005e5c 	xori	r16,zero,377
 4005c74:	04005e74 	movhi	r16,377
 4005c78:	04005ca8 	cmpgeui	r16,zero,370
 4005c7c:	04005e84 	movi	r16,378
 4005c80:	04005e84 	movi	r16,378
 4005c84:	04005e84 	movi	r16,378
 4005c88:	040060a0 	cmpeqi	r16,zero,386
 4005c8c:	2404b03a 	or	r2,r4,r16
 4005c90:	10006f1e 	bne	r2,zero,4005e50 <__muldf3+0x2f8>
 4005c94:	04c00204 	movi	r19,8
 4005c98:	0021883a 	mov	r16,zero
 4005c9c:	0029883a 	mov	r20,zero
 4005ca0:	07000084 	movi	fp,2
 4005ca4:	003fcb06 	br	4005bd4 <__ram_exceptions_end+0xfbfe598c>
 4005ca8:	502d883a 	mov	r22,r10
 4005cac:	00800084 	movi	r2,2
 4005cb0:	28805726 	beq	r5,r2,4005e10 <__muldf3+0x2b8>
 4005cb4:	008000c4 	movi	r2,3
 4005cb8:	28816626 	beq	r5,r2,4006254 <__muldf3+0x6fc>
 4005cbc:	00800044 	movi	r2,1
 4005cc0:	2881411e 	bne	r5,r2,40061c8 <__muldf3+0x670>
 4005cc4:	b02b883a 	mov	r21,r22
 4005cc8:	0005883a 	mov	r2,zero
 4005ccc:	000b883a 	mov	r5,zero
 4005cd0:	0029883a 	mov	r20,zero
 4005cd4:	1004953a 	slli	r2,r2,20
 4005cd8:	a8c03fcc 	andi	r3,r21,255
 4005cdc:	04400434 	movhi	r17,16
 4005ce0:	8c7fffc4 	addi	r17,r17,-1
 4005ce4:	180697fa 	slli	r3,r3,31
 4005ce8:	2c4a703a 	and	r5,r5,r17
 4005cec:	288ab03a 	or	r5,r5,r2
 4005cf0:	28c6b03a 	or	r3,r5,r3
 4005cf4:	a005883a 	mov	r2,r20
 4005cf8:	dfc00c17 	ldw	ra,48(sp)
 4005cfc:	df000b17 	ldw	fp,44(sp)
 4005d00:	ddc00a17 	ldw	r23,40(sp)
 4005d04:	dd800917 	ldw	r22,36(sp)
 4005d08:	dd400817 	ldw	r21,32(sp)
 4005d0c:	dd000717 	ldw	r20,28(sp)
 4005d10:	dcc00617 	ldw	r19,24(sp)
 4005d14:	dc800517 	ldw	r18,20(sp)
 4005d18:	dc400417 	ldw	r17,16(sp)
 4005d1c:	dc000317 	ldw	r16,12(sp)
 4005d20:	dec00d04 	addi	sp,sp,52
 4005d24:	f800283a 	ret
 4005d28:	2404b03a 	or	r2,r4,r16
 4005d2c:	2027883a 	mov	r19,r4
 4005d30:	10004226 	beq	r2,zero,4005e3c <__muldf3+0x2e4>
 4005d34:	8000fc26 	beq	r16,zero,4006128 <__muldf3+0x5d0>
 4005d38:	8009883a 	mov	r4,r16
 4005d3c:	d9800215 	stw	r6,8(sp)
 4005d40:	d9c00015 	stw	r7,0(sp)
 4005d44:	da400115 	stw	r9,4(sp)
 4005d48:	4006f800 	call	4006f80 <__clzsi2>
 4005d4c:	d9800217 	ldw	r6,8(sp)
 4005d50:	d9c00017 	ldw	r7,0(sp)
 4005d54:	da400117 	ldw	r9,4(sp)
 4005d58:	113ffd44 	addi	r4,r2,-11
 4005d5c:	00c00704 	movi	r3,28
 4005d60:	1900ed16 	blt	r3,r4,4006118 <__muldf3+0x5c0>
 4005d64:	00c00744 	movi	r3,29
 4005d68:	147ffe04 	addi	r17,r2,-8
 4005d6c:	1907c83a 	sub	r3,r3,r4
 4005d70:	8460983a 	sll	r16,r16,r17
 4005d74:	98c6d83a 	srl	r3,r19,r3
 4005d78:	9c68983a 	sll	r20,r19,r17
 4005d7c:	1c20b03a 	or	r16,r3,r16
 4005d80:	1080fcc4 	addi	r2,r2,1011
 4005d84:	00a5c83a 	sub	r18,zero,r2
 4005d88:	0027883a 	mov	r19,zero
 4005d8c:	0039883a 	mov	fp,zero
 4005d90:	003f9006 	br	4005bd4 <__ram_exceptions_end+0xfbfe598c>
 4005d94:	3446b03a 	or	r3,r6,r17
 4005d98:	1800261e 	bne	r3,zero,4005e34 <__muldf3+0x2dc>
 4005d9c:	0023883a 	mov	r17,zero
 4005da0:	0011883a 	mov	r8,zero
 4005da4:	01400084 	movi	r5,2
 4005da8:	003f9c06 	br	4005c1c <__ram_exceptions_end+0xfbfe59d4>
 4005dac:	3446b03a 	or	r3,r6,r17
 4005db0:	18001c26 	beq	r3,zero,4005e24 <__muldf3+0x2cc>
 4005db4:	8800ce26 	beq	r17,zero,40060f0 <__muldf3+0x598>
 4005db8:	8809883a 	mov	r4,r17
 4005dbc:	d9800215 	stw	r6,8(sp)
 4005dc0:	da400115 	stw	r9,4(sp)
 4005dc4:	da800015 	stw	r10,0(sp)
 4005dc8:	4006f800 	call	4006f80 <__clzsi2>
 4005dcc:	d9800217 	ldw	r6,8(sp)
 4005dd0:	da400117 	ldw	r9,4(sp)
 4005dd4:	da800017 	ldw	r10,0(sp)
 4005dd8:	113ffd44 	addi	r4,r2,-11
 4005ddc:	00c00704 	movi	r3,28
 4005de0:	1900bf16 	blt	r3,r4,40060e0 <__muldf3+0x588>
 4005de4:	00c00744 	movi	r3,29
 4005de8:	123ffe04 	addi	r8,r2,-8
 4005dec:	1907c83a 	sub	r3,r3,r4
 4005df0:	8a22983a 	sll	r17,r17,r8
 4005df4:	30c6d83a 	srl	r3,r6,r3
 4005df8:	3210983a 	sll	r8,r6,r8
 4005dfc:	1c62b03a 	or	r17,r3,r17
 4005e00:	1080fcc4 	addi	r2,r2,1011
 4005e04:	0085c83a 	sub	r2,zero,r2
 4005e08:	000b883a 	mov	r5,zero
 4005e0c:	003f8306 	br	4005c1c <__ram_exceptions_end+0xfbfe59d4>
 4005e10:	b02b883a 	mov	r21,r22
 4005e14:	0081ffc4 	movi	r2,2047
 4005e18:	000b883a 	mov	r5,zero
 4005e1c:	0029883a 	mov	r20,zero
 4005e20:	003fac06 	br	4005cd4 <__ram_exceptions_end+0xfbfe5a8c>
 4005e24:	0023883a 	mov	r17,zero
 4005e28:	0011883a 	mov	r8,zero
 4005e2c:	01400044 	movi	r5,1
 4005e30:	003f7a06 	br	4005c1c <__ram_exceptions_end+0xfbfe59d4>
 4005e34:	014000c4 	movi	r5,3
 4005e38:	003f7806 	br	4005c1c <__ram_exceptions_end+0xfbfe59d4>
 4005e3c:	04c00104 	movi	r19,4
 4005e40:	0021883a 	mov	r16,zero
 4005e44:	0029883a 	mov	r20,zero
 4005e48:	07000044 	movi	fp,1
 4005e4c:	003f6106 	br	4005bd4 <__ram_exceptions_end+0xfbfe598c>
 4005e50:	04c00304 	movi	r19,12
 4005e54:	070000c4 	movi	fp,3
 4005e58:	003f5e06 	br	4005bd4 <__ram_exceptions_end+0xfbfe598c>
 4005e5c:	01400434 	movhi	r5,16
 4005e60:	002b883a 	mov	r21,zero
 4005e64:	297fffc4 	addi	r5,r5,-1
 4005e68:	053fffc4 	movi	r20,-1
 4005e6c:	0081ffc4 	movi	r2,2047
 4005e70:	003f9806 	br	4005cd4 <__ram_exceptions_end+0xfbfe5a8c>
 4005e74:	8023883a 	mov	r17,r16
 4005e78:	a011883a 	mov	r8,r20
 4005e7c:	e00b883a 	mov	r5,fp
 4005e80:	003f8a06 	br	4005cac <__ram_exceptions_end+0xfbfe5a64>
 4005e84:	8023883a 	mov	r17,r16
 4005e88:	a011883a 	mov	r8,r20
 4005e8c:	482d883a 	mov	r22,r9
 4005e90:	e00b883a 	mov	r5,fp
 4005e94:	003f8506 	br	4005cac <__ram_exceptions_end+0xfbfe5a64>
 4005e98:	a00ad43a 	srli	r5,r20,16
 4005e9c:	401ad43a 	srli	r13,r8,16
 4005ea0:	a53fffcc 	andi	r20,r20,65535
 4005ea4:	423fffcc 	andi	r8,r8,65535
 4005ea8:	4519383a 	mul	r12,r8,r20
 4005eac:	4147383a 	mul	r3,r8,r5
 4005eb0:	6d09383a 	mul	r4,r13,r20
 4005eb4:	600cd43a 	srli	r6,r12,16
 4005eb8:	2b5d383a 	mul	r14,r5,r13
 4005ebc:	20c9883a 	add	r4,r4,r3
 4005ec0:	310d883a 	add	r6,r6,r4
 4005ec4:	30c0022e 	bgeu	r6,r3,4005ed0 <__muldf3+0x378>
 4005ec8:	00c00074 	movhi	r3,1
 4005ecc:	70dd883a 	add	r14,r14,r3
 4005ed0:	8826d43a 	srli	r19,r17,16
 4005ed4:	8bffffcc 	andi	r15,r17,65535
 4005ed8:	7d23383a 	mul	r17,r15,r20
 4005edc:	7949383a 	mul	r4,r15,r5
 4005ee0:	9d29383a 	mul	r20,r19,r20
 4005ee4:	8814d43a 	srli	r10,r17,16
 4005ee8:	3012943a 	slli	r9,r6,16
 4005eec:	a129883a 	add	r20,r20,r4
 4005ef0:	633fffcc 	andi	r12,r12,65535
 4005ef4:	5515883a 	add	r10,r10,r20
 4005ef8:	3006d43a 	srli	r3,r6,16
 4005efc:	4b13883a 	add	r9,r9,r12
 4005f00:	2ccb383a 	mul	r5,r5,r19
 4005f04:	5100022e 	bgeu	r10,r4,4005f10 <__muldf3+0x3b8>
 4005f08:	01000074 	movhi	r4,1
 4005f0c:	290b883a 	add	r5,r5,r4
 4005f10:	802ad43a 	srli	r21,r16,16
 4005f14:	843fffcc 	andi	r16,r16,65535
 4005f18:	440d383a 	mul	r6,r8,r16
 4005f1c:	4565383a 	mul	r18,r8,r21
 4005f20:	8349383a 	mul	r4,r16,r13
 4005f24:	500e943a 	slli	r7,r10,16
 4005f28:	3010d43a 	srli	r8,r6,16
 4005f2c:	5028d43a 	srli	r20,r10,16
 4005f30:	2489883a 	add	r4,r4,r18
 4005f34:	8abfffcc 	andi	r10,r17,65535
 4005f38:	3a95883a 	add	r10,r7,r10
 4005f3c:	4119883a 	add	r12,r8,r4
 4005f40:	a169883a 	add	r20,r20,r5
 4005f44:	1a87883a 	add	r3,r3,r10
 4005f48:	6d5b383a 	mul	r13,r13,r21
 4005f4c:	6480022e 	bgeu	r12,r18,4005f58 <__muldf3+0x400>
 4005f50:	01000074 	movhi	r4,1
 4005f54:	691b883a 	add	r13,r13,r4
 4005f58:	7c25383a 	mul	r18,r15,r16
 4005f5c:	7d4b383a 	mul	r5,r15,r21
 4005f60:	84cf383a 	mul	r7,r16,r19
 4005f64:	901ed43a 	srli	r15,r18,16
 4005f68:	6008d43a 	srli	r4,r12,16
 4005f6c:	6010943a 	slli	r8,r12,16
 4005f70:	394f883a 	add	r7,r7,r5
 4005f74:	333fffcc 	andi	r12,r6,65535
 4005f78:	79df883a 	add	r15,r15,r7
 4005f7c:	235b883a 	add	r13,r4,r13
 4005f80:	9d63383a 	mul	r17,r19,r21
 4005f84:	4309883a 	add	r4,r8,r12
 4005f88:	7940022e 	bgeu	r15,r5,4005f94 <__muldf3+0x43c>
 4005f8c:	01400074 	movhi	r5,1
 4005f90:	8963883a 	add	r17,r17,r5
 4005f94:	780a943a 	slli	r5,r15,16
 4005f98:	91bfffcc 	andi	r6,r18,65535
 4005f9c:	70c7883a 	add	r3,r14,r3
 4005fa0:	298d883a 	add	r6,r5,r6
 4005fa4:	1a8f803a 	cmpltu	r7,r3,r10
 4005fa8:	350b883a 	add	r5,r6,r20
 4005fac:	20c7883a 	add	r3,r4,r3
 4005fb0:	3955883a 	add	r10,r7,r5
 4005fb4:	1909803a 	cmpltu	r4,r3,r4
 4005fb8:	6a91883a 	add	r8,r13,r10
 4005fbc:	780cd43a 	srli	r6,r15,16
 4005fc0:	2219883a 	add	r12,r4,r8
 4005fc4:	2d0b803a 	cmpltu	r5,r5,r20
 4005fc8:	51cf803a 	cmpltu	r7,r10,r7
 4005fcc:	29ceb03a 	or	r7,r5,r7
 4005fd0:	4351803a 	cmpltu	r8,r8,r13
 4005fd4:	610b803a 	cmpltu	r5,r12,r4
 4005fd8:	4148b03a 	or	r4,r8,r5
 4005fdc:	398f883a 	add	r7,r7,r6
 4005fe0:	3909883a 	add	r4,r7,r4
 4005fe4:	1810927a 	slli	r8,r3,9
 4005fe8:	2449883a 	add	r4,r4,r17
 4005fec:	2008927a 	slli	r4,r4,9
 4005ff0:	6022d5fa 	srli	r17,r12,23
 4005ff4:	1806d5fa 	srli	r3,r3,23
 4005ff8:	4252b03a 	or	r9,r8,r9
 4005ffc:	600a927a 	slli	r5,r12,9
 4006000:	4810c03a 	cmpne	r8,r9,zero
 4006004:	2462b03a 	or	r17,r4,r17
 4006008:	40c6b03a 	or	r3,r8,r3
 400600c:	8900402c 	andhi	r4,r17,256
 4006010:	1950b03a 	or	r8,r3,r5
 4006014:	20000726 	beq	r4,zero,4006034 <__muldf3+0x4dc>
 4006018:	4006d07a 	srli	r3,r8,1
 400601c:	880497fa 	slli	r2,r17,31
 4006020:	4200004c 	andi	r8,r8,1
 4006024:	8822d07a 	srli	r17,r17,1
 4006028:	1a10b03a 	or	r8,r3,r8
 400602c:	1210b03a 	or	r8,r2,r8
 4006030:	5805883a 	mov	r2,r11
 4006034:	1140ffc4 	addi	r5,r2,1023
 4006038:	0140440e 	bge	zero,r5,400614c <__muldf3+0x5f4>
 400603c:	40c001cc 	andi	r3,r8,7
 4006040:	18000726 	beq	r3,zero,4006060 <__muldf3+0x508>
 4006044:	40c003cc 	andi	r3,r8,15
 4006048:	01000104 	movi	r4,4
 400604c:	19000426 	beq	r3,r4,4006060 <__muldf3+0x508>
 4006050:	4107883a 	add	r3,r8,r4
 4006054:	1a11803a 	cmpltu	r8,r3,r8
 4006058:	8a23883a 	add	r17,r17,r8
 400605c:	1811883a 	mov	r8,r3
 4006060:	88c0402c 	andhi	r3,r17,256
 4006064:	18000426 	beq	r3,zero,4006078 <__muldf3+0x520>
 4006068:	11410004 	addi	r5,r2,1024
 400606c:	00bfc034 	movhi	r2,65280
 4006070:	10bfffc4 	addi	r2,r2,-1
 4006074:	88a2703a 	and	r17,r17,r2
 4006078:	0081ff84 	movi	r2,2046
 400607c:	117f6416 	blt	r2,r5,4005e10 <__ram_exceptions_end+0xfbfe5bc8>
 4006080:	8828977a 	slli	r20,r17,29
 4006084:	4010d0fa 	srli	r8,r8,3
 4006088:	8822927a 	slli	r17,r17,9
 400608c:	2881ffcc 	andi	r2,r5,2047
 4006090:	a228b03a 	or	r20,r20,r8
 4006094:	880ad33a 	srli	r5,r17,12
 4006098:	b02b883a 	mov	r21,r22
 400609c:	003f0d06 	br	4005cd4 <__ram_exceptions_end+0xfbfe5a8c>
 40060a0:	8080022c 	andhi	r2,r16,8
 40060a4:	10000926 	beq	r2,zero,40060cc <__muldf3+0x574>
 40060a8:	8880022c 	andhi	r2,r17,8
 40060ac:	1000071e 	bne	r2,zero,40060cc <__muldf3+0x574>
 40060b0:	00800434 	movhi	r2,16
 40060b4:	89400234 	orhi	r5,r17,8
 40060b8:	10bfffc4 	addi	r2,r2,-1
 40060bc:	b82b883a 	mov	r21,r23
 40060c0:	288a703a 	and	r5,r5,r2
 40060c4:	4029883a 	mov	r20,r8
 40060c8:	003f6806 	br	4005e6c <__ram_exceptions_end+0xfbfe5c24>
 40060cc:	00800434 	movhi	r2,16
 40060d0:	81400234 	orhi	r5,r16,8
 40060d4:	10bfffc4 	addi	r2,r2,-1
 40060d8:	288a703a 	and	r5,r5,r2
 40060dc:	003f6306 	br	4005e6c <__ram_exceptions_end+0xfbfe5c24>
 40060e0:	147ff604 	addi	r17,r2,-40
 40060e4:	3462983a 	sll	r17,r6,r17
 40060e8:	0011883a 	mov	r8,zero
 40060ec:	003f4406 	br	4005e00 <__ram_exceptions_end+0xfbfe5bb8>
 40060f0:	3009883a 	mov	r4,r6
 40060f4:	d9800215 	stw	r6,8(sp)
 40060f8:	da400115 	stw	r9,4(sp)
 40060fc:	da800015 	stw	r10,0(sp)
 4006100:	4006f800 	call	4006f80 <__clzsi2>
 4006104:	10800804 	addi	r2,r2,32
 4006108:	da800017 	ldw	r10,0(sp)
 400610c:	da400117 	ldw	r9,4(sp)
 4006110:	d9800217 	ldw	r6,8(sp)
 4006114:	003f3006 	br	4005dd8 <__ram_exceptions_end+0xfbfe5b90>
 4006118:	143ff604 	addi	r16,r2,-40
 400611c:	9c20983a 	sll	r16,r19,r16
 4006120:	0029883a 	mov	r20,zero
 4006124:	003f1606 	br	4005d80 <__ram_exceptions_end+0xfbfe5b38>
 4006128:	d9800215 	stw	r6,8(sp)
 400612c:	d9c00015 	stw	r7,0(sp)
 4006130:	da400115 	stw	r9,4(sp)
 4006134:	4006f800 	call	4006f80 <__clzsi2>
 4006138:	10800804 	addi	r2,r2,32
 400613c:	da400117 	ldw	r9,4(sp)
 4006140:	d9c00017 	ldw	r7,0(sp)
 4006144:	d9800217 	ldw	r6,8(sp)
 4006148:	003f0306 	br	4005d58 <__ram_exceptions_end+0xfbfe5b10>
 400614c:	00c00044 	movi	r3,1
 4006150:	1947c83a 	sub	r3,r3,r5
 4006154:	00800e04 	movi	r2,56
 4006158:	10feda16 	blt	r2,r3,4005cc4 <__ram_exceptions_end+0xfbfe5a7c>
 400615c:	008007c4 	movi	r2,31
 4006160:	10c01b16 	blt	r2,r3,40061d0 <__muldf3+0x678>
 4006164:	00800804 	movi	r2,32
 4006168:	10c5c83a 	sub	r2,r2,r3
 400616c:	888a983a 	sll	r5,r17,r2
 4006170:	40c8d83a 	srl	r4,r8,r3
 4006174:	4084983a 	sll	r2,r8,r2
 4006178:	88e2d83a 	srl	r17,r17,r3
 400617c:	2906b03a 	or	r3,r5,r4
 4006180:	1004c03a 	cmpne	r2,r2,zero
 4006184:	1886b03a 	or	r3,r3,r2
 4006188:	188001cc 	andi	r2,r3,7
 400618c:	10000726 	beq	r2,zero,40061ac <__muldf3+0x654>
 4006190:	188003cc 	andi	r2,r3,15
 4006194:	01000104 	movi	r4,4
 4006198:	11000426 	beq	r2,r4,40061ac <__muldf3+0x654>
 400619c:	1805883a 	mov	r2,r3
 40061a0:	10c00104 	addi	r3,r2,4
 40061a4:	1885803a 	cmpltu	r2,r3,r2
 40061a8:	88a3883a 	add	r17,r17,r2
 40061ac:	8880202c 	andhi	r2,r17,128
 40061b0:	10001c26 	beq	r2,zero,4006224 <__muldf3+0x6cc>
 40061b4:	b02b883a 	mov	r21,r22
 40061b8:	00800044 	movi	r2,1
 40061bc:	000b883a 	mov	r5,zero
 40061c0:	0029883a 	mov	r20,zero
 40061c4:	003ec306 	br	4005cd4 <__ram_exceptions_end+0xfbfe5a8c>
 40061c8:	5805883a 	mov	r2,r11
 40061cc:	003f9906 	br	4006034 <__ram_exceptions_end+0xfbfe5dec>
 40061d0:	00bff844 	movi	r2,-31
 40061d4:	1145c83a 	sub	r2,r2,r5
 40061d8:	8888d83a 	srl	r4,r17,r2
 40061dc:	00800804 	movi	r2,32
 40061e0:	18801a26 	beq	r3,r2,400624c <__muldf3+0x6f4>
 40061e4:	00801004 	movi	r2,64
 40061e8:	10c5c83a 	sub	r2,r2,r3
 40061ec:	8884983a 	sll	r2,r17,r2
 40061f0:	1204b03a 	or	r2,r2,r8
 40061f4:	1004c03a 	cmpne	r2,r2,zero
 40061f8:	2084b03a 	or	r2,r4,r2
 40061fc:	144001cc 	andi	r17,r2,7
 4006200:	88000d1e 	bne	r17,zero,4006238 <__muldf3+0x6e0>
 4006204:	000b883a 	mov	r5,zero
 4006208:	1028d0fa 	srli	r20,r2,3
 400620c:	b02b883a 	mov	r21,r22
 4006210:	0005883a 	mov	r2,zero
 4006214:	a468b03a 	or	r20,r20,r17
 4006218:	003eae06 	br	4005cd4 <__ram_exceptions_end+0xfbfe5a8c>
 400621c:	1007883a 	mov	r3,r2
 4006220:	0023883a 	mov	r17,zero
 4006224:	880a927a 	slli	r5,r17,9
 4006228:	1805883a 	mov	r2,r3
 400622c:	8822977a 	slli	r17,r17,29
 4006230:	280ad33a 	srli	r5,r5,12
 4006234:	003ff406 	br	4006208 <__ram_exceptions_end+0xfbfe5fc0>
 4006238:	10c003cc 	andi	r3,r2,15
 400623c:	01000104 	movi	r4,4
 4006240:	193ff626 	beq	r3,r4,400621c <__ram_exceptions_end+0xfbfe5fd4>
 4006244:	0023883a 	mov	r17,zero
 4006248:	003fd506 	br	40061a0 <__ram_exceptions_end+0xfbfe5f58>
 400624c:	0005883a 	mov	r2,zero
 4006250:	003fe706 	br	40061f0 <__ram_exceptions_end+0xfbfe5fa8>
 4006254:	00800434 	movhi	r2,16
 4006258:	89400234 	orhi	r5,r17,8
 400625c:	10bfffc4 	addi	r2,r2,-1
 4006260:	b02b883a 	mov	r21,r22
 4006264:	288a703a 	and	r5,r5,r2
 4006268:	4029883a 	mov	r20,r8
 400626c:	003eff06 	br	4005e6c <__ram_exceptions_end+0xfbfe5c24>

04006270 <__subdf3>:
 4006270:	02000434 	movhi	r8,16
 4006274:	423fffc4 	addi	r8,r8,-1
 4006278:	defffb04 	addi	sp,sp,-20
 400627c:	2a14703a 	and	r10,r5,r8
 4006280:	3812d53a 	srli	r9,r7,20
 4006284:	3a10703a 	and	r8,r7,r8
 4006288:	2006d77a 	srli	r3,r4,29
 400628c:	3004d77a 	srli	r2,r6,29
 4006290:	dc000015 	stw	r16,0(sp)
 4006294:	501490fa 	slli	r10,r10,3
 4006298:	2820d53a 	srli	r16,r5,20
 400629c:	401090fa 	slli	r8,r8,3
 40062a0:	dc800215 	stw	r18,8(sp)
 40062a4:	dc400115 	stw	r17,4(sp)
 40062a8:	dfc00415 	stw	ra,16(sp)
 40062ac:	202290fa 	slli	r17,r4,3
 40062b0:	dcc00315 	stw	r19,12(sp)
 40062b4:	4a41ffcc 	andi	r9,r9,2047
 40062b8:	0101ffc4 	movi	r4,2047
 40062bc:	2824d7fa 	srli	r18,r5,31
 40062c0:	8401ffcc 	andi	r16,r16,2047
 40062c4:	50c6b03a 	or	r3,r10,r3
 40062c8:	380ed7fa 	srli	r7,r7,31
 40062cc:	408ab03a 	or	r5,r8,r2
 40062d0:	300c90fa 	slli	r6,r6,3
 40062d4:	49009626 	beq	r9,r4,4006530 <__subdf3+0x2c0>
 40062d8:	39c0005c 	xori	r7,r7,1
 40062dc:	8245c83a 	sub	r2,r16,r9
 40062e0:	3c807426 	beq	r7,r18,40064b4 <__subdf3+0x244>
 40062e4:	0080af0e 	bge	zero,r2,40065a4 <__subdf3+0x334>
 40062e8:	48002a1e 	bne	r9,zero,4006394 <__subdf3+0x124>
 40062ec:	2988b03a 	or	r4,r5,r6
 40062f0:	20009a1e 	bne	r4,zero,400655c <__subdf3+0x2ec>
 40062f4:	888001cc 	andi	r2,r17,7
 40062f8:	10000726 	beq	r2,zero,4006318 <__subdf3+0xa8>
 40062fc:	888003cc 	andi	r2,r17,15
 4006300:	01000104 	movi	r4,4
 4006304:	11000426 	beq	r2,r4,4006318 <__subdf3+0xa8>
 4006308:	890b883a 	add	r5,r17,r4
 400630c:	2c63803a 	cmpltu	r17,r5,r17
 4006310:	1c47883a 	add	r3,r3,r17
 4006314:	2823883a 	mov	r17,r5
 4006318:	1880202c 	andhi	r2,r3,128
 400631c:	10005926 	beq	r2,zero,4006484 <__subdf3+0x214>
 4006320:	84000044 	addi	r16,r16,1
 4006324:	0081ffc4 	movi	r2,2047
 4006328:	8080be26 	beq	r16,r2,4006624 <__subdf3+0x3b4>
 400632c:	017fe034 	movhi	r5,65408
 4006330:	297fffc4 	addi	r5,r5,-1
 4006334:	1946703a 	and	r3,r3,r5
 4006338:	1804977a 	slli	r2,r3,29
 400633c:	1806927a 	slli	r3,r3,9
 4006340:	8822d0fa 	srli	r17,r17,3
 4006344:	8401ffcc 	andi	r16,r16,2047
 4006348:	180ad33a 	srli	r5,r3,12
 400634c:	9100004c 	andi	r4,r18,1
 4006350:	1444b03a 	or	r2,r2,r17
 4006354:	80c1ffcc 	andi	r3,r16,2047
 4006358:	1820953a 	slli	r16,r3,20
 400635c:	20c03fcc 	andi	r3,r4,255
 4006360:	180897fa 	slli	r4,r3,31
 4006364:	00c00434 	movhi	r3,16
 4006368:	18ffffc4 	addi	r3,r3,-1
 400636c:	28c6703a 	and	r3,r5,r3
 4006370:	1c06b03a 	or	r3,r3,r16
 4006374:	1906b03a 	or	r3,r3,r4
 4006378:	dfc00417 	ldw	ra,16(sp)
 400637c:	dcc00317 	ldw	r19,12(sp)
 4006380:	dc800217 	ldw	r18,8(sp)
 4006384:	dc400117 	ldw	r17,4(sp)
 4006388:	dc000017 	ldw	r16,0(sp)
 400638c:	dec00504 	addi	sp,sp,20
 4006390:	f800283a 	ret
 4006394:	0101ffc4 	movi	r4,2047
 4006398:	813fd626 	beq	r16,r4,40062f4 <__ram_exceptions_end+0xfbfe60ac>
 400639c:	29402034 	orhi	r5,r5,128
 40063a0:	01000e04 	movi	r4,56
 40063a4:	2080a316 	blt	r4,r2,4006634 <__subdf3+0x3c4>
 40063a8:	010007c4 	movi	r4,31
 40063ac:	2080c616 	blt	r4,r2,40066c8 <__subdf3+0x458>
 40063b0:	01000804 	movi	r4,32
 40063b4:	2089c83a 	sub	r4,r4,r2
 40063b8:	2910983a 	sll	r8,r5,r4
 40063bc:	308ed83a 	srl	r7,r6,r2
 40063c0:	3108983a 	sll	r4,r6,r4
 40063c4:	2884d83a 	srl	r2,r5,r2
 40063c8:	41ccb03a 	or	r6,r8,r7
 40063cc:	2008c03a 	cmpne	r4,r4,zero
 40063d0:	310cb03a 	or	r6,r6,r4
 40063d4:	898dc83a 	sub	r6,r17,r6
 40063d8:	89a3803a 	cmpltu	r17,r17,r6
 40063dc:	1887c83a 	sub	r3,r3,r2
 40063e0:	1c47c83a 	sub	r3,r3,r17
 40063e4:	3023883a 	mov	r17,r6
 40063e8:	1880202c 	andhi	r2,r3,128
 40063ec:	10002326 	beq	r2,zero,400647c <__subdf3+0x20c>
 40063f0:	04c02034 	movhi	r19,128
 40063f4:	9cffffc4 	addi	r19,r19,-1
 40063f8:	1ce6703a 	and	r19,r3,r19
 40063fc:	98007a26 	beq	r19,zero,40065e8 <__subdf3+0x378>
 4006400:	9809883a 	mov	r4,r19
 4006404:	4006f800 	call	4006f80 <__clzsi2>
 4006408:	113ffe04 	addi	r4,r2,-8
 400640c:	00c007c4 	movi	r3,31
 4006410:	19007b16 	blt	r3,r4,4006600 <__subdf3+0x390>
 4006414:	00800804 	movi	r2,32
 4006418:	1105c83a 	sub	r2,r2,r4
 400641c:	8884d83a 	srl	r2,r17,r2
 4006420:	9906983a 	sll	r3,r19,r4
 4006424:	8922983a 	sll	r17,r17,r4
 4006428:	10c4b03a 	or	r2,r2,r3
 400642c:	24007816 	blt	r4,r16,4006610 <__subdf3+0x3a0>
 4006430:	2421c83a 	sub	r16,r4,r16
 4006434:	80c00044 	addi	r3,r16,1
 4006438:	010007c4 	movi	r4,31
 400643c:	20c09516 	blt	r4,r3,4006694 <__subdf3+0x424>
 4006440:	01400804 	movi	r5,32
 4006444:	28cbc83a 	sub	r5,r5,r3
 4006448:	88c8d83a 	srl	r4,r17,r3
 400644c:	8962983a 	sll	r17,r17,r5
 4006450:	114a983a 	sll	r5,r2,r5
 4006454:	10c6d83a 	srl	r3,r2,r3
 4006458:	8804c03a 	cmpne	r2,r17,zero
 400645c:	290ab03a 	or	r5,r5,r4
 4006460:	28a2b03a 	or	r17,r5,r2
 4006464:	0021883a 	mov	r16,zero
 4006468:	003fa206 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 400646c:	2090b03a 	or	r8,r4,r2
 4006470:	40018e26 	beq	r8,zero,4006aac <__subdf3+0x83c>
 4006474:	1007883a 	mov	r3,r2
 4006478:	2023883a 	mov	r17,r4
 400647c:	888001cc 	andi	r2,r17,7
 4006480:	103f9e1e 	bne	r2,zero,40062fc <__ram_exceptions_end+0xfbfe60b4>
 4006484:	1804977a 	slli	r2,r3,29
 4006488:	8822d0fa 	srli	r17,r17,3
 400648c:	1810d0fa 	srli	r8,r3,3
 4006490:	9100004c 	andi	r4,r18,1
 4006494:	1444b03a 	or	r2,r2,r17
 4006498:	00c1ffc4 	movi	r3,2047
 400649c:	80c02826 	beq	r16,r3,4006540 <__subdf3+0x2d0>
 40064a0:	01400434 	movhi	r5,16
 40064a4:	297fffc4 	addi	r5,r5,-1
 40064a8:	80e0703a 	and	r16,r16,r3
 40064ac:	414a703a 	and	r5,r8,r5
 40064b0:	003fa806 	br	4006354 <__ram_exceptions_end+0xfbfe610c>
 40064b4:	0080630e 	bge	zero,r2,4006644 <__subdf3+0x3d4>
 40064b8:	48003026 	beq	r9,zero,400657c <__subdf3+0x30c>
 40064bc:	0101ffc4 	movi	r4,2047
 40064c0:	813f8c26 	beq	r16,r4,40062f4 <__ram_exceptions_end+0xfbfe60ac>
 40064c4:	29402034 	orhi	r5,r5,128
 40064c8:	01000e04 	movi	r4,56
 40064cc:	2080a90e 	bge	r4,r2,4006774 <__subdf3+0x504>
 40064d0:	298cb03a 	or	r6,r5,r6
 40064d4:	3012c03a 	cmpne	r9,r6,zero
 40064d8:	0005883a 	mov	r2,zero
 40064dc:	4c53883a 	add	r9,r9,r17
 40064e0:	4c63803a 	cmpltu	r17,r9,r17
 40064e4:	10c7883a 	add	r3,r2,r3
 40064e8:	88c7883a 	add	r3,r17,r3
 40064ec:	4823883a 	mov	r17,r9
 40064f0:	1880202c 	andhi	r2,r3,128
 40064f4:	1000d026 	beq	r2,zero,4006838 <__subdf3+0x5c8>
 40064f8:	84000044 	addi	r16,r16,1
 40064fc:	0081ffc4 	movi	r2,2047
 4006500:	8080fe26 	beq	r16,r2,40068fc <__subdf3+0x68c>
 4006504:	00bfe034 	movhi	r2,65408
 4006508:	10bfffc4 	addi	r2,r2,-1
 400650c:	1886703a 	and	r3,r3,r2
 4006510:	880ad07a 	srli	r5,r17,1
 4006514:	180497fa 	slli	r2,r3,31
 4006518:	8900004c 	andi	r4,r17,1
 400651c:	2922b03a 	or	r17,r5,r4
 4006520:	1806d07a 	srli	r3,r3,1
 4006524:	1462b03a 	or	r17,r2,r17
 4006528:	3825883a 	mov	r18,r7
 400652c:	003f7106 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006530:	2984b03a 	or	r2,r5,r6
 4006534:	103f6826 	beq	r2,zero,40062d8 <__ram_exceptions_end+0xfbfe6090>
 4006538:	39c03fcc 	andi	r7,r7,255
 400653c:	003f6706 	br	40062dc <__ram_exceptions_end+0xfbfe6094>
 4006540:	4086b03a 	or	r3,r8,r2
 4006544:	18015226 	beq	r3,zero,4006a90 <__subdf3+0x820>
 4006548:	00c00434 	movhi	r3,16
 400654c:	41400234 	orhi	r5,r8,8
 4006550:	18ffffc4 	addi	r3,r3,-1
 4006554:	28ca703a 	and	r5,r5,r3
 4006558:	003f7e06 	br	4006354 <__ram_exceptions_end+0xfbfe610c>
 400655c:	10bfffc4 	addi	r2,r2,-1
 4006560:	1000491e 	bne	r2,zero,4006688 <__subdf3+0x418>
 4006564:	898fc83a 	sub	r7,r17,r6
 4006568:	89e3803a 	cmpltu	r17,r17,r7
 400656c:	1947c83a 	sub	r3,r3,r5
 4006570:	1c47c83a 	sub	r3,r3,r17
 4006574:	3823883a 	mov	r17,r7
 4006578:	003f9b06 	br	40063e8 <__ram_exceptions_end+0xfbfe61a0>
 400657c:	2988b03a 	or	r4,r5,r6
 4006580:	203f5c26 	beq	r4,zero,40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006584:	10bfffc4 	addi	r2,r2,-1
 4006588:	1000931e 	bne	r2,zero,40067d8 <__subdf3+0x568>
 400658c:	898d883a 	add	r6,r17,r6
 4006590:	3463803a 	cmpltu	r17,r6,r17
 4006594:	1947883a 	add	r3,r3,r5
 4006598:	88c7883a 	add	r3,r17,r3
 400659c:	3023883a 	mov	r17,r6
 40065a0:	003fd306 	br	40064f0 <__ram_exceptions_end+0xfbfe62a8>
 40065a4:	1000541e 	bne	r2,zero,40066f8 <__subdf3+0x488>
 40065a8:	80800044 	addi	r2,r16,1
 40065ac:	1081ffcc 	andi	r2,r2,2047
 40065b0:	01000044 	movi	r4,1
 40065b4:	2080a20e 	bge	r4,r2,4006840 <__subdf3+0x5d0>
 40065b8:	8989c83a 	sub	r4,r17,r6
 40065bc:	8905803a 	cmpltu	r2,r17,r4
 40065c0:	1967c83a 	sub	r19,r3,r5
 40065c4:	98a7c83a 	sub	r19,r19,r2
 40065c8:	9880202c 	andhi	r2,r19,128
 40065cc:	10006326 	beq	r2,zero,400675c <__subdf3+0x4ec>
 40065d0:	3463c83a 	sub	r17,r6,r17
 40065d4:	28c7c83a 	sub	r3,r5,r3
 40065d8:	344d803a 	cmpltu	r6,r6,r17
 40065dc:	19a7c83a 	sub	r19,r3,r6
 40065e0:	3825883a 	mov	r18,r7
 40065e4:	983f861e 	bne	r19,zero,4006400 <__ram_exceptions_end+0xfbfe61b8>
 40065e8:	8809883a 	mov	r4,r17
 40065ec:	4006f800 	call	4006f80 <__clzsi2>
 40065f0:	10800804 	addi	r2,r2,32
 40065f4:	113ffe04 	addi	r4,r2,-8
 40065f8:	00c007c4 	movi	r3,31
 40065fc:	193f850e 	bge	r3,r4,4006414 <__ram_exceptions_end+0xfbfe61cc>
 4006600:	10bff604 	addi	r2,r2,-40
 4006604:	8884983a 	sll	r2,r17,r2
 4006608:	0023883a 	mov	r17,zero
 400660c:	243f880e 	bge	r4,r16,4006430 <__ram_exceptions_end+0xfbfe61e8>
 4006610:	00ffe034 	movhi	r3,65408
 4006614:	18ffffc4 	addi	r3,r3,-1
 4006618:	8121c83a 	sub	r16,r16,r4
 400661c:	10c6703a 	and	r3,r2,r3
 4006620:	003f3406 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006624:	9100004c 	andi	r4,r18,1
 4006628:	000b883a 	mov	r5,zero
 400662c:	0005883a 	mov	r2,zero
 4006630:	003f4806 	br	4006354 <__ram_exceptions_end+0xfbfe610c>
 4006634:	298cb03a 	or	r6,r5,r6
 4006638:	300cc03a 	cmpne	r6,r6,zero
 400663c:	0005883a 	mov	r2,zero
 4006640:	003f6406 	br	40063d4 <__ram_exceptions_end+0xfbfe618c>
 4006644:	10009a1e 	bne	r2,zero,40068b0 <__subdf3+0x640>
 4006648:	82400044 	addi	r9,r16,1
 400664c:	4881ffcc 	andi	r2,r9,2047
 4006650:	02800044 	movi	r10,1
 4006654:	5080670e 	bge	r10,r2,40067f4 <__subdf3+0x584>
 4006658:	0081ffc4 	movi	r2,2047
 400665c:	4880af26 	beq	r9,r2,400691c <__subdf3+0x6ac>
 4006660:	898d883a 	add	r6,r17,r6
 4006664:	1945883a 	add	r2,r3,r5
 4006668:	3447803a 	cmpltu	r3,r6,r17
 400666c:	1887883a 	add	r3,r3,r2
 4006670:	182297fa 	slli	r17,r3,31
 4006674:	300cd07a 	srli	r6,r6,1
 4006678:	1806d07a 	srli	r3,r3,1
 400667c:	4821883a 	mov	r16,r9
 4006680:	89a2b03a 	or	r17,r17,r6
 4006684:	003f1b06 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006688:	0101ffc4 	movi	r4,2047
 400668c:	813f441e 	bne	r16,r4,40063a0 <__ram_exceptions_end+0xfbfe6158>
 4006690:	003f1806 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006694:	843ff844 	addi	r16,r16,-31
 4006698:	01400804 	movi	r5,32
 400669c:	1408d83a 	srl	r4,r2,r16
 40066a0:	19405026 	beq	r3,r5,40067e4 <__subdf3+0x574>
 40066a4:	01401004 	movi	r5,64
 40066a8:	28c7c83a 	sub	r3,r5,r3
 40066ac:	10c4983a 	sll	r2,r2,r3
 40066b0:	88a2b03a 	or	r17,r17,r2
 40066b4:	8822c03a 	cmpne	r17,r17,zero
 40066b8:	2462b03a 	or	r17,r4,r17
 40066bc:	0007883a 	mov	r3,zero
 40066c0:	0021883a 	mov	r16,zero
 40066c4:	003f6d06 	br	400647c <__ram_exceptions_end+0xfbfe6234>
 40066c8:	11fff804 	addi	r7,r2,-32
 40066cc:	01000804 	movi	r4,32
 40066d0:	29ced83a 	srl	r7,r5,r7
 40066d4:	11004526 	beq	r2,r4,40067ec <__subdf3+0x57c>
 40066d8:	01001004 	movi	r4,64
 40066dc:	2089c83a 	sub	r4,r4,r2
 40066e0:	2904983a 	sll	r2,r5,r4
 40066e4:	118cb03a 	or	r6,r2,r6
 40066e8:	300cc03a 	cmpne	r6,r6,zero
 40066ec:	398cb03a 	or	r6,r7,r6
 40066f0:	0005883a 	mov	r2,zero
 40066f4:	003f3706 	br	40063d4 <__ram_exceptions_end+0xfbfe618c>
 40066f8:	80002a26 	beq	r16,zero,40067a4 <__subdf3+0x534>
 40066fc:	0101ffc4 	movi	r4,2047
 4006700:	49006626 	beq	r9,r4,400689c <__subdf3+0x62c>
 4006704:	0085c83a 	sub	r2,zero,r2
 4006708:	18c02034 	orhi	r3,r3,128
 400670c:	01000e04 	movi	r4,56
 4006710:	20807e16 	blt	r4,r2,400690c <__subdf3+0x69c>
 4006714:	010007c4 	movi	r4,31
 4006718:	2080e716 	blt	r4,r2,4006ab8 <__subdf3+0x848>
 400671c:	01000804 	movi	r4,32
 4006720:	2089c83a 	sub	r4,r4,r2
 4006724:	1914983a 	sll	r10,r3,r4
 4006728:	8890d83a 	srl	r8,r17,r2
 400672c:	8908983a 	sll	r4,r17,r4
 4006730:	1884d83a 	srl	r2,r3,r2
 4006734:	5222b03a 	or	r17,r10,r8
 4006738:	2006c03a 	cmpne	r3,r4,zero
 400673c:	88e2b03a 	or	r17,r17,r3
 4006740:	3463c83a 	sub	r17,r6,r17
 4006744:	2885c83a 	sub	r2,r5,r2
 4006748:	344d803a 	cmpltu	r6,r6,r17
 400674c:	1187c83a 	sub	r3,r2,r6
 4006750:	4821883a 	mov	r16,r9
 4006754:	3825883a 	mov	r18,r7
 4006758:	003f2306 	br	40063e8 <__ram_exceptions_end+0xfbfe61a0>
 400675c:	24d0b03a 	or	r8,r4,r19
 4006760:	40001b1e 	bne	r8,zero,40067d0 <__subdf3+0x560>
 4006764:	0005883a 	mov	r2,zero
 4006768:	0009883a 	mov	r4,zero
 400676c:	0021883a 	mov	r16,zero
 4006770:	003f4906 	br	4006498 <__ram_exceptions_end+0xfbfe6250>
 4006774:	010007c4 	movi	r4,31
 4006778:	20803a16 	blt	r4,r2,4006864 <__subdf3+0x5f4>
 400677c:	01000804 	movi	r4,32
 4006780:	2089c83a 	sub	r4,r4,r2
 4006784:	2912983a 	sll	r9,r5,r4
 4006788:	3090d83a 	srl	r8,r6,r2
 400678c:	3108983a 	sll	r4,r6,r4
 4006790:	2884d83a 	srl	r2,r5,r2
 4006794:	4a12b03a 	or	r9,r9,r8
 4006798:	2008c03a 	cmpne	r4,r4,zero
 400679c:	4912b03a 	or	r9,r9,r4
 40067a0:	003f4e06 	br	40064dc <__ram_exceptions_end+0xfbfe6294>
 40067a4:	1c48b03a 	or	r4,r3,r17
 40067a8:	20003c26 	beq	r4,zero,400689c <__subdf3+0x62c>
 40067ac:	0084303a 	nor	r2,zero,r2
 40067b0:	1000381e 	bne	r2,zero,4006894 <__subdf3+0x624>
 40067b4:	3463c83a 	sub	r17,r6,r17
 40067b8:	28c5c83a 	sub	r2,r5,r3
 40067bc:	344d803a 	cmpltu	r6,r6,r17
 40067c0:	1187c83a 	sub	r3,r2,r6
 40067c4:	4821883a 	mov	r16,r9
 40067c8:	3825883a 	mov	r18,r7
 40067cc:	003f0606 	br	40063e8 <__ram_exceptions_end+0xfbfe61a0>
 40067d0:	2023883a 	mov	r17,r4
 40067d4:	003f0906 	br	40063fc <__ram_exceptions_end+0xfbfe61b4>
 40067d8:	0101ffc4 	movi	r4,2047
 40067dc:	813f3a1e 	bne	r16,r4,40064c8 <__ram_exceptions_end+0xfbfe6280>
 40067e0:	003ec406 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 40067e4:	0005883a 	mov	r2,zero
 40067e8:	003fb106 	br	40066b0 <__ram_exceptions_end+0xfbfe6468>
 40067ec:	0005883a 	mov	r2,zero
 40067f0:	003fbc06 	br	40066e4 <__ram_exceptions_end+0xfbfe649c>
 40067f4:	1c44b03a 	or	r2,r3,r17
 40067f8:	80008e1e 	bne	r16,zero,4006a34 <__subdf3+0x7c4>
 40067fc:	1000c826 	beq	r2,zero,4006b20 <__subdf3+0x8b0>
 4006800:	2984b03a 	or	r2,r5,r6
 4006804:	103ebb26 	beq	r2,zero,40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006808:	8989883a 	add	r4,r17,r6
 400680c:	1945883a 	add	r2,r3,r5
 4006810:	2447803a 	cmpltu	r3,r4,r17
 4006814:	1887883a 	add	r3,r3,r2
 4006818:	1880202c 	andhi	r2,r3,128
 400681c:	2023883a 	mov	r17,r4
 4006820:	103f1626 	beq	r2,zero,400647c <__ram_exceptions_end+0xfbfe6234>
 4006824:	00bfe034 	movhi	r2,65408
 4006828:	10bfffc4 	addi	r2,r2,-1
 400682c:	5021883a 	mov	r16,r10
 4006830:	1886703a 	and	r3,r3,r2
 4006834:	003eaf06 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006838:	3825883a 	mov	r18,r7
 400683c:	003f0f06 	br	400647c <__ram_exceptions_end+0xfbfe6234>
 4006840:	1c44b03a 	or	r2,r3,r17
 4006844:	8000251e 	bne	r16,zero,40068dc <__subdf3+0x66c>
 4006848:	1000661e 	bne	r2,zero,40069e4 <__subdf3+0x774>
 400684c:	2990b03a 	or	r8,r5,r6
 4006850:	40009626 	beq	r8,zero,4006aac <__subdf3+0x83c>
 4006854:	2807883a 	mov	r3,r5
 4006858:	3023883a 	mov	r17,r6
 400685c:	3825883a 	mov	r18,r7
 4006860:	003ea406 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006864:	127ff804 	addi	r9,r2,-32
 4006868:	01000804 	movi	r4,32
 400686c:	2a52d83a 	srl	r9,r5,r9
 4006870:	11008c26 	beq	r2,r4,4006aa4 <__subdf3+0x834>
 4006874:	01001004 	movi	r4,64
 4006878:	2085c83a 	sub	r2,r4,r2
 400687c:	2884983a 	sll	r2,r5,r2
 4006880:	118cb03a 	or	r6,r2,r6
 4006884:	300cc03a 	cmpne	r6,r6,zero
 4006888:	4992b03a 	or	r9,r9,r6
 400688c:	0005883a 	mov	r2,zero
 4006890:	003f1206 	br	40064dc <__ram_exceptions_end+0xfbfe6294>
 4006894:	0101ffc4 	movi	r4,2047
 4006898:	493f9c1e 	bne	r9,r4,400670c <__ram_exceptions_end+0xfbfe64c4>
 400689c:	2807883a 	mov	r3,r5
 40068a0:	3023883a 	mov	r17,r6
 40068a4:	4821883a 	mov	r16,r9
 40068a8:	3825883a 	mov	r18,r7
 40068ac:	003e9106 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 40068b0:	80001f1e 	bne	r16,zero,4006930 <__subdf3+0x6c0>
 40068b4:	1c48b03a 	or	r4,r3,r17
 40068b8:	20005a26 	beq	r4,zero,4006a24 <__subdf3+0x7b4>
 40068bc:	0084303a 	nor	r2,zero,r2
 40068c0:	1000561e 	bne	r2,zero,4006a1c <__subdf3+0x7ac>
 40068c4:	89a3883a 	add	r17,r17,r6
 40068c8:	1945883a 	add	r2,r3,r5
 40068cc:	898d803a 	cmpltu	r6,r17,r6
 40068d0:	3087883a 	add	r3,r6,r2
 40068d4:	4821883a 	mov	r16,r9
 40068d8:	003f0506 	br	40064f0 <__ram_exceptions_end+0xfbfe62a8>
 40068dc:	10002b1e 	bne	r2,zero,400698c <__subdf3+0x71c>
 40068e0:	2984b03a 	or	r2,r5,r6
 40068e4:	10008026 	beq	r2,zero,4006ae8 <__subdf3+0x878>
 40068e8:	2807883a 	mov	r3,r5
 40068ec:	3023883a 	mov	r17,r6
 40068f0:	3825883a 	mov	r18,r7
 40068f4:	0401ffc4 	movi	r16,2047
 40068f8:	003e7e06 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 40068fc:	3809883a 	mov	r4,r7
 4006900:	0011883a 	mov	r8,zero
 4006904:	0005883a 	mov	r2,zero
 4006908:	003ee306 	br	4006498 <__ram_exceptions_end+0xfbfe6250>
 400690c:	1c62b03a 	or	r17,r3,r17
 4006910:	8822c03a 	cmpne	r17,r17,zero
 4006914:	0005883a 	mov	r2,zero
 4006918:	003f8906 	br	4006740 <__ram_exceptions_end+0xfbfe64f8>
 400691c:	3809883a 	mov	r4,r7
 4006920:	4821883a 	mov	r16,r9
 4006924:	0011883a 	mov	r8,zero
 4006928:	0005883a 	mov	r2,zero
 400692c:	003eda06 	br	4006498 <__ram_exceptions_end+0xfbfe6250>
 4006930:	0101ffc4 	movi	r4,2047
 4006934:	49003b26 	beq	r9,r4,4006a24 <__subdf3+0x7b4>
 4006938:	0085c83a 	sub	r2,zero,r2
 400693c:	18c02034 	orhi	r3,r3,128
 4006940:	01000e04 	movi	r4,56
 4006944:	20806e16 	blt	r4,r2,4006b00 <__subdf3+0x890>
 4006948:	010007c4 	movi	r4,31
 400694c:	20807716 	blt	r4,r2,4006b2c <__subdf3+0x8bc>
 4006950:	01000804 	movi	r4,32
 4006954:	2089c83a 	sub	r4,r4,r2
 4006958:	1914983a 	sll	r10,r3,r4
 400695c:	8890d83a 	srl	r8,r17,r2
 4006960:	8908983a 	sll	r4,r17,r4
 4006964:	1884d83a 	srl	r2,r3,r2
 4006968:	5222b03a 	or	r17,r10,r8
 400696c:	2006c03a 	cmpne	r3,r4,zero
 4006970:	88e2b03a 	or	r17,r17,r3
 4006974:	89a3883a 	add	r17,r17,r6
 4006978:	1145883a 	add	r2,r2,r5
 400697c:	898d803a 	cmpltu	r6,r17,r6
 4006980:	3087883a 	add	r3,r6,r2
 4006984:	4821883a 	mov	r16,r9
 4006988:	003ed906 	br	40064f0 <__ram_exceptions_end+0xfbfe62a8>
 400698c:	2984b03a 	or	r2,r5,r6
 4006990:	10004226 	beq	r2,zero,4006a9c <__subdf3+0x82c>
 4006994:	1808d0fa 	srli	r4,r3,3
 4006998:	8822d0fa 	srli	r17,r17,3
 400699c:	1806977a 	slli	r3,r3,29
 40069a0:	2080022c 	andhi	r2,r4,8
 40069a4:	1c62b03a 	or	r17,r3,r17
 40069a8:	10000826 	beq	r2,zero,40069cc <__subdf3+0x75c>
 40069ac:	2812d0fa 	srli	r9,r5,3
 40069b0:	4880022c 	andhi	r2,r9,8
 40069b4:	1000051e 	bne	r2,zero,40069cc <__subdf3+0x75c>
 40069b8:	300cd0fa 	srli	r6,r6,3
 40069bc:	2804977a 	slli	r2,r5,29
 40069c0:	4809883a 	mov	r4,r9
 40069c4:	3825883a 	mov	r18,r7
 40069c8:	11a2b03a 	or	r17,r2,r6
 40069cc:	8806d77a 	srli	r3,r17,29
 40069d0:	200890fa 	slli	r4,r4,3
 40069d4:	882290fa 	slli	r17,r17,3
 40069d8:	0401ffc4 	movi	r16,2047
 40069dc:	1906b03a 	or	r3,r3,r4
 40069e0:	003e4406 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 40069e4:	2984b03a 	or	r2,r5,r6
 40069e8:	103e4226 	beq	r2,zero,40062f4 <__ram_exceptions_end+0xfbfe60ac>
 40069ec:	8989c83a 	sub	r4,r17,r6
 40069f0:	8911803a 	cmpltu	r8,r17,r4
 40069f4:	1945c83a 	sub	r2,r3,r5
 40069f8:	1205c83a 	sub	r2,r2,r8
 40069fc:	1200202c 	andhi	r8,r2,128
 4006a00:	403e9a26 	beq	r8,zero,400646c <__ram_exceptions_end+0xfbfe6224>
 4006a04:	3463c83a 	sub	r17,r6,r17
 4006a08:	28c5c83a 	sub	r2,r5,r3
 4006a0c:	344d803a 	cmpltu	r6,r6,r17
 4006a10:	1187c83a 	sub	r3,r2,r6
 4006a14:	3825883a 	mov	r18,r7
 4006a18:	003e3606 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006a1c:	0101ffc4 	movi	r4,2047
 4006a20:	493fc71e 	bne	r9,r4,4006940 <__ram_exceptions_end+0xfbfe66f8>
 4006a24:	2807883a 	mov	r3,r5
 4006a28:	3023883a 	mov	r17,r6
 4006a2c:	4821883a 	mov	r16,r9
 4006a30:	003e3006 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006a34:	10003626 	beq	r2,zero,4006b10 <__subdf3+0x8a0>
 4006a38:	2984b03a 	or	r2,r5,r6
 4006a3c:	10001726 	beq	r2,zero,4006a9c <__subdf3+0x82c>
 4006a40:	1808d0fa 	srli	r4,r3,3
 4006a44:	8822d0fa 	srli	r17,r17,3
 4006a48:	1806977a 	slli	r3,r3,29
 4006a4c:	2080022c 	andhi	r2,r4,8
 4006a50:	1c62b03a 	or	r17,r3,r17
 4006a54:	10000726 	beq	r2,zero,4006a74 <__subdf3+0x804>
 4006a58:	2812d0fa 	srli	r9,r5,3
 4006a5c:	4880022c 	andhi	r2,r9,8
 4006a60:	1000041e 	bne	r2,zero,4006a74 <__subdf3+0x804>
 4006a64:	300cd0fa 	srli	r6,r6,3
 4006a68:	2804977a 	slli	r2,r5,29
 4006a6c:	4809883a 	mov	r4,r9
 4006a70:	11a2b03a 	or	r17,r2,r6
 4006a74:	8806d77a 	srli	r3,r17,29
 4006a78:	200890fa 	slli	r4,r4,3
 4006a7c:	882290fa 	slli	r17,r17,3
 4006a80:	3825883a 	mov	r18,r7
 4006a84:	1906b03a 	or	r3,r3,r4
 4006a88:	0401ffc4 	movi	r16,2047
 4006a8c:	003e1906 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006a90:	000b883a 	mov	r5,zero
 4006a94:	0005883a 	mov	r2,zero
 4006a98:	003e2e06 	br	4006354 <__ram_exceptions_end+0xfbfe610c>
 4006a9c:	0401ffc4 	movi	r16,2047
 4006aa0:	003e1406 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006aa4:	0005883a 	mov	r2,zero
 4006aa8:	003f7506 	br	4006880 <__ram_exceptions_end+0xfbfe6638>
 4006aac:	0005883a 	mov	r2,zero
 4006ab0:	0009883a 	mov	r4,zero
 4006ab4:	003e7806 	br	4006498 <__ram_exceptions_end+0xfbfe6250>
 4006ab8:	123ff804 	addi	r8,r2,-32
 4006abc:	01000804 	movi	r4,32
 4006ac0:	1a10d83a 	srl	r8,r3,r8
 4006ac4:	11002526 	beq	r2,r4,4006b5c <__subdf3+0x8ec>
 4006ac8:	01001004 	movi	r4,64
 4006acc:	2085c83a 	sub	r2,r4,r2
 4006ad0:	1884983a 	sll	r2,r3,r2
 4006ad4:	1444b03a 	or	r2,r2,r17
 4006ad8:	1004c03a 	cmpne	r2,r2,zero
 4006adc:	40a2b03a 	or	r17,r8,r2
 4006ae0:	0005883a 	mov	r2,zero
 4006ae4:	003f1606 	br	4006740 <__ram_exceptions_end+0xfbfe64f8>
 4006ae8:	02000434 	movhi	r8,16
 4006aec:	0009883a 	mov	r4,zero
 4006af0:	423fffc4 	addi	r8,r8,-1
 4006af4:	00bfffc4 	movi	r2,-1
 4006af8:	0401ffc4 	movi	r16,2047
 4006afc:	003e6606 	br	4006498 <__ram_exceptions_end+0xfbfe6250>
 4006b00:	1c62b03a 	or	r17,r3,r17
 4006b04:	8822c03a 	cmpne	r17,r17,zero
 4006b08:	0005883a 	mov	r2,zero
 4006b0c:	003f9906 	br	4006974 <__ram_exceptions_end+0xfbfe672c>
 4006b10:	2807883a 	mov	r3,r5
 4006b14:	3023883a 	mov	r17,r6
 4006b18:	0401ffc4 	movi	r16,2047
 4006b1c:	003df506 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006b20:	2807883a 	mov	r3,r5
 4006b24:	3023883a 	mov	r17,r6
 4006b28:	003df206 	br	40062f4 <__ram_exceptions_end+0xfbfe60ac>
 4006b2c:	123ff804 	addi	r8,r2,-32
 4006b30:	01000804 	movi	r4,32
 4006b34:	1a10d83a 	srl	r8,r3,r8
 4006b38:	11000a26 	beq	r2,r4,4006b64 <__subdf3+0x8f4>
 4006b3c:	01001004 	movi	r4,64
 4006b40:	2085c83a 	sub	r2,r4,r2
 4006b44:	1884983a 	sll	r2,r3,r2
 4006b48:	1444b03a 	or	r2,r2,r17
 4006b4c:	1004c03a 	cmpne	r2,r2,zero
 4006b50:	40a2b03a 	or	r17,r8,r2
 4006b54:	0005883a 	mov	r2,zero
 4006b58:	003f8606 	br	4006974 <__ram_exceptions_end+0xfbfe672c>
 4006b5c:	0005883a 	mov	r2,zero
 4006b60:	003fdc06 	br	4006ad4 <__ram_exceptions_end+0xfbfe688c>
 4006b64:	0005883a 	mov	r2,zero
 4006b68:	003ff706 	br	4006b48 <__ram_exceptions_end+0xfbfe6900>

04006b6c <__fixdfsi>:
 4006b6c:	280cd53a 	srli	r6,r5,20
 4006b70:	00c00434 	movhi	r3,16
 4006b74:	18ffffc4 	addi	r3,r3,-1
 4006b78:	3181ffcc 	andi	r6,r6,2047
 4006b7c:	01c0ff84 	movi	r7,1022
 4006b80:	28c6703a 	and	r3,r5,r3
 4006b84:	280ad7fa 	srli	r5,r5,31
 4006b88:	3980120e 	bge	r7,r6,4006bd4 <__fixdfsi+0x68>
 4006b8c:	00810744 	movi	r2,1053
 4006b90:	11800c16 	blt	r2,r6,4006bc4 <__fixdfsi+0x58>
 4006b94:	00810cc4 	movi	r2,1075
 4006b98:	1185c83a 	sub	r2,r2,r6
 4006b9c:	01c007c4 	movi	r7,31
 4006ba0:	18c00434 	orhi	r3,r3,16
 4006ba4:	38800d16 	blt	r7,r2,4006bdc <__fixdfsi+0x70>
 4006ba8:	31befb44 	addi	r6,r6,-1043
 4006bac:	2084d83a 	srl	r2,r4,r2
 4006bb0:	1986983a 	sll	r3,r3,r6
 4006bb4:	1884b03a 	or	r2,r3,r2
 4006bb8:	28000726 	beq	r5,zero,4006bd8 <__fixdfsi+0x6c>
 4006bbc:	0085c83a 	sub	r2,zero,r2
 4006bc0:	f800283a 	ret
 4006bc4:	00a00034 	movhi	r2,32768
 4006bc8:	10bfffc4 	addi	r2,r2,-1
 4006bcc:	2885883a 	add	r2,r5,r2
 4006bd0:	f800283a 	ret
 4006bd4:	0005883a 	mov	r2,zero
 4006bd8:	f800283a 	ret
 4006bdc:	008104c4 	movi	r2,1043
 4006be0:	1185c83a 	sub	r2,r2,r6
 4006be4:	1884d83a 	srl	r2,r3,r2
 4006be8:	003ff306 	br	4006bb8 <__ram_exceptions_end+0xfbfe6970>

04006bec <__floatsidf>:
 4006bec:	defffd04 	addi	sp,sp,-12
 4006bf0:	dfc00215 	stw	ra,8(sp)
 4006bf4:	dc400115 	stw	r17,4(sp)
 4006bf8:	dc000015 	stw	r16,0(sp)
 4006bfc:	20002b26 	beq	r4,zero,4006cac <__floatsidf+0xc0>
 4006c00:	2023883a 	mov	r17,r4
 4006c04:	2020d7fa 	srli	r16,r4,31
 4006c08:	20002d16 	blt	r4,zero,4006cc0 <__floatsidf+0xd4>
 4006c0c:	8809883a 	mov	r4,r17
 4006c10:	4006f800 	call	4006f80 <__clzsi2>
 4006c14:	01410784 	movi	r5,1054
 4006c18:	288bc83a 	sub	r5,r5,r2
 4006c1c:	01010cc4 	movi	r4,1075
 4006c20:	2149c83a 	sub	r4,r4,r5
 4006c24:	00c007c4 	movi	r3,31
 4006c28:	1900160e 	bge	r3,r4,4006c84 <__floatsidf+0x98>
 4006c2c:	00c104c4 	movi	r3,1043
 4006c30:	1947c83a 	sub	r3,r3,r5
 4006c34:	88c6983a 	sll	r3,r17,r3
 4006c38:	00800434 	movhi	r2,16
 4006c3c:	10bfffc4 	addi	r2,r2,-1
 4006c40:	1886703a 	and	r3,r3,r2
 4006c44:	2941ffcc 	andi	r5,r5,2047
 4006c48:	800d883a 	mov	r6,r16
 4006c4c:	0005883a 	mov	r2,zero
 4006c50:	280a953a 	slli	r5,r5,20
 4006c54:	31803fcc 	andi	r6,r6,255
 4006c58:	01000434 	movhi	r4,16
 4006c5c:	300c97fa 	slli	r6,r6,31
 4006c60:	213fffc4 	addi	r4,r4,-1
 4006c64:	1906703a 	and	r3,r3,r4
 4006c68:	1946b03a 	or	r3,r3,r5
 4006c6c:	1986b03a 	or	r3,r3,r6
 4006c70:	dfc00217 	ldw	ra,8(sp)
 4006c74:	dc400117 	ldw	r17,4(sp)
 4006c78:	dc000017 	ldw	r16,0(sp)
 4006c7c:	dec00304 	addi	sp,sp,12
 4006c80:	f800283a 	ret
 4006c84:	00c002c4 	movi	r3,11
 4006c88:	1887c83a 	sub	r3,r3,r2
 4006c8c:	88c6d83a 	srl	r3,r17,r3
 4006c90:	8904983a 	sll	r2,r17,r4
 4006c94:	01000434 	movhi	r4,16
 4006c98:	213fffc4 	addi	r4,r4,-1
 4006c9c:	2941ffcc 	andi	r5,r5,2047
 4006ca0:	1906703a 	and	r3,r3,r4
 4006ca4:	800d883a 	mov	r6,r16
 4006ca8:	003fe906 	br	4006c50 <__ram_exceptions_end+0xfbfe6a08>
 4006cac:	000d883a 	mov	r6,zero
 4006cb0:	000b883a 	mov	r5,zero
 4006cb4:	0007883a 	mov	r3,zero
 4006cb8:	0005883a 	mov	r2,zero
 4006cbc:	003fe406 	br	4006c50 <__ram_exceptions_end+0xfbfe6a08>
 4006cc0:	0123c83a 	sub	r17,zero,r4
 4006cc4:	003fd106 	br	4006c0c <__ram_exceptions_end+0xfbfe69c4>

04006cc8 <__extendsfdf2>:
 4006cc8:	200ad5fa 	srli	r5,r4,23
 4006ccc:	defffd04 	addi	sp,sp,-12
 4006cd0:	dc400115 	stw	r17,4(sp)
 4006cd4:	29403fcc 	andi	r5,r5,255
 4006cd8:	29800044 	addi	r6,r5,1
 4006cdc:	04402034 	movhi	r17,128
 4006ce0:	dc000015 	stw	r16,0(sp)
 4006ce4:	8c7fffc4 	addi	r17,r17,-1
 4006ce8:	dfc00215 	stw	ra,8(sp)
 4006cec:	31803fcc 	andi	r6,r6,255
 4006cf0:	00800044 	movi	r2,1
 4006cf4:	8922703a 	and	r17,r17,r4
 4006cf8:	2020d7fa 	srli	r16,r4,31
 4006cfc:	1180110e 	bge	r2,r6,4006d44 <__extendsfdf2+0x7c>
 4006d00:	880cd0fa 	srli	r6,r17,3
 4006d04:	8822977a 	slli	r17,r17,29
 4006d08:	2940e004 	addi	r5,r5,896
 4006d0c:	2941ffcc 	andi	r5,r5,2047
 4006d10:	2804953a 	slli	r2,r5,20
 4006d14:	01400434 	movhi	r5,16
 4006d18:	800697fa 	slli	r3,r16,31
 4006d1c:	297fffc4 	addi	r5,r5,-1
 4006d20:	314a703a 	and	r5,r6,r5
 4006d24:	288ab03a 	or	r5,r5,r2
 4006d28:	28c6b03a 	or	r3,r5,r3
 4006d2c:	8805883a 	mov	r2,r17
 4006d30:	dfc00217 	ldw	ra,8(sp)
 4006d34:	dc400117 	ldw	r17,4(sp)
 4006d38:	dc000017 	ldw	r16,0(sp)
 4006d3c:	dec00304 	addi	sp,sp,12
 4006d40:	f800283a 	ret
 4006d44:	2800111e 	bne	r5,zero,4006d8c <__extendsfdf2+0xc4>
 4006d48:	88001c26 	beq	r17,zero,4006dbc <__extendsfdf2+0xf4>
 4006d4c:	8809883a 	mov	r4,r17
 4006d50:	4006f800 	call	4006f80 <__clzsi2>
 4006d54:	00c00284 	movi	r3,10
 4006d58:	18801b16 	blt	r3,r2,4006dc8 <__extendsfdf2+0x100>
 4006d5c:	018002c4 	movi	r6,11
 4006d60:	308dc83a 	sub	r6,r6,r2
 4006d64:	11000544 	addi	r4,r2,21
 4006d68:	8986d83a 	srl	r3,r17,r6
 4006d6c:	8922983a 	sll	r17,r17,r4
 4006d70:	0180e244 	movi	r6,905
 4006d74:	01400434 	movhi	r5,16
 4006d78:	3085c83a 	sub	r2,r6,r2
 4006d7c:	297fffc4 	addi	r5,r5,-1
 4006d80:	194c703a 	and	r6,r3,r5
 4006d84:	1141ffcc 	andi	r5,r2,2047
 4006d88:	003fe006 	br	4006d0c <__ram_exceptions_end+0xfbfe6ac4>
 4006d8c:	88000826 	beq	r17,zero,4006db0 <__extendsfdf2+0xe8>
 4006d90:	880cd0fa 	srli	r6,r17,3
 4006d94:	00800434 	movhi	r2,16
 4006d98:	10bfffc4 	addi	r2,r2,-1
 4006d9c:	31800234 	orhi	r6,r6,8
 4006da0:	8822977a 	slli	r17,r17,29
 4006da4:	308c703a 	and	r6,r6,r2
 4006da8:	0141ffc4 	movi	r5,2047
 4006dac:	003fd706 	br	4006d0c <__ram_exceptions_end+0xfbfe6ac4>
 4006db0:	0141ffc4 	movi	r5,2047
 4006db4:	000d883a 	mov	r6,zero
 4006db8:	003fd406 	br	4006d0c <__ram_exceptions_end+0xfbfe6ac4>
 4006dbc:	000b883a 	mov	r5,zero
 4006dc0:	000d883a 	mov	r6,zero
 4006dc4:	003fd106 	br	4006d0c <__ram_exceptions_end+0xfbfe6ac4>
 4006dc8:	11bffd44 	addi	r6,r2,-11
 4006dcc:	8986983a 	sll	r3,r17,r6
 4006dd0:	0023883a 	mov	r17,zero
 4006dd4:	003fe606 	br	4006d70 <__ram_exceptions_end+0xfbfe6b28>

04006dd8 <__truncdfsf2>:
 4006dd8:	2810d53a 	srli	r8,r5,20
 4006ddc:	01c00434 	movhi	r7,16
 4006de0:	39ffffc4 	addi	r7,r7,-1
 4006de4:	29ce703a 	and	r7,r5,r7
 4006de8:	4201ffcc 	andi	r8,r8,2047
 4006dec:	380e90fa 	slli	r7,r7,3
 4006df0:	200cd77a 	srli	r6,r4,29
 4006df4:	42400044 	addi	r9,r8,1
 4006df8:	4a41ffcc 	andi	r9,r9,2047
 4006dfc:	00c00044 	movi	r3,1
 4006e00:	280ad7fa 	srli	r5,r5,31
 4006e04:	31ceb03a 	or	r7,r6,r7
 4006e08:	200490fa 	slli	r2,r4,3
 4006e0c:	1a40230e 	bge	r3,r9,4006e9c <__truncdfsf2+0xc4>
 4006e10:	40ff2004 	addi	r3,r8,-896
 4006e14:	01803f84 	movi	r6,254
 4006e18:	30c01516 	blt	r6,r3,4006e70 <__truncdfsf2+0x98>
 4006e1c:	00c0380e 	bge	zero,r3,4006f00 <__truncdfsf2+0x128>
 4006e20:	200c91ba 	slli	r6,r4,6
 4006e24:	380e90fa 	slli	r7,r7,3
 4006e28:	1004d77a 	srli	r2,r2,29
 4006e2c:	300cc03a 	cmpne	r6,r6,zero
 4006e30:	31ccb03a 	or	r6,r6,r7
 4006e34:	308cb03a 	or	r6,r6,r2
 4006e38:	308001cc 	andi	r2,r6,7
 4006e3c:	10000426 	beq	r2,zero,4006e50 <__truncdfsf2+0x78>
 4006e40:	308003cc 	andi	r2,r6,15
 4006e44:	01000104 	movi	r4,4
 4006e48:	11000126 	beq	r2,r4,4006e50 <__truncdfsf2+0x78>
 4006e4c:	31800104 	addi	r6,r6,4
 4006e50:	3081002c 	andhi	r2,r6,1024
 4006e54:	10001626 	beq	r2,zero,4006eb0 <__truncdfsf2+0xd8>
 4006e58:	18c00044 	addi	r3,r3,1
 4006e5c:	00803fc4 	movi	r2,255
 4006e60:	18800326 	beq	r3,r2,4006e70 <__truncdfsf2+0x98>
 4006e64:	300c91ba 	slli	r6,r6,6
 4006e68:	300cd27a 	srli	r6,r6,9
 4006e6c:	00000206 	br	4006e78 <__truncdfsf2+0xa0>
 4006e70:	00ffffc4 	movi	r3,-1
 4006e74:	000d883a 	mov	r6,zero
 4006e78:	18c03fcc 	andi	r3,r3,255
 4006e7c:	180895fa 	slli	r4,r3,23
 4006e80:	00c02034 	movhi	r3,128
 4006e84:	280a97fa 	slli	r5,r5,31
 4006e88:	18ffffc4 	addi	r3,r3,-1
 4006e8c:	30c6703a 	and	r3,r6,r3
 4006e90:	1906b03a 	or	r3,r3,r4
 4006e94:	1944b03a 	or	r2,r3,r5
 4006e98:	f800283a 	ret
 4006e9c:	40000b1e 	bne	r8,zero,4006ecc <__truncdfsf2+0xf4>
 4006ea0:	388cb03a 	or	r6,r7,r2
 4006ea4:	0007883a 	mov	r3,zero
 4006ea8:	30000426 	beq	r6,zero,4006ebc <__truncdfsf2+0xe4>
 4006eac:	01800144 	movi	r6,5
 4006eb0:	00803fc4 	movi	r2,255
 4006eb4:	300cd0fa 	srli	r6,r6,3
 4006eb8:	18800a26 	beq	r3,r2,4006ee4 <__truncdfsf2+0x10c>
 4006ebc:	00802034 	movhi	r2,128
 4006ec0:	10bfffc4 	addi	r2,r2,-1
 4006ec4:	308c703a 	and	r6,r6,r2
 4006ec8:	003feb06 	br	4006e78 <__ram_exceptions_end+0xfbfe6c30>
 4006ecc:	3888b03a 	or	r4,r7,r2
 4006ed0:	203fe726 	beq	r4,zero,4006e70 <__ram_exceptions_end+0xfbfe6c28>
 4006ed4:	380c90fa 	slli	r6,r7,3
 4006ed8:	00c03fc4 	movi	r3,255
 4006edc:	31808034 	orhi	r6,r6,512
 4006ee0:	003fd506 	br	4006e38 <__ram_exceptions_end+0xfbfe6bf0>
 4006ee4:	303fe226 	beq	r6,zero,4006e70 <__ram_exceptions_end+0xfbfe6c28>
 4006ee8:	00802034 	movhi	r2,128
 4006eec:	31801034 	orhi	r6,r6,64
 4006ef0:	10bfffc4 	addi	r2,r2,-1
 4006ef4:	00ffffc4 	movi	r3,-1
 4006ef8:	308c703a 	and	r6,r6,r2
 4006efc:	003fde06 	br	4006e78 <__ram_exceptions_end+0xfbfe6c30>
 4006f00:	013ffa44 	movi	r4,-23
 4006f04:	19000e16 	blt	r3,r4,4006f40 <__truncdfsf2+0x168>
 4006f08:	01000784 	movi	r4,30
 4006f0c:	20c9c83a 	sub	r4,r4,r3
 4006f10:	018007c4 	movi	r6,31
 4006f14:	39c02034 	orhi	r7,r7,128
 4006f18:	31000b16 	blt	r6,r4,4006f48 <__truncdfsf2+0x170>
 4006f1c:	423f2084 	addi	r8,r8,-894
 4006f20:	120c983a 	sll	r6,r2,r8
 4006f24:	3a0e983a 	sll	r7,r7,r8
 4006f28:	1104d83a 	srl	r2,r2,r4
 4006f2c:	300cc03a 	cmpne	r6,r6,zero
 4006f30:	31ceb03a 	or	r7,r6,r7
 4006f34:	388cb03a 	or	r6,r7,r2
 4006f38:	0007883a 	mov	r3,zero
 4006f3c:	003fbe06 	br	4006e38 <__ram_exceptions_end+0xfbfe6bf0>
 4006f40:	0007883a 	mov	r3,zero
 4006f44:	003fd906 	br	4006eac <__ram_exceptions_end+0xfbfe6c64>
 4006f48:	01bfff84 	movi	r6,-2
 4006f4c:	30cdc83a 	sub	r6,r6,r3
 4006f50:	00c00804 	movi	r3,32
 4006f54:	398cd83a 	srl	r6,r7,r6
 4006f58:	20c00726 	beq	r4,r3,4006f78 <__truncdfsf2+0x1a0>
 4006f5c:	423f2884 	addi	r8,r8,-862
 4006f60:	3a0e983a 	sll	r7,r7,r8
 4006f64:	3884b03a 	or	r2,r7,r2
 4006f68:	1004c03a 	cmpne	r2,r2,zero
 4006f6c:	118cb03a 	or	r6,r2,r6
 4006f70:	0007883a 	mov	r3,zero
 4006f74:	003fb006 	br	4006e38 <__ram_exceptions_end+0xfbfe6bf0>
 4006f78:	000f883a 	mov	r7,zero
 4006f7c:	003ff906 	br	4006f64 <__ram_exceptions_end+0xfbfe6d1c>

04006f80 <__clzsi2>:
 4006f80:	00bfffd4 	movui	r2,65535
 4006f84:	11000536 	bltu	r2,r4,4006f9c <__clzsi2+0x1c>
 4006f88:	00803fc4 	movi	r2,255
 4006f8c:	11000f36 	bltu	r2,r4,4006fcc <__clzsi2+0x4c>
 4006f90:	00800804 	movi	r2,32
 4006f94:	0007883a 	mov	r3,zero
 4006f98:	00000506 	br	4006fb0 <__clzsi2+0x30>
 4006f9c:	00804034 	movhi	r2,256
 4006fa0:	10bfffc4 	addi	r2,r2,-1
 4006fa4:	11000c2e 	bgeu	r2,r4,4006fd8 <__clzsi2+0x58>
 4006fa8:	00800204 	movi	r2,8
 4006fac:	00c00604 	movi	r3,24
 4006fb0:	20c8d83a 	srl	r4,r4,r3
 4006fb4:	00c10074 	movhi	r3,1025
 4006fb8:	18f87d04 	addi	r3,r3,-7692
 4006fbc:	1909883a 	add	r4,r3,r4
 4006fc0:	20c00003 	ldbu	r3,0(r4)
 4006fc4:	10c5c83a 	sub	r2,r2,r3
 4006fc8:	f800283a 	ret
 4006fcc:	00800604 	movi	r2,24
 4006fd0:	00c00204 	movi	r3,8
 4006fd4:	003ff606 	br	4006fb0 <__ram_exceptions_end+0xfbfe6d68>
 4006fd8:	00800404 	movi	r2,16
 4006fdc:	1007883a 	mov	r3,r2
 4006fe0:	003ff306 	br	4006fb0 <__ram_exceptions_end+0xfbfe6d68>

04006fe4 <__errno>:
 4006fe4:	00810074 	movhi	r2,1025
 4006fe8:	10bfa004 	addi	r2,r2,-384
 4006fec:	10800017 	ldw	r2,0(r2)
 4006ff0:	f800283a 	ret

04006ff4 <_puts_r>:
 4006ff4:	defff604 	addi	sp,sp,-40
 4006ff8:	dc000715 	stw	r16,28(sp)
 4006ffc:	2021883a 	mov	r16,r4
 4007000:	2809883a 	mov	r4,r5
 4007004:	dc400815 	stw	r17,32(sp)
 4007008:	dfc00915 	stw	ra,36(sp)
 400700c:	2823883a 	mov	r17,r5
 4007010:	40070c80 	call	40070c8 <strlen>
 4007014:	10c00044 	addi	r3,r2,1
 4007018:	d8800115 	stw	r2,4(sp)
 400701c:	00810074 	movhi	r2,1025
 4007020:	10b8be04 	addi	r2,r2,-7432
 4007024:	d8800215 	stw	r2,8(sp)
 4007028:	00800044 	movi	r2,1
 400702c:	d8800315 	stw	r2,12(sp)
 4007030:	00800084 	movi	r2,2
 4007034:	dc400015 	stw	r17,0(sp)
 4007038:	d8c00615 	stw	r3,24(sp)
 400703c:	dec00415 	stw	sp,16(sp)
 4007040:	d8800515 	stw	r2,20(sp)
 4007044:	80000226 	beq	r16,zero,4007050 <_puts_r+0x5c>
 4007048:	80800e17 	ldw	r2,56(r16)
 400704c:	10001426 	beq	r2,zero,40070a0 <_puts_r+0xac>
 4007050:	81400217 	ldw	r5,8(r16)
 4007054:	2880030b 	ldhu	r2,12(r5)
 4007058:	10c8000c 	andi	r3,r2,8192
 400705c:	1800061e 	bne	r3,zero,4007078 <_puts_r+0x84>
 4007060:	29001917 	ldw	r4,100(r5)
 4007064:	00f7ffc4 	movi	r3,-8193
 4007068:	10880014 	ori	r2,r2,8192
 400706c:	20c6703a 	and	r3,r4,r3
 4007070:	2880030d 	sth	r2,12(r5)
 4007074:	28c01915 	stw	r3,100(r5)
 4007078:	d9800404 	addi	r6,sp,16
 400707c:	8009883a 	mov	r4,r16
 4007080:	40075000 	call	4007500 <__sfvwrite_r>
 4007084:	1000091e 	bne	r2,zero,40070ac <_puts_r+0xb8>
 4007088:	00800284 	movi	r2,10
 400708c:	dfc00917 	ldw	ra,36(sp)
 4007090:	dc400817 	ldw	r17,32(sp)
 4007094:	dc000717 	ldw	r16,28(sp)
 4007098:	dec00a04 	addi	sp,sp,40
 400709c:	f800283a 	ret
 40070a0:	8009883a 	mov	r4,r16
 40070a4:	40074b00 	call	40074b0 <__sinit>
 40070a8:	003fe906 	br	4007050 <__ram_exceptions_end+0xfbfe6e08>
 40070ac:	00bfffc4 	movi	r2,-1
 40070b0:	003ff606 	br	400708c <__ram_exceptions_end+0xfbfe6e44>

040070b4 <puts>:
 40070b4:	00810074 	movhi	r2,1025
 40070b8:	10bfa004 	addi	r2,r2,-384
 40070bc:	200b883a 	mov	r5,r4
 40070c0:	11000017 	ldw	r4,0(r2)
 40070c4:	4006ff41 	jmpi	4006ff4 <_puts_r>

040070c8 <strlen>:
 40070c8:	208000cc 	andi	r2,r4,3
 40070cc:	10002026 	beq	r2,zero,4007150 <strlen+0x88>
 40070d0:	20800007 	ldb	r2,0(r4)
 40070d4:	10002026 	beq	r2,zero,4007158 <strlen+0x90>
 40070d8:	2005883a 	mov	r2,r4
 40070dc:	00000206 	br	40070e8 <strlen+0x20>
 40070e0:	10c00007 	ldb	r3,0(r2)
 40070e4:	18001826 	beq	r3,zero,4007148 <strlen+0x80>
 40070e8:	10800044 	addi	r2,r2,1
 40070ec:	10c000cc 	andi	r3,r2,3
 40070f0:	183ffb1e 	bne	r3,zero,40070e0 <__ram_exceptions_end+0xfbfe6e98>
 40070f4:	10c00017 	ldw	r3,0(r2)
 40070f8:	01ffbff4 	movhi	r7,65279
 40070fc:	39ffbfc4 	addi	r7,r7,-257
 4007100:	00ca303a 	nor	r5,zero,r3
 4007104:	01a02074 	movhi	r6,32897
 4007108:	19c7883a 	add	r3,r3,r7
 400710c:	31a02004 	addi	r6,r6,-32640
 4007110:	1946703a 	and	r3,r3,r5
 4007114:	1986703a 	and	r3,r3,r6
 4007118:	1800091e 	bne	r3,zero,4007140 <strlen+0x78>
 400711c:	10800104 	addi	r2,r2,4
 4007120:	10c00017 	ldw	r3,0(r2)
 4007124:	19cb883a 	add	r5,r3,r7
 4007128:	00c6303a 	nor	r3,zero,r3
 400712c:	28c6703a 	and	r3,r5,r3
 4007130:	1986703a 	and	r3,r3,r6
 4007134:	183ff926 	beq	r3,zero,400711c <__ram_exceptions_end+0xfbfe6ed4>
 4007138:	00000106 	br	4007140 <strlen+0x78>
 400713c:	10800044 	addi	r2,r2,1
 4007140:	10c00007 	ldb	r3,0(r2)
 4007144:	183ffd1e 	bne	r3,zero,400713c <__ram_exceptions_end+0xfbfe6ef4>
 4007148:	1105c83a 	sub	r2,r2,r4
 400714c:	f800283a 	ret
 4007150:	2005883a 	mov	r2,r4
 4007154:	003fe706 	br	40070f4 <__ram_exceptions_end+0xfbfe6eac>
 4007158:	0005883a 	mov	r2,zero
 400715c:	f800283a 	ret

04007160 <__fp_unlock>:
 4007160:	0005883a 	mov	r2,zero
 4007164:	f800283a 	ret

04007168 <_cleanup_r>:
 4007168:	01410074 	movhi	r5,1025
 400716c:	29643f04 	addi	r5,r5,-28420
 4007170:	4007a801 	jmpi	4007a80 <_fwalk_reent>

04007174 <__sinit.part.1>:
 4007174:	defff704 	addi	sp,sp,-36
 4007178:	00c10034 	movhi	r3,1024
 400717c:	dfc00815 	stw	ra,32(sp)
 4007180:	ddc00715 	stw	r23,28(sp)
 4007184:	dd800615 	stw	r22,24(sp)
 4007188:	dd400515 	stw	r21,20(sp)
 400718c:	dd000415 	stw	r20,16(sp)
 4007190:	dcc00315 	stw	r19,12(sp)
 4007194:	dc800215 	stw	r18,8(sp)
 4007198:	dc400115 	stw	r17,4(sp)
 400719c:	dc000015 	stw	r16,0(sp)
 40071a0:	18dc5a04 	addi	r3,r3,29032
 40071a4:	24000117 	ldw	r16,4(r4)
 40071a8:	20c00f15 	stw	r3,60(r4)
 40071ac:	2080bb04 	addi	r2,r4,748
 40071b0:	00c000c4 	movi	r3,3
 40071b4:	20c0b915 	stw	r3,740(r4)
 40071b8:	2080ba15 	stw	r2,744(r4)
 40071bc:	2000b815 	stw	zero,736(r4)
 40071c0:	05c00204 	movi	r23,8
 40071c4:	00800104 	movi	r2,4
 40071c8:	2025883a 	mov	r18,r4
 40071cc:	b80d883a 	mov	r6,r23
 40071d0:	81001704 	addi	r4,r16,92
 40071d4:	000b883a 	mov	r5,zero
 40071d8:	80000015 	stw	zero,0(r16)
 40071dc:	80000115 	stw	zero,4(r16)
 40071e0:	80000215 	stw	zero,8(r16)
 40071e4:	8080030d 	sth	r2,12(r16)
 40071e8:	80001915 	stw	zero,100(r16)
 40071ec:	8000038d 	sth	zero,14(r16)
 40071f0:	80000415 	stw	zero,16(r16)
 40071f4:	80000515 	stw	zero,20(r16)
 40071f8:	80000615 	stw	zero,24(r16)
 40071fc:	40086d80 	call	40086d8 <memset>
 4007200:	05810074 	movhi	r22,1025
 4007204:	94400217 	ldw	r17,8(r18)
 4007208:	05410074 	movhi	r21,1025
 400720c:	05010074 	movhi	r20,1025
 4007210:	04c10074 	movhi	r19,1025
 4007214:	b5a36e04 	addi	r22,r22,-29256
 4007218:	ad638504 	addi	r21,r21,-29164
 400721c:	a523a404 	addi	r20,r20,-29040
 4007220:	9ce3bb04 	addi	r19,r19,-28948
 4007224:	85800815 	stw	r22,32(r16)
 4007228:	85400915 	stw	r21,36(r16)
 400722c:	85000a15 	stw	r20,40(r16)
 4007230:	84c00b15 	stw	r19,44(r16)
 4007234:	84000715 	stw	r16,28(r16)
 4007238:	00800284 	movi	r2,10
 400723c:	8880030d 	sth	r2,12(r17)
 4007240:	00800044 	movi	r2,1
 4007244:	b80d883a 	mov	r6,r23
 4007248:	89001704 	addi	r4,r17,92
 400724c:	000b883a 	mov	r5,zero
 4007250:	88000015 	stw	zero,0(r17)
 4007254:	88000115 	stw	zero,4(r17)
 4007258:	88000215 	stw	zero,8(r17)
 400725c:	88001915 	stw	zero,100(r17)
 4007260:	8880038d 	sth	r2,14(r17)
 4007264:	88000415 	stw	zero,16(r17)
 4007268:	88000515 	stw	zero,20(r17)
 400726c:	88000615 	stw	zero,24(r17)
 4007270:	40086d80 	call	40086d8 <memset>
 4007274:	94000317 	ldw	r16,12(r18)
 4007278:	00800484 	movi	r2,18
 400727c:	8c400715 	stw	r17,28(r17)
 4007280:	8d800815 	stw	r22,32(r17)
 4007284:	8d400915 	stw	r21,36(r17)
 4007288:	8d000a15 	stw	r20,40(r17)
 400728c:	8cc00b15 	stw	r19,44(r17)
 4007290:	8080030d 	sth	r2,12(r16)
 4007294:	00800084 	movi	r2,2
 4007298:	80000015 	stw	zero,0(r16)
 400729c:	80000115 	stw	zero,4(r16)
 40072a0:	80000215 	stw	zero,8(r16)
 40072a4:	80001915 	stw	zero,100(r16)
 40072a8:	8080038d 	sth	r2,14(r16)
 40072ac:	80000415 	stw	zero,16(r16)
 40072b0:	80000515 	stw	zero,20(r16)
 40072b4:	80000615 	stw	zero,24(r16)
 40072b8:	b80d883a 	mov	r6,r23
 40072bc:	000b883a 	mov	r5,zero
 40072c0:	81001704 	addi	r4,r16,92
 40072c4:	40086d80 	call	40086d8 <memset>
 40072c8:	00800044 	movi	r2,1
 40072cc:	84000715 	stw	r16,28(r16)
 40072d0:	85800815 	stw	r22,32(r16)
 40072d4:	85400915 	stw	r21,36(r16)
 40072d8:	85000a15 	stw	r20,40(r16)
 40072dc:	84c00b15 	stw	r19,44(r16)
 40072e0:	90800e15 	stw	r2,56(r18)
 40072e4:	dfc00817 	ldw	ra,32(sp)
 40072e8:	ddc00717 	ldw	r23,28(sp)
 40072ec:	dd800617 	ldw	r22,24(sp)
 40072f0:	dd400517 	ldw	r21,20(sp)
 40072f4:	dd000417 	ldw	r20,16(sp)
 40072f8:	dcc00317 	ldw	r19,12(sp)
 40072fc:	dc800217 	ldw	r18,8(sp)
 4007300:	dc400117 	ldw	r17,4(sp)
 4007304:	dc000017 	ldw	r16,0(sp)
 4007308:	dec00904 	addi	sp,sp,36
 400730c:	f800283a 	ret

04007310 <__fp_lock>:
 4007310:	0005883a 	mov	r2,zero
 4007314:	f800283a 	ret

04007318 <__sfmoreglue>:
 4007318:	defffc04 	addi	sp,sp,-16
 400731c:	dc400115 	stw	r17,4(sp)
 4007320:	2c7fffc4 	addi	r17,r5,-1
 4007324:	8c401a24 	muli	r17,r17,104
 4007328:	dc800215 	stw	r18,8(sp)
 400732c:	2825883a 	mov	r18,r5
 4007330:	89401d04 	addi	r5,r17,116
 4007334:	dc000015 	stw	r16,0(sp)
 4007338:	dfc00315 	stw	ra,12(sp)
 400733c:	4007b440 	call	4007b44 <_malloc_r>
 4007340:	1021883a 	mov	r16,r2
 4007344:	10000726 	beq	r2,zero,4007364 <__sfmoreglue+0x4c>
 4007348:	11000304 	addi	r4,r2,12
 400734c:	10000015 	stw	zero,0(r2)
 4007350:	14800115 	stw	r18,4(r2)
 4007354:	11000215 	stw	r4,8(r2)
 4007358:	89801a04 	addi	r6,r17,104
 400735c:	000b883a 	mov	r5,zero
 4007360:	40086d80 	call	40086d8 <memset>
 4007364:	8005883a 	mov	r2,r16
 4007368:	dfc00317 	ldw	ra,12(sp)
 400736c:	dc800217 	ldw	r18,8(sp)
 4007370:	dc400117 	ldw	r17,4(sp)
 4007374:	dc000017 	ldw	r16,0(sp)
 4007378:	dec00404 	addi	sp,sp,16
 400737c:	f800283a 	ret

04007380 <__sfp>:
 4007380:	defffb04 	addi	sp,sp,-20
 4007384:	dc000015 	stw	r16,0(sp)
 4007388:	04010074 	movhi	r16,1025
 400738c:	843f9f04 	addi	r16,r16,-388
 4007390:	dcc00315 	stw	r19,12(sp)
 4007394:	2027883a 	mov	r19,r4
 4007398:	81000017 	ldw	r4,0(r16)
 400739c:	dfc00415 	stw	ra,16(sp)
 40073a0:	dc800215 	stw	r18,8(sp)
 40073a4:	20800e17 	ldw	r2,56(r4)
 40073a8:	dc400115 	stw	r17,4(sp)
 40073ac:	1000021e 	bne	r2,zero,40073b8 <__sfp+0x38>
 40073b0:	40071740 	call	4007174 <__sinit.part.1>
 40073b4:	81000017 	ldw	r4,0(r16)
 40073b8:	2480b804 	addi	r18,r4,736
 40073bc:	047fffc4 	movi	r17,-1
 40073c0:	91000117 	ldw	r4,4(r18)
 40073c4:	94000217 	ldw	r16,8(r18)
 40073c8:	213fffc4 	addi	r4,r4,-1
 40073cc:	20000a16 	blt	r4,zero,40073f8 <__sfp+0x78>
 40073d0:	8080030f 	ldh	r2,12(r16)
 40073d4:	10000c26 	beq	r2,zero,4007408 <__sfp+0x88>
 40073d8:	80c01d04 	addi	r3,r16,116
 40073dc:	00000206 	br	40073e8 <__sfp+0x68>
 40073e0:	18bfe60f 	ldh	r2,-104(r3)
 40073e4:	10000826 	beq	r2,zero,4007408 <__sfp+0x88>
 40073e8:	213fffc4 	addi	r4,r4,-1
 40073ec:	1c3ffd04 	addi	r16,r3,-12
 40073f0:	18c01a04 	addi	r3,r3,104
 40073f4:	247ffa1e 	bne	r4,r17,40073e0 <__ram_exceptions_end+0xfbfe7198>
 40073f8:	90800017 	ldw	r2,0(r18)
 40073fc:	10001d26 	beq	r2,zero,4007474 <__sfp+0xf4>
 4007400:	1025883a 	mov	r18,r2
 4007404:	003fee06 	br	40073c0 <__ram_exceptions_end+0xfbfe7178>
 4007408:	00bfffc4 	movi	r2,-1
 400740c:	8080038d 	sth	r2,14(r16)
 4007410:	00800044 	movi	r2,1
 4007414:	8080030d 	sth	r2,12(r16)
 4007418:	80001915 	stw	zero,100(r16)
 400741c:	80000015 	stw	zero,0(r16)
 4007420:	80000215 	stw	zero,8(r16)
 4007424:	80000115 	stw	zero,4(r16)
 4007428:	80000415 	stw	zero,16(r16)
 400742c:	80000515 	stw	zero,20(r16)
 4007430:	80000615 	stw	zero,24(r16)
 4007434:	01800204 	movi	r6,8
 4007438:	000b883a 	mov	r5,zero
 400743c:	81001704 	addi	r4,r16,92
 4007440:	40086d80 	call	40086d8 <memset>
 4007444:	8005883a 	mov	r2,r16
 4007448:	80000c15 	stw	zero,48(r16)
 400744c:	80000d15 	stw	zero,52(r16)
 4007450:	80001115 	stw	zero,68(r16)
 4007454:	80001215 	stw	zero,72(r16)
 4007458:	dfc00417 	ldw	ra,16(sp)
 400745c:	dcc00317 	ldw	r19,12(sp)
 4007460:	dc800217 	ldw	r18,8(sp)
 4007464:	dc400117 	ldw	r17,4(sp)
 4007468:	dc000017 	ldw	r16,0(sp)
 400746c:	dec00504 	addi	sp,sp,20
 4007470:	f800283a 	ret
 4007474:	01400104 	movi	r5,4
 4007478:	9809883a 	mov	r4,r19
 400747c:	40073180 	call	4007318 <__sfmoreglue>
 4007480:	90800015 	stw	r2,0(r18)
 4007484:	103fde1e 	bne	r2,zero,4007400 <__ram_exceptions_end+0xfbfe71b8>
 4007488:	00800304 	movi	r2,12
 400748c:	98800015 	stw	r2,0(r19)
 4007490:	0005883a 	mov	r2,zero
 4007494:	003ff006 	br	4007458 <__ram_exceptions_end+0xfbfe7210>

04007498 <_cleanup>:
 4007498:	00810074 	movhi	r2,1025
 400749c:	10bf9f04 	addi	r2,r2,-388
 40074a0:	11000017 	ldw	r4,0(r2)
 40074a4:	01410074 	movhi	r5,1025
 40074a8:	29643f04 	addi	r5,r5,-28420
 40074ac:	4007a801 	jmpi	4007a80 <_fwalk_reent>

040074b0 <__sinit>:
 40074b0:	20800e17 	ldw	r2,56(r4)
 40074b4:	10000126 	beq	r2,zero,40074bc <__sinit+0xc>
 40074b8:	f800283a 	ret
 40074bc:	40071741 	jmpi	4007174 <__sinit.part.1>

040074c0 <__sfp_lock_acquire>:
 40074c0:	f800283a 	ret

040074c4 <__sfp_lock_release>:
 40074c4:	f800283a 	ret

040074c8 <__sinit_lock_acquire>:
 40074c8:	f800283a 	ret

040074cc <__sinit_lock_release>:
 40074cc:	f800283a 	ret

040074d0 <__fp_lock_all>:
 40074d0:	00810074 	movhi	r2,1025
 40074d4:	10bfa004 	addi	r2,r2,-384
 40074d8:	11000017 	ldw	r4,0(r2)
 40074dc:	01410034 	movhi	r5,1024
 40074e0:	295cc404 	addi	r5,r5,29456
 40074e4:	40079bc1 	jmpi	40079bc <_fwalk>

040074e8 <__fp_unlock_all>:
 40074e8:	00810074 	movhi	r2,1025
 40074ec:	10bfa004 	addi	r2,r2,-384
 40074f0:	11000017 	ldw	r4,0(r2)
 40074f4:	01410034 	movhi	r5,1024
 40074f8:	295c5804 	addi	r5,r5,29024
 40074fc:	40079bc1 	jmpi	40079bc <_fwalk>

04007500 <__sfvwrite_r>:
 4007500:	30800217 	ldw	r2,8(r6)
 4007504:	10006726 	beq	r2,zero,40076a4 <__sfvwrite_r+0x1a4>
 4007508:	28c0030b 	ldhu	r3,12(r5)
 400750c:	defff404 	addi	sp,sp,-48
 4007510:	dd400715 	stw	r21,28(sp)
 4007514:	dd000615 	stw	r20,24(sp)
 4007518:	dc000215 	stw	r16,8(sp)
 400751c:	dfc00b15 	stw	ra,44(sp)
 4007520:	df000a15 	stw	fp,40(sp)
 4007524:	ddc00915 	stw	r23,36(sp)
 4007528:	dd800815 	stw	r22,32(sp)
 400752c:	dcc00515 	stw	r19,20(sp)
 4007530:	dc800415 	stw	r18,16(sp)
 4007534:	dc400315 	stw	r17,12(sp)
 4007538:	1880020c 	andi	r2,r3,8
 400753c:	2821883a 	mov	r16,r5
 4007540:	202b883a 	mov	r21,r4
 4007544:	3029883a 	mov	r20,r6
 4007548:	10002726 	beq	r2,zero,40075e8 <__sfvwrite_r+0xe8>
 400754c:	28800417 	ldw	r2,16(r5)
 4007550:	10002526 	beq	r2,zero,40075e8 <__sfvwrite_r+0xe8>
 4007554:	1880008c 	andi	r2,r3,2
 4007558:	a4400017 	ldw	r17,0(r20)
 400755c:	10002a26 	beq	r2,zero,4007608 <__sfvwrite_r+0x108>
 4007560:	05a00034 	movhi	r22,32768
 4007564:	0027883a 	mov	r19,zero
 4007568:	0025883a 	mov	r18,zero
 400756c:	b5bf0004 	addi	r22,r22,-1024
 4007570:	980d883a 	mov	r6,r19
 4007574:	a809883a 	mov	r4,r21
 4007578:	90004626 	beq	r18,zero,4007694 <__sfvwrite_r+0x194>
 400757c:	900f883a 	mov	r7,r18
 4007580:	b480022e 	bgeu	r22,r18,400758c <__sfvwrite_r+0x8c>
 4007584:	01e00034 	movhi	r7,32768
 4007588:	39ff0004 	addi	r7,r7,-1024
 400758c:	80800917 	ldw	r2,36(r16)
 4007590:	81400717 	ldw	r5,28(r16)
 4007594:	103ee83a 	callr	r2
 4007598:	0080570e 	bge	zero,r2,40076f8 <__sfvwrite_r+0x1f8>
 400759c:	a0c00217 	ldw	r3,8(r20)
 40075a0:	98a7883a 	add	r19,r19,r2
 40075a4:	90a5c83a 	sub	r18,r18,r2
 40075a8:	1885c83a 	sub	r2,r3,r2
 40075ac:	a0800215 	stw	r2,8(r20)
 40075b0:	103fef1e 	bne	r2,zero,4007570 <__ram_exceptions_end+0xfbfe7328>
 40075b4:	0005883a 	mov	r2,zero
 40075b8:	dfc00b17 	ldw	ra,44(sp)
 40075bc:	df000a17 	ldw	fp,40(sp)
 40075c0:	ddc00917 	ldw	r23,36(sp)
 40075c4:	dd800817 	ldw	r22,32(sp)
 40075c8:	dd400717 	ldw	r21,28(sp)
 40075cc:	dd000617 	ldw	r20,24(sp)
 40075d0:	dcc00517 	ldw	r19,20(sp)
 40075d4:	dc800417 	ldw	r18,16(sp)
 40075d8:	dc400317 	ldw	r17,12(sp)
 40075dc:	dc000217 	ldw	r16,8(sp)
 40075e0:	dec00c04 	addi	sp,sp,48
 40075e4:	f800283a 	ret
 40075e8:	800b883a 	mov	r5,r16
 40075ec:	a809883a 	mov	r4,r21
 40075f0:	4008f540 	call	4008f54 <__swsetup_r>
 40075f4:	1000eb1e 	bne	r2,zero,40079a4 <__sfvwrite_r+0x4a4>
 40075f8:	80c0030b 	ldhu	r3,12(r16)
 40075fc:	a4400017 	ldw	r17,0(r20)
 4007600:	1880008c 	andi	r2,r3,2
 4007604:	103fd61e 	bne	r2,zero,4007560 <__ram_exceptions_end+0xfbfe7318>
 4007608:	1880004c 	andi	r2,r3,1
 400760c:	10003f1e 	bne	r2,zero,400770c <__sfvwrite_r+0x20c>
 4007610:	0039883a 	mov	fp,zero
 4007614:	0025883a 	mov	r18,zero
 4007618:	90001a26 	beq	r18,zero,4007684 <__sfvwrite_r+0x184>
 400761c:	1880800c 	andi	r2,r3,512
 4007620:	84c00217 	ldw	r19,8(r16)
 4007624:	10002126 	beq	r2,zero,40076ac <__sfvwrite_r+0x1ac>
 4007628:	982f883a 	mov	r23,r19
 400762c:	94c09336 	bltu	r18,r19,400787c <__sfvwrite_r+0x37c>
 4007630:	1881200c 	andi	r2,r3,1152
 4007634:	10009e1e 	bne	r2,zero,40078b0 <__sfvwrite_r+0x3b0>
 4007638:	81000017 	ldw	r4,0(r16)
 400763c:	b80d883a 	mov	r6,r23
 4007640:	e00b883a 	mov	r5,fp
 4007644:	400857c0 	call	400857c <memmove>
 4007648:	80c00217 	ldw	r3,8(r16)
 400764c:	81000017 	ldw	r4,0(r16)
 4007650:	9005883a 	mov	r2,r18
 4007654:	1ce7c83a 	sub	r19,r3,r19
 4007658:	25cf883a 	add	r7,r4,r23
 400765c:	84c00215 	stw	r19,8(r16)
 4007660:	81c00015 	stw	r7,0(r16)
 4007664:	a0c00217 	ldw	r3,8(r20)
 4007668:	e0b9883a 	add	fp,fp,r2
 400766c:	90a5c83a 	sub	r18,r18,r2
 4007670:	18a7c83a 	sub	r19,r3,r2
 4007674:	a4c00215 	stw	r19,8(r20)
 4007678:	983fce26 	beq	r19,zero,40075b4 <__ram_exceptions_end+0xfbfe736c>
 400767c:	80c0030b 	ldhu	r3,12(r16)
 4007680:	903fe61e 	bne	r18,zero,400761c <__ram_exceptions_end+0xfbfe73d4>
 4007684:	8f000017 	ldw	fp,0(r17)
 4007688:	8c800117 	ldw	r18,4(r17)
 400768c:	8c400204 	addi	r17,r17,8
 4007690:	003fe106 	br	4007618 <__ram_exceptions_end+0xfbfe73d0>
 4007694:	8cc00017 	ldw	r19,0(r17)
 4007698:	8c800117 	ldw	r18,4(r17)
 400769c:	8c400204 	addi	r17,r17,8
 40076a0:	003fb306 	br	4007570 <__ram_exceptions_end+0xfbfe7328>
 40076a4:	0005883a 	mov	r2,zero
 40076a8:	f800283a 	ret
 40076ac:	81000017 	ldw	r4,0(r16)
 40076b0:	80800417 	ldw	r2,16(r16)
 40076b4:	11005736 	bltu	r2,r4,4007814 <__sfvwrite_r+0x314>
 40076b8:	85c00517 	ldw	r23,20(r16)
 40076bc:	95c05536 	bltu	r18,r23,4007814 <__sfvwrite_r+0x314>
 40076c0:	00a00034 	movhi	r2,32768
 40076c4:	10bfffc4 	addi	r2,r2,-1
 40076c8:	9009883a 	mov	r4,r18
 40076cc:	1480012e 	bgeu	r2,r18,40076d4 <__sfvwrite_r+0x1d4>
 40076d0:	1009883a 	mov	r4,r2
 40076d4:	b80b883a 	mov	r5,r23
 40076d8:	40030b80 	call	40030b8 <__divsi3>
 40076dc:	15cf383a 	mul	r7,r2,r23
 40076e0:	81400717 	ldw	r5,28(r16)
 40076e4:	80800917 	ldw	r2,36(r16)
 40076e8:	e00d883a 	mov	r6,fp
 40076ec:	a809883a 	mov	r4,r21
 40076f0:	103ee83a 	callr	r2
 40076f4:	00bfdb16 	blt	zero,r2,4007664 <__ram_exceptions_end+0xfbfe741c>
 40076f8:	8080030b 	ldhu	r2,12(r16)
 40076fc:	10801014 	ori	r2,r2,64
 4007700:	8080030d 	sth	r2,12(r16)
 4007704:	00bfffc4 	movi	r2,-1
 4007708:	003fab06 	br	40075b8 <__ram_exceptions_end+0xfbfe7370>
 400770c:	0027883a 	mov	r19,zero
 4007710:	0011883a 	mov	r8,zero
 4007714:	0039883a 	mov	fp,zero
 4007718:	0025883a 	mov	r18,zero
 400771c:	90001f26 	beq	r18,zero,400779c <__sfvwrite_r+0x29c>
 4007720:	40005a26 	beq	r8,zero,400788c <__sfvwrite_r+0x38c>
 4007724:	982d883a 	mov	r22,r19
 4007728:	94c0012e 	bgeu	r18,r19,4007730 <__sfvwrite_r+0x230>
 400772c:	902d883a 	mov	r22,r18
 4007730:	81000017 	ldw	r4,0(r16)
 4007734:	80800417 	ldw	r2,16(r16)
 4007738:	b02f883a 	mov	r23,r22
 400773c:	81c00517 	ldw	r7,20(r16)
 4007740:	1100032e 	bgeu	r2,r4,4007750 <__sfvwrite_r+0x250>
 4007744:	80c00217 	ldw	r3,8(r16)
 4007748:	38c7883a 	add	r3,r7,r3
 400774c:	1d801816 	blt	r3,r22,40077b0 <__sfvwrite_r+0x2b0>
 4007750:	b1c03e16 	blt	r22,r7,400784c <__sfvwrite_r+0x34c>
 4007754:	80800917 	ldw	r2,36(r16)
 4007758:	81400717 	ldw	r5,28(r16)
 400775c:	e00d883a 	mov	r6,fp
 4007760:	da000115 	stw	r8,4(sp)
 4007764:	a809883a 	mov	r4,r21
 4007768:	103ee83a 	callr	r2
 400776c:	102f883a 	mov	r23,r2
 4007770:	da000117 	ldw	r8,4(sp)
 4007774:	00bfe00e 	bge	zero,r2,40076f8 <__ram_exceptions_end+0xfbfe74b0>
 4007778:	9de7c83a 	sub	r19,r19,r23
 400777c:	98001f26 	beq	r19,zero,40077fc <__sfvwrite_r+0x2fc>
 4007780:	a0800217 	ldw	r2,8(r20)
 4007784:	e5f9883a 	add	fp,fp,r23
 4007788:	95e5c83a 	sub	r18,r18,r23
 400778c:	15efc83a 	sub	r23,r2,r23
 4007790:	a5c00215 	stw	r23,8(r20)
 4007794:	b83f8726 	beq	r23,zero,40075b4 <__ram_exceptions_end+0xfbfe736c>
 4007798:	903fe11e 	bne	r18,zero,4007720 <__ram_exceptions_end+0xfbfe74d8>
 400779c:	8f000017 	ldw	fp,0(r17)
 40077a0:	8c800117 	ldw	r18,4(r17)
 40077a4:	0011883a 	mov	r8,zero
 40077a8:	8c400204 	addi	r17,r17,8
 40077ac:	003fdb06 	br	400771c <__ram_exceptions_end+0xfbfe74d4>
 40077b0:	180d883a 	mov	r6,r3
 40077b4:	e00b883a 	mov	r5,fp
 40077b8:	da000115 	stw	r8,4(sp)
 40077bc:	d8c00015 	stw	r3,0(sp)
 40077c0:	400857c0 	call	400857c <memmove>
 40077c4:	d8c00017 	ldw	r3,0(sp)
 40077c8:	80800017 	ldw	r2,0(r16)
 40077cc:	800b883a 	mov	r5,r16
 40077d0:	a809883a 	mov	r4,r21
 40077d4:	10c5883a 	add	r2,r2,r3
 40077d8:	80800015 	stw	r2,0(r16)
 40077dc:	d8c00015 	stw	r3,0(sp)
 40077e0:	400941c0 	call	400941c <_fflush_r>
 40077e4:	d8c00017 	ldw	r3,0(sp)
 40077e8:	da000117 	ldw	r8,4(sp)
 40077ec:	103fc21e 	bne	r2,zero,40076f8 <__ram_exceptions_end+0xfbfe74b0>
 40077f0:	182f883a 	mov	r23,r3
 40077f4:	9de7c83a 	sub	r19,r19,r23
 40077f8:	983fe11e 	bne	r19,zero,4007780 <__ram_exceptions_end+0xfbfe7538>
 40077fc:	800b883a 	mov	r5,r16
 4007800:	a809883a 	mov	r4,r21
 4007804:	400941c0 	call	400941c <_fflush_r>
 4007808:	103fbb1e 	bne	r2,zero,40076f8 <__ram_exceptions_end+0xfbfe74b0>
 400780c:	0011883a 	mov	r8,zero
 4007810:	003fdb06 	br	4007780 <__ram_exceptions_end+0xfbfe7538>
 4007814:	94c0012e 	bgeu	r18,r19,400781c <__sfvwrite_r+0x31c>
 4007818:	9027883a 	mov	r19,r18
 400781c:	980d883a 	mov	r6,r19
 4007820:	e00b883a 	mov	r5,fp
 4007824:	400857c0 	call	400857c <memmove>
 4007828:	80800217 	ldw	r2,8(r16)
 400782c:	80c00017 	ldw	r3,0(r16)
 4007830:	14c5c83a 	sub	r2,r2,r19
 4007834:	1cc7883a 	add	r3,r3,r19
 4007838:	80800215 	stw	r2,8(r16)
 400783c:	80c00015 	stw	r3,0(r16)
 4007840:	10004326 	beq	r2,zero,4007950 <__sfvwrite_r+0x450>
 4007844:	9805883a 	mov	r2,r19
 4007848:	003f8606 	br	4007664 <__ram_exceptions_end+0xfbfe741c>
 400784c:	b00d883a 	mov	r6,r22
 4007850:	e00b883a 	mov	r5,fp
 4007854:	da000115 	stw	r8,4(sp)
 4007858:	400857c0 	call	400857c <memmove>
 400785c:	80800217 	ldw	r2,8(r16)
 4007860:	80c00017 	ldw	r3,0(r16)
 4007864:	da000117 	ldw	r8,4(sp)
 4007868:	1585c83a 	sub	r2,r2,r22
 400786c:	1dad883a 	add	r22,r3,r22
 4007870:	80800215 	stw	r2,8(r16)
 4007874:	85800015 	stw	r22,0(r16)
 4007878:	003fbf06 	br	4007778 <__ram_exceptions_end+0xfbfe7530>
 400787c:	81000017 	ldw	r4,0(r16)
 4007880:	9027883a 	mov	r19,r18
 4007884:	902f883a 	mov	r23,r18
 4007888:	003f6c06 	br	400763c <__ram_exceptions_end+0xfbfe73f4>
 400788c:	900d883a 	mov	r6,r18
 4007890:	01400284 	movi	r5,10
 4007894:	e009883a 	mov	r4,fp
 4007898:	40083500 	call	4008350 <memchr>
 400789c:	10003e26 	beq	r2,zero,4007998 <__sfvwrite_r+0x498>
 40078a0:	10800044 	addi	r2,r2,1
 40078a4:	1727c83a 	sub	r19,r2,fp
 40078a8:	02000044 	movi	r8,1
 40078ac:	003f9d06 	br	4007724 <__ram_exceptions_end+0xfbfe74dc>
 40078b0:	80800517 	ldw	r2,20(r16)
 40078b4:	81400417 	ldw	r5,16(r16)
 40078b8:	81c00017 	ldw	r7,0(r16)
 40078bc:	10a7883a 	add	r19,r2,r2
 40078c0:	9885883a 	add	r2,r19,r2
 40078c4:	1026d7fa 	srli	r19,r2,31
 40078c8:	396dc83a 	sub	r22,r7,r5
 40078cc:	b1000044 	addi	r4,r22,1
 40078d0:	9885883a 	add	r2,r19,r2
 40078d4:	1027d07a 	srai	r19,r2,1
 40078d8:	2485883a 	add	r2,r4,r18
 40078dc:	980d883a 	mov	r6,r19
 40078e0:	9880022e 	bgeu	r19,r2,40078ec <__sfvwrite_r+0x3ec>
 40078e4:	1027883a 	mov	r19,r2
 40078e8:	100d883a 	mov	r6,r2
 40078ec:	18c1000c 	andi	r3,r3,1024
 40078f0:	18001c26 	beq	r3,zero,4007964 <__sfvwrite_r+0x464>
 40078f4:	300b883a 	mov	r5,r6
 40078f8:	a809883a 	mov	r4,r21
 40078fc:	4007b440 	call	4007b44 <_malloc_r>
 4007900:	102f883a 	mov	r23,r2
 4007904:	10002926 	beq	r2,zero,40079ac <__sfvwrite_r+0x4ac>
 4007908:	81400417 	ldw	r5,16(r16)
 400790c:	b00d883a 	mov	r6,r22
 4007910:	1009883a 	mov	r4,r2
 4007914:	40084340 	call	4008434 <memcpy>
 4007918:	8080030b 	ldhu	r2,12(r16)
 400791c:	00fedfc4 	movi	r3,-1153
 4007920:	10c4703a 	and	r2,r2,r3
 4007924:	10802014 	ori	r2,r2,128
 4007928:	8080030d 	sth	r2,12(r16)
 400792c:	bd89883a 	add	r4,r23,r22
 4007930:	9d8fc83a 	sub	r7,r19,r22
 4007934:	85c00415 	stw	r23,16(r16)
 4007938:	84c00515 	stw	r19,20(r16)
 400793c:	81000015 	stw	r4,0(r16)
 4007940:	9027883a 	mov	r19,r18
 4007944:	81c00215 	stw	r7,8(r16)
 4007948:	902f883a 	mov	r23,r18
 400794c:	003f3b06 	br	400763c <__ram_exceptions_end+0xfbfe73f4>
 4007950:	800b883a 	mov	r5,r16
 4007954:	a809883a 	mov	r4,r21
 4007958:	400941c0 	call	400941c <_fflush_r>
 400795c:	103fb926 	beq	r2,zero,4007844 <__ram_exceptions_end+0xfbfe75fc>
 4007960:	003f6506 	br	40076f8 <__ram_exceptions_end+0xfbfe74b0>
 4007964:	a809883a 	mov	r4,r21
 4007968:	40088000 	call	4008800 <_realloc_r>
 400796c:	102f883a 	mov	r23,r2
 4007970:	103fee1e 	bne	r2,zero,400792c <__ram_exceptions_end+0xfbfe76e4>
 4007974:	81400417 	ldw	r5,16(r16)
 4007978:	a809883a 	mov	r4,r21
 400797c:	40095cc0 	call	40095cc <_free_r>
 4007980:	8080030b 	ldhu	r2,12(r16)
 4007984:	00ffdfc4 	movi	r3,-129
 4007988:	1884703a 	and	r2,r3,r2
 400798c:	00c00304 	movi	r3,12
 4007990:	a8c00015 	stw	r3,0(r21)
 4007994:	003f5906 	br	40076fc <__ram_exceptions_end+0xfbfe74b4>
 4007998:	94c00044 	addi	r19,r18,1
 400799c:	02000044 	movi	r8,1
 40079a0:	003f6006 	br	4007724 <__ram_exceptions_end+0xfbfe74dc>
 40079a4:	00bfffc4 	movi	r2,-1
 40079a8:	003f0306 	br	40075b8 <__ram_exceptions_end+0xfbfe7370>
 40079ac:	00800304 	movi	r2,12
 40079b0:	a8800015 	stw	r2,0(r21)
 40079b4:	8080030b 	ldhu	r2,12(r16)
 40079b8:	003f5006 	br	40076fc <__ram_exceptions_end+0xfbfe74b4>

040079bc <_fwalk>:
 40079bc:	defff704 	addi	sp,sp,-36
 40079c0:	dd000415 	stw	r20,16(sp)
 40079c4:	dfc00815 	stw	ra,32(sp)
 40079c8:	ddc00715 	stw	r23,28(sp)
 40079cc:	dd800615 	stw	r22,24(sp)
 40079d0:	dd400515 	stw	r21,20(sp)
 40079d4:	dcc00315 	stw	r19,12(sp)
 40079d8:	dc800215 	stw	r18,8(sp)
 40079dc:	dc400115 	stw	r17,4(sp)
 40079e0:	dc000015 	stw	r16,0(sp)
 40079e4:	2500b804 	addi	r20,r4,736
 40079e8:	a0002326 	beq	r20,zero,4007a78 <_fwalk+0xbc>
 40079ec:	282b883a 	mov	r21,r5
 40079f0:	002f883a 	mov	r23,zero
 40079f4:	05800044 	movi	r22,1
 40079f8:	04ffffc4 	movi	r19,-1
 40079fc:	a4400117 	ldw	r17,4(r20)
 4007a00:	a4800217 	ldw	r18,8(r20)
 4007a04:	8c7fffc4 	addi	r17,r17,-1
 4007a08:	88000d16 	blt	r17,zero,4007a40 <_fwalk+0x84>
 4007a0c:	94000304 	addi	r16,r18,12
 4007a10:	94800384 	addi	r18,r18,14
 4007a14:	8080000b 	ldhu	r2,0(r16)
 4007a18:	8c7fffc4 	addi	r17,r17,-1
 4007a1c:	813ffd04 	addi	r4,r16,-12
 4007a20:	b080042e 	bgeu	r22,r2,4007a34 <_fwalk+0x78>
 4007a24:	9080000f 	ldh	r2,0(r18)
 4007a28:	14c00226 	beq	r2,r19,4007a34 <_fwalk+0x78>
 4007a2c:	a83ee83a 	callr	r21
 4007a30:	b8aeb03a 	or	r23,r23,r2
 4007a34:	84001a04 	addi	r16,r16,104
 4007a38:	94801a04 	addi	r18,r18,104
 4007a3c:	8cfff51e 	bne	r17,r19,4007a14 <__ram_exceptions_end+0xfbfe77cc>
 4007a40:	a5000017 	ldw	r20,0(r20)
 4007a44:	a03fed1e 	bne	r20,zero,40079fc <__ram_exceptions_end+0xfbfe77b4>
 4007a48:	b805883a 	mov	r2,r23
 4007a4c:	dfc00817 	ldw	ra,32(sp)
 4007a50:	ddc00717 	ldw	r23,28(sp)
 4007a54:	dd800617 	ldw	r22,24(sp)
 4007a58:	dd400517 	ldw	r21,20(sp)
 4007a5c:	dd000417 	ldw	r20,16(sp)
 4007a60:	dcc00317 	ldw	r19,12(sp)
 4007a64:	dc800217 	ldw	r18,8(sp)
 4007a68:	dc400117 	ldw	r17,4(sp)
 4007a6c:	dc000017 	ldw	r16,0(sp)
 4007a70:	dec00904 	addi	sp,sp,36
 4007a74:	f800283a 	ret
 4007a78:	002f883a 	mov	r23,zero
 4007a7c:	003ff206 	br	4007a48 <__ram_exceptions_end+0xfbfe7800>

04007a80 <_fwalk_reent>:
 4007a80:	defff704 	addi	sp,sp,-36
 4007a84:	dd000415 	stw	r20,16(sp)
 4007a88:	dfc00815 	stw	ra,32(sp)
 4007a8c:	ddc00715 	stw	r23,28(sp)
 4007a90:	dd800615 	stw	r22,24(sp)
 4007a94:	dd400515 	stw	r21,20(sp)
 4007a98:	dcc00315 	stw	r19,12(sp)
 4007a9c:	dc800215 	stw	r18,8(sp)
 4007aa0:	dc400115 	stw	r17,4(sp)
 4007aa4:	dc000015 	stw	r16,0(sp)
 4007aa8:	2500b804 	addi	r20,r4,736
 4007aac:	a0002326 	beq	r20,zero,4007b3c <_fwalk_reent+0xbc>
 4007ab0:	282b883a 	mov	r21,r5
 4007ab4:	2027883a 	mov	r19,r4
 4007ab8:	002f883a 	mov	r23,zero
 4007abc:	05800044 	movi	r22,1
 4007ac0:	04bfffc4 	movi	r18,-1
 4007ac4:	a4400117 	ldw	r17,4(r20)
 4007ac8:	a4000217 	ldw	r16,8(r20)
 4007acc:	8c7fffc4 	addi	r17,r17,-1
 4007ad0:	88000c16 	blt	r17,zero,4007b04 <_fwalk_reent+0x84>
 4007ad4:	84000304 	addi	r16,r16,12
 4007ad8:	8080000b 	ldhu	r2,0(r16)
 4007adc:	8c7fffc4 	addi	r17,r17,-1
 4007ae0:	817ffd04 	addi	r5,r16,-12
 4007ae4:	b080052e 	bgeu	r22,r2,4007afc <_fwalk_reent+0x7c>
 4007ae8:	8080008f 	ldh	r2,2(r16)
 4007aec:	9809883a 	mov	r4,r19
 4007af0:	14800226 	beq	r2,r18,4007afc <_fwalk_reent+0x7c>
 4007af4:	a83ee83a 	callr	r21
 4007af8:	b8aeb03a 	or	r23,r23,r2
 4007afc:	84001a04 	addi	r16,r16,104
 4007b00:	8cbff51e 	bne	r17,r18,4007ad8 <__ram_exceptions_end+0xfbfe7890>
 4007b04:	a5000017 	ldw	r20,0(r20)
 4007b08:	a03fee1e 	bne	r20,zero,4007ac4 <__ram_exceptions_end+0xfbfe787c>
 4007b0c:	b805883a 	mov	r2,r23
 4007b10:	dfc00817 	ldw	ra,32(sp)
 4007b14:	ddc00717 	ldw	r23,28(sp)
 4007b18:	dd800617 	ldw	r22,24(sp)
 4007b1c:	dd400517 	ldw	r21,20(sp)
 4007b20:	dd000417 	ldw	r20,16(sp)
 4007b24:	dcc00317 	ldw	r19,12(sp)
 4007b28:	dc800217 	ldw	r18,8(sp)
 4007b2c:	dc400117 	ldw	r17,4(sp)
 4007b30:	dc000017 	ldw	r16,0(sp)
 4007b34:	dec00904 	addi	sp,sp,36
 4007b38:	f800283a 	ret
 4007b3c:	002f883a 	mov	r23,zero
 4007b40:	003ff206 	br	4007b0c <__ram_exceptions_end+0xfbfe78c4>

04007b44 <_malloc_r>:
 4007b44:	defff504 	addi	sp,sp,-44
 4007b48:	dc800315 	stw	r18,12(sp)
 4007b4c:	dfc00a15 	stw	ra,40(sp)
 4007b50:	df000915 	stw	fp,36(sp)
 4007b54:	ddc00815 	stw	r23,32(sp)
 4007b58:	dd800715 	stw	r22,28(sp)
 4007b5c:	dd400615 	stw	r21,24(sp)
 4007b60:	dd000515 	stw	r20,20(sp)
 4007b64:	dcc00415 	stw	r19,16(sp)
 4007b68:	dc400215 	stw	r17,8(sp)
 4007b6c:	dc000115 	stw	r16,4(sp)
 4007b70:	288002c4 	addi	r2,r5,11
 4007b74:	00c00584 	movi	r3,22
 4007b78:	2025883a 	mov	r18,r4
 4007b7c:	18807f2e 	bgeu	r3,r2,4007d7c <_malloc_r+0x238>
 4007b80:	047ffe04 	movi	r17,-8
 4007b84:	1462703a 	and	r17,r2,r17
 4007b88:	8800a316 	blt	r17,zero,4007e18 <_malloc_r+0x2d4>
 4007b8c:	8940a236 	bltu	r17,r5,4007e18 <_malloc_r+0x2d4>
 4007b90:	400a1840 	call	400a184 <__malloc_lock>
 4007b94:	00807dc4 	movi	r2,503
 4007b98:	1441e92e 	bgeu	r2,r17,4008340 <_malloc_r+0x7fc>
 4007b9c:	8804d27a 	srli	r2,r17,9
 4007ba0:	1000a126 	beq	r2,zero,4007e28 <_malloc_r+0x2e4>
 4007ba4:	00c00104 	movi	r3,4
 4007ba8:	18811e36 	bltu	r3,r2,4008024 <_malloc_r+0x4e0>
 4007bac:	8804d1ba 	srli	r2,r17,6
 4007bb0:	12000e44 	addi	r8,r2,57
 4007bb4:	11c00e04 	addi	r7,r2,56
 4007bb8:	4209883a 	add	r4,r8,r8
 4007bbc:	04c10074 	movhi	r19,1025
 4007bc0:	2109883a 	add	r4,r4,r4
 4007bc4:	9cf9ec04 	addi	r19,r19,-6224
 4007bc8:	2109883a 	add	r4,r4,r4
 4007bcc:	9909883a 	add	r4,r19,r4
 4007bd0:	24000117 	ldw	r16,4(r4)
 4007bd4:	213ffe04 	addi	r4,r4,-8
 4007bd8:	24009726 	beq	r4,r16,4007e38 <_malloc_r+0x2f4>
 4007bdc:	80800117 	ldw	r2,4(r16)
 4007be0:	01bfff04 	movi	r6,-4
 4007be4:	014003c4 	movi	r5,15
 4007be8:	1184703a 	and	r2,r2,r6
 4007bec:	1447c83a 	sub	r3,r2,r17
 4007bf0:	28c00716 	blt	r5,r3,4007c10 <_malloc_r+0xcc>
 4007bf4:	1800920e 	bge	r3,zero,4007e40 <_malloc_r+0x2fc>
 4007bf8:	84000317 	ldw	r16,12(r16)
 4007bfc:	24008e26 	beq	r4,r16,4007e38 <_malloc_r+0x2f4>
 4007c00:	80800117 	ldw	r2,4(r16)
 4007c04:	1184703a 	and	r2,r2,r6
 4007c08:	1447c83a 	sub	r3,r2,r17
 4007c0c:	28fff90e 	bge	r5,r3,4007bf4 <__ram_exceptions_end+0xfbfe79ac>
 4007c10:	3809883a 	mov	r4,r7
 4007c14:	01810074 	movhi	r6,1025
 4007c18:	9c000417 	ldw	r16,16(r19)
 4007c1c:	31b9ec04 	addi	r6,r6,-6224
 4007c20:	32000204 	addi	r8,r6,8
 4007c24:	82013426 	beq	r16,r8,40080f8 <_malloc_r+0x5b4>
 4007c28:	80c00117 	ldw	r3,4(r16)
 4007c2c:	00bfff04 	movi	r2,-4
 4007c30:	188e703a 	and	r7,r3,r2
 4007c34:	3c45c83a 	sub	r2,r7,r17
 4007c38:	00c003c4 	movi	r3,15
 4007c3c:	18811f16 	blt	r3,r2,40080bc <_malloc_r+0x578>
 4007c40:	32000515 	stw	r8,20(r6)
 4007c44:	32000415 	stw	r8,16(r6)
 4007c48:	10007f0e 	bge	r2,zero,4007e48 <_malloc_r+0x304>
 4007c4c:	00807fc4 	movi	r2,511
 4007c50:	11c0fd36 	bltu	r2,r7,4008048 <_malloc_r+0x504>
 4007c54:	3806d0fa 	srli	r3,r7,3
 4007c58:	01c00044 	movi	r7,1
 4007c5c:	30800117 	ldw	r2,4(r6)
 4007c60:	19400044 	addi	r5,r3,1
 4007c64:	294b883a 	add	r5,r5,r5
 4007c68:	1807d0ba 	srai	r3,r3,2
 4007c6c:	294b883a 	add	r5,r5,r5
 4007c70:	294b883a 	add	r5,r5,r5
 4007c74:	298b883a 	add	r5,r5,r6
 4007c78:	38c6983a 	sll	r3,r7,r3
 4007c7c:	29c00017 	ldw	r7,0(r5)
 4007c80:	2a7ffe04 	addi	r9,r5,-8
 4007c84:	1886b03a 	or	r3,r3,r2
 4007c88:	82400315 	stw	r9,12(r16)
 4007c8c:	81c00215 	stw	r7,8(r16)
 4007c90:	30c00115 	stw	r3,4(r6)
 4007c94:	2c000015 	stw	r16,0(r5)
 4007c98:	3c000315 	stw	r16,12(r7)
 4007c9c:	2005d0ba 	srai	r2,r4,2
 4007ca0:	01400044 	movi	r5,1
 4007ca4:	288a983a 	sll	r5,r5,r2
 4007ca8:	19406f36 	bltu	r3,r5,4007e68 <_malloc_r+0x324>
 4007cac:	28c4703a 	and	r2,r5,r3
 4007cb0:	10000a1e 	bne	r2,zero,4007cdc <_malloc_r+0x198>
 4007cb4:	00bfff04 	movi	r2,-4
 4007cb8:	294b883a 	add	r5,r5,r5
 4007cbc:	2088703a 	and	r4,r4,r2
 4007cc0:	28c4703a 	and	r2,r5,r3
 4007cc4:	21000104 	addi	r4,r4,4
 4007cc8:	1000041e 	bne	r2,zero,4007cdc <_malloc_r+0x198>
 4007ccc:	294b883a 	add	r5,r5,r5
 4007cd0:	28c4703a 	and	r2,r5,r3
 4007cd4:	21000104 	addi	r4,r4,4
 4007cd8:	103ffc26 	beq	r2,zero,4007ccc <__ram_exceptions_end+0xfbfe7a84>
 4007cdc:	02bfff04 	movi	r10,-4
 4007ce0:	024003c4 	movi	r9,15
 4007ce4:	21800044 	addi	r6,r4,1
 4007ce8:	318d883a 	add	r6,r6,r6
 4007cec:	318d883a 	add	r6,r6,r6
 4007cf0:	318d883a 	add	r6,r6,r6
 4007cf4:	998d883a 	add	r6,r19,r6
 4007cf8:	333ffe04 	addi	r12,r6,-8
 4007cfc:	2017883a 	mov	r11,r4
 4007d00:	31800104 	addi	r6,r6,4
 4007d04:	34000017 	ldw	r16,0(r6)
 4007d08:	31fffd04 	addi	r7,r6,-12
 4007d0c:	81c0041e 	bne	r16,r7,4007d20 <_malloc_r+0x1dc>
 4007d10:	0000fb06 	br	4008100 <_malloc_r+0x5bc>
 4007d14:	1801030e 	bge	r3,zero,4008124 <_malloc_r+0x5e0>
 4007d18:	84000317 	ldw	r16,12(r16)
 4007d1c:	81c0f826 	beq	r16,r7,4008100 <_malloc_r+0x5bc>
 4007d20:	80800117 	ldw	r2,4(r16)
 4007d24:	1284703a 	and	r2,r2,r10
 4007d28:	1447c83a 	sub	r3,r2,r17
 4007d2c:	48fff90e 	bge	r9,r3,4007d14 <__ram_exceptions_end+0xfbfe7acc>
 4007d30:	80800317 	ldw	r2,12(r16)
 4007d34:	81000217 	ldw	r4,8(r16)
 4007d38:	89400054 	ori	r5,r17,1
 4007d3c:	81400115 	stw	r5,4(r16)
 4007d40:	20800315 	stw	r2,12(r4)
 4007d44:	11000215 	stw	r4,8(r2)
 4007d48:	8463883a 	add	r17,r16,r17
 4007d4c:	9c400515 	stw	r17,20(r19)
 4007d50:	9c400415 	stw	r17,16(r19)
 4007d54:	18800054 	ori	r2,r3,1
 4007d58:	88800115 	stw	r2,4(r17)
 4007d5c:	8a000315 	stw	r8,12(r17)
 4007d60:	8a000215 	stw	r8,8(r17)
 4007d64:	88e3883a 	add	r17,r17,r3
 4007d68:	88c00015 	stw	r3,0(r17)
 4007d6c:	9009883a 	mov	r4,r18
 4007d70:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4007d74:	80800204 	addi	r2,r16,8
 4007d78:	00001b06 	br	4007de8 <_malloc_r+0x2a4>
 4007d7c:	04400404 	movi	r17,16
 4007d80:	89402536 	bltu	r17,r5,4007e18 <_malloc_r+0x2d4>
 4007d84:	400a1840 	call	400a184 <__malloc_lock>
 4007d88:	00800184 	movi	r2,6
 4007d8c:	01000084 	movi	r4,2
 4007d90:	04c10074 	movhi	r19,1025
 4007d94:	1085883a 	add	r2,r2,r2
 4007d98:	9cf9ec04 	addi	r19,r19,-6224
 4007d9c:	1085883a 	add	r2,r2,r2
 4007da0:	9885883a 	add	r2,r19,r2
 4007da4:	14000117 	ldw	r16,4(r2)
 4007da8:	10fffe04 	addi	r3,r2,-8
 4007dac:	80c0d926 	beq	r16,r3,4008114 <_malloc_r+0x5d0>
 4007db0:	80c00117 	ldw	r3,4(r16)
 4007db4:	81000317 	ldw	r4,12(r16)
 4007db8:	00bfff04 	movi	r2,-4
 4007dbc:	1884703a 	and	r2,r3,r2
 4007dc0:	81400217 	ldw	r5,8(r16)
 4007dc4:	8085883a 	add	r2,r16,r2
 4007dc8:	10c00117 	ldw	r3,4(r2)
 4007dcc:	29000315 	stw	r4,12(r5)
 4007dd0:	21400215 	stw	r5,8(r4)
 4007dd4:	18c00054 	ori	r3,r3,1
 4007dd8:	10c00115 	stw	r3,4(r2)
 4007ddc:	9009883a 	mov	r4,r18
 4007de0:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4007de4:	80800204 	addi	r2,r16,8
 4007de8:	dfc00a17 	ldw	ra,40(sp)
 4007dec:	df000917 	ldw	fp,36(sp)
 4007df0:	ddc00817 	ldw	r23,32(sp)
 4007df4:	dd800717 	ldw	r22,28(sp)
 4007df8:	dd400617 	ldw	r21,24(sp)
 4007dfc:	dd000517 	ldw	r20,20(sp)
 4007e00:	dcc00417 	ldw	r19,16(sp)
 4007e04:	dc800317 	ldw	r18,12(sp)
 4007e08:	dc400217 	ldw	r17,8(sp)
 4007e0c:	dc000117 	ldw	r16,4(sp)
 4007e10:	dec00b04 	addi	sp,sp,44
 4007e14:	f800283a 	ret
 4007e18:	00800304 	movi	r2,12
 4007e1c:	90800015 	stw	r2,0(r18)
 4007e20:	0005883a 	mov	r2,zero
 4007e24:	003ff006 	br	4007de8 <__ram_exceptions_end+0xfbfe7ba0>
 4007e28:	01002004 	movi	r4,128
 4007e2c:	02001004 	movi	r8,64
 4007e30:	01c00fc4 	movi	r7,63
 4007e34:	003f6106 	br	4007bbc <__ram_exceptions_end+0xfbfe7974>
 4007e38:	4009883a 	mov	r4,r8
 4007e3c:	003f7506 	br	4007c14 <__ram_exceptions_end+0xfbfe79cc>
 4007e40:	81000317 	ldw	r4,12(r16)
 4007e44:	003fde06 	br	4007dc0 <__ram_exceptions_end+0xfbfe7b78>
 4007e48:	81c5883a 	add	r2,r16,r7
 4007e4c:	11400117 	ldw	r5,4(r2)
 4007e50:	9009883a 	mov	r4,r18
 4007e54:	29400054 	ori	r5,r5,1
 4007e58:	11400115 	stw	r5,4(r2)
 4007e5c:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4007e60:	80800204 	addi	r2,r16,8
 4007e64:	003fe006 	br	4007de8 <__ram_exceptions_end+0xfbfe7ba0>
 4007e68:	9c000217 	ldw	r16,8(r19)
 4007e6c:	00bfff04 	movi	r2,-4
 4007e70:	85800117 	ldw	r22,4(r16)
 4007e74:	b0ac703a 	and	r22,r22,r2
 4007e78:	b4400336 	bltu	r22,r17,4007e88 <_malloc_r+0x344>
 4007e7c:	b445c83a 	sub	r2,r22,r17
 4007e80:	00c003c4 	movi	r3,15
 4007e84:	18805d16 	blt	r3,r2,4007ffc <_malloc_r+0x4b8>
 4007e88:	05c10074 	movhi	r23,1025
 4007e8c:	00810074 	movhi	r2,1025
 4007e90:	10868104 	addi	r2,r2,6660
 4007e94:	bdffa104 	addi	r23,r23,-380
 4007e98:	15400017 	ldw	r21,0(r2)
 4007e9c:	b8c00017 	ldw	r3,0(r23)
 4007ea0:	00bfffc4 	movi	r2,-1
 4007ea4:	858d883a 	add	r6,r16,r22
 4007ea8:	8d6b883a 	add	r21,r17,r21
 4007eac:	1880ea26 	beq	r3,r2,4008258 <_malloc_r+0x714>
 4007eb0:	ad4403c4 	addi	r21,r21,4111
 4007eb4:	00bc0004 	movi	r2,-4096
 4007eb8:	a8aa703a 	and	r21,r21,r2
 4007ebc:	a80b883a 	mov	r5,r21
 4007ec0:	9009883a 	mov	r4,r18
 4007ec4:	d9800015 	stw	r6,0(sp)
 4007ec8:	4008d640 	call	4008d64 <_sbrk_r>
 4007ecc:	1029883a 	mov	r20,r2
 4007ed0:	00bfffc4 	movi	r2,-1
 4007ed4:	d9800017 	ldw	r6,0(sp)
 4007ed8:	a080e826 	beq	r20,r2,400827c <_malloc_r+0x738>
 4007edc:	a180a636 	bltu	r20,r6,4008178 <_malloc_r+0x634>
 4007ee0:	07010074 	movhi	fp,1025
 4007ee4:	e7068a04 	addi	fp,fp,6696
 4007ee8:	e0800017 	ldw	r2,0(fp)
 4007eec:	a887883a 	add	r3,r21,r2
 4007ef0:	e0c00015 	stw	r3,0(fp)
 4007ef4:	3500e626 	beq	r6,r20,4008290 <_malloc_r+0x74c>
 4007ef8:	b9000017 	ldw	r4,0(r23)
 4007efc:	00bfffc4 	movi	r2,-1
 4007f00:	2080ee26 	beq	r4,r2,40082bc <_malloc_r+0x778>
 4007f04:	a185c83a 	sub	r2,r20,r6
 4007f08:	10c5883a 	add	r2,r2,r3
 4007f0c:	e0800015 	stw	r2,0(fp)
 4007f10:	a0c001cc 	andi	r3,r20,7
 4007f14:	1800bc26 	beq	r3,zero,4008208 <_malloc_r+0x6c4>
 4007f18:	a0e9c83a 	sub	r20,r20,r3
 4007f1c:	00840204 	movi	r2,4104
 4007f20:	a5000204 	addi	r20,r20,8
 4007f24:	10c7c83a 	sub	r3,r2,r3
 4007f28:	a545883a 	add	r2,r20,r21
 4007f2c:	1083ffcc 	andi	r2,r2,4095
 4007f30:	18abc83a 	sub	r21,r3,r2
 4007f34:	a80b883a 	mov	r5,r21
 4007f38:	9009883a 	mov	r4,r18
 4007f3c:	4008d640 	call	4008d64 <_sbrk_r>
 4007f40:	00ffffc4 	movi	r3,-1
 4007f44:	10c0e126 	beq	r2,r3,40082cc <_malloc_r+0x788>
 4007f48:	1505c83a 	sub	r2,r2,r20
 4007f4c:	1545883a 	add	r2,r2,r21
 4007f50:	10800054 	ori	r2,r2,1
 4007f54:	e0c00017 	ldw	r3,0(fp)
 4007f58:	9d000215 	stw	r20,8(r19)
 4007f5c:	a0800115 	stw	r2,4(r20)
 4007f60:	a8c7883a 	add	r3,r21,r3
 4007f64:	e0c00015 	stw	r3,0(fp)
 4007f68:	84c00e26 	beq	r16,r19,4007fa4 <_malloc_r+0x460>
 4007f6c:	018003c4 	movi	r6,15
 4007f70:	3580a72e 	bgeu	r6,r22,4008210 <_malloc_r+0x6cc>
 4007f74:	81400117 	ldw	r5,4(r16)
 4007f78:	013ffe04 	movi	r4,-8
 4007f7c:	b0bffd04 	addi	r2,r22,-12
 4007f80:	1104703a 	and	r2,r2,r4
 4007f84:	2900004c 	andi	r4,r5,1
 4007f88:	2088b03a 	or	r4,r4,r2
 4007f8c:	81000115 	stw	r4,4(r16)
 4007f90:	01400144 	movi	r5,5
 4007f94:	8089883a 	add	r4,r16,r2
 4007f98:	21400115 	stw	r5,4(r4)
 4007f9c:	21400215 	stw	r5,8(r4)
 4007fa0:	3080cd36 	bltu	r6,r2,40082d8 <_malloc_r+0x794>
 4007fa4:	00810074 	movhi	r2,1025
 4007fa8:	10868004 	addi	r2,r2,6656
 4007fac:	11000017 	ldw	r4,0(r2)
 4007fb0:	20c0012e 	bgeu	r4,r3,4007fb8 <_malloc_r+0x474>
 4007fb4:	10c00015 	stw	r3,0(r2)
 4007fb8:	00810074 	movhi	r2,1025
 4007fbc:	10867f04 	addi	r2,r2,6652
 4007fc0:	11000017 	ldw	r4,0(r2)
 4007fc4:	9c000217 	ldw	r16,8(r19)
 4007fc8:	20c0012e 	bgeu	r4,r3,4007fd0 <_malloc_r+0x48c>
 4007fcc:	10c00015 	stw	r3,0(r2)
 4007fd0:	80c00117 	ldw	r3,4(r16)
 4007fd4:	00bfff04 	movi	r2,-4
 4007fd8:	1886703a 	and	r3,r3,r2
 4007fdc:	1c45c83a 	sub	r2,r3,r17
 4007fe0:	1c400236 	bltu	r3,r17,4007fec <_malloc_r+0x4a8>
 4007fe4:	00c003c4 	movi	r3,15
 4007fe8:	18800416 	blt	r3,r2,4007ffc <_malloc_r+0x4b8>
 4007fec:	9009883a 	mov	r4,r18
 4007ff0:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4007ff4:	0005883a 	mov	r2,zero
 4007ff8:	003f7b06 	br	4007de8 <__ram_exceptions_end+0xfbfe7ba0>
 4007ffc:	88c00054 	ori	r3,r17,1
 4008000:	80c00115 	stw	r3,4(r16)
 4008004:	8463883a 	add	r17,r16,r17
 4008008:	10800054 	ori	r2,r2,1
 400800c:	9c400215 	stw	r17,8(r19)
 4008010:	88800115 	stw	r2,4(r17)
 4008014:	9009883a 	mov	r4,r18
 4008018:	400a1a80 	call	400a1a8 <__malloc_unlock>
 400801c:	80800204 	addi	r2,r16,8
 4008020:	003f7106 	br	4007de8 <__ram_exceptions_end+0xfbfe7ba0>
 4008024:	00c00504 	movi	r3,20
 4008028:	18804a2e 	bgeu	r3,r2,4008154 <_malloc_r+0x610>
 400802c:	00c01504 	movi	r3,84
 4008030:	18806e36 	bltu	r3,r2,40081ec <_malloc_r+0x6a8>
 4008034:	8804d33a 	srli	r2,r17,12
 4008038:	12001bc4 	addi	r8,r2,111
 400803c:	11c01b84 	addi	r7,r2,110
 4008040:	4209883a 	add	r4,r8,r8
 4008044:	003edd06 	br	4007bbc <__ram_exceptions_end+0xfbfe7974>
 4008048:	3804d27a 	srli	r2,r7,9
 400804c:	00c00104 	movi	r3,4
 4008050:	1880442e 	bgeu	r3,r2,4008164 <_malloc_r+0x620>
 4008054:	00c00504 	movi	r3,20
 4008058:	18808136 	bltu	r3,r2,4008260 <_malloc_r+0x71c>
 400805c:	11401704 	addi	r5,r2,92
 4008060:	10c016c4 	addi	r3,r2,91
 4008064:	294b883a 	add	r5,r5,r5
 4008068:	294b883a 	add	r5,r5,r5
 400806c:	294b883a 	add	r5,r5,r5
 4008070:	994b883a 	add	r5,r19,r5
 4008074:	28800017 	ldw	r2,0(r5)
 4008078:	01810074 	movhi	r6,1025
 400807c:	297ffe04 	addi	r5,r5,-8
 4008080:	31b9ec04 	addi	r6,r6,-6224
 4008084:	28806526 	beq	r5,r2,400821c <_malloc_r+0x6d8>
 4008088:	01bfff04 	movi	r6,-4
 400808c:	10c00117 	ldw	r3,4(r2)
 4008090:	1986703a 	and	r3,r3,r6
 4008094:	38c0022e 	bgeu	r7,r3,40080a0 <_malloc_r+0x55c>
 4008098:	10800217 	ldw	r2,8(r2)
 400809c:	28bffb1e 	bne	r5,r2,400808c <__ram_exceptions_end+0xfbfe7e44>
 40080a0:	11400317 	ldw	r5,12(r2)
 40080a4:	98c00117 	ldw	r3,4(r19)
 40080a8:	81400315 	stw	r5,12(r16)
 40080ac:	80800215 	stw	r2,8(r16)
 40080b0:	2c000215 	stw	r16,8(r5)
 40080b4:	14000315 	stw	r16,12(r2)
 40080b8:	003ef806 	br	4007c9c <__ram_exceptions_end+0xfbfe7a54>
 40080bc:	88c00054 	ori	r3,r17,1
 40080c0:	80c00115 	stw	r3,4(r16)
 40080c4:	8463883a 	add	r17,r16,r17
 40080c8:	34400515 	stw	r17,20(r6)
 40080cc:	34400415 	stw	r17,16(r6)
 40080d0:	10c00054 	ori	r3,r2,1
 40080d4:	8a000315 	stw	r8,12(r17)
 40080d8:	8a000215 	stw	r8,8(r17)
 40080dc:	88c00115 	stw	r3,4(r17)
 40080e0:	88a3883a 	add	r17,r17,r2
 40080e4:	88800015 	stw	r2,0(r17)
 40080e8:	9009883a 	mov	r4,r18
 40080ec:	400a1a80 	call	400a1a8 <__malloc_unlock>
 40080f0:	80800204 	addi	r2,r16,8
 40080f4:	003f3c06 	br	4007de8 <__ram_exceptions_end+0xfbfe7ba0>
 40080f8:	30c00117 	ldw	r3,4(r6)
 40080fc:	003ee706 	br	4007c9c <__ram_exceptions_end+0xfbfe7a54>
 4008100:	5ac00044 	addi	r11,r11,1
 4008104:	588000cc 	andi	r2,r11,3
 4008108:	31800204 	addi	r6,r6,8
 400810c:	103efd1e 	bne	r2,zero,4007d04 <__ram_exceptions_end+0xfbfe7abc>
 4008110:	00002406 	br	40081a4 <_malloc_r+0x660>
 4008114:	14000317 	ldw	r16,12(r2)
 4008118:	143f251e 	bne	r2,r16,4007db0 <__ram_exceptions_end+0xfbfe7b68>
 400811c:	21000084 	addi	r4,r4,2
 4008120:	003ebc06 	br	4007c14 <__ram_exceptions_end+0xfbfe79cc>
 4008124:	8085883a 	add	r2,r16,r2
 4008128:	10c00117 	ldw	r3,4(r2)
 400812c:	81000317 	ldw	r4,12(r16)
 4008130:	81400217 	ldw	r5,8(r16)
 4008134:	18c00054 	ori	r3,r3,1
 4008138:	10c00115 	stw	r3,4(r2)
 400813c:	29000315 	stw	r4,12(r5)
 4008140:	21400215 	stw	r5,8(r4)
 4008144:	9009883a 	mov	r4,r18
 4008148:	400a1a80 	call	400a1a8 <__malloc_unlock>
 400814c:	80800204 	addi	r2,r16,8
 4008150:	003f2506 	br	4007de8 <__ram_exceptions_end+0xfbfe7ba0>
 4008154:	12001704 	addi	r8,r2,92
 4008158:	11c016c4 	addi	r7,r2,91
 400815c:	4209883a 	add	r4,r8,r8
 4008160:	003e9606 	br	4007bbc <__ram_exceptions_end+0xfbfe7974>
 4008164:	3804d1ba 	srli	r2,r7,6
 4008168:	11400e44 	addi	r5,r2,57
 400816c:	10c00e04 	addi	r3,r2,56
 4008170:	294b883a 	add	r5,r5,r5
 4008174:	003fbc06 	br	4008068 <__ram_exceptions_end+0xfbfe7e20>
 4008178:	84ff5926 	beq	r16,r19,4007ee0 <__ram_exceptions_end+0xfbfe7c98>
 400817c:	00810074 	movhi	r2,1025
 4008180:	10b9ec04 	addi	r2,r2,-6224
 4008184:	14000217 	ldw	r16,8(r2)
 4008188:	00bfff04 	movi	r2,-4
 400818c:	80c00117 	ldw	r3,4(r16)
 4008190:	1886703a 	and	r3,r3,r2
 4008194:	003f9106 	br	4007fdc <__ram_exceptions_end+0xfbfe7d94>
 4008198:	60800217 	ldw	r2,8(r12)
 400819c:	213fffc4 	addi	r4,r4,-1
 40081a0:	1300651e 	bne	r2,r12,4008338 <_malloc_r+0x7f4>
 40081a4:	208000cc 	andi	r2,r4,3
 40081a8:	633ffe04 	addi	r12,r12,-8
 40081ac:	103ffa1e 	bne	r2,zero,4008198 <__ram_exceptions_end+0xfbfe7f50>
 40081b0:	98800117 	ldw	r2,4(r19)
 40081b4:	0146303a 	nor	r3,zero,r5
 40081b8:	1884703a 	and	r2,r3,r2
 40081bc:	98800115 	stw	r2,4(r19)
 40081c0:	294b883a 	add	r5,r5,r5
 40081c4:	117f2836 	bltu	r2,r5,4007e68 <__ram_exceptions_end+0xfbfe7c20>
 40081c8:	283f2726 	beq	r5,zero,4007e68 <__ram_exceptions_end+0xfbfe7c20>
 40081cc:	2886703a 	and	r3,r5,r2
 40081d0:	5809883a 	mov	r4,r11
 40081d4:	183ec31e 	bne	r3,zero,4007ce4 <__ram_exceptions_end+0xfbfe7a9c>
 40081d8:	294b883a 	add	r5,r5,r5
 40081dc:	2886703a 	and	r3,r5,r2
 40081e0:	21000104 	addi	r4,r4,4
 40081e4:	183ffc26 	beq	r3,zero,40081d8 <__ram_exceptions_end+0xfbfe7f90>
 40081e8:	003ebe06 	br	4007ce4 <__ram_exceptions_end+0xfbfe7a9c>
 40081ec:	00c05504 	movi	r3,340
 40081f0:	18801236 	bltu	r3,r2,400823c <_malloc_r+0x6f8>
 40081f4:	8804d3fa 	srli	r2,r17,15
 40081f8:	12001e04 	addi	r8,r2,120
 40081fc:	11c01dc4 	addi	r7,r2,119
 4008200:	4209883a 	add	r4,r8,r8
 4008204:	003e6d06 	br	4007bbc <__ram_exceptions_end+0xfbfe7974>
 4008208:	00c40004 	movi	r3,4096
 400820c:	003f4606 	br	4007f28 <__ram_exceptions_end+0xfbfe7ce0>
 4008210:	00800044 	movi	r2,1
 4008214:	a0800115 	stw	r2,4(r20)
 4008218:	003f7406 	br	4007fec <__ram_exceptions_end+0xfbfe7da4>
 400821c:	1805d0ba 	srai	r2,r3,2
 4008220:	01c00044 	movi	r7,1
 4008224:	30c00117 	ldw	r3,4(r6)
 4008228:	388e983a 	sll	r7,r7,r2
 400822c:	2805883a 	mov	r2,r5
 4008230:	38c6b03a 	or	r3,r7,r3
 4008234:	30c00115 	stw	r3,4(r6)
 4008238:	003f9b06 	br	40080a8 <__ram_exceptions_end+0xfbfe7e60>
 400823c:	00c15504 	movi	r3,1364
 4008240:	18801a36 	bltu	r3,r2,40082ac <_malloc_r+0x768>
 4008244:	8804d4ba 	srli	r2,r17,18
 4008248:	12001f44 	addi	r8,r2,125
 400824c:	11c01f04 	addi	r7,r2,124
 4008250:	4209883a 	add	r4,r8,r8
 4008254:	003e5906 	br	4007bbc <__ram_exceptions_end+0xfbfe7974>
 4008258:	ad400404 	addi	r21,r21,16
 400825c:	003f1706 	br	4007ebc <__ram_exceptions_end+0xfbfe7c74>
 4008260:	00c01504 	movi	r3,84
 4008264:	18802336 	bltu	r3,r2,40082f4 <_malloc_r+0x7b0>
 4008268:	3804d33a 	srli	r2,r7,12
 400826c:	11401bc4 	addi	r5,r2,111
 4008270:	10c01b84 	addi	r3,r2,110
 4008274:	294b883a 	add	r5,r5,r5
 4008278:	003f7b06 	br	4008068 <__ram_exceptions_end+0xfbfe7e20>
 400827c:	9c000217 	ldw	r16,8(r19)
 4008280:	00bfff04 	movi	r2,-4
 4008284:	80c00117 	ldw	r3,4(r16)
 4008288:	1886703a 	and	r3,r3,r2
 400828c:	003f5306 	br	4007fdc <__ram_exceptions_end+0xfbfe7d94>
 4008290:	3083ffcc 	andi	r2,r6,4095
 4008294:	103f181e 	bne	r2,zero,4007ef8 <__ram_exceptions_end+0xfbfe7cb0>
 4008298:	99000217 	ldw	r4,8(r19)
 400829c:	b545883a 	add	r2,r22,r21
 40082a0:	10800054 	ori	r2,r2,1
 40082a4:	20800115 	stw	r2,4(r4)
 40082a8:	003f3e06 	br	4007fa4 <__ram_exceptions_end+0xfbfe7d5c>
 40082ac:	01003f84 	movi	r4,254
 40082b0:	02001fc4 	movi	r8,127
 40082b4:	01c01f84 	movi	r7,126
 40082b8:	003e4006 	br	4007bbc <__ram_exceptions_end+0xfbfe7974>
 40082bc:	00810074 	movhi	r2,1025
 40082c0:	10bfa104 	addi	r2,r2,-380
 40082c4:	15000015 	stw	r20,0(r2)
 40082c8:	003f1106 	br	4007f10 <__ram_exceptions_end+0xfbfe7cc8>
 40082cc:	00800044 	movi	r2,1
 40082d0:	002b883a 	mov	r21,zero
 40082d4:	003f1f06 	br	4007f54 <__ram_exceptions_end+0xfbfe7d0c>
 40082d8:	81400204 	addi	r5,r16,8
 40082dc:	9009883a 	mov	r4,r18
 40082e0:	40095cc0 	call	40095cc <_free_r>
 40082e4:	00810074 	movhi	r2,1025
 40082e8:	10868a04 	addi	r2,r2,6696
 40082ec:	10c00017 	ldw	r3,0(r2)
 40082f0:	003f2c06 	br	4007fa4 <__ram_exceptions_end+0xfbfe7d5c>
 40082f4:	00c05504 	movi	r3,340
 40082f8:	18800536 	bltu	r3,r2,4008310 <_malloc_r+0x7cc>
 40082fc:	3804d3fa 	srli	r2,r7,15
 4008300:	11401e04 	addi	r5,r2,120
 4008304:	10c01dc4 	addi	r3,r2,119
 4008308:	294b883a 	add	r5,r5,r5
 400830c:	003f5606 	br	4008068 <__ram_exceptions_end+0xfbfe7e20>
 4008310:	00c15504 	movi	r3,1364
 4008314:	18800536 	bltu	r3,r2,400832c <_malloc_r+0x7e8>
 4008318:	3804d4ba 	srli	r2,r7,18
 400831c:	11401f44 	addi	r5,r2,125
 4008320:	10c01f04 	addi	r3,r2,124
 4008324:	294b883a 	add	r5,r5,r5
 4008328:	003f4f06 	br	4008068 <__ram_exceptions_end+0xfbfe7e20>
 400832c:	01403f84 	movi	r5,254
 4008330:	00c01f84 	movi	r3,126
 4008334:	003f4c06 	br	4008068 <__ram_exceptions_end+0xfbfe7e20>
 4008338:	98800117 	ldw	r2,4(r19)
 400833c:	003fa006 	br	40081c0 <__ram_exceptions_end+0xfbfe7f78>
 4008340:	8808d0fa 	srli	r4,r17,3
 4008344:	20800044 	addi	r2,r4,1
 4008348:	1085883a 	add	r2,r2,r2
 400834c:	003e9006 	br	4007d90 <__ram_exceptions_end+0xfbfe7b48>

04008350 <memchr>:
 4008350:	208000cc 	andi	r2,r4,3
 4008354:	280f883a 	mov	r7,r5
 4008358:	10003426 	beq	r2,zero,400842c <memchr+0xdc>
 400835c:	30bfffc4 	addi	r2,r6,-1
 4008360:	30001a26 	beq	r6,zero,40083cc <memchr+0x7c>
 4008364:	20c00003 	ldbu	r3,0(r4)
 4008368:	29803fcc 	andi	r6,r5,255
 400836c:	30c0051e 	bne	r6,r3,4008384 <memchr+0x34>
 4008370:	00001806 	br	40083d4 <memchr+0x84>
 4008374:	10001526 	beq	r2,zero,40083cc <memchr+0x7c>
 4008378:	20c00003 	ldbu	r3,0(r4)
 400837c:	10bfffc4 	addi	r2,r2,-1
 4008380:	30c01426 	beq	r6,r3,40083d4 <memchr+0x84>
 4008384:	21000044 	addi	r4,r4,1
 4008388:	20c000cc 	andi	r3,r4,3
 400838c:	183ff91e 	bne	r3,zero,4008374 <__ram_exceptions_end+0xfbfe812c>
 4008390:	020000c4 	movi	r8,3
 4008394:	40801136 	bltu	r8,r2,40083dc <memchr+0x8c>
 4008398:	10000c26 	beq	r2,zero,40083cc <memchr+0x7c>
 400839c:	20c00003 	ldbu	r3,0(r4)
 40083a0:	29403fcc 	andi	r5,r5,255
 40083a4:	28c00b26 	beq	r5,r3,40083d4 <memchr+0x84>
 40083a8:	20c00044 	addi	r3,r4,1
 40083ac:	39803fcc 	andi	r6,r7,255
 40083b0:	2089883a 	add	r4,r4,r2
 40083b4:	00000306 	br	40083c4 <memchr+0x74>
 40083b8:	18c00044 	addi	r3,r3,1
 40083bc:	197fffc3 	ldbu	r5,-1(r3)
 40083c0:	31400526 	beq	r6,r5,40083d8 <memchr+0x88>
 40083c4:	1805883a 	mov	r2,r3
 40083c8:	20fffb1e 	bne	r4,r3,40083b8 <__ram_exceptions_end+0xfbfe8170>
 40083cc:	0005883a 	mov	r2,zero
 40083d0:	f800283a 	ret
 40083d4:	2005883a 	mov	r2,r4
 40083d8:	f800283a 	ret
 40083dc:	28c03fcc 	andi	r3,r5,255
 40083e0:	1812923a 	slli	r9,r3,8
 40083e4:	02ffbff4 	movhi	r11,65279
 40083e8:	02a02074 	movhi	r10,32897
 40083ec:	48d2b03a 	or	r9,r9,r3
 40083f0:	4806943a 	slli	r3,r9,16
 40083f4:	5affbfc4 	addi	r11,r11,-257
 40083f8:	52a02004 	addi	r10,r10,-32640
 40083fc:	48d2b03a 	or	r9,r9,r3
 4008400:	20c00017 	ldw	r3,0(r4)
 4008404:	48c6f03a 	xor	r3,r9,r3
 4008408:	1acd883a 	add	r6,r3,r11
 400840c:	00c6303a 	nor	r3,zero,r3
 4008410:	30c6703a 	and	r3,r6,r3
 4008414:	1a86703a 	and	r3,r3,r10
 4008418:	183fe01e 	bne	r3,zero,400839c <__ram_exceptions_end+0xfbfe8154>
 400841c:	10bfff04 	addi	r2,r2,-4
 4008420:	21000104 	addi	r4,r4,4
 4008424:	40bff636 	bltu	r8,r2,4008400 <__ram_exceptions_end+0xfbfe81b8>
 4008428:	003fdb06 	br	4008398 <__ram_exceptions_end+0xfbfe8150>
 400842c:	3005883a 	mov	r2,r6
 4008430:	003fd706 	br	4008390 <__ram_exceptions_end+0xfbfe8148>

04008434 <memcpy>:
 4008434:	defffd04 	addi	sp,sp,-12
 4008438:	dfc00215 	stw	ra,8(sp)
 400843c:	dc400115 	stw	r17,4(sp)
 4008440:	dc000015 	stw	r16,0(sp)
 4008444:	00c003c4 	movi	r3,15
 4008448:	2005883a 	mov	r2,r4
 400844c:	1980452e 	bgeu	r3,r6,4008564 <memcpy+0x130>
 4008450:	2906b03a 	or	r3,r5,r4
 4008454:	18c000cc 	andi	r3,r3,3
 4008458:	1800441e 	bne	r3,zero,400856c <memcpy+0x138>
 400845c:	347ffc04 	addi	r17,r6,-16
 4008460:	8822d13a 	srli	r17,r17,4
 4008464:	28c00104 	addi	r3,r5,4
 4008468:	23400104 	addi	r13,r4,4
 400846c:	8820913a 	slli	r16,r17,4
 4008470:	2b000204 	addi	r12,r5,8
 4008474:	22c00204 	addi	r11,r4,8
 4008478:	84000504 	addi	r16,r16,20
 400847c:	2a800304 	addi	r10,r5,12
 4008480:	22400304 	addi	r9,r4,12
 4008484:	2c21883a 	add	r16,r5,r16
 4008488:	2811883a 	mov	r8,r5
 400848c:	200f883a 	mov	r7,r4
 4008490:	41000017 	ldw	r4,0(r8)
 4008494:	1fc00017 	ldw	ra,0(r3)
 4008498:	63c00017 	ldw	r15,0(r12)
 400849c:	39000015 	stw	r4,0(r7)
 40084a0:	53800017 	ldw	r14,0(r10)
 40084a4:	6fc00015 	stw	ra,0(r13)
 40084a8:	5bc00015 	stw	r15,0(r11)
 40084ac:	4b800015 	stw	r14,0(r9)
 40084b0:	18c00404 	addi	r3,r3,16
 40084b4:	39c00404 	addi	r7,r7,16
 40084b8:	42000404 	addi	r8,r8,16
 40084bc:	6b400404 	addi	r13,r13,16
 40084c0:	63000404 	addi	r12,r12,16
 40084c4:	5ac00404 	addi	r11,r11,16
 40084c8:	52800404 	addi	r10,r10,16
 40084cc:	4a400404 	addi	r9,r9,16
 40084d0:	1c3fef1e 	bne	r3,r16,4008490 <__ram_exceptions_end+0xfbfe8248>
 40084d4:	89c00044 	addi	r7,r17,1
 40084d8:	380e913a 	slli	r7,r7,4
 40084dc:	310003cc 	andi	r4,r6,15
 40084e0:	02c000c4 	movi	r11,3
 40084e4:	11c7883a 	add	r3,r2,r7
 40084e8:	29cb883a 	add	r5,r5,r7
 40084ec:	5900212e 	bgeu	r11,r4,4008574 <memcpy+0x140>
 40084f0:	1813883a 	mov	r9,r3
 40084f4:	2811883a 	mov	r8,r5
 40084f8:	200f883a 	mov	r7,r4
 40084fc:	42800017 	ldw	r10,0(r8)
 4008500:	4a400104 	addi	r9,r9,4
 4008504:	39ffff04 	addi	r7,r7,-4
 4008508:	4abfff15 	stw	r10,-4(r9)
 400850c:	42000104 	addi	r8,r8,4
 4008510:	59fffa36 	bltu	r11,r7,40084fc <__ram_exceptions_end+0xfbfe82b4>
 4008514:	213fff04 	addi	r4,r4,-4
 4008518:	2008d0ba 	srli	r4,r4,2
 400851c:	318000cc 	andi	r6,r6,3
 4008520:	21000044 	addi	r4,r4,1
 4008524:	2109883a 	add	r4,r4,r4
 4008528:	2109883a 	add	r4,r4,r4
 400852c:	1907883a 	add	r3,r3,r4
 4008530:	290b883a 	add	r5,r5,r4
 4008534:	30000626 	beq	r6,zero,4008550 <memcpy+0x11c>
 4008538:	198d883a 	add	r6,r3,r6
 400853c:	29c00003 	ldbu	r7,0(r5)
 4008540:	18c00044 	addi	r3,r3,1
 4008544:	29400044 	addi	r5,r5,1
 4008548:	19ffffc5 	stb	r7,-1(r3)
 400854c:	19bffb1e 	bne	r3,r6,400853c <__ram_exceptions_end+0xfbfe82f4>
 4008550:	dfc00217 	ldw	ra,8(sp)
 4008554:	dc400117 	ldw	r17,4(sp)
 4008558:	dc000017 	ldw	r16,0(sp)
 400855c:	dec00304 	addi	sp,sp,12
 4008560:	f800283a 	ret
 4008564:	2007883a 	mov	r3,r4
 4008568:	003ff206 	br	4008534 <__ram_exceptions_end+0xfbfe82ec>
 400856c:	2007883a 	mov	r3,r4
 4008570:	003ff106 	br	4008538 <__ram_exceptions_end+0xfbfe82f0>
 4008574:	200d883a 	mov	r6,r4
 4008578:	003fee06 	br	4008534 <__ram_exceptions_end+0xfbfe82ec>

0400857c <memmove>:
 400857c:	2005883a 	mov	r2,r4
 4008580:	29000b2e 	bgeu	r5,r4,40085b0 <memmove+0x34>
 4008584:	298f883a 	add	r7,r5,r6
 4008588:	21c0092e 	bgeu	r4,r7,40085b0 <memmove+0x34>
 400858c:	2187883a 	add	r3,r4,r6
 4008590:	198bc83a 	sub	r5,r3,r6
 4008594:	30004826 	beq	r6,zero,40086b8 <memmove+0x13c>
 4008598:	39ffffc4 	addi	r7,r7,-1
 400859c:	39000003 	ldbu	r4,0(r7)
 40085a0:	18ffffc4 	addi	r3,r3,-1
 40085a4:	19000005 	stb	r4,0(r3)
 40085a8:	28fffb1e 	bne	r5,r3,4008598 <__ram_exceptions_end+0xfbfe8350>
 40085ac:	f800283a 	ret
 40085b0:	00c003c4 	movi	r3,15
 40085b4:	1980412e 	bgeu	r3,r6,40086bc <memmove+0x140>
 40085b8:	2886b03a 	or	r3,r5,r2
 40085bc:	18c000cc 	andi	r3,r3,3
 40085c0:	1800401e 	bne	r3,zero,40086c4 <memmove+0x148>
 40085c4:	33fffc04 	addi	r15,r6,-16
 40085c8:	781ed13a 	srli	r15,r15,4
 40085cc:	28c00104 	addi	r3,r5,4
 40085d0:	13400104 	addi	r13,r2,4
 40085d4:	781c913a 	slli	r14,r15,4
 40085d8:	2b000204 	addi	r12,r5,8
 40085dc:	12c00204 	addi	r11,r2,8
 40085e0:	73800504 	addi	r14,r14,20
 40085e4:	2a800304 	addi	r10,r5,12
 40085e8:	12400304 	addi	r9,r2,12
 40085ec:	2b9d883a 	add	r14,r5,r14
 40085f0:	2811883a 	mov	r8,r5
 40085f4:	100f883a 	mov	r7,r2
 40085f8:	41000017 	ldw	r4,0(r8)
 40085fc:	39c00404 	addi	r7,r7,16
 4008600:	18c00404 	addi	r3,r3,16
 4008604:	393ffc15 	stw	r4,-16(r7)
 4008608:	193ffc17 	ldw	r4,-16(r3)
 400860c:	6b400404 	addi	r13,r13,16
 4008610:	5ac00404 	addi	r11,r11,16
 4008614:	693ffc15 	stw	r4,-16(r13)
 4008618:	61000017 	ldw	r4,0(r12)
 400861c:	4a400404 	addi	r9,r9,16
 4008620:	42000404 	addi	r8,r8,16
 4008624:	593ffc15 	stw	r4,-16(r11)
 4008628:	51000017 	ldw	r4,0(r10)
 400862c:	63000404 	addi	r12,r12,16
 4008630:	52800404 	addi	r10,r10,16
 4008634:	493ffc15 	stw	r4,-16(r9)
 4008638:	1bbfef1e 	bne	r3,r14,40085f8 <__ram_exceptions_end+0xfbfe83b0>
 400863c:	79000044 	addi	r4,r15,1
 4008640:	2008913a 	slli	r4,r4,4
 4008644:	328003cc 	andi	r10,r6,15
 4008648:	02c000c4 	movi	r11,3
 400864c:	1107883a 	add	r3,r2,r4
 4008650:	290b883a 	add	r5,r5,r4
 4008654:	5a801e2e 	bgeu	r11,r10,40086d0 <memmove+0x154>
 4008658:	1813883a 	mov	r9,r3
 400865c:	2811883a 	mov	r8,r5
 4008660:	500f883a 	mov	r7,r10
 4008664:	41000017 	ldw	r4,0(r8)
 4008668:	4a400104 	addi	r9,r9,4
 400866c:	39ffff04 	addi	r7,r7,-4
 4008670:	493fff15 	stw	r4,-4(r9)
 4008674:	42000104 	addi	r8,r8,4
 4008678:	59fffa36 	bltu	r11,r7,4008664 <__ram_exceptions_end+0xfbfe841c>
 400867c:	513fff04 	addi	r4,r10,-4
 4008680:	2008d0ba 	srli	r4,r4,2
 4008684:	318000cc 	andi	r6,r6,3
 4008688:	21000044 	addi	r4,r4,1
 400868c:	2109883a 	add	r4,r4,r4
 4008690:	2109883a 	add	r4,r4,r4
 4008694:	1907883a 	add	r3,r3,r4
 4008698:	290b883a 	add	r5,r5,r4
 400869c:	30000b26 	beq	r6,zero,40086cc <memmove+0x150>
 40086a0:	198d883a 	add	r6,r3,r6
 40086a4:	29c00003 	ldbu	r7,0(r5)
 40086a8:	18c00044 	addi	r3,r3,1
 40086ac:	29400044 	addi	r5,r5,1
 40086b0:	19ffffc5 	stb	r7,-1(r3)
 40086b4:	19bffb1e 	bne	r3,r6,40086a4 <__ram_exceptions_end+0xfbfe845c>
 40086b8:	f800283a 	ret
 40086bc:	1007883a 	mov	r3,r2
 40086c0:	003ff606 	br	400869c <__ram_exceptions_end+0xfbfe8454>
 40086c4:	1007883a 	mov	r3,r2
 40086c8:	003ff506 	br	40086a0 <__ram_exceptions_end+0xfbfe8458>
 40086cc:	f800283a 	ret
 40086d0:	500d883a 	mov	r6,r10
 40086d4:	003ff106 	br	400869c <__ram_exceptions_end+0xfbfe8454>

040086d8 <memset>:
 40086d8:	20c000cc 	andi	r3,r4,3
 40086dc:	2005883a 	mov	r2,r4
 40086e0:	18004426 	beq	r3,zero,40087f4 <memset+0x11c>
 40086e4:	31ffffc4 	addi	r7,r6,-1
 40086e8:	30004026 	beq	r6,zero,40087ec <memset+0x114>
 40086ec:	2813883a 	mov	r9,r5
 40086f0:	200d883a 	mov	r6,r4
 40086f4:	2007883a 	mov	r3,r4
 40086f8:	00000406 	br	400870c <memset+0x34>
 40086fc:	3a3fffc4 	addi	r8,r7,-1
 4008700:	31800044 	addi	r6,r6,1
 4008704:	38003926 	beq	r7,zero,40087ec <memset+0x114>
 4008708:	400f883a 	mov	r7,r8
 400870c:	18c00044 	addi	r3,r3,1
 4008710:	32400005 	stb	r9,0(r6)
 4008714:	1a0000cc 	andi	r8,r3,3
 4008718:	403ff81e 	bne	r8,zero,40086fc <__ram_exceptions_end+0xfbfe84b4>
 400871c:	010000c4 	movi	r4,3
 4008720:	21c02d2e 	bgeu	r4,r7,40087d8 <memset+0x100>
 4008724:	29003fcc 	andi	r4,r5,255
 4008728:	200c923a 	slli	r6,r4,8
 400872c:	3108b03a 	or	r4,r6,r4
 4008730:	200c943a 	slli	r6,r4,16
 4008734:	218cb03a 	or	r6,r4,r6
 4008738:	010003c4 	movi	r4,15
 400873c:	21c0182e 	bgeu	r4,r7,40087a0 <memset+0xc8>
 4008740:	3b3ffc04 	addi	r12,r7,-16
 4008744:	6018d13a 	srli	r12,r12,4
 4008748:	1a000104 	addi	r8,r3,4
 400874c:	1ac00204 	addi	r11,r3,8
 4008750:	6008913a 	slli	r4,r12,4
 4008754:	1a800304 	addi	r10,r3,12
 4008758:	1813883a 	mov	r9,r3
 400875c:	21000504 	addi	r4,r4,20
 4008760:	1909883a 	add	r4,r3,r4
 4008764:	49800015 	stw	r6,0(r9)
 4008768:	41800015 	stw	r6,0(r8)
 400876c:	59800015 	stw	r6,0(r11)
 4008770:	51800015 	stw	r6,0(r10)
 4008774:	42000404 	addi	r8,r8,16
 4008778:	4a400404 	addi	r9,r9,16
 400877c:	5ac00404 	addi	r11,r11,16
 4008780:	52800404 	addi	r10,r10,16
 4008784:	413ff71e 	bne	r8,r4,4008764 <__ram_exceptions_end+0xfbfe851c>
 4008788:	63000044 	addi	r12,r12,1
 400878c:	6018913a 	slli	r12,r12,4
 4008790:	39c003cc 	andi	r7,r7,15
 4008794:	010000c4 	movi	r4,3
 4008798:	1b07883a 	add	r3,r3,r12
 400879c:	21c00e2e 	bgeu	r4,r7,40087d8 <memset+0x100>
 40087a0:	1813883a 	mov	r9,r3
 40087a4:	3811883a 	mov	r8,r7
 40087a8:	010000c4 	movi	r4,3
 40087ac:	49800015 	stw	r6,0(r9)
 40087b0:	423fff04 	addi	r8,r8,-4
 40087b4:	4a400104 	addi	r9,r9,4
 40087b8:	223ffc36 	bltu	r4,r8,40087ac <__ram_exceptions_end+0xfbfe8564>
 40087bc:	393fff04 	addi	r4,r7,-4
 40087c0:	2008d0ba 	srli	r4,r4,2
 40087c4:	39c000cc 	andi	r7,r7,3
 40087c8:	21000044 	addi	r4,r4,1
 40087cc:	2109883a 	add	r4,r4,r4
 40087d0:	2109883a 	add	r4,r4,r4
 40087d4:	1907883a 	add	r3,r3,r4
 40087d8:	38000526 	beq	r7,zero,40087f0 <memset+0x118>
 40087dc:	19cf883a 	add	r7,r3,r7
 40087e0:	19400005 	stb	r5,0(r3)
 40087e4:	18c00044 	addi	r3,r3,1
 40087e8:	38fffd1e 	bne	r7,r3,40087e0 <__ram_exceptions_end+0xfbfe8598>
 40087ec:	f800283a 	ret
 40087f0:	f800283a 	ret
 40087f4:	2007883a 	mov	r3,r4
 40087f8:	300f883a 	mov	r7,r6
 40087fc:	003fc706 	br	400871c <__ram_exceptions_end+0xfbfe84d4>

04008800 <_realloc_r>:
 4008800:	defff604 	addi	sp,sp,-40
 4008804:	dc800215 	stw	r18,8(sp)
 4008808:	dfc00915 	stw	ra,36(sp)
 400880c:	df000815 	stw	fp,32(sp)
 4008810:	ddc00715 	stw	r23,28(sp)
 4008814:	dd800615 	stw	r22,24(sp)
 4008818:	dd400515 	stw	r21,20(sp)
 400881c:	dd000415 	stw	r20,16(sp)
 4008820:	dcc00315 	stw	r19,12(sp)
 4008824:	dc400115 	stw	r17,4(sp)
 4008828:	dc000015 	stw	r16,0(sp)
 400882c:	3025883a 	mov	r18,r6
 4008830:	2800b726 	beq	r5,zero,4008b10 <_realloc_r+0x310>
 4008834:	282b883a 	mov	r21,r5
 4008838:	2029883a 	mov	r20,r4
 400883c:	400a1840 	call	400a184 <__malloc_lock>
 4008840:	a8bfff17 	ldw	r2,-4(r21)
 4008844:	043fff04 	movi	r16,-4
 4008848:	90c002c4 	addi	r3,r18,11
 400884c:	01000584 	movi	r4,22
 4008850:	acfffe04 	addi	r19,r21,-8
 4008854:	1420703a 	and	r16,r2,r16
 4008858:	20c0332e 	bgeu	r4,r3,4008928 <_realloc_r+0x128>
 400885c:	047ffe04 	movi	r17,-8
 4008860:	1c62703a 	and	r17,r3,r17
 4008864:	8807883a 	mov	r3,r17
 4008868:	88005816 	blt	r17,zero,40089cc <_realloc_r+0x1cc>
 400886c:	8c805736 	bltu	r17,r18,40089cc <_realloc_r+0x1cc>
 4008870:	80c0300e 	bge	r16,r3,4008934 <_realloc_r+0x134>
 4008874:	07010074 	movhi	fp,1025
 4008878:	e739ec04 	addi	fp,fp,-6224
 400887c:	e1c00217 	ldw	r7,8(fp)
 4008880:	9c09883a 	add	r4,r19,r16
 4008884:	22000117 	ldw	r8,4(r4)
 4008888:	21c06326 	beq	r4,r7,4008a18 <_realloc_r+0x218>
 400888c:	017fff84 	movi	r5,-2
 4008890:	414a703a 	and	r5,r8,r5
 4008894:	214b883a 	add	r5,r4,r5
 4008898:	29800117 	ldw	r6,4(r5)
 400889c:	3180004c 	andi	r6,r6,1
 40088a0:	30003f26 	beq	r6,zero,40089a0 <_realloc_r+0x1a0>
 40088a4:	1080004c 	andi	r2,r2,1
 40088a8:	10008326 	beq	r2,zero,4008ab8 <_realloc_r+0x2b8>
 40088ac:	900b883a 	mov	r5,r18
 40088b0:	a009883a 	mov	r4,r20
 40088b4:	4007b440 	call	4007b44 <_malloc_r>
 40088b8:	1025883a 	mov	r18,r2
 40088bc:	10011e26 	beq	r2,zero,4008d38 <_realloc_r+0x538>
 40088c0:	a93fff17 	ldw	r4,-4(r21)
 40088c4:	10fffe04 	addi	r3,r2,-8
 40088c8:	00bfff84 	movi	r2,-2
 40088cc:	2084703a 	and	r2,r4,r2
 40088d0:	9885883a 	add	r2,r19,r2
 40088d4:	1880ee26 	beq	r3,r2,4008c90 <_realloc_r+0x490>
 40088d8:	81bfff04 	addi	r6,r16,-4
 40088dc:	00800904 	movi	r2,36
 40088e0:	1180b836 	bltu	r2,r6,4008bc4 <_realloc_r+0x3c4>
 40088e4:	00c004c4 	movi	r3,19
 40088e8:	19809636 	bltu	r3,r6,4008b44 <_realloc_r+0x344>
 40088ec:	9005883a 	mov	r2,r18
 40088f0:	a807883a 	mov	r3,r21
 40088f4:	19000017 	ldw	r4,0(r3)
 40088f8:	11000015 	stw	r4,0(r2)
 40088fc:	19000117 	ldw	r4,4(r3)
 4008900:	11000115 	stw	r4,4(r2)
 4008904:	18c00217 	ldw	r3,8(r3)
 4008908:	10c00215 	stw	r3,8(r2)
 400890c:	a80b883a 	mov	r5,r21
 4008910:	a009883a 	mov	r4,r20
 4008914:	40095cc0 	call	40095cc <_free_r>
 4008918:	a009883a 	mov	r4,r20
 400891c:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4008920:	9005883a 	mov	r2,r18
 4008924:	00001206 	br	4008970 <_realloc_r+0x170>
 4008928:	00c00404 	movi	r3,16
 400892c:	1823883a 	mov	r17,r3
 4008930:	003fce06 	br	400886c <__ram_exceptions_end+0xfbfe8624>
 4008934:	a825883a 	mov	r18,r21
 4008938:	8445c83a 	sub	r2,r16,r17
 400893c:	00c003c4 	movi	r3,15
 4008940:	18802636 	bltu	r3,r2,40089dc <_realloc_r+0x1dc>
 4008944:	99800117 	ldw	r6,4(r19)
 4008948:	9c07883a 	add	r3,r19,r16
 400894c:	3180004c 	andi	r6,r6,1
 4008950:	3420b03a 	or	r16,r6,r16
 4008954:	9c000115 	stw	r16,4(r19)
 4008958:	18800117 	ldw	r2,4(r3)
 400895c:	10800054 	ori	r2,r2,1
 4008960:	18800115 	stw	r2,4(r3)
 4008964:	a009883a 	mov	r4,r20
 4008968:	400a1a80 	call	400a1a8 <__malloc_unlock>
 400896c:	9005883a 	mov	r2,r18
 4008970:	dfc00917 	ldw	ra,36(sp)
 4008974:	df000817 	ldw	fp,32(sp)
 4008978:	ddc00717 	ldw	r23,28(sp)
 400897c:	dd800617 	ldw	r22,24(sp)
 4008980:	dd400517 	ldw	r21,20(sp)
 4008984:	dd000417 	ldw	r20,16(sp)
 4008988:	dcc00317 	ldw	r19,12(sp)
 400898c:	dc800217 	ldw	r18,8(sp)
 4008990:	dc400117 	ldw	r17,4(sp)
 4008994:	dc000017 	ldw	r16,0(sp)
 4008998:	dec00a04 	addi	sp,sp,40
 400899c:	f800283a 	ret
 40089a0:	017fff04 	movi	r5,-4
 40089a4:	414a703a 	and	r5,r8,r5
 40089a8:	814d883a 	add	r6,r16,r5
 40089ac:	30c01f16 	blt	r6,r3,4008a2c <_realloc_r+0x22c>
 40089b0:	20800317 	ldw	r2,12(r4)
 40089b4:	20c00217 	ldw	r3,8(r4)
 40089b8:	a825883a 	mov	r18,r21
 40089bc:	3021883a 	mov	r16,r6
 40089c0:	18800315 	stw	r2,12(r3)
 40089c4:	10c00215 	stw	r3,8(r2)
 40089c8:	003fdb06 	br	4008938 <__ram_exceptions_end+0xfbfe86f0>
 40089cc:	00800304 	movi	r2,12
 40089d0:	a0800015 	stw	r2,0(r20)
 40089d4:	0005883a 	mov	r2,zero
 40089d8:	003fe506 	br	4008970 <__ram_exceptions_end+0xfbfe8728>
 40089dc:	98c00117 	ldw	r3,4(r19)
 40089e0:	9c4b883a 	add	r5,r19,r17
 40089e4:	11000054 	ori	r4,r2,1
 40089e8:	18c0004c 	andi	r3,r3,1
 40089ec:	1c62b03a 	or	r17,r3,r17
 40089f0:	9c400115 	stw	r17,4(r19)
 40089f4:	29000115 	stw	r4,4(r5)
 40089f8:	2885883a 	add	r2,r5,r2
 40089fc:	10c00117 	ldw	r3,4(r2)
 4008a00:	29400204 	addi	r5,r5,8
 4008a04:	a009883a 	mov	r4,r20
 4008a08:	18c00054 	ori	r3,r3,1
 4008a0c:	10c00115 	stw	r3,4(r2)
 4008a10:	40095cc0 	call	40095cc <_free_r>
 4008a14:	003fd306 	br	4008964 <__ram_exceptions_end+0xfbfe871c>
 4008a18:	017fff04 	movi	r5,-4
 4008a1c:	414a703a 	and	r5,r8,r5
 4008a20:	89800404 	addi	r6,r17,16
 4008a24:	8151883a 	add	r8,r16,r5
 4008a28:	4180590e 	bge	r8,r6,4008b90 <_realloc_r+0x390>
 4008a2c:	1080004c 	andi	r2,r2,1
 4008a30:	103f9e1e 	bne	r2,zero,40088ac <__ram_exceptions_end+0xfbfe8664>
 4008a34:	adbffe17 	ldw	r22,-8(r21)
 4008a38:	00bfff04 	movi	r2,-4
 4008a3c:	9dadc83a 	sub	r22,r19,r22
 4008a40:	b1800117 	ldw	r6,4(r22)
 4008a44:	3084703a 	and	r2,r6,r2
 4008a48:	20002026 	beq	r4,zero,4008acc <_realloc_r+0x2cc>
 4008a4c:	80af883a 	add	r23,r16,r2
 4008a50:	b96f883a 	add	r23,r23,r5
 4008a54:	21c05f26 	beq	r4,r7,4008bd4 <_realloc_r+0x3d4>
 4008a58:	b8c01c16 	blt	r23,r3,4008acc <_realloc_r+0x2cc>
 4008a5c:	20800317 	ldw	r2,12(r4)
 4008a60:	20c00217 	ldw	r3,8(r4)
 4008a64:	81bfff04 	addi	r6,r16,-4
 4008a68:	01000904 	movi	r4,36
 4008a6c:	18800315 	stw	r2,12(r3)
 4008a70:	10c00215 	stw	r3,8(r2)
 4008a74:	b0c00217 	ldw	r3,8(r22)
 4008a78:	b0800317 	ldw	r2,12(r22)
 4008a7c:	b4800204 	addi	r18,r22,8
 4008a80:	18800315 	stw	r2,12(r3)
 4008a84:	10c00215 	stw	r3,8(r2)
 4008a88:	21801b36 	bltu	r4,r6,4008af8 <_realloc_r+0x2f8>
 4008a8c:	008004c4 	movi	r2,19
 4008a90:	1180352e 	bgeu	r2,r6,4008b68 <_realloc_r+0x368>
 4008a94:	a8800017 	ldw	r2,0(r21)
 4008a98:	b0800215 	stw	r2,8(r22)
 4008a9c:	a8800117 	ldw	r2,4(r21)
 4008aa0:	b0800315 	stw	r2,12(r22)
 4008aa4:	008006c4 	movi	r2,27
 4008aa8:	11807f36 	bltu	r2,r6,4008ca8 <_realloc_r+0x4a8>
 4008aac:	b0800404 	addi	r2,r22,16
 4008ab0:	ad400204 	addi	r21,r21,8
 4008ab4:	00002d06 	br	4008b6c <_realloc_r+0x36c>
 4008ab8:	adbffe17 	ldw	r22,-8(r21)
 4008abc:	00bfff04 	movi	r2,-4
 4008ac0:	9dadc83a 	sub	r22,r19,r22
 4008ac4:	b1000117 	ldw	r4,4(r22)
 4008ac8:	2084703a 	and	r2,r4,r2
 4008acc:	b03f7726 	beq	r22,zero,40088ac <__ram_exceptions_end+0xfbfe8664>
 4008ad0:	80af883a 	add	r23,r16,r2
 4008ad4:	b8ff7516 	blt	r23,r3,40088ac <__ram_exceptions_end+0xfbfe8664>
 4008ad8:	b0800317 	ldw	r2,12(r22)
 4008adc:	b0c00217 	ldw	r3,8(r22)
 4008ae0:	81bfff04 	addi	r6,r16,-4
 4008ae4:	01000904 	movi	r4,36
 4008ae8:	18800315 	stw	r2,12(r3)
 4008aec:	10c00215 	stw	r3,8(r2)
 4008af0:	b4800204 	addi	r18,r22,8
 4008af4:	21bfe52e 	bgeu	r4,r6,4008a8c <__ram_exceptions_end+0xfbfe8844>
 4008af8:	a80b883a 	mov	r5,r21
 4008afc:	9009883a 	mov	r4,r18
 4008b00:	400857c0 	call	400857c <memmove>
 4008b04:	b821883a 	mov	r16,r23
 4008b08:	b027883a 	mov	r19,r22
 4008b0c:	003f8a06 	br	4008938 <__ram_exceptions_end+0xfbfe86f0>
 4008b10:	300b883a 	mov	r5,r6
 4008b14:	dfc00917 	ldw	ra,36(sp)
 4008b18:	df000817 	ldw	fp,32(sp)
 4008b1c:	ddc00717 	ldw	r23,28(sp)
 4008b20:	dd800617 	ldw	r22,24(sp)
 4008b24:	dd400517 	ldw	r21,20(sp)
 4008b28:	dd000417 	ldw	r20,16(sp)
 4008b2c:	dcc00317 	ldw	r19,12(sp)
 4008b30:	dc800217 	ldw	r18,8(sp)
 4008b34:	dc400117 	ldw	r17,4(sp)
 4008b38:	dc000017 	ldw	r16,0(sp)
 4008b3c:	dec00a04 	addi	sp,sp,40
 4008b40:	4007b441 	jmpi	4007b44 <_malloc_r>
 4008b44:	a8c00017 	ldw	r3,0(r21)
 4008b48:	90c00015 	stw	r3,0(r18)
 4008b4c:	a8c00117 	ldw	r3,4(r21)
 4008b50:	90c00115 	stw	r3,4(r18)
 4008b54:	00c006c4 	movi	r3,27
 4008b58:	19804536 	bltu	r3,r6,4008c70 <_realloc_r+0x470>
 4008b5c:	90800204 	addi	r2,r18,8
 4008b60:	a8c00204 	addi	r3,r21,8
 4008b64:	003f6306 	br	40088f4 <__ram_exceptions_end+0xfbfe86ac>
 4008b68:	9005883a 	mov	r2,r18
 4008b6c:	a8c00017 	ldw	r3,0(r21)
 4008b70:	b821883a 	mov	r16,r23
 4008b74:	b027883a 	mov	r19,r22
 4008b78:	10c00015 	stw	r3,0(r2)
 4008b7c:	a8c00117 	ldw	r3,4(r21)
 4008b80:	10c00115 	stw	r3,4(r2)
 4008b84:	a8c00217 	ldw	r3,8(r21)
 4008b88:	10c00215 	stw	r3,8(r2)
 4008b8c:	003f6a06 	br	4008938 <__ram_exceptions_end+0xfbfe86f0>
 4008b90:	9c67883a 	add	r19,r19,r17
 4008b94:	4445c83a 	sub	r2,r8,r17
 4008b98:	e4c00215 	stw	r19,8(fp)
 4008b9c:	10800054 	ori	r2,r2,1
 4008ba0:	98800115 	stw	r2,4(r19)
 4008ba4:	a8bfff17 	ldw	r2,-4(r21)
 4008ba8:	a009883a 	mov	r4,r20
 4008bac:	1080004c 	andi	r2,r2,1
 4008bb0:	1462b03a 	or	r17,r2,r17
 4008bb4:	ac7fff15 	stw	r17,-4(r21)
 4008bb8:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4008bbc:	a805883a 	mov	r2,r21
 4008bc0:	003f6b06 	br	4008970 <__ram_exceptions_end+0xfbfe8728>
 4008bc4:	a80b883a 	mov	r5,r21
 4008bc8:	9009883a 	mov	r4,r18
 4008bcc:	400857c0 	call	400857c <memmove>
 4008bd0:	003f4e06 	br	400890c <__ram_exceptions_end+0xfbfe86c4>
 4008bd4:	89000404 	addi	r4,r17,16
 4008bd8:	b93fbc16 	blt	r23,r4,4008acc <__ram_exceptions_end+0xfbfe8884>
 4008bdc:	b0800317 	ldw	r2,12(r22)
 4008be0:	b0c00217 	ldw	r3,8(r22)
 4008be4:	81bfff04 	addi	r6,r16,-4
 4008be8:	01000904 	movi	r4,36
 4008bec:	18800315 	stw	r2,12(r3)
 4008bf0:	10c00215 	stw	r3,8(r2)
 4008bf4:	b4800204 	addi	r18,r22,8
 4008bf8:	21804336 	bltu	r4,r6,4008d08 <_realloc_r+0x508>
 4008bfc:	008004c4 	movi	r2,19
 4008c00:	11803f2e 	bgeu	r2,r6,4008d00 <_realloc_r+0x500>
 4008c04:	a8800017 	ldw	r2,0(r21)
 4008c08:	b0800215 	stw	r2,8(r22)
 4008c0c:	a8800117 	ldw	r2,4(r21)
 4008c10:	b0800315 	stw	r2,12(r22)
 4008c14:	008006c4 	movi	r2,27
 4008c18:	11803f36 	bltu	r2,r6,4008d18 <_realloc_r+0x518>
 4008c1c:	b0800404 	addi	r2,r22,16
 4008c20:	ad400204 	addi	r21,r21,8
 4008c24:	a8c00017 	ldw	r3,0(r21)
 4008c28:	10c00015 	stw	r3,0(r2)
 4008c2c:	a8c00117 	ldw	r3,4(r21)
 4008c30:	10c00115 	stw	r3,4(r2)
 4008c34:	a8c00217 	ldw	r3,8(r21)
 4008c38:	10c00215 	stw	r3,8(r2)
 4008c3c:	b447883a 	add	r3,r22,r17
 4008c40:	bc45c83a 	sub	r2,r23,r17
 4008c44:	e0c00215 	stw	r3,8(fp)
 4008c48:	10800054 	ori	r2,r2,1
 4008c4c:	18800115 	stw	r2,4(r3)
 4008c50:	b0800117 	ldw	r2,4(r22)
 4008c54:	a009883a 	mov	r4,r20
 4008c58:	1080004c 	andi	r2,r2,1
 4008c5c:	1462b03a 	or	r17,r2,r17
 4008c60:	b4400115 	stw	r17,4(r22)
 4008c64:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4008c68:	9005883a 	mov	r2,r18
 4008c6c:	003f4006 	br	4008970 <__ram_exceptions_end+0xfbfe8728>
 4008c70:	a8c00217 	ldw	r3,8(r21)
 4008c74:	90c00215 	stw	r3,8(r18)
 4008c78:	a8c00317 	ldw	r3,12(r21)
 4008c7c:	90c00315 	stw	r3,12(r18)
 4008c80:	30801126 	beq	r6,r2,4008cc8 <_realloc_r+0x4c8>
 4008c84:	90800404 	addi	r2,r18,16
 4008c88:	a8c00404 	addi	r3,r21,16
 4008c8c:	003f1906 	br	40088f4 <__ram_exceptions_end+0xfbfe86ac>
 4008c90:	90ffff17 	ldw	r3,-4(r18)
 4008c94:	00bfff04 	movi	r2,-4
 4008c98:	a825883a 	mov	r18,r21
 4008c9c:	1884703a 	and	r2,r3,r2
 4008ca0:	80a1883a 	add	r16,r16,r2
 4008ca4:	003f2406 	br	4008938 <__ram_exceptions_end+0xfbfe86f0>
 4008ca8:	a8800217 	ldw	r2,8(r21)
 4008cac:	b0800415 	stw	r2,16(r22)
 4008cb0:	a8800317 	ldw	r2,12(r21)
 4008cb4:	b0800515 	stw	r2,20(r22)
 4008cb8:	31000a26 	beq	r6,r4,4008ce4 <_realloc_r+0x4e4>
 4008cbc:	b0800604 	addi	r2,r22,24
 4008cc0:	ad400404 	addi	r21,r21,16
 4008cc4:	003fa906 	br	4008b6c <__ram_exceptions_end+0xfbfe8924>
 4008cc8:	a9000417 	ldw	r4,16(r21)
 4008ccc:	90800604 	addi	r2,r18,24
 4008cd0:	a8c00604 	addi	r3,r21,24
 4008cd4:	91000415 	stw	r4,16(r18)
 4008cd8:	a9000517 	ldw	r4,20(r21)
 4008cdc:	91000515 	stw	r4,20(r18)
 4008ce0:	003f0406 	br	40088f4 <__ram_exceptions_end+0xfbfe86ac>
 4008ce4:	a8c00417 	ldw	r3,16(r21)
 4008ce8:	ad400604 	addi	r21,r21,24
 4008cec:	b0800804 	addi	r2,r22,32
 4008cf0:	b0c00615 	stw	r3,24(r22)
 4008cf4:	a8ffff17 	ldw	r3,-4(r21)
 4008cf8:	b0c00715 	stw	r3,28(r22)
 4008cfc:	003f9b06 	br	4008b6c <__ram_exceptions_end+0xfbfe8924>
 4008d00:	9005883a 	mov	r2,r18
 4008d04:	003fc706 	br	4008c24 <__ram_exceptions_end+0xfbfe89dc>
 4008d08:	a80b883a 	mov	r5,r21
 4008d0c:	9009883a 	mov	r4,r18
 4008d10:	400857c0 	call	400857c <memmove>
 4008d14:	003fc906 	br	4008c3c <__ram_exceptions_end+0xfbfe89f4>
 4008d18:	a8800217 	ldw	r2,8(r21)
 4008d1c:	b0800415 	stw	r2,16(r22)
 4008d20:	a8800317 	ldw	r2,12(r21)
 4008d24:	b0800515 	stw	r2,20(r22)
 4008d28:	31000726 	beq	r6,r4,4008d48 <_realloc_r+0x548>
 4008d2c:	b0800604 	addi	r2,r22,24
 4008d30:	ad400404 	addi	r21,r21,16
 4008d34:	003fbb06 	br	4008c24 <__ram_exceptions_end+0xfbfe89dc>
 4008d38:	a009883a 	mov	r4,r20
 4008d3c:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4008d40:	0005883a 	mov	r2,zero
 4008d44:	003f0a06 	br	4008970 <__ram_exceptions_end+0xfbfe8728>
 4008d48:	a8c00417 	ldw	r3,16(r21)
 4008d4c:	ad400604 	addi	r21,r21,24
 4008d50:	b0800804 	addi	r2,r22,32
 4008d54:	b0c00615 	stw	r3,24(r22)
 4008d58:	a8ffff17 	ldw	r3,-4(r21)
 4008d5c:	b0c00715 	stw	r3,28(r22)
 4008d60:	003fb006 	br	4008c24 <__ram_exceptions_end+0xfbfe89dc>

04008d64 <_sbrk_r>:
 4008d64:	defffd04 	addi	sp,sp,-12
 4008d68:	dc000015 	stw	r16,0(sp)
 4008d6c:	04010074 	movhi	r16,1025
 4008d70:	dc400115 	stw	r17,4(sp)
 4008d74:	84068204 	addi	r16,r16,6664
 4008d78:	2023883a 	mov	r17,r4
 4008d7c:	2809883a 	mov	r4,r5
 4008d80:	dfc00215 	stw	ra,8(sp)
 4008d84:	80000015 	stw	zero,0(r16)
 4008d88:	400a3680 	call	400a368 <sbrk>
 4008d8c:	00ffffc4 	movi	r3,-1
 4008d90:	10c00526 	beq	r2,r3,4008da8 <_sbrk_r+0x44>
 4008d94:	dfc00217 	ldw	ra,8(sp)
 4008d98:	dc400117 	ldw	r17,4(sp)
 4008d9c:	dc000017 	ldw	r16,0(sp)
 4008da0:	dec00304 	addi	sp,sp,12
 4008da4:	f800283a 	ret
 4008da8:	80c00017 	ldw	r3,0(r16)
 4008dac:	183ff926 	beq	r3,zero,4008d94 <__ram_exceptions_end+0xfbfe8b4c>
 4008db0:	88c00015 	stw	r3,0(r17)
 4008db4:	003ff706 	br	4008d94 <__ram_exceptions_end+0xfbfe8b4c>

04008db8 <__sread>:
 4008db8:	defffe04 	addi	sp,sp,-8
 4008dbc:	dc000015 	stw	r16,0(sp)
 4008dc0:	2821883a 	mov	r16,r5
 4008dc4:	2940038f 	ldh	r5,14(r5)
 4008dc8:	dfc00115 	stw	ra,4(sp)
 4008dcc:	4009af80 	call	4009af8 <_read_r>
 4008dd0:	10000716 	blt	r2,zero,4008df0 <__sread+0x38>
 4008dd4:	80c01417 	ldw	r3,80(r16)
 4008dd8:	1887883a 	add	r3,r3,r2
 4008ddc:	80c01415 	stw	r3,80(r16)
 4008de0:	dfc00117 	ldw	ra,4(sp)
 4008de4:	dc000017 	ldw	r16,0(sp)
 4008de8:	dec00204 	addi	sp,sp,8
 4008dec:	f800283a 	ret
 4008df0:	80c0030b 	ldhu	r3,12(r16)
 4008df4:	18fbffcc 	andi	r3,r3,61439
 4008df8:	80c0030d 	sth	r3,12(r16)
 4008dfc:	dfc00117 	ldw	ra,4(sp)
 4008e00:	dc000017 	ldw	r16,0(sp)
 4008e04:	dec00204 	addi	sp,sp,8
 4008e08:	f800283a 	ret

04008e0c <__seofread>:
 4008e0c:	0005883a 	mov	r2,zero
 4008e10:	f800283a 	ret

04008e14 <__swrite>:
 4008e14:	2880030b 	ldhu	r2,12(r5)
 4008e18:	defffb04 	addi	sp,sp,-20
 4008e1c:	dcc00315 	stw	r19,12(sp)
 4008e20:	dc800215 	stw	r18,8(sp)
 4008e24:	dc400115 	stw	r17,4(sp)
 4008e28:	dc000015 	stw	r16,0(sp)
 4008e2c:	dfc00415 	stw	ra,16(sp)
 4008e30:	10c0400c 	andi	r3,r2,256
 4008e34:	2821883a 	mov	r16,r5
 4008e38:	2023883a 	mov	r17,r4
 4008e3c:	3025883a 	mov	r18,r6
 4008e40:	3827883a 	mov	r19,r7
 4008e44:	18000526 	beq	r3,zero,4008e5c <__swrite+0x48>
 4008e48:	2940038f 	ldh	r5,14(r5)
 4008e4c:	01c00084 	movi	r7,2
 4008e50:	000d883a 	mov	r6,zero
 4008e54:	40098dc0 	call	40098dc <_lseek_r>
 4008e58:	8080030b 	ldhu	r2,12(r16)
 4008e5c:	8140038f 	ldh	r5,14(r16)
 4008e60:	10bbffcc 	andi	r2,r2,61439
 4008e64:	980f883a 	mov	r7,r19
 4008e68:	900d883a 	mov	r6,r18
 4008e6c:	8809883a 	mov	r4,r17
 4008e70:	8080030d 	sth	r2,12(r16)
 4008e74:	dfc00417 	ldw	ra,16(sp)
 4008e78:	dcc00317 	ldw	r19,12(sp)
 4008e7c:	dc800217 	ldw	r18,8(sp)
 4008e80:	dc400117 	ldw	r17,4(sp)
 4008e84:	dc000017 	ldw	r16,0(sp)
 4008e88:	dec00504 	addi	sp,sp,20
 4008e8c:	4008ef41 	jmpi	4008ef4 <_write_r>

04008e90 <__sseek>:
 4008e90:	defffe04 	addi	sp,sp,-8
 4008e94:	dc000015 	stw	r16,0(sp)
 4008e98:	2821883a 	mov	r16,r5
 4008e9c:	2940038f 	ldh	r5,14(r5)
 4008ea0:	dfc00115 	stw	ra,4(sp)
 4008ea4:	40098dc0 	call	40098dc <_lseek_r>
 4008ea8:	00ffffc4 	movi	r3,-1
 4008eac:	10c00826 	beq	r2,r3,4008ed0 <__sseek+0x40>
 4008eb0:	80c0030b 	ldhu	r3,12(r16)
 4008eb4:	80801415 	stw	r2,80(r16)
 4008eb8:	18c40014 	ori	r3,r3,4096
 4008ebc:	80c0030d 	sth	r3,12(r16)
 4008ec0:	dfc00117 	ldw	ra,4(sp)
 4008ec4:	dc000017 	ldw	r16,0(sp)
 4008ec8:	dec00204 	addi	sp,sp,8
 4008ecc:	f800283a 	ret
 4008ed0:	80c0030b 	ldhu	r3,12(r16)
 4008ed4:	18fbffcc 	andi	r3,r3,61439
 4008ed8:	80c0030d 	sth	r3,12(r16)
 4008edc:	dfc00117 	ldw	ra,4(sp)
 4008ee0:	dc000017 	ldw	r16,0(sp)
 4008ee4:	dec00204 	addi	sp,sp,8
 4008ee8:	f800283a 	ret

04008eec <__sclose>:
 4008eec:	2940038f 	ldh	r5,14(r5)
 4008ef0:	40090a81 	jmpi	40090a8 <_close_r>

04008ef4 <_write_r>:
 4008ef4:	defffd04 	addi	sp,sp,-12
 4008ef8:	2805883a 	mov	r2,r5
 4008efc:	dc000015 	stw	r16,0(sp)
 4008f00:	04010074 	movhi	r16,1025
 4008f04:	dc400115 	stw	r17,4(sp)
 4008f08:	300b883a 	mov	r5,r6
 4008f0c:	84068204 	addi	r16,r16,6664
 4008f10:	2023883a 	mov	r17,r4
 4008f14:	380d883a 	mov	r6,r7
 4008f18:	1009883a 	mov	r4,r2
 4008f1c:	dfc00215 	stw	ra,8(sp)
 4008f20:	80000015 	stw	zero,0(r16)
 4008f24:	400a4840 	call	400a484 <write>
 4008f28:	00ffffc4 	movi	r3,-1
 4008f2c:	10c00526 	beq	r2,r3,4008f44 <_write_r+0x50>
 4008f30:	dfc00217 	ldw	ra,8(sp)
 4008f34:	dc400117 	ldw	r17,4(sp)
 4008f38:	dc000017 	ldw	r16,0(sp)
 4008f3c:	dec00304 	addi	sp,sp,12
 4008f40:	f800283a 	ret
 4008f44:	80c00017 	ldw	r3,0(r16)
 4008f48:	183ff926 	beq	r3,zero,4008f30 <__ram_exceptions_end+0xfbfe8ce8>
 4008f4c:	88c00015 	stw	r3,0(r17)
 4008f50:	003ff706 	br	4008f30 <__ram_exceptions_end+0xfbfe8ce8>

04008f54 <__swsetup_r>:
 4008f54:	00810074 	movhi	r2,1025
 4008f58:	defffd04 	addi	sp,sp,-12
 4008f5c:	10bfa004 	addi	r2,r2,-384
 4008f60:	dc400115 	stw	r17,4(sp)
 4008f64:	2023883a 	mov	r17,r4
 4008f68:	11000017 	ldw	r4,0(r2)
 4008f6c:	dc000015 	stw	r16,0(sp)
 4008f70:	dfc00215 	stw	ra,8(sp)
 4008f74:	2821883a 	mov	r16,r5
 4008f78:	20000226 	beq	r4,zero,4008f84 <__swsetup_r+0x30>
 4008f7c:	20800e17 	ldw	r2,56(r4)
 4008f80:	10003126 	beq	r2,zero,4009048 <__swsetup_r+0xf4>
 4008f84:	8080030b 	ldhu	r2,12(r16)
 4008f88:	10c0020c 	andi	r3,r2,8
 4008f8c:	1009883a 	mov	r4,r2
 4008f90:	18000f26 	beq	r3,zero,4008fd0 <__swsetup_r+0x7c>
 4008f94:	80c00417 	ldw	r3,16(r16)
 4008f98:	18001526 	beq	r3,zero,4008ff0 <__swsetup_r+0x9c>
 4008f9c:	1100004c 	andi	r4,r2,1
 4008fa0:	20001c1e 	bne	r4,zero,4009014 <__swsetup_r+0xc0>
 4008fa4:	1080008c 	andi	r2,r2,2
 4008fa8:	1000291e 	bne	r2,zero,4009050 <__swsetup_r+0xfc>
 4008fac:	80800517 	ldw	r2,20(r16)
 4008fb0:	80800215 	stw	r2,8(r16)
 4008fb4:	18001c26 	beq	r3,zero,4009028 <__swsetup_r+0xd4>
 4008fb8:	0005883a 	mov	r2,zero
 4008fbc:	dfc00217 	ldw	ra,8(sp)
 4008fc0:	dc400117 	ldw	r17,4(sp)
 4008fc4:	dc000017 	ldw	r16,0(sp)
 4008fc8:	dec00304 	addi	sp,sp,12
 4008fcc:	f800283a 	ret
 4008fd0:	2080040c 	andi	r2,r4,16
 4008fd4:	10002e26 	beq	r2,zero,4009090 <__swsetup_r+0x13c>
 4008fd8:	2080010c 	andi	r2,r4,4
 4008fdc:	10001e1e 	bne	r2,zero,4009058 <__swsetup_r+0x104>
 4008fe0:	80c00417 	ldw	r3,16(r16)
 4008fe4:	20800214 	ori	r2,r4,8
 4008fe8:	8080030d 	sth	r2,12(r16)
 4008fec:	183feb1e 	bne	r3,zero,4008f9c <__ram_exceptions_end+0xfbfe8d54>
 4008ff0:	1100a00c 	andi	r4,r2,640
 4008ff4:	01408004 	movi	r5,512
 4008ff8:	217fe826 	beq	r4,r5,4008f9c <__ram_exceptions_end+0xfbfe8d54>
 4008ffc:	800b883a 	mov	r5,r16
 4009000:	8809883a 	mov	r4,r17
 4009004:	400993c0 	call	400993c <__smakebuf_r>
 4009008:	8080030b 	ldhu	r2,12(r16)
 400900c:	80c00417 	ldw	r3,16(r16)
 4009010:	003fe206 	br	4008f9c <__ram_exceptions_end+0xfbfe8d54>
 4009014:	80800517 	ldw	r2,20(r16)
 4009018:	80000215 	stw	zero,8(r16)
 400901c:	0085c83a 	sub	r2,zero,r2
 4009020:	80800615 	stw	r2,24(r16)
 4009024:	183fe41e 	bne	r3,zero,4008fb8 <__ram_exceptions_end+0xfbfe8d70>
 4009028:	80c0030b 	ldhu	r3,12(r16)
 400902c:	0005883a 	mov	r2,zero
 4009030:	1900200c 	andi	r4,r3,128
 4009034:	203fe126 	beq	r4,zero,4008fbc <__ram_exceptions_end+0xfbfe8d74>
 4009038:	18c01014 	ori	r3,r3,64
 400903c:	80c0030d 	sth	r3,12(r16)
 4009040:	00bfffc4 	movi	r2,-1
 4009044:	003fdd06 	br	4008fbc <__ram_exceptions_end+0xfbfe8d74>
 4009048:	40074b00 	call	40074b0 <__sinit>
 400904c:	003fcd06 	br	4008f84 <__ram_exceptions_end+0xfbfe8d3c>
 4009050:	0005883a 	mov	r2,zero
 4009054:	003fd606 	br	4008fb0 <__ram_exceptions_end+0xfbfe8d68>
 4009058:	81400c17 	ldw	r5,48(r16)
 400905c:	28000626 	beq	r5,zero,4009078 <__swsetup_r+0x124>
 4009060:	80801004 	addi	r2,r16,64
 4009064:	28800326 	beq	r5,r2,4009074 <__swsetup_r+0x120>
 4009068:	8809883a 	mov	r4,r17
 400906c:	40095cc0 	call	40095cc <_free_r>
 4009070:	8100030b 	ldhu	r4,12(r16)
 4009074:	80000c15 	stw	zero,48(r16)
 4009078:	80c00417 	ldw	r3,16(r16)
 400907c:	00bff6c4 	movi	r2,-37
 4009080:	1108703a 	and	r4,r2,r4
 4009084:	80000115 	stw	zero,4(r16)
 4009088:	80c00015 	stw	r3,0(r16)
 400908c:	003fd506 	br	4008fe4 <__ram_exceptions_end+0xfbfe8d9c>
 4009090:	00800244 	movi	r2,9
 4009094:	88800015 	stw	r2,0(r17)
 4009098:	20801014 	ori	r2,r4,64
 400909c:	8080030d 	sth	r2,12(r16)
 40090a0:	00bfffc4 	movi	r2,-1
 40090a4:	003fc506 	br	4008fbc <__ram_exceptions_end+0xfbfe8d74>

040090a8 <_close_r>:
 40090a8:	defffd04 	addi	sp,sp,-12
 40090ac:	dc000015 	stw	r16,0(sp)
 40090b0:	04010074 	movhi	r16,1025
 40090b4:	dc400115 	stw	r17,4(sp)
 40090b8:	84068204 	addi	r16,r16,6664
 40090bc:	2023883a 	mov	r17,r4
 40090c0:	2809883a 	mov	r4,r5
 40090c4:	dfc00215 	stw	ra,8(sp)
 40090c8:	80000015 	stw	zero,0(r16)
 40090cc:	4009c440 	call	4009c44 <close>
 40090d0:	00ffffc4 	movi	r3,-1
 40090d4:	10c00526 	beq	r2,r3,40090ec <_close_r+0x44>
 40090d8:	dfc00217 	ldw	ra,8(sp)
 40090dc:	dc400117 	ldw	r17,4(sp)
 40090e0:	dc000017 	ldw	r16,0(sp)
 40090e4:	dec00304 	addi	sp,sp,12
 40090e8:	f800283a 	ret
 40090ec:	80c00017 	ldw	r3,0(r16)
 40090f0:	183ff926 	beq	r3,zero,40090d8 <__ram_exceptions_end+0xfbfe8e90>
 40090f4:	88c00015 	stw	r3,0(r17)
 40090f8:	003ff706 	br	40090d8 <__ram_exceptions_end+0xfbfe8e90>

040090fc <_fclose_r>:
 40090fc:	28003926 	beq	r5,zero,40091e4 <_fclose_r+0xe8>
 4009100:	defffc04 	addi	sp,sp,-16
 4009104:	dc400115 	stw	r17,4(sp)
 4009108:	dc000015 	stw	r16,0(sp)
 400910c:	dfc00315 	stw	ra,12(sp)
 4009110:	dc800215 	stw	r18,8(sp)
 4009114:	2023883a 	mov	r17,r4
 4009118:	2821883a 	mov	r16,r5
 400911c:	20000226 	beq	r4,zero,4009128 <_fclose_r+0x2c>
 4009120:	20800e17 	ldw	r2,56(r4)
 4009124:	10002726 	beq	r2,zero,40091c4 <_fclose_r+0xc8>
 4009128:	8080030f 	ldh	r2,12(r16)
 400912c:	1000071e 	bne	r2,zero,400914c <_fclose_r+0x50>
 4009130:	0005883a 	mov	r2,zero
 4009134:	dfc00317 	ldw	ra,12(sp)
 4009138:	dc800217 	ldw	r18,8(sp)
 400913c:	dc400117 	ldw	r17,4(sp)
 4009140:	dc000017 	ldw	r16,0(sp)
 4009144:	dec00404 	addi	sp,sp,16
 4009148:	f800283a 	ret
 400914c:	800b883a 	mov	r5,r16
 4009150:	8809883a 	mov	r4,r17
 4009154:	40092000 	call	4009200 <__sflush_r>
 4009158:	1025883a 	mov	r18,r2
 400915c:	80800b17 	ldw	r2,44(r16)
 4009160:	10000426 	beq	r2,zero,4009174 <_fclose_r+0x78>
 4009164:	81400717 	ldw	r5,28(r16)
 4009168:	8809883a 	mov	r4,r17
 400916c:	103ee83a 	callr	r2
 4009170:	10001616 	blt	r2,zero,40091cc <_fclose_r+0xd0>
 4009174:	8080030b 	ldhu	r2,12(r16)
 4009178:	1080200c 	andi	r2,r2,128
 400917c:	1000151e 	bne	r2,zero,40091d4 <_fclose_r+0xd8>
 4009180:	81400c17 	ldw	r5,48(r16)
 4009184:	28000526 	beq	r5,zero,400919c <_fclose_r+0xa0>
 4009188:	80801004 	addi	r2,r16,64
 400918c:	28800226 	beq	r5,r2,4009198 <_fclose_r+0x9c>
 4009190:	8809883a 	mov	r4,r17
 4009194:	40095cc0 	call	40095cc <_free_r>
 4009198:	80000c15 	stw	zero,48(r16)
 400919c:	81401117 	ldw	r5,68(r16)
 40091a0:	28000326 	beq	r5,zero,40091b0 <_fclose_r+0xb4>
 40091a4:	8809883a 	mov	r4,r17
 40091a8:	40095cc0 	call	40095cc <_free_r>
 40091ac:	80001115 	stw	zero,68(r16)
 40091b0:	40074c00 	call	40074c0 <__sfp_lock_acquire>
 40091b4:	8000030d 	sth	zero,12(r16)
 40091b8:	40074c40 	call	40074c4 <__sfp_lock_release>
 40091bc:	9005883a 	mov	r2,r18
 40091c0:	003fdc06 	br	4009134 <__ram_exceptions_end+0xfbfe8eec>
 40091c4:	40074b00 	call	40074b0 <__sinit>
 40091c8:	003fd706 	br	4009128 <__ram_exceptions_end+0xfbfe8ee0>
 40091cc:	04bfffc4 	movi	r18,-1
 40091d0:	003fe806 	br	4009174 <__ram_exceptions_end+0xfbfe8f2c>
 40091d4:	81400417 	ldw	r5,16(r16)
 40091d8:	8809883a 	mov	r4,r17
 40091dc:	40095cc0 	call	40095cc <_free_r>
 40091e0:	003fe706 	br	4009180 <__ram_exceptions_end+0xfbfe8f38>
 40091e4:	0005883a 	mov	r2,zero
 40091e8:	f800283a 	ret

040091ec <fclose>:
 40091ec:	00810074 	movhi	r2,1025
 40091f0:	10bfa004 	addi	r2,r2,-384
 40091f4:	200b883a 	mov	r5,r4
 40091f8:	11000017 	ldw	r4,0(r2)
 40091fc:	40090fc1 	jmpi	40090fc <_fclose_r>

04009200 <__sflush_r>:
 4009200:	2880030b 	ldhu	r2,12(r5)
 4009204:	defffb04 	addi	sp,sp,-20
 4009208:	dcc00315 	stw	r19,12(sp)
 400920c:	dc400115 	stw	r17,4(sp)
 4009210:	dfc00415 	stw	ra,16(sp)
 4009214:	dc800215 	stw	r18,8(sp)
 4009218:	dc000015 	stw	r16,0(sp)
 400921c:	10c0020c 	andi	r3,r2,8
 4009220:	2823883a 	mov	r17,r5
 4009224:	2027883a 	mov	r19,r4
 4009228:	1800311e 	bne	r3,zero,40092f0 <__sflush_r+0xf0>
 400922c:	28c00117 	ldw	r3,4(r5)
 4009230:	10820014 	ori	r2,r2,2048
 4009234:	2880030d 	sth	r2,12(r5)
 4009238:	00c04b0e 	bge	zero,r3,4009368 <__sflush_r+0x168>
 400923c:	8a000a17 	ldw	r8,40(r17)
 4009240:	40002326 	beq	r8,zero,40092d0 <__sflush_r+0xd0>
 4009244:	9c000017 	ldw	r16,0(r19)
 4009248:	10c4000c 	andi	r3,r2,4096
 400924c:	98000015 	stw	zero,0(r19)
 4009250:	18004826 	beq	r3,zero,4009374 <__sflush_r+0x174>
 4009254:	89801417 	ldw	r6,80(r17)
 4009258:	10c0010c 	andi	r3,r2,4
 400925c:	18000626 	beq	r3,zero,4009278 <__sflush_r+0x78>
 4009260:	88c00117 	ldw	r3,4(r17)
 4009264:	88800c17 	ldw	r2,48(r17)
 4009268:	30cdc83a 	sub	r6,r6,r3
 400926c:	10000226 	beq	r2,zero,4009278 <__sflush_r+0x78>
 4009270:	88800f17 	ldw	r2,60(r17)
 4009274:	308dc83a 	sub	r6,r6,r2
 4009278:	89400717 	ldw	r5,28(r17)
 400927c:	000f883a 	mov	r7,zero
 4009280:	9809883a 	mov	r4,r19
 4009284:	403ee83a 	callr	r8
 4009288:	00ffffc4 	movi	r3,-1
 400928c:	10c04426 	beq	r2,r3,40093a0 <__sflush_r+0x1a0>
 4009290:	88c0030b 	ldhu	r3,12(r17)
 4009294:	89000417 	ldw	r4,16(r17)
 4009298:	88000115 	stw	zero,4(r17)
 400929c:	197dffcc 	andi	r5,r3,63487
 40092a0:	8940030d 	sth	r5,12(r17)
 40092a4:	89000015 	stw	r4,0(r17)
 40092a8:	18c4000c 	andi	r3,r3,4096
 40092ac:	18002c1e 	bne	r3,zero,4009360 <__sflush_r+0x160>
 40092b0:	89400c17 	ldw	r5,48(r17)
 40092b4:	9c000015 	stw	r16,0(r19)
 40092b8:	28000526 	beq	r5,zero,40092d0 <__sflush_r+0xd0>
 40092bc:	88801004 	addi	r2,r17,64
 40092c0:	28800226 	beq	r5,r2,40092cc <__sflush_r+0xcc>
 40092c4:	9809883a 	mov	r4,r19
 40092c8:	40095cc0 	call	40095cc <_free_r>
 40092cc:	88000c15 	stw	zero,48(r17)
 40092d0:	0005883a 	mov	r2,zero
 40092d4:	dfc00417 	ldw	ra,16(sp)
 40092d8:	dcc00317 	ldw	r19,12(sp)
 40092dc:	dc800217 	ldw	r18,8(sp)
 40092e0:	dc400117 	ldw	r17,4(sp)
 40092e4:	dc000017 	ldw	r16,0(sp)
 40092e8:	dec00504 	addi	sp,sp,20
 40092ec:	f800283a 	ret
 40092f0:	2c800417 	ldw	r18,16(r5)
 40092f4:	903ff626 	beq	r18,zero,40092d0 <__ram_exceptions_end+0xfbfe9088>
 40092f8:	2c000017 	ldw	r16,0(r5)
 40092fc:	108000cc 	andi	r2,r2,3
 4009300:	2c800015 	stw	r18,0(r5)
 4009304:	84a1c83a 	sub	r16,r16,r18
 4009308:	1000131e 	bne	r2,zero,4009358 <__sflush_r+0x158>
 400930c:	28800517 	ldw	r2,20(r5)
 4009310:	88800215 	stw	r2,8(r17)
 4009314:	04000316 	blt	zero,r16,4009324 <__sflush_r+0x124>
 4009318:	003fed06 	br	40092d0 <__ram_exceptions_end+0xfbfe9088>
 400931c:	90a5883a 	add	r18,r18,r2
 4009320:	043feb0e 	bge	zero,r16,40092d0 <__ram_exceptions_end+0xfbfe9088>
 4009324:	88800917 	ldw	r2,36(r17)
 4009328:	89400717 	ldw	r5,28(r17)
 400932c:	800f883a 	mov	r7,r16
 4009330:	900d883a 	mov	r6,r18
 4009334:	9809883a 	mov	r4,r19
 4009338:	103ee83a 	callr	r2
 400933c:	80a1c83a 	sub	r16,r16,r2
 4009340:	00bff616 	blt	zero,r2,400931c <__ram_exceptions_end+0xfbfe90d4>
 4009344:	88c0030b 	ldhu	r3,12(r17)
 4009348:	00bfffc4 	movi	r2,-1
 400934c:	18c01014 	ori	r3,r3,64
 4009350:	88c0030d 	sth	r3,12(r17)
 4009354:	003fdf06 	br	40092d4 <__ram_exceptions_end+0xfbfe908c>
 4009358:	0005883a 	mov	r2,zero
 400935c:	003fec06 	br	4009310 <__ram_exceptions_end+0xfbfe90c8>
 4009360:	88801415 	stw	r2,80(r17)
 4009364:	003fd206 	br	40092b0 <__ram_exceptions_end+0xfbfe9068>
 4009368:	28c00f17 	ldw	r3,60(r5)
 400936c:	00ffb316 	blt	zero,r3,400923c <__ram_exceptions_end+0xfbfe8ff4>
 4009370:	003fd706 	br	40092d0 <__ram_exceptions_end+0xfbfe9088>
 4009374:	89400717 	ldw	r5,28(r17)
 4009378:	000d883a 	mov	r6,zero
 400937c:	01c00044 	movi	r7,1
 4009380:	9809883a 	mov	r4,r19
 4009384:	403ee83a 	callr	r8
 4009388:	100d883a 	mov	r6,r2
 400938c:	00bfffc4 	movi	r2,-1
 4009390:	30801426 	beq	r6,r2,40093e4 <__sflush_r+0x1e4>
 4009394:	8880030b 	ldhu	r2,12(r17)
 4009398:	8a000a17 	ldw	r8,40(r17)
 400939c:	003fae06 	br	4009258 <__ram_exceptions_end+0xfbfe9010>
 40093a0:	98c00017 	ldw	r3,0(r19)
 40093a4:	183fba26 	beq	r3,zero,4009290 <__ram_exceptions_end+0xfbfe9048>
 40093a8:	01000744 	movi	r4,29
 40093ac:	19000626 	beq	r3,r4,40093c8 <__sflush_r+0x1c8>
 40093b0:	01000584 	movi	r4,22
 40093b4:	19000426 	beq	r3,r4,40093c8 <__sflush_r+0x1c8>
 40093b8:	88c0030b 	ldhu	r3,12(r17)
 40093bc:	18c01014 	ori	r3,r3,64
 40093c0:	88c0030d 	sth	r3,12(r17)
 40093c4:	003fc306 	br	40092d4 <__ram_exceptions_end+0xfbfe908c>
 40093c8:	8880030b 	ldhu	r2,12(r17)
 40093cc:	88c00417 	ldw	r3,16(r17)
 40093d0:	88000115 	stw	zero,4(r17)
 40093d4:	10bdffcc 	andi	r2,r2,63487
 40093d8:	8880030d 	sth	r2,12(r17)
 40093dc:	88c00015 	stw	r3,0(r17)
 40093e0:	003fb306 	br	40092b0 <__ram_exceptions_end+0xfbfe9068>
 40093e4:	98800017 	ldw	r2,0(r19)
 40093e8:	103fea26 	beq	r2,zero,4009394 <__ram_exceptions_end+0xfbfe914c>
 40093ec:	00c00744 	movi	r3,29
 40093f0:	10c00226 	beq	r2,r3,40093fc <__sflush_r+0x1fc>
 40093f4:	00c00584 	movi	r3,22
 40093f8:	10c0031e 	bne	r2,r3,4009408 <__sflush_r+0x208>
 40093fc:	9c000015 	stw	r16,0(r19)
 4009400:	0005883a 	mov	r2,zero
 4009404:	003fb306 	br	40092d4 <__ram_exceptions_end+0xfbfe908c>
 4009408:	88c0030b 	ldhu	r3,12(r17)
 400940c:	3005883a 	mov	r2,r6
 4009410:	18c01014 	ori	r3,r3,64
 4009414:	88c0030d 	sth	r3,12(r17)
 4009418:	003fae06 	br	40092d4 <__ram_exceptions_end+0xfbfe908c>

0400941c <_fflush_r>:
 400941c:	defffd04 	addi	sp,sp,-12
 4009420:	dc000115 	stw	r16,4(sp)
 4009424:	dfc00215 	stw	ra,8(sp)
 4009428:	2021883a 	mov	r16,r4
 400942c:	20000226 	beq	r4,zero,4009438 <_fflush_r+0x1c>
 4009430:	20800e17 	ldw	r2,56(r4)
 4009434:	10000c26 	beq	r2,zero,4009468 <_fflush_r+0x4c>
 4009438:	2880030f 	ldh	r2,12(r5)
 400943c:	1000051e 	bne	r2,zero,4009454 <_fflush_r+0x38>
 4009440:	0005883a 	mov	r2,zero
 4009444:	dfc00217 	ldw	ra,8(sp)
 4009448:	dc000117 	ldw	r16,4(sp)
 400944c:	dec00304 	addi	sp,sp,12
 4009450:	f800283a 	ret
 4009454:	8009883a 	mov	r4,r16
 4009458:	dfc00217 	ldw	ra,8(sp)
 400945c:	dc000117 	ldw	r16,4(sp)
 4009460:	dec00304 	addi	sp,sp,12
 4009464:	40092001 	jmpi	4009200 <__sflush_r>
 4009468:	d9400015 	stw	r5,0(sp)
 400946c:	40074b00 	call	40074b0 <__sinit>
 4009470:	d9400017 	ldw	r5,0(sp)
 4009474:	003ff006 	br	4009438 <__ram_exceptions_end+0xfbfe91f0>

04009478 <fflush>:
 4009478:	20000526 	beq	r4,zero,4009490 <fflush+0x18>
 400947c:	00810074 	movhi	r2,1025
 4009480:	10bfa004 	addi	r2,r2,-384
 4009484:	200b883a 	mov	r5,r4
 4009488:	11000017 	ldw	r4,0(r2)
 400948c:	400941c1 	jmpi	400941c <_fflush_r>
 4009490:	00810074 	movhi	r2,1025
 4009494:	10bf9f04 	addi	r2,r2,-388
 4009498:	11000017 	ldw	r4,0(r2)
 400949c:	01410074 	movhi	r5,1025
 40094a0:	29650704 	addi	r5,r5,-27620
 40094a4:	4007a801 	jmpi	4007a80 <_fwalk_reent>

040094a8 <_malloc_trim_r>:
 40094a8:	defffb04 	addi	sp,sp,-20
 40094ac:	dcc00315 	stw	r19,12(sp)
 40094b0:	04c10074 	movhi	r19,1025
 40094b4:	dc800215 	stw	r18,8(sp)
 40094b8:	dc400115 	stw	r17,4(sp)
 40094bc:	dc000015 	stw	r16,0(sp)
 40094c0:	dfc00415 	stw	ra,16(sp)
 40094c4:	2821883a 	mov	r16,r5
 40094c8:	9cf9ec04 	addi	r19,r19,-6224
 40094cc:	2025883a 	mov	r18,r4
 40094d0:	400a1840 	call	400a184 <__malloc_lock>
 40094d4:	98800217 	ldw	r2,8(r19)
 40094d8:	14400117 	ldw	r17,4(r2)
 40094dc:	00bfff04 	movi	r2,-4
 40094e0:	88a2703a 	and	r17,r17,r2
 40094e4:	8c21c83a 	sub	r16,r17,r16
 40094e8:	8403fbc4 	addi	r16,r16,4079
 40094ec:	8020d33a 	srli	r16,r16,12
 40094f0:	0083ffc4 	movi	r2,4095
 40094f4:	843fffc4 	addi	r16,r16,-1
 40094f8:	8020933a 	slli	r16,r16,12
 40094fc:	1400060e 	bge	r2,r16,4009518 <_malloc_trim_r+0x70>
 4009500:	000b883a 	mov	r5,zero
 4009504:	9009883a 	mov	r4,r18
 4009508:	4008d640 	call	4008d64 <_sbrk_r>
 400950c:	98c00217 	ldw	r3,8(r19)
 4009510:	1c47883a 	add	r3,r3,r17
 4009514:	10c00a26 	beq	r2,r3,4009540 <_malloc_trim_r+0x98>
 4009518:	9009883a 	mov	r4,r18
 400951c:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4009520:	0005883a 	mov	r2,zero
 4009524:	dfc00417 	ldw	ra,16(sp)
 4009528:	dcc00317 	ldw	r19,12(sp)
 400952c:	dc800217 	ldw	r18,8(sp)
 4009530:	dc400117 	ldw	r17,4(sp)
 4009534:	dc000017 	ldw	r16,0(sp)
 4009538:	dec00504 	addi	sp,sp,20
 400953c:	f800283a 	ret
 4009540:	040bc83a 	sub	r5,zero,r16
 4009544:	9009883a 	mov	r4,r18
 4009548:	4008d640 	call	4008d64 <_sbrk_r>
 400954c:	00ffffc4 	movi	r3,-1
 4009550:	10c00d26 	beq	r2,r3,4009588 <_malloc_trim_r+0xe0>
 4009554:	00c10074 	movhi	r3,1025
 4009558:	18c68a04 	addi	r3,r3,6696
 400955c:	18800017 	ldw	r2,0(r3)
 4009560:	99000217 	ldw	r4,8(r19)
 4009564:	8c23c83a 	sub	r17,r17,r16
 4009568:	8c400054 	ori	r17,r17,1
 400956c:	1421c83a 	sub	r16,r2,r16
 4009570:	24400115 	stw	r17,4(r4)
 4009574:	9009883a 	mov	r4,r18
 4009578:	1c000015 	stw	r16,0(r3)
 400957c:	400a1a80 	call	400a1a8 <__malloc_unlock>
 4009580:	00800044 	movi	r2,1
 4009584:	003fe706 	br	4009524 <__ram_exceptions_end+0xfbfe92dc>
 4009588:	000b883a 	mov	r5,zero
 400958c:	9009883a 	mov	r4,r18
 4009590:	4008d640 	call	4008d64 <_sbrk_r>
 4009594:	99000217 	ldw	r4,8(r19)
 4009598:	014003c4 	movi	r5,15
 400959c:	1107c83a 	sub	r3,r2,r4
 40095a0:	28ffdd0e 	bge	r5,r3,4009518 <__ram_exceptions_end+0xfbfe92d0>
 40095a4:	01410074 	movhi	r5,1025
 40095a8:	297fa104 	addi	r5,r5,-380
 40095ac:	29400017 	ldw	r5,0(r5)
 40095b0:	18c00054 	ori	r3,r3,1
 40095b4:	20c00115 	stw	r3,4(r4)
 40095b8:	00c10074 	movhi	r3,1025
 40095bc:	1145c83a 	sub	r2,r2,r5
 40095c0:	18c68a04 	addi	r3,r3,6696
 40095c4:	18800015 	stw	r2,0(r3)
 40095c8:	003fd306 	br	4009518 <__ram_exceptions_end+0xfbfe92d0>

040095cc <_free_r>:
 40095cc:	28004126 	beq	r5,zero,40096d4 <_free_r+0x108>
 40095d0:	defffd04 	addi	sp,sp,-12
 40095d4:	dc400115 	stw	r17,4(sp)
 40095d8:	dc000015 	stw	r16,0(sp)
 40095dc:	2023883a 	mov	r17,r4
 40095e0:	2821883a 	mov	r16,r5
 40095e4:	dfc00215 	stw	ra,8(sp)
 40095e8:	400a1840 	call	400a184 <__malloc_lock>
 40095ec:	81ffff17 	ldw	r7,-4(r16)
 40095f0:	00bfff84 	movi	r2,-2
 40095f4:	01010074 	movhi	r4,1025
 40095f8:	81bffe04 	addi	r6,r16,-8
 40095fc:	3884703a 	and	r2,r7,r2
 4009600:	2139ec04 	addi	r4,r4,-6224
 4009604:	308b883a 	add	r5,r6,r2
 4009608:	2a400117 	ldw	r9,4(r5)
 400960c:	22000217 	ldw	r8,8(r4)
 4009610:	00ffff04 	movi	r3,-4
 4009614:	48c6703a 	and	r3,r9,r3
 4009618:	2a005726 	beq	r5,r8,4009778 <_free_r+0x1ac>
 400961c:	28c00115 	stw	r3,4(r5)
 4009620:	39c0004c 	andi	r7,r7,1
 4009624:	3800091e 	bne	r7,zero,400964c <_free_r+0x80>
 4009628:	823ffe17 	ldw	r8,-8(r16)
 400962c:	22400204 	addi	r9,r4,8
 4009630:	320dc83a 	sub	r6,r6,r8
 4009634:	31c00217 	ldw	r7,8(r6)
 4009638:	1205883a 	add	r2,r2,r8
 400963c:	3a406526 	beq	r7,r9,40097d4 <_free_r+0x208>
 4009640:	32000317 	ldw	r8,12(r6)
 4009644:	3a000315 	stw	r8,12(r7)
 4009648:	41c00215 	stw	r7,8(r8)
 400964c:	28cf883a 	add	r7,r5,r3
 4009650:	39c00117 	ldw	r7,4(r7)
 4009654:	39c0004c 	andi	r7,r7,1
 4009658:	38003a26 	beq	r7,zero,4009744 <_free_r+0x178>
 400965c:	10c00054 	ori	r3,r2,1
 4009660:	30c00115 	stw	r3,4(r6)
 4009664:	3087883a 	add	r3,r6,r2
 4009668:	18800015 	stw	r2,0(r3)
 400966c:	00c07fc4 	movi	r3,511
 4009670:	18801936 	bltu	r3,r2,40096d8 <_free_r+0x10c>
 4009674:	1004d0fa 	srli	r2,r2,3
 4009678:	01c00044 	movi	r7,1
 400967c:	21400117 	ldw	r5,4(r4)
 4009680:	10c00044 	addi	r3,r2,1
 4009684:	18c7883a 	add	r3,r3,r3
 4009688:	1005d0ba 	srai	r2,r2,2
 400968c:	18c7883a 	add	r3,r3,r3
 4009690:	18c7883a 	add	r3,r3,r3
 4009694:	1907883a 	add	r3,r3,r4
 4009698:	3884983a 	sll	r2,r7,r2
 400969c:	19c00017 	ldw	r7,0(r3)
 40096a0:	1a3ffe04 	addi	r8,r3,-8
 40096a4:	1144b03a 	or	r2,r2,r5
 40096a8:	32000315 	stw	r8,12(r6)
 40096ac:	31c00215 	stw	r7,8(r6)
 40096b0:	20800115 	stw	r2,4(r4)
 40096b4:	19800015 	stw	r6,0(r3)
 40096b8:	39800315 	stw	r6,12(r7)
 40096bc:	8809883a 	mov	r4,r17
 40096c0:	dfc00217 	ldw	ra,8(sp)
 40096c4:	dc400117 	ldw	r17,4(sp)
 40096c8:	dc000017 	ldw	r16,0(sp)
 40096cc:	dec00304 	addi	sp,sp,12
 40096d0:	400a1a81 	jmpi	400a1a8 <__malloc_unlock>
 40096d4:	f800283a 	ret
 40096d8:	100ad27a 	srli	r5,r2,9
 40096dc:	00c00104 	movi	r3,4
 40096e0:	19404a36 	bltu	r3,r5,400980c <_free_r+0x240>
 40096e4:	100ad1ba 	srli	r5,r2,6
 40096e8:	28c00e44 	addi	r3,r5,57
 40096ec:	18c7883a 	add	r3,r3,r3
 40096f0:	29400e04 	addi	r5,r5,56
 40096f4:	18c7883a 	add	r3,r3,r3
 40096f8:	18c7883a 	add	r3,r3,r3
 40096fc:	1909883a 	add	r4,r3,r4
 4009700:	20c00017 	ldw	r3,0(r4)
 4009704:	01c10074 	movhi	r7,1025
 4009708:	213ffe04 	addi	r4,r4,-8
 400970c:	39f9ec04 	addi	r7,r7,-6224
 4009710:	20c04426 	beq	r4,r3,4009824 <_free_r+0x258>
 4009714:	01ffff04 	movi	r7,-4
 4009718:	19400117 	ldw	r5,4(r3)
 400971c:	29ca703a 	and	r5,r5,r7
 4009720:	1140022e 	bgeu	r2,r5,400972c <_free_r+0x160>
 4009724:	18c00217 	ldw	r3,8(r3)
 4009728:	20fffb1e 	bne	r4,r3,4009718 <__ram_exceptions_end+0xfbfe94d0>
 400972c:	19000317 	ldw	r4,12(r3)
 4009730:	31000315 	stw	r4,12(r6)
 4009734:	30c00215 	stw	r3,8(r6)
 4009738:	21800215 	stw	r6,8(r4)
 400973c:	19800315 	stw	r6,12(r3)
 4009740:	003fde06 	br	40096bc <__ram_exceptions_end+0xfbfe9474>
 4009744:	29c00217 	ldw	r7,8(r5)
 4009748:	10c5883a 	add	r2,r2,r3
 400974c:	00c10074 	movhi	r3,1025
 4009750:	18f9ee04 	addi	r3,r3,-6216
 4009754:	38c03b26 	beq	r7,r3,4009844 <_free_r+0x278>
 4009758:	2a000317 	ldw	r8,12(r5)
 400975c:	11400054 	ori	r5,r2,1
 4009760:	3087883a 	add	r3,r6,r2
 4009764:	3a000315 	stw	r8,12(r7)
 4009768:	41c00215 	stw	r7,8(r8)
 400976c:	31400115 	stw	r5,4(r6)
 4009770:	18800015 	stw	r2,0(r3)
 4009774:	003fbd06 	br	400966c <__ram_exceptions_end+0xfbfe9424>
 4009778:	39c0004c 	andi	r7,r7,1
 400977c:	10c5883a 	add	r2,r2,r3
 4009780:	3800071e 	bne	r7,zero,40097a0 <_free_r+0x1d4>
 4009784:	81fffe17 	ldw	r7,-8(r16)
 4009788:	31cdc83a 	sub	r6,r6,r7
 400978c:	30c00317 	ldw	r3,12(r6)
 4009790:	31400217 	ldw	r5,8(r6)
 4009794:	11c5883a 	add	r2,r2,r7
 4009798:	28c00315 	stw	r3,12(r5)
 400979c:	19400215 	stw	r5,8(r3)
 40097a0:	10c00054 	ori	r3,r2,1
 40097a4:	30c00115 	stw	r3,4(r6)
 40097a8:	00c10074 	movhi	r3,1025
 40097ac:	18ffa204 	addi	r3,r3,-376
 40097b0:	18c00017 	ldw	r3,0(r3)
 40097b4:	21800215 	stw	r6,8(r4)
 40097b8:	10ffc036 	bltu	r2,r3,40096bc <__ram_exceptions_end+0xfbfe9474>
 40097bc:	00810074 	movhi	r2,1025
 40097c0:	10868104 	addi	r2,r2,6660
 40097c4:	11400017 	ldw	r5,0(r2)
 40097c8:	8809883a 	mov	r4,r17
 40097cc:	40094a80 	call	40094a8 <_malloc_trim_r>
 40097d0:	003fba06 	br	40096bc <__ram_exceptions_end+0xfbfe9474>
 40097d4:	28c9883a 	add	r4,r5,r3
 40097d8:	21000117 	ldw	r4,4(r4)
 40097dc:	2100004c 	andi	r4,r4,1
 40097e0:	2000391e 	bne	r4,zero,40098c8 <_free_r+0x2fc>
 40097e4:	29c00217 	ldw	r7,8(r5)
 40097e8:	29000317 	ldw	r4,12(r5)
 40097ec:	1885883a 	add	r2,r3,r2
 40097f0:	10c00054 	ori	r3,r2,1
 40097f4:	39000315 	stw	r4,12(r7)
 40097f8:	21c00215 	stw	r7,8(r4)
 40097fc:	30c00115 	stw	r3,4(r6)
 4009800:	308d883a 	add	r6,r6,r2
 4009804:	30800015 	stw	r2,0(r6)
 4009808:	003fac06 	br	40096bc <__ram_exceptions_end+0xfbfe9474>
 400980c:	00c00504 	movi	r3,20
 4009810:	19401536 	bltu	r3,r5,4009868 <_free_r+0x29c>
 4009814:	28c01704 	addi	r3,r5,92
 4009818:	18c7883a 	add	r3,r3,r3
 400981c:	294016c4 	addi	r5,r5,91
 4009820:	003fb406 	br	40096f4 <__ram_exceptions_end+0xfbfe94ac>
 4009824:	280bd0ba 	srai	r5,r5,2
 4009828:	00c00044 	movi	r3,1
 400982c:	38800117 	ldw	r2,4(r7)
 4009830:	194a983a 	sll	r5,r3,r5
 4009834:	2007883a 	mov	r3,r4
 4009838:	2884b03a 	or	r2,r5,r2
 400983c:	38800115 	stw	r2,4(r7)
 4009840:	003fbb06 	br	4009730 <__ram_exceptions_end+0xfbfe94e8>
 4009844:	21800515 	stw	r6,20(r4)
 4009848:	21800415 	stw	r6,16(r4)
 400984c:	10c00054 	ori	r3,r2,1
 4009850:	31c00315 	stw	r7,12(r6)
 4009854:	31c00215 	stw	r7,8(r6)
 4009858:	30c00115 	stw	r3,4(r6)
 400985c:	308d883a 	add	r6,r6,r2
 4009860:	30800015 	stw	r2,0(r6)
 4009864:	003f9506 	br	40096bc <__ram_exceptions_end+0xfbfe9474>
 4009868:	00c01504 	movi	r3,84
 400986c:	19400536 	bltu	r3,r5,4009884 <_free_r+0x2b8>
 4009870:	100ad33a 	srli	r5,r2,12
 4009874:	28c01bc4 	addi	r3,r5,111
 4009878:	18c7883a 	add	r3,r3,r3
 400987c:	29401b84 	addi	r5,r5,110
 4009880:	003f9c06 	br	40096f4 <__ram_exceptions_end+0xfbfe94ac>
 4009884:	00c05504 	movi	r3,340
 4009888:	19400536 	bltu	r3,r5,40098a0 <_free_r+0x2d4>
 400988c:	100ad3fa 	srli	r5,r2,15
 4009890:	28c01e04 	addi	r3,r5,120
 4009894:	18c7883a 	add	r3,r3,r3
 4009898:	29401dc4 	addi	r5,r5,119
 400989c:	003f9506 	br	40096f4 <__ram_exceptions_end+0xfbfe94ac>
 40098a0:	00c15504 	movi	r3,1364
 40098a4:	19400536 	bltu	r3,r5,40098bc <_free_r+0x2f0>
 40098a8:	100ad4ba 	srli	r5,r2,18
 40098ac:	28c01f44 	addi	r3,r5,125
 40098b0:	18c7883a 	add	r3,r3,r3
 40098b4:	29401f04 	addi	r5,r5,124
 40098b8:	003f8e06 	br	40096f4 <__ram_exceptions_end+0xfbfe94ac>
 40098bc:	00c03f84 	movi	r3,254
 40098c0:	01401f84 	movi	r5,126
 40098c4:	003f8b06 	br	40096f4 <__ram_exceptions_end+0xfbfe94ac>
 40098c8:	10c00054 	ori	r3,r2,1
 40098cc:	30c00115 	stw	r3,4(r6)
 40098d0:	308d883a 	add	r6,r6,r2
 40098d4:	30800015 	stw	r2,0(r6)
 40098d8:	003f7806 	br	40096bc <__ram_exceptions_end+0xfbfe9474>

040098dc <_lseek_r>:
 40098dc:	defffd04 	addi	sp,sp,-12
 40098e0:	2805883a 	mov	r2,r5
 40098e4:	dc000015 	stw	r16,0(sp)
 40098e8:	04010074 	movhi	r16,1025
 40098ec:	dc400115 	stw	r17,4(sp)
 40098f0:	300b883a 	mov	r5,r6
 40098f4:	84068204 	addi	r16,r16,6664
 40098f8:	2023883a 	mov	r17,r4
 40098fc:	380d883a 	mov	r6,r7
 4009900:	1009883a 	mov	r4,r2
 4009904:	dfc00215 	stw	ra,8(sp)
 4009908:	80000015 	stw	zero,0(r16)
 400990c:	400a0340 	call	400a034 <lseek>
 4009910:	00ffffc4 	movi	r3,-1
 4009914:	10c00526 	beq	r2,r3,400992c <_lseek_r+0x50>
 4009918:	dfc00217 	ldw	ra,8(sp)
 400991c:	dc400117 	ldw	r17,4(sp)
 4009920:	dc000017 	ldw	r16,0(sp)
 4009924:	dec00304 	addi	sp,sp,12
 4009928:	f800283a 	ret
 400992c:	80c00017 	ldw	r3,0(r16)
 4009930:	183ff926 	beq	r3,zero,4009918 <__ram_exceptions_end+0xfbfe96d0>
 4009934:	88c00015 	stw	r3,0(r17)
 4009938:	003ff706 	br	4009918 <__ram_exceptions_end+0xfbfe96d0>

0400993c <__smakebuf_r>:
 400993c:	2880030b 	ldhu	r2,12(r5)
 4009940:	10c0008c 	andi	r3,r2,2
 4009944:	1800411e 	bne	r3,zero,4009a4c <__smakebuf_r+0x110>
 4009948:	deffec04 	addi	sp,sp,-80
 400994c:	dc000f15 	stw	r16,60(sp)
 4009950:	2821883a 	mov	r16,r5
 4009954:	2940038f 	ldh	r5,14(r5)
 4009958:	dc401015 	stw	r17,64(sp)
 400995c:	dfc01315 	stw	ra,76(sp)
 4009960:	dcc01215 	stw	r19,72(sp)
 4009964:	dc801115 	stw	r18,68(sp)
 4009968:	2023883a 	mov	r17,r4
 400996c:	28001c16 	blt	r5,zero,40099e0 <__smakebuf_r+0xa4>
 4009970:	d80d883a 	mov	r6,sp
 4009974:	4009b580 	call	4009b58 <_fstat_r>
 4009978:	10001816 	blt	r2,zero,40099dc <__smakebuf_r+0xa0>
 400997c:	d8800117 	ldw	r2,4(sp)
 4009980:	00e00014 	movui	r3,32768
 4009984:	10bc000c 	andi	r2,r2,61440
 4009988:	14c80020 	cmpeqi	r19,r2,8192
 400998c:	10c03726 	beq	r2,r3,4009a6c <__smakebuf_r+0x130>
 4009990:	80c0030b 	ldhu	r3,12(r16)
 4009994:	18c20014 	ori	r3,r3,2048
 4009998:	80c0030d 	sth	r3,12(r16)
 400999c:	00c80004 	movi	r3,8192
 40099a0:	10c0521e 	bne	r2,r3,4009aec <__smakebuf_r+0x1b0>
 40099a4:	8140038f 	ldh	r5,14(r16)
 40099a8:	8809883a 	mov	r4,r17
 40099ac:	4009bb40 	call	4009bb4 <_isatty_r>
 40099b0:	10004c26 	beq	r2,zero,4009ae4 <__smakebuf_r+0x1a8>
 40099b4:	8080030b 	ldhu	r2,12(r16)
 40099b8:	80c010c4 	addi	r3,r16,67
 40099bc:	80c00015 	stw	r3,0(r16)
 40099c0:	10800054 	ori	r2,r2,1
 40099c4:	8080030d 	sth	r2,12(r16)
 40099c8:	00800044 	movi	r2,1
 40099cc:	80c00415 	stw	r3,16(r16)
 40099d0:	80800515 	stw	r2,20(r16)
 40099d4:	04810004 	movi	r18,1024
 40099d8:	00000706 	br	40099f8 <__smakebuf_r+0xbc>
 40099dc:	8080030b 	ldhu	r2,12(r16)
 40099e0:	10c0200c 	andi	r3,r2,128
 40099e4:	18001f1e 	bne	r3,zero,4009a64 <__smakebuf_r+0x128>
 40099e8:	04810004 	movi	r18,1024
 40099ec:	10820014 	ori	r2,r2,2048
 40099f0:	8080030d 	sth	r2,12(r16)
 40099f4:	0027883a 	mov	r19,zero
 40099f8:	900b883a 	mov	r5,r18
 40099fc:	8809883a 	mov	r4,r17
 4009a00:	4007b440 	call	4007b44 <_malloc_r>
 4009a04:	10002c26 	beq	r2,zero,4009ab8 <__smakebuf_r+0x17c>
 4009a08:	80c0030b 	ldhu	r3,12(r16)
 4009a0c:	01010034 	movhi	r4,1024
 4009a10:	211c5a04 	addi	r4,r4,29032
 4009a14:	89000f15 	stw	r4,60(r17)
 4009a18:	18c02014 	ori	r3,r3,128
 4009a1c:	80c0030d 	sth	r3,12(r16)
 4009a20:	80800015 	stw	r2,0(r16)
 4009a24:	80800415 	stw	r2,16(r16)
 4009a28:	84800515 	stw	r18,20(r16)
 4009a2c:	98001a1e 	bne	r19,zero,4009a98 <__smakebuf_r+0x15c>
 4009a30:	dfc01317 	ldw	ra,76(sp)
 4009a34:	dcc01217 	ldw	r19,72(sp)
 4009a38:	dc801117 	ldw	r18,68(sp)
 4009a3c:	dc401017 	ldw	r17,64(sp)
 4009a40:	dc000f17 	ldw	r16,60(sp)
 4009a44:	dec01404 	addi	sp,sp,80
 4009a48:	f800283a 	ret
 4009a4c:	288010c4 	addi	r2,r5,67
 4009a50:	28800015 	stw	r2,0(r5)
 4009a54:	28800415 	stw	r2,16(r5)
 4009a58:	00800044 	movi	r2,1
 4009a5c:	28800515 	stw	r2,20(r5)
 4009a60:	f800283a 	ret
 4009a64:	04801004 	movi	r18,64
 4009a68:	003fe006 	br	40099ec <__ram_exceptions_end+0xfbfe97a4>
 4009a6c:	81000a17 	ldw	r4,40(r16)
 4009a70:	00c10074 	movhi	r3,1025
 4009a74:	18e3a404 	addi	r3,r3,-29040
 4009a78:	20ffc51e 	bne	r4,r3,4009990 <__ram_exceptions_end+0xfbfe9748>
 4009a7c:	8080030b 	ldhu	r2,12(r16)
 4009a80:	04810004 	movi	r18,1024
 4009a84:	84801315 	stw	r18,76(r16)
 4009a88:	1484b03a 	or	r2,r2,r18
 4009a8c:	8080030d 	sth	r2,12(r16)
 4009a90:	0027883a 	mov	r19,zero
 4009a94:	003fd806 	br	40099f8 <__ram_exceptions_end+0xfbfe97b0>
 4009a98:	8140038f 	ldh	r5,14(r16)
 4009a9c:	8809883a 	mov	r4,r17
 4009aa0:	4009bb40 	call	4009bb4 <_isatty_r>
 4009aa4:	103fe226 	beq	r2,zero,4009a30 <__ram_exceptions_end+0xfbfe97e8>
 4009aa8:	8080030b 	ldhu	r2,12(r16)
 4009aac:	10800054 	ori	r2,r2,1
 4009ab0:	8080030d 	sth	r2,12(r16)
 4009ab4:	003fde06 	br	4009a30 <__ram_exceptions_end+0xfbfe97e8>
 4009ab8:	8080030b 	ldhu	r2,12(r16)
 4009abc:	10c0800c 	andi	r3,r2,512
 4009ac0:	183fdb1e 	bne	r3,zero,4009a30 <__ram_exceptions_end+0xfbfe97e8>
 4009ac4:	10800094 	ori	r2,r2,2
 4009ac8:	80c010c4 	addi	r3,r16,67
 4009acc:	8080030d 	sth	r2,12(r16)
 4009ad0:	00800044 	movi	r2,1
 4009ad4:	80c00015 	stw	r3,0(r16)
 4009ad8:	80c00415 	stw	r3,16(r16)
 4009adc:	80800515 	stw	r2,20(r16)
 4009ae0:	003fd306 	br	4009a30 <__ram_exceptions_end+0xfbfe97e8>
 4009ae4:	04810004 	movi	r18,1024
 4009ae8:	003fc306 	br	40099f8 <__ram_exceptions_end+0xfbfe97b0>
 4009aec:	0027883a 	mov	r19,zero
 4009af0:	04810004 	movi	r18,1024
 4009af4:	003fc006 	br	40099f8 <__ram_exceptions_end+0xfbfe97b0>

04009af8 <_read_r>:
 4009af8:	defffd04 	addi	sp,sp,-12
 4009afc:	2805883a 	mov	r2,r5
 4009b00:	dc000015 	stw	r16,0(sp)
 4009b04:	04010074 	movhi	r16,1025
 4009b08:	dc400115 	stw	r17,4(sp)
 4009b0c:	300b883a 	mov	r5,r6
 4009b10:	84068204 	addi	r16,r16,6664
 4009b14:	2023883a 	mov	r17,r4
 4009b18:	380d883a 	mov	r6,r7
 4009b1c:	1009883a 	mov	r4,r2
 4009b20:	dfc00215 	stw	ra,8(sp)
 4009b24:	80000015 	stw	zero,0(r16)
 4009b28:	400a2080 	call	400a208 <read>
 4009b2c:	00ffffc4 	movi	r3,-1
 4009b30:	10c00526 	beq	r2,r3,4009b48 <_read_r+0x50>
 4009b34:	dfc00217 	ldw	ra,8(sp)
 4009b38:	dc400117 	ldw	r17,4(sp)
 4009b3c:	dc000017 	ldw	r16,0(sp)
 4009b40:	dec00304 	addi	sp,sp,12
 4009b44:	f800283a 	ret
 4009b48:	80c00017 	ldw	r3,0(r16)
 4009b4c:	183ff926 	beq	r3,zero,4009b34 <__ram_exceptions_end+0xfbfe98ec>
 4009b50:	88c00015 	stw	r3,0(r17)
 4009b54:	003ff706 	br	4009b34 <__ram_exceptions_end+0xfbfe98ec>

04009b58 <_fstat_r>:
 4009b58:	defffd04 	addi	sp,sp,-12
 4009b5c:	2805883a 	mov	r2,r5
 4009b60:	dc000015 	stw	r16,0(sp)
 4009b64:	04010074 	movhi	r16,1025
 4009b68:	dc400115 	stw	r17,4(sp)
 4009b6c:	84068204 	addi	r16,r16,6664
 4009b70:	2023883a 	mov	r17,r4
 4009b74:	300b883a 	mov	r5,r6
 4009b78:	1009883a 	mov	r4,r2
 4009b7c:	dfc00215 	stw	ra,8(sp)
 4009b80:	80000015 	stw	zero,0(r16)
 4009b84:	4009d7c0 	call	4009d7c <fstat>
 4009b88:	00ffffc4 	movi	r3,-1
 4009b8c:	10c00526 	beq	r2,r3,4009ba4 <_fstat_r+0x4c>
 4009b90:	dfc00217 	ldw	ra,8(sp)
 4009b94:	dc400117 	ldw	r17,4(sp)
 4009b98:	dc000017 	ldw	r16,0(sp)
 4009b9c:	dec00304 	addi	sp,sp,12
 4009ba0:	f800283a 	ret
 4009ba4:	80c00017 	ldw	r3,0(r16)
 4009ba8:	183ff926 	beq	r3,zero,4009b90 <__ram_exceptions_end+0xfbfe9948>
 4009bac:	88c00015 	stw	r3,0(r17)
 4009bb0:	003ff706 	br	4009b90 <__ram_exceptions_end+0xfbfe9948>

04009bb4 <_isatty_r>:
 4009bb4:	defffd04 	addi	sp,sp,-12
 4009bb8:	dc000015 	stw	r16,0(sp)
 4009bbc:	04010074 	movhi	r16,1025
 4009bc0:	dc400115 	stw	r17,4(sp)
 4009bc4:	84068204 	addi	r16,r16,6664
 4009bc8:	2023883a 	mov	r17,r4
 4009bcc:	2809883a 	mov	r4,r5
 4009bd0:	dfc00215 	stw	ra,8(sp)
 4009bd4:	80000015 	stw	zero,0(r16)
 4009bd8:	4009e680 	call	4009e68 <isatty>
 4009bdc:	00ffffc4 	movi	r3,-1
 4009be0:	10c00526 	beq	r2,r3,4009bf8 <_isatty_r+0x44>
 4009be4:	dfc00217 	ldw	ra,8(sp)
 4009be8:	dc400117 	ldw	r17,4(sp)
 4009bec:	dc000017 	ldw	r16,0(sp)
 4009bf0:	dec00304 	addi	sp,sp,12
 4009bf4:	f800283a 	ret
 4009bf8:	80c00017 	ldw	r3,0(r16)
 4009bfc:	183ff926 	beq	r3,zero,4009be4 <__ram_exceptions_end+0xfbfe999c>
 4009c00:	88c00015 	stw	r3,0(r17)
 4009c04:	003ff706 	br	4009be4 <__ram_exceptions_end+0xfbfe999c>

04009c08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009c08:	defffe04 	addi	sp,sp,-8
 4009c0c:	dfc00115 	stw	ra,4(sp)
 4009c10:	df000015 	stw	fp,0(sp)
 4009c14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009c18:	d0a00a17 	ldw	r2,-32728(gp)
 4009c1c:	10000326 	beq	r2,zero,4009c2c <alt_get_errno+0x24>
 4009c20:	d0a00a17 	ldw	r2,-32728(gp)
 4009c24:	103ee83a 	callr	r2
 4009c28:	00000106 	br	4009c30 <alt_get_errno+0x28>
 4009c2c:	d0a6e404 	addi	r2,gp,-25712
}
 4009c30:	e037883a 	mov	sp,fp
 4009c34:	dfc00117 	ldw	ra,4(sp)
 4009c38:	df000017 	ldw	fp,0(sp)
 4009c3c:	dec00204 	addi	sp,sp,8
 4009c40:	f800283a 	ret

04009c44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4009c44:	defffb04 	addi	sp,sp,-20
 4009c48:	dfc00415 	stw	ra,16(sp)
 4009c4c:	df000315 	stw	fp,12(sp)
 4009c50:	df000304 	addi	fp,sp,12
 4009c54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4009c58:	e0bfff17 	ldw	r2,-4(fp)
 4009c5c:	10000616 	blt	r2,zero,4009c78 <close+0x34>
 4009c60:	e0bfff17 	ldw	r2,-4(fp)
 4009c64:	10c00324 	muli	r3,r2,12
 4009c68:	00810074 	movhi	r2,1025
 4009c6c:	10baf804 	addi	r2,r2,-5152
 4009c70:	1885883a 	add	r2,r3,r2
 4009c74:	00000106 	br	4009c7c <close+0x38>
 4009c78:	0005883a 	mov	r2,zero
 4009c7c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4009c80:	e0bffd17 	ldw	r2,-12(fp)
 4009c84:	10001926 	beq	r2,zero,4009cec <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4009c88:	e0bffd17 	ldw	r2,-12(fp)
 4009c8c:	10800017 	ldw	r2,0(r2)
 4009c90:	10800417 	ldw	r2,16(r2)
 4009c94:	10000626 	beq	r2,zero,4009cb0 <close+0x6c>
 4009c98:	e0bffd17 	ldw	r2,-12(fp)
 4009c9c:	10800017 	ldw	r2,0(r2)
 4009ca0:	10800417 	ldw	r2,16(r2)
 4009ca4:	e13ffd17 	ldw	r4,-12(fp)
 4009ca8:	103ee83a 	callr	r2
 4009cac:	00000106 	br	4009cb4 <close+0x70>
 4009cb0:	0005883a 	mov	r2,zero
 4009cb4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4009cb8:	e13fff17 	ldw	r4,-4(fp)
 4009cbc:	400a3040 	call	400a304 <alt_release_fd>
    if (rval < 0)
 4009cc0:	e0bffe17 	ldw	r2,-8(fp)
 4009cc4:	1000070e 	bge	r2,zero,4009ce4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4009cc8:	4009c080 	call	4009c08 <alt_get_errno>
 4009ccc:	1007883a 	mov	r3,r2
 4009cd0:	e0bffe17 	ldw	r2,-8(fp)
 4009cd4:	0085c83a 	sub	r2,zero,r2
 4009cd8:	18800015 	stw	r2,0(r3)
      return -1;
 4009cdc:	00bfffc4 	movi	r2,-1
 4009ce0:	00000706 	br	4009d00 <close+0xbc>
    }
    return 0;
 4009ce4:	0005883a 	mov	r2,zero
 4009ce8:	00000506 	br	4009d00 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009cec:	4009c080 	call	4009c08 <alt_get_errno>
 4009cf0:	1007883a 	mov	r3,r2
 4009cf4:	00801444 	movi	r2,81
 4009cf8:	18800015 	stw	r2,0(r3)
    return -1;
 4009cfc:	00bfffc4 	movi	r2,-1
  }
}
 4009d00:	e037883a 	mov	sp,fp
 4009d04:	dfc00117 	ldw	ra,4(sp)
 4009d08:	df000017 	ldw	fp,0(sp)
 4009d0c:	dec00204 	addi	sp,sp,8
 4009d10:	f800283a 	ret

04009d14 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4009d14:	defffc04 	addi	sp,sp,-16
 4009d18:	df000315 	stw	fp,12(sp)
 4009d1c:	df000304 	addi	fp,sp,12
 4009d20:	e13ffd15 	stw	r4,-12(fp)
 4009d24:	e17ffe15 	stw	r5,-8(fp)
 4009d28:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4009d2c:	e0bfff17 	ldw	r2,-4(fp)
}
 4009d30:	e037883a 	mov	sp,fp
 4009d34:	df000017 	ldw	fp,0(sp)
 4009d38:	dec00104 	addi	sp,sp,4
 4009d3c:	f800283a 	ret

04009d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009d40:	defffe04 	addi	sp,sp,-8
 4009d44:	dfc00115 	stw	ra,4(sp)
 4009d48:	df000015 	stw	fp,0(sp)
 4009d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009d50:	d0a00a17 	ldw	r2,-32728(gp)
 4009d54:	10000326 	beq	r2,zero,4009d64 <alt_get_errno+0x24>
 4009d58:	d0a00a17 	ldw	r2,-32728(gp)
 4009d5c:	103ee83a 	callr	r2
 4009d60:	00000106 	br	4009d68 <alt_get_errno+0x28>
 4009d64:	d0a6e404 	addi	r2,gp,-25712
}
 4009d68:	e037883a 	mov	sp,fp
 4009d6c:	dfc00117 	ldw	ra,4(sp)
 4009d70:	df000017 	ldw	fp,0(sp)
 4009d74:	dec00204 	addi	sp,sp,8
 4009d78:	f800283a 	ret

04009d7c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4009d7c:	defffb04 	addi	sp,sp,-20
 4009d80:	dfc00415 	stw	ra,16(sp)
 4009d84:	df000315 	stw	fp,12(sp)
 4009d88:	df000304 	addi	fp,sp,12
 4009d8c:	e13ffe15 	stw	r4,-8(fp)
 4009d90:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4009d94:	e0bffe17 	ldw	r2,-8(fp)
 4009d98:	10000616 	blt	r2,zero,4009db4 <fstat+0x38>
 4009d9c:	e0bffe17 	ldw	r2,-8(fp)
 4009da0:	10c00324 	muli	r3,r2,12
 4009da4:	00810074 	movhi	r2,1025
 4009da8:	10baf804 	addi	r2,r2,-5152
 4009dac:	1885883a 	add	r2,r3,r2
 4009db0:	00000106 	br	4009db8 <fstat+0x3c>
 4009db4:	0005883a 	mov	r2,zero
 4009db8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4009dbc:	e0bffd17 	ldw	r2,-12(fp)
 4009dc0:	10001026 	beq	r2,zero,4009e04 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4009dc4:	e0bffd17 	ldw	r2,-12(fp)
 4009dc8:	10800017 	ldw	r2,0(r2)
 4009dcc:	10800817 	ldw	r2,32(r2)
 4009dd0:	10000726 	beq	r2,zero,4009df0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4009dd4:	e0bffd17 	ldw	r2,-12(fp)
 4009dd8:	10800017 	ldw	r2,0(r2)
 4009ddc:	10800817 	ldw	r2,32(r2)
 4009de0:	e17fff17 	ldw	r5,-4(fp)
 4009de4:	e13ffd17 	ldw	r4,-12(fp)
 4009de8:	103ee83a 	callr	r2
 4009dec:	00000a06 	br	4009e18 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4009df0:	e0bfff17 	ldw	r2,-4(fp)
 4009df4:	00c80004 	movi	r3,8192
 4009df8:	10c00115 	stw	r3,4(r2)
      return 0;
 4009dfc:	0005883a 	mov	r2,zero
 4009e00:	00000506 	br	4009e18 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009e04:	4009d400 	call	4009d40 <alt_get_errno>
 4009e08:	1007883a 	mov	r3,r2
 4009e0c:	00801444 	movi	r2,81
 4009e10:	18800015 	stw	r2,0(r3)
    return -1;
 4009e14:	00bfffc4 	movi	r2,-1
  }
}
 4009e18:	e037883a 	mov	sp,fp
 4009e1c:	dfc00117 	ldw	ra,4(sp)
 4009e20:	df000017 	ldw	fp,0(sp)
 4009e24:	dec00204 	addi	sp,sp,8
 4009e28:	f800283a 	ret

04009e2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009e2c:	defffe04 	addi	sp,sp,-8
 4009e30:	dfc00115 	stw	ra,4(sp)
 4009e34:	df000015 	stw	fp,0(sp)
 4009e38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009e3c:	d0a00a17 	ldw	r2,-32728(gp)
 4009e40:	10000326 	beq	r2,zero,4009e50 <alt_get_errno+0x24>
 4009e44:	d0a00a17 	ldw	r2,-32728(gp)
 4009e48:	103ee83a 	callr	r2
 4009e4c:	00000106 	br	4009e54 <alt_get_errno+0x28>
 4009e50:	d0a6e404 	addi	r2,gp,-25712
}
 4009e54:	e037883a 	mov	sp,fp
 4009e58:	dfc00117 	ldw	ra,4(sp)
 4009e5c:	df000017 	ldw	fp,0(sp)
 4009e60:	dec00204 	addi	sp,sp,8
 4009e64:	f800283a 	ret

04009e68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4009e68:	deffed04 	addi	sp,sp,-76
 4009e6c:	dfc01215 	stw	ra,72(sp)
 4009e70:	df001115 	stw	fp,68(sp)
 4009e74:	df001104 	addi	fp,sp,68
 4009e78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4009e7c:	e0bfff17 	ldw	r2,-4(fp)
 4009e80:	10000616 	blt	r2,zero,4009e9c <isatty+0x34>
 4009e84:	e0bfff17 	ldw	r2,-4(fp)
 4009e88:	10c00324 	muli	r3,r2,12
 4009e8c:	00810074 	movhi	r2,1025
 4009e90:	10baf804 	addi	r2,r2,-5152
 4009e94:	1885883a 	add	r2,r3,r2
 4009e98:	00000106 	br	4009ea0 <isatty+0x38>
 4009e9c:	0005883a 	mov	r2,zero
 4009ea0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4009ea4:	e0bfef17 	ldw	r2,-68(fp)
 4009ea8:	10000e26 	beq	r2,zero,4009ee4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4009eac:	e0bfef17 	ldw	r2,-68(fp)
 4009eb0:	10800017 	ldw	r2,0(r2)
 4009eb4:	10800817 	ldw	r2,32(r2)
 4009eb8:	1000021e 	bne	r2,zero,4009ec4 <isatty+0x5c>
    {
      return 1;
 4009ebc:	00800044 	movi	r2,1
 4009ec0:	00000d06 	br	4009ef8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4009ec4:	e0bff004 	addi	r2,fp,-64
 4009ec8:	100b883a 	mov	r5,r2
 4009ecc:	e13fff17 	ldw	r4,-4(fp)
 4009ed0:	4009d7c0 	call	4009d7c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4009ed4:	e0bff117 	ldw	r2,-60(fp)
 4009ed8:	10880020 	cmpeqi	r2,r2,8192
 4009edc:	10803fcc 	andi	r2,r2,255
 4009ee0:	00000506 	br	4009ef8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009ee4:	4009e2c0 	call	4009e2c <alt_get_errno>
 4009ee8:	1007883a 	mov	r3,r2
 4009eec:	00801444 	movi	r2,81
 4009ef0:	18800015 	stw	r2,0(r3)
    return 0;
 4009ef4:	0005883a 	mov	r2,zero
  }
}
 4009ef8:	e037883a 	mov	sp,fp
 4009efc:	dfc00117 	ldw	ra,4(sp)
 4009f00:	df000017 	ldw	fp,0(sp)
 4009f04:	dec00204 	addi	sp,sp,8
 4009f08:	f800283a 	ret

04009f0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4009f0c:	defffc04 	addi	sp,sp,-16
 4009f10:	df000315 	stw	fp,12(sp)
 4009f14:	df000304 	addi	fp,sp,12
 4009f18:	e13ffd15 	stw	r4,-12(fp)
 4009f1c:	e17ffe15 	stw	r5,-8(fp)
 4009f20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4009f24:	e0fffe17 	ldw	r3,-8(fp)
 4009f28:	e0bffd17 	ldw	r2,-12(fp)
 4009f2c:	18800c26 	beq	r3,r2,4009f60 <alt_load_section+0x54>
  {
    while( to != end )
 4009f30:	00000806 	br	4009f54 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4009f34:	e0bffe17 	ldw	r2,-8(fp)
 4009f38:	10c00104 	addi	r3,r2,4
 4009f3c:	e0fffe15 	stw	r3,-8(fp)
 4009f40:	e0fffd17 	ldw	r3,-12(fp)
 4009f44:	19000104 	addi	r4,r3,4
 4009f48:	e13ffd15 	stw	r4,-12(fp)
 4009f4c:	18c00017 	ldw	r3,0(r3)
 4009f50:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4009f54:	e0fffe17 	ldw	r3,-8(fp)
 4009f58:	e0bfff17 	ldw	r2,-4(fp)
 4009f5c:	18bff51e 	bne	r3,r2,4009f34 <__ram_exceptions_end+0xfbfe9cec>
    {
      *to++ = *from++;
    }
  }
}
 4009f60:	0001883a 	nop
 4009f64:	e037883a 	mov	sp,fp
 4009f68:	df000017 	ldw	fp,0(sp)
 4009f6c:	dec00104 	addi	sp,sp,4
 4009f70:	f800283a 	ret

04009f74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4009f74:	defffe04 	addi	sp,sp,-8
 4009f78:	dfc00115 	stw	ra,4(sp)
 4009f7c:	df000015 	stw	fp,0(sp)
 4009f80:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4009f84:	01810074 	movhi	r6,1025
 4009f88:	31bfb104 	addi	r6,r6,-316
 4009f8c:	01410074 	movhi	r5,1025
 4009f90:	2978e304 	addi	r5,r5,-7284
 4009f94:	01010074 	movhi	r4,1025
 4009f98:	213fb104 	addi	r4,r4,-316
 4009f9c:	4009f0c0 	call	4009f0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4009fa0:	018200b4 	movhi	r6,2050
 4009fa4:	31809204 	addi	r6,r6,584
 4009fa8:	014200b4 	movhi	r5,2050
 4009fac:	29400804 	addi	r5,r5,32
 4009fb0:	01010034 	movhi	r4,1024
 4009fb4:	21000004 	addi	r4,r4,0
 4009fb8:	4009f0c0 	call	4009f0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4009fbc:	01810074 	movhi	r6,1025
 4009fc0:	31b8e304 	addi	r6,r6,-7284
 4009fc4:	01410074 	movhi	r5,1025
 4009fc8:	2977a404 	addi	r5,r5,-8560
 4009fcc:	01010074 	movhi	r4,1025
 4009fd0:	2137a404 	addi	r4,r4,-8560
 4009fd4:	4009f0c0 	call	4009f0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4009fd8:	400ce9c0 	call	400ce9c <alt_dcache_flush_all>
  alt_icache_flush_all();
 4009fdc:	400d1140 	call	400d114 <alt_icache_flush_all>
}
 4009fe0:	0001883a 	nop
 4009fe4:	e037883a 	mov	sp,fp
 4009fe8:	dfc00117 	ldw	ra,4(sp)
 4009fec:	df000017 	ldw	fp,0(sp)
 4009ff0:	dec00204 	addi	sp,sp,8
 4009ff4:	f800283a 	ret

04009ff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009ff8:	defffe04 	addi	sp,sp,-8
 4009ffc:	dfc00115 	stw	ra,4(sp)
 400a000:	df000015 	stw	fp,0(sp)
 400a004:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a008:	d0a00a17 	ldw	r2,-32728(gp)
 400a00c:	10000326 	beq	r2,zero,400a01c <alt_get_errno+0x24>
 400a010:	d0a00a17 	ldw	r2,-32728(gp)
 400a014:	103ee83a 	callr	r2
 400a018:	00000106 	br	400a020 <alt_get_errno+0x28>
 400a01c:	d0a6e404 	addi	r2,gp,-25712
}
 400a020:	e037883a 	mov	sp,fp
 400a024:	dfc00117 	ldw	ra,4(sp)
 400a028:	df000017 	ldw	fp,0(sp)
 400a02c:	dec00204 	addi	sp,sp,8
 400a030:	f800283a 	ret

0400a034 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400a034:	defff904 	addi	sp,sp,-28
 400a038:	dfc00615 	stw	ra,24(sp)
 400a03c:	df000515 	stw	fp,20(sp)
 400a040:	df000504 	addi	fp,sp,20
 400a044:	e13ffd15 	stw	r4,-12(fp)
 400a048:	e17ffe15 	stw	r5,-8(fp)
 400a04c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400a050:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a054:	e0bffd17 	ldw	r2,-12(fp)
 400a058:	10000616 	blt	r2,zero,400a074 <lseek+0x40>
 400a05c:	e0bffd17 	ldw	r2,-12(fp)
 400a060:	10c00324 	muli	r3,r2,12
 400a064:	00810074 	movhi	r2,1025
 400a068:	10baf804 	addi	r2,r2,-5152
 400a06c:	1885883a 	add	r2,r3,r2
 400a070:	00000106 	br	400a078 <lseek+0x44>
 400a074:	0005883a 	mov	r2,zero
 400a078:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400a07c:	e0bffc17 	ldw	r2,-16(fp)
 400a080:	10001026 	beq	r2,zero,400a0c4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400a084:	e0bffc17 	ldw	r2,-16(fp)
 400a088:	10800017 	ldw	r2,0(r2)
 400a08c:	10800717 	ldw	r2,28(r2)
 400a090:	10000926 	beq	r2,zero,400a0b8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400a094:	e0bffc17 	ldw	r2,-16(fp)
 400a098:	10800017 	ldw	r2,0(r2)
 400a09c:	10800717 	ldw	r2,28(r2)
 400a0a0:	e1bfff17 	ldw	r6,-4(fp)
 400a0a4:	e17ffe17 	ldw	r5,-8(fp)
 400a0a8:	e13ffc17 	ldw	r4,-16(fp)
 400a0ac:	103ee83a 	callr	r2
 400a0b0:	e0bffb15 	stw	r2,-20(fp)
 400a0b4:	00000506 	br	400a0cc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400a0b8:	00bfde84 	movi	r2,-134
 400a0bc:	e0bffb15 	stw	r2,-20(fp)
 400a0c0:	00000206 	br	400a0cc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400a0c4:	00bfebc4 	movi	r2,-81
 400a0c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400a0cc:	e0bffb17 	ldw	r2,-20(fp)
 400a0d0:	1000070e 	bge	r2,zero,400a0f0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400a0d4:	4009ff80 	call	4009ff8 <alt_get_errno>
 400a0d8:	1007883a 	mov	r3,r2
 400a0dc:	e0bffb17 	ldw	r2,-20(fp)
 400a0e0:	0085c83a 	sub	r2,zero,r2
 400a0e4:	18800015 	stw	r2,0(r3)
    rc = -1;
 400a0e8:	00bfffc4 	movi	r2,-1
 400a0ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400a0f0:	e0bffb17 	ldw	r2,-20(fp)
}
 400a0f4:	e037883a 	mov	sp,fp
 400a0f8:	dfc00117 	ldw	ra,4(sp)
 400a0fc:	df000017 	ldw	fp,0(sp)
 400a100:	dec00204 	addi	sp,sp,8
 400a104:	f800283a 	ret

0400a108 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400a108:	defffd04 	addi	sp,sp,-12
 400a10c:	dfc00215 	stw	ra,8(sp)
 400a110:	df000115 	stw	fp,4(sp)
 400a114:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400a118:	0009883a 	mov	r4,zero
 400a11c:	400a6540 	call	400a654 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400a120:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400a124:	400a68c0 	call	400a68c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400a128:	01810074 	movhi	r6,1025
 400a12c:	31b8c204 	addi	r6,r6,-7416
 400a130:	01410074 	movhi	r5,1025
 400a134:	2978c204 	addi	r5,r5,-7416
 400a138:	01010074 	movhi	r4,1025
 400a13c:	2138c204 	addi	r4,r4,-7416
 400a140:	400d20c0 	call	400d20c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400a144:	400cfc40 	call	400cfc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400a148:	01010074 	movhi	r4,1025
 400a14c:	21340904 	addi	r4,r4,-12252
 400a150:	400dafc0 	call	400dafc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400a154:	d0a6e517 	ldw	r2,-25708(gp)
 400a158:	d0e6e617 	ldw	r3,-25704(gp)
 400a15c:	d126e717 	ldw	r4,-25700(gp)
 400a160:	200d883a 	mov	r6,r4
 400a164:	180b883a 	mov	r5,r3
 400a168:	1009883a 	mov	r4,r2
 400a16c:	40002740 	call	4000274 <main>
 400a170:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400a174:	01000044 	movi	r4,1
 400a178:	4009c440 	call	4009c44 <close>
  exit (result);
 400a17c:	e13fff17 	ldw	r4,-4(fp)
 400a180:	400db100 	call	400db10 <exit>

0400a184 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400a184:	defffe04 	addi	sp,sp,-8
 400a188:	df000115 	stw	fp,4(sp)
 400a18c:	df000104 	addi	fp,sp,4
 400a190:	e13fff15 	stw	r4,-4(fp)
}
 400a194:	0001883a 	nop
 400a198:	e037883a 	mov	sp,fp
 400a19c:	df000017 	ldw	fp,0(sp)
 400a1a0:	dec00104 	addi	sp,sp,4
 400a1a4:	f800283a 	ret

0400a1a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400a1a8:	defffe04 	addi	sp,sp,-8
 400a1ac:	df000115 	stw	fp,4(sp)
 400a1b0:	df000104 	addi	fp,sp,4
 400a1b4:	e13fff15 	stw	r4,-4(fp)
}
 400a1b8:	0001883a 	nop
 400a1bc:	e037883a 	mov	sp,fp
 400a1c0:	df000017 	ldw	fp,0(sp)
 400a1c4:	dec00104 	addi	sp,sp,4
 400a1c8:	f800283a 	ret

0400a1cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a1cc:	defffe04 	addi	sp,sp,-8
 400a1d0:	dfc00115 	stw	ra,4(sp)
 400a1d4:	df000015 	stw	fp,0(sp)
 400a1d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a1dc:	d0a00a17 	ldw	r2,-32728(gp)
 400a1e0:	10000326 	beq	r2,zero,400a1f0 <alt_get_errno+0x24>
 400a1e4:	d0a00a17 	ldw	r2,-32728(gp)
 400a1e8:	103ee83a 	callr	r2
 400a1ec:	00000106 	br	400a1f4 <alt_get_errno+0x28>
 400a1f0:	d0a6e404 	addi	r2,gp,-25712
}
 400a1f4:	e037883a 	mov	sp,fp
 400a1f8:	dfc00117 	ldw	ra,4(sp)
 400a1fc:	df000017 	ldw	fp,0(sp)
 400a200:	dec00204 	addi	sp,sp,8
 400a204:	f800283a 	ret

0400a208 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400a208:	defff904 	addi	sp,sp,-28
 400a20c:	dfc00615 	stw	ra,24(sp)
 400a210:	df000515 	stw	fp,20(sp)
 400a214:	df000504 	addi	fp,sp,20
 400a218:	e13ffd15 	stw	r4,-12(fp)
 400a21c:	e17ffe15 	stw	r5,-8(fp)
 400a220:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a224:	e0bffd17 	ldw	r2,-12(fp)
 400a228:	10000616 	blt	r2,zero,400a244 <read+0x3c>
 400a22c:	e0bffd17 	ldw	r2,-12(fp)
 400a230:	10c00324 	muli	r3,r2,12
 400a234:	00810074 	movhi	r2,1025
 400a238:	10baf804 	addi	r2,r2,-5152
 400a23c:	1885883a 	add	r2,r3,r2
 400a240:	00000106 	br	400a248 <read+0x40>
 400a244:	0005883a 	mov	r2,zero
 400a248:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400a24c:	e0bffb17 	ldw	r2,-20(fp)
 400a250:	10002226 	beq	r2,zero,400a2dc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a254:	e0bffb17 	ldw	r2,-20(fp)
 400a258:	10800217 	ldw	r2,8(r2)
 400a25c:	108000cc 	andi	r2,r2,3
 400a260:	10800060 	cmpeqi	r2,r2,1
 400a264:	1000181e 	bne	r2,zero,400a2c8 <read+0xc0>
        (fd->dev->read))
 400a268:	e0bffb17 	ldw	r2,-20(fp)
 400a26c:	10800017 	ldw	r2,0(r2)
 400a270:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a274:	10001426 	beq	r2,zero,400a2c8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400a278:	e0bffb17 	ldw	r2,-20(fp)
 400a27c:	10800017 	ldw	r2,0(r2)
 400a280:	10800517 	ldw	r2,20(r2)
 400a284:	e0ffff17 	ldw	r3,-4(fp)
 400a288:	180d883a 	mov	r6,r3
 400a28c:	e17ffe17 	ldw	r5,-8(fp)
 400a290:	e13ffb17 	ldw	r4,-20(fp)
 400a294:	103ee83a 	callr	r2
 400a298:	e0bffc15 	stw	r2,-16(fp)
 400a29c:	e0bffc17 	ldw	r2,-16(fp)
 400a2a0:	1000070e 	bge	r2,zero,400a2c0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400a2a4:	400a1cc0 	call	400a1cc <alt_get_errno>
 400a2a8:	1007883a 	mov	r3,r2
 400a2ac:	e0bffc17 	ldw	r2,-16(fp)
 400a2b0:	0085c83a 	sub	r2,zero,r2
 400a2b4:	18800015 	stw	r2,0(r3)
          return -1;
 400a2b8:	00bfffc4 	movi	r2,-1
 400a2bc:	00000c06 	br	400a2f0 <read+0xe8>
        }
        return rval;
 400a2c0:	e0bffc17 	ldw	r2,-16(fp)
 400a2c4:	00000a06 	br	400a2f0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400a2c8:	400a1cc0 	call	400a1cc <alt_get_errno>
 400a2cc:	1007883a 	mov	r3,r2
 400a2d0:	00800344 	movi	r2,13
 400a2d4:	18800015 	stw	r2,0(r3)
 400a2d8:	00000406 	br	400a2ec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400a2dc:	400a1cc0 	call	400a1cc <alt_get_errno>
 400a2e0:	1007883a 	mov	r3,r2
 400a2e4:	00801444 	movi	r2,81
 400a2e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400a2ec:	00bfffc4 	movi	r2,-1
}
 400a2f0:	e037883a 	mov	sp,fp
 400a2f4:	dfc00117 	ldw	ra,4(sp)
 400a2f8:	df000017 	ldw	fp,0(sp)
 400a2fc:	dec00204 	addi	sp,sp,8
 400a300:	f800283a 	ret

0400a304 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400a304:	defffe04 	addi	sp,sp,-8
 400a308:	df000115 	stw	fp,4(sp)
 400a30c:	df000104 	addi	fp,sp,4
 400a310:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400a314:	e0bfff17 	ldw	r2,-4(fp)
 400a318:	108000d0 	cmplti	r2,r2,3
 400a31c:	10000d1e 	bne	r2,zero,400a354 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400a320:	00810074 	movhi	r2,1025
 400a324:	10baf804 	addi	r2,r2,-5152
 400a328:	e0ffff17 	ldw	r3,-4(fp)
 400a32c:	18c00324 	muli	r3,r3,12
 400a330:	10c5883a 	add	r2,r2,r3
 400a334:	10800204 	addi	r2,r2,8
 400a338:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400a33c:	00810074 	movhi	r2,1025
 400a340:	10baf804 	addi	r2,r2,-5152
 400a344:	e0ffff17 	ldw	r3,-4(fp)
 400a348:	18c00324 	muli	r3,r3,12
 400a34c:	10c5883a 	add	r2,r2,r3
 400a350:	10000015 	stw	zero,0(r2)
  }
}
 400a354:	0001883a 	nop
 400a358:	e037883a 	mov	sp,fp
 400a35c:	df000017 	ldw	fp,0(sp)
 400a360:	dec00104 	addi	sp,sp,4
 400a364:	f800283a 	ret

0400a368 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400a368:	defff904 	addi	sp,sp,-28
 400a36c:	df000615 	stw	fp,24(sp)
 400a370:	df000604 	addi	fp,sp,24
 400a374:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a378:	0005303a 	rdctl	r2,status
 400a37c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a380:	e0fffe17 	ldw	r3,-8(fp)
 400a384:	00bfff84 	movi	r2,-2
 400a388:	1884703a 	and	r2,r3,r2
 400a38c:	1001703a 	wrctl	status,r2
  
  return context;
 400a390:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400a394:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400a398:	d0a00b17 	ldw	r2,-32724(gp)
 400a39c:	10c000c4 	addi	r3,r2,3
 400a3a0:	00bfff04 	movi	r2,-4
 400a3a4:	1884703a 	and	r2,r3,r2
 400a3a8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400a3ac:	d0e00b17 	ldw	r3,-32724(gp)
 400a3b0:	e0bfff17 	ldw	r2,-4(fp)
 400a3b4:	1887883a 	add	r3,r3,r2
 400a3b8:	00820034 	movhi	r2,2048
 400a3bc:	10800004 	addi	r2,r2,0
 400a3c0:	10c0062e 	bgeu	r2,r3,400a3dc <sbrk+0x74>
 400a3c4:	e0bffb17 	ldw	r2,-20(fp)
 400a3c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a3cc:	e0bffa17 	ldw	r2,-24(fp)
 400a3d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400a3d4:	00bfffc4 	movi	r2,-1
 400a3d8:	00000b06 	br	400a408 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400a3dc:	d0a00b17 	ldw	r2,-32724(gp)
 400a3e0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400a3e4:	d0e00b17 	ldw	r3,-32724(gp)
 400a3e8:	e0bfff17 	ldw	r2,-4(fp)
 400a3ec:	1885883a 	add	r2,r3,r2
 400a3f0:	d0a00b15 	stw	r2,-32724(gp)
 400a3f4:	e0bffb17 	ldw	r2,-20(fp)
 400a3f8:	e0bffc15 	stw	r2,-16(fp)
 400a3fc:	e0bffc17 	ldw	r2,-16(fp)
 400a400:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400a404:	e0bffd17 	ldw	r2,-12(fp)
} 
 400a408:	e037883a 	mov	sp,fp
 400a40c:	df000017 	ldw	fp,0(sp)
 400a410:	dec00104 	addi	sp,sp,4
 400a414:	f800283a 	ret

0400a418 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400a418:	defffd04 	addi	sp,sp,-12
 400a41c:	dfc00215 	stw	ra,8(sp)
 400a420:	df000115 	stw	fp,4(sp)
 400a424:	df000104 	addi	fp,sp,4
 400a428:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400a42c:	e13fff17 	ldw	r4,-4(fp)
 400a430:	400cd440 	call	400cd44 <alt_busy_sleep>
}
 400a434:	e037883a 	mov	sp,fp
 400a438:	dfc00117 	ldw	ra,4(sp)
 400a43c:	df000017 	ldw	fp,0(sp)
 400a440:	dec00204 	addi	sp,sp,8
 400a444:	f800283a 	ret

0400a448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a448:	defffe04 	addi	sp,sp,-8
 400a44c:	dfc00115 	stw	ra,4(sp)
 400a450:	df000015 	stw	fp,0(sp)
 400a454:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a458:	d0a00a17 	ldw	r2,-32728(gp)
 400a45c:	10000326 	beq	r2,zero,400a46c <alt_get_errno+0x24>
 400a460:	d0a00a17 	ldw	r2,-32728(gp)
 400a464:	103ee83a 	callr	r2
 400a468:	00000106 	br	400a470 <alt_get_errno+0x28>
 400a46c:	d0a6e404 	addi	r2,gp,-25712
}
 400a470:	e037883a 	mov	sp,fp
 400a474:	dfc00117 	ldw	ra,4(sp)
 400a478:	df000017 	ldw	fp,0(sp)
 400a47c:	dec00204 	addi	sp,sp,8
 400a480:	f800283a 	ret

0400a484 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400a484:	defff904 	addi	sp,sp,-28
 400a488:	dfc00615 	stw	ra,24(sp)
 400a48c:	df000515 	stw	fp,20(sp)
 400a490:	df000504 	addi	fp,sp,20
 400a494:	e13ffd15 	stw	r4,-12(fp)
 400a498:	e17ffe15 	stw	r5,-8(fp)
 400a49c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a4a0:	e0bffd17 	ldw	r2,-12(fp)
 400a4a4:	10000616 	blt	r2,zero,400a4c0 <write+0x3c>
 400a4a8:	e0bffd17 	ldw	r2,-12(fp)
 400a4ac:	10c00324 	muli	r3,r2,12
 400a4b0:	00810074 	movhi	r2,1025
 400a4b4:	10baf804 	addi	r2,r2,-5152
 400a4b8:	1885883a 	add	r2,r3,r2
 400a4bc:	00000106 	br	400a4c4 <write+0x40>
 400a4c0:	0005883a 	mov	r2,zero
 400a4c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400a4c8:	e0bffb17 	ldw	r2,-20(fp)
 400a4cc:	10002126 	beq	r2,zero,400a554 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400a4d0:	e0bffb17 	ldw	r2,-20(fp)
 400a4d4:	10800217 	ldw	r2,8(r2)
 400a4d8:	108000cc 	andi	r2,r2,3
 400a4dc:	10001826 	beq	r2,zero,400a540 <write+0xbc>
 400a4e0:	e0bffb17 	ldw	r2,-20(fp)
 400a4e4:	10800017 	ldw	r2,0(r2)
 400a4e8:	10800617 	ldw	r2,24(r2)
 400a4ec:	10001426 	beq	r2,zero,400a540 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400a4f0:	e0bffb17 	ldw	r2,-20(fp)
 400a4f4:	10800017 	ldw	r2,0(r2)
 400a4f8:	10800617 	ldw	r2,24(r2)
 400a4fc:	e0ffff17 	ldw	r3,-4(fp)
 400a500:	180d883a 	mov	r6,r3
 400a504:	e17ffe17 	ldw	r5,-8(fp)
 400a508:	e13ffb17 	ldw	r4,-20(fp)
 400a50c:	103ee83a 	callr	r2
 400a510:	e0bffc15 	stw	r2,-16(fp)
 400a514:	e0bffc17 	ldw	r2,-16(fp)
 400a518:	1000070e 	bge	r2,zero,400a538 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400a51c:	400a4480 	call	400a448 <alt_get_errno>
 400a520:	1007883a 	mov	r3,r2
 400a524:	e0bffc17 	ldw	r2,-16(fp)
 400a528:	0085c83a 	sub	r2,zero,r2
 400a52c:	18800015 	stw	r2,0(r3)
        return -1;
 400a530:	00bfffc4 	movi	r2,-1
 400a534:	00000c06 	br	400a568 <write+0xe4>
      }
      return rval;
 400a538:	e0bffc17 	ldw	r2,-16(fp)
 400a53c:	00000a06 	br	400a568 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400a540:	400a4480 	call	400a448 <alt_get_errno>
 400a544:	1007883a 	mov	r3,r2
 400a548:	00800344 	movi	r2,13
 400a54c:	18800015 	stw	r2,0(r3)
 400a550:	00000406 	br	400a564 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400a554:	400a4480 	call	400a448 <alt_get_errno>
 400a558:	1007883a 	mov	r3,r2
 400a55c:	00801444 	movi	r2,81
 400a560:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400a564:	00bfffc4 	movi	r2,-1
}
 400a568:	e037883a 	mov	sp,fp
 400a56c:	dfc00117 	ldw	ra,4(sp)
 400a570:	df000017 	ldw	fp,0(sp)
 400a574:	dec00204 	addi	sp,sp,8
 400a578:	f800283a 	ret

0400a57c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400a57c:	defffd04 	addi	sp,sp,-12
 400a580:	dfc00215 	stw	ra,8(sp)
 400a584:	df000115 	stw	fp,4(sp)
 400a588:	df000104 	addi	fp,sp,4
 400a58c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400a590:	d1600704 	addi	r5,gp,-32740
 400a594:	e13fff17 	ldw	r4,-4(fp)
 400a598:	400cf200 	call	400cf20 <alt_dev_llist_insert>
}
 400a59c:	e037883a 	mov	sp,fp
 400a5a0:	dfc00117 	ldw	ra,4(sp)
 400a5a4:	df000017 	ldw	fp,0(sp)
 400a5a8:	dec00204 	addi	sp,sp,8
 400a5ac:	f800283a 	ret

0400a5b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a5b0:	defffe04 	addi	sp,sp,-8
 400a5b4:	dfc00115 	stw	ra,4(sp)
 400a5b8:	df000015 	stw	fp,0(sp)
 400a5bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a5c0:	d0a00a17 	ldw	r2,-32728(gp)
 400a5c4:	10000326 	beq	r2,zero,400a5d4 <alt_get_errno+0x24>
 400a5c8:	d0a00a17 	ldw	r2,-32728(gp)
 400a5cc:	103ee83a 	callr	r2
 400a5d0:	00000106 	br	400a5d8 <alt_get_errno+0x28>
 400a5d4:	d0a6e404 	addi	r2,gp,-25712
}
 400a5d8:	e037883a 	mov	sp,fp
 400a5dc:	dfc00117 	ldw	ra,4(sp)
 400a5e0:	df000017 	ldw	fp,0(sp)
 400a5e4:	dec00204 	addi	sp,sp,8
 400a5e8:	f800283a 	ret

0400a5ec <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 400a5ec:	defffc04 	addi	sp,sp,-16
 400a5f0:	dfc00315 	stw	ra,12(sp)
 400a5f4:	df000215 	stw	fp,8(sp)
 400a5f8:	df000204 	addi	fp,sp,8
 400a5fc:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 400a600:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 400a604:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 400a608:	e0bffe17 	ldw	r2,-8(fp)
 400a60c:	1000051e 	bne	r2,zero,400a624 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 400a610:	d1600e04 	addi	r5,gp,-32712
 400a614:	e13fff17 	ldw	r4,-4(fp)
 400a618:	400cf200 	call	400cf20 <alt_dev_llist_insert>
 400a61c:	e0bffe15 	stw	r2,-8(fp)
 400a620:	00000606 	br	400a63c <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 400a624:	400a5b00 	call	400a5b0 <alt_get_errno>
 400a628:	1007883a 	mov	r3,r2
 400a62c:	00800304 	movi	r2,12
 400a630:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 400a634:	00bffd04 	movi	r2,-12
 400a638:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 400a63c:	e0bffe17 	ldw	r2,-8(fp)
}
 400a640:	e037883a 	mov	sp,fp
 400a644:	dfc00117 	ldw	ra,4(sp)
 400a648:	df000017 	ldw	fp,0(sp)
 400a64c:	dec00204 	addi	sp,sp,8
 400a650:	f800283a 	ret

0400a654 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400a654:	defffd04 	addi	sp,sp,-12
 400a658:	dfc00215 	stw	ra,8(sp)
 400a65c:	df000115 	stw	fp,4(sp)
 400a660:	df000104 	addi	fp,sp,4
 400a664:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_SOUND_ACQUISITION, nios2_sound_acquisition);
 400a668:	400d8000 	call	400d800 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400a66c:	00800044 	movi	r2,1
 400a670:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400a674:	0001883a 	nop
 400a678:	e037883a 	mov	sp,fp
 400a67c:	dfc00117 	ldw	ra,4(sp)
 400a680:	df000017 	ldw	fp,0(sp)
 400a684:	dec00204 	addi	sp,sp,8
 400a688:	f800283a 	ret

0400a68c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400a68c:	defffe04 	addi	sp,sp,-8
 400a690:	dfc00115 	stw	ra,4(sp)
 400a694:	df000015 	stw	fp,0(sp)
 400a698:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400a69c:	01800044 	movi	r6,1
 400a6a0:	000b883a 	mov	r5,zero
 400a6a4:	01010074 	movhi	r4,1025
 400a6a8:	213b6204 	addi	r4,r4,-4728
 400a6ac:	400a8740 	call	400a874 <altera_avalon_jtag_uart_init>
 400a6b0:	01010074 	movhi	r4,1025
 400a6b4:	213b5804 	addi	r4,r4,-4768
 400a6b8:	400a57c0 	call	400a57c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 400a6bc:	01bfffc4 	movi	r6,-1
 400a6c0:	000b883a 	mov	r5,zero
 400a6c4:	01010074 	movhi	r4,1025
 400a6c8:	213f7004 	addi	r4,r4,-576
 400a6cc:	400b4600 	call	400b460 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
 400a6d0:	01010074 	movhi	r4,1025
 400a6d4:	213f8204 	addi	r4,r4,-504
 400a6d8:	400a5ec0 	call	400a5ec <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 400a6dc:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 400a6e0:	01010074 	movhi	r4,1025
 400a6e4:	213f8604 	addi	r4,r4,-488
 400a6e8:	400a57c0 	call	400a57c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 400a6ec:	01010074 	movhi	r4,1025
 400a6f0:	213f9204 	addi	r4,r4,-440
 400a6f4:	400a57c0 	call	400a57c <alt_dev_reg>
}
 400a6f8:	0001883a 	nop
 400a6fc:	e037883a 	mov	sp,fp
 400a700:	dfc00117 	ldw	ra,4(sp)
 400a704:	df000017 	ldw	fp,0(sp)
 400a708:	dec00204 	addi	sp,sp,8
 400a70c:	f800283a 	ret

0400a710 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400a710:	defffa04 	addi	sp,sp,-24
 400a714:	dfc00515 	stw	ra,20(sp)
 400a718:	df000415 	stw	fp,16(sp)
 400a71c:	df000404 	addi	fp,sp,16
 400a720:	e13ffd15 	stw	r4,-12(fp)
 400a724:	e17ffe15 	stw	r5,-8(fp)
 400a728:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a72c:	e0bffd17 	ldw	r2,-12(fp)
 400a730:	10800017 	ldw	r2,0(r2)
 400a734:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400a738:	e0bffc17 	ldw	r2,-16(fp)
 400a73c:	10c00a04 	addi	r3,r2,40
 400a740:	e0bffd17 	ldw	r2,-12(fp)
 400a744:	10800217 	ldw	r2,8(r2)
 400a748:	100f883a 	mov	r7,r2
 400a74c:	e1bfff17 	ldw	r6,-4(fp)
 400a750:	e17ffe17 	ldw	r5,-8(fp)
 400a754:	1809883a 	mov	r4,r3
 400a758:	400ad300 	call	400ad30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400a75c:	e037883a 	mov	sp,fp
 400a760:	dfc00117 	ldw	ra,4(sp)
 400a764:	df000017 	ldw	fp,0(sp)
 400a768:	dec00204 	addi	sp,sp,8
 400a76c:	f800283a 	ret

0400a770 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400a770:	defffa04 	addi	sp,sp,-24
 400a774:	dfc00515 	stw	ra,20(sp)
 400a778:	df000415 	stw	fp,16(sp)
 400a77c:	df000404 	addi	fp,sp,16
 400a780:	e13ffd15 	stw	r4,-12(fp)
 400a784:	e17ffe15 	stw	r5,-8(fp)
 400a788:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a78c:	e0bffd17 	ldw	r2,-12(fp)
 400a790:	10800017 	ldw	r2,0(r2)
 400a794:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400a798:	e0bffc17 	ldw	r2,-16(fp)
 400a79c:	10c00a04 	addi	r3,r2,40
 400a7a0:	e0bffd17 	ldw	r2,-12(fp)
 400a7a4:	10800217 	ldw	r2,8(r2)
 400a7a8:	100f883a 	mov	r7,r2
 400a7ac:	e1bfff17 	ldw	r6,-4(fp)
 400a7b0:	e17ffe17 	ldw	r5,-8(fp)
 400a7b4:	1809883a 	mov	r4,r3
 400a7b8:	400af4c0 	call	400af4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400a7bc:	e037883a 	mov	sp,fp
 400a7c0:	dfc00117 	ldw	ra,4(sp)
 400a7c4:	df000017 	ldw	fp,0(sp)
 400a7c8:	dec00204 	addi	sp,sp,8
 400a7cc:	f800283a 	ret

0400a7d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400a7d0:	defffc04 	addi	sp,sp,-16
 400a7d4:	dfc00315 	stw	ra,12(sp)
 400a7d8:	df000215 	stw	fp,8(sp)
 400a7dc:	df000204 	addi	fp,sp,8
 400a7e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a7e4:	e0bfff17 	ldw	r2,-4(fp)
 400a7e8:	10800017 	ldw	r2,0(r2)
 400a7ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400a7f0:	e0bffe17 	ldw	r2,-8(fp)
 400a7f4:	10c00a04 	addi	r3,r2,40
 400a7f8:	e0bfff17 	ldw	r2,-4(fp)
 400a7fc:	10800217 	ldw	r2,8(r2)
 400a800:	100b883a 	mov	r5,r2
 400a804:	1809883a 	mov	r4,r3
 400a808:	400abd80 	call	400abd8 <altera_avalon_jtag_uart_close>
}
 400a80c:	e037883a 	mov	sp,fp
 400a810:	dfc00117 	ldw	ra,4(sp)
 400a814:	df000017 	ldw	fp,0(sp)
 400a818:	dec00204 	addi	sp,sp,8
 400a81c:	f800283a 	ret

0400a820 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400a820:	defffa04 	addi	sp,sp,-24
 400a824:	dfc00515 	stw	ra,20(sp)
 400a828:	df000415 	stw	fp,16(sp)
 400a82c:	df000404 	addi	fp,sp,16
 400a830:	e13ffd15 	stw	r4,-12(fp)
 400a834:	e17ffe15 	stw	r5,-8(fp)
 400a838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400a83c:	e0bffd17 	ldw	r2,-12(fp)
 400a840:	10800017 	ldw	r2,0(r2)
 400a844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400a848:	e0bffc17 	ldw	r2,-16(fp)
 400a84c:	10800a04 	addi	r2,r2,40
 400a850:	e1bfff17 	ldw	r6,-4(fp)
 400a854:	e17ffe17 	ldw	r5,-8(fp)
 400a858:	1009883a 	mov	r4,r2
 400a85c:	400ac400 	call	400ac40 <altera_avalon_jtag_uart_ioctl>
}
 400a860:	e037883a 	mov	sp,fp
 400a864:	dfc00117 	ldw	ra,4(sp)
 400a868:	df000017 	ldw	fp,0(sp)
 400a86c:	dec00204 	addi	sp,sp,8
 400a870:	f800283a 	ret

0400a874 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400a874:	defffb04 	addi	sp,sp,-20
 400a878:	dfc00415 	stw	ra,16(sp)
 400a87c:	df000315 	stw	fp,12(sp)
 400a880:	df000304 	addi	fp,sp,12
 400a884:	e13ffd15 	stw	r4,-12(fp)
 400a888:	e17ffe15 	stw	r5,-8(fp)
 400a88c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400a890:	e0bffd17 	ldw	r2,-12(fp)
 400a894:	00c00044 	movi	r3,1
 400a898:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400a89c:	e0bffd17 	ldw	r2,-12(fp)
 400a8a0:	10800017 	ldw	r2,0(r2)
 400a8a4:	10800104 	addi	r2,r2,4
 400a8a8:	1007883a 	mov	r3,r2
 400a8ac:	e0bffd17 	ldw	r2,-12(fp)
 400a8b0:	10800817 	ldw	r2,32(r2)
 400a8b4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 400a8b8:	e0bfff17 	ldw	r2,-4(fp)
 400a8bc:	01810074 	movhi	r6,1025
 400a8c0:	31aa4a04 	addi	r6,r6,-22232
 400a8c4:	e17ffd17 	ldw	r5,-12(fp)
 400a8c8:	1009883a 	mov	r4,r2
 400a8cc:	400d2880 	call	400d288 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400a8d0:	e0bffd17 	ldw	r2,-12(fp)
 400a8d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400a8d8:	e0bffd17 	ldw	r2,-12(fp)
 400a8dc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400a8e0:	d0e6e917 	ldw	r3,-25692(gp)
 400a8e4:	e1fffd17 	ldw	r7,-12(fp)
 400a8e8:	01810074 	movhi	r6,1025
 400a8ec:	31aace04 	addi	r6,r6,-21704
 400a8f0:	180b883a 	mov	r5,r3
 400a8f4:	1009883a 	mov	r4,r2
 400a8f8:	400cc180 	call	400cc18 <alt_alarm_start>
 400a8fc:	1000040e 	bge	r2,zero,400a910 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400a900:	e0fffd17 	ldw	r3,-12(fp)
 400a904:	00a00034 	movhi	r2,32768
 400a908:	10bfffc4 	addi	r2,r2,-1
 400a90c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400a910:	0001883a 	nop
 400a914:	e037883a 	mov	sp,fp
 400a918:	dfc00117 	ldw	ra,4(sp)
 400a91c:	df000017 	ldw	fp,0(sp)
 400a920:	dec00204 	addi	sp,sp,8
 400a924:	f800283a 	ret

0400a928 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400a928:	defff704 	addi	sp,sp,-36
 400a92c:	df000815 	stw	fp,32(sp)
 400a930:	df000804 	addi	fp,sp,32
 400a934:	e13ffe15 	stw	r4,-8(fp)
 400a938:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400a93c:	e0bffe17 	ldw	r2,-8(fp)
 400a940:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 400a944:	e0bffa17 	ldw	r2,-24(fp)
 400a948:	10800017 	ldw	r2,0(r2)
 400a94c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400a950:	e0bffb17 	ldw	r2,-20(fp)
 400a954:	10800104 	addi	r2,r2,4
 400a958:	10800037 	ldwio	r2,0(r2)
 400a95c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400a960:	e0bffc17 	ldw	r2,-16(fp)
 400a964:	1080c00c 	andi	r2,r2,768
 400a968:	10006d26 	beq	r2,zero,400ab20 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400a96c:	e0bffc17 	ldw	r2,-16(fp)
 400a970:	1080400c 	andi	r2,r2,256
 400a974:	10003526 	beq	r2,zero,400aa4c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400a978:	00800074 	movhi	r2,1
 400a97c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400a980:	e0bffa17 	ldw	r2,-24(fp)
 400a984:	10800a17 	ldw	r2,40(r2)
 400a988:	10800044 	addi	r2,r2,1
 400a98c:	1081ffcc 	andi	r2,r2,2047
 400a990:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 400a994:	e0bffa17 	ldw	r2,-24(fp)
 400a998:	10c00b17 	ldw	r3,44(r2)
 400a99c:	e0bffd17 	ldw	r2,-12(fp)
 400a9a0:	18801526 	beq	r3,r2,400a9f8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400a9a4:	e0bffb17 	ldw	r2,-20(fp)
 400a9a8:	10800037 	ldwio	r2,0(r2)
 400a9ac:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400a9b0:	e0bff817 	ldw	r2,-32(fp)
 400a9b4:	10a0000c 	andi	r2,r2,32768
 400a9b8:	10001126 	beq	r2,zero,400aa00 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400a9bc:	e0bffa17 	ldw	r2,-24(fp)
 400a9c0:	10800a17 	ldw	r2,40(r2)
 400a9c4:	e0fff817 	ldw	r3,-32(fp)
 400a9c8:	1809883a 	mov	r4,r3
 400a9cc:	e0fffa17 	ldw	r3,-24(fp)
 400a9d0:	1885883a 	add	r2,r3,r2
 400a9d4:	10800e04 	addi	r2,r2,56
 400a9d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400a9dc:	e0bffa17 	ldw	r2,-24(fp)
 400a9e0:	10800a17 	ldw	r2,40(r2)
 400a9e4:	10800044 	addi	r2,r2,1
 400a9e8:	10c1ffcc 	andi	r3,r2,2047
 400a9ec:	e0bffa17 	ldw	r2,-24(fp)
 400a9f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400a9f4:	003fe206 	br	400a980 <__ram_exceptions_end+0xfbfea738>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400a9f8:	0001883a 	nop
 400a9fc:	00000106 	br	400aa04 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400aa00:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400aa04:	e0bff817 	ldw	r2,-32(fp)
 400aa08:	10bfffec 	andhi	r2,r2,65535
 400aa0c:	10000f26 	beq	r2,zero,400aa4c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400aa10:	e0bffa17 	ldw	r2,-24(fp)
 400aa14:	10c00817 	ldw	r3,32(r2)
 400aa18:	00bfff84 	movi	r2,-2
 400aa1c:	1886703a 	and	r3,r3,r2
 400aa20:	e0bffa17 	ldw	r2,-24(fp)
 400aa24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400aa28:	e0bffb17 	ldw	r2,-20(fp)
 400aa2c:	10800104 	addi	r2,r2,4
 400aa30:	1007883a 	mov	r3,r2
 400aa34:	e0bffa17 	ldw	r2,-24(fp)
 400aa38:	10800817 	ldw	r2,32(r2)
 400aa3c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400aa40:	e0bffb17 	ldw	r2,-20(fp)
 400aa44:	10800104 	addi	r2,r2,4
 400aa48:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400aa4c:	e0bffc17 	ldw	r2,-16(fp)
 400aa50:	1080800c 	andi	r2,r2,512
 400aa54:	103fbe26 	beq	r2,zero,400a950 <__ram_exceptions_end+0xfbfea708>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400aa58:	e0bffc17 	ldw	r2,-16(fp)
 400aa5c:	1004d43a 	srli	r2,r2,16
 400aa60:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400aa64:	00001406 	br	400aab8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400aa68:	e0bffb17 	ldw	r2,-20(fp)
 400aa6c:	e0fffa17 	ldw	r3,-24(fp)
 400aa70:	18c00d17 	ldw	r3,52(r3)
 400aa74:	e13ffa17 	ldw	r4,-24(fp)
 400aa78:	20c7883a 	add	r3,r4,r3
 400aa7c:	18c20e04 	addi	r3,r3,2104
 400aa80:	18c00003 	ldbu	r3,0(r3)
 400aa84:	18c03fcc 	andi	r3,r3,255
 400aa88:	18c0201c 	xori	r3,r3,128
 400aa8c:	18ffe004 	addi	r3,r3,-128
 400aa90:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400aa94:	e0bffa17 	ldw	r2,-24(fp)
 400aa98:	10800d17 	ldw	r2,52(r2)
 400aa9c:	10800044 	addi	r2,r2,1
 400aaa0:	10c1ffcc 	andi	r3,r2,2047
 400aaa4:	e0bffa17 	ldw	r2,-24(fp)
 400aaa8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400aaac:	e0bff917 	ldw	r2,-28(fp)
 400aab0:	10bfffc4 	addi	r2,r2,-1
 400aab4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400aab8:	e0bff917 	ldw	r2,-28(fp)
 400aabc:	10000526 	beq	r2,zero,400aad4 <altera_avalon_jtag_uart_irq+0x1ac>
 400aac0:	e0bffa17 	ldw	r2,-24(fp)
 400aac4:	10c00d17 	ldw	r3,52(r2)
 400aac8:	e0bffa17 	ldw	r2,-24(fp)
 400aacc:	10800c17 	ldw	r2,48(r2)
 400aad0:	18bfe51e 	bne	r3,r2,400aa68 <__ram_exceptions_end+0xfbfea820>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400aad4:	e0bff917 	ldw	r2,-28(fp)
 400aad8:	103f9d26 	beq	r2,zero,400a950 <__ram_exceptions_end+0xfbfea708>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400aadc:	e0bffa17 	ldw	r2,-24(fp)
 400aae0:	10c00817 	ldw	r3,32(r2)
 400aae4:	00bfff44 	movi	r2,-3
 400aae8:	1886703a 	and	r3,r3,r2
 400aaec:	e0bffa17 	ldw	r2,-24(fp)
 400aaf0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400aaf4:	e0bffa17 	ldw	r2,-24(fp)
 400aaf8:	10800017 	ldw	r2,0(r2)
 400aafc:	10800104 	addi	r2,r2,4
 400ab00:	1007883a 	mov	r3,r2
 400ab04:	e0bffa17 	ldw	r2,-24(fp)
 400ab08:	10800817 	ldw	r2,32(r2)
 400ab0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400ab10:	e0bffb17 	ldw	r2,-20(fp)
 400ab14:	10800104 	addi	r2,r2,4
 400ab18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400ab1c:	003f8c06 	br	400a950 <__ram_exceptions_end+0xfbfea708>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400ab20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400ab24:	0001883a 	nop
 400ab28:	e037883a 	mov	sp,fp
 400ab2c:	df000017 	ldw	fp,0(sp)
 400ab30:	dec00104 	addi	sp,sp,4
 400ab34:	f800283a 	ret

0400ab38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400ab38:	defff804 	addi	sp,sp,-32
 400ab3c:	df000715 	stw	fp,28(sp)
 400ab40:	df000704 	addi	fp,sp,28
 400ab44:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400ab48:	e0bffb17 	ldw	r2,-20(fp)
 400ab4c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400ab50:	e0bff917 	ldw	r2,-28(fp)
 400ab54:	10800017 	ldw	r2,0(r2)
 400ab58:	10800104 	addi	r2,r2,4
 400ab5c:	10800037 	ldwio	r2,0(r2)
 400ab60:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400ab64:	e0bffa17 	ldw	r2,-24(fp)
 400ab68:	1081000c 	andi	r2,r2,1024
 400ab6c:	10000b26 	beq	r2,zero,400ab9c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400ab70:	e0bff917 	ldw	r2,-28(fp)
 400ab74:	10800017 	ldw	r2,0(r2)
 400ab78:	10800104 	addi	r2,r2,4
 400ab7c:	1007883a 	mov	r3,r2
 400ab80:	e0bff917 	ldw	r2,-28(fp)
 400ab84:	10800817 	ldw	r2,32(r2)
 400ab88:	10810014 	ori	r2,r2,1024
 400ab8c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400ab90:	e0bff917 	ldw	r2,-28(fp)
 400ab94:	10000915 	stw	zero,36(r2)
 400ab98:	00000a06 	br	400abc4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400ab9c:	e0bff917 	ldw	r2,-28(fp)
 400aba0:	10c00917 	ldw	r3,36(r2)
 400aba4:	00a00034 	movhi	r2,32768
 400aba8:	10bfff04 	addi	r2,r2,-4
 400abac:	10c00536 	bltu	r2,r3,400abc4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400abb0:	e0bff917 	ldw	r2,-28(fp)
 400abb4:	10800917 	ldw	r2,36(r2)
 400abb8:	10c00044 	addi	r3,r2,1
 400abbc:	e0bff917 	ldw	r2,-28(fp)
 400abc0:	10c00915 	stw	r3,36(r2)
 400abc4:	d0a6e917 	ldw	r2,-25692(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400abc8:	e037883a 	mov	sp,fp
 400abcc:	df000017 	ldw	fp,0(sp)
 400abd0:	dec00104 	addi	sp,sp,4
 400abd4:	f800283a 	ret

0400abd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400abd8:	defffd04 	addi	sp,sp,-12
 400abdc:	df000215 	stw	fp,8(sp)
 400abe0:	df000204 	addi	fp,sp,8
 400abe4:	e13ffe15 	stw	r4,-8(fp)
 400abe8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400abec:	00000506 	br	400ac04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400abf0:	e0bfff17 	ldw	r2,-4(fp)
 400abf4:	1090000c 	andi	r2,r2,16384
 400abf8:	10000226 	beq	r2,zero,400ac04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400abfc:	00bffd44 	movi	r2,-11
 400ac00:	00000b06 	br	400ac30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400ac04:	e0bffe17 	ldw	r2,-8(fp)
 400ac08:	10c00d17 	ldw	r3,52(r2)
 400ac0c:	e0bffe17 	ldw	r2,-8(fp)
 400ac10:	10800c17 	ldw	r2,48(r2)
 400ac14:	18800526 	beq	r3,r2,400ac2c <altera_avalon_jtag_uart_close+0x54>
 400ac18:	e0bffe17 	ldw	r2,-8(fp)
 400ac1c:	10c00917 	ldw	r3,36(r2)
 400ac20:	e0bffe17 	ldw	r2,-8(fp)
 400ac24:	10800117 	ldw	r2,4(r2)
 400ac28:	18bff136 	bltu	r3,r2,400abf0 <__ram_exceptions_end+0xfbfea9a8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400ac2c:	0005883a 	mov	r2,zero
}
 400ac30:	e037883a 	mov	sp,fp
 400ac34:	df000017 	ldw	fp,0(sp)
 400ac38:	dec00104 	addi	sp,sp,4
 400ac3c:	f800283a 	ret

0400ac40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400ac40:	defffa04 	addi	sp,sp,-24
 400ac44:	df000515 	stw	fp,20(sp)
 400ac48:	df000504 	addi	fp,sp,20
 400ac4c:	e13ffd15 	stw	r4,-12(fp)
 400ac50:	e17ffe15 	stw	r5,-8(fp)
 400ac54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400ac58:	00bff9c4 	movi	r2,-25
 400ac5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400ac60:	e0bffe17 	ldw	r2,-8(fp)
 400ac64:	10da8060 	cmpeqi	r3,r2,27137
 400ac68:	1800031e 	bne	r3,zero,400ac78 <altera_avalon_jtag_uart_ioctl+0x38>
 400ac6c:	109a80a0 	cmpeqi	r2,r2,27138
 400ac70:	1000181e 	bne	r2,zero,400acd4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400ac74:	00002906 	br	400ad1c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400ac78:	e0bffd17 	ldw	r2,-12(fp)
 400ac7c:	10c00117 	ldw	r3,4(r2)
 400ac80:	00a00034 	movhi	r2,32768
 400ac84:	10bfffc4 	addi	r2,r2,-1
 400ac88:	18802126 	beq	r3,r2,400ad10 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400ac8c:	e0bfff17 	ldw	r2,-4(fp)
 400ac90:	10800017 	ldw	r2,0(r2)
 400ac94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400ac98:	e0bffc17 	ldw	r2,-16(fp)
 400ac9c:	10800090 	cmplti	r2,r2,2
 400aca0:	1000061e 	bne	r2,zero,400acbc <altera_avalon_jtag_uart_ioctl+0x7c>
 400aca4:	e0fffc17 	ldw	r3,-16(fp)
 400aca8:	00a00034 	movhi	r2,32768
 400acac:	10bfffc4 	addi	r2,r2,-1
 400acb0:	18800226 	beq	r3,r2,400acbc <altera_avalon_jtag_uart_ioctl+0x7c>
 400acb4:	e0bffc17 	ldw	r2,-16(fp)
 400acb8:	00000206 	br	400acc4 <altera_avalon_jtag_uart_ioctl+0x84>
 400acbc:	00a00034 	movhi	r2,32768
 400acc0:	10bfff84 	addi	r2,r2,-2
 400acc4:	e0fffd17 	ldw	r3,-12(fp)
 400acc8:	18800115 	stw	r2,4(r3)
      rc = 0;
 400accc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400acd0:	00000f06 	br	400ad10 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400acd4:	e0bffd17 	ldw	r2,-12(fp)
 400acd8:	10c00117 	ldw	r3,4(r2)
 400acdc:	00a00034 	movhi	r2,32768
 400ace0:	10bfffc4 	addi	r2,r2,-1
 400ace4:	18800c26 	beq	r3,r2,400ad18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400ace8:	e0bffd17 	ldw	r2,-12(fp)
 400acec:	10c00917 	ldw	r3,36(r2)
 400acf0:	e0bffd17 	ldw	r2,-12(fp)
 400acf4:	10800117 	ldw	r2,4(r2)
 400acf8:	1885803a 	cmpltu	r2,r3,r2
 400acfc:	10c03fcc 	andi	r3,r2,255
 400ad00:	e0bfff17 	ldw	r2,-4(fp)
 400ad04:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400ad08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400ad0c:	00000206 	br	400ad18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400ad10:	0001883a 	nop
 400ad14:	00000106 	br	400ad1c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400ad18:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400ad1c:	e0bffb17 	ldw	r2,-20(fp)
}
 400ad20:	e037883a 	mov	sp,fp
 400ad24:	df000017 	ldw	fp,0(sp)
 400ad28:	dec00104 	addi	sp,sp,4
 400ad2c:	f800283a 	ret

0400ad30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400ad30:	defff304 	addi	sp,sp,-52
 400ad34:	dfc00c15 	stw	ra,48(sp)
 400ad38:	df000b15 	stw	fp,44(sp)
 400ad3c:	df000b04 	addi	fp,sp,44
 400ad40:	e13ffc15 	stw	r4,-16(fp)
 400ad44:	e17ffd15 	stw	r5,-12(fp)
 400ad48:	e1bffe15 	stw	r6,-8(fp)
 400ad4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400ad50:	e0bffd17 	ldw	r2,-12(fp)
 400ad54:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400ad58:	00004706 	br	400ae78 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400ad5c:	e0bffc17 	ldw	r2,-16(fp)
 400ad60:	10800a17 	ldw	r2,40(r2)
 400ad64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400ad68:	e0bffc17 	ldw	r2,-16(fp)
 400ad6c:	10800b17 	ldw	r2,44(r2)
 400ad70:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400ad74:	e0fff717 	ldw	r3,-36(fp)
 400ad78:	e0bff817 	ldw	r2,-32(fp)
 400ad7c:	18800536 	bltu	r3,r2,400ad94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400ad80:	e0fff717 	ldw	r3,-36(fp)
 400ad84:	e0bff817 	ldw	r2,-32(fp)
 400ad88:	1885c83a 	sub	r2,r3,r2
 400ad8c:	e0bff615 	stw	r2,-40(fp)
 400ad90:	00000406 	br	400ada4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400ad94:	00c20004 	movi	r3,2048
 400ad98:	e0bff817 	ldw	r2,-32(fp)
 400ad9c:	1885c83a 	sub	r2,r3,r2
 400ada0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400ada4:	e0bff617 	ldw	r2,-40(fp)
 400ada8:	10001e26 	beq	r2,zero,400ae24 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400adac:	e0fffe17 	ldw	r3,-8(fp)
 400adb0:	e0bff617 	ldw	r2,-40(fp)
 400adb4:	1880022e 	bgeu	r3,r2,400adc0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400adb8:	e0bffe17 	ldw	r2,-8(fp)
 400adbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400adc0:	e0bffc17 	ldw	r2,-16(fp)
 400adc4:	10c00e04 	addi	r3,r2,56
 400adc8:	e0bff817 	ldw	r2,-32(fp)
 400adcc:	1885883a 	add	r2,r3,r2
 400add0:	e1bff617 	ldw	r6,-40(fp)
 400add4:	100b883a 	mov	r5,r2
 400add8:	e13ff517 	ldw	r4,-44(fp)
 400addc:	40084340 	call	4008434 <memcpy>
      ptr   += n;
 400ade0:	e0fff517 	ldw	r3,-44(fp)
 400ade4:	e0bff617 	ldw	r2,-40(fp)
 400ade8:	1885883a 	add	r2,r3,r2
 400adec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400adf0:	e0fffe17 	ldw	r3,-8(fp)
 400adf4:	e0bff617 	ldw	r2,-40(fp)
 400adf8:	1885c83a 	sub	r2,r3,r2
 400adfc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ae00:	e0fff817 	ldw	r3,-32(fp)
 400ae04:	e0bff617 	ldw	r2,-40(fp)
 400ae08:	1885883a 	add	r2,r3,r2
 400ae0c:	10c1ffcc 	andi	r3,r2,2047
 400ae10:	e0bffc17 	ldw	r2,-16(fp)
 400ae14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400ae18:	e0bffe17 	ldw	r2,-8(fp)
 400ae1c:	00bfcf16 	blt	zero,r2,400ad5c <__ram_exceptions_end+0xfbfeab14>
 400ae20:	00000106 	br	400ae28 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400ae24:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400ae28:	e0fff517 	ldw	r3,-44(fp)
 400ae2c:	e0bffd17 	ldw	r2,-12(fp)
 400ae30:	1880141e 	bne	r3,r2,400ae84 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400ae34:	e0bfff17 	ldw	r2,-4(fp)
 400ae38:	1090000c 	andi	r2,r2,16384
 400ae3c:	1000131e 	bne	r2,zero,400ae8c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400ae40:	0001883a 	nop
 400ae44:	e0bffc17 	ldw	r2,-16(fp)
 400ae48:	10c00a17 	ldw	r3,40(r2)
 400ae4c:	e0bff717 	ldw	r2,-36(fp)
 400ae50:	1880051e 	bne	r3,r2,400ae68 <altera_avalon_jtag_uart_read+0x138>
 400ae54:	e0bffc17 	ldw	r2,-16(fp)
 400ae58:	10c00917 	ldw	r3,36(r2)
 400ae5c:	e0bffc17 	ldw	r2,-16(fp)
 400ae60:	10800117 	ldw	r2,4(r2)
 400ae64:	18bff736 	bltu	r3,r2,400ae44 <__ram_exceptions_end+0xfbfeabfc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400ae68:	e0bffc17 	ldw	r2,-16(fp)
 400ae6c:	10c00a17 	ldw	r3,40(r2)
 400ae70:	e0bff717 	ldw	r2,-36(fp)
 400ae74:	18800726 	beq	r3,r2,400ae94 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400ae78:	e0bffe17 	ldw	r2,-8(fp)
 400ae7c:	00bfb716 	blt	zero,r2,400ad5c <__ram_exceptions_end+0xfbfeab14>
 400ae80:	00000506 	br	400ae98 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400ae84:	0001883a 	nop
 400ae88:	00000306 	br	400ae98 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400ae8c:	0001883a 	nop
 400ae90:	00000106 	br	400ae98 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400ae94:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400ae98:	e0fff517 	ldw	r3,-44(fp)
 400ae9c:	e0bffd17 	ldw	r2,-12(fp)
 400aea0:	18801826 	beq	r3,r2,400af04 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400aea4:	0005303a 	rdctl	r2,status
 400aea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400aeac:	e0fffb17 	ldw	r3,-20(fp)
 400aeb0:	00bfff84 	movi	r2,-2
 400aeb4:	1884703a 	and	r2,r3,r2
 400aeb8:	1001703a 	wrctl	status,r2
  
  return context;
 400aebc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400aec0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400aec4:	e0bffc17 	ldw	r2,-16(fp)
 400aec8:	10800817 	ldw	r2,32(r2)
 400aecc:	10c00054 	ori	r3,r2,1
 400aed0:	e0bffc17 	ldw	r2,-16(fp)
 400aed4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400aed8:	e0bffc17 	ldw	r2,-16(fp)
 400aedc:	10800017 	ldw	r2,0(r2)
 400aee0:	10800104 	addi	r2,r2,4
 400aee4:	1007883a 	mov	r3,r2
 400aee8:	e0bffc17 	ldw	r2,-16(fp)
 400aeec:	10800817 	ldw	r2,32(r2)
 400aef0:	18800035 	stwio	r2,0(r3)
 400aef4:	e0bffa17 	ldw	r2,-24(fp)
 400aef8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400aefc:	e0bff917 	ldw	r2,-28(fp)
 400af00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400af04:	e0fff517 	ldw	r3,-44(fp)
 400af08:	e0bffd17 	ldw	r2,-12(fp)
 400af0c:	18800426 	beq	r3,r2,400af20 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400af10:	e0fff517 	ldw	r3,-44(fp)
 400af14:	e0bffd17 	ldw	r2,-12(fp)
 400af18:	1885c83a 	sub	r2,r3,r2
 400af1c:	00000606 	br	400af38 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400af20:	e0bfff17 	ldw	r2,-4(fp)
 400af24:	1090000c 	andi	r2,r2,16384
 400af28:	10000226 	beq	r2,zero,400af34 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400af2c:	00bffd44 	movi	r2,-11
 400af30:	00000106 	br	400af38 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400af34:	00bffec4 	movi	r2,-5
}
 400af38:	e037883a 	mov	sp,fp
 400af3c:	dfc00117 	ldw	ra,4(sp)
 400af40:	df000017 	ldw	fp,0(sp)
 400af44:	dec00204 	addi	sp,sp,8
 400af48:	f800283a 	ret

0400af4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400af4c:	defff304 	addi	sp,sp,-52
 400af50:	dfc00c15 	stw	ra,48(sp)
 400af54:	df000b15 	stw	fp,44(sp)
 400af58:	df000b04 	addi	fp,sp,44
 400af5c:	e13ffc15 	stw	r4,-16(fp)
 400af60:	e17ffd15 	stw	r5,-12(fp)
 400af64:	e1bffe15 	stw	r6,-8(fp)
 400af68:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400af6c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400af70:	e0bffd17 	ldw	r2,-12(fp)
 400af74:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400af78:	00003706 	br	400b058 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400af7c:	e0bffc17 	ldw	r2,-16(fp)
 400af80:	10800c17 	ldw	r2,48(r2)
 400af84:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400af88:	e0bffc17 	ldw	r2,-16(fp)
 400af8c:	10800d17 	ldw	r2,52(r2)
 400af90:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400af94:	e0fff917 	ldw	r3,-28(fp)
 400af98:	e0bff517 	ldw	r2,-44(fp)
 400af9c:	1880062e 	bgeu	r3,r2,400afb8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400afa0:	e0fff517 	ldw	r3,-44(fp)
 400afa4:	e0bff917 	ldw	r2,-28(fp)
 400afa8:	1885c83a 	sub	r2,r3,r2
 400afac:	10bfffc4 	addi	r2,r2,-1
 400afb0:	e0bff615 	stw	r2,-40(fp)
 400afb4:	00000b06 	br	400afe4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400afb8:	e0bff517 	ldw	r2,-44(fp)
 400afbc:	10000526 	beq	r2,zero,400afd4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400afc0:	00c20004 	movi	r3,2048
 400afc4:	e0bff917 	ldw	r2,-28(fp)
 400afc8:	1885c83a 	sub	r2,r3,r2
 400afcc:	e0bff615 	stw	r2,-40(fp)
 400afd0:	00000406 	br	400afe4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400afd4:	00c1ffc4 	movi	r3,2047
 400afd8:	e0bff917 	ldw	r2,-28(fp)
 400afdc:	1885c83a 	sub	r2,r3,r2
 400afe0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400afe4:	e0bff617 	ldw	r2,-40(fp)
 400afe8:	10001e26 	beq	r2,zero,400b064 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400afec:	e0fffe17 	ldw	r3,-8(fp)
 400aff0:	e0bff617 	ldw	r2,-40(fp)
 400aff4:	1880022e 	bgeu	r3,r2,400b000 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400aff8:	e0bffe17 	ldw	r2,-8(fp)
 400affc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400b000:	e0bffc17 	ldw	r2,-16(fp)
 400b004:	10c20e04 	addi	r3,r2,2104
 400b008:	e0bff917 	ldw	r2,-28(fp)
 400b00c:	1885883a 	add	r2,r3,r2
 400b010:	e1bff617 	ldw	r6,-40(fp)
 400b014:	e17ffd17 	ldw	r5,-12(fp)
 400b018:	1009883a 	mov	r4,r2
 400b01c:	40084340 	call	4008434 <memcpy>
      ptr   += n;
 400b020:	e0fffd17 	ldw	r3,-12(fp)
 400b024:	e0bff617 	ldw	r2,-40(fp)
 400b028:	1885883a 	add	r2,r3,r2
 400b02c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400b030:	e0fffe17 	ldw	r3,-8(fp)
 400b034:	e0bff617 	ldw	r2,-40(fp)
 400b038:	1885c83a 	sub	r2,r3,r2
 400b03c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b040:	e0fff917 	ldw	r3,-28(fp)
 400b044:	e0bff617 	ldw	r2,-40(fp)
 400b048:	1885883a 	add	r2,r3,r2
 400b04c:	10c1ffcc 	andi	r3,r2,2047
 400b050:	e0bffc17 	ldw	r2,-16(fp)
 400b054:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400b058:	e0bffe17 	ldw	r2,-8(fp)
 400b05c:	00bfc716 	blt	zero,r2,400af7c <__ram_exceptions_end+0xfbfead34>
 400b060:	00000106 	br	400b068 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400b064:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b068:	0005303a 	rdctl	r2,status
 400b06c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b070:	e0fffb17 	ldw	r3,-20(fp)
 400b074:	00bfff84 	movi	r2,-2
 400b078:	1884703a 	and	r2,r3,r2
 400b07c:	1001703a 	wrctl	status,r2
  
  return context;
 400b080:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400b084:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400b088:	e0bffc17 	ldw	r2,-16(fp)
 400b08c:	10800817 	ldw	r2,32(r2)
 400b090:	10c00094 	ori	r3,r2,2
 400b094:	e0bffc17 	ldw	r2,-16(fp)
 400b098:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400b09c:	e0bffc17 	ldw	r2,-16(fp)
 400b0a0:	10800017 	ldw	r2,0(r2)
 400b0a4:	10800104 	addi	r2,r2,4
 400b0a8:	1007883a 	mov	r3,r2
 400b0ac:	e0bffc17 	ldw	r2,-16(fp)
 400b0b0:	10800817 	ldw	r2,32(r2)
 400b0b4:	18800035 	stwio	r2,0(r3)
 400b0b8:	e0bffa17 	ldw	r2,-24(fp)
 400b0bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b0c0:	e0bff817 	ldw	r2,-32(fp)
 400b0c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400b0c8:	e0bffe17 	ldw	r2,-8(fp)
 400b0cc:	0080100e 	bge	zero,r2,400b110 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400b0d0:	e0bfff17 	ldw	r2,-4(fp)
 400b0d4:	1090000c 	andi	r2,r2,16384
 400b0d8:	1000101e 	bne	r2,zero,400b11c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400b0dc:	0001883a 	nop
 400b0e0:	e0bffc17 	ldw	r2,-16(fp)
 400b0e4:	10c00d17 	ldw	r3,52(r2)
 400b0e8:	e0bff517 	ldw	r2,-44(fp)
 400b0ec:	1880051e 	bne	r3,r2,400b104 <altera_avalon_jtag_uart_write+0x1b8>
 400b0f0:	e0bffc17 	ldw	r2,-16(fp)
 400b0f4:	10c00917 	ldw	r3,36(r2)
 400b0f8:	e0bffc17 	ldw	r2,-16(fp)
 400b0fc:	10800117 	ldw	r2,4(r2)
 400b100:	18bff736 	bltu	r3,r2,400b0e0 <__ram_exceptions_end+0xfbfeae98>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400b104:	e0bffc17 	ldw	r2,-16(fp)
 400b108:	10800917 	ldw	r2,36(r2)
 400b10c:	1000051e 	bne	r2,zero,400b124 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400b110:	e0bffe17 	ldw	r2,-8(fp)
 400b114:	00bfd016 	blt	zero,r2,400b058 <__ram_exceptions_end+0xfbfeae10>
 400b118:	00000306 	br	400b128 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400b11c:	0001883a 	nop
 400b120:	00000106 	br	400b128 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400b124:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400b128:	e0fffd17 	ldw	r3,-12(fp)
 400b12c:	e0bff717 	ldw	r2,-36(fp)
 400b130:	18800426 	beq	r3,r2,400b144 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400b134:	e0fffd17 	ldw	r3,-12(fp)
 400b138:	e0bff717 	ldw	r2,-36(fp)
 400b13c:	1885c83a 	sub	r2,r3,r2
 400b140:	00000606 	br	400b15c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400b144:	e0bfff17 	ldw	r2,-4(fp)
 400b148:	1090000c 	andi	r2,r2,16384
 400b14c:	10000226 	beq	r2,zero,400b158 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400b150:	00bffd44 	movi	r2,-11
 400b154:	00000106 	br	400b15c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400b158:	00bffec4 	movi	r2,-5
}
 400b15c:	e037883a 	mov	sp,fp
 400b160:	dfc00117 	ldw	ra,4(sp)
 400b164:	df000017 	ldw	fp,0(sp)
 400b168:	dec00204 	addi	sp,sp,8
 400b16c:	f800283a 	ret

0400b170 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 400b170:	defffd04 	addi	sp,sp,-12
 400b174:	df000215 	stw	fp,8(sp)
 400b178:	df000204 	addi	fp,sp,8
 400b17c:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 400b180:	008e84b4 	movhi	r2,14866
 400b184:	10ac1144 	addi	r2,r2,-20411
 400b188:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 400b18c:	e0bfff17 	ldw	r2,-4(fp)
 400b190:	10800a17 	ldw	r2,40(r2)
 400b194:	10800104 	addi	r2,r2,4
 400b198:	1007883a 	mov	r3,r2
 400b19c:	e0bffe17 	ldw	r2,-8(fp)
 400b1a0:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 400b1a4:	e0bfff17 	ldw	r2,-4(fp)
 400b1a8:	10800a17 	ldw	r2,40(r2)
 400b1ac:	10800104 	addi	r2,r2,4
 400b1b0:	10800037 	ldwio	r2,0(r2)
 400b1b4:	1007883a 	mov	r3,r2
 400b1b8:	e0bffe17 	ldw	r2,-8(fp)
 400b1bc:	1880081e 	bne	r3,r2,400b1e0 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 400b1c0:	e0bfff17 	ldw	r2,-4(fp)
 400b1c4:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 400b1c8:	e0bfff17 	ldw	r2,-4(fp)
 400b1cc:	10800a17 	ldw	r2,40(r2)
 400b1d0:	10800104 	addi	r2,r2,4
 400b1d4:	0007883a 	mov	r3,zero
 400b1d8:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 400b1dc:	00000306 	br	400b1ec <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 400b1e0:	e0bfff17 	ldw	r2,-4(fp)
 400b1e4:	00c00044 	movi	r3,1
 400b1e8:	10c00f15 	stw	r3,60(r2)
    }
}
 400b1ec:	0001883a 	nop
 400b1f0:	e037883a 	mov	sp,fp
 400b1f4:	df000017 	ldw	fp,0(sp)
 400b1f8:	dec00104 	addi	sp,sp,4
 400b1fc:	f800283a 	ret

0400b200 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 400b200:	defffc04 	addi	sp,sp,-16
 400b204:	df000315 	stw	fp,12(sp)
 400b208:	df000304 	addi	fp,sp,12
 400b20c:	e13ffe15 	stw	r4,-8(fp)
 400b210:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 400b214:	e0bfff17 	ldw	r2,-4(fp)
 400b218:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 400b21c:	e0bffd17 	ldw	r2,-12(fp)
 400b220:	10001026 	beq	r2,zero,400b264 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 400b224:	e0bffe17 	ldw	r2,-8(fp)
 400b228:	10800a17 	ldw	r2,40(r2)
 400b22c:	10800104 	addi	r2,r2,4
 400b230:	1007883a 	mov	r3,r2
 400b234:	e0bffd17 	ldw	r2,-12(fp)
 400b238:	10800104 	addi	r2,r2,4
 400b23c:	10800017 	ldw	r2,0(r2)
 400b240:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 400b244:	e0bffe17 	ldw	r2,-8(fp)
 400b248:	10800a17 	ldw	r2,40(r2)
 400b24c:	1007883a 	mov	r3,r2
 400b250:	e0bffd17 	ldw	r2,-12(fp)
 400b254:	10800017 	ldw	r2,0(r2)
 400b258:	18800035 	stwio	r2,0(r3)
        return 0;
 400b25c:	0005883a 	mov	r2,zero
 400b260:	00000106 	br	400b268 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 400b264:	00bffa84 	movi	r2,-22
}
 400b268:	e037883a 	mov	sp,fp
 400b26c:	df000017 	ldw	fp,0(sp)
 400b270:	dec00104 	addi	sp,sp,4
 400b274:	f800283a 	ret

0400b278 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 400b278:	defff504 	addi	sp,sp,-44
 400b27c:	dfc00a15 	stw	ra,40(sp)
 400b280:	df000915 	stw	fp,36(sp)
 400b284:	df000904 	addi	fp,sp,36
 400b288:	e13ffe15 	stw	r4,-8(fp)
 400b28c:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400b290:	e0bffe17 	ldw	r2,-8(fp)
 400b294:	e0bff715 	stw	r2,-36(fp)
    int status = 0;
 400b298:	e03ff815 	stw	zero,-32(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 400b29c:	e0bff717 	ldw	r2,-36(fp)
 400b2a0:	10801017 	ldw	r2,64(r2)
 400b2a4:	e0bff915 	stw	r2,-28(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400b2a8:	e0bff717 	ldw	r2,-36(fp)
 400b2ac:	10800a17 	ldw	r2,40(r2)
 400b2b0:	10800304 	addi	r2,r2,12
 400b2b4:	10800037 	ldwio	r2,0(r2)
 400b2b8:	1007883a 	mov	r3,r2
 400b2bc:	00bfff44 	movi	r2,-3
 400b2c0:	1884703a 	and	r2,r3,r2
 400b2c4:	e0bffa15 	stw	r2,-24(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400b2c8:	e0bff717 	ldw	r2,-36(fp)
 400b2cc:	10800a17 	ldw	r2,40(r2)
 400b2d0:	10800304 	addi	r2,r2,12
 400b2d4:	1007883a 	mov	r3,r2
 400b2d8:	e0bffa17 	ldw	r2,-24(fp)
 400b2dc:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 400b2e0:	e0bff917 	ldw	r2,-28(fp)
 400b2e4:	10002d26 	beq	r2,zero,400b39c <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 400b2e8:	e0bff717 	ldw	r2,-36(fp)
 400b2ec:	10800a17 	ldw	r2,40(r2)
 400b2f0:	10800104 	addi	r2,r2,4
 400b2f4:	1007883a 	mov	r3,r2
 400b2f8:	e0bff917 	ldw	r2,-28(fp)
 400b2fc:	10800104 	addi	r2,r2,4
 400b300:	10800017 	ldw	r2,0(r2)
 400b304:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 400b308:	e0bff717 	ldw	r2,-36(fp)
 400b30c:	10800a17 	ldw	r2,40(r2)
 400b310:	1007883a 	mov	r3,r2
 400b314:	e0bff917 	ldw	r2,-28(fp)
 400b318:	10800017 	ldw	r2,0(r2)
 400b31c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400b320:	e0bff717 	ldw	r2,-36(fp)
 400b324:	10800a17 	ldw	r2,40(r2)
 400b328:	10800204 	addi	r2,r2,8
 400b32c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400b330:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400b334:	1005d07a 	srai	r2,r2,1
 400b338:	e0bff815 	stw	r2,-32(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 400b33c:	e0bff717 	ldw	r2,-36(fp)
 400b340:	10800d17 	ldw	r2,52(r2)
 400b344:	10001126 	beq	r2,zero,400b38c <altera_avalon_mailbox_simple_tx_isr+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b348:	0005303a 	rdctl	r2,status
 400b34c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b350:	e0fffc17 	ldw	r3,-16(fp)
 400b354:	00bfff84 	movi	r2,-2
 400b358:	1884703a 	and	r2,r3,r2
 400b35c:	1001703a 	wrctl	status,r2
  
  return context;
 400b360:	e0bffc17 	ldw	r2,-16(fp)
        {
            cpu_sr = alt_irq_disable_all();
 400b364:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 400b368:	e0bff717 	ldw	r2,-36(fp)
 400b36c:	10800d17 	ldw	r2,52(r2)
 400b370:	e17ff817 	ldw	r5,-32(fp)
 400b374:	e13ff917 	ldw	r4,-28(fp)
 400b378:	103ee83a 	callr	r2
 400b37c:	e0bffb17 	ldw	r2,-20(fp)
 400b380:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b384:	e0bffd17 	ldw	r2,-12(fp)
 400b388:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400b38c:	e0bff717 	ldw	r2,-36(fp)
 400b390:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 400b394:	e0bff717 	ldw	r2,-36(fp)
 400b398:	10001105 	stb	zero,68(r2)
    }
}
 400b39c:	0001883a 	nop
 400b3a0:	e037883a 	mov	sp,fp
 400b3a4:	dfc00117 	ldw	ra,4(sp)
 400b3a8:	df000017 	ldw	fp,0(sp)
 400b3ac:	dec00204 	addi	sp,sp,8
 400b3b0:	f800283a 	ret

0400b3b4 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 400b3b4:	defff604 	addi	sp,sp,-40
 400b3b8:	dfc00915 	stw	ra,36(sp)
 400b3bc:	df000815 	stw	fp,32(sp)
 400b3c0:	df000804 	addi	fp,sp,32
 400b3c4:	e13ffe15 	stw	r4,-8(fp)
 400b3c8:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 400b3cc:	e0bffe17 	ldw	r2,-8(fp)
 400b3d0:	e0bff815 	stw	r2,-32(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400b3d4:	e0bff817 	ldw	r2,-32(fp)
 400b3d8:	10800a17 	ldw	r2,40(r2)
 400b3dc:	10800104 	addi	r2,r2,4
 400b3e0:	10800037 	ldwio	r2,0(r2)
 400b3e4:	e0bffd15 	stw	r2,-12(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400b3e8:	e0bff817 	ldw	r2,-32(fp)
 400b3ec:	10800a17 	ldw	r2,40(r2)
 400b3f0:	10800037 	ldwio	r2,0(r2)
 400b3f4:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 400b3f8:	e0bff817 	ldw	r2,-32(fp)
 400b3fc:	10800e17 	ldw	r2,56(r2)
 400b400:	10001126 	beq	r2,zero,400b448 <altera_avalon_mailbox_simple_rx_isr+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b404:	0005303a 	rdctl	r2,status
 400b408:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b40c:	e0fffa17 	ldw	r3,-24(fp)
 400b410:	00bfff84 	movi	r2,-2
 400b414:	1884703a 	and	r2,r3,r2
 400b418:	1001703a 	wrctl	status,r2
  
  return context;
 400b41c:	e0bffa17 	ldw	r2,-24(fp)
    {
        cpu_sr = alt_irq_disable_all();
 400b420:	e0bff915 	stw	r2,-28(fp)
        (dev->rx_cb)(inbox);
 400b424:	e0bff817 	ldw	r2,-32(fp)
 400b428:	10800e17 	ldw	r2,56(r2)
 400b42c:	e0fffc04 	addi	r3,fp,-16
 400b430:	1809883a 	mov	r4,r3
 400b434:	103ee83a 	callr	r2
 400b438:	e0bff917 	ldw	r2,-28(fp)
 400b43c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b440:	e0bffb17 	ldw	r2,-20(fp)
 400b444:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 400b448:	0001883a 	nop
 400b44c:	e037883a 	mov	sp,fp
 400b450:	dfc00117 	ldw	ra,4(sp)
 400b454:	df000017 	ldw	fp,0(sp)
 400b458:	dec00204 	addi	sp,sp,8
 400b45c:	f800283a 	ret

0400b460 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 400b460:	defffb04 	addi	sp,sp,-20
 400b464:	dfc00415 	stw	ra,16(sp)
 400b468:	df000315 	stw	fp,12(sp)
 400b46c:	df000304 	addi	fp,sp,12
 400b470:	e13ffd15 	stw	r4,-12(fp)
 400b474:	e17ffe15 	stw	r5,-8(fp)
 400b478:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 400b47c:	d1600c04 	addi	r5,gp,-32720
 400b480:	e13ffd17 	ldw	r4,-12(fp)
 400b484:	400cf200 	call	400cf20 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 400b488:	e0ffff17 	ldw	r3,-4(fp)
 400b48c:	e0bffd17 	ldw	r2,-12(fp)
 400b490:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 400b494:	e0fffe17 	ldw	r3,-8(fp)
 400b498:	e0bffd17 	ldw	r2,-12(fp)
 400b49c:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 400b4a0:	e0bffd17 	ldw	r2,-12(fp)
 400b4a4:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 400b4a8:	e0bffd17 	ldw	r2,-12(fp)
 400b4ac:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 400b4b0:	e0bffd17 	ldw	r2,-12(fp)
 400b4b4:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 400b4b8:	e13ffd17 	ldw	r4,-12(fp)
 400b4bc:	400b1700 	call	400b170 <altera_avalon_mailbox_identify>
}
 400b4c0:	0001883a 	nop
 400b4c4:	e037883a 	mov	sp,fp
 400b4c8:	dfc00117 	ldw	ra,4(sp)
 400b4cc:	df000017 	ldw	fp,0(sp)
 400b4d0:	dec00204 	addi	sp,sp,8
 400b4d4:	f800283a 	ret

0400b4d8 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 400b4d8:	defff904 	addi	sp,sp,-28
 400b4dc:	dfc00615 	stw	ra,24(sp)
 400b4e0:	df000515 	stw	fp,20(sp)
 400b4e4:	df000504 	addi	fp,sp,20
 400b4e8:	e13ffd15 	stw	r4,-12(fp)
 400b4ec:	e17ffe15 	stw	r5,-8(fp)
 400b4f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 400b4f4:	d1600c04 	addi	r5,gp,-32720
 400b4f8:	e13ffd17 	ldw	r4,-12(fp)
 400b4fc:	400d0840 	call	400d084 <alt_find_dev>
 400b500:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 400b504:	e0bffb17 	ldw	r2,-20(fp)
 400b508:	1000021e 	bne	r2,zero,400b514 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 400b50c:	0005883a 	mov	r2,zero
 400b510:	00005d06 	br	400b688 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400b514:	e0bffb17 	ldw	r2,-20(fp)
 400b518:	10800a17 	ldw	r2,40(r2)
 400b51c:	10800304 	addi	r2,r2,12
 400b520:	10800037 	ldwio	r2,0(r2)
 400b524:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 400b528:	e0bffb17 	ldw	r2,-20(fp)
 400b52c:	10800f17 	ldw	r2,60(r2)
 400b530:	1000081e 	bne	r2,zero,400b554 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400b534:	e0bffb17 	ldw	r2,-20(fp)
 400b538:	10800a17 	ldw	r2,40(r2)
 400b53c:	10800304 	addi	r2,r2,12
 400b540:	1009883a 	mov	r4,r2
 400b544:	e0fffc17 	ldw	r3,-16(fp)
 400b548:	00bfff44 	movi	r2,-3
 400b54c:	1884703a 	and	r2,r3,r2
 400b550:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 400b554:	e0bffb17 	ldw	r2,-20(fp)
 400b558:	10800f17 	ldw	r2,60(r2)
 400b55c:	10800058 	cmpnei	r2,r2,1
 400b560:	1000081e 	bne	r2,zero,400b584 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 400b564:	e0bffb17 	ldw	r2,-20(fp)
 400b568:	10800a17 	ldw	r2,40(r2)
 400b56c:	10800304 	addi	r2,r2,12
 400b570:	1009883a 	mov	r4,r2
 400b574:	e0fffc17 	ldw	r3,-16(fp)
 400b578:	00bfff84 	movi	r2,-2
 400b57c:	1884703a 	and	r2,r3,r2
 400b580:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 400b584:	e0bffb17 	ldw	r2,-20(fp)
 400b588:	10800b17 	ldw	r2,44(r2)
 400b58c:	10bfffd8 	cmpnei	r2,r2,-1
 400b590:	1000021e 	bne	r2,zero,400b59c <altera_avalon_mailbox_open+0xc4>
        return dev;
 400b594:	e0bffb17 	ldw	r2,-20(fp)
 400b598:	00003b06 	br	400b688 <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 400b59c:	e0bffe17 	ldw	r2,-8(fp)
 400b5a0:	1000041e 	bne	r2,zero,400b5b4 <altera_avalon_mailbox_open+0xdc>
 400b5a4:	e0bfff17 	ldw	r2,-4(fp)
 400b5a8:	1000021e 	bne	r2,zero,400b5b4 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 400b5ac:	e0bffb17 	ldw	r2,-20(fp)
 400b5b0:	00003506 	br	400b688 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400b5b4:	e0bffb17 	ldw	r2,-20(fp)
 400b5b8:	10800f17 	ldw	r2,60(r2)
 400b5bc:	1000021e 	bne	r2,zero,400b5c8 <altera_avalon_mailbox_open+0xf0>
 400b5c0:	e0bfff17 	ldw	r2,-4(fp)
 400b5c4:	1000061e 	bne	r2,zero,400b5e0 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400b5c8:	e0bffb17 	ldw	r2,-20(fp)
 400b5cc:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 400b5d0:	10800058 	cmpnei	r2,r2,1
 400b5d4:	1000041e 	bne	r2,zero,400b5e8 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 400b5d8:	e0bffe17 	ldw	r2,-8(fp)
 400b5dc:	10000226 	beq	r2,zero,400b5e8 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 400b5e0:	0005883a 	mov	r2,zero
 400b5e4:	00002806 	br	400b688 <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 400b5e8:	e0bffb17 	ldw	r2,-20(fp)
 400b5ec:	e0fffe17 	ldw	r3,-8(fp)
 400b5f0:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 400b5f4:	e0bffb17 	ldw	r2,-20(fp)
 400b5f8:	e0ffff17 	ldw	r3,-4(fp)
 400b5fc:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 400b600:	e0bffb17 	ldw	r2,-20(fp)
 400b604:	10800f17 	ldw	r2,60(r2)
 400b608:	1000071e 	bne	r2,zero,400b628 <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
 400b60c:	e0bffb17 	ldw	r2,-20(fp)
 400b610:	10800b17 	ldw	r2,44(r2)
 400b614:	01810074 	movhi	r6,1025
 400b618:	31ac9e04 	addi	r6,r6,-19848
 400b61c:	e17ffb17 	ldw	r5,-20(fp)
 400b620:	1009883a 	mov	r4,r2
 400b624:	400d2880 	call	400d288 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 400b628:	e0bffb17 	ldw	r2,-20(fp)
 400b62c:	10800f17 	ldw	r2,60(r2)
 400b630:	10800058 	cmpnei	r2,r2,1
 400b634:	1000131e 	bne	r2,zero,400b684 <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
 400b638:	e0bffb17 	ldw	r2,-20(fp)
 400b63c:	10800b17 	ldw	r2,44(r2)
 400b640:	01810074 	movhi	r6,1025
 400b644:	31aced04 	addi	r6,r6,-19532
 400b648:	e17ffb17 	ldw	r5,-20(fp)
 400b64c:	1009883a 	mov	r4,r2
 400b650:	400d2880 	call	400d288 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400b654:	e0bffb17 	ldw	r2,-20(fp)
 400b658:	10800a17 	ldw	r2,40(r2)
 400b65c:	10800304 	addi	r2,r2,12
 400b660:	10800037 	ldwio	r2,0(r2)
 400b664:	10800054 	ori	r2,r2,1
 400b668:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400b66c:	e0bffb17 	ldw	r2,-20(fp)
 400b670:	10800a17 	ldw	r2,40(r2)
 400b674:	10800304 	addi	r2,r2,12
 400b678:	1007883a 	mov	r3,r2
 400b67c:	e0bffc17 	ldw	r2,-16(fp)
 400b680:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 400b684:	e0bffb17 	ldw	r2,-20(fp)
}
 400b688:	e037883a 	mov	sp,fp
 400b68c:	dfc00117 	ldw	ra,4(sp)
 400b690:	df000017 	ldw	fp,0(sp)
 400b694:	dec00204 	addi	sp,sp,8
 400b698:	f800283a 	ret

0400b69c <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 400b69c:	defffc04 	addi	sp,sp,-16
 400b6a0:	dfc00315 	stw	ra,12(sp)
 400b6a4:	df000215 	stw	fp,8(sp)
 400b6a8:	df000204 	addi	fp,sp,8
 400b6ac:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 400b6b0:	e0bfff17 	ldw	r2,-4(fp)
 400b6b4:	10003526 	beq	r2,zero,400b78c <altera_avalon_mailbox_close+0xf0>
 400b6b8:	e0bfff17 	ldw	r2,-4(fp)
 400b6bc:	10800b17 	ldw	r2,44(r2)
 400b6c0:	10bfffe0 	cmpeqi	r2,r2,-1
 400b6c4:	1000311e 	bne	r2,zero,400b78c <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 400b6c8:	e0bfff17 	ldw	r2,-4(fp)
 400b6cc:	10800f17 	ldw	r2,60(r2)
 400b6d0:	10000e1e 	bne	r2,zero,400b70c <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400b6d4:	e0bfff17 	ldw	r2,-4(fp)
 400b6d8:	10800a17 	ldw	r2,40(r2)
 400b6dc:	10800304 	addi	r2,r2,12
 400b6e0:	10800037 	ldwio	r2,0(r2)
 400b6e4:	1007883a 	mov	r3,r2
 400b6e8:	00bfff44 	movi	r2,-3
 400b6ec:	1884703a 	and	r2,r3,r2
 400b6f0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400b6f4:	e0bfff17 	ldw	r2,-4(fp)
 400b6f8:	10800a17 	ldw	r2,40(r2)
 400b6fc:	10800304 	addi	r2,r2,12
 400b700:	1007883a 	mov	r3,r2
 400b704:	e0bffe17 	ldw	r2,-8(fp)
 400b708:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 400b70c:	e0bfff17 	ldw	r2,-4(fp)
 400b710:	10800f17 	ldw	r2,60(r2)
 400b714:	10800058 	cmpnei	r2,r2,1
 400b718:	10000e1e 	bne	r2,zero,400b754 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 400b71c:	e0bfff17 	ldw	r2,-4(fp)
 400b720:	10800a17 	ldw	r2,40(r2)
 400b724:	10800304 	addi	r2,r2,12
 400b728:	10800037 	ldwio	r2,0(r2)
 400b72c:	1007883a 	mov	r3,r2
 400b730:	00bfff84 	movi	r2,-2
 400b734:	1884703a 	and	r2,r3,r2
 400b738:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400b73c:	e0bfff17 	ldw	r2,-4(fp)
 400b740:	10800a17 	ldw	r2,40(r2)
 400b744:	10800304 	addi	r2,r2,12
 400b748:	1007883a 	mov	r3,r2
 400b74c:	e0bffe17 	ldw	r2,-8(fp)
 400b750:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 400b754:	e0bfff17 	ldw	r2,-4(fp)
 400b758:	10800b17 	ldw	r2,44(r2)
 400b75c:	10bfffe0 	cmpeqi	r2,r2,-1
 400b760:	1000061e 	bne	r2,zero,400b77c <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
 400b764:	e0bfff17 	ldw	r2,-4(fp)
 400b768:	10800b17 	ldw	r2,44(r2)
 400b76c:	000d883a 	mov	r6,zero
 400b770:	e17fff17 	ldw	r5,-4(fp)
 400b774:	1009883a 	mov	r4,r2
 400b778:	400d2880 	call	400d288 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 400b77c:	e0bfff17 	ldw	r2,-4(fp)
 400b780:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 400b784:	e0bfff17 	ldw	r2,-4(fp)
 400b788:	10000e15 	stw	zero,56(r2)
    }
}
 400b78c:	0001883a 	nop
 400b790:	e037883a 	mov	sp,fp
 400b794:	dfc00117 	ldw	ra,4(sp)
 400b798:	df000017 	ldw	fp,0(sp)
 400b79c:	dec00204 	addi	sp,sp,8
 400b7a0:	f800283a 	ret

0400b7a4 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 400b7a4:	defffd04 	addi	sp,sp,-12
 400b7a8:	df000215 	stw	fp,8(sp)
 400b7ac:	df000204 	addi	fp,sp,8
 400b7b0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 400b7b4:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 400b7b8:	e0bfff17 	ldw	r2,-4(fp)
 400b7bc:	10800a17 	ldw	r2,40(r2)
 400b7c0:	10800204 	addi	r2,r2,8
 400b7c4:	10800037 	ldwio	r2,0(r2)
 400b7c8:	108000cc 	andi	r2,r2,3
 400b7cc:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 400b7d0:	e0bfff17 	ldw	r2,-4(fp)
 400b7d4:	10800f17 	ldw	r2,60(r2)
 400b7d8:	1000041e 	bne	r2,zero,400b7ec <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 400b7dc:	e0bffe17 	ldw	r2,-8(fp)
 400b7e0:	1080008c 	andi	r2,r2,2
 400b7e4:	1004d07a 	srli	r2,r2,1
 400b7e8:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 400b7ec:	e0bfff17 	ldw	r2,-4(fp)
 400b7f0:	10800f17 	ldw	r2,60(r2)
 400b7f4:	10800058 	cmpnei	r2,r2,1
 400b7f8:	1000031e 	bne	r2,zero,400b808 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 400b7fc:	e0bffe17 	ldw	r2,-8(fp)
 400b800:	1080004c 	andi	r2,r2,1
 400b804:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 400b808:	e0bffe17 	ldw	r2,-8(fp)
}
 400b80c:	e037883a 	mov	sp,fp
 400b810:	df000017 	ldw	fp,0(sp)
 400b814:	dec00104 	addi	sp,sp,4
 400b818:	f800283a 	ret

0400b81c <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 400b81c:	defff704 	addi	sp,sp,-36
 400b820:	dfc00815 	stw	ra,32(sp)
 400b824:	df000715 	stw	fp,28(sp)
 400b828:	df000704 	addi	fp,sp,28
 400b82c:	e13ffc15 	stw	r4,-16(fp)
 400b830:	e17ffd15 	stw	r5,-12(fp)
 400b834:	e1bffe15 	stw	r6,-8(fp)
 400b838:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 400b83c:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400b840:	e0bffc17 	ldw	r2,-16(fp)
 400b844:	10801103 	ldbu	r2,68(r2)
 400b848:	10803fcc 	andi	r2,r2,255
 400b84c:	1000061e 	bne	r2,zero,400b868 <altera_avalon_mailbox_send+0x4c>
 400b850:	e0bffc17 	ldw	r2,-16(fp)
 400b854:	10800a17 	ldw	r2,40(r2)
 400b858:	10800204 	addi	r2,r2,8
 400b85c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 400b860:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 400b864:	10000226 	beq	r2,zero,400b870 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 400b868:	00bfffc4 	movi	r2,-1
 400b86c:	00003a06 	br	400b958 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 400b870:	e0bffc17 	ldw	r2,-16(fp)
 400b874:	e0fffd17 	ldw	r3,-12(fp)
 400b878:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 400b87c:	e0bffc17 	ldw	r2,-16(fp)
 400b880:	00c00044 	movi	r3,1
 400b884:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 400b888:	e0bffc17 	ldw	r2,-16(fp)
 400b88c:	10800b17 	ldw	r2,44(r2)
 400b890:	10bfffe0 	cmpeqi	r2,r2,-1
 400b894:	1000031e 	bne	r2,zero,400b8a4 <altera_avalon_mailbox_send+0x88>
 400b898:	e0bfff17 	ldw	r2,-4(fp)
 400b89c:	10800058 	cmpnei	r2,r2,1
 400b8a0:	1000201e 	bne	r2,zero,400b924 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 400b8a4:	e0bffe17 	ldw	r2,-8(fp)
 400b8a8:	1000061e 	bne	r2,zero,400b8c4 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400b8ac:	e13ffc17 	ldw	r4,-16(fp)
 400b8b0:	400b7a40 	call	400b7a4 <altera_avalon_mailbox_status>
 400b8b4:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 400b8b8:	e0bffb17 	ldw	r2,-20(fp)
 400b8bc:	103ffb1e 	bne	r2,zero,400b8ac <__ram_exceptions_end+0xfbfeb664>
 400b8c0:	00000e06 	br	400b8fc <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 400b8c4:	e13ffc17 	ldw	r4,-16(fp)
 400b8c8:	400b7a40 	call	400b7a4 <altera_avalon_mailbox_status>
 400b8cc:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 400b8d0:	e0bffe17 	ldw	r2,-8(fp)
 400b8d4:	10bfffc4 	addi	r2,r2,-1
 400b8d8:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 400b8dc:	e0bffb17 	ldw	r2,-20(fp)
 400b8e0:	10000226 	beq	r2,zero,400b8ec <altera_avalon_mailbox_send+0xd0>
 400b8e4:	e0bffe17 	ldw	r2,-8(fp)
 400b8e8:	103ff61e 	bne	r2,zero,400b8c4 <__ram_exceptions_end+0xfbfeb67c>
            if (timeout == 0)
 400b8ec:	e0bffe17 	ldw	r2,-8(fp)
 400b8f0:	1000021e 	bne	r2,zero,400b8fc <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 400b8f4:	00bff084 	movi	r2,-62
 400b8f8:	00001706 	br	400b958 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 400b8fc:	e17ffd17 	ldw	r5,-12(fp)
 400b900:	e13ffc17 	ldw	r4,-16(fp)
 400b904:	400b2000 	call	400b200 <altera_avalon_mailbox_post>
 400b908:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 400b90c:	e0bffc17 	ldw	r2,-16(fp)
 400b910:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 400b914:	e0bffc17 	ldw	r2,-16(fp)
 400b918:	10001105 	stb	zero,68(r2)
        return status;
 400b91c:	e0bff917 	ldw	r2,-28(fp)
 400b920:	00000d06 	br	400b958 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 400b924:	e0bffc17 	ldw	r2,-16(fp)
 400b928:	10800a17 	ldw	r2,40(r2)
 400b92c:	10800304 	addi	r2,r2,12
 400b930:	10800037 	ldwio	r2,0(r2)
 400b934:	10800094 	ori	r2,r2,2
 400b938:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400b93c:	e0bffc17 	ldw	r2,-16(fp)
 400b940:	10800a17 	ldw	r2,40(r2)
 400b944:	10800304 	addi	r2,r2,12
 400b948:	1007883a 	mov	r3,r2
 400b94c:	e0bffa17 	ldw	r2,-24(fp)
 400b950:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 400b954:	0005883a 	mov	r2,zero
}
 400b958:	e037883a 	mov	sp,fp
 400b95c:	dfc00117 	ldw	ra,4(sp)
 400b960:	df000017 	ldw	fp,0(sp)
 400b964:	dec00204 	addi	sp,sp,8
 400b968:	f800283a 	ret

0400b96c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 400b96c:	defff904 	addi	sp,sp,-28
 400b970:	dfc00615 	stw	ra,24(sp)
 400b974:	df000515 	stw	fp,20(sp)
 400b978:	df000504 	addi	fp,sp,20
 400b97c:	e13ffd15 	stw	r4,-12(fp)
 400b980:	e17ffe15 	stw	r5,-8(fp)
 400b984:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 400b988:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 400b98c:	e0bffd17 	ldw	r2,-12(fp)
 400b990:	10003a26 	beq	r2,zero,400ba7c <altera_avalon_mailbox_retrieve_poll+0x110>
 400b994:	e0bffe17 	ldw	r2,-8(fp)
 400b998:	10003826 	beq	r2,zero,400ba7c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400b99c:	e0bffd17 	ldw	r2,-12(fp)
 400b9a0:	10800a17 	ldw	r2,40(r2)
 400b9a4:	10800304 	addi	r2,r2,12
 400b9a8:	10800037 	ldwio	r2,0(r2)
 400b9ac:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 400b9b0:	e0bffd17 	ldw	r2,-12(fp)
 400b9b4:	10800a17 	ldw	r2,40(r2)
 400b9b8:	10800304 	addi	r2,r2,12
 400b9bc:	1009883a 	mov	r4,r2
 400b9c0:	e0fffc17 	ldw	r3,-16(fp)
 400b9c4:	00bfff84 	movi	r2,-2
 400b9c8:	1884703a 	and	r2,r3,r2
 400b9cc:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 400b9d0:	e0bfff17 	ldw	r2,-4(fp)
 400b9d4:	1000061e 	bne	r2,zero,400b9f0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 400b9d8:	e13ffd17 	ldw	r4,-12(fp)
 400b9dc:	400b7a40 	call	400b7a4 <altera_avalon_mailbox_status>
 400b9e0:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 400b9e4:	e0bffb17 	ldw	r2,-20(fp)
 400b9e8:	103ffb26 	beq	r2,zero,400b9d8 <__ram_exceptions_end+0xfbfeb790>
 400b9ec:	00000a06 	br	400ba18 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 400b9f0:	e13ffd17 	ldw	r4,-12(fp)
 400b9f4:	400b7a40 	call	400b7a4 <altera_avalon_mailbox_status>
 400b9f8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 400b9fc:	e0bfff17 	ldw	r2,-4(fp)
 400ba00:	10bfffc4 	addi	r2,r2,-1
 400ba04:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 400ba08:	e0bffb17 	ldw	r2,-20(fp)
 400ba0c:	1000021e 	bne	r2,zero,400ba18 <altera_avalon_mailbox_retrieve_poll+0xac>
 400ba10:	e0bfff17 	ldw	r2,-4(fp)
 400ba14:	103ff61e 	bne	r2,zero,400b9f0 <__ram_exceptions_end+0xfbfeb7a8>
        }

        /* if timeout, status remain 0 */
        if (status)
 400ba18:	e0bffb17 	ldw	r2,-20(fp)
 400ba1c:	10000d26 	beq	r2,zero,400ba54 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 400ba20:	e0bffe17 	ldw	r2,-8(fp)
 400ba24:	10800104 	addi	r2,r2,4
 400ba28:	e0fffd17 	ldw	r3,-12(fp)
 400ba2c:	18c00a17 	ldw	r3,40(r3)
 400ba30:	18c00104 	addi	r3,r3,4
 400ba34:	18c00037 	ldwio	r3,0(r3)
 400ba38:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 400ba3c:	e0bffd17 	ldw	r2,-12(fp)
 400ba40:	10800a17 	ldw	r2,40(r2)
 400ba44:	10800037 	ldwio	r2,0(r2)
 400ba48:	1007883a 	mov	r3,r2
 400ba4c:	e0bffe17 	ldw	r2,-8(fp)
 400ba50:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 400ba54:	e0bffd17 	ldw	r2,-12(fp)
 400ba58:	10800a17 	ldw	r2,40(r2)
 400ba5c:	10800304 	addi	r2,r2,12
 400ba60:	1007883a 	mov	r3,r2
 400ba64:	e0bffc17 	ldw	r2,-16(fp)
 400ba68:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 400ba6c:	e0bffb17 	ldw	r2,-20(fp)
 400ba70:	10000226 	beq	r2,zero,400ba7c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 400ba74:	0005883a 	mov	r2,zero
 400ba78:	00000606 	br	400ba94 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 400ba7c:	e0bffe17 	ldw	r2,-8(fp)
 400ba80:	10800104 	addi	r2,r2,4
 400ba84:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 400ba88:	e0bffe17 	ldw	r2,-8(fp)
 400ba8c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 400ba90:	00bffa84 	movi	r2,-22
}
 400ba94:	e037883a 	mov	sp,fp
 400ba98:	dfc00117 	ldw	ra,4(sp)
 400ba9c:	df000017 	ldw	fp,0(sp)
 400baa0:	dec00204 	addi	sp,sp,8
 400baa4:	f800283a 	ret

0400baa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400baa8:	defffe04 	addi	sp,sp,-8
 400baac:	dfc00115 	stw	ra,4(sp)
 400bab0:	df000015 	stw	fp,0(sp)
 400bab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400bab8:	d0a00a17 	ldw	r2,-32728(gp)
 400babc:	10000326 	beq	r2,zero,400bacc <alt_get_errno+0x24>
 400bac0:	d0a00a17 	ldw	r2,-32728(gp)
 400bac4:	103ee83a 	callr	r2
 400bac8:	00000106 	br	400bad0 <alt_get_errno+0x28>
 400bacc:	d0a6e404 	addi	r2,gp,-25712
}
 400bad0:	e037883a 	mov	sp,fp
 400bad4:	dfc00117 	ldw	ra,4(sp)
 400bad8:	df000017 	ldw	fp,0(sp)
 400badc:	dec00204 	addi	sp,sp,8
 400bae0:	f800283a 	ret

0400bae4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400bae4:	defff904 	addi	sp,sp,-28
 400bae8:	df000615 	stw	fp,24(sp)
 400baec:	df000604 	addi	fp,sp,24
 400baf0:	e13ffe15 	stw	r4,-8(fp)
 400baf4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 400baf8:	00bfffc4 	movi	r2,-1
 400bafc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 400bb00:	0005317a 	rdctl	r2,cpuid
 400bb04:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 400bb08:	e0bffb17 	ldw	r2,-20(fp)
 400bb0c:	1006943a 	slli	r3,r2,16
 400bb10:	e0bfff17 	ldw	r2,-4(fp)
 400bb14:	1884b03a 	or	r2,r3,r2
 400bb18:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 400bb1c:	e0bffe17 	ldw	r2,-8(fp)
 400bb20:	10800317 	ldw	r2,12(r2)
 400bb24:	e0fffc17 	ldw	r3,-16(fp)
 400bb28:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400bb2c:	e0bffe17 	ldw	r2,-8(fp)
 400bb30:	10800317 	ldw	r2,12(r2)
 400bb34:	10800037 	ldwio	r2,0(r2)
 400bb38:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 400bb3c:	e0fffd17 	ldw	r3,-12(fp)
 400bb40:	e0bffc17 	ldw	r2,-16(fp)
 400bb44:	1880011e 	bne	r3,r2,400bb4c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 400bb48:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 400bb4c:	e0bffa17 	ldw	r2,-24(fp)
}
 400bb50:	e037883a 	mov	sp,fp
 400bb54:	df000017 	ldw	fp,0(sp)
 400bb58:	dec00104 	addi	sp,sp,4
 400bb5c:	f800283a 	ret

0400bb60 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 400bb60:	defffc04 	addi	sp,sp,-16
 400bb64:	dfc00315 	stw	ra,12(sp)
 400bb68:	df000215 	stw	fp,8(sp)
 400bb6c:	df000204 	addi	fp,sp,8
 400bb70:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 400bb74:	d1600e04 	addi	r5,gp,-32712
 400bb78:	e13fff17 	ldw	r4,-4(fp)
 400bb7c:	400d0840 	call	400d084 <alt_find_dev>
 400bb80:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 400bb84:	e0bffe17 	ldw	r2,-8(fp)
 400bb88:	1000041e 	bne	r2,zero,400bb9c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 400bb8c:	400baa80 	call	400baa8 <alt_get_errno>
 400bb90:	1007883a 	mov	r3,r2
 400bb94:	008004c4 	movi	r2,19
 400bb98:	18800015 	stw	r2,0(r3)
  }

  return dev;
 400bb9c:	e0bffe17 	ldw	r2,-8(fp)
}
 400bba0:	e037883a 	mov	sp,fp
 400bba4:	dfc00117 	ldw	ra,4(sp)
 400bba8:	df000017 	ldw	fp,0(sp)
 400bbac:	dec00204 	addi	sp,sp,8
 400bbb0:	f800283a 	ret

0400bbb4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 400bbb4:	defffe04 	addi	sp,sp,-8
 400bbb8:	df000115 	stw	fp,4(sp)
 400bbbc:	df000104 	addi	fp,sp,4
 400bbc0:	e13fff15 	stw	r4,-4(fp)
  return;
 400bbc4:	0001883a 	nop
}
 400bbc8:	e037883a 	mov	sp,fp
 400bbcc:	df000017 	ldw	fp,0(sp)
 400bbd0:	dec00104 	addi	sp,sp,4
 400bbd4:	f800283a 	ret

0400bbd8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 400bbd8:	defffc04 	addi	sp,sp,-16
 400bbdc:	dfc00315 	stw	ra,12(sp)
 400bbe0:	df000215 	stw	fp,8(sp)
 400bbe4:	df000204 	addi	fp,sp,8
 400bbe8:	e13ffe15 	stw	r4,-8(fp)
 400bbec:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 400bbf0:	0001883a 	nop
 400bbf4:	e17fff17 	ldw	r5,-4(fp)
 400bbf8:	e13ffe17 	ldw	r4,-8(fp)
 400bbfc:	400bae40 	call	400bae4 <alt_mutex_trylock>
 400bc00:	103ffc1e 	bne	r2,zero,400bbf4 <__ram_exceptions_end+0xfbfeb9ac>
}
 400bc04:	0001883a 	nop
 400bc08:	e037883a 	mov	sp,fp
 400bc0c:	dfc00117 	ldw	ra,4(sp)
 400bc10:	df000017 	ldw	fp,0(sp)
 400bc14:	dec00204 	addi	sp,sp,8
 400bc18:	f800283a 	ret

0400bc1c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 400bc1c:	defffa04 	addi	sp,sp,-24
 400bc20:	dfc00515 	stw	ra,20(sp)
 400bc24:	df000415 	stw	fp,16(sp)
 400bc28:	df000404 	addi	fp,sp,16
 400bc2c:	e13ffd15 	stw	r4,-12(fp)
 400bc30:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 400bc34:	e17ffe17 	ldw	r5,-8(fp)
 400bc38:	e13ffd17 	ldw	r4,-12(fp)
 400bc3c:	400bae40 	call	400bae4 <alt_mutex_trylock>
 400bc40:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 400bc44:	e0bffc17 	ldw	r2,-16(fp)
}
 400bc48:	e037883a 	mov	sp,fp
 400bc4c:	dfc00117 	ldw	ra,4(sp)
 400bc50:	df000017 	ldw	fp,0(sp)
 400bc54:	dec00204 	addi	sp,sp,8
 400bc58:	f800283a 	ret

0400bc5c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 400bc5c:	defffd04 	addi	sp,sp,-12
 400bc60:	df000215 	stw	fp,8(sp)
 400bc64:	df000204 	addi	fp,sp,8
 400bc68:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 400bc6c:	0005317a 	rdctl	r2,cpuid
 400bc70:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 400bc74:	e0bfff17 	ldw	r2,-4(fp)
 400bc78:	10800317 	ldw	r2,12(r2)
 400bc7c:	10800104 	addi	r2,r2,4
 400bc80:	00c00044 	movi	r3,1
 400bc84:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 400bc88:	e0bfff17 	ldw	r2,-4(fp)
 400bc8c:	10800317 	ldw	r2,12(r2)
 400bc90:	e0fffe17 	ldw	r3,-8(fp)
 400bc94:	1806943a 	slli	r3,r3,16
 400bc98:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 400bc9c:	0001883a 	nop
 400bca0:	e037883a 	mov	sp,fp
 400bca4:	df000017 	ldw	fp,0(sp)
 400bca8:	dec00104 	addi	sp,sp,4
 400bcac:	f800283a 	ret

0400bcb0 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 400bcb0:	defff904 	addi	sp,sp,-28
 400bcb4:	df000615 	stw	fp,24(sp)
 400bcb8:	df000604 	addi	fp,sp,24
 400bcbc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 400bcc0:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 400bcc4:	0005317a 	rdctl	r2,cpuid
 400bcc8:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400bccc:	e0bfff17 	ldw	r2,-4(fp)
 400bcd0:	10800317 	ldw	r2,12(r2)
 400bcd4:	10800037 	ldwio	r2,0(r2)
 400bcd8:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 400bcdc:	e0bffc17 	ldw	r2,-16(fp)
 400bce0:	1004d43a 	srli	r2,r2,16
 400bce4:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 400bce8:	e0fffd17 	ldw	r3,-12(fp)
 400bcec:	e0bffb17 	ldw	r2,-20(fp)
 400bcf0:	1880071e 	bne	r3,r2,400bd10 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 400bcf4:	e0bffc17 	ldw	r2,-16(fp)
 400bcf8:	10bfffcc 	andi	r2,r2,65535
 400bcfc:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 400bd00:	e0bffe17 	ldw	r2,-8(fp)
 400bd04:	10000226 	beq	r2,zero,400bd10 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 400bd08:	00800044 	movi	r2,1
 400bd0c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 400bd10:	e0bffa17 	ldw	r2,-24(fp)
}
 400bd14:	e037883a 	mov	sp,fp
 400bd18:	df000017 	ldw	fp,0(sp)
 400bd1c:	dec00104 	addi	sp,sp,4
 400bd20:	f800283a 	ret

0400bd24 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 400bd24:	defffc04 	addi	sp,sp,-16
 400bd28:	df000315 	stw	fp,12(sp)
 400bd2c:	df000304 	addi	fp,sp,12
 400bd30:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 400bd34:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 400bd38:	e0bfff17 	ldw	r2,-4(fp)
 400bd3c:	10800317 	ldw	r2,12(r2)
 400bd40:	10800104 	addi	r2,r2,4
 400bd44:	10800037 	ldwio	r2,0(r2)
 400bd48:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 400bd4c:	e0bffe17 	ldw	r2,-8(fp)
 400bd50:	1080004c 	andi	r2,r2,1
 400bd54:	10000226 	beq	r2,zero,400bd60 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 400bd58:	00800044 	movi	r2,1
 400bd5c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 400bd60:	e0bffd17 	ldw	r2,-12(fp)
}
 400bd64:	e037883a 	mov	sp,fp
 400bd68:	df000017 	ldw	fp,0(sp)
 400bd6c:	dec00104 	addi	sp,sp,4
 400bd70:	f800283a 	ret

0400bd74 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 400bd74:	defffc04 	addi	sp,sp,-16
 400bd78:	dfc00315 	stw	ra,12(sp)
 400bd7c:	df000215 	stw	fp,8(sp)
 400bd80:	df000204 	addi	fp,sp,8
 400bd84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 400bd88:	d1600704 	addi	r5,gp,-32740
 400bd8c:	e13fff17 	ldw	r4,-4(fp)
 400bd90:	400d0840 	call	400d084 <alt_find_dev>
 400bd94:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 400bd98:	e0bffe17 	ldw	r2,-8(fp)
}
 400bd9c:	e037883a 	mov	sp,fp
 400bda0:	dfc00117 	ldw	ra,4(sp)
 400bda4:	df000017 	ldw	fp,0(sp)
 400bda8:	dec00204 	addi	sp,sp,8
 400bdac:	f800283a 	ret

0400bdb0 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 400bdb0:	defffd04 	addi	sp,sp,-12
 400bdb4:	df000215 	stw	fp,8(sp)
 400bdb8:	df000204 	addi	fp,sp,8
 400bdbc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 400bdc0:	e0bfff17 	ldw	r2,-4(fp)
 400bdc4:	10800a17 	ldw	r2,40(r2)
 400bdc8:	10800037 	ldwio	r2,0(r2)
 400bdcc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 400bdd0:	e0bffe17 	ldw	r2,-8(fp)
 400bdd4:	10800054 	ori	r2,r2,1
 400bdd8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 400bddc:	e0bfff17 	ldw	r2,-4(fp)
 400bde0:	10800a17 	ldw	r2,40(r2)
 400bde4:	1007883a 	mov	r3,r2
 400bde8:	e0bffe17 	ldw	r2,-8(fp)
 400bdec:	18800035 	stwio	r2,0(r3)
}
 400bdf0:	0001883a 	nop
 400bdf4:	e037883a 	mov	sp,fp
 400bdf8:	df000017 	ldw	fp,0(sp)
 400bdfc:	dec00104 	addi	sp,sp,4
 400be00:	f800283a 	ret

0400be04 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 400be04:	defffd04 	addi	sp,sp,-12
 400be08:	df000215 	stw	fp,8(sp)
 400be0c:	df000204 	addi	fp,sp,8
 400be10:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 400be14:	e0bfff17 	ldw	r2,-4(fp)
 400be18:	10800a17 	ldw	r2,40(r2)
 400be1c:	10800037 	ldwio	r2,0(r2)
 400be20:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 400be24:	e0fffe17 	ldw	r3,-8(fp)
 400be28:	00bfff84 	movi	r2,-2
 400be2c:	1884703a 	and	r2,r3,r2
 400be30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 400be34:	e0bfff17 	ldw	r2,-4(fp)
 400be38:	10800a17 	ldw	r2,40(r2)
 400be3c:	1007883a 	mov	r3,r2
 400be40:	e0bffe17 	ldw	r2,-8(fp)
 400be44:	18800035 	stwio	r2,0(r3)
}
 400be48:	0001883a 	nop
 400be4c:	e037883a 	mov	sp,fp
 400be50:	df000017 	ldw	fp,0(sp)
 400be54:	dec00104 	addi	sp,sp,4
 400be58:	f800283a 	ret

0400be5c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 400be5c:	defffd04 	addi	sp,sp,-12
 400be60:	df000215 	stw	fp,8(sp)
 400be64:	df000204 	addi	fp,sp,8
 400be68:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 400be6c:	e0bfff17 	ldw	r2,-4(fp)
 400be70:	10800a17 	ldw	r2,40(r2)
 400be74:	10800037 	ldwio	r2,0(r2)
 400be78:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 400be7c:	e0bffe17 	ldw	r2,-8(fp)
 400be80:	10800094 	ori	r2,r2,2
 400be84:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 400be88:	e0bfff17 	ldw	r2,-4(fp)
 400be8c:	10800a17 	ldw	r2,40(r2)
 400be90:	1007883a 	mov	r3,r2
 400be94:	e0bffe17 	ldw	r2,-8(fp)
 400be98:	18800035 	stwio	r2,0(r3)
}
 400be9c:	0001883a 	nop
 400bea0:	e037883a 	mov	sp,fp
 400bea4:	df000017 	ldw	fp,0(sp)
 400bea8:	dec00104 	addi	sp,sp,4
 400beac:	f800283a 	ret

0400beb0 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 400beb0:	defffd04 	addi	sp,sp,-12
 400beb4:	df000215 	stw	fp,8(sp)
 400beb8:	df000204 	addi	fp,sp,8
 400bebc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 400bec0:	e0bfff17 	ldw	r2,-4(fp)
 400bec4:	10800a17 	ldw	r2,40(r2)
 400bec8:	10800037 	ldwio	r2,0(r2)
 400becc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 400bed0:	e0fffe17 	ldw	r3,-8(fp)
 400bed4:	00bfff44 	movi	r2,-3
 400bed8:	1884703a 	and	r2,r3,r2
 400bedc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 400bee0:	e0bfff17 	ldw	r2,-4(fp)
 400bee4:	10800a17 	ldw	r2,40(r2)
 400bee8:	1007883a 	mov	r3,r2
 400beec:	e0bffe17 	ldw	r2,-8(fp)
 400bef0:	18800035 	stwio	r2,0(r3)
}
 400bef4:	0001883a 	nop
 400bef8:	e037883a 	mov	sp,fp
 400befc:	df000017 	ldw	fp,0(sp)
 400bf00:	dec00104 	addi	sp,sp,4
 400bf04:	f800283a 	ret

0400bf08 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 400bf08:	defffd04 	addi	sp,sp,-12
 400bf0c:	df000215 	stw	fp,8(sp)
 400bf10:	df000204 	addi	fp,sp,8
 400bf14:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 400bf18:	e0bfff17 	ldw	r2,-4(fp)
 400bf1c:	10800a17 	ldw	r2,40(r2)
 400bf20:	10800037 	ldwio	r2,0(r2)
 400bf24:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 400bf28:	e0bffe17 	ldw	r2,-8(fp)
 400bf2c:	1080400c 	andi	r2,r2,256
 400bf30:	1004c03a 	cmpne	r2,r2,zero
 400bf34:	10803fcc 	andi	r2,r2,255
}
 400bf38:	e037883a 	mov	sp,fp
 400bf3c:	df000017 	ldw	fp,0(sp)
 400bf40:	dec00104 	addi	sp,sp,4
 400bf44:	f800283a 	ret

0400bf48 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 400bf48:	defffd04 	addi	sp,sp,-12
 400bf4c:	df000215 	stw	fp,8(sp)
 400bf50:	df000204 	addi	fp,sp,8
 400bf54:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 400bf58:	e0bfff17 	ldw	r2,-4(fp)
 400bf5c:	10800a17 	ldw	r2,40(r2)
 400bf60:	10800037 	ldwio	r2,0(r2)
 400bf64:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 400bf68:	e0bffe17 	ldw	r2,-8(fp)
 400bf6c:	1080800c 	andi	r2,r2,512
 400bf70:	1004c03a 	cmpne	r2,r2,zero
 400bf74:	10803fcc 	andi	r2,r2,255
}
 400bf78:	e037883a 	mov	sp,fp
 400bf7c:	df000017 	ldw	fp,0(sp)
 400bf80:	dec00104 	addi	sp,sp,4
 400bf84:	f800283a 	ret

0400bf88 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 400bf88:	defffd04 	addi	sp,sp,-12
 400bf8c:	df000215 	stw	fp,8(sp)
 400bf90:	df000204 	addi	fp,sp,8
 400bf94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 400bf98:	e0bfff17 	ldw	r2,-4(fp)
 400bf9c:	10800a17 	ldw	r2,40(r2)
 400bfa0:	10800037 	ldwio	r2,0(r2)
 400bfa4:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 400bfa8:	e0bffe17 	ldw	r2,-8(fp)
 400bfac:	10800114 	ori	r2,r2,4
 400bfb0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 400bfb4:	e0bffe17 	ldw	r2,-8(fp)
 400bfb8:	10800214 	ori	r2,r2,8
 400bfbc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 400bfc0:	e0bfff17 	ldw	r2,-4(fp)
 400bfc4:	10800a17 	ldw	r2,40(r2)
 400bfc8:	1007883a 	mov	r3,r2
 400bfcc:	e0bffe17 	ldw	r2,-8(fp)
 400bfd0:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 400bfd4:	e0fffe17 	ldw	r3,-8(fp)
 400bfd8:	00bffec4 	movi	r2,-5
 400bfdc:	1884703a 	and	r2,r3,r2
 400bfe0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 400bfe4:	e0fffe17 	ldw	r3,-8(fp)
 400bfe8:	00bffdc4 	movi	r2,-9
 400bfec:	1884703a 	and	r2,r3,r2
 400bff0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 400bff4:	e0bfff17 	ldw	r2,-4(fp)
 400bff8:	10800a17 	ldw	r2,40(r2)
 400bffc:	1007883a 	mov	r3,r2
 400c000:	e0bffe17 	ldw	r2,-8(fp)
 400c004:	18800035 	stwio	r2,0(r3)
}
 400c008:	0001883a 	nop
 400c00c:	e037883a 	mov	sp,fp
 400c010:	df000017 	ldw	fp,0(sp)
 400c014:	dec00104 	addi	sp,sp,4
 400c018:	f800283a 	ret

0400c01c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 400c01c:	defffc04 	addi	sp,sp,-16
 400c020:	df000315 	stw	fp,12(sp)
 400c024:	df000304 	addi	fp,sp,12
 400c028:	e13ffe15 	stw	r4,-8(fp)
 400c02c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 400c030:	e0bffe17 	ldw	r2,-8(fp)
 400c034:	10800a17 	ldw	r2,40(r2)
 400c038:	10800104 	addi	r2,r2,4
 400c03c:	10800037 	ldwio	r2,0(r2)
 400c040:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 400c044:	e0bfff17 	ldw	r2,-4(fp)
 400c048:	1000041e 	bne	r2,zero,400c05c <alt_up_audio_read_fifo_avail+0x40>
 400c04c:	e0bffd17 	ldw	r2,-12(fp)
 400c050:	10bfc00c 	andi	r2,r2,65280
 400c054:	1004d23a 	srli	r2,r2,8
 400c058:	00000206 	br	400c064 <alt_up_audio_read_fifo_avail+0x48>
 400c05c:	e0bffd17 	ldw	r2,-12(fp)
 400c060:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 400c064:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 400c068:	e0bffd17 	ldw	r2,-12(fp)
}
 400c06c:	e037883a 	mov	sp,fp
 400c070:	df000017 	ldw	fp,0(sp)
 400c074:	dec00104 	addi	sp,sp,4
 400c078:	f800283a 	ret

0400c07c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 400c07c:	defffa04 	addi	sp,sp,-24
 400c080:	dfc00515 	stw	ra,20(sp)
 400c084:	df000415 	stw	fp,16(sp)
 400c088:	df000404 	addi	fp,sp,16
 400c08c:	e13ffd15 	stw	r4,-12(fp)
 400c090:	e17ffe15 	stw	r5,-8(fp)
 400c094:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 400c098:	01400044 	movi	r5,1
 400c09c:	e13ffd17 	ldw	r4,-12(fp)
 400c0a0:	400c01c0 	call	400c01c <alt_up_audio_read_fifo_avail>
 400c0a4:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 400c0a8:	e0bffc17 	ldw	r2,-16(fp)
 400c0ac:	10801868 	cmpgeui	r2,r2,97
 400c0b0:	1000021e 	bne	r2,zero,400c0bc <alt_up_audio_record_r+0x40>
		return 0;
 400c0b4:	0005883a 	mov	r2,zero
 400c0b8:	00000506 	br	400c0d0 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 400c0bc:	01c00044 	movi	r7,1
 400c0c0:	e1bfff17 	ldw	r6,-4(fp)
 400c0c4:	e17ffe17 	ldw	r5,-8(fp)
 400c0c8:	e13ffd17 	ldw	r4,-12(fp)
 400c0cc:	400c27c0 	call	400c27c <alt_up_audio_read_fifo>
}
 400c0d0:	e037883a 	mov	sp,fp
 400c0d4:	dfc00117 	ldw	ra,4(sp)
 400c0d8:	df000017 	ldw	fp,0(sp)
 400c0dc:	dec00204 	addi	sp,sp,8
 400c0e0:	f800283a 	ret

0400c0e4 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 400c0e4:	defffa04 	addi	sp,sp,-24
 400c0e8:	dfc00515 	stw	ra,20(sp)
 400c0ec:	df000415 	stw	fp,16(sp)
 400c0f0:	df000404 	addi	fp,sp,16
 400c0f4:	e13ffd15 	stw	r4,-12(fp)
 400c0f8:	e17ffe15 	stw	r5,-8(fp)
 400c0fc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 400c100:	000b883a 	mov	r5,zero
 400c104:	e13ffd17 	ldw	r4,-12(fp)
 400c108:	400c01c0 	call	400c01c <alt_up_audio_read_fifo_avail>
 400c10c:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 400c110:	e0bffc17 	ldw	r2,-16(fp)
 400c114:	10801868 	cmpgeui	r2,r2,97
 400c118:	1000021e 	bne	r2,zero,400c124 <alt_up_audio_record_l+0x40>
		return 0;
 400c11c:	0005883a 	mov	r2,zero
 400c120:	00000506 	br	400c138 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 400c124:	000f883a 	mov	r7,zero
 400c128:	e1bfff17 	ldw	r6,-4(fp)
 400c12c:	e17ffe17 	ldw	r5,-8(fp)
 400c130:	e13ffd17 	ldw	r4,-12(fp)
 400c134:	400c27c0 	call	400c27c <alt_up_audio_read_fifo>
}
 400c138:	e037883a 	mov	sp,fp
 400c13c:	dfc00117 	ldw	ra,4(sp)
 400c140:	df000017 	ldw	fp,0(sp)
 400c144:	dec00204 	addi	sp,sp,8
 400c148:	f800283a 	ret

0400c14c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 400c14c:	defffc04 	addi	sp,sp,-16
 400c150:	df000315 	stw	fp,12(sp)
 400c154:	df000304 	addi	fp,sp,12
 400c158:	e13ffe15 	stw	r4,-8(fp)
 400c15c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 400c160:	e0bffe17 	ldw	r2,-8(fp)
 400c164:	10800a17 	ldw	r2,40(r2)
 400c168:	10800104 	addi	r2,r2,4
 400c16c:	10800037 	ldwio	r2,0(r2)
 400c170:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 400c174:	e0bfff17 	ldw	r2,-4(fp)
 400c178:	1000031e 	bne	r2,zero,400c188 <alt_up_audio_write_fifo_space+0x3c>
 400c17c:	e0bffd17 	ldw	r2,-12(fp)
 400c180:	1004d63a 	srli	r2,r2,24
 400c184:	00000306 	br	400c194 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 400c188:	e0bffd17 	ldw	r2,-12(fp)
 400c18c:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 400c190:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 400c194:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 400c198:	e0bffd17 	ldw	r2,-12(fp)
}
 400c19c:	e037883a 	mov	sp,fp
 400c1a0:	df000017 	ldw	fp,0(sp)
 400c1a4:	dec00104 	addi	sp,sp,4
 400c1a8:	f800283a 	ret

0400c1ac <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 400c1ac:	defffa04 	addi	sp,sp,-24
 400c1b0:	dfc00515 	stw	ra,20(sp)
 400c1b4:	df000415 	stw	fp,16(sp)
 400c1b8:	df000404 	addi	fp,sp,16
 400c1bc:	e13ffd15 	stw	r4,-12(fp)
 400c1c0:	e17ffe15 	stw	r5,-8(fp)
 400c1c4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 400c1c8:	01400044 	movi	r5,1
 400c1cc:	e13ffd17 	ldw	r4,-12(fp)
 400c1d0:	400c14c0 	call	400c14c <alt_up_audio_write_fifo_space>
 400c1d4:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 400c1d8:	e0bffc17 	ldw	r2,-16(fp)
 400c1dc:	10801868 	cmpgeui	r2,r2,97
 400c1e0:	1000021e 	bne	r2,zero,400c1ec <alt_up_audio_play_r+0x40>
		return 0;
 400c1e4:	0005883a 	mov	r2,zero
 400c1e8:	00000506 	br	400c200 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 400c1ec:	01c00044 	movi	r7,1
 400c1f0:	e1bfff17 	ldw	r6,-4(fp)
 400c1f4:	e17ffe17 	ldw	r5,-8(fp)
 400c1f8:	e13ffd17 	ldw	r4,-12(fp)
 400c1fc:	400c35c0 	call	400c35c <alt_up_audio_write_fifo>
}
 400c200:	e037883a 	mov	sp,fp
 400c204:	dfc00117 	ldw	ra,4(sp)
 400c208:	df000017 	ldw	fp,0(sp)
 400c20c:	dec00204 	addi	sp,sp,8
 400c210:	f800283a 	ret

0400c214 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 400c214:	defffa04 	addi	sp,sp,-24
 400c218:	dfc00515 	stw	ra,20(sp)
 400c21c:	df000415 	stw	fp,16(sp)
 400c220:	df000404 	addi	fp,sp,16
 400c224:	e13ffd15 	stw	r4,-12(fp)
 400c228:	e17ffe15 	stw	r5,-8(fp)
 400c22c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 400c230:	000b883a 	mov	r5,zero
 400c234:	e13ffd17 	ldw	r4,-12(fp)
 400c238:	400c14c0 	call	400c14c <alt_up_audio_write_fifo_space>
 400c23c:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 400c240:	e0bffc17 	ldw	r2,-16(fp)
 400c244:	10801868 	cmpgeui	r2,r2,97
 400c248:	1000021e 	bne	r2,zero,400c254 <alt_up_audio_play_l+0x40>
		return 0;
 400c24c:	0005883a 	mov	r2,zero
 400c250:	00000506 	br	400c268 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 400c254:	000f883a 	mov	r7,zero
 400c258:	e1bfff17 	ldw	r6,-4(fp)
 400c25c:	e17ffe17 	ldw	r5,-8(fp)
 400c260:	e13ffd17 	ldw	r4,-12(fp)
 400c264:	400c35c0 	call	400c35c <alt_up_audio_write_fifo>
}
 400c268:	e037883a 	mov	sp,fp
 400c26c:	dfc00117 	ldw	ra,4(sp)
 400c270:	df000017 	ldw	fp,0(sp)
 400c274:	dec00204 	addi	sp,sp,8
 400c278:	f800283a 	ret

0400c27c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 400c27c:	defff904 	addi	sp,sp,-28
 400c280:	df000615 	stw	fp,24(sp)
 400c284:	df000604 	addi	fp,sp,24
 400c288:	e13ffc15 	stw	r4,-16(fp)
 400c28c:	e17ffd15 	stw	r5,-12(fp)
 400c290:	e1bffe15 	stw	r6,-8(fp)
 400c294:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 400c298:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 400c29c:	00002506 	br	400c334 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 400c2a0:	e0bffc17 	ldw	r2,-16(fp)
 400c2a4:	10800a17 	ldw	r2,40(r2)
 400c2a8:	10800104 	addi	r2,r2,4
 400c2ac:	10800037 	ldwio	r2,0(r2)
 400c2b0:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 400c2b4:	e0bfff17 	ldw	r2,-4(fp)
 400c2b8:	1000041e 	bne	r2,zero,400c2cc <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 400c2bc:	e0bffb17 	ldw	r2,-20(fp)
 400c2c0:	10bfc00c 	andi	r2,r2,65280
			:
 400c2c4:	1004d23a 	srli	r2,r2,8
 400c2c8:	00000206 	br	400c2d4 <alt_up_audio_read_fifo+0x58>
 400c2cc:	e0bffb17 	ldw	r2,-20(fp)
 400c2d0:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 400c2d4:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 400c2d8:	e0bffb17 	ldw	r2,-20(fp)
 400c2dc:	10001926 	beq	r2,zero,400c344 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 400c2e0:	e0bffa17 	ldw	r2,-24(fp)
 400c2e4:	1085883a 	add	r2,r2,r2
 400c2e8:	1085883a 	add	r2,r2,r2
 400c2ec:	1007883a 	mov	r3,r2
 400c2f0:	e0bffd17 	ldw	r2,-12(fp)
 400c2f4:	10c5883a 	add	r2,r2,r3
 400c2f8:	e0ffff17 	ldw	r3,-4(fp)
 400c2fc:	1800051e 	bne	r3,zero,400c314 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 400c300:	e0fffc17 	ldw	r3,-16(fp)
 400c304:	18c00a17 	ldw	r3,40(r3)
 400c308:	18c00204 	addi	r3,r3,8
 400c30c:	18c00037 	ldwio	r3,0(r3)
 400c310:	00000406 	br	400c324 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 400c314:	e0fffc17 	ldw	r3,-16(fp)
 400c318:	18c00a17 	ldw	r3,40(r3)
 400c31c:	18c00304 	addi	r3,r3,12
 400c320:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 400c324:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 400c328:	e0bffa17 	ldw	r2,-24(fp)
 400c32c:	10800044 	addi	r2,r2,1
 400c330:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 400c334:	e0fffa17 	ldw	r3,-24(fp)
 400c338:	e0bffe17 	ldw	r2,-8(fp)
 400c33c:	18bfd816 	blt	r3,r2,400c2a0 <__ram_exceptions_end+0xfbfec058>
 400c340:	00000106 	br	400c348 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 400c344:	0001883a 	nop
		}
	}
	return count;
 400c348:	e0bffa17 	ldw	r2,-24(fp)
}
 400c34c:	e037883a 	mov	sp,fp
 400c350:	df000017 	ldw	fp,0(sp)
 400c354:	dec00104 	addi	sp,sp,4
 400c358:	f800283a 	ret

0400c35c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 400c35c:	defff904 	addi	sp,sp,-28
 400c360:	df000615 	stw	fp,24(sp)
 400c364:	df000604 	addi	fp,sp,24
 400c368:	e13ffc15 	stw	r4,-16(fp)
 400c36c:	e17ffd15 	stw	r5,-12(fp)
 400c370:	e1bffe15 	stw	r6,-8(fp)
 400c374:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 400c378:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 400c37c:	00002f06 	br	400c43c <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 400c380:	e0bffc17 	ldw	r2,-16(fp)
 400c384:	10800a17 	ldw	r2,40(r2)
 400c388:	10800104 	addi	r2,r2,4
 400c38c:	10800037 	ldwio	r2,0(r2)
 400c390:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 400c394:	e0bfff17 	ldw	r2,-4(fp)
 400c398:	1000031e 	bne	r2,zero,400c3a8 <alt_up_audio_write_fifo+0x4c>
 400c39c:	e0bffb17 	ldw	r2,-20(fp)
 400c3a0:	1004d63a 	srli	r2,r2,24
 400c3a4:	00000306 	br	400c3b4 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 400c3a8:	e0bffb17 	ldw	r2,-20(fp)
 400c3ac:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 400c3b0:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 400c3b4:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 400c3b8:	e0bffb17 	ldw	r2,-20(fp)
 400c3bc:	10002326 	beq	r2,zero,400c44c <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 400c3c0:	e0bfff17 	ldw	r2,-4(fp)
 400c3c4:	10000f1e 	bne	r2,zero,400c404 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 400c3c8:	e0bffc17 	ldw	r2,-16(fp)
 400c3cc:	10800a17 	ldw	r2,40(r2)
 400c3d0:	10800204 	addi	r2,r2,8
 400c3d4:	1009883a 	mov	r4,r2
 400c3d8:	e0bffa17 	ldw	r2,-24(fp)
 400c3dc:	10c00044 	addi	r3,r2,1
 400c3e0:	e0fffa15 	stw	r3,-24(fp)
 400c3e4:	1085883a 	add	r2,r2,r2
 400c3e8:	1085883a 	add	r2,r2,r2
 400c3ec:	1007883a 	mov	r3,r2
 400c3f0:	e0bffd17 	ldw	r2,-12(fp)
 400c3f4:	10c5883a 	add	r2,r2,r3
 400c3f8:	10800017 	ldw	r2,0(r2)
 400c3fc:	20800035 	stwio	r2,0(r4)
 400c400:	00000e06 	br	400c43c <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 400c404:	e0bffc17 	ldw	r2,-16(fp)
 400c408:	10800a17 	ldw	r2,40(r2)
 400c40c:	10800304 	addi	r2,r2,12
 400c410:	1009883a 	mov	r4,r2
 400c414:	e0bffa17 	ldw	r2,-24(fp)
 400c418:	10c00044 	addi	r3,r2,1
 400c41c:	e0fffa15 	stw	r3,-24(fp)
 400c420:	1085883a 	add	r2,r2,r2
 400c424:	1085883a 	add	r2,r2,r2
 400c428:	1007883a 	mov	r3,r2
 400c42c:	e0bffd17 	ldw	r2,-12(fp)
 400c430:	10c5883a 	add	r2,r2,r3
 400c434:	10800017 	ldw	r2,0(r2)
 400c438:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 400c43c:	e0fffa17 	ldw	r3,-24(fp)
 400c440:	e0bffe17 	ldw	r2,-8(fp)
 400c444:	18bfce16 	blt	r3,r2,400c380 <__ram_exceptions_end+0xfbfec138>
 400c448:	00000106 	br	400c450 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 400c44c:	0001883a 	nop
		}
	}
	return count;
 400c450:	e0bffa17 	ldw	r2,-24(fp)
}
 400c454:	e037883a 	mov	sp,fp
 400c458:	df000017 	ldw	fp,0(sp)
 400c45c:	dec00104 	addi	sp,sp,4
 400c460:	f800283a 	ret

0400c464 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 400c464:	defffd04 	addi	sp,sp,-12
 400c468:	df000215 	stw	fp,8(sp)
 400c46c:	df000204 	addi	fp,sp,8
 400c470:	e13ffe15 	stw	r4,-8(fp)
 400c474:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 400c478:	e0bfff17 	ldw	r2,-4(fp)
 400c47c:	1000051e 	bne	r2,zero,400c494 <alt_up_audio_read_fifo_head+0x30>
 400c480:	e0bffe17 	ldw	r2,-8(fp)
 400c484:	10800a17 	ldw	r2,40(r2)
 400c488:	10800204 	addi	r2,r2,8
 400c48c:	10800037 	ldwio	r2,0(r2)
 400c490:	00000406 	br	400c4a4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 400c494:	e0bffe17 	ldw	r2,-8(fp)
 400c498:	10800a17 	ldw	r2,40(r2)
 400c49c:	10800304 	addi	r2,r2,12
 400c4a0:	10800037 	ldwio	r2,0(r2)
}
 400c4a4:	e037883a 	mov	sp,fp
 400c4a8:	df000017 	ldw	fp,0(sp)
 400c4ac:	dec00104 	addi	sp,sp,4
 400c4b0:	f800283a 	ret

0400c4b4 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 400c4b4:	defffc04 	addi	sp,sp,-16
 400c4b8:	df000315 	stw	fp,12(sp)
 400c4bc:	df000304 	addi	fp,sp,12
 400c4c0:	e13ffd15 	stw	r4,-12(fp)
 400c4c4:	e17ffe15 	stw	r5,-8(fp)
 400c4c8:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 400c4cc:	e0bfff17 	ldw	r2,-4(fp)
 400c4d0:	1000071e 	bne	r2,zero,400c4f0 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 400c4d4:	e0bffd17 	ldw	r2,-12(fp)
 400c4d8:	10800a17 	ldw	r2,40(r2)
 400c4dc:	10800204 	addi	r2,r2,8
 400c4e0:	1007883a 	mov	r3,r2
 400c4e4:	e0bffe17 	ldw	r2,-8(fp)
 400c4e8:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 400c4ec:	00000606 	br	400c508 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 400c4f0:	e0bffd17 	ldw	r2,-12(fp)
 400c4f4:	10800a17 	ldw	r2,40(r2)
 400c4f8:	10800304 	addi	r2,r2,12
 400c4fc:	1007883a 	mov	r3,r2
 400c500:	e0bffe17 	ldw	r2,-8(fp)
 400c504:	18800035 	stwio	r2,0(r3)
}
 400c508:	0001883a 	nop
 400c50c:	e037883a 	mov	sp,fp
 400c510:	df000017 	ldw	fp,0(sp)
 400c514:	dec00104 	addi	sp,sp,4
 400c518:	f800283a 	ret

0400c51c <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 400c51c:	defffc04 	addi	sp,sp,-16
 400c520:	dfc00315 	stw	ra,12(sp)
 400c524:	df000215 	stw	fp,8(sp)
 400c528:	df000204 	addi	fp,sp,8
 400c52c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 400c530:	d1600704 	addi	r5,gp,-32740
 400c534:	e13fff17 	ldw	r4,-4(fp)
 400c538:	400d0840 	call	400d084 <alt_find_dev>
 400c53c:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 400c540:	e0bffe17 	ldw	r2,-8(fp)
 400c544:	10800a17 	ldw	r2,40(r2)
 400c548:	10800104 	addi	r2,r2,4
 400c54c:	10800037 	ldwio	r2,0(r2)
 400c550:	10803fec 	andhi	r2,r2,255
 400c554:	1005d43a 	srai	r2,r2,16
 400c558:	1007883a 	mov	r3,r2
 400c55c:	e0bffe17 	ldw	r2,-8(fp)
 400c560:	10c00b15 	stw	r3,44(r2)

  return dev;
 400c564:	e0bffe17 	ldw	r2,-8(fp)
}
 400c568:	e037883a 	mov	sp,fp
 400c56c:	dfc00117 	ldw	ra,4(sp)
 400c570:	df000017 	ldw	fp,0(sp)
 400c574:	dec00204 	addi	sp,sp,8
 400c578:	f800283a 	ret

0400c57c <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400c57c:	defffc04 	addi	sp,sp,-16
 400c580:	df000315 	stw	fp,12(sp)
 400c584:	df000304 	addi	fp,sp,12
 400c588:	e13ffd15 	stw	r4,-12(fp)
 400c58c:	e17ffe15 	stw	r5,-8(fp)
 400c590:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 400c594:	e0bffd17 	ldw	r2,-12(fp)
 400c598:	10800a17 	ldw	r2,40(r2)
 400c59c:	10800204 	addi	r2,r2,8
 400c5a0:	1007883a 	mov	r3,r2
 400c5a4:	e0bffe17 	ldw	r2,-8(fp)
 400c5a8:	10803fcc 	andi	r2,r2,255
 400c5ac:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 400c5b0:	e0bffd17 	ldw	r2,-12(fp)
 400c5b4:	10800a17 	ldw	r2,40(r2)
 400c5b8:	10800304 	addi	r2,r2,12
 400c5bc:	1007883a 	mov	r3,r2
 400c5c0:	e0bfff17 	ldw	r2,-4(fp)
 400c5c4:	10bfffcc 	andi	r2,r2,65535
 400c5c8:	18800035 	stwio	r2,0(r3)

	return 0;
 400c5cc:	0005883a 	mov	r2,zero
}
 400c5d0:	e037883a 	mov	sp,fp
 400c5d4:	df000017 	ldw	fp,0(sp)
 400c5d8:	dec00104 	addi	sp,sp,4
 400c5dc:	f800283a 	ret

0400c5e0 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 400c5e0:	defffb04 	addi	sp,sp,-20
 400c5e4:	dfc00415 	stw	ra,16(sp)
 400c5e8:	df000315 	stw	fp,12(sp)
 400c5ec:	df000304 	addi	fp,sp,12
 400c5f0:	e13ffd15 	stw	r4,-12(fp)
 400c5f4:	e17ffe15 	stw	r5,-8(fp)
 400c5f8:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 400c5fc:	e0bffd17 	ldw	r2,-12(fp)
 400c600:	10800a17 	ldw	r2,40(r2)
 400c604:	10800204 	addi	r2,r2,8
 400c608:	1007883a 	mov	r3,r2
 400c60c:	e0bffe17 	ldw	r2,-8(fp)
 400c610:	10803fcc 	andi	r2,r2,255
 400c614:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 400c618:	e0bffd17 	ldw	r2,-12(fp)
 400c61c:	10800a17 	ldw	r2,40(r2)
 400c620:	10800304 	addi	r2,r2,12
 400c624:	10800037 	ldwio	r2,0(r2)
 400c628:	1007883a 	mov	r3,r2
 400c62c:	e0bfff17 	ldw	r2,-4(fp)
 400c630:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 400c634:	e13ffd17 	ldw	r4,-12(fp)
 400c638:	400c7040 	call	400c704 <alt_up_av_config_read_acknowledge>
 400c63c:	10000226 	beq	r2,zero,400c648 <alt_up_av_config_read_data+0x68>
		return -1;
 400c640:	00bfffc4 	movi	r2,-1
 400c644:	00000106 	br	400c64c <alt_up_av_config_read_data+0x6c>

	return 0;
 400c648:	0005883a 	mov	r2,zero
}
 400c64c:	e037883a 	mov	sp,fp
 400c650:	dfc00117 	ldw	ra,4(sp)
 400c654:	df000017 	ldw	fp,0(sp)
 400c658:	dec00204 	addi	sp,sp,8
 400c65c:	f800283a 	ret

0400c660 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 400c660:	defffe04 	addi	sp,sp,-8
 400c664:	df000115 	stw	fp,4(sp)
 400c668:	df000104 	addi	fp,sp,4
 400c66c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 400c670:	e0bfff17 	ldw	r2,-4(fp)
 400c674:	10800a17 	ldw	r2,40(r2)
 400c678:	1007883a 	mov	r3,r2
 400c67c:	00800044 	movi	r2,1
 400c680:	18800025 	stbio	r2,0(r3)
	return 0;
 400c684:	0005883a 	mov	r2,zero
}
 400c688:	e037883a 	mov	sp,fp
 400c68c:	df000017 	ldw	fp,0(sp)
 400c690:	dec00104 	addi	sp,sp,4
 400c694:	f800283a 	ret

0400c698 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 400c698:	defffe04 	addi	sp,sp,-8
 400c69c:	df000115 	stw	fp,4(sp)
 400c6a0:	df000104 	addi	fp,sp,4
 400c6a4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 400c6a8:	e0bfff17 	ldw	r2,-4(fp)
 400c6ac:	10800a17 	ldw	r2,40(r2)
 400c6b0:	1007883a 	mov	r3,r2
 400c6b4:	00800084 	movi	r2,2
 400c6b8:	18800025 	stbio	r2,0(r3)
	return 0;
 400c6bc:	0005883a 	mov	r2,zero
}
 400c6c0:	e037883a 	mov	sp,fp
 400c6c4:	df000017 	ldw	fp,0(sp)
 400c6c8:	dec00104 	addi	sp,sp,4
 400c6cc:	f800283a 	ret

0400c6d0 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 400c6d0:	defffe04 	addi	sp,sp,-8
 400c6d4:	df000115 	stw	fp,4(sp)
 400c6d8:	df000104 	addi	fp,sp,4
 400c6dc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 400c6e0:	e0bfff17 	ldw	r2,-4(fp)
 400c6e4:	10800a17 	ldw	r2,40(r2)
 400c6e8:	0007883a 	mov	r3,zero
 400c6ec:	10c00025 	stbio	r3,0(r2)
	return 0;
 400c6f0:	0005883a 	mov	r2,zero
}
 400c6f4:	e037883a 	mov	sp,fp
 400c6f8:	df000017 	ldw	fp,0(sp)
 400c6fc:	dec00104 	addi	sp,sp,4
 400c700:	f800283a 	ret

0400c704 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 400c704:	defffe04 	addi	sp,sp,-8
 400c708:	df000115 	stw	fp,4(sp)
 400c70c:	df000104 	addi	fp,sp,4
 400c710:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 400c714:	e0bfff17 	ldw	r2,-4(fp)
 400c718:	10800a17 	ldw	r2,40(r2)
 400c71c:	10800104 	addi	r2,r2,4
 400c720:	10800037 	ldwio	r2,0(r2)
 400c724:	1080008c 	andi	r2,r2,2
 400c728:	1005d07a 	srai	r2,r2,1
 400c72c:	10000626 	beq	r2,zero,400c748 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 400c730:	e0bfff17 	ldw	r2,-4(fp)
 400c734:	10800a17 	ldw	r2,40(r2)
 400c738:	10800104 	addi	r2,r2,4
 400c73c:	10800037 	ldwio	r2,0(r2)
 400c740:	1080004c 	andi	r2,r2,1
 400c744:	00000106 	br	400c74c <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 400c748:	00bfffc4 	movi	r2,-1
}
 400c74c:	e037883a 	mov	sp,fp
 400c750:	df000017 	ldw	fp,0(sp)
 400c754:	dec00104 	addi	sp,sp,4
 400c758:	f800283a 	ret

0400c75c <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 400c75c:	defffe04 	addi	sp,sp,-8
 400c760:	df000115 	stw	fp,4(sp)
 400c764:	df000104 	addi	fp,sp,4
 400c768:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 400c76c:	e0bfff17 	ldw	r2,-4(fp)
 400c770:	10800a17 	ldw	r2,40(r2)
 400c774:	10800104 	addi	r2,r2,4
 400c778:	10800037 	ldwio	r2,0(r2)
 400c77c:	1080008c 	andi	r2,r2,2
 400c780:	1005d07a 	srai	r2,r2,1
}
 400c784:	e037883a 	mov	sp,fp
 400c788:	df000017 	ldw	fp,0(sp)
 400c78c:	dec00104 	addi	sp,sp,4
 400c790:	f800283a 	ret

0400c794 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400c794:	defffa04 	addi	sp,sp,-24
 400c798:	dfc00515 	stw	ra,20(sp)
 400c79c:	df000415 	stw	fp,16(sp)
 400c7a0:	df000404 	addi	fp,sp,16
 400c7a4:	e13ffd15 	stw	r4,-12(fp)
 400c7a8:	e17ffe15 	stw	r5,-8(fp)
 400c7ac:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 400c7b0:	e0bffd17 	ldw	r2,-12(fp)
 400c7b4:	10800b17 	ldw	r2,44(r2)
 400c7b8:	10800060 	cmpeqi	r2,r2,1
 400c7bc:	10000e1e 	bne	r2,zero,400c7f8 <alt_up_av_config_write_audio_cfg_register+0x64>
 400c7c0:	e0bffd17 	ldw	r2,-12(fp)
 400c7c4:	10800b17 	ldw	r2,44(r2)
 400c7c8:	108000a0 	cmpeqi	r2,r2,2
 400c7cc:	10000a1e 	bne	r2,zero,400c7f8 <alt_up_av_config_write_audio_cfg_register+0x64>
 400c7d0:	e0bffd17 	ldw	r2,-12(fp)
 400c7d4:	10800b17 	ldw	r2,44(r2)
 400c7d8:	108000e0 	cmpeqi	r2,r2,3
 400c7dc:	1000061e 	bne	r2,zero,400c7f8 <alt_up_av_config_write_audio_cfg_register+0x64>
 400c7e0:	e0bffd17 	ldw	r2,-12(fp)
 400c7e4:	10800b17 	ldw	r2,44(r2)
 400c7e8:	10800120 	cmpeqi	r2,r2,4
 400c7ec:	1000021e 	bne	r2,zero,400c7f8 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 400c7f0:	00bffa84 	movi	r2,-22
 400c7f4:	00000b06 	br	400c824 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 400c7f8:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 400c7fc:	e0bffd17 	ldw	r2,-12(fp)
 400c800:	10800a17 	ldw	r2,40(r2)
 400c804:	10800084 	addi	r2,r2,2
 400c808:	1007883a 	mov	r3,r2
 400c80c:	e0bffc17 	ldw	r2,-16(fp)
 400c810:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 400c814:	e1bfff17 	ldw	r6,-4(fp)
 400c818:	e17ffe17 	ldw	r5,-8(fp)
 400c81c:	e13ffd17 	ldw	r4,-12(fp)
 400c820:	400c57c0 	call	400c57c <alt_up_av_config_write_data>
}
 400c824:	e037883a 	mov	sp,fp
 400c828:	dfc00117 	ldw	ra,4(sp)
 400c82c:	df000017 	ldw	fp,0(sp)
 400c830:	dec00204 	addi	sp,sp,8
 400c834:	f800283a 	ret

0400c838 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 400c838:	defffa04 	addi	sp,sp,-24
 400c83c:	dfc00515 	stw	ra,20(sp)
 400c840:	df000415 	stw	fp,16(sp)
 400c844:	df000404 	addi	fp,sp,16
 400c848:	e13ffc15 	stw	r4,-16(fp)
 400c84c:	e17ffd15 	stw	r5,-12(fp)
 400c850:	e1bffe15 	stw	r6,-8(fp)
 400c854:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 400c858:	e0bffc17 	ldw	r2,-16(fp)
 400c85c:	10800b17 	ldw	r2,44(r2)
 400c860:	108000a0 	cmpeqi	r2,r2,2
 400c864:	10000a1e 	bne	r2,zero,400c890 <alt_up_av_config_read_video_cfg_register+0x58>
 400c868:	e0bffc17 	ldw	r2,-16(fp)
 400c86c:	10800b17 	ldw	r2,44(r2)
 400c870:	108000e0 	cmpeqi	r2,r2,3
 400c874:	1000061e 	bne	r2,zero,400c890 <alt_up_av_config_read_video_cfg_register+0x58>
 400c878:	e0bffc17 	ldw	r2,-16(fp)
 400c87c:	10800b17 	ldw	r2,44(r2)
 400c880:	10800120 	cmpeqi	r2,r2,4
 400c884:	1000021e 	bne	r2,zero,400c890 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 400c888:	00bffa84 	movi	r2,-22
 400c88c:	00001f06 	br	400c90c <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 400c890:	e0bffc17 	ldw	r2,-16(fp)
 400c894:	10800b17 	ldw	r2,44(r2)
 400c898:	108000a0 	cmpeqi	r2,r2,2
 400c89c:	1000041e 	bne	r2,zero,400c8b0 <alt_up_av_config_read_video_cfg_register+0x78>
 400c8a0:	e0bffc17 	ldw	r2,-16(fp)
 400c8a4:	10800b17 	ldw	r2,44(r2)
 400c8a8:	10800118 	cmpnei	r2,r2,4
 400c8ac:	1000051e 	bne	r2,zero,400c8c4 <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 400c8b0:	e0bfff17 	ldw	r2,-4(fp)
 400c8b4:	10800060 	cmpeqi	r2,r2,1
 400c8b8:	10000a1e 	bne	r2,zero,400c8e4 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 400c8bc:	00bffa84 	movi	r2,-22
 400c8c0:	00001206 	br	400c90c <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 400c8c4:	e0bfff17 	ldw	r2,-4(fp)
 400c8c8:	10800060 	cmpeqi	r2,r2,1
 400c8cc:	1000051e 	bne	r2,zero,400c8e4 <alt_up_av_config_read_video_cfg_register+0xac>
 400c8d0:	e0bfff17 	ldw	r2,-4(fp)
 400c8d4:	108000a0 	cmpeqi	r2,r2,2
 400c8d8:	1000021e 	bne	r2,zero,400c8e4 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 400c8dc:	00bffa84 	movi	r2,-22
 400c8e0:	00000a06 	br	400c90c <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 400c8e4:	e0bffc17 	ldw	r2,-16(fp)
 400c8e8:	10800a17 	ldw	r2,40(r2)
 400c8ec:	10800084 	addi	r2,r2,2
 400c8f0:	1007883a 	mov	r3,r2
 400c8f4:	e0bfff17 	ldw	r2,-4(fp)
 400c8f8:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 400c8fc:	e1bffe17 	ldw	r6,-8(fp)
 400c900:	e17ffd17 	ldw	r5,-12(fp)
 400c904:	e13ffc17 	ldw	r4,-16(fp)
 400c908:	400c5e00 	call	400c5e0 <alt_up_av_config_read_data>
}
 400c90c:	e037883a 	mov	sp,fp
 400c910:	dfc00117 	ldw	ra,4(sp)
 400c914:	df000017 	ldw	fp,0(sp)
 400c918:	dec00204 	addi	sp,sp,8
 400c91c:	f800283a 	ret

0400c920 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 400c920:	defffa04 	addi	sp,sp,-24
 400c924:	dfc00515 	stw	ra,20(sp)
 400c928:	df000415 	stw	fp,16(sp)
 400c92c:	df000404 	addi	fp,sp,16
 400c930:	e13ffc15 	stw	r4,-16(fp)
 400c934:	e17ffd15 	stw	r5,-12(fp)
 400c938:	e1bffe15 	stw	r6,-8(fp)
 400c93c:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 400c940:	e0bffc17 	ldw	r2,-16(fp)
 400c944:	10800b17 	ldw	r2,44(r2)
 400c948:	108000a0 	cmpeqi	r2,r2,2
 400c94c:	10000a1e 	bne	r2,zero,400c978 <alt_up_av_config_write_video_cfg_register+0x58>
 400c950:	e0bffc17 	ldw	r2,-16(fp)
 400c954:	10800b17 	ldw	r2,44(r2)
 400c958:	108000e0 	cmpeqi	r2,r2,3
 400c95c:	1000061e 	bne	r2,zero,400c978 <alt_up_av_config_write_video_cfg_register+0x58>
 400c960:	e0bffc17 	ldw	r2,-16(fp)
 400c964:	10800b17 	ldw	r2,44(r2)
 400c968:	10800120 	cmpeqi	r2,r2,4
 400c96c:	1000021e 	bne	r2,zero,400c978 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 400c970:	00bffa84 	movi	r2,-22
 400c974:	00001f06 	br	400c9f4 <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 400c978:	e0bffc17 	ldw	r2,-16(fp)
 400c97c:	10800b17 	ldw	r2,44(r2)
 400c980:	108000a0 	cmpeqi	r2,r2,2
 400c984:	1000041e 	bne	r2,zero,400c998 <alt_up_av_config_write_video_cfg_register+0x78>
 400c988:	e0bffc17 	ldw	r2,-16(fp)
 400c98c:	10800b17 	ldw	r2,44(r2)
 400c990:	10800118 	cmpnei	r2,r2,4
 400c994:	1000051e 	bne	r2,zero,400c9ac <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 400c998:	e0bfff17 	ldw	r2,-4(fp)
 400c99c:	10800060 	cmpeqi	r2,r2,1
 400c9a0:	10000a1e 	bne	r2,zero,400c9cc <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 400c9a4:	00bffa84 	movi	r2,-22
 400c9a8:	00001206 	br	400c9f4 <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 400c9ac:	e0bfff17 	ldw	r2,-4(fp)
 400c9b0:	10800060 	cmpeqi	r2,r2,1
 400c9b4:	1000051e 	bne	r2,zero,400c9cc <alt_up_av_config_write_video_cfg_register+0xac>
 400c9b8:	e0bfff17 	ldw	r2,-4(fp)
 400c9bc:	108000a0 	cmpeqi	r2,r2,2
 400c9c0:	1000021e 	bne	r2,zero,400c9cc <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 400c9c4:	00bffa84 	movi	r2,-22
 400c9c8:	00000a06 	br	400c9f4 <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 400c9cc:	e0bffc17 	ldw	r2,-16(fp)
 400c9d0:	10800a17 	ldw	r2,40(r2)
 400c9d4:	10800084 	addi	r2,r2,2
 400c9d8:	1007883a 	mov	r3,r2
 400c9dc:	e0bfff17 	ldw	r2,-4(fp)
 400c9e0:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 400c9e4:	e1bffe17 	ldw	r6,-8(fp)
 400c9e8:	e17ffd17 	ldw	r5,-12(fp)
 400c9ec:	e13ffc17 	ldw	r4,-16(fp)
 400c9f0:	400c57c0 	call	400c57c <alt_up_av_config_write_data>
}
 400c9f4:	e037883a 	mov	sp,fp
 400c9f8:	dfc00117 	ldw	ra,4(sp)
 400c9fc:	df000017 	ldw	fp,0(sp)
 400ca00:	dec00204 	addi	sp,sp,8
 400ca04:	f800283a 	ret

0400ca08 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 400ca08:	defffb04 	addi	sp,sp,-20
 400ca0c:	dfc00415 	stw	ra,16(sp)
 400ca10:	df000315 	stw	fp,12(sp)
 400ca14:	df000304 	addi	fp,sp,12
 400ca18:	e13ffd15 	stw	r4,-12(fp)
 400ca1c:	e17ffe15 	stw	r5,-8(fp)
 400ca20:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 400ca24:	e0bffd17 	ldw	r2,-12(fp)
 400ca28:	10800b17 	ldw	r2,44(r2)
 400ca2c:	10800220 	cmpeqi	r2,r2,8
 400ca30:	1000021e 	bne	r2,zero,400ca3c <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 400ca34:	00bffa84 	movi	r2,-22
 400ca38:	00000406 	br	400ca4c <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 400ca3c:	e1bfff17 	ldw	r6,-4(fp)
 400ca40:	e17ffe17 	ldw	r5,-8(fp)
 400ca44:	e13ffd17 	ldw	r4,-12(fp)
 400ca48:	400c5e00 	call	400c5e0 <alt_up_av_config_read_data>
}
 400ca4c:	e037883a 	mov	sp,fp
 400ca50:	dfc00117 	ldw	ra,4(sp)
 400ca54:	df000017 	ldw	fp,0(sp)
 400ca58:	dec00204 	addi	sp,sp,8
 400ca5c:	f800283a 	ret

0400ca60 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400ca60:	defffb04 	addi	sp,sp,-20
 400ca64:	dfc00415 	stw	ra,16(sp)
 400ca68:	df000315 	stw	fp,12(sp)
 400ca6c:	df000304 	addi	fp,sp,12
 400ca70:	e13ffd15 	stw	r4,-12(fp)
 400ca74:	e17ffe15 	stw	r5,-8(fp)
 400ca78:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 400ca7c:	e0bffd17 	ldw	r2,-12(fp)
 400ca80:	10800b17 	ldw	r2,44(r2)
 400ca84:	10800220 	cmpeqi	r2,r2,8
 400ca88:	1000021e 	bne	r2,zero,400ca94 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 400ca8c:	00bffa84 	movi	r2,-22
 400ca90:	00000406 	br	400caa4 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 400ca94:	e1bfff17 	ldw	r6,-4(fp)
 400ca98:	e17ffe17 	ldw	r5,-8(fp)
 400ca9c:	e13ffd17 	ldw	r4,-12(fp)
 400caa0:	400c57c0 	call	400c57c <alt_up_av_config_write_data>
}
 400caa4:	e037883a 	mov	sp,fp
 400caa8:	dfc00117 	ldw	ra,4(sp)
 400caac:	df000017 	ldw	fp,0(sp)
 400cab0:	dec00204 	addi	sp,sp,8
 400cab4:	f800283a 	ret

0400cab8 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 400cab8:	defffb04 	addi	sp,sp,-20
 400cabc:	dfc00415 	stw	ra,16(sp)
 400cac0:	df000315 	stw	fp,12(sp)
 400cac4:	df000304 	addi	fp,sp,12
 400cac8:	e13ffd15 	stw	r4,-12(fp)
 400cacc:	e17ffe15 	stw	r5,-8(fp)
 400cad0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 400cad4:	e0bffd17 	ldw	r2,-12(fp)
 400cad8:	10800b17 	ldw	r2,44(r2)
 400cadc:	10800260 	cmpeqi	r2,r2,9
 400cae0:	1000021e 	bne	r2,zero,400caec <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 400cae4:	00bffa84 	movi	r2,-22
 400cae8:	00000406 	br	400cafc <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 400caec:	e1bfff17 	ldw	r6,-4(fp)
 400caf0:	e17ffe17 	ldw	r5,-8(fp)
 400caf4:	e13ffd17 	ldw	r4,-12(fp)
 400caf8:	400c5e00 	call	400c5e0 <alt_up_av_config_read_data>
}
 400cafc:	e037883a 	mov	sp,fp
 400cb00:	dfc00117 	ldw	ra,4(sp)
 400cb04:	df000017 	ldw	fp,0(sp)
 400cb08:	dec00204 	addi	sp,sp,8
 400cb0c:	f800283a 	ret

0400cb10 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400cb10:	defffb04 	addi	sp,sp,-20
 400cb14:	dfc00415 	stw	ra,16(sp)
 400cb18:	df000315 	stw	fp,12(sp)
 400cb1c:	df000304 	addi	fp,sp,12
 400cb20:	e13ffd15 	stw	r4,-12(fp)
 400cb24:	e17ffe15 	stw	r5,-8(fp)
 400cb28:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 400cb2c:	e0bffd17 	ldw	r2,-12(fp)
 400cb30:	10800b17 	ldw	r2,44(r2)
 400cb34:	10800260 	cmpeqi	r2,r2,9
 400cb38:	1000021e 	bne	r2,zero,400cb44 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 400cb3c:	00bffa84 	movi	r2,-22
 400cb40:	00000406 	br	400cb54 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 400cb44:	e1bfff17 	ldw	r6,-4(fp)
 400cb48:	e17ffe17 	ldw	r5,-8(fp)
 400cb4c:	e13ffd17 	ldw	r4,-12(fp)
 400cb50:	400c57c0 	call	400c57c <alt_up_av_config_write_data>
}
 400cb54:	e037883a 	mov	sp,fp
 400cb58:	dfc00117 	ldw	ra,4(sp)
 400cb5c:	df000017 	ldw	fp,0(sp)
 400cb60:	dec00204 	addi	sp,sp,8
 400cb64:	f800283a 	ret

0400cb68 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 400cb68:	defffb04 	addi	sp,sp,-20
 400cb6c:	dfc00415 	stw	ra,16(sp)
 400cb70:	df000315 	stw	fp,12(sp)
 400cb74:	df000304 	addi	fp,sp,12
 400cb78:	e13ffd15 	stw	r4,-12(fp)
 400cb7c:	e17ffe15 	stw	r5,-8(fp)
 400cb80:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 400cb84:	e0bffd17 	ldw	r2,-12(fp)
 400cb88:	10800b17 	ldw	r2,44(r2)
 400cb8c:	108002a0 	cmpeqi	r2,r2,10
 400cb90:	1000021e 	bne	r2,zero,400cb9c <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 400cb94:	00bffa84 	movi	r2,-22
 400cb98:	00000406 	br	400cbac <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 400cb9c:	e1bfff17 	ldw	r6,-4(fp)
 400cba0:	e17ffe17 	ldw	r5,-8(fp)
 400cba4:	e13ffd17 	ldw	r4,-12(fp)
 400cba8:	400c5e00 	call	400c5e0 <alt_up_av_config_read_data>
}
 400cbac:	e037883a 	mov	sp,fp
 400cbb0:	dfc00117 	ldw	ra,4(sp)
 400cbb4:	df000017 	ldw	fp,0(sp)
 400cbb8:	dec00204 	addi	sp,sp,8
 400cbbc:	f800283a 	ret

0400cbc0 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400cbc0:	defffb04 	addi	sp,sp,-20
 400cbc4:	dfc00415 	stw	ra,16(sp)
 400cbc8:	df000315 	stw	fp,12(sp)
 400cbcc:	df000304 	addi	fp,sp,12
 400cbd0:	e13ffd15 	stw	r4,-12(fp)
 400cbd4:	e17ffe15 	stw	r5,-8(fp)
 400cbd8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 400cbdc:	e0bffd17 	ldw	r2,-12(fp)
 400cbe0:	10800b17 	ldw	r2,44(r2)
 400cbe4:	108002a0 	cmpeqi	r2,r2,10
 400cbe8:	1000021e 	bne	r2,zero,400cbf4 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 400cbec:	00bffa84 	movi	r2,-22
 400cbf0:	00000406 	br	400cc04 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 400cbf4:	e1bfff17 	ldw	r6,-4(fp)
 400cbf8:	e17ffe17 	ldw	r5,-8(fp)
 400cbfc:	e13ffd17 	ldw	r4,-12(fp)
 400cc00:	400c57c0 	call	400c57c <alt_up_av_config_write_data>
}
 400cc04:	e037883a 	mov	sp,fp
 400cc08:	dfc00117 	ldw	ra,4(sp)
 400cc0c:	df000017 	ldw	fp,0(sp)
 400cc10:	dec00204 	addi	sp,sp,8
 400cc14:	f800283a 	ret

0400cc18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400cc18:	defff504 	addi	sp,sp,-44
 400cc1c:	df000a15 	stw	fp,40(sp)
 400cc20:	df000a04 	addi	fp,sp,40
 400cc24:	e13ffc15 	stw	r4,-16(fp)
 400cc28:	e17ffd15 	stw	r5,-12(fp)
 400cc2c:	e1bffe15 	stw	r6,-8(fp)
 400cc30:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400cc34:	e03ff615 	stw	zero,-40(fp)
 400cc38:	d0a6e917 	ldw	r2,-25692(gp)
  
  if (alt_ticks_per_second ())
 400cc3c:	10003c26 	beq	r2,zero,400cd30 <alt_alarm_start+0x118>
  {
    if (alarm)
 400cc40:	e0bffc17 	ldw	r2,-16(fp)
 400cc44:	10003826 	beq	r2,zero,400cd28 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400cc48:	e0bffc17 	ldw	r2,-16(fp)
 400cc4c:	e0fffe17 	ldw	r3,-8(fp)
 400cc50:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400cc54:	e0bffc17 	ldw	r2,-16(fp)
 400cc58:	e0ffff17 	ldw	r3,-4(fp)
 400cc5c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cc60:	0005303a 	rdctl	r2,status
 400cc64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cc68:	e0fff917 	ldw	r3,-28(fp)
 400cc6c:	00bfff84 	movi	r2,-2
 400cc70:	1884703a 	and	r2,r3,r2
 400cc74:	1001703a 	wrctl	status,r2
  
  return context;
 400cc78:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400cc7c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400cc80:	d0a6ea17 	ldw	r2,-25688(gp)
      
      current_nticks = alt_nticks();
 400cc84:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400cc88:	e0fffd17 	ldw	r3,-12(fp)
 400cc8c:	e0bff617 	ldw	r2,-40(fp)
 400cc90:	1885883a 	add	r2,r3,r2
 400cc94:	10c00044 	addi	r3,r2,1
 400cc98:	e0bffc17 	ldw	r2,-16(fp)
 400cc9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400cca0:	e0bffc17 	ldw	r2,-16(fp)
 400cca4:	10c00217 	ldw	r3,8(r2)
 400cca8:	e0bff617 	ldw	r2,-40(fp)
 400ccac:	1880042e 	bgeu	r3,r2,400ccc0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400ccb0:	e0bffc17 	ldw	r2,-16(fp)
 400ccb4:	00c00044 	movi	r3,1
 400ccb8:	10c00405 	stb	r3,16(r2)
 400ccbc:	00000206 	br	400ccc8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400ccc0:	e0bffc17 	ldw	r2,-16(fp)
 400ccc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400ccc8:	e0bffc17 	ldw	r2,-16(fp)
 400cccc:	d0e01104 	addi	r3,gp,-32700
 400ccd0:	e0fffa15 	stw	r3,-24(fp)
 400ccd4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400ccd8:	e0bffb17 	ldw	r2,-20(fp)
 400ccdc:	e0fffa17 	ldw	r3,-24(fp)
 400cce0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400cce4:	e0bffa17 	ldw	r2,-24(fp)
 400cce8:	10c00017 	ldw	r3,0(r2)
 400ccec:	e0bffb17 	ldw	r2,-20(fp)
 400ccf0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400ccf4:	e0bffa17 	ldw	r2,-24(fp)
 400ccf8:	10800017 	ldw	r2,0(r2)
 400ccfc:	e0fffb17 	ldw	r3,-20(fp)
 400cd00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400cd04:	e0bffa17 	ldw	r2,-24(fp)
 400cd08:	e0fffb17 	ldw	r3,-20(fp)
 400cd0c:	10c00015 	stw	r3,0(r2)
 400cd10:	e0bff817 	ldw	r2,-32(fp)
 400cd14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cd18:	e0bff717 	ldw	r2,-36(fp)
 400cd1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400cd20:	0005883a 	mov	r2,zero
 400cd24:	00000306 	br	400cd34 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400cd28:	00bffa84 	movi	r2,-22
 400cd2c:	00000106 	br	400cd34 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400cd30:	00bfde84 	movi	r2,-134
  }
}
 400cd34:	e037883a 	mov	sp,fp
 400cd38:	df000017 	ldw	fp,0(sp)
 400cd3c:	dec00104 	addi	sp,sp,4
 400cd40:	f800283a 	ret

0400cd44 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400cd44:	defffa04 	addi	sp,sp,-24
 400cd48:	dfc00515 	stw	ra,20(sp)
 400cd4c:	df000415 	stw	fp,16(sp)
 400cd50:	df000404 	addi	fp,sp,16
 400cd54:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 400cd58:	008000c4 	movi	r2,3
 400cd5c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 400cd60:	e0fffd17 	ldw	r3,-12(fp)
 400cd64:	008003f4 	movhi	r2,15
 400cd68:	10909004 	addi	r2,r2,16960
 400cd6c:	1885383a 	mul	r2,r3,r2
 400cd70:	100b883a 	mov	r5,r2
 400cd74:	0100bef4 	movhi	r4,763
 400cd78:	213c2004 	addi	r4,r4,-3968
 400cd7c:	40031b00 	call	40031b0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400cd80:	100b883a 	mov	r5,r2
 400cd84:	01200034 	movhi	r4,32768
 400cd88:	213fffc4 	addi	r4,r4,-1
 400cd8c:	40031b00 	call	40031b0 <__udivsi3>
 400cd90:	100b883a 	mov	r5,r2
 400cd94:	e13fff17 	ldw	r4,-4(fp)
 400cd98:	40031b00 	call	40031b0 <__udivsi3>
 400cd9c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400cda0:	e0bffe17 	ldw	r2,-8(fp)
 400cda4:	10002a26 	beq	r2,zero,400ce50 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 400cda8:	e03ffc15 	stw	zero,-16(fp)
 400cdac:	00001706 	br	400ce0c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400cdb0:	00a00034 	movhi	r2,32768
 400cdb4:	10bfffc4 	addi	r2,r2,-1
 400cdb8:	10bfffc4 	addi	r2,r2,-1
 400cdbc:	103ffe1e 	bne	r2,zero,400cdb8 <__ram_exceptions_end+0xfbfecb70>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 400cdc0:	e0fffd17 	ldw	r3,-12(fp)
 400cdc4:	008003f4 	movhi	r2,15
 400cdc8:	10909004 	addi	r2,r2,16960
 400cdcc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400cdd0:	100b883a 	mov	r5,r2
 400cdd4:	0100bef4 	movhi	r4,763
 400cdd8:	213c2004 	addi	r4,r4,-3968
 400cddc:	40031b00 	call	40031b0 <__udivsi3>
 400cde0:	100b883a 	mov	r5,r2
 400cde4:	01200034 	movhi	r4,32768
 400cde8:	213fffc4 	addi	r4,r4,-1
 400cdec:	40031b00 	call	40031b0 <__udivsi3>
 400cdf0:	1007883a 	mov	r3,r2
 400cdf4:	e0bfff17 	ldw	r2,-4(fp)
 400cdf8:	10c5c83a 	sub	r2,r2,r3
 400cdfc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400ce00:	e0bffc17 	ldw	r2,-16(fp)
 400ce04:	10800044 	addi	r2,r2,1
 400ce08:	e0bffc15 	stw	r2,-16(fp)
 400ce0c:	e0fffc17 	ldw	r3,-16(fp)
 400ce10:	e0bffe17 	ldw	r2,-8(fp)
 400ce14:	18bfe616 	blt	r3,r2,400cdb0 <__ram_exceptions_end+0xfbfecb68>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400ce18:	e0fffd17 	ldw	r3,-12(fp)
 400ce1c:	008003f4 	movhi	r2,15
 400ce20:	10909004 	addi	r2,r2,16960
 400ce24:	1885383a 	mul	r2,r3,r2
 400ce28:	100b883a 	mov	r5,r2
 400ce2c:	0100bef4 	movhi	r4,763
 400ce30:	213c2004 	addi	r4,r4,-3968
 400ce34:	40031b00 	call	40031b0 <__udivsi3>
 400ce38:	1007883a 	mov	r3,r2
 400ce3c:	e0bfff17 	ldw	r2,-4(fp)
 400ce40:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400ce44:	10bfffc4 	addi	r2,r2,-1
 400ce48:	103ffe1e 	bne	r2,zero,400ce44 <__ram_exceptions_end+0xfbfecbfc>
 400ce4c:	00000d06 	br	400ce84 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400ce50:	e0fffd17 	ldw	r3,-12(fp)
 400ce54:	008003f4 	movhi	r2,15
 400ce58:	10909004 	addi	r2,r2,16960
 400ce5c:	1885383a 	mul	r2,r3,r2
 400ce60:	100b883a 	mov	r5,r2
 400ce64:	0100bef4 	movhi	r4,763
 400ce68:	213c2004 	addi	r4,r4,-3968
 400ce6c:	40031b00 	call	40031b0 <__udivsi3>
 400ce70:	1007883a 	mov	r3,r2
 400ce74:	e0bfff17 	ldw	r2,-4(fp)
 400ce78:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400ce7c:	10bfffc4 	addi	r2,r2,-1
 400ce80:	00bffe16 	blt	zero,r2,400ce7c <__ram_exceptions_end+0xfbfecc34>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400ce84:	0005883a 	mov	r2,zero
}
 400ce88:	e037883a 	mov	sp,fp
 400ce8c:	dfc00117 	ldw	ra,4(sp)
 400ce90:	df000017 	ldw	fp,0(sp)
 400ce94:	dec00204 	addi	sp,sp,8
 400ce98:	f800283a 	ret

0400ce9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400ce9c:	defffe04 	addi	sp,sp,-8
 400cea0:	df000115 	stw	fp,4(sp)
 400cea4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400cea8:	e03fff15 	stw	zero,-4(fp)
 400ceac:	00000506 	br	400cec4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400ceb0:	e0bfff17 	ldw	r2,-4(fp)
 400ceb4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400ceb8:	e0bfff17 	ldw	r2,-4(fp)
 400cebc:	10800804 	addi	r2,r2,32
 400cec0:	e0bfff15 	stw	r2,-4(fp)
 400cec4:	e0bfff17 	ldw	r2,-4(fp)
 400cec8:	10820030 	cmpltui	r2,r2,2048
 400cecc:	103ff81e 	bne	r2,zero,400ceb0 <__ram_exceptions_end+0xfbfecc68>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400ced0:	0001883a 	nop
 400ced4:	e037883a 	mov	sp,fp
 400ced8:	df000017 	ldw	fp,0(sp)
 400cedc:	dec00104 	addi	sp,sp,4
 400cee0:	f800283a 	ret

0400cee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400cee4:	defffe04 	addi	sp,sp,-8
 400cee8:	dfc00115 	stw	ra,4(sp)
 400ceec:	df000015 	stw	fp,0(sp)
 400cef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400cef4:	d0a00a17 	ldw	r2,-32728(gp)
 400cef8:	10000326 	beq	r2,zero,400cf08 <alt_get_errno+0x24>
 400cefc:	d0a00a17 	ldw	r2,-32728(gp)
 400cf00:	103ee83a 	callr	r2
 400cf04:	00000106 	br	400cf0c <alt_get_errno+0x28>
 400cf08:	d0a6e404 	addi	r2,gp,-25712
}
 400cf0c:	e037883a 	mov	sp,fp
 400cf10:	dfc00117 	ldw	ra,4(sp)
 400cf14:	df000017 	ldw	fp,0(sp)
 400cf18:	dec00204 	addi	sp,sp,8
 400cf1c:	f800283a 	ret

0400cf20 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400cf20:	defffa04 	addi	sp,sp,-24
 400cf24:	dfc00515 	stw	ra,20(sp)
 400cf28:	df000415 	stw	fp,16(sp)
 400cf2c:	df000404 	addi	fp,sp,16
 400cf30:	e13ffe15 	stw	r4,-8(fp)
 400cf34:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400cf38:	e0bffe17 	ldw	r2,-8(fp)
 400cf3c:	10000326 	beq	r2,zero,400cf4c <alt_dev_llist_insert+0x2c>
 400cf40:	e0bffe17 	ldw	r2,-8(fp)
 400cf44:	10800217 	ldw	r2,8(r2)
 400cf48:	1000061e 	bne	r2,zero,400cf64 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400cf4c:	400cee40 	call	400cee4 <alt_get_errno>
 400cf50:	1007883a 	mov	r3,r2
 400cf54:	00800584 	movi	r2,22
 400cf58:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400cf5c:	00bffa84 	movi	r2,-22
 400cf60:	00001306 	br	400cfb0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400cf64:	e0bffe17 	ldw	r2,-8(fp)
 400cf68:	e0ffff17 	ldw	r3,-4(fp)
 400cf6c:	e0fffc15 	stw	r3,-16(fp)
 400cf70:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400cf74:	e0bffd17 	ldw	r2,-12(fp)
 400cf78:	e0fffc17 	ldw	r3,-16(fp)
 400cf7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400cf80:	e0bffc17 	ldw	r2,-16(fp)
 400cf84:	10c00017 	ldw	r3,0(r2)
 400cf88:	e0bffd17 	ldw	r2,-12(fp)
 400cf8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400cf90:	e0bffc17 	ldw	r2,-16(fp)
 400cf94:	10800017 	ldw	r2,0(r2)
 400cf98:	e0fffd17 	ldw	r3,-12(fp)
 400cf9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400cfa0:	e0bffc17 	ldw	r2,-16(fp)
 400cfa4:	e0fffd17 	ldw	r3,-12(fp)
 400cfa8:	10c00015 	stw	r3,0(r2)

  return 0;  
 400cfac:	0005883a 	mov	r2,zero
}
 400cfb0:	e037883a 	mov	sp,fp
 400cfb4:	dfc00117 	ldw	ra,4(sp)
 400cfb8:	df000017 	ldw	fp,0(sp)
 400cfbc:	dec00204 	addi	sp,sp,8
 400cfc0:	f800283a 	ret

0400cfc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400cfc4:	defffd04 	addi	sp,sp,-12
 400cfc8:	dfc00215 	stw	ra,8(sp)
 400cfcc:	df000115 	stw	fp,4(sp)
 400cfd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400cfd4:	00810074 	movhi	r2,1025
 400cfd8:	10b7a304 	addi	r2,r2,-8564
 400cfdc:	e0bfff15 	stw	r2,-4(fp)
 400cfe0:	00000606 	br	400cffc <_do_ctors+0x38>
        (*ctor) (); 
 400cfe4:	e0bfff17 	ldw	r2,-4(fp)
 400cfe8:	10800017 	ldw	r2,0(r2)
 400cfec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400cff0:	e0bfff17 	ldw	r2,-4(fp)
 400cff4:	10bfff04 	addi	r2,r2,-4
 400cff8:	e0bfff15 	stw	r2,-4(fp)
 400cffc:	e0ffff17 	ldw	r3,-4(fp)
 400d000:	00810074 	movhi	r2,1025
 400d004:	10b7a404 	addi	r2,r2,-8560
 400d008:	18bff62e 	bgeu	r3,r2,400cfe4 <__ram_exceptions_end+0xfbfecd9c>
        (*ctor) (); 
}
 400d00c:	0001883a 	nop
 400d010:	e037883a 	mov	sp,fp
 400d014:	dfc00117 	ldw	ra,4(sp)
 400d018:	df000017 	ldw	fp,0(sp)
 400d01c:	dec00204 	addi	sp,sp,8
 400d020:	f800283a 	ret

0400d024 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400d024:	defffd04 	addi	sp,sp,-12
 400d028:	dfc00215 	stw	ra,8(sp)
 400d02c:	df000115 	stw	fp,4(sp)
 400d030:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400d034:	00810074 	movhi	r2,1025
 400d038:	10b7a304 	addi	r2,r2,-8564
 400d03c:	e0bfff15 	stw	r2,-4(fp)
 400d040:	00000606 	br	400d05c <_do_dtors+0x38>
        (*dtor) (); 
 400d044:	e0bfff17 	ldw	r2,-4(fp)
 400d048:	10800017 	ldw	r2,0(r2)
 400d04c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400d050:	e0bfff17 	ldw	r2,-4(fp)
 400d054:	10bfff04 	addi	r2,r2,-4
 400d058:	e0bfff15 	stw	r2,-4(fp)
 400d05c:	e0ffff17 	ldw	r3,-4(fp)
 400d060:	00810074 	movhi	r2,1025
 400d064:	10b7a404 	addi	r2,r2,-8560
 400d068:	18bff62e 	bgeu	r3,r2,400d044 <__ram_exceptions_end+0xfbfecdfc>
        (*dtor) (); 
}
 400d06c:	0001883a 	nop
 400d070:	e037883a 	mov	sp,fp
 400d074:	dfc00117 	ldw	ra,4(sp)
 400d078:	df000017 	ldw	fp,0(sp)
 400d07c:	dec00204 	addi	sp,sp,8
 400d080:	f800283a 	ret

0400d084 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400d084:	defffa04 	addi	sp,sp,-24
 400d088:	dfc00515 	stw	ra,20(sp)
 400d08c:	df000415 	stw	fp,16(sp)
 400d090:	df000404 	addi	fp,sp,16
 400d094:	e13ffe15 	stw	r4,-8(fp)
 400d098:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400d09c:	e0bfff17 	ldw	r2,-4(fp)
 400d0a0:	10800017 	ldw	r2,0(r2)
 400d0a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400d0a8:	e13ffe17 	ldw	r4,-8(fp)
 400d0ac:	40070c80 	call	40070c8 <strlen>
 400d0b0:	10800044 	addi	r2,r2,1
 400d0b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400d0b8:	00000d06 	br	400d0f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400d0bc:	e0bffc17 	ldw	r2,-16(fp)
 400d0c0:	10800217 	ldw	r2,8(r2)
 400d0c4:	e0fffd17 	ldw	r3,-12(fp)
 400d0c8:	180d883a 	mov	r6,r3
 400d0cc:	e17ffe17 	ldw	r5,-8(fp)
 400d0d0:	1009883a 	mov	r4,r2
 400d0d4:	400db480 	call	400db48 <memcmp>
 400d0d8:	1000021e 	bne	r2,zero,400d0e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400d0dc:	e0bffc17 	ldw	r2,-16(fp)
 400d0e0:	00000706 	br	400d100 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400d0e4:	e0bffc17 	ldw	r2,-16(fp)
 400d0e8:	10800017 	ldw	r2,0(r2)
 400d0ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400d0f0:	e0fffc17 	ldw	r3,-16(fp)
 400d0f4:	e0bfff17 	ldw	r2,-4(fp)
 400d0f8:	18bff01e 	bne	r3,r2,400d0bc <__ram_exceptions_end+0xfbfece74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400d0fc:	0005883a 	mov	r2,zero
}
 400d100:	e037883a 	mov	sp,fp
 400d104:	dfc00117 	ldw	ra,4(sp)
 400d108:	df000017 	ldw	fp,0(sp)
 400d10c:	dec00204 	addi	sp,sp,8
 400d110:	f800283a 	ret

0400d114 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400d114:	defffe04 	addi	sp,sp,-8
 400d118:	dfc00115 	stw	ra,4(sp)
 400d11c:	df000015 	stw	fp,0(sp)
 400d120:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400d124:	01440004 	movi	r5,4096
 400d128:	0009883a 	mov	r4,zero
 400d12c:	400d9d00 	call	400d9d0 <alt_icache_flush>
#endif
}
 400d130:	0001883a 	nop
 400d134:	e037883a 	mov	sp,fp
 400d138:	dfc00117 	ldw	ra,4(sp)
 400d13c:	df000017 	ldw	fp,0(sp)
 400d140:	dec00204 	addi	sp,sp,8
 400d144:	f800283a 	ret

0400d148 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400d148:	defff904 	addi	sp,sp,-28
 400d14c:	dfc00615 	stw	ra,24(sp)
 400d150:	df000515 	stw	fp,20(sp)
 400d154:	df000504 	addi	fp,sp,20
 400d158:	e13ffc15 	stw	r4,-16(fp)
 400d15c:	e17ffd15 	stw	r5,-12(fp)
 400d160:	e1bffe15 	stw	r6,-8(fp)
 400d164:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400d168:	e1bfff17 	ldw	r6,-4(fp)
 400d16c:	e17ffe17 	ldw	r5,-8(fp)
 400d170:	e13ffd17 	ldw	r4,-12(fp)
 400d174:	400d5080 	call	400d508 <open>
 400d178:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400d17c:	e0bffb17 	ldw	r2,-20(fp)
 400d180:	10001c16 	blt	r2,zero,400d1f4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400d184:	00810074 	movhi	r2,1025
 400d188:	10baf804 	addi	r2,r2,-5152
 400d18c:	e0fffb17 	ldw	r3,-20(fp)
 400d190:	18c00324 	muli	r3,r3,12
 400d194:	10c5883a 	add	r2,r2,r3
 400d198:	10c00017 	ldw	r3,0(r2)
 400d19c:	e0bffc17 	ldw	r2,-16(fp)
 400d1a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400d1a4:	00810074 	movhi	r2,1025
 400d1a8:	10baf804 	addi	r2,r2,-5152
 400d1ac:	e0fffb17 	ldw	r3,-20(fp)
 400d1b0:	18c00324 	muli	r3,r3,12
 400d1b4:	10c5883a 	add	r2,r2,r3
 400d1b8:	10800104 	addi	r2,r2,4
 400d1bc:	10c00017 	ldw	r3,0(r2)
 400d1c0:	e0bffc17 	ldw	r2,-16(fp)
 400d1c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400d1c8:	00810074 	movhi	r2,1025
 400d1cc:	10baf804 	addi	r2,r2,-5152
 400d1d0:	e0fffb17 	ldw	r3,-20(fp)
 400d1d4:	18c00324 	muli	r3,r3,12
 400d1d8:	10c5883a 	add	r2,r2,r3
 400d1dc:	10800204 	addi	r2,r2,8
 400d1e0:	10c00017 	ldw	r3,0(r2)
 400d1e4:	e0bffc17 	ldw	r2,-16(fp)
 400d1e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400d1ec:	e13ffb17 	ldw	r4,-20(fp)
 400d1f0:	400a3040 	call	400a304 <alt_release_fd>
  }
} 
 400d1f4:	0001883a 	nop
 400d1f8:	e037883a 	mov	sp,fp
 400d1fc:	dfc00117 	ldw	ra,4(sp)
 400d200:	df000017 	ldw	fp,0(sp)
 400d204:	dec00204 	addi	sp,sp,8
 400d208:	f800283a 	ret

0400d20c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400d20c:	defffb04 	addi	sp,sp,-20
 400d210:	dfc00415 	stw	ra,16(sp)
 400d214:	df000315 	stw	fp,12(sp)
 400d218:	df000304 	addi	fp,sp,12
 400d21c:	e13ffd15 	stw	r4,-12(fp)
 400d220:	e17ffe15 	stw	r5,-8(fp)
 400d224:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400d228:	01c07fc4 	movi	r7,511
 400d22c:	01800044 	movi	r6,1
 400d230:	e17ffd17 	ldw	r5,-12(fp)
 400d234:	01010074 	movhi	r4,1025
 400d238:	213afb04 	addi	r4,r4,-5140
 400d23c:	400d1480 	call	400d148 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400d240:	01c07fc4 	movi	r7,511
 400d244:	000d883a 	mov	r6,zero
 400d248:	e17ffe17 	ldw	r5,-8(fp)
 400d24c:	01010074 	movhi	r4,1025
 400d250:	213af804 	addi	r4,r4,-5152
 400d254:	400d1480 	call	400d148 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400d258:	01c07fc4 	movi	r7,511
 400d25c:	01800044 	movi	r6,1
 400d260:	e17fff17 	ldw	r5,-4(fp)
 400d264:	01010074 	movhi	r4,1025
 400d268:	213afe04 	addi	r4,r4,-5128
 400d26c:	400d1480 	call	400d148 <alt_open_fd>
}  
 400d270:	0001883a 	nop
 400d274:	e037883a 	mov	sp,fp
 400d278:	dfc00117 	ldw	ra,4(sp)
 400d27c:	df000017 	ldw	fp,0(sp)
 400d280:	dec00204 	addi	sp,sp,8
 400d284:	f800283a 	ret

0400d288 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 400d288:	defff004 	addi	sp,sp,-64
 400d28c:	df000f15 	stw	fp,60(sp)
 400d290:	df000f04 	addi	fp,sp,60
 400d294:	e13ffd15 	stw	r4,-12(fp)
 400d298:	e17ffe15 	stw	r5,-8(fp)
 400d29c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 400d2a0:	00bffa84 	movi	r2,-22
 400d2a4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400d2a8:	e0bffd17 	ldw	r2,-12(fp)
 400d2ac:	10800828 	cmpgeui	r2,r2,32
 400d2b0:	1000501e 	bne	r2,zero,400d3f4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d2b4:	0005303a 	rdctl	r2,status
 400d2b8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d2bc:	e0fff617 	ldw	r3,-40(fp)
 400d2c0:	00bfff84 	movi	r2,-2
 400d2c4:	1884703a 	and	r2,r3,r2
 400d2c8:	1001703a 	wrctl	status,r2
  
  return context;
 400d2cc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 400d2d0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 400d2d4:	00810074 	movhi	r2,1025
 400d2d8:	10869404 	addi	r2,r2,6736
 400d2dc:	e0fffd17 	ldw	r3,-12(fp)
 400d2e0:	180690fa 	slli	r3,r3,3
 400d2e4:	10c5883a 	add	r2,r2,r3
 400d2e8:	e0ffff17 	ldw	r3,-4(fp)
 400d2ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 400d2f0:	00810074 	movhi	r2,1025
 400d2f4:	10869404 	addi	r2,r2,6736
 400d2f8:	e0fffd17 	ldw	r3,-12(fp)
 400d2fc:	180690fa 	slli	r3,r3,3
 400d300:	10c5883a 	add	r2,r2,r3
 400d304:	10800104 	addi	r2,r2,4
 400d308:	e0fffe17 	ldw	r3,-8(fp)
 400d30c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 400d310:	e0bfff17 	ldw	r2,-4(fp)
 400d314:	10001926 	beq	r2,zero,400d37c <alt_irq_register+0xf4>
 400d318:	e0bffd17 	ldw	r2,-12(fp)
 400d31c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d320:	0005303a 	rdctl	r2,status
 400d324:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d328:	e0fff717 	ldw	r3,-36(fp)
 400d32c:	00bfff84 	movi	r2,-2
 400d330:	1884703a 	and	r2,r3,r2
 400d334:	1001703a 	wrctl	status,r2
  
  return context;
 400d338:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400d33c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 400d340:	00c00044 	movi	r3,1
 400d344:	e0bff217 	ldw	r2,-56(fp)
 400d348:	1884983a 	sll	r2,r3,r2
 400d34c:	1007883a 	mov	r3,r2
 400d350:	d0a6e817 	ldw	r2,-25696(gp)
 400d354:	1884b03a 	or	r2,r3,r2
 400d358:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400d35c:	d0a6e817 	ldw	r2,-25696(gp)
 400d360:	100170fa 	wrctl	ienable,r2
 400d364:	e0bff817 	ldw	r2,-32(fp)
 400d368:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d36c:	e0bff917 	ldw	r2,-28(fp)
 400d370:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400d374:	0005883a 	mov	r2,zero
 400d378:	00001906 	br	400d3e0 <alt_irq_register+0x158>
 400d37c:	e0bffd17 	ldw	r2,-12(fp)
 400d380:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d384:	0005303a 	rdctl	r2,status
 400d388:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d38c:	e0fffa17 	ldw	r3,-24(fp)
 400d390:	00bfff84 	movi	r2,-2
 400d394:	1884703a 	and	r2,r3,r2
 400d398:	1001703a 	wrctl	status,r2
  
  return context;
 400d39c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400d3a0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 400d3a4:	00c00044 	movi	r3,1
 400d3a8:	e0bff417 	ldw	r2,-48(fp)
 400d3ac:	1884983a 	sll	r2,r3,r2
 400d3b0:	0084303a 	nor	r2,zero,r2
 400d3b4:	1007883a 	mov	r3,r2
 400d3b8:	d0a6e817 	ldw	r2,-25696(gp)
 400d3bc:	1884703a 	and	r2,r3,r2
 400d3c0:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400d3c4:	d0a6e817 	ldw	r2,-25696(gp)
 400d3c8:	100170fa 	wrctl	ienable,r2
 400d3cc:	e0bffb17 	ldw	r2,-20(fp)
 400d3d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d3d4:	e0bffc17 	ldw	r2,-16(fp)
 400d3d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400d3dc:	0005883a 	mov	r2,zero
 400d3e0:	e0bff115 	stw	r2,-60(fp)
 400d3e4:	e0bff317 	ldw	r2,-52(fp)
 400d3e8:	e0bff515 	stw	r2,-44(fp)
 400d3ec:	e0bff517 	ldw	r2,-44(fp)
 400d3f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 400d3f4:	e0bff117 	ldw	r2,-60(fp)
}
 400d3f8:	e037883a 	mov	sp,fp
 400d3fc:	df000017 	ldw	fp,0(sp)
 400d400:	dec00104 	addi	sp,sp,4
 400d404:	f800283a 	ret

0400d408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d408:	defffe04 	addi	sp,sp,-8
 400d40c:	dfc00115 	stw	ra,4(sp)
 400d410:	df000015 	stw	fp,0(sp)
 400d414:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d418:	d0a00a17 	ldw	r2,-32728(gp)
 400d41c:	10000326 	beq	r2,zero,400d42c <alt_get_errno+0x24>
 400d420:	d0a00a17 	ldw	r2,-32728(gp)
 400d424:	103ee83a 	callr	r2
 400d428:	00000106 	br	400d430 <alt_get_errno+0x28>
 400d42c:	d0a6e404 	addi	r2,gp,-25712
}
 400d430:	e037883a 	mov	sp,fp
 400d434:	dfc00117 	ldw	ra,4(sp)
 400d438:	df000017 	ldw	fp,0(sp)
 400d43c:	dec00204 	addi	sp,sp,8
 400d440:	f800283a 	ret

0400d444 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400d444:	defffd04 	addi	sp,sp,-12
 400d448:	df000215 	stw	fp,8(sp)
 400d44c:	df000204 	addi	fp,sp,8
 400d450:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400d454:	e0bfff17 	ldw	r2,-4(fp)
 400d458:	10800217 	ldw	r2,8(r2)
 400d45c:	10d00034 	orhi	r3,r2,16384
 400d460:	e0bfff17 	ldw	r2,-4(fp)
 400d464:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400d468:	e03ffe15 	stw	zero,-8(fp)
 400d46c:	00001d06 	br	400d4e4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400d470:	00810074 	movhi	r2,1025
 400d474:	10baf804 	addi	r2,r2,-5152
 400d478:	e0fffe17 	ldw	r3,-8(fp)
 400d47c:	18c00324 	muli	r3,r3,12
 400d480:	10c5883a 	add	r2,r2,r3
 400d484:	10c00017 	ldw	r3,0(r2)
 400d488:	e0bfff17 	ldw	r2,-4(fp)
 400d48c:	10800017 	ldw	r2,0(r2)
 400d490:	1880111e 	bne	r3,r2,400d4d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400d494:	00810074 	movhi	r2,1025
 400d498:	10baf804 	addi	r2,r2,-5152
 400d49c:	e0fffe17 	ldw	r3,-8(fp)
 400d4a0:	18c00324 	muli	r3,r3,12
 400d4a4:	10c5883a 	add	r2,r2,r3
 400d4a8:	10800204 	addi	r2,r2,8
 400d4ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400d4b0:	1000090e 	bge	r2,zero,400d4d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400d4b4:	e0bffe17 	ldw	r2,-8(fp)
 400d4b8:	10c00324 	muli	r3,r2,12
 400d4bc:	00810074 	movhi	r2,1025
 400d4c0:	10baf804 	addi	r2,r2,-5152
 400d4c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400d4c8:	e0bfff17 	ldw	r2,-4(fp)
 400d4cc:	18800226 	beq	r3,r2,400d4d8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400d4d0:	00bffcc4 	movi	r2,-13
 400d4d4:	00000806 	br	400d4f8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400d4d8:	e0bffe17 	ldw	r2,-8(fp)
 400d4dc:	10800044 	addi	r2,r2,1
 400d4e0:	e0bffe15 	stw	r2,-8(fp)
 400d4e4:	d0a00917 	ldw	r2,-32732(gp)
 400d4e8:	1007883a 	mov	r3,r2
 400d4ec:	e0bffe17 	ldw	r2,-8(fp)
 400d4f0:	18bfdf2e 	bgeu	r3,r2,400d470 <__ram_exceptions_end+0xfbfed228>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400d4f4:	0005883a 	mov	r2,zero
}
 400d4f8:	e037883a 	mov	sp,fp
 400d4fc:	df000017 	ldw	fp,0(sp)
 400d500:	dec00104 	addi	sp,sp,4
 400d504:	f800283a 	ret

0400d508 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400d508:	defff604 	addi	sp,sp,-40
 400d50c:	dfc00915 	stw	ra,36(sp)
 400d510:	df000815 	stw	fp,32(sp)
 400d514:	df000804 	addi	fp,sp,32
 400d518:	e13ffd15 	stw	r4,-12(fp)
 400d51c:	e17ffe15 	stw	r5,-8(fp)
 400d520:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400d524:	00bfffc4 	movi	r2,-1
 400d528:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400d52c:	00bffb44 	movi	r2,-19
 400d530:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400d534:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400d538:	d1600704 	addi	r5,gp,-32740
 400d53c:	e13ffd17 	ldw	r4,-12(fp)
 400d540:	400d0840 	call	400d084 <alt_find_dev>
 400d544:	e0bff815 	stw	r2,-32(fp)
 400d548:	e0bff817 	ldw	r2,-32(fp)
 400d54c:	1000051e 	bne	r2,zero,400d564 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400d550:	e13ffd17 	ldw	r4,-12(fp)
 400d554:	400d8240 	call	400d824 <alt_find_file>
 400d558:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400d55c:	00800044 	movi	r2,1
 400d560:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400d564:	e0bff817 	ldw	r2,-32(fp)
 400d568:	10002926 	beq	r2,zero,400d610 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400d56c:	e13ff817 	ldw	r4,-32(fp)
 400d570:	400d92c0 	call	400d92c <alt_get_fd>
 400d574:	e0bff915 	stw	r2,-28(fp)
 400d578:	e0bff917 	ldw	r2,-28(fp)
 400d57c:	1000030e 	bge	r2,zero,400d58c <open+0x84>
    {
      status = index;
 400d580:	e0bff917 	ldw	r2,-28(fp)
 400d584:	e0bffa15 	stw	r2,-24(fp)
 400d588:	00002306 	br	400d618 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 400d58c:	e0bff917 	ldw	r2,-28(fp)
 400d590:	10c00324 	muli	r3,r2,12
 400d594:	00810074 	movhi	r2,1025
 400d598:	10baf804 	addi	r2,r2,-5152
 400d59c:	1885883a 	add	r2,r3,r2
 400d5a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400d5a4:	e0fffe17 	ldw	r3,-8(fp)
 400d5a8:	00900034 	movhi	r2,16384
 400d5ac:	10bfffc4 	addi	r2,r2,-1
 400d5b0:	1886703a 	and	r3,r3,r2
 400d5b4:	e0bffc17 	ldw	r2,-16(fp)
 400d5b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400d5bc:	e0bffb17 	ldw	r2,-20(fp)
 400d5c0:	1000051e 	bne	r2,zero,400d5d8 <open+0xd0>
 400d5c4:	e13ffc17 	ldw	r4,-16(fp)
 400d5c8:	400d4440 	call	400d444 <alt_file_locked>
 400d5cc:	e0bffa15 	stw	r2,-24(fp)
 400d5d0:	e0bffa17 	ldw	r2,-24(fp)
 400d5d4:	10001016 	blt	r2,zero,400d618 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400d5d8:	e0bff817 	ldw	r2,-32(fp)
 400d5dc:	10800317 	ldw	r2,12(r2)
 400d5e0:	10000826 	beq	r2,zero,400d604 <open+0xfc>
 400d5e4:	e0bff817 	ldw	r2,-32(fp)
 400d5e8:	10800317 	ldw	r2,12(r2)
 400d5ec:	e1ffff17 	ldw	r7,-4(fp)
 400d5f0:	e1bffe17 	ldw	r6,-8(fp)
 400d5f4:	e17ffd17 	ldw	r5,-12(fp)
 400d5f8:	e13ffc17 	ldw	r4,-16(fp)
 400d5fc:	103ee83a 	callr	r2
 400d600:	00000106 	br	400d608 <open+0x100>
 400d604:	0005883a 	mov	r2,zero
 400d608:	e0bffa15 	stw	r2,-24(fp)
 400d60c:	00000206 	br	400d618 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400d610:	00bffb44 	movi	r2,-19
 400d614:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400d618:	e0bffa17 	ldw	r2,-24(fp)
 400d61c:	1000090e 	bge	r2,zero,400d644 <open+0x13c>
  {
    alt_release_fd (index);  
 400d620:	e13ff917 	ldw	r4,-28(fp)
 400d624:	400a3040 	call	400a304 <alt_release_fd>
    ALT_ERRNO = -status;
 400d628:	400d4080 	call	400d408 <alt_get_errno>
 400d62c:	1007883a 	mov	r3,r2
 400d630:	e0bffa17 	ldw	r2,-24(fp)
 400d634:	0085c83a 	sub	r2,zero,r2
 400d638:	18800015 	stw	r2,0(r3)
    return -1;
 400d63c:	00bfffc4 	movi	r2,-1
 400d640:	00000106 	br	400d648 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 400d644:	e0bff917 	ldw	r2,-28(fp)
}
 400d648:	e037883a 	mov	sp,fp
 400d64c:	dfc00117 	ldw	ra,4(sp)
 400d650:	df000017 	ldw	fp,0(sp)
 400d654:	dec00204 	addi	sp,sp,8
 400d658:	f800283a 	ret

0400d65c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400d65c:	defffa04 	addi	sp,sp,-24
 400d660:	df000515 	stw	fp,20(sp)
 400d664:	df000504 	addi	fp,sp,20
 400d668:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d66c:	0005303a 	rdctl	r2,status
 400d670:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d674:	e0fffc17 	ldw	r3,-16(fp)
 400d678:	00bfff84 	movi	r2,-2
 400d67c:	1884703a 	and	r2,r3,r2
 400d680:	1001703a 	wrctl	status,r2
  
  return context;
 400d684:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400d688:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400d68c:	e0bfff17 	ldw	r2,-4(fp)
 400d690:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400d694:	e0bffd17 	ldw	r2,-12(fp)
 400d698:	10800017 	ldw	r2,0(r2)
 400d69c:	e0fffd17 	ldw	r3,-12(fp)
 400d6a0:	18c00117 	ldw	r3,4(r3)
 400d6a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400d6a8:	e0bffd17 	ldw	r2,-12(fp)
 400d6ac:	10800117 	ldw	r2,4(r2)
 400d6b0:	e0fffd17 	ldw	r3,-12(fp)
 400d6b4:	18c00017 	ldw	r3,0(r3)
 400d6b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400d6bc:	e0bffd17 	ldw	r2,-12(fp)
 400d6c0:	e0fffd17 	ldw	r3,-12(fp)
 400d6c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400d6c8:	e0bffd17 	ldw	r2,-12(fp)
 400d6cc:	e0fffd17 	ldw	r3,-12(fp)
 400d6d0:	10c00015 	stw	r3,0(r2)
 400d6d4:	e0bffb17 	ldw	r2,-20(fp)
 400d6d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d6dc:	e0bffe17 	ldw	r2,-8(fp)
 400d6e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400d6e4:	0001883a 	nop
 400d6e8:	e037883a 	mov	sp,fp
 400d6ec:	df000017 	ldw	fp,0(sp)
 400d6f0:	dec00104 	addi	sp,sp,4
 400d6f4:	f800283a 	ret

0400d6f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400d6f8:	defffb04 	addi	sp,sp,-20
 400d6fc:	dfc00415 	stw	ra,16(sp)
 400d700:	df000315 	stw	fp,12(sp)
 400d704:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400d708:	d0a01117 	ldw	r2,-32700(gp)
 400d70c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400d710:	d0a6ea17 	ldw	r2,-25688(gp)
 400d714:	10800044 	addi	r2,r2,1
 400d718:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400d71c:	00002e06 	br	400d7d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400d720:	e0bffd17 	ldw	r2,-12(fp)
 400d724:	10800017 	ldw	r2,0(r2)
 400d728:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400d72c:	e0bffd17 	ldw	r2,-12(fp)
 400d730:	10800403 	ldbu	r2,16(r2)
 400d734:	10803fcc 	andi	r2,r2,255
 400d738:	10000426 	beq	r2,zero,400d74c <alt_tick+0x54>
 400d73c:	d0a6ea17 	ldw	r2,-25688(gp)
 400d740:	1000021e 	bne	r2,zero,400d74c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400d744:	e0bffd17 	ldw	r2,-12(fp)
 400d748:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400d74c:	e0bffd17 	ldw	r2,-12(fp)
 400d750:	10800217 	ldw	r2,8(r2)
 400d754:	d0e6ea17 	ldw	r3,-25688(gp)
 400d758:	18801d36 	bltu	r3,r2,400d7d0 <alt_tick+0xd8>
 400d75c:	e0bffd17 	ldw	r2,-12(fp)
 400d760:	10800403 	ldbu	r2,16(r2)
 400d764:	10803fcc 	andi	r2,r2,255
 400d768:	1000191e 	bne	r2,zero,400d7d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400d76c:	e0bffd17 	ldw	r2,-12(fp)
 400d770:	10800317 	ldw	r2,12(r2)
 400d774:	e0fffd17 	ldw	r3,-12(fp)
 400d778:	18c00517 	ldw	r3,20(r3)
 400d77c:	1809883a 	mov	r4,r3
 400d780:	103ee83a 	callr	r2
 400d784:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400d788:	e0bfff17 	ldw	r2,-4(fp)
 400d78c:	1000031e 	bne	r2,zero,400d79c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400d790:	e13ffd17 	ldw	r4,-12(fp)
 400d794:	400d65c0 	call	400d65c <alt_alarm_stop>
 400d798:	00000d06 	br	400d7d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400d79c:	e0bffd17 	ldw	r2,-12(fp)
 400d7a0:	10c00217 	ldw	r3,8(r2)
 400d7a4:	e0bfff17 	ldw	r2,-4(fp)
 400d7a8:	1887883a 	add	r3,r3,r2
 400d7ac:	e0bffd17 	ldw	r2,-12(fp)
 400d7b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400d7b4:	e0bffd17 	ldw	r2,-12(fp)
 400d7b8:	10c00217 	ldw	r3,8(r2)
 400d7bc:	d0a6ea17 	ldw	r2,-25688(gp)
 400d7c0:	1880032e 	bgeu	r3,r2,400d7d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400d7c4:	e0bffd17 	ldw	r2,-12(fp)
 400d7c8:	00c00044 	movi	r3,1
 400d7cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400d7d0:	e0bffe17 	ldw	r2,-8(fp)
 400d7d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400d7d8:	e0fffd17 	ldw	r3,-12(fp)
 400d7dc:	d0a01104 	addi	r2,gp,-32700
 400d7e0:	18bfcf1e 	bne	r3,r2,400d720 <__ram_exceptions_end+0xfbfed4d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400d7e4:	0001883a 	nop
}
 400d7e8:	0001883a 	nop
 400d7ec:	e037883a 	mov	sp,fp
 400d7f0:	dfc00117 	ldw	ra,4(sp)
 400d7f4:	df000017 	ldw	fp,0(sp)
 400d7f8:	dec00204 	addi	sp,sp,8
 400d7fc:	f800283a 	ret

0400d800 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400d800:	deffff04 	addi	sp,sp,-4
 400d804:	df000015 	stw	fp,0(sp)
 400d808:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400d80c:	000170fa 	wrctl	ienable,zero
}
 400d810:	0001883a 	nop
 400d814:	e037883a 	mov	sp,fp
 400d818:	df000017 	ldw	fp,0(sp)
 400d81c:	dec00104 	addi	sp,sp,4
 400d820:	f800283a 	ret

0400d824 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400d824:	defffb04 	addi	sp,sp,-20
 400d828:	dfc00415 	stw	ra,16(sp)
 400d82c:	df000315 	stw	fp,12(sp)
 400d830:	df000304 	addi	fp,sp,12
 400d834:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400d838:	d0a00517 	ldw	r2,-32748(gp)
 400d83c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400d840:	00003106 	br	400d908 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400d844:	e0bffd17 	ldw	r2,-12(fp)
 400d848:	10800217 	ldw	r2,8(r2)
 400d84c:	1009883a 	mov	r4,r2
 400d850:	40070c80 	call	40070c8 <strlen>
 400d854:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400d858:	e0bffd17 	ldw	r2,-12(fp)
 400d85c:	10c00217 	ldw	r3,8(r2)
 400d860:	e0bffe17 	ldw	r2,-8(fp)
 400d864:	10bfffc4 	addi	r2,r2,-1
 400d868:	1885883a 	add	r2,r3,r2
 400d86c:	10800003 	ldbu	r2,0(r2)
 400d870:	10803fcc 	andi	r2,r2,255
 400d874:	1080201c 	xori	r2,r2,128
 400d878:	10bfe004 	addi	r2,r2,-128
 400d87c:	10800bd8 	cmpnei	r2,r2,47
 400d880:	1000031e 	bne	r2,zero,400d890 <alt_find_file+0x6c>
    {
      len -= 1;
 400d884:	e0bffe17 	ldw	r2,-8(fp)
 400d888:	10bfffc4 	addi	r2,r2,-1
 400d88c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400d890:	e0bffe17 	ldw	r2,-8(fp)
 400d894:	e0ffff17 	ldw	r3,-4(fp)
 400d898:	1885883a 	add	r2,r3,r2
 400d89c:	10800003 	ldbu	r2,0(r2)
 400d8a0:	10803fcc 	andi	r2,r2,255
 400d8a4:	1080201c 	xori	r2,r2,128
 400d8a8:	10bfe004 	addi	r2,r2,-128
 400d8ac:	10800be0 	cmpeqi	r2,r2,47
 400d8b0:	1000081e 	bne	r2,zero,400d8d4 <alt_find_file+0xb0>
 400d8b4:	e0bffe17 	ldw	r2,-8(fp)
 400d8b8:	e0ffff17 	ldw	r3,-4(fp)
 400d8bc:	1885883a 	add	r2,r3,r2
 400d8c0:	10800003 	ldbu	r2,0(r2)
 400d8c4:	10803fcc 	andi	r2,r2,255
 400d8c8:	1080201c 	xori	r2,r2,128
 400d8cc:	10bfe004 	addi	r2,r2,-128
 400d8d0:	10000a1e 	bne	r2,zero,400d8fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400d8d4:	e0bffd17 	ldw	r2,-12(fp)
 400d8d8:	10800217 	ldw	r2,8(r2)
 400d8dc:	e0fffe17 	ldw	r3,-8(fp)
 400d8e0:	180d883a 	mov	r6,r3
 400d8e4:	e17fff17 	ldw	r5,-4(fp)
 400d8e8:	1009883a 	mov	r4,r2
 400d8ec:	400db480 	call	400db48 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400d8f0:	1000021e 	bne	r2,zero,400d8fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400d8f4:	e0bffd17 	ldw	r2,-12(fp)
 400d8f8:	00000706 	br	400d918 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400d8fc:	e0bffd17 	ldw	r2,-12(fp)
 400d900:	10800017 	ldw	r2,0(r2)
 400d904:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400d908:	e0fffd17 	ldw	r3,-12(fp)
 400d90c:	d0a00504 	addi	r2,gp,-32748
 400d910:	18bfcc1e 	bne	r3,r2,400d844 <__ram_exceptions_end+0xfbfed5fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400d914:	0005883a 	mov	r2,zero
}
 400d918:	e037883a 	mov	sp,fp
 400d91c:	dfc00117 	ldw	ra,4(sp)
 400d920:	df000017 	ldw	fp,0(sp)
 400d924:	dec00204 	addi	sp,sp,8
 400d928:	f800283a 	ret

0400d92c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400d92c:	defffc04 	addi	sp,sp,-16
 400d930:	df000315 	stw	fp,12(sp)
 400d934:	df000304 	addi	fp,sp,12
 400d938:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400d93c:	00bffa04 	movi	r2,-24
 400d940:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400d944:	e03ffd15 	stw	zero,-12(fp)
 400d948:	00001906 	br	400d9b0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 400d94c:	00810074 	movhi	r2,1025
 400d950:	10baf804 	addi	r2,r2,-5152
 400d954:	e0fffd17 	ldw	r3,-12(fp)
 400d958:	18c00324 	muli	r3,r3,12
 400d95c:	10c5883a 	add	r2,r2,r3
 400d960:	10800017 	ldw	r2,0(r2)
 400d964:	10000f1e 	bne	r2,zero,400d9a4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 400d968:	00810074 	movhi	r2,1025
 400d96c:	10baf804 	addi	r2,r2,-5152
 400d970:	e0fffd17 	ldw	r3,-12(fp)
 400d974:	18c00324 	muli	r3,r3,12
 400d978:	10c5883a 	add	r2,r2,r3
 400d97c:	e0ffff17 	ldw	r3,-4(fp)
 400d980:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400d984:	d0e00917 	ldw	r3,-32732(gp)
 400d988:	e0bffd17 	ldw	r2,-12(fp)
 400d98c:	1880020e 	bge	r3,r2,400d998 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 400d990:	e0bffd17 	ldw	r2,-12(fp)
 400d994:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 400d998:	e0bffd17 	ldw	r2,-12(fp)
 400d99c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400d9a0:	00000606 	br	400d9bc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400d9a4:	e0bffd17 	ldw	r2,-12(fp)
 400d9a8:	10800044 	addi	r2,r2,1
 400d9ac:	e0bffd15 	stw	r2,-12(fp)
 400d9b0:	e0bffd17 	ldw	r2,-12(fp)
 400d9b4:	10800810 	cmplti	r2,r2,32
 400d9b8:	103fe41e 	bne	r2,zero,400d94c <__ram_exceptions_end+0xfbfed704>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400d9bc:	e0bffe17 	ldw	r2,-8(fp)
}
 400d9c0:	e037883a 	mov	sp,fp
 400d9c4:	df000017 	ldw	fp,0(sp)
 400d9c8:	dec00104 	addi	sp,sp,4
 400d9cc:	f800283a 	ret

0400d9d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400d9d0:	defffb04 	addi	sp,sp,-20
 400d9d4:	df000415 	stw	fp,16(sp)
 400d9d8:	df000404 	addi	fp,sp,16
 400d9dc:	e13ffe15 	stw	r4,-8(fp)
 400d9e0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400d9e4:	e0bfff17 	ldw	r2,-4(fp)
 400d9e8:	10840070 	cmpltui	r2,r2,4097
 400d9ec:	1000021e 	bne	r2,zero,400d9f8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400d9f0:	00840004 	movi	r2,4096
 400d9f4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400d9f8:	e0fffe17 	ldw	r3,-8(fp)
 400d9fc:	e0bfff17 	ldw	r2,-4(fp)
 400da00:	1885883a 	add	r2,r3,r2
 400da04:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400da08:	e0bffe17 	ldw	r2,-8(fp)
 400da0c:	e0bffc15 	stw	r2,-16(fp)
 400da10:	00000506 	br	400da28 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400da14:	e0bffc17 	ldw	r2,-16(fp)
 400da18:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400da1c:	e0bffc17 	ldw	r2,-16(fp)
 400da20:	10800804 	addi	r2,r2,32
 400da24:	e0bffc15 	stw	r2,-16(fp)
 400da28:	e0fffc17 	ldw	r3,-16(fp)
 400da2c:	e0bffd17 	ldw	r2,-12(fp)
 400da30:	18bff836 	bltu	r3,r2,400da14 <__ram_exceptions_end+0xfbfed7cc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400da34:	e0bffe17 	ldw	r2,-8(fp)
 400da38:	108007cc 	andi	r2,r2,31
 400da3c:	10000226 	beq	r2,zero,400da48 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400da40:	e0bffc17 	ldw	r2,-16(fp)
 400da44:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400da48:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400da4c:	0001883a 	nop
 400da50:	e037883a 	mov	sp,fp
 400da54:	df000017 	ldw	fp,0(sp)
 400da58:	dec00104 	addi	sp,sp,4
 400da5c:	f800283a 	ret

0400da60 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400da60:	defffe04 	addi	sp,sp,-8
 400da64:	df000115 	stw	fp,4(sp)
 400da68:	df000104 	addi	fp,sp,4
 400da6c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400da70:	e0bfff17 	ldw	r2,-4(fp)
 400da74:	10bffe84 	addi	r2,r2,-6
 400da78:	10c00428 	cmpgeui	r3,r2,16
 400da7c:	18001a1e 	bne	r3,zero,400dae8 <alt_exception_cause_generated_bad_addr+0x88>
 400da80:	100690ba 	slli	r3,r2,2
 400da84:	00810074 	movhi	r2,1025
 400da88:	10b6a604 	addi	r2,r2,-9576
 400da8c:	1885883a 	add	r2,r3,r2
 400da90:	10800017 	ldw	r2,0(r2)
 400da94:	1000683a 	jmp	r2
 400da98:	0400dad8 	cmpnei	r16,zero,875
 400da9c:	0400dad8 	cmpnei	r16,zero,875
 400daa0:	0400dae8 	cmpgeui	r16,zero,875
 400daa4:	0400dae8 	cmpgeui	r16,zero,875
 400daa8:	0400dae8 	cmpgeui	r16,zero,875
 400daac:	0400dad8 	cmpnei	r16,zero,875
 400dab0:	0400dae0 	cmpeqi	r16,zero,875
 400dab4:	0400dae8 	cmpgeui	r16,zero,875
 400dab8:	0400dad8 	cmpnei	r16,zero,875
 400dabc:	0400dad8 	cmpnei	r16,zero,875
 400dac0:	0400dae8 	cmpgeui	r16,zero,875
 400dac4:	0400dad8 	cmpnei	r16,zero,875
 400dac8:	0400dae0 	cmpeqi	r16,zero,875
 400dacc:	0400dae8 	cmpgeui	r16,zero,875
 400dad0:	0400dae8 	cmpgeui	r16,zero,875
 400dad4:	0400dad8 	cmpnei	r16,zero,875
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400dad8:	00800044 	movi	r2,1
 400dadc:	00000306 	br	400daec <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400dae0:	0005883a 	mov	r2,zero
 400dae4:	00000106 	br	400daec <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400dae8:	0005883a 	mov	r2,zero
  }
}
 400daec:	e037883a 	mov	sp,fp
 400daf0:	df000017 	ldw	fp,0(sp)
 400daf4:	dec00104 	addi	sp,sp,4
 400daf8:	f800283a 	ret

0400dafc <atexit>:
 400dafc:	200b883a 	mov	r5,r4
 400db00:	000f883a 	mov	r7,zero
 400db04:	000d883a 	mov	r6,zero
 400db08:	0009883a 	mov	r4,zero
 400db0c:	400dbc41 	jmpi	400dbc4 <__register_exitproc>

0400db10 <exit>:
 400db10:	defffe04 	addi	sp,sp,-8
 400db14:	000b883a 	mov	r5,zero
 400db18:	dc000015 	stw	r16,0(sp)
 400db1c:	dfc00115 	stw	ra,4(sp)
 400db20:	2021883a 	mov	r16,r4
 400db24:	400dcdc0 	call	400dcdc <__call_exitprocs>
 400db28:	00810074 	movhi	r2,1025
 400db2c:	10bf9f04 	addi	r2,r2,-388
 400db30:	11000017 	ldw	r4,0(r2)
 400db34:	20800f17 	ldw	r2,60(r4)
 400db38:	10000126 	beq	r2,zero,400db40 <exit+0x30>
 400db3c:	103ee83a 	callr	r2
 400db40:	8009883a 	mov	r4,r16
 400db44:	400de5c0 	call	400de5c <_exit>

0400db48 <memcmp>:
 400db48:	01c000c4 	movi	r7,3
 400db4c:	3980192e 	bgeu	r7,r6,400dbb4 <memcmp+0x6c>
 400db50:	2144b03a 	or	r2,r4,r5
 400db54:	11c4703a 	and	r2,r2,r7
 400db58:	10000f26 	beq	r2,zero,400db98 <memcmp+0x50>
 400db5c:	20800003 	ldbu	r2,0(r4)
 400db60:	28c00003 	ldbu	r3,0(r5)
 400db64:	10c0151e 	bne	r2,r3,400dbbc <memcmp+0x74>
 400db68:	31bfff84 	addi	r6,r6,-2
 400db6c:	01ffffc4 	movi	r7,-1
 400db70:	00000406 	br	400db84 <memcmp+0x3c>
 400db74:	20800003 	ldbu	r2,0(r4)
 400db78:	28c00003 	ldbu	r3,0(r5)
 400db7c:	31bfffc4 	addi	r6,r6,-1
 400db80:	10c00e1e 	bne	r2,r3,400dbbc <memcmp+0x74>
 400db84:	21000044 	addi	r4,r4,1
 400db88:	29400044 	addi	r5,r5,1
 400db8c:	31fff91e 	bne	r6,r7,400db74 <__ram_exceptions_end+0xfbfed92c>
 400db90:	0005883a 	mov	r2,zero
 400db94:	f800283a 	ret
 400db98:	20c00017 	ldw	r3,0(r4)
 400db9c:	28800017 	ldw	r2,0(r5)
 400dba0:	18bfee1e 	bne	r3,r2,400db5c <__ram_exceptions_end+0xfbfed914>
 400dba4:	31bfff04 	addi	r6,r6,-4
 400dba8:	21000104 	addi	r4,r4,4
 400dbac:	29400104 	addi	r5,r5,4
 400dbb0:	39bff936 	bltu	r7,r6,400db98 <__ram_exceptions_end+0xfbfed950>
 400dbb4:	303fe91e 	bne	r6,zero,400db5c <__ram_exceptions_end+0xfbfed914>
 400dbb8:	003ff506 	br	400db90 <__ram_exceptions_end+0xfbfed948>
 400dbbc:	10c5c83a 	sub	r2,r2,r3
 400dbc0:	f800283a 	ret

0400dbc4 <__register_exitproc>:
 400dbc4:	defffa04 	addi	sp,sp,-24
 400dbc8:	dc000315 	stw	r16,12(sp)
 400dbcc:	04010074 	movhi	r16,1025
 400dbd0:	843f9f04 	addi	r16,r16,-388
 400dbd4:	80c00017 	ldw	r3,0(r16)
 400dbd8:	dc400415 	stw	r17,16(sp)
 400dbdc:	dfc00515 	stw	ra,20(sp)
 400dbe0:	18805217 	ldw	r2,328(r3)
 400dbe4:	2023883a 	mov	r17,r4
 400dbe8:	10003726 	beq	r2,zero,400dcc8 <__register_exitproc+0x104>
 400dbec:	10c00117 	ldw	r3,4(r2)
 400dbf0:	010007c4 	movi	r4,31
 400dbf4:	20c00e16 	blt	r4,r3,400dc30 <__register_exitproc+0x6c>
 400dbf8:	1a000044 	addi	r8,r3,1
 400dbfc:	8800221e 	bne	r17,zero,400dc88 <__register_exitproc+0xc4>
 400dc00:	18c00084 	addi	r3,r3,2
 400dc04:	18c7883a 	add	r3,r3,r3
 400dc08:	18c7883a 	add	r3,r3,r3
 400dc0c:	12000115 	stw	r8,4(r2)
 400dc10:	10c7883a 	add	r3,r2,r3
 400dc14:	19400015 	stw	r5,0(r3)
 400dc18:	0005883a 	mov	r2,zero
 400dc1c:	dfc00517 	ldw	ra,20(sp)
 400dc20:	dc400417 	ldw	r17,16(sp)
 400dc24:	dc000317 	ldw	r16,12(sp)
 400dc28:	dec00604 	addi	sp,sp,24
 400dc2c:	f800283a 	ret
 400dc30:	00800034 	movhi	r2,0
 400dc34:	10800004 	addi	r2,r2,0
 400dc38:	10002626 	beq	r2,zero,400dcd4 <__register_exitproc+0x110>
 400dc3c:	01006404 	movi	r4,400
 400dc40:	d9400015 	stw	r5,0(sp)
 400dc44:	d9800115 	stw	r6,4(sp)
 400dc48:	d9c00215 	stw	r7,8(sp)
 400dc4c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x4000000>
 400dc50:	d9400017 	ldw	r5,0(sp)
 400dc54:	d9800117 	ldw	r6,4(sp)
 400dc58:	d9c00217 	ldw	r7,8(sp)
 400dc5c:	10001d26 	beq	r2,zero,400dcd4 <__register_exitproc+0x110>
 400dc60:	81000017 	ldw	r4,0(r16)
 400dc64:	10000115 	stw	zero,4(r2)
 400dc68:	02000044 	movi	r8,1
 400dc6c:	22405217 	ldw	r9,328(r4)
 400dc70:	0007883a 	mov	r3,zero
 400dc74:	12400015 	stw	r9,0(r2)
 400dc78:	20805215 	stw	r2,328(r4)
 400dc7c:	10006215 	stw	zero,392(r2)
 400dc80:	10006315 	stw	zero,396(r2)
 400dc84:	883fde26 	beq	r17,zero,400dc00 <__ram_exceptions_end+0xfbfed9b8>
 400dc88:	18c9883a 	add	r4,r3,r3
 400dc8c:	2109883a 	add	r4,r4,r4
 400dc90:	1109883a 	add	r4,r2,r4
 400dc94:	21802215 	stw	r6,136(r4)
 400dc98:	01800044 	movi	r6,1
 400dc9c:	12406217 	ldw	r9,392(r2)
 400dca0:	30cc983a 	sll	r6,r6,r3
 400dca4:	4992b03a 	or	r9,r9,r6
 400dca8:	12406215 	stw	r9,392(r2)
 400dcac:	21c04215 	stw	r7,264(r4)
 400dcb0:	01000084 	movi	r4,2
 400dcb4:	893fd21e 	bne	r17,r4,400dc00 <__ram_exceptions_end+0xfbfed9b8>
 400dcb8:	11006317 	ldw	r4,396(r2)
 400dcbc:	218cb03a 	or	r6,r4,r6
 400dcc0:	11806315 	stw	r6,396(r2)
 400dcc4:	003fce06 	br	400dc00 <__ram_exceptions_end+0xfbfed9b8>
 400dcc8:	18805304 	addi	r2,r3,332
 400dccc:	18805215 	stw	r2,328(r3)
 400dcd0:	003fc606 	br	400dbec <__ram_exceptions_end+0xfbfed9a4>
 400dcd4:	00bfffc4 	movi	r2,-1
 400dcd8:	003fd006 	br	400dc1c <__ram_exceptions_end+0xfbfed9d4>

0400dcdc <__call_exitprocs>:
 400dcdc:	defff504 	addi	sp,sp,-44
 400dce0:	df000915 	stw	fp,36(sp)
 400dce4:	dd400615 	stw	r21,24(sp)
 400dce8:	dc800315 	stw	r18,12(sp)
 400dcec:	dfc00a15 	stw	ra,40(sp)
 400dcf0:	ddc00815 	stw	r23,32(sp)
 400dcf4:	dd800715 	stw	r22,28(sp)
 400dcf8:	dd000515 	stw	r20,20(sp)
 400dcfc:	dcc00415 	stw	r19,16(sp)
 400dd00:	dc400215 	stw	r17,8(sp)
 400dd04:	dc000115 	stw	r16,4(sp)
 400dd08:	d9000015 	stw	r4,0(sp)
 400dd0c:	2839883a 	mov	fp,r5
 400dd10:	04800044 	movi	r18,1
 400dd14:	057fffc4 	movi	r21,-1
 400dd18:	00810074 	movhi	r2,1025
 400dd1c:	10bf9f04 	addi	r2,r2,-388
 400dd20:	12000017 	ldw	r8,0(r2)
 400dd24:	45005217 	ldw	r20,328(r8)
 400dd28:	44c05204 	addi	r19,r8,328
 400dd2c:	a0001c26 	beq	r20,zero,400dda0 <__call_exitprocs+0xc4>
 400dd30:	a0800117 	ldw	r2,4(r20)
 400dd34:	15ffffc4 	addi	r23,r2,-1
 400dd38:	b8000d16 	blt	r23,zero,400dd70 <__call_exitprocs+0x94>
 400dd3c:	14000044 	addi	r16,r2,1
 400dd40:	8421883a 	add	r16,r16,r16
 400dd44:	8421883a 	add	r16,r16,r16
 400dd48:	84402004 	addi	r17,r16,128
 400dd4c:	a463883a 	add	r17,r20,r17
 400dd50:	a421883a 	add	r16,r20,r16
 400dd54:	e0001e26 	beq	fp,zero,400ddd0 <__call_exitprocs+0xf4>
 400dd58:	80804017 	ldw	r2,256(r16)
 400dd5c:	e0801c26 	beq	fp,r2,400ddd0 <__call_exitprocs+0xf4>
 400dd60:	bdffffc4 	addi	r23,r23,-1
 400dd64:	843fff04 	addi	r16,r16,-4
 400dd68:	8c7fff04 	addi	r17,r17,-4
 400dd6c:	bd7ff91e 	bne	r23,r21,400dd54 <__ram_exceptions_end+0xfbfedb0c>
 400dd70:	00800034 	movhi	r2,0
 400dd74:	10800004 	addi	r2,r2,0
 400dd78:	10000926 	beq	r2,zero,400dda0 <__call_exitprocs+0xc4>
 400dd7c:	a0800117 	ldw	r2,4(r20)
 400dd80:	1000301e 	bne	r2,zero,400de44 <__call_exitprocs+0x168>
 400dd84:	a0800017 	ldw	r2,0(r20)
 400dd88:	10003226 	beq	r2,zero,400de54 <__call_exitprocs+0x178>
 400dd8c:	a009883a 	mov	r4,r20
 400dd90:	98800015 	stw	r2,0(r19)
 400dd94:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x4000000>
 400dd98:	9d000017 	ldw	r20,0(r19)
 400dd9c:	a03fe41e 	bne	r20,zero,400dd30 <__ram_exceptions_end+0xfbfedae8>
 400dda0:	dfc00a17 	ldw	ra,40(sp)
 400dda4:	df000917 	ldw	fp,36(sp)
 400dda8:	ddc00817 	ldw	r23,32(sp)
 400ddac:	dd800717 	ldw	r22,28(sp)
 400ddb0:	dd400617 	ldw	r21,24(sp)
 400ddb4:	dd000517 	ldw	r20,20(sp)
 400ddb8:	dcc00417 	ldw	r19,16(sp)
 400ddbc:	dc800317 	ldw	r18,12(sp)
 400ddc0:	dc400217 	ldw	r17,8(sp)
 400ddc4:	dc000117 	ldw	r16,4(sp)
 400ddc8:	dec00b04 	addi	sp,sp,44
 400ddcc:	f800283a 	ret
 400ddd0:	a0800117 	ldw	r2,4(r20)
 400ddd4:	80c00017 	ldw	r3,0(r16)
 400ddd8:	10bfffc4 	addi	r2,r2,-1
 400dddc:	15c01426 	beq	r2,r23,400de30 <__call_exitprocs+0x154>
 400dde0:	80000015 	stw	zero,0(r16)
 400dde4:	183fde26 	beq	r3,zero,400dd60 <__ram_exceptions_end+0xfbfedb18>
 400dde8:	95c8983a 	sll	r4,r18,r23
 400ddec:	a0806217 	ldw	r2,392(r20)
 400ddf0:	a5800117 	ldw	r22,4(r20)
 400ddf4:	2084703a 	and	r2,r4,r2
 400ddf8:	10000b26 	beq	r2,zero,400de28 <__call_exitprocs+0x14c>
 400ddfc:	a0806317 	ldw	r2,396(r20)
 400de00:	2088703a 	and	r4,r4,r2
 400de04:	20000c1e 	bne	r4,zero,400de38 <__call_exitprocs+0x15c>
 400de08:	89400017 	ldw	r5,0(r17)
 400de0c:	d9000017 	ldw	r4,0(sp)
 400de10:	183ee83a 	callr	r3
 400de14:	a0800117 	ldw	r2,4(r20)
 400de18:	15bfbf1e 	bne	r2,r22,400dd18 <__ram_exceptions_end+0xfbfedad0>
 400de1c:	98800017 	ldw	r2,0(r19)
 400de20:	153fcf26 	beq	r2,r20,400dd60 <__ram_exceptions_end+0xfbfedb18>
 400de24:	003fbc06 	br	400dd18 <__ram_exceptions_end+0xfbfedad0>
 400de28:	183ee83a 	callr	r3
 400de2c:	003ff906 	br	400de14 <__ram_exceptions_end+0xfbfedbcc>
 400de30:	a5c00115 	stw	r23,4(r20)
 400de34:	003feb06 	br	400dde4 <__ram_exceptions_end+0xfbfedb9c>
 400de38:	89000017 	ldw	r4,0(r17)
 400de3c:	183ee83a 	callr	r3
 400de40:	003ff406 	br	400de14 <__ram_exceptions_end+0xfbfedbcc>
 400de44:	a0800017 	ldw	r2,0(r20)
 400de48:	a027883a 	mov	r19,r20
 400de4c:	1029883a 	mov	r20,r2
 400de50:	003fb606 	br	400dd2c <__ram_exceptions_end+0xfbfedae4>
 400de54:	0005883a 	mov	r2,zero
 400de58:	003ffb06 	br	400de48 <__ram_exceptions_end+0xfbfedc00>

0400de5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400de5c:	defffd04 	addi	sp,sp,-12
 400de60:	df000215 	stw	fp,8(sp)
 400de64:	df000204 	addi	fp,sp,8
 400de68:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400de6c:	0001883a 	nop
 400de70:	e0bfff17 	ldw	r2,-4(fp)
 400de74:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400de78:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400de7c:	10000226 	beq	r2,zero,400de88 <_exit+0x2c>
    ALT_SIM_FAIL();
 400de80:	002af070 	cmpltui	zero,zero,43969
 400de84:	00000106 	br	400de8c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400de88:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400de8c:	003fff06 	br	400de8c <__ram_exceptions_end+0xfbfedc44>
