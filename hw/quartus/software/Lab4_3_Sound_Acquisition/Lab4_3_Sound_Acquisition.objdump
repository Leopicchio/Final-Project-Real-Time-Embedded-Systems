
Lab4_3_Sound_Acquisition.elf:     file format elf32-littlenios2
Lab4_3_Sound_Acquisition.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000228

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x08000000 align 2**12
         filesz 0x00000228 memsz 0x00000228 flags r-x
    LOAD off    0x00002228 vaddr 0x08000228 paddr 0x08000228 align 2**12
         filesz 0x00015cdc memsz 0x00015cdc flags r-x
    LOAD off    0x00017f04 vaddr 0x08015f04 paddr 0x08017b04 align 2**12
         filesz 0x00001c00 memsz 0x00001c00 flags rw-
    LOAD off    0x0001a704 vaddr 0x08019704 paddr 0x08019704 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00020020  08000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015480  08000228  08000228  00002228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000085c  080156a8  080156a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c00  08015f04  08017b04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  08019704  08019704  0001a704  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00020248  00020248  00019b04  2**0
                  CONTENTS
  7 .SDRAM_controller 00000000  08019870  08019870  00019b04  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019b04  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001230  00000000  00000000  00019b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028f98  00000000  00000000  0001ad58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b01d  00000000  00000000  00043cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e373  00000000  00000000  0004ed0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002edc  00000000  00000000  0005d080  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004bfc  00000000  00000000  0005ff5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cc75  00000000  00000000  00064b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000817d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f80  00000000  00000000  00081830  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00087ac6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000017  00000000  00000000  00087ac9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00087ae0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00087ae1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00087ae2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00087ae6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00087aea  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00087aee  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00087af9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00087b04  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00087b0f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00087b1a  2**0
                  CONTENTS, READONLY
 30 .jdi          0000baf4  00000000  00000000  00087b59  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000c10f3  00000000  00000000  0009364d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
08000228 l    d  .text	00000000 .text
080156a8 l    d  .rodata	00000000 .rodata
08015f04 l    d  .rwdata	00000000 .rwdata
08019704 l    d  .bss	00000000 .bss
00020248 l    d  .onchip_memory	00000000 .onchip_memory
08019870 l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_3_Sound_Acquisition_bsp//obj/HAL/src/crt0.o
08000270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Sound_acquisition.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
08015a30 l     O .rodata	00000108 two_over_pi
080159b0 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
08015b78 l     O .rodata	00000010 init_jk
08015b38 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
08015f04 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08015cd2 l     O .rodata	00000010 zeroes.4404
080096c0 l     F .text	000000bc __sbprintf
08015ce2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080098d0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800b400 l     F .text	00000008 __fp_unlock
0800b414 l     F .text	0000019c __sinit.part.1
0800b5b0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
08016348 l     O .rwdata	00000020 lc_ctype_charset
08016328 l     O .rwdata	00000020 lc_message_charset
08016368 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08015d10 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e938 l     F .text	000000fc __sprint_r.part.0
08015e44 l     O .rodata	00000010 blanks.4348
08015e34 l     O .rodata	00000010 zeroes.4349
0800fec4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0801140c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08011518 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08011544 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08011630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08011710 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080117fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
080119d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08017ae4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08011c4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08011d80 l     F .text	00000034 alt_dev_reg
08011db4 l     F .text	0000003c alt_get_errno
08011df0 l     F .text	00000068 alt_avalon_mutex_reg
08016950 l     O .rwdata	00001060 jtag_uart_0
080179b0 l     O .rwdata	00000048 mailbox_to_FFT
080179f8 l     O .rwdata	00000048 mailbox_to_Sound_Acquisition
08017a40 l     O .rwdata	00000010 mutex_SDRAM
08017a50 l     O .rwdata	00000030 audio_and_video_config_0
08017a80 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08012140 l     F .text	00000210 altera_avalon_jtag_uart_irq
08012350 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
08012988 l     F .text	00000090 altera_avalon_mailbox_identify
08012a18 l     F .text	00000078 altera_avalon_mailbox_post
08012a90 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
08012bcc l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
080132c0 l     F .text	0000003c alt_get_errno
080132fc l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080146fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08014960 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08014c20 l     F .text	0000003c alt_get_errno
08014c5c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08019744 g     O .bss	00000004 alt_instruction_exception_handler
08013e78 g     F .text	00000038 alt_up_av_config_reset
0800dff0 g     F .text	00000074 _mprec_log10
080142d0 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
08013034 g     F .text	00000150 altera_avalon_mailbox_send
0800e0dc g     F .text	0000008c __any_on
08010460 g     F .text	00000054 _isatty_r
08015d1c g     O .rodata	00000028 __mprec_tinytens
08013ee8 g     F .text	00000034 alt_up_av_config_disable_interrupt
0801190c g     F .text	0000007c alt_main
08007340 g     F .text	000000c0 _puts_r
08019770 g     O .bss	00000100 alt_irq
08002f64 g     F .text	00000014 fabs
080104b4 g     F .text	00000060 _lseek_r
08000f40 g     F .text	00000130 sqrt
08017b04 g       *ABS*	00000000 __flash_rwdata_start
08005be0 g     F .text	00000088 .hidden __eqdf2
08019708 g     O .bss	00000004 processed_file_length
08013834 g     F .text	00000060 alt_up_audio_read_fifo_avail
08013fac g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
08019870 g       *ABS*	00000000 __alt_heap_start
08007304 g     F .text	0000003c printf
08013894 g     F .text	00000068 alt_up_audio_record_r
080106cc g     F .text	0000009c _wcrtomb_r
0800e7f8 g     F .text	0000005c __sseek
0800b750 g     F .text	00000010 __sinit
08010574 g     F .text	00000140 __swbuf_r
0800c218 g     F .text	0000007c _setlocale_r
0800b5b8 g     F .text	00000068 __sfmoreglue
080119ac g     F .text	00000024 __malloc_unlock
08003a14 g     F .text	00000440 .hidden __divsf3
080137a0 g     F .text	00000094 alt_up_audio_reset_audio_core
0800cee8 g     F .text	0000015c memmove
0800b738 g     F .text	00000018 _cleanup
08013434 g     F .text	00000040 altera_avalon_mutex_trylock
0800d16c g     F .text	000000a8 _Balloc
080048b8 g     F .text	00000070 .hidden __fixsfsi
08005c68 g     F .text	000000dc .hidden __gtdf2
08015018 g     F .text	00000024 altera_nios2_gen2_irq_init
080072c4 g     F .text	00000010 __errno
00020000 g     F .entry	0000001c __reset
080134c8 g     F .text	00000074 altera_avalon_mutex_is_mine
08000000 g       *ABS*	00000000 __flash_exceptions_start
08010404 g     F .text	0000005c _fstat_r
08019728 g     O .bss	00000004 errno
08002f78 g     F .text	000001ec floor
0800e774 g     F .text	00000008 __seofread
08013760 g     F .text	00000040 alt_up_audio_write_interrupt_pending
08019730 g     O .bss	00000004 alt_argv
0801fab0 g       *ABS*	00000000 _gp
08013184 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
08011c1c g     F .text	00000030 usleep
080043d4 g     F .text	000004e4 .hidden __subsf3
080167d0 g     O .rwdata	00000180 alt_fd_list
08001070 g     F .text	0000076c __ieee754_rem_pio2
0801489c g     F .text	00000090 alt_find_dev
0800cda0 g     F .text	00000148 memcpy
0800b408 g     F .text	0000000c _cleanup_r
08006ecc g     F .text	000000dc .hidden __floatsidf
08014a24 g     F .text	0000007c alt_io_redirect
08005d44 g     F .text	000000f4 .hidden __ltdf2
080156a8 g       *ABS*	00000000 __DTOR_END__
08007400 g     F .text	00000014 puts
08015278 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08012c78 g     F .text	00000078 altera_avalon_mailbox_simple_init
08003164 g     F .text	00000074 __fpclassifyd
0800df4c g     F .text	000000a4 __ratio
0800fea8 g     F .text	0000001c __vfiprintf_internal
08013c7c g     F .text	00000050 alt_up_audio_read_fifo_head
08012548 g     F .text	0000021c altera_avalon_jtag_uart_read
080072d4 g     F .text	00000030 _printf_r
08003490 g     F .text	00000064 .hidden __udivsi3
0801166c g     F .text	000000a4 isatty
08015d6c g     O .rodata	000000c8 __mprec_tens
08012fbc g     F .text	00000078 altera_avalon_mailbox_status
08012eb4 g     F .text	00000108 altera_avalon_mailbox_close
0800c294 g     F .text	0000000c __locale_charset
08001a64 g     F .text	000004a4 __kernel_cos
08003f10 g     F .text	000000c8 .hidden __lesf2
080151e8 g     F .text	00000090 alt_icache_flush
08019724 g     O .bss	00000004 __malloc_top_pad
08013df8 g     F .text	00000080 alt_up_av_config_read_data
08017abc g     O .rwdata	00000004 __mb_cur_max
0800c2c4 g     F .text	0000000c _localeconv_r
0800d578 g     F .text	0000003c __i2b
0800bbd4 g     F .text	000004bc __sfvwrite_r
0800e6cc g     F .text	00000054 _sbrk_r
08010514 g     F .text	00000060 _read_r
08017adc g     O .rwdata	00000004 alt_max_fd
08013ccc g     F .text	00000068 alt_up_audio_write_fifo_head
080100f8 g     F .text	000000f0 _fclose_r
0800b3d0 g     F .text	00000030 fflush
08019720 g     O .bss	00000004 __malloc_max_sbrked_mem
08014aa0 g     F .text	00000180 alt_irq_register
08002c98 g     F .text	000002cc __kernel_sin
08006fa8 g     F .text	00000110 .hidden __extendsfdf2
08004a4c g     F .text	000008ac .hidden __adddf3
0800dcf4 g     F .text	0000010c __b2d
08010e2c g     F .text	00000538 .hidden __umoddi3
08011838 g     F .text	000000d4 lseek
0801353c g     F .text	00000050 altera_avalon_mutex_first_lock
08017ab0 g     O .rwdata	00000004 __fdlib_version
08017ab4 g     O .rwdata	00000004 _global_impure_ptr
0800e168 g     F .text	00000564 _realloc_r
08019870 g       *ABS*	00000000 __bss_end
08014f10 g     F .text	00000108 alt_tick
08019704 g     O .bss	00000001 file_ready_to_play
080108b4 g     F .text	00000578 .hidden __udivdi3
08010360 g     F .text	00000024 _fputwc_r
0801970c g     O .bss	00000004 processed_file
08000c60 g     F .text	000000e8 start_recording
08015d44 g     O .rodata	00000028 __mprec_bigtens
0800d35c g     F .text	00000104 __s2b
08011364 g     F .text	000000a8 .hidden __floatunsidf
0800da34 g     F .text	00000060 __mcmp
0801358c g     F .text	0000003c alt_up_audio_open_dev
0800b770 g     F .text	00000018 __fp_lock_all
08000b18 g     F .text	00000148 average_amplitude
080139c4 g     F .text	00000068 alt_up_audio_play_r
08014e74 g     F .text	0000009c alt_alarm_stop
08000d9c g     F .text	000000b4 receiver_mailbox_callback
08019738 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d8 alt_irq_handler
080167a8 g     O .rwdata	00000028 alt_dev_null
08001f08 g     F .text	00000d90 __kernel_rem_pio2
08013378 g     F .text	00000054 altera_avalon_mutex_open
080146b4 g     F .text	00000048 alt_dcache_flush_all
0800d460 g     F .text	00000068 __hi0bits
08006e4c g     F .text	00000080 .hidden __fixdfsi
08017b04 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
08017ad4 g     O .rwdata	00000008 alt_dev_list
08011c88 g     F .text	000000f8 write
08003e54 g     F .text	000000bc .hidden __gtsf2
08017af0 g     O .rwdata	00000008 alt_mutex_list
08015f04 g       *ABS*	00000000 __ram_rodata_end
08011580 g     F .text	000000b0 fstat
08005d44 g     F .text	000000f4 .hidden __ledf2
0800d7ac g     F .text	00000140 __pow5mult
0800ea4c g     F .text	0000145c ___vfiprintf_internal_r
08019718 g     O .bss	00000004 __nlocale_changed
080034f4 g     F .text	00000058 .hidden __umodsi3
08019870 g       *ABS*	00000000 end
0801208c g     F .text	000000b4 altera_avalon_jtag_uart_init
000201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
080156a8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08007260 g     F .text	00000064 .hidden __clzsi2
08012764 g     F .text	00000224 altera_avalon_jtag_uart_write
0800b760 g     F .text	00000004 __sfp_lock_acquire
0800ccbc g     F .text	000000e4 memchr
080074ac g     F .text	000021f8 ___vfprintf_internal_r
0800b8c4 g     F .text	00000310 _free_r
0800c2a0 g     F .text	00000010 __locale_mb_cur_max
080154f4 g     F .text	00000180 __call_exitprocs
08019714 g     O .bss	00000004 __mlocale_changed
08017ac0 g     O .rwdata	00000004 __malloc_sbrk_base
08000228 g     F .text	0000004c _start
0801973c g     O .bss	00000004 _alt_tick_rate
0800076c g     F .text	00000110 play_file
08000e50 g     F .text	000000f0 sin
08013b74 g     F .text	00000108 alt_up_audio_write_fifo
0800d8ec g     F .text	00000148 __lshift
08013d94 g     F .text	00000064 alt_up_av_config_write_data
08019740 g     O .bss	00000004 _alt_nticks
08011a0c g     F .text	000000fc read
08011e90 g     F .text	00000098 alt_sys_init
08004928 g     F .text	00000124 .hidden __floatsisf
08013a94 g     F .text	000000e0 alt_up_audio_read_fifo
080153dc g     F .text	00000118 __register_exitproc
080143d8 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
080136c8 g     F .text	00000058 alt_up_audio_disable_write_interrupt
08013474 g     F .text	00000054 altera_avalon_mutex_unlock
0800d5b4 g     F .text	000001f8 __multiply
080123f0 g     F .text	00000068 altera_avalon_jtag_uart_close
08015f04 g       *ABS*	00000000 __ram_rwdata_start
080156a8 g       *ABS*	00000000 __ram_rodata_start
08019748 g     O .bss	00000028 __malloc_current_mallinfo
0800de00 g     F .text	0000014c __d2b
08000a7c g     F .text	0000009c show_amplitude_on_LEDS
08011f28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08015144 g     F .text	000000a4 alt_get_fd
0801455c g     F .text	00000158 alt_busy_sleep
0800ffe0 g     F .text	00000054 _close_r
08013674 g     F .text	00000054 alt_up_audio_enable_write_interrupt
08015360 g     F .text	0000007c memcmp
08011fe8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08019870 g       *ABS*	00000000 __alt_stack_base
08012038 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800977c g     F .text	00000154 __swsetup_r
080052f8 g     F .text	000008e8 .hidden __divdf3
0801361c g     F .text	00000058 alt_up_audio_disable_read_interrupt
0800b620 g     F .text	00000118 __sfp
0800e064 g     F .text	00000078 __copybits
080163a0 g     O .rwdata	00000408 __malloc_av_
0800b76c g     F .text	00000004 __sinit_lock_release
08005e38 g     F .text	00000718 .hidden __muldf3
0800e720 g     F .text	00000054 __sread
0801503c g     F .text	00000108 alt_find_file
08014738 g     F .text	000000a4 alt_dev_llist_insert
08011988 g     F .text	00000024 __malloc_lock
08011b6c g     F .text	000000b0 sbrk
0800b374 g     F .text	0000005c _fflush_r
08010034 g     F .text	000000c4 _calloc_r
08019704 g       *ABS*	00000000 __bss_start
0800d044 g     F .text	00000128 memset
08000274 g     F .text	000004f8 main
08013964 g     F .text	00000060 alt_up_audio_write_fifo_space
08019734 g     O .bss	00000004 alt_envp
0801971c g     O .bss	00000004 __malloc_max_total_mem
08011f88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080106b4 g     F .text	00000018 __swbuf
08003f10 g     F .text	000000c8 .hidden __ltsf2
0800e854 g     F .text	00000008 __sclose
080031d8 g     F .text	00000008 matherr
0c000000 g       *ABS*	00000000 __alt_heap_limit
080101e8 g     F .text	00000014 fclose
080070b8 g     F .text	000001a8 .hidden __truncdfsf2
080133f0 g     F .text	00000044 altera_avalon_mutex_lock
08009ad0 g     F .text	00001688 _dtoa_r
0800c4b0 g     F .text	0000080c _malloc_r
08010828 g     F .text	00000030 __ascii_wctomb
08017ae0 g     O .rwdata	00000004 alt_errno
0800c090 g     F .text	000000c4 _fwalk
08003398 g     F .text	00000084 .hidden __divsi3
0800b7a0 g     F .text	00000124 _malloc_trim_r
080156a8 g       *ABS*	00000000 __CTOR_END__
08003fd8 g     F .text	000003fc .hidden __mulsf3
0800e85c g     F .text	000000dc strcmp
080156a8 g       *ABS*	00000000 __flash_rodata_start
080156a8 g       *ABS*	00000000 __DTOR_LIST__
0800337c g     F .text	0000001c copysign
08005be0 g     F .text	00000088 .hidden __nedf2
08000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
08013d34 g     F .text	00000060 alt_up_av_config_open_dev
08011e58 g     F .text	00000038 alt_irq_init
08011b08 g     F .text	00000064 alt_release_fd
08015b88 g     O .rodata	00000100 .hidden __clz_tab
08019710 g     O .bss	00000004 _PathLocale
0800087c g     F .text	00000200 generate_sinusoid
08015314 g     F .text	00000014 atexit
08003e54 g     F .text	000000bc .hidden __gesf2
0800ff80 g     F .text	00000060 _write_r
08013f74 g     F .text	00000038 alt_up_av_config_read_ready
0800c2d0 g     F .text	00000018 setlocale
08017ab8 g     O .rwdata	00000004 _impure_ptr
0801972c g     O .bss	00000004 alt_argc
0800b158 g     F .text	0000021c __sflush_r
080031e0 g     F .text	0000019c scalbn
0801483c g     F .text	00000060 _do_dtors
0800c2bc g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
0800dc90 g     F .text	00000064 __ulp
0800b788 g     F .text	00000018 __fp_unlock_all
08017acc g     O .rwdata	00000008 alt_fs_list
080138fc g     F .text	00000068 alt_up_audio_record_l
00020020 g       *ABS*	00000000 __ram_exceptions_start
0800c2e8 g     F .text	0000000c localeconv
080017dc g     F .text	00000288 __ieee754_sqrt
08013eb0 g     F .text	00000038 alt_up_av_config_enable_interrupt
08013f1c g     F .text	00000058 alt_up_av_config_read_acknowledge
08014278 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
08017b04 g       *ABS*	00000000 _edata
08019870 g       *ABS*	00000000 _end
080101fc g     F .text	00000164 __fputwc
00020248 g       *ABS*	00000000 __ram_exceptions_end
08012458 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08013a2c g     F .text	00000068 alt_up_audio_play_l
08017ae8 g     O .rwdata	00000008 alt_mailbox_simple_list
0800e77c g     F .text	0000007c __swrite
08017ac4 g     O .rwdata	00000004 __malloc_trim_threshold
0800c2b0 g     F .text	0000000c __locale_msgcharset
08015328 g     F .text	00000038 exit
0800c154 g     F .text	000000c4 _fwalk_reent
0800da94 g     F .text	000001fc __mdiff
08014380 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
0800341c g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0800b764 g     F .text	00000004 __sfp_lock_release
08012cf0 g     F .text	000001c4 altera_avalon_mailbox_open
08015674 g     F .text	00000034 _exit
08014430 g     F .text	0000012c alt_alarm_start
0800c2f4 g     F .text	000001bc __smakebuf_r
08007414 g     F .text	00000098 strlen
08014d20 g     F .text	00000154 open
08005c68 g     F .text	000000dc .hidden __gedf2
08014050 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
08017ac8 g     O .rwdata	00000004 __wctomb
08000d48 g     F .text	00000054 sender_mailbox_callback
0800ea34 g     F .text	00000018 __sprint_r
0801492c g     F .text	00000034 alt_icache_flush_all
08017af8 g     O .rwdata	00000004 alt_priority_mask
080096a4 g     F .text	0000001c __vfprintf_internal
080133cc g     F .text	00000024 altera_avalon_mutex_close
08014328 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
08010858 g     F .text	0000005c _wctomb_r
08006550 g     F .text	000008fc .hidden __subdf3
0800d4c8 g     F .text	000000b0 __lo0bits
08017afc g     O .rwdata	00000008 alt_alarm_list
080147dc g     F .text	00000060 _do_ctors
08010768 g     F .text	000000c0 wcrtomb
08011448 g     F .text	000000d0 close
0800354c g     F .text	000004c8 .hidden __addsf3
08011778 g     F .text	00000084 alt_load
080135c8 g     F .text	00000054 alt_up_audio_enable_read_interrupt
08014138 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
08010384 g     F .text	00000080 fputwc
0800b768 g     F .text	00000004 __sinit_lock_acquire
0800d23c g     F .text	00000120 __multadd
0800d214 g     F .text	00000028 _Bfree
08014220 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
08013720 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf4020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   20014:	08408a14 	ori	at,at,552
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d40 	call	201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	008200b4 	movhi	r2,2050
   20140:	10a5dc04 	addi	r2,r2,-26768
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008200b4 	movhi	r2,2050
   20158:	10a5dc04 	addi	r2,r2,-26768
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	e17ffd17 	ldw	r5,-12(fp)
   20174:	1009883a 	mov	r4,r2
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <__alt_data_end+0xf402012c>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <__alt_data_end+0xf4020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	0001883a 	nop
   201c0:	e037883a 	mov	sp,fp
   201c4:	dfc00117 	ldw	ra,4(sp)
   201c8:	df000017 	ldw	fp,0(sp)
   201cc:	dec00204 	addi	sp,sp,8
   201d0:	f800283a 	ret

000201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d4:	defffb04 	addi	sp,sp,-20
   201d8:	dfc00415 	stw	ra,16(sp)
   201dc:	df000315 	stw	fp,12(sp)
   201e0:	df000304 	addi	fp,sp,12
   201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e8:	000531fa 	rdctl	r2,exception
   201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	10801f0c 	andi	r2,r2,124
   201f8:	1004d0ba 	srli	r2,r2,2
   201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20200:	0005333a 	rdctl	r2,badaddr
   20204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20208:	d0a72517 	ldw	r2,-25452(gp)
   2020c:	10000726 	beq	r2,zero,2022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20210:	d0a72517 	ldw	r2,-25452(gp)
   20214:	e0fffd17 	ldw	r3,-12(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	e17fff17 	ldw	r5,-4(fp)
   20220:	1809883a 	mov	r4,r3
   20224:	103ee83a 	callr	r2
   20228:	00000206 	br	20234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20230:	0005883a 	mov	r2,zero
}
   20234:	e037883a 	mov	sp,fp
   20238:	dfc00117 	ldw	ra,4(sp)
   2023c:	df000017 	ldw	fp,0(sp)
   20240:	dec00204 	addi	sp,sp,8
   20244:	f800283a 	ret

Disassembly of section .text:

08000228 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000228:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 800022c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000230:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000234:	00bffd16 	blt	zero,r2,800022c <__alt_data_end+0xfc00022c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000238:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 800023c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000240:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000244:	d6beac14 	ori	gp,gp,64176
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000248:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 800024c:	10a5c114 	ori	r2,r2,38660

    movhi r3, %hi(__bss_end)
 8000250:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000254:	18e61c14 	ori	r3,r3,39024

    beq r2, r3, 1f
 8000258:	10c00326 	beq	r2,r3,8000268 <_start+0x40>

0:
    stw zero, (r2)
 800025c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000264:	10fffd36 	bltu	r2,r3,800025c <__alt_data_end+0xfc00025c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000268:	80117780 	call	8011778 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 800026c:	801190c0 	call	801190c <alt_main>

08000270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000270:	003fff06 	br	8000270 <__alt_data_end+0xfc000270>

08000274 <main>:



//-------------------------------------------- MAIN ------------------------------------------------------
int main()
{
 8000274:	defffe04 	addi	sp,sp,-8
 8000278:	dfc00115 	stw	ra,4(sp)
 800027c:	df000015 	stw	fp,0(sp)
 8000280:	d839883a 	mov	fp,sp
 8000284:	023ffdf4 	movhi	r8,65527
 8000288:	420cf704 	addi	r8,r8,13276
 800028c:	da37883a 	add	sp,sp,r8
	float sound_loudness = 0;
 8000290:	00bffdf4 	movhi	r2,65527
 8000294:	108cf804 	addi	r2,r2,13280
 8000298:	1705883a 	add	r2,r2,fp
 800029c:	10000015 	stw	zero,0(r2)
	unsigned int recording_buffer[RECORDING_BUFFER_SIZE], n_samples_in_FIFO;
	unsigned int beep_sound[BEEP_SAMPLES], recording[RECORDING_SAMPLES];
	alt_up_audio_dev *audio_device;
	alt_up_av_config_dev *audio_config;
	altera_avalon_mailbox_dev *sender_mailbox, *receiver_mailbox;	// handle to the Mailbox
	alt_u32 message[2] =  {0x00001111, 0xaa55aa55};
 80002a0:	00800274 	movhi	r2,9
 80002a4:	10b30604 	addi	r2,r2,-13288
 80002a8:	00fffdf4 	movhi	r3,65527
 80002ac:	18ccf804 	addi	r3,r3,13280
 80002b0:	1f07883a 	add	r3,r3,fp
 80002b4:	1885883a 	add	r2,r3,r2
 80002b8:	00c44444 	movi	r3,4369
 80002bc:	10c00015 	stw	r3,0(r2)
 80002c0:	00800274 	movhi	r2,9
 80002c4:	10b30604 	addi	r2,r2,-13288
 80002c8:	013ffdf4 	movhi	r4,65527
 80002cc:	210cf804 	addi	r4,r4,13280
 80002d0:	2709883a 	add	r4,r4,fp
 80002d4:	2087883a 	add	r3,r4,r2
 80002d8:	00aa95b4 	movhi	r2,43606
 80002dc:	10aa9544 	addi	r2,r2,-21931
 80002e0:	18800115 	stw	r2,4(r3)


	/* Open mailbox on sender processor */
	sender_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_FFT", sender_mailbox_callback, NULL);
 80002e4:	000d883a 	mov	r6,zero
 80002e8:	01420034 	movhi	r5,2048
 80002ec:	29435204 	addi	r5,r5,3400
 80002f0:	01020074 	movhi	r4,2049
 80002f4:	2115aa04 	addi	r4,r4,22184
 80002f8:	8012cf00 	call	8012cf0 <altera_avalon_mailbox_open>
 80002fc:	00fffdf4 	movhi	r3,65527
 8000300:	18ccf904 	addi	r3,r3,13284
 8000304:	1f07883a 	add	r3,r3,fp
 8000308:	18800015 	stw	r2,0(r3)
	if (!sender_mailbox){
 800030c:	013ffdf4 	movhi	r4,65527
 8000310:	210cf904 	addi	r4,r4,13284
 8000314:	2709883a 	add	r4,r4,fp
 8000318:	20800017 	ldw	r2,0(r4)
 800031c:	1000051e 	bne	r2,zero,8000334 <main+0xc0>
		printf ("FAIL: Unable to open mailbox to other processor\n");
 8000320:	01020074 	movhi	r4,2049
 8000324:	2115af04 	addi	r4,r4,22204
 8000328:	80074000 	call	8007400 <puts>
		return 1;
 800032c:	00800044 	movi	r2,1
 8000330:	00010906 	br	8000758 <main+0x4e4>
	}
	receiver_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_Sound_Acquisition", NULL, receiver_mailbox_callback);
 8000334:	01820034 	movhi	r6,2048
 8000338:	31836704 	addi	r6,r6,3484
 800033c:	000b883a 	mov	r5,zero
 8000340:	01020074 	movhi	r4,2049
 8000344:	2115bb04 	addi	r4,r4,22252
 8000348:	8012cf00 	call	8012cf0 <altera_avalon_mailbox_open>
 800034c:	00fffdf4 	movhi	r3,65527
 8000350:	18ccfa04 	addi	r3,r3,13288
 8000354:	1f07883a 	add	r3,r3,fp
 8000358:	18800015 	stw	r2,0(r3)
	if (!receiver_mailbox){
 800035c:	013ffdf4 	movhi	r4,65527
 8000360:	210cfa04 	addi	r4,r4,13288
 8000364:	2709883a 	add	r4,r4,fp
 8000368:	20800017 	ldw	r2,0(r4)
 800036c:	1000051e 	bne	r2,zero,8000384 <main+0x110>
		printf ("FAIL: Unable to open mailbox from other processor\n");
 8000370:	01020074 	movhi	r4,2049
 8000374:	2115c404 	addi	r4,r4,22288
 8000378:	80074000 	call	8007400 <puts>
		return 1;
 800037c:	00800044 	movi	r2,1
 8000380:	0000f506 	br	8000758 <main+0x4e4>
	}


	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);		// handle to the circuit that interfaces with the audio CODEC
 8000384:	01020074 	movhi	r4,2049
 8000388:	2115d104 	addi	r4,r4,22340
 800038c:	801358c0 	call	801358c <alt_up_audio_open_dev>
 8000390:	00fffdf4 	movhi	r3,65527
 8000394:	18ccfb04 	addi	r3,r3,13292
 8000398:	1f07883a 	add	r3,r3,fp
 800039c:	18800015 	stw	r2,0(r3)
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME); // handle to the circuit that initializes the audio CODEC
 80003a0:	01020074 	movhi	r4,2049
 80003a4:	2115d504 	addi	r4,r4,22356
 80003a8:	8013d340 	call	8013d34 <alt_up_av_config_open_dev>
 80003ac:	013ffdf4 	movhi	r4,65527
 80003b0:	210cfc04 	addi	r4,r4,13296
 80003b4:	2709883a 	add	r4,r4,fp
 80003b8:	20800015 	stw	r2,0(r4)

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
 80003bc:	00000306 	br	80003cc <main+0x158>
		printf("Audio CODEC not ready\n");
 80003c0:	01020074 	movhi	r4,2049
 80003c4:	2115dd04 	addi	r4,r4,22388
 80003c8:	80074000 	call	8007400 <puts>

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);		// handle to the circuit that interfaces with the audio CODEC
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME); // handle to the circuit that initializes the audio CODEC

	// waits for the audio CODEC to be ready
	while(!alt_up_av_config_read_ready(audio_config)){
 80003cc:	00bffdf4 	movhi	r2,65527
 80003d0:	108cfc04 	addi	r2,r2,13296
 80003d4:	1705883a 	add	r2,r2,fp
 80003d8:	11000017 	ldw	r4,0(r2)
 80003dc:	8013f740 	call	8013f74 <alt_up_av_config_read_ready>
 80003e0:	103ff726 	beq	r2,zero,80003c0 <__alt_data_end+0xfc0003c0>
		printf("Audio CODEC not ready\n");
	}

	// resets the audio CODEC just in case
	if (alt_up_av_config_reset(audio_config))
 80003e4:	00fffdf4 	movhi	r3,65527
 80003e8:	18ccfc04 	addi	r3,r3,13296
 80003ec:	1f07883a 	add	r3,r3,fp
 80003f0:	19000017 	ldw	r4,0(r3)
 80003f4:	8013e780 	call	8013e78 <alt_up_av_config_reset>
 80003f8:	10000326 	beq	r2,zero,8000408 <main+0x194>
		printf("Error resetting the audio CODEC\n");
 80003fc:	01020074 	movhi	r4,2049
 8000400:	2115e304 	addi	r4,r4,22412
 8000404:	80074000 	call	8007400 <puts>


	// initialize the LEDS parallel port
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_LEDS_BASE, 0xFFFFFFFF);	// sets all pins as output
 8000408:	00ffffc4 	movi	r3,-1
 800040c:	00800134 	movhi	r2,4
 8000410:	10840504 	addi	r2,r2,4116
 8000414:	10c00035 	stwio	r3,0(r2)

	// creates a sinusoid in memory to test the jack output
	printf("Generating sinusoid for beep sound. Please wait...\n");
 8000418:	01020074 	movhi	r4,2049
 800041c:	2115eb04 	addi	r4,r4,22444
 8000420:	80074000 	call	8007400 <puts>
	generate_sinusoid(SAMPLING_FREQ, BEEP_FREQUENCY, BEEP_AMPLITUDE, BEEP_SAMPLES, beep_sound);
 8000424:	013ffdf4 	movhi	r4,65527
 8000428:	210d7e04 	addi	r4,r4,13816
 800042c:	e105883a 	add	r2,fp,r4
 8000430:	d8800015 	stw	r2,0(sp)
 8000434:	01eee014 	movui	r7,48000
 8000438:	01800044 	movi	r6,1
 800043c:	0150feb4 	movhi	r5,17402
 8000440:	012ee014 	movui	r4,48000
 8000444:	800087c0 	call	800087c <generate_sinusoid>
	printf("Sinusoid created\n\n\n");
 8000448:	01020074 	movhi	r4,2049
 800044c:	2115f804 	addi	r4,r4,22496
 8000450:	80074000 	call	8007400 <puts>


	// infinite loop that monitors the sound loudness
	printf("Make a loud noise to start recording. Try snapping your fingers.\n");
 8000454:	01020074 	movhi	r4,2049
 8000458:	2115fd04 	addi	r4,r4,22516
 800045c:	80074000 	call	8007400 <puts>
	while(1)
	{
		// reads the incoming FIFO from the audio CODEC (audio from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);	// checks how many elements are in the FIFO
 8000460:	000b883a 	mov	r5,zero
 8000464:	00bffdf4 	movhi	r2,65527
 8000468:	108cfb04 	addi	r2,r2,13292
 800046c:	1705883a 	add	r2,r2,fp
 8000470:	11000017 	ldw	r4,0(r2)
 8000474:	80138340 	call	8013834 <alt_up_audio_read_fifo_avail>
 8000478:	00fffdf4 	movhi	r3,65527
 800047c:	18ccfd04 	addi	r3,r3,13300
 8000480:	1f07883a 	add	r3,r3,fp
 8000484:	18800015 	stw	r2,0(r3)
		alt_up_audio_read_fifo(audio_device, recording_buffer, n_samples_in_FIFO, 0);	// reads the content of the FIFO
 8000488:	013ffdf4 	movhi	r4,65527
 800048c:	210cfd04 	addi	r4,r4,13300
 8000490:	2709883a 	add	r4,r4,fp
 8000494:	20c00017 	ldw	r3,0(r4)
 8000498:	013ffdf4 	movhi	r4,65527
 800049c:	210cfe04 	addi	r4,r4,13304
 80004a0:	e105883a 	add	r2,fp,r4
 80004a4:	000f883a 	mov	r7,zero
 80004a8:	180d883a 	mov	r6,r3
 80004ac:	100b883a 	mov	r5,r2
 80004b0:	00bffdf4 	movhi	r2,65527
 80004b4:	108cfb04 	addi	r2,r2,13292
 80004b8:	1705883a 	add	r2,r2,fp
 80004bc:	11000017 	ldw	r4,0(r2)
 80004c0:	8013a940 	call	8013a94 <alt_up_audio_read_fifo>

		sound_loudness = average_amplitude(recording_buffer, n_samples_in_FIFO);	// computes the sound loudness
 80004c4:	013ffdf4 	movhi	r4,65527
 80004c8:	210cfd04 	addi	r4,r4,13300
 80004cc:	2709883a 	add	r4,r4,fp
 80004d0:	20c00017 	ldw	r3,0(r4)
 80004d4:	013ffdf4 	movhi	r4,65527
 80004d8:	210cfe04 	addi	r4,r4,13304
 80004dc:	e105883a 	add	r2,fp,r4
 80004e0:	180b883a 	mov	r5,r3
 80004e4:	1009883a 	mov	r4,r2
 80004e8:	8000b180 	call	8000b18 <average_amplitude>
 80004ec:	00fffdf4 	movhi	r3,65527
 80004f0:	18ccf804 	addi	r3,r3,13280
 80004f4:	1f07883a 	add	r3,r3,fp
 80004f8:	18800015 	stw	r2,0(r3)
		show_amplitude_on_LEDS(sound_loudness);		// shows the amplitude on the LEDs
 80004fc:	00bffdf4 	movhi	r2,65527
 8000500:	108cf804 	addi	r2,r2,13280
 8000504:	1705883a 	add	r2,r2,fp
 8000508:	11000017 	ldw	r4,0(r2)
 800050c:	8000a7c0 	call	8000a7c <show_amplitude_on_LEDS>
		if (sound_loudness > LOUDNESS_THRESHOLD)
 8000510:	014fc034 	movhi	r5,16128
 8000514:	00fffdf4 	movhi	r3,65527
 8000518:	18ccf804 	addi	r3,r3,13280
 800051c:	1f07883a 	add	r3,r3,fp
 8000520:	19000017 	ldw	r4,0(r3)
 8000524:	8003e540 	call	8003e54 <__gesf2>
 8000528:	00807b0e 	bge	zero,r2,8000718 <main+0x4a4>
		{
			printf("Loud noise detected! Recording starting in:\n3...\n");
 800052c:	01020074 	movhi	r4,2049
 8000530:	21160e04 	addi	r4,r4,22584
 8000534:	80074000 	call	8007400 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 8000538:	013ffdf4 	movhi	r4,65527
 800053c:	210d7e04 	addi	r4,r4,13816
 8000540:	e105883a 	add	r2,fp,r4
 8000544:	00fffdf4 	movhi	r3,65527
 8000548:	18ccfb04 	addi	r3,r3,13292
 800054c:	1f07883a 	add	r3,r3,fp
 8000550:	19800017 	ldw	r6,0(r3)
 8000554:	016ee014 	movui	r5,48000
 8000558:	1009883a 	mov	r4,r2
 800055c:	800076c0 	call	800076c <play_file>
			usleep(500000);
 8000560:	01000234 	movhi	r4,8
 8000564:	21284804 	addi	r4,r4,-24288
 8000568:	8011c1c0 	call	8011c1c <usleep>
			printf("2...\n");
 800056c:	01020074 	movhi	r4,2049
 8000570:	21161b04 	addi	r4,r4,22636
 8000574:	80074000 	call	8007400 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 8000578:	013ffdf4 	movhi	r4,65527
 800057c:	210d7e04 	addi	r4,r4,13816
 8000580:	e105883a 	add	r2,fp,r4
 8000584:	00fffdf4 	movhi	r3,65527
 8000588:	18ccfb04 	addi	r3,r3,13292
 800058c:	1f07883a 	add	r3,r3,fp
 8000590:	19800017 	ldw	r6,0(r3)
 8000594:	016ee014 	movui	r5,48000
 8000598:	1009883a 	mov	r4,r2
 800059c:	800076c0 	call	800076c <play_file>
			usleep(500000);
 80005a0:	01000234 	movhi	r4,8
 80005a4:	21284804 	addi	r4,r4,-24288
 80005a8:	8011c1c0 	call	8011c1c <usleep>
			printf("1...\n");
 80005ac:	01020074 	movhi	r4,2049
 80005b0:	21161d04 	addi	r4,r4,22644
 80005b4:	80074000 	call	8007400 <puts>
			play_file(beep_sound, BEEP_SAMPLES, audio_device);
 80005b8:	013ffdf4 	movhi	r4,65527
 80005bc:	210d7e04 	addi	r4,r4,13816
 80005c0:	e105883a 	add	r2,fp,r4
 80005c4:	00fffdf4 	movhi	r3,65527
 80005c8:	18ccfb04 	addi	r3,r3,13292
 80005cc:	1f07883a 	add	r3,r3,fp
 80005d0:	19800017 	ldw	r6,0(r3)
 80005d4:	016ee014 	movui	r5,48000
 80005d8:	1009883a 	mov	r4,r2
 80005dc:	800076c0 	call	800076c <play_file>
			usleep(500000);
 80005e0:	01000234 	movhi	r4,8
 80005e4:	21284804 	addi	r4,r4,-24288
 80005e8:	8011c1c0 	call	8011c1c <usleep>

			printf("Recording...\n");
 80005ec:	01020074 	movhi	r4,2049
 80005f0:	21161f04 	addi	r4,r4,22652
 80005f4:	80074000 	call	8007400 <puts>
			start_recording(recording, RECORDING_SAMPLES, audio_device);	// starts the recording
 80005f8:	008000f4 	movhi	r2,3
 80005fc:	10bc0604 	addi	r2,r2,-4072
 8000600:	013ffdf4 	movhi	r4,65527
 8000604:	210cf804 	addi	r4,r4,13280
 8000608:	2709883a 	add	r4,r4,fp
 800060c:	2085883a 	add	r2,r4,r2
 8000610:	00fffdf4 	movhi	r3,65527
 8000614:	18ccfb04 	addi	r3,r3,13292
 8000618:	1f07883a 	add	r3,r3,fp
 800061c:	19800017 	ldw	r6,0(r3)
 8000620:	01400074 	movhi	r5,1
 8000624:	295dc004 	addi	r5,r5,30464
 8000628:	1009883a 	mov	r4,r2
 800062c:	8000c600 	call	8000c60 <start_recording>
			printf("Finished recording...\n");
 8000630:	01020074 	movhi	r4,2049
 8000634:	21162304 	addi	r4,r4,22668
 8000638:	80074000 	call	8007400 <puts>

			message[0] = recording;			// puts the address of the file containing the recording
 800063c:	008000f4 	movhi	r2,3
 8000640:	10bc0604 	addi	r2,r2,-4072
 8000644:	013ffdf4 	movhi	r4,65527
 8000648:	210cf804 	addi	r4,r4,13280
 800064c:	2709883a 	add	r4,r4,fp
 8000650:	2087883a 	add	r3,r4,r2
 8000654:	00800274 	movhi	r2,9
 8000658:	10b30604 	addi	r2,r2,-13288
 800065c:	013ffdf4 	movhi	r4,65527
 8000660:	210cf804 	addi	r4,r4,13280
 8000664:	2709883a 	add	r4,r4,fp
 8000668:	2085883a 	add	r2,r4,r2
 800066c:	10c00015 	stw	r3,0(r2)
			message[1] = RECORDING_SAMPLES;	// puts the length of the file
 8000670:	00800274 	movhi	r2,9
 8000674:	10b30604 	addi	r2,r2,-13288
 8000678:	013ffdf4 	movhi	r4,65527
 800067c:	210cf804 	addi	r4,r4,13280
 8000680:	2709883a 	add	r4,r4,fp
 8000684:	2087883a 	add	r3,r4,r2
 8000688:	00800074 	movhi	r2,1
 800068c:	109dc004 	addi	r2,r2,30464
 8000690:	18800115 	stw	r2,4(r3)
			printf("Sending file information: address: 0x%x \t length: %u \n\n", message[0], message[1]);
 8000694:	00800274 	movhi	r2,9
 8000698:	10b30604 	addi	r2,r2,-13288
 800069c:	00fffdf4 	movhi	r3,65527
 80006a0:	18ccf804 	addi	r3,r3,13280
 80006a4:	1f07883a 	add	r3,r3,fp
 80006a8:	1885883a 	add	r2,r3,r2
 80006ac:	10c00017 	ldw	r3,0(r2)
 80006b0:	00800274 	movhi	r2,9
 80006b4:	10b30604 	addi	r2,r2,-13288
 80006b8:	013ffdf4 	movhi	r4,65527
 80006bc:	210cf804 	addi	r4,r4,13280
 80006c0:	2709883a 	add	r4,r4,fp
 80006c4:	2085883a 	add	r2,r4,r2
 80006c8:	10800117 	ldw	r2,4(r2)
 80006cc:	100d883a 	mov	r6,r2
 80006d0:	180b883a 	mov	r5,r3
 80006d4:	01020074 	movhi	r4,2049
 80006d8:	21162904 	addi	r4,r4,22692
 80006dc:	80073040 	call	8007304 <printf>
			altera_avalon_mailbox_send (sender_mailbox, message, 0, ISR);	// sends the info through the mailbox
 80006e0:	00800274 	movhi	r2,9
 80006e4:	10b30604 	addi	r2,r2,-13288
 80006e8:	00fffdf4 	movhi	r3,65527
 80006ec:	18ccf804 	addi	r3,r3,13280
 80006f0:	1f07883a 	add	r3,r3,fp
 80006f4:	1885883a 	add	r2,r3,r2
 80006f8:	000f883a 	mov	r7,zero
 80006fc:	000d883a 	mov	r6,zero
 8000700:	100b883a 	mov	r5,r2
 8000704:	00bffdf4 	movhi	r2,65527
 8000708:	108cf904 	addi	r2,r2,13284
 800070c:	1705883a 	add	r2,r2,fp
 8000710:	11000017 	ldw	r4,0(r2)
 8000714:	80130340 	call	8013034 <altera_avalon_mailbox_send>
			//play_file(recording, RECORDING_SAMPLES, audio_device);			// plays back the recording
		}


		// if the others processor signals that the file is ready: it plays the file
		if (file_ready_to_play)
 8000718:	d0a71503 	ldbu	r2,-25516(gp)
 800071c:	10803fcc 	andi	r2,r2,255
 8000720:	1080201c 	xori	r2,r2,128
 8000724:	10bfe004 	addi	r2,r2,-128
 8000728:	103f4d26 	beq	r2,zero,8000460 <__alt_data_end+0xfc000460>
		{
			play_file(processed_file, processed_file_length, audio_device);			// plays back the recording
 800072c:	d0a71717 	ldw	r2,-25508(gp)
 8000730:	d0e71617 	ldw	r3,-25512(gp)
 8000734:	013ffdf4 	movhi	r4,65527
 8000738:	210cfb04 	addi	r4,r4,13292
 800073c:	2709883a 	add	r4,r4,fp
 8000740:	21800017 	ldw	r6,0(r4)
 8000744:	180b883a 	mov	r5,r3
 8000748:	1009883a 	mov	r4,r2
 800074c:	800076c0 	call	800076c <play_file>
			file_ready_to_play = 0;
 8000750:	d0271505 	stb	zero,-25516(gp)
		}
	}
 8000754:	003f4206 	br	8000460 <__alt_data_end+0xfc000460>


	altera_avalon_mailbox_close (sender_mailbox); 	// closing the handle to the mailbox
	altera_avalon_mailbox_close (receiver_mailbox); 	// closing the handle to the mailbox
	return 0;
}
 8000758:	e037883a 	mov	sp,fp
 800075c:	dfc00117 	ldw	ra,4(sp)
 8000760:	df000017 	ldw	fp,0(sp)
 8000764:	dec00204 	addi	sp,sp,8
 8000768:	f800283a 	ret

0800076c <play_file>:



// this function plays an audio file trough the output jack (green). To do so it needs to send bursts of data to the outgoing FIFO.
void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device)
{
 800076c:	defff804 	addi	sp,sp,-32
 8000770:	dfc00715 	stw	ra,28(sp)
 8000774:	df000615 	stw	fp,24(sp)
 8000778:	df000604 	addi	fp,sp,24
 800077c:	e13ffd15 	stw	r4,-12(fp)
 8000780:	e17ffe15 	stw	r5,-8(fp)
 8000784:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)
 8000788:	00801904 	movi	r2,100
 800078c:	e0bffb15 	stw	r2,-20(fp)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 8000790:	e03ffa15 	stw	zero,-24(fp)
 8000794:	00003006 	br	8000858 <play_file+0xec>
	{
		file_pointer = file + i;
 8000798:	e0bffa17 	ldw	r2,-24(fp)
 800079c:	1085883a 	add	r2,r2,r2
 80007a0:	1085883a 	add	r2,r2,r2
 80007a4:	1007883a 	mov	r3,r2
 80007a8:	e0bffd17 	ldw	r2,-12(fp)
 80007ac:	10c5883a 	add	r2,r2,r3
 80007b0:	e0bffc15 	stw	r2,-16(fp)
		if (file_size - i > BURST_LENGTH) {
 80007b4:	e0fffe17 	ldw	r3,-8(fp)
 80007b8:	e0bffa17 	ldw	r2,-24(fp)
 80007bc:	1885c83a 	sub	r2,r3,r2
 80007c0:	e0fffb17 	ldw	r3,-20(fp)
 80007c4:	18800b2e 	bgeu	r3,r2,80007f4 <play_file+0x88>
			alt_up_audio_play_r(audio_device, file_pointer, BURST_LENGTH);
 80007c8:	e0bffb17 	ldw	r2,-20(fp)
 80007cc:	100d883a 	mov	r6,r2
 80007d0:	e17ffc17 	ldw	r5,-16(fp)
 80007d4:	e13fff17 	ldw	r4,-4(fp)
 80007d8:	80139c40 	call	80139c4 <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, BURST_LENGTH);
 80007dc:	e0bffb17 	ldw	r2,-20(fp)
 80007e0:	100d883a 	mov	r6,r2
 80007e4:	e17ffc17 	ldw	r5,-16(fp)
 80007e8:	e13fff17 	ldw	r4,-4(fp)
 80007ec:	8013a2c0 	call	8013a2c <alt_up_audio_play_l>
 80007f0:	00000e06 	br	800082c <play_file+0xc0>
		} else {
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
 80007f4:	e0fffe17 	ldw	r3,-8(fp)
 80007f8:	e0bffa17 	ldw	r2,-24(fp)
 80007fc:	1885c83a 	sub	r2,r3,r2
 8000800:	100d883a 	mov	r6,r2
 8000804:	e17ffc17 	ldw	r5,-16(fp)
 8000808:	e13fff17 	ldw	r4,-4(fp)
 800080c:	80139c40 	call	80139c4 <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
 8000810:	e0fffe17 	ldw	r3,-8(fp)
 8000814:	e0bffa17 	ldw	r2,-24(fp)
 8000818:	1885c83a 	sub	r2,r3,r2
 800081c:	100d883a 	mov	r6,r2
 8000820:	e17ffc17 	ldw	r5,-16(fp)
 8000824:	e13fff17 	ldw	r4,-4(fp)
 8000828:	8013a2c0 	call	8013a2c <alt_up_audio_play_l>
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
 800082c:	0001883a 	nop
 8000830:	000b883a 	mov	r5,zero
 8000834:	e13fff17 	ldw	r4,-4(fp)
 8000838:	80139640 	call	8013964 <alt_up_audio_write_fifo_space>
 800083c:	1007883a 	mov	r3,r2
 8000840:	e0bffb17 	ldw	r2,-20(fp)
 8000844:	18bffa36 	bltu	r3,r2,8000830 <__alt_data_end+0xfc000830>
{
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 8000848:	e0fffa17 	ldw	r3,-24(fp)
 800084c:	e0bffb17 	ldw	r2,-20(fp)
 8000850:	1885883a 	add	r2,r3,r2
 8000854:	e0bffa15 	stw	r2,-24(fp)
 8000858:	e0bffe17 	ldw	r2,-8(fp)
 800085c:	e0fffa17 	ldw	r3,-24(fp)
 8000860:	18bfcd36 	bltu	r3,r2,8000798 <__alt_data_end+0xfc000798>
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
	}
}
 8000864:	0001883a 	nop
 8000868:	e037883a 	mov	sp,fp
 800086c:	dfc00117 	ldw	ra,4(sp)
 8000870:	df000017 	ldw	fp,0(sp)
 8000874:	dec00204 	addi	sp,sp,8
 8000878:	f800283a 	ret

0800087c <generate_sinusoid>:


/* creates a sinusoidal waveform in the memory (at the location pointed by "unsigned int *file"), n_samples specifies the length*/
// of the file to create.
void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int n_samples, unsigned int *file)
{
 800087c:	defff404 	addi	sp,sp,-48
 8000880:	dfc00b15 	stw	ra,44(sp)
 8000884:	df000a15 	stw	fp,40(sp)
 8000888:	dc400915 	stw	r17,36(sp)
 800088c:	dc000815 	stw	r16,32(sp)
 8000890:	df000a04 	addi	fp,sp,40
 8000894:	e13ffa15 	stw	r4,-24(fp)
 8000898:	e17ffb15 	stw	r5,-20(fp)
 800089c:	3005883a 	mov	r2,r6
 80008a0:	e1fffd15 	stw	r7,-12(fp)
 80008a4:	e0bffc05 	stb	r2,-16(fp)
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow
 80008a8:	e13ffb17 	ldw	r4,-20(fp)
 80008ac:	8006fa80 	call	8006fa8 <__extendsfdf2>
 80008b0:	1011883a 	mov	r8,r2
 80008b4:	1813883a 	mov	r9,r3
 80008b8:	01951134 	movhi	r6,21572
 80008bc:	318b4604 	addi	r6,r6,11544
 80008c0:	01d00674 	movhi	r7,16409
 80008c4:	39c87ec4 	addi	r7,r7,8699
 80008c8:	4009883a 	mov	r4,r8
 80008cc:	480b883a 	mov	r5,r9
 80008d0:	8005e380 	call	8005e38 <__muldf3>
 80008d4:	1009883a 	mov	r4,r2
 80008d8:	180b883a 	mov	r5,r3
 80008dc:	2021883a 	mov	r16,r4
 80008e0:	2823883a 	mov	r17,r5
 80008e4:	e13ffa17 	ldw	r4,-24(fp)
 80008e8:	8006ecc0 	call	8006ecc <__floatsidf>
 80008ec:	1009883a 	mov	r4,r2
 80008f0:	180b883a 	mov	r5,r3
 80008f4:	200d883a 	mov	r6,r4
 80008f8:	280f883a 	mov	r7,r5
 80008fc:	8009883a 	mov	r4,r16
 8000900:	880b883a 	mov	r5,r17
 8000904:	80052f80 	call	80052f8 <__divdf3>
 8000908:	1009883a 	mov	r4,r2
 800090c:	180b883a 	mov	r5,r3
 8000910:	2005883a 	mov	r2,r4
 8000914:	2807883a 	mov	r3,r5
 8000918:	1009883a 	mov	r4,r2
 800091c:	180b883a 	mov	r5,r3
 8000920:	80070b80 	call	80070b8 <__truncdfsf2>
 8000924:	1007883a 	mov	r3,r2
 8000928:	e0fff715 	stw	r3,-36(fp)

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
 800092c:	e0bffc07 	ldb	r2,-16(fp)
 8000930:	1009883a 	mov	r4,r2
 8000934:	80049280 	call	8004928 <__floatsisf>
 8000938:	1007883a 	mov	r3,r2
 800093c:	0153e034 	movhi	r5,20352
 8000940:	1809883a 	mov	r4,r3
 8000944:	8003fd80 	call	8003fd8 <__mulsf3>
 8000948:	1007883a 	mov	r3,r2
 800094c:	1805883a 	mov	r2,r3
 8000950:	1009883a 	mov	r4,r2
 8000954:	8006fa80 	call	8006fa8 <__extendsfdf2>
 8000958:	1011883a 	mov	r8,r2
 800095c:	1813883a 	mov	r9,r3
 8000960:	000d883a 	mov	r6,zero
 8000964:	01d01674 	movhi	r7,16473
 8000968:	4009883a 	mov	r4,r8
 800096c:	480b883a 	mov	r5,r9
 8000970:	80052f80 	call	80052f8 <__divdf3>
 8000974:	1009883a 	mov	r4,r2
 8000978:	180b883a 	mov	r5,r3
 800097c:	2005883a 	mov	r2,r4
 8000980:	2807883a 	mov	r3,r5
 8000984:	1009883a 	mov	r4,r2
 8000988:	180b883a 	mov	r5,r3
 800098c:	8006e4c0 	call	8006e4c <__fixdfsi>
 8000990:	e0bff815 	stw	r2,-32(fp)
	for(i=0; i<n_samples; i++)
 8000994:	e03ff615 	stw	zero,-40(fp)
 8000998:	00002d06 	br	8000a50 <generate_sinusoid+0x1d4>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
 800099c:	e13ff817 	ldw	r4,-32(fp)
 80009a0:	8006ecc0 	call	8006ecc <__floatsidf>
 80009a4:	1021883a 	mov	r16,r2
 80009a8:	1823883a 	mov	r17,r3
 80009ac:	e13ff617 	ldw	r4,-40(fp)
 80009b0:	80049280 	call	8004928 <__floatsisf>
 80009b4:	1007883a 	mov	r3,r2
 80009b8:	e17ff717 	ldw	r5,-36(fp)
 80009bc:	1809883a 	mov	r4,r3
 80009c0:	8003fd80 	call	8003fd8 <__mulsf3>
 80009c4:	1007883a 	mov	r3,r2
 80009c8:	1805883a 	mov	r2,r3
 80009cc:	1009883a 	mov	r4,r2
 80009d0:	8006fa80 	call	8006fa8 <__extendsfdf2>
 80009d4:	100b883a 	mov	r5,r2
 80009d8:	180d883a 	mov	r6,r3
 80009dc:	2809883a 	mov	r4,r5
 80009e0:	300b883a 	mov	r5,r6
 80009e4:	8000e500 	call	8000e50 <sin>
 80009e8:	1009883a 	mov	r4,r2
 80009ec:	180b883a 	mov	r5,r3
 80009f0:	200d883a 	mov	r6,r4
 80009f4:	280f883a 	mov	r7,r5
 80009f8:	8009883a 	mov	r4,r16
 80009fc:	880b883a 	mov	r5,r17
 8000a00:	8005e380 	call	8005e38 <__muldf3>
 8000a04:	1009883a 	mov	r4,r2
 8000a08:	180b883a 	mov	r5,r3
 8000a0c:	2005883a 	mov	r2,r4
 8000a10:	2807883a 	mov	r3,r5
 8000a14:	1009883a 	mov	r4,r2
 8000a18:	180b883a 	mov	r5,r3
 8000a1c:	8006e4c0 	call	8006e4c <__fixdfsi>
 8000a20:	e0bff915 	stw	r2,-28(fp)
		IOWR_32DIRECT(file, i*4, sample_amplitude);
 8000a24:	e0bff617 	ldw	r2,-40(fp)
 8000a28:	1085883a 	add	r2,r2,r2
 8000a2c:	1085883a 	add	r2,r2,r2
 8000a30:	1007883a 	mov	r3,r2
 8000a34:	e0800217 	ldw	r2,8(fp)
 8000a38:	10c5883a 	add	r2,r2,r3
 8000a3c:	e0fff917 	ldw	r3,-28(fp)
 8000a40:	10c00035 	stwio	r3,0(r2)
{
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
	for(i=0; i<n_samples; i++)
 8000a44:	e0bff617 	ldw	r2,-40(fp)
 8000a48:	10800044 	addi	r2,r2,1
 8000a4c:	e0bff615 	stw	r2,-40(fp)
 8000a50:	e0fff617 	ldw	r3,-40(fp)
 8000a54:	e0bffd17 	ldw	r2,-12(fp)
 8000a58:	18bfd036 	bltu	r3,r2,800099c <__alt_data_end+0xfc00099c>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
		IOWR_32DIRECT(file, i*4, sample_amplitude);
	}
}
 8000a5c:	0001883a 	nop
 8000a60:	e6fffe04 	addi	sp,fp,-8
 8000a64:	dfc00317 	ldw	ra,12(sp)
 8000a68:	df000217 	ldw	fp,8(sp)
 8000a6c:	dc400117 	ldw	r17,4(sp)
 8000a70:	dc000017 	ldw	r16,0(sp)
 8000a74:	dec00404 	addi	sp,sp,16
 8000a78:	f800283a 	ret

08000a7c <show_amplitude_on_LEDS>:


// outputs the amplitude on the LEDs
void show_amplitude_on_LEDS(float amplitude)
{
 8000a7c:	defffd04 	addi	sp,sp,-12
 8000a80:	dfc00215 	stw	ra,8(sp)
 8000a84:	df000115 	stw	fp,4(sp)
 8000a88:	df000104 	addi	fp,sp,4
 8000a8c:	e13fff15 	stw	r4,-4(fp)
	amplitude = sqrt(amplitude);	// the way we perceive sound is not linear, this is why I take the square root of the amplitude
 8000a90:	e13fff17 	ldw	r4,-4(fp)
 8000a94:	8006fa80 	call	8006fa8 <__extendsfdf2>
 8000a98:	100b883a 	mov	r5,r2
 8000a9c:	180d883a 	mov	r6,r3
 8000aa0:	2809883a 	mov	r4,r5
 8000aa4:	300b883a 	mov	r5,r6
 8000aa8:	8000f400 	call	8000f40 <sqrt>
 8000aac:	100b883a 	mov	r5,r2
 8000ab0:	180d883a 	mov	r6,r3
 8000ab4:	2809883a 	mov	r4,r5
 8000ab8:	300b883a 	mov	r5,r6
 8000abc:	80070b80 	call	80070b8 <__truncdfsf2>
 8000ac0:	1007883a 	mov	r3,r2
 8000ac4:	e0ffff15 	stw	r3,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, (0x01<<((int)(amplitude*PIO_LEDS_NUMBER)))-1);
 8000ac8:	01504834 	movhi	r5,16672
 8000acc:	e13fff17 	ldw	r4,-4(fp)
 8000ad0:	8003fd80 	call	8003fd8 <__mulsf3>
 8000ad4:	1007883a 	mov	r3,r2
 8000ad8:	1805883a 	mov	r2,r3
 8000adc:	1009883a 	mov	r4,r2
 8000ae0:	80048b80 	call	80048b8 <__fixsfsi>
 8000ae4:	1007883a 	mov	r3,r2
 8000ae8:	00800044 	movi	r2,1
 8000aec:	10c4983a 	sll	r2,r2,r3
 8000af0:	10ffffc4 	addi	r3,r2,-1
 8000af4:	00800134 	movhi	r2,4
 8000af8:	10840404 	addi	r2,r2,4112
 8000afc:	10c00035 	stwio	r3,0(r2)
}
 8000b00:	0001883a 	nop
 8000b04:	e037883a 	mov	sp,fp
 8000b08:	dfc00117 	ldw	ra,4(sp)
 8000b0c:	df000017 	ldw	fp,0(sp)
 8000b10:	dec00204 	addi	sp,sp,8
 8000b14:	f800283a 	ret

08000b18 <average_amplitude>:


// computes the average amplitude of an array of sound samples
float average_amplitude(int *data, int length)
{
 8000b18:	defffa04 	addi	sp,sp,-24
 8000b1c:	dfc00515 	stw	ra,20(sp)
 8000b20:	df000415 	stw	fp,16(sp)
 8000b24:	df000404 	addi	fp,sp,16
 8000b28:	e13ffe15 	stw	r4,-8(fp)
 8000b2c:	e17fff15 	stw	r5,-4(fp)
	int i;
	float average_amplitude = 0;
 8000b30:	e03ffd15 	stw	zero,-12(fp)

	// computes the average
	for (i=0; i<length; i++)
 8000b34:	e03ffc15 	stw	zero,-16(fp)
 8000b38:	00002a06 	br	8000be4 <average_amplitude+0xcc>
	{
		if (data[i] < 0)
 8000b3c:	e0bffc17 	ldw	r2,-16(fp)
 8000b40:	1085883a 	add	r2,r2,r2
 8000b44:	1085883a 	add	r2,r2,r2
 8000b48:	1007883a 	mov	r3,r2
 8000b4c:	e0bffe17 	ldw	r2,-8(fp)
 8000b50:	10c5883a 	add	r2,r2,r3
 8000b54:	10800017 	ldw	r2,0(r2)
 8000b58:	1000100e 	bge	r2,zero,8000b9c <average_amplitude+0x84>
			average_amplitude -= data[i];
 8000b5c:	e0bffc17 	ldw	r2,-16(fp)
 8000b60:	1085883a 	add	r2,r2,r2
 8000b64:	1085883a 	add	r2,r2,r2
 8000b68:	1007883a 	mov	r3,r2
 8000b6c:	e0bffe17 	ldw	r2,-8(fp)
 8000b70:	10c5883a 	add	r2,r2,r3
 8000b74:	10800017 	ldw	r2,0(r2)
 8000b78:	1009883a 	mov	r4,r2
 8000b7c:	80049280 	call	8004928 <__floatsisf>
 8000b80:	1007883a 	mov	r3,r2
 8000b84:	180b883a 	mov	r5,r3
 8000b88:	e13ffd17 	ldw	r4,-12(fp)
 8000b8c:	80043d40 	call	80043d4 <__subsf3>
 8000b90:	1007883a 	mov	r3,r2
 8000b94:	e0fffd15 	stw	r3,-12(fp)
 8000b98:	00000f06 	br	8000bd8 <average_amplitude+0xc0>
		else
			average_amplitude += data[i];
 8000b9c:	e0bffc17 	ldw	r2,-16(fp)
 8000ba0:	1085883a 	add	r2,r2,r2
 8000ba4:	1085883a 	add	r2,r2,r2
 8000ba8:	1007883a 	mov	r3,r2
 8000bac:	e0bffe17 	ldw	r2,-8(fp)
 8000bb0:	10c5883a 	add	r2,r2,r3
 8000bb4:	10800017 	ldw	r2,0(r2)
 8000bb8:	1009883a 	mov	r4,r2
 8000bbc:	80049280 	call	8004928 <__floatsisf>
 8000bc0:	1007883a 	mov	r3,r2
 8000bc4:	180b883a 	mov	r5,r3
 8000bc8:	e13ffd17 	ldw	r4,-12(fp)
 8000bcc:	800354c0 	call	800354c <__addsf3>
 8000bd0:	1007883a 	mov	r3,r2
 8000bd4:	e0fffd15 	stw	r3,-12(fp)
{
	int i;
	float average_amplitude = 0;

	// computes the average
	for (i=0; i<length; i++)
 8000bd8:	e0bffc17 	ldw	r2,-16(fp)
 8000bdc:	10800044 	addi	r2,r2,1
 8000be0:	e0bffc15 	stw	r2,-16(fp)
 8000be4:	e0fffc17 	ldw	r3,-16(fp)
 8000be8:	e0bfff17 	ldw	r2,-4(fp)
 8000bec:	18bfd316 	blt	r3,r2,8000b3c <__alt_data_end+0xfc000b3c>
		else
			average_amplitude += data[i];
	}

	// normalizes to a range from 0 to 1
	average_amplitude /= INT_MAX;
 8000bf0:	0153c034 	movhi	r5,20224
 8000bf4:	e13ffd17 	ldw	r4,-12(fp)
 8000bf8:	8003a140 	call	8003a14 <__divsf3>
 8000bfc:	1007883a 	mov	r3,r2
 8000c00:	e0fffd15 	stw	r3,-12(fp)
	average_amplitude /= length;
 8000c04:	e13fff17 	ldw	r4,-4(fp)
 8000c08:	80049280 	call	8004928 <__floatsisf>
 8000c0c:	1007883a 	mov	r3,r2
 8000c10:	180b883a 	mov	r5,r3
 8000c14:	e13ffd17 	ldw	r4,-12(fp)
 8000c18:	8003a140 	call	8003a14 <__divsf3>
 8000c1c:	1007883a 	mov	r3,r2
 8000c20:	e0fffd15 	stw	r3,-12(fp)
	if (average_amplitude < 0)
 8000c24:	000b883a 	mov	r5,zero
 8000c28:	e13ffd17 	ldw	r4,-12(fp)
 8000c2c:	8003f100 	call	8003f10 <__lesf2>
 8000c30:	1000030e 	bge	r2,zero,8000c40 <average_amplitude+0x128>
		average_amplitude *= -1;
 8000c34:	e0bffd17 	ldw	r2,-12(fp)
 8000c38:	10a0003c 	xorhi	r2,r2,32768
 8000c3c:	e0bffd15 	stw	r2,-12(fp)

	return average_amplitude;
 8000c40:	e0bffd17 	ldw	r2,-12(fp)
 8000c44:	1007883a 	mov	r3,r2
}
 8000c48:	1805883a 	mov	r2,r3
 8000c4c:	e037883a 	mov	sp,fp
 8000c50:	dfc00117 	ldw	ra,4(sp)
 8000c54:	df000017 	ldw	fp,0(sp)
 8000c58:	dec00204 	addi	sp,sp,8
 8000c5c:	f800283a 	ret

08000c60 <start_recording>:



// records a sound from the microphone and stores it in the SDRAM (at location pointed by *file)
void start_recording(unsigned int *file, unsigned int n_samples, alt_up_audio_dev *audio_device)
{
 8000c60:	defff804 	addi	sp,sp,-32
 8000c64:	dfc00715 	stw	ra,28(sp)
 8000c68:	df000615 	stw	fp,24(sp)
 8000c6c:	df000604 	addi	fp,sp,24
 8000c70:	e13ffd15 	stw	r4,-12(fp)
 8000c74:	e17ffe15 	stw	r5,-8(fp)
 8000c78:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, *end_of_file;
	unsigned int n_samples_in_FIFO = 0;
 8000c7c:	e03ffb15 	stw	zero,-20(fp)

	if (n_samples > RECORDING_SAMPLES)
 8000c80:	e0fffe17 	ldw	r3,-8(fp)
 8000c84:	00800074 	movhi	r2,1
 8000c88:	109dc004 	addi	r2,r2,30464
 8000c8c:	10c0042e 	bgeu	r2,r3,8000ca0 <start_recording+0x40>
	{
		printf("Error, can't record a file so long\n");
 8000c90:	01020074 	movhi	r4,2049
 8000c94:	21163704 	addi	r4,r4,22748
 8000c98:	80074000 	call	8007400 <puts>
		return;
 8000c9c:	00002506 	br	8000d34 <start_recording+0xd4>
	}
	file_pointer = file;
 8000ca0:	e0bffd17 	ldw	r2,-12(fp)
 8000ca4:	e0bffa15 	stw	r2,-24(fp)
	end_of_file = &(file[n_samples]);
 8000ca8:	e0bffe17 	ldw	r2,-8(fp)
 8000cac:	1085883a 	add	r2,r2,r2
 8000cb0:	1085883a 	add	r2,r2,r2
 8000cb4:	1007883a 	mov	r3,r2
 8000cb8:	e0bffd17 	ldw	r2,-12(fp)
 8000cbc:	10c5883a 	add	r2,r2,r3
 8000cc0:	e0bffc15 	stw	r2,-16(fp)

	while(file_pointer < end_of_file )
 8000cc4:	00001806 	br	8000d28 <start_recording+0xc8>
	{
		// reads data from the incoming FIFO (sound from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);
 8000cc8:	000b883a 	mov	r5,zero
 8000ccc:	e13fff17 	ldw	r4,-4(fp)
 8000cd0:	80138340 	call	8013834 <alt_up_audio_read_fifo_avail>
 8000cd4:	e0bffb15 	stw	r2,-20(fp)
		alt_up_audio_read_fifo(audio_device, file_pointer, n_samples_in_FIFO, 0);
 8000cd8:	e0bffb17 	ldw	r2,-20(fp)
 8000cdc:	000f883a 	mov	r7,zero
 8000ce0:	100d883a 	mov	r6,r2
 8000ce4:	e17ffa17 	ldw	r5,-24(fp)
 8000ce8:	e13fff17 	ldw	r4,-4(fp)
 8000cec:	8013a940 	call	8013a94 <alt_up_audio_read_fifo>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs
 8000cf0:	e0bffb17 	ldw	r2,-20(fp)
 8000cf4:	100b883a 	mov	r5,r2
 8000cf8:	e13ffa17 	ldw	r4,-24(fp)
 8000cfc:	8000b180 	call	8000b18 <average_amplitude>
 8000d00:	1007883a 	mov	r3,r2
 8000d04:	1809883a 	mov	r4,r3
 8000d08:	8000a7c0 	call	8000a7c <show_amplitude_on_LEDS>

		file_pointer += n_samples_in_FIFO;
 8000d0c:	e0bffb17 	ldw	r2,-20(fp)
 8000d10:	1085883a 	add	r2,r2,r2
 8000d14:	1085883a 	add	r2,r2,r2
 8000d18:	1007883a 	mov	r3,r2
 8000d1c:	e0bffa17 	ldw	r2,-24(fp)
 8000d20:	10c5883a 	add	r2,r2,r3
 8000d24:	e0bffa15 	stw	r2,-24(fp)
		return;
	}
	file_pointer = file;
	end_of_file = &(file[n_samples]);

	while(file_pointer < end_of_file )
 8000d28:	e0fffa17 	ldw	r3,-24(fp)
 8000d2c:	e0bffc17 	ldw	r2,-16(fp)
 8000d30:	18bfe536 	bltu	r3,r2,8000cc8 <__alt_data_end+0xfc000cc8>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs

		file_pointer += n_samples_in_FIFO;
	}
}
 8000d34:	e037883a 	mov	sp,fp
 8000d38:	dfc00117 	ldw	ra,4(sp)
 8000d3c:	df000017 	ldw	fp,0(sp)
 8000d40:	dec00204 	addi	sp,sp,8
 8000d44:	f800283a 	ret

08000d48 <sender_mailbox_callback>:




void sender_mailbox_callback(void* report, int status) {
 8000d48:	defffc04 	addi	sp,sp,-16
 8000d4c:	dfc00315 	stw	ra,12(sp)
 8000d50:	df000215 	stw	fp,8(sp)
 8000d54:	df000204 	addi	fp,sp,8
 8000d58:	e13ffe15 	stw	r4,-8(fp)
 8000d5c:	e17fff15 	stw	r5,-4(fp)
	if (status) {
 8000d60:	e0bfff17 	ldw	r2,-4(fp)
 8000d64:	10000426 	beq	r2,zero,8000d78 <sender_mailbox_callback+0x30>
		printf("Transfer done\n");
 8000d68:	01020074 	movhi	r4,2049
 8000d6c:	21164004 	addi	r4,r4,22784
 8000d70:	80074000 	call	8007400 <puts>
	} else {
		printf("error in transfer\n");
	}
}
 8000d74:	00000306 	br	8000d84 <sender_mailbox_callback+0x3c>

void sender_mailbox_callback(void* report, int status) {
	if (status) {
		printf("Transfer done\n");
	} else {
		printf("error in transfer\n");
 8000d78:	01020074 	movhi	r4,2049
 8000d7c:	21164404 	addi	r4,r4,22800
 8000d80:	80074000 	call	8007400 <puts>
	}
}
 8000d84:	0001883a 	nop
 8000d88:	e037883a 	mov	sp,fp
 8000d8c:	dfc00117 	ldw	ra,4(sp)
 8000d90:	df000017 	ldw	fp,0(sp)
 8000d94:	dec00204 	addi	sp,sp,8
 8000d98:	f800283a 	ret

08000d9c <receiver_mailbox_callback>:


void receiver_mailbox_callback(void* message){
 8000d9c:	defffc04 	addi	sp,sp,-16
 8000da0:	dfc00315 	stw	ra,12(sp)
 8000da4:	df000215 	stw	fp,8(sp)
 8000da8:	df000204 	addi	fp,sp,8
 8000dac:	e13fff15 	stw	r4,-4(fp)
	alt_u32* data = (alt_u32*)message;	// cast from void* to alt_u32*
 8000db0:	e0bfff17 	ldw	r2,-4(fp)
 8000db4:	e0bffe15 	stw	r2,-8(fp)

	if (message != NULL) {
 8000db8:	e0bfff17 	ldw	r2,-4(fp)
 8000dbc:	10001b26 	beq	r2,zero,8000e2c <receiver_mailbox_callback+0x90>
		printf("Message received: msg[0]: 0x%lx   msg[1]: %u\n", data[0], data[1]);
 8000dc0:	e0bffe17 	ldw	r2,-8(fp)
 8000dc4:	10c00017 	ldw	r3,0(r2)
 8000dc8:	e0bffe17 	ldw	r2,-8(fp)
 8000dcc:	10800104 	addi	r2,r2,4
 8000dd0:	10800017 	ldw	r2,0(r2)
 8000dd4:	100d883a 	mov	r6,r2
 8000dd8:	180b883a 	mov	r5,r3
 8000ddc:	01020074 	movhi	r4,2049
 8000de0:	21164904 	addi	r4,r4,22820
 8000de4:	80073040 	call	8007304 <printf>
		processed_file = (unsigned int*)data[0];
 8000de8:	e0bffe17 	ldw	r2,-8(fp)
 8000dec:	10800017 	ldw	r2,0(r2)
 8000df0:	d0a71715 	stw	r2,-25508(gp)
		processed_file_length = (unsigned int) data[1];
 8000df4:	e0bffe17 	ldw	r2,-8(fp)
 8000df8:	10800104 	addi	r2,r2,4
 8000dfc:	10800017 	ldw	r2,0(r2)
 8000e00:	d0a71615 	stw	r2,-25512(gp)
		printf("Received processed file information: address %x \t length: %u \n\n", processed_file, processed_file_length);
 8000e04:	d0a71717 	ldw	r2,-25508(gp)
 8000e08:	d0e71617 	ldw	r3,-25512(gp)
 8000e0c:	180d883a 	mov	r6,r3
 8000e10:	100b883a 	mov	r5,r2
 8000e14:	01020074 	movhi	r4,2049
 8000e18:	21165504 	addi	r4,r4,22868
 8000e1c:	80073040 	call	8007304 <printf>
		file_ready_to_play = 1;	// raises a flag to start processing the data
 8000e20:	00800044 	movi	r2,1
 8000e24:	d0a71505 	stb	r2,-25516(gp)
	} else {
		printf("Incomplete receive\n");
	}
}
 8000e28:	00000306 	br	8000e38 <receiver_mailbox_callback+0x9c>
		processed_file = (unsigned int*)data[0];
		processed_file_length = (unsigned int) data[1];
		printf("Received processed file information: address %x \t length: %u \n\n", processed_file, processed_file_length);
		file_ready_to_play = 1;	// raises a flag to start processing the data
	} else {
		printf("Incomplete receive\n");
 8000e2c:	01020074 	movhi	r4,2049
 8000e30:	21166504 	addi	r4,r4,22932
 8000e34:	80074000 	call	8007400 <puts>
	}
}
 8000e38:	0001883a 	nop
 8000e3c:	e037883a 	mov	sp,fp
 8000e40:	dfc00117 	ldw	ra,4(sp)
 8000e44:	df000017 	ldw	fp,0(sp)
 8000e48:	dec00204 	addi	sp,sp,8
 8000e4c:	f800283a 	ret

08000e50 <sin>:
 8000e50:	00a00034 	movhi	r2,32768
 8000e54:	defffa04 	addi	sp,sp,-24
 8000e58:	10bfffc4 	addi	r2,r2,-1
 8000e5c:	00cffa74 	movhi	r3,16361
 8000e60:	dfc00515 	stw	ra,20(sp)
 8000e64:	2884703a 	and	r2,r5,r2
 8000e68:	18c87ec4 	addi	r3,r3,8699
 8000e6c:	1880180e 	bge	r3,r2,8000ed0 <sin+0x80>
 8000e70:	00dffc34 	movhi	r3,32752
 8000e74:	18ffffc4 	addi	r3,r3,-1
 8000e78:	1880060e 	bge	r3,r2,8000e94 <sin+0x44>
 8000e7c:	280f883a 	mov	r7,r5
 8000e80:	200d883a 	mov	r6,r4
 8000e84:	80065500 	call	8006550 <__subdf3>
 8000e88:	dfc00517 	ldw	ra,20(sp)
 8000e8c:	dec00604 	addi	sp,sp,24
 8000e90:	f800283a 	ret
 8000e94:	d9800104 	addi	r6,sp,4
 8000e98:	80010700 	call	8001070 <__ieee754_rem_pio2>
 8000e9c:	108000cc 	andi	r2,r2,3
 8000ea0:	00c00044 	movi	r3,1
 8000ea4:	10c01926 	beq	r2,r3,8000f0c <sin+0xbc>
 8000ea8:	01000084 	movi	r4,2
 8000eac:	11000f26 	beq	r2,r4,8000eec <sin+0x9c>
 8000eb0:	10001c26 	beq	r2,zero,8000f24 <sin+0xd4>
 8000eb4:	d9800317 	ldw	r6,12(sp)
 8000eb8:	d9c00417 	ldw	r7,16(sp)
 8000ebc:	d9000117 	ldw	r4,4(sp)
 8000ec0:	d9400217 	ldw	r5,8(sp)
 8000ec4:	8001a640 	call	8001a64 <__kernel_cos>
 8000ec8:	18e0003c 	xorhi	r3,r3,32768
 8000ecc:	003fee06 	br	8000e88 <__alt_data_end+0xfc000e88>
 8000ed0:	d8000015 	stw	zero,0(sp)
 8000ed4:	000d883a 	mov	r6,zero
 8000ed8:	000f883a 	mov	r7,zero
 8000edc:	8002c980 	call	8002c98 <__kernel_sin>
 8000ee0:	dfc00517 	ldw	ra,20(sp)
 8000ee4:	dec00604 	addi	sp,sp,24
 8000ee8:	f800283a 	ret
 8000eec:	d9800317 	ldw	r6,12(sp)
 8000ef0:	d9c00417 	ldw	r7,16(sp)
 8000ef4:	d9000117 	ldw	r4,4(sp)
 8000ef8:	d9400217 	ldw	r5,8(sp)
 8000efc:	d8c00015 	stw	r3,0(sp)
 8000f00:	8002c980 	call	8002c98 <__kernel_sin>
 8000f04:	18e0003c 	xorhi	r3,r3,32768
 8000f08:	003fdf06 	br	8000e88 <__alt_data_end+0xfc000e88>
 8000f0c:	d9800317 	ldw	r6,12(sp)
 8000f10:	d9c00417 	ldw	r7,16(sp)
 8000f14:	d9000117 	ldw	r4,4(sp)
 8000f18:	d9400217 	ldw	r5,8(sp)
 8000f1c:	8001a640 	call	8001a64 <__kernel_cos>
 8000f20:	003fd906 	br	8000e88 <__alt_data_end+0xfc000e88>
 8000f24:	d9800317 	ldw	r6,12(sp)
 8000f28:	d9c00417 	ldw	r7,16(sp)
 8000f2c:	d9000117 	ldw	r4,4(sp)
 8000f30:	d9400217 	ldw	r5,8(sp)
 8000f34:	d8c00015 	stw	r3,0(sp)
 8000f38:	8002c980 	call	8002c98 <__kernel_sin>
 8000f3c:	003fd206 	br	8000e88 <__alt_data_end+0xfc000e88>

08000f40 <sqrt>:
 8000f40:	defff104 	addi	sp,sp,-60
 8000f44:	dd000d15 	stw	r20,52(sp)
 8000f48:	05020074 	movhi	r20,2049
 8000f4c:	dcc00c15 	stw	r19,48(sp)
 8000f50:	dc800b15 	stw	r18,44(sp)
 8000f54:	dc400a15 	stw	r17,40(sp)
 8000f58:	dc000915 	stw	r16,36(sp)
 8000f5c:	dfc00e15 	stw	ra,56(sp)
 8000f60:	a51eac04 	addi	r20,r20,31408
 8000f64:	2027883a 	mov	r19,r4
 8000f68:	2825883a 	mov	r18,r5
 8000f6c:	80017dc0 	call	80017dc <__ieee754_sqrt>
 8000f70:	1821883a 	mov	r16,r3
 8000f74:	a0c00017 	ldw	r3,0(r20)
 8000f78:	1023883a 	mov	r17,r2
 8000f7c:	00bfffc4 	movi	r2,-1
 8000f80:	18800a26 	beq	r3,r2,8000fac <sqrt+0x6c>
 8000f84:	9809883a 	mov	r4,r19
 8000f88:	900b883a 	mov	r5,r18
 8000f8c:	80031640 	call	8003164 <__fpclassifyd>
 8000f90:	10000626 	beq	r2,zero,8000fac <sqrt+0x6c>
 8000f94:	000d883a 	mov	r6,zero
 8000f98:	000f883a 	mov	r7,zero
 8000f9c:	9809883a 	mov	r4,r19
 8000fa0:	900b883a 	mov	r5,r18
 8000fa4:	8005d440 	call	8005d44 <__ledf2>
 8000fa8:	10000a16 	blt	r2,zero,8000fd4 <sqrt+0x94>
 8000fac:	8805883a 	mov	r2,r17
 8000fb0:	8007883a 	mov	r3,r16
 8000fb4:	dfc00e17 	ldw	ra,56(sp)
 8000fb8:	dd000d17 	ldw	r20,52(sp)
 8000fbc:	dcc00c17 	ldw	r19,48(sp)
 8000fc0:	dc800b17 	ldw	r18,44(sp)
 8000fc4:	dc400a17 	ldw	r17,40(sp)
 8000fc8:	dc000917 	ldw	r16,36(sp)
 8000fcc:	dec00f04 	addi	sp,sp,60
 8000fd0:	f800283a 	ret
 8000fd4:	00800044 	movi	r2,1
 8000fd8:	d8800015 	stw	r2,0(sp)
 8000fdc:	a4000017 	ldw	r16,0(r20)
 8000fe0:	00820074 	movhi	r2,2049
 8000fe4:	10966a04 	addi	r2,r2,22952
 8000fe8:	d8800115 	stw	r2,4(sp)
 8000fec:	d8000815 	stw	zero,32(sp)
 8000ff0:	dcc00415 	stw	r19,16(sp)
 8000ff4:	dc800515 	stw	r18,20(sp)
 8000ff8:	dcc00215 	stw	r19,8(sp)
 8000ffc:	dc800315 	stw	r18,12(sp)
 8001000:	80000a1e 	bne	r16,zero,800102c <sqrt+0xec>
 8001004:	d8000615 	stw	zero,24(sp)
 8001008:	d8000715 	stw	zero,28(sp)
 800100c:	d809883a 	mov	r4,sp
 8001010:	80031d80 	call	80031d8 <matherr>
 8001014:	10000e26 	beq	r2,zero,8001050 <sqrt+0x110>
 8001018:	d8800817 	ldw	r2,32(sp)
 800101c:	1000101e 	bne	r2,zero,8001060 <sqrt+0x120>
 8001020:	d8800617 	ldw	r2,24(sp)
 8001024:	d8c00717 	ldw	r3,28(sp)
 8001028:	003fe206 	br	8000fb4 <__alt_data_end+0xfc000fb4>
 800102c:	000d883a 	mov	r6,zero
 8001030:	000f883a 	mov	r7,zero
 8001034:	0009883a 	mov	r4,zero
 8001038:	000b883a 	mov	r5,zero
 800103c:	80052f80 	call	80052f8 <__divdf3>
 8001040:	d8800615 	stw	r2,24(sp)
 8001044:	d8c00715 	stw	r3,28(sp)
 8001048:	00800084 	movi	r2,2
 800104c:	80bfef1e 	bne	r16,r2,800100c <__alt_data_end+0xfc00100c>
 8001050:	80072c40 	call	80072c4 <__errno>
 8001054:	00c00844 	movi	r3,33
 8001058:	10c00015 	stw	r3,0(r2)
 800105c:	003fee06 	br	8001018 <__alt_data_end+0xfc001018>
 8001060:	80072c40 	call	80072c4 <__errno>
 8001064:	d8c00817 	ldw	r3,32(sp)
 8001068:	10c00015 	stw	r3,0(r2)
 800106c:	003fec06 	br	8001020 <__alt_data_end+0xfc001020>

08001070 <__ieee754_rem_pio2>:
 8001070:	02200034 	movhi	r8,32768
 8001074:	deffea04 	addi	sp,sp,-88
 8001078:	423fffc4 	addi	r8,r8,-1
 800107c:	00cffa74 	movhi	r3,16361
 8001080:	ddc01315 	stw	r23,76(sp)
 8001084:	dc400d15 	stw	r17,52(sp)
 8001088:	dfc01515 	stw	ra,84(sp)
 800108c:	df001415 	stw	fp,80(sp)
 8001090:	dd801215 	stw	r22,72(sp)
 8001094:	dd401115 	stw	r21,68(sp)
 8001098:	dd001015 	stw	r20,64(sp)
 800109c:	dcc00f15 	stw	r19,60(sp)
 80010a0:	dc800e15 	stw	r18,56(sp)
 80010a4:	dc000c15 	stw	r16,48(sp)
 80010a8:	2a2e703a 	and	r23,r5,r8
 80010ac:	18c87ec4 	addi	r3,r3,8699
 80010b0:	2823883a 	mov	r17,r5
 80010b4:	1dc0790e 	bge	r3,r23,800129c <__ieee754_rem_pio2+0x22c>
 80010b8:	009000f4 	movhi	r2,16387
 80010bc:	10b65ec4 	addi	r2,r2,-9861
 80010c0:	3021883a 	mov	r16,r6
 80010c4:	2027883a 	mov	r19,r4
 80010c8:	15c02316 	blt	r2,r23,8001158 <__ieee754_rem_pio2+0xe8>
 80010cc:	01cffe74 	movhi	r7,16377
 80010d0:	39c87ec4 	addi	r7,r7,8699
 80010d4:	01951034 	movhi	r6,21568
 80010d8:	01417a0e 	bge	zero,r5,80016c4 <__ieee754_rem_pio2+0x654>
 80010dc:	80065500 	call	8006550 <__subdf3>
 80010e0:	1025883a 	mov	r18,r2
 80010e4:	008ffe74 	movhi	r2,16377
 80010e8:	10887ec4 	addi	r2,r2,8699
 80010ec:	1823883a 	mov	r17,r3
 80010f0:	b8808426 	beq	r23,r2,8001304 <__ieee754_rem_pio2+0x294>
 80010f4:	018698b4 	movhi	r6,6754
 80010f8:	01cf7474 	movhi	r7,15825
 80010fc:	3198cc44 	addi	r6,r6,25393
 8001100:	39ed1844 	addi	r7,r7,-19359
 8001104:	9009883a 	mov	r4,r18
 8001108:	180b883a 	mov	r5,r3
 800110c:	80065500 	call	8006550 <__subdf3>
 8001110:	100d883a 	mov	r6,r2
 8001114:	180f883a 	mov	r7,r3
 8001118:	9009883a 	mov	r4,r18
 800111c:	880b883a 	mov	r5,r17
 8001120:	80800015 	stw	r2,0(r16)
 8001124:	80c00115 	stw	r3,4(r16)
 8001128:	80065500 	call	8006550 <__subdf3>
 800112c:	018698b4 	movhi	r6,6754
 8001130:	01cf7474 	movhi	r7,15825
 8001134:	3198cc44 	addi	r6,r6,25393
 8001138:	39ed1844 	addi	r7,r7,-19359
 800113c:	1009883a 	mov	r4,r2
 8001140:	180b883a 	mov	r5,r3
 8001144:	80065500 	call	8006550 <__subdf3>
 8001148:	80800215 	stw	r2,8(r16)
 800114c:	80c00315 	stw	r3,12(r16)
 8001150:	00800044 	movi	r2,1
 8001154:	00005606 	br	80012b0 <__ieee754_rem_pio2+0x240>
 8001158:	00904e74 	movhi	r2,16697
 800115c:	10887ec4 	addi	r2,r2,8699
 8001160:	15c0830e 	bge	r2,r23,8001370 <__ieee754_rem_pio2+0x300>
 8001164:	009ffc34 	movhi	r2,32752
 8001168:	10bfffc4 	addi	r2,r2,-1
 800116c:	15c05c16 	blt	r2,r23,80012e0 <__ieee754_rem_pio2+0x270>
 8001170:	b829d53a 	srai	r20,r23,20
 8001174:	a53efa84 	addi	r20,r20,-1046
 8001178:	a024953a 	slli	r18,r20,20
 800117c:	bca5c83a 	sub	r18,r23,r18
 8001180:	900b883a 	mov	r5,r18
 8001184:	8006e4c0 	call	8006e4c <__fixdfsi>
 8001188:	1009883a 	mov	r4,r2
 800118c:	8006ecc0 	call	8006ecc <__floatsidf>
 8001190:	9809883a 	mov	r4,r19
 8001194:	900b883a 	mov	r5,r18
 8001198:	100d883a 	mov	r6,r2
 800119c:	180f883a 	mov	r7,r3
 80011a0:	d8800215 	stw	r2,8(sp)
 80011a4:	d8c00315 	stw	r3,12(sp)
 80011a8:	80065500 	call	8006550 <__subdf3>
 80011ac:	000d883a 	mov	r6,zero
 80011b0:	01d05c34 	movhi	r7,16752
 80011b4:	1009883a 	mov	r4,r2
 80011b8:	180b883a 	mov	r5,r3
 80011bc:	8005e380 	call	8005e38 <__muldf3>
 80011c0:	180b883a 	mov	r5,r3
 80011c4:	1009883a 	mov	r4,r2
 80011c8:	182b883a 	mov	r21,r3
 80011cc:	102d883a 	mov	r22,r2
 80011d0:	8006e4c0 	call	8006e4c <__fixdfsi>
 80011d4:	1009883a 	mov	r4,r2
 80011d8:	8006ecc0 	call	8006ecc <__floatsidf>
 80011dc:	100d883a 	mov	r6,r2
 80011e0:	180f883a 	mov	r7,r3
 80011e4:	b009883a 	mov	r4,r22
 80011e8:	a80b883a 	mov	r5,r21
 80011ec:	1027883a 	mov	r19,r2
 80011f0:	1825883a 	mov	r18,r3
 80011f4:	d8800415 	stw	r2,16(sp)
 80011f8:	d8c00515 	stw	r3,20(sp)
 80011fc:	80065500 	call	8006550 <__subdf3>
 8001200:	000d883a 	mov	r6,zero
 8001204:	01d05c34 	movhi	r7,16752
 8001208:	1009883a 	mov	r4,r2
 800120c:	180b883a 	mov	r5,r3
 8001210:	8005e380 	call	8005e38 <__muldf3>
 8001214:	000d883a 	mov	r6,zero
 8001218:	000f883a 	mov	r7,zero
 800121c:	1009883a 	mov	r4,r2
 8001220:	180b883a 	mov	r5,r3
 8001224:	d8800615 	stw	r2,24(sp)
 8001228:	d8c00715 	stw	r3,28(sp)
 800122c:	8005be00 	call	8005be0 <__eqdf2>
 8001230:	1001431e 	bne	r2,zero,8001740 <__ieee754_rem_pio2+0x6d0>
 8001234:	000f883a 	mov	r7,zero
 8001238:	000d883a 	mov	r6,zero
 800123c:	9809883a 	mov	r4,r19
 8001240:	900b883a 	mov	r5,r18
 8001244:	8005be00 	call	8005be0 <__eqdf2>
 8001248:	100f003a 	cmpeq	r7,r2,zero
 800124c:	00800084 	movi	r2,2
 8001250:	11cfc83a 	sub	r7,r2,r7
 8001254:	00800084 	movi	r2,2
 8001258:	d8800015 	stw	r2,0(sp)
 800125c:	00820074 	movhi	r2,2049
 8001260:	10968c04 	addi	r2,r2,23088
 8001264:	d8800115 	stw	r2,4(sp)
 8001268:	a00d883a 	mov	r6,r20
 800126c:	800b883a 	mov	r5,r16
 8001270:	d9000204 	addi	r4,sp,8
 8001274:	8001f080 	call	8001f08 <__kernel_rem_pio2>
 8001278:	88000d0e 	bge	r17,zero,80012b0 <__ieee754_rem_pio2+0x240>
 800127c:	81000117 	ldw	r4,4(r16)
 8001280:	80c00317 	ldw	r3,12(r16)
 8001284:	0085c83a 	sub	r2,zero,r2
 8001288:	2120003c 	xorhi	r4,r4,32768
 800128c:	18e0003c 	xorhi	r3,r3,32768
 8001290:	81000115 	stw	r4,4(r16)
 8001294:	80c00315 	stw	r3,12(r16)
 8001298:	00000506 	br	80012b0 <__ieee754_rem_pio2+0x240>
 800129c:	31000015 	stw	r4,0(r6)
 80012a0:	31400115 	stw	r5,4(r6)
 80012a4:	30000215 	stw	zero,8(r6)
 80012a8:	30000315 	stw	zero,12(r6)
 80012ac:	0005883a 	mov	r2,zero
 80012b0:	dfc01517 	ldw	ra,84(sp)
 80012b4:	df001417 	ldw	fp,80(sp)
 80012b8:	ddc01317 	ldw	r23,76(sp)
 80012bc:	dd801217 	ldw	r22,72(sp)
 80012c0:	dd401117 	ldw	r21,68(sp)
 80012c4:	dd001017 	ldw	r20,64(sp)
 80012c8:	dcc00f17 	ldw	r19,60(sp)
 80012cc:	dc800e17 	ldw	r18,56(sp)
 80012d0:	dc400d17 	ldw	r17,52(sp)
 80012d4:	dc000c17 	ldw	r16,48(sp)
 80012d8:	dec01604 	addi	sp,sp,88
 80012dc:	f800283a 	ret
 80012e0:	200d883a 	mov	r6,r4
 80012e4:	280f883a 	mov	r7,r5
 80012e8:	80065500 	call	8006550 <__subdf3>
 80012ec:	80800215 	stw	r2,8(r16)
 80012f0:	80800015 	stw	r2,0(r16)
 80012f4:	80c00315 	stw	r3,12(r16)
 80012f8:	80c00115 	stw	r3,4(r16)
 80012fc:	0005883a 	mov	r2,zero
 8001300:	003feb06 	br	80012b0 <__alt_data_end+0xfc0012b0>
 8001304:	01cf7474 	movhi	r7,15825
 8001308:	9009883a 	mov	r4,r18
 800130c:	39ed1844 	addi	r7,r7,-19359
 8001310:	01869834 	movhi	r6,6752
 8001314:	180b883a 	mov	r5,r3
 8001318:	80065500 	call	8006550 <__subdf3>
 800131c:	018b80f4 	movhi	r6,11779
 8001320:	01cee8f4 	movhi	r7,15267
 8001324:	319c1cc4 	addi	r6,r6,28787
 8001328:	39c66284 	addi	r7,r7,6538
 800132c:	1009883a 	mov	r4,r2
 8001330:	180b883a 	mov	r5,r3
 8001334:	1025883a 	mov	r18,r2
 8001338:	1823883a 	mov	r17,r3
 800133c:	80065500 	call	8006550 <__subdf3>
 8001340:	100d883a 	mov	r6,r2
 8001344:	180f883a 	mov	r7,r3
 8001348:	9009883a 	mov	r4,r18
 800134c:	880b883a 	mov	r5,r17
 8001350:	80800015 	stw	r2,0(r16)
 8001354:	80c00115 	stw	r3,4(r16)
 8001358:	80065500 	call	8006550 <__subdf3>
 800135c:	018b80f4 	movhi	r6,11779
 8001360:	01cee8f4 	movhi	r7,15267
 8001364:	319c1cc4 	addi	r6,r6,28787
 8001368:	39c66284 	addi	r7,r7,6538
 800136c:	003f7306 	br	800113c <__alt_data_end+0xfc00113c>
 8001370:	8002f640 	call	8002f64 <fabs>
 8001374:	019b72b4 	movhi	r6,28106
 8001378:	01cff934 	movhi	r7,16356
 800137c:	31b220c4 	addi	r6,r6,-14205
 8001380:	39d7cc04 	addi	r7,r7,24368
 8001384:	1009883a 	mov	r4,r2
 8001388:	180b883a 	mov	r5,r3
 800138c:	102d883a 	mov	r22,r2
 8001390:	182b883a 	mov	r21,r3
 8001394:	8005e380 	call	8005e38 <__muldf3>
 8001398:	000d883a 	mov	r6,zero
 800139c:	01cff834 	movhi	r7,16352
 80013a0:	1009883a 	mov	r4,r2
 80013a4:	180b883a 	mov	r5,r3
 80013a8:	8004a4c0 	call	8004a4c <__adddf3>
 80013ac:	180b883a 	mov	r5,r3
 80013b0:	1009883a 	mov	r4,r2
 80013b4:	8006e4c0 	call	8006e4c <__fixdfsi>
 80013b8:	1009883a 	mov	r4,r2
 80013bc:	1025883a 	mov	r18,r2
 80013c0:	8006ecc0 	call	8006ecc <__floatsidf>
 80013c4:	01cffe74 	movhi	r7,16377
 80013c8:	39c87ec4 	addi	r7,r7,8699
 80013cc:	01951034 	movhi	r6,21568
 80013d0:	1009883a 	mov	r4,r2
 80013d4:	180b883a 	mov	r5,r3
 80013d8:	1029883a 	mov	r20,r2
 80013dc:	1827883a 	mov	r19,r3
 80013e0:	8005e380 	call	8005e38 <__muldf3>
 80013e4:	b009883a 	mov	r4,r22
 80013e8:	a80b883a 	mov	r5,r21
 80013ec:	100d883a 	mov	r6,r2
 80013f0:	180f883a 	mov	r7,r3
 80013f4:	80065500 	call	8006550 <__subdf3>
 80013f8:	018698b4 	movhi	r6,6754
 80013fc:	01cf7474 	movhi	r7,15825
 8001400:	a009883a 	mov	r4,r20
 8001404:	3198cc44 	addi	r6,r6,25393
 8001408:	39ed1844 	addi	r7,r7,-19359
 800140c:	980b883a 	mov	r5,r19
 8001410:	1039883a 	mov	fp,r2
 8001414:	d8c00815 	stw	r3,32(sp)
 8001418:	8005e380 	call	8005e38 <__muldf3>
 800141c:	010007c4 	movi	r4,31
 8001420:	e017883a 	mov	r11,fp
 8001424:	da800817 	ldw	r10,32(sp)
 8001428:	102d883a 	mov	r22,r2
 800142c:	182b883a 	mov	r21,r3
 8001430:	24802816 	blt	r4,r18,80014d4 <__ieee754_rem_pio2+0x464>
 8001434:	913fffc4 	addi	r4,r18,-1
 8001438:	2109883a 	add	r4,r4,r4
 800143c:	01420074 	movhi	r5,2049
 8001440:	2109883a 	add	r4,r4,r4
 8001444:	29566c04 	addi	r5,r5,22960
 8001448:	2909883a 	add	r4,r5,r4
 800144c:	21000017 	ldw	r4,0(r4)
 8001450:	b9002026 	beq	r23,r4,80014d4 <__ieee754_rem_pio2+0x464>
 8001454:	100d883a 	mov	r6,r2
 8001458:	180f883a 	mov	r7,r3
 800145c:	e009883a 	mov	r4,fp
 8001460:	500b883a 	mov	r5,r10
 8001464:	da800b15 	stw	r10,44(sp)
 8001468:	df000a15 	stw	fp,40(sp)
 800146c:	80065500 	call	8006550 <__subdf3>
 8001470:	da800b17 	ldw	r10,44(sp)
 8001474:	dac00a17 	ldw	r11,40(sp)
 8001478:	1019883a 	mov	r12,r2
 800147c:	1813883a 	mov	r9,r3
 8001480:	80800015 	stw	r2,0(r16)
 8001484:	80c00115 	stw	r3,4(r16)
 8001488:	600d883a 	mov	r6,r12
 800148c:	480f883a 	mov	r7,r9
 8001490:	5809883a 	mov	r4,r11
 8001494:	500b883a 	mov	r5,r10
 8001498:	da400b15 	stw	r9,44(sp)
 800149c:	db000a15 	stw	r12,40(sp)
 80014a0:	80065500 	call	8006550 <__subdf3>
 80014a4:	b00d883a 	mov	r6,r22
 80014a8:	a80f883a 	mov	r7,r21
 80014ac:	1009883a 	mov	r4,r2
 80014b0:	180b883a 	mov	r5,r3
 80014b4:	80065500 	call	8006550 <__subdf3>
 80014b8:	80800215 	stw	r2,8(r16)
 80014bc:	80c00315 	stw	r3,12(r16)
 80014c0:	da400b17 	ldw	r9,44(sp)
 80014c4:	db000a17 	ldw	r12,40(sp)
 80014c8:	88009f16 	blt	r17,zero,8001748 <__ieee754_rem_pio2+0x6d8>
 80014cc:	9005883a 	mov	r2,r18
 80014d0:	003f7706 	br	80012b0 <__alt_data_end+0xfc0012b0>
 80014d4:	d9400817 	ldw	r5,32(sp)
 80014d8:	100d883a 	mov	r6,r2
 80014dc:	180f883a 	mov	r7,r3
 80014e0:	e009883a 	mov	r4,fp
 80014e4:	da800b15 	stw	r10,44(sp)
 80014e8:	dac00a15 	stw	r11,40(sp)
 80014ec:	80065500 	call	8006550 <__subdf3>
 80014f0:	1019883a 	mov	r12,r2
 80014f4:	1804d53a 	srli	r2,r3,20
 80014f8:	b811d53a 	srai	r8,r23,20
 80014fc:	1813883a 	mov	r9,r3
 8001500:	1081ffcc 	andi	r2,r2,2047
 8001504:	80c00115 	stw	r3,4(r16)
 8001508:	83000015 	stw	r12,0(r16)
 800150c:	4085c83a 	sub	r2,r8,r2
 8001510:	00c00404 	movi	r3,16
 8001514:	da800b17 	ldw	r10,44(sp)
 8001518:	dac00a17 	ldw	r11,40(sp)
 800151c:	18bfda0e 	bge	r3,r2,8001488 <__alt_data_end+0xfc001488>
 8001520:	01cf7474 	movhi	r7,15825
 8001524:	39ed1844 	addi	r7,r7,-19359
 8001528:	01869834 	movhi	r6,6752
 800152c:	a009883a 	mov	r4,r20
 8001530:	980b883a 	mov	r5,r19
 8001534:	da000a15 	stw	r8,40(sp)
 8001538:	8005e380 	call	8005e38 <__muldf3>
 800153c:	d9400817 	ldw	r5,32(sp)
 8001540:	100d883a 	mov	r6,r2
 8001544:	180f883a 	mov	r7,r3
 8001548:	e009883a 	mov	r4,fp
 800154c:	102d883a 	mov	r22,r2
 8001550:	182b883a 	mov	r21,r3
 8001554:	80065500 	call	8006550 <__subdf3>
 8001558:	d9400817 	ldw	r5,32(sp)
 800155c:	100d883a 	mov	r6,r2
 8001560:	180f883a 	mov	r7,r3
 8001564:	e009883a 	mov	r4,fp
 8001568:	182f883a 	mov	r23,r3
 800156c:	d8800915 	stw	r2,36(sp)
 8001570:	80065500 	call	8006550 <__subdf3>
 8001574:	b00d883a 	mov	r6,r22
 8001578:	a80f883a 	mov	r7,r21
 800157c:	1009883a 	mov	r4,r2
 8001580:	180b883a 	mov	r5,r3
 8001584:	80065500 	call	8006550 <__subdf3>
 8001588:	018b80f4 	movhi	r6,11779
 800158c:	01cee8f4 	movhi	r7,15267
 8001590:	319c1cc4 	addi	r6,r6,28787
 8001594:	39c66284 	addi	r7,r7,6538
 8001598:	a009883a 	mov	r4,r20
 800159c:	980b883a 	mov	r5,r19
 80015a0:	102d883a 	mov	r22,r2
 80015a4:	182b883a 	mov	r21,r3
 80015a8:	8005e380 	call	8005e38 <__muldf3>
 80015ac:	b00d883a 	mov	r6,r22
 80015b0:	a80f883a 	mov	r7,r21
 80015b4:	1009883a 	mov	r4,r2
 80015b8:	180b883a 	mov	r5,r3
 80015bc:	80065500 	call	8006550 <__subdf3>
 80015c0:	d9000917 	ldw	r4,36(sp)
 80015c4:	100d883a 	mov	r6,r2
 80015c8:	180f883a 	mov	r7,r3
 80015cc:	b80b883a 	mov	r5,r23
 80015d0:	102d883a 	mov	r22,r2
 80015d4:	182b883a 	mov	r21,r3
 80015d8:	80065500 	call	8006550 <__subdf3>
 80015dc:	1019883a 	mov	r12,r2
 80015e0:	1804d53a 	srli	r2,r3,20
 80015e4:	da000a17 	ldw	r8,40(sp)
 80015e8:	83000015 	stw	r12,0(r16)
 80015ec:	1081ffcc 	andi	r2,r2,2047
 80015f0:	4091c83a 	sub	r8,r8,r2
 80015f4:	80c00115 	stw	r3,4(r16)
 80015f8:	00800c44 	movi	r2,49
 80015fc:	1813883a 	mov	r9,r3
 8001600:	1200730e 	bge	r2,r8,80017d0 <__ieee754_rem_pio2+0x760>
 8001604:	01cee8f4 	movhi	r7,15267
 8001608:	39c66284 	addi	r7,r7,6538
 800160c:	018b8034 	movhi	r6,11776
 8001610:	a009883a 	mov	r4,r20
 8001614:	980b883a 	mov	r5,r19
 8001618:	8005e380 	call	8005e38 <__muldf3>
 800161c:	d9000917 	ldw	r4,36(sp)
 8001620:	100d883a 	mov	r6,r2
 8001624:	180f883a 	mov	r7,r3
 8001628:	b80b883a 	mov	r5,r23
 800162c:	102d883a 	mov	r22,r2
 8001630:	182b883a 	mov	r21,r3
 8001634:	80065500 	call	8006550 <__subdf3>
 8001638:	d9000917 	ldw	r4,36(sp)
 800163c:	100d883a 	mov	r6,r2
 8001640:	180f883a 	mov	r7,r3
 8001644:	b80b883a 	mov	r5,r23
 8001648:	d8c00b15 	stw	r3,44(sp)
 800164c:	d8800a15 	stw	r2,40(sp)
 8001650:	80065500 	call	8006550 <__subdf3>
 8001654:	b00d883a 	mov	r6,r22
 8001658:	a80f883a 	mov	r7,r21
 800165c:	1009883a 	mov	r4,r2
 8001660:	180b883a 	mov	r5,r3
 8001664:	80065500 	call	8006550 <__subdf3>
 8001668:	01894834 	movhi	r6,9504
 800166c:	01ce5f34 	movhi	r7,14716
 8001670:	31927044 	addi	r6,r6,18881
 8001674:	39e0e684 	addi	r7,r7,-31846
 8001678:	a009883a 	mov	r4,r20
 800167c:	980b883a 	mov	r5,r19
 8001680:	102d883a 	mov	r22,r2
 8001684:	182b883a 	mov	r21,r3
 8001688:	8005e380 	call	8005e38 <__muldf3>
 800168c:	b00d883a 	mov	r6,r22
 8001690:	a80f883a 	mov	r7,r21
 8001694:	1009883a 	mov	r4,r2
 8001698:	180b883a 	mov	r5,r3
 800169c:	80065500 	call	8006550 <__subdf3>
 80016a0:	dac00a17 	ldw	r11,40(sp)
 80016a4:	da800b17 	ldw	r10,44(sp)
 80016a8:	102d883a 	mov	r22,r2
 80016ac:	182b883a 	mov	r21,r3
 80016b0:	100d883a 	mov	r6,r2
 80016b4:	180f883a 	mov	r7,r3
 80016b8:	5809883a 	mov	r4,r11
 80016bc:	500b883a 	mov	r5,r10
 80016c0:	003f6a06 	br	800146c <__alt_data_end+0xfc00146c>
 80016c4:	8004a4c0 	call	8004a4c <__adddf3>
 80016c8:	1025883a 	mov	r18,r2
 80016cc:	008ffe74 	movhi	r2,16377
 80016d0:	10887ec4 	addi	r2,r2,8699
 80016d4:	1823883a 	mov	r17,r3
 80016d8:	b8802226 	beq	r23,r2,8001764 <__ieee754_rem_pio2+0x6f4>
 80016dc:	018698b4 	movhi	r6,6754
 80016e0:	01cf7474 	movhi	r7,15825
 80016e4:	3198cc44 	addi	r6,r6,25393
 80016e8:	39ed1844 	addi	r7,r7,-19359
 80016ec:	9009883a 	mov	r4,r18
 80016f0:	180b883a 	mov	r5,r3
 80016f4:	8004a4c0 	call	8004a4c <__adddf3>
 80016f8:	100d883a 	mov	r6,r2
 80016fc:	180f883a 	mov	r7,r3
 8001700:	9009883a 	mov	r4,r18
 8001704:	880b883a 	mov	r5,r17
 8001708:	80800015 	stw	r2,0(r16)
 800170c:	80c00115 	stw	r3,4(r16)
 8001710:	80065500 	call	8006550 <__subdf3>
 8001714:	018698b4 	movhi	r6,6754
 8001718:	01cf7474 	movhi	r7,15825
 800171c:	3198cc44 	addi	r6,r6,25393
 8001720:	39ed1844 	addi	r7,r7,-19359
 8001724:	1009883a 	mov	r4,r2
 8001728:	180b883a 	mov	r5,r3
 800172c:	8004a4c0 	call	8004a4c <__adddf3>
 8001730:	80800215 	stw	r2,8(r16)
 8001734:	80c00315 	stw	r3,12(r16)
 8001738:	00bfffc4 	movi	r2,-1
 800173c:	003edc06 	br	80012b0 <__alt_data_end+0xfc0012b0>
 8001740:	01c000c4 	movi	r7,3
 8001744:	003ec306 	br	8001254 <__alt_data_end+0xfc001254>
 8001748:	4a60003c 	xorhi	r9,r9,32768
 800174c:	18e0003c 	xorhi	r3,r3,32768
 8001750:	83000015 	stw	r12,0(r16)
 8001754:	82400115 	stw	r9,4(r16)
 8001758:	80c00315 	stw	r3,12(r16)
 800175c:	0485c83a 	sub	r2,zero,r18
 8001760:	003ed306 	br	80012b0 <__alt_data_end+0xfc0012b0>
 8001764:	01cf7474 	movhi	r7,15825
 8001768:	9009883a 	mov	r4,r18
 800176c:	39ed1844 	addi	r7,r7,-19359
 8001770:	01869834 	movhi	r6,6752
 8001774:	180b883a 	mov	r5,r3
 8001778:	8004a4c0 	call	8004a4c <__adddf3>
 800177c:	018b80f4 	movhi	r6,11779
 8001780:	01cee8f4 	movhi	r7,15267
 8001784:	319c1cc4 	addi	r6,r6,28787
 8001788:	39c66284 	addi	r7,r7,6538
 800178c:	1009883a 	mov	r4,r2
 8001790:	180b883a 	mov	r5,r3
 8001794:	1025883a 	mov	r18,r2
 8001798:	1823883a 	mov	r17,r3
 800179c:	8004a4c0 	call	8004a4c <__adddf3>
 80017a0:	100d883a 	mov	r6,r2
 80017a4:	180f883a 	mov	r7,r3
 80017a8:	9009883a 	mov	r4,r18
 80017ac:	880b883a 	mov	r5,r17
 80017b0:	80800015 	stw	r2,0(r16)
 80017b4:	80c00115 	stw	r3,4(r16)
 80017b8:	80065500 	call	8006550 <__subdf3>
 80017bc:	018b80f4 	movhi	r6,11779
 80017c0:	01cee8f4 	movhi	r7,15267
 80017c4:	319c1cc4 	addi	r6,r6,28787
 80017c8:	39c66284 	addi	r7,r7,6538
 80017cc:	003fd506 	br	8001724 <__alt_data_end+0xfc001724>
 80017d0:	dac00917 	ldw	r11,36(sp)
 80017d4:	b815883a 	mov	r10,r23
 80017d8:	003f2b06 	br	8001488 <__alt_data_end+0xfc001488>

080017dc <__ieee754_sqrt>:
 80017dc:	defffd04 	addi	sp,sp,-12
 80017e0:	dc400115 	stw	r17,4(sp)
 80017e4:	dc000015 	stw	r16,0(sp)
 80017e8:	dfc00215 	stw	ra,8(sp)
 80017ec:	28dffc2c 	andhi	r3,r5,32752
 80017f0:	009ffc34 	movhi	r2,32752
 80017f4:	2821883a 	mov	r16,r5
 80017f8:	2023883a 	mov	r17,r4
 80017fc:	200d883a 	mov	r6,r4
 8001800:	18807b26 	beq	r3,r2,80019f0 <__ieee754_sqrt+0x214>
 8001804:	01405f0e 	bge	zero,r5,8001984 <__ieee754_sqrt+0x1a8>
 8001808:	2815d53a 	srai	r10,r5,20
 800180c:	50006a26 	beq	r10,zero,80019b8 <__ieee754_sqrt+0x1dc>
 8001810:	00c00434 	movhi	r3,16
 8001814:	52bf0044 	addi	r10,r10,-1023
 8001818:	18ffffc4 	addi	r3,r3,-1
 800181c:	80c6703a 	and	r3,r16,r3
 8001820:	5080004c 	andi	r2,r10,1
 8001824:	18c00434 	orhi	r3,r3,16
 8001828:	1000511e 	bne	r2,zero,8001970 <__ieee754_sqrt+0x194>
 800182c:	3004d7fa 	srli	r2,r6,31
 8001830:	5015d07a 	srai	r10,r10,1
 8001834:	18c7883a 	add	r3,r3,r3
 8001838:	10c5883a 	add	r2,r2,r3
 800183c:	01400584 	movi	r5,22
 8001840:	3187883a 	add	r3,r6,r6
 8001844:	0013883a 	mov	r9,zero
 8001848:	000f883a 	mov	r7,zero
 800184c:	01000834 	movhi	r4,32
 8001850:	390d883a 	add	r6,r7,r4
 8001854:	1810d7fa 	srli	r8,r3,31
 8001858:	297fffc4 	addi	r5,r5,-1
 800185c:	11800316 	blt	r2,r6,800186c <__ieee754_sqrt+0x90>
 8001860:	1185c83a 	sub	r2,r2,r6
 8001864:	310f883a 	add	r7,r6,r4
 8001868:	4913883a 	add	r9,r9,r4
 800186c:	1085883a 	add	r2,r2,r2
 8001870:	4085883a 	add	r2,r8,r2
 8001874:	18c7883a 	add	r3,r3,r3
 8001878:	2008d07a 	srli	r4,r4,1
 800187c:	283ff41e 	bne	r5,zero,8001850 <__alt_data_end+0xfc001850>
 8001880:	01200034 	movhi	r4,32768
 8001884:	01800804 	movi	r6,32
 8001888:	0011883a 	mov	r8,zero
 800188c:	0019883a 	mov	r12,zero
 8001890:	201b883a 	mov	r13,r4
 8001894:	00000806 	br	80018b8 <__ieee754_sqrt+0xdc>
 8001898:	38801726 	beq	r7,r2,80018f8 <__ieee754_sqrt+0x11c>
 800189c:	180ad7fa 	srli	r5,r3,31
 80018a0:	1085883a 	add	r2,r2,r2
 80018a4:	31bfffc4 	addi	r6,r6,-1
 80018a8:	2885883a 	add	r2,r5,r2
 80018ac:	18c7883a 	add	r3,r3,r3
 80018b0:	2008d07a 	srli	r4,r4,1
 80018b4:	30001726 	beq	r6,zero,8001914 <__ieee754_sqrt+0x138>
 80018b8:	230b883a 	add	r5,r4,r12
 80018bc:	38bff60e 	bge	r7,r2,8001898 <__alt_data_end+0xfc001898>
 80018c0:	2ae0002c 	andhi	r11,r5,32768
 80018c4:	2919883a 	add	r12,r5,r4
 80018c8:	5b400826 	beq	r11,r13,80018ec <__ieee754_sqrt+0x110>
 80018cc:	3817883a 	mov	r11,r7
 80018d0:	11c5c83a 	sub	r2,r2,r7
 80018d4:	1940012e 	bgeu	r3,r5,80018dc <__ieee754_sqrt+0x100>
 80018d8:	10bfffc4 	addi	r2,r2,-1
 80018dc:	1947c83a 	sub	r3,r3,r5
 80018e0:	4111883a 	add	r8,r8,r4
 80018e4:	580f883a 	mov	r7,r11
 80018e8:	003fec06 	br	800189c <__alt_data_end+0xfc00189c>
 80018ec:	603ff716 	blt	r12,zero,80018cc <__alt_data_end+0xfc0018cc>
 80018f0:	3ac00044 	addi	r11,r7,1
 80018f4:	003ff606 	br	80018d0 <__alt_data_end+0xfc0018d0>
 80018f8:	19401936 	bltu	r3,r5,8001960 <__ieee754_sqrt+0x184>
 80018fc:	2ae0002c 	andhi	r11,r5,32768
 8001900:	2919883a 	add	r12,r5,r4
 8001904:	5b404526 	beq	r11,r13,8001a1c <__ieee754_sqrt+0x240>
 8001908:	1017883a 	mov	r11,r2
 800190c:	0005883a 	mov	r2,zero
 8001910:	003ff206 	br	80018dc <__alt_data_end+0xfc0018dc>
 8001914:	10c4b03a 	or	r2,r2,r3
 8001918:	10000426 	beq	r2,zero,800192c <__ieee754_sqrt+0x150>
 800191c:	00bfffc4 	movi	r2,-1
 8001920:	40804026 	beq	r8,r2,8001a24 <__ieee754_sqrt+0x248>
 8001924:	4080004c 	andi	r2,r8,1
 8001928:	4091883a 	add	r8,r8,r2
 800192c:	4004d07a 	srli	r2,r8,1
 8001930:	4807d07a 	srai	r3,r9,1
 8001934:	010ff834 	movhi	r4,16352
 8001938:	4a40004c 	andi	r9,r9,1
 800193c:	1909883a 	add	r4,r3,r4
 8001940:	4800091e 	bne	r9,zero,8001968 <__ieee754_sqrt+0x18c>
 8001944:	5006953a 	slli	r3,r10,20
 8001948:	1907883a 	add	r3,r3,r4
 800194c:	dfc00217 	ldw	ra,8(sp)
 8001950:	dc400117 	ldw	r17,4(sp)
 8001954:	dc000017 	ldw	r16,0(sp)
 8001958:	dec00304 	addi	sp,sp,12
 800195c:	f800283a 	ret
 8001960:	3805883a 	mov	r2,r7
 8001964:	003fcd06 	br	800189c <__alt_data_end+0xfc00189c>
 8001968:	10a00034 	orhi	r2,r2,32768
 800196c:	003ff506 	br	8001944 <__alt_data_end+0xfc001944>
 8001970:	3004d7fa 	srli	r2,r6,31
 8001974:	18c7883a 	add	r3,r3,r3
 8001978:	318d883a 	add	r6,r6,r6
 800197c:	10c7883a 	add	r3,r2,r3
 8001980:	003faa06 	br	800182c <__alt_data_end+0xfc00182c>
 8001984:	00a00034 	movhi	r2,32768
 8001988:	10bfffc4 	addi	r2,r2,-1
 800198c:	2884703a 	and	r2,r5,r2
 8001990:	1104b03a 	or	r2,r2,r4
 8001994:	10001e26 	beq	r2,zero,8001a10 <__ieee754_sqrt+0x234>
 8001998:	2800291e 	bne	r5,zero,8001a40 <__ieee754_sqrt+0x264>
 800199c:	0015883a 	mov	r10,zero
 80019a0:	3020d2fa 	srli	r16,r6,11
 80019a4:	52bffac4 	addi	r10,r10,-21
 80019a8:	300c957a 	slli	r6,r6,21
 80019ac:	803ffc26 	beq	r16,zero,80019a0 <__alt_data_end+0xfc0019a0>
 80019b0:	8080042c 	andhi	r2,r16,16
 80019b4:	10001e1e 	bne	r2,zero,8001a30 <__ieee754_sqrt+0x254>
 80019b8:	0005883a 	mov	r2,zero
 80019bc:	00000106 	br	80019c4 <__ieee754_sqrt+0x1e8>
 80019c0:	1805883a 	mov	r2,r3
 80019c4:	8421883a 	add	r16,r16,r16
 80019c8:	8100042c 	andhi	r4,r16,16
 80019cc:	10c00044 	addi	r3,r2,1
 80019d0:	203ffb26 	beq	r4,zero,80019c0 <__alt_data_end+0xfc0019c0>
 80019d4:	01000804 	movi	r4,32
 80019d8:	20c9c83a 	sub	r4,r4,r3
 80019dc:	3108d83a 	srl	r4,r6,r4
 80019e0:	5095c83a 	sub	r10,r10,r2
 80019e4:	30cc983a 	sll	r6,r6,r3
 80019e8:	2420b03a 	or	r16,r4,r16
 80019ec:	003f8806 	br	8001810 <__alt_data_end+0xfc001810>
 80019f0:	280f883a 	mov	r7,r5
 80019f4:	8005e380 	call	8005e38 <__muldf3>
 80019f8:	880d883a 	mov	r6,r17
 80019fc:	800f883a 	mov	r7,r16
 8001a00:	1009883a 	mov	r4,r2
 8001a04:	180b883a 	mov	r5,r3
 8001a08:	8004a4c0 	call	8004a4c <__adddf3>
 8001a0c:	003fcf06 	br	800194c <__alt_data_end+0xfc00194c>
 8001a10:	2005883a 	mov	r2,r4
 8001a14:	2807883a 	mov	r3,r5
 8001a18:	003fcc06 	br	800194c <__alt_data_end+0xfc00194c>
 8001a1c:	603fba16 	blt	r12,zero,8001908 <__alt_data_end+0xfc001908>
 8001a20:	003fb306 	br	80018f0 <__alt_data_end+0xfc0018f0>
 8001a24:	4a400044 	addi	r9,r9,1
 8001a28:	0005883a 	mov	r2,zero
 8001a2c:	003fc006 	br	8001930 <__alt_data_end+0xfc001930>
 8001a30:	01000804 	movi	r4,32
 8001a34:	00bfffc4 	movi	r2,-1
 8001a38:	0007883a 	mov	r3,zero
 8001a3c:	003fe706 	br	80019dc <__alt_data_end+0xfc0019dc>
 8001a40:	200d883a 	mov	r6,r4
 8001a44:	280f883a 	mov	r7,r5
 8001a48:	80065500 	call	8006550 <__subdf3>
 8001a4c:	100d883a 	mov	r6,r2
 8001a50:	180f883a 	mov	r7,r3
 8001a54:	1009883a 	mov	r4,r2
 8001a58:	180b883a 	mov	r5,r3
 8001a5c:	80052f80 	call	80052f8 <__divdf3>
 8001a60:	003fba06 	br	800194c <__alt_data_end+0xfc00194c>

08001a64 <__kernel_cos>:
 8001a64:	defff304 	addi	sp,sp,-52
 8001a68:	dc000315 	stw	r16,12(sp)
 8001a6c:	04200034 	movhi	r16,32768
 8001a70:	843fffc4 	addi	r16,r16,-1
 8001a74:	008f9034 	movhi	r2,15936
 8001a78:	df000b15 	stw	fp,44(sp)
 8001a7c:	ddc00a15 	stw	r23,40(sp)
 8001a80:	dd800915 	stw	r22,36(sp)
 8001a84:	dcc00615 	stw	r19,24(sp)
 8001a88:	dfc00c15 	stw	ra,48(sp)
 8001a8c:	dd400815 	stw	r21,32(sp)
 8001a90:	dd000715 	stw	r20,28(sp)
 8001a94:	dc800515 	stw	r18,20(sp)
 8001a98:	dc400415 	stw	r17,16(sp)
 8001a9c:	2c20703a 	and	r16,r5,r16
 8001aa0:	10bfffc4 	addi	r2,r2,-1
 8001aa4:	2827883a 	mov	r19,r5
 8001aa8:	202d883a 	mov	r22,r4
 8001aac:	302f883a 	mov	r23,r6
 8001ab0:	3839883a 	mov	fp,r7
 8001ab4:	14007516 	blt	r2,r16,8001c8c <__kernel_cos+0x228>
 8001ab8:	8006e4c0 	call	8006e4c <__fixdfsi>
 8001abc:	10010f26 	beq	r2,zero,8001efc <__kernel_cos+0x498>
 8001ac0:	b00d883a 	mov	r6,r22
 8001ac4:	980f883a 	mov	r7,r19
 8001ac8:	b009883a 	mov	r4,r22
 8001acc:	980b883a 	mov	r5,r19
 8001ad0:	8005e380 	call	8005e38 <__muldf3>
 8001ad4:	01afa234 	movhi	r6,48776
 8001ad8:	01ef6a74 	movhi	r7,48553
 8001adc:	318e3504 	addi	r6,r6,14548
 8001ae0:	39feba44 	addi	r7,r7,-1303
 8001ae4:	1009883a 	mov	r4,r2
 8001ae8:	180b883a 	mov	r5,r3
 8001aec:	102b883a 	mov	r21,r2
 8001af0:	1829883a 	mov	r20,r3
 8001af4:	8005e380 	call	8005e38 <__muldf3>
 8001af8:	01af6d74 	movhi	r6,48565
 8001afc:	01cf88b4 	movhi	r7,15906
 8001b00:	31ac7104 	addi	r6,r6,-20028
 8001b04:	39fba784 	addi	r7,r7,-4450
 8001b08:	1009883a 	mov	r4,r2
 8001b0c:	180b883a 	mov	r5,r3
 8001b10:	8004a4c0 	call	8004a4c <__adddf3>
 8001b14:	a80d883a 	mov	r6,r21
 8001b18:	a00f883a 	mov	r7,r20
 8001b1c:	1009883a 	mov	r4,r2
 8001b20:	180b883a 	mov	r5,r3
 8001b24:	8005e380 	call	8005e38 <__muldf3>
 8001b28:	01a02734 	movhi	r6,32924
 8001b2c:	01cfa4b4 	movhi	r7,16018
 8001b30:	3194ab44 	addi	r6,r6,21165
 8001b34:	39df93c4 	addi	r7,r7,32335
 8001b38:	1009883a 	mov	r4,r2
 8001b3c:	180b883a 	mov	r5,r3
 8001b40:	80065500 	call	8006550 <__subdf3>
 8001b44:	a80d883a 	mov	r6,r21
 8001b48:	a00f883a 	mov	r7,r20
 8001b4c:	1009883a 	mov	r4,r2
 8001b50:	180b883a 	mov	r5,r3
 8001b54:	8005e380 	call	8005e38 <__muldf3>
 8001b58:	018672f4 	movhi	r6,6603
 8001b5c:	01cfbeb4 	movhi	r7,16122
 8001b60:	31856404 	addi	r6,r6,5520
 8001b64:	39c06804 	addi	r7,r7,416
 8001b68:	1009883a 	mov	r4,r2
 8001b6c:	180b883a 	mov	r5,r3
 8001b70:	8004a4c0 	call	8004a4c <__adddf3>
 8001b74:	a80d883a 	mov	r6,r21
 8001b78:	a00f883a 	mov	r7,r20
 8001b7c:	1009883a 	mov	r4,r2
 8001b80:	180b883a 	mov	r5,r3
 8001b84:	8005e380 	call	8005e38 <__muldf3>
 8001b88:	0185b074 	movhi	r6,5825
 8001b8c:	01cfd5f4 	movhi	r7,16215
 8001b90:	31945dc4 	addi	r6,r6,20855
 8001b94:	39f05b04 	addi	r7,r7,-16020
 8001b98:	1009883a 	mov	r4,r2
 8001b9c:	180b883a 	mov	r5,r3
 8001ba0:	80065500 	call	8006550 <__subdf3>
 8001ba4:	a80d883a 	mov	r6,r21
 8001ba8:	a00f883a 	mov	r7,r20
 8001bac:	1009883a 	mov	r4,r2
 8001bb0:	180b883a 	mov	r5,r3
 8001bb4:	8005e380 	call	8005e38 <__muldf3>
 8001bb8:	01955574 	movhi	r6,21845
 8001bbc:	01cfe974 	movhi	r7,16293
 8001bc0:	31955304 	addi	r6,r6,21836
 8001bc4:	39d55544 	addi	r7,r7,21845
 8001bc8:	1009883a 	mov	r4,r2
 8001bcc:	180b883a 	mov	r5,r3
 8001bd0:	8004a4c0 	call	8004a4c <__adddf3>
 8001bd4:	a80d883a 	mov	r6,r21
 8001bd8:	a00f883a 	mov	r7,r20
 8001bdc:	1009883a 	mov	r4,r2
 8001be0:	180b883a 	mov	r5,r3
 8001be4:	8005e380 	call	8005e38 <__muldf3>
 8001be8:	1017883a 	mov	r11,r2
 8001bec:	1815883a 	mov	r10,r3
 8001bf0:	a809883a 	mov	r4,r21
 8001bf4:	a00b883a 	mov	r5,r20
 8001bf8:	000d883a 	mov	r6,zero
 8001bfc:	01cff834 	movhi	r7,16352
 8001c00:	da800215 	stw	r10,8(sp)
 8001c04:	dac00115 	stw	r11,4(sp)
 8001c08:	8005e380 	call	8005e38 <__muldf3>
 8001c0c:	dac00117 	ldw	r11,4(sp)
 8001c10:	da800217 	ldw	r10,8(sp)
 8001c14:	a809883a 	mov	r4,r21
 8001c18:	580d883a 	mov	r6,r11
 8001c1c:	500f883a 	mov	r7,r10
 8001c20:	a00b883a 	mov	r5,r20
 8001c24:	1023883a 	mov	r17,r2
 8001c28:	1821883a 	mov	r16,r3
 8001c2c:	8005e380 	call	8005e38 <__muldf3>
 8001c30:	b80d883a 	mov	r6,r23
 8001c34:	e00f883a 	mov	r7,fp
 8001c38:	b009883a 	mov	r4,r22
 8001c3c:	980b883a 	mov	r5,r19
 8001c40:	1029883a 	mov	r20,r2
 8001c44:	1825883a 	mov	r18,r3
 8001c48:	8005e380 	call	8005e38 <__muldf3>
 8001c4c:	a009883a 	mov	r4,r20
 8001c50:	900b883a 	mov	r5,r18
 8001c54:	100d883a 	mov	r6,r2
 8001c58:	180f883a 	mov	r7,r3
 8001c5c:	80065500 	call	8006550 <__subdf3>
 8001c60:	8809883a 	mov	r4,r17
 8001c64:	800b883a 	mov	r5,r16
 8001c68:	100d883a 	mov	r6,r2
 8001c6c:	180f883a 	mov	r7,r3
 8001c70:	80065500 	call	8006550 <__subdf3>
 8001c74:	100d883a 	mov	r6,r2
 8001c78:	180f883a 	mov	r7,r3
 8001c7c:	0009883a 	mov	r4,zero
 8001c80:	014ffc34 	movhi	r5,16368
 8001c84:	80065500 	call	8006550 <__subdf3>
 8001c88:	00008b06 	br	8001eb8 <__kernel_cos+0x454>
 8001c8c:	200d883a 	mov	r6,r4
 8001c90:	280f883a 	mov	r7,r5
 8001c94:	8005e380 	call	8005e38 <__muldf3>
 8001c98:	01afa234 	movhi	r6,48776
 8001c9c:	01ef6a74 	movhi	r7,48553
 8001ca0:	318e3504 	addi	r6,r6,14548
 8001ca4:	39feba44 	addi	r7,r7,-1303
 8001ca8:	1009883a 	mov	r4,r2
 8001cac:	180b883a 	mov	r5,r3
 8001cb0:	1025883a 	mov	r18,r2
 8001cb4:	1823883a 	mov	r17,r3
 8001cb8:	8005e380 	call	8005e38 <__muldf3>
 8001cbc:	01af6d74 	movhi	r6,48565
 8001cc0:	01cf88b4 	movhi	r7,15906
 8001cc4:	31ac7104 	addi	r6,r6,-20028
 8001cc8:	39fba784 	addi	r7,r7,-4450
 8001ccc:	1009883a 	mov	r4,r2
 8001cd0:	180b883a 	mov	r5,r3
 8001cd4:	8004a4c0 	call	8004a4c <__adddf3>
 8001cd8:	900d883a 	mov	r6,r18
 8001cdc:	880f883a 	mov	r7,r17
 8001ce0:	1009883a 	mov	r4,r2
 8001ce4:	180b883a 	mov	r5,r3
 8001ce8:	8005e380 	call	8005e38 <__muldf3>
 8001cec:	01a02734 	movhi	r6,32924
 8001cf0:	01cfa4b4 	movhi	r7,16018
 8001cf4:	3194ab44 	addi	r6,r6,21165
 8001cf8:	39df93c4 	addi	r7,r7,32335
 8001cfc:	1009883a 	mov	r4,r2
 8001d00:	180b883a 	mov	r5,r3
 8001d04:	80065500 	call	8006550 <__subdf3>
 8001d08:	900d883a 	mov	r6,r18
 8001d0c:	880f883a 	mov	r7,r17
 8001d10:	1009883a 	mov	r4,r2
 8001d14:	180b883a 	mov	r5,r3
 8001d18:	8005e380 	call	8005e38 <__muldf3>
 8001d1c:	018672f4 	movhi	r6,6603
 8001d20:	01cfbeb4 	movhi	r7,16122
 8001d24:	31856404 	addi	r6,r6,5520
 8001d28:	39c06804 	addi	r7,r7,416
 8001d2c:	1009883a 	mov	r4,r2
 8001d30:	180b883a 	mov	r5,r3
 8001d34:	8004a4c0 	call	8004a4c <__adddf3>
 8001d38:	900d883a 	mov	r6,r18
 8001d3c:	880f883a 	mov	r7,r17
 8001d40:	1009883a 	mov	r4,r2
 8001d44:	180b883a 	mov	r5,r3
 8001d48:	8005e380 	call	8005e38 <__muldf3>
 8001d4c:	0185b074 	movhi	r6,5825
 8001d50:	01cfd5f4 	movhi	r7,16215
 8001d54:	31945dc4 	addi	r6,r6,20855
 8001d58:	39f05b04 	addi	r7,r7,-16020
 8001d5c:	1009883a 	mov	r4,r2
 8001d60:	180b883a 	mov	r5,r3
 8001d64:	80065500 	call	8006550 <__subdf3>
 8001d68:	900d883a 	mov	r6,r18
 8001d6c:	880f883a 	mov	r7,r17
 8001d70:	1009883a 	mov	r4,r2
 8001d74:	180b883a 	mov	r5,r3
 8001d78:	8005e380 	call	8005e38 <__muldf3>
 8001d7c:	01955574 	movhi	r6,21845
 8001d80:	01cfe974 	movhi	r7,16293
 8001d84:	31955304 	addi	r6,r6,21836
 8001d88:	39d55544 	addi	r7,r7,21845
 8001d8c:	1009883a 	mov	r4,r2
 8001d90:	180b883a 	mov	r5,r3
 8001d94:	8004a4c0 	call	8004a4c <__adddf3>
 8001d98:	900d883a 	mov	r6,r18
 8001d9c:	880f883a 	mov	r7,r17
 8001da0:	1009883a 	mov	r4,r2
 8001da4:	180b883a 	mov	r5,r3
 8001da8:	8005e380 	call	8005e38 <__muldf3>
 8001dac:	1013883a 	mov	r9,r2
 8001db0:	1017883a 	mov	r11,r2
 8001db4:	008ff4f4 	movhi	r2,16339
 8001db8:	108ccc84 	addi	r2,r2,13106
 8001dbc:	1811883a 	mov	r8,r3
 8001dc0:	902b883a 	mov	r21,r18
 8001dc4:	8829883a 	mov	r20,r17
 8001dc8:	1815883a 	mov	r10,r3
 8001dcc:	143f880e 	bge	r2,r16,8001bf0 <__alt_data_end+0xfc001bf0>
 8001dd0:	008ffa74 	movhi	r2,16361
 8001dd4:	14004416 	blt	r2,r16,8001ee8 <__kernel_cos+0x484>
 8001dd8:	00bff834 	movhi	r2,65504
 8001ddc:	80a1883a 	add	r16,r16,r2
 8001de0:	000d883a 	mov	r6,zero
 8001de4:	800f883a 	mov	r7,r16
 8001de8:	0009883a 	mov	r4,zero
 8001dec:	014ffc34 	movhi	r5,16368
 8001df0:	da400115 	stw	r9,4(sp)
 8001df4:	d8c00215 	stw	r3,8(sp)
 8001df8:	80065500 	call	8006550 <__subdf3>
 8001dfc:	da000217 	ldw	r8,8(sp)
 8001e00:	da400117 	ldw	r9,4(sp)
 8001e04:	102b883a 	mov	r21,r2
 8001e08:	d8c00015 	stw	r3,0(sp)
 8001e0c:	9009883a 	mov	r4,r18
 8001e10:	880b883a 	mov	r5,r17
 8001e14:	000d883a 	mov	r6,zero
 8001e18:	01cff834 	movhi	r7,16352
 8001e1c:	da000215 	stw	r8,8(sp)
 8001e20:	da400115 	stw	r9,4(sp)
 8001e24:	8005e380 	call	8005e38 <__muldf3>
 8001e28:	800f883a 	mov	r7,r16
 8001e2c:	000d883a 	mov	r6,zero
 8001e30:	1009883a 	mov	r4,r2
 8001e34:	180b883a 	mov	r5,r3
 8001e38:	80065500 	call	8006550 <__subdf3>
 8001e3c:	da400117 	ldw	r9,4(sp)
 8001e40:	da000217 	ldw	r8,8(sp)
 8001e44:	9009883a 	mov	r4,r18
 8001e48:	480d883a 	mov	r6,r9
 8001e4c:	400f883a 	mov	r7,r8
 8001e50:	880b883a 	mov	r5,r17
 8001e54:	1029883a 	mov	r20,r2
 8001e58:	1821883a 	mov	r16,r3
 8001e5c:	8005e380 	call	8005e38 <__muldf3>
 8001e60:	b80d883a 	mov	r6,r23
 8001e64:	e00f883a 	mov	r7,fp
 8001e68:	b009883a 	mov	r4,r22
 8001e6c:	980b883a 	mov	r5,r19
 8001e70:	1025883a 	mov	r18,r2
 8001e74:	1823883a 	mov	r17,r3
 8001e78:	8005e380 	call	8005e38 <__muldf3>
 8001e7c:	100d883a 	mov	r6,r2
 8001e80:	180f883a 	mov	r7,r3
 8001e84:	9009883a 	mov	r4,r18
 8001e88:	880b883a 	mov	r5,r17
 8001e8c:	80065500 	call	8006550 <__subdf3>
 8001e90:	100d883a 	mov	r6,r2
 8001e94:	180f883a 	mov	r7,r3
 8001e98:	a009883a 	mov	r4,r20
 8001e9c:	800b883a 	mov	r5,r16
 8001ea0:	80065500 	call	8006550 <__subdf3>
 8001ea4:	d9400017 	ldw	r5,0(sp)
 8001ea8:	100d883a 	mov	r6,r2
 8001eac:	180f883a 	mov	r7,r3
 8001eb0:	a809883a 	mov	r4,r21
 8001eb4:	80065500 	call	8006550 <__subdf3>
 8001eb8:	dfc00c17 	ldw	ra,48(sp)
 8001ebc:	df000b17 	ldw	fp,44(sp)
 8001ec0:	ddc00a17 	ldw	r23,40(sp)
 8001ec4:	dd800917 	ldw	r22,36(sp)
 8001ec8:	dd400817 	ldw	r21,32(sp)
 8001ecc:	dd000717 	ldw	r20,28(sp)
 8001ed0:	dcc00617 	ldw	r19,24(sp)
 8001ed4:	dc800517 	ldw	r18,20(sp)
 8001ed8:	dc400417 	ldw	r17,16(sp)
 8001edc:	dc000317 	ldw	r16,12(sp)
 8001ee0:	dec00d04 	addi	sp,sp,52
 8001ee4:	f800283a 	ret
 8001ee8:	008ff9f4 	movhi	r2,16359
 8001eec:	002b883a 	mov	r21,zero
 8001ef0:	d8800015 	stw	r2,0(sp)
 8001ef4:	040ff4b4 	movhi	r16,16338
 8001ef8:	003fc406 	br	8001e0c <__alt_data_end+0xfc001e0c>
 8001efc:	0005883a 	mov	r2,zero
 8001f00:	00cffc34 	movhi	r3,16368
 8001f04:	003fec06 	br	8001eb8 <__alt_data_end+0xfc001eb8>

08001f08 <__kernel_rem_pio2>:
 8001f08:	deff5a04 	addi	sp,sp,-664
 8001f0c:	da00a617 	ldw	r8,664(sp)
 8001f10:	00c20074 	movhi	r3,2049
 8001f14:	18d6de04 	addi	r3,r3,23416
 8001f18:	4205883a 	add	r2,r8,r8
 8001f1c:	1085883a 	add	r2,r2,r2
 8001f20:	1885883a 	add	r2,r3,r2
 8001f24:	d9008e15 	stw	r4,568(sp)
 8001f28:	d9408f15 	stw	r5,572(sp)
 8001f2c:	313fff44 	addi	r4,r6,-3
 8001f30:	01400604 	movi	r5,24
 8001f34:	dd80a215 	stw	r22,648(sp)
 8001f38:	dc009c15 	stw	r16,624(sp)
 8001f3c:	dfc0a515 	stw	ra,660(sp)
 8001f40:	df00a415 	stw	fp,656(sp)
 8001f44:	ddc0a315 	stw	r23,652(sp)
 8001f48:	dd40a115 	stw	r21,644(sp)
 8001f4c:	dd00a015 	stw	r20,640(sp)
 8001f50:	dcc09f15 	stw	r19,636(sp)
 8001f54:	dc809e15 	stw	r18,632(sp)
 8001f58:	dc409d15 	stw	r17,628(sp)
 8001f5c:	3021883a 	mov	r16,r6
 8001f60:	d9c09315 	stw	r7,588(sp)
 8001f64:	15800017 	ldw	r22,0(r2)
 8001f68:	80033980 	call	8003398 <__divsi3>
 8001f6c:	da009317 	ldw	r8,588(sp)
 8001f70:	d8809215 	stw	r2,584(sp)
 8001f74:	423fffc4 	addi	r8,r8,-1
 8001f78:	da008d15 	stw	r8,564(sp)
 8001f7c:	10033b16 	blt	r2,zero,8002c6c <__kernel_rem_pio2+0xd64>
 8001f80:	da009217 	ldw	r8,584(sp)
 8001f84:	d9009217 	ldw	r4,584(sp)
 8001f88:	42000044 	addi	r8,r8,1
 8001f8c:	40fffa24 	muli	r3,r8,-24
 8001f90:	da009515 	stw	r8,596(sp)
 8001f94:	da008d17 	ldw	r8,564(sp)
 8001f98:	1c07883a 	add	r3,r3,r16
 8001f9c:	d8c09015 	stw	r3,576(sp)
 8001fa0:	b205883a 	add	r2,r22,r8
 8001fa4:	2223c83a 	sub	r17,r4,r8
 8001fa8:	10001016 	blt	r2,zero,8001fec <__kernel_rem_pio2+0xe4>
 8001fac:	da00a717 	ldw	r8,668(sp)
 8001fb0:	8c65883a 	add	r18,r17,r17
 8001fb4:	94a5883a 	add	r18,r18,r18
 8001fb8:	1445883a 	add	r2,r2,r17
 8001fbc:	dcc05004 	addi	r19,sp,320
 8001fc0:	44a5883a 	add	r18,r8,r18
 8001fc4:	14000044 	addi	r16,r2,1
 8001fc8:	88015316 	blt	r17,zero,8002518 <__kernel_rem_pio2+0x610>
 8001fcc:	91000017 	ldw	r4,0(r18)
 8001fd0:	8006ecc0 	call	8006ecc <__floatsidf>
 8001fd4:	98800015 	stw	r2,0(r19)
 8001fd8:	98c00115 	stw	r3,4(r19)
 8001fdc:	8c400044 	addi	r17,r17,1
 8001fe0:	9cc00204 	addi	r19,r19,8
 8001fe4:	94800104 	addi	r18,r18,4
 8001fe8:	8c3ff71e 	bne	r17,r16,8001fc8 <__alt_data_end+0xfc001fc8>
 8001fec:	b0002816 	blt	r22,zero,8002090 <__kernel_rem_pio2+0x188>
 8001ff0:	da008d17 	ldw	r8,564(sp)
 8001ff4:	b4c00044 	addi	r19,r22,1
 8001ff8:	982690fa 	slli	r19,r19,3
 8001ffc:	402490fa 	slli	r18,r8,3
 8002000:	da008e17 	ldw	r8,568(sp)
 8002004:	d8805004 	addi	r2,sp,320
 8002008:	94000204 	addi	r16,r18,8
 800200c:	d823883a 	mov	r17,sp
 8002010:	14a5883a 	add	r18,r2,r18
 8002014:	dcef883a 	add	r23,sp,r19
 8002018:	4421883a 	add	r16,r8,r16
 800201c:	dd809115 	stw	r22,580(sp)
 8002020:	4039883a 	mov	fp,r8
 8002024:	da008d17 	ldw	r8,564(sp)
 8002028:	40016016 	blt	r8,zero,80025ac <__kernel_rem_pio2+0x6a4>
 800202c:	e027883a 	mov	r19,fp
 8002030:	9029883a 	mov	r20,r18
 8002034:	002d883a 	mov	r22,zero
 8002038:	002b883a 	mov	r21,zero
 800203c:	a1800017 	ldw	r6,0(r20)
 8002040:	a1c00117 	ldw	r7,4(r20)
 8002044:	99000017 	ldw	r4,0(r19)
 8002048:	99400117 	ldw	r5,4(r19)
 800204c:	9cc00204 	addi	r19,r19,8
 8002050:	a53ffe04 	addi	r20,r20,-8
 8002054:	8005e380 	call	8005e38 <__muldf3>
 8002058:	b009883a 	mov	r4,r22
 800205c:	a80b883a 	mov	r5,r21
 8002060:	100d883a 	mov	r6,r2
 8002064:	180f883a 	mov	r7,r3
 8002068:	8004a4c0 	call	8004a4c <__adddf3>
 800206c:	102d883a 	mov	r22,r2
 8002070:	182b883a 	mov	r21,r3
 8002074:	9c3ff11e 	bne	r19,r16,800203c <__alt_data_end+0xfc00203c>
 8002078:	8d800015 	stw	r22,0(r17)
 800207c:	8d400115 	stw	r21,4(r17)
 8002080:	8c400204 	addi	r17,r17,8
 8002084:	94800204 	addi	r18,r18,8
 8002088:	8dffe61e 	bne	r17,r23,8002024 <__alt_data_end+0xfc002024>
 800208c:	dd809117 	ldw	r22,580(sp)
 8002090:	00d00034 	movhi	r3,16384
 8002094:	da009317 	ldw	r8,588(sp)
 8002098:	18ffff84 	addi	r3,r3,-2
 800209c:	b0c7883a 	add	r3,r22,r3
 80020a0:	18c7883a 	add	r3,r3,r3
 80020a4:	402090fa 	slli	r16,r8,3
 80020a8:	18c7883a 	add	r3,r3,r3
 80020ac:	da007804 	addi	r8,sp,480
 80020b0:	40d1883a 	add	r8,r8,r3
 80020b4:	b0bfffc4 	addi	r2,r22,-1
 80020b8:	da009615 	stw	r8,600(sp)
 80020bc:	da008e17 	ldw	r8,568(sp)
 80020c0:	1085883a 	add	r2,r2,r2
 80020c4:	1085883a 	add	r2,r2,r2
 80020c8:	19000104 	addi	r4,r3,4
 80020cc:	d885883a 	add	r2,sp,r2
 80020d0:	4421883a 	add	r16,r8,r16
 80020d4:	da007804 	addi	r8,sp,480
 80020d8:	4111883a 	add	r8,r8,r4
 80020dc:	10807804 	addi	r2,r2,480
 80020e0:	da009715 	stw	r8,604(sp)
 80020e4:	b025883a 	mov	r18,r22
 80020e8:	d8809815 	stw	r2,608(sp)
 80020ec:	dd809415 	stw	r22,592(sp)
 80020f0:	900490fa 	slli	r2,r18,3
 80020f4:	d885883a 	add	r2,sp,r2
 80020f8:	17000017 	ldw	fp,0(r2)
 80020fc:	15400117 	ldw	r21,4(r2)
 8002100:	04802b0e 	bge	zero,r18,80021b0 <__kernel_rem_pio2+0x2a8>
 8002104:	00880034 	movhi	r2,8192
 8002108:	10bfffc4 	addi	r2,r2,-1
 800210c:	90a9883a 	add	r20,r18,r2
 8002110:	a02890fa 	slli	r20,r20,3
 8002114:	dc407804 	addi	r17,sp,480
 8002118:	dcfffe04 	addi	r19,sp,-8
 800211c:	dd29883a 	add	r20,sp,r20
 8002120:	000d883a 	mov	r6,zero
 8002124:	01cf9c34 	movhi	r7,15984
 8002128:	e009883a 	mov	r4,fp
 800212c:	a80b883a 	mov	r5,r21
 8002130:	8005e380 	call	8005e38 <__muldf3>
 8002134:	180b883a 	mov	r5,r3
 8002138:	1009883a 	mov	r4,r2
 800213c:	8006e4c0 	call	8006e4c <__fixdfsi>
 8002140:	1009883a 	mov	r4,r2
 8002144:	8006ecc0 	call	8006ecc <__floatsidf>
 8002148:	000d883a 	mov	r6,zero
 800214c:	01d05c34 	movhi	r7,16752
 8002150:	1009883a 	mov	r4,r2
 8002154:	180b883a 	mov	r5,r3
 8002158:	102f883a 	mov	r23,r2
 800215c:	182d883a 	mov	r22,r3
 8002160:	8005e380 	call	8005e38 <__muldf3>
 8002164:	100d883a 	mov	r6,r2
 8002168:	180f883a 	mov	r7,r3
 800216c:	e009883a 	mov	r4,fp
 8002170:	a80b883a 	mov	r5,r21
 8002174:	80065500 	call	8006550 <__subdf3>
 8002178:	180b883a 	mov	r5,r3
 800217c:	1009883a 	mov	r4,r2
 8002180:	8006e4c0 	call	8006e4c <__fixdfsi>
 8002184:	a1800017 	ldw	r6,0(r20)
 8002188:	a1c00117 	ldw	r7,4(r20)
 800218c:	88800015 	stw	r2,0(r17)
 8002190:	b809883a 	mov	r4,r23
 8002194:	b00b883a 	mov	r5,r22
 8002198:	8004a4c0 	call	8004a4c <__adddf3>
 800219c:	a53ffe04 	addi	r20,r20,-8
 80021a0:	1039883a 	mov	fp,r2
 80021a4:	182b883a 	mov	r21,r3
 80021a8:	8c400104 	addi	r17,r17,4
 80021ac:	a4ffdc1e 	bne	r20,r19,8002120 <__alt_data_end+0xfc002120>
 80021b0:	d9809017 	ldw	r6,576(sp)
 80021b4:	a80b883a 	mov	r5,r21
 80021b8:	e009883a 	mov	r4,fp
 80021bc:	80031e00 	call	80031e0 <scalbn>
 80021c0:	000d883a 	mov	r6,zero
 80021c4:	01cff034 	movhi	r7,16320
 80021c8:	1009883a 	mov	r4,r2
 80021cc:	180b883a 	mov	r5,r3
 80021d0:	1027883a 	mov	r19,r2
 80021d4:	1823883a 	mov	r17,r3
 80021d8:	8005e380 	call	8005e38 <__muldf3>
 80021dc:	1009883a 	mov	r4,r2
 80021e0:	180b883a 	mov	r5,r3
 80021e4:	8002f780 	call	8002f78 <floor>
 80021e8:	000d883a 	mov	r6,zero
 80021ec:	01d00834 	movhi	r7,16416
 80021f0:	1009883a 	mov	r4,r2
 80021f4:	180b883a 	mov	r5,r3
 80021f8:	8005e380 	call	8005e38 <__muldf3>
 80021fc:	100d883a 	mov	r6,r2
 8002200:	180f883a 	mov	r7,r3
 8002204:	9809883a 	mov	r4,r19
 8002208:	880b883a 	mov	r5,r17
 800220c:	80065500 	call	8006550 <__subdf3>
 8002210:	180b883a 	mov	r5,r3
 8002214:	1009883a 	mov	r4,r2
 8002218:	1827883a 	mov	r19,r3
 800221c:	1029883a 	mov	r20,r2
 8002220:	8006e4c0 	call	8006e4c <__fixdfsi>
 8002224:	1009883a 	mov	r4,r2
 8002228:	1023883a 	mov	r17,r2
 800222c:	8006ecc0 	call	8006ecc <__floatsidf>
 8002230:	a009883a 	mov	r4,r20
 8002234:	100d883a 	mov	r6,r2
 8002238:	180f883a 	mov	r7,r3
 800223c:	980b883a 	mov	r5,r19
 8002240:	80065500 	call	8006550 <__subdf3>
 8002244:	d9009017 	ldw	r4,576(sp)
 8002248:	1013883a 	mov	r9,r2
 800224c:	102b883a 	mov	r21,r2
 8002250:	1811883a 	mov	r8,r3
 8002254:	0100b30e 	bge	zero,r4,8002524 <__kernel_rem_pio2+0x61c>
 8002258:	90bfffc4 	addi	r2,r18,-1
 800225c:	1085883a 	add	r2,r2,r2
 8002260:	1085883a 	add	r2,r2,r2
 8002264:	d885883a 	add	r2,sp,r2
 8002268:	10807804 	addi	r2,r2,480
 800226c:	d9809017 	ldw	r6,576(sp)
 8002270:	11400017 	ldw	r5,0(r2)
 8002274:	01000604 	movi	r4,24
 8002278:	2189c83a 	sub	r4,r4,r6
 800227c:	290dd83a 	sra	r6,r5,r4
 8002280:	d9c09017 	ldw	r7,576(sp)
 8002284:	04c005c4 	movi	r19,23
 8002288:	3108983a 	sll	r4,r6,r4
 800228c:	99e7c83a 	sub	r19,r19,r7
 8002290:	89a3883a 	add	r17,r17,r6
 8002294:	2909c83a 	sub	r4,r5,r4
 8002298:	24e7d83a 	sra	r19,r4,r19
 800229c:	11000015 	stw	r4,0(r2)
 80022a0:	04c02a0e 	bge	zero,r19,800234c <__kernel_rem_pio2+0x444>
 80022a4:	8c400044 	addi	r17,r17,1
 80022a8:	0481570e 	bge	zero,r18,8002808 <__kernel_rem_pio2+0x900>
 80022ac:	02804034 	movhi	r10,256
 80022b0:	52bfffc4 	addi	r10,r10,-1
 80022b4:	d8807804 	addi	r2,sp,480
 80022b8:	000b883a 	mov	r5,zero
 80022bc:	0029883a 	mov	r20,zero
 80022c0:	01c04034 	movhi	r7,256
 80022c4:	00000706 	br	80022e4 <__kernel_rem_pio2+0x3dc>
 80022c8:	390dc83a 	sub	r6,r7,r4
 80022cc:	20000226 	beq	r4,zero,80022d8 <__kernel_rem_pio2+0x3d0>
 80022d0:	11800015 	stw	r6,0(r2)
 80022d4:	05000044 	movi	r20,1
 80022d8:	29400044 	addi	r5,r5,1
 80022dc:	10800104 	addi	r2,r2,4
 80022e0:	2c80080e 	bge	r5,r18,8002304 <__kernel_rem_pio2+0x3fc>
 80022e4:	11000017 	ldw	r4,0(r2)
 80022e8:	a03ff726 	beq	r20,zero,80022c8 <__alt_data_end+0xfc0022c8>
 80022ec:	5109c83a 	sub	r4,r10,r4
 80022f0:	11000015 	stw	r4,0(r2)
 80022f4:	29400044 	addi	r5,r5,1
 80022f8:	05000044 	movi	r20,1
 80022fc:	10800104 	addi	r2,r2,4
 8002300:	2cbff816 	blt	r5,r18,80022e4 <__alt_data_end+0xfc0022e4>
 8002304:	d9009017 	ldw	r4,576(sp)
 8002308:	01000e0e 	bge	zero,r4,8002344 <__kernel_rem_pio2+0x43c>
 800230c:	00800044 	movi	r2,1
 8002310:	20808d26 	beq	r4,r2,8002548 <__kernel_rem_pio2+0x640>
 8002314:	00800084 	movi	r2,2
 8002318:	20800a1e 	bne	r4,r2,8002344 <__kernel_rem_pio2+0x43c>
 800231c:	90bfffc4 	addi	r2,r18,-1
 8002320:	1085883a 	add	r2,r2,r2
 8002324:	1085883a 	add	r2,r2,r2
 8002328:	d885883a 	add	r2,sp,r2
 800232c:	10807804 	addi	r2,r2,480
 8002330:	11400017 	ldw	r5,0(r2)
 8002334:	01001034 	movhi	r4,64
 8002338:	213fffc4 	addi	r4,r4,-1
 800233c:	2908703a 	and	r4,r5,r4
 8002340:	11000015 	stw	r4,0(r2)
 8002344:	00800084 	movi	r2,2
 8002348:	98805d26 	beq	r19,r2,80024c0 <__kernel_rem_pio2+0x5b8>
 800234c:	400b883a 	mov	r5,r8
 8002350:	000d883a 	mov	r6,zero
 8002354:	000f883a 	mov	r7,zero
 8002358:	a809883a 	mov	r4,r21
 800235c:	da009b15 	stw	r8,620(sp)
 8002360:	8005be00 	call	8005be0 <__eqdf2>
 8002364:	da009b17 	ldw	r8,620(sp)
 8002368:	10012b1e 	bne	r2,zero,8002818 <__kernel_rem_pio2+0x910>
 800236c:	da009417 	ldw	r8,592(sp)
 8002370:	917fffc4 	addi	r5,r18,-1
 8002374:	2a000e16 	blt	r5,r8,80023b0 <__kernel_rem_pio2+0x4a8>
 8002378:	00900034 	movhi	r2,16384
 800237c:	10bfffc4 	addi	r2,r2,-1
 8002380:	9085883a 	add	r2,r18,r2
 8002384:	1085883a 	add	r2,r2,r2
 8002388:	d9809717 	ldw	r6,604(sp)
 800238c:	1085883a 	add	r2,r2,r2
 8002390:	d9007804 	addi	r4,sp,480
 8002394:	0007883a 	mov	r3,zero
 8002398:	2085883a 	add	r2,r4,r2
 800239c:	11000017 	ldw	r4,0(r2)
 80023a0:	10bfff04 	addi	r2,r2,-4
 80023a4:	1906b03a 	or	r3,r3,r4
 80023a8:	11bffc1e 	bne	r2,r6,800239c <__alt_data_end+0xfc00239c>
 80023ac:	1800821e 	bne	r3,zero,80025b8 <__kernel_rem_pio2+0x6b0>
 80023b0:	da009817 	ldw	r8,608(sp)
 80023b4:	40800017 	ldw	r2,0(r8)
 80023b8:	1001151e 	bne	r2,zero,8002810 <__kernel_rem_pio2+0x908>
 80023bc:	d8809617 	ldw	r2,600(sp)
 80023c0:	05000044 	movi	r20,1
 80023c4:	10bfff04 	addi	r2,r2,-4
 80023c8:	10c00117 	ldw	r3,4(r2)
 80023cc:	a5000044 	addi	r20,r20,1
 80023d0:	183ffc26 	beq	r3,zero,80023c4 <__alt_data_end+0xfc0023c4>
 80023d4:	9529883a 	add	r20,r18,r20
 80023d8:	90800044 	addi	r2,r18,1
 80023dc:	dd009115 	stw	r20,580(sp)
 80023e0:	a0803216 	blt	r20,r2,80024ac <__kernel_rem_pio2+0x5a4>
 80023e4:	da009317 	ldw	r8,588(sp)
 80023e8:	d8c09117 	ldw	r3,580(sp)
 80023ec:	44a3883a 	add	r17,r8,r18
 80023f0:	da009217 	ldw	r8,584(sp)
 80023f4:	882290fa 	slli	r17,r17,3
 80023f8:	40a5883a 	add	r18,r8,r2
 80023fc:	da009517 	ldw	r8,596(sp)
 8002400:	100490fa 	slli	r2,r2,3
 8002404:	94a5883a 	add	r18,r18,r18
 8002408:	40eb883a 	add	r21,r8,r3
 800240c:	da00a717 	ldw	r8,668(sp)
 8002410:	ad6b883a 	add	r21,r21,r21
 8002414:	94a5883a 	add	r18,r18,r18
 8002418:	ad6b883a 	add	r21,r21,r21
 800241c:	d8c05004 	addi	r3,sp,320
 8002420:	44a5883a 	add	r18,r8,r18
 8002424:	1c63883a 	add	r17,r3,r17
 8002428:	d8a7883a 	add	r19,sp,r2
 800242c:	456b883a 	add	r21,r8,r21
 8002430:	91000017 	ldw	r4,0(r18)
 8002434:	8006ecc0 	call	8006ecc <__floatsidf>
 8002438:	da008d17 	ldw	r8,564(sp)
 800243c:	88800015 	stw	r2,0(r17)
 8002440:	88c00115 	stw	r3,4(r17)
 8002444:	40001b16 	blt	r8,zero,80024b4 <__kernel_rem_pio2+0x5ac>
 8002448:	dd008e17 	ldw	r20,568(sp)
 800244c:	882d883a 	mov	r22,r17
 8002450:	002f883a 	mov	r23,zero
 8002454:	0039883a 	mov	fp,zero
 8002458:	b1800017 	ldw	r6,0(r22)
 800245c:	b1c00117 	ldw	r7,4(r22)
 8002460:	a1000017 	ldw	r4,0(r20)
 8002464:	a1400117 	ldw	r5,4(r20)
 8002468:	a5000204 	addi	r20,r20,8
 800246c:	b5bffe04 	addi	r22,r22,-8
 8002470:	8005e380 	call	8005e38 <__muldf3>
 8002474:	b809883a 	mov	r4,r23
 8002478:	e00b883a 	mov	r5,fp
 800247c:	100d883a 	mov	r6,r2
 8002480:	180f883a 	mov	r7,r3
 8002484:	8004a4c0 	call	8004a4c <__adddf3>
 8002488:	102f883a 	mov	r23,r2
 800248c:	1839883a 	mov	fp,r3
 8002490:	a43ff11e 	bne	r20,r16,8002458 <__alt_data_end+0xfc002458>
 8002494:	9dc00015 	stw	r23,0(r19)
 8002498:	9f000115 	stw	fp,4(r19)
 800249c:	94800104 	addi	r18,r18,4
 80024a0:	8c400204 	addi	r17,r17,8
 80024a4:	9cc00204 	addi	r19,r19,8
 80024a8:	957fe11e 	bne	r18,r21,8002430 <__alt_data_end+0xfc002430>
 80024ac:	dc809117 	ldw	r18,580(sp)
 80024b0:	003f0f06 	br	80020f0 <__alt_data_end+0xfc0020f0>
 80024b4:	002f883a 	mov	r23,zero
 80024b8:	0039883a 	mov	fp,zero
 80024bc:	003ff506 	br	8002494 <__alt_data_end+0xfc002494>
 80024c0:	480d883a 	mov	r6,r9
 80024c4:	180f883a 	mov	r7,r3
 80024c8:	0009883a 	mov	r4,zero
 80024cc:	014ffc34 	movhi	r5,16368
 80024d0:	80065500 	call	8006550 <__subdf3>
 80024d4:	102b883a 	mov	r21,r2
 80024d8:	1811883a 	mov	r8,r3
 80024dc:	a03f9b26 	beq	r20,zero,800234c <__alt_data_end+0xfc00234c>
 80024e0:	d9809017 	ldw	r6,576(sp)
 80024e4:	0009883a 	mov	r4,zero
 80024e8:	014ffc34 	movhi	r5,16368
 80024ec:	d8c09b15 	stw	r3,620(sp)
 80024f0:	80031e00 	call	80031e0 <scalbn>
 80024f4:	da009b17 	ldw	r8,620(sp)
 80024f8:	a809883a 	mov	r4,r21
 80024fc:	100d883a 	mov	r6,r2
 8002500:	400b883a 	mov	r5,r8
 8002504:	180f883a 	mov	r7,r3
 8002508:	80065500 	call	8006550 <__subdf3>
 800250c:	102b883a 	mov	r21,r2
 8002510:	1811883a 	mov	r8,r3
 8002514:	003f8d06 	br	800234c <__alt_data_end+0xfc00234c>
 8002518:	0005883a 	mov	r2,zero
 800251c:	0007883a 	mov	r3,zero
 8002520:	003eac06 	br	8001fd4 <__alt_data_end+0xfc001fd4>
 8002524:	d8809017 	ldw	r2,576(sp)
 8002528:	1000121e 	bne	r2,zero,8002574 <__kernel_rem_pio2+0x66c>
 800252c:	90bfffc4 	addi	r2,r18,-1
 8002530:	1085883a 	add	r2,r2,r2
 8002534:	1085883a 	add	r2,r2,r2
 8002538:	d885883a 	add	r2,sp,r2
 800253c:	14c07817 	ldw	r19,480(r2)
 8002540:	9827d5fa 	srai	r19,r19,23
 8002544:	003f5606 	br	80022a0 <__alt_data_end+0xfc0022a0>
 8002548:	90bfffc4 	addi	r2,r18,-1
 800254c:	1085883a 	add	r2,r2,r2
 8002550:	1085883a 	add	r2,r2,r2
 8002554:	d885883a 	add	r2,sp,r2
 8002558:	10807804 	addi	r2,r2,480
 800255c:	11000017 	ldw	r4,0(r2)
 8002560:	01402034 	movhi	r5,128
 8002564:	297fffc4 	addi	r5,r5,-1
 8002568:	2148703a 	and	r4,r4,r5
 800256c:	11000015 	stw	r4,0(r2)
 8002570:	003f7406 	br	8002344 <__alt_data_end+0xfc002344>
 8002574:	4809883a 	mov	r4,r9
 8002578:	180b883a 	mov	r5,r3
 800257c:	000d883a 	mov	r6,zero
 8002580:	01cff834 	movhi	r7,16352
 8002584:	d8c09a15 	stw	r3,616(sp)
 8002588:	d8c09b15 	stw	r3,620(sp)
 800258c:	da409915 	stw	r9,612(sp)
 8002590:	8005c680 	call	8005c68 <__gedf2>
 8002594:	d8c09a17 	ldw	r3,616(sp)
 8002598:	da009b17 	ldw	r8,620(sp)
 800259c:	da409917 	ldw	r9,612(sp)
 80025a0:	1000920e 	bge	r2,zero,80027ec <__kernel_rem_pio2+0x8e4>
 80025a4:	0027883a 	mov	r19,zero
 80025a8:	003f6806 	br	800234c <__alt_data_end+0xfc00234c>
 80025ac:	002d883a 	mov	r22,zero
 80025b0:	002b883a 	mov	r21,zero
 80025b4:	003eb006 	br	8002078 <__alt_data_end+0xfc002078>
 80025b8:	2945883a 	add	r2,r5,r5
 80025bc:	da009017 	ldw	r8,576(sp)
 80025c0:	1085883a 	add	r2,r2,r2
 80025c4:	d885883a 	add	r2,sp,r2
 80025c8:	10807817 	ldw	r2,480(r2)
 80025cc:	423ffa04 	addi	r8,r8,-24
 80025d0:	dc409115 	stw	r17,580(sp)
 80025d4:	dcc08d15 	stw	r19,564(sp)
 80025d8:	da009015 	stw	r8,576(sp)
 80025dc:	dd809417 	ldw	r22,592(sp)
 80025e0:	2823883a 	mov	r17,r5
 80025e4:	10000e1e 	bne	r2,zero,8002620 <__kernel_rem_pio2+0x718>
 80025e8:	00900034 	movhi	r2,16384
 80025ec:	10bfffc4 	addi	r2,r2,-1
 80025f0:	2885883a 	add	r2,r5,r2
 80025f4:	1085883a 	add	r2,r2,r2
 80025f8:	d8c07804 	addi	r3,sp,480
 80025fc:	1085883a 	add	r2,r2,r2
 8002600:	1885883a 	add	r2,r3,r2
 8002604:	4007883a 	mov	r3,r8
 8002608:	10bfff04 	addi	r2,r2,-4
 800260c:	11000117 	ldw	r4,4(r2)
 8002610:	8c7fffc4 	addi	r17,r17,-1
 8002614:	18fffa04 	addi	r3,r3,-24
 8002618:	203ffb26 	beq	r4,zero,8002608 <__alt_data_end+0xfc002608>
 800261c:	d8c09015 	stw	r3,576(sp)
 8002620:	d9809017 	ldw	r6,576(sp)
 8002624:	0009883a 	mov	r4,zero
 8002628:	014ffc34 	movhi	r5,16368
 800262c:	80031e00 	call	80031e0 <scalbn>
 8002630:	1029883a 	mov	r20,r2
 8002634:	182b883a 	mov	r21,r3
 8002638:	88018416 	blt	r17,zero,8002c4c <__kernel_rem_pio2+0xd44>
 800263c:	881090fa 	slli	r8,r17,3
 8002640:	d8c07804 	addi	r3,sp,480
 8002644:	da008e15 	stw	r8,568(sp)
 8002648:	d8808e17 	ldw	r2,568(sp)
 800264c:	8c51883a 	add	r8,r17,r17
 8002650:	4211883a 	add	r8,r8,r8
 8002654:	d8a1883a 	add	r16,sp,r2
 8002658:	1a25883a 	add	r18,r3,r8
 800265c:	da3ffe04 	addi	r8,sp,-8
 8002660:	da008c15 	stw	r8,560(sp)
 8002664:	8039883a 	mov	fp,r16
 8002668:	91000017 	ldw	r4,0(r18)
 800266c:	e73ffe04 	addi	fp,fp,-8
 8002670:	94bfff04 	addi	r18,r18,-4
 8002674:	8006ecc0 	call	8006ecc <__floatsidf>
 8002678:	a00d883a 	mov	r6,r20
 800267c:	a80f883a 	mov	r7,r21
 8002680:	1009883a 	mov	r4,r2
 8002684:	180b883a 	mov	r5,r3
 8002688:	8005e380 	call	8005e38 <__muldf3>
 800268c:	a009883a 	mov	r4,r20
 8002690:	a80b883a 	mov	r5,r21
 8002694:	e0800215 	stw	r2,8(fp)
 8002698:	e0c00315 	stw	r3,12(fp)
 800269c:	000d883a 	mov	r6,zero
 80026a0:	01cf9c34 	movhi	r7,15984
 80026a4:	8005e380 	call	8005e38 <__muldf3>
 80026a8:	da008c17 	ldw	r8,560(sp)
 80026ac:	1029883a 	mov	r20,r2
 80026b0:	182b883a 	mov	r21,r3
 80026b4:	e23fec1e 	bne	fp,r8,8002668 <__alt_data_end+0xfc002668>
 80026b8:	0029883a 	mov	r20,zero
 80026bc:	b0004f16 	blt	r22,zero,80027fc <__kernel_rem_pio2+0x8f4>
 80026c0:	05420074 	movhi	r21,2049
 80026c4:	014ffe74 	movhi	r5,16377
 80026c8:	ad56d004 	addi	r21,r21,23360
 80026cc:	8027883a 	mov	r19,r16
 80026d0:	01100034 	movhi	r4,16384
 80026d4:	29487ec4 	addi	r5,r5,8699
 80026d8:	0039883a 	mov	fp,zero
 80026dc:	002f883a 	mov	r23,zero
 80026e0:	0025883a 	mov	r18,zero
 80026e4:	00000506 	br	80026fc <__kernel_rem_pio2+0x7f4>
 80026e8:	9cc00204 	addi	r19,r19,8
 80026ec:	a4800f16 	blt	r20,r18,800272c <__kernel_rem_pio2+0x824>
 80026f0:	a9000017 	ldw	r4,0(r21)
 80026f4:	a9400117 	ldw	r5,4(r21)
 80026f8:	ad400204 	addi	r21,r21,8
 80026fc:	99800017 	ldw	r6,0(r19)
 8002700:	99c00117 	ldw	r7,4(r19)
 8002704:	94800044 	addi	r18,r18,1
 8002708:	8005e380 	call	8005e38 <__muldf3>
 800270c:	e009883a 	mov	r4,fp
 8002710:	b80b883a 	mov	r5,r23
 8002714:	100d883a 	mov	r6,r2
 8002718:	180f883a 	mov	r7,r3
 800271c:	8004a4c0 	call	8004a4c <__adddf3>
 8002720:	1039883a 	mov	fp,r2
 8002724:	182f883a 	mov	r23,r3
 8002728:	b4bfef0e 	bge	r22,r18,80026e8 <__alt_data_end+0xfc0026e8>
 800272c:	a00490fa 	slli	r2,r20,3
 8002730:	da008c17 	ldw	r8,560(sp)
 8002734:	843ffe04 	addi	r16,r16,-8
 8002738:	d885883a 	add	r2,sp,r2
 800273c:	10802804 	addi	r2,r2,160
 8002740:	17000015 	stw	fp,0(r2)
 8002744:	15c00115 	stw	r23,4(r2)
 8002748:	a5000044 	addi	r20,r20,1
 800274c:	823fdb1e 	bne	r16,r8,80026bc <__alt_data_end+0xfc0026bc>
 8002750:	da00a617 	ldw	r8,664(sp)
 8002754:	00800084 	movi	r2,2
 8002758:	12006616 	blt	r2,r8,80028f4 <__kernel_rem_pio2+0x9ec>
 800275c:	0200de16 	blt	zero,r8,8002ad8 <__kernel_rem_pio2+0xbd0>
 8002760:	4000141e 	bne	r8,zero,80027b4 <__kernel_rem_pio2+0x8ac>
 8002764:	da008e17 	ldw	r8,568(sp)
 8002768:	d8802804 	addi	r2,sp,160
 800276c:	0007883a 	mov	r3,zero
 8002770:	1225883a 	add	r18,r2,r8
 8002774:	043fffc4 	movi	r16,-1
 8002778:	0005883a 	mov	r2,zero
 800277c:	91800017 	ldw	r6,0(r18)
 8002780:	91c00117 	ldw	r7,4(r18)
 8002784:	1009883a 	mov	r4,r2
 8002788:	180b883a 	mov	r5,r3
 800278c:	8c7fffc4 	addi	r17,r17,-1
 8002790:	8004a4c0 	call	8004a4c <__adddf3>
 8002794:	94bffe04 	addi	r18,r18,-8
 8002798:	8c3ff81e 	bne	r17,r16,800277c <__alt_data_end+0xfc00277c>
 800279c:	da008d17 	ldw	r8,564(sp)
 80027a0:	40000126 	beq	r8,zero,80027a8 <__kernel_rem_pio2+0x8a0>
 80027a4:	18e0003c 	xorhi	r3,r3,32768
 80027a8:	da008f17 	ldw	r8,572(sp)
 80027ac:	40800015 	stw	r2,0(r8)
 80027b0:	40c00115 	stw	r3,4(r8)
 80027b4:	da009117 	ldw	r8,580(sp)
 80027b8:	408001cc 	andi	r2,r8,7
 80027bc:	dfc0a517 	ldw	ra,660(sp)
 80027c0:	df00a417 	ldw	fp,656(sp)
 80027c4:	ddc0a317 	ldw	r23,652(sp)
 80027c8:	dd80a217 	ldw	r22,648(sp)
 80027cc:	dd40a117 	ldw	r21,644(sp)
 80027d0:	dd00a017 	ldw	r20,640(sp)
 80027d4:	dcc09f17 	ldw	r19,636(sp)
 80027d8:	dc809e17 	ldw	r18,632(sp)
 80027dc:	dc409d17 	ldw	r17,628(sp)
 80027e0:	dc009c17 	ldw	r16,624(sp)
 80027e4:	dec0a604 	addi	sp,sp,664
 80027e8:	f800283a 	ret
 80027ec:	8c400044 	addi	r17,r17,1
 80027f0:	04810d0e 	bge	zero,r18,8002c28 <__kernel_rem_pio2+0xd20>
 80027f4:	04c00084 	movi	r19,2
 80027f8:	003eac06 	br	80022ac <__alt_data_end+0xfc0022ac>
 80027fc:	0039883a 	mov	fp,zero
 8002800:	002f883a 	mov	r23,zero
 8002804:	003fc906 	br	800272c <__alt_data_end+0xfc00272c>
 8002808:	0029883a 	mov	r20,zero
 800280c:	003ebd06 	br	8002304 <__alt_data_end+0xfc002304>
 8002810:	05000044 	movi	r20,1
 8002814:	003eef06 	br	80023d4 <__alt_data_end+0xfc0023d4>
 8002818:	4029883a 	mov	r20,r8
 800281c:	da009017 	ldw	r8,576(sp)
 8002820:	a809883a 	mov	r4,r21
 8002824:	a00b883a 	mov	r5,r20
 8002828:	020dc83a 	sub	r6,zero,r8
 800282c:	dc409115 	stw	r17,580(sp)
 8002830:	dd809417 	ldw	r22,592(sp)
 8002834:	dcc08d15 	stw	r19,564(sp)
 8002838:	80031e00 	call	80031e0 <scalbn>
 800283c:	000d883a 	mov	r6,zero
 8002840:	01d05c34 	movhi	r7,16752
 8002844:	1009883a 	mov	r4,r2
 8002848:	180b883a 	mov	r5,r3
 800284c:	102b883a 	mov	r21,r2
 8002850:	1823883a 	mov	r17,r3
 8002854:	8005c680 	call	8005c68 <__gedf2>
 8002858:	1000e916 	blt	r2,zero,8002c00 <__kernel_rem_pio2+0xcf8>
 800285c:	000d883a 	mov	r6,zero
 8002860:	01cf9c34 	movhi	r7,15984
 8002864:	880b883a 	mov	r5,r17
 8002868:	a809883a 	mov	r4,r21
 800286c:	8005e380 	call	8005e38 <__muldf3>
 8002870:	180b883a 	mov	r5,r3
 8002874:	1009883a 	mov	r4,r2
 8002878:	8006e4c0 	call	8006e4c <__fixdfsi>
 800287c:	1029883a 	mov	r20,r2
 8002880:	9485883a 	add	r2,r18,r18
 8002884:	1085883a 	add	r2,r2,r2
 8002888:	a009883a 	mov	r4,r20
 800288c:	d8a1883a 	add	r16,sp,r2
 8002890:	8006ecc0 	call	8006ecc <__floatsidf>
 8002894:	000d883a 	mov	r6,zero
 8002898:	01d05c34 	movhi	r7,16752
 800289c:	1009883a 	mov	r4,r2
 80028a0:	180b883a 	mov	r5,r3
 80028a4:	8005e380 	call	8005e38 <__muldf3>
 80028a8:	880b883a 	mov	r5,r17
 80028ac:	100d883a 	mov	r6,r2
 80028b0:	180f883a 	mov	r7,r3
 80028b4:	a809883a 	mov	r4,r21
 80028b8:	80065500 	call	8006550 <__subdf3>
 80028bc:	180b883a 	mov	r5,r3
 80028c0:	1009883a 	mov	r4,r2
 80028c4:	8006e4c0 	call	8006e4c <__fixdfsi>
 80028c8:	da009017 	ldw	r8,576(sp)
 80028cc:	94400044 	addi	r17,r18,1
 80028d0:	8c47883a 	add	r3,r17,r17
 80028d4:	84007804 	addi	r16,r16,480
 80028d8:	18c7883a 	add	r3,r3,r3
 80028dc:	80800015 	stw	r2,0(r16)
 80028e0:	d8c7883a 	add	r3,sp,r3
 80028e4:	42000604 	addi	r8,r8,24
 80028e8:	da009015 	stw	r8,576(sp)
 80028ec:	1d007815 	stw	r20,480(r3)
 80028f0:	003f4b06 	br	8002620 <__alt_data_end+0xfc002620>
 80028f4:	da00a617 	ldw	r8,664(sp)
 80028f8:	008000c4 	movi	r2,3
 80028fc:	40bfad1e 	bne	r8,r2,80027b4 <__alt_data_end+0xfc0027b4>
 8002900:	0440bc0e 	bge	zero,r17,8002bf4 <__kernel_rem_pio2+0xcec>
 8002904:	da008e17 	ldw	r8,568(sp)
 8002908:	882090fa 	slli	r16,r17,3
 800290c:	dd402804 	addi	r21,sp,160
 8002910:	da05883a 	add	r2,sp,r8
 8002914:	10802804 	addi	r2,r2,160
 8002918:	15c00017 	ldw	r23,0(r2)
 800291c:	15800117 	ldw	r22,4(r2)
 8002920:	8029883a 	mov	r20,r16
 8002924:	843ffe04 	addi	r16,r16,-8
 8002928:	ac21883a 	add	r16,r21,r16
 800292c:	ad29883a 	add	r20,r21,r20
 8002930:	dac02604 	addi	r11,sp,152
 8002934:	8811883a 	mov	r8,r17
 8002938:	84400017 	ldw	r17,0(r16)
 800293c:	87000117 	ldw	fp,4(r16)
 8002940:	b80d883a 	mov	r6,r23
 8002944:	b00f883a 	mov	r7,r22
 8002948:	8809883a 	mov	r4,r17
 800294c:	e00b883a 	mov	r5,fp
 8002950:	da009b15 	stw	r8,620(sp)
 8002954:	dac09915 	stw	r11,612(sp)
 8002958:	8004a4c0 	call	8004a4c <__adddf3>
 800295c:	100d883a 	mov	r6,r2
 8002960:	180f883a 	mov	r7,r3
 8002964:	8809883a 	mov	r4,r17
 8002968:	e00b883a 	mov	r5,fp
 800296c:	1027883a 	mov	r19,r2
 8002970:	1825883a 	mov	r18,r3
 8002974:	80065500 	call	8006550 <__subdf3>
 8002978:	b80d883a 	mov	r6,r23
 800297c:	b00f883a 	mov	r7,r22
 8002980:	1009883a 	mov	r4,r2
 8002984:	180b883a 	mov	r5,r3
 8002988:	8004a4c0 	call	8004a4c <__adddf3>
 800298c:	dac09917 	ldw	r11,612(sp)
 8002990:	a0800015 	stw	r2,0(r20)
 8002994:	a0c00115 	stw	r3,4(r20)
 8002998:	84c00015 	stw	r19,0(r16)
 800299c:	84800115 	stw	r18,4(r16)
 80029a0:	843ffe04 	addi	r16,r16,-8
 80029a4:	a53ffe04 	addi	r20,r20,-8
 80029a8:	982f883a 	mov	r23,r19
 80029ac:	902d883a 	mov	r22,r18
 80029b0:	da009b17 	ldw	r8,620(sp)
 80029b4:	5c3fe01e 	bne	r11,r16,8002938 <__alt_data_end+0xfc002938>
 80029b8:	00800044 	movi	r2,1
 80029bc:	12008d0e 	bge	r2,r8,8002bf4 <__kernel_rem_pio2+0xcec>
 80029c0:	402090fa 	slli	r16,r8,3
 80029c4:	da008e17 	ldw	r8,568(sp)
 80029c8:	8023883a 	mov	r17,r16
 80029cc:	da05883a 	add	r2,sp,r8
 80029d0:	10802804 	addi	r2,r2,160
 80029d4:	15800017 	ldw	r22,0(r2)
 80029d8:	15000117 	ldw	r20,4(r2)
 80029dc:	ac63883a 	add	r17,r21,r17
 80029e0:	843ffe04 	addi	r16,r16,-8
 80029e4:	ac21883a 	add	r16,r21,r16
 80029e8:	8825883a 	mov	r18,r17
 80029ec:	8811883a 	mov	r8,r17
 80029f0:	84400017 	ldw	r17,0(r16)
 80029f4:	87000117 	ldw	fp,4(r16)
 80029f8:	b009883a 	mov	r4,r22
 80029fc:	a00b883a 	mov	r5,r20
 8002a00:	880d883a 	mov	r6,r17
 8002a04:	e00f883a 	mov	r7,fp
 8002a08:	da009b15 	stw	r8,620(sp)
 8002a0c:	8004a4c0 	call	8004a4c <__adddf3>
 8002a10:	100d883a 	mov	r6,r2
 8002a14:	180f883a 	mov	r7,r3
 8002a18:	8809883a 	mov	r4,r17
 8002a1c:	e00b883a 	mov	r5,fp
 8002a20:	102f883a 	mov	r23,r2
 8002a24:	1827883a 	mov	r19,r3
 8002a28:	80065500 	call	8006550 <__subdf3>
 8002a2c:	b00d883a 	mov	r6,r22
 8002a30:	a00f883a 	mov	r7,r20
 8002a34:	1009883a 	mov	r4,r2
 8002a38:	180b883a 	mov	r5,r3
 8002a3c:	8004a4c0 	call	8004a4c <__adddf3>
 8002a40:	90800015 	stw	r2,0(r18)
 8002a44:	90c00115 	stw	r3,4(r18)
 8002a48:	85c00015 	stw	r23,0(r16)
 8002a4c:	84c00115 	stw	r19,4(r16)
 8002a50:	843ffe04 	addi	r16,r16,-8
 8002a54:	94bffe04 	addi	r18,r18,-8
 8002a58:	b82d883a 	mov	r22,r23
 8002a5c:	9829883a 	mov	r20,r19
 8002a60:	da009b17 	ldw	r8,620(sp)
 8002a64:	ac3fe21e 	bne	r21,r16,80029f0 <__alt_data_end+0xfc0029f0>
 8002a68:	4023883a 	mov	r17,r8
 8002a6c:	dc002a04 	addi	r16,sp,168
 8002a70:	0005883a 	mov	r2,zero
 8002a74:	0007883a 	mov	r3,zero
 8002a78:	89800017 	ldw	r6,0(r17)
 8002a7c:	89c00117 	ldw	r7,4(r17)
 8002a80:	1009883a 	mov	r4,r2
 8002a84:	8c7ffe04 	addi	r17,r17,-8
 8002a88:	180b883a 	mov	r5,r3
 8002a8c:	8004a4c0 	call	8004a4c <__adddf3>
 8002a90:	847ff91e 	bne	r16,r17,8002a78 <__alt_data_end+0xfc002a78>
 8002a94:	da008d17 	ldw	r8,564(sp)
 8002a98:	40004726 	beq	r8,zero,8002bb8 <__kernel_rem_pio2+0xcb0>
 8002a9c:	d9002b17 	ldw	r4,172(sp)
 8002aa0:	d9402917 	ldw	r5,164(sp)
 8002aa4:	d9802a17 	ldw	r6,168(sp)
 8002aa8:	da008f17 	ldw	r8,572(sp)
 8002aac:	d9c02817 	ldw	r7,160(sp)
 8002ab0:	2960003c 	xorhi	r5,r5,32768
 8002ab4:	2120003c 	xorhi	r4,r4,32768
 8002ab8:	18e0003c 	xorhi	r3,r3,32768
 8002abc:	41c00015 	stw	r7,0(r8)
 8002ac0:	41400115 	stw	r5,4(r8)
 8002ac4:	41800215 	stw	r6,8(r8)
 8002ac8:	41000315 	stw	r4,12(r8)
 8002acc:	40800415 	stw	r2,16(r8)
 8002ad0:	40c00515 	stw	r3,20(r8)
 8002ad4:	003f3706 	br	80027b4 <__alt_data_end+0xfc0027b4>
 8002ad8:	da008e17 	ldw	r8,568(sp)
 8002adc:	d8802804 	addi	r2,sp,160
 8002ae0:	dc002604 	addi	r16,sp,152
 8002ae4:	1225883a 	add	r18,r2,r8
 8002ae8:	0007883a 	mov	r3,zero
 8002aec:	0005883a 	mov	r2,zero
 8002af0:	91800017 	ldw	r6,0(r18)
 8002af4:	91c00117 	ldw	r7,4(r18)
 8002af8:	1009883a 	mov	r4,r2
 8002afc:	94bffe04 	addi	r18,r18,-8
 8002b00:	180b883a 	mov	r5,r3
 8002b04:	8004a4c0 	call	8004a4c <__adddf3>
 8002b08:	943ff91e 	bne	r18,r16,8002af0 <__alt_data_end+0xfc002af0>
 8002b0c:	da008d17 	ldw	r8,564(sp)
 8002b10:	d9002817 	ldw	r4,160(sp)
 8002b14:	d9402917 	ldw	r5,164(sp)
 8002b18:	40001a26 	beq	r8,zero,8002b84 <__kernel_rem_pio2+0xc7c>
 8002b1c:	da008f17 	ldw	r8,572(sp)
 8002b20:	19a0003c 	xorhi	r6,r3,32768
 8002b24:	180f883a 	mov	r7,r3
 8002b28:	41800115 	stw	r6,4(r8)
 8002b2c:	40800015 	stw	r2,0(r8)
 8002b30:	100d883a 	mov	r6,r2
 8002b34:	80065500 	call	8006550 <__subdf3>
 8002b38:	04400c0e 	bge	zero,r17,8002b6c <__kernel_rem_pio2+0xc64>
 8002b3c:	dc002a04 	addi	r16,sp,168
 8002b40:	04800044 	movi	r18,1
 8002b44:	81800017 	ldw	r6,0(r16)
 8002b48:	81c00117 	ldw	r7,4(r16)
 8002b4c:	1009883a 	mov	r4,r2
 8002b50:	180b883a 	mov	r5,r3
 8002b54:	94800044 	addi	r18,r18,1
 8002b58:	8004a4c0 	call	8004a4c <__adddf3>
 8002b5c:	84000204 	addi	r16,r16,8
 8002b60:	8cbff80e 	bge	r17,r18,8002b44 <__alt_data_end+0xfc002b44>
 8002b64:	da008d17 	ldw	r8,564(sp)
 8002b68:	40004226 	beq	r8,zero,8002c74 <__kernel_rem_pio2+0xd6c>
 8002b6c:	da008f17 	ldw	r8,572(sp)
 8002b70:	1009883a 	mov	r4,r2
 8002b74:	18a0003c 	xorhi	r2,r3,32768
 8002b78:	41000215 	stw	r4,8(r8)
 8002b7c:	40800315 	stw	r2,12(r8)
 8002b80:	003f0c06 	br	80027b4 <__alt_data_end+0xfc0027b4>
 8002b84:	da008f17 	ldw	r8,572(sp)
 8002b88:	100d883a 	mov	r6,r2
 8002b8c:	180f883a 	mov	r7,r3
 8002b90:	40800015 	stw	r2,0(r8)
 8002b94:	40c00115 	stw	r3,4(r8)
 8002b98:	80065500 	call	8006550 <__subdf3>
 8002b9c:	047fe716 	blt	zero,r17,8002b3c <__alt_data_end+0xfc002b3c>
 8002ba0:	da008f17 	ldw	r8,572(sp)
 8002ba4:	1009883a 	mov	r4,r2
 8002ba8:	1805883a 	mov	r2,r3
 8002bac:	41000215 	stw	r4,8(r8)
 8002bb0:	40800315 	stw	r2,12(r8)
 8002bb4:	003eff06 	br	80027b4 <__alt_data_end+0xfc0027b4>
 8002bb8:	da008f17 	ldw	r8,572(sp)
 8002bbc:	d9802817 	ldw	r6,160(sp)
 8002bc0:	d9402a17 	ldw	r5,168(sp)
 8002bc4:	d9002b17 	ldw	r4,172(sp)
 8002bc8:	41800015 	stw	r6,0(r8)
 8002bcc:	d9802917 	ldw	r6,164(sp)
 8002bd0:	41400215 	stw	r5,8(r8)
 8002bd4:	41000315 	stw	r4,12(r8)
 8002bd8:	41800115 	stw	r6,4(r8)
 8002bdc:	40800415 	stw	r2,16(r8)
 8002be0:	40c00515 	stw	r3,20(r8)
 8002be4:	003ef306 	br	80027b4 <__alt_data_end+0xfc0027b4>
 8002be8:	da00a617 	ldw	r8,664(sp)
 8002bec:	008000c4 	movi	r2,3
 8002bf0:	40bef01e 	bne	r8,r2,80027b4 <__alt_data_end+0xfc0027b4>
 8002bf4:	0005883a 	mov	r2,zero
 8002bf8:	0007883a 	mov	r3,zero
 8002bfc:	003fa506 	br	8002a94 <__alt_data_end+0xfc002a94>
 8002c00:	9485883a 	add	r2,r18,r18
 8002c04:	1085883a 	add	r2,r2,r2
 8002c08:	d8a1883a 	add	r16,sp,r2
 8002c0c:	880b883a 	mov	r5,r17
 8002c10:	a809883a 	mov	r4,r21
 8002c14:	84007804 	addi	r16,r16,480
 8002c18:	8006e4c0 	call	8006e4c <__fixdfsi>
 8002c1c:	80800015 	stw	r2,0(r16)
 8002c20:	9023883a 	mov	r17,r18
 8002c24:	003e7e06 	br	8002620 <__alt_data_end+0xfc002620>
 8002c28:	a80d883a 	mov	r6,r21
 8002c2c:	400f883a 	mov	r7,r8
 8002c30:	0009883a 	mov	r4,zero
 8002c34:	014ffc34 	movhi	r5,16368
 8002c38:	80065500 	call	8006550 <__subdf3>
 8002c3c:	102b883a 	mov	r21,r2
 8002c40:	1811883a 	mov	r8,r3
 8002c44:	04c00084 	movi	r19,2
 8002c48:	003dc006 	br	800234c <__alt_data_end+0xfc00234c>
 8002c4c:	da00a617 	ldw	r8,664(sp)
 8002c50:	00800084 	movi	r2,2
 8002c54:	123fe416 	blt	r2,r8,8002be8 <__alt_data_end+0xfc002be8>
 8002c58:	02000c16 	blt	zero,r8,8002c8c <__kernel_rem_pio2+0xd84>
 8002c5c:	403ed51e 	bne	r8,zero,80027b4 <__alt_data_end+0xfc0027b4>
 8002c60:	0005883a 	mov	r2,zero
 8002c64:	0007883a 	mov	r3,zero
 8002c68:	003ecc06 	br	800279c <__alt_data_end+0xfc00279c>
 8002c6c:	d8009215 	stw	zero,584(sp)
 8002c70:	003cc306 	br	8001f80 <__alt_data_end+0xfc001f80>
 8002c74:	da008f17 	ldw	r8,572(sp)
 8002c78:	1009883a 	mov	r4,r2
 8002c7c:	1805883a 	mov	r2,r3
 8002c80:	41000215 	stw	r4,8(r8)
 8002c84:	40800315 	stw	r2,12(r8)
 8002c88:	003eca06 	br	80027b4 <__alt_data_end+0xfc0027b4>
 8002c8c:	0005883a 	mov	r2,zero
 8002c90:	0007883a 	mov	r3,zero
 8002c94:	003f9d06 	br	8002b0c <__alt_data_end+0xfc002b0c>

08002c98 <__kernel_sin>:
 8002c98:	00a00034 	movhi	r2,32768
 8002c9c:	defff404 	addi	sp,sp,-48
 8002ca0:	10bfffc4 	addi	r2,r2,-1
 8002ca4:	00cf9034 	movhi	r3,15936
 8002ca8:	ddc00915 	stw	r23,36(sp)
 8002cac:	dd800815 	stw	r22,32(sp)
 8002cb0:	dc400315 	stw	r17,12(sp)
 8002cb4:	dc000215 	stw	r16,8(sp)
 8002cb8:	dfc00b15 	stw	ra,44(sp)
 8002cbc:	df000a15 	stw	fp,40(sp)
 8002cc0:	dd400715 	stw	r21,28(sp)
 8002cc4:	dd000615 	stw	r20,24(sp)
 8002cc8:	dcc00515 	stw	r19,20(sp)
 8002ccc:	dc800415 	stw	r18,16(sp)
 8002cd0:	2884703a 	and	r2,r5,r2
 8002cd4:	18ffffc4 	addi	r3,r3,-1
 8002cd8:	2821883a 	mov	r16,r5
 8002cdc:	2023883a 	mov	r17,r4
 8002ce0:	302f883a 	mov	r23,r6
 8002ce4:	382d883a 	mov	r22,r7
 8002ce8:	18800216 	blt	r3,r2,8002cf4 <__kernel_sin+0x5c>
 8002cec:	8006e4c0 	call	8006e4c <__fixdfsi>
 8002cf0:	10009926 	beq	r2,zero,8002f58 <__kernel_sin+0x2c0>
 8002cf4:	880d883a 	mov	r6,r17
 8002cf8:	800f883a 	mov	r7,r16
 8002cfc:	8809883a 	mov	r4,r17
 8002d00:	800b883a 	mov	r5,r16
 8002d04:	8005e380 	call	8005e38 <__muldf3>
 8002d08:	100d883a 	mov	r6,r2
 8002d0c:	180f883a 	mov	r7,r3
 8002d10:	8809883a 	mov	r4,r17
 8002d14:	800b883a 	mov	r5,r16
 8002d18:	1027883a 	mov	r19,r2
 8002d1c:	1825883a 	mov	r18,r3
 8002d20:	8005e380 	call	8005e38 <__muldf3>
 8002d24:	0196b434 	movhi	r6,23248
 8002d28:	01cf79b4 	movhi	r7,15846
 8002d2c:	31b55f04 	addi	r6,r6,-10884
 8002d30:	39f64e84 	addi	r7,r7,-9926
 8002d34:	9809883a 	mov	r4,r19
 8002d38:	900b883a 	mov	r5,r18
 8002d3c:	102b883a 	mov	r21,r2
 8002d40:	1829883a 	mov	r20,r3
 8002d44:	8005e380 	call	8005e38 <__muldf3>
 8002d48:	01a28b34 	movhi	r6,35372
 8002d4c:	01cf96f4 	movhi	r7,15963
 8002d50:	31a73ac4 	addi	r6,r6,-25365
 8002d54:	39f97984 	addi	r7,r7,-6682
 8002d58:	1009883a 	mov	r4,r2
 8002d5c:	180b883a 	mov	r5,r3
 8002d60:	80065500 	call	8006550 <__subdf3>
 8002d64:	980d883a 	mov	r6,r19
 8002d68:	900f883a 	mov	r7,r18
 8002d6c:	1009883a 	mov	r4,r2
 8002d70:	180b883a 	mov	r5,r3
 8002d74:	8005e380 	call	8005e38 <__muldf3>
 8002d78:	0195ecb4 	movhi	r6,22450
 8002d7c:	01cfb1f4 	movhi	r7,16071
 8002d80:	31bf9f44 	addi	r6,r6,-387
 8002d84:	39c778c4 	addi	r7,r7,7651
 8002d88:	1009883a 	mov	r4,r2
 8002d8c:	180b883a 	mov	r5,r3
 8002d90:	8004a4c0 	call	8004a4c <__adddf3>
 8002d94:	980d883a 	mov	r6,r19
 8002d98:	900f883a 	mov	r7,r18
 8002d9c:	1009883a 	mov	r4,r2
 8002da0:	180b883a 	mov	r5,r3
 8002da4:	8005e380 	call	8005e38 <__muldf3>
 8002da8:	01867074 	movhi	r6,6593
 8002dac:	01cfcab4 	movhi	r7,16170
 8002db0:	31987544 	addi	r6,r6,25045
 8002db4:	39c06804 	addi	r7,r7,416
 8002db8:	1009883a 	mov	r4,r2
 8002dbc:	180b883a 	mov	r5,r3
 8002dc0:	80065500 	call	8006550 <__subdf3>
 8002dc4:	980d883a 	mov	r6,r19
 8002dc8:	900f883a 	mov	r7,r18
 8002dcc:	1009883a 	mov	r4,r2
 8002dd0:	180b883a 	mov	r5,r3
 8002dd4:	8005e380 	call	8005e38 <__muldf3>
 8002dd8:	01844474 	movhi	r6,4369
 8002ddc:	01cfe074 	movhi	r7,16257
 8002de0:	31be2984 	addi	r6,r6,-1882
 8002de4:	39c44444 	addi	r7,r7,4369
 8002de8:	1009883a 	mov	r4,r2
 8002dec:	180b883a 	mov	r5,r3
 8002df0:	8004a4c0 	call	8004a4c <__adddf3>
 8002df4:	1011883a 	mov	r8,r2
 8002df8:	d8800c17 	ldw	r2,48(sp)
 8002dfc:	1839883a 	mov	fp,r3
 8002e00:	10003e26 	beq	r2,zero,8002efc <__kernel_sin+0x264>
 8002e04:	000d883a 	mov	r6,zero
 8002e08:	01cff834 	movhi	r7,16352
 8002e0c:	b809883a 	mov	r4,r23
 8002e10:	b00b883a 	mov	r5,r22
 8002e14:	da000015 	stw	r8,0(sp)
 8002e18:	8005e380 	call	8005e38 <__muldf3>
 8002e1c:	da000017 	ldw	r8,0(sp)
 8002e20:	e00f883a 	mov	r7,fp
 8002e24:	a809883a 	mov	r4,r21
 8002e28:	400d883a 	mov	r6,r8
 8002e2c:	a00b883a 	mov	r5,r20
 8002e30:	d8c00115 	stw	r3,4(sp)
 8002e34:	d8800015 	stw	r2,0(sp)
 8002e38:	8005e380 	call	8005e38 <__muldf3>
 8002e3c:	da800017 	ldw	r10,0(sp)
 8002e40:	da400117 	ldw	r9,4(sp)
 8002e44:	100d883a 	mov	r6,r2
 8002e48:	5009883a 	mov	r4,r10
 8002e4c:	480b883a 	mov	r5,r9
 8002e50:	180f883a 	mov	r7,r3
 8002e54:	80065500 	call	8006550 <__subdf3>
 8002e58:	980d883a 	mov	r6,r19
 8002e5c:	900f883a 	mov	r7,r18
 8002e60:	1009883a 	mov	r4,r2
 8002e64:	180b883a 	mov	r5,r3
 8002e68:	8005e380 	call	8005e38 <__muldf3>
 8002e6c:	b80d883a 	mov	r6,r23
 8002e70:	b00f883a 	mov	r7,r22
 8002e74:	1009883a 	mov	r4,r2
 8002e78:	180b883a 	mov	r5,r3
 8002e7c:	80065500 	call	8006550 <__subdf3>
 8002e80:	01955574 	movhi	r6,21845
 8002e84:	01cff174 	movhi	r7,16325
 8002e88:	31955244 	addi	r6,r6,21833
 8002e8c:	39d55544 	addi	r7,r7,21845
 8002e90:	a809883a 	mov	r4,r21
 8002e94:	a00b883a 	mov	r5,r20
 8002e98:	1027883a 	mov	r19,r2
 8002e9c:	1825883a 	mov	r18,r3
 8002ea0:	8005e380 	call	8005e38 <__muldf3>
 8002ea4:	100d883a 	mov	r6,r2
 8002ea8:	180f883a 	mov	r7,r3
 8002eac:	9809883a 	mov	r4,r19
 8002eb0:	900b883a 	mov	r5,r18
 8002eb4:	8004a4c0 	call	8004a4c <__adddf3>
 8002eb8:	100d883a 	mov	r6,r2
 8002ebc:	180f883a 	mov	r7,r3
 8002ec0:	8809883a 	mov	r4,r17
 8002ec4:	800b883a 	mov	r5,r16
 8002ec8:	80065500 	call	8006550 <__subdf3>
 8002ecc:	dfc00b17 	ldw	ra,44(sp)
 8002ed0:	df000a17 	ldw	fp,40(sp)
 8002ed4:	ddc00917 	ldw	r23,36(sp)
 8002ed8:	dd800817 	ldw	r22,32(sp)
 8002edc:	dd400717 	ldw	r21,28(sp)
 8002ee0:	dd000617 	ldw	r20,24(sp)
 8002ee4:	dcc00517 	ldw	r19,20(sp)
 8002ee8:	dc800417 	ldw	r18,16(sp)
 8002eec:	dc400317 	ldw	r17,12(sp)
 8002ef0:	dc000217 	ldw	r16,8(sp)
 8002ef4:	dec00c04 	addi	sp,sp,48
 8002ef8:	f800283a 	ret
 8002efc:	400d883a 	mov	r6,r8
 8002f00:	9809883a 	mov	r4,r19
 8002f04:	900b883a 	mov	r5,r18
 8002f08:	180f883a 	mov	r7,r3
 8002f0c:	8005e380 	call	8005e38 <__muldf3>
 8002f10:	01955574 	movhi	r6,21845
 8002f14:	01cff174 	movhi	r7,16325
 8002f18:	31955244 	addi	r6,r6,21833
 8002f1c:	39d55544 	addi	r7,r7,21845
 8002f20:	1009883a 	mov	r4,r2
 8002f24:	180b883a 	mov	r5,r3
 8002f28:	80065500 	call	8006550 <__subdf3>
 8002f2c:	a80d883a 	mov	r6,r21
 8002f30:	a00f883a 	mov	r7,r20
 8002f34:	1009883a 	mov	r4,r2
 8002f38:	180b883a 	mov	r5,r3
 8002f3c:	8005e380 	call	8005e38 <__muldf3>
 8002f40:	880d883a 	mov	r6,r17
 8002f44:	800f883a 	mov	r7,r16
 8002f48:	1009883a 	mov	r4,r2
 8002f4c:	180b883a 	mov	r5,r3
 8002f50:	8004a4c0 	call	8004a4c <__adddf3>
 8002f54:	003fdd06 	br	8002ecc <__alt_data_end+0xfc002ecc>
 8002f58:	8805883a 	mov	r2,r17
 8002f5c:	8007883a 	mov	r3,r16
 8002f60:	003fda06 	br	8002ecc <__alt_data_end+0xfc002ecc>

08002f64 <fabs>:
 8002f64:	00e00034 	movhi	r3,32768
 8002f68:	18ffffc4 	addi	r3,r3,-1
 8002f6c:	2005883a 	mov	r2,r4
 8002f70:	28c6703a 	and	r3,r5,r3
 8002f74:	f800283a 	ret

08002f78 <floor>:
 8002f78:	2811d53a 	srai	r8,r5,20
 8002f7c:	defffa04 	addi	sp,sp,-24
 8002f80:	dcc00315 	stw	r19,12(sp)
 8002f84:	4201ffcc 	andi	r8,r8,2047
 8002f88:	dc800215 	stw	r18,8(sp)
 8002f8c:	dc400115 	stw	r17,4(sp)
 8002f90:	dc000015 	stw	r16,0(sp)
 8002f94:	dfc00515 	stw	ra,20(sp)
 8002f98:	dd000415 	stw	r20,16(sp)
 8002f9c:	44bf0044 	addi	r18,r8,-1023
 8002fa0:	018004c4 	movi	r6,19
 8002fa4:	2821883a 	mov	r16,r5
 8002fa8:	2005883a 	mov	r2,r4
 8002fac:	280f883a 	mov	r7,r5
 8002fb0:	2827883a 	mov	r19,r5
 8002fb4:	2023883a 	mov	r17,r4
 8002fb8:	34801916 	blt	r6,r18,8003020 <floor+0xa8>
 8002fbc:	90003c16 	blt	r18,zero,80030b0 <floor+0x138>
 8002fc0:	05000434 	movhi	r20,16
 8002fc4:	a53fffc4 	addi	r20,r20,-1
 8002fc8:	a4a9d83a 	sra	r20,r20,r18
 8002fcc:	2d0c703a 	and	r6,r5,r20
 8002fd0:	310cb03a 	or	r6,r6,r4
 8002fd4:	30001626 	beq	r6,zero,8003030 <floor+0xb8>
 8002fd8:	01a20034 	movhi	r6,34816
 8002fdc:	01df8e34 	movhi	r7,32312
 8002fe0:	319d6704 	addi	r6,r6,30108
 8002fe4:	39f90f04 	addi	r7,r7,-7108
 8002fe8:	8004a4c0 	call	8004a4c <__adddf3>
 8002fec:	000d883a 	mov	r6,zero
 8002ff0:	000f883a 	mov	r7,zero
 8002ff4:	1009883a 	mov	r4,r2
 8002ff8:	180b883a 	mov	r5,r3
 8002ffc:	8005c680 	call	8005c68 <__gedf2>
 8003000:	0080040e 	bge	zero,r2,8003014 <floor+0x9c>
 8003004:	80003c16 	blt	r16,zero,80030f8 <floor+0x180>
 8003008:	0520303a 	nor	r16,zero,r20
 800300c:	84e0703a 	and	r16,r16,r19
 8003010:	0023883a 	mov	r17,zero
 8003014:	8805883a 	mov	r2,r17
 8003018:	8007883a 	mov	r3,r16
 800301c:	00000506 	br	8003034 <floor+0xbc>
 8003020:	01800cc4 	movi	r6,51
 8003024:	34800b0e 	bge	r6,r18,8003054 <floor+0xdc>
 8003028:	01810004 	movi	r6,1024
 800302c:	91802f26 	beq	r18,r6,80030ec <floor+0x174>
 8003030:	3807883a 	mov	r3,r7
 8003034:	dfc00517 	ldw	ra,20(sp)
 8003038:	dd000417 	ldw	r20,16(sp)
 800303c:	dcc00317 	ldw	r19,12(sp)
 8003040:	dc800217 	ldw	r18,8(sp)
 8003044:	dc400117 	ldw	r17,4(sp)
 8003048:	dc000017 	ldw	r16,0(sp)
 800304c:	dec00604 	addi	sp,sp,24
 8003050:	f800283a 	ret
 8003054:	423efb44 	addi	r8,r8,-1043
 8003058:	053fffc4 	movi	r20,-1
 800305c:	a228d83a 	srl	r20,r20,r8
 8003060:	250c703a 	and	r6,r4,r20
 8003064:	303ff226 	beq	r6,zero,8003030 <__alt_data_end+0xfc003030>
 8003068:	01a20034 	movhi	r6,34816
 800306c:	01df8e34 	movhi	r7,32312
 8003070:	319d6704 	addi	r6,r6,30108
 8003074:	39f90f04 	addi	r7,r7,-7108
 8003078:	8004a4c0 	call	8004a4c <__adddf3>
 800307c:	000d883a 	mov	r6,zero
 8003080:	000f883a 	mov	r7,zero
 8003084:	1009883a 	mov	r4,r2
 8003088:	180b883a 	mov	r5,r3
 800308c:	8005c680 	call	8005c68 <__gedf2>
 8003090:	00bfe00e 	bge	zero,r2,8003014 <__alt_data_end+0xfc003014>
 8003094:	80001c16 	blt	r16,zero,8003108 <floor+0x190>
 8003098:	0510303a 	nor	r8,zero,r20
 800309c:	9821883a 	mov	r16,r19
 80030a0:	8a22703a 	and	r17,r17,r8
 80030a4:	8805883a 	mov	r2,r17
 80030a8:	8007883a 	mov	r3,r16
 80030ac:	003fe106 	br	8003034 <__alt_data_end+0xfc003034>
 80030b0:	01a20034 	movhi	r6,34816
 80030b4:	01df8e34 	movhi	r7,32312
 80030b8:	319d6704 	addi	r6,r6,30108
 80030bc:	39f90f04 	addi	r7,r7,-7108
 80030c0:	8004a4c0 	call	8004a4c <__adddf3>
 80030c4:	000d883a 	mov	r6,zero
 80030c8:	000f883a 	mov	r7,zero
 80030cc:	1009883a 	mov	r4,r2
 80030d0:	180b883a 	mov	r5,r3
 80030d4:	8005c680 	call	8005c68 <__gedf2>
 80030d8:	00bfce0e 	bge	zero,r2,8003014 <__alt_data_end+0xfc003014>
 80030dc:	80001516 	blt	r16,zero,8003134 <floor+0x1bc>
 80030e0:	0023883a 	mov	r17,zero
 80030e4:	0021883a 	mov	r16,zero
 80030e8:	003fca06 	br	8003014 <__alt_data_end+0xfc003014>
 80030ec:	200d883a 	mov	r6,r4
 80030f0:	8004a4c0 	call	8004a4c <__adddf3>
 80030f4:	003fcf06 	br	8003034 <__alt_data_end+0xfc003034>
 80030f8:	00800434 	movhi	r2,16
 80030fc:	14a5d83a 	sra	r18,r2,r18
 8003100:	84a7883a 	add	r19,r16,r18
 8003104:	003fc006 	br	8003008 <__alt_data_end+0xfc003008>
 8003108:	00800504 	movi	r2,20
 800310c:	90801326 	beq	r18,r2,800315c <floor+0x1e4>
 8003110:	00800d04 	movi	r2,52
 8003114:	14a5c83a 	sub	r18,r2,r18
 8003118:	00800044 	movi	r2,1
 800311c:	1484983a 	sll	r2,r2,r18
 8003120:	1445883a 	add	r2,r2,r17
 8003124:	14400b2e 	bgeu	r2,r17,8003154 <floor+0x1dc>
 8003128:	84c00044 	addi	r19,r16,1
 800312c:	1023883a 	mov	r17,r2
 8003130:	003fd906 	br	8003098 <__alt_data_end+0xfc003098>
 8003134:	00a00034 	movhi	r2,32768
 8003138:	10bfffc4 	addi	r2,r2,-1
 800313c:	8084703a 	and	r2,r16,r2
 8003140:	1462b03a 	or	r17,r2,r17
 8003144:	883fb326 	beq	r17,zero,8003014 <__alt_data_end+0xfc003014>
 8003148:	0023883a 	mov	r17,zero
 800314c:	042ffc34 	movhi	r16,49136
 8003150:	003fb006 	br	8003014 <__alt_data_end+0xfc003014>
 8003154:	1023883a 	mov	r17,r2
 8003158:	003fcf06 	br	8003098 <__alt_data_end+0xfc003098>
 800315c:	84c00044 	addi	r19,r16,1
 8003160:	003fcd06 	br	8003098 <__alt_data_end+0xfc003098>

08003164 <__fpclassifyd>:
 8003164:	00a00034 	movhi	r2,32768
 8003168:	10bfffc4 	addi	r2,r2,-1
 800316c:	2884703a 	and	r2,r5,r2
 8003170:	10000726 	beq	r2,zero,8003190 <__fpclassifyd+0x2c>
 8003174:	00fffc34 	movhi	r3,65520
 8003178:	019ff834 	movhi	r6,32736
 800317c:	28c7883a 	add	r3,r5,r3
 8003180:	31bfffc4 	addi	r6,r6,-1
 8003184:	30c00536 	bltu	r6,r3,800319c <__fpclassifyd+0x38>
 8003188:	00800104 	movi	r2,4
 800318c:	f800283a 	ret
 8003190:	2000021e 	bne	r4,zero,800319c <__fpclassifyd+0x38>
 8003194:	00800084 	movi	r2,2
 8003198:	f800283a 	ret
 800319c:	00dffc34 	movhi	r3,32752
 80031a0:	019ff834 	movhi	r6,32736
 80031a4:	28cb883a 	add	r5,r5,r3
 80031a8:	31bfffc4 	addi	r6,r6,-1
 80031ac:	317ff62e 	bgeu	r6,r5,8003188 <__alt_data_end+0xfc003188>
 80031b0:	01400434 	movhi	r5,16
 80031b4:	297fffc4 	addi	r5,r5,-1
 80031b8:	28800236 	bltu	r5,r2,80031c4 <__fpclassifyd+0x60>
 80031bc:	008000c4 	movi	r2,3
 80031c0:	f800283a 	ret
 80031c4:	10c00226 	beq	r2,r3,80031d0 <__fpclassifyd+0x6c>
 80031c8:	0005883a 	mov	r2,zero
 80031cc:	f800283a 	ret
 80031d0:	2005003a 	cmpeq	r2,r4,zero
 80031d4:	f800283a 	ret

080031d8 <matherr>:
 80031d8:	0005883a 	mov	r2,zero
 80031dc:	f800283a 	ret

080031e0 <scalbn>:
 80031e0:	2a1ffc2c 	andhi	r8,r5,32752
 80031e4:	4011d53a 	srai	r8,r8,20
 80031e8:	defffe04 	addi	sp,sp,-8
 80031ec:	dc000015 	stw	r16,0(sp)
 80031f0:	dfc00115 	stw	ra,4(sp)
 80031f4:	280f883a 	mov	r7,r5
 80031f8:	2015883a 	mov	r10,r4
 80031fc:	3021883a 	mov	r16,r6
 8003200:	40001e1e 	bne	r8,zero,800327c <scalbn+0x9c>
 8003204:	00a00034 	movhi	r2,32768
 8003208:	10bfffc4 	addi	r2,r2,-1
 800320c:	2884703a 	and	r2,r5,r2
 8003210:	1104b03a 	or	r2,r2,r4
 8003214:	10002226 	beq	r2,zero,80032a0 <scalbn+0xc0>
 8003218:	01d0d434 	movhi	r7,17232
 800321c:	000d883a 	mov	r6,zero
 8003220:	8005e380 	call	8005e38 <__muldf3>
 8003224:	013ffff4 	movhi	r4,65535
 8003228:	210f2c04 	addi	r4,r4,15536
 800322c:	1015883a 	mov	r10,r2
 8003230:	180f883a 	mov	r7,r3
 8003234:	81002a16 	blt	r16,r4,80032e0 <scalbn+0x100>
 8003238:	191ffc2c 	andhi	r4,r3,32752
 800323c:	2009d53a 	srai	r4,r4,20
 8003240:	223ff284 	addi	r8,r4,-54
 8003244:	8211883a 	add	r8,r16,r8
 8003248:	0081ff84 	movi	r2,2046
 800324c:	12002f16 	blt	r2,r8,800330c <scalbn+0x12c>
 8003250:	0200190e 	bge	zero,r8,80032b8 <scalbn+0xd8>
 8003254:	4010953a 	slli	r8,r8,20
 8003258:	01600434 	movhi	r5,32784
 800325c:	297fffc4 	addi	r5,r5,-1
 8003260:	194e703a 	and	r7,r3,r5
 8003264:	5005883a 	mov	r2,r10
 8003268:	3a06b03a 	or	r3,r7,r8
 800326c:	dfc00117 	ldw	ra,4(sp)
 8003270:	dc000017 	ldw	r16,0(sp)
 8003274:	dec00204 	addi	sp,sp,8
 8003278:	f800283a 	ret
 800327c:	0081ffc4 	movi	r2,2047
 8003280:	2807883a 	mov	r3,r5
 8003284:	40bfef1e 	bne	r8,r2,8003244 <__alt_data_end+0xfc003244>
 8003288:	200d883a 	mov	r6,r4
 800328c:	8004a4c0 	call	8004a4c <__adddf3>
 8003290:	dfc00117 	ldw	ra,4(sp)
 8003294:	dc000017 	ldw	r16,0(sp)
 8003298:	dec00204 	addi	sp,sp,8
 800329c:	f800283a 	ret
 80032a0:	2005883a 	mov	r2,r4
 80032a4:	2807883a 	mov	r3,r5
 80032a8:	dfc00117 	ldw	ra,4(sp)
 80032ac:	dc000017 	ldw	r16,0(sp)
 80032b0:	dec00204 	addi	sp,sp,8
 80032b4:	f800283a 	ret
 80032b8:	00bff2c4 	movi	r2,-53
 80032bc:	4080240e 	bge	r8,r2,8003350 <scalbn+0x170>
 80032c0:	00b0d414 	movui	r2,50000
 80032c4:	14001116 	blt	r2,r16,800330c <scalbn+0x12c>
 80032c8:	0130be74 	movhi	r4,49913
 80032cc:	01406974 	movhi	r5,421
 80032d0:	213cd644 	addi	r4,r4,-3239
 80032d4:	295b87c4 	addi	r5,r5,28191
 80032d8:	500d883a 	mov	r6,r10
 80032dc:	800337c0 	call	800337c <copysign>
 80032e0:	01b0be74 	movhi	r6,49913
 80032e4:	01c06974 	movhi	r7,421
 80032e8:	31bcd644 	addi	r6,r6,-3239
 80032ec:	39db87c4 	addi	r7,r7,28191
 80032f0:	1009883a 	mov	r4,r2
 80032f4:	180b883a 	mov	r5,r3
 80032f8:	8005e380 	call	8005e38 <__muldf3>
 80032fc:	dfc00117 	ldw	ra,4(sp)
 8003300:	dc000017 	ldw	r16,0(sp)
 8003304:	dec00204 	addi	sp,sp,8
 8003308:	f800283a 	ret
 800330c:	01220034 	movhi	r4,34816
 8003310:	015f8e34 	movhi	r5,32312
 8003314:	500d883a 	mov	r6,r10
 8003318:	211d6704 	addi	r4,r4,30108
 800331c:	29790f04 	addi	r5,r5,-7108
 8003320:	800337c0 	call	800337c <copysign>
 8003324:	01a20034 	movhi	r6,34816
 8003328:	01df8e34 	movhi	r7,32312
 800332c:	319d6704 	addi	r6,r6,30108
 8003330:	39f90f04 	addi	r7,r7,-7108
 8003334:	1009883a 	mov	r4,r2
 8003338:	180b883a 	mov	r5,r3
 800333c:	8005e380 	call	8005e38 <__muldf3>
 8003340:	dfc00117 	ldw	ra,4(sp)
 8003344:	dc000017 	ldw	r16,0(sp)
 8003348:	dec00204 	addi	sp,sp,8
 800334c:	f800283a 	ret
 8003350:	42000d84 	addi	r8,r8,54
 8003354:	4012953a 	slli	r9,r8,20
 8003358:	01e00434 	movhi	r7,32784
 800335c:	39ffffc4 	addi	r7,r7,-1
 8003360:	19ca703a 	and	r5,r3,r7
 8003364:	000d883a 	mov	r6,zero
 8003368:	01cf2434 	movhi	r7,15504
 800336c:	5009883a 	mov	r4,r10
 8003370:	494ab03a 	or	r5,r9,r5
 8003374:	8005e380 	call	8005e38 <__muldf3>
 8003378:	003fbc06 	br	800326c <__alt_data_end+0xfc00326c>

0800337c <copysign>:
 800337c:	2005883a 	mov	r2,r4
 8003380:	01200034 	movhi	r4,32768
 8003384:	213fffc4 	addi	r4,r4,-1
 8003388:	38e0002c 	andhi	r3,r7,32768
 800338c:	290a703a 	and	r5,r5,r4
 8003390:	28c6b03a 	or	r3,r5,r3
 8003394:	f800283a 	ret

08003398 <__divsi3>:
 8003398:	20001b16 	blt	r4,zero,8003408 <__divsi3+0x70>
 800339c:	000f883a 	mov	r7,zero
 80033a0:	28001616 	blt	r5,zero,80033fc <__divsi3+0x64>
 80033a4:	200d883a 	mov	r6,r4
 80033a8:	29001a2e 	bgeu	r5,r4,8003414 <__divsi3+0x7c>
 80033ac:	00800804 	movi	r2,32
 80033b0:	00c00044 	movi	r3,1
 80033b4:	00000106 	br	80033bc <__divsi3+0x24>
 80033b8:	10000d26 	beq	r2,zero,80033f0 <__divsi3+0x58>
 80033bc:	294b883a 	add	r5,r5,r5
 80033c0:	10bfffc4 	addi	r2,r2,-1
 80033c4:	18c7883a 	add	r3,r3,r3
 80033c8:	293ffb36 	bltu	r5,r4,80033b8 <__alt_data_end+0xfc0033b8>
 80033cc:	0005883a 	mov	r2,zero
 80033d0:	18000726 	beq	r3,zero,80033f0 <__divsi3+0x58>
 80033d4:	0005883a 	mov	r2,zero
 80033d8:	31400236 	bltu	r6,r5,80033e4 <__divsi3+0x4c>
 80033dc:	314dc83a 	sub	r6,r6,r5
 80033e0:	10c4b03a 	or	r2,r2,r3
 80033e4:	1806d07a 	srli	r3,r3,1
 80033e8:	280ad07a 	srli	r5,r5,1
 80033ec:	183ffa1e 	bne	r3,zero,80033d8 <__alt_data_end+0xfc0033d8>
 80033f0:	38000126 	beq	r7,zero,80033f8 <__divsi3+0x60>
 80033f4:	0085c83a 	sub	r2,zero,r2
 80033f8:	f800283a 	ret
 80033fc:	014bc83a 	sub	r5,zero,r5
 8003400:	39c0005c 	xori	r7,r7,1
 8003404:	003fe706 	br	80033a4 <__alt_data_end+0xfc0033a4>
 8003408:	0109c83a 	sub	r4,zero,r4
 800340c:	01c00044 	movi	r7,1
 8003410:	003fe306 	br	80033a0 <__alt_data_end+0xfc0033a0>
 8003414:	00c00044 	movi	r3,1
 8003418:	003fee06 	br	80033d4 <__alt_data_end+0xfc0033d4>

0800341c <__modsi3>:
 800341c:	20001716 	blt	r4,zero,800347c <__modsi3+0x60>
 8003420:	000f883a 	mov	r7,zero
 8003424:	2005883a 	mov	r2,r4
 8003428:	28001216 	blt	r5,zero,8003474 <__modsi3+0x58>
 800342c:	2900162e 	bgeu	r5,r4,8003488 <__modsi3+0x6c>
 8003430:	01800804 	movi	r6,32
 8003434:	00c00044 	movi	r3,1
 8003438:	00000106 	br	8003440 <__modsi3+0x24>
 800343c:	30000a26 	beq	r6,zero,8003468 <__modsi3+0x4c>
 8003440:	294b883a 	add	r5,r5,r5
 8003444:	31bfffc4 	addi	r6,r6,-1
 8003448:	18c7883a 	add	r3,r3,r3
 800344c:	293ffb36 	bltu	r5,r4,800343c <__alt_data_end+0xfc00343c>
 8003450:	18000526 	beq	r3,zero,8003468 <__modsi3+0x4c>
 8003454:	1806d07a 	srli	r3,r3,1
 8003458:	11400136 	bltu	r2,r5,8003460 <__modsi3+0x44>
 800345c:	1145c83a 	sub	r2,r2,r5
 8003460:	280ad07a 	srli	r5,r5,1
 8003464:	183ffb1e 	bne	r3,zero,8003454 <__alt_data_end+0xfc003454>
 8003468:	38000126 	beq	r7,zero,8003470 <__modsi3+0x54>
 800346c:	0085c83a 	sub	r2,zero,r2
 8003470:	f800283a 	ret
 8003474:	014bc83a 	sub	r5,zero,r5
 8003478:	003fec06 	br	800342c <__alt_data_end+0xfc00342c>
 800347c:	0109c83a 	sub	r4,zero,r4
 8003480:	01c00044 	movi	r7,1
 8003484:	003fe706 	br	8003424 <__alt_data_end+0xfc003424>
 8003488:	00c00044 	movi	r3,1
 800348c:	003ff106 	br	8003454 <__alt_data_end+0xfc003454>

08003490 <__udivsi3>:
 8003490:	200d883a 	mov	r6,r4
 8003494:	2900152e 	bgeu	r5,r4,80034ec <__udivsi3+0x5c>
 8003498:	28001416 	blt	r5,zero,80034ec <__udivsi3+0x5c>
 800349c:	00800804 	movi	r2,32
 80034a0:	00c00044 	movi	r3,1
 80034a4:	00000206 	br	80034b0 <__udivsi3+0x20>
 80034a8:	10000e26 	beq	r2,zero,80034e4 <__udivsi3+0x54>
 80034ac:	28000516 	blt	r5,zero,80034c4 <__udivsi3+0x34>
 80034b0:	294b883a 	add	r5,r5,r5
 80034b4:	10bfffc4 	addi	r2,r2,-1
 80034b8:	18c7883a 	add	r3,r3,r3
 80034bc:	293ffa36 	bltu	r5,r4,80034a8 <__alt_data_end+0xfc0034a8>
 80034c0:	18000826 	beq	r3,zero,80034e4 <__udivsi3+0x54>
 80034c4:	0005883a 	mov	r2,zero
 80034c8:	31400236 	bltu	r6,r5,80034d4 <__udivsi3+0x44>
 80034cc:	314dc83a 	sub	r6,r6,r5
 80034d0:	10c4b03a 	or	r2,r2,r3
 80034d4:	1806d07a 	srli	r3,r3,1
 80034d8:	280ad07a 	srli	r5,r5,1
 80034dc:	183ffa1e 	bne	r3,zero,80034c8 <__alt_data_end+0xfc0034c8>
 80034e0:	f800283a 	ret
 80034e4:	0005883a 	mov	r2,zero
 80034e8:	f800283a 	ret
 80034ec:	00c00044 	movi	r3,1
 80034f0:	003ff406 	br	80034c4 <__alt_data_end+0xfc0034c4>

080034f4 <__umodsi3>:
 80034f4:	2005883a 	mov	r2,r4
 80034f8:	2900122e 	bgeu	r5,r4,8003544 <__umodsi3+0x50>
 80034fc:	28001116 	blt	r5,zero,8003544 <__umodsi3+0x50>
 8003500:	01800804 	movi	r6,32
 8003504:	00c00044 	movi	r3,1
 8003508:	00000206 	br	8003514 <__umodsi3+0x20>
 800350c:	30000c26 	beq	r6,zero,8003540 <__umodsi3+0x4c>
 8003510:	28000516 	blt	r5,zero,8003528 <__umodsi3+0x34>
 8003514:	294b883a 	add	r5,r5,r5
 8003518:	31bfffc4 	addi	r6,r6,-1
 800351c:	18c7883a 	add	r3,r3,r3
 8003520:	293ffa36 	bltu	r5,r4,800350c <__alt_data_end+0xfc00350c>
 8003524:	18000626 	beq	r3,zero,8003540 <__umodsi3+0x4c>
 8003528:	1806d07a 	srli	r3,r3,1
 800352c:	11400136 	bltu	r2,r5,8003534 <__umodsi3+0x40>
 8003530:	1145c83a 	sub	r2,r2,r5
 8003534:	280ad07a 	srli	r5,r5,1
 8003538:	183ffb1e 	bne	r3,zero,8003528 <__alt_data_end+0xfc003528>
 800353c:	f800283a 	ret
 8003540:	f800283a 	ret
 8003544:	00c00044 	movi	r3,1
 8003548:	003ff706 	br	8003528 <__alt_data_end+0xfc003528>

0800354c <__addsf3>:
 800354c:	defffc04 	addi	sp,sp,-16
 8003550:	2004d7fa 	srli	r2,r4,31
 8003554:	280cd5fa 	srli	r6,r5,23
 8003558:	dc000015 	stw	r16,0(sp)
 800355c:	00c02034 	movhi	r3,128
 8003560:	2020d5fa 	srli	r16,r4,23
 8003564:	280ed7fa 	srli	r7,r5,31
 8003568:	18ffffc4 	addi	r3,r3,-1
 800356c:	dc400115 	stw	r17,4(sp)
 8003570:	1908703a 	and	r4,r3,r4
 8003574:	194a703a 	and	r5,r3,r5
 8003578:	dfc00315 	stw	ra,12(sp)
 800357c:	dc800215 	stw	r18,8(sp)
 8003580:	14403fcc 	andi	r17,r2,255
 8003584:	84003fcc 	andi	r16,r16,255
 8003588:	200890fa 	slli	r4,r4,3
 800358c:	31803fcc 	andi	r6,r6,255
 8003590:	280a90fa 	slli	r5,r5,3
 8003594:	89c05026 	beq	r17,r7,80036d8 <__addsf3+0x18c>
 8003598:	8185c83a 	sub	r2,r16,r6
 800359c:	00807a0e 	bge	zero,r2,8003788 <__addsf3+0x23c>
 80035a0:	30001e1e 	bne	r6,zero,800361c <__addsf3+0xd0>
 80035a4:	28006d1e 	bne	r5,zero,800375c <__addsf3+0x210>
 80035a8:	208001cc 	andi	r2,r4,7
 80035ac:	10000426 	beq	r2,zero,80035c0 <__addsf3+0x74>
 80035b0:	208003cc 	andi	r2,r4,15
 80035b4:	00c00104 	movi	r3,4
 80035b8:	10c00126 	beq	r2,r3,80035c0 <__addsf3+0x74>
 80035bc:	20c9883a 	add	r4,r4,r3
 80035c0:	2081002c 	andhi	r2,r4,1024
 80035c4:	10003926 	beq	r2,zero,80036ac <__addsf3+0x160>
 80035c8:	84000044 	addi	r16,r16,1
 80035cc:	00803fc4 	movi	r2,255
 80035d0:	80807826 	beq	r16,r2,80037b4 <__addsf3+0x268>
 80035d4:	200891ba 	slli	r4,r4,6
 80035d8:	8805883a 	mov	r2,r17
 80035dc:	2008d27a 	srli	r4,r4,9
 80035e0:	84003fcc 	andi	r16,r16,255
 80035e4:	800695fa 	slli	r3,r16,23
 80035e8:	10803fcc 	andi	r2,r2,255
 80035ec:	04002034 	movhi	r16,128
 80035f0:	843fffc4 	addi	r16,r16,-1
 80035f4:	100497fa 	slli	r2,r2,31
 80035f8:	2408703a 	and	r4,r4,r16
 80035fc:	20e0b03a 	or	r16,r4,r3
 8003600:	8084b03a 	or	r2,r16,r2
 8003604:	dfc00317 	ldw	ra,12(sp)
 8003608:	dc800217 	ldw	r18,8(sp)
 800360c:	dc400117 	ldw	r17,4(sp)
 8003610:	dc000017 	ldw	r16,0(sp)
 8003614:	dec00404 	addi	sp,sp,16
 8003618:	f800283a 	ret
 800361c:	00c03fc4 	movi	r3,255
 8003620:	80ffe126 	beq	r16,r3,80035a8 <__alt_data_end+0xfc0035a8>
 8003624:	29410034 	orhi	r5,r5,1024
 8003628:	00c006c4 	movi	r3,27
 800362c:	18807516 	blt	r3,r2,8003804 <__addsf3+0x2b8>
 8003630:	00c00804 	movi	r3,32
 8003634:	1887c83a 	sub	r3,r3,r2
 8003638:	28c6983a 	sll	r3,r5,r3
 800363c:	288ad83a 	srl	r5,r5,r2
 8003640:	1804c03a 	cmpne	r2,r3,zero
 8003644:	288ab03a 	or	r5,r5,r2
 8003648:	2149c83a 	sub	r4,r4,r5
 800364c:	2081002c 	andhi	r2,r4,1024
 8003650:	10001426 	beq	r2,zero,80036a4 <__addsf3+0x158>
 8003654:	04810034 	movhi	r18,1024
 8003658:	94bfffc4 	addi	r18,r18,-1
 800365c:	24a4703a 	and	r18,r4,r18
 8003660:	9009883a 	mov	r4,r18
 8003664:	80072600 	call	8007260 <__clzsi2>
 8003668:	10bffec4 	addi	r2,r2,-5
 800366c:	90a4983a 	sll	r18,r18,r2
 8003670:	14005416 	blt	r2,r16,80037c4 <__addsf3+0x278>
 8003674:	1405c83a 	sub	r2,r2,r16
 8003678:	11000044 	addi	r4,r2,1
 800367c:	00800804 	movi	r2,32
 8003680:	1105c83a 	sub	r2,r2,r4
 8003684:	9084983a 	sll	r2,r18,r2
 8003688:	9124d83a 	srl	r18,r18,r4
 800368c:	0021883a 	mov	r16,zero
 8003690:	1008c03a 	cmpne	r4,r2,zero
 8003694:	9108b03a 	or	r4,r18,r4
 8003698:	003fc306 	br	80035a8 <__alt_data_end+0xfc0035a8>
 800369c:	1000db26 	beq	r2,zero,8003a0c <__addsf3+0x4c0>
 80036a0:	1009883a 	mov	r4,r2
 80036a4:	208001cc 	andi	r2,r4,7
 80036a8:	103fc11e 	bne	r2,zero,80035b0 <__alt_data_end+0xfc0035b0>
 80036ac:	2006d0fa 	srli	r3,r4,3
 80036b0:	01003fc4 	movi	r4,255
 80036b4:	8805883a 	mov	r2,r17
 80036b8:	8100241e 	bne	r16,r4,800374c <__addsf3+0x200>
 80036bc:	18006e26 	beq	r3,zero,8003878 <__addsf3+0x32c>
 80036c0:	19001034 	orhi	r4,r3,64
 80036c4:	00c02034 	movhi	r3,128
 80036c8:	18ffffc4 	addi	r3,r3,-1
 80036cc:	043fffc4 	movi	r16,-1
 80036d0:	20c8703a 	and	r4,r4,r3
 80036d4:	003fc206 	br	80035e0 <__alt_data_end+0xfc0035e0>
 80036d8:	8187c83a 	sub	r3,r16,r6
 80036dc:	00c03e0e 	bge	zero,r3,80037d8 <__addsf3+0x28c>
 80036e0:	30002326 	beq	r6,zero,8003770 <__addsf3+0x224>
 80036e4:	01803fc4 	movi	r6,255
 80036e8:	81bfaf26 	beq	r16,r6,80035a8 <__alt_data_end+0xfc0035a8>
 80036ec:	29410034 	orhi	r5,r5,1024
 80036f0:	018006c4 	movi	r6,27
 80036f4:	30c07416 	blt	r6,r3,80038c8 <__addsf3+0x37c>
 80036f8:	01800804 	movi	r6,32
 80036fc:	30cdc83a 	sub	r6,r6,r3
 8003700:	298c983a 	sll	r6,r5,r6
 8003704:	28cad83a 	srl	r5,r5,r3
 8003708:	3006c03a 	cmpne	r3,r6,zero
 800370c:	28cab03a 	or	r5,r5,r3
 8003710:	2149883a 	add	r4,r4,r5
 8003714:	20c1002c 	andhi	r3,r4,1024
 8003718:	183fe226 	beq	r3,zero,80036a4 <__alt_data_end+0xfc0036a4>
 800371c:	84000044 	addi	r16,r16,1
 8003720:	00c03fc4 	movi	r3,255
 8003724:	80c05426 	beq	r16,r3,8003878 <__addsf3+0x32c>
 8003728:	00bf0034 	movhi	r2,64512
 800372c:	10bfffc4 	addi	r2,r2,-1
 8003730:	20c0004c 	andi	r3,r4,1
 8003734:	2088703a 	and	r4,r4,r2
 8003738:	2008d07a 	srli	r4,r4,1
 800373c:	20c8b03a 	or	r4,r4,r3
 8003740:	003f9906 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003744:	0007883a 	mov	r3,zero
 8003748:	0005883a 	mov	r2,zero
 800374c:	01002034 	movhi	r4,128
 8003750:	213fffc4 	addi	r4,r4,-1
 8003754:	1908703a 	and	r4,r3,r4
 8003758:	003fa106 	br	80035e0 <__alt_data_end+0xfc0035e0>
 800375c:	10bfffc4 	addi	r2,r2,-1
 8003760:	103fb926 	beq	r2,zero,8003648 <__alt_data_end+0xfc003648>
 8003764:	00c03fc4 	movi	r3,255
 8003768:	80ffaf1e 	bne	r16,r3,8003628 <__alt_data_end+0xfc003628>
 800376c:	003f8e06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003770:	283f8d26 	beq	r5,zero,80035a8 <__alt_data_end+0xfc0035a8>
 8003774:	18ffffc4 	addi	r3,r3,-1
 8003778:	183fe526 	beq	r3,zero,8003710 <__alt_data_end+0xfc003710>
 800377c:	01803fc4 	movi	r6,255
 8003780:	81bfdb1e 	bne	r16,r6,80036f0 <__alt_data_end+0xfc0036f0>
 8003784:	003f8806 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003788:	1000201e 	bne	r2,zero,800380c <__addsf3+0x2c0>
 800378c:	80800044 	addi	r2,r16,1
 8003790:	10803fcc 	andi	r2,r2,255
 8003794:	01800044 	movi	r6,1
 8003798:	3080450e 	bge	r6,r2,80038b0 <__addsf3+0x364>
 800379c:	2165c83a 	sub	r18,r4,r5
 80037a0:	90c1002c 	andhi	r3,r18,1024
 80037a4:	18002b26 	beq	r3,zero,8003854 <__addsf3+0x308>
 80037a8:	2925c83a 	sub	r18,r5,r4
 80037ac:	3823883a 	mov	r17,r7
 80037b0:	003fab06 	br	8003660 <__alt_data_end+0xfc003660>
 80037b4:	8805883a 	mov	r2,r17
 80037b8:	043fffc4 	movi	r16,-1
 80037bc:	0009883a 	mov	r4,zero
 80037c0:	003f8706 	br	80035e0 <__alt_data_end+0xfc0035e0>
 80037c4:	013f0034 	movhi	r4,64512
 80037c8:	213fffc4 	addi	r4,r4,-1
 80037cc:	80a1c83a 	sub	r16,r16,r2
 80037d0:	9108703a 	and	r4,r18,r4
 80037d4:	003f7406 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80037d8:	1800411e 	bne	r3,zero,80038e0 <__addsf3+0x394>
 80037dc:	80c00044 	addi	r3,r16,1
 80037e0:	19c03fcc 	andi	r7,r3,255
 80037e4:	01800044 	movi	r6,1
 80037e8:	31c0260e 	bge	r6,r7,8003884 <__addsf3+0x338>
 80037ec:	01803fc4 	movi	r6,255
 80037f0:	19802126 	beq	r3,r6,8003878 <__addsf3+0x32c>
 80037f4:	2149883a 	add	r4,r4,r5
 80037f8:	2008d07a 	srli	r4,r4,1
 80037fc:	1821883a 	mov	r16,r3
 8003800:	003f6906 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003804:	01400044 	movi	r5,1
 8003808:	003f8f06 	br	8003648 <__alt_data_end+0xfc003648>
 800380c:	8000151e 	bne	r16,zero,8003864 <__addsf3+0x318>
 8003810:	20002f26 	beq	r4,zero,80038d0 <__addsf3+0x384>
 8003814:	0084303a 	nor	r2,zero,r2
 8003818:	10000a26 	beq	r2,zero,8003844 <__addsf3+0x2f8>
 800381c:	00c03fc4 	movi	r3,255
 8003820:	30c02b26 	beq	r6,r3,80038d0 <__addsf3+0x384>
 8003824:	00c006c4 	movi	r3,27
 8003828:	18806d16 	blt	r3,r2,80039e0 <__addsf3+0x494>
 800382c:	00c00804 	movi	r3,32
 8003830:	1887c83a 	sub	r3,r3,r2
 8003834:	20c6983a 	sll	r3,r4,r3
 8003838:	2084d83a 	srl	r2,r4,r2
 800383c:	1808c03a 	cmpne	r4,r3,zero
 8003840:	1108b03a 	or	r4,r2,r4
 8003844:	2909c83a 	sub	r4,r5,r4
 8003848:	3021883a 	mov	r16,r6
 800384c:	3823883a 	mov	r17,r7
 8003850:	003f7e06 	br	800364c <__alt_data_end+0xfc00364c>
 8003854:	903f821e 	bne	r18,zero,8003660 <__alt_data_end+0xfc003660>
 8003858:	0005883a 	mov	r2,zero
 800385c:	0021883a 	mov	r16,zero
 8003860:	003fba06 	br	800374c <__alt_data_end+0xfc00374c>
 8003864:	00c03fc4 	movi	r3,255
 8003868:	30c01926 	beq	r6,r3,80038d0 <__addsf3+0x384>
 800386c:	0085c83a 	sub	r2,zero,r2
 8003870:	21010034 	orhi	r4,r4,1024
 8003874:	003feb06 	br	8003824 <__alt_data_end+0xfc003824>
 8003878:	043fffc4 	movi	r16,-1
 800387c:	0009883a 	mov	r4,zero
 8003880:	003f5706 	br	80035e0 <__alt_data_end+0xfc0035e0>
 8003884:	80004a1e 	bne	r16,zero,80039b0 <__addsf3+0x464>
 8003888:	20005926 	beq	r4,zero,80039f0 <__addsf3+0x4a4>
 800388c:	283f4626 	beq	r5,zero,80035a8 <__alt_data_end+0xfc0035a8>
 8003890:	2149883a 	add	r4,r4,r5
 8003894:	2081002c 	andhi	r2,r4,1024
 8003898:	103f8226 	beq	r2,zero,80036a4 <__alt_data_end+0xfc0036a4>
 800389c:	00bf0034 	movhi	r2,64512
 80038a0:	10bfffc4 	addi	r2,r2,-1
 80038a4:	3021883a 	mov	r16,r6
 80038a8:	2088703a 	and	r4,r4,r2
 80038ac:	003f3e06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80038b0:	8000121e 	bne	r16,zero,80038fc <__addsf3+0x3b0>
 80038b4:	2000261e 	bne	r4,zero,8003950 <__addsf3+0x404>
 80038b8:	283fa226 	beq	r5,zero,8003744 <__alt_data_end+0xfc003744>
 80038bc:	2809883a 	mov	r4,r5
 80038c0:	3823883a 	mov	r17,r7
 80038c4:	003f3806 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80038c8:	01400044 	movi	r5,1
 80038cc:	003f9006 	br	8003710 <__alt_data_end+0xfc003710>
 80038d0:	2809883a 	mov	r4,r5
 80038d4:	3021883a 	mov	r16,r6
 80038d8:	3823883a 	mov	r17,r7
 80038dc:	003f3206 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80038e0:	80000c1e 	bne	r16,zero,8003914 <__addsf3+0x3c8>
 80038e4:	20002f26 	beq	r4,zero,80039a4 <__addsf3+0x458>
 80038e8:	00c6303a 	nor	r3,zero,r3
 80038ec:	18002b1e 	bne	r3,zero,800399c <__addsf3+0x450>
 80038f0:	2149883a 	add	r4,r4,r5
 80038f4:	3021883a 	mov	r16,r6
 80038f8:	003f8606 	br	8003714 <__alt_data_end+0xfc003714>
 80038fc:	20001b1e 	bne	r4,zero,800396c <__addsf3+0x420>
 8003900:	28003926 	beq	r5,zero,80039e8 <__addsf3+0x49c>
 8003904:	2809883a 	mov	r4,r5
 8003908:	3823883a 	mov	r17,r7
 800390c:	04003fc4 	movi	r16,255
 8003910:	003f2506 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003914:	01c03fc4 	movi	r7,255
 8003918:	31c02226 	beq	r6,r7,80039a4 <__addsf3+0x458>
 800391c:	00c7c83a 	sub	r3,zero,r3
 8003920:	21010034 	orhi	r4,r4,1024
 8003924:	01c006c4 	movi	r7,27
 8003928:	38c03616 	blt	r7,r3,8003a04 <__addsf3+0x4b8>
 800392c:	01c00804 	movi	r7,32
 8003930:	38cfc83a 	sub	r7,r7,r3
 8003934:	21ce983a 	sll	r7,r4,r7
 8003938:	20c6d83a 	srl	r3,r4,r3
 800393c:	3808c03a 	cmpne	r4,r7,zero
 8003940:	1906b03a 	or	r3,r3,r4
 8003944:	1949883a 	add	r4,r3,r5
 8003948:	3021883a 	mov	r16,r6
 800394c:	003f7106 	br	8003714 <__alt_data_end+0xfc003714>
 8003950:	283f1526 	beq	r5,zero,80035a8 <__alt_data_end+0xfc0035a8>
 8003954:	2145c83a 	sub	r2,r4,r5
 8003958:	10c1002c 	andhi	r3,r2,1024
 800395c:	183f4f26 	beq	r3,zero,800369c <__alt_data_end+0xfc00369c>
 8003960:	2909c83a 	sub	r4,r5,r4
 8003964:	3823883a 	mov	r17,r7
 8003968:	003f0f06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 800396c:	28001a26 	beq	r5,zero,80039d8 <__addsf3+0x48c>
 8003970:	2008d0fa 	srli	r4,r4,3
 8003974:	2080102c 	andhi	r2,r4,64
 8003978:	10000526 	beq	r2,zero,8003990 <__addsf3+0x444>
 800397c:	280ad0fa 	srli	r5,r5,3
 8003980:	2880102c 	andhi	r2,r5,64
 8003984:	1000021e 	bne	r2,zero,8003990 <__addsf3+0x444>
 8003988:	2809883a 	mov	r4,r5
 800398c:	3823883a 	mov	r17,r7
 8003990:	200890fa 	slli	r4,r4,3
 8003994:	04003fc4 	movi	r16,255
 8003998:	003f0306 	br	80035a8 <__alt_data_end+0xfc0035a8>
 800399c:	01c03fc4 	movi	r7,255
 80039a0:	31ffe01e 	bne	r6,r7,8003924 <__alt_data_end+0xfc003924>
 80039a4:	2809883a 	mov	r4,r5
 80039a8:	3021883a 	mov	r16,r6
 80039ac:	003efe06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80039b0:	20001126 	beq	r4,zero,80039f8 <__addsf3+0x4ac>
 80039b4:	28000826 	beq	r5,zero,80039d8 <__addsf3+0x48c>
 80039b8:	2008d0fa 	srli	r4,r4,3
 80039bc:	2080102c 	andhi	r2,r4,64
 80039c0:	103ff326 	beq	r2,zero,8003990 <__alt_data_end+0xfc003990>
 80039c4:	280ad0fa 	srli	r5,r5,3
 80039c8:	2880102c 	andhi	r2,r5,64
 80039cc:	103ff01e 	bne	r2,zero,8003990 <__alt_data_end+0xfc003990>
 80039d0:	2809883a 	mov	r4,r5
 80039d4:	003fee06 	br	8003990 <__alt_data_end+0xfc003990>
 80039d8:	04003fc4 	movi	r16,255
 80039dc:	003ef206 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80039e0:	01000044 	movi	r4,1
 80039e4:	003f9706 	br	8003844 <__alt_data_end+0xfc003844>
 80039e8:	0005883a 	mov	r2,zero
 80039ec:	003f3406 	br	80036c0 <__alt_data_end+0xfc0036c0>
 80039f0:	2809883a 	mov	r4,r5
 80039f4:	003eec06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80039f8:	2809883a 	mov	r4,r5
 80039fc:	04003fc4 	movi	r16,255
 8003a00:	003ee906 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003a04:	00c00044 	movi	r3,1
 8003a08:	003fce06 	br	8003944 <__alt_data_end+0xfc003944>
 8003a0c:	0005883a 	mov	r2,zero
 8003a10:	003f4e06 	br	800374c <__alt_data_end+0xfc00374c>

08003a14 <__divsf3>:
 8003a14:	defff504 	addi	sp,sp,-44
 8003a18:	200cd5fa 	srli	r6,r4,23
 8003a1c:	dcc00415 	stw	r19,16(sp)
 8003a20:	2026d7fa 	srli	r19,r4,31
 8003a24:	00c02034 	movhi	r3,128
 8003a28:	dd800715 	stw	r22,28(sp)
 8003a2c:	dd000515 	stw	r20,20(sp)
 8003a30:	dc800315 	stw	r18,12(sp)
 8003a34:	18ffffc4 	addi	r3,r3,-1
 8003a38:	dfc00a15 	stw	ra,40(sp)
 8003a3c:	df000915 	stw	fp,36(sp)
 8003a40:	ddc00815 	stw	r23,32(sp)
 8003a44:	dd400615 	stw	r21,24(sp)
 8003a48:	dc400215 	stw	r17,8(sp)
 8003a4c:	dc000115 	stw	r16,4(sp)
 8003a50:	35003fcc 	andi	r20,r6,255
 8003a54:	1924703a 	and	r18,r3,r4
 8003a58:	9d803fcc 	andi	r22,r19,255
 8003a5c:	a0005226 	beq	r20,zero,8003ba8 <__divsf3+0x194>
 8003a60:	00803fc4 	movi	r2,255
 8003a64:	a0802e26 	beq	r20,r2,8003b20 <__divsf3+0x10c>
 8003a68:	91002034 	orhi	r4,r18,128
 8003a6c:	202490fa 	slli	r18,r4,3
 8003a70:	a53fe044 	addi	r20,r20,-127
 8003a74:	0021883a 	mov	r16,zero
 8003a78:	002f883a 	mov	r23,zero
 8003a7c:	280cd5fa 	srli	r6,r5,23
 8003a80:	282ad7fa 	srli	r21,r5,31
 8003a84:	00c02034 	movhi	r3,128
 8003a88:	18ffffc4 	addi	r3,r3,-1
 8003a8c:	31803fcc 	andi	r6,r6,255
 8003a90:	1962703a 	and	r17,r3,r5
 8003a94:	af003fcc 	andi	fp,r21,255
 8003a98:	30004a26 	beq	r6,zero,8003bc4 <__divsf3+0x1b0>
 8003a9c:	00803fc4 	movi	r2,255
 8003aa0:	30804526 	beq	r6,r2,8003bb8 <__divsf3+0x1a4>
 8003aa4:	89402034 	orhi	r5,r17,128
 8003aa8:	282290fa 	slli	r17,r5,3
 8003aac:	31bfe044 	addi	r6,r6,-127
 8003ab0:	000b883a 	mov	r5,zero
 8003ab4:	2c20b03a 	or	r16,r5,r16
 8003ab8:	802090ba 	slli	r16,r16,2
 8003abc:	00820034 	movhi	r2,2048
 8003ac0:	108eb804 	addi	r2,r2,15072
 8003ac4:	80a1883a 	add	r16,r16,r2
 8003ac8:	81000017 	ldw	r4,0(r16)
 8003acc:	9d46f03a 	xor	r3,r19,r21
 8003ad0:	180f883a 	mov	r7,r3
 8003ad4:	18803fcc 	andi	r2,r3,255
 8003ad8:	a18dc83a 	sub	r6,r20,r6
 8003adc:	2000683a 	jmp	r4
 8003ae0:	08003cc4 	addi	zero,at,243
 8003ae4:	08003b48 	cmpgei	zero,at,237
 8003ae8:	08003cb8 	rdprs	zero,at,242
 8003aec:	08003b34 	orhi	zero,at,236
 8003af0:	08003cb8 	rdprs	zero,at,242
 8003af4:	08003c90 	cmplti	zero,at,242
 8003af8:	08003cb8 	rdprs	zero,at,242
 8003afc:	08003b34 	orhi	zero,at,236
 8003b00:	08003b48 	cmpgei	zero,at,237
 8003b04:	08003b48 	cmpgei	zero,at,237
 8003b08:	08003c90 	cmplti	zero,at,242
 8003b0c:	08003b34 	orhi	zero,at,236
 8003b10:	08003da4 	muli	zero,at,246
 8003b14:	08003da4 	muli	zero,at,246
 8003b18:	08003da4 	muli	zero,at,246
 8003b1c:	08003d58 	cmpnei	zero,at,245
 8003b20:	9000581e 	bne	r18,zero,8003c84 <__divsf3+0x270>
 8003b24:	04000204 	movi	r16,8
 8003b28:	05c00084 	movi	r23,2
 8003b2c:	003fd306 	br	8003a7c <__alt_data_end+0xfc003a7c>
 8003b30:	0023883a 	mov	r17,zero
 8003b34:	e02d883a 	mov	r22,fp
 8003b38:	282f883a 	mov	r23,r5
 8003b3c:	00800084 	movi	r2,2
 8003b40:	b8808f1e 	bne	r23,r2,8003d80 <__divsf3+0x36c>
 8003b44:	b005883a 	mov	r2,r22
 8003b48:	11c0004c 	andi	r7,r2,1
 8003b4c:	013fffc4 	movi	r4,-1
 8003b50:	000d883a 	mov	r6,zero
 8003b54:	21003fcc 	andi	r4,r4,255
 8003b58:	200895fa 	slli	r4,r4,23
 8003b5c:	38803fcc 	andi	r2,r7,255
 8003b60:	00c02034 	movhi	r3,128
 8003b64:	100497fa 	slli	r2,r2,31
 8003b68:	18ffffc4 	addi	r3,r3,-1
 8003b6c:	30c6703a 	and	r3,r6,r3
 8003b70:	1906b03a 	or	r3,r3,r4
 8003b74:	1884b03a 	or	r2,r3,r2
 8003b78:	dfc00a17 	ldw	ra,40(sp)
 8003b7c:	df000917 	ldw	fp,36(sp)
 8003b80:	ddc00817 	ldw	r23,32(sp)
 8003b84:	dd800717 	ldw	r22,28(sp)
 8003b88:	dd400617 	ldw	r21,24(sp)
 8003b8c:	dd000517 	ldw	r20,20(sp)
 8003b90:	dcc00417 	ldw	r19,16(sp)
 8003b94:	dc800317 	ldw	r18,12(sp)
 8003b98:	dc400217 	ldw	r17,8(sp)
 8003b9c:	dc000117 	ldw	r16,4(sp)
 8003ba0:	dec00b04 	addi	sp,sp,44
 8003ba4:	f800283a 	ret
 8003ba8:	90002b1e 	bne	r18,zero,8003c58 <__divsf3+0x244>
 8003bac:	04000104 	movi	r16,4
 8003bb0:	05c00044 	movi	r23,1
 8003bb4:	003fb106 	br	8003a7c <__alt_data_end+0xfc003a7c>
 8003bb8:	8800251e 	bne	r17,zero,8003c50 <__divsf3+0x23c>
 8003bbc:	01400084 	movi	r5,2
 8003bc0:	00000206 	br	8003bcc <__divsf3+0x1b8>
 8003bc4:	88001a1e 	bne	r17,zero,8003c30 <__divsf3+0x21c>
 8003bc8:	01400044 	movi	r5,1
 8003bcc:	8160b03a 	or	r16,r16,r5
 8003bd0:	802090ba 	slli	r16,r16,2
 8003bd4:	00c20034 	movhi	r3,2048
 8003bd8:	18cefc04 	addi	r3,r3,15344
 8003bdc:	80e1883a 	add	r16,r16,r3
 8003be0:	80c00017 	ldw	r3,0(r16)
 8003be4:	9d44f03a 	xor	r2,r19,r21
 8003be8:	a18dc83a 	sub	r6,r20,r6
 8003bec:	1800683a 	jmp	r3
 8003bf0:	08003b48 	cmpgei	zero,at,237
 8003bf4:	08003b48 	cmpgei	zero,at,237
 8003bf8:	08003d94 	ori	zero,at,246
 8003bfc:	08003b30 	cmpltui	zero,at,236
 8003c00:	08003d94 	ori	zero,at,246
 8003c04:	08003c90 	cmplti	zero,at,242
 8003c08:	08003d94 	ori	zero,at,246
 8003c0c:	08003b30 	cmpltui	zero,at,236
 8003c10:	08003b48 	cmpgei	zero,at,237
 8003c14:	08003b48 	cmpgei	zero,at,237
 8003c18:	08003c90 	cmplti	zero,at,242
 8003c1c:	08003b30 	cmpltui	zero,at,236
 8003c20:	08003da4 	muli	zero,at,246
 8003c24:	08003da4 	muli	zero,at,246
 8003c28:	08003da4 	muli	zero,at,246
 8003c2c:	08003dbc 	xorhi	zero,at,246
 8003c30:	8809883a 	mov	r4,r17
 8003c34:	80072600 	call	8007260 <__clzsi2>
 8003c38:	10fffec4 	addi	r3,r2,-5
 8003c3c:	10801d84 	addi	r2,r2,118
 8003c40:	88e2983a 	sll	r17,r17,r3
 8003c44:	008dc83a 	sub	r6,zero,r2
 8003c48:	000b883a 	mov	r5,zero
 8003c4c:	003f9906 	br	8003ab4 <__alt_data_end+0xfc003ab4>
 8003c50:	014000c4 	movi	r5,3
 8003c54:	003f9706 	br	8003ab4 <__alt_data_end+0xfc003ab4>
 8003c58:	9009883a 	mov	r4,r18
 8003c5c:	d9400015 	stw	r5,0(sp)
 8003c60:	80072600 	call	8007260 <__clzsi2>
 8003c64:	10fffec4 	addi	r3,r2,-5
 8003c68:	11801d84 	addi	r6,r2,118
 8003c6c:	90e4983a 	sll	r18,r18,r3
 8003c70:	01a9c83a 	sub	r20,zero,r6
 8003c74:	0021883a 	mov	r16,zero
 8003c78:	002f883a 	mov	r23,zero
 8003c7c:	d9400017 	ldw	r5,0(sp)
 8003c80:	003f7e06 	br	8003a7c <__alt_data_end+0xfc003a7c>
 8003c84:	04000304 	movi	r16,12
 8003c88:	05c000c4 	movi	r23,3
 8003c8c:	003f7b06 	br	8003a7c <__alt_data_end+0xfc003a7c>
 8003c90:	01802034 	movhi	r6,128
 8003c94:	000f883a 	mov	r7,zero
 8003c98:	31bfffc4 	addi	r6,r6,-1
 8003c9c:	013fffc4 	movi	r4,-1
 8003ca0:	003fac06 	br	8003b54 <__alt_data_end+0xfc003b54>
 8003ca4:	01400044 	movi	r5,1
 8003ca8:	2909c83a 	sub	r4,r5,r4
 8003cac:	00c006c4 	movi	r3,27
 8003cb0:	19004b0e 	bge	r3,r4,8003de0 <__divsf3+0x3cc>
 8003cb4:	114e703a 	and	r7,r2,r5
 8003cb8:	0009883a 	mov	r4,zero
 8003cbc:	000d883a 	mov	r6,zero
 8003cc0:	003fa406 	br	8003b54 <__alt_data_end+0xfc003b54>
 8003cc4:	9006917a 	slli	r3,r18,5
 8003cc8:	8822917a 	slli	r17,r17,5
 8003ccc:	1c40372e 	bgeu	r3,r17,8003dac <__divsf3+0x398>
 8003cd0:	31bfffc4 	addi	r6,r6,-1
 8003cd4:	010006c4 	movi	r4,27
 8003cd8:	000b883a 	mov	r5,zero
 8003cdc:	180f883a 	mov	r7,r3
 8003ce0:	294b883a 	add	r5,r5,r5
 8003ce4:	18c7883a 	add	r3,r3,r3
 8003ce8:	38000116 	blt	r7,zero,8003cf0 <__divsf3+0x2dc>
 8003cec:	1c400236 	bltu	r3,r17,8003cf8 <__divsf3+0x2e4>
 8003cf0:	1c47c83a 	sub	r3,r3,r17
 8003cf4:	29400054 	ori	r5,r5,1
 8003cf8:	213fffc4 	addi	r4,r4,-1
 8003cfc:	203ff71e 	bne	r4,zero,8003cdc <__alt_data_end+0xfc003cdc>
 8003d00:	1806c03a 	cmpne	r3,r3,zero
 8003d04:	1962b03a 	or	r17,r3,r5
 8003d08:	31001fc4 	addi	r4,r6,127
 8003d0c:	013fe50e 	bge	zero,r4,8003ca4 <__alt_data_end+0xfc003ca4>
 8003d10:	88c001cc 	andi	r3,r17,7
 8003d14:	18000426 	beq	r3,zero,8003d28 <__divsf3+0x314>
 8003d18:	88c003cc 	andi	r3,r17,15
 8003d1c:	01400104 	movi	r5,4
 8003d20:	19400126 	beq	r3,r5,8003d28 <__divsf3+0x314>
 8003d24:	8963883a 	add	r17,r17,r5
 8003d28:	88c2002c 	andhi	r3,r17,2048
 8003d2c:	18000426 	beq	r3,zero,8003d40 <__divsf3+0x32c>
 8003d30:	00fe0034 	movhi	r3,63488
 8003d34:	18ffffc4 	addi	r3,r3,-1
 8003d38:	31002004 	addi	r4,r6,128
 8003d3c:	88e2703a 	and	r17,r17,r3
 8003d40:	00c03f84 	movi	r3,254
 8003d44:	193f8016 	blt	r3,r4,8003b48 <__alt_data_end+0xfc003b48>
 8003d48:	880c91ba 	slli	r6,r17,6
 8003d4c:	11c0004c 	andi	r7,r2,1
 8003d50:	300cd27a 	srli	r6,r6,9
 8003d54:	003f7f06 	br	8003b54 <__alt_data_end+0xfc003b54>
 8003d58:	9080102c 	andhi	r2,r18,64
 8003d5c:	10000226 	beq	r2,zero,8003d68 <__divsf3+0x354>
 8003d60:	8880102c 	andhi	r2,r17,64
 8003d64:	10001826 	beq	r2,zero,8003dc8 <__divsf3+0x3b4>
 8003d68:	00802034 	movhi	r2,128
 8003d6c:	91801034 	orhi	r6,r18,64
 8003d70:	10bfffc4 	addi	r2,r2,-1
 8003d74:	980f883a 	mov	r7,r19
 8003d78:	308c703a 	and	r6,r6,r2
 8003d7c:	003fc706 	br	8003c9c <__alt_data_end+0xfc003c9c>
 8003d80:	008000c4 	movi	r2,3
 8003d84:	b8802d26 	beq	r23,r2,8003e3c <__divsf3+0x428>
 8003d88:	00c00044 	movi	r3,1
 8003d8c:	b005883a 	mov	r2,r22
 8003d90:	b8ffdd1e 	bne	r23,r3,8003d08 <__alt_data_end+0xfc003d08>
 8003d94:	11c0004c 	andi	r7,r2,1
 8003d98:	0009883a 	mov	r4,zero
 8003d9c:	000d883a 	mov	r6,zero
 8003da0:	003f6c06 	br	8003b54 <__alt_data_end+0xfc003b54>
 8003da4:	9023883a 	mov	r17,r18
 8003da8:	003f6406 	br	8003b3c <__alt_data_end+0xfc003b3c>
 8003dac:	1c47c83a 	sub	r3,r3,r17
 8003db0:	01000684 	movi	r4,26
 8003db4:	01400044 	movi	r5,1
 8003db8:	003fc806 	br	8003cdc <__alt_data_end+0xfc003cdc>
 8003dbc:	9080102c 	andhi	r2,r18,64
 8003dc0:	103fe926 	beq	r2,zero,8003d68 <__alt_data_end+0xfc003d68>
 8003dc4:	0023883a 	mov	r17,zero
 8003dc8:	00802034 	movhi	r2,128
 8003dcc:	89801034 	orhi	r6,r17,64
 8003dd0:	10bfffc4 	addi	r2,r2,-1
 8003dd4:	a80f883a 	mov	r7,r21
 8003dd8:	308c703a 	and	r6,r6,r2
 8003ddc:	003faf06 	br	8003c9c <__alt_data_end+0xfc003c9c>
 8003de0:	01c00804 	movi	r7,32
 8003de4:	390fc83a 	sub	r7,r7,r4
 8003de8:	89ce983a 	sll	r7,r17,r7
 8003dec:	890ad83a 	srl	r5,r17,r4
 8003df0:	380ec03a 	cmpne	r7,r7,zero
 8003df4:	29cab03a 	or	r5,r5,r7
 8003df8:	28c001cc 	andi	r3,r5,7
 8003dfc:	18000426 	beq	r3,zero,8003e10 <__divsf3+0x3fc>
 8003e00:	28c003cc 	andi	r3,r5,15
 8003e04:	01000104 	movi	r4,4
 8003e08:	19000126 	beq	r3,r4,8003e10 <__divsf3+0x3fc>
 8003e0c:	290b883a 	add	r5,r5,r4
 8003e10:	28c1002c 	andhi	r3,r5,1024
 8003e14:	18000426 	beq	r3,zero,8003e28 <__divsf3+0x414>
 8003e18:	11c0004c 	andi	r7,r2,1
 8003e1c:	01000044 	movi	r4,1
 8003e20:	000d883a 	mov	r6,zero
 8003e24:	003f4b06 	br	8003b54 <__alt_data_end+0xfc003b54>
 8003e28:	280a91ba 	slli	r5,r5,6
 8003e2c:	11c0004c 	andi	r7,r2,1
 8003e30:	0009883a 	mov	r4,zero
 8003e34:	280cd27a 	srli	r6,r5,9
 8003e38:	003f4606 	br	8003b54 <__alt_data_end+0xfc003b54>
 8003e3c:	00802034 	movhi	r2,128
 8003e40:	89801034 	orhi	r6,r17,64
 8003e44:	10bfffc4 	addi	r2,r2,-1
 8003e48:	b00f883a 	mov	r7,r22
 8003e4c:	308c703a 	and	r6,r6,r2
 8003e50:	003f9206 	br	8003c9c <__alt_data_end+0xfc003c9c>

08003e54 <__gesf2>:
 8003e54:	2004d5fa 	srli	r2,r4,23
 8003e58:	2806d5fa 	srli	r3,r5,23
 8003e5c:	01802034 	movhi	r6,128
 8003e60:	31bfffc4 	addi	r6,r6,-1
 8003e64:	10803fcc 	andi	r2,r2,255
 8003e68:	01c03fc4 	movi	r7,255
 8003e6c:	3110703a 	and	r8,r6,r4
 8003e70:	18c03fcc 	andi	r3,r3,255
 8003e74:	314c703a 	and	r6,r6,r5
 8003e78:	2008d7fa 	srli	r4,r4,31
 8003e7c:	280ad7fa 	srli	r5,r5,31
 8003e80:	11c01926 	beq	r2,r7,8003ee8 <__gesf2+0x94>
 8003e84:	01c03fc4 	movi	r7,255
 8003e88:	19c00f26 	beq	r3,r7,8003ec8 <__gesf2+0x74>
 8003e8c:	1000061e 	bne	r2,zero,8003ea8 <__gesf2+0x54>
 8003e90:	400f003a 	cmpeq	r7,r8,zero
 8003e94:	1800071e 	bne	r3,zero,8003eb4 <__gesf2+0x60>
 8003e98:	3000061e 	bne	r6,zero,8003eb4 <__gesf2+0x60>
 8003e9c:	0005883a 	mov	r2,zero
 8003ea0:	40000e1e 	bne	r8,zero,8003edc <__gesf2+0x88>
 8003ea4:	f800283a 	ret
 8003ea8:	18000a1e 	bne	r3,zero,8003ed4 <__gesf2+0x80>
 8003eac:	30000b26 	beq	r6,zero,8003edc <__gesf2+0x88>
 8003eb0:	000f883a 	mov	r7,zero
 8003eb4:	29403fcc 	andi	r5,r5,255
 8003eb8:	38000726 	beq	r7,zero,8003ed8 <__gesf2+0x84>
 8003ebc:	28000826 	beq	r5,zero,8003ee0 <__gesf2+0x8c>
 8003ec0:	00800044 	movi	r2,1
 8003ec4:	f800283a 	ret
 8003ec8:	303ff026 	beq	r6,zero,8003e8c <__alt_data_end+0xfc003e8c>
 8003ecc:	00bfff84 	movi	r2,-2
 8003ed0:	f800283a 	ret
 8003ed4:	29403fcc 	andi	r5,r5,255
 8003ed8:	21400526 	beq	r4,r5,8003ef0 <__gesf2+0x9c>
 8003edc:	203ff826 	beq	r4,zero,8003ec0 <__alt_data_end+0xfc003ec0>
 8003ee0:	00bfffc4 	movi	r2,-1
 8003ee4:	f800283a 	ret
 8003ee8:	403fe626 	beq	r8,zero,8003e84 <__alt_data_end+0xfc003e84>
 8003eec:	003ff706 	br	8003ecc <__alt_data_end+0xfc003ecc>
 8003ef0:	18bffa16 	blt	r3,r2,8003edc <__alt_data_end+0xfc003edc>
 8003ef4:	10c00216 	blt	r2,r3,8003f00 <__gesf2+0xac>
 8003ef8:	323ff836 	bltu	r6,r8,8003edc <__alt_data_end+0xfc003edc>
 8003efc:	4180022e 	bgeu	r8,r6,8003f08 <__gesf2+0xb4>
 8003f00:	203fef1e 	bne	r4,zero,8003ec0 <__alt_data_end+0xfc003ec0>
 8003f04:	003ff606 	br	8003ee0 <__alt_data_end+0xfc003ee0>
 8003f08:	0005883a 	mov	r2,zero
 8003f0c:	f800283a 	ret

08003f10 <__lesf2>:
 8003f10:	2004d5fa 	srli	r2,r4,23
 8003f14:	280cd5fa 	srli	r6,r5,23
 8003f18:	00c02034 	movhi	r3,128
 8003f1c:	18ffffc4 	addi	r3,r3,-1
 8003f20:	10803fcc 	andi	r2,r2,255
 8003f24:	01c03fc4 	movi	r7,255
 8003f28:	1910703a 	and	r8,r3,r4
 8003f2c:	31803fcc 	andi	r6,r6,255
 8003f30:	1946703a 	and	r3,r3,r5
 8003f34:	2008d7fa 	srli	r4,r4,31
 8003f38:	280ad7fa 	srli	r5,r5,31
 8003f3c:	11c01b26 	beq	r2,r7,8003fac <__lesf2+0x9c>
 8003f40:	01c03fc4 	movi	r7,255
 8003f44:	31c01126 	beq	r6,r7,8003f8c <__lesf2+0x7c>
 8003f48:	1000071e 	bne	r2,zero,8003f68 <__lesf2+0x58>
 8003f4c:	400f003a 	cmpeq	r7,r8,zero
 8003f50:	21003fcc 	andi	r4,r4,255
 8003f54:	3000081e 	bne	r6,zero,8003f78 <__lesf2+0x68>
 8003f58:	1800071e 	bne	r3,zero,8003f78 <__lesf2+0x68>
 8003f5c:	0005883a 	mov	r2,zero
 8003f60:	40000f1e 	bne	r8,zero,8003fa0 <__lesf2+0x90>
 8003f64:	f800283a 	ret
 8003f68:	21003fcc 	andi	r4,r4,255
 8003f6c:	30000a1e 	bne	r6,zero,8003f98 <__lesf2+0x88>
 8003f70:	18000b26 	beq	r3,zero,8003fa0 <__lesf2+0x90>
 8003f74:	000f883a 	mov	r7,zero
 8003f78:	29403fcc 	andi	r5,r5,255
 8003f7c:	38000726 	beq	r7,zero,8003f9c <__lesf2+0x8c>
 8003f80:	28000826 	beq	r5,zero,8003fa4 <__lesf2+0x94>
 8003f84:	00800044 	movi	r2,1
 8003f88:	f800283a 	ret
 8003f8c:	183fee26 	beq	r3,zero,8003f48 <__alt_data_end+0xfc003f48>
 8003f90:	00800084 	movi	r2,2
 8003f94:	f800283a 	ret
 8003f98:	29403fcc 	andi	r5,r5,255
 8003f9c:	21400626 	beq	r4,r5,8003fb8 <__lesf2+0xa8>
 8003fa0:	203ff826 	beq	r4,zero,8003f84 <__alt_data_end+0xfc003f84>
 8003fa4:	00bfffc4 	movi	r2,-1
 8003fa8:	f800283a 	ret
 8003fac:	403fe426 	beq	r8,zero,8003f40 <__alt_data_end+0xfc003f40>
 8003fb0:	00800084 	movi	r2,2
 8003fb4:	f800283a 	ret
 8003fb8:	30bff916 	blt	r6,r2,8003fa0 <__alt_data_end+0xfc003fa0>
 8003fbc:	11800216 	blt	r2,r6,8003fc8 <__lesf2+0xb8>
 8003fc0:	1a3ff736 	bltu	r3,r8,8003fa0 <__alt_data_end+0xfc003fa0>
 8003fc4:	40c0022e 	bgeu	r8,r3,8003fd0 <__lesf2+0xc0>
 8003fc8:	203fee1e 	bne	r4,zero,8003f84 <__alt_data_end+0xfc003f84>
 8003fcc:	003ff506 	br	8003fa4 <__alt_data_end+0xfc003fa4>
 8003fd0:	0005883a 	mov	r2,zero
 8003fd4:	f800283a 	ret

08003fd8 <__mulsf3>:
 8003fd8:	defff504 	addi	sp,sp,-44
 8003fdc:	dc000115 	stw	r16,4(sp)
 8003fe0:	2020d5fa 	srli	r16,r4,23
 8003fe4:	dd400615 	stw	r21,24(sp)
 8003fe8:	202ad7fa 	srli	r21,r4,31
 8003fec:	dc800315 	stw	r18,12(sp)
 8003ff0:	04802034 	movhi	r18,128
 8003ff4:	df000915 	stw	fp,36(sp)
 8003ff8:	dd000515 	stw	r20,20(sp)
 8003ffc:	94bfffc4 	addi	r18,r18,-1
 8004000:	dfc00a15 	stw	ra,40(sp)
 8004004:	ddc00815 	stw	r23,32(sp)
 8004008:	dd800715 	stw	r22,28(sp)
 800400c:	dcc00415 	stw	r19,16(sp)
 8004010:	dc400215 	stw	r17,8(sp)
 8004014:	84003fcc 	andi	r16,r16,255
 8004018:	9124703a 	and	r18,r18,r4
 800401c:	a829883a 	mov	r20,r21
 8004020:	af003fcc 	andi	fp,r21,255
 8004024:	80005426 	beq	r16,zero,8004178 <__mulsf3+0x1a0>
 8004028:	00803fc4 	movi	r2,255
 800402c:	80802f26 	beq	r16,r2,80040ec <__mulsf3+0x114>
 8004030:	91002034 	orhi	r4,r18,128
 8004034:	202490fa 	slli	r18,r4,3
 8004038:	843fe044 	addi	r16,r16,-127
 800403c:	0023883a 	mov	r17,zero
 8004040:	002f883a 	mov	r23,zero
 8004044:	2804d5fa 	srli	r2,r5,23
 8004048:	282cd7fa 	srli	r22,r5,31
 800404c:	01002034 	movhi	r4,128
 8004050:	213fffc4 	addi	r4,r4,-1
 8004054:	10803fcc 	andi	r2,r2,255
 8004058:	2166703a 	and	r19,r4,r5
 800405c:	b1803fcc 	andi	r6,r22,255
 8004060:	10004c26 	beq	r2,zero,8004194 <__mulsf3+0x1bc>
 8004064:	00c03fc4 	movi	r3,255
 8004068:	10c04726 	beq	r2,r3,8004188 <__mulsf3+0x1b0>
 800406c:	99002034 	orhi	r4,r19,128
 8004070:	202690fa 	slli	r19,r4,3
 8004074:	10bfe044 	addi	r2,r2,-127
 8004078:	0007883a 	mov	r3,zero
 800407c:	80a1883a 	add	r16,r16,r2
 8004080:	010003c4 	movi	r4,15
 8004084:	1c44b03a 	or	r2,r3,r17
 8004088:	b56af03a 	xor	r21,r22,r21
 800408c:	81c00044 	addi	r7,r16,1
 8004090:	20806b36 	bltu	r4,r2,8004240 <__mulsf3+0x268>
 8004094:	100490ba 	slli	r2,r2,2
 8004098:	01020034 	movhi	r4,2048
 800409c:	21102b04 	addi	r4,r4,16556
 80040a0:	1105883a 	add	r2,r2,r4
 80040a4:	10800017 	ldw	r2,0(r2)
 80040a8:	1000683a 	jmp	r2
 80040ac:	08004240 	call	800424 <__ram_exceptions_end+0x7e01dc>
 80040b0:	08004100 	call	800410 <__ram_exceptions_end+0x7e01c8>
 80040b4:	08004100 	call	800410 <__ram_exceptions_end+0x7e01c8>
 80040b8:	080040fc 	xorhi	zero,at,259
 80040bc:	08004224 	muli	zero,at,264
 80040c0:	08004224 	muli	zero,at,264
 80040c4:	08004210 	cmplti	zero,at,264
 80040c8:	080040fc 	xorhi	zero,at,259
 80040cc:	08004224 	muli	zero,at,264
 80040d0:	08004210 	cmplti	zero,at,264
 80040d4:	08004224 	muli	zero,at,264
 80040d8:	080040fc 	xorhi	zero,at,259
 80040dc:	08004230 	cmpltui	zero,at,264
 80040e0:	08004230 	cmpltui	zero,at,264
 80040e4:	08004230 	cmpltui	zero,at,264
 80040e8:	0800430c 	andi	zero,at,268
 80040ec:	90003b1e 	bne	r18,zero,80041dc <__mulsf3+0x204>
 80040f0:	04400204 	movi	r17,8
 80040f4:	05c00084 	movi	r23,2
 80040f8:	003fd206 	br	8004044 <__alt_data_end+0xfc004044>
 80040fc:	302b883a 	mov	r21,r6
 8004100:	00800084 	movi	r2,2
 8004104:	18802626 	beq	r3,r2,80041a0 <__mulsf3+0x1c8>
 8004108:	008000c4 	movi	r2,3
 800410c:	1880ab26 	beq	r3,r2,80043bc <__mulsf3+0x3e4>
 8004110:	00800044 	movi	r2,1
 8004114:	1880a21e 	bne	r3,r2,80043a0 <__mulsf3+0x3c8>
 8004118:	a829883a 	mov	r20,r21
 800411c:	0007883a 	mov	r3,zero
 8004120:	0009883a 	mov	r4,zero
 8004124:	18803fcc 	andi	r2,r3,255
 8004128:	100695fa 	slli	r3,r2,23
 800412c:	a0803fcc 	andi	r2,r20,255
 8004130:	100a97fa 	slli	r5,r2,31
 8004134:	00802034 	movhi	r2,128
 8004138:	10bfffc4 	addi	r2,r2,-1
 800413c:	2084703a 	and	r2,r4,r2
 8004140:	10c4b03a 	or	r2,r2,r3
 8004144:	1144b03a 	or	r2,r2,r5
 8004148:	dfc00a17 	ldw	ra,40(sp)
 800414c:	df000917 	ldw	fp,36(sp)
 8004150:	ddc00817 	ldw	r23,32(sp)
 8004154:	dd800717 	ldw	r22,28(sp)
 8004158:	dd400617 	ldw	r21,24(sp)
 800415c:	dd000517 	ldw	r20,20(sp)
 8004160:	dcc00417 	ldw	r19,16(sp)
 8004164:	dc800317 	ldw	r18,12(sp)
 8004168:	dc400217 	ldw	r17,8(sp)
 800416c:	dc000117 	ldw	r16,4(sp)
 8004170:	dec00b04 	addi	sp,sp,44
 8004174:	f800283a 	ret
 8004178:	90000d1e 	bne	r18,zero,80041b0 <__mulsf3+0x1d8>
 800417c:	04400104 	movi	r17,4
 8004180:	05c00044 	movi	r23,1
 8004184:	003faf06 	br	8004044 <__alt_data_end+0xfc004044>
 8004188:	9806c03a 	cmpne	r3,r19,zero
 800418c:	18c00084 	addi	r3,r3,2
 8004190:	003fba06 	br	800407c <__alt_data_end+0xfc00407c>
 8004194:	9800141e 	bne	r19,zero,80041e8 <__mulsf3+0x210>
 8004198:	00c00044 	movi	r3,1
 800419c:	003fb706 	br	800407c <__alt_data_end+0xfc00407c>
 80041a0:	a829883a 	mov	r20,r21
 80041a4:	00ffffc4 	movi	r3,-1
 80041a8:	0009883a 	mov	r4,zero
 80041ac:	003fdd06 	br	8004124 <__alt_data_end+0xfc004124>
 80041b0:	9009883a 	mov	r4,r18
 80041b4:	d9400015 	stw	r5,0(sp)
 80041b8:	80072600 	call	8007260 <__clzsi2>
 80041bc:	10fffec4 	addi	r3,r2,-5
 80041c0:	10801d84 	addi	r2,r2,118
 80041c4:	90e4983a 	sll	r18,r18,r3
 80041c8:	00a1c83a 	sub	r16,zero,r2
 80041cc:	0023883a 	mov	r17,zero
 80041d0:	002f883a 	mov	r23,zero
 80041d4:	d9400017 	ldw	r5,0(sp)
 80041d8:	003f9a06 	br	8004044 <__alt_data_end+0xfc004044>
 80041dc:	04400304 	movi	r17,12
 80041e0:	05c000c4 	movi	r23,3
 80041e4:	003f9706 	br	8004044 <__alt_data_end+0xfc004044>
 80041e8:	9809883a 	mov	r4,r19
 80041ec:	d9800015 	stw	r6,0(sp)
 80041f0:	80072600 	call	8007260 <__clzsi2>
 80041f4:	10fffec4 	addi	r3,r2,-5
 80041f8:	10801d84 	addi	r2,r2,118
 80041fc:	98e6983a 	sll	r19,r19,r3
 8004200:	0085c83a 	sub	r2,zero,r2
 8004204:	0007883a 	mov	r3,zero
 8004208:	d9800017 	ldw	r6,0(sp)
 800420c:	003f9b06 	br	800407c <__alt_data_end+0xfc00407c>
 8004210:	01002034 	movhi	r4,128
 8004214:	0029883a 	mov	r20,zero
 8004218:	213fffc4 	addi	r4,r4,-1
 800421c:	00ffffc4 	movi	r3,-1
 8004220:	003fc006 	br	8004124 <__alt_data_end+0xfc004124>
 8004224:	9027883a 	mov	r19,r18
 8004228:	b807883a 	mov	r3,r23
 800422c:	003fb406 	br	8004100 <__alt_data_end+0xfc004100>
 8004230:	9027883a 	mov	r19,r18
 8004234:	e02b883a 	mov	r21,fp
 8004238:	b807883a 	mov	r3,r23
 800423c:	003fb006 	br	8004100 <__alt_data_end+0xfc004100>
 8004240:	9004d43a 	srli	r2,r18,16
 8004244:	9810d43a 	srli	r8,r19,16
 8004248:	94bfffcc 	andi	r18,r18,65535
 800424c:	993fffcc 	andi	r4,r19,65535
 8004250:	910d383a 	mul	r6,r18,r4
 8004254:	20a7383a 	mul	r19,r4,r2
 8004258:	9225383a 	mul	r18,r18,r8
 800425c:	3006d43a 	srli	r3,r6,16
 8004260:	1211383a 	mul	r8,r2,r8
 8004264:	94e5883a 	add	r18,r18,r19
 8004268:	1c87883a 	add	r3,r3,r18
 800426c:	1cc0022e 	bgeu	r3,r19,8004278 <__mulsf3+0x2a0>
 8004270:	00800074 	movhi	r2,1
 8004274:	4091883a 	add	r8,r8,r2
 8004278:	1804943a 	slli	r2,r3,16
 800427c:	31bfffcc 	andi	r6,r6,65535
 8004280:	1806d43a 	srli	r3,r3,16
 8004284:	1185883a 	add	r2,r2,r6
 8004288:	102691ba 	slli	r19,r2,6
 800428c:	1a07883a 	add	r3,r3,r8
 8004290:	1004d6ba 	srli	r2,r2,26
 8004294:	180891ba 	slli	r4,r3,6
 8004298:	9826c03a 	cmpne	r19,r19,zero
 800429c:	9884b03a 	or	r2,r19,r2
 80042a0:	1126b03a 	or	r19,r2,r4
 80042a4:	9882002c 	andhi	r2,r19,2048
 80042a8:	10000426 	beq	r2,zero,80042bc <__mulsf3+0x2e4>
 80042ac:	9804d07a 	srli	r2,r19,1
 80042b0:	9900004c 	andi	r4,r19,1
 80042b4:	3821883a 	mov	r16,r7
 80042b8:	1126b03a 	or	r19,r2,r4
 80042bc:	80c01fc4 	addi	r3,r16,127
 80042c0:	00c0210e 	bge	zero,r3,8004348 <__mulsf3+0x370>
 80042c4:	988001cc 	andi	r2,r19,7
 80042c8:	10000426 	beq	r2,zero,80042dc <__mulsf3+0x304>
 80042cc:	988003cc 	andi	r2,r19,15
 80042d0:	01000104 	movi	r4,4
 80042d4:	11000126 	beq	r2,r4,80042dc <__mulsf3+0x304>
 80042d8:	9927883a 	add	r19,r19,r4
 80042dc:	9882002c 	andhi	r2,r19,2048
 80042e0:	10000426 	beq	r2,zero,80042f4 <__mulsf3+0x31c>
 80042e4:	00be0034 	movhi	r2,63488
 80042e8:	10bfffc4 	addi	r2,r2,-1
 80042ec:	80c02004 	addi	r3,r16,128
 80042f0:	98a6703a 	and	r19,r19,r2
 80042f4:	00803f84 	movi	r2,254
 80042f8:	10ffa916 	blt	r2,r3,80041a0 <__alt_data_end+0xfc0041a0>
 80042fc:	980891ba 	slli	r4,r19,6
 8004300:	a829883a 	mov	r20,r21
 8004304:	2008d27a 	srli	r4,r4,9
 8004308:	003f8606 	br	8004124 <__alt_data_end+0xfc004124>
 800430c:	9080102c 	andhi	r2,r18,64
 8004310:	10000826 	beq	r2,zero,8004334 <__mulsf3+0x35c>
 8004314:	9880102c 	andhi	r2,r19,64
 8004318:	1000061e 	bne	r2,zero,8004334 <__mulsf3+0x35c>
 800431c:	00802034 	movhi	r2,128
 8004320:	99001034 	orhi	r4,r19,64
 8004324:	10bfffc4 	addi	r2,r2,-1
 8004328:	b029883a 	mov	r20,r22
 800432c:	2088703a 	and	r4,r4,r2
 8004330:	003fba06 	br	800421c <__alt_data_end+0xfc00421c>
 8004334:	00802034 	movhi	r2,128
 8004338:	91001034 	orhi	r4,r18,64
 800433c:	10bfffc4 	addi	r2,r2,-1
 8004340:	2088703a 	and	r4,r4,r2
 8004344:	003fb506 	br	800421c <__alt_data_end+0xfc00421c>
 8004348:	00800044 	movi	r2,1
 800434c:	10c7c83a 	sub	r3,r2,r3
 8004350:	008006c4 	movi	r2,27
 8004354:	10ff7016 	blt	r2,r3,8004118 <__alt_data_end+0xfc004118>
 8004358:	00800804 	movi	r2,32
 800435c:	10c5c83a 	sub	r2,r2,r3
 8004360:	9884983a 	sll	r2,r19,r2
 8004364:	98c6d83a 	srl	r3,r19,r3
 8004368:	1004c03a 	cmpne	r2,r2,zero
 800436c:	1884b03a 	or	r2,r3,r2
 8004370:	10c001cc 	andi	r3,r2,7
 8004374:	18000426 	beq	r3,zero,8004388 <__mulsf3+0x3b0>
 8004378:	10c003cc 	andi	r3,r2,15
 800437c:	01000104 	movi	r4,4
 8004380:	19000126 	beq	r3,r4,8004388 <__mulsf3+0x3b0>
 8004384:	1105883a 	add	r2,r2,r4
 8004388:	10c1002c 	andhi	r3,r2,1024
 800438c:	18000626 	beq	r3,zero,80043a8 <__mulsf3+0x3d0>
 8004390:	a829883a 	mov	r20,r21
 8004394:	00c00044 	movi	r3,1
 8004398:	0009883a 	mov	r4,zero
 800439c:	003f6106 	br	8004124 <__alt_data_end+0xfc004124>
 80043a0:	3821883a 	mov	r16,r7
 80043a4:	003fc506 	br	80042bc <__alt_data_end+0xfc0042bc>
 80043a8:	100491ba 	slli	r2,r2,6
 80043ac:	a829883a 	mov	r20,r21
 80043b0:	0007883a 	mov	r3,zero
 80043b4:	1008d27a 	srli	r4,r2,9
 80043b8:	003f5a06 	br	8004124 <__alt_data_end+0xfc004124>
 80043bc:	00802034 	movhi	r2,128
 80043c0:	99001034 	orhi	r4,r19,64
 80043c4:	10bfffc4 	addi	r2,r2,-1
 80043c8:	a829883a 	mov	r20,r21
 80043cc:	2088703a 	and	r4,r4,r2
 80043d0:	003f9206 	br	800421c <__alt_data_end+0xfc00421c>

080043d4 <__subsf3>:
 80043d4:	defffc04 	addi	sp,sp,-16
 80043d8:	280cd5fa 	srli	r6,r5,23
 80043dc:	dc000015 	stw	r16,0(sp)
 80043e0:	01c02034 	movhi	r7,128
 80043e4:	2020d5fa 	srli	r16,r4,23
 80043e8:	39ffffc4 	addi	r7,r7,-1
 80043ec:	3906703a 	and	r3,r7,r4
 80043f0:	dc400115 	stw	r17,4(sp)
 80043f4:	394e703a 	and	r7,r7,r5
 80043f8:	2022d7fa 	srli	r17,r4,31
 80043fc:	dfc00315 	stw	ra,12(sp)
 8004400:	dc800215 	stw	r18,8(sp)
 8004404:	31803fcc 	andi	r6,r6,255
 8004408:	01003fc4 	movi	r4,255
 800440c:	84003fcc 	andi	r16,r16,255
 8004410:	180690fa 	slli	r3,r3,3
 8004414:	2804d7fa 	srli	r2,r5,31
 8004418:	380e90fa 	slli	r7,r7,3
 800441c:	31006d26 	beq	r6,r4,80045d4 <__subsf3+0x200>
 8004420:	1080005c 	xori	r2,r2,1
 8004424:	8189c83a 	sub	r4,r16,r6
 8004428:	14404f26 	beq	r2,r17,8004568 <__subsf3+0x194>
 800442c:	0100770e 	bge	zero,r4,800460c <__subsf3+0x238>
 8004430:	30001e1e 	bne	r6,zero,80044ac <__subsf3+0xd8>
 8004434:	38006a1e 	bne	r7,zero,80045e0 <__subsf3+0x20c>
 8004438:	188001cc 	andi	r2,r3,7
 800443c:	10000426 	beq	r2,zero,8004450 <__subsf3+0x7c>
 8004440:	188003cc 	andi	r2,r3,15
 8004444:	01000104 	movi	r4,4
 8004448:	11000126 	beq	r2,r4,8004450 <__subsf3+0x7c>
 800444c:	1907883a 	add	r3,r3,r4
 8004450:	1881002c 	andhi	r2,r3,1024
 8004454:	10003926 	beq	r2,zero,800453c <__subsf3+0x168>
 8004458:	84000044 	addi	r16,r16,1
 800445c:	00803fc4 	movi	r2,255
 8004460:	80807526 	beq	r16,r2,8004638 <__subsf3+0x264>
 8004464:	180691ba 	slli	r3,r3,6
 8004468:	8880004c 	andi	r2,r17,1
 800446c:	180ad27a 	srli	r5,r3,9
 8004470:	84003fcc 	andi	r16,r16,255
 8004474:	800695fa 	slli	r3,r16,23
 8004478:	10803fcc 	andi	r2,r2,255
 800447c:	01002034 	movhi	r4,128
 8004480:	213fffc4 	addi	r4,r4,-1
 8004484:	100497fa 	slli	r2,r2,31
 8004488:	2920703a 	and	r16,r5,r4
 800448c:	80e0b03a 	or	r16,r16,r3
 8004490:	8084b03a 	or	r2,r16,r2
 8004494:	dfc00317 	ldw	ra,12(sp)
 8004498:	dc800217 	ldw	r18,8(sp)
 800449c:	dc400117 	ldw	r17,4(sp)
 80044a0:	dc000017 	ldw	r16,0(sp)
 80044a4:	dec00404 	addi	sp,sp,16
 80044a8:	f800283a 	ret
 80044ac:	00803fc4 	movi	r2,255
 80044b0:	80bfe126 	beq	r16,r2,8004438 <__alt_data_end+0xfc004438>
 80044b4:	39c10034 	orhi	r7,r7,1024
 80044b8:	008006c4 	movi	r2,27
 80044bc:	11007416 	blt	r2,r4,8004690 <__subsf3+0x2bc>
 80044c0:	00800804 	movi	r2,32
 80044c4:	1105c83a 	sub	r2,r2,r4
 80044c8:	3884983a 	sll	r2,r7,r2
 80044cc:	390ed83a 	srl	r7,r7,r4
 80044d0:	1008c03a 	cmpne	r4,r2,zero
 80044d4:	390eb03a 	or	r7,r7,r4
 80044d8:	19c7c83a 	sub	r3,r3,r7
 80044dc:	1881002c 	andhi	r2,r3,1024
 80044e0:	10001426 	beq	r2,zero,8004534 <__subsf3+0x160>
 80044e4:	04810034 	movhi	r18,1024
 80044e8:	94bfffc4 	addi	r18,r18,-1
 80044ec:	1ca4703a 	and	r18,r3,r18
 80044f0:	9009883a 	mov	r4,r18
 80044f4:	80072600 	call	8007260 <__clzsi2>
 80044f8:	10bffec4 	addi	r2,r2,-5
 80044fc:	90a4983a 	sll	r18,r18,r2
 8004500:	14005116 	blt	r2,r16,8004648 <__subsf3+0x274>
 8004504:	1405c83a 	sub	r2,r2,r16
 8004508:	10c00044 	addi	r3,r2,1
 800450c:	00800804 	movi	r2,32
 8004510:	10c5c83a 	sub	r2,r2,r3
 8004514:	9084983a 	sll	r2,r18,r2
 8004518:	90e4d83a 	srl	r18,r18,r3
 800451c:	0021883a 	mov	r16,zero
 8004520:	1006c03a 	cmpne	r3,r2,zero
 8004524:	90c6b03a 	or	r3,r18,r3
 8004528:	003fc306 	br	8004438 <__alt_data_end+0xfc004438>
 800452c:	2000e026 	beq	r4,zero,80048b0 <__subsf3+0x4dc>
 8004530:	2007883a 	mov	r3,r4
 8004534:	188001cc 	andi	r2,r3,7
 8004538:	103fc11e 	bne	r2,zero,8004440 <__alt_data_end+0xfc004440>
 800453c:	180ad0fa 	srli	r5,r3,3
 8004540:	00c03fc4 	movi	r3,255
 8004544:	8880004c 	andi	r2,r17,1
 8004548:	80c0031e 	bne	r16,r3,8004558 <__subsf3+0x184>
 800454c:	28006d26 	beq	r5,zero,8004704 <__subsf3+0x330>
 8004550:	29401034 	orhi	r5,r5,64
 8004554:	043fffc4 	movi	r16,-1
 8004558:	00c02034 	movhi	r3,128
 800455c:	18ffffc4 	addi	r3,r3,-1
 8004560:	28ca703a 	and	r5,r5,r3
 8004564:	003fc206 	br	8004470 <__alt_data_end+0xfc004470>
 8004568:	01003c0e 	bge	zero,r4,800465c <__subsf3+0x288>
 800456c:	30002126 	beq	r6,zero,80045f4 <__subsf3+0x220>
 8004570:	01403fc4 	movi	r5,255
 8004574:	817fb026 	beq	r16,r5,8004438 <__alt_data_end+0xfc004438>
 8004578:	39c10034 	orhi	r7,r7,1024
 800457c:	014006c4 	movi	r5,27
 8004580:	29007416 	blt	r5,r4,8004754 <__subsf3+0x380>
 8004584:	01400804 	movi	r5,32
 8004588:	290bc83a 	sub	r5,r5,r4
 800458c:	394a983a 	sll	r5,r7,r5
 8004590:	390ed83a 	srl	r7,r7,r4
 8004594:	2808c03a 	cmpne	r4,r5,zero
 8004598:	390eb03a 	or	r7,r7,r4
 800459c:	19c7883a 	add	r3,r3,r7
 80045a0:	1901002c 	andhi	r4,r3,1024
 80045a4:	20003826 	beq	r4,zero,8004688 <__subsf3+0x2b4>
 80045a8:	84000044 	addi	r16,r16,1
 80045ac:	01003fc4 	movi	r4,255
 80045b0:	81005426 	beq	r16,r4,8004704 <__subsf3+0x330>
 80045b4:	1023883a 	mov	r17,r2
 80045b8:	00bf0034 	movhi	r2,64512
 80045bc:	10bfffc4 	addi	r2,r2,-1
 80045c0:	1900004c 	andi	r4,r3,1
 80045c4:	1886703a 	and	r3,r3,r2
 80045c8:	1806d07a 	srli	r3,r3,1
 80045cc:	1906b03a 	or	r3,r3,r4
 80045d0:	003f9906 	br	8004438 <__alt_data_end+0xfc004438>
 80045d4:	383f9226 	beq	r7,zero,8004420 <__alt_data_end+0xfc004420>
 80045d8:	10803fcc 	andi	r2,r2,255
 80045dc:	003f9106 	br	8004424 <__alt_data_end+0xfc004424>
 80045e0:	213fffc4 	addi	r4,r4,-1
 80045e4:	203fbc26 	beq	r4,zero,80044d8 <__alt_data_end+0xfc0044d8>
 80045e8:	00803fc4 	movi	r2,255
 80045ec:	80bfb21e 	bne	r16,r2,80044b8 <__alt_data_end+0xfc0044b8>
 80045f0:	003f9106 	br	8004438 <__alt_data_end+0xfc004438>
 80045f4:	383f9026 	beq	r7,zero,8004438 <__alt_data_end+0xfc004438>
 80045f8:	213fffc4 	addi	r4,r4,-1
 80045fc:	203fe726 	beq	r4,zero,800459c <__alt_data_end+0xfc00459c>
 8004600:	01403fc4 	movi	r5,255
 8004604:	817fdd1e 	bne	r16,r5,800457c <__alt_data_end+0xfc00457c>
 8004608:	003f8b06 	br	8004438 <__alt_data_end+0xfc004438>
 800460c:	2000221e 	bne	r4,zero,8004698 <__subsf3+0x2c4>
 8004610:	81000044 	addi	r4,r16,1
 8004614:	21003fcc 	andi	r4,r4,255
 8004618:	01400044 	movi	r5,1
 800461c:	2900470e 	bge	r5,r4,800473c <__subsf3+0x368>
 8004620:	19e5c83a 	sub	r18,r3,r7
 8004624:	9141002c 	andhi	r5,r18,1024
 8004628:	28002d26 	beq	r5,zero,80046e0 <__subsf3+0x30c>
 800462c:	38e5c83a 	sub	r18,r7,r3
 8004630:	1023883a 	mov	r17,r2
 8004634:	003fae06 	br	80044f0 <__alt_data_end+0xfc0044f0>
 8004638:	8880004c 	andi	r2,r17,1
 800463c:	043fffc4 	movi	r16,-1
 8004640:	000b883a 	mov	r5,zero
 8004644:	003f8a06 	br	8004470 <__alt_data_end+0xfc004470>
 8004648:	00ff0034 	movhi	r3,64512
 800464c:	18ffffc4 	addi	r3,r3,-1
 8004650:	80a1c83a 	sub	r16,r16,r2
 8004654:	90c6703a 	and	r3,r18,r3
 8004658:	003f7706 	br	8004438 <__alt_data_end+0xfc004438>
 800465c:	2000431e 	bne	r4,zero,800476c <__subsf3+0x398>
 8004660:	81000044 	addi	r4,r16,1
 8004664:	21803fcc 	andi	r6,r4,255
 8004668:	01400044 	movi	r5,1
 800466c:	2980280e 	bge	r5,r6,8004710 <__subsf3+0x33c>
 8004670:	01403fc4 	movi	r5,255
 8004674:	21402326 	beq	r4,r5,8004704 <__subsf3+0x330>
 8004678:	19c7883a 	add	r3,r3,r7
 800467c:	1806d07a 	srli	r3,r3,1
 8004680:	2021883a 	mov	r16,r4
 8004684:	003f6c06 	br	8004438 <__alt_data_end+0xfc004438>
 8004688:	1023883a 	mov	r17,r2
 800468c:	003fa906 	br	8004534 <__alt_data_end+0xfc004534>
 8004690:	01c00044 	movi	r7,1
 8004694:	003f9006 	br	80044d8 <__alt_data_end+0xfc0044d8>
 8004698:	8000151e 	bne	r16,zero,80046f0 <__subsf3+0x31c>
 800469c:	18002f26 	beq	r3,zero,800475c <__subsf3+0x388>
 80046a0:	0108303a 	nor	r4,zero,r4
 80046a4:	20000a26 	beq	r4,zero,80046d0 <__subsf3+0x2fc>
 80046a8:	01403fc4 	movi	r5,255
 80046ac:	31402b26 	beq	r6,r5,800475c <__subsf3+0x388>
 80046b0:	014006c4 	movi	r5,27
 80046b4:	29006e16 	blt	r5,r4,8004870 <__subsf3+0x49c>
 80046b8:	01400804 	movi	r5,32
 80046bc:	290bc83a 	sub	r5,r5,r4
 80046c0:	194a983a 	sll	r5,r3,r5
 80046c4:	1908d83a 	srl	r4,r3,r4
 80046c8:	2806c03a 	cmpne	r3,r5,zero
 80046cc:	20c6b03a 	or	r3,r4,r3
 80046d0:	38c7c83a 	sub	r3,r7,r3
 80046d4:	3021883a 	mov	r16,r6
 80046d8:	1023883a 	mov	r17,r2
 80046dc:	003f7f06 	br	80044dc <__alt_data_end+0xfc0044dc>
 80046e0:	903f831e 	bne	r18,zero,80044f0 <__alt_data_end+0xfc0044f0>
 80046e4:	0005883a 	mov	r2,zero
 80046e8:	0021883a 	mov	r16,zero
 80046ec:	003f9a06 	br	8004558 <__alt_data_end+0xfc004558>
 80046f0:	01403fc4 	movi	r5,255
 80046f4:	31401926 	beq	r6,r5,800475c <__subsf3+0x388>
 80046f8:	0109c83a 	sub	r4,zero,r4
 80046fc:	18c10034 	orhi	r3,r3,1024
 8004700:	003feb06 	br	80046b0 <__alt_data_end+0xfc0046b0>
 8004704:	043fffc4 	movi	r16,-1
 8004708:	000b883a 	mov	r5,zero
 800470c:	003f5806 	br	8004470 <__alt_data_end+0xfc004470>
 8004710:	8000481e 	bne	r16,zero,8004834 <__subsf3+0x460>
 8004714:	18006226 	beq	r3,zero,80048a0 <__subsf3+0x4cc>
 8004718:	383f4726 	beq	r7,zero,8004438 <__alt_data_end+0xfc004438>
 800471c:	19c7883a 	add	r3,r3,r7
 8004720:	1881002c 	andhi	r2,r3,1024
 8004724:	103f8326 	beq	r2,zero,8004534 <__alt_data_end+0xfc004534>
 8004728:	00bf0034 	movhi	r2,64512
 800472c:	10bfffc4 	addi	r2,r2,-1
 8004730:	2821883a 	mov	r16,r5
 8004734:	1886703a 	and	r3,r3,r2
 8004738:	003f3f06 	br	8004438 <__alt_data_end+0xfc004438>
 800473c:	80001c1e 	bne	r16,zero,80047b0 <__subsf3+0x3dc>
 8004740:	1800261e 	bne	r3,zero,80047dc <__subsf3+0x408>
 8004744:	38004c26 	beq	r7,zero,8004878 <__subsf3+0x4a4>
 8004748:	3807883a 	mov	r3,r7
 800474c:	1023883a 	mov	r17,r2
 8004750:	003f3906 	br	8004438 <__alt_data_end+0xfc004438>
 8004754:	01c00044 	movi	r7,1
 8004758:	003f9006 	br	800459c <__alt_data_end+0xfc00459c>
 800475c:	3807883a 	mov	r3,r7
 8004760:	3021883a 	mov	r16,r6
 8004764:	1023883a 	mov	r17,r2
 8004768:	003f3306 	br	8004438 <__alt_data_end+0xfc004438>
 800476c:	8000161e 	bne	r16,zero,80047c8 <__subsf3+0x3f4>
 8004770:	18002d26 	beq	r3,zero,8004828 <__subsf3+0x454>
 8004774:	0108303a 	nor	r4,zero,r4
 8004778:	20000a26 	beq	r4,zero,80047a4 <__subsf3+0x3d0>
 800477c:	01403fc4 	movi	r5,255
 8004780:	31402926 	beq	r6,r5,8004828 <__subsf3+0x454>
 8004784:	014006c4 	movi	r5,27
 8004788:	29004716 	blt	r5,r4,80048a8 <__subsf3+0x4d4>
 800478c:	01400804 	movi	r5,32
 8004790:	290bc83a 	sub	r5,r5,r4
 8004794:	194a983a 	sll	r5,r3,r5
 8004798:	1908d83a 	srl	r4,r3,r4
 800479c:	2806c03a 	cmpne	r3,r5,zero
 80047a0:	20c6b03a 	or	r3,r4,r3
 80047a4:	19c7883a 	add	r3,r3,r7
 80047a8:	3021883a 	mov	r16,r6
 80047ac:	003f7c06 	br	80045a0 <__alt_data_end+0xfc0045a0>
 80047b0:	1800111e 	bne	r3,zero,80047f8 <__subsf3+0x424>
 80047b4:	38003326 	beq	r7,zero,8004884 <__subsf3+0x4b0>
 80047b8:	3807883a 	mov	r3,r7
 80047bc:	1023883a 	mov	r17,r2
 80047c0:	04003fc4 	movi	r16,255
 80047c4:	003f1c06 	br	8004438 <__alt_data_end+0xfc004438>
 80047c8:	01403fc4 	movi	r5,255
 80047cc:	31401626 	beq	r6,r5,8004828 <__subsf3+0x454>
 80047d0:	0109c83a 	sub	r4,zero,r4
 80047d4:	18c10034 	orhi	r3,r3,1024
 80047d8:	003fea06 	br	8004784 <__alt_data_end+0xfc004784>
 80047dc:	383f1626 	beq	r7,zero,8004438 <__alt_data_end+0xfc004438>
 80047e0:	19c9c83a 	sub	r4,r3,r7
 80047e4:	2141002c 	andhi	r5,r4,1024
 80047e8:	283f5026 	beq	r5,zero,800452c <__alt_data_end+0xfc00452c>
 80047ec:	38c7c83a 	sub	r3,r7,r3
 80047f0:	1023883a 	mov	r17,r2
 80047f4:	003f1006 	br	8004438 <__alt_data_end+0xfc004438>
 80047f8:	38001b26 	beq	r7,zero,8004868 <__subsf3+0x494>
 80047fc:	1806d0fa 	srli	r3,r3,3
 8004800:	1900102c 	andhi	r4,r3,64
 8004804:	20000526 	beq	r4,zero,800481c <__subsf3+0x448>
 8004808:	380ed0fa 	srli	r7,r7,3
 800480c:	3900102c 	andhi	r4,r7,64
 8004810:	2000021e 	bne	r4,zero,800481c <__subsf3+0x448>
 8004814:	3807883a 	mov	r3,r7
 8004818:	1023883a 	mov	r17,r2
 800481c:	180690fa 	slli	r3,r3,3
 8004820:	04003fc4 	movi	r16,255
 8004824:	003f0406 	br	8004438 <__alt_data_end+0xfc004438>
 8004828:	3807883a 	mov	r3,r7
 800482c:	3021883a 	mov	r16,r6
 8004830:	003f0106 	br	8004438 <__alt_data_end+0xfc004438>
 8004834:	18001726 	beq	r3,zero,8004894 <__subsf3+0x4c0>
 8004838:	38000b26 	beq	r7,zero,8004868 <__subsf3+0x494>
 800483c:	1806d0fa 	srli	r3,r3,3
 8004840:	1900102c 	andhi	r4,r3,64
 8004844:	20000426 	beq	r4,zero,8004858 <__subsf3+0x484>
 8004848:	380ed0fa 	srli	r7,r7,3
 800484c:	3900102c 	andhi	r4,r7,64
 8004850:	2000011e 	bne	r4,zero,8004858 <__subsf3+0x484>
 8004854:	3807883a 	mov	r3,r7
 8004858:	180690fa 	slli	r3,r3,3
 800485c:	1023883a 	mov	r17,r2
 8004860:	04003fc4 	movi	r16,255
 8004864:	003ef406 	br	8004438 <__alt_data_end+0xfc004438>
 8004868:	04003fc4 	movi	r16,255
 800486c:	003ef206 	br	8004438 <__alt_data_end+0xfc004438>
 8004870:	00c00044 	movi	r3,1
 8004874:	003f9606 	br	80046d0 <__alt_data_end+0xfc0046d0>
 8004878:	000b883a 	mov	r5,zero
 800487c:	0005883a 	mov	r2,zero
 8004880:	003f3506 	br	8004558 <__alt_data_end+0xfc004558>
 8004884:	01402034 	movhi	r5,128
 8004888:	297fffc4 	addi	r5,r5,-1
 800488c:	0005883a 	mov	r2,zero
 8004890:	003f2f06 	br	8004550 <__alt_data_end+0xfc004550>
 8004894:	3807883a 	mov	r3,r7
 8004898:	04003fc4 	movi	r16,255
 800489c:	003ee606 	br	8004438 <__alt_data_end+0xfc004438>
 80048a0:	3807883a 	mov	r3,r7
 80048a4:	003ee406 	br	8004438 <__alt_data_end+0xfc004438>
 80048a8:	00c00044 	movi	r3,1
 80048ac:	003fbd06 	br	80047a4 <__alt_data_end+0xfc0047a4>
 80048b0:	0005883a 	mov	r2,zero
 80048b4:	003f2806 	br	8004558 <__alt_data_end+0xfc004558>

080048b8 <__fixsfsi>:
 80048b8:	200ad5fa 	srli	r5,r4,23
 80048bc:	00c02034 	movhi	r3,128
 80048c0:	18ffffc4 	addi	r3,r3,-1
 80048c4:	29403fcc 	andi	r5,r5,255
 80048c8:	00801f84 	movi	r2,126
 80048cc:	1906703a 	and	r3,r3,r4
 80048d0:	2008d7fa 	srli	r4,r4,31
 80048d4:	11400e0e 	bge	r2,r5,8004910 <__fixsfsi+0x58>
 80048d8:	00802744 	movi	r2,157
 80048dc:	11400816 	blt	r2,r5,8004900 <__fixsfsi+0x48>
 80048e0:	00802544 	movi	r2,149
 80048e4:	18c02034 	orhi	r3,r3,128
 80048e8:	11400b0e 	bge	r2,r5,8004918 <__fixsfsi+0x60>
 80048ec:	28bfda84 	addi	r2,r5,-150
 80048f0:	1884983a 	sll	r2,r3,r2
 80048f4:	20000726 	beq	r4,zero,8004914 <__fixsfsi+0x5c>
 80048f8:	0085c83a 	sub	r2,zero,r2
 80048fc:	f800283a 	ret
 8004900:	00a00034 	movhi	r2,32768
 8004904:	10bfffc4 	addi	r2,r2,-1
 8004908:	2085883a 	add	r2,r4,r2
 800490c:	f800283a 	ret
 8004910:	0005883a 	mov	r2,zero
 8004914:	f800283a 	ret
 8004918:	00802584 	movi	r2,150
 800491c:	1145c83a 	sub	r2,r2,r5
 8004920:	1884d83a 	srl	r2,r3,r2
 8004924:	003ff306 	br	80048f4 <__alt_data_end+0xfc0048f4>

08004928 <__floatsisf>:
 8004928:	defffd04 	addi	sp,sp,-12
 800492c:	dfc00215 	stw	ra,8(sp)
 8004930:	dc400115 	stw	r17,4(sp)
 8004934:	dc000015 	stw	r16,0(sp)
 8004938:	20003526 	beq	r4,zero,8004a10 <__floatsisf+0xe8>
 800493c:	2021883a 	mov	r16,r4
 8004940:	2022d7fa 	srli	r17,r4,31
 8004944:	20003616 	blt	r4,zero,8004a20 <__floatsisf+0xf8>
 8004948:	8009883a 	mov	r4,r16
 800494c:	80072600 	call	8007260 <__clzsi2>
 8004950:	00c02784 	movi	r3,158
 8004954:	1887c83a 	sub	r3,r3,r2
 8004958:	01002584 	movi	r4,150
 800495c:	20c01416 	blt	r4,r3,80049b0 <__floatsisf+0x88>
 8004960:	20c9c83a 	sub	r4,r4,r3
 8004964:	8120983a 	sll	r16,r16,r4
 8004968:	00802034 	movhi	r2,128
 800496c:	10bfffc4 	addi	r2,r2,-1
 8004970:	8809883a 	mov	r4,r17
 8004974:	80a0703a 	and	r16,r16,r2
 8004978:	18803fcc 	andi	r2,r3,255
 800497c:	100695fa 	slli	r3,r2,23
 8004980:	20803fcc 	andi	r2,r4,255
 8004984:	100897fa 	slli	r4,r2,31
 8004988:	00802034 	movhi	r2,128
 800498c:	10bfffc4 	addi	r2,r2,-1
 8004990:	8084703a 	and	r2,r16,r2
 8004994:	10c4b03a 	or	r2,r2,r3
 8004998:	1104b03a 	or	r2,r2,r4
 800499c:	dfc00217 	ldw	ra,8(sp)
 80049a0:	dc400117 	ldw	r17,4(sp)
 80049a4:	dc000017 	ldw	r16,0(sp)
 80049a8:	dec00304 	addi	sp,sp,12
 80049ac:	f800283a 	ret
 80049b0:	01002644 	movi	r4,153
 80049b4:	20c01c16 	blt	r4,r3,8004a28 <__floatsisf+0x100>
 80049b8:	20c9c83a 	sub	r4,r4,r3
 80049bc:	8120983a 	sll	r16,r16,r4
 80049c0:	013f0034 	movhi	r4,64512
 80049c4:	213fffc4 	addi	r4,r4,-1
 80049c8:	814001cc 	andi	r5,r16,7
 80049cc:	8108703a 	and	r4,r16,r4
 80049d0:	28000426 	beq	r5,zero,80049e4 <__floatsisf+0xbc>
 80049d4:	840003cc 	andi	r16,r16,15
 80049d8:	01400104 	movi	r5,4
 80049dc:	81400126 	beq	r16,r5,80049e4 <__floatsisf+0xbc>
 80049e0:	2149883a 	add	r4,r4,r5
 80049e4:	2141002c 	andhi	r5,r4,1024
 80049e8:	28000526 	beq	r5,zero,8004a00 <__floatsisf+0xd8>
 80049ec:	00c027c4 	movi	r3,159
 80049f0:	1887c83a 	sub	r3,r3,r2
 80049f4:	00bf0034 	movhi	r2,64512
 80049f8:	10bfffc4 	addi	r2,r2,-1
 80049fc:	2088703a 	and	r4,r4,r2
 8004a00:	202091ba 	slli	r16,r4,6
 8004a04:	8809883a 	mov	r4,r17
 8004a08:	8020d27a 	srli	r16,r16,9
 8004a0c:	003fda06 	br	8004978 <__alt_data_end+0xfc004978>
 8004a10:	0009883a 	mov	r4,zero
 8004a14:	0007883a 	mov	r3,zero
 8004a18:	0021883a 	mov	r16,zero
 8004a1c:	003fd606 	br	8004978 <__alt_data_end+0xfc004978>
 8004a20:	0121c83a 	sub	r16,zero,r4
 8004a24:	003fc806 	br	8004948 <__alt_data_end+0xfc004948>
 8004a28:	01002e44 	movi	r4,185
 8004a2c:	20c9c83a 	sub	r4,r4,r3
 8004a30:	01400144 	movi	r5,5
 8004a34:	8108983a 	sll	r4,r16,r4
 8004a38:	288bc83a 	sub	r5,r5,r2
 8004a3c:	8160d83a 	srl	r16,r16,r5
 8004a40:	2008c03a 	cmpne	r4,r4,zero
 8004a44:	8120b03a 	or	r16,r16,r4
 8004a48:	003fdd06 	br	80049c0 <__alt_data_end+0xfc0049c0>

08004a4c <__adddf3>:
 8004a4c:	02c00434 	movhi	r11,16
 8004a50:	5affffc4 	addi	r11,r11,-1
 8004a54:	2806d7fa 	srli	r3,r5,31
 8004a58:	2ad4703a 	and	r10,r5,r11
 8004a5c:	3ad2703a 	and	r9,r7,r11
 8004a60:	3804d53a 	srli	r2,r7,20
 8004a64:	3018d77a 	srli	r12,r6,29
 8004a68:	280ad53a 	srli	r5,r5,20
 8004a6c:	501490fa 	slli	r10,r10,3
 8004a70:	2010d77a 	srli	r8,r4,29
 8004a74:	481290fa 	slli	r9,r9,3
 8004a78:	380ed7fa 	srli	r7,r7,31
 8004a7c:	defffb04 	addi	sp,sp,-20
 8004a80:	dc800215 	stw	r18,8(sp)
 8004a84:	dc400115 	stw	r17,4(sp)
 8004a88:	dc000015 	stw	r16,0(sp)
 8004a8c:	dfc00415 	stw	ra,16(sp)
 8004a90:	dcc00315 	stw	r19,12(sp)
 8004a94:	1c803fcc 	andi	r18,r3,255
 8004a98:	2c01ffcc 	andi	r16,r5,2047
 8004a9c:	5210b03a 	or	r8,r10,r8
 8004aa0:	202290fa 	slli	r17,r4,3
 8004aa4:	1081ffcc 	andi	r2,r2,2047
 8004aa8:	4b12b03a 	or	r9,r9,r12
 8004aac:	300c90fa 	slli	r6,r6,3
 8004ab0:	91c07526 	beq	r18,r7,8004c88 <__adddf3+0x23c>
 8004ab4:	8087c83a 	sub	r3,r16,r2
 8004ab8:	00c0ab0e 	bge	zero,r3,8004d68 <__adddf3+0x31c>
 8004abc:	10002a1e 	bne	r2,zero,8004b68 <__adddf3+0x11c>
 8004ac0:	4984b03a 	or	r2,r9,r6
 8004ac4:	1000961e 	bne	r2,zero,8004d20 <__adddf3+0x2d4>
 8004ac8:	888001cc 	andi	r2,r17,7
 8004acc:	10000726 	beq	r2,zero,8004aec <__adddf3+0xa0>
 8004ad0:	888003cc 	andi	r2,r17,15
 8004ad4:	00c00104 	movi	r3,4
 8004ad8:	10c00426 	beq	r2,r3,8004aec <__adddf3+0xa0>
 8004adc:	88c7883a 	add	r3,r17,r3
 8004ae0:	1c63803a 	cmpltu	r17,r3,r17
 8004ae4:	4451883a 	add	r8,r8,r17
 8004ae8:	1823883a 	mov	r17,r3
 8004aec:	4080202c 	andhi	r2,r8,128
 8004af0:	10005926 	beq	r2,zero,8004c58 <__adddf3+0x20c>
 8004af4:	84000044 	addi	r16,r16,1
 8004af8:	0081ffc4 	movi	r2,2047
 8004afc:	8080ba26 	beq	r16,r2,8004de8 <__adddf3+0x39c>
 8004b00:	00bfe034 	movhi	r2,65408
 8004b04:	10bfffc4 	addi	r2,r2,-1
 8004b08:	4090703a 	and	r8,r8,r2
 8004b0c:	4004977a 	slli	r2,r8,29
 8004b10:	4010927a 	slli	r8,r8,9
 8004b14:	8822d0fa 	srli	r17,r17,3
 8004b18:	8401ffcc 	andi	r16,r16,2047
 8004b1c:	4010d33a 	srli	r8,r8,12
 8004b20:	9007883a 	mov	r3,r18
 8004b24:	1444b03a 	or	r2,r2,r17
 8004b28:	8401ffcc 	andi	r16,r16,2047
 8004b2c:	8020953a 	slli	r16,r16,20
 8004b30:	18c03fcc 	andi	r3,r3,255
 8004b34:	01000434 	movhi	r4,16
 8004b38:	213fffc4 	addi	r4,r4,-1
 8004b3c:	180697fa 	slli	r3,r3,31
 8004b40:	4110703a 	and	r8,r8,r4
 8004b44:	4410b03a 	or	r8,r8,r16
 8004b48:	40c6b03a 	or	r3,r8,r3
 8004b4c:	dfc00417 	ldw	ra,16(sp)
 8004b50:	dcc00317 	ldw	r19,12(sp)
 8004b54:	dc800217 	ldw	r18,8(sp)
 8004b58:	dc400117 	ldw	r17,4(sp)
 8004b5c:	dc000017 	ldw	r16,0(sp)
 8004b60:	dec00504 	addi	sp,sp,20
 8004b64:	f800283a 	ret
 8004b68:	0081ffc4 	movi	r2,2047
 8004b6c:	80bfd626 	beq	r16,r2,8004ac8 <__alt_data_end+0xfc004ac8>
 8004b70:	4a402034 	orhi	r9,r9,128
 8004b74:	00800e04 	movi	r2,56
 8004b78:	10c09f16 	blt	r2,r3,8004df8 <__adddf3+0x3ac>
 8004b7c:	008007c4 	movi	r2,31
 8004b80:	10c0c216 	blt	r2,r3,8004e8c <__adddf3+0x440>
 8004b84:	00800804 	movi	r2,32
 8004b88:	10c5c83a 	sub	r2,r2,r3
 8004b8c:	488a983a 	sll	r5,r9,r2
 8004b90:	30c8d83a 	srl	r4,r6,r3
 8004b94:	3084983a 	sll	r2,r6,r2
 8004b98:	48c6d83a 	srl	r3,r9,r3
 8004b9c:	290cb03a 	or	r6,r5,r4
 8004ba0:	1004c03a 	cmpne	r2,r2,zero
 8004ba4:	308cb03a 	or	r6,r6,r2
 8004ba8:	898dc83a 	sub	r6,r17,r6
 8004bac:	89a3803a 	cmpltu	r17,r17,r6
 8004bb0:	40d1c83a 	sub	r8,r8,r3
 8004bb4:	4451c83a 	sub	r8,r8,r17
 8004bb8:	3023883a 	mov	r17,r6
 8004bbc:	4080202c 	andhi	r2,r8,128
 8004bc0:	10002326 	beq	r2,zero,8004c50 <__adddf3+0x204>
 8004bc4:	04c02034 	movhi	r19,128
 8004bc8:	9cffffc4 	addi	r19,r19,-1
 8004bcc:	44e6703a 	and	r19,r8,r19
 8004bd0:	98007626 	beq	r19,zero,8004dac <__adddf3+0x360>
 8004bd4:	9809883a 	mov	r4,r19
 8004bd8:	80072600 	call	8007260 <__clzsi2>
 8004bdc:	10fffe04 	addi	r3,r2,-8
 8004be0:	010007c4 	movi	r4,31
 8004be4:	20c07716 	blt	r4,r3,8004dc4 <__adddf3+0x378>
 8004be8:	00800804 	movi	r2,32
 8004bec:	10c5c83a 	sub	r2,r2,r3
 8004bf0:	8884d83a 	srl	r2,r17,r2
 8004bf4:	98d0983a 	sll	r8,r19,r3
 8004bf8:	88e2983a 	sll	r17,r17,r3
 8004bfc:	1204b03a 	or	r2,r2,r8
 8004c00:	1c007416 	blt	r3,r16,8004dd4 <__adddf3+0x388>
 8004c04:	1c21c83a 	sub	r16,r3,r16
 8004c08:	82000044 	addi	r8,r16,1
 8004c0c:	00c007c4 	movi	r3,31
 8004c10:	1a009116 	blt	r3,r8,8004e58 <__adddf3+0x40c>
 8004c14:	00c00804 	movi	r3,32
 8004c18:	1a07c83a 	sub	r3,r3,r8
 8004c1c:	8a08d83a 	srl	r4,r17,r8
 8004c20:	88e2983a 	sll	r17,r17,r3
 8004c24:	10c6983a 	sll	r3,r2,r3
 8004c28:	1210d83a 	srl	r8,r2,r8
 8004c2c:	8804c03a 	cmpne	r2,r17,zero
 8004c30:	1906b03a 	or	r3,r3,r4
 8004c34:	18a2b03a 	or	r17,r3,r2
 8004c38:	0021883a 	mov	r16,zero
 8004c3c:	003fa206 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004c40:	1890b03a 	or	r8,r3,r2
 8004c44:	40017d26 	beq	r8,zero,800523c <__adddf3+0x7f0>
 8004c48:	1011883a 	mov	r8,r2
 8004c4c:	1823883a 	mov	r17,r3
 8004c50:	888001cc 	andi	r2,r17,7
 8004c54:	103f9e1e 	bne	r2,zero,8004ad0 <__alt_data_end+0xfc004ad0>
 8004c58:	4004977a 	slli	r2,r8,29
 8004c5c:	8822d0fa 	srli	r17,r17,3
 8004c60:	4010d0fa 	srli	r8,r8,3
 8004c64:	9007883a 	mov	r3,r18
 8004c68:	1444b03a 	or	r2,r2,r17
 8004c6c:	0101ffc4 	movi	r4,2047
 8004c70:	81002426 	beq	r16,r4,8004d04 <__adddf3+0x2b8>
 8004c74:	8120703a 	and	r16,r16,r4
 8004c78:	01000434 	movhi	r4,16
 8004c7c:	213fffc4 	addi	r4,r4,-1
 8004c80:	4110703a 	and	r8,r8,r4
 8004c84:	003fa806 	br	8004b28 <__alt_data_end+0xfc004b28>
 8004c88:	8089c83a 	sub	r4,r16,r2
 8004c8c:	01005e0e 	bge	zero,r4,8004e08 <__adddf3+0x3bc>
 8004c90:	10002b26 	beq	r2,zero,8004d40 <__adddf3+0x2f4>
 8004c94:	0081ffc4 	movi	r2,2047
 8004c98:	80bf8b26 	beq	r16,r2,8004ac8 <__alt_data_end+0xfc004ac8>
 8004c9c:	4a402034 	orhi	r9,r9,128
 8004ca0:	00800e04 	movi	r2,56
 8004ca4:	1100a40e 	bge	r2,r4,8004f38 <__adddf3+0x4ec>
 8004ca8:	498cb03a 	or	r6,r9,r6
 8004cac:	300ac03a 	cmpne	r5,r6,zero
 8004cb0:	0013883a 	mov	r9,zero
 8004cb4:	2c4b883a 	add	r5,r5,r17
 8004cb8:	2c63803a 	cmpltu	r17,r5,r17
 8004cbc:	4a11883a 	add	r8,r9,r8
 8004cc0:	8a11883a 	add	r8,r17,r8
 8004cc4:	2823883a 	mov	r17,r5
 8004cc8:	4080202c 	andhi	r2,r8,128
 8004ccc:	103fe026 	beq	r2,zero,8004c50 <__alt_data_end+0xfc004c50>
 8004cd0:	84000044 	addi	r16,r16,1
 8004cd4:	0081ffc4 	movi	r2,2047
 8004cd8:	8080d226 	beq	r16,r2,8005024 <__adddf3+0x5d8>
 8004cdc:	00bfe034 	movhi	r2,65408
 8004ce0:	10bfffc4 	addi	r2,r2,-1
 8004ce4:	4090703a 	and	r8,r8,r2
 8004ce8:	880ad07a 	srli	r5,r17,1
 8004cec:	400897fa 	slli	r4,r8,31
 8004cf0:	88c0004c 	andi	r3,r17,1
 8004cf4:	28e2b03a 	or	r17,r5,r3
 8004cf8:	4010d07a 	srli	r8,r8,1
 8004cfc:	2462b03a 	or	r17,r4,r17
 8004d00:	003f7106 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004d04:	4088b03a 	or	r4,r8,r2
 8004d08:	20014526 	beq	r4,zero,8005220 <__adddf3+0x7d4>
 8004d0c:	01000434 	movhi	r4,16
 8004d10:	42000234 	orhi	r8,r8,8
 8004d14:	213fffc4 	addi	r4,r4,-1
 8004d18:	4110703a 	and	r8,r8,r4
 8004d1c:	003f8206 	br	8004b28 <__alt_data_end+0xfc004b28>
 8004d20:	18ffffc4 	addi	r3,r3,-1
 8004d24:	1800491e 	bne	r3,zero,8004e4c <__adddf3+0x400>
 8004d28:	898bc83a 	sub	r5,r17,r6
 8004d2c:	8963803a 	cmpltu	r17,r17,r5
 8004d30:	4251c83a 	sub	r8,r8,r9
 8004d34:	4451c83a 	sub	r8,r8,r17
 8004d38:	2823883a 	mov	r17,r5
 8004d3c:	003f9f06 	br	8004bbc <__alt_data_end+0xfc004bbc>
 8004d40:	4984b03a 	or	r2,r9,r6
 8004d44:	103f6026 	beq	r2,zero,8004ac8 <__alt_data_end+0xfc004ac8>
 8004d48:	213fffc4 	addi	r4,r4,-1
 8004d4c:	2000931e 	bne	r4,zero,8004f9c <__adddf3+0x550>
 8004d50:	898d883a 	add	r6,r17,r6
 8004d54:	3463803a 	cmpltu	r17,r6,r17
 8004d58:	4251883a 	add	r8,r8,r9
 8004d5c:	8a11883a 	add	r8,r17,r8
 8004d60:	3023883a 	mov	r17,r6
 8004d64:	003fd806 	br	8004cc8 <__alt_data_end+0xfc004cc8>
 8004d68:	1800541e 	bne	r3,zero,8004ebc <__adddf3+0x470>
 8004d6c:	80800044 	addi	r2,r16,1
 8004d70:	1081ffcc 	andi	r2,r2,2047
 8004d74:	00c00044 	movi	r3,1
 8004d78:	1880a00e 	bge	r3,r2,8004ffc <__adddf3+0x5b0>
 8004d7c:	8989c83a 	sub	r4,r17,r6
 8004d80:	8905803a 	cmpltu	r2,r17,r4
 8004d84:	4267c83a 	sub	r19,r8,r9
 8004d88:	98a7c83a 	sub	r19,r19,r2
 8004d8c:	9880202c 	andhi	r2,r19,128
 8004d90:	10006326 	beq	r2,zero,8004f20 <__adddf3+0x4d4>
 8004d94:	3463c83a 	sub	r17,r6,r17
 8004d98:	4a07c83a 	sub	r3,r9,r8
 8004d9c:	344d803a 	cmpltu	r6,r6,r17
 8004da0:	19a7c83a 	sub	r19,r3,r6
 8004da4:	3825883a 	mov	r18,r7
 8004da8:	983f8a1e 	bne	r19,zero,8004bd4 <__alt_data_end+0xfc004bd4>
 8004dac:	8809883a 	mov	r4,r17
 8004db0:	80072600 	call	8007260 <__clzsi2>
 8004db4:	10800804 	addi	r2,r2,32
 8004db8:	10fffe04 	addi	r3,r2,-8
 8004dbc:	010007c4 	movi	r4,31
 8004dc0:	20ff890e 	bge	r4,r3,8004be8 <__alt_data_end+0xfc004be8>
 8004dc4:	10bff604 	addi	r2,r2,-40
 8004dc8:	8884983a 	sll	r2,r17,r2
 8004dcc:	0023883a 	mov	r17,zero
 8004dd0:	1c3f8c0e 	bge	r3,r16,8004c04 <__alt_data_end+0xfc004c04>
 8004dd4:	023fe034 	movhi	r8,65408
 8004dd8:	423fffc4 	addi	r8,r8,-1
 8004ddc:	80e1c83a 	sub	r16,r16,r3
 8004de0:	1210703a 	and	r8,r2,r8
 8004de4:	003f3806 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004de8:	9007883a 	mov	r3,r18
 8004dec:	0011883a 	mov	r8,zero
 8004df0:	0005883a 	mov	r2,zero
 8004df4:	003f4c06 	br	8004b28 <__alt_data_end+0xfc004b28>
 8004df8:	498cb03a 	or	r6,r9,r6
 8004dfc:	300cc03a 	cmpne	r6,r6,zero
 8004e00:	0007883a 	mov	r3,zero
 8004e04:	003f6806 	br	8004ba8 <__alt_data_end+0xfc004ba8>
 8004e08:	20009c1e 	bne	r4,zero,800507c <__adddf3+0x630>
 8004e0c:	80800044 	addi	r2,r16,1
 8004e10:	1141ffcc 	andi	r5,r2,2047
 8004e14:	01000044 	movi	r4,1
 8004e18:	2140670e 	bge	r4,r5,8004fb8 <__adddf3+0x56c>
 8004e1c:	0101ffc4 	movi	r4,2047
 8004e20:	11007f26 	beq	r2,r4,8005020 <__adddf3+0x5d4>
 8004e24:	898d883a 	add	r6,r17,r6
 8004e28:	4247883a 	add	r3,r8,r9
 8004e2c:	3451803a 	cmpltu	r8,r6,r17
 8004e30:	40d1883a 	add	r8,r8,r3
 8004e34:	402297fa 	slli	r17,r8,31
 8004e38:	300cd07a 	srli	r6,r6,1
 8004e3c:	4010d07a 	srli	r8,r8,1
 8004e40:	1021883a 	mov	r16,r2
 8004e44:	89a2b03a 	or	r17,r17,r6
 8004e48:	003f1f06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004e4c:	0081ffc4 	movi	r2,2047
 8004e50:	80bf481e 	bne	r16,r2,8004b74 <__alt_data_end+0xfc004b74>
 8004e54:	003f1c06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004e58:	843ff844 	addi	r16,r16,-31
 8004e5c:	01000804 	movi	r4,32
 8004e60:	1406d83a 	srl	r3,r2,r16
 8004e64:	41005026 	beq	r8,r4,8004fa8 <__adddf3+0x55c>
 8004e68:	01001004 	movi	r4,64
 8004e6c:	2211c83a 	sub	r8,r4,r8
 8004e70:	1204983a 	sll	r2,r2,r8
 8004e74:	88a2b03a 	or	r17,r17,r2
 8004e78:	8822c03a 	cmpne	r17,r17,zero
 8004e7c:	1c62b03a 	or	r17,r3,r17
 8004e80:	0011883a 	mov	r8,zero
 8004e84:	0021883a 	mov	r16,zero
 8004e88:	003f7106 	br	8004c50 <__alt_data_end+0xfc004c50>
 8004e8c:	193ff804 	addi	r4,r3,-32
 8004e90:	00800804 	movi	r2,32
 8004e94:	4908d83a 	srl	r4,r9,r4
 8004e98:	18804526 	beq	r3,r2,8004fb0 <__adddf3+0x564>
 8004e9c:	00801004 	movi	r2,64
 8004ea0:	10c5c83a 	sub	r2,r2,r3
 8004ea4:	4886983a 	sll	r3,r9,r2
 8004ea8:	198cb03a 	or	r6,r3,r6
 8004eac:	300cc03a 	cmpne	r6,r6,zero
 8004eb0:	218cb03a 	or	r6,r4,r6
 8004eb4:	0007883a 	mov	r3,zero
 8004eb8:	003f3b06 	br	8004ba8 <__alt_data_end+0xfc004ba8>
 8004ebc:	80002a26 	beq	r16,zero,8004f68 <__adddf3+0x51c>
 8004ec0:	0101ffc4 	movi	r4,2047
 8004ec4:	11006826 	beq	r2,r4,8005068 <__adddf3+0x61c>
 8004ec8:	00c7c83a 	sub	r3,zero,r3
 8004ecc:	42002034 	orhi	r8,r8,128
 8004ed0:	01000e04 	movi	r4,56
 8004ed4:	20c07c16 	blt	r4,r3,80050c8 <__adddf3+0x67c>
 8004ed8:	010007c4 	movi	r4,31
 8004edc:	20c0da16 	blt	r4,r3,8005248 <__adddf3+0x7fc>
 8004ee0:	01000804 	movi	r4,32
 8004ee4:	20c9c83a 	sub	r4,r4,r3
 8004ee8:	4114983a 	sll	r10,r8,r4
 8004eec:	88cad83a 	srl	r5,r17,r3
 8004ef0:	8908983a 	sll	r4,r17,r4
 8004ef4:	40c6d83a 	srl	r3,r8,r3
 8004ef8:	5162b03a 	or	r17,r10,r5
 8004efc:	2008c03a 	cmpne	r4,r4,zero
 8004f00:	8922b03a 	or	r17,r17,r4
 8004f04:	3463c83a 	sub	r17,r6,r17
 8004f08:	48c7c83a 	sub	r3,r9,r3
 8004f0c:	344d803a 	cmpltu	r6,r6,r17
 8004f10:	1991c83a 	sub	r8,r3,r6
 8004f14:	1021883a 	mov	r16,r2
 8004f18:	3825883a 	mov	r18,r7
 8004f1c:	003f2706 	br	8004bbc <__alt_data_end+0xfc004bbc>
 8004f20:	24d0b03a 	or	r8,r4,r19
 8004f24:	40001b1e 	bne	r8,zero,8004f94 <__adddf3+0x548>
 8004f28:	0005883a 	mov	r2,zero
 8004f2c:	0007883a 	mov	r3,zero
 8004f30:	0021883a 	mov	r16,zero
 8004f34:	003f4d06 	br	8004c6c <__alt_data_end+0xfc004c6c>
 8004f38:	008007c4 	movi	r2,31
 8004f3c:	11003c16 	blt	r2,r4,8005030 <__adddf3+0x5e4>
 8004f40:	00800804 	movi	r2,32
 8004f44:	1105c83a 	sub	r2,r2,r4
 8004f48:	488e983a 	sll	r7,r9,r2
 8004f4c:	310ad83a 	srl	r5,r6,r4
 8004f50:	3084983a 	sll	r2,r6,r2
 8004f54:	4912d83a 	srl	r9,r9,r4
 8004f58:	394ab03a 	or	r5,r7,r5
 8004f5c:	1004c03a 	cmpne	r2,r2,zero
 8004f60:	288ab03a 	or	r5,r5,r2
 8004f64:	003f5306 	br	8004cb4 <__alt_data_end+0xfc004cb4>
 8004f68:	4448b03a 	or	r4,r8,r17
 8004f6c:	20003e26 	beq	r4,zero,8005068 <__adddf3+0x61c>
 8004f70:	00c6303a 	nor	r3,zero,r3
 8004f74:	18003a1e 	bne	r3,zero,8005060 <__adddf3+0x614>
 8004f78:	3463c83a 	sub	r17,r6,r17
 8004f7c:	4a07c83a 	sub	r3,r9,r8
 8004f80:	344d803a 	cmpltu	r6,r6,r17
 8004f84:	1991c83a 	sub	r8,r3,r6
 8004f88:	1021883a 	mov	r16,r2
 8004f8c:	3825883a 	mov	r18,r7
 8004f90:	003f0a06 	br	8004bbc <__alt_data_end+0xfc004bbc>
 8004f94:	2023883a 	mov	r17,r4
 8004f98:	003f0d06 	br	8004bd0 <__alt_data_end+0xfc004bd0>
 8004f9c:	0081ffc4 	movi	r2,2047
 8004fa0:	80bf3f1e 	bne	r16,r2,8004ca0 <__alt_data_end+0xfc004ca0>
 8004fa4:	003ec806 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004fa8:	0005883a 	mov	r2,zero
 8004fac:	003fb106 	br	8004e74 <__alt_data_end+0xfc004e74>
 8004fb0:	0007883a 	mov	r3,zero
 8004fb4:	003fbc06 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 8004fb8:	4444b03a 	or	r2,r8,r17
 8004fbc:	8000871e 	bne	r16,zero,80051dc <__adddf3+0x790>
 8004fc0:	1000ba26 	beq	r2,zero,80052ac <__adddf3+0x860>
 8004fc4:	4984b03a 	or	r2,r9,r6
 8004fc8:	103ebf26 	beq	r2,zero,8004ac8 <__alt_data_end+0xfc004ac8>
 8004fcc:	8985883a 	add	r2,r17,r6
 8004fd0:	4247883a 	add	r3,r8,r9
 8004fd4:	1451803a 	cmpltu	r8,r2,r17
 8004fd8:	40d1883a 	add	r8,r8,r3
 8004fdc:	40c0202c 	andhi	r3,r8,128
 8004fe0:	1023883a 	mov	r17,r2
 8004fe4:	183f1a26 	beq	r3,zero,8004c50 <__alt_data_end+0xfc004c50>
 8004fe8:	00bfe034 	movhi	r2,65408
 8004fec:	10bfffc4 	addi	r2,r2,-1
 8004ff0:	2021883a 	mov	r16,r4
 8004ff4:	4090703a 	and	r8,r8,r2
 8004ff8:	003eb306 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8004ffc:	4444b03a 	or	r2,r8,r17
 8005000:	8000291e 	bne	r16,zero,80050a8 <__adddf3+0x65c>
 8005004:	10004b1e 	bne	r2,zero,8005134 <__adddf3+0x6e8>
 8005008:	4990b03a 	or	r8,r9,r6
 800500c:	40008b26 	beq	r8,zero,800523c <__adddf3+0x7f0>
 8005010:	4811883a 	mov	r8,r9
 8005014:	3023883a 	mov	r17,r6
 8005018:	3825883a 	mov	r18,r7
 800501c:	003eaa06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8005020:	1021883a 	mov	r16,r2
 8005024:	0011883a 	mov	r8,zero
 8005028:	0005883a 	mov	r2,zero
 800502c:	003f0f06 	br	8004c6c <__alt_data_end+0xfc004c6c>
 8005030:	217ff804 	addi	r5,r4,-32
 8005034:	00800804 	movi	r2,32
 8005038:	494ad83a 	srl	r5,r9,r5
 800503c:	20807d26 	beq	r4,r2,8005234 <__adddf3+0x7e8>
 8005040:	00801004 	movi	r2,64
 8005044:	1109c83a 	sub	r4,r2,r4
 8005048:	4912983a 	sll	r9,r9,r4
 800504c:	498cb03a 	or	r6,r9,r6
 8005050:	300cc03a 	cmpne	r6,r6,zero
 8005054:	298ab03a 	or	r5,r5,r6
 8005058:	0013883a 	mov	r9,zero
 800505c:	003f1506 	br	8004cb4 <__alt_data_end+0xfc004cb4>
 8005060:	0101ffc4 	movi	r4,2047
 8005064:	113f9a1e 	bne	r2,r4,8004ed0 <__alt_data_end+0xfc004ed0>
 8005068:	4811883a 	mov	r8,r9
 800506c:	3023883a 	mov	r17,r6
 8005070:	1021883a 	mov	r16,r2
 8005074:	3825883a 	mov	r18,r7
 8005078:	003e9306 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 800507c:	8000161e 	bne	r16,zero,80050d8 <__adddf3+0x68c>
 8005080:	444ab03a 	or	r5,r8,r17
 8005084:	28005126 	beq	r5,zero,80051cc <__adddf3+0x780>
 8005088:	0108303a 	nor	r4,zero,r4
 800508c:	20004d1e 	bne	r4,zero,80051c4 <__adddf3+0x778>
 8005090:	89a3883a 	add	r17,r17,r6
 8005094:	4253883a 	add	r9,r8,r9
 8005098:	898d803a 	cmpltu	r6,r17,r6
 800509c:	3251883a 	add	r8,r6,r9
 80050a0:	1021883a 	mov	r16,r2
 80050a4:	003f0806 	br	8004cc8 <__alt_data_end+0xfc004cc8>
 80050a8:	1000301e 	bne	r2,zero,800516c <__adddf3+0x720>
 80050ac:	4984b03a 	or	r2,r9,r6
 80050b0:	10007126 	beq	r2,zero,8005278 <__adddf3+0x82c>
 80050b4:	4811883a 	mov	r8,r9
 80050b8:	3023883a 	mov	r17,r6
 80050bc:	3825883a 	mov	r18,r7
 80050c0:	0401ffc4 	movi	r16,2047
 80050c4:	003e8006 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80050c8:	4462b03a 	or	r17,r8,r17
 80050cc:	8822c03a 	cmpne	r17,r17,zero
 80050d0:	0007883a 	mov	r3,zero
 80050d4:	003f8b06 	br	8004f04 <__alt_data_end+0xfc004f04>
 80050d8:	0141ffc4 	movi	r5,2047
 80050dc:	11403b26 	beq	r2,r5,80051cc <__adddf3+0x780>
 80050e0:	0109c83a 	sub	r4,zero,r4
 80050e4:	42002034 	orhi	r8,r8,128
 80050e8:	01400e04 	movi	r5,56
 80050ec:	29006716 	blt	r5,r4,800528c <__adddf3+0x840>
 80050f0:	014007c4 	movi	r5,31
 80050f4:	29007016 	blt	r5,r4,80052b8 <__adddf3+0x86c>
 80050f8:	01400804 	movi	r5,32
 80050fc:	290bc83a 	sub	r5,r5,r4
 8005100:	4154983a 	sll	r10,r8,r5
 8005104:	890ed83a 	srl	r7,r17,r4
 8005108:	894a983a 	sll	r5,r17,r5
 800510c:	4108d83a 	srl	r4,r8,r4
 8005110:	51e2b03a 	or	r17,r10,r7
 8005114:	280ac03a 	cmpne	r5,r5,zero
 8005118:	8962b03a 	or	r17,r17,r5
 800511c:	89a3883a 	add	r17,r17,r6
 8005120:	2253883a 	add	r9,r4,r9
 8005124:	898d803a 	cmpltu	r6,r17,r6
 8005128:	3251883a 	add	r8,r6,r9
 800512c:	1021883a 	mov	r16,r2
 8005130:	003ee506 	br	8004cc8 <__alt_data_end+0xfc004cc8>
 8005134:	4984b03a 	or	r2,r9,r6
 8005138:	103e6326 	beq	r2,zero,8004ac8 <__alt_data_end+0xfc004ac8>
 800513c:	8987c83a 	sub	r3,r17,r6
 8005140:	88c9803a 	cmpltu	r4,r17,r3
 8005144:	4245c83a 	sub	r2,r8,r9
 8005148:	1105c83a 	sub	r2,r2,r4
 800514c:	1100202c 	andhi	r4,r2,128
 8005150:	203ebb26 	beq	r4,zero,8004c40 <__alt_data_end+0xfc004c40>
 8005154:	3463c83a 	sub	r17,r6,r17
 8005158:	4a07c83a 	sub	r3,r9,r8
 800515c:	344d803a 	cmpltu	r6,r6,r17
 8005160:	1991c83a 	sub	r8,r3,r6
 8005164:	3825883a 	mov	r18,r7
 8005168:	003e5706 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 800516c:	4984b03a 	or	r2,r9,r6
 8005170:	10002e26 	beq	r2,zero,800522c <__adddf3+0x7e0>
 8005174:	4004d0fa 	srli	r2,r8,3
 8005178:	8822d0fa 	srli	r17,r17,3
 800517c:	4010977a 	slli	r8,r8,29
 8005180:	10c0022c 	andhi	r3,r2,8
 8005184:	4462b03a 	or	r17,r8,r17
 8005188:	18000826 	beq	r3,zero,80051ac <__adddf3+0x760>
 800518c:	4808d0fa 	srli	r4,r9,3
 8005190:	20c0022c 	andhi	r3,r4,8
 8005194:	1800051e 	bne	r3,zero,80051ac <__adddf3+0x760>
 8005198:	300cd0fa 	srli	r6,r6,3
 800519c:	4806977a 	slli	r3,r9,29
 80051a0:	2005883a 	mov	r2,r4
 80051a4:	3825883a 	mov	r18,r7
 80051a8:	19a2b03a 	or	r17,r3,r6
 80051ac:	8810d77a 	srli	r8,r17,29
 80051b0:	100490fa 	slli	r2,r2,3
 80051b4:	882290fa 	slli	r17,r17,3
 80051b8:	0401ffc4 	movi	r16,2047
 80051bc:	4090b03a 	or	r8,r8,r2
 80051c0:	003e4106 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80051c4:	0141ffc4 	movi	r5,2047
 80051c8:	117fc71e 	bne	r2,r5,80050e8 <__alt_data_end+0xfc0050e8>
 80051cc:	4811883a 	mov	r8,r9
 80051d0:	3023883a 	mov	r17,r6
 80051d4:	1021883a 	mov	r16,r2
 80051d8:	003e3b06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80051dc:	10002f26 	beq	r2,zero,800529c <__adddf3+0x850>
 80051e0:	4984b03a 	or	r2,r9,r6
 80051e4:	10001126 	beq	r2,zero,800522c <__adddf3+0x7e0>
 80051e8:	4004d0fa 	srli	r2,r8,3
 80051ec:	8822d0fa 	srli	r17,r17,3
 80051f0:	4010977a 	slli	r8,r8,29
 80051f4:	10c0022c 	andhi	r3,r2,8
 80051f8:	4462b03a 	or	r17,r8,r17
 80051fc:	183feb26 	beq	r3,zero,80051ac <__alt_data_end+0xfc0051ac>
 8005200:	4808d0fa 	srli	r4,r9,3
 8005204:	20c0022c 	andhi	r3,r4,8
 8005208:	183fe81e 	bne	r3,zero,80051ac <__alt_data_end+0xfc0051ac>
 800520c:	300cd0fa 	srli	r6,r6,3
 8005210:	4806977a 	slli	r3,r9,29
 8005214:	2005883a 	mov	r2,r4
 8005218:	19a2b03a 	or	r17,r3,r6
 800521c:	003fe306 	br	80051ac <__alt_data_end+0xfc0051ac>
 8005220:	0011883a 	mov	r8,zero
 8005224:	0005883a 	mov	r2,zero
 8005228:	003e3f06 	br	8004b28 <__alt_data_end+0xfc004b28>
 800522c:	0401ffc4 	movi	r16,2047
 8005230:	003e2506 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8005234:	0013883a 	mov	r9,zero
 8005238:	003f8406 	br	800504c <__alt_data_end+0xfc00504c>
 800523c:	0005883a 	mov	r2,zero
 8005240:	0007883a 	mov	r3,zero
 8005244:	003e8906 	br	8004c6c <__alt_data_end+0xfc004c6c>
 8005248:	197ff804 	addi	r5,r3,-32
 800524c:	01000804 	movi	r4,32
 8005250:	414ad83a 	srl	r5,r8,r5
 8005254:	19002426 	beq	r3,r4,80052e8 <__adddf3+0x89c>
 8005258:	01001004 	movi	r4,64
 800525c:	20c7c83a 	sub	r3,r4,r3
 8005260:	40c6983a 	sll	r3,r8,r3
 8005264:	1c46b03a 	or	r3,r3,r17
 8005268:	1806c03a 	cmpne	r3,r3,zero
 800526c:	28e2b03a 	or	r17,r5,r3
 8005270:	0007883a 	mov	r3,zero
 8005274:	003f2306 	br	8004f04 <__alt_data_end+0xfc004f04>
 8005278:	0007883a 	mov	r3,zero
 800527c:	5811883a 	mov	r8,r11
 8005280:	00bfffc4 	movi	r2,-1
 8005284:	0401ffc4 	movi	r16,2047
 8005288:	003e7806 	br	8004c6c <__alt_data_end+0xfc004c6c>
 800528c:	4462b03a 	or	r17,r8,r17
 8005290:	8822c03a 	cmpne	r17,r17,zero
 8005294:	0009883a 	mov	r4,zero
 8005298:	003fa006 	br	800511c <__alt_data_end+0xfc00511c>
 800529c:	4811883a 	mov	r8,r9
 80052a0:	3023883a 	mov	r17,r6
 80052a4:	0401ffc4 	movi	r16,2047
 80052a8:	003e0706 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80052ac:	4811883a 	mov	r8,r9
 80052b0:	3023883a 	mov	r17,r6
 80052b4:	003e0406 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 80052b8:	21fff804 	addi	r7,r4,-32
 80052bc:	01400804 	movi	r5,32
 80052c0:	41ced83a 	srl	r7,r8,r7
 80052c4:	21400a26 	beq	r4,r5,80052f0 <__adddf3+0x8a4>
 80052c8:	01401004 	movi	r5,64
 80052cc:	2909c83a 	sub	r4,r5,r4
 80052d0:	4108983a 	sll	r4,r8,r4
 80052d4:	2448b03a 	or	r4,r4,r17
 80052d8:	2008c03a 	cmpne	r4,r4,zero
 80052dc:	3922b03a 	or	r17,r7,r4
 80052e0:	0009883a 	mov	r4,zero
 80052e4:	003f8d06 	br	800511c <__alt_data_end+0xfc00511c>
 80052e8:	0007883a 	mov	r3,zero
 80052ec:	003fdd06 	br	8005264 <__alt_data_end+0xfc005264>
 80052f0:	0009883a 	mov	r4,zero
 80052f4:	003ff706 	br	80052d4 <__alt_data_end+0xfc0052d4>

080052f8 <__divdf3>:
 80052f8:	defff204 	addi	sp,sp,-56
 80052fc:	dd400915 	stw	r21,36(sp)
 8005300:	282ad53a 	srli	r21,r5,20
 8005304:	dd000815 	stw	r20,32(sp)
 8005308:	2828d7fa 	srli	r20,r5,31
 800530c:	dc000415 	stw	r16,16(sp)
 8005310:	04000434 	movhi	r16,16
 8005314:	df000c15 	stw	fp,48(sp)
 8005318:	843fffc4 	addi	r16,r16,-1
 800531c:	dfc00d15 	stw	ra,52(sp)
 8005320:	ddc00b15 	stw	r23,44(sp)
 8005324:	dd800a15 	stw	r22,40(sp)
 8005328:	dcc00715 	stw	r19,28(sp)
 800532c:	dc800615 	stw	r18,24(sp)
 8005330:	dc400515 	stw	r17,20(sp)
 8005334:	ad41ffcc 	andi	r21,r21,2047
 8005338:	2c20703a 	and	r16,r5,r16
 800533c:	a7003fcc 	andi	fp,r20,255
 8005340:	a8006126 	beq	r21,zero,80054c8 <__divdf3+0x1d0>
 8005344:	0081ffc4 	movi	r2,2047
 8005348:	2025883a 	mov	r18,r4
 800534c:	a8803726 	beq	r21,r2,800542c <__divdf3+0x134>
 8005350:	80800434 	orhi	r2,r16,16
 8005354:	100490fa 	slli	r2,r2,3
 8005358:	2020d77a 	srli	r16,r4,29
 800535c:	202490fa 	slli	r18,r4,3
 8005360:	ad7f0044 	addi	r21,r21,-1023
 8005364:	80a0b03a 	or	r16,r16,r2
 8005368:	0027883a 	mov	r19,zero
 800536c:	0013883a 	mov	r9,zero
 8005370:	3804d53a 	srli	r2,r7,20
 8005374:	382cd7fa 	srli	r22,r7,31
 8005378:	04400434 	movhi	r17,16
 800537c:	8c7fffc4 	addi	r17,r17,-1
 8005380:	1081ffcc 	andi	r2,r2,2047
 8005384:	3011883a 	mov	r8,r6
 8005388:	3c62703a 	and	r17,r7,r17
 800538c:	b5c03fcc 	andi	r23,r22,255
 8005390:	10006c26 	beq	r2,zero,8005544 <__divdf3+0x24c>
 8005394:	00c1ffc4 	movi	r3,2047
 8005398:	10c06426 	beq	r2,r3,800552c <__divdf3+0x234>
 800539c:	88c00434 	orhi	r3,r17,16
 80053a0:	180690fa 	slli	r3,r3,3
 80053a4:	3022d77a 	srli	r17,r6,29
 80053a8:	301090fa 	slli	r8,r6,3
 80053ac:	10bf0044 	addi	r2,r2,-1023
 80053b0:	88e2b03a 	or	r17,r17,r3
 80053b4:	000f883a 	mov	r7,zero
 80053b8:	a58cf03a 	xor	r6,r20,r22
 80053bc:	3cc8b03a 	or	r4,r7,r19
 80053c0:	a8abc83a 	sub	r21,r21,r2
 80053c4:	008003c4 	movi	r2,15
 80053c8:	3007883a 	mov	r3,r6
 80053cc:	34c03fcc 	andi	r19,r6,255
 80053d0:	11009036 	bltu	r2,r4,8005614 <__divdf3+0x31c>
 80053d4:	200890ba 	slli	r4,r4,2
 80053d8:	00820034 	movhi	r2,2048
 80053dc:	1094fb04 	addi	r2,r2,21484
 80053e0:	2089883a 	add	r4,r4,r2
 80053e4:	20800017 	ldw	r2,0(r4)
 80053e8:	1000683a 	jmp	r2
 80053ec:	08005614 	ori	zero,at,344
 80053f0:	08005464 	muli	zero,at,337
 80053f4:	08005604 	addi	zero,at,344
 80053f8:	08005458 	cmpnei	zero,at,337
 80053fc:	08005604 	addi	zero,at,344
 8005400:	080055d8 	cmpnei	zero,at,343
 8005404:	08005604 	addi	zero,at,344
 8005408:	08005458 	cmpnei	zero,at,337
 800540c:	08005464 	muli	zero,at,337
 8005410:	08005464 	muli	zero,at,337
 8005414:	080055d8 	cmpnei	zero,at,343
 8005418:	08005458 	cmpnei	zero,at,337
 800541c:	08005448 	cmpgei	zero,at,337
 8005420:	08005448 	cmpgei	zero,at,337
 8005424:	08005448 	cmpgei	zero,at,337
 8005428:	080058f8 	rdprs	zero,at,355
 800542c:	2404b03a 	or	r2,r4,r16
 8005430:	1000661e 	bne	r2,zero,80055cc <__divdf3+0x2d4>
 8005434:	04c00204 	movi	r19,8
 8005438:	0021883a 	mov	r16,zero
 800543c:	0025883a 	mov	r18,zero
 8005440:	02400084 	movi	r9,2
 8005444:	003fca06 	br	8005370 <__alt_data_end+0xfc005370>
 8005448:	8023883a 	mov	r17,r16
 800544c:	9011883a 	mov	r8,r18
 8005450:	e02f883a 	mov	r23,fp
 8005454:	480f883a 	mov	r7,r9
 8005458:	00800084 	movi	r2,2
 800545c:	3881311e 	bne	r7,r2,8005924 <__divdf3+0x62c>
 8005460:	b827883a 	mov	r19,r23
 8005464:	98c0004c 	andi	r3,r19,1
 8005468:	0081ffc4 	movi	r2,2047
 800546c:	000b883a 	mov	r5,zero
 8005470:	0025883a 	mov	r18,zero
 8005474:	1004953a 	slli	r2,r2,20
 8005478:	18c03fcc 	andi	r3,r3,255
 800547c:	04400434 	movhi	r17,16
 8005480:	8c7fffc4 	addi	r17,r17,-1
 8005484:	180697fa 	slli	r3,r3,31
 8005488:	2c4a703a 	and	r5,r5,r17
 800548c:	288ab03a 	or	r5,r5,r2
 8005490:	28c6b03a 	or	r3,r5,r3
 8005494:	9005883a 	mov	r2,r18
 8005498:	dfc00d17 	ldw	ra,52(sp)
 800549c:	df000c17 	ldw	fp,48(sp)
 80054a0:	ddc00b17 	ldw	r23,44(sp)
 80054a4:	dd800a17 	ldw	r22,40(sp)
 80054a8:	dd400917 	ldw	r21,36(sp)
 80054ac:	dd000817 	ldw	r20,32(sp)
 80054b0:	dcc00717 	ldw	r19,28(sp)
 80054b4:	dc800617 	ldw	r18,24(sp)
 80054b8:	dc400517 	ldw	r17,20(sp)
 80054bc:	dc000417 	ldw	r16,16(sp)
 80054c0:	dec00e04 	addi	sp,sp,56
 80054c4:	f800283a 	ret
 80054c8:	2404b03a 	or	r2,r4,r16
 80054cc:	2027883a 	mov	r19,r4
 80054d0:	10003926 	beq	r2,zero,80055b8 <__divdf3+0x2c0>
 80054d4:	80012e26 	beq	r16,zero,8005990 <__divdf3+0x698>
 80054d8:	8009883a 	mov	r4,r16
 80054dc:	d9800315 	stw	r6,12(sp)
 80054e0:	d9c00215 	stw	r7,8(sp)
 80054e4:	80072600 	call	8007260 <__clzsi2>
 80054e8:	d9800317 	ldw	r6,12(sp)
 80054ec:	d9c00217 	ldw	r7,8(sp)
 80054f0:	113ffd44 	addi	r4,r2,-11
 80054f4:	00c00704 	movi	r3,28
 80054f8:	19012116 	blt	r3,r4,8005980 <__divdf3+0x688>
 80054fc:	00c00744 	movi	r3,29
 8005500:	147ffe04 	addi	r17,r2,-8
 8005504:	1907c83a 	sub	r3,r3,r4
 8005508:	8460983a 	sll	r16,r16,r17
 800550c:	98c6d83a 	srl	r3,r19,r3
 8005510:	9c64983a 	sll	r18,r19,r17
 8005514:	1c20b03a 	or	r16,r3,r16
 8005518:	1080fcc4 	addi	r2,r2,1011
 800551c:	00abc83a 	sub	r21,zero,r2
 8005520:	0027883a 	mov	r19,zero
 8005524:	0013883a 	mov	r9,zero
 8005528:	003f9106 	br	8005370 <__alt_data_end+0xfc005370>
 800552c:	3446b03a 	or	r3,r6,r17
 8005530:	18001f1e 	bne	r3,zero,80055b0 <__divdf3+0x2b8>
 8005534:	0023883a 	mov	r17,zero
 8005538:	0011883a 	mov	r8,zero
 800553c:	01c00084 	movi	r7,2
 8005540:	003f9d06 	br	80053b8 <__alt_data_end+0xfc0053b8>
 8005544:	3446b03a 	or	r3,r6,r17
 8005548:	18001526 	beq	r3,zero,80055a0 <__divdf3+0x2a8>
 800554c:	88011b26 	beq	r17,zero,80059bc <__divdf3+0x6c4>
 8005550:	8809883a 	mov	r4,r17
 8005554:	d9800315 	stw	r6,12(sp)
 8005558:	da400115 	stw	r9,4(sp)
 800555c:	80072600 	call	8007260 <__clzsi2>
 8005560:	d9800317 	ldw	r6,12(sp)
 8005564:	da400117 	ldw	r9,4(sp)
 8005568:	113ffd44 	addi	r4,r2,-11
 800556c:	00c00704 	movi	r3,28
 8005570:	19010e16 	blt	r3,r4,80059ac <__divdf3+0x6b4>
 8005574:	00c00744 	movi	r3,29
 8005578:	123ffe04 	addi	r8,r2,-8
 800557c:	1907c83a 	sub	r3,r3,r4
 8005580:	8a22983a 	sll	r17,r17,r8
 8005584:	30c6d83a 	srl	r3,r6,r3
 8005588:	3210983a 	sll	r8,r6,r8
 800558c:	1c62b03a 	or	r17,r3,r17
 8005590:	1080fcc4 	addi	r2,r2,1011
 8005594:	0085c83a 	sub	r2,zero,r2
 8005598:	000f883a 	mov	r7,zero
 800559c:	003f8606 	br	80053b8 <__alt_data_end+0xfc0053b8>
 80055a0:	0023883a 	mov	r17,zero
 80055a4:	0011883a 	mov	r8,zero
 80055a8:	01c00044 	movi	r7,1
 80055ac:	003f8206 	br	80053b8 <__alt_data_end+0xfc0053b8>
 80055b0:	01c000c4 	movi	r7,3
 80055b4:	003f8006 	br	80053b8 <__alt_data_end+0xfc0053b8>
 80055b8:	04c00104 	movi	r19,4
 80055bc:	0021883a 	mov	r16,zero
 80055c0:	0025883a 	mov	r18,zero
 80055c4:	02400044 	movi	r9,1
 80055c8:	003f6906 	br	8005370 <__alt_data_end+0xfc005370>
 80055cc:	04c00304 	movi	r19,12
 80055d0:	024000c4 	movi	r9,3
 80055d4:	003f6606 	br	8005370 <__alt_data_end+0xfc005370>
 80055d8:	01400434 	movhi	r5,16
 80055dc:	0007883a 	mov	r3,zero
 80055e0:	297fffc4 	addi	r5,r5,-1
 80055e4:	04bfffc4 	movi	r18,-1
 80055e8:	0081ffc4 	movi	r2,2047
 80055ec:	003fa106 	br	8005474 <__alt_data_end+0xfc005474>
 80055f0:	00c00044 	movi	r3,1
 80055f4:	1887c83a 	sub	r3,r3,r2
 80055f8:	01000e04 	movi	r4,56
 80055fc:	20c1210e 	bge	r4,r3,8005a84 <__divdf3+0x78c>
 8005600:	98c0004c 	andi	r3,r19,1
 8005604:	0005883a 	mov	r2,zero
 8005608:	000b883a 	mov	r5,zero
 800560c:	0025883a 	mov	r18,zero
 8005610:	003f9806 	br	8005474 <__alt_data_end+0xfc005474>
 8005614:	8c00fd36 	bltu	r17,r16,8005a0c <__divdf3+0x714>
 8005618:	8440fb26 	beq	r16,r17,8005a08 <__divdf3+0x710>
 800561c:	8007883a 	mov	r3,r16
 8005620:	ad7fffc4 	addi	r21,r21,-1
 8005624:	0021883a 	mov	r16,zero
 8005628:	4004d63a 	srli	r2,r8,24
 800562c:	8822923a 	slli	r17,r17,8
 8005630:	1809883a 	mov	r4,r3
 8005634:	402c923a 	slli	r22,r8,8
 8005638:	88b8b03a 	or	fp,r17,r2
 800563c:	e028d43a 	srli	r20,fp,16
 8005640:	d8c00015 	stw	r3,0(sp)
 8005644:	e5ffffcc 	andi	r23,fp,65535
 8005648:	a00b883a 	mov	r5,r20
 800564c:	80034900 	call	8003490 <__udivsi3>
 8005650:	d8c00017 	ldw	r3,0(sp)
 8005654:	a00b883a 	mov	r5,r20
 8005658:	d8800315 	stw	r2,12(sp)
 800565c:	1809883a 	mov	r4,r3
 8005660:	80034f40 	call	80034f4 <__umodsi3>
 8005664:	d9800317 	ldw	r6,12(sp)
 8005668:	1006943a 	slli	r3,r2,16
 800566c:	9004d43a 	srli	r2,r18,16
 8005670:	b9a3383a 	mul	r17,r23,r6
 8005674:	10c4b03a 	or	r2,r2,r3
 8005678:	1440062e 	bgeu	r2,r17,8005694 <__divdf3+0x39c>
 800567c:	1705883a 	add	r2,r2,fp
 8005680:	30ffffc4 	addi	r3,r6,-1
 8005684:	1700ee36 	bltu	r2,fp,8005a40 <__divdf3+0x748>
 8005688:	1440ed2e 	bgeu	r2,r17,8005a40 <__divdf3+0x748>
 800568c:	31bfff84 	addi	r6,r6,-2
 8005690:	1705883a 	add	r2,r2,fp
 8005694:	1463c83a 	sub	r17,r2,r17
 8005698:	a00b883a 	mov	r5,r20
 800569c:	8809883a 	mov	r4,r17
 80056a0:	d9800315 	stw	r6,12(sp)
 80056a4:	80034900 	call	8003490 <__udivsi3>
 80056a8:	a00b883a 	mov	r5,r20
 80056ac:	8809883a 	mov	r4,r17
 80056b0:	d8800215 	stw	r2,8(sp)
 80056b4:	80034f40 	call	80034f4 <__umodsi3>
 80056b8:	d9c00217 	ldw	r7,8(sp)
 80056bc:	1004943a 	slli	r2,r2,16
 80056c0:	94bfffcc 	andi	r18,r18,65535
 80056c4:	b9d1383a 	mul	r8,r23,r7
 80056c8:	90a4b03a 	or	r18,r18,r2
 80056cc:	d9800317 	ldw	r6,12(sp)
 80056d0:	9200062e 	bgeu	r18,r8,80056ec <__divdf3+0x3f4>
 80056d4:	9725883a 	add	r18,r18,fp
 80056d8:	38bfffc4 	addi	r2,r7,-1
 80056dc:	9700d636 	bltu	r18,fp,8005a38 <__divdf3+0x740>
 80056e0:	9200d52e 	bgeu	r18,r8,8005a38 <__divdf3+0x740>
 80056e4:	39ffff84 	addi	r7,r7,-2
 80056e8:	9725883a 	add	r18,r18,fp
 80056ec:	3004943a 	slli	r2,r6,16
 80056f0:	b012d43a 	srli	r9,r22,16
 80056f4:	b1bfffcc 	andi	r6,r22,65535
 80056f8:	11e2b03a 	or	r17,r2,r7
 80056fc:	8806d43a 	srli	r3,r17,16
 8005700:	893fffcc 	andi	r4,r17,65535
 8005704:	218b383a 	mul	r5,r4,r6
 8005708:	30c5383a 	mul	r2,r6,r3
 800570c:	2249383a 	mul	r4,r4,r9
 8005710:	280ed43a 	srli	r7,r5,16
 8005714:	9225c83a 	sub	r18,r18,r8
 8005718:	2089883a 	add	r4,r4,r2
 800571c:	3909883a 	add	r4,r7,r4
 8005720:	1a47383a 	mul	r3,r3,r9
 8005724:	2080022e 	bgeu	r4,r2,8005730 <__divdf3+0x438>
 8005728:	00800074 	movhi	r2,1
 800572c:	1887883a 	add	r3,r3,r2
 8005730:	2004d43a 	srli	r2,r4,16
 8005734:	2008943a 	slli	r4,r4,16
 8005738:	297fffcc 	andi	r5,r5,65535
 800573c:	10c7883a 	add	r3,r2,r3
 8005740:	2149883a 	add	r4,r4,r5
 8005744:	90c0a536 	bltu	r18,r3,80059dc <__divdf3+0x6e4>
 8005748:	90c0bf26 	beq	r18,r3,8005a48 <__divdf3+0x750>
 800574c:	90c7c83a 	sub	r3,r18,r3
 8005750:	810fc83a 	sub	r7,r16,r4
 8005754:	81e5803a 	cmpltu	r18,r16,r7
 8005758:	1ca5c83a 	sub	r18,r3,r18
 800575c:	e480c126 	beq	fp,r18,8005a64 <__divdf3+0x76c>
 8005760:	a00b883a 	mov	r5,r20
 8005764:	9009883a 	mov	r4,r18
 8005768:	d9800315 	stw	r6,12(sp)
 800576c:	d9c00215 	stw	r7,8(sp)
 8005770:	da400115 	stw	r9,4(sp)
 8005774:	80034900 	call	8003490 <__udivsi3>
 8005778:	a00b883a 	mov	r5,r20
 800577c:	9009883a 	mov	r4,r18
 8005780:	d8800015 	stw	r2,0(sp)
 8005784:	80034f40 	call	80034f4 <__umodsi3>
 8005788:	d9c00217 	ldw	r7,8(sp)
 800578c:	da000017 	ldw	r8,0(sp)
 8005790:	1006943a 	slli	r3,r2,16
 8005794:	3804d43a 	srli	r2,r7,16
 8005798:	ba21383a 	mul	r16,r23,r8
 800579c:	d9800317 	ldw	r6,12(sp)
 80057a0:	10c4b03a 	or	r2,r2,r3
 80057a4:	da400117 	ldw	r9,4(sp)
 80057a8:	1400062e 	bgeu	r2,r16,80057c4 <__divdf3+0x4cc>
 80057ac:	1705883a 	add	r2,r2,fp
 80057b0:	40ffffc4 	addi	r3,r8,-1
 80057b4:	1700ad36 	bltu	r2,fp,8005a6c <__divdf3+0x774>
 80057b8:	1400ac2e 	bgeu	r2,r16,8005a6c <__divdf3+0x774>
 80057bc:	423fff84 	addi	r8,r8,-2
 80057c0:	1705883a 	add	r2,r2,fp
 80057c4:	1421c83a 	sub	r16,r2,r16
 80057c8:	a00b883a 	mov	r5,r20
 80057cc:	8009883a 	mov	r4,r16
 80057d0:	d9800315 	stw	r6,12(sp)
 80057d4:	d9c00215 	stw	r7,8(sp)
 80057d8:	da000015 	stw	r8,0(sp)
 80057dc:	da400115 	stw	r9,4(sp)
 80057e0:	80034900 	call	8003490 <__udivsi3>
 80057e4:	8009883a 	mov	r4,r16
 80057e8:	a00b883a 	mov	r5,r20
 80057ec:	1025883a 	mov	r18,r2
 80057f0:	80034f40 	call	80034f4 <__umodsi3>
 80057f4:	d9c00217 	ldw	r7,8(sp)
 80057f8:	1004943a 	slli	r2,r2,16
 80057fc:	bcaf383a 	mul	r23,r23,r18
 8005800:	393fffcc 	andi	r4,r7,65535
 8005804:	2088b03a 	or	r4,r4,r2
 8005808:	d9800317 	ldw	r6,12(sp)
 800580c:	da000017 	ldw	r8,0(sp)
 8005810:	da400117 	ldw	r9,4(sp)
 8005814:	25c0062e 	bgeu	r4,r23,8005830 <__divdf3+0x538>
 8005818:	2709883a 	add	r4,r4,fp
 800581c:	90bfffc4 	addi	r2,r18,-1
 8005820:	27009436 	bltu	r4,fp,8005a74 <__divdf3+0x77c>
 8005824:	25c0932e 	bgeu	r4,r23,8005a74 <__divdf3+0x77c>
 8005828:	94bfff84 	addi	r18,r18,-2
 800582c:	2709883a 	add	r4,r4,fp
 8005830:	4004943a 	slli	r2,r8,16
 8005834:	25efc83a 	sub	r23,r4,r23
 8005838:	1490b03a 	or	r8,r2,r18
 800583c:	4008d43a 	srli	r4,r8,16
 8005840:	40ffffcc 	andi	r3,r8,65535
 8005844:	30c5383a 	mul	r2,r6,r3
 8005848:	1a47383a 	mul	r3,r3,r9
 800584c:	310d383a 	mul	r6,r6,r4
 8005850:	100ad43a 	srli	r5,r2,16
 8005854:	4913383a 	mul	r9,r9,r4
 8005858:	1987883a 	add	r3,r3,r6
 800585c:	28c7883a 	add	r3,r5,r3
 8005860:	1980022e 	bgeu	r3,r6,800586c <__divdf3+0x574>
 8005864:	01000074 	movhi	r4,1
 8005868:	4913883a 	add	r9,r9,r4
 800586c:	1808d43a 	srli	r4,r3,16
 8005870:	1806943a 	slli	r3,r3,16
 8005874:	10bfffcc 	andi	r2,r2,65535
 8005878:	2253883a 	add	r9,r4,r9
 800587c:	1887883a 	add	r3,r3,r2
 8005880:	ba403836 	bltu	r23,r9,8005964 <__divdf3+0x66c>
 8005884:	ba403626 	beq	r23,r9,8005960 <__divdf3+0x668>
 8005888:	42000054 	ori	r8,r8,1
 800588c:	a880ffc4 	addi	r2,r21,1023
 8005890:	00bf570e 	bge	zero,r2,80055f0 <__alt_data_end+0xfc0055f0>
 8005894:	40c001cc 	andi	r3,r8,7
 8005898:	18000726 	beq	r3,zero,80058b8 <__divdf3+0x5c0>
 800589c:	40c003cc 	andi	r3,r8,15
 80058a0:	01000104 	movi	r4,4
 80058a4:	19000426 	beq	r3,r4,80058b8 <__divdf3+0x5c0>
 80058a8:	4107883a 	add	r3,r8,r4
 80058ac:	1a11803a 	cmpltu	r8,r3,r8
 80058b0:	8a23883a 	add	r17,r17,r8
 80058b4:	1811883a 	mov	r8,r3
 80058b8:	88c0402c 	andhi	r3,r17,256
 80058bc:	18000426 	beq	r3,zero,80058d0 <__divdf3+0x5d8>
 80058c0:	00ffc034 	movhi	r3,65280
 80058c4:	18ffffc4 	addi	r3,r3,-1
 80058c8:	a8810004 	addi	r2,r21,1024
 80058cc:	88e2703a 	and	r17,r17,r3
 80058d0:	00c1ff84 	movi	r3,2046
 80058d4:	18bee316 	blt	r3,r2,8005464 <__alt_data_end+0xfc005464>
 80058d8:	8824977a 	slli	r18,r17,29
 80058dc:	4010d0fa 	srli	r8,r8,3
 80058e0:	8822927a 	slli	r17,r17,9
 80058e4:	1081ffcc 	andi	r2,r2,2047
 80058e8:	9224b03a 	or	r18,r18,r8
 80058ec:	880ad33a 	srli	r5,r17,12
 80058f0:	98c0004c 	andi	r3,r19,1
 80058f4:	003edf06 	br	8005474 <__alt_data_end+0xfc005474>
 80058f8:	8080022c 	andhi	r2,r16,8
 80058fc:	10001226 	beq	r2,zero,8005948 <__divdf3+0x650>
 8005900:	8880022c 	andhi	r2,r17,8
 8005904:	1000101e 	bne	r2,zero,8005948 <__divdf3+0x650>
 8005908:	00800434 	movhi	r2,16
 800590c:	89400234 	orhi	r5,r17,8
 8005910:	10bfffc4 	addi	r2,r2,-1
 8005914:	b007883a 	mov	r3,r22
 8005918:	288a703a 	and	r5,r5,r2
 800591c:	4025883a 	mov	r18,r8
 8005920:	003f3106 	br	80055e8 <__alt_data_end+0xfc0055e8>
 8005924:	008000c4 	movi	r2,3
 8005928:	3880a626 	beq	r7,r2,8005bc4 <__divdf3+0x8cc>
 800592c:	00800044 	movi	r2,1
 8005930:	3880521e 	bne	r7,r2,8005a7c <__divdf3+0x784>
 8005934:	b807883a 	mov	r3,r23
 8005938:	0005883a 	mov	r2,zero
 800593c:	000b883a 	mov	r5,zero
 8005940:	0025883a 	mov	r18,zero
 8005944:	003ecb06 	br	8005474 <__alt_data_end+0xfc005474>
 8005948:	00800434 	movhi	r2,16
 800594c:	81400234 	orhi	r5,r16,8
 8005950:	10bfffc4 	addi	r2,r2,-1
 8005954:	a007883a 	mov	r3,r20
 8005958:	288a703a 	and	r5,r5,r2
 800595c:	003f2206 	br	80055e8 <__alt_data_end+0xfc0055e8>
 8005960:	183fca26 	beq	r3,zero,800588c <__alt_data_end+0xfc00588c>
 8005964:	e5ef883a 	add	r23,fp,r23
 8005968:	40bfffc4 	addi	r2,r8,-1
 800596c:	bf00392e 	bgeu	r23,fp,8005a54 <__divdf3+0x75c>
 8005970:	1011883a 	mov	r8,r2
 8005974:	ba7fc41e 	bne	r23,r9,8005888 <__alt_data_end+0xfc005888>
 8005978:	b0ffc31e 	bne	r22,r3,8005888 <__alt_data_end+0xfc005888>
 800597c:	003fc306 	br	800588c <__alt_data_end+0xfc00588c>
 8005980:	143ff604 	addi	r16,r2,-40
 8005984:	9c20983a 	sll	r16,r19,r16
 8005988:	0025883a 	mov	r18,zero
 800598c:	003ee206 	br	8005518 <__alt_data_end+0xfc005518>
 8005990:	d9800315 	stw	r6,12(sp)
 8005994:	d9c00215 	stw	r7,8(sp)
 8005998:	80072600 	call	8007260 <__clzsi2>
 800599c:	10800804 	addi	r2,r2,32
 80059a0:	d9c00217 	ldw	r7,8(sp)
 80059a4:	d9800317 	ldw	r6,12(sp)
 80059a8:	003ed106 	br	80054f0 <__alt_data_end+0xfc0054f0>
 80059ac:	147ff604 	addi	r17,r2,-40
 80059b0:	3462983a 	sll	r17,r6,r17
 80059b4:	0011883a 	mov	r8,zero
 80059b8:	003ef506 	br	8005590 <__alt_data_end+0xfc005590>
 80059bc:	3009883a 	mov	r4,r6
 80059c0:	d9800315 	stw	r6,12(sp)
 80059c4:	da400115 	stw	r9,4(sp)
 80059c8:	80072600 	call	8007260 <__clzsi2>
 80059cc:	10800804 	addi	r2,r2,32
 80059d0:	da400117 	ldw	r9,4(sp)
 80059d4:	d9800317 	ldw	r6,12(sp)
 80059d8:	003ee306 	br	8005568 <__alt_data_end+0xfc005568>
 80059dc:	85a1883a 	add	r16,r16,r22
 80059e0:	8585803a 	cmpltu	r2,r16,r22
 80059e4:	1705883a 	add	r2,r2,fp
 80059e8:	14a5883a 	add	r18,r2,r18
 80059ec:	88bfffc4 	addi	r2,r17,-1
 80059f0:	e4800c2e 	bgeu	fp,r18,8005a24 <__divdf3+0x72c>
 80059f4:	90c03e36 	bltu	r18,r3,8005af0 <__divdf3+0x7f8>
 80059f8:	1c806926 	beq	r3,r18,8005ba0 <__divdf3+0x8a8>
 80059fc:	90c7c83a 	sub	r3,r18,r3
 8005a00:	1023883a 	mov	r17,r2
 8005a04:	003f5206 	br	8005750 <__alt_data_end+0xfc005750>
 8005a08:	923f0436 	bltu	r18,r8,800561c <__alt_data_end+0xfc00561c>
 8005a0c:	800897fa 	slli	r4,r16,31
 8005a10:	9004d07a 	srli	r2,r18,1
 8005a14:	8006d07a 	srli	r3,r16,1
 8005a18:	902097fa 	slli	r16,r18,31
 8005a1c:	20a4b03a 	or	r18,r4,r2
 8005a20:	003f0106 	br	8005628 <__alt_data_end+0xfc005628>
 8005a24:	e4bff51e 	bne	fp,r18,80059fc <__alt_data_end+0xfc0059fc>
 8005a28:	85bff22e 	bgeu	r16,r22,80059f4 <__alt_data_end+0xfc0059f4>
 8005a2c:	e0c7c83a 	sub	r3,fp,r3
 8005a30:	1023883a 	mov	r17,r2
 8005a34:	003f4606 	br	8005750 <__alt_data_end+0xfc005750>
 8005a38:	100f883a 	mov	r7,r2
 8005a3c:	003f2b06 	br	80056ec <__alt_data_end+0xfc0056ec>
 8005a40:	180d883a 	mov	r6,r3
 8005a44:	003f1306 	br	8005694 <__alt_data_end+0xfc005694>
 8005a48:	813fe436 	bltu	r16,r4,80059dc <__alt_data_end+0xfc0059dc>
 8005a4c:	0007883a 	mov	r3,zero
 8005a50:	003f3f06 	br	8005750 <__alt_data_end+0xfc005750>
 8005a54:	ba402c36 	bltu	r23,r9,8005b08 <__divdf3+0x810>
 8005a58:	4dc05426 	beq	r9,r23,8005bac <__divdf3+0x8b4>
 8005a5c:	1011883a 	mov	r8,r2
 8005a60:	003f8906 	br	8005888 <__alt_data_end+0xfc005888>
 8005a64:	023fffc4 	movi	r8,-1
 8005a68:	003f8806 	br	800588c <__alt_data_end+0xfc00588c>
 8005a6c:	1811883a 	mov	r8,r3
 8005a70:	003f5406 	br	80057c4 <__alt_data_end+0xfc0057c4>
 8005a74:	1025883a 	mov	r18,r2
 8005a78:	003f6d06 	br	8005830 <__alt_data_end+0xfc005830>
 8005a7c:	b827883a 	mov	r19,r23
 8005a80:	003f8206 	br	800588c <__alt_data_end+0xfc00588c>
 8005a84:	010007c4 	movi	r4,31
 8005a88:	20c02616 	blt	r4,r3,8005b24 <__divdf3+0x82c>
 8005a8c:	00800804 	movi	r2,32
 8005a90:	10c5c83a 	sub	r2,r2,r3
 8005a94:	888a983a 	sll	r5,r17,r2
 8005a98:	40c8d83a 	srl	r4,r8,r3
 8005a9c:	4084983a 	sll	r2,r8,r2
 8005aa0:	88e2d83a 	srl	r17,r17,r3
 8005aa4:	2906b03a 	or	r3,r5,r4
 8005aa8:	1004c03a 	cmpne	r2,r2,zero
 8005aac:	1886b03a 	or	r3,r3,r2
 8005ab0:	188001cc 	andi	r2,r3,7
 8005ab4:	10000726 	beq	r2,zero,8005ad4 <__divdf3+0x7dc>
 8005ab8:	188003cc 	andi	r2,r3,15
 8005abc:	01000104 	movi	r4,4
 8005ac0:	11000426 	beq	r2,r4,8005ad4 <__divdf3+0x7dc>
 8005ac4:	1805883a 	mov	r2,r3
 8005ac8:	10c00104 	addi	r3,r2,4
 8005acc:	1885803a 	cmpltu	r2,r3,r2
 8005ad0:	88a3883a 	add	r17,r17,r2
 8005ad4:	8880202c 	andhi	r2,r17,128
 8005ad8:	10002726 	beq	r2,zero,8005b78 <__divdf3+0x880>
 8005adc:	98c0004c 	andi	r3,r19,1
 8005ae0:	00800044 	movi	r2,1
 8005ae4:	000b883a 	mov	r5,zero
 8005ae8:	0025883a 	mov	r18,zero
 8005aec:	003e6106 	br	8005474 <__alt_data_end+0xfc005474>
 8005af0:	85a1883a 	add	r16,r16,r22
 8005af4:	8585803a 	cmpltu	r2,r16,r22
 8005af8:	1705883a 	add	r2,r2,fp
 8005afc:	14a5883a 	add	r18,r2,r18
 8005b00:	8c7fff84 	addi	r17,r17,-2
 8005b04:	003f1106 	br	800574c <__alt_data_end+0xfc00574c>
 8005b08:	b589883a 	add	r4,r22,r22
 8005b0c:	25ad803a 	cmpltu	r22,r4,r22
 8005b10:	b739883a 	add	fp,r22,fp
 8005b14:	40bfff84 	addi	r2,r8,-2
 8005b18:	bf2f883a 	add	r23,r23,fp
 8005b1c:	202d883a 	mov	r22,r4
 8005b20:	003f9306 	br	8005970 <__alt_data_end+0xfc005970>
 8005b24:	013ff844 	movi	r4,-31
 8005b28:	2085c83a 	sub	r2,r4,r2
 8005b2c:	8888d83a 	srl	r4,r17,r2
 8005b30:	00800804 	movi	r2,32
 8005b34:	18802126 	beq	r3,r2,8005bbc <__divdf3+0x8c4>
 8005b38:	00801004 	movi	r2,64
 8005b3c:	10c5c83a 	sub	r2,r2,r3
 8005b40:	8884983a 	sll	r2,r17,r2
 8005b44:	1204b03a 	or	r2,r2,r8
 8005b48:	1004c03a 	cmpne	r2,r2,zero
 8005b4c:	2084b03a 	or	r2,r4,r2
 8005b50:	144001cc 	andi	r17,r2,7
 8005b54:	88000d1e 	bne	r17,zero,8005b8c <__divdf3+0x894>
 8005b58:	000b883a 	mov	r5,zero
 8005b5c:	1024d0fa 	srli	r18,r2,3
 8005b60:	98c0004c 	andi	r3,r19,1
 8005b64:	0005883a 	mov	r2,zero
 8005b68:	9464b03a 	or	r18,r18,r17
 8005b6c:	003e4106 	br	8005474 <__alt_data_end+0xfc005474>
 8005b70:	1007883a 	mov	r3,r2
 8005b74:	0023883a 	mov	r17,zero
 8005b78:	880a927a 	slli	r5,r17,9
 8005b7c:	1805883a 	mov	r2,r3
 8005b80:	8822977a 	slli	r17,r17,29
 8005b84:	280ad33a 	srli	r5,r5,12
 8005b88:	003ff406 	br	8005b5c <__alt_data_end+0xfc005b5c>
 8005b8c:	10c003cc 	andi	r3,r2,15
 8005b90:	01000104 	movi	r4,4
 8005b94:	193ff626 	beq	r3,r4,8005b70 <__alt_data_end+0xfc005b70>
 8005b98:	0023883a 	mov	r17,zero
 8005b9c:	003fca06 	br	8005ac8 <__alt_data_end+0xfc005ac8>
 8005ba0:	813fd336 	bltu	r16,r4,8005af0 <__alt_data_end+0xfc005af0>
 8005ba4:	1023883a 	mov	r17,r2
 8005ba8:	003fa806 	br	8005a4c <__alt_data_end+0xfc005a4c>
 8005bac:	b0ffd636 	bltu	r22,r3,8005b08 <__alt_data_end+0xfc005b08>
 8005bb0:	1011883a 	mov	r8,r2
 8005bb4:	b0ff341e 	bne	r22,r3,8005888 <__alt_data_end+0xfc005888>
 8005bb8:	003f3406 	br	800588c <__alt_data_end+0xfc00588c>
 8005bbc:	0005883a 	mov	r2,zero
 8005bc0:	003fe006 	br	8005b44 <__alt_data_end+0xfc005b44>
 8005bc4:	00800434 	movhi	r2,16
 8005bc8:	89400234 	orhi	r5,r17,8
 8005bcc:	10bfffc4 	addi	r2,r2,-1
 8005bd0:	b807883a 	mov	r3,r23
 8005bd4:	288a703a 	and	r5,r5,r2
 8005bd8:	4025883a 	mov	r18,r8
 8005bdc:	003e8206 	br	80055e8 <__alt_data_end+0xfc0055e8>

08005be0 <__eqdf2>:
 8005be0:	2804d53a 	srli	r2,r5,20
 8005be4:	3806d53a 	srli	r3,r7,20
 8005be8:	02000434 	movhi	r8,16
 8005bec:	423fffc4 	addi	r8,r8,-1
 8005bf0:	1081ffcc 	andi	r2,r2,2047
 8005bf4:	0281ffc4 	movi	r10,2047
 8005bf8:	2a12703a 	and	r9,r5,r8
 8005bfc:	18c1ffcc 	andi	r3,r3,2047
 8005c00:	3a10703a 	and	r8,r7,r8
 8005c04:	280ad7fa 	srli	r5,r5,31
 8005c08:	380ed7fa 	srli	r7,r7,31
 8005c0c:	12801026 	beq	r2,r10,8005c50 <__eqdf2+0x70>
 8005c10:	0281ffc4 	movi	r10,2047
 8005c14:	1a800a26 	beq	r3,r10,8005c40 <__eqdf2+0x60>
 8005c18:	10c00226 	beq	r2,r3,8005c24 <__eqdf2+0x44>
 8005c1c:	00800044 	movi	r2,1
 8005c20:	f800283a 	ret
 8005c24:	4a3ffd1e 	bne	r9,r8,8005c1c <__alt_data_end+0xfc005c1c>
 8005c28:	21bffc1e 	bne	r4,r6,8005c1c <__alt_data_end+0xfc005c1c>
 8005c2c:	29c00c26 	beq	r5,r7,8005c60 <__eqdf2+0x80>
 8005c30:	103ffa1e 	bne	r2,zero,8005c1c <__alt_data_end+0xfc005c1c>
 8005c34:	2244b03a 	or	r2,r4,r9
 8005c38:	1004c03a 	cmpne	r2,r2,zero
 8005c3c:	f800283a 	ret
 8005c40:	3214b03a 	or	r10,r6,r8
 8005c44:	503ff426 	beq	r10,zero,8005c18 <__alt_data_end+0xfc005c18>
 8005c48:	00800044 	movi	r2,1
 8005c4c:	f800283a 	ret
 8005c50:	2254b03a 	or	r10,r4,r9
 8005c54:	503fee26 	beq	r10,zero,8005c10 <__alt_data_end+0xfc005c10>
 8005c58:	00800044 	movi	r2,1
 8005c5c:	f800283a 	ret
 8005c60:	0005883a 	mov	r2,zero
 8005c64:	f800283a 	ret

08005c68 <__gedf2>:
 8005c68:	2804d53a 	srli	r2,r5,20
 8005c6c:	3806d53a 	srli	r3,r7,20
 8005c70:	02000434 	movhi	r8,16
 8005c74:	423fffc4 	addi	r8,r8,-1
 8005c78:	1081ffcc 	andi	r2,r2,2047
 8005c7c:	0241ffc4 	movi	r9,2047
 8005c80:	2a14703a 	and	r10,r5,r8
 8005c84:	18c1ffcc 	andi	r3,r3,2047
 8005c88:	3a10703a 	and	r8,r7,r8
 8005c8c:	280ad7fa 	srli	r5,r5,31
 8005c90:	380ed7fa 	srli	r7,r7,31
 8005c94:	12401d26 	beq	r2,r9,8005d0c <__gedf2+0xa4>
 8005c98:	0241ffc4 	movi	r9,2047
 8005c9c:	1a401226 	beq	r3,r9,8005ce8 <__gedf2+0x80>
 8005ca0:	1000081e 	bne	r2,zero,8005cc4 <__gedf2+0x5c>
 8005ca4:	2296b03a 	or	r11,r4,r10
 8005ca8:	5813003a 	cmpeq	r9,r11,zero
 8005cac:	1800091e 	bne	r3,zero,8005cd4 <__gedf2+0x6c>
 8005cb0:	3218b03a 	or	r12,r6,r8
 8005cb4:	6000071e 	bne	r12,zero,8005cd4 <__gedf2+0x6c>
 8005cb8:	0005883a 	mov	r2,zero
 8005cbc:	5800101e 	bne	r11,zero,8005d00 <__gedf2+0x98>
 8005cc0:	f800283a 	ret
 8005cc4:	18000c1e 	bne	r3,zero,8005cf8 <__gedf2+0x90>
 8005cc8:	3212b03a 	or	r9,r6,r8
 8005ccc:	48000c26 	beq	r9,zero,8005d00 <__gedf2+0x98>
 8005cd0:	0013883a 	mov	r9,zero
 8005cd4:	39c03fcc 	andi	r7,r7,255
 8005cd8:	48000826 	beq	r9,zero,8005cfc <__gedf2+0x94>
 8005cdc:	38000926 	beq	r7,zero,8005d04 <__gedf2+0x9c>
 8005ce0:	00800044 	movi	r2,1
 8005ce4:	f800283a 	ret
 8005ce8:	3212b03a 	or	r9,r6,r8
 8005cec:	483fec26 	beq	r9,zero,8005ca0 <__alt_data_end+0xfc005ca0>
 8005cf0:	00bfff84 	movi	r2,-2
 8005cf4:	f800283a 	ret
 8005cf8:	39c03fcc 	andi	r7,r7,255
 8005cfc:	29c00626 	beq	r5,r7,8005d18 <__gedf2+0xb0>
 8005d00:	283ff726 	beq	r5,zero,8005ce0 <__alt_data_end+0xfc005ce0>
 8005d04:	00bfffc4 	movi	r2,-1
 8005d08:	f800283a 	ret
 8005d0c:	2292b03a 	or	r9,r4,r10
 8005d10:	483fe126 	beq	r9,zero,8005c98 <__alt_data_end+0xfc005c98>
 8005d14:	003ff606 	br	8005cf0 <__alt_data_end+0xfc005cf0>
 8005d18:	18bff916 	blt	r3,r2,8005d00 <__alt_data_end+0xfc005d00>
 8005d1c:	10c00316 	blt	r2,r3,8005d2c <__gedf2+0xc4>
 8005d20:	42bff736 	bltu	r8,r10,8005d00 <__alt_data_end+0xfc005d00>
 8005d24:	52000326 	beq	r10,r8,8005d34 <__gedf2+0xcc>
 8005d28:	5200042e 	bgeu	r10,r8,8005d3c <__gedf2+0xd4>
 8005d2c:	283fec1e 	bne	r5,zero,8005ce0 <__alt_data_end+0xfc005ce0>
 8005d30:	003ff406 	br	8005d04 <__alt_data_end+0xfc005d04>
 8005d34:	313ff236 	bltu	r6,r4,8005d00 <__alt_data_end+0xfc005d00>
 8005d38:	21bffc36 	bltu	r4,r6,8005d2c <__alt_data_end+0xfc005d2c>
 8005d3c:	0005883a 	mov	r2,zero
 8005d40:	f800283a 	ret

08005d44 <__ledf2>:
 8005d44:	2804d53a 	srli	r2,r5,20
 8005d48:	3810d53a 	srli	r8,r7,20
 8005d4c:	00c00434 	movhi	r3,16
 8005d50:	18ffffc4 	addi	r3,r3,-1
 8005d54:	1081ffcc 	andi	r2,r2,2047
 8005d58:	0241ffc4 	movi	r9,2047
 8005d5c:	28d4703a 	and	r10,r5,r3
 8005d60:	4201ffcc 	andi	r8,r8,2047
 8005d64:	38c6703a 	and	r3,r7,r3
 8005d68:	280ad7fa 	srli	r5,r5,31
 8005d6c:	380ed7fa 	srli	r7,r7,31
 8005d70:	12401f26 	beq	r2,r9,8005df0 <__ledf2+0xac>
 8005d74:	0241ffc4 	movi	r9,2047
 8005d78:	42401426 	beq	r8,r9,8005dcc <__ledf2+0x88>
 8005d7c:	1000091e 	bne	r2,zero,8005da4 <__ledf2+0x60>
 8005d80:	2296b03a 	or	r11,r4,r10
 8005d84:	5813003a 	cmpeq	r9,r11,zero
 8005d88:	29403fcc 	andi	r5,r5,255
 8005d8c:	40000a1e 	bne	r8,zero,8005db8 <__ledf2+0x74>
 8005d90:	30d8b03a 	or	r12,r6,r3
 8005d94:	6000081e 	bne	r12,zero,8005db8 <__ledf2+0x74>
 8005d98:	0005883a 	mov	r2,zero
 8005d9c:	5800111e 	bne	r11,zero,8005de4 <__ledf2+0xa0>
 8005da0:	f800283a 	ret
 8005da4:	29403fcc 	andi	r5,r5,255
 8005da8:	40000c1e 	bne	r8,zero,8005ddc <__ledf2+0x98>
 8005dac:	30d2b03a 	or	r9,r6,r3
 8005db0:	48000c26 	beq	r9,zero,8005de4 <__ledf2+0xa0>
 8005db4:	0013883a 	mov	r9,zero
 8005db8:	39c03fcc 	andi	r7,r7,255
 8005dbc:	48000826 	beq	r9,zero,8005de0 <__ledf2+0x9c>
 8005dc0:	38001126 	beq	r7,zero,8005e08 <__ledf2+0xc4>
 8005dc4:	00800044 	movi	r2,1
 8005dc8:	f800283a 	ret
 8005dcc:	30d2b03a 	or	r9,r6,r3
 8005dd0:	483fea26 	beq	r9,zero,8005d7c <__alt_data_end+0xfc005d7c>
 8005dd4:	00800084 	movi	r2,2
 8005dd8:	f800283a 	ret
 8005ddc:	39c03fcc 	andi	r7,r7,255
 8005de0:	39400726 	beq	r7,r5,8005e00 <__ledf2+0xbc>
 8005de4:	2800081e 	bne	r5,zero,8005e08 <__ledf2+0xc4>
 8005de8:	00800044 	movi	r2,1
 8005dec:	f800283a 	ret
 8005df0:	2292b03a 	or	r9,r4,r10
 8005df4:	483fdf26 	beq	r9,zero,8005d74 <__alt_data_end+0xfc005d74>
 8005df8:	00800084 	movi	r2,2
 8005dfc:	f800283a 	ret
 8005e00:	4080030e 	bge	r8,r2,8005e10 <__ledf2+0xcc>
 8005e04:	383fef26 	beq	r7,zero,8005dc4 <__alt_data_end+0xfc005dc4>
 8005e08:	00bfffc4 	movi	r2,-1
 8005e0c:	f800283a 	ret
 8005e10:	123feb16 	blt	r2,r8,8005dc0 <__alt_data_end+0xfc005dc0>
 8005e14:	1abff336 	bltu	r3,r10,8005de4 <__alt_data_end+0xfc005de4>
 8005e18:	50c00326 	beq	r10,r3,8005e28 <__ledf2+0xe4>
 8005e1c:	50c0042e 	bgeu	r10,r3,8005e30 <__ledf2+0xec>
 8005e20:	283fe81e 	bne	r5,zero,8005dc4 <__alt_data_end+0xfc005dc4>
 8005e24:	003ff806 	br	8005e08 <__alt_data_end+0xfc005e08>
 8005e28:	313fee36 	bltu	r6,r4,8005de4 <__alt_data_end+0xfc005de4>
 8005e2c:	21bffc36 	bltu	r4,r6,8005e20 <__alt_data_end+0xfc005e20>
 8005e30:	0005883a 	mov	r2,zero
 8005e34:	f800283a 	ret

08005e38 <__muldf3>:
 8005e38:	defff304 	addi	sp,sp,-52
 8005e3c:	2804d53a 	srli	r2,r5,20
 8005e40:	dd800915 	stw	r22,36(sp)
 8005e44:	282cd7fa 	srli	r22,r5,31
 8005e48:	dc000315 	stw	r16,12(sp)
 8005e4c:	04000434 	movhi	r16,16
 8005e50:	dd400815 	stw	r21,32(sp)
 8005e54:	dc800515 	stw	r18,20(sp)
 8005e58:	843fffc4 	addi	r16,r16,-1
 8005e5c:	dfc00c15 	stw	ra,48(sp)
 8005e60:	df000b15 	stw	fp,44(sp)
 8005e64:	ddc00a15 	stw	r23,40(sp)
 8005e68:	dd000715 	stw	r20,28(sp)
 8005e6c:	dcc00615 	stw	r19,24(sp)
 8005e70:	dc400415 	stw	r17,16(sp)
 8005e74:	1481ffcc 	andi	r18,r2,2047
 8005e78:	2c20703a 	and	r16,r5,r16
 8005e7c:	b02b883a 	mov	r21,r22
 8005e80:	b2403fcc 	andi	r9,r22,255
 8005e84:	90006026 	beq	r18,zero,8006008 <__muldf3+0x1d0>
 8005e88:	0081ffc4 	movi	r2,2047
 8005e8c:	2029883a 	mov	r20,r4
 8005e90:	90803626 	beq	r18,r2,8005f6c <__muldf3+0x134>
 8005e94:	80800434 	orhi	r2,r16,16
 8005e98:	100490fa 	slli	r2,r2,3
 8005e9c:	2020d77a 	srli	r16,r4,29
 8005ea0:	202890fa 	slli	r20,r4,3
 8005ea4:	94bf0044 	addi	r18,r18,-1023
 8005ea8:	80a0b03a 	or	r16,r16,r2
 8005eac:	0027883a 	mov	r19,zero
 8005eb0:	0039883a 	mov	fp,zero
 8005eb4:	3804d53a 	srli	r2,r7,20
 8005eb8:	382ed7fa 	srli	r23,r7,31
 8005ebc:	04400434 	movhi	r17,16
 8005ec0:	8c7fffc4 	addi	r17,r17,-1
 8005ec4:	1081ffcc 	andi	r2,r2,2047
 8005ec8:	3011883a 	mov	r8,r6
 8005ecc:	3c62703a 	and	r17,r7,r17
 8005ed0:	ba803fcc 	andi	r10,r23,255
 8005ed4:	10006d26 	beq	r2,zero,800608c <__muldf3+0x254>
 8005ed8:	00c1ffc4 	movi	r3,2047
 8005edc:	10c06526 	beq	r2,r3,8006074 <__muldf3+0x23c>
 8005ee0:	88c00434 	orhi	r3,r17,16
 8005ee4:	180690fa 	slli	r3,r3,3
 8005ee8:	3022d77a 	srli	r17,r6,29
 8005eec:	301090fa 	slli	r8,r6,3
 8005ef0:	10bf0044 	addi	r2,r2,-1023
 8005ef4:	88e2b03a 	or	r17,r17,r3
 8005ef8:	000b883a 	mov	r5,zero
 8005efc:	9085883a 	add	r2,r18,r2
 8005f00:	2cc8b03a 	or	r4,r5,r19
 8005f04:	00c003c4 	movi	r3,15
 8005f08:	bdacf03a 	xor	r22,r23,r22
 8005f0c:	12c00044 	addi	r11,r2,1
 8005f10:	19009936 	bltu	r3,r4,8006178 <__muldf3+0x340>
 8005f14:	200890ba 	slli	r4,r4,2
 8005f18:	00c20034 	movhi	r3,2048
 8005f1c:	18d7cb04 	addi	r3,r3,24364
 8005f20:	20c9883a 	add	r4,r4,r3
 8005f24:	20c00017 	ldw	r3,0(r4)
 8005f28:	1800683a 	jmp	r3
 8005f2c:	08006178 	rdprs	zero,at,389
 8005f30:	08005f8c 	andi	zero,at,382
 8005f34:	08005f8c 	andi	zero,at,382
 8005f38:	08005f88 	cmpgei	zero,at,382
 8005f3c:	08006154 	ori	zero,at,389
 8005f40:	08006154 	ori	zero,at,389
 8005f44:	0800613c 	xorhi	zero,at,388
 8005f48:	08005f88 	cmpgei	zero,at,382
 8005f4c:	08006154 	ori	zero,at,389
 8005f50:	0800613c 	xorhi	zero,at,388
 8005f54:	08006154 	ori	zero,at,389
 8005f58:	08005f88 	cmpgei	zero,at,382
 8005f5c:	08006164 	muli	zero,at,389
 8005f60:	08006164 	muli	zero,at,389
 8005f64:	08006164 	muli	zero,at,389
 8005f68:	08006380 	call	800638 <__ram_exceptions_end+0x7e03f0>
 8005f6c:	2404b03a 	or	r2,r4,r16
 8005f70:	10006f1e 	bne	r2,zero,8006130 <__muldf3+0x2f8>
 8005f74:	04c00204 	movi	r19,8
 8005f78:	0021883a 	mov	r16,zero
 8005f7c:	0029883a 	mov	r20,zero
 8005f80:	07000084 	movi	fp,2
 8005f84:	003fcb06 	br	8005eb4 <__alt_data_end+0xfc005eb4>
 8005f88:	502d883a 	mov	r22,r10
 8005f8c:	00800084 	movi	r2,2
 8005f90:	28805726 	beq	r5,r2,80060f0 <__muldf3+0x2b8>
 8005f94:	008000c4 	movi	r2,3
 8005f98:	28816626 	beq	r5,r2,8006534 <__muldf3+0x6fc>
 8005f9c:	00800044 	movi	r2,1
 8005fa0:	2881411e 	bne	r5,r2,80064a8 <__muldf3+0x670>
 8005fa4:	b02b883a 	mov	r21,r22
 8005fa8:	0005883a 	mov	r2,zero
 8005fac:	000b883a 	mov	r5,zero
 8005fb0:	0029883a 	mov	r20,zero
 8005fb4:	1004953a 	slli	r2,r2,20
 8005fb8:	a8c03fcc 	andi	r3,r21,255
 8005fbc:	04400434 	movhi	r17,16
 8005fc0:	8c7fffc4 	addi	r17,r17,-1
 8005fc4:	180697fa 	slli	r3,r3,31
 8005fc8:	2c4a703a 	and	r5,r5,r17
 8005fcc:	288ab03a 	or	r5,r5,r2
 8005fd0:	28c6b03a 	or	r3,r5,r3
 8005fd4:	a005883a 	mov	r2,r20
 8005fd8:	dfc00c17 	ldw	ra,48(sp)
 8005fdc:	df000b17 	ldw	fp,44(sp)
 8005fe0:	ddc00a17 	ldw	r23,40(sp)
 8005fe4:	dd800917 	ldw	r22,36(sp)
 8005fe8:	dd400817 	ldw	r21,32(sp)
 8005fec:	dd000717 	ldw	r20,28(sp)
 8005ff0:	dcc00617 	ldw	r19,24(sp)
 8005ff4:	dc800517 	ldw	r18,20(sp)
 8005ff8:	dc400417 	ldw	r17,16(sp)
 8005ffc:	dc000317 	ldw	r16,12(sp)
 8006000:	dec00d04 	addi	sp,sp,52
 8006004:	f800283a 	ret
 8006008:	2404b03a 	or	r2,r4,r16
 800600c:	2027883a 	mov	r19,r4
 8006010:	10004226 	beq	r2,zero,800611c <__muldf3+0x2e4>
 8006014:	8000fc26 	beq	r16,zero,8006408 <__muldf3+0x5d0>
 8006018:	8009883a 	mov	r4,r16
 800601c:	d9800215 	stw	r6,8(sp)
 8006020:	d9c00015 	stw	r7,0(sp)
 8006024:	da400115 	stw	r9,4(sp)
 8006028:	80072600 	call	8007260 <__clzsi2>
 800602c:	d9800217 	ldw	r6,8(sp)
 8006030:	d9c00017 	ldw	r7,0(sp)
 8006034:	da400117 	ldw	r9,4(sp)
 8006038:	113ffd44 	addi	r4,r2,-11
 800603c:	00c00704 	movi	r3,28
 8006040:	1900ed16 	blt	r3,r4,80063f8 <__muldf3+0x5c0>
 8006044:	00c00744 	movi	r3,29
 8006048:	147ffe04 	addi	r17,r2,-8
 800604c:	1907c83a 	sub	r3,r3,r4
 8006050:	8460983a 	sll	r16,r16,r17
 8006054:	98c6d83a 	srl	r3,r19,r3
 8006058:	9c68983a 	sll	r20,r19,r17
 800605c:	1c20b03a 	or	r16,r3,r16
 8006060:	1080fcc4 	addi	r2,r2,1011
 8006064:	00a5c83a 	sub	r18,zero,r2
 8006068:	0027883a 	mov	r19,zero
 800606c:	0039883a 	mov	fp,zero
 8006070:	003f9006 	br	8005eb4 <__alt_data_end+0xfc005eb4>
 8006074:	3446b03a 	or	r3,r6,r17
 8006078:	1800261e 	bne	r3,zero,8006114 <__muldf3+0x2dc>
 800607c:	0023883a 	mov	r17,zero
 8006080:	0011883a 	mov	r8,zero
 8006084:	01400084 	movi	r5,2
 8006088:	003f9c06 	br	8005efc <__alt_data_end+0xfc005efc>
 800608c:	3446b03a 	or	r3,r6,r17
 8006090:	18001c26 	beq	r3,zero,8006104 <__muldf3+0x2cc>
 8006094:	8800ce26 	beq	r17,zero,80063d0 <__muldf3+0x598>
 8006098:	8809883a 	mov	r4,r17
 800609c:	d9800215 	stw	r6,8(sp)
 80060a0:	da400115 	stw	r9,4(sp)
 80060a4:	da800015 	stw	r10,0(sp)
 80060a8:	80072600 	call	8007260 <__clzsi2>
 80060ac:	d9800217 	ldw	r6,8(sp)
 80060b0:	da400117 	ldw	r9,4(sp)
 80060b4:	da800017 	ldw	r10,0(sp)
 80060b8:	113ffd44 	addi	r4,r2,-11
 80060bc:	00c00704 	movi	r3,28
 80060c0:	1900bf16 	blt	r3,r4,80063c0 <__muldf3+0x588>
 80060c4:	00c00744 	movi	r3,29
 80060c8:	123ffe04 	addi	r8,r2,-8
 80060cc:	1907c83a 	sub	r3,r3,r4
 80060d0:	8a22983a 	sll	r17,r17,r8
 80060d4:	30c6d83a 	srl	r3,r6,r3
 80060d8:	3210983a 	sll	r8,r6,r8
 80060dc:	1c62b03a 	or	r17,r3,r17
 80060e0:	1080fcc4 	addi	r2,r2,1011
 80060e4:	0085c83a 	sub	r2,zero,r2
 80060e8:	000b883a 	mov	r5,zero
 80060ec:	003f8306 	br	8005efc <__alt_data_end+0xfc005efc>
 80060f0:	b02b883a 	mov	r21,r22
 80060f4:	0081ffc4 	movi	r2,2047
 80060f8:	000b883a 	mov	r5,zero
 80060fc:	0029883a 	mov	r20,zero
 8006100:	003fac06 	br	8005fb4 <__alt_data_end+0xfc005fb4>
 8006104:	0023883a 	mov	r17,zero
 8006108:	0011883a 	mov	r8,zero
 800610c:	01400044 	movi	r5,1
 8006110:	003f7a06 	br	8005efc <__alt_data_end+0xfc005efc>
 8006114:	014000c4 	movi	r5,3
 8006118:	003f7806 	br	8005efc <__alt_data_end+0xfc005efc>
 800611c:	04c00104 	movi	r19,4
 8006120:	0021883a 	mov	r16,zero
 8006124:	0029883a 	mov	r20,zero
 8006128:	07000044 	movi	fp,1
 800612c:	003f6106 	br	8005eb4 <__alt_data_end+0xfc005eb4>
 8006130:	04c00304 	movi	r19,12
 8006134:	070000c4 	movi	fp,3
 8006138:	003f5e06 	br	8005eb4 <__alt_data_end+0xfc005eb4>
 800613c:	01400434 	movhi	r5,16
 8006140:	002b883a 	mov	r21,zero
 8006144:	297fffc4 	addi	r5,r5,-1
 8006148:	053fffc4 	movi	r20,-1
 800614c:	0081ffc4 	movi	r2,2047
 8006150:	003f9806 	br	8005fb4 <__alt_data_end+0xfc005fb4>
 8006154:	8023883a 	mov	r17,r16
 8006158:	a011883a 	mov	r8,r20
 800615c:	e00b883a 	mov	r5,fp
 8006160:	003f8a06 	br	8005f8c <__alt_data_end+0xfc005f8c>
 8006164:	8023883a 	mov	r17,r16
 8006168:	a011883a 	mov	r8,r20
 800616c:	482d883a 	mov	r22,r9
 8006170:	e00b883a 	mov	r5,fp
 8006174:	003f8506 	br	8005f8c <__alt_data_end+0xfc005f8c>
 8006178:	a00ad43a 	srli	r5,r20,16
 800617c:	401ad43a 	srli	r13,r8,16
 8006180:	a53fffcc 	andi	r20,r20,65535
 8006184:	423fffcc 	andi	r8,r8,65535
 8006188:	4519383a 	mul	r12,r8,r20
 800618c:	4147383a 	mul	r3,r8,r5
 8006190:	6d09383a 	mul	r4,r13,r20
 8006194:	600cd43a 	srli	r6,r12,16
 8006198:	2b5d383a 	mul	r14,r5,r13
 800619c:	20c9883a 	add	r4,r4,r3
 80061a0:	310d883a 	add	r6,r6,r4
 80061a4:	30c0022e 	bgeu	r6,r3,80061b0 <__muldf3+0x378>
 80061a8:	00c00074 	movhi	r3,1
 80061ac:	70dd883a 	add	r14,r14,r3
 80061b0:	8826d43a 	srli	r19,r17,16
 80061b4:	8bffffcc 	andi	r15,r17,65535
 80061b8:	7d23383a 	mul	r17,r15,r20
 80061bc:	7949383a 	mul	r4,r15,r5
 80061c0:	9d29383a 	mul	r20,r19,r20
 80061c4:	8814d43a 	srli	r10,r17,16
 80061c8:	3012943a 	slli	r9,r6,16
 80061cc:	a129883a 	add	r20,r20,r4
 80061d0:	633fffcc 	andi	r12,r12,65535
 80061d4:	5515883a 	add	r10,r10,r20
 80061d8:	3006d43a 	srli	r3,r6,16
 80061dc:	4b13883a 	add	r9,r9,r12
 80061e0:	2ccb383a 	mul	r5,r5,r19
 80061e4:	5100022e 	bgeu	r10,r4,80061f0 <__muldf3+0x3b8>
 80061e8:	01000074 	movhi	r4,1
 80061ec:	290b883a 	add	r5,r5,r4
 80061f0:	802ad43a 	srli	r21,r16,16
 80061f4:	843fffcc 	andi	r16,r16,65535
 80061f8:	440d383a 	mul	r6,r8,r16
 80061fc:	4565383a 	mul	r18,r8,r21
 8006200:	8349383a 	mul	r4,r16,r13
 8006204:	500e943a 	slli	r7,r10,16
 8006208:	3010d43a 	srli	r8,r6,16
 800620c:	5028d43a 	srli	r20,r10,16
 8006210:	2489883a 	add	r4,r4,r18
 8006214:	8abfffcc 	andi	r10,r17,65535
 8006218:	3a95883a 	add	r10,r7,r10
 800621c:	4119883a 	add	r12,r8,r4
 8006220:	a169883a 	add	r20,r20,r5
 8006224:	1a87883a 	add	r3,r3,r10
 8006228:	6d5b383a 	mul	r13,r13,r21
 800622c:	6480022e 	bgeu	r12,r18,8006238 <__muldf3+0x400>
 8006230:	01000074 	movhi	r4,1
 8006234:	691b883a 	add	r13,r13,r4
 8006238:	7c25383a 	mul	r18,r15,r16
 800623c:	7d4b383a 	mul	r5,r15,r21
 8006240:	84cf383a 	mul	r7,r16,r19
 8006244:	901ed43a 	srli	r15,r18,16
 8006248:	6008d43a 	srli	r4,r12,16
 800624c:	6010943a 	slli	r8,r12,16
 8006250:	394f883a 	add	r7,r7,r5
 8006254:	333fffcc 	andi	r12,r6,65535
 8006258:	79df883a 	add	r15,r15,r7
 800625c:	235b883a 	add	r13,r4,r13
 8006260:	9d63383a 	mul	r17,r19,r21
 8006264:	4309883a 	add	r4,r8,r12
 8006268:	7940022e 	bgeu	r15,r5,8006274 <__muldf3+0x43c>
 800626c:	01400074 	movhi	r5,1
 8006270:	8963883a 	add	r17,r17,r5
 8006274:	780a943a 	slli	r5,r15,16
 8006278:	91bfffcc 	andi	r6,r18,65535
 800627c:	70c7883a 	add	r3,r14,r3
 8006280:	298d883a 	add	r6,r5,r6
 8006284:	1a8f803a 	cmpltu	r7,r3,r10
 8006288:	350b883a 	add	r5,r6,r20
 800628c:	20c7883a 	add	r3,r4,r3
 8006290:	3955883a 	add	r10,r7,r5
 8006294:	1909803a 	cmpltu	r4,r3,r4
 8006298:	6a91883a 	add	r8,r13,r10
 800629c:	780cd43a 	srli	r6,r15,16
 80062a0:	2219883a 	add	r12,r4,r8
 80062a4:	2d0b803a 	cmpltu	r5,r5,r20
 80062a8:	51cf803a 	cmpltu	r7,r10,r7
 80062ac:	29ceb03a 	or	r7,r5,r7
 80062b0:	4351803a 	cmpltu	r8,r8,r13
 80062b4:	610b803a 	cmpltu	r5,r12,r4
 80062b8:	4148b03a 	or	r4,r8,r5
 80062bc:	398f883a 	add	r7,r7,r6
 80062c0:	3909883a 	add	r4,r7,r4
 80062c4:	1810927a 	slli	r8,r3,9
 80062c8:	2449883a 	add	r4,r4,r17
 80062cc:	2008927a 	slli	r4,r4,9
 80062d0:	6022d5fa 	srli	r17,r12,23
 80062d4:	1806d5fa 	srli	r3,r3,23
 80062d8:	4252b03a 	or	r9,r8,r9
 80062dc:	600a927a 	slli	r5,r12,9
 80062e0:	4810c03a 	cmpne	r8,r9,zero
 80062e4:	2462b03a 	or	r17,r4,r17
 80062e8:	40c6b03a 	or	r3,r8,r3
 80062ec:	8900402c 	andhi	r4,r17,256
 80062f0:	1950b03a 	or	r8,r3,r5
 80062f4:	20000726 	beq	r4,zero,8006314 <__muldf3+0x4dc>
 80062f8:	4006d07a 	srli	r3,r8,1
 80062fc:	880497fa 	slli	r2,r17,31
 8006300:	4200004c 	andi	r8,r8,1
 8006304:	8822d07a 	srli	r17,r17,1
 8006308:	1a10b03a 	or	r8,r3,r8
 800630c:	1210b03a 	or	r8,r2,r8
 8006310:	5805883a 	mov	r2,r11
 8006314:	1140ffc4 	addi	r5,r2,1023
 8006318:	0140440e 	bge	zero,r5,800642c <__muldf3+0x5f4>
 800631c:	40c001cc 	andi	r3,r8,7
 8006320:	18000726 	beq	r3,zero,8006340 <__muldf3+0x508>
 8006324:	40c003cc 	andi	r3,r8,15
 8006328:	01000104 	movi	r4,4
 800632c:	19000426 	beq	r3,r4,8006340 <__muldf3+0x508>
 8006330:	4107883a 	add	r3,r8,r4
 8006334:	1a11803a 	cmpltu	r8,r3,r8
 8006338:	8a23883a 	add	r17,r17,r8
 800633c:	1811883a 	mov	r8,r3
 8006340:	88c0402c 	andhi	r3,r17,256
 8006344:	18000426 	beq	r3,zero,8006358 <__muldf3+0x520>
 8006348:	11410004 	addi	r5,r2,1024
 800634c:	00bfc034 	movhi	r2,65280
 8006350:	10bfffc4 	addi	r2,r2,-1
 8006354:	88a2703a 	and	r17,r17,r2
 8006358:	0081ff84 	movi	r2,2046
 800635c:	117f6416 	blt	r2,r5,80060f0 <__alt_data_end+0xfc0060f0>
 8006360:	8828977a 	slli	r20,r17,29
 8006364:	4010d0fa 	srli	r8,r8,3
 8006368:	8822927a 	slli	r17,r17,9
 800636c:	2881ffcc 	andi	r2,r5,2047
 8006370:	a228b03a 	or	r20,r20,r8
 8006374:	880ad33a 	srli	r5,r17,12
 8006378:	b02b883a 	mov	r21,r22
 800637c:	003f0d06 	br	8005fb4 <__alt_data_end+0xfc005fb4>
 8006380:	8080022c 	andhi	r2,r16,8
 8006384:	10000926 	beq	r2,zero,80063ac <__muldf3+0x574>
 8006388:	8880022c 	andhi	r2,r17,8
 800638c:	1000071e 	bne	r2,zero,80063ac <__muldf3+0x574>
 8006390:	00800434 	movhi	r2,16
 8006394:	89400234 	orhi	r5,r17,8
 8006398:	10bfffc4 	addi	r2,r2,-1
 800639c:	b82b883a 	mov	r21,r23
 80063a0:	288a703a 	and	r5,r5,r2
 80063a4:	4029883a 	mov	r20,r8
 80063a8:	003f6806 	br	800614c <__alt_data_end+0xfc00614c>
 80063ac:	00800434 	movhi	r2,16
 80063b0:	81400234 	orhi	r5,r16,8
 80063b4:	10bfffc4 	addi	r2,r2,-1
 80063b8:	288a703a 	and	r5,r5,r2
 80063bc:	003f6306 	br	800614c <__alt_data_end+0xfc00614c>
 80063c0:	147ff604 	addi	r17,r2,-40
 80063c4:	3462983a 	sll	r17,r6,r17
 80063c8:	0011883a 	mov	r8,zero
 80063cc:	003f4406 	br	80060e0 <__alt_data_end+0xfc0060e0>
 80063d0:	3009883a 	mov	r4,r6
 80063d4:	d9800215 	stw	r6,8(sp)
 80063d8:	da400115 	stw	r9,4(sp)
 80063dc:	da800015 	stw	r10,0(sp)
 80063e0:	80072600 	call	8007260 <__clzsi2>
 80063e4:	10800804 	addi	r2,r2,32
 80063e8:	da800017 	ldw	r10,0(sp)
 80063ec:	da400117 	ldw	r9,4(sp)
 80063f0:	d9800217 	ldw	r6,8(sp)
 80063f4:	003f3006 	br	80060b8 <__alt_data_end+0xfc0060b8>
 80063f8:	143ff604 	addi	r16,r2,-40
 80063fc:	9c20983a 	sll	r16,r19,r16
 8006400:	0029883a 	mov	r20,zero
 8006404:	003f1606 	br	8006060 <__alt_data_end+0xfc006060>
 8006408:	d9800215 	stw	r6,8(sp)
 800640c:	d9c00015 	stw	r7,0(sp)
 8006410:	da400115 	stw	r9,4(sp)
 8006414:	80072600 	call	8007260 <__clzsi2>
 8006418:	10800804 	addi	r2,r2,32
 800641c:	da400117 	ldw	r9,4(sp)
 8006420:	d9c00017 	ldw	r7,0(sp)
 8006424:	d9800217 	ldw	r6,8(sp)
 8006428:	003f0306 	br	8006038 <__alt_data_end+0xfc006038>
 800642c:	00c00044 	movi	r3,1
 8006430:	1947c83a 	sub	r3,r3,r5
 8006434:	00800e04 	movi	r2,56
 8006438:	10feda16 	blt	r2,r3,8005fa4 <__alt_data_end+0xfc005fa4>
 800643c:	008007c4 	movi	r2,31
 8006440:	10c01b16 	blt	r2,r3,80064b0 <__muldf3+0x678>
 8006444:	00800804 	movi	r2,32
 8006448:	10c5c83a 	sub	r2,r2,r3
 800644c:	888a983a 	sll	r5,r17,r2
 8006450:	40c8d83a 	srl	r4,r8,r3
 8006454:	4084983a 	sll	r2,r8,r2
 8006458:	88e2d83a 	srl	r17,r17,r3
 800645c:	2906b03a 	or	r3,r5,r4
 8006460:	1004c03a 	cmpne	r2,r2,zero
 8006464:	1886b03a 	or	r3,r3,r2
 8006468:	188001cc 	andi	r2,r3,7
 800646c:	10000726 	beq	r2,zero,800648c <__muldf3+0x654>
 8006470:	188003cc 	andi	r2,r3,15
 8006474:	01000104 	movi	r4,4
 8006478:	11000426 	beq	r2,r4,800648c <__muldf3+0x654>
 800647c:	1805883a 	mov	r2,r3
 8006480:	10c00104 	addi	r3,r2,4
 8006484:	1885803a 	cmpltu	r2,r3,r2
 8006488:	88a3883a 	add	r17,r17,r2
 800648c:	8880202c 	andhi	r2,r17,128
 8006490:	10001c26 	beq	r2,zero,8006504 <__muldf3+0x6cc>
 8006494:	b02b883a 	mov	r21,r22
 8006498:	00800044 	movi	r2,1
 800649c:	000b883a 	mov	r5,zero
 80064a0:	0029883a 	mov	r20,zero
 80064a4:	003ec306 	br	8005fb4 <__alt_data_end+0xfc005fb4>
 80064a8:	5805883a 	mov	r2,r11
 80064ac:	003f9906 	br	8006314 <__alt_data_end+0xfc006314>
 80064b0:	00bff844 	movi	r2,-31
 80064b4:	1145c83a 	sub	r2,r2,r5
 80064b8:	8888d83a 	srl	r4,r17,r2
 80064bc:	00800804 	movi	r2,32
 80064c0:	18801a26 	beq	r3,r2,800652c <__muldf3+0x6f4>
 80064c4:	00801004 	movi	r2,64
 80064c8:	10c5c83a 	sub	r2,r2,r3
 80064cc:	8884983a 	sll	r2,r17,r2
 80064d0:	1204b03a 	or	r2,r2,r8
 80064d4:	1004c03a 	cmpne	r2,r2,zero
 80064d8:	2084b03a 	or	r2,r4,r2
 80064dc:	144001cc 	andi	r17,r2,7
 80064e0:	88000d1e 	bne	r17,zero,8006518 <__muldf3+0x6e0>
 80064e4:	000b883a 	mov	r5,zero
 80064e8:	1028d0fa 	srli	r20,r2,3
 80064ec:	b02b883a 	mov	r21,r22
 80064f0:	0005883a 	mov	r2,zero
 80064f4:	a468b03a 	or	r20,r20,r17
 80064f8:	003eae06 	br	8005fb4 <__alt_data_end+0xfc005fb4>
 80064fc:	1007883a 	mov	r3,r2
 8006500:	0023883a 	mov	r17,zero
 8006504:	880a927a 	slli	r5,r17,9
 8006508:	1805883a 	mov	r2,r3
 800650c:	8822977a 	slli	r17,r17,29
 8006510:	280ad33a 	srli	r5,r5,12
 8006514:	003ff406 	br	80064e8 <__alt_data_end+0xfc0064e8>
 8006518:	10c003cc 	andi	r3,r2,15
 800651c:	01000104 	movi	r4,4
 8006520:	193ff626 	beq	r3,r4,80064fc <__alt_data_end+0xfc0064fc>
 8006524:	0023883a 	mov	r17,zero
 8006528:	003fd506 	br	8006480 <__alt_data_end+0xfc006480>
 800652c:	0005883a 	mov	r2,zero
 8006530:	003fe706 	br	80064d0 <__alt_data_end+0xfc0064d0>
 8006534:	00800434 	movhi	r2,16
 8006538:	89400234 	orhi	r5,r17,8
 800653c:	10bfffc4 	addi	r2,r2,-1
 8006540:	b02b883a 	mov	r21,r22
 8006544:	288a703a 	and	r5,r5,r2
 8006548:	4029883a 	mov	r20,r8
 800654c:	003eff06 	br	800614c <__alt_data_end+0xfc00614c>

08006550 <__subdf3>:
 8006550:	02000434 	movhi	r8,16
 8006554:	423fffc4 	addi	r8,r8,-1
 8006558:	defffb04 	addi	sp,sp,-20
 800655c:	2a14703a 	and	r10,r5,r8
 8006560:	3812d53a 	srli	r9,r7,20
 8006564:	3a10703a 	and	r8,r7,r8
 8006568:	2006d77a 	srli	r3,r4,29
 800656c:	3004d77a 	srli	r2,r6,29
 8006570:	dc000015 	stw	r16,0(sp)
 8006574:	501490fa 	slli	r10,r10,3
 8006578:	2820d53a 	srli	r16,r5,20
 800657c:	401090fa 	slli	r8,r8,3
 8006580:	dc800215 	stw	r18,8(sp)
 8006584:	dc400115 	stw	r17,4(sp)
 8006588:	dfc00415 	stw	ra,16(sp)
 800658c:	202290fa 	slli	r17,r4,3
 8006590:	dcc00315 	stw	r19,12(sp)
 8006594:	4a41ffcc 	andi	r9,r9,2047
 8006598:	0101ffc4 	movi	r4,2047
 800659c:	2824d7fa 	srli	r18,r5,31
 80065a0:	8401ffcc 	andi	r16,r16,2047
 80065a4:	50c6b03a 	or	r3,r10,r3
 80065a8:	380ed7fa 	srli	r7,r7,31
 80065ac:	408ab03a 	or	r5,r8,r2
 80065b0:	300c90fa 	slli	r6,r6,3
 80065b4:	49009626 	beq	r9,r4,8006810 <__subdf3+0x2c0>
 80065b8:	39c0005c 	xori	r7,r7,1
 80065bc:	8245c83a 	sub	r2,r16,r9
 80065c0:	3c807426 	beq	r7,r18,8006794 <__subdf3+0x244>
 80065c4:	0080af0e 	bge	zero,r2,8006884 <__subdf3+0x334>
 80065c8:	48002a1e 	bne	r9,zero,8006674 <__subdf3+0x124>
 80065cc:	2988b03a 	or	r4,r5,r6
 80065d0:	20009a1e 	bne	r4,zero,800683c <__subdf3+0x2ec>
 80065d4:	888001cc 	andi	r2,r17,7
 80065d8:	10000726 	beq	r2,zero,80065f8 <__subdf3+0xa8>
 80065dc:	888003cc 	andi	r2,r17,15
 80065e0:	01000104 	movi	r4,4
 80065e4:	11000426 	beq	r2,r4,80065f8 <__subdf3+0xa8>
 80065e8:	890b883a 	add	r5,r17,r4
 80065ec:	2c63803a 	cmpltu	r17,r5,r17
 80065f0:	1c47883a 	add	r3,r3,r17
 80065f4:	2823883a 	mov	r17,r5
 80065f8:	1880202c 	andhi	r2,r3,128
 80065fc:	10005926 	beq	r2,zero,8006764 <__subdf3+0x214>
 8006600:	84000044 	addi	r16,r16,1
 8006604:	0081ffc4 	movi	r2,2047
 8006608:	8080be26 	beq	r16,r2,8006904 <__subdf3+0x3b4>
 800660c:	017fe034 	movhi	r5,65408
 8006610:	297fffc4 	addi	r5,r5,-1
 8006614:	1946703a 	and	r3,r3,r5
 8006618:	1804977a 	slli	r2,r3,29
 800661c:	1806927a 	slli	r3,r3,9
 8006620:	8822d0fa 	srli	r17,r17,3
 8006624:	8401ffcc 	andi	r16,r16,2047
 8006628:	180ad33a 	srli	r5,r3,12
 800662c:	9100004c 	andi	r4,r18,1
 8006630:	1444b03a 	or	r2,r2,r17
 8006634:	80c1ffcc 	andi	r3,r16,2047
 8006638:	1820953a 	slli	r16,r3,20
 800663c:	20c03fcc 	andi	r3,r4,255
 8006640:	180897fa 	slli	r4,r3,31
 8006644:	00c00434 	movhi	r3,16
 8006648:	18ffffc4 	addi	r3,r3,-1
 800664c:	28c6703a 	and	r3,r5,r3
 8006650:	1c06b03a 	or	r3,r3,r16
 8006654:	1906b03a 	or	r3,r3,r4
 8006658:	dfc00417 	ldw	ra,16(sp)
 800665c:	dcc00317 	ldw	r19,12(sp)
 8006660:	dc800217 	ldw	r18,8(sp)
 8006664:	dc400117 	ldw	r17,4(sp)
 8006668:	dc000017 	ldw	r16,0(sp)
 800666c:	dec00504 	addi	sp,sp,20
 8006670:	f800283a 	ret
 8006674:	0101ffc4 	movi	r4,2047
 8006678:	813fd626 	beq	r16,r4,80065d4 <__alt_data_end+0xfc0065d4>
 800667c:	29402034 	orhi	r5,r5,128
 8006680:	01000e04 	movi	r4,56
 8006684:	2080a316 	blt	r4,r2,8006914 <__subdf3+0x3c4>
 8006688:	010007c4 	movi	r4,31
 800668c:	2080c616 	blt	r4,r2,80069a8 <__subdf3+0x458>
 8006690:	01000804 	movi	r4,32
 8006694:	2089c83a 	sub	r4,r4,r2
 8006698:	2910983a 	sll	r8,r5,r4
 800669c:	308ed83a 	srl	r7,r6,r2
 80066a0:	3108983a 	sll	r4,r6,r4
 80066a4:	2884d83a 	srl	r2,r5,r2
 80066a8:	41ccb03a 	or	r6,r8,r7
 80066ac:	2008c03a 	cmpne	r4,r4,zero
 80066b0:	310cb03a 	or	r6,r6,r4
 80066b4:	898dc83a 	sub	r6,r17,r6
 80066b8:	89a3803a 	cmpltu	r17,r17,r6
 80066bc:	1887c83a 	sub	r3,r3,r2
 80066c0:	1c47c83a 	sub	r3,r3,r17
 80066c4:	3023883a 	mov	r17,r6
 80066c8:	1880202c 	andhi	r2,r3,128
 80066cc:	10002326 	beq	r2,zero,800675c <__subdf3+0x20c>
 80066d0:	04c02034 	movhi	r19,128
 80066d4:	9cffffc4 	addi	r19,r19,-1
 80066d8:	1ce6703a 	and	r19,r3,r19
 80066dc:	98007a26 	beq	r19,zero,80068c8 <__subdf3+0x378>
 80066e0:	9809883a 	mov	r4,r19
 80066e4:	80072600 	call	8007260 <__clzsi2>
 80066e8:	113ffe04 	addi	r4,r2,-8
 80066ec:	00c007c4 	movi	r3,31
 80066f0:	19007b16 	blt	r3,r4,80068e0 <__subdf3+0x390>
 80066f4:	00800804 	movi	r2,32
 80066f8:	1105c83a 	sub	r2,r2,r4
 80066fc:	8884d83a 	srl	r2,r17,r2
 8006700:	9906983a 	sll	r3,r19,r4
 8006704:	8922983a 	sll	r17,r17,r4
 8006708:	10c4b03a 	or	r2,r2,r3
 800670c:	24007816 	blt	r4,r16,80068f0 <__subdf3+0x3a0>
 8006710:	2421c83a 	sub	r16,r4,r16
 8006714:	80c00044 	addi	r3,r16,1
 8006718:	010007c4 	movi	r4,31
 800671c:	20c09516 	blt	r4,r3,8006974 <__subdf3+0x424>
 8006720:	01400804 	movi	r5,32
 8006724:	28cbc83a 	sub	r5,r5,r3
 8006728:	88c8d83a 	srl	r4,r17,r3
 800672c:	8962983a 	sll	r17,r17,r5
 8006730:	114a983a 	sll	r5,r2,r5
 8006734:	10c6d83a 	srl	r3,r2,r3
 8006738:	8804c03a 	cmpne	r2,r17,zero
 800673c:	290ab03a 	or	r5,r5,r4
 8006740:	28a2b03a 	or	r17,r5,r2
 8006744:	0021883a 	mov	r16,zero
 8006748:	003fa206 	br	80065d4 <__alt_data_end+0xfc0065d4>
 800674c:	2090b03a 	or	r8,r4,r2
 8006750:	40018e26 	beq	r8,zero,8006d8c <__subdf3+0x83c>
 8006754:	1007883a 	mov	r3,r2
 8006758:	2023883a 	mov	r17,r4
 800675c:	888001cc 	andi	r2,r17,7
 8006760:	103f9e1e 	bne	r2,zero,80065dc <__alt_data_end+0xfc0065dc>
 8006764:	1804977a 	slli	r2,r3,29
 8006768:	8822d0fa 	srli	r17,r17,3
 800676c:	1810d0fa 	srli	r8,r3,3
 8006770:	9100004c 	andi	r4,r18,1
 8006774:	1444b03a 	or	r2,r2,r17
 8006778:	00c1ffc4 	movi	r3,2047
 800677c:	80c02826 	beq	r16,r3,8006820 <__subdf3+0x2d0>
 8006780:	01400434 	movhi	r5,16
 8006784:	297fffc4 	addi	r5,r5,-1
 8006788:	80e0703a 	and	r16,r16,r3
 800678c:	414a703a 	and	r5,r8,r5
 8006790:	003fa806 	br	8006634 <__alt_data_end+0xfc006634>
 8006794:	0080630e 	bge	zero,r2,8006924 <__subdf3+0x3d4>
 8006798:	48003026 	beq	r9,zero,800685c <__subdf3+0x30c>
 800679c:	0101ffc4 	movi	r4,2047
 80067a0:	813f8c26 	beq	r16,r4,80065d4 <__alt_data_end+0xfc0065d4>
 80067a4:	29402034 	orhi	r5,r5,128
 80067a8:	01000e04 	movi	r4,56
 80067ac:	2080a90e 	bge	r4,r2,8006a54 <__subdf3+0x504>
 80067b0:	298cb03a 	or	r6,r5,r6
 80067b4:	3012c03a 	cmpne	r9,r6,zero
 80067b8:	0005883a 	mov	r2,zero
 80067bc:	4c53883a 	add	r9,r9,r17
 80067c0:	4c63803a 	cmpltu	r17,r9,r17
 80067c4:	10c7883a 	add	r3,r2,r3
 80067c8:	88c7883a 	add	r3,r17,r3
 80067cc:	4823883a 	mov	r17,r9
 80067d0:	1880202c 	andhi	r2,r3,128
 80067d4:	1000d026 	beq	r2,zero,8006b18 <__subdf3+0x5c8>
 80067d8:	84000044 	addi	r16,r16,1
 80067dc:	0081ffc4 	movi	r2,2047
 80067e0:	8080fe26 	beq	r16,r2,8006bdc <__subdf3+0x68c>
 80067e4:	00bfe034 	movhi	r2,65408
 80067e8:	10bfffc4 	addi	r2,r2,-1
 80067ec:	1886703a 	and	r3,r3,r2
 80067f0:	880ad07a 	srli	r5,r17,1
 80067f4:	180497fa 	slli	r2,r3,31
 80067f8:	8900004c 	andi	r4,r17,1
 80067fc:	2922b03a 	or	r17,r5,r4
 8006800:	1806d07a 	srli	r3,r3,1
 8006804:	1462b03a 	or	r17,r2,r17
 8006808:	3825883a 	mov	r18,r7
 800680c:	003f7106 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006810:	2984b03a 	or	r2,r5,r6
 8006814:	103f6826 	beq	r2,zero,80065b8 <__alt_data_end+0xfc0065b8>
 8006818:	39c03fcc 	andi	r7,r7,255
 800681c:	003f6706 	br	80065bc <__alt_data_end+0xfc0065bc>
 8006820:	4086b03a 	or	r3,r8,r2
 8006824:	18015226 	beq	r3,zero,8006d70 <__subdf3+0x820>
 8006828:	00c00434 	movhi	r3,16
 800682c:	41400234 	orhi	r5,r8,8
 8006830:	18ffffc4 	addi	r3,r3,-1
 8006834:	28ca703a 	and	r5,r5,r3
 8006838:	003f7e06 	br	8006634 <__alt_data_end+0xfc006634>
 800683c:	10bfffc4 	addi	r2,r2,-1
 8006840:	1000491e 	bne	r2,zero,8006968 <__subdf3+0x418>
 8006844:	898fc83a 	sub	r7,r17,r6
 8006848:	89e3803a 	cmpltu	r17,r17,r7
 800684c:	1947c83a 	sub	r3,r3,r5
 8006850:	1c47c83a 	sub	r3,r3,r17
 8006854:	3823883a 	mov	r17,r7
 8006858:	003f9b06 	br	80066c8 <__alt_data_end+0xfc0066c8>
 800685c:	2988b03a 	or	r4,r5,r6
 8006860:	203f5c26 	beq	r4,zero,80065d4 <__alt_data_end+0xfc0065d4>
 8006864:	10bfffc4 	addi	r2,r2,-1
 8006868:	1000931e 	bne	r2,zero,8006ab8 <__subdf3+0x568>
 800686c:	898d883a 	add	r6,r17,r6
 8006870:	3463803a 	cmpltu	r17,r6,r17
 8006874:	1947883a 	add	r3,r3,r5
 8006878:	88c7883a 	add	r3,r17,r3
 800687c:	3023883a 	mov	r17,r6
 8006880:	003fd306 	br	80067d0 <__alt_data_end+0xfc0067d0>
 8006884:	1000541e 	bne	r2,zero,80069d8 <__subdf3+0x488>
 8006888:	80800044 	addi	r2,r16,1
 800688c:	1081ffcc 	andi	r2,r2,2047
 8006890:	01000044 	movi	r4,1
 8006894:	2080a20e 	bge	r4,r2,8006b20 <__subdf3+0x5d0>
 8006898:	8989c83a 	sub	r4,r17,r6
 800689c:	8905803a 	cmpltu	r2,r17,r4
 80068a0:	1967c83a 	sub	r19,r3,r5
 80068a4:	98a7c83a 	sub	r19,r19,r2
 80068a8:	9880202c 	andhi	r2,r19,128
 80068ac:	10006326 	beq	r2,zero,8006a3c <__subdf3+0x4ec>
 80068b0:	3463c83a 	sub	r17,r6,r17
 80068b4:	28c7c83a 	sub	r3,r5,r3
 80068b8:	344d803a 	cmpltu	r6,r6,r17
 80068bc:	19a7c83a 	sub	r19,r3,r6
 80068c0:	3825883a 	mov	r18,r7
 80068c4:	983f861e 	bne	r19,zero,80066e0 <__alt_data_end+0xfc0066e0>
 80068c8:	8809883a 	mov	r4,r17
 80068cc:	80072600 	call	8007260 <__clzsi2>
 80068d0:	10800804 	addi	r2,r2,32
 80068d4:	113ffe04 	addi	r4,r2,-8
 80068d8:	00c007c4 	movi	r3,31
 80068dc:	193f850e 	bge	r3,r4,80066f4 <__alt_data_end+0xfc0066f4>
 80068e0:	10bff604 	addi	r2,r2,-40
 80068e4:	8884983a 	sll	r2,r17,r2
 80068e8:	0023883a 	mov	r17,zero
 80068ec:	243f880e 	bge	r4,r16,8006710 <__alt_data_end+0xfc006710>
 80068f0:	00ffe034 	movhi	r3,65408
 80068f4:	18ffffc4 	addi	r3,r3,-1
 80068f8:	8121c83a 	sub	r16,r16,r4
 80068fc:	10c6703a 	and	r3,r2,r3
 8006900:	003f3406 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006904:	9100004c 	andi	r4,r18,1
 8006908:	000b883a 	mov	r5,zero
 800690c:	0005883a 	mov	r2,zero
 8006910:	003f4806 	br	8006634 <__alt_data_end+0xfc006634>
 8006914:	298cb03a 	or	r6,r5,r6
 8006918:	300cc03a 	cmpne	r6,r6,zero
 800691c:	0005883a 	mov	r2,zero
 8006920:	003f6406 	br	80066b4 <__alt_data_end+0xfc0066b4>
 8006924:	10009a1e 	bne	r2,zero,8006b90 <__subdf3+0x640>
 8006928:	82400044 	addi	r9,r16,1
 800692c:	4881ffcc 	andi	r2,r9,2047
 8006930:	02800044 	movi	r10,1
 8006934:	5080670e 	bge	r10,r2,8006ad4 <__subdf3+0x584>
 8006938:	0081ffc4 	movi	r2,2047
 800693c:	4880af26 	beq	r9,r2,8006bfc <__subdf3+0x6ac>
 8006940:	898d883a 	add	r6,r17,r6
 8006944:	1945883a 	add	r2,r3,r5
 8006948:	3447803a 	cmpltu	r3,r6,r17
 800694c:	1887883a 	add	r3,r3,r2
 8006950:	182297fa 	slli	r17,r3,31
 8006954:	300cd07a 	srli	r6,r6,1
 8006958:	1806d07a 	srli	r3,r3,1
 800695c:	4821883a 	mov	r16,r9
 8006960:	89a2b03a 	or	r17,r17,r6
 8006964:	003f1b06 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006968:	0101ffc4 	movi	r4,2047
 800696c:	813f441e 	bne	r16,r4,8006680 <__alt_data_end+0xfc006680>
 8006970:	003f1806 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006974:	843ff844 	addi	r16,r16,-31
 8006978:	01400804 	movi	r5,32
 800697c:	1408d83a 	srl	r4,r2,r16
 8006980:	19405026 	beq	r3,r5,8006ac4 <__subdf3+0x574>
 8006984:	01401004 	movi	r5,64
 8006988:	28c7c83a 	sub	r3,r5,r3
 800698c:	10c4983a 	sll	r2,r2,r3
 8006990:	88a2b03a 	or	r17,r17,r2
 8006994:	8822c03a 	cmpne	r17,r17,zero
 8006998:	2462b03a 	or	r17,r4,r17
 800699c:	0007883a 	mov	r3,zero
 80069a0:	0021883a 	mov	r16,zero
 80069a4:	003f6d06 	br	800675c <__alt_data_end+0xfc00675c>
 80069a8:	11fff804 	addi	r7,r2,-32
 80069ac:	01000804 	movi	r4,32
 80069b0:	29ced83a 	srl	r7,r5,r7
 80069b4:	11004526 	beq	r2,r4,8006acc <__subdf3+0x57c>
 80069b8:	01001004 	movi	r4,64
 80069bc:	2089c83a 	sub	r4,r4,r2
 80069c0:	2904983a 	sll	r2,r5,r4
 80069c4:	118cb03a 	or	r6,r2,r6
 80069c8:	300cc03a 	cmpne	r6,r6,zero
 80069cc:	398cb03a 	or	r6,r7,r6
 80069d0:	0005883a 	mov	r2,zero
 80069d4:	003f3706 	br	80066b4 <__alt_data_end+0xfc0066b4>
 80069d8:	80002a26 	beq	r16,zero,8006a84 <__subdf3+0x534>
 80069dc:	0101ffc4 	movi	r4,2047
 80069e0:	49006626 	beq	r9,r4,8006b7c <__subdf3+0x62c>
 80069e4:	0085c83a 	sub	r2,zero,r2
 80069e8:	18c02034 	orhi	r3,r3,128
 80069ec:	01000e04 	movi	r4,56
 80069f0:	20807e16 	blt	r4,r2,8006bec <__subdf3+0x69c>
 80069f4:	010007c4 	movi	r4,31
 80069f8:	2080e716 	blt	r4,r2,8006d98 <__subdf3+0x848>
 80069fc:	01000804 	movi	r4,32
 8006a00:	2089c83a 	sub	r4,r4,r2
 8006a04:	1914983a 	sll	r10,r3,r4
 8006a08:	8890d83a 	srl	r8,r17,r2
 8006a0c:	8908983a 	sll	r4,r17,r4
 8006a10:	1884d83a 	srl	r2,r3,r2
 8006a14:	5222b03a 	or	r17,r10,r8
 8006a18:	2006c03a 	cmpne	r3,r4,zero
 8006a1c:	88e2b03a 	or	r17,r17,r3
 8006a20:	3463c83a 	sub	r17,r6,r17
 8006a24:	2885c83a 	sub	r2,r5,r2
 8006a28:	344d803a 	cmpltu	r6,r6,r17
 8006a2c:	1187c83a 	sub	r3,r2,r6
 8006a30:	4821883a 	mov	r16,r9
 8006a34:	3825883a 	mov	r18,r7
 8006a38:	003f2306 	br	80066c8 <__alt_data_end+0xfc0066c8>
 8006a3c:	24d0b03a 	or	r8,r4,r19
 8006a40:	40001b1e 	bne	r8,zero,8006ab0 <__subdf3+0x560>
 8006a44:	0005883a 	mov	r2,zero
 8006a48:	0009883a 	mov	r4,zero
 8006a4c:	0021883a 	mov	r16,zero
 8006a50:	003f4906 	br	8006778 <__alt_data_end+0xfc006778>
 8006a54:	010007c4 	movi	r4,31
 8006a58:	20803a16 	blt	r4,r2,8006b44 <__subdf3+0x5f4>
 8006a5c:	01000804 	movi	r4,32
 8006a60:	2089c83a 	sub	r4,r4,r2
 8006a64:	2912983a 	sll	r9,r5,r4
 8006a68:	3090d83a 	srl	r8,r6,r2
 8006a6c:	3108983a 	sll	r4,r6,r4
 8006a70:	2884d83a 	srl	r2,r5,r2
 8006a74:	4a12b03a 	or	r9,r9,r8
 8006a78:	2008c03a 	cmpne	r4,r4,zero
 8006a7c:	4912b03a 	or	r9,r9,r4
 8006a80:	003f4e06 	br	80067bc <__alt_data_end+0xfc0067bc>
 8006a84:	1c48b03a 	or	r4,r3,r17
 8006a88:	20003c26 	beq	r4,zero,8006b7c <__subdf3+0x62c>
 8006a8c:	0084303a 	nor	r2,zero,r2
 8006a90:	1000381e 	bne	r2,zero,8006b74 <__subdf3+0x624>
 8006a94:	3463c83a 	sub	r17,r6,r17
 8006a98:	28c5c83a 	sub	r2,r5,r3
 8006a9c:	344d803a 	cmpltu	r6,r6,r17
 8006aa0:	1187c83a 	sub	r3,r2,r6
 8006aa4:	4821883a 	mov	r16,r9
 8006aa8:	3825883a 	mov	r18,r7
 8006aac:	003f0606 	br	80066c8 <__alt_data_end+0xfc0066c8>
 8006ab0:	2023883a 	mov	r17,r4
 8006ab4:	003f0906 	br	80066dc <__alt_data_end+0xfc0066dc>
 8006ab8:	0101ffc4 	movi	r4,2047
 8006abc:	813f3a1e 	bne	r16,r4,80067a8 <__alt_data_end+0xfc0067a8>
 8006ac0:	003ec406 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006ac4:	0005883a 	mov	r2,zero
 8006ac8:	003fb106 	br	8006990 <__alt_data_end+0xfc006990>
 8006acc:	0005883a 	mov	r2,zero
 8006ad0:	003fbc06 	br	80069c4 <__alt_data_end+0xfc0069c4>
 8006ad4:	1c44b03a 	or	r2,r3,r17
 8006ad8:	80008e1e 	bne	r16,zero,8006d14 <__subdf3+0x7c4>
 8006adc:	1000c826 	beq	r2,zero,8006e00 <__subdf3+0x8b0>
 8006ae0:	2984b03a 	or	r2,r5,r6
 8006ae4:	103ebb26 	beq	r2,zero,80065d4 <__alt_data_end+0xfc0065d4>
 8006ae8:	8989883a 	add	r4,r17,r6
 8006aec:	1945883a 	add	r2,r3,r5
 8006af0:	2447803a 	cmpltu	r3,r4,r17
 8006af4:	1887883a 	add	r3,r3,r2
 8006af8:	1880202c 	andhi	r2,r3,128
 8006afc:	2023883a 	mov	r17,r4
 8006b00:	103f1626 	beq	r2,zero,800675c <__alt_data_end+0xfc00675c>
 8006b04:	00bfe034 	movhi	r2,65408
 8006b08:	10bfffc4 	addi	r2,r2,-1
 8006b0c:	5021883a 	mov	r16,r10
 8006b10:	1886703a 	and	r3,r3,r2
 8006b14:	003eaf06 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006b18:	3825883a 	mov	r18,r7
 8006b1c:	003f0f06 	br	800675c <__alt_data_end+0xfc00675c>
 8006b20:	1c44b03a 	or	r2,r3,r17
 8006b24:	8000251e 	bne	r16,zero,8006bbc <__subdf3+0x66c>
 8006b28:	1000661e 	bne	r2,zero,8006cc4 <__subdf3+0x774>
 8006b2c:	2990b03a 	or	r8,r5,r6
 8006b30:	40009626 	beq	r8,zero,8006d8c <__subdf3+0x83c>
 8006b34:	2807883a 	mov	r3,r5
 8006b38:	3023883a 	mov	r17,r6
 8006b3c:	3825883a 	mov	r18,r7
 8006b40:	003ea406 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006b44:	127ff804 	addi	r9,r2,-32
 8006b48:	01000804 	movi	r4,32
 8006b4c:	2a52d83a 	srl	r9,r5,r9
 8006b50:	11008c26 	beq	r2,r4,8006d84 <__subdf3+0x834>
 8006b54:	01001004 	movi	r4,64
 8006b58:	2085c83a 	sub	r2,r4,r2
 8006b5c:	2884983a 	sll	r2,r5,r2
 8006b60:	118cb03a 	or	r6,r2,r6
 8006b64:	300cc03a 	cmpne	r6,r6,zero
 8006b68:	4992b03a 	or	r9,r9,r6
 8006b6c:	0005883a 	mov	r2,zero
 8006b70:	003f1206 	br	80067bc <__alt_data_end+0xfc0067bc>
 8006b74:	0101ffc4 	movi	r4,2047
 8006b78:	493f9c1e 	bne	r9,r4,80069ec <__alt_data_end+0xfc0069ec>
 8006b7c:	2807883a 	mov	r3,r5
 8006b80:	3023883a 	mov	r17,r6
 8006b84:	4821883a 	mov	r16,r9
 8006b88:	3825883a 	mov	r18,r7
 8006b8c:	003e9106 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006b90:	80001f1e 	bne	r16,zero,8006c10 <__subdf3+0x6c0>
 8006b94:	1c48b03a 	or	r4,r3,r17
 8006b98:	20005a26 	beq	r4,zero,8006d04 <__subdf3+0x7b4>
 8006b9c:	0084303a 	nor	r2,zero,r2
 8006ba0:	1000561e 	bne	r2,zero,8006cfc <__subdf3+0x7ac>
 8006ba4:	89a3883a 	add	r17,r17,r6
 8006ba8:	1945883a 	add	r2,r3,r5
 8006bac:	898d803a 	cmpltu	r6,r17,r6
 8006bb0:	3087883a 	add	r3,r6,r2
 8006bb4:	4821883a 	mov	r16,r9
 8006bb8:	003f0506 	br	80067d0 <__alt_data_end+0xfc0067d0>
 8006bbc:	10002b1e 	bne	r2,zero,8006c6c <__subdf3+0x71c>
 8006bc0:	2984b03a 	or	r2,r5,r6
 8006bc4:	10008026 	beq	r2,zero,8006dc8 <__subdf3+0x878>
 8006bc8:	2807883a 	mov	r3,r5
 8006bcc:	3023883a 	mov	r17,r6
 8006bd0:	3825883a 	mov	r18,r7
 8006bd4:	0401ffc4 	movi	r16,2047
 8006bd8:	003e7e06 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006bdc:	3809883a 	mov	r4,r7
 8006be0:	0011883a 	mov	r8,zero
 8006be4:	0005883a 	mov	r2,zero
 8006be8:	003ee306 	br	8006778 <__alt_data_end+0xfc006778>
 8006bec:	1c62b03a 	or	r17,r3,r17
 8006bf0:	8822c03a 	cmpne	r17,r17,zero
 8006bf4:	0005883a 	mov	r2,zero
 8006bf8:	003f8906 	br	8006a20 <__alt_data_end+0xfc006a20>
 8006bfc:	3809883a 	mov	r4,r7
 8006c00:	4821883a 	mov	r16,r9
 8006c04:	0011883a 	mov	r8,zero
 8006c08:	0005883a 	mov	r2,zero
 8006c0c:	003eda06 	br	8006778 <__alt_data_end+0xfc006778>
 8006c10:	0101ffc4 	movi	r4,2047
 8006c14:	49003b26 	beq	r9,r4,8006d04 <__subdf3+0x7b4>
 8006c18:	0085c83a 	sub	r2,zero,r2
 8006c1c:	18c02034 	orhi	r3,r3,128
 8006c20:	01000e04 	movi	r4,56
 8006c24:	20806e16 	blt	r4,r2,8006de0 <__subdf3+0x890>
 8006c28:	010007c4 	movi	r4,31
 8006c2c:	20807716 	blt	r4,r2,8006e0c <__subdf3+0x8bc>
 8006c30:	01000804 	movi	r4,32
 8006c34:	2089c83a 	sub	r4,r4,r2
 8006c38:	1914983a 	sll	r10,r3,r4
 8006c3c:	8890d83a 	srl	r8,r17,r2
 8006c40:	8908983a 	sll	r4,r17,r4
 8006c44:	1884d83a 	srl	r2,r3,r2
 8006c48:	5222b03a 	or	r17,r10,r8
 8006c4c:	2006c03a 	cmpne	r3,r4,zero
 8006c50:	88e2b03a 	or	r17,r17,r3
 8006c54:	89a3883a 	add	r17,r17,r6
 8006c58:	1145883a 	add	r2,r2,r5
 8006c5c:	898d803a 	cmpltu	r6,r17,r6
 8006c60:	3087883a 	add	r3,r6,r2
 8006c64:	4821883a 	mov	r16,r9
 8006c68:	003ed906 	br	80067d0 <__alt_data_end+0xfc0067d0>
 8006c6c:	2984b03a 	or	r2,r5,r6
 8006c70:	10004226 	beq	r2,zero,8006d7c <__subdf3+0x82c>
 8006c74:	1808d0fa 	srli	r4,r3,3
 8006c78:	8822d0fa 	srli	r17,r17,3
 8006c7c:	1806977a 	slli	r3,r3,29
 8006c80:	2080022c 	andhi	r2,r4,8
 8006c84:	1c62b03a 	or	r17,r3,r17
 8006c88:	10000826 	beq	r2,zero,8006cac <__subdf3+0x75c>
 8006c8c:	2812d0fa 	srli	r9,r5,3
 8006c90:	4880022c 	andhi	r2,r9,8
 8006c94:	1000051e 	bne	r2,zero,8006cac <__subdf3+0x75c>
 8006c98:	300cd0fa 	srli	r6,r6,3
 8006c9c:	2804977a 	slli	r2,r5,29
 8006ca0:	4809883a 	mov	r4,r9
 8006ca4:	3825883a 	mov	r18,r7
 8006ca8:	11a2b03a 	or	r17,r2,r6
 8006cac:	8806d77a 	srli	r3,r17,29
 8006cb0:	200890fa 	slli	r4,r4,3
 8006cb4:	882290fa 	slli	r17,r17,3
 8006cb8:	0401ffc4 	movi	r16,2047
 8006cbc:	1906b03a 	or	r3,r3,r4
 8006cc0:	003e4406 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006cc4:	2984b03a 	or	r2,r5,r6
 8006cc8:	103e4226 	beq	r2,zero,80065d4 <__alt_data_end+0xfc0065d4>
 8006ccc:	8989c83a 	sub	r4,r17,r6
 8006cd0:	8911803a 	cmpltu	r8,r17,r4
 8006cd4:	1945c83a 	sub	r2,r3,r5
 8006cd8:	1205c83a 	sub	r2,r2,r8
 8006cdc:	1200202c 	andhi	r8,r2,128
 8006ce0:	403e9a26 	beq	r8,zero,800674c <__alt_data_end+0xfc00674c>
 8006ce4:	3463c83a 	sub	r17,r6,r17
 8006ce8:	28c5c83a 	sub	r2,r5,r3
 8006cec:	344d803a 	cmpltu	r6,r6,r17
 8006cf0:	1187c83a 	sub	r3,r2,r6
 8006cf4:	3825883a 	mov	r18,r7
 8006cf8:	003e3606 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006cfc:	0101ffc4 	movi	r4,2047
 8006d00:	493fc71e 	bne	r9,r4,8006c20 <__alt_data_end+0xfc006c20>
 8006d04:	2807883a 	mov	r3,r5
 8006d08:	3023883a 	mov	r17,r6
 8006d0c:	4821883a 	mov	r16,r9
 8006d10:	003e3006 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006d14:	10003626 	beq	r2,zero,8006df0 <__subdf3+0x8a0>
 8006d18:	2984b03a 	or	r2,r5,r6
 8006d1c:	10001726 	beq	r2,zero,8006d7c <__subdf3+0x82c>
 8006d20:	1808d0fa 	srli	r4,r3,3
 8006d24:	8822d0fa 	srli	r17,r17,3
 8006d28:	1806977a 	slli	r3,r3,29
 8006d2c:	2080022c 	andhi	r2,r4,8
 8006d30:	1c62b03a 	or	r17,r3,r17
 8006d34:	10000726 	beq	r2,zero,8006d54 <__subdf3+0x804>
 8006d38:	2812d0fa 	srli	r9,r5,3
 8006d3c:	4880022c 	andhi	r2,r9,8
 8006d40:	1000041e 	bne	r2,zero,8006d54 <__subdf3+0x804>
 8006d44:	300cd0fa 	srli	r6,r6,3
 8006d48:	2804977a 	slli	r2,r5,29
 8006d4c:	4809883a 	mov	r4,r9
 8006d50:	11a2b03a 	or	r17,r2,r6
 8006d54:	8806d77a 	srli	r3,r17,29
 8006d58:	200890fa 	slli	r4,r4,3
 8006d5c:	882290fa 	slli	r17,r17,3
 8006d60:	3825883a 	mov	r18,r7
 8006d64:	1906b03a 	or	r3,r3,r4
 8006d68:	0401ffc4 	movi	r16,2047
 8006d6c:	003e1906 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006d70:	000b883a 	mov	r5,zero
 8006d74:	0005883a 	mov	r2,zero
 8006d78:	003e2e06 	br	8006634 <__alt_data_end+0xfc006634>
 8006d7c:	0401ffc4 	movi	r16,2047
 8006d80:	003e1406 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006d84:	0005883a 	mov	r2,zero
 8006d88:	003f7506 	br	8006b60 <__alt_data_end+0xfc006b60>
 8006d8c:	0005883a 	mov	r2,zero
 8006d90:	0009883a 	mov	r4,zero
 8006d94:	003e7806 	br	8006778 <__alt_data_end+0xfc006778>
 8006d98:	123ff804 	addi	r8,r2,-32
 8006d9c:	01000804 	movi	r4,32
 8006da0:	1a10d83a 	srl	r8,r3,r8
 8006da4:	11002526 	beq	r2,r4,8006e3c <__subdf3+0x8ec>
 8006da8:	01001004 	movi	r4,64
 8006dac:	2085c83a 	sub	r2,r4,r2
 8006db0:	1884983a 	sll	r2,r3,r2
 8006db4:	1444b03a 	or	r2,r2,r17
 8006db8:	1004c03a 	cmpne	r2,r2,zero
 8006dbc:	40a2b03a 	or	r17,r8,r2
 8006dc0:	0005883a 	mov	r2,zero
 8006dc4:	003f1606 	br	8006a20 <__alt_data_end+0xfc006a20>
 8006dc8:	02000434 	movhi	r8,16
 8006dcc:	0009883a 	mov	r4,zero
 8006dd0:	423fffc4 	addi	r8,r8,-1
 8006dd4:	00bfffc4 	movi	r2,-1
 8006dd8:	0401ffc4 	movi	r16,2047
 8006ddc:	003e6606 	br	8006778 <__alt_data_end+0xfc006778>
 8006de0:	1c62b03a 	or	r17,r3,r17
 8006de4:	8822c03a 	cmpne	r17,r17,zero
 8006de8:	0005883a 	mov	r2,zero
 8006dec:	003f9906 	br	8006c54 <__alt_data_end+0xfc006c54>
 8006df0:	2807883a 	mov	r3,r5
 8006df4:	3023883a 	mov	r17,r6
 8006df8:	0401ffc4 	movi	r16,2047
 8006dfc:	003df506 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006e00:	2807883a 	mov	r3,r5
 8006e04:	3023883a 	mov	r17,r6
 8006e08:	003df206 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006e0c:	123ff804 	addi	r8,r2,-32
 8006e10:	01000804 	movi	r4,32
 8006e14:	1a10d83a 	srl	r8,r3,r8
 8006e18:	11000a26 	beq	r2,r4,8006e44 <__subdf3+0x8f4>
 8006e1c:	01001004 	movi	r4,64
 8006e20:	2085c83a 	sub	r2,r4,r2
 8006e24:	1884983a 	sll	r2,r3,r2
 8006e28:	1444b03a 	or	r2,r2,r17
 8006e2c:	1004c03a 	cmpne	r2,r2,zero
 8006e30:	40a2b03a 	or	r17,r8,r2
 8006e34:	0005883a 	mov	r2,zero
 8006e38:	003f8606 	br	8006c54 <__alt_data_end+0xfc006c54>
 8006e3c:	0005883a 	mov	r2,zero
 8006e40:	003fdc06 	br	8006db4 <__alt_data_end+0xfc006db4>
 8006e44:	0005883a 	mov	r2,zero
 8006e48:	003ff706 	br	8006e28 <__alt_data_end+0xfc006e28>

08006e4c <__fixdfsi>:
 8006e4c:	280cd53a 	srli	r6,r5,20
 8006e50:	00c00434 	movhi	r3,16
 8006e54:	18ffffc4 	addi	r3,r3,-1
 8006e58:	3181ffcc 	andi	r6,r6,2047
 8006e5c:	01c0ff84 	movi	r7,1022
 8006e60:	28c6703a 	and	r3,r5,r3
 8006e64:	280ad7fa 	srli	r5,r5,31
 8006e68:	3980120e 	bge	r7,r6,8006eb4 <__fixdfsi+0x68>
 8006e6c:	00810744 	movi	r2,1053
 8006e70:	11800c16 	blt	r2,r6,8006ea4 <__fixdfsi+0x58>
 8006e74:	00810cc4 	movi	r2,1075
 8006e78:	1185c83a 	sub	r2,r2,r6
 8006e7c:	01c007c4 	movi	r7,31
 8006e80:	18c00434 	orhi	r3,r3,16
 8006e84:	38800d16 	blt	r7,r2,8006ebc <__fixdfsi+0x70>
 8006e88:	31befb44 	addi	r6,r6,-1043
 8006e8c:	2084d83a 	srl	r2,r4,r2
 8006e90:	1986983a 	sll	r3,r3,r6
 8006e94:	1884b03a 	or	r2,r3,r2
 8006e98:	28000726 	beq	r5,zero,8006eb8 <__fixdfsi+0x6c>
 8006e9c:	0085c83a 	sub	r2,zero,r2
 8006ea0:	f800283a 	ret
 8006ea4:	00a00034 	movhi	r2,32768
 8006ea8:	10bfffc4 	addi	r2,r2,-1
 8006eac:	2885883a 	add	r2,r5,r2
 8006eb0:	f800283a 	ret
 8006eb4:	0005883a 	mov	r2,zero
 8006eb8:	f800283a 	ret
 8006ebc:	008104c4 	movi	r2,1043
 8006ec0:	1185c83a 	sub	r2,r2,r6
 8006ec4:	1884d83a 	srl	r2,r3,r2
 8006ec8:	003ff306 	br	8006e98 <__alt_data_end+0xfc006e98>

08006ecc <__floatsidf>:
 8006ecc:	defffd04 	addi	sp,sp,-12
 8006ed0:	dfc00215 	stw	ra,8(sp)
 8006ed4:	dc400115 	stw	r17,4(sp)
 8006ed8:	dc000015 	stw	r16,0(sp)
 8006edc:	20002b26 	beq	r4,zero,8006f8c <__floatsidf+0xc0>
 8006ee0:	2023883a 	mov	r17,r4
 8006ee4:	2020d7fa 	srli	r16,r4,31
 8006ee8:	20002d16 	blt	r4,zero,8006fa0 <__floatsidf+0xd4>
 8006eec:	8809883a 	mov	r4,r17
 8006ef0:	80072600 	call	8007260 <__clzsi2>
 8006ef4:	01410784 	movi	r5,1054
 8006ef8:	288bc83a 	sub	r5,r5,r2
 8006efc:	01010cc4 	movi	r4,1075
 8006f00:	2149c83a 	sub	r4,r4,r5
 8006f04:	00c007c4 	movi	r3,31
 8006f08:	1900160e 	bge	r3,r4,8006f64 <__floatsidf+0x98>
 8006f0c:	00c104c4 	movi	r3,1043
 8006f10:	1947c83a 	sub	r3,r3,r5
 8006f14:	88c6983a 	sll	r3,r17,r3
 8006f18:	00800434 	movhi	r2,16
 8006f1c:	10bfffc4 	addi	r2,r2,-1
 8006f20:	1886703a 	and	r3,r3,r2
 8006f24:	2941ffcc 	andi	r5,r5,2047
 8006f28:	800d883a 	mov	r6,r16
 8006f2c:	0005883a 	mov	r2,zero
 8006f30:	280a953a 	slli	r5,r5,20
 8006f34:	31803fcc 	andi	r6,r6,255
 8006f38:	01000434 	movhi	r4,16
 8006f3c:	300c97fa 	slli	r6,r6,31
 8006f40:	213fffc4 	addi	r4,r4,-1
 8006f44:	1906703a 	and	r3,r3,r4
 8006f48:	1946b03a 	or	r3,r3,r5
 8006f4c:	1986b03a 	or	r3,r3,r6
 8006f50:	dfc00217 	ldw	ra,8(sp)
 8006f54:	dc400117 	ldw	r17,4(sp)
 8006f58:	dc000017 	ldw	r16,0(sp)
 8006f5c:	dec00304 	addi	sp,sp,12
 8006f60:	f800283a 	ret
 8006f64:	00c002c4 	movi	r3,11
 8006f68:	1887c83a 	sub	r3,r3,r2
 8006f6c:	88c6d83a 	srl	r3,r17,r3
 8006f70:	8904983a 	sll	r2,r17,r4
 8006f74:	01000434 	movhi	r4,16
 8006f78:	213fffc4 	addi	r4,r4,-1
 8006f7c:	2941ffcc 	andi	r5,r5,2047
 8006f80:	1906703a 	and	r3,r3,r4
 8006f84:	800d883a 	mov	r6,r16
 8006f88:	003fe906 	br	8006f30 <__alt_data_end+0xfc006f30>
 8006f8c:	000d883a 	mov	r6,zero
 8006f90:	000b883a 	mov	r5,zero
 8006f94:	0007883a 	mov	r3,zero
 8006f98:	0005883a 	mov	r2,zero
 8006f9c:	003fe406 	br	8006f30 <__alt_data_end+0xfc006f30>
 8006fa0:	0123c83a 	sub	r17,zero,r4
 8006fa4:	003fd106 	br	8006eec <__alt_data_end+0xfc006eec>

08006fa8 <__extendsfdf2>:
 8006fa8:	200ad5fa 	srli	r5,r4,23
 8006fac:	defffd04 	addi	sp,sp,-12
 8006fb0:	dc400115 	stw	r17,4(sp)
 8006fb4:	29403fcc 	andi	r5,r5,255
 8006fb8:	29800044 	addi	r6,r5,1
 8006fbc:	04402034 	movhi	r17,128
 8006fc0:	dc000015 	stw	r16,0(sp)
 8006fc4:	8c7fffc4 	addi	r17,r17,-1
 8006fc8:	dfc00215 	stw	ra,8(sp)
 8006fcc:	31803fcc 	andi	r6,r6,255
 8006fd0:	00800044 	movi	r2,1
 8006fd4:	8922703a 	and	r17,r17,r4
 8006fd8:	2020d7fa 	srli	r16,r4,31
 8006fdc:	1180110e 	bge	r2,r6,8007024 <__extendsfdf2+0x7c>
 8006fe0:	880cd0fa 	srli	r6,r17,3
 8006fe4:	8822977a 	slli	r17,r17,29
 8006fe8:	2940e004 	addi	r5,r5,896
 8006fec:	2941ffcc 	andi	r5,r5,2047
 8006ff0:	2804953a 	slli	r2,r5,20
 8006ff4:	01400434 	movhi	r5,16
 8006ff8:	800697fa 	slli	r3,r16,31
 8006ffc:	297fffc4 	addi	r5,r5,-1
 8007000:	314a703a 	and	r5,r6,r5
 8007004:	288ab03a 	or	r5,r5,r2
 8007008:	28c6b03a 	or	r3,r5,r3
 800700c:	8805883a 	mov	r2,r17
 8007010:	dfc00217 	ldw	ra,8(sp)
 8007014:	dc400117 	ldw	r17,4(sp)
 8007018:	dc000017 	ldw	r16,0(sp)
 800701c:	dec00304 	addi	sp,sp,12
 8007020:	f800283a 	ret
 8007024:	2800111e 	bne	r5,zero,800706c <__extendsfdf2+0xc4>
 8007028:	88001c26 	beq	r17,zero,800709c <__extendsfdf2+0xf4>
 800702c:	8809883a 	mov	r4,r17
 8007030:	80072600 	call	8007260 <__clzsi2>
 8007034:	00c00284 	movi	r3,10
 8007038:	18801b16 	blt	r3,r2,80070a8 <__extendsfdf2+0x100>
 800703c:	018002c4 	movi	r6,11
 8007040:	308dc83a 	sub	r6,r6,r2
 8007044:	11000544 	addi	r4,r2,21
 8007048:	8986d83a 	srl	r3,r17,r6
 800704c:	8922983a 	sll	r17,r17,r4
 8007050:	0180e244 	movi	r6,905
 8007054:	01400434 	movhi	r5,16
 8007058:	3085c83a 	sub	r2,r6,r2
 800705c:	297fffc4 	addi	r5,r5,-1
 8007060:	194c703a 	and	r6,r3,r5
 8007064:	1141ffcc 	andi	r5,r2,2047
 8007068:	003fe006 	br	8006fec <__alt_data_end+0xfc006fec>
 800706c:	88000826 	beq	r17,zero,8007090 <__extendsfdf2+0xe8>
 8007070:	880cd0fa 	srli	r6,r17,3
 8007074:	00800434 	movhi	r2,16
 8007078:	10bfffc4 	addi	r2,r2,-1
 800707c:	31800234 	orhi	r6,r6,8
 8007080:	8822977a 	slli	r17,r17,29
 8007084:	308c703a 	and	r6,r6,r2
 8007088:	0141ffc4 	movi	r5,2047
 800708c:	003fd706 	br	8006fec <__alt_data_end+0xfc006fec>
 8007090:	0141ffc4 	movi	r5,2047
 8007094:	000d883a 	mov	r6,zero
 8007098:	003fd406 	br	8006fec <__alt_data_end+0xfc006fec>
 800709c:	000b883a 	mov	r5,zero
 80070a0:	000d883a 	mov	r6,zero
 80070a4:	003fd106 	br	8006fec <__alt_data_end+0xfc006fec>
 80070a8:	11bffd44 	addi	r6,r2,-11
 80070ac:	8986983a 	sll	r3,r17,r6
 80070b0:	0023883a 	mov	r17,zero
 80070b4:	003fe606 	br	8007050 <__alt_data_end+0xfc007050>

080070b8 <__truncdfsf2>:
 80070b8:	2810d53a 	srli	r8,r5,20
 80070bc:	01c00434 	movhi	r7,16
 80070c0:	39ffffc4 	addi	r7,r7,-1
 80070c4:	29ce703a 	and	r7,r5,r7
 80070c8:	4201ffcc 	andi	r8,r8,2047
 80070cc:	380e90fa 	slli	r7,r7,3
 80070d0:	200cd77a 	srli	r6,r4,29
 80070d4:	42400044 	addi	r9,r8,1
 80070d8:	4a41ffcc 	andi	r9,r9,2047
 80070dc:	00c00044 	movi	r3,1
 80070e0:	280ad7fa 	srli	r5,r5,31
 80070e4:	31ceb03a 	or	r7,r6,r7
 80070e8:	200490fa 	slli	r2,r4,3
 80070ec:	1a40230e 	bge	r3,r9,800717c <__truncdfsf2+0xc4>
 80070f0:	40ff2004 	addi	r3,r8,-896
 80070f4:	01803f84 	movi	r6,254
 80070f8:	30c01516 	blt	r6,r3,8007150 <__truncdfsf2+0x98>
 80070fc:	00c0380e 	bge	zero,r3,80071e0 <__truncdfsf2+0x128>
 8007100:	200c91ba 	slli	r6,r4,6
 8007104:	380e90fa 	slli	r7,r7,3
 8007108:	1004d77a 	srli	r2,r2,29
 800710c:	300cc03a 	cmpne	r6,r6,zero
 8007110:	31ccb03a 	or	r6,r6,r7
 8007114:	308cb03a 	or	r6,r6,r2
 8007118:	308001cc 	andi	r2,r6,7
 800711c:	10000426 	beq	r2,zero,8007130 <__truncdfsf2+0x78>
 8007120:	308003cc 	andi	r2,r6,15
 8007124:	01000104 	movi	r4,4
 8007128:	11000126 	beq	r2,r4,8007130 <__truncdfsf2+0x78>
 800712c:	31800104 	addi	r6,r6,4
 8007130:	3081002c 	andhi	r2,r6,1024
 8007134:	10001626 	beq	r2,zero,8007190 <__truncdfsf2+0xd8>
 8007138:	18c00044 	addi	r3,r3,1
 800713c:	00803fc4 	movi	r2,255
 8007140:	18800326 	beq	r3,r2,8007150 <__truncdfsf2+0x98>
 8007144:	300c91ba 	slli	r6,r6,6
 8007148:	300cd27a 	srli	r6,r6,9
 800714c:	00000206 	br	8007158 <__truncdfsf2+0xa0>
 8007150:	00ffffc4 	movi	r3,-1
 8007154:	000d883a 	mov	r6,zero
 8007158:	18c03fcc 	andi	r3,r3,255
 800715c:	180895fa 	slli	r4,r3,23
 8007160:	00c02034 	movhi	r3,128
 8007164:	280a97fa 	slli	r5,r5,31
 8007168:	18ffffc4 	addi	r3,r3,-1
 800716c:	30c6703a 	and	r3,r6,r3
 8007170:	1906b03a 	or	r3,r3,r4
 8007174:	1944b03a 	or	r2,r3,r5
 8007178:	f800283a 	ret
 800717c:	40000b1e 	bne	r8,zero,80071ac <__truncdfsf2+0xf4>
 8007180:	388cb03a 	or	r6,r7,r2
 8007184:	0007883a 	mov	r3,zero
 8007188:	30000426 	beq	r6,zero,800719c <__truncdfsf2+0xe4>
 800718c:	01800144 	movi	r6,5
 8007190:	00803fc4 	movi	r2,255
 8007194:	300cd0fa 	srli	r6,r6,3
 8007198:	18800a26 	beq	r3,r2,80071c4 <__truncdfsf2+0x10c>
 800719c:	00802034 	movhi	r2,128
 80071a0:	10bfffc4 	addi	r2,r2,-1
 80071a4:	308c703a 	and	r6,r6,r2
 80071a8:	003feb06 	br	8007158 <__alt_data_end+0xfc007158>
 80071ac:	3888b03a 	or	r4,r7,r2
 80071b0:	203fe726 	beq	r4,zero,8007150 <__alt_data_end+0xfc007150>
 80071b4:	380c90fa 	slli	r6,r7,3
 80071b8:	00c03fc4 	movi	r3,255
 80071bc:	31808034 	orhi	r6,r6,512
 80071c0:	003fd506 	br	8007118 <__alt_data_end+0xfc007118>
 80071c4:	303fe226 	beq	r6,zero,8007150 <__alt_data_end+0xfc007150>
 80071c8:	00802034 	movhi	r2,128
 80071cc:	31801034 	orhi	r6,r6,64
 80071d0:	10bfffc4 	addi	r2,r2,-1
 80071d4:	00ffffc4 	movi	r3,-1
 80071d8:	308c703a 	and	r6,r6,r2
 80071dc:	003fde06 	br	8007158 <__alt_data_end+0xfc007158>
 80071e0:	013ffa44 	movi	r4,-23
 80071e4:	19000e16 	blt	r3,r4,8007220 <__truncdfsf2+0x168>
 80071e8:	01000784 	movi	r4,30
 80071ec:	20c9c83a 	sub	r4,r4,r3
 80071f0:	018007c4 	movi	r6,31
 80071f4:	39c02034 	orhi	r7,r7,128
 80071f8:	31000b16 	blt	r6,r4,8007228 <__truncdfsf2+0x170>
 80071fc:	423f2084 	addi	r8,r8,-894
 8007200:	120c983a 	sll	r6,r2,r8
 8007204:	3a0e983a 	sll	r7,r7,r8
 8007208:	1104d83a 	srl	r2,r2,r4
 800720c:	300cc03a 	cmpne	r6,r6,zero
 8007210:	31ceb03a 	or	r7,r6,r7
 8007214:	388cb03a 	or	r6,r7,r2
 8007218:	0007883a 	mov	r3,zero
 800721c:	003fbe06 	br	8007118 <__alt_data_end+0xfc007118>
 8007220:	0007883a 	mov	r3,zero
 8007224:	003fd906 	br	800718c <__alt_data_end+0xfc00718c>
 8007228:	01bfff84 	movi	r6,-2
 800722c:	30cdc83a 	sub	r6,r6,r3
 8007230:	00c00804 	movi	r3,32
 8007234:	398cd83a 	srl	r6,r7,r6
 8007238:	20c00726 	beq	r4,r3,8007258 <__truncdfsf2+0x1a0>
 800723c:	423f2884 	addi	r8,r8,-862
 8007240:	3a0e983a 	sll	r7,r7,r8
 8007244:	3884b03a 	or	r2,r7,r2
 8007248:	1004c03a 	cmpne	r2,r2,zero
 800724c:	118cb03a 	or	r6,r2,r6
 8007250:	0007883a 	mov	r3,zero
 8007254:	003fb006 	br	8007118 <__alt_data_end+0xfc007118>
 8007258:	000f883a 	mov	r7,zero
 800725c:	003ff906 	br	8007244 <__alt_data_end+0xfc007244>

08007260 <__clzsi2>:
 8007260:	00bfffd4 	movui	r2,65535
 8007264:	11000536 	bltu	r2,r4,800727c <__clzsi2+0x1c>
 8007268:	00803fc4 	movi	r2,255
 800726c:	11000f36 	bltu	r2,r4,80072ac <__clzsi2+0x4c>
 8007270:	00800804 	movi	r2,32
 8007274:	0007883a 	mov	r3,zero
 8007278:	00000506 	br	8007290 <__clzsi2+0x30>
 800727c:	00804034 	movhi	r2,256
 8007280:	10bfffc4 	addi	r2,r2,-1
 8007284:	11000c2e 	bgeu	r2,r4,80072b8 <__clzsi2+0x58>
 8007288:	00800204 	movi	r2,8
 800728c:	00c00604 	movi	r3,24
 8007290:	20c8d83a 	srl	r4,r4,r3
 8007294:	00c20074 	movhi	r3,2049
 8007298:	18d6e204 	addi	r3,r3,23432
 800729c:	1909883a 	add	r4,r3,r4
 80072a0:	20c00003 	ldbu	r3,0(r4)
 80072a4:	10c5c83a 	sub	r2,r2,r3
 80072a8:	f800283a 	ret
 80072ac:	00800604 	movi	r2,24
 80072b0:	00c00204 	movi	r3,8
 80072b4:	003ff606 	br	8007290 <__alt_data_end+0xfc007290>
 80072b8:	00800404 	movi	r2,16
 80072bc:	1007883a 	mov	r3,r2
 80072c0:	003ff306 	br	8007290 <__alt_data_end+0xfc007290>

080072c4 <__errno>:
 80072c4:	00820074 	movhi	r2,2049
 80072c8:	109eae04 	addi	r2,r2,31416
 80072cc:	10800017 	ldw	r2,0(r2)
 80072d0:	f800283a 	ret

080072d4 <_printf_r>:
 80072d4:	defffd04 	addi	sp,sp,-12
 80072d8:	2805883a 	mov	r2,r5
 80072dc:	dfc00015 	stw	ra,0(sp)
 80072e0:	d9800115 	stw	r6,4(sp)
 80072e4:	d9c00215 	stw	r7,8(sp)
 80072e8:	21400217 	ldw	r5,8(r4)
 80072ec:	d9c00104 	addi	r7,sp,4
 80072f0:	100d883a 	mov	r6,r2
 80072f4:	80074ac0 	call	80074ac <___vfprintf_internal_r>
 80072f8:	dfc00017 	ldw	ra,0(sp)
 80072fc:	dec00304 	addi	sp,sp,12
 8007300:	f800283a 	ret

08007304 <printf>:
 8007304:	defffc04 	addi	sp,sp,-16
 8007308:	dfc00015 	stw	ra,0(sp)
 800730c:	d9400115 	stw	r5,4(sp)
 8007310:	d9800215 	stw	r6,8(sp)
 8007314:	d9c00315 	stw	r7,12(sp)
 8007318:	00820074 	movhi	r2,2049
 800731c:	109eae04 	addi	r2,r2,31416
 8007320:	10800017 	ldw	r2,0(r2)
 8007324:	200b883a 	mov	r5,r4
 8007328:	d9800104 	addi	r6,sp,4
 800732c:	11000217 	ldw	r4,8(r2)
 8007330:	80096a40 	call	80096a4 <__vfprintf_internal>
 8007334:	dfc00017 	ldw	ra,0(sp)
 8007338:	dec00404 	addi	sp,sp,16
 800733c:	f800283a 	ret

08007340 <_puts_r>:
 8007340:	defff604 	addi	sp,sp,-40
 8007344:	dc000715 	stw	r16,28(sp)
 8007348:	2021883a 	mov	r16,r4
 800734c:	2809883a 	mov	r4,r5
 8007350:	dc400815 	stw	r17,32(sp)
 8007354:	dfc00915 	stw	ra,36(sp)
 8007358:	2823883a 	mov	r17,r5
 800735c:	80074140 	call	8007414 <strlen>
 8007360:	10c00044 	addi	r3,r2,1
 8007364:	d8800115 	stw	r2,4(sp)
 8007368:	00820074 	movhi	r2,2049
 800736c:	10972304 	addi	r2,r2,23692
 8007370:	d8800215 	stw	r2,8(sp)
 8007374:	00800044 	movi	r2,1
 8007378:	d8800315 	stw	r2,12(sp)
 800737c:	00800084 	movi	r2,2
 8007380:	dc400015 	stw	r17,0(sp)
 8007384:	d8c00615 	stw	r3,24(sp)
 8007388:	dec00415 	stw	sp,16(sp)
 800738c:	d8800515 	stw	r2,20(sp)
 8007390:	80000226 	beq	r16,zero,800739c <_puts_r+0x5c>
 8007394:	80800e17 	ldw	r2,56(r16)
 8007398:	10001426 	beq	r2,zero,80073ec <_puts_r+0xac>
 800739c:	81400217 	ldw	r5,8(r16)
 80073a0:	2880030b 	ldhu	r2,12(r5)
 80073a4:	10c8000c 	andi	r3,r2,8192
 80073a8:	1800061e 	bne	r3,zero,80073c4 <_puts_r+0x84>
 80073ac:	29001917 	ldw	r4,100(r5)
 80073b0:	00f7ffc4 	movi	r3,-8193
 80073b4:	10880014 	ori	r2,r2,8192
 80073b8:	20c6703a 	and	r3,r4,r3
 80073bc:	2880030d 	sth	r2,12(r5)
 80073c0:	28c01915 	stw	r3,100(r5)
 80073c4:	d9800404 	addi	r6,sp,16
 80073c8:	8009883a 	mov	r4,r16
 80073cc:	800bbd40 	call	800bbd4 <__sfvwrite_r>
 80073d0:	1000091e 	bne	r2,zero,80073f8 <_puts_r+0xb8>
 80073d4:	00800284 	movi	r2,10
 80073d8:	dfc00917 	ldw	ra,36(sp)
 80073dc:	dc400817 	ldw	r17,32(sp)
 80073e0:	dc000717 	ldw	r16,28(sp)
 80073e4:	dec00a04 	addi	sp,sp,40
 80073e8:	f800283a 	ret
 80073ec:	8009883a 	mov	r4,r16
 80073f0:	800b7500 	call	800b750 <__sinit>
 80073f4:	003fe906 	br	800739c <__alt_data_end+0xfc00739c>
 80073f8:	00bfffc4 	movi	r2,-1
 80073fc:	003ff606 	br	80073d8 <__alt_data_end+0xfc0073d8>

08007400 <puts>:
 8007400:	00820074 	movhi	r2,2049
 8007404:	109eae04 	addi	r2,r2,31416
 8007408:	200b883a 	mov	r5,r4
 800740c:	11000017 	ldw	r4,0(r2)
 8007410:	80073401 	jmpi	8007340 <_puts_r>

08007414 <strlen>:
 8007414:	208000cc 	andi	r2,r4,3
 8007418:	10002026 	beq	r2,zero,800749c <strlen+0x88>
 800741c:	20800007 	ldb	r2,0(r4)
 8007420:	10002026 	beq	r2,zero,80074a4 <strlen+0x90>
 8007424:	2005883a 	mov	r2,r4
 8007428:	00000206 	br	8007434 <strlen+0x20>
 800742c:	10c00007 	ldb	r3,0(r2)
 8007430:	18001826 	beq	r3,zero,8007494 <strlen+0x80>
 8007434:	10800044 	addi	r2,r2,1
 8007438:	10c000cc 	andi	r3,r2,3
 800743c:	183ffb1e 	bne	r3,zero,800742c <__alt_data_end+0xfc00742c>
 8007440:	10c00017 	ldw	r3,0(r2)
 8007444:	01ffbff4 	movhi	r7,65279
 8007448:	39ffbfc4 	addi	r7,r7,-257
 800744c:	00ca303a 	nor	r5,zero,r3
 8007450:	01a02074 	movhi	r6,32897
 8007454:	19c7883a 	add	r3,r3,r7
 8007458:	31a02004 	addi	r6,r6,-32640
 800745c:	1946703a 	and	r3,r3,r5
 8007460:	1986703a 	and	r3,r3,r6
 8007464:	1800091e 	bne	r3,zero,800748c <strlen+0x78>
 8007468:	10800104 	addi	r2,r2,4
 800746c:	10c00017 	ldw	r3,0(r2)
 8007470:	19cb883a 	add	r5,r3,r7
 8007474:	00c6303a 	nor	r3,zero,r3
 8007478:	28c6703a 	and	r3,r5,r3
 800747c:	1986703a 	and	r3,r3,r6
 8007480:	183ff926 	beq	r3,zero,8007468 <__alt_data_end+0xfc007468>
 8007484:	00000106 	br	800748c <strlen+0x78>
 8007488:	10800044 	addi	r2,r2,1
 800748c:	10c00007 	ldb	r3,0(r2)
 8007490:	183ffd1e 	bne	r3,zero,8007488 <__alt_data_end+0xfc007488>
 8007494:	1105c83a 	sub	r2,r2,r4
 8007498:	f800283a 	ret
 800749c:	2005883a 	mov	r2,r4
 80074a0:	003fe706 	br	8007440 <__alt_data_end+0xfc007440>
 80074a4:	0005883a 	mov	r2,zero
 80074a8:	f800283a 	ret

080074ac <___vfprintf_internal_r>:
 80074ac:	deffb804 	addi	sp,sp,-288
 80074b0:	dfc04715 	stw	ra,284(sp)
 80074b4:	ddc04515 	stw	r23,276(sp)
 80074b8:	dd404315 	stw	r21,268(sp)
 80074bc:	d9002c15 	stw	r4,176(sp)
 80074c0:	282f883a 	mov	r23,r5
 80074c4:	302b883a 	mov	r21,r6
 80074c8:	d9c02d15 	stw	r7,180(sp)
 80074cc:	df004615 	stw	fp,280(sp)
 80074d0:	dd804415 	stw	r22,272(sp)
 80074d4:	dd004215 	stw	r20,264(sp)
 80074d8:	dcc04115 	stw	r19,260(sp)
 80074dc:	dc804015 	stw	r18,256(sp)
 80074e0:	dc403f15 	stw	r17,252(sp)
 80074e4:	dc003e15 	stw	r16,248(sp)
 80074e8:	800c2c40 	call	800c2c4 <_localeconv_r>
 80074ec:	10800017 	ldw	r2,0(r2)
 80074f0:	1009883a 	mov	r4,r2
 80074f4:	d8803415 	stw	r2,208(sp)
 80074f8:	80074140 	call	8007414 <strlen>
 80074fc:	d8803715 	stw	r2,220(sp)
 8007500:	d8802c17 	ldw	r2,176(sp)
 8007504:	10000226 	beq	r2,zero,8007510 <___vfprintf_internal_r+0x64>
 8007508:	10800e17 	ldw	r2,56(r2)
 800750c:	1000f926 	beq	r2,zero,80078f4 <___vfprintf_internal_r+0x448>
 8007510:	b880030b 	ldhu	r2,12(r23)
 8007514:	10c8000c 	andi	r3,r2,8192
 8007518:	1800061e 	bne	r3,zero,8007534 <___vfprintf_internal_r+0x88>
 800751c:	b9001917 	ldw	r4,100(r23)
 8007520:	00f7ffc4 	movi	r3,-8193
 8007524:	10880014 	ori	r2,r2,8192
 8007528:	20c6703a 	and	r3,r4,r3
 800752c:	b880030d 	sth	r2,12(r23)
 8007530:	b8c01915 	stw	r3,100(r23)
 8007534:	10c0020c 	andi	r3,r2,8
 8007538:	1800c126 	beq	r3,zero,8007840 <___vfprintf_internal_r+0x394>
 800753c:	b8c00417 	ldw	r3,16(r23)
 8007540:	1800bf26 	beq	r3,zero,8007840 <___vfprintf_internal_r+0x394>
 8007544:	1080068c 	andi	r2,r2,26
 8007548:	00c00284 	movi	r3,10
 800754c:	10c0c426 	beq	r2,r3,8007860 <___vfprintf_internal_r+0x3b4>
 8007550:	d8c00404 	addi	r3,sp,16
 8007554:	05020074 	movhi	r20,2049
 8007558:	d9001e04 	addi	r4,sp,120
 800755c:	a5173484 	addi	r20,r20,23762
 8007560:	d8c01e15 	stw	r3,120(sp)
 8007564:	d8002015 	stw	zero,128(sp)
 8007568:	d8001f15 	stw	zero,124(sp)
 800756c:	d8003315 	stw	zero,204(sp)
 8007570:	d8003615 	stw	zero,216(sp)
 8007574:	d8003815 	stw	zero,224(sp)
 8007578:	1811883a 	mov	r8,r3
 800757c:	d8003915 	stw	zero,228(sp)
 8007580:	d8003a15 	stw	zero,232(sp)
 8007584:	d8002f15 	stw	zero,188(sp)
 8007588:	d9002815 	stw	r4,160(sp)
 800758c:	a8800007 	ldb	r2,0(r21)
 8007590:	10027b26 	beq	r2,zero,8007f80 <___vfprintf_internal_r+0xad4>
 8007594:	00c00944 	movi	r3,37
 8007598:	a821883a 	mov	r16,r21
 800759c:	10c0021e 	bne	r2,r3,80075a8 <___vfprintf_internal_r+0xfc>
 80075a0:	00001406 	br	80075f4 <___vfprintf_internal_r+0x148>
 80075a4:	10c00326 	beq	r2,r3,80075b4 <___vfprintf_internal_r+0x108>
 80075a8:	84000044 	addi	r16,r16,1
 80075ac:	80800007 	ldb	r2,0(r16)
 80075b0:	103ffc1e 	bne	r2,zero,80075a4 <__alt_data_end+0xfc0075a4>
 80075b4:	8563c83a 	sub	r17,r16,r21
 80075b8:	88000e26 	beq	r17,zero,80075f4 <___vfprintf_internal_r+0x148>
 80075bc:	d8c02017 	ldw	r3,128(sp)
 80075c0:	d8801f17 	ldw	r2,124(sp)
 80075c4:	45400015 	stw	r21,0(r8)
 80075c8:	1c47883a 	add	r3,r3,r17
 80075cc:	10800044 	addi	r2,r2,1
 80075d0:	d8c02015 	stw	r3,128(sp)
 80075d4:	44400115 	stw	r17,4(r8)
 80075d8:	d8801f15 	stw	r2,124(sp)
 80075dc:	00c001c4 	movi	r3,7
 80075e0:	1880a716 	blt	r3,r2,8007880 <___vfprintf_internal_r+0x3d4>
 80075e4:	42000204 	addi	r8,r8,8
 80075e8:	d9402f17 	ldw	r5,188(sp)
 80075ec:	2c4b883a 	add	r5,r5,r17
 80075f0:	d9402f15 	stw	r5,188(sp)
 80075f4:	80800007 	ldb	r2,0(r16)
 80075f8:	1000a826 	beq	r2,zero,800789c <___vfprintf_internal_r+0x3f0>
 80075fc:	84400047 	ldb	r17,1(r16)
 8007600:	00bfffc4 	movi	r2,-1
 8007604:	85400044 	addi	r21,r16,1
 8007608:	d8002785 	stb	zero,158(sp)
 800760c:	0007883a 	mov	r3,zero
 8007610:	000f883a 	mov	r7,zero
 8007614:	d8802915 	stw	r2,164(sp)
 8007618:	d8003115 	stw	zero,196(sp)
 800761c:	0025883a 	mov	r18,zero
 8007620:	01401604 	movi	r5,88
 8007624:	01800244 	movi	r6,9
 8007628:	02800a84 	movi	r10,42
 800762c:	02401b04 	movi	r9,108
 8007630:	ad400044 	addi	r21,r21,1
 8007634:	88bff804 	addi	r2,r17,-32
 8007638:	28830436 	bltu	r5,r2,800824c <___vfprintf_internal_r+0xda0>
 800763c:	100490ba 	slli	r2,r2,2
 8007640:	01020034 	movhi	r4,2048
 8007644:	211d9504 	addi	r4,r4,30292
 8007648:	1105883a 	add	r2,r2,r4
 800764c:	10800017 	ldw	r2,0(r2)
 8007650:	1000683a 	jmp	r2
 8007654:	0800816c 	andhi	zero,at,517
 8007658:	0800824c 	andi	zero,at,521
 800765c:	0800824c 	andi	zero,at,521
 8007660:	0800818c 	andi	zero,at,518
 8007664:	0800824c 	andi	zero,at,521
 8007668:	0800824c 	andi	zero,at,521
 800766c:	0800824c 	andi	zero,at,521
 8007670:	0800824c 	andi	zero,at,521
 8007674:	0800824c 	andi	zero,at,521
 8007678:	0800824c 	andi	zero,at,521
 800767c:	08007900 	call	800790 <__ram_exceptions_end+0x7e0548>
 8007680:	080080a8 	cmpgeui	zero,at,514
 8007684:	0800824c 	andi	zero,at,521
 8007688:	080077c8 	cmpgei	zero,at,479
 800768c:	08007928 	cmpgeui	zero,at,484
 8007690:	0800824c 	andi	zero,at,521
 8007694:	08007968 	cmpgeui	zero,at,485
 8007698:	08007974 	orhi	zero,at,485
 800769c:	08007974 	orhi	zero,at,485
 80076a0:	08007974 	orhi	zero,at,485
 80076a4:	08007974 	orhi	zero,at,485
 80076a8:	08007974 	orhi	zero,at,485
 80076ac:	08007974 	orhi	zero,at,485
 80076b0:	08007974 	orhi	zero,at,485
 80076b4:	08007974 	orhi	zero,at,485
 80076b8:	08007974 	orhi	zero,at,485
 80076bc:	0800824c 	andi	zero,at,521
 80076c0:	0800824c 	andi	zero,at,521
 80076c4:	0800824c 	andi	zero,at,521
 80076c8:	0800824c 	andi	zero,at,521
 80076cc:	0800824c 	andi	zero,at,521
 80076d0:	0800824c 	andi	zero,at,521
 80076d4:	0800824c 	andi	zero,at,521
 80076d8:	0800824c 	andi	zero,at,521
 80076dc:	0800824c 	andi	zero,at,521
 80076e0:	0800824c 	andi	zero,at,521
 80076e4:	080079a8 	cmpgeui	zero,at,486
 80076e8:	08007a64 	muli	zero,at,489
 80076ec:	0800824c 	andi	zero,at,521
 80076f0:	08007a64 	muli	zero,at,489
 80076f4:	0800824c 	andi	zero,at,521
 80076f8:	0800824c 	andi	zero,at,521
 80076fc:	0800824c 	andi	zero,at,521
 8007700:	0800824c 	andi	zero,at,521
 8007704:	08007b04 	addi	zero,at,492
 8007708:	0800824c 	andi	zero,at,521
 800770c:	0800824c 	andi	zero,at,521
 8007710:	08007b10 	cmplti	zero,at,492
 8007714:	0800824c 	andi	zero,at,521
 8007718:	0800824c 	andi	zero,at,521
 800771c:	0800824c 	andi	zero,at,521
 8007720:	0800824c 	andi	zero,at,521
 8007724:	0800824c 	andi	zero,at,521
 8007728:	08007f88 	cmpgei	zero,at,510
 800772c:	0800824c 	andi	zero,at,521
 8007730:	0800824c 	andi	zero,at,521
 8007734:	08007fe8 	cmpgeui	zero,at,511
 8007738:	0800824c 	andi	zero,at,521
 800773c:	0800824c 	andi	zero,at,521
 8007740:	0800824c 	andi	zero,at,521
 8007744:	0800824c 	andi	zero,at,521
 8007748:	0800824c 	andi	zero,at,521
 800774c:	0800824c 	andi	zero,at,521
 8007750:	0800824c 	andi	zero,at,521
 8007754:	0800824c 	andi	zero,at,521
 8007758:	0800824c 	andi	zero,at,521
 800775c:	0800824c 	andi	zero,at,521
 8007760:	080081f8 	rdprs	zero,at,519
 8007764:	08008198 	cmpnei	zero,at,518
 8007768:	08007a64 	muli	zero,at,489
 800776c:	08007a64 	muli	zero,at,489
 8007770:	08007a64 	muli	zero,at,489
 8007774:	080081a8 	cmpgeui	zero,at,518
 8007778:	08008198 	cmpnei	zero,at,518
 800777c:	0800824c 	andi	zero,at,521
 8007780:	0800824c 	andi	zero,at,521
 8007784:	080081b4 	orhi	zero,at,518
 8007788:	0800824c 	andi	zero,at,521
 800778c:	080081c4 	addi	zero,at,519
 8007790:	08008098 	cmpnei	zero,at,514
 8007794:	080077d4 	ori	zero,at,479
 8007798:	080080b8 	rdprs	zero,at,514
 800779c:	0800824c 	andi	zero,at,521
 80077a0:	080080c4 	addi	zero,at,515
 80077a4:	0800824c 	andi	zero,at,521
 80077a8:	08008120 	cmpeqi	zero,at,516
 80077ac:	0800824c 	andi	zero,at,521
 80077b0:	0800824c 	andi	zero,at,521
 80077b4:	08008130 	cmpltui	zero,at,516
 80077b8:	d9003117 	ldw	r4,196(sp)
 80077bc:	d8802d15 	stw	r2,180(sp)
 80077c0:	0109c83a 	sub	r4,zero,r4
 80077c4:	d9003115 	stw	r4,196(sp)
 80077c8:	94800114 	ori	r18,r18,4
 80077cc:	ac400007 	ldb	r17,0(r21)
 80077d0:	003f9706 	br	8007630 <__alt_data_end+0xfc007630>
 80077d4:	00800c04 	movi	r2,48
 80077d8:	d9002d17 	ldw	r4,180(sp)
 80077dc:	d9402917 	ldw	r5,164(sp)
 80077e0:	d8802705 	stb	r2,156(sp)
 80077e4:	00801e04 	movi	r2,120
 80077e8:	d8802745 	stb	r2,157(sp)
 80077ec:	d8002785 	stb	zero,158(sp)
 80077f0:	20c00104 	addi	r3,r4,4
 80077f4:	24c00017 	ldw	r19,0(r4)
 80077f8:	002d883a 	mov	r22,zero
 80077fc:	90800094 	ori	r2,r18,2
 8007800:	28029a16 	blt	r5,zero,800826c <___vfprintf_internal_r+0xdc0>
 8007804:	00bfdfc4 	movi	r2,-129
 8007808:	90a4703a 	and	r18,r18,r2
 800780c:	d8c02d15 	stw	r3,180(sp)
 8007810:	94800094 	ori	r18,r18,2
 8007814:	9802871e 	bne	r19,zero,8008234 <___vfprintf_internal_r+0xd88>
 8007818:	00820074 	movhi	r2,2049
 800781c:	10972d04 	addi	r2,r2,23732
 8007820:	d8803915 	stw	r2,228(sp)
 8007824:	04401e04 	movi	r17,120
 8007828:	d8802917 	ldw	r2,164(sp)
 800782c:	0039883a 	mov	fp,zero
 8007830:	1001e926 	beq	r2,zero,8007fd8 <___vfprintf_internal_r+0xb2c>
 8007834:	0027883a 	mov	r19,zero
 8007838:	002d883a 	mov	r22,zero
 800783c:	00020506 	br	8008054 <___vfprintf_internal_r+0xba8>
 8007840:	d9002c17 	ldw	r4,176(sp)
 8007844:	b80b883a 	mov	r5,r23
 8007848:	800977c0 	call	800977c <__swsetup_r>
 800784c:	1005ac1e 	bne	r2,zero,8008f00 <___vfprintf_internal_r+0x1a54>
 8007850:	b880030b 	ldhu	r2,12(r23)
 8007854:	00c00284 	movi	r3,10
 8007858:	1080068c 	andi	r2,r2,26
 800785c:	10ff3c1e 	bne	r2,r3,8007550 <__alt_data_end+0xfc007550>
 8007860:	b880038f 	ldh	r2,14(r23)
 8007864:	103f3a16 	blt	r2,zero,8007550 <__alt_data_end+0xfc007550>
 8007868:	d9c02d17 	ldw	r7,180(sp)
 800786c:	d9002c17 	ldw	r4,176(sp)
 8007870:	a80d883a 	mov	r6,r21
 8007874:	b80b883a 	mov	r5,r23
 8007878:	80096c00 	call	80096c0 <__sbprintf>
 800787c:	00001106 	br	80078c4 <___vfprintf_internal_r+0x418>
 8007880:	d9002c17 	ldw	r4,176(sp)
 8007884:	d9801e04 	addi	r6,sp,120
 8007888:	b80b883a 	mov	r5,r23
 800788c:	800ea340 	call	800ea34 <__sprint_r>
 8007890:	1000081e 	bne	r2,zero,80078b4 <___vfprintf_internal_r+0x408>
 8007894:	da000404 	addi	r8,sp,16
 8007898:	003f5306 	br	80075e8 <__alt_data_end+0xfc0075e8>
 800789c:	d8802017 	ldw	r2,128(sp)
 80078a0:	10000426 	beq	r2,zero,80078b4 <___vfprintf_internal_r+0x408>
 80078a4:	d9002c17 	ldw	r4,176(sp)
 80078a8:	d9801e04 	addi	r6,sp,120
 80078ac:	b80b883a 	mov	r5,r23
 80078b0:	800ea340 	call	800ea34 <__sprint_r>
 80078b4:	b880030b 	ldhu	r2,12(r23)
 80078b8:	1080100c 	andi	r2,r2,64
 80078bc:	1005901e 	bne	r2,zero,8008f00 <___vfprintf_internal_r+0x1a54>
 80078c0:	d8802f17 	ldw	r2,188(sp)
 80078c4:	dfc04717 	ldw	ra,284(sp)
 80078c8:	df004617 	ldw	fp,280(sp)
 80078cc:	ddc04517 	ldw	r23,276(sp)
 80078d0:	dd804417 	ldw	r22,272(sp)
 80078d4:	dd404317 	ldw	r21,268(sp)
 80078d8:	dd004217 	ldw	r20,264(sp)
 80078dc:	dcc04117 	ldw	r19,260(sp)
 80078e0:	dc804017 	ldw	r18,256(sp)
 80078e4:	dc403f17 	ldw	r17,252(sp)
 80078e8:	dc003e17 	ldw	r16,248(sp)
 80078ec:	dec04804 	addi	sp,sp,288
 80078f0:	f800283a 	ret
 80078f4:	d9002c17 	ldw	r4,176(sp)
 80078f8:	800b7500 	call	800b750 <__sinit>
 80078fc:	003f0406 	br	8007510 <__alt_data_end+0xfc007510>
 8007900:	d8802d17 	ldw	r2,180(sp)
 8007904:	d9002d17 	ldw	r4,180(sp)
 8007908:	10800017 	ldw	r2,0(r2)
 800790c:	d8803115 	stw	r2,196(sp)
 8007910:	20800104 	addi	r2,r4,4
 8007914:	d9003117 	ldw	r4,196(sp)
 8007918:	203fa716 	blt	r4,zero,80077b8 <__alt_data_end+0xfc0077b8>
 800791c:	d8802d15 	stw	r2,180(sp)
 8007920:	ac400007 	ldb	r17,0(r21)
 8007924:	003f4206 	br	8007630 <__alt_data_end+0xfc007630>
 8007928:	ac400007 	ldb	r17,0(r21)
 800792c:	aac00044 	addi	r11,r21,1
 8007930:	8a872826 	beq	r17,r10,80095d4 <___vfprintf_internal_r+0x2128>
 8007934:	88bff404 	addi	r2,r17,-48
 8007938:	0009883a 	mov	r4,zero
 800793c:	30867d36 	bltu	r6,r2,8009334 <___vfprintf_internal_r+0x1e88>
 8007940:	5c400007 	ldb	r17,0(r11)
 8007944:	210002a4 	muli	r4,r4,10
 8007948:	5d400044 	addi	r21,r11,1
 800794c:	a817883a 	mov	r11,r21
 8007950:	2089883a 	add	r4,r4,r2
 8007954:	88bff404 	addi	r2,r17,-48
 8007958:	30bff92e 	bgeu	r6,r2,8007940 <__alt_data_end+0xfc007940>
 800795c:	2005c916 	blt	r4,zero,8009084 <___vfprintf_internal_r+0x1bd8>
 8007960:	d9002915 	stw	r4,164(sp)
 8007964:	003f3306 	br	8007634 <__alt_data_end+0xfc007634>
 8007968:	94802014 	ori	r18,r18,128
 800796c:	ac400007 	ldb	r17,0(r21)
 8007970:	003f2f06 	br	8007630 <__alt_data_end+0xfc007630>
 8007974:	a809883a 	mov	r4,r21
 8007978:	d8003115 	stw	zero,196(sp)
 800797c:	88bff404 	addi	r2,r17,-48
 8007980:	0017883a 	mov	r11,zero
 8007984:	24400007 	ldb	r17,0(r4)
 8007988:	5ac002a4 	muli	r11,r11,10
 800798c:	ad400044 	addi	r21,r21,1
 8007990:	a809883a 	mov	r4,r21
 8007994:	12d7883a 	add	r11,r2,r11
 8007998:	88bff404 	addi	r2,r17,-48
 800799c:	30bff92e 	bgeu	r6,r2,8007984 <__alt_data_end+0xfc007984>
 80079a0:	dac03115 	stw	r11,196(sp)
 80079a4:	003f2306 	br	8007634 <__alt_data_end+0xfc007634>
 80079a8:	18c03fcc 	andi	r3,r3,255
 80079ac:	18072b1e 	bne	r3,zero,800965c <___vfprintf_internal_r+0x21b0>
 80079b0:	94800414 	ori	r18,r18,16
 80079b4:	9080080c 	andi	r2,r18,32
 80079b8:	10037b26 	beq	r2,zero,80087a8 <___vfprintf_internal_r+0x12fc>
 80079bc:	d9402d17 	ldw	r5,180(sp)
 80079c0:	28800117 	ldw	r2,4(r5)
 80079c4:	2cc00017 	ldw	r19,0(r5)
 80079c8:	29400204 	addi	r5,r5,8
 80079cc:	d9402d15 	stw	r5,180(sp)
 80079d0:	102d883a 	mov	r22,r2
 80079d4:	10044b16 	blt	r2,zero,8008b04 <___vfprintf_internal_r+0x1658>
 80079d8:	d9402917 	ldw	r5,164(sp)
 80079dc:	df002783 	ldbu	fp,158(sp)
 80079e0:	2803bc16 	blt	r5,zero,80088d4 <___vfprintf_internal_r+0x1428>
 80079e4:	00ffdfc4 	movi	r3,-129
 80079e8:	9d84b03a 	or	r2,r19,r22
 80079ec:	90e4703a 	and	r18,r18,r3
 80079f0:	10017726 	beq	r2,zero,8007fd0 <___vfprintf_internal_r+0xb24>
 80079f4:	b0038326 	beq	r22,zero,8008804 <___vfprintf_internal_r+0x1358>
 80079f8:	dc402a15 	stw	r17,168(sp)
 80079fc:	dc001e04 	addi	r16,sp,120
 8007a00:	b023883a 	mov	r17,r22
 8007a04:	402d883a 	mov	r22,r8
 8007a08:	9809883a 	mov	r4,r19
 8007a0c:	880b883a 	mov	r5,r17
 8007a10:	01800284 	movi	r6,10
 8007a14:	000f883a 	mov	r7,zero
 8007a18:	8010e2c0 	call	8010e2c <__umoddi3>
 8007a1c:	10800c04 	addi	r2,r2,48
 8007a20:	843fffc4 	addi	r16,r16,-1
 8007a24:	9809883a 	mov	r4,r19
 8007a28:	880b883a 	mov	r5,r17
 8007a2c:	80800005 	stb	r2,0(r16)
 8007a30:	01800284 	movi	r6,10
 8007a34:	000f883a 	mov	r7,zero
 8007a38:	80108b40 	call	80108b4 <__udivdi3>
 8007a3c:	1027883a 	mov	r19,r2
 8007a40:	10c4b03a 	or	r2,r2,r3
 8007a44:	1823883a 	mov	r17,r3
 8007a48:	103fef1e 	bne	r2,zero,8007a08 <__alt_data_end+0xfc007a08>
 8007a4c:	d8c02817 	ldw	r3,160(sp)
 8007a50:	dc402a17 	ldw	r17,168(sp)
 8007a54:	b011883a 	mov	r8,r22
 8007a58:	1c07c83a 	sub	r3,r3,r16
 8007a5c:	d8c02e15 	stw	r3,184(sp)
 8007a60:	00005906 	br	8007bc8 <___vfprintf_internal_r+0x71c>
 8007a64:	18c03fcc 	andi	r3,r3,255
 8007a68:	1806fa1e 	bne	r3,zero,8009654 <___vfprintf_internal_r+0x21a8>
 8007a6c:	9080020c 	andi	r2,r18,8
 8007a70:	10048a26 	beq	r2,zero,8008c9c <___vfprintf_internal_r+0x17f0>
 8007a74:	d8c02d17 	ldw	r3,180(sp)
 8007a78:	d9002d17 	ldw	r4,180(sp)
 8007a7c:	d9402d17 	ldw	r5,180(sp)
 8007a80:	18c00017 	ldw	r3,0(r3)
 8007a84:	21000117 	ldw	r4,4(r4)
 8007a88:	29400204 	addi	r5,r5,8
 8007a8c:	d8c03615 	stw	r3,216(sp)
 8007a90:	d9003815 	stw	r4,224(sp)
 8007a94:	d9402d15 	stw	r5,180(sp)
 8007a98:	d9003617 	ldw	r4,216(sp)
 8007a9c:	d9403817 	ldw	r5,224(sp)
 8007aa0:	da003d15 	stw	r8,244(sp)
 8007aa4:	04000044 	movi	r16,1
 8007aa8:	80031640 	call	8003164 <__fpclassifyd>
 8007aac:	da003d17 	ldw	r8,244(sp)
 8007ab0:	14041f1e 	bne	r2,r16,8008b30 <___vfprintf_internal_r+0x1684>
 8007ab4:	d9003617 	ldw	r4,216(sp)
 8007ab8:	d9403817 	ldw	r5,224(sp)
 8007abc:	000d883a 	mov	r6,zero
 8007ac0:	000f883a 	mov	r7,zero
 8007ac4:	8005d440 	call	8005d44 <__ledf2>
 8007ac8:	da003d17 	ldw	r8,244(sp)
 8007acc:	1005be16 	blt	r2,zero,80091c8 <___vfprintf_internal_r+0x1d1c>
 8007ad0:	df002783 	ldbu	fp,158(sp)
 8007ad4:	008011c4 	movi	r2,71
 8007ad8:	1445330e 	bge	r2,r17,8008fa8 <___vfprintf_internal_r+0x1afc>
 8007adc:	04020074 	movhi	r16,2049
 8007ae0:	84172504 	addi	r16,r16,23700
 8007ae4:	00c000c4 	movi	r3,3
 8007ae8:	00bfdfc4 	movi	r2,-129
 8007aec:	d8c02a15 	stw	r3,168(sp)
 8007af0:	90a4703a 	and	r18,r18,r2
 8007af4:	d8c02e15 	stw	r3,184(sp)
 8007af8:	d8002915 	stw	zero,164(sp)
 8007afc:	d8003215 	stw	zero,200(sp)
 8007b00:	00003706 	br	8007be0 <___vfprintf_internal_r+0x734>
 8007b04:	94800214 	ori	r18,r18,8
 8007b08:	ac400007 	ldb	r17,0(r21)
 8007b0c:	003ec806 	br	8007630 <__alt_data_end+0xfc007630>
 8007b10:	18c03fcc 	andi	r3,r3,255
 8007b14:	1806db1e 	bne	r3,zero,8009684 <___vfprintf_internal_r+0x21d8>
 8007b18:	94800414 	ori	r18,r18,16
 8007b1c:	9080080c 	andi	r2,r18,32
 8007b20:	1002d826 	beq	r2,zero,8008684 <___vfprintf_internal_r+0x11d8>
 8007b24:	d9402d17 	ldw	r5,180(sp)
 8007b28:	d8c02917 	ldw	r3,164(sp)
 8007b2c:	d8002785 	stb	zero,158(sp)
 8007b30:	28800204 	addi	r2,r5,8
 8007b34:	2cc00017 	ldw	r19,0(r5)
 8007b38:	2d800117 	ldw	r22,4(r5)
 8007b3c:	18048f16 	blt	r3,zero,8008d7c <___vfprintf_internal_r+0x18d0>
 8007b40:	013fdfc4 	movi	r4,-129
 8007b44:	9d86b03a 	or	r3,r19,r22
 8007b48:	d8802d15 	stw	r2,180(sp)
 8007b4c:	9124703a 	and	r18,r18,r4
 8007b50:	1802d91e 	bne	r3,zero,80086b8 <___vfprintf_internal_r+0x120c>
 8007b54:	d8c02917 	ldw	r3,164(sp)
 8007b58:	0039883a 	mov	fp,zero
 8007b5c:	1805c326 	beq	r3,zero,800926c <___vfprintf_internal_r+0x1dc0>
 8007b60:	0027883a 	mov	r19,zero
 8007b64:	002d883a 	mov	r22,zero
 8007b68:	dc001e04 	addi	r16,sp,120
 8007b6c:	9806d0fa 	srli	r3,r19,3
 8007b70:	b008977a 	slli	r4,r22,29
 8007b74:	b02cd0fa 	srli	r22,r22,3
 8007b78:	9cc001cc 	andi	r19,r19,7
 8007b7c:	98800c04 	addi	r2,r19,48
 8007b80:	843fffc4 	addi	r16,r16,-1
 8007b84:	20e6b03a 	or	r19,r4,r3
 8007b88:	80800005 	stb	r2,0(r16)
 8007b8c:	9d86b03a 	or	r3,r19,r22
 8007b90:	183ff61e 	bne	r3,zero,8007b6c <__alt_data_end+0xfc007b6c>
 8007b94:	90c0004c 	andi	r3,r18,1
 8007b98:	18013b26 	beq	r3,zero,8008088 <___vfprintf_internal_r+0xbdc>
 8007b9c:	10803fcc 	andi	r2,r2,255
 8007ba0:	1080201c 	xori	r2,r2,128
 8007ba4:	10bfe004 	addi	r2,r2,-128
 8007ba8:	00c00c04 	movi	r3,48
 8007bac:	10c13626 	beq	r2,r3,8008088 <___vfprintf_internal_r+0xbdc>
 8007bb0:	80ffffc5 	stb	r3,-1(r16)
 8007bb4:	d8c02817 	ldw	r3,160(sp)
 8007bb8:	80bfffc4 	addi	r2,r16,-1
 8007bbc:	1021883a 	mov	r16,r2
 8007bc0:	1887c83a 	sub	r3,r3,r2
 8007bc4:	d8c02e15 	stw	r3,184(sp)
 8007bc8:	d8802e17 	ldw	r2,184(sp)
 8007bcc:	d9002917 	ldw	r4,164(sp)
 8007bd0:	1100010e 	bge	r2,r4,8007bd8 <___vfprintf_internal_r+0x72c>
 8007bd4:	2005883a 	mov	r2,r4
 8007bd8:	d8802a15 	stw	r2,168(sp)
 8007bdc:	d8003215 	stw	zero,200(sp)
 8007be0:	e7003fcc 	andi	fp,fp,255
 8007be4:	e700201c 	xori	fp,fp,128
 8007be8:	e73fe004 	addi	fp,fp,-128
 8007bec:	e0000326 	beq	fp,zero,8007bfc <___vfprintf_internal_r+0x750>
 8007bf0:	d8c02a17 	ldw	r3,168(sp)
 8007bf4:	18c00044 	addi	r3,r3,1
 8007bf8:	d8c02a15 	stw	r3,168(sp)
 8007bfc:	90c0008c 	andi	r3,r18,2
 8007c00:	d8c02b15 	stw	r3,172(sp)
 8007c04:	18000326 	beq	r3,zero,8007c14 <___vfprintf_internal_r+0x768>
 8007c08:	d8c02a17 	ldw	r3,168(sp)
 8007c0c:	18c00084 	addi	r3,r3,2
 8007c10:	d8c02a15 	stw	r3,168(sp)
 8007c14:	90c0210c 	andi	r3,r18,132
 8007c18:	d8c03015 	stw	r3,192(sp)
 8007c1c:	1801a31e 	bne	r3,zero,80082ac <___vfprintf_internal_r+0xe00>
 8007c20:	d9003117 	ldw	r4,196(sp)
 8007c24:	d8c02a17 	ldw	r3,168(sp)
 8007c28:	20e7c83a 	sub	r19,r4,r3
 8007c2c:	04c19f0e 	bge	zero,r19,80082ac <___vfprintf_internal_r+0xe00>
 8007c30:	02400404 	movi	r9,16
 8007c34:	d8c02017 	ldw	r3,128(sp)
 8007c38:	d8801f17 	ldw	r2,124(sp)
 8007c3c:	4cc50d0e 	bge	r9,r19,8009074 <___vfprintf_internal_r+0x1bc8>
 8007c40:	01420074 	movhi	r5,2049
 8007c44:	29573884 	addi	r5,r5,23778
 8007c48:	dc403b15 	stw	r17,236(sp)
 8007c4c:	d9403515 	stw	r5,212(sp)
 8007c50:	9823883a 	mov	r17,r19
 8007c54:	482d883a 	mov	r22,r9
 8007c58:	9027883a 	mov	r19,r18
 8007c5c:	070001c4 	movi	fp,7
 8007c60:	8025883a 	mov	r18,r16
 8007c64:	dc002c17 	ldw	r16,176(sp)
 8007c68:	00000306 	br	8007c78 <___vfprintf_internal_r+0x7cc>
 8007c6c:	8c7ffc04 	addi	r17,r17,-16
 8007c70:	42000204 	addi	r8,r8,8
 8007c74:	b440130e 	bge	r22,r17,8007cc4 <___vfprintf_internal_r+0x818>
 8007c78:	01020074 	movhi	r4,2049
 8007c7c:	18c00404 	addi	r3,r3,16
 8007c80:	10800044 	addi	r2,r2,1
 8007c84:	21173884 	addi	r4,r4,23778
 8007c88:	41000015 	stw	r4,0(r8)
 8007c8c:	45800115 	stw	r22,4(r8)
 8007c90:	d8c02015 	stw	r3,128(sp)
 8007c94:	d8801f15 	stw	r2,124(sp)
 8007c98:	e0bff40e 	bge	fp,r2,8007c6c <__alt_data_end+0xfc007c6c>
 8007c9c:	d9801e04 	addi	r6,sp,120
 8007ca0:	b80b883a 	mov	r5,r23
 8007ca4:	8009883a 	mov	r4,r16
 8007ca8:	800ea340 	call	800ea34 <__sprint_r>
 8007cac:	103f011e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8007cb0:	8c7ffc04 	addi	r17,r17,-16
 8007cb4:	d8c02017 	ldw	r3,128(sp)
 8007cb8:	d8801f17 	ldw	r2,124(sp)
 8007cbc:	da000404 	addi	r8,sp,16
 8007cc0:	b47fed16 	blt	r22,r17,8007c78 <__alt_data_end+0xfc007c78>
 8007cc4:	9021883a 	mov	r16,r18
 8007cc8:	9825883a 	mov	r18,r19
 8007ccc:	8827883a 	mov	r19,r17
 8007cd0:	dc403b17 	ldw	r17,236(sp)
 8007cd4:	d9403517 	ldw	r5,212(sp)
 8007cd8:	98c7883a 	add	r3,r19,r3
 8007cdc:	10800044 	addi	r2,r2,1
 8007ce0:	41400015 	stw	r5,0(r8)
 8007ce4:	44c00115 	stw	r19,4(r8)
 8007ce8:	d8c02015 	stw	r3,128(sp)
 8007cec:	d8801f15 	stw	r2,124(sp)
 8007cf0:	010001c4 	movi	r4,7
 8007cf4:	2082a316 	blt	r4,r2,8008784 <___vfprintf_internal_r+0x12d8>
 8007cf8:	df002787 	ldb	fp,158(sp)
 8007cfc:	42000204 	addi	r8,r8,8
 8007d00:	e0000c26 	beq	fp,zero,8007d34 <___vfprintf_internal_r+0x888>
 8007d04:	d8801f17 	ldw	r2,124(sp)
 8007d08:	d9002784 	addi	r4,sp,158
 8007d0c:	18c00044 	addi	r3,r3,1
 8007d10:	10800044 	addi	r2,r2,1
 8007d14:	41000015 	stw	r4,0(r8)
 8007d18:	01000044 	movi	r4,1
 8007d1c:	41000115 	stw	r4,4(r8)
 8007d20:	d8c02015 	stw	r3,128(sp)
 8007d24:	d8801f15 	stw	r2,124(sp)
 8007d28:	010001c4 	movi	r4,7
 8007d2c:	20823c16 	blt	r4,r2,8008620 <___vfprintf_internal_r+0x1174>
 8007d30:	42000204 	addi	r8,r8,8
 8007d34:	d8802b17 	ldw	r2,172(sp)
 8007d38:	10000c26 	beq	r2,zero,8007d6c <___vfprintf_internal_r+0x8c0>
 8007d3c:	d8801f17 	ldw	r2,124(sp)
 8007d40:	d9002704 	addi	r4,sp,156
 8007d44:	18c00084 	addi	r3,r3,2
 8007d48:	10800044 	addi	r2,r2,1
 8007d4c:	41000015 	stw	r4,0(r8)
 8007d50:	01000084 	movi	r4,2
 8007d54:	41000115 	stw	r4,4(r8)
 8007d58:	d8c02015 	stw	r3,128(sp)
 8007d5c:	d8801f15 	stw	r2,124(sp)
 8007d60:	010001c4 	movi	r4,7
 8007d64:	20823616 	blt	r4,r2,8008640 <___vfprintf_internal_r+0x1194>
 8007d68:	42000204 	addi	r8,r8,8
 8007d6c:	d9003017 	ldw	r4,192(sp)
 8007d70:	00802004 	movi	r2,128
 8007d74:	20819926 	beq	r4,r2,80083dc <___vfprintf_internal_r+0xf30>
 8007d78:	d9402917 	ldw	r5,164(sp)
 8007d7c:	d8802e17 	ldw	r2,184(sp)
 8007d80:	28adc83a 	sub	r22,r5,r2
 8007d84:	0580310e 	bge	zero,r22,8007e4c <___vfprintf_internal_r+0x9a0>
 8007d88:	07000404 	movi	fp,16
 8007d8c:	d8801f17 	ldw	r2,124(sp)
 8007d90:	e584140e 	bge	fp,r22,8008de4 <___vfprintf_internal_r+0x1938>
 8007d94:	01420074 	movhi	r5,2049
 8007d98:	29573484 	addi	r5,r5,23762
 8007d9c:	dc402915 	stw	r17,164(sp)
 8007da0:	d9402b15 	stw	r5,172(sp)
 8007da4:	b023883a 	mov	r17,r22
 8007da8:	04c001c4 	movi	r19,7
 8007dac:	a82d883a 	mov	r22,r21
 8007db0:	902b883a 	mov	r21,r18
 8007db4:	8025883a 	mov	r18,r16
 8007db8:	dc002c17 	ldw	r16,176(sp)
 8007dbc:	00000306 	br	8007dcc <___vfprintf_internal_r+0x920>
 8007dc0:	8c7ffc04 	addi	r17,r17,-16
 8007dc4:	42000204 	addi	r8,r8,8
 8007dc8:	e440110e 	bge	fp,r17,8007e10 <___vfprintf_internal_r+0x964>
 8007dcc:	18c00404 	addi	r3,r3,16
 8007dd0:	10800044 	addi	r2,r2,1
 8007dd4:	45000015 	stw	r20,0(r8)
 8007dd8:	47000115 	stw	fp,4(r8)
 8007ddc:	d8c02015 	stw	r3,128(sp)
 8007de0:	d8801f15 	stw	r2,124(sp)
 8007de4:	98bff60e 	bge	r19,r2,8007dc0 <__alt_data_end+0xfc007dc0>
 8007de8:	d9801e04 	addi	r6,sp,120
 8007dec:	b80b883a 	mov	r5,r23
 8007df0:	8009883a 	mov	r4,r16
 8007df4:	800ea340 	call	800ea34 <__sprint_r>
 8007df8:	103eae1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8007dfc:	8c7ffc04 	addi	r17,r17,-16
 8007e00:	d8c02017 	ldw	r3,128(sp)
 8007e04:	d8801f17 	ldw	r2,124(sp)
 8007e08:	da000404 	addi	r8,sp,16
 8007e0c:	e47fef16 	blt	fp,r17,8007dcc <__alt_data_end+0xfc007dcc>
 8007e10:	9021883a 	mov	r16,r18
 8007e14:	a825883a 	mov	r18,r21
 8007e18:	b02b883a 	mov	r21,r22
 8007e1c:	882d883a 	mov	r22,r17
 8007e20:	dc402917 	ldw	r17,164(sp)
 8007e24:	d9002b17 	ldw	r4,172(sp)
 8007e28:	1d87883a 	add	r3,r3,r22
 8007e2c:	10800044 	addi	r2,r2,1
 8007e30:	41000015 	stw	r4,0(r8)
 8007e34:	45800115 	stw	r22,4(r8)
 8007e38:	d8c02015 	stw	r3,128(sp)
 8007e3c:	d8801f15 	stw	r2,124(sp)
 8007e40:	010001c4 	movi	r4,7
 8007e44:	2081ee16 	blt	r4,r2,8008600 <___vfprintf_internal_r+0x1154>
 8007e48:	42000204 	addi	r8,r8,8
 8007e4c:	9080400c 	andi	r2,r18,256
 8007e50:	1001181e 	bne	r2,zero,80082b4 <___vfprintf_internal_r+0xe08>
 8007e54:	d9402e17 	ldw	r5,184(sp)
 8007e58:	d8801f17 	ldw	r2,124(sp)
 8007e5c:	44000015 	stw	r16,0(r8)
 8007e60:	1947883a 	add	r3,r3,r5
 8007e64:	10800044 	addi	r2,r2,1
 8007e68:	41400115 	stw	r5,4(r8)
 8007e6c:	d8c02015 	stw	r3,128(sp)
 8007e70:	d8801f15 	stw	r2,124(sp)
 8007e74:	010001c4 	movi	r4,7
 8007e78:	2081d316 	blt	r4,r2,80085c8 <___vfprintf_internal_r+0x111c>
 8007e7c:	42000204 	addi	r8,r8,8
 8007e80:	9480010c 	andi	r18,r18,4
 8007e84:	90003226 	beq	r18,zero,8007f50 <___vfprintf_internal_r+0xaa4>
 8007e88:	d9403117 	ldw	r5,196(sp)
 8007e8c:	d8802a17 	ldw	r2,168(sp)
 8007e90:	28a1c83a 	sub	r16,r5,r2
 8007e94:	04002e0e 	bge	zero,r16,8007f50 <___vfprintf_internal_r+0xaa4>
 8007e98:	04400404 	movi	r17,16
 8007e9c:	d8801f17 	ldw	r2,124(sp)
 8007ea0:	8c04a20e 	bge	r17,r16,800912c <___vfprintf_internal_r+0x1c80>
 8007ea4:	01420074 	movhi	r5,2049
 8007ea8:	29573884 	addi	r5,r5,23778
 8007eac:	d9403515 	stw	r5,212(sp)
 8007eb0:	048001c4 	movi	r18,7
 8007eb4:	dcc02c17 	ldw	r19,176(sp)
 8007eb8:	00000306 	br	8007ec8 <___vfprintf_internal_r+0xa1c>
 8007ebc:	843ffc04 	addi	r16,r16,-16
 8007ec0:	42000204 	addi	r8,r8,8
 8007ec4:	8c00130e 	bge	r17,r16,8007f14 <___vfprintf_internal_r+0xa68>
 8007ec8:	01020074 	movhi	r4,2049
 8007ecc:	18c00404 	addi	r3,r3,16
 8007ed0:	10800044 	addi	r2,r2,1
 8007ed4:	21173884 	addi	r4,r4,23778
 8007ed8:	41000015 	stw	r4,0(r8)
 8007edc:	44400115 	stw	r17,4(r8)
 8007ee0:	d8c02015 	stw	r3,128(sp)
 8007ee4:	d8801f15 	stw	r2,124(sp)
 8007ee8:	90bff40e 	bge	r18,r2,8007ebc <__alt_data_end+0xfc007ebc>
 8007eec:	d9801e04 	addi	r6,sp,120
 8007ef0:	b80b883a 	mov	r5,r23
 8007ef4:	9809883a 	mov	r4,r19
 8007ef8:	800ea340 	call	800ea34 <__sprint_r>
 8007efc:	103e6d1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8007f00:	843ffc04 	addi	r16,r16,-16
 8007f04:	d8c02017 	ldw	r3,128(sp)
 8007f08:	d8801f17 	ldw	r2,124(sp)
 8007f0c:	da000404 	addi	r8,sp,16
 8007f10:	8c3fed16 	blt	r17,r16,8007ec8 <__alt_data_end+0xfc007ec8>
 8007f14:	d9403517 	ldw	r5,212(sp)
 8007f18:	1c07883a 	add	r3,r3,r16
 8007f1c:	10800044 	addi	r2,r2,1
 8007f20:	41400015 	stw	r5,0(r8)
 8007f24:	44000115 	stw	r16,4(r8)
 8007f28:	d8c02015 	stw	r3,128(sp)
 8007f2c:	d8801f15 	stw	r2,124(sp)
 8007f30:	010001c4 	movi	r4,7
 8007f34:	2080060e 	bge	r4,r2,8007f50 <___vfprintf_internal_r+0xaa4>
 8007f38:	d9002c17 	ldw	r4,176(sp)
 8007f3c:	d9801e04 	addi	r6,sp,120
 8007f40:	b80b883a 	mov	r5,r23
 8007f44:	800ea340 	call	800ea34 <__sprint_r>
 8007f48:	103e5a1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8007f4c:	d8c02017 	ldw	r3,128(sp)
 8007f50:	d8803117 	ldw	r2,196(sp)
 8007f54:	d9002a17 	ldw	r4,168(sp)
 8007f58:	1100010e 	bge	r2,r4,8007f60 <___vfprintf_internal_r+0xab4>
 8007f5c:	2005883a 	mov	r2,r4
 8007f60:	d9402f17 	ldw	r5,188(sp)
 8007f64:	288b883a 	add	r5,r5,r2
 8007f68:	d9402f15 	stw	r5,188(sp)
 8007f6c:	18019e1e 	bne	r3,zero,80085e8 <___vfprintf_internal_r+0x113c>
 8007f70:	a8800007 	ldb	r2,0(r21)
 8007f74:	d8001f15 	stw	zero,124(sp)
 8007f78:	da000404 	addi	r8,sp,16
 8007f7c:	103d851e 	bne	r2,zero,8007594 <__alt_data_end+0xfc007594>
 8007f80:	a821883a 	mov	r16,r21
 8007f84:	003d9b06 	br	80075f4 <__alt_data_end+0xfc0075f4>
 8007f88:	18c03fcc 	andi	r3,r3,255
 8007f8c:	1805c11e 	bne	r3,zero,8009694 <___vfprintf_internal_r+0x21e8>
 8007f90:	94800414 	ori	r18,r18,16
 8007f94:	9080080c 	andi	r2,r18,32
 8007f98:	10020c26 	beq	r2,zero,80087cc <___vfprintf_internal_r+0x1320>
 8007f9c:	d8802d17 	ldw	r2,180(sp)
 8007fa0:	d9002917 	ldw	r4,164(sp)
 8007fa4:	d8002785 	stb	zero,158(sp)
 8007fa8:	10c00204 	addi	r3,r2,8
 8007fac:	14c00017 	ldw	r19,0(r2)
 8007fb0:	15800117 	ldw	r22,4(r2)
 8007fb4:	20040f16 	blt	r4,zero,8008ff4 <___vfprintf_internal_r+0x1b48>
 8007fb8:	013fdfc4 	movi	r4,-129
 8007fbc:	9d84b03a 	or	r2,r19,r22
 8007fc0:	d8c02d15 	stw	r3,180(sp)
 8007fc4:	9124703a 	and	r18,r18,r4
 8007fc8:	0039883a 	mov	fp,zero
 8007fcc:	103e891e 	bne	r2,zero,80079f4 <__alt_data_end+0xfc0079f4>
 8007fd0:	d9002917 	ldw	r4,164(sp)
 8007fd4:	2002c11e 	bne	r4,zero,8008adc <___vfprintf_internal_r+0x1630>
 8007fd8:	d8002915 	stw	zero,164(sp)
 8007fdc:	d8002e15 	stw	zero,184(sp)
 8007fe0:	dc001e04 	addi	r16,sp,120
 8007fe4:	003ef806 	br	8007bc8 <__alt_data_end+0xfc007bc8>
 8007fe8:	18c03fcc 	andi	r3,r3,255
 8007fec:	18059d1e 	bne	r3,zero,8009664 <___vfprintf_internal_r+0x21b8>
 8007ff0:	01420074 	movhi	r5,2049
 8007ff4:	29572804 	addi	r5,r5,23712
 8007ff8:	d9403915 	stw	r5,228(sp)
 8007ffc:	9080080c 	andi	r2,r18,32
 8008000:	10005226 	beq	r2,zero,800814c <___vfprintf_internal_r+0xca0>
 8008004:	d8802d17 	ldw	r2,180(sp)
 8008008:	14c00017 	ldw	r19,0(r2)
 800800c:	15800117 	ldw	r22,4(r2)
 8008010:	10800204 	addi	r2,r2,8
 8008014:	d8802d15 	stw	r2,180(sp)
 8008018:	9080004c 	andi	r2,r18,1
 800801c:	10019026 	beq	r2,zero,8008660 <___vfprintf_internal_r+0x11b4>
 8008020:	9d84b03a 	or	r2,r19,r22
 8008024:	10036926 	beq	r2,zero,8008dcc <___vfprintf_internal_r+0x1920>
 8008028:	d8c02917 	ldw	r3,164(sp)
 800802c:	00800c04 	movi	r2,48
 8008030:	d8802705 	stb	r2,156(sp)
 8008034:	dc402745 	stb	r17,157(sp)
 8008038:	d8002785 	stb	zero,158(sp)
 800803c:	90800094 	ori	r2,r18,2
 8008040:	18045d16 	blt	r3,zero,80091b8 <___vfprintf_internal_r+0x1d0c>
 8008044:	00bfdfc4 	movi	r2,-129
 8008048:	90a4703a 	and	r18,r18,r2
 800804c:	94800094 	ori	r18,r18,2
 8008050:	0039883a 	mov	fp,zero
 8008054:	d9003917 	ldw	r4,228(sp)
 8008058:	dc001e04 	addi	r16,sp,120
 800805c:	988003cc 	andi	r2,r19,15
 8008060:	b006973a 	slli	r3,r22,28
 8008064:	2085883a 	add	r2,r4,r2
 8008068:	9826d13a 	srli	r19,r19,4
 800806c:	10800003 	ldbu	r2,0(r2)
 8008070:	b02cd13a 	srli	r22,r22,4
 8008074:	843fffc4 	addi	r16,r16,-1
 8008078:	1ce6b03a 	or	r19,r3,r19
 800807c:	80800005 	stb	r2,0(r16)
 8008080:	9d84b03a 	or	r2,r19,r22
 8008084:	103ff51e 	bne	r2,zero,800805c <__alt_data_end+0xfc00805c>
 8008088:	d8c02817 	ldw	r3,160(sp)
 800808c:	1c07c83a 	sub	r3,r3,r16
 8008090:	d8c02e15 	stw	r3,184(sp)
 8008094:	003ecc06 	br	8007bc8 <__alt_data_end+0xfc007bc8>
 8008098:	18c03fcc 	andi	r3,r3,255
 800809c:	183e9f26 	beq	r3,zero,8007b1c <__alt_data_end+0xfc007b1c>
 80080a0:	d9c02785 	stb	r7,158(sp)
 80080a4:	003e9d06 	br	8007b1c <__alt_data_end+0xfc007b1c>
 80080a8:	00c00044 	movi	r3,1
 80080ac:	01c00ac4 	movi	r7,43
 80080b0:	ac400007 	ldb	r17,0(r21)
 80080b4:	003d5e06 	br	8007630 <__alt_data_end+0xfc007630>
 80080b8:	94800814 	ori	r18,r18,32
 80080bc:	ac400007 	ldb	r17,0(r21)
 80080c0:	003d5b06 	br	8007630 <__alt_data_end+0xfc007630>
 80080c4:	d8c02d17 	ldw	r3,180(sp)
 80080c8:	d8002785 	stb	zero,158(sp)
 80080cc:	1c000017 	ldw	r16,0(r3)
 80080d0:	1cc00104 	addi	r19,r3,4
 80080d4:	80041926 	beq	r16,zero,800913c <___vfprintf_internal_r+0x1c90>
 80080d8:	d9002917 	ldw	r4,164(sp)
 80080dc:	2003d016 	blt	r4,zero,8009020 <___vfprintf_internal_r+0x1b74>
 80080e0:	200d883a 	mov	r6,r4
 80080e4:	000b883a 	mov	r5,zero
 80080e8:	8009883a 	mov	r4,r16
 80080ec:	da003d15 	stw	r8,244(sp)
 80080f0:	800ccbc0 	call	800ccbc <memchr>
 80080f4:	da003d17 	ldw	r8,244(sp)
 80080f8:	10045426 	beq	r2,zero,800924c <___vfprintf_internal_r+0x1da0>
 80080fc:	1405c83a 	sub	r2,r2,r16
 8008100:	d8802e15 	stw	r2,184(sp)
 8008104:	1003cc16 	blt	r2,zero,8009038 <___vfprintf_internal_r+0x1b8c>
 8008108:	df002783 	ldbu	fp,158(sp)
 800810c:	d8802a15 	stw	r2,168(sp)
 8008110:	dcc02d15 	stw	r19,180(sp)
 8008114:	d8002915 	stw	zero,164(sp)
 8008118:	d8003215 	stw	zero,200(sp)
 800811c:	003eb006 	br	8007be0 <__alt_data_end+0xfc007be0>
 8008120:	18c03fcc 	andi	r3,r3,255
 8008124:	183f9b26 	beq	r3,zero,8007f94 <__alt_data_end+0xfc007f94>
 8008128:	d9c02785 	stb	r7,158(sp)
 800812c:	003f9906 	br	8007f94 <__alt_data_end+0xfc007f94>
 8008130:	18c03fcc 	andi	r3,r3,255
 8008134:	1805551e 	bne	r3,zero,800968c <___vfprintf_internal_r+0x21e0>
 8008138:	01420074 	movhi	r5,2049
 800813c:	29572d04 	addi	r5,r5,23732
 8008140:	d9403915 	stw	r5,228(sp)
 8008144:	9080080c 	andi	r2,r18,32
 8008148:	103fae1e 	bne	r2,zero,8008004 <__alt_data_end+0xfc008004>
 800814c:	9080040c 	andi	r2,r18,16
 8008150:	1002de26 	beq	r2,zero,8008ccc <___vfprintf_internal_r+0x1820>
 8008154:	d8c02d17 	ldw	r3,180(sp)
 8008158:	002d883a 	mov	r22,zero
 800815c:	1cc00017 	ldw	r19,0(r3)
 8008160:	18c00104 	addi	r3,r3,4
 8008164:	d8c02d15 	stw	r3,180(sp)
 8008168:	003fab06 	br	8008018 <__alt_data_end+0xfc008018>
 800816c:	38803fcc 	andi	r2,r7,255
 8008170:	1080201c 	xori	r2,r2,128
 8008174:	10bfe004 	addi	r2,r2,-128
 8008178:	1002d21e 	bne	r2,zero,8008cc4 <___vfprintf_internal_r+0x1818>
 800817c:	00c00044 	movi	r3,1
 8008180:	01c00804 	movi	r7,32
 8008184:	ac400007 	ldb	r17,0(r21)
 8008188:	003d2906 	br	8007630 <__alt_data_end+0xfc007630>
 800818c:	94800054 	ori	r18,r18,1
 8008190:	ac400007 	ldb	r17,0(r21)
 8008194:	003d2606 	br	8007630 <__alt_data_end+0xfc007630>
 8008198:	18c03fcc 	andi	r3,r3,255
 800819c:	183e0526 	beq	r3,zero,80079b4 <__alt_data_end+0xfc0079b4>
 80081a0:	d9c02785 	stb	r7,158(sp)
 80081a4:	003e0306 	br	80079b4 <__alt_data_end+0xfc0079b4>
 80081a8:	94801014 	ori	r18,r18,64
 80081ac:	ac400007 	ldb	r17,0(r21)
 80081b0:	003d1f06 	br	8007630 <__alt_data_end+0xfc007630>
 80081b4:	ac400007 	ldb	r17,0(r21)
 80081b8:	8a438726 	beq	r17,r9,8008fd8 <___vfprintf_internal_r+0x1b2c>
 80081bc:	94800414 	ori	r18,r18,16
 80081c0:	003d1b06 	br	8007630 <__alt_data_end+0xfc007630>
 80081c4:	18c03fcc 	andi	r3,r3,255
 80081c8:	1805341e 	bne	r3,zero,800969c <___vfprintf_internal_r+0x21f0>
 80081cc:	9080080c 	andi	r2,r18,32
 80081d0:	1002cd26 	beq	r2,zero,8008d08 <___vfprintf_internal_r+0x185c>
 80081d4:	d9402d17 	ldw	r5,180(sp)
 80081d8:	d9002f17 	ldw	r4,188(sp)
 80081dc:	28800017 	ldw	r2,0(r5)
 80081e0:	2007d7fa 	srai	r3,r4,31
 80081e4:	29400104 	addi	r5,r5,4
 80081e8:	d9402d15 	stw	r5,180(sp)
 80081ec:	11000015 	stw	r4,0(r2)
 80081f0:	10c00115 	stw	r3,4(r2)
 80081f4:	003ce506 	br	800758c <__alt_data_end+0xfc00758c>
 80081f8:	d8c02d17 	ldw	r3,180(sp)
 80081fc:	d9002d17 	ldw	r4,180(sp)
 8008200:	d8002785 	stb	zero,158(sp)
 8008204:	18800017 	ldw	r2,0(r3)
 8008208:	21000104 	addi	r4,r4,4
 800820c:	00c00044 	movi	r3,1
 8008210:	d8c02a15 	stw	r3,168(sp)
 8008214:	d8801405 	stb	r2,80(sp)
 8008218:	d9002d15 	stw	r4,180(sp)
 800821c:	d8c02e15 	stw	r3,184(sp)
 8008220:	d8002915 	stw	zero,164(sp)
 8008224:	d8003215 	stw	zero,200(sp)
 8008228:	dc001404 	addi	r16,sp,80
 800822c:	0039883a 	mov	fp,zero
 8008230:	003e7206 	br	8007bfc <__alt_data_end+0xfc007bfc>
 8008234:	01020074 	movhi	r4,2049
 8008238:	21172d04 	addi	r4,r4,23732
 800823c:	0039883a 	mov	fp,zero
 8008240:	d9003915 	stw	r4,228(sp)
 8008244:	04401e04 	movi	r17,120
 8008248:	003f8206 	br	8008054 <__alt_data_end+0xfc008054>
 800824c:	18c03fcc 	andi	r3,r3,255
 8008250:	1805061e 	bne	r3,zero,800966c <___vfprintf_internal_r+0x21c0>
 8008254:	883d9126 	beq	r17,zero,800789c <__alt_data_end+0xfc00789c>
 8008258:	00c00044 	movi	r3,1
 800825c:	d8c02a15 	stw	r3,168(sp)
 8008260:	dc401405 	stb	r17,80(sp)
 8008264:	d8002785 	stb	zero,158(sp)
 8008268:	003fec06 	br	800821c <__alt_data_end+0xfc00821c>
 800826c:	01420074 	movhi	r5,2049
 8008270:	29572d04 	addi	r5,r5,23732
 8008274:	d9403915 	stw	r5,228(sp)
 8008278:	d8c02d15 	stw	r3,180(sp)
 800827c:	1025883a 	mov	r18,r2
 8008280:	04401e04 	movi	r17,120
 8008284:	9d84b03a 	or	r2,r19,r22
 8008288:	1000fc1e 	bne	r2,zero,800867c <___vfprintf_internal_r+0x11d0>
 800828c:	0039883a 	mov	fp,zero
 8008290:	00800084 	movi	r2,2
 8008294:	10803fcc 	andi	r2,r2,255
 8008298:	00c00044 	movi	r3,1
 800829c:	10c20f26 	beq	r2,r3,8008adc <___vfprintf_internal_r+0x1630>
 80082a0:	00c00084 	movi	r3,2
 80082a4:	10fd6326 	beq	r2,r3,8007834 <__alt_data_end+0xfc007834>
 80082a8:	003e2d06 	br	8007b60 <__alt_data_end+0xfc007b60>
 80082ac:	d8c02017 	ldw	r3,128(sp)
 80082b0:	003e9306 	br	8007d00 <__alt_data_end+0xfc007d00>
 80082b4:	00801944 	movi	r2,101
 80082b8:	14407e0e 	bge	r2,r17,80084b4 <___vfprintf_internal_r+0x1008>
 80082bc:	d9003617 	ldw	r4,216(sp)
 80082c0:	d9403817 	ldw	r5,224(sp)
 80082c4:	000d883a 	mov	r6,zero
 80082c8:	000f883a 	mov	r7,zero
 80082cc:	d8c03c15 	stw	r3,240(sp)
 80082d0:	da003d15 	stw	r8,244(sp)
 80082d4:	8005be00 	call	8005be0 <__eqdf2>
 80082d8:	d8c03c17 	ldw	r3,240(sp)
 80082dc:	da003d17 	ldw	r8,244(sp)
 80082e0:	1000f71e 	bne	r2,zero,80086c0 <___vfprintf_internal_r+0x1214>
 80082e4:	d8801f17 	ldw	r2,124(sp)
 80082e8:	01020074 	movhi	r4,2049
 80082ec:	21173404 	addi	r4,r4,23760
 80082f0:	18c00044 	addi	r3,r3,1
 80082f4:	10800044 	addi	r2,r2,1
 80082f8:	41000015 	stw	r4,0(r8)
 80082fc:	01000044 	movi	r4,1
 8008300:	41000115 	stw	r4,4(r8)
 8008304:	d8c02015 	stw	r3,128(sp)
 8008308:	d8801f15 	stw	r2,124(sp)
 800830c:	010001c4 	movi	r4,7
 8008310:	2082b816 	blt	r4,r2,8008df4 <___vfprintf_internal_r+0x1948>
 8008314:	42000204 	addi	r8,r8,8
 8008318:	d8802617 	ldw	r2,152(sp)
 800831c:	d9403317 	ldw	r5,204(sp)
 8008320:	11400216 	blt	r2,r5,800832c <___vfprintf_internal_r+0xe80>
 8008324:	9080004c 	andi	r2,r18,1
 8008328:	103ed526 	beq	r2,zero,8007e80 <__alt_data_end+0xfc007e80>
 800832c:	d8803717 	ldw	r2,220(sp)
 8008330:	d9003417 	ldw	r4,208(sp)
 8008334:	d9403717 	ldw	r5,220(sp)
 8008338:	1887883a 	add	r3,r3,r2
 800833c:	d8801f17 	ldw	r2,124(sp)
 8008340:	41000015 	stw	r4,0(r8)
 8008344:	41400115 	stw	r5,4(r8)
 8008348:	10800044 	addi	r2,r2,1
 800834c:	d8c02015 	stw	r3,128(sp)
 8008350:	d8801f15 	stw	r2,124(sp)
 8008354:	010001c4 	movi	r4,7
 8008358:	20832916 	blt	r4,r2,8009000 <___vfprintf_internal_r+0x1b54>
 800835c:	42000204 	addi	r8,r8,8
 8008360:	d8803317 	ldw	r2,204(sp)
 8008364:	143fffc4 	addi	r16,r2,-1
 8008368:	043ec50e 	bge	zero,r16,8007e80 <__alt_data_end+0xfc007e80>
 800836c:	04400404 	movi	r17,16
 8008370:	d8801f17 	ldw	r2,124(sp)
 8008374:	8c00880e 	bge	r17,r16,8008598 <___vfprintf_internal_r+0x10ec>
 8008378:	01420074 	movhi	r5,2049
 800837c:	29573484 	addi	r5,r5,23762
 8008380:	d9402b15 	stw	r5,172(sp)
 8008384:	058001c4 	movi	r22,7
 8008388:	dcc02c17 	ldw	r19,176(sp)
 800838c:	00000306 	br	800839c <___vfprintf_internal_r+0xef0>
 8008390:	42000204 	addi	r8,r8,8
 8008394:	843ffc04 	addi	r16,r16,-16
 8008398:	8c00820e 	bge	r17,r16,80085a4 <___vfprintf_internal_r+0x10f8>
 800839c:	18c00404 	addi	r3,r3,16
 80083a0:	10800044 	addi	r2,r2,1
 80083a4:	45000015 	stw	r20,0(r8)
 80083a8:	44400115 	stw	r17,4(r8)
 80083ac:	d8c02015 	stw	r3,128(sp)
 80083b0:	d8801f15 	stw	r2,124(sp)
 80083b4:	b0bff60e 	bge	r22,r2,8008390 <__alt_data_end+0xfc008390>
 80083b8:	d9801e04 	addi	r6,sp,120
 80083bc:	b80b883a 	mov	r5,r23
 80083c0:	9809883a 	mov	r4,r19
 80083c4:	800ea340 	call	800ea34 <__sprint_r>
 80083c8:	103d3a1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 80083cc:	d8c02017 	ldw	r3,128(sp)
 80083d0:	d8801f17 	ldw	r2,124(sp)
 80083d4:	da000404 	addi	r8,sp,16
 80083d8:	003fee06 	br	8008394 <__alt_data_end+0xfc008394>
 80083dc:	d9403117 	ldw	r5,196(sp)
 80083e0:	d8802a17 	ldw	r2,168(sp)
 80083e4:	28adc83a 	sub	r22,r5,r2
 80083e8:	05be630e 	bge	zero,r22,8007d78 <__alt_data_end+0xfc007d78>
 80083ec:	07000404 	movi	fp,16
 80083f0:	d8801f17 	ldw	r2,124(sp)
 80083f4:	e5838f0e 	bge	fp,r22,8009234 <___vfprintf_internal_r+0x1d88>
 80083f8:	01420074 	movhi	r5,2049
 80083fc:	29573484 	addi	r5,r5,23762
 8008400:	dc403015 	stw	r17,192(sp)
 8008404:	d9402b15 	stw	r5,172(sp)
 8008408:	b023883a 	mov	r17,r22
 800840c:	04c001c4 	movi	r19,7
 8008410:	a82d883a 	mov	r22,r21
 8008414:	902b883a 	mov	r21,r18
 8008418:	8025883a 	mov	r18,r16
 800841c:	dc002c17 	ldw	r16,176(sp)
 8008420:	00000306 	br	8008430 <___vfprintf_internal_r+0xf84>
 8008424:	8c7ffc04 	addi	r17,r17,-16
 8008428:	42000204 	addi	r8,r8,8
 800842c:	e440110e 	bge	fp,r17,8008474 <___vfprintf_internal_r+0xfc8>
 8008430:	18c00404 	addi	r3,r3,16
 8008434:	10800044 	addi	r2,r2,1
 8008438:	45000015 	stw	r20,0(r8)
 800843c:	47000115 	stw	fp,4(r8)
 8008440:	d8c02015 	stw	r3,128(sp)
 8008444:	d8801f15 	stw	r2,124(sp)
 8008448:	98bff60e 	bge	r19,r2,8008424 <__alt_data_end+0xfc008424>
 800844c:	d9801e04 	addi	r6,sp,120
 8008450:	b80b883a 	mov	r5,r23
 8008454:	8009883a 	mov	r4,r16
 8008458:	800ea340 	call	800ea34 <__sprint_r>
 800845c:	103d151e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008460:	8c7ffc04 	addi	r17,r17,-16
 8008464:	d8c02017 	ldw	r3,128(sp)
 8008468:	d8801f17 	ldw	r2,124(sp)
 800846c:	da000404 	addi	r8,sp,16
 8008470:	e47fef16 	blt	fp,r17,8008430 <__alt_data_end+0xfc008430>
 8008474:	9021883a 	mov	r16,r18
 8008478:	a825883a 	mov	r18,r21
 800847c:	b02b883a 	mov	r21,r22
 8008480:	882d883a 	mov	r22,r17
 8008484:	dc403017 	ldw	r17,192(sp)
 8008488:	d9002b17 	ldw	r4,172(sp)
 800848c:	1d87883a 	add	r3,r3,r22
 8008490:	10800044 	addi	r2,r2,1
 8008494:	41000015 	stw	r4,0(r8)
 8008498:	45800115 	stw	r22,4(r8)
 800849c:	d8c02015 	stw	r3,128(sp)
 80084a0:	d8801f15 	stw	r2,124(sp)
 80084a4:	010001c4 	movi	r4,7
 80084a8:	20818e16 	blt	r4,r2,8008ae4 <___vfprintf_internal_r+0x1638>
 80084ac:	42000204 	addi	r8,r8,8
 80084b0:	003e3106 	br	8007d78 <__alt_data_end+0xfc007d78>
 80084b4:	d9403317 	ldw	r5,204(sp)
 80084b8:	00800044 	movi	r2,1
 80084bc:	18c00044 	addi	r3,r3,1
 80084c0:	1141530e 	bge	r2,r5,8008a10 <___vfprintf_internal_r+0x1564>
 80084c4:	dc401f17 	ldw	r17,124(sp)
 80084c8:	00800044 	movi	r2,1
 80084cc:	40800115 	stw	r2,4(r8)
 80084d0:	8c400044 	addi	r17,r17,1
 80084d4:	44000015 	stw	r16,0(r8)
 80084d8:	d8c02015 	stw	r3,128(sp)
 80084dc:	dc401f15 	stw	r17,124(sp)
 80084e0:	008001c4 	movi	r2,7
 80084e4:	14416b16 	blt	r2,r17,8008a94 <___vfprintf_internal_r+0x15e8>
 80084e8:	42000204 	addi	r8,r8,8
 80084ec:	d8803717 	ldw	r2,220(sp)
 80084f0:	d9003417 	ldw	r4,208(sp)
 80084f4:	8c400044 	addi	r17,r17,1
 80084f8:	10c7883a 	add	r3,r2,r3
 80084fc:	40800115 	stw	r2,4(r8)
 8008500:	41000015 	stw	r4,0(r8)
 8008504:	d8c02015 	stw	r3,128(sp)
 8008508:	dc401f15 	stw	r17,124(sp)
 800850c:	008001c4 	movi	r2,7
 8008510:	14416916 	blt	r2,r17,8008ab8 <___vfprintf_internal_r+0x160c>
 8008514:	45800204 	addi	r22,r8,8
 8008518:	d9003617 	ldw	r4,216(sp)
 800851c:	d9403817 	ldw	r5,224(sp)
 8008520:	000d883a 	mov	r6,zero
 8008524:	000f883a 	mov	r7,zero
 8008528:	d8c03c15 	stw	r3,240(sp)
 800852c:	8005be00 	call	8005be0 <__eqdf2>
 8008530:	d8c03c17 	ldw	r3,240(sp)
 8008534:	1000bc26 	beq	r2,zero,8008828 <___vfprintf_internal_r+0x137c>
 8008538:	d9403317 	ldw	r5,204(sp)
 800853c:	84000044 	addi	r16,r16,1
 8008540:	8c400044 	addi	r17,r17,1
 8008544:	28bfffc4 	addi	r2,r5,-1
 8008548:	1887883a 	add	r3,r3,r2
 800854c:	b0800115 	stw	r2,4(r22)
 8008550:	b4000015 	stw	r16,0(r22)
 8008554:	d8c02015 	stw	r3,128(sp)
 8008558:	dc401f15 	stw	r17,124(sp)
 800855c:	008001c4 	movi	r2,7
 8008560:	14414316 	blt	r2,r17,8008a70 <___vfprintf_internal_r+0x15c4>
 8008564:	b5800204 	addi	r22,r22,8
 8008568:	d9003a17 	ldw	r4,232(sp)
 800856c:	df0022c4 	addi	fp,sp,139
 8008570:	8c400044 	addi	r17,r17,1
 8008574:	20c7883a 	add	r3,r4,r3
 8008578:	b7000015 	stw	fp,0(r22)
 800857c:	b1000115 	stw	r4,4(r22)
 8008580:	d8c02015 	stw	r3,128(sp)
 8008584:	dc401f15 	stw	r17,124(sp)
 8008588:	008001c4 	movi	r2,7
 800858c:	14400e16 	blt	r2,r17,80085c8 <___vfprintf_internal_r+0x111c>
 8008590:	b2000204 	addi	r8,r22,8
 8008594:	003e3a06 	br	8007e80 <__alt_data_end+0xfc007e80>
 8008598:	01020074 	movhi	r4,2049
 800859c:	21173484 	addi	r4,r4,23762
 80085a0:	d9002b15 	stw	r4,172(sp)
 80085a4:	d9002b17 	ldw	r4,172(sp)
 80085a8:	1c07883a 	add	r3,r3,r16
 80085ac:	44000115 	stw	r16,4(r8)
 80085b0:	41000015 	stw	r4,0(r8)
 80085b4:	10800044 	addi	r2,r2,1
 80085b8:	d8c02015 	stw	r3,128(sp)
 80085bc:	d8801f15 	stw	r2,124(sp)
 80085c0:	010001c4 	movi	r4,7
 80085c4:	20be2d0e 	bge	r4,r2,8007e7c <__alt_data_end+0xfc007e7c>
 80085c8:	d9002c17 	ldw	r4,176(sp)
 80085cc:	d9801e04 	addi	r6,sp,120
 80085d0:	b80b883a 	mov	r5,r23
 80085d4:	800ea340 	call	800ea34 <__sprint_r>
 80085d8:	103cb61e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 80085dc:	d8c02017 	ldw	r3,128(sp)
 80085e0:	da000404 	addi	r8,sp,16
 80085e4:	003e2606 	br	8007e80 <__alt_data_end+0xfc007e80>
 80085e8:	d9002c17 	ldw	r4,176(sp)
 80085ec:	d9801e04 	addi	r6,sp,120
 80085f0:	b80b883a 	mov	r5,r23
 80085f4:	800ea340 	call	800ea34 <__sprint_r>
 80085f8:	103e5d26 	beq	r2,zero,8007f70 <__alt_data_end+0xfc007f70>
 80085fc:	003cad06 	br	80078b4 <__alt_data_end+0xfc0078b4>
 8008600:	d9002c17 	ldw	r4,176(sp)
 8008604:	d9801e04 	addi	r6,sp,120
 8008608:	b80b883a 	mov	r5,r23
 800860c:	800ea340 	call	800ea34 <__sprint_r>
 8008610:	103ca81e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008614:	d8c02017 	ldw	r3,128(sp)
 8008618:	da000404 	addi	r8,sp,16
 800861c:	003e0b06 	br	8007e4c <__alt_data_end+0xfc007e4c>
 8008620:	d9002c17 	ldw	r4,176(sp)
 8008624:	d9801e04 	addi	r6,sp,120
 8008628:	b80b883a 	mov	r5,r23
 800862c:	800ea340 	call	800ea34 <__sprint_r>
 8008630:	103ca01e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008634:	d8c02017 	ldw	r3,128(sp)
 8008638:	da000404 	addi	r8,sp,16
 800863c:	003dbd06 	br	8007d34 <__alt_data_end+0xfc007d34>
 8008640:	d9002c17 	ldw	r4,176(sp)
 8008644:	d9801e04 	addi	r6,sp,120
 8008648:	b80b883a 	mov	r5,r23
 800864c:	800ea340 	call	800ea34 <__sprint_r>
 8008650:	103c981e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008654:	d8c02017 	ldw	r3,128(sp)
 8008658:	da000404 	addi	r8,sp,16
 800865c:	003dc306 	br	8007d6c <__alt_data_end+0xfc007d6c>
 8008660:	d8802917 	ldw	r2,164(sp)
 8008664:	d8002785 	stb	zero,158(sp)
 8008668:	103f0616 	blt	r2,zero,8008284 <__alt_data_end+0xfc008284>
 800866c:	00ffdfc4 	movi	r3,-129
 8008670:	9d84b03a 	or	r2,r19,r22
 8008674:	90e4703a 	and	r18,r18,r3
 8008678:	103c6b26 	beq	r2,zero,8007828 <__alt_data_end+0xfc007828>
 800867c:	0039883a 	mov	fp,zero
 8008680:	003e7406 	br	8008054 <__alt_data_end+0xfc008054>
 8008684:	9080040c 	andi	r2,r18,16
 8008688:	1001b326 	beq	r2,zero,8008d58 <___vfprintf_internal_r+0x18ac>
 800868c:	d9002d17 	ldw	r4,180(sp)
 8008690:	d9402917 	ldw	r5,164(sp)
 8008694:	d8002785 	stb	zero,158(sp)
 8008698:	20800104 	addi	r2,r4,4
 800869c:	24c00017 	ldw	r19,0(r4)
 80086a0:	002d883a 	mov	r22,zero
 80086a4:	2801b516 	blt	r5,zero,8008d7c <___vfprintf_internal_r+0x18d0>
 80086a8:	00ffdfc4 	movi	r3,-129
 80086ac:	d8802d15 	stw	r2,180(sp)
 80086b0:	90e4703a 	and	r18,r18,r3
 80086b4:	983d2726 	beq	r19,zero,8007b54 <__alt_data_end+0xfc007b54>
 80086b8:	0039883a 	mov	fp,zero
 80086bc:	003d2a06 	br	8007b68 <__alt_data_end+0xfc007b68>
 80086c0:	dc402617 	ldw	r17,152(sp)
 80086c4:	0441d30e 	bge	zero,r17,8008e14 <___vfprintf_internal_r+0x1968>
 80086c8:	dc403217 	ldw	r17,200(sp)
 80086cc:	d8803317 	ldw	r2,204(sp)
 80086d0:	1440010e 	bge	r2,r17,80086d8 <___vfprintf_internal_r+0x122c>
 80086d4:	1023883a 	mov	r17,r2
 80086d8:	04400a0e 	bge	zero,r17,8008704 <___vfprintf_internal_r+0x1258>
 80086dc:	d8801f17 	ldw	r2,124(sp)
 80086e0:	1c47883a 	add	r3,r3,r17
 80086e4:	44000015 	stw	r16,0(r8)
 80086e8:	10800044 	addi	r2,r2,1
 80086ec:	44400115 	stw	r17,4(r8)
 80086f0:	d8c02015 	stw	r3,128(sp)
 80086f4:	d8801f15 	stw	r2,124(sp)
 80086f8:	010001c4 	movi	r4,7
 80086fc:	20826516 	blt	r4,r2,8009094 <___vfprintf_internal_r+0x1be8>
 8008700:	42000204 	addi	r8,r8,8
 8008704:	88026116 	blt	r17,zero,800908c <___vfprintf_internal_r+0x1be0>
 8008708:	d9003217 	ldw	r4,200(sp)
 800870c:	2463c83a 	sub	r17,r4,r17
 8008710:	04407b0e 	bge	zero,r17,8008900 <___vfprintf_internal_r+0x1454>
 8008714:	05800404 	movi	r22,16
 8008718:	d8801f17 	ldw	r2,124(sp)
 800871c:	b4419d0e 	bge	r22,r17,8008d94 <___vfprintf_internal_r+0x18e8>
 8008720:	01020074 	movhi	r4,2049
 8008724:	21173484 	addi	r4,r4,23762
 8008728:	d9002b15 	stw	r4,172(sp)
 800872c:	070001c4 	movi	fp,7
 8008730:	dcc02c17 	ldw	r19,176(sp)
 8008734:	00000306 	br	8008744 <___vfprintf_internal_r+0x1298>
 8008738:	42000204 	addi	r8,r8,8
 800873c:	8c7ffc04 	addi	r17,r17,-16
 8008740:	b441970e 	bge	r22,r17,8008da0 <___vfprintf_internal_r+0x18f4>
 8008744:	18c00404 	addi	r3,r3,16
 8008748:	10800044 	addi	r2,r2,1
 800874c:	45000015 	stw	r20,0(r8)
 8008750:	45800115 	stw	r22,4(r8)
 8008754:	d8c02015 	stw	r3,128(sp)
 8008758:	d8801f15 	stw	r2,124(sp)
 800875c:	e0bff60e 	bge	fp,r2,8008738 <__alt_data_end+0xfc008738>
 8008760:	d9801e04 	addi	r6,sp,120
 8008764:	b80b883a 	mov	r5,r23
 8008768:	9809883a 	mov	r4,r19
 800876c:	800ea340 	call	800ea34 <__sprint_r>
 8008770:	103c501e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008774:	d8c02017 	ldw	r3,128(sp)
 8008778:	d8801f17 	ldw	r2,124(sp)
 800877c:	da000404 	addi	r8,sp,16
 8008780:	003fee06 	br	800873c <__alt_data_end+0xfc00873c>
 8008784:	d9002c17 	ldw	r4,176(sp)
 8008788:	d9801e04 	addi	r6,sp,120
 800878c:	b80b883a 	mov	r5,r23
 8008790:	800ea340 	call	800ea34 <__sprint_r>
 8008794:	103c471e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008798:	d8c02017 	ldw	r3,128(sp)
 800879c:	df002787 	ldb	fp,158(sp)
 80087a0:	da000404 	addi	r8,sp,16
 80087a4:	003d5606 	br	8007d00 <__alt_data_end+0xfc007d00>
 80087a8:	9080040c 	andi	r2,r18,16
 80087ac:	10016126 	beq	r2,zero,8008d34 <___vfprintf_internal_r+0x1888>
 80087b0:	d8802d17 	ldw	r2,180(sp)
 80087b4:	14c00017 	ldw	r19,0(r2)
 80087b8:	10800104 	addi	r2,r2,4
 80087bc:	d8802d15 	stw	r2,180(sp)
 80087c0:	982dd7fa 	srai	r22,r19,31
 80087c4:	b005883a 	mov	r2,r22
 80087c8:	003c8206 	br	80079d4 <__alt_data_end+0xfc0079d4>
 80087cc:	9080040c 	andi	r2,r18,16
 80087d0:	10003526 	beq	r2,zero,80088a8 <___vfprintf_internal_r+0x13fc>
 80087d4:	d9402d17 	ldw	r5,180(sp)
 80087d8:	d8c02917 	ldw	r3,164(sp)
 80087dc:	d8002785 	stb	zero,158(sp)
 80087e0:	28800104 	addi	r2,r5,4
 80087e4:	2cc00017 	ldw	r19,0(r5)
 80087e8:	002d883a 	mov	r22,zero
 80087ec:	18003716 	blt	r3,zero,80088cc <___vfprintf_internal_r+0x1420>
 80087f0:	00ffdfc4 	movi	r3,-129
 80087f4:	d8802d15 	stw	r2,180(sp)
 80087f8:	90e4703a 	and	r18,r18,r3
 80087fc:	0039883a 	mov	fp,zero
 8008800:	983df326 	beq	r19,zero,8007fd0 <__alt_data_end+0xfc007fd0>
 8008804:	00800244 	movi	r2,9
 8008808:	14fc7b36 	bltu	r2,r19,80079f8 <__alt_data_end+0xfc0079f8>
 800880c:	d8c02817 	ldw	r3,160(sp)
 8008810:	dc001dc4 	addi	r16,sp,119
 8008814:	9cc00c04 	addi	r19,r19,48
 8008818:	1c07c83a 	sub	r3,r3,r16
 800881c:	dcc01dc5 	stb	r19,119(sp)
 8008820:	d8c02e15 	stw	r3,184(sp)
 8008824:	003ce806 	br	8007bc8 <__alt_data_end+0xfc007bc8>
 8008828:	d8803317 	ldw	r2,204(sp)
 800882c:	143fffc4 	addi	r16,r2,-1
 8008830:	043f4d0e 	bge	zero,r16,8008568 <__alt_data_end+0xfc008568>
 8008834:	07000404 	movi	fp,16
 8008838:	e400810e 	bge	fp,r16,8008a40 <___vfprintf_internal_r+0x1594>
 800883c:	01420074 	movhi	r5,2049
 8008840:	29573484 	addi	r5,r5,23762
 8008844:	d9402b15 	stw	r5,172(sp)
 8008848:	01c001c4 	movi	r7,7
 800884c:	dcc02c17 	ldw	r19,176(sp)
 8008850:	00000306 	br	8008860 <___vfprintf_internal_r+0x13b4>
 8008854:	b5800204 	addi	r22,r22,8
 8008858:	843ffc04 	addi	r16,r16,-16
 800885c:	e4007b0e 	bge	fp,r16,8008a4c <___vfprintf_internal_r+0x15a0>
 8008860:	18c00404 	addi	r3,r3,16
 8008864:	8c400044 	addi	r17,r17,1
 8008868:	b5000015 	stw	r20,0(r22)
 800886c:	b7000115 	stw	fp,4(r22)
 8008870:	d8c02015 	stw	r3,128(sp)
 8008874:	dc401f15 	stw	r17,124(sp)
 8008878:	3c7ff60e 	bge	r7,r17,8008854 <__alt_data_end+0xfc008854>
 800887c:	d9801e04 	addi	r6,sp,120
 8008880:	b80b883a 	mov	r5,r23
 8008884:	9809883a 	mov	r4,r19
 8008888:	d9c03c15 	stw	r7,240(sp)
 800888c:	800ea340 	call	800ea34 <__sprint_r>
 8008890:	d9c03c17 	ldw	r7,240(sp)
 8008894:	103c071e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008898:	d8c02017 	ldw	r3,128(sp)
 800889c:	dc401f17 	ldw	r17,124(sp)
 80088a0:	dd800404 	addi	r22,sp,16
 80088a4:	003fec06 	br	8008858 <__alt_data_end+0xfc008858>
 80088a8:	9080100c 	andi	r2,r18,64
 80088ac:	d8002785 	stb	zero,158(sp)
 80088b0:	10010e26 	beq	r2,zero,8008cec <___vfprintf_internal_r+0x1840>
 80088b4:	d9002d17 	ldw	r4,180(sp)
 80088b8:	d9402917 	ldw	r5,164(sp)
 80088bc:	002d883a 	mov	r22,zero
 80088c0:	20800104 	addi	r2,r4,4
 80088c4:	24c0000b 	ldhu	r19,0(r4)
 80088c8:	283fc90e 	bge	r5,zero,80087f0 <__alt_data_end+0xfc0087f0>
 80088cc:	d8802d15 	stw	r2,180(sp)
 80088d0:	0039883a 	mov	fp,zero
 80088d4:	9d84b03a 	or	r2,r19,r22
 80088d8:	103c461e 	bne	r2,zero,80079f4 <__alt_data_end+0xfc0079f4>
 80088dc:	00800044 	movi	r2,1
 80088e0:	003e6c06 	br	8008294 <__alt_data_end+0xfc008294>
 80088e4:	d9002c17 	ldw	r4,176(sp)
 80088e8:	d9801e04 	addi	r6,sp,120
 80088ec:	b80b883a 	mov	r5,r23
 80088f0:	800ea340 	call	800ea34 <__sprint_r>
 80088f4:	103bef1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 80088f8:	d8c02017 	ldw	r3,128(sp)
 80088fc:	da000404 	addi	r8,sp,16
 8008900:	d9003217 	ldw	r4,200(sp)
 8008904:	d8802617 	ldw	r2,152(sp)
 8008908:	d9403317 	ldw	r5,204(sp)
 800890c:	8123883a 	add	r17,r16,r4
 8008910:	11400216 	blt	r2,r5,800891c <___vfprintf_internal_r+0x1470>
 8008914:	9100004c 	andi	r4,r18,1
 8008918:	20000d26 	beq	r4,zero,8008950 <___vfprintf_internal_r+0x14a4>
 800891c:	d9003717 	ldw	r4,220(sp)
 8008920:	d9403417 	ldw	r5,208(sp)
 8008924:	1907883a 	add	r3,r3,r4
 8008928:	d9001f17 	ldw	r4,124(sp)
 800892c:	41400015 	stw	r5,0(r8)
 8008930:	d9403717 	ldw	r5,220(sp)
 8008934:	21000044 	addi	r4,r4,1
 8008938:	d8c02015 	stw	r3,128(sp)
 800893c:	41400115 	stw	r5,4(r8)
 8008940:	d9001f15 	stw	r4,124(sp)
 8008944:	014001c4 	movi	r5,7
 8008948:	2901e816 	blt	r5,r4,80090ec <___vfprintf_internal_r+0x1c40>
 800894c:	42000204 	addi	r8,r8,8
 8008950:	d9003317 	ldw	r4,204(sp)
 8008954:	8121883a 	add	r16,r16,r4
 8008958:	2085c83a 	sub	r2,r4,r2
 800895c:	8461c83a 	sub	r16,r16,r17
 8008960:	1400010e 	bge	r2,r16,8008968 <___vfprintf_internal_r+0x14bc>
 8008964:	1021883a 	mov	r16,r2
 8008968:	04000a0e 	bge	zero,r16,8008994 <___vfprintf_internal_r+0x14e8>
 800896c:	d9001f17 	ldw	r4,124(sp)
 8008970:	1c07883a 	add	r3,r3,r16
 8008974:	44400015 	stw	r17,0(r8)
 8008978:	21000044 	addi	r4,r4,1
 800897c:	44000115 	stw	r16,4(r8)
 8008980:	d8c02015 	stw	r3,128(sp)
 8008984:	d9001f15 	stw	r4,124(sp)
 8008988:	014001c4 	movi	r5,7
 800898c:	2901fb16 	blt	r5,r4,800917c <___vfprintf_internal_r+0x1cd0>
 8008990:	42000204 	addi	r8,r8,8
 8008994:	8001f716 	blt	r16,zero,8009174 <___vfprintf_internal_r+0x1cc8>
 8008998:	1421c83a 	sub	r16,r2,r16
 800899c:	043d380e 	bge	zero,r16,8007e80 <__alt_data_end+0xfc007e80>
 80089a0:	04400404 	movi	r17,16
 80089a4:	d8801f17 	ldw	r2,124(sp)
 80089a8:	8c3efb0e 	bge	r17,r16,8008598 <__alt_data_end+0xfc008598>
 80089ac:	01420074 	movhi	r5,2049
 80089b0:	29573484 	addi	r5,r5,23762
 80089b4:	d9402b15 	stw	r5,172(sp)
 80089b8:	058001c4 	movi	r22,7
 80089bc:	dcc02c17 	ldw	r19,176(sp)
 80089c0:	00000306 	br	80089d0 <___vfprintf_internal_r+0x1524>
 80089c4:	42000204 	addi	r8,r8,8
 80089c8:	843ffc04 	addi	r16,r16,-16
 80089cc:	8c3ef50e 	bge	r17,r16,80085a4 <__alt_data_end+0xfc0085a4>
 80089d0:	18c00404 	addi	r3,r3,16
 80089d4:	10800044 	addi	r2,r2,1
 80089d8:	45000015 	stw	r20,0(r8)
 80089dc:	44400115 	stw	r17,4(r8)
 80089e0:	d8c02015 	stw	r3,128(sp)
 80089e4:	d8801f15 	stw	r2,124(sp)
 80089e8:	b0bff60e 	bge	r22,r2,80089c4 <__alt_data_end+0xfc0089c4>
 80089ec:	d9801e04 	addi	r6,sp,120
 80089f0:	b80b883a 	mov	r5,r23
 80089f4:	9809883a 	mov	r4,r19
 80089f8:	800ea340 	call	800ea34 <__sprint_r>
 80089fc:	103bad1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008a00:	d8c02017 	ldw	r3,128(sp)
 8008a04:	d8801f17 	ldw	r2,124(sp)
 8008a08:	da000404 	addi	r8,sp,16
 8008a0c:	003fee06 	br	80089c8 <__alt_data_end+0xfc0089c8>
 8008a10:	9088703a 	and	r4,r18,r2
 8008a14:	203eab1e 	bne	r4,zero,80084c4 <__alt_data_end+0xfc0084c4>
 8008a18:	dc401f17 	ldw	r17,124(sp)
 8008a1c:	40800115 	stw	r2,4(r8)
 8008a20:	44000015 	stw	r16,0(r8)
 8008a24:	8c400044 	addi	r17,r17,1
 8008a28:	d8c02015 	stw	r3,128(sp)
 8008a2c:	dc401f15 	stw	r17,124(sp)
 8008a30:	008001c4 	movi	r2,7
 8008a34:	14400e16 	blt	r2,r17,8008a70 <___vfprintf_internal_r+0x15c4>
 8008a38:	45800204 	addi	r22,r8,8
 8008a3c:	003eca06 	br	8008568 <__alt_data_end+0xfc008568>
 8008a40:	01020074 	movhi	r4,2049
 8008a44:	21173484 	addi	r4,r4,23762
 8008a48:	d9002b15 	stw	r4,172(sp)
 8008a4c:	d8802b17 	ldw	r2,172(sp)
 8008a50:	1c07883a 	add	r3,r3,r16
 8008a54:	8c400044 	addi	r17,r17,1
 8008a58:	b0800015 	stw	r2,0(r22)
 8008a5c:	b4000115 	stw	r16,4(r22)
 8008a60:	d8c02015 	stw	r3,128(sp)
 8008a64:	dc401f15 	stw	r17,124(sp)
 8008a68:	008001c4 	movi	r2,7
 8008a6c:	147ebd0e 	bge	r2,r17,8008564 <__alt_data_end+0xfc008564>
 8008a70:	d9002c17 	ldw	r4,176(sp)
 8008a74:	d9801e04 	addi	r6,sp,120
 8008a78:	b80b883a 	mov	r5,r23
 8008a7c:	800ea340 	call	800ea34 <__sprint_r>
 8008a80:	103b8c1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008a84:	d8c02017 	ldw	r3,128(sp)
 8008a88:	dc401f17 	ldw	r17,124(sp)
 8008a8c:	dd800404 	addi	r22,sp,16
 8008a90:	003eb506 	br	8008568 <__alt_data_end+0xfc008568>
 8008a94:	d9002c17 	ldw	r4,176(sp)
 8008a98:	d9801e04 	addi	r6,sp,120
 8008a9c:	b80b883a 	mov	r5,r23
 8008aa0:	800ea340 	call	800ea34 <__sprint_r>
 8008aa4:	103b831e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008aa8:	d8c02017 	ldw	r3,128(sp)
 8008aac:	dc401f17 	ldw	r17,124(sp)
 8008ab0:	da000404 	addi	r8,sp,16
 8008ab4:	003e8d06 	br	80084ec <__alt_data_end+0xfc0084ec>
 8008ab8:	d9002c17 	ldw	r4,176(sp)
 8008abc:	d9801e04 	addi	r6,sp,120
 8008ac0:	b80b883a 	mov	r5,r23
 8008ac4:	800ea340 	call	800ea34 <__sprint_r>
 8008ac8:	103b7a1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008acc:	d8c02017 	ldw	r3,128(sp)
 8008ad0:	dc401f17 	ldw	r17,124(sp)
 8008ad4:	dd800404 	addi	r22,sp,16
 8008ad8:	003e8f06 	br	8008518 <__alt_data_end+0xfc008518>
 8008adc:	0027883a 	mov	r19,zero
 8008ae0:	003f4a06 	br	800880c <__alt_data_end+0xfc00880c>
 8008ae4:	d9002c17 	ldw	r4,176(sp)
 8008ae8:	d9801e04 	addi	r6,sp,120
 8008aec:	b80b883a 	mov	r5,r23
 8008af0:	800ea340 	call	800ea34 <__sprint_r>
 8008af4:	103b6f1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008af8:	d8c02017 	ldw	r3,128(sp)
 8008afc:	da000404 	addi	r8,sp,16
 8008b00:	003c9d06 	br	8007d78 <__alt_data_end+0xfc007d78>
 8008b04:	04e7c83a 	sub	r19,zero,r19
 8008b08:	9804c03a 	cmpne	r2,r19,zero
 8008b0c:	05adc83a 	sub	r22,zero,r22
 8008b10:	b0adc83a 	sub	r22,r22,r2
 8008b14:	d8802917 	ldw	r2,164(sp)
 8008b18:	07000b44 	movi	fp,45
 8008b1c:	df002785 	stb	fp,158(sp)
 8008b20:	10017b16 	blt	r2,zero,8009110 <___vfprintf_internal_r+0x1c64>
 8008b24:	00bfdfc4 	movi	r2,-129
 8008b28:	90a4703a 	and	r18,r18,r2
 8008b2c:	003bb106 	br	80079f4 <__alt_data_end+0xfc0079f4>
 8008b30:	d9003617 	ldw	r4,216(sp)
 8008b34:	d9403817 	ldw	r5,224(sp)
 8008b38:	da003d15 	stw	r8,244(sp)
 8008b3c:	80031640 	call	8003164 <__fpclassifyd>
 8008b40:	da003d17 	ldw	r8,244(sp)
 8008b44:	1000f026 	beq	r2,zero,8008f08 <___vfprintf_internal_r+0x1a5c>
 8008b48:	d9002917 	ldw	r4,164(sp)
 8008b4c:	05bff7c4 	movi	r22,-33
 8008b50:	00bfffc4 	movi	r2,-1
 8008b54:	8dac703a 	and	r22,r17,r22
 8008b58:	20820026 	beq	r4,r2,800935c <___vfprintf_internal_r+0x1eb0>
 8008b5c:	008011c4 	movi	r2,71
 8008b60:	b081f726 	beq	r22,r2,8009340 <___vfprintf_internal_r+0x1e94>
 8008b64:	d9003817 	ldw	r4,224(sp)
 8008b68:	90c04014 	ori	r3,r18,256
 8008b6c:	d8c02b15 	stw	r3,172(sp)
 8008b70:	20021516 	blt	r4,zero,80093c8 <___vfprintf_internal_r+0x1f1c>
 8008b74:	dcc03817 	ldw	r19,224(sp)
 8008b78:	d8002a05 	stb	zero,168(sp)
 8008b7c:	00801984 	movi	r2,102
 8008b80:	8881f926 	beq	r17,r2,8009368 <___vfprintf_internal_r+0x1ebc>
 8008b84:	00801184 	movi	r2,70
 8008b88:	88821c26 	beq	r17,r2,80093fc <___vfprintf_internal_r+0x1f50>
 8008b8c:	00801144 	movi	r2,69
 8008b90:	b081ef26 	beq	r22,r2,8009350 <___vfprintf_internal_r+0x1ea4>
 8008b94:	d8c02917 	ldw	r3,164(sp)
 8008b98:	d8802104 	addi	r2,sp,132
 8008b9c:	d8800315 	stw	r2,12(sp)
 8008ba0:	d9403617 	ldw	r5,216(sp)
 8008ba4:	d8802504 	addi	r2,sp,148
 8008ba8:	d9002c17 	ldw	r4,176(sp)
 8008bac:	d8800215 	stw	r2,8(sp)
 8008bb0:	d8802604 	addi	r2,sp,152
 8008bb4:	d8c00015 	stw	r3,0(sp)
 8008bb8:	d8800115 	stw	r2,4(sp)
 8008bbc:	01c00084 	movi	r7,2
 8008bc0:	980d883a 	mov	r6,r19
 8008bc4:	d8c03c15 	stw	r3,240(sp)
 8008bc8:	da003d15 	stw	r8,244(sp)
 8008bcc:	8009ad00 	call	8009ad0 <_dtoa_r>
 8008bd0:	1021883a 	mov	r16,r2
 8008bd4:	008019c4 	movi	r2,103
 8008bd8:	d8c03c17 	ldw	r3,240(sp)
 8008bdc:	da003d17 	ldw	r8,244(sp)
 8008be0:	88817126 	beq	r17,r2,80091a8 <___vfprintf_internal_r+0x1cfc>
 8008be4:	008011c4 	movi	r2,71
 8008be8:	88829226 	beq	r17,r2,8009634 <___vfprintf_internal_r+0x2188>
 8008bec:	80f9883a 	add	fp,r16,r3
 8008bf0:	d9003617 	ldw	r4,216(sp)
 8008bf4:	000d883a 	mov	r6,zero
 8008bf8:	000f883a 	mov	r7,zero
 8008bfc:	980b883a 	mov	r5,r19
 8008c00:	da003d15 	stw	r8,244(sp)
 8008c04:	8005be00 	call	8005be0 <__eqdf2>
 8008c08:	da003d17 	ldw	r8,244(sp)
 8008c0c:	10018d26 	beq	r2,zero,8009244 <___vfprintf_internal_r+0x1d98>
 8008c10:	d8802117 	ldw	r2,132(sp)
 8008c14:	1700062e 	bgeu	r2,fp,8008c30 <___vfprintf_internal_r+0x1784>
 8008c18:	01000c04 	movi	r4,48
 8008c1c:	10c00044 	addi	r3,r2,1
 8008c20:	d8c02115 	stw	r3,132(sp)
 8008c24:	11000005 	stb	r4,0(r2)
 8008c28:	d8802117 	ldw	r2,132(sp)
 8008c2c:	173ffb36 	bltu	r2,fp,8008c1c <__alt_data_end+0xfc008c1c>
 8008c30:	1405c83a 	sub	r2,r2,r16
 8008c34:	d8803315 	stw	r2,204(sp)
 8008c38:	008011c4 	movi	r2,71
 8008c3c:	b0817626 	beq	r22,r2,8009218 <___vfprintf_internal_r+0x1d6c>
 8008c40:	00801944 	movi	r2,101
 8008c44:	1442810e 	bge	r2,r17,800964c <___vfprintf_internal_r+0x21a0>
 8008c48:	d8c02617 	ldw	r3,152(sp)
 8008c4c:	00801984 	movi	r2,102
 8008c50:	d8c03215 	stw	r3,200(sp)
 8008c54:	8881fe26 	beq	r17,r2,8009450 <___vfprintf_internal_r+0x1fa4>
 8008c58:	d8c03217 	ldw	r3,200(sp)
 8008c5c:	d9003317 	ldw	r4,204(sp)
 8008c60:	1901dd16 	blt	r3,r4,80093d8 <___vfprintf_internal_r+0x1f2c>
 8008c64:	9480004c 	andi	r18,r18,1
 8008c68:	90022b1e 	bne	r18,zero,8009518 <___vfprintf_internal_r+0x206c>
 8008c6c:	1805883a 	mov	r2,r3
 8008c70:	18028016 	blt	r3,zero,8009674 <___vfprintf_internal_r+0x21c8>
 8008c74:	d8c03217 	ldw	r3,200(sp)
 8008c78:	044019c4 	movi	r17,103
 8008c7c:	d8c02e15 	stw	r3,184(sp)
 8008c80:	df002a07 	ldb	fp,168(sp)
 8008c84:	e001531e 	bne	fp,zero,80091d4 <___vfprintf_internal_r+0x1d28>
 8008c88:	df002783 	ldbu	fp,158(sp)
 8008c8c:	d8802a15 	stw	r2,168(sp)
 8008c90:	dc802b17 	ldw	r18,172(sp)
 8008c94:	d8002915 	stw	zero,164(sp)
 8008c98:	003bd106 	br	8007be0 <__alt_data_end+0xfc007be0>
 8008c9c:	d8802d17 	ldw	r2,180(sp)
 8008ca0:	d8c02d17 	ldw	r3,180(sp)
 8008ca4:	d9002d17 	ldw	r4,180(sp)
 8008ca8:	10800017 	ldw	r2,0(r2)
 8008cac:	18c00117 	ldw	r3,4(r3)
 8008cb0:	21000204 	addi	r4,r4,8
 8008cb4:	d8803615 	stw	r2,216(sp)
 8008cb8:	d8c03815 	stw	r3,224(sp)
 8008cbc:	d9002d15 	stw	r4,180(sp)
 8008cc0:	003b7506 	br	8007a98 <__alt_data_end+0xfc007a98>
 8008cc4:	ac400007 	ldb	r17,0(r21)
 8008cc8:	003a5906 	br	8007630 <__alt_data_end+0xfc007630>
 8008ccc:	9080100c 	andi	r2,r18,64
 8008cd0:	1000a826 	beq	r2,zero,8008f74 <___vfprintf_internal_r+0x1ac8>
 8008cd4:	d9002d17 	ldw	r4,180(sp)
 8008cd8:	002d883a 	mov	r22,zero
 8008cdc:	24c0000b 	ldhu	r19,0(r4)
 8008ce0:	21000104 	addi	r4,r4,4
 8008ce4:	d9002d15 	stw	r4,180(sp)
 8008ce8:	003ccb06 	br	8008018 <__alt_data_end+0xfc008018>
 8008cec:	d8c02d17 	ldw	r3,180(sp)
 8008cf0:	d9002917 	ldw	r4,164(sp)
 8008cf4:	002d883a 	mov	r22,zero
 8008cf8:	18800104 	addi	r2,r3,4
 8008cfc:	1cc00017 	ldw	r19,0(r3)
 8008d00:	203ebb0e 	bge	r4,zero,80087f0 <__alt_data_end+0xfc0087f0>
 8008d04:	003ef106 	br	80088cc <__alt_data_end+0xfc0088cc>
 8008d08:	9080040c 	andi	r2,r18,16
 8008d0c:	1000921e 	bne	r2,zero,8008f58 <___vfprintf_internal_r+0x1aac>
 8008d10:	9480100c 	andi	r18,r18,64
 8008d14:	90013926 	beq	r18,zero,80091fc <___vfprintf_internal_r+0x1d50>
 8008d18:	d9002d17 	ldw	r4,180(sp)
 8008d1c:	d9402f17 	ldw	r5,188(sp)
 8008d20:	20800017 	ldw	r2,0(r4)
 8008d24:	21000104 	addi	r4,r4,4
 8008d28:	d9002d15 	stw	r4,180(sp)
 8008d2c:	1140000d 	sth	r5,0(r2)
 8008d30:	003a1606 	br	800758c <__alt_data_end+0xfc00758c>
 8008d34:	9080100c 	andi	r2,r18,64
 8008d38:	10008026 	beq	r2,zero,8008f3c <___vfprintf_internal_r+0x1a90>
 8008d3c:	d8c02d17 	ldw	r3,180(sp)
 8008d40:	1cc0000f 	ldh	r19,0(r3)
 8008d44:	18c00104 	addi	r3,r3,4
 8008d48:	d8c02d15 	stw	r3,180(sp)
 8008d4c:	982dd7fa 	srai	r22,r19,31
 8008d50:	b005883a 	mov	r2,r22
 8008d54:	003b1f06 	br	80079d4 <__alt_data_end+0xfc0079d4>
 8008d58:	9080100c 	andi	r2,r18,64
 8008d5c:	d8002785 	stb	zero,158(sp)
 8008d60:	10008a1e 	bne	r2,zero,8008f8c <___vfprintf_internal_r+0x1ae0>
 8008d64:	d9402d17 	ldw	r5,180(sp)
 8008d68:	d8c02917 	ldw	r3,164(sp)
 8008d6c:	002d883a 	mov	r22,zero
 8008d70:	28800104 	addi	r2,r5,4
 8008d74:	2cc00017 	ldw	r19,0(r5)
 8008d78:	183e4b0e 	bge	r3,zero,80086a8 <__alt_data_end+0xfc0086a8>
 8008d7c:	9d86b03a 	or	r3,r19,r22
 8008d80:	d8802d15 	stw	r2,180(sp)
 8008d84:	183e4c1e 	bne	r3,zero,80086b8 <__alt_data_end+0xfc0086b8>
 8008d88:	0039883a 	mov	fp,zero
 8008d8c:	0005883a 	mov	r2,zero
 8008d90:	003d4006 	br	8008294 <__alt_data_end+0xfc008294>
 8008d94:	01420074 	movhi	r5,2049
 8008d98:	29573484 	addi	r5,r5,23762
 8008d9c:	d9402b15 	stw	r5,172(sp)
 8008da0:	d9402b17 	ldw	r5,172(sp)
 8008da4:	1c47883a 	add	r3,r3,r17
 8008da8:	10800044 	addi	r2,r2,1
 8008dac:	41400015 	stw	r5,0(r8)
 8008db0:	44400115 	stw	r17,4(r8)
 8008db4:	d8c02015 	stw	r3,128(sp)
 8008db8:	d8801f15 	stw	r2,124(sp)
 8008dbc:	010001c4 	movi	r4,7
 8008dc0:	20bec816 	blt	r4,r2,80088e4 <__alt_data_end+0xfc0088e4>
 8008dc4:	42000204 	addi	r8,r8,8
 8008dc8:	003ecd06 	br	8008900 <__alt_data_end+0xfc008900>
 8008dcc:	d9002917 	ldw	r4,164(sp)
 8008dd0:	d8002785 	stb	zero,158(sp)
 8008dd4:	203d2d16 	blt	r4,zero,800828c <__alt_data_end+0xfc00828c>
 8008dd8:	00bfdfc4 	movi	r2,-129
 8008ddc:	90a4703a 	and	r18,r18,r2
 8008de0:	003a9106 	br	8007828 <__alt_data_end+0xfc007828>
 8008de4:	01020074 	movhi	r4,2049
 8008de8:	21173484 	addi	r4,r4,23762
 8008dec:	d9002b15 	stw	r4,172(sp)
 8008df0:	003c0c06 	br	8007e24 <__alt_data_end+0xfc007e24>
 8008df4:	d9002c17 	ldw	r4,176(sp)
 8008df8:	d9801e04 	addi	r6,sp,120
 8008dfc:	b80b883a 	mov	r5,r23
 8008e00:	800ea340 	call	800ea34 <__sprint_r>
 8008e04:	103aab1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008e08:	d8c02017 	ldw	r3,128(sp)
 8008e0c:	da000404 	addi	r8,sp,16
 8008e10:	003d4106 	br	8008318 <__alt_data_end+0xfc008318>
 8008e14:	d8801f17 	ldw	r2,124(sp)
 8008e18:	01420074 	movhi	r5,2049
 8008e1c:	01000044 	movi	r4,1
 8008e20:	18c00044 	addi	r3,r3,1
 8008e24:	10800044 	addi	r2,r2,1
 8008e28:	29573404 	addi	r5,r5,23760
 8008e2c:	41000115 	stw	r4,4(r8)
 8008e30:	41400015 	stw	r5,0(r8)
 8008e34:	d8c02015 	stw	r3,128(sp)
 8008e38:	d8801f15 	stw	r2,124(sp)
 8008e3c:	010001c4 	movi	r4,7
 8008e40:	20805c16 	blt	r4,r2,8008fb4 <___vfprintf_internal_r+0x1b08>
 8008e44:	42000204 	addi	r8,r8,8
 8008e48:	8800041e 	bne	r17,zero,8008e5c <___vfprintf_internal_r+0x19b0>
 8008e4c:	d8803317 	ldw	r2,204(sp)
 8008e50:	1000021e 	bne	r2,zero,8008e5c <___vfprintf_internal_r+0x19b0>
 8008e54:	9080004c 	andi	r2,r18,1
 8008e58:	103c0926 	beq	r2,zero,8007e80 <__alt_data_end+0xfc007e80>
 8008e5c:	d9003717 	ldw	r4,220(sp)
 8008e60:	d8801f17 	ldw	r2,124(sp)
 8008e64:	d9403417 	ldw	r5,208(sp)
 8008e68:	20c7883a 	add	r3,r4,r3
 8008e6c:	10800044 	addi	r2,r2,1
 8008e70:	41000115 	stw	r4,4(r8)
 8008e74:	41400015 	stw	r5,0(r8)
 8008e78:	d8c02015 	stw	r3,128(sp)
 8008e7c:	d8801f15 	stw	r2,124(sp)
 8008e80:	010001c4 	movi	r4,7
 8008e84:	20812116 	blt	r4,r2,800930c <___vfprintf_internal_r+0x1e60>
 8008e88:	42000204 	addi	r8,r8,8
 8008e8c:	0463c83a 	sub	r17,zero,r17
 8008e90:	0440730e 	bge	zero,r17,8009060 <___vfprintf_internal_r+0x1bb4>
 8008e94:	05800404 	movi	r22,16
 8008e98:	b440860e 	bge	r22,r17,80090b4 <___vfprintf_internal_r+0x1c08>
 8008e9c:	01420074 	movhi	r5,2049
 8008ea0:	29573484 	addi	r5,r5,23762
 8008ea4:	d9402b15 	stw	r5,172(sp)
 8008ea8:	070001c4 	movi	fp,7
 8008eac:	dcc02c17 	ldw	r19,176(sp)
 8008eb0:	00000306 	br	8008ec0 <___vfprintf_internal_r+0x1a14>
 8008eb4:	42000204 	addi	r8,r8,8
 8008eb8:	8c7ffc04 	addi	r17,r17,-16
 8008ebc:	b440800e 	bge	r22,r17,80090c0 <___vfprintf_internal_r+0x1c14>
 8008ec0:	18c00404 	addi	r3,r3,16
 8008ec4:	10800044 	addi	r2,r2,1
 8008ec8:	45000015 	stw	r20,0(r8)
 8008ecc:	45800115 	stw	r22,4(r8)
 8008ed0:	d8c02015 	stw	r3,128(sp)
 8008ed4:	d8801f15 	stw	r2,124(sp)
 8008ed8:	e0bff60e 	bge	fp,r2,8008eb4 <__alt_data_end+0xfc008eb4>
 8008edc:	d9801e04 	addi	r6,sp,120
 8008ee0:	b80b883a 	mov	r5,r23
 8008ee4:	9809883a 	mov	r4,r19
 8008ee8:	800ea340 	call	800ea34 <__sprint_r>
 8008eec:	103a711e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008ef0:	d8c02017 	ldw	r3,128(sp)
 8008ef4:	d8801f17 	ldw	r2,124(sp)
 8008ef8:	da000404 	addi	r8,sp,16
 8008efc:	003fee06 	br	8008eb8 <__alt_data_end+0xfc008eb8>
 8008f00:	00bfffc4 	movi	r2,-1
 8008f04:	003a6f06 	br	80078c4 <__alt_data_end+0xfc0078c4>
 8008f08:	008011c4 	movi	r2,71
 8008f0c:	1440b816 	blt	r2,r17,80091f0 <___vfprintf_internal_r+0x1d44>
 8008f10:	04020074 	movhi	r16,2049
 8008f14:	84172604 	addi	r16,r16,23704
 8008f18:	00c000c4 	movi	r3,3
 8008f1c:	00bfdfc4 	movi	r2,-129
 8008f20:	d8c02a15 	stw	r3,168(sp)
 8008f24:	90a4703a 	and	r18,r18,r2
 8008f28:	df002783 	ldbu	fp,158(sp)
 8008f2c:	d8c02e15 	stw	r3,184(sp)
 8008f30:	d8002915 	stw	zero,164(sp)
 8008f34:	d8003215 	stw	zero,200(sp)
 8008f38:	003b2906 	br	8007be0 <__alt_data_end+0xfc007be0>
 8008f3c:	d9002d17 	ldw	r4,180(sp)
 8008f40:	24c00017 	ldw	r19,0(r4)
 8008f44:	21000104 	addi	r4,r4,4
 8008f48:	d9002d15 	stw	r4,180(sp)
 8008f4c:	982dd7fa 	srai	r22,r19,31
 8008f50:	b005883a 	mov	r2,r22
 8008f54:	003a9f06 	br	80079d4 <__alt_data_end+0xfc0079d4>
 8008f58:	d9402d17 	ldw	r5,180(sp)
 8008f5c:	d8c02f17 	ldw	r3,188(sp)
 8008f60:	28800017 	ldw	r2,0(r5)
 8008f64:	29400104 	addi	r5,r5,4
 8008f68:	d9402d15 	stw	r5,180(sp)
 8008f6c:	10c00015 	stw	r3,0(r2)
 8008f70:	00398606 	br	800758c <__alt_data_end+0xfc00758c>
 8008f74:	d9402d17 	ldw	r5,180(sp)
 8008f78:	002d883a 	mov	r22,zero
 8008f7c:	2cc00017 	ldw	r19,0(r5)
 8008f80:	29400104 	addi	r5,r5,4
 8008f84:	d9402d15 	stw	r5,180(sp)
 8008f88:	003c2306 	br	8008018 <__alt_data_end+0xfc008018>
 8008f8c:	d8c02d17 	ldw	r3,180(sp)
 8008f90:	d9002917 	ldw	r4,164(sp)
 8008f94:	002d883a 	mov	r22,zero
 8008f98:	18800104 	addi	r2,r3,4
 8008f9c:	1cc0000b 	ldhu	r19,0(r3)
 8008fa0:	203dc10e 	bge	r4,zero,80086a8 <__alt_data_end+0xfc0086a8>
 8008fa4:	003f7506 	br	8008d7c <__alt_data_end+0xfc008d7c>
 8008fa8:	04020074 	movhi	r16,2049
 8008fac:	84172404 	addi	r16,r16,23696
 8008fb0:	003acc06 	br	8007ae4 <__alt_data_end+0xfc007ae4>
 8008fb4:	d9002c17 	ldw	r4,176(sp)
 8008fb8:	d9801e04 	addi	r6,sp,120
 8008fbc:	b80b883a 	mov	r5,r23
 8008fc0:	800ea340 	call	800ea34 <__sprint_r>
 8008fc4:	103a3b1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8008fc8:	dc402617 	ldw	r17,152(sp)
 8008fcc:	d8c02017 	ldw	r3,128(sp)
 8008fd0:	da000404 	addi	r8,sp,16
 8008fd4:	003f9c06 	br	8008e48 <__alt_data_end+0xfc008e48>
 8008fd8:	ac400043 	ldbu	r17,1(r21)
 8008fdc:	94800814 	ori	r18,r18,32
 8008fe0:	ad400044 	addi	r21,r21,1
 8008fe4:	8c403fcc 	andi	r17,r17,255
 8008fe8:	8c40201c 	xori	r17,r17,128
 8008fec:	8c7fe004 	addi	r17,r17,-128
 8008ff0:	00398f06 	br	8007630 <__alt_data_end+0xfc007630>
 8008ff4:	d8c02d15 	stw	r3,180(sp)
 8008ff8:	0039883a 	mov	fp,zero
 8008ffc:	003e3506 	br	80088d4 <__alt_data_end+0xfc0088d4>
 8009000:	d9002c17 	ldw	r4,176(sp)
 8009004:	d9801e04 	addi	r6,sp,120
 8009008:	b80b883a 	mov	r5,r23
 800900c:	800ea340 	call	800ea34 <__sprint_r>
 8009010:	103a281e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8009014:	d8c02017 	ldw	r3,128(sp)
 8009018:	da000404 	addi	r8,sp,16
 800901c:	003cd006 	br	8008360 <__alt_data_end+0xfc008360>
 8009020:	8009883a 	mov	r4,r16
 8009024:	da003d15 	stw	r8,244(sp)
 8009028:	80074140 	call	8007414 <strlen>
 800902c:	d8802e15 	stw	r2,184(sp)
 8009030:	da003d17 	ldw	r8,244(sp)
 8009034:	103c340e 	bge	r2,zero,8008108 <__alt_data_end+0xfc008108>
 8009038:	0005883a 	mov	r2,zero
 800903c:	003c3206 	br	8008108 <__alt_data_end+0xfc008108>
 8009040:	d9002c17 	ldw	r4,176(sp)
 8009044:	d9801e04 	addi	r6,sp,120
 8009048:	b80b883a 	mov	r5,r23
 800904c:	800ea340 	call	800ea34 <__sprint_r>
 8009050:	103a181e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8009054:	d8c02017 	ldw	r3,128(sp)
 8009058:	d8801f17 	ldw	r2,124(sp)
 800905c:	da000404 	addi	r8,sp,16
 8009060:	d9403317 	ldw	r5,204(sp)
 8009064:	10800044 	addi	r2,r2,1
 8009068:	44000015 	stw	r16,0(r8)
 800906c:	28c7883a 	add	r3,r5,r3
 8009070:	003b7d06 	br	8007e68 <__alt_data_end+0xfc007e68>
 8009074:	01020074 	movhi	r4,2049
 8009078:	21173884 	addi	r4,r4,23778
 800907c:	d9003515 	stw	r4,212(sp)
 8009080:	003b1406 	br	8007cd4 <__alt_data_end+0xfc007cd4>
 8009084:	013fffc4 	movi	r4,-1
 8009088:	003a3506 	br	8007960 <__alt_data_end+0xfc007960>
 800908c:	0023883a 	mov	r17,zero
 8009090:	003d9d06 	br	8008708 <__alt_data_end+0xfc008708>
 8009094:	d9002c17 	ldw	r4,176(sp)
 8009098:	d9801e04 	addi	r6,sp,120
 800909c:	b80b883a 	mov	r5,r23
 80090a0:	800ea340 	call	800ea34 <__sprint_r>
 80090a4:	103a031e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 80090a8:	d8c02017 	ldw	r3,128(sp)
 80090ac:	da000404 	addi	r8,sp,16
 80090b0:	003d9406 	br	8008704 <__alt_data_end+0xfc008704>
 80090b4:	01020074 	movhi	r4,2049
 80090b8:	21173484 	addi	r4,r4,23762
 80090bc:	d9002b15 	stw	r4,172(sp)
 80090c0:	d9002b17 	ldw	r4,172(sp)
 80090c4:	1c47883a 	add	r3,r3,r17
 80090c8:	10800044 	addi	r2,r2,1
 80090cc:	41000015 	stw	r4,0(r8)
 80090d0:	44400115 	stw	r17,4(r8)
 80090d4:	d8c02015 	stw	r3,128(sp)
 80090d8:	d8801f15 	stw	r2,124(sp)
 80090dc:	010001c4 	movi	r4,7
 80090e0:	20bfd716 	blt	r4,r2,8009040 <__alt_data_end+0xfc009040>
 80090e4:	42000204 	addi	r8,r8,8
 80090e8:	003fdd06 	br	8009060 <__alt_data_end+0xfc009060>
 80090ec:	d9002c17 	ldw	r4,176(sp)
 80090f0:	d9801e04 	addi	r6,sp,120
 80090f4:	b80b883a 	mov	r5,r23
 80090f8:	800ea340 	call	800ea34 <__sprint_r>
 80090fc:	1039ed1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8009100:	d8802617 	ldw	r2,152(sp)
 8009104:	d8c02017 	ldw	r3,128(sp)
 8009108:	da000404 	addi	r8,sp,16
 800910c:	003e1006 	br	8008950 <__alt_data_end+0xfc008950>
 8009110:	00800044 	movi	r2,1
 8009114:	10803fcc 	andi	r2,r2,255
 8009118:	00c00044 	movi	r3,1
 800911c:	10fa3526 	beq	r2,r3,80079f4 <__alt_data_end+0xfc0079f4>
 8009120:	00c00084 	movi	r3,2
 8009124:	10fbcb26 	beq	r2,r3,8008054 <__alt_data_end+0xfc008054>
 8009128:	003a8f06 	br	8007b68 <__alt_data_end+0xfc007b68>
 800912c:	01020074 	movhi	r4,2049
 8009130:	21173884 	addi	r4,r4,23778
 8009134:	d9003515 	stw	r4,212(sp)
 8009138:	003b7606 	br	8007f14 <__alt_data_end+0xfc007f14>
 800913c:	d8802917 	ldw	r2,164(sp)
 8009140:	00c00184 	movi	r3,6
 8009144:	1880012e 	bgeu	r3,r2,800914c <___vfprintf_internal_r+0x1ca0>
 8009148:	1805883a 	mov	r2,r3
 800914c:	d8802e15 	stw	r2,184(sp)
 8009150:	1000ef16 	blt	r2,zero,8009510 <___vfprintf_internal_r+0x2064>
 8009154:	04020074 	movhi	r16,2049
 8009158:	d8802a15 	stw	r2,168(sp)
 800915c:	dcc02d15 	stw	r19,180(sp)
 8009160:	d8002915 	stw	zero,164(sp)
 8009164:	d8003215 	stw	zero,200(sp)
 8009168:	84173204 	addi	r16,r16,23752
 800916c:	0039883a 	mov	fp,zero
 8009170:	003aa206 	br	8007bfc <__alt_data_end+0xfc007bfc>
 8009174:	0021883a 	mov	r16,zero
 8009178:	003e0706 	br	8008998 <__alt_data_end+0xfc008998>
 800917c:	d9002c17 	ldw	r4,176(sp)
 8009180:	d9801e04 	addi	r6,sp,120
 8009184:	b80b883a 	mov	r5,r23
 8009188:	800ea340 	call	800ea34 <__sprint_r>
 800918c:	1039c91e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8009190:	d8802617 	ldw	r2,152(sp)
 8009194:	d9403317 	ldw	r5,204(sp)
 8009198:	d8c02017 	ldw	r3,128(sp)
 800919c:	da000404 	addi	r8,sp,16
 80091a0:	2885c83a 	sub	r2,r5,r2
 80091a4:	003dfb06 	br	8008994 <__alt_data_end+0xfc008994>
 80091a8:	9080004c 	andi	r2,r18,1
 80091ac:	103e8f1e 	bne	r2,zero,8008bec <__alt_data_end+0xfc008bec>
 80091b0:	d8802117 	ldw	r2,132(sp)
 80091b4:	003e9e06 	br	8008c30 <__alt_data_end+0xfc008c30>
 80091b8:	1025883a 	mov	r18,r2
 80091bc:	0039883a 	mov	fp,zero
 80091c0:	00800084 	movi	r2,2
 80091c4:	003fd306 	br	8009114 <__alt_data_end+0xfc009114>
 80091c8:	07000b44 	movi	fp,45
 80091cc:	df002785 	stb	fp,158(sp)
 80091d0:	003a4006 	br	8007ad4 <__alt_data_end+0xfc007ad4>
 80091d4:	00c00b44 	movi	r3,45
 80091d8:	d8c02785 	stb	r3,158(sp)
 80091dc:	d8802a15 	stw	r2,168(sp)
 80091e0:	dc802b17 	ldw	r18,172(sp)
 80091e4:	d8002915 	stw	zero,164(sp)
 80091e8:	07000b44 	movi	fp,45
 80091ec:	003a8006 	br	8007bf0 <__alt_data_end+0xfc007bf0>
 80091f0:	04020074 	movhi	r16,2049
 80091f4:	84172704 	addi	r16,r16,23708
 80091f8:	003f4706 	br	8008f18 <__alt_data_end+0xfc008f18>
 80091fc:	d8c02d17 	ldw	r3,180(sp)
 8009200:	d9002f17 	ldw	r4,188(sp)
 8009204:	18800017 	ldw	r2,0(r3)
 8009208:	18c00104 	addi	r3,r3,4
 800920c:	d8c02d15 	stw	r3,180(sp)
 8009210:	11000015 	stw	r4,0(r2)
 8009214:	0038dd06 	br	800758c <__alt_data_end+0xfc00758c>
 8009218:	dd802617 	ldw	r22,152(sp)
 800921c:	00bfff44 	movi	r2,-3
 8009220:	b0801c16 	blt	r22,r2,8009294 <___vfprintf_internal_r+0x1de8>
 8009224:	d9402917 	ldw	r5,164(sp)
 8009228:	2d801a16 	blt	r5,r22,8009294 <___vfprintf_internal_r+0x1de8>
 800922c:	dd803215 	stw	r22,200(sp)
 8009230:	003e8906 	br	8008c58 <__alt_data_end+0xfc008c58>
 8009234:	01020074 	movhi	r4,2049
 8009238:	21173484 	addi	r4,r4,23762
 800923c:	d9002b15 	stw	r4,172(sp)
 8009240:	003c9106 	br	8008488 <__alt_data_end+0xfc008488>
 8009244:	e005883a 	mov	r2,fp
 8009248:	003e7906 	br	8008c30 <__alt_data_end+0xfc008c30>
 800924c:	d9402917 	ldw	r5,164(sp)
 8009250:	df002783 	ldbu	fp,158(sp)
 8009254:	dcc02d15 	stw	r19,180(sp)
 8009258:	d9402a15 	stw	r5,168(sp)
 800925c:	d9402e15 	stw	r5,184(sp)
 8009260:	d8002915 	stw	zero,164(sp)
 8009264:	d8003215 	stw	zero,200(sp)
 8009268:	003a5d06 	br	8007be0 <__alt_data_end+0xfc007be0>
 800926c:	9080004c 	andi	r2,r18,1
 8009270:	0039883a 	mov	fp,zero
 8009274:	10000426 	beq	r2,zero,8009288 <___vfprintf_internal_r+0x1ddc>
 8009278:	00800c04 	movi	r2,48
 800927c:	dc001dc4 	addi	r16,sp,119
 8009280:	d8801dc5 	stb	r2,119(sp)
 8009284:	003b8006 	br	8008088 <__alt_data_end+0xfc008088>
 8009288:	d8002e15 	stw	zero,184(sp)
 800928c:	dc001e04 	addi	r16,sp,120
 8009290:	003a4d06 	br	8007bc8 <__alt_data_end+0xfc007bc8>
 8009294:	8c7fff84 	addi	r17,r17,-2
 8009298:	b5bfffc4 	addi	r22,r22,-1
 800929c:	dd802615 	stw	r22,152(sp)
 80092a0:	dc4022c5 	stb	r17,139(sp)
 80092a4:	b000bf16 	blt	r22,zero,80095a4 <___vfprintf_internal_r+0x20f8>
 80092a8:	00800ac4 	movi	r2,43
 80092ac:	d8802305 	stb	r2,140(sp)
 80092b0:	00800244 	movi	r2,9
 80092b4:	15807016 	blt	r2,r22,8009478 <___vfprintf_internal_r+0x1fcc>
 80092b8:	00800c04 	movi	r2,48
 80092bc:	b5800c04 	addi	r22,r22,48
 80092c0:	d8802345 	stb	r2,141(sp)
 80092c4:	dd802385 	stb	r22,142(sp)
 80092c8:	d88023c4 	addi	r2,sp,143
 80092cc:	df0022c4 	addi	fp,sp,139
 80092d0:	d8c03317 	ldw	r3,204(sp)
 80092d4:	1739c83a 	sub	fp,r2,fp
 80092d8:	d9003317 	ldw	r4,204(sp)
 80092dc:	e0c7883a 	add	r3,fp,r3
 80092e0:	df003a15 	stw	fp,232(sp)
 80092e4:	d8c02e15 	stw	r3,184(sp)
 80092e8:	00800044 	movi	r2,1
 80092ec:	1100b30e 	bge	r2,r4,80095bc <___vfprintf_internal_r+0x2110>
 80092f0:	d8c02e17 	ldw	r3,184(sp)
 80092f4:	18c00044 	addi	r3,r3,1
 80092f8:	d8c02e15 	stw	r3,184(sp)
 80092fc:	1805883a 	mov	r2,r3
 8009300:	1800ac16 	blt	r3,zero,80095b4 <___vfprintf_internal_r+0x2108>
 8009304:	d8003215 	stw	zero,200(sp)
 8009308:	003e5d06 	br	8008c80 <__alt_data_end+0xfc008c80>
 800930c:	d9002c17 	ldw	r4,176(sp)
 8009310:	d9801e04 	addi	r6,sp,120
 8009314:	b80b883a 	mov	r5,r23
 8009318:	800ea340 	call	800ea34 <__sprint_r>
 800931c:	1039651e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8009320:	dc402617 	ldw	r17,152(sp)
 8009324:	d8c02017 	ldw	r3,128(sp)
 8009328:	d8801f17 	ldw	r2,124(sp)
 800932c:	da000404 	addi	r8,sp,16
 8009330:	003ed606 	br	8008e8c <__alt_data_end+0xfc008e8c>
 8009334:	582b883a 	mov	r21,r11
 8009338:	d8002915 	stw	zero,164(sp)
 800933c:	0038bd06 	br	8007634 <__alt_data_end+0xfc007634>
 8009340:	d8802917 	ldw	r2,164(sp)
 8009344:	103e071e 	bne	r2,zero,8008b64 <__alt_data_end+0xfc008b64>
 8009348:	dc002915 	stw	r16,164(sp)
 800934c:	003e0506 	br	8008b64 <__alt_data_end+0xfc008b64>
 8009350:	d9002917 	ldw	r4,164(sp)
 8009354:	20c00044 	addi	r3,r4,1
 8009358:	003e0f06 	br	8008b98 <__alt_data_end+0xfc008b98>
 800935c:	01400184 	movi	r5,6
 8009360:	d9402915 	stw	r5,164(sp)
 8009364:	003dff06 	br	8008b64 <__alt_data_end+0xfc008b64>
 8009368:	d8802104 	addi	r2,sp,132
 800936c:	d8800315 	stw	r2,12(sp)
 8009370:	d8802504 	addi	r2,sp,148
 8009374:	d8800215 	stw	r2,8(sp)
 8009378:	d8802604 	addi	r2,sp,152
 800937c:	d8800115 	stw	r2,4(sp)
 8009380:	d8802917 	ldw	r2,164(sp)
 8009384:	d9403617 	ldw	r5,216(sp)
 8009388:	d9002c17 	ldw	r4,176(sp)
 800938c:	d8800015 	stw	r2,0(sp)
 8009390:	01c000c4 	movi	r7,3
 8009394:	980d883a 	mov	r6,r19
 8009398:	da003d15 	stw	r8,244(sp)
 800939c:	8009ad00 	call	8009ad0 <_dtoa_r>
 80093a0:	d8c02917 	ldw	r3,164(sp)
 80093a4:	da003d17 	ldw	r8,244(sp)
 80093a8:	1021883a 	mov	r16,r2
 80093ac:	10f9883a 	add	fp,r2,r3
 80093b0:	81000007 	ldb	r4,0(r16)
 80093b4:	00800c04 	movi	r2,48
 80093b8:	20805e26 	beq	r4,r2,8009534 <___vfprintf_internal_r+0x2088>
 80093bc:	d8c02617 	ldw	r3,152(sp)
 80093c0:	e0f9883a 	add	fp,fp,r3
 80093c4:	003e0a06 	br	8008bf0 <__alt_data_end+0xfc008bf0>
 80093c8:	00c00b44 	movi	r3,45
 80093cc:	24e0003c 	xorhi	r19,r4,32768
 80093d0:	d8c02a05 	stb	r3,168(sp)
 80093d4:	003de906 	br	8008b7c <__alt_data_end+0xfc008b7c>
 80093d8:	d8c03217 	ldw	r3,200(sp)
 80093dc:	00c07a0e 	bge	zero,r3,80095c8 <___vfprintf_internal_r+0x211c>
 80093e0:	00800044 	movi	r2,1
 80093e4:	d9003317 	ldw	r4,204(sp)
 80093e8:	1105883a 	add	r2,r2,r4
 80093ec:	d8802e15 	stw	r2,184(sp)
 80093f0:	10004e16 	blt	r2,zero,800952c <___vfprintf_internal_r+0x2080>
 80093f4:	044019c4 	movi	r17,103
 80093f8:	003e2106 	br	8008c80 <__alt_data_end+0xfc008c80>
 80093fc:	d9002917 	ldw	r4,164(sp)
 8009400:	d8802104 	addi	r2,sp,132
 8009404:	d8800315 	stw	r2,12(sp)
 8009408:	d9000015 	stw	r4,0(sp)
 800940c:	d8802504 	addi	r2,sp,148
 8009410:	d9403617 	ldw	r5,216(sp)
 8009414:	d9002c17 	ldw	r4,176(sp)
 8009418:	d8800215 	stw	r2,8(sp)
 800941c:	d8802604 	addi	r2,sp,152
 8009420:	d8800115 	stw	r2,4(sp)
 8009424:	01c000c4 	movi	r7,3
 8009428:	980d883a 	mov	r6,r19
 800942c:	da003d15 	stw	r8,244(sp)
 8009430:	8009ad00 	call	8009ad0 <_dtoa_r>
 8009434:	d8c02917 	ldw	r3,164(sp)
 8009438:	da003d17 	ldw	r8,244(sp)
 800943c:	1021883a 	mov	r16,r2
 8009440:	00801184 	movi	r2,70
 8009444:	80f9883a 	add	fp,r16,r3
 8009448:	88bfd926 	beq	r17,r2,80093b0 <__alt_data_end+0xfc0093b0>
 800944c:	003de806 	br	8008bf0 <__alt_data_end+0xfc008bf0>
 8009450:	d9002917 	ldw	r4,164(sp)
 8009454:	00c04d0e 	bge	zero,r3,800958c <___vfprintf_internal_r+0x20e0>
 8009458:	2000441e 	bne	r4,zero,800956c <___vfprintf_internal_r+0x20c0>
 800945c:	9480004c 	andi	r18,r18,1
 8009460:	9000421e 	bne	r18,zero,800956c <___vfprintf_internal_r+0x20c0>
 8009464:	1805883a 	mov	r2,r3
 8009468:	18007016 	blt	r3,zero,800962c <___vfprintf_internal_r+0x2180>
 800946c:	d8c03217 	ldw	r3,200(sp)
 8009470:	d8c02e15 	stw	r3,184(sp)
 8009474:	003e0206 	br	8008c80 <__alt_data_end+0xfc008c80>
 8009478:	df0022c4 	addi	fp,sp,139
 800947c:	dc002915 	stw	r16,164(sp)
 8009480:	4027883a 	mov	r19,r8
 8009484:	e021883a 	mov	r16,fp
 8009488:	b009883a 	mov	r4,r22
 800948c:	01400284 	movi	r5,10
 8009490:	800341c0 	call	800341c <__modsi3>
 8009494:	10800c04 	addi	r2,r2,48
 8009498:	843fffc4 	addi	r16,r16,-1
 800949c:	b009883a 	mov	r4,r22
 80094a0:	01400284 	movi	r5,10
 80094a4:	80800005 	stb	r2,0(r16)
 80094a8:	80033980 	call	8003398 <__divsi3>
 80094ac:	102d883a 	mov	r22,r2
 80094b0:	00800244 	movi	r2,9
 80094b4:	15bff416 	blt	r2,r22,8009488 <__alt_data_end+0xfc009488>
 80094b8:	9811883a 	mov	r8,r19
 80094bc:	b0800c04 	addi	r2,r22,48
 80094c0:	8027883a 	mov	r19,r16
 80094c4:	997fffc4 	addi	r5,r19,-1
 80094c8:	98bfffc5 	stb	r2,-1(r19)
 80094cc:	dc002917 	ldw	r16,164(sp)
 80094d0:	2f006a2e 	bgeu	r5,fp,800967c <___vfprintf_internal_r+0x21d0>
 80094d4:	d9c02384 	addi	r7,sp,142
 80094d8:	3ccfc83a 	sub	r7,r7,r19
 80094dc:	d9002344 	addi	r4,sp,141
 80094e0:	e1cf883a 	add	r7,fp,r7
 80094e4:	00000106 	br	80094ec <___vfprintf_internal_r+0x2040>
 80094e8:	28800003 	ldbu	r2,0(r5)
 80094ec:	20800005 	stb	r2,0(r4)
 80094f0:	21000044 	addi	r4,r4,1
 80094f4:	29400044 	addi	r5,r5,1
 80094f8:	393ffb1e 	bne	r7,r4,80094e8 <__alt_data_end+0xfc0094e8>
 80094fc:	d8802304 	addi	r2,sp,140
 8009500:	14c5c83a 	sub	r2,r2,r19
 8009504:	d8c02344 	addi	r3,sp,141
 8009508:	1885883a 	add	r2,r3,r2
 800950c:	003f7006 	br	80092d0 <__alt_data_end+0xfc0092d0>
 8009510:	0005883a 	mov	r2,zero
 8009514:	003f0f06 	br	8009154 <__alt_data_end+0xfc009154>
 8009518:	d8c03217 	ldw	r3,200(sp)
 800951c:	18c00044 	addi	r3,r3,1
 8009520:	d8c02e15 	stw	r3,184(sp)
 8009524:	1805883a 	mov	r2,r3
 8009528:	183fb20e 	bge	r3,zero,80093f4 <__alt_data_end+0xfc0093f4>
 800952c:	0005883a 	mov	r2,zero
 8009530:	003fb006 	br	80093f4 <__alt_data_end+0xfc0093f4>
 8009534:	d9003617 	ldw	r4,216(sp)
 8009538:	000d883a 	mov	r6,zero
 800953c:	000f883a 	mov	r7,zero
 8009540:	980b883a 	mov	r5,r19
 8009544:	d8c03c15 	stw	r3,240(sp)
 8009548:	da003d15 	stw	r8,244(sp)
 800954c:	8005be00 	call	8005be0 <__eqdf2>
 8009550:	d8c03c17 	ldw	r3,240(sp)
 8009554:	da003d17 	ldw	r8,244(sp)
 8009558:	103f9826 	beq	r2,zero,80093bc <__alt_data_end+0xfc0093bc>
 800955c:	00800044 	movi	r2,1
 8009560:	10c7c83a 	sub	r3,r2,r3
 8009564:	d8c02615 	stw	r3,152(sp)
 8009568:	003f9506 	br	80093c0 <__alt_data_end+0xfc0093c0>
 800956c:	d9002917 	ldw	r4,164(sp)
 8009570:	d8c03217 	ldw	r3,200(sp)
 8009574:	20800044 	addi	r2,r4,1
 8009578:	1885883a 	add	r2,r3,r2
 800957c:	d8802e15 	stw	r2,184(sp)
 8009580:	103dbf0e 	bge	r2,zero,8008c80 <__alt_data_end+0xfc008c80>
 8009584:	0005883a 	mov	r2,zero
 8009588:	003dbd06 	br	8008c80 <__alt_data_end+0xfc008c80>
 800958c:	2000211e 	bne	r4,zero,8009614 <___vfprintf_internal_r+0x2168>
 8009590:	9480004c 	andi	r18,r18,1
 8009594:	90001f1e 	bne	r18,zero,8009614 <___vfprintf_internal_r+0x2168>
 8009598:	00800044 	movi	r2,1
 800959c:	d8802e15 	stw	r2,184(sp)
 80095a0:	003db706 	br	8008c80 <__alt_data_end+0xfc008c80>
 80095a4:	00800b44 	movi	r2,45
 80095a8:	05adc83a 	sub	r22,zero,r22
 80095ac:	d8802305 	stb	r2,140(sp)
 80095b0:	003f3f06 	br	80092b0 <__alt_data_end+0xfc0092b0>
 80095b4:	0005883a 	mov	r2,zero
 80095b8:	003f5206 	br	8009304 <__alt_data_end+0xfc009304>
 80095bc:	90a4703a 	and	r18,r18,r2
 80095c0:	903f4e26 	beq	r18,zero,80092fc <__alt_data_end+0xfc0092fc>
 80095c4:	003f4a06 	br	80092f0 <__alt_data_end+0xfc0092f0>
 80095c8:	00800084 	movi	r2,2
 80095cc:	10c5c83a 	sub	r2,r2,r3
 80095d0:	003f8406 	br	80093e4 <__alt_data_end+0xfc0093e4>
 80095d4:	d8802d17 	ldw	r2,180(sp)
 80095d8:	d9002d17 	ldw	r4,180(sp)
 80095dc:	ac400043 	ldbu	r17,1(r21)
 80095e0:	10800017 	ldw	r2,0(r2)
 80095e4:	582b883a 	mov	r21,r11
 80095e8:	d8802915 	stw	r2,164(sp)
 80095ec:	20800104 	addi	r2,r4,4
 80095f0:	d9002917 	ldw	r4,164(sp)
 80095f4:	d8802d15 	stw	r2,180(sp)
 80095f8:	203e7a0e 	bge	r4,zero,8008fe4 <__alt_data_end+0xfc008fe4>
 80095fc:	8c403fcc 	andi	r17,r17,255
 8009600:	00bfffc4 	movi	r2,-1
 8009604:	8c40201c 	xori	r17,r17,128
 8009608:	d8802915 	stw	r2,164(sp)
 800960c:	8c7fe004 	addi	r17,r17,-128
 8009610:	00380706 	br	8007630 <__alt_data_end+0xfc007630>
 8009614:	d8c02917 	ldw	r3,164(sp)
 8009618:	18c00084 	addi	r3,r3,2
 800961c:	d8c02e15 	stw	r3,184(sp)
 8009620:	1805883a 	mov	r2,r3
 8009624:	183d960e 	bge	r3,zero,8008c80 <__alt_data_end+0xfc008c80>
 8009628:	003fd606 	br	8009584 <__alt_data_end+0xfc009584>
 800962c:	0005883a 	mov	r2,zero
 8009630:	003f8e06 	br	800946c <__alt_data_end+0xfc00946c>
 8009634:	9080004c 	andi	r2,r18,1
 8009638:	103f811e 	bne	r2,zero,8009440 <__alt_data_end+0xfc009440>
 800963c:	d8802117 	ldw	r2,132(sp)
 8009640:	1405c83a 	sub	r2,r2,r16
 8009644:	d8803315 	stw	r2,204(sp)
 8009648:	b47ef326 	beq	r22,r17,8009218 <__alt_data_end+0xfc009218>
 800964c:	dd802617 	ldw	r22,152(sp)
 8009650:	003f1106 	br	8009298 <__alt_data_end+0xfc009298>
 8009654:	d9c02785 	stb	r7,158(sp)
 8009658:	00390406 	br	8007a6c <__alt_data_end+0xfc007a6c>
 800965c:	d9c02785 	stb	r7,158(sp)
 8009660:	0038d306 	br	80079b0 <__alt_data_end+0xfc0079b0>
 8009664:	d9c02785 	stb	r7,158(sp)
 8009668:	003a6106 	br	8007ff0 <__alt_data_end+0xfc007ff0>
 800966c:	d9c02785 	stb	r7,158(sp)
 8009670:	003af806 	br	8008254 <__alt_data_end+0xfc008254>
 8009674:	0005883a 	mov	r2,zero
 8009678:	003d7e06 	br	8008c74 <__alt_data_end+0xfc008c74>
 800967c:	d8802344 	addi	r2,sp,141
 8009680:	003f1306 	br	80092d0 <__alt_data_end+0xfc0092d0>
 8009684:	d9c02785 	stb	r7,158(sp)
 8009688:	00392306 	br	8007b18 <__alt_data_end+0xfc007b18>
 800968c:	d9c02785 	stb	r7,158(sp)
 8009690:	003aa906 	br	8008138 <__alt_data_end+0xfc008138>
 8009694:	d9c02785 	stb	r7,158(sp)
 8009698:	003a3d06 	br	8007f90 <__alt_data_end+0xfc007f90>
 800969c:	d9c02785 	stb	r7,158(sp)
 80096a0:	003aca06 	br	80081cc <__alt_data_end+0xfc0081cc>

080096a4 <__vfprintf_internal>:
 80096a4:	00820074 	movhi	r2,2049
 80096a8:	109eae04 	addi	r2,r2,31416
 80096ac:	300f883a 	mov	r7,r6
 80096b0:	280d883a 	mov	r6,r5
 80096b4:	200b883a 	mov	r5,r4
 80096b8:	11000017 	ldw	r4,0(r2)
 80096bc:	80074ac1 	jmpi	80074ac <___vfprintf_internal_r>

080096c0 <__sbprintf>:
 80096c0:	2880030b 	ldhu	r2,12(r5)
 80096c4:	2ac01917 	ldw	r11,100(r5)
 80096c8:	2a80038b 	ldhu	r10,14(r5)
 80096cc:	2a400717 	ldw	r9,28(r5)
 80096d0:	2a000917 	ldw	r8,36(r5)
 80096d4:	defee204 	addi	sp,sp,-1144
 80096d8:	00c10004 	movi	r3,1024
 80096dc:	dc011a15 	stw	r16,1128(sp)
 80096e0:	10bfff4c 	andi	r2,r2,65533
 80096e4:	2821883a 	mov	r16,r5
 80096e8:	d8cb883a 	add	r5,sp,r3
 80096ec:	dc811c15 	stw	r18,1136(sp)
 80096f0:	dc411b15 	stw	r17,1132(sp)
 80096f4:	dfc11d15 	stw	ra,1140(sp)
 80096f8:	2025883a 	mov	r18,r4
 80096fc:	d881030d 	sth	r2,1036(sp)
 8009700:	dac11915 	stw	r11,1124(sp)
 8009704:	da81038d 	sth	r10,1038(sp)
 8009708:	da410715 	stw	r9,1052(sp)
 800970c:	da010915 	stw	r8,1060(sp)
 8009710:	dec10015 	stw	sp,1024(sp)
 8009714:	dec10415 	stw	sp,1040(sp)
 8009718:	d8c10215 	stw	r3,1032(sp)
 800971c:	d8c10515 	stw	r3,1044(sp)
 8009720:	d8010615 	stw	zero,1048(sp)
 8009724:	80074ac0 	call	80074ac <___vfprintf_internal_r>
 8009728:	1023883a 	mov	r17,r2
 800972c:	10000416 	blt	r2,zero,8009740 <__sbprintf+0x80>
 8009730:	d9410004 	addi	r5,sp,1024
 8009734:	9009883a 	mov	r4,r18
 8009738:	800b3740 	call	800b374 <_fflush_r>
 800973c:	10000d1e 	bne	r2,zero,8009774 <__sbprintf+0xb4>
 8009740:	d881030b 	ldhu	r2,1036(sp)
 8009744:	1080100c 	andi	r2,r2,64
 8009748:	10000326 	beq	r2,zero,8009758 <__sbprintf+0x98>
 800974c:	8080030b 	ldhu	r2,12(r16)
 8009750:	10801014 	ori	r2,r2,64
 8009754:	8080030d 	sth	r2,12(r16)
 8009758:	8805883a 	mov	r2,r17
 800975c:	dfc11d17 	ldw	ra,1140(sp)
 8009760:	dc811c17 	ldw	r18,1136(sp)
 8009764:	dc411b17 	ldw	r17,1132(sp)
 8009768:	dc011a17 	ldw	r16,1128(sp)
 800976c:	dec11e04 	addi	sp,sp,1144
 8009770:	f800283a 	ret
 8009774:	047fffc4 	movi	r17,-1
 8009778:	003ff106 	br	8009740 <__alt_data_end+0xfc009740>

0800977c <__swsetup_r>:
 800977c:	00820074 	movhi	r2,2049
 8009780:	defffd04 	addi	sp,sp,-12
 8009784:	109eae04 	addi	r2,r2,31416
 8009788:	dc400115 	stw	r17,4(sp)
 800978c:	2023883a 	mov	r17,r4
 8009790:	11000017 	ldw	r4,0(r2)
 8009794:	dc000015 	stw	r16,0(sp)
 8009798:	dfc00215 	stw	ra,8(sp)
 800979c:	2821883a 	mov	r16,r5
 80097a0:	20000226 	beq	r4,zero,80097ac <__swsetup_r+0x30>
 80097a4:	20800e17 	ldw	r2,56(r4)
 80097a8:	10003126 	beq	r2,zero,8009870 <__swsetup_r+0xf4>
 80097ac:	8080030b 	ldhu	r2,12(r16)
 80097b0:	10c0020c 	andi	r3,r2,8
 80097b4:	1009883a 	mov	r4,r2
 80097b8:	18000f26 	beq	r3,zero,80097f8 <__swsetup_r+0x7c>
 80097bc:	80c00417 	ldw	r3,16(r16)
 80097c0:	18001526 	beq	r3,zero,8009818 <__swsetup_r+0x9c>
 80097c4:	1100004c 	andi	r4,r2,1
 80097c8:	20001c1e 	bne	r4,zero,800983c <__swsetup_r+0xc0>
 80097cc:	1080008c 	andi	r2,r2,2
 80097d0:	1000291e 	bne	r2,zero,8009878 <__swsetup_r+0xfc>
 80097d4:	80800517 	ldw	r2,20(r16)
 80097d8:	80800215 	stw	r2,8(r16)
 80097dc:	18001c26 	beq	r3,zero,8009850 <__swsetup_r+0xd4>
 80097e0:	0005883a 	mov	r2,zero
 80097e4:	dfc00217 	ldw	ra,8(sp)
 80097e8:	dc400117 	ldw	r17,4(sp)
 80097ec:	dc000017 	ldw	r16,0(sp)
 80097f0:	dec00304 	addi	sp,sp,12
 80097f4:	f800283a 	ret
 80097f8:	2080040c 	andi	r2,r4,16
 80097fc:	10002e26 	beq	r2,zero,80098b8 <__swsetup_r+0x13c>
 8009800:	2080010c 	andi	r2,r4,4
 8009804:	10001e1e 	bne	r2,zero,8009880 <__swsetup_r+0x104>
 8009808:	80c00417 	ldw	r3,16(r16)
 800980c:	20800214 	ori	r2,r4,8
 8009810:	8080030d 	sth	r2,12(r16)
 8009814:	183feb1e 	bne	r3,zero,80097c4 <__alt_data_end+0xfc0097c4>
 8009818:	1100a00c 	andi	r4,r2,640
 800981c:	01408004 	movi	r5,512
 8009820:	217fe826 	beq	r4,r5,80097c4 <__alt_data_end+0xfc0097c4>
 8009824:	800b883a 	mov	r5,r16
 8009828:	8809883a 	mov	r4,r17
 800982c:	800c2f40 	call	800c2f4 <__smakebuf_r>
 8009830:	8080030b 	ldhu	r2,12(r16)
 8009834:	80c00417 	ldw	r3,16(r16)
 8009838:	003fe206 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800983c:	80800517 	ldw	r2,20(r16)
 8009840:	80000215 	stw	zero,8(r16)
 8009844:	0085c83a 	sub	r2,zero,r2
 8009848:	80800615 	stw	r2,24(r16)
 800984c:	183fe41e 	bne	r3,zero,80097e0 <__alt_data_end+0xfc0097e0>
 8009850:	80c0030b 	ldhu	r3,12(r16)
 8009854:	0005883a 	mov	r2,zero
 8009858:	1900200c 	andi	r4,r3,128
 800985c:	203fe126 	beq	r4,zero,80097e4 <__alt_data_end+0xfc0097e4>
 8009860:	18c01014 	ori	r3,r3,64
 8009864:	80c0030d 	sth	r3,12(r16)
 8009868:	00bfffc4 	movi	r2,-1
 800986c:	003fdd06 	br	80097e4 <__alt_data_end+0xfc0097e4>
 8009870:	800b7500 	call	800b750 <__sinit>
 8009874:	003fcd06 	br	80097ac <__alt_data_end+0xfc0097ac>
 8009878:	0005883a 	mov	r2,zero
 800987c:	003fd606 	br	80097d8 <__alt_data_end+0xfc0097d8>
 8009880:	81400c17 	ldw	r5,48(r16)
 8009884:	28000626 	beq	r5,zero,80098a0 <__swsetup_r+0x124>
 8009888:	80801004 	addi	r2,r16,64
 800988c:	28800326 	beq	r5,r2,800989c <__swsetup_r+0x120>
 8009890:	8809883a 	mov	r4,r17
 8009894:	800b8c40 	call	800b8c4 <_free_r>
 8009898:	8100030b 	ldhu	r4,12(r16)
 800989c:	80000c15 	stw	zero,48(r16)
 80098a0:	80c00417 	ldw	r3,16(r16)
 80098a4:	00bff6c4 	movi	r2,-37
 80098a8:	1108703a 	and	r4,r2,r4
 80098ac:	80000115 	stw	zero,4(r16)
 80098b0:	80c00015 	stw	r3,0(r16)
 80098b4:	003fd506 	br	800980c <__alt_data_end+0xfc00980c>
 80098b8:	00800244 	movi	r2,9
 80098bc:	88800015 	stw	r2,0(r17)
 80098c0:	20801014 	ori	r2,r4,64
 80098c4:	8080030d 	sth	r2,12(r16)
 80098c8:	00bfffc4 	movi	r2,-1
 80098cc:	003fc506 	br	80097e4 <__alt_data_end+0xfc0097e4>

080098d0 <quorem>:
 80098d0:	defff704 	addi	sp,sp,-36
 80098d4:	dc800215 	stw	r18,8(sp)
 80098d8:	20800417 	ldw	r2,16(r4)
 80098dc:	2c800417 	ldw	r18,16(r5)
 80098e0:	dfc00815 	stw	ra,32(sp)
 80098e4:	ddc00715 	stw	r23,28(sp)
 80098e8:	dd800615 	stw	r22,24(sp)
 80098ec:	dd400515 	stw	r21,20(sp)
 80098f0:	dd000415 	stw	r20,16(sp)
 80098f4:	dcc00315 	stw	r19,12(sp)
 80098f8:	dc400115 	stw	r17,4(sp)
 80098fc:	dc000015 	stw	r16,0(sp)
 8009900:	14807116 	blt	r2,r18,8009ac8 <quorem+0x1f8>
 8009904:	94bfffc4 	addi	r18,r18,-1
 8009908:	94ad883a 	add	r22,r18,r18
 800990c:	b5ad883a 	add	r22,r22,r22
 8009910:	2c400504 	addi	r17,r5,20
 8009914:	8da9883a 	add	r20,r17,r22
 8009918:	25400504 	addi	r21,r4,20
 800991c:	282f883a 	mov	r23,r5
 8009920:	adad883a 	add	r22,r21,r22
 8009924:	a1400017 	ldw	r5,0(r20)
 8009928:	2021883a 	mov	r16,r4
 800992c:	b1000017 	ldw	r4,0(r22)
 8009930:	29400044 	addi	r5,r5,1
 8009934:	80034900 	call	8003490 <__udivsi3>
 8009938:	1027883a 	mov	r19,r2
 800993c:	10002c26 	beq	r2,zero,80099f0 <quorem+0x120>
 8009940:	a813883a 	mov	r9,r21
 8009944:	880b883a 	mov	r5,r17
 8009948:	0009883a 	mov	r4,zero
 800994c:	000d883a 	mov	r6,zero
 8009950:	2a000017 	ldw	r8,0(r5)
 8009954:	49c00017 	ldw	r7,0(r9)
 8009958:	29400104 	addi	r5,r5,4
 800995c:	40bfffcc 	andi	r2,r8,65535
 8009960:	14c5383a 	mul	r2,r2,r19
 8009964:	4010d43a 	srli	r8,r8,16
 8009968:	38ffffcc 	andi	r3,r7,65535
 800996c:	1105883a 	add	r2,r2,r4
 8009970:	1008d43a 	srli	r4,r2,16
 8009974:	44d1383a 	mul	r8,r8,r19
 8009978:	198d883a 	add	r6,r3,r6
 800997c:	10ffffcc 	andi	r3,r2,65535
 8009980:	30c7c83a 	sub	r3,r6,r3
 8009984:	380ed43a 	srli	r7,r7,16
 8009988:	4105883a 	add	r2,r8,r4
 800998c:	180dd43a 	srai	r6,r3,16
 8009990:	113fffcc 	andi	r4,r2,65535
 8009994:	390fc83a 	sub	r7,r7,r4
 8009998:	398d883a 	add	r6,r7,r6
 800999c:	300e943a 	slli	r7,r6,16
 80099a0:	18ffffcc 	andi	r3,r3,65535
 80099a4:	1008d43a 	srli	r4,r2,16
 80099a8:	38ceb03a 	or	r7,r7,r3
 80099ac:	49c00015 	stw	r7,0(r9)
 80099b0:	300dd43a 	srai	r6,r6,16
 80099b4:	4a400104 	addi	r9,r9,4
 80099b8:	a17fe52e 	bgeu	r20,r5,8009950 <__alt_data_end+0xfc009950>
 80099bc:	b0800017 	ldw	r2,0(r22)
 80099c0:	10000b1e 	bne	r2,zero,80099f0 <quorem+0x120>
 80099c4:	b0bfff04 	addi	r2,r22,-4
 80099c8:	a880082e 	bgeu	r21,r2,80099ec <quorem+0x11c>
 80099cc:	b0ffff17 	ldw	r3,-4(r22)
 80099d0:	18000326 	beq	r3,zero,80099e0 <quorem+0x110>
 80099d4:	00000506 	br	80099ec <quorem+0x11c>
 80099d8:	10c00017 	ldw	r3,0(r2)
 80099dc:	1800031e 	bne	r3,zero,80099ec <quorem+0x11c>
 80099e0:	10bfff04 	addi	r2,r2,-4
 80099e4:	94bfffc4 	addi	r18,r18,-1
 80099e8:	a8bffb36 	bltu	r21,r2,80099d8 <__alt_data_end+0xfc0099d8>
 80099ec:	84800415 	stw	r18,16(r16)
 80099f0:	b80b883a 	mov	r5,r23
 80099f4:	8009883a 	mov	r4,r16
 80099f8:	800da340 	call	800da34 <__mcmp>
 80099fc:	10002616 	blt	r2,zero,8009a98 <quorem+0x1c8>
 8009a00:	9cc00044 	addi	r19,r19,1
 8009a04:	a805883a 	mov	r2,r21
 8009a08:	000b883a 	mov	r5,zero
 8009a0c:	11000017 	ldw	r4,0(r2)
 8009a10:	89800017 	ldw	r6,0(r17)
 8009a14:	10800104 	addi	r2,r2,4
 8009a18:	20ffffcc 	andi	r3,r4,65535
 8009a1c:	194b883a 	add	r5,r3,r5
 8009a20:	30ffffcc 	andi	r3,r6,65535
 8009a24:	28c7c83a 	sub	r3,r5,r3
 8009a28:	300cd43a 	srli	r6,r6,16
 8009a2c:	2008d43a 	srli	r4,r4,16
 8009a30:	180bd43a 	srai	r5,r3,16
 8009a34:	18ffffcc 	andi	r3,r3,65535
 8009a38:	2189c83a 	sub	r4,r4,r6
 8009a3c:	2149883a 	add	r4,r4,r5
 8009a40:	200c943a 	slli	r6,r4,16
 8009a44:	8c400104 	addi	r17,r17,4
 8009a48:	200bd43a 	srai	r5,r4,16
 8009a4c:	30c6b03a 	or	r3,r6,r3
 8009a50:	10ffff15 	stw	r3,-4(r2)
 8009a54:	a47fed2e 	bgeu	r20,r17,8009a0c <__alt_data_end+0xfc009a0c>
 8009a58:	9485883a 	add	r2,r18,r18
 8009a5c:	1085883a 	add	r2,r2,r2
 8009a60:	a887883a 	add	r3,r21,r2
 8009a64:	18800017 	ldw	r2,0(r3)
 8009a68:	10000b1e 	bne	r2,zero,8009a98 <quorem+0x1c8>
 8009a6c:	18bfff04 	addi	r2,r3,-4
 8009a70:	a880082e 	bgeu	r21,r2,8009a94 <quorem+0x1c4>
 8009a74:	18ffff17 	ldw	r3,-4(r3)
 8009a78:	18000326 	beq	r3,zero,8009a88 <quorem+0x1b8>
 8009a7c:	00000506 	br	8009a94 <quorem+0x1c4>
 8009a80:	10c00017 	ldw	r3,0(r2)
 8009a84:	1800031e 	bne	r3,zero,8009a94 <quorem+0x1c4>
 8009a88:	10bfff04 	addi	r2,r2,-4
 8009a8c:	94bfffc4 	addi	r18,r18,-1
 8009a90:	a8bffb36 	bltu	r21,r2,8009a80 <__alt_data_end+0xfc009a80>
 8009a94:	84800415 	stw	r18,16(r16)
 8009a98:	9805883a 	mov	r2,r19
 8009a9c:	dfc00817 	ldw	ra,32(sp)
 8009aa0:	ddc00717 	ldw	r23,28(sp)
 8009aa4:	dd800617 	ldw	r22,24(sp)
 8009aa8:	dd400517 	ldw	r21,20(sp)
 8009aac:	dd000417 	ldw	r20,16(sp)
 8009ab0:	dcc00317 	ldw	r19,12(sp)
 8009ab4:	dc800217 	ldw	r18,8(sp)
 8009ab8:	dc400117 	ldw	r17,4(sp)
 8009abc:	dc000017 	ldw	r16,0(sp)
 8009ac0:	dec00904 	addi	sp,sp,36
 8009ac4:	f800283a 	ret
 8009ac8:	0005883a 	mov	r2,zero
 8009acc:	003ff306 	br	8009a9c <__alt_data_end+0xfc009a9c>

08009ad0 <_dtoa_r>:
 8009ad0:	20801017 	ldw	r2,64(r4)
 8009ad4:	deffde04 	addi	sp,sp,-136
 8009ad8:	df002015 	stw	fp,128(sp)
 8009adc:	dcc01b15 	stw	r19,108(sp)
 8009ae0:	dc801a15 	stw	r18,104(sp)
 8009ae4:	dc401915 	stw	r17,100(sp)
 8009ae8:	dc001815 	stw	r16,96(sp)
 8009aec:	dfc02115 	stw	ra,132(sp)
 8009af0:	ddc01f15 	stw	r23,124(sp)
 8009af4:	dd801e15 	stw	r22,120(sp)
 8009af8:	dd401d15 	stw	r21,116(sp)
 8009afc:	dd001c15 	stw	r20,112(sp)
 8009b00:	d9c00315 	stw	r7,12(sp)
 8009b04:	2039883a 	mov	fp,r4
 8009b08:	3023883a 	mov	r17,r6
 8009b0c:	2825883a 	mov	r18,r5
 8009b10:	dc002417 	ldw	r16,144(sp)
 8009b14:	3027883a 	mov	r19,r6
 8009b18:	10000826 	beq	r2,zero,8009b3c <_dtoa_r+0x6c>
 8009b1c:	21801117 	ldw	r6,68(r4)
 8009b20:	00c00044 	movi	r3,1
 8009b24:	100b883a 	mov	r5,r2
 8009b28:	1986983a 	sll	r3,r3,r6
 8009b2c:	11800115 	stw	r6,4(r2)
 8009b30:	10c00215 	stw	r3,8(r2)
 8009b34:	800d2140 	call	800d214 <_Bfree>
 8009b38:	e0001015 	stw	zero,64(fp)
 8009b3c:	88002e16 	blt	r17,zero,8009bf8 <_dtoa_r+0x128>
 8009b40:	80000015 	stw	zero,0(r16)
 8009b44:	889ffc2c 	andhi	r2,r17,32752
 8009b48:	00dffc34 	movhi	r3,32752
 8009b4c:	10c01c26 	beq	r2,r3,8009bc0 <_dtoa_r+0xf0>
 8009b50:	000d883a 	mov	r6,zero
 8009b54:	000f883a 	mov	r7,zero
 8009b58:	9009883a 	mov	r4,r18
 8009b5c:	980b883a 	mov	r5,r19
 8009b60:	8005be00 	call	8005be0 <__eqdf2>
 8009b64:	10002b1e 	bne	r2,zero,8009c14 <_dtoa_r+0x144>
 8009b68:	d9c02317 	ldw	r7,140(sp)
 8009b6c:	00800044 	movi	r2,1
 8009b70:	38800015 	stw	r2,0(r7)
 8009b74:	d8802517 	ldw	r2,148(sp)
 8009b78:	10019e26 	beq	r2,zero,800a1f4 <_dtoa_r+0x724>
 8009b7c:	d8c02517 	ldw	r3,148(sp)
 8009b80:	00820074 	movhi	r2,2049
 8009b84:	10973444 	addi	r2,r2,23761
 8009b88:	18800015 	stw	r2,0(r3)
 8009b8c:	10bfffc4 	addi	r2,r2,-1
 8009b90:	dfc02117 	ldw	ra,132(sp)
 8009b94:	df002017 	ldw	fp,128(sp)
 8009b98:	ddc01f17 	ldw	r23,124(sp)
 8009b9c:	dd801e17 	ldw	r22,120(sp)
 8009ba0:	dd401d17 	ldw	r21,116(sp)
 8009ba4:	dd001c17 	ldw	r20,112(sp)
 8009ba8:	dcc01b17 	ldw	r19,108(sp)
 8009bac:	dc801a17 	ldw	r18,104(sp)
 8009bb0:	dc401917 	ldw	r17,100(sp)
 8009bb4:	dc001817 	ldw	r16,96(sp)
 8009bb8:	dec02204 	addi	sp,sp,136
 8009bbc:	f800283a 	ret
 8009bc0:	d8c02317 	ldw	r3,140(sp)
 8009bc4:	0089c3c4 	movi	r2,9999
 8009bc8:	18800015 	stw	r2,0(r3)
 8009bcc:	90017726 	beq	r18,zero,800a1ac <_dtoa_r+0x6dc>
 8009bd0:	00820074 	movhi	r2,2049
 8009bd4:	10974004 	addi	r2,r2,23808
 8009bd8:	d9002517 	ldw	r4,148(sp)
 8009bdc:	203fec26 	beq	r4,zero,8009b90 <__alt_data_end+0xfc009b90>
 8009be0:	10c000c7 	ldb	r3,3(r2)
 8009be4:	1801781e 	bne	r3,zero,800a1c8 <_dtoa_r+0x6f8>
 8009be8:	10c000c4 	addi	r3,r2,3
 8009bec:	d9802517 	ldw	r6,148(sp)
 8009bf0:	30c00015 	stw	r3,0(r6)
 8009bf4:	003fe606 	br	8009b90 <__alt_data_end+0xfc009b90>
 8009bf8:	04e00034 	movhi	r19,32768
 8009bfc:	9cffffc4 	addi	r19,r19,-1
 8009c00:	00800044 	movi	r2,1
 8009c04:	8ce6703a 	and	r19,r17,r19
 8009c08:	80800015 	stw	r2,0(r16)
 8009c0c:	9823883a 	mov	r17,r19
 8009c10:	003fcc06 	br	8009b44 <__alt_data_end+0xfc009b44>
 8009c14:	d8800204 	addi	r2,sp,8
 8009c18:	d8800015 	stw	r2,0(sp)
 8009c1c:	d9c00104 	addi	r7,sp,4
 8009c20:	900b883a 	mov	r5,r18
 8009c24:	980d883a 	mov	r6,r19
 8009c28:	e009883a 	mov	r4,fp
 8009c2c:	8820d53a 	srli	r16,r17,20
 8009c30:	800de000 	call	800de00 <__d2b>
 8009c34:	d8800915 	stw	r2,36(sp)
 8009c38:	8001651e 	bne	r16,zero,800a1d0 <_dtoa_r+0x700>
 8009c3c:	dd800217 	ldw	r22,8(sp)
 8009c40:	dc000117 	ldw	r16,4(sp)
 8009c44:	00800804 	movi	r2,32
 8009c48:	b421883a 	add	r16,r22,r16
 8009c4c:	80c10c84 	addi	r3,r16,1074
 8009c50:	10c2d10e 	bge	r2,r3,800a798 <_dtoa_r+0xcc8>
 8009c54:	00801004 	movi	r2,64
 8009c58:	81010484 	addi	r4,r16,1042
 8009c5c:	10c7c83a 	sub	r3,r2,r3
 8009c60:	9108d83a 	srl	r4,r18,r4
 8009c64:	88e2983a 	sll	r17,r17,r3
 8009c68:	2448b03a 	or	r4,r4,r17
 8009c6c:	80113640 	call	8011364 <__floatunsidf>
 8009c70:	017f8434 	movhi	r5,65040
 8009c74:	01800044 	movi	r6,1
 8009c78:	1009883a 	mov	r4,r2
 8009c7c:	194b883a 	add	r5,r3,r5
 8009c80:	843fffc4 	addi	r16,r16,-1
 8009c84:	d9801115 	stw	r6,68(sp)
 8009c88:	000d883a 	mov	r6,zero
 8009c8c:	01cffe34 	movhi	r7,16376
 8009c90:	80065500 	call	8006550 <__subdf3>
 8009c94:	0198dbf4 	movhi	r6,25455
 8009c98:	01cff4f4 	movhi	r7,16339
 8009c9c:	3190d844 	addi	r6,r6,17249
 8009ca0:	39e1e9c4 	addi	r7,r7,-30809
 8009ca4:	1009883a 	mov	r4,r2
 8009ca8:	180b883a 	mov	r5,r3
 8009cac:	8005e380 	call	8005e38 <__muldf3>
 8009cb0:	01a2d874 	movhi	r6,35681
 8009cb4:	01cff1f4 	movhi	r7,16327
 8009cb8:	31b22cc4 	addi	r6,r6,-14157
 8009cbc:	39e28a04 	addi	r7,r7,-30168
 8009cc0:	180b883a 	mov	r5,r3
 8009cc4:	1009883a 	mov	r4,r2
 8009cc8:	8004a4c0 	call	8004a4c <__adddf3>
 8009ccc:	8009883a 	mov	r4,r16
 8009cd0:	1029883a 	mov	r20,r2
 8009cd4:	1823883a 	mov	r17,r3
 8009cd8:	8006ecc0 	call	8006ecc <__floatsidf>
 8009cdc:	019427f4 	movhi	r6,20639
 8009ce0:	01cff4f4 	movhi	r7,16339
 8009ce4:	319e7ec4 	addi	r6,r6,31227
 8009ce8:	39d104c4 	addi	r7,r7,17427
 8009cec:	1009883a 	mov	r4,r2
 8009cf0:	180b883a 	mov	r5,r3
 8009cf4:	8005e380 	call	8005e38 <__muldf3>
 8009cf8:	100d883a 	mov	r6,r2
 8009cfc:	180f883a 	mov	r7,r3
 8009d00:	a009883a 	mov	r4,r20
 8009d04:	880b883a 	mov	r5,r17
 8009d08:	8004a4c0 	call	8004a4c <__adddf3>
 8009d0c:	1009883a 	mov	r4,r2
 8009d10:	180b883a 	mov	r5,r3
 8009d14:	1029883a 	mov	r20,r2
 8009d18:	1823883a 	mov	r17,r3
 8009d1c:	8006e4c0 	call	8006e4c <__fixdfsi>
 8009d20:	000d883a 	mov	r6,zero
 8009d24:	000f883a 	mov	r7,zero
 8009d28:	a009883a 	mov	r4,r20
 8009d2c:	880b883a 	mov	r5,r17
 8009d30:	d8800515 	stw	r2,20(sp)
 8009d34:	8005d440 	call	8005d44 <__ledf2>
 8009d38:	10028716 	blt	r2,zero,800a758 <_dtoa_r+0xc88>
 8009d3c:	d8c00517 	ldw	r3,20(sp)
 8009d40:	00800584 	movi	r2,22
 8009d44:	10c27536 	bltu	r2,r3,800a71c <_dtoa_r+0xc4c>
 8009d48:	180490fa 	slli	r2,r3,3
 8009d4c:	00c20074 	movhi	r3,2049
 8009d50:	18d75b04 	addi	r3,r3,23916
 8009d54:	1885883a 	add	r2,r3,r2
 8009d58:	11000017 	ldw	r4,0(r2)
 8009d5c:	11400117 	ldw	r5,4(r2)
 8009d60:	900d883a 	mov	r6,r18
 8009d64:	980f883a 	mov	r7,r19
 8009d68:	8005c680 	call	8005c68 <__gedf2>
 8009d6c:	00828d0e 	bge	zero,r2,800a7a4 <_dtoa_r+0xcd4>
 8009d70:	d9000517 	ldw	r4,20(sp)
 8009d74:	d8000e15 	stw	zero,56(sp)
 8009d78:	213fffc4 	addi	r4,r4,-1
 8009d7c:	d9000515 	stw	r4,20(sp)
 8009d80:	b42dc83a 	sub	r22,r22,r16
 8009d84:	b5bfffc4 	addi	r22,r22,-1
 8009d88:	b0026f16 	blt	r22,zero,800a748 <_dtoa_r+0xc78>
 8009d8c:	d8000815 	stw	zero,32(sp)
 8009d90:	d9c00517 	ldw	r7,20(sp)
 8009d94:	38026416 	blt	r7,zero,800a728 <_dtoa_r+0xc58>
 8009d98:	b1ed883a 	add	r22,r22,r7
 8009d9c:	d9c00d15 	stw	r7,52(sp)
 8009da0:	d8000a15 	stw	zero,40(sp)
 8009da4:	d9800317 	ldw	r6,12(sp)
 8009da8:	00800244 	movi	r2,9
 8009dac:	11811436 	bltu	r2,r6,800a200 <_dtoa_r+0x730>
 8009db0:	00800144 	movi	r2,5
 8009db4:	1184e10e 	bge	r2,r6,800b13c <_dtoa_r+0x166c>
 8009db8:	31bfff04 	addi	r6,r6,-4
 8009dbc:	d9800315 	stw	r6,12(sp)
 8009dc0:	0023883a 	mov	r17,zero
 8009dc4:	d9800317 	ldw	r6,12(sp)
 8009dc8:	008000c4 	movi	r2,3
 8009dcc:	30836726 	beq	r6,r2,800ab6c <_dtoa_r+0x109c>
 8009dd0:	1183410e 	bge	r2,r6,800aad8 <_dtoa_r+0x1008>
 8009dd4:	d9c00317 	ldw	r7,12(sp)
 8009dd8:	00800104 	movi	r2,4
 8009ddc:	38827c26 	beq	r7,r2,800a7d0 <_dtoa_r+0xd00>
 8009de0:	00800144 	movi	r2,5
 8009de4:	3884c41e 	bne	r7,r2,800b0f8 <_dtoa_r+0x1628>
 8009de8:	00800044 	movi	r2,1
 8009dec:	d8800b15 	stw	r2,44(sp)
 8009df0:	d8c00517 	ldw	r3,20(sp)
 8009df4:	d9002217 	ldw	r4,136(sp)
 8009df8:	1907883a 	add	r3,r3,r4
 8009dfc:	19800044 	addi	r6,r3,1
 8009e00:	d8c00c15 	stw	r3,48(sp)
 8009e04:	d9800615 	stw	r6,24(sp)
 8009e08:	0183a40e 	bge	zero,r6,800ac9c <_dtoa_r+0x11cc>
 8009e0c:	d9800617 	ldw	r6,24(sp)
 8009e10:	3021883a 	mov	r16,r6
 8009e14:	e0001115 	stw	zero,68(fp)
 8009e18:	008005c4 	movi	r2,23
 8009e1c:	1184c92e 	bgeu	r2,r6,800b144 <_dtoa_r+0x1674>
 8009e20:	00c00044 	movi	r3,1
 8009e24:	00800104 	movi	r2,4
 8009e28:	1085883a 	add	r2,r2,r2
 8009e2c:	11000504 	addi	r4,r2,20
 8009e30:	180b883a 	mov	r5,r3
 8009e34:	18c00044 	addi	r3,r3,1
 8009e38:	313ffb2e 	bgeu	r6,r4,8009e28 <__alt_data_end+0xfc009e28>
 8009e3c:	e1401115 	stw	r5,68(fp)
 8009e40:	e009883a 	mov	r4,fp
 8009e44:	800d16c0 	call	800d16c <_Balloc>
 8009e48:	d8800715 	stw	r2,28(sp)
 8009e4c:	e0801015 	stw	r2,64(fp)
 8009e50:	00800384 	movi	r2,14
 8009e54:	1400f736 	bltu	r2,r16,800a234 <_dtoa_r+0x764>
 8009e58:	8800f626 	beq	r17,zero,800a234 <_dtoa_r+0x764>
 8009e5c:	d9c00517 	ldw	r7,20(sp)
 8009e60:	01c39a0e 	bge	zero,r7,800accc <_dtoa_r+0x11fc>
 8009e64:	388003cc 	andi	r2,r7,15
 8009e68:	100490fa 	slli	r2,r2,3
 8009e6c:	382bd13a 	srai	r21,r7,4
 8009e70:	00c20074 	movhi	r3,2049
 8009e74:	18d75b04 	addi	r3,r3,23916
 8009e78:	1885883a 	add	r2,r3,r2
 8009e7c:	a8c0040c 	andi	r3,r21,16
 8009e80:	12400017 	ldw	r9,0(r2)
 8009e84:	12000117 	ldw	r8,4(r2)
 8009e88:	18037926 	beq	r3,zero,800ac70 <_dtoa_r+0x11a0>
 8009e8c:	00820074 	movhi	r2,2049
 8009e90:	10975104 	addi	r2,r2,23876
 8009e94:	11800817 	ldw	r6,32(r2)
 8009e98:	11c00917 	ldw	r7,36(r2)
 8009e9c:	9009883a 	mov	r4,r18
 8009ea0:	980b883a 	mov	r5,r19
 8009ea4:	da001715 	stw	r8,92(sp)
 8009ea8:	da401615 	stw	r9,88(sp)
 8009eac:	80052f80 	call	80052f8 <__divdf3>
 8009eb0:	da001717 	ldw	r8,92(sp)
 8009eb4:	da401617 	ldw	r9,88(sp)
 8009eb8:	ad4003cc 	andi	r21,r21,15
 8009ebc:	040000c4 	movi	r16,3
 8009ec0:	1023883a 	mov	r17,r2
 8009ec4:	1829883a 	mov	r20,r3
 8009ec8:	a8001126 	beq	r21,zero,8009f10 <_dtoa_r+0x440>
 8009ecc:	05c20074 	movhi	r23,2049
 8009ed0:	bdd75104 	addi	r23,r23,23876
 8009ed4:	4805883a 	mov	r2,r9
 8009ed8:	4007883a 	mov	r3,r8
 8009edc:	a980004c 	andi	r6,r21,1
 8009ee0:	1009883a 	mov	r4,r2
 8009ee4:	a82bd07a 	srai	r21,r21,1
 8009ee8:	180b883a 	mov	r5,r3
 8009eec:	30000426 	beq	r6,zero,8009f00 <_dtoa_r+0x430>
 8009ef0:	b9800017 	ldw	r6,0(r23)
 8009ef4:	b9c00117 	ldw	r7,4(r23)
 8009ef8:	84000044 	addi	r16,r16,1
 8009efc:	8005e380 	call	8005e38 <__muldf3>
 8009f00:	bdc00204 	addi	r23,r23,8
 8009f04:	a83ff51e 	bne	r21,zero,8009edc <__alt_data_end+0xfc009edc>
 8009f08:	1013883a 	mov	r9,r2
 8009f0c:	1811883a 	mov	r8,r3
 8009f10:	480d883a 	mov	r6,r9
 8009f14:	400f883a 	mov	r7,r8
 8009f18:	8809883a 	mov	r4,r17
 8009f1c:	a00b883a 	mov	r5,r20
 8009f20:	80052f80 	call	80052f8 <__divdf3>
 8009f24:	d8800f15 	stw	r2,60(sp)
 8009f28:	d8c01015 	stw	r3,64(sp)
 8009f2c:	d8c00e17 	ldw	r3,56(sp)
 8009f30:	18000626 	beq	r3,zero,8009f4c <_dtoa_r+0x47c>
 8009f34:	d9000f17 	ldw	r4,60(sp)
 8009f38:	d9401017 	ldw	r5,64(sp)
 8009f3c:	000d883a 	mov	r6,zero
 8009f40:	01cffc34 	movhi	r7,16368
 8009f44:	8005d440 	call	8005d44 <__ledf2>
 8009f48:	10040b16 	blt	r2,zero,800af78 <_dtoa_r+0x14a8>
 8009f4c:	8009883a 	mov	r4,r16
 8009f50:	8006ecc0 	call	8006ecc <__floatsidf>
 8009f54:	d9800f17 	ldw	r6,60(sp)
 8009f58:	d9c01017 	ldw	r7,64(sp)
 8009f5c:	1009883a 	mov	r4,r2
 8009f60:	180b883a 	mov	r5,r3
 8009f64:	8005e380 	call	8005e38 <__muldf3>
 8009f68:	000d883a 	mov	r6,zero
 8009f6c:	01d00734 	movhi	r7,16412
 8009f70:	1009883a 	mov	r4,r2
 8009f74:	180b883a 	mov	r5,r3
 8009f78:	8004a4c0 	call	8004a4c <__adddf3>
 8009f7c:	1021883a 	mov	r16,r2
 8009f80:	d8800617 	ldw	r2,24(sp)
 8009f84:	047f3034 	movhi	r17,64704
 8009f88:	1c63883a 	add	r17,r3,r17
 8009f8c:	10031826 	beq	r2,zero,800abf0 <_dtoa_r+0x1120>
 8009f90:	d8c00517 	ldw	r3,20(sp)
 8009f94:	db000617 	ldw	r12,24(sp)
 8009f98:	d8c01315 	stw	r3,76(sp)
 8009f9c:	d9000b17 	ldw	r4,44(sp)
 8009fa0:	20038f26 	beq	r4,zero,800ade0 <_dtoa_r+0x1310>
 8009fa4:	60bfffc4 	addi	r2,r12,-1
 8009fa8:	100490fa 	slli	r2,r2,3
 8009fac:	00c20074 	movhi	r3,2049
 8009fb0:	18d75b04 	addi	r3,r3,23916
 8009fb4:	1885883a 	add	r2,r3,r2
 8009fb8:	11800017 	ldw	r6,0(r2)
 8009fbc:	11c00117 	ldw	r7,4(r2)
 8009fc0:	d8800717 	ldw	r2,28(sp)
 8009fc4:	0009883a 	mov	r4,zero
 8009fc8:	014ff834 	movhi	r5,16352
 8009fcc:	db001615 	stw	r12,88(sp)
 8009fd0:	15c00044 	addi	r23,r2,1
 8009fd4:	80052f80 	call	80052f8 <__divdf3>
 8009fd8:	800d883a 	mov	r6,r16
 8009fdc:	880f883a 	mov	r7,r17
 8009fe0:	1009883a 	mov	r4,r2
 8009fe4:	180b883a 	mov	r5,r3
 8009fe8:	80065500 	call	8006550 <__subdf3>
 8009fec:	d9401017 	ldw	r5,64(sp)
 8009ff0:	d9000f17 	ldw	r4,60(sp)
 8009ff4:	102b883a 	mov	r21,r2
 8009ff8:	d8c01215 	stw	r3,72(sp)
 8009ffc:	8006e4c0 	call	8006e4c <__fixdfsi>
 800a000:	1009883a 	mov	r4,r2
 800a004:	1029883a 	mov	r20,r2
 800a008:	8006ecc0 	call	8006ecc <__floatsidf>
 800a00c:	d9000f17 	ldw	r4,60(sp)
 800a010:	d9401017 	ldw	r5,64(sp)
 800a014:	100d883a 	mov	r6,r2
 800a018:	180f883a 	mov	r7,r3
 800a01c:	80065500 	call	8006550 <__subdf3>
 800a020:	1823883a 	mov	r17,r3
 800a024:	d8c00717 	ldw	r3,28(sp)
 800a028:	d9401217 	ldw	r5,72(sp)
 800a02c:	a2000c04 	addi	r8,r20,48
 800a030:	1021883a 	mov	r16,r2
 800a034:	1a000005 	stb	r8,0(r3)
 800a038:	800d883a 	mov	r6,r16
 800a03c:	880f883a 	mov	r7,r17
 800a040:	a809883a 	mov	r4,r21
 800a044:	4029883a 	mov	r20,r8
 800a048:	8005c680 	call	8005c68 <__gedf2>
 800a04c:	00841d16 	blt	zero,r2,800b0c4 <_dtoa_r+0x15f4>
 800a050:	800d883a 	mov	r6,r16
 800a054:	880f883a 	mov	r7,r17
 800a058:	0009883a 	mov	r4,zero
 800a05c:	014ffc34 	movhi	r5,16368
 800a060:	80065500 	call	8006550 <__subdf3>
 800a064:	d9401217 	ldw	r5,72(sp)
 800a068:	100d883a 	mov	r6,r2
 800a06c:	180f883a 	mov	r7,r3
 800a070:	a809883a 	mov	r4,r21
 800a074:	8005c680 	call	8005c68 <__gedf2>
 800a078:	db001617 	ldw	r12,88(sp)
 800a07c:	00840e16 	blt	zero,r2,800b0b8 <_dtoa_r+0x15e8>
 800a080:	00800044 	movi	r2,1
 800a084:	13006b0e 	bge	r2,r12,800a234 <_dtoa_r+0x764>
 800a088:	d9000717 	ldw	r4,28(sp)
 800a08c:	dd800f15 	stw	r22,60(sp)
 800a090:	dcc01015 	stw	r19,64(sp)
 800a094:	2319883a 	add	r12,r4,r12
 800a098:	dcc01217 	ldw	r19,72(sp)
 800a09c:	602d883a 	mov	r22,r12
 800a0a0:	dc801215 	stw	r18,72(sp)
 800a0a4:	b825883a 	mov	r18,r23
 800a0a8:	00000906 	br	800a0d0 <_dtoa_r+0x600>
 800a0ac:	80065500 	call	8006550 <__subdf3>
 800a0b0:	a80d883a 	mov	r6,r21
 800a0b4:	980f883a 	mov	r7,r19
 800a0b8:	1009883a 	mov	r4,r2
 800a0bc:	180b883a 	mov	r5,r3
 800a0c0:	8005d440 	call	8005d44 <__ledf2>
 800a0c4:	1003e816 	blt	r2,zero,800b068 <_dtoa_r+0x1598>
 800a0c8:	b825883a 	mov	r18,r23
 800a0cc:	bd83e926 	beq	r23,r22,800b074 <_dtoa_r+0x15a4>
 800a0d0:	a809883a 	mov	r4,r21
 800a0d4:	980b883a 	mov	r5,r19
 800a0d8:	000d883a 	mov	r6,zero
 800a0dc:	01d00934 	movhi	r7,16420
 800a0e0:	8005e380 	call	8005e38 <__muldf3>
 800a0e4:	000d883a 	mov	r6,zero
 800a0e8:	01d00934 	movhi	r7,16420
 800a0ec:	8009883a 	mov	r4,r16
 800a0f0:	880b883a 	mov	r5,r17
 800a0f4:	102b883a 	mov	r21,r2
 800a0f8:	1827883a 	mov	r19,r3
 800a0fc:	8005e380 	call	8005e38 <__muldf3>
 800a100:	180b883a 	mov	r5,r3
 800a104:	1009883a 	mov	r4,r2
 800a108:	1821883a 	mov	r16,r3
 800a10c:	1023883a 	mov	r17,r2
 800a110:	8006e4c0 	call	8006e4c <__fixdfsi>
 800a114:	1009883a 	mov	r4,r2
 800a118:	1029883a 	mov	r20,r2
 800a11c:	8006ecc0 	call	8006ecc <__floatsidf>
 800a120:	8809883a 	mov	r4,r17
 800a124:	800b883a 	mov	r5,r16
 800a128:	100d883a 	mov	r6,r2
 800a12c:	180f883a 	mov	r7,r3
 800a130:	80065500 	call	8006550 <__subdf3>
 800a134:	a5000c04 	addi	r20,r20,48
 800a138:	a80d883a 	mov	r6,r21
 800a13c:	980f883a 	mov	r7,r19
 800a140:	1009883a 	mov	r4,r2
 800a144:	180b883a 	mov	r5,r3
 800a148:	95000005 	stb	r20,0(r18)
 800a14c:	1021883a 	mov	r16,r2
 800a150:	1823883a 	mov	r17,r3
 800a154:	8005d440 	call	8005d44 <__ledf2>
 800a158:	bdc00044 	addi	r23,r23,1
 800a15c:	800d883a 	mov	r6,r16
 800a160:	880f883a 	mov	r7,r17
 800a164:	0009883a 	mov	r4,zero
 800a168:	014ffc34 	movhi	r5,16368
 800a16c:	103fcf0e 	bge	r2,zero,800a0ac <__alt_data_end+0xfc00a0ac>
 800a170:	d8c01317 	ldw	r3,76(sp)
 800a174:	d8c00515 	stw	r3,20(sp)
 800a178:	d9400917 	ldw	r5,36(sp)
 800a17c:	e009883a 	mov	r4,fp
 800a180:	800d2140 	call	800d214 <_Bfree>
 800a184:	d9000517 	ldw	r4,20(sp)
 800a188:	d9802317 	ldw	r6,140(sp)
 800a18c:	d9c02517 	ldw	r7,148(sp)
 800a190:	b8000005 	stb	zero,0(r23)
 800a194:	20800044 	addi	r2,r4,1
 800a198:	30800015 	stw	r2,0(r6)
 800a19c:	3802aa26 	beq	r7,zero,800ac48 <_dtoa_r+0x1178>
 800a1a0:	3dc00015 	stw	r23,0(r7)
 800a1a4:	d8800717 	ldw	r2,28(sp)
 800a1a8:	003e7906 	br	8009b90 <__alt_data_end+0xfc009b90>
 800a1ac:	00800434 	movhi	r2,16
 800a1b0:	10bfffc4 	addi	r2,r2,-1
 800a1b4:	88a2703a 	and	r17,r17,r2
 800a1b8:	883e851e 	bne	r17,zero,8009bd0 <__alt_data_end+0xfc009bd0>
 800a1bc:	00820074 	movhi	r2,2049
 800a1c0:	10973d04 	addi	r2,r2,23796
 800a1c4:	003e8406 	br	8009bd8 <__alt_data_end+0xfc009bd8>
 800a1c8:	10c00204 	addi	r3,r2,8
 800a1cc:	003e8706 	br	8009bec <__alt_data_end+0xfc009bec>
 800a1d0:	01400434 	movhi	r5,16
 800a1d4:	297fffc4 	addi	r5,r5,-1
 800a1d8:	994a703a 	and	r5,r19,r5
 800a1dc:	9009883a 	mov	r4,r18
 800a1e0:	843f0044 	addi	r16,r16,-1023
 800a1e4:	294ffc34 	orhi	r5,r5,16368
 800a1e8:	dd800217 	ldw	r22,8(sp)
 800a1ec:	d8001115 	stw	zero,68(sp)
 800a1f0:	003ea506 	br	8009c88 <__alt_data_end+0xfc009c88>
 800a1f4:	00820074 	movhi	r2,2049
 800a1f8:	10973404 	addi	r2,r2,23760
 800a1fc:	003e6406 	br	8009b90 <__alt_data_end+0xfc009b90>
 800a200:	e0001115 	stw	zero,68(fp)
 800a204:	000b883a 	mov	r5,zero
 800a208:	e009883a 	mov	r4,fp
 800a20c:	800d16c0 	call	800d16c <_Balloc>
 800a210:	01bfffc4 	movi	r6,-1
 800a214:	01c00044 	movi	r7,1
 800a218:	d8800715 	stw	r2,28(sp)
 800a21c:	d9800c15 	stw	r6,48(sp)
 800a220:	e0801015 	stw	r2,64(fp)
 800a224:	d8000315 	stw	zero,12(sp)
 800a228:	d9c00b15 	stw	r7,44(sp)
 800a22c:	d9800615 	stw	r6,24(sp)
 800a230:	d8002215 	stw	zero,136(sp)
 800a234:	d8800117 	ldw	r2,4(sp)
 800a238:	10008916 	blt	r2,zero,800a460 <_dtoa_r+0x990>
 800a23c:	d9000517 	ldw	r4,20(sp)
 800a240:	00c00384 	movi	r3,14
 800a244:	19008616 	blt	r3,r4,800a460 <_dtoa_r+0x990>
 800a248:	200490fa 	slli	r2,r4,3
 800a24c:	00c20074 	movhi	r3,2049
 800a250:	d9802217 	ldw	r6,136(sp)
 800a254:	18d75b04 	addi	r3,r3,23916
 800a258:	1885883a 	add	r2,r3,r2
 800a25c:	14000017 	ldw	r16,0(r2)
 800a260:	14400117 	ldw	r17,4(r2)
 800a264:	30016316 	blt	r6,zero,800a7f4 <_dtoa_r+0xd24>
 800a268:	800d883a 	mov	r6,r16
 800a26c:	880f883a 	mov	r7,r17
 800a270:	9009883a 	mov	r4,r18
 800a274:	980b883a 	mov	r5,r19
 800a278:	80052f80 	call	80052f8 <__divdf3>
 800a27c:	180b883a 	mov	r5,r3
 800a280:	1009883a 	mov	r4,r2
 800a284:	8006e4c0 	call	8006e4c <__fixdfsi>
 800a288:	1009883a 	mov	r4,r2
 800a28c:	102b883a 	mov	r21,r2
 800a290:	8006ecc0 	call	8006ecc <__floatsidf>
 800a294:	800d883a 	mov	r6,r16
 800a298:	880f883a 	mov	r7,r17
 800a29c:	1009883a 	mov	r4,r2
 800a2a0:	180b883a 	mov	r5,r3
 800a2a4:	8005e380 	call	8005e38 <__muldf3>
 800a2a8:	100d883a 	mov	r6,r2
 800a2ac:	180f883a 	mov	r7,r3
 800a2b0:	9009883a 	mov	r4,r18
 800a2b4:	980b883a 	mov	r5,r19
 800a2b8:	80065500 	call	8006550 <__subdf3>
 800a2bc:	d9c00717 	ldw	r7,28(sp)
 800a2c0:	1009883a 	mov	r4,r2
 800a2c4:	a8800c04 	addi	r2,r21,48
 800a2c8:	38800005 	stb	r2,0(r7)
 800a2cc:	3dc00044 	addi	r23,r7,1
 800a2d0:	d9c00617 	ldw	r7,24(sp)
 800a2d4:	01800044 	movi	r6,1
 800a2d8:	180b883a 	mov	r5,r3
 800a2dc:	2005883a 	mov	r2,r4
 800a2e0:	39803826 	beq	r7,r6,800a3c4 <_dtoa_r+0x8f4>
 800a2e4:	000d883a 	mov	r6,zero
 800a2e8:	01d00934 	movhi	r7,16420
 800a2ec:	8005e380 	call	8005e38 <__muldf3>
 800a2f0:	000d883a 	mov	r6,zero
 800a2f4:	000f883a 	mov	r7,zero
 800a2f8:	1009883a 	mov	r4,r2
 800a2fc:	180b883a 	mov	r5,r3
 800a300:	1025883a 	mov	r18,r2
 800a304:	1827883a 	mov	r19,r3
 800a308:	8005be00 	call	8005be0 <__eqdf2>
 800a30c:	103f9a26 	beq	r2,zero,800a178 <__alt_data_end+0xfc00a178>
 800a310:	d9c00617 	ldw	r7,24(sp)
 800a314:	d8c00717 	ldw	r3,28(sp)
 800a318:	b829883a 	mov	r20,r23
 800a31c:	38bfffc4 	addi	r2,r7,-1
 800a320:	18ad883a 	add	r22,r3,r2
 800a324:	00000a06 	br	800a350 <_dtoa_r+0x880>
 800a328:	8005e380 	call	8005e38 <__muldf3>
 800a32c:	000d883a 	mov	r6,zero
 800a330:	000f883a 	mov	r7,zero
 800a334:	1009883a 	mov	r4,r2
 800a338:	180b883a 	mov	r5,r3
 800a33c:	1025883a 	mov	r18,r2
 800a340:	1827883a 	mov	r19,r3
 800a344:	b829883a 	mov	r20,r23
 800a348:	8005be00 	call	8005be0 <__eqdf2>
 800a34c:	103f8a26 	beq	r2,zero,800a178 <__alt_data_end+0xfc00a178>
 800a350:	800d883a 	mov	r6,r16
 800a354:	880f883a 	mov	r7,r17
 800a358:	9009883a 	mov	r4,r18
 800a35c:	980b883a 	mov	r5,r19
 800a360:	80052f80 	call	80052f8 <__divdf3>
 800a364:	180b883a 	mov	r5,r3
 800a368:	1009883a 	mov	r4,r2
 800a36c:	8006e4c0 	call	8006e4c <__fixdfsi>
 800a370:	1009883a 	mov	r4,r2
 800a374:	102b883a 	mov	r21,r2
 800a378:	8006ecc0 	call	8006ecc <__floatsidf>
 800a37c:	800d883a 	mov	r6,r16
 800a380:	880f883a 	mov	r7,r17
 800a384:	1009883a 	mov	r4,r2
 800a388:	180b883a 	mov	r5,r3
 800a38c:	8005e380 	call	8005e38 <__muldf3>
 800a390:	100d883a 	mov	r6,r2
 800a394:	180f883a 	mov	r7,r3
 800a398:	9009883a 	mov	r4,r18
 800a39c:	980b883a 	mov	r5,r19
 800a3a0:	80065500 	call	8006550 <__subdf3>
 800a3a4:	aa000c04 	addi	r8,r21,48
 800a3a8:	a2000005 	stb	r8,0(r20)
 800a3ac:	000d883a 	mov	r6,zero
 800a3b0:	01d00934 	movhi	r7,16420
 800a3b4:	1009883a 	mov	r4,r2
 800a3b8:	180b883a 	mov	r5,r3
 800a3bc:	a5c00044 	addi	r23,r20,1
 800a3c0:	b53fd91e 	bne	r22,r20,800a328 <__alt_data_end+0xfc00a328>
 800a3c4:	100d883a 	mov	r6,r2
 800a3c8:	180f883a 	mov	r7,r3
 800a3cc:	1009883a 	mov	r4,r2
 800a3d0:	180b883a 	mov	r5,r3
 800a3d4:	8004a4c0 	call	8004a4c <__adddf3>
 800a3d8:	100d883a 	mov	r6,r2
 800a3dc:	180f883a 	mov	r7,r3
 800a3e0:	8009883a 	mov	r4,r16
 800a3e4:	880b883a 	mov	r5,r17
 800a3e8:	1027883a 	mov	r19,r2
 800a3ec:	1825883a 	mov	r18,r3
 800a3f0:	8005d440 	call	8005d44 <__ledf2>
 800a3f4:	10000816 	blt	r2,zero,800a418 <_dtoa_r+0x948>
 800a3f8:	980d883a 	mov	r6,r19
 800a3fc:	900f883a 	mov	r7,r18
 800a400:	8009883a 	mov	r4,r16
 800a404:	880b883a 	mov	r5,r17
 800a408:	8005be00 	call	8005be0 <__eqdf2>
 800a40c:	103f5a1e 	bne	r2,zero,800a178 <__alt_data_end+0xfc00a178>
 800a410:	ad40004c 	andi	r21,r21,1
 800a414:	a83f5826 	beq	r21,zero,800a178 <__alt_data_end+0xfc00a178>
 800a418:	bd3fffc3 	ldbu	r20,-1(r23)
 800a41c:	b8bfffc4 	addi	r2,r23,-1
 800a420:	1007883a 	mov	r3,r2
 800a424:	01400e44 	movi	r5,57
 800a428:	d9800717 	ldw	r6,28(sp)
 800a42c:	00000506 	br	800a444 <_dtoa_r+0x974>
 800a430:	18ffffc4 	addi	r3,r3,-1
 800a434:	11824726 	beq	r2,r6,800ad54 <_dtoa_r+0x1284>
 800a438:	1d000003 	ldbu	r20,0(r3)
 800a43c:	102f883a 	mov	r23,r2
 800a440:	10bfffc4 	addi	r2,r2,-1
 800a444:	a1003fcc 	andi	r4,r20,255
 800a448:	2100201c 	xori	r4,r4,128
 800a44c:	213fe004 	addi	r4,r4,-128
 800a450:	217ff726 	beq	r4,r5,800a430 <__alt_data_end+0xfc00a430>
 800a454:	a2000044 	addi	r8,r20,1
 800a458:	12000005 	stb	r8,0(r2)
 800a45c:	003f4606 	br	800a178 <__alt_data_end+0xfc00a178>
 800a460:	d9000b17 	ldw	r4,44(sp)
 800a464:	2000c826 	beq	r4,zero,800a788 <_dtoa_r+0xcb8>
 800a468:	d9800317 	ldw	r6,12(sp)
 800a46c:	00c00044 	movi	r3,1
 800a470:	1980f90e 	bge	r3,r6,800a858 <_dtoa_r+0xd88>
 800a474:	d8800617 	ldw	r2,24(sp)
 800a478:	d8c00a17 	ldw	r3,40(sp)
 800a47c:	157fffc4 	addi	r21,r2,-1
 800a480:	1d41f316 	blt	r3,r21,800ac50 <_dtoa_r+0x1180>
 800a484:	1d6bc83a 	sub	r21,r3,r21
 800a488:	d9c00617 	ldw	r7,24(sp)
 800a48c:	3802aa16 	blt	r7,zero,800af38 <_dtoa_r+0x1468>
 800a490:	dd000817 	ldw	r20,32(sp)
 800a494:	d8800617 	ldw	r2,24(sp)
 800a498:	d8c00817 	ldw	r3,32(sp)
 800a49c:	01400044 	movi	r5,1
 800a4a0:	e009883a 	mov	r4,fp
 800a4a4:	1887883a 	add	r3,r3,r2
 800a4a8:	d8c00815 	stw	r3,32(sp)
 800a4ac:	b0ad883a 	add	r22,r22,r2
 800a4b0:	800d5780 	call	800d578 <__i2b>
 800a4b4:	1023883a 	mov	r17,r2
 800a4b8:	a0000826 	beq	r20,zero,800a4dc <_dtoa_r+0xa0c>
 800a4bc:	0580070e 	bge	zero,r22,800a4dc <_dtoa_r+0xa0c>
 800a4c0:	a005883a 	mov	r2,r20
 800a4c4:	b500b916 	blt	r22,r20,800a7ac <_dtoa_r+0xcdc>
 800a4c8:	d9000817 	ldw	r4,32(sp)
 800a4cc:	a0a9c83a 	sub	r20,r20,r2
 800a4d0:	b0adc83a 	sub	r22,r22,r2
 800a4d4:	2089c83a 	sub	r4,r4,r2
 800a4d8:	d9000815 	stw	r4,32(sp)
 800a4dc:	d9800a17 	ldw	r6,40(sp)
 800a4e0:	0181810e 	bge	zero,r6,800aae8 <_dtoa_r+0x1018>
 800a4e4:	d9c00b17 	ldw	r7,44(sp)
 800a4e8:	3800b326 	beq	r7,zero,800a7b8 <_dtoa_r+0xce8>
 800a4ec:	a800b226 	beq	r21,zero,800a7b8 <_dtoa_r+0xce8>
 800a4f0:	880b883a 	mov	r5,r17
 800a4f4:	a80d883a 	mov	r6,r21
 800a4f8:	e009883a 	mov	r4,fp
 800a4fc:	800d7ac0 	call	800d7ac <__pow5mult>
 800a500:	d9800917 	ldw	r6,36(sp)
 800a504:	100b883a 	mov	r5,r2
 800a508:	e009883a 	mov	r4,fp
 800a50c:	1023883a 	mov	r17,r2
 800a510:	800d5b40 	call	800d5b4 <__multiply>
 800a514:	1021883a 	mov	r16,r2
 800a518:	d8800a17 	ldw	r2,40(sp)
 800a51c:	d9400917 	ldw	r5,36(sp)
 800a520:	e009883a 	mov	r4,fp
 800a524:	1545c83a 	sub	r2,r2,r21
 800a528:	d8800a15 	stw	r2,40(sp)
 800a52c:	800d2140 	call	800d214 <_Bfree>
 800a530:	d8c00a17 	ldw	r3,40(sp)
 800a534:	18009f1e 	bne	r3,zero,800a7b4 <_dtoa_r+0xce4>
 800a538:	05c00044 	movi	r23,1
 800a53c:	e009883a 	mov	r4,fp
 800a540:	b80b883a 	mov	r5,r23
 800a544:	800d5780 	call	800d578 <__i2b>
 800a548:	d9000d17 	ldw	r4,52(sp)
 800a54c:	102b883a 	mov	r21,r2
 800a550:	2000ce26 	beq	r4,zero,800a88c <_dtoa_r+0xdbc>
 800a554:	200d883a 	mov	r6,r4
 800a558:	100b883a 	mov	r5,r2
 800a55c:	e009883a 	mov	r4,fp
 800a560:	800d7ac0 	call	800d7ac <__pow5mult>
 800a564:	d9800317 	ldw	r6,12(sp)
 800a568:	102b883a 	mov	r21,r2
 800a56c:	b981810e 	bge	r23,r6,800ab74 <_dtoa_r+0x10a4>
 800a570:	0027883a 	mov	r19,zero
 800a574:	a8800417 	ldw	r2,16(r21)
 800a578:	05c00804 	movi	r23,32
 800a57c:	10800104 	addi	r2,r2,4
 800a580:	1085883a 	add	r2,r2,r2
 800a584:	1085883a 	add	r2,r2,r2
 800a588:	a885883a 	add	r2,r21,r2
 800a58c:	11000017 	ldw	r4,0(r2)
 800a590:	800d4600 	call	800d460 <__hi0bits>
 800a594:	b885c83a 	sub	r2,r23,r2
 800a598:	1585883a 	add	r2,r2,r22
 800a59c:	108007cc 	andi	r2,r2,31
 800a5a0:	1000b326 	beq	r2,zero,800a870 <_dtoa_r+0xda0>
 800a5a4:	00c00804 	movi	r3,32
 800a5a8:	1887c83a 	sub	r3,r3,r2
 800a5ac:	01000104 	movi	r4,4
 800a5b0:	20c2cd0e 	bge	r4,r3,800b0e8 <_dtoa_r+0x1618>
 800a5b4:	00c00704 	movi	r3,28
 800a5b8:	1885c83a 	sub	r2,r3,r2
 800a5bc:	d8c00817 	ldw	r3,32(sp)
 800a5c0:	a0a9883a 	add	r20,r20,r2
 800a5c4:	b0ad883a 	add	r22,r22,r2
 800a5c8:	1887883a 	add	r3,r3,r2
 800a5cc:	d8c00815 	stw	r3,32(sp)
 800a5d0:	d9800817 	ldw	r6,32(sp)
 800a5d4:	0180040e 	bge	zero,r6,800a5e8 <_dtoa_r+0xb18>
 800a5d8:	800b883a 	mov	r5,r16
 800a5dc:	e009883a 	mov	r4,fp
 800a5e0:	800d8ec0 	call	800d8ec <__lshift>
 800a5e4:	1021883a 	mov	r16,r2
 800a5e8:	0580050e 	bge	zero,r22,800a600 <_dtoa_r+0xb30>
 800a5ec:	a80b883a 	mov	r5,r21
 800a5f0:	b00d883a 	mov	r6,r22
 800a5f4:	e009883a 	mov	r4,fp
 800a5f8:	800d8ec0 	call	800d8ec <__lshift>
 800a5fc:	102b883a 	mov	r21,r2
 800a600:	d9c00e17 	ldw	r7,56(sp)
 800a604:	3801211e 	bne	r7,zero,800aa8c <_dtoa_r+0xfbc>
 800a608:	d9800617 	ldw	r6,24(sp)
 800a60c:	0181380e 	bge	zero,r6,800aaf0 <_dtoa_r+0x1020>
 800a610:	d8c00b17 	ldw	r3,44(sp)
 800a614:	1800ab1e 	bne	r3,zero,800a8c4 <_dtoa_r+0xdf4>
 800a618:	dc800717 	ldw	r18,28(sp)
 800a61c:	dcc00617 	ldw	r19,24(sp)
 800a620:	9029883a 	mov	r20,r18
 800a624:	00000206 	br	800a630 <_dtoa_r+0xb60>
 800a628:	800d23c0 	call	800d23c <__multadd>
 800a62c:	1021883a 	mov	r16,r2
 800a630:	a80b883a 	mov	r5,r21
 800a634:	8009883a 	mov	r4,r16
 800a638:	80098d00 	call	80098d0 <quorem>
 800a63c:	10800c04 	addi	r2,r2,48
 800a640:	90800005 	stb	r2,0(r18)
 800a644:	94800044 	addi	r18,r18,1
 800a648:	9507c83a 	sub	r3,r18,r20
 800a64c:	000f883a 	mov	r7,zero
 800a650:	01800284 	movi	r6,10
 800a654:	800b883a 	mov	r5,r16
 800a658:	e009883a 	mov	r4,fp
 800a65c:	1cfff216 	blt	r3,r19,800a628 <__alt_data_end+0xfc00a628>
 800a660:	1011883a 	mov	r8,r2
 800a664:	d8800617 	ldw	r2,24(sp)
 800a668:	0082370e 	bge	zero,r2,800af48 <_dtoa_r+0x1478>
 800a66c:	d9000717 	ldw	r4,28(sp)
 800a670:	0025883a 	mov	r18,zero
 800a674:	20af883a 	add	r23,r4,r2
 800a678:	01800044 	movi	r6,1
 800a67c:	800b883a 	mov	r5,r16
 800a680:	e009883a 	mov	r4,fp
 800a684:	da001715 	stw	r8,92(sp)
 800a688:	800d8ec0 	call	800d8ec <__lshift>
 800a68c:	a80b883a 	mov	r5,r21
 800a690:	1009883a 	mov	r4,r2
 800a694:	d8800915 	stw	r2,36(sp)
 800a698:	800da340 	call	800da34 <__mcmp>
 800a69c:	da001717 	ldw	r8,92(sp)
 800a6a0:	0081800e 	bge	zero,r2,800aca4 <_dtoa_r+0x11d4>
 800a6a4:	b93fffc3 	ldbu	r4,-1(r23)
 800a6a8:	b8bfffc4 	addi	r2,r23,-1
 800a6ac:	1007883a 	mov	r3,r2
 800a6b0:	01800e44 	movi	r6,57
 800a6b4:	d9c00717 	ldw	r7,28(sp)
 800a6b8:	00000506 	br	800a6d0 <_dtoa_r+0xc00>
 800a6bc:	18ffffc4 	addi	r3,r3,-1
 800a6c0:	11c12326 	beq	r2,r7,800ab50 <_dtoa_r+0x1080>
 800a6c4:	19000003 	ldbu	r4,0(r3)
 800a6c8:	102f883a 	mov	r23,r2
 800a6cc:	10bfffc4 	addi	r2,r2,-1
 800a6d0:	21403fcc 	andi	r5,r4,255
 800a6d4:	2940201c 	xori	r5,r5,128
 800a6d8:	297fe004 	addi	r5,r5,-128
 800a6dc:	29bff726 	beq	r5,r6,800a6bc <__alt_data_end+0xfc00a6bc>
 800a6e0:	21000044 	addi	r4,r4,1
 800a6e4:	11000005 	stb	r4,0(r2)
 800a6e8:	a80b883a 	mov	r5,r21
 800a6ec:	e009883a 	mov	r4,fp
 800a6f0:	800d2140 	call	800d214 <_Bfree>
 800a6f4:	883ea026 	beq	r17,zero,800a178 <__alt_data_end+0xfc00a178>
 800a6f8:	90000426 	beq	r18,zero,800a70c <_dtoa_r+0xc3c>
 800a6fc:	94400326 	beq	r18,r17,800a70c <_dtoa_r+0xc3c>
 800a700:	900b883a 	mov	r5,r18
 800a704:	e009883a 	mov	r4,fp
 800a708:	800d2140 	call	800d214 <_Bfree>
 800a70c:	880b883a 	mov	r5,r17
 800a710:	e009883a 	mov	r4,fp
 800a714:	800d2140 	call	800d214 <_Bfree>
 800a718:	003e9706 	br	800a178 <__alt_data_end+0xfc00a178>
 800a71c:	01800044 	movi	r6,1
 800a720:	d9800e15 	stw	r6,56(sp)
 800a724:	003d9606 	br	8009d80 <__alt_data_end+0xfc009d80>
 800a728:	d8800817 	ldw	r2,32(sp)
 800a72c:	d8c00517 	ldw	r3,20(sp)
 800a730:	d8000d15 	stw	zero,52(sp)
 800a734:	10c5c83a 	sub	r2,r2,r3
 800a738:	00c9c83a 	sub	r4,zero,r3
 800a73c:	d8800815 	stw	r2,32(sp)
 800a740:	d9000a15 	stw	r4,40(sp)
 800a744:	003d9706 	br	8009da4 <__alt_data_end+0xfc009da4>
 800a748:	05adc83a 	sub	r22,zero,r22
 800a74c:	dd800815 	stw	r22,32(sp)
 800a750:	002d883a 	mov	r22,zero
 800a754:	003d8e06 	br	8009d90 <__alt_data_end+0xfc009d90>
 800a758:	d9000517 	ldw	r4,20(sp)
 800a75c:	8006ecc0 	call	8006ecc <__floatsidf>
 800a760:	100d883a 	mov	r6,r2
 800a764:	180f883a 	mov	r7,r3
 800a768:	a009883a 	mov	r4,r20
 800a76c:	880b883a 	mov	r5,r17
 800a770:	8005be00 	call	8005be0 <__eqdf2>
 800a774:	103d7126 	beq	r2,zero,8009d3c <__alt_data_end+0xfc009d3c>
 800a778:	d9c00517 	ldw	r7,20(sp)
 800a77c:	39ffffc4 	addi	r7,r7,-1
 800a780:	d9c00515 	stw	r7,20(sp)
 800a784:	003d6d06 	br	8009d3c <__alt_data_end+0xfc009d3c>
 800a788:	dd400a17 	ldw	r21,40(sp)
 800a78c:	dd000817 	ldw	r20,32(sp)
 800a790:	0023883a 	mov	r17,zero
 800a794:	003f4806 	br	800a4b8 <__alt_data_end+0xfc00a4b8>
 800a798:	10e3c83a 	sub	r17,r2,r3
 800a79c:	9448983a 	sll	r4,r18,r17
 800a7a0:	003d3206 	br	8009c6c <__alt_data_end+0xfc009c6c>
 800a7a4:	d8000e15 	stw	zero,56(sp)
 800a7a8:	003d7506 	br	8009d80 <__alt_data_end+0xfc009d80>
 800a7ac:	b005883a 	mov	r2,r22
 800a7b0:	003f4506 	br	800a4c8 <__alt_data_end+0xfc00a4c8>
 800a7b4:	dc000915 	stw	r16,36(sp)
 800a7b8:	d9800a17 	ldw	r6,40(sp)
 800a7bc:	d9400917 	ldw	r5,36(sp)
 800a7c0:	e009883a 	mov	r4,fp
 800a7c4:	800d7ac0 	call	800d7ac <__pow5mult>
 800a7c8:	1021883a 	mov	r16,r2
 800a7cc:	003f5a06 	br	800a538 <__alt_data_end+0xfc00a538>
 800a7d0:	01c00044 	movi	r7,1
 800a7d4:	d9c00b15 	stw	r7,44(sp)
 800a7d8:	d8802217 	ldw	r2,136(sp)
 800a7dc:	0081280e 	bge	zero,r2,800ac80 <_dtoa_r+0x11b0>
 800a7e0:	100d883a 	mov	r6,r2
 800a7e4:	1021883a 	mov	r16,r2
 800a7e8:	d8800c15 	stw	r2,48(sp)
 800a7ec:	d8800615 	stw	r2,24(sp)
 800a7f0:	003d8806 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a7f4:	d8800617 	ldw	r2,24(sp)
 800a7f8:	00be9b16 	blt	zero,r2,800a268 <__alt_data_end+0xfc00a268>
 800a7fc:	10010f1e 	bne	r2,zero,800ac3c <_dtoa_r+0x116c>
 800a800:	880b883a 	mov	r5,r17
 800a804:	000d883a 	mov	r6,zero
 800a808:	01d00534 	movhi	r7,16404
 800a80c:	8009883a 	mov	r4,r16
 800a810:	8005e380 	call	8005e38 <__muldf3>
 800a814:	900d883a 	mov	r6,r18
 800a818:	980f883a 	mov	r7,r19
 800a81c:	1009883a 	mov	r4,r2
 800a820:	180b883a 	mov	r5,r3
 800a824:	8005c680 	call	8005c68 <__gedf2>
 800a828:	002b883a 	mov	r21,zero
 800a82c:	0023883a 	mov	r17,zero
 800a830:	1000bf16 	blt	r2,zero,800ab30 <_dtoa_r+0x1060>
 800a834:	d9802217 	ldw	r6,136(sp)
 800a838:	ddc00717 	ldw	r23,28(sp)
 800a83c:	018c303a 	nor	r6,zero,r6
 800a840:	d9800515 	stw	r6,20(sp)
 800a844:	a80b883a 	mov	r5,r21
 800a848:	e009883a 	mov	r4,fp
 800a84c:	800d2140 	call	800d214 <_Bfree>
 800a850:	883e4926 	beq	r17,zero,800a178 <__alt_data_end+0xfc00a178>
 800a854:	003fad06 	br	800a70c <__alt_data_end+0xfc00a70c>
 800a858:	d9c01117 	ldw	r7,68(sp)
 800a85c:	3801bc26 	beq	r7,zero,800af50 <_dtoa_r+0x1480>
 800a860:	10810cc4 	addi	r2,r2,1075
 800a864:	dd400a17 	ldw	r21,40(sp)
 800a868:	dd000817 	ldw	r20,32(sp)
 800a86c:	003f0a06 	br	800a498 <__alt_data_end+0xfc00a498>
 800a870:	00800704 	movi	r2,28
 800a874:	d9000817 	ldw	r4,32(sp)
 800a878:	a0a9883a 	add	r20,r20,r2
 800a87c:	b0ad883a 	add	r22,r22,r2
 800a880:	2089883a 	add	r4,r4,r2
 800a884:	d9000815 	stw	r4,32(sp)
 800a888:	003f5106 	br	800a5d0 <__alt_data_end+0xfc00a5d0>
 800a88c:	d8c00317 	ldw	r3,12(sp)
 800a890:	b8c1fc0e 	bge	r23,r3,800b084 <_dtoa_r+0x15b4>
 800a894:	0027883a 	mov	r19,zero
 800a898:	b805883a 	mov	r2,r23
 800a89c:	003f3e06 	br	800a598 <__alt_data_end+0xfc00a598>
 800a8a0:	880b883a 	mov	r5,r17
 800a8a4:	e009883a 	mov	r4,fp
 800a8a8:	000f883a 	mov	r7,zero
 800a8ac:	01800284 	movi	r6,10
 800a8b0:	800d23c0 	call	800d23c <__multadd>
 800a8b4:	d9000c17 	ldw	r4,48(sp)
 800a8b8:	1023883a 	mov	r17,r2
 800a8bc:	0102040e 	bge	zero,r4,800b0d0 <_dtoa_r+0x1600>
 800a8c0:	d9000615 	stw	r4,24(sp)
 800a8c4:	0500050e 	bge	zero,r20,800a8dc <_dtoa_r+0xe0c>
 800a8c8:	880b883a 	mov	r5,r17
 800a8cc:	a00d883a 	mov	r6,r20
 800a8d0:	e009883a 	mov	r4,fp
 800a8d4:	800d8ec0 	call	800d8ec <__lshift>
 800a8d8:	1023883a 	mov	r17,r2
 800a8dc:	9801241e 	bne	r19,zero,800ad70 <_dtoa_r+0x12a0>
 800a8e0:	8829883a 	mov	r20,r17
 800a8e4:	d9000617 	ldw	r4,24(sp)
 800a8e8:	dcc00717 	ldw	r19,28(sp)
 800a8ec:	9480004c 	andi	r18,r18,1
 800a8f0:	20bfffc4 	addi	r2,r4,-1
 800a8f4:	9885883a 	add	r2,r19,r2
 800a8f8:	d8800415 	stw	r2,16(sp)
 800a8fc:	dc800615 	stw	r18,24(sp)
 800a900:	a80b883a 	mov	r5,r21
 800a904:	8009883a 	mov	r4,r16
 800a908:	80098d00 	call	80098d0 <quorem>
 800a90c:	880b883a 	mov	r5,r17
 800a910:	8009883a 	mov	r4,r16
 800a914:	102f883a 	mov	r23,r2
 800a918:	800da340 	call	800da34 <__mcmp>
 800a91c:	a80b883a 	mov	r5,r21
 800a920:	a00d883a 	mov	r6,r20
 800a924:	e009883a 	mov	r4,fp
 800a928:	102d883a 	mov	r22,r2
 800a92c:	800da940 	call	800da94 <__mdiff>
 800a930:	1007883a 	mov	r3,r2
 800a934:	10800317 	ldw	r2,12(r2)
 800a938:	bc800c04 	addi	r18,r23,48
 800a93c:	180b883a 	mov	r5,r3
 800a940:	10004e1e 	bne	r2,zero,800aa7c <_dtoa_r+0xfac>
 800a944:	8009883a 	mov	r4,r16
 800a948:	d8c01615 	stw	r3,88(sp)
 800a94c:	800da340 	call	800da34 <__mcmp>
 800a950:	d8c01617 	ldw	r3,88(sp)
 800a954:	e009883a 	mov	r4,fp
 800a958:	d8801615 	stw	r2,88(sp)
 800a95c:	180b883a 	mov	r5,r3
 800a960:	800d2140 	call	800d214 <_Bfree>
 800a964:	d8801617 	ldw	r2,88(sp)
 800a968:	1000041e 	bne	r2,zero,800a97c <_dtoa_r+0xeac>
 800a96c:	d9800317 	ldw	r6,12(sp)
 800a970:	3000021e 	bne	r6,zero,800a97c <_dtoa_r+0xeac>
 800a974:	d8c00617 	ldw	r3,24(sp)
 800a978:	18003726 	beq	r3,zero,800aa58 <_dtoa_r+0xf88>
 800a97c:	b0002016 	blt	r22,zero,800aa00 <_dtoa_r+0xf30>
 800a980:	b000041e 	bne	r22,zero,800a994 <_dtoa_r+0xec4>
 800a984:	d9000317 	ldw	r4,12(sp)
 800a988:	2000021e 	bne	r4,zero,800a994 <_dtoa_r+0xec4>
 800a98c:	d8c00617 	ldw	r3,24(sp)
 800a990:	18001b26 	beq	r3,zero,800aa00 <_dtoa_r+0xf30>
 800a994:	00810716 	blt	zero,r2,800adb4 <_dtoa_r+0x12e4>
 800a998:	d8c00417 	ldw	r3,16(sp)
 800a99c:	9d800044 	addi	r22,r19,1
 800a9a0:	9c800005 	stb	r18,0(r19)
 800a9a4:	b02f883a 	mov	r23,r22
 800a9a8:	98c10626 	beq	r19,r3,800adc4 <_dtoa_r+0x12f4>
 800a9ac:	800b883a 	mov	r5,r16
 800a9b0:	000f883a 	mov	r7,zero
 800a9b4:	01800284 	movi	r6,10
 800a9b8:	e009883a 	mov	r4,fp
 800a9bc:	800d23c0 	call	800d23c <__multadd>
 800a9c0:	1021883a 	mov	r16,r2
 800a9c4:	000f883a 	mov	r7,zero
 800a9c8:	01800284 	movi	r6,10
 800a9cc:	880b883a 	mov	r5,r17
 800a9d0:	e009883a 	mov	r4,fp
 800a9d4:	8d002526 	beq	r17,r20,800aa6c <_dtoa_r+0xf9c>
 800a9d8:	800d23c0 	call	800d23c <__multadd>
 800a9dc:	a00b883a 	mov	r5,r20
 800a9e0:	000f883a 	mov	r7,zero
 800a9e4:	01800284 	movi	r6,10
 800a9e8:	e009883a 	mov	r4,fp
 800a9ec:	1023883a 	mov	r17,r2
 800a9f0:	800d23c0 	call	800d23c <__multadd>
 800a9f4:	1029883a 	mov	r20,r2
 800a9f8:	b027883a 	mov	r19,r22
 800a9fc:	003fc006 	br	800a900 <__alt_data_end+0xfc00a900>
 800aa00:	9011883a 	mov	r8,r18
 800aa04:	00800e0e 	bge	zero,r2,800aa40 <_dtoa_r+0xf70>
 800aa08:	800b883a 	mov	r5,r16
 800aa0c:	01800044 	movi	r6,1
 800aa10:	e009883a 	mov	r4,fp
 800aa14:	da001715 	stw	r8,92(sp)
 800aa18:	800d8ec0 	call	800d8ec <__lshift>
 800aa1c:	a80b883a 	mov	r5,r21
 800aa20:	1009883a 	mov	r4,r2
 800aa24:	1021883a 	mov	r16,r2
 800aa28:	800da340 	call	800da34 <__mcmp>
 800aa2c:	da001717 	ldw	r8,92(sp)
 800aa30:	0081960e 	bge	zero,r2,800b08c <_dtoa_r+0x15bc>
 800aa34:	00800e44 	movi	r2,57
 800aa38:	40817026 	beq	r8,r2,800affc <_dtoa_r+0x152c>
 800aa3c:	ba000c44 	addi	r8,r23,49
 800aa40:	8825883a 	mov	r18,r17
 800aa44:	9dc00044 	addi	r23,r19,1
 800aa48:	9a000005 	stb	r8,0(r19)
 800aa4c:	a023883a 	mov	r17,r20
 800aa50:	dc000915 	stw	r16,36(sp)
 800aa54:	003f2406 	br	800a6e8 <__alt_data_end+0xfc00a6e8>
 800aa58:	00800e44 	movi	r2,57
 800aa5c:	9011883a 	mov	r8,r18
 800aa60:	90816626 	beq	r18,r2,800affc <_dtoa_r+0x152c>
 800aa64:	05bff516 	blt	zero,r22,800aa3c <__alt_data_end+0xfc00aa3c>
 800aa68:	003ff506 	br	800aa40 <__alt_data_end+0xfc00aa40>
 800aa6c:	800d23c0 	call	800d23c <__multadd>
 800aa70:	1023883a 	mov	r17,r2
 800aa74:	1029883a 	mov	r20,r2
 800aa78:	003fdf06 	br	800a9f8 <__alt_data_end+0xfc00a9f8>
 800aa7c:	e009883a 	mov	r4,fp
 800aa80:	800d2140 	call	800d214 <_Bfree>
 800aa84:	00800044 	movi	r2,1
 800aa88:	003fbc06 	br	800a97c <__alt_data_end+0xfc00a97c>
 800aa8c:	a80b883a 	mov	r5,r21
 800aa90:	8009883a 	mov	r4,r16
 800aa94:	800da340 	call	800da34 <__mcmp>
 800aa98:	103edb0e 	bge	r2,zero,800a608 <__alt_data_end+0xfc00a608>
 800aa9c:	800b883a 	mov	r5,r16
 800aaa0:	000f883a 	mov	r7,zero
 800aaa4:	01800284 	movi	r6,10
 800aaa8:	e009883a 	mov	r4,fp
 800aaac:	800d23c0 	call	800d23c <__multadd>
 800aab0:	1021883a 	mov	r16,r2
 800aab4:	d8800517 	ldw	r2,20(sp)
 800aab8:	d8c00b17 	ldw	r3,44(sp)
 800aabc:	10bfffc4 	addi	r2,r2,-1
 800aac0:	d8800515 	stw	r2,20(sp)
 800aac4:	183f761e 	bne	r3,zero,800a8a0 <__alt_data_end+0xfc00a8a0>
 800aac8:	d9000c17 	ldw	r4,48(sp)
 800aacc:	0101730e 	bge	zero,r4,800b09c <_dtoa_r+0x15cc>
 800aad0:	d9000615 	stw	r4,24(sp)
 800aad4:	003ed006 	br	800a618 <__alt_data_end+0xfc00a618>
 800aad8:	00800084 	movi	r2,2
 800aadc:	3081861e 	bne	r6,r2,800b0f8 <_dtoa_r+0x1628>
 800aae0:	d8000b15 	stw	zero,44(sp)
 800aae4:	003f3c06 	br	800a7d8 <__alt_data_end+0xfc00a7d8>
 800aae8:	dc000917 	ldw	r16,36(sp)
 800aaec:	003e9206 	br	800a538 <__alt_data_end+0xfc00a538>
 800aaf0:	d9c00317 	ldw	r7,12(sp)
 800aaf4:	00800084 	movi	r2,2
 800aaf8:	11fec50e 	bge	r2,r7,800a610 <__alt_data_end+0xfc00a610>
 800aafc:	d9000617 	ldw	r4,24(sp)
 800ab00:	20013c1e 	bne	r4,zero,800aff4 <_dtoa_r+0x1524>
 800ab04:	a80b883a 	mov	r5,r21
 800ab08:	000f883a 	mov	r7,zero
 800ab0c:	01800144 	movi	r6,5
 800ab10:	e009883a 	mov	r4,fp
 800ab14:	800d23c0 	call	800d23c <__multadd>
 800ab18:	100b883a 	mov	r5,r2
 800ab1c:	8009883a 	mov	r4,r16
 800ab20:	102b883a 	mov	r21,r2
 800ab24:	800da340 	call	800da34 <__mcmp>
 800ab28:	dc000915 	stw	r16,36(sp)
 800ab2c:	00bf410e 	bge	zero,r2,800a834 <__alt_data_end+0xfc00a834>
 800ab30:	d9c00717 	ldw	r7,28(sp)
 800ab34:	00800c44 	movi	r2,49
 800ab38:	38800005 	stb	r2,0(r7)
 800ab3c:	d8800517 	ldw	r2,20(sp)
 800ab40:	3dc00044 	addi	r23,r7,1
 800ab44:	10800044 	addi	r2,r2,1
 800ab48:	d8800515 	stw	r2,20(sp)
 800ab4c:	003f3d06 	br	800a844 <__alt_data_end+0xfc00a844>
 800ab50:	d9800517 	ldw	r6,20(sp)
 800ab54:	d9c00717 	ldw	r7,28(sp)
 800ab58:	00800c44 	movi	r2,49
 800ab5c:	31800044 	addi	r6,r6,1
 800ab60:	d9800515 	stw	r6,20(sp)
 800ab64:	38800005 	stb	r2,0(r7)
 800ab68:	003edf06 	br	800a6e8 <__alt_data_end+0xfc00a6e8>
 800ab6c:	d8000b15 	stw	zero,44(sp)
 800ab70:	003c9f06 	br	8009df0 <__alt_data_end+0xfc009df0>
 800ab74:	903e7e1e 	bne	r18,zero,800a570 <__alt_data_end+0xfc00a570>
 800ab78:	00800434 	movhi	r2,16
 800ab7c:	10bfffc4 	addi	r2,r2,-1
 800ab80:	9884703a 	and	r2,r19,r2
 800ab84:	1000ea1e 	bne	r2,zero,800af30 <_dtoa_r+0x1460>
 800ab88:	9cdffc2c 	andhi	r19,r19,32752
 800ab8c:	9800e826 	beq	r19,zero,800af30 <_dtoa_r+0x1460>
 800ab90:	d9c00817 	ldw	r7,32(sp)
 800ab94:	b5800044 	addi	r22,r22,1
 800ab98:	04c00044 	movi	r19,1
 800ab9c:	39c00044 	addi	r7,r7,1
 800aba0:	d9c00815 	stw	r7,32(sp)
 800aba4:	d8800d17 	ldw	r2,52(sp)
 800aba8:	103e721e 	bne	r2,zero,800a574 <__alt_data_end+0xfc00a574>
 800abac:	00800044 	movi	r2,1
 800abb0:	003e7906 	br	800a598 <__alt_data_end+0xfc00a598>
 800abb4:	8009883a 	mov	r4,r16
 800abb8:	8006ecc0 	call	8006ecc <__floatsidf>
 800abbc:	d9800f17 	ldw	r6,60(sp)
 800abc0:	d9c01017 	ldw	r7,64(sp)
 800abc4:	1009883a 	mov	r4,r2
 800abc8:	180b883a 	mov	r5,r3
 800abcc:	8005e380 	call	8005e38 <__muldf3>
 800abd0:	000d883a 	mov	r6,zero
 800abd4:	01d00734 	movhi	r7,16412
 800abd8:	1009883a 	mov	r4,r2
 800abdc:	180b883a 	mov	r5,r3
 800abe0:	8004a4c0 	call	8004a4c <__adddf3>
 800abe4:	047f3034 	movhi	r17,64704
 800abe8:	1021883a 	mov	r16,r2
 800abec:	1c63883a 	add	r17,r3,r17
 800abf0:	d9000f17 	ldw	r4,60(sp)
 800abf4:	d9401017 	ldw	r5,64(sp)
 800abf8:	000d883a 	mov	r6,zero
 800abfc:	01d00534 	movhi	r7,16404
 800ac00:	80065500 	call	8006550 <__subdf3>
 800ac04:	800d883a 	mov	r6,r16
 800ac08:	880f883a 	mov	r7,r17
 800ac0c:	1009883a 	mov	r4,r2
 800ac10:	180b883a 	mov	r5,r3
 800ac14:	102b883a 	mov	r21,r2
 800ac18:	1829883a 	mov	r20,r3
 800ac1c:	8005c680 	call	8005c68 <__gedf2>
 800ac20:	00806c16 	blt	zero,r2,800add4 <_dtoa_r+0x1304>
 800ac24:	89e0003c 	xorhi	r7,r17,32768
 800ac28:	800d883a 	mov	r6,r16
 800ac2c:	a809883a 	mov	r4,r21
 800ac30:	a00b883a 	mov	r5,r20
 800ac34:	8005d440 	call	8005d44 <__ledf2>
 800ac38:	103d7e0e 	bge	r2,zero,800a234 <__alt_data_end+0xfc00a234>
 800ac3c:	002b883a 	mov	r21,zero
 800ac40:	0023883a 	mov	r17,zero
 800ac44:	003efb06 	br	800a834 <__alt_data_end+0xfc00a834>
 800ac48:	d8800717 	ldw	r2,28(sp)
 800ac4c:	003bd006 	br	8009b90 <__alt_data_end+0xfc009b90>
 800ac50:	d9000a17 	ldw	r4,40(sp)
 800ac54:	d9800d17 	ldw	r6,52(sp)
 800ac58:	dd400a15 	stw	r21,40(sp)
 800ac5c:	a905c83a 	sub	r2,r21,r4
 800ac60:	308d883a 	add	r6,r6,r2
 800ac64:	d9800d15 	stw	r6,52(sp)
 800ac68:	002b883a 	mov	r21,zero
 800ac6c:	003e0606 	br	800a488 <__alt_data_end+0xfc00a488>
 800ac70:	9023883a 	mov	r17,r18
 800ac74:	9829883a 	mov	r20,r19
 800ac78:	04000084 	movi	r16,2
 800ac7c:	003c9206 	br	8009ec8 <__alt_data_end+0xfc009ec8>
 800ac80:	04000044 	movi	r16,1
 800ac84:	dc000c15 	stw	r16,48(sp)
 800ac88:	dc000615 	stw	r16,24(sp)
 800ac8c:	dc002215 	stw	r16,136(sp)
 800ac90:	e0001115 	stw	zero,68(fp)
 800ac94:	000b883a 	mov	r5,zero
 800ac98:	003c6906 	br	8009e40 <__alt_data_end+0xfc009e40>
 800ac9c:	3021883a 	mov	r16,r6
 800aca0:	003ffb06 	br	800ac90 <__alt_data_end+0xfc00ac90>
 800aca4:	1000021e 	bne	r2,zero,800acb0 <_dtoa_r+0x11e0>
 800aca8:	4200004c 	andi	r8,r8,1
 800acac:	403e7d1e 	bne	r8,zero,800a6a4 <__alt_data_end+0xfc00a6a4>
 800acb0:	01000c04 	movi	r4,48
 800acb4:	00000106 	br	800acbc <_dtoa_r+0x11ec>
 800acb8:	102f883a 	mov	r23,r2
 800acbc:	b8bfffc4 	addi	r2,r23,-1
 800acc0:	10c00007 	ldb	r3,0(r2)
 800acc4:	193ffc26 	beq	r3,r4,800acb8 <__alt_data_end+0xfc00acb8>
 800acc8:	003e8706 	br	800a6e8 <__alt_data_end+0xfc00a6e8>
 800accc:	d8800517 	ldw	r2,20(sp)
 800acd0:	00a3c83a 	sub	r17,zero,r2
 800acd4:	8800a426 	beq	r17,zero,800af68 <_dtoa_r+0x1498>
 800acd8:	888003cc 	andi	r2,r17,15
 800acdc:	100490fa 	slli	r2,r2,3
 800ace0:	00c20074 	movhi	r3,2049
 800ace4:	18d75b04 	addi	r3,r3,23916
 800ace8:	1885883a 	add	r2,r3,r2
 800acec:	11800017 	ldw	r6,0(r2)
 800acf0:	11c00117 	ldw	r7,4(r2)
 800acf4:	9009883a 	mov	r4,r18
 800acf8:	980b883a 	mov	r5,r19
 800acfc:	8823d13a 	srai	r17,r17,4
 800ad00:	8005e380 	call	8005e38 <__muldf3>
 800ad04:	d8800f15 	stw	r2,60(sp)
 800ad08:	d8c01015 	stw	r3,64(sp)
 800ad0c:	8800e826 	beq	r17,zero,800b0b0 <_dtoa_r+0x15e0>
 800ad10:	05020074 	movhi	r20,2049
 800ad14:	a5175104 	addi	r20,r20,23876
 800ad18:	04000084 	movi	r16,2
 800ad1c:	8980004c 	andi	r6,r17,1
 800ad20:	1009883a 	mov	r4,r2
 800ad24:	8823d07a 	srai	r17,r17,1
 800ad28:	180b883a 	mov	r5,r3
 800ad2c:	30000426 	beq	r6,zero,800ad40 <_dtoa_r+0x1270>
 800ad30:	a1800017 	ldw	r6,0(r20)
 800ad34:	a1c00117 	ldw	r7,4(r20)
 800ad38:	84000044 	addi	r16,r16,1
 800ad3c:	8005e380 	call	8005e38 <__muldf3>
 800ad40:	a5000204 	addi	r20,r20,8
 800ad44:	883ff51e 	bne	r17,zero,800ad1c <__alt_data_end+0xfc00ad1c>
 800ad48:	d8800f15 	stw	r2,60(sp)
 800ad4c:	d8c01015 	stw	r3,64(sp)
 800ad50:	003c7606 	br	8009f2c <__alt_data_end+0xfc009f2c>
 800ad54:	00c00c04 	movi	r3,48
 800ad58:	10c00005 	stb	r3,0(r2)
 800ad5c:	d8c00517 	ldw	r3,20(sp)
 800ad60:	bd3fffc3 	ldbu	r20,-1(r23)
 800ad64:	18c00044 	addi	r3,r3,1
 800ad68:	d8c00515 	stw	r3,20(sp)
 800ad6c:	003db906 	br	800a454 <__alt_data_end+0xfc00a454>
 800ad70:	89400117 	ldw	r5,4(r17)
 800ad74:	e009883a 	mov	r4,fp
 800ad78:	800d16c0 	call	800d16c <_Balloc>
 800ad7c:	89800417 	ldw	r6,16(r17)
 800ad80:	89400304 	addi	r5,r17,12
 800ad84:	11000304 	addi	r4,r2,12
 800ad88:	31800084 	addi	r6,r6,2
 800ad8c:	318d883a 	add	r6,r6,r6
 800ad90:	318d883a 	add	r6,r6,r6
 800ad94:	1027883a 	mov	r19,r2
 800ad98:	800cda00 	call	800cda0 <memcpy>
 800ad9c:	01800044 	movi	r6,1
 800ada0:	980b883a 	mov	r5,r19
 800ada4:	e009883a 	mov	r4,fp
 800ada8:	800d8ec0 	call	800d8ec <__lshift>
 800adac:	1029883a 	mov	r20,r2
 800adb0:	003ecc06 	br	800a8e4 <__alt_data_end+0xfc00a8e4>
 800adb4:	00800e44 	movi	r2,57
 800adb8:	90809026 	beq	r18,r2,800affc <_dtoa_r+0x152c>
 800adbc:	92000044 	addi	r8,r18,1
 800adc0:	003f1f06 	br	800aa40 <__alt_data_end+0xfc00aa40>
 800adc4:	9011883a 	mov	r8,r18
 800adc8:	8825883a 	mov	r18,r17
 800adcc:	a023883a 	mov	r17,r20
 800add0:	003e2906 	br	800a678 <__alt_data_end+0xfc00a678>
 800add4:	002b883a 	mov	r21,zero
 800add8:	0023883a 	mov	r17,zero
 800addc:	003f5406 	br	800ab30 <__alt_data_end+0xfc00ab30>
 800ade0:	61bfffc4 	addi	r6,r12,-1
 800ade4:	300490fa 	slli	r2,r6,3
 800ade8:	00c20074 	movhi	r3,2049
 800adec:	18d75b04 	addi	r3,r3,23916
 800adf0:	1885883a 	add	r2,r3,r2
 800adf4:	11000017 	ldw	r4,0(r2)
 800adf8:	11400117 	ldw	r5,4(r2)
 800adfc:	d8800717 	ldw	r2,28(sp)
 800ae00:	880f883a 	mov	r7,r17
 800ae04:	d9801215 	stw	r6,72(sp)
 800ae08:	800d883a 	mov	r6,r16
 800ae0c:	db001615 	stw	r12,88(sp)
 800ae10:	15c00044 	addi	r23,r2,1
 800ae14:	8005e380 	call	8005e38 <__muldf3>
 800ae18:	d9401017 	ldw	r5,64(sp)
 800ae1c:	d9000f17 	ldw	r4,60(sp)
 800ae20:	d8c01515 	stw	r3,84(sp)
 800ae24:	d8801415 	stw	r2,80(sp)
 800ae28:	8006e4c0 	call	8006e4c <__fixdfsi>
 800ae2c:	1009883a 	mov	r4,r2
 800ae30:	1021883a 	mov	r16,r2
 800ae34:	8006ecc0 	call	8006ecc <__floatsidf>
 800ae38:	d9000f17 	ldw	r4,60(sp)
 800ae3c:	d9401017 	ldw	r5,64(sp)
 800ae40:	100d883a 	mov	r6,r2
 800ae44:	180f883a 	mov	r7,r3
 800ae48:	80065500 	call	8006550 <__subdf3>
 800ae4c:	1829883a 	mov	r20,r3
 800ae50:	d8c00717 	ldw	r3,28(sp)
 800ae54:	84000c04 	addi	r16,r16,48
 800ae58:	1023883a 	mov	r17,r2
 800ae5c:	1c000005 	stb	r16,0(r3)
 800ae60:	db001617 	ldw	r12,88(sp)
 800ae64:	00800044 	movi	r2,1
 800ae68:	60802226 	beq	r12,r2,800aef4 <_dtoa_r+0x1424>
 800ae6c:	d9c00717 	ldw	r7,28(sp)
 800ae70:	8805883a 	mov	r2,r17
 800ae74:	b82b883a 	mov	r21,r23
 800ae78:	3b19883a 	add	r12,r7,r12
 800ae7c:	6023883a 	mov	r17,r12
 800ae80:	a007883a 	mov	r3,r20
 800ae84:	dc800f15 	stw	r18,60(sp)
 800ae88:	000d883a 	mov	r6,zero
 800ae8c:	01d00934 	movhi	r7,16420
 800ae90:	1009883a 	mov	r4,r2
 800ae94:	180b883a 	mov	r5,r3
 800ae98:	8005e380 	call	8005e38 <__muldf3>
 800ae9c:	180b883a 	mov	r5,r3
 800aea0:	1009883a 	mov	r4,r2
 800aea4:	1829883a 	mov	r20,r3
 800aea8:	1025883a 	mov	r18,r2
 800aeac:	8006e4c0 	call	8006e4c <__fixdfsi>
 800aeb0:	1009883a 	mov	r4,r2
 800aeb4:	1021883a 	mov	r16,r2
 800aeb8:	8006ecc0 	call	8006ecc <__floatsidf>
 800aebc:	100d883a 	mov	r6,r2
 800aec0:	180f883a 	mov	r7,r3
 800aec4:	9009883a 	mov	r4,r18
 800aec8:	a00b883a 	mov	r5,r20
 800aecc:	84000c04 	addi	r16,r16,48
 800aed0:	80065500 	call	8006550 <__subdf3>
 800aed4:	ad400044 	addi	r21,r21,1
 800aed8:	ac3fffc5 	stb	r16,-1(r21)
 800aedc:	ac7fea1e 	bne	r21,r17,800ae88 <__alt_data_end+0xfc00ae88>
 800aee0:	1023883a 	mov	r17,r2
 800aee4:	d8801217 	ldw	r2,72(sp)
 800aee8:	dc800f17 	ldw	r18,60(sp)
 800aeec:	1829883a 	mov	r20,r3
 800aef0:	b8af883a 	add	r23,r23,r2
 800aef4:	d9001417 	ldw	r4,80(sp)
 800aef8:	d9401517 	ldw	r5,84(sp)
 800aefc:	000d883a 	mov	r6,zero
 800af00:	01cff834 	movhi	r7,16352
 800af04:	8004a4c0 	call	8004a4c <__adddf3>
 800af08:	880d883a 	mov	r6,r17
 800af0c:	a00f883a 	mov	r7,r20
 800af10:	1009883a 	mov	r4,r2
 800af14:	180b883a 	mov	r5,r3
 800af18:	8005d440 	call	8005d44 <__ledf2>
 800af1c:	10003e0e 	bge	r2,zero,800b018 <_dtoa_r+0x1548>
 800af20:	d9001317 	ldw	r4,76(sp)
 800af24:	bd3fffc3 	ldbu	r20,-1(r23)
 800af28:	d9000515 	stw	r4,20(sp)
 800af2c:	003d3b06 	br	800a41c <__alt_data_end+0xfc00a41c>
 800af30:	0027883a 	mov	r19,zero
 800af34:	003f1b06 	br	800aba4 <__alt_data_end+0xfc00aba4>
 800af38:	d8800817 	ldw	r2,32(sp)
 800af3c:	11e9c83a 	sub	r20,r2,r7
 800af40:	0005883a 	mov	r2,zero
 800af44:	003d5406 	br	800a498 <__alt_data_end+0xfc00a498>
 800af48:	00800044 	movi	r2,1
 800af4c:	003dc706 	br	800a66c <__alt_data_end+0xfc00a66c>
 800af50:	d8c00217 	ldw	r3,8(sp)
 800af54:	00800d84 	movi	r2,54
 800af58:	dd400a17 	ldw	r21,40(sp)
 800af5c:	10c5c83a 	sub	r2,r2,r3
 800af60:	dd000817 	ldw	r20,32(sp)
 800af64:	003d4c06 	br	800a498 <__alt_data_end+0xfc00a498>
 800af68:	dc800f15 	stw	r18,60(sp)
 800af6c:	dcc01015 	stw	r19,64(sp)
 800af70:	04000084 	movi	r16,2
 800af74:	003bed06 	br	8009f2c <__alt_data_end+0xfc009f2c>
 800af78:	d9000617 	ldw	r4,24(sp)
 800af7c:	203f0d26 	beq	r4,zero,800abb4 <__alt_data_end+0xfc00abb4>
 800af80:	d9800c17 	ldw	r6,48(sp)
 800af84:	01bcab0e 	bge	zero,r6,800a234 <__alt_data_end+0xfc00a234>
 800af88:	d9401017 	ldw	r5,64(sp)
 800af8c:	d9000f17 	ldw	r4,60(sp)
 800af90:	000d883a 	mov	r6,zero
 800af94:	01d00934 	movhi	r7,16420
 800af98:	8005e380 	call	8005e38 <__muldf3>
 800af9c:	81000044 	addi	r4,r16,1
 800afa0:	d8800f15 	stw	r2,60(sp)
 800afa4:	d8c01015 	stw	r3,64(sp)
 800afa8:	8006ecc0 	call	8006ecc <__floatsidf>
 800afac:	d9800f17 	ldw	r6,60(sp)
 800afb0:	d9c01017 	ldw	r7,64(sp)
 800afb4:	1009883a 	mov	r4,r2
 800afb8:	180b883a 	mov	r5,r3
 800afbc:	8005e380 	call	8005e38 <__muldf3>
 800afc0:	01d00734 	movhi	r7,16412
 800afc4:	000d883a 	mov	r6,zero
 800afc8:	1009883a 	mov	r4,r2
 800afcc:	180b883a 	mov	r5,r3
 800afd0:	8004a4c0 	call	8004a4c <__adddf3>
 800afd4:	d9c00517 	ldw	r7,20(sp)
 800afd8:	047f3034 	movhi	r17,64704
 800afdc:	1021883a 	mov	r16,r2
 800afe0:	39ffffc4 	addi	r7,r7,-1
 800afe4:	d9c01315 	stw	r7,76(sp)
 800afe8:	1c63883a 	add	r17,r3,r17
 800afec:	db000c17 	ldw	r12,48(sp)
 800aff0:	003bea06 	br	8009f9c <__alt_data_end+0xfc009f9c>
 800aff4:	dc000915 	stw	r16,36(sp)
 800aff8:	003e0e06 	br	800a834 <__alt_data_end+0xfc00a834>
 800affc:	01000e44 	movi	r4,57
 800b000:	8825883a 	mov	r18,r17
 800b004:	9dc00044 	addi	r23,r19,1
 800b008:	99000005 	stb	r4,0(r19)
 800b00c:	a023883a 	mov	r17,r20
 800b010:	dc000915 	stw	r16,36(sp)
 800b014:	003da406 	br	800a6a8 <__alt_data_end+0xfc00a6a8>
 800b018:	d9801417 	ldw	r6,80(sp)
 800b01c:	d9c01517 	ldw	r7,84(sp)
 800b020:	0009883a 	mov	r4,zero
 800b024:	014ff834 	movhi	r5,16352
 800b028:	80065500 	call	8006550 <__subdf3>
 800b02c:	880d883a 	mov	r6,r17
 800b030:	a00f883a 	mov	r7,r20
 800b034:	1009883a 	mov	r4,r2
 800b038:	180b883a 	mov	r5,r3
 800b03c:	8005c680 	call	8005c68 <__gedf2>
 800b040:	00bc7c0e 	bge	zero,r2,800a234 <__alt_data_end+0xfc00a234>
 800b044:	01000c04 	movi	r4,48
 800b048:	00000106 	br	800b050 <_dtoa_r+0x1580>
 800b04c:	102f883a 	mov	r23,r2
 800b050:	b8bfffc4 	addi	r2,r23,-1
 800b054:	10c00007 	ldb	r3,0(r2)
 800b058:	193ffc26 	beq	r3,r4,800b04c <__alt_data_end+0xfc00b04c>
 800b05c:	d9801317 	ldw	r6,76(sp)
 800b060:	d9800515 	stw	r6,20(sp)
 800b064:	003c4406 	br	800a178 <__alt_data_end+0xfc00a178>
 800b068:	d9801317 	ldw	r6,76(sp)
 800b06c:	d9800515 	stw	r6,20(sp)
 800b070:	003cea06 	br	800a41c <__alt_data_end+0xfc00a41c>
 800b074:	dd800f17 	ldw	r22,60(sp)
 800b078:	dcc01017 	ldw	r19,64(sp)
 800b07c:	dc801217 	ldw	r18,72(sp)
 800b080:	003c6c06 	br	800a234 <__alt_data_end+0xfc00a234>
 800b084:	903e031e 	bne	r18,zero,800a894 <__alt_data_end+0xfc00a894>
 800b088:	003ebb06 	br	800ab78 <__alt_data_end+0xfc00ab78>
 800b08c:	103e6c1e 	bne	r2,zero,800aa40 <__alt_data_end+0xfc00aa40>
 800b090:	4080004c 	andi	r2,r8,1
 800b094:	103e6a26 	beq	r2,zero,800aa40 <__alt_data_end+0xfc00aa40>
 800b098:	003e6606 	br	800aa34 <__alt_data_end+0xfc00aa34>
 800b09c:	d8c00317 	ldw	r3,12(sp)
 800b0a0:	00800084 	movi	r2,2
 800b0a4:	10c02916 	blt	r2,r3,800b14c <_dtoa_r+0x167c>
 800b0a8:	d9000c17 	ldw	r4,48(sp)
 800b0ac:	003e8806 	br	800aad0 <__alt_data_end+0xfc00aad0>
 800b0b0:	04000084 	movi	r16,2
 800b0b4:	003b9d06 	br	8009f2c <__alt_data_end+0xfc009f2c>
 800b0b8:	d9001317 	ldw	r4,76(sp)
 800b0bc:	d9000515 	stw	r4,20(sp)
 800b0c0:	003cd606 	br	800a41c <__alt_data_end+0xfc00a41c>
 800b0c4:	d8801317 	ldw	r2,76(sp)
 800b0c8:	d8800515 	stw	r2,20(sp)
 800b0cc:	003c2a06 	br	800a178 <__alt_data_end+0xfc00a178>
 800b0d0:	d9800317 	ldw	r6,12(sp)
 800b0d4:	00800084 	movi	r2,2
 800b0d8:	11801516 	blt	r2,r6,800b130 <_dtoa_r+0x1660>
 800b0dc:	d9c00c17 	ldw	r7,48(sp)
 800b0e0:	d9c00615 	stw	r7,24(sp)
 800b0e4:	003df706 	br	800a8c4 <__alt_data_end+0xfc00a8c4>
 800b0e8:	193d3926 	beq	r3,r4,800a5d0 <__alt_data_end+0xfc00a5d0>
 800b0ec:	00c00f04 	movi	r3,60
 800b0f0:	1885c83a 	sub	r2,r3,r2
 800b0f4:	003ddf06 	br	800a874 <__alt_data_end+0xfc00a874>
 800b0f8:	e009883a 	mov	r4,fp
 800b0fc:	e0001115 	stw	zero,68(fp)
 800b100:	000b883a 	mov	r5,zero
 800b104:	800d16c0 	call	800d16c <_Balloc>
 800b108:	d8800715 	stw	r2,28(sp)
 800b10c:	d8c00717 	ldw	r3,28(sp)
 800b110:	00bfffc4 	movi	r2,-1
 800b114:	01000044 	movi	r4,1
 800b118:	d8800c15 	stw	r2,48(sp)
 800b11c:	e0c01015 	stw	r3,64(fp)
 800b120:	d9000b15 	stw	r4,44(sp)
 800b124:	d8800615 	stw	r2,24(sp)
 800b128:	d8002215 	stw	zero,136(sp)
 800b12c:	003c4106 	br	800a234 <__alt_data_end+0xfc00a234>
 800b130:	d8c00c17 	ldw	r3,48(sp)
 800b134:	d8c00615 	stw	r3,24(sp)
 800b138:	003e7006 	br	800aafc <__alt_data_end+0xfc00aafc>
 800b13c:	04400044 	movi	r17,1
 800b140:	003b2006 	br	8009dc4 <__alt_data_end+0xfc009dc4>
 800b144:	000b883a 	mov	r5,zero
 800b148:	003b3d06 	br	8009e40 <__alt_data_end+0xfc009e40>
 800b14c:	d8800c17 	ldw	r2,48(sp)
 800b150:	d8800615 	stw	r2,24(sp)
 800b154:	003e6906 	br	800aafc <__alt_data_end+0xfc00aafc>

0800b158 <__sflush_r>:
 800b158:	2880030b 	ldhu	r2,12(r5)
 800b15c:	defffb04 	addi	sp,sp,-20
 800b160:	dcc00315 	stw	r19,12(sp)
 800b164:	dc400115 	stw	r17,4(sp)
 800b168:	dfc00415 	stw	ra,16(sp)
 800b16c:	dc800215 	stw	r18,8(sp)
 800b170:	dc000015 	stw	r16,0(sp)
 800b174:	10c0020c 	andi	r3,r2,8
 800b178:	2823883a 	mov	r17,r5
 800b17c:	2027883a 	mov	r19,r4
 800b180:	1800311e 	bne	r3,zero,800b248 <__sflush_r+0xf0>
 800b184:	28c00117 	ldw	r3,4(r5)
 800b188:	10820014 	ori	r2,r2,2048
 800b18c:	2880030d 	sth	r2,12(r5)
 800b190:	00c04b0e 	bge	zero,r3,800b2c0 <__sflush_r+0x168>
 800b194:	8a000a17 	ldw	r8,40(r17)
 800b198:	40002326 	beq	r8,zero,800b228 <__sflush_r+0xd0>
 800b19c:	9c000017 	ldw	r16,0(r19)
 800b1a0:	10c4000c 	andi	r3,r2,4096
 800b1a4:	98000015 	stw	zero,0(r19)
 800b1a8:	18004826 	beq	r3,zero,800b2cc <__sflush_r+0x174>
 800b1ac:	89801417 	ldw	r6,80(r17)
 800b1b0:	10c0010c 	andi	r3,r2,4
 800b1b4:	18000626 	beq	r3,zero,800b1d0 <__sflush_r+0x78>
 800b1b8:	88c00117 	ldw	r3,4(r17)
 800b1bc:	88800c17 	ldw	r2,48(r17)
 800b1c0:	30cdc83a 	sub	r6,r6,r3
 800b1c4:	10000226 	beq	r2,zero,800b1d0 <__sflush_r+0x78>
 800b1c8:	88800f17 	ldw	r2,60(r17)
 800b1cc:	308dc83a 	sub	r6,r6,r2
 800b1d0:	89400717 	ldw	r5,28(r17)
 800b1d4:	000f883a 	mov	r7,zero
 800b1d8:	9809883a 	mov	r4,r19
 800b1dc:	403ee83a 	callr	r8
 800b1e0:	00ffffc4 	movi	r3,-1
 800b1e4:	10c04426 	beq	r2,r3,800b2f8 <__sflush_r+0x1a0>
 800b1e8:	88c0030b 	ldhu	r3,12(r17)
 800b1ec:	89000417 	ldw	r4,16(r17)
 800b1f0:	88000115 	stw	zero,4(r17)
 800b1f4:	197dffcc 	andi	r5,r3,63487
 800b1f8:	8940030d 	sth	r5,12(r17)
 800b1fc:	89000015 	stw	r4,0(r17)
 800b200:	18c4000c 	andi	r3,r3,4096
 800b204:	18002c1e 	bne	r3,zero,800b2b8 <__sflush_r+0x160>
 800b208:	89400c17 	ldw	r5,48(r17)
 800b20c:	9c000015 	stw	r16,0(r19)
 800b210:	28000526 	beq	r5,zero,800b228 <__sflush_r+0xd0>
 800b214:	88801004 	addi	r2,r17,64
 800b218:	28800226 	beq	r5,r2,800b224 <__sflush_r+0xcc>
 800b21c:	9809883a 	mov	r4,r19
 800b220:	800b8c40 	call	800b8c4 <_free_r>
 800b224:	88000c15 	stw	zero,48(r17)
 800b228:	0005883a 	mov	r2,zero
 800b22c:	dfc00417 	ldw	ra,16(sp)
 800b230:	dcc00317 	ldw	r19,12(sp)
 800b234:	dc800217 	ldw	r18,8(sp)
 800b238:	dc400117 	ldw	r17,4(sp)
 800b23c:	dc000017 	ldw	r16,0(sp)
 800b240:	dec00504 	addi	sp,sp,20
 800b244:	f800283a 	ret
 800b248:	2c800417 	ldw	r18,16(r5)
 800b24c:	903ff626 	beq	r18,zero,800b228 <__alt_data_end+0xfc00b228>
 800b250:	2c000017 	ldw	r16,0(r5)
 800b254:	108000cc 	andi	r2,r2,3
 800b258:	2c800015 	stw	r18,0(r5)
 800b25c:	84a1c83a 	sub	r16,r16,r18
 800b260:	1000131e 	bne	r2,zero,800b2b0 <__sflush_r+0x158>
 800b264:	28800517 	ldw	r2,20(r5)
 800b268:	88800215 	stw	r2,8(r17)
 800b26c:	04000316 	blt	zero,r16,800b27c <__sflush_r+0x124>
 800b270:	003fed06 	br	800b228 <__alt_data_end+0xfc00b228>
 800b274:	90a5883a 	add	r18,r18,r2
 800b278:	043feb0e 	bge	zero,r16,800b228 <__alt_data_end+0xfc00b228>
 800b27c:	88800917 	ldw	r2,36(r17)
 800b280:	89400717 	ldw	r5,28(r17)
 800b284:	800f883a 	mov	r7,r16
 800b288:	900d883a 	mov	r6,r18
 800b28c:	9809883a 	mov	r4,r19
 800b290:	103ee83a 	callr	r2
 800b294:	80a1c83a 	sub	r16,r16,r2
 800b298:	00bff616 	blt	zero,r2,800b274 <__alt_data_end+0xfc00b274>
 800b29c:	88c0030b 	ldhu	r3,12(r17)
 800b2a0:	00bfffc4 	movi	r2,-1
 800b2a4:	18c01014 	ori	r3,r3,64
 800b2a8:	88c0030d 	sth	r3,12(r17)
 800b2ac:	003fdf06 	br	800b22c <__alt_data_end+0xfc00b22c>
 800b2b0:	0005883a 	mov	r2,zero
 800b2b4:	003fec06 	br	800b268 <__alt_data_end+0xfc00b268>
 800b2b8:	88801415 	stw	r2,80(r17)
 800b2bc:	003fd206 	br	800b208 <__alt_data_end+0xfc00b208>
 800b2c0:	28c00f17 	ldw	r3,60(r5)
 800b2c4:	00ffb316 	blt	zero,r3,800b194 <__alt_data_end+0xfc00b194>
 800b2c8:	003fd706 	br	800b228 <__alt_data_end+0xfc00b228>
 800b2cc:	89400717 	ldw	r5,28(r17)
 800b2d0:	000d883a 	mov	r6,zero
 800b2d4:	01c00044 	movi	r7,1
 800b2d8:	9809883a 	mov	r4,r19
 800b2dc:	403ee83a 	callr	r8
 800b2e0:	100d883a 	mov	r6,r2
 800b2e4:	00bfffc4 	movi	r2,-1
 800b2e8:	30801426 	beq	r6,r2,800b33c <__sflush_r+0x1e4>
 800b2ec:	8880030b 	ldhu	r2,12(r17)
 800b2f0:	8a000a17 	ldw	r8,40(r17)
 800b2f4:	003fae06 	br	800b1b0 <__alt_data_end+0xfc00b1b0>
 800b2f8:	98c00017 	ldw	r3,0(r19)
 800b2fc:	183fba26 	beq	r3,zero,800b1e8 <__alt_data_end+0xfc00b1e8>
 800b300:	01000744 	movi	r4,29
 800b304:	19000626 	beq	r3,r4,800b320 <__sflush_r+0x1c8>
 800b308:	01000584 	movi	r4,22
 800b30c:	19000426 	beq	r3,r4,800b320 <__sflush_r+0x1c8>
 800b310:	88c0030b 	ldhu	r3,12(r17)
 800b314:	18c01014 	ori	r3,r3,64
 800b318:	88c0030d 	sth	r3,12(r17)
 800b31c:	003fc306 	br	800b22c <__alt_data_end+0xfc00b22c>
 800b320:	8880030b 	ldhu	r2,12(r17)
 800b324:	88c00417 	ldw	r3,16(r17)
 800b328:	88000115 	stw	zero,4(r17)
 800b32c:	10bdffcc 	andi	r2,r2,63487
 800b330:	8880030d 	sth	r2,12(r17)
 800b334:	88c00015 	stw	r3,0(r17)
 800b338:	003fb306 	br	800b208 <__alt_data_end+0xfc00b208>
 800b33c:	98800017 	ldw	r2,0(r19)
 800b340:	103fea26 	beq	r2,zero,800b2ec <__alt_data_end+0xfc00b2ec>
 800b344:	00c00744 	movi	r3,29
 800b348:	10c00226 	beq	r2,r3,800b354 <__sflush_r+0x1fc>
 800b34c:	00c00584 	movi	r3,22
 800b350:	10c0031e 	bne	r2,r3,800b360 <__sflush_r+0x208>
 800b354:	9c000015 	stw	r16,0(r19)
 800b358:	0005883a 	mov	r2,zero
 800b35c:	003fb306 	br	800b22c <__alt_data_end+0xfc00b22c>
 800b360:	88c0030b 	ldhu	r3,12(r17)
 800b364:	3005883a 	mov	r2,r6
 800b368:	18c01014 	ori	r3,r3,64
 800b36c:	88c0030d 	sth	r3,12(r17)
 800b370:	003fae06 	br	800b22c <__alt_data_end+0xfc00b22c>

0800b374 <_fflush_r>:
 800b374:	defffd04 	addi	sp,sp,-12
 800b378:	dc000115 	stw	r16,4(sp)
 800b37c:	dfc00215 	stw	ra,8(sp)
 800b380:	2021883a 	mov	r16,r4
 800b384:	20000226 	beq	r4,zero,800b390 <_fflush_r+0x1c>
 800b388:	20800e17 	ldw	r2,56(r4)
 800b38c:	10000c26 	beq	r2,zero,800b3c0 <_fflush_r+0x4c>
 800b390:	2880030f 	ldh	r2,12(r5)
 800b394:	1000051e 	bne	r2,zero,800b3ac <_fflush_r+0x38>
 800b398:	0005883a 	mov	r2,zero
 800b39c:	dfc00217 	ldw	ra,8(sp)
 800b3a0:	dc000117 	ldw	r16,4(sp)
 800b3a4:	dec00304 	addi	sp,sp,12
 800b3a8:	f800283a 	ret
 800b3ac:	8009883a 	mov	r4,r16
 800b3b0:	dfc00217 	ldw	ra,8(sp)
 800b3b4:	dc000117 	ldw	r16,4(sp)
 800b3b8:	dec00304 	addi	sp,sp,12
 800b3bc:	800b1581 	jmpi	800b158 <__sflush_r>
 800b3c0:	d9400015 	stw	r5,0(sp)
 800b3c4:	800b7500 	call	800b750 <__sinit>
 800b3c8:	d9400017 	ldw	r5,0(sp)
 800b3cc:	003ff006 	br	800b390 <__alt_data_end+0xfc00b390>

0800b3d0 <fflush>:
 800b3d0:	20000526 	beq	r4,zero,800b3e8 <fflush+0x18>
 800b3d4:	00820074 	movhi	r2,2049
 800b3d8:	109eae04 	addi	r2,r2,31416
 800b3dc:	200b883a 	mov	r5,r4
 800b3e0:	11000017 	ldw	r4,0(r2)
 800b3e4:	800b3741 	jmpi	800b374 <_fflush_r>
 800b3e8:	00820074 	movhi	r2,2049
 800b3ec:	109ead04 	addi	r2,r2,31412
 800b3f0:	11000017 	ldw	r4,0(r2)
 800b3f4:	01420074 	movhi	r5,2049
 800b3f8:	296cdd04 	addi	r5,r5,-19596
 800b3fc:	800c1541 	jmpi	800c154 <_fwalk_reent>

0800b400 <__fp_unlock>:
 800b400:	0005883a 	mov	r2,zero
 800b404:	f800283a 	ret

0800b408 <_cleanup_r>:
 800b408:	01420074 	movhi	r5,2049
 800b40c:	29403e04 	addi	r5,r5,248
 800b410:	800c1541 	jmpi	800c154 <_fwalk_reent>

0800b414 <__sinit.part.1>:
 800b414:	defff704 	addi	sp,sp,-36
 800b418:	00c20074 	movhi	r3,2049
 800b41c:	dfc00815 	stw	ra,32(sp)
 800b420:	ddc00715 	stw	r23,28(sp)
 800b424:	dd800615 	stw	r22,24(sp)
 800b428:	dd400515 	stw	r21,20(sp)
 800b42c:	dd000415 	stw	r20,16(sp)
 800b430:	dcc00315 	stw	r19,12(sp)
 800b434:	dc800215 	stw	r18,8(sp)
 800b438:	dc400115 	stw	r17,4(sp)
 800b43c:	dc000015 	stw	r16,0(sp)
 800b440:	18ed0204 	addi	r3,r3,-19448
 800b444:	24000117 	ldw	r16,4(r4)
 800b448:	20c00f15 	stw	r3,60(r4)
 800b44c:	2080bb04 	addi	r2,r4,748
 800b450:	00c000c4 	movi	r3,3
 800b454:	20c0b915 	stw	r3,740(r4)
 800b458:	2080ba15 	stw	r2,744(r4)
 800b45c:	2000b815 	stw	zero,736(r4)
 800b460:	05c00204 	movi	r23,8
 800b464:	00800104 	movi	r2,4
 800b468:	2025883a 	mov	r18,r4
 800b46c:	b80d883a 	mov	r6,r23
 800b470:	81001704 	addi	r4,r16,92
 800b474:	000b883a 	mov	r5,zero
 800b478:	80000015 	stw	zero,0(r16)
 800b47c:	80000115 	stw	zero,4(r16)
 800b480:	80000215 	stw	zero,8(r16)
 800b484:	8080030d 	sth	r2,12(r16)
 800b488:	80001915 	stw	zero,100(r16)
 800b48c:	8000038d 	sth	zero,14(r16)
 800b490:	80000415 	stw	zero,16(r16)
 800b494:	80000515 	stw	zero,20(r16)
 800b498:	80000615 	stw	zero,24(r16)
 800b49c:	800d0440 	call	800d044 <memset>
 800b4a0:	05820074 	movhi	r22,2049
 800b4a4:	94400217 	ldw	r17,8(r18)
 800b4a8:	05420074 	movhi	r21,2049
 800b4ac:	05020074 	movhi	r20,2049
 800b4b0:	04c20074 	movhi	r19,2049
 800b4b4:	b5b9c804 	addi	r22,r22,-6368
 800b4b8:	ad79df04 	addi	r21,r21,-6276
 800b4bc:	a539fe04 	addi	r20,r20,-6152
 800b4c0:	9cfa1504 	addi	r19,r19,-6060
 800b4c4:	85800815 	stw	r22,32(r16)
 800b4c8:	85400915 	stw	r21,36(r16)
 800b4cc:	85000a15 	stw	r20,40(r16)
 800b4d0:	84c00b15 	stw	r19,44(r16)
 800b4d4:	84000715 	stw	r16,28(r16)
 800b4d8:	00800284 	movi	r2,10
 800b4dc:	8880030d 	sth	r2,12(r17)
 800b4e0:	00800044 	movi	r2,1
 800b4e4:	b80d883a 	mov	r6,r23
 800b4e8:	89001704 	addi	r4,r17,92
 800b4ec:	000b883a 	mov	r5,zero
 800b4f0:	88000015 	stw	zero,0(r17)
 800b4f4:	88000115 	stw	zero,4(r17)
 800b4f8:	88000215 	stw	zero,8(r17)
 800b4fc:	88001915 	stw	zero,100(r17)
 800b500:	8880038d 	sth	r2,14(r17)
 800b504:	88000415 	stw	zero,16(r17)
 800b508:	88000515 	stw	zero,20(r17)
 800b50c:	88000615 	stw	zero,24(r17)
 800b510:	800d0440 	call	800d044 <memset>
 800b514:	94000317 	ldw	r16,12(r18)
 800b518:	00800484 	movi	r2,18
 800b51c:	8c400715 	stw	r17,28(r17)
 800b520:	8d800815 	stw	r22,32(r17)
 800b524:	8d400915 	stw	r21,36(r17)
 800b528:	8d000a15 	stw	r20,40(r17)
 800b52c:	8cc00b15 	stw	r19,44(r17)
 800b530:	8080030d 	sth	r2,12(r16)
 800b534:	00800084 	movi	r2,2
 800b538:	80000015 	stw	zero,0(r16)
 800b53c:	80000115 	stw	zero,4(r16)
 800b540:	80000215 	stw	zero,8(r16)
 800b544:	80001915 	stw	zero,100(r16)
 800b548:	8080038d 	sth	r2,14(r16)
 800b54c:	80000415 	stw	zero,16(r16)
 800b550:	80000515 	stw	zero,20(r16)
 800b554:	80000615 	stw	zero,24(r16)
 800b558:	b80d883a 	mov	r6,r23
 800b55c:	000b883a 	mov	r5,zero
 800b560:	81001704 	addi	r4,r16,92
 800b564:	800d0440 	call	800d044 <memset>
 800b568:	00800044 	movi	r2,1
 800b56c:	84000715 	stw	r16,28(r16)
 800b570:	85800815 	stw	r22,32(r16)
 800b574:	85400915 	stw	r21,36(r16)
 800b578:	85000a15 	stw	r20,40(r16)
 800b57c:	84c00b15 	stw	r19,44(r16)
 800b580:	90800e15 	stw	r2,56(r18)
 800b584:	dfc00817 	ldw	ra,32(sp)
 800b588:	ddc00717 	ldw	r23,28(sp)
 800b58c:	dd800617 	ldw	r22,24(sp)
 800b590:	dd400517 	ldw	r21,20(sp)
 800b594:	dd000417 	ldw	r20,16(sp)
 800b598:	dcc00317 	ldw	r19,12(sp)
 800b59c:	dc800217 	ldw	r18,8(sp)
 800b5a0:	dc400117 	ldw	r17,4(sp)
 800b5a4:	dc000017 	ldw	r16,0(sp)
 800b5a8:	dec00904 	addi	sp,sp,36
 800b5ac:	f800283a 	ret

0800b5b0 <__fp_lock>:
 800b5b0:	0005883a 	mov	r2,zero
 800b5b4:	f800283a 	ret

0800b5b8 <__sfmoreglue>:
 800b5b8:	defffc04 	addi	sp,sp,-16
 800b5bc:	dc400115 	stw	r17,4(sp)
 800b5c0:	2c7fffc4 	addi	r17,r5,-1
 800b5c4:	8c401a24 	muli	r17,r17,104
 800b5c8:	dc800215 	stw	r18,8(sp)
 800b5cc:	2825883a 	mov	r18,r5
 800b5d0:	89401d04 	addi	r5,r17,116
 800b5d4:	dc000015 	stw	r16,0(sp)
 800b5d8:	dfc00315 	stw	ra,12(sp)
 800b5dc:	800c4b00 	call	800c4b0 <_malloc_r>
 800b5e0:	1021883a 	mov	r16,r2
 800b5e4:	10000726 	beq	r2,zero,800b604 <__sfmoreglue+0x4c>
 800b5e8:	11000304 	addi	r4,r2,12
 800b5ec:	10000015 	stw	zero,0(r2)
 800b5f0:	14800115 	stw	r18,4(r2)
 800b5f4:	11000215 	stw	r4,8(r2)
 800b5f8:	89801a04 	addi	r6,r17,104
 800b5fc:	000b883a 	mov	r5,zero
 800b600:	800d0440 	call	800d044 <memset>
 800b604:	8005883a 	mov	r2,r16
 800b608:	dfc00317 	ldw	ra,12(sp)
 800b60c:	dc800217 	ldw	r18,8(sp)
 800b610:	dc400117 	ldw	r17,4(sp)
 800b614:	dc000017 	ldw	r16,0(sp)
 800b618:	dec00404 	addi	sp,sp,16
 800b61c:	f800283a 	ret

0800b620 <__sfp>:
 800b620:	defffb04 	addi	sp,sp,-20
 800b624:	dc000015 	stw	r16,0(sp)
 800b628:	04020074 	movhi	r16,2049
 800b62c:	841ead04 	addi	r16,r16,31412
 800b630:	dcc00315 	stw	r19,12(sp)
 800b634:	2027883a 	mov	r19,r4
 800b638:	81000017 	ldw	r4,0(r16)
 800b63c:	dfc00415 	stw	ra,16(sp)
 800b640:	dc800215 	stw	r18,8(sp)
 800b644:	20800e17 	ldw	r2,56(r4)
 800b648:	dc400115 	stw	r17,4(sp)
 800b64c:	1000021e 	bne	r2,zero,800b658 <__sfp+0x38>
 800b650:	800b4140 	call	800b414 <__sinit.part.1>
 800b654:	81000017 	ldw	r4,0(r16)
 800b658:	2480b804 	addi	r18,r4,736
 800b65c:	047fffc4 	movi	r17,-1
 800b660:	91000117 	ldw	r4,4(r18)
 800b664:	94000217 	ldw	r16,8(r18)
 800b668:	213fffc4 	addi	r4,r4,-1
 800b66c:	20000a16 	blt	r4,zero,800b698 <__sfp+0x78>
 800b670:	8080030f 	ldh	r2,12(r16)
 800b674:	10000c26 	beq	r2,zero,800b6a8 <__sfp+0x88>
 800b678:	80c01d04 	addi	r3,r16,116
 800b67c:	00000206 	br	800b688 <__sfp+0x68>
 800b680:	18bfe60f 	ldh	r2,-104(r3)
 800b684:	10000826 	beq	r2,zero,800b6a8 <__sfp+0x88>
 800b688:	213fffc4 	addi	r4,r4,-1
 800b68c:	1c3ffd04 	addi	r16,r3,-12
 800b690:	18c01a04 	addi	r3,r3,104
 800b694:	247ffa1e 	bne	r4,r17,800b680 <__alt_data_end+0xfc00b680>
 800b698:	90800017 	ldw	r2,0(r18)
 800b69c:	10001d26 	beq	r2,zero,800b714 <__sfp+0xf4>
 800b6a0:	1025883a 	mov	r18,r2
 800b6a4:	003fee06 	br	800b660 <__alt_data_end+0xfc00b660>
 800b6a8:	00bfffc4 	movi	r2,-1
 800b6ac:	8080038d 	sth	r2,14(r16)
 800b6b0:	00800044 	movi	r2,1
 800b6b4:	8080030d 	sth	r2,12(r16)
 800b6b8:	80001915 	stw	zero,100(r16)
 800b6bc:	80000015 	stw	zero,0(r16)
 800b6c0:	80000215 	stw	zero,8(r16)
 800b6c4:	80000115 	stw	zero,4(r16)
 800b6c8:	80000415 	stw	zero,16(r16)
 800b6cc:	80000515 	stw	zero,20(r16)
 800b6d0:	80000615 	stw	zero,24(r16)
 800b6d4:	01800204 	movi	r6,8
 800b6d8:	000b883a 	mov	r5,zero
 800b6dc:	81001704 	addi	r4,r16,92
 800b6e0:	800d0440 	call	800d044 <memset>
 800b6e4:	8005883a 	mov	r2,r16
 800b6e8:	80000c15 	stw	zero,48(r16)
 800b6ec:	80000d15 	stw	zero,52(r16)
 800b6f0:	80001115 	stw	zero,68(r16)
 800b6f4:	80001215 	stw	zero,72(r16)
 800b6f8:	dfc00417 	ldw	ra,16(sp)
 800b6fc:	dcc00317 	ldw	r19,12(sp)
 800b700:	dc800217 	ldw	r18,8(sp)
 800b704:	dc400117 	ldw	r17,4(sp)
 800b708:	dc000017 	ldw	r16,0(sp)
 800b70c:	dec00504 	addi	sp,sp,20
 800b710:	f800283a 	ret
 800b714:	01400104 	movi	r5,4
 800b718:	9809883a 	mov	r4,r19
 800b71c:	800b5b80 	call	800b5b8 <__sfmoreglue>
 800b720:	90800015 	stw	r2,0(r18)
 800b724:	103fde1e 	bne	r2,zero,800b6a0 <__alt_data_end+0xfc00b6a0>
 800b728:	00800304 	movi	r2,12
 800b72c:	98800015 	stw	r2,0(r19)
 800b730:	0005883a 	mov	r2,zero
 800b734:	003ff006 	br	800b6f8 <__alt_data_end+0xfc00b6f8>

0800b738 <_cleanup>:
 800b738:	00820074 	movhi	r2,2049
 800b73c:	109ead04 	addi	r2,r2,31412
 800b740:	11000017 	ldw	r4,0(r2)
 800b744:	01420074 	movhi	r5,2049
 800b748:	29403e04 	addi	r5,r5,248
 800b74c:	800c1541 	jmpi	800c154 <_fwalk_reent>

0800b750 <__sinit>:
 800b750:	20800e17 	ldw	r2,56(r4)
 800b754:	10000126 	beq	r2,zero,800b75c <__sinit+0xc>
 800b758:	f800283a 	ret
 800b75c:	800b4141 	jmpi	800b414 <__sinit.part.1>

0800b760 <__sfp_lock_acquire>:
 800b760:	f800283a 	ret

0800b764 <__sfp_lock_release>:
 800b764:	f800283a 	ret

0800b768 <__sinit_lock_acquire>:
 800b768:	f800283a 	ret

0800b76c <__sinit_lock_release>:
 800b76c:	f800283a 	ret

0800b770 <__fp_lock_all>:
 800b770:	00820074 	movhi	r2,2049
 800b774:	109eae04 	addi	r2,r2,31416
 800b778:	11000017 	ldw	r4,0(r2)
 800b77c:	01420074 	movhi	r5,2049
 800b780:	296d6c04 	addi	r5,r5,-19024
 800b784:	800c0901 	jmpi	800c090 <_fwalk>

0800b788 <__fp_unlock_all>:
 800b788:	00820074 	movhi	r2,2049
 800b78c:	109eae04 	addi	r2,r2,31416
 800b790:	11000017 	ldw	r4,0(r2)
 800b794:	01420074 	movhi	r5,2049
 800b798:	296d0004 	addi	r5,r5,-19456
 800b79c:	800c0901 	jmpi	800c090 <_fwalk>

0800b7a0 <_malloc_trim_r>:
 800b7a0:	defffb04 	addi	sp,sp,-20
 800b7a4:	dcc00315 	stw	r19,12(sp)
 800b7a8:	04c20074 	movhi	r19,2049
 800b7ac:	dc800215 	stw	r18,8(sp)
 800b7b0:	dc400115 	stw	r17,4(sp)
 800b7b4:	dc000015 	stw	r16,0(sp)
 800b7b8:	dfc00415 	stw	ra,16(sp)
 800b7bc:	2821883a 	mov	r16,r5
 800b7c0:	9cd8e804 	addi	r19,r19,25504
 800b7c4:	2025883a 	mov	r18,r4
 800b7c8:	80119880 	call	8011988 <__malloc_lock>
 800b7cc:	98800217 	ldw	r2,8(r19)
 800b7d0:	14400117 	ldw	r17,4(r2)
 800b7d4:	00bfff04 	movi	r2,-4
 800b7d8:	88a2703a 	and	r17,r17,r2
 800b7dc:	8c21c83a 	sub	r16,r17,r16
 800b7e0:	8403fbc4 	addi	r16,r16,4079
 800b7e4:	8020d33a 	srli	r16,r16,12
 800b7e8:	0083ffc4 	movi	r2,4095
 800b7ec:	843fffc4 	addi	r16,r16,-1
 800b7f0:	8020933a 	slli	r16,r16,12
 800b7f4:	1400060e 	bge	r2,r16,800b810 <_malloc_trim_r+0x70>
 800b7f8:	000b883a 	mov	r5,zero
 800b7fc:	9009883a 	mov	r4,r18
 800b800:	800e6cc0 	call	800e6cc <_sbrk_r>
 800b804:	98c00217 	ldw	r3,8(r19)
 800b808:	1c47883a 	add	r3,r3,r17
 800b80c:	10c00a26 	beq	r2,r3,800b838 <_malloc_trim_r+0x98>
 800b810:	9009883a 	mov	r4,r18
 800b814:	80119ac0 	call	80119ac <__malloc_unlock>
 800b818:	0005883a 	mov	r2,zero
 800b81c:	dfc00417 	ldw	ra,16(sp)
 800b820:	dcc00317 	ldw	r19,12(sp)
 800b824:	dc800217 	ldw	r18,8(sp)
 800b828:	dc400117 	ldw	r17,4(sp)
 800b82c:	dc000017 	ldw	r16,0(sp)
 800b830:	dec00504 	addi	sp,sp,20
 800b834:	f800283a 	ret
 800b838:	040bc83a 	sub	r5,zero,r16
 800b83c:	9009883a 	mov	r4,r18
 800b840:	800e6cc0 	call	800e6cc <_sbrk_r>
 800b844:	00ffffc4 	movi	r3,-1
 800b848:	10c00d26 	beq	r2,r3,800b880 <_malloc_trim_r+0xe0>
 800b84c:	00c200b4 	movhi	r3,2050
 800b850:	18e5d204 	addi	r3,r3,-26808
 800b854:	18800017 	ldw	r2,0(r3)
 800b858:	99000217 	ldw	r4,8(r19)
 800b85c:	8c23c83a 	sub	r17,r17,r16
 800b860:	8c400054 	ori	r17,r17,1
 800b864:	1421c83a 	sub	r16,r2,r16
 800b868:	24400115 	stw	r17,4(r4)
 800b86c:	9009883a 	mov	r4,r18
 800b870:	1c000015 	stw	r16,0(r3)
 800b874:	80119ac0 	call	80119ac <__malloc_unlock>
 800b878:	00800044 	movi	r2,1
 800b87c:	003fe706 	br	800b81c <__alt_data_end+0xfc00b81c>
 800b880:	000b883a 	mov	r5,zero
 800b884:	9009883a 	mov	r4,r18
 800b888:	800e6cc0 	call	800e6cc <_sbrk_r>
 800b88c:	99000217 	ldw	r4,8(r19)
 800b890:	014003c4 	movi	r5,15
 800b894:	1107c83a 	sub	r3,r2,r4
 800b898:	28ffdd0e 	bge	r5,r3,800b810 <__alt_data_end+0xfc00b810>
 800b89c:	01420074 	movhi	r5,2049
 800b8a0:	295eb004 	addi	r5,r5,31424
 800b8a4:	29400017 	ldw	r5,0(r5)
 800b8a8:	18c00054 	ori	r3,r3,1
 800b8ac:	20c00115 	stw	r3,4(r4)
 800b8b0:	00c200b4 	movhi	r3,2050
 800b8b4:	1145c83a 	sub	r2,r2,r5
 800b8b8:	18e5d204 	addi	r3,r3,-26808
 800b8bc:	18800015 	stw	r2,0(r3)
 800b8c0:	003fd306 	br	800b810 <__alt_data_end+0xfc00b810>

0800b8c4 <_free_r>:
 800b8c4:	28004126 	beq	r5,zero,800b9cc <_free_r+0x108>
 800b8c8:	defffd04 	addi	sp,sp,-12
 800b8cc:	dc400115 	stw	r17,4(sp)
 800b8d0:	dc000015 	stw	r16,0(sp)
 800b8d4:	2023883a 	mov	r17,r4
 800b8d8:	2821883a 	mov	r16,r5
 800b8dc:	dfc00215 	stw	ra,8(sp)
 800b8e0:	80119880 	call	8011988 <__malloc_lock>
 800b8e4:	81ffff17 	ldw	r7,-4(r16)
 800b8e8:	00bfff84 	movi	r2,-2
 800b8ec:	01020074 	movhi	r4,2049
 800b8f0:	81bffe04 	addi	r6,r16,-8
 800b8f4:	3884703a 	and	r2,r7,r2
 800b8f8:	2118e804 	addi	r4,r4,25504
 800b8fc:	308b883a 	add	r5,r6,r2
 800b900:	2a400117 	ldw	r9,4(r5)
 800b904:	22000217 	ldw	r8,8(r4)
 800b908:	00ffff04 	movi	r3,-4
 800b90c:	48c6703a 	and	r3,r9,r3
 800b910:	2a005726 	beq	r5,r8,800ba70 <_free_r+0x1ac>
 800b914:	28c00115 	stw	r3,4(r5)
 800b918:	39c0004c 	andi	r7,r7,1
 800b91c:	3800091e 	bne	r7,zero,800b944 <_free_r+0x80>
 800b920:	823ffe17 	ldw	r8,-8(r16)
 800b924:	22400204 	addi	r9,r4,8
 800b928:	320dc83a 	sub	r6,r6,r8
 800b92c:	31c00217 	ldw	r7,8(r6)
 800b930:	1205883a 	add	r2,r2,r8
 800b934:	3a406526 	beq	r7,r9,800bacc <_free_r+0x208>
 800b938:	32000317 	ldw	r8,12(r6)
 800b93c:	3a000315 	stw	r8,12(r7)
 800b940:	41c00215 	stw	r7,8(r8)
 800b944:	28cf883a 	add	r7,r5,r3
 800b948:	39c00117 	ldw	r7,4(r7)
 800b94c:	39c0004c 	andi	r7,r7,1
 800b950:	38003a26 	beq	r7,zero,800ba3c <_free_r+0x178>
 800b954:	10c00054 	ori	r3,r2,1
 800b958:	30c00115 	stw	r3,4(r6)
 800b95c:	3087883a 	add	r3,r6,r2
 800b960:	18800015 	stw	r2,0(r3)
 800b964:	00c07fc4 	movi	r3,511
 800b968:	18801936 	bltu	r3,r2,800b9d0 <_free_r+0x10c>
 800b96c:	1004d0fa 	srli	r2,r2,3
 800b970:	01c00044 	movi	r7,1
 800b974:	21400117 	ldw	r5,4(r4)
 800b978:	10c00044 	addi	r3,r2,1
 800b97c:	18c7883a 	add	r3,r3,r3
 800b980:	1005d0ba 	srai	r2,r2,2
 800b984:	18c7883a 	add	r3,r3,r3
 800b988:	18c7883a 	add	r3,r3,r3
 800b98c:	1907883a 	add	r3,r3,r4
 800b990:	3884983a 	sll	r2,r7,r2
 800b994:	19c00017 	ldw	r7,0(r3)
 800b998:	1a3ffe04 	addi	r8,r3,-8
 800b99c:	1144b03a 	or	r2,r2,r5
 800b9a0:	32000315 	stw	r8,12(r6)
 800b9a4:	31c00215 	stw	r7,8(r6)
 800b9a8:	20800115 	stw	r2,4(r4)
 800b9ac:	19800015 	stw	r6,0(r3)
 800b9b0:	39800315 	stw	r6,12(r7)
 800b9b4:	8809883a 	mov	r4,r17
 800b9b8:	dfc00217 	ldw	ra,8(sp)
 800b9bc:	dc400117 	ldw	r17,4(sp)
 800b9c0:	dc000017 	ldw	r16,0(sp)
 800b9c4:	dec00304 	addi	sp,sp,12
 800b9c8:	80119ac1 	jmpi	80119ac <__malloc_unlock>
 800b9cc:	f800283a 	ret
 800b9d0:	100ad27a 	srli	r5,r2,9
 800b9d4:	00c00104 	movi	r3,4
 800b9d8:	19404a36 	bltu	r3,r5,800bb04 <_free_r+0x240>
 800b9dc:	100ad1ba 	srli	r5,r2,6
 800b9e0:	28c00e44 	addi	r3,r5,57
 800b9e4:	18c7883a 	add	r3,r3,r3
 800b9e8:	29400e04 	addi	r5,r5,56
 800b9ec:	18c7883a 	add	r3,r3,r3
 800b9f0:	18c7883a 	add	r3,r3,r3
 800b9f4:	1909883a 	add	r4,r3,r4
 800b9f8:	20c00017 	ldw	r3,0(r4)
 800b9fc:	01c20074 	movhi	r7,2049
 800ba00:	213ffe04 	addi	r4,r4,-8
 800ba04:	39d8e804 	addi	r7,r7,25504
 800ba08:	20c04426 	beq	r4,r3,800bb1c <_free_r+0x258>
 800ba0c:	01ffff04 	movi	r7,-4
 800ba10:	19400117 	ldw	r5,4(r3)
 800ba14:	29ca703a 	and	r5,r5,r7
 800ba18:	1140022e 	bgeu	r2,r5,800ba24 <_free_r+0x160>
 800ba1c:	18c00217 	ldw	r3,8(r3)
 800ba20:	20fffb1e 	bne	r4,r3,800ba10 <__alt_data_end+0xfc00ba10>
 800ba24:	19000317 	ldw	r4,12(r3)
 800ba28:	31000315 	stw	r4,12(r6)
 800ba2c:	30c00215 	stw	r3,8(r6)
 800ba30:	21800215 	stw	r6,8(r4)
 800ba34:	19800315 	stw	r6,12(r3)
 800ba38:	003fde06 	br	800b9b4 <__alt_data_end+0xfc00b9b4>
 800ba3c:	29c00217 	ldw	r7,8(r5)
 800ba40:	10c5883a 	add	r2,r2,r3
 800ba44:	00c20074 	movhi	r3,2049
 800ba48:	18d8ea04 	addi	r3,r3,25512
 800ba4c:	38c03b26 	beq	r7,r3,800bb3c <_free_r+0x278>
 800ba50:	2a000317 	ldw	r8,12(r5)
 800ba54:	11400054 	ori	r5,r2,1
 800ba58:	3087883a 	add	r3,r6,r2
 800ba5c:	3a000315 	stw	r8,12(r7)
 800ba60:	41c00215 	stw	r7,8(r8)
 800ba64:	31400115 	stw	r5,4(r6)
 800ba68:	18800015 	stw	r2,0(r3)
 800ba6c:	003fbd06 	br	800b964 <__alt_data_end+0xfc00b964>
 800ba70:	39c0004c 	andi	r7,r7,1
 800ba74:	10c5883a 	add	r2,r2,r3
 800ba78:	3800071e 	bne	r7,zero,800ba98 <_free_r+0x1d4>
 800ba7c:	81fffe17 	ldw	r7,-8(r16)
 800ba80:	31cdc83a 	sub	r6,r6,r7
 800ba84:	30c00317 	ldw	r3,12(r6)
 800ba88:	31400217 	ldw	r5,8(r6)
 800ba8c:	11c5883a 	add	r2,r2,r7
 800ba90:	28c00315 	stw	r3,12(r5)
 800ba94:	19400215 	stw	r5,8(r3)
 800ba98:	10c00054 	ori	r3,r2,1
 800ba9c:	30c00115 	stw	r3,4(r6)
 800baa0:	00c20074 	movhi	r3,2049
 800baa4:	18deb104 	addi	r3,r3,31428
 800baa8:	18c00017 	ldw	r3,0(r3)
 800baac:	21800215 	stw	r6,8(r4)
 800bab0:	10ffc036 	bltu	r2,r3,800b9b4 <__alt_data_end+0xfc00b9b4>
 800bab4:	008200b4 	movhi	r2,2050
 800bab8:	10a5c904 	addi	r2,r2,-26844
 800babc:	11400017 	ldw	r5,0(r2)
 800bac0:	8809883a 	mov	r4,r17
 800bac4:	800b7a00 	call	800b7a0 <_malloc_trim_r>
 800bac8:	003fba06 	br	800b9b4 <__alt_data_end+0xfc00b9b4>
 800bacc:	28c9883a 	add	r4,r5,r3
 800bad0:	21000117 	ldw	r4,4(r4)
 800bad4:	2100004c 	andi	r4,r4,1
 800bad8:	2000391e 	bne	r4,zero,800bbc0 <_free_r+0x2fc>
 800badc:	29c00217 	ldw	r7,8(r5)
 800bae0:	29000317 	ldw	r4,12(r5)
 800bae4:	1885883a 	add	r2,r3,r2
 800bae8:	10c00054 	ori	r3,r2,1
 800baec:	39000315 	stw	r4,12(r7)
 800baf0:	21c00215 	stw	r7,8(r4)
 800baf4:	30c00115 	stw	r3,4(r6)
 800baf8:	308d883a 	add	r6,r6,r2
 800bafc:	30800015 	stw	r2,0(r6)
 800bb00:	003fac06 	br	800b9b4 <__alt_data_end+0xfc00b9b4>
 800bb04:	00c00504 	movi	r3,20
 800bb08:	19401536 	bltu	r3,r5,800bb60 <_free_r+0x29c>
 800bb0c:	28c01704 	addi	r3,r5,92
 800bb10:	18c7883a 	add	r3,r3,r3
 800bb14:	294016c4 	addi	r5,r5,91
 800bb18:	003fb406 	br	800b9ec <__alt_data_end+0xfc00b9ec>
 800bb1c:	280bd0ba 	srai	r5,r5,2
 800bb20:	00c00044 	movi	r3,1
 800bb24:	38800117 	ldw	r2,4(r7)
 800bb28:	194a983a 	sll	r5,r3,r5
 800bb2c:	2007883a 	mov	r3,r4
 800bb30:	2884b03a 	or	r2,r5,r2
 800bb34:	38800115 	stw	r2,4(r7)
 800bb38:	003fbb06 	br	800ba28 <__alt_data_end+0xfc00ba28>
 800bb3c:	21800515 	stw	r6,20(r4)
 800bb40:	21800415 	stw	r6,16(r4)
 800bb44:	10c00054 	ori	r3,r2,1
 800bb48:	31c00315 	stw	r7,12(r6)
 800bb4c:	31c00215 	stw	r7,8(r6)
 800bb50:	30c00115 	stw	r3,4(r6)
 800bb54:	308d883a 	add	r6,r6,r2
 800bb58:	30800015 	stw	r2,0(r6)
 800bb5c:	003f9506 	br	800b9b4 <__alt_data_end+0xfc00b9b4>
 800bb60:	00c01504 	movi	r3,84
 800bb64:	19400536 	bltu	r3,r5,800bb7c <_free_r+0x2b8>
 800bb68:	100ad33a 	srli	r5,r2,12
 800bb6c:	28c01bc4 	addi	r3,r5,111
 800bb70:	18c7883a 	add	r3,r3,r3
 800bb74:	29401b84 	addi	r5,r5,110
 800bb78:	003f9c06 	br	800b9ec <__alt_data_end+0xfc00b9ec>
 800bb7c:	00c05504 	movi	r3,340
 800bb80:	19400536 	bltu	r3,r5,800bb98 <_free_r+0x2d4>
 800bb84:	100ad3fa 	srli	r5,r2,15
 800bb88:	28c01e04 	addi	r3,r5,120
 800bb8c:	18c7883a 	add	r3,r3,r3
 800bb90:	29401dc4 	addi	r5,r5,119
 800bb94:	003f9506 	br	800b9ec <__alt_data_end+0xfc00b9ec>
 800bb98:	00c15504 	movi	r3,1364
 800bb9c:	19400536 	bltu	r3,r5,800bbb4 <_free_r+0x2f0>
 800bba0:	100ad4ba 	srli	r5,r2,18
 800bba4:	28c01f44 	addi	r3,r5,125
 800bba8:	18c7883a 	add	r3,r3,r3
 800bbac:	29401f04 	addi	r5,r5,124
 800bbb0:	003f8e06 	br	800b9ec <__alt_data_end+0xfc00b9ec>
 800bbb4:	00c03f84 	movi	r3,254
 800bbb8:	01401f84 	movi	r5,126
 800bbbc:	003f8b06 	br	800b9ec <__alt_data_end+0xfc00b9ec>
 800bbc0:	10c00054 	ori	r3,r2,1
 800bbc4:	30c00115 	stw	r3,4(r6)
 800bbc8:	308d883a 	add	r6,r6,r2
 800bbcc:	30800015 	stw	r2,0(r6)
 800bbd0:	003f7806 	br	800b9b4 <__alt_data_end+0xfc00b9b4>

0800bbd4 <__sfvwrite_r>:
 800bbd4:	30800217 	ldw	r2,8(r6)
 800bbd8:	10006726 	beq	r2,zero,800bd78 <__sfvwrite_r+0x1a4>
 800bbdc:	28c0030b 	ldhu	r3,12(r5)
 800bbe0:	defff404 	addi	sp,sp,-48
 800bbe4:	dd400715 	stw	r21,28(sp)
 800bbe8:	dd000615 	stw	r20,24(sp)
 800bbec:	dc000215 	stw	r16,8(sp)
 800bbf0:	dfc00b15 	stw	ra,44(sp)
 800bbf4:	df000a15 	stw	fp,40(sp)
 800bbf8:	ddc00915 	stw	r23,36(sp)
 800bbfc:	dd800815 	stw	r22,32(sp)
 800bc00:	dcc00515 	stw	r19,20(sp)
 800bc04:	dc800415 	stw	r18,16(sp)
 800bc08:	dc400315 	stw	r17,12(sp)
 800bc0c:	1880020c 	andi	r2,r3,8
 800bc10:	2821883a 	mov	r16,r5
 800bc14:	202b883a 	mov	r21,r4
 800bc18:	3029883a 	mov	r20,r6
 800bc1c:	10002726 	beq	r2,zero,800bcbc <__sfvwrite_r+0xe8>
 800bc20:	28800417 	ldw	r2,16(r5)
 800bc24:	10002526 	beq	r2,zero,800bcbc <__sfvwrite_r+0xe8>
 800bc28:	1880008c 	andi	r2,r3,2
 800bc2c:	a4400017 	ldw	r17,0(r20)
 800bc30:	10002a26 	beq	r2,zero,800bcdc <__sfvwrite_r+0x108>
 800bc34:	05a00034 	movhi	r22,32768
 800bc38:	0027883a 	mov	r19,zero
 800bc3c:	0025883a 	mov	r18,zero
 800bc40:	b5bf0004 	addi	r22,r22,-1024
 800bc44:	980d883a 	mov	r6,r19
 800bc48:	a809883a 	mov	r4,r21
 800bc4c:	90004626 	beq	r18,zero,800bd68 <__sfvwrite_r+0x194>
 800bc50:	900f883a 	mov	r7,r18
 800bc54:	b480022e 	bgeu	r22,r18,800bc60 <__sfvwrite_r+0x8c>
 800bc58:	01e00034 	movhi	r7,32768
 800bc5c:	39ff0004 	addi	r7,r7,-1024
 800bc60:	80800917 	ldw	r2,36(r16)
 800bc64:	81400717 	ldw	r5,28(r16)
 800bc68:	103ee83a 	callr	r2
 800bc6c:	0080570e 	bge	zero,r2,800bdcc <__sfvwrite_r+0x1f8>
 800bc70:	a0c00217 	ldw	r3,8(r20)
 800bc74:	98a7883a 	add	r19,r19,r2
 800bc78:	90a5c83a 	sub	r18,r18,r2
 800bc7c:	1885c83a 	sub	r2,r3,r2
 800bc80:	a0800215 	stw	r2,8(r20)
 800bc84:	103fef1e 	bne	r2,zero,800bc44 <__alt_data_end+0xfc00bc44>
 800bc88:	0005883a 	mov	r2,zero
 800bc8c:	dfc00b17 	ldw	ra,44(sp)
 800bc90:	df000a17 	ldw	fp,40(sp)
 800bc94:	ddc00917 	ldw	r23,36(sp)
 800bc98:	dd800817 	ldw	r22,32(sp)
 800bc9c:	dd400717 	ldw	r21,28(sp)
 800bca0:	dd000617 	ldw	r20,24(sp)
 800bca4:	dcc00517 	ldw	r19,20(sp)
 800bca8:	dc800417 	ldw	r18,16(sp)
 800bcac:	dc400317 	ldw	r17,12(sp)
 800bcb0:	dc000217 	ldw	r16,8(sp)
 800bcb4:	dec00c04 	addi	sp,sp,48
 800bcb8:	f800283a 	ret
 800bcbc:	800b883a 	mov	r5,r16
 800bcc0:	a809883a 	mov	r4,r21
 800bcc4:	800977c0 	call	800977c <__swsetup_r>
 800bcc8:	1000eb1e 	bne	r2,zero,800c078 <__sfvwrite_r+0x4a4>
 800bccc:	80c0030b 	ldhu	r3,12(r16)
 800bcd0:	a4400017 	ldw	r17,0(r20)
 800bcd4:	1880008c 	andi	r2,r3,2
 800bcd8:	103fd61e 	bne	r2,zero,800bc34 <__alt_data_end+0xfc00bc34>
 800bcdc:	1880004c 	andi	r2,r3,1
 800bce0:	10003f1e 	bne	r2,zero,800bde0 <__sfvwrite_r+0x20c>
 800bce4:	0039883a 	mov	fp,zero
 800bce8:	0025883a 	mov	r18,zero
 800bcec:	90001a26 	beq	r18,zero,800bd58 <__sfvwrite_r+0x184>
 800bcf0:	1880800c 	andi	r2,r3,512
 800bcf4:	84c00217 	ldw	r19,8(r16)
 800bcf8:	10002126 	beq	r2,zero,800bd80 <__sfvwrite_r+0x1ac>
 800bcfc:	982f883a 	mov	r23,r19
 800bd00:	94c09336 	bltu	r18,r19,800bf50 <__sfvwrite_r+0x37c>
 800bd04:	1881200c 	andi	r2,r3,1152
 800bd08:	10009e1e 	bne	r2,zero,800bf84 <__sfvwrite_r+0x3b0>
 800bd0c:	81000017 	ldw	r4,0(r16)
 800bd10:	b80d883a 	mov	r6,r23
 800bd14:	e00b883a 	mov	r5,fp
 800bd18:	800cee80 	call	800cee8 <memmove>
 800bd1c:	80c00217 	ldw	r3,8(r16)
 800bd20:	81000017 	ldw	r4,0(r16)
 800bd24:	9005883a 	mov	r2,r18
 800bd28:	1ce7c83a 	sub	r19,r3,r19
 800bd2c:	25cf883a 	add	r7,r4,r23
 800bd30:	84c00215 	stw	r19,8(r16)
 800bd34:	81c00015 	stw	r7,0(r16)
 800bd38:	a0c00217 	ldw	r3,8(r20)
 800bd3c:	e0b9883a 	add	fp,fp,r2
 800bd40:	90a5c83a 	sub	r18,r18,r2
 800bd44:	18a7c83a 	sub	r19,r3,r2
 800bd48:	a4c00215 	stw	r19,8(r20)
 800bd4c:	983fce26 	beq	r19,zero,800bc88 <__alt_data_end+0xfc00bc88>
 800bd50:	80c0030b 	ldhu	r3,12(r16)
 800bd54:	903fe61e 	bne	r18,zero,800bcf0 <__alt_data_end+0xfc00bcf0>
 800bd58:	8f000017 	ldw	fp,0(r17)
 800bd5c:	8c800117 	ldw	r18,4(r17)
 800bd60:	8c400204 	addi	r17,r17,8
 800bd64:	003fe106 	br	800bcec <__alt_data_end+0xfc00bcec>
 800bd68:	8cc00017 	ldw	r19,0(r17)
 800bd6c:	8c800117 	ldw	r18,4(r17)
 800bd70:	8c400204 	addi	r17,r17,8
 800bd74:	003fb306 	br	800bc44 <__alt_data_end+0xfc00bc44>
 800bd78:	0005883a 	mov	r2,zero
 800bd7c:	f800283a 	ret
 800bd80:	81000017 	ldw	r4,0(r16)
 800bd84:	80800417 	ldw	r2,16(r16)
 800bd88:	11005736 	bltu	r2,r4,800bee8 <__sfvwrite_r+0x314>
 800bd8c:	85c00517 	ldw	r23,20(r16)
 800bd90:	95c05536 	bltu	r18,r23,800bee8 <__sfvwrite_r+0x314>
 800bd94:	00a00034 	movhi	r2,32768
 800bd98:	10bfffc4 	addi	r2,r2,-1
 800bd9c:	9009883a 	mov	r4,r18
 800bda0:	1480012e 	bgeu	r2,r18,800bda8 <__sfvwrite_r+0x1d4>
 800bda4:	1009883a 	mov	r4,r2
 800bda8:	b80b883a 	mov	r5,r23
 800bdac:	80033980 	call	8003398 <__divsi3>
 800bdb0:	15cf383a 	mul	r7,r2,r23
 800bdb4:	81400717 	ldw	r5,28(r16)
 800bdb8:	80800917 	ldw	r2,36(r16)
 800bdbc:	e00d883a 	mov	r6,fp
 800bdc0:	a809883a 	mov	r4,r21
 800bdc4:	103ee83a 	callr	r2
 800bdc8:	00bfdb16 	blt	zero,r2,800bd38 <__alt_data_end+0xfc00bd38>
 800bdcc:	8080030b 	ldhu	r2,12(r16)
 800bdd0:	10801014 	ori	r2,r2,64
 800bdd4:	8080030d 	sth	r2,12(r16)
 800bdd8:	00bfffc4 	movi	r2,-1
 800bddc:	003fab06 	br	800bc8c <__alt_data_end+0xfc00bc8c>
 800bde0:	0027883a 	mov	r19,zero
 800bde4:	0011883a 	mov	r8,zero
 800bde8:	0039883a 	mov	fp,zero
 800bdec:	0025883a 	mov	r18,zero
 800bdf0:	90001f26 	beq	r18,zero,800be70 <__sfvwrite_r+0x29c>
 800bdf4:	40005a26 	beq	r8,zero,800bf60 <__sfvwrite_r+0x38c>
 800bdf8:	982d883a 	mov	r22,r19
 800bdfc:	94c0012e 	bgeu	r18,r19,800be04 <__sfvwrite_r+0x230>
 800be00:	902d883a 	mov	r22,r18
 800be04:	81000017 	ldw	r4,0(r16)
 800be08:	80800417 	ldw	r2,16(r16)
 800be0c:	b02f883a 	mov	r23,r22
 800be10:	81c00517 	ldw	r7,20(r16)
 800be14:	1100032e 	bgeu	r2,r4,800be24 <__sfvwrite_r+0x250>
 800be18:	80c00217 	ldw	r3,8(r16)
 800be1c:	38c7883a 	add	r3,r7,r3
 800be20:	1d801816 	blt	r3,r22,800be84 <__sfvwrite_r+0x2b0>
 800be24:	b1c03e16 	blt	r22,r7,800bf20 <__sfvwrite_r+0x34c>
 800be28:	80800917 	ldw	r2,36(r16)
 800be2c:	81400717 	ldw	r5,28(r16)
 800be30:	e00d883a 	mov	r6,fp
 800be34:	da000115 	stw	r8,4(sp)
 800be38:	a809883a 	mov	r4,r21
 800be3c:	103ee83a 	callr	r2
 800be40:	102f883a 	mov	r23,r2
 800be44:	da000117 	ldw	r8,4(sp)
 800be48:	00bfe00e 	bge	zero,r2,800bdcc <__alt_data_end+0xfc00bdcc>
 800be4c:	9de7c83a 	sub	r19,r19,r23
 800be50:	98001f26 	beq	r19,zero,800bed0 <__sfvwrite_r+0x2fc>
 800be54:	a0800217 	ldw	r2,8(r20)
 800be58:	e5f9883a 	add	fp,fp,r23
 800be5c:	95e5c83a 	sub	r18,r18,r23
 800be60:	15efc83a 	sub	r23,r2,r23
 800be64:	a5c00215 	stw	r23,8(r20)
 800be68:	b83f8726 	beq	r23,zero,800bc88 <__alt_data_end+0xfc00bc88>
 800be6c:	903fe11e 	bne	r18,zero,800bdf4 <__alt_data_end+0xfc00bdf4>
 800be70:	8f000017 	ldw	fp,0(r17)
 800be74:	8c800117 	ldw	r18,4(r17)
 800be78:	0011883a 	mov	r8,zero
 800be7c:	8c400204 	addi	r17,r17,8
 800be80:	003fdb06 	br	800bdf0 <__alt_data_end+0xfc00bdf0>
 800be84:	180d883a 	mov	r6,r3
 800be88:	e00b883a 	mov	r5,fp
 800be8c:	da000115 	stw	r8,4(sp)
 800be90:	d8c00015 	stw	r3,0(sp)
 800be94:	800cee80 	call	800cee8 <memmove>
 800be98:	d8c00017 	ldw	r3,0(sp)
 800be9c:	80800017 	ldw	r2,0(r16)
 800bea0:	800b883a 	mov	r5,r16
 800bea4:	a809883a 	mov	r4,r21
 800bea8:	10c5883a 	add	r2,r2,r3
 800beac:	80800015 	stw	r2,0(r16)
 800beb0:	d8c00015 	stw	r3,0(sp)
 800beb4:	800b3740 	call	800b374 <_fflush_r>
 800beb8:	d8c00017 	ldw	r3,0(sp)
 800bebc:	da000117 	ldw	r8,4(sp)
 800bec0:	103fc21e 	bne	r2,zero,800bdcc <__alt_data_end+0xfc00bdcc>
 800bec4:	182f883a 	mov	r23,r3
 800bec8:	9de7c83a 	sub	r19,r19,r23
 800becc:	983fe11e 	bne	r19,zero,800be54 <__alt_data_end+0xfc00be54>
 800bed0:	800b883a 	mov	r5,r16
 800bed4:	a809883a 	mov	r4,r21
 800bed8:	800b3740 	call	800b374 <_fflush_r>
 800bedc:	103fbb1e 	bne	r2,zero,800bdcc <__alt_data_end+0xfc00bdcc>
 800bee0:	0011883a 	mov	r8,zero
 800bee4:	003fdb06 	br	800be54 <__alt_data_end+0xfc00be54>
 800bee8:	94c0012e 	bgeu	r18,r19,800bef0 <__sfvwrite_r+0x31c>
 800beec:	9027883a 	mov	r19,r18
 800bef0:	980d883a 	mov	r6,r19
 800bef4:	e00b883a 	mov	r5,fp
 800bef8:	800cee80 	call	800cee8 <memmove>
 800befc:	80800217 	ldw	r2,8(r16)
 800bf00:	80c00017 	ldw	r3,0(r16)
 800bf04:	14c5c83a 	sub	r2,r2,r19
 800bf08:	1cc7883a 	add	r3,r3,r19
 800bf0c:	80800215 	stw	r2,8(r16)
 800bf10:	80c00015 	stw	r3,0(r16)
 800bf14:	10004326 	beq	r2,zero,800c024 <__sfvwrite_r+0x450>
 800bf18:	9805883a 	mov	r2,r19
 800bf1c:	003f8606 	br	800bd38 <__alt_data_end+0xfc00bd38>
 800bf20:	b00d883a 	mov	r6,r22
 800bf24:	e00b883a 	mov	r5,fp
 800bf28:	da000115 	stw	r8,4(sp)
 800bf2c:	800cee80 	call	800cee8 <memmove>
 800bf30:	80800217 	ldw	r2,8(r16)
 800bf34:	80c00017 	ldw	r3,0(r16)
 800bf38:	da000117 	ldw	r8,4(sp)
 800bf3c:	1585c83a 	sub	r2,r2,r22
 800bf40:	1dad883a 	add	r22,r3,r22
 800bf44:	80800215 	stw	r2,8(r16)
 800bf48:	85800015 	stw	r22,0(r16)
 800bf4c:	003fbf06 	br	800be4c <__alt_data_end+0xfc00be4c>
 800bf50:	81000017 	ldw	r4,0(r16)
 800bf54:	9027883a 	mov	r19,r18
 800bf58:	902f883a 	mov	r23,r18
 800bf5c:	003f6c06 	br	800bd10 <__alt_data_end+0xfc00bd10>
 800bf60:	900d883a 	mov	r6,r18
 800bf64:	01400284 	movi	r5,10
 800bf68:	e009883a 	mov	r4,fp
 800bf6c:	800ccbc0 	call	800ccbc <memchr>
 800bf70:	10003e26 	beq	r2,zero,800c06c <__sfvwrite_r+0x498>
 800bf74:	10800044 	addi	r2,r2,1
 800bf78:	1727c83a 	sub	r19,r2,fp
 800bf7c:	02000044 	movi	r8,1
 800bf80:	003f9d06 	br	800bdf8 <__alt_data_end+0xfc00bdf8>
 800bf84:	80800517 	ldw	r2,20(r16)
 800bf88:	81400417 	ldw	r5,16(r16)
 800bf8c:	81c00017 	ldw	r7,0(r16)
 800bf90:	10a7883a 	add	r19,r2,r2
 800bf94:	9885883a 	add	r2,r19,r2
 800bf98:	1026d7fa 	srli	r19,r2,31
 800bf9c:	396dc83a 	sub	r22,r7,r5
 800bfa0:	b1000044 	addi	r4,r22,1
 800bfa4:	9885883a 	add	r2,r19,r2
 800bfa8:	1027d07a 	srai	r19,r2,1
 800bfac:	2485883a 	add	r2,r4,r18
 800bfb0:	980d883a 	mov	r6,r19
 800bfb4:	9880022e 	bgeu	r19,r2,800bfc0 <__sfvwrite_r+0x3ec>
 800bfb8:	1027883a 	mov	r19,r2
 800bfbc:	100d883a 	mov	r6,r2
 800bfc0:	18c1000c 	andi	r3,r3,1024
 800bfc4:	18001c26 	beq	r3,zero,800c038 <__sfvwrite_r+0x464>
 800bfc8:	300b883a 	mov	r5,r6
 800bfcc:	a809883a 	mov	r4,r21
 800bfd0:	800c4b00 	call	800c4b0 <_malloc_r>
 800bfd4:	102f883a 	mov	r23,r2
 800bfd8:	10002926 	beq	r2,zero,800c080 <__sfvwrite_r+0x4ac>
 800bfdc:	81400417 	ldw	r5,16(r16)
 800bfe0:	b00d883a 	mov	r6,r22
 800bfe4:	1009883a 	mov	r4,r2
 800bfe8:	800cda00 	call	800cda0 <memcpy>
 800bfec:	8080030b 	ldhu	r2,12(r16)
 800bff0:	00fedfc4 	movi	r3,-1153
 800bff4:	10c4703a 	and	r2,r2,r3
 800bff8:	10802014 	ori	r2,r2,128
 800bffc:	8080030d 	sth	r2,12(r16)
 800c000:	bd89883a 	add	r4,r23,r22
 800c004:	9d8fc83a 	sub	r7,r19,r22
 800c008:	85c00415 	stw	r23,16(r16)
 800c00c:	84c00515 	stw	r19,20(r16)
 800c010:	81000015 	stw	r4,0(r16)
 800c014:	9027883a 	mov	r19,r18
 800c018:	81c00215 	stw	r7,8(r16)
 800c01c:	902f883a 	mov	r23,r18
 800c020:	003f3b06 	br	800bd10 <__alt_data_end+0xfc00bd10>
 800c024:	800b883a 	mov	r5,r16
 800c028:	a809883a 	mov	r4,r21
 800c02c:	800b3740 	call	800b374 <_fflush_r>
 800c030:	103fb926 	beq	r2,zero,800bf18 <__alt_data_end+0xfc00bf18>
 800c034:	003f6506 	br	800bdcc <__alt_data_end+0xfc00bdcc>
 800c038:	a809883a 	mov	r4,r21
 800c03c:	800e1680 	call	800e168 <_realloc_r>
 800c040:	102f883a 	mov	r23,r2
 800c044:	103fee1e 	bne	r2,zero,800c000 <__alt_data_end+0xfc00c000>
 800c048:	81400417 	ldw	r5,16(r16)
 800c04c:	a809883a 	mov	r4,r21
 800c050:	800b8c40 	call	800b8c4 <_free_r>
 800c054:	8080030b 	ldhu	r2,12(r16)
 800c058:	00ffdfc4 	movi	r3,-129
 800c05c:	1884703a 	and	r2,r3,r2
 800c060:	00c00304 	movi	r3,12
 800c064:	a8c00015 	stw	r3,0(r21)
 800c068:	003f5906 	br	800bdd0 <__alt_data_end+0xfc00bdd0>
 800c06c:	94c00044 	addi	r19,r18,1
 800c070:	02000044 	movi	r8,1
 800c074:	003f6006 	br	800bdf8 <__alt_data_end+0xfc00bdf8>
 800c078:	00bfffc4 	movi	r2,-1
 800c07c:	003f0306 	br	800bc8c <__alt_data_end+0xfc00bc8c>
 800c080:	00800304 	movi	r2,12
 800c084:	a8800015 	stw	r2,0(r21)
 800c088:	8080030b 	ldhu	r2,12(r16)
 800c08c:	003f5006 	br	800bdd0 <__alt_data_end+0xfc00bdd0>

0800c090 <_fwalk>:
 800c090:	defff704 	addi	sp,sp,-36
 800c094:	dd000415 	stw	r20,16(sp)
 800c098:	dfc00815 	stw	ra,32(sp)
 800c09c:	ddc00715 	stw	r23,28(sp)
 800c0a0:	dd800615 	stw	r22,24(sp)
 800c0a4:	dd400515 	stw	r21,20(sp)
 800c0a8:	dcc00315 	stw	r19,12(sp)
 800c0ac:	dc800215 	stw	r18,8(sp)
 800c0b0:	dc400115 	stw	r17,4(sp)
 800c0b4:	dc000015 	stw	r16,0(sp)
 800c0b8:	2500b804 	addi	r20,r4,736
 800c0bc:	a0002326 	beq	r20,zero,800c14c <_fwalk+0xbc>
 800c0c0:	282b883a 	mov	r21,r5
 800c0c4:	002f883a 	mov	r23,zero
 800c0c8:	05800044 	movi	r22,1
 800c0cc:	04ffffc4 	movi	r19,-1
 800c0d0:	a4400117 	ldw	r17,4(r20)
 800c0d4:	a4800217 	ldw	r18,8(r20)
 800c0d8:	8c7fffc4 	addi	r17,r17,-1
 800c0dc:	88000d16 	blt	r17,zero,800c114 <_fwalk+0x84>
 800c0e0:	94000304 	addi	r16,r18,12
 800c0e4:	94800384 	addi	r18,r18,14
 800c0e8:	8080000b 	ldhu	r2,0(r16)
 800c0ec:	8c7fffc4 	addi	r17,r17,-1
 800c0f0:	813ffd04 	addi	r4,r16,-12
 800c0f4:	b080042e 	bgeu	r22,r2,800c108 <_fwalk+0x78>
 800c0f8:	9080000f 	ldh	r2,0(r18)
 800c0fc:	14c00226 	beq	r2,r19,800c108 <_fwalk+0x78>
 800c100:	a83ee83a 	callr	r21
 800c104:	b8aeb03a 	or	r23,r23,r2
 800c108:	84001a04 	addi	r16,r16,104
 800c10c:	94801a04 	addi	r18,r18,104
 800c110:	8cfff51e 	bne	r17,r19,800c0e8 <__alt_data_end+0xfc00c0e8>
 800c114:	a5000017 	ldw	r20,0(r20)
 800c118:	a03fed1e 	bne	r20,zero,800c0d0 <__alt_data_end+0xfc00c0d0>
 800c11c:	b805883a 	mov	r2,r23
 800c120:	dfc00817 	ldw	ra,32(sp)
 800c124:	ddc00717 	ldw	r23,28(sp)
 800c128:	dd800617 	ldw	r22,24(sp)
 800c12c:	dd400517 	ldw	r21,20(sp)
 800c130:	dd000417 	ldw	r20,16(sp)
 800c134:	dcc00317 	ldw	r19,12(sp)
 800c138:	dc800217 	ldw	r18,8(sp)
 800c13c:	dc400117 	ldw	r17,4(sp)
 800c140:	dc000017 	ldw	r16,0(sp)
 800c144:	dec00904 	addi	sp,sp,36
 800c148:	f800283a 	ret
 800c14c:	002f883a 	mov	r23,zero
 800c150:	003ff206 	br	800c11c <__alt_data_end+0xfc00c11c>

0800c154 <_fwalk_reent>:
 800c154:	defff704 	addi	sp,sp,-36
 800c158:	dd000415 	stw	r20,16(sp)
 800c15c:	dfc00815 	stw	ra,32(sp)
 800c160:	ddc00715 	stw	r23,28(sp)
 800c164:	dd800615 	stw	r22,24(sp)
 800c168:	dd400515 	stw	r21,20(sp)
 800c16c:	dcc00315 	stw	r19,12(sp)
 800c170:	dc800215 	stw	r18,8(sp)
 800c174:	dc400115 	stw	r17,4(sp)
 800c178:	dc000015 	stw	r16,0(sp)
 800c17c:	2500b804 	addi	r20,r4,736
 800c180:	a0002326 	beq	r20,zero,800c210 <_fwalk_reent+0xbc>
 800c184:	282b883a 	mov	r21,r5
 800c188:	2027883a 	mov	r19,r4
 800c18c:	002f883a 	mov	r23,zero
 800c190:	05800044 	movi	r22,1
 800c194:	04bfffc4 	movi	r18,-1
 800c198:	a4400117 	ldw	r17,4(r20)
 800c19c:	a4000217 	ldw	r16,8(r20)
 800c1a0:	8c7fffc4 	addi	r17,r17,-1
 800c1a4:	88000c16 	blt	r17,zero,800c1d8 <_fwalk_reent+0x84>
 800c1a8:	84000304 	addi	r16,r16,12
 800c1ac:	8080000b 	ldhu	r2,0(r16)
 800c1b0:	8c7fffc4 	addi	r17,r17,-1
 800c1b4:	817ffd04 	addi	r5,r16,-12
 800c1b8:	b080052e 	bgeu	r22,r2,800c1d0 <_fwalk_reent+0x7c>
 800c1bc:	8080008f 	ldh	r2,2(r16)
 800c1c0:	9809883a 	mov	r4,r19
 800c1c4:	14800226 	beq	r2,r18,800c1d0 <_fwalk_reent+0x7c>
 800c1c8:	a83ee83a 	callr	r21
 800c1cc:	b8aeb03a 	or	r23,r23,r2
 800c1d0:	84001a04 	addi	r16,r16,104
 800c1d4:	8cbff51e 	bne	r17,r18,800c1ac <__alt_data_end+0xfc00c1ac>
 800c1d8:	a5000017 	ldw	r20,0(r20)
 800c1dc:	a03fee1e 	bne	r20,zero,800c198 <__alt_data_end+0xfc00c198>
 800c1e0:	b805883a 	mov	r2,r23
 800c1e4:	dfc00817 	ldw	ra,32(sp)
 800c1e8:	ddc00717 	ldw	r23,28(sp)
 800c1ec:	dd800617 	ldw	r22,24(sp)
 800c1f0:	dd400517 	ldw	r21,20(sp)
 800c1f4:	dd000417 	ldw	r20,16(sp)
 800c1f8:	dcc00317 	ldw	r19,12(sp)
 800c1fc:	dc800217 	ldw	r18,8(sp)
 800c200:	dc400117 	ldw	r17,4(sp)
 800c204:	dc000017 	ldw	r16,0(sp)
 800c208:	dec00904 	addi	sp,sp,36
 800c20c:	f800283a 	ret
 800c210:	002f883a 	mov	r23,zero
 800c214:	003ff206 	br	800c1e0 <__alt_data_end+0xfc00c1e0>

0800c218 <_setlocale_r>:
 800c218:	30001b26 	beq	r6,zero,800c288 <_setlocale_r+0x70>
 800c21c:	01420074 	movhi	r5,2049
 800c220:	defffe04 	addi	sp,sp,-8
 800c224:	29574104 	addi	r5,r5,23812
 800c228:	3009883a 	mov	r4,r6
 800c22c:	dc000015 	stw	r16,0(sp)
 800c230:	dfc00115 	stw	ra,4(sp)
 800c234:	3021883a 	mov	r16,r6
 800c238:	800e85c0 	call	800e85c <strcmp>
 800c23c:	1000061e 	bne	r2,zero,800c258 <_setlocale_r+0x40>
 800c240:	00820074 	movhi	r2,2049
 800c244:	10972204 	addi	r2,r2,23688
 800c248:	dfc00117 	ldw	ra,4(sp)
 800c24c:	dc000017 	ldw	r16,0(sp)
 800c250:	dec00204 	addi	sp,sp,8
 800c254:	f800283a 	ret
 800c258:	01420074 	movhi	r5,2049
 800c25c:	29572204 	addi	r5,r5,23688
 800c260:	8009883a 	mov	r4,r16
 800c264:	800e85c0 	call	800e85c <strcmp>
 800c268:	103ff526 	beq	r2,zero,800c240 <__alt_data_end+0xfc00c240>
 800c26c:	01420074 	movhi	r5,2049
 800c270:	29572c04 	addi	r5,r5,23728
 800c274:	8009883a 	mov	r4,r16
 800c278:	800e85c0 	call	800e85c <strcmp>
 800c27c:	103ff026 	beq	r2,zero,800c240 <__alt_data_end+0xfc00c240>
 800c280:	0005883a 	mov	r2,zero
 800c284:	003ff006 	br	800c248 <__alt_data_end+0xfc00c248>
 800c288:	00820074 	movhi	r2,2049
 800c28c:	10972204 	addi	r2,r2,23688
 800c290:	f800283a 	ret

0800c294 <__locale_charset>:
 800c294:	00820074 	movhi	r2,2049
 800c298:	1098d204 	addi	r2,r2,25416
 800c29c:	f800283a 	ret

0800c2a0 <__locale_mb_cur_max>:
 800c2a0:	00820074 	movhi	r2,2049
 800c2a4:	109eaf04 	addi	r2,r2,31420
 800c2a8:	10800017 	ldw	r2,0(r2)
 800c2ac:	f800283a 	ret

0800c2b0 <__locale_msgcharset>:
 800c2b0:	00820074 	movhi	r2,2049
 800c2b4:	1098ca04 	addi	r2,r2,25384
 800c2b8:	f800283a 	ret

0800c2bc <__locale_cjk_lang>:
 800c2bc:	0005883a 	mov	r2,zero
 800c2c0:	f800283a 	ret

0800c2c4 <_localeconv_r>:
 800c2c4:	00820074 	movhi	r2,2049
 800c2c8:	1098da04 	addi	r2,r2,25448
 800c2cc:	f800283a 	ret

0800c2d0 <setlocale>:
 800c2d0:	00820074 	movhi	r2,2049
 800c2d4:	109eae04 	addi	r2,r2,31416
 800c2d8:	280d883a 	mov	r6,r5
 800c2dc:	200b883a 	mov	r5,r4
 800c2e0:	11000017 	ldw	r4,0(r2)
 800c2e4:	800c2181 	jmpi	800c218 <_setlocale_r>

0800c2e8 <localeconv>:
 800c2e8:	00820074 	movhi	r2,2049
 800c2ec:	1098da04 	addi	r2,r2,25448
 800c2f0:	f800283a 	ret

0800c2f4 <__smakebuf_r>:
 800c2f4:	2880030b 	ldhu	r2,12(r5)
 800c2f8:	10c0008c 	andi	r3,r2,2
 800c2fc:	1800411e 	bne	r3,zero,800c404 <__smakebuf_r+0x110>
 800c300:	deffec04 	addi	sp,sp,-80
 800c304:	dc000f15 	stw	r16,60(sp)
 800c308:	2821883a 	mov	r16,r5
 800c30c:	2940038f 	ldh	r5,14(r5)
 800c310:	dc401015 	stw	r17,64(sp)
 800c314:	dfc01315 	stw	ra,76(sp)
 800c318:	dcc01215 	stw	r19,72(sp)
 800c31c:	dc801115 	stw	r18,68(sp)
 800c320:	2023883a 	mov	r17,r4
 800c324:	28001c16 	blt	r5,zero,800c398 <__smakebuf_r+0xa4>
 800c328:	d80d883a 	mov	r6,sp
 800c32c:	80104040 	call	8010404 <_fstat_r>
 800c330:	10001816 	blt	r2,zero,800c394 <__smakebuf_r+0xa0>
 800c334:	d8800117 	ldw	r2,4(sp)
 800c338:	00e00014 	movui	r3,32768
 800c33c:	10bc000c 	andi	r2,r2,61440
 800c340:	14c80020 	cmpeqi	r19,r2,8192
 800c344:	10c03726 	beq	r2,r3,800c424 <__smakebuf_r+0x130>
 800c348:	80c0030b 	ldhu	r3,12(r16)
 800c34c:	18c20014 	ori	r3,r3,2048
 800c350:	80c0030d 	sth	r3,12(r16)
 800c354:	00c80004 	movi	r3,8192
 800c358:	10c0521e 	bne	r2,r3,800c4a4 <__smakebuf_r+0x1b0>
 800c35c:	8140038f 	ldh	r5,14(r16)
 800c360:	8809883a 	mov	r4,r17
 800c364:	80104600 	call	8010460 <_isatty_r>
 800c368:	10004c26 	beq	r2,zero,800c49c <__smakebuf_r+0x1a8>
 800c36c:	8080030b 	ldhu	r2,12(r16)
 800c370:	80c010c4 	addi	r3,r16,67
 800c374:	80c00015 	stw	r3,0(r16)
 800c378:	10800054 	ori	r2,r2,1
 800c37c:	8080030d 	sth	r2,12(r16)
 800c380:	00800044 	movi	r2,1
 800c384:	80c00415 	stw	r3,16(r16)
 800c388:	80800515 	stw	r2,20(r16)
 800c38c:	04810004 	movi	r18,1024
 800c390:	00000706 	br	800c3b0 <__smakebuf_r+0xbc>
 800c394:	8080030b 	ldhu	r2,12(r16)
 800c398:	10c0200c 	andi	r3,r2,128
 800c39c:	18001f1e 	bne	r3,zero,800c41c <__smakebuf_r+0x128>
 800c3a0:	04810004 	movi	r18,1024
 800c3a4:	10820014 	ori	r2,r2,2048
 800c3a8:	8080030d 	sth	r2,12(r16)
 800c3ac:	0027883a 	mov	r19,zero
 800c3b0:	900b883a 	mov	r5,r18
 800c3b4:	8809883a 	mov	r4,r17
 800c3b8:	800c4b00 	call	800c4b0 <_malloc_r>
 800c3bc:	10002c26 	beq	r2,zero,800c470 <__smakebuf_r+0x17c>
 800c3c0:	80c0030b 	ldhu	r3,12(r16)
 800c3c4:	01020074 	movhi	r4,2049
 800c3c8:	212d0204 	addi	r4,r4,-19448
 800c3cc:	89000f15 	stw	r4,60(r17)
 800c3d0:	18c02014 	ori	r3,r3,128
 800c3d4:	80c0030d 	sth	r3,12(r16)
 800c3d8:	80800015 	stw	r2,0(r16)
 800c3dc:	80800415 	stw	r2,16(r16)
 800c3e0:	84800515 	stw	r18,20(r16)
 800c3e4:	98001a1e 	bne	r19,zero,800c450 <__smakebuf_r+0x15c>
 800c3e8:	dfc01317 	ldw	ra,76(sp)
 800c3ec:	dcc01217 	ldw	r19,72(sp)
 800c3f0:	dc801117 	ldw	r18,68(sp)
 800c3f4:	dc401017 	ldw	r17,64(sp)
 800c3f8:	dc000f17 	ldw	r16,60(sp)
 800c3fc:	dec01404 	addi	sp,sp,80
 800c400:	f800283a 	ret
 800c404:	288010c4 	addi	r2,r5,67
 800c408:	28800015 	stw	r2,0(r5)
 800c40c:	28800415 	stw	r2,16(r5)
 800c410:	00800044 	movi	r2,1
 800c414:	28800515 	stw	r2,20(r5)
 800c418:	f800283a 	ret
 800c41c:	04801004 	movi	r18,64
 800c420:	003fe006 	br	800c3a4 <__alt_data_end+0xfc00c3a4>
 800c424:	81000a17 	ldw	r4,40(r16)
 800c428:	00c20074 	movhi	r3,2049
 800c42c:	18f9fe04 	addi	r3,r3,-6152
 800c430:	20ffc51e 	bne	r4,r3,800c348 <__alt_data_end+0xfc00c348>
 800c434:	8080030b 	ldhu	r2,12(r16)
 800c438:	04810004 	movi	r18,1024
 800c43c:	84801315 	stw	r18,76(r16)
 800c440:	1484b03a 	or	r2,r2,r18
 800c444:	8080030d 	sth	r2,12(r16)
 800c448:	0027883a 	mov	r19,zero
 800c44c:	003fd806 	br	800c3b0 <__alt_data_end+0xfc00c3b0>
 800c450:	8140038f 	ldh	r5,14(r16)
 800c454:	8809883a 	mov	r4,r17
 800c458:	80104600 	call	8010460 <_isatty_r>
 800c45c:	103fe226 	beq	r2,zero,800c3e8 <__alt_data_end+0xfc00c3e8>
 800c460:	8080030b 	ldhu	r2,12(r16)
 800c464:	10800054 	ori	r2,r2,1
 800c468:	8080030d 	sth	r2,12(r16)
 800c46c:	003fde06 	br	800c3e8 <__alt_data_end+0xfc00c3e8>
 800c470:	8080030b 	ldhu	r2,12(r16)
 800c474:	10c0800c 	andi	r3,r2,512
 800c478:	183fdb1e 	bne	r3,zero,800c3e8 <__alt_data_end+0xfc00c3e8>
 800c47c:	10800094 	ori	r2,r2,2
 800c480:	80c010c4 	addi	r3,r16,67
 800c484:	8080030d 	sth	r2,12(r16)
 800c488:	00800044 	movi	r2,1
 800c48c:	80c00015 	stw	r3,0(r16)
 800c490:	80c00415 	stw	r3,16(r16)
 800c494:	80800515 	stw	r2,20(r16)
 800c498:	003fd306 	br	800c3e8 <__alt_data_end+0xfc00c3e8>
 800c49c:	04810004 	movi	r18,1024
 800c4a0:	003fc306 	br	800c3b0 <__alt_data_end+0xfc00c3b0>
 800c4a4:	0027883a 	mov	r19,zero
 800c4a8:	04810004 	movi	r18,1024
 800c4ac:	003fc006 	br	800c3b0 <__alt_data_end+0xfc00c3b0>

0800c4b0 <_malloc_r>:
 800c4b0:	defff504 	addi	sp,sp,-44
 800c4b4:	dc800315 	stw	r18,12(sp)
 800c4b8:	dfc00a15 	stw	ra,40(sp)
 800c4bc:	df000915 	stw	fp,36(sp)
 800c4c0:	ddc00815 	stw	r23,32(sp)
 800c4c4:	dd800715 	stw	r22,28(sp)
 800c4c8:	dd400615 	stw	r21,24(sp)
 800c4cc:	dd000515 	stw	r20,20(sp)
 800c4d0:	dcc00415 	stw	r19,16(sp)
 800c4d4:	dc400215 	stw	r17,8(sp)
 800c4d8:	dc000115 	stw	r16,4(sp)
 800c4dc:	288002c4 	addi	r2,r5,11
 800c4e0:	00c00584 	movi	r3,22
 800c4e4:	2025883a 	mov	r18,r4
 800c4e8:	18807f2e 	bgeu	r3,r2,800c6e8 <_malloc_r+0x238>
 800c4ec:	047ffe04 	movi	r17,-8
 800c4f0:	1462703a 	and	r17,r2,r17
 800c4f4:	8800a316 	blt	r17,zero,800c784 <_malloc_r+0x2d4>
 800c4f8:	8940a236 	bltu	r17,r5,800c784 <_malloc_r+0x2d4>
 800c4fc:	80119880 	call	8011988 <__malloc_lock>
 800c500:	00807dc4 	movi	r2,503
 800c504:	1441e92e 	bgeu	r2,r17,800ccac <_malloc_r+0x7fc>
 800c508:	8804d27a 	srli	r2,r17,9
 800c50c:	1000a126 	beq	r2,zero,800c794 <_malloc_r+0x2e4>
 800c510:	00c00104 	movi	r3,4
 800c514:	18811e36 	bltu	r3,r2,800c990 <_malloc_r+0x4e0>
 800c518:	8804d1ba 	srli	r2,r17,6
 800c51c:	12000e44 	addi	r8,r2,57
 800c520:	11c00e04 	addi	r7,r2,56
 800c524:	4209883a 	add	r4,r8,r8
 800c528:	04c20074 	movhi	r19,2049
 800c52c:	2109883a 	add	r4,r4,r4
 800c530:	9cd8e804 	addi	r19,r19,25504
 800c534:	2109883a 	add	r4,r4,r4
 800c538:	9909883a 	add	r4,r19,r4
 800c53c:	24000117 	ldw	r16,4(r4)
 800c540:	213ffe04 	addi	r4,r4,-8
 800c544:	24009726 	beq	r4,r16,800c7a4 <_malloc_r+0x2f4>
 800c548:	80800117 	ldw	r2,4(r16)
 800c54c:	01bfff04 	movi	r6,-4
 800c550:	014003c4 	movi	r5,15
 800c554:	1184703a 	and	r2,r2,r6
 800c558:	1447c83a 	sub	r3,r2,r17
 800c55c:	28c00716 	blt	r5,r3,800c57c <_malloc_r+0xcc>
 800c560:	1800920e 	bge	r3,zero,800c7ac <_malloc_r+0x2fc>
 800c564:	84000317 	ldw	r16,12(r16)
 800c568:	24008e26 	beq	r4,r16,800c7a4 <_malloc_r+0x2f4>
 800c56c:	80800117 	ldw	r2,4(r16)
 800c570:	1184703a 	and	r2,r2,r6
 800c574:	1447c83a 	sub	r3,r2,r17
 800c578:	28fff90e 	bge	r5,r3,800c560 <__alt_data_end+0xfc00c560>
 800c57c:	3809883a 	mov	r4,r7
 800c580:	01820074 	movhi	r6,2049
 800c584:	9c000417 	ldw	r16,16(r19)
 800c588:	3198e804 	addi	r6,r6,25504
 800c58c:	32000204 	addi	r8,r6,8
 800c590:	82013426 	beq	r16,r8,800ca64 <_malloc_r+0x5b4>
 800c594:	80c00117 	ldw	r3,4(r16)
 800c598:	00bfff04 	movi	r2,-4
 800c59c:	188e703a 	and	r7,r3,r2
 800c5a0:	3c45c83a 	sub	r2,r7,r17
 800c5a4:	00c003c4 	movi	r3,15
 800c5a8:	18811f16 	blt	r3,r2,800ca28 <_malloc_r+0x578>
 800c5ac:	32000515 	stw	r8,20(r6)
 800c5b0:	32000415 	stw	r8,16(r6)
 800c5b4:	10007f0e 	bge	r2,zero,800c7b4 <_malloc_r+0x304>
 800c5b8:	00807fc4 	movi	r2,511
 800c5bc:	11c0fd36 	bltu	r2,r7,800c9b4 <_malloc_r+0x504>
 800c5c0:	3806d0fa 	srli	r3,r7,3
 800c5c4:	01c00044 	movi	r7,1
 800c5c8:	30800117 	ldw	r2,4(r6)
 800c5cc:	19400044 	addi	r5,r3,1
 800c5d0:	294b883a 	add	r5,r5,r5
 800c5d4:	1807d0ba 	srai	r3,r3,2
 800c5d8:	294b883a 	add	r5,r5,r5
 800c5dc:	294b883a 	add	r5,r5,r5
 800c5e0:	298b883a 	add	r5,r5,r6
 800c5e4:	38c6983a 	sll	r3,r7,r3
 800c5e8:	29c00017 	ldw	r7,0(r5)
 800c5ec:	2a7ffe04 	addi	r9,r5,-8
 800c5f0:	1886b03a 	or	r3,r3,r2
 800c5f4:	82400315 	stw	r9,12(r16)
 800c5f8:	81c00215 	stw	r7,8(r16)
 800c5fc:	30c00115 	stw	r3,4(r6)
 800c600:	2c000015 	stw	r16,0(r5)
 800c604:	3c000315 	stw	r16,12(r7)
 800c608:	2005d0ba 	srai	r2,r4,2
 800c60c:	01400044 	movi	r5,1
 800c610:	288a983a 	sll	r5,r5,r2
 800c614:	19406f36 	bltu	r3,r5,800c7d4 <_malloc_r+0x324>
 800c618:	28c4703a 	and	r2,r5,r3
 800c61c:	10000a1e 	bne	r2,zero,800c648 <_malloc_r+0x198>
 800c620:	00bfff04 	movi	r2,-4
 800c624:	294b883a 	add	r5,r5,r5
 800c628:	2088703a 	and	r4,r4,r2
 800c62c:	28c4703a 	and	r2,r5,r3
 800c630:	21000104 	addi	r4,r4,4
 800c634:	1000041e 	bne	r2,zero,800c648 <_malloc_r+0x198>
 800c638:	294b883a 	add	r5,r5,r5
 800c63c:	28c4703a 	and	r2,r5,r3
 800c640:	21000104 	addi	r4,r4,4
 800c644:	103ffc26 	beq	r2,zero,800c638 <__alt_data_end+0xfc00c638>
 800c648:	02bfff04 	movi	r10,-4
 800c64c:	024003c4 	movi	r9,15
 800c650:	21800044 	addi	r6,r4,1
 800c654:	318d883a 	add	r6,r6,r6
 800c658:	318d883a 	add	r6,r6,r6
 800c65c:	318d883a 	add	r6,r6,r6
 800c660:	998d883a 	add	r6,r19,r6
 800c664:	333ffe04 	addi	r12,r6,-8
 800c668:	2017883a 	mov	r11,r4
 800c66c:	31800104 	addi	r6,r6,4
 800c670:	34000017 	ldw	r16,0(r6)
 800c674:	31fffd04 	addi	r7,r6,-12
 800c678:	81c0041e 	bne	r16,r7,800c68c <_malloc_r+0x1dc>
 800c67c:	0000fb06 	br	800ca6c <_malloc_r+0x5bc>
 800c680:	1801030e 	bge	r3,zero,800ca90 <_malloc_r+0x5e0>
 800c684:	84000317 	ldw	r16,12(r16)
 800c688:	81c0f826 	beq	r16,r7,800ca6c <_malloc_r+0x5bc>
 800c68c:	80800117 	ldw	r2,4(r16)
 800c690:	1284703a 	and	r2,r2,r10
 800c694:	1447c83a 	sub	r3,r2,r17
 800c698:	48fff90e 	bge	r9,r3,800c680 <__alt_data_end+0xfc00c680>
 800c69c:	80800317 	ldw	r2,12(r16)
 800c6a0:	81000217 	ldw	r4,8(r16)
 800c6a4:	89400054 	ori	r5,r17,1
 800c6a8:	81400115 	stw	r5,4(r16)
 800c6ac:	20800315 	stw	r2,12(r4)
 800c6b0:	11000215 	stw	r4,8(r2)
 800c6b4:	8463883a 	add	r17,r16,r17
 800c6b8:	9c400515 	stw	r17,20(r19)
 800c6bc:	9c400415 	stw	r17,16(r19)
 800c6c0:	18800054 	ori	r2,r3,1
 800c6c4:	88800115 	stw	r2,4(r17)
 800c6c8:	8a000315 	stw	r8,12(r17)
 800c6cc:	8a000215 	stw	r8,8(r17)
 800c6d0:	88e3883a 	add	r17,r17,r3
 800c6d4:	88c00015 	stw	r3,0(r17)
 800c6d8:	9009883a 	mov	r4,r18
 800c6dc:	80119ac0 	call	80119ac <__malloc_unlock>
 800c6e0:	80800204 	addi	r2,r16,8
 800c6e4:	00001b06 	br	800c754 <_malloc_r+0x2a4>
 800c6e8:	04400404 	movi	r17,16
 800c6ec:	89402536 	bltu	r17,r5,800c784 <_malloc_r+0x2d4>
 800c6f0:	80119880 	call	8011988 <__malloc_lock>
 800c6f4:	00800184 	movi	r2,6
 800c6f8:	01000084 	movi	r4,2
 800c6fc:	04c20074 	movhi	r19,2049
 800c700:	1085883a 	add	r2,r2,r2
 800c704:	9cd8e804 	addi	r19,r19,25504
 800c708:	1085883a 	add	r2,r2,r2
 800c70c:	9885883a 	add	r2,r19,r2
 800c710:	14000117 	ldw	r16,4(r2)
 800c714:	10fffe04 	addi	r3,r2,-8
 800c718:	80c0d926 	beq	r16,r3,800ca80 <_malloc_r+0x5d0>
 800c71c:	80c00117 	ldw	r3,4(r16)
 800c720:	81000317 	ldw	r4,12(r16)
 800c724:	00bfff04 	movi	r2,-4
 800c728:	1884703a 	and	r2,r3,r2
 800c72c:	81400217 	ldw	r5,8(r16)
 800c730:	8085883a 	add	r2,r16,r2
 800c734:	10c00117 	ldw	r3,4(r2)
 800c738:	29000315 	stw	r4,12(r5)
 800c73c:	21400215 	stw	r5,8(r4)
 800c740:	18c00054 	ori	r3,r3,1
 800c744:	10c00115 	stw	r3,4(r2)
 800c748:	9009883a 	mov	r4,r18
 800c74c:	80119ac0 	call	80119ac <__malloc_unlock>
 800c750:	80800204 	addi	r2,r16,8
 800c754:	dfc00a17 	ldw	ra,40(sp)
 800c758:	df000917 	ldw	fp,36(sp)
 800c75c:	ddc00817 	ldw	r23,32(sp)
 800c760:	dd800717 	ldw	r22,28(sp)
 800c764:	dd400617 	ldw	r21,24(sp)
 800c768:	dd000517 	ldw	r20,20(sp)
 800c76c:	dcc00417 	ldw	r19,16(sp)
 800c770:	dc800317 	ldw	r18,12(sp)
 800c774:	dc400217 	ldw	r17,8(sp)
 800c778:	dc000117 	ldw	r16,4(sp)
 800c77c:	dec00b04 	addi	sp,sp,44
 800c780:	f800283a 	ret
 800c784:	00800304 	movi	r2,12
 800c788:	90800015 	stw	r2,0(r18)
 800c78c:	0005883a 	mov	r2,zero
 800c790:	003ff006 	br	800c754 <__alt_data_end+0xfc00c754>
 800c794:	01002004 	movi	r4,128
 800c798:	02001004 	movi	r8,64
 800c79c:	01c00fc4 	movi	r7,63
 800c7a0:	003f6106 	br	800c528 <__alt_data_end+0xfc00c528>
 800c7a4:	4009883a 	mov	r4,r8
 800c7a8:	003f7506 	br	800c580 <__alt_data_end+0xfc00c580>
 800c7ac:	81000317 	ldw	r4,12(r16)
 800c7b0:	003fde06 	br	800c72c <__alt_data_end+0xfc00c72c>
 800c7b4:	81c5883a 	add	r2,r16,r7
 800c7b8:	11400117 	ldw	r5,4(r2)
 800c7bc:	9009883a 	mov	r4,r18
 800c7c0:	29400054 	ori	r5,r5,1
 800c7c4:	11400115 	stw	r5,4(r2)
 800c7c8:	80119ac0 	call	80119ac <__malloc_unlock>
 800c7cc:	80800204 	addi	r2,r16,8
 800c7d0:	003fe006 	br	800c754 <__alt_data_end+0xfc00c754>
 800c7d4:	9c000217 	ldw	r16,8(r19)
 800c7d8:	00bfff04 	movi	r2,-4
 800c7dc:	85800117 	ldw	r22,4(r16)
 800c7e0:	b0ac703a 	and	r22,r22,r2
 800c7e4:	b4400336 	bltu	r22,r17,800c7f4 <_malloc_r+0x344>
 800c7e8:	b445c83a 	sub	r2,r22,r17
 800c7ec:	00c003c4 	movi	r3,15
 800c7f0:	18805d16 	blt	r3,r2,800c968 <_malloc_r+0x4b8>
 800c7f4:	05c20074 	movhi	r23,2049
 800c7f8:	008200b4 	movhi	r2,2050
 800c7fc:	10a5c904 	addi	r2,r2,-26844
 800c800:	bddeb004 	addi	r23,r23,31424
 800c804:	15400017 	ldw	r21,0(r2)
 800c808:	b8c00017 	ldw	r3,0(r23)
 800c80c:	00bfffc4 	movi	r2,-1
 800c810:	858d883a 	add	r6,r16,r22
 800c814:	8d6b883a 	add	r21,r17,r21
 800c818:	1880ea26 	beq	r3,r2,800cbc4 <_malloc_r+0x714>
 800c81c:	ad4403c4 	addi	r21,r21,4111
 800c820:	00bc0004 	movi	r2,-4096
 800c824:	a8aa703a 	and	r21,r21,r2
 800c828:	a80b883a 	mov	r5,r21
 800c82c:	9009883a 	mov	r4,r18
 800c830:	d9800015 	stw	r6,0(sp)
 800c834:	800e6cc0 	call	800e6cc <_sbrk_r>
 800c838:	1029883a 	mov	r20,r2
 800c83c:	00bfffc4 	movi	r2,-1
 800c840:	d9800017 	ldw	r6,0(sp)
 800c844:	a080e826 	beq	r20,r2,800cbe8 <_malloc_r+0x738>
 800c848:	a180a636 	bltu	r20,r6,800cae4 <_malloc_r+0x634>
 800c84c:	070200b4 	movhi	fp,2050
 800c850:	e725d204 	addi	fp,fp,-26808
 800c854:	e0800017 	ldw	r2,0(fp)
 800c858:	a887883a 	add	r3,r21,r2
 800c85c:	e0c00015 	stw	r3,0(fp)
 800c860:	3500e626 	beq	r6,r20,800cbfc <_malloc_r+0x74c>
 800c864:	b9000017 	ldw	r4,0(r23)
 800c868:	00bfffc4 	movi	r2,-1
 800c86c:	2080ee26 	beq	r4,r2,800cc28 <_malloc_r+0x778>
 800c870:	a185c83a 	sub	r2,r20,r6
 800c874:	10c5883a 	add	r2,r2,r3
 800c878:	e0800015 	stw	r2,0(fp)
 800c87c:	a0c001cc 	andi	r3,r20,7
 800c880:	1800bc26 	beq	r3,zero,800cb74 <_malloc_r+0x6c4>
 800c884:	a0e9c83a 	sub	r20,r20,r3
 800c888:	00840204 	movi	r2,4104
 800c88c:	a5000204 	addi	r20,r20,8
 800c890:	10c7c83a 	sub	r3,r2,r3
 800c894:	a545883a 	add	r2,r20,r21
 800c898:	1083ffcc 	andi	r2,r2,4095
 800c89c:	18abc83a 	sub	r21,r3,r2
 800c8a0:	a80b883a 	mov	r5,r21
 800c8a4:	9009883a 	mov	r4,r18
 800c8a8:	800e6cc0 	call	800e6cc <_sbrk_r>
 800c8ac:	00ffffc4 	movi	r3,-1
 800c8b0:	10c0e126 	beq	r2,r3,800cc38 <_malloc_r+0x788>
 800c8b4:	1505c83a 	sub	r2,r2,r20
 800c8b8:	1545883a 	add	r2,r2,r21
 800c8bc:	10800054 	ori	r2,r2,1
 800c8c0:	e0c00017 	ldw	r3,0(fp)
 800c8c4:	9d000215 	stw	r20,8(r19)
 800c8c8:	a0800115 	stw	r2,4(r20)
 800c8cc:	a8c7883a 	add	r3,r21,r3
 800c8d0:	e0c00015 	stw	r3,0(fp)
 800c8d4:	84c00e26 	beq	r16,r19,800c910 <_malloc_r+0x460>
 800c8d8:	018003c4 	movi	r6,15
 800c8dc:	3580a72e 	bgeu	r6,r22,800cb7c <_malloc_r+0x6cc>
 800c8e0:	81400117 	ldw	r5,4(r16)
 800c8e4:	013ffe04 	movi	r4,-8
 800c8e8:	b0bffd04 	addi	r2,r22,-12
 800c8ec:	1104703a 	and	r2,r2,r4
 800c8f0:	2900004c 	andi	r4,r5,1
 800c8f4:	2088b03a 	or	r4,r4,r2
 800c8f8:	81000115 	stw	r4,4(r16)
 800c8fc:	01400144 	movi	r5,5
 800c900:	8089883a 	add	r4,r16,r2
 800c904:	21400115 	stw	r5,4(r4)
 800c908:	21400215 	stw	r5,8(r4)
 800c90c:	3080cd36 	bltu	r6,r2,800cc44 <_malloc_r+0x794>
 800c910:	008200b4 	movhi	r2,2050
 800c914:	10a5c804 	addi	r2,r2,-26848
 800c918:	11000017 	ldw	r4,0(r2)
 800c91c:	20c0012e 	bgeu	r4,r3,800c924 <_malloc_r+0x474>
 800c920:	10c00015 	stw	r3,0(r2)
 800c924:	008200b4 	movhi	r2,2050
 800c928:	10a5c704 	addi	r2,r2,-26852
 800c92c:	11000017 	ldw	r4,0(r2)
 800c930:	9c000217 	ldw	r16,8(r19)
 800c934:	20c0012e 	bgeu	r4,r3,800c93c <_malloc_r+0x48c>
 800c938:	10c00015 	stw	r3,0(r2)
 800c93c:	80c00117 	ldw	r3,4(r16)
 800c940:	00bfff04 	movi	r2,-4
 800c944:	1886703a 	and	r3,r3,r2
 800c948:	1c45c83a 	sub	r2,r3,r17
 800c94c:	1c400236 	bltu	r3,r17,800c958 <_malloc_r+0x4a8>
 800c950:	00c003c4 	movi	r3,15
 800c954:	18800416 	blt	r3,r2,800c968 <_malloc_r+0x4b8>
 800c958:	9009883a 	mov	r4,r18
 800c95c:	80119ac0 	call	80119ac <__malloc_unlock>
 800c960:	0005883a 	mov	r2,zero
 800c964:	003f7b06 	br	800c754 <__alt_data_end+0xfc00c754>
 800c968:	88c00054 	ori	r3,r17,1
 800c96c:	80c00115 	stw	r3,4(r16)
 800c970:	8463883a 	add	r17,r16,r17
 800c974:	10800054 	ori	r2,r2,1
 800c978:	9c400215 	stw	r17,8(r19)
 800c97c:	88800115 	stw	r2,4(r17)
 800c980:	9009883a 	mov	r4,r18
 800c984:	80119ac0 	call	80119ac <__malloc_unlock>
 800c988:	80800204 	addi	r2,r16,8
 800c98c:	003f7106 	br	800c754 <__alt_data_end+0xfc00c754>
 800c990:	00c00504 	movi	r3,20
 800c994:	18804a2e 	bgeu	r3,r2,800cac0 <_malloc_r+0x610>
 800c998:	00c01504 	movi	r3,84
 800c99c:	18806e36 	bltu	r3,r2,800cb58 <_malloc_r+0x6a8>
 800c9a0:	8804d33a 	srli	r2,r17,12
 800c9a4:	12001bc4 	addi	r8,r2,111
 800c9a8:	11c01b84 	addi	r7,r2,110
 800c9ac:	4209883a 	add	r4,r8,r8
 800c9b0:	003edd06 	br	800c528 <__alt_data_end+0xfc00c528>
 800c9b4:	3804d27a 	srli	r2,r7,9
 800c9b8:	00c00104 	movi	r3,4
 800c9bc:	1880442e 	bgeu	r3,r2,800cad0 <_malloc_r+0x620>
 800c9c0:	00c00504 	movi	r3,20
 800c9c4:	18808136 	bltu	r3,r2,800cbcc <_malloc_r+0x71c>
 800c9c8:	11401704 	addi	r5,r2,92
 800c9cc:	10c016c4 	addi	r3,r2,91
 800c9d0:	294b883a 	add	r5,r5,r5
 800c9d4:	294b883a 	add	r5,r5,r5
 800c9d8:	294b883a 	add	r5,r5,r5
 800c9dc:	994b883a 	add	r5,r19,r5
 800c9e0:	28800017 	ldw	r2,0(r5)
 800c9e4:	01820074 	movhi	r6,2049
 800c9e8:	297ffe04 	addi	r5,r5,-8
 800c9ec:	3198e804 	addi	r6,r6,25504
 800c9f0:	28806526 	beq	r5,r2,800cb88 <_malloc_r+0x6d8>
 800c9f4:	01bfff04 	movi	r6,-4
 800c9f8:	10c00117 	ldw	r3,4(r2)
 800c9fc:	1986703a 	and	r3,r3,r6
 800ca00:	38c0022e 	bgeu	r7,r3,800ca0c <_malloc_r+0x55c>
 800ca04:	10800217 	ldw	r2,8(r2)
 800ca08:	28bffb1e 	bne	r5,r2,800c9f8 <__alt_data_end+0xfc00c9f8>
 800ca0c:	11400317 	ldw	r5,12(r2)
 800ca10:	98c00117 	ldw	r3,4(r19)
 800ca14:	81400315 	stw	r5,12(r16)
 800ca18:	80800215 	stw	r2,8(r16)
 800ca1c:	2c000215 	stw	r16,8(r5)
 800ca20:	14000315 	stw	r16,12(r2)
 800ca24:	003ef806 	br	800c608 <__alt_data_end+0xfc00c608>
 800ca28:	88c00054 	ori	r3,r17,1
 800ca2c:	80c00115 	stw	r3,4(r16)
 800ca30:	8463883a 	add	r17,r16,r17
 800ca34:	34400515 	stw	r17,20(r6)
 800ca38:	34400415 	stw	r17,16(r6)
 800ca3c:	10c00054 	ori	r3,r2,1
 800ca40:	8a000315 	stw	r8,12(r17)
 800ca44:	8a000215 	stw	r8,8(r17)
 800ca48:	88c00115 	stw	r3,4(r17)
 800ca4c:	88a3883a 	add	r17,r17,r2
 800ca50:	88800015 	stw	r2,0(r17)
 800ca54:	9009883a 	mov	r4,r18
 800ca58:	80119ac0 	call	80119ac <__malloc_unlock>
 800ca5c:	80800204 	addi	r2,r16,8
 800ca60:	003f3c06 	br	800c754 <__alt_data_end+0xfc00c754>
 800ca64:	30c00117 	ldw	r3,4(r6)
 800ca68:	003ee706 	br	800c608 <__alt_data_end+0xfc00c608>
 800ca6c:	5ac00044 	addi	r11,r11,1
 800ca70:	588000cc 	andi	r2,r11,3
 800ca74:	31800204 	addi	r6,r6,8
 800ca78:	103efd1e 	bne	r2,zero,800c670 <__alt_data_end+0xfc00c670>
 800ca7c:	00002406 	br	800cb10 <_malloc_r+0x660>
 800ca80:	14000317 	ldw	r16,12(r2)
 800ca84:	143f251e 	bne	r2,r16,800c71c <__alt_data_end+0xfc00c71c>
 800ca88:	21000084 	addi	r4,r4,2
 800ca8c:	003ebc06 	br	800c580 <__alt_data_end+0xfc00c580>
 800ca90:	8085883a 	add	r2,r16,r2
 800ca94:	10c00117 	ldw	r3,4(r2)
 800ca98:	81000317 	ldw	r4,12(r16)
 800ca9c:	81400217 	ldw	r5,8(r16)
 800caa0:	18c00054 	ori	r3,r3,1
 800caa4:	10c00115 	stw	r3,4(r2)
 800caa8:	29000315 	stw	r4,12(r5)
 800caac:	21400215 	stw	r5,8(r4)
 800cab0:	9009883a 	mov	r4,r18
 800cab4:	80119ac0 	call	80119ac <__malloc_unlock>
 800cab8:	80800204 	addi	r2,r16,8
 800cabc:	003f2506 	br	800c754 <__alt_data_end+0xfc00c754>
 800cac0:	12001704 	addi	r8,r2,92
 800cac4:	11c016c4 	addi	r7,r2,91
 800cac8:	4209883a 	add	r4,r8,r8
 800cacc:	003e9606 	br	800c528 <__alt_data_end+0xfc00c528>
 800cad0:	3804d1ba 	srli	r2,r7,6
 800cad4:	11400e44 	addi	r5,r2,57
 800cad8:	10c00e04 	addi	r3,r2,56
 800cadc:	294b883a 	add	r5,r5,r5
 800cae0:	003fbc06 	br	800c9d4 <__alt_data_end+0xfc00c9d4>
 800cae4:	84ff5926 	beq	r16,r19,800c84c <__alt_data_end+0xfc00c84c>
 800cae8:	00820074 	movhi	r2,2049
 800caec:	1098e804 	addi	r2,r2,25504
 800caf0:	14000217 	ldw	r16,8(r2)
 800caf4:	00bfff04 	movi	r2,-4
 800caf8:	80c00117 	ldw	r3,4(r16)
 800cafc:	1886703a 	and	r3,r3,r2
 800cb00:	003f9106 	br	800c948 <__alt_data_end+0xfc00c948>
 800cb04:	60800217 	ldw	r2,8(r12)
 800cb08:	213fffc4 	addi	r4,r4,-1
 800cb0c:	1300651e 	bne	r2,r12,800cca4 <_malloc_r+0x7f4>
 800cb10:	208000cc 	andi	r2,r4,3
 800cb14:	633ffe04 	addi	r12,r12,-8
 800cb18:	103ffa1e 	bne	r2,zero,800cb04 <__alt_data_end+0xfc00cb04>
 800cb1c:	98800117 	ldw	r2,4(r19)
 800cb20:	0146303a 	nor	r3,zero,r5
 800cb24:	1884703a 	and	r2,r3,r2
 800cb28:	98800115 	stw	r2,4(r19)
 800cb2c:	294b883a 	add	r5,r5,r5
 800cb30:	117f2836 	bltu	r2,r5,800c7d4 <__alt_data_end+0xfc00c7d4>
 800cb34:	283f2726 	beq	r5,zero,800c7d4 <__alt_data_end+0xfc00c7d4>
 800cb38:	2886703a 	and	r3,r5,r2
 800cb3c:	5809883a 	mov	r4,r11
 800cb40:	183ec31e 	bne	r3,zero,800c650 <__alt_data_end+0xfc00c650>
 800cb44:	294b883a 	add	r5,r5,r5
 800cb48:	2886703a 	and	r3,r5,r2
 800cb4c:	21000104 	addi	r4,r4,4
 800cb50:	183ffc26 	beq	r3,zero,800cb44 <__alt_data_end+0xfc00cb44>
 800cb54:	003ebe06 	br	800c650 <__alt_data_end+0xfc00c650>
 800cb58:	00c05504 	movi	r3,340
 800cb5c:	18801236 	bltu	r3,r2,800cba8 <_malloc_r+0x6f8>
 800cb60:	8804d3fa 	srli	r2,r17,15
 800cb64:	12001e04 	addi	r8,r2,120
 800cb68:	11c01dc4 	addi	r7,r2,119
 800cb6c:	4209883a 	add	r4,r8,r8
 800cb70:	003e6d06 	br	800c528 <__alt_data_end+0xfc00c528>
 800cb74:	00c40004 	movi	r3,4096
 800cb78:	003f4606 	br	800c894 <__alt_data_end+0xfc00c894>
 800cb7c:	00800044 	movi	r2,1
 800cb80:	a0800115 	stw	r2,4(r20)
 800cb84:	003f7406 	br	800c958 <__alt_data_end+0xfc00c958>
 800cb88:	1805d0ba 	srai	r2,r3,2
 800cb8c:	01c00044 	movi	r7,1
 800cb90:	30c00117 	ldw	r3,4(r6)
 800cb94:	388e983a 	sll	r7,r7,r2
 800cb98:	2805883a 	mov	r2,r5
 800cb9c:	38c6b03a 	or	r3,r7,r3
 800cba0:	30c00115 	stw	r3,4(r6)
 800cba4:	003f9b06 	br	800ca14 <__alt_data_end+0xfc00ca14>
 800cba8:	00c15504 	movi	r3,1364
 800cbac:	18801a36 	bltu	r3,r2,800cc18 <_malloc_r+0x768>
 800cbb0:	8804d4ba 	srli	r2,r17,18
 800cbb4:	12001f44 	addi	r8,r2,125
 800cbb8:	11c01f04 	addi	r7,r2,124
 800cbbc:	4209883a 	add	r4,r8,r8
 800cbc0:	003e5906 	br	800c528 <__alt_data_end+0xfc00c528>
 800cbc4:	ad400404 	addi	r21,r21,16
 800cbc8:	003f1706 	br	800c828 <__alt_data_end+0xfc00c828>
 800cbcc:	00c01504 	movi	r3,84
 800cbd0:	18802336 	bltu	r3,r2,800cc60 <_malloc_r+0x7b0>
 800cbd4:	3804d33a 	srli	r2,r7,12
 800cbd8:	11401bc4 	addi	r5,r2,111
 800cbdc:	10c01b84 	addi	r3,r2,110
 800cbe0:	294b883a 	add	r5,r5,r5
 800cbe4:	003f7b06 	br	800c9d4 <__alt_data_end+0xfc00c9d4>
 800cbe8:	9c000217 	ldw	r16,8(r19)
 800cbec:	00bfff04 	movi	r2,-4
 800cbf0:	80c00117 	ldw	r3,4(r16)
 800cbf4:	1886703a 	and	r3,r3,r2
 800cbf8:	003f5306 	br	800c948 <__alt_data_end+0xfc00c948>
 800cbfc:	3083ffcc 	andi	r2,r6,4095
 800cc00:	103f181e 	bne	r2,zero,800c864 <__alt_data_end+0xfc00c864>
 800cc04:	99000217 	ldw	r4,8(r19)
 800cc08:	b545883a 	add	r2,r22,r21
 800cc0c:	10800054 	ori	r2,r2,1
 800cc10:	20800115 	stw	r2,4(r4)
 800cc14:	003f3e06 	br	800c910 <__alt_data_end+0xfc00c910>
 800cc18:	01003f84 	movi	r4,254
 800cc1c:	02001fc4 	movi	r8,127
 800cc20:	01c01f84 	movi	r7,126
 800cc24:	003e4006 	br	800c528 <__alt_data_end+0xfc00c528>
 800cc28:	00820074 	movhi	r2,2049
 800cc2c:	109eb004 	addi	r2,r2,31424
 800cc30:	15000015 	stw	r20,0(r2)
 800cc34:	003f1106 	br	800c87c <__alt_data_end+0xfc00c87c>
 800cc38:	00800044 	movi	r2,1
 800cc3c:	002b883a 	mov	r21,zero
 800cc40:	003f1f06 	br	800c8c0 <__alt_data_end+0xfc00c8c0>
 800cc44:	81400204 	addi	r5,r16,8
 800cc48:	9009883a 	mov	r4,r18
 800cc4c:	800b8c40 	call	800b8c4 <_free_r>
 800cc50:	008200b4 	movhi	r2,2050
 800cc54:	10a5d204 	addi	r2,r2,-26808
 800cc58:	10c00017 	ldw	r3,0(r2)
 800cc5c:	003f2c06 	br	800c910 <__alt_data_end+0xfc00c910>
 800cc60:	00c05504 	movi	r3,340
 800cc64:	18800536 	bltu	r3,r2,800cc7c <_malloc_r+0x7cc>
 800cc68:	3804d3fa 	srli	r2,r7,15
 800cc6c:	11401e04 	addi	r5,r2,120
 800cc70:	10c01dc4 	addi	r3,r2,119
 800cc74:	294b883a 	add	r5,r5,r5
 800cc78:	003f5606 	br	800c9d4 <__alt_data_end+0xfc00c9d4>
 800cc7c:	00c15504 	movi	r3,1364
 800cc80:	18800536 	bltu	r3,r2,800cc98 <_malloc_r+0x7e8>
 800cc84:	3804d4ba 	srli	r2,r7,18
 800cc88:	11401f44 	addi	r5,r2,125
 800cc8c:	10c01f04 	addi	r3,r2,124
 800cc90:	294b883a 	add	r5,r5,r5
 800cc94:	003f4f06 	br	800c9d4 <__alt_data_end+0xfc00c9d4>
 800cc98:	01403f84 	movi	r5,254
 800cc9c:	00c01f84 	movi	r3,126
 800cca0:	003f4c06 	br	800c9d4 <__alt_data_end+0xfc00c9d4>
 800cca4:	98800117 	ldw	r2,4(r19)
 800cca8:	003fa006 	br	800cb2c <__alt_data_end+0xfc00cb2c>
 800ccac:	8808d0fa 	srli	r4,r17,3
 800ccb0:	20800044 	addi	r2,r4,1
 800ccb4:	1085883a 	add	r2,r2,r2
 800ccb8:	003e9006 	br	800c6fc <__alt_data_end+0xfc00c6fc>

0800ccbc <memchr>:
 800ccbc:	208000cc 	andi	r2,r4,3
 800ccc0:	280f883a 	mov	r7,r5
 800ccc4:	10003426 	beq	r2,zero,800cd98 <memchr+0xdc>
 800ccc8:	30bfffc4 	addi	r2,r6,-1
 800cccc:	30001a26 	beq	r6,zero,800cd38 <memchr+0x7c>
 800ccd0:	20c00003 	ldbu	r3,0(r4)
 800ccd4:	29803fcc 	andi	r6,r5,255
 800ccd8:	30c0051e 	bne	r6,r3,800ccf0 <memchr+0x34>
 800ccdc:	00001806 	br	800cd40 <memchr+0x84>
 800cce0:	10001526 	beq	r2,zero,800cd38 <memchr+0x7c>
 800cce4:	20c00003 	ldbu	r3,0(r4)
 800cce8:	10bfffc4 	addi	r2,r2,-1
 800ccec:	30c01426 	beq	r6,r3,800cd40 <memchr+0x84>
 800ccf0:	21000044 	addi	r4,r4,1
 800ccf4:	20c000cc 	andi	r3,r4,3
 800ccf8:	183ff91e 	bne	r3,zero,800cce0 <__alt_data_end+0xfc00cce0>
 800ccfc:	020000c4 	movi	r8,3
 800cd00:	40801136 	bltu	r8,r2,800cd48 <memchr+0x8c>
 800cd04:	10000c26 	beq	r2,zero,800cd38 <memchr+0x7c>
 800cd08:	20c00003 	ldbu	r3,0(r4)
 800cd0c:	29403fcc 	andi	r5,r5,255
 800cd10:	28c00b26 	beq	r5,r3,800cd40 <memchr+0x84>
 800cd14:	20c00044 	addi	r3,r4,1
 800cd18:	39803fcc 	andi	r6,r7,255
 800cd1c:	2089883a 	add	r4,r4,r2
 800cd20:	00000306 	br	800cd30 <memchr+0x74>
 800cd24:	18c00044 	addi	r3,r3,1
 800cd28:	197fffc3 	ldbu	r5,-1(r3)
 800cd2c:	31400526 	beq	r6,r5,800cd44 <memchr+0x88>
 800cd30:	1805883a 	mov	r2,r3
 800cd34:	20fffb1e 	bne	r4,r3,800cd24 <__alt_data_end+0xfc00cd24>
 800cd38:	0005883a 	mov	r2,zero
 800cd3c:	f800283a 	ret
 800cd40:	2005883a 	mov	r2,r4
 800cd44:	f800283a 	ret
 800cd48:	28c03fcc 	andi	r3,r5,255
 800cd4c:	1812923a 	slli	r9,r3,8
 800cd50:	02ffbff4 	movhi	r11,65279
 800cd54:	02a02074 	movhi	r10,32897
 800cd58:	48d2b03a 	or	r9,r9,r3
 800cd5c:	4806943a 	slli	r3,r9,16
 800cd60:	5affbfc4 	addi	r11,r11,-257
 800cd64:	52a02004 	addi	r10,r10,-32640
 800cd68:	48d2b03a 	or	r9,r9,r3
 800cd6c:	20c00017 	ldw	r3,0(r4)
 800cd70:	48c6f03a 	xor	r3,r9,r3
 800cd74:	1acd883a 	add	r6,r3,r11
 800cd78:	00c6303a 	nor	r3,zero,r3
 800cd7c:	30c6703a 	and	r3,r6,r3
 800cd80:	1a86703a 	and	r3,r3,r10
 800cd84:	183fe01e 	bne	r3,zero,800cd08 <__alt_data_end+0xfc00cd08>
 800cd88:	10bfff04 	addi	r2,r2,-4
 800cd8c:	21000104 	addi	r4,r4,4
 800cd90:	40bff636 	bltu	r8,r2,800cd6c <__alt_data_end+0xfc00cd6c>
 800cd94:	003fdb06 	br	800cd04 <__alt_data_end+0xfc00cd04>
 800cd98:	3005883a 	mov	r2,r6
 800cd9c:	003fd706 	br	800ccfc <__alt_data_end+0xfc00ccfc>

0800cda0 <memcpy>:
 800cda0:	defffd04 	addi	sp,sp,-12
 800cda4:	dfc00215 	stw	ra,8(sp)
 800cda8:	dc400115 	stw	r17,4(sp)
 800cdac:	dc000015 	stw	r16,0(sp)
 800cdb0:	00c003c4 	movi	r3,15
 800cdb4:	2005883a 	mov	r2,r4
 800cdb8:	1980452e 	bgeu	r3,r6,800ced0 <memcpy+0x130>
 800cdbc:	2906b03a 	or	r3,r5,r4
 800cdc0:	18c000cc 	andi	r3,r3,3
 800cdc4:	1800441e 	bne	r3,zero,800ced8 <memcpy+0x138>
 800cdc8:	347ffc04 	addi	r17,r6,-16
 800cdcc:	8822d13a 	srli	r17,r17,4
 800cdd0:	28c00104 	addi	r3,r5,4
 800cdd4:	23400104 	addi	r13,r4,4
 800cdd8:	8820913a 	slli	r16,r17,4
 800cddc:	2b000204 	addi	r12,r5,8
 800cde0:	22c00204 	addi	r11,r4,8
 800cde4:	84000504 	addi	r16,r16,20
 800cde8:	2a800304 	addi	r10,r5,12
 800cdec:	22400304 	addi	r9,r4,12
 800cdf0:	2c21883a 	add	r16,r5,r16
 800cdf4:	2811883a 	mov	r8,r5
 800cdf8:	200f883a 	mov	r7,r4
 800cdfc:	41000017 	ldw	r4,0(r8)
 800ce00:	1fc00017 	ldw	ra,0(r3)
 800ce04:	63c00017 	ldw	r15,0(r12)
 800ce08:	39000015 	stw	r4,0(r7)
 800ce0c:	53800017 	ldw	r14,0(r10)
 800ce10:	6fc00015 	stw	ra,0(r13)
 800ce14:	5bc00015 	stw	r15,0(r11)
 800ce18:	4b800015 	stw	r14,0(r9)
 800ce1c:	18c00404 	addi	r3,r3,16
 800ce20:	39c00404 	addi	r7,r7,16
 800ce24:	42000404 	addi	r8,r8,16
 800ce28:	6b400404 	addi	r13,r13,16
 800ce2c:	63000404 	addi	r12,r12,16
 800ce30:	5ac00404 	addi	r11,r11,16
 800ce34:	52800404 	addi	r10,r10,16
 800ce38:	4a400404 	addi	r9,r9,16
 800ce3c:	1c3fef1e 	bne	r3,r16,800cdfc <__alt_data_end+0xfc00cdfc>
 800ce40:	89c00044 	addi	r7,r17,1
 800ce44:	380e913a 	slli	r7,r7,4
 800ce48:	310003cc 	andi	r4,r6,15
 800ce4c:	02c000c4 	movi	r11,3
 800ce50:	11c7883a 	add	r3,r2,r7
 800ce54:	29cb883a 	add	r5,r5,r7
 800ce58:	5900212e 	bgeu	r11,r4,800cee0 <memcpy+0x140>
 800ce5c:	1813883a 	mov	r9,r3
 800ce60:	2811883a 	mov	r8,r5
 800ce64:	200f883a 	mov	r7,r4
 800ce68:	42800017 	ldw	r10,0(r8)
 800ce6c:	4a400104 	addi	r9,r9,4
 800ce70:	39ffff04 	addi	r7,r7,-4
 800ce74:	4abfff15 	stw	r10,-4(r9)
 800ce78:	42000104 	addi	r8,r8,4
 800ce7c:	59fffa36 	bltu	r11,r7,800ce68 <__alt_data_end+0xfc00ce68>
 800ce80:	213fff04 	addi	r4,r4,-4
 800ce84:	2008d0ba 	srli	r4,r4,2
 800ce88:	318000cc 	andi	r6,r6,3
 800ce8c:	21000044 	addi	r4,r4,1
 800ce90:	2109883a 	add	r4,r4,r4
 800ce94:	2109883a 	add	r4,r4,r4
 800ce98:	1907883a 	add	r3,r3,r4
 800ce9c:	290b883a 	add	r5,r5,r4
 800cea0:	30000626 	beq	r6,zero,800cebc <memcpy+0x11c>
 800cea4:	198d883a 	add	r6,r3,r6
 800cea8:	29c00003 	ldbu	r7,0(r5)
 800ceac:	18c00044 	addi	r3,r3,1
 800ceb0:	29400044 	addi	r5,r5,1
 800ceb4:	19ffffc5 	stb	r7,-1(r3)
 800ceb8:	19bffb1e 	bne	r3,r6,800cea8 <__alt_data_end+0xfc00cea8>
 800cebc:	dfc00217 	ldw	ra,8(sp)
 800cec0:	dc400117 	ldw	r17,4(sp)
 800cec4:	dc000017 	ldw	r16,0(sp)
 800cec8:	dec00304 	addi	sp,sp,12
 800cecc:	f800283a 	ret
 800ced0:	2007883a 	mov	r3,r4
 800ced4:	003ff206 	br	800cea0 <__alt_data_end+0xfc00cea0>
 800ced8:	2007883a 	mov	r3,r4
 800cedc:	003ff106 	br	800cea4 <__alt_data_end+0xfc00cea4>
 800cee0:	200d883a 	mov	r6,r4
 800cee4:	003fee06 	br	800cea0 <__alt_data_end+0xfc00cea0>

0800cee8 <memmove>:
 800cee8:	2005883a 	mov	r2,r4
 800ceec:	29000b2e 	bgeu	r5,r4,800cf1c <memmove+0x34>
 800cef0:	298f883a 	add	r7,r5,r6
 800cef4:	21c0092e 	bgeu	r4,r7,800cf1c <memmove+0x34>
 800cef8:	2187883a 	add	r3,r4,r6
 800cefc:	198bc83a 	sub	r5,r3,r6
 800cf00:	30004826 	beq	r6,zero,800d024 <memmove+0x13c>
 800cf04:	39ffffc4 	addi	r7,r7,-1
 800cf08:	39000003 	ldbu	r4,0(r7)
 800cf0c:	18ffffc4 	addi	r3,r3,-1
 800cf10:	19000005 	stb	r4,0(r3)
 800cf14:	28fffb1e 	bne	r5,r3,800cf04 <__alt_data_end+0xfc00cf04>
 800cf18:	f800283a 	ret
 800cf1c:	00c003c4 	movi	r3,15
 800cf20:	1980412e 	bgeu	r3,r6,800d028 <memmove+0x140>
 800cf24:	2886b03a 	or	r3,r5,r2
 800cf28:	18c000cc 	andi	r3,r3,3
 800cf2c:	1800401e 	bne	r3,zero,800d030 <memmove+0x148>
 800cf30:	33fffc04 	addi	r15,r6,-16
 800cf34:	781ed13a 	srli	r15,r15,4
 800cf38:	28c00104 	addi	r3,r5,4
 800cf3c:	13400104 	addi	r13,r2,4
 800cf40:	781c913a 	slli	r14,r15,4
 800cf44:	2b000204 	addi	r12,r5,8
 800cf48:	12c00204 	addi	r11,r2,8
 800cf4c:	73800504 	addi	r14,r14,20
 800cf50:	2a800304 	addi	r10,r5,12
 800cf54:	12400304 	addi	r9,r2,12
 800cf58:	2b9d883a 	add	r14,r5,r14
 800cf5c:	2811883a 	mov	r8,r5
 800cf60:	100f883a 	mov	r7,r2
 800cf64:	41000017 	ldw	r4,0(r8)
 800cf68:	39c00404 	addi	r7,r7,16
 800cf6c:	18c00404 	addi	r3,r3,16
 800cf70:	393ffc15 	stw	r4,-16(r7)
 800cf74:	193ffc17 	ldw	r4,-16(r3)
 800cf78:	6b400404 	addi	r13,r13,16
 800cf7c:	5ac00404 	addi	r11,r11,16
 800cf80:	693ffc15 	stw	r4,-16(r13)
 800cf84:	61000017 	ldw	r4,0(r12)
 800cf88:	4a400404 	addi	r9,r9,16
 800cf8c:	42000404 	addi	r8,r8,16
 800cf90:	593ffc15 	stw	r4,-16(r11)
 800cf94:	51000017 	ldw	r4,0(r10)
 800cf98:	63000404 	addi	r12,r12,16
 800cf9c:	52800404 	addi	r10,r10,16
 800cfa0:	493ffc15 	stw	r4,-16(r9)
 800cfa4:	1bbfef1e 	bne	r3,r14,800cf64 <__alt_data_end+0xfc00cf64>
 800cfa8:	79000044 	addi	r4,r15,1
 800cfac:	2008913a 	slli	r4,r4,4
 800cfb0:	328003cc 	andi	r10,r6,15
 800cfb4:	02c000c4 	movi	r11,3
 800cfb8:	1107883a 	add	r3,r2,r4
 800cfbc:	290b883a 	add	r5,r5,r4
 800cfc0:	5a801e2e 	bgeu	r11,r10,800d03c <memmove+0x154>
 800cfc4:	1813883a 	mov	r9,r3
 800cfc8:	2811883a 	mov	r8,r5
 800cfcc:	500f883a 	mov	r7,r10
 800cfd0:	41000017 	ldw	r4,0(r8)
 800cfd4:	4a400104 	addi	r9,r9,4
 800cfd8:	39ffff04 	addi	r7,r7,-4
 800cfdc:	493fff15 	stw	r4,-4(r9)
 800cfe0:	42000104 	addi	r8,r8,4
 800cfe4:	59fffa36 	bltu	r11,r7,800cfd0 <__alt_data_end+0xfc00cfd0>
 800cfe8:	513fff04 	addi	r4,r10,-4
 800cfec:	2008d0ba 	srli	r4,r4,2
 800cff0:	318000cc 	andi	r6,r6,3
 800cff4:	21000044 	addi	r4,r4,1
 800cff8:	2109883a 	add	r4,r4,r4
 800cffc:	2109883a 	add	r4,r4,r4
 800d000:	1907883a 	add	r3,r3,r4
 800d004:	290b883a 	add	r5,r5,r4
 800d008:	30000b26 	beq	r6,zero,800d038 <memmove+0x150>
 800d00c:	198d883a 	add	r6,r3,r6
 800d010:	29c00003 	ldbu	r7,0(r5)
 800d014:	18c00044 	addi	r3,r3,1
 800d018:	29400044 	addi	r5,r5,1
 800d01c:	19ffffc5 	stb	r7,-1(r3)
 800d020:	19bffb1e 	bne	r3,r6,800d010 <__alt_data_end+0xfc00d010>
 800d024:	f800283a 	ret
 800d028:	1007883a 	mov	r3,r2
 800d02c:	003ff606 	br	800d008 <__alt_data_end+0xfc00d008>
 800d030:	1007883a 	mov	r3,r2
 800d034:	003ff506 	br	800d00c <__alt_data_end+0xfc00d00c>
 800d038:	f800283a 	ret
 800d03c:	500d883a 	mov	r6,r10
 800d040:	003ff106 	br	800d008 <__alt_data_end+0xfc00d008>

0800d044 <memset>:
 800d044:	20c000cc 	andi	r3,r4,3
 800d048:	2005883a 	mov	r2,r4
 800d04c:	18004426 	beq	r3,zero,800d160 <memset+0x11c>
 800d050:	31ffffc4 	addi	r7,r6,-1
 800d054:	30004026 	beq	r6,zero,800d158 <memset+0x114>
 800d058:	2813883a 	mov	r9,r5
 800d05c:	200d883a 	mov	r6,r4
 800d060:	2007883a 	mov	r3,r4
 800d064:	00000406 	br	800d078 <memset+0x34>
 800d068:	3a3fffc4 	addi	r8,r7,-1
 800d06c:	31800044 	addi	r6,r6,1
 800d070:	38003926 	beq	r7,zero,800d158 <memset+0x114>
 800d074:	400f883a 	mov	r7,r8
 800d078:	18c00044 	addi	r3,r3,1
 800d07c:	32400005 	stb	r9,0(r6)
 800d080:	1a0000cc 	andi	r8,r3,3
 800d084:	403ff81e 	bne	r8,zero,800d068 <__alt_data_end+0xfc00d068>
 800d088:	010000c4 	movi	r4,3
 800d08c:	21c02d2e 	bgeu	r4,r7,800d144 <memset+0x100>
 800d090:	29003fcc 	andi	r4,r5,255
 800d094:	200c923a 	slli	r6,r4,8
 800d098:	3108b03a 	or	r4,r6,r4
 800d09c:	200c943a 	slli	r6,r4,16
 800d0a0:	218cb03a 	or	r6,r4,r6
 800d0a4:	010003c4 	movi	r4,15
 800d0a8:	21c0182e 	bgeu	r4,r7,800d10c <memset+0xc8>
 800d0ac:	3b3ffc04 	addi	r12,r7,-16
 800d0b0:	6018d13a 	srli	r12,r12,4
 800d0b4:	1a000104 	addi	r8,r3,4
 800d0b8:	1ac00204 	addi	r11,r3,8
 800d0bc:	6008913a 	slli	r4,r12,4
 800d0c0:	1a800304 	addi	r10,r3,12
 800d0c4:	1813883a 	mov	r9,r3
 800d0c8:	21000504 	addi	r4,r4,20
 800d0cc:	1909883a 	add	r4,r3,r4
 800d0d0:	49800015 	stw	r6,0(r9)
 800d0d4:	41800015 	stw	r6,0(r8)
 800d0d8:	59800015 	stw	r6,0(r11)
 800d0dc:	51800015 	stw	r6,0(r10)
 800d0e0:	42000404 	addi	r8,r8,16
 800d0e4:	4a400404 	addi	r9,r9,16
 800d0e8:	5ac00404 	addi	r11,r11,16
 800d0ec:	52800404 	addi	r10,r10,16
 800d0f0:	413ff71e 	bne	r8,r4,800d0d0 <__alt_data_end+0xfc00d0d0>
 800d0f4:	63000044 	addi	r12,r12,1
 800d0f8:	6018913a 	slli	r12,r12,4
 800d0fc:	39c003cc 	andi	r7,r7,15
 800d100:	010000c4 	movi	r4,3
 800d104:	1b07883a 	add	r3,r3,r12
 800d108:	21c00e2e 	bgeu	r4,r7,800d144 <memset+0x100>
 800d10c:	1813883a 	mov	r9,r3
 800d110:	3811883a 	mov	r8,r7
 800d114:	010000c4 	movi	r4,3
 800d118:	49800015 	stw	r6,0(r9)
 800d11c:	423fff04 	addi	r8,r8,-4
 800d120:	4a400104 	addi	r9,r9,4
 800d124:	223ffc36 	bltu	r4,r8,800d118 <__alt_data_end+0xfc00d118>
 800d128:	393fff04 	addi	r4,r7,-4
 800d12c:	2008d0ba 	srli	r4,r4,2
 800d130:	39c000cc 	andi	r7,r7,3
 800d134:	21000044 	addi	r4,r4,1
 800d138:	2109883a 	add	r4,r4,r4
 800d13c:	2109883a 	add	r4,r4,r4
 800d140:	1907883a 	add	r3,r3,r4
 800d144:	38000526 	beq	r7,zero,800d15c <memset+0x118>
 800d148:	19cf883a 	add	r7,r3,r7
 800d14c:	19400005 	stb	r5,0(r3)
 800d150:	18c00044 	addi	r3,r3,1
 800d154:	38fffd1e 	bne	r7,r3,800d14c <__alt_data_end+0xfc00d14c>
 800d158:	f800283a 	ret
 800d15c:	f800283a 	ret
 800d160:	2007883a 	mov	r3,r4
 800d164:	300f883a 	mov	r7,r6
 800d168:	003fc706 	br	800d088 <__alt_data_end+0xfc00d088>

0800d16c <_Balloc>:
 800d16c:	20801317 	ldw	r2,76(r4)
 800d170:	defffc04 	addi	sp,sp,-16
 800d174:	dc400115 	stw	r17,4(sp)
 800d178:	dc000015 	stw	r16,0(sp)
 800d17c:	dfc00315 	stw	ra,12(sp)
 800d180:	dc800215 	stw	r18,8(sp)
 800d184:	2023883a 	mov	r17,r4
 800d188:	2821883a 	mov	r16,r5
 800d18c:	10000f26 	beq	r2,zero,800d1cc <_Balloc+0x60>
 800d190:	8407883a 	add	r3,r16,r16
 800d194:	18c7883a 	add	r3,r3,r3
 800d198:	10c7883a 	add	r3,r2,r3
 800d19c:	18800017 	ldw	r2,0(r3)
 800d1a0:	10001126 	beq	r2,zero,800d1e8 <_Balloc+0x7c>
 800d1a4:	11000017 	ldw	r4,0(r2)
 800d1a8:	19000015 	stw	r4,0(r3)
 800d1ac:	10000415 	stw	zero,16(r2)
 800d1b0:	10000315 	stw	zero,12(r2)
 800d1b4:	dfc00317 	ldw	ra,12(sp)
 800d1b8:	dc800217 	ldw	r18,8(sp)
 800d1bc:	dc400117 	ldw	r17,4(sp)
 800d1c0:	dc000017 	ldw	r16,0(sp)
 800d1c4:	dec00404 	addi	sp,sp,16
 800d1c8:	f800283a 	ret
 800d1cc:	01800844 	movi	r6,33
 800d1d0:	01400104 	movi	r5,4
 800d1d4:	80100340 	call	8010034 <_calloc_r>
 800d1d8:	88801315 	stw	r2,76(r17)
 800d1dc:	103fec1e 	bne	r2,zero,800d190 <__alt_data_end+0xfc00d190>
 800d1e0:	0005883a 	mov	r2,zero
 800d1e4:	003ff306 	br	800d1b4 <__alt_data_end+0xfc00d1b4>
 800d1e8:	01400044 	movi	r5,1
 800d1ec:	2c24983a 	sll	r18,r5,r16
 800d1f0:	8809883a 	mov	r4,r17
 800d1f4:	91800144 	addi	r6,r18,5
 800d1f8:	318d883a 	add	r6,r6,r6
 800d1fc:	318d883a 	add	r6,r6,r6
 800d200:	80100340 	call	8010034 <_calloc_r>
 800d204:	103ff626 	beq	r2,zero,800d1e0 <__alt_data_end+0xfc00d1e0>
 800d208:	14000115 	stw	r16,4(r2)
 800d20c:	14800215 	stw	r18,8(r2)
 800d210:	003fe606 	br	800d1ac <__alt_data_end+0xfc00d1ac>

0800d214 <_Bfree>:
 800d214:	28000826 	beq	r5,zero,800d238 <_Bfree+0x24>
 800d218:	28c00117 	ldw	r3,4(r5)
 800d21c:	20801317 	ldw	r2,76(r4)
 800d220:	18c7883a 	add	r3,r3,r3
 800d224:	18c7883a 	add	r3,r3,r3
 800d228:	10c5883a 	add	r2,r2,r3
 800d22c:	10c00017 	ldw	r3,0(r2)
 800d230:	28c00015 	stw	r3,0(r5)
 800d234:	11400015 	stw	r5,0(r2)
 800d238:	f800283a 	ret

0800d23c <__multadd>:
 800d23c:	defffa04 	addi	sp,sp,-24
 800d240:	dc800315 	stw	r18,12(sp)
 800d244:	dc400215 	stw	r17,8(sp)
 800d248:	dc000115 	stw	r16,4(sp)
 800d24c:	2823883a 	mov	r17,r5
 800d250:	2c000417 	ldw	r16,16(r5)
 800d254:	dfc00515 	stw	ra,20(sp)
 800d258:	dcc00415 	stw	r19,16(sp)
 800d25c:	2025883a 	mov	r18,r4
 800d260:	29400504 	addi	r5,r5,20
 800d264:	0011883a 	mov	r8,zero
 800d268:	28c00017 	ldw	r3,0(r5)
 800d26c:	29400104 	addi	r5,r5,4
 800d270:	42000044 	addi	r8,r8,1
 800d274:	18bfffcc 	andi	r2,r3,65535
 800d278:	1185383a 	mul	r2,r2,r6
 800d27c:	1806d43a 	srli	r3,r3,16
 800d280:	11cf883a 	add	r7,r2,r7
 800d284:	3808d43a 	srli	r4,r7,16
 800d288:	1987383a 	mul	r3,r3,r6
 800d28c:	38bfffcc 	andi	r2,r7,65535
 800d290:	1907883a 	add	r3,r3,r4
 800d294:	1808943a 	slli	r4,r3,16
 800d298:	180ed43a 	srli	r7,r3,16
 800d29c:	2085883a 	add	r2,r4,r2
 800d2a0:	28bfff15 	stw	r2,-4(r5)
 800d2a4:	443ff016 	blt	r8,r16,800d268 <__alt_data_end+0xfc00d268>
 800d2a8:	38000926 	beq	r7,zero,800d2d0 <__multadd+0x94>
 800d2ac:	88800217 	ldw	r2,8(r17)
 800d2b0:	80800f0e 	bge	r16,r2,800d2f0 <__multadd+0xb4>
 800d2b4:	80800144 	addi	r2,r16,5
 800d2b8:	1085883a 	add	r2,r2,r2
 800d2bc:	1085883a 	add	r2,r2,r2
 800d2c0:	8885883a 	add	r2,r17,r2
 800d2c4:	11c00015 	stw	r7,0(r2)
 800d2c8:	84000044 	addi	r16,r16,1
 800d2cc:	8c000415 	stw	r16,16(r17)
 800d2d0:	8805883a 	mov	r2,r17
 800d2d4:	dfc00517 	ldw	ra,20(sp)
 800d2d8:	dcc00417 	ldw	r19,16(sp)
 800d2dc:	dc800317 	ldw	r18,12(sp)
 800d2e0:	dc400217 	ldw	r17,8(sp)
 800d2e4:	dc000117 	ldw	r16,4(sp)
 800d2e8:	dec00604 	addi	sp,sp,24
 800d2ec:	f800283a 	ret
 800d2f0:	89400117 	ldw	r5,4(r17)
 800d2f4:	9009883a 	mov	r4,r18
 800d2f8:	d9c00015 	stw	r7,0(sp)
 800d2fc:	29400044 	addi	r5,r5,1
 800d300:	800d16c0 	call	800d16c <_Balloc>
 800d304:	89800417 	ldw	r6,16(r17)
 800d308:	89400304 	addi	r5,r17,12
 800d30c:	11000304 	addi	r4,r2,12
 800d310:	31800084 	addi	r6,r6,2
 800d314:	318d883a 	add	r6,r6,r6
 800d318:	318d883a 	add	r6,r6,r6
 800d31c:	1027883a 	mov	r19,r2
 800d320:	800cda00 	call	800cda0 <memcpy>
 800d324:	d9c00017 	ldw	r7,0(sp)
 800d328:	88000a26 	beq	r17,zero,800d354 <__multadd+0x118>
 800d32c:	88c00117 	ldw	r3,4(r17)
 800d330:	90801317 	ldw	r2,76(r18)
 800d334:	18c7883a 	add	r3,r3,r3
 800d338:	18c7883a 	add	r3,r3,r3
 800d33c:	10c5883a 	add	r2,r2,r3
 800d340:	10c00017 	ldw	r3,0(r2)
 800d344:	88c00015 	stw	r3,0(r17)
 800d348:	14400015 	stw	r17,0(r2)
 800d34c:	9823883a 	mov	r17,r19
 800d350:	003fd806 	br	800d2b4 <__alt_data_end+0xfc00d2b4>
 800d354:	9823883a 	mov	r17,r19
 800d358:	003fd606 	br	800d2b4 <__alt_data_end+0xfc00d2b4>

0800d35c <__s2b>:
 800d35c:	defff904 	addi	sp,sp,-28
 800d360:	dc400115 	stw	r17,4(sp)
 800d364:	dc000015 	stw	r16,0(sp)
 800d368:	2023883a 	mov	r17,r4
 800d36c:	2821883a 	mov	r16,r5
 800d370:	39000204 	addi	r4,r7,8
 800d374:	01400244 	movi	r5,9
 800d378:	dcc00315 	stw	r19,12(sp)
 800d37c:	dc800215 	stw	r18,8(sp)
 800d380:	dfc00615 	stw	ra,24(sp)
 800d384:	dd400515 	stw	r21,20(sp)
 800d388:	dd000415 	stw	r20,16(sp)
 800d38c:	3825883a 	mov	r18,r7
 800d390:	3027883a 	mov	r19,r6
 800d394:	80033980 	call	8003398 <__divsi3>
 800d398:	00c00044 	movi	r3,1
 800d39c:	000b883a 	mov	r5,zero
 800d3a0:	1880030e 	bge	r3,r2,800d3b0 <__s2b+0x54>
 800d3a4:	18c7883a 	add	r3,r3,r3
 800d3a8:	29400044 	addi	r5,r5,1
 800d3ac:	18bffd16 	blt	r3,r2,800d3a4 <__alt_data_end+0xfc00d3a4>
 800d3b0:	8809883a 	mov	r4,r17
 800d3b4:	800d16c0 	call	800d16c <_Balloc>
 800d3b8:	d8c00717 	ldw	r3,28(sp)
 800d3bc:	10c00515 	stw	r3,20(r2)
 800d3c0:	00c00044 	movi	r3,1
 800d3c4:	10c00415 	stw	r3,16(r2)
 800d3c8:	00c00244 	movi	r3,9
 800d3cc:	1cc0210e 	bge	r3,r19,800d454 <__s2b+0xf8>
 800d3d0:	80eb883a 	add	r21,r16,r3
 800d3d4:	a829883a 	mov	r20,r21
 800d3d8:	84e1883a 	add	r16,r16,r19
 800d3dc:	a1c00007 	ldb	r7,0(r20)
 800d3e0:	01800284 	movi	r6,10
 800d3e4:	a5000044 	addi	r20,r20,1
 800d3e8:	100b883a 	mov	r5,r2
 800d3ec:	39fff404 	addi	r7,r7,-48
 800d3f0:	8809883a 	mov	r4,r17
 800d3f4:	800d23c0 	call	800d23c <__multadd>
 800d3f8:	a43ff81e 	bne	r20,r16,800d3dc <__alt_data_end+0xfc00d3dc>
 800d3fc:	ace1883a 	add	r16,r21,r19
 800d400:	843ffe04 	addi	r16,r16,-8
 800d404:	9c800a0e 	bge	r19,r18,800d430 <__s2b+0xd4>
 800d408:	94e5c83a 	sub	r18,r18,r19
 800d40c:	84a5883a 	add	r18,r16,r18
 800d410:	81c00007 	ldb	r7,0(r16)
 800d414:	01800284 	movi	r6,10
 800d418:	84000044 	addi	r16,r16,1
 800d41c:	100b883a 	mov	r5,r2
 800d420:	39fff404 	addi	r7,r7,-48
 800d424:	8809883a 	mov	r4,r17
 800d428:	800d23c0 	call	800d23c <__multadd>
 800d42c:	84bff81e 	bne	r16,r18,800d410 <__alt_data_end+0xfc00d410>
 800d430:	dfc00617 	ldw	ra,24(sp)
 800d434:	dd400517 	ldw	r21,20(sp)
 800d438:	dd000417 	ldw	r20,16(sp)
 800d43c:	dcc00317 	ldw	r19,12(sp)
 800d440:	dc800217 	ldw	r18,8(sp)
 800d444:	dc400117 	ldw	r17,4(sp)
 800d448:	dc000017 	ldw	r16,0(sp)
 800d44c:	dec00704 	addi	sp,sp,28
 800d450:	f800283a 	ret
 800d454:	84000284 	addi	r16,r16,10
 800d458:	1827883a 	mov	r19,r3
 800d45c:	003fe906 	br	800d404 <__alt_data_end+0xfc00d404>

0800d460 <__hi0bits>:
 800d460:	20bfffec 	andhi	r2,r4,65535
 800d464:	1000141e 	bne	r2,zero,800d4b8 <__hi0bits+0x58>
 800d468:	2008943a 	slli	r4,r4,16
 800d46c:	00800404 	movi	r2,16
 800d470:	20ffc02c 	andhi	r3,r4,65280
 800d474:	1800021e 	bne	r3,zero,800d480 <__hi0bits+0x20>
 800d478:	2008923a 	slli	r4,r4,8
 800d47c:	10800204 	addi	r2,r2,8
 800d480:	20fc002c 	andhi	r3,r4,61440
 800d484:	1800021e 	bne	r3,zero,800d490 <__hi0bits+0x30>
 800d488:	2008913a 	slli	r4,r4,4
 800d48c:	10800104 	addi	r2,r2,4
 800d490:	20f0002c 	andhi	r3,r4,49152
 800d494:	1800031e 	bne	r3,zero,800d4a4 <__hi0bits+0x44>
 800d498:	2109883a 	add	r4,r4,r4
 800d49c:	10800084 	addi	r2,r2,2
 800d4a0:	2109883a 	add	r4,r4,r4
 800d4a4:	20000316 	blt	r4,zero,800d4b4 <__hi0bits+0x54>
 800d4a8:	2110002c 	andhi	r4,r4,16384
 800d4ac:	2000041e 	bne	r4,zero,800d4c0 <__hi0bits+0x60>
 800d4b0:	00800804 	movi	r2,32
 800d4b4:	f800283a 	ret
 800d4b8:	0005883a 	mov	r2,zero
 800d4bc:	003fec06 	br	800d470 <__alt_data_end+0xfc00d470>
 800d4c0:	10800044 	addi	r2,r2,1
 800d4c4:	f800283a 	ret

0800d4c8 <__lo0bits>:
 800d4c8:	20c00017 	ldw	r3,0(r4)
 800d4cc:	188001cc 	andi	r2,r3,7
 800d4d0:	10000826 	beq	r2,zero,800d4f4 <__lo0bits+0x2c>
 800d4d4:	1880004c 	andi	r2,r3,1
 800d4d8:	1000211e 	bne	r2,zero,800d560 <__lo0bits+0x98>
 800d4dc:	1880008c 	andi	r2,r3,2
 800d4e0:	1000211e 	bne	r2,zero,800d568 <__lo0bits+0xa0>
 800d4e4:	1806d0ba 	srli	r3,r3,2
 800d4e8:	00800084 	movi	r2,2
 800d4ec:	20c00015 	stw	r3,0(r4)
 800d4f0:	f800283a 	ret
 800d4f4:	18bfffcc 	andi	r2,r3,65535
 800d4f8:	10001326 	beq	r2,zero,800d548 <__lo0bits+0x80>
 800d4fc:	0005883a 	mov	r2,zero
 800d500:	19403fcc 	andi	r5,r3,255
 800d504:	2800021e 	bne	r5,zero,800d510 <__lo0bits+0x48>
 800d508:	1806d23a 	srli	r3,r3,8
 800d50c:	10800204 	addi	r2,r2,8
 800d510:	194003cc 	andi	r5,r3,15
 800d514:	2800021e 	bne	r5,zero,800d520 <__lo0bits+0x58>
 800d518:	1806d13a 	srli	r3,r3,4
 800d51c:	10800104 	addi	r2,r2,4
 800d520:	194000cc 	andi	r5,r3,3
 800d524:	2800021e 	bne	r5,zero,800d530 <__lo0bits+0x68>
 800d528:	1806d0ba 	srli	r3,r3,2
 800d52c:	10800084 	addi	r2,r2,2
 800d530:	1940004c 	andi	r5,r3,1
 800d534:	2800081e 	bne	r5,zero,800d558 <__lo0bits+0x90>
 800d538:	1806d07a 	srli	r3,r3,1
 800d53c:	1800051e 	bne	r3,zero,800d554 <__lo0bits+0x8c>
 800d540:	00800804 	movi	r2,32
 800d544:	f800283a 	ret
 800d548:	1806d43a 	srli	r3,r3,16
 800d54c:	00800404 	movi	r2,16
 800d550:	003feb06 	br	800d500 <__alt_data_end+0xfc00d500>
 800d554:	10800044 	addi	r2,r2,1
 800d558:	20c00015 	stw	r3,0(r4)
 800d55c:	f800283a 	ret
 800d560:	0005883a 	mov	r2,zero
 800d564:	f800283a 	ret
 800d568:	1806d07a 	srli	r3,r3,1
 800d56c:	00800044 	movi	r2,1
 800d570:	20c00015 	stw	r3,0(r4)
 800d574:	f800283a 	ret

0800d578 <__i2b>:
 800d578:	defffd04 	addi	sp,sp,-12
 800d57c:	dc000015 	stw	r16,0(sp)
 800d580:	04000044 	movi	r16,1
 800d584:	dc400115 	stw	r17,4(sp)
 800d588:	2823883a 	mov	r17,r5
 800d58c:	800b883a 	mov	r5,r16
 800d590:	dfc00215 	stw	ra,8(sp)
 800d594:	800d16c0 	call	800d16c <_Balloc>
 800d598:	14400515 	stw	r17,20(r2)
 800d59c:	14000415 	stw	r16,16(r2)
 800d5a0:	dfc00217 	ldw	ra,8(sp)
 800d5a4:	dc400117 	ldw	r17,4(sp)
 800d5a8:	dc000017 	ldw	r16,0(sp)
 800d5ac:	dec00304 	addi	sp,sp,12
 800d5b0:	f800283a 	ret

0800d5b4 <__multiply>:
 800d5b4:	defffa04 	addi	sp,sp,-24
 800d5b8:	dcc00315 	stw	r19,12(sp)
 800d5bc:	dc800215 	stw	r18,8(sp)
 800d5c0:	34c00417 	ldw	r19,16(r6)
 800d5c4:	2c800417 	ldw	r18,16(r5)
 800d5c8:	dd000415 	stw	r20,16(sp)
 800d5cc:	dc400115 	stw	r17,4(sp)
 800d5d0:	dfc00515 	stw	ra,20(sp)
 800d5d4:	dc000015 	stw	r16,0(sp)
 800d5d8:	2829883a 	mov	r20,r5
 800d5dc:	3023883a 	mov	r17,r6
 800d5e0:	94c0050e 	bge	r18,r19,800d5f8 <__multiply+0x44>
 800d5e4:	9007883a 	mov	r3,r18
 800d5e8:	3029883a 	mov	r20,r6
 800d5ec:	9825883a 	mov	r18,r19
 800d5f0:	2823883a 	mov	r17,r5
 800d5f4:	1827883a 	mov	r19,r3
 800d5f8:	a0800217 	ldw	r2,8(r20)
 800d5fc:	94e1883a 	add	r16,r18,r19
 800d600:	a1400117 	ldw	r5,4(r20)
 800d604:	1400010e 	bge	r2,r16,800d60c <__multiply+0x58>
 800d608:	29400044 	addi	r5,r5,1
 800d60c:	800d16c0 	call	800d16c <_Balloc>
 800d610:	8415883a 	add	r10,r16,r16
 800d614:	12c00504 	addi	r11,r2,20
 800d618:	5295883a 	add	r10,r10,r10
 800d61c:	5a95883a 	add	r10,r11,r10
 800d620:	5807883a 	mov	r3,r11
 800d624:	5a80032e 	bgeu	r11,r10,800d634 <__multiply+0x80>
 800d628:	18000015 	stw	zero,0(r3)
 800d62c:	18c00104 	addi	r3,r3,4
 800d630:	1abffd36 	bltu	r3,r10,800d628 <__alt_data_end+0xfc00d628>
 800d634:	9ce7883a 	add	r19,r19,r19
 800d638:	94a5883a 	add	r18,r18,r18
 800d63c:	89800504 	addi	r6,r17,20
 800d640:	9ce7883a 	add	r19,r19,r19
 800d644:	a3400504 	addi	r13,r20,20
 800d648:	94a5883a 	add	r18,r18,r18
 800d64c:	34d9883a 	add	r12,r6,r19
 800d650:	6c93883a 	add	r9,r13,r18
 800d654:	3300422e 	bgeu	r6,r12,800d760 <__multiply+0x1ac>
 800d658:	37c00017 	ldw	ra,0(r6)
 800d65c:	fbffffcc 	andi	r15,ra,65535
 800d660:	78001b26 	beq	r15,zero,800d6d0 <__multiply+0x11c>
 800d664:	5811883a 	mov	r8,r11
 800d668:	681d883a 	mov	r14,r13
 800d66c:	000f883a 	mov	r7,zero
 800d670:	71000017 	ldw	r4,0(r14)
 800d674:	40c00017 	ldw	r3,0(r8)
 800d678:	73800104 	addi	r14,r14,4
 800d67c:	217fffcc 	andi	r5,r4,65535
 800d680:	2bcb383a 	mul	r5,r5,r15
 800d684:	2008d43a 	srli	r4,r4,16
 800d688:	1c7fffcc 	andi	r17,r3,65535
 800d68c:	2c4b883a 	add	r5,r5,r17
 800d690:	29cb883a 	add	r5,r5,r7
 800d694:	23c9383a 	mul	r4,r4,r15
 800d698:	1806d43a 	srli	r3,r3,16
 800d69c:	280ed43a 	srli	r7,r5,16
 800d6a0:	297fffcc 	andi	r5,r5,65535
 800d6a4:	20c7883a 	add	r3,r4,r3
 800d6a8:	19c7883a 	add	r3,r3,r7
 800d6ac:	1808943a 	slli	r4,r3,16
 800d6b0:	4023883a 	mov	r17,r8
 800d6b4:	180ed43a 	srli	r7,r3,16
 800d6b8:	214ab03a 	or	r5,r4,r5
 800d6bc:	41400015 	stw	r5,0(r8)
 800d6c0:	42000104 	addi	r8,r8,4
 800d6c4:	727fea36 	bltu	r14,r9,800d670 <__alt_data_end+0xfc00d670>
 800d6c8:	89c00115 	stw	r7,4(r17)
 800d6cc:	37c00017 	ldw	ra,0(r6)
 800d6d0:	f83ed43a 	srli	ra,ra,16
 800d6d4:	f8001f26 	beq	ra,zero,800d754 <__multiply+0x1a0>
 800d6d8:	58c00017 	ldw	r3,0(r11)
 800d6dc:	681d883a 	mov	r14,r13
 800d6e0:	581f883a 	mov	r15,r11
 800d6e4:	1811883a 	mov	r8,r3
 800d6e8:	5825883a 	mov	r18,r11
 800d6ec:	000f883a 	mov	r7,zero
 800d6f0:	00000106 	br	800d6f8 <__multiply+0x144>
 800d6f4:	8825883a 	mov	r18,r17
 800d6f8:	7140000b 	ldhu	r5,0(r14)
 800d6fc:	4010d43a 	srli	r8,r8,16
 800d700:	193fffcc 	andi	r4,r3,65535
 800d704:	2fcb383a 	mul	r5,r5,ra
 800d708:	7bc00104 	addi	r15,r15,4
 800d70c:	73800104 	addi	r14,r14,4
 800d710:	2a0b883a 	add	r5,r5,r8
 800d714:	29cb883a 	add	r5,r5,r7
 800d718:	2806943a 	slli	r3,r5,16
 800d71c:	94400104 	addi	r17,r18,4
 800d720:	280ad43a 	srli	r5,r5,16
 800d724:	1908b03a 	or	r4,r3,r4
 800d728:	793fff15 	stw	r4,-4(r15)
 800d72c:	70ffff17 	ldw	r3,-4(r14)
 800d730:	8a000017 	ldw	r8,0(r17)
 800d734:	1806d43a 	srli	r3,r3,16
 800d738:	413fffcc 	andi	r4,r8,65535
 800d73c:	1fc7383a 	mul	r3,r3,ra
 800d740:	1907883a 	add	r3,r3,r4
 800d744:	1947883a 	add	r3,r3,r5
 800d748:	180ed43a 	srli	r7,r3,16
 800d74c:	727fe936 	bltu	r14,r9,800d6f4 <__alt_data_end+0xfc00d6f4>
 800d750:	90c00115 	stw	r3,4(r18)
 800d754:	31800104 	addi	r6,r6,4
 800d758:	5ac00104 	addi	r11,r11,4
 800d75c:	333fbe36 	bltu	r6,r12,800d658 <__alt_data_end+0xfc00d658>
 800d760:	0400090e 	bge	zero,r16,800d788 <__multiply+0x1d4>
 800d764:	50ffff17 	ldw	r3,-4(r10)
 800d768:	52bfff04 	addi	r10,r10,-4
 800d76c:	18000326 	beq	r3,zero,800d77c <__multiply+0x1c8>
 800d770:	00000506 	br	800d788 <__multiply+0x1d4>
 800d774:	50c00017 	ldw	r3,0(r10)
 800d778:	1800031e 	bne	r3,zero,800d788 <__multiply+0x1d4>
 800d77c:	843fffc4 	addi	r16,r16,-1
 800d780:	52bfff04 	addi	r10,r10,-4
 800d784:	803ffb1e 	bne	r16,zero,800d774 <__alt_data_end+0xfc00d774>
 800d788:	14000415 	stw	r16,16(r2)
 800d78c:	dfc00517 	ldw	ra,20(sp)
 800d790:	dd000417 	ldw	r20,16(sp)
 800d794:	dcc00317 	ldw	r19,12(sp)
 800d798:	dc800217 	ldw	r18,8(sp)
 800d79c:	dc400117 	ldw	r17,4(sp)
 800d7a0:	dc000017 	ldw	r16,0(sp)
 800d7a4:	dec00604 	addi	sp,sp,24
 800d7a8:	f800283a 	ret

0800d7ac <__pow5mult>:
 800d7ac:	defffa04 	addi	sp,sp,-24
 800d7b0:	dcc00315 	stw	r19,12(sp)
 800d7b4:	dc000015 	stw	r16,0(sp)
 800d7b8:	dfc00515 	stw	ra,20(sp)
 800d7bc:	dd000415 	stw	r20,16(sp)
 800d7c0:	dc800215 	stw	r18,8(sp)
 800d7c4:	dc400115 	stw	r17,4(sp)
 800d7c8:	308000cc 	andi	r2,r6,3
 800d7cc:	3021883a 	mov	r16,r6
 800d7d0:	2027883a 	mov	r19,r4
 800d7d4:	10002f1e 	bne	r2,zero,800d894 <__pow5mult+0xe8>
 800d7d8:	2825883a 	mov	r18,r5
 800d7dc:	8021d0ba 	srai	r16,r16,2
 800d7e0:	80001a26 	beq	r16,zero,800d84c <__pow5mult+0xa0>
 800d7e4:	9c401217 	ldw	r17,72(r19)
 800d7e8:	8800061e 	bne	r17,zero,800d804 <__pow5mult+0x58>
 800d7ec:	00003406 	br	800d8c0 <__pow5mult+0x114>
 800d7f0:	8021d07a 	srai	r16,r16,1
 800d7f4:	80001526 	beq	r16,zero,800d84c <__pow5mult+0xa0>
 800d7f8:	88800017 	ldw	r2,0(r17)
 800d7fc:	10001c26 	beq	r2,zero,800d870 <__pow5mult+0xc4>
 800d800:	1023883a 	mov	r17,r2
 800d804:	8080004c 	andi	r2,r16,1
 800d808:	103ff926 	beq	r2,zero,800d7f0 <__alt_data_end+0xfc00d7f0>
 800d80c:	880d883a 	mov	r6,r17
 800d810:	900b883a 	mov	r5,r18
 800d814:	9809883a 	mov	r4,r19
 800d818:	800d5b40 	call	800d5b4 <__multiply>
 800d81c:	90001b26 	beq	r18,zero,800d88c <__pow5mult+0xe0>
 800d820:	91000117 	ldw	r4,4(r18)
 800d824:	98c01317 	ldw	r3,76(r19)
 800d828:	8021d07a 	srai	r16,r16,1
 800d82c:	2109883a 	add	r4,r4,r4
 800d830:	2109883a 	add	r4,r4,r4
 800d834:	1907883a 	add	r3,r3,r4
 800d838:	19000017 	ldw	r4,0(r3)
 800d83c:	91000015 	stw	r4,0(r18)
 800d840:	1c800015 	stw	r18,0(r3)
 800d844:	1025883a 	mov	r18,r2
 800d848:	803feb1e 	bne	r16,zero,800d7f8 <__alt_data_end+0xfc00d7f8>
 800d84c:	9005883a 	mov	r2,r18
 800d850:	dfc00517 	ldw	ra,20(sp)
 800d854:	dd000417 	ldw	r20,16(sp)
 800d858:	dcc00317 	ldw	r19,12(sp)
 800d85c:	dc800217 	ldw	r18,8(sp)
 800d860:	dc400117 	ldw	r17,4(sp)
 800d864:	dc000017 	ldw	r16,0(sp)
 800d868:	dec00604 	addi	sp,sp,24
 800d86c:	f800283a 	ret
 800d870:	880d883a 	mov	r6,r17
 800d874:	880b883a 	mov	r5,r17
 800d878:	9809883a 	mov	r4,r19
 800d87c:	800d5b40 	call	800d5b4 <__multiply>
 800d880:	88800015 	stw	r2,0(r17)
 800d884:	10000015 	stw	zero,0(r2)
 800d888:	003fdd06 	br	800d800 <__alt_data_end+0xfc00d800>
 800d88c:	1025883a 	mov	r18,r2
 800d890:	003fd706 	br	800d7f0 <__alt_data_end+0xfc00d7f0>
 800d894:	10bfffc4 	addi	r2,r2,-1
 800d898:	1085883a 	add	r2,r2,r2
 800d89c:	00c20074 	movhi	r3,2049
 800d8a0:	18d74404 	addi	r3,r3,23824
 800d8a4:	1085883a 	add	r2,r2,r2
 800d8a8:	1885883a 	add	r2,r3,r2
 800d8ac:	11800017 	ldw	r6,0(r2)
 800d8b0:	000f883a 	mov	r7,zero
 800d8b4:	800d23c0 	call	800d23c <__multadd>
 800d8b8:	1025883a 	mov	r18,r2
 800d8bc:	003fc706 	br	800d7dc <__alt_data_end+0xfc00d7dc>
 800d8c0:	05000044 	movi	r20,1
 800d8c4:	a00b883a 	mov	r5,r20
 800d8c8:	9809883a 	mov	r4,r19
 800d8cc:	800d16c0 	call	800d16c <_Balloc>
 800d8d0:	1023883a 	mov	r17,r2
 800d8d4:	00809c44 	movi	r2,625
 800d8d8:	88800515 	stw	r2,20(r17)
 800d8dc:	8d000415 	stw	r20,16(r17)
 800d8e0:	9c401215 	stw	r17,72(r19)
 800d8e4:	88000015 	stw	zero,0(r17)
 800d8e8:	003fc606 	br	800d804 <__alt_data_end+0xfc00d804>

0800d8ec <__lshift>:
 800d8ec:	defff904 	addi	sp,sp,-28
 800d8f0:	dd400515 	stw	r21,20(sp)
 800d8f4:	dcc00315 	stw	r19,12(sp)
 800d8f8:	302bd17a 	srai	r21,r6,5
 800d8fc:	2cc00417 	ldw	r19,16(r5)
 800d900:	28800217 	ldw	r2,8(r5)
 800d904:	dd000415 	stw	r20,16(sp)
 800d908:	ace7883a 	add	r19,r21,r19
 800d90c:	dc800215 	stw	r18,8(sp)
 800d910:	dc400115 	stw	r17,4(sp)
 800d914:	dc000015 	stw	r16,0(sp)
 800d918:	dfc00615 	stw	ra,24(sp)
 800d91c:	9c000044 	addi	r16,r19,1
 800d920:	2823883a 	mov	r17,r5
 800d924:	3029883a 	mov	r20,r6
 800d928:	2025883a 	mov	r18,r4
 800d92c:	29400117 	ldw	r5,4(r5)
 800d930:	1400030e 	bge	r2,r16,800d940 <__lshift+0x54>
 800d934:	1085883a 	add	r2,r2,r2
 800d938:	29400044 	addi	r5,r5,1
 800d93c:	143ffd16 	blt	r2,r16,800d934 <__alt_data_end+0xfc00d934>
 800d940:	9009883a 	mov	r4,r18
 800d944:	800d16c0 	call	800d16c <_Balloc>
 800d948:	10c00504 	addi	r3,r2,20
 800d94c:	0540070e 	bge	zero,r21,800d96c <__lshift+0x80>
 800d950:	ad6b883a 	add	r21,r21,r21
 800d954:	ad6b883a 	add	r21,r21,r21
 800d958:	1809883a 	mov	r4,r3
 800d95c:	1d47883a 	add	r3,r3,r21
 800d960:	20000015 	stw	zero,0(r4)
 800d964:	21000104 	addi	r4,r4,4
 800d968:	193ffd1e 	bne	r3,r4,800d960 <__alt_data_end+0xfc00d960>
 800d96c:	8a000417 	ldw	r8,16(r17)
 800d970:	89000504 	addi	r4,r17,20
 800d974:	a18007cc 	andi	r6,r20,31
 800d978:	4211883a 	add	r8,r8,r8
 800d97c:	4211883a 	add	r8,r8,r8
 800d980:	2211883a 	add	r8,r4,r8
 800d984:	30002326 	beq	r6,zero,800da14 <__lshift+0x128>
 800d988:	02400804 	movi	r9,32
 800d98c:	4993c83a 	sub	r9,r9,r6
 800d990:	000b883a 	mov	r5,zero
 800d994:	21c00017 	ldw	r7,0(r4)
 800d998:	1815883a 	mov	r10,r3
 800d99c:	18c00104 	addi	r3,r3,4
 800d9a0:	398e983a 	sll	r7,r7,r6
 800d9a4:	21000104 	addi	r4,r4,4
 800d9a8:	394ab03a 	or	r5,r7,r5
 800d9ac:	197fff15 	stw	r5,-4(r3)
 800d9b0:	217fff17 	ldw	r5,-4(r4)
 800d9b4:	2a4ad83a 	srl	r5,r5,r9
 800d9b8:	223ff636 	bltu	r4,r8,800d994 <__alt_data_end+0xfc00d994>
 800d9bc:	51400115 	stw	r5,4(r10)
 800d9c0:	28001a1e 	bne	r5,zero,800da2c <__lshift+0x140>
 800d9c4:	843fffc4 	addi	r16,r16,-1
 800d9c8:	14000415 	stw	r16,16(r2)
 800d9cc:	88000826 	beq	r17,zero,800d9f0 <__lshift+0x104>
 800d9d0:	89000117 	ldw	r4,4(r17)
 800d9d4:	90c01317 	ldw	r3,76(r18)
 800d9d8:	2109883a 	add	r4,r4,r4
 800d9dc:	2109883a 	add	r4,r4,r4
 800d9e0:	1907883a 	add	r3,r3,r4
 800d9e4:	19000017 	ldw	r4,0(r3)
 800d9e8:	89000015 	stw	r4,0(r17)
 800d9ec:	1c400015 	stw	r17,0(r3)
 800d9f0:	dfc00617 	ldw	ra,24(sp)
 800d9f4:	dd400517 	ldw	r21,20(sp)
 800d9f8:	dd000417 	ldw	r20,16(sp)
 800d9fc:	dcc00317 	ldw	r19,12(sp)
 800da00:	dc800217 	ldw	r18,8(sp)
 800da04:	dc400117 	ldw	r17,4(sp)
 800da08:	dc000017 	ldw	r16,0(sp)
 800da0c:	dec00704 	addi	sp,sp,28
 800da10:	f800283a 	ret
 800da14:	21400017 	ldw	r5,0(r4)
 800da18:	18c00104 	addi	r3,r3,4
 800da1c:	21000104 	addi	r4,r4,4
 800da20:	197fff15 	stw	r5,-4(r3)
 800da24:	223ffb36 	bltu	r4,r8,800da14 <__alt_data_end+0xfc00da14>
 800da28:	003fe606 	br	800d9c4 <__alt_data_end+0xfc00d9c4>
 800da2c:	9c000084 	addi	r16,r19,2
 800da30:	003fe406 	br	800d9c4 <__alt_data_end+0xfc00d9c4>

0800da34 <__mcmp>:
 800da34:	20800417 	ldw	r2,16(r4)
 800da38:	28c00417 	ldw	r3,16(r5)
 800da3c:	10c5c83a 	sub	r2,r2,r3
 800da40:	1000111e 	bne	r2,zero,800da88 <__mcmp+0x54>
 800da44:	18c7883a 	add	r3,r3,r3
 800da48:	18c7883a 	add	r3,r3,r3
 800da4c:	21000504 	addi	r4,r4,20
 800da50:	29400504 	addi	r5,r5,20
 800da54:	20c5883a 	add	r2,r4,r3
 800da58:	28cb883a 	add	r5,r5,r3
 800da5c:	00000106 	br	800da64 <__mcmp+0x30>
 800da60:	20800a2e 	bgeu	r4,r2,800da8c <__mcmp+0x58>
 800da64:	10bfff04 	addi	r2,r2,-4
 800da68:	297fff04 	addi	r5,r5,-4
 800da6c:	11800017 	ldw	r6,0(r2)
 800da70:	28c00017 	ldw	r3,0(r5)
 800da74:	30fffa26 	beq	r6,r3,800da60 <__alt_data_end+0xfc00da60>
 800da78:	30c00236 	bltu	r6,r3,800da84 <__mcmp+0x50>
 800da7c:	00800044 	movi	r2,1
 800da80:	f800283a 	ret
 800da84:	00bfffc4 	movi	r2,-1
 800da88:	f800283a 	ret
 800da8c:	0005883a 	mov	r2,zero
 800da90:	f800283a 	ret

0800da94 <__mdiff>:
 800da94:	28c00417 	ldw	r3,16(r5)
 800da98:	30800417 	ldw	r2,16(r6)
 800da9c:	defffa04 	addi	sp,sp,-24
 800daa0:	dcc00315 	stw	r19,12(sp)
 800daa4:	dc800215 	stw	r18,8(sp)
 800daa8:	dfc00515 	stw	ra,20(sp)
 800daac:	dd000415 	stw	r20,16(sp)
 800dab0:	dc400115 	stw	r17,4(sp)
 800dab4:	dc000015 	stw	r16,0(sp)
 800dab8:	1887c83a 	sub	r3,r3,r2
 800dabc:	2825883a 	mov	r18,r5
 800dac0:	3027883a 	mov	r19,r6
 800dac4:	1800141e 	bne	r3,zero,800db18 <__mdiff+0x84>
 800dac8:	1085883a 	add	r2,r2,r2
 800dacc:	1085883a 	add	r2,r2,r2
 800dad0:	2a000504 	addi	r8,r5,20
 800dad4:	34000504 	addi	r16,r6,20
 800dad8:	4087883a 	add	r3,r8,r2
 800dadc:	8085883a 	add	r2,r16,r2
 800dae0:	00000106 	br	800dae8 <__mdiff+0x54>
 800dae4:	40c0592e 	bgeu	r8,r3,800dc4c <__mdiff+0x1b8>
 800dae8:	18ffff04 	addi	r3,r3,-4
 800daec:	10bfff04 	addi	r2,r2,-4
 800daf0:	19c00017 	ldw	r7,0(r3)
 800daf4:	11400017 	ldw	r5,0(r2)
 800daf8:	397ffa26 	beq	r7,r5,800dae4 <__alt_data_end+0xfc00dae4>
 800dafc:	3940592e 	bgeu	r7,r5,800dc64 <__mdiff+0x1d0>
 800db00:	9005883a 	mov	r2,r18
 800db04:	4023883a 	mov	r17,r8
 800db08:	9825883a 	mov	r18,r19
 800db0c:	05000044 	movi	r20,1
 800db10:	1027883a 	mov	r19,r2
 800db14:	00000406 	br	800db28 <__mdiff+0x94>
 800db18:	18005616 	blt	r3,zero,800dc74 <__mdiff+0x1e0>
 800db1c:	34400504 	addi	r17,r6,20
 800db20:	2c000504 	addi	r16,r5,20
 800db24:	0029883a 	mov	r20,zero
 800db28:	91400117 	ldw	r5,4(r18)
 800db2c:	800d16c0 	call	800d16c <_Balloc>
 800db30:	92400417 	ldw	r9,16(r18)
 800db34:	9b000417 	ldw	r12,16(r19)
 800db38:	12c00504 	addi	r11,r2,20
 800db3c:	4a51883a 	add	r8,r9,r9
 800db40:	6319883a 	add	r12,r12,r12
 800db44:	4211883a 	add	r8,r8,r8
 800db48:	6319883a 	add	r12,r12,r12
 800db4c:	15000315 	stw	r20,12(r2)
 800db50:	8211883a 	add	r8,r16,r8
 800db54:	8b19883a 	add	r12,r17,r12
 800db58:	0007883a 	mov	r3,zero
 800db5c:	81400017 	ldw	r5,0(r16)
 800db60:	89c00017 	ldw	r7,0(r17)
 800db64:	59800104 	addi	r6,r11,4
 800db68:	293fffcc 	andi	r4,r5,65535
 800db6c:	20c7883a 	add	r3,r4,r3
 800db70:	393fffcc 	andi	r4,r7,65535
 800db74:	1909c83a 	sub	r4,r3,r4
 800db78:	280ad43a 	srli	r5,r5,16
 800db7c:	380ed43a 	srli	r7,r7,16
 800db80:	2007d43a 	srai	r3,r4,16
 800db84:	213fffcc 	andi	r4,r4,65535
 800db88:	29cbc83a 	sub	r5,r5,r7
 800db8c:	28c7883a 	add	r3,r5,r3
 800db90:	180a943a 	slli	r5,r3,16
 800db94:	8c400104 	addi	r17,r17,4
 800db98:	84000104 	addi	r16,r16,4
 800db9c:	2908b03a 	or	r4,r5,r4
 800dba0:	59000015 	stw	r4,0(r11)
 800dba4:	1807d43a 	srai	r3,r3,16
 800dba8:	3015883a 	mov	r10,r6
 800dbac:	3017883a 	mov	r11,r6
 800dbb0:	8b3fea36 	bltu	r17,r12,800db5c <__alt_data_end+0xfc00db5c>
 800dbb4:	8200162e 	bgeu	r16,r8,800dc10 <__mdiff+0x17c>
 800dbb8:	8017883a 	mov	r11,r16
 800dbbc:	59400017 	ldw	r5,0(r11)
 800dbc0:	31800104 	addi	r6,r6,4
 800dbc4:	5ac00104 	addi	r11,r11,4
 800dbc8:	293fffcc 	andi	r4,r5,65535
 800dbcc:	20c7883a 	add	r3,r4,r3
 800dbd0:	280ed43a 	srli	r7,r5,16
 800dbd4:	180bd43a 	srai	r5,r3,16
 800dbd8:	193fffcc 	andi	r4,r3,65535
 800dbdc:	3947883a 	add	r3,r7,r5
 800dbe0:	180a943a 	slli	r5,r3,16
 800dbe4:	1807d43a 	srai	r3,r3,16
 800dbe8:	2908b03a 	or	r4,r5,r4
 800dbec:	313fff15 	stw	r4,-4(r6)
 800dbf0:	5a3ff236 	bltu	r11,r8,800dbbc <__alt_data_end+0xfc00dbbc>
 800dbf4:	0406303a 	nor	r3,zero,r16
 800dbf8:	1a07883a 	add	r3,r3,r8
 800dbfc:	1806d0ba 	srli	r3,r3,2
 800dc00:	18c00044 	addi	r3,r3,1
 800dc04:	18c7883a 	add	r3,r3,r3
 800dc08:	18c7883a 	add	r3,r3,r3
 800dc0c:	50d5883a 	add	r10,r10,r3
 800dc10:	50ffff04 	addi	r3,r10,-4
 800dc14:	2000041e 	bne	r4,zero,800dc28 <__mdiff+0x194>
 800dc18:	18ffff04 	addi	r3,r3,-4
 800dc1c:	19000017 	ldw	r4,0(r3)
 800dc20:	4a7fffc4 	addi	r9,r9,-1
 800dc24:	203ffc26 	beq	r4,zero,800dc18 <__alt_data_end+0xfc00dc18>
 800dc28:	12400415 	stw	r9,16(r2)
 800dc2c:	dfc00517 	ldw	ra,20(sp)
 800dc30:	dd000417 	ldw	r20,16(sp)
 800dc34:	dcc00317 	ldw	r19,12(sp)
 800dc38:	dc800217 	ldw	r18,8(sp)
 800dc3c:	dc400117 	ldw	r17,4(sp)
 800dc40:	dc000017 	ldw	r16,0(sp)
 800dc44:	dec00604 	addi	sp,sp,24
 800dc48:	f800283a 	ret
 800dc4c:	000b883a 	mov	r5,zero
 800dc50:	800d16c0 	call	800d16c <_Balloc>
 800dc54:	00c00044 	movi	r3,1
 800dc58:	10c00415 	stw	r3,16(r2)
 800dc5c:	10000515 	stw	zero,20(r2)
 800dc60:	003ff206 	br	800dc2c <__alt_data_end+0xfc00dc2c>
 800dc64:	8023883a 	mov	r17,r16
 800dc68:	0029883a 	mov	r20,zero
 800dc6c:	4021883a 	mov	r16,r8
 800dc70:	003fad06 	br	800db28 <__alt_data_end+0xfc00db28>
 800dc74:	9005883a 	mov	r2,r18
 800dc78:	94400504 	addi	r17,r18,20
 800dc7c:	9c000504 	addi	r16,r19,20
 800dc80:	9825883a 	mov	r18,r19
 800dc84:	05000044 	movi	r20,1
 800dc88:	1027883a 	mov	r19,r2
 800dc8c:	003fa606 	br	800db28 <__alt_data_end+0xfc00db28>

0800dc90 <__ulp>:
 800dc90:	295ffc2c 	andhi	r5,r5,32752
 800dc94:	00bf3034 	movhi	r2,64704
 800dc98:	2887883a 	add	r3,r5,r2
 800dc9c:	00c0020e 	bge	zero,r3,800dca8 <__ulp+0x18>
 800dca0:	0005883a 	mov	r2,zero
 800dca4:	f800283a 	ret
 800dca8:	00c7c83a 	sub	r3,zero,r3
 800dcac:	1807d53a 	srai	r3,r3,20
 800dcb0:	008004c4 	movi	r2,19
 800dcb4:	10c00b0e 	bge	r2,r3,800dce4 <__ulp+0x54>
 800dcb8:	18bffb04 	addi	r2,r3,-20
 800dcbc:	01000784 	movi	r4,30
 800dcc0:	0007883a 	mov	r3,zero
 800dcc4:	20800516 	blt	r4,r2,800dcdc <__ulp+0x4c>
 800dcc8:	010007c4 	movi	r4,31
 800dccc:	2089c83a 	sub	r4,r4,r2
 800dcd0:	00800044 	movi	r2,1
 800dcd4:	1104983a 	sll	r2,r2,r4
 800dcd8:	f800283a 	ret
 800dcdc:	00800044 	movi	r2,1
 800dce0:	f800283a 	ret
 800dce4:	01400234 	movhi	r5,8
 800dce8:	28c7d83a 	sra	r3,r5,r3
 800dcec:	0005883a 	mov	r2,zero
 800dcf0:	f800283a 	ret

0800dcf4 <__b2d>:
 800dcf4:	defffa04 	addi	sp,sp,-24
 800dcf8:	dc000015 	stw	r16,0(sp)
 800dcfc:	24000417 	ldw	r16,16(r4)
 800dd00:	dc400115 	stw	r17,4(sp)
 800dd04:	24400504 	addi	r17,r4,20
 800dd08:	8421883a 	add	r16,r16,r16
 800dd0c:	8421883a 	add	r16,r16,r16
 800dd10:	8c21883a 	add	r16,r17,r16
 800dd14:	dc800215 	stw	r18,8(sp)
 800dd18:	84bfff17 	ldw	r18,-4(r16)
 800dd1c:	dd000415 	stw	r20,16(sp)
 800dd20:	dcc00315 	stw	r19,12(sp)
 800dd24:	9009883a 	mov	r4,r18
 800dd28:	2829883a 	mov	r20,r5
 800dd2c:	dfc00515 	stw	ra,20(sp)
 800dd30:	800d4600 	call	800d460 <__hi0bits>
 800dd34:	00c00804 	movi	r3,32
 800dd38:	1889c83a 	sub	r4,r3,r2
 800dd3c:	a1000015 	stw	r4,0(r20)
 800dd40:	01000284 	movi	r4,10
 800dd44:	84ffff04 	addi	r19,r16,-4
 800dd48:	20801216 	blt	r4,r2,800dd94 <__b2d+0xa0>
 800dd4c:	018002c4 	movi	r6,11
 800dd50:	308dc83a 	sub	r6,r6,r2
 800dd54:	9186d83a 	srl	r3,r18,r6
 800dd58:	18cffc34 	orhi	r3,r3,16368
 800dd5c:	8cc0212e 	bgeu	r17,r19,800dde4 <__b2d+0xf0>
 800dd60:	813ffe17 	ldw	r4,-8(r16)
 800dd64:	218cd83a 	srl	r6,r4,r6
 800dd68:	10800544 	addi	r2,r2,21
 800dd6c:	9084983a 	sll	r2,r18,r2
 800dd70:	1184b03a 	or	r2,r2,r6
 800dd74:	dfc00517 	ldw	ra,20(sp)
 800dd78:	dd000417 	ldw	r20,16(sp)
 800dd7c:	dcc00317 	ldw	r19,12(sp)
 800dd80:	dc800217 	ldw	r18,8(sp)
 800dd84:	dc400117 	ldw	r17,4(sp)
 800dd88:	dc000017 	ldw	r16,0(sp)
 800dd8c:	dec00604 	addi	sp,sp,24
 800dd90:	f800283a 	ret
 800dd94:	8cc00f2e 	bgeu	r17,r19,800ddd4 <__b2d+0xe0>
 800dd98:	117ffd44 	addi	r5,r2,-11
 800dd9c:	80bffe17 	ldw	r2,-8(r16)
 800dda0:	28000e26 	beq	r5,zero,800dddc <__b2d+0xe8>
 800dda4:	1949c83a 	sub	r4,r3,r5
 800dda8:	9164983a 	sll	r18,r18,r5
 800ddac:	1106d83a 	srl	r3,r2,r4
 800ddb0:	81bffe04 	addi	r6,r16,-8
 800ddb4:	948ffc34 	orhi	r18,r18,16368
 800ddb8:	90c6b03a 	or	r3,r18,r3
 800ddbc:	89800e2e 	bgeu	r17,r6,800ddf8 <__b2d+0x104>
 800ddc0:	81bffd17 	ldw	r6,-12(r16)
 800ddc4:	1144983a 	sll	r2,r2,r5
 800ddc8:	310ad83a 	srl	r5,r6,r4
 800ddcc:	2884b03a 	or	r2,r5,r2
 800ddd0:	003fe806 	br	800dd74 <__alt_data_end+0xfc00dd74>
 800ddd4:	10bffd44 	addi	r2,r2,-11
 800ddd8:	1000041e 	bne	r2,zero,800ddec <__b2d+0xf8>
 800dddc:	90cffc34 	orhi	r3,r18,16368
 800dde0:	003fe406 	br	800dd74 <__alt_data_end+0xfc00dd74>
 800dde4:	000d883a 	mov	r6,zero
 800dde8:	003fdf06 	br	800dd68 <__alt_data_end+0xfc00dd68>
 800ddec:	90a4983a 	sll	r18,r18,r2
 800ddf0:	0005883a 	mov	r2,zero
 800ddf4:	003ff906 	br	800dddc <__alt_data_end+0xfc00dddc>
 800ddf8:	1144983a 	sll	r2,r2,r5
 800ddfc:	003fdd06 	br	800dd74 <__alt_data_end+0xfc00dd74>

0800de00 <__d2b>:
 800de00:	defff804 	addi	sp,sp,-32
 800de04:	dc000215 	stw	r16,8(sp)
 800de08:	3021883a 	mov	r16,r6
 800de0c:	dc400315 	stw	r17,12(sp)
 800de10:	8022907a 	slli	r17,r16,1
 800de14:	dd000615 	stw	r20,24(sp)
 800de18:	2829883a 	mov	r20,r5
 800de1c:	01400044 	movi	r5,1
 800de20:	dcc00515 	stw	r19,20(sp)
 800de24:	dc800415 	stw	r18,16(sp)
 800de28:	dfc00715 	stw	ra,28(sp)
 800de2c:	3825883a 	mov	r18,r7
 800de30:	8822d57a 	srli	r17,r17,21
 800de34:	800d16c0 	call	800d16c <_Balloc>
 800de38:	1027883a 	mov	r19,r2
 800de3c:	00800434 	movhi	r2,16
 800de40:	10bfffc4 	addi	r2,r2,-1
 800de44:	808c703a 	and	r6,r16,r2
 800de48:	88000126 	beq	r17,zero,800de50 <__d2b+0x50>
 800de4c:	31800434 	orhi	r6,r6,16
 800de50:	d9800015 	stw	r6,0(sp)
 800de54:	a0002426 	beq	r20,zero,800dee8 <__d2b+0xe8>
 800de58:	d9000104 	addi	r4,sp,4
 800de5c:	dd000115 	stw	r20,4(sp)
 800de60:	800d4c80 	call	800d4c8 <__lo0bits>
 800de64:	d8c00017 	ldw	r3,0(sp)
 800de68:	10002f1e 	bne	r2,zero,800df28 <__d2b+0x128>
 800de6c:	d9000117 	ldw	r4,4(sp)
 800de70:	99000515 	stw	r4,20(r19)
 800de74:	1821003a 	cmpeq	r16,r3,zero
 800de78:	01000084 	movi	r4,2
 800de7c:	2421c83a 	sub	r16,r4,r16
 800de80:	98c00615 	stw	r3,24(r19)
 800de84:	9c000415 	stw	r16,16(r19)
 800de88:	88001f1e 	bne	r17,zero,800df08 <__d2b+0x108>
 800de8c:	10bef384 	addi	r2,r2,-1074
 800de90:	90800015 	stw	r2,0(r18)
 800de94:	00900034 	movhi	r2,16384
 800de98:	10bfffc4 	addi	r2,r2,-1
 800de9c:	8085883a 	add	r2,r16,r2
 800dea0:	1085883a 	add	r2,r2,r2
 800dea4:	1085883a 	add	r2,r2,r2
 800dea8:	9885883a 	add	r2,r19,r2
 800deac:	11000517 	ldw	r4,20(r2)
 800deb0:	8020917a 	slli	r16,r16,5
 800deb4:	800d4600 	call	800d460 <__hi0bits>
 800deb8:	d8c00817 	ldw	r3,32(sp)
 800debc:	8085c83a 	sub	r2,r16,r2
 800dec0:	18800015 	stw	r2,0(r3)
 800dec4:	9805883a 	mov	r2,r19
 800dec8:	dfc00717 	ldw	ra,28(sp)
 800decc:	dd000617 	ldw	r20,24(sp)
 800ded0:	dcc00517 	ldw	r19,20(sp)
 800ded4:	dc800417 	ldw	r18,16(sp)
 800ded8:	dc400317 	ldw	r17,12(sp)
 800dedc:	dc000217 	ldw	r16,8(sp)
 800dee0:	dec00804 	addi	sp,sp,32
 800dee4:	f800283a 	ret
 800dee8:	d809883a 	mov	r4,sp
 800deec:	800d4c80 	call	800d4c8 <__lo0bits>
 800def0:	d8c00017 	ldw	r3,0(sp)
 800def4:	04000044 	movi	r16,1
 800def8:	9c000415 	stw	r16,16(r19)
 800defc:	98c00515 	stw	r3,20(r19)
 800df00:	10800804 	addi	r2,r2,32
 800df04:	883fe126 	beq	r17,zero,800de8c <__alt_data_end+0xfc00de8c>
 800df08:	00c00d44 	movi	r3,53
 800df0c:	8c7ef344 	addi	r17,r17,-1075
 800df10:	88a3883a 	add	r17,r17,r2
 800df14:	1885c83a 	sub	r2,r3,r2
 800df18:	d8c00817 	ldw	r3,32(sp)
 800df1c:	94400015 	stw	r17,0(r18)
 800df20:	18800015 	stw	r2,0(r3)
 800df24:	003fe706 	br	800dec4 <__alt_data_end+0xfc00dec4>
 800df28:	01000804 	movi	r4,32
 800df2c:	2089c83a 	sub	r4,r4,r2
 800df30:	1908983a 	sll	r4,r3,r4
 800df34:	d9400117 	ldw	r5,4(sp)
 800df38:	1886d83a 	srl	r3,r3,r2
 800df3c:	2148b03a 	or	r4,r4,r5
 800df40:	99000515 	stw	r4,20(r19)
 800df44:	d8c00015 	stw	r3,0(sp)
 800df48:	003fca06 	br	800de74 <__alt_data_end+0xfc00de74>

0800df4c <__ratio>:
 800df4c:	defff904 	addi	sp,sp,-28
 800df50:	dc400315 	stw	r17,12(sp)
 800df54:	2823883a 	mov	r17,r5
 800df58:	d9400104 	addi	r5,sp,4
 800df5c:	dfc00615 	stw	ra,24(sp)
 800df60:	dcc00515 	stw	r19,20(sp)
 800df64:	dc800415 	stw	r18,16(sp)
 800df68:	2027883a 	mov	r19,r4
 800df6c:	dc000215 	stw	r16,8(sp)
 800df70:	800dcf40 	call	800dcf4 <__b2d>
 800df74:	d80b883a 	mov	r5,sp
 800df78:	8809883a 	mov	r4,r17
 800df7c:	1025883a 	mov	r18,r2
 800df80:	1821883a 	mov	r16,r3
 800df84:	800dcf40 	call	800dcf4 <__b2d>
 800df88:	8a000417 	ldw	r8,16(r17)
 800df8c:	99000417 	ldw	r4,16(r19)
 800df90:	d9400117 	ldw	r5,4(sp)
 800df94:	2209c83a 	sub	r4,r4,r8
 800df98:	2010917a 	slli	r8,r4,5
 800df9c:	d9000017 	ldw	r4,0(sp)
 800dfa0:	2909c83a 	sub	r4,r5,r4
 800dfa4:	4109883a 	add	r4,r8,r4
 800dfa8:	01000e0e 	bge	zero,r4,800dfe4 <__ratio+0x98>
 800dfac:	2008953a 	slli	r4,r4,20
 800dfb0:	2421883a 	add	r16,r4,r16
 800dfb4:	100d883a 	mov	r6,r2
 800dfb8:	180f883a 	mov	r7,r3
 800dfbc:	9009883a 	mov	r4,r18
 800dfc0:	800b883a 	mov	r5,r16
 800dfc4:	80052f80 	call	80052f8 <__divdf3>
 800dfc8:	dfc00617 	ldw	ra,24(sp)
 800dfcc:	dcc00517 	ldw	r19,20(sp)
 800dfd0:	dc800417 	ldw	r18,16(sp)
 800dfd4:	dc400317 	ldw	r17,12(sp)
 800dfd8:	dc000217 	ldw	r16,8(sp)
 800dfdc:	dec00704 	addi	sp,sp,28
 800dfe0:	f800283a 	ret
 800dfe4:	2008953a 	slli	r4,r4,20
 800dfe8:	1907c83a 	sub	r3,r3,r4
 800dfec:	003ff106 	br	800dfb4 <__alt_data_end+0xfc00dfb4>

0800dff0 <_mprec_log10>:
 800dff0:	defffe04 	addi	sp,sp,-8
 800dff4:	dc000015 	stw	r16,0(sp)
 800dff8:	dfc00115 	stw	ra,4(sp)
 800dffc:	008005c4 	movi	r2,23
 800e000:	2021883a 	mov	r16,r4
 800e004:	11000d0e 	bge	r2,r4,800e03c <_mprec_log10+0x4c>
 800e008:	0005883a 	mov	r2,zero
 800e00c:	00cffc34 	movhi	r3,16368
 800e010:	843fffc4 	addi	r16,r16,-1
 800e014:	000d883a 	mov	r6,zero
 800e018:	01d00934 	movhi	r7,16420
 800e01c:	1009883a 	mov	r4,r2
 800e020:	180b883a 	mov	r5,r3
 800e024:	8005e380 	call	8005e38 <__muldf3>
 800e028:	803ff91e 	bne	r16,zero,800e010 <__alt_data_end+0xfc00e010>
 800e02c:	dfc00117 	ldw	ra,4(sp)
 800e030:	dc000017 	ldw	r16,0(sp)
 800e034:	dec00204 	addi	sp,sp,8
 800e038:	f800283a 	ret
 800e03c:	202090fa 	slli	r16,r4,3
 800e040:	00820074 	movhi	r2,2049
 800e044:	10975b04 	addi	r2,r2,23916
 800e048:	1421883a 	add	r16,r2,r16
 800e04c:	80800017 	ldw	r2,0(r16)
 800e050:	80c00117 	ldw	r3,4(r16)
 800e054:	dfc00117 	ldw	ra,4(sp)
 800e058:	dc000017 	ldw	r16,0(sp)
 800e05c:	dec00204 	addi	sp,sp,8
 800e060:	f800283a 	ret

0800e064 <__copybits>:
 800e064:	297fffc4 	addi	r5,r5,-1
 800e068:	280fd17a 	srai	r7,r5,5
 800e06c:	30c00417 	ldw	r3,16(r6)
 800e070:	30800504 	addi	r2,r6,20
 800e074:	39c00044 	addi	r7,r7,1
 800e078:	18c7883a 	add	r3,r3,r3
 800e07c:	39cf883a 	add	r7,r7,r7
 800e080:	18c7883a 	add	r3,r3,r3
 800e084:	39cf883a 	add	r7,r7,r7
 800e088:	10c7883a 	add	r3,r2,r3
 800e08c:	21cf883a 	add	r7,r4,r7
 800e090:	10c00d2e 	bgeu	r2,r3,800e0c8 <__copybits+0x64>
 800e094:	200b883a 	mov	r5,r4
 800e098:	12000017 	ldw	r8,0(r2)
 800e09c:	29400104 	addi	r5,r5,4
 800e0a0:	10800104 	addi	r2,r2,4
 800e0a4:	2a3fff15 	stw	r8,-4(r5)
 800e0a8:	10fffb36 	bltu	r2,r3,800e098 <__alt_data_end+0xfc00e098>
 800e0ac:	1985c83a 	sub	r2,r3,r6
 800e0b0:	10bffac4 	addi	r2,r2,-21
 800e0b4:	1004d0ba 	srli	r2,r2,2
 800e0b8:	10800044 	addi	r2,r2,1
 800e0bc:	1085883a 	add	r2,r2,r2
 800e0c0:	1085883a 	add	r2,r2,r2
 800e0c4:	2089883a 	add	r4,r4,r2
 800e0c8:	21c0032e 	bgeu	r4,r7,800e0d8 <__copybits+0x74>
 800e0cc:	20000015 	stw	zero,0(r4)
 800e0d0:	21000104 	addi	r4,r4,4
 800e0d4:	21fffd36 	bltu	r4,r7,800e0cc <__alt_data_end+0xfc00e0cc>
 800e0d8:	f800283a 	ret

0800e0dc <__any_on>:
 800e0dc:	20c00417 	ldw	r3,16(r4)
 800e0e0:	2805d17a 	srai	r2,r5,5
 800e0e4:	21000504 	addi	r4,r4,20
 800e0e8:	18800d0e 	bge	r3,r2,800e120 <__any_on+0x44>
 800e0ec:	18c7883a 	add	r3,r3,r3
 800e0f0:	18c7883a 	add	r3,r3,r3
 800e0f4:	20c7883a 	add	r3,r4,r3
 800e0f8:	20c0192e 	bgeu	r4,r3,800e160 <__any_on+0x84>
 800e0fc:	18bfff17 	ldw	r2,-4(r3)
 800e100:	18ffff04 	addi	r3,r3,-4
 800e104:	1000041e 	bne	r2,zero,800e118 <__any_on+0x3c>
 800e108:	20c0142e 	bgeu	r4,r3,800e15c <__any_on+0x80>
 800e10c:	18ffff04 	addi	r3,r3,-4
 800e110:	19400017 	ldw	r5,0(r3)
 800e114:	283ffc26 	beq	r5,zero,800e108 <__alt_data_end+0xfc00e108>
 800e118:	00800044 	movi	r2,1
 800e11c:	f800283a 	ret
 800e120:	10c00a0e 	bge	r2,r3,800e14c <__any_on+0x70>
 800e124:	1085883a 	add	r2,r2,r2
 800e128:	1085883a 	add	r2,r2,r2
 800e12c:	294007cc 	andi	r5,r5,31
 800e130:	2087883a 	add	r3,r4,r2
 800e134:	283ff026 	beq	r5,zero,800e0f8 <__alt_data_end+0xfc00e0f8>
 800e138:	19800017 	ldw	r6,0(r3)
 800e13c:	3144d83a 	srl	r2,r6,r5
 800e140:	114a983a 	sll	r5,r2,r5
 800e144:	317ff41e 	bne	r6,r5,800e118 <__alt_data_end+0xfc00e118>
 800e148:	003feb06 	br	800e0f8 <__alt_data_end+0xfc00e0f8>
 800e14c:	1085883a 	add	r2,r2,r2
 800e150:	1085883a 	add	r2,r2,r2
 800e154:	2087883a 	add	r3,r4,r2
 800e158:	003fe706 	br	800e0f8 <__alt_data_end+0xfc00e0f8>
 800e15c:	f800283a 	ret
 800e160:	0005883a 	mov	r2,zero
 800e164:	f800283a 	ret

0800e168 <_realloc_r>:
 800e168:	defff604 	addi	sp,sp,-40
 800e16c:	dc800215 	stw	r18,8(sp)
 800e170:	dfc00915 	stw	ra,36(sp)
 800e174:	df000815 	stw	fp,32(sp)
 800e178:	ddc00715 	stw	r23,28(sp)
 800e17c:	dd800615 	stw	r22,24(sp)
 800e180:	dd400515 	stw	r21,20(sp)
 800e184:	dd000415 	stw	r20,16(sp)
 800e188:	dcc00315 	stw	r19,12(sp)
 800e18c:	dc400115 	stw	r17,4(sp)
 800e190:	dc000015 	stw	r16,0(sp)
 800e194:	3025883a 	mov	r18,r6
 800e198:	2800b726 	beq	r5,zero,800e478 <_realloc_r+0x310>
 800e19c:	282b883a 	mov	r21,r5
 800e1a0:	2029883a 	mov	r20,r4
 800e1a4:	80119880 	call	8011988 <__malloc_lock>
 800e1a8:	a8bfff17 	ldw	r2,-4(r21)
 800e1ac:	043fff04 	movi	r16,-4
 800e1b0:	90c002c4 	addi	r3,r18,11
 800e1b4:	01000584 	movi	r4,22
 800e1b8:	acfffe04 	addi	r19,r21,-8
 800e1bc:	1420703a 	and	r16,r2,r16
 800e1c0:	20c0332e 	bgeu	r4,r3,800e290 <_realloc_r+0x128>
 800e1c4:	047ffe04 	movi	r17,-8
 800e1c8:	1c62703a 	and	r17,r3,r17
 800e1cc:	8807883a 	mov	r3,r17
 800e1d0:	88005816 	blt	r17,zero,800e334 <_realloc_r+0x1cc>
 800e1d4:	8c805736 	bltu	r17,r18,800e334 <_realloc_r+0x1cc>
 800e1d8:	80c0300e 	bge	r16,r3,800e29c <_realloc_r+0x134>
 800e1dc:	07020074 	movhi	fp,2049
 800e1e0:	e718e804 	addi	fp,fp,25504
 800e1e4:	e1c00217 	ldw	r7,8(fp)
 800e1e8:	9c09883a 	add	r4,r19,r16
 800e1ec:	22000117 	ldw	r8,4(r4)
 800e1f0:	21c06326 	beq	r4,r7,800e380 <_realloc_r+0x218>
 800e1f4:	017fff84 	movi	r5,-2
 800e1f8:	414a703a 	and	r5,r8,r5
 800e1fc:	214b883a 	add	r5,r4,r5
 800e200:	29800117 	ldw	r6,4(r5)
 800e204:	3180004c 	andi	r6,r6,1
 800e208:	30003f26 	beq	r6,zero,800e308 <_realloc_r+0x1a0>
 800e20c:	1080004c 	andi	r2,r2,1
 800e210:	10008326 	beq	r2,zero,800e420 <_realloc_r+0x2b8>
 800e214:	900b883a 	mov	r5,r18
 800e218:	a009883a 	mov	r4,r20
 800e21c:	800c4b00 	call	800c4b0 <_malloc_r>
 800e220:	1025883a 	mov	r18,r2
 800e224:	10011e26 	beq	r2,zero,800e6a0 <_realloc_r+0x538>
 800e228:	a93fff17 	ldw	r4,-4(r21)
 800e22c:	10fffe04 	addi	r3,r2,-8
 800e230:	00bfff84 	movi	r2,-2
 800e234:	2084703a 	and	r2,r4,r2
 800e238:	9885883a 	add	r2,r19,r2
 800e23c:	1880ee26 	beq	r3,r2,800e5f8 <_realloc_r+0x490>
 800e240:	81bfff04 	addi	r6,r16,-4
 800e244:	00800904 	movi	r2,36
 800e248:	1180b836 	bltu	r2,r6,800e52c <_realloc_r+0x3c4>
 800e24c:	00c004c4 	movi	r3,19
 800e250:	19809636 	bltu	r3,r6,800e4ac <_realloc_r+0x344>
 800e254:	9005883a 	mov	r2,r18
 800e258:	a807883a 	mov	r3,r21
 800e25c:	19000017 	ldw	r4,0(r3)
 800e260:	11000015 	stw	r4,0(r2)
 800e264:	19000117 	ldw	r4,4(r3)
 800e268:	11000115 	stw	r4,4(r2)
 800e26c:	18c00217 	ldw	r3,8(r3)
 800e270:	10c00215 	stw	r3,8(r2)
 800e274:	a80b883a 	mov	r5,r21
 800e278:	a009883a 	mov	r4,r20
 800e27c:	800b8c40 	call	800b8c4 <_free_r>
 800e280:	a009883a 	mov	r4,r20
 800e284:	80119ac0 	call	80119ac <__malloc_unlock>
 800e288:	9005883a 	mov	r2,r18
 800e28c:	00001206 	br	800e2d8 <_realloc_r+0x170>
 800e290:	00c00404 	movi	r3,16
 800e294:	1823883a 	mov	r17,r3
 800e298:	003fce06 	br	800e1d4 <__alt_data_end+0xfc00e1d4>
 800e29c:	a825883a 	mov	r18,r21
 800e2a0:	8445c83a 	sub	r2,r16,r17
 800e2a4:	00c003c4 	movi	r3,15
 800e2a8:	18802636 	bltu	r3,r2,800e344 <_realloc_r+0x1dc>
 800e2ac:	99800117 	ldw	r6,4(r19)
 800e2b0:	9c07883a 	add	r3,r19,r16
 800e2b4:	3180004c 	andi	r6,r6,1
 800e2b8:	3420b03a 	or	r16,r6,r16
 800e2bc:	9c000115 	stw	r16,4(r19)
 800e2c0:	18800117 	ldw	r2,4(r3)
 800e2c4:	10800054 	ori	r2,r2,1
 800e2c8:	18800115 	stw	r2,4(r3)
 800e2cc:	a009883a 	mov	r4,r20
 800e2d0:	80119ac0 	call	80119ac <__malloc_unlock>
 800e2d4:	9005883a 	mov	r2,r18
 800e2d8:	dfc00917 	ldw	ra,36(sp)
 800e2dc:	df000817 	ldw	fp,32(sp)
 800e2e0:	ddc00717 	ldw	r23,28(sp)
 800e2e4:	dd800617 	ldw	r22,24(sp)
 800e2e8:	dd400517 	ldw	r21,20(sp)
 800e2ec:	dd000417 	ldw	r20,16(sp)
 800e2f0:	dcc00317 	ldw	r19,12(sp)
 800e2f4:	dc800217 	ldw	r18,8(sp)
 800e2f8:	dc400117 	ldw	r17,4(sp)
 800e2fc:	dc000017 	ldw	r16,0(sp)
 800e300:	dec00a04 	addi	sp,sp,40
 800e304:	f800283a 	ret
 800e308:	017fff04 	movi	r5,-4
 800e30c:	414a703a 	and	r5,r8,r5
 800e310:	814d883a 	add	r6,r16,r5
 800e314:	30c01f16 	blt	r6,r3,800e394 <_realloc_r+0x22c>
 800e318:	20800317 	ldw	r2,12(r4)
 800e31c:	20c00217 	ldw	r3,8(r4)
 800e320:	a825883a 	mov	r18,r21
 800e324:	3021883a 	mov	r16,r6
 800e328:	18800315 	stw	r2,12(r3)
 800e32c:	10c00215 	stw	r3,8(r2)
 800e330:	003fdb06 	br	800e2a0 <__alt_data_end+0xfc00e2a0>
 800e334:	00800304 	movi	r2,12
 800e338:	a0800015 	stw	r2,0(r20)
 800e33c:	0005883a 	mov	r2,zero
 800e340:	003fe506 	br	800e2d8 <__alt_data_end+0xfc00e2d8>
 800e344:	98c00117 	ldw	r3,4(r19)
 800e348:	9c4b883a 	add	r5,r19,r17
 800e34c:	11000054 	ori	r4,r2,1
 800e350:	18c0004c 	andi	r3,r3,1
 800e354:	1c62b03a 	or	r17,r3,r17
 800e358:	9c400115 	stw	r17,4(r19)
 800e35c:	29000115 	stw	r4,4(r5)
 800e360:	2885883a 	add	r2,r5,r2
 800e364:	10c00117 	ldw	r3,4(r2)
 800e368:	29400204 	addi	r5,r5,8
 800e36c:	a009883a 	mov	r4,r20
 800e370:	18c00054 	ori	r3,r3,1
 800e374:	10c00115 	stw	r3,4(r2)
 800e378:	800b8c40 	call	800b8c4 <_free_r>
 800e37c:	003fd306 	br	800e2cc <__alt_data_end+0xfc00e2cc>
 800e380:	017fff04 	movi	r5,-4
 800e384:	414a703a 	and	r5,r8,r5
 800e388:	89800404 	addi	r6,r17,16
 800e38c:	8151883a 	add	r8,r16,r5
 800e390:	4180590e 	bge	r8,r6,800e4f8 <_realloc_r+0x390>
 800e394:	1080004c 	andi	r2,r2,1
 800e398:	103f9e1e 	bne	r2,zero,800e214 <__alt_data_end+0xfc00e214>
 800e39c:	adbffe17 	ldw	r22,-8(r21)
 800e3a0:	00bfff04 	movi	r2,-4
 800e3a4:	9dadc83a 	sub	r22,r19,r22
 800e3a8:	b1800117 	ldw	r6,4(r22)
 800e3ac:	3084703a 	and	r2,r6,r2
 800e3b0:	20002026 	beq	r4,zero,800e434 <_realloc_r+0x2cc>
 800e3b4:	80af883a 	add	r23,r16,r2
 800e3b8:	b96f883a 	add	r23,r23,r5
 800e3bc:	21c05f26 	beq	r4,r7,800e53c <_realloc_r+0x3d4>
 800e3c0:	b8c01c16 	blt	r23,r3,800e434 <_realloc_r+0x2cc>
 800e3c4:	20800317 	ldw	r2,12(r4)
 800e3c8:	20c00217 	ldw	r3,8(r4)
 800e3cc:	81bfff04 	addi	r6,r16,-4
 800e3d0:	01000904 	movi	r4,36
 800e3d4:	18800315 	stw	r2,12(r3)
 800e3d8:	10c00215 	stw	r3,8(r2)
 800e3dc:	b0c00217 	ldw	r3,8(r22)
 800e3e0:	b0800317 	ldw	r2,12(r22)
 800e3e4:	b4800204 	addi	r18,r22,8
 800e3e8:	18800315 	stw	r2,12(r3)
 800e3ec:	10c00215 	stw	r3,8(r2)
 800e3f0:	21801b36 	bltu	r4,r6,800e460 <_realloc_r+0x2f8>
 800e3f4:	008004c4 	movi	r2,19
 800e3f8:	1180352e 	bgeu	r2,r6,800e4d0 <_realloc_r+0x368>
 800e3fc:	a8800017 	ldw	r2,0(r21)
 800e400:	b0800215 	stw	r2,8(r22)
 800e404:	a8800117 	ldw	r2,4(r21)
 800e408:	b0800315 	stw	r2,12(r22)
 800e40c:	008006c4 	movi	r2,27
 800e410:	11807f36 	bltu	r2,r6,800e610 <_realloc_r+0x4a8>
 800e414:	b0800404 	addi	r2,r22,16
 800e418:	ad400204 	addi	r21,r21,8
 800e41c:	00002d06 	br	800e4d4 <_realloc_r+0x36c>
 800e420:	adbffe17 	ldw	r22,-8(r21)
 800e424:	00bfff04 	movi	r2,-4
 800e428:	9dadc83a 	sub	r22,r19,r22
 800e42c:	b1000117 	ldw	r4,4(r22)
 800e430:	2084703a 	and	r2,r4,r2
 800e434:	b03f7726 	beq	r22,zero,800e214 <__alt_data_end+0xfc00e214>
 800e438:	80af883a 	add	r23,r16,r2
 800e43c:	b8ff7516 	blt	r23,r3,800e214 <__alt_data_end+0xfc00e214>
 800e440:	b0800317 	ldw	r2,12(r22)
 800e444:	b0c00217 	ldw	r3,8(r22)
 800e448:	81bfff04 	addi	r6,r16,-4
 800e44c:	01000904 	movi	r4,36
 800e450:	18800315 	stw	r2,12(r3)
 800e454:	10c00215 	stw	r3,8(r2)
 800e458:	b4800204 	addi	r18,r22,8
 800e45c:	21bfe52e 	bgeu	r4,r6,800e3f4 <__alt_data_end+0xfc00e3f4>
 800e460:	a80b883a 	mov	r5,r21
 800e464:	9009883a 	mov	r4,r18
 800e468:	800cee80 	call	800cee8 <memmove>
 800e46c:	b821883a 	mov	r16,r23
 800e470:	b027883a 	mov	r19,r22
 800e474:	003f8a06 	br	800e2a0 <__alt_data_end+0xfc00e2a0>
 800e478:	300b883a 	mov	r5,r6
 800e47c:	dfc00917 	ldw	ra,36(sp)
 800e480:	df000817 	ldw	fp,32(sp)
 800e484:	ddc00717 	ldw	r23,28(sp)
 800e488:	dd800617 	ldw	r22,24(sp)
 800e48c:	dd400517 	ldw	r21,20(sp)
 800e490:	dd000417 	ldw	r20,16(sp)
 800e494:	dcc00317 	ldw	r19,12(sp)
 800e498:	dc800217 	ldw	r18,8(sp)
 800e49c:	dc400117 	ldw	r17,4(sp)
 800e4a0:	dc000017 	ldw	r16,0(sp)
 800e4a4:	dec00a04 	addi	sp,sp,40
 800e4a8:	800c4b01 	jmpi	800c4b0 <_malloc_r>
 800e4ac:	a8c00017 	ldw	r3,0(r21)
 800e4b0:	90c00015 	stw	r3,0(r18)
 800e4b4:	a8c00117 	ldw	r3,4(r21)
 800e4b8:	90c00115 	stw	r3,4(r18)
 800e4bc:	00c006c4 	movi	r3,27
 800e4c0:	19804536 	bltu	r3,r6,800e5d8 <_realloc_r+0x470>
 800e4c4:	90800204 	addi	r2,r18,8
 800e4c8:	a8c00204 	addi	r3,r21,8
 800e4cc:	003f6306 	br	800e25c <__alt_data_end+0xfc00e25c>
 800e4d0:	9005883a 	mov	r2,r18
 800e4d4:	a8c00017 	ldw	r3,0(r21)
 800e4d8:	b821883a 	mov	r16,r23
 800e4dc:	b027883a 	mov	r19,r22
 800e4e0:	10c00015 	stw	r3,0(r2)
 800e4e4:	a8c00117 	ldw	r3,4(r21)
 800e4e8:	10c00115 	stw	r3,4(r2)
 800e4ec:	a8c00217 	ldw	r3,8(r21)
 800e4f0:	10c00215 	stw	r3,8(r2)
 800e4f4:	003f6a06 	br	800e2a0 <__alt_data_end+0xfc00e2a0>
 800e4f8:	9c67883a 	add	r19,r19,r17
 800e4fc:	4445c83a 	sub	r2,r8,r17
 800e500:	e4c00215 	stw	r19,8(fp)
 800e504:	10800054 	ori	r2,r2,1
 800e508:	98800115 	stw	r2,4(r19)
 800e50c:	a8bfff17 	ldw	r2,-4(r21)
 800e510:	a009883a 	mov	r4,r20
 800e514:	1080004c 	andi	r2,r2,1
 800e518:	1462b03a 	or	r17,r2,r17
 800e51c:	ac7fff15 	stw	r17,-4(r21)
 800e520:	80119ac0 	call	80119ac <__malloc_unlock>
 800e524:	a805883a 	mov	r2,r21
 800e528:	003f6b06 	br	800e2d8 <__alt_data_end+0xfc00e2d8>
 800e52c:	a80b883a 	mov	r5,r21
 800e530:	9009883a 	mov	r4,r18
 800e534:	800cee80 	call	800cee8 <memmove>
 800e538:	003f4e06 	br	800e274 <__alt_data_end+0xfc00e274>
 800e53c:	89000404 	addi	r4,r17,16
 800e540:	b93fbc16 	blt	r23,r4,800e434 <__alt_data_end+0xfc00e434>
 800e544:	b0800317 	ldw	r2,12(r22)
 800e548:	b0c00217 	ldw	r3,8(r22)
 800e54c:	81bfff04 	addi	r6,r16,-4
 800e550:	01000904 	movi	r4,36
 800e554:	18800315 	stw	r2,12(r3)
 800e558:	10c00215 	stw	r3,8(r2)
 800e55c:	b4800204 	addi	r18,r22,8
 800e560:	21804336 	bltu	r4,r6,800e670 <_realloc_r+0x508>
 800e564:	008004c4 	movi	r2,19
 800e568:	11803f2e 	bgeu	r2,r6,800e668 <_realloc_r+0x500>
 800e56c:	a8800017 	ldw	r2,0(r21)
 800e570:	b0800215 	stw	r2,8(r22)
 800e574:	a8800117 	ldw	r2,4(r21)
 800e578:	b0800315 	stw	r2,12(r22)
 800e57c:	008006c4 	movi	r2,27
 800e580:	11803f36 	bltu	r2,r6,800e680 <_realloc_r+0x518>
 800e584:	b0800404 	addi	r2,r22,16
 800e588:	ad400204 	addi	r21,r21,8
 800e58c:	a8c00017 	ldw	r3,0(r21)
 800e590:	10c00015 	stw	r3,0(r2)
 800e594:	a8c00117 	ldw	r3,4(r21)
 800e598:	10c00115 	stw	r3,4(r2)
 800e59c:	a8c00217 	ldw	r3,8(r21)
 800e5a0:	10c00215 	stw	r3,8(r2)
 800e5a4:	b447883a 	add	r3,r22,r17
 800e5a8:	bc45c83a 	sub	r2,r23,r17
 800e5ac:	e0c00215 	stw	r3,8(fp)
 800e5b0:	10800054 	ori	r2,r2,1
 800e5b4:	18800115 	stw	r2,4(r3)
 800e5b8:	b0800117 	ldw	r2,4(r22)
 800e5bc:	a009883a 	mov	r4,r20
 800e5c0:	1080004c 	andi	r2,r2,1
 800e5c4:	1462b03a 	or	r17,r2,r17
 800e5c8:	b4400115 	stw	r17,4(r22)
 800e5cc:	80119ac0 	call	80119ac <__malloc_unlock>
 800e5d0:	9005883a 	mov	r2,r18
 800e5d4:	003f4006 	br	800e2d8 <__alt_data_end+0xfc00e2d8>
 800e5d8:	a8c00217 	ldw	r3,8(r21)
 800e5dc:	90c00215 	stw	r3,8(r18)
 800e5e0:	a8c00317 	ldw	r3,12(r21)
 800e5e4:	90c00315 	stw	r3,12(r18)
 800e5e8:	30801126 	beq	r6,r2,800e630 <_realloc_r+0x4c8>
 800e5ec:	90800404 	addi	r2,r18,16
 800e5f0:	a8c00404 	addi	r3,r21,16
 800e5f4:	003f1906 	br	800e25c <__alt_data_end+0xfc00e25c>
 800e5f8:	90ffff17 	ldw	r3,-4(r18)
 800e5fc:	00bfff04 	movi	r2,-4
 800e600:	a825883a 	mov	r18,r21
 800e604:	1884703a 	and	r2,r3,r2
 800e608:	80a1883a 	add	r16,r16,r2
 800e60c:	003f2406 	br	800e2a0 <__alt_data_end+0xfc00e2a0>
 800e610:	a8800217 	ldw	r2,8(r21)
 800e614:	b0800415 	stw	r2,16(r22)
 800e618:	a8800317 	ldw	r2,12(r21)
 800e61c:	b0800515 	stw	r2,20(r22)
 800e620:	31000a26 	beq	r6,r4,800e64c <_realloc_r+0x4e4>
 800e624:	b0800604 	addi	r2,r22,24
 800e628:	ad400404 	addi	r21,r21,16
 800e62c:	003fa906 	br	800e4d4 <__alt_data_end+0xfc00e4d4>
 800e630:	a9000417 	ldw	r4,16(r21)
 800e634:	90800604 	addi	r2,r18,24
 800e638:	a8c00604 	addi	r3,r21,24
 800e63c:	91000415 	stw	r4,16(r18)
 800e640:	a9000517 	ldw	r4,20(r21)
 800e644:	91000515 	stw	r4,20(r18)
 800e648:	003f0406 	br	800e25c <__alt_data_end+0xfc00e25c>
 800e64c:	a8c00417 	ldw	r3,16(r21)
 800e650:	ad400604 	addi	r21,r21,24
 800e654:	b0800804 	addi	r2,r22,32
 800e658:	b0c00615 	stw	r3,24(r22)
 800e65c:	a8ffff17 	ldw	r3,-4(r21)
 800e660:	b0c00715 	stw	r3,28(r22)
 800e664:	003f9b06 	br	800e4d4 <__alt_data_end+0xfc00e4d4>
 800e668:	9005883a 	mov	r2,r18
 800e66c:	003fc706 	br	800e58c <__alt_data_end+0xfc00e58c>
 800e670:	a80b883a 	mov	r5,r21
 800e674:	9009883a 	mov	r4,r18
 800e678:	800cee80 	call	800cee8 <memmove>
 800e67c:	003fc906 	br	800e5a4 <__alt_data_end+0xfc00e5a4>
 800e680:	a8800217 	ldw	r2,8(r21)
 800e684:	b0800415 	stw	r2,16(r22)
 800e688:	a8800317 	ldw	r2,12(r21)
 800e68c:	b0800515 	stw	r2,20(r22)
 800e690:	31000726 	beq	r6,r4,800e6b0 <_realloc_r+0x548>
 800e694:	b0800604 	addi	r2,r22,24
 800e698:	ad400404 	addi	r21,r21,16
 800e69c:	003fbb06 	br	800e58c <__alt_data_end+0xfc00e58c>
 800e6a0:	a009883a 	mov	r4,r20
 800e6a4:	80119ac0 	call	80119ac <__malloc_unlock>
 800e6a8:	0005883a 	mov	r2,zero
 800e6ac:	003f0a06 	br	800e2d8 <__alt_data_end+0xfc00e2d8>
 800e6b0:	a8c00417 	ldw	r3,16(r21)
 800e6b4:	ad400604 	addi	r21,r21,24
 800e6b8:	b0800804 	addi	r2,r22,32
 800e6bc:	b0c00615 	stw	r3,24(r22)
 800e6c0:	a8ffff17 	ldw	r3,-4(r21)
 800e6c4:	b0c00715 	stw	r3,28(r22)
 800e6c8:	003fb006 	br	800e58c <__alt_data_end+0xfc00e58c>

0800e6cc <_sbrk_r>:
 800e6cc:	defffd04 	addi	sp,sp,-12
 800e6d0:	dc000015 	stw	r16,0(sp)
 800e6d4:	040200b4 	movhi	r16,2050
 800e6d8:	dc400115 	stw	r17,4(sp)
 800e6dc:	8425ca04 	addi	r16,r16,-26840
 800e6e0:	2023883a 	mov	r17,r4
 800e6e4:	2809883a 	mov	r4,r5
 800e6e8:	dfc00215 	stw	ra,8(sp)
 800e6ec:	80000015 	stw	zero,0(r16)
 800e6f0:	8011b6c0 	call	8011b6c <sbrk>
 800e6f4:	00ffffc4 	movi	r3,-1
 800e6f8:	10c00526 	beq	r2,r3,800e710 <_sbrk_r+0x44>
 800e6fc:	dfc00217 	ldw	ra,8(sp)
 800e700:	dc400117 	ldw	r17,4(sp)
 800e704:	dc000017 	ldw	r16,0(sp)
 800e708:	dec00304 	addi	sp,sp,12
 800e70c:	f800283a 	ret
 800e710:	80c00017 	ldw	r3,0(r16)
 800e714:	183ff926 	beq	r3,zero,800e6fc <__alt_data_end+0xfc00e6fc>
 800e718:	88c00015 	stw	r3,0(r17)
 800e71c:	003ff706 	br	800e6fc <__alt_data_end+0xfc00e6fc>

0800e720 <__sread>:
 800e720:	defffe04 	addi	sp,sp,-8
 800e724:	dc000015 	stw	r16,0(sp)
 800e728:	2821883a 	mov	r16,r5
 800e72c:	2940038f 	ldh	r5,14(r5)
 800e730:	dfc00115 	stw	ra,4(sp)
 800e734:	80105140 	call	8010514 <_read_r>
 800e738:	10000716 	blt	r2,zero,800e758 <__sread+0x38>
 800e73c:	80c01417 	ldw	r3,80(r16)
 800e740:	1887883a 	add	r3,r3,r2
 800e744:	80c01415 	stw	r3,80(r16)
 800e748:	dfc00117 	ldw	ra,4(sp)
 800e74c:	dc000017 	ldw	r16,0(sp)
 800e750:	dec00204 	addi	sp,sp,8
 800e754:	f800283a 	ret
 800e758:	80c0030b 	ldhu	r3,12(r16)
 800e75c:	18fbffcc 	andi	r3,r3,61439
 800e760:	80c0030d 	sth	r3,12(r16)
 800e764:	dfc00117 	ldw	ra,4(sp)
 800e768:	dc000017 	ldw	r16,0(sp)
 800e76c:	dec00204 	addi	sp,sp,8
 800e770:	f800283a 	ret

0800e774 <__seofread>:
 800e774:	0005883a 	mov	r2,zero
 800e778:	f800283a 	ret

0800e77c <__swrite>:
 800e77c:	2880030b 	ldhu	r2,12(r5)
 800e780:	defffb04 	addi	sp,sp,-20
 800e784:	dcc00315 	stw	r19,12(sp)
 800e788:	dc800215 	stw	r18,8(sp)
 800e78c:	dc400115 	stw	r17,4(sp)
 800e790:	dc000015 	stw	r16,0(sp)
 800e794:	dfc00415 	stw	ra,16(sp)
 800e798:	10c0400c 	andi	r3,r2,256
 800e79c:	2821883a 	mov	r16,r5
 800e7a0:	2023883a 	mov	r17,r4
 800e7a4:	3025883a 	mov	r18,r6
 800e7a8:	3827883a 	mov	r19,r7
 800e7ac:	18000526 	beq	r3,zero,800e7c4 <__swrite+0x48>
 800e7b0:	2940038f 	ldh	r5,14(r5)
 800e7b4:	01c00084 	movi	r7,2
 800e7b8:	000d883a 	mov	r6,zero
 800e7bc:	80104b40 	call	80104b4 <_lseek_r>
 800e7c0:	8080030b 	ldhu	r2,12(r16)
 800e7c4:	8140038f 	ldh	r5,14(r16)
 800e7c8:	10bbffcc 	andi	r2,r2,61439
 800e7cc:	980f883a 	mov	r7,r19
 800e7d0:	900d883a 	mov	r6,r18
 800e7d4:	8809883a 	mov	r4,r17
 800e7d8:	8080030d 	sth	r2,12(r16)
 800e7dc:	dfc00417 	ldw	ra,16(sp)
 800e7e0:	dcc00317 	ldw	r19,12(sp)
 800e7e4:	dc800217 	ldw	r18,8(sp)
 800e7e8:	dc400117 	ldw	r17,4(sp)
 800e7ec:	dc000017 	ldw	r16,0(sp)
 800e7f0:	dec00504 	addi	sp,sp,20
 800e7f4:	800ff801 	jmpi	800ff80 <_write_r>

0800e7f8 <__sseek>:
 800e7f8:	defffe04 	addi	sp,sp,-8
 800e7fc:	dc000015 	stw	r16,0(sp)
 800e800:	2821883a 	mov	r16,r5
 800e804:	2940038f 	ldh	r5,14(r5)
 800e808:	dfc00115 	stw	ra,4(sp)
 800e80c:	80104b40 	call	80104b4 <_lseek_r>
 800e810:	00ffffc4 	movi	r3,-1
 800e814:	10c00826 	beq	r2,r3,800e838 <__sseek+0x40>
 800e818:	80c0030b 	ldhu	r3,12(r16)
 800e81c:	80801415 	stw	r2,80(r16)
 800e820:	18c40014 	ori	r3,r3,4096
 800e824:	80c0030d 	sth	r3,12(r16)
 800e828:	dfc00117 	ldw	ra,4(sp)
 800e82c:	dc000017 	ldw	r16,0(sp)
 800e830:	dec00204 	addi	sp,sp,8
 800e834:	f800283a 	ret
 800e838:	80c0030b 	ldhu	r3,12(r16)
 800e83c:	18fbffcc 	andi	r3,r3,61439
 800e840:	80c0030d 	sth	r3,12(r16)
 800e844:	dfc00117 	ldw	ra,4(sp)
 800e848:	dc000017 	ldw	r16,0(sp)
 800e84c:	dec00204 	addi	sp,sp,8
 800e850:	f800283a 	ret

0800e854 <__sclose>:
 800e854:	2940038f 	ldh	r5,14(r5)
 800e858:	800ffe01 	jmpi	800ffe0 <_close_r>

0800e85c <strcmp>:
 800e85c:	2144b03a 	or	r2,r4,r5
 800e860:	108000cc 	andi	r2,r2,3
 800e864:	1000171e 	bne	r2,zero,800e8c4 <strcmp+0x68>
 800e868:	20800017 	ldw	r2,0(r4)
 800e86c:	28c00017 	ldw	r3,0(r5)
 800e870:	10c0141e 	bne	r2,r3,800e8c4 <strcmp+0x68>
 800e874:	027fbff4 	movhi	r9,65279
 800e878:	4a7fbfc4 	addi	r9,r9,-257
 800e87c:	0086303a 	nor	r3,zero,r2
 800e880:	02202074 	movhi	r8,32897
 800e884:	1245883a 	add	r2,r2,r9
 800e888:	42202004 	addi	r8,r8,-32640
 800e88c:	10c4703a 	and	r2,r2,r3
 800e890:	1204703a 	and	r2,r2,r8
 800e894:	10000226 	beq	r2,zero,800e8a0 <strcmp+0x44>
 800e898:	00002306 	br	800e928 <strcmp+0xcc>
 800e89c:	1000221e 	bne	r2,zero,800e928 <strcmp+0xcc>
 800e8a0:	21000104 	addi	r4,r4,4
 800e8a4:	20c00017 	ldw	r3,0(r4)
 800e8a8:	29400104 	addi	r5,r5,4
 800e8ac:	29800017 	ldw	r6,0(r5)
 800e8b0:	1a4f883a 	add	r7,r3,r9
 800e8b4:	00c4303a 	nor	r2,zero,r3
 800e8b8:	3884703a 	and	r2,r7,r2
 800e8bc:	1204703a 	and	r2,r2,r8
 800e8c0:	19bff626 	beq	r3,r6,800e89c <__alt_data_end+0xfc00e89c>
 800e8c4:	20800003 	ldbu	r2,0(r4)
 800e8c8:	10c03fcc 	andi	r3,r2,255
 800e8cc:	18c0201c 	xori	r3,r3,128
 800e8d0:	18ffe004 	addi	r3,r3,-128
 800e8d4:	18000c26 	beq	r3,zero,800e908 <strcmp+0xac>
 800e8d8:	29800007 	ldb	r6,0(r5)
 800e8dc:	19800326 	beq	r3,r6,800e8ec <strcmp+0x90>
 800e8e0:	00001306 	br	800e930 <strcmp+0xd4>
 800e8e4:	29800007 	ldb	r6,0(r5)
 800e8e8:	11800b1e 	bne	r2,r6,800e918 <strcmp+0xbc>
 800e8ec:	21000044 	addi	r4,r4,1
 800e8f0:	20c00003 	ldbu	r3,0(r4)
 800e8f4:	29400044 	addi	r5,r5,1
 800e8f8:	18803fcc 	andi	r2,r3,255
 800e8fc:	1080201c 	xori	r2,r2,128
 800e900:	10bfe004 	addi	r2,r2,-128
 800e904:	103ff71e 	bne	r2,zero,800e8e4 <__alt_data_end+0xfc00e8e4>
 800e908:	0007883a 	mov	r3,zero
 800e90c:	28800003 	ldbu	r2,0(r5)
 800e910:	1885c83a 	sub	r2,r3,r2
 800e914:	f800283a 	ret
 800e918:	28800003 	ldbu	r2,0(r5)
 800e91c:	18c03fcc 	andi	r3,r3,255
 800e920:	1885c83a 	sub	r2,r3,r2
 800e924:	f800283a 	ret
 800e928:	0005883a 	mov	r2,zero
 800e92c:	f800283a 	ret
 800e930:	10c03fcc 	andi	r3,r2,255
 800e934:	003ff506 	br	800e90c <__alt_data_end+0xfc00e90c>

0800e938 <__sprint_r.part.0>:
 800e938:	28801917 	ldw	r2,100(r5)
 800e93c:	defff604 	addi	sp,sp,-40
 800e940:	dd400515 	stw	r21,20(sp)
 800e944:	dfc00915 	stw	ra,36(sp)
 800e948:	df000815 	stw	fp,32(sp)
 800e94c:	ddc00715 	stw	r23,28(sp)
 800e950:	dd800615 	stw	r22,24(sp)
 800e954:	dd000415 	stw	r20,16(sp)
 800e958:	dcc00315 	stw	r19,12(sp)
 800e95c:	dc800215 	stw	r18,8(sp)
 800e960:	dc400115 	stw	r17,4(sp)
 800e964:	dc000015 	stw	r16,0(sp)
 800e968:	1088000c 	andi	r2,r2,8192
 800e96c:	302b883a 	mov	r21,r6
 800e970:	10002e26 	beq	r2,zero,800ea2c <__sprint_r.part.0+0xf4>
 800e974:	30800217 	ldw	r2,8(r6)
 800e978:	35800017 	ldw	r22,0(r6)
 800e97c:	10002926 	beq	r2,zero,800ea24 <__sprint_r.part.0+0xec>
 800e980:	2827883a 	mov	r19,r5
 800e984:	2029883a 	mov	r20,r4
 800e988:	b5c00104 	addi	r23,r22,4
 800e98c:	04bfffc4 	movi	r18,-1
 800e990:	bc400017 	ldw	r17,0(r23)
 800e994:	b4000017 	ldw	r16,0(r22)
 800e998:	0039883a 	mov	fp,zero
 800e99c:	8822d0ba 	srli	r17,r17,2
 800e9a0:	8800031e 	bne	r17,zero,800e9b0 <__sprint_r.part.0+0x78>
 800e9a4:	00001806 	br	800ea08 <__sprint_r.part.0+0xd0>
 800e9a8:	84000104 	addi	r16,r16,4
 800e9ac:	8f001526 	beq	r17,fp,800ea04 <__sprint_r.part.0+0xcc>
 800e9b0:	81400017 	ldw	r5,0(r16)
 800e9b4:	980d883a 	mov	r6,r19
 800e9b8:	a009883a 	mov	r4,r20
 800e9bc:	80103600 	call	8010360 <_fputwc_r>
 800e9c0:	e7000044 	addi	fp,fp,1
 800e9c4:	14bff81e 	bne	r2,r18,800e9a8 <__alt_data_end+0xfc00e9a8>
 800e9c8:	9005883a 	mov	r2,r18
 800e9cc:	a8000215 	stw	zero,8(r21)
 800e9d0:	a8000115 	stw	zero,4(r21)
 800e9d4:	dfc00917 	ldw	ra,36(sp)
 800e9d8:	df000817 	ldw	fp,32(sp)
 800e9dc:	ddc00717 	ldw	r23,28(sp)
 800e9e0:	dd800617 	ldw	r22,24(sp)
 800e9e4:	dd400517 	ldw	r21,20(sp)
 800e9e8:	dd000417 	ldw	r20,16(sp)
 800e9ec:	dcc00317 	ldw	r19,12(sp)
 800e9f0:	dc800217 	ldw	r18,8(sp)
 800e9f4:	dc400117 	ldw	r17,4(sp)
 800e9f8:	dc000017 	ldw	r16,0(sp)
 800e9fc:	dec00a04 	addi	sp,sp,40
 800ea00:	f800283a 	ret
 800ea04:	a8800217 	ldw	r2,8(r21)
 800ea08:	8c63883a 	add	r17,r17,r17
 800ea0c:	8c63883a 	add	r17,r17,r17
 800ea10:	1445c83a 	sub	r2,r2,r17
 800ea14:	a8800215 	stw	r2,8(r21)
 800ea18:	b5800204 	addi	r22,r22,8
 800ea1c:	bdc00204 	addi	r23,r23,8
 800ea20:	103fdb1e 	bne	r2,zero,800e990 <__alt_data_end+0xfc00e990>
 800ea24:	0005883a 	mov	r2,zero
 800ea28:	003fe806 	br	800e9cc <__alt_data_end+0xfc00e9cc>
 800ea2c:	800bbd40 	call	800bbd4 <__sfvwrite_r>
 800ea30:	003fe606 	br	800e9cc <__alt_data_end+0xfc00e9cc>

0800ea34 <__sprint_r>:
 800ea34:	30c00217 	ldw	r3,8(r6)
 800ea38:	18000126 	beq	r3,zero,800ea40 <__sprint_r+0xc>
 800ea3c:	800e9381 	jmpi	800e938 <__sprint_r.part.0>
 800ea40:	30000115 	stw	zero,4(r6)
 800ea44:	0005883a 	mov	r2,zero
 800ea48:	f800283a 	ret

0800ea4c <___vfiprintf_internal_r>:
 800ea4c:	deffc904 	addi	sp,sp,-220
 800ea50:	df003515 	stw	fp,212(sp)
 800ea54:	dd003115 	stw	r20,196(sp)
 800ea58:	dfc03615 	stw	ra,216(sp)
 800ea5c:	ddc03415 	stw	r23,208(sp)
 800ea60:	dd803315 	stw	r22,204(sp)
 800ea64:	dd403215 	stw	r21,200(sp)
 800ea68:	dcc03015 	stw	r19,192(sp)
 800ea6c:	dc802f15 	stw	r18,188(sp)
 800ea70:	dc402e15 	stw	r17,184(sp)
 800ea74:	dc002d15 	stw	r16,180(sp)
 800ea78:	d9002015 	stw	r4,128(sp)
 800ea7c:	d9c02215 	stw	r7,136(sp)
 800ea80:	2829883a 	mov	r20,r5
 800ea84:	3039883a 	mov	fp,r6
 800ea88:	20000226 	beq	r4,zero,800ea94 <___vfiprintf_internal_r+0x48>
 800ea8c:	20800e17 	ldw	r2,56(r4)
 800ea90:	1000cf26 	beq	r2,zero,800edd0 <___vfiprintf_internal_r+0x384>
 800ea94:	a080030b 	ldhu	r2,12(r20)
 800ea98:	10c8000c 	andi	r3,r2,8192
 800ea9c:	1800061e 	bne	r3,zero,800eab8 <___vfiprintf_internal_r+0x6c>
 800eaa0:	a1001917 	ldw	r4,100(r20)
 800eaa4:	00f7ffc4 	movi	r3,-8193
 800eaa8:	10880014 	ori	r2,r2,8192
 800eaac:	20c6703a 	and	r3,r4,r3
 800eab0:	a080030d 	sth	r2,12(r20)
 800eab4:	a0c01915 	stw	r3,100(r20)
 800eab8:	10c0020c 	andi	r3,r2,8
 800eabc:	1800a926 	beq	r3,zero,800ed64 <___vfiprintf_internal_r+0x318>
 800eac0:	a0c00417 	ldw	r3,16(r20)
 800eac4:	1800a726 	beq	r3,zero,800ed64 <___vfiprintf_internal_r+0x318>
 800eac8:	1080068c 	andi	r2,r2,26
 800eacc:	00c00284 	movi	r3,10
 800ead0:	10c0ac26 	beq	r2,r3,800ed84 <___vfiprintf_internal_r+0x338>
 800ead4:	da801a04 	addi	r10,sp,104
 800ead8:	da801e15 	stw	r10,120(sp)
 800eadc:	d8801e17 	ldw	r2,120(sp)
 800eae0:	da8019c4 	addi	r10,sp,103
 800eae4:	05820074 	movhi	r22,2049
 800eae8:	05c20074 	movhi	r23,2049
 800eaec:	da801f15 	stw	r10,124(sp)
 800eaf0:	1295c83a 	sub	r10,r2,r10
 800eaf4:	b5979104 	addi	r22,r22,24132
 800eaf8:	bdd78d04 	addi	r23,r23,24116
 800eafc:	dec01a15 	stw	sp,104(sp)
 800eb00:	d8001c15 	stw	zero,112(sp)
 800eb04:	d8001b15 	stw	zero,108(sp)
 800eb08:	d8002615 	stw	zero,152(sp)
 800eb0c:	d8002315 	stw	zero,140(sp)
 800eb10:	da802715 	stw	r10,156(sp)
 800eb14:	d811883a 	mov	r8,sp
 800eb18:	dd002115 	stw	r20,132(sp)
 800eb1c:	e021883a 	mov	r16,fp
 800eb20:	80800007 	ldb	r2,0(r16)
 800eb24:	1003ea26 	beq	r2,zero,800fad0 <___vfiprintf_internal_r+0x1084>
 800eb28:	00c00944 	movi	r3,37
 800eb2c:	8025883a 	mov	r18,r16
 800eb30:	10c0021e 	bne	r2,r3,800eb3c <___vfiprintf_internal_r+0xf0>
 800eb34:	00001606 	br	800eb90 <___vfiprintf_internal_r+0x144>
 800eb38:	10c00326 	beq	r2,r3,800eb48 <___vfiprintf_internal_r+0xfc>
 800eb3c:	94800044 	addi	r18,r18,1
 800eb40:	90800007 	ldb	r2,0(r18)
 800eb44:	103ffc1e 	bne	r2,zero,800eb38 <__alt_data_end+0xfc00eb38>
 800eb48:	9423c83a 	sub	r17,r18,r16
 800eb4c:	88001026 	beq	r17,zero,800eb90 <___vfiprintf_internal_r+0x144>
 800eb50:	d8c01c17 	ldw	r3,112(sp)
 800eb54:	d8801b17 	ldw	r2,108(sp)
 800eb58:	44000015 	stw	r16,0(r8)
 800eb5c:	88c7883a 	add	r3,r17,r3
 800eb60:	10800044 	addi	r2,r2,1
 800eb64:	44400115 	stw	r17,4(r8)
 800eb68:	d8c01c15 	stw	r3,112(sp)
 800eb6c:	d8801b15 	stw	r2,108(sp)
 800eb70:	010001c4 	movi	r4,7
 800eb74:	2080760e 	bge	r4,r2,800ed50 <___vfiprintf_internal_r+0x304>
 800eb78:	1803821e 	bne	r3,zero,800f984 <___vfiprintf_internal_r+0xf38>
 800eb7c:	da802317 	ldw	r10,140(sp)
 800eb80:	d8001b15 	stw	zero,108(sp)
 800eb84:	d811883a 	mov	r8,sp
 800eb88:	5455883a 	add	r10,r10,r17
 800eb8c:	da802315 	stw	r10,140(sp)
 800eb90:	90800007 	ldb	r2,0(r18)
 800eb94:	10044626 	beq	r2,zero,800fcb0 <___vfiprintf_internal_r+0x1264>
 800eb98:	90c00047 	ldb	r3,1(r18)
 800eb9c:	94000044 	addi	r16,r18,1
 800eba0:	d8001d85 	stb	zero,118(sp)
 800eba4:	0009883a 	mov	r4,zero
 800eba8:	000f883a 	mov	r7,zero
 800ebac:	027fffc4 	movi	r9,-1
 800ebb0:	0023883a 	mov	r17,zero
 800ebb4:	0029883a 	mov	r20,zero
 800ebb8:	01401604 	movi	r5,88
 800ebbc:	01800244 	movi	r6,9
 800ebc0:	03400a84 	movi	r13,42
 800ebc4:	03001b04 	movi	r12,108
 800ebc8:	84000044 	addi	r16,r16,1
 800ebcc:	18bff804 	addi	r2,r3,-32
 800ebd0:	28827336 	bltu	r5,r2,800f5a0 <___vfiprintf_internal_r+0xb54>
 800ebd4:	100490ba 	slli	r2,r2,2
 800ebd8:	02820074 	movhi	r10,2049
 800ebdc:	52bafb04 	addi	r10,r10,-5140
 800ebe0:	1285883a 	add	r2,r2,r10
 800ebe4:	10800017 	ldw	r2,0(r2)
 800ebe8:	1000683a 	jmp	r2
 800ebec:	0800f2d4 	ori	zero,at,971
 800ebf0:	0800f5a0 	cmpeqi	zero,at,982
 800ebf4:	0800f5a0 	cmpeqi	zero,at,982
 800ebf8:	0800f2f4 	orhi	zero,at,971
 800ebfc:	0800f5a0 	cmpeqi	zero,at,982
 800ec00:	0800f5a0 	cmpeqi	zero,at,982
 800ec04:	0800f5a0 	cmpeqi	zero,at,982
 800ec08:	0800f5a0 	cmpeqi	zero,at,982
 800ec0c:	0800f5a0 	cmpeqi	zero,at,982
 800ec10:	0800f5a0 	cmpeqi	zero,at,982
 800ec14:	0800f4dc 	xori	zero,at,979
 800ec18:	0800f4f8 	rdprs	zero,at,979
 800ec1c:	0800f5a0 	cmpeqi	zero,at,982
 800ec20:	0800ede0 	cmpeqi	zero,at,951
 800ec24:	0800f508 	cmpgei	zero,at,980
 800ec28:	0800f5a0 	cmpeqi	zero,at,982
 800ec2c:	0800f300 	call	800f30 <__ram_exceptions_end+0x7e0ce8>
 800ec30:	0800f30c 	andi	zero,at,972
 800ec34:	0800f30c 	andi	zero,at,972
 800ec38:	0800f30c 	andi	zero,at,972
 800ec3c:	0800f30c 	andi	zero,at,972
 800ec40:	0800f30c 	andi	zero,at,972
 800ec44:	0800f30c 	andi	zero,at,972
 800ec48:	0800f30c 	andi	zero,at,972
 800ec4c:	0800f30c 	andi	zero,at,972
 800ec50:	0800f30c 	andi	zero,at,972
 800ec54:	0800f5a0 	cmpeqi	zero,at,982
 800ec58:	0800f5a0 	cmpeqi	zero,at,982
 800ec5c:	0800f5a0 	cmpeqi	zero,at,982
 800ec60:	0800f5a0 	cmpeqi	zero,at,982
 800ec64:	0800f5a0 	cmpeqi	zero,at,982
 800ec68:	0800f5a0 	cmpeqi	zero,at,982
 800ec6c:	0800f5a0 	cmpeqi	zero,at,982
 800ec70:	0800f5a0 	cmpeqi	zero,at,982
 800ec74:	0800f5a0 	cmpeqi	zero,at,982
 800ec78:	0800f5a0 	cmpeqi	zero,at,982
 800ec7c:	0800f338 	rdprs	zero,at,972
 800ec80:	0800f5a0 	cmpeqi	zero,at,982
 800ec84:	0800f5a0 	cmpeqi	zero,at,982
 800ec88:	0800f5a0 	cmpeqi	zero,at,982
 800ec8c:	0800f5a0 	cmpeqi	zero,at,982
 800ec90:	0800f5a0 	cmpeqi	zero,at,982
 800ec94:	0800f5a0 	cmpeqi	zero,at,982
 800ec98:	0800f5a0 	cmpeqi	zero,at,982
 800ec9c:	0800f5a0 	cmpeqi	zero,at,982
 800eca0:	0800f5a0 	cmpeqi	zero,at,982
 800eca4:	0800f5a0 	cmpeqi	zero,at,982
 800eca8:	0800f370 	cmpltui	zero,at,973
 800ecac:	0800f5a0 	cmpeqi	zero,at,982
 800ecb0:	0800f5a0 	cmpeqi	zero,at,982
 800ecb4:	0800f5a0 	cmpeqi	zero,at,982
 800ecb8:	0800f5a0 	cmpeqi	zero,at,982
 800ecbc:	0800f5a0 	cmpeqi	zero,at,982
 800ecc0:	0800f3c8 	cmpgei	zero,at,975
 800ecc4:	0800f5a0 	cmpeqi	zero,at,982
 800ecc8:	0800f5a0 	cmpeqi	zero,at,982
 800eccc:	0800f438 	rdprs	zero,at,976
 800ecd0:	0800f5a0 	cmpeqi	zero,at,982
 800ecd4:	0800f5a0 	cmpeqi	zero,at,982
 800ecd8:	0800f5a0 	cmpeqi	zero,at,982
 800ecdc:	0800f5a0 	cmpeqi	zero,at,982
 800ece0:	0800f5a0 	cmpeqi	zero,at,982
 800ece4:	0800f5a0 	cmpeqi	zero,at,982
 800ece8:	0800f5a0 	cmpeqi	zero,at,982
 800ecec:	0800f5a0 	cmpeqi	zero,at,982
 800ecf0:	0800f5a0 	cmpeqi	zero,at,982
 800ecf4:	0800f5a0 	cmpeqi	zero,at,982
 800ecf8:	0800f1e4 	muli	zero,at,967
 800ecfc:	0800f210 	cmplti	zero,at,968
 800ed00:	0800f5a0 	cmpeqi	zero,at,982
 800ed04:	0800f5a0 	cmpeqi	zero,at,982
 800ed08:	0800f5a0 	cmpeqi	zero,at,982
 800ed0c:	0800f548 	cmpgei	zero,at,981
 800ed10:	0800f210 	cmplti	zero,at,968
 800ed14:	0800f5a0 	cmpeqi	zero,at,982
 800ed18:	0800f5a0 	cmpeqi	zero,at,982
 800ed1c:	0800f0a4 	muli	zero,at,962
 800ed20:	0800f5a0 	cmpeqi	zero,at,982
 800ed24:	0800f0b4 	orhi	zero,at,962
 800ed28:	0800f0f0 	cmpltui	zero,at,963
 800ed2c:	0800edec 	andhi	zero,at,951
 800ed30:	0800f098 	cmpnei	zero,at,962
 800ed34:	0800f5a0 	cmpeqi	zero,at,982
 800ed38:	0800f474 	orhi	zero,at,977
 800ed3c:	0800f5a0 	cmpeqi	zero,at,982
 800ed40:	0800f4cc 	andi	zero,at,979
 800ed44:	0800f5a0 	cmpeqi	zero,at,982
 800ed48:	0800f5a0 	cmpeqi	zero,at,982
 800ed4c:	0800f190 	cmplti	zero,at,966
 800ed50:	42000204 	addi	r8,r8,8
 800ed54:	da802317 	ldw	r10,140(sp)
 800ed58:	5455883a 	add	r10,r10,r17
 800ed5c:	da802315 	stw	r10,140(sp)
 800ed60:	003f8b06 	br	800eb90 <__alt_data_end+0xfc00eb90>
 800ed64:	d9002017 	ldw	r4,128(sp)
 800ed68:	a00b883a 	mov	r5,r20
 800ed6c:	800977c0 	call	800977c <__swsetup_r>
 800ed70:	1003b11e 	bne	r2,zero,800fc38 <___vfiprintf_internal_r+0x11ec>
 800ed74:	a080030b 	ldhu	r2,12(r20)
 800ed78:	00c00284 	movi	r3,10
 800ed7c:	1080068c 	andi	r2,r2,26
 800ed80:	10ff541e 	bne	r2,r3,800ead4 <__alt_data_end+0xfc00ead4>
 800ed84:	a080038f 	ldh	r2,14(r20)
 800ed88:	103f5216 	blt	r2,zero,800ead4 <__alt_data_end+0xfc00ead4>
 800ed8c:	d9c02217 	ldw	r7,136(sp)
 800ed90:	d9002017 	ldw	r4,128(sp)
 800ed94:	e00d883a 	mov	r6,fp
 800ed98:	a00b883a 	mov	r5,r20
 800ed9c:	800fec40 	call	800fec4 <__sbprintf>
 800eda0:	dfc03617 	ldw	ra,216(sp)
 800eda4:	df003517 	ldw	fp,212(sp)
 800eda8:	ddc03417 	ldw	r23,208(sp)
 800edac:	dd803317 	ldw	r22,204(sp)
 800edb0:	dd403217 	ldw	r21,200(sp)
 800edb4:	dd003117 	ldw	r20,196(sp)
 800edb8:	dcc03017 	ldw	r19,192(sp)
 800edbc:	dc802f17 	ldw	r18,188(sp)
 800edc0:	dc402e17 	ldw	r17,184(sp)
 800edc4:	dc002d17 	ldw	r16,180(sp)
 800edc8:	dec03704 	addi	sp,sp,220
 800edcc:	f800283a 	ret
 800edd0:	800b7500 	call	800b750 <__sinit>
 800edd4:	003f2f06 	br	800ea94 <__alt_data_end+0xfc00ea94>
 800edd8:	0463c83a 	sub	r17,zero,r17
 800eddc:	d8802215 	stw	r2,136(sp)
 800ede0:	a5000114 	ori	r20,r20,4
 800ede4:	80c00007 	ldb	r3,0(r16)
 800ede8:	003f7706 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800edec:	00800c04 	movi	r2,48
 800edf0:	da802217 	ldw	r10,136(sp)
 800edf4:	d8801d05 	stb	r2,116(sp)
 800edf8:	00801e04 	movi	r2,120
 800edfc:	d8801d45 	stb	r2,117(sp)
 800ee00:	d8001d85 	stb	zero,118(sp)
 800ee04:	50c00104 	addi	r3,r10,4
 800ee08:	54800017 	ldw	r18,0(r10)
 800ee0c:	0027883a 	mov	r19,zero
 800ee10:	a0800094 	ori	r2,r20,2
 800ee14:	48030b16 	blt	r9,zero,800fa44 <___vfiprintf_internal_r+0xff8>
 800ee18:	00bfdfc4 	movi	r2,-129
 800ee1c:	a096703a 	and	r11,r20,r2
 800ee20:	d8c02215 	stw	r3,136(sp)
 800ee24:	5d000094 	ori	r20,r11,2
 800ee28:	90032b1e 	bne	r18,zero,800fad8 <___vfiprintf_internal_r+0x108c>
 800ee2c:	00820074 	movhi	r2,2049
 800ee30:	10972d04 	addi	r2,r2,23732
 800ee34:	d8802615 	stw	r2,152(sp)
 800ee38:	0039883a 	mov	fp,zero
 800ee3c:	48017b1e 	bne	r9,zero,800f42c <___vfiprintf_internal_r+0x9e0>
 800ee40:	0013883a 	mov	r9,zero
 800ee44:	0027883a 	mov	r19,zero
 800ee48:	dd401a04 	addi	r21,sp,104
 800ee4c:	4825883a 	mov	r18,r9
 800ee50:	4cc0010e 	bge	r9,r19,800ee58 <___vfiprintf_internal_r+0x40c>
 800ee54:	9825883a 	mov	r18,r19
 800ee58:	e7003fcc 	andi	fp,fp,255
 800ee5c:	e700201c 	xori	fp,fp,128
 800ee60:	e73fe004 	addi	fp,fp,-128
 800ee64:	e0000126 	beq	fp,zero,800ee6c <___vfiprintf_internal_r+0x420>
 800ee68:	94800044 	addi	r18,r18,1
 800ee6c:	a380008c 	andi	r14,r20,2
 800ee70:	70000126 	beq	r14,zero,800ee78 <___vfiprintf_internal_r+0x42c>
 800ee74:	94800084 	addi	r18,r18,2
 800ee78:	a700210c 	andi	fp,r20,132
 800ee7c:	e001df1e 	bne	fp,zero,800f5fc <___vfiprintf_internal_r+0xbb0>
 800ee80:	8c87c83a 	sub	r3,r17,r18
 800ee84:	00c1dd0e 	bge	zero,r3,800f5fc <___vfiprintf_internal_r+0xbb0>
 800ee88:	01c00404 	movi	r7,16
 800ee8c:	d8801c17 	ldw	r2,112(sp)
 800ee90:	38c3ad0e 	bge	r7,r3,800fd48 <___vfiprintf_internal_r+0x12fc>
 800ee94:	02820074 	movhi	r10,2049
 800ee98:	52979104 	addi	r10,r10,24132
 800ee9c:	dc002915 	stw	r16,164(sp)
 800eea0:	d9801b17 	ldw	r6,108(sp)
 800eea4:	da802415 	stw	r10,144(sp)
 800eea8:	03c001c4 	movi	r15,7
 800eeac:	da402515 	stw	r9,148(sp)
 800eeb0:	db802815 	stw	r14,160(sp)
 800eeb4:	1821883a 	mov	r16,r3
 800eeb8:	00000506 	br	800eed0 <___vfiprintf_internal_r+0x484>
 800eebc:	31400084 	addi	r5,r6,2
 800eec0:	42000204 	addi	r8,r8,8
 800eec4:	200d883a 	mov	r6,r4
 800eec8:	843ffc04 	addi	r16,r16,-16
 800eecc:	3c000d0e 	bge	r7,r16,800ef04 <___vfiprintf_internal_r+0x4b8>
 800eed0:	10800404 	addi	r2,r2,16
 800eed4:	31000044 	addi	r4,r6,1
 800eed8:	45800015 	stw	r22,0(r8)
 800eedc:	41c00115 	stw	r7,4(r8)
 800eee0:	d8801c15 	stw	r2,112(sp)
 800eee4:	d9001b15 	stw	r4,108(sp)
 800eee8:	793ff40e 	bge	r15,r4,800eebc <__alt_data_end+0xfc00eebc>
 800eeec:	1001b51e 	bne	r2,zero,800f5c4 <___vfiprintf_internal_r+0xb78>
 800eef0:	843ffc04 	addi	r16,r16,-16
 800eef4:	000d883a 	mov	r6,zero
 800eef8:	01400044 	movi	r5,1
 800eefc:	d811883a 	mov	r8,sp
 800ef00:	3c3ff316 	blt	r7,r16,800eed0 <__alt_data_end+0xfc00eed0>
 800ef04:	8007883a 	mov	r3,r16
 800ef08:	da402517 	ldw	r9,148(sp)
 800ef0c:	db802817 	ldw	r14,160(sp)
 800ef10:	dc002917 	ldw	r16,164(sp)
 800ef14:	da802417 	ldw	r10,144(sp)
 800ef18:	1885883a 	add	r2,r3,r2
 800ef1c:	40c00115 	stw	r3,4(r8)
 800ef20:	42800015 	stw	r10,0(r8)
 800ef24:	d8801c15 	stw	r2,112(sp)
 800ef28:	d9401b15 	stw	r5,108(sp)
 800ef2c:	00c001c4 	movi	r3,7
 800ef30:	19426016 	blt	r3,r5,800f8b4 <___vfiprintf_internal_r+0xe68>
 800ef34:	d8c01d87 	ldb	r3,118(sp)
 800ef38:	42000204 	addi	r8,r8,8
 800ef3c:	29000044 	addi	r4,r5,1
 800ef40:	1801b31e 	bne	r3,zero,800f610 <___vfiprintf_internal_r+0xbc4>
 800ef44:	7001c026 	beq	r14,zero,800f648 <___vfiprintf_internal_r+0xbfc>
 800ef48:	d8c01d04 	addi	r3,sp,116
 800ef4c:	10800084 	addi	r2,r2,2
 800ef50:	40c00015 	stw	r3,0(r8)
 800ef54:	00c00084 	movi	r3,2
 800ef58:	40c00115 	stw	r3,4(r8)
 800ef5c:	d8801c15 	stw	r2,112(sp)
 800ef60:	d9001b15 	stw	r4,108(sp)
 800ef64:	00c001c4 	movi	r3,7
 800ef68:	1902650e 	bge	r3,r4,800f900 <___vfiprintf_internal_r+0xeb4>
 800ef6c:	10029a1e 	bne	r2,zero,800f9d8 <___vfiprintf_internal_r+0xf8c>
 800ef70:	00c02004 	movi	r3,128
 800ef74:	01000044 	movi	r4,1
 800ef78:	000b883a 	mov	r5,zero
 800ef7c:	d811883a 	mov	r8,sp
 800ef80:	e0c1b31e 	bne	fp,r3,800f650 <___vfiprintf_internal_r+0xc04>
 800ef84:	8cb9c83a 	sub	fp,r17,r18
 800ef88:	0701b10e 	bge	zero,fp,800f650 <___vfiprintf_internal_r+0xc04>
 800ef8c:	01c00404 	movi	r7,16
 800ef90:	3f03890e 	bge	r7,fp,800fdb8 <___vfiprintf_internal_r+0x136c>
 800ef94:	00c20074 	movhi	r3,2049
 800ef98:	18d78d04 	addi	r3,r3,24116
 800ef9c:	d8c02415 	stw	r3,144(sp)
 800efa0:	8007883a 	mov	r3,r16
 800efa4:	034001c4 	movi	r13,7
 800efa8:	e021883a 	mov	r16,fp
 800efac:	da402515 	stw	r9,148(sp)
 800efb0:	1839883a 	mov	fp,r3
 800efb4:	00000506 	br	800efcc <___vfiprintf_internal_r+0x580>
 800efb8:	29800084 	addi	r6,r5,2
 800efbc:	42000204 	addi	r8,r8,8
 800efc0:	180b883a 	mov	r5,r3
 800efc4:	843ffc04 	addi	r16,r16,-16
 800efc8:	3c000d0e 	bge	r7,r16,800f000 <___vfiprintf_internal_r+0x5b4>
 800efcc:	10800404 	addi	r2,r2,16
 800efd0:	28c00044 	addi	r3,r5,1
 800efd4:	45c00015 	stw	r23,0(r8)
 800efd8:	41c00115 	stw	r7,4(r8)
 800efdc:	d8801c15 	stw	r2,112(sp)
 800efe0:	d8c01b15 	stw	r3,108(sp)
 800efe4:	68fff40e 	bge	r13,r3,800efb8 <__alt_data_end+0xfc00efb8>
 800efe8:	1002241e 	bne	r2,zero,800f87c <___vfiprintf_internal_r+0xe30>
 800efec:	843ffc04 	addi	r16,r16,-16
 800eff0:	01800044 	movi	r6,1
 800eff4:	000b883a 	mov	r5,zero
 800eff8:	d811883a 	mov	r8,sp
 800effc:	3c3ff316 	blt	r7,r16,800efcc <__alt_data_end+0xfc00efcc>
 800f000:	da402517 	ldw	r9,148(sp)
 800f004:	e007883a 	mov	r3,fp
 800f008:	8039883a 	mov	fp,r16
 800f00c:	1821883a 	mov	r16,r3
 800f010:	d8c02417 	ldw	r3,144(sp)
 800f014:	1705883a 	add	r2,r2,fp
 800f018:	47000115 	stw	fp,4(r8)
 800f01c:	40c00015 	stw	r3,0(r8)
 800f020:	d8801c15 	stw	r2,112(sp)
 800f024:	d9801b15 	stw	r6,108(sp)
 800f028:	00c001c4 	movi	r3,7
 800f02c:	19827616 	blt	r3,r6,800fa08 <___vfiprintf_internal_r+0xfbc>
 800f030:	4cf9c83a 	sub	fp,r9,r19
 800f034:	42000204 	addi	r8,r8,8
 800f038:	31000044 	addi	r4,r6,1
 800f03c:	300b883a 	mov	r5,r6
 800f040:	07018516 	blt	zero,fp,800f658 <___vfiprintf_internal_r+0xc0c>
 800f044:	9885883a 	add	r2,r19,r2
 800f048:	45400015 	stw	r21,0(r8)
 800f04c:	44c00115 	stw	r19,4(r8)
 800f050:	d8801c15 	stw	r2,112(sp)
 800f054:	d9001b15 	stw	r4,108(sp)
 800f058:	00c001c4 	movi	r3,7
 800f05c:	1901dd0e 	bge	r3,r4,800f7d4 <___vfiprintf_internal_r+0xd88>
 800f060:	1002401e 	bne	r2,zero,800f964 <___vfiprintf_internal_r+0xf18>
 800f064:	d8001b15 	stw	zero,108(sp)
 800f068:	a2c0010c 	andi	r11,r20,4
 800f06c:	58000226 	beq	r11,zero,800f078 <___vfiprintf_internal_r+0x62c>
 800f070:	8ca7c83a 	sub	r19,r17,r18
 800f074:	04c2f216 	blt	zero,r19,800fc40 <___vfiprintf_internal_r+0x11f4>
 800f078:	8c80010e 	bge	r17,r18,800f080 <___vfiprintf_internal_r+0x634>
 800f07c:	9023883a 	mov	r17,r18
 800f080:	da802317 	ldw	r10,140(sp)
 800f084:	5455883a 	add	r10,r10,r17
 800f088:	da802315 	stw	r10,140(sp)
 800f08c:	d8001b15 	stw	zero,108(sp)
 800f090:	d811883a 	mov	r8,sp
 800f094:	003ea206 	br	800eb20 <__alt_data_end+0xfc00eb20>
 800f098:	a5000814 	ori	r20,r20,32
 800f09c:	80c00007 	ldb	r3,0(r16)
 800f0a0:	003ec906 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f0a4:	80c00007 	ldb	r3,0(r16)
 800f0a8:	1b030926 	beq	r3,r12,800fcd0 <___vfiprintf_internal_r+0x1284>
 800f0ac:	a5000414 	ori	r20,r20,16
 800f0b0:	003ec506 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f0b4:	21003fcc 	andi	r4,r4,255
 800f0b8:	20035e1e 	bne	r4,zero,800fe34 <___vfiprintf_internal_r+0x13e8>
 800f0bc:	a080080c 	andi	r2,r20,32
 800f0c0:	1002a526 	beq	r2,zero,800fb58 <___vfiprintf_internal_r+0x110c>
 800f0c4:	da802217 	ldw	r10,136(sp)
 800f0c8:	50800017 	ldw	r2,0(r10)
 800f0cc:	da802317 	ldw	r10,140(sp)
 800f0d0:	5007d7fa 	srai	r3,r10,31
 800f0d4:	da802217 	ldw	r10,136(sp)
 800f0d8:	10c00115 	stw	r3,4(r2)
 800f0dc:	52800104 	addi	r10,r10,4
 800f0e0:	da802215 	stw	r10,136(sp)
 800f0e4:	da802317 	ldw	r10,140(sp)
 800f0e8:	12800015 	stw	r10,0(r2)
 800f0ec:	003e8c06 	br	800eb20 <__alt_data_end+0xfc00eb20>
 800f0f0:	21003fcc 	andi	r4,r4,255
 800f0f4:	2003511e 	bne	r4,zero,800fe3c <___vfiprintf_internal_r+0x13f0>
 800f0f8:	a080080c 	andi	r2,r20,32
 800f0fc:	1000a126 	beq	r2,zero,800f384 <___vfiprintf_internal_r+0x938>
 800f100:	da802217 	ldw	r10,136(sp)
 800f104:	d8001d85 	stb	zero,118(sp)
 800f108:	50800204 	addi	r2,r10,8
 800f10c:	54800017 	ldw	r18,0(r10)
 800f110:	54c00117 	ldw	r19,4(r10)
 800f114:	4802b416 	blt	r9,zero,800fbe8 <___vfiprintf_internal_r+0x119c>
 800f118:	013fdfc4 	movi	r4,-129
 800f11c:	94c6b03a 	or	r3,r18,r19
 800f120:	d8802215 	stw	r2,136(sp)
 800f124:	a128703a 	and	r20,r20,r4
 800f128:	1800a226 	beq	r3,zero,800f3b4 <___vfiprintf_internal_r+0x968>
 800f12c:	0039883a 	mov	fp,zero
 800f130:	dd401a04 	addi	r21,sp,104
 800f134:	9006d0fa 	srli	r3,r18,3
 800f138:	9808977a 	slli	r4,r19,29
 800f13c:	9826d0fa 	srli	r19,r19,3
 800f140:	948001cc 	andi	r18,r18,7
 800f144:	90800c04 	addi	r2,r18,48
 800f148:	ad7fffc4 	addi	r21,r21,-1
 800f14c:	20e4b03a 	or	r18,r4,r3
 800f150:	a8800005 	stb	r2,0(r21)
 800f154:	94c6b03a 	or	r3,r18,r19
 800f158:	183ff61e 	bne	r3,zero,800f134 <__alt_data_end+0xfc00f134>
 800f15c:	a0c0004c 	andi	r3,r20,1
 800f160:	18005926 	beq	r3,zero,800f2c8 <___vfiprintf_internal_r+0x87c>
 800f164:	10803fcc 	andi	r2,r2,255
 800f168:	1080201c 	xori	r2,r2,128
 800f16c:	10bfe004 	addi	r2,r2,-128
 800f170:	00c00c04 	movi	r3,48
 800f174:	10c05426 	beq	r2,r3,800f2c8 <___vfiprintf_internal_r+0x87c>
 800f178:	da801e17 	ldw	r10,120(sp)
 800f17c:	a8bfffc4 	addi	r2,r21,-1
 800f180:	a8ffffc5 	stb	r3,-1(r21)
 800f184:	50a7c83a 	sub	r19,r10,r2
 800f188:	102b883a 	mov	r21,r2
 800f18c:	003f2f06 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800f190:	21003fcc 	andi	r4,r4,255
 800f194:	2003421e 	bne	r4,zero,800fea0 <___vfiprintf_internal_r+0x1454>
 800f198:	00820074 	movhi	r2,2049
 800f19c:	10972d04 	addi	r2,r2,23732
 800f1a0:	d8802615 	stw	r2,152(sp)
 800f1a4:	a080080c 	andi	r2,r20,32
 800f1a8:	1000aa26 	beq	r2,zero,800f454 <___vfiprintf_internal_r+0xa08>
 800f1ac:	da802217 	ldw	r10,136(sp)
 800f1b0:	54800017 	ldw	r18,0(r10)
 800f1b4:	54c00117 	ldw	r19,4(r10)
 800f1b8:	52800204 	addi	r10,r10,8
 800f1bc:	da802215 	stw	r10,136(sp)
 800f1c0:	a080004c 	andi	r2,r20,1
 800f1c4:	1001d226 	beq	r2,zero,800f910 <___vfiprintf_internal_r+0xec4>
 800f1c8:	94c4b03a 	or	r2,r18,r19
 800f1cc:	1002351e 	bne	r2,zero,800faa4 <___vfiprintf_internal_r+0x1058>
 800f1d0:	d8001d85 	stb	zero,118(sp)
 800f1d4:	48022216 	blt	r9,zero,800fa60 <___vfiprintf_internal_r+0x1014>
 800f1d8:	00bfdfc4 	movi	r2,-129
 800f1dc:	a0a8703a 	and	r20,r20,r2
 800f1e0:	003f1506 	br	800ee38 <__alt_data_end+0xfc00ee38>
 800f1e4:	da802217 	ldw	r10,136(sp)
 800f1e8:	04800044 	movi	r18,1
 800f1ec:	d8001d85 	stb	zero,118(sp)
 800f1f0:	50800017 	ldw	r2,0(r10)
 800f1f4:	52800104 	addi	r10,r10,4
 800f1f8:	da802215 	stw	r10,136(sp)
 800f1fc:	d8801005 	stb	r2,64(sp)
 800f200:	9027883a 	mov	r19,r18
 800f204:	dd401004 	addi	r21,sp,64
 800f208:	0013883a 	mov	r9,zero
 800f20c:	003f1706 	br	800ee6c <__alt_data_end+0xfc00ee6c>
 800f210:	21003fcc 	andi	r4,r4,255
 800f214:	2003201e 	bne	r4,zero,800fe98 <___vfiprintf_internal_r+0x144c>
 800f218:	a080080c 	andi	r2,r20,32
 800f21c:	10004b26 	beq	r2,zero,800f34c <___vfiprintf_internal_r+0x900>
 800f220:	da802217 	ldw	r10,136(sp)
 800f224:	50800117 	ldw	r2,4(r10)
 800f228:	54800017 	ldw	r18,0(r10)
 800f22c:	52800204 	addi	r10,r10,8
 800f230:	da802215 	stw	r10,136(sp)
 800f234:	1027883a 	mov	r19,r2
 800f238:	10022c16 	blt	r2,zero,800faec <___vfiprintf_internal_r+0x10a0>
 800f23c:	df001d83 	ldbu	fp,118(sp)
 800f240:	48007216 	blt	r9,zero,800f40c <___vfiprintf_internal_r+0x9c0>
 800f244:	00ffdfc4 	movi	r3,-129
 800f248:	94c4b03a 	or	r2,r18,r19
 800f24c:	a0e8703a 	and	r20,r20,r3
 800f250:	1000cc26 	beq	r2,zero,800f584 <___vfiprintf_internal_r+0xb38>
 800f254:	98021026 	beq	r19,zero,800fa98 <___vfiprintf_internal_r+0x104c>
 800f258:	dc402415 	stw	r17,144(sp)
 800f25c:	dc002515 	stw	r16,148(sp)
 800f260:	9823883a 	mov	r17,r19
 800f264:	9021883a 	mov	r16,r18
 800f268:	dd401a04 	addi	r21,sp,104
 800f26c:	4825883a 	mov	r18,r9
 800f270:	4027883a 	mov	r19,r8
 800f274:	8009883a 	mov	r4,r16
 800f278:	880b883a 	mov	r5,r17
 800f27c:	01800284 	movi	r6,10
 800f280:	000f883a 	mov	r7,zero
 800f284:	8010e2c0 	call	8010e2c <__umoddi3>
 800f288:	10800c04 	addi	r2,r2,48
 800f28c:	ad7fffc4 	addi	r21,r21,-1
 800f290:	8009883a 	mov	r4,r16
 800f294:	880b883a 	mov	r5,r17
 800f298:	a8800005 	stb	r2,0(r21)
 800f29c:	01800284 	movi	r6,10
 800f2a0:	000f883a 	mov	r7,zero
 800f2a4:	80108b40 	call	80108b4 <__udivdi3>
 800f2a8:	1021883a 	mov	r16,r2
 800f2ac:	10c4b03a 	or	r2,r2,r3
 800f2b0:	1823883a 	mov	r17,r3
 800f2b4:	103fef1e 	bne	r2,zero,800f274 <__alt_data_end+0xfc00f274>
 800f2b8:	dc402417 	ldw	r17,144(sp)
 800f2bc:	dc002517 	ldw	r16,148(sp)
 800f2c0:	9013883a 	mov	r9,r18
 800f2c4:	9811883a 	mov	r8,r19
 800f2c8:	da801e17 	ldw	r10,120(sp)
 800f2cc:	5567c83a 	sub	r19,r10,r21
 800f2d0:	003ede06 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800f2d4:	38803fcc 	andi	r2,r7,255
 800f2d8:	1080201c 	xori	r2,r2,128
 800f2dc:	10bfe004 	addi	r2,r2,-128
 800f2e0:	1002371e 	bne	r2,zero,800fbc0 <___vfiprintf_internal_r+0x1174>
 800f2e4:	01000044 	movi	r4,1
 800f2e8:	01c00804 	movi	r7,32
 800f2ec:	80c00007 	ldb	r3,0(r16)
 800f2f0:	003e3506 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f2f4:	a5000054 	ori	r20,r20,1
 800f2f8:	80c00007 	ldb	r3,0(r16)
 800f2fc:	003e3206 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f300:	a5002014 	ori	r20,r20,128
 800f304:	80c00007 	ldb	r3,0(r16)
 800f308:	003e2f06 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f30c:	8015883a 	mov	r10,r16
 800f310:	0023883a 	mov	r17,zero
 800f314:	18bff404 	addi	r2,r3,-48
 800f318:	50c00007 	ldb	r3,0(r10)
 800f31c:	8c4002a4 	muli	r17,r17,10
 800f320:	84000044 	addi	r16,r16,1
 800f324:	8015883a 	mov	r10,r16
 800f328:	1463883a 	add	r17,r2,r17
 800f32c:	18bff404 	addi	r2,r3,-48
 800f330:	30bff92e 	bgeu	r6,r2,800f318 <__alt_data_end+0xfc00f318>
 800f334:	003e2506 	br	800ebcc <__alt_data_end+0xfc00ebcc>
 800f338:	21003fcc 	andi	r4,r4,255
 800f33c:	2002d41e 	bne	r4,zero,800fe90 <___vfiprintf_internal_r+0x1444>
 800f340:	a5000414 	ori	r20,r20,16
 800f344:	a080080c 	andi	r2,r20,32
 800f348:	103fb51e 	bne	r2,zero,800f220 <__alt_data_end+0xfc00f220>
 800f34c:	a080040c 	andi	r2,r20,16
 800f350:	1001f826 	beq	r2,zero,800fb34 <___vfiprintf_internal_r+0x10e8>
 800f354:	da802217 	ldw	r10,136(sp)
 800f358:	54800017 	ldw	r18,0(r10)
 800f35c:	52800104 	addi	r10,r10,4
 800f360:	da802215 	stw	r10,136(sp)
 800f364:	9027d7fa 	srai	r19,r18,31
 800f368:	9805883a 	mov	r2,r19
 800f36c:	003fb206 	br	800f238 <__alt_data_end+0xfc00f238>
 800f370:	21003fcc 	andi	r4,r4,255
 800f374:	2002c41e 	bne	r4,zero,800fe88 <___vfiprintf_internal_r+0x143c>
 800f378:	a5000414 	ori	r20,r20,16
 800f37c:	a080080c 	andi	r2,r20,32
 800f380:	103f5f1e 	bne	r2,zero,800f100 <__alt_data_end+0xfc00f100>
 800f384:	a080040c 	andi	r2,r20,16
 800f388:	10020f26 	beq	r2,zero,800fbc8 <___vfiprintf_internal_r+0x117c>
 800f38c:	da802217 	ldw	r10,136(sp)
 800f390:	d8001d85 	stb	zero,118(sp)
 800f394:	0027883a 	mov	r19,zero
 800f398:	50800104 	addi	r2,r10,4
 800f39c:	54800017 	ldw	r18,0(r10)
 800f3a0:	48021116 	blt	r9,zero,800fbe8 <___vfiprintf_internal_r+0x119c>
 800f3a4:	00ffdfc4 	movi	r3,-129
 800f3a8:	d8802215 	stw	r2,136(sp)
 800f3ac:	a0e8703a 	and	r20,r20,r3
 800f3b0:	903f5e1e 	bne	r18,zero,800f12c <__alt_data_end+0xfc00f12c>
 800f3b4:	0039883a 	mov	fp,zero
 800f3b8:	4802a626 	beq	r9,zero,800fe54 <___vfiprintf_internal_r+0x1408>
 800f3bc:	0025883a 	mov	r18,zero
 800f3c0:	0027883a 	mov	r19,zero
 800f3c4:	003f5a06 	br	800f130 <__alt_data_end+0xfc00f130>
 800f3c8:	21003fcc 	andi	r4,r4,255
 800f3cc:	20029f1e 	bne	r4,zero,800fe4c <___vfiprintf_internal_r+0x1400>
 800f3d0:	a5000414 	ori	r20,r20,16
 800f3d4:	a080080c 	andi	r2,r20,32
 800f3d8:	10005e1e 	bne	r2,zero,800f554 <___vfiprintf_internal_r+0xb08>
 800f3dc:	a080040c 	andi	r2,r20,16
 800f3e0:	1001a21e 	bne	r2,zero,800fa6c <___vfiprintf_internal_r+0x1020>
 800f3e4:	a080100c 	andi	r2,r20,64
 800f3e8:	d8001d85 	stb	zero,118(sp)
 800f3ec:	da802217 	ldw	r10,136(sp)
 800f3f0:	1002231e 	bne	r2,zero,800fc80 <___vfiprintf_internal_r+0x1234>
 800f3f4:	50800104 	addi	r2,r10,4
 800f3f8:	54800017 	ldw	r18,0(r10)
 800f3fc:	0027883a 	mov	r19,zero
 800f400:	4801a00e 	bge	r9,zero,800fa84 <___vfiprintf_internal_r+0x1038>
 800f404:	d8802215 	stw	r2,136(sp)
 800f408:	0039883a 	mov	fp,zero
 800f40c:	94c4b03a 	or	r2,r18,r19
 800f410:	103f901e 	bne	r2,zero,800f254 <__alt_data_end+0xfc00f254>
 800f414:	00800044 	movi	r2,1
 800f418:	10803fcc 	andi	r2,r2,255
 800f41c:	00c00044 	movi	r3,1
 800f420:	10c05926 	beq	r2,r3,800f588 <___vfiprintf_internal_r+0xb3c>
 800f424:	00c00084 	movi	r3,2
 800f428:	10ffe41e 	bne	r2,r3,800f3bc <__alt_data_end+0xfc00f3bc>
 800f42c:	0025883a 	mov	r18,zero
 800f430:	0027883a 	mov	r19,zero
 800f434:	00013d06 	br	800f92c <___vfiprintf_internal_r+0xee0>
 800f438:	21003fcc 	andi	r4,r4,255
 800f43c:	2002811e 	bne	r4,zero,800fe44 <___vfiprintf_internal_r+0x13f8>
 800f440:	00820074 	movhi	r2,2049
 800f444:	10972804 	addi	r2,r2,23712
 800f448:	d8802615 	stw	r2,152(sp)
 800f44c:	a080080c 	andi	r2,r20,32
 800f450:	103f561e 	bne	r2,zero,800f1ac <__alt_data_end+0xfc00f1ac>
 800f454:	a080040c 	andi	r2,r20,16
 800f458:	1001d126 	beq	r2,zero,800fba0 <___vfiprintf_internal_r+0x1154>
 800f45c:	da802217 	ldw	r10,136(sp)
 800f460:	0027883a 	mov	r19,zero
 800f464:	54800017 	ldw	r18,0(r10)
 800f468:	52800104 	addi	r10,r10,4
 800f46c:	da802215 	stw	r10,136(sp)
 800f470:	003f5306 	br	800f1c0 <__alt_data_end+0xfc00f1c0>
 800f474:	da802217 	ldw	r10,136(sp)
 800f478:	d8001d85 	stb	zero,118(sp)
 800f47c:	55400017 	ldw	r21,0(r10)
 800f480:	50c00104 	addi	r3,r10,4
 800f484:	a8024226 	beq	r21,zero,800fd90 <___vfiprintf_internal_r+0x1344>
 800f488:	48021816 	blt	r9,zero,800fcec <___vfiprintf_internal_r+0x12a0>
 800f48c:	480d883a 	mov	r6,r9
 800f490:	000b883a 	mov	r5,zero
 800f494:	a809883a 	mov	r4,r21
 800f498:	d8c02a15 	stw	r3,168(sp)
 800f49c:	da002b15 	stw	r8,172(sp)
 800f4a0:	da402c15 	stw	r9,176(sp)
 800f4a4:	800ccbc0 	call	800ccbc <memchr>
 800f4a8:	d8c02a17 	ldw	r3,168(sp)
 800f4ac:	da002b17 	ldw	r8,172(sp)
 800f4b0:	da402c17 	ldw	r9,176(sp)
 800f4b4:	10024826 	beq	r2,zero,800fdd8 <___vfiprintf_internal_r+0x138c>
 800f4b8:	1567c83a 	sub	r19,r2,r21
 800f4bc:	df001d83 	ldbu	fp,118(sp)
 800f4c0:	d8c02215 	stw	r3,136(sp)
 800f4c4:	0013883a 	mov	r9,zero
 800f4c8:	003e6006 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800f4cc:	21003fcc 	andi	r4,r4,255
 800f4d0:	203fc026 	beq	r4,zero,800f3d4 <__alt_data_end+0xfc00f3d4>
 800f4d4:	d9c01d85 	stb	r7,118(sp)
 800f4d8:	003fbe06 	br	800f3d4 <__alt_data_end+0xfc00f3d4>
 800f4dc:	da802217 	ldw	r10,136(sp)
 800f4e0:	54400017 	ldw	r17,0(r10)
 800f4e4:	50800104 	addi	r2,r10,4
 800f4e8:	883e3b16 	blt	r17,zero,800edd8 <__alt_data_end+0xfc00edd8>
 800f4ec:	d8802215 	stw	r2,136(sp)
 800f4f0:	80c00007 	ldb	r3,0(r16)
 800f4f4:	003db406 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f4f8:	01000044 	movi	r4,1
 800f4fc:	01c00ac4 	movi	r7,43
 800f500:	80c00007 	ldb	r3,0(r16)
 800f504:	003db006 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f508:	80c00007 	ldb	r3,0(r16)
 800f50c:	82800044 	addi	r10,r16,1
 800f510:	1b423c26 	beq	r3,r13,800fe04 <___vfiprintf_internal_r+0x13b8>
 800f514:	18bff404 	addi	r2,r3,-48
 800f518:	0013883a 	mov	r9,zero
 800f51c:	30822b36 	bltu	r6,r2,800fdcc <___vfiprintf_internal_r+0x1380>
 800f520:	50c00007 	ldb	r3,0(r10)
 800f524:	4a4002a4 	muli	r9,r9,10
 800f528:	54000044 	addi	r16,r10,1
 800f52c:	8015883a 	mov	r10,r16
 800f530:	4893883a 	add	r9,r9,r2
 800f534:	18bff404 	addi	r2,r3,-48
 800f538:	30bff92e 	bgeu	r6,r2,800f520 <__alt_data_end+0xfc00f520>
 800f53c:	483da30e 	bge	r9,zero,800ebcc <__alt_data_end+0xfc00ebcc>
 800f540:	027fffc4 	movi	r9,-1
 800f544:	003da106 	br	800ebcc <__alt_data_end+0xfc00ebcc>
 800f548:	a5001014 	ori	r20,r20,64
 800f54c:	80c00007 	ldb	r3,0(r16)
 800f550:	003d9d06 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800f554:	da802217 	ldw	r10,136(sp)
 800f558:	d8001d85 	stb	zero,118(sp)
 800f55c:	50c00204 	addi	r3,r10,8
 800f560:	54800017 	ldw	r18,0(r10)
 800f564:	54c00117 	ldw	r19,4(r10)
 800f568:	4801ca16 	blt	r9,zero,800fc94 <___vfiprintf_internal_r+0x1248>
 800f56c:	013fdfc4 	movi	r4,-129
 800f570:	94c4b03a 	or	r2,r18,r19
 800f574:	d8c02215 	stw	r3,136(sp)
 800f578:	a128703a 	and	r20,r20,r4
 800f57c:	0039883a 	mov	fp,zero
 800f580:	103f341e 	bne	r2,zero,800f254 <__alt_data_end+0xfc00f254>
 800f584:	483e2e26 	beq	r9,zero,800ee40 <__alt_data_end+0xfc00ee40>
 800f588:	0025883a 	mov	r18,zero
 800f58c:	94800c04 	addi	r18,r18,48
 800f590:	dc8019c5 	stb	r18,103(sp)
 800f594:	dcc02717 	ldw	r19,156(sp)
 800f598:	dd4019c4 	addi	r21,sp,103
 800f59c:	003e2b06 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800f5a0:	21003fcc 	andi	r4,r4,255
 800f5a4:	2002361e 	bne	r4,zero,800fe80 <___vfiprintf_internal_r+0x1434>
 800f5a8:	1801c126 	beq	r3,zero,800fcb0 <___vfiprintf_internal_r+0x1264>
 800f5ac:	04800044 	movi	r18,1
 800f5b0:	d8c01005 	stb	r3,64(sp)
 800f5b4:	d8001d85 	stb	zero,118(sp)
 800f5b8:	9027883a 	mov	r19,r18
 800f5bc:	dd401004 	addi	r21,sp,64
 800f5c0:	003f1106 	br	800f208 <__alt_data_end+0xfc00f208>
 800f5c4:	d9402117 	ldw	r5,132(sp)
 800f5c8:	d9002017 	ldw	r4,128(sp)
 800f5cc:	d9801a04 	addi	r6,sp,104
 800f5d0:	d9c02b15 	stw	r7,172(sp)
 800f5d4:	dbc02a15 	stw	r15,168(sp)
 800f5d8:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f5dc:	d9c02b17 	ldw	r7,172(sp)
 800f5e0:	dbc02a17 	ldw	r15,168(sp)
 800f5e4:	10006d1e 	bne	r2,zero,800f79c <___vfiprintf_internal_r+0xd50>
 800f5e8:	d9801b17 	ldw	r6,108(sp)
 800f5ec:	d8801c17 	ldw	r2,112(sp)
 800f5f0:	d811883a 	mov	r8,sp
 800f5f4:	31400044 	addi	r5,r6,1
 800f5f8:	003e3306 	br	800eec8 <__alt_data_end+0xfc00eec8>
 800f5fc:	d9401b17 	ldw	r5,108(sp)
 800f600:	d8801c17 	ldw	r2,112(sp)
 800f604:	29000044 	addi	r4,r5,1
 800f608:	d8c01d87 	ldb	r3,118(sp)
 800f60c:	183e4d26 	beq	r3,zero,800ef44 <__alt_data_end+0xfc00ef44>
 800f610:	00c00044 	movi	r3,1
 800f614:	d9401d84 	addi	r5,sp,118
 800f618:	10c5883a 	add	r2,r2,r3
 800f61c:	41400015 	stw	r5,0(r8)
 800f620:	40c00115 	stw	r3,4(r8)
 800f624:	d8801c15 	stw	r2,112(sp)
 800f628:	d9001b15 	stw	r4,108(sp)
 800f62c:	014001c4 	movi	r5,7
 800f630:	2900a90e 	bge	r5,r4,800f8d8 <___vfiprintf_internal_r+0xe8c>
 800f634:	1000da1e 	bne	r2,zero,800f9a0 <___vfiprintf_internal_r+0xf54>
 800f638:	7000ab1e 	bne	r14,zero,800f8e8 <___vfiprintf_internal_r+0xe9c>
 800f63c:	000b883a 	mov	r5,zero
 800f640:	1809883a 	mov	r4,r3
 800f644:	d811883a 	mov	r8,sp
 800f648:	00c02004 	movi	r3,128
 800f64c:	e0fe4d26 	beq	fp,r3,800ef84 <__alt_data_end+0xfc00ef84>
 800f650:	4cf9c83a 	sub	fp,r9,r19
 800f654:	073e7b0e 	bge	zero,fp,800f044 <__alt_data_end+0xfc00f044>
 800f658:	01c00404 	movi	r7,16
 800f65c:	3f01900e 	bge	r7,fp,800fca0 <___vfiprintf_internal_r+0x1254>
 800f660:	00c20074 	movhi	r3,2049
 800f664:	18d78d04 	addi	r3,r3,24116
 800f668:	d8c02415 	stw	r3,144(sp)
 800f66c:	034001c4 	movi	r13,7
 800f670:	00000506 	br	800f688 <___vfiprintf_internal_r+0xc3c>
 800f674:	29000084 	addi	r4,r5,2
 800f678:	42000204 	addi	r8,r8,8
 800f67c:	180b883a 	mov	r5,r3
 800f680:	e73ffc04 	addi	fp,fp,-16
 800f684:	3f000d0e 	bge	r7,fp,800f6bc <___vfiprintf_internal_r+0xc70>
 800f688:	10800404 	addi	r2,r2,16
 800f68c:	28c00044 	addi	r3,r5,1
 800f690:	45c00015 	stw	r23,0(r8)
 800f694:	41c00115 	stw	r7,4(r8)
 800f698:	d8801c15 	stw	r2,112(sp)
 800f69c:	d8c01b15 	stw	r3,108(sp)
 800f6a0:	68fff40e 	bge	r13,r3,800f674 <__alt_data_end+0xfc00f674>
 800f6a4:	1000101e 	bne	r2,zero,800f6e8 <___vfiprintf_internal_r+0xc9c>
 800f6a8:	e73ffc04 	addi	fp,fp,-16
 800f6ac:	01000044 	movi	r4,1
 800f6b0:	000b883a 	mov	r5,zero
 800f6b4:	d811883a 	mov	r8,sp
 800f6b8:	3f3ff316 	blt	r7,fp,800f688 <__alt_data_end+0xfc00f688>
 800f6bc:	da802417 	ldw	r10,144(sp)
 800f6c0:	1705883a 	add	r2,r2,fp
 800f6c4:	47000115 	stw	fp,4(r8)
 800f6c8:	42800015 	stw	r10,0(r8)
 800f6cc:	d8801c15 	stw	r2,112(sp)
 800f6d0:	d9001b15 	stw	r4,108(sp)
 800f6d4:	00c001c4 	movi	r3,7
 800f6d8:	19003616 	blt	r3,r4,800f7b4 <___vfiprintf_internal_r+0xd68>
 800f6dc:	42000204 	addi	r8,r8,8
 800f6e0:	21000044 	addi	r4,r4,1
 800f6e4:	003e5706 	br	800f044 <__alt_data_end+0xfc00f044>
 800f6e8:	d9402117 	ldw	r5,132(sp)
 800f6ec:	d9002017 	ldw	r4,128(sp)
 800f6f0:	d9801a04 	addi	r6,sp,104
 800f6f4:	d9c02b15 	stw	r7,172(sp)
 800f6f8:	db402a15 	stw	r13,168(sp)
 800f6fc:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f700:	d9c02b17 	ldw	r7,172(sp)
 800f704:	db402a17 	ldw	r13,168(sp)
 800f708:	1000241e 	bne	r2,zero,800f79c <___vfiprintf_internal_r+0xd50>
 800f70c:	d9401b17 	ldw	r5,108(sp)
 800f710:	d8801c17 	ldw	r2,112(sp)
 800f714:	d811883a 	mov	r8,sp
 800f718:	29000044 	addi	r4,r5,1
 800f71c:	003fd806 	br	800f680 <__alt_data_end+0xfc00f680>
 800f720:	d9401b17 	ldw	r5,108(sp)
 800f724:	00c20074 	movhi	r3,2049
 800f728:	18d79104 	addi	r3,r3,24132
 800f72c:	d8c02415 	stw	r3,144(sp)
 800f730:	29400044 	addi	r5,r5,1
 800f734:	d8c02417 	ldw	r3,144(sp)
 800f738:	14c5883a 	add	r2,r2,r19
 800f73c:	44c00115 	stw	r19,4(r8)
 800f740:	40c00015 	stw	r3,0(r8)
 800f744:	d8801c15 	stw	r2,112(sp)
 800f748:	d9401b15 	stw	r5,108(sp)
 800f74c:	00c001c4 	movi	r3,7
 800f750:	1940070e 	bge	r3,r5,800f770 <___vfiprintf_internal_r+0xd24>
 800f754:	103e4826 	beq	r2,zero,800f078 <__alt_data_end+0xfc00f078>
 800f758:	d9402117 	ldw	r5,132(sp)
 800f75c:	d9002017 	ldw	r4,128(sp)
 800f760:	d9801a04 	addi	r6,sp,104
 800f764:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f768:	10000c1e 	bne	r2,zero,800f79c <___vfiprintf_internal_r+0xd50>
 800f76c:	d8801c17 	ldw	r2,112(sp)
 800f770:	8c80010e 	bge	r17,r18,800f778 <___vfiprintf_internal_r+0xd2c>
 800f774:	9023883a 	mov	r17,r18
 800f778:	da802317 	ldw	r10,140(sp)
 800f77c:	5455883a 	add	r10,r10,r17
 800f780:	da802315 	stw	r10,140(sp)
 800f784:	103e4126 	beq	r2,zero,800f08c <__alt_data_end+0xfc00f08c>
 800f788:	d9402117 	ldw	r5,132(sp)
 800f78c:	d9002017 	ldw	r4,128(sp)
 800f790:	d9801a04 	addi	r6,sp,104
 800f794:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f798:	103e3c26 	beq	r2,zero,800f08c <__alt_data_end+0xfc00f08c>
 800f79c:	dd002117 	ldw	r20,132(sp)
 800f7a0:	a080030b 	ldhu	r2,12(r20)
 800f7a4:	1080100c 	andi	r2,r2,64
 800f7a8:	1001231e 	bne	r2,zero,800fc38 <___vfiprintf_internal_r+0x11ec>
 800f7ac:	d8802317 	ldw	r2,140(sp)
 800f7b0:	003d7b06 	br	800eda0 <__alt_data_end+0xfc00eda0>
 800f7b4:	1000991e 	bne	r2,zero,800fa1c <___vfiprintf_internal_r+0xfd0>
 800f7b8:	00c00044 	movi	r3,1
 800f7bc:	9805883a 	mov	r2,r19
 800f7c0:	dd400015 	stw	r21,0(sp)
 800f7c4:	dcc00115 	stw	r19,4(sp)
 800f7c8:	dcc01c15 	stw	r19,112(sp)
 800f7cc:	d8c01b15 	stw	r3,108(sp)
 800f7d0:	d811883a 	mov	r8,sp
 800f7d4:	42000204 	addi	r8,r8,8
 800f7d8:	a2c0010c 	andi	r11,r20,4
 800f7dc:	583fe426 	beq	r11,zero,800f770 <__alt_data_end+0xfc00f770>
 800f7e0:	8ca7c83a 	sub	r19,r17,r18
 800f7e4:	04ffe20e 	bge	zero,r19,800f770 <__alt_data_end+0xfc00f770>
 800f7e8:	01c00404 	movi	r7,16
 800f7ec:	3cffcc0e 	bge	r7,r19,800f720 <__alt_data_end+0xfc00f720>
 800f7f0:	02820074 	movhi	r10,2049
 800f7f4:	52979104 	addi	r10,r10,24132
 800f7f8:	d9001b17 	ldw	r4,108(sp)
 800f7fc:	da802415 	stw	r10,144(sp)
 800f800:	382b883a 	mov	r21,r7
 800f804:	050001c4 	movi	r20,7
 800f808:	df002017 	ldw	fp,128(sp)
 800f80c:	00000506 	br	800f824 <___vfiprintf_internal_r+0xdd8>
 800f810:	21400084 	addi	r5,r4,2
 800f814:	42000204 	addi	r8,r8,8
 800f818:	1809883a 	mov	r4,r3
 800f81c:	9cfffc04 	addi	r19,r19,-16
 800f820:	acffc40e 	bge	r21,r19,800f734 <__alt_data_end+0xfc00f734>
 800f824:	10800404 	addi	r2,r2,16
 800f828:	20c00044 	addi	r3,r4,1
 800f82c:	45800015 	stw	r22,0(r8)
 800f830:	45400115 	stw	r21,4(r8)
 800f834:	d8801c15 	stw	r2,112(sp)
 800f838:	d8c01b15 	stw	r3,108(sp)
 800f83c:	a0fff40e 	bge	r20,r3,800f810 <__alt_data_end+0xfc00f810>
 800f840:	1000041e 	bne	r2,zero,800f854 <___vfiprintf_internal_r+0xe08>
 800f844:	01400044 	movi	r5,1
 800f848:	0009883a 	mov	r4,zero
 800f84c:	d811883a 	mov	r8,sp
 800f850:	003ff206 	br	800f81c <__alt_data_end+0xfc00f81c>
 800f854:	d9402117 	ldw	r5,132(sp)
 800f858:	d9801a04 	addi	r6,sp,104
 800f85c:	e009883a 	mov	r4,fp
 800f860:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f864:	103fcd1e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800f868:	d9001b17 	ldw	r4,108(sp)
 800f86c:	d8801c17 	ldw	r2,112(sp)
 800f870:	d811883a 	mov	r8,sp
 800f874:	21400044 	addi	r5,r4,1
 800f878:	003fe806 	br	800f81c <__alt_data_end+0xfc00f81c>
 800f87c:	d9402117 	ldw	r5,132(sp)
 800f880:	d9002017 	ldw	r4,128(sp)
 800f884:	d9801a04 	addi	r6,sp,104
 800f888:	d9c02b15 	stw	r7,172(sp)
 800f88c:	db402a15 	stw	r13,168(sp)
 800f890:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f894:	d9c02b17 	ldw	r7,172(sp)
 800f898:	db402a17 	ldw	r13,168(sp)
 800f89c:	103fbf1e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800f8a0:	d9401b17 	ldw	r5,108(sp)
 800f8a4:	d8801c17 	ldw	r2,112(sp)
 800f8a8:	d811883a 	mov	r8,sp
 800f8ac:	29800044 	addi	r6,r5,1
 800f8b0:	003dc406 	br	800efc4 <__alt_data_end+0xfc00efc4>
 800f8b4:	1000d21e 	bne	r2,zero,800fc00 <___vfiprintf_internal_r+0x11b4>
 800f8b8:	d8c01d87 	ldb	r3,118(sp)
 800f8bc:	18009526 	beq	r3,zero,800fb14 <___vfiprintf_internal_r+0x10c8>
 800f8c0:	00800044 	movi	r2,1
 800f8c4:	d8c01d84 	addi	r3,sp,118
 800f8c8:	1009883a 	mov	r4,r2
 800f8cc:	d8c00015 	stw	r3,0(sp)
 800f8d0:	d8800115 	stw	r2,4(sp)
 800f8d4:	d811883a 	mov	r8,sp
 800f8d8:	200b883a 	mov	r5,r4
 800f8dc:	42000204 	addi	r8,r8,8
 800f8e0:	21000044 	addi	r4,r4,1
 800f8e4:	003d9706 	br	800ef44 <__alt_data_end+0xfc00ef44>
 800f8e8:	d9001d04 	addi	r4,sp,116
 800f8ec:	00800084 	movi	r2,2
 800f8f0:	d9000015 	stw	r4,0(sp)
 800f8f4:	d8800115 	stw	r2,4(sp)
 800f8f8:	1809883a 	mov	r4,r3
 800f8fc:	d811883a 	mov	r8,sp
 800f900:	200b883a 	mov	r5,r4
 800f904:	42000204 	addi	r8,r8,8
 800f908:	21000044 	addi	r4,r4,1
 800f90c:	003f4e06 	br	800f648 <__alt_data_end+0xfc00f648>
 800f910:	d8001d85 	stb	zero,118(sp)
 800f914:	48005016 	blt	r9,zero,800fa58 <___vfiprintf_internal_r+0x100c>
 800f918:	00ffdfc4 	movi	r3,-129
 800f91c:	94c4b03a 	or	r2,r18,r19
 800f920:	a0e8703a 	and	r20,r20,r3
 800f924:	103d4426 	beq	r2,zero,800ee38 <__alt_data_end+0xfc00ee38>
 800f928:	0039883a 	mov	fp,zero
 800f92c:	d9002617 	ldw	r4,152(sp)
 800f930:	dd401a04 	addi	r21,sp,104
 800f934:	908003cc 	andi	r2,r18,15
 800f938:	9806973a 	slli	r3,r19,28
 800f93c:	2085883a 	add	r2,r4,r2
 800f940:	9024d13a 	srli	r18,r18,4
 800f944:	10800003 	ldbu	r2,0(r2)
 800f948:	9826d13a 	srli	r19,r19,4
 800f94c:	ad7fffc4 	addi	r21,r21,-1
 800f950:	1ca4b03a 	or	r18,r3,r18
 800f954:	a8800005 	stb	r2,0(r21)
 800f958:	94c4b03a 	or	r2,r18,r19
 800f95c:	103ff51e 	bne	r2,zero,800f934 <__alt_data_end+0xfc00f934>
 800f960:	003e5906 	br	800f2c8 <__alt_data_end+0xfc00f2c8>
 800f964:	d9402117 	ldw	r5,132(sp)
 800f968:	d9002017 	ldw	r4,128(sp)
 800f96c:	d9801a04 	addi	r6,sp,104
 800f970:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f974:	103f891e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800f978:	d8801c17 	ldw	r2,112(sp)
 800f97c:	d811883a 	mov	r8,sp
 800f980:	003f9506 	br	800f7d8 <__alt_data_end+0xfc00f7d8>
 800f984:	d9402117 	ldw	r5,132(sp)
 800f988:	d9002017 	ldw	r4,128(sp)
 800f98c:	d9801a04 	addi	r6,sp,104
 800f990:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f994:	103f811e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800f998:	d811883a 	mov	r8,sp
 800f99c:	003ced06 	br	800ed54 <__alt_data_end+0xfc00ed54>
 800f9a0:	d9402117 	ldw	r5,132(sp)
 800f9a4:	d9002017 	ldw	r4,128(sp)
 800f9a8:	d9801a04 	addi	r6,sp,104
 800f9ac:	da402c15 	stw	r9,176(sp)
 800f9b0:	db802a15 	stw	r14,168(sp)
 800f9b4:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f9b8:	da402c17 	ldw	r9,176(sp)
 800f9bc:	db802a17 	ldw	r14,168(sp)
 800f9c0:	103f761e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800f9c4:	d9401b17 	ldw	r5,108(sp)
 800f9c8:	d8801c17 	ldw	r2,112(sp)
 800f9cc:	d811883a 	mov	r8,sp
 800f9d0:	29000044 	addi	r4,r5,1
 800f9d4:	003d5b06 	br	800ef44 <__alt_data_end+0xfc00ef44>
 800f9d8:	d9402117 	ldw	r5,132(sp)
 800f9dc:	d9002017 	ldw	r4,128(sp)
 800f9e0:	d9801a04 	addi	r6,sp,104
 800f9e4:	da402c15 	stw	r9,176(sp)
 800f9e8:	800e9380 	call	800e938 <__sprint_r.part.0>
 800f9ec:	da402c17 	ldw	r9,176(sp)
 800f9f0:	103f6a1e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800f9f4:	d9401b17 	ldw	r5,108(sp)
 800f9f8:	d8801c17 	ldw	r2,112(sp)
 800f9fc:	d811883a 	mov	r8,sp
 800fa00:	29000044 	addi	r4,r5,1
 800fa04:	003f1006 	br	800f648 <__alt_data_end+0xfc00f648>
 800fa08:	1000c31e 	bne	r2,zero,800fd18 <___vfiprintf_internal_r+0x12cc>
 800fa0c:	01000044 	movi	r4,1
 800fa10:	000b883a 	mov	r5,zero
 800fa14:	d811883a 	mov	r8,sp
 800fa18:	003f0d06 	br	800f650 <__alt_data_end+0xfc00f650>
 800fa1c:	d9402117 	ldw	r5,132(sp)
 800fa20:	d9002017 	ldw	r4,128(sp)
 800fa24:	d9801a04 	addi	r6,sp,104
 800fa28:	800e9380 	call	800e938 <__sprint_r.part.0>
 800fa2c:	103f5b1e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800fa30:	d9001b17 	ldw	r4,108(sp)
 800fa34:	d8801c17 	ldw	r2,112(sp)
 800fa38:	d811883a 	mov	r8,sp
 800fa3c:	21000044 	addi	r4,r4,1
 800fa40:	003d8006 	br	800f044 <__alt_data_end+0xfc00f044>
 800fa44:	01020074 	movhi	r4,2049
 800fa48:	21172d04 	addi	r4,r4,23732
 800fa4c:	d9002615 	stw	r4,152(sp)
 800fa50:	d8c02215 	stw	r3,136(sp)
 800fa54:	1029883a 	mov	r20,r2
 800fa58:	94c4b03a 	or	r2,r18,r19
 800fa5c:	103fb21e 	bne	r2,zero,800f928 <__alt_data_end+0xfc00f928>
 800fa60:	0039883a 	mov	fp,zero
 800fa64:	00800084 	movi	r2,2
 800fa68:	003e6b06 	br	800f418 <__alt_data_end+0xfc00f418>
 800fa6c:	da802217 	ldw	r10,136(sp)
 800fa70:	d8001d85 	stb	zero,118(sp)
 800fa74:	0027883a 	mov	r19,zero
 800fa78:	50800104 	addi	r2,r10,4
 800fa7c:	54800017 	ldw	r18,0(r10)
 800fa80:	483e6016 	blt	r9,zero,800f404 <__alt_data_end+0xfc00f404>
 800fa84:	00ffdfc4 	movi	r3,-129
 800fa88:	d8802215 	stw	r2,136(sp)
 800fa8c:	a0e8703a 	and	r20,r20,r3
 800fa90:	0039883a 	mov	fp,zero
 800fa94:	903ebb26 	beq	r18,zero,800f584 <__alt_data_end+0xfc00f584>
 800fa98:	00800244 	movi	r2,9
 800fa9c:	14bdee36 	bltu	r2,r18,800f258 <__alt_data_end+0xfc00f258>
 800faa0:	003eba06 	br	800f58c <__alt_data_end+0xfc00f58c>
 800faa4:	00800c04 	movi	r2,48
 800faa8:	d8c01d45 	stb	r3,117(sp)
 800faac:	d8801d05 	stb	r2,116(sp)
 800fab0:	d8001d85 	stb	zero,118(sp)
 800fab4:	a0c00094 	ori	r3,r20,2
 800fab8:	4800a916 	blt	r9,zero,800fd60 <___vfiprintf_internal_r+0x1314>
 800fabc:	00bfdfc4 	movi	r2,-129
 800fac0:	a096703a 	and	r11,r20,r2
 800fac4:	5d000094 	ori	r20,r11,2
 800fac8:	0039883a 	mov	fp,zero
 800facc:	003f9706 	br	800f92c <__alt_data_end+0xfc00f92c>
 800fad0:	8025883a 	mov	r18,r16
 800fad4:	003c2e06 	br	800eb90 <__alt_data_end+0xfc00eb90>
 800fad8:	00820074 	movhi	r2,2049
 800fadc:	10972d04 	addi	r2,r2,23732
 800fae0:	0039883a 	mov	fp,zero
 800fae4:	d8802615 	stw	r2,152(sp)
 800fae8:	003f9006 	br	800f92c <__alt_data_end+0xfc00f92c>
 800faec:	04a5c83a 	sub	r18,zero,r18
 800faf0:	07000b44 	movi	fp,45
 800faf4:	9004c03a 	cmpne	r2,r18,zero
 800faf8:	04e7c83a 	sub	r19,zero,r19
 800fafc:	df001d85 	stb	fp,118(sp)
 800fb00:	98a7c83a 	sub	r19,r19,r2
 800fb04:	48009f16 	blt	r9,zero,800fd84 <___vfiprintf_internal_r+0x1338>
 800fb08:	00bfdfc4 	movi	r2,-129
 800fb0c:	a0a8703a 	and	r20,r20,r2
 800fb10:	003dd006 	br	800f254 <__alt_data_end+0xfc00f254>
 800fb14:	70004c26 	beq	r14,zero,800fc48 <___vfiprintf_internal_r+0x11fc>
 800fb18:	00800084 	movi	r2,2
 800fb1c:	d8c01d04 	addi	r3,sp,116
 800fb20:	d8c00015 	stw	r3,0(sp)
 800fb24:	d8800115 	stw	r2,4(sp)
 800fb28:	01000044 	movi	r4,1
 800fb2c:	d811883a 	mov	r8,sp
 800fb30:	003f7306 	br	800f900 <__alt_data_end+0xfc00f900>
 800fb34:	a080100c 	andi	r2,r20,64
 800fb38:	da802217 	ldw	r10,136(sp)
 800fb3c:	103e0626 	beq	r2,zero,800f358 <__alt_data_end+0xfc00f358>
 800fb40:	5480000f 	ldh	r18,0(r10)
 800fb44:	52800104 	addi	r10,r10,4
 800fb48:	da802215 	stw	r10,136(sp)
 800fb4c:	9027d7fa 	srai	r19,r18,31
 800fb50:	9805883a 	mov	r2,r19
 800fb54:	003db806 	br	800f238 <__alt_data_end+0xfc00f238>
 800fb58:	a080040c 	andi	r2,r20,16
 800fb5c:	1000091e 	bne	r2,zero,800fb84 <___vfiprintf_internal_r+0x1138>
 800fb60:	a2c0100c 	andi	r11,r20,64
 800fb64:	58000726 	beq	r11,zero,800fb84 <___vfiprintf_internal_r+0x1138>
 800fb68:	da802217 	ldw	r10,136(sp)
 800fb6c:	50800017 	ldw	r2,0(r10)
 800fb70:	52800104 	addi	r10,r10,4
 800fb74:	da802215 	stw	r10,136(sp)
 800fb78:	da802317 	ldw	r10,140(sp)
 800fb7c:	1280000d 	sth	r10,0(r2)
 800fb80:	003be706 	br	800eb20 <__alt_data_end+0xfc00eb20>
 800fb84:	da802217 	ldw	r10,136(sp)
 800fb88:	50800017 	ldw	r2,0(r10)
 800fb8c:	52800104 	addi	r10,r10,4
 800fb90:	da802215 	stw	r10,136(sp)
 800fb94:	da802317 	ldw	r10,140(sp)
 800fb98:	12800015 	stw	r10,0(r2)
 800fb9c:	003be006 	br	800eb20 <__alt_data_end+0xfc00eb20>
 800fba0:	a080100c 	andi	r2,r20,64
 800fba4:	da802217 	ldw	r10,136(sp)
 800fba8:	10003026 	beq	r2,zero,800fc6c <___vfiprintf_internal_r+0x1220>
 800fbac:	5480000b 	ldhu	r18,0(r10)
 800fbb0:	52800104 	addi	r10,r10,4
 800fbb4:	0027883a 	mov	r19,zero
 800fbb8:	da802215 	stw	r10,136(sp)
 800fbbc:	003d8006 	br	800f1c0 <__alt_data_end+0xfc00f1c0>
 800fbc0:	80c00007 	ldb	r3,0(r16)
 800fbc4:	003c0006 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800fbc8:	a080100c 	andi	r2,r20,64
 800fbcc:	d8001d85 	stb	zero,118(sp)
 800fbd0:	da802217 	ldw	r10,136(sp)
 800fbd4:	1000201e 	bne	r2,zero,800fc58 <___vfiprintf_internal_r+0x120c>
 800fbd8:	50800104 	addi	r2,r10,4
 800fbdc:	54800017 	ldw	r18,0(r10)
 800fbe0:	0027883a 	mov	r19,zero
 800fbe4:	483def0e 	bge	r9,zero,800f3a4 <__alt_data_end+0xfc00f3a4>
 800fbe8:	94c6b03a 	or	r3,r18,r19
 800fbec:	d8802215 	stw	r2,136(sp)
 800fbf0:	183d4e1e 	bne	r3,zero,800f12c <__alt_data_end+0xfc00f12c>
 800fbf4:	0039883a 	mov	fp,zero
 800fbf8:	0005883a 	mov	r2,zero
 800fbfc:	003e0606 	br	800f418 <__alt_data_end+0xfc00f418>
 800fc00:	d9402117 	ldw	r5,132(sp)
 800fc04:	d9002017 	ldw	r4,128(sp)
 800fc08:	d9801a04 	addi	r6,sp,104
 800fc0c:	da402c15 	stw	r9,176(sp)
 800fc10:	db802a15 	stw	r14,168(sp)
 800fc14:	800e9380 	call	800e938 <__sprint_r.part.0>
 800fc18:	da402c17 	ldw	r9,176(sp)
 800fc1c:	db802a17 	ldw	r14,168(sp)
 800fc20:	103ede1e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800fc24:	d9401b17 	ldw	r5,108(sp)
 800fc28:	d8801c17 	ldw	r2,112(sp)
 800fc2c:	d811883a 	mov	r8,sp
 800fc30:	29000044 	addi	r4,r5,1
 800fc34:	003e7406 	br	800f608 <__alt_data_end+0xfc00f608>
 800fc38:	00bfffc4 	movi	r2,-1
 800fc3c:	003c5806 	br	800eda0 <__alt_data_end+0xfc00eda0>
 800fc40:	d811883a 	mov	r8,sp
 800fc44:	003ee806 	br	800f7e8 <__alt_data_end+0xfc00f7e8>
 800fc48:	000b883a 	mov	r5,zero
 800fc4c:	01000044 	movi	r4,1
 800fc50:	d811883a 	mov	r8,sp
 800fc54:	003e7c06 	br	800f648 <__alt_data_end+0xfc00f648>
 800fc58:	50800104 	addi	r2,r10,4
 800fc5c:	5480000b 	ldhu	r18,0(r10)
 800fc60:	0027883a 	mov	r19,zero
 800fc64:	483dcf0e 	bge	r9,zero,800f3a4 <__alt_data_end+0xfc00f3a4>
 800fc68:	003fdf06 	br	800fbe8 <__alt_data_end+0xfc00fbe8>
 800fc6c:	54800017 	ldw	r18,0(r10)
 800fc70:	52800104 	addi	r10,r10,4
 800fc74:	0027883a 	mov	r19,zero
 800fc78:	da802215 	stw	r10,136(sp)
 800fc7c:	003d5006 	br	800f1c0 <__alt_data_end+0xfc00f1c0>
 800fc80:	50800104 	addi	r2,r10,4
 800fc84:	5480000b 	ldhu	r18,0(r10)
 800fc88:	0027883a 	mov	r19,zero
 800fc8c:	483f7d0e 	bge	r9,zero,800fa84 <__alt_data_end+0xfc00fa84>
 800fc90:	003ddc06 	br	800f404 <__alt_data_end+0xfc00f404>
 800fc94:	d8c02215 	stw	r3,136(sp)
 800fc98:	0039883a 	mov	fp,zero
 800fc9c:	003ddb06 	br	800f40c <__alt_data_end+0xfc00f40c>
 800fca0:	02820074 	movhi	r10,2049
 800fca4:	52978d04 	addi	r10,r10,24116
 800fca8:	da802415 	stw	r10,144(sp)
 800fcac:	003e8306 	br	800f6bc <__alt_data_end+0xfc00f6bc>
 800fcb0:	d8801c17 	ldw	r2,112(sp)
 800fcb4:	dd002117 	ldw	r20,132(sp)
 800fcb8:	103eb926 	beq	r2,zero,800f7a0 <__alt_data_end+0xfc00f7a0>
 800fcbc:	d9002017 	ldw	r4,128(sp)
 800fcc0:	d9801a04 	addi	r6,sp,104
 800fcc4:	a00b883a 	mov	r5,r20
 800fcc8:	800e9380 	call	800e938 <__sprint_r.part.0>
 800fccc:	003eb406 	br	800f7a0 <__alt_data_end+0xfc00f7a0>
 800fcd0:	80c00043 	ldbu	r3,1(r16)
 800fcd4:	a5000814 	ori	r20,r20,32
 800fcd8:	84000044 	addi	r16,r16,1
 800fcdc:	18c03fcc 	andi	r3,r3,255
 800fce0:	18c0201c 	xori	r3,r3,128
 800fce4:	18ffe004 	addi	r3,r3,-128
 800fce8:	003bb706 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800fcec:	a809883a 	mov	r4,r21
 800fcf0:	d8c02a15 	stw	r3,168(sp)
 800fcf4:	da002b15 	stw	r8,172(sp)
 800fcf8:	80074140 	call	8007414 <strlen>
 800fcfc:	d8c02a17 	ldw	r3,168(sp)
 800fd00:	1027883a 	mov	r19,r2
 800fd04:	df001d83 	ldbu	fp,118(sp)
 800fd08:	d8c02215 	stw	r3,136(sp)
 800fd0c:	0013883a 	mov	r9,zero
 800fd10:	da002b17 	ldw	r8,172(sp)
 800fd14:	003c4d06 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800fd18:	d9402117 	ldw	r5,132(sp)
 800fd1c:	d9002017 	ldw	r4,128(sp)
 800fd20:	d9801a04 	addi	r6,sp,104
 800fd24:	da402c15 	stw	r9,176(sp)
 800fd28:	800e9380 	call	800e938 <__sprint_r.part.0>
 800fd2c:	da402c17 	ldw	r9,176(sp)
 800fd30:	103e9a1e 	bne	r2,zero,800f79c <__alt_data_end+0xfc00f79c>
 800fd34:	d9401b17 	ldw	r5,108(sp)
 800fd38:	d8801c17 	ldw	r2,112(sp)
 800fd3c:	d811883a 	mov	r8,sp
 800fd40:	29000044 	addi	r4,r5,1
 800fd44:	003e4206 	br	800f650 <__alt_data_end+0xfc00f650>
 800fd48:	d9401b17 	ldw	r5,108(sp)
 800fd4c:	01020074 	movhi	r4,2049
 800fd50:	21179104 	addi	r4,r4,24132
 800fd54:	d9002415 	stw	r4,144(sp)
 800fd58:	29400044 	addi	r5,r5,1
 800fd5c:	003c6d06 	br	800ef14 <__alt_data_end+0xfc00ef14>
 800fd60:	0039883a 	mov	fp,zero
 800fd64:	00800084 	movi	r2,2
 800fd68:	10803fcc 	andi	r2,r2,255
 800fd6c:	01000044 	movi	r4,1
 800fd70:	11001e26 	beq	r2,r4,800fdec <___vfiprintf_internal_r+0x13a0>
 800fd74:	01000084 	movi	r4,2
 800fd78:	11001e1e 	bne	r2,r4,800fdf4 <___vfiprintf_internal_r+0x13a8>
 800fd7c:	1829883a 	mov	r20,r3
 800fd80:	003eea06 	br	800f92c <__alt_data_end+0xfc00f92c>
 800fd84:	a007883a 	mov	r3,r20
 800fd88:	00800044 	movi	r2,1
 800fd8c:	003ff606 	br	800fd68 <__alt_data_end+0xfc00fd68>
 800fd90:	00800184 	movi	r2,6
 800fd94:	1240012e 	bgeu	r2,r9,800fd9c <___vfiprintf_internal_r+0x1350>
 800fd98:	1013883a 	mov	r9,r2
 800fd9c:	4827883a 	mov	r19,r9
 800fda0:	4825883a 	mov	r18,r9
 800fda4:	48001516 	blt	r9,zero,800fdfc <___vfiprintf_internal_r+0x13b0>
 800fda8:	05420074 	movhi	r21,2049
 800fdac:	d8c02215 	stw	r3,136(sp)
 800fdb0:	ad573204 	addi	r21,r21,23752
 800fdb4:	003d1406 	br	800f208 <__alt_data_end+0xfc00f208>
 800fdb8:	02820074 	movhi	r10,2049
 800fdbc:	52978d04 	addi	r10,r10,24116
 800fdc0:	da802415 	stw	r10,144(sp)
 800fdc4:	200d883a 	mov	r6,r4
 800fdc8:	003c9106 	br	800f010 <__alt_data_end+0xfc00f010>
 800fdcc:	5021883a 	mov	r16,r10
 800fdd0:	0013883a 	mov	r9,zero
 800fdd4:	003b7d06 	br	800ebcc <__alt_data_end+0xfc00ebcc>
 800fdd8:	4827883a 	mov	r19,r9
 800fddc:	df001d83 	ldbu	fp,118(sp)
 800fde0:	d8c02215 	stw	r3,136(sp)
 800fde4:	0013883a 	mov	r9,zero
 800fde8:	003c1806 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800fdec:	1829883a 	mov	r20,r3
 800fdf0:	003d1806 	br	800f254 <__alt_data_end+0xfc00f254>
 800fdf4:	1829883a 	mov	r20,r3
 800fdf8:	003ccd06 	br	800f130 <__alt_data_end+0xfc00f130>
 800fdfc:	0025883a 	mov	r18,zero
 800fe00:	003fe906 	br	800fda8 <__alt_data_end+0xfc00fda8>
 800fe04:	d8802217 	ldw	r2,136(sp)
 800fe08:	80c00043 	ldbu	r3,1(r16)
 800fe0c:	5021883a 	mov	r16,r10
 800fe10:	12400017 	ldw	r9,0(r2)
 800fe14:	10800104 	addi	r2,r2,4
 800fe18:	d8802215 	stw	r2,136(sp)
 800fe1c:	483faf0e 	bge	r9,zero,800fcdc <__alt_data_end+0xfc00fcdc>
 800fe20:	18c03fcc 	andi	r3,r3,255
 800fe24:	18c0201c 	xori	r3,r3,128
 800fe28:	027fffc4 	movi	r9,-1
 800fe2c:	18ffe004 	addi	r3,r3,-128
 800fe30:	003b6506 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800fe34:	d9c01d85 	stb	r7,118(sp)
 800fe38:	003ca006 	br	800f0bc <__alt_data_end+0xfc00f0bc>
 800fe3c:	d9c01d85 	stb	r7,118(sp)
 800fe40:	003cad06 	br	800f0f8 <__alt_data_end+0xfc00f0f8>
 800fe44:	d9c01d85 	stb	r7,118(sp)
 800fe48:	003d7d06 	br	800f440 <__alt_data_end+0xfc00f440>
 800fe4c:	d9c01d85 	stb	r7,118(sp)
 800fe50:	003d5f06 	br	800f3d0 <__alt_data_end+0xfc00f3d0>
 800fe54:	a080004c 	andi	r2,r20,1
 800fe58:	0039883a 	mov	fp,zero
 800fe5c:	10000526 	beq	r2,zero,800fe74 <___vfiprintf_internal_r+0x1428>
 800fe60:	00800c04 	movi	r2,48
 800fe64:	d88019c5 	stb	r2,103(sp)
 800fe68:	dcc02717 	ldw	r19,156(sp)
 800fe6c:	dd4019c4 	addi	r21,sp,103
 800fe70:	003bf606 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800fe74:	0027883a 	mov	r19,zero
 800fe78:	dd401a04 	addi	r21,sp,104
 800fe7c:	003bf306 	br	800ee4c <__alt_data_end+0xfc00ee4c>
 800fe80:	d9c01d85 	stb	r7,118(sp)
 800fe84:	003dc806 	br	800f5a8 <__alt_data_end+0xfc00f5a8>
 800fe88:	d9c01d85 	stb	r7,118(sp)
 800fe8c:	003d3a06 	br	800f378 <__alt_data_end+0xfc00f378>
 800fe90:	d9c01d85 	stb	r7,118(sp)
 800fe94:	003d2a06 	br	800f340 <__alt_data_end+0xfc00f340>
 800fe98:	d9c01d85 	stb	r7,118(sp)
 800fe9c:	003cde06 	br	800f218 <__alt_data_end+0xfc00f218>
 800fea0:	d9c01d85 	stb	r7,118(sp)
 800fea4:	003cbc06 	br	800f198 <__alt_data_end+0xfc00f198>

0800fea8 <__vfiprintf_internal>:
 800fea8:	00820074 	movhi	r2,2049
 800feac:	109eae04 	addi	r2,r2,31416
 800feb0:	300f883a 	mov	r7,r6
 800feb4:	280d883a 	mov	r6,r5
 800feb8:	200b883a 	mov	r5,r4
 800febc:	11000017 	ldw	r4,0(r2)
 800fec0:	800ea4c1 	jmpi	800ea4c <___vfiprintf_internal_r>

0800fec4 <__sbprintf>:
 800fec4:	2880030b 	ldhu	r2,12(r5)
 800fec8:	2ac01917 	ldw	r11,100(r5)
 800fecc:	2a80038b 	ldhu	r10,14(r5)
 800fed0:	2a400717 	ldw	r9,28(r5)
 800fed4:	2a000917 	ldw	r8,36(r5)
 800fed8:	defee204 	addi	sp,sp,-1144
 800fedc:	00c10004 	movi	r3,1024
 800fee0:	dc011a15 	stw	r16,1128(sp)
 800fee4:	10bfff4c 	andi	r2,r2,65533
 800fee8:	2821883a 	mov	r16,r5
 800feec:	d8cb883a 	add	r5,sp,r3
 800fef0:	dc811c15 	stw	r18,1136(sp)
 800fef4:	dc411b15 	stw	r17,1132(sp)
 800fef8:	dfc11d15 	stw	ra,1140(sp)
 800fefc:	2025883a 	mov	r18,r4
 800ff00:	d881030d 	sth	r2,1036(sp)
 800ff04:	dac11915 	stw	r11,1124(sp)
 800ff08:	da81038d 	sth	r10,1038(sp)
 800ff0c:	da410715 	stw	r9,1052(sp)
 800ff10:	da010915 	stw	r8,1060(sp)
 800ff14:	dec10015 	stw	sp,1024(sp)
 800ff18:	dec10415 	stw	sp,1040(sp)
 800ff1c:	d8c10215 	stw	r3,1032(sp)
 800ff20:	d8c10515 	stw	r3,1044(sp)
 800ff24:	d8010615 	stw	zero,1048(sp)
 800ff28:	800ea4c0 	call	800ea4c <___vfiprintf_internal_r>
 800ff2c:	1023883a 	mov	r17,r2
 800ff30:	10000416 	blt	r2,zero,800ff44 <__sbprintf+0x80>
 800ff34:	d9410004 	addi	r5,sp,1024
 800ff38:	9009883a 	mov	r4,r18
 800ff3c:	800b3740 	call	800b374 <_fflush_r>
 800ff40:	10000d1e 	bne	r2,zero,800ff78 <__sbprintf+0xb4>
 800ff44:	d881030b 	ldhu	r2,1036(sp)
 800ff48:	1080100c 	andi	r2,r2,64
 800ff4c:	10000326 	beq	r2,zero,800ff5c <__sbprintf+0x98>
 800ff50:	8080030b 	ldhu	r2,12(r16)
 800ff54:	10801014 	ori	r2,r2,64
 800ff58:	8080030d 	sth	r2,12(r16)
 800ff5c:	8805883a 	mov	r2,r17
 800ff60:	dfc11d17 	ldw	ra,1140(sp)
 800ff64:	dc811c17 	ldw	r18,1136(sp)
 800ff68:	dc411b17 	ldw	r17,1132(sp)
 800ff6c:	dc011a17 	ldw	r16,1128(sp)
 800ff70:	dec11e04 	addi	sp,sp,1144
 800ff74:	f800283a 	ret
 800ff78:	047fffc4 	movi	r17,-1
 800ff7c:	003ff106 	br	800ff44 <__alt_data_end+0xfc00ff44>

0800ff80 <_write_r>:
 800ff80:	defffd04 	addi	sp,sp,-12
 800ff84:	2805883a 	mov	r2,r5
 800ff88:	dc000015 	stw	r16,0(sp)
 800ff8c:	040200b4 	movhi	r16,2050
 800ff90:	dc400115 	stw	r17,4(sp)
 800ff94:	300b883a 	mov	r5,r6
 800ff98:	8425ca04 	addi	r16,r16,-26840
 800ff9c:	2023883a 	mov	r17,r4
 800ffa0:	380d883a 	mov	r6,r7
 800ffa4:	1009883a 	mov	r4,r2
 800ffa8:	dfc00215 	stw	ra,8(sp)
 800ffac:	80000015 	stw	zero,0(r16)
 800ffb0:	8011c880 	call	8011c88 <write>
 800ffb4:	00ffffc4 	movi	r3,-1
 800ffb8:	10c00526 	beq	r2,r3,800ffd0 <_write_r+0x50>
 800ffbc:	dfc00217 	ldw	ra,8(sp)
 800ffc0:	dc400117 	ldw	r17,4(sp)
 800ffc4:	dc000017 	ldw	r16,0(sp)
 800ffc8:	dec00304 	addi	sp,sp,12
 800ffcc:	f800283a 	ret
 800ffd0:	80c00017 	ldw	r3,0(r16)
 800ffd4:	183ff926 	beq	r3,zero,800ffbc <__alt_data_end+0xfc00ffbc>
 800ffd8:	88c00015 	stw	r3,0(r17)
 800ffdc:	003ff706 	br	800ffbc <__alt_data_end+0xfc00ffbc>

0800ffe0 <_close_r>:
 800ffe0:	defffd04 	addi	sp,sp,-12
 800ffe4:	dc000015 	stw	r16,0(sp)
 800ffe8:	040200b4 	movhi	r16,2050
 800ffec:	dc400115 	stw	r17,4(sp)
 800fff0:	8425ca04 	addi	r16,r16,-26840
 800fff4:	2023883a 	mov	r17,r4
 800fff8:	2809883a 	mov	r4,r5
 800fffc:	dfc00215 	stw	ra,8(sp)
 8010000:	80000015 	stw	zero,0(r16)
 8010004:	80114480 	call	8011448 <close>
 8010008:	00ffffc4 	movi	r3,-1
 801000c:	10c00526 	beq	r2,r3,8010024 <_close_r+0x44>
 8010010:	dfc00217 	ldw	ra,8(sp)
 8010014:	dc400117 	ldw	r17,4(sp)
 8010018:	dc000017 	ldw	r16,0(sp)
 801001c:	dec00304 	addi	sp,sp,12
 8010020:	f800283a 	ret
 8010024:	80c00017 	ldw	r3,0(r16)
 8010028:	183ff926 	beq	r3,zero,8010010 <__alt_data_end+0xfc010010>
 801002c:	88c00015 	stw	r3,0(r17)
 8010030:	003ff706 	br	8010010 <__alt_data_end+0xfc010010>

08010034 <_calloc_r>:
 8010034:	298b383a 	mul	r5,r5,r6
 8010038:	defffe04 	addi	sp,sp,-8
 801003c:	dfc00115 	stw	ra,4(sp)
 8010040:	dc000015 	stw	r16,0(sp)
 8010044:	800c4b00 	call	800c4b0 <_malloc_r>
 8010048:	10002926 	beq	r2,zero,80100f0 <_calloc_r+0xbc>
 801004c:	11bfff17 	ldw	r6,-4(r2)
 8010050:	1021883a 	mov	r16,r2
 8010054:	00bfff04 	movi	r2,-4
 8010058:	308c703a 	and	r6,r6,r2
 801005c:	00c00904 	movi	r3,36
 8010060:	308d883a 	add	r6,r6,r2
 8010064:	19801636 	bltu	r3,r6,80100c0 <_calloc_r+0x8c>
 8010068:	008004c4 	movi	r2,19
 801006c:	11800b2e 	bgeu	r2,r6,801009c <_calloc_r+0x68>
 8010070:	80000015 	stw	zero,0(r16)
 8010074:	80000115 	stw	zero,4(r16)
 8010078:	008006c4 	movi	r2,27
 801007c:	11801a2e 	bgeu	r2,r6,80100e8 <_calloc_r+0xb4>
 8010080:	80000215 	stw	zero,8(r16)
 8010084:	80000315 	stw	zero,12(r16)
 8010088:	30c0151e 	bne	r6,r3,80100e0 <_calloc_r+0xac>
 801008c:	80000415 	stw	zero,16(r16)
 8010090:	80800604 	addi	r2,r16,24
 8010094:	80000515 	stw	zero,20(r16)
 8010098:	00000106 	br	80100a0 <_calloc_r+0x6c>
 801009c:	8005883a 	mov	r2,r16
 80100a0:	10000015 	stw	zero,0(r2)
 80100a4:	10000115 	stw	zero,4(r2)
 80100a8:	10000215 	stw	zero,8(r2)
 80100ac:	8005883a 	mov	r2,r16
 80100b0:	dfc00117 	ldw	ra,4(sp)
 80100b4:	dc000017 	ldw	r16,0(sp)
 80100b8:	dec00204 	addi	sp,sp,8
 80100bc:	f800283a 	ret
 80100c0:	000b883a 	mov	r5,zero
 80100c4:	8009883a 	mov	r4,r16
 80100c8:	800d0440 	call	800d044 <memset>
 80100cc:	8005883a 	mov	r2,r16
 80100d0:	dfc00117 	ldw	ra,4(sp)
 80100d4:	dc000017 	ldw	r16,0(sp)
 80100d8:	dec00204 	addi	sp,sp,8
 80100dc:	f800283a 	ret
 80100e0:	80800404 	addi	r2,r16,16
 80100e4:	003fee06 	br	80100a0 <__alt_data_end+0xfc0100a0>
 80100e8:	80800204 	addi	r2,r16,8
 80100ec:	003fec06 	br	80100a0 <__alt_data_end+0xfc0100a0>
 80100f0:	0005883a 	mov	r2,zero
 80100f4:	003fee06 	br	80100b0 <__alt_data_end+0xfc0100b0>

080100f8 <_fclose_r>:
 80100f8:	28003926 	beq	r5,zero,80101e0 <_fclose_r+0xe8>
 80100fc:	defffc04 	addi	sp,sp,-16
 8010100:	dc400115 	stw	r17,4(sp)
 8010104:	dc000015 	stw	r16,0(sp)
 8010108:	dfc00315 	stw	ra,12(sp)
 801010c:	dc800215 	stw	r18,8(sp)
 8010110:	2023883a 	mov	r17,r4
 8010114:	2821883a 	mov	r16,r5
 8010118:	20000226 	beq	r4,zero,8010124 <_fclose_r+0x2c>
 801011c:	20800e17 	ldw	r2,56(r4)
 8010120:	10002726 	beq	r2,zero,80101c0 <_fclose_r+0xc8>
 8010124:	8080030f 	ldh	r2,12(r16)
 8010128:	1000071e 	bne	r2,zero,8010148 <_fclose_r+0x50>
 801012c:	0005883a 	mov	r2,zero
 8010130:	dfc00317 	ldw	ra,12(sp)
 8010134:	dc800217 	ldw	r18,8(sp)
 8010138:	dc400117 	ldw	r17,4(sp)
 801013c:	dc000017 	ldw	r16,0(sp)
 8010140:	dec00404 	addi	sp,sp,16
 8010144:	f800283a 	ret
 8010148:	800b883a 	mov	r5,r16
 801014c:	8809883a 	mov	r4,r17
 8010150:	800b1580 	call	800b158 <__sflush_r>
 8010154:	1025883a 	mov	r18,r2
 8010158:	80800b17 	ldw	r2,44(r16)
 801015c:	10000426 	beq	r2,zero,8010170 <_fclose_r+0x78>
 8010160:	81400717 	ldw	r5,28(r16)
 8010164:	8809883a 	mov	r4,r17
 8010168:	103ee83a 	callr	r2
 801016c:	10001616 	blt	r2,zero,80101c8 <_fclose_r+0xd0>
 8010170:	8080030b 	ldhu	r2,12(r16)
 8010174:	1080200c 	andi	r2,r2,128
 8010178:	1000151e 	bne	r2,zero,80101d0 <_fclose_r+0xd8>
 801017c:	81400c17 	ldw	r5,48(r16)
 8010180:	28000526 	beq	r5,zero,8010198 <_fclose_r+0xa0>
 8010184:	80801004 	addi	r2,r16,64
 8010188:	28800226 	beq	r5,r2,8010194 <_fclose_r+0x9c>
 801018c:	8809883a 	mov	r4,r17
 8010190:	800b8c40 	call	800b8c4 <_free_r>
 8010194:	80000c15 	stw	zero,48(r16)
 8010198:	81401117 	ldw	r5,68(r16)
 801019c:	28000326 	beq	r5,zero,80101ac <_fclose_r+0xb4>
 80101a0:	8809883a 	mov	r4,r17
 80101a4:	800b8c40 	call	800b8c4 <_free_r>
 80101a8:	80001115 	stw	zero,68(r16)
 80101ac:	800b7600 	call	800b760 <__sfp_lock_acquire>
 80101b0:	8000030d 	sth	zero,12(r16)
 80101b4:	800b7640 	call	800b764 <__sfp_lock_release>
 80101b8:	9005883a 	mov	r2,r18
 80101bc:	003fdc06 	br	8010130 <__alt_data_end+0xfc010130>
 80101c0:	800b7500 	call	800b750 <__sinit>
 80101c4:	003fd706 	br	8010124 <__alt_data_end+0xfc010124>
 80101c8:	04bfffc4 	movi	r18,-1
 80101cc:	003fe806 	br	8010170 <__alt_data_end+0xfc010170>
 80101d0:	81400417 	ldw	r5,16(r16)
 80101d4:	8809883a 	mov	r4,r17
 80101d8:	800b8c40 	call	800b8c4 <_free_r>
 80101dc:	003fe706 	br	801017c <__alt_data_end+0xfc01017c>
 80101e0:	0005883a 	mov	r2,zero
 80101e4:	f800283a 	ret

080101e8 <fclose>:
 80101e8:	00820074 	movhi	r2,2049
 80101ec:	109eae04 	addi	r2,r2,31416
 80101f0:	200b883a 	mov	r5,r4
 80101f4:	11000017 	ldw	r4,0(r2)
 80101f8:	80100f81 	jmpi	80100f8 <_fclose_r>

080101fc <__fputwc>:
 80101fc:	defff804 	addi	sp,sp,-32
 8010200:	dcc00415 	stw	r19,16(sp)
 8010204:	dc800315 	stw	r18,12(sp)
 8010208:	dc000115 	stw	r16,4(sp)
 801020c:	dfc00715 	stw	ra,28(sp)
 8010210:	dd400615 	stw	r21,24(sp)
 8010214:	dd000515 	stw	r20,20(sp)
 8010218:	dc400215 	stw	r17,8(sp)
 801021c:	2027883a 	mov	r19,r4
 8010220:	2825883a 	mov	r18,r5
 8010224:	3021883a 	mov	r16,r6
 8010228:	800c2a00 	call	800c2a0 <__locale_mb_cur_max>
 801022c:	00c00044 	movi	r3,1
 8010230:	10c03e26 	beq	r2,r3,801032c <__fputwc+0x130>
 8010234:	81c01704 	addi	r7,r16,92
 8010238:	900d883a 	mov	r6,r18
 801023c:	d80b883a 	mov	r5,sp
 8010240:	9809883a 	mov	r4,r19
 8010244:	80106cc0 	call	80106cc <_wcrtomb_r>
 8010248:	1029883a 	mov	r20,r2
 801024c:	00bfffc4 	movi	r2,-1
 8010250:	a0802026 	beq	r20,r2,80102d4 <__fputwc+0xd8>
 8010254:	d9400003 	ldbu	r5,0(sp)
 8010258:	a0001c26 	beq	r20,zero,80102cc <__fputwc+0xd0>
 801025c:	0023883a 	mov	r17,zero
 8010260:	05400284 	movi	r21,10
 8010264:	00000906 	br	801028c <__fputwc+0x90>
 8010268:	80800017 	ldw	r2,0(r16)
 801026c:	11400005 	stb	r5,0(r2)
 8010270:	80c00017 	ldw	r3,0(r16)
 8010274:	18c00044 	addi	r3,r3,1
 8010278:	80c00015 	stw	r3,0(r16)
 801027c:	8c400044 	addi	r17,r17,1
 8010280:	dc45883a 	add	r2,sp,r17
 8010284:	8d00112e 	bgeu	r17,r20,80102cc <__fputwc+0xd0>
 8010288:	11400003 	ldbu	r5,0(r2)
 801028c:	80c00217 	ldw	r3,8(r16)
 8010290:	18ffffc4 	addi	r3,r3,-1
 8010294:	80c00215 	stw	r3,8(r16)
 8010298:	183ff30e 	bge	r3,zero,8010268 <__alt_data_end+0xfc010268>
 801029c:	80800617 	ldw	r2,24(r16)
 80102a0:	18801916 	blt	r3,r2,8010308 <__fputwc+0x10c>
 80102a4:	80800017 	ldw	r2,0(r16)
 80102a8:	11400005 	stb	r5,0(r2)
 80102ac:	80800017 	ldw	r2,0(r16)
 80102b0:	10c00003 	ldbu	r3,0(r2)
 80102b4:	10800044 	addi	r2,r2,1
 80102b8:	1d402326 	beq	r3,r21,8010348 <__fputwc+0x14c>
 80102bc:	80800015 	stw	r2,0(r16)
 80102c0:	8c400044 	addi	r17,r17,1
 80102c4:	dc45883a 	add	r2,sp,r17
 80102c8:	8d3fef36 	bltu	r17,r20,8010288 <__alt_data_end+0xfc010288>
 80102cc:	9005883a 	mov	r2,r18
 80102d0:	00000406 	br	80102e4 <__fputwc+0xe8>
 80102d4:	80c0030b 	ldhu	r3,12(r16)
 80102d8:	a005883a 	mov	r2,r20
 80102dc:	18c01014 	ori	r3,r3,64
 80102e0:	80c0030d 	sth	r3,12(r16)
 80102e4:	dfc00717 	ldw	ra,28(sp)
 80102e8:	dd400617 	ldw	r21,24(sp)
 80102ec:	dd000517 	ldw	r20,20(sp)
 80102f0:	dcc00417 	ldw	r19,16(sp)
 80102f4:	dc800317 	ldw	r18,12(sp)
 80102f8:	dc400217 	ldw	r17,8(sp)
 80102fc:	dc000117 	ldw	r16,4(sp)
 8010300:	dec00804 	addi	sp,sp,32
 8010304:	f800283a 	ret
 8010308:	800d883a 	mov	r6,r16
 801030c:	29403fcc 	andi	r5,r5,255
 8010310:	9809883a 	mov	r4,r19
 8010314:	80105740 	call	8010574 <__swbuf_r>
 8010318:	10bfffe0 	cmpeqi	r2,r2,-1
 801031c:	10803fcc 	andi	r2,r2,255
 8010320:	103fd626 	beq	r2,zero,801027c <__alt_data_end+0xfc01027c>
 8010324:	00bfffc4 	movi	r2,-1
 8010328:	003fee06 	br	80102e4 <__alt_data_end+0xfc0102e4>
 801032c:	90ffffc4 	addi	r3,r18,-1
 8010330:	01003f84 	movi	r4,254
 8010334:	20ffbf36 	bltu	r4,r3,8010234 <__alt_data_end+0xfc010234>
 8010338:	900b883a 	mov	r5,r18
 801033c:	dc800005 	stb	r18,0(sp)
 8010340:	1029883a 	mov	r20,r2
 8010344:	003fc506 	br	801025c <__alt_data_end+0xfc01025c>
 8010348:	800d883a 	mov	r6,r16
 801034c:	a80b883a 	mov	r5,r21
 8010350:	9809883a 	mov	r4,r19
 8010354:	80105740 	call	8010574 <__swbuf_r>
 8010358:	10bfffe0 	cmpeqi	r2,r2,-1
 801035c:	003fef06 	br	801031c <__alt_data_end+0xfc01031c>

08010360 <_fputwc_r>:
 8010360:	3080030b 	ldhu	r2,12(r6)
 8010364:	10c8000c 	andi	r3,r2,8192
 8010368:	1800051e 	bne	r3,zero,8010380 <_fputwc_r+0x20>
 801036c:	30c01917 	ldw	r3,100(r6)
 8010370:	10880014 	ori	r2,r2,8192
 8010374:	3080030d 	sth	r2,12(r6)
 8010378:	18880014 	ori	r2,r3,8192
 801037c:	30801915 	stw	r2,100(r6)
 8010380:	80101fc1 	jmpi	80101fc <__fputwc>

08010384 <fputwc>:
 8010384:	00820074 	movhi	r2,2049
 8010388:	defffc04 	addi	sp,sp,-16
 801038c:	109eae04 	addi	r2,r2,31416
 8010390:	dc000115 	stw	r16,4(sp)
 8010394:	14000017 	ldw	r16,0(r2)
 8010398:	dc400215 	stw	r17,8(sp)
 801039c:	dfc00315 	stw	ra,12(sp)
 80103a0:	2023883a 	mov	r17,r4
 80103a4:	80000226 	beq	r16,zero,80103b0 <fputwc+0x2c>
 80103a8:	80800e17 	ldw	r2,56(r16)
 80103ac:	10001026 	beq	r2,zero,80103f0 <fputwc+0x6c>
 80103b0:	2880030b 	ldhu	r2,12(r5)
 80103b4:	10c8000c 	andi	r3,r2,8192
 80103b8:	1800051e 	bne	r3,zero,80103d0 <fputwc+0x4c>
 80103bc:	28c01917 	ldw	r3,100(r5)
 80103c0:	10880014 	ori	r2,r2,8192
 80103c4:	2880030d 	sth	r2,12(r5)
 80103c8:	18880014 	ori	r2,r3,8192
 80103cc:	28801915 	stw	r2,100(r5)
 80103d0:	280d883a 	mov	r6,r5
 80103d4:	8009883a 	mov	r4,r16
 80103d8:	880b883a 	mov	r5,r17
 80103dc:	dfc00317 	ldw	ra,12(sp)
 80103e0:	dc400217 	ldw	r17,8(sp)
 80103e4:	dc000117 	ldw	r16,4(sp)
 80103e8:	dec00404 	addi	sp,sp,16
 80103ec:	80101fc1 	jmpi	80101fc <__fputwc>
 80103f0:	8009883a 	mov	r4,r16
 80103f4:	d9400015 	stw	r5,0(sp)
 80103f8:	800b7500 	call	800b750 <__sinit>
 80103fc:	d9400017 	ldw	r5,0(sp)
 8010400:	003feb06 	br	80103b0 <__alt_data_end+0xfc0103b0>

08010404 <_fstat_r>:
 8010404:	defffd04 	addi	sp,sp,-12
 8010408:	2805883a 	mov	r2,r5
 801040c:	dc000015 	stw	r16,0(sp)
 8010410:	040200b4 	movhi	r16,2050
 8010414:	dc400115 	stw	r17,4(sp)
 8010418:	8425ca04 	addi	r16,r16,-26840
 801041c:	2023883a 	mov	r17,r4
 8010420:	300b883a 	mov	r5,r6
 8010424:	1009883a 	mov	r4,r2
 8010428:	dfc00215 	stw	ra,8(sp)
 801042c:	80000015 	stw	zero,0(r16)
 8010430:	80115800 	call	8011580 <fstat>
 8010434:	00ffffc4 	movi	r3,-1
 8010438:	10c00526 	beq	r2,r3,8010450 <_fstat_r+0x4c>
 801043c:	dfc00217 	ldw	ra,8(sp)
 8010440:	dc400117 	ldw	r17,4(sp)
 8010444:	dc000017 	ldw	r16,0(sp)
 8010448:	dec00304 	addi	sp,sp,12
 801044c:	f800283a 	ret
 8010450:	80c00017 	ldw	r3,0(r16)
 8010454:	183ff926 	beq	r3,zero,801043c <__alt_data_end+0xfc01043c>
 8010458:	88c00015 	stw	r3,0(r17)
 801045c:	003ff706 	br	801043c <__alt_data_end+0xfc01043c>

08010460 <_isatty_r>:
 8010460:	defffd04 	addi	sp,sp,-12
 8010464:	dc000015 	stw	r16,0(sp)
 8010468:	040200b4 	movhi	r16,2050
 801046c:	dc400115 	stw	r17,4(sp)
 8010470:	8425ca04 	addi	r16,r16,-26840
 8010474:	2023883a 	mov	r17,r4
 8010478:	2809883a 	mov	r4,r5
 801047c:	dfc00215 	stw	ra,8(sp)
 8010480:	80000015 	stw	zero,0(r16)
 8010484:	801166c0 	call	801166c <isatty>
 8010488:	00ffffc4 	movi	r3,-1
 801048c:	10c00526 	beq	r2,r3,80104a4 <_isatty_r+0x44>
 8010490:	dfc00217 	ldw	ra,8(sp)
 8010494:	dc400117 	ldw	r17,4(sp)
 8010498:	dc000017 	ldw	r16,0(sp)
 801049c:	dec00304 	addi	sp,sp,12
 80104a0:	f800283a 	ret
 80104a4:	80c00017 	ldw	r3,0(r16)
 80104a8:	183ff926 	beq	r3,zero,8010490 <__alt_data_end+0xfc010490>
 80104ac:	88c00015 	stw	r3,0(r17)
 80104b0:	003ff706 	br	8010490 <__alt_data_end+0xfc010490>

080104b4 <_lseek_r>:
 80104b4:	defffd04 	addi	sp,sp,-12
 80104b8:	2805883a 	mov	r2,r5
 80104bc:	dc000015 	stw	r16,0(sp)
 80104c0:	040200b4 	movhi	r16,2050
 80104c4:	dc400115 	stw	r17,4(sp)
 80104c8:	300b883a 	mov	r5,r6
 80104cc:	8425ca04 	addi	r16,r16,-26840
 80104d0:	2023883a 	mov	r17,r4
 80104d4:	380d883a 	mov	r6,r7
 80104d8:	1009883a 	mov	r4,r2
 80104dc:	dfc00215 	stw	ra,8(sp)
 80104e0:	80000015 	stw	zero,0(r16)
 80104e4:	80118380 	call	8011838 <lseek>
 80104e8:	00ffffc4 	movi	r3,-1
 80104ec:	10c00526 	beq	r2,r3,8010504 <_lseek_r+0x50>
 80104f0:	dfc00217 	ldw	ra,8(sp)
 80104f4:	dc400117 	ldw	r17,4(sp)
 80104f8:	dc000017 	ldw	r16,0(sp)
 80104fc:	dec00304 	addi	sp,sp,12
 8010500:	f800283a 	ret
 8010504:	80c00017 	ldw	r3,0(r16)
 8010508:	183ff926 	beq	r3,zero,80104f0 <__alt_data_end+0xfc0104f0>
 801050c:	88c00015 	stw	r3,0(r17)
 8010510:	003ff706 	br	80104f0 <__alt_data_end+0xfc0104f0>

08010514 <_read_r>:
 8010514:	defffd04 	addi	sp,sp,-12
 8010518:	2805883a 	mov	r2,r5
 801051c:	dc000015 	stw	r16,0(sp)
 8010520:	040200b4 	movhi	r16,2050
 8010524:	dc400115 	stw	r17,4(sp)
 8010528:	300b883a 	mov	r5,r6
 801052c:	8425ca04 	addi	r16,r16,-26840
 8010530:	2023883a 	mov	r17,r4
 8010534:	380d883a 	mov	r6,r7
 8010538:	1009883a 	mov	r4,r2
 801053c:	dfc00215 	stw	ra,8(sp)
 8010540:	80000015 	stw	zero,0(r16)
 8010544:	8011a0c0 	call	8011a0c <read>
 8010548:	00ffffc4 	movi	r3,-1
 801054c:	10c00526 	beq	r2,r3,8010564 <_read_r+0x50>
 8010550:	dfc00217 	ldw	ra,8(sp)
 8010554:	dc400117 	ldw	r17,4(sp)
 8010558:	dc000017 	ldw	r16,0(sp)
 801055c:	dec00304 	addi	sp,sp,12
 8010560:	f800283a 	ret
 8010564:	80c00017 	ldw	r3,0(r16)
 8010568:	183ff926 	beq	r3,zero,8010550 <__alt_data_end+0xfc010550>
 801056c:	88c00015 	stw	r3,0(r17)
 8010570:	003ff706 	br	8010550 <__alt_data_end+0xfc010550>

08010574 <__swbuf_r>:
 8010574:	defffb04 	addi	sp,sp,-20
 8010578:	dcc00315 	stw	r19,12(sp)
 801057c:	dc800215 	stw	r18,8(sp)
 8010580:	dc000015 	stw	r16,0(sp)
 8010584:	dfc00415 	stw	ra,16(sp)
 8010588:	dc400115 	stw	r17,4(sp)
 801058c:	2025883a 	mov	r18,r4
 8010590:	2827883a 	mov	r19,r5
 8010594:	3021883a 	mov	r16,r6
 8010598:	20000226 	beq	r4,zero,80105a4 <__swbuf_r+0x30>
 801059c:	20800e17 	ldw	r2,56(r4)
 80105a0:	10004226 	beq	r2,zero,80106ac <__swbuf_r+0x138>
 80105a4:	80800617 	ldw	r2,24(r16)
 80105a8:	8100030b 	ldhu	r4,12(r16)
 80105ac:	80800215 	stw	r2,8(r16)
 80105b0:	2080020c 	andi	r2,r4,8
 80105b4:	10003626 	beq	r2,zero,8010690 <__swbuf_r+0x11c>
 80105b8:	80c00417 	ldw	r3,16(r16)
 80105bc:	18003426 	beq	r3,zero,8010690 <__swbuf_r+0x11c>
 80105c0:	2088000c 	andi	r2,r4,8192
 80105c4:	9c403fcc 	andi	r17,r19,255
 80105c8:	10001a26 	beq	r2,zero,8010634 <__swbuf_r+0xc0>
 80105cc:	80800017 	ldw	r2,0(r16)
 80105d0:	81000517 	ldw	r4,20(r16)
 80105d4:	10c7c83a 	sub	r3,r2,r3
 80105d8:	1900200e 	bge	r3,r4,801065c <__swbuf_r+0xe8>
 80105dc:	18c00044 	addi	r3,r3,1
 80105e0:	81000217 	ldw	r4,8(r16)
 80105e4:	11400044 	addi	r5,r2,1
 80105e8:	81400015 	stw	r5,0(r16)
 80105ec:	213fffc4 	addi	r4,r4,-1
 80105f0:	81000215 	stw	r4,8(r16)
 80105f4:	14c00005 	stb	r19,0(r2)
 80105f8:	80800517 	ldw	r2,20(r16)
 80105fc:	10c01e26 	beq	r2,r3,8010678 <__swbuf_r+0x104>
 8010600:	8080030b 	ldhu	r2,12(r16)
 8010604:	1080004c 	andi	r2,r2,1
 8010608:	10000226 	beq	r2,zero,8010614 <__swbuf_r+0xa0>
 801060c:	00800284 	movi	r2,10
 8010610:	88801926 	beq	r17,r2,8010678 <__swbuf_r+0x104>
 8010614:	8805883a 	mov	r2,r17
 8010618:	dfc00417 	ldw	ra,16(sp)
 801061c:	dcc00317 	ldw	r19,12(sp)
 8010620:	dc800217 	ldw	r18,8(sp)
 8010624:	dc400117 	ldw	r17,4(sp)
 8010628:	dc000017 	ldw	r16,0(sp)
 801062c:	dec00504 	addi	sp,sp,20
 8010630:	f800283a 	ret
 8010634:	81401917 	ldw	r5,100(r16)
 8010638:	00b7ffc4 	movi	r2,-8193
 801063c:	21080014 	ori	r4,r4,8192
 8010640:	2884703a 	and	r2,r5,r2
 8010644:	80801915 	stw	r2,100(r16)
 8010648:	80800017 	ldw	r2,0(r16)
 801064c:	8100030d 	sth	r4,12(r16)
 8010650:	81000517 	ldw	r4,20(r16)
 8010654:	10c7c83a 	sub	r3,r2,r3
 8010658:	193fe016 	blt	r3,r4,80105dc <__alt_data_end+0xfc0105dc>
 801065c:	800b883a 	mov	r5,r16
 8010660:	9009883a 	mov	r4,r18
 8010664:	800b3740 	call	800b374 <_fflush_r>
 8010668:	1000071e 	bne	r2,zero,8010688 <__swbuf_r+0x114>
 801066c:	80800017 	ldw	r2,0(r16)
 8010670:	00c00044 	movi	r3,1
 8010674:	003fda06 	br	80105e0 <__alt_data_end+0xfc0105e0>
 8010678:	800b883a 	mov	r5,r16
 801067c:	9009883a 	mov	r4,r18
 8010680:	800b3740 	call	800b374 <_fflush_r>
 8010684:	103fe326 	beq	r2,zero,8010614 <__alt_data_end+0xfc010614>
 8010688:	00bfffc4 	movi	r2,-1
 801068c:	003fe206 	br	8010618 <__alt_data_end+0xfc010618>
 8010690:	800b883a 	mov	r5,r16
 8010694:	9009883a 	mov	r4,r18
 8010698:	800977c0 	call	800977c <__swsetup_r>
 801069c:	103ffa1e 	bne	r2,zero,8010688 <__alt_data_end+0xfc010688>
 80106a0:	8100030b 	ldhu	r4,12(r16)
 80106a4:	80c00417 	ldw	r3,16(r16)
 80106a8:	003fc506 	br	80105c0 <__alt_data_end+0xfc0105c0>
 80106ac:	800b7500 	call	800b750 <__sinit>
 80106b0:	003fbc06 	br	80105a4 <__alt_data_end+0xfc0105a4>

080106b4 <__swbuf>:
 80106b4:	00820074 	movhi	r2,2049
 80106b8:	109eae04 	addi	r2,r2,31416
 80106bc:	280d883a 	mov	r6,r5
 80106c0:	200b883a 	mov	r5,r4
 80106c4:	11000017 	ldw	r4,0(r2)
 80106c8:	80105741 	jmpi	8010574 <__swbuf_r>

080106cc <_wcrtomb_r>:
 80106cc:	defff604 	addi	sp,sp,-40
 80106d0:	00820074 	movhi	r2,2049
 80106d4:	dc800815 	stw	r18,32(sp)
 80106d8:	dc400715 	stw	r17,28(sp)
 80106dc:	dc000615 	stw	r16,24(sp)
 80106e0:	109eb204 	addi	r2,r2,31432
 80106e4:	dfc00915 	stw	ra,36(sp)
 80106e8:	2021883a 	mov	r16,r4
 80106ec:	3823883a 	mov	r17,r7
 80106f0:	14800017 	ldw	r18,0(r2)
 80106f4:	28001426 	beq	r5,zero,8010748 <_wcrtomb_r+0x7c>
 80106f8:	d9400415 	stw	r5,16(sp)
 80106fc:	d9800515 	stw	r6,20(sp)
 8010700:	800c2940 	call	800c294 <__locale_charset>
 8010704:	d9800517 	ldw	r6,20(sp)
 8010708:	d9400417 	ldw	r5,16(sp)
 801070c:	100f883a 	mov	r7,r2
 8010710:	dc400015 	stw	r17,0(sp)
 8010714:	8009883a 	mov	r4,r16
 8010718:	903ee83a 	callr	r18
 801071c:	00ffffc4 	movi	r3,-1
 8010720:	10c0031e 	bne	r2,r3,8010730 <_wcrtomb_r+0x64>
 8010724:	88000015 	stw	zero,0(r17)
 8010728:	00c02284 	movi	r3,138
 801072c:	80c00015 	stw	r3,0(r16)
 8010730:	dfc00917 	ldw	ra,36(sp)
 8010734:	dc800817 	ldw	r18,32(sp)
 8010738:	dc400717 	ldw	r17,28(sp)
 801073c:	dc000617 	ldw	r16,24(sp)
 8010740:	dec00a04 	addi	sp,sp,40
 8010744:	f800283a 	ret
 8010748:	800c2940 	call	800c294 <__locale_charset>
 801074c:	100f883a 	mov	r7,r2
 8010750:	dc400015 	stw	r17,0(sp)
 8010754:	000d883a 	mov	r6,zero
 8010758:	d9400104 	addi	r5,sp,4
 801075c:	8009883a 	mov	r4,r16
 8010760:	903ee83a 	callr	r18
 8010764:	003fed06 	br	801071c <__alt_data_end+0xfc01071c>

08010768 <wcrtomb>:
 8010768:	defff604 	addi	sp,sp,-40
 801076c:	00820074 	movhi	r2,2049
 8010770:	dc800615 	stw	r18,24(sp)
 8010774:	dc400515 	stw	r17,20(sp)
 8010778:	109eae04 	addi	r2,r2,31416
 801077c:	dfc00915 	stw	ra,36(sp)
 8010780:	dd000815 	stw	r20,32(sp)
 8010784:	dcc00715 	stw	r19,28(sp)
 8010788:	dc000415 	stw	r16,16(sp)
 801078c:	3025883a 	mov	r18,r6
 8010790:	14400017 	ldw	r17,0(r2)
 8010794:	20001926 	beq	r4,zero,80107fc <wcrtomb+0x94>
 8010798:	00820074 	movhi	r2,2049
 801079c:	109eb204 	addi	r2,r2,31432
 80107a0:	15000017 	ldw	r20,0(r2)
 80107a4:	2021883a 	mov	r16,r4
 80107a8:	2827883a 	mov	r19,r5
 80107ac:	800c2940 	call	800c294 <__locale_charset>
 80107b0:	100f883a 	mov	r7,r2
 80107b4:	dc800015 	stw	r18,0(sp)
 80107b8:	980d883a 	mov	r6,r19
 80107bc:	800b883a 	mov	r5,r16
 80107c0:	8809883a 	mov	r4,r17
 80107c4:	a03ee83a 	callr	r20
 80107c8:	00ffffc4 	movi	r3,-1
 80107cc:	10c0031e 	bne	r2,r3,80107dc <wcrtomb+0x74>
 80107d0:	90000015 	stw	zero,0(r18)
 80107d4:	00c02284 	movi	r3,138
 80107d8:	88c00015 	stw	r3,0(r17)
 80107dc:	dfc00917 	ldw	ra,36(sp)
 80107e0:	dd000817 	ldw	r20,32(sp)
 80107e4:	dcc00717 	ldw	r19,28(sp)
 80107e8:	dc800617 	ldw	r18,24(sp)
 80107ec:	dc400517 	ldw	r17,20(sp)
 80107f0:	dc000417 	ldw	r16,16(sp)
 80107f4:	dec00a04 	addi	sp,sp,40
 80107f8:	f800283a 	ret
 80107fc:	00820074 	movhi	r2,2049
 8010800:	109eb204 	addi	r2,r2,31432
 8010804:	14000017 	ldw	r16,0(r2)
 8010808:	800c2940 	call	800c294 <__locale_charset>
 801080c:	100f883a 	mov	r7,r2
 8010810:	dc800015 	stw	r18,0(sp)
 8010814:	000d883a 	mov	r6,zero
 8010818:	d9400104 	addi	r5,sp,4
 801081c:	8809883a 	mov	r4,r17
 8010820:	803ee83a 	callr	r16
 8010824:	003fe806 	br	80107c8 <__alt_data_end+0xfc0107c8>

08010828 <__ascii_wctomb>:
 8010828:	28000526 	beq	r5,zero,8010840 <__ascii_wctomb+0x18>
 801082c:	00803fc4 	movi	r2,255
 8010830:	11800536 	bltu	r2,r6,8010848 <__ascii_wctomb+0x20>
 8010834:	29800005 	stb	r6,0(r5)
 8010838:	00800044 	movi	r2,1
 801083c:	f800283a 	ret
 8010840:	0005883a 	mov	r2,zero
 8010844:	f800283a 	ret
 8010848:	00802284 	movi	r2,138
 801084c:	20800015 	stw	r2,0(r4)
 8010850:	00bfffc4 	movi	r2,-1
 8010854:	f800283a 	ret

08010858 <_wctomb_r>:
 8010858:	00820074 	movhi	r2,2049
 801085c:	defff904 	addi	sp,sp,-28
 8010860:	109eb204 	addi	r2,r2,31432
 8010864:	dfc00615 	stw	ra,24(sp)
 8010868:	dc400515 	stw	r17,20(sp)
 801086c:	dc000415 	stw	r16,16(sp)
 8010870:	3823883a 	mov	r17,r7
 8010874:	14000017 	ldw	r16,0(r2)
 8010878:	d9000115 	stw	r4,4(sp)
 801087c:	d9400215 	stw	r5,8(sp)
 8010880:	d9800315 	stw	r6,12(sp)
 8010884:	800c2940 	call	800c294 <__locale_charset>
 8010888:	d9800317 	ldw	r6,12(sp)
 801088c:	d9400217 	ldw	r5,8(sp)
 8010890:	d9000117 	ldw	r4,4(sp)
 8010894:	100f883a 	mov	r7,r2
 8010898:	dc400015 	stw	r17,0(sp)
 801089c:	803ee83a 	callr	r16
 80108a0:	dfc00617 	ldw	ra,24(sp)
 80108a4:	dc400517 	ldw	r17,20(sp)
 80108a8:	dc000417 	ldw	r16,16(sp)
 80108ac:	dec00704 	addi	sp,sp,28
 80108b0:	f800283a 	ret

080108b4 <__udivdi3>:
 80108b4:	defff504 	addi	sp,sp,-44
 80108b8:	dcc00415 	stw	r19,16(sp)
 80108bc:	dc000115 	stw	r16,4(sp)
 80108c0:	dfc00a15 	stw	ra,40(sp)
 80108c4:	df000915 	stw	fp,36(sp)
 80108c8:	ddc00815 	stw	r23,32(sp)
 80108cc:	dd800715 	stw	r22,28(sp)
 80108d0:	dd400615 	stw	r21,24(sp)
 80108d4:	dd000515 	stw	r20,20(sp)
 80108d8:	dc800315 	stw	r18,12(sp)
 80108dc:	dc400215 	stw	r17,8(sp)
 80108e0:	2027883a 	mov	r19,r4
 80108e4:	2821883a 	mov	r16,r5
 80108e8:	3800411e 	bne	r7,zero,80109f0 <__udivdi3+0x13c>
 80108ec:	3023883a 	mov	r17,r6
 80108f0:	2025883a 	mov	r18,r4
 80108f4:	2980522e 	bgeu	r5,r6,8010a40 <__udivdi3+0x18c>
 80108f8:	00bfffd4 	movui	r2,65535
 80108fc:	282d883a 	mov	r22,r5
 8010900:	1180a836 	bltu	r2,r6,8010ba4 <__udivdi3+0x2f0>
 8010904:	00803fc4 	movi	r2,255
 8010908:	1185803a 	cmpltu	r2,r2,r6
 801090c:	100490fa 	slli	r2,r2,3
 8010910:	3086d83a 	srl	r3,r6,r2
 8010914:	01020074 	movhi	r4,2049
 8010918:	2116e204 	addi	r4,r4,23432
 801091c:	20c7883a 	add	r3,r4,r3
 8010920:	18c00003 	ldbu	r3,0(r3)
 8010924:	1885883a 	add	r2,r3,r2
 8010928:	00c00804 	movi	r3,32
 801092c:	1887c83a 	sub	r3,r3,r2
 8010930:	18000526 	beq	r3,zero,8010948 <__udivdi3+0x94>
 8010934:	80e0983a 	sll	r16,r16,r3
 8010938:	9884d83a 	srl	r2,r19,r2
 801093c:	30e2983a 	sll	r17,r6,r3
 8010940:	98e4983a 	sll	r18,r19,r3
 8010944:	142cb03a 	or	r22,r2,r16
 8010948:	882ad43a 	srli	r21,r17,16
 801094c:	b009883a 	mov	r4,r22
 8010950:	8d3fffcc 	andi	r20,r17,65535
 8010954:	a80b883a 	mov	r5,r21
 8010958:	80034f40 	call	80034f4 <__umodsi3>
 801095c:	b009883a 	mov	r4,r22
 8010960:	a80b883a 	mov	r5,r21
 8010964:	1027883a 	mov	r19,r2
 8010968:	80034900 	call	8003490 <__udivsi3>
 801096c:	102d883a 	mov	r22,r2
 8010970:	9826943a 	slli	r19,r19,16
 8010974:	9004d43a 	srli	r2,r18,16
 8010978:	a5a1383a 	mul	r16,r20,r22
 801097c:	14c4b03a 	or	r2,r2,r19
 8010980:	1400052e 	bgeu	r2,r16,8010998 <__udivdi3+0xe4>
 8010984:	1445883a 	add	r2,r2,r17
 8010988:	b0ffffc4 	addi	r3,r22,-1
 801098c:	14400136 	bltu	r2,r17,8010994 <__udivdi3+0xe0>
 8010990:	14012336 	bltu	r2,r16,8010e20 <__udivdi3+0x56c>
 8010994:	182d883a 	mov	r22,r3
 8010998:	1421c83a 	sub	r16,r2,r16
 801099c:	a80b883a 	mov	r5,r21
 80109a0:	8009883a 	mov	r4,r16
 80109a4:	80034f40 	call	80034f4 <__umodsi3>
 80109a8:	1027883a 	mov	r19,r2
 80109ac:	a80b883a 	mov	r5,r21
 80109b0:	8009883a 	mov	r4,r16
 80109b4:	80034900 	call	8003490 <__udivsi3>
 80109b8:	9826943a 	slli	r19,r19,16
 80109bc:	a0a9383a 	mul	r20,r20,r2
 80109c0:	94bfffcc 	andi	r18,r18,65535
 80109c4:	94e4b03a 	or	r18,r18,r19
 80109c8:	9500052e 	bgeu	r18,r20,80109e0 <__udivdi3+0x12c>
 80109cc:	8ca5883a 	add	r18,r17,r18
 80109d0:	10ffffc4 	addi	r3,r2,-1
 80109d4:	9440f136 	bltu	r18,r17,8010d9c <__udivdi3+0x4e8>
 80109d8:	9500f02e 	bgeu	r18,r20,8010d9c <__udivdi3+0x4e8>
 80109dc:	10bfff84 	addi	r2,r2,-2
 80109e0:	b00c943a 	slli	r6,r22,16
 80109e4:	0007883a 	mov	r3,zero
 80109e8:	3084b03a 	or	r2,r6,r2
 80109ec:	00005906 	br	8010b54 <__udivdi3+0x2a0>
 80109f0:	29c05636 	bltu	r5,r7,8010b4c <__udivdi3+0x298>
 80109f4:	00bfffd4 	movui	r2,65535
 80109f8:	11c0622e 	bgeu	r2,r7,8010b84 <__udivdi3+0x2d0>
 80109fc:	00804034 	movhi	r2,256
 8010a00:	10bfffc4 	addi	r2,r2,-1
 8010a04:	11c0ee36 	bltu	r2,r7,8010dc0 <__udivdi3+0x50c>
 8010a08:	00800404 	movi	r2,16
 8010a0c:	3886d83a 	srl	r3,r7,r2
 8010a10:	01020074 	movhi	r4,2049
 8010a14:	2116e204 	addi	r4,r4,23432
 8010a18:	20c7883a 	add	r3,r4,r3
 8010a1c:	18c00003 	ldbu	r3,0(r3)
 8010a20:	05400804 	movi	r21,32
 8010a24:	1885883a 	add	r2,r3,r2
 8010a28:	a8abc83a 	sub	r21,r21,r2
 8010a2c:	a800621e 	bne	r21,zero,8010bb8 <__udivdi3+0x304>
 8010a30:	3c00e936 	bltu	r7,r16,8010dd8 <__udivdi3+0x524>
 8010a34:	9985403a 	cmpgeu	r2,r19,r6
 8010a38:	0007883a 	mov	r3,zero
 8010a3c:	00004506 	br	8010b54 <__udivdi3+0x2a0>
 8010a40:	3000041e 	bne	r6,zero,8010a54 <__udivdi3+0x1a0>
 8010a44:	000b883a 	mov	r5,zero
 8010a48:	01000044 	movi	r4,1
 8010a4c:	80034900 	call	8003490 <__udivsi3>
 8010a50:	1023883a 	mov	r17,r2
 8010a54:	00bfffd4 	movui	r2,65535
 8010a58:	14404e2e 	bgeu	r2,r17,8010b94 <__udivdi3+0x2e0>
 8010a5c:	00804034 	movhi	r2,256
 8010a60:	10bfffc4 	addi	r2,r2,-1
 8010a64:	1440d836 	bltu	r2,r17,8010dc8 <__udivdi3+0x514>
 8010a68:	00800404 	movi	r2,16
 8010a6c:	8886d83a 	srl	r3,r17,r2
 8010a70:	01020074 	movhi	r4,2049
 8010a74:	2116e204 	addi	r4,r4,23432
 8010a78:	20c7883a 	add	r3,r4,r3
 8010a7c:	18c00003 	ldbu	r3,0(r3)
 8010a80:	1885883a 	add	r2,r3,r2
 8010a84:	00c00804 	movi	r3,32
 8010a88:	1887c83a 	sub	r3,r3,r2
 8010a8c:	18008f1e 	bne	r3,zero,8010ccc <__udivdi3+0x418>
 8010a90:	882ad43a 	srli	r21,r17,16
 8010a94:	8461c83a 	sub	r16,r16,r17
 8010a98:	8d3fffcc 	andi	r20,r17,65535
 8010a9c:	00c00044 	movi	r3,1
 8010aa0:	8009883a 	mov	r4,r16
 8010aa4:	a80b883a 	mov	r5,r21
 8010aa8:	d8c00015 	stw	r3,0(sp)
 8010aac:	80034f40 	call	80034f4 <__umodsi3>
 8010ab0:	8009883a 	mov	r4,r16
 8010ab4:	a80b883a 	mov	r5,r21
 8010ab8:	1027883a 	mov	r19,r2
 8010abc:	80034900 	call	8003490 <__udivsi3>
 8010ac0:	9826943a 	slli	r19,r19,16
 8010ac4:	9008d43a 	srli	r4,r18,16
 8010ac8:	1521383a 	mul	r16,r2,r20
 8010acc:	102d883a 	mov	r22,r2
 8010ad0:	24c8b03a 	or	r4,r4,r19
 8010ad4:	d8c00017 	ldw	r3,0(sp)
 8010ad8:	2400052e 	bgeu	r4,r16,8010af0 <__udivdi3+0x23c>
 8010adc:	2449883a 	add	r4,r4,r17
 8010ae0:	b0bfffc4 	addi	r2,r22,-1
 8010ae4:	24400136 	bltu	r4,r17,8010aec <__udivdi3+0x238>
 8010ae8:	2400ca36 	bltu	r4,r16,8010e14 <__udivdi3+0x560>
 8010aec:	102d883a 	mov	r22,r2
 8010af0:	2421c83a 	sub	r16,r4,r16
 8010af4:	a80b883a 	mov	r5,r21
 8010af8:	8009883a 	mov	r4,r16
 8010afc:	d8c00015 	stw	r3,0(sp)
 8010b00:	80034f40 	call	80034f4 <__umodsi3>
 8010b04:	1027883a 	mov	r19,r2
 8010b08:	a80b883a 	mov	r5,r21
 8010b0c:	8009883a 	mov	r4,r16
 8010b10:	80034900 	call	8003490 <__udivsi3>
 8010b14:	9826943a 	slli	r19,r19,16
 8010b18:	1529383a 	mul	r20,r2,r20
 8010b1c:	94bfffcc 	andi	r18,r18,65535
 8010b20:	94e4b03a 	or	r18,r18,r19
 8010b24:	d8c00017 	ldw	r3,0(sp)
 8010b28:	9500052e 	bgeu	r18,r20,8010b40 <__udivdi3+0x28c>
 8010b2c:	8ca5883a 	add	r18,r17,r18
 8010b30:	113fffc4 	addi	r4,r2,-1
 8010b34:	94409736 	bltu	r18,r17,8010d94 <__udivdi3+0x4e0>
 8010b38:	9500962e 	bgeu	r18,r20,8010d94 <__udivdi3+0x4e0>
 8010b3c:	10bfff84 	addi	r2,r2,-2
 8010b40:	b00c943a 	slli	r6,r22,16
 8010b44:	3084b03a 	or	r2,r6,r2
 8010b48:	00000206 	br	8010b54 <__udivdi3+0x2a0>
 8010b4c:	0007883a 	mov	r3,zero
 8010b50:	0005883a 	mov	r2,zero
 8010b54:	dfc00a17 	ldw	ra,40(sp)
 8010b58:	df000917 	ldw	fp,36(sp)
 8010b5c:	ddc00817 	ldw	r23,32(sp)
 8010b60:	dd800717 	ldw	r22,28(sp)
 8010b64:	dd400617 	ldw	r21,24(sp)
 8010b68:	dd000517 	ldw	r20,20(sp)
 8010b6c:	dcc00417 	ldw	r19,16(sp)
 8010b70:	dc800317 	ldw	r18,12(sp)
 8010b74:	dc400217 	ldw	r17,8(sp)
 8010b78:	dc000117 	ldw	r16,4(sp)
 8010b7c:	dec00b04 	addi	sp,sp,44
 8010b80:	f800283a 	ret
 8010b84:	00803fc4 	movi	r2,255
 8010b88:	11c5803a 	cmpltu	r2,r2,r7
 8010b8c:	100490fa 	slli	r2,r2,3
 8010b90:	003f9e06 	br	8010a0c <__alt_data_end+0xfc010a0c>
 8010b94:	00803fc4 	movi	r2,255
 8010b98:	1445803a 	cmpltu	r2,r2,r17
 8010b9c:	100490fa 	slli	r2,r2,3
 8010ba0:	003fb206 	br	8010a6c <__alt_data_end+0xfc010a6c>
 8010ba4:	00804034 	movhi	r2,256
 8010ba8:	10bfffc4 	addi	r2,r2,-1
 8010bac:	11808836 	bltu	r2,r6,8010dd0 <__udivdi3+0x51c>
 8010bb0:	00800404 	movi	r2,16
 8010bb4:	003f5606 	br	8010910 <__alt_data_end+0xfc010910>
 8010bb8:	30aed83a 	srl	r23,r6,r2
 8010bbc:	3d4e983a 	sll	r7,r7,r21
 8010bc0:	80acd83a 	srl	r22,r16,r2
 8010bc4:	9884d83a 	srl	r2,r19,r2
 8010bc8:	3deeb03a 	or	r23,r7,r23
 8010bcc:	b824d43a 	srli	r18,r23,16
 8010bd0:	8560983a 	sll	r16,r16,r21
 8010bd4:	b009883a 	mov	r4,r22
 8010bd8:	900b883a 	mov	r5,r18
 8010bdc:	3568983a 	sll	r20,r6,r21
 8010be0:	1420b03a 	or	r16,r2,r16
 8010be4:	80034f40 	call	80034f4 <__umodsi3>
 8010be8:	b009883a 	mov	r4,r22
 8010bec:	900b883a 	mov	r5,r18
 8010bf0:	1023883a 	mov	r17,r2
 8010bf4:	80034900 	call	8003490 <__udivsi3>
 8010bf8:	8808943a 	slli	r4,r17,16
 8010bfc:	bf3fffcc 	andi	fp,r23,65535
 8010c00:	8006d43a 	srli	r3,r16,16
 8010c04:	e0a3383a 	mul	r17,fp,r2
 8010c08:	100d883a 	mov	r6,r2
 8010c0c:	1906b03a 	or	r3,r3,r4
 8010c10:	1c40042e 	bgeu	r3,r17,8010c24 <__udivdi3+0x370>
 8010c14:	1dc7883a 	add	r3,r3,r23
 8010c18:	10bfffc4 	addi	r2,r2,-1
 8010c1c:	1dc0752e 	bgeu	r3,r23,8010df4 <__udivdi3+0x540>
 8010c20:	100d883a 	mov	r6,r2
 8010c24:	1c63c83a 	sub	r17,r3,r17
 8010c28:	900b883a 	mov	r5,r18
 8010c2c:	8809883a 	mov	r4,r17
 8010c30:	d9800015 	stw	r6,0(sp)
 8010c34:	80034f40 	call	80034f4 <__umodsi3>
 8010c38:	102d883a 	mov	r22,r2
 8010c3c:	8809883a 	mov	r4,r17
 8010c40:	900b883a 	mov	r5,r18
 8010c44:	80034900 	call	8003490 <__udivsi3>
 8010c48:	b02c943a 	slli	r22,r22,16
 8010c4c:	e089383a 	mul	r4,fp,r2
 8010c50:	843fffcc 	andi	r16,r16,65535
 8010c54:	85a0b03a 	or	r16,r16,r22
 8010c58:	d9800017 	ldw	r6,0(sp)
 8010c5c:	8100042e 	bgeu	r16,r4,8010c70 <__udivdi3+0x3bc>
 8010c60:	85e1883a 	add	r16,r16,r23
 8010c64:	10ffffc4 	addi	r3,r2,-1
 8010c68:	85c05e2e 	bgeu	r16,r23,8010de4 <__udivdi3+0x530>
 8010c6c:	1805883a 	mov	r2,r3
 8010c70:	300c943a 	slli	r6,r6,16
 8010c74:	a17fffcc 	andi	r5,r20,65535
 8010c78:	a028d43a 	srli	r20,r20,16
 8010c7c:	3084b03a 	or	r2,r6,r2
 8010c80:	10ffffcc 	andi	r3,r2,65535
 8010c84:	100cd43a 	srli	r6,r2,16
 8010c88:	194f383a 	mul	r7,r3,r5
 8010c8c:	1d07383a 	mul	r3,r3,r20
 8010c90:	314b383a 	mul	r5,r6,r5
 8010c94:	3810d43a 	srli	r8,r7,16
 8010c98:	8121c83a 	sub	r16,r16,r4
 8010c9c:	1947883a 	add	r3,r3,r5
 8010ca0:	40c7883a 	add	r3,r8,r3
 8010ca4:	350d383a 	mul	r6,r6,r20
 8010ca8:	1940022e 	bgeu	r3,r5,8010cb4 <__udivdi3+0x400>
 8010cac:	01000074 	movhi	r4,1
 8010cb0:	310d883a 	add	r6,r6,r4
 8010cb4:	1828d43a 	srli	r20,r3,16
 8010cb8:	a18d883a 	add	r6,r20,r6
 8010cbc:	81803e36 	bltu	r16,r6,8010db8 <__udivdi3+0x504>
 8010cc0:	81803826 	beq	r16,r6,8010da4 <__udivdi3+0x4f0>
 8010cc4:	0007883a 	mov	r3,zero
 8010cc8:	003fa206 	br	8010b54 <__alt_data_end+0xfc010b54>
 8010ccc:	88e2983a 	sll	r17,r17,r3
 8010cd0:	80a8d83a 	srl	r20,r16,r2
 8010cd4:	80e0983a 	sll	r16,r16,r3
 8010cd8:	882ad43a 	srli	r21,r17,16
 8010cdc:	9884d83a 	srl	r2,r19,r2
 8010ce0:	a009883a 	mov	r4,r20
 8010ce4:	a80b883a 	mov	r5,r21
 8010ce8:	142eb03a 	or	r23,r2,r16
 8010cec:	98e4983a 	sll	r18,r19,r3
 8010cf0:	80034f40 	call	80034f4 <__umodsi3>
 8010cf4:	a009883a 	mov	r4,r20
 8010cf8:	a80b883a 	mov	r5,r21
 8010cfc:	1021883a 	mov	r16,r2
 8010d00:	80034900 	call	8003490 <__udivsi3>
 8010d04:	1039883a 	mov	fp,r2
 8010d08:	8d3fffcc 	andi	r20,r17,65535
 8010d0c:	8020943a 	slli	r16,r16,16
 8010d10:	b804d43a 	srli	r2,r23,16
 8010d14:	a72d383a 	mul	r22,r20,fp
 8010d18:	1404b03a 	or	r2,r2,r16
 8010d1c:	1580062e 	bgeu	r2,r22,8010d38 <__udivdi3+0x484>
 8010d20:	1445883a 	add	r2,r2,r17
 8010d24:	e0ffffc4 	addi	r3,fp,-1
 8010d28:	14403836 	bltu	r2,r17,8010e0c <__udivdi3+0x558>
 8010d2c:	1580372e 	bgeu	r2,r22,8010e0c <__udivdi3+0x558>
 8010d30:	e73fff84 	addi	fp,fp,-2
 8010d34:	1445883a 	add	r2,r2,r17
 8010d38:	15adc83a 	sub	r22,r2,r22
 8010d3c:	a80b883a 	mov	r5,r21
 8010d40:	b009883a 	mov	r4,r22
 8010d44:	80034f40 	call	80034f4 <__umodsi3>
 8010d48:	1027883a 	mov	r19,r2
 8010d4c:	b009883a 	mov	r4,r22
 8010d50:	a80b883a 	mov	r5,r21
 8010d54:	80034900 	call	8003490 <__udivsi3>
 8010d58:	9826943a 	slli	r19,r19,16
 8010d5c:	a0a1383a 	mul	r16,r20,r2
 8010d60:	b93fffcc 	andi	r4,r23,65535
 8010d64:	24c8b03a 	or	r4,r4,r19
 8010d68:	2400062e 	bgeu	r4,r16,8010d84 <__udivdi3+0x4d0>
 8010d6c:	2449883a 	add	r4,r4,r17
 8010d70:	10ffffc4 	addi	r3,r2,-1
 8010d74:	24402336 	bltu	r4,r17,8010e04 <__udivdi3+0x550>
 8010d78:	2400222e 	bgeu	r4,r16,8010e04 <__udivdi3+0x550>
 8010d7c:	10bfff84 	addi	r2,r2,-2
 8010d80:	2449883a 	add	r4,r4,r17
 8010d84:	e038943a 	slli	fp,fp,16
 8010d88:	2421c83a 	sub	r16,r4,r16
 8010d8c:	e086b03a 	or	r3,fp,r2
 8010d90:	003f4306 	br	8010aa0 <__alt_data_end+0xfc010aa0>
 8010d94:	2005883a 	mov	r2,r4
 8010d98:	003f6906 	br	8010b40 <__alt_data_end+0xfc010b40>
 8010d9c:	1805883a 	mov	r2,r3
 8010da0:	003f0f06 	br	80109e0 <__alt_data_end+0xfc0109e0>
 8010da4:	1806943a 	slli	r3,r3,16
 8010da8:	9d66983a 	sll	r19,r19,r21
 8010dac:	39ffffcc 	andi	r7,r7,65535
 8010db0:	19c7883a 	add	r3,r3,r7
 8010db4:	98ffc32e 	bgeu	r19,r3,8010cc4 <__alt_data_end+0xfc010cc4>
 8010db8:	10bfffc4 	addi	r2,r2,-1
 8010dbc:	003fc106 	br	8010cc4 <__alt_data_end+0xfc010cc4>
 8010dc0:	00800604 	movi	r2,24
 8010dc4:	003f1106 	br	8010a0c <__alt_data_end+0xfc010a0c>
 8010dc8:	00800604 	movi	r2,24
 8010dcc:	003f2706 	br	8010a6c <__alt_data_end+0xfc010a6c>
 8010dd0:	00800604 	movi	r2,24
 8010dd4:	003ece06 	br	8010910 <__alt_data_end+0xfc010910>
 8010dd8:	0007883a 	mov	r3,zero
 8010ddc:	00800044 	movi	r2,1
 8010de0:	003f5c06 	br	8010b54 <__alt_data_end+0xfc010b54>
 8010de4:	813fa12e 	bgeu	r16,r4,8010c6c <__alt_data_end+0xfc010c6c>
 8010de8:	10bfff84 	addi	r2,r2,-2
 8010dec:	85e1883a 	add	r16,r16,r23
 8010df0:	003f9f06 	br	8010c70 <__alt_data_end+0xfc010c70>
 8010df4:	1c7f8a2e 	bgeu	r3,r17,8010c20 <__alt_data_end+0xfc010c20>
 8010df8:	31bfff84 	addi	r6,r6,-2
 8010dfc:	1dc7883a 	add	r3,r3,r23
 8010e00:	003f8806 	br	8010c24 <__alt_data_end+0xfc010c24>
 8010e04:	1805883a 	mov	r2,r3
 8010e08:	003fde06 	br	8010d84 <__alt_data_end+0xfc010d84>
 8010e0c:	1839883a 	mov	fp,r3
 8010e10:	003fc906 	br	8010d38 <__alt_data_end+0xfc010d38>
 8010e14:	b5bfff84 	addi	r22,r22,-2
 8010e18:	2449883a 	add	r4,r4,r17
 8010e1c:	003f3406 	br	8010af0 <__alt_data_end+0xfc010af0>
 8010e20:	b5bfff84 	addi	r22,r22,-2
 8010e24:	1445883a 	add	r2,r2,r17
 8010e28:	003edb06 	br	8010998 <__alt_data_end+0xfc010998>

08010e2c <__umoddi3>:
 8010e2c:	defff404 	addi	sp,sp,-48
 8010e30:	df000a15 	stw	fp,40(sp)
 8010e34:	dc400315 	stw	r17,12(sp)
 8010e38:	dc000215 	stw	r16,8(sp)
 8010e3c:	dfc00b15 	stw	ra,44(sp)
 8010e40:	ddc00915 	stw	r23,36(sp)
 8010e44:	dd800815 	stw	r22,32(sp)
 8010e48:	dd400715 	stw	r21,28(sp)
 8010e4c:	dd000615 	stw	r20,24(sp)
 8010e50:	dcc00515 	stw	r19,20(sp)
 8010e54:	dc800415 	stw	r18,16(sp)
 8010e58:	2021883a 	mov	r16,r4
 8010e5c:	2823883a 	mov	r17,r5
 8010e60:	2839883a 	mov	fp,r5
 8010e64:	38003c1e 	bne	r7,zero,8010f58 <__umoddi3+0x12c>
 8010e68:	3027883a 	mov	r19,r6
 8010e6c:	2029883a 	mov	r20,r4
 8010e70:	2980512e 	bgeu	r5,r6,8010fb8 <__umoddi3+0x18c>
 8010e74:	00bfffd4 	movui	r2,65535
 8010e78:	11809a36 	bltu	r2,r6,80110e4 <__umoddi3+0x2b8>
 8010e7c:	01003fc4 	movi	r4,255
 8010e80:	2189803a 	cmpltu	r4,r4,r6
 8010e84:	200890fa 	slli	r4,r4,3
 8010e88:	3104d83a 	srl	r2,r6,r4
 8010e8c:	00c20074 	movhi	r3,2049
 8010e90:	18d6e204 	addi	r3,r3,23432
 8010e94:	1885883a 	add	r2,r3,r2
 8010e98:	10c00003 	ldbu	r3,0(r2)
 8010e9c:	00800804 	movi	r2,32
 8010ea0:	1909883a 	add	r4,r3,r4
 8010ea4:	1125c83a 	sub	r18,r2,r4
 8010ea8:	90000526 	beq	r18,zero,8010ec0 <__umoddi3+0x94>
 8010eac:	8ca2983a 	sll	r17,r17,r18
 8010eb0:	8108d83a 	srl	r4,r16,r4
 8010eb4:	34a6983a 	sll	r19,r6,r18
 8010eb8:	84a8983a 	sll	r20,r16,r18
 8010ebc:	2478b03a 	or	fp,r4,r17
 8010ec0:	982ed43a 	srli	r23,r19,16
 8010ec4:	e009883a 	mov	r4,fp
 8010ec8:	9dbfffcc 	andi	r22,r19,65535
 8010ecc:	b80b883a 	mov	r5,r23
 8010ed0:	80034f40 	call	80034f4 <__umodsi3>
 8010ed4:	e009883a 	mov	r4,fp
 8010ed8:	b80b883a 	mov	r5,r23
 8010edc:	102b883a 	mov	r21,r2
 8010ee0:	80034900 	call	8003490 <__udivsi3>
 8010ee4:	a806943a 	slli	r3,r21,16
 8010ee8:	a008d43a 	srli	r4,r20,16
 8010eec:	b085383a 	mul	r2,r22,r2
 8010ef0:	20c8b03a 	or	r4,r4,r3
 8010ef4:	2080032e 	bgeu	r4,r2,8010f04 <__umoddi3+0xd8>
 8010ef8:	24c9883a 	add	r4,r4,r19
 8010efc:	24c00136 	bltu	r4,r19,8010f04 <__umoddi3+0xd8>
 8010f00:	20811036 	bltu	r4,r2,8011344 <__umoddi3+0x518>
 8010f04:	20abc83a 	sub	r21,r4,r2
 8010f08:	b80b883a 	mov	r5,r23
 8010f0c:	a809883a 	mov	r4,r21
 8010f10:	80034f40 	call	80034f4 <__umodsi3>
 8010f14:	1023883a 	mov	r17,r2
 8010f18:	b80b883a 	mov	r5,r23
 8010f1c:	a809883a 	mov	r4,r21
 8010f20:	80034900 	call	8003490 <__udivsi3>
 8010f24:	8822943a 	slli	r17,r17,16
 8010f28:	b085383a 	mul	r2,r22,r2
 8010f2c:	a0ffffcc 	andi	r3,r20,65535
 8010f30:	1c46b03a 	or	r3,r3,r17
 8010f34:	1880042e 	bgeu	r3,r2,8010f48 <__umoddi3+0x11c>
 8010f38:	1cc7883a 	add	r3,r3,r19
 8010f3c:	1cc00236 	bltu	r3,r19,8010f48 <__umoddi3+0x11c>
 8010f40:	1880012e 	bgeu	r3,r2,8010f48 <__umoddi3+0x11c>
 8010f44:	1cc7883a 	add	r3,r3,r19
 8010f48:	1885c83a 	sub	r2,r3,r2
 8010f4c:	1484d83a 	srl	r2,r2,r18
 8010f50:	0007883a 	mov	r3,zero
 8010f54:	00004f06 	br	8011094 <__umoddi3+0x268>
 8010f58:	29c04c36 	bltu	r5,r7,801108c <__umoddi3+0x260>
 8010f5c:	00bfffd4 	movui	r2,65535
 8010f60:	11c0582e 	bgeu	r2,r7,80110c4 <__umoddi3+0x298>
 8010f64:	00804034 	movhi	r2,256
 8010f68:	10bfffc4 	addi	r2,r2,-1
 8010f6c:	11c0e736 	bltu	r2,r7,801130c <__umoddi3+0x4e0>
 8010f70:	01000404 	movi	r4,16
 8010f74:	3904d83a 	srl	r2,r7,r4
 8010f78:	00c20074 	movhi	r3,2049
 8010f7c:	18d6e204 	addi	r3,r3,23432
 8010f80:	1885883a 	add	r2,r3,r2
 8010f84:	14c00003 	ldbu	r19,0(r2)
 8010f88:	00c00804 	movi	r3,32
 8010f8c:	9927883a 	add	r19,r19,r4
 8010f90:	1ce9c83a 	sub	r20,r3,r19
 8010f94:	a000581e 	bne	r20,zero,80110f8 <__umoddi3+0x2cc>
 8010f98:	3c400136 	bltu	r7,r17,8010fa0 <__umoddi3+0x174>
 8010f9c:	8180eb36 	bltu	r16,r6,801134c <__umoddi3+0x520>
 8010fa0:	8185c83a 	sub	r2,r16,r6
 8010fa4:	89e3c83a 	sub	r17,r17,r7
 8010fa8:	8089803a 	cmpltu	r4,r16,r2
 8010fac:	8939c83a 	sub	fp,r17,r4
 8010fb0:	e007883a 	mov	r3,fp
 8010fb4:	00003706 	br	8011094 <__umoddi3+0x268>
 8010fb8:	3000041e 	bne	r6,zero,8010fcc <__umoddi3+0x1a0>
 8010fbc:	000b883a 	mov	r5,zero
 8010fc0:	01000044 	movi	r4,1
 8010fc4:	80034900 	call	8003490 <__udivsi3>
 8010fc8:	1027883a 	mov	r19,r2
 8010fcc:	00bfffd4 	movui	r2,65535
 8010fd0:	14c0402e 	bgeu	r2,r19,80110d4 <__umoddi3+0x2a8>
 8010fd4:	00804034 	movhi	r2,256
 8010fd8:	10bfffc4 	addi	r2,r2,-1
 8010fdc:	14c0cd36 	bltu	r2,r19,8011314 <__umoddi3+0x4e8>
 8010fe0:	00800404 	movi	r2,16
 8010fe4:	9886d83a 	srl	r3,r19,r2
 8010fe8:	01020074 	movhi	r4,2049
 8010fec:	2116e204 	addi	r4,r4,23432
 8010ff0:	20c7883a 	add	r3,r4,r3
 8010ff4:	18c00003 	ldbu	r3,0(r3)
 8010ff8:	1887883a 	add	r3,r3,r2
 8010ffc:	00800804 	movi	r2,32
 8011000:	10e5c83a 	sub	r18,r2,r3
 8011004:	9000901e 	bne	r18,zero,8011248 <__umoddi3+0x41c>
 8011008:	982cd43a 	srli	r22,r19,16
 801100c:	8ce3c83a 	sub	r17,r17,r19
 8011010:	9d7fffcc 	andi	r21,r19,65535
 8011014:	b00b883a 	mov	r5,r22
 8011018:	8809883a 	mov	r4,r17
 801101c:	80034f40 	call	80034f4 <__umodsi3>
 8011020:	8809883a 	mov	r4,r17
 8011024:	b00b883a 	mov	r5,r22
 8011028:	1021883a 	mov	r16,r2
 801102c:	80034900 	call	8003490 <__udivsi3>
 8011030:	8006943a 	slli	r3,r16,16
 8011034:	a008d43a 	srli	r4,r20,16
 8011038:	1545383a 	mul	r2,r2,r21
 801103c:	20c8b03a 	or	r4,r4,r3
 8011040:	2080042e 	bgeu	r4,r2,8011054 <__umoddi3+0x228>
 8011044:	24c9883a 	add	r4,r4,r19
 8011048:	24c00236 	bltu	r4,r19,8011054 <__umoddi3+0x228>
 801104c:	2080012e 	bgeu	r4,r2,8011054 <__umoddi3+0x228>
 8011050:	24c9883a 	add	r4,r4,r19
 8011054:	20a1c83a 	sub	r16,r4,r2
 8011058:	b00b883a 	mov	r5,r22
 801105c:	8009883a 	mov	r4,r16
 8011060:	80034f40 	call	80034f4 <__umodsi3>
 8011064:	1023883a 	mov	r17,r2
 8011068:	b00b883a 	mov	r5,r22
 801106c:	8009883a 	mov	r4,r16
 8011070:	80034900 	call	8003490 <__udivsi3>
 8011074:	8822943a 	slli	r17,r17,16
 8011078:	1545383a 	mul	r2,r2,r21
 801107c:	a53fffcc 	andi	r20,r20,65535
 8011080:	a446b03a 	or	r3,r20,r17
 8011084:	18bfb02e 	bgeu	r3,r2,8010f48 <__alt_data_end+0xfc010f48>
 8011088:	003fab06 	br	8010f38 <__alt_data_end+0xfc010f38>
 801108c:	2005883a 	mov	r2,r4
 8011090:	2807883a 	mov	r3,r5
 8011094:	dfc00b17 	ldw	ra,44(sp)
 8011098:	df000a17 	ldw	fp,40(sp)
 801109c:	ddc00917 	ldw	r23,36(sp)
 80110a0:	dd800817 	ldw	r22,32(sp)
 80110a4:	dd400717 	ldw	r21,28(sp)
 80110a8:	dd000617 	ldw	r20,24(sp)
 80110ac:	dcc00517 	ldw	r19,20(sp)
 80110b0:	dc800417 	ldw	r18,16(sp)
 80110b4:	dc400317 	ldw	r17,12(sp)
 80110b8:	dc000217 	ldw	r16,8(sp)
 80110bc:	dec00c04 	addi	sp,sp,48
 80110c0:	f800283a 	ret
 80110c4:	04c03fc4 	movi	r19,255
 80110c8:	99c9803a 	cmpltu	r4,r19,r7
 80110cc:	200890fa 	slli	r4,r4,3
 80110d0:	003fa806 	br	8010f74 <__alt_data_end+0xfc010f74>
 80110d4:	00803fc4 	movi	r2,255
 80110d8:	14c5803a 	cmpltu	r2,r2,r19
 80110dc:	100490fa 	slli	r2,r2,3
 80110e0:	003fc006 	br	8010fe4 <__alt_data_end+0xfc010fe4>
 80110e4:	00804034 	movhi	r2,256
 80110e8:	10bfffc4 	addi	r2,r2,-1
 80110ec:	11808b36 	bltu	r2,r6,801131c <__umoddi3+0x4f0>
 80110f0:	01000404 	movi	r4,16
 80110f4:	003f6406 	br	8010e88 <__alt_data_end+0xfc010e88>
 80110f8:	34c4d83a 	srl	r2,r6,r19
 80110fc:	3d0e983a 	sll	r7,r7,r20
 8011100:	8cf8d83a 	srl	fp,r17,r19
 8011104:	8d10983a 	sll	r8,r17,r20
 8011108:	38aab03a 	or	r21,r7,r2
 801110c:	a82cd43a 	srli	r22,r21,16
 8011110:	84e2d83a 	srl	r17,r16,r19
 8011114:	e009883a 	mov	r4,fp
 8011118:	b00b883a 	mov	r5,r22
 801111c:	8a22b03a 	or	r17,r17,r8
 8011120:	3524983a 	sll	r18,r6,r20
 8011124:	80034f40 	call	80034f4 <__umodsi3>
 8011128:	e009883a 	mov	r4,fp
 801112c:	b00b883a 	mov	r5,r22
 8011130:	102f883a 	mov	r23,r2
 8011134:	80034900 	call	8003490 <__udivsi3>
 8011138:	100d883a 	mov	r6,r2
 801113c:	b808943a 	slli	r4,r23,16
 8011140:	aa3fffcc 	andi	r8,r21,65535
 8011144:	8804d43a 	srli	r2,r17,16
 8011148:	41af383a 	mul	r23,r8,r6
 801114c:	8520983a 	sll	r16,r16,r20
 8011150:	1104b03a 	or	r2,r2,r4
 8011154:	15c0042e 	bgeu	r2,r23,8011168 <__umoddi3+0x33c>
 8011158:	1545883a 	add	r2,r2,r21
 801115c:	30ffffc4 	addi	r3,r6,-1
 8011160:	1540742e 	bgeu	r2,r21,8011334 <__umoddi3+0x508>
 8011164:	180d883a 	mov	r6,r3
 8011168:	15efc83a 	sub	r23,r2,r23
 801116c:	b00b883a 	mov	r5,r22
 8011170:	b809883a 	mov	r4,r23
 8011174:	d9800115 	stw	r6,4(sp)
 8011178:	da000015 	stw	r8,0(sp)
 801117c:	80034f40 	call	80034f4 <__umodsi3>
 8011180:	b00b883a 	mov	r5,r22
 8011184:	b809883a 	mov	r4,r23
 8011188:	1039883a 	mov	fp,r2
 801118c:	80034900 	call	8003490 <__udivsi3>
 8011190:	da000017 	ldw	r8,0(sp)
 8011194:	e038943a 	slli	fp,fp,16
 8011198:	100b883a 	mov	r5,r2
 801119c:	4089383a 	mul	r4,r8,r2
 80111a0:	8a3fffcc 	andi	r8,r17,65535
 80111a4:	4710b03a 	or	r8,r8,fp
 80111a8:	d9800117 	ldw	r6,4(sp)
 80111ac:	4100042e 	bgeu	r8,r4,80111c0 <__umoddi3+0x394>
 80111b0:	4551883a 	add	r8,r8,r21
 80111b4:	10bfffc4 	addi	r2,r2,-1
 80111b8:	45405a2e 	bgeu	r8,r21,8011324 <__umoddi3+0x4f8>
 80111bc:	100b883a 	mov	r5,r2
 80111c0:	300c943a 	slli	r6,r6,16
 80111c4:	91ffffcc 	andi	r7,r18,65535
 80111c8:	9004d43a 	srli	r2,r18,16
 80111cc:	314cb03a 	or	r6,r6,r5
 80111d0:	317fffcc 	andi	r5,r6,65535
 80111d4:	300cd43a 	srli	r6,r6,16
 80111d8:	29d3383a 	mul	r9,r5,r7
 80111dc:	288b383a 	mul	r5,r5,r2
 80111e0:	31cf383a 	mul	r7,r6,r7
 80111e4:	4806d43a 	srli	r3,r9,16
 80111e8:	4111c83a 	sub	r8,r8,r4
 80111ec:	29cb883a 	add	r5,r5,r7
 80111f0:	194b883a 	add	r5,r3,r5
 80111f4:	3085383a 	mul	r2,r6,r2
 80111f8:	29c0022e 	bgeu	r5,r7,8011204 <__umoddi3+0x3d8>
 80111fc:	00c00074 	movhi	r3,1
 8011200:	10c5883a 	add	r2,r2,r3
 8011204:	2808d43a 	srli	r4,r5,16
 8011208:	280a943a 	slli	r5,r5,16
 801120c:	4a7fffcc 	andi	r9,r9,65535
 8011210:	2085883a 	add	r2,r4,r2
 8011214:	2a4b883a 	add	r5,r5,r9
 8011218:	40803636 	bltu	r8,r2,80112f4 <__umoddi3+0x4c8>
 801121c:	40804d26 	beq	r8,r2,8011354 <__umoddi3+0x528>
 8011220:	4089c83a 	sub	r4,r8,r2
 8011224:	280f883a 	mov	r7,r5
 8011228:	81cfc83a 	sub	r7,r16,r7
 801122c:	81c7803a 	cmpltu	r3,r16,r7
 8011230:	20c7c83a 	sub	r3,r4,r3
 8011234:	1cc4983a 	sll	r2,r3,r19
 8011238:	3d0ed83a 	srl	r7,r7,r20
 801123c:	1d06d83a 	srl	r3,r3,r20
 8011240:	11c4b03a 	or	r2,r2,r7
 8011244:	003f9306 	br	8011094 <__alt_data_end+0xfc011094>
 8011248:	9ca6983a 	sll	r19,r19,r18
 801124c:	88e8d83a 	srl	r20,r17,r3
 8011250:	80c4d83a 	srl	r2,r16,r3
 8011254:	982cd43a 	srli	r22,r19,16
 8011258:	8ca2983a 	sll	r17,r17,r18
 801125c:	a009883a 	mov	r4,r20
 8011260:	b00b883a 	mov	r5,r22
 8011264:	1478b03a 	or	fp,r2,r17
 8011268:	80034f40 	call	80034f4 <__umodsi3>
 801126c:	a009883a 	mov	r4,r20
 8011270:	b00b883a 	mov	r5,r22
 8011274:	1023883a 	mov	r17,r2
 8011278:	80034900 	call	8003490 <__udivsi3>
 801127c:	9d7fffcc 	andi	r21,r19,65535
 8011280:	880a943a 	slli	r5,r17,16
 8011284:	e008d43a 	srli	r4,fp,16
 8011288:	a885383a 	mul	r2,r21,r2
 801128c:	84a8983a 	sll	r20,r16,r18
 8011290:	2148b03a 	or	r4,r4,r5
 8011294:	2080042e 	bgeu	r4,r2,80112a8 <__umoddi3+0x47c>
 8011298:	24c9883a 	add	r4,r4,r19
 801129c:	24c00236 	bltu	r4,r19,80112a8 <__umoddi3+0x47c>
 80112a0:	2080012e 	bgeu	r4,r2,80112a8 <__umoddi3+0x47c>
 80112a4:	24c9883a 	add	r4,r4,r19
 80112a8:	20a3c83a 	sub	r17,r4,r2
 80112ac:	b00b883a 	mov	r5,r22
 80112b0:	8809883a 	mov	r4,r17
 80112b4:	80034f40 	call	80034f4 <__umodsi3>
 80112b8:	102f883a 	mov	r23,r2
 80112bc:	8809883a 	mov	r4,r17
 80112c0:	b00b883a 	mov	r5,r22
 80112c4:	80034900 	call	8003490 <__udivsi3>
 80112c8:	b82e943a 	slli	r23,r23,16
 80112cc:	a885383a 	mul	r2,r21,r2
 80112d0:	e13fffcc 	andi	r4,fp,65535
 80112d4:	25c8b03a 	or	r4,r4,r23
 80112d8:	2080042e 	bgeu	r4,r2,80112ec <__umoddi3+0x4c0>
 80112dc:	24c9883a 	add	r4,r4,r19
 80112e0:	24c00236 	bltu	r4,r19,80112ec <__umoddi3+0x4c0>
 80112e4:	2080012e 	bgeu	r4,r2,80112ec <__umoddi3+0x4c0>
 80112e8:	24c9883a 	add	r4,r4,r19
 80112ec:	20a3c83a 	sub	r17,r4,r2
 80112f0:	003f4806 	br	8011014 <__alt_data_end+0xfc011014>
 80112f4:	2c8fc83a 	sub	r7,r5,r18
 80112f8:	1545c83a 	sub	r2,r2,r21
 80112fc:	29cb803a 	cmpltu	r5,r5,r7
 8011300:	1145c83a 	sub	r2,r2,r5
 8011304:	4089c83a 	sub	r4,r8,r2
 8011308:	003fc706 	br	8011228 <__alt_data_end+0xfc011228>
 801130c:	01000604 	movi	r4,24
 8011310:	003f1806 	br	8010f74 <__alt_data_end+0xfc010f74>
 8011314:	00800604 	movi	r2,24
 8011318:	003f3206 	br	8010fe4 <__alt_data_end+0xfc010fe4>
 801131c:	01000604 	movi	r4,24
 8011320:	003ed906 	br	8010e88 <__alt_data_end+0xfc010e88>
 8011324:	413fa52e 	bgeu	r8,r4,80111bc <__alt_data_end+0xfc0111bc>
 8011328:	297fff84 	addi	r5,r5,-2
 801132c:	4551883a 	add	r8,r8,r21
 8011330:	003fa306 	br	80111c0 <__alt_data_end+0xfc0111c0>
 8011334:	15ff8b2e 	bgeu	r2,r23,8011164 <__alt_data_end+0xfc011164>
 8011338:	31bfff84 	addi	r6,r6,-2
 801133c:	1545883a 	add	r2,r2,r21
 8011340:	003f8906 	br	8011168 <__alt_data_end+0xfc011168>
 8011344:	24c9883a 	add	r4,r4,r19
 8011348:	003eee06 	br	8010f04 <__alt_data_end+0xfc010f04>
 801134c:	8005883a 	mov	r2,r16
 8011350:	003f1706 	br	8010fb0 <__alt_data_end+0xfc010fb0>
 8011354:	817fe736 	bltu	r16,r5,80112f4 <__alt_data_end+0xfc0112f4>
 8011358:	280f883a 	mov	r7,r5
 801135c:	0009883a 	mov	r4,zero
 8011360:	003fb106 	br	8011228 <__alt_data_end+0xfc011228>

08011364 <__floatunsidf>:
 8011364:	defffe04 	addi	sp,sp,-8
 8011368:	dc000015 	stw	r16,0(sp)
 801136c:	dfc00115 	stw	ra,4(sp)
 8011370:	2021883a 	mov	r16,r4
 8011374:	20002226 	beq	r4,zero,8011400 <__floatunsidf+0x9c>
 8011378:	80072600 	call	8007260 <__clzsi2>
 801137c:	01010784 	movi	r4,1054
 8011380:	2089c83a 	sub	r4,r4,r2
 8011384:	01810cc4 	movi	r6,1075
 8011388:	310dc83a 	sub	r6,r6,r4
 801138c:	00c007c4 	movi	r3,31
 8011390:	1980120e 	bge	r3,r6,80113dc <__floatunsidf+0x78>
 8011394:	00c104c4 	movi	r3,1043
 8011398:	1907c83a 	sub	r3,r3,r4
 801139c:	80ca983a 	sll	r5,r16,r3
 80113a0:	00800434 	movhi	r2,16
 80113a4:	10bfffc4 	addi	r2,r2,-1
 80113a8:	2101ffcc 	andi	r4,r4,2047
 80113ac:	0021883a 	mov	r16,zero
 80113b0:	288a703a 	and	r5,r5,r2
 80113b4:	2008953a 	slli	r4,r4,20
 80113b8:	00c00434 	movhi	r3,16
 80113bc:	18ffffc4 	addi	r3,r3,-1
 80113c0:	28c6703a 	and	r3,r5,r3
 80113c4:	8005883a 	mov	r2,r16
 80113c8:	1906b03a 	or	r3,r3,r4
 80113cc:	dfc00117 	ldw	ra,4(sp)
 80113d0:	dc000017 	ldw	r16,0(sp)
 80113d4:	dec00204 	addi	sp,sp,8
 80113d8:	f800283a 	ret
 80113dc:	00c002c4 	movi	r3,11
 80113e0:	188bc83a 	sub	r5,r3,r2
 80113e4:	814ad83a 	srl	r5,r16,r5
 80113e8:	00c00434 	movhi	r3,16
 80113ec:	18ffffc4 	addi	r3,r3,-1
 80113f0:	81a0983a 	sll	r16,r16,r6
 80113f4:	2101ffcc 	andi	r4,r4,2047
 80113f8:	28ca703a 	and	r5,r5,r3
 80113fc:	003fed06 	br	80113b4 <__alt_data_end+0xfc0113b4>
 8011400:	0009883a 	mov	r4,zero
 8011404:	000b883a 	mov	r5,zero
 8011408:	003fea06 	br	80113b4 <__alt_data_end+0xfc0113b4>

0801140c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801140c:	defffe04 	addi	sp,sp,-8
 8011410:	dfc00115 	stw	ra,4(sp)
 8011414:	df000015 	stw	fp,0(sp)
 8011418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801141c:	d0a00c17 	ldw	r2,-32720(gp)
 8011420:	10000326 	beq	r2,zero,8011430 <alt_get_errno+0x24>
 8011424:	d0a00c17 	ldw	r2,-32720(gp)
 8011428:	103ee83a 	callr	r2
 801142c:	00000106 	br	8011434 <alt_get_errno+0x28>
 8011430:	d0a71e04 	addi	r2,gp,-25480
}
 8011434:	e037883a 	mov	sp,fp
 8011438:	dfc00117 	ldw	ra,4(sp)
 801143c:	df000017 	ldw	fp,0(sp)
 8011440:	dec00204 	addi	sp,sp,8
 8011444:	f800283a 	ret

08011448 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8011448:	defffb04 	addi	sp,sp,-20
 801144c:	dfc00415 	stw	ra,16(sp)
 8011450:	df000315 	stw	fp,12(sp)
 8011454:	df000304 	addi	fp,sp,12
 8011458:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 801145c:	e0bfff17 	ldw	r2,-4(fp)
 8011460:	10000616 	blt	r2,zero,801147c <close+0x34>
 8011464:	e0bfff17 	ldw	r2,-4(fp)
 8011468:	10c00324 	muli	r3,r2,12
 801146c:	00820074 	movhi	r2,2049
 8011470:	1099f404 	addi	r2,r2,26576
 8011474:	1885883a 	add	r2,r3,r2
 8011478:	00000106 	br	8011480 <close+0x38>
 801147c:	0005883a 	mov	r2,zero
 8011480:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8011484:	e0bffd17 	ldw	r2,-12(fp)
 8011488:	10001926 	beq	r2,zero,80114f0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 801148c:	e0bffd17 	ldw	r2,-12(fp)
 8011490:	10800017 	ldw	r2,0(r2)
 8011494:	10800417 	ldw	r2,16(r2)
 8011498:	10000626 	beq	r2,zero,80114b4 <close+0x6c>
 801149c:	e0bffd17 	ldw	r2,-12(fp)
 80114a0:	10800017 	ldw	r2,0(r2)
 80114a4:	10800417 	ldw	r2,16(r2)
 80114a8:	e13ffd17 	ldw	r4,-12(fp)
 80114ac:	103ee83a 	callr	r2
 80114b0:	00000106 	br	80114b8 <close+0x70>
 80114b4:	0005883a 	mov	r2,zero
 80114b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80114bc:	e13fff17 	ldw	r4,-4(fp)
 80114c0:	8011b080 	call	8011b08 <alt_release_fd>
    if (rval < 0)
 80114c4:	e0bffe17 	ldw	r2,-8(fp)
 80114c8:	1000070e 	bge	r2,zero,80114e8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 80114cc:	801140c0 	call	801140c <alt_get_errno>
 80114d0:	1007883a 	mov	r3,r2
 80114d4:	e0bffe17 	ldw	r2,-8(fp)
 80114d8:	0085c83a 	sub	r2,zero,r2
 80114dc:	18800015 	stw	r2,0(r3)
      return -1;
 80114e0:	00bfffc4 	movi	r2,-1
 80114e4:	00000706 	br	8011504 <close+0xbc>
    }
    return 0;
 80114e8:	0005883a 	mov	r2,zero
 80114ec:	00000506 	br	8011504 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80114f0:	801140c0 	call	801140c <alt_get_errno>
 80114f4:	1007883a 	mov	r3,r2
 80114f8:	00801444 	movi	r2,81
 80114fc:	18800015 	stw	r2,0(r3)
    return -1;
 8011500:	00bfffc4 	movi	r2,-1
  }
}
 8011504:	e037883a 	mov	sp,fp
 8011508:	dfc00117 	ldw	ra,4(sp)
 801150c:	df000017 	ldw	fp,0(sp)
 8011510:	dec00204 	addi	sp,sp,8
 8011514:	f800283a 	ret

08011518 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8011518:	defffc04 	addi	sp,sp,-16
 801151c:	df000315 	stw	fp,12(sp)
 8011520:	df000304 	addi	fp,sp,12
 8011524:	e13ffd15 	stw	r4,-12(fp)
 8011528:	e17ffe15 	stw	r5,-8(fp)
 801152c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8011530:	e0bfff17 	ldw	r2,-4(fp)
}
 8011534:	e037883a 	mov	sp,fp
 8011538:	df000017 	ldw	fp,0(sp)
 801153c:	dec00104 	addi	sp,sp,4
 8011540:	f800283a 	ret

08011544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011544:	defffe04 	addi	sp,sp,-8
 8011548:	dfc00115 	stw	ra,4(sp)
 801154c:	df000015 	stw	fp,0(sp)
 8011550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011554:	d0a00c17 	ldw	r2,-32720(gp)
 8011558:	10000326 	beq	r2,zero,8011568 <alt_get_errno+0x24>
 801155c:	d0a00c17 	ldw	r2,-32720(gp)
 8011560:	103ee83a 	callr	r2
 8011564:	00000106 	br	801156c <alt_get_errno+0x28>
 8011568:	d0a71e04 	addi	r2,gp,-25480
}
 801156c:	e037883a 	mov	sp,fp
 8011570:	dfc00117 	ldw	ra,4(sp)
 8011574:	df000017 	ldw	fp,0(sp)
 8011578:	dec00204 	addi	sp,sp,8
 801157c:	f800283a 	ret

08011580 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8011580:	defffb04 	addi	sp,sp,-20
 8011584:	dfc00415 	stw	ra,16(sp)
 8011588:	df000315 	stw	fp,12(sp)
 801158c:	df000304 	addi	fp,sp,12
 8011590:	e13ffe15 	stw	r4,-8(fp)
 8011594:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011598:	e0bffe17 	ldw	r2,-8(fp)
 801159c:	10000616 	blt	r2,zero,80115b8 <fstat+0x38>
 80115a0:	e0bffe17 	ldw	r2,-8(fp)
 80115a4:	10c00324 	muli	r3,r2,12
 80115a8:	00820074 	movhi	r2,2049
 80115ac:	1099f404 	addi	r2,r2,26576
 80115b0:	1885883a 	add	r2,r3,r2
 80115b4:	00000106 	br	80115bc <fstat+0x3c>
 80115b8:	0005883a 	mov	r2,zero
 80115bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80115c0:	e0bffd17 	ldw	r2,-12(fp)
 80115c4:	10001026 	beq	r2,zero,8011608 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80115c8:	e0bffd17 	ldw	r2,-12(fp)
 80115cc:	10800017 	ldw	r2,0(r2)
 80115d0:	10800817 	ldw	r2,32(r2)
 80115d4:	10000726 	beq	r2,zero,80115f4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 80115d8:	e0bffd17 	ldw	r2,-12(fp)
 80115dc:	10800017 	ldw	r2,0(r2)
 80115e0:	10800817 	ldw	r2,32(r2)
 80115e4:	e17fff17 	ldw	r5,-4(fp)
 80115e8:	e13ffd17 	ldw	r4,-12(fp)
 80115ec:	103ee83a 	callr	r2
 80115f0:	00000a06 	br	801161c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80115f4:	e0bfff17 	ldw	r2,-4(fp)
 80115f8:	00c80004 	movi	r3,8192
 80115fc:	10c00115 	stw	r3,4(r2)
      return 0;
 8011600:	0005883a 	mov	r2,zero
 8011604:	00000506 	br	801161c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8011608:	80115440 	call	8011544 <alt_get_errno>
 801160c:	1007883a 	mov	r3,r2
 8011610:	00801444 	movi	r2,81
 8011614:	18800015 	stw	r2,0(r3)
    return -1;
 8011618:	00bfffc4 	movi	r2,-1
  }
}
 801161c:	e037883a 	mov	sp,fp
 8011620:	dfc00117 	ldw	ra,4(sp)
 8011624:	df000017 	ldw	fp,0(sp)
 8011628:	dec00204 	addi	sp,sp,8
 801162c:	f800283a 	ret

08011630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011630:	defffe04 	addi	sp,sp,-8
 8011634:	dfc00115 	stw	ra,4(sp)
 8011638:	df000015 	stw	fp,0(sp)
 801163c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011640:	d0a00c17 	ldw	r2,-32720(gp)
 8011644:	10000326 	beq	r2,zero,8011654 <alt_get_errno+0x24>
 8011648:	d0a00c17 	ldw	r2,-32720(gp)
 801164c:	103ee83a 	callr	r2
 8011650:	00000106 	br	8011658 <alt_get_errno+0x28>
 8011654:	d0a71e04 	addi	r2,gp,-25480
}
 8011658:	e037883a 	mov	sp,fp
 801165c:	dfc00117 	ldw	ra,4(sp)
 8011660:	df000017 	ldw	fp,0(sp)
 8011664:	dec00204 	addi	sp,sp,8
 8011668:	f800283a 	ret

0801166c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 801166c:	deffed04 	addi	sp,sp,-76
 8011670:	dfc01215 	stw	ra,72(sp)
 8011674:	df001115 	stw	fp,68(sp)
 8011678:	df001104 	addi	fp,sp,68
 801167c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011680:	e0bfff17 	ldw	r2,-4(fp)
 8011684:	10000616 	blt	r2,zero,80116a0 <isatty+0x34>
 8011688:	e0bfff17 	ldw	r2,-4(fp)
 801168c:	10c00324 	muli	r3,r2,12
 8011690:	00820074 	movhi	r2,2049
 8011694:	1099f404 	addi	r2,r2,26576
 8011698:	1885883a 	add	r2,r3,r2
 801169c:	00000106 	br	80116a4 <isatty+0x38>
 80116a0:	0005883a 	mov	r2,zero
 80116a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80116a8:	e0bfef17 	ldw	r2,-68(fp)
 80116ac:	10000e26 	beq	r2,zero,80116e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80116b0:	e0bfef17 	ldw	r2,-68(fp)
 80116b4:	10800017 	ldw	r2,0(r2)
 80116b8:	10800817 	ldw	r2,32(r2)
 80116bc:	1000021e 	bne	r2,zero,80116c8 <isatty+0x5c>
    {
      return 1;
 80116c0:	00800044 	movi	r2,1
 80116c4:	00000d06 	br	80116fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80116c8:	e0bff004 	addi	r2,fp,-64
 80116cc:	100b883a 	mov	r5,r2
 80116d0:	e13fff17 	ldw	r4,-4(fp)
 80116d4:	80115800 	call	8011580 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80116d8:	e0bff117 	ldw	r2,-60(fp)
 80116dc:	10880020 	cmpeqi	r2,r2,8192
 80116e0:	10803fcc 	andi	r2,r2,255
 80116e4:	00000506 	br	80116fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80116e8:	80116300 	call	8011630 <alt_get_errno>
 80116ec:	1007883a 	mov	r3,r2
 80116f0:	00801444 	movi	r2,81
 80116f4:	18800015 	stw	r2,0(r3)
    return 0;
 80116f8:	0005883a 	mov	r2,zero
  }
}
 80116fc:	e037883a 	mov	sp,fp
 8011700:	dfc00117 	ldw	ra,4(sp)
 8011704:	df000017 	ldw	fp,0(sp)
 8011708:	dec00204 	addi	sp,sp,8
 801170c:	f800283a 	ret

08011710 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8011710:	defffc04 	addi	sp,sp,-16
 8011714:	df000315 	stw	fp,12(sp)
 8011718:	df000304 	addi	fp,sp,12
 801171c:	e13ffd15 	stw	r4,-12(fp)
 8011720:	e17ffe15 	stw	r5,-8(fp)
 8011724:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8011728:	e0fffe17 	ldw	r3,-8(fp)
 801172c:	e0bffd17 	ldw	r2,-12(fp)
 8011730:	18800c26 	beq	r3,r2,8011764 <alt_load_section+0x54>
  {
    while( to != end )
 8011734:	00000806 	br	8011758 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8011738:	e0bffe17 	ldw	r2,-8(fp)
 801173c:	10c00104 	addi	r3,r2,4
 8011740:	e0fffe15 	stw	r3,-8(fp)
 8011744:	e0fffd17 	ldw	r3,-12(fp)
 8011748:	19000104 	addi	r4,r3,4
 801174c:	e13ffd15 	stw	r4,-12(fp)
 8011750:	18c00017 	ldw	r3,0(r3)
 8011754:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8011758:	e0fffe17 	ldw	r3,-8(fp)
 801175c:	e0bfff17 	ldw	r2,-4(fp)
 8011760:	18bff51e 	bne	r3,r2,8011738 <__alt_data_end+0xfc011738>
    {
      *to++ = *from++;
    }
  }
}
 8011764:	0001883a 	nop
 8011768:	e037883a 	mov	sp,fp
 801176c:	df000017 	ldw	fp,0(sp)
 8011770:	dec00104 	addi	sp,sp,4
 8011774:	f800283a 	ret

08011778 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8011778:	defffe04 	addi	sp,sp,-8
 801177c:	dfc00115 	stw	ra,4(sp)
 8011780:	df000015 	stw	fp,0(sp)
 8011784:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8011788:	01820074 	movhi	r6,2049
 801178c:	319ec104 	addi	r6,r6,31492
 8011790:	01420074 	movhi	r5,2049
 8011794:	2957c104 	addi	r5,r5,24324
 8011798:	01020074 	movhi	r4,2049
 801179c:	211ec104 	addi	r4,r4,31492
 80117a0:	80117100 	call	8011710 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80117a4:	018000b4 	movhi	r6,2
 80117a8:	31809204 	addi	r6,r6,584
 80117ac:	014000b4 	movhi	r5,2
 80117b0:	29400804 	addi	r5,r5,32
 80117b4:	01020034 	movhi	r4,2048
 80117b8:	21000004 	addi	r4,r4,0
 80117bc:	80117100 	call	8011710 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80117c0:	01820074 	movhi	r6,2049
 80117c4:	3197c104 	addi	r6,r6,24324
 80117c8:	01420074 	movhi	r5,2049
 80117cc:	2955aa04 	addi	r5,r5,22184
 80117d0:	01020074 	movhi	r4,2049
 80117d4:	2115aa04 	addi	r4,r4,22184
 80117d8:	80117100 	call	8011710 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80117dc:	80146b40 	call	80146b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80117e0:	801492c0 	call	801492c <alt_icache_flush_all>
}
 80117e4:	0001883a 	nop
 80117e8:	e037883a 	mov	sp,fp
 80117ec:	dfc00117 	ldw	ra,4(sp)
 80117f0:	df000017 	ldw	fp,0(sp)
 80117f4:	dec00204 	addi	sp,sp,8
 80117f8:	f800283a 	ret

080117fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80117fc:	defffe04 	addi	sp,sp,-8
 8011800:	dfc00115 	stw	ra,4(sp)
 8011804:	df000015 	stw	fp,0(sp)
 8011808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801180c:	d0a00c17 	ldw	r2,-32720(gp)
 8011810:	10000326 	beq	r2,zero,8011820 <alt_get_errno+0x24>
 8011814:	d0a00c17 	ldw	r2,-32720(gp)
 8011818:	103ee83a 	callr	r2
 801181c:	00000106 	br	8011824 <alt_get_errno+0x28>
 8011820:	d0a71e04 	addi	r2,gp,-25480
}
 8011824:	e037883a 	mov	sp,fp
 8011828:	dfc00117 	ldw	ra,4(sp)
 801182c:	df000017 	ldw	fp,0(sp)
 8011830:	dec00204 	addi	sp,sp,8
 8011834:	f800283a 	ret

08011838 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8011838:	defff904 	addi	sp,sp,-28
 801183c:	dfc00615 	stw	ra,24(sp)
 8011840:	df000515 	stw	fp,20(sp)
 8011844:	df000504 	addi	fp,sp,20
 8011848:	e13ffd15 	stw	r4,-12(fp)
 801184c:	e17ffe15 	stw	r5,-8(fp)
 8011850:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8011854:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011858:	e0bffd17 	ldw	r2,-12(fp)
 801185c:	10000616 	blt	r2,zero,8011878 <lseek+0x40>
 8011860:	e0bffd17 	ldw	r2,-12(fp)
 8011864:	10c00324 	muli	r3,r2,12
 8011868:	00820074 	movhi	r2,2049
 801186c:	1099f404 	addi	r2,r2,26576
 8011870:	1885883a 	add	r2,r3,r2
 8011874:	00000106 	br	801187c <lseek+0x44>
 8011878:	0005883a 	mov	r2,zero
 801187c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8011880:	e0bffc17 	ldw	r2,-16(fp)
 8011884:	10001026 	beq	r2,zero,80118c8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8011888:	e0bffc17 	ldw	r2,-16(fp)
 801188c:	10800017 	ldw	r2,0(r2)
 8011890:	10800717 	ldw	r2,28(r2)
 8011894:	10000926 	beq	r2,zero,80118bc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8011898:	e0bffc17 	ldw	r2,-16(fp)
 801189c:	10800017 	ldw	r2,0(r2)
 80118a0:	10800717 	ldw	r2,28(r2)
 80118a4:	e1bfff17 	ldw	r6,-4(fp)
 80118a8:	e17ffe17 	ldw	r5,-8(fp)
 80118ac:	e13ffc17 	ldw	r4,-16(fp)
 80118b0:	103ee83a 	callr	r2
 80118b4:	e0bffb15 	stw	r2,-20(fp)
 80118b8:	00000506 	br	80118d0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80118bc:	00bfde84 	movi	r2,-134
 80118c0:	e0bffb15 	stw	r2,-20(fp)
 80118c4:	00000206 	br	80118d0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 80118c8:	00bfebc4 	movi	r2,-81
 80118cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80118d0:	e0bffb17 	ldw	r2,-20(fp)
 80118d4:	1000070e 	bge	r2,zero,80118f4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 80118d8:	80117fc0 	call	80117fc <alt_get_errno>
 80118dc:	1007883a 	mov	r3,r2
 80118e0:	e0bffb17 	ldw	r2,-20(fp)
 80118e4:	0085c83a 	sub	r2,zero,r2
 80118e8:	18800015 	stw	r2,0(r3)
    rc = -1;
 80118ec:	00bfffc4 	movi	r2,-1
 80118f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80118f4:	e0bffb17 	ldw	r2,-20(fp)
}
 80118f8:	e037883a 	mov	sp,fp
 80118fc:	dfc00117 	ldw	ra,4(sp)
 8011900:	df000017 	ldw	fp,0(sp)
 8011904:	dec00204 	addi	sp,sp,8
 8011908:	f800283a 	ret

0801190c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 801190c:	defffd04 	addi	sp,sp,-12
 8011910:	dfc00215 	stw	ra,8(sp)
 8011914:	df000115 	stw	fp,4(sp)
 8011918:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 801191c:	0009883a 	mov	r4,zero
 8011920:	8011e580 	call	8011e58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8011924:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8011928:	8011e900 	call	8011e90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 801192c:	01820074 	movhi	r6,2049
 8011930:	31979804 	addi	r6,r6,24160
 8011934:	01420074 	movhi	r5,2049
 8011938:	29579804 	addi	r5,r5,24160
 801193c:	01020074 	movhi	r4,2049
 8011940:	21179804 	addi	r4,r4,24160
 8011944:	8014a240 	call	8014a24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8011948:	80147dc0 	call	80147dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 801194c:	01020074 	movhi	r4,2049
 8011950:	21120f04 	addi	r4,r4,18492
 8011954:	80153140 	call	8015314 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8011958:	d0a71f17 	ldw	r2,-25476(gp)
 801195c:	d0e72017 	ldw	r3,-25472(gp)
 8011960:	d1272117 	ldw	r4,-25468(gp)
 8011964:	200d883a 	mov	r6,r4
 8011968:	180b883a 	mov	r5,r3
 801196c:	1009883a 	mov	r4,r2
 8011970:	80002740 	call	8000274 <main>
 8011974:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8011978:	01000044 	movi	r4,1
 801197c:	80114480 	call	8011448 <close>
  exit (result);
 8011980:	e13fff17 	ldw	r4,-4(fp)
 8011984:	80153280 	call	8015328 <exit>

08011988 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8011988:	defffe04 	addi	sp,sp,-8
 801198c:	df000115 	stw	fp,4(sp)
 8011990:	df000104 	addi	fp,sp,4
 8011994:	e13fff15 	stw	r4,-4(fp)
}
 8011998:	0001883a 	nop
 801199c:	e037883a 	mov	sp,fp
 80119a0:	df000017 	ldw	fp,0(sp)
 80119a4:	dec00104 	addi	sp,sp,4
 80119a8:	f800283a 	ret

080119ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80119ac:	defffe04 	addi	sp,sp,-8
 80119b0:	df000115 	stw	fp,4(sp)
 80119b4:	df000104 	addi	fp,sp,4
 80119b8:	e13fff15 	stw	r4,-4(fp)
}
 80119bc:	0001883a 	nop
 80119c0:	e037883a 	mov	sp,fp
 80119c4:	df000017 	ldw	fp,0(sp)
 80119c8:	dec00104 	addi	sp,sp,4
 80119cc:	f800283a 	ret

080119d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80119d0:	defffe04 	addi	sp,sp,-8
 80119d4:	dfc00115 	stw	ra,4(sp)
 80119d8:	df000015 	stw	fp,0(sp)
 80119dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80119e0:	d0a00c17 	ldw	r2,-32720(gp)
 80119e4:	10000326 	beq	r2,zero,80119f4 <alt_get_errno+0x24>
 80119e8:	d0a00c17 	ldw	r2,-32720(gp)
 80119ec:	103ee83a 	callr	r2
 80119f0:	00000106 	br	80119f8 <alt_get_errno+0x28>
 80119f4:	d0a71e04 	addi	r2,gp,-25480
}
 80119f8:	e037883a 	mov	sp,fp
 80119fc:	dfc00117 	ldw	ra,4(sp)
 8011a00:	df000017 	ldw	fp,0(sp)
 8011a04:	dec00204 	addi	sp,sp,8
 8011a08:	f800283a 	ret

08011a0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8011a0c:	defff904 	addi	sp,sp,-28
 8011a10:	dfc00615 	stw	ra,24(sp)
 8011a14:	df000515 	stw	fp,20(sp)
 8011a18:	df000504 	addi	fp,sp,20
 8011a1c:	e13ffd15 	stw	r4,-12(fp)
 8011a20:	e17ffe15 	stw	r5,-8(fp)
 8011a24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011a28:	e0bffd17 	ldw	r2,-12(fp)
 8011a2c:	10000616 	blt	r2,zero,8011a48 <read+0x3c>
 8011a30:	e0bffd17 	ldw	r2,-12(fp)
 8011a34:	10c00324 	muli	r3,r2,12
 8011a38:	00820074 	movhi	r2,2049
 8011a3c:	1099f404 	addi	r2,r2,26576
 8011a40:	1885883a 	add	r2,r3,r2
 8011a44:	00000106 	br	8011a4c <read+0x40>
 8011a48:	0005883a 	mov	r2,zero
 8011a4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8011a50:	e0bffb17 	ldw	r2,-20(fp)
 8011a54:	10002226 	beq	r2,zero,8011ae0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8011a58:	e0bffb17 	ldw	r2,-20(fp)
 8011a5c:	10800217 	ldw	r2,8(r2)
 8011a60:	108000cc 	andi	r2,r2,3
 8011a64:	10800060 	cmpeqi	r2,r2,1
 8011a68:	1000181e 	bne	r2,zero,8011acc <read+0xc0>
        (fd->dev->read))
 8011a6c:	e0bffb17 	ldw	r2,-20(fp)
 8011a70:	10800017 	ldw	r2,0(r2)
 8011a74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8011a78:	10001426 	beq	r2,zero,8011acc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8011a7c:	e0bffb17 	ldw	r2,-20(fp)
 8011a80:	10800017 	ldw	r2,0(r2)
 8011a84:	10800517 	ldw	r2,20(r2)
 8011a88:	e0ffff17 	ldw	r3,-4(fp)
 8011a8c:	180d883a 	mov	r6,r3
 8011a90:	e17ffe17 	ldw	r5,-8(fp)
 8011a94:	e13ffb17 	ldw	r4,-20(fp)
 8011a98:	103ee83a 	callr	r2
 8011a9c:	e0bffc15 	stw	r2,-16(fp)
 8011aa0:	e0bffc17 	ldw	r2,-16(fp)
 8011aa4:	1000070e 	bge	r2,zero,8011ac4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8011aa8:	80119d00 	call	80119d0 <alt_get_errno>
 8011aac:	1007883a 	mov	r3,r2
 8011ab0:	e0bffc17 	ldw	r2,-16(fp)
 8011ab4:	0085c83a 	sub	r2,zero,r2
 8011ab8:	18800015 	stw	r2,0(r3)
          return -1;
 8011abc:	00bfffc4 	movi	r2,-1
 8011ac0:	00000c06 	br	8011af4 <read+0xe8>
        }
        return rval;
 8011ac4:	e0bffc17 	ldw	r2,-16(fp)
 8011ac8:	00000a06 	br	8011af4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8011acc:	80119d00 	call	80119d0 <alt_get_errno>
 8011ad0:	1007883a 	mov	r3,r2
 8011ad4:	00800344 	movi	r2,13
 8011ad8:	18800015 	stw	r2,0(r3)
 8011adc:	00000406 	br	8011af0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8011ae0:	80119d00 	call	80119d0 <alt_get_errno>
 8011ae4:	1007883a 	mov	r3,r2
 8011ae8:	00801444 	movi	r2,81
 8011aec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8011af0:	00bfffc4 	movi	r2,-1
}
 8011af4:	e037883a 	mov	sp,fp
 8011af8:	dfc00117 	ldw	ra,4(sp)
 8011afc:	df000017 	ldw	fp,0(sp)
 8011b00:	dec00204 	addi	sp,sp,8
 8011b04:	f800283a 	ret

08011b08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8011b08:	defffe04 	addi	sp,sp,-8
 8011b0c:	df000115 	stw	fp,4(sp)
 8011b10:	df000104 	addi	fp,sp,4
 8011b14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8011b18:	e0bfff17 	ldw	r2,-4(fp)
 8011b1c:	108000d0 	cmplti	r2,r2,3
 8011b20:	10000d1e 	bne	r2,zero,8011b58 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8011b24:	00820074 	movhi	r2,2049
 8011b28:	1099f404 	addi	r2,r2,26576
 8011b2c:	e0ffff17 	ldw	r3,-4(fp)
 8011b30:	18c00324 	muli	r3,r3,12
 8011b34:	10c5883a 	add	r2,r2,r3
 8011b38:	10800204 	addi	r2,r2,8
 8011b3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8011b40:	00820074 	movhi	r2,2049
 8011b44:	1099f404 	addi	r2,r2,26576
 8011b48:	e0ffff17 	ldw	r3,-4(fp)
 8011b4c:	18c00324 	muli	r3,r3,12
 8011b50:	10c5883a 	add	r2,r2,r3
 8011b54:	10000015 	stw	zero,0(r2)
  }
}
 8011b58:	0001883a 	nop
 8011b5c:	e037883a 	mov	sp,fp
 8011b60:	df000017 	ldw	fp,0(sp)
 8011b64:	dec00104 	addi	sp,sp,4
 8011b68:	f800283a 	ret

08011b6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8011b6c:	defff904 	addi	sp,sp,-28
 8011b70:	df000615 	stw	fp,24(sp)
 8011b74:	df000604 	addi	fp,sp,24
 8011b78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011b7c:	0005303a 	rdctl	r2,status
 8011b80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011b84:	e0fffe17 	ldw	r3,-8(fp)
 8011b88:	00bfff84 	movi	r2,-2
 8011b8c:	1884703a 	and	r2,r3,r2
 8011b90:	1001703a 	wrctl	status,r2
  
  return context;
 8011b94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8011b98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8011b9c:	d0a00d17 	ldw	r2,-32716(gp)
 8011ba0:	10c000c4 	addi	r3,r2,3
 8011ba4:	00bfff04 	movi	r2,-4
 8011ba8:	1884703a 	and	r2,r3,r2
 8011bac:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8011bb0:	d0e00d17 	ldw	r3,-32716(gp)
 8011bb4:	e0bfff17 	ldw	r2,-4(fp)
 8011bb8:	1887883a 	add	r3,r3,r2
 8011bbc:	00830034 	movhi	r2,3072
 8011bc0:	10800004 	addi	r2,r2,0
 8011bc4:	10c0062e 	bgeu	r2,r3,8011be0 <sbrk+0x74>
 8011bc8:	e0bffb17 	ldw	r2,-20(fp)
 8011bcc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011bd0:	e0bffa17 	ldw	r2,-24(fp)
 8011bd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8011bd8:	00bfffc4 	movi	r2,-1
 8011bdc:	00000b06 	br	8011c0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8011be0:	d0a00d17 	ldw	r2,-32716(gp)
 8011be4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8011be8:	d0e00d17 	ldw	r3,-32716(gp)
 8011bec:	e0bfff17 	ldw	r2,-4(fp)
 8011bf0:	1885883a 	add	r2,r3,r2
 8011bf4:	d0a00d15 	stw	r2,-32716(gp)
 8011bf8:	e0bffb17 	ldw	r2,-20(fp)
 8011bfc:	e0bffc15 	stw	r2,-16(fp)
 8011c00:	e0bffc17 	ldw	r2,-16(fp)
 8011c04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8011c08:	e0bffd17 	ldw	r2,-12(fp)
} 
 8011c0c:	e037883a 	mov	sp,fp
 8011c10:	df000017 	ldw	fp,0(sp)
 8011c14:	dec00104 	addi	sp,sp,4
 8011c18:	f800283a 	ret

08011c1c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8011c1c:	defffd04 	addi	sp,sp,-12
 8011c20:	dfc00215 	stw	ra,8(sp)
 8011c24:	df000115 	stw	fp,4(sp)
 8011c28:	df000104 	addi	fp,sp,4
 8011c2c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8011c30:	e13fff17 	ldw	r4,-4(fp)
 8011c34:	801455c0 	call	801455c <alt_busy_sleep>
}
 8011c38:	e037883a 	mov	sp,fp
 8011c3c:	dfc00117 	ldw	ra,4(sp)
 8011c40:	df000017 	ldw	fp,0(sp)
 8011c44:	dec00204 	addi	sp,sp,8
 8011c48:	f800283a 	ret

08011c4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011c4c:	defffe04 	addi	sp,sp,-8
 8011c50:	dfc00115 	stw	ra,4(sp)
 8011c54:	df000015 	stw	fp,0(sp)
 8011c58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011c5c:	d0a00c17 	ldw	r2,-32720(gp)
 8011c60:	10000326 	beq	r2,zero,8011c70 <alt_get_errno+0x24>
 8011c64:	d0a00c17 	ldw	r2,-32720(gp)
 8011c68:	103ee83a 	callr	r2
 8011c6c:	00000106 	br	8011c74 <alt_get_errno+0x28>
 8011c70:	d0a71e04 	addi	r2,gp,-25480
}
 8011c74:	e037883a 	mov	sp,fp
 8011c78:	dfc00117 	ldw	ra,4(sp)
 8011c7c:	df000017 	ldw	fp,0(sp)
 8011c80:	dec00204 	addi	sp,sp,8
 8011c84:	f800283a 	ret

08011c88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8011c88:	defff904 	addi	sp,sp,-28
 8011c8c:	dfc00615 	stw	ra,24(sp)
 8011c90:	df000515 	stw	fp,20(sp)
 8011c94:	df000504 	addi	fp,sp,20
 8011c98:	e13ffd15 	stw	r4,-12(fp)
 8011c9c:	e17ffe15 	stw	r5,-8(fp)
 8011ca0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8011ca4:	e0bffd17 	ldw	r2,-12(fp)
 8011ca8:	10000616 	blt	r2,zero,8011cc4 <write+0x3c>
 8011cac:	e0bffd17 	ldw	r2,-12(fp)
 8011cb0:	10c00324 	muli	r3,r2,12
 8011cb4:	00820074 	movhi	r2,2049
 8011cb8:	1099f404 	addi	r2,r2,26576
 8011cbc:	1885883a 	add	r2,r3,r2
 8011cc0:	00000106 	br	8011cc8 <write+0x40>
 8011cc4:	0005883a 	mov	r2,zero
 8011cc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8011ccc:	e0bffb17 	ldw	r2,-20(fp)
 8011cd0:	10002126 	beq	r2,zero,8011d58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8011cd4:	e0bffb17 	ldw	r2,-20(fp)
 8011cd8:	10800217 	ldw	r2,8(r2)
 8011cdc:	108000cc 	andi	r2,r2,3
 8011ce0:	10001826 	beq	r2,zero,8011d44 <write+0xbc>
 8011ce4:	e0bffb17 	ldw	r2,-20(fp)
 8011ce8:	10800017 	ldw	r2,0(r2)
 8011cec:	10800617 	ldw	r2,24(r2)
 8011cf0:	10001426 	beq	r2,zero,8011d44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8011cf4:	e0bffb17 	ldw	r2,-20(fp)
 8011cf8:	10800017 	ldw	r2,0(r2)
 8011cfc:	10800617 	ldw	r2,24(r2)
 8011d00:	e0ffff17 	ldw	r3,-4(fp)
 8011d04:	180d883a 	mov	r6,r3
 8011d08:	e17ffe17 	ldw	r5,-8(fp)
 8011d0c:	e13ffb17 	ldw	r4,-20(fp)
 8011d10:	103ee83a 	callr	r2
 8011d14:	e0bffc15 	stw	r2,-16(fp)
 8011d18:	e0bffc17 	ldw	r2,-16(fp)
 8011d1c:	1000070e 	bge	r2,zero,8011d3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8011d20:	8011c4c0 	call	8011c4c <alt_get_errno>
 8011d24:	1007883a 	mov	r3,r2
 8011d28:	e0bffc17 	ldw	r2,-16(fp)
 8011d2c:	0085c83a 	sub	r2,zero,r2
 8011d30:	18800015 	stw	r2,0(r3)
        return -1;
 8011d34:	00bfffc4 	movi	r2,-1
 8011d38:	00000c06 	br	8011d6c <write+0xe4>
      }
      return rval;
 8011d3c:	e0bffc17 	ldw	r2,-16(fp)
 8011d40:	00000a06 	br	8011d6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8011d44:	8011c4c0 	call	8011c4c <alt_get_errno>
 8011d48:	1007883a 	mov	r3,r2
 8011d4c:	00800344 	movi	r2,13
 8011d50:	18800015 	stw	r2,0(r3)
 8011d54:	00000406 	br	8011d68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8011d58:	8011c4c0 	call	8011c4c <alt_get_errno>
 8011d5c:	1007883a 	mov	r3,r2
 8011d60:	00801444 	movi	r2,81
 8011d64:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8011d68:	00bfffc4 	movi	r2,-1
}
 8011d6c:	e037883a 	mov	sp,fp
 8011d70:	dfc00117 	ldw	ra,4(sp)
 8011d74:	df000017 	ldw	fp,0(sp)
 8011d78:	dec00204 	addi	sp,sp,8
 8011d7c:	f800283a 	ret

08011d80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8011d80:	defffd04 	addi	sp,sp,-12
 8011d84:	dfc00215 	stw	ra,8(sp)
 8011d88:	df000115 	stw	fp,4(sp)
 8011d8c:	df000104 	addi	fp,sp,4
 8011d90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8011d94:	d1600904 	addi	r5,gp,-32732
 8011d98:	e13fff17 	ldw	r4,-4(fp)
 8011d9c:	80147380 	call	8014738 <alt_dev_llist_insert>
}
 8011da0:	e037883a 	mov	sp,fp
 8011da4:	dfc00117 	ldw	ra,4(sp)
 8011da8:	df000017 	ldw	fp,0(sp)
 8011dac:	dec00204 	addi	sp,sp,8
 8011db0:	f800283a 	ret

08011db4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011db4:	defffe04 	addi	sp,sp,-8
 8011db8:	dfc00115 	stw	ra,4(sp)
 8011dbc:	df000015 	stw	fp,0(sp)
 8011dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011dc4:	d0a00c17 	ldw	r2,-32720(gp)
 8011dc8:	10000326 	beq	r2,zero,8011dd8 <alt_get_errno+0x24>
 8011dcc:	d0a00c17 	ldw	r2,-32720(gp)
 8011dd0:	103ee83a 	callr	r2
 8011dd4:	00000106 	br	8011ddc <alt_get_errno+0x28>
 8011dd8:	d0a71e04 	addi	r2,gp,-25480
}
 8011ddc:	e037883a 	mov	sp,fp
 8011de0:	dfc00117 	ldw	ra,4(sp)
 8011de4:	df000017 	ldw	fp,0(sp)
 8011de8:	dec00204 	addi	sp,sp,8
 8011dec:	f800283a 	ret

08011df0 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 8011df0:	defffc04 	addi	sp,sp,-16
 8011df4:	dfc00315 	stw	ra,12(sp)
 8011df8:	df000215 	stw	fp,8(sp)
 8011dfc:	df000204 	addi	fp,sp,8
 8011e00:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8011e04:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 8011e08:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 8011e0c:	e0bffe17 	ldw	r2,-8(fp)
 8011e10:	1000051e 	bne	r2,zero,8011e28 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 8011e14:	d1601004 	addi	r5,gp,-32704
 8011e18:	e13fff17 	ldw	r4,-4(fp)
 8011e1c:	80147380 	call	8014738 <alt_dev_llist_insert>
 8011e20:	e0bffe15 	stw	r2,-8(fp)
 8011e24:	00000606 	br	8011e40 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 8011e28:	8011db40 	call	8011db4 <alt_get_errno>
 8011e2c:	1007883a 	mov	r3,r2
 8011e30:	00800304 	movi	r2,12
 8011e34:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 8011e38:	00bffd04 	movi	r2,-12
 8011e3c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 8011e40:	e0bffe17 	ldw	r2,-8(fp)
}
 8011e44:	e037883a 	mov	sp,fp
 8011e48:	dfc00117 	ldw	ra,4(sp)
 8011e4c:	df000017 	ldw	fp,0(sp)
 8011e50:	dec00204 	addi	sp,sp,8
 8011e54:	f800283a 	ret

08011e58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8011e58:	defffd04 	addi	sp,sp,-12
 8011e5c:	dfc00215 	stw	ra,8(sp)
 8011e60:	df000115 	stw	fp,4(sp)
 8011e64:	df000104 	addi	fp,sp,4
 8011e68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_SOUND_ACQUISITION, nios2_sound_acquisition);
 8011e6c:	80150180 	call	8015018 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8011e70:	00800044 	movi	r2,1
 8011e74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8011e78:	0001883a 	nop
 8011e7c:	e037883a 	mov	sp,fp
 8011e80:	dfc00117 	ldw	ra,4(sp)
 8011e84:	df000017 	ldw	fp,0(sp)
 8011e88:	dec00204 	addi	sp,sp,8
 8011e8c:	f800283a 	ret

08011e90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8011e90:	defffe04 	addi	sp,sp,-8
 8011e94:	dfc00115 	stw	ra,4(sp)
 8011e98:	df000015 	stw	fp,0(sp)
 8011e9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8011ea0:	01800044 	movi	r6,1
 8011ea4:	000b883a 	mov	r5,zero
 8011ea8:	01020074 	movhi	r4,2049
 8011eac:	211a5e04 	addi	r4,r4,27000
 8011eb0:	801208c0 	call	801208c <altera_avalon_jtag_uart_init>
 8011eb4:	01020074 	movhi	r4,2049
 8011eb8:	211a5404 	addi	r4,r4,26960
 8011ebc:	8011d800 	call	8011d80 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_FFT, mailbox_to_FFT);
 8011ec0:	018000c4 	movi	r6,3
 8011ec4:	000b883a 	mov	r5,zero
 8011ec8:	01020074 	movhi	r4,2049
 8011ecc:	211e6c04 	addi	r4,r4,31152
 8011ed0:	8012c780 	call	8012c78 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_SOUND_ACQUISITION, mailbox_to_Sound_Acquisition);
 8011ed4:	01800104 	movi	r6,4
 8011ed8:	000b883a 	mov	r5,zero
 8011edc:	01020074 	movhi	r4,2049
 8011ee0:	211e7e04 	addi	r4,r4,31224
 8011ee4:	8012c780 	call	8012c78 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
 8011ee8:	01020074 	movhi	r4,2049
 8011eec:	211e9004 	addi	r4,r4,31296
 8011ef0:	8011df00 	call	8011df0 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8011ef4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 8011ef8:	01020074 	movhi	r4,2049
 8011efc:	211e9404 	addi	r4,r4,31312
 8011f00:	8011d800 	call	8011d80 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 8011f04:	01020074 	movhi	r4,2049
 8011f08:	211ea004 	addi	r4,r4,31360
 8011f0c:	8011d800 	call	8011d80 <alt_dev_reg>
}
 8011f10:	0001883a 	nop
 8011f14:	e037883a 	mov	sp,fp
 8011f18:	dfc00117 	ldw	ra,4(sp)
 8011f1c:	df000017 	ldw	fp,0(sp)
 8011f20:	dec00204 	addi	sp,sp,8
 8011f24:	f800283a 	ret

08011f28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8011f28:	defffa04 	addi	sp,sp,-24
 8011f2c:	dfc00515 	stw	ra,20(sp)
 8011f30:	df000415 	stw	fp,16(sp)
 8011f34:	df000404 	addi	fp,sp,16
 8011f38:	e13ffd15 	stw	r4,-12(fp)
 8011f3c:	e17ffe15 	stw	r5,-8(fp)
 8011f40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011f44:	e0bffd17 	ldw	r2,-12(fp)
 8011f48:	10800017 	ldw	r2,0(r2)
 8011f4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8011f50:	e0bffc17 	ldw	r2,-16(fp)
 8011f54:	10c00a04 	addi	r3,r2,40
 8011f58:	e0bffd17 	ldw	r2,-12(fp)
 8011f5c:	10800217 	ldw	r2,8(r2)
 8011f60:	100f883a 	mov	r7,r2
 8011f64:	e1bfff17 	ldw	r6,-4(fp)
 8011f68:	e17ffe17 	ldw	r5,-8(fp)
 8011f6c:	1809883a 	mov	r4,r3
 8011f70:	80125480 	call	8012548 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8011f74:	e037883a 	mov	sp,fp
 8011f78:	dfc00117 	ldw	ra,4(sp)
 8011f7c:	df000017 	ldw	fp,0(sp)
 8011f80:	dec00204 	addi	sp,sp,8
 8011f84:	f800283a 	ret

08011f88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8011f88:	defffa04 	addi	sp,sp,-24
 8011f8c:	dfc00515 	stw	ra,20(sp)
 8011f90:	df000415 	stw	fp,16(sp)
 8011f94:	df000404 	addi	fp,sp,16
 8011f98:	e13ffd15 	stw	r4,-12(fp)
 8011f9c:	e17ffe15 	stw	r5,-8(fp)
 8011fa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011fa4:	e0bffd17 	ldw	r2,-12(fp)
 8011fa8:	10800017 	ldw	r2,0(r2)
 8011fac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8011fb0:	e0bffc17 	ldw	r2,-16(fp)
 8011fb4:	10c00a04 	addi	r3,r2,40
 8011fb8:	e0bffd17 	ldw	r2,-12(fp)
 8011fbc:	10800217 	ldw	r2,8(r2)
 8011fc0:	100f883a 	mov	r7,r2
 8011fc4:	e1bfff17 	ldw	r6,-4(fp)
 8011fc8:	e17ffe17 	ldw	r5,-8(fp)
 8011fcc:	1809883a 	mov	r4,r3
 8011fd0:	80127640 	call	8012764 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8011fd4:	e037883a 	mov	sp,fp
 8011fd8:	dfc00117 	ldw	ra,4(sp)
 8011fdc:	df000017 	ldw	fp,0(sp)
 8011fe0:	dec00204 	addi	sp,sp,8
 8011fe4:	f800283a 	ret

08011fe8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8011fe8:	defffc04 	addi	sp,sp,-16
 8011fec:	dfc00315 	stw	ra,12(sp)
 8011ff0:	df000215 	stw	fp,8(sp)
 8011ff4:	df000204 	addi	fp,sp,8
 8011ff8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8011ffc:	e0bfff17 	ldw	r2,-4(fp)
 8012000:	10800017 	ldw	r2,0(r2)
 8012004:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8012008:	e0bffe17 	ldw	r2,-8(fp)
 801200c:	10c00a04 	addi	r3,r2,40
 8012010:	e0bfff17 	ldw	r2,-4(fp)
 8012014:	10800217 	ldw	r2,8(r2)
 8012018:	100b883a 	mov	r5,r2
 801201c:	1809883a 	mov	r4,r3
 8012020:	80123f00 	call	80123f0 <altera_avalon_jtag_uart_close>
}
 8012024:	e037883a 	mov	sp,fp
 8012028:	dfc00117 	ldw	ra,4(sp)
 801202c:	df000017 	ldw	fp,0(sp)
 8012030:	dec00204 	addi	sp,sp,8
 8012034:	f800283a 	ret

08012038 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8012038:	defffa04 	addi	sp,sp,-24
 801203c:	dfc00515 	stw	ra,20(sp)
 8012040:	df000415 	stw	fp,16(sp)
 8012044:	df000404 	addi	fp,sp,16
 8012048:	e13ffd15 	stw	r4,-12(fp)
 801204c:	e17ffe15 	stw	r5,-8(fp)
 8012050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8012054:	e0bffd17 	ldw	r2,-12(fp)
 8012058:	10800017 	ldw	r2,0(r2)
 801205c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8012060:	e0bffc17 	ldw	r2,-16(fp)
 8012064:	10800a04 	addi	r2,r2,40
 8012068:	e1bfff17 	ldw	r6,-4(fp)
 801206c:	e17ffe17 	ldw	r5,-8(fp)
 8012070:	1009883a 	mov	r4,r2
 8012074:	80124580 	call	8012458 <altera_avalon_jtag_uart_ioctl>
}
 8012078:	e037883a 	mov	sp,fp
 801207c:	dfc00117 	ldw	ra,4(sp)
 8012080:	df000017 	ldw	fp,0(sp)
 8012084:	dec00204 	addi	sp,sp,8
 8012088:	f800283a 	ret

0801208c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801208c:	defffb04 	addi	sp,sp,-20
 8012090:	dfc00415 	stw	ra,16(sp)
 8012094:	df000315 	stw	fp,12(sp)
 8012098:	df000304 	addi	fp,sp,12
 801209c:	e13ffd15 	stw	r4,-12(fp)
 80120a0:	e17ffe15 	stw	r5,-8(fp)
 80120a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80120a8:	e0bffd17 	ldw	r2,-12(fp)
 80120ac:	00c00044 	movi	r3,1
 80120b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80120b4:	e0bffd17 	ldw	r2,-12(fp)
 80120b8:	10800017 	ldw	r2,0(r2)
 80120bc:	10800104 	addi	r2,r2,4
 80120c0:	1007883a 	mov	r3,r2
 80120c4:	e0bffd17 	ldw	r2,-12(fp)
 80120c8:	10800817 	ldw	r2,32(r2)
 80120cc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 80120d0:	e0bfff17 	ldw	r2,-4(fp)
 80120d4:	01820074 	movhi	r6,2049
 80120d8:	31885004 	addi	r6,r6,8512
 80120dc:	e17ffd17 	ldw	r5,-12(fp)
 80120e0:	1009883a 	mov	r4,r2
 80120e4:	8014aa00 	call	8014aa0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80120e8:	e0bffd17 	ldw	r2,-12(fp)
 80120ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80120f0:	e0bffd17 	ldw	r2,-12(fp)
 80120f4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80120f8:	d0e72317 	ldw	r3,-25460(gp)
 80120fc:	e1fffd17 	ldw	r7,-12(fp)
 8012100:	01820074 	movhi	r6,2049
 8012104:	3188d404 	addi	r6,r6,9040
 8012108:	180b883a 	mov	r5,r3
 801210c:	1009883a 	mov	r4,r2
 8012110:	80144300 	call	8014430 <alt_alarm_start>
 8012114:	1000040e 	bge	r2,zero,8012128 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8012118:	e0fffd17 	ldw	r3,-12(fp)
 801211c:	00a00034 	movhi	r2,32768
 8012120:	10bfffc4 	addi	r2,r2,-1
 8012124:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8012128:	0001883a 	nop
 801212c:	e037883a 	mov	sp,fp
 8012130:	dfc00117 	ldw	ra,4(sp)
 8012134:	df000017 	ldw	fp,0(sp)
 8012138:	dec00204 	addi	sp,sp,8
 801213c:	f800283a 	ret

08012140 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8012140:	defff704 	addi	sp,sp,-36
 8012144:	df000815 	stw	fp,32(sp)
 8012148:	df000804 	addi	fp,sp,32
 801214c:	e13ffe15 	stw	r4,-8(fp)
 8012150:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8012154:	e0bffe17 	ldw	r2,-8(fp)
 8012158:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 801215c:	e0bffa17 	ldw	r2,-24(fp)
 8012160:	10800017 	ldw	r2,0(r2)
 8012164:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012168:	e0bffb17 	ldw	r2,-20(fp)
 801216c:	10800104 	addi	r2,r2,4
 8012170:	10800037 	ldwio	r2,0(r2)
 8012174:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8012178:	e0bffc17 	ldw	r2,-16(fp)
 801217c:	1080c00c 	andi	r2,r2,768
 8012180:	10006d26 	beq	r2,zero,8012338 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8012184:	e0bffc17 	ldw	r2,-16(fp)
 8012188:	1080400c 	andi	r2,r2,256
 801218c:	10003526 	beq	r2,zero,8012264 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8012190:	00800074 	movhi	r2,1
 8012194:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012198:	e0bffa17 	ldw	r2,-24(fp)
 801219c:	10800a17 	ldw	r2,40(r2)
 80121a0:	10800044 	addi	r2,r2,1
 80121a4:	1081ffcc 	andi	r2,r2,2047
 80121a8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 80121ac:	e0bffa17 	ldw	r2,-24(fp)
 80121b0:	10c00b17 	ldw	r3,44(r2)
 80121b4:	e0bffd17 	ldw	r2,-12(fp)
 80121b8:	18801526 	beq	r3,r2,8012210 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80121bc:	e0bffb17 	ldw	r2,-20(fp)
 80121c0:	10800037 	ldwio	r2,0(r2)
 80121c4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80121c8:	e0bff817 	ldw	r2,-32(fp)
 80121cc:	10a0000c 	andi	r2,r2,32768
 80121d0:	10001126 	beq	r2,zero,8012218 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80121d4:	e0bffa17 	ldw	r2,-24(fp)
 80121d8:	10800a17 	ldw	r2,40(r2)
 80121dc:	e0fff817 	ldw	r3,-32(fp)
 80121e0:	1809883a 	mov	r4,r3
 80121e4:	e0fffa17 	ldw	r3,-24(fp)
 80121e8:	1885883a 	add	r2,r3,r2
 80121ec:	10800e04 	addi	r2,r2,56
 80121f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80121f4:	e0bffa17 	ldw	r2,-24(fp)
 80121f8:	10800a17 	ldw	r2,40(r2)
 80121fc:	10800044 	addi	r2,r2,1
 8012200:	10c1ffcc 	andi	r3,r2,2047
 8012204:	e0bffa17 	ldw	r2,-24(fp)
 8012208:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 801220c:	003fe206 	br	8012198 <__alt_data_end+0xfc012198>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8012210:	0001883a 	nop
 8012214:	00000106 	br	801221c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8012218:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801221c:	e0bff817 	ldw	r2,-32(fp)
 8012220:	10bfffec 	andhi	r2,r2,65535
 8012224:	10000f26 	beq	r2,zero,8012264 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8012228:	e0bffa17 	ldw	r2,-24(fp)
 801222c:	10c00817 	ldw	r3,32(r2)
 8012230:	00bfff84 	movi	r2,-2
 8012234:	1886703a 	and	r3,r3,r2
 8012238:	e0bffa17 	ldw	r2,-24(fp)
 801223c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8012240:	e0bffb17 	ldw	r2,-20(fp)
 8012244:	10800104 	addi	r2,r2,4
 8012248:	1007883a 	mov	r3,r2
 801224c:	e0bffa17 	ldw	r2,-24(fp)
 8012250:	10800817 	ldw	r2,32(r2)
 8012254:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012258:	e0bffb17 	ldw	r2,-20(fp)
 801225c:	10800104 	addi	r2,r2,4
 8012260:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8012264:	e0bffc17 	ldw	r2,-16(fp)
 8012268:	1080800c 	andi	r2,r2,512
 801226c:	103fbe26 	beq	r2,zero,8012168 <__alt_data_end+0xfc012168>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8012270:	e0bffc17 	ldw	r2,-16(fp)
 8012274:	1004d43a 	srli	r2,r2,16
 8012278:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801227c:	00001406 	br	80122d0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8012280:	e0bffb17 	ldw	r2,-20(fp)
 8012284:	e0fffa17 	ldw	r3,-24(fp)
 8012288:	18c00d17 	ldw	r3,52(r3)
 801228c:	e13ffa17 	ldw	r4,-24(fp)
 8012290:	20c7883a 	add	r3,r4,r3
 8012294:	18c20e04 	addi	r3,r3,2104
 8012298:	18c00003 	ldbu	r3,0(r3)
 801229c:	18c03fcc 	andi	r3,r3,255
 80122a0:	18c0201c 	xori	r3,r3,128
 80122a4:	18ffe004 	addi	r3,r3,-128
 80122a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80122ac:	e0bffa17 	ldw	r2,-24(fp)
 80122b0:	10800d17 	ldw	r2,52(r2)
 80122b4:	10800044 	addi	r2,r2,1
 80122b8:	10c1ffcc 	andi	r3,r2,2047
 80122bc:	e0bffa17 	ldw	r2,-24(fp)
 80122c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80122c4:	e0bff917 	ldw	r2,-28(fp)
 80122c8:	10bfffc4 	addi	r2,r2,-1
 80122cc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80122d0:	e0bff917 	ldw	r2,-28(fp)
 80122d4:	10000526 	beq	r2,zero,80122ec <altera_avalon_jtag_uart_irq+0x1ac>
 80122d8:	e0bffa17 	ldw	r2,-24(fp)
 80122dc:	10c00d17 	ldw	r3,52(r2)
 80122e0:	e0bffa17 	ldw	r2,-24(fp)
 80122e4:	10800c17 	ldw	r2,48(r2)
 80122e8:	18bfe51e 	bne	r3,r2,8012280 <__alt_data_end+0xfc012280>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80122ec:	e0bff917 	ldw	r2,-28(fp)
 80122f0:	103f9d26 	beq	r2,zero,8012168 <__alt_data_end+0xfc012168>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80122f4:	e0bffa17 	ldw	r2,-24(fp)
 80122f8:	10c00817 	ldw	r3,32(r2)
 80122fc:	00bfff44 	movi	r2,-3
 8012300:	1886703a 	and	r3,r3,r2
 8012304:	e0bffa17 	ldw	r2,-24(fp)
 8012308:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801230c:	e0bffa17 	ldw	r2,-24(fp)
 8012310:	10800017 	ldw	r2,0(r2)
 8012314:	10800104 	addi	r2,r2,4
 8012318:	1007883a 	mov	r3,r2
 801231c:	e0bffa17 	ldw	r2,-24(fp)
 8012320:	10800817 	ldw	r2,32(r2)
 8012324:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012328:	e0bffb17 	ldw	r2,-20(fp)
 801232c:	10800104 	addi	r2,r2,4
 8012330:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8012334:	003f8c06 	br	8012168 <__alt_data_end+0xfc012168>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8012338:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 801233c:	0001883a 	nop
 8012340:	e037883a 	mov	sp,fp
 8012344:	df000017 	ldw	fp,0(sp)
 8012348:	dec00104 	addi	sp,sp,4
 801234c:	f800283a 	ret

08012350 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8012350:	defff804 	addi	sp,sp,-32
 8012354:	df000715 	stw	fp,28(sp)
 8012358:	df000704 	addi	fp,sp,28
 801235c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8012360:	e0bffb17 	ldw	r2,-20(fp)
 8012364:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8012368:	e0bff917 	ldw	r2,-28(fp)
 801236c:	10800017 	ldw	r2,0(r2)
 8012370:	10800104 	addi	r2,r2,4
 8012374:	10800037 	ldwio	r2,0(r2)
 8012378:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801237c:	e0bffa17 	ldw	r2,-24(fp)
 8012380:	1081000c 	andi	r2,r2,1024
 8012384:	10000b26 	beq	r2,zero,80123b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8012388:	e0bff917 	ldw	r2,-28(fp)
 801238c:	10800017 	ldw	r2,0(r2)
 8012390:	10800104 	addi	r2,r2,4
 8012394:	1007883a 	mov	r3,r2
 8012398:	e0bff917 	ldw	r2,-28(fp)
 801239c:	10800817 	ldw	r2,32(r2)
 80123a0:	10810014 	ori	r2,r2,1024
 80123a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80123a8:	e0bff917 	ldw	r2,-28(fp)
 80123ac:	10000915 	stw	zero,36(r2)
 80123b0:	00000a06 	br	80123dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80123b4:	e0bff917 	ldw	r2,-28(fp)
 80123b8:	10c00917 	ldw	r3,36(r2)
 80123bc:	00a00034 	movhi	r2,32768
 80123c0:	10bfff04 	addi	r2,r2,-4
 80123c4:	10c00536 	bltu	r2,r3,80123dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80123c8:	e0bff917 	ldw	r2,-28(fp)
 80123cc:	10800917 	ldw	r2,36(r2)
 80123d0:	10c00044 	addi	r3,r2,1
 80123d4:	e0bff917 	ldw	r2,-28(fp)
 80123d8:	10c00915 	stw	r3,36(r2)
 80123dc:	d0a72317 	ldw	r2,-25460(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80123e0:	e037883a 	mov	sp,fp
 80123e4:	df000017 	ldw	fp,0(sp)
 80123e8:	dec00104 	addi	sp,sp,4
 80123ec:	f800283a 	ret

080123f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80123f0:	defffd04 	addi	sp,sp,-12
 80123f4:	df000215 	stw	fp,8(sp)
 80123f8:	df000204 	addi	fp,sp,8
 80123fc:	e13ffe15 	stw	r4,-8(fp)
 8012400:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8012404:	00000506 	br	801241c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8012408:	e0bfff17 	ldw	r2,-4(fp)
 801240c:	1090000c 	andi	r2,r2,16384
 8012410:	10000226 	beq	r2,zero,801241c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8012414:	00bffd44 	movi	r2,-11
 8012418:	00000b06 	br	8012448 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801241c:	e0bffe17 	ldw	r2,-8(fp)
 8012420:	10c00d17 	ldw	r3,52(r2)
 8012424:	e0bffe17 	ldw	r2,-8(fp)
 8012428:	10800c17 	ldw	r2,48(r2)
 801242c:	18800526 	beq	r3,r2,8012444 <altera_avalon_jtag_uart_close+0x54>
 8012430:	e0bffe17 	ldw	r2,-8(fp)
 8012434:	10c00917 	ldw	r3,36(r2)
 8012438:	e0bffe17 	ldw	r2,-8(fp)
 801243c:	10800117 	ldw	r2,4(r2)
 8012440:	18bff136 	bltu	r3,r2,8012408 <__alt_data_end+0xfc012408>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8012444:	0005883a 	mov	r2,zero
}
 8012448:	e037883a 	mov	sp,fp
 801244c:	df000017 	ldw	fp,0(sp)
 8012450:	dec00104 	addi	sp,sp,4
 8012454:	f800283a 	ret

08012458 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8012458:	defffa04 	addi	sp,sp,-24
 801245c:	df000515 	stw	fp,20(sp)
 8012460:	df000504 	addi	fp,sp,20
 8012464:	e13ffd15 	stw	r4,-12(fp)
 8012468:	e17ffe15 	stw	r5,-8(fp)
 801246c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8012470:	00bff9c4 	movi	r2,-25
 8012474:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8012478:	e0bffe17 	ldw	r2,-8(fp)
 801247c:	10da8060 	cmpeqi	r3,r2,27137
 8012480:	1800031e 	bne	r3,zero,8012490 <altera_avalon_jtag_uart_ioctl+0x38>
 8012484:	109a80a0 	cmpeqi	r2,r2,27138
 8012488:	1000181e 	bne	r2,zero,80124ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 801248c:	00002906 	br	8012534 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8012490:	e0bffd17 	ldw	r2,-12(fp)
 8012494:	10c00117 	ldw	r3,4(r2)
 8012498:	00a00034 	movhi	r2,32768
 801249c:	10bfffc4 	addi	r2,r2,-1
 80124a0:	18802126 	beq	r3,r2,8012528 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80124a4:	e0bfff17 	ldw	r2,-4(fp)
 80124a8:	10800017 	ldw	r2,0(r2)
 80124ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80124b0:	e0bffc17 	ldw	r2,-16(fp)
 80124b4:	10800090 	cmplti	r2,r2,2
 80124b8:	1000061e 	bne	r2,zero,80124d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 80124bc:	e0fffc17 	ldw	r3,-16(fp)
 80124c0:	00a00034 	movhi	r2,32768
 80124c4:	10bfffc4 	addi	r2,r2,-1
 80124c8:	18800226 	beq	r3,r2,80124d4 <altera_avalon_jtag_uart_ioctl+0x7c>
 80124cc:	e0bffc17 	ldw	r2,-16(fp)
 80124d0:	00000206 	br	80124dc <altera_avalon_jtag_uart_ioctl+0x84>
 80124d4:	00a00034 	movhi	r2,32768
 80124d8:	10bfff84 	addi	r2,r2,-2
 80124dc:	e0fffd17 	ldw	r3,-12(fp)
 80124e0:	18800115 	stw	r2,4(r3)
      rc = 0;
 80124e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80124e8:	00000f06 	br	8012528 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80124ec:	e0bffd17 	ldw	r2,-12(fp)
 80124f0:	10c00117 	ldw	r3,4(r2)
 80124f4:	00a00034 	movhi	r2,32768
 80124f8:	10bfffc4 	addi	r2,r2,-1
 80124fc:	18800c26 	beq	r3,r2,8012530 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8012500:	e0bffd17 	ldw	r2,-12(fp)
 8012504:	10c00917 	ldw	r3,36(r2)
 8012508:	e0bffd17 	ldw	r2,-12(fp)
 801250c:	10800117 	ldw	r2,4(r2)
 8012510:	1885803a 	cmpltu	r2,r3,r2
 8012514:	10c03fcc 	andi	r3,r2,255
 8012518:	e0bfff17 	ldw	r2,-4(fp)
 801251c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8012520:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8012524:	00000206 	br	8012530 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8012528:	0001883a 	nop
 801252c:	00000106 	br	8012534 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8012530:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8012534:	e0bffb17 	ldw	r2,-20(fp)
}
 8012538:	e037883a 	mov	sp,fp
 801253c:	df000017 	ldw	fp,0(sp)
 8012540:	dec00104 	addi	sp,sp,4
 8012544:	f800283a 	ret

08012548 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8012548:	defff304 	addi	sp,sp,-52
 801254c:	dfc00c15 	stw	ra,48(sp)
 8012550:	df000b15 	stw	fp,44(sp)
 8012554:	df000b04 	addi	fp,sp,44
 8012558:	e13ffc15 	stw	r4,-16(fp)
 801255c:	e17ffd15 	stw	r5,-12(fp)
 8012560:	e1bffe15 	stw	r6,-8(fp)
 8012564:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8012568:	e0bffd17 	ldw	r2,-12(fp)
 801256c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8012570:	00004706 	br	8012690 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8012574:	e0bffc17 	ldw	r2,-16(fp)
 8012578:	10800a17 	ldw	r2,40(r2)
 801257c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8012580:	e0bffc17 	ldw	r2,-16(fp)
 8012584:	10800b17 	ldw	r2,44(r2)
 8012588:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801258c:	e0fff717 	ldw	r3,-36(fp)
 8012590:	e0bff817 	ldw	r2,-32(fp)
 8012594:	18800536 	bltu	r3,r2,80125ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8012598:	e0fff717 	ldw	r3,-36(fp)
 801259c:	e0bff817 	ldw	r2,-32(fp)
 80125a0:	1885c83a 	sub	r2,r3,r2
 80125a4:	e0bff615 	stw	r2,-40(fp)
 80125a8:	00000406 	br	80125bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80125ac:	00c20004 	movi	r3,2048
 80125b0:	e0bff817 	ldw	r2,-32(fp)
 80125b4:	1885c83a 	sub	r2,r3,r2
 80125b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80125bc:	e0bff617 	ldw	r2,-40(fp)
 80125c0:	10001e26 	beq	r2,zero,801263c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80125c4:	e0fffe17 	ldw	r3,-8(fp)
 80125c8:	e0bff617 	ldw	r2,-40(fp)
 80125cc:	1880022e 	bgeu	r3,r2,80125d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80125d0:	e0bffe17 	ldw	r2,-8(fp)
 80125d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80125d8:	e0bffc17 	ldw	r2,-16(fp)
 80125dc:	10c00e04 	addi	r3,r2,56
 80125e0:	e0bff817 	ldw	r2,-32(fp)
 80125e4:	1885883a 	add	r2,r3,r2
 80125e8:	e1bff617 	ldw	r6,-40(fp)
 80125ec:	100b883a 	mov	r5,r2
 80125f0:	e13ff517 	ldw	r4,-44(fp)
 80125f4:	800cda00 	call	800cda0 <memcpy>
      ptr   += n;
 80125f8:	e0fff517 	ldw	r3,-44(fp)
 80125fc:	e0bff617 	ldw	r2,-40(fp)
 8012600:	1885883a 	add	r2,r3,r2
 8012604:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8012608:	e0fffe17 	ldw	r3,-8(fp)
 801260c:	e0bff617 	ldw	r2,-40(fp)
 8012610:	1885c83a 	sub	r2,r3,r2
 8012614:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012618:	e0fff817 	ldw	r3,-32(fp)
 801261c:	e0bff617 	ldw	r2,-40(fp)
 8012620:	1885883a 	add	r2,r3,r2
 8012624:	10c1ffcc 	andi	r3,r2,2047
 8012628:	e0bffc17 	ldw	r2,-16(fp)
 801262c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8012630:	e0bffe17 	ldw	r2,-8(fp)
 8012634:	00bfcf16 	blt	zero,r2,8012574 <__alt_data_end+0xfc012574>
 8012638:	00000106 	br	8012640 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 801263c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8012640:	e0fff517 	ldw	r3,-44(fp)
 8012644:	e0bffd17 	ldw	r2,-12(fp)
 8012648:	1880141e 	bne	r3,r2,801269c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801264c:	e0bfff17 	ldw	r2,-4(fp)
 8012650:	1090000c 	andi	r2,r2,16384
 8012654:	1000131e 	bne	r2,zero,80126a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8012658:	0001883a 	nop
 801265c:	e0bffc17 	ldw	r2,-16(fp)
 8012660:	10c00a17 	ldw	r3,40(r2)
 8012664:	e0bff717 	ldw	r2,-36(fp)
 8012668:	1880051e 	bne	r3,r2,8012680 <altera_avalon_jtag_uart_read+0x138>
 801266c:	e0bffc17 	ldw	r2,-16(fp)
 8012670:	10c00917 	ldw	r3,36(r2)
 8012674:	e0bffc17 	ldw	r2,-16(fp)
 8012678:	10800117 	ldw	r2,4(r2)
 801267c:	18bff736 	bltu	r3,r2,801265c <__alt_data_end+0xfc01265c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8012680:	e0bffc17 	ldw	r2,-16(fp)
 8012684:	10c00a17 	ldw	r3,40(r2)
 8012688:	e0bff717 	ldw	r2,-36(fp)
 801268c:	18800726 	beq	r3,r2,80126ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8012690:	e0bffe17 	ldw	r2,-8(fp)
 8012694:	00bfb716 	blt	zero,r2,8012574 <__alt_data_end+0xfc012574>
 8012698:	00000506 	br	80126b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 801269c:	0001883a 	nop
 80126a0:	00000306 	br	80126b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80126a4:	0001883a 	nop
 80126a8:	00000106 	br	80126b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80126ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80126b0:	e0fff517 	ldw	r3,-44(fp)
 80126b4:	e0bffd17 	ldw	r2,-12(fp)
 80126b8:	18801826 	beq	r3,r2,801271c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80126bc:	0005303a 	rdctl	r2,status
 80126c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80126c4:	e0fffb17 	ldw	r3,-20(fp)
 80126c8:	00bfff84 	movi	r2,-2
 80126cc:	1884703a 	and	r2,r3,r2
 80126d0:	1001703a 	wrctl	status,r2
  
  return context;
 80126d4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80126d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80126dc:	e0bffc17 	ldw	r2,-16(fp)
 80126e0:	10800817 	ldw	r2,32(r2)
 80126e4:	10c00054 	ori	r3,r2,1
 80126e8:	e0bffc17 	ldw	r2,-16(fp)
 80126ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80126f0:	e0bffc17 	ldw	r2,-16(fp)
 80126f4:	10800017 	ldw	r2,0(r2)
 80126f8:	10800104 	addi	r2,r2,4
 80126fc:	1007883a 	mov	r3,r2
 8012700:	e0bffc17 	ldw	r2,-16(fp)
 8012704:	10800817 	ldw	r2,32(r2)
 8012708:	18800035 	stwio	r2,0(r3)
 801270c:	e0bffa17 	ldw	r2,-24(fp)
 8012710:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012714:	e0bff917 	ldw	r2,-28(fp)
 8012718:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801271c:	e0fff517 	ldw	r3,-44(fp)
 8012720:	e0bffd17 	ldw	r2,-12(fp)
 8012724:	18800426 	beq	r3,r2,8012738 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8012728:	e0fff517 	ldw	r3,-44(fp)
 801272c:	e0bffd17 	ldw	r2,-12(fp)
 8012730:	1885c83a 	sub	r2,r3,r2
 8012734:	00000606 	br	8012750 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8012738:	e0bfff17 	ldw	r2,-4(fp)
 801273c:	1090000c 	andi	r2,r2,16384
 8012740:	10000226 	beq	r2,zero,801274c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8012744:	00bffd44 	movi	r2,-11
 8012748:	00000106 	br	8012750 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 801274c:	00bffec4 	movi	r2,-5
}
 8012750:	e037883a 	mov	sp,fp
 8012754:	dfc00117 	ldw	ra,4(sp)
 8012758:	df000017 	ldw	fp,0(sp)
 801275c:	dec00204 	addi	sp,sp,8
 8012760:	f800283a 	ret

08012764 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8012764:	defff304 	addi	sp,sp,-52
 8012768:	dfc00c15 	stw	ra,48(sp)
 801276c:	df000b15 	stw	fp,44(sp)
 8012770:	df000b04 	addi	fp,sp,44
 8012774:	e13ffc15 	stw	r4,-16(fp)
 8012778:	e17ffd15 	stw	r5,-12(fp)
 801277c:	e1bffe15 	stw	r6,-8(fp)
 8012780:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8012784:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8012788:	e0bffd17 	ldw	r2,-12(fp)
 801278c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8012790:	00003706 	br	8012870 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8012794:	e0bffc17 	ldw	r2,-16(fp)
 8012798:	10800c17 	ldw	r2,48(r2)
 801279c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80127a0:	e0bffc17 	ldw	r2,-16(fp)
 80127a4:	10800d17 	ldw	r2,52(r2)
 80127a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80127ac:	e0fff917 	ldw	r3,-28(fp)
 80127b0:	e0bff517 	ldw	r2,-44(fp)
 80127b4:	1880062e 	bgeu	r3,r2,80127d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80127b8:	e0fff517 	ldw	r3,-44(fp)
 80127bc:	e0bff917 	ldw	r2,-28(fp)
 80127c0:	1885c83a 	sub	r2,r3,r2
 80127c4:	10bfffc4 	addi	r2,r2,-1
 80127c8:	e0bff615 	stw	r2,-40(fp)
 80127cc:	00000b06 	br	80127fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80127d0:	e0bff517 	ldw	r2,-44(fp)
 80127d4:	10000526 	beq	r2,zero,80127ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80127d8:	00c20004 	movi	r3,2048
 80127dc:	e0bff917 	ldw	r2,-28(fp)
 80127e0:	1885c83a 	sub	r2,r3,r2
 80127e4:	e0bff615 	stw	r2,-40(fp)
 80127e8:	00000406 	br	80127fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80127ec:	00c1ffc4 	movi	r3,2047
 80127f0:	e0bff917 	ldw	r2,-28(fp)
 80127f4:	1885c83a 	sub	r2,r3,r2
 80127f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80127fc:	e0bff617 	ldw	r2,-40(fp)
 8012800:	10001e26 	beq	r2,zero,801287c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8012804:	e0fffe17 	ldw	r3,-8(fp)
 8012808:	e0bff617 	ldw	r2,-40(fp)
 801280c:	1880022e 	bgeu	r3,r2,8012818 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8012810:	e0bffe17 	ldw	r2,-8(fp)
 8012814:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8012818:	e0bffc17 	ldw	r2,-16(fp)
 801281c:	10c20e04 	addi	r3,r2,2104
 8012820:	e0bff917 	ldw	r2,-28(fp)
 8012824:	1885883a 	add	r2,r3,r2
 8012828:	e1bff617 	ldw	r6,-40(fp)
 801282c:	e17ffd17 	ldw	r5,-12(fp)
 8012830:	1009883a 	mov	r4,r2
 8012834:	800cda00 	call	800cda0 <memcpy>
      ptr   += n;
 8012838:	e0fffd17 	ldw	r3,-12(fp)
 801283c:	e0bff617 	ldw	r2,-40(fp)
 8012840:	1885883a 	add	r2,r3,r2
 8012844:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8012848:	e0fffe17 	ldw	r3,-8(fp)
 801284c:	e0bff617 	ldw	r2,-40(fp)
 8012850:	1885c83a 	sub	r2,r3,r2
 8012854:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012858:	e0fff917 	ldw	r3,-28(fp)
 801285c:	e0bff617 	ldw	r2,-40(fp)
 8012860:	1885883a 	add	r2,r3,r2
 8012864:	10c1ffcc 	andi	r3,r2,2047
 8012868:	e0bffc17 	ldw	r2,-16(fp)
 801286c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8012870:	e0bffe17 	ldw	r2,-8(fp)
 8012874:	00bfc716 	blt	zero,r2,8012794 <__alt_data_end+0xfc012794>
 8012878:	00000106 	br	8012880 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 801287c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012880:	0005303a 	rdctl	r2,status
 8012884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012888:	e0fffb17 	ldw	r3,-20(fp)
 801288c:	00bfff84 	movi	r2,-2
 8012890:	1884703a 	and	r2,r3,r2
 8012894:	1001703a 	wrctl	status,r2
  
  return context;
 8012898:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801289c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80128a0:	e0bffc17 	ldw	r2,-16(fp)
 80128a4:	10800817 	ldw	r2,32(r2)
 80128a8:	10c00094 	ori	r3,r2,2
 80128ac:	e0bffc17 	ldw	r2,-16(fp)
 80128b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80128b4:	e0bffc17 	ldw	r2,-16(fp)
 80128b8:	10800017 	ldw	r2,0(r2)
 80128bc:	10800104 	addi	r2,r2,4
 80128c0:	1007883a 	mov	r3,r2
 80128c4:	e0bffc17 	ldw	r2,-16(fp)
 80128c8:	10800817 	ldw	r2,32(r2)
 80128cc:	18800035 	stwio	r2,0(r3)
 80128d0:	e0bffa17 	ldw	r2,-24(fp)
 80128d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80128d8:	e0bff817 	ldw	r2,-32(fp)
 80128dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80128e0:	e0bffe17 	ldw	r2,-8(fp)
 80128e4:	0080100e 	bge	zero,r2,8012928 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80128e8:	e0bfff17 	ldw	r2,-4(fp)
 80128ec:	1090000c 	andi	r2,r2,16384
 80128f0:	1000101e 	bne	r2,zero,8012934 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80128f4:	0001883a 	nop
 80128f8:	e0bffc17 	ldw	r2,-16(fp)
 80128fc:	10c00d17 	ldw	r3,52(r2)
 8012900:	e0bff517 	ldw	r2,-44(fp)
 8012904:	1880051e 	bne	r3,r2,801291c <altera_avalon_jtag_uart_write+0x1b8>
 8012908:	e0bffc17 	ldw	r2,-16(fp)
 801290c:	10c00917 	ldw	r3,36(r2)
 8012910:	e0bffc17 	ldw	r2,-16(fp)
 8012914:	10800117 	ldw	r2,4(r2)
 8012918:	18bff736 	bltu	r3,r2,80128f8 <__alt_data_end+0xfc0128f8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801291c:	e0bffc17 	ldw	r2,-16(fp)
 8012920:	10800917 	ldw	r2,36(r2)
 8012924:	1000051e 	bne	r2,zero,801293c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8012928:	e0bffe17 	ldw	r2,-8(fp)
 801292c:	00bfd016 	blt	zero,r2,8012870 <__alt_data_end+0xfc012870>
 8012930:	00000306 	br	8012940 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8012934:	0001883a 	nop
 8012938:	00000106 	br	8012940 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 801293c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8012940:	e0fffd17 	ldw	r3,-12(fp)
 8012944:	e0bff717 	ldw	r2,-36(fp)
 8012948:	18800426 	beq	r3,r2,801295c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 801294c:	e0fffd17 	ldw	r3,-12(fp)
 8012950:	e0bff717 	ldw	r2,-36(fp)
 8012954:	1885c83a 	sub	r2,r3,r2
 8012958:	00000606 	br	8012974 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 801295c:	e0bfff17 	ldw	r2,-4(fp)
 8012960:	1090000c 	andi	r2,r2,16384
 8012964:	10000226 	beq	r2,zero,8012970 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8012968:	00bffd44 	movi	r2,-11
 801296c:	00000106 	br	8012974 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8012970:	00bffec4 	movi	r2,-5
}
 8012974:	e037883a 	mov	sp,fp
 8012978:	dfc00117 	ldw	ra,4(sp)
 801297c:	df000017 	ldw	fp,0(sp)
 8012980:	dec00204 	addi	sp,sp,8
 8012984:	f800283a 	ret

08012988 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 8012988:	defffd04 	addi	sp,sp,-12
 801298c:	df000215 	stw	fp,8(sp)
 8012990:	df000204 	addi	fp,sp,8
 8012994:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 8012998:	008e84b4 	movhi	r2,14866
 801299c:	10ac1144 	addi	r2,r2,-20411
 80129a0:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 80129a4:	e0bfff17 	ldw	r2,-4(fp)
 80129a8:	10800a17 	ldw	r2,40(r2)
 80129ac:	10800104 	addi	r2,r2,4
 80129b0:	1007883a 	mov	r3,r2
 80129b4:	e0bffe17 	ldw	r2,-8(fp)
 80129b8:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 80129bc:	e0bfff17 	ldw	r2,-4(fp)
 80129c0:	10800a17 	ldw	r2,40(r2)
 80129c4:	10800104 	addi	r2,r2,4
 80129c8:	10800037 	ldwio	r2,0(r2)
 80129cc:	1007883a 	mov	r3,r2
 80129d0:	e0bffe17 	ldw	r2,-8(fp)
 80129d4:	1880081e 	bne	r3,r2,80129f8 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 80129d8:	e0bfff17 	ldw	r2,-4(fp)
 80129dc:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 80129e0:	e0bfff17 	ldw	r2,-4(fp)
 80129e4:	10800a17 	ldw	r2,40(r2)
 80129e8:	10800104 	addi	r2,r2,4
 80129ec:	0007883a 	mov	r3,zero
 80129f0:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 80129f4:	00000306 	br	8012a04 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 80129f8:	e0bfff17 	ldw	r2,-4(fp)
 80129fc:	00c00044 	movi	r3,1
 8012a00:	10c00f15 	stw	r3,60(r2)
    }
}
 8012a04:	0001883a 	nop
 8012a08:	e037883a 	mov	sp,fp
 8012a0c:	df000017 	ldw	fp,0(sp)
 8012a10:	dec00104 	addi	sp,sp,4
 8012a14:	f800283a 	ret

08012a18 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 8012a18:	defffc04 	addi	sp,sp,-16
 8012a1c:	df000315 	stw	fp,12(sp)
 8012a20:	df000304 	addi	fp,sp,12
 8012a24:	e13ffe15 	stw	r4,-8(fp)
 8012a28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 8012a2c:	e0bfff17 	ldw	r2,-4(fp)
 8012a30:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 8012a34:	e0bffd17 	ldw	r2,-12(fp)
 8012a38:	10001026 	beq	r2,zero,8012a7c <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 8012a3c:	e0bffe17 	ldw	r2,-8(fp)
 8012a40:	10800a17 	ldw	r2,40(r2)
 8012a44:	10800104 	addi	r2,r2,4
 8012a48:	1007883a 	mov	r3,r2
 8012a4c:	e0bffd17 	ldw	r2,-12(fp)
 8012a50:	10800104 	addi	r2,r2,4
 8012a54:	10800017 	ldw	r2,0(r2)
 8012a58:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 8012a5c:	e0bffe17 	ldw	r2,-8(fp)
 8012a60:	10800a17 	ldw	r2,40(r2)
 8012a64:	1007883a 	mov	r3,r2
 8012a68:	e0bffd17 	ldw	r2,-12(fp)
 8012a6c:	10800017 	ldw	r2,0(r2)
 8012a70:	18800035 	stwio	r2,0(r3)
        return 0;
 8012a74:	0005883a 	mov	r2,zero
 8012a78:	00000106 	br	8012a80 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 8012a7c:	00bffa84 	movi	r2,-22
}
 8012a80:	e037883a 	mov	sp,fp
 8012a84:	df000017 	ldw	fp,0(sp)
 8012a88:	dec00104 	addi	sp,sp,4
 8012a8c:	f800283a 	ret

08012a90 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 8012a90:	defff504 	addi	sp,sp,-44
 8012a94:	dfc00a15 	stw	ra,40(sp)
 8012a98:	df000915 	stw	fp,36(sp)
 8012a9c:	df000904 	addi	fp,sp,36
 8012aa0:	e13ffe15 	stw	r4,-8(fp)
 8012aa4:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8012aa8:	e0bffe17 	ldw	r2,-8(fp)
 8012aac:	e0bff715 	stw	r2,-36(fp)
    int status = 0;
 8012ab0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 8012ab4:	e0bff717 	ldw	r2,-36(fp)
 8012ab8:	10801017 	ldw	r2,64(r2)
 8012abc:	e0bff915 	stw	r2,-28(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8012ac0:	e0bff717 	ldw	r2,-36(fp)
 8012ac4:	10800a17 	ldw	r2,40(r2)
 8012ac8:	10800304 	addi	r2,r2,12
 8012acc:	10800037 	ldwio	r2,0(r2)
 8012ad0:	1007883a 	mov	r3,r2
 8012ad4:	00bfff44 	movi	r2,-3
 8012ad8:	1884703a 	and	r2,r3,r2
 8012adc:	e0bffa15 	stw	r2,-24(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012ae0:	e0bff717 	ldw	r2,-36(fp)
 8012ae4:	10800a17 	ldw	r2,40(r2)
 8012ae8:	10800304 	addi	r2,r2,12
 8012aec:	1007883a 	mov	r3,r2
 8012af0:	e0bffa17 	ldw	r2,-24(fp)
 8012af4:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 8012af8:	e0bff917 	ldw	r2,-28(fp)
 8012afc:	10002d26 	beq	r2,zero,8012bb4 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 8012b00:	e0bff717 	ldw	r2,-36(fp)
 8012b04:	10800a17 	ldw	r2,40(r2)
 8012b08:	10800104 	addi	r2,r2,4
 8012b0c:	1007883a 	mov	r3,r2
 8012b10:	e0bff917 	ldw	r2,-28(fp)
 8012b14:	10800104 	addi	r2,r2,4
 8012b18:	10800017 	ldw	r2,0(r2)
 8012b1c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 8012b20:	e0bff717 	ldw	r2,-36(fp)
 8012b24:	10800a17 	ldw	r2,40(r2)
 8012b28:	1007883a 	mov	r3,r2
 8012b2c:	e0bff917 	ldw	r2,-28(fp)
 8012b30:	10800017 	ldw	r2,0(r2)
 8012b34:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8012b38:	e0bff717 	ldw	r2,-36(fp)
 8012b3c:	10800a17 	ldw	r2,40(r2)
 8012b40:	10800204 	addi	r2,r2,8
 8012b44:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8012b48:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8012b4c:	1005d07a 	srai	r2,r2,1
 8012b50:	e0bff815 	stw	r2,-32(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 8012b54:	e0bff717 	ldw	r2,-36(fp)
 8012b58:	10800d17 	ldw	r2,52(r2)
 8012b5c:	10001126 	beq	r2,zero,8012ba4 <altera_avalon_mailbox_simple_tx_isr+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012b60:	0005303a 	rdctl	r2,status
 8012b64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012b68:	e0fffc17 	ldw	r3,-16(fp)
 8012b6c:	00bfff84 	movi	r2,-2
 8012b70:	1884703a 	and	r2,r3,r2
 8012b74:	1001703a 	wrctl	status,r2
  
  return context;
 8012b78:	e0bffc17 	ldw	r2,-16(fp)
        {
            cpu_sr = alt_irq_disable_all();
 8012b7c:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 8012b80:	e0bff717 	ldw	r2,-36(fp)
 8012b84:	10800d17 	ldw	r2,52(r2)
 8012b88:	e17ff817 	ldw	r5,-32(fp)
 8012b8c:	e13ff917 	ldw	r4,-28(fp)
 8012b90:	103ee83a 	callr	r2
 8012b94:	e0bffb17 	ldw	r2,-20(fp)
 8012b98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012b9c:	e0bffd17 	ldw	r2,-12(fp)
 8012ba0:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8012ba4:	e0bff717 	ldw	r2,-36(fp)
 8012ba8:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 8012bac:	e0bff717 	ldw	r2,-36(fp)
 8012bb0:	10001105 	stb	zero,68(r2)
    }
}
 8012bb4:	0001883a 	nop
 8012bb8:	e037883a 	mov	sp,fp
 8012bbc:	dfc00117 	ldw	ra,4(sp)
 8012bc0:	df000017 	ldw	fp,0(sp)
 8012bc4:	dec00204 	addi	sp,sp,8
 8012bc8:	f800283a 	ret

08012bcc <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 8012bcc:	defff604 	addi	sp,sp,-40
 8012bd0:	dfc00915 	stw	ra,36(sp)
 8012bd4:	df000815 	stw	fp,32(sp)
 8012bd8:	df000804 	addi	fp,sp,32
 8012bdc:	e13ffe15 	stw	r4,-8(fp)
 8012be0:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8012be4:	e0bffe17 	ldw	r2,-8(fp)
 8012be8:	e0bff815 	stw	r2,-32(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8012bec:	e0bff817 	ldw	r2,-32(fp)
 8012bf0:	10800a17 	ldw	r2,40(r2)
 8012bf4:	10800104 	addi	r2,r2,4
 8012bf8:	10800037 	ldwio	r2,0(r2)
 8012bfc:	e0bffd15 	stw	r2,-12(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8012c00:	e0bff817 	ldw	r2,-32(fp)
 8012c04:	10800a17 	ldw	r2,40(r2)
 8012c08:	10800037 	ldwio	r2,0(r2)
 8012c0c:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 8012c10:	e0bff817 	ldw	r2,-32(fp)
 8012c14:	10800e17 	ldw	r2,56(r2)
 8012c18:	10001126 	beq	r2,zero,8012c60 <altera_avalon_mailbox_simple_rx_isr+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012c1c:	0005303a 	rdctl	r2,status
 8012c20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012c24:	e0fffa17 	ldw	r3,-24(fp)
 8012c28:	00bfff84 	movi	r2,-2
 8012c2c:	1884703a 	and	r2,r3,r2
 8012c30:	1001703a 	wrctl	status,r2
  
  return context;
 8012c34:	e0bffa17 	ldw	r2,-24(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8012c38:	e0bff915 	stw	r2,-28(fp)
        (dev->rx_cb)(inbox);
 8012c3c:	e0bff817 	ldw	r2,-32(fp)
 8012c40:	10800e17 	ldw	r2,56(r2)
 8012c44:	e0fffc04 	addi	r3,fp,-16
 8012c48:	1809883a 	mov	r4,r3
 8012c4c:	103ee83a 	callr	r2
 8012c50:	e0bff917 	ldw	r2,-28(fp)
 8012c54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012c58:	e0bffb17 	ldw	r2,-20(fp)
 8012c5c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 8012c60:	0001883a 	nop
 8012c64:	e037883a 	mov	sp,fp
 8012c68:	dfc00117 	ldw	ra,4(sp)
 8012c6c:	df000017 	ldw	fp,0(sp)
 8012c70:	dec00204 	addi	sp,sp,8
 8012c74:	f800283a 	ret

08012c78 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 8012c78:	defffb04 	addi	sp,sp,-20
 8012c7c:	dfc00415 	stw	ra,16(sp)
 8012c80:	df000315 	stw	fp,12(sp)
 8012c84:	df000304 	addi	fp,sp,12
 8012c88:	e13ffd15 	stw	r4,-12(fp)
 8012c8c:	e17ffe15 	stw	r5,-8(fp)
 8012c90:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 8012c94:	d1600e04 	addi	r5,gp,-32712
 8012c98:	e13ffd17 	ldw	r4,-12(fp)
 8012c9c:	80147380 	call	8014738 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 8012ca0:	e0ffff17 	ldw	r3,-4(fp)
 8012ca4:	e0bffd17 	ldw	r2,-12(fp)
 8012ca8:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 8012cac:	e0fffe17 	ldw	r3,-8(fp)
 8012cb0:	e0bffd17 	ldw	r2,-12(fp)
 8012cb4:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 8012cb8:	e0bffd17 	ldw	r2,-12(fp)
 8012cbc:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 8012cc0:	e0bffd17 	ldw	r2,-12(fp)
 8012cc4:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 8012cc8:	e0bffd17 	ldw	r2,-12(fp)
 8012ccc:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 8012cd0:	e13ffd17 	ldw	r4,-12(fp)
 8012cd4:	80129880 	call	8012988 <altera_avalon_mailbox_identify>
}
 8012cd8:	0001883a 	nop
 8012cdc:	e037883a 	mov	sp,fp
 8012ce0:	dfc00117 	ldw	ra,4(sp)
 8012ce4:	df000017 	ldw	fp,0(sp)
 8012ce8:	dec00204 	addi	sp,sp,8
 8012cec:	f800283a 	ret

08012cf0 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 8012cf0:	defff904 	addi	sp,sp,-28
 8012cf4:	dfc00615 	stw	ra,24(sp)
 8012cf8:	df000515 	stw	fp,20(sp)
 8012cfc:	df000504 	addi	fp,sp,20
 8012d00:	e13ffd15 	stw	r4,-12(fp)
 8012d04:	e17ffe15 	stw	r5,-8(fp)
 8012d08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 8012d0c:	d1600e04 	addi	r5,gp,-32712
 8012d10:	e13ffd17 	ldw	r4,-12(fp)
 8012d14:	801489c0 	call	801489c <alt_find_dev>
 8012d18:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 8012d1c:	e0bffb17 	ldw	r2,-20(fp)
 8012d20:	1000021e 	bne	r2,zero,8012d2c <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 8012d24:	0005883a 	mov	r2,zero
 8012d28:	00005d06 	br	8012ea0 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8012d2c:	e0bffb17 	ldw	r2,-20(fp)
 8012d30:	10800a17 	ldw	r2,40(r2)
 8012d34:	10800304 	addi	r2,r2,12
 8012d38:	10800037 	ldwio	r2,0(r2)
 8012d3c:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 8012d40:	e0bffb17 	ldw	r2,-20(fp)
 8012d44:	10800f17 	ldw	r2,60(r2)
 8012d48:	1000081e 	bne	r2,zero,8012d6c <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8012d4c:	e0bffb17 	ldw	r2,-20(fp)
 8012d50:	10800a17 	ldw	r2,40(r2)
 8012d54:	10800304 	addi	r2,r2,12
 8012d58:	1009883a 	mov	r4,r2
 8012d5c:	e0fffc17 	ldw	r3,-16(fp)
 8012d60:	00bfff44 	movi	r2,-3
 8012d64:	1884703a 	and	r2,r3,r2
 8012d68:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 8012d6c:	e0bffb17 	ldw	r2,-20(fp)
 8012d70:	10800f17 	ldw	r2,60(r2)
 8012d74:	10800058 	cmpnei	r2,r2,1
 8012d78:	1000081e 	bne	r2,zero,8012d9c <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8012d7c:	e0bffb17 	ldw	r2,-20(fp)
 8012d80:	10800a17 	ldw	r2,40(r2)
 8012d84:	10800304 	addi	r2,r2,12
 8012d88:	1009883a 	mov	r4,r2
 8012d8c:	e0fffc17 	ldw	r3,-16(fp)
 8012d90:	00bfff84 	movi	r2,-2
 8012d94:	1884703a 	and	r2,r3,r2
 8012d98:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 8012d9c:	e0bffb17 	ldw	r2,-20(fp)
 8012da0:	10800b17 	ldw	r2,44(r2)
 8012da4:	10bfffd8 	cmpnei	r2,r2,-1
 8012da8:	1000021e 	bne	r2,zero,8012db4 <altera_avalon_mailbox_open+0xc4>
        return dev;
 8012dac:	e0bffb17 	ldw	r2,-20(fp)
 8012db0:	00003b06 	br	8012ea0 <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 8012db4:	e0bffe17 	ldw	r2,-8(fp)
 8012db8:	1000041e 	bne	r2,zero,8012dcc <altera_avalon_mailbox_open+0xdc>
 8012dbc:	e0bfff17 	ldw	r2,-4(fp)
 8012dc0:	1000021e 	bne	r2,zero,8012dcc <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 8012dc4:	e0bffb17 	ldw	r2,-20(fp)
 8012dc8:	00003506 	br	8012ea0 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8012dcc:	e0bffb17 	ldw	r2,-20(fp)
 8012dd0:	10800f17 	ldw	r2,60(r2)
 8012dd4:	1000021e 	bne	r2,zero,8012de0 <altera_avalon_mailbox_open+0xf0>
 8012dd8:	e0bfff17 	ldw	r2,-4(fp)
 8012ddc:	1000061e 	bne	r2,zero,8012df8 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8012de0:	e0bffb17 	ldw	r2,-20(fp)
 8012de4:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8012de8:	10800058 	cmpnei	r2,r2,1
 8012dec:	1000041e 	bne	r2,zero,8012e00 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8012df0:	e0bffe17 	ldw	r2,-8(fp)
 8012df4:	10000226 	beq	r2,zero,8012e00 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 8012df8:	0005883a 	mov	r2,zero
 8012dfc:	00002806 	br	8012ea0 <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 8012e00:	e0bffb17 	ldw	r2,-20(fp)
 8012e04:	e0fffe17 	ldw	r3,-8(fp)
 8012e08:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 8012e0c:	e0bffb17 	ldw	r2,-20(fp)
 8012e10:	e0ffff17 	ldw	r3,-4(fp)
 8012e14:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 8012e18:	e0bffb17 	ldw	r2,-20(fp)
 8012e1c:	10800f17 	ldw	r2,60(r2)
 8012e20:	1000071e 	bne	r2,zero,8012e40 <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
 8012e24:	e0bffb17 	ldw	r2,-20(fp)
 8012e28:	10800b17 	ldw	r2,44(r2)
 8012e2c:	01820074 	movhi	r6,2049
 8012e30:	318aa404 	addi	r6,r6,10896
 8012e34:	e17ffb17 	ldw	r5,-20(fp)
 8012e38:	1009883a 	mov	r4,r2
 8012e3c:	8014aa00 	call	8014aa0 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 8012e40:	e0bffb17 	ldw	r2,-20(fp)
 8012e44:	10800f17 	ldw	r2,60(r2)
 8012e48:	10800058 	cmpnei	r2,r2,1
 8012e4c:	1000131e 	bne	r2,zero,8012e9c <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
 8012e50:	e0bffb17 	ldw	r2,-20(fp)
 8012e54:	10800b17 	ldw	r2,44(r2)
 8012e58:	01820074 	movhi	r6,2049
 8012e5c:	318af304 	addi	r6,r6,11212
 8012e60:	e17ffb17 	ldw	r5,-20(fp)
 8012e64:	1009883a 	mov	r4,r2
 8012e68:	8014aa00 	call	8014aa0 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8012e6c:	e0bffb17 	ldw	r2,-20(fp)
 8012e70:	10800a17 	ldw	r2,40(r2)
 8012e74:	10800304 	addi	r2,r2,12
 8012e78:	10800037 	ldwio	r2,0(r2)
 8012e7c:	10800054 	ori	r2,r2,1
 8012e80:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012e84:	e0bffb17 	ldw	r2,-20(fp)
 8012e88:	10800a17 	ldw	r2,40(r2)
 8012e8c:	10800304 	addi	r2,r2,12
 8012e90:	1007883a 	mov	r3,r2
 8012e94:	e0bffc17 	ldw	r2,-16(fp)
 8012e98:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 8012e9c:	e0bffb17 	ldw	r2,-20(fp)
}
 8012ea0:	e037883a 	mov	sp,fp
 8012ea4:	dfc00117 	ldw	ra,4(sp)
 8012ea8:	df000017 	ldw	fp,0(sp)
 8012eac:	dec00204 	addi	sp,sp,8
 8012eb0:	f800283a 	ret

08012eb4 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 8012eb4:	defffc04 	addi	sp,sp,-16
 8012eb8:	dfc00315 	stw	ra,12(sp)
 8012ebc:	df000215 	stw	fp,8(sp)
 8012ec0:	df000204 	addi	fp,sp,8
 8012ec4:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 8012ec8:	e0bfff17 	ldw	r2,-4(fp)
 8012ecc:	10003526 	beq	r2,zero,8012fa4 <altera_avalon_mailbox_close+0xf0>
 8012ed0:	e0bfff17 	ldw	r2,-4(fp)
 8012ed4:	10800b17 	ldw	r2,44(r2)
 8012ed8:	10bfffe0 	cmpeqi	r2,r2,-1
 8012edc:	1000311e 	bne	r2,zero,8012fa4 <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 8012ee0:	e0bfff17 	ldw	r2,-4(fp)
 8012ee4:	10800f17 	ldw	r2,60(r2)
 8012ee8:	10000e1e 	bne	r2,zero,8012f24 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8012eec:	e0bfff17 	ldw	r2,-4(fp)
 8012ef0:	10800a17 	ldw	r2,40(r2)
 8012ef4:	10800304 	addi	r2,r2,12
 8012ef8:	10800037 	ldwio	r2,0(r2)
 8012efc:	1007883a 	mov	r3,r2
 8012f00:	00bfff44 	movi	r2,-3
 8012f04:	1884703a 	and	r2,r3,r2
 8012f08:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012f0c:	e0bfff17 	ldw	r2,-4(fp)
 8012f10:	10800a17 	ldw	r2,40(r2)
 8012f14:	10800304 	addi	r2,r2,12
 8012f18:	1007883a 	mov	r3,r2
 8012f1c:	e0bffe17 	ldw	r2,-8(fp)
 8012f20:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 8012f24:	e0bfff17 	ldw	r2,-4(fp)
 8012f28:	10800f17 	ldw	r2,60(r2)
 8012f2c:	10800058 	cmpnei	r2,r2,1
 8012f30:	10000e1e 	bne	r2,zero,8012f6c <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8012f34:	e0bfff17 	ldw	r2,-4(fp)
 8012f38:	10800a17 	ldw	r2,40(r2)
 8012f3c:	10800304 	addi	r2,r2,12
 8012f40:	10800037 	ldwio	r2,0(r2)
 8012f44:	1007883a 	mov	r3,r2
 8012f48:	00bfff84 	movi	r2,-2
 8012f4c:	1884703a 	and	r2,r3,r2
 8012f50:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8012f54:	e0bfff17 	ldw	r2,-4(fp)
 8012f58:	10800a17 	ldw	r2,40(r2)
 8012f5c:	10800304 	addi	r2,r2,12
 8012f60:	1007883a 	mov	r3,r2
 8012f64:	e0bffe17 	ldw	r2,-8(fp)
 8012f68:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 8012f6c:	e0bfff17 	ldw	r2,-4(fp)
 8012f70:	10800b17 	ldw	r2,44(r2)
 8012f74:	10bfffe0 	cmpeqi	r2,r2,-1
 8012f78:	1000061e 	bne	r2,zero,8012f94 <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
 8012f7c:	e0bfff17 	ldw	r2,-4(fp)
 8012f80:	10800b17 	ldw	r2,44(r2)
 8012f84:	000d883a 	mov	r6,zero
 8012f88:	e17fff17 	ldw	r5,-4(fp)
 8012f8c:	1009883a 	mov	r4,r2
 8012f90:	8014aa00 	call	8014aa0 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 8012f94:	e0bfff17 	ldw	r2,-4(fp)
 8012f98:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 8012f9c:	e0bfff17 	ldw	r2,-4(fp)
 8012fa0:	10000e15 	stw	zero,56(r2)
    }
}
 8012fa4:	0001883a 	nop
 8012fa8:	e037883a 	mov	sp,fp
 8012fac:	dfc00117 	ldw	ra,4(sp)
 8012fb0:	df000017 	ldw	fp,0(sp)
 8012fb4:	dec00204 	addi	sp,sp,8
 8012fb8:	f800283a 	ret

08012fbc <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 8012fbc:	defffd04 	addi	sp,sp,-12
 8012fc0:	df000215 	stw	fp,8(sp)
 8012fc4:	df000204 	addi	fp,sp,8
 8012fc8:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 8012fcc:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 8012fd0:	e0bfff17 	ldw	r2,-4(fp)
 8012fd4:	10800a17 	ldw	r2,40(r2)
 8012fd8:	10800204 	addi	r2,r2,8
 8012fdc:	10800037 	ldwio	r2,0(r2)
 8012fe0:	108000cc 	andi	r2,r2,3
 8012fe4:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 8012fe8:	e0bfff17 	ldw	r2,-4(fp)
 8012fec:	10800f17 	ldw	r2,60(r2)
 8012ff0:	1000041e 	bne	r2,zero,8013004 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8012ff4:	e0bffe17 	ldw	r2,-8(fp)
 8012ff8:	1080008c 	andi	r2,r2,2
 8012ffc:	1004d07a 	srli	r2,r2,1
 8013000:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 8013004:	e0bfff17 	ldw	r2,-4(fp)
 8013008:	10800f17 	ldw	r2,60(r2)
 801300c:	10800058 	cmpnei	r2,r2,1
 8013010:	1000031e 	bne	r2,zero,8013020 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 8013014:	e0bffe17 	ldw	r2,-8(fp)
 8013018:	1080004c 	andi	r2,r2,1
 801301c:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 8013020:	e0bffe17 	ldw	r2,-8(fp)
}
 8013024:	e037883a 	mov	sp,fp
 8013028:	df000017 	ldw	fp,0(sp)
 801302c:	dec00104 	addi	sp,sp,4
 8013030:	f800283a 	ret

08013034 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 8013034:	defff704 	addi	sp,sp,-36
 8013038:	dfc00815 	stw	ra,32(sp)
 801303c:	df000715 	stw	fp,28(sp)
 8013040:	df000704 	addi	fp,sp,28
 8013044:	e13ffc15 	stw	r4,-16(fp)
 8013048:	e17ffd15 	stw	r5,-12(fp)
 801304c:	e1bffe15 	stw	r6,-8(fp)
 8013050:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 8013054:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8013058:	e0bffc17 	ldw	r2,-16(fp)
 801305c:	10801103 	ldbu	r2,68(r2)
 8013060:	10803fcc 	andi	r2,r2,255
 8013064:	1000061e 	bne	r2,zero,8013080 <altera_avalon_mailbox_send+0x4c>
 8013068:	e0bffc17 	ldw	r2,-16(fp)
 801306c:	10800a17 	ldw	r2,40(r2)
 8013070:	10800204 	addi	r2,r2,8
 8013074:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 8013078:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 801307c:	10000226 	beq	r2,zero,8013088 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 8013080:	00bfffc4 	movi	r2,-1
 8013084:	00003a06 	br	8013170 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 8013088:	e0bffc17 	ldw	r2,-16(fp)
 801308c:	e0fffd17 	ldw	r3,-12(fp)
 8013090:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 8013094:	e0bffc17 	ldw	r2,-16(fp)
 8013098:	00c00044 	movi	r3,1
 801309c:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 80130a0:	e0bffc17 	ldw	r2,-16(fp)
 80130a4:	10800b17 	ldw	r2,44(r2)
 80130a8:	10bfffe0 	cmpeqi	r2,r2,-1
 80130ac:	1000031e 	bne	r2,zero,80130bc <altera_avalon_mailbox_send+0x88>
 80130b0:	e0bfff17 	ldw	r2,-4(fp)
 80130b4:	10800058 	cmpnei	r2,r2,1
 80130b8:	1000201e 	bne	r2,zero,801313c <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 80130bc:	e0bffe17 	ldw	r2,-8(fp)
 80130c0:	1000061e 	bne	r2,zero,80130dc <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 80130c4:	e13ffc17 	ldw	r4,-16(fp)
 80130c8:	8012fbc0 	call	8012fbc <altera_avalon_mailbox_status>
 80130cc:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 80130d0:	e0bffb17 	ldw	r2,-20(fp)
 80130d4:	103ffb1e 	bne	r2,zero,80130c4 <__alt_data_end+0xfc0130c4>
 80130d8:	00000e06 	br	8013114 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 80130dc:	e13ffc17 	ldw	r4,-16(fp)
 80130e0:	8012fbc0 	call	8012fbc <altera_avalon_mailbox_status>
 80130e4:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 80130e8:	e0bffe17 	ldw	r2,-8(fp)
 80130ec:	10bfffc4 	addi	r2,r2,-1
 80130f0:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 80130f4:	e0bffb17 	ldw	r2,-20(fp)
 80130f8:	10000226 	beq	r2,zero,8013104 <altera_avalon_mailbox_send+0xd0>
 80130fc:	e0bffe17 	ldw	r2,-8(fp)
 8013100:	103ff61e 	bne	r2,zero,80130dc <__alt_data_end+0xfc0130dc>
            if (timeout == 0)
 8013104:	e0bffe17 	ldw	r2,-8(fp)
 8013108:	1000021e 	bne	r2,zero,8013114 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 801310c:	00bff084 	movi	r2,-62
 8013110:	00001706 	br	8013170 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 8013114:	e17ffd17 	ldw	r5,-12(fp)
 8013118:	e13ffc17 	ldw	r4,-16(fp)
 801311c:	8012a180 	call	8012a18 <altera_avalon_mailbox_post>
 8013120:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8013124:	e0bffc17 	ldw	r2,-16(fp)
 8013128:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 801312c:	e0bffc17 	ldw	r2,-16(fp)
 8013130:	10001105 	stb	zero,68(r2)
        return status;
 8013134:	e0bff917 	ldw	r2,-28(fp)
 8013138:	00000d06 	br	8013170 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 801313c:	e0bffc17 	ldw	r2,-16(fp)
 8013140:	10800a17 	ldw	r2,40(r2)
 8013144:	10800304 	addi	r2,r2,12
 8013148:	10800037 	ldwio	r2,0(r2)
 801314c:	10800094 	ori	r2,r2,2
 8013150:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8013154:	e0bffc17 	ldw	r2,-16(fp)
 8013158:	10800a17 	ldw	r2,40(r2)
 801315c:	10800304 	addi	r2,r2,12
 8013160:	1007883a 	mov	r3,r2
 8013164:	e0bffa17 	ldw	r2,-24(fp)
 8013168:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 801316c:	0005883a 	mov	r2,zero
}
 8013170:	e037883a 	mov	sp,fp
 8013174:	dfc00117 	ldw	ra,4(sp)
 8013178:	df000017 	ldw	fp,0(sp)
 801317c:	dec00204 	addi	sp,sp,8
 8013180:	f800283a 	ret

08013184 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 8013184:	defff904 	addi	sp,sp,-28
 8013188:	dfc00615 	stw	ra,24(sp)
 801318c:	df000515 	stw	fp,20(sp)
 8013190:	df000504 	addi	fp,sp,20
 8013194:	e13ffd15 	stw	r4,-12(fp)
 8013198:	e17ffe15 	stw	r5,-8(fp)
 801319c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 80131a0:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 80131a4:	e0bffd17 	ldw	r2,-12(fp)
 80131a8:	10003a26 	beq	r2,zero,8013294 <altera_avalon_mailbox_retrieve_poll+0x110>
 80131ac:	e0bffe17 	ldw	r2,-8(fp)
 80131b0:	10003826 	beq	r2,zero,8013294 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 80131b4:	e0bffd17 	ldw	r2,-12(fp)
 80131b8:	10800a17 	ldw	r2,40(r2)
 80131bc:	10800304 	addi	r2,r2,12
 80131c0:	10800037 	ldwio	r2,0(r2)
 80131c4:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 80131c8:	e0bffd17 	ldw	r2,-12(fp)
 80131cc:	10800a17 	ldw	r2,40(r2)
 80131d0:	10800304 	addi	r2,r2,12
 80131d4:	1009883a 	mov	r4,r2
 80131d8:	e0fffc17 	ldw	r3,-16(fp)
 80131dc:	00bfff84 	movi	r2,-2
 80131e0:	1884703a 	and	r2,r3,r2
 80131e4:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 80131e8:	e0bfff17 	ldw	r2,-4(fp)
 80131ec:	1000061e 	bne	r2,zero,8013208 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 80131f0:	e13ffd17 	ldw	r4,-12(fp)
 80131f4:	8012fbc0 	call	8012fbc <altera_avalon_mailbox_status>
 80131f8:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 80131fc:	e0bffb17 	ldw	r2,-20(fp)
 8013200:	103ffb26 	beq	r2,zero,80131f0 <__alt_data_end+0xfc0131f0>
 8013204:	00000a06 	br	8013230 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 8013208:	e13ffd17 	ldw	r4,-12(fp)
 801320c:	8012fbc0 	call	8012fbc <altera_avalon_mailbox_status>
 8013210:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 8013214:	e0bfff17 	ldw	r2,-4(fp)
 8013218:	10bfffc4 	addi	r2,r2,-1
 801321c:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 8013220:	e0bffb17 	ldw	r2,-20(fp)
 8013224:	1000021e 	bne	r2,zero,8013230 <altera_avalon_mailbox_retrieve_poll+0xac>
 8013228:	e0bfff17 	ldw	r2,-4(fp)
 801322c:	103ff61e 	bne	r2,zero,8013208 <__alt_data_end+0xfc013208>
        }

        /* if timeout, status remain 0 */
        if (status)
 8013230:	e0bffb17 	ldw	r2,-20(fp)
 8013234:	10000d26 	beq	r2,zero,801326c <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8013238:	e0bffe17 	ldw	r2,-8(fp)
 801323c:	10800104 	addi	r2,r2,4
 8013240:	e0fffd17 	ldw	r3,-12(fp)
 8013244:	18c00a17 	ldw	r3,40(r3)
 8013248:	18c00104 	addi	r3,r3,4
 801324c:	18c00037 	ldwio	r3,0(r3)
 8013250:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8013254:	e0bffd17 	ldw	r2,-12(fp)
 8013258:	10800a17 	ldw	r2,40(r2)
 801325c:	10800037 	ldwio	r2,0(r2)
 8013260:	1007883a 	mov	r3,r2
 8013264:	e0bffe17 	ldw	r2,-8(fp)
 8013268:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 801326c:	e0bffd17 	ldw	r2,-12(fp)
 8013270:	10800a17 	ldw	r2,40(r2)
 8013274:	10800304 	addi	r2,r2,12
 8013278:	1007883a 	mov	r3,r2
 801327c:	e0bffc17 	ldw	r2,-16(fp)
 8013280:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 8013284:	e0bffb17 	ldw	r2,-20(fp)
 8013288:	10000226 	beq	r2,zero,8013294 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 801328c:	0005883a 	mov	r2,zero
 8013290:	00000606 	br	80132ac <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 8013294:	e0bffe17 	ldw	r2,-8(fp)
 8013298:	10800104 	addi	r2,r2,4
 801329c:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 80132a0:	e0bffe17 	ldw	r2,-8(fp)
 80132a4:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 80132a8:	00bffa84 	movi	r2,-22
}
 80132ac:	e037883a 	mov	sp,fp
 80132b0:	dfc00117 	ldw	ra,4(sp)
 80132b4:	df000017 	ldw	fp,0(sp)
 80132b8:	dec00204 	addi	sp,sp,8
 80132bc:	f800283a 	ret

080132c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80132c0:	defffe04 	addi	sp,sp,-8
 80132c4:	dfc00115 	stw	ra,4(sp)
 80132c8:	df000015 	stw	fp,0(sp)
 80132cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80132d0:	d0a00c17 	ldw	r2,-32720(gp)
 80132d4:	10000326 	beq	r2,zero,80132e4 <alt_get_errno+0x24>
 80132d8:	d0a00c17 	ldw	r2,-32720(gp)
 80132dc:	103ee83a 	callr	r2
 80132e0:	00000106 	br	80132e8 <alt_get_errno+0x28>
 80132e4:	d0a71e04 	addi	r2,gp,-25480
}
 80132e8:	e037883a 	mov	sp,fp
 80132ec:	dfc00117 	ldw	ra,4(sp)
 80132f0:	df000017 	ldw	fp,0(sp)
 80132f4:	dec00204 	addi	sp,sp,8
 80132f8:	f800283a 	ret

080132fc <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 80132fc:	defff904 	addi	sp,sp,-28
 8013300:	df000615 	stw	fp,24(sp)
 8013304:	df000604 	addi	fp,sp,24
 8013308:	e13ffe15 	stw	r4,-8(fp)
 801330c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 8013310:	00bfffc4 	movi	r2,-1
 8013314:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 8013318:	0005317a 	rdctl	r2,cpuid
 801331c:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 8013320:	e0bffb17 	ldw	r2,-20(fp)
 8013324:	1006943a 	slli	r3,r2,16
 8013328:	e0bfff17 	ldw	r2,-4(fp)
 801332c:	1884b03a 	or	r2,r3,r2
 8013330:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 8013334:	e0bffe17 	ldw	r2,-8(fp)
 8013338:	10800317 	ldw	r2,12(r2)
 801333c:	e0fffc17 	ldw	r3,-16(fp)
 8013340:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8013344:	e0bffe17 	ldw	r2,-8(fp)
 8013348:	10800317 	ldw	r2,12(r2)
 801334c:	10800037 	ldwio	r2,0(r2)
 8013350:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 8013354:	e0fffd17 	ldw	r3,-12(fp)
 8013358:	e0bffc17 	ldw	r2,-16(fp)
 801335c:	1880011e 	bne	r3,r2,8013364 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 8013360:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 8013364:	e0bffa17 	ldw	r2,-24(fp)
}
 8013368:	e037883a 	mov	sp,fp
 801336c:	df000017 	ldw	fp,0(sp)
 8013370:	dec00104 	addi	sp,sp,4
 8013374:	f800283a 	ret

08013378 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8013378:	defffc04 	addi	sp,sp,-16
 801337c:	dfc00315 	stw	ra,12(sp)
 8013380:	df000215 	stw	fp,8(sp)
 8013384:	df000204 	addi	fp,sp,8
 8013388:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 801338c:	d1601004 	addi	r5,gp,-32704
 8013390:	e13fff17 	ldw	r4,-4(fp)
 8013394:	801489c0 	call	801489c <alt_find_dev>
 8013398:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 801339c:	e0bffe17 	ldw	r2,-8(fp)
 80133a0:	1000041e 	bne	r2,zero,80133b4 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 80133a4:	80132c00 	call	80132c0 <alt_get_errno>
 80133a8:	1007883a 	mov	r3,r2
 80133ac:	008004c4 	movi	r2,19
 80133b0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 80133b4:	e0bffe17 	ldw	r2,-8(fp)
}
 80133b8:	e037883a 	mov	sp,fp
 80133bc:	dfc00117 	ldw	ra,4(sp)
 80133c0:	df000017 	ldw	fp,0(sp)
 80133c4:	dec00204 	addi	sp,sp,8
 80133c8:	f800283a 	ret

080133cc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 80133cc:	defffe04 	addi	sp,sp,-8
 80133d0:	df000115 	stw	fp,4(sp)
 80133d4:	df000104 	addi	fp,sp,4
 80133d8:	e13fff15 	stw	r4,-4(fp)
  return;
 80133dc:	0001883a 	nop
}
 80133e0:	e037883a 	mov	sp,fp
 80133e4:	df000017 	ldw	fp,0(sp)
 80133e8:	dec00104 	addi	sp,sp,4
 80133ec:	f800283a 	ret

080133f0 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 80133f0:	defffc04 	addi	sp,sp,-16
 80133f4:	dfc00315 	stw	ra,12(sp)
 80133f8:	df000215 	stw	fp,8(sp)
 80133fc:	df000204 	addi	fp,sp,8
 8013400:	e13ffe15 	stw	r4,-8(fp)
 8013404:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 8013408:	0001883a 	nop
 801340c:	e17fff17 	ldw	r5,-4(fp)
 8013410:	e13ffe17 	ldw	r4,-8(fp)
 8013414:	80132fc0 	call	80132fc <alt_mutex_trylock>
 8013418:	103ffc1e 	bne	r2,zero,801340c <__alt_data_end+0xfc01340c>
}
 801341c:	0001883a 	nop
 8013420:	e037883a 	mov	sp,fp
 8013424:	dfc00117 	ldw	ra,4(sp)
 8013428:	df000017 	ldw	fp,0(sp)
 801342c:	dec00204 	addi	sp,sp,8
 8013430:	f800283a 	ret

08013434 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8013434:	defffa04 	addi	sp,sp,-24
 8013438:	dfc00515 	stw	ra,20(sp)
 801343c:	df000415 	stw	fp,16(sp)
 8013440:	df000404 	addi	fp,sp,16
 8013444:	e13ffd15 	stw	r4,-12(fp)
 8013448:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 801344c:	e17ffe17 	ldw	r5,-8(fp)
 8013450:	e13ffd17 	ldw	r4,-12(fp)
 8013454:	80132fc0 	call	80132fc <alt_mutex_trylock>
 8013458:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 801345c:	e0bffc17 	ldw	r2,-16(fp)
}
 8013460:	e037883a 	mov	sp,fp
 8013464:	dfc00117 	ldw	ra,4(sp)
 8013468:	df000017 	ldw	fp,0(sp)
 801346c:	dec00204 	addi	sp,sp,8
 8013470:	f800283a 	ret

08013474 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 8013474:	defffd04 	addi	sp,sp,-12
 8013478:	df000215 	stw	fp,8(sp)
 801347c:	df000204 	addi	fp,sp,8
 8013480:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 8013484:	0005317a 	rdctl	r2,cpuid
 8013488:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 801348c:	e0bfff17 	ldw	r2,-4(fp)
 8013490:	10800317 	ldw	r2,12(r2)
 8013494:	10800104 	addi	r2,r2,4
 8013498:	00c00044 	movi	r3,1
 801349c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 80134a0:	e0bfff17 	ldw	r2,-4(fp)
 80134a4:	10800317 	ldw	r2,12(r2)
 80134a8:	e0fffe17 	ldw	r3,-8(fp)
 80134ac:	1806943a 	slli	r3,r3,16
 80134b0:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 80134b4:	0001883a 	nop
 80134b8:	e037883a 	mov	sp,fp
 80134bc:	df000017 	ldw	fp,0(sp)
 80134c0:	dec00104 	addi	sp,sp,4
 80134c4:	f800283a 	ret

080134c8 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 80134c8:	defff904 	addi	sp,sp,-28
 80134cc:	df000615 	stw	fp,24(sp)
 80134d0:	df000604 	addi	fp,sp,24
 80134d4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 80134d8:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 80134dc:	0005317a 	rdctl	r2,cpuid
 80134e0:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 80134e4:	e0bfff17 	ldw	r2,-4(fp)
 80134e8:	10800317 	ldw	r2,12(r2)
 80134ec:	10800037 	ldwio	r2,0(r2)
 80134f0:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 80134f4:	e0bffc17 	ldw	r2,-16(fp)
 80134f8:	1004d43a 	srli	r2,r2,16
 80134fc:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 8013500:	e0fffd17 	ldw	r3,-12(fp)
 8013504:	e0bffb17 	ldw	r2,-20(fp)
 8013508:	1880071e 	bne	r3,r2,8013528 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 801350c:	e0bffc17 	ldw	r2,-16(fp)
 8013510:	10bfffcc 	andi	r2,r2,65535
 8013514:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8013518:	e0bffe17 	ldw	r2,-8(fp)
 801351c:	10000226 	beq	r2,zero,8013528 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 8013520:	00800044 	movi	r2,1
 8013524:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 8013528:	e0bffa17 	ldw	r2,-24(fp)
}
 801352c:	e037883a 	mov	sp,fp
 8013530:	df000017 	ldw	fp,0(sp)
 8013534:	dec00104 	addi	sp,sp,4
 8013538:	f800283a 	ret

0801353c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 801353c:	defffc04 	addi	sp,sp,-16
 8013540:	df000315 	stw	fp,12(sp)
 8013544:	df000304 	addi	fp,sp,12
 8013548:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 801354c:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 8013550:	e0bfff17 	ldw	r2,-4(fp)
 8013554:	10800317 	ldw	r2,12(r2)
 8013558:	10800104 	addi	r2,r2,4
 801355c:	10800037 	ldwio	r2,0(r2)
 8013560:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 8013564:	e0bffe17 	ldw	r2,-8(fp)
 8013568:	1080004c 	andi	r2,r2,1
 801356c:	10000226 	beq	r2,zero,8013578 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 8013570:	00800044 	movi	r2,1
 8013574:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 8013578:	e0bffd17 	ldw	r2,-12(fp)
}
 801357c:	e037883a 	mov	sp,fp
 8013580:	df000017 	ldw	fp,0(sp)
 8013584:	dec00104 	addi	sp,sp,4
 8013588:	f800283a 	ret

0801358c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 801358c:	defffc04 	addi	sp,sp,-16
 8013590:	dfc00315 	stw	ra,12(sp)
 8013594:	df000215 	stw	fp,8(sp)
 8013598:	df000204 	addi	fp,sp,8
 801359c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 80135a0:	d1600904 	addi	r5,gp,-32732
 80135a4:	e13fff17 	ldw	r4,-4(fp)
 80135a8:	801489c0 	call	801489c <alt_find_dev>
 80135ac:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 80135b0:	e0bffe17 	ldw	r2,-8(fp)
}
 80135b4:	e037883a 	mov	sp,fp
 80135b8:	dfc00117 	ldw	ra,4(sp)
 80135bc:	df000017 	ldw	fp,0(sp)
 80135c0:	dec00204 	addi	sp,sp,8
 80135c4:	f800283a 	ret

080135c8 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 80135c8:	defffd04 	addi	sp,sp,-12
 80135cc:	df000215 	stw	fp,8(sp)
 80135d0:	df000204 	addi	fp,sp,8
 80135d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 80135d8:	e0bfff17 	ldw	r2,-4(fp)
 80135dc:	10800a17 	ldw	r2,40(r2)
 80135e0:	10800037 	ldwio	r2,0(r2)
 80135e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 80135e8:	e0bffe17 	ldw	r2,-8(fp)
 80135ec:	10800054 	ori	r2,r2,1
 80135f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 80135f4:	e0bfff17 	ldw	r2,-4(fp)
 80135f8:	10800a17 	ldw	r2,40(r2)
 80135fc:	1007883a 	mov	r3,r2
 8013600:	e0bffe17 	ldw	r2,-8(fp)
 8013604:	18800035 	stwio	r2,0(r3)
}
 8013608:	0001883a 	nop
 801360c:	e037883a 	mov	sp,fp
 8013610:	df000017 	ldw	fp,0(sp)
 8013614:	dec00104 	addi	sp,sp,4
 8013618:	f800283a 	ret

0801361c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 801361c:	defffd04 	addi	sp,sp,-12
 8013620:	df000215 	stw	fp,8(sp)
 8013624:	df000204 	addi	fp,sp,8
 8013628:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 801362c:	e0bfff17 	ldw	r2,-4(fp)
 8013630:	10800a17 	ldw	r2,40(r2)
 8013634:	10800037 	ldwio	r2,0(r2)
 8013638:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 801363c:	e0fffe17 	ldw	r3,-8(fp)
 8013640:	00bfff84 	movi	r2,-2
 8013644:	1884703a 	and	r2,r3,r2
 8013648:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 801364c:	e0bfff17 	ldw	r2,-4(fp)
 8013650:	10800a17 	ldw	r2,40(r2)
 8013654:	1007883a 	mov	r3,r2
 8013658:	e0bffe17 	ldw	r2,-8(fp)
 801365c:	18800035 	stwio	r2,0(r3)
}
 8013660:	0001883a 	nop
 8013664:	e037883a 	mov	sp,fp
 8013668:	df000017 	ldw	fp,0(sp)
 801366c:	dec00104 	addi	sp,sp,4
 8013670:	f800283a 	ret

08013674 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 8013674:	defffd04 	addi	sp,sp,-12
 8013678:	df000215 	stw	fp,8(sp)
 801367c:	df000204 	addi	fp,sp,8
 8013680:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8013684:	e0bfff17 	ldw	r2,-4(fp)
 8013688:	10800a17 	ldw	r2,40(r2)
 801368c:	10800037 	ldwio	r2,0(r2)
 8013690:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 8013694:	e0bffe17 	ldw	r2,-8(fp)
 8013698:	10800094 	ori	r2,r2,2
 801369c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 80136a0:	e0bfff17 	ldw	r2,-4(fp)
 80136a4:	10800a17 	ldw	r2,40(r2)
 80136a8:	1007883a 	mov	r3,r2
 80136ac:	e0bffe17 	ldw	r2,-8(fp)
 80136b0:	18800035 	stwio	r2,0(r3)
}
 80136b4:	0001883a 	nop
 80136b8:	e037883a 	mov	sp,fp
 80136bc:	df000017 	ldw	fp,0(sp)
 80136c0:	dec00104 	addi	sp,sp,4
 80136c4:	f800283a 	ret

080136c8 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 80136c8:	defffd04 	addi	sp,sp,-12
 80136cc:	df000215 	stw	fp,8(sp)
 80136d0:	df000204 	addi	fp,sp,8
 80136d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 80136d8:	e0bfff17 	ldw	r2,-4(fp)
 80136dc:	10800a17 	ldw	r2,40(r2)
 80136e0:	10800037 	ldwio	r2,0(r2)
 80136e4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 80136e8:	e0fffe17 	ldw	r3,-8(fp)
 80136ec:	00bfff44 	movi	r2,-3
 80136f0:	1884703a 	and	r2,r3,r2
 80136f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 80136f8:	e0bfff17 	ldw	r2,-4(fp)
 80136fc:	10800a17 	ldw	r2,40(r2)
 8013700:	1007883a 	mov	r3,r2
 8013704:	e0bffe17 	ldw	r2,-8(fp)
 8013708:	18800035 	stwio	r2,0(r3)
}
 801370c:	0001883a 	nop
 8013710:	e037883a 	mov	sp,fp
 8013714:	df000017 	ldw	fp,0(sp)
 8013718:	dec00104 	addi	sp,sp,4
 801371c:	f800283a 	ret

08013720 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 8013720:	defffd04 	addi	sp,sp,-12
 8013724:	df000215 	stw	fp,8(sp)
 8013728:	df000204 	addi	fp,sp,8
 801372c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8013730:	e0bfff17 	ldw	r2,-4(fp)
 8013734:	10800a17 	ldw	r2,40(r2)
 8013738:	10800037 	ldwio	r2,0(r2)
 801373c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 8013740:	e0bffe17 	ldw	r2,-8(fp)
 8013744:	1080400c 	andi	r2,r2,256
 8013748:	1004c03a 	cmpne	r2,r2,zero
 801374c:	10803fcc 	andi	r2,r2,255
}
 8013750:	e037883a 	mov	sp,fp
 8013754:	df000017 	ldw	fp,0(sp)
 8013758:	dec00104 	addi	sp,sp,4
 801375c:	f800283a 	ret

08013760 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 8013760:	defffd04 	addi	sp,sp,-12
 8013764:	df000215 	stw	fp,8(sp)
 8013768:	df000204 	addi	fp,sp,8
 801376c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8013770:	e0bfff17 	ldw	r2,-4(fp)
 8013774:	10800a17 	ldw	r2,40(r2)
 8013778:	10800037 	ldwio	r2,0(r2)
 801377c:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 8013780:	e0bffe17 	ldw	r2,-8(fp)
 8013784:	1080800c 	andi	r2,r2,512
 8013788:	1004c03a 	cmpne	r2,r2,zero
 801378c:	10803fcc 	andi	r2,r2,255
}
 8013790:	e037883a 	mov	sp,fp
 8013794:	df000017 	ldw	fp,0(sp)
 8013798:	dec00104 	addi	sp,sp,4
 801379c:	f800283a 	ret

080137a0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 80137a0:	defffd04 	addi	sp,sp,-12
 80137a4:	df000215 	stw	fp,8(sp)
 80137a8:	df000204 	addi	fp,sp,8
 80137ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 80137b0:	e0bfff17 	ldw	r2,-4(fp)
 80137b4:	10800a17 	ldw	r2,40(r2)
 80137b8:	10800037 	ldwio	r2,0(r2)
 80137bc:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 80137c0:	e0bffe17 	ldw	r2,-8(fp)
 80137c4:	10800114 	ori	r2,r2,4
 80137c8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 80137cc:	e0bffe17 	ldw	r2,-8(fp)
 80137d0:	10800214 	ori	r2,r2,8
 80137d4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 80137d8:	e0bfff17 	ldw	r2,-4(fp)
 80137dc:	10800a17 	ldw	r2,40(r2)
 80137e0:	1007883a 	mov	r3,r2
 80137e4:	e0bffe17 	ldw	r2,-8(fp)
 80137e8:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 80137ec:	e0fffe17 	ldw	r3,-8(fp)
 80137f0:	00bffec4 	movi	r2,-5
 80137f4:	1884703a 	and	r2,r3,r2
 80137f8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 80137fc:	e0fffe17 	ldw	r3,-8(fp)
 8013800:	00bffdc4 	movi	r2,-9
 8013804:	1884703a 	and	r2,r3,r2
 8013808:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 801380c:	e0bfff17 	ldw	r2,-4(fp)
 8013810:	10800a17 	ldw	r2,40(r2)
 8013814:	1007883a 	mov	r3,r2
 8013818:	e0bffe17 	ldw	r2,-8(fp)
 801381c:	18800035 	stwio	r2,0(r3)
}
 8013820:	0001883a 	nop
 8013824:	e037883a 	mov	sp,fp
 8013828:	df000017 	ldw	fp,0(sp)
 801382c:	dec00104 	addi	sp,sp,4
 8013830:	f800283a 	ret

08013834 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 8013834:	defffc04 	addi	sp,sp,-16
 8013838:	df000315 	stw	fp,12(sp)
 801383c:	df000304 	addi	fp,sp,12
 8013840:	e13ffe15 	stw	r4,-8(fp)
 8013844:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8013848:	e0bffe17 	ldw	r2,-8(fp)
 801384c:	10800a17 	ldw	r2,40(r2)
 8013850:	10800104 	addi	r2,r2,4
 8013854:	10800037 	ldwio	r2,0(r2)
 8013858:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 801385c:	e0bfff17 	ldw	r2,-4(fp)
 8013860:	1000041e 	bne	r2,zero,8013874 <alt_up_audio_read_fifo_avail+0x40>
 8013864:	e0bffd17 	ldw	r2,-12(fp)
 8013868:	10bfc00c 	andi	r2,r2,65280
 801386c:	1004d23a 	srli	r2,r2,8
 8013870:	00000206 	br	801387c <alt_up_audio_read_fifo_avail+0x48>
 8013874:	e0bffd17 	ldw	r2,-12(fp)
 8013878:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 801387c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 8013880:	e0bffd17 	ldw	r2,-12(fp)
}
 8013884:	e037883a 	mov	sp,fp
 8013888:	df000017 	ldw	fp,0(sp)
 801388c:	dec00104 	addi	sp,sp,4
 8013890:	f800283a 	ret

08013894 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8013894:	defffa04 	addi	sp,sp,-24
 8013898:	dfc00515 	stw	ra,20(sp)
 801389c:	df000415 	stw	fp,16(sp)
 80138a0:	df000404 	addi	fp,sp,16
 80138a4:	e13ffd15 	stw	r4,-12(fp)
 80138a8:	e17ffe15 	stw	r5,-8(fp)
 80138ac:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 80138b0:	01400044 	movi	r5,1
 80138b4:	e13ffd17 	ldw	r4,-12(fp)
 80138b8:	80138340 	call	8013834 <alt_up_audio_read_fifo_avail>
 80138bc:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 80138c0:	e0bffc17 	ldw	r2,-16(fp)
 80138c4:	10801868 	cmpgeui	r2,r2,97
 80138c8:	1000021e 	bne	r2,zero,80138d4 <alt_up_audio_record_r+0x40>
		return 0;
 80138cc:	0005883a 	mov	r2,zero
 80138d0:	00000506 	br	80138e8 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 80138d4:	01c00044 	movi	r7,1
 80138d8:	e1bfff17 	ldw	r6,-4(fp)
 80138dc:	e17ffe17 	ldw	r5,-8(fp)
 80138e0:	e13ffd17 	ldw	r4,-12(fp)
 80138e4:	8013a940 	call	8013a94 <alt_up_audio_read_fifo>
}
 80138e8:	e037883a 	mov	sp,fp
 80138ec:	dfc00117 	ldw	ra,4(sp)
 80138f0:	df000017 	ldw	fp,0(sp)
 80138f4:	dec00204 	addi	sp,sp,8
 80138f8:	f800283a 	ret

080138fc <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 80138fc:	defffa04 	addi	sp,sp,-24
 8013900:	dfc00515 	stw	ra,20(sp)
 8013904:	df000415 	stw	fp,16(sp)
 8013908:	df000404 	addi	fp,sp,16
 801390c:	e13ffd15 	stw	r4,-12(fp)
 8013910:	e17ffe15 	stw	r5,-8(fp)
 8013914:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 8013918:	000b883a 	mov	r5,zero
 801391c:	e13ffd17 	ldw	r4,-12(fp)
 8013920:	80138340 	call	8013834 <alt_up_audio_read_fifo_avail>
 8013924:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 8013928:	e0bffc17 	ldw	r2,-16(fp)
 801392c:	10801868 	cmpgeui	r2,r2,97
 8013930:	1000021e 	bne	r2,zero,801393c <alt_up_audio_record_l+0x40>
		return 0;
 8013934:	0005883a 	mov	r2,zero
 8013938:	00000506 	br	8013950 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 801393c:	000f883a 	mov	r7,zero
 8013940:	e1bfff17 	ldw	r6,-4(fp)
 8013944:	e17ffe17 	ldw	r5,-8(fp)
 8013948:	e13ffd17 	ldw	r4,-12(fp)
 801394c:	8013a940 	call	8013a94 <alt_up_audio_read_fifo>
}
 8013950:	e037883a 	mov	sp,fp
 8013954:	dfc00117 	ldw	ra,4(sp)
 8013958:	df000017 	ldw	fp,0(sp)
 801395c:	dec00204 	addi	sp,sp,8
 8013960:	f800283a 	ret

08013964 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 8013964:	defffc04 	addi	sp,sp,-16
 8013968:	df000315 	stw	fp,12(sp)
 801396c:	df000304 	addi	fp,sp,12
 8013970:	e13ffe15 	stw	r4,-8(fp)
 8013974:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8013978:	e0bffe17 	ldw	r2,-8(fp)
 801397c:	10800a17 	ldw	r2,40(r2)
 8013980:	10800104 	addi	r2,r2,4
 8013984:	10800037 	ldwio	r2,0(r2)
 8013988:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 801398c:	e0bfff17 	ldw	r2,-4(fp)
 8013990:	1000031e 	bne	r2,zero,80139a0 <alt_up_audio_write_fifo_space+0x3c>
 8013994:	e0bffd17 	ldw	r2,-12(fp)
 8013998:	1004d63a 	srli	r2,r2,24
 801399c:	00000306 	br	80139ac <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 80139a0:	e0bffd17 	ldw	r2,-12(fp)
 80139a4:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 80139a8:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 80139ac:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 80139b0:	e0bffd17 	ldw	r2,-12(fp)
}
 80139b4:	e037883a 	mov	sp,fp
 80139b8:	df000017 	ldw	fp,0(sp)
 80139bc:	dec00104 	addi	sp,sp,4
 80139c0:	f800283a 	ret

080139c4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 80139c4:	defffa04 	addi	sp,sp,-24
 80139c8:	dfc00515 	stw	ra,20(sp)
 80139cc:	df000415 	stw	fp,16(sp)
 80139d0:	df000404 	addi	fp,sp,16
 80139d4:	e13ffd15 	stw	r4,-12(fp)
 80139d8:	e17ffe15 	stw	r5,-8(fp)
 80139dc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 80139e0:	01400044 	movi	r5,1
 80139e4:	e13ffd17 	ldw	r4,-12(fp)
 80139e8:	80139640 	call	8013964 <alt_up_audio_write_fifo_space>
 80139ec:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 80139f0:	e0bffc17 	ldw	r2,-16(fp)
 80139f4:	10801868 	cmpgeui	r2,r2,97
 80139f8:	1000021e 	bne	r2,zero,8013a04 <alt_up_audio_play_r+0x40>
		return 0;
 80139fc:	0005883a 	mov	r2,zero
 8013a00:	00000506 	br	8013a18 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 8013a04:	01c00044 	movi	r7,1
 8013a08:	e1bfff17 	ldw	r6,-4(fp)
 8013a0c:	e17ffe17 	ldw	r5,-8(fp)
 8013a10:	e13ffd17 	ldw	r4,-12(fp)
 8013a14:	8013b740 	call	8013b74 <alt_up_audio_write_fifo>
}
 8013a18:	e037883a 	mov	sp,fp
 8013a1c:	dfc00117 	ldw	ra,4(sp)
 8013a20:	df000017 	ldw	fp,0(sp)
 8013a24:	dec00204 	addi	sp,sp,8
 8013a28:	f800283a 	ret

08013a2c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8013a2c:	defffa04 	addi	sp,sp,-24
 8013a30:	dfc00515 	stw	ra,20(sp)
 8013a34:	df000415 	stw	fp,16(sp)
 8013a38:	df000404 	addi	fp,sp,16
 8013a3c:	e13ffd15 	stw	r4,-12(fp)
 8013a40:	e17ffe15 	stw	r5,-8(fp)
 8013a44:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 8013a48:	000b883a 	mov	r5,zero
 8013a4c:	e13ffd17 	ldw	r4,-12(fp)
 8013a50:	80139640 	call	8013964 <alt_up_audio_write_fifo_space>
 8013a54:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 8013a58:	e0bffc17 	ldw	r2,-16(fp)
 8013a5c:	10801868 	cmpgeui	r2,r2,97
 8013a60:	1000021e 	bne	r2,zero,8013a6c <alt_up_audio_play_l+0x40>
		return 0;
 8013a64:	0005883a 	mov	r2,zero
 8013a68:	00000506 	br	8013a80 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 8013a6c:	000f883a 	mov	r7,zero
 8013a70:	e1bfff17 	ldw	r6,-4(fp)
 8013a74:	e17ffe17 	ldw	r5,-8(fp)
 8013a78:	e13ffd17 	ldw	r4,-12(fp)
 8013a7c:	8013b740 	call	8013b74 <alt_up_audio_write_fifo>
}
 8013a80:	e037883a 	mov	sp,fp
 8013a84:	dfc00117 	ldw	ra,4(sp)
 8013a88:	df000017 	ldw	fp,0(sp)
 8013a8c:	dec00204 	addi	sp,sp,8
 8013a90:	f800283a 	ret

08013a94 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 8013a94:	defff904 	addi	sp,sp,-28
 8013a98:	df000615 	stw	fp,24(sp)
 8013a9c:	df000604 	addi	fp,sp,24
 8013aa0:	e13ffc15 	stw	r4,-16(fp)
 8013aa4:	e17ffd15 	stw	r5,-12(fp)
 8013aa8:	e1bffe15 	stw	r6,-8(fp)
 8013aac:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 8013ab0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 8013ab4:	00002506 	br	8013b4c <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8013ab8:	e0bffc17 	ldw	r2,-16(fp)
 8013abc:	10800a17 	ldw	r2,40(r2)
 8013ac0:	10800104 	addi	r2,r2,4
 8013ac4:	10800037 	ldwio	r2,0(r2)
 8013ac8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 8013acc:	e0bfff17 	ldw	r2,-4(fp)
 8013ad0:	1000041e 	bne	r2,zero,8013ae4 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 8013ad4:	e0bffb17 	ldw	r2,-20(fp)
 8013ad8:	10bfc00c 	andi	r2,r2,65280
			:
 8013adc:	1004d23a 	srli	r2,r2,8
 8013ae0:	00000206 	br	8013aec <alt_up_audio_read_fifo+0x58>
 8013ae4:	e0bffb17 	ldw	r2,-20(fp)
 8013ae8:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013aec:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 8013af0:	e0bffb17 	ldw	r2,-20(fp)
 8013af4:	10001926 	beq	r2,zero,8013b5c <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013af8:	e0bffa17 	ldw	r2,-24(fp)
 8013afc:	1085883a 	add	r2,r2,r2
 8013b00:	1085883a 	add	r2,r2,r2
 8013b04:	1007883a 	mov	r3,r2
 8013b08:	e0bffd17 	ldw	r2,-12(fp)
 8013b0c:	10c5883a 	add	r2,r2,r3
 8013b10:	e0ffff17 	ldw	r3,-4(fp)
 8013b14:	1800051e 	bne	r3,zero,8013b2c <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 8013b18:	e0fffc17 	ldw	r3,-16(fp)
 8013b1c:	18c00a17 	ldw	r3,40(r3)
 8013b20:	18c00204 	addi	r3,r3,8
 8013b24:	18c00037 	ldwio	r3,0(r3)
 8013b28:	00000406 	br	8013b3c <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 8013b2c:	e0fffc17 	ldw	r3,-16(fp)
 8013b30:	18c00a17 	ldw	r3,40(r3)
 8013b34:	18c00304 	addi	r3,r3,12
 8013b38:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013b3c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 8013b40:	e0bffa17 	ldw	r2,-24(fp)
 8013b44:	10800044 	addi	r2,r2,1
 8013b48:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 8013b4c:	e0fffa17 	ldw	r3,-24(fp)
 8013b50:	e0bffe17 	ldw	r2,-8(fp)
 8013b54:	18bfd816 	blt	r3,r2,8013ab8 <__alt_data_end+0xfc013ab8>
 8013b58:	00000106 	br	8013b60 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 8013b5c:	0001883a 	nop
		}
	}
	return count;
 8013b60:	e0bffa17 	ldw	r2,-24(fp)
}
 8013b64:	e037883a 	mov	sp,fp
 8013b68:	df000017 	ldw	fp,0(sp)
 8013b6c:	dec00104 	addi	sp,sp,4
 8013b70:	f800283a 	ret

08013b74 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 8013b74:	defff904 	addi	sp,sp,-28
 8013b78:	df000615 	stw	fp,24(sp)
 8013b7c:	df000604 	addi	fp,sp,24
 8013b80:	e13ffc15 	stw	r4,-16(fp)
 8013b84:	e17ffd15 	stw	r5,-12(fp)
 8013b88:	e1bffe15 	stw	r6,-8(fp)
 8013b8c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 8013b90:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 8013b94:	00002f06 	br	8013c54 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8013b98:	e0bffc17 	ldw	r2,-16(fp)
 8013b9c:	10800a17 	ldw	r2,40(r2)
 8013ba0:	10800104 	addi	r2,r2,4
 8013ba4:	10800037 	ldwio	r2,0(r2)
 8013ba8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8013bac:	e0bfff17 	ldw	r2,-4(fp)
 8013bb0:	1000031e 	bne	r2,zero,8013bc0 <alt_up_audio_write_fifo+0x4c>
 8013bb4:	e0bffb17 	ldw	r2,-20(fp)
 8013bb8:	1004d63a 	srli	r2,r2,24
 8013bbc:	00000306 	br	8013bcc <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 8013bc0:	e0bffb17 	ldw	r2,-20(fp)
 8013bc4:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8013bc8:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 8013bcc:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 8013bd0:	e0bffb17 	ldw	r2,-20(fp)
 8013bd4:	10002326 	beq	r2,zero,8013c64 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 8013bd8:	e0bfff17 	ldw	r2,-4(fp)
 8013bdc:	10000f1e 	bne	r2,zero,8013c1c <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 8013be0:	e0bffc17 	ldw	r2,-16(fp)
 8013be4:	10800a17 	ldw	r2,40(r2)
 8013be8:	10800204 	addi	r2,r2,8
 8013bec:	1009883a 	mov	r4,r2
 8013bf0:	e0bffa17 	ldw	r2,-24(fp)
 8013bf4:	10c00044 	addi	r3,r2,1
 8013bf8:	e0fffa15 	stw	r3,-24(fp)
 8013bfc:	1085883a 	add	r2,r2,r2
 8013c00:	1085883a 	add	r2,r2,r2
 8013c04:	1007883a 	mov	r3,r2
 8013c08:	e0bffd17 	ldw	r2,-12(fp)
 8013c0c:	10c5883a 	add	r2,r2,r3
 8013c10:	10800017 	ldw	r2,0(r2)
 8013c14:	20800035 	stwio	r2,0(r4)
 8013c18:	00000e06 	br	8013c54 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 8013c1c:	e0bffc17 	ldw	r2,-16(fp)
 8013c20:	10800a17 	ldw	r2,40(r2)
 8013c24:	10800304 	addi	r2,r2,12
 8013c28:	1009883a 	mov	r4,r2
 8013c2c:	e0bffa17 	ldw	r2,-24(fp)
 8013c30:	10c00044 	addi	r3,r2,1
 8013c34:	e0fffa15 	stw	r3,-24(fp)
 8013c38:	1085883a 	add	r2,r2,r2
 8013c3c:	1085883a 	add	r2,r2,r2
 8013c40:	1007883a 	mov	r3,r2
 8013c44:	e0bffd17 	ldw	r2,-12(fp)
 8013c48:	10c5883a 	add	r2,r2,r3
 8013c4c:	10800017 	ldw	r2,0(r2)
 8013c50:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 8013c54:	e0fffa17 	ldw	r3,-24(fp)
 8013c58:	e0bffe17 	ldw	r2,-8(fp)
 8013c5c:	18bfce16 	blt	r3,r2,8013b98 <__alt_data_end+0xfc013b98>
 8013c60:	00000106 	br	8013c68 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 8013c64:	0001883a 	nop
		}
	}
	return count;
 8013c68:	e0bffa17 	ldw	r2,-24(fp)
}
 8013c6c:	e037883a 	mov	sp,fp
 8013c70:	df000017 	ldw	fp,0(sp)
 8013c74:	dec00104 	addi	sp,sp,4
 8013c78:	f800283a 	ret

08013c7c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 8013c7c:	defffd04 	addi	sp,sp,-12
 8013c80:	df000215 	stw	fp,8(sp)
 8013c84:	df000204 	addi	fp,sp,8
 8013c88:	e13ffe15 	stw	r4,-8(fp)
 8013c8c:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 8013c90:	e0bfff17 	ldw	r2,-4(fp)
 8013c94:	1000051e 	bne	r2,zero,8013cac <alt_up_audio_read_fifo_head+0x30>
 8013c98:	e0bffe17 	ldw	r2,-8(fp)
 8013c9c:	10800a17 	ldw	r2,40(r2)
 8013ca0:	10800204 	addi	r2,r2,8
 8013ca4:	10800037 	ldwio	r2,0(r2)
 8013ca8:	00000406 	br	8013cbc <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 8013cac:	e0bffe17 	ldw	r2,-8(fp)
 8013cb0:	10800a17 	ldw	r2,40(r2)
 8013cb4:	10800304 	addi	r2,r2,12
 8013cb8:	10800037 	ldwio	r2,0(r2)
}
 8013cbc:	e037883a 	mov	sp,fp
 8013cc0:	df000017 	ldw	fp,0(sp)
 8013cc4:	dec00104 	addi	sp,sp,4
 8013cc8:	f800283a 	ret

08013ccc <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 8013ccc:	defffc04 	addi	sp,sp,-16
 8013cd0:	df000315 	stw	fp,12(sp)
 8013cd4:	df000304 	addi	fp,sp,12
 8013cd8:	e13ffd15 	stw	r4,-12(fp)
 8013cdc:	e17ffe15 	stw	r5,-8(fp)
 8013ce0:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 8013ce4:	e0bfff17 	ldw	r2,-4(fp)
 8013ce8:	1000071e 	bne	r2,zero,8013d08 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 8013cec:	e0bffd17 	ldw	r2,-12(fp)
 8013cf0:	10800a17 	ldw	r2,40(r2)
 8013cf4:	10800204 	addi	r2,r2,8
 8013cf8:	1007883a 	mov	r3,r2
 8013cfc:	e0bffe17 	ldw	r2,-8(fp)
 8013d00:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 8013d04:	00000606 	br	8013d20 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 8013d08:	e0bffd17 	ldw	r2,-12(fp)
 8013d0c:	10800a17 	ldw	r2,40(r2)
 8013d10:	10800304 	addi	r2,r2,12
 8013d14:	1007883a 	mov	r3,r2
 8013d18:	e0bffe17 	ldw	r2,-8(fp)
 8013d1c:	18800035 	stwio	r2,0(r3)
}
 8013d20:	0001883a 	nop
 8013d24:	e037883a 	mov	sp,fp
 8013d28:	df000017 	ldw	fp,0(sp)
 8013d2c:	dec00104 	addi	sp,sp,4
 8013d30:	f800283a 	ret

08013d34 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 8013d34:	defffc04 	addi	sp,sp,-16
 8013d38:	dfc00315 	stw	ra,12(sp)
 8013d3c:	df000215 	stw	fp,8(sp)
 8013d40:	df000204 	addi	fp,sp,8
 8013d44:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 8013d48:	d1600904 	addi	r5,gp,-32732
 8013d4c:	e13fff17 	ldw	r4,-4(fp)
 8013d50:	801489c0 	call	801489c <alt_find_dev>
 8013d54:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 8013d58:	e0bffe17 	ldw	r2,-8(fp)
 8013d5c:	10800a17 	ldw	r2,40(r2)
 8013d60:	10800104 	addi	r2,r2,4
 8013d64:	10800037 	ldwio	r2,0(r2)
 8013d68:	10803fec 	andhi	r2,r2,255
 8013d6c:	1005d43a 	srai	r2,r2,16
 8013d70:	1007883a 	mov	r3,r2
 8013d74:	e0bffe17 	ldw	r2,-8(fp)
 8013d78:	10c00b15 	stw	r3,44(r2)

  return dev;
 8013d7c:	e0bffe17 	ldw	r2,-8(fp)
}
 8013d80:	e037883a 	mov	sp,fp
 8013d84:	dfc00117 	ldw	ra,4(sp)
 8013d88:	df000017 	ldw	fp,0(sp)
 8013d8c:	dec00204 	addi	sp,sp,8
 8013d90:	f800283a 	ret

08013d94 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8013d94:	defffc04 	addi	sp,sp,-16
 8013d98:	df000315 	stw	fp,12(sp)
 8013d9c:	df000304 	addi	fp,sp,12
 8013da0:	e13ffd15 	stw	r4,-12(fp)
 8013da4:	e17ffe15 	stw	r5,-8(fp)
 8013da8:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 8013dac:	e0bffd17 	ldw	r2,-12(fp)
 8013db0:	10800a17 	ldw	r2,40(r2)
 8013db4:	10800204 	addi	r2,r2,8
 8013db8:	1007883a 	mov	r3,r2
 8013dbc:	e0bffe17 	ldw	r2,-8(fp)
 8013dc0:	10803fcc 	andi	r2,r2,255
 8013dc4:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 8013dc8:	e0bffd17 	ldw	r2,-12(fp)
 8013dcc:	10800a17 	ldw	r2,40(r2)
 8013dd0:	10800304 	addi	r2,r2,12
 8013dd4:	1007883a 	mov	r3,r2
 8013dd8:	e0bfff17 	ldw	r2,-4(fp)
 8013ddc:	10bfffcc 	andi	r2,r2,65535
 8013de0:	18800035 	stwio	r2,0(r3)

	return 0;
 8013de4:	0005883a 	mov	r2,zero
}
 8013de8:	e037883a 	mov	sp,fp
 8013dec:	df000017 	ldw	fp,0(sp)
 8013df0:	dec00104 	addi	sp,sp,4
 8013df4:	f800283a 	ret

08013df8 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 8013df8:	defffb04 	addi	sp,sp,-20
 8013dfc:	dfc00415 	stw	ra,16(sp)
 8013e00:	df000315 	stw	fp,12(sp)
 8013e04:	df000304 	addi	fp,sp,12
 8013e08:	e13ffd15 	stw	r4,-12(fp)
 8013e0c:	e17ffe15 	stw	r5,-8(fp)
 8013e10:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 8013e14:	e0bffd17 	ldw	r2,-12(fp)
 8013e18:	10800a17 	ldw	r2,40(r2)
 8013e1c:	10800204 	addi	r2,r2,8
 8013e20:	1007883a 	mov	r3,r2
 8013e24:	e0bffe17 	ldw	r2,-8(fp)
 8013e28:	10803fcc 	andi	r2,r2,255
 8013e2c:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 8013e30:	e0bffd17 	ldw	r2,-12(fp)
 8013e34:	10800a17 	ldw	r2,40(r2)
 8013e38:	10800304 	addi	r2,r2,12
 8013e3c:	10800037 	ldwio	r2,0(r2)
 8013e40:	1007883a 	mov	r3,r2
 8013e44:	e0bfff17 	ldw	r2,-4(fp)
 8013e48:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 8013e4c:	e13ffd17 	ldw	r4,-12(fp)
 8013e50:	8013f1c0 	call	8013f1c <alt_up_av_config_read_acknowledge>
 8013e54:	10000226 	beq	r2,zero,8013e60 <alt_up_av_config_read_data+0x68>
		return -1;
 8013e58:	00bfffc4 	movi	r2,-1
 8013e5c:	00000106 	br	8013e64 <alt_up_av_config_read_data+0x6c>

	return 0;
 8013e60:	0005883a 	mov	r2,zero
}
 8013e64:	e037883a 	mov	sp,fp
 8013e68:	dfc00117 	ldw	ra,4(sp)
 8013e6c:	df000017 	ldw	fp,0(sp)
 8013e70:	dec00204 	addi	sp,sp,8
 8013e74:	f800283a 	ret

08013e78 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 8013e78:	defffe04 	addi	sp,sp,-8
 8013e7c:	df000115 	stw	fp,4(sp)
 8013e80:	df000104 	addi	fp,sp,4
 8013e84:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 8013e88:	e0bfff17 	ldw	r2,-4(fp)
 8013e8c:	10800a17 	ldw	r2,40(r2)
 8013e90:	1007883a 	mov	r3,r2
 8013e94:	00800044 	movi	r2,1
 8013e98:	18800025 	stbio	r2,0(r3)
	return 0;
 8013e9c:	0005883a 	mov	r2,zero
}
 8013ea0:	e037883a 	mov	sp,fp
 8013ea4:	df000017 	ldw	fp,0(sp)
 8013ea8:	dec00104 	addi	sp,sp,4
 8013eac:	f800283a 	ret

08013eb0 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 8013eb0:	defffe04 	addi	sp,sp,-8
 8013eb4:	df000115 	stw	fp,4(sp)
 8013eb8:	df000104 	addi	fp,sp,4
 8013ebc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 8013ec0:	e0bfff17 	ldw	r2,-4(fp)
 8013ec4:	10800a17 	ldw	r2,40(r2)
 8013ec8:	1007883a 	mov	r3,r2
 8013ecc:	00800084 	movi	r2,2
 8013ed0:	18800025 	stbio	r2,0(r3)
	return 0;
 8013ed4:	0005883a 	mov	r2,zero
}
 8013ed8:	e037883a 	mov	sp,fp
 8013edc:	df000017 	ldw	fp,0(sp)
 8013ee0:	dec00104 	addi	sp,sp,4
 8013ee4:	f800283a 	ret

08013ee8 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 8013ee8:	defffe04 	addi	sp,sp,-8
 8013eec:	df000115 	stw	fp,4(sp)
 8013ef0:	df000104 	addi	fp,sp,4
 8013ef4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 8013ef8:	e0bfff17 	ldw	r2,-4(fp)
 8013efc:	10800a17 	ldw	r2,40(r2)
 8013f00:	0007883a 	mov	r3,zero
 8013f04:	10c00025 	stbio	r3,0(r2)
	return 0;
 8013f08:	0005883a 	mov	r2,zero
}
 8013f0c:	e037883a 	mov	sp,fp
 8013f10:	df000017 	ldw	fp,0(sp)
 8013f14:	dec00104 	addi	sp,sp,4
 8013f18:	f800283a 	ret

08013f1c <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 8013f1c:	defffe04 	addi	sp,sp,-8
 8013f20:	df000115 	stw	fp,4(sp)
 8013f24:	df000104 	addi	fp,sp,4
 8013f28:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 8013f2c:	e0bfff17 	ldw	r2,-4(fp)
 8013f30:	10800a17 	ldw	r2,40(r2)
 8013f34:	10800104 	addi	r2,r2,4
 8013f38:	10800037 	ldwio	r2,0(r2)
 8013f3c:	1080008c 	andi	r2,r2,2
 8013f40:	1005d07a 	srai	r2,r2,1
 8013f44:	10000626 	beq	r2,zero,8013f60 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 8013f48:	e0bfff17 	ldw	r2,-4(fp)
 8013f4c:	10800a17 	ldw	r2,40(r2)
 8013f50:	10800104 	addi	r2,r2,4
 8013f54:	10800037 	ldwio	r2,0(r2)
 8013f58:	1080004c 	andi	r2,r2,1
 8013f5c:	00000106 	br	8013f64 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 8013f60:	00bfffc4 	movi	r2,-1
}
 8013f64:	e037883a 	mov	sp,fp
 8013f68:	df000017 	ldw	fp,0(sp)
 8013f6c:	dec00104 	addi	sp,sp,4
 8013f70:	f800283a 	ret

08013f74 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 8013f74:	defffe04 	addi	sp,sp,-8
 8013f78:	df000115 	stw	fp,4(sp)
 8013f7c:	df000104 	addi	fp,sp,4
 8013f80:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 8013f84:	e0bfff17 	ldw	r2,-4(fp)
 8013f88:	10800a17 	ldw	r2,40(r2)
 8013f8c:	10800104 	addi	r2,r2,4
 8013f90:	10800037 	ldwio	r2,0(r2)
 8013f94:	1080008c 	andi	r2,r2,2
 8013f98:	1005d07a 	srai	r2,r2,1
}
 8013f9c:	e037883a 	mov	sp,fp
 8013fa0:	df000017 	ldw	fp,0(sp)
 8013fa4:	dec00104 	addi	sp,sp,4
 8013fa8:	f800283a 	ret

08013fac <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8013fac:	defffa04 	addi	sp,sp,-24
 8013fb0:	dfc00515 	stw	ra,20(sp)
 8013fb4:	df000415 	stw	fp,16(sp)
 8013fb8:	df000404 	addi	fp,sp,16
 8013fbc:	e13ffd15 	stw	r4,-12(fp)
 8013fc0:	e17ffe15 	stw	r5,-8(fp)
 8013fc4:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 8013fc8:	e0bffd17 	ldw	r2,-12(fp)
 8013fcc:	10800b17 	ldw	r2,44(r2)
 8013fd0:	10800060 	cmpeqi	r2,r2,1
 8013fd4:	10000e1e 	bne	r2,zero,8014010 <alt_up_av_config_write_audio_cfg_register+0x64>
 8013fd8:	e0bffd17 	ldw	r2,-12(fp)
 8013fdc:	10800b17 	ldw	r2,44(r2)
 8013fe0:	108000a0 	cmpeqi	r2,r2,2
 8013fe4:	10000a1e 	bne	r2,zero,8014010 <alt_up_av_config_write_audio_cfg_register+0x64>
 8013fe8:	e0bffd17 	ldw	r2,-12(fp)
 8013fec:	10800b17 	ldw	r2,44(r2)
 8013ff0:	108000e0 	cmpeqi	r2,r2,3
 8013ff4:	1000061e 	bne	r2,zero,8014010 <alt_up_av_config_write_audio_cfg_register+0x64>
 8013ff8:	e0bffd17 	ldw	r2,-12(fp)
 8013ffc:	10800b17 	ldw	r2,44(r2)
 8014000:	10800120 	cmpeqi	r2,r2,4
 8014004:	1000021e 	bne	r2,zero,8014010 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 8014008:	00bffa84 	movi	r2,-22
 801400c:	00000b06 	br	801403c <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 8014010:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 8014014:	e0bffd17 	ldw	r2,-12(fp)
 8014018:	10800a17 	ldw	r2,40(r2)
 801401c:	10800084 	addi	r2,r2,2
 8014020:	1007883a 	mov	r3,r2
 8014024:	e0bffc17 	ldw	r2,-16(fp)
 8014028:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 801402c:	e1bfff17 	ldw	r6,-4(fp)
 8014030:	e17ffe17 	ldw	r5,-8(fp)
 8014034:	e13ffd17 	ldw	r4,-12(fp)
 8014038:	8013d940 	call	8013d94 <alt_up_av_config_write_data>
}
 801403c:	e037883a 	mov	sp,fp
 8014040:	dfc00117 	ldw	ra,4(sp)
 8014044:	df000017 	ldw	fp,0(sp)
 8014048:	dec00204 	addi	sp,sp,8
 801404c:	f800283a 	ret

08014050 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 8014050:	defffa04 	addi	sp,sp,-24
 8014054:	dfc00515 	stw	ra,20(sp)
 8014058:	df000415 	stw	fp,16(sp)
 801405c:	df000404 	addi	fp,sp,16
 8014060:	e13ffc15 	stw	r4,-16(fp)
 8014064:	e17ffd15 	stw	r5,-12(fp)
 8014068:	e1bffe15 	stw	r6,-8(fp)
 801406c:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 8014070:	e0bffc17 	ldw	r2,-16(fp)
 8014074:	10800b17 	ldw	r2,44(r2)
 8014078:	108000a0 	cmpeqi	r2,r2,2
 801407c:	10000a1e 	bne	r2,zero,80140a8 <alt_up_av_config_read_video_cfg_register+0x58>
 8014080:	e0bffc17 	ldw	r2,-16(fp)
 8014084:	10800b17 	ldw	r2,44(r2)
 8014088:	108000e0 	cmpeqi	r2,r2,3
 801408c:	1000061e 	bne	r2,zero,80140a8 <alt_up_av_config_read_video_cfg_register+0x58>
 8014090:	e0bffc17 	ldw	r2,-16(fp)
 8014094:	10800b17 	ldw	r2,44(r2)
 8014098:	10800120 	cmpeqi	r2,r2,4
 801409c:	1000021e 	bne	r2,zero,80140a8 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 80140a0:	00bffa84 	movi	r2,-22
 80140a4:	00001f06 	br	8014124 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 80140a8:	e0bffc17 	ldw	r2,-16(fp)
 80140ac:	10800b17 	ldw	r2,44(r2)
 80140b0:	108000a0 	cmpeqi	r2,r2,2
 80140b4:	1000041e 	bne	r2,zero,80140c8 <alt_up_av_config_read_video_cfg_register+0x78>
 80140b8:	e0bffc17 	ldw	r2,-16(fp)
 80140bc:	10800b17 	ldw	r2,44(r2)
 80140c0:	10800118 	cmpnei	r2,r2,4
 80140c4:	1000051e 	bne	r2,zero,80140dc <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 80140c8:	e0bfff17 	ldw	r2,-4(fp)
 80140cc:	10800060 	cmpeqi	r2,r2,1
 80140d0:	10000a1e 	bne	r2,zero,80140fc <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 80140d4:	00bffa84 	movi	r2,-22
 80140d8:	00001206 	br	8014124 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 80140dc:	e0bfff17 	ldw	r2,-4(fp)
 80140e0:	10800060 	cmpeqi	r2,r2,1
 80140e4:	1000051e 	bne	r2,zero,80140fc <alt_up_av_config_read_video_cfg_register+0xac>
 80140e8:	e0bfff17 	ldw	r2,-4(fp)
 80140ec:	108000a0 	cmpeqi	r2,r2,2
 80140f0:	1000021e 	bne	r2,zero,80140fc <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 80140f4:	00bffa84 	movi	r2,-22
 80140f8:	00000a06 	br	8014124 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 80140fc:	e0bffc17 	ldw	r2,-16(fp)
 8014100:	10800a17 	ldw	r2,40(r2)
 8014104:	10800084 	addi	r2,r2,2
 8014108:	1007883a 	mov	r3,r2
 801410c:	e0bfff17 	ldw	r2,-4(fp)
 8014110:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 8014114:	e1bffe17 	ldw	r6,-8(fp)
 8014118:	e17ffd17 	ldw	r5,-12(fp)
 801411c:	e13ffc17 	ldw	r4,-16(fp)
 8014120:	8013df80 	call	8013df8 <alt_up_av_config_read_data>
}
 8014124:	e037883a 	mov	sp,fp
 8014128:	dfc00117 	ldw	ra,4(sp)
 801412c:	df000017 	ldw	fp,0(sp)
 8014130:	dec00204 	addi	sp,sp,8
 8014134:	f800283a 	ret

08014138 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 8014138:	defffa04 	addi	sp,sp,-24
 801413c:	dfc00515 	stw	ra,20(sp)
 8014140:	df000415 	stw	fp,16(sp)
 8014144:	df000404 	addi	fp,sp,16
 8014148:	e13ffc15 	stw	r4,-16(fp)
 801414c:	e17ffd15 	stw	r5,-12(fp)
 8014150:	e1bffe15 	stw	r6,-8(fp)
 8014154:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 8014158:	e0bffc17 	ldw	r2,-16(fp)
 801415c:	10800b17 	ldw	r2,44(r2)
 8014160:	108000a0 	cmpeqi	r2,r2,2
 8014164:	10000a1e 	bne	r2,zero,8014190 <alt_up_av_config_write_video_cfg_register+0x58>
 8014168:	e0bffc17 	ldw	r2,-16(fp)
 801416c:	10800b17 	ldw	r2,44(r2)
 8014170:	108000e0 	cmpeqi	r2,r2,3
 8014174:	1000061e 	bne	r2,zero,8014190 <alt_up_av_config_write_video_cfg_register+0x58>
 8014178:	e0bffc17 	ldw	r2,-16(fp)
 801417c:	10800b17 	ldw	r2,44(r2)
 8014180:	10800120 	cmpeqi	r2,r2,4
 8014184:	1000021e 	bne	r2,zero,8014190 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 8014188:	00bffa84 	movi	r2,-22
 801418c:	00001f06 	br	801420c <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 8014190:	e0bffc17 	ldw	r2,-16(fp)
 8014194:	10800b17 	ldw	r2,44(r2)
 8014198:	108000a0 	cmpeqi	r2,r2,2
 801419c:	1000041e 	bne	r2,zero,80141b0 <alt_up_av_config_write_video_cfg_register+0x78>
 80141a0:	e0bffc17 	ldw	r2,-16(fp)
 80141a4:	10800b17 	ldw	r2,44(r2)
 80141a8:	10800118 	cmpnei	r2,r2,4
 80141ac:	1000051e 	bne	r2,zero,80141c4 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 80141b0:	e0bfff17 	ldw	r2,-4(fp)
 80141b4:	10800060 	cmpeqi	r2,r2,1
 80141b8:	10000a1e 	bne	r2,zero,80141e4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 80141bc:	00bffa84 	movi	r2,-22
 80141c0:	00001206 	br	801420c <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 80141c4:	e0bfff17 	ldw	r2,-4(fp)
 80141c8:	10800060 	cmpeqi	r2,r2,1
 80141cc:	1000051e 	bne	r2,zero,80141e4 <alt_up_av_config_write_video_cfg_register+0xac>
 80141d0:	e0bfff17 	ldw	r2,-4(fp)
 80141d4:	108000a0 	cmpeqi	r2,r2,2
 80141d8:	1000021e 	bne	r2,zero,80141e4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 80141dc:	00bffa84 	movi	r2,-22
 80141e0:	00000a06 	br	801420c <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 80141e4:	e0bffc17 	ldw	r2,-16(fp)
 80141e8:	10800a17 	ldw	r2,40(r2)
 80141ec:	10800084 	addi	r2,r2,2
 80141f0:	1007883a 	mov	r3,r2
 80141f4:	e0bfff17 	ldw	r2,-4(fp)
 80141f8:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 80141fc:	e1bffe17 	ldw	r6,-8(fp)
 8014200:	e17ffd17 	ldw	r5,-12(fp)
 8014204:	e13ffc17 	ldw	r4,-16(fp)
 8014208:	8013d940 	call	8013d94 <alt_up_av_config_write_data>
}
 801420c:	e037883a 	mov	sp,fp
 8014210:	dfc00117 	ldw	ra,4(sp)
 8014214:	df000017 	ldw	fp,0(sp)
 8014218:	dec00204 	addi	sp,sp,8
 801421c:	f800283a 	ret

08014220 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 8014220:	defffb04 	addi	sp,sp,-20
 8014224:	dfc00415 	stw	ra,16(sp)
 8014228:	df000315 	stw	fp,12(sp)
 801422c:	df000304 	addi	fp,sp,12
 8014230:	e13ffd15 	stw	r4,-12(fp)
 8014234:	e17ffe15 	stw	r5,-8(fp)
 8014238:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 801423c:	e0bffd17 	ldw	r2,-12(fp)
 8014240:	10800b17 	ldw	r2,44(r2)
 8014244:	10800220 	cmpeqi	r2,r2,8
 8014248:	1000021e 	bne	r2,zero,8014254 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 801424c:	00bffa84 	movi	r2,-22
 8014250:	00000406 	br	8014264 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 8014254:	e1bfff17 	ldw	r6,-4(fp)
 8014258:	e17ffe17 	ldw	r5,-8(fp)
 801425c:	e13ffd17 	ldw	r4,-12(fp)
 8014260:	8013df80 	call	8013df8 <alt_up_av_config_read_data>
}
 8014264:	e037883a 	mov	sp,fp
 8014268:	dfc00117 	ldw	ra,4(sp)
 801426c:	df000017 	ldw	fp,0(sp)
 8014270:	dec00204 	addi	sp,sp,8
 8014274:	f800283a 	ret

08014278 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8014278:	defffb04 	addi	sp,sp,-20
 801427c:	dfc00415 	stw	ra,16(sp)
 8014280:	df000315 	stw	fp,12(sp)
 8014284:	df000304 	addi	fp,sp,12
 8014288:	e13ffd15 	stw	r4,-12(fp)
 801428c:	e17ffe15 	stw	r5,-8(fp)
 8014290:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 8014294:	e0bffd17 	ldw	r2,-12(fp)
 8014298:	10800b17 	ldw	r2,44(r2)
 801429c:	10800220 	cmpeqi	r2,r2,8
 80142a0:	1000021e 	bne	r2,zero,80142ac <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 80142a4:	00bffa84 	movi	r2,-22
 80142a8:	00000406 	br	80142bc <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 80142ac:	e1bfff17 	ldw	r6,-4(fp)
 80142b0:	e17ffe17 	ldw	r5,-8(fp)
 80142b4:	e13ffd17 	ldw	r4,-12(fp)
 80142b8:	8013d940 	call	8013d94 <alt_up_av_config_write_data>
}
 80142bc:	e037883a 	mov	sp,fp
 80142c0:	dfc00117 	ldw	ra,4(sp)
 80142c4:	df000017 	ldw	fp,0(sp)
 80142c8:	dec00204 	addi	sp,sp,8
 80142cc:	f800283a 	ret

080142d0 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 80142d0:	defffb04 	addi	sp,sp,-20
 80142d4:	dfc00415 	stw	ra,16(sp)
 80142d8:	df000315 	stw	fp,12(sp)
 80142dc:	df000304 	addi	fp,sp,12
 80142e0:	e13ffd15 	stw	r4,-12(fp)
 80142e4:	e17ffe15 	stw	r5,-8(fp)
 80142e8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 80142ec:	e0bffd17 	ldw	r2,-12(fp)
 80142f0:	10800b17 	ldw	r2,44(r2)
 80142f4:	10800260 	cmpeqi	r2,r2,9
 80142f8:	1000021e 	bne	r2,zero,8014304 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 80142fc:	00bffa84 	movi	r2,-22
 8014300:	00000406 	br	8014314 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 8014304:	e1bfff17 	ldw	r6,-4(fp)
 8014308:	e17ffe17 	ldw	r5,-8(fp)
 801430c:	e13ffd17 	ldw	r4,-12(fp)
 8014310:	8013df80 	call	8013df8 <alt_up_av_config_read_data>
}
 8014314:	e037883a 	mov	sp,fp
 8014318:	dfc00117 	ldw	ra,4(sp)
 801431c:	df000017 	ldw	fp,0(sp)
 8014320:	dec00204 	addi	sp,sp,8
 8014324:	f800283a 	ret

08014328 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 8014328:	defffb04 	addi	sp,sp,-20
 801432c:	dfc00415 	stw	ra,16(sp)
 8014330:	df000315 	stw	fp,12(sp)
 8014334:	df000304 	addi	fp,sp,12
 8014338:	e13ffd15 	stw	r4,-12(fp)
 801433c:	e17ffe15 	stw	r5,-8(fp)
 8014340:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 8014344:	e0bffd17 	ldw	r2,-12(fp)
 8014348:	10800b17 	ldw	r2,44(r2)
 801434c:	10800260 	cmpeqi	r2,r2,9
 8014350:	1000021e 	bne	r2,zero,801435c <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 8014354:	00bffa84 	movi	r2,-22
 8014358:	00000406 	br	801436c <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 801435c:	e1bfff17 	ldw	r6,-4(fp)
 8014360:	e17ffe17 	ldw	r5,-8(fp)
 8014364:	e13ffd17 	ldw	r4,-12(fp)
 8014368:	8013d940 	call	8013d94 <alt_up_av_config_write_data>
}
 801436c:	e037883a 	mov	sp,fp
 8014370:	dfc00117 	ldw	ra,4(sp)
 8014374:	df000017 	ldw	fp,0(sp)
 8014378:	dec00204 	addi	sp,sp,8
 801437c:	f800283a 	ret

08014380 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 8014380:	defffb04 	addi	sp,sp,-20
 8014384:	dfc00415 	stw	ra,16(sp)
 8014388:	df000315 	stw	fp,12(sp)
 801438c:	df000304 	addi	fp,sp,12
 8014390:	e13ffd15 	stw	r4,-12(fp)
 8014394:	e17ffe15 	stw	r5,-8(fp)
 8014398:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 801439c:	e0bffd17 	ldw	r2,-12(fp)
 80143a0:	10800b17 	ldw	r2,44(r2)
 80143a4:	108002a0 	cmpeqi	r2,r2,10
 80143a8:	1000021e 	bne	r2,zero,80143b4 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 80143ac:	00bffa84 	movi	r2,-22
 80143b0:	00000406 	br	80143c4 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 80143b4:	e1bfff17 	ldw	r6,-4(fp)
 80143b8:	e17ffe17 	ldw	r5,-8(fp)
 80143bc:	e13ffd17 	ldw	r4,-12(fp)
 80143c0:	8013df80 	call	8013df8 <alt_up_av_config_read_data>
}
 80143c4:	e037883a 	mov	sp,fp
 80143c8:	dfc00117 	ldw	ra,4(sp)
 80143cc:	df000017 	ldw	fp,0(sp)
 80143d0:	dec00204 	addi	sp,sp,8
 80143d4:	f800283a 	ret

080143d8 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 80143d8:	defffb04 	addi	sp,sp,-20
 80143dc:	dfc00415 	stw	ra,16(sp)
 80143e0:	df000315 	stw	fp,12(sp)
 80143e4:	df000304 	addi	fp,sp,12
 80143e8:	e13ffd15 	stw	r4,-12(fp)
 80143ec:	e17ffe15 	stw	r5,-8(fp)
 80143f0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 80143f4:	e0bffd17 	ldw	r2,-12(fp)
 80143f8:	10800b17 	ldw	r2,44(r2)
 80143fc:	108002a0 	cmpeqi	r2,r2,10
 8014400:	1000021e 	bne	r2,zero,801440c <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 8014404:	00bffa84 	movi	r2,-22
 8014408:	00000406 	br	801441c <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 801440c:	e1bfff17 	ldw	r6,-4(fp)
 8014410:	e17ffe17 	ldw	r5,-8(fp)
 8014414:	e13ffd17 	ldw	r4,-12(fp)
 8014418:	8013d940 	call	8013d94 <alt_up_av_config_write_data>
}
 801441c:	e037883a 	mov	sp,fp
 8014420:	dfc00117 	ldw	ra,4(sp)
 8014424:	df000017 	ldw	fp,0(sp)
 8014428:	dec00204 	addi	sp,sp,8
 801442c:	f800283a 	ret

08014430 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8014430:	defff504 	addi	sp,sp,-44
 8014434:	df000a15 	stw	fp,40(sp)
 8014438:	df000a04 	addi	fp,sp,40
 801443c:	e13ffc15 	stw	r4,-16(fp)
 8014440:	e17ffd15 	stw	r5,-12(fp)
 8014444:	e1bffe15 	stw	r6,-8(fp)
 8014448:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801444c:	e03ff615 	stw	zero,-40(fp)
 8014450:	d0a72317 	ldw	r2,-25460(gp)
  
  if (alt_ticks_per_second ())
 8014454:	10003c26 	beq	r2,zero,8014548 <alt_alarm_start+0x118>
  {
    if (alarm)
 8014458:	e0bffc17 	ldw	r2,-16(fp)
 801445c:	10003826 	beq	r2,zero,8014540 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8014460:	e0bffc17 	ldw	r2,-16(fp)
 8014464:	e0fffe17 	ldw	r3,-8(fp)
 8014468:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 801446c:	e0bffc17 	ldw	r2,-16(fp)
 8014470:	e0ffff17 	ldw	r3,-4(fp)
 8014474:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014478:	0005303a 	rdctl	r2,status
 801447c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014480:	e0fff917 	ldw	r3,-28(fp)
 8014484:	00bfff84 	movi	r2,-2
 8014488:	1884703a 	and	r2,r3,r2
 801448c:	1001703a 	wrctl	status,r2
  
  return context;
 8014490:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8014494:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8014498:	d0a72417 	ldw	r2,-25456(gp)
      
      current_nticks = alt_nticks();
 801449c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80144a0:	e0fffd17 	ldw	r3,-12(fp)
 80144a4:	e0bff617 	ldw	r2,-40(fp)
 80144a8:	1885883a 	add	r2,r3,r2
 80144ac:	10c00044 	addi	r3,r2,1
 80144b0:	e0bffc17 	ldw	r2,-16(fp)
 80144b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80144b8:	e0bffc17 	ldw	r2,-16(fp)
 80144bc:	10c00217 	ldw	r3,8(r2)
 80144c0:	e0bff617 	ldw	r2,-40(fp)
 80144c4:	1880042e 	bgeu	r3,r2,80144d8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80144c8:	e0bffc17 	ldw	r2,-16(fp)
 80144cc:	00c00044 	movi	r3,1
 80144d0:	10c00405 	stb	r3,16(r2)
 80144d4:	00000206 	br	80144e0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80144d8:	e0bffc17 	ldw	r2,-16(fp)
 80144dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80144e0:	e0bffc17 	ldw	r2,-16(fp)
 80144e4:	d0e01304 	addi	r3,gp,-32692
 80144e8:	e0fffa15 	stw	r3,-24(fp)
 80144ec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80144f0:	e0bffb17 	ldw	r2,-20(fp)
 80144f4:	e0fffa17 	ldw	r3,-24(fp)
 80144f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80144fc:	e0bffa17 	ldw	r2,-24(fp)
 8014500:	10c00017 	ldw	r3,0(r2)
 8014504:	e0bffb17 	ldw	r2,-20(fp)
 8014508:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801450c:	e0bffa17 	ldw	r2,-24(fp)
 8014510:	10800017 	ldw	r2,0(r2)
 8014514:	e0fffb17 	ldw	r3,-20(fp)
 8014518:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801451c:	e0bffa17 	ldw	r2,-24(fp)
 8014520:	e0fffb17 	ldw	r3,-20(fp)
 8014524:	10c00015 	stw	r3,0(r2)
 8014528:	e0bff817 	ldw	r2,-32(fp)
 801452c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014530:	e0bff717 	ldw	r2,-36(fp)
 8014534:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8014538:	0005883a 	mov	r2,zero
 801453c:	00000306 	br	801454c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8014540:	00bffa84 	movi	r2,-22
 8014544:	00000106 	br	801454c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8014548:	00bfde84 	movi	r2,-134
  }
}
 801454c:	e037883a 	mov	sp,fp
 8014550:	df000017 	ldw	fp,0(sp)
 8014554:	dec00104 	addi	sp,sp,4
 8014558:	f800283a 	ret

0801455c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 801455c:	defffa04 	addi	sp,sp,-24
 8014560:	dfc00515 	stw	ra,20(sp)
 8014564:	df000415 	stw	fp,16(sp)
 8014568:	df000404 	addi	fp,sp,16
 801456c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8014570:	008000c4 	movi	r2,3
 8014574:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8014578:	e0fffd17 	ldw	r3,-12(fp)
 801457c:	008003f4 	movhi	r2,15
 8014580:	10909004 	addi	r2,r2,16960
 8014584:	1885383a 	mul	r2,r3,r2
 8014588:	100b883a 	mov	r5,r2
 801458c:	0100bef4 	movhi	r4,763
 8014590:	213c2004 	addi	r4,r4,-3968
 8014594:	80034900 	call	8003490 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8014598:	100b883a 	mov	r5,r2
 801459c:	01200034 	movhi	r4,32768
 80145a0:	213fffc4 	addi	r4,r4,-1
 80145a4:	80034900 	call	8003490 <__udivsi3>
 80145a8:	100b883a 	mov	r5,r2
 80145ac:	e13fff17 	ldw	r4,-4(fp)
 80145b0:	80034900 	call	8003490 <__udivsi3>
 80145b4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80145b8:	e0bffe17 	ldw	r2,-8(fp)
 80145bc:	10002a26 	beq	r2,zero,8014668 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80145c0:	e03ffc15 	stw	zero,-16(fp)
 80145c4:	00001706 	br	8014624 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80145c8:	00a00034 	movhi	r2,32768
 80145cc:	10bfffc4 	addi	r2,r2,-1
 80145d0:	10bfffc4 	addi	r2,r2,-1
 80145d4:	103ffe1e 	bne	r2,zero,80145d0 <__alt_data_end+0xfc0145d0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80145d8:	e0fffd17 	ldw	r3,-12(fp)
 80145dc:	008003f4 	movhi	r2,15
 80145e0:	10909004 	addi	r2,r2,16960
 80145e4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80145e8:	100b883a 	mov	r5,r2
 80145ec:	0100bef4 	movhi	r4,763
 80145f0:	213c2004 	addi	r4,r4,-3968
 80145f4:	80034900 	call	8003490 <__udivsi3>
 80145f8:	100b883a 	mov	r5,r2
 80145fc:	01200034 	movhi	r4,32768
 8014600:	213fffc4 	addi	r4,r4,-1
 8014604:	80034900 	call	8003490 <__udivsi3>
 8014608:	1007883a 	mov	r3,r2
 801460c:	e0bfff17 	ldw	r2,-4(fp)
 8014610:	10c5c83a 	sub	r2,r2,r3
 8014614:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8014618:	e0bffc17 	ldw	r2,-16(fp)
 801461c:	10800044 	addi	r2,r2,1
 8014620:	e0bffc15 	stw	r2,-16(fp)
 8014624:	e0fffc17 	ldw	r3,-16(fp)
 8014628:	e0bffe17 	ldw	r2,-8(fp)
 801462c:	18bfe616 	blt	r3,r2,80145c8 <__alt_data_end+0xfc0145c8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014630:	e0fffd17 	ldw	r3,-12(fp)
 8014634:	008003f4 	movhi	r2,15
 8014638:	10909004 	addi	r2,r2,16960
 801463c:	1885383a 	mul	r2,r3,r2
 8014640:	100b883a 	mov	r5,r2
 8014644:	0100bef4 	movhi	r4,763
 8014648:	213c2004 	addi	r4,r4,-3968
 801464c:	80034900 	call	8003490 <__udivsi3>
 8014650:	1007883a 	mov	r3,r2
 8014654:	e0bfff17 	ldw	r2,-4(fp)
 8014658:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801465c:	10bfffc4 	addi	r2,r2,-1
 8014660:	103ffe1e 	bne	r2,zero,801465c <__alt_data_end+0xfc01465c>
 8014664:	00000d06 	br	801469c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014668:	e0fffd17 	ldw	r3,-12(fp)
 801466c:	008003f4 	movhi	r2,15
 8014670:	10909004 	addi	r2,r2,16960
 8014674:	1885383a 	mul	r2,r3,r2
 8014678:	100b883a 	mov	r5,r2
 801467c:	0100bef4 	movhi	r4,763
 8014680:	213c2004 	addi	r4,r4,-3968
 8014684:	80034900 	call	8003490 <__udivsi3>
 8014688:	1007883a 	mov	r3,r2
 801468c:	e0bfff17 	ldw	r2,-4(fp)
 8014690:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8014694:	10bfffc4 	addi	r2,r2,-1
 8014698:	00bffe16 	blt	zero,r2,8014694 <__alt_data_end+0xfc014694>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801469c:	0005883a 	mov	r2,zero
}
 80146a0:	e037883a 	mov	sp,fp
 80146a4:	dfc00117 	ldw	ra,4(sp)
 80146a8:	df000017 	ldw	fp,0(sp)
 80146ac:	dec00204 	addi	sp,sp,8
 80146b0:	f800283a 	ret

080146b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80146b4:	defffe04 	addi	sp,sp,-8
 80146b8:	df000115 	stw	fp,4(sp)
 80146bc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80146c0:	e03fff15 	stw	zero,-4(fp)
 80146c4:	00000506 	br	80146dc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 80146c8:	e0bfff17 	ldw	r2,-4(fp)
 80146cc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80146d0:	e0bfff17 	ldw	r2,-4(fp)
 80146d4:	10800804 	addi	r2,r2,32
 80146d8:	e0bfff15 	stw	r2,-4(fp)
 80146dc:	e0bfff17 	ldw	r2,-4(fp)
 80146e0:	10820030 	cmpltui	r2,r2,2048
 80146e4:	103ff81e 	bne	r2,zero,80146c8 <__alt_data_end+0xfc0146c8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80146e8:	0001883a 	nop
 80146ec:	e037883a 	mov	sp,fp
 80146f0:	df000017 	ldw	fp,0(sp)
 80146f4:	dec00104 	addi	sp,sp,4
 80146f8:	f800283a 	ret

080146fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80146fc:	defffe04 	addi	sp,sp,-8
 8014700:	dfc00115 	stw	ra,4(sp)
 8014704:	df000015 	stw	fp,0(sp)
 8014708:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801470c:	d0a00c17 	ldw	r2,-32720(gp)
 8014710:	10000326 	beq	r2,zero,8014720 <alt_get_errno+0x24>
 8014714:	d0a00c17 	ldw	r2,-32720(gp)
 8014718:	103ee83a 	callr	r2
 801471c:	00000106 	br	8014724 <alt_get_errno+0x28>
 8014720:	d0a71e04 	addi	r2,gp,-25480
}
 8014724:	e037883a 	mov	sp,fp
 8014728:	dfc00117 	ldw	ra,4(sp)
 801472c:	df000017 	ldw	fp,0(sp)
 8014730:	dec00204 	addi	sp,sp,8
 8014734:	f800283a 	ret

08014738 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8014738:	defffa04 	addi	sp,sp,-24
 801473c:	dfc00515 	stw	ra,20(sp)
 8014740:	df000415 	stw	fp,16(sp)
 8014744:	df000404 	addi	fp,sp,16
 8014748:	e13ffe15 	stw	r4,-8(fp)
 801474c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8014750:	e0bffe17 	ldw	r2,-8(fp)
 8014754:	10000326 	beq	r2,zero,8014764 <alt_dev_llist_insert+0x2c>
 8014758:	e0bffe17 	ldw	r2,-8(fp)
 801475c:	10800217 	ldw	r2,8(r2)
 8014760:	1000061e 	bne	r2,zero,801477c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8014764:	80146fc0 	call	80146fc <alt_get_errno>
 8014768:	1007883a 	mov	r3,r2
 801476c:	00800584 	movi	r2,22
 8014770:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8014774:	00bffa84 	movi	r2,-22
 8014778:	00001306 	br	80147c8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801477c:	e0bffe17 	ldw	r2,-8(fp)
 8014780:	e0ffff17 	ldw	r3,-4(fp)
 8014784:	e0fffc15 	stw	r3,-16(fp)
 8014788:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801478c:	e0bffd17 	ldw	r2,-12(fp)
 8014790:	e0fffc17 	ldw	r3,-16(fp)
 8014794:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014798:	e0bffc17 	ldw	r2,-16(fp)
 801479c:	10c00017 	ldw	r3,0(r2)
 80147a0:	e0bffd17 	ldw	r2,-12(fp)
 80147a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80147a8:	e0bffc17 	ldw	r2,-16(fp)
 80147ac:	10800017 	ldw	r2,0(r2)
 80147b0:	e0fffd17 	ldw	r3,-12(fp)
 80147b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80147b8:	e0bffc17 	ldw	r2,-16(fp)
 80147bc:	e0fffd17 	ldw	r3,-12(fp)
 80147c0:	10c00015 	stw	r3,0(r2)

  return 0;  
 80147c4:	0005883a 	mov	r2,zero
}
 80147c8:	e037883a 	mov	sp,fp
 80147cc:	dfc00117 	ldw	ra,4(sp)
 80147d0:	df000017 	ldw	fp,0(sp)
 80147d4:	dec00204 	addi	sp,sp,8
 80147d8:	f800283a 	ret

080147dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80147dc:	defffd04 	addi	sp,sp,-12
 80147e0:	dfc00215 	stw	ra,8(sp)
 80147e4:	df000115 	stw	fp,4(sp)
 80147e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80147ec:	00820074 	movhi	r2,2049
 80147f0:	1095a904 	addi	r2,r2,22180
 80147f4:	e0bfff15 	stw	r2,-4(fp)
 80147f8:	00000606 	br	8014814 <_do_ctors+0x38>
        (*ctor) (); 
 80147fc:	e0bfff17 	ldw	r2,-4(fp)
 8014800:	10800017 	ldw	r2,0(r2)
 8014804:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014808:	e0bfff17 	ldw	r2,-4(fp)
 801480c:	10bfff04 	addi	r2,r2,-4
 8014810:	e0bfff15 	stw	r2,-4(fp)
 8014814:	e0ffff17 	ldw	r3,-4(fp)
 8014818:	00820074 	movhi	r2,2049
 801481c:	1095aa04 	addi	r2,r2,22184
 8014820:	18bff62e 	bgeu	r3,r2,80147fc <__alt_data_end+0xfc0147fc>
        (*ctor) (); 
}
 8014824:	0001883a 	nop
 8014828:	e037883a 	mov	sp,fp
 801482c:	dfc00117 	ldw	ra,4(sp)
 8014830:	df000017 	ldw	fp,0(sp)
 8014834:	dec00204 	addi	sp,sp,8
 8014838:	f800283a 	ret

0801483c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 801483c:	defffd04 	addi	sp,sp,-12
 8014840:	dfc00215 	stw	ra,8(sp)
 8014844:	df000115 	stw	fp,4(sp)
 8014848:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801484c:	00820074 	movhi	r2,2049
 8014850:	1095a904 	addi	r2,r2,22180
 8014854:	e0bfff15 	stw	r2,-4(fp)
 8014858:	00000606 	br	8014874 <_do_dtors+0x38>
        (*dtor) (); 
 801485c:	e0bfff17 	ldw	r2,-4(fp)
 8014860:	10800017 	ldw	r2,0(r2)
 8014864:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014868:	e0bfff17 	ldw	r2,-4(fp)
 801486c:	10bfff04 	addi	r2,r2,-4
 8014870:	e0bfff15 	stw	r2,-4(fp)
 8014874:	e0ffff17 	ldw	r3,-4(fp)
 8014878:	00820074 	movhi	r2,2049
 801487c:	1095aa04 	addi	r2,r2,22184
 8014880:	18bff62e 	bgeu	r3,r2,801485c <__alt_data_end+0xfc01485c>
        (*dtor) (); 
}
 8014884:	0001883a 	nop
 8014888:	e037883a 	mov	sp,fp
 801488c:	dfc00117 	ldw	ra,4(sp)
 8014890:	df000017 	ldw	fp,0(sp)
 8014894:	dec00204 	addi	sp,sp,8
 8014898:	f800283a 	ret

0801489c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801489c:	defffa04 	addi	sp,sp,-24
 80148a0:	dfc00515 	stw	ra,20(sp)
 80148a4:	df000415 	stw	fp,16(sp)
 80148a8:	df000404 	addi	fp,sp,16
 80148ac:	e13ffe15 	stw	r4,-8(fp)
 80148b0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80148b4:	e0bfff17 	ldw	r2,-4(fp)
 80148b8:	10800017 	ldw	r2,0(r2)
 80148bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80148c0:	e13ffe17 	ldw	r4,-8(fp)
 80148c4:	80074140 	call	8007414 <strlen>
 80148c8:	10800044 	addi	r2,r2,1
 80148cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80148d0:	00000d06 	br	8014908 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80148d4:	e0bffc17 	ldw	r2,-16(fp)
 80148d8:	10800217 	ldw	r2,8(r2)
 80148dc:	e0fffd17 	ldw	r3,-12(fp)
 80148e0:	180d883a 	mov	r6,r3
 80148e4:	e17ffe17 	ldw	r5,-8(fp)
 80148e8:	1009883a 	mov	r4,r2
 80148ec:	80153600 	call	8015360 <memcmp>
 80148f0:	1000021e 	bne	r2,zero,80148fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80148f4:	e0bffc17 	ldw	r2,-16(fp)
 80148f8:	00000706 	br	8014918 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80148fc:	e0bffc17 	ldw	r2,-16(fp)
 8014900:	10800017 	ldw	r2,0(r2)
 8014904:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014908:	e0fffc17 	ldw	r3,-16(fp)
 801490c:	e0bfff17 	ldw	r2,-4(fp)
 8014910:	18bff01e 	bne	r3,r2,80148d4 <__alt_data_end+0xfc0148d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8014914:	0005883a 	mov	r2,zero
}
 8014918:	e037883a 	mov	sp,fp
 801491c:	dfc00117 	ldw	ra,4(sp)
 8014920:	df000017 	ldw	fp,0(sp)
 8014924:	dec00204 	addi	sp,sp,8
 8014928:	f800283a 	ret

0801492c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801492c:	defffe04 	addi	sp,sp,-8
 8014930:	dfc00115 	stw	ra,4(sp)
 8014934:	df000015 	stw	fp,0(sp)
 8014938:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 801493c:	01440004 	movi	r5,4096
 8014940:	0009883a 	mov	r4,zero
 8014944:	80151e80 	call	80151e8 <alt_icache_flush>
#endif
}
 8014948:	0001883a 	nop
 801494c:	e037883a 	mov	sp,fp
 8014950:	dfc00117 	ldw	ra,4(sp)
 8014954:	df000017 	ldw	fp,0(sp)
 8014958:	dec00204 	addi	sp,sp,8
 801495c:	f800283a 	ret

08014960 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8014960:	defff904 	addi	sp,sp,-28
 8014964:	dfc00615 	stw	ra,24(sp)
 8014968:	df000515 	stw	fp,20(sp)
 801496c:	df000504 	addi	fp,sp,20
 8014970:	e13ffc15 	stw	r4,-16(fp)
 8014974:	e17ffd15 	stw	r5,-12(fp)
 8014978:	e1bffe15 	stw	r6,-8(fp)
 801497c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8014980:	e1bfff17 	ldw	r6,-4(fp)
 8014984:	e17ffe17 	ldw	r5,-8(fp)
 8014988:	e13ffd17 	ldw	r4,-12(fp)
 801498c:	8014d200 	call	8014d20 <open>
 8014990:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8014994:	e0bffb17 	ldw	r2,-20(fp)
 8014998:	10001c16 	blt	r2,zero,8014a0c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801499c:	00820074 	movhi	r2,2049
 80149a0:	1099f404 	addi	r2,r2,26576
 80149a4:	e0fffb17 	ldw	r3,-20(fp)
 80149a8:	18c00324 	muli	r3,r3,12
 80149ac:	10c5883a 	add	r2,r2,r3
 80149b0:	10c00017 	ldw	r3,0(r2)
 80149b4:	e0bffc17 	ldw	r2,-16(fp)
 80149b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80149bc:	00820074 	movhi	r2,2049
 80149c0:	1099f404 	addi	r2,r2,26576
 80149c4:	e0fffb17 	ldw	r3,-20(fp)
 80149c8:	18c00324 	muli	r3,r3,12
 80149cc:	10c5883a 	add	r2,r2,r3
 80149d0:	10800104 	addi	r2,r2,4
 80149d4:	10c00017 	ldw	r3,0(r2)
 80149d8:	e0bffc17 	ldw	r2,-16(fp)
 80149dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80149e0:	00820074 	movhi	r2,2049
 80149e4:	1099f404 	addi	r2,r2,26576
 80149e8:	e0fffb17 	ldw	r3,-20(fp)
 80149ec:	18c00324 	muli	r3,r3,12
 80149f0:	10c5883a 	add	r2,r2,r3
 80149f4:	10800204 	addi	r2,r2,8
 80149f8:	10c00017 	ldw	r3,0(r2)
 80149fc:	e0bffc17 	ldw	r2,-16(fp)
 8014a00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8014a04:	e13ffb17 	ldw	r4,-20(fp)
 8014a08:	8011b080 	call	8011b08 <alt_release_fd>
  }
} 
 8014a0c:	0001883a 	nop
 8014a10:	e037883a 	mov	sp,fp
 8014a14:	dfc00117 	ldw	ra,4(sp)
 8014a18:	df000017 	ldw	fp,0(sp)
 8014a1c:	dec00204 	addi	sp,sp,8
 8014a20:	f800283a 	ret

08014a24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8014a24:	defffb04 	addi	sp,sp,-20
 8014a28:	dfc00415 	stw	ra,16(sp)
 8014a2c:	df000315 	stw	fp,12(sp)
 8014a30:	df000304 	addi	fp,sp,12
 8014a34:	e13ffd15 	stw	r4,-12(fp)
 8014a38:	e17ffe15 	stw	r5,-8(fp)
 8014a3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8014a40:	01c07fc4 	movi	r7,511
 8014a44:	01800044 	movi	r6,1
 8014a48:	e17ffd17 	ldw	r5,-12(fp)
 8014a4c:	01020074 	movhi	r4,2049
 8014a50:	2119f704 	addi	r4,r4,26588
 8014a54:	80149600 	call	8014960 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8014a58:	01c07fc4 	movi	r7,511
 8014a5c:	000d883a 	mov	r6,zero
 8014a60:	e17ffe17 	ldw	r5,-8(fp)
 8014a64:	01020074 	movhi	r4,2049
 8014a68:	2119f404 	addi	r4,r4,26576
 8014a6c:	80149600 	call	8014960 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8014a70:	01c07fc4 	movi	r7,511
 8014a74:	01800044 	movi	r6,1
 8014a78:	e17fff17 	ldw	r5,-4(fp)
 8014a7c:	01020074 	movhi	r4,2049
 8014a80:	2119fa04 	addi	r4,r4,26600
 8014a84:	80149600 	call	8014960 <alt_open_fd>
}  
 8014a88:	0001883a 	nop
 8014a8c:	e037883a 	mov	sp,fp
 8014a90:	dfc00117 	ldw	ra,4(sp)
 8014a94:	df000017 	ldw	fp,0(sp)
 8014a98:	dec00204 	addi	sp,sp,8
 8014a9c:	f800283a 	ret

08014aa0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 8014aa0:	defff004 	addi	sp,sp,-64
 8014aa4:	df000f15 	stw	fp,60(sp)
 8014aa8:	df000f04 	addi	fp,sp,60
 8014aac:	e13ffd15 	stw	r4,-12(fp)
 8014ab0:	e17ffe15 	stw	r5,-8(fp)
 8014ab4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 8014ab8:	00bffa84 	movi	r2,-22
 8014abc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8014ac0:	e0bffd17 	ldw	r2,-12(fp)
 8014ac4:	10800828 	cmpgeui	r2,r2,32
 8014ac8:	1000501e 	bne	r2,zero,8014c0c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014acc:	0005303a 	rdctl	r2,status
 8014ad0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014ad4:	e0fff617 	ldw	r3,-40(fp)
 8014ad8:	00bfff84 	movi	r2,-2
 8014adc:	1884703a 	and	r2,r3,r2
 8014ae0:	1001703a 	wrctl	status,r2
  
  return context;
 8014ae4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8014ae8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 8014aec:	008200b4 	movhi	r2,2050
 8014af0:	10a5dc04 	addi	r2,r2,-26768
 8014af4:	e0fffd17 	ldw	r3,-12(fp)
 8014af8:	180690fa 	slli	r3,r3,3
 8014afc:	10c5883a 	add	r2,r2,r3
 8014b00:	e0ffff17 	ldw	r3,-4(fp)
 8014b04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 8014b08:	008200b4 	movhi	r2,2050
 8014b0c:	10a5dc04 	addi	r2,r2,-26768
 8014b10:	e0fffd17 	ldw	r3,-12(fp)
 8014b14:	180690fa 	slli	r3,r3,3
 8014b18:	10c5883a 	add	r2,r2,r3
 8014b1c:	10800104 	addi	r2,r2,4
 8014b20:	e0fffe17 	ldw	r3,-8(fp)
 8014b24:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 8014b28:	e0bfff17 	ldw	r2,-4(fp)
 8014b2c:	10001926 	beq	r2,zero,8014b94 <alt_irq_register+0xf4>
 8014b30:	e0bffd17 	ldw	r2,-12(fp)
 8014b34:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014b38:	0005303a 	rdctl	r2,status
 8014b3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014b40:	e0fff717 	ldw	r3,-36(fp)
 8014b44:	00bfff84 	movi	r2,-2
 8014b48:	1884703a 	and	r2,r3,r2
 8014b4c:	1001703a 	wrctl	status,r2
  
  return context;
 8014b50:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014b54:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 8014b58:	00c00044 	movi	r3,1
 8014b5c:	e0bff217 	ldw	r2,-56(fp)
 8014b60:	1884983a 	sll	r2,r3,r2
 8014b64:	1007883a 	mov	r3,r2
 8014b68:	d0a72217 	ldw	r2,-25464(gp)
 8014b6c:	1884b03a 	or	r2,r3,r2
 8014b70:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014b74:	d0a72217 	ldw	r2,-25464(gp)
 8014b78:	100170fa 	wrctl	ienable,r2
 8014b7c:	e0bff817 	ldw	r2,-32(fp)
 8014b80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014b84:	e0bff917 	ldw	r2,-28(fp)
 8014b88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014b8c:	0005883a 	mov	r2,zero
 8014b90:	00001906 	br	8014bf8 <alt_irq_register+0x158>
 8014b94:	e0bffd17 	ldw	r2,-12(fp)
 8014b98:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014b9c:	0005303a 	rdctl	r2,status
 8014ba0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014ba4:	e0fffa17 	ldw	r3,-24(fp)
 8014ba8:	00bfff84 	movi	r2,-2
 8014bac:	1884703a 	and	r2,r3,r2
 8014bb0:	1001703a 	wrctl	status,r2
  
  return context;
 8014bb4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014bb8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8014bbc:	00c00044 	movi	r3,1
 8014bc0:	e0bff417 	ldw	r2,-48(fp)
 8014bc4:	1884983a 	sll	r2,r3,r2
 8014bc8:	0084303a 	nor	r2,zero,r2
 8014bcc:	1007883a 	mov	r3,r2
 8014bd0:	d0a72217 	ldw	r2,-25464(gp)
 8014bd4:	1884703a 	and	r2,r3,r2
 8014bd8:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014bdc:	d0a72217 	ldw	r2,-25464(gp)
 8014be0:	100170fa 	wrctl	ienable,r2
 8014be4:	e0bffb17 	ldw	r2,-20(fp)
 8014be8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014bec:	e0bffc17 	ldw	r2,-16(fp)
 8014bf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014bf4:	0005883a 	mov	r2,zero
 8014bf8:	e0bff115 	stw	r2,-60(fp)
 8014bfc:	e0bff317 	ldw	r2,-52(fp)
 8014c00:	e0bff515 	stw	r2,-44(fp)
 8014c04:	e0bff517 	ldw	r2,-44(fp)
 8014c08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 8014c0c:	e0bff117 	ldw	r2,-60(fp)
}
 8014c10:	e037883a 	mov	sp,fp
 8014c14:	df000017 	ldw	fp,0(sp)
 8014c18:	dec00104 	addi	sp,sp,4
 8014c1c:	f800283a 	ret

08014c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014c20:	defffe04 	addi	sp,sp,-8
 8014c24:	dfc00115 	stw	ra,4(sp)
 8014c28:	df000015 	stw	fp,0(sp)
 8014c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014c30:	d0a00c17 	ldw	r2,-32720(gp)
 8014c34:	10000326 	beq	r2,zero,8014c44 <alt_get_errno+0x24>
 8014c38:	d0a00c17 	ldw	r2,-32720(gp)
 8014c3c:	103ee83a 	callr	r2
 8014c40:	00000106 	br	8014c48 <alt_get_errno+0x28>
 8014c44:	d0a71e04 	addi	r2,gp,-25480
}
 8014c48:	e037883a 	mov	sp,fp
 8014c4c:	dfc00117 	ldw	ra,4(sp)
 8014c50:	df000017 	ldw	fp,0(sp)
 8014c54:	dec00204 	addi	sp,sp,8
 8014c58:	f800283a 	ret

08014c5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8014c5c:	defffd04 	addi	sp,sp,-12
 8014c60:	df000215 	stw	fp,8(sp)
 8014c64:	df000204 	addi	fp,sp,8
 8014c68:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8014c6c:	e0bfff17 	ldw	r2,-4(fp)
 8014c70:	10800217 	ldw	r2,8(r2)
 8014c74:	10d00034 	orhi	r3,r2,16384
 8014c78:	e0bfff17 	ldw	r2,-4(fp)
 8014c7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014c80:	e03ffe15 	stw	zero,-8(fp)
 8014c84:	00001d06 	br	8014cfc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014c88:	00820074 	movhi	r2,2049
 8014c8c:	1099f404 	addi	r2,r2,26576
 8014c90:	e0fffe17 	ldw	r3,-8(fp)
 8014c94:	18c00324 	muli	r3,r3,12
 8014c98:	10c5883a 	add	r2,r2,r3
 8014c9c:	10c00017 	ldw	r3,0(r2)
 8014ca0:	e0bfff17 	ldw	r2,-4(fp)
 8014ca4:	10800017 	ldw	r2,0(r2)
 8014ca8:	1880111e 	bne	r3,r2,8014cf0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014cac:	00820074 	movhi	r2,2049
 8014cb0:	1099f404 	addi	r2,r2,26576
 8014cb4:	e0fffe17 	ldw	r3,-8(fp)
 8014cb8:	18c00324 	muli	r3,r3,12
 8014cbc:	10c5883a 	add	r2,r2,r3
 8014cc0:	10800204 	addi	r2,r2,8
 8014cc4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014cc8:	1000090e 	bge	r2,zero,8014cf0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8014ccc:	e0bffe17 	ldw	r2,-8(fp)
 8014cd0:	10c00324 	muli	r3,r2,12
 8014cd4:	00820074 	movhi	r2,2049
 8014cd8:	1099f404 	addi	r2,r2,26576
 8014cdc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014ce0:	e0bfff17 	ldw	r2,-4(fp)
 8014ce4:	18800226 	beq	r3,r2,8014cf0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8014ce8:	00bffcc4 	movi	r2,-13
 8014cec:	00000806 	br	8014d10 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014cf0:	e0bffe17 	ldw	r2,-8(fp)
 8014cf4:	10800044 	addi	r2,r2,1
 8014cf8:	e0bffe15 	stw	r2,-8(fp)
 8014cfc:	d0a00b17 	ldw	r2,-32724(gp)
 8014d00:	1007883a 	mov	r3,r2
 8014d04:	e0bffe17 	ldw	r2,-8(fp)
 8014d08:	18bfdf2e 	bgeu	r3,r2,8014c88 <__alt_data_end+0xfc014c88>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8014d0c:	0005883a 	mov	r2,zero
}
 8014d10:	e037883a 	mov	sp,fp
 8014d14:	df000017 	ldw	fp,0(sp)
 8014d18:	dec00104 	addi	sp,sp,4
 8014d1c:	f800283a 	ret

08014d20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8014d20:	defff604 	addi	sp,sp,-40
 8014d24:	dfc00915 	stw	ra,36(sp)
 8014d28:	df000815 	stw	fp,32(sp)
 8014d2c:	df000804 	addi	fp,sp,32
 8014d30:	e13ffd15 	stw	r4,-12(fp)
 8014d34:	e17ffe15 	stw	r5,-8(fp)
 8014d38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8014d3c:	00bfffc4 	movi	r2,-1
 8014d40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8014d44:	00bffb44 	movi	r2,-19
 8014d48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8014d4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8014d50:	d1600904 	addi	r5,gp,-32732
 8014d54:	e13ffd17 	ldw	r4,-12(fp)
 8014d58:	801489c0 	call	801489c <alt_find_dev>
 8014d5c:	e0bff815 	stw	r2,-32(fp)
 8014d60:	e0bff817 	ldw	r2,-32(fp)
 8014d64:	1000051e 	bne	r2,zero,8014d7c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8014d68:	e13ffd17 	ldw	r4,-12(fp)
 8014d6c:	801503c0 	call	801503c <alt_find_file>
 8014d70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8014d74:	00800044 	movi	r2,1
 8014d78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8014d7c:	e0bff817 	ldw	r2,-32(fp)
 8014d80:	10002926 	beq	r2,zero,8014e28 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8014d84:	e13ff817 	ldw	r4,-32(fp)
 8014d88:	80151440 	call	8015144 <alt_get_fd>
 8014d8c:	e0bff915 	stw	r2,-28(fp)
 8014d90:	e0bff917 	ldw	r2,-28(fp)
 8014d94:	1000030e 	bge	r2,zero,8014da4 <open+0x84>
    {
      status = index;
 8014d98:	e0bff917 	ldw	r2,-28(fp)
 8014d9c:	e0bffa15 	stw	r2,-24(fp)
 8014da0:	00002306 	br	8014e30 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8014da4:	e0bff917 	ldw	r2,-28(fp)
 8014da8:	10c00324 	muli	r3,r2,12
 8014dac:	00820074 	movhi	r2,2049
 8014db0:	1099f404 	addi	r2,r2,26576
 8014db4:	1885883a 	add	r2,r3,r2
 8014db8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8014dbc:	e0fffe17 	ldw	r3,-8(fp)
 8014dc0:	00900034 	movhi	r2,16384
 8014dc4:	10bfffc4 	addi	r2,r2,-1
 8014dc8:	1886703a 	and	r3,r3,r2
 8014dcc:	e0bffc17 	ldw	r2,-16(fp)
 8014dd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8014dd4:	e0bffb17 	ldw	r2,-20(fp)
 8014dd8:	1000051e 	bne	r2,zero,8014df0 <open+0xd0>
 8014ddc:	e13ffc17 	ldw	r4,-16(fp)
 8014de0:	8014c5c0 	call	8014c5c <alt_file_locked>
 8014de4:	e0bffa15 	stw	r2,-24(fp)
 8014de8:	e0bffa17 	ldw	r2,-24(fp)
 8014dec:	10001016 	blt	r2,zero,8014e30 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8014df0:	e0bff817 	ldw	r2,-32(fp)
 8014df4:	10800317 	ldw	r2,12(r2)
 8014df8:	10000826 	beq	r2,zero,8014e1c <open+0xfc>
 8014dfc:	e0bff817 	ldw	r2,-32(fp)
 8014e00:	10800317 	ldw	r2,12(r2)
 8014e04:	e1ffff17 	ldw	r7,-4(fp)
 8014e08:	e1bffe17 	ldw	r6,-8(fp)
 8014e0c:	e17ffd17 	ldw	r5,-12(fp)
 8014e10:	e13ffc17 	ldw	r4,-16(fp)
 8014e14:	103ee83a 	callr	r2
 8014e18:	00000106 	br	8014e20 <open+0x100>
 8014e1c:	0005883a 	mov	r2,zero
 8014e20:	e0bffa15 	stw	r2,-24(fp)
 8014e24:	00000206 	br	8014e30 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8014e28:	00bffb44 	movi	r2,-19
 8014e2c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8014e30:	e0bffa17 	ldw	r2,-24(fp)
 8014e34:	1000090e 	bge	r2,zero,8014e5c <open+0x13c>
  {
    alt_release_fd (index);  
 8014e38:	e13ff917 	ldw	r4,-28(fp)
 8014e3c:	8011b080 	call	8011b08 <alt_release_fd>
    ALT_ERRNO = -status;
 8014e40:	8014c200 	call	8014c20 <alt_get_errno>
 8014e44:	1007883a 	mov	r3,r2
 8014e48:	e0bffa17 	ldw	r2,-24(fp)
 8014e4c:	0085c83a 	sub	r2,zero,r2
 8014e50:	18800015 	stw	r2,0(r3)
    return -1;
 8014e54:	00bfffc4 	movi	r2,-1
 8014e58:	00000106 	br	8014e60 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8014e5c:	e0bff917 	ldw	r2,-28(fp)
}
 8014e60:	e037883a 	mov	sp,fp
 8014e64:	dfc00117 	ldw	ra,4(sp)
 8014e68:	df000017 	ldw	fp,0(sp)
 8014e6c:	dec00204 	addi	sp,sp,8
 8014e70:	f800283a 	ret

08014e74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8014e74:	defffa04 	addi	sp,sp,-24
 8014e78:	df000515 	stw	fp,20(sp)
 8014e7c:	df000504 	addi	fp,sp,20
 8014e80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014e84:	0005303a 	rdctl	r2,status
 8014e88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014e8c:	e0fffc17 	ldw	r3,-16(fp)
 8014e90:	00bfff84 	movi	r2,-2
 8014e94:	1884703a 	and	r2,r3,r2
 8014e98:	1001703a 	wrctl	status,r2
  
  return context;
 8014e9c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8014ea0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8014ea4:	e0bfff17 	ldw	r2,-4(fp)
 8014ea8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8014eac:	e0bffd17 	ldw	r2,-12(fp)
 8014eb0:	10800017 	ldw	r2,0(r2)
 8014eb4:	e0fffd17 	ldw	r3,-12(fp)
 8014eb8:	18c00117 	ldw	r3,4(r3)
 8014ebc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8014ec0:	e0bffd17 	ldw	r2,-12(fp)
 8014ec4:	10800117 	ldw	r2,4(r2)
 8014ec8:	e0fffd17 	ldw	r3,-12(fp)
 8014ecc:	18c00017 	ldw	r3,0(r3)
 8014ed0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8014ed4:	e0bffd17 	ldw	r2,-12(fp)
 8014ed8:	e0fffd17 	ldw	r3,-12(fp)
 8014edc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8014ee0:	e0bffd17 	ldw	r2,-12(fp)
 8014ee4:	e0fffd17 	ldw	r3,-12(fp)
 8014ee8:	10c00015 	stw	r3,0(r2)
 8014eec:	e0bffb17 	ldw	r2,-20(fp)
 8014ef0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014ef4:	e0bffe17 	ldw	r2,-8(fp)
 8014ef8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8014efc:	0001883a 	nop
 8014f00:	e037883a 	mov	sp,fp
 8014f04:	df000017 	ldw	fp,0(sp)
 8014f08:	dec00104 	addi	sp,sp,4
 8014f0c:	f800283a 	ret

08014f10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8014f10:	defffb04 	addi	sp,sp,-20
 8014f14:	dfc00415 	stw	ra,16(sp)
 8014f18:	df000315 	stw	fp,12(sp)
 8014f1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8014f20:	d0a01317 	ldw	r2,-32692(gp)
 8014f24:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8014f28:	d0a72417 	ldw	r2,-25456(gp)
 8014f2c:	10800044 	addi	r2,r2,1
 8014f30:	d0a72415 	stw	r2,-25456(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014f34:	00002e06 	br	8014ff0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8014f38:	e0bffd17 	ldw	r2,-12(fp)
 8014f3c:	10800017 	ldw	r2,0(r2)
 8014f40:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8014f44:	e0bffd17 	ldw	r2,-12(fp)
 8014f48:	10800403 	ldbu	r2,16(r2)
 8014f4c:	10803fcc 	andi	r2,r2,255
 8014f50:	10000426 	beq	r2,zero,8014f64 <alt_tick+0x54>
 8014f54:	d0a72417 	ldw	r2,-25456(gp)
 8014f58:	1000021e 	bne	r2,zero,8014f64 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8014f5c:	e0bffd17 	ldw	r2,-12(fp)
 8014f60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8014f64:	e0bffd17 	ldw	r2,-12(fp)
 8014f68:	10800217 	ldw	r2,8(r2)
 8014f6c:	d0e72417 	ldw	r3,-25456(gp)
 8014f70:	18801d36 	bltu	r3,r2,8014fe8 <alt_tick+0xd8>
 8014f74:	e0bffd17 	ldw	r2,-12(fp)
 8014f78:	10800403 	ldbu	r2,16(r2)
 8014f7c:	10803fcc 	andi	r2,r2,255
 8014f80:	1000191e 	bne	r2,zero,8014fe8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8014f84:	e0bffd17 	ldw	r2,-12(fp)
 8014f88:	10800317 	ldw	r2,12(r2)
 8014f8c:	e0fffd17 	ldw	r3,-12(fp)
 8014f90:	18c00517 	ldw	r3,20(r3)
 8014f94:	1809883a 	mov	r4,r3
 8014f98:	103ee83a 	callr	r2
 8014f9c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8014fa0:	e0bfff17 	ldw	r2,-4(fp)
 8014fa4:	1000031e 	bne	r2,zero,8014fb4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8014fa8:	e13ffd17 	ldw	r4,-12(fp)
 8014fac:	8014e740 	call	8014e74 <alt_alarm_stop>
 8014fb0:	00000d06 	br	8014fe8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8014fb4:	e0bffd17 	ldw	r2,-12(fp)
 8014fb8:	10c00217 	ldw	r3,8(r2)
 8014fbc:	e0bfff17 	ldw	r2,-4(fp)
 8014fc0:	1887883a 	add	r3,r3,r2
 8014fc4:	e0bffd17 	ldw	r2,-12(fp)
 8014fc8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8014fcc:	e0bffd17 	ldw	r2,-12(fp)
 8014fd0:	10c00217 	ldw	r3,8(r2)
 8014fd4:	d0a72417 	ldw	r2,-25456(gp)
 8014fd8:	1880032e 	bgeu	r3,r2,8014fe8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8014fdc:	e0bffd17 	ldw	r2,-12(fp)
 8014fe0:	00c00044 	movi	r3,1
 8014fe4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8014fe8:	e0bffe17 	ldw	r2,-8(fp)
 8014fec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014ff0:	e0fffd17 	ldw	r3,-12(fp)
 8014ff4:	d0a01304 	addi	r2,gp,-32692
 8014ff8:	18bfcf1e 	bne	r3,r2,8014f38 <__alt_data_end+0xfc014f38>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8014ffc:	0001883a 	nop
}
 8015000:	0001883a 	nop
 8015004:	e037883a 	mov	sp,fp
 8015008:	dfc00117 	ldw	ra,4(sp)
 801500c:	df000017 	ldw	fp,0(sp)
 8015010:	dec00204 	addi	sp,sp,8
 8015014:	f800283a 	ret

08015018 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8015018:	deffff04 	addi	sp,sp,-4
 801501c:	df000015 	stw	fp,0(sp)
 8015020:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8015024:	000170fa 	wrctl	ienable,zero
}
 8015028:	0001883a 	nop
 801502c:	e037883a 	mov	sp,fp
 8015030:	df000017 	ldw	fp,0(sp)
 8015034:	dec00104 	addi	sp,sp,4
 8015038:	f800283a 	ret

0801503c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801503c:	defffb04 	addi	sp,sp,-20
 8015040:	dfc00415 	stw	ra,16(sp)
 8015044:	df000315 	stw	fp,12(sp)
 8015048:	df000304 	addi	fp,sp,12
 801504c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8015050:	d0a00717 	ldw	r2,-32740(gp)
 8015054:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015058:	00003106 	br	8015120 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 801505c:	e0bffd17 	ldw	r2,-12(fp)
 8015060:	10800217 	ldw	r2,8(r2)
 8015064:	1009883a 	mov	r4,r2
 8015068:	80074140 	call	8007414 <strlen>
 801506c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8015070:	e0bffd17 	ldw	r2,-12(fp)
 8015074:	10c00217 	ldw	r3,8(r2)
 8015078:	e0bffe17 	ldw	r2,-8(fp)
 801507c:	10bfffc4 	addi	r2,r2,-1
 8015080:	1885883a 	add	r2,r3,r2
 8015084:	10800003 	ldbu	r2,0(r2)
 8015088:	10803fcc 	andi	r2,r2,255
 801508c:	1080201c 	xori	r2,r2,128
 8015090:	10bfe004 	addi	r2,r2,-128
 8015094:	10800bd8 	cmpnei	r2,r2,47
 8015098:	1000031e 	bne	r2,zero,80150a8 <alt_find_file+0x6c>
    {
      len -= 1;
 801509c:	e0bffe17 	ldw	r2,-8(fp)
 80150a0:	10bfffc4 	addi	r2,r2,-1
 80150a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80150a8:	e0bffe17 	ldw	r2,-8(fp)
 80150ac:	e0ffff17 	ldw	r3,-4(fp)
 80150b0:	1885883a 	add	r2,r3,r2
 80150b4:	10800003 	ldbu	r2,0(r2)
 80150b8:	10803fcc 	andi	r2,r2,255
 80150bc:	1080201c 	xori	r2,r2,128
 80150c0:	10bfe004 	addi	r2,r2,-128
 80150c4:	10800be0 	cmpeqi	r2,r2,47
 80150c8:	1000081e 	bne	r2,zero,80150ec <alt_find_file+0xb0>
 80150cc:	e0bffe17 	ldw	r2,-8(fp)
 80150d0:	e0ffff17 	ldw	r3,-4(fp)
 80150d4:	1885883a 	add	r2,r3,r2
 80150d8:	10800003 	ldbu	r2,0(r2)
 80150dc:	10803fcc 	andi	r2,r2,255
 80150e0:	1080201c 	xori	r2,r2,128
 80150e4:	10bfe004 	addi	r2,r2,-128
 80150e8:	10000a1e 	bne	r2,zero,8015114 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80150ec:	e0bffd17 	ldw	r2,-12(fp)
 80150f0:	10800217 	ldw	r2,8(r2)
 80150f4:	e0fffe17 	ldw	r3,-8(fp)
 80150f8:	180d883a 	mov	r6,r3
 80150fc:	e17fff17 	ldw	r5,-4(fp)
 8015100:	1009883a 	mov	r4,r2
 8015104:	80153600 	call	8015360 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8015108:	1000021e 	bne	r2,zero,8015114 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801510c:	e0bffd17 	ldw	r2,-12(fp)
 8015110:	00000706 	br	8015130 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8015114:	e0bffd17 	ldw	r2,-12(fp)
 8015118:	10800017 	ldw	r2,0(r2)
 801511c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015120:	e0fffd17 	ldw	r3,-12(fp)
 8015124:	d0a00704 	addi	r2,gp,-32740
 8015128:	18bfcc1e 	bne	r3,r2,801505c <__alt_data_end+0xfc01505c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801512c:	0005883a 	mov	r2,zero
}
 8015130:	e037883a 	mov	sp,fp
 8015134:	dfc00117 	ldw	ra,4(sp)
 8015138:	df000017 	ldw	fp,0(sp)
 801513c:	dec00204 	addi	sp,sp,8
 8015140:	f800283a 	ret

08015144 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8015144:	defffc04 	addi	sp,sp,-16
 8015148:	df000315 	stw	fp,12(sp)
 801514c:	df000304 	addi	fp,sp,12
 8015150:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8015154:	00bffa04 	movi	r2,-24
 8015158:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801515c:	e03ffd15 	stw	zero,-12(fp)
 8015160:	00001906 	br	80151c8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8015164:	00820074 	movhi	r2,2049
 8015168:	1099f404 	addi	r2,r2,26576
 801516c:	e0fffd17 	ldw	r3,-12(fp)
 8015170:	18c00324 	muli	r3,r3,12
 8015174:	10c5883a 	add	r2,r2,r3
 8015178:	10800017 	ldw	r2,0(r2)
 801517c:	10000f1e 	bne	r2,zero,80151bc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8015180:	00820074 	movhi	r2,2049
 8015184:	1099f404 	addi	r2,r2,26576
 8015188:	e0fffd17 	ldw	r3,-12(fp)
 801518c:	18c00324 	muli	r3,r3,12
 8015190:	10c5883a 	add	r2,r2,r3
 8015194:	e0ffff17 	ldw	r3,-4(fp)
 8015198:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801519c:	d0e00b17 	ldw	r3,-32724(gp)
 80151a0:	e0bffd17 	ldw	r2,-12(fp)
 80151a4:	1880020e 	bge	r3,r2,80151b0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 80151a8:	e0bffd17 	ldw	r2,-12(fp)
 80151ac:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 80151b0:	e0bffd17 	ldw	r2,-12(fp)
 80151b4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80151b8:	00000606 	br	80151d4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80151bc:	e0bffd17 	ldw	r2,-12(fp)
 80151c0:	10800044 	addi	r2,r2,1
 80151c4:	e0bffd15 	stw	r2,-12(fp)
 80151c8:	e0bffd17 	ldw	r2,-12(fp)
 80151cc:	10800810 	cmplti	r2,r2,32
 80151d0:	103fe41e 	bne	r2,zero,8015164 <__alt_data_end+0xfc015164>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80151d4:	e0bffe17 	ldw	r2,-8(fp)
}
 80151d8:	e037883a 	mov	sp,fp
 80151dc:	df000017 	ldw	fp,0(sp)
 80151e0:	dec00104 	addi	sp,sp,4
 80151e4:	f800283a 	ret

080151e8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80151e8:	defffb04 	addi	sp,sp,-20
 80151ec:	df000415 	stw	fp,16(sp)
 80151f0:	df000404 	addi	fp,sp,16
 80151f4:	e13ffe15 	stw	r4,-8(fp)
 80151f8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80151fc:	e0bfff17 	ldw	r2,-4(fp)
 8015200:	10840070 	cmpltui	r2,r2,4097
 8015204:	1000021e 	bne	r2,zero,8015210 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8015208:	00840004 	movi	r2,4096
 801520c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8015210:	e0fffe17 	ldw	r3,-8(fp)
 8015214:	e0bfff17 	ldw	r2,-4(fp)
 8015218:	1885883a 	add	r2,r3,r2
 801521c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8015220:	e0bffe17 	ldw	r2,-8(fp)
 8015224:	e0bffc15 	stw	r2,-16(fp)
 8015228:	00000506 	br	8015240 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 801522c:	e0bffc17 	ldw	r2,-16(fp)
 8015230:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8015234:	e0bffc17 	ldw	r2,-16(fp)
 8015238:	10800804 	addi	r2,r2,32
 801523c:	e0bffc15 	stw	r2,-16(fp)
 8015240:	e0fffc17 	ldw	r3,-16(fp)
 8015244:	e0bffd17 	ldw	r2,-12(fp)
 8015248:	18bff836 	bltu	r3,r2,801522c <__alt_data_end+0xfc01522c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 801524c:	e0bffe17 	ldw	r2,-8(fp)
 8015250:	108007cc 	andi	r2,r2,31
 8015254:	10000226 	beq	r2,zero,8015260 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8015258:	e0bffc17 	ldw	r2,-16(fp)
 801525c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8015260:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8015264:	0001883a 	nop
 8015268:	e037883a 	mov	sp,fp
 801526c:	df000017 	ldw	fp,0(sp)
 8015270:	dec00104 	addi	sp,sp,4
 8015274:	f800283a 	ret

08015278 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8015278:	defffe04 	addi	sp,sp,-8
 801527c:	df000115 	stw	fp,4(sp)
 8015280:	df000104 	addi	fp,sp,4
 8015284:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8015288:	e0bfff17 	ldw	r2,-4(fp)
 801528c:	10bffe84 	addi	r2,r2,-6
 8015290:	10c00428 	cmpgeui	r3,r2,16
 8015294:	18001a1e 	bne	r3,zero,8015300 <alt_exception_cause_generated_bad_addr+0x88>
 8015298:	100690ba 	slli	r3,r2,2
 801529c:	00820074 	movhi	r2,2049
 80152a0:	1094ac04 	addi	r2,r2,21168
 80152a4:	1885883a 	add	r2,r3,r2
 80152a8:	10800017 	ldw	r2,0(r2)
 80152ac:	1000683a 	jmp	r2
 80152b0:	080152f0 	cmpltui	zero,at,1355
 80152b4:	080152f0 	cmpltui	zero,at,1355
 80152b8:	08015300 	call	801530 <__ram_exceptions_end+0x7e12e8>
 80152bc:	08015300 	call	801530 <__ram_exceptions_end+0x7e12e8>
 80152c0:	08015300 	call	801530 <__ram_exceptions_end+0x7e12e8>
 80152c4:	080152f0 	cmpltui	zero,at,1355
 80152c8:	080152f8 	rdprs	zero,at,1355
 80152cc:	08015300 	call	801530 <__ram_exceptions_end+0x7e12e8>
 80152d0:	080152f0 	cmpltui	zero,at,1355
 80152d4:	080152f0 	cmpltui	zero,at,1355
 80152d8:	08015300 	call	801530 <__ram_exceptions_end+0x7e12e8>
 80152dc:	080152f0 	cmpltui	zero,at,1355
 80152e0:	080152f8 	rdprs	zero,at,1355
 80152e4:	08015300 	call	801530 <__ram_exceptions_end+0x7e12e8>
 80152e8:	08015300 	call	801530 <__ram_exceptions_end+0x7e12e8>
 80152ec:	080152f0 	cmpltui	zero,at,1355
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80152f0:	00800044 	movi	r2,1
 80152f4:	00000306 	br	8015304 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80152f8:	0005883a 	mov	r2,zero
 80152fc:	00000106 	br	8015304 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8015300:	0005883a 	mov	r2,zero
  }
}
 8015304:	e037883a 	mov	sp,fp
 8015308:	df000017 	ldw	fp,0(sp)
 801530c:	dec00104 	addi	sp,sp,4
 8015310:	f800283a 	ret

08015314 <atexit>:
 8015314:	200b883a 	mov	r5,r4
 8015318:	000f883a 	mov	r7,zero
 801531c:	000d883a 	mov	r6,zero
 8015320:	0009883a 	mov	r4,zero
 8015324:	80153dc1 	jmpi	80153dc <__register_exitproc>

08015328 <exit>:
 8015328:	defffe04 	addi	sp,sp,-8
 801532c:	000b883a 	mov	r5,zero
 8015330:	dc000015 	stw	r16,0(sp)
 8015334:	dfc00115 	stw	ra,4(sp)
 8015338:	2021883a 	mov	r16,r4
 801533c:	80154f40 	call	80154f4 <__call_exitprocs>
 8015340:	00820074 	movhi	r2,2049
 8015344:	109ead04 	addi	r2,r2,31412
 8015348:	11000017 	ldw	r4,0(r2)
 801534c:	20800f17 	ldw	r2,60(r4)
 8015350:	10000126 	beq	r2,zero,8015358 <exit+0x30>
 8015354:	103ee83a 	callr	r2
 8015358:	8009883a 	mov	r4,r16
 801535c:	80156740 	call	8015674 <_exit>

08015360 <memcmp>:
 8015360:	01c000c4 	movi	r7,3
 8015364:	3980192e 	bgeu	r7,r6,80153cc <memcmp+0x6c>
 8015368:	2144b03a 	or	r2,r4,r5
 801536c:	11c4703a 	and	r2,r2,r7
 8015370:	10000f26 	beq	r2,zero,80153b0 <memcmp+0x50>
 8015374:	20800003 	ldbu	r2,0(r4)
 8015378:	28c00003 	ldbu	r3,0(r5)
 801537c:	10c0151e 	bne	r2,r3,80153d4 <memcmp+0x74>
 8015380:	31bfff84 	addi	r6,r6,-2
 8015384:	01ffffc4 	movi	r7,-1
 8015388:	00000406 	br	801539c <memcmp+0x3c>
 801538c:	20800003 	ldbu	r2,0(r4)
 8015390:	28c00003 	ldbu	r3,0(r5)
 8015394:	31bfffc4 	addi	r6,r6,-1
 8015398:	10c00e1e 	bne	r2,r3,80153d4 <memcmp+0x74>
 801539c:	21000044 	addi	r4,r4,1
 80153a0:	29400044 	addi	r5,r5,1
 80153a4:	31fff91e 	bne	r6,r7,801538c <__alt_data_end+0xfc01538c>
 80153a8:	0005883a 	mov	r2,zero
 80153ac:	f800283a 	ret
 80153b0:	20c00017 	ldw	r3,0(r4)
 80153b4:	28800017 	ldw	r2,0(r5)
 80153b8:	18bfee1e 	bne	r3,r2,8015374 <__alt_data_end+0xfc015374>
 80153bc:	31bfff04 	addi	r6,r6,-4
 80153c0:	21000104 	addi	r4,r4,4
 80153c4:	29400104 	addi	r5,r5,4
 80153c8:	39bff936 	bltu	r7,r6,80153b0 <__alt_data_end+0xfc0153b0>
 80153cc:	303fe91e 	bne	r6,zero,8015374 <__alt_data_end+0xfc015374>
 80153d0:	003ff506 	br	80153a8 <__alt_data_end+0xfc0153a8>
 80153d4:	10c5c83a 	sub	r2,r2,r3
 80153d8:	f800283a 	ret

080153dc <__register_exitproc>:
 80153dc:	defffa04 	addi	sp,sp,-24
 80153e0:	dc000315 	stw	r16,12(sp)
 80153e4:	04020074 	movhi	r16,2049
 80153e8:	841ead04 	addi	r16,r16,31412
 80153ec:	80c00017 	ldw	r3,0(r16)
 80153f0:	dc400415 	stw	r17,16(sp)
 80153f4:	dfc00515 	stw	ra,20(sp)
 80153f8:	18805217 	ldw	r2,328(r3)
 80153fc:	2023883a 	mov	r17,r4
 8015400:	10003726 	beq	r2,zero,80154e0 <__register_exitproc+0x104>
 8015404:	10c00117 	ldw	r3,4(r2)
 8015408:	010007c4 	movi	r4,31
 801540c:	20c00e16 	blt	r4,r3,8015448 <__register_exitproc+0x6c>
 8015410:	1a000044 	addi	r8,r3,1
 8015414:	8800221e 	bne	r17,zero,80154a0 <__register_exitproc+0xc4>
 8015418:	18c00084 	addi	r3,r3,2
 801541c:	18c7883a 	add	r3,r3,r3
 8015420:	18c7883a 	add	r3,r3,r3
 8015424:	12000115 	stw	r8,4(r2)
 8015428:	10c7883a 	add	r3,r2,r3
 801542c:	19400015 	stw	r5,0(r3)
 8015430:	0005883a 	mov	r2,zero
 8015434:	dfc00517 	ldw	ra,20(sp)
 8015438:	dc400417 	ldw	r17,16(sp)
 801543c:	dc000317 	ldw	r16,12(sp)
 8015440:	dec00604 	addi	sp,sp,24
 8015444:	f800283a 	ret
 8015448:	00800034 	movhi	r2,0
 801544c:	10800004 	addi	r2,r2,0
 8015450:	10002626 	beq	r2,zero,80154ec <__register_exitproc+0x110>
 8015454:	01006404 	movi	r4,400
 8015458:	d9400015 	stw	r5,0(sp)
 801545c:	d9800115 	stw	r6,4(sp)
 8015460:	d9c00215 	stw	r7,8(sp)
 8015464:	00000000 	call	0 <__reset-0x20000>
 8015468:	d9400017 	ldw	r5,0(sp)
 801546c:	d9800117 	ldw	r6,4(sp)
 8015470:	d9c00217 	ldw	r7,8(sp)
 8015474:	10001d26 	beq	r2,zero,80154ec <__register_exitproc+0x110>
 8015478:	81000017 	ldw	r4,0(r16)
 801547c:	10000115 	stw	zero,4(r2)
 8015480:	02000044 	movi	r8,1
 8015484:	22405217 	ldw	r9,328(r4)
 8015488:	0007883a 	mov	r3,zero
 801548c:	12400015 	stw	r9,0(r2)
 8015490:	20805215 	stw	r2,328(r4)
 8015494:	10006215 	stw	zero,392(r2)
 8015498:	10006315 	stw	zero,396(r2)
 801549c:	883fde26 	beq	r17,zero,8015418 <__alt_data_end+0xfc015418>
 80154a0:	18c9883a 	add	r4,r3,r3
 80154a4:	2109883a 	add	r4,r4,r4
 80154a8:	1109883a 	add	r4,r2,r4
 80154ac:	21802215 	stw	r6,136(r4)
 80154b0:	01800044 	movi	r6,1
 80154b4:	12406217 	ldw	r9,392(r2)
 80154b8:	30cc983a 	sll	r6,r6,r3
 80154bc:	4992b03a 	or	r9,r9,r6
 80154c0:	12406215 	stw	r9,392(r2)
 80154c4:	21c04215 	stw	r7,264(r4)
 80154c8:	01000084 	movi	r4,2
 80154cc:	893fd21e 	bne	r17,r4,8015418 <__alt_data_end+0xfc015418>
 80154d0:	11006317 	ldw	r4,396(r2)
 80154d4:	218cb03a 	or	r6,r4,r6
 80154d8:	11806315 	stw	r6,396(r2)
 80154dc:	003fce06 	br	8015418 <__alt_data_end+0xfc015418>
 80154e0:	18805304 	addi	r2,r3,332
 80154e4:	18805215 	stw	r2,328(r3)
 80154e8:	003fc606 	br	8015404 <__alt_data_end+0xfc015404>
 80154ec:	00bfffc4 	movi	r2,-1
 80154f0:	003fd006 	br	8015434 <__alt_data_end+0xfc015434>

080154f4 <__call_exitprocs>:
 80154f4:	defff504 	addi	sp,sp,-44
 80154f8:	df000915 	stw	fp,36(sp)
 80154fc:	dd400615 	stw	r21,24(sp)
 8015500:	dc800315 	stw	r18,12(sp)
 8015504:	dfc00a15 	stw	ra,40(sp)
 8015508:	ddc00815 	stw	r23,32(sp)
 801550c:	dd800715 	stw	r22,28(sp)
 8015510:	dd000515 	stw	r20,20(sp)
 8015514:	dcc00415 	stw	r19,16(sp)
 8015518:	dc400215 	stw	r17,8(sp)
 801551c:	dc000115 	stw	r16,4(sp)
 8015520:	d9000015 	stw	r4,0(sp)
 8015524:	2839883a 	mov	fp,r5
 8015528:	04800044 	movi	r18,1
 801552c:	057fffc4 	movi	r21,-1
 8015530:	00820074 	movhi	r2,2049
 8015534:	109ead04 	addi	r2,r2,31412
 8015538:	12000017 	ldw	r8,0(r2)
 801553c:	45005217 	ldw	r20,328(r8)
 8015540:	44c05204 	addi	r19,r8,328
 8015544:	a0001c26 	beq	r20,zero,80155b8 <__call_exitprocs+0xc4>
 8015548:	a0800117 	ldw	r2,4(r20)
 801554c:	15ffffc4 	addi	r23,r2,-1
 8015550:	b8000d16 	blt	r23,zero,8015588 <__call_exitprocs+0x94>
 8015554:	14000044 	addi	r16,r2,1
 8015558:	8421883a 	add	r16,r16,r16
 801555c:	8421883a 	add	r16,r16,r16
 8015560:	84402004 	addi	r17,r16,128
 8015564:	a463883a 	add	r17,r20,r17
 8015568:	a421883a 	add	r16,r20,r16
 801556c:	e0001e26 	beq	fp,zero,80155e8 <__call_exitprocs+0xf4>
 8015570:	80804017 	ldw	r2,256(r16)
 8015574:	e0801c26 	beq	fp,r2,80155e8 <__call_exitprocs+0xf4>
 8015578:	bdffffc4 	addi	r23,r23,-1
 801557c:	843fff04 	addi	r16,r16,-4
 8015580:	8c7fff04 	addi	r17,r17,-4
 8015584:	bd7ff91e 	bne	r23,r21,801556c <__alt_data_end+0xfc01556c>
 8015588:	00800034 	movhi	r2,0
 801558c:	10800004 	addi	r2,r2,0
 8015590:	10000926 	beq	r2,zero,80155b8 <__call_exitprocs+0xc4>
 8015594:	a0800117 	ldw	r2,4(r20)
 8015598:	1000301e 	bne	r2,zero,801565c <__call_exitprocs+0x168>
 801559c:	a0800017 	ldw	r2,0(r20)
 80155a0:	10003226 	beq	r2,zero,801566c <__call_exitprocs+0x178>
 80155a4:	a009883a 	mov	r4,r20
 80155a8:	98800015 	stw	r2,0(r19)
 80155ac:	00000000 	call	0 <__reset-0x20000>
 80155b0:	9d000017 	ldw	r20,0(r19)
 80155b4:	a03fe41e 	bne	r20,zero,8015548 <__alt_data_end+0xfc015548>
 80155b8:	dfc00a17 	ldw	ra,40(sp)
 80155bc:	df000917 	ldw	fp,36(sp)
 80155c0:	ddc00817 	ldw	r23,32(sp)
 80155c4:	dd800717 	ldw	r22,28(sp)
 80155c8:	dd400617 	ldw	r21,24(sp)
 80155cc:	dd000517 	ldw	r20,20(sp)
 80155d0:	dcc00417 	ldw	r19,16(sp)
 80155d4:	dc800317 	ldw	r18,12(sp)
 80155d8:	dc400217 	ldw	r17,8(sp)
 80155dc:	dc000117 	ldw	r16,4(sp)
 80155e0:	dec00b04 	addi	sp,sp,44
 80155e4:	f800283a 	ret
 80155e8:	a0800117 	ldw	r2,4(r20)
 80155ec:	80c00017 	ldw	r3,0(r16)
 80155f0:	10bfffc4 	addi	r2,r2,-1
 80155f4:	15c01426 	beq	r2,r23,8015648 <__call_exitprocs+0x154>
 80155f8:	80000015 	stw	zero,0(r16)
 80155fc:	183fde26 	beq	r3,zero,8015578 <__alt_data_end+0xfc015578>
 8015600:	95c8983a 	sll	r4,r18,r23
 8015604:	a0806217 	ldw	r2,392(r20)
 8015608:	a5800117 	ldw	r22,4(r20)
 801560c:	2084703a 	and	r2,r4,r2
 8015610:	10000b26 	beq	r2,zero,8015640 <__call_exitprocs+0x14c>
 8015614:	a0806317 	ldw	r2,396(r20)
 8015618:	2088703a 	and	r4,r4,r2
 801561c:	20000c1e 	bne	r4,zero,8015650 <__call_exitprocs+0x15c>
 8015620:	89400017 	ldw	r5,0(r17)
 8015624:	d9000017 	ldw	r4,0(sp)
 8015628:	183ee83a 	callr	r3
 801562c:	a0800117 	ldw	r2,4(r20)
 8015630:	15bfbf1e 	bne	r2,r22,8015530 <__alt_data_end+0xfc015530>
 8015634:	98800017 	ldw	r2,0(r19)
 8015638:	153fcf26 	beq	r2,r20,8015578 <__alt_data_end+0xfc015578>
 801563c:	003fbc06 	br	8015530 <__alt_data_end+0xfc015530>
 8015640:	183ee83a 	callr	r3
 8015644:	003ff906 	br	801562c <__alt_data_end+0xfc01562c>
 8015648:	a5c00115 	stw	r23,4(r20)
 801564c:	003feb06 	br	80155fc <__alt_data_end+0xfc0155fc>
 8015650:	89000017 	ldw	r4,0(r17)
 8015654:	183ee83a 	callr	r3
 8015658:	003ff406 	br	801562c <__alt_data_end+0xfc01562c>
 801565c:	a0800017 	ldw	r2,0(r20)
 8015660:	a027883a 	mov	r19,r20
 8015664:	1029883a 	mov	r20,r2
 8015668:	003fb606 	br	8015544 <__alt_data_end+0xfc015544>
 801566c:	0005883a 	mov	r2,zero
 8015670:	003ffb06 	br	8015660 <__alt_data_end+0xfc015660>

08015674 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8015674:	defffd04 	addi	sp,sp,-12
 8015678:	df000215 	stw	fp,8(sp)
 801567c:	df000204 	addi	fp,sp,8
 8015680:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8015684:	0001883a 	nop
 8015688:	e0bfff17 	ldw	r2,-4(fp)
 801568c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8015690:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8015694:	10000226 	beq	r2,zero,80156a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 8015698:	002af070 	cmpltui	zero,zero,43969
 801569c:	00000106 	br	80156a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80156a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80156a4:	003fff06 	br	80156a4 <__alt_data_end+0xfc0156a4>
