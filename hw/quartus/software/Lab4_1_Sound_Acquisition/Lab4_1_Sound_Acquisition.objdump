
Lab4_1_Sound_Acquisition.elf:     file format elf32-littlenios2
Lab4_1_Sound_Acquisition.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000228

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x08000000 align 2**12
         filesz 0x00000228 memsz 0x00000228 flags r-x
    LOAD off    0x00002228 vaddr 0x08000228 paddr 0x08000228 align 2**12
         filesz 0x0000d694 memsz 0x0000d694 flags r-x
    LOAD off    0x0000f8bc vaddr 0x0800d8bc paddr 0x0800f3f4 align 2**12
         filesz 0x00001b38 memsz 0x00001b38 flags rw-
    LOAD off    0x00011f2c vaddr 0x08010f2c paddr 0x08010f2c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00020020  08000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d2b4  08000228  08000228  00002228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e0  0800d4dc  0800d4dc  0000f4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b38  0800d8bc  0800f3f4  0000f8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  08010f2c  08010f2c  00011f2c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00020248  00020248  000113f4  2**0
                  CONTENTS
  7 .SDRAM_controller 00000000  08011080  08011080  000113f4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000113f4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ee0  00000000  00000000  00011418  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001d754  00000000  00000000  000122f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008a9b  00000000  00000000  0002fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a7e6  00000000  00000000  000384e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002320  00000000  00000000  00042cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e92  00000000  00000000  00044ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00010001  00000000  00000000  00048e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00058e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001678  00000000  00000000  00058ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005dafa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000017  00000000  00000000  0005dafd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005db14  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005db15  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005db16  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005db1a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005db1e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0005db22  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0005db2d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0005db38  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005db43  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0005db4e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000baf4  00000000  00000000  0005db8d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b61d4  00000000  00000000  00069681  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
08000228 l    d  .text	00000000 .text
0800d4dc l    d  .rodata	00000000 .rodata
0800d8bc l    d  .rwdata	00000000 .rwdata
08010f2c l    d  .bss	00000000 .bss
00020248 l    d  .onchip_memory	00000000 .onchip_memory
08011080 l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_1_Sound_Acquisition_bsp//obj/HAL/src/crt0.o
08000270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Sound_Acquisition.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0800d5cc l     O .rodata	00000108 two_over_pi
0800d54c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0800d714 l     O .rodata	00000010 init_jk
0800d6d4 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0800d8bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08006ea8 l     F .text	00000008 __fp_unlock
08006ebc l     F .text	0000019c __sinit.part.1
08007058 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
08009950 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08009a5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08009a88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08009b74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08009c54 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08009d40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08009f14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800f3d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800a190 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800a2c4 l     F .text	00000034 alt_dev_reg
0800a2f8 l     F .text	0000003c alt_get_errno
0800a334 l     F .text	00000068 alt_avalon_mutex_reg
0800e290 l     O .rwdata	00001060 jtag_uart_0
0800f2f0 l     O .rwdata	00000048 mailbox_simple_0
0800f338 l     O .rwdata	00000010 mutex_SDRAM
0800f348 l     O .rwdata	00000030 audio_and_video_config_0
0800f378 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800a670 l     F .text	00000210 altera_avalon_jtag_uart_irq
0800a880 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0800aeb8 l     F .text	00000090 altera_avalon_mailbox_identify
0800af48 l     F .text	00000078 altera_avalon_mailbox_post
0800afc0 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
0800b0fc l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0800b7f0 l     F .text	0000003c alt_get_errno
0800b82c l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800c530 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800c794 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800ca54 l     F .text	0000003c alt_get_errno
0800ca90 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08010f54 g     O .bss	00000004 alt_instruction_exception_handler
0800b564 g     F .text	00000150 altera_avalon_mailbox_send
080098fc g     F .text	00000054 _isatty_r
08009e50 g     F .text	0000007c alt_main
08006d3c g     F .text	000000c0 _puts_r
08010f80 g     O .bss	00000100 alt_irq
08002a88 g     F .text	00000014 fabs
08009624 g     F .text	00000060 _lseek_r
08000a64 g     F .text	00000130 sqrt
0800f3f4 g       *ABS*	00000000 __flash_rwdata_start
08005648 g     F .text	00000088 .hidden __eqdf2
0800bd64 g     F .text	00000060 alt_up_audio_read_fifo_avail
08011080 g       *ABS*	00000000 __alt_heap_start
0800bdc4 g     F .text	00000068 alt_up_audio_record_r
08008bd8 g     F .text	0000005c __sseek
080071f8 g     F .text	00000010 __sinit
08007060 g     F .text	00000068 __sfmoreglue
08009ef0 g     F .text	00000024 __malloc_unlock
08003538 g     F .text	00000440 .hidden __divsf3
0800bcd0 g     F .text	00000094 alt_up_audio_reset_audio_core
080082c4 g     F .text	0000015c memmove
080071e0 g     F .text	00000018 _cleanup
0800b964 g     F .text	00000040 altera_avalon_mutex_trylock
08004320 g     F .text	00000070 .hidden __fixsfsi
080056d0 g     F .text	000000dc .hidden __gtdf2
0800ce4c g     F .text	00000024 altera_nios2_gen2_irq_init
08006d2c g     F .text	00000010 __errno
00020000 g     F .entry	0000001c __reset
0800b9f8 g     F .text	00000074 altera_avalon_mutex_is_mine
08000000 g       *ABS*	00000000 __flash_exceptions_start
080098a0 g     F .text	0000005c _fstat_r
08010f38 g     O .bss	00000004 errno
08002a9c g     F .text	000001ec floor
08008b54 g     F .text	00000008 __seofread
0800bc90 g     F .text	00000040 alt_up_audio_write_interrupt_pending
08010f40 g     O .bss	00000004 alt_argv
080173a8 g       *ABS*	00000000 _gp
0800b6b4 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
0800a160 g     F .text	00000030 usleep
08003e3c g     F .text	000004e4 .hidden __subsf3
0800e110 g     O .rwdata	00000180 alt_fd_list
08000b94 g     F .text	0000076c __ieee754_rem_pio2
0800c6d0 g     F .text	00000090 alt_find_dev
0800817c g     F .text	00000148 memcpy
08006eb0 g     F .text	0000000c _cleanup_r
08006934 g     F .text	000000dc .hidden __floatsidf
0800c858 g     F .text	0000007c alt_io_redirect
080057ac g     F .text	000000f4 .hidden __ltdf2
0800d4dc g       *ABS*	00000000 __DTOR_END__
08006dfc g     F .text	00000014 puts
0800d0ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800b1a8 g     F .text	00000078 altera_avalon_mailbox_simple_init
08002c88 g     F .text	00000074 __fpclassifyd
0800c1ac g     F .text	00000050 alt_up_audio_read_fifo_head
0800aa78 g     F .text	0000021c altera_avalon_jtag_uart_read
08002fb4 g     F .text	00000064 .hidden __udivsi3
08009bb0 g     F .text	000000a4 isatty
0800b4ec g     F .text	00000078 altera_avalon_mailbox_status
0800b3e4 g     F .text	00000108 altera_avalon_mailbox_close
08001588 g     F .text	000004a4 __kernel_cos
08003978 g     F .text	000000c8 .hidden __lesf2
0800d01c g     F .text	00000090 alt_icache_flush
08010f34 g     O .bss	00000004 __malloc_top_pad
08007248 g     F .text	000004bc __sfvwrite_r
08008aac g     F .text	00000054 _sbrk_r
08009840 g     F .text	00000060 _read_r
0800f3cc g     O .rwdata	00000004 alt_max_fd
0800c1fc g     F .text	00000068 alt_up_audio_write_fifo_head
08008e44 g     F .text	000000f0 _fclose_r
080091c0 g     F .text	00000030 fflush
08010f30 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c8d4 g     F .text	00000180 alt_irq_register
080027bc g     F .text	000002cc __kernel_sin
08006a10 g     F .text	00000110 .hidden __extendsfdf2
080044b4 g     F .text	000008ac .hidden __adddf3
08009d7c g     F .text	000000d4 lseek
0800ba6c g     F .text	00000050 altera_avalon_mutex_first_lock
0800f3a8 g     O .rwdata	00000004 __fdlib_version
0800f3ac g     O .rwdata	00000004 _global_impure_ptr
08008548 g     F .text	00000564 _realloc_r
08011080 g       *ABS*	00000000 __bss_end
0800cd44 g     F .text	00000108 alt_tick
0800088c g     F .text	000000e8 start_recording
0800babc g     F .text	0000003c alt_up_audio_open_dev
08007218 g     F .text	00000018 __fp_lock_all
08000744 g     F .text	00000148 average_amplitude
0800bef4 g     F .text	00000068 alt_up_audio_play_r
0800cca8 g     F .text	0000009c alt_alarm_stop
08010f48 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d8 alt_irq_handler
0800e0e8 g     O .rwdata	00000028 alt_dev_null
08001a2c g     F .text	00000d90 __kernel_rem_pio2
0800b8a8 g     F .text	00000054 altera_avalon_mutex_open
0800c4e8 g     F .text	00000048 alt_dcache_flush_all
080068b4 g     F .text	00000080 .hidden __fixdfsi
0800f3f4 g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
0800f3c4 g     O .rwdata	00000008 alt_dev_list
0800a1cc g     F .text	000000f8 write
0800f3e0 g     O .rwdata	00000008 alt_mutex_list
0800d8bc g       *ABS*	00000000 __ram_rodata_end
08009ac4 g     F .text	000000b0 fstat
080057ac g     F .text	000000f4 .hidden __ledf2
08003018 g     F .text	00000058 .hidden __umodsi3
08011080 g       *ABS*	00000000 end
0800a5bc g     F .text	000000b4 altera_avalon_jtag_uart_init
000201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0800d4dc g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08006cc8 g     F .text	00000064 .hidden __clzsi2
0800ac94 g     F .text	00000224 altera_avalon_jtag_uart_write
08007208 g     F .text	00000004 __sfp_lock_acquire
08008098 g     F .text	000000e4 memchr
08009314 g     F .text	00000310 _free_r
0800d328 g     F .text	00000180 __call_exitprocs
0800f3b4 g     O .rwdata	00000004 __malloc_sbrk_base
08000228 g     F .text	0000004c _start
08010f4c g     O .bss	00000004 _alt_tick_rate
08000398 g     F .text	00000110 play_file
08000974 g     F .text	000000f0 sin
0800c0a4 g     F .text	00000108 alt_up_audio_write_fifo
08010f50 g     O .bss	00000004 _alt_nticks
08009f50 g     F .text	000000fc read
0800a3d4 g     F .text	00000084 alt_sys_init
08004390 g     F .text	00000124 .hidden __floatsisf
0800bfc4 g     F .text	000000e0 alt_up_audio_read_fifo
0800d210 g     F .text	00000118 __register_exitproc
0800bbf8 g     F .text	00000058 alt_up_audio_disable_write_interrupt
0800b9a4 g     F .text	00000054 altera_avalon_mutex_unlock
0800a920 g     F .text	00000068 altera_avalon_jtag_uart_close
0800d8bc g       *ABS*	00000000 __ram_rwdata_start
0800d4dc g       *ABS*	00000000 __ram_rodata_start
08010f58 g     O .bss	00000028 __malloc_current_mallinfo
080006a8 g     F .text	0000009c show_amplitude_on_LEDS
0800a458 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800cf78 g     F .text	000000a4 alt_get_fd
0800c390 g     F .text	00000158 alt_busy_sleep
08008df0 g     F .text	00000054 _close_r
0800bba4 g     F .text	00000054 alt_up_audio_enable_write_interrupt
0800d194 g     F .text	0000007c memcmp
0800a518 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08011080 g       *ABS*	00000000 __alt_stack_base
0800a568 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08008c9c g     F .text	00000154 __swsetup_r
08004d60 g     F .text	000008e8 .hidden __divdf3
0800bb4c g     F .text	00000058 alt_up_audio_disable_read_interrupt
080070c8 g     F .text	00000118 __sfp
0800dce0 g     O .rwdata	00000408 __malloc_av_
08007214 g     F .text	00000004 __sinit_lock_release
080058a0 g     F .text	00000718 .hidden __muldf3
08008b00 g     F .text	00000054 __sread
0800ce70 g     F .text	00000108 alt_find_file
0800c56c g     F .text	000000a4 alt_dev_llist_insert
08009ecc g     F .text	00000024 __malloc_lock
0800a0b0 g     F .text	000000b0 sbrk
08009164 g     F .text	0000005c _fflush_r
08010f2c g       *ABS*	00000000 __bss_start
08008420 g     F .text	00000128 memset
08000274 g     F .text	00000124 main
0800be94 g     F .text	00000060 alt_up_audio_write_fifo_space
08010f44 g     O .bss	00000004 alt_envp
08010f2c g     O .bss	00000004 __malloc_max_total_mem
0800a4b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08003978 g     F .text	000000c8 .hidden __ltsf2
08008c34 g     F .text	00000008 __sclose
08002cfc g     F .text	00000008 matherr
0c000000 g       *ABS*	00000000 __alt_heap_limit
08008f34 g     F .text	00000014 fclose
08006b20 g     F .text	000001a8 .hidden __truncdfsf2
0800b920 g     F .text	00000044 altera_avalon_mutex_lock
0800788c g     F .text	0000080c _malloc_r
0800f3d0 g     O .rwdata	00000004 alt_errno
08007704 g     F .text	000000c4 _fwalk
08002ebc g     F .text	00000084 .hidden __divsi3
080091f0 g     F .text	00000124 _malloc_trim_r
0800d4dc g       *ABS*	00000000 __CTOR_END__
08003a40 g     F .text	000003fc .hidden __mulsf3
0800d4dc g       *ABS*	00000000 __flash_rodata_start
0800d4dc g       *ABS*	00000000 __DTOR_LIST__
08002ea0 g     F .text	0000001c copysign
08005648 g     F .text	00000088 .hidden __nedf2
08000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0800a39c g     F .text	00000038 alt_irq_init
0800a04c g     F .text	00000064 alt_release_fd
0800d724 g     O .rodata	00000100 .hidden __clz_tab
080004a8 g     F .text	00000200 generate_sinusoid
0800d148 g     F .text	00000014 atexit
08008c3c g     F .text	00000060 _write_r
0800f3b0 g     O .rwdata	00000004 _impure_ptr
08010f3c g     O .bss	00000004 alt_argc
08008f48 g     F .text	0000021c __sflush_r
08002d04 g     F .text	0000019c scalbn
0800c670 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
08007230 g     F .text	00000018 __fp_unlock_all
0800f3bc g     O .rwdata	00000008 alt_fs_list
0800be2c g     F .text	00000068 alt_up_audio_record_l
00020020 g       *ABS*	00000000 __ram_exceptions_start
08001300 g     F .text	00000288 __ieee754_sqrt
0800f3f4 g       *ABS*	00000000 _edata
08011080 g       *ABS*	00000000 _end
00020248 g       *ABS*	00000000 __ram_exceptions_end
0800a988 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0800bf5c g     F .text	00000068 alt_up_audio_play_l
0800f3d8 g     O .rwdata	00000008 alt_mailbox_simple_list
08008b5c g     F .text	0000007c __swrite
0800f3b8 g     O .rwdata	00000004 __malloc_trim_threshold
0800d15c g     F .text	00000038 exit
080077c8 g     F .text	000000c4 _fwalk_reent
08002f40 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0800720c g     F .text	00000004 __sfp_lock_release
0800b220 g     F .text	000001c4 altera_avalon_mailbox_open
0800d4a8 g     F .text	00000034 _exit
0800c264 g     F .text	0000012c alt_alarm_start
08009684 g     F .text	000001bc __smakebuf_r
08006e10 g     F .text	00000098 strlen
0800cb54 g     F .text	00000154 open
080056d0 g     F .text	000000dc .hidden __gedf2
0800c760 g     F .text	00000034 alt_icache_flush_all
0800f3e8 g     O .rwdata	00000004 alt_priority_mask
0800b8fc g     F .text	00000024 altera_avalon_mutex_close
08005fb8 g     F .text	000008fc .hidden __subdf3
0800f3ec g     O .rwdata	00000008 alt_alarm_list
0800c610 g     F .text	00000060 _do_ctors
0800998c g     F .text	000000d0 close
08003070 g     F .text	000004c8 .hidden __addsf3
08009cbc g     F .text	00000084 alt_load
0800baf8 g     F .text	00000054 alt_up_audio_enable_read_interrupt
08007210 g     F .text	00000004 __sinit_lock_acquire
0800bc50 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf4020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   20014:	08408a14 	ori	at,at,552
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d40 	call	201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	00820074 	movhi	r2,2049
   20140:	1083e004 	addi	r2,r2,3968
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00820074 	movhi	r2,2049
   20158:	1083e004 	addi	r2,r2,3968
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	e17ffd17 	ldw	r5,-12(fp)
   20174:	1009883a 	mov	r4,r2
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <__alt_data_end+0xf402012c>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <__alt_data_end+0xf4020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	0001883a 	nop
   201c0:	e037883a 	mov	sp,fp
   201c4:	dfc00117 	ldw	ra,4(sp)
   201c8:	df000017 	ldw	fp,0(sp)
   201cc:	dec00204 	addi	sp,sp,8
   201d0:	f800283a 	ret

000201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d4:	defffb04 	addi	sp,sp,-20
   201d8:	dfc00415 	stw	ra,16(sp)
   201dc:	df000315 	stw	fp,12(sp)
   201e0:	df000304 	addi	fp,sp,12
   201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e8:	000531fa 	rdctl	r2,exception
   201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	10801f0c 	andi	r2,r2,124
   201f8:	1004d0ba 	srli	r2,r2,2
   201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20200:	0005333a 	rdctl	r2,badaddr
   20204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20208:	d0a6eb17 	ldw	r2,-25684(gp)
   2020c:	10000726 	beq	r2,zero,2022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20210:	d0a6eb17 	ldw	r2,-25684(gp)
   20214:	e0fffd17 	ldw	r3,-12(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	e17fff17 	ldw	r5,-4(fp)
   20220:	1809883a 	mov	r4,r3
   20224:	103ee83a 	callr	r2
   20228:	00000206 	br	20234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20230:	0005883a 	mov	r2,zero
}
   20234:	e037883a 	mov	sp,fp
   20238:	dfc00117 	ldw	ra,4(sp)
   2023c:	df000017 	ldw	fp,0(sp)
   20240:	dec00204 	addi	sp,sp,8
   20244:	f800283a 	ret

Disassembly of section .text:

08000228 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000228:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 800022c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000230:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000234:	00bffd16 	blt	zero,r2,800022c <__alt_data_end+0xfc00022c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000238:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 800023c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000240:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000244:	d69cea14 	ori	gp,gp,29608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000248:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 800024c:	1083cb14 	ori	r2,r2,3884

    movhi r3, %hi(__bss_end)
 8000250:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000254:	18c42014 	ori	r3,r3,4224

    beq r2, r3, 1f
 8000258:	10c00326 	beq	r2,r3,8000268 <_start+0x40>

0:
    stw zero, (r2)
 800025c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000264:	10fffd36 	bltu	r2,r3,800025c <__alt_data_end+0xfc00025c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000268:	8009cbc0 	call	8009cbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 800026c:	8009e500 	call	8009e50 <alt_main>

08000270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000270:	003fff06 	br	8000270 <__alt_data_end+0xfc000270>

08000274 <main>:



//-------------------------------------------- MAIN ------------------------------------------------------
int main()
{
 8000274:	defffe04 	addi	sp,sp,-8
 8000278:	dfc00115 	stw	ra,4(sp)
 800027c:	df000015 	stw	fp,0(sp)
 8000280:	d839883a 	mov	fp,sp
 8000284:	023ffdf4 	movhi	r8,65527
 8000288:	420cfc04 	addi	r8,r8,13296
 800028c:	da37883a 	add	sp,sp,r8
	float sound_loudness = 0;
 8000290:	00bffdf4 	movhi	r2,65527
 8000294:	108cfc04 	addi	r2,r2,13296
 8000298:	1705883a 	add	r2,r2,fp
 800029c:	10000015 	stw	zero,0(r2)
	unsigned int recording_buffer[RECORDING_BUFFER_SIZE], n_samples_in_FIFO;
	unsigned int beep_sound[BEEP_SAMPLES], recording[RECORDING_SAMPLES];
	alt_up_audio_dev *audio_device;
	alt_up_av_config_dev *audio_config;
	altera_avalon_mailbox_dev* mailbox;	// handle to the Mailbox
	alt_u32 message[2] =  {0x00001111, 0xaa55aa55};
 80002a0:	00800274 	movhi	r2,9
 80002a4:	10b30204 	addi	r2,r2,-13304
 80002a8:	00fffdf4 	movhi	r3,65527
 80002ac:	18ccfc04 	addi	r3,r3,13296
 80002b0:	1f07883a 	add	r3,r3,fp
 80002b4:	1885883a 	add	r2,r3,r2
 80002b8:	00c44444 	movi	r3,4369
 80002bc:	10c00015 	stw	r3,0(r2)
 80002c0:	00800274 	movhi	r2,9
 80002c4:	10b30204 	addi	r2,r2,-13304
 80002c8:	013ffdf4 	movhi	r4,65527
 80002cc:	210cfc04 	addi	r4,r4,13296
 80002d0:	2709883a 	add	r4,r4,fp
 80002d4:	2087883a 	add	r3,r4,r2
 80002d8:	00aa95b4 	movhi	r2,43606
 80002dc:	10aa9544 	addi	r2,r2,-21931
 80002e0:	18800115 	stw	r2,4(r3)


	/* Open mailbox on sender processor */
	mailbox = altera_avalon_mailbox_open("/dev/mailbox_simple_0", NULL, NULL);
 80002e4:	000d883a 	mov	r6,zero
 80002e8:	000b883a 	mov	r5,zero
 80002ec:	01020074 	movhi	r4,2049
 80002f0:	21353704 	addi	r4,r4,-11044
 80002f4:	800b2200 	call	800b220 <altera_avalon_mailbox_open>
 80002f8:	00fffdf4 	movhi	r3,65527
 80002fc:	18ccfd04 	addi	r3,r3,13300
 8000300:	1f07883a 	add	r3,r3,fp
 8000304:	18800015 	stw	r2,0(r3)
	if (!mailbox){
 8000308:	013ffdf4 	movhi	r4,65527
 800030c:	210cfd04 	addi	r4,r4,13300
 8000310:	2709883a 	add	r4,r4,fp
 8000314:	20800017 	ldw	r2,0(r4)
 8000318:	1000051e 	bne	r2,zero,8000330 <main+0xbc>
		printf ("FAIL: Unable to open mailbox\n");
 800031c:	01020074 	movhi	r4,2049
 8000320:	21353d04 	addi	r4,r4,-11020
 8000324:	8006dfc0 	call	8006dfc <puts>
		return 1;
 8000328:	00800044 	movi	r2,1
 800032c:	00001506 	br	8000384 <main+0x110>
	}

	while(1)
	{
		printf("Sending...\n");
 8000330:	01020074 	movhi	r4,2049
 8000334:	21354504 	addi	r4,r4,-10988
 8000338:	8006dfc0 	call	8006dfc <puts>
		altera_avalon_mailbox_send (mailbox, message, 0, ISR);	// sends a message through the mailbox
 800033c:	00800274 	movhi	r2,9
 8000340:	10b30204 	addi	r2,r2,-13304
 8000344:	00fffdf4 	movhi	r3,65527
 8000348:	18ccfc04 	addi	r3,r3,13296
 800034c:	1f07883a 	add	r3,r3,fp
 8000350:	1885883a 	add	r2,r3,r2
 8000354:	000f883a 	mov	r7,zero
 8000358:	000d883a 	mov	r6,zero
 800035c:	100b883a 	mov	r5,r2
 8000360:	00bffdf4 	movhi	r2,65527
 8000364:	108cfd04 	addi	r2,r2,13300
 8000368:	1705883a 	add	r2,r2,fp
 800036c:	11000017 	ldw	r4,0(r2)
 8000370:	800b5640 	call	800b564 <altera_avalon_mailbox_send>
		usleep(500000);
 8000374:	01000234 	movhi	r4,8
 8000378:	21284804 	addi	r4,r4,-24288
 800037c:	800a1600 	call	800a160 <usleep>
	}
 8000380:	003feb06 	br	8000330 <__alt_data_end+0xfc000330>
	}


	altera_avalon_mailbox_close (mailbox); 	// closing the handle to the mailbox
	return 0;
}
 8000384:	e037883a 	mov	sp,fp
 8000388:	dfc00117 	ldw	ra,4(sp)
 800038c:	df000017 	ldw	fp,0(sp)
 8000390:	dec00204 	addi	sp,sp,8
 8000394:	f800283a 	ret

08000398 <play_file>:



// this function plays an audio file trough the output jack (green). To do so it needs to send bursts of data to the outgoing FIFO.
void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device)
{
 8000398:	defff804 	addi	sp,sp,-32
 800039c:	dfc00715 	stw	ra,28(sp)
 80003a0:	df000615 	stw	fp,24(sp)
 80003a4:	df000604 	addi	fp,sp,24
 80003a8:	e13ffd15 	stw	r4,-12(fp)
 80003ac:	e17ffe15 	stw	r5,-8(fp)
 80003b0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)
 80003b4:	00801904 	movi	r2,100
 80003b8:	e0bffb15 	stw	r2,-20(fp)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 80003bc:	e03ffa15 	stw	zero,-24(fp)
 80003c0:	00003006 	br	8000484 <play_file+0xec>
	{
		file_pointer = file + i;
 80003c4:	e0bffa17 	ldw	r2,-24(fp)
 80003c8:	1085883a 	add	r2,r2,r2
 80003cc:	1085883a 	add	r2,r2,r2
 80003d0:	1007883a 	mov	r3,r2
 80003d4:	e0bffd17 	ldw	r2,-12(fp)
 80003d8:	10c5883a 	add	r2,r2,r3
 80003dc:	e0bffc15 	stw	r2,-16(fp)
		if (file_size - i > BURST_LENGTH) {
 80003e0:	e0fffe17 	ldw	r3,-8(fp)
 80003e4:	e0bffa17 	ldw	r2,-24(fp)
 80003e8:	1885c83a 	sub	r2,r3,r2
 80003ec:	e0fffb17 	ldw	r3,-20(fp)
 80003f0:	18800b2e 	bgeu	r3,r2,8000420 <play_file+0x88>
			alt_up_audio_play_r(audio_device, file_pointer, BURST_LENGTH);
 80003f4:	e0bffb17 	ldw	r2,-20(fp)
 80003f8:	100d883a 	mov	r6,r2
 80003fc:	e17ffc17 	ldw	r5,-16(fp)
 8000400:	e13fff17 	ldw	r4,-4(fp)
 8000404:	800bef40 	call	800bef4 <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, BURST_LENGTH);
 8000408:	e0bffb17 	ldw	r2,-20(fp)
 800040c:	100d883a 	mov	r6,r2
 8000410:	e17ffc17 	ldw	r5,-16(fp)
 8000414:	e13fff17 	ldw	r4,-4(fp)
 8000418:	800bf5c0 	call	800bf5c <alt_up_audio_play_l>
 800041c:	00000e06 	br	8000458 <play_file+0xc0>
		} else {
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
 8000420:	e0fffe17 	ldw	r3,-8(fp)
 8000424:	e0bffa17 	ldw	r2,-24(fp)
 8000428:	1885c83a 	sub	r2,r3,r2
 800042c:	100d883a 	mov	r6,r2
 8000430:	e17ffc17 	ldw	r5,-16(fp)
 8000434:	e13fff17 	ldw	r4,-4(fp)
 8000438:	800bef40 	call	800bef4 <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
 800043c:	e0fffe17 	ldw	r3,-8(fp)
 8000440:	e0bffa17 	ldw	r2,-24(fp)
 8000444:	1885c83a 	sub	r2,r3,r2
 8000448:	100d883a 	mov	r6,r2
 800044c:	e17ffc17 	ldw	r5,-16(fp)
 8000450:	e13fff17 	ldw	r4,-4(fp)
 8000454:	800bf5c0 	call	800bf5c <alt_up_audio_play_l>
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
 8000458:	0001883a 	nop
 800045c:	000b883a 	mov	r5,zero
 8000460:	e13fff17 	ldw	r4,-4(fp)
 8000464:	800be940 	call	800be94 <alt_up_audio_write_fifo_space>
 8000468:	1007883a 	mov	r3,r2
 800046c:	e0bffb17 	ldw	r2,-20(fp)
 8000470:	18bffa36 	bltu	r3,r2,800045c <__alt_data_end+0xfc00045c>
{
	unsigned int *file_pointer, i;
	const unsigned int BURST_LENGTH = 100;	// the outgoing FIFO is of 128 elements, if we write burst of 100 at the time there is no distortion (this is an empirical value)

	// sends the data, one burst at a time until the end of the file is reached
	for (i=0; i<file_size; i+=BURST_LENGTH)
 8000474:	e0fffa17 	ldw	r3,-24(fp)
 8000478:	e0bffb17 	ldw	r2,-20(fp)
 800047c:	1885883a 	add	r2,r3,r2
 8000480:	e0bffa15 	stw	r2,-24(fp)
 8000484:	e0bffe17 	ldw	r2,-8(fp)
 8000488:	e0fffa17 	ldw	r3,-24(fp)
 800048c:	18bfcd36 	bltu	r3,r2,80003c4 <__alt_data_end+0xfc0003c4>
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BURST_LENGTH);	// waits for the FIFO to get empty
	}
}
 8000490:	0001883a 	nop
 8000494:	e037883a 	mov	sp,fp
 8000498:	dfc00117 	ldw	ra,4(sp)
 800049c:	df000017 	ldw	fp,0(sp)
 80004a0:	dec00204 	addi	sp,sp,8
 80004a4:	f800283a 	ret

080004a8 <generate_sinusoid>:


/* creates a sinusoidal waveform in the memory (at the location pointed by "unsigned int *file"), n_samples specifies the length*/
// of the file to create.
void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int n_samples, unsigned int *file)
{
 80004a8:	defff404 	addi	sp,sp,-48
 80004ac:	dfc00b15 	stw	ra,44(sp)
 80004b0:	df000a15 	stw	fp,40(sp)
 80004b4:	dc400915 	stw	r17,36(sp)
 80004b8:	dc000815 	stw	r16,32(sp)
 80004bc:	df000a04 	addi	fp,sp,40
 80004c0:	e13ffa15 	stw	r4,-24(fp)
 80004c4:	e17ffb15 	stw	r5,-20(fp)
 80004c8:	3005883a 	mov	r2,r6
 80004cc:	e1fffd15 	stw	r7,-12(fp)
 80004d0:	e0bffc05 	stb	r2,-16(fp)
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow
 80004d4:	e13ffb17 	ldw	r4,-20(fp)
 80004d8:	8006a100 	call	8006a10 <__extendsfdf2>
 80004dc:	1011883a 	mov	r8,r2
 80004e0:	1813883a 	mov	r9,r3
 80004e4:	01951134 	movhi	r6,21572
 80004e8:	318b4604 	addi	r6,r6,11544
 80004ec:	01d00674 	movhi	r7,16409
 80004f0:	39c87ec4 	addi	r7,r7,8699
 80004f4:	4009883a 	mov	r4,r8
 80004f8:	480b883a 	mov	r5,r9
 80004fc:	80058a00 	call	80058a0 <__muldf3>
 8000500:	1009883a 	mov	r4,r2
 8000504:	180b883a 	mov	r5,r3
 8000508:	2021883a 	mov	r16,r4
 800050c:	2823883a 	mov	r17,r5
 8000510:	e13ffa17 	ldw	r4,-24(fp)
 8000514:	80069340 	call	8006934 <__floatsidf>
 8000518:	1009883a 	mov	r4,r2
 800051c:	180b883a 	mov	r5,r3
 8000520:	200d883a 	mov	r6,r4
 8000524:	280f883a 	mov	r7,r5
 8000528:	8009883a 	mov	r4,r16
 800052c:	880b883a 	mov	r5,r17
 8000530:	8004d600 	call	8004d60 <__divdf3>
 8000534:	1009883a 	mov	r4,r2
 8000538:	180b883a 	mov	r5,r3
 800053c:	2005883a 	mov	r2,r4
 8000540:	2807883a 	mov	r3,r5
 8000544:	1009883a 	mov	r4,r2
 8000548:	180b883a 	mov	r5,r3
 800054c:	8006b200 	call	8006b20 <__truncdfsf2>
 8000550:	1007883a 	mov	r3,r2
 8000554:	e0fff715 	stw	r3,-36(fp)

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
 8000558:	e0bffc07 	ldb	r2,-16(fp)
 800055c:	1009883a 	mov	r4,r2
 8000560:	80043900 	call	8004390 <__floatsisf>
 8000564:	1007883a 	mov	r3,r2
 8000568:	0153e034 	movhi	r5,20352
 800056c:	1809883a 	mov	r4,r3
 8000570:	8003a400 	call	8003a40 <__mulsf3>
 8000574:	1007883a 	mov	r3,r2
 8000578:	1805883a 	mov	r2,r3
 800057c:	1009883a 	mov	r4,r2
 8000580:	8006a100 	call	8006a10 <__extendsfdf2>
 8000584:	1011883a 	mov	r8,r2
 8000588:	1813883a 	mov	r9,r3
 800058c:	000d883a 	mov	r6,zero
 8000590:	01d01674 	movhi	r7,16473
 8000594:	4009883a 	mov	r4,r8
 8000598:	480b883a 	mov	r5,r9
 800059c:	8004d600 	call	8004d60 <__divdf3>
 80005a0:	1009883a 	mov	r4,r2
 80005a4:	180b883a 	mov	r5,r3
 80005a8:	2005883a 	mov	r2,r4
 80005ac:	2807883a 	mov	r3,r5
 80005b0:	1009883a 	mov	r4,r2
 80005b4:	180b883a 	mov	r5,r3
 80005b8:	80068b40 	call	80068b4 <__fixdfsi>
 80005bc:	e0bff815 	stw	r2,-32(fp)
	for(i=0; i<n_samples; i++)
 80005c0:	e03ff615 	stw	zero,-40(fp)
 80005c4:	00002d06 	br	800067c <generate_sinusoid+0x1d4>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
 80005c8:	e13ff817 	ldw	r4,-32(fp)
 80005cc:	80069340 	call	8006934 <__floatsidf>
 80005d0:	1021883a 	mov	r16,r2
 80005d4:	1823883a 	mov	r17,r3
 80005d8:	e13ff617 	ldw	r4,-40(fp)
 80005dc:	80043900 	call	8004390 <__floatsisf>
 80005e0:	1007883a 	mov	r3,r2
 80005e4:	e17ff717 	ldw	r5,-36(fp)
 80005e8:	1809883a 	mov	r4,r3
 80005ec:	8003a400 	call	8003a40 <__mulsf3>
 80005f0:	1007883a 	mov	r3,r2
 80005f4:	1805883a 	mov	r2,r3
 80005f8:	1009883a 	mov	r4,r2
 80005fc:	8006a100 	call	8006a10 <__extendsfdf2>
 8000600:	100b883a 	mov	r5,r2
 8000604:	180d883a 	mov	r6,r3
 8000608:	2809883a 	mov	r4,r5
 800060c:	300b883a 	mov	r5,r6
 8000610:	80009740 	call	8000974 <sin>
 8000614:	1009883a 	mov	r4,r2
 8000618:	180b883a 	mov	r5,r3
 800061c:	200d883a 	mov	r6,r4
 8000620:	280f883a 	mov	r7,r5
 8000624:	8009883a 	mov	r4,r16
 8000628:	880b883a 	mov	r5,r17
 800062c:	80058a00 	call	80058a0 <__muldf3>
 8000630:	1009883a 	mov	r4,r2
 8000634:	180b883a 	mov	r5,r3
 8000638:	2005883a 	mov	r2,r4
 800063c:	2807883a 	mov	r3,r5
 8000640:	1009883a 	mov	r4,r2
 8000644:	180b883a 	mov	r5,r3
 8000648:	80068b40 	call	80068b4 <__fixdfsi>
 800064c:	e0bff915 	stw	r2,-28(fp)
		IOWR_32DIRECT(file, i*4, sample_amplitude);
 8000650:	e0bff617 	ldw	r2,-40(fp)
 8000654:	1085883a 	add	r2,r2,r2
 8000658:	1085883a 	add	r2,r2,r2
 800065c:	1007883a 	mov	r3,r2
 8000660:	e0800217 	ldw	r2,8(fp)
 8000664:	10c5883a 	add	r2,r2,r3
 8000668:	e0fff917 	ldw	r3,-28(fp)
 800066c:	10c00035 	stwio	r3,0(r2)
{
	int i, sample_amplitude, amplitude_factor;
	float phase_factor = 2 * M_PI * freq / sampling_freq;	// I break down the computation because it is too slow

	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
	for(i=0; i<n_samples; i++)
 8000670:	e0bff617 	ldw	r2,-40(fp)
 8000674:	10800044 	addi	r2,r2,1
 8000678:	e0bff615 	stw	r2,-40(fp)
 800067c:	e0fff617 	ldw	r3,-40(fp)
 8000680:	e0bffd17 	ldw	r2,-12(fp)
 8000684:	18bfd036 	bltu	r3,r2,80005c8 <__alt_data_end+0xfc0005c8>
	{
		sample_amplitude = amplitude_factor *  sin( phase_factor * i );
		IOWR_32DIRECT(file, i*4, sample_amplitude);
	}
}
 8000688:	0001883a 	nop
 800068c:	e6fffe04 	addi	sp,fp,-8
 8000690:	dfc00317 	ldw	ra,12(sp)
 8000694:	df000217 	ldw	fp,8(sp)
 8000698:	dc400117 	ldw	r17,4(sp)
 800069c:	dc000017 	ldw	r16,0(sp)
 80006a0:	dec00404 	addi	sp,sp,16
 80006a4:	f800283a 	ret

080006a8 <show_amplitude_on_LEDS>:


// outputs the amplitude on the LEDs
void show_amplitude_on_LEDS(float amplitude)
{
 80006a8:	defffd04 	addi	sp,sp,-12
 80006ac:	dfc00215 	stw	ra,8(sp)
 80006b0:	df000115 	stw	fp,4(sp)
 80006b4:	df000104 	addi	fp,sp,4
 80006b8:	e13fff15 	stw	r4,-4(fp)
	amplitude = sqrt(amplitude);	// the way we perceive sound is not linear, this is why I take the square root of the amplitude
 80006bc:	e13fff17 	ldw	r4,-4(fp)
 80006c0:	8006a100 	call	8006a10 <__extendsfdf2>
 80006c4:	100b883a 	mov	r5,r2
 80006c8:	180d883a 	mov	r6,r3
 80006cc:	2809883a 	mov	r4,r5
 80006d0:	300b883a 	mov	r5,r6
 80006d4:	8000a640 	call	8000a64 <sqrt>
 80006d8:	100b883a 	mov	r5,r2
 80006dc:	180d883a 	mov	r6,r3
 80006e0:	2809883a 	mov	r4,r5
 80006e4:	300b883a 	mov	r5,r6
 80006e8:	8006b200 	call	8006b20 <__truncdfsf2>
 80006ec:	1007883a 	mov	r3,r2
 80006f0:	e0ffff15 	stw	r3,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_BASE, (0x01<<((int)(amplitude*PIO_LEDS_NUMBER)))-1);
 80006f4:	01504834 	movhi	r5,16672
 80006f8:	e13fff17 	ldw	r4,-4(fp)
 80006fc:	8003a400 	call	8003a40 <__mulsf3>
 8000700:	1007883a 	mov	r3,r2
 8000704:	1805883a 	mov	r2,r3
 8000708:	1009883a 	mov	r4,r2
 800070c:	80043200 	call	8004320 <__fixsfsi>
 8000710:	1007883a 	mov	r3,r2
 8000714:	00800044 	movi	r2,1
 8000718:	10c4983a 	sll	r2,r2,r3
 800071c:	10ffffc4 	addi	r3,r2,-1
 8000720:	00800134 	movhi	r2,4
 8000724:	10840004 	addi	r2,r2,4096
 8000728:	10c00035 	stwio	r3,0(r2)
}
 800072c:	0001883a 	nop
 8000730:	e037883a 	mov	sp,fp
 8000734:	dfc00117 	ldw	ra,4(sp)
 8000738:	df000017 	ldw	fp,0(sp)
 800073c:	dec00204 	addi	sp,sp,8
 8000740:	f800283a 	ret

08000744 <average_amplitude>:


// computes the average amplitude of an array of sound samples
float average_amplitude(int *data, int length)
{
 8000744:	defffa04 	addi	sp,sp,-24
 8000748:	dfc00515 	stw	ra,20(sp)
 800074c:	df000415 	stw	fp,16(sp)
 8000750:	df000404 	addi	fp,sp,16
 8000754:	e13ffe15 	stw	r4,-8(fp)
 8000758:	e17fff15 	stw	r5,-4(fp)
	int i;
	float average_amplitude = 0;
 800075c:	e03ffd15 	stw	zero,-12(fp)

	// computes the average
	for (i=0; i<length; i++)
 8000760:	e03ffc15 	stw	zero,-16(fp)
 8000764:	00002a06 	br	8000810 <average_amplitude+0xcc>
	{
		if (data[i] < 0)
 8000768:	e0bffc17 	ldw	r2,-16(fp)
 800076c:	1085883a 	add	r2,r2,r2
 8000770:	1085883a 	add	r2,r2,r2
 8000774:	1007883a 	mov	r3,r2
 8000778:	e0bffe17 	ldw	r2,-8(fp)
 800077c:	10c5883a 	add	r2,r2,r3
 8000780:	10800017 	ldw	r2,0(r2)
 8000784:	1000100e 	bge	r2,zero,80007c8 <average_amplitude+0x84>
			average_amplitude -= data[i];
 8000788:	e0bffc17 	ldw	r2,-16(fp)
 800078c:	1085883a 	add	r2,r2,r2
 8000790:	1085883a 	add	r2,r2,r2
 8000794:	1007883a 	mov	r3,r2
 8000798:	e0bffe17 	ldw	r2,-8(fp)
 800079c:	10c5883a 	add	r2,r2,r3
 80007a0:	10800017 	ldw	r2,0(r2)
 80007a4:	1009883a 	mov	r4,r2
 80007a8:	80043900 	call	8004390 <__floatsisf>
 80007ac:	1007883a 	mov	r3,r2
 80007b0:	180b883a 	mov	r5,r3
 80007b4:	e13ffd17 	ldw	r4,-12(fp)
 80007b8:	8003e3c0 	call	8003e3c <__subsf3>
 80007bc:	1007883a 	mov	r3,r2
 80007c0:	e0fffd15 	stw	r3,-12(fp)
 80007c4:	00000f06 	br	8000804 <average_amplitude+0xc0>
		else
			average_amplitude += data[i];
 80007c8:	e0bffc17 	ldw	r2,-16(fp)
 80007cc:	1085883a 	add	r2,r2,r2
 80007d0:	1085883a 	add	r2,r2,r2
 80007d4:	1007883a 	mov	r3,r2
 80007d8:	e0bffe17 	ldw	r2,-8(fp)
 80007dc:	10c5883a 	add	r2,r2,r3
 80007e0:	10800017 	ldw	r2,0(r2)
 80007e4:	1009883a 	mov	r4,r2
 80007e8:	80043900 	call	8004390 <__floatsisf>
 80007ec:	1007883a 	mov	r3,r2
 80007f0:	180b883a 	mov	r5,r3
 80007f4:	e13ffd17 	ldw	r4,-12(fp)
 80007f8:	80030700 	call	8003070 <__addsf3>
 80007fc:	1007883a 	mov	r3,r2
 8000800:	e0fffd15 	stw	r3,-12(fp)
{
	int i;
	float average_amplitude = 0;

	// computes the average
	for (i=0; i<length; i++)
 8000804:	e0bffc17 	ldw	r2,-16(fp)
 8000808:	10800044 	addi	r2,r2,1
 800080c:	e0bffc15 	stw	r2,-16(fp)
 8000810:	e0fffc17 	ldw	r3,-16(fp)
 8000814:	e0bfff17 	ldw	r2,-4(fp)
 8000818:	18bfd316 	blt	r3,r2,8000768 <__alt_data_end+0xfc000768>
		else
			average_amplitude += data[i];
	}

	// normalizes to a range from 0 to 1
	average_amplitude /= INT_MAX;
 800081c:	0153c034 	movhi	r5,20224
 8000820:	e13ffd17 	ldw	r4,-12(fp)
 8000824:	80035380 	call	8003538 <__divsf3>
 8000828:	1007883a 	mov	r3,r2
 800082c:	e0fffd15 	stw	r3,-12(fp)
	average_amplitude /= length;
 8000830:	e13fff17 	ldw	r4,-4(fp)
 8000834:	80043900 	call	8004390 <__floatsisf>
 8000838:	1007883a 	mov	r3,r2
 800083c:	180b883a 	mov	r5,r3
 8000840:	e13ffd17 	ldw	r4,-12(fp)
 8000844:	80035380 	call	8003538 <__divsf3>
 8000848:	1007883a 	mov	r3,r2
 800084c:	e0fffd15 	stw	r3,-12(fp)
	if (average_amplitude < 0)
 8000850:	000b883a 	mov	r5,zero
 8000854:	e13ffd17 	ldw	r4,-12(fp)
 8000858:	80039780 	call	8003978 <__lesf2>
 800085c:	1000030e 	bge	r2,zero,800086c <average_amplitude+0x128>
		average_amplitude *= -1;
 8000860:	e0bffd17 	ldw	r2,-12(fp)
 8000864:	10a0003c 	xorhi	r2,r2,32768
 8000868:	e0bffd15 	stw	r2,-12(fp)

	return average_amplitude;
 800086c:	e0bffd17 	ldw	r2,-12(fp)
 8000870:	1007883a 	mov	r3,r2
}
 8000874:	1805883a 	mov	r2,r3
 8000878:	e037883a 	mov	sp,fp
 800087c:	dfc00117 	ldw	ra,4(sp)
 8000880:	df000017 	ldw	fp,0(sp)
 8000884:	dec00204 	addi	sp,sp,8
 8000888:	f800283a 	ret

0800088c <start_recording>:



// records a sound from the microphone and stores it in the SDRAM (at location pointed by *file)
void start_recording(unsigned int *file, unsigned int n_samples, alt_up_audio_dev *audio_device)
{
 800088c:	defff804 	addi	sp,sp,-32
 8000890:	dfc00715 	stw	ra,28(sp)
 8000894:	df000615 	stw	fp,24(sp)
 8000898:	df000604 	addi	fp,sp,24
 800089c:	e13ffd15 	stw	r4,-12(fp)
 80008a0:	e17ffe15 	stw	r5,-8(fp)
 80008a4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, *end_of_file;
	unsigned int n_samples_in_FIFO = 0;
 80008a8:	e03ffb15 	stw	zero,-20(fp)

	if (n_samples > RECORDING_SAMPLES)
 80008ac:	e0fffe17 	ldw	r3,-8(fp)
 80008b0:	00800074 	movhi	r2,1
 80008b4:	109dc004 	addi	r2,r2,30464
 80008b8:	10c0042e 	bgeu	r2,r3,80008cc <start_recording+0x40>
	{
		printf("Error, can't record a file so long\n");
 80008bc:	01020074 	movhi	r4,2049
 80008c0:	21354804 	addi	r4,r4,-10976
 80008c4:	8006dfc0 	call	8006dfc <puts>
		return;
 80008c8:	00002506 	br	8000960 <start_recording+0xd4>
	}
	file_pointer = file;
 80008cc:	e0bffd17 	ldw	r2,-12(fp)
 80008d0:	e0bffa15 	stw	r2,-24(fp)
	end_of_file = &(file[n_samples]);
 80008d4:	e0bffe17 	ldw	r2,-8(fp)
 80008d8:	1085883a 	add	r2,r2,r2
 80008dc:	1085883a 	add	r2,r2,r2
 80008e0:	1007883a 	mov	r3,r2
 80008e4:	e0bffd17 	ldw	r2,-12(fp)
 80008e8:	10c5883a 	add	r2,r2,r3
 80008ec:	e0bffc15 	stw	r2,-16(fp)

	while(file_pointer < end_of_file )
 80008f0:	00001806 	br	8000954 <start_recording+0xc8>
	{
		// reads data from the incoming FIFO (sound from the microphone)
		n_samples_in_FIFO = alt_up_audio_read_fifo_avail(audio_device, 0);
 80008f4:	000b883a 	mov	r5,zero
 80008f8:	e13fff17 	ldw	r4,-4(fp)
 80008fc:	800bd640 	call	800bd64 <alt_up_audio_read_fifo_avail>
 8000900:	e0bffb15 	stw	r2,-20(fp)
		alt_up_audio_read_fifo(audio_device, file_pointer, n_samples_in_FIFO, 0);
 8000904:	e0bffb17 	ldw	r2,-20(fp)
 8000908:	000f883a 	mov	r7,zero
 800090c:	100d883a 	mov	r6,r2
 8000910:	e17ffa17 	ldw	r5,-24(fp)
 8000914:	e13fff17 	ldw	r4,-4(fp)
 8000918:	800bfc40 	call	800bfc4 <alt_up_audio_read_fifo>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs
 800091c:	e0bffb17 	ldw	r2,-20(fp)
 8000920:	100b883a 	mov	r5,r2
 8000924:	e13ffa17 	ldw	r4,-24(fp)
 8000928:	80007440 	call	8000744 <average_amplitude>
 800092c:	1007883a 	mov	r3,r2
 8000930:	1809883a 	mov	r4,r3
 8000934:	80006a80 	call	80006a8 <show_amplitude_on_LEDS>

		file_pointer += n_samples_in_FIFO;
 8000938:	e0bffb17 	ldw	r2,-20(fp)
 800093c:	1085883a 	add	r2,r2,r2
 8000940:	1085883a 	add	r2,r2,r2
 8000944:	1007883a 	mov	r3,r2
 8000948:	e0bffa17 	ldw	r2,-24(fp)
 800094c:	10c5883a 	add	r2,r2,r3
 8000950:	e0bffa15 	stw	r2,-24(fp)
		return;
	}
	file_pointer = file;
	end_of_file = &(file[n_samples]);

	while(file_pointer < end_of_file )
 8000954:	e0fffa17 	ldw	r3,-24(fp)
 8000958:	e0bffc17 	ldw	r2,-16(fp)
 800095c:	18bfe536 	bltu	r3,r2,80008f4 <__alt_data_end+0xfc0008f4>

		show_amplitude_on_LEDS(average_amplitude(file_pointer, n_samples_in_FIFO));		// shows the amplitude on the LEDs

		file_pointer += n_samples_in_FIFO;
	}
}
 8000960:	e037883a 	mov	sp,fp
 8000964:	dfc00117 	ldw	ra,4(sp)
 8000968:	df000017 	ldw	fp,0(sp)
 800096c:	dec00204 	addi	sp,sp,8
 8000970:	f800283a 	ret

08000974 <sin>:
 8000974:	00a00034 	movhi	r2,32768
 8000978:	defffa04 	addi	sp,sp,-24
 800097c:	10bfffc4 	addi	r2,r2,-1
 8000980:	00cffa74 	movhi	r3,16361
 8000984:	dfc00515 	stw	ra,20(sp)
 8000988:	2884703a 	and	r2,r5,r2
 800098c:	18c87ec4 	addi	r3,r3,8699
 8000990:	1880180e 	bge	r3,r2,80009f4 <sin+0x80>
 8000994:	00dffc34 	movhi	r3,32752
 8000998:	18ffffc4 	addi	r3,r3,-1
 800099c:	1880060e 	bge	r3,r2,80009b8 <sin+0x44>
 80009a0:	280f883a 	mov	r7,r5
 80009a4:	200d883a 	mov	r6,r4
 80009a8:	8005fb80 	call	8005fb8 <__subdf3>
 80009ac:	dfc00517 	ldw	ra,20(sp)
 80009b0:	dec00604 	addi	sp,sp,24
 80009b4:	f800283a 	ret
 80009b8:	d9800104 	addi	r6,sp,4
 80009bc:	8000b940 	call	8000b94 <__ieee754_rem_pio2>
 80009c0:	108000cc 	andi	r2,r2,3
 80009c4:	00c00044 	movi	r3,1
 80009c8:	10c01926 	beq	r2,r3,8000a30 <sin+0xbc>
 80009cc:	01000084 	movi	r4,2
 80009d0:	11000f26 	beq	r2,r4,8000a10 <sin+0x9c>
 80009d4:	10001c26 	beq	r2,zero,8000a48 <sin+0xd4>
 80009d8:	d9800317 	ldw	r6,12(sp)
 80009dc:	d9c00417 	ldw	r7,16(sp)
 80009e0:	d9000117 	ldw	r4,4(sp)
 80009e4:	d9400217 	ldw	r5,8(sp)
 80009e8:	80015880 	call	8001588 <__kernel_cos>
 80009ec:	18e0003c 	xorhi	r3,r3,32768
 80009f0:	003fee06 	br	80009ac <__alt_data_end+0xfc0009ac>
 80009f4:	d8000015 	stw	zero,0(sp)
 80009f8:	000d883a 	mov	r6,zero
 80009fc:	000f883a 	mov	r7,zero
 8000a00:	80027bc0 	call	80027bc <__kernel_sin>
 8000a04:	dfc00517 	ldw	ra,20(sp)
 8000a08:	dec00604 	addi	sp,sp,24
 8000a0c:	f800283a 	ret
 8000a10:	d9800317 	ldw	r6,12(sp)
 8000a14:	d9c00417 	ldw	r7,16(sp)
 8000a18:	d9000117 	ldw	r4,4(sp)
 8000a1c:	d9400217 	ldw	r5,8(sp)
 8000a20:	d8c00015 	stw	r3,0(sp)
 8000a24:	80027bc0 	call	80027bc <__kernel_sin>
 8000a28:	18e0003c 	xorhi	r3,r3,32768
 8000a2c:	003fdf06 	br	80009ac <__alt_data_end+0xfc0009ac>
 8000a30:	d9800317 	ldw	r6,12(sp)
 8000a34:	d9c00417 	ldw	r7,16(sp)
 8000a38:	d9000117 	ldw	r4,4(sp)
 8000a3c:	d9400217 	ldw	r5,8(sp)
 8000a40:	80015880 	call	8001588 <__kernel_cos>
 8000a44:	003fd906 	br	80009ac <__alt_data_end+0xfc0009ac>
 8000a48:	d9800317 	ldw	r6,12(sp)
 8000a4c:	d9c00417 	ldw	r7,16(sp)
 8000a50:	d9000117 	ldw	r4,4(sp)
 8000a54:	d9400217 	ldw	r5,8(sp)
 8000a58:	d8c00015 	stw	r3,0(sp)
 8000a5c:	80027bc0 	call	80027bc <__kernel_sin>
 8000a60:	003fd206 	br	80009ac <__alt_data_end+0xfc0009ac>

08000a64 <sqrt>:
 8000a64:	defff104 	addi	sp,sp,-60
 8000a68:	dd000d15 	stw	r20,52(sp)
 8000a6c:	05020074 	movhi	r20,2049
 8000a70:	dcc00c15 	stw	r19,48(sp)
 8000a74:	dc800b15 	stw	r18,44(sp)
 8000a78:	dc400a15 	stw	r17,40(sp)
 8000a7c:	dc000915 	stw	r16,36(sp)
 8000a80:	dfc00e15 	stw	ra,56(sp)
 8000a84:	a53cea04 	addi	r20,r20,-3160
 8000a88:	2027883a 	mov	r19,r4
 8000a8c:	2825883a 	mov	r18,r5
 8000a90:	80013000 	call	8001300 <__ieee754_sqrt>
 8000a94:	1821883a 	mov	r16,r3
 8000a98:	a0c00017 	ldw	r3,0(r20)
 8000a9c:	1023883a 	mov	r17,r2
 8000aa0:	00bfffc4 	movi	r2,-1
 8000aa4:	18800a26 	beq	r3,r2,8000ad0 <sqrt+0x6c>
 8000aa8:	9809883a 	mov	r4,r19
 8000aac:	900b883a 	mov	r5,r18
 8000ab0:	8002c880 	call	8002c88 <__fpclassifyd>
 8000ab4:	10000626 	beq	r2,zero,8000ad0 <sqrt+0x6c>
 8000ab8:	000d883a 	mov	r6,zero
 8000abc:	000f883a 	mov	r7,zero
 8000ac0:	9809883a 	mov	r4,r19
 8000ac4:	900b883a 	mov	r5,r18
 8000ac8:	80057ac0 	call	80057ac <__ledf2>
 8000acc:	10000a16 	blt	r2,zero,8000af8 <sqrt+0x94>
 8000ad0:	8805883a 	mov	r2,r17
 8000ad4:	8007883a 	mov	r3,r16
 8000ad8:	dfc00e17 	ldw	ra,56(sp)
 8000adc:	dd000d17 	ldw	r20,52(sp)
 8000ae0:	dcc00c17 	ldw	r19,48(sp)
 8000ae4:	dc800b17 	ldw	r18,44(sp)
 8000ae8:	dc400a17 	ldw	r17,40(sp)
 8000aec:	dc000917 	ldw	r16,36(sp)
 8000af0:	dec00f04 	addi	sp,sp,60
 8000af4:	f800283a 	ret
 8000af8:	00800044 	movi	r2,1
 8000afc:	d8800015 	stw	r2,0(sp)
 8000b00:	a4000017 	ldw	r16,0(r20)
 8000b04:	00820074 	movhi	r2,2049
 8000b08:	10b55104 	addi	r2,r2,-10940
 8000b0c:	d8800115 	stw	r2,4(sp)
 8000b10:	d8000815 	stw	zero,32(sp)
 8000b14:	dcc00415 	stw	r19,16(sp)
 8000b18:	dc800515 	stw	r18,20(sp)
 8000b1c:	dcc00215 	stw	r19,8(sp)
 8000b20:	dc800315 	stw	r18,12(sp)
 8000b24:	80000a1e 	bne	r16,zero,8000b50 <sqrt+0xec>
 8000b28:	d8000615 	stw	zero,24(sp)
 8000b2c:	d8000715 	stw	zero,28(sp)
 8000b30:	d809883a 	mov	r4,sp
 8000b34:	8002cfc0 	call	8002cfc <matherr>
 8000b38:	10000e26 	beq	r2,zero,8000b74 <sqrt+0x110>
 8000b3c:	d8800817 	ldw	r2,32(sp)
 8000b40:	1000101e 	bne	r2,zero,8000b84 <sqrt+0x120>
 8000b44:	d8800617 	ldw	r2,24(sp)
 8000b48:	d8c00717 	ldw	r3,28(sp)
 8000b4c:	003fe206 	br	8000ad8 <__alt_data_end+0xfc000ad8>
 8000b50:	000d883a 	mov	r6,zero
 8000b54:	000f883a 	mov	r7,zero
 8000b58:	0009883a 	mov	r4,zero
 8000b5c:	000b883a 	mov	r5,zero
 8000b60:	8004d600 	call	8004d60 <__divdf3>
 8000b64:	d8800615 	stw	r2,24(sp)
 8000b68:	d8c00715 	stw	r3,28(sp)
 8000b6c:	00800084 	movi	r2,2
 8000b70:	80bfef1e 	bne	r16,r2,8000b30 <__alt_data_end+0xfc000b30>
 8000b74:	8006d2c0 	call	8006d2c <__errno>
 8000b78:	00c00844 	movi	r3,33
 8000b7c:	10c00015 	stw	r3,0(r2)
 8000b80:	003fee06 	br	8000b3c <__alt_data_end+0xfc000b3c>
 8000b84:	8006d2c0 	call	8006d2c <__errno>
 8000b88:	d8c00817 	ldw	r3,32(sp)
 8000b8c:	10c00015 	stw	r3,0(r2)
 8000b90:	003fec06 	br	8000b44 <__alt_data_end+0xfc000b44>

08000b94 <__ieee754_rem_pio2>:
 8000b94:	02200034 	movhi	r8,32768
 8000b98:	deffea04 	addi	sp,sp,-88
 8000b9c:	423fffc4 	addi	r8,r8,-1
 8000ba0:	00cffa74 	movhi	r3,16361
 8000ba4:	ddc01315 	stw	r23,76(sp)
 8000ba8:	dc400d15 	stw	r17,52(sp)
 8000bac:	dfc01515 	stw	ra,84(sp)
 8000bb0:	df001415 	stw	fp,80(sp)
 8000bb4:	dd801215 	stw	r22,72(sp)
 8000bb8:	dd401115 	stw	r21,68(sp)
 8000bbc:	dd001015 	stw	r20,64(sp)
 8000bc0:	dcc00f15 	stw	r19,60(sp)
 8000bc4:	dc800e15 	stw	r18,56(sp)
 8000bc8:	dc000c15 	stw	r16,48(sp)
 8000bcc:	2a2e703a 	and	r23,r5,r8
 8000bd0:	18c87ec4 	addi	r3,r3,8699
 8000bd4:	2823883a 	mov	r17,r5
 8000bd8:	1dc0790e 	bge	r3,r23,8000dc0 <__ieee754_rem_pio2+0x22c>
 8000bdc:	009000f4 	movhi	r2,16387
 8000be0:	10b65ec4 	addi	r2,r2,-9861
 8000be4:	3021883a 	mov	r16,r6
 8000be8:	2027883a 	mov	r19,r4
 8000bec:	15c02316 	blt	r2,r23,8000c7c <__ieee754_rem_pio2+0xe8>
 8000bf0:	01cffe74 	movhi	r7,16377
 8000bf4:	39c87ec4 	addi	r7,r7,8699
 8000bf8:	01951034 	movhi	r6,21568
 8000bfc:	01417a0e 	bge	zero,r5,80011e8 <__ieee754_rem_pio2+0x654>
 8000c00:	8005fb80 	call	8005fb8 <__subdf3>
 8000c04:	1025883a 	mov	r18,r2
 8000c08:	008ffe74 	movhi	r2,16377
 8000c0c:	10887ec4 	addi	r2,r2,8699
 8000c10:	1823883a 	mov	r17,r3
 8000c14:	b8808426 	beq	r23,r2,8000e28 <__ieee754_rem_pio2+0x294>
 8000c18:	018698b4 	movhi	r6,6754
 8000c1c:	01cf7474 	movhi	r7,15825
 8000c20:	3198cc44 	addi	r6,r6,25393
 8000c24:	39ed1844 	addi	r7,r7,-19359
 8000c28:	9009883a 	mov	r4,r18
 8000c2c:	180b883a 	mov	r5,r3
 8000c30:	8005fb80 	call	8005fb8 <__subdf3>
 8000c34:	100d883a 	mov	r6,r2
 8000c38:	180f883a 	mov	r7,r3
 8000c3c:	9009883a 	mov	r4,r18
 8000c40:	880b883a 	mov	r5,r17
 8000c44:	80800015 	stw	r2,0(r16)
 8000c48:	80c00115 	stw	r3,4(r16)
 8000c4c:	8005fb80 	call	8005fb8 <__subdf3>
 8000c50:	018698b4 	movhi	r6,6754
 8000c54:	01cf7474 	movhi	r7,15825
 8000c58:	3198cc44 	addi	r6,r6,25393
 8000c5c:	39ed1844 	addi	r7,r7,-19359
 8000c60:	1009883a 	mov	r4,r2
 8000c64:	180b883a 	mov	r5,r3
 8000c68:	8005fb80 	call	8005fb8 <__subdf3>
 8000c6c:	80800215 	stw	r2,8(r16)
 8000c70:	80c00315 	stw	r3,12(r16)
 8000c74:	00800044 	movi	r2,1
 8000c78:	00005606 	br	8000dd4 <__ieee754_rem_pio2+0x240>
 8000c7c:	00904e74 	movhi	r2,16697
 8000c80:	10887ec4 	addi	r2,r2,8699
 8000c84:	15c0830e 	bge	r2,r23,8000e94 <__ieee754_rem_pio2+0x300>
 8000c88:	009ffc34 	movhi	r2,32752
 8000c8c:	10bfffc4 	addi	r2,r2,-1
 8000c90:	15c05c16 	blt	r2,r23,8000e04 <__ieee754_rem_pio2+0x270>
 8000c94:	b829d53a 	srai	r20,r23,20
 8000c98:	a53efa84 	addi	r20,r20,-1046
 8000c9c:	a024953a 	slli	r18,r20,20
 8000ca0:	bca5c83a 	sub	r18,r23,r18
 8000ca4:	900b883a 	mov	r5,r18
 8000ca8:	80068b40 	call	80068b4 <__fixdfsi>
 8000cac:	1009883a 	mov	r4,r2
 8000cb0:	80069340 	call	8006934 <__floatsidf>
 8000cb4:	9809883a 	mov	r4,r19
 8000cb8:	900b883a 	mov	r5,r18
 8000cbc:	100d883a 	mov	r6,r2
 8000cc0:	180f883a 	mov	r7,r3
 8000cc4:	d8800215 	stw	r2,8(sp)
 8000cc8:	d8c00315 	stw	r3,12(sp)
 8000ccc:	8005fb80 	call	8005fb8 <__subdf3>
 8000cd0:	000d883a 	mov	r6,zero
 8000cd4:	01d05c34 	movhi	r7,16752
 8000cd8:	1009883a 	mov	r4,r2
 8000cdc:	180b883a 	mov	r5,r3
 8000ce0:	80058a00 	call	80058a0 <__muldf3>
 8000ce4:	180b883a 	mov	r5,r3
 8000ce8:	1009883a 	mov	r4,r2
 8000cec:	182b883a 	mov	r21,r3
 8000cf0:	102d883a 	mov	r22,r2
 8000cf4:	80068b40 	call	80068b4 <__fixdfsi>
 8000cf8:	1009883a 	mov	r4,r2
 8000cfc:	80069340 	call	8006934 <__floatsidf>
 8000d00:	100d883a 	mov	r6,r2
 8000d04:	180f883a 	mov	r7,r3
 8000d08:	b009883a 	mov	r4,r22
 8000d0c:	a80b883a 	mov	r5,r21
 8000d10:	1027883a 	mov	r19,r2
 8000d14:	1825883a 	mov	r18,r3
 8000d18:	d8800415 	stw	r2,16(sp)
 8000d1c:	d8c00515 	stw	r3,20(sp)
 8000d20:	8005fb80 	call	8005fb8 <__subdf3>
 8000d24:	000d883a 	mov	r6,zero
 8000d28:	01d05c34 	movhi	r7,16752
 8000d2c:	1009883a 	mov	r4,r2
 8000d30:	180b883a 	mov	r5,r3
 8000d34:	80058a00 	call	80058a0 <__muldf3>
 8000d38:	000d883a 	mov	r6,zero
 8000d3c:	000f883a 	mov	r7,zero
 8000d40:	1009883a 	mov	r4,r2
 8000d44:	180b883a 	mov	r5,r3
 8000d48:	d8800615 	stw	r2,24(sp)
 8000d4c:	d8c00715 	stw	r3,28(sp)
 8000d50:	80056480 	call	8005648 <__eqdf2>
 8000d54:	1001431e 	bne	r2,zero,8001264 <__ieee754_rem_pio2+0x6d0>
 8000d58:	000f883a 	mov	r7,zero
 8000d5c:	000d883a 	mov	r6,zero
 8000d60:	9809883a 	mov	r4,r19
 8000d64:	900b883a 	mov	r5,r18
 8000d68:	80056480 	call	8005648 <__eqdf2>
 8000d6c:	100f003a 	cmpeq	r7,r2,zero
 8000d70:	00800084 	movi	r2,2
 8000d74:	11cfc83a 	sub	r7,r2,r7
 8000d78:	00800084 	movi	r2,2
 8000d7c:	d8800015 	stw	r2,0(sp)
 8000d80:	00820074 	movhi	r2,2049
 8000d84:	10b57304 	addi	r2,r2,-10804
 8000d88:	d8800115 	stw	r2,4(sp)
 8000d8c:	a00d883a 	mov	r6,r20
 8000d90:	800b883a 	mov	r5,r16
 8000d94:	d9000204 	addi	r4,sp,8
 8000d98:	8001a2c0 	call	8001a2c <__kernel_rem_pio2>
 8000d9c:	88000d0e 	bge	r17,zero,8000dd4 <__ieee754_rem_pio2+0x240>
 8000da0:	81000117 	ldw	r4,4(r16)
 8000da4:	80c00317 	ldw	r3,12(r16)
 8000da8:	0085c83a 	sub	r2,zero,r2
 8000dac:	2120003c 	xorhi	r4,r4,32768
 8000db0:	18e0003c 	xorhi	r3,r3,32768
 8000db4:	81000115 	stw	r4,4(r16)
 8000db8:	80c00315 	stw	r3,12(r16)
 8000dbc:	00000506 	br	8000dd4 <__ieee754_rem_pio2+0x240>
 8000dc0:	31000015 	stw	r4,0(r6)
 8000dc4:	31400115 	stw	r5,4(r6)
 8000dc8:	30000215 	stw	zero,8(r6)
 8000dcc:	30000315 	stw	zero,12(r6)
 8000dd0:	0005883a 	mov	r2,zero
 8000dd4:	dfc01517 	ldw	ra,84(sp)
 8000dd8:	df001417 	ldw	fp,80(sp)
 8000ddc:	ddc01317 	ldw	r23,76(sp)
 8000de0:	dd801217 	ldw	r22,72(sp)
 8000de4:	dd401117 	ldw	r21,68(sp)
 8000de8:	dd001017 	ldw	r20,64(sp)
 8000dec:	dcc00f17 	ldw	r19,60(sp)
 8000df0:	dc800e17 	ldw	r18,56(sp)
 8000df4:	dc400d17 	ldw	r17,52(sp)
 8000df8:	dc000c17 	ldw	r16,48(sp)
 8000dfc:	dec01604 	addi	sp,sp,88
 8000e00:	f800283a 	ret
 8000e04:	200d883a 	mov	r6,r4
 8000e08:	280f883a 	mov	r7,r5
 8000e0c:	8005fb80 	call	8005fb8 <__subdf3>
 8000e10:	80800215 	stw	r2,8(r16)
 8000e14:	80800015 	stw	r2,0(r16)
 8000e18:	80c00315 	stw	r3,12(r16)
 8000e1c:	80c00115 	stw	r3,4(r16)
 8000e20:	0005883a 	mov	r2,zero
 8000e24:	003feb06 	br	8000dd4 <__alt_data_end+0xfc000dd4>
 8000e28:	01cf7474 	movhi	r7,15825
 8000e2c:	9009883a 	mov	r4,r18
 8000e30:	39ed1844 	addi	r7,r7,-19359
 8000e34:	01869834 	movhi	r6,6752
 8000e38:	180b883a 	mov	r5,r3
 8000e3c:	8005fb80 	call	8005fb8 <__subdf3>
 8000e40:	018b80f4 	movhi	r6,11779
 8000e44:	01cee8f4 	movhi	r7,15267
 8000e48:	319c1cc4 	addi	r6,r6,28787
 8000e4c:	39c66284 	addi	r7,r7,6538
 8000e50:	1009883a 	mov	r4,r2
 8000e54:	180b883a 	mov	r5,r3
 8000e58:	1025883a 	mov	r18,r2
 8000e5c:	1823883a 	mov	r17,r3
 8000e60:	8005fb80 	call	8005fb8 <__subdf3>
 8000e64:	100d883a 	mov	r6,r2
 8000e68:	180f883a 	mov	r7,r3
 8000e6c:	9009883a 	mov	r4,r18
 8000e70:	880b883a 	mov	r5,r17
 8000e74:	80800015 	stw	r2,0(r16)
 8000e78:	80c00115 	stw	r3,4(r16)
 8000e7c:	8005fb80 	call	8005fb8 <__subdf3>
 8000e80:	018b80f4 	movhi	r6,11779
 8000e84:	01cee8f4 	movhi	r7,15267
 8000e88:	319c1cc4 	addi	r6,r6,28787
 8000e8c:	39c66284 	addi	r7,r7,6538
 8000e90:	003f7306 	br	8000c60 <__alt_data_end+0xfc000c60>
 8000e94:	8002a880 	call	8002a88 <fabs>
 8000e98:	019b72b4 	movhi	r6,28106
 8000e9c:	01cff934 	movhi	r7,16356
 8000ea0:	31b220c4 	addi	r6,r6,-14205
 8000ea4:	39d7cc04 	addi	r7,r7,24368
 8000ea8:	1009883a 	mov	r4,r2
 8000eac:	180b883a 	mov	r5,r3
 8000eb0:	102d883a 	mov	r22,r2
 8000eb4:	182b883a 	mov	r21,r3
 8000eb8:	80058a00 	call	80058a0 <__muldf3>
 8000ebc:	000d883a 	mov	r6,zero
 8000ec0:	01cff834 	movhi	r7,16352
 8000ec4:	1009883a 	mov	r4,r2
 8000ec8:	180b883a 	mov	r5,r3
 8000ecc:	80044b40 	call	80044b4 <__adddf3>
 8000ed0:	180b883a 	mov	r5,r3
 8000ed4:	1009883a 	mov	r4,r2
 8000ed8:	80068b40 	call	80068b4 <__fixdfsi>
 8000edc:	1009883a 	mov	r4,r2
 8000ee0:	1025883a 	mov	r18,r2
 8000ee4:	80069340 	call	8006934 <__floatsidf>
 8000ee8:	01cffe74 	movhi	r7,16377
 8000eec:	39c87ec4 	addi	r7,r7,8699
 8000ef0:	01951034 	movhi	r6,21568
 8000ef4:	1009883a 	mov	r4,r2
 8000ef8:	180b883a 	mov	r5,r3
 8000efc:	1029883a 	mov	r20,r2
 8000f00:	1827883a 	mov	r19,r3
 8000f04:	80058a00 	call	80058a0 <__muldf3>
 8000f08:	b009883a 	mov	r4,r22
 8000f0c:	a80b883a 	mov	r5,r21
 8000f10:	100d883a 	mov	r6,r2
 8000f14:	180f883a 	mov	r7,r3
 8000f18:	8005fb80 	call	8005fb8 <__subdf3>
 8000f1c:	018698b4 	movhi	r6,6754
 8000f20:	01cf7474 	movhi	r7,15825
 8000f24:	a009883a 	mov	r4,r20
 8000f28:	3198cc44 	addi	r6,r6,25393
 8000f2c:	39ed1844 	addi	r7,r7,-19359
 8000f30:	980b883a 	mov	r5,r19
 8000f34:	1039883a 	mov	fp,r2
 8000f38:	d8c00815 	stw	r3,32(sp)
 8000f3c:	80058a00 	call	80058a0 <__muldf3>
 8000f40:	010007c4 	movi	r4,31
 8000f44:	e017883a 	mov	r11,fp
 8000f48:	da800817 	ldw	r10,32(sp)
 8000f4c:	102d883a 	mov	r22,r2
 8000f50:	182b883a 	mov	r21,r3
 8000f54:	24802816 	blt	r4,r18,8000ff8 <__ieee754_rem_pio2+0x464>
 8000f58:	913fffc4 	addi	r4,r18,-1
 8000f5c:	2109883a 	add	r4,r4,r4
 8000f60:	01420074 	movhi	r5,2049
 8000f64:	2109883a 	add	r4,r4,r4
 8000f68:	29755304 	addi	r5,r5,-10932
 8000f6c:	2909883a 	add	r4,r5,r4
 8000f70:	21000017 	ldw	r4,0(r4)
 8000f74:	b9002026 	beq	r23,r4,8000ff8 <__ieee754_rem_pio2+0x464>
 8000f78:	100d883a 	mov	r6,r2
 8000f7c:	180f883a 	mov	r7,r3
 8000f80:	e009883a 	mov	r4,fp
 8000f84:	500b883a 	mov	r5,r10
 8000f88:	da800b15 	stw	r10,44(sp)
 8000f8c:	df000a15 	stw	fp,40(sp)
 8000f90:	8005fb80 	call	8005fb8 <__subdf3>
 8000f94:	da800b17 	ldw	r10,44(sp)
 8000f98:	dac00a17 	ldw	r11,40(sp)
 8000f9c:	1019883a 	mov	r12,r2
 8000fa0:	1813883a 	mov	r9,r3
 8000fa4:	80800015 	stw	r2,0(r16)
 8000fa8:	80c00115 	stw	r3,4(r16)
 8000fac:	600d883a 	mov	r6,r12
 8000fb0:	480f883a 	mov	r7,r9
 8000fb4:	5809883a 	mov	r4,r11
 8000fb8:	500b883a 	mov	r5,r10
 8000fbc:	da400b15 	stw	r9,44(sp)
 8000fc0:	db000a15 	stw	r12,40(sp)
 8000fc4:	8005fb80 	call	8005fb8 <__subdf3>
 8000fc8:	b00d883a 	mov	r6,r22
 8000fcc:	a80f883a 	mov	r7,r21
 8000fd0:	1009883a 	mov	r4,r2
 8000fd4:	180b883a 	mov	r5,r3
 8000fd8:	8005fb80 	call	8005fb8 <__subdf3>
 8000fdc:	80800215 	stw	r2,8(r16)
 8000fe0:	80c00315 	stw	r3,12(r16)
 8000fe4:	da400b17 	ldw	r9,44(sp)
 8000fe8:	db000a17 	ldw	r12,40(sp)
 8000fec:	88009f16 	blt	r17,zero,800126c <__ieee754_rem_pio2+0x6d8>
 8000ff0:	9005883a 	mov	r2,r18
 8000ff4:	003f7706 	br	8000dd4 <__alt_data_end+0xfc000dd4>
 8000ff8:	d9400817 	ldw	r5,32(sp)
 8000ffc:	100d883a 	mov	r6,r2
 8001000:	180f883a 	mov	r7,r3
 8001004:	e009883a 	mov	r4,fp
 8001008:	da800b15 	stw	r10,44(sp)
 800100c:	dac00a15 	stw	r11,40(sp)
 8001010:	8005fb80 	call	8005fb8 <__subdf3>
 8001014:	1019883a 	mov	r12,r2
 8001018:	1804d53a 	srli	r2,r3,20
 800101c:	b811d53a 	srai	r8,r23,20
 8001020:	1813883a 	mov	r9,r3
 8001024:	1081ffcc 	andi	r2,r2,2047
 8001028:	80c00115 	stw	r3,4(r16)
 800102c:	83000015 	stw	r12,0(r16)
 8001030:	4085c83a 	sub	r2,r8,r2
 8001034:	00c00404 	movi	r3,16
 8001038:	da800b17 	ldw	r10,44(sp)
 800103c:	dac00a17 	ldw	r11,40(sp)
 8001040:	18bfda0e 	bge	r3,r2,8000fac <__alt_data_end+0xfc000fac>
 8001044:	01cf7474 	movhi	r7,15825
 8001048:	39ed1844 	addi	r7,r7,-19359
 800104c:	01869834 	movhi	r6,6752
 8001050:	a009883a 	mov	r4,r20
 8001054:	980b883a 	mov	r5,r19
 8001058:	da000a15 	stw	r8,40(sp)
 800105c:	80058a00 	call	80058a0 <__muldf3>
 8001060:	d9400817 	ldw	r5,32(sp)
 8001064:	100d883a 	mov	r6,r2
 8001068:	180f883a 	mov	r7,r3
 800106c:	e009883a 	mov	r4,fp
 8001070:	102d883a 	mov	r22,r2
 8001074:	182b883a 	mov	r21,r3
 8001078:	8005fb80 	call	8005fb8 <__subdf3>
 800107c:	d9400817 	ldw	r5,32(sp)
 8001080:	100d883a 	mov	r6,r2
 8001084:	180f883a 	mov	r7,r3
 8001088:	e009883a 	mov	r4,fp
 800108c:	182f883a 	mov	r23,r3
 8001090:	d8800915 	stw	r2,36(sp)
 8001094:	8005fb80 	call	8005fb8 <__subdf3>
 8001098:	b00d883a 	mov	r6,r22
 800109c:	a80f883a 	mov	r7,r21
 80010a0:	1009883a 	mov	r4,r2
 80010a4:	180b883a 	mov	r5,r3
 80010a8:	8005fb80 	call	8005fb8 <__subdf3>
 80010ac:	018b80f4 	movhi	r6,11779
 80010b0:	01cee8f4 	movhi	r7,15267
 80010b4:	319c1cc4 	addi	r6,r6,28787
 80010b8:	39c66284 	addi	r7,r7,6538
 80010bc:	a009883a 	mov	r4,r20
 80010c0:	980b883a 	mov	r5,r19
 80010c4:	102d883a 	mov	r22,r2
 80010c8:	182b883a 	mov	r21,r3
 80010cc:	80058a00 	call	80058a0 <__muldf3>
 80010d0:	b00d883a 	mov	r6,r22
 80010d4:	a80f883a 	mov	r7,r21
 80010d8:	1009883a 	mov	r4,r2
 80010dc:	180b883a 	mov	r5,r3
 80010e0:	8005fb80 	call	8005fb8 <__subdf3>
 80010e4:	d9000917 	ldw	r4,36(sp)
 80010e8:	100d883a 	mov	r6,r2
 80010ec:	180f883a 	mov	r7,r3
 80010f0:	b80b883a 	mov	r5,r23
 80010f4:	102d883a 	mov	r22,r2
 80010f8:	182b883a 	mov	r21,r3
 80010fc:	8005fb80 	call	8005fb8 <__subdf3>
 8001100:	1019883a 	mov	r12,r2
 8001104:	1804d53a 	srli	r2,r3,20
 8001108:	da000a17 	ldw	r8,40(sp)
 800110c:	83000015 	stw	r12,0(r16)
 8001110:	1081ffcc 	andi	r2,r2,2047
 8001114:	4091c83a 	sub	r8,r8,r2
 8001118:	80c00115 	stw	r3,4(r16)
 800111c:	00800c44 	movi	r2,49
 8001120:	1813883a 	mov	r9,r3
 8001124:	1200730e 	bge	r2,r8,80012f4 <__ieee754_rem_pio2+0x760>
 8001128:	01cee8f4 	movhi	r7,15267
 800112c:	39c66284 	addi	r7,r7,6538
 8001130:	018b8034 	movhi	r6,11776
 8001134:	a009883a 	mov	r4,r20
 8001138:	980b883a 	mov	r5,r19
 800113c:	80058a00 	call	80058a0 <__muldf3>
 8001140:	d9000917 	ldw	r4,36(sp)
 8001144:	100d883a 	mov	r6,r2
 8001148:	180f883a 	mov	r7,r3
 800114c:	b80b883a 	mov	r5,r23
 8001150:	102d883a 	mov	r22,r2
 8001154:	182b883a 	mov	r21,r3
 8001158:	8005fb80 	call	8005fb8 <__subdf3>
 800115c:	d9000917 	ldw	r4,36(sp)
 8001160:	100d883a 	mov	r6,r2
 8001164:	180f883a 	mov	r7,r3
 8001168:	b80b883a 	mov	r5,r23
 800116c:	d8c00b15 	stw	r3,44(sp)
 8001170:	d8800a15 	stw	r2,40(sp)
 8001174:	8005fb80 	call	8005fb8 <__subdf3>
 8001178:	b00d883a 	mov	r6,r22
 800117c:	a80f883a 	mov	r7,r21
 8001180:	1009883a 	mov	r4,r2
 8001184:	180b883a 	mov	r5,r3
 8001188:	8005fb80 	call	8005fb8 <__subdf3>
 800118c:	01894834 	movhi	r6,9504
 8001190:	01ce5f34 	movhi	r7,14716
 8001194:	31927044 	addi	r6,r6,18881
 8001198:	39e0e684 	addi	r7,r7,-31846
 800119c:	a009883a 	mov	r4,r20
 80011a0:	980b883a 	mov	r5,r19
 80011a4:	102d883a 	mov	r22,r2
 80011a8:	182b883a 	mov	r21,r3
 80011ac:	80058a00 	call	80058a0 <__muldf3>
 80011b0:	b00d883a 	mov	r6,r22
 80011b4:	a80f883a 	mov	r7,r21
 80011b8:	1009883a 	mov	r4,r2
 80011bc:	180b883a 	mov	r5,r3
 80011c0:	8005fb80 	call	8005fb8 <__subdf3>
 80011c4:	dac00a17 	ldw	r11,40(sp)
 80011c8:	da800b17 	ldw	r10,44(sp)
 80011cc:	102d883a 	mov	r22,r2
 80011d0:	182b883a 	mov	r21,r3
 80011d4:	100d883a 	mov	r6,r2
 80011d8:	180f883a 	mov	r7,r3
 80011dc:	5809883a 	mov	r4,r11
 80011e0:	500b883a 	mov	r5,r10
 80011e4:	003f6a06 	br	8000f90 <__alt_data_end+0xfc000f90>
 80011e8:	80044b40 	call	80044b4 <__adddf3>
 80011ec:	1025883a 	mov	r18,r2
 80011f0:	008ffe74 	movhi	r2,16377
 80011f4:	10887ec4 	addi	r2,r2,8699
 80011f8:	1823883a 	mov	r17,r3
 80011fc:	b8802226 	beq	r23,r2,8001288 <__ieee754_rem_pio2+0x6f4>
 8001200:	018698b4 	movhi	r6,6754
 8001204:	01cf7474 	movhi	r7,15825
 8001208:	3198cc44 	addi	r6,r6,25393
 800120c:	39ed1844 	addi	r7,r7,-19359
 8001210:	9009883a 	mov	r4,r18
 8001214:	180b883a 	mov	r5,r3
 8001218:	80044b40 	call	80044b4 <__adddf3>
 800121c:	100d883a 	mov	r6,r2
 8001220:	180f883a 	mov	r7,r3
 8001224:	9009883a 	mov	r4,r18
 8001228:	880b883a 	mov	r5,r17
 800122c:	80800015 	stw	r2,0(r16)
 8001230:	80c00115 	stw	r3,4(r16)
 8001234:	8005fb80 	call	8005fb8 <__subdf3>
 8001238:	018698b4 	movhi	r6,6754
 800123c:	01cf7474 	movhi	r7,15825
 8001240:	3198cc44 	addi	r6,r6,25393
 8001244:	39ed1844 	addi	r7,r7,-19359
 8001248:	1009883a 	mov	r4,r2
 800124c:	180b883a 	mov	r5,r3
 8001250:	80044b40 	call	80044b4 <__adddf3>
 8001254:	80800215 	stw	r2,8(r16)
 8001258:	80c00315 	stw	r3,12(r16)
 800125c:	00bfffc4 	movi	r2,-1
 8001260:	003edc06 	br	8000dd4 <__alt_data_end+0xfc000dd4>
 8001264:	01c000c4 	movi	r7,3
 8001268:	003ec306 	br	8000d78 <__alt_data_end+0xfc000d78>
 800126c:	4a60003c 	xorhi	r9,r9,32768
 8001270:	18e0003c 	xorhi	r3,r3,32768
 8001274:	83000015 	stw	r12,0(r16)
 8001278:	82400115 	stw	r9,4(r16)
 800127c:	80c00315 	stw	r3,12(r16)
 8001280:	0485c83a 	sub	r2,zero,r18
 8001284:	003ed306 	br	8000dd4 <__alt_data_end+0xfc000dd4>
 8001288:	01cf7474 	movhi	r7,15825
 800128c:	9009883a 	mov	r4,r18
 8001290:	39ed1844 	addi	r7,r7,-19359
 8001294:	01869834 	movhi	r6,6752
 8001298:	180b883a 	mov	r5,r3
 800129c:	80044b40 	call	80044b4 <__adddf3>
 80012a0:	018b80f4 	movhi	r6,11779
 80012a4:	01cee8f4 	movhi	r7,15267
 80012a8:	319c1cc4 	addi	r6,r6,28787
 80012ac:	39c66284 	addi	r7,r7,6538
 80012b0:	1009883a 	mov	r4,r2
 80012b4:	180b883a 	mov	r5,r3
 80012b8:	1025883a 	mov	r18,r2
 80012bc:	1823883a 	mov	r17,r3
 80012c0:	80044b40 	call	80044b4 <__adddf3>
 80012c4:	100d883a 	mov	r6,r2
 80012c8:	180f883a 	mov	r7,r3
 80012cc:	9009883a 	mov	r4,r18
 80012d0:	880b883a 	mov	r5,r17
 80012d4:	80800015 	stw	r2,0(r16)
 80012d8:	80c00115 	stw	r3,4(r16)
 80012dc:	8005fb80 	call	8005fb8 <__subdf3>
 80012e0:	018b80f4 	movhi	r6,11779
 80012e4:	01cee8f4 	movhi	r7,15267
 80012e8:	319c1cc4 	addi	r6,r6,28787
 80012ec:	39c66284 	addi	r7,r7,6538
 80012f0:	003fd506 	br	8001248 <__alt_data_end+0xfc001248>
 80012f4:	dac00917 	ldw	r11,36(sp)
 80012f8:	b815883a 	mov	r10,r23
 80012fc:	003f2b06 	br	8000fac <__alt_data_end+0xfc000fac>

08001300 <__ieee754_sqrt>:
 8001300:	defffd04 	addi	sp,sp,-12
 8001304:	dc400115 	stw	r17,4(sp)
 8001308:	dc000015 	stw	r16,0(sp)
 800130c:	dfc00215 	stw	ra,8(sp)
 8001310:	28dffc2c 	andhi	r3,r5,32752
 8001314:	009ffc34 	movhi	r2,32752
 8001318:	2821883a 	mov	r16,r5
 800131c:	2023883a 	mov	r17,r4
 8001320:	200d883a 	mov	r6,r4
 8001324:	18807b26 	beq	r3,r2,8001514 <__ieee754_sqrt+0x214>
 8001328:	01405f0e 	bge	zero,r5,80014a8 <__ieee754_sqrt+0x1a8>
 800132c:	2815d53a 	srai	r10,r5,20
 8001330:	50006a26 	beq	r10,zero,80014dc <__ieee754_sqrt+0x1dc>
 8001334:	00c00434 	movhi	r3,16
 8001338:	52bf0044 	addi	r10,r10,-1023
 800133c:	18ffffc4 	addi	r3,r3,-1
 8001340:	80c6703a 	and	r3,r16,r3
 8001344:	5080004c 	andi	r2,r10,1
 8001348:	18c00434 	orhi	r3,r3,16
 800134c:	1000511e 	bne	r2,zero,8001494 <__ieee754_sqrt+0x194>
 8001350:	3004d7fa 	srli	r2,r6,31
 8001354:	5015d07a 	srai	r10,r10,1
 8001358:	18c7883a 	add	r3,r3,r3
 800135c:	10c5883a 	add	r2,r2,r3
 8001360:	01400584 	movi	r5,22
 8001364:	3187883a 	add	r3,r6,r6
 8001368:	0013883a 	mov	r9,zero
 800136c:	000f883a 	mov	r7,zero
 8001370:	01000834 	movhi	r4,32
 8001374:	390d883a 	add	r6,r7,r4
 8001378:	1810d7fa 	srli	r8,r3,31
 800137c:	297fffc4 	addi	r5,r5,-1
 8001380:	11800316 	blt	r2,r6,8001390 <__ieee754_sqrt+0x90>
 8001384:	1185c83a 	sub	r2,r2,r6
 8001388:	310f883a 	add	r7,r6,r4
 800138c:	4913883a 	add	r9,r9,r4
 8001390:	1085883a 	add	r2,r2,r2
 8001394:	4085883a 	add	r2,r8,r2
 8001398:	18c7883a 	add	r3,r3,r3
 800139c:	2008d07a 	srli	r4,r4,1
 80013a0:	283ff41e 	bne	r5,zero,8001374 <__alt_data_end+0xfc001374>
 80013a4:	01200034 	movhi	r4,32768
 80013a8:	01800804 	movi	r6,32
 80013ac:	0011883a 	mov	r8,zero
 80013b0:	0019883a 	mov	r12,zero
 80013b4:	201b883a 	mov	r13,r4
 80013b8:	00000806 	br	80013dc <__ieee754_sqrt+0xdc>
 80013bc:	38801726 	beq	r7,r2,800141c <__ieee754_sqrt+0x11c>
 80013c0:	180ad7fa 	srli	r5,r3,31
 80013c4:	1085883a 	add	r2,r2,r2
 80013c8:	31bfffc4 	addi	r6,r6,-1
 80013cc:	2885883a 	add	r2,r5,r2
 80013d0:	18c7883a 	add	r3,r3,r3
 80013d4:	2008d07a 	srli	r4,r4,1
 80013d8:	30001726 	beq	r6,zero,8001438 <__ieee754_sqrt+0x138>
 80013dc:	230b883a 	add	r5,r4,r12
 80013e0:	38bff60e 	bge	r7,r2,80013bc <__alt_data_end+0xfc0013bc>
 80013e4:	2ae0002c 	andhi	r11,r5,32768
 80013e8:	2919883a 	add	r12,r5,r4
 80013ec:	5b400826 	beq	r11,r13,8001410 <__ieee754_sqrt+0x110>
 80013f0:	3817883a 	mov	r11,r7
 80013f4:	11c5c83a 	sub	r2,r2,r7
 80013f8:	1940012e 	bgeu	r3,r5,8001400 <__ieee754_sqrt+0x100>
 80013fc:	10bfffc4 	addi	r2,r2,-1
 8001400:	1947c83a 	sub	r3,r3,r5
 8001404:	4111883a 	add	r8,r8,r4
 8001408:	580f883a 	mov	r7,r11
 800140c:	003fec06 	br	80013c0 <__alt_data_end+0xfc0013c0>
 8001410:	603ff716 	blt	r12,zero,80013f0 <__alt_data_end+0xfc0013f0>
 8001414:	3ac00044 	addi	r11,r7,1
 8001418:	003ff606 	br	80013f4 <__alt_data_end+0xfc0013f4>
 800141c:	19401936 	bltu	r3,r5,8001484 <__ieee754_sqrt+0x184>
 8001420:	2ae0002c 	andhi	r11,r5,32768
 8001424:	2919883a 	add	r12,r5,r4
 8001428:	5b404526 	beq	r11,r13,8001540 <__ieee754_sqrt+0x240>
 800142c:	1017883a 	mov	r11,r2
 8001430:	0005883a 	mov	r2,zero
 8001434:	003ff206 	br	8001400 <__alt_data_end+0xfc001400>
 8001438:	10c4b03a 	or	r2,r2,r3
 800143c:	10000426 	beq	r2,zero,8001450 <__ieee754_sqrt+0x150>
 8001440:	00bfffc4 	movi	r2,-1
 8001444:	40804026 	beq	r8,r2,8001548 <__ieee754_sqrt+0x248>
 8001448:	4080004c 	andi	r2,r8,1
 800144c:	4091883a 	add	r8,r8,r2
 8001450:	4004d07a 	srli	r2,r8,1
 8001454:	4807d07a 	srai	r3,r9,1
 8001458:	010ff834 	movhi	r4,16352
 800145c:	4a40004c 	andi	r9,r9,1
 8001460:	1909883a 	add	r4,r3,r4
 8001464:	4800091e 	bne	r9,zero,800148c <__ieee754_sqrt+0x18c>
 8001468:	5006953a 	slli	r3,r10,20
 800146c:	1907883a 	add	r3,r3,r4
 8001470:	dfc00217 	ldw	ra,8(sp)
 8001474:	dc400117 	ldw	r17,4(sp)
 8001478:	dc000017 	ldw	r16,0(sp)
 800147c:	dec00304 	addi	sp,sp,12
 8001480:	f800283a 	ret
 8001484:	3805883a 	mov	r2,r7
 8001488:	003fcd06 	br	80013c0 <__alt_data_end+0xfc0013c0>
 800148c:	10a00034 	orhi	r2,r2,32768
 8001490:	003ff506 	br	8001468 <__alt_data_end+0xfc001468>
 8001494:	3004d7fa 	srli	r2,r6,31
 8001498:	18c7883a 	add	r3,r3,r3
 800149c:	318d883a 	add	r6,r6,r6
 80014a0:	10c7883a 	add	r3,r2,r3
 80014a4:	003faa06 	br	8001350 <__alt_data_end+0xfc001350>
 80014a8:	00a00034 	movhi	r2,32768
 80014ac:	10bfffc4 	addi	r2,r2,-1
 80014b0:	2884703a 	and	r2,r5,r2
 80014b4:	1104b03a 	or	r2,r2,r4
 80014b8:	10001e26 	beq	r2,zero,8001534 <__ieee754_sqrt+0x234>
 80014bc:	2800291e 	bne	r5,zero,8001564 <__ieee754_sqrt+0x264>
 80014c0:	0015883a 	mov	r10,zero
 80014c4:	3020d2fa 	srli	r16,r6,11
 80014c8:	52bffac4 	addi	r10,r10,-21
 80014cc:	300c957a 	slli	r6,r6,21
 80014d0:	803ffc26 	beq	r16,zero,80014c4 <__alt_data_end+0xfc0014c4>
 80014d4:	8080042c 	andhi	r2,r16,16
 80014d8:	10001e1e 	bne	r2,zero,8001554 <__ieee754_sqrt+0x254>
 80014dc:	0005883a 	mov	r2,zero
 80014e0:	00000106 	br	80014e8 <__ieee754_sqrt+0x1e8>
 80014e4:	1805883a 	mov	r2,r3
 80014e8:	8421883a 	add	r16,r16,r16
 80014ec:	8100042c 	andhi	r4,r16,16
 80014f0:	10c00044 	addi	r3,r2,1
 80014f4:	203ffb26 	beq	r4,zero,80014e4 <__alt_data_end+0xfc0014e4>
 80014f8:	01000804 	movi	r4,32
 80014fc:	20c9c83a 	sub	r4,r4,r3
 8001500:	3108d83a 	srl	r4,r6,r4
 8001504:	5095c83a 	sub	r10,r10,r2
 8001508:	30cc983a 	sll	r6,r6,r3
 800150c:	2420b03a 	or	r16,r4,r16
 8001510:	003f8806 	br	8001334 <__alt_data_end+0xfc001334>
 8001514:	280f883a 	mov	r7,r5
 8001518:	80058a00 	call	80058a0 <__muldf3>
 800151c:	880d883a 	mov	r6,r17
 8001520:	800f883a 	mov	r7,r16
 8001524:	1009883a 	mov	r4,r2
 8001528:	180b883a 	mov	r5,r3
 800152c:	80044b40 	call	80044b4 <__adddf3>
 8001530:	003fcf06 	br	8001470 <__alt_data_end+0xfc001470>
 8001534:	2005883a 	mov	r2,r4
 8001538:	2807883a 	mov	r3,r5
 800153c:	003fcc06 	br	8001470 <__alt_data_end+0xfc001470>
 8001540:	603fba16 	blt	r12,zero,800142c <__alt_data_end+0xfc00142c>
 8001544:	003fb306 	br	8001414 <__alt_data_end+0xfc001414>
 8001548:	4a400044 	addi	r9,r9,1
 800154c:	0005883a 	mov	r2,zero
 8001550:	003fc006 	br	8001454 <__alt_data_end+0xfc001454>
 8001554:	01000804 	movi	r4,32
 8001558:	00bfffc4 	movi	r2,-1
 800155c:	0007883a 	mov	r3,zero
 8001560:	003fe706 	br	8001500 <__alt_data_end+0xfc001500>
 8001564:	200d883a 	mov	r6,r4
 8001568:	280f883a 	mov	r7,r5
 800156c:	8005fb80 	call	8005fb8 <__subdf3>
 8001570:	100d883a 	mov	r6,r2
 8001574:	180f883a 	mov	r7,r3
 8001578:	1009883a 	mov	r4,r2
 800157c:	180b883a 	mov	r5,r3
 8001580:	8004d600 	call	8004d60 <__divdf3>
 8001584:	003fba06 	br	8001470 <__alt_data_end+0xfc001470>

08001588 <__kernel_cos>:
 8001588:	defff304 	addi	sp,sp,-52
 800158c:	dc000315 	stw	r16,12(sp)
 8001590:	04200034 	movhi	r16,32768
 8001594:	843fffc4 	addi	r16,r16,-1
 8001598:	008f9034 	movhi	r2,15936
 800159c:	df000b15 	stw	fp,44(sp)
 80015a0:	ddc00a15 	stw	r23,40(sp)
 80015a4:	dd800915 	stw	r22,36(sp)
 80015a8:	dcc00615 	stw	r19,24(sp)
 80015ac:	dfc00c15 	stw	ra,48(sp)
 80015b0:	dd400815 	stw	r21,32(sp)
 80015b4:	dd000715 	stw	r20,28(sp)
 80015b8:	dc800515 	stw	r18,20(sp)
 80015bc:	dc400415 	stw	r17,16(sp)
 80015c0:	2c20703a 	and	r16,r5,r16
 80015c4:	10bfffc4 	addi	r2,r2,-1
 80015c8:	2827883a 	mov	r19,r5
 80015cc:	202d883a 	mov	r22,r4
 80015d0:	302f883a 	mov	r23,r6
 80015d4:	3839883a 	mov	fp,r7
 80015d8:	14007516 	blt	r2,r16,80017b0 <__kernel_cos+0x228>
 80015dc:	80068b40 	call	80068b4 <__fixdfsi>
 80015e0:	10010f26 	beq	r2,zero,8001a20 <__kernel_cos+0x498>
 80015e4:	b00d883a 	mov	r6,r22
 80015e8:	980f883a 	mov	r7,r19
 80015ec:	b009883a 	mov	r4,r22
 80015f0:	980b883a 	mov	r5,r19
 80015f4:	80058a00 	call	80058a0 <__muldf3>
 80015f8:	01afa234 	movhi	r6,48776
 80015fc:	01ef6a74 	movhi	r7,48553
 8001600:	318e3504 	addi	r6,r6,14548
 8001604:	39feba44 	addi	r7,r7,-1303
 8001608:	1009883a 	mov	r4,r2
 800160c:	180b883a 	mov	r5,r3
 8001610:	102b883a 	mov	r21,r2
 8001614:	1829883a 	mov	r20,r3
 8001618:	80058a00 	call	80058a0 <__muldf3>
 800161c:	01af6d74 	movhi	r6,48565
 8001620:	01cf88b4 	movhi	r7,15906
 8001624:	31ac7104 	addi	r6,r6,-20028
 8001628:	39fba784 	addi	r7,r7,-4450
 800162c:	1009883a 	mov	r4,r2
 8001630:	180b883a 	mov	r5,r3
 8001634:	80044b40 	call	80044b4 <__adddf3>
 8001638:	a80d883a 	mov	r6,r21
 800163c:	a00f883a 	mov	r7,r20
 8001640:	1009883a 	mov	r4,r2
 8001644:	180b883a 	mov	r5,r3
 8001648:	80058a00 	call	80058a0 <__muldf3>
 800164c:	01a02734 	movhi	r6,32924
 8001650:	01cfa4b4 	movhi	r7,16018
 8001654:	3194ab44 	addi	r6,r6,21165
 8001658:	39df93c4 	addi	r7,r7,32335
 800165c:	1009883a 	mov	r4,r2
 8001660:	180b883a 	mov	r5,r3
 8001664:	8005fb80 	call	8005fb8 <__subdf3>
 8001668:	a80d883a 	mov	r6,r21
 800166c:	a00f883a 	mov	r7,r20
 8001670:	1009883a 	mov	r4,r2
 8001674:	180b883a 	mov	r5,r3
 8001678:	80058a00 	call	80058a0 <__muldf3>
 800167c:	018672f4 	movhi	r6,6603
 8001680:	01cfbeb4 	movhi	r7,16122
 8001684:	31856404 	addi	r6,r6,5520
 8001688:	39c06804 	addi	r7,r7,416
 800168c:	1009883a 	mov	r4,r2
 8001690:	180b883a 	mov	r5,r3
 8001694:	80044b40 	call	80044b4 <__adddf3>
 8001698:	a80d883a 	mov	r6,r21
 800169c:	a00f883a 	mov	r7,r20
 80016a0:	1009883a 	mov	r4,r2
 80016a4:	180b883a 	mov	r5,r3
 80016a8:	80058a00 	call	80058a0 <__muldf3>
 80016ac:	0185b074 	movhi	r6,5825
 80016b0:	01cfd5f4 	movhi	r7,16215
 80016b4:	31945dc4 	addi	r6,r6,20855
 80016b8:	39f05b04 	addi	r7,r7,-16020
 80016bc:	1009883a 	mov	r4,r2
 80016c0:	180b883a 	mov	r5,r3
 80016c4:	8005fb80 	call	8005fb8 <__subdf3>
 80016c8:	a80d883a 	mov	r6,r21
 80016cc:	a00f883a 	mov	r7,r20
 80016d0:	1009883a 	mov	r4,r2
 80016d4:	180b883a 	mov	r5,r3
 80016d8:	80058a00 	call	80058a0 <__muldf3>
 80016dc:	01955574 	movhi	r6,21845
 80016e0:	01cfe974 	movhi	r7,16293
 80016e4:	31955304 	addi	r6,r6,21836
 80016e8:	39d55544 	addi	r7,r7,21845
 80016ec:	1009883a 	mov	r4,r2
 80016f0:	180b883a 	mov	r5,r3
 80016f4:	80044b40 	call	80044b4 <__adddf3>
 80016f8:	a80d883a 	mov	r6,r21
 80016fc:	a00f883a 	mov	r7,r20
 8001700:	1009883a 	mov	r4,r2
 8001704:	180b883a 	mov	r5,r3
 8001708:	80058a00 	call	80058a0 <__muldf3>
 800170c:	1017883a 	mov	r11,r2
 8001710:	1815883a 	mov	r10,r3
 8001714:	a809883a 	mov	r4,r21
 8001718:	a00b883a 	mov	r5,r20
 800171c:	000d883a 	mov	r6,zero
 8001720:	01cff834 	movhi	r7,16352
 8001724:	da800215 	stw	r10,8(sp)
 8001728:	dac00115 	stw	r11,4(sp)
 800172c:	80058a00 	call	80058a0 <__muldf3>
 8001730:	dac00117 	ldw	r11,4(sp)
 8001734:	da800217 	ldw	r10,8(sp)
 8001738:	a809883a 	mov	r4,r21
 800173c:	580d883a 	mov	r6,r11
 8001740:	500f883a 	mov	r7,r10
 8001744:	a00b883a 	mov	r5,r20
 8001748:	1023883a 	mov	r17,r2
 800174c:	1821883a 	mov	r16,r3
 8001750:	80058a00 	call	80058a0 <__muldf3>
 8001754:	b80d883a 	mov	r6,r23
 8001758:	e00f883a 	mov	r7,fp
 800175c:	b009883a 	mov	r4,r22
 8001760:	980b883a 	mov	r5,r19
 8001764:	1029883a 	mov	r20,r2
 8001768:	1825883a 	mov	r18,r3
 800176c:	80058a00 	call	80058a0 <__muldf3>
 8001770:	a009883a 	mov	r4,r20
 8001774:	900b883a 	mov	r5,r18
 8001778:	100d883a 	mov	r6,r2
 800177c:	180f883a 	mov	r7,r3
 8001780:	8005fb80 	call	8005fb8 <__subdf3>
 8001784:	8809883a 	mov	r4,r17
 8001788:	800b883a 	mov	r5,r16
 800178c:	100d883a 	mov	r6,r2
 8001790:	180f883a 	mov	r7,r3
 8001794:	8005fb80 	call	8005fb8 <__subdf3>
 8001798:	100d883a 	mov	r6,r2
 800179c:	180f883a 	mov	r7,r3
 80017a0:	0009883a 	mov	r4,zero
 80017a4:	014ffc34 	movhi	r5,16368
 80017a8:	8005fb80 	call	8005fb8 <__subdf3>
 80017ac:	00008b06 	br	80019dc <__kernel_cos+0x454>
 80017b0:	200d883a 	mov	r6,r4
 80017b4:	280f883a 	mov	r7,r5
 80017b8:	80058a00 	call	80058a0 <__muldf3>
 80017bc:	01afa234 	movhi	r6,48776
 80017c0:	01ef6a74 	movhi	r7,48553
 80017c4:	318e3504 	addi	r6,r6,14548
 80017c8:	39feba44 	addi	r7,r7,-1303
 80017cc:	1009883a 	mov	r4,r2
 80017d0:	180b883a 	mov	r5,r3
 80017d4:	1025883a 	mov	r18,r2
 80017d8:	1823883a 	mov	r17,r3
 80017dc:	80058a00 	call	80058a0 <__muldf3>
 80017e0:	01af6d74 	movhi	r6,48565
 80017e4:	01cf88b4 	movhi	r7,15906
 80017e8:	31ac7104 	addi	r6,r6,-20028
 80017ec:	39fba784 	addi	r7,r7,-4450
 80017f0:	1009883a 	mov	r4,r2
 80017f4:	180b883a 	mov	r5,r3
 80017f8:	80044b40 	call	80044b4 <__adddf3>
 80017fc:	900d883a 	mov	r6,r18
 8001800:	880f883a 	mov	r7,r17
 8001804:	1009883a 	mov	r4,r2
 8001808:	180b883a 	mov	r5,r3
 800180c:	80058a00 	call	80058a0 <__muldf3>
 8001810:	01a02734 	movhi	r6,32924
 8001814:	01cfa4b4 	movhi	r7,16018
 8001818:	3194ab44 	addi	r6,r6,21165
 800181c:	39df93c4 	addi	r7,r7,32335
 8001820:	1009883a 	mov	r4,r2
 8001824:	180b883a 	mov	r5,r3
 8001828:	8005fb80 	call	8005fb8 <__subdf3>
 800182c:	900d883a 	mov	r6,r18
 8001830:	880f883a 	mov	r7,r17
 8001834:	1009883a 	mov	r4,r2
 8001838:	180b883a 	mov	r5,r3
 800183c:	80058a00 	call	80058a0 <__muldf3>
 8001840:	018672f4 	movhi	r6,6603
 8001844:	01cfbeb4 	movhi	r7,16122
 8001848:	31856404 	addi	r6,r6,5520
 800184c:	39c06804 	addi	r7,r7,416
 8001850:	1009883a 	mov	r4,r2
 8001854:	180b883a 	mov	r5,r3
 8001858:	80044b40 	call	80044b4 <__adddf3>
 800185c:	900d883a 	mov	r6,r18
 8001860:	880f883a 	mov	r7,r17
 8001864:	1009883a 	mov	r4,r2
 8001868:	180b883a 	mov	r5,r3
 800186c:	80058a00 	call	80058a0 <__muldf3>
 8001870:	0185b074 	movhi	r6,5825
 8001874:	01cfd5f4 	movhi	r7,16215
 8001878:	31945dc4 	addi	r6,r6,20855
 800187c:	39f05b04 	addi	r7,r7,-16020
 8001880:	1009883a 	mov	r4,r2
 8001884:	180b883a 	mov	r5,r3
 8001888:	8005fb80 	call	8005fb8 <__subdf3>
 800188c:	900d883a 	mov	r6,r18
 8001890:	880f883a 	mov	r7,r17
 8001894:	1009883a 	mov	r4,r2
 8001898:	180b883a 	mov	r5,r3
 800189c:	80058a00 	call	80058a0 <__muldf3>
 80018a0:	01955574 	movhi	r6,21845
 80018a4:	01cfe974 	movhi	r7,16293
 80018a8:	31955304 	addi	r6,r6,21836
 80018ac:	39d55544 	addi	r7,r7,21845
 80018b0:	1009883a 	mov	r4,r2
 80018b4:	180b883a 	mov	r5,r3
 80018b8:	80044b40 	call	80044b4 <__adddf3>
 80018bc:	900d883a 	mov	r6,r18
 80018c0:	880f883a 	mov	r7,r17
 80018c4:	1009883a 	mov	r4,r2
 80018c8:	180b883a 	mov	r5,r3
 80018cc:	80058a00 	call	80058a0 <__muldf3>
 80018d0:	1013883a 	mov	r9,r2
 80018d4:	1017883a 	mov	r11,r2
 80018d8:	008ff4f4 	movhi	r2,16339
 80018dc:	108ccc84 	addi	r2,r2,13106
 80018e0:	1811883a 	mov	r8,r3
 80018e4:	902b883a 	mov	r21,r18
 80018e8:	8829883a 	mov	r20,r17
 80018ec:	1815883a 	mov	r10,r3
 80018f0:	143f880e 	bge	r2,r16,8001714 <__alt_data_end+0xfc001714>
 80018f4:	008ffa74 	movhi	r2,16361
 80018f8:	14004416 	blt	r2,r16,8001a0c <__kernel_cos+0x484>
 80018fc:	00bff834 	movhi	r2,65504
 8001900:	80a1883a 	add	r16,r16,r2
 8001904:	000d883a 	mov	r6,zero
 8001908:	800f883a 	mov	r7,r16
 800190c:	0009883a 	mov	r4,zero
 8001910:	014ffc34 	movhi	r5,16368
 8001914:	da400115 	stw	r9,4(sp)
 8001918:	d8c00215 	stw	r3,8(sp)
 800191c:	8005fb80 	call	8005fb8 <__subdf3>
 8001920:	da000217 	ldw	r8,8(sp)
 8001924:	da400117 	ldw	r9,4(sp)
 8001928:	102b883a 	mov	r21,r2
 800192c:	d8c00015 	stw	r3,0(sp)
 8001930:	9009883a 	mov	r4,r18
 8001934:	880b883a 	mov	r5,r17
 8001938:	000d883a 	mov	r6,zero
 800193c:	01cff834 	movhi	r7,16352
 8001940:	da000215 	stw	r8,8(sp)
 8001944:	da400115 	stw	r9,4(sp)
 8001948:	80058a00 	call	80058a0 <__muldf3>
 800194c:	800f883a 	mov	r7,r16
 8001950:	000d883a 	mov	r6,zero
 8001954:	1009883a 	mov	r4,r2
 8001958:	180b883a 	mov	r5,r3
 800195c:	8005fb80 	call	8005fb8 <__subdf3>
 8001960:	da400117 	ldw	r9,4(sp)
 8001964:	da000217 	ldw	r8,8(sp)
 8001968:	9009883a 	mov	r4,r18
 800196c:	480d883a 	mov	r6,r9
 8001970:	400f883a 	mov	r7,r8
 8001974:	880b883a 	mov	r5,r17
 8001978:	1029883a 	mov	r20,r2
 800197c:	1821883a 	mov	r16,r3
 8001980:	80058a00 	call	80058a0 <__muldf3>
 8001984:	b80d883a 	mov	r6,r23
 8001988:	e00f883a 	mov	r7,fp
 800198c:	b009883a 	mov	r4,r22
 8001990:	980b883a 	mov	r5,r19
 8001994:	1025883a 	mov	r18,r2
 8001998:	1823883a 	mov	r17,r3
 800199c:	80058a00 	call	80058a0 <__muldf3>
 80019a0:	100d883a 	mov	r6,r2
 80019a4:	180f883a 	mov	r7,r3
 80019a8:	9009883a 	mov	r4,r18
 80019ac:	880b883a 	mov	r5,r17
 80019b0:	8005fb80 	call	8005fb8 <__subdf3>
 80019b4:	100d883a 	mov	r6,r2
 80019b8:	180f883a 	mov	r7,r3
 80019bc:	a009883a 	mov	r4,r20
 80019c0:	800b883a 	mov	r5,r16
 80019c4:	8005fb80 	call	8005fb8 <__subdf3>
 80019c8:	d9400017 	ldw	r5,0(sp)
 80019cc:	100d883a 	mov	r6,r2
 80019d0:	180f883a 	mov	r7,r3
 80019d4:	a809883a 	mov	r4,r21
 80019d8:	8005fb80 	call	8005fb8 <__subdf3>
 80019dc:	dfc00c17 	ldw	ra,48(sp)
 80019e0:	df000b17 	ldw	fp,44(sp)
 80019e4:	ddc00a17 	ldw	r23,40(sp)
 80019e8:	dd800917 	ldw	r22,36(sp)
 80019ec:	dd400817 	ldw	r21,32(sp)
 80019f0:	dd000717 	ldw	r20,28(sp)
 80019f4:	dcc00617 	ldw	r19,24(sp)
 80019f8:	dc800517 	ldw	r18,20(sp)
 80019fc:	dc400417 	ldw	r17,16(sp)
 8001a00:	dc000317 	ldw	r16,12(sp)
 8001a04:	dec00d04 	addi	sp,sp,52
 8001a08:	f800283a 	ret
 8001a0c:	008ff9f4 	movhi	r2,16359
 8001a10:	002b883a 	mov	r21,zero
 8001a14:	d8800015 	stw	r2,0(sp)
 8001a18:	040ff4b4 	movhi	r16,16338
 8001a1c:	003fc406 	br	8001930 <__alt_data_end+0xfc001930>
 8001a20:	0005883a 	mov	r2,zero
 8001a24:	00cffc34 	movhi	r3,16368
 8001a28:	003fec06 	br	80019dc <__alt_data_end+0xfc0019dc>

08001a2c <__kernel_rem_pio2>:
 8001a2c:	deff5a04 	addi	sp,sp,-664
 8001a30:	da00a617 	ldw	r8,664(sp)
 8001a34:	00c20074 	movhi	r3,2049
 8001a38:	18f5c504 	addi	r3,r3,-10476
 8001a3c:	4205883a 	add	r2,r8,r8
 8001a40:	1085883a 	add	r2,r2,r2
 8001a44:	1885883a 	add	r2,r3,r2
 8001a48:	d9008e15 	stw	r4,568(sp)
 8001a4c:	d9408f15 	stw	r5,572(sp)
 8001a50:	313fff44 	addi	r4,r6,-3
 8001a54:	01400604 	movi	r5,24
 8001a58:	dd80a215 	stw	r22,648(sp)
 8001a5c:	dc009c15 	stw	r16,624(sp)
 8001a60:	dfc0a515 	stw	ra,660(sp)
 8001a64:	df00a415 	stw	fp,656(sp)
 8001a68:	ddc0a315 	stw	r23,652(sp)
 8001a6c:	dd40a115 	stw	r21,644(sp)
 8001a70:	dd00a015 	stw	r20,640(sp)
 8001a74:	dcc09f15 	stw	r19,636(sp)
 8001a78:	dc809e15 	stw	r18,632(sp)
 8001a7c:	dc409d15 	stw	r17,628(sp)
 8001a80:	3021883a 	mov	r16,r6
 8001a84:	d9c09315 	stw	r7,588(sp)
 8001a88:	15800017 	ldw	r22,0(r2)
 8001a8c:	8002ebc0 	call	8002ebc <__divsi3>
 8001a90:	da009317 	ldw	r8,588(sp)
 8001a94:	d8809215 	stw	r2,584(sp)
 8001a98:	423fffc4 	addi	r8,r8,-1
 8001a9c:	da008d15 	stw	r8,564(sp)
 8001aa0:	10033b16 	blt	r2,zero,8002790 <__kernel_rem_pio2+0xd64>
 8001aa4:	da009217 	ldw	r8,584(sp)
 8001aa8:	d9009217 	ldw	r4,584(sp)
 8001aac:	42000044 	addi	r8,r8,1
 8001ab0:	40fffa24 	muli	r3,r8,-24
 8001ab4:	da009515 	stw	r8,596(sp)
 8001ab8:	da008d17 	ldw	r8,564(sp)
 8001abc:	1c07883a 	add	r3,r3,r16
 8001ac0:	d8c09015 	stw	r3,576(sp)
 8001ac4:	b205883a 	add	r2,r22,r8
 8001ac8:	2223c83a 	sub	r17,r4,r8
 8001acc:	10001016 	blt	r2,zero,8001b10 <__kernel_rem_pio2+0xe4>
 8001ad0:	da00a717 	ldw	r8,668(sp)
 8001ad4:	8c65883a 	add	r18,r17,r17
 8001ad8:	94a5883a 	add	r18,r18,r18
 8001adc:	1445883a 	add	r2,r2,r17
 8001ae0:	dcc05004 	addi	r19,sp,320
 8001ae4:	44a5883a 	add	r18,r8,r18
 8001ae8:	14000044 	addi	r16,r2,1
 8001aec:	88015316 	blt	r17,zero,800203c <__kernel_rem_pio2+0x610>
 8001af0:	91000017 	ldw	r4,0(r18)
 8001af4:	80069340 	call	8006934 <__floatsidf>
 8001af8:	98800015 	stw	r2,0(r19)
 8001afc:	98c00115 	stw	r3,4(r19)
 8001b00:	8c400044 	addi	r17,r17,1
 8001b04:	9cc00204 	addi	r19,r19,8
 8001b08:	94800104 	addi	r18,r18,4
 8001b0c:	8c3ff71e 	bne	r17,r16,8001aec <__alt_data_end+0xfc001aec>
 8001b10:	b0002816 	blt	r22,zero,8001bb4 <__kernel_rem_pio2+0x188>
 8001b14:	da008d17 	ldw	r8,564(sp)
 8001b18:	b4c00044 	addi	r19,r22,1
 8001b1c:	982690fa 	slli	r19,r19,3
 8001b20:	402490fa 	slli	r18,r8,3
 8001b24:	da008e17 	ldw	r8,568(sp)
 8001b28:	d8805004 	addi	r2,sp,320
 8001b2c:	94000204 	addi	r16,r18,8
 8001b30:	d823883a 	mov	r17,sp
 8001b34:	14a5883a 	add	r18,r2,r18
 8001b38:	dcef883a 	add	r23,sp,r19
 8001b3c:	4421883a 	add	r16,r8,r16
 8001b40:	dd809115 	stw	r22,580(sp)
 8001b44:	4039883a 	mov	fp,r8
 8001b48:	da008d17 	ldw	r8,564(sp)
 8001b4c:	40016016 	blt	r8,zero,80020d0 <__kernel_rem_pio2+0x6a4>
 8001b50:	e027883a 	mov	r19,fp
 8001b54:	9029883a 	mov	r20,r18
 8001b58:	002d883a 	mov	r22,zero
 8001b5c:	002b883a 	mov	r21,zero
 8001b60:	a1800017 	ldw	r6,0(r20)
 8001b64:	a1c00117 	ldw	r7,4(r20)
 8001b68:	99000017 	ldw	r4,0(r19)
 8001b6c:	99400117 	ldw	r5,4(r19)
 8001b70:	9cc00204 	addi	r19,r19,8
 8001b74:	a53ffe04 	addi	r20,r20,-8
 8001b78:	80058a00 	call	80058a0 <__muldf3>
 8001b7c:	b009883a 	mov	r4,r22
 8001b80:	a80b883a 	mov	r5,r21
 8001b84:	100d883a 	mov	r6,r2
 8001b88:	180f883a 	mov	r7,r3
 8001b8c:	80044b40 	call	80044b4 <__adddf3>
 8001b90:	102d883a 	mov	r22,r2
 8001b94:	182b883a 	mov	r21,r3
 8001b98:	9c3ff11e 	bne	r19,r16,8001b60 <__alt_data_end+0xfc001b60>
 8001b9c:	8d800015 	stw	r22,0(r17)
 8001ba0:	8d400115 	stw	r21,4(r17)
 8001ba4:	8c400204 	addi	r17,r17,8
 8001ba8:	94800204 	addi	r18,r18,8
 8001bac:	8dffe61e 	bne	r17,r23,8001b48 <__alt_data_end+0xfc001b48>
 8001bb0:	dd809117 	ldw	r22,580(sp)
 8001bb4:	00d00034 	movhi	r3,16384
 8001bb8:	da009317 	ldw	r8,588(sp)
 8001bbc:	18ffff84 	addi	r3,r3,-2
 8001bc0:	b0c7883a 	add	r3,r22,r3
 8001bc4:	18c7883a 	add	r3,r3,r3
 8001bc8:	402090fa 	slli	r16,r8,3
 8001bcc:	18c7883a 	add	r3,r3,r3
 8001bd0:	da007804 	addi	r8,sp,480
 8001bd4:	40d1883a 	add	r8,r8,r3
 8001bd8:	b0bfffc4 	addi	r2,r22,-1
 8001bdc:	da009615 	stw	r8,600(sp)
 8001be0:	da008e17 	ldw	r8,568(sp)
 8001be4:	1085883a 	add	r2,r2,r2
 8001be8:	1085883a 	add	r2,r2,r2
 8001bec:	19000104 	addi	r4,r3,4
 8001bf0:	d885883a 	add	r2,sp,r2
 8001bf4:	4421883a 	add	r16,r8,r16
 8001bf8:	da007804 	addi	r8,sp,480
 8001bfc:	4111883a 	add	r8,r8,r4
 8001c00:	10807804 	addi	r2,r2,480
 8001c04:	da009715 	stw	r8,604(sp)
 8001c08:	b025883a 	mov	r18,r22
 8001c0c:	d8809815 	stw	r2,608(sp)
 8001c10:	dd809415 	stw	r22,592(sp)
 8001c14:	900490fa 	slli	r2,r18,3
 8001c18:	d885883a 	add	r2,sp,r2
 8001c1c:	17000017 	ldw	fp,0(r2)
 8001c20:	15400117 	ldw	r21,4(r2)
 8001c24:	04802b0e 	bge	zero,r18,8001cd4 <__kernel_rem_pio2+0x2a8>
 8001c28:	00880034 	movhi	r2,8192
 8001c2c:	10bfffc4 	addi	r2,r2,-1
 8001c30:	90a9883a 	add	r20,r18,r2
 8001c34:	a02890fa 	slli	r20,r20,3
 8001c38:	dc407804 	addi	r17,sp,480
 8001c3c:	dcfffe04 	addi	r19,sp,-8
 8001c40:	dd29883a 	add	r20,sp,r20
 8001c44:	000d883a 	mov	r6,zero
 8001c48:	01cf9c34 	movhi	r7,15984
 8001c4c:	e009883a 	mov	r4,fp
 8001c50:	a80b883a 	mov	r5,r21
 8001c54:	80058a00 	call	80058a0 <__muldf3>
 8001c58:	180b883a 	mov	r5,r3
 8001c5c:	1009883a 	mov	r4,r2
 8001c60:	80068b40 	call	80068b4 <__fixdfsi>
 8001c64:	1009883a 	mov	r4,r2
 8001c68:	80069340 	call	8006934 <__floatsidf>
 8001c6c:	000d883a 	mov	r6,zero
 8001c70:	01d05c34 	movhi	r7,16752
 8001c74:	1009883a 	mov	r4,r2
 8001c78:	180b883a 	mov	r5,r3
 8001c7c:	102f883a 	mov	r23,r2
 8001c80:	182d883a 	mov	r22,r3
 8001c84:	80058a00 	call	80058a0 <__muldf3>
 8001c88:	100d883a 	mov	r6,r2
 8001c8c:	180f883a 	mov	r7,r3
 8001c90:	e009883a 	mov	r4,fp
 8001c94:	a80b883a 	mov	r5,r21
 8001c98:	8005fb80 	call	8005fb8 <__subdf3>
 8001c9c:	180b883a 	mov	r5,r3
 8001ca0:	1009883a 	mov	r4,r2
 8001ca4:	80068b40 	call	80068b4 <__fixdfsi>
 8001ca8:	a1800017 	ldw	r6,0(r20)
 8001cac:	a1c00117 	ldw	r7,4(r20)
 8001cb0:	88800015 	stw	r2,0(r17)
 8001cb4:	b809883a 	mov	r4,r23
 8001cb8:	b00b883a 	mov	r5,r22
 8001cbc:	80044b40 	call	80044b4 <__adddf3>
 8001cc0:	a53ffe04 	addi	r20,r20,-8
 8001cc4:	1039883a 	mov	fp,r2
 8001cc8:	182b883a 	mov	r21,r3
 8001ccc:	8c400104 	addi	r17,r17,4
 8001cd0:	a4ffdc1e 	bne	r20,r19,8001c44 <__alt_data_end+0xfc001c44>
 8001cd4:	d9809017 	ldw	r6,576(sp)
 8001cd8:	a80b883a 	mov	r5,r21
 8001cdc:	e009883a 	mov	r4,fp
 8001ce0:	8002d040 	call	8002d04 <scalbn>
 8001ce4:	000d883a 	mov	r6,zero
 8001ce8:	01cff034 	movhi	r7,16320
 8001cec:	1009883a 	mov	r4,r2
 8001cf0:	180b883a 	mov	r5,r3
 8001cf4:	1027883a 	mov	r19,r2
 8001cf8:	1823883a 	mov	r17,r3
 8001cfc:	80058a00 	call	80058a0 <__muldf3>
 8001d00:	1009883a 	mov	r4,r2
 8001d04:	180b883a 	mov	r5,r3
 8001d08:	8002a9c0 	call	8002a9c <floor>
 8001d0c:	000d883a 	mov	r6,zero
 8001d10:	01d00834 	movhi	r7,16416
 8001d14:	1009883a 	mov	r4,r2
 8001d18:	180b883a 	mov	r5,r3
 8001d1c:	80058a00 	call	80058a0 <__muldf3>
 8001d20:	100d883a 	mov	r6,r2
 8001d24:	180f883a 	mov	r7,r3
 8001d28:	9809883a 	mov	r4,r19
 8001d2c:	880b883a 	mov	r5,r17
 8001d30:	8005fb80 	call	8005fb8 <__subdf3>
 8001d34:	180b883a 	mov	r5,r3
 8001d38:	1009883a 	mov	r4,r2
 8001d3c:	1827883a 	mov	r19,r3
 8001d40:	1029883a 	mov	r20,r2
 8001d44:	80068b40 	call	80068b4 <__fixdfsi>
 8001d48:	1009883a 	mov	r4,r2
 8001d4c:	1023883a 	mov	r17,r2
 8001d50:	80069340 	call	8006934 <__floatsidf>
 8001d54:	a009883a 	mov	r4,r20
 8001d58:	100d883a 	mov	r6,r2
 8001d5c:	180f883a 	mov	r7,r3
 8001d60:	980b883a 	mov	r5,r19
 8001d64:	8005fb80 	call	8005fb8 <__subdf3>
 8001d68:	d9009017 	ldw	r4,576(sp)
 8001d6c:	1013883a 	mov	r9,r2
 8001d70:	102b883a 	mov	r21,r2
 8001d74:	1811883a 	mov	r8,r3
 8001d78:	0100b30e 	bge	zero,r4,8002048 <__kernel_rem_pio2+0x61c>
 8001d7c:	90bfffc4 	addi	r2,r18,-1
 8001d80:	1085883a 	add	r2,r2,r2
 8001d84:	1085883a 	add	r2,r2,r2
 8001d88:	d885883a 	add	r2,sp,r2
 8001d8c:	10807804 	addi	r2,r2,480
 8001d90:	d9809017 	ldw	r6,576(sp)
 8001d94:	11400017 	ldw	r5,0(r2)
 8001d98:	01000604 	movi	r4,24
 8001d9c:	2189c83a 	sub	r4,r4,r6
 8001da0:	290dd83a 	sra	r6,r5,r4
 8001da4:	d9c09017 	ldw	r7,576(sp)
 8001da8:	04c005c4 	movi	r19,23
 8001dac:	3108983a 	sll	r4,r6,r4
 8001db0:	99e7c83a 	sub	r19,r19,r7
 8001db4:	89a3883a 	add	r17,r17,r6
 8001db8:	2909c83a 	sub	r4,r5,r4
 8001dbc:	24e7d83a 	sra	r19,r4,r19
 8001dc0:	11000015 	stw	r4,0(r2)
 8001dc4:	04c02a0e 	bge	zero,r19,8001e70 <__kernel_rem_pio2+0x444>
 8001dc8:	8c400044 	addi	r17,r17,1
 8001dcc:	0481570e 	bge	zero,r18,800232c <__kernel_rem_pio2+0x900>
 8001dd0:	02804034 	movhi	r10,256
 8001dd4:	52bfffc4 	addi	r10,r10,-1
 8001dd8:	d8807804 	addi	r2,sp,480
 8001ddc:	000b883a 	mov	r5,zero
 8001de0:	0029883a 	mov	r20,zero
 8001de4:	01c04034 	movhi	r7,256
 8001de8:	00000706 	br	8001e08 <__kernel_rem_pio2+0x3dc>
 8001dec:	390dc83a 	sub	r6,r7,r4
 8001df0:	20000226 	beq	r4,zero,8001dfc <__kernel_rem_pio2+0x3d0>
 8001df4:	11800015 	stw	r6,0(r2)
 8001df8:	05000044 	movi	r20,1
 8001dfc:	29400044 	addi	r5,r5,1
 8001e00:	10800104 	addi	r2,r2,4
 8001e04:	2c80080e 	bge	r5,r18,8001e28 <__kernel_rem_pio2+0x3fc>
 8001e08:	11000017 	ldw	r4,0(r2)
 8001e0c:	a03ff726 	beq	r20,zero,8001dec <__alt_data_end+0xfc001dec>
 8001e10:	5109c83a 	sub	r4,r10,r4
 8001e14:	11000015 	stw	r4,0(r2)
 8001e18:	29400044 	addi	r5,r5,1
 8001e1c:	05000044 	movi	r20,1
 8001e20:	10800104 	addi	r2,r2,4
 8001e24:	2cbff816 	blt	r5,r18,8001e08 <__alt_data_end+0xfc001e08>
 8001e28:	d9009017 	ldw	r4,576(sp)
 8001e2c:	01000e0e 	bge	zero,r4,8001e68 <__kernel_rem_pio2+0x43c>
 8001e30:	00800044 	movi	r2,1
 8001e34:	20808d26 	beq	r4,r2,800206c <__kernel_rem_pio2+0x640>
 8001e38:	00800084 	movi	r2,2
 8001e3c:	20800a1e 	bne	r4,r2,8001e68 <__kernel_rem_pio2+0x43c>
 8001e40:	90bfffc4 	addi	r2,r18,-1
 8001e44:	1085883a 	add	r2,r2,r2
 8001e48:	1085883a 	add	r2,r2,r2
 8001e4c:	d885883a 	add	r2,sp,r2
 8001e50:	10807804 	addi	r2,r2,480
 8001e54:	11400017 	ldw	r5,0(r2)
 8001e58:	01001034 	movhi	r4,64
 8001e5c:	213fffc4 	addi	r4,r4,-1
 8001e60:	2908703a 	and	r4,r5,r4
 8001e64:	11000015 	stw	r4,0(r2)
 8001e68:	00800084 	movi	r2,2
 8001e6c:	98805d26 	beq	r19,r2,8001fe4 <__kernel_rem_pio2+0x5b8>
 8001e70:	400b883a 	mov	r5,r8
 8001e74:	000d883a 	mov	r6,zero
 8001e78:	000f883a 	mov	r7,zero
 8001e7c:	a809883a 	mov	r4,r21
 8001e80:	da009b15 	stw	r8,620(sp)
 8001e84:	80056480 	call	8005648 <__eqdf2>
 8001e88:	da009b17 	ldw	r8,620(sp)
 8001e8c:	10012b1e 	bne	r2,zero,800233c <__kernel_rem_pio2+0x910>
 8001e90:	da009417 	ldw	r8,592(sp)
 8001e94:	917fffc4 	addi	r5,r18,-1
 8001e98:	2a000e16 	blt	r5,r8,8001ed4 <__kernel_rem_pio2+0x4a8>
 8001e9c:	00900034 	movhi	r2,16384
 8001ea0:	10bfffc4 	addi	r2,r2,-1
 8001ea4:	9085883a 	add	r2,r18,r2
 8001ea8:	1085883a 	add	r2,r2,r2
 8001eac:	d9809717 	ldw	r6,604(sp)
 8001eb0:	1085883a 	add	r2,r2,r2
 8001eb4:	d9007804 	addi	r4,sp,480
 8001eb8:	0007883a 	mov	r3,zero
 8001ebc:	2085883a 	add	r2,r4,r2
 8001ec0:	11000017 	ldw	r4,0(r2)
 8001ec4:	10bfff04 	addi	r2,r2,-4
 8001ec8:	1906b03a 	or	r3,r3,r4
 8001ecc:	11bffc1e 	bne	r2,r6,8001ec0 <__alt_data_end+0xfc001ec0>
 8001ed0:	1800821e 	bne	r3,zero,80020dc <__kernel_rem_pio2+0x6b0>
 8001ed4:	da009817 	ldw	r8,608(sp)
 8001ed8:	40800017 	ldw	r2,0(r8)
 8001edc:	1001151e 	bne	r2,zero,8002334 <__kernel_rem_pio2+0x908>
 8001ee0:	d8809617 	ldw	r2,600(sp)
 8001ee4:	05000044 	movi	r20,1
 8001ee8:	10bfff04 	addi	r2,r2,-4
 8001eec:	10c00117 	ldw	r3,4(r2)
 8001ef0:	a5000044 	addi	r20,r20,1
 8001ef4:	183ffc26 	beq	r3,zero,8001ee8 <__alt_data_end+0xfc001ee8>
 8001ef8:	9529883a 	add	r20,r18,r20
 8001efc:	90800044 	addi	r2,r18,1
 8001f00:	dd009115 	stw	r20,580(sp)
 8001f04:	a0803216 	blt	r20,r2,8001fd0 <__kernel_rem_pio2+0x5a4>
 8001f08:	da009317 	ldw	r8,588(sp)
 8001f0c:	d8c09117 	ldw	r3,580(sp)
 8001f10:	44a3883a 	add	r17,r8,r18
 8001f14:	da009217 	ldw	r8,584(sp)
 8001f18:	882290fa 	slli	r17,r17,3
 8001f1c:	40a5883a 	add	r18,r8,r2
 8001f20:	da009517 	ldw	r8,596(sp)
 8001f24:	100490fa 	slli	r2,r2,3
 8001f28:	94a5883a 	add	r18,r18,r18
 8001f2c:	40eb883a 	add	r21,r8,r3
 8001f30:	da00a717 	ldw	r8,668(sp)
 8001f34:	ad6b883a 	add	r21,r21,r21
 8001f38:	94a5883a 	add	r18,r18,r18
 8001f3c:	ad6b883a 	add	r21,r21,r21
 8001f40:	d8c05004 	addi	r3,sp,320
 8001f44:	44a5883a 	add	r18,r8,r18
 8001f48:	1c63883a 	add	r17,r3,r17
 8001f4c:	d8a7883a 	add	r19,sp,r2
 8001f50:	456b883a 	add	r21,r8,r21
 8001f54:	91000017 	ldw	r4,0(r18)
 8001f58:	80069340 	call	8006934 <__floatsidf>
 8001f5c:	da008d17 	ldw	r8,564(sp)
 8001f60:	88800015 	stw	r2,0(r17)
 8001f64:	88c00115 	stw	r3,4(r17)
 8001f68:	40001b16 	blt	r8,zero,8001fd8 <__kernel_rem_pio2+0x5ac>
 8001f6c:	dd008e17 	ldw	r20,568(sp)
 8001f70:	882d883a 	mov	r22,r17
 8001f74:	002f883a 	mov	r23,zero
 8001f78:	0039883a 	mov	fp,zero
 8001f7c:	b1800017 	ldw	r6,0(r22)
 8001f80:	b1c00117 	ldw	r7,4(r22)
 8001f84:	a1000017 	ldw	r4,0(r20)
 8001f88:	a1400117 	ldw	r5,4(r20)
 8001f8c:	a5000204 	addi	r20,r20,8
 8001f90:	b5bffe04 	addi	r22,r22,-8
 8001f94:	80058a00 	call	80058a0 <__muldf3>
 8001f98:	b809883a 	mov	r4,r23
 8001f9c:	e00b883a 	mov	r5,fp
 8001fa0:	100d883a 	mov	r6,r2
 8001fa4:	180f883a 	mov	r7,r3
 8001fa8:	80044b40 	call	80044b4 <__adddf3>
 8001fac:	102f883a 	mov	r23,r2
 8001fb0:	1839883a 	mov	fp,r3
 8001fb4:	a43ff11e 	bne	r20,r16,8001f7c <__alt_data_end+0xfc001f7c>
 8001fb8:	9dc00015 	stw	r23,0(r19)
 8001fbc:	9f000115 	stw	fp,4(r19)
 8001fc0:	94800104 	addi	r18,r18,4
 8001fc4:	8c400204 	addi	r17,r17,8
 8001fc8:	9cc00204 	addi	r19,r19,8
 8001fcc:	957fe11e 	bne	r18,r21,8001f54 <__alt_data_end+0xfc001f54>
 8001fd0:	dc809117 	ldw	r18,580(sp)
 8001fd4:	003f0f06 	br	8001c14 <__alt_data_end+0xfc001c14>
 8001fd8:	002f883a 	mov	r23,zero
 8001fdc:	0039883a 	mov	fp,zero
 8001fe0:	003ff506 	br	8001fb8 <__alt_data_end+0xfc001fb8>
 8001fe4:	480d883a 	mov	r6,r9
 8001fe8:	180f883a 	mov	r7,r3
 8001fec:	0009883a 	mov	r4,zero
 8001ff0:	014ffc34 	movhi	r5,16368
 8001ff4:	8005fb80 	call	8005fb8 <__subdf3>
 8001ff8:	102b883a 	mov	r21,r2
 8001ffc:	1811883a 	mov	r8,r3
 8002000:	a03f9b26 	beq	r20,zero,8001e70 <__alt_data_end+0xfc001e70>
 8002004:	d9809017 	ldw	r6,576(sp)
 8002008:	0009883a 	mov	r4,zero
 800200c:	014ffc34 	movhi	r5,16368
 8002010:	d8c09b15 	stw	r3,620(sp)
 8002014:	8002d040 	call	8002d04 <scalbn>
 8002018:	da009b17 	ldw	r8,620(sp)
 800201c:	a809883a 	mov	r4,r21
 8002020:	100d883a 	mov	r6,r2
 8002024:	400b883a 	mov	r5,r8
 8002028:	180f883a 	mov	r7,r3
 800202c:	8005fb80 	call	8005fb8 <__subdf3>
 8002030:	102b883a 	mov	r21,r2
 8002034:	1811883a 	mov	r8,r3
 8002038:	003f8d06 	br	8001e70 <__alt_data_end+0xfc001e70>
 800203c:	0005883a 	mov	r2,zero
 8002040:	0007883a 	mov	r3,zero
 8002044:	003eac06 	br	8001af8 <__alt_data_end+0xfc001af8>
 8002048:	d8809017 	ldw	r2,576(sp)
 800204c:	1000121e 	bne	r2,zero,8002098 <__kernel_rem_pio2+0x66c>
 8002050:	90bfffc4 	addi	r2,r18,-1
 8002054:	1085883a 	add	r2,r2,r2
 8002058:	1085883a 	add	r2,r2,r2
 800205c:	d885883a 	add	r2,sp,r2
 8002060:	14c07817 	ldw	r19,480(r2)
 8002064:	9827d5fa 	srai	r19,r19,23
 8002068:	003f5606 	br	8001dc4 <__alt_data_end+0xfc001dc4>
 800206c:	90bfffc4 	addi	r2,r18,-1
 8002070:	1085883a 	add	r2,r2,r2
 8002074:	1085883a 	add	r2,r2,r2
 8002078:	d885883a 	add	r2,sp,r2
 800207c:	10807804 	addi	r2,r2,480
 8002080:	11000017 	ldw	r4,0(r2)
 8002084:	01402034 	movhi	r5,128
 8002088:	297fffc4 	addi	r5,r5,-1
 800208c:	2148703a 	and	r4,r4,r5
 8002090:	11000015 	stw	r4,0(r2)
 8002094:	003f7406 	br	8001e68 <__alt_data_end+0xfc001e68>
 8002098:	4809883a 	mov	r4,r9
 800209c:	180b883a 	mov	r5,r3
 80020a0:	000d883a 	mov	r6,zero
 80020a4:	01cff834 	movhi	r7,16352
 80020a8:	d8c09a15 	stw	r3,616(sp)
 80020ac:	d8c09b15 	stw	r3,620(sp)
 80020b0:	da409915 	stw	r9,612(sp)
 80020b4:	80056d00 	call	80056d0 <__gedf2>
 80020b8:	d8c09a17 	ldw	r3,616(sp)
 80020bc:	da009b17 	ldw	r8,620(sp)
 80020c0:	da409917 	ldw	r9,612(sp)
 80020c4:	1000920e 	bge	r2,zero,8002310 <__kernel_rem_pio2+0x8e4>
 80020c8:	0027883a 	mov	r19,zero
 80020cc:	003f6806 	br	8001e70 <__alt_data_end+0xfc001e70>
 80020d0:	002d883a 	mov	r22,zero
 80020d4:	002b883a 	mov	r21,zero
 80020d8:	003eb006 	br	8001b9c <__alt_data_end+0xfc001b9c>
 80020dc:	2945883a 	add	r2,r5,r5
 80020e0:	da009017 	ldw	r8,576(sp)
 80020e4:	1085883a 	add	r2,r2,r2
 80020e8:	d885883a 	add	r2,sp,r2
 80020ec:	10807817 	ldw	r2,480(r2)
 80020f0:	423ffa04 	addi	r8,r8,-24
 80020f4:	dc409115 	stw	r17,580(sp)
 80020f8:	dcc08d15 	stw	r19,564(sp)
 80020fc:	da009015 	stw	r8,576(sp)
 8002100:	dd809417 	ldw	r22,592(sp)
 8002104:	2823883a 	mov	r17,r5
 8002108:	10000e1e 	bne	r2,zero,8002144 <__kernel_rem_pio2+0x718>
 800210c:	00900034 	movhi	r2,16384
 8002110:	10bfffc4 	addi	r2,r2,-1
 8002114:	2885883a 	add	r2,r5,r2
 8002118:	1085883a 	add	r2,r2,r2
 800211c:	d8c07804 	addi	r3,sp,480
 8002120:	1085883a 	add	r2,r2,r2
 8002124:	1885883a 	add	r2,r3,r2
 8002128:	4007883a 	mov	r3,r8
 800212c:	10bfff04 	addi	r2,r2,-4
 8002130:	11000117 	ldw	r4,4(r2)
 8002134:	8c7fffc4 	addi	r17,r17,-1
 8002138:	18fffa04 	addi	r3,r3,-24
 800213c:	203ffb26 	beq	r4,zero,800212c <__alt_data_end+0xfc00212c>
 8002140:	d8c09015 	stw	r3,576(sp)
 8002144:	d9809017 	ldw	r6,576(sp)
 8002148:	0009883a 	mov	r4,zero
 800214c:	014ffc34 	movhi	r5,16368
 8002150:	8002d040 	call	8002d04 <scalbn>
 8002154:	1029883a 	mov	r20,r2
 8002158:	182b883a 	mov	r21,r3
 800215c:	88018416 	blt	r17,zero,8002770 <__kernel_rem_pio2+0xd44>
 8002160:	881090fa 	slli	r8,r17,3
 8002164:	d8c07804 	addi	r3,sp,480
 8002168:	da008e15 	stw	r8,568(sp)
 800216c:	d8808e17 	ldw	r2,568(sp)
 8002170:	8c51883a 	add	r8,r17,r17
 8002174:	4211883a 	add	r8,r8,r8
 8002178:	d8a1883a 	add	r16,sp,r2
 800217c:	1a25883a 	add	r18,r3,r8
 8002180:	da3ffe04 	addi	r8,sp,-8
 8002184:	da008c15 	stw	r8,560(sp)
 8002188:	8039883a 	mov	fp,r16
 800218c:	91000017 	ldw	r4,0(r18)
 8002190:	e73ffe04 	addi	fp,fp,-8
 8002194:	94bfff04 	addi	r18,r18,-4
 8002198:	80069340 	call	8006934 <__floatsidf>
 800219c:	a00d883a 	mov	r6,r20
 80021a0:	a80f883a 	mov	r7,r21
 80021a4:	1009883a 	mov	r4,r2
 80021a8:	180b883a 	mov	r5,r3
 80021ac:	80058a00 	call	80058a0 <__muldf3>
 80021b0:	a009883a 	mov	r4,r20
 80021b4:	a80b883a 	mov	r5,r21
 80021b8:	e0800215 	stw	r2,8(fp)
 80021bc:	e0c00315 	stw	r3,12(fp)
 80021c0:	000d883a 	mov	r6,zero
 80021c4:	01cf9c34 	movhi	r7,15984
 80021c8:	80058a00 	call	80058a0 <__muldf3>
 80021cc:	da008c17 	ldw	r8,560(sp)
 80021d0:	1029883a 	mov	r20,r2
 80021d4:	182b883a 	mov	r21,r3
 80021d8:	e23fec1e 	bne	fp,r8,800218c <__alt_data_end+0xfc00218c>
 80021dc:	0029883a 	mov	r20,zero
 80021e0:	b0004f16 	blt	r22,zero,8002320 <__kernel_rem_pio2+0x8f4>
 80021e4:	05420074 	movhi	r21,2049
 80021e8:	014ffe74 	movhi	r5,16377
 80021ec:	ad75b704 	addi	r21,r21,-10532
 80021f0:	8027883a 	mov	r19,r16
 80021f4:	01100034 	movhi	r4,16384
 80021f8:	29487ec4 	addi	r5,r5,8699
 80021fc:	0039883a 	mov	fp,zero
 8002200:	002f883a 	mov	r23,zero
 8002204:	0025883a 	mov	r18,zero
 8002208:	00000506 	br	8002220 <__kernel_rem_pio2+0x7f4>
 800220c:	9cc00204 	addi	r19,r19,8
 8002210:	a4800f16 	blt	r20,r18,8002250 <__kernel_rem_pio2+0x824>
 8002214:	a9000017 	ldw	r4,0(r21)
 8002218:	a9400117 	ldw	r5,4(r21)
 800221c:	ad400204 	addi	r21,r21,8
 8002220:	99800017 	ldw	r6,0(r19)
 8002224:	99c00117 	ldw	r7,4(r19)
 8002228:	94800044 	addi	r18,r18,1
 800222c:	80058a00 	call	80058a0 <__muldf3>
 8002230:	e009883a 	mov	r4,fp
 8002234:	b80b883a 	mov	r5,r23
 8002238:	100d883a 	mov	r6,r2
 800223c:	180f883a 	mov	r7,r3
 8002240:	80044b40 	call	80044b4 <__adddf3>
 8002244:	1039883a 	mov	fp,r2
 8002248:	182f883a 	mov	r23,r3
 800224c:	b4bfef0e 	bge	r22,r18,800220c <__alt_data_end+0xfc00220c>
 8002250:	a00490fa 	slli	r2,r20,3
 8002254:	da008c17 	ldw	r8,560(sp)
 8002258:	843ffe04 	addi	r16,r16,-8
 800225c:	d885883a 	add	r2,sp,r2
 8002260:	10802804 	addi	r2,r2,160
 8002264:	17000015 	stw	fp,0(r2)
 8002268:	15c00115 	stw	r23,4(r2)
 800226c:	a5000044 	addi	r20,r20,1
 8002270:	823fdb1e 	bne	r16,r8,80021e0 <__alt_data_end+0xfc0021e0>
 8002274:	da00a617 	ldw	r8,664(sp)
 8002278:	00800084 	movi	r2,2
 800227c:	12006616 	blt	r2,r8,8002418 <__kernel_rem_pio2+0x9ec>
 8002280:	0200de16 	blt	zero,r8,80025fc <__kernel_rem_pio2+0xbd0>
 8002284:	4000141e 	bne	r8,zero,80022d8 <__kernel_rem_pio2+0x8ac>
 8002288:	da008e17 	ldw	r8,568(sp)
 800228c:	d8802804 	addi	r2,sp,160
 8002290:	0007883a 	mov	r3,zero
 8002294:	1225883a 	add	r18,r2,r8
 8002298:	043fffc4 	movi	r16,-1
 800229c:	0005883a 	mov	r2,zero
 80022a0:	91800017 	ldw	r6,0(r18)
 80022a4:	91c00117 	ldw	r7,4(r18)
 80022a8:	1009883a 	mov	r4,r2
 80022ac:	180b883a 	mov	r5,r3
 80022b0:	8c7fffc4 	addi	r17,r17,-1
 80022b4:	80044b40 	call	80044b4 <__adddf3>
 80022b8:	94bffe04 	addi	r18,r18,-8
 80022bc:	8c3ff81e 	bne	r17,r16,80022a0 <__alt_data_end+0xfc0022a0>
 80022c0:	da008d17 	ldw	r8,564(sp)
 80022c4:	40000126 	beq	r8,zero,80022cc <__kernel_rem_pio2+0x8a0>
 80022c8:	18e0003c 	xorhi	r3,r3,32768
 80022cc:	da008f17 	ldw	r8,572(sp)
 80022d0:	40800015 	stw	r2,0(r8)
 80022d4:	40c00115 	stw	r3,4(r8)
 80022d8:	da009117 	ldw	r8,580(sp)
 80022dc:	408001cc 	andi	r2,r8,7
 80022e0:	dfc0a517 	ldw	ra,660(sp)
 80022e4:	df00a417 	ldw	fp,656(sp)
 80022e8:	ddc0a317 	ldw	r23,652(sp)
 80022ec:	dd80a217 	ldw	r22,648(sp)
 80022f0:	dd40a117 	ldw	r21,644(sp)
 80022f4:	dd00a017 	ldw	r20,640(sp)
 80022f8:	dcc09f17 	ldw	r19,636(sp)
 80022fc:	dc809e17 	ldw	r18,632(sp)
 8002300:	dc409d17 	ldw	r17,628(sp)
 8002304:	dc009c17 	ldw	r16,624(sp)
 8002308:	dec0a604 	addi	sp,sp,664
 800230c:	f800283a 	ret
 8002310:	8c400044 	addi	r17,r17,1
 8002314:	04810d0e 	bge	zero,r18,800274c <__kernel_rem_pio2+0xd20>
 8002318:	04c00084 	movi	r19,2
 800231c:	003eac06 	br	8001dd0 <__alt_data_end+0xfc001dd0>
 8002320:	0039883a 	mov	fp,zero
 8002324:	002f883a 	mov	r23,zero
 8002328:	003fc906 	br	8002250 <__alt_data_end+0xfc002250>
 800232c:	0029883a 	mov	r20,zero
 8002330:	003ebd06 	br	8001e28 <__alt_data_end+0xfc001e28>
 8002334:	05000044 	movi	r20,1
 8002338:	003eef06 	br	8001ef8 <__alt_data_end+0xfc001ef8>
 800233c:	4029883a 	mov	r20,r8
 8002340:	da009017 	ldw	r8,576(sp)
 8002344:	a809883a 	mov	r4,r21
 8002348:	a00b883a 	mov	r5,r20
 800234c:	020dc83a 	sub	r6,zero,r8
 8002350:	dc409115 	stw	r17,580(sp)
 8002354:	dd809417 	ldw	r22,592(sp)
 8002358:	dcc08d15 	stw	r19,564(sp)
 800235c:	8002d040 	call	8002d04 <scalbn>
 8002360:	000d883a 	mov	r6,zero
 8002364:	01d05c34 	movhi	r7,16752
 8002368:	1009883a 	mov	r4,r2
 800236c:	180b883a 	mov	r5,r3
 8002370:	102b883a 	mov	r21,r2
 8002374:	1823883a 	mov	r17,r3
 8002378:	80056d00 	call	80056d0 <__gedf2>
 800237c:	1000e916 	blt	r2,zero,8002724 <__kernel_rem_pio2+0xcf8>
 8002380:	000d883a 	mov	r6,zero
 8002384:	01cf9c34 	movhi	r7,15984
 8002388:	880b883a 	mov	r5,r17
 800238c:	a809883a 	mov	r4,r21
 8002390:	80058a00 	call	80058a0 <__muldf3>
 8002394:	180b883a 	mov	r5,r3
 8002398:	1009883a 	mov	r4,r2
 800239c:	80068b40 	call	80068b4 <__fixdfsi>
 80023a0:	1029883a 	mov	r20,r2
 80023a4:	9485883a 	add	r2,r18,r18
 80023a8:	1085883a 	add	r2,r2,r2
 80023ac:	a009883a 	mov	r4,r20
 80023b0:	d8a1883a 	add	r16,sp,r2
 80023b4:	80069340 	call	8006934 <__floatsidf>
 80023b8:	000d883a 	mov	r6,zero
 80023bc:	01d05c34 	movhi	r7,16752
 80023c0:	1009883a 	mov	r4,r2
 80023c4:	180b883a 	mov	r5,r3
 80023c8:	80058a00 	call	80058a0 <__muldf3>
 80023cc:	880b883a 	mov	r5,r17
 80023d0:	100d883a 	mov	r6,r2
 80023d4:	180f883a 	mov	r7,r3
 80023d8:	a809883a 	mov	r4,r21
 80023dc:	8005fb80 	call	8005fb8 <__subdf3>
 80023e0:	180b883a 	mov	r5,r3
 80023e4:	1009883a 	mov	r4,r2
 80023e8:	80068b40 	call	80068b4 <__fixdfsi>
 80023ec:	da009017 	ldw	r8,576(sp)
 80023f0:	94400044 	addi	r17,r18,1
 80023f4:	8c47883a 	add	r3,r17,r17
 80023f8:	84007804 	addi	r16,r16,480
 80023fc:	18c7883a 	add	r3,r3,r3
 8002400:	80800015 	stw	r2,0(r16)
 8002404:	d8c7883a 	add	r3,sp,r3
 8002408:	42000604 	addi	r8,r8,24
 800240c:	da009015 	stw	r8,576(sp)
 8002410:	1d007815 	stw	r20,480(r3)
 8002414:	003f4b06 	br	8002144 <__alt_data_end+0xfc002144>
 8002418:	da00a617 	ldw	r8,664(sp)
 800241c:	008000c4 	movi	r2,3
 8002420:	40bfad1e 	bne	r8,r2,80022d8 <__alt_data_end+0xfc0022d8>
 8002424:	0440bc0e 	bge	zero,r17,8002718 <__kernel_rem_pio2+0xcec>
 8002428:	da008e17 	ldw	r8,568(sp)
 800242c:	882090fa 	slli	r16,r17,3
 8002430:	dd402804 	addi	r21,sp,160
 8002434:	da05883a 	add	r2,sp,r8
 8002438:	10802804 	addi	r2,r2,160
 800243c:	15c00017 	ldw	r23,0(r2)
 8002440:	15800117 	ldw	r22,4(r2)
 8002444:	8029883a 	mov	r20,r16
 8002448:	843ffe04 	addi	r16,r16,-8
 800244c:	ac21883a 	add	r16,r21,r16
 8002450:	ad29883a 	add	r20,r21,r20
 8002454:	dac02604 	addi	r11,sp,152
 8002458:	8811883a 	mov	r8,r17
 800245c:	84400017 	ldw	r17,0(r16)
 8002460:	87000117 	ldw	fp,4(r16)
 8002464:	b80d883a 	mov	r6,r23
 8002468:	b00f883a 	mov	r7,r22
 800246c:	8809883a 	mov	r4,r17
 8002470:	e00b883a 	mov	r5,fp
 8002474:	da009b15 	stw	r8,620(sp)
 8002478:	dac09915 	stw	r11,612(sp)
 800247c:	80044b40 	call	80044b4 <__adddf3>
 8002480:	100d883a 	mov	r6,r2
 8002484:	180f883a 	mov	r7,r3
 8002488:	8809883a 	mov	r4,r17
 800248c:	e00b883a 	mov	r5,fp
 8002490:	1027883a 	mov	r19,r2
 8002494:	1825883a 	mov	r18,r3
 8002498:	8005fb80 	call	8005fb8 <__subdf3>
 800249c:	b80d883a 	mov	r6,r23
 80024a0:	b00f883a 	mov	r7,r22
 80024a4:	1009883a 	mov	r4,r2
 80024a8:	180b883a 	mov	r5,r3
 80024ac:	80044b40 	call	80044b4 <__adddf3>
 80024b0:	dac09917 	ldw	r11,612(sp)
 80024b4:	a0800015 	stw	r2,0(r20)
 80024b8:	a0c00115 	stw	r3,4(r20)
 80024bc:	84c00015 	stw	r19,0(r16)
 80024c0:	84800115 	stw	r18,4(r16)
 80024c4:	843ffe04 	addi	r16,r16,-8
 80024c8:	a53ffe04 	addi	r20,r20,-8
 80024cc:	982f883a 	mov	r23,r19
 80024d0:	902d883a 	mov	r22,r18
 80024d4:	da009b17 	ldw	r8,620(sp)
 80024d8:	5c3fe01e 	bne	r11,r16,800245c <__alt_data_end+0xfc00245c>
 80024dc:	00800044 	movi	r2,1
 80024e0:	12008d0e 	bge	r2,r8,8002718 <__kernel_rem_pio2+0xcec>
 80024e4:	402090fa 	slli	r16,r8,3
 80024e8:	da008e17 	ldw	r8,568(sp)
 80024ec:	8023883a 	mov	r17,r16
 80024f0:	da05883a 	add	r2,sp,r8
 80024f4:	10802804 	addi	r2,r2,160
 80024f8:	15800017 	ldw	r22,0(r2)
 80024fc:	15000117 	ldw	r20,4(r2)
 8002500:	ac63883a 	add	r17,r21,r17
 8002504:	843ffe04 	addi	r16,r16,-8
 8002508:	ac21883a 	add	r16,r21,r16
 800250c:	8825883a 	mov	r18,r17
 8002510:	8811883a 	mov	r8,r17
 8002514:	84400017 	ldw	r17,0(r16)
 8002518:	87000117 	ldw	fp,4(r16)
 800251c:	b009883a 	mov	r4,r22
 8002520:	a00b883a 	mov	r5,r20
 8002524:	880d883a 	mov	r6,r17
 8002528:	e00f883a 	mov	r7,fp
 800252c:	da009b15 	stw	r8,620(sp)
 8002530:	80044b40 	call	80044b4 <__adddf3>
 8002534:	100d883a 	mov	r6,r2
 8002538:	180f883a 	mov	r7,r3
 800253c:	8809883a 	mov	r4,r17
 8002540:	e00b883a 	mov	r5,fp
 8002544:	102f883a 	mov	r23,r2
 8002548:	1827883a 	mov	r19,r3
 800254c:	8005fb80 	call	8005fb8 <__subdf3>
 8002550:	b00d883a 	mov	r6,r22
 8002554:	a00f883a 	mov	r7,r20
 8002558:	1009883a 	mov	r4,r2
 800255c:	180b883a 	mov	r5,r3
 8002560:	80044b40 	call	80044b4 <__adddf3>
 8002564:	90800015 	stw	r2,0(r18)
 8002568:	90c00115 	stw	r3,4(r18)
 800256c:	85c00015 	stw	r23,0(r16)
 8002570:	84c00115 	stw	r19,4(r16)
 8002574:	843ffe04 	addi	r16,r16,-8
 8002578:	94bffe04 	addi	r18,r18,-8
 800257c:	b82d883a 	mov	r22,r23
 8002580:	9829883a 	mov	r20,r19
 8002584:	da009b17 	ldw	r8,620(sp)
 8002588:	ac3fe21e 	bne	r21,r16,8002514 <__alt_data_end+0xfc002514>
 800258c:	4023883a 	mov	r17,r8
 8002590:	dc002a04 	addi	r16,sp,168
 8002594:	0005883a 	mov	r2,zero
 8002598:	0007883a 	mov	r3,zero
 800259c:	89800017 	ldw	r6,0(r17)
 80025a0:	89c00117 	ldw	r7,4(r17)
 80025a4:	1009883a 	mov	r4,r2
 80025a8:	8c7ffe04 	addi	r17,r17,-8
 80025ac:	180b883a 	mov	r5,r3
 80025b0:	80044b40 	call	80044b4 <__adddf3>
 80025b4:	847ff91e 	bne	r16,r17,800259c <__alt_data_end+0xfc00259c>
 80025b8:	da008d17 	ldw	r8,564(sp)
 80025bc:	40004726 	beq	r8,zero,80026dc <__kernel_rem_pio2+0xcb0>
 80025c0:	d9002b17 	ldw	r4,172(sp)
 80025c4:	d9402917 	ldw	r5,164(sp)
 80025c8:	d9802a17 	ldw	r6,168(sp)
 80025cc:	da008f17 	ldw	r8,572(sp)
 80025d0:	d9c02817 	ldw	r7,160(sp)
 80025d4:	2960003c 	xorhi	r5,r5,32768
 80025d8:	2120003c 	xorhi	r4,r4,32768
 80025dc:	18e0003c 	xorhi	r3,r3,32768
 80025e0:	41c00015 	stw	r7,0(r8)
 80025e4:	41400115 	stw	r5,4(r8)
 80025e8:	41800215 	stw	r6,8(r8)
 80025ec:	41000315 	stw	r4,12(r8)
 80025f0:	40800415 	stw	r2,16(r8)
 80025f4:	40c00515 	stw	r3,20(r8)
 80025f8:	003f3706 	br	80022d8 <__alt_data_end+0xfc0022d8>
 80025fc:	da008e17 	ldw	r8,568(sp)
 8002600:	d8802804 	addi	r2,sp,160
 8002604:	dc002604 	addi	r16,sp,152
 8002608:	1225883a 	add	r18,r2,r8
 800260c:	0007883a 	mov	r3,zero
 8002610:	0005883a 	mov	r2,zero
 8002614:	91800017 	ldw	r6,0(r18)
 8002618:	91c00117 	ldw	r7,4(r18)
 800261c:	1009883a 	mov	r4,r2
 8002620:	94bffe04 	addi	r18,r18,-8
 8002624:	180b883a 	mov	r5,r3
 8002628:	80044b40 	call	80044b4 <__adddf3>
 800262c:	943ff91e 	bne	r18,r16,8002614 <__alt_data_end+0xfc002614>
 8002630:	da008d17 	ldw	r8,564(sp)
 8002634:	d9002817 	ldw	r4,160(sp)
 8002638:	d9402917 	ldw	r5,164(sp)
 800263c:	40001a26 	beq	r8,zero,80026a8 <__kernel_rem_pio2+0xc7c>
 8002640:	da008f17 	ldw	r8,572(sp)
 8002644:	19a0003c 	xorhi	r6,r3,32768
 8002648:	180f883a 	mov	r7,r3
 800264c:	41800115 	stw	r6,4(r8)
 8002650:	40800015 	stw	r2,0(r8)
 8002654:	100d883a 	mov	r6,r2
 8002658:	8005fb80 	call	8005fb8 <__subdf3>
 800265c:	04400c0e 	bge	zero,r17,8002690 <__kernel_rem_pio2+0xc64>
 8002660:	dc002a04 	addi	r16,sp,168
 8002664:	04800044 	movi	r18,1
 8002668:	81800017 	ldw	r6,0(r16)
 800266c:	81c00117 	ldw	r7,4(r16)
 8002670:	1009883a 	mov	r4,r2
 8002674:	180b883a 	mov	r5,r3
 8002678:	94800044 	addi	r18,r18,1
 800267c:	80044b40 	call	80044b4 <__adddf3>
 8002680:	84000204 	addi	r16,r16,8
 8002684:	8cbff80e 	bge	r17,r18,8002668 <__alt_data_end+0xfc002668>
 8002688:	da008d17 	ldw	r8,564(sp)
 800268c:	40004226 	beq	r8,zero,8002798 <__kernel_rem_pio2+0xd6c>
 8002690:	da008f17 	ldw	r8,572(sp)
 8002694:	1009883a 	mov	r4,r2
 8002698:	18a0003c 	xorhi	r2,r3,32768
 800269c:	41000215 	stw	r4,8(r8)
 80026a0:	40800315 	stw	r2,12(r8)
 80026a4:	003f0c06 	br	80022d8 <__alt_data_end+0xfc0022d8>
 80026a8:	da008f17 	ldw	r8,572(sp)
 80026ac:	100d883a 	mov	r6,r2
 80026b0:	180f883a 	mov	r7,r3
 80026b4:	40800015 	stw	r2,0(r8)
 80026b8:	40c00115 	stw	r3,4(r8)
 80026bc:	8005fb80 	call	8005fb8 <__subdf3>
 80026c0:	047fe716 	blt	zero,r17,8002660 <__alt_data_end+0xfc002660>
 80026c4:	da008f17 	ldw	r8,572(sp)
 80026c8:	1009883a 	mov	r4,r2
 80026cc:	1805883a 	mov	r2,r3
 80026d0:	41000215 	stw	r4,8(r8)
 80026d4:	40800315 	stw	r2,12(r8)
 80026d8:	003eff06 	br	80022d8 <__alt_data_end+0xfc0022d8>
 80026dc:	da008f17 	ldw	r8,572(sp)
 80026e0:	d9802817 	ldw	r6,160(sp)
 80026e4:	d9402a17 	ldw	r5,168(sp)
 80026e8:	d9002b17 	ldw	r4,172(sp)
 80026ec:	41800015 	stw	r6,0(r8)
 80026f0:	d9802917 	ldw	r6,164(sp)
 80026f4:	41400215 	stw	r5,8(r8)
 80026f8:	41000315 	stw	r4,12(r8)
 80026fc:	41800115 	stw	r6,4(r8)
 8002700:	40800415 	stw	r2,16(r8)
 8002704:	40c00515 	stw	r3,20(r8)
 8002708:	003ef306 	br	80022d8 <__alt_data_end+0xfc0022d8>
 800270c:	da00a617 	ldw	r8,664(sp)
 8002710:	008000c4 	movi	r2,3
 8002714:	40bef01e 	bne	r8,r2,80022d8 <__alt_data_end+0xfc0022d8>
 8002718:	0005883a 	mov	r2,zero
 800271c:	0007883a 	mov	r3,zero
 8002720:	003fa506 	br	80025b8 <__alt_data_end+0xfc0025b8>
 8002724:	9485883a 	add	r2,r18,r18
 8002728:	1085883a 	add	r2,r2,r2
 800272c:	d8a1883a 	add	r16,sp,r2
 8002730:	880b883a 	mov	r5,r17
 8002734:	a809883a 	mov	r4,r21
 8002738:	84007804 	addi	r16,r16,480
 800273c:	80068b40 	call	80068b4 <__fixdfsi>
 8002740:	80800015 	stw	r2,0(r16)
 8002744:	9023883a 	mov	r17,r18
 8002748:	003e7e06 	br	8002144 <__alt_data_end+0xfc002144>
 800274c:	a80d883a 	mov	r6,r21
 8002750:	400f883a 	mov	r7,r8
 8002754:	0009883a 	mov	r4,zero
 8002758:	014ffc34 	movhi	r5,16368
 800275c:	8005fb80 	call	8005fb8 <__subdf3>
 8002760:	102b883a 	mov	r21,r2
 8002764:	1811883a 	mov	r8,r3
 8002768:	04c00084 	movi	r19,2
 800276c:	003dc006 	br	8001e70 <__alt_data_end+0xfc001e70>
 8002770:	da00a617 	ldw	r8,664(sp)
 8002774:	00800084 	movi	r2,2
 8002778:	123fe416 	blt	r2,r8,800270c <__alt_data_end+0xfc00270c>
 800277c:	02000c16 	blt	zero,r8,80027b0 <__kernel_rem_pio2+0xd84>
 8002780:	403ed51e 	bne	r8,zero,80022d8 <__alt_data_end+0xfc0022d8>
 8002784:	0005883a 	mov	r2,zero
 8002788:	0007883a 	mov	r3,zero
 800278c:	003ecc06 	br	80022c0 <__alt_data_end+0xfc0022c0>
 8002790:	d8009215 	stw	zero,584(sp)
 8002794:	003cc306 	br	8001aa4 <__alt_data_end+0xfc001aa4>
 8002798:	da008f17 	ldw	r8,572(sp)
 800279c:	1009883a 	mov	r4,r2
 80027a0:	1805883a 	mov	r2,r3
 80027a4:	41000215 	stw	r4,8(r8)
 80027a8:	40800315 	stw	r2,12(r8)
 80027ac:	003eca06 	br	80022d8 <__alt_data_end+0xfc0022d8>
 80027b0:	0005883a 	mov	r2,zero
 80027b4:	0007883a 	mov	r3,zero
 80027b8:	003f9d06 	br	8002630 <__alt_data_end+0xfc002630>

080027bc <__kernel_sin>:
 80027bc:	00a00034 	movhi	r2,32768
 80027c0:	defff404 	addi	sp,sp,-48
 80027c4:	10bfffc4 	addi	r2,r2,-1
 80027c8:	00cf9034 	movhi	r3,15936
 80027cc:	ddc00915 	stw	r23,36(sp)
 80027d0:	dd800815 	stw	r22,32(sp)
 80027d4:	dc400315 	stw	r17,12(sp)
 80027d8:	dc000215 	stw	r16,8(sp)
 80027dc:	dfc00b15 	stw	ra,44(sp)
 80027e0:	df000a15 	stw	fp,40(sp)
 80027e4:	dd400715 	stw	r21,28(sp)
 80027e8:	dd000615 	stw	r20,24(sp)
 80027ec:	dcc00515 	stw	r19,20(sp)
 80027f0:	dc800415 	stw	r18,16(sp)
 80027f4:	2884703a 	and	r2,r5,r2
 80027f8:	18ffffc4 	addi	r3,r3,-1
 80027fc:	2821883a 	mov	r16,r5
 8002800:	2023883a 	mov	r17,r4
 8002804:	302f883a 	mov	r23,r6
 8002808:	382d883a 	mov	r22,r7
 800280c:	18800216 	blt	r3,r2,8002818 <__kernel_sin+0x5c>
 8002810:	80068b40 	call	80068b4 <__fixdfsi>
 8002814:	10009926 	beq	r2,zero,8002a7c <__kernel_sin+0x2c0>
 8002818:	880d883a 	mov	r6,r17
 800281c:	800f883a 	mov	r7,r16
 8002820:	8809883a 	mov	r4,r17
 8002824:	800b883a 	mov	r5,r16
 8002828:	80058a00 	call	80058a0 <__muldf3>
 800282c:	100d883a 	mov	r6,r2
 8002830:	180f883a 	mov	r7,r3
 8002834:	8809883a 	mov	r4,r17
 8002838:	800b883a 	mov	r5,r16
 800283c:	1027883a 	mov	r19,r2
 8002840:	1825883a 	mov	r18,r3
 8002844:	80058a00 	call	80058a0 <__muldf3>
 8002848:	0196b434 	movhi	r6,23248
 800284c:	01cf79b4 	movhi	r7,15846
 8002850:	31b55f04 	addi	r6,r6,-10884
 8002854:	39f64e84 	addi	r7,r7,-9926
 8002858:	9809883a 	mov	r4,r19
 800285c:	900b883a 	mov	r5,r18
 8002860:	102b883a 	mov	r21,r2
 8002864:	1829883a 	mov	r20,r3
 8002868:	80058a00 	call	80058a0 <__muldf3>
 800286c:	01a28b34 	movhi	r6,35372
 8002870:	01cf96f4 	movhi	r7,15963
 8002874:	31a73ac4 	addi	r6,r6,-25365
 8002878:	39f97984 	addi	r7,r7,-6682
 800287c:	1009883a 	mov	r4,r2
 8002880:	180b883a 	mov	r5,r3
 8002884:	8005fb80 	call	8005fb8 <__subdf3>
 8002888:	980d883a 	mov	r6,r19
 800288c:	900f883a 	mov	r7,r18
 8002890:	1009883a 	mov	r4,r2
 8002894:	180b883a 	mov	r5,r3
 8002898:	80058a00 	call	80058a0 <__muldf3>
 800289c:	0195ecb4 	movhi	r6,22450
 80028a0:	01cfb1f4 	movhi	r7,16071
 80028a4:	31bf9f44 	addi	r6,r6,-387
 80028a8:	39c778c4 	addi	r7,r7,7651
 80028ac:	1009883a 	mov	r4,r2
 80028b0:	180b883a 	mov	r5,r3
 80028b4:	80044b40 	call	80044b4 <__adddf3>
 80028b8:	980d883a 	mov	r6,r19
 80028bc:	900f883a 	mov	r7,r18
 80028c0:	1009883a 	mov	r4,r2
 80028c4:	180b883a 	mov	r5,r3
 80028c8:	80058a00 	call	80058a0 <__muldf3>
 80028cc:	01867074 	movhi	r6,6593
 80028d0:	01cfcab4 	movhi	r7,16170
 80028d4:	31987544 	addi	r6,r6,25045
 80028d8:	39c06804 	addi	r7,r7,416
 80028dc:	1009883a 	mov	r4,r2
 80028e0:	180b883a 	mov	r5,r3
 80028e4:	8005fb80 	call	8005fb8 <__subdf3>
 80028e8:	980d883a 	mov	r6,r19
 80028ec:	900f883a 	mov	r7,r18
 80028f0:	1009883a 	mov	r4,r2
 80028f4:	180b883a 	mov	r5,r3
 80028f8:	80058a00 	call	80058a0 <__muldf3>
 80028fc:	01844474 	movhi	r6,4369
 8002900:	01cfe074 	movhi	r7,16257
 8002904:	31be2984 	addi	r6,r6,-1882
 8002908:	39c44444 	addi	r7,r7,4369
 800290c:	1009883a 	mov	r4,r2
 8002910:	180b883a 	mov	r5,r3
 8002914:	80044b40 	call	80044b4 <__adddf3>
 8002918:	1011883a 	mov	r8,r2
 800291c:	d8800c17 	ldw	r2,48(sp)
 8002920:	1839883a 	mov	fp,r3
 8002924:	10003e26 	beq	r2,zero,8002a20 <__kernel_sin+0x264>
 8002928:	000d883a 	mov	r6,zero
 800292c:	01cff834 	movhi	r7,16352
 8002930:	b809883a 	mov	r4,r23
 8002934:	b00b883a 	mov	r5,r22
 8002938:	da000015 	stw	r8,0(sp)
 800293c:	80058a00 	call	80058a0 <__muldf3>
 8002940:	da000017 	ldw	r8,0(sp)
 8002944:	e00f883a 	mov	r7,fp
 8002948:	a809883a 	mov	r4,r21
 800294c:	400d883a 	mov	r6,r8
 8002950:	a00b883a 	mov	r5,r20
 8002954:	d8c00115 	stw	r3,4(sp)
 8002958:	d8800015 	stw	r2,0(sp)
 800295c:	80058a00 	call	80058a0 <__muldf3>
 8002960:	da800017 	ldw	r10,0(sp)
 8002964:	da400117 	ldw	r9,4(sp)
 8002968:	100d883a 	mov	r6,r2
 800296c:	5009883a 	mov	r4,r10
 8002970:	480b883a 	mov	r5,r9
 8002974:	180f883a 	mov	r7,r3
 8002978:	8005fb80 	call	8005fb8 <__subdf3>
 800297c:	980d883a 	mov	r6,r19
 8002980:	900f883a 	mov	r7,r18
 8002984:	1009883a 	mov	r4,r2
 8002988:	180b883a 	mov	r5,r3
 800298c:	80058a00 	call	80058a0 <__muldf3>
 8002990:	b80d883a 	mov	r6,r23
 8002994:	b00f883a 	mov	r7,r22
 8002998:	1009883a 	mov	r4,r2
 800299c:	180b883a 	mov	r5,r3
 80029a0:	8005fb80 	call	8005fb8 <__subdf3>
 80029a4:	01955574 	movhi	r6,21845
 80029a8:	01cff174 	movhi	r7,16325
 80029ac:	31955244 	addi	r6,r6,21833
 80029b0:	39d55544 	addi	r7,r7,21845
 80029b4:	a809883a 	mov	r4,r21
 80029b8:	a00b883a 	mov	r5,r20
 80029bc:	1027883a 	mov	r19,r2
 80029c0:	1825883a 	mov	r18,r3
 80029c4:	80058a00 	call	80058a0 <__muldf3>
 80029c8:	100d883a 	mov	r6,r2
 80029cc:	180f883a 	mov	r7,r3
 80029d0:	9809883a 	mov	r4,r19
 80029d4:	900b883a 	mov	r5,r18
 80029d8:	80044b40 	call	80044b4 <__adddf3>
 80029dc:	100d883a 	mov	r6,r2
 80029e0:	180f883a 	mov	r7,r3
 80029e4:	8809883a 	mov	r4,r17
 80029e8:	800b883a 	mov	r5,r16
 80029ec:	8005fb80 	call	8005fb8 <__subdf3>
 80029f0:	dfc00b17 	ldw	ra,44(sp)
 80029f4:	df000a17 	ldw	fp,40(sp)
 80029f8:	ddc00917 	ldw	r23,36(sp)
 80029fc:	dd800817 	ldw	r22,32(sp)
 8002a00:	dd400717 	ldw	r21,28(sp)
 8002a04:	dd000617 	ldw	r20,24(sp)
 8002a08:	dcc00517 	ldw	r19,20(sp)
 8002a0c:	dc800417 	ldw	r18,16(sp)
 8002a10:	dc400317 	ldw	r17,12(sp)
 8002a14:	dc000217 	ldw	r16,8(sp)
 8002a18:	dec00c04 	addi	sp,sp,48
 8002a1c:	f800283a 	ret
 8002a20:	400d883a 	mov	r6,r8
 8002a24:	9809883a 	mov	r4,r19
 8002a28:	900b883a 	mov	r5,r18
 8002a2c:	180f883a 	mov	r7,r3
 8002a30:	80058a00 	call	80058a0 <__muldf3>
 8002a34:	01955574 	movhi	r6,21845
 8002a38:	01cff174 	movhi	r7,16325
 8002a3c:	31955244 	addi	r6,r6,21833
 8002a40:	39d55544 	addi	r7,r7,21845
 8002a44:	1009883a 	mov	r4,r2
 8002a48:	180b883a 	mov	r5,r3
 8002a4c:	8005fb80 	call	8005fb8 <__subdf3>
 8002a50:	a80d883a 	mov	r6,r21
 8002a54:	a00f883a 	mov	r7,r20
 8002a58:	1009883a 	mov	r4,r2
 8002a5c:	180b883a 	mov	r5,r3
 8002a60:	80058a00 	call	80058a0 <__muldf3>
 8002a64:	880d883a 	mov	r6,r17
 8002a68:	800f883a 	mov	r7,r16
 8002a6c:	1009883a 	mov	r4,r2
 8002a70:	180b883a 	mov	r5,r3
 8002a74:	80044b40 	call	80044b4 <__adddf3>
 8002a78:	003fdd06 	br	80029f0 <__alt_data_end+0xfc0029f0>
 8002a7c:	8805883a 	mov	r2,r17
 8002a80:	8007883a 	mov	r3,r16
 8002a84:	003fda06 	br	80029f0 <__alt_data_end+0xfc0029f0>

08002a88 <fabs>:
 8002a88:	00e00034 	movhi	r3,32768
 8002a8c:	18ffffc4 	addi	r3,r3,-1
 8002a90:	2005883a 	mov	r2,r4
 8002a94:	28c6703a 	and	r3,r5,r3
 8002a98:	f800283a 	ret

08002a9c <floor>:
 8002a9c:	2811d53a 	srai	r8,r5,20
 8002aa0:	defffa04 	addi	sp,sp,-24
 8002aa4:	dcc00315 	stw	r19,12(sp)
 8002aa8:	4201ffcc 	andi	r8,r8,2047
 8002aac:	dc800215 	stw	r18,8(sp)
 8002ab0:	dc400115 	stw	r17,4(sp)
 8002ab4:	dc000015 	stw	r16,0(sp)
 8002ab8:	dfc00515 	stw	ra,20(sp)
 8002abc:	dd000415 	stw	r20,16(sp)
 8002ac0:	44bf0044 	addi	r18,r8,-1023
 8002ac4:	018004c4 	movi	r6,19
 8002ac8:	2821883a 	mov	r16,r5
 8002acc:	2005883a 	mov	r2,r4
 8002ad0:	280f883a 	mov	r7,r5
 8002ad4:	2827883a 	mov	r19,r5
 8002ad8:	2023883a 	mov	r17,r4
 8002adc:	34801916 	blt	r6,r18,8002b44 <floor+0xa8>
 8002ae0:	90003c16 	blt	r18,zero,8002bd4 <floor+0x138>
 8002ae4:	05000434 	movhi	r20,16
 8002ae8:	a53fffc4 	addi	r20,r20,-1
 8002aec:	a4a9d83a 	sra	r20,r20,r18
 8002af0:	2d0c703a 	and	r6,r5,r20
 8002af4:	310cb03a 	or	r6,r6,r4
 8002af8:	30001626 	beq	r6,zero,8002b54 <floor+0xb8>
 8002afc:	01a20034 	movhi	r6,34816
 8002b00:	01df8e34 	movhi	r7,32312
 8002b04:	319d6704 	addi	r6,r6,30108
 8002b08:	39f90f04 	addi	r7,r7,-7108
 8002b0c:	80044b40 	call	80044b4 <__adddf3>
 8002b10:	000d883a 	mov	r6,zero
 8002b14:	000f883a 	mov	r7,zero
 8002b18:	1009883a 	mov	r4,r2
 8002b1c:	180b883a 	mov	r5,r3
 8002b20:	80056d00 	call	80056d0 <__gedf2>
 8002b24:	0080040e 	bge	zero,r2,8002b38 <floor+0x9c>
 8002b28:	80003c16 	blt	r16,zero,8002c1c <floor+0x180>
 8002b2c:	0520303a 	nor	r16,zero,r20
 8002b30:	84e0703a 	and	r16,r16,r19
 8002b34:	0023883a 	mov	r17,zero
 8002b38:	8805883a 	mov	r2,r17
 8002b3c:	8007883a 	mov	r3,r16
 8002b40:	00000506 	br	8002b58 <floor+0xbc>
 8002b44:	01800cc4 	movi	r6,51
 8002b48:	34800b0e 	bge	r6,r18,8002b78 <floor+0xdc>
 8002b4c:	01810004 	movi	r6,1024
 8002b50:	91802f26 	beq	r18,r6,8002c10 <floor+0x174>
 8002b54:	3807883a 	mov	r3,r7
 8002b58:	dfc00517 	ldw	ra,20(sp)
 8002b5c:	dd000417 	ldw	r20,16(sp)
 8002b60:	dcc00317 	ldw	r19,12(sp)
 8002b64:	dc800217 	ldw	r18,8(sp)
 8002b68:	dc400117 	ldw	r17,4(sp)
 8002b6c:	dc000017 	ldw	r16,0(sp)
 8002b70:	dec00604 	addi	sp,sp,24
 8002b74:	f800283a 	ret
 8002b78:	423efb44 	addi	r8,r8,-1043
 8002b7c:	053fffc4 	movi	r20,-1
 8002b80:	a228d83a 	srl	r20,r20,r8
 8002b84:	250c703a 	and	r6,r4,r20
 8002b88:	303ff226 	beq	r6,zero,8002b54 <__alt_data_end+0xfc002b54>
 8002b8c:	01a20034 	movhi	r6,34816
 8002b90:	01df8e34 	movhi	r7,32312
 8002b94:	319d6704 	addi	r6,r6,30108
 8002b98:	39f90f04 	addi	r7,r7,-7108
 8002b9c:	80044b40 	call	80044b4 <__adddf3>
 8002ba0:	000d883a 	mov	r6,zero
 8002ba4:	000f883a 	mov	r7,zero
 8002ba8:	1009883a 	mov	r4,r2
 8002bac:	180b883a 	mov	r5,r3
 8002bb0:	80056d00 	call	80056d0 <__gedf2>
 8002bb4:	00bfe00e 	bge	zero,r2,8002b38 <__alt_data_end+0xfc002b38>
 8002bb8:	80001c16 	blt	r16,zero,8002c2c <floor+0x190>
 8002bbc:	0510303a 	nor	r8,zero,r20
 8002bc0:	9821883a 	mov	r16,r19
 8002bc4:	8a22703a 	and	r17,r17,r8
 8002bc8:	8805883a 	mov	r2,r17
 8002bcc:	8007883a 	mov	r3,r16
 8002bd0:	003fe106 	br	8002b58 <__alt_data_end+0xfc002b58>
 8002bd4:	01a20034 	movhi	r6,34816
 8002bd8:	01df8e34 	movhi	r7,32312
 8002bdc:	319d6704 	addi	r6,r6,30108
 8002be0:	39f90f04 	addi	r7,r7,-7108
 8002be4:	80044b40 	call	80044b4 <__adddf3>
 8002be8:	000d883a 	mov	r6,zero
 8002bec:	000f883a 	mov	r7,zero
 8002bf0:	1009883a 	mov	r4,r2
 8002bf4:	180b883a 	mov	r5,r3
 8002bf8:	80056d00 	call	80056d0 <__gedf2>
 8002bfc:	00bfce0e 	bge	zero,r2,8002b38 <__alt_data_end+0xfc002b38>
 8002c00:	80001516 	blt	r16,zero,8002c58 <floor+0x1bc>
 8002c04:	0023883a 	mov	r17,zero
 8002c08:	0021883a 	mov	r16,zero
 8002c0c:	003fca06 	br	8002b38 <__alt_data_end+0xfc002b38>
 8002c10:	200d883a 	mov	r6,r4
 8002c14:	80044b40 	call	80044b4 <__adddf3>
 8002c18:	003fcf06 	br	8002b58 <__alt_data_end+0xfc002b58>
 8002c1c:	00800434 	movhi	r2,16
 8002c20:	14a5d83a 	sra	r18,r2,r18
 8002c24:	84a7883a 	add	r19,r16,r18
 8002c28:	003fc006 	br	8002b2c <__alt_data_end+0xfc002b2c>
 8002c2c:	00800504 	movi	r2,20
 8002c30:	90801326 	beq	r18,r2,8002c80 <floor+0x1e4>
 8002c34:	00800d04 	movi	r2,52
 8002c38:	14a5c83a 	sub	r18,r2,r18
 8002c3c:	00800044 	movi	r2,1
 8002c40:	1484983a 	sll	r2,r2,r18
 8002c44:	1445883a 	add	r2,r2,r17
 8002c48:	14400b2e 	bgeu	r2,r17,8002c78 <floor+0x1dc>
 8002c4c:	84c00044 	addi	r19,r16,1
 8002c50:	1023883a 	mov	r17,r2
 8002c54:	003fd906 	br	8002bbc <__alt_data_end+0xfc002bbc>
 8002c58:	00a00034 	movhi	r2,32768
 8002c5c:	10bfffc4 	addi	r2,r2,-1
 8002c60:	8084703a 	and	r2,r16,r2
 8002c64:	1462b03a 	or	r17,r2,r17
 8002c68:	883fb326 	beq	r17,zero,8002b38 <__alt_data_end+0xfc002b38>
 8002c6c:	0023883a 	mov	r17,zero
 8002c70:	042ffc34 	movhi	r16,49136
 8002c74:	003fb006 	br	8002b38 <__alt_data_end+0xfc002b38>
 8002c78:	1023883a 	mov	r17,r2
 8002c7c:	003fcf06 	br	8002bbc <__alt_data_end+0xfc002bbc>
 8002c80:	84c00044 	addi	r19,r16,1
 8002c84:	003fcd06 	br	8002bbc <__alt_data_end+0xfc002bbc>

08002c88 <__fpclassifyd>:
 8002c88:	00a00034 	movhi	r2,32768
 8002c8c:	10bfffc4 	addi	r2,r2,-1
 8002c90:	2884703a 	and	r2,r5,r2
 8002c94:	10000726 	beq	r2,zero,8002cb4 <__fpclassifyd+0x2c>
 8002c98:	00fffc34 	movhi	r3,65520
 8002c9c:	019ff834 	movhi	r6,32736
 8002ca0:	28c7883a 	add	r3,r5,r3
 8002ca4:	31bfffc4 	addi	r6,r6,-1
 8002ca8:	30c00536 	bltu	r6,r3,8002cc0 <__fpclassifyd+0x38>
 8002cac:	00800104 	movi	r2,4
 8002cb0:	f800283a 	ret
 8002cb4:	2000021e 	bne	r4,zero,8002cc0 <__fpclassifyd+0x38>
 8002cb8:	00800084 	movi	r2,2
 8002cbc:	f800283a 	ret
 8002cc0:	00dffc34 	movhi	r3,32752
 8002cc4:	019ff834 	movhi	r6,32736
 8002cc8:	28cb883a 	add	r5,r5,r3
 8002ccc:	31bfffc4 	addi	r6,r6,-1
 8002cd0:	317ff62e 	bgeu	r6,r5,8002cac <__alt_data_end+0xfc002cac>
 8002cd4:	01400434 	movhi	r5,16
 8002cd8:	297fffc4 	addi	r5,r5,-1
 8002cdc:	28800236 	bltu	r5,r2,8002ce8 <__fpclassifyd+0x60>
 8002ce0:	008000c4 	movi	r2,3
 8002ce4:	f800283a 	ret
 8002ce8:	10c00226 	beq	r2,r3,8002cf4 <__fpclassifyd+0x6c>
 8002cec:	0005883a 	mov	r2,zero
 8002cf0:	f800283a 	ret
 8002cf4:	2005003a 	cmpeq	r2,r4,zero
 8002cf8:	f800283a 	ret

08002cfc <matherr>:
 8002cfc:	0005883a 	mov	r2,zero
 8002d00:	f800283a 	ret

08002d04 <scalbn>:
 8002d04:	2a1ffc2c 	andhi	r8,r5,32752
 8002d08:	4011d53a 	srai	r8,r8,20
 8002d0c:	defffe04 	addi	sp,sp,-8
 8002d10:	dc000015 	stw	r16,0(sp)
 8002d14:	dfc00115 	stw	ra,4(sp)
 8002d18:	280f883a 	mov	r7,r5
 8002d1c:	2015883a 	mov	r10,r4
 8002d20:	3021883a 	mov	r16,r6
 8002d24:	40001e1e 	bne	r8,zero,8002da0 <scalbn+0x9c>
 8002d28:	00a00034 	movhi	r2,32768
 8002d2c:	10bfffc4 	addi	r2,r2,-1
 8002d30:	2884703a 	and	r2,r5,r2
 8002d34:	1104b03a 	or	r2,r2,r4
 8002d38:	10002226 	beq	r2,zero,8002dc4 <scalbn+0xc0>
 8002d3c:	01d0d434 	movhi	r7,17232
 8002d40:	000d883a 	mov	r6,zero
 8002d44:	80058a00 	call	80058a0 <__muldf3>
 8002d48:	013ffff4 	movhi	r4,65535
 8002d4c:	210f2c04 	addi	r4,r4,15536
 8002d50:	1015883a 	mov	r10,r2
 8002d54:	180f883a 	mov	r7,r3
 8002d58:	81002a16 	blt	r16,r4,8002e04 <scalbn+0x100>
 8002d5c:	191ffc2c 	andhi	r4,r3,32752
 8002d60:	2009d53a 	srai	r4,r4,20
 8002d64:	223ff284 	addi	r8,r4,-54
 8002d68:	8211883a 	add	r8,r16,r8
 8002d6c:	0081ff84 	movi	r2,2046
 8002d70:	12002f16 	blt	r2,r8,8002e30 <scalbn+0x12c>
 8002d74:	0200190e 	bge	zero,r8,8002ddc <scalbn+0xd8>
 8002d78:	4010953a 	slli	r8,r8,20
 8002d7c:	01600434 	movhi	r5,32784
 8002d80:	297fffc4 	addi	r5,r5,-1
 8002d84:	194e703a 	and	r7,r3,r5
 8002d88:	5005883a 	mov	r2,r10
 8002d8c:	3a06b03a 	or	r3,r7,r8
 8002d90:	dfc00117 	ldw	ra,4(sp)
 8002d94:	dc000017 	ldw	r16,0(sp)
 8002d98:	dec00204 	addi	sp,sp,8
 8002d9c:	f800283a 	ret
 8002da0:	0081ffc4 	movi	r2,2047
 8002da4:	2807883a 	mov	r3,r5
 8002da8:	40bfef1e 	bne	r8,r2,8002d68 <__alt_data_end+0xfc002d68>
 8002dac:	200d883a 	mov	r6,r4
 8002db0:	80044b40 	call	80044b4 <__adddf3>
 8002db4:	dfc00117 	ldw	ra,4(sp)
 8002db8:	dc000017 	ldw	r16,0(sp)
 8002dbc:	dec00204 	addi	sp,sp,8
 8002dc0:	f800283a 	ret
 8002dc4:	2005883a 	mov	r2,r4
 8002dc8:	2807883a 	mov	r3,r5
 8002dcc:	dfc00117 	ldw	ra,4(sp)
 8002dd0:	dc000017 	ldw	r16,0(sp)
 8002dd4:	dec00204 	addi	sp,sp,8
 8002dd8:	f800283a 	ret
 8002ddc:	00bff2c4 	movi	r2,-53
 8002de0:	4080240e 	bge	r8,r2,8002e74 <scalbn+0x170>
 8002de4:	00b0d414 	movui	r2,50000
 8002de8:	14001116 	blt	r2,r16,8002e30 <scalbn+0x12c>
 8002dec:	0130be74 	movhi	r4,49913
 8002df0:	01406974 	movhi	r5,421
 8002df4:	213cd644 	addi	r4,r4,-3239
 8002df8:	295b87c4 	addi	r5,r5,28191
 8002dfc:	500d883a 	mov	r6,r10
 8002e00:	8002ea00 	call	8002ea0 <copysign>
 8002e04:	01b0be74 	movhi	r6,49913
 8002e08:	01c06974 	movhi	r7,421
 8002e0c:	31bcd644 	addi	r6,r6,-3239
 8002e10:	39db87c4 	addi	r7,r7,28191
 8002e14:	1009883a 	mov	r4,r2
 8002e18:	180b883a 	mov	r5,r3
 8002e1c:	80058a00 	call	80058a0 <__muldf3>
 8002e20:	dfc00117 	ldw	ra,4(sp)
 8002e24:	dc000017 	ldw	r16,0(sp)
 8002e28:	dec00204 	addi	sp,sp,8
 8002e2c:	f800283a 	ret
 8002e30:	01220034 	movhi	r4,34816
 8002e34:	015f8e34 	movhi	r5,32312
 8002e38:	500d883a 	mov	r6,r10
 8002e3c:	211d6704 	addi	r4,r4,30108
 8002e40:	29790f04 	addi	r5,r5,-7108
 8002e44:	8002ea00 	call	8002ea0 <copysign>
 8002e48:	01a20034 	movhi	r6,34816
 8002e4c:	01df8e34 	movhi	r7,32312
 8002e50:	319d6704 	addi	r6,r6,30108
 8002e54:	39f90f04 	addi	r7,r7,-7108
 8002e58:	1009883a 	mov	r4,r2
 8002e5c:	180b883a 	mov	r5,r3
 8002e60:	80058a00 	call	80058a0 <__muldf3>
 8002e64:	dfc00117 	ldw	ra,4(sp)
 8002e68:	dc000017 	ldw	r16,0(sp)
 8002e6c:	dec00204 	addi	sp,sp,8
 8002e70:	f800283a 	ret
 8002e74:	42000d84 	addi	r8,r8,54
 8002e78:	4012953a 	slli	r9,r8,20
 8002e7c:	01e00434 	movhi	r7,32784
 8002e80:	39ffffc4 	addi	r7,r7,-1
 8002e84:	19ca703a 	and	r5,r3,r7
 8002e88:	000d883a 	mov	r6,zero
 8002e8c:	01cf2434 	movhi	r7,15504
 8002e90:	5009883a 	mov	r4,r10
 8002e94:	494ab03a 	or	r5,r9,r5
 8002e98:	80058a00 	call	80058a0 <__muldf3>
 8002e9c:	003fbc06 	br	8002d90 <__alt_data_end+0xfc002d90>

08002ea0 <copysign>:
 8002ea0:	2005883a 	mov	r2,r4
 8002ea4:	01200034 	movhi	r4,32768
 8002ea8:	213fffc4 	addi	r4,r4,-1
 8002eac:	38e0002c 	andhi	r3,r7,32768
 8002eb0:	290a703a 	and	r5,r5,r4
 8002eb4:	28c6b03a 	or	r3,r5,r3
 8002eb8:	f800283a 	ret

08002ebc <__divsi3>:
 8002ebc:	20001b16 	blt	r4,zero,8002f2c <__divsi3+0x70>
 8002ec0:	000f883a 	mov	r7,zero
 8002ec4:	28001616 	blt	r5,zero,8002f20 <__divsi3+0x64>
 8002ec8:	200d883a 	mov	r6,r4
 8002ecc:	29001a2e 	bgeu	r5,r4,8002f38 <__divsi3+0x7c>
 8002ed0:	00800804 	movi	r2,32
 8002ed4:	00c00044 	movi	r3,1
 8002ed8:	00000106 	br	8002ee0 <__divsi3+0x24>
 8002edc:	10000d26 	beq	r2,zero,8002f14 <__divsi3+0x58>
 8002ee0:	294b883a 	add	r5,r5,r5
 8002ee4:	10bfffc4 	addi	r2,r2,-1
 8002ee8:	18c7883a 	add	r3,r3,r3
 8002eec:	293ffb36 	bltu	r5,r4,8002edc <__alt_data_end+0xfc002edc>
 8002ef0:	0005883a 	mov	r2,zero
 8002ef4:	18000726 	beq	r3,zero,8002f14 <__divsi3+0x58>
 8002ef8:	0005883a 	mov	r2,zero
 8002efc:	31400236 	bltu	r6,r5,8002f08 <__divsi3+0x4c>
 8002f00:	314dc83a 	sub	r6,r6,r5
 8002f04:	10c4b03a 	or	r2,r2,r3
 8002f08:	1806d07a 	srli	r3,r3,1
 8002f0c:	280ad07a 	srli	r5,r5,1
 8002f10:	183ffa1e 	bne	r3,zero,8002efc <__alt_data_end+0xfc002efc>
 8002f14:	38000126 	beq	r7,zero,8002f1c <__divsi3+0x60>
 8002f18:	0085c83a 	sub	r2,zero,r2
 8002f1c:	f800283a 	ret
 8002f20:	014bc83a 	sub	r5,zero,r5
 8002f24:	39c0005c 	xori	r7,r7,1
 8002f28:	003fe706 	br	8002ec8 <__alt_data_end+0xfc002ec8>
 8002f2c:	0109c83a 	sub	r4,zero,r4
 8002f30:	01c00044 	movi	r7,1
 8002f34:	003fe306 	br	8002ec4 <__alt_data_end+0xfc002ec4>
 8002f38:	00c00044 	movi	r3,1
 8002f3c:	003fee06 	br	8002ef8 <__alt_data_end+0xfc002ef8>

08002f40 <__modsi3>:
 8002f40:	20001716 	blt	r4,zero,8002fa0 <__modsi3+0x60>
 8002f44:	000f883a 	mov	r7,zero
 8002f48:	2005883a 	mov	r2,r4
 8002f4c:	28001216 	blt	r5,zero,8002f98 <__modsi3+0x58>
 8002f50:	2900162e 	bgeu	r5,r4,8002fac <__modsi3+0x6c>
 8002f54:	01800804 	movi	r6,32
 8002f58:	00c00044 	movi	r3,1
 8002f5c:	00000106 	br	8002f64 <__modsi3+0x24>
 8002f60:	30000a26 	beq	r6,zero,8002f8c <__modsi3+0x4c>
 8002f64:	294b883a 	add	r5,r5,r5
 8002f68:	31bfffc4 	addi	r6,r6,-1
 8002f6c:	18c7883a 	add	r3,r3,r3
 8002f70:	293ffb36 	bltu	r5,r4,8002f60 <__alt_data_end+0xfc002f60>
 8002f74:	18000526 	beq	r3,zero,8002f8c <__modsi3+0x4c>
 8002f78:	1806d07a 	srli	r3,r3,1
 8002f7c:	11400136 	bltu	r2,r5,8002f84 <__modsi3+0x44>
 8002f80:	1145c83a 	sub	r2,r2,r5
 8002f84:	280ad07a 	srli	r5,r5,1
 8002f88:	183ffb1e 	bne	r3,zero,8002f78 <__alt_data_end+0xfc002f78>
 8002f8c:	38000126 	beq	r7,zero,8002f94 <__modsi3+0x54>
 8002f90:	0085c83a 	sub	r2,zero,r2
 8002f94:	f800283a 	ret
 8002f98:	014bc83a 	sub	r5,zero,r5
 8002f9c:	003fec06 	br	8002f50 <__alt_data_end+0xfc002f50>
 8002fa0:	0109c83a 	sub	r4,zero,r4
 8002fa4:	01c00044 	movi	r7,1
 8002fa8:	003fe706 	br	8002f48 <__alt_data_end+0xfc002f48>
 8002fac:	00c00044 	movi	r3,1
 8002fb0:	003ff106 	br	8002f78 <__alt_data_end+0xfc002f78>

08002fb4 <__udivsi3>:
 8002fb4:	200d883a 	mov	r6,r4
 8002fb8:	2900152e 	bgeu	r5,r4,8003010 <__udivsi3+0x5c>
 8002fbc:	28001416 	blt	r5,zero,8003010 <__udivsi3+0x5c>
 8002fc0:	00800804 	movi	r2,32
 8002fc4:	00c00044 	movi	r3,1
 8002fc8:	00000206 	br	8002fd4 <__udivsi3+0x20>
 8002fcc:	10000e26 	beq	r2,zero,8003008 <__udivsi3+0x54>
 8002fd0:	28000516 	blt	r5,zero,8002fe8 <__udivsi3+0x34>
 8002fd4:	294b883a 	add	r5,r5,r5
 8002fd8:	10bfffc4 	addi	r2,r2,-1
 8002fdc:	18c7883a 	add	r3,r3,r3
 8002fe0:	293ffa36 	bltu	r5,r4,8002fcc <__alt_data_end+0xfc002fcc>
 8002fe4:	18000826 	beq	r3,zero,8003008 <__udivsi3+0x54>
 8002fe8:	0005883a 	mov	r2,zero
 8002fec:	31400236 	bltu	r6,r5,8002ff8 <__udivsi3+0x44>
 8002ff0:	314dc83a 	sub	r6,r6,r5
 8002ff4:	10c4b03a 	or	r2,r2,r3
 8002ff8:	1806d07a 	srli	r3,r3,1
 8002ffc:	280ad07a 	srli	r5,r5,1
 8003000:	183ffa1e 	bne	r3,zero,8002fec <__alt_data_end+0xfc002fec>
 8003004:	f800283a 	ret
 8003008:	0005883a 	mov	r2,zero
 800300c:	f800283a 	ret
 8003010:	00c00044 	movi	r3,1
 8003014:	003ff406 	br	8002fe8 <__alt_data_end+0xfc002fe8>

08003018 <__umodsi3>:
 8003018:	2005883a 	mov	r2,r4
 800301c:	2900122e 	bgeu	r5,r4,8003068 <__umodsi3+0x50>
 8003020:	28001116 	blt	r5,zero,8003068 <__umodsi3+0x50>
 8003024:	01800804 	movi	r6,32
 8003028:	00c00044 	movi	r3,1
 800302c:	00000206 	br	8003038 <__umodsi3+0x20>
 8003030:	30000c26 	beq	r6,zero,8003064 <__umodsi3+0x4c>
 8003034:	28000516 	blt	r5,zero,800304c <__umodsi3+0x34>
 8003038:	294b883a 	add	r5,r5,r5
 800303c:	31bfffc4 	addi	r6,r6,-1
 8003040:	18c7883a 	add	r3,r3,r3
 8003044:	293ffa36 	bltu	r5,r4,8003030 <__alt_data_end+0xfc003030>
 8003048:	18000626 	beq	r3,zero,8003064 <__umodsi3+0x4c>
 800304c:	1806d07a 	srli	r3,r3,1
 8003050:	11400136 	bltu	r2,r5,8003058 <__umodsi3+0x40>
 8003054:	1145c83a 	sub	r2,r2,r5
 8003058:	280ad07a 	srli	r5,r5,1
 800305c:	183ffb1e 	bne	r3,zero,800304c <__alt_data_end+0xfc00304c>
 8003060:	f800283a 	ret
 8003064:	f800283a 	ret
 8003068:	00c00044 	movi	r3,1
 800306c:	003ff706 	br	800304c <__alt_data_end+0xfc00304c>

08003070 <__addsf3>:
 8003070:	defffc04 	addi	sp,sp,-16
 8003074:	2004d7fa 	srli	r2,r4,31
 8003078:	280cd5fa 	srli	r6,r5,23
 800307c:	dc000015 	stw	r16,0(sp)
 8003080:	00c02034 	movhi	r3,128
 8003084:	2020d5fa 	srli	r16,r4,23
 8003088:	280ed7fa 	srli	r7,r5,31
 800308c:	18ffffc4 	addi	r3,r3,-1
 8003090:	dc400115 	stw	r17,4(sp)
 8003094:	1908703a 	and	r4,r3,r4
 8003098:	194a703a 	and	r5,r3,r5
 800309c:	dfc00315 	stw	ra,12(sp)
 80030a0:	dc800215 	stw	r18,8(sp)
 80030a4:	14403fcc 	andi	r17,r2,255
 80030a8:	84003fcc 	andi	r16,r16,255
 80030ac:	200890fa 	slli	r4,r4,3
 80030b0:	31803fcc 	andi	r6,r6,255
 80030b4:	280a90fa 	slli	r5,r5,3
 80030b8:	89c05026 	beq	r17,r7,80031fc <__addsf3+0x18c>
 80030bc:	8185c83a 	sub	r2,r16,r6
 80030c0:	00807a0e 	bge	zero,r2,80032ac <__addsf3+0x23c>
 80030c4:	30001e1e 	bne	r6,zero,8003140 <__addsf3+0xd0>
 80030c8:	28006d1e 	bne	r5,zero,8003280 <__addsf3+0x210>
 80030cc:	208001cc 	andi	r2,r4,7
 80030d0:	10000426 	beq	r2,zero,80030e4 <__addsf3+0x74>
 80030d4:	208003cc 	andi	r2,r4,15
 80030d8:	00c00104 	movi	r3,4
 80030dc:	10c00126 	beq	r2,r3,80030e4 <__addsf3+0x74>
 80030e0:	20c9883a 	add	r4,r4,r3
 80030e4:	2081002c 	andhi	r2,r4,1024
 80030e8:	10003926 	beq	r2,zero,80031d0 <__addsf3+0x160>
 80030ec:	84000044 	addi	r16,r16,1
 80030f0:	00803fc4 	movi	r2,255
 80030f4:	80807826 	beq	r16,r2,80032d8 <__addsf3+0x268>
 80030f8:	200891ba 	slli	r4,r4,6
 80030fc:	8805883a 	mov	r2,r17
 8003100:	2008d27a 	srli	r4,r4,9
 8003104:	84003fcc 	andi	r16,r16,255
 8003108:	800695fa 	slli	r3,r16,23
 800310c:	10803fcc 	andi	r2,r2,255
 8003110:	04002034 	movhi	r16,128
 8003114:	843fffc4 	addi	r16,r16,-1
 8003118:	100497fa 	slli	r2,r2,31
 800311c:	2408703a 	and	r4,r4,r16
 8003120:	20e0b03a 	or	r16,r4,r3
 8003124:	8084b03a 	or	r2,r16,r2
 8003128:	dfc00317 	ldw	ra,12(sp)
 800312c:	dc800217 	ldw	r18,8(sp)
 8003130:	dc400117 	ldw	r17,4(sp)
 8003134:	dc000017 	ldw	r16,0(sp)
 8003138:	dec00404 	addi	sp,sp,16
 800313c:	f800283a 	ret
 8003140:	00c03fc4 	movi	r3,255
 8003144:	80ffe126 	beq	r16,r3,80030cc <__alt_data_end+0xfc0030cc>
 8003148:	29410034 	orhi	r5,r5,1024
 800314c:	00c006c4 	movi	r3,27
 8003150:	18807516 	blt	r3,r2,8003328 <__addsf3+0x2b8>
 8003154:	00c00804 	movi	r3,32
 8003158:	1887c83a 	sub	r3,r3,r2
 800315c:	28c6983a 	sll	r3,r5,r3
 8003160:	288ad83a 	srl	r5,r5,r2
 8003164:	1804c03a 	cmpne	r2,r3,zero
 8003168:	288ab03a 	or	r5,r5,r2
 800316c:	2149c83a 	sub	r4,r4,r5
 8003170:	2081002c 	andhi	r2,r4,1024
 8003174:	10001426 	beq	r2,zero,80031c8 <__addsf3+0x158>
 8003178:	04810034 	movhi	r18,1024
 800317c:	94bfffc4 	addi	r18,r18,-1
 8003180:	24a4703a 	and	r18,r4,r18
 8003184:	9009883a 	mov	r4,r18
 8003188:	8006cc80 	call	8006cc8 <__clzsi2>
 800318c:	10bffec4 	addi	r2,r2,-5
 8003190:	90a4983a 	sll	r18,r18,r2
 8003194:	14005416 	blt	r2,r16,80032e8 <__addsf3+0x278>
 8003198:	1405c83a 	sub	r2,r2,r16
 800319c:	11000044 	addi	r4,r2,1
 80031a0:	00800804 	movi	r2,32
 80031a4:	1105c83a 	sub	r2,r2,r4
 80031a8:	9084983a 	sll	r2,r18,r2
 80031ac:	9124d83a 	srl	r18,r18,r4
 80031b0:	0021883a 	mov	r16,zero
 80031b4:	1008c03a 	cmpne	r4,r2,zero
 80031b8:	9108b03a 	or	r4,r18,r4
 80031bc:	003fc306 	br	80030cc <__alt_data_end+0xfc0030cc>
 80031c0:	1000db26 	beq	r2,zero,8003530 <__addsf3+0x4c0>
 80031c4:	1009883a 	mov	r4,r2
 80031c8:	208001cc 	andi	r2,r4,7
 80031cc:	103fc11e 	bne	r2,zero,80030d4 <__alt_data_end+0xfc0030d4>
 80031d0:	2006d0fa 	srli	r3,r4,3
 80031d4:	01003fc4 	movi	r4,255
 80031d8:	8805883a 	mov	r2,r17
 80031dc:	8100241e 	bne	r16,r4,8003270 <__addsf3+0x200>
 80031e0:	18006e26 	beq	r3,zero,800339c <__addsf3+0x32c>
 80031e4:	19001034 	orhi	r4,r3,64
 80031e8:	00c02034 	movhi	r3,128
 80031ec:	18ffffc4 	addi	r3,r3,-1
 80031f0:	043fffc4 	movi	r16,-1
 80031f4:	20c8703a 	and	r4,r4,r3
 80031f8:	003fc206 	br	8003104 <__alt_data_end+0xfc003104>
 80031fc:	8187c83a 	sub	r3,r16,r6
 8003200:	00c03e0e 	bge	zero,r3,80032fc <__addsf3+0x28c>
 8003204:	30002326 	beq	r6,zero,8003294 <__addsf3+0x224>
 8003208:	01803fc4 	movi	r6,255
 800320c:	81bfaf26 	beq	r16,r6,80030cc <__alt_data_end+0xfc0030cc>
 8003210:	29410034 	orhi	r5,r5,1024
 8003214:	018006c4 	movi	r6,27
 8003218:	30c07416 	blt	r6,r3,80033ec <__addsf3+0x37c>
 800321c:	01800804 	movi	r6,32
 8003220:	30cdc83a 	sub	r6,r6,r3
 8003224:	298c983a 	sll	r6,r5,r6
 8003228:	28cad83a 	srl	r5,r5,r3
 800322c:	3006c03a 	cmpne	r3,r6,zero
 8003230:	28cab03a 	or	r5,r5,r3
 8003234:	2149883a 	add	r4,r4,r5
 8003238:	20c1002c 	andhi	r3,r4,1024
 800323c:	183fe226 	beq	r3,zero,80031c8 <__alt_data_end+0xfc0031c8>
 8003240:	84000044 	addi	r16,r16,1
 8003244:	00c03fc4 	movi	r3,255
 8003248:	80c05426 	beq	r16,r3,800339c <__addsf3+0x32c>
 800324c:	00bf0034 	movhi	r2,64512
 8003250:	10bfffc4 	addi	r2,r2,-1
 8003254:	20c0004c 	andi	r3,r4,1
 8003258:	2088703a 	and	r4,r4,r2
 800325c:	2008d07a 	srli	r4,r4,1
 8003260:	20c8b03a 	or	r4,r4,r3
 8003264:	003f9906 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003268:	0007883a 	mov	r3,zero
 800326c:	0005883a 	mov	r2,zero
 8003270:	01002034 	movhi	r4,128
 8003274:	213fffc4 	addi	r4,r4,-1
 8003278:	1908703a 	and	r4,r3,r4
 800327c:	003fa106 	br	8003104 <__alt_data_end+0xfc003104>
 8003280:	10bfffc4 	addi	r2,r2,-1
 8003284:	103fb926 	beq	r2,zero,800316c <__alt_data_end+0xfc00316c>
 8003288:	00c03fc4 	movi	r3,255
 800328c:	80ffaf1e 	bne	r16,r3,800314c <__alt_data_end+0xfc00314c>
 8003290:	003f8e06 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003294:	283f8d26 	beq	r5,zero,80030cc <__alt_data_end+0xfc0030cc>
 8003298:	18ffffc4 	addi	r3,r3,-1
 800329c:	183fe526 	beq	r3,zero,8003234 <__alt_data_end+0xfc003234>
 80032a0:	01803fc4 	movi	r6,255
 80032a4:	81bfdb1e 	bne	r16,r6,8003214 <__alt_data_end+0xfc003214>
 80032a8:	003f8806 	br	80030cc <__alt_data_end+0xfc0030cc>
 80032ac:	1000201e 	bne	r2,zero,8003330 <__addsf3+0x2c0>
 80032b0:	80800044 	addi	r2,r16,1
 80032b4:	10803fcc 	andi	r2,r2,255
 80032b8:	01800044 	movi	r6,1
 80032bc:	3080450e 	bge	r6,r2,80033d4 <__addsf3+0x364>
 80032c0:	2165c83a 	sub	r18,r4,r5
 80032c4:	90c1002c 	andhi	r3,r18,1024
 80032c8:	18002b26 	beq	r3,zero,8003378 <__addsf3+0x308>
 80032cc:	2925c83a 	sub	r18,r5,r4
 80032d0:	3823883a 	mov	r17,r7
 80032d4:	003fab06 	br	8003184 <__alt_data_end+0xfc003184>
 80032d8:	8805883a 	mov	r2,r17
 80032dc:	043fffc4 	movi	r16,-1
 80032e0:	0009883a 	mov	r4,zero
 80032e4:	003f8706 	br	8003104 <__alt_data_end+0xfc003104>
 80032e8:	013f0034 	movhi	r4,64512
 80032ec:	213fffc4 	addi	r4,r4,-1
 80032f0:	80a1c83a 	sub	r16,r16,r2
 80032f4:	9108703a 	and	r4,r18,r4
 80032f8:	003f7406 	br	80030cc <__alt_data_end+0xfc0030cc>
 80032fc:	1800411e 	bne	r3,zero,8003404 <__addsf3+0x394>
 8003300:	80c00044 	addi	r3,r16,1
 8003304:	19c03fcc 	andi	r7,r3,255
 8003308:	01800044 	movi	r6,1
 800330c:	31c0260e 	bge	r6,r7,80033a8 <__addsf3+0x338>
 8003310:	01803fc4 	movi	r6,255
 8003314:	19802126 	beq	r3,r6,800339c <__addsf3+0x32c>
 8003318:	2149883a 	add	r4,r4,r5
 800331c:	2008d07a 	srli	r4,r4,1
 8003320:	1821883a 	mov	r16,r3
 8003324:	003f6906 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003328:	01400044 	movi	r5,1
 800332c:	003f8f06 	br	800316c <__alt_data_end+0xfc00316c>
 8003330:	8000151e 	bne	r16,zero,8003388 <__addsf3+0x318>
 8003334:	20002f26 	beq	r4,zero,80033f4 <__addsf3+0x384>
 8003338:	0084303a 	nor	r2,zero,r2
 800333c:	10000a26 	beq	r2,zero,8003368 <__addsf3+0x2f8>
 8003340:	00c03fc4 	movi	r3,255
 8003344:	30c02b26 	beq	r6,r3,80033f4 <__addsf3+0x384>
 8003348:	00c006c4 	movi	r3,27
 800334c:	18806d16 	blt	r3,r2,8003504 <__addsf3+0x494>
 8003350:	00c00804 	movi	r3,32
 8003354:	1887c83a 	sub	r3,r3,r2
 8003358:	20c6983a 	sll	r3,r4,r3
 800335c:	2084d83a 	srl	r2,r4,r2
 8003360:	1808c03a 	cmpne	r4,r3,zero
 8003364:	1108b03a 	or	r4,r2,r4
 8003368:	2909c83a 	sub	r4,r5,r4
 800336c:	3021883a 	mov	r16,r6
 8003370:	3823883a 	mov	r17,r7
 8003374:	003f7e06 	br	8003170 <__alt_data_end+0xfc003170>
 8003378:	903f821e 	bne	r18,zero,8003184 <__alt_data_end+0xfc003184>
 800337c:	0005883a 	mov	r2,zero
 8003380:	0021883a 	mov	r16,zero
 8003384:	003fba06 	br	8003270 <__alt_data_end+0xfc003270>
 8003388:	00c03fc4 	movi	r3,255
 800338c:	30c01926 	beq	r6,r3,80033f4 <__addsf3+0x384>
 8003390:	0085c83a 	sub	r2,zero,r2
 8003394:	21010034 	orhi	r4,r4,1024
 8003398:	003feb06 	br	8003348 <__alt_data_end+0xfc003348>
 800339c:	043fffc4 	movi	r16,-1
 80033a0:	0009883a 	mov	r4,zero
 80033a4:	003f5706 	br	8003104 <__alt_data_end+0xfc003104>
 80033a8:	80004a1e 	bne	r16,zero,80034d4 <__addsf3+0x464>
 80033ac:	20005926 	beq	r4,zero,8003514 <__addsf3+0x4a4>
 80033b0:	283f4626 	beq	r5,zero,80030cc <__alt_data_end+0xfc0030cc>
 80033b4:	2149883a 	add	r4,r4,r5
 80033b8:	2081002c 	andhi	r2,r4,1024
 80033bc:	103f8226 	beq	r2,zero,80031c8 <__alt_data_end+0xfc0031c8>
 80033c0:	00bf0034 	movhi	r2,64512
 80033c4:	10bfffc4 	addi	r2,r2,-1
 80033c8:	3021883a 	mov	r16,r6
 80033cc:	2088703a 	and	r4,r4,r2
 80033d0:	003f3e06 	br	80030cc <__alt_data_end+0xfc0030cc>
 80033d4:	8000121e 	bne	r16,zero,8003420 <__addsf3+0x3b0>
 80033d8:	2000261e 	bne	r4,zero,8003474 <__addsf3+0x404>
 80033dc:	283fa226 	beq	r5,zero,8003268 <__alt_data_end+0xfc003268>
 80033e0:	2809883a 	mov	r4,r5
 80033e4:	3823883a 	mov	r17,r7
 80033e8:	003f3806 	br	80030cc <__alt_data_end+0xfc0030cc>
 80033ec:	01400044 	movi	r5,1
 80033f0:	003f9006 	br	8003234 <__alt_data_end+0xfc003234>
 80033f4:	2809883a 	mov	r4,r5
 80033f8:	3021883a 	mov	r16,r6
 80033fc:	3823883a 	mov	r17,r7
 8003400:	003f3206 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003404:	80000c1e 	bne	r16,zero,8003438 <__addsf3+0x3c8>
 8003408:	20002f26 	beq	r4,zero,80034c8 <__addsf3+0x458>
 800340c:	00c6303a 	nor	r3,zero,r3
 8003410:	18002b1e 	bne	r3,zero,80034c0 <__addsf3+0x450>
 8003414:	2149883a 	add	r4,r4,r5
 8003418:	3021883a 	mov	r16,r6
 800341c:	003f8606 	br	8003238 <__alt_data_end+0xfc003238>
 8003420:	20001b1e 	bne	r4,zero,8003490 <__addsf3+0x420>
 8003424:	28003926 	beq	r5,zero,800350c <__addsf3+0x49c>
 8003428:	2809883a 	mov	r4,r5
 800342c:	3823883a 	mov	r17,r7
 8003430:	04003fc4 	movi	r16,255
 8003434:	003f2506 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003438:	01c03fc4 	movi	r7,255
 800343c:	31c02226 	beq	r6,r7,80034c8 <__addsf3+0x458>
 8003440:	00c7c83a 	sub	r3,zero,r3
 8003444:	21010034 	orhi	r4,r4,1024
 8003448:	01c006c4 	movi	r7,27
 800344c:	38c03616 	blt	r7,r3,8003528 <__addsf3+0x4b8>
 8003450:	01c00804 	movi	r7,32
 8003454:	38cfc83a 	sub	r7,r7,r3
 8003458:	21ce983a 	sll	r7,r4,r7
 800345c:	20c6d83a 	srl	r3,r4,r3
 8003460:	3808c03a 	cmpne	r4,r7,zero
 8003464:	1906b03a 	or	r3,r3,r4
 8003468:	1949883a 	add	r4,r3,r5
 800346c:	3021883a 	mov	r16,r6
 8003470:	003f7106 	br	8003238 <__alt_data_end+0xfc003238>
 8003474:	283f1526 	beq	r5,zero,80030cc <__alt_data_end+0xfc0030cc>
 8003478:	2145c83a 	sub	r2,r4,r5
 800347c:	10c1002c 	andhi	r3,r2,1024
 8003480:	183f4f26 	beq	r3,zero,80031c0 <__alt_data_end+0xfc0031c0>
 8003484:	2909c83a 	sub	r4,r5,r4
 8003488:	3823883a 	mov	r17,r7
 800348c:	003f0f06 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003490:	28001a26 	beq	r5,zero,80034fc <__addsf3+0x48c>
 8003494:	2008d0fa 	srli	r4,r4,3
 8003498:	2080102c 	andhi	r2,r4,64
 800349c:	10000526 	beq	r2,zero,80034b4 <__addsf3+0x444>
 80034a0:	280ad0fa 	srli	r5,r5,3
 80034a4:	2880102c 	andhi	r2,r5,64
 80034a8:	1000021e 	bne	r2,zero,80034b4 <__addsf3+0x444>
 80034ac:	2809883a 	mov	r4,r5
 80034b0:	3823883a 	mov	r17,r7
 80034b4:	200890fa 	slli	r4,r4,3
 80034b8:	04003fc4 	movi	r16,255
 80034bc:	003f0306 	br	80030cc <__alt_data_end+0xfc0030cc>
 80034c0:	01c03fc4 	movi	r7,255
 80034c4:	31ffe01e 	bne	r6,r7,8003448 <__alt_data_end+0xfc003448>
 80034c8:	2809883a 	mov	r4,r5
 80034cc:	3021883a 	mov	r16,r6
 80034d0:	003efe06 	br	80030cc <__alt_data_end+0xfc0030cc>
 80034d4:	20001126 	beq	r4,zero,800351c <__addsf3+0x4ac>
 80034d8:	28000826 	beq	r5,zero,80034fc <__addsf3+0x48c>
 80034dc:	2008d0fa 	srli	r4,r4,3
 80034e0:	2080102c 	andhi	r2,r4,64
 80034e4:	103ff326 	beq	r2,zero,80034b4 <__alt_data_end+0xfc0034b4>
 80034e8:	280ad0fa 	srli	r5,r5,3
 80034ec:	2880102c 	andhi	r2,r5,64
 80034f0:	103ff01e 	bne	r2,zero,80034b4 <__alt_data_end+0xfc0034b4>
 80034f4:	2809883a 	mov	r4,r5
 80034f8:	003fee06 	br	80034b4 <__alt_data_end+0xfc0034b4>
 80034fc:	04003fc4 	movi	r16,255
 8003500:	003ef206 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003504:	01000044 	movi	r4,1
 8003508:	003f9706 	br	8003368 <__alt_data_end+0xfc003368>
 800350c:	0005883a 	mov	r2,zero
 8003510:	003f3406 	br	80031e4 <__alt_data_end+0xfc0031e4>
 8003514:	2809883a 	mov	r4,r5
 8003518:	003eec06 	br	80030cc <__alt_data_end+0xfc0030cc>
 800351c:	2809883a 	mov	r4,r5
 8003520:	04003fc4 	movi	r16,255
 8003524:	003ee906 	br	80030cc <__alt_data_end+0xfc0030cc>
 8003528:	00c00044 	movi	r3,1
 800352c:	003fce06 	br	8003468 <__alt_data_end+0xfc003468>
 8003530:	0005883a 	mov	r2,zero
 8003534:	003f4e06 	br	8003270 <__alt_data_end+0xfc003270>

08003538 <__divsf3>:
 8003538:	defff504 	addi	sp,sp,-44
 800353c:	200cd5fa 	srli	r6,r4,23
 8003540:	dcc00415 	stw	r19,16(sp)
 8003544:	2026d7fa 	srli	r19,r4,31
 8003548:	00c02034 	movhi	r3,128
 800354c:	dd800715 	stw	r22,28(sp)
 8003550:	dd000515 	stw	r20,20(sp)
 8003554:	dc800315 	stw	r18,12(sp)
 8003558:	18ffffc4 	addi	r3,r3,-1
 800355c:	dfc00a15 	stw	ra,40(sp)
 8003560:	df000915 	stw	fp,36(sp)
 8003564:	ddc00815 	stw	r23,32(sp)
 8003568:	dd400615 	stw	r21,24(sp)
 800356c:	dc400215 	stw	r17,8(sp)
 8003570:	dc000115 	stw	r16,4(sp)
 8003574:	35003fcc 	andi	r20,r6,255
 8003578:	1924703a 	and	r18,r3,r4
 800357c:	9d803fcc 	andi	r22,r19,255
 8003580:	a0005226 	beq	r20,zero,80036cc <__divsf3+0x194>
 8003584:	00803fc4 	movi	r2,255
 8003588:	a0802e26 	beq	r20,r2,8003644 <__divsf3+0x10c>
 800358c:	91002034 	orhi	r4,r18,128
 8003590:	202490fa 	slli	r18,r4,3
 8003594:	a53fe044 	addi	r20,r20,-127
 8003598:	0021883a 	mov	r16,zero
 800359c:	002f883a 	mov	r23,zero
 80035a0:	280cd5fa 	srli	r6,r5,23
 80035a4:	282ad7fa 	srli	r21,r5,31
 80035a8:	00c02034 	movhi	r3,128
 80035ac:	18ffffc4 	addi	r3,r3,-1
 80035b0:	31803fcc 	andi	r6,r6,255
 80035b4:	1962703a 	and	r17,r3,r5
 80035b8:	af003fcc 	andi	fp,r21,255
 80035bc:	30004a26 	beq	r6,zero,80036e8 <__divsf3+0x1b0>
 80035c0:	00803fc4 	movi	r2,255
 80035c4:	30804526 	beq	r6,r2,80036dc <__divsf3+0x1a4>
 80035c8:	89402034 	orhi	r5,r17,128
 80035cc:	282290fa 	slli	r17,r5,3
 80035d0:	31bfe044 	addi	r6,r6,-127
 80035d4:	000b883a 	mov	r5,zero
 80035d8:	2c20b03a 	or	r16,r5,r16
 80035dc:	802090ba 	slli	r16,r16,2
 80035e0:	00820034 	movhi	r2,2048
 80035e4:	108d8104 	addi	r2,r2,13828
 80035e8:	80a1883a 	add	r16,r16,r2
 80035ec:	81000017 	ldw	r4,0(r16)
 80035f0:	9d46f03a 	xor	r3,r19,r21
 80035f4:	180f883a 	mov	r7,r3
 80035f8:	18803fcc 	andi	r2,r3,255
 80035fc:	a18dc83a 	sub	r6,r20,r6
 8003600:	2000683a 	jmp	r4
 8003604:	080037e8 	cmpgeui	zero,at,223
 8003608:	0800366c 	andhi	zero,at,217
 800360c:	080037dc 	xori	zero,at,223
 8003610:	08003658 	cmpnei	zero,at,217
 8003614:	080037dc 	xori	zero,at,223
 8003618:	080037b4 	orhi	zero,at,222
 800361c:	080037dc 	xori	zero,at,223
 8003620:	08003658 	cmpnei	zero,at,217
 8003624:	0800366c 	andhi	zero,at,217
 8003628:	0800366c 	andhi	zero,at,217
 800362c:	080037b4 	orhi	zero,at,222
 8003630:	08003658 	cmpnei	zero,at,217
 8003634:	080038c8 	cmpgei	zero,at,227
 8003638:	080038c8 	cmpgei	zero,at,227
 800363c:	080038c8 	cmpgei	zero,at,227
 8003640:	0800387c 	xorhi	zero,at,225
 8003644:	9000581e 	bne	r18,zero,80037a8 <__divsf3+0x270>
 8003648:	04000204 	movi	r16,8
 800364c:	05c00084 	movi	r23,2
 8003650:	003fd306 	br	80035a0 <__alt_data_end+0xfc0035a0>
 8003654:	0023883a 	mov	r17,zero
 8003658:	e02d883a 	mov	r22,fp
 800365c:	282f883a 	mov	r23,r5
 8003660:	00800084 	movi	r2,2
 8003664:	b8808f1e 	bne	r23,r2,80038a4 <__divsf3+0x36c>
 8003668:	b005883a 	mov	r2,r22
 800366c:	11c0004c 	andi	r7,r2,1
 8003670:	013fffc4 	movi	r4,-1
 8003674:	000d883a 	mov	r6,zero
 8003678:	21003fcc 	andi	r4,r4,255
 800367c:	200895fa 	slli	r4,r4,23
 8003680:	38803fcc 	andi	r2,r7,255
 8003684:	00c02034 	movhi	r3,128
 8003688:	100497fa 	slli	r2,r2,31
 800368c:	18ffffc4 	addi	r3,r3,-1
 8003690:	30c6703a 	and	r3,r6,r3
 8003694:	1906b03a 	or	r3,r3,r4
 8003698:	1884b03a 	or	r2,r3,r2
 800369c:	dfc00a17 	ldw	ra,40(sp)
 80036a0:	df000917 	ldw	fp,36(sp)
 80036a4:	ddc00817 	ldw	r23,32(sp)
 80036a8:	dd800717 	ldw	r22,28(sp)
 80036ac:	dd400617 	ldw	r21,24(sp)
 80036b0:	dd000517 	ldw	r20,20(sp)
 80036b4:	dcc00417 	ldw	r19,16(sp)
 80036b8:	dc800317 	ldw	r18,12(sp)
 80036bc:	dc400217 	ldw	r17,8(sp)
 80036c0:	dc000117 	ldw	r16,4(sp)
 80036c4:	dec00b04 	addi	sp,sp,44
 80036c8:	f800283a 	ret
 80036cc:	90002b1e 	bne	r18,zero,800377c <__divsf3+0x244>
 80036d0:	04000104 	movi	r16,4
 80036d4:	05c00044 	movi	r23,1
 80036d8:	003fb106 	br	80035a0 <__alt_data_end+0xfc0035a0>
 80036dc:	8800251e 	bne	r17,zero,8003774 <__divsf3+0x23c>
 80036e0:	01400084 	movi	r5,2
 80036e4:	00000206 	br	80036f0 <__divsf3+0x1b8>
 80036e8:	88001a1e 	bne	r17,zero,8003754 <__divsf3+0x21c>
 80036ec:	01400044 	movi	r5,1
 80036f0:	8160b03a 	or	r16,r16,r5
 80036f4:	802090ba 	slli	r16,r16,2
 80036f8:	00c20034 	movhi	r3,2048
 80036fc:	18cdc504 	addi	r3,r3,14100
 8003700:	80e1883a 	add	r16,r16,r3
 8003704:	80c00017 	ldw	r3,0(r16)
 8003708:	9d44f03a 	xor	r2,r19,r21
 800370c:	a18dc83a 	sub	r6,r20,r6
 8003710:	1800683a 	jmp	r3
 8003714:	0800366c 	andhi	zero,at,217
 8003718:	0800366c 	andhi	zero,at,217
 800371c:	080038b8 	rdprs	zero,at,226
 8003720:	08003654 	ori	zero,at,217
 8003724:	080038b8 	rdprs	zero,at,226
 8003728:	080037b4 	orhi	zero,at,222
 800372c:	080038b8 	rdprs	zero,at,226
 8003730:	08003654 	ori	zero,at,217
 8003734:	0800366c 	andhi	zero,at,217
 8003738:	0800366c 	andhi	zero,at,217
 800373c:	080037b4 	orhi	zero,at,222
 8003740:	08003654 	ori	zero,at,217
 8003744:	080038c8 	cmpgei	zero,at,227
 8003748:	080038c8 	cmpgei	zero,at,227
 800374c:	080038c8 	cmpgei	zero,at,227
 8003750:	080038e0 	cmpeqi	zero,at,227
 8003754:	8809883a 	mov	r4,r17
 8003758:	8006cc80 	call	8006cc8 <__clzsi2>
 800375c:	10fffec4 	addi	r3,r2,-5
 8003760:	10801d84 	addi	r2,r2,118
 8003764:	88e2983a 	sll	r17,r17,r3
 8003768:	008dc83a 	sub	r6,zero,r2
 800376c:	000b883a 	mov	r5,zero
 8003770:	003f9906 	br	80035d8 <__alt_data_end+0xfc0035d8>
 8003774:	014000c4 	movi	r5,3
 8003778:	003f9706 	br	80035d8 <__alt_data_end+0xfc0035d8>
 800377c:	9009883a 	mov	r4,r18
 8003780:	d9400015 	stw	r5,0(sp)
 8003784:	8006cc80 	call	8006cc8 <__clzsi2>
 8003788:	10fffec4 	addi	r3,r2,-5
 800378c:	11801d84 	addi	r6,r2,118
 8003790:	90e4983a 	sll	r18,r18,r3
 8003794:	01a9c83a 	sub	r20,zero,r6
 8003798:	0021883a 	mov	r16,zero
 800379c:	002f883a 	mov	r23,zero
 80037a0:	d9400017 	ldw	r5,0(sp)
 80037a4:	003f7e06 	br	80035a0 <__alt_data_end+0xfc0035a0>
 80037a8:	04000304 	movi	r16,12
 80037ac:	05c000c4 	movi	r23,3
 80037b0:	003f7b06 	br	80035a0 <__alt_data_end+0xfc0035a0>
 80037b4:	01802034 	movhi	r6,128
 80037b8:	000f883a 	mov	r7,zero
 80037bc:	31bfffc4 	addi	r6,r6,-1
 80037c0:	013fffc4 	movi	r4,-1
 80037c4:	003fac06 	br	8003678 <__alt_data_end+0xfc003678>
 80037c8:	01400044 	movi	r5,1
 80037cc:	2909c83a 	sub	r4,r5,r4
 80037d0:	00c006c4 	movi	r3,27
 80037d4:	19004b0e 	bge	r3,r4,8003904 <__divsf3+0x3cc>
 80037d8:	114e703a 	and	r7,r2,r5
 80037dc:	0009883a 	mov	r4,zero
 80037e0:	000d883a 	mov	r6,zero
 80037e4:	003fa406 	br	8003678 <__alt_data_end+0xfc003678>
 80037e8:	9006917a 	slli	r3,r18,5
 80037ec:	8822917a 	slli	r17,r17,5
 80037f0:	1c40372e 	bgeu	r3,r17,80038d0 <__divsf3+0x398>
 80037f4:	31bfffc4 	addi	r6,r6,-1
 80037f8:	010006c4 	movi	r4,27
 80037fc:	000b883a 	mov	r5,zero
 8003800:	180f883a 	mov	r7,r3
 8003804:	294b883a 	add	r5,r5,r5
 8003808:	18c7883a 	add	r3,r3,r3
 800380c:	38000116 	blt	r7,zero,8003814 <__divsf3+0x2dc>
 8003810:	1c400236 	bltu	r3,r17,800381c <__divsf3+0x2e4>
 8003814:	1c47c83a 	sub	r3,r3,r17
 8003818:	29400054 	ori	r5,r5,1
 800381c:	213fffc4 	addi	r4,r4,-1
 8003820:	203ff71e 	bne	r4,zero,8003800 <__alt_data_end+0xfc003800>
 8003824:	1806c03a 	cmpne	r3,r3,zero
 8003828:	1962b03a 	or	r17,r3,r5
 800382c:	31001fc4 	addi	r4,r6,127
 8003830:	013fe50e 	bge	zero,r4,80037c8 <__alt_data_end+0xfc0037c8>
 8003834:	88c001cc 	andi	r3,r17,7
 8003838:	18000426 	beq	r3,zero,800384c <__divsf3+0x314>
 800383c:	88c003cc 	andi	r3,r17,15
 8003840:	01400104 	movi	r5,4
 8003844:	19400126 	beq	r3,r5,800384c <__divsf3+0x314>
 8003848:	8963883a 	add	r17,r17,r5
 800384c:	88c2002c 	andhi	r3,r17,2048
 8003850:	18000426 	beq	r3,zero,8003864 <__divsf3+0x32c>
 8003854:	00fe0034 	movhi	r3,63488
 8003858:	18ffffc4 	addi	r3,r3,-1
 800385c:	31002004 	addi	r4,r6,128
 8003860:	88e2703a 	and	r17,r17,r3
 8003864:	00c03f84 	movi	r3,254
 8003868:	193f8016 	blt	r3,r4,800366c <__alt_data_end+0xfc00366c>
 800386c:	880c91ba 	slli	r6,r17,6
 8003870:	11c0004c 	andi	r7,r2,1
 8003874:	300cd27a 	srli	r6,r6,9
 8003878:	003f7f06 	br	8003678 <__alt_data_end+0xfc003678>
 800387c:	9080102c 	andhi	r2,r18,64
 8003880:	10000226 	beq	r2,zero,800388c <__divsf3+0x354>
 8003884:	8880102c 	andhi	r2,r17,64
 8003888:	10001826 	beq	r2,zero,80038ec <__divsf3+0x3b4>
 800388c:	00802034 	movhi	r2,128
 8003890:	91801034 	orhi	r6,r18,64
 8003894:	10bfffc4 	addi	r2,r2,-1
 8003898:	980f883a 	mov	r7,r19
 800389c:	308c703a 	and	r6,r6,r2
 80038a0:	003fc706 	br	80037c0 <__alt_data_end+0xfc0037c0>
 80038a4:	008000c4 	movi	r2,3
 80038a8:	b8802d26 	beq	r23,r2,8003960 <__divsf3+0x428>
 80038ac:	00c00044 	movi	r3,1
 80038b0:	b005883a 	mov	r2,r22
 80038b4:	b8ffdd1e 	bne	r23,r3,800382c <__alt_data_end+0xfc00382c>
 80038b8:	11c0004c 	andi	r7,r2,1
 80038bc:	0009883a 	mov	r4,zero
 80038c0:	000d883a 	mov	r6,zero
 80038c4:	003f6c06 	br	8003678 <__alt_data_end+0xfc003678>
 80038c8:	9023883a 	mov	r17,r18
 80038cc:	003f6406 	br	8003660 <__alt_data_end+0xfc003660>
 80038d0:	1c47c83a 	sub	r3,r3,r17
 80038d4:	01000684 	movi	r4,26
 80038d8:	01400044 	movi	r5,1
 80038dc:	003fc806 	br	8003800 <__alt_data_end+0xfc003800>
 80038e0:	9080102c 	andhi	r2,r18,64
 80038e4:	103fe926 	beq	r2,zero,800388c <__alt_data_end+0xfc00388c>
 80038e8:	0023883a 	mov	r17,zero
 80038ec:	00802034 	movhi	r2,128
 80038f0:	89801034 	orhi	r6,r17,64
 80038f4:	10bfffc4 	addi	r2,r2,-1
 80038f8:	a80f883a 	mov	r7,r21
 80038fc:	308c703a 	and	r6,r6,r2
 8003900:	003faf06 	br	80037c0 <__alt_data_end+0xfc0037c0>
 8003904:	01c00804 	movi	r7,32
 8003908:	390fc83a 	sub	r7,r7,r4
 800390c:	89ce983a 	sll	r7,r17,r7
 8003910:	890ad83a 	srl	r5,r17,r4
 8003914:	380ec03a 	cmpne	r7,r7,zero
 8003918:	29cab03a 	or	r5,r5,r7
 800391c:	28c001cc 	andi	r3,r5,7
 8003920:	18000426 	beq	r3,zero,8003934 <__divsf3+0x3fc>
 8003924:	28c003cc 	andi	r3,r5,15
 8003928:	01000104 	movi	r4,4
 800392c:	19000126 	beq	r3,r4,8003934 <__divsf3+0x3fc>
 8003930:	290b883a 	add	r5,r5,r4
 8003934:	28c1002c 	andhi	r3,r5,1024
 8003938:	18000426 	beq	r3,zero,800394c <__divsf3+0x414>
 800393c:	11c0004c 	andi	r7,r2,1
 8003940:	01000044 	movi	r4,1
 8003944:	000d883a 	mov	r6,zero
 8003948:	003f4b06 	br	8003678 <__alt_data_end+0xfc003678>
 800394c:	280a91ba 	slli	r5,r5,6
 8003950:	11c0004c 	andi	r7,r2,1
 8003954:	0009883a 	mov	r4,zero
 8003958:	280cd27a 	srli	r6,r5,9
 800395c:	003f4606 	br	8003678 <__alt_data_end+0xfc003678>
 8003960:	00802034 	movhi	r2,128
 8003964:	89801034 	orhi	r6,r17,64
 8003968:	10bfffc4 	addi	r2,r2,-1
 800396c:	b00f883a 	mov	r7,r22
 8003970:	308c703a 	and	r6,r6,r2
 8003974:	003f9206 	br	80037c0 <__alt_data_end+0xfc0037c0>

08003978 <__lesf2>:
 8003978:	2004d5fa 	srli	r2,r4,23
 800397c:	280cd5fa 	srli	r6,r5,23
 8003980:	00c02034 	movhi	r3,128
 8003984:	18ffffc4 	addi	r3,r3,-1
 8003988:	10803fcc 	andi	r2,r2,255
 800398c:	01c03fc4 	movi	r7,255
 8003990:	1910703a 	and	r8,r3,r4
 8003994:	31803fcc 	andi	r6,r6,255
 8003998:	1946703a 	and	r3,r3,r5
 800399c:	2008d7fa 	srli	r4,r4,31
 80039a0:	280ad7fa 	srli	r5,r5,31
 80039a4:	11c01b26 	beq	r2,r7,8003a14 <__lesf2+0x9c>
 80039a8:	01c03fc4 	movi	r7,255
 80039ac:	31c01126 	beq	r6,r7,80039f4 <__lesf2+0x7c>
 80039b0:	1000071e 	bne	r2,zero,80039d0 <__lesf2+0x58>
 80039b4:	400f003a 	cmpeq	r7,r8,zero
 80039b8:	21003fcc 	andi	r4,r4,255
 80039bc:	3000081e 	bne	r6,zero,80039e0 <__lesf2+0x68>
 80039c0:	1800071e 	bne	r3,zero,80039e0 <__lesf2+0x68>
 80039c4:	0005883a 	mov	r2,zero
 80039c8:	40000f1e 	bne	r8,zero,8003a08 <__lesf2+0x90>
 80039cc:	f800283a 	ret
 80039d0:	21003fcc 	andi	r4,r4,255
 80039d4:	30000a1e 	bne	r6,zero,8003a00 <__lesf2+0x88>
 80039d8:	18000b26 	beq	r3,zero,8003a08 <__lesf2+0x90>
 80039dc:	000f883a 	mov	r7,zero
 80039e0:	29403fcc 	andi	r5,r5,255
 80039e4:	38000726 	beq	r7,zero,8003a04 <__lesf2+0x8c>
 80039e8:	28000826 	beq	r5,zero,8003a0c <__lesf2+0x94>
 80039ec:	00800044 	movi	r2,1
 80039f0:	f800283a 	ret
 80039f4:	183fee26 	beq	r3,zero,80039b0 <__alt_data_end+0xfc0039b0>
 80039f8:	00800084 	movi	r2,2
 80039fc:	f800283a 	ret
 8003a00:	29403fcc 	andi	r5,r5,255
 8003a04:	21400626 	beq	r4,r5,8003a20 <__lesf2+0xa8>
 8003a08:	203ff826 	beq	r4,zero,80039ec <__alt_data_end+0xfc0039ec>
 8003a0c:	00bfffc4 	movi	r2,-1
 8003a10:	f800283a 	ret
 8003a14:	403fe426 	beq	r8,zero,80039a8 <__alt_data_end+0xfc0039a8>
 8003a18:	00800084 	movi	r2,2
 8003a1c:	f800283a 	ret
 8003a20:	30bff916 	blt	r6,r2,8003a08 <__alt_data_end+0xfc003a08>
 8003a24:	11800216 	blt	r2,r6,8003a30 <__lesf2+0xb8>
 8003a28:	1a3ff736 	bltu	r3,r8,8003a08 <__alt_data_end+0xfc003a08>
 8003a2c:	40c0022e 	bgeu	r8,r3,8003a38 <__lesf2+0xc0>
 8003a30:	203fee1e 	bne	r4,zero,80039ec <__alt_data_end+0xfc0039ec>
 8003a34:	003ff506 	br	8003a0c <__alt_data_end+0xfc003a0c>
 8003a38:	0005883a 	mov	r2,zero
 8003a3c:	f800283a 	ret

08003a40 <__mulsf3>:
 8003a40:	defff504 	addi	sp,sp,-44
 8003a44:	dc000115 	stw	r16,4(sp)
 8003a48:	2020d5fa 	srli	r16,r4,23
 8003a4c:	dd400615 	stw	r21,24(sp)
 8003a50:	202ad7fa 	srli	r21,r4,31
 8003a54:	dc800315 	stw	r18,12(sp)
 8003a58:	04802034 	movhi	r18,128
 8003a5c:	df000915 	stw	fp,36(sp)
 8003a60:	dd000515 	stw	r20,20(sp)
 8003a64:	94bfffc4 	addi	r18,r18,-1
 8003a68:	dfc00a15 	stw	ra,40(sp)
 8003a6c:	ddc00815 	stw	r23,32(sp)
 8003a70:	dd800715 	stw	r22,28(sp)
 8003a74:	dcc00415 	stw	r19,16(sp)
 8003a78:	dc400215 	stw	r17,8(sp)
 8003a7c:	84003fcc 	andi	r16,r16,255
 8003a80:	9124703a 	and	r18,r18,r4
 8003a84:	a829883a 	mov	r20,r21
 8003a88:	af003fcc 	andi	fp,r21,255
 8003a8c:	80005426 	beq	r16,zero,8003be0 <__mulsf3+0x1a0>
 8003a90:	00803fc4 	movi	r2,255
 8003a94:	80802f26 	beq	r16,r2,8003b54 <__mulsf3+0x114>
 8003a98:	91002034 	orhi	r4,r18,128
 8003a9c:	202490fa 	slli	r18,r4,3
 8003aa0:	843fe044 	addi	r16,r16,-127
 8003aa4:	0023883a 	mov	r17,zero
 8003aa8:	002f883a 	mov	r23,zero
 8003aac:	2804d5fa 	srli	r2,r5,23
 8003ab0:	282cd7fa 	srli	r22,r5,31
 8003ab4:	01002034 	movhi	r4,128
 8003ab8:	213fffc4 	addi	r4,r4,-1
 8003abc:	10803fcc 	andi	r2,r2,255
 8003ac0:	2166703a 	and	r19,r4,r5
 8003ac4:	b1803fcc 	andi	r6,r22,255
 8003ac8:	10004c26 	beq	r2,zero,8003bfc <__mulsf3+0x1bc>
 8003acc:	00c03fc4 	movi	r3,255
 8003ad0:	10c04726 	beq	r2,r3,8003bf0 <__mulsf3+0x1b0>
 8003ad4:	99002034 	orhi	r4,r19,128
 8003ad8:	202690fa 	slli	r19,r4,3
 8003adc:	10bfe044 	addi	r2,r2,-127
 8003ae0:	0007883a 	mov	r3,zero
 8003ae4:	80a1883a 	add	r16,r16,r2
 8003ae8:	010003c4 	movi	r4,15
 8003aec:	1c44b03a 	or	r2,r3,r17
 8003af0:	b56af03a 	xor	r21,r22,r21
 8003af4:	81c00044 	addi	r7,r16,1
 8003af8:	20806b36 	bltu	r4,r2,8003ca8 <__mulsf3+0x268>
 8003afc:	100490ba 	slli	r2,r2,2
 8003b00:	01020034 	movhi	r4,2048
 8003b04:	210ec504 	addi	r4,r4,15124
 8003b08:	1105883a 	add	r2,r2,r4
 8003b0c:	10800017 	ldw	r2,0(r2)
 8003b10:	1000683a 	jmp	r2
 8003b14:	08003ca8 	cmpgeui	zero,at,242
 8003b18:	08003b68 	cmpgeui	zero,at,237
 8003b1c:	08003b68 	cmpgeui	zero,at,237
 8003b20:	08003b64 	muli	zero,at,237
 8003b24:	08003c8c 	andi	zero,at,242
 8003b28:	08003c8c 	andi	zero,at,242
 8003b2c:	08003c78 	rdprs	zero,at,241
 8003b30:	08003b64 	muli	zero,at,237
 8003b34:	08003c8c 	andi	zero,at,242
 8003b38:	08003c78 	rdprs	zero,at,241
 8003b3c:	08003c8c 	andi	zero,at,242
 8003b40:	08003b64 	muli	zero,at,237
 8003b44:	08003c98 	cmpnei	zero,at,242
 8003b48:	08003c98 	cmpnei	zero,at,242
 8003b4c:	08003c98 	cmpnei	zero,at,242
 8003b50:	08003d74 	orhi	zero,at,245
 8003b54:	90003b1e 	bne	r18,zero,8003c44 <__mulsf3+0x204>
 8003b58:	04400204 	movi	r17,8
 8003b5c:	05c00084 	movi	r23,2
 8003b60:	003fd206 	br	8003aac <__alt_data_end+0xfc003aac>
 8003b64:	302b883a 	mov	r21,r6
 8003b68:	00800084 	movi	r2,2
 8003b6c:	18802626 	beq	r3,r2,8003c08 <__mulsf3+0x1c8>
 8003b70:	008000c4 	movi	r2,3
 8003b74:	1880ab26 	beq	r3,r2,8003e24 <__mulsf3+0x3e4>
 8003b78:	00800044 	movi	r2,1
 8003b7c:	1880a21e 	bne	r3,r2,8003e08 <__mulsf3+0x3c8>
 8003b80:	a829883a 	mov	r20,r21
 8003b84:	0007883a 	mov	r3,zero
 8003b88:	0009883a 	mov	r4,zero
 8003b8c:	18803fcc 	andi	r2,r3,255
 8003b90:	100695fa 	slli	r3,r2,23
 8003b94:	a0803fcc 	andi	r2,r20,255
 8003b98:	100a97fa 	slli	r5,r2,31
 8003b9c:	00802034 	movhi	r2,128
 8003ba0:	10bfffc4 	addi	r2,r2,-1
 8003ba4:	2084703a 	and	r2,r4,r2
 8003ba8:	10c4b03a 	or	r2,r2,r3
 8003bac:	1144b03a 	or	r2,r2,r5
 8003bb0:	dfc00a17 	ldw	ra,40(sp)
 8003bb4:	df000917 	ldw	fp,36(sp)
 8003bb8:	ddc00817 	ldw	r23,32(sp)
 8003bbc:	dd800717 	ldw	r22,28(sp)
 8003bc0:	dd400617 	ldw	r21,24(sp)
 8003bc4:	dd000517 	ldw	r20,20(sp)
 8003bc8:	dcc00417 	ldw	r19,16(sp)
 8003bcc:	dc800317 	ldw	r18,12(sp)
 8003bd0:	dc400217 	ldw	r17,8(sp)
 8003bd4:	dc000117 	ldw	r16,4(sp)
 8003bd8:	dec00b04 	addi	sp,sp,44
 8003bdc:	f800283a 	ret
 8003be0:	90000d1e 	bne	r18,zero,8003c18 <__mulsf3+0x1d8>
 8003be4:	04400104 	movi	r17,4
 8003be8:	05c00044 	movi	r23,1
 8003bec:	003faf06 	br	8003aac <__alt_data_end+0xfc003aac>
 8003bf0:	9806c03a 	cmpne	r3,r19,zero
 8003bf4:	18c00084 	addi	r3,r3,2
 8003bf8:	003fba06 	br	8003ae4 <__alt_data_end+0xfc003ae4>
 8003bfc:	9800141e 	bne	r19,zero,8003c50 <__mulsf3+0x210>
 8003c00:	00c00044 	movi	r3,1
 8003c04:	003fb706 	br	8003ae4 <__alt_data_end+0xfc003ae4>
 8003c08:	a829883a 	mov	r20,r21
 8003c0c:	00ffffc4 	movi	r3,-1
 8003c10:	0009883a 	mov	r4,zero
 8003c14:	003fdd06 	br	8003b8c <__alt_data_end+0xfc003b8c>
 8003c18:	9009883a 	mov	r4,r18
 8003c1c:	d9400015 	stw	r5,0(sp)
 8003c20:	8006cc80 	call	8006cc8 <__clzsi2>
 8003c24:	10fffec4 	addi	r3,r2,-5
 8003c28:	10801d84 	addi	r2,r2,118
 8003c2c:	90e4983a 	sll	r18,r18,r3
 8003c30:	00a1c83a 	sub	r16,zero,r2
 8003c34:	0023883a 	mov	r17,zero
 8003c38:	002f883a 	mov	r23,zero
 8003c3c:	d9400017 	ldw	r5,0(sp)
 8003c40:	003f9a06 	br	8003aac <__alt_data_end+0xfc003aac>
 8003c44:	04400304 	movi	r17,12
 8003c48:	05c000c4 	movi	r23,3
 8003c4c:	003f9706 	br	8003aac <__alt_data_end+0xfc003aac>
 8003c50:	9809883a 	mov	r4,r19
 8003c54:	d9800015 	stw	r6,0(sp)
 8003c58:	8006cc80 	call	8006cc8 <__clzsi2>
 8003c5c:	10fffec4 	addi	r3,r2,-5
 8003c60:	10801d84 	addi	r2,r2,118
 8003c64:	98e6983a 	sll	r19,r19,r3
 8003c68:	0085c83a 	sub	r2,zero,r2
 8003c6c:	0007883a 	mov	r3,zero
 8003c70:	d9800017 	ldw	r6,0(sp)
 8003c74:	003f9b06 	br	8003ae4 <__alt_data_end+0xfc003ae4>
 8003c78:	01002034 	movhi	r4,128
 8003c7c:	0029883a 	mov	r20,zero
 8003c80:	213fffc4 	addi	r4,r4,-1
 8003c84:	00ffffc4 	movi	r3,-1
 8003c88:	003fc006 	br	8003b8c <__alt_data_end+0xfc003b8c>
 8003c8c:	9027883a 	mov	r19,r18
 8003c90:	b807883a 	mov	r3,r23
 8003c94:	003fb406 	br	8003b68 <__alt_data_end+0xfc003b68>
 8003c98:	9027883a 	mov	r19,r18
 8003c9c:	e02b883a 	mov	r21,fp
 8003ca0:	b807883a 	mov	r3,r23
 8003ca4:	003fb006 	br	8003b68 <__alt_data_end+0xfc003b68>
 8003ca8:	9004d43a 	srli	r2,r18,16
 8003cac:	9810d43a 	srli	r8,r19,16
 8003cb0:	94bfffcc 	andi	r18,r18,65535
 8003cb4:	993fffcc 	andi	r4,r19,65535
 8003cb8:	910d383a 	mul	r6,r18,r4
 8003cbc:	20a7383a 	mul	r19,r4,r2
 8003cc0:	9225383a 	mul	r18,r18,r8
 8003cc4:	3006d43a 	srli	r3,r6,16
 8003cc8:	1211383a 	mul	r8,r2,r8
 8003ccc:	94e5883a 	add	r18,r18,r19
 8003cd0:	1c87883a 	add	r3,r3,r18
 8003cd4:	1cc0022e 	bgeu	r3,r19,8003ce0 <__mulsf3+0x2a0>
 8003cd8:	00800074 	movhi	r2,1
 8003cdc:	4091883a 	add	r8,r8,r2
 8003ce0:	1804943a 	slli	r2,r3,16
 8003ce4:	31bfffcc 	andi	r6,r6,65535
 8003ce8:	1806d43a 	srli	r3,r3,16
 8003cec:	1185883a 	add	r2,r2,r6
 8003cf0:	102691ba 	slli	r19,r2,6
 8003cf4:	1a07883a 	add	r3,r3,r8
 8003cf8:	1004d6ba 	srli	r2,r2,26
 8003cfc:	180891ba 	slli	r4,r3,6
 8003d00:	9826c03a 	cmpne	r19,r19,zero
 8003d04:	9884b03a 	or	r2,r19,r2
 8003d08:	1126b03a 	or	r19,r2,r4
 8003d0c:	9882002c 	andhi	r2,r19,2048
 8003d10:	10000426 	beq	r2,zero,8003d24 <__mulsf3+0x2e4>
 8003d14:	9804d07a 	srli	r2,r19,1
 8003d18:	9900004c 	andi	r4,r19,1
 8003d1c:	3821883a 	mov	r16,r7
 8003d20:	1126b03a 	or	r19,r2,r4
 8003d24:	80c01fc4 	addi	r3,r16,127
 8003d28:	00c0210e 	bge	zero,r3,8003db0 <__mulsf3+0x370>
 8003d2c:	988001cc 	andi	r2,r19,7
 8003d30:	10000426 	beq	r2,zero,8003d44 <__mulsf3+0x304>
 8003d34:	988003cc 	andi	r2,r19,15
 8003d38:	01000104 	movi	r4,4
 8003d3c:	11000126 	beq	r2,r4,8003d44 <__mulsf3+0x304>
 8003d40:	9927883a 	add	r19,r19,r4
 8003d44:	9882002c 	andhi	r2,r19,2048
 8003d48:	10000426 	beq	r2,zero,8003d5c <__mulsf3+0x31c>
 8003d4c:	00be0034 	movhi	r2,63488
 8003d50:	10bfffc4 	addi	r2,r2,-1
 8003d54:	80c02004 	addi	r3,r16,128
 8003d58:	98a6703a 	and	r19,r19,r2
 8003d5c:	00803f84 	movi	r2,254
 8003d60:	10ffa916 	blt	r2,r3,8003c08 <__alt_data_end+0xfc003c08>
 8003d64:	980891ba 	slli	r4,r19,6
 8003d68:	a829883a 	mov	r20,r21
 8003d6c:	2008d27a 	srli	r4,r4,9
 8003d70:	003f8606 	br	8003b8c <__alt_data_end+0xfc003b8c>
 8003d74:	9080102c 	andhi	r2,r18,64
 8003d78:	10000826 	beq	r2,zero,8003d9c <__mulsf3+0x35c>
 8003d7c:	9880102c 	andhi	r2,r19,64
 8003d80:	1000061e 	bne	r2,zero,8003d9c <__mulsf3+0x35c>
 8003d84:	00802034 	movhi	r2,128
 8003d88:	99001034 	orhi	r4,r19,64
 8003d8c:	10bfffc4 	addi	r2,r2,-1
 8003d90:	b029883a 	mov	r20,r22
 8003d94:	2088703a 	and	r4,r4,r2
 8003d98:	003fba06 	br	8003c84 <__alt_data_end+0xfc003c84>
 8003d9c:	00802034 	movhi	r2,128
 8003da0:	91001034 	orhi	r4,r18,64
 8003da4:	10bfffc4 	addi	r2,r2,-1
 8003da8:	2088703a 	and	r4,r4,r2
 8003dac:	003fb506 	br	8003c84 <__alt_data_end+0xfc003c84>
 8003db0:	00800044 	movi	r2,1
 8003db4:	10c7c83a 	sub	r3,r2,r3
 8003db8:	008006c4 	movi	r2,27
 8003dbc:	10ff7016 	blt	r2,r3,8003b80 <__alt_data_end+0xfc003b80>
 8003dc0:	00800804 	movi	r2,32
 8003dc4:	10c5c83a 	sub	r2,r2,r3
 8003dc8:	9884983a 	sll	r2,r19,r2
 8003dcc:	98c6d83a 	srl	r3,r19,r3
 8003dd0:	1004c03a 	cmpne	r2,r2,zero
 8003dd4:	1884b03a 	or	r2,r3,r2
 8003dd8:	10c001cc 	andi	r3,r2,7
 8003ddc:	18000426 	beq	r3,zero,8003df0 <__mulsf3+0x3b0>
 8003de0:	10c003cc 	andi	r3,r2,15
 8003de4:	01000104 	movi	r4,4
 8003de8:	19000126 	beq	r3,r4,8003df0 <__mulsf3+0x3b0>
 8003dec:	1105883a 	add	r2,r2,r4
 8003df0:	10c1002c 	andhi	r3,r2,1024
 8003df4:	18000626 	beq	r3,zero,8003e10 <__mulsf3+0x3d0>
 8003df8:	a829883a 	mov	r20,r21
 8003dfc:	00c00044 	movi	r3,1
 8003e00:	0009883a 	mov	r4,zero
 8003e04:	003f6106 	br	8003b8c <__alt_data_end+0xfc003b8c>
 8003e08:	3821883a 	mov	r16,r7
 8003e0c:	003fc506 	br	8003d24 <__alt_data_end+0xfc003d24>
 8003e10:	100491ba 	slli	r2,r2,6
 8003e14:	a829883a 	mov	r20,r21
 8003e18:	0007883a 	mov	r3,zero
 8003e1c:	1008d27a 	srli	r4,r2,9
 8003e20:	003f5a06 	br	8003b8c <__alt_data_end+0xfc003b8c>
 8003e24:	00802034 	movhi	r2,128
 8003e28:	99001034 	orhi	r4,r19,64
 8003e2c:	10bfffc4 	addi	r2,r2,-1
 8003e30:	a829883a 	mov	r20,r21
 8003e34:	2088703a 	and	r4,r4,r2
 8003e38:	003f9206 	br	8003c84 <__alt_data_end+0xfc003c84>

08003e3c <__subsf3>:
 8003e3c:	defffc04 	addi	sp,sp,-16
 8003e40:	280cd5fa 	srli	r6,r5,23
 8003e44:	dc000015 	stw	r16,0(sp)
 8003e48:	01c02034 	movhi	r7,128
 8003e4c:	2020d5fa 	srli	r16,r4,23
 8003e50:	39ffffc4 	addi	r7,r7,-1
 8003e54:	3906703a 	and	r3,r7,r4
 8003e58:	dc400115 	stw	r17,4(sp)
 8003e5c:	394e703a 	and	r7,r7,r5
 8003e60:	2022d7fa 	srli	r17,r4,31
 8003e64:	dfc00315 	stw	ra,12(sp)
 8003e68:	dc800215 	stw	r18,8(sp)
 8003e6c:	31803fcc 	andi	r6,r6,255
 8003e70:	01003fc4 	movi	r4,255
 8003e74:	84003fcc 	andi	r16,r16,255
 8003e78:	180690fa 	slli	r3,r3,3
 8003e7c:	2804d7fa 	srli	r2,r5,31
 8003e80:	380e90fa 	slli	r7,r7,3
 8003e84:	31006d26 	beq	r6,r4,800403c <__subsf3+0x200>
 8003e88:	1080005c 	xori	r2,r2,1
 8003e8c:	8189c83a 	sub	r4,r16,r6
 8003e90:	14404f26 	beq	r2,r17,8003fd0 <__subsf3+0x194>
 8003e94:	0100770e 	bge	zero,r4,8004074 <__subsf3+0x238>
 8003e98:	30001e1e 	bne	r6,zero,8003f14 <__subsf3+0xd8>
 8003e9c:	38006a1e 	bne	r7,zero,8004048 <__subsf3+0x20c>
 8003ea0:	188001cc 	andi	r2,r3,7
 8003ea4:	10000426 	beq	r2,zero,8003eb8 <__subsf3+0x7c>
 8003ea8:	188003cc 	andi	r2,r3,15
 8003eac:	01000104 	movi	r4,4
 8003eb0:	11000126 	beq	r2,r4,8003eb8 <__subsf3+0x7c>
 8003eb4:	1907883a 	add	r3,r3,r4
 8003eb8:	1881002c 	andhi	r2,r3,1024
 8003ebc:	10003926 	beq	r2,zero,8003fa4 <__subsf3+0x168>
 8003ec0:	84000044 	addi	r16,r16,1
 8003ec4:	00803fc4 	movi	r2,255
 8003ec8:	80807526 	beq	r16,r2,80040a0 <__subsf3+0x264>
 8003ecc:	180691ba 	slli	r3,r3,6
 8003ed0:	8880004c 	andi	r2,r17,1
 8003ed4:	180ad27a 	srli	r5,r3,9
 8003ed8:	84003fcc 	andi	r16,r16,255
 8003edc:	800695fa 	slli	r3,r16,23
 8003ee0:	10803fcc 	andi	r2,r2,255
 8003ee4:	01002034 	movhi	r4,128
 8003ee8:	213fffc4 	addi	r4,r4,-1
 8003eec:	100497fa 	slli	r2,r2,31
 8003ef0:	2920703a 	and	r16,r5,r4
 8003ef4:	80e0b03a 	or	r16,r16,r3
 8003ef8:	8084b03a 	or	r2,r16,r2
 8003efc:	dfc00317 	ldw	ra,12(sp)
 8003f00:	dc800217 	ldw	r18,8(sp)
 8003f04:	dc400117 	ldw	r17,4(sp)
 8003f08:	dc000017 	ldw	r16,0(sp)
 8003f0c:	dec00404 	addi	sp,sp,16
 8003f10:	f800283a 	ret
 8003f14:	00803fc4 	movi	r2,255
 8003f18:	80bfe126 	beq	r16,r2,8003ea0 <__alt_data_end+0xfc003ea0>
 8003f1c:	39c10034 	orhi	r7,r7,1024
 8003f20:	008006c4 	movi	r2,27
 8003f24:	11007416 	blt	r2,r4,80040f8 <__subsf3+0x2bc>
 8003f28:	00800804 	movi	r2,32
 8003f2c:	1105c83a 	sub	r2,r2,r4
 8003f30:	3884983a 	sll	r2,r7,r2
 8003f34:	390ed83a 	srl	r7,r7,r4
 8003f38:	1008c03a 	cmpne	r4,r2,zero
 8003f3c:	390eb03a 	or	r7,r7,r4
 8003f40:	19c7c83a 	sub	r3,r3,r7
 8003f44:	1881002c 	andhi	r2,r3,1024
 8003f48:	10001426 	beq	r2,zero,8003f9c <__subsf3+0x160>
 8003f4c:	04810034 	movhi	r18,1024
 8003f50:	94bfffc4 	addi	r18,r18,-1
 8003f54:	1ca4703a 	and	r18,r3,r18
 8003f58:	9009883a 	mov	r4,r18
 8003f5c:	8006cc80 	call	8006cc8 <__clzsi2>
 8003f60:	10bffec4 	addi	r2,r2,-5
 8003f64:	90a4983a 	sll	r18,r18,r2
 8003f68:	14005116 	blt	r2,r16,80040b0 <__subsf3+0x274>
 8003f6c:	1405c83a 	sub	r2,r2,r16
 8003f70:	10c00044 	addi	r3,r2,1
 8003f74:	00800804 	movi	r2,32
 8003f78:	10c5c83a 	sub	r2,r2,r3
 8003f7c:	9084983a 	sll	r2,r18,r2
 8003f80:	90e4d83a 	srl	r18,r18,r3
 8003f84:	0021883a 	mov	r16,zero
 8003f88:	1006c03a 	cmpne	r3,r2,zero
 8003f8c:	90c6b03a 	or	r3,r18,r3
 8003f90:	003fc306 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8003f94:	2000e026 	beq	r4,zero,8004318 <__subsf3+0x4dc>
 8003f98:	2007883a 	mov	r3,r4
 8003f9c:	188001cc 	andi	r2,r3,7
 8003fa0:	103fc11e 	bne	r2,zero,8003ea8 <__alt_data_end+0xfc003ea8>
 8003fa4:	180ad0fa 	srli	r5,r3,3
 8003fa8:	00c03fc4 	movi	r3,255
 8003fac:	8880004c 	andi	r2,r17,1
 8003fb0:	80c0031e 	bne	r16,r3,8003fc0 <__subsf3+0x184>
 8003fb4:	28006d26 	beq	r5,zero,800416c <__subsf3+0x330>
 8003fb8:	29401034 	orhi	r5,r5,64
 8003fbc:	043fffc4 	movi	r16,-1
 8003fc0:	00c02034 	movhi	r3,128
 8003fc4:	18ffffc4 	addi	r3,r3,-1
 8003fc8:	28ca703a 	and	r5,r5,r3
 8003fcc:	003fc206 	br	8003ed8 <__alt_data_end+0xfc003ed8>
 8003fd0:	01003c0e 	bge	zero,r4,80040c4 <__subsf3+0x288>
 8003fd4:	30002126 	beq	r6,zero,800405c <__subsf3+0x220>
 8003fd8:	01403fc4 	movi	r5,255
 8003fdc:	817fb026 	beq	r16,r5,8003ea0 <__alt_data_end+0xfc003ea0>
 8003fe0:	39c10034 	orhi	r7,r7,1024
 8003fe4:	014006c4 	movi	r5,27
 8003fe8:	29007416 	blt	r5,r4,80041bc <__subsf3+0x380>
 8003fec:	01400804 	movi	r5,32
 8003ff0:	290bc83a 	sub	r5,r5,r4
 8003ff4:	394a983a 	sll	r5,r7,r5
 8003ff8:	390ed83a 	srl	r7,r7,r4
 8003ffc:	2808c03a 	cmpne	r4,r5,zero
 8004000:	390eb03a 	or	r7,r7,r4
 8004004:	19c7883a 	add	r3,r3,r7
 8004008:	1901002c 	andhi	r4,r3,1024
 800400c:	20003826 	beq	r4,zero,80040f0 <__subsf3+0x2b4>
 8004010:	84000044 	addi	r16,r16,1
 8004014:	01003fc4 	movi	r4,255
 8004018:	81005426 	beq	r16,r4,800416c <__subsf3+0x330>
 800401c:	1023883a 	mov	r17,r2
 8004020:	00bf0034 	movhi	r2,64512
 8004024:	10bfffc4 	addi	r2,r2,-1
 8004028:	1900004c 	andi	r4,r3,1
 800402c:	1886703a 	and	r3,r3,r2
 8004030:	1806d07a 	srli	r3,r3,1
 8004034:	1906b03a 	or	r3,r3,r4
 8004038:	003f9906 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 800403c:	383f9226 	beq	r7,zero,8003e88 <__alt_data_end+0xfc003e88>
 8004040:	10803fcc 	andi	r2,r2,255
 8004044:	003f9106 	br	8003e8c <__alt_data_end+0xfc003e8c>
 8004048:	213fffc4 	addi	r4,r4,-1
 800404c:	203fbc26 	beq	r4,zero,8003f40 <__alt_data_end+0xfc003f40>
 8004050:	00803fc4 	movi	r2,255
 8004054:	80bfb21e 	bne	r16,r2,8003f20 <__alt_data_end+0xfc003f20>
 8004058:	003f9106 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 800405c:	383f9026 	beq	r7,zero,8003ea0 <__alt_data_end+0xfc003ea0>
 8004060:	213fffc4 	addi	r4,r4,-1
 8004064:	203fe726 	beq	r4,zero,8004004 <__alt_data_end+0xfc004004>
 8004068:	01403fc4 	movi	r5,255
 800406c:	817fdd1e 	bne	r16,r5,8003fe4 <__alt_data_end+0xfc003fe4>
 8004070:	003f8b06 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004074:	2000221e 	bne	r4,zero,8004100 <__subsf3+0x2c4>
 8004078:	81000044 	addi	r4,r16,1
 800407c:	21003fcc 	andi	r4,r4,255
 8004080:	01400044 	movi	r5,1
 8004084:	2900470e 	bge	r5,r4,80041a4 <__subsf3+0x368>
 8004088:	19e5c83a 	sub	r18,r3,r7
 800408c:	9141002c 	andhi	r5,r18,1024
 8004090:	28002d26 	beq	r5,zero,8004148 <__subsf3+0x30c>
 8004094:	38e5c83a 	sub	r18,r7,r3
 8004098:	1023883a 	mov	r17,r2
 800409c:	003fae06 	br	8003f58 <__alt_data_end+0xfc003f58>
 80040a0:	8880004c 	andi	r2,r17,1
 80040a4:	043fffc4 	movi	r16,-1
 80040a8:	000b883a 	mov	r5,zero
 80040ac:	003f8a06 	br	8003ed8 <__alt_data_end+0xfc003ed8>
 80040b0:	00ff0034 	movhi	r3,64512
 80040b4:	18ffffc4 	addi	r3,r3,-1
 80040b8:	80a1c83a 	sub	r16,r16,r2
 80040bc:	90c6703a 	and	r3,r18,r3
 80040c0:	003f7706 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 80040c4:	2000431e 	bne	r4,zero,80041d4 <__subsf3+0x398>
 80040c8:	81000044 	addi	r4,r16,1
 80040cc:	21803fcc 	andi	r6,r4,255
 80040d0:	01400044 	movi	r5,1
 80040d4:	2980280e 	bge	r5,r6,8004178 <__subsf3+0x33c>
 80040d8:	01403fc4 	movi	r5,255
 80040dc:	21402326 	beq	r4,r5,800416c <__subsf3+0x330>
 80040e0:	19c7883a 	add	r3,r3,r7
 80040e4:	1806d07a 	srli	r3,r3,1
 80040e8:	2021883a 	mov	r16,r4
 80040ec:	003f6c06 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 80040f0:	1023883a 	mov	r17,r2
 80040f4:	003fa906 	br	8003f9c <__alt_data_end+0xfc003f9c>
 80040f8:	01c00044 	movi	r7,1
 80040fc:	003f9006 	br	8003f40 <__alt_data_end+0xfc003f40>
 8004100:	8000151e 	bne	r16,zero,8004158 <__subsf3+0x31c>
 8004104:	18002f26 	beq	r3,zero,80041c4 <__subsf3+0x388>
 8004108:	0108303a 	nor	r4,zero,r4
 800410c:	20000a26 	beq	r4,zero,8004138 <__subsf3+0x2fc>
 8004110:	01403fc4 	movi	r5,255
 8004114:	31402b26 	beq	r6,r5,80041c4 <__subsf3+0x388>
 8004118:	014006c4 	movi	r5,27
 800411c:	29006e16 	blt	r5,r4,80042d8 <__subsf3+0x49c>
 8004120:	01400804 	movi	r5,32
 8004124:	290bc83a 	sub	r5,r5,r4
 8004128:	194a983a 	sll	r5,r3,r5
 800412c:	1908d83a 	srl	r4,r3,r4
 8004130:	2806c03a 	cmpne	r3,r5,zero
 8004134:	20c6b03a 	or	r3,r4,r3
 8004138:	38c7c83a 	sub	r3,r7,r3
 800413c:	3021883a 	mov	r16,r6
 8004140:	1023883a 	mov	r17,r2
 8004144:	003f7f06 	br	8003f44 <__alt_data_end+0xfc003f44>
 8004148:	903f831e 	bne	r18,zero,8003f58 <__alt_data_end+0xfc003f58>
 800414c:	0005883a 	mov	r2,zero
 8004150:	0021883a 	mov	r16,zero
 8004154:	003f9a06 	br	8003fc0 <__alt_data_end+0xfc003fc0>
 8004158:	01403fc4 	movi	r5,255
 800415c:	31401926 	beq	r6,r5,80041c4 <__subsf3+0x388>
 8004160:	0109c83a 	sub	r4,zero,r4
 8004164:	18c10034 	orhi	r3,r3,1024
 8004168:	003feb06 	br	8004118 <__alt_data_end+0xfc004118>
 800416c:	043fffc4 	movi	r16,-1
 8004170:	000b883a 	mov	r5,zero
 8004174:	003f5806 	br	8003ed8 <__alt_data_end+0xfc003ed8>
 8004178:	8000481e 	bne	r16,zero,800429c <__subsf3+0x460>
 800417c:	18006226 	beq	r3,zero,8004308 <__subsf3+0x4cc>
 8004180:	383f4726 	beq	r7,zero,8003ea0 <__alt_data_end+0xfc003ea0>
 8004184:	19c7883a 	add	r3,r3,r7
 8004188:	1881002c 	andhi	r2,r3,1024
 800418c:	103f8326 	beq	r2,zero,8003f9c <__alt_data_end+0xfc003f9c>
 8004190:	00bf0034 	movhi	r2,64512
 8004194:	10bfffc4 	addi	r2,r2,-1
 8004198:	2821883a 	mov	r16,r5
 800419c:	1886703a 	and	r3,r3,r2
 80041a0:	003f3f06 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 80041a4:	80001c1e 	bne	r16,zero,8004218 <__subsf3+0x3dc>
 80041a8:	1800261e 	bne	r3,zero,8004244 <__subsf3+0x408>
 80041ac:	38004c26 	beq	r7,zero,80042e0 <__subsf3+0x4a4>
 80041b0:	3807883a 	mov	r3,r7
 80041b4:	1023883a 	mov	r17,r2
 80041b8:	003f3906 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 80041bc:	01c00044 	movi	r7,1
 80041c0:	003f9006 	br	8004004 <__alt_data_end+0xfc004004>
 80041c4:	3807883a 	mov	r3,r7
 80041c8:	3021883a 	mov	r16,r6
 80041cc:	1023883a 	mov	r17,r2
 80041d0:	003f3306 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 80041d4:	8000161e 	bne	r16,zero,8004230 <__subsf3+0x3f4>
 80041d8:	18002d26 	beq	r3,zero,8004290 <__subsf3+0x454>
 80041dc:	0108303a 	nor	r4,zero,r4
 80041e0:	20000a26 	beq	r4,zero,800420c <__subsf3+0x3d0>
 80041e4:	01403fc4 	movi	r5,255
 80041e8:	31402926 	beq	r6,r5,8004290 <__subsf3+0x454>
 80041ec:	014006c4 	movi	r5,27
 80041f0:	29004716 	blt	r5,r4,8004310 <__subsf3+0x4d4>
 80041f4:	01400804 	movi	r5,32
 80041f8:	290bc83a 	sub	r5,r5,r4
 80041fc:	194a983a 	sll	r5,r3,r5
 8004200:	1908d83a 	srl	r4,r3,r4
 8004204:	2806c03a 	cmpne	r3,r5,zero
 8004208:	20c6b03a 	or	r3,r4,r3
 800420c:	19c7883a 	add	r3,r3,r7
 8004210:	3021883a 	mov	r16,r6
 8004214:	003f7c06 	br	8004008 <__alt_data_end+0xfc004008>
 8004218:	1800111e 	bne	r3,zero,8004260 <__subsf3+0x424>
 800421c:	38003326 	beq	r7,zero,80042ec <__subsf3+0x4b0>
 8004220:	3807883a 	mov	r3,r7
 8004224:	1023883a 	mov	r17,r2
 8004228:	04003fc4 	movi	r16,255
 800422c:	003f1c06 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004230:	01403fc4 	movi	r5,255
 8004234:	31401626 	beq	r6,r5,8004290 <__subsf3+0x454>
 8004238:	0109c83a 	sub	r4,zero,r4
 800423c:	18c10034 	orhi	r3,r3,1024
 8004240:	003fea06 	br	80041ec <__alt_data_end+0xfc0041ec>
 8004244:	383f1626 	beq	r7,zero,8003ea0 <__alt_data_end+0xfc003ea0>
 8004248:	19c9c83a 	sub	r4,r3,r7
 800424c:	2141002c 	andhi	r5,r4,1024
 8004250:	283f5026 	beq	r5,zero,8003f94 <__alt_data_end+0xfc003f94>
 8004254:	38c7c83a 	sub	r3,r7,r3
 8004258:	1023883a 	mov	r17,r2
 800425c:	003f1006 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004260:	38001b26 	beq	r7,zero,80042d0 <__subsf3+0x494>
 8004264:	1806d0fa 	srli	r3,r3,3
 8004268:	1900102c 	andhi	r4,r3,64
 800426c:	20000526 	beq	r4,zero,8004284 <__subsf3+0x448>
 8004270:	380ed0fa 	srli	r7,r7,3
 8004274:	3900102c 	andhi	r4,r7,64
 8004278:	2000021e 	bne	r4,zero,8004284 <__subsf3+0x448>
 800427c:	3807883a 	mov	r3,r7
 8004280:	1023883a 	mov	r17,r2
 8004284:	180690fa 	slli	r3,r3,3
 8004288:	04003fc4 	movi	r16,255
 800428c:	003f0406 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004290:	3807883a 	mov	r3,r7
 8004294:	3021883a 	mov	r16,r6
 8004298:	003f0106 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 800429c:	18001726 	beq	r3,zero,80042fc <__subsf3+0x4c0>
 80042a0:	38000b26 	beq	r7,zero,80042d0 <__subsf3+0x494>
 80042a4:	1806d0fa 	srli	r3,r3,3
 80042a8:	1900102c 	andhi	r4,r3,64
 80042ac:	20000426 	beq	r4,zero,80042c0 <__subsf3+0x484>
 80042b0:	380ed0fa 	srli	r7,r7,3
 80042b4:	3900102c 	andhi	r4,r7,64
 80042b8:	2000011e 	bne	r4,zero,80042c0 <__subsf3+0x484>
 80042bc:	3807883a 	mov	r3,r7
 80042c0:	180690fa 	slli	r3,r3,3
 80042c4:	1023883a 	mov	r17,r2
 80042c8:	04003fc4 	movi	r16,255
 80042cc:	003ef406 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 80042d0:	04003fc4 	movi	r16,255
 80042d4:	003ef206 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 80042d8:	00c00044 	movi	r3,1
 80042dc:	003f9606 	br	8004138 <__alt_data_end+0xfc004138>
 80042e0:	000b883a 	mov	r5,zero
 80042e4:	0005883a 	mov	r2,zero
 80042e8:	003f3506 	br	8003fc0 <__alt_data_end+0xfc003fc0>
 80042ec:	01402034 	movhi	r5,128
 80042f0:	297fffc4 	addi	r5,r5,-1
 80042f4:	0005883a 	mov	r2,zero
 80042f8:	003f2f06 	br	8003fb8 <__alt_data_end+0xfc003fb8>
 80042fc:	3807883a 	mov	r3,r7
 8004300:	04003fc4 	movi	r16,255
 8004304:	003ee606 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004308:	3807883a 	mov	r3,r7
 800430c:	003ee406 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004310:	00c00044 	movi	r3,1
 8004314:	003fbd06 	br	800420c <__alt_data_end+0xfc00420c>
 8004318:	0005883a 	mov	r2,zero
 800431c:	003f2806 	br	8003fc0 <__alt_data_end+0xfc003fc0>

08004320 <__fixsfsi>:
 8004320:	200ad5fa 	srli	r5,r4,23
 8004324:	00c02034 	movhi	r3,128
 8004328:	18ffffc4 	addi	r3,r3,-1
 800432c:	29403fcc 	andi	r5,r5,255
 8004330:	00801f84 	movi	r2,126
 8004334:	1906703a 	and	r3,r3,r4
 8004338:	2008d7fa 	srli	r4,r4,31
 800433c:	11400e0e 	bge	r2,r5,8004378 <__fixsfsi+0x58>
 8004340:	00802744 	movi	r2,157
 8004344:	11400816 	blt	r2,r5,8004368 <__fixsfsi+0x48>
 8004348:	00802544 	movi	r2,149
 800434c:	18c02034 	orhi	r3,r3,128
 8004350:	11400b0e 	bge	r2,r5,8004380 <__fixsfsi+0x60>
 8004354:	28bfda84 	addi	r2,r5,-150
 8004358:	1884983a 	sll	r2,r3,r2
 800435c:	20000726 	beq	r4,zero,800437c <__fixsfsi+0x5c>
 8004360:	0085c83a 	sub	r2,zero,r2
 8004364:	f800283a 	ret
 8004368:	00a00034 	movhi	r2,32768
 800436c:	10bfffc4 	addi	r2,r2,-1
 8004370:	2085883a 	add	r2,r4,r2
 8004374:	f800283a 	ret
 8004378:	0005883a 	mov	r2,zero
 800437c:	f800283a 	ret
 8004380:	00802584 	movi	r2,150
 8004384:	1145c83a 	sub	r2,r2,r5
 8004388:	1884d83a 	srl	r2,r3,r2
 800438c:	003ff306 	br	800435c <__alt_data_end+0xfc00435c>

08004390 <__floatsisf>:
 8004390:	defffd04 	addi	sp,sp,-12
 8004394:	dfc00215 	stw	ra,8(sp)
 8004398:	dc400115 	stw	r17,4(sp)
 800439c:	dc000015 	stw	r16,0(sp)
 80043a0:	20003526 	beq	r4,zero,8004478 <__floatsisf+0xe8>
 80043a4:	2021883a 	mov	r16,r4
 80043a8:	2022d7fa 	srli	r17,r4,31
 80043ac:	20003616 	blt	r4,zero,8004488 <__floatsisf+0xf8>
 80043b0:	8009883a 	mov	r4,r16
 80043b4:	8006cc80 	call	8006cc8 <__clzsi2>
 80043b8:	00c02784 	movi	r3,158
 80043bc:	1887c83a 	sub	r3,r3,r2
 80043c0:	01002584 	movi	r4,150
 80043c4:	20c01416 	blt	r4,r3,8004418 <__floatsisf+0x88>
 80043c8:	20c9c83a 	sub	r4,r4,r3
 80043cc:	8120983a 	sll	r16,r16,r4
 80043d0:	00802034 	movhi	r2,128
 80043d4:	10bfffc4 	addi	r2,r2,-1
 80043d8:	8809883a 	mov	r4,r17
 80043dc:	80a0703a 	and	r16,r16,r2
 80043e0:	18803fcc 	andi	r2,r3,255
 80043e4:	100695fa 	slli	r3,r2,23
 80043e8:	20803fcc 	andi	r2,r4,255
 80043ec:	100897fa 	slli	r4,r2,31
 80043f0:	00802034 	movhi	r2,128
 80043f4:	10bfffc4 	addi	r2,r2,-1
 80043f8:	8084703a 	and	r2,r16,r2
 80043fc:	10c4b03a 	or	r2,r2,r3
 8004400:	1104b03a 	or	r2,r2,r4
 8004404:	dfc00217 	ldw	ra,8(sp)
 8004408:	dc400117 	ldw	r17,4(sp)
 800440c:	dc000017 	ldw	r16,0(sp)
 8004410:	dec00304 	addi	sp,sp,12
 8004414:	f800283a 	ret
 8004418:	01002644 	movi	r4,153
 800441c:	20c01c16 	blt	r4,r3,8004490 <__floatsisf+0x100>
 8004420:	20c9c83a 	sub	r4,r4,r3
 8004424:	8120983a 	sll	r16,r16,r4
 8004428:	013f0034 	movhi	r4,64512
 800442c:	213fffc4 	addi	r4,r4,-1
 8004430:	814001cc 	andi	r5,r16,7
 8004434:	8108703a 	and	r4,r16,r4
 8004438:	28000426 	beq	r5,zero,800444c <__floatsisf+0xbc>
 800443c:	840003cc 	andi	r16,r16,15
 8004440:	01400104 	movi	r5,4
 8004444:	81400126 	beq	r16,r5,800444c <__floatsisf+0xbc>
 8004448:	2149883a 	add	r4,r4,r5
 800444c:	2141002c 	andhi	r5,r4,1024
 8004450:	28000526 	beq	r5,zero,8004468 <__floatsisf+0xd8>
 8004454:	00c027c4 	movi	r3,159
 8004458:	1887c83a 	sub	r3,r3,r2
 800445c:	00bf0034 	movhi	r2,64512
 8004460:	10bfffc4 	addi	r2,r2,-1
 8004464:	2088703a 	and	r4,r4,r2
 8004468:	202091ba 	slli	r16,r4,6
 800446c:	8809883a 	mov	r4,r17
 8004470:	8020d27a 	srli	r16,r16,9
 8004474:	003fda06 	br	80043e0 <__alt_data_end+0xfc0043e0>
 8004478:	0009883a 	mov	r4,zero
 800447c:	0007883a 	mov	r3,zero
 8004480:	0021883a 	mov	r16,zero
 8004484:	003fd606 	br	80043e0 <__alt_data_end+0xfc0043e0>
 8004488:	0121c83a 	sub	r16,zero,r4
 800448c:	003fc806 	br	80043b0 <__alt_data_end+0xfc0043b0>
 8004490:	01002e44 	movi	r4,185
 8004494:	20c9c83a 	sub	r4,r4,r3
 8004498:	01400144 	movi	r5,5
 800449c:	8108983a 	sll	r4,r16,r4
 80044a0:	288bc83a 	sub	r5,r5,r2
 80044a4:	8160d83a 	srl	r16,r16,r5
 80044a8:	2008c03a 	cmpne	r4,r4,zero
 80044ac:	8120b03a 	or	r16,r16,r4
 80044b0:	003fdd06 	br	8004428 <__alt_data_end+0xfc004428>

080044b4 <__adddf3>:
 80044b4:	02c00434 	movhi	r11,16
 80044b8:	5affffc4 	addi	r11,r11,-1
 80044bc:	2806d7fa 	srli	r3,r5,31
 80044c0:	2ad4703a 	and	r10,r5,r11
 80044c4:	3ad2703a 	and	r9,r7,r11
 80044c8:	3804d53a 	srli	r2,r7,20
 80044cc:	3018d77a 	srli	r12,r6,29
 80044d0:	280ad53a 	srli	r5,r5,20
 80044d4:	501490fa 	slli	r10,r10,3
 80044d8:	2010d77a 	srli	r8,r4,29
 80044dc:	481290fa 	slli	r9,r9,3
 80044e0:	380ed7fa 	srli	r7,r7,31
 80044e4:	defffb04 	addi	sp,sp,-20
 80044e8:	dc800215 	stw	r18,8(sp)
 80044ec:	dc400115 	stw	r17,4(sp)
 80044f0:	dc000015 	stw	r16,0(sp)
 80044f4:	dfc00415 	stw	ra,16(sp)
 80044f8:	dcc00315 	stw	r19,12(sp)
 80044fc:	1c803fcc 	andi	r18,r3,255
 8004500:	2c01ffcc 	andi	r16,r5,2047
 8004504:	5210b03a 	or	r8,r10,r8
 8004508:	202290fa 	slli	r17,r4,3
 800450c:	1081ffcc 	andi	r2,r2,2047
 8004510:	4b12b03a 	or	r9,r9,r12
 8004514:	300c90fa 	slli	r6,r6,3
 8004518:	91c07526 	beq	r18,r7,80046f0 <__adddf3+0x23c>
 800451c:	8087c83a 	sub	r3,r16,r2
 8004520:	00c0ab0e 	bge	zero,r3,80047d0 <__adddf3+0x31c>
 8004524:	10002a1e 	bne	r2,zero,80045d0 <__adddf3+0x11c>
 8004528:	4984b03a 	or	r2,r9,r6
 800452c:	1000961e 	bne	r2,zero,8004788 <__adddf3+0x2d4>
 8004530:	888001cc 	andi	r2,r17,7
 8004534:	10000726 	beq	r2,zero,8004554 <__adddf3+0xa0>
 8004538:	888003cc 	andi	r2,r17,15
 800453c:	00c00104 	movi	r3,4
 8004540:	10c00426 	beq	r2,r3,8004554 <__adddf3+0xa0>
 8004544:	88c7883a 	add	r3,r17,r3
 8004548:	1c63803a 	cmpltu	r17,r3,r17
 800454c:	4451883a 	add	r8,r8,r17
 8004550:	1823883a 	mov	r17,r3
 8004554:	4080202c 	andhi	r2,r8,128
 8004558:	10005926 	beq	r2,zero,80046c0 <__adddf3+0x20c>
 800455c:	84000044 	addi	r16,r16,1
 8004560:	0081ffc4 	movi	r2,2047
 8004564:	8080ba26 	beq	r16,r2,8004850 <__adddf3+0x39c>
 8004568:	00bfe034 	movhi	r2,65408
 800456c:	10bfffc4 	addi	r2,r2,-1
 8004570:	4090703a 	and	r8,r8,r2
 8004574:	4004977a 	slli	r2,r8,29
 8004578:	4010927a 	slli	r8,r8,9
 800457c:	8822d0fa 	srli	r17,r17,3
 8004580:	8401ffcc 	andi	r16,r16,2047
 8004584:	4010d33a 	srli	r8,r8,12
 8004588:	9007883a 	mov	r3,r18
 800458c:	1444b03a 	or	r2,r2,r17
 8004590:	8401ffcc 	andi	r16,r16,2047
 8004594:	8020953a 	slli	r16,r16,20
 8004598:	18c03fcc 	andi	r3,r3,255
 800459c:	01000434 	movhi	r4,16
 80045a0:	213fffc4 	addi	r4,r4,-1
 80045a4:	180697fa 	slli	r3,r3,31
 80045a8:	4110703a 	and	r8,r8,r4
 80045ac:	4410b03a 	or	r8,r8,r16
 80045b0:	40c6b03a 	or	r3,r8,r3
 80045b4:	dfc00417 	ldw	ra,16(sp)
 80045b8:	dcc00317 	ldw	r19,12(sp)
 80045bc:	dc800217 	ldw	r18,8(sp)
 80045c0:	dc400117 	ldw	r17,4(sp)
 80045c4:	dc000017 	ldw	r16,0(sp)
 80045c8:	dec00504 	addi	sp,sp,20
 80045cc:	f800283a 	ret
 80045d0:	0081ffc4 	movi	r2,2047
 80045d4:	80bfd626 	beq	r16,r2,8004530 <__alt_data_end+0xfc004530>
 80045d8:	4a402034 	orhi	r9,r9,128
 80045dc:	00800e04 	movi	r2,56
 80045e0:	10c09f16 	blt	r2,r3,8004860 <__adddf3+0x3ac>
 80045e4:	008007c4 	movi	r2,31
 80045e8:	10c0c216 	blt	r2,r3,80048f4 <__adddf3+0x440>
 80045ec:	00800804 	movi	r2,32
 80045f0:	10c5c83a 	sub	r2,r2,r3
 80045f4:	488a983a 	sll	r5,r9,r2
 80045f8:	30c8d83a 	srl	r4,r6,r3
 80045fc:	3084983a 	sll	r2,r6,r2
 8004600:	48c6d83a 	srl	r3,r9,r3
 8004604:	290cb03a 	or	r6,r5,r4
 8004608:	1004c03a 	cmpne	r2,r2,zero
 800460c:	308cb03a 	or	r6,r6,r2
 8004610:	898dc83a 	sub	r6,r17,r6
 8004614:	89a3803a 	cmpltu	r17,r17,r6
 8004618:	40d1c83a 	sub	r8,r8,r3
 800461c:	4451c83a 	sub	r8,r8,r17
 8004620:	3023883a 	mov	r17,r6
 8004624:	4080202c 	andhi	r2,r8,128
 8004628:	10002326 	beq	r2,zero,80046b8 <__adddf3+0x204>
 800462c:	04c02034 	movhi	r19,128
 8004630:	9cffffc4 	addi	r19,r19,-1
 8004634:	44e6703a 	and	r19,r8,r19
 8004638:	98007626 	beq	r19,zero,8004814 <__adddf3+0x360>
 800463c:	9809883a 	mov	r4,r19
 8004640:	8006cc80 	call	8006cc8 <__clzsi2>
 8004644:	10fffe04 	addi	r3,r2,-8
 8004648:	010007c4 	movi	r4,31
 800464c:	20c07716 	blt	r4,r3,800482c <__adddf3+0x378>
 8004650:	00800804 	movi	r2,32
 8004654:	10c5c83a 	sub	r2,r2,r3
 8004658:	8884d83a 	srl	r2,r17,r2
 800465c:	98d0983a 	sll	r8,r19,r3
 8004660:	88e2983a 	sll	r17,r17,r3
 8004664:	1204b03a 	or	r2,r2,r8
 8004668:	1c007416 	blt	r3,r16,800483c <__adddf3+0x388>
 800466c:	1c21c83a 	sub	r16,r3,r16
 8004670:	82000044 	addi	r8,r16,1
 8004674:	00c007c4 	movi	r3,31
 8004678:	1a009116 	blt	r3,r8,80048c0 <__adddf3+0x40c>
 800467c:	00c00804 	movi	r3,32
 8004680:	1a07c83a 	sub	r3,r3,r8
 8004684:	8a08d83a 	srl	r4,r17,r8
 8004688:	88e2983a 	sll	r17,r17,r3
 800468c:	10c6983a 	sll	r3,r2,r3
 8004690:	1210d83a 	srl	r8,r2,r8
 8004694:	8804c03a 	cmpne	r2,r17,zero
 8004698:	1906b03a 	or	r3,r3,r4
 800469c:	18a2b03a 	or	r17,r3,r2
 80046a0:	0021883a 	mov	r16,zero
 80046a4:	003fa206 	br	8004530 <__alt_data_end+0xfc004530>
 80046a8:	1890b03a 	or	r8,r3,r2
 80046ac:	40017d26 	beq	r8,zero,8004ca4 <__adddf3+0x7f0>
 80046b0:	1011883a 	mov	r8,r2
 80046b4:	1823883a 	mov	r17,r3
 80046b8:	888001cc 	andi	r2,r17,7
 80046bc:	103f9e1e 	bne	r2,zero,8004538 <__alt_data_end+0xfc004538>
 80046c0:	4004977a 	slli	r2,r8,29
 80046c4:	8822d0fa 	srli	r17,r17,3
 80046c8:	4010d0fa 	srli	r8,r8,3
 80046cc:	9007883a 	mov	r3,r18
 80046d0:	1444b03a 	or	r2,r2,r17
 80046d4:	0101ffc4 	movi	r4,2047
 80046d8:	81002426 	beq	r16,r4,800476c <__adddf3+0x2b8>
 80046dc:	8120703a 	and	r16,r16,r4
 80046e0:	01000434 	movhi	r4,16
 80046e4:	213fffc4 	addi	r4,r4,-1
 80046e8:	4110703a 	and	r8,r8,r4
 80046ec:	003fa806 	br	8004590 <__alt_data_end+0xfc004590>
 80046f0:	8089c83a 	sub	r4,r16,r2
 80046f4:	01005e0e 	bge	zero,r4,8004870 <__adddf3+0x3bc>
 80046f8:	10002b26 	beq	r2,zero,80047a8 <__adddf3+0x2f4>
 80046fc:	0081ffc4 	movi	r2,2047
 8004700:	80bf8b26 	beq	r16,r2,8004530 <__alt_data_end+0xfc004530>
 8004704:	4a402034 	orhi	r9,r9,128
 8004708:	00800e04 	movi	r2,56
 800470c:	1100a40e 	bge	r2,r4,80049a0 <__adddf3+0x4ec>
 8004710:	498cb03a 	or	r6,r9,r6
 8004714:	300ac03a 	cmpne	r5,r6,zero
 8004718:	0013883a 	mov	r9,zero
 800471c:	2c4b883a 	add	r5,r5,r17
 8004720:	2c63803a 	cmpltu	r17,r5,r17
 8004724:	4a11883a 	add	r8,r9,r8
 8004728:	8a11883a 	add	r8,r17,r8
 800472c:	2823883a 	mov	r17,r5
 8004730:	4080202c 	andhi	r2,r8,128
 8004734:	103fe026 	beq	r2,zero,80046b8 <__alt_data_end+0xfc0046b8>
 8004738:	84000044 	addi	r16,r16,1
 800473c:	0081ffc4 	movi	r2,2047
 8004740:	8080d226 	beq	r16,r2,8004a8c <__adddf3+0x5d8>
 8004744:	00bfe034 	movhi	r2,65408
 8004748:	10bfffc4 	addi	r2,r2,-1
 800474c:	4090703a 	and	r8,r8,r2
 8004750:	880ad07a 	srli	r5,r17,1
 8004754:	400897fa 	slli	r4,r8,31
 8004758:	88c0004c 	andi	r3,r17,1
 800475c:	28e2b03a 	or	r17,r5,r3
 8004760:	4010d07a 	srli	r8,r8,1
 8004764:	2462b03a 	or	r17,r4,r17
 8004768:	003f7106 	br	8004530 <__alt_data_end+0xfc004530>
 800476c:	4088b03a 	or	r4,r8,r2
 8004770:	20014526 	beq	r4,zero,8004c88 <__adddf3+0x7d4>
 8004774:	01000434 	movhi	r4,16
 8004778:	42000234 	orhi	r8,r8,8
 800477c:	213fffc4 	addi	r4,r4,-1
 8004780:	4110703a 	and	r8,r8,r4
 8004784:	003f8206 	br	8004590 <__alt_data_end+0xfc004590>
 8004788:	18ffffc4 	addi	r3,r3,-1
 800478c:	1800491e 	bne	r3,zero,80048b4 <__adddf3+0x400>
 8004790:	898bc83a 	sub	r5,r17,r6
 8004794:	8963803a 	cmpltu	r17,r17,r5
 8004798:	4251c83a 	sub	r8,r8,r9
 800479c:	4451c83a 	sub	r8,r8,r17
 80047a0:	2823883a 	mov	r17,r5
 80047a4:	003f9f06 	br	8004624 <__alt_data_end+0xfc004624>
 80047a8:	4984b03a 	or	r2,r9,r6
 80047ac:	103f6026 	beq	r2,zero,8004530 <__alt_data_end+0xfc004530>
 80047b0:	213fffc4 	addi	r4,r4,-1
 80047b4:	2000931e 	bne	r4,zero,8004a04 <__adddf3+0x550>
 80047b8:	898d883a 	add	r6,r17,r6
 80047bc:	3463803a 	cmpltu	r17,r6,r17
 80047c0:	4251883a 	add	r8,r8,r9
 80047c4:	8a11883a 	add	r8,r17,r8
 80047c8:	3023883a 	mov	r17,r6
 80047cc:	003fd806 	br	8004730 <__alt_data_end+0xfc004730>
 80047d0:	1800541e 	bne	r3,zero,8004924 <__adddf3+0x470>
 80047d4:	80800044 	addi	r2,r16,1
 80047d8:	1081ffcc 	andi	r2,r2,2047
 80047dc:	00c00044 	movi	r3,1
 80047e0:	1880a00e 	bge	r3,r2,8004a64 <__adddf3+0x5b0>
 80047e4:	8989c83a 	sub	r4,r17,r6
 80047e8:	8905803a 	cmpltu	r2,r17,r4
 80047ec:	4267c83a 	sub	r19,r8,r9
 80047f0:	98a7c83a 	sub	r19,r19,r2
 80047f4:	9880202c 	andhi	r2,r19,128
 80047f8:	10006326 	beq	r2,zero,8004988 <__adddf3+0x4d4>
 80047fc:	3463c83a 	sub	r17,r6,r17
 8004800:	4a07c83a 	sub	r3,r9,r8
 8004804:	344d803a 	cmpltu	r6,r6,r17
 8004808:	19a7c83a 	sub	r19,r3,r6
 800480c:	3825883a 	mov	r18,r7
 8004810:	983f8a1e 	bne	r19,zero,800463c <__alt_data_end+0xfc00463c>
 8004814:	8809883a 	mov	r4,r17
 8004818:	8006cc80 	call	8006cc8 <__clzsi2>
 800481c:	10800804 	addi	r2,r2,32
 8004820:	10fffe04 	addi	r3,r2,-8
 8004824:	010007c4 	movi	r4,31
 8004828:	20ff890e 	bge	r4,r3,8004650 <__alt_data_end+0xfc004650>
 800482c:	10bff604 	addi	r2,r2,-40
 8004830:	8884983a 	sll	r2,r17,r2
 8004834:	0023883a 	mov	r17,zero
 8004838:	1c3f8c0e 	bge	r3,r16,800466c <__alt_data_end+0xfc00466c>
 800483c:	023fe034 	movhi	r8,65408
 8004840:	423fffc4 	addi	r8,r8,-1
 8004844:	80e1c83a 	sub	r16,r16,r3
 8004848:	1210703a 	and	r8,r2,r8
 800484c:	003f3806 	br	8004530 <__alt_data_end+0xfc004530>
 8004850:	9007883a 	mov	r3,r18
 8004854:	0011883a 	mov	r8,zero
 8004858:	0005883a 	mov	r2,zero
 800485c:	003f4c06 	br	8004590 <__alt_data_end+0xfc004590>
 8004860:	498cb03a 	or	r6,r9,r6
 8004864:	300cc03a 	cmpne	r6,r6,zero
 8004868:	0007883a 	mov	r3,zero
 800486c:	003f6806 	br	8004610 <__alt_data_end+0xfc004610>
 8004870:	20009c1e 	bne	r4,zero,8004ae4 <__adddf3+0x630>
 8004874:	80800044 	addi	r2,r16,1
 8004878:	1141ffcc 	andi	r5,r2,2047
 800487c:	01000044 	movi	r4,1
 8004880:	2140670e 	bge	r4,r5,8004a20 <__adddf3+0x56c>
 8004884:	0101ffc4 	movi	r4,2047
 8004888:	11007f26 	beq	r2,r4,8004a88 <__adddf3+0x5d4>
 800488c:	898d883a 	add	r6,r17,r6
 8004890:	4247883a 	add	r3,r8,r9
 8004894:	3451803a 	cmpltu	r8,r6,r17
 8004898:	40d1883a 	add	r8,r8,r3
 800489c:	402297fa 	slli	r17,r8,31
 80048a0:	300cd07a 	srli	r6,r6,1
 80048a4:	4010d07a 	srli	r8,r8,1
 80048a8:	1021883a 	mov	r16,r2
 80048ac:	89a2b03a 	or	r17,r17,r6
 80048b0:	003f1f06 	br	8004530 <__alt_data_end+0xfc004530>
 80048b4:	0081ffc4 	movi	r2,2047
 80048b8:	80bf481e 	bne	r16,r2,80045dc <__alt_data_end+0xfc0045dc>
 80048bc:	003f1c06 	br	8004530 <__alt_data_end+0xfc004530>
 80048c0:	843ff844 	addi	r16,r16,-31
 80048c4:	01000804 	movi	r4,32
 80048c8:	1406d83a 	srl	r3,r2,r16
 80048cc:	41005026 	beq	r8,r4,8004a10 <__adddf3+0x55c>
 80048d0:	01001004 	movi	r4,64
 80048d4:	2211c83a 	sub	r8,r4,r8
 80048d8:	1204983a 	sll	r2,r2,r8
 80048dc:	88a2b03a 	or	r17,r17,r2
 80048e0:	8822c03a 	cmpne	r17,r17,zero
 80048e4:	1c62b03a 	or	r17,r3,r17
 80048e8:	0011883a 	mov	r8,zero
 80048ec:	0021883a 	mov	r16,zero
 80048f0:	003f7106 	br	80046b8 <__alt_data_end+0xfc0046b8>
 80048f4:	193ff804 	addi	r4,r3,-32
 80048f8:	00800804 	movi	r2,32
 80048fc:	4908d83a 	srl	r4,r9,r4
 8004900:	18804526 	beq	r3,r2,8004a18 <__adddf3+0x564>
 8004904:	00801004 	movi	r2,64
 8004908:	10c5c83a 	sub	r2,r2,r3
 800490c:	4886983a 	sll	r3,r9,r2
 8004910:	198cb03a 	or	r6,r3,r6
 8004914:	300cc03a 	cmpne	r6,r6,zero
 8004918:	218cb03a 	or	r6,r4,r6
 800491c:	0007883a 	mov	r3,zero
 8004920:	003f3b06 	br	8004610 <__alt_data_end+0xfc004610>
 8004924:	80002a26 	beq	r16,zero,80049d0 <__adddf3+0x51c>
 8004928:	0101ffc4 	movi	r4,2047
 800492c:	11006826 	beq	r2,r4,8004ad0 <__adddf3+0x61c>
 8004930:	00c7c83a 	sub	r3,zero,r3
 8004934:	42002034 	orhi	r8,r8,128
 8004938:	01000e04 	movi	r4,56
 800493c:	20c07c16 	blt	r4,r3,8004b30 <__adddf3+0x67c>
 8004940:	010007c4 	movi	r4,31
 8004944:	20c0da16 	blt	r4,r3,8004cb0 <__adddf3+0x7fc>
 8004948:	01000804 	movi	r4,32
 800494c:	20c9c83a 	sub	r4,r4,r3
 8004950:	4114983a 	sll	r10,r8,r4
 8004954:	88cad83a 	srl	r5,r17,r3
 8004958:	8908983a 	sll	r4,r17,r4
 800495c:	40c6d83a 	srl	r3,r8,r3
 8004960:	5162b03a 	or	r17,r10,r5
 8004964:	2008c03a 	cmpne	r4,r4,zero
 8004968:	8922b03a 	or	r17,r17,r4
 800496c:	3463c83a 	sub	r17,r6,r17
 8004970:	48c7c83a 	sub	r3,r9,r3
 8004974:	344d803a 	cmpltu	r6,r6,r17
 8004978:	1991c83a 	sub	r8,r3,r6
 800497c:	1021883a 	mov	r16,r2
 8004980:	3825883a 	mov	r18,r7
 8004984:	003f2706 	br	8004624 <__alt_data_end+0xfc004624>
 8004988:	24d0b03a 	or	r8,r4,r19
 800498c:	40001b1e 	bne	r8,zero,80049fc <__adddf3+0x548>
 8004990:	0005883a 	mov	r2,zero
 8004994:	0007883a 	mov	r3,zero
 8004998:	0021883a 	mov	r16,zero
 800499c:	003f4d06 	br	80046d4 <__alt_data_end+0xfc0046d4>
 80049a0:	008007c4 	movi	r2,31
 80049a4:	11003c16 	blt	r2,r4,8004a98 <__adddf3+0x5e4>
 80049a8:	00800804 	movi	r2,32
 80049ac:	1105c83a 	sub	r2,r2,r4
 80049b0:	488e983a 	sll	r7,r9,r2
 80049b4:	310ad83a 	srl	r5,r6,r4
 80049b8:	3084983a 	sll	r2,r6,r2
 80049bc:	4912d83a 	srl	r9,r9,r4
 80049c0:	394ab03a 	or	r5,r7,r5
 80049c4:	1004c03a 	cmpne	r2,r2,zero
 80049c8:	288ab03a 	or	r5,r5,r2
 80049cc:	003f5306 	br	800471c <__alt_data_end+0xfc00471c>
 80049d0:	4448b03a 	or	r4,r8,r17
 80049d4:	20003e26 	beq	r4,zero,8004ad0 <__adddf3+0x61c>
 80049d8:	00c6303a 	nor	r3,zero,r3
 80049dc:	18003a1e 	bne	r3,zero,8004ac8 <__adddf3+0x614>
 80049e0:	3463c83a 	sub	r17,r6,r17
 80049e4:	4a07c83a 	sub	r3,r9,r8
 80049e8:	344d803a 	cmpltu	r6,r6,r17
 80049ec:	1991c83a 	sub	r8,r3,r6
 80049f0:	1021883a 	mov	r16,r2
 80049f4:	3825883a 	mov	r18,r7
 80049f8:	003f0a06 	br	8004624 <__alt_data_end+0xfc004624>
 80049fc:	2023883a 	mov	r17,r4
 8004a00:	003f0d06 	br	8004638 <__alt_data_end+0xfc004638>
 8004a04:	0081ffc4 	movi	r2,2047
 8004a08:	80bf3f1e 	bne	r16,r2,8004708 <__alt_data_end+0xfc004708>
 8004a0c:	003ec806 	br	8004530 <__alt_data_end+0xfc004530>
 8004a10:	0005883a 	mov	r2,zero
 8004a14:	003fb106 	br	80048dc <__alt_data_end+0xfc0048dc>
 8004a18:	0007883a 	mov	r3,zero
 8004a1c:	003fbc06 	br	8004910 <__alt_data_end+0xfc004910>
 8004a20:	4444b03a 	or	r2,r8,r17
 8004a24:	8000871e 	bne	r16,zero,8004c44 <__adddf3+0x790>
 8004a28:	1000ba26 	beq	r2,zero,8004d14 <__adddf3+0x860>
 8004a2c:	4984b03a 	or	r2,r9,r6
 8004a30:	103ebf26 	beq	r2,zero,8004530 <__alt_data_end+0xfc004530>
 8004a34:	8985883a 	add	r2,r17,r6
 8004a38:	4247883a 	add	r3,r8,r9
 8004a3c:	1451803a 	cmpltu	r8,r2,r17
 8004a40:	40d1883a 	add	r8,r8,r3
 8004a44:	40c0202c 	andhi	r3,r8,128
 8004a48:	1023883a 	mov	r17,r2
 8004a4c:	183f1a26 	beq	r3,zero,80046b8 <__alt_data_end+0xfc0046b8>
 8004a50:	00bfe034 	movhi	r2,65408
 8004a54:	10bfffc4 	addi	r2,r2,-1
 8004a58:	2021883a 	mov	r16,r4
 8004a5c:	4090703a 	and	r8,r8,r2
 8004a60:	003eb306 	br	8004530 <__alt_data_end+0xfc004530>
 8004a64:	4444b03a 	or	r2,r8,r17
 8004a68:	8000291e 	bne	r16,zero,8004b10 <__adddf3+0x65c>
 8004a6c:	10004b1e 	bne	r2,zero,8004b9c <__adddf3+0x6e8>
 8004a70:	4990b03a 	or	r8,r9,r6
 8004a74:	40008b26 	beq	r8,zero,8004ca4 <__adddf3+0x7f0>
 8004a78:	4811883a 	mov	r8,r9
 8004a7c:	3023883a 	mov	r17,r6
 8004a80:	3825883a 	mov	r18,r7
 8004a84:	003eaa06 	br	8004530 <__alt_data_end+0xfc004530>
 8004a88:	1021883a 	mov	r16,r2
 8004a8c:	0011883a 	mov	r8,zero
 8004a90:	0005883a 	mov	r2,zero
 8004a94:	003f0f06 	br	80046d4 <__alt_data_end+0xfc0046d4>
 8004a98:	217ff804 	addi	r5,r4,-32
 8004a9c:	00800804 	movi	r2,32
 8004aa0:	494ad83a 	srl	r5,r9,r5
 8004aa4:	20807d26 	beq	r4,r2,8004c9c <__adddf3+0x7e8>
 8004aa8:	00801004 	movi	r2,64
 8004aac:	1109c83a 	sub	r4,r2,r4
 8004ab0:	4912983a 	sll	r9,r9,r4
 8004ab4:	498cb03a 	or	r6,r9,r6
 8004ab8:	300cc03a 	cmpne	r6,r6,zero
 8004abc:	298ab03a 	or	r5,r5,r6
 8004ac0:	0013883a 	mov	r9,zero
 8004ac4:	003f1506 	br	800471c <__alt_data_end+0xfc00471c>
 8004ac8:	0101ffc4 	movi	r4,2047
 8004acc:	113f9a1e 	bne	r2,r4,8004938 <__alt_data_end+0xfc004938>
 8004ad0:	4811883a 	mov	r8,r9
 8004ad4:	3023883a 	mov	r17,r6
 8004ad8:	1021883a 	mov	r16,r2
 8004adc:	3825883a 	mov	r18,r7
 8004ae0:	003e9306 	br	8004530 <__alt_data_end+0xfc004530>
 8004ae4:	8000161e 	bne	r16,zero,8004b40 <__adddf3+0x68c>
 8004ae8:	444ab03a 	or	r5,r8,r17
 8004aec:	28005126 	beq	r5,zero,8004c34 <__adddf3+0x780>
 8004af0:	0108303a 	nor	r4,zero,r4
 8004af4:	20004d1e 	bne	r4,zero,8004c2c <__adddf3+0x778>
 8004af8:	89a3883a 	add	r17,r17,r6
 8004afc:	4253883a 	add	r9,r8,r9
 8004b00:	898d803a 	cmpltu	r6,r17,r6
 8004b04:	3251883a 	add	r8,r6,r9
 8004b08:	1021883a 	mov	r16,r2
 8004b0c:	003f0806 	br	8004730 <__alt_data_end+0xfc004730>
 8004b10:	1000301e 	bne	r2,zero,8004bd4 <__adddf3+0x720>
 8004b14:	4984b03a 	or	r2,r9,r6
 8004b18:	10007126 	beq	r2,zero,8004ce0 <__adddf3+0x82c>
 8004b1c:	4811883a 	mov	r8,r9
 8004b20:	3023883a 	mov	r17,r6
 8004b24:	3825883a 	mov	r18,r7
 8004b28:	0401ffc4 	movi	r16,2047
 8004b2c:	003e8006 	br	8004530 <__alt_data_end+0xfc004530>
 8004b30:	4462b03a 	or	r17,r8,r17
 8004b34:	8822c03a 	cmpne	r17,r17,zero
 8004b38:	0007883a 	mov	r3,zero
 8004b3c:	003f8b06 	br	800496c <__alt_data_end+0xfc00496c>
 8004b40:	0141ffc4 	movi	r5,2047
 8004b44:	11403b26 	beq	r2,r5,8004c34 <__adddf3+0x780>
 8004b48:	0109c83a 	sub	r4,zero,r4
 8004b4c:	42002034 	orhi	r8,r8,128
 8004b50:	01400e04 	movi	r5,56
 8004b54:	29006716 	blt	r5,r4,8004cf4 <__adddf3+0x840>
 8004b58:	014007c4 	movi	r5,31
 8004b5c:	29007016 	blt	r5,r4,8004d20 <__adddf3+0x86c>
 8004b60:	01400804 	movi	r5,32
 8004b64:	290bc83a 	sub	r5,r5,r4
 8004b68:	4154983a 	sll	r10,r8,r5
 8004b6c:	890ed83a 	srl	r7,r17,r4
 8004b70:	894a983a 	sll	r5,r17,r5
 8004b74:	4108d83a 	srl	r4,r8,r4
 8004b78:	51e2b03a 	or	r17,r10,r7
 8004b7c:	280ac03a 	cmpne	r5,r5,zero
 8004b80:	8962b03a 	or	r17,r17,r5
 8004b84:	89a3883a 	add	r17,r17,r6
 8004b88:	2253883a 	add	r9,r4,r9
 8004b8c:	898d803a 	cmpltu	r6,r17,r6
 8004b90:	3251883a 	add	r8,r6,r9
 8004b94:	1021883a 	mov	r16,r2
 8004b98:	003ee506 	br	8004730 <__alt_data_end+0xfc004730>
 8004b9c:	4984b03a 	or	r2,r9,r6
 8004ba0:	103e6326 	beq	r2,zero,8004530 <__alt_data_end+0xfc004530>
 8004ba4:	8987c83a 	sub	r3,r17,r6
 8004ba8:	88c9803a 	cmpltu	r4,r17,r3
 8004bac:	4245c83a 	sub	r2,r8,r9
 8004bb0:	1105c83a 	sub	r2,r2,r4
 8004bb4:	1100202c 	andhi	r4,r2,128
 8004bb8:	203ebb26 	beq	r4,zero,80046a8 <__alt_data_end+0xfc0046a8>
 8004bbc:	3463c83a 	sub	r17,r6,r17
 8004bc0:	4a07c83a 	sub	r3,r9,r8
 8004bc4:	344d803a 	cmpltu	r6,r6,r17
 8004bc8:	1991c83a 	sub	r8,r3,r6
 8004bcc:	3825883a 	mov	r18,r7
 8004bd0:	003e5706 	br	8004530 <__alt_data_end+0xfc004530>
 8004bd4:	4984b03a 	or	r2,r9,r6
 8004bd8:	10002e26 	beq	r2,zero,8004c94 <__adddf3+0x7e0>
 8004bdc:	4004d0fa 	srli	r2,r8,3
 8004be0:	8822d0fa 	srli	r17,r17,3
 8004be4:	4010977a 	slli	r8,r8,29
 8004be8:	10c0022c 	andhi	r3,r2,8
 8004bec:	4462b03a 	or	r17,r8,r17
 8004bf0:	18000826 	beq	r3,zero,8004c14 <__adddf3+0x760>
 8004bf4:	4808d0fa 	srli	r4,r9,3
 8004bf8:	20c0022c 	andhi	r3,r4,8
 8004bfc:	1800051e 	bne	r3,zero,8004c14 <__adddf3+0x760>
 8004c00:	300cd0fa 	srli	r6,r6,3
 8004c04:	4806977a 	slli	r3,r9,29
 8004c08:	2005883a 	mov	r2,r4
 8004c0c:	3825883a 	mov	r18,r7
 8004c10:	19a2b03a 	or	r17,r3,r6
 8004c14:	8810d77a 	srli	r8,r17,29
 8004c18:	100490fa 	slli	r2,r2,3
 8004c1c:	882290fa 	slli	r17,r17,3
 8004c20:	0401ffc4 	movi	r16,2047
 8004c24:	4090b03a 	or	r8,r8,r2
 8004c28:	003e4106 	br	8004530 <__alt_data_end+0xfc004530>
 8004c2c:	0141ffc4 	movi	r5,2047
 8004c30:	117fc71e 	bne	r2,r5,8004b50 <__alt_data_end+0xfc004b50>
 8004c34:	4811883a 	mov	r8,r9
 8004c38:	3023883a 	mov	r17,r6
 8004c3c:	1021883a 	mov	r16,r2
 8004c40:	003e3b06 	br	8004530 <__alt_data_end+0xfc004530>
 8004c44:	10002f26 	beq	r2,zero,8004d04 <__adddf3+0x850>
 8004c48:	4984b03a 	or	r2,r9,r6
 8004c4c:	10001126 	beq	r2,zero,8004c94 <__adddf3+0x7e0>
 8004c50:	4004d0fa 	srli	r2,r8,3
 8004c54:	8822d0fa 	srli	r17,r17,3
 8004c58:	4010977a 	slli	r8,r8,29
 8004c5c:	10c0022c 	andhi	r3,r2,8
 8004c60:	4462b03a 	or	r17,r8,r17
 8004c64:	183feb26 	beq	r3,zero,8004c14 <__alt_data_end+0xfc004c14>
 8004c68:	4808d0fa 	srli	r4,r9,3
 8004c6c:	20c0022c 	andhi	r3,r4,8
 8004c70:	183fe81e 	bne	r3,zero,8004c14 <__alt_data_end+0xfc004c14>
 8004c74:	300cd0fa 	srli	r6,r6,3
 8004c78:	4806977a 	slli	r3,r9,29
 8004c7c:	2005883a 	mov	r2,r4
 8004c80:	19a2b03a 	or	r17,r3,r6
 8004c84:	003fe306 	br	8004c14 <__alt_data_end+0xfc004c14>
 8004c88:	0011883a 	mov	r8,zero
 8004c8c:	0005883a 	mov	r2,zero
 8004c90:	003e3f06 	br	8004590 <__alt_data_end+0xfc004590>
 8004c94:	0401ffc4 	movi	r16,2047
 8004c98:	003e2506 	br	8004530 <__alt_data_end+0xfc004530>
 8004c9c:	0013883a 	mov	r9,zero
 8004ca0:	003f8406 	br	8004ab4 <__alt_data_end+0xfc004ab4>
 8004ca4:	0005883a 	mov	r2,zero
 8004ca8:	0007883a 	mov	r3,zero
 8004cac:	003e8906 	br	80046d4 <__alt_data_end+0xfc0046d4>
 8004cb0:	197ff804 	addi	r5,r3,-32
 8004cb4:	01000804 	movi	r4,32
 8004cb8:	414ad83a 	srl	r5,r8,r5
 8004cbc:	19002426 	beq	r3,r4,8004d50 <__adddf3+0x89c>
 8004cc0:	01001004 	movi	r4,64
 8004cc4:	20c7c83a 	sub	r3,r4,r3
 8004cc8:	40c6983a 	sll	r3,r8,r3
 8004ccc:	1c46b03a 	or	r3,r3,r17
 8004cd0:	1806c03a 	cmpne	r3,r3,zero
 8004cd4:	28e2b03a 	or	r17,r5,r3
 8004cd8:	0007883a 	mov	r3,zero
 8004cdc:	003f2306 	br	800496c <__alt_data_end+0xfc00496c>
 8004ce0:	0007883a 	mov	r3,zero
 8004ce4:	5811883a 	mov	r8,r11
 8004ce8:	00bfffc4 	movi	r2,-1
 8004cec:	0401ffc4 	movi	r16,2047
 8004cf0:	003e7806 	br	80046d4 <__alt_data_end+0xfc0046d4>
 8004cf4:	4462b03a 	or	r17,r8,r17
 8004cf8:	8822c03a 	cmpne	r17,r17,zero
 8004cfc:	0009883a 	mov	r4,zero
 8004d00:	003fa006 	br	8004b84 <__alt_data_end+0xfc004b84>
 8004d04:	4811883a 	mov	r8,r9
 8004d08:	3023883a 	mov	r17,r6
 8004d0c:	0401ffc4 	movi	r16,2047
 8004d10:	003e0706 	br	8004530 <__alt_data_end+0xfc004530>
 8004d14:	4811883a 	mov	r8,r9
 8004d18:	3023883a 	mov	r17,r6
 8004d1c:	003e0406 	br	8004530 <__alt_data_end+0xfc004530>
 8004d20:	21fff804 	addi	r7,r4,-32
 8004d24:	01400804 	movi	r5,32
 8004d28:	41ced83a 	srl	r7,r8,r7
 8004d2c:	21400a26 	beq	r4,r5,8004d58 <__adddf3+0x8a4>
 8004d30:	01401004 	movi	r5,64
 8004d34:	2909c83a 	sub	r4,r5,r4
 8004d38:	4108983a 	sll	r4,r8,r4
 8004d3c:	2448b03a 	or	r4,r4,r17
 8004d40:	2008c03a 	cmpne	r4,r4,zero
 8004d44:	3922b03a 	or	r17,r7,r4
 8004d48:	0009883a 	mov	r4,zero
 8004d4c:	003f8d06 	br	8004b84 <__alt_data_end+0xfc004b84>
 8004d50:	0007883a 	mov	r3,zero
 8004d54:	003fdd06 	br	8004ccc <__alt_data_end+0xfc004ccc>
 8004d58:	0009883a 	mov	r4,zero
 8004d5c:	003ff706 	br	8004d3c <__alt_data_end+0xfc004d3c>

08004d60 <__divdf3>:
 8004d60:	defff204 	addi	sp,sp,-56
 8004d64:	dd400915 	stw	r21,36(sp)
 8004d68:	282ad53a 	srli	r21,r5,20
 8004d6c:	dd000815 	stw	r20,32(sp)
 8004d70:	2828d7fa 	srli	r20,r5,31
 8004d74:	dc000415 	stw	r16,16(sp)
 8004d78:	04000434 	movhi	r16,16
 8004d7c:	df000c15 	stw	fp,48(sp)
 8004d80:	843fffc4 	addi	r16,r16,-1
 8004d84:	dfc00d15 	stw	ra,52(sp)
 8004d88:	ddc00b15 	stw	r23,44(sp)
 8004d8c:	dd800a15 	stw	r22,40(sp)
 8004d90:	dcc00715 	stw	r19,28(sp)
 8004d94:	dc800615 	stw	r18,24(sp)
 8004d98:	dc400515 	stw	r17,20(sp)
 8004d9c:	ad41ffcc 	andi	r21,r21,2047
 8004da0:	2c20703a 	and	r16,r5,r16
 8004da4:	a7003fcc 	andi	fp,r20,255
 8004da8:	a8006126 	beq	r21,zero,8004f30 <__divdf3+0x1d0>
 8004dac:	0081ffc4 	movi	r2,2047
 8004db0:	2025883a 	mov	r18,r4
 8004db4:	a8803726 	beq	r21,r2,8004e94 <__divdf3+0x134>
 8004db8:	80800434 	orhi	r2,r16,16
 8004dbc:	100490fa 	slli	r2,r2,3
 8004dc0:	2020d77a 	srli	r16,r4,29
 8004dc4:	202490fa 	slli	r18,r4,3
 8004dc8:	ad7f0044 	addi	r21,r21,-1023
 8004dcc:	80a0b03a 	or	r16,r16,r2
 8004dd0:	0027883a 	mov	r19,zero
 8004dd4:	0013883a 	mov	r9,zero
 8004dd8:	3804d53a 	srli	r2,r7,20
 8004ddc:	382cd7fa 	srli	r22,r7,31
 8004de0:	04400434 	movhi	r17,16
 8004de4:	8c7fffc4 	addi	r17,r17,-1
 8004de8:	1081ffcc 	andi	r2,r2,2047
 8004dec:	3011883a 	mov	r8,r6
 8004df0:	3c62703a 	and	r17,r7,r17
 8004df4:	b5c03fcc 	andi	r23,r22,255
 8004df8:	10006c26 	beq	r2,zero,8004fac <__divdf3+0x24c>
 8004dfc:	00c1ffc4 	movi	r3,2047
 8004e00:	10c06426 	beq	r2,r3,8004f94 <__divdf3+0x234>
 8004e04:	88c00434 	orhi	r3,r17,16
 8004e08:	180690fa 	slli	r3,r3,3
 8004e0c:	3022d77a 	srli	r17,r6,29
 8004e10:	301090fa 	slli	r8,r6,3
 8004e14:	10bf0044 	addi	r2,r2,-1023
 8004e18:	88e2b03a 	or	r17,r17,r3
 8004e1c:	000f883a 	mov	r7,zero
 8004e20:	a58cf03a 	xor	r6,r20,r22
 8004e24:	3cc8b03a 	or	r4,r7,r19
 8004e28:	a8abc83a 	sub	r21,r21,r2
 8004e2c:	008003c4 	movi	r2,15
 8004e30:	3007883a 	mov	r3,r6
 8004e34:	34c03fcc 	andi	r19,r6,255
 8004e38:	11009036 	bltu	r2,r4,800507c <__divdf3+0x31c>
 8004e3c:	200890ba 	slli	r4,r4,2
 8004e40:	00820034 	movhi	r2,2048
 8004e44:	10939504 	addi	r2,r2,20052
 8004e48:	2089883a 	add	r4,r4,r2
 8004e4c:	20800017 	ldw	r2,0(r4)
 8004e50:	1000683a 	jmp	r2
 8004e54:	0800507c 	xorhi	zero,at,321
 8004e58:	08004ecc 	andi	zero,at,315
 8004e5c:	0800506c 	andhi	zero,at,321
 8004e60:	08004ec0 	call	8004ec <__ram_exceptions_end+0x7e02a4>
 8004e64:	0800506c 	andhi	zero,at,321
 8004e68:	08005040 	call	800504 <__ram_exceptions_end+0x7e02bc>
 8004e6c:	0800506c 	andhi	zero,at,321
 8004e70:	08004ec0 	call	8004ec <__ram_exceptions_end+0x7e02a4>
 8004e74:	08004ecc 	andi	zero,at,315
 8004e78:	08004ecc 	andi	zero,at,315
 8004e7c:	08005040 	call	800504 <__ram_exceptions_end+0x7e02bc>
 8004e80:	08004ec0 	call	8004ec <__ram_exceptions_end+0x7e02a4>
 8004e84:	08004eb0 	cmpltui	zero,at,314
 8004e88:	08004eb0 	cmpltui	zero,at,314
 8004e8c:	08004eb0 	cmpltui	zero,at,314
 8004e90:	08005360 	cmpeqi	zero,at,333
 8004e94:	2404b03a 	or	r2,r4,r16
 8004e98:	1000661e 	bne	r2,zero,8005034 <__divdf3+0x2d4>
 8004e9c:	04c00204 	movi	r19,8
 8004ea0:	0021883a 	mov	r16,zero
 8004ea4:	0025883a 	mov	r18,zero
 8004ea8:	02400084 	movi	r9,2
 8004eac:	003fca06 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8004eb0:	8023883a 	mov	r17,r16
 8004eb4:	9011883a 	mov	r8,r18
 8004eb8:	e02f883a 	mov	r23,fp
 8004ebc:	480f883a 	mov	r7,r9
 8004ec0:	00800084 	movi	r2,2
 8004ec4:	3881311e 	bne	r7,r2,800538c <__divdf3+0x62c>
 8004ec8:	b827883a 	mov	r19,r23
 8004ecc:	98c0004c 	andi	r3,r19,1
 8004ed0:	0081ffc4 	movi	r2,2047
 8004ed4:	000b883a 	mov	r5,zero
 8004ed8:	0025883a 	mov	r18,zero
 8004edc:	1004953a 	slli	r2,r2,20
 8004ee0:	18c03fcc 	andi	r3,r3,255
 8004ee4:	04400434 	movhi	r17,16
 8004ee8:	8c7fffc4 	addi	r17,r17,-1
 8004eec:	180697fa 	slli	r3,r3,31
 8004ef0:	2c4a703a 	and	r5,r5,r17
 8004ef4:	288ab03a 	or	r5,r5,r2
 8004ef8:	28c6b03a 	or	r3,r5,r3
 8004efc:	9005883a 	mov	r2,r18
 8004f00:	dfc00d17 	ldw	ra,52(sp)
 8004f04:	df000c17 	ldw	fp,48(sp)
 8004f08:	ddc00b17 	ldw	r23,44(sp)
 8004f0c:	dd800a17 	ldw	r22,40(sp)
 8004f10:	dd400917 	ldw	r21,36(sp)
 8004f14:	dd000817 	ldw	r20,32(sp)
 8004f18:	dcc00717 	ldw	r19,28(sp)
 8004f1c:	dc800617 	ldw	r18,24(sp)
 8004f20:	dc400517 	ldw	r17,20(sp)
 8004f24:	dc000417 	ldw	r16,16(sp)
 8004f28:	dec00e04 	addi	sp,sp,56
 8004f2c:	f800283a 	ret
 8004f30:	2404b03a 	or	r2,r4,r16
 8004f34:	2027883a 	mov	r19,r4
 8004f38:	10003926 	beq	r2,zero,8005020 <__divdf3+0x2c0>
 8004f3c:	80012e26 	beq	r16,zero,80053f8 <__divdf3+0x698>
 8004f40:	8009883a 	mov	r4,r16
 8004f44:	d9800315 	stw	r6,12(sp)
 8004f48:	d9c00215 	stw	r7,8(sp)
 8004f4c:	8006cc80 	call	8006cc8 <__clzsi2>
 8004f50:	d9800317 	ldw	r6,12(sp)
 8004f54:	d9c00217 	ldw	r7,8(sp)
 8004f58:	113ffd44 	addi	r4,r2,-11
 8004f5c:	00c00704 	movi	r3,28
 8004f60:	19012116 	blt	r3,r4,80053e8 <__divdf3+0x688>
 8004f64:	00c00744 	movi	r3,29
 8004f68:	147ffe04 	addi	r17,r2,-8
 8004f6c:	1907c83a 	sub	r3,r3,r4
 8004f70:	8460983a 	sll	r16,r16,r17
 8004f74:	98c6d83a 	srl	r3,r19,r3
 8004f78:	9c64983a 	sll	r18,r19,r17
 8004f7c:	1c20b03a 	or	r16,r3,r16
 8004f80:	1080fcc4 	addi	r2,r2,1011
 8004f84:	00abc83a 	sub	r21,zero,r2
 8004f88:	0027883a 	mov	r19,zero
 8004f8c:	0013883a 	mov	r9,zero
 8004f90:	003f9106 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8004f94:	3446b03a 	or	r3,r6,r17
 8004f98:	18001f1e 	bne	r3,zero,8005018 <__divdf3+0x2b8>
 8004f9c:	0023883a 	mov	r17,zero
 8004fa0:	0011883a 	mov	r8,zero
 8004fa4:	01c00084 	movi	r7,2
 8004fa8:	003f9d06 	br	8004e20 <__alt_data_end+0xfc004e20>
 8004fac:	3446b03a 	or	r3,r6,r17
 8004fb0:	18001526 	beq	r3,zero,8005008 <__divdf3+0x2a8>
 8004fb4:	88011b26 	beq	r17,zero,8005424 <__divdf3+0x6c4>
 8004fb8:	8809883a 	mov	r4,r17
 8004fbc:	d9800315 	stw	r6,12(sp)
 8004fc0:	da400115 	stw	r9,4(sp)
 8004fc4:	8006cc80 	call	8006cc8 <__clzsi2>
 8004fc8:	d9800317 	ldw	r6,12(sp)
 8004fcc:	da400117 	ldw	r9,4(sp)
 8004fd0:	113ffd44 	addi	r4,r2,-11
 8004fd4:	00c00704 	movi	r3,28
 8004fd8:	19010e16 	blt	r3,r4,8005414 <__divdf3+0x6b4>
 8004fdc:	00c00744 	movi	r3,29
 8004fe0:	123ffe04 	addi	r8,r2,-8
 8004fe4:	1907c83a 	sub	r3,r3,r4
 8004fe8:	8a22983a 	sll	r17,r17,r8
 8004fec:	30c6d83a 	srl	r3,r6,r3
 8004ff0:	3210983a 	sll	r8,r6,r8
 8004ff4:	1c62b03a 	or	r17,r3,r17
 8004ff8:	1080fcc4 	addi	r2,r2,1011
 8004ffc:	0085c83a 	sub	r2,zero,r2
 8005000:	000f883a 	mov	r7,zero
 8005004:	003f8606 	br	8004e20 <__alt_data_end+0xfc004e20>
 8005008:	0023883a 	mov	r17,zero
 800500c:	0011883a 	mov	r8,zero
 8005010:	01c00044 	movi	r7,1
 8005014:	003f8206 	br	8004e20 <__alt_data_end+0xfc004e20>
 8005018:	01c000c4 	movi	r7,3
 800501c:	003f8006 	br	8004e20 <__alt_data_end+0xfc004e20>
 8005020:	04c00104 	movi	r19,4
 8005024:	0021883a 	mov	r16,zero
 8005028:	0025883a 	mov	r18,zero
 800502c:	02400044 	movi	r9,1
 8005030:	003f6906 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8005034:	04c00304 	movi	r19,12
 8005038:	024000c4 	movi	r9,3
 800503c:	003f6606 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8005040:	01400434 	movhi	r5,16
 8005044:	0007883a 	mov	r3,zero
 8005048:	297fffc4 	addi	r5,r5,-1
 800504c:	04bfffc4 	movi	r18,-1
 8005050:	0081ffc4 	movi	r2,2047
 8005054:	003fa106 	br	8004edc <__alt_data_end+0xfc004edc>
 8005058:	00c00044 	movi	r3,1
 800505c:	1887c83a 	sub	r3,r3,r2
 8005060:	01000e04 	movi	r4,56
 8005064:	20c1210e 	bge	r4,r3,80054ec <__divdf3+0x78c>
 8005068:	98c0004c 	andi	r3,r19,1
 800506c:	0005883a 	mov	r2,zero
 8005070:	000b883a 	mov	r5,zero
 8005074:	0025883a 	mov	r18,zero
 8005078:	003f9806 	br	8004edc <__alt_data_end+0xfc004edc>
 800507c:	8c00fd36 	bltu	r17,r16,8005474 <__divdf3+0x714>
 8005080:	8440fb26 	beq	r16,r17,8005470 <__divdf3+0x710>
 8005084:	8007883a 	mov	r3,r16
 8005088:	ad7fffc4 	addi	r21,r21,-1
 800508c:	0021883a 	mov	r16,zero
 8005090:	4004d63a 	srli	r2,r8,24
 8005094:	8822923a 	slli	r17,r17,8
 8005098:	1809883a 	mov	r4,r3
 800509c:	402c923a 	slli	r22,r8,8
 80050a0:	88b8b03a 	or	fp,r17,r2
 80050a4:	e028d43a 	srli	r20,fp,16
 80050a8:	d8c00015 	stw	r3,0(sp)
 80050ac:	e5ffffcc 	andi	r23,fp,65535
 80050b0:	a00b883a 	mov	r5,r20
 80050b4:	8002fb40 	call	8002fb4 <__udivsi3>
 80050b8:	d8c00017 	ldw	r3,0(sp)
 80050bc:	a00b883a 	mov	r5,r20
 80050c0:	d8800315 	stw	r2,12(sp)
 80050c4:	1809883a 	mov	r4,r3
 80050c8:	80030180 	call	8003018 <__umodsi3>
 80050cc:	d9800317 	ldw	r6,12(sp)
 80050d0:	1006943a 	slli	r3,r2,16
 80050d4:	9004d43a 	srli	r2,r18,16
 80050d8:	b9a3383a 	mul	r17,r23,r6
 80050dc:	10c4b03a 	or	r2,r2,r3
 80050e0:	1440062e 	bgeu	r2,r17,80050fc <__divdf3+0x39c>
 80050e4:	1705883a 	add	r2,r2,fp
 80050e8:	30ffffc4 	addi	r3,r6,-1
 80050ec:	1700ee36 	bltu	r2,fp,80054a8 <__divdf3+0x748>
 80050f0:	1440ed2e 	bgeu	r2,r17,80054a8 <__divdf3+0x748>
 80050f4:	31bfff84 	addi	r6,r6,-2
 80050f8:	1705883a 	add	r2,r2,fp
 80050fc:	1463c83a 	sub	r17,r2,r17
 8005100:	a00b883a 	mov	r5,r20
 8005104:	8809883a 	mov	r4,r17
 8005108:	d9800315 	stw	r6,12(sp)
 800510c:	8002fb40 	call	8002fb4 <__udivsi3>
 8005110:	a00b883a 	mov	r5,r20
 8005114:	8809883a 	mov	r4,r17
 8005118:	d8800215 	stw	r2,8(sp)
 800511c:	80030180 	call	8003018 <__umodsi3>
 8005120:	d9c00217 	ldw	r7,8(sp)
 8005124:	1004943a 	slli	r2,r2,16
 8005128:	94bfffcc 	andi	r18,r18,65535
 800512c:	b9d1383a 	mul	r8,r23,r7
 8005130:	90a4b03a 	or	r18,r18,r2
 8005134:	d9800317 	ldw	r6,12(sp)
 8005138:	9200062e 	bgeu	r18,r8,8005154 <__divdf3+0x3f4>
 800513c:	9725883a 	add	r18,r18,fp
 8005140:	38bfffc4 	addi	r2,r7,-1
 8005144:	9700d636 	bltu	r18,fp,80054a0 <__divdf3+0x740>
 8005148:	9200d52e 	bgeu	r18,r8,80054a0 <__divdf3+0x740>
 800514c:	39ffff84 	addi	r7,r7,-2
 8005150:	9725883a 	add	r18,r18,fp
 8005154:	3004943a 	slli	r2,r6,16
 8005158:	b012d43a 	srli	r9,r22,16
 800515c:	b1bfffcc 	andi	r6,r22,65535
 8005160:	11e2b03a 	or	r17,r2,r7
 8005164:	8806d43a 	srli	r3,r17,16
 8005168:	893fffcc 	andi	r4,r17,65535
 800516c:	218b383a 	mul	r5,r4,r6
 8005170:	30c5383a 	mul	r2,r6,r3
 8005174:	2249383a 	mul	r4,r4,r9
 8005178:	280ed43a 	srli	r7,r5,16
 800517c:	9225c83a 	sub	r18,r18,r8
 8005180:	2089883a 	add	r4,r4,r2
 8005184:	3909883a 	add	r4,r7,r4
 8005188:	1a47383a 	mul	r3,r3,r9
 800518c:	2080022e 	bgeu	r4,r2,8005198 <__divdf3+0x438>
 8005190:	00800074 	movhi	r2,1
 8005194:	1887883a 	add	r3,r3,r2
 8005198:	2004d43a 	srli	r2,r4,16
 800519c:	2008943a 	slli	r4,r4,16
 80051a0:	297fffcc 	andi	r5,r5,65535
 80051a4:	10c7883a 	add	r3,r2,r3
 80051a8:	2149883a 	add	r4,r4,r5
 80051ac:	90c0a536 	bltu	r18,r3,8005444 <__divdf3+0x6e4>
 80051b0:	90c0bf26 	beq	r18,r3,80054b0 <__divdf3+0x750>
 80051b4:	90c7c83a 	sub	r3,r18,r3
 80051b8:	810fc83a 	sub	r7,r16,r4
 80051bc:	81e5803a 	cmpltu	r18,r16,r7
 80051c0:	1ca5c83a 	sub	r18,r3,r18
 80051c4:	e480c126 	beq	fp,r18,80054cc <__divdf3+0x76c>
 80051c8:	a00b883a 	mov	r5,r20
 80051cc:	9009883a 	mov	r4,r18
 80051d0:	d9800315 	stw	r6,12(sp)
 80051d4:	d9c00215 	stw	r7,8(sp)
 80051d8:	da400115 	stw	r9,4(sp)
 80051dc:	8002fb40 	call	8002fb4 <__udivsi3>
 80051e0:	a00b883a 	mov	r5,r20
 80051e4:	9009883a 	mov	r4,r18
 80051e8:	d8800015 	stw	r2,0(sp)
 80051ec:	80030180 	call	8003018 <__umodsi3>
 80051f0:	d9c00217 	ldw	r7,8(sp)
 80051f4:	da000017 	ldw	r8,0(sp)
 80051f8:	1006943a 	slli	r3,r2,16
 80051fc:	3804d43a 	srli	r2,r7,16
 8005200:	ba21383a 	mul	r16,r23,r8
 8005204:	d9800317 	ldw	r6,12(sp)
 8005208:	10c4b03a 	or	r2,r2,r3
 800520c:	da400117 	ldw	r9,4(sp)
 8005210:	1400062e 	bgeu	r2,r16,800522c <__divdf3+0x4cc>
 8005214:	1705883a 	add	r2,r2,fp
 8005218:	40ffffc4 	addi	r3,r8,-1
 800521c:	1700ad36 	bltu	r2,fp,80054d4 <__divdf3+0x774>
 8005220:	1400ac2e 	bgeu	r2,r16,80054d4 <__divdf3+0x774>
 8005224:	423fff84 	addi	r8,r8,-2
 8005228:	1705883a 	add	r2,r2,fp
 800522c:	1421c83a 	sub	r16,r2,r16
 8005230:	a00b883a 	mov	r5,r20
 8005234:	8009883a 	mov	r4,r16
 8005238:	d9800315 	stw	r6,12(sp)
 800523c:	d9c00215 	stw	r7,8(sp)
 8005240:	da000015 	stw	r8,0(sp)
 8005244:	da400115 	stw	r9,4(sp)
 8005248:	8002fb40 	call	8002fb4 <__udivsi3>
 800524c:	8009883a 	mov	r4,r16
 8005250:	a00b883a 	mov	r5,r20
 8005254:	1025883a 	mov	r18,r2
 8005258:	80030180 	call	8003018 <__umodsi3>
 800525c:	d9c00217 	ldw	r7,8(sp)
 8005260:	1004943a 	slli	r2,r2,16
 8005264:	bcaf383a 	mul	r23,r23,r18
 8005268:	393fffcc 	andi	r4,r7,65535
 800526c:	2088b03a 	or	r4,r4,r2
 8005270:	d9800317 	ldw	r6,12(sp)
 8005274:	da000017 	ldw	r8,0(sp)
 8005278:	da400117 	ldw	r9,4(sp)
 800527c:	25c0062e 	bgeu	r4,r23,8005298 <__divdf3+0x538>
 8005280:	2709883a 	add	r4,r4,fp
 8005284:	90bfffc4 	addi	r2,r18,-1
 8005288:	27009436 	bltu	r4,fp,80054dc <__divdf3+0x77c>
 800528c:	25c0932e 	bgeu	r4,r23,80054dc <__divdf3+0x77c>
 8005290:	94bfff84 	addi	r18,r18,-2
 8005294:	2709883a 	add	r4,r4,fp
 8005298:	4004943a 	slli	r2,r8,16
 800529c:	25efc83a 	sub	r23,r4,r23
 80052a0:	1490b03a 	or	r8,r2,r18
 80052a4:	4008d43a 	srli	r4,r8,16
 80052a8:	40ffffcc 	andi	r3,r8,65535
 80052ac:	30c5383a 	mul	r2,r6,r3
 80052b0:	1a47383a 	mul	r3,r3,r9
 80052b4:	310d383a 	mul	r6,r6,r4
 80052b8:	100ad43a 	srli	r5,r2,16
 80052bc:	4913383a 	mul	r9,r9,r4
 80052c0:	1987883a 	add	r3,r3,r6
 80052c4:	28c7883a 	add	r3,r5,r3
 80052c8:	1980022e 	bgeu	r3,r6,80052d4 <__divdf3+0x574>
 80052cc:	01000074 	movhi	r4,1
 80052d0:	4913883a 	add	r9,r9,r4
 80052d4:	1808d43a 	srli	r4,r3,16
 80052d8:	1806943a 	slli	r3,r3,16
 80052dc:	10bfffcc 	andi	r2,r2,65535
 80052e0:	2253883a 	add	r9,r4,r9
 80052e4:	1887883a 	add	r3,r3,r2
 80052e8:	ba403836 	bltu	r23,r9,80053cc <__divdf3+0x66c>
 80052ec:	ba403626 	beq	r23,r9,80053c8 <__divdf3+0x668>
 80052f0:	42000054 	ori	r8,r8,1
 80052f4:	a880ffc4 	addi	r2,r21,1023
 80052f8:	00bf570e 	bge	zero,r2,8005058 <__alt_data_end+0xfc005058>
 80052fc:	40c001cc 	andi	r3,r8,7
 8005300:	18000726 	beq	r3,zero,8005320 <__divdf3+0x5c0>
 8005304:	40c003cc 	andi	r3,r8,15
 8005308:	01000104 	movi	r4,4
 800530c:	19000426 	beq	r3,r4,8005320 <__divdf3+0x5c0>
 8005310:	4107883a 	add	r3,r8,r4
 8005314:	1a11803a 	cmpltu	r8,r3,r8
 8005318:	8a23883a 	add	r17,r17,r8
 800531c:	1811883a 	mov	r8,r3
 8005320:	88c0402c 	andhi	r3,r17,256
 8005324:	18000426 	beq	r3,zero,8005338 <__divdf3+0x5d8>
 8005328:	00ffc034 	movhi	r3,65280
 800532c:	18ffffc4 	addi	r3,r3,-1
 8005330:	a8810004 	addi	r2,r21,1024
 8005334:	88e2703a 	and	r17,r17,r3
 8005338:	00c1ff84 	movi	r3,2046
 800533c:	18bee316 	blt	r3,r2,8004ecc <__alt_data_end+0xfc004ecc>
 8005340:	8824977a 	slli	r18,r17,29
 8005344:	4010d0fa 	srli	r8,r8,3
 8005348:	8822927a 	slli	r17,r17,9
 800534c:	1081ffcc 	andi	r2,r2,2047
 8005350:	9224b03a 	or	r18,r18,r8
 8005354:	880ad33a 	srli	r5,r17,12
 8005358:	98c0004c 	andi	r3,r19,1
 800535c:	003edf06 	br	8004edc <__alt_data_end+0xfc004edc>
 8005360:	8080022c 	andhi	r2,r16,8
 8005364:	10001226 	beq	r2,zero,80053b0 <__divdf3+0x650>
 8005368:	8880022c 	andhi	r2,r17,8
 800536c:	1000101e 	bne	r2,zero,80053b0 <__divdf3+0x650>
 8005370:	00800434 	movhi	r2,16
 8005374:	89400234 	orhi	r5,r17,8
 8005378:	10bfffc4 	addi	r2,r2,-1
 800537c:	b007883a 	mov	r3,r22
 8005380:	288a703a 	and	r5,r5,r2
 8005384:	4025883a 	mov	r18,r8
 8005388:	003f3106 	br	8005050 <__alt_data_end+0xfc005050>
 800538c:	008000c4 	movi	r2,3
 8005390:	3880a626 	beq	r7,r2,800562c <__divdf3+0x8cc>
 8005394:	00800044 	movi	r2,1
 8005398:	3880521e 	bne	r7,r2,80054e4 <__divdf3+0x784>
 800539c:	b807883a 	mov	r3,r23
 80053a0:	0005883a 	mov	r2,zero
 80053a4:	000b883a 	mov	r5,zero
 80053a8:	0025883a 	mov	r18,zero
 80053ac:	003ecb06 	br	8004edc <__alt_data_end+0xfc004edc>
 80053b0:	00800434 	movhi	r2,16
 80053b4:	81400234 	orhi	r5,r16,8
 80053b8:	10bfffc4 	addi	r2,r2,-1
 80053bc:	a007883a 	mov	r3,r20
 80053c0:	288a703a 	and	r5,r5,r2
 80053c4:	003f2206 	br	8005050 <__alt_data_end+0xfc005050>
 80053c8:	183fca26 	beq	r3,zero,80052f4 <__alt_data_end+0xfc0052f4>
 80053cc:	e5ef883a 	add	r23,fp,r23
 80053d0:	40bfffc4 	addi	r2,r8,-1
 80053d4:	bf00392e 	bgeu	r23,fp,80054bc <__divdf3+0x75c>
 80053d8:	1011883a 	mov	r8,r2
 80053dc:	ba7fc41e 	bne	r23,r9,80052f0 <__alt_data_end+0xfc0052f0>
 80053e0:	b0ffc31e 	bne	r22,r3,80052f0 <__alt_data_end+0xfc0052f0>
 80053e4:	003fc306 	br	80052f4 <__alt_data_end+0xfc0052f4>
 80053e8:	143ff604 	addi	r16,r2,-40
 80053ec:	9c20983a 	sll	r16,r19,r16
 80053f0:	0025883a 	mov	r18,zero
 80053f4:	003ee206 	br	8004f80 <__alt_data_end+0xfc004f80>
 80053f8:	d9800315 	stw	r6,12(sp)
 80053fc:	d9c00215 	stw	r7,8(sp)
 8005400:	8006cc80 	call	8006cc8 <__clzsi2>
 8005404:	10800804 	addi	r2,r2,32
 8005408:	d9c00217 	ldw	r7,8(sp)
 800540c:	d9800317 	ldw	r6,12(sp)
 8005410:	003ed106 	br	8004f58 <__alt_data_end+0xfc004f58>
 8005414:	147ff604 	addi	r17,r2,-40
 8005418:	3462983a 	sll	r17,r6,r17
 800541c:	0011883a 	mov	r8,zero
 8005420:	003ef506 	br	8004ff8 <__alt_data_end+0xfc004ff8>
 8005424:	3009883a 	mov	r4,r6
 8005428:	d9800315 	stw	r6,12(sp)
 800542c:	da400115 	stw	r9,4(sp)
 8005430:	8006cc80 	call	8006cc8 <__clzsi2>
 8005434:	10800804 	addi	r2,r2,32
 8005438:	da400117 	ldw	r9,4(sp)
 800543c:	d9800317 	ldw	r6,12(sp)
 8005440:	003ee306 	br	8004fd0 <__alt_data_end+0xfc004fd0>
 8005444:	85a1883a 	add	r16,r16,r22
 8005448:	8585803a 	cmpltu	r2,r16,r22
 800544c:	1705883a 	add	r2,r2,fp
 8005450:	14a5883a 	add	r18,r2,r18
 8005454:	88bfffc4 	addi	r2,r17,-1
 8005458:	e4800c2e 	bgeu	fp,r18,800548c <__divdf3+0x72c>
 800545c:	90c03e36 	bltu	r18,r3,8005558 <__divdf3+0x7f8>
 8005460:	1c806926 	beq	r3,r18,8005608 <__divdf3+0x8a8>
 8005464:	90c7c83a 	sub	r3,r18,r3
 8005468:	1023883a 	mov	r17,r2
 800546c:	003f5206 	br	80051b8 <__alt_data_end+0xfc0051b8>
 8005470:	923f0436 	bltu	r18,r8,8005084 <__alt_data_end+0xfc005084>
 8005474:	800897fa 	slli	r4,r16,31
 8005478:	9004d07a 	srli	r2,r18,1
 800547c:	8006d07a 	srli	r3,r16,1
 8005480:	902097fa 	slli	r16,r18,31
 8005484:	20a4b03a 	or	r18,r4,r2
 8005488:	003f0106 	br	8005090 <__alt_data_end+0xfc005090>
 800548c:	e4bff51e 	bne	fp,r18,8005464 <__alt_data_end+0xfc005464>
 8005490:	85bff22e 	bgeu	r16,r22,800545c <__alt_data_end+0xfc00545c>
 8005494:	e0c7c83a 	sub	r3,fp,r3
 8005498:	1023883a 	mov	r17,r2
 800549c:	003f4606 	br	80051b8 <__alt_data_end+0xfc0051b8>
 80054a0:	100f883a 	mov	r7,r2
 80054a4:	003f2b06 	br	8005154 <__alt_data_end+0xfc005154>
 80054a8:	180d883a 	mov	r6,r3
 80054ac:	003f1306 	br	80050fc <__alt_data_end+0xfc0050fc>
 80054b0:	813fe436 	bltu	r16,r4,8005444 <__alt_data_end+0xfc005444>
 80054b4:	0007883a 	mov	r3,zero
 80054b8:	003f3f06 	br	80051b8 <__alt_data_end+0xfc0051b8>
 80054bc:	ba402c36 	bltu	r23,r9,8005570 <__divdf3+0x810>
 80054c0:	4dc05426 	beq	r9,r23,8005614 <__divdf3+0x8b4>
 80054c4:	1011883a 	mov	r8,r2
 80054c8:	003f8906 	br	80052f0 <__alt_data_end+0xfc0052f0>
 80054cc:	023fffc4 	movi	r8,-1
 80054d0:	003f8806 	br	80052f4 <__alt_data_end+0xfc0052f4>
 80054d4:	1811883a 	mov	r8,r3
 80054d8:	003f5406 	br	800522c <__alt_data_end+0xfc00522c>
 80054dc:	1025883a 	mov	r18,r2
 80054e0:	003f6d06 	br	8005298 <__alt_data_end+0xfc005298>
 80054e4:	b827883a 	mov	r19,r23
 80054e8:	003f8206 	br	80052f4 <__alt_data_end+0xfc0052f4>
 80054ec:	010007c4 	movi	r4,31
 80054f0:	20c02616 	blt	r4,r3,800558c <__divdf3+0x82c>
 80054f4:	00800804 	movi	r2,32
 80054f8:	10c5c83a 	sub	r2,r2,r3
 80054fc:	888a983a 	sll	r5,r17,r2
 8005500:	40c8d83a 	srl	r4,r8,r3
 8005504:	4084983a 	sll	r2,r8,r2
 8005508:	88e2d83a 	srl	r17,r17,r3
 800550c:	2906b03a 	or	r3,r5,r4
 8005510:	1004c03a 	cmpne	r2,r2,zero
 8005514:	1886b03a 	or	r3,r3,r2
 8005518:	188001cc 	andi	r2,r3,7
 800551c:	10000726 	beq	r2,zero,800553c <__divdf3+0x7dc>
 8005520:	188003cc 	andi	r2,r3,15
 8005524:	01000104 	movi	r4,4
 8005528:	11000426 	beq	r2,r4,800553c <__divdf3+0x7dc>
 800552c:	1805883a 	mov	r2,r3
 8005530:	10c00104 	addi	r3,r2,4
 8005534:	1885803a 	cmpltu	r2,r3,r2
 8005538:	88a3883a 	add	r17,r17,r2
 800553c:	8880202c 	andhi	r2,r17,128
 8005540:	10002726 	beq	r2,zero,80055e0 <__divdf3+0x880>
 8005544:	98c0004c 	andi	r3,r19,1
 8005548:	00800044 	movi	r2,1
 800554c:	000b883a 	mov	r5,zero
 8005550:	0025883a 	mov	r18,zero
 8005554:	003e6106 	br	8004edc <__alt_data_end+0xfc004edc>
 8005558:	85a1883a 	add	r16,r16,r22
 800555c:	8585803a 	cmpltu	r2,r16,r22
 8005560:	1705883a 	add	r2,r2,fp
 8005564:	14a5883a 	add	r18,r2,r18
 8005568:	8c7fff84 	addi	r17,r17,-2
 800556c:	003f1106 	br	80051b4 <__alt_data_end+0xfc0051b4>
 8005570:	b589883a 	add	r4,r22,r22
 8005574:	25ad803a 	cmpltu	r22,r4,r22
 8005578:	b739883a 	add	fp,r22,fp
 800557c:	40bfff84 	addi	r2,r8,-2
 8005580:	bf2f883a 	add	r23,r23,fp
 8005584:	202d883a 	mov	r22,r4
 8005588:	003f9306 	br	80053d8 <__alt_data_end+0xfc0053d8>
 800558c:	013ff844 	movi	r4,-31
 8005590:	2085c83a 	sub	r2,r4,r2
 8005594:	8888d83a 	srl	r4,r17,r2
 8005598:	00800804 	movi	r2,32
 800559c:	18802126 	beq	r3,r2,8005624 <__divdf3+0x8c4>
 80055a0:	00801004 	movi	r2,64
 80055a4:	10c5c83a 	sub	r2,r2,r3
 80055a8:	8884983a 	sll	r2,r17,r2
 80055ac:	1204b03a 	or	r2,r2,r8
 80055b0:	1004c03a 	cmpne	r2,r2,zero
 80055b4:	2084b03a 	or	r2,r4,r2
 80055b8:	144001cc 	andi	r17,r2,7
 80055bc:	88000d1e 	bne	r17,zero,80055f4 <__divdf3+0x894>
 80055c0:	000b883a 	mov	r5,zero
 80055c4:	1024d0fa 	srli	r18,r2,3
 80055c8:	98c0004c 	andi	r3,r19,1
 80055cc:	0005883a 	mov	r2,zero
 80055d0:	9464b03a 	or	r18,r18,r17
 80055d4:	003e4106 	br	8004edc <__alt_data_end+0xfc004edc>
 80055d8:	1007883a 	mov	r3,r2
 80055dc:	0023883a 	mov	r17,zero
 80055e0:	880a927a 	slli	r5,r17,9
 80055e4:	1805883a 	mov	r2,r3
 80055e8:	8822977a 	slli	r17,r17,29
 80055ec:	280ad33a 	srli	r5,r5,12
 80055f0:	003ff406 	br	80055c4 <__alt_data_end+0xfc0055c4>
 80055f4:	10c003cc 	andi	r3,r2,15
 80055f8:	01000104 	movi	r4,4
 80055fc:	193ff626 	beq	r3,r4,80055d8 <__alt_data_end+0xfc0055d8>
 8005600:	0023883a 	mov	r17,zero
 8005604:	003fca06 	br	8005530 <__alt_data_end+0xfc005530>
 8005608:	813fd336 	bltu	r16,r4,8005558 <__alt_data_end+0xfc005558>
 800560c:	1023883a 	mov	r17,r2
 8005610:	003fa806 	br	80054b4 <__alt_data_end+0xfc0054b4>
 8005614:	b0ffd636 	bltu	r22,r3,8005570 <__alt_data_end+0xfc005570>
 8005618:	1011883a 	mov	r8,r2
 800561c:	b0ff341e 	bne	r22,r3,80052f0 <__alt_data_end+0xfc0052f0>
 8005620:	003f3406 	br	80052f4 <__alt_data_end+0xfc0052f4>
 8005624:	0005883a 	mov	r2,zero
 8005628:	003fe006 	br	80055ac <__alt_data_end+0xfc0055ac>
 800562c:	00800434 	movhi	r2,16
 8005630:	89400234 	orhi	r5,r17,8
 8005634:	10bfffc4 	addi	r2,r2,-1
 8005638:	b807883a 	mov	r3,r23
 800563c:	288a703a 	and	r5,r5,r2
 8005640:	4025883a 	mov	r18,r8
 8005644:	003e8206 	br	8005050 <__alt_data_end+0xfc005050>

08005648 <__eqdf2>:
 8005648:	2804d53a 	srli	r2,r5,20
 800564c:	3806d53a 	srli	r3,r7,20
 8005650:	02000434 	movhi	r8,16
 8005654:	423fffc4 	addi	r8,r8,-1
 8005658:	1081ffcc 	andi	r2,r2,2047
 800565c:	0281ffc4 	movi	r10,2047
 8005660:	2a12703a 	and	r9,r5,r8
 8005664:	18c1ffcc 	andi	r3,r3,2047
 8005668:	3a10703a 	and	r8,r7,r8
 800566c:	280ad7fa 	srli	r5,r5,31
 8005670:	380ed7fa 	srli	r7,r7,31
 8005674:	12801026 	beq	r2,r10,80056b8 <__eqdf2+0x70>
 8005678:	0281ffc4 	movi	r10,2047
 800567c:	1a800a26 	beq	r3,r10,80056a8 <__eqdf2+0x60>
 8005680:	10c00226 	beq	r2,r3,800568c <__eqdf2+0x44>
 8005684:	00800044 	movi	r2,1
 8005688:	f800283a 	ret
 800568c:	4a3ffd1e 	bne	r9,r8,8005684 <__alt_data_end+0xfc005684>
 8005690:	21bffc1e 	bne	r4,r6,8005684 <__alt_data_end+0xfc005684>
 8005694:	29c00c26 	beq	r5,r7,80056c8 <__eqdf2+0x80>
 8005698:	103ffa1e 	bne	r2,zero,8005684 <__alt_data_end+0xfc005684>
 800569c:	2244b03a 	or	r2,r4,r9
 80056a0:	1004c03a 	cmpne	r2,r2,zero
 80056a4:	f800283a 	ret
 80056a8:	3214b03a 	or	r10,r6,r8
 80056ac:	503ff426 	beq	r10,zero,8005680 <__alt_data_end+0xfc005680>
 80056b0:	00800044 	movi	r2,1
 80056b4:	f800283a 	ret
 80056b8:	2254b03a 	or	r10,r4,r9
 80056bc:	503fee26 	beq	r10,zero,8005678 <__alt_data_end+0xfc005678>
 80056c0:	00800044 	movi	r2,1
 80056c4:	f800283a 	ret
 80056c8:	0005883a 	mov	r2,zero
 80056cc:	f800283a 	ret

080056d0 <__gedf2>:
 80056d0:	2804d53a 	srli	r2,r5,20
 80056d4:	3806d53a 	srli	r3,r7,20
 80056d8:	02000434 	movhi	r8,16
 80056dc:	423fffc4 	addi	r8,r8,-1
 80056e0:	1081ffcc 	andi	r2,r2,2047
 80056e4:	0241ffc4 	movi	r9,2047
 80056e8:	2a14703a 	and	r10,r5,r8
 80056ec:	18c1ffcc 	andi	r3,r3,2047
 80056f0:	3a10703a 	and	r8,r7,r8
 80056f4:	280ad7fa 	srli	r5,r5,31
 80056f8:	380ed7fa 	srli	r7,r7,31
 80056fc:	12401d26 	beq	r2,r9,8005774 <__gedf2+0xa4>
 8005700:	0241ffc4 	movi	r9,2047
 8005704:	1a401226 	beq	r3,r9,8005750 <__gedf2+0x80>
 8005708:	1000081e 	bne	r2,zero,800572c <__gedf2+0x5c>
 800570c:	2296b03a 	or	r11,r4,r10
 8005710:	5813003a 	cmpeq	r9,r11,zero
 8005714:	1800091e 	bne	r3,zero,800573c <__gedf2+0x6c>
 8005718:	3218b03a 	or	r12,r6,r8
 800571c:	6000071e 	bne	r12,zero,800573c <__gedf2+0x6c>
 8005720:	0005883a 	mov	r2,zero
 8005724:	5800101e 	bne	r11,zero,8005768 <__gedf2+0x98>
 8005728:	f800283a 	ret
 800572c:	18000c1e 	bne	r3,zero,8005760 <__gedf2+0x90>
 8005730:	3212b03a 	or	r9,r6,r8
 8005734:	48000c26 	beq	r9,zero,8005768 <__gedf2+0x98>
 8005738:	0013883a 	mov	r9,zero
 800573c:	39c03fcc 	andi	r7,r7,255
 8005740:	48000826 	beq	r9,zero,8005764 <__gedf2+0x94>
 8005744:	38000926 	beq	r7,zero,800576c <__gedf2+0x9c>
 8005748:	00800044 	movi	r2,1
 800574c:	f800283a 	ret
 8005750:	3212b03a 	or	r9,r6,r8
 8005754:	483fec26 	beq	r9,zero,8005708 <__alt_data_end+0xfc005708>
 8005758:	00bfff84 	movi	r2,-2
 800575c:	f800283a 	ret
 8005760:	39c03fcc 	andi	r7,r7,255
 8005764:	29c00626 	beq	r5,r7,8005780 <__gedf2+0xb0>
 8005768:	283ff726 	beq	r5,zero,8005748 <__alt_data_end+0xfc005748>
 800576c:	00bfffc4 	movi	r2,-1
 8005770:	f800283a 	ret
 8005774:	2292b03a 	or	r9,r4,r10
 8005778:	483fe126 	beq	r9,zero,8005700 <__alt_data_end+0xfc005700>
 800577c:	003ff606 	br	8005758 <__alt_data_end+0xfc005758>
 8005780:	18bff916 	blt	r3,r2,8005768 <__alt_data_end+0xfc005768>
 8005784:	10c00316 	blt	r2,r3,8005794 <__gedf2+0xc4>
 8005788:	42bff736 	bltu	r8,r10,8005768 <__alt_data_end+0xfc005768>
 800578c:	52000326 	beq	r10,r8,800579c <__gedf2+0xcc>
 8005790:	5200042e 	bgeu	r10,r8,80057a4 <__gedf2+0xd4>
 8005794:	283fec1e 	bne	r5,zero,8005748 <__alt_data_end+0xfc005748>
 8005798:	003ff406 	br	800576c <__alt_data_end+0xfc00576c>
 800579c:	313ff236 	bltu	r6,r4,8005768 <__alt_data_end+0xfc005768>
 80057a0:	21bffc36 	bltu	r4,r6,8005794 <__alt_data_end+0xfc005794>
 80057a4:	0005883a 	mov	r2,zero
 80057a8:	f800283a 	ret

080057ac <__ledf2>:
 80057ac:	2804d53a 	srli	r2,r5,20
 80057b0:	3810d53a 	srli	r8,r7,20
 80057b4:	00c00434 	movhi	r3,16
 80057b8:	18ffffc4 	addi	r3,r3,-1
 80057bc:	1081ffcc 	andi	r2,r2,2047
 80057c0:	0241ffc4 	movi	r9,2047
 80057c4:	28d4703a 	and	r10,r5,r3
 80057c8:	4201ffcc 	andi	r8,r8,2047
 80057cc:	38c6703a 	and	r3,r7,r3
 80057d0:	280ad7fa 	srli	r5,r5,31
 80057d4:	380ed7fa 	srli	r7,r7,31
 80057d8:	12401f26 	beq	r2,r9,8005858 <__ledf2+0xac>
 80057dc:	0241ffc4 	movi	r9,2047
 80057e0:	42401426 	beq	r8,r9,8005834 <__ledf2+0x88>
 80057e4:	1000091e 	bne	r2,zero,800580c <__ledf2+0x60>
 80057e8:	2296b03a 	or	r11,r4,r10
 80057ec:	5813003a 	cmpeq	r9,r11,zero
 80057f0:	29403fcc 	andi	r5,r5,255
 80057f4:	40000a1e 	bne	r8,zero,8005820 <__ledf2+0x74>
 80057f8:	30d8b03a 	or	r12,r6,r3
 80057fc:	6000081e 	bne	r12,zero,8005820 <__ledf2+0x74>
 8005800:	0005883a 	mov	r2,zero
 8005804:	5800111e 	bne	r11,zero,800584c <__ledf2+0xa0>
 8005808:	f800283a 	ret
 800580c:	29403fcc 	andi	r5,r5,255
 8005810:	40000c1e 	bne	r8,zero,8005844 <__ledf2+0x98>
 8005814:	30d2b03a 	or	r9,r6,r3
 8005818:	48000c26 	beq	r9,zero,800584c <__ledf2+0xa0>
 800581c:	0013883a 	mov	r9,zero
 8005820:	39c03fcc 	andi	r7,r7,255
 8005824:	48000826 	beq	r9,zero,8005848 <__ledf2+0x9c>
 8005828:	38001126 	beq	r7,zero,8005870 <__ledf2+0xc4>
 800582c:	00800044 	movi	r2,1
 8005830:	f800283a 	ret
 8005834:	30d2b03a 	or	r9,r6,r3
 8005838:	483fea26 	beq	r9,zero,80057e4 <__alt_data_end+0xfc0057e4>
 800583c:	00800084 	movi	r2,2
 8005840:	f800283a 	ret
 8005844:	39c03fcc 	andi	r7,r7,255
 8005848:	39400726 	beq	r7,r5,8005868 <__ledf2+0xbc>
 800584c:	2800081e 	bne	r5,zero,8005870 <__ledf2+0xc4>
 8005850:	00800044 	movi	r2,1
 8005854:	f800283a 	ret
 8005858:	2292b03a 	or	r9,r4,r10
 800585c:	483fdf26 	beq	r9,zero,80057dc <__alt_data_end+0xfc0057dc>
 8005860:	00800084 	movi	r2,2
 8005864:	f800283a 	ret
 8005868:	4080030e 	bge	r8,r2,8005878 <__ledf2+0xcc>
 800586c:	383fef26 	beq	r7,zero,800582c <__alt_data_end+0xfc00582c>
 8005870:	00bfffc4 	movi	r2,-1
 8005874:	f800283a 	ret
 8005878:	123feb16 	blt	r2,r8,8005828 <__alt_data_end+0xfc005828>
 800587c:	1abff336 	bltu	r3,r10,800584c <__alt_data_end+0xfc00584c>
 8005880:	50c00326 	beq	r10,r3,8005890 <__ledf2+0xe4>
 8005884:	50c0042e 	bgeu	r10,r3,8005898 <__ledf2+0xec>
 8005888:	283fe81e 	bne	r5,zero,800582c <__alt_data_end+0xfc00582c>
 800588c:	003ff806 	br	8005870 <__alt_data_end+0xfc005870>
 8005890:	313fee36 	bltu	r6,r4,800584c <__alt_data_end+0xfc00584c>
 8005894:	21bffc36 	bltu	r4,r6,8005888 <__alt_data_end+0xfc005888>
 8005898:	0005883a 	mov	r2,zero
 800589c:	f800283a 	ret

080058a0 <__muldf3>:
 80058a0:	defff304 	addi	sp,sp,-52
 80058a4:	2804d53a 	srli	r2,r5,20
 80058a8:	dd800915 	stw	r22,36(sp)
 80058ac:	282cd7fa 	srli	r22,r5,31
 80058b0:	dc000315 	stw	r16,12(sp)
 80058b4:	04000434 	movhi	r16,16
 80058b8:	dd400815 	stw	r21,32(sp)
 80058bc:	dc800515 	stw	r18,20(sp)
 80058c0:	843fffc4 	addi	r16,r16,-1
 80058c4:	dfc00c15 	stw	ra,48(sp)
 80058c8:	df000b15 	stw	fp,44(sp)
 80058cc:	ddc00a15 	stw	r23,40(sp)
 80058d0:	dd000715 	stw	r20,28(sp)
 80058d4:	dcc00615 	stw	r19,24(sp)
 80058d8:	dc400415 	stw	r17,16(sp)
 80058dc:	1481ffcc 	andi	r18,r2,2047
 80058e0:	2c20703a 	and	r16,r5,r16
 80058e4:	b02b883a 	mov	r21,r22
 80058e8:	b2403fcc 	andi	r9,r22,255
 80058ec:	90006026 	beq	r18,zero,8005a70 <__muldf3+0x1d0>
 80058f0:	0081ffc4 	movi	r2,2047
 80058f4:	2029883a 	mov	r20,r4
 80058f8:	90803626 	beq	r18,r2,80059d4 <__muldf3+0x134>
 80058fc:	80800434 	orhi	r2,r16,16
 8005900:	100490fa 	slli	r2,r2,3
 8005904:	2020d77a 	srli	r16,r4,29
 8005908:	202890fa 	slli	r20,r4,3
 800590c:	94bf0044 	addi	r18,r18,-1023
 8005910:	80a0b03a 	or	r16,r16,r2
 8005914:	0027883a 	mov	r19,zero
 8005918:	0039883a 	mov	fp,zero
 800591c:	3804d53a 	srli	r2,r7,20
 8005920:	382ed7fa 	srli	r23,r7,31
 8005924:	04400434 	movhi	r17,16
 8005928:	8c7fffc4 	addi	r17,r17,-1
 800592c:	1081ffcc 	andi	r2,r2,2047
 8005930:	3011883a 	mov	r8,r6
 8005934:	3c62703a 	and	r17,r7,r17
 8005938:	ba803fcc 	andi	r10,r23,255
 800593c:	10006d26 	beq	r2,zero,8005af4 <__muldf3+0x254>
 8005940:	00c1ffc4 	movi	r3,2047
 8005944:	10c06526 	beq	r2,r3,8005adc <__muldf3+0x23c>
 8005948:	88c00434 	orhi	r3,r17,16
 800594c:	180690fa 	slli	r3,r3,3
 8005950:	3022d77a 	srli	r17,r6,29
 8005954:	301090fa 	slli	r8,r6,3
 8005958:	10bf0044 	addi	r2,r2,-1023
 800595c:	88e2b03a 	or	r17,r17,r3
 8005960:	000b883a 	mov	r5,zero
 8005964:	9085883a 	add	r2,r18,r2
 8005968:	2cc8b03a 	or	r4,r5,r19
 800596c:	00c003c4 	movi	r3,15
 8005970:	bdacf03a 	xor	r22,r23,r22
 8005974:	12c00044 	addi	r11,r2,1
 8005978:	19009936 	bltu	r3,r4,8005be0 <__muldf3+0x340>
 800597c:	200890ba 	slli	r4,r4,2
 8005980:	00c20034 	movhi	r3,2048
 8005984:	18d66504 	addi	r3,r3,22932
 8005988:	20c9883a 	add	r4,r4,r3
 800598c:	20c00017 	ldw	r3,0(r4)
 8005990:	1800683a 	jmp	r3
 8005994:	08005be0 	cmpeqi	zero,at,367
 8005998:	080059f4 	orhi	zero,at,359
 800599c:	080059f4 	orhi	zero,at,359
 80059a0:	080059f0 	cmpltui	zero,at,359
 80059a4:	08005bbc 	xorhi	zero,at,366
 80059a8:	08005bbc 	xorhi	zero,at,366
 80059ac:	08005ba4 	muli	zero,at,366
 80059b0:	080059f0 	cmpltui	zero,at,359
 80059b4:	08005bbc 	xorhi	zero,at,366
 80059b8:	08005ba4 	muli	zero,at,366
 80059bc:	08005bbc 	xorhi	zero,at,366
 80059c0:	080059f0 	cmpltui	zero,at,359
 80059c4:	08005bcc 	andi	zero,at,367
 80059c8:	08005bcc 	andi	zero,at,367
 80059cc:	08005bcc 	andi	zero,at,367
 80059d0:	08005de8 	cmpgeui	zero,at,375
 80059d4:	2404b03a 	or	r2,r4,r16
 80059d8:	10006f1e 	bne	r2,zero,8005b98 <__muldf3+0x2f8>
 80059dc:	04c00204 	movi	r19,8
 80059e0:	0021883a 	mov	r16,zero
 80059e4:	0029883a 	mov	r20,zero
 80059e8:	07000084 	movi	fp,2
 80059ec:	003fcb06 	br	800591c <__alt_data_end+0xfc00591c>
 80059f0:	502d883a 	mov	r22,r10
 80059f4:	00800084 	movi	r2,2
 80059f8:	28805726 	beq	r5,r2,8005b58 <__muldf3+0x2b8>
 80059fc:	008000c4 	movi	r2,3
 8005a00:	28816626 	beq	r5,r2,8005f9c <__muldf3+0x6fc>
 8005a04:	00800044 	movi	r2,1
 8005a08:	2881411e 	bne	r5,r2,8005f10 <__muldf3+0x670>
 8005a0c:	b02b883a 	mov	r21,r22
 8005a10:	0005883a 	mov	r2,zero
 8005a14:	000b883a 	mov	r5,zero
 8005a18:	0029883a 	mov	r20,zero
 8005a1c:	1004953a 	slli	r2,r2,20
 8005a20:	a8c03fcc 	andi	r3,r21,255
 8005a24:	04400434 	movhi	r17,16
 8005a28:	8c7fffc4 	addi	r17,r17,-1
 8005a2c:	180697fa 	slli	r3,r3,31
 8005a30:	2c4a703a 	and	r5,r5,r17
 8005a34:	288ab03a 	or	r5,r5,r2
 8005a38:	28c6b03a 	or	r3,r5,r3
 8005a3c:	a005883a 	mov	r2,r20
 8005a40:	dfc00c17 	ldw	ra,48(sp)
 8005a44:	df000b17 	ldw	fp,44(sp)
 8005a48:	ddc00a17 	ldw	r23,40(sp)
 8005a4c:	dd800917 	ldw	r22,36(sp)
 8005a50:	dd400817 	ldw	r21,32(sp)
 8005a54:	dd000717 	ldw	r20,28(sp)
 8005a58:	dcc00617 	ldw	r19,24(sp)
 8005a5c:	dc800517 	ldw	r18,20(sp)
 8005a60:	dc400417 	ldw	r17,16(sp)
 8005a64:	dc000317 	ldw	r16,12(sp)
 8005a68:	dec00d04 	addi	sp,sp,52
 8005a6c:	f800283a 	ret
 8005a70:	2404b03a 	or	r2,r4,r16
 8005a74:	2027883a 	mov	r19,r4
 8005a78:	10004226 	beq	r2,zero,8005b84 <__muldf3+0x2e4>
 8005a7c:	8000fc26 	beq	r16,zero,8005e70 <__muldf3+0x5d0>
 8005a80:	8009883a 	mov	r4,r16
 8005a84:	d9800215 	stw	r6,8(sp)
 8005a88:	d9c00015 	stw	r7,0(sp)
 8005a8c:	da400115 	stw	r9,4(sp)
 8005a90:	8006cc80 	call	8006cc8 <__clzsi2>
 8005a94:	d9800217 	ldw	r6,8(sp)
 8005a98:	d9c00017 	ldw	r7,0(sp)
 8005a9c:	da400117 	ldw	r9,4(sp)
 8005aa0:	113ffd44 	addi	r4,r2,-11
 8005aa4:	00c00704 	movi	r3,28
 8005aa8:	1900ed16 	blt	r3,r4,8005e60 <__muldf3+0x5c0>
 8005aac:	00c00744 	movi	r3,29
 8005ab0:	147ffe04 	addi	r17,r2,-8
 8005ab4:	1907c83a 	sub	r3,r3,r4
 8005ab8:	8460983a 	sll	r16,r16,r17
 8005abc:	98c6d83a 	srl	r3,r19,r3
 8005ac0:	9c68983a 	sll	r20,r19,r17
 8005ac4:	1c20b03a 	or	r16,r3,r16
 8005ac8:	1080fcc4 	addi	r2,r2,1011
 8005acc:	00a5c83a 	sub	r18,zero,r2
 8005ad0:	0027883a 	mov	r19,zero
 8005ad4:	0039883a 	mov	fp,zero
 8005ad8:	003f9006 	br	800591c <__alt_data_end+0xfc00591c>
 8005adc:	3446b03a 	or	r3,r6,r17
 8005ae0:	1800261e 	bne	r3,zero,8005b7c <__muldf3+0x2dc>
 8005ae4:	0023883a 	mov	r17,zero
 8005ae8:	0011883a 	mov	r8,zero
 8005aec:	01400084 	movi	r5,2
 8005af0:	003f9c06 	br	8005964 <__alt_data_end+0xfc005964>
 8005af4:	3446b03a 	or	r3,r6,r17
 8005af8:	18001c26 	beq	r3,zero,8005b6c <__muldf3+0x2cc>
 8005afc:	8800ce26 	beq	r17,zero,8005e38 <__muldf3+0x598>
 8005b00:	8809883a 	mov	r4,r17
 8005b04:	d9800215 	stw	r6,8(sp)
 8005b08:	da400115 	stw	r9,4(sp)
 8005b0c:	da800015 	stw	r10,0(sp)
 8005b10:	8006cc80 	call	8006cc8 <__clzsi2>
 8005b14:	d9800217 	ldw	r6,8(sp)
 8005b18:	da400117 	ldw	r9,4(sp)
 8005b1c:	da800017 	ldw	r10,0(sp)
 8005b20:	113ffd44 	addi	r4,r2,-11
 8005b24:	00c00704 	movi	r3,28
 8005b28:	1900bf16 	blt	r3,r4,8005e28 <__muldf3+0x588>
 8005b2c:	00c00744 	movi	r3,29
 8005b30:	123ffe04 	addi	r8,r2,-8
 8005b34:	1907c83a 	sub	r3,r3,r4
 8005b38:	8a22983a 	sll	r17,r17,r8
 8005b3c:	30c6d83a 	srl	r3,r6,r3
 8005b40:	3210983a 	sll	r8,r6,r8
 8005b44:	1c62b03a 	or	r17,r3,r17
 8005b48:	1080fcc4 	addi	r2,r2,1011
 8005b4c:	0085c83a 	sub	r2,zero,r2
 8005b50:	000b883a 	mov	r5,zero
 8005b54:	003f8306 	br	8005964 <__alt_data_end+0xfc005964>
 8005b58:	b02b883a 	mov	r21,r22
 8005b5c:	0081ffc4 	movi	r2,2047
 8005b60:	000b883a 	mov	r5,zero
 8005b64:	0029883a 	mov	r20,zero
 8005b68:	003fac06 	br	8005a1c <__alt_data_end+0xfc005a1c>
 8005b6c:	0023883a 	mov	r17,zero
 8005b70:	0011883a 	mov	r8,zero
 8005b74:	01400044 	movi	r5,1
 8005b78:	003f7a06 	br	8005964 <__alt_data_end+0xfc005964>
 8005b7c:	014000c4 	movi	r5,3
 8005b80:	003f7806 	br	8005964 <__alt_data_end+0xfc005964>
 8005b84:	04c00104 	movi	r19,4
 8005b88:	0021883a 	mov	r16,zero
 8005b8c:	0029883a 	mov	r20,zero
 8005b90:	07000044 	movi	fp,1
 8005b94:	003f6106 	br	800591c <__alt_data_end+0xfc00591c>
 8005b98:	04c00304 	movi	r19,12
 8005b9c:	070000c4 	movi	fp,3
 8005ba0:	003f5e06 	br	800591c <__alt_data_end+0xfc00591c>
 8005ba4:	01400434 	movhi	r5,16
 8005ba8:	002b883a 	mov	r21,zero
 8005bac:	297fffc4 	addi	r5,r5,-1
 8005bb0:	053fffc4 	movi	r20,-1
 8005bb4:	0081ffc4 	movi	r2,2047
 8005bb8:	003f9806 	br	8005a1c <__alt_data_end+0xfc005a1c>
 8005bbc:	8023883a 	mov	r17,r16
 8005bc0:	a011883a 	mov	r8,r20
 8005bc4:	e00b883a 	mov	r5,fp
 8005bc8:	003f8a06 	br	80059f4 <__alt_data_end+0xfc0059f4>
 8005bcc:	8023883a 	mov	r17,r16
 8005bd0:	a011883a 	mov	r8,r20
 8005bd4:	482d883a 	mov	r22,r9
 8005bd8:	e00b883a 	mov	r5,fp
 8005bdc:	003f8506 	br	80059f4 <__alt_data_end+0xfc0059f4>
 8005be0:	a00ad43a 	srli	r5,r20,16
 8005be4:	401ad43a 	srli	r13,r8,16
 8005be8:	a53fffcc 	andi	r20,r20,65535
 8005bec:	423fffcc 	andi	r8,r8,65535
 8005bf0:	4519383a 	mul	r12,r8,r20
 8005bf4:	4147383a 	mul	r3,r8,r5
 8005bf8:	6d09383a 	mul	r4,r13,r20
 8005bfc:	600cd43a 	srli	r6,r12,16
 8005c00:	2b5d383a 	mul	r14,r5,r13
 8005c04:	20c9883a 	add	r4,r4,r3
 8005c08:	310d883a 	add	r6,r6,r4
 8005c0c:	30c0022e 	bgeu	r6,r3,8005c18 <__muldf3+0x378>
 8005c10:	00c00074 	movhi	r3,1
 8005c14:	70dd883a 	add	r14,r14,r3
 8005c18:	8826d43a 	srli	r19,r17,16
 8005c1c:	8bffffcc 	andi	r15,r17,65535
 8005c20:	7d23383a 	mul	r17,r15,r20
 8005c24:	7949383a 	mul	r4,r15,r5
 8005c28:	9d29383a 	mul	r20,r19,r20
 8005c2c:	8814d43a 	srli	r10,r17,16
 8005c30:	3012943a 	slli	r9,r6,16
 8005c34:	a129883a 	add	r20,r20,r4
 8005c38:	633fffcc 	andi	r12,r12,65535
 8005c3c:	5515883a 	add	r10,r10,r20
 8005c40:	3006d43a 	srli	r3,r6,16
 8005c44:	4b13883a 	add	r9,r9,r12
 8005c48:	2ccb383a 	mul	r5,r5,r19
 8005c4c:	5100022e 	bgeu	r10,r4,8005c58 <__muldf3+0x3b8>
 8005c50:	01000074 	movhi	r4,1
 8005c54:	290b883a 	add	r5,r5,r4
 8005c58:	802ad43a 	srli	r21,r16,16
 8005c5c:	843fffcc 	andi	r16,r16,65535
 8005c60:	440d383a 	mul	r6,r8,r16
 8005c64:	4565383a 	mul	r18,r8,r21
 8005c68:	8349383a 	mul	r4,r16,r13
 8005c6c:	500e943a 	slli	r7,r10,16
 8005c70:	3010d43a 	srli	r8,r6,16
 8005c74:	5028d43a 	srli	r20,r10,16
 8005c78:	2489883a 	add	r4,r4,r18
 8005c7c:	8abfffcc 	andi	r10,r17,65535
 8005c80:	3a95883a 	add	r10,r7,r10
 8005c84:	4119883a 	add	r12,r8,r4
 8005c88:	a169883a 	add	r20,r20,r5
 8005c8c:	1a87883a 	add	r3,r3,r10
 8005c90:	6d5b383a 	mul	r13,r13,r21
 8005c94:	6480022e 	bgeu	r12,r18,8005ca0 <__muldf3+0x400>
 8005c98:	01000074 	movhi	r4,1
 8005c9c:	691b883a 	add	r13,r13,r4
 8005ca0:	7c25383a 	mul	r18,r15,r16
 8005ca4:	7d4b383a 	mul	r5,r15,r21
 8005ca8:	84cf383a 	mul	r7,r16,r19
 8005cac:	901ed43a 	srli	r15,r18,16
 8005cb0:	6008d43a 	srli	r4,r12,16
 8005cb4:	6010943a 	slli	r8,r12,16
 8005cb8:	394f883a 	add	r7,r7,r5
 8005cbc:	333fffcc 	andi	r12,r6,65535
 8005cc0:	79df883a 	add	r15,r15,r7
 8005cc4:	235b883a 	add	r13,r4,r13
 8005cc8:	9d63383a 	mul	r17,r19,r21
 8005ccc:	4309883a 	add	r4,r8,r12
 8005cd0:	7940022e 	bgeu	r15,r5,8005cdc <__muldf3+0x43c>
 8005cd4:	01400074 	movhi	r5,1
 8005cd8:	8963883a 	add	r17,r17,r5
 8005cdc:	780a943a 	slli	r5,r15,16
 8005ce0:	91bfffcc 	andi	r6,r18,65535
 8005ce4:	70c7883a 	add	r3,r14,r3
 8005ce8:	298d883a 	add	r6,r5,r6
 8005cec:	1a8f803a 	cmpltu	r7,r3,r10
 8005cf0:	350b883a 	add	r5,r6,r20
 8005cf4:	20c7883a 	add	r3,r4,r3
 8005cf8:	3955883a 	add	r10,r7,r5
 8005cfc:	1909803a 	cmpltu	r4,r3,r4
 8005d00:	6a91883a 	add	r8,r13,r10
 8005d04:	780cd43a 	srli	r6,r15,16
 8005d08:	2219883a 	add	r12,r4,r8
 8005d0c:	2d0b803a 	cmpltu	r5,r5,r20
 8005d10:	51cf803a 	cmpltu	r7,r10,r7
 8005d14:	29ceb03a 	or	r7,r5,r7
 8005d18:	4351803a 	cmpltu	r8,r8,r13
 8005d1c:	610b803a 	cmpltu	r5,r12,r4
 8005d20:	4148b03a 	or	r4,r8,r5
 8005d24:	398f883a 	add	r7,r7,r6
 8005d28:	3909883a 	add	r4,r7,r4
 8005d2c:	1810927a 	slli	r8,r3,9
 8005d30:	2449883a 	add	r4,r4,r17
 8005d34:	2008927a 	slli	r4,r4,9
 8005d38:	6022d5fa 	srli	r17,r12,23
 8005d3c:	1806d5fa 	srli	r3,r3,23
 8005d40:	4252b03a 	or	r9,r8,r9
 8005d44:	600a927a 	slli	r5,r12,9
 8005d48:	4810c03a 	cmpne	r8,r9,zero
 8005d4c:	2462b03a 	or	r17,r4,r17
 8005d50:	40c6b03a 	or	r3,r8,r3
 8005d54:	8900402c 	andhi	r4,r17,256
 8005d58:	1950b03a 	or	r8,r3,r5
 8005d5c:	20000726 	beq	r4,zero,8005d7c <__muldf3+0x4dc>
 8005d60:	4006d07a 	srli	r3,r8,1
 8005d64:	880497fa 	slli	r2,r17,31
 8005d68:	4200004c 	andi	r8,r8,1
 8005d6c:	8822d07a 	srli	r17,r17,1
 8005d70:	1a10b03a 	or	r8,r3,r8
 8005d74:	1210b03a 	or	r8,r2,r8
 8005d78:	5805883a 	mov	r2,r11
 8005d7c:	1140ffc4 	addi	r5,r2,1023
 8005d80:	0140440e 	bge	zero,r5,8005e94 <__muldf3+0x5f4>
 8005d84:	40c001cc 	andi	r3,r8,7
 8005d88:	18000726 	beq	r3,zero,8005da8 <__muldf3+0x508>
 8005d8c:	40c003cc 	andi	r3,r8,15
 8005d90:	01000104 	movi	r4,4
 8005d94:	19000426 	beq	r3,r4,8005da8 <__muldf3+0x508>
 8005d98:	4107883a 	add	r3,r8,r4
 8005d9c:	1a11803a 	cmpltu	r8,r3,r8
 8005da0:	8a23883a 	add	r17,r17,r8
 8005da4:	1811883a 	mov	r8,r3
 8005da8:	88c0402c 	andhi	r3,r17,256
 8005dac:	18000426 	beq	r3,zero,8005dc0 <__muldf3+0x520>
 8005db0:	11410004 	addi	r5,r2,1024
 8005db4:	00bfc034 	movhi	r2,65280
 8005db8:	10bfffc4 	addi	r2,r2,-1
 8005dbc:	88a2703a 	and	r17,r17,r2
 8005dc0:	0081ff84 	movi	r2,2046
 8005dc4:	117f6416 	blt	r2,r5,8005b58 <__alt_data_end+0xfc005b58>
 8005dc8:	8828977a 	slli	r20,r17,29
 8005dcc:	4010d0fa 	srli	r8,r8,3
 8005dd0:	8822927a 	slli	r17,r17,9
 8005dd4:	2881ffcc 	andi	r2,r5,2047
 8005dd8:	a228b03a 	or	r20,r20,r8
 8005ddc:	880ad33a 	srli	r5,r17,12
 8005de0:	b02b883a 	mov	r21,r22
 8005de4:	003f0d06 	br	8005a1c <__alt_data_end+0xfc005a1c>
 8005de8:	8080022c 	andhi	r2,r16,8
 8005dec:	10000926 	beq	r2,zero,8005e14 <__muldf3+0x574>
 8005df0:	8880022c 	andhi	r2,r17,8
 8005df4:	1000071e 	bne	r2,zero,8005e14 <__muldf3+0x574>
 8005df8:	00800434 	movhi	r2,16
 8005dfc:	89400234 	orhi	r5,r17,8
 8005e00:	10bfffc4 	addi	r2,r2,-1
 8005e04:	b82b883a 	mov	r21,r23
 8005e08:	288a703a 	and	r5,r5,r2
 8005e0c:	4029883a 	mov	r20,r8
 8005e10:	003f6806 	br	8005bb4 <__alt_data_end+0xfc005bb4>
 8005e14:	00800434 	movhi	r2,16
 8005e18:	81400234 	orhi	r5,r16,8
 8005e1c:	10bfffc4 	addi	r2,r2,-1
 8005e20:	288a703a 	and	r5,r5,r2
 8005e24:	003f6306 	br	8005bb4 <__alt_data_end+0xfc005bb4>
 8005e28:	147ff604 	addi	r17,r2,-40
 8005e2c:	3462983a 	sll	r17,r6,r17
 8005e30:	0011883a 	mov	r8,zero
 8005e34:	003f4406 	br	8005b48 <__alt_data_end+0xfc005b48>
 8005e38:	3009883a 	mov	r4,r6
 8005e3c:	d9800215 	stw	r6,8(sp)
 8005e40:	da400115 	stw	r9,4(sp)
 8005e44:	da800015 	stw	r10,0(sp)
 8005e48:	8006cc80 	call	8006cc8 <__clzsi2>
 8005e4c:	10800804 	addi	r2,r2,32
 8005e50:	da800017 	ldw	r10,0(sp)
 8005e54:	da400117 	ldw	r9,4(sp)
 8005e58:	d9800217 	ldw	r6,8(sp)
 8005e5c:	003f3006 	br	8005b20 <__alt_data_end+0xfc005b20>
 8005e60:	143ff604 	addi	r16,r2,-40
 8005e64:	9c20983a 	sll	r16,r19,r16
 8005e68:	0029883a 	mov	r20,zero
 8005e6c:	003f1606 	br	8005ac8 <__alt_data_end+0xfc005ac8>
 8005e70:	d9800215 	stw	r6,8(sp)
 8005e74:	d9c00015 	stw	r7,0(sp)
 8005e78:	da400115 	stw	r9,4(sp)
 8005e7c:	8006cc80 	call	8006cc8 <__clzsi2>
 8005e80:	10800804 	addi	r2,r2,32
 8005e84:	da400117 	ldw	r9,4(sp)
 8005e88:	d9c00017 	ldw	r7,0(sp)
 8005e8c:	d9800217 	ldw	r6,8(sp)
 8005e90:	003f0306 	br	8005aa0 <__alt_data_end+0xfc005aa0>
 8005e94:	00c00044 	movi	r3,1
 8005e98:	1947c83a 	sub	r3,r3,r5
 8005e9c:	00800e04 	movi	r2,56
 8005ea0:	10feda16 	blt	r2,r3,8005a0c <__alt_data_end+0xfc005a0c>
 8005ea4:	008007c4 	movi	r2,31
 8005ea8:	10c01b16 	blt	r2,r3,8005f18 <__muldf3+0x678>
 8005eac:	00800804 	movi	r2,32
 8005eb0:	10c5c83a 	sub	r2,r2,r3
 8005eb4:	888a983a 	sll	r5,r17,r2
 8005eb8:	40c8d83a 	srl	r4,r8,r3
 8005ebc:	4084983a 	sll	r2,r8,r2
 8005ec0:	88e2d83a 	srl	r17,r17,r3
 8005ec4:	2906b03a 	or	r3,r5,r4
 8005ec8:	1004c03a 	cmpne	r2,r2,zero
 8005ecc:	1886b03a 	or	r3,r3,r2
 8005ed0:	188001cc 	andi	r2,r3,7
 8005ed4:	10000726 	beq	r2,zero,8005ef4 <__muldf3+0x654>
 8005ed8:	188003cc 	andi	r2,r3,15
 8005edc:	01000104 	movi	r4,4
 8005ee0:	11000426 	beq	r2,r4,8005ef4 <__muldf3+0x654>
 8005ee4:	1805883a 	mov	r2,r3
 8005ee8:	10c00104 	addi	r3,r2,4
 8005eec:	1885803a 	cmpltu	r2,r3,r2
 8005ef0:	88a3883a 	add	r17,r17,r2
 8005ef4:	8880202c 	andhi	r2,r17,128
 8005ef8:	10001c26 	beq	r2,zero,8005f6c <__muldf3+0x6cc>
 8005efc:	b02b883a 	mov	r21,r22
 8005f00:	00800044 	movi	r2,1
 8005f04:	000b883a 	mov	r5,zero
 8005f08:	0029883a 	mov	r20,zero
 8005f0c:	003ec306 	br	8005a1c <__alt_data_end+0xfc005a1c>
 8005f10:	5805883a 	mov	r2,r11
 8005f14:	003f9906 	br	8005d7c <__alt_data_end+0xfc005d7c>
 8005f18:	00bff844 	movi	r2,-31
 8005f1c:	1145c83a 	sub	r2,r2,r5
 8005f20:	8888d83a 	srl	r4,r17,r2
 8005f24:	00800804 	movi	r2,32
 8005f28:	18801a26 	beq	r3,r2,8005f94 <__muldf3+0x6f4>
 8005f2c:	00801004 	movi	r2,64
 8005f30:	10c5c83a 	sub	r2,r2,r3
 8005f34:	8884983a 	sll	r2,r17,r2
 8005f38:	1204b03a 	or	r2,r2,r8
 8005f3c:	1004c03a 	cmpne	r2,r2,zero
 8005f40:	2084b03a 	or	r2,r4,r2
 8005f44:	144001cc 	andi	r17,r2,7
 8005f48:	88000d1e 	bne	r17,zero,8005f80 <__muldf3+0x6e0>
 8005f4c:	000b883a 	mov	r5,zero
 8005f50:	1028d0fa 	srli	r20,r2,3
 8005f54:	b02b883a 	mov	r21,r22
 8005f58:	0005883a 	mov	r2,zero
 8005f5c:	a468b03a 	or	r20,r20,r17
 8005f60:	003eae06 	br	8005a1c <__alt_data_end+0xfc005a1c>
 8005f64:	1007883a 	mov	r3,r2
 8005f68:	0023883a 	mov	r17,zero
 8005f6c:	880a927a 	slli	r5,r17,9
 8005f70:	1805883a 	mov	r2,r3
 8005f74:	8822977a 	slli	r17,r17,29
 8005f78:	280ad33a 	srli	r5,r5,12
 8005f7c:	003ff406 	br	8005f50 <__alt_data_end+0xfc005f50>
 8005f80:	10c003cc 	andi	r3,r2,15
 8005f84:	01000104 	movi	r4,4
 8005f88:	193ff626 	beq	r3,r4,8005f64 <__alt_data_end+0xfc005f64>
 8005f8c:	0023883a 	mov	r17,zero
 8005f90:	003fd506 	br	8005ee8 <__alt_data_end+0xfc005ee8>
 8005f94:	0005883a 	mov	r2,zero
 8005f98:	003fe706 	br	8005f38 <__alt_data_end+0xfc005f38>
 8005f9c:	00800434 	movhi	r2,16
 8005fa0:	89400234 	orhi	r5,r17,8
 8005fa4:	10bfffc4 	addi	r2,r2,-1
 8005fa8:	b02b883a 	mov	r21,r22
 8005fac:	288a703a 	and	r5,r5,r2
 8005fb0:	4029883a 	mov	r20,r8
 8005fb4:	003eff06 	br	8005bb4 <__alt_data_end+0xfc005bb4>

08005fb8 <__subdf3>:
 8005fb8:	02000434 	movhi	r8,16
 8005fbc:	423fffc4 	addi	r8,r8,-1
 8005fc0:	defffb04 	addi	sp,sp,-20
 8005fc4:	2a14703a 	and	r10,r5,r8
 8005fc8:	3812d53a 	srli	r9,r7,20
 8005fcc:	3a10703a 	and	r8,r7,r8
 8005fd0:	2006d77a 	srli	r3,r4,29
 8005fd4:	3004d77a 	srli	r2,r6,29
 8005fd8:	dc000015 	stw	r16,0(sp)
 8005fdc:	501490fa 	slli	r10,r10,3
 8005fe0:	2820d53a 	srli	r16,r5,20
 8005fe4:	401090fa 	slli	r8,r8,3
 8005fe8:	dc800215 	stw	r18,8(sp)
 8005fec:	dc400115 	stw	r17,4(sp)
 8005ff0:	dfc00415 	stw	ra,16(sp)
 8005ff4:	202290fa 	slli	r17,r4,3
 8005ff8:	dcc00315 	stw	r19,12(sp)
 8005ffc:	4a41ffcc 	andi	r9,r9,2047
 8006000:	0101ffc4 	movi	r4,2047
 8006004:	2824d7fa 	srli	r18,r5,31
 8006008:	8401ffcc 	andi	r16,r16,2047
 800600c:	50c6b03a 	or	r3,r10,r3
 8006010:	380ed7fa 	srli	r7,r7,31
 8006014:	408ab03a 	or	r5,r8,r2
 8006018:	300c90fa 	slli	r6,r6,3
 800601c:	49009626 	beq	r9,r4,8006278 <__subdf3+0x2c0>
 8006020:	39c0005c 	xori	r7,r7,1
 8006024:	8245c83a 	sub	r2,r16,r9
 8006028:	3c807426 	beq	r7,r18,80061fc <__subdf3+0x244>
 800602c:	0080af0e 	bge	zero,r2,80062ec <__subdf3+0x334>
 8006030:	48002a1e 	bne	r9,zero,80060dc <__subdf3+0x124>
 8006034:	2988b03a 	or	r4,r5,r6
 8006038:	20009a1e 	bne	r4,zero,80062a4 <__subdf3+0x2ec>
 800603c:	888001cc 	andi	r2,r17,7
 8006040:	10000726 	beq	r2,zero,8006060 <__subdf3+0xa8>
 8006044:	888003cc 	andi	r2,r17,15
 8006048:	01000104 	movi	r4,4
 800604c:	11000426 	beq	r2,r4,8006060 <__subdf3+0xa8>
 8006050:	890b883a 	add	r5,r17,r4
 8006054:	2c63803a 	cmpltu	r17,r5,r17
 8006058:	1c47883a 	add	r3,r3,r17
 800605c:	2823883a 	mov	r17,r5
 8006060:	1880202c 	andhi	r2,r3,128
 8006064:	10005926 	beq	r2,zero,80061cc <__subdf3+0x214>
 8006068:	84000044 	addi	r16,r16,1
 800606c:	0081ffc4 	movi	r2,2047
 8006070:	8080be26 	beq	r16,r2,800636c <__subdf3+0x3b4>
 8006074:	017fe034 	movhi	r5,65408
 8006078:	297fffc4 	addi	r5,r5,-1
 800607c:	1946703a 	and	r3,r3,r5
 8006080:	1804977a 	slli	r2,r3,29
 8006084:	1806927a 	slli	r3,r3,9
 8006088:	8822d0fa 	srli	r17,r17,3
 800608c:	8401ffcc 	andi	r16,r16,2047
 8006090:	180ad33a 	srli	r5,r3,12
 8006094:	9100004c 	andi	r4,r18,1
 8006098:	1444b03a 	or	r2,r2,r17
 800609c:	80c1ffcc 	andi	r3,r16,2047
 80060a0:	1820953a 	slli	r16,r3,20
 80060a4:	20c03fcc 	andi	r3,r4,255
 80060a8:	180897fa 	slli	r4,r3,31
 80060ac:	00c00434 	movhi	r3,16
 80060b0:	18ffffc4 	addi	r3,r3,-1
 80060b4:	28c6703a 	and	r3,r5,r3
 80060b8:	1c06b03a 	or	r3,r3,r16
 80060bc:	1906b03a 	or	r3,r3,r4
 80060c0:	dfc00417 	ldw	ra,16(sp)
 80060c4:	dcc00317 	ldw	r19,12(sp)
 80060c8:	dc800217 	ldw	r18,8(sp)
 80060cc:	dc400117 	ldw	r17,4(sp)
 80060d0:	dc000017 	ldw	r16,0(sp)
 80060d4:	dec00504 	addi	sp,sp,20
 80060d8:	f800283a 	ret
 80060dc:	0101ffc4 	movi	r4,2047
 80060e0:	813fd626 	beq	r16,r4,800603c <__alt_data_end+0xfc00603c>
 80060e4:	29402034 	orhi	r5,r5,128
 80060e8:	01000e04 	movi	r4,56
 80060ec:	2080a316 	blt	r4,r2,800637c <__subdf3+0x3c4>
 80060f0:	010007c4 	movi	r4,31
 80060f4:	2080c616 	blt	r4,r2,8006410 <__subdf3+0x458>
 80060f8:	01000804 	movi	r4,32
 80060fc:	2089c83a 	sub	r4,r4,r2
 8006100:	2910983a 	sll	r8,r5,r4
 8006104:	308ed83a 	srl	r7,r6,r2
 8006108:	3108983a 	sll	r4,r6,r4
 800610c:	2884d83a 	srl	r2,r5,r2
 8006110:	41ccb03a 	or	r6,r8,r7
 8006114:	2008c03a 	cmpne	r4,r4,zero
 8006118:	310cb03a 	or	r6,r6,r4
 800611c:	898dc83a 	sub	r6,r17,r6
 8006120:	89a3803a 	cmpltu	r17,r17,r6
 8006124:	1887c83a 	sub	r3,r3,r2
 8006128:	1c47c83a 	sub	r3,r3,r17
 800612c:	3023883a 	mov	r17,r6
 8006130:	1880202c 	andhi	r2,r3,128
 8006134:	10002326 	beq	r2,zero,80061c4 <__subdf3+0x20c>
 8006138:	04c02034 	movhi	r19,128
 800613c:	9cffffc4 	addi	r19,r19,-1
 8006140:	1ce6703a 	and	r19,r3,r19
 8006144:	98007a26 	beq	r19,zero,8006330 <__subdf3+0x378>
 8006148:	9809883a 	mov	r4,r19
 800614c:	8006cc80 	call	8006cc8 <__clzsi2>
 8006150:	113ffe04 	addi	r4,r2,-8
 8006154:	00c007c4 	movi	r3,31
 8006158:	19007b16 	blt	r3,r4,8006348 <__subdf3+0x390>
 800615c:	00800804 	movi	r2,32
 8006160:	1105c83a 	sub	r2,r2,r4
 8006164:	8884d83a 	srl	r2,r17,r2
 8006168:	9906983a 	sll	r3,r19,r4
 800616c:	8922983a 	sll	r17,r17,r4
 8006170:	10c4b03a 	or	r2,r2,r3
 8006174:	24007816 	blt	r4,r16,8006358 <__subdf3+0x3a0>
 8006178:	2421c83a 	sub	r16,r4,r16
 800617c:	80c00044 	addi	r3,r16,1
 8006180:	010007c4 	movi	r4,31
 8006184:	20c09516 	blt	r4,r3,80063dc <__subdf3+0x424>
 8006188:	01400804 	movi	r5,32
 800618c:	28cbc83a 	sub	r5,r5,r3
 8006190:	88c8d83a 	srl	r4,r17,r3
 8006194:	8962983a 	sll	r17,r17,r5
 8006198:	114a983a 	sll	r5,r2,r5
 800619c:	10c6d83a 	srl	r3,r2,r3
 80061a0:	8804c03a 	cmpne	r2,r17,zero
 80061a4:	290ab03a 	or	r5,r5,r4
 80061a8:	28a2b03a 	or	r17,r5,r2
 80061ac:	0021883a 	mov	r16,zero
 80061b0:	003fa206 	br	800603c <__alt_data_end+0xfc00603c>
 80061b4:	2090b03a 	or	r8,r4,r2
 80061b8:	40018e26 	beq	r8,zero,80067f4 <__subdf3+0x83c>
 80061bc:	1007883a 	mov	r3,r2
 80061c0:	2023883a 	mov	r17,r4
 80061c4:	888001cc 	andi	r2,r17,7
 80061c8:	103f9e1e 	bne	r2,zero,8006044 <__alt_data_end+0xfc006044>
 80061cc:	1804977a 	slli	r2,r3,29
 80061d0:	8822d0fa 	srli	r17,r17,3
 80061d4:	1810d0fa 	srli	r8,r3,3
 80061d8:	9100004c 	andi	r4,r18,1
 80061dc:	1444b03a 	or	r2,r2,r17
 80061e0:	00c1ffc4 	movi	r3,2047
 80061e4:	80c02826 	beq	r16,r3,8006288 <__subdf3+0x2d0>
 80061e8:	01400434 	movhi	r5,16
 80061ec:	297fffc4 	addi	r5,r5,-1
 80061f0:	80e0703a 	and	r16,r16,r3
 80061f4:	414a703a 	and	r5,r8,r5
 80061f8:	003fa806 	br	800609c <__alt_data_end+0xfc00609c>
 80061fc:	0080630e 	bge	zero,r2,800638c <__subdf3+0x3d4>
 8006200:	48003026 	beq	r9,zero,80062c4 <__subdf3+0x30c>
 8006204:	0101ffc4 	movi	r4,2047
 8006208:	813f8c26 	beq	r16,r4,800603c <__alt_data_end+0xfc00603c>
 800620c:	29402034 	orhi	r5,r5,128
 8006210:	01000e04 	movi	r4,56
 8006214:	2080a90e 	bge	r4,r2,80064bc <__subdf3+0x504>
 8006218:	298cb03a 	or	r6,r5,r6
 800621c:	3012c03a 	cmpne	r9,r6,zero
 8006220:	0005883a 	mov	r2,zero
 8006224:	4c53883a 	add	r9,r9,r17
 8006228:	4c63803a 	cmpltu	r17,r9,r17
 800622c:	10c7883a 	add	r3,r2,r3
 8006230:	88c7883a 	add	r3,r17,r3
 8006234:	4823883a 	mov	r17,r9
 8006238:	1880202c 	andhi	r2,r3,128
 800623c:	1000d026 	beq	r2,zero,8006580 <__subdf3+0x5c8>
 8006240:	84000044 	addi	r16,r16,1
 8006244:	0081ffc4 	movi	r2,2047
 8006248:	8080fe26 	beq	r16,r2,8006644 <__subdf3+0x68c>
 800624c:	00bfe034 	movhi	r2,65408
 8006250:	10bfffc4 	addi	r2,r2,-1
 8006254:	1886703a 	and	r3,r3,r2
 8006258:	880ad07a 	srli	r5,r17,1
 800625c:	180497fa 	slli	r2,r3,31
 8006260:	8900004c 	andi	r4,r17,1
 8006264:	2922b03a 	or	r17,r5,r4
 8006268:	1806d07a 	srli	r3,r3,1
 800626c:	1462b03a 	or	r17,r2,r17
 8006270:	3825883a 	mov	r18,r7
 8006274:	003f7106 	br	800603c <__alt_data_end+0xfc00603c>
 8006278:	2984b03a 	or	r2,r5,r6
 800627c:	103f6826 	beq	r2,zero,8006020 <__alt_data_end+0xfc006020>
 8006280:	39c03fcc 	andi	r7,r7,255
 8006284:	003f6706 	br	8006024 <__alt_data_end+0xfc006024>
 8006288:	4086b03a 	or	r3,r8,r2
 800628c:	18015226 	beq	r3,zero,80067d8 <__subdf3+0x820>
 8006290:	00c00434 	movhi	r3,16
 8006294:	41400234 	orhi	r5,r8,8
 8006298:	18ffffc4 	addi	r3,r3,-1
 800629c:	28ca703a 	and	r5,r5,r3
 80062a0:	003f7e06 	br	800609c <__alt_data_end+0xfc00609c>
 80062a4:	10bfffc4 	addi	r2,r2,-1
 80062a8:	1000491e 	bne	r2,zero,80063d0 <__subdf3+0x418>
 80062ac:	898fc83a 	sub	r7,r17,r6
 80062b0:	89e3803a 	cmpltu	r17,r17,r7
 80062b4:	1947c83a 	sub	r3,r3,r5
 80062b8:	1c47c83a 	sub	r3,r3,r17
 80062bc:	3823883a 	mov	r17,r7
 80062c0:	003f9b06 	br	8006130 <__alt_data_end+0xfc006130>
 80062c4:	2988b03a 	or	r4,r5,r6
 80062c8:	203f5c26 	beq	r4,zero,800603c <__alt_data_end+0xfc00603c>
 80062cc:	10bfffc4 	addi	r2,r2,-1
 80062d0:	1000931e 	bne	r2,zero,8006520 <__subdf3+0x568>
 80062d4:	898d883a 	add	r6,r17,r6
 80062d8:	3463803a 	cmpltu	r17,r6,r17
 80062dc:	1947883a 	add	r3,r3,r5
 80062e0:	88c7883a 	add	r3,r17,r3
 80062e4:	3023883a 	mov	r17,r6
 80062e8:	003fd306 	br	8006238 <__alt_data_end+0xfc006238>
 80062ec:	1000541e 	bne	r2,zero,8006440 <__subdf3+0x488>
 80062f0:	80800044 	addi	r2,r16,1
 80062f4:	1081ffcc 	andi	r2,r2,2047
 80062f8:	01000044 	movi	r4,1
 80062fc:	2080a20e 	bge	r4,r2,8006588 <__subdf3+0x5d0>
 8006300:	8989c83a 	sub	r4,r17,r6
 8006304:	8905803a 	cmpltu	r2,r17,r4
 8006308:	1967c83a 	sub	r19,r3,r5
 800630c:	98a7c83a 	sub	r19,r19,r2
 8006310:	9880202c 	andhi	r2,r19,128
 8006314:	10006326 	beq	r2,zero,80064a4 <__subdf3+0x4ec>
 8006318:	3463c83a 	sub	r17,r6,r17
 800631c:	28c7c83a 	sub	r3,r5,r3
 8006320:	344d803a 	cmpltu	r6,r6,r17
 8006324:	19a7c83a 	sub	r19,r3,r6
 8006328:	3825883a 	mov	r18,r7
 800632c:	983f861e 	bne	r19,zero,8006148 <__alt_data_end+0xfc006148>
 8006330:	8809883a 	mov	r4,r17
 8006334:	8006cc80 	call	8006cc8 <__clzsi2>
 8006338:	10800804 	addi	r2,r2,32
 800633c:	113ffe04 	addi	r4,r2,-8
 8006340:	00c007c4 	movi	r3,31
 8006344:	193f850e 	bge	r3,r4,800615c <__alt_data_end+0xfc00615c>
 8006348:	10bff604 	addi	r2,r2,-40
 800634c:	8884983a 	sll	r2,r17,r2
 8006350:	0023883a 	mov	r17,zero
 8006354:	243f880e 	bge	r4,r16,8006178 <__alt_data_end+0xfc006178>
 8006358:	00ffe034 	movhi	r3,65408
 800635c:	18ffffc4 	addi	r3,r3,-1
 8006360:	8121c83a 	sub	r16,r16,r4
 8006364:	10c6703a 	and	r3,r2,r3
 8006368:	003f3406 	br	800603c <__alt_data_end+0xfc00603c>
 800636c:	9100004c 	andi	r4,r18,1
 8006370:	000b883a 	mov	r5,zero
 8006374:	0005883a 	mov	r2,zero
 8006378:	003f4806 	br	800609c <__alt_data_end+0xfc00609c>
 800637c:	298cb03a 	or	r6,r5,r6
 8006380:	300cc03a 	cmpne	r6,r6,zero
 8006384:	0005883a 	mov	r2,zero
 8006388:	003f6406 	br	800611c <__alt_data_end+0xfc00611c>
 800638c:	10009a1e 	bne	r2,zero,80065f8 <__subdf3+0x640>
 8006390:	82400044 	addi	r9,r16,1
 8006394:	4881ffcc 	andi	r2,r9,2047
 8006398:	02800044 	movi	r10,1
 800639c:	5080670e 	bge	r10,r2,800653c <__subdf3+0x584>
 80063a0:	0081ffc4 	movi	r2,2047
 80063a4:	4880af26 	beq	r9,r2,8006664 <__subdf3+0x6ac>
 80063a8:	898d883a 	add	r6,r17,r6
 80063ac:	1945883a 	add	r2,r3,r5
 80063b0:	3447803a 	cmpltu	r3,r6,r17
 80063b4:	1887883a 	add	r3,r3,r2
 80063b8:	182297fa 	slli	r17,r3,31
 80063bc:	300cd07a 	srli	r6,r6,1
 80063c0:	1806d07a 	srli	r3,r3,1
 80063c4:	4821883a 	mov	r16,r9
 80063c8:	89a2b03a 	or	r17,r17,r6
 80063cc:	003f1b06 	br	800603c <__alt_data_end+0xfc00603c>
 80063d0:	0101ffc4 	movi	r4,2047
 80063d4:	813f441e 	bne	r16,r4,80060e8 <__alt_data_end+0xfc0060e8>
 80063d8:	003f1806 	br	800603c <__alt_data_end+0xfc00603c>
 80063dc:	843ff844 	addi	r16,r16,-31
 80063e0:	01400804 	movi	r5,32
 80063e4:	1408d83a 	srl	r4,r2,r16
 80063e8:	19405026 	beq	r3,r5,800652c <__subdf3+0x574>
 80063ec:	01401004 	movi	r5,64
 80063f0:	28c7c83a 	sub	r3,r5,r3
 80063f4:	10c4983a 	sll	r2,r2,r3
 80063f8:	88a2b03a 	or	r17,r17,r2
 80063fc:	8822c03a 	cmpne	r17,r17,zero
 8006400:	2462b03a 	or	r17,r4,r17
 8006404:	0007883a 	mov	r3,zero
 8006408:	0021883a 	mov	r16,zero
 800640c:	003f6d06 	br	80061c4 <__alt_data_end+0xfc0061c4>
 8006410:	11fff804 	addi	r7,r2,-32
 8006414:	01000804 	movi	r4,32
 8006418:	29ced83a 	srl	r7,r5,r7
 800641c:	11004526 	beq	r2,r4,8006534 <__subdf3+0x57c>
 8006420:	01001004 	movi	r4,64
 8006424:	2089c83a 	sub	r4,r4,r2
 8006428:	2904983a 	sll	r2,r5,r4
 800642c:	118cb03a 	or	r6,r2,r6
 8006430:	300cc03a 	cmpne	r6,r6,zero
 8006434:	398cb03a 	or	r6,r7,r6
 8006438:	0005883a 	mov	r2,zero
 800643c:	003f3706 	br	800611c <__alt_data_end+0xfc00611c>
 8006440:	80002a26 	beq	r16,zero,80064ec <__subdf3+0x534>
 8006444:	0101ffc4 	movi	r4,2047
 8006448:	49006626 	beq	r9,r4,80065e4 <__subdf3+0x62c>
 800644c:	0085c83a 	sub	r2,zero,r2
 8006450:	18c02034 	orhi	r3,r3,128
 8006454:	01000e04 	movi	r4,56
 8006458:	20807e16 	blt	r4,r2,8006654 <__subdf3+0x69c>
 800645c:	010007c4 	movi	r4,31
 8006460:	2080e716 	blt	r4,r2,8006800 <__subdf3+0x848>
 8006464:	01000804 	movi	r4,32
 8006468:	2089c83a 	sub	r4,r4,r2
 800646c:	1914983a 	sll	r10,r3,r4
 8006470:	8890d83a 	srl	r8,r17,r2
 8006474:	8908983a 	sll	r4,r17,r4
 8006478:	1884d83a 	srl	r2,r3,r2
 800647c:	5222b03a 	or	r17,r10,r8
 8006480:	2006c03a 	cmpne	r3,r4,zero
 8006484:	88e2b03a 	or	r17,r17,r3
 8006488:	3463c83a 	sub	r17,r6,r17
 800648c:	2885c83a 	sub	r2,r5,r2
 8006490:	344d803a 	cmpltu	r6,r6,r17
 8006494:	1187c83a 	sub	r3,r2,r6
 8006498:	4821883a 	mov	r16,r9
 800649c:	3825883a 	mov	r18,r7
 80064a0:	003f2306 	br	8006130 <__alt_data_end+0xfc006130>
 80064a4:	24d0b03a 	or	r8,r4,r19
 80064a8:	40001b1e 	bne	r8,zero,8006518 <__subdf3+0x560>
 80064ac:	0005883a 	mov	r2,zero
 80064b0:	0009883a 	mov	r4,zero
 80064b4:	0021883a 	mov	r16,zero
 80064b8:	003f4906 	br	80061e0 <__alt_data_end+0xfc0061e0>
 80064bc:	010007c4 	movi	r4,31
 80064c0:	20803a16 	blt	r4,r2,80065ac <__subdf3+0x5f4>
 80064c4:	01000804 	movi	r4,32
 80064c8:	2089c83a 	sub	r4,r4,r2
 80064cc:	2912983a 	sll	r9,r5,r4
 80064d0:	3090d83a 	srl	r8,r6,r2
 80064d4:	3108983a 	sll	r4,r6,r4
 80064d8:	2884d83a 	srl	r2,r5,r2
 80064dc:	4a12b03a 	or	r9,r9,r8
 80064e0:	2008c03a 	cmpne	r4,r4,zero
 80064e4:	4912b03a 	or	r9,r9,r4
 80064e8:	003f4e06 	br	8006224 <__alt_data_end+0xfc006224>
 80064ec:	1c48b03a 	or	r4,r3,r17
 80064f0:	20003c26 	beq	r4,zero,80065e4 <__subdf3+0x62c>
 80064f4:	0084303a 	nor	r2,zero,r2
 80064f8:	1000381e 	bne	r2,zero,80065dc <__subdf3+0x624>
 80064fc:	3463c83a 	sub	r17,r6,r17
 8006500:	28c5c83a 	sub	r2,r5,r3
 8006504:	344d803a 	cmpltu	r6,r6,r17
 8006508:	1187c83a 	sub	r3,r2,r6
 800650c:	4821883a 	mov	r16,r9
 8006510:	3825883a 	mov	r18,r7
 8006514:	003f0606 	br	8006130 <__alt_data_end+0xfc006130>
 8006518:	2023883a 	mov	r17,r4
 800651c:	003f0906 	br	8006144 <__alt_data_end+0xfc006144>
 8006520:	0101ffc4 	movi	r4,2047
 8006524:	813f3a1e 	bne	r16,r4,8006210 <__alt_data_end+0xfc006210>
 8006528:	003ec406 	br	800603c <__alt_data_end+0xfc00603c>
 800652c:	0005883a 	mov	r2,zero
 8006530:	003fb106 	br	80063f8 <__alt_data_end+0xfc0063f8>
 8006534:	0005883a 	mov	r2,zero
 8006538:	003fbc06 	br	800642c <__alt_data_end+0xfc00642c>
 800653c:	1c44b03a 	or	r2,r3,r17
 8006540:	80008e1e 	bne	r16,zero,800677c <__subdf3+0x7c4>
 8006544:	1000c826 	beq	r2,zero,8006868 <__subdf3+0x8b0>
 8006548:	2984b03a 	or	r2,r5,r6
 800654c:	103ebb26 	beq	r2,zero,800603c <__alt_data_end+0xfc00603c>
 8006550:	8989883a 	add	r4,r17,r6
 8006554:	1945883a 	add	r2,r3,r5
 8006558:	2447803a 	cmpltu	r3,r4,r17
 800655c:	1887883a 	add	r3,r3,r2
 8006560:	1880202c 	andhi	r2,r3,128
 8006564:	2023883a 	mov	r17,r4
 8006568:	103f1626 	beq	r2,zero,80061c4 <__alt_data_end+0xfc0061c4>
 800656c:	00bfe034 	movhi	r2,65408
 8006570:	10bfffc4 	addi	r2,r2,-1
 8006574:	5021883a 	mov	r16,r10
 8006578:	1886703a 	and	r3,r3,r2
 800657c:	003eaf06 	br	800603c <__alt_data_end+0xfc00603c>
 8006580:	3825883a 	mov	r18,r7
 8006584:	003f0f06 	br	80061c4 <__alt_data_end+0xfc0061c4>
 8006588:	1c44b03a 	or	r2,r3,r17
 800658c:	8000251e 	bne	r16,zero,8006624 <__subdf3+0x66c>
 8006590:	1000661e 	bne	r2,zero,800672c <__subdf3+0x774>
 8006594:	2990b03a 	or	r8,r5,r6
 8006598:	40009626 	beq	r8,zero,80067f4 <__subdf3+0x83c>
 800659c:	2807883a 	mov	r3,r5
 80065a0:	3023883a 	mov	r17,r6
 80065a4:	3825883a 	mov	r18,r7
 80065a8:	003ea406 	br	800603c <__alt_data_end+0xfc00603c>
 80065ac:	127ff804 	addi	r9,r2,-32
 80065b0:	01000804 	movi	r4,32
 80065b4:	2a52d83a 	srl	r9,r5,r9
 80065b8:	11008c26 	beq	r2,r4,80067ec <__subdf3+0x834>
 80065bc:	01001004 	movi	r4,64
 80065c0:	2085c83a 	sub	r2,r4,r2
 80065c4:	2884983a 	sll	r2,r5,r2
 80065c8:	118cb03a 	or	r6,r2,r6
 80065cc:	300cc03a 	cmpne	r6,r6,zero
 80065d0:	4992b03a 	or	r9,r9,r6
 80065d4:	0005883a 	mov	r2,zero
 80065d8:	003f1206 	br	8006224 <__alt_data_end+0xfc006224>
 80065dc:	0101ffc4 	movi	r4,2047
 80065e0:	493f9c1e 	bne	r9,r4,8006454 <__alt_data_end+0xfc006454>
 80065e4:	2807883a 	mov	r3,r5
 80065e8:	3023883a 	mov	r17,r6
 80065ec:	4821883a 	mov	r16,r9
 80065f0:	3825883a 	mov	r18,r7
 80065f4:	003e9106 	br	800603c <__alt_data_end+0xfc00603c>
 80065f8:	80001f1e 	bne	r16,zero,8006678 <__subdf3+0x6c0>
 80065fc:	1c48b03a 	or	r4,r3,r17
 8006600:	20005a26 	beq	r4,zero,800676c <__subdf3+0x7b4>
 8006604:	0084303a 	nor	r2,zero,r2
 8006608:	1000561e 	bne	r2,zero,8006764 <__subdf3+0x7ac>
 800660c:	89a3883a 	add	r17,r17,r6
 8006610:	1945883a 	add	r2,r3,r5
 8006614:	898d803a 	cmpltu	r6,r17,r6
 8006618:	3087883a 	add	r3,r6,r2
 800661c:	4821883a 	mov	r16,r9
 8006620:	003f0506 	br	8006238 <__alt_data_end+0xfc006238>
 8006624:	10002b1e 	bne	r2,zero,80066d4 <__subdf3+0x71c>
 8006628:	2984b03a 	or	r2,r5,r6
 800662c:	10008026 	beq	r2,zero,8006830 <__subdf3+0x878>
 8006630:	2807883a 	mov	r3,r5
 8006634:	3023883a 	mov	r17,r6
 8006638:	3825883a 	mov	r18,r7
 800663c:	0401ffc4 	movi	r16,2047
 8006640:	003e7e06 	br	800603c <__alt_data_end+0xfc00603c>
 8006644:	3809883a 	mov	r4,r7
 8006648:	0011883a 	mov	r8,zero
 800664c:	0005883a 	mov	r2,zero
 8006650:	003ee306 	br	80061e0 <__alt_data_end+0xfc0061e0>
 8006654:	1c62b03a 	or	r17,r3,r17
 8006658:	8822c03a 	cmpne	r17,r17,zero
 800665c:	0005883a 	mov	r2,zero
 8006660:	003f8906 	br	8006488 <__alt_data_end+0xfc006488>
 8006664:	3809883a 	mov	r4,r7
 8006668:	4821883a 	mov	r16,r9
 800666c:	0011883a 	mov	r8,zero
 8006670:	0005883a 	mov	r2,zero
 8006674:	003eda06 	br	80061e0 <__alt_data_end+0xfc0061e0>
 8006678:	0101ffc4 	movi	r4,2047
 800667c:	49003b26 	beq	r9,r4,800676c <__subdf3+0x7b4>
 8006680:	0085c83a 	sub	r2,zero,r2
 8006684:	18c02034 	orhi	r3,r3,128
 8006688:	01000e04 	movi	r4,56
 800668c:	20806e16 	blt	r4,r2,8006848 <__subdf3+0x890>
 8006690:	010007c4 	movi	r4,31
 8006694:	20807716 	blt	r4,r2,8006874 <__subdf3+0x8bc>
 8006698:	01000804 	movi	r4,32
 800669c:	2089c83a 	sub	r4,r4,r2
 80066a0:	1914983a 	sll	r10,r3,r4
 80066a4:	8890d83a 	srl	r8,r17,r2
 80066a8:	8908983a 	sll	r4,r17,r4
 80066ac:	1884d83a 	srl	r2,r3,r2
 80066b0:	5222b03a 	or	r17,r10,r8
 80066b4:	2006c03a 	cmpne	r3,r4,zero
 80066b8:	88e2b03a 	or	r17,r17,r3
 80066bc:	89a3883a 	add	r17,r17,r6
 80066c0:	1145883a 	add	r2,r2,r5
 80066c4:	898d803a 	cmpltu	r6,r17,r6
 80066c8:	3087883a 	add	r3,r6,r2
 80066cc:	4821883a 	mov	r16,r9
 80066d0:	003ed906 	br	8006238 <__alt_data_end+0xfc006238>
 80066d4:	2984b03a 	or	r2,r5,r6
 80066d8:	10004226 	beq	r2,zero,80067e4 <__subdf3+0x82c>
 80066dc:	1808d0fa 	srli	r4,r3,3
 80066e0:	8822d0fa 	srli	r17,r17,3
 80066e4:	1806977a 	slli	r3,r3,29
 80066e8:	2080022c 	andhi	r2,r4,8
 80066ec:	1c62b03a 	or	r17,r3,r17
 80066f0:	10000826 	beq	r2,zero,8006714 <__subdf3+0x75c>
 80066f4:	2812d0fa 	srli	r9,r5,3
 80066f8:	4880022c 	andhi	r2,r9,8
 80066fc:	1000051e 	bne	r2,zero,8006714 <__subdf3+0x75c>
 8006700:	300cd0fa 	srli	r6,r6,3
 8006704:	2804977a 	slli	r2,r5,29
 8006708:	4809883a 	mov	r4,r9
 800670c:	3825883a 	mov	r18,r7
 8006710:	11a2b03a 	or	r17,r2,r6
 8006714:	8806d77a 	srli	r3,r17,29
 8006718:	200890fa 	slli	r4,r4,3
 800671c:	882290fa 	slli	r17,r17,3
 8006720:	0401ffc4 	movi	r16,2047
 8006724:	1906b03a 	or	r3,r3,r4
 8006728:	003e4406 	br	800603c <__alt_data_end+0xfc00603c>
 800672c:	2984b03a 	or	r2,r5,r6
 8006730:	103e4226 	beq	r2,zero,800603c <__alt_data_end+0xfc00603c>
 8006734:	8989c83a 	sub	r4,r17,r6
 8006738:	8911803a 	cmpltu	r8,r17,r4
 800673c:	1945c83a 	sub	r2,r3,r5
 8006740:	1205c83a 	sub	r2,r2,r8
 8006744:	1200202c 	andhi	r8,r2,128
 8006748:	403e9a26 	beq	r8,zero,80061b4 <__alt_data_end+0xfc0061b4>
 800674c:	3463c83a 	sub	r17,r6,r17
 8006750:	28c5c83a 	sub	r2,r5,r3
 8006754:	344d803a 	cmpltu	r6,r6,r17
 8006758:	1187c83a 	sub	r3,r2,r6
 800675c:	3825883a 	mov	r18,r7
 8006760:	003e3606 	br	800603c <__alt_data_end+0xfc00603c>
 8006764:	0101ffc4 	movi	r4,2047
 8006768:	493fc71e 	bne	r9,r4,8006688 <__alt_data_end+0xfc006688>
 800676c:	2807883a 	mov	r3,r5
 8006770:	3023883a 	mov	r17,r6
 8006774:	4821883a 	mov	r16,r9
 8006778:	003e3006 	br	800603c <__alt_data_end+0xfc00603c>
 800677c:	10003626 	beq	r2,zero,8006858 <__subdf3+0x8a0>
 8006780:	2984b03a 	or	r2,r5,r6
 8006784:	10001726 	beq	r2,zero,80067e4 <__subdf3+0x82c>
 8006788:	1808d0fa 	srli	r4,r3,3
 800678c:	8822d0fa 	srli	r17,r17,3
 8006790:	1806977a 	slli	r3,r3,29
 8006794:	2080022c 	andhi	r2,r4,8
 8006798:	1c62b03a 	or	r17,r3,r17
 800679c:	10000726 	beq	r2,zero,80067bc <__subdf3+0x804>
 80067a0:	2812d0fa 	srli	r9,r5,3
 80067a4:	4880022c 	andhi	r2,r9,8
 80067a8:	1000041e 	bne	r2,zero,80067bc <__subdf3+0x804>
 80067ac:	300cd0fa 	srli	r6,r6,3
 80067b0:	2804977a 	slli	r2,r5,29
 80067b4:	4809883a 	mov	r4,r9
 80067b8:	11a2b03a 	or	r17,r2,r6
 80067bc:	8806d77a 	srli	r3,r17,29
 80067c0:	200890fa 	slli	r4,r4,3
 80067c4:	882290fa 	slli	r17,r17,3
 80067c8:	3825883a 	mov	r18,r7
 80067cc:	1906b03a 	or	r3,r3,r4
 80067d0:	0401ffc4 	movi	r16,2047
 80067d4:	003e1906 	br	800603c <__alt_data_end+0xfc00603c>
 80067d8:	000b883a 	mov	r5,zero
 80067dc:	0005883a 	mov	r2,zero
 80067e0:	003e2e06 	br	800609c <__alt_data_end+0xfc00609c>
 80067e4:	0401ffc4 	movi	r16,2047
 80067e8:	003e1406 	br	800603c <__alt_data_end+0xfc00603c>
 80067ec:	0005883a 	mov	r2,zero
 80067f0:	003f7506 	br	80065c8 <__alt_data_end+0xfc0065c8>
 80067f4:	0005883a 	mov	r2,zero
 80067f8:	0009883a 	mov	r4,zero
 80067fc:	003e7806 	br	80061e0 <__alt_data_end+0xfc0061e0>
 8006800:	123ff804 	addi	r8,r2,-32
 8006804:	01000804 	movi	r4,32
 8006808:	1a10d83a 	srl	r8,r3,r8
 800680c:	11002526 	beq	r2,r4,80068a4 <__subdf3+0x8ec>
 8006810:	01001004 	movi	r4,64
 8006814:	2085c83a 	sub	r2,r4,r2
 8006818:	1884983a 	sll	r2,r3,r2
 800681c:	1444b03a 	or	r2,r2,r17
 8006820:	1004c03a 	cmpne	r2,r2,zero
 8006824:	40a2b03a 	or	r17,r8,r2
 8006828:	0005883a 	mov	r2,zero
 800682c:	003f1606 	br	8006488 <__alt_data_end+0xfc006488>
 8006830:	02000434 	movhi	r8,16
 8006834:	0009883a 	mov	r4,zero
 8006838:	423fffc4 	addi	r8,r8,-1
 800683c:	00bfffc4 	movi	r2,-1
 8006840:	0401ffc4 	movi	r16,2047
 8006844:	003e6606 	br	80061e0 <__alt_data_end+0xfc0061e0>
 8006848:	1c62b03a 	or	r17,r3,r17
 800684c:	8822c03a 	cmpne	r17,r17,zero
 8006850:	0005883a 	mov	r2,zero
 8006854:	003f9906 	br	80066bc <__alt_data_end+0xfc0066bc>
 8006858:	2807883a 	mov	r3,r5
 800685c:	3023883a 	mov	r17,r6
 8006860:	0401ffc4 	movi	r16,2047
 8006864:	003df506 	br	800603c <__alt_data_end+0xfc00603c>
 8006868:	2807883a 	mov	r3,r5
 800686c:	3023883a 	mov	r17,r6
 8006870:	003df206 	br	800603c <__alt_data_end+0xfc00603c>
 8006874:	123ff804 	addi	r8,r2,-32
 8006878:	01000804 	movi	r4,32
 800687c:	1a10d83a 	srl	r8,r3,r8
 8006880:	11000a26 	beq	r2,r4,80068ac <__subdf3+0x8f4>
 8006884:	01001004 	movi	r4,64
 8006888:	2085c83a 	sub	r2,r4,r2
 800688c:	1884983a 	sll	r2,r3,r2
 8006890:	1444b03a 	or	r2,r2,r17
 8006894:	1004c03a 	cmpne	r2,r2,zero
 8006898:	40a2b03a 	or	r17,r8,r2
 800689c:	0005883a 	mov	r2,zero
 80068a0:	003f8606 	br	80066bc <__alt_data_end+0xfc0066bc>
 80068a4:	0005883a 	mov	r2,zero
 80068a8:	003fdc06 	br	800681c <__alt_data_end+0xfc00681c>
 80068ac:	0005883a 	mov	r2,zero
 80068b0:	003ff706 	br	8006890 <__alt_data_end+0xfc006890>

080068b4 <__fixdfsi>:
 80068b4:	280cd53a 	srli	r6,r5,20
 80068b8:	00c00434 	movhi	r3,16
 80068bc:	18ffffc4 	addi	r3,r3,-1
 80068c0:	3181ffcc 	andi	r6,r6,2047
 80068c4:	01c0ff84 	movi	r7,1022
 80068c8:	28c6703a 	and	r3,r5,r3
 80068cc:	280ad7fa 	srli	r5,r5,31
 80068d0:	3980120e 	bge	r7,r6,800691c <__fixdfsi+0x68>
 80068d4:	00810744 	movi	r2,1053
 80068d8:	11800c16 	blt	r2,r6,800690c <__fixdfsi+0x58>
 80068dc:	00810cc4 	movi	r2,1075
 80068e0:	1185c83a 	sub	r2,r2,r6
 80068e4:	01c007c4 	movi	r7,31
 80068e8:	18c00434 	orhi	r3,r3,16
 80068ec:	38800d16 	blt	r7,r2,8006924 <__fixdfsi+0x70>
 80068f0:	31befb44 	addi	r6,r6,-1043
 80068f4:	2084d83a 	srl	r2,r4,r2
 80068f8:	1986983a 	sll	r3,r3,r6
 80068fc:	1884b03a 	or	r2,r3,r2
 8006900:	28000726 	beq	r5,zero,8006920 <__fixdfsi+0x6c>
 8006904:	0085c83a 	sub	r2,zero,r2
 8006908:	f800283a 	ret
 800690c:	00a00034 	movhi	r2,32768
 8006910:	10bfffc4 	addi	r2,r2,-1
 8006914:	2885883a 	add	r2,r5,r2
 8006918:	f800283a 	ret
 800691c:	0005883a 	mov	r2,zero
 8006920:	f800283a 	ret
 8006924:	008104c4 	movi	r2,1043
 8006928:	1185c83a 	sub	r2,r2,r6
 800692c:	1884d83a 	srl	r2,r3,r2
 8006930:	003ff306 	br	8006900 <__alt_data_end+0xfc006900>

08006934 <__floatsidf>:
 8006934:	defffd04 	addi	sp,sp,-12
 8006938:	dfc00215 	stw	ra,8(sp)
 800693c:	dc400115 	stw	r17,4(sp)
 8006940:	dc000015 	stw	r16,0(sp)
 8006944:	20002b26 	beq	r4,zero,80069f4 <__floatsidf+0xc0>
 8006948:	2023883a 	mov	r17,r4
 800694c:	2020d7fa 	srli	r16,r4,31
 8006950:	20002d16 	blt	r4,zero,8006a08 <__floatsidf+0xd4>
 8006954:	8809883a 	mov	r4,r17
 8006958:	8006cc80 	call	8006cc8 <__clzsi2>
 800695c:	01410784 	movi	r5,1054
 8006960:	288bc83a 	sub	r5,r5,r2
 8006964:	01010cc4 	movi	r4,1075
 8006968:	2149c83a 	sub	r4,r4,r5
 800696c:	00c007c4 	movi	r3,31
 8006970:	1900160e 	bge	r3,r4,80069cc <__floatsidf+0x98>
 8006974:	00c104c4 	movi	r3,1043
 8006978:	1947c83a 	sub	r3,r3,r5
 800697c:	88c6983a 	sll	r3,r17,r3
 8006980:	00800434 	movhi	r2,16
 8006984:	10bfffc4 	addi	r2,r2,-1
 8006988:	1886703a 	and	r3,r3,r2
 800698c:	2941ffcc 	andi	r5,r5,2047
 8006990:	800d883a 	mov	r6,r16
 8006994:	0005883a 	mov	r2,zero
 8006998:	280a953a 	slli	r5,r5,20
 800699c:	31803fcc 	andi	r6,r6,255
 80069a0:	01000434 	movhi	r4,16
 80069a4:	300c97fa 	slli	r6,r6,31
 80069a8:	213fffc4 	addi	r4,r4,-1
 80069ac:	1906703a 	and	r3,r3,r4
 80069b0:	1946b03a 	or	r3,r3,r5
 80069b4:	1986b03a 	or	r3,r3,r6
 80069b8:	dfc00217 	ldw	ra,8(sp)
 80069bc:	dc400117 	ldw	r17,4(sp)
 80069c0:	dc000017 	ldw	r16,0(sp)
 80069c4:	dec00304 	addi	sp,sp,12
 80069c8:	f800283a 	ret
 80069cc:	00c002c4 	movi	r3,11
 80069d0:	1887c83a 	sub	r3,r3,r2
 80069d4:	88c6d83a 	srl	r3,r17,r3
 80069d8:	8904983a 	sll	r2,r17,r4
 80069dc:	01000434 	movhi	r4,16
 80069e0:	213fffc4 	addi	r4,r4,-1
 80069e4:	2941ffcc 	andi	r5,r5,2047
 80069e8:	1906703a 	and	r3,r3,r4
 80069ec:	800d883a 	mov	r6,r16
 80069f0:	003fe906 	br	8006998 <__alt_data_end+0xfc006998>
 80069f4:	000d883a 	mov	r6,zero
 80069f8:	000b883a 	mov	r5,zero
 80069fc:	0007883a 	mov	r3,zero
 8006a00:	0005883a 	mov	r2,zero
 8006a04:	003fe406 	br	8006998 <__alt_data_end+0xfc006998>
 8006a08:	0123c83a 	sub	r17,zero,r4
 8006a0c:	003fd106 	br	8006954 <__alt_data_end+0xfc006954>

08006a10 <__extendsfdf2>:
 8006a10:	200ad5fa 	srli	r5,r4,23
 8006a14:	defffd04 	addi	sp,sp,-12
 8006a18:	dc400115 	stw	r17,4(sp)
 8006a1c:	29403fcc 	andi	r5,r5,255
 8006a20:	29800044 	addi	r6,r5,1
 8006a24:	04402034 	movhi	r17,128
 8006a28:	dc000015 	stw	r16,0(sp)
 8006a2c:	8c7fffc4 	addi	r17,r17,-1
 8006a30:	dfc00215 	stw	ra,8(sp)
 8006a34:	31803fcc 	andi	r6,r6,255
 8006a38:	00800044 	movi	r2,1
 8006a3c:	8922703a 	and	r17,r17,r4
 8006a40:	2020d7fa 	srli	r16,r4,31
 8006a44:	1180110e 	bge	r2,r6,8006a8c <__extendsfdf2+0x7c>
 8006a48:	880cd0fa 	srli	r6,r17,3
 8006a4c:	8822977a 	slli	r17,r17,29
 8006a50:	2940e004 	addi	r5,r5,896
 8006a54:	2941ffcc 	andi	r5,r5,2047
 8006a58:	2804953a 	slli	r2,r5,20
 8006a5c:	01400434 	movhi	r5,16
 8006a60:	800697fa 	slli	r3,r16,31
 8006a64:	297fffc4 	addi	r5,r5,-1
 8006a68:	314a703a 	and	r5,r6,r5
 8006a6c:	288ab03a 	or	r5,r5,r2
 8006a70:	28c6b03a 	or	r3,r5,r3
 8006a74:	8805883a 	mov	r2,r17
 8006a78:	dfc00217 	ldw	ra,8(sp)
 8006a7c:	dc400117 	ldw	r17,4(sp)
 8006a80:	dc000017 	ldw	r16,0(sp)
 8006a84:	dec00304 	addi	sp,sp,12
 8006a88:	f800283a 	ret
 8006a8c:	2800111e 	bne	r5,zero,8006ad4 <__extendsfdf2+0xc4>
 8006a90:	88001c26 	beq	r17,zero,8006b04 <__extendsfdf2+0xf4>
 8006a94:	8809883a 	mov	r4,r17
 8006a98:	8006cc80 	call	8006cc8 <__clzsi2>
 8006a9c:	00c00284 	movi	r3,10
 8006aa0:	18801b16 	blt	r3,r2,8006b10 <__extendsfdf2+0x100>
 8006aa4:	018002c4 	movi	r6,11
 8006aa8:	308dc83a 	sub	r6,r6,r2
 8006aac:	11000544 	addi	r4,r2,21
 8006ab0:	8986d83a 	srl	r3,r17,r6
 8006ab4:	8922983a 	sll	r17,r17,r4
 8006ab8:	0180e244 	movi	r6,905
 8006abc:	01400434 	movhi	r5,16
 8006ac0:	3085c83a 	sub	r2,r6,r2
 8006ac4:	297fffc4 	addi	r5,r5,-1
 8006ac8:	194c703a 	and	r6,r3,r5
 8006acc:	1141ffcc 	andi	r5,r2,2047
 8006ad0:	003fe006 	br	8006a54 <__alt_data_end+0xfc006a54>
 8006ad4:	88000826 	beq	r17,zero,8006af8 <__extendsfdf2+0xe8>
 8006ad8:	880cd0fa 	srli	r6,r17,3
 8006adc:	00800434 	movhi	r2,16
 8006ae0:	10bfffc4 	addi	r2,r2,-1
 8006ae4:	31800234 	orhi	r6,r6,8
 8006ae8:	8822977a 	slli	r17,r17,29
 8006aec:	308c703a 	and	r6,r6,r2
 8006af0:	0141ffc4 	movi	r5,2047
 8006af4:	003fd706 	br	8006a54 <__alt_data_end+0xfc006a54>
 8006af8:	0141ffc4 	movi	r5,2047
 8006afc:	000d883a 	mov	r6,zero
 8006b00:	003fd406 	br	8006a54 <__alt_data_end+0xfc006a54>
 8006b04:	000b883a 	mov	r5,zero
 8006b08:	000d883a 	mov	r6,zero
 8006b0c:	003fd106 	br	8006a54 <__alt_data_end+0xfc006a54>
 8006b10:	11bffd44 	addi	r6,r2,-11
 8006b14:	8986983a 	sll	r3,r17,r6
 8006b18:	0023883a 	mov	r17,zero
 8006b1c:	003fe606 	br	8006ab8 <__alt_data_end+0xfc006ab8>

08006b20 <__truncdfsf2>:
 8006b20:	2810d53a 	srli	r8,r5,20
 8006b24:	01c00434 	movhi	r7,16
 8006b28:	39ffffc4 	addi	r7,r7,-1
 8006b2c:	29ce703a 	and	r7,r5,r7
 8006b30:	4201ffcc 	andi	r8,r8,2047
 8006b34:	380e90fa 	slli	r7,r7,3
 8006b38:	200cd77a 	srli	r6,r4,29
 8006b3c:	42400044 	addi	r9,r8,1
 8006b40:	4a41ffcc 	andi	r9,r9,2047
 8006b44:	00c00044 	movi	r3,1
 8006b48:	280ad7fa 	srli	r5,r5,31
 8006b4c:	31ceb03a 	or	r7,r6,r7
 8006b50:	200490fa 	slli	r2,r4,3
 8006b54:	1a40230e 	bge	r3,r9,8006be4 <__truncdfsf2+0xc4>
 8006b58:	40ff2004 	addi	r3,r8,-896
 8006b5c:	01803f84 	movi	r6,254
 8006b60:	30c01516 	blt	r6,r3,8006bb8 <__truncdfsf2+0x98>
 8006b64:	00c0380e 	bge	zero,r3,8006c48 <__truncdfsf2+0x128>
 8006b68:	200c91ba 	slli	r6,r4,6
 8006b6c:	380e90fa 	slli	r7,r7,3
 8006b70:	1004d77a 	srli	r2,r2,29
 8006b74:	300cc03a 	cmpne	r6,r6,zero
 8006b78:	31ccb03a 	or	r6,r6,r7
 8006b7c:	308cb03a 	or	r6,r6,r2
 8006b80:	308001cc 	andi	r2,r6,7
 8006b84:	10000426 	beq	r2,zero,8006b98 <__truncdfsf2+0x78>
 8006b88:	308003cc 	andi	r2,r6,15
 8006b8c:	01000104 	movi	r4,4
 8006b90:	11000126 	beq	r2,r4,8006b98 <__truncdfsf2+0x78>
 8006b94:	31800104 	addi	r6,r6,4
 8006b98:	3081002c 	andhi	r2,r6,1024
 8006b9c:	10001626 	beq	r2,zero,8006bf8 <__truncdfsf2+0xd8>
 8006ba0:	18c00044 	addi	r3,r3,1
 8006ba4:	00803fc4 	movi	r2,255
 8006ba8:	18800326 	beq	r3,r2,8006bb8 <__truncdfsf2+0x98>
 8006bac:	300c91ba 	slli	r6,r6,6
 8006bb0:	300cd27a 	srli	r6,r6,9
 8006bb4:	00000206 	br	8006bc0 <__truncdfsf2+0xa0>
 8006bb8:	00ffffc4 	movi	r3,-1
 8006bbc:	000d883a 	mov	r6,zero
 8006bc0:	18c03fcc 	andi	r3,r3,255
 8006bc4:	180895fa 	slli	r4,r3,23
 8006bc8:	00c02034 	movhi	r3,128
 8006bcc:	280a97fa 	slli	r5,r5,31
 8006bd0:	18ffffc4 	addi	r3,r3,-1
 8006bd4:	30c6703a 	and	r3,r6,r3
 8006bd8:	1906b03a 	or	r3,r3,r4
 8006bdc:	1944b03a 	or	r2,r3,r5
 8006be0:	f800283a 	ret
 8006be4:	40000b1e 	bne	r8,zero,8006c14 <__truncdfsf2+0xf4>
 8006be8:	388cb03a 	or	r6,r7,r2
 8006bec:	0007883a 	mov	r3,zero
 8006bf0:	30000426 	beq	r6,zero,8006c04 <__truncdfsf2+0xe4>
 8006bf4:	01800144 	movi	r6,5
 8006bf8:	00803fc4 	movi	r2,255
 8006bfc:	300cd0fa 	srli	r6,r6,3
 8006c00:	18800a26 	beq	r3,r2,8006c2c <__truncdfsf2+0x10c>
 8006c04:	00802034 	movhi	r2,128
 8006c08:	10bfffc4 	addi	r2,r2,-1
 8006c0c:	308c703a 	and	r6,r6,r2
 8006c10:	003feb06 	br	8006bc0 <__alt_data_end+0xfc006bc0>
 8006c14:	3888b03a 	or	r4,r7,r2
 8006c18:	203fe726 	beq	r4,zero,8006bb8 <__alt_data_end+0xfc006bb8>
 8006c1c:	380c90fa 	slli	r6,r7,3
 8006c20:	00c03fc4 	movi	r3,255
 8006c24:	31808034 	orhi	r6,r6,512
 8006c28:	003fd506 	br	8006b80 <__alt_data_end+0xfc006b80>
 8006c2c:	303fe226 	beq	r6,zero,8006bb8 <__alt_data_end+0xfc006bb8>
 8006c30:	00802034 	movhi	r2,128
 8006c34:	31801034 	orhi	r6,r6,64
 8006c38:	10bfffc4 	addi	r2,r2,-1
 8006c3c:	00ffffc4 	movi	r3,-1
 8006c40:	308c703a 	and	r6,r6,r2
 8006c44:	003fde06 	br	8006bc0 <__alt_data_end+0xfc006bc0>
 8006c48:	013ffa44 	movi	r4,-23
 8006c4c:	19000e16 	blt	r3,r4,8006c88 <__truncdfsf2+0x168>
 8006c50:	01000784 	movi	r4,30
 8006c54:	20c9c83a 	sub	r4,r4,r3
 8006c58:	018007c4 	movi	r6,31
 8006c5c:	39c02034 	orhi	r7,r7,128
 8006c60:	31000b16 	blt	r6,r4,8006c90 <__truncdfsf2+0x170>
 8006c64:	423f2084 	addi	r8,r8,-894
 8006c68:	120c983a 	sll	r6,r2,r8
 8006c6c:	3a0e983a 	sll	r7,r7,r8
 8006c70:	1104d83a 	srl	r2,r2,r4
 8006c74:	300cc03a 	cmpne	r6,r6,zero
 8006c78:	31ceb03a 	or	r7,r6,r7
 8006c7c:	388cb03a 	or	r6,r7,r2
 8006c80:	0007883a 	mov	r3,zero
 8006c84:	003fbe06 	br	8006b80 <__alt_data_end+0xfc006b80>
 8006c88:	0007883a 	mov	r3,zero
 8006c8c:	003fd906 	br	8006bf4 <__alt_data_end+0xfc006bf4>
 8006c90:	01bfff84 	movi	r6,-2
 8006c94:	30cdc83a 	sub	r6,r6,r3
 8006c98:	00c00804 	movi	r3,32
 8006c9c:	398cd83a 	srl	r6,r7,r6
 8006ca0:	20c00726 	beq	r4,r3,8006cc0 <__truncdfsf2+0x1a0>
 8006ca4:	423f2884 	addi	r8,r8,-862
 8006ca8:	3a0e983a 	sll	r7,r7,r8
 8006cac:	3884b03a 	or	r2,r7,r2
 8006cb0:	1004c03a 	cmpne	r2,r2,zero
 8006cb4:	118cb03a 	or	r6,r2,r6
 8006cb8:	0007883a 	mov	r3,zero
 8006cbc:	003fb006 	br	8006b80 <__alt_data_end+0xfc006b80>
 8006cc0:	000f883a 	mov	r7,zero
 8006cc4:	003ff906 	br	8006cac <__alt_data_end+0xfc006cac>

08006cc8 <__clzsi2>:
 8006cc8:	00bfffd4 	movui	r2,65535
 8006ccc:	11000536 	bltu	r2,r4,8006ce4 <__clzsi2+0x1c>
 8006cd0:	00803fc4 	movi	r2,255
 8006cd4:	11000f36 	bltu	r2,r4,8006d14 <__clzsi2+0x4c>
 8006cd8:	00800804 	movi	r2,32
 8006cdc:	0007883a 	mov	r3,zero
 8006ce0:	00000506 	br	8006cf8 <__clzsi2+0x30>
 8006ce4:	00804034 	movhi	r2,256
 8006ce8:	10bfffc4 	addi	r2,r2,-1
 8006cec:	11000c2e 	bgeu	r2,r4,8006d20 <__clzsi2+0x58>
 8006cf0:	00800204 	movi	r2,8
 8006cf4:	00c00604 	movi	r3,24
 8006cf8:	20c8d83a 	srl	r4,r4,r3
 8006cfc:	00c20074 	movhi	r3,2049
 8006d00:	18f5c904 	addi	r3,r3,-10460
 8006d04:	1909883a 	add	r4,r3,r4
 8006d08:	20c00003 	ldbu	r3,0(r4)
 8006d0c:	10c5c83a 	sub	r2,r2,r3
 8006d10:	f800283a 	ret
 8006d14:	00800604 	movi	r2,24
 8006d18:	00c00204 	movi	r3,8
 8006d1c:	003ff606 	br	8006cf8 <__alt_data_end+0xfc006cf8>
 8006d20:	00800404 	movi	r2,16
 8006d24:	1007883a 	mov	r3,r2
 8006d28:	003ff306 	br	8006cf8 <__alt_data_end+0xfc006cf8>

08006d2c <__errno>:
 8006d2c:	00820074 	movhi	r2,2049
 8006d30:	10bcec04 	addi	r2,r2,-3152
 8006d34:	10800017 	ldw	r2,0(r2)
 8006d38:	f800283a 	ret

08006d3c <_puts_r>:
 8006d3c:	defff604 	addi	sp,sp,-40
 8006d40:	dc000715 	stw	r16,28(sp)
 8006d44:	2021883a 	mov	r16,r4
 8006d48:	2809883a 	mov	r4,r5
 8006d4c:	dc400815 	stw	r17,32(sp)
 8006d50:	dfc00915 	stw	ra,36(sp)
 8006d54:	2823883a 	mov	r17,r5
 8006d58:	8006e100 	call	8006e10 <strlen>
 8006d5c:	10c00044 	addi	r3,r2,1
 8006d60:	d8800115 	stw	r2,4(sp)
 8006d64:	00820074 	movhi	r2,2049
 8006d68:	10b60a04 	addi	r2,r2,-10200
 8006d6c:	d8800215 	stw	r2,8(sp)
 8006d70:	00800044 	movi	r2,1
 8006d74:	d8800315 	stw	r2,12(sp)
 8006d78:	00800084 	movi	r2,2
 8006d7c:	dc400015 	stw	r17,0(sp)
 8006d80:	d8c00615 	stw	r3,24(sp)
 8006d84:	dec00415 	stw	sp,16(sp)
 8006d88:	d8800515 	stw	r2,20(sp)
 8006d8c:	80000226 	beq	r16,zero,8006d98 <_puts_r+0x5c>
 8006d90:	80800e17 	ldw	r2,56(r16)
 8006d94:	10001426 	beq	r2,zero,8006de8 <_puts_r+0xac>
 8006d98:	81400217 	ldw	r5,8(r16)
 8006d9c:	2880030b 	ldhu	r2,12(r5)
 8006da0:	10c8000c 	andi	r3,r2,8192
 8006da4:	1800061e 	bne	r3,zero,8006dc0 <_puts_r+0x84>
 8006da8:	29001917 	ldw	r4,100(r5)
 8006dac:	00f7ffc4 	movi	r3,-8193
 8006db0:	10880014 	ori	r2,r2,8192
 8006db4:	20c6703a 	and	r3,r4,r3
 8006db8:	2880030d 	sth	r2,12(r5)
 8006dbc:	28c01915 	stw	r3,100(r5)
 8006dc0:	d9800404 	addi	r6,sp,16
 8006dc4:	8009883a 	mov	r4,r16
 8006dc8:	80072480 	call	8007248 <__sfvwrite_r>
 8006dcc:	1000091e 	bne	r2,zero,8006df4 <_puts_r+0xb8>
 8006dd0:	00800284 	movi	r2,10
 8006dd4:	dfc00917 	ldw	ra,36(sp)
 8006dd8:	dc400817 	ldw	r17,32(sp)
 8006ddc:	dc000717 	ldw	r16,28(sp)
 8006de0:	dec00a04 	addi	sp,sp,40
 8006de4:	f800283a 	ret
 8006de8:	8009883a 	mov	r4,r16
 8006dec:	80071f80 	call	80071f8 <__sinit>
 8006df0:	003fe906 	br	8006d98 <__alt_data_end+0xfc006d98>
 8006df4:	00bfffc4 	movi	r2,-1
 8006df8:	003ff606 	br	8006dd4 <__alt_data_end+0xfc006dd4>

08006dfc <puts>:
 8006dfc:	00820074 	movhi	r2,2049
 8006e00:	10bcec04 	addi	r2,r2,-3152
 8006e04:	200b883a 	mov	r5,r4
 8006e08:	11000017 	ldw	r4,0(r2)
 8006e0c:	8006d3c1 	jmpi	8006d3c <_puts_r>

08006e10 <strlen>:
 8006e10:	208000cc 	andi	r2,r4,3
 8006e14:	10002026 	beq	r2,zero,8006e98 <strlen+0x88>
 8006e18:	20800007 	ldb	r2,0(r4)
 8006e1c:	10002026 	beq	r2,zero,8006ea0 <strlen+0x90>
 8006e20:	2005883a 	mov	r2,r4
 8006e24:	00000206 	br	8006e30 <strlen+0x20>
 8006e28:	10c00007 	ldb	r3,0(r2)
 8006e2c:	18001826 	beq	r3,zero,8006e90 <strlen+0x80>
 8006e30:	10800044 	addi	r2,r2,1
 8006e34:	10c000cc 	andi	r3,r2,3
 8006e38:	183ffb1e 	bne	r3,zero,8006e28 <__alt_data_end+0xfc006e28>
 8006e3c:	10c00017 	ldw	r3,0(r2)
 8006e40:	01ffbff4 	movhi	r7,65279
 8006e44:	39ffbfc4 	addi	r7,r7,-257
 8006e48:	00ca303a 	nor	r5,zero,r3
 8006e4c:	01a02074 	movhi	r6,32897
 8006e50:	19c7883a 	add	r3,r3,r7
 8006e54:	31a02004 	addi	r6,r6,-32640
 8006e58:	1946703a 	and	r3,r3,r5
 8006e5c:	1986703a 	and	r3,r3,r6
 8006e60:	1800091e 	bne	r3,zero,8006e88 <strlen+0x78>
 8006e64:	10800104 	addi	r2,r2,4
 8006e68:	10c00017 	ldw	r3,0(r2)
 8006e6c:	19cb883a 	add	r5,r3,r7
 8006e70:	00c6303a 	nor	r3,zero,r3
 8006e74:	28c6703a 	and	r3,r5,r3
 8006e78:	1986703a 	and	r3,r3,r6
 8006e7c:	183ff926 	beq	r3,zero,8006e64 <__alt_data_end+0xfc006e64>
 8006e80:	00000106 	br	8006e88 <strlen+0x78>
 8006e84:	10800044 	addi	r2,r2,1
 8006e88:	10c00007 	ldb	r3,0(r2)
 8006e8c:	183ffd1e 	bne	r3,zero,8006e84 <__alt_data_end+0xfc006e84>
 8006e90:	1105c83a 	sub	r2,r2,r4
 8006e94:	f800283a 	ret
 8006e98:	2005883a 	mov	r2,r4
 8006e9c:	003fe706 	br	8006e3c <__alt_data_end+0xfc006e3c>
 8006ea0:	0005883a 	mov	r2,zero
 8006ea4:	f800283a 	ret

08006ea8 <__fp_unlock>:
 8006ea8:	0005883a 	mov	r2,zero
 8006eac:	f800283a 	ret

08006eb0 <_cleanup_r>:
 8006eb0:	01420074 	movhi	r5,2049
 8006eb4:	29639104 	addi	r5,r5,-29116
 8006eb8:	80077c81 	jmpi	80077c8 <_fwalk_reent>

08006ebc <__sinit.part.1>:
 8006ebc:	defff704 	addi	sp,sp,-36
 8006ec0:	00c20034 	movhi	r3,2048
 8006ec4:	dfc00815 	stw	ra,32(sp)
 8006ec8:	ddc00715 	stw	r23,28(sp)
 8006ecc:	dd800615 	stw	r22,24(sp)
 8006ed0:	dd400515 	stw	r21,20(sp)
 8006ed4:	dd000415 	stw	r20,16(sp)
 8006ed8:	dcc00315 	stw	r19,12(sp)
 8006edc:	dc800215 	stw	r18,8(sp)
 8006ee0:	dc400115 	stw	r17,4(sp)
 8006ee4:	dc000015 	stw	r16,0(sp)
 8006ee8:	18dbac04 	addi	r3,r3,28336
 8006eec:	24000117 	ldw	r16,4(r4)
 8006ef0:	20c00f15 	stw	r3,60(r4)
 8006ef4:	2080bb04 	addi	r2,r4,748
 8006ef8:	00c000c4 	movi	r3,3
 8006efc:	20c0b915 	stw	r3,740(r4)
 8006f00:	2080ba15 	stw	r2,744(r4)
 8006f04:	2000b815 	stw	zero,736(r4)
 8006f08:	05c00204 	movi	r23,8
 8006f0c:	00800104 	movi	r2,4
 8006f10:	2025883a 	mov	r18,r4
 8006f14:	b80d883a 	mov	r6,r23
 8006f18:	81001704 	addi	r4,r16,92
 8006f1c:	000b883a 	mov	r5,zero
 8006f20:	80000015 	stw	zero,0(r16)
 8006f24:	80000115 	stw	zero,4(r16)
 8006f28:	80000215 	stw	zero,8(r16)
 8006f2c:	8080030d 	sth	r2,12(r16)
 8006f30:	80001915 	stw	zero,100(r16)
 8006f34:	8000038d 	sth	zero,14(r16)
 8006f38:	80000415 	stw	zero,16(r16)
 8006f3c:	80000515 	stw	zero,20(r16)
 8006f40:	80000615 	stw	zero,24(r16)
 8006f44:	80084200 	call	8008420 <memset>
 8006f48:	05820074 	movhi	r22,2049
 8006f4c:	94400217 	ldw	r17,8(r18)
 8006f50:	05420074 	movhi	r21,2049
 8006f54:	05020074 	movhi	r20,2049
 8006f58:	04c20074 	movhi	r19,2049
 8006f5c:	b5a2c004 	addi	r22,r22,-29952
 8006f60:	ad62d704 	addi	r21,r21,-29860
 8006f64:	a522f604 	addi	r20,r20,-29736
 8006f68:	9ce30d04 	addi	r19,r19,-29644
 8006f6c:	85800815 	stw	r22,32(r16)
 8006f70:	85400915 	stw	r21,36(r16)
 8006f74:	85000a15 	stw	r20,40(r16)
 8006f78:	84c00b15 	stw	r19,44(r16)
 8006f7c:	84000715 	stw	r16,28(r16)
 8006f80:	00800284 	movi	r2,10
 8006f84:	8880030d 	sth	r2,12(r17)
 8006f88:	00800044 	movi	r2,1
 8006f8c:	b80d883a 	mov	r6,r23
 8006f90:	89001704 	addi	r4,r17,92
 8006f94:	000b883a 	mov	r5,zero
 8006f98:	88000015 	stw	zero,0(r17)
 8006f9c:	88000115 	stw	zero,4(r17)
 8006fa0:	88000215 	stw	zero,8(r17)
 8006fa4:	88001915 	stw	zero,100(r17)
 8006fa8:	8880038d 	sth	r2,14(r17)
 8006fac:	88000415 	stw	zero,16(r17)
 8006fb0:	88000515 	stw	zero,20(r17)
 8006fb4:	88000615 	stw	zero,24(r17)
 8006fb8:	80084200 	call	8008420 <memset>
 8006fbc:	94000317 	ldw	r16,12(r18)
 8006fc0:	00800484 	movi	r2,18
 8006fc4:	8c400715 	stw	r17,28(r17)
 8006fc8:	8d800815 	stw	r22,32(r17)
 8006fcc:	8d400915 	stw	r21,36(r17)
 8006fd0:	8d000a15 	stw	r20,40(r17)
 8006fd4:	8cc00b15 	stw	r19,44(r17)
 8006fd8:	8080030d 	sth	r2,12(r16)
 8006fdc:	00800084 	movi	r2,2
 8006fe0:	80000015 	stw	zero,0(r16)
 8006fe4:	80000115 	stw	zero,4(r16)
 8006fe8:	80000215 	stw	zero,8(r16)
 8006fec:	80001915 	stw	zero,100(r16)
 8006ff0:	8080038d 	sth	r2,14(r16)
 8006ff4:	80000415 	stw	zero,16(r16)
 8006ff8:	80000515 	stw	zero,20(r16)
 8006ffc:	80000615 	stw	zero,24(r16)
 8007000:	b80d883a 	mov	r6,r23
 8007004:	000b883a 	mov	r5,zero
 8007008:	81001704 	addi	r4,r16,92
 800700c:	80084200 	call	8008420 <memset>
 8007010:	00800044 	movi	r2,1
 8007014:	84000715 	stw	r16,28(r16)
 8007018:	85800815 	stw	r22,32(r16)
 800701c:	85400915 	stw	r21,36(r16)
 8007020:	85000a15 	stw	r20,40(r16)
 8007024:	84c00b15 	stw	r19,44(r16)
 8007028:	90800e15 	stw	r2,56(r18)
 800702c:	dfc00817 	ldw	ra,32(sp)
 8007030:	ddc00717 	ldw	r23,28(sp)
 8007034:	dd800617 	ldw	r22,24(sp)
 8007038:	dd400517 	ldw	r21,20(sp)
 800703c:	dd000417 	ldw	r20,16(sp)
 8007040:	dcc00317 	ldw	r19,12(sp)
 8007044:	dc800217 	ldw	r18,8(sp)
 8007048:	dc400117 	ldw	r17,4(sp)
 800704c:	dc000017 	ldw	r16,0(sp)
 8007050:	dec00904 	addi	sp,sp,36
 8007054:	f800283a 	ret

08007058 <__fp_lock>:
 8007058:	0005883a 	mov	r2,zero
 800705c:	f800283a 	ret

08007060 <__sfmoreglue>:
 8007060:	defffc04 	addi	sp,sp,-16
 8007064:	dc400115 	stw	r17,4(sp)
 8007068:	2c7fffc4 	addi	r17,r5,-1
 800706c:	8c401a24 	muli	r17,r17,104
 8007070:	dc800215 	stw	r18,8(sp)
 8007074:	2825883a 	mov	r18,r5
 8007078:	89401d04 	addi	r5,r17,116
 800707c:	dc000015 	stw	r16,0(sp)
 8007080:	dfc00315 	stw	ra,12(sp)
 8007084:	800788c0 	call	800788c <_malloc_r>
 8007088:	1021883a 	mov	r16,r2
 800708c:	10000726 	beq	r2,zero,80070ac <__sfmoreglue+0x4c>
 8007090:	11000304 	addi	r4,r2,12
 8007094:	10000015 	stw	zero,0(r2)
 8007098:	14800115 	stw	r18,4(r2)
 800709c:	11000215 	stw	r4,8(r2)
 80070a0:	89801a04 	addi	r6,r17,104
 80070a4:	000b883a 	mov	r5,zero
 80070a8:	80084200 	call	8008420 <memset>
 80070ac:	8005883a 	mov	r2,r16
 80070b0:	dfc00317 	ldw	ra,12(sp)
 80070b4:	dc800217 	ldw	r18,8(sp)
 80070b8:	dc400117 	ldw	r17,4(sp)
 80070bc:	dc000017 	ldw	r16,0(sp)
 80070c0:	dec00404 	addi	sp,sp,16
 80070c4:	f800283a 	ret

080070c8 <__sfp>:
 80070c8:	defffb04 	addi	sp,sp,-20
 80070cc:	dc000015 	stw	r16,0(sp)
 80070d0:	04020074 	movhi	r16,2049
 80070d4:	843ceb04 	addi	r16,r16,-3156
 80070d8:	dcc00315 	stw	r19,12(sp)
 80070dc:	2027883a 	mov	r19,r4
 80070e0:	81000017 	ldw	r4,0(r16)
 80070e4:	dfc00415 	stw	ra,16(sp)
 80070e8:	dc800215 	stw	r18,8(sp)
 80070ec:	20800e17 	ldw	r2,56(r4)
 80070f0:	dc400115 	stw	r17,4(sp)
 80070f4:	1000021e 	bne	r2,zero,8007100 <__sfp+0x38>
 80070f8:	8006ebc0 	call	8006ebc <__sinit.part.1>
 80070fc:	81000017 	ldw	r4,0(r16)
 8007100:	2480b804 	addi	r18,r4,736
 8007104:	047fffc4 	movi	r17,-1
 8007108:	91000117 	ldw	r4,4(r18)
 800710c:	94000217 	ldw	r16,8(r18)
 8007110:	213fffc4 	addi	r4,r4,-1
 8007114:	20000a16 	blt	r4,zero,8007140 <__sfp+0x78>
 8007118:	8080030f 	ldh	r2,12(r16)
 800711c:	10000c26 	beq	r2,zero,8007150 <__sfp+0x88>
 8007120:	80c01d04 	addi	r3,r16,116
 8007124:	00000206 	br	8007130 <__sfp+0x68>
 8007128:	18bfe60f 	ldh	r2,-104(r3)
 800712c:	10000826 	beq	r2,zero,8007150 <__sfp+0x88>
 8007130:	213fffc4 	addi	r4,r4,-1
 8007134:	1c3ffd04 	addi	r16,r3,-12
 8007138:	18c01a04 	addi	r3,r3,104
 800713c:	247ffa1e 	bne	r4,r17,8007128 <__alt_data_end+0xfc007128>
 8007140:	90800017 	ldw	r2,0(r18)
 8007144:	10001d26 	beq	r2,zero,80071bc <__sfp+0xf4>
 8007148:	1025883a 	mov	r18,r2
 800714c:	003fee06 	br	8007108 <__alt_data_end+0xfc007108>
 8007150:	00bfffc4 	movi	r2,-1
 8007154:	8080038d 	sth	r2,14(r16)
 8007158:	00800044 	movi	r2,1
 800715c:	8080030d 	sth	r2,12(r16)
 8007160:	80001915 	stw	zero,100(r16)
 8007164:	80000015 	stw	zero,0(r16)
 8007168:	80000215 	stw	zero,8(r16)
 800716c:	80000115 	stw	zero,4(r16)
 8007170:	80000415 	stw	zero,16(r16)
 8007174:	80000515 	stw	zero,20(r16)
 8007178:	80000615 	stw	zero,24(r16)
 800717c:	01800204 	movi	r6,8
 8007180:	000b883a 	mov	r5,zero
 8007184:	81001704 	addi	r4,r16,92
 8007188:	80084200 	call	8008420 <memset>
 800718c:	8005883a 	mov	r2,r16
 8007190:	80000c15 	stw	zero,48(r16)
 8007194:	80000d15 	stw	zero,52(r16)
 8007198:	80001115 	stw	zero,68(r16)
 800719c:	80001215 	stw	zero,72(r16)
 80071a0:	dfc00417 	ldw	ra,16(sp)
 80071a4:	dcc00317 	ldw	r19,12(sp)
 80071a8:	dc800217 	ldw	r18,8(sp)
 80071ac:	dc400117 	ldw	r17,4(sp)
 80071b0:	dc000017 	ldw	r16,0(sp)
 80071b4:	dec00504 	addi	sp,sp,20
 80071b8:	f800283a 	ret
 80071bc:	01400104 	movi	r5,4
 80071c0:	9809883a 	mov	r4,r19
 80071c4:	80070600 	call	8007060 <__sfmoreglue>
 80071c8:	90800015 	stw	r2,0(r18)
 80071cc:	103fde1e 	bne	r2,zero,8007148 <__alt_data_end+0xfc007148>
 80071d0:	00800304 	movi	r2,12
 80071d4:	98800015 	stw	r2,0(r19)
 80071d8:	0005883a 	mov	r2,zero
 80071dc:	003ff006 	br	80071a0 <__alt_data_end+0xfc0071a0>

080071e0 <_cleanup>:
 80071e0:	00820074 	movhi	r2,2049
 80071e4:	10bceb04 	addi	r2,r2,-3156
 80071e8:	11000017 	ldw	r4,0(r2)
 80071ec:	01420074 	movhi	r5,2049
 80071f0:	29639104 	addi	r5,r5,-29116
 80071f4:	80077c81 	jmpi	80077c8 <_fwalk_reent>

080071f8 <__sinit>:
 80071f8:	20800e17 	ldw	r2,56(r4)
 80071fc:	10000126 	beq	r2,zero,8007204 <__sinit+0xc>
 8007200:	f800283a 	ret
 8007204:	8006ebc1 	jmpi	8006ebc <__sinit.part.1>

08007208 <__sfp_lock_acquire>:
 8007208:	f800283a 	ret

0800720c <__sfp_lock_release>:
 800720c:	f800283a 	ret

08007210 <__sinit_lock_acquire>:
 8007210:	f800283a 	ret

08007214 <__sinit_lock_release>:
 8007214:	f800283a 	ret

08007218 <__fp_lock_all>:
 8007218:	00820074 	movhi	r2,2049
 800721c:	10bcec04 	addi	r2,r2,-3152
 8007220:	11000017 	ldw	r4,0(r2)
 8007224:	01420034 	movhi	r5,2048
 8007228:	295c1604 	addi	r5,r5,28760
 800722c:	80077041 	jmpi	8007704 <_fwalk>

08007230 <__fp_unlock_all>:
 8007230:	00820074 	movhi	r2,2049
 8007234:	10bcec04 	addi	r2,r2,-3152
 8007238:	11000017 	ldw	r4,0(r2)
 800723c:	01420034 	movhi	r5,2048
 8007240:	295baa04 	addi	r5,r5,28328
 8007244:	80077041 	jmpi	8007704 <_fwalk>

08007248 <__sfvwrite_r>:
 8007248:	30800217 	ldw	r2,8(r6)
 800724c:	10006726 	beq	r2,zero,80073ec <__sfvwrite_r+0x1a4>
 8007250:	28c0030b 	ldhu	r3,12(r5)
 8007254:	defff404 	addi	sp,sp,-48
 8007258:	dd400715 	stw	r21,28(sp)
 800725c:	dd000615 	stw	r20,24(sp)
 8007260:	dc000215 	stw	r16,8(sp)
 8007264:	dfc00b15 	stw	ra,44(sp)
 8007268:	df000a15 	stw	fp,40(sp)
 800726c:	ddc00915 	stw	r23,36(sp)
 8007270:	dd800815 	stw	r22,32(sp)
 8007274:	dcc00515 	stw	r19,20(sp)
 8007278:	dc800415 	stw	r18,16(sp)
 800727c:	dc400315 	stw	r17,12(sp)
 8007280:	1880020c 	andi	r2,r3,8
 8007284:	2821883a 	mov	r16,r5
 8007288:	202b883a 	mov	r21,r4
 800728c:	3029883a 	mov	r20,r6
 8007290:	10002726 	beq	r2,zero,8007330 <__sfvwrite_r+0xe8>
 8007294:	28800417 	ldw	r2,16(r5)
 8007298:	10002526 	beq	r2,zero,8007330 <__sfvwrite_r+0xe8>
 800729c:	1880008c 	andi	r2,r3,2
 80072a0:	a4400017 	ldw	r17,0(r20)
 80072a4:	10002a26 	beq	r2,zero,8007350 <__sfvwrite_r+0x108>
 80072a8:	05a00034 	movhi	r22,32768
 80072ac:	0027883a 	mov	r19,zero
 80072b0:	0025883a 	mov	r18,zero
 80072b4:	b5bf0004 	addi	r22,r22,-1024
 80072b8:	980d883a 	mov	r6,r19
 80072bc:	a809883a 	mov	r4,r21
 80072c0:	90004626 	beq	r18,zero,80073dc <__sfvwrite_r+0x194>
 80072c4:	900f883a 	mov	r7,r18
 80072c8:	b480022e 	bgeu	r22,r18,80072d4 <__sfvwrite_r+0x8c>
 80072cc:	01e00034 	movhi	r7,32768
 80072d0:	39ff0004 	addi	r7,r7,-1024
 80072d4:	80800917 	ldw	r2,36(r16)
 80072d8:	81400717 	ldw	r5,28(r16)
 80072dc:	103ee83a 	callr	r2
 80072e0:	0080570e 	bge	zero,r2,8007440 <__sfvwrite_r+0x1f8>
 80072e4:	a0c00217 	ldw	r3,8(r20)
 80072e8:	98a7883a 	add	r19,r19,r2
 80072ec:	90a5c83a 	sub	r18,r18,r2
 80072f0:	1885c83a 	sub	r2,r3,r2
 80072f4:	a0800215 	stw	r2,8(r20)
 80072f8:	103fef1e 	bne	r2,zero,80072b8 <__alt_data_end+0xfc0072b8>
 80072fc:	0005883a 	mov	r2,zero
 8007300:	dfc00b17 	ldw	ra,44(sp)
 8007304:	df000a17 	ldw	fp,40(sp)
 8007308:	ddc00917 	ldw	r23,36(sp)
 800730c:	dd800817 	ldw	r22,32(sp)
 8007310:	dd400717 	ldw	r21,28(sp)
 8007314:	dd000617 	ldw	r20,24(sp)
 8007318:	dcc00517 	ldw	r19,20(sp)
 800731c:	dc800417 	ldw	r18,16(sp)
 8007320:	dc400317 	ldw	r17,12(sp)
 8007324:	dc000217 	ldw	r16,8(sp)
 8007328:	dec00c04 	addi	sp,sp,48
 800732c:	f800283a 	ret
 8007330:	800b883a 	mov	r5,r16
 8007334:	a809883a 	mov	r4,r21
 8007338:	8008c9c0 	call	8008c9c <__swsetup_r>
 800733c:	1000eb1e 	bne	r2,zero,80076ec <__sfvwrite_r+0x4a4>
 8007340:	80c0030b 	ldhu	r3,12(r16)
 8007344:	a4400017 	ldw	r17,0(r20)
 8007348:	1880008c 	andi	r2,r3,2
 800734c:	103fd61e 	bne	r2,zero,80072a8 <__alt_data_end+0xfc0072a8>
 8007350:	1880004c 	andi	r2,r3,1
 8007354:	10003f1e 	bne	r2,zero,8007454 <__sfvwrite_r+0x20c>
 8007358:	0039883a 	mov	fp,zero
 800735c:	0025883a 	mov	r18,zero
 8007360:	90001a26 	beq	r18,zero,80073cc <__sfvwrite_r+0x184>
 8007364:	1880800c 	andi	r2,r3,512
 8007368:	84c00217 	ldw	r19,8(r16)
 800736c:	10002126 	beq	r2,zero,80073f4 <__sfvwrite_r+0x1ac>
 8007370:	982f883a 	mov	r23,r19
 8007374:	94c09336 	bltu	r18,r19,80075c4 <__sfvwrite_r+0x37c>
 8007378:	1881200c 	andi	r2,r3,1152
 800737c:	10009e1e 	bne	r2,zero,80075f8 <__sfvwrite_r+0x3b0>
 8007380:	81000017 	ldw	r4,0(r16)
 8007384:	b80d883a 	mov	r6,r23
 8007388:	e00b883a 	mov	r5,fp
 800738c:	80082c40 	call	80082c4 <memmove>
 8007390:	80c00217 	ldw	r3,8(r16)
 8007394:	81000017 	ldw	r4,0(r16)
 8007398:	9005883a 	mov	r2,r18
 800739c:	1ce7c83a 	sub	r19,r3,r19
 80073a0:	25cf883a 	add	r7,r4,r23
 80073a4:	84c00215 	stw	r19,8(r16)
 80073a8:	81c00015 	stw	r7,0(r16)
 80073ac:	a0c00217 	ldw	r3,8(r20)
 80073b0:	e0b9883a 	add	fp,fp,r2
 80073b4:	90a5c83a 	sub	r18,r18,r2
 80073b8:	18a7c83a 	sub	r19,r3,r2
 80073bc:	a4c00215 	stw	r19,8(r20)
 80073c0:	983fce26 	beq	r19,zero,80072fc <__alt_data_end+0xfc0072fc>
 80073c4:	80c0030b 	ldhu	r3,12(r16)
 80073c8:	903fe61e 	bne	r18,zero,8007364 <__alt_data_end+0xfc007364>
 80073cc:	8f000017 	ldw	fp,0(r17)
 80073d0:	8c800117 	ldw	r18,4(r17)
 80073d4:	8c400204 	addi	r17,r17,8
 80073d8:	003fe106 	br	8007360 <__alt_data_end+0xfc007360>
 80073dc:	8cc00017 	ldw	r19,0(r17)
 80073e0:	8c800117 	ldw	r18,4(r17)
 80073e4:	8c400204 	addi	r17,r17,8
 80073e8:	003fb306 	br	80072b8 <__alt_data_end+0xfc0072b8>
 80073ec:	0005883a 	mov	r2,zero
 80073f0:	f800283a 	ret
 80073f4:	81000017 	ldw	r4,0(r16)
 80073f8:	80800417 	ldw	r2,16(r16)
 80073fc:	11005736 	bltu	r2,r4,800755c <__sfvwrite_r+0x314>
 8007400:	85c00517 	ldw	r23,20(r16)
 8007404:	95c05536 	bltu	r18,r23,800755c <__sfvwrite_r+0x314>
 8007408:	00a00034 	movhi	r2,32768
 800740c:	10bfffc4 	addi	r2,r2,-1
 8007410:	9009883a 	mov	r4,r18
 8007414:	1480012e 	bgeu	r2,r18,800741c <__sfvwrite_r+0x1d4>
 8007418:	1009883a 	mov	r4,r2
 800741c:	b80b883a 	mov	r5,r23
 8007420:	8002ebc0 	call	8002ebc <__divsi3>
 8007424:	15cf383a 	mul	r7,r2,r23
 8007428:	81400717 	ldw	r5,28(r16)
 800742c:	80800917 	ldw	r2,36(r16)
 8007430:	e00d883a 	mov	r6,fp
 8007434:	a809883a 	mov	r4,r21
 8007438:	103ee83a 	callr	r2
 800743c:	00bfdb16 	blt	zero,r2,80073ac <__alt_data_end+0xfc0073ac>
 8007440:	8080030b 	ldhu	r2,12(r16)
 8007444:	10801014 	ori	r2,r2,64
 8007448:	8080030d 	sth	r2,12(r16)
 800744c:	00bfffc4 	movi	r2,-1
 8007450:	003fab06 	br	8007300 <__alt_data_end+0xfc007300>
 8007454:	0027883a 	mov	r19,zero
 8007458:	0011883a 	mov	r8,zero
 800745c:	0039883a 	mov	fp,zero
 8007460:	0025883a 	mov	r18,zero
 8007464:	90001f26 	beq	r18,zero,80074e4 <__sfvwrite_r+0x29c>
 8007468:	40005a26 	beq	r8,zero,80075d4 <__sfvwrite_r+0x38c>
 800746c:	982d883a 	mov	r22,r19
 8007470:	94c0012e 	bgeu	r18,r19,8007478 <__sfvwrite_r+0x230>
 8007474:	902d883a 	mov	r22,r18
 8007478:	81000017 	ldw	r4,0(r16)
 800747c:	80800417 	ldw	r2,16(r16)
 8007480:	b02f883a 	mov	r23,r22
 8007484:	81c00517 	ldw	r7,20(r16)
 8007488:	1100032e 	bgeu	r2,r4,8007498 <__sfvwrite_r+0x250>
 800748c:	80c00217 	ldw	r3,8(r16)
 8007490:	38c7883a 	add	r3,r7,r3
 8007494:	1d801816 	blt	r3,r22,80074f8 <__sfvwrite_r+0x2b0>
 8007498:	b1c03e16 	blt	r22,r7,8007594 <__sfvwrite_r+0x34c>
 800749c:	80800917 	ldw	r2,36(r16)
 80074a0:	81400717 	ldw	r5,28(r16)
 80074a4:	e00d883a 	mov	r6,fp
 80074a8:	da000115 	stw	r8,4(sp)
 80074ac:	a809883a 	mov	r4,r21
 80074b0:	103ee83a 	callr	r2
 80074b4:	102f883a 	mov	r23,r2
 80074b8:	da000117 	ldw	r8,4(sp)
 80074bc:	00bfe00e 	bge	zero,r2,8007440 <__alt_data_end+0xfc007440>
 80074c0:	9de7c83a 	sub	r19,r19,r23
 80074c4:	98001f26 	beq	r19,zero,8007544 <__sfvwrite_r+0x2fc>
 80074c8:	a0800217 	ldw	r2,8(r20)
 80074cc:	e5f9883a 	add	fp,fp,r23
 80074d0:	95e5c83a 	sub	r18,r18,r23
 80074d4:	15efc83a 	sub	r23,r2,r23
 80074d8:	a5c00215 	stw	r23,8(r20)
 80074dc:	b83f8726 	beq	r23,zero,80072fc <__alt_data_end+0xfc0072fc>
 80074e0:	903fe11e 	bne	r18,zero,8007468 <__alt_data_end+0xfc007468>
 80074e4:	8f000017 	ldw	fp,0(r17)
 80074e8:	8c800117 	ldw	r18,4(r17)
 80074ec:	0011883a 	mov	r8,zero
 80074f0:	8c400204 	addi	r17,r17,8
 80074f4:	003fdb06 	br	8007464 <__alt_data_end+0xfc007464>
 80074f8:	180d883a 	mov	r6,r3
 80074fc:	e00b883a 	mov	r5,fp
 8007500:	da000115 	stw	r8,4(sp)
 8007504:	d8c00015 	stw	r3,0(sp)
 8007508:	80082c40 	call	80082c4 <memmove>
 800750c:	d8c00017 	ldw	r3,0(sp)
 8007510:	80800017 	ldw	r2,0(r16)
 8007514:	800b883a 	mov	r5,r16
 8007518:	a809883a 	mov	r4,r21
 800751c:	10c5883a 	add	r2,r2,r3
 8007520:	80800015 	stw	r2,0(r16)
 8007524:	d8c00015 	stw	r3,0(sp)
 8007528:	80091640 	call	8009164 <_fflush_r>
 800752c:	d8c00017 	ldw	r3,0(sp)
 8007530:	da000117 	ldw	r8,4(sp)
 8007534:	103fc21e 	bne	r2,zero,8007440 <__alt_data_end+0xfc007440>
 8007538:	182f883a 	mov	r23,r3
 800753c:	9de7c83a 	sub	r19,r19,r23
 8007540:	983fe11e 	bne	r19,zero,80074c8 <__alt_data_end+0xfc0074c8>
 8007544:	800b883a 	mov	r5,r16
 8007548:	a809883a 	mov	r4,r21
 800754c:	80091640 	call	8009164 <_fflush_r>
 8007550:	103fbb1e 	bne	r2,zero,8007440 <__alt_data_end+0xfc007440>
 8007554:	0011883a 	mov	r8,zero
 8007558:	003fdb06 	br	80074c8 <__alt_data_end+0xfc0074c8>
 800755c:	94c0012e 	bgeu	r18,r19,8007564 <__sfvwrite_r+0x31c>
 8007560:	9027883a 	mov	r19,r18
 8007564:	980d883a 	mov	r6,r19
 8007568:	e00b883a 	mov	r5,fp
 800756c:	80082c40 	call	80082c4 <memmove>
 8007570:	80800217 	ldw	r2,8(r16)
 8007574:	80c00017 	ldw	r3,0(r16)
 8007578:	14c5c83a 	sub	r2,r2,r19
 800757c:	1cc7883a 	add	r3,r3,r19
 8007580:	80800215 	stw	r2,8(r16)
 8007584:	80c00015 	stw	r3,0(r16)
 8007588:	10004326 	beq	r2,zero,8007698 <__sfvwrite_r+0x450>
 800758c:	9805883a 	mov	r2,r19
 8007590:	003f8606 	br	80073ac <__alt_data_end+0xfc0073ac>
 8007594:	b00d883a 	mov	r6,r22
 8007598:	e00b883a 	mov	r5,fp
 800759c:	da000115 	stw	r8,4(sp)
 80075a0:	80082c40 	call	80082c4 <memmove>
 80075a4:	80800217 	ldw	r2,8(r16)
 80075a8:	80c00017 	ldw	r3,0(r16)
 80075ac:	da000117 	ldw	r8,4(sp)
 80075b0:	1585c83a 	sub	r2,r2,r22
 80075b4:	1dad883a 	add	r22,r3,r22
 80075b8:	80800215 	stw	r2,8(r16)
 80075bc:	85800015 	stw	r22,0(r16)
 80075c0:	003fbf06 	br	80074c0 <__alt_data_end+0xfc0074c0>
 80075c4:	81000017 	ldw	r4,0(r16)
 80075c8:	9027883a 	mov	r19,r18
 80075cc:	902f883a 	mov	r23,r18
 80075d0:	003f6c06 	br	8007384 <__alt_data_end+0xfc007384>
 80075d4:	900d883a 	mov	r6,r18
 80075d8:	01400284 	movi	r5,10
 80075dc:	e009883a 	mov	r4,fp
 80075e0:	80080980 	call	8008098 <memchr>
 80075e4:	10003e26 	beq	r2,zero,80076e0 <__sfvwrite_r+0x498>
 80075e8:	10800044 	addi	r2,r2,1
 80075ec:	1727c83a 	sub	r19,r2,fp
 80075f0:	02000044 	movi	r8,1
 80075f4:	003f9d06 	br	800746c <__alt_data_end+0xfc00746c>
 80075f8:	80800517 	ldw	r2,20(r16)
 80075fc:	81400417 	ldw	r5,16(r16)
 8007600:	81c00017 	ldw	r7,0(r16)
 8007604:	10a7883a 	add	r19,r2,r2
 8007608:	9885883a 	add	r2,r19,r2
 800760c:	1026d7fa 	srli	r19,r2,31
 8007610:	396dc83a 	sub	r22,r7,r5
 8007614:	b1000044 	addi	r4,r22,1
 8007618:	9885883a 	add	r2,r19,r2
 800761c:	1027d07a 	srai	r19,r2,1
 8007620:	2485883a 	add	r2,r4,r18
 8007624:	980d883a 	mov	r6,r19
 8007628:	9880022e 	bgeu	r19,r2,8007634 <__sfvwrite_r+0x3ec>
 800762c:	1027883a 	mov	r19,r2
 8007630:	100d883a 	mov	r6,r2
 8007634:	18c1000c 	andi	r3,r3,1024
 8007638:	18001c26 	beq	r3,zero,80076ac <__sfvwrite_r+0x464>
 800763c:	300b883a 	mov	r5,r6
 8007640:	a809883a 	mov	r4,r21
 8007644:	800788c0 	call	800788c <_malloc_r>
 8007648:	102f883a 	mov	r23,r2
 800764c:	10002926 	beq	r2,zero,80076f4 <__sfvwrite_r+0x4ac>
 8007650:	81400417 	ldw	r5,16(r16)
 8007654:	b00d883a 	mov	r6,r22
 8007658:	1009883a 	mov	r4,r2
 800765c:	800817c0 	call	800817c <memcpy>
 8007660:	8080030b 	ldhu	r2,12(r16)
 8007664:	00fedfc4 	movi	r3,-1153
 8007668:	10c4703a 	and	r2,r2,r3
 800766c:	10802014 	ori	r2,r2,128
 8007670:	8080030d 	sth	r2,12(r16)
 8007674:	bd89883a 	add	r4,r23,r22
 8007678:	9d8fc83a 	sub	r7,r19,r22
 800767c:	85c00415 	stw	r23,16(r16)
 8007680:	84c00515 	stw	r19,20(r16)
 8007684:	81000015 	stw	r4,0(r16)
 8007688:	9027883a 	mov	r19,r18
 800768c:	81c00215 	stw	r7,8(r16)
 8007690:	902f883a 	mov	r23,r18
 8007694:	003f3b06 	br	8007384 <__alt_data_end+0xfc007384>
 8007698:	800b883a 	mov	r5,r16
 800769c:	a809883a 	mov	r4,r21
 80076a0:	80091640 	call	8009164 <_fflush_r>
 80076a4:	103fb926 	beq	r2,zero,800758c <__alt_data_end+0xfc00758c>
 80076a8:	003f6506 	br	8007440 <__alt_data_end+0xfc007440>
 80076ac:	a809883a 	mov	r4,r21
 80076b0:	80085480 	call	8008548 <_realloc_r>
 80076b4:	102f883a 	mov	r23,r2
 80076b8:	103fee1e 	bne	r2,zero,8007674 <__alt_data_end+0xfc007674>
 80076bc:	81400417 	ldw	r5,16(r16)
 80076c0:	a809883a 	mov	r4,r21
 80076c4:	80093140 	call	8009314 <_free_r>
 80076c8:	8080030b 	ldhu	r2,12(r16)
 80076cc:	00ffdfc4 	movi	r3,-129
 80076d0:	1884703a 	and	r2,r3,r2
 80076d4:	00c00304 	movi	r3,12
 80076d8:	a8c00015 	stw	r3,0(r21)
 80076dc:	003f5906 	br	8007444 <__alt_data_end+0xfc007444>
 80076e0:	94c00044 	addi	r19,r18,1
 80076e4:	02000044 	movi	r8,1
 80076e8:	003f6006 	br	800746c <__alt_data_end+0xfc00746c>
 80076ec:	00bfffc4 	movi	r2,-1
 80076f0:	003f0306 	br	8007300 <__alt_data_end+0xfc007300>
 80076f4:	00800304 	movi	r2,12
 80076f8:	a8800015 	stw	r2,0(r21)
 80076fc:	8080030b 	ldhu	r2,12(r16)
 8007700:	003f5006 	br	8007444 <__alt_data_end+0xfc007444>

08007704 <_fwalk>:
 8007704:	defff704 	addi	sp,sp,-36
 8007708:	dd000415 	stw	r20,16(sp)
 800770c:	dfc00815 	stw	ra,32(sp)
 8007710:	ddc00715 	stw	r23,28(sp)
 8007714:	dd800615 	stw	r22,24(sp)
 8007718:	dd400515 	stw	r21,20(sp)
 800771c:	dcc00315 	stw	r19,12(sp)
 8007720:	dc800215 	stw	r18,8(sp)
 8007724:	dc400115 	stw	r17,4(sp)
 8007728:	dc000015 	stw	r16,0(sp)
 800772c:	2500b804 	addi	r20,r4,736
 8007730:	a0002326 	beq	r20,zero,80077c0 <_fwalk+0xbc>
 8007734:	282b883a 	mov	r21,r5
 8007738:	002f883a 	mov	r23,zero
 800773c:	05800044 	movi	r22,1
 8007740:	04ffffc4 	movi	r19,-1
 8007744:	a4400117 	ldw	r17,4(r20)
 8007748:	a4800217 	ldw	r18,8(r20)
 800774c:	8c7fffc4 	addi	r17,r17,-1
 8007750:	88000d16 	blt	r17,zero,8007788 <_fwalk+0x84>
 8007754:	94000304 	addi	r16,r18,12
 8007758:	94800384 	addi	r18,r18,14
 800775c:	8080000b 	ldhu	r2,0(r16)
 8007760:	8c7fffc4 	addi	r17,r17,-1
 8007764:	813ffd04 	addi	r4,r16,-12
 8007768:	b080042e 	bgeu	r22,r2,800777c <_fwalk+0x78>
 800776c:	9080000f 	ldh	r2,0(r18)
 8007770:	14c00226 	beq	r2,r19,800777c <_fwalk+0x78>
 8007774:	a83ee83a 	callr	r21
 8007778:	b8aeb03a 	or	r23,r23,r2
 800777c:	84001a04 	addi	r16,r16,104
 8007780:	94801a04 	addi	r18,r18,104
 8007784:	8cfff51e 	bne	r17,r19,800775c <__alt_data_end+0xfc00775c>
 8007788:	a5000017 	ldw	r20,0(r20)
 800778c:	a03fed1e 	bne	r20,zero,8007744 <__alt_data_end+0xfc007744>
 8007790:	b805883a 	mov	r2,r23
 8007794:	dfc00817 	ldw	ra,32(sp)
 8007798:	ddc00717 	ldw	r23,28(sp)
 800779c:	dd800617 	ldw	r22,24(sp)
 80077a0:	dd400517 	ldw	r21,20(sp)
 80077a4:	dd000417 	ldw	r20,16(sp)
 80077a8:	dcc00317 	ldw	r19,12(sp)
 80077ac:	dc800217 	ldw	r18,8(sp)
 80077b0:	dc400117 	ldw	r17,4(sp)
 80077b4:	dc000017 	ldw	r16,0(sp)
 80077b8:	dec00904 	addi	sp,sp,36
 80077bc:	f800283a 	ret
 80077c0:	002f883a 	mov	r23,zero
 80077c4:	003ff206 	br	8007790 <__alt_data_end+0xfc007790>

080077c8 <_fwalk_reent>:
 80077c8:	defff704 	addi	sp,sp,-36
 80077cc:	dd000415 	stw	r20,16(sp)
 80077d0:	dfc00815 	stw	ra,32(sp)
 80077d4:	ddc00715 	stw	r23,28(sp)
 80077d8:	dd800615 	stw	r22,24(sp)
 80077dc:	dd400515 	stw	r21,20(sp)
 80077e0:	dcc00315 	stw	r19,12(sp)
 80077e4:	dc800215 	stw	r18,8(sp)
 80077e8:	dc400115 	stw	r17,4(sp)
 80077ec:	dc000015 	stw	r16,0(sp)
 80077f0:	2500b804 	addi	r20,r4,736
 80077f4:	a0002326 	beq	r20,zero,8007884 <_fwalk_reent+0xbc>
 80077f8:	282b883a 	mov	r21,r5
 80077fc:	2027883a 	mov	r19,r4
 8007800:	002f883a 	mov	r23,zero
 8007804:	05800044 	movi	r22,1
 8007808:	04bfffc4 	movi	r18,-1
 800780c:	a4400117 	ldw	r17,4(r20)
 8007810:	a4000217 	ldw	r16,8(r20)
 8007814:	8c7fffc4 	addi	r17,r17,-1
 8007818:	88000c16 	blt	r17,zero,800784c <_fwalk_reent+0x84>
 800781c:	84000304 	addi	r16,r16,12
 8007820:	8080000b 	ldhu	r2,0(r16)
 8007824:	8c7fffc4 	addi	r17,r17,-1
 8007828:	817ffd04 	addi	r5,r16,-12
 800782c:	b080052e 	bgeu	r22,r2,8007844 <_fwalk_reent+0x7c>
 8007830:	8080008f 	ldh	r2,2(r16)
 8007834:	9809883a 	mov	r4,r19
 8007838:	14800226 	beq	r2,r18,8007844 <_fwalk_reent+0x7c>
 800783c:	a83ee83a 	callr	r21
 8007840:	b8aeb03a 	or	r23,r23,r2
 8007844:	84001a04 	addi	r16,r16,104
 8007848:	8cbff51e 	bne	r17,r18,8007820 <__alt_data_end+0xfc007820>
 800784c:	a5000017 	ldw	r20,0(r20)
 8007850:	a03fee1e 	bne	r20,zero,800780c <__alt_data_end+0xfc00780c>
 8007854:	b805883a 	mov	r2,r23
 8007858:	dfc00817 	ldw	ra,32(sp)
 800785c:	ddc00717 	ldw	r23,28(sp)
 8007860:	dd800617 	ldw	r22,24(sp)
 8007864:	dd400517 	ldw	r21,20(sp)
 8007868:	dd000417 	ldw	r20,16(sp)
 800786c:	dcc00317 	ldw	r19,12(sp)
 8007870:	dc800217 	ldw	r18,8(sp)
 8007874:	dc400117 	ldw	r17,4(sp)
 8007878:	dc000017 	ldw	r16,0(sp)
 800787c:	dec00904 	addi	sp,sp,36
 8007880:	f800283a 	ret
 8007884:	002f883a 	mov	r23,zero
 8007888:	003ff206 	br	8007854 <__alt_data_end+0xfc007854>

0800788c <_malloc_r>:
 800788c:	defff504 	addi	sp,sp,-44
 8007890:	dc800315 	stw	r18,12(sp)
 8007894:	dfc00a15 	stw	ra,40(sp)
 8007898:	df000915 	stw	fp,36(sp)
 800789c:	ddc00815 	stw	r23,32(sp)
 80078a0:	dd800715 	stw	r22,28(sp)
 80078a4:	dd400615 	stw	r21,24(sp)
 80078a8:	dd000515 	stw	r20,20(sp)
 80078ac:	dcc00415 	stw	r19,16(sp)
 80078b0:	dc400215 	stw	r17,8(sp)
 80078b4:	dc000115 	stw	r16,4(sp)
 80078b8:	288002c4 	addi	r2,r5,11
 80078bc:	00c00584 	movi	r3,22
 80078c0:	2025883a 	mov	r18,r4
 80078c4:	18807f2e 	bgeu	r3,r2,8007ac4 <_malloc_r+0x238>
 80078c8:	047ffe04 	movi	r17,-8
 80078cc:	1462703a 	and	r17,r2,r17
 80078d0:	8800a316 	blt	r17,zero,8007b60 <_malloc_r+0x2d4>
 80078d4:	8940a236 	bltu	r17,r5,8007b60 <_malloc_r+0x2d4>
 80078d8:	8009ecc0 	call	8009ecc <__malloc_lock>
 80078dc:	00807dc4 	movi	r2,503
 80078e0:	1441e92e 	bgeu	r2,r17,8008088 <_malloc_r+0x7fc>
 80078e4:	8804d27a 	srli	r2,r17,9
 80078e8:	1000a126 	beq	r2,zero,8007b70 <_malloc_r+0x2e4>
 80078ec:	00c00104 	movi	r3,4
 80078f0:	18811e36 	bltu	r3,r2,8007d6c <_malloc_r+0x4e0>
 80078f4:	8804d1ba 	srli	r2,r17,6
 80078f8:	12000e44 	addi	r8,r2,57
 80078fc:	11c00e04 	addi	r7,r2,56
 8007900:	4209883a 	add	r4,r8,r8
 8007904:	04c20074 	movhi	r19,2049
 8007908:	2109883a 	add	r4,r4,r4
 800790c:	9cf73804 	addi	r19,r19,-8992
 8007910:	2109883a 	add	r4,r4,r4
 8007914:	9909883a 	add	r4,r19,r4
 8007918:	24000117 	ldw	r16,4(r4)
 800791c:	213ffe04 	addi	r4,r4,-8
 8007920:	24009726 	beq	r4,r16,8007b80 <_malloc_r+0x2f4>
 8007924:	80800117 	ldw	r2,4(r16)
 8007928:	01bfff04 	movi	r6,-4
 800792c:	014003c4 	movi	r5,15
 8007930:	1184703a 	and	r2,r2,r6
 8007934:	1447c83a 	sub	r3,r2,r17
 8007938:	28c00716 	blt	r5,r3,8007958 <_malloc_r+0xcc>
 800793c:	1800920e 	bge	r3,zero,8007b88 <_malloc_r+0x2fc>
 8007940:	84000317 	ldw	r16,12(r16)
 8007944:	24008e26 	beq	r4,r16,8007b80 <_malloc_r+0x2f4>
 8007948:	80800117 	ldw	r2,4(r16)
 800794c:	1184703a 	and	r2,r2,r6
 8007950:	1447c83a 	sub	r3,r2,r17
 8007954:	28fff90e 	bge	r5,r3,800793c <__alt_data_end+0xfc00793c>
 8007958:	3809883a 	mov	r4,r7
 800795c:	01820074 	movhi	r6,2049
 8007960:	9c000417 	ldw	r16,16(r19)
 8007964:	31b73804 	addi	r6,r6,-8992
 8007968:	32000204 	addi	r8,r6,8
 800796c:	82013426 	beq	r16,r8,8007e40 <_malloc_r+0x5b4>
 8007970:	80c00117 	ldw	r3,4(r16)
 8007974:	00bfff04 	movi	r2,-4
 8007978:	188e703a 	and	r7,r3,r2
 800797c:	3c45c83a 	sub	r2,r7,r17
 8007980:	00c003c4 	movi	r3,15
 8007984:	18811f16 	blt	r3,r2,8007e04 <_malloc_r+0x578>
 8007988:	32000515 	stw	r8,20(r6)
 800798c:	32000415 	stw	r8,16(r6)
 8007990:	10007f0e 	bge	r2,zero,8007b90 <_malloc_r+0x304>
 8007994:	00807fc4 	movi	r2,511
 8007998:	11c0fd36 	bltu	r2,r7,8007d90 <_malloc_r+0x504>
 800799c:	3806d0fa 	srli	r3,r7,3
 80079a0:	01c00044 	movi	r7,1
 80079a4:	30800117 	ldw	r2,4(r6)
 80079a8:	19400044 	addi	r5,r3,1
 80079ac:	294b883a 	add	r5,r5,r5
 80079b0:	1807d0ba 	srai	r3,r3,2
 80079b4:	294b883a 	add	r5,r5,r5
 80079b8:	294b883a 	add	r5,r5,r5
 80079bc:	298b883a 	add	r5,r5,r6
 80079c0:	38c6983a 	sll	r3,r7,r3
 80079c4:	29c00017 	ldw	r7,0(r5)
 80079c8:	2a7ffe04 	addi	r9,r5,-8
 80079cc:	1886b03a 	or	r3,r3,r2
 80079d0:	82400315 	stw	r9,12(r16)
 80079d4:	81c00215 	stw	r7,8(r16)
 80079d8:	30c00115 	stw	r3,4(r6)
 80079dc:	2c000015 	stw	r16,0(r5)
 80079e0:	3c000315 	stw	r16,12(r7)
 80079e4:	2005d0ba 	srai	r2,r4,2
 80079e8:	01400044 	movi	r5,1
 80079ec:	288a983a 	sll	r5,r5,r2
 80079f0:	19406f36 	bltu	r3,r5,8007bb0 <_malloc_r+0x324>
 80079f4:	28c4703a 	and	r2,r5,r3
 80079f8:	10000a1e 	bne	r2,zero,8007a24 <_malloc_r+0x198>
 80079fc:	00bfff04 	movi	r2,-4
 8007a00:	294b883a 	add	r5,r5,r5
 8007a04:	2088703a 	and	r4,r4,r2
 8007a08:	28c4703a 	and	r2,r5,r3
 8007a0c:	21000104 	addi	r4,r4,4
 8007a10:	1000041e 	bne	r2,zero,8007a24 <_malloc_r+0x198>
 8007a14:	294b883a 	add	r5,r5,r5
 8007a18:	28c4703a 	and	r2,r5,r3
 8007a1c:	21000104 	addi	r4,r4,4
 8007a20:	103ffc26 	beq	r2,zero,8007a14 <__alt_data_end+0xfc007a14>
 8007a24:	02bfff04 	movi	r10,-4
 8007a28:	024003c4 	movi	r9,15
 8007a2c:	21800044 	addi	r6,r4,1
 8007a30:	318d883a 	add	r6,r6,r6
 8007a34:	318d883a 	add	r6,r6,r6
 8007a38:	318d883a 	add	r6,r6,r6
 8007a3c:	998d883a 	add	r6,r19,r6
 8007a40:	333ffe04 	addi	r12,r6,-8
 8007a44:	2017883a 	mov	r11,r4
 8007a48:	31800104 	addi	r6,r6,4
 8007a4c:	34000017 	ldw	r16,0(r6)
 8007a50:	31fffd04 	addi	r7,r6,-12
 8007a54:	81c0041e 	bne	r16,r7,8007a68 <_malloc_r+0x1dc>
 8007a58:	0000fb06 	br	8007e48 <_malloc_r+0x5bc>
 8007a5c:	1801030e 	bge	r3,zero,8007e6c <_malloc_r+0x5e0>
 8007a60:	84000317 	ldw	r16,12(r16)
 8007a64:	81c0f826 	beq	r16,r7,8007e48 <_malloc_r+0x5bc>
 8007a68:	80800117 	ldw	r2,4(r16)
 8007a6c:	1284703a 	and	r2,r2,r10
 8007a70:	1447c83a 	sub	r3,r2,r17
 8007a74:	48fff90e 	bge	r9,r3,8007a5c <__alt_data_end+0xfc007a5c>
 8007a78:	80800317 	ldw	r2,12(r16)
 8007a7c:	81000217 	ldw	r4,8(r16)
 8007a80:	89400054 	ori	r5,r17,1
 8007a84:	81400115 	stw	r5,4(r16)
 8007a88:	20800315 	stw	r2,12(r4)
 8007a8c:	11000215 	stw	r4,8(r2)
 8007a90:	8463883a 	add	r17,r16,r17
 8007a94:	9c400515 	stw	r17,20(r19)
 8007a98:	9c400415 	stw	r17,16(r19)
 8007a9c:	18800054 	ori	r2,r3,1
 8007aa0:	88800115 	stw	r2,4(r17)
 8007aa4:	8a000315 	stw	r8,12(r17)
 8007aa8:	8a000215 	stw	r8,8(r17)
 8007aac:	88e3883a 	add	r17,r17,r3
 8007ab0:	88c00015 	stw	r3,0(r17)
 8007ab4:	9009883a 	mov	r4,r18
 8007ab8:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8007abc:	80800204 	addi	r2,r16,8
 8007ac0:	00001b06 	br	8007b30 <_malloc_r+0x2a4>
 8007ac4:	04400404 	movi	r17,16
 8007ac8:	89402536 	bltu	r17,r5,8007b60 <_malloc_r+0x2d4>
 8007acc:	8009ecc0 	call	8009ecc <__malloc_lock>
 8007ad0:	00800184 	movi	r2,6
 8007ad4:	01000084 	movi	r4,2
 8007ad8:	04c20074 	movhi	r19,2049
 8007adc:	1085883a 	add	r2,r2,r2
 8007ae0:	9cf73804 	addi	r19,r19,-8992
 8007ae4:	1085883a 	add	r2,r2,r2
 8007ae8:	9885883a 	add	r2,r19,r2
 8007aec:	14000117 	ldw	r16,4(r2)
 8007af0:	10fffe04 	addi	r3,r2,-8
 8007af4:	80c0d926 	beq	r16,r3,8007e5c <_malloc_r+0x5d0>
 8007af8:	80c00117 	ldw	r3,4(r16)
 8007afc:	81000317 	ldw	r4,12(r16)
 8007b00:	00bfff04 	movi	r2,-4
 8007b04:	1884703a 	and	r2,r3,r2
 8007b08:	81400217 	ldw	r5,8(r16)
 8007b0c:	8085883a 	add	r2,r16,r2
 8007b10:	10c00117 	ldw	r3,4(r2)
 8007b14:	29000315 	stw	r4,12(r5)
 8007b18:	21400215 	stw	r5,8(r4)
 8007b1c:	18c00054 	ori	r3,r3,1
 8007b20:	10c00115 	stw	r3,4(r2)
 8007b24:	9009883a 	mov	r4,r18
 8007b28:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8007b2c:	80800204 	addi	r2,r16,8
 8007b30:	dfc00a17 	ldw	ra,40(sp)
 8007b34:	df000917 	ldw	fp,36(sp)
 8007b38:	ddc00817 	ldw	r23,32(sp)
 8007b3c:	dd800717 	ldw	r22,28(sp)
 8007b40:	dd400617 	ldw	r21,24(sp)
 8007b44:	dd000517 	ldw	r20,20(sp)
 8007b48:	dcc00417 	ldw	r19,16(sp)
 8007b4c:	dc800317 	ldw	r18,12(sp)
 8007b50:	dc400217 	ldw	r17,8(sp)
 8007b54:	dc000117 	ldw	r16,4(sp)
 8007b58:	dec00b04 	addi	sp,sp,44
 8007b5c:	f800283a 	ret
 8007b60:	00800304 	movi	r2,12
 8007b64:	90800015 	stw	r2,0(r18)
 8007b68:	0005883a 	mov	r2,zero
 8007b6c:	003ff006 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007b70:	01002004 	movi	r4,128
 8007b74:	02001004 	movi	r8,64
 8007b78:	01c00fc4 	movi	r7,63
 8007b7c:	003f6106 	br	8007904 <__alt_data_end+0xfc007904>
 8007b80:	4009883a 	mov	r4,r8
 8007b84:	003f7506 	br	800795c <__alt_data_end+0xfc00795c>
 8007b88:	81000317 	ldw	r4,12(r16)
 8007b8c:	003fde06 	br	8007b08 <__alt_data_end+0xfc007b08>
 8007b90:	81c5883a 	add	r2,r16,r7
 8007b94:	11400117 	ldw	r5,4(r2)
 8007b98:	9009883a 	mov	r4,r18
 8007b9c:	29400054 	ori	r5,r5,1
 8007ba0:	11400115 	stw	r5,4(r2)
 8007ba4:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8007ba8:	80800204 	addi	r2,r16,8
 8007bac:	003fe006 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007bb0:	9c000217 	ldw	r16,8(r19)
 8007bb4:	00bfff04 	movi	r2,-4
 8007bb8:	85800117 	ldw	r22,4(r16)
 8007bbc:	b0ac703a 	and	r22,r22,r2
 8007bc0:	b4400336 	bltu	r22,r17,8007bd0 <_malloc_r+0x344>
 8007bc4:	b445c83a 	sub	r2,r22,r17
 8007bc8:	00c003c4 	movi	r3,15
 8007bcc:	18805d16 	blt	r3,r2,8007d44 <_malloc_r+0x4b8>
 8007bd0:	05c20074 	movhi	r23,2049
 8007bd4:	00820074 	movhi	r2,2049
 8007bd8:	1083cd04 	addi	r2,r2,3892
 8007bdc:	bdfced04 	addi	r23,r23,-3148
 8007be0:	15400017 	ldw	r21,0(r2)
 8007be4:	b8c00017 	ldw	r3,0(r23)
 8007be8:	00bfffc4 	movi	r2,-1
 8007bec:	858d883a 	add	r6,r16,r22
 8007bf0:	8d6b883a 	add	r21,r17,r21
 8007bf4:	1880ea26 	beq	r3,r2,8007fa0 <_malloc_r+0x714>
 8007bf8:	ad4403c4 	addi	r21,r21,4111
 8007bfc:	00bc0004 	movi	r2,-4096
 8007c00:	a8aa703a 	and	r21,r21,r2
 8007c04:	a80b883a 	mov	r5,r21
 8007c08:	9009883a 	mov	r4,r18
 8007c0c:	d9800015 	stw	r6,0(sp)
 8007c10:	8008aac0 	call	8008aac <_sbrk_r>
 8007c14:	1029883a 	mov	r20,r2
 8007c18:	00bfffc4 	movi	r2,-1
 8007c1c:	d9800017 	ldw	r6,0(sp)
 8007c20:	a080e826 	beq	r20,r2,8007fc4 <_malloc_r+0x738>
 8007c24:	a180a636 	bltu	r20,r6,8007ec0 <_malloc_r+0x634>
 8007c28:	07020074 	movhi	fp,2049
 8007c2c:	e703d604 	addi	fp,fp,3928
 8007c30:	e0800017 	ldw	r2,0(fp)
 8007c34:	a887883a 	add	r3,r21,r2
 8007c38:	e0c00015 	stw	r3,0(fp)
 8007c3c:	3500e626 	beq	r6,r20,8007fd8 <_malloc_r+0x74c>
 8007c40:	b9000017 	ldw	r4,0(r23)
 8007c44:	00bfffc4 	movi	r2,-1
 8007c48:	2080ee26 	beq	r4,r2,8008004 <_malloc_r+0x778>
 8007c4c:	a185c83a 	sub	r2,r20,r6
 8007c50:	10c5883a 	add	r2,r2,r3
 8007c54:	e0800015 	stw	r2,0(fp)
 8007c58:	a0c001cc 	andi	r3,r20,7
 8007c5c:	1800bc26 	beq	r3,zero,8007f50 <_malloc_r+0x6c4>
 8007c60:	a0e9c83a 	sub	r20,r20,r3
 8007c64:	00840204 	movi	r2,4104
 8007c68:	a5000204 	addi	r20,r20,8
 8007c6c:	10c7c83a 	sub	r3,r2,r3
 8007c70:	a545883a 	add	r2,r20,r21
 8007c74:	1083ffcc 	andi	r2,r2,4095
 8007c78:	18abc83a 	sub	r21,r3,r2
 8007c7c:	a80b883a 	mov	r5,r21
 8007c80:	9009883a 	mov	r4,r18
 8007c84:	8008aac0 	call	8008aac <_sbrk_r>
 8007c88:	00ffffc4 	movi	r3,-1
 8007c8c:	10c0e126 	beq	r2,r3,8008014 <_malloc_r+0x788>
 8007c90:	1505c83a 	sub	r2,r2,r20
 8007c94:	1545883a 	add	r2,r2,r21
 8007c98:	10800054 	ori	r2,r2,1
 8007c9c:	e0c00017 	ldw	r3,0(fp)
 8007ca0:	9d000215 	stw	r20,8(r19)
 8007ca4:	a0800115 	stw	r2,4(r20)
 8007ca8:	a8c7883a 	add	r3,r21,r3
 8007cac:	e0c00015 	stw	r3,0(fp)
 8007cb0:	84c00e26 	beq	r16,r19,8007cec <_malloc_r+0x460>
 8007cb4:	018003c4 	movi	r6,15
 8007cb8:	3580a72e 	bgeu	r6,r22,8007f58 <_malloc_r+0x6cc>
 8007cbc:	81400117 	ldw	r5,4(r16)
 8007cc0:	013ffe04 	movi	r4,-8
 8007cc4:	b0bffd04 	addi	r2,r22,-12
 8007cc8:	1104703a 	and	r2,r2,r4
 8007ccc:	2900004c 	andi	r4,r5,1
 8007cd0:	2088b03a 	or	r4,r4,r2
 8007cd4:	81000115 	stw	r4,4(r16)
 8007cd8:	01400144 	movi	r5,5
 8007cdc:	8089883a 	add	r4,r16,r2
 8007ce0:	21400115 	stw	r5,4(r4)
 8007ce4:	21400215 	stw	r5,8(r4)
 8007ce8:	3080cd36 	bltu	r6,r2,8008020 <_malloc_r+0x794>
 8007cec:	00820074 	movhi	r2,2049
 8007cf0:	1083cc04 	addi	r2,r2,3888
 8007cf4:	11000017 	ldw	r4,0(r2)
 8007cf8:	20c0012e 	bgeu	r4,r3,8007d00 <_malloc_r+0x474>
 8007cfc:	10c00015 	stw	r3,0(r2)
 8007d00:	00820074 	movhi	r2,2049
 8007d04:	1083cb04 	addi	r2,r2,3884
 8007d08:	11000017 	ldw	r4,0(r2)
 8007d0c:	9c000217 	ldw	r16,8(r19)
 8007d10:	20c0012e 	bgeu	r4,r3,8007d18 <_malloc_r+0x48c>
 8007d14:	10c00015 	stw	r3,0(r2)
 8007d18:	80c00117 	ldw	r3,4(r16)
 8007d1c:	00bfff04 	movi	r2,-4
 8007d20:	1886703a 	and	r3,r3,r2
 8007d24:	1c45c83a 	sub	r2,r3,r17
 8007d28:	1c400236 	bltu	r3,r17,8007d34 <_malloc_r+0x4a8>
 8007d2c:	00c003c4 	movi	r3,15
 8007d30:	18800416 	blt	r3,r2,8007d44 <_malloc_r+0x4b8>
 8007d34:	9009883a 	mov	r4,r18
 8007d38:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8007d3c:	0005883a 	mov	r2,zero
 8007d40:	003f7b06 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007d44:	88c00054 	ori	r3,r17,1
 8007d48:	80c00115 	stw	r3,4(r16)
 8007d4c:	8463883a 	add	r17,r16,r17
 8007d50:	10800054 	ori	r2,r2,1
 8007d54:	9c400215 	stw	r17,8(r19)
 8007d58:	88800115 	stw	r2,4(r17)
 8007d5c:	9009883a 	mov	r4,r18
 8007d60:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8007d64:	80800204 	addi	r2,r16,8
 8007d68:	003f7106 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007d6c:	00c00504 	movi	r3,20
 8007d70:	18804a2e 	bgeu	r3,r2,8007e9c <_malloc_r+0x610>
 8007d74:	00c01504 	movi	r3,84
 8007d78:	18806e36 	bltu	r3,r2,8007f34 <_malloc_r+0x6a8>
 8007d7c:	8804d33a 	srli	r2,r17,12
 8007d80:	12001bc4 	addi	r8,r2,111
 8007d84:	11c01b84 	addi	r7,r2,110
 8007d88:	4209883a 	add	r4,r8,r8
 8007d8c:	003edd06 	br	8007904 <__alt_data_end+0xfc007904>
 8007d90:	3804d27a 	srli	r2,r7,9
 8007d94:	00c00104 	movi	r3,4
 8007d98:	1880442e 	bgeu	r3,r2,8007eac <_malloc_r+0x620>
 8007d9c:	00c00504 	movi	r3,20
 8007da0:	18808136 	bltu	r3,r2,8007fa8 <_malloc_r+0x71c>
 8007da4:	11401704 	addi	r5,r2,92
 8007da8:	10c016c4 	addi	r3,r2,91
 8007dac:	294b883a 	add	r5,r5,r5
 8007db0:	294b883a 	add	r5,r5,r5
 8007db4:	294b883a 	add	r5,r5,r5
 8007db8:	994b883a 	add	r5,r19,r5
 8007dbc:	28800017 	ldw	r2,0(r5)
 8007dc0:	01820074 	movhi	r6,2049
 8007dc4:	297ffe04 	addi	r5,r5,-8
 8007dc8:	31b73804 	addi	r6,r6,-8992
 8007dcc:	28806526 	beq	r5,r2,8007f64 <_malloc_r+0x6d8>
 8007dd0:	01bfff04 	movi	r6,-4
 8007dd4:	10c00117 	ldw	r3,4(r2)
 8007dd8:	1986703a 	and	r3,r3,r6
 8007ddc:	38c0022e 	bgeu	r7,r3,8007de8 <_malloc_r+0x55c>
 8007de0:	10800217 	ldw	r2,8(r2)
 8007de4:	28bffb1e 	bne	r5,r2,8007dd4 <__alt_data_end+0xfc007dd4>
 8007de8:	11400317 	ldw	r5,12(r2)
 8007dec:	98c00117 	ldw	r3,4(r19)
 8007df0:	81400315 	stw	r5,12(r16)
 8007df4:	80800215 	stw	r2,8(r16)
 8007df8:	2c000215 	stw	r16,8(r5)
 8007dfc:	14000315 	stw	r16,12(r2)
 8007e00:	003ef806 	br	80079e4 <__alt_data_end+0xfc0079e4>
 8007e04:	88c00054 	ori	r3,r17,1
 8007e08:	80c00115 	stw	r3,4(r16)
 8007e0c:	8463883a 	add	r17,r16,r17
 8007e10:	34400515 	stw	r17,20(r6)
 8007e14:	34400415 	stw	r17,16(r6)
 8007e18:	10c00054 	ori	r3,r2,1
 8007e1c:	8a000315 	stw	r8,12(r17)
 8007e20:	8a000215 	stw	r8,8(r17)
 8007e24:	88c00115 	stw	r3,4(r17)
 8007e28:	88a3883a 	add	r17,r17,r2
 8007e2c:	88800015 	stw	r2,0(r17)
 8007e30:	9009883a 	mov	r4,r18
 8007e34:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8007e38:	80800204 	addi	r2,r16,8
 8007e3c:	003f3c06 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007e40:	30c00117 	ldw	r3,4(r6)
 8007e44:	003ee706 	br	80079e4 <__alt_data_end+0xfc0079e4>
 8007e48:	5ac00044 	addi	r11,r11,1
 8007e4c:	588000cc 	andi	r2,r11,3
 8007e50:	31800204 	addi	r6,r6,8
 8007e54:	103efd1e 	bne	r2,zero,8007a4c <__alt_data_end+0xfc007a4c>
 8007e58:	00002406 	br	8007eec <_malloc_r+0x660>
 8007e5c:	14000317 	ldw	r16,12(r2)
 8007e60:	143f251e 	bne	r2,r16,8007af8 <__alt_data_end+0xfc007af8>
 8007e64:	21000084 	addi	r4,r4,2
 8007e68:	003ebc06 	br	800795c <__alt_data_end+0xfc00795c>
 8007e6c:	8085883a 	add	r2,r16,r2
 8007e70:	10c00117 	ldw	r3,4(r2)
 8007e74:	81000317 	ldw	r4,12(r16)
 8007e78:	81400217 	ldw	r5,8(r16)
 8007e7c:	18c00054 	ori	r3,r3,1
 8007e80:	10c00115 	stw	r3,4(r2)
 8007e84:	29000315 	stw	r4,12(r5)
 8007e88:	21400215 	stw	r5,8(r4)
 8007e8c:	9009883a 	mov	r4,r18
 8007e90:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8007e94:	80800204 	addi	r2,r16,8
 8007e98:	003f2506 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007e9c:	12001704 	addi	r8,r2,92
 8007ea0:	11c016c4 	addi	r7,r2,91
 8007ea4:	4209883a 	add	r4,r8,r8
 8007ea8:	003e9606 	br	8007904 <__alt_data_end+0xfc007904>
 8007eac:	3804d1ba 	srli	r2,r7,6
 8007eb0:	11400e44 	addi	r5,r2,57
 8007eb4:	10c00e04 	addi	r3,r2,56
 8007eb8:	294b883a 	add	r5,r5,r5
 8007ebc:	003fbc06 	br	8007db0 <__alt_data_end+0xfc007db0>
 8007ec0:	84ff5926 	beq	r16,r19,8007c28 <__alt_data_end+0xfc007c28>
 8007ec4:	00820074 	movhi	r2,2049
 8007ec8:	10b73804 	addi	r2,r2,-8992
 8007ecc:	14000217 	ldw	r16,8(r2)
 8007ed0:	00bfff04 	movi	r2,-4
 8007ed4:	80c00117 	ldw	r3,4(r16)
 8007ed8:	1886703a 	and	r3,r3,r2
 8007edc:	003f9106 	br	8007d24 <__alt_data_end+0xfc007d24>
 8007ee0:	60800217 	ldw	r2,8(r12)
 8007ee4:	213fffc4 	addi	r4,r4,-1
 8007ee8:	1300651e 	bne	r2,r12,8008080 <_malloc_r+0x7f4>
 8007eec:	208000cc 	andi	r2,r4,3
 8007ef0:	633ffe04 	addi	r12,r12,-8
 8007ef4:	103ffa1e 	bne	r2,zero,8007ee0 <__alt_data_end+0xfc007ee0>
 8007ef8:	98800117 	ldw	r2,4(r19)
 8007efc:	0146303a 	nor	r3,zero,r5
 8007f00:	1884703a 	and	r2,r3,r2
 8007f04:	98800115 	stw	r2,4(r19)
 8007f08:	294b883a 	add	r5,r5,r5
 8007f0c:	117f2836 	bltu	r2,r5,8007bb0 <__alt_data_end+0xfc007bb0>
 8007f10:	283f2726 	beq	r5,zero,8007bb0 <__alt_data_end+0xfc007bb0>
 8007f14:	2886703a 	and	r3,r5,r2
 8007f18:	5809883a 	mov	r4,r11
 8007f1c:	183ec31e 	bne	r3,zero,8007a2c <__alt_data_end+0xfc007a2c>
 8007f20:	294b883a 	add	r5,r5,r5
 8007f24:	2886703a 	and	r3,r5,r2
 8007f28:	21000104 	addi	r4,r4,4
 8007f2c:	183ffc26 	beq	r3,zero,8007f20 <__alt_data_end+0xfc007f20>
 8007f30:	003ebe06 	br	8007a2c <__alt_data_end+0xfc007a2c>
 8007f34:	00c05504 	movi	r3,340
 8007f38:	18801236 	bltu	r3,r2,8007f84 <_malloc_r+0x6f8>
 8007f3c:	8804d3fa 	srli	r2,r17,15
 8007f40:	12001e04 	addi	r8,r2,120
 8007f44:	11c01dc4 	addi	r7,r2,119
 8007f48:	4209883a 	add	r4,r8,r8
 8007f4c:	003e6d06 	br	8007904 <__alt_data_end+0xfc007904>
 8007f50:	00c40004 	movi	r3,4096
 8007f54:	003f4606 	br	8007c70 <__alt_data_end+0xfc007c70>
 8007f58:	00800044 	movi	r2,1
 8007f5c:	a0800115 	stw	r2,4(r20)
 8007f60:	003f7406 	br	8007d34 <__alt_data_end+0xfc007d34>
 8007f64:	1805d0ba 	srai	r2,r3,2
 8007f68:	01c00044 	movi	r7,1
 8007f6c:	30c00117 	ldw	r3,4(r6)
 8007f70:	388e983a 	sll	r7,r7,r2
 8007f74:	2805883a 	mov	r2,r5
 8007f78:	38c6b03a 	or	r3,r7,r3
 8007f7c:	30c00115 	stw	r3,4(r6)
 8007f80:	003f9b06 	br	8007df0 <__alt_data_end+0xfc007df0>
 8007f84:	00c15504 	movi	r3,1364
 8007f88:	18801a36 	bltu	r3,r2,8007ff4 <_malloc_r+0x768>
 8007f8c:	8804d4ba 	srli	r2,r17,18
 8007f90:	12001f44 	addi	r8,r2,125
 8007f94:	11c01f04 	addi	r7,r2,124
 8007f98:	4209883a 	add	r4,r8,r8
 8007f9c:	003e5906 	br	8007904 <__alt_data_end+0xfc007904>
 8007fa0:	ad400404 	addi	r21,r21,16
 8007fa4:	003f1706 	br	8007c04 <__alt_data_end+0xfc007c04>
 8007fa8:	00c01504 	movi	r3,84
 8007fac:	18802336 	bltu	r3,r2,800803c <_malloc_r+0x7b0>
 8007fb0:	3804d33a 	srli	r2,r7,12
 8007fb4:	11401bc4 	addi	r5,r2,111
 8007fb8:	10c01b84 	addi	r3,r2,110
 8007fbc:	294b883a 	add	r5,r5,r5
 8007fc0:	003f7b06 	br	8007db0 <__alt_data_end+0xfc007db0>
 8007fc4:	9c000217 	ldw	r16,8(r19)
 8007fc8:	00bfff04 	movi	r2,-4
 8007fcc:	80c00117 	ldw	r3,4(r16)
 8007fd0:	1886703a 	and	r3,r3,r2
 8007fd4:	003f5306 	br	8007d24 <__alt_data_end+0xfc007d24>
 8007fd8:	3083ffcc 	andi	r2,r6,4095
 8007fdc:	103f181e 	bne	r2,zero,8007c40 <__alt_data_end+0xfc007c40>
 8007fe0:	99000217 	ldw	r4,8(r19)
 8007fe4:	b545883a 	add	r2,r22,r21
 8007fe8:	10800054 	ori	r2,r2,1
 8007fec:	20800115 	stw	r2,4(r4)
 8007ff0:	003f3e06 	br	8007cec <__alt_data_end+0xfc007cec>
 8007ff4:	01003f84 	movi	r4,254
 8007ff8:	02001fc4 	movi	r8,127
 8007ffc:	01c01f84 	movi	r7,126
 8008000:	003e4006 	br	8007904 <__alt_data_end+0xfc007904>
 8008004:	00820074 	movhi	r2,2049
 8008008:	10bced04 	addi	r2,r2,-3148
 800800c:	15000015 	stw	r20,0(r2)
 8008010:	003f1106 	br	8007c58 <__alt_data_end+0xfc007c58>
 8008014:	00800044 	movi	r2,1
 8008018:	002b883a 	mov	r21,zero
 800801c:	003f1f06 	br	8007c9c <__alt_data_end+0xfc007c9c>
 8008020:	81400204 	addi	r5,r16,8
 8008024:	9009883a 	mov	r4,r18
 8008028:	80093140 	call	8009314 <_free_r>
 800802c:	00820074 	movhi	r2,2049
 8008030:	1083d604 	addi	r2,r2,3928
 8008034:	10c00017 	ldw	r3,0(r2)
 8008038:	003f2c06 	br	8007cec <__alt_data_end+0xfc007cec>
 800803c:	00c05504 	movi	r3,340
 8008040:	18800536 	bltu	r3,r2,8008058 <_malloc_r+0x7cc>
 8008044:	3804d3fa 	srli	r2,r7,15
 8008048:	11401e04 	addi	r5,r2,120
 800804c:	10c01dc4 	addi	r3,r2,119
 8008050:	294b883a 	add	r5,r5,r5
 8008054:	003f5606 	br	8007db0 <__alt_data_end+0xfc007db0>
 8008058:	00c15504 	movi	r3,1364
 800805c:	18800536 	bltu	r3,r2,8008074 <_malloc_r+0x7e8>
 8008060:	3804d4ba 	srli	r2,r7,18
 8008064:	11401f44 	addi	r5,r2,125
 8008068:	10c01f04 	addi	r3,r2,124
 800806c:	294b883a 	add	r5,r5,r5
 8008070:	003f4f06 	br	8007db0 <__alt_data_end+0xfc007db0>
 8008074:	01403f84 	movi	r5,254
 8008078:	00c01f84 	movi	r3,126
 800807c:	003f4c06 	br	8007db0 <__alt_data_end+0xfc007db0>
 8008080:	98800117 	ldw	r2,4(r19)
 8008084:	003fa006 	br	8007f08 <__alt_data_end+0xfc007f08>
 8008088:	8808d0fa 	srli	r4,r17,3
 800808c:	20800044 	addi	r2,r4,1
 8008090:	1085883a 	add	r2,r2,r2
 8008094:	003e9006 	br	8007ad8 <__alt_data_end+0xfc007ad8>

08008098 <memchr>:
 8008098:	208000cc 	andi	r2,r4,3
 800809c:	280f883a 	mov	r7,r5
 80080a0:	10003426 	beq	r2,zero,8008174 <memchr+0xdc>
 80080a4:	30bfffc4 	addi	r2,r6,-1
 80080a8:	30001a26 	beq	r6,zero,8008114 <memchr+0x7c>
 80080ac:	20c00003 	ldbu	r3,0(r4)
 80080b0:	29803fcc 	andi	r6,r5,255
 80080b4:	30c0051e 	bne	r6,r3,80080cc <memchr+0x34>
 80080b8:	00001806 	br	800811c <memchr+0x84>
 80080bc:	10001526 	beq	r2,zero,8008114 <memchr+0x7c>
 80080c0:	20c00003 	ldbu	r3,0(r4)
 80080c4:	10bfffc4 	addi	r2,r2,-1
 80080c8:	30c01426 	beq	r6,r3,800811c <memchr+0x84>
 80080cc:	21000044 	addi	r4,r4,1
 80080d0:	20c000cc 	andi	r3,r4,3
 80080d4:	183ff91e 	bne	r3,zero,80080bc <__alt_data_end+0xfc0080bc>
 80080d8:	020000c4 	movi	r8,3
 80080dc:	40801136 	bltu	r8,r2,8008124 <memchr+0x8c>
 80080e0:	10000c26 	beq	r2,zero,8008114 <memchr+0x7c>
 80080e4:	20c00003 	ldbu	r3,0(r4)
 80080e8:	29403fcc 	andi	r5,r5,255
 80080ec:	28c00b26 	beq	r5,r3,800811c <memchr+0x84>
 80080f0:	20c00044 	addi	r3,r4,1
 80080f4:	39803fcc 	andi	r6,r7,255
 80080f8:	2089883a 	add	r4,r4,r2
 80080fc:	00000306 	br	800810c <memchr+0x74>
 8008100:	18c00044 	addi	r3,r3,1
 8008104:	197fffc3 	ldbu	r5,-1(r3)
 8008108:	31400526 	beq	r6,r5,8008120 <memchr+0x88>
 800810c:	1805883a 	mov	r2,r3
 8008110:	20fffb1e 	bne	r4,r3,8008100 <__alt_data_end+0xfc008100>
 8008114:	0005883a 	mov	r2,zero
 8008118:	f800283a 	ret
 800811c:	2005883a 	mov	r2,r4
 8008120:	f800283a 	ret
 8008124:	28c03fcc 	andi	r3,r5,255
 8008128:	1812923a 	slli	r9,r3,8
 800812c:	02ffbff4 	movhi	r11,65279
 8008130:	02a02074 	movhi	r10,32897
 8008134:	48d2b03a 	or	r9,r9,r3
 8008138:	4806943a 	slli	r3,r9,16
 800813c:	5affbfc4 	addi	r11,r11,-257
 8008140:	52a02004 	addi	r10,r10,-32640
 8008144:	48d2b03a 	or	r9,r9,r3
 8008148:	20c00017 	ldw	r3,0(r4)
 800814c:	48c6f03a 	xor	r3,r9,r3
 8008150:	1acd883a 	add	r6,r3,r11
 8008154:	00c6303a 	nor	r3,zero,r3
 8008158:	30c6703a 	and	r3,r6,r3
 800815c:	1a86703a 	and	r3,r3,r10
 8008160:	183fe01e 	bne	r3,zero,80080e4 <__alt_data_end+0xfc0080e4>
 8008164:	10bfff04 	addi	r2,r2,-4
 8008168:	21000104 	addi	r4,r4,4
 800816c:	40bff636 	bltu	r8,r2,8008148 <__alt_data_end+0xfc008148>
 8008170:	003fdb06 	br	80080e0 <__alt_data_end+0xfc0080e0>
 8008174:	3005883a 	mov	r2,r6
 8008178:	003fd706 	br	80080d8 <__alt_data_end+0xfc0080d8>

0800817c <memcpy>:
 800817c:	defffd04 	addi	sp,sp,-12
 8008180:	dfc00215 	stw	ra,8(sp)
 8008184:	dc400115 	stw	r17,4(sp)
 8008188:	dc000015 	stw	r16,0(sp)
 800818c:	00c003c4 	movi	r3,15
 8008190:	2005883a 	mov	r2,r4
 8008194:	1980452e 	bgeu	r3,r6,80082ac <memcpy+0x130>
 8008198:	2906b03a 	or	r3,r5,r4
 800819c:	18c000cc 	andi	r3,r3,3
 80081a0:	1800441e 	bne	r3,zero,80082b4 <memcpy+0x138>
 80081a4:	347ffc04 	addi	r17,r6,-16
 80081a8:	8822d13a 	srli	r17,r17,4
 80081ac:	28c00104 	addi	r3,r5,4
 80081b0:	23400104 	addi	r13,r4,4
 80081b4:	8820913a 	slli	r16,r17,4
 80081b8:	2b000204 	addi	r12,r5,8
 80081bc:	22c00204 	addi	r11,r4,8
 80081c0:	84000504 	addi	r16,r16,20
 80081c4:	2a800304 	addi	r10,r5,12
 80081c8:	22400304 	addi	r9,r4,12
 80081cc:	2c21883a 	add	r16,r5,r16
 80081d0:	2811883a 	mov	r8,r5
 80081d4:	200f883a 	mov	r7,r4
 80081d8:	41000017 	ldw	r4,0(r8)
 80081dc:	1fc00017 	ldw	ra,0(r3)
 80081e0:	63c00017 	ldw	r15,0(r12)
 80081e4:	39000015 	stw	r4,0(r7)
 80081e8:	53800017 	ldw	r14,0(r10)
 80081ec:	6fc00015 	stw	ra,0(r13)
 80081f0:	5bc00015 	stw	r15,0(r11)
 80081f4:	4b800015 	stw	r14,0(r9)
 80081f8:	18c00404 	addi	r3,r3,16
 80081fc:	39c00404 	addi	r7,r7,16
 8008200:	42000404 	addi	r8,r8,16
 8008204:	6b400404 	addi	r13,r13,16
 8008208:	63000404 	addi	r12,r12,16
 800820c:	5ac00404 	addi	r11,r11,16
 8008210:	52800404 	addi	r10,r10,16
 8008214:	4a400404 	addi	r9,r9,16
 8008218:	1c3fef1e 	bne	r3,r16,80081d8 <__alt_data_end+0xfc0081d8>
 800821c:	89c00044 	addi	r7,r17,1
 8008220:	380e913a 	slli	r7,r7,4
 8008224:	310003cc 	andi	r4,r6,15
 8008228:	02c000c4 	movi	r11,3
 800822c:	11c7883a 	add	r3,r2,r7
 8008230:	29cb883a 	add	r5,r5,r7
 8008234:	5900212e 	bgeu	r11,r4,80082bc <memcpy+0x140>
 8008238:	1813883a 	mov	r9,r3
 800823c:	2811883a 	mov	r8,r5
 8008240:	200f883a 	mov	r7,r4
 8008244:	42800017 	ldw	r10,0(r8)
 8008248:	4a400104 	addi	r9,r9,4
 800824c:	39ffff04 	addi	r7,r7,-4
 8008250:	4abfff15 	stw	r10,-4(r9)
 8008254:	42000104 	addi	r8,r8,4
 8008258:	59fffa36 	bltu	r11,r7,8008244 <__alt_data_end+0xfc008244>
 800825c:	213fff04 	addi	r4,r4,-4
 8008260:	2008d0ba 	srli	r4,r4,2
 8008264:	318000cc 	andi	r6,r6,3
 8008268:	21000044 	addi	r4,r4,1
 800826c:	2109883a 	add	r4,r4,r4
 8008270:	2109883a 	add	r4,r4,r4
 8008274:	1907883a 	add	r3,r3,r4
 8008278:	290b883a 	add	r5,r5,r4
 800827c:	30000626 	beq	r6,zero,8008298 <memcpy+0x11c>
 8008280:	198d883a 	add	r6,r3,r6
 8008284:	29c00003 	ldbu	r7,0(r5)
 8008288:	18c00044 	addi	r3,r3,1
 800828c:	29400044 	addi	r5,r5,1
 8008290:	19ffffc5 	stb	r7,-1(r3)
 8008294:	19bffb1e 	bne	r3,r6,8008284 <__alt_data_end+0xfc008284>
 8008298:	dfc00217 	ldw	ra,8(sp)
 800829c:	dc400117 	ldw	r17,4(sp)
 80082a0:	dc000017 	ldw	r16,0(sp)
 80082a4:	dec00304 	addi	sp,sp,12
 80082a8:	f800283a 	ret
 80082ac:	2007883a 	mov	r3,r4
 80082b0:	003ff206 	br	800827c <__alt_data_end+0xfc00827c>
 80082b4:	2007883a 	mov	r3,r4
 80082b8:	003ff106 	br	8008280 <__alt_data_end+0xfc008280>
 80082bc:	200d883a 	mov	r6,r4
 80082c0:	003fee06 	br	800827c <__alt_data_end+0xfc00827c>

080082c4 <memmove>:
 80082c4:	2005883a 	mov	r2,r4
 80082c8:	29000b2e 	bgeu	r5,r4,80082f8 <memmove+0x34>
 80082cc:	298f883a 	add	r7,r5,r6
 80082d0:	21c0092e 	bgeu	r4,r7,80082f8 <memmove+0x34>
 80082d4:	2187883a 	add	r3,r4,r6
 80082d8:	198bc83a 	sub	r5,r3,r6
 80082dc:	30004826 	beq	r6,zero,8008400 <memmove+0x13c>
 80082e0:	39ffffc4 	addi	r7,r7,-1
 80082e4:	39000003 	ldbu	r4,0(r7)
 80082e8:	18ffffc4 	addi	r3,r3,-1
 80082ec:	19000005 	stb	r4,0(r3)
 80082f0:	28fffb1e 	bne	r5,r3,80082e0 <__alt_data_end+0xfc0082e0>
 80082f4:	f800283a 	ret
 80082f8:	00c003c4 	movi	r3,15
 80082fc:	1980412e 	bgeu	r3,r6,8008404 <memmove+0x140>
 8008300:	2886b03a 	or	r3,r5,r2
 8008304:	18c000cc 	andi	r3,r3,3
 8008308:	1800401e 	bne	r3,zero,800840c <memmove+0x148>
 800830c:	33fffc04 	addi	r15,r6,-16
 8008310:	781ed13a 	srli	r15,r15,4
 8008314:	28c00104 	addi	r3,r5,4
 8008318:	13400104 	addi	r13,r2,4
 800831c:	781c913a 	slli	r14,r15,4
 8008320:	2b000204 	addi	r12,r5,8
 8008324:	12c00204 	addi	r11,r2,8
 8008328:	73800504 	addi	r14,r14,20
 800832c:	2a800304 	addi	r10,r5,12
 8008330:	12400304 	addi	r9,r2,12
 8008334:	2b9d883a 	add	r14,r5,r14
 8008338:	2811883a 	mov	r8,r5
 800833c:	100f883a 	mov	r7,r2
 8008340:	41000017 	ldw	r4,0(r8)
 8008344:	39c00404 	addi	r7,r7,16
 8008348:	18c00404 	addi	r3,r3,16
 800834c:	393ffc15 	stw	r4,-16(r7)
 8008350:	193ffc17 	ldw	r4,-16(r3)
 8008354:	6b400404 	addi	r13,r13,16
 8008358:	5ac00404 	addi	r11,r11,16
 800835c:	693ffc15 	stw	r4,-16(r13)
 8008360:	61000017 	ldw	r4,0(r12)
 8008364:	4a400404 	addi	r9,r9,16
 8008368:	42000404 	addi	r8,r8,16
 800836c:	593ffc15 	stw	r4,-16(r11)
 8008370:	51000017 	ldw	r4,0(r10)
 8008374:	63000404 	addi	r12,r12,16
 8008378:	52800404 	addi	r10,r10,16
 800837c:	493ffc15 	stw	r4,-16(r9)
 8008380:	1bbfef1e 	bne	r3,r14,8008340 <__alt_data_end+0xfc008340>
 8008384:	79000044 	addi	r4,r15,1
 8008388:	2008913a 	slli	r4,r4,4
 800838c:	328003cc 	andi	r10,r6,15
 8008390:	02c000c4 	movi	r11,3
 8008394:	1107883a 	add	r3,r2,r4
 8008398:	290b883a 	add	r5,r5,r4
 800839c:	5a801e2e 	bgeu	r11,r10,8008418 <memmove+0x154>
 80083a0:	1813883a 	mov	r9,r3
 80083a4:	2811883a 	mov	r8,r5
 80083a8:	500f883a 	mov	r7,r10
 80083ac:	41000017 	ldw	r4,0(r8)
 80083b0:	4a400104 	addi	r9,r9,4
 80083b4:	39ffff04 	addi	r7,r7,-4
 80083b8:	493fff15 	stw	r4,-4(r9)
 80083bc:	42000104 	addi	r8,r8,4
 80083c0:	59fffa36 	bltu	r11,r7,80083ac <__alt_data_end+0xfc0083ac>
 80083c4:	513fff04 	addi	r4,r10,-4
 80083c8:	2008d0ba 	srli	r4,r4,2
 80083cc:	318000cc 	andi	r6,r6,3
 80083d0:	21000044 	addi	r4,r4,1
 80083d4:	2109883a 	add	r4,r4,r4
 80083d8:	2109883a 	add	r4,r4,r4
 80083dc:	1907883a 	add	r3,r3,r4
 80083e0:	290b883a 	add	r5,r5,r4
 80083e4:	30000b26 	beq	r6,zero,8008414 <memmove+0x150>
 80083e8:	198d883a 	add	r6,r3,r6
 80083ec:	29c00003 	ldbu	r7,0(r5)
 80083f0:	18c00044 	addi	r3,r3,1
 80083f4:	29400044 	addi	r5,r5,1
 80083f8:	19ffffc5 	stb	r7,-1(r3)
 80083fc:	19bffb1e 	bne	r3,r6,80083ec <__alt_data_end+0xfc0083ec>
 8008400:	f800283a 	ret
 8008404:	1007883a 	mov	r3,r2
 8008408:	003ff606 	br	80083e4 <__alt_data_end+0xfc0083e4>
 800840c:	1007883a 	mov	r3,r2
 8008410:	003ff506 	br	80083e8 <__alt_data_end+0xfc0083e8>
 8008414:	f800283a 	ret
 8008418:	500d883a 	mov	r6,r10
 800841c:	003ff106 	br	80083e4 <__alt_data_end+0xfc0083e4>

08008420 <memset>:
 8008420:	20c000cc 	andi	r3,r4,3
 8008424:	2005883a 	mov	r2,r4
 8008428:	18004426 	beq	r3,zero,800853c <memset+0x11c>
 800842c:	31ffffc4 	addi	r7,r6,-1
 8008430:	30004026 	beq	r6,zero,8008534 <memset+0x114>
 8008434:	2813883a 	mov	r9,r5
 8008438:	200d883a 	mov	r6,r4
 800843c:	2007883a 	mov	r3,r4
 8008440:	00000406 	br	8008454 <memset+0x34>
 8008444:	3a3fffc4 	addi	r8,r7,-1
 8008448:	31800044 	addi	r6,r6,1
 800844c:	38003926 	beq	r7,zero,8008534 <memset+0x114>
 8008450:	400f883a 	mov	r7,r8
 8008454:	18c00044 	addi	r3,r3,1
 8008458:	32400005 	stb	r9,0(r6)
 800845c:	1a0000cc 	andi	r8,r3,3
 8008460:	403ff81e 	bne	r8,zero,8008444 <__alt_data_end+0xfc008444>
 8008464:	010000c4 	movi	r4,3
 8008468:	21c02d2e 	bgeu	r4,r7,8008520 <memset+0x100>
 800846c:	29003fcc 	andi	r4,r5,255
 8008470:	200c923a 	slli	r6,r4,8
 8008474:	3108b03a 	or	r4,r6,r4
 8008478:	200c943a 	slli	r6,r4,16
 800847c:	218cb03a 	or	r6,r4,r6
 8008480:	010003c4 	movi	r4,15
 8008484:	21c0182e 	bgeu	r4,r7,80084e8 <memset+0xc8>
 8008488:	3b3ffc04 	addi	r12,r7,-16
 800848c:	6018d13a 	srli	r12,r12,4
 8008490:	1a000104 	addi	r8,r3,4
 8008494:	1ac00204 	addi	r11,r3,8
 8008498:	6008913a 	slli	r4,r12,4
 800849c:	1a800304 	addi	r10,r3,12
 80084a0:	1813883a 	mov	r9,r3
 80084a4:	21000504 	addi	r4,r4,20
 80084a8:	1909883a 	add	r4,r3,r4
 80084ac:	49800015 	stw	r6,0(r9)
 80084b0:	41800015 	stw	r6,0(r8)
 80084b4:	59800015 	stw	r6,0(r11)
 80084b8:	51800015 	stw	r6,0(r10)
 80084bc:	42000404 	addi	r8,r8,16
 80084c0:	4a400404 	addi	r9,r9,16
 80084c4:	5ac00404 	addi	r11,r11,16
 80084c8:	52800404 	addi	r10,r10,16
 80084cc:	413ff71e 	bne	r8,r4,80084ac <__alt_data_end+0xfc0084ac>
 80084d0:	63000044 	addi	r12,r12,1
 80084d4:	6018913a 	slli	r12,r12,4
 80084d8:	39c003cc 	andi	r7,r7,15
 80084dc:	010000c4 	movi	r4,3
 80084e0:	1b07883a 	add	r3,r3,r12
 80084e4:	21c00e2e 	bgeu	r4,r7,8008520 <memset+0x100>
 80084e8:	1813883a 	mov	r9,r3
 80084ec:	3811883a 	mov	r8,r7
 80084f0:	010000c4 	movi	r4,3
 80084f4:	49800015 	stw	r6,0(r9)
 80084f8:	423fff04 	addi	r8,r8,-4
 80084fc:	4a400104 	addi	r9,r9,4
 8008500:	223ffc36 	bltu	r4,r8,80084f4 <__alt_data_end+0xfc0084f4>
 8008504:	393fff04 	addi	r4,r7,-4
 8008508:	2008d0ba 	srli	r4,r4,2
 800850c:	39c000cc 	andi	r7,r7,3
 8008510:	21000044 	addi	r4,r4,1
 8008514:	2109883a 	add	r4,r4,r4
 8008518:	2109883a 	add	r4,r4,r4
 800851c:	1907883a 	add	r3,r3,r4
 8008520:	38000526 	beq	r7,zero,8008538 <memset+0x118>
 8008524:	19cf883a 	add	r7,r3,r7
 8008528:	19400005 	stb	r5,0(r3)
 800852c:	18c00044 	addi	r3,r3,1
 8008530:	38fffd1e 	bne	r7,r3,8008528 <__alt_data_end+0xfc008528>
 8008534:	f800283a 	ret
 8008538:	f800283a 	ret
 800853c:	2007883a 	mov	r3,r4
 8008540:	300f883a 	mov	r7,r6
 8008544:	003fc706 	br	8008464 <__alt_data_end+0xfc008464>

08008548 <_realloc_r>:
 8008548:	defff604 	addi	sp,sp,-40
 800854c:	dc800215 	stw	r18,8(sp)
 8008550:	dfc00915 	stw	ra,36(sp)
 8008554:	df000815 	stw	fp,32(sp)
 8008558:	ddc00715 	stw	r23,28(sp)
 800855c:	dd800615 	stw	r22,24(sp)
 8008560:	dd400515 	stw	r21,20(sp)
 8008564:	dd000415 	stw	r20,16(sp)
 8008568:	dcc00315 	stw	r19,12(sp)
 800856c:	dc400115 	stw	r17,4(sp)
 8008570:	dc000015 	stw	r16,0(sp)
 8008574:	3025883a 	mov	r18,r6
 8008578:	2800b726 	beq	r5,zero,8008858 <_realloc_r+0x310>
 800857c:	282b883a 	mov	r21,r5
 8008580:	2029883a 	mov	r20,r4
 8008584:	8009ecc0 	call	8009ecc <__malloc_lock>
 8008588:	a8bfff17 	ldw	r2,-4(r21)
 800858c:	043fff04 	movi	r16,-4
 8008590:	90c002c4 	addi	r3,r18,11
 8008594:	01000584 	movi	r4,22
 8008598:	acfffe04 	addi	r19,r21,-8
 800859c:	1420703a 	and	r16,r2,r16
 80085a0:	20c0332e 	bgeu	r4,r3,8008670 <_realloc_r+0x128>
 80085a4:	047ffe04 	movi	r17,-8
 80085a8:	1c62703a 	and	r17,r3,r17
 80085ac:	8807883a 	mov	r3,r17
 80085b0:	88005816 	blt	r17,zero,8008714 <_realloc_r+0x1cc>
 80085b4:	8c805736 	bltu	r17,r18,8008714 <_realloc_r+0x1cc>
 80085b8:	80c0300e 	bge	r16,r3,800867c <_realloc_r+0x134>
 80085bc:	07020074 	movhi	fp,2049
 80085c0:	e7373804 	addi	fp,fp,-8992
 80085c4:	e1c00217 	ldw	r7,8(fp)
 80085c8:	9c09883a 	add	r4,r19,r16
 80085cc:	22000117 	ldw	r8,4(r4)
 80085d0:	21c06326 	beq	r4,r7,8008760 <_realloc_r+0x218>
 80085d4:	017fff84 	movi	r5,-2
 80085d8:	414a703a 	and	r5,r8,r5
 80085dc:	214b883a 	add	r5,r4,r5
 80085e0:	29800117 	ldw	r6,4(r5)
 80085e4:	3180004c 	andi	r6,r6,1
 80085e8:	30003f26 	beq	r6,zero,80086e8 <_realloc_r+0x1a0>
 80085ec:	1080004c 	andi	r2,r2,1
 80085f0:	10008326 	beq	r2,zero,8008800 <_realloc_r+0x2b8>
 80085f4:	900b883a 	mov	r5,r18
 80085f8:	a009883a 	mov	r4,r20
 80085fc:	800788c0 	call	800788c <_malloc_r>
 8008600:	1025883a 	mov	r18,r2
 8008604:	10011e26 	beq	r2,zero,8008a80 <_realloc_r+0x538>
 8008608:	a93fff17 	ldw	r4,-4(r21)
 800860c:	10fffe04 	addi	r3,r2,-8
 8008610:	00bfff84 	movi	r2,-2
 8008614:	2084703a 	and	r2,r4,r2
 8008618:	9885883a 	add	r2,r19,r2
 800861c:	1880ee26 	beq	r3,r2,80089d8 <_realloc_r+0x490>
 8008620:	81bfff04 	addi	r6,r16,-4
 8008624:	00800904 	movi	r2,36
 8008628:	1180b836 	bltu	r2,r6,800890c <_realloc_r+0x3c4>
 800862c:	00c004c4 	movi	r3,19
 8008630:	19809636 	bltu	r3,r6,800888c <_realloc_r+0x344>
 8008634:	9005883a 	mov	r2,r18
 8008638:	a807883a 	mov	r3,r21
 800863c:	19000017 	ldw	r4,0(r3)
 8008640:	11000015 	stw	r4,0(r2)
 8008644:	19000117 	ldw	r4,4(r3)
 8008648:	11000115 	stw	r4,4(r2)
 800864c:	18c00217 	ldw	r3,8(r3)
 8008650:	10c00215 	stw	r3,8(r2)
 8008654:	a80b883a 	mov	r5,r21
 8008658:	a009883a 	mov	r4,r20
 800865c:	80093140 	call	8009314 <_free_r>
 8008660:	a009883a 	mov	r4,r20
 8008664:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8008668:	9005883a 	mov	r2,r18
 800866c:	00001206 	br	80086b8 <_realloc_r+0x170>
 8008670:	00c00404 	movi	r3,16
 8008674:	1823883a 	mov	r17,r3
 8008678:	003fce06 	br	80085b4 <__alt_data_end+0xfc0085b4>
 800867c:	a825883a 	mov	r18,r21
 8008680:	8445c83a 	sub	r2,r16,r17
 8008684:	00c003c4 	movi	r3,15
 8008688:	18802636 	bltu	r3,r2,8008724 <_realloc_r+0x1dc>
 800868c:	99800117 	ldw	r6,4(r19)
 8008690:	9c07883a 	add	r3,r19,r16
 8008694:	3180004c 	andi	r6,r6,1
 8008698:	3420b03a 	or	r16,r6,r16
 800869c:	9c000115 	stw	r16,4(r19)
 80086a0:	18800117 	ldw	r2,4(r3)
 80086a4:	10800054 	ori	r2,r2,1
 80086a8:	18800115 	stw	r2,4(r3)
 80086ac:	a009883a 	mov	r4,r20
 80086b0:	8009ef00 	call	8009ef0 <__malloc_unlock>
 80086b4:	9005883a 	mov	r2,r18
 80086b8:	dfc00917 	ldw	ra,36(sp)
 80086bc:	df000817 	ldw	fp,32(sp)
 80086c0:	ddc00717 	ldw	r23,28(sp)
 80086c4:	dd800617 	ldw	r22,24(sp)
 80086c8:	dd400517 	ldw	r21,20(sp)
 80086cc:	dd000417 	ldw	r20,16(sp)
 80086d0:	dcc00317 	ldw	r19,12(sp)
 80086d4:	dc800217 	ldw	r18,8(sp)
 80086d8:	dc400117 	ldw	r17,4(sp)
 80086dc:	dc000017 	ldw	r16,0(sp)
 80086e0:	dec00a04 	addi	sp,sp,40
 80086e4:	f800283a 	ret
 80086e8:	017fff04 	movi	r5,-4
 80086ec:	414a703a 	and	r5,r8,r5
 80086f0:	814d883a 	add	r6,r16,r5
 80086f4:	30c01f16 	blt	r6,r3,8008774 <_realloc_r+0x22c>
 80086f8:	20800317 	ldw	r2,12(r4)
 80086fc:	20c00217 	ldw	r3,8(r4)
 8008700:	a825883a 	mov	r18,r21
 8008704:	3021883a 	mov	r16,r6
 8008708:	18800315 	stw	r2,12(r3)
 800870c:	10c00215 	stw	r3,8(r2)
 8008710:	003fdb06 	br	8008680 <__alt_data_end+0xfc008680>
 8008714:	00800304 	movi	r2,12
 8008718:	a0800015 	stw	r2,0(r20)
 800871c:	0005883a 	mov	r2,zero
 8008720:	003fe506 	br	80086b8 <__alt_data_end+0xfc0086b8>
 8008724:	98c00117 	ldw	r3,4(r19)
 8008728:	9c4b883a 	add	r5,r19,r17
 800872c:	11000054 	ori	r4,r2,1
 8008730:	18c0004c 	andi	r3,r3,1
 8008734:	1c62b03a 	or	r17,r3,r17
 8008738:	9c400115 	stw	r17,4(r19)
 800873c:	29000115 	stw	r4,4(r5)
 8008740:	2885883a 	add	r2,r5,r2
 8008744:	10c00117 	ldw	r3,4(r2)
 8008748:	29400204 	addi	r5,r5,8
 800874c:	a009883a 	mov	r4,r20
 8008750:	18c00054 	ori	r3,r3,1
 8008754:	10c00115 	stw	r3,4(r2)
 8008758:	80093140 	call	8009314 <_free_r>
 800875c:	003fd306 	br	80086ac <__alt_data_end+0xfc0086ac>
 8008760:	017fff04 	movi	r5,-4
 8008764:	414a703a 	and	r5,r8,r5
 8008768:	89800404 	addi	r6,r17,16
 800876c:	8151883a 	add	r8,r16,r5
 8008770:	4180590e 	bge	r8,r6,80088d8 <_realloc_r+0x390>
 8008774:	1080004c 	andi	r2,r2,1
 8008778:	103f9e1e 	bne	r2,zero,80085f4 <__alt_data_end+0xfc0085f4>
 800877c:	adbffe17 	ldw	r22,-8(r21)
 8008780:	00bfff04 	movi	r2,-4
 8008784:	9dadc83a 	sub	r22,r19,r22
 8008788:	b1800117 	ldw	r6,4(r22)
 800878c:	3084703a 	and	r2,r6,r2
 8008790:	20002026 	beq	r4,zero,8008814 <_realloc_r+0x2cc>
 8008794:	80af883a 	add	r23,r16,r2
 8008798:	b96f883a 	add	r23,r23,r5
 800879c:	21c05f26 	beq	r4,r7,800891c <_realloc_r+0x3d4>
 80087a0:	b8c01c16 	blt	r23,r3,8008814 <_realloc_r+0x2cc>
 80087a4:	20800317 	ldw	r2,12(r4)
 80087a8:	20c00217 	ldw	r3,8(r4)
 80087ac:	81bfff04 	addi	r6,r16,-4
 80087b0:	01000904 	movi	r4,36
 80087b4:	18800315 	stw	r2,12(r3)
 80087b8:	10c00215 	stw	r3,8(r2)
 80087bc:	b0c00217 	ldw	r3,8(r22)
 80087c0:	b0800317 	ldw	r2,12(r22)
 80087c4:	b4800204 	addi	r18,r22,8
 80087c8:	18800315 	stw	r2,12(r3)
 80087cc:	10c00215 	stw	r3,8(r2)
 80087d0:	21801b36 	bltu	r4,r6,8008840 <_realloc_r+0x2f8>
 80087d4:	008004c4 	movi	r2,19
 80087d8:	1180352e 	bgeu	r2,r6,80088b0 <_realloc_r+0x368>
 80087dc:	a8800017 	ldw	r2,0(r21)
 80087e0:	b0800215 	stw	r2,8(r22)
 80087e4:	a8800117 	ldw	r2,4(r21)
 80087e8:	b0800315 	stw	r2,12(r22)
 80087ec:	008006c4 	movi	r2,27
 80087f0:	11807f36 	bltu	r2,r6,80089f0 <_realloc_r+0x4a8>
 80087f4:	b0800404 	addi	r2,r22,16
 80087f8:	ad400204 	addi	r21,r21,8
 80087fc:	00002d06 	br	80088b4 <_realloc_r+0x36c>
 8008800:	adbffe17 	ldw	r22,-8(r21)
 8008804:	00bfff04 	movi	r2,-4
 8008808:	9dadc83a 	sub	r22,r19,r22
 800880c:	b1000117 	ldw	r4,4(r22)
 8008810:	2084703a 	and	r2,r4,r2
 8008814:	b03f7726 	beq	r22,zero,80085f4 <__alt_data_end+0xfc0085f4>
 8008818:	80af883a 	add	r23,r16,r2
 800881c:	b8ff7516 	blt	r23,r3,80085f4 <__alt_data_end+0xfc0085f4>
 8008820:	b0800317 	ldw	r2,12(r22)
 8008824:	b0c00217 	ldw	r3,8(r22)
 8008828:	81bfff04 	addi	r6,r16,-4
 800882c:	01000904 	movi	r4,36
 8008830:	18800315 	stw	r2,12(r3)
 8008834:	10c00215 	stw	r3,8(r2)
 8008838:	b4800204 	addi	r18,r22,8
 800883c:	21bfe52e 	bgeu	r4,r6,80087d4 <__alt_data_end+0xfc0087d4>
 8008840:	a80b883a 	mov	r5,r21
 8008844:	9009883a 	mov	r4,r18
 8008848:	80082c40 	call	80082c4 <memmove>
 800884c:	b821883a 	mov	r16,r23
 8008850:	b027883a 	mov	r19,r22
 8008854:	003f8a06 	br	8008680 <__alt_data_end+0xfc008680>
 8008858:	300b883a 	mov	r5,r6
 800885c:	dfc00917 	ldw	ra,36(sp)
 8008860:	df000817 	ldw	fp,32(sp)
 8008864:	ddc00717 	ldw	r23,28(sp)
 8008868:	dd800617 	ldw	r22,24(sp)
 800886c:	dd400517 	ldw	r21,20(sp)
 8008870:	dd000417 	ldw	r20,16(sp)
 8008874:	dcc00317 	ldw	r19,12(sp)
 8008878:	dc800217 	ldw	r18,8(sp)
 800887c:	dc400117 	ldw	r17,4(sp)
 8008880:	dc000017 	ldw	r16,0(sp)
 8008884:	dec00a04 	addi	sp,sp,40
 8008888:	800788c1 	jmpi	800788c <_malloc_r>
 800888c:	a8c00017 	ldw	r3,0(r21)
 8008890:	90c00015 	stw	r3,0(r18)
 8008894:	a8c00117 	ldw	r3,4(r21)
 8008898:	90c00115 	stw	r3,4(r18)
 800889c:	00c006c4 	movi	r3,27
 80088a0:	19804536 	bltu	r3,r6,80089b8 <_realloc_r+0x470>
 80088a4:	90800204 	addi	r2,r18,8
 80088a8:	a8c00204 	addi	r3,r21,8
 80088ac:	003f6306 	br	800863c <__alt_data_end+0xfc00863c>
 80088b0:	9005883a 	mov	r2,r18
 80088b4:	a8c00017 	ldw	r3,0(r21)
 80088b8:	b821883a 	mov	r16,r23
 80088bc:	b027883a 	mov	r19,r22
 80088c0:	10c00015 	stw	r3,0(r2)
 80088c4:	a8c00117 	ldw	r3,4(r21)
 80088c8:	10c00115 	stw	r3,4(r2)
 80088cc:	a8c00217 	ldw	r3,8(r21)
 80088d0:	10c00215 	stw	r3,8(r2)
 80088d4:	003f6a06 	br	8008680 <__alt_data_end+0xfc008680>
 80088d8:	9c67883a 	add	r19,r19,r17
 80088dc:	4445c83a 	sub	r2,r8,r17
 80088e0:	e4c00215 	stw	r19,8(fp)
 80088e4:	10800054 	ori	r2,r2,1
 80088e8:	98800115 	stw	r2,4(r19)
 80088ec:	a8bfff17 	ldw	r2,-4(r21)
 80088f0:	a009883a 	mov	r4,r20
 80088f4:	1080004c 	andi	r2,r2,1
 80088f8:	1462b03a 	or	r17,r2,r17
 80088fc:	ac7fff15 	stw	r17,-4(r21)
 8008900:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8008904:	a805883a 	mov	r2,r21
 8008908:	003f6b06 	br	80086b8 <__alt_data_end+0xfc0086b8>
 800890c:	a80b883a 	mov	r5,r21
 8008910:	9009883a 	mov	r4,r18
 8008914:	80082c40 	call	80082c4 <memmove>
 8008918:	003f4e06 	br	8008654 <__alt_data_end+0xfc008654>
 800891c:	89000404 	addi	r4,r17,16
 8008920:	b93fbc16 	blt	r23,r4,8008814 <__alt_data_end+0xfc008814>
 8008924:	b0800317 	ldw	r2,12(r22)
 8008928:	b0c00217 	ldw	r3,8(r22)
 800892c:	81bfff04 	addi	r6,r16,-4
 8008930:	01000904 	movi	r4,36
 8008934:	18800315 	stw	r2,12(r3)
 8008938:	10c00215 	stw	r3,8(r2)
 800893c:	b4800204 	addi	r18,r22,8
 8008940:	21804336 	bltu	r4,r6,8008a50 <_realloc_r+0x508>
 8008944:	008004c4 	movi	r2,19
 8008948:	11803f2e 	bgeu	r2,r6,8008a48 <_realloc_r+0x500>
 800894c:	a8800017 	ldw	r2,0(r21)
 8008950:	b0800215 	stw	r2,8(r22)
 8008954:	a8800117 	ldw	r2,4(r21)
 8008958:	b0800315 	stw	r2,12(r22)
 800895c:	008006c4 	movi	r2,27
 8008960:	11803f36 	bltu	r2,r6,8008a60 <_realloc_r+0x518>
 8008964:	b0800404 	addi	r2,r22,16
 8008968:	ad400204 	addi	r21,r21,8
 800896c:	a8c00017 	ldw	r3,0(r21)
 8008970:	10c00015 	stw	r3,0(r2)
 8008974:	a8c00117 	ldw	r3,4(r21)
 8008978:	10c00115 	stw	r3,4(r2)
 800897c:	a8c00217 	ldw	r3,8(r21)
 8008980:	10c00215 	stw	r3,8(r2)
 8008984:	b447883a 	add	r3,r22,r17
 8008988:	bc45c83a 	sub	r2,r23,r17
 800898c:	e0c00215 	stw	r3,8(fp)
 8008990:	10800054 	ori	r2,r2,1
 8008994:	18800115 	stw	r2,4(r3)
 8008998:	b0800117 	ldw	r2,4(r22)
 800899c:	a009883a 	mov	r4,r20
 80089a0:	1080004c 	andi	r2,r2,1
 80089a4:	1462b03a 	or	r17,r2,r17
 80089a8:	b4400115 	stw	r17,4(r22)
 80089ac:	8009ef00 	call	8009ef0 <__malloc_unlock>
 80089b0:	9005883a 	mov	r2,r18
 80089b4:	003f4006 	br	80086b8 <__alt_data_end+0xfc0086b8>
 80089b8:	a8c00217 	ldw	r3,8(r21)
 80089bc:	90c00215 	stw	r3,8(r18)
 80089c0:	a8c00317 	ldw	r3,12(r21)
 80089c4:	90c00315 	stw	r3,12(r18)
 80089c8:	30801126 	beq	r6,r2,8008a10 <_realloc_r+0x4c8>
 80089cc:	90800404 	addi	r2,r18,16
 80089d0:	a8c00404 	addi	r3,r21,16
 80089d4:	003f1906 	br	800863c <__alt_data_end+0xfc00863c>
 80089d8:	90ffff17 	ldw	r3,-4(r18)
 80089dc:	00bfff04 	movi	r2,-4
 80089e0:	a825883a 	mov	r18,r21
 80089e4:	1884703a 	and	r2,r3,r2
 80089e8:	80a1883a 	add	r16,r16,r2
 80089ec:	003f2406 	br	8008680 <__alt_data_end+0xfc008680>
 80089f0:	a8800217 	ldw	r2,8(r21)
 80089f4:	b0800415 	stw	r2,16(r22)
 80089f8:	a8800317 	ldw	r2,12(r21)
 80089fc:	b0800515 	stw	r2,20(r22)
 8008a00:	31000a26 	beq	r6,r4,8008a2c <_realloc_r+0x4e4>
 8008a04:	b0800604 	addi	r2,r22,24
 8008a08:	ad400404 	addi	r21,r21,16
 8008a0c:	003fa906 	br	80088b4 <__alt_data_end+0xfc0088b4>
 8008a10:	a9000417 	ldw	r4,16(r21)
 8008a14:	90800604 	addi	r2,r18,24
 8008a18:	a8c00604 	addi	r3,r21,24
 8008a1c:	91000415 	stw	r4,16(r18)
 8008a20:	a9000517 	ldw	r4,20(r21)
 8008a24:	91000515 	stw	r4,20(r18)
 8008a28:	003f0406 	br	800863c <__alt_data_end+0xfc00863c>
 8008a2c:	a8c00417 	ldw	r3,16(r21)
 8008a30:	ad400604 	addi	r21,r21,24
 8008a34:	b0800804 	addi	r2,r22,32
 8008a38:	b0c00615 	stw	r3,24(r22)
 8008a3c:	a8ffff17 	ldw	r3,-4(r21)
 8008a40:	b0c00715 	stw	r3,28(r22)
 8008a44:	003f9b06 	br	80088b4 <__alt_data_end+0xfc0088b4>
 8008a48:	9005883a 	mov	r2,r18
 8008a4c:	003fc706 	br	800896c <__alt_data_end+0xfc00896c>
 8008a50:	a80b883a 	mov	r5,r21
 8008a54:	9009883a 	mov	r4,r18
 8008a58:	80082c40 	call	80082c4 <memmove>
 8008a5c:	003fc906 	br	8008984 <__alt_data_end+0xfc008984>
 8008a60:	a8800217 	ldw	r2,8(r21)
 8008a64:	b0800415 	stw	r2,16(r22)
 8008a68:	a8800317 	ldw	r2,12(r21)
 8008a6c:	b0800515 	stw	r2,20(r22)
 8008a70:	31000726 	beq	r6,r4,8008a90 <_realloc_r+0x548>
 8008a74:	b0800604 	addi	r2,r22,24
 8008a78:	ad400404 	addi	r21,r21,16
 8008a7c:	003fbb06 	br	800896c <__alt_data_end+0xfc00896c>
 8008a80:	a009883a 	mov	r4,r20
 8008a84:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8008a88:	0005883a 	mov	r2,zero
 8008a8c:	003f0a06 	br	80086b8 <__alt_data_end+0xfc0086b8>
 8008a90:	a8c00417 	ldw	r3,16(r21)
 8008a94:	ad400604 	addi	r21,r21,24
 8008a98:	b0800804 	addi	r2,r22,32
 8008a9c:	b0c00615 	stw	r3,24(r22)
 8008aa0:	a8ffff17 	ldw	r3,-4(r21)
 8008aa4:	b0c00715 	stw	r3,28(r22)
 8008aa8:	003fb006 	br	800896c <__alt_data_end+0xfc00896c>

08008aac <_sbrk_r>:
 8008aac:	defffd04 	addi	sp,sp,-12
 8008ab0:	dc000015 	stw	r16,0(sp)
 8008ab4:	04020074 	movhi	r16,2049
 8008ab8:	dc400115 	stw	r17,4(sp)
 8008abc:	8403ce04 	addi	r16,r16,3896
 8008ac0:	2023883a 	mov	r17,r4
 8008ac4:	2809883a 	mov	r4,r5
 8008ac8:	dfc00215 	stw	ra,8(sp)
 8008acc:	80000015 	stw	zero,0(r16)
 8008ad0:	800a0b00 	call	800a0b0 <sbrk>
 8008ad4:	00ffffc4 	movi	r3,-1
 8008ad8:	10c00526 	beq	r2,r3,8008af0 <_sbrk_r+0x44>
 8008adc:	dfc00217 	ldw	ra,8(sp)
 8008ae0:	dc400117 	ldw	r17,4(sp)
 8008ae4:	dc000017 	ldw	r16,0(sp)
 8008ae8:	dec00304 	addi	sp,sp,12
 8008aec:	f800283a 	ret
 8008af0:	80c00017 	ldw	r3,0(r16)
 8008af4:	183ff926 	beq	r3,zero,8008adc <__alt_data_end+0xfc008adc>
 8008af8:	88c00015 	stw	r3,0(r17)
 8008afc:	003ff706 	br	8008adc <__alt_data_end+0xfc008adc>

08008b00 <__sread>:
 8008b00:	defffe04 	addi	sp,sp,-8
 8008b04:	dc000015 	stw	r16,0(sp)
 8008b08:	2821883a 	mov	r16,r5
 8008b0c:	2940038f 	ldh	r5,14(r5)
 8008b10:	dfc00115 	stw	ra,4(sp)
 8008b14:	80098400 	call	8009840 <_read_r>
 8008b18:	10000716 	blt	r2,zero,8008b38 <__sread+0x38>
 8008b1c:	80c01417 	ldw	r3,80(r16)
 8008b20:	1887883a 	add	r3,r3,r2
 8008b24:	80c01415 	stw	r3,80(r16)
 8008b28:	dfc00117 	ldw	ra,4(sp)
 8008b2c:	dc000017 	ldw	r16,0(sp)
 8008b30:	dec00204 	addi	sp,sp,8
 8008b34:	f800283a 	ret
 8008b38:	80c0030b 	ldhu	r3,12(r16)
 8008b3c:	18fbffcc 	andi	r3,r3,61439
 8008b40:	80c0030d 	sth	r3,12(r16)
 8008b44:	dfc00117 	ldw	ra,4(sp)
 8008b48:	dc000017 	ldw	r16,0(sp)
 8008b4c:	dec00204 	addi	sp,sp,8
 8008b50:	f800283a 	ret

08008b54 <__seofread>:
 8008b54:	0005883a 	mov	r2,zero
 8008b58:	f800283a 	ret

08008b5c <__swrite>:
 8008b5c:	2880030b 	ldhu	r2,12(r5)
 8008b60:	defffb04 	addi	sp,sp,-20
 8008b64:	dcc00315 	stw	r19,12(sp)
 8008b68:	dc800215 	stw	r18,8(sp)
 8008b6c:	dc400115 	stw	r17,4(sp)
 8008b70:	dc000015 	stw	r16,0(sp)
 8008b74:	dfc00415 	stw	ra,16(sp)
 8008b78:	10c0400c 	andi	r3,r2,256
 8008b7c:	2821883a 	mov	r16,r5
 8008b80:	2023883a 	mov	r17,r4
 8008b84:	3025883a 	mov	r18,r6
 8008b88:	3827883a 	mov	r19,r7
 8008b8c:	18000526 	beq	r3,zero,8008ba4 <__swrite+0x48>
 8008b90:	2940038f 	ldh	r5,14(r5)
 8008b94:	01c00084 	movi	r7,2
 8008b98:	000d883a 	mov	r6,zero
 8008b9c:	80096240 	call	8009624 <_lseek_r>
 8008ba0:	8080030b 	ldhu	r2,12(r16)
 8008ba4:	8140038f 	ldh	r5,14(r16)
 8008ba8:	10bbffcc 	andi	r2,r2,61439
 8008bac:	980f883a 	mov	r7,r19
 8008bb0:	900d883a 	mov	r6,r18
 8008bb4:	8809883a 	mov	r4,r17
 8008bb8:	8080030d 	sth	r2,12(r16)
 8008bbc:	dfc00417 	ldw	ra,16(sp)
 8008bc0:	dcc00317 	ldw	r19,12(sp)
 8008bc4:	dc800217 	ldw	r18,8(sp)
 8008bc8:	dc400117 	ldw	r17,4(sp)
 8008bcc:	dc000017 	ldw	r16,0(sp)
 8008bd0:	dec00504 	addi	sp,sp,20
 8008bd4:	8008c3c1 	jmpi	8008c3c <_write_r>

08008bd8 <__sseek>:
 8008bd8:	defffe04 	addi	sp,sp,-8
 8008bdc:	dc000015 	stw	r16,0(sp)
 8008be0:	2821883a 	mov	r16,r5
 8008be4:	2940038f 	ldh	r5,14(r5)
 8008be8:	dfc00115 	stw	ra,4(sp)
 8008bec:	80096240 	call	8009624 <_lseek_r>
 8008bf0:	00ffffc4 	movi	r3,-1
 8008bf4:	10c00826 	beq	r2,r3,8008c18 <__sseek+0x40>
 8008bf8:	80c0030b 	ldhu	r3,12(r16)
 8008bfc:	80801415 	stw	r2,80(r16)
 8008c00:	18c40014 	ori	r3,r3,4096
 8008c04:	80c0030d 	sth	r3,12(r16)
 8008c08:	dfc00117 	ldw	ra,4(sp)
 8008c0c:	dc000017 	ldw	r16,0(sp)
 8008c10:	dec00204 	addi	sp,sp,8
 8008c14:	f800283a 	ret
 8008c18:	80c0030b 	ldhu	r3,12(r16)
 8008c1c:	18fbffcc 	andi	r3,r3,61439
 8008c20:	80c0030d 	sth	r3,12(r16)
 8008c24:	dfc00117 	ldw	ra,4(sp)
 8008c28:	dc000017 	ldw	r16,0(sp)
 8008c2c:	dec00204 	addi	sp,sp,8
 8008c30:	f800283a 	ret

08008c34 <__sclose>:
 8008c34:	2940038f 	ldh	r5,14(r5)
 8008c38:	8008df01 	jmpi	8008df0 <_close_r>

08008c3c <_write_r>:
 8008c3c:	defffd04 	addi	sp,sp,-12
 8008c40:	2805883a 	mov	r2,r5
 8008c44:	dc000015 	stw	r16,0(sp)
 8008c48:	04020074 	movhi	r16,2049
 8008c4c:	dc400115 	stw	r17,4(sp)
 8008c50:	300b883a 	mov	r5,r6
 8008c54:	8403ce04 	addi	r16,r16,3896
 8008c58:	2023883a 	mov	r17,r4
 8008c5c:	380d883a 	mov	r6,r7
 8008c60:	1009883a 	mov	r4,r2
 8008c64:	dfc00215 	stw	ra,8(sp)
 8008c68:	80000015 	stw	zero,0(r16)
 8008c6c:	800a1cc0 	call	800a1cc <write>
 8008c70:	00ffffc4 	movi	r3,-1
 8008c74:	10c00526 	beq	r2,r3,8008c8c <_write_r+0x50>
 8008c78:	dfc00217 	ldw	ra,8(sp)
 8008c7c:	dc400117 	ldw	r17,4(sp)
 8008c80:	dc000017 	ldw	r16,0(sp)
 8008c84:	dec00304 	addi	sp,sp,12
 8008c88:	f800283a 	ret
 8008c8c:	80c00017 	ldw	r3,0(r16)
 8008c90:	183ff926 	beq	r3,zero,8008c78 <__alt_data_end+0xfc008c78>
 8008c94:	88c00015 	stw	r3,0(r17)
 8008c98:	003ff706 	br	8008c78 <__alt_data_end+0xfc008c78>

08008c9c <__swsetup_r>:
 8008c9c:	00820074 	movhi	r2,2049
 8008ca0:	defffd04 	addi	sp,sp,-12
 8008ca4:	10bcec04 	addi	r2,r2,-3152
 8008ca8:	dc400115 	stw	r17,4(sp)
 8008cac:	2023883a 	mov	r17,r4
 8008cb0:	11000017 	ldw	r4,0(r2)
 8008cb4:	dc000015 	stw	r16,0(sp)
 8008cb8:	dfc00215 	stw	ra,8(sp)
 8008cbc:	2821883a 	mov	r16,r5
 8008cc0:	20000226 	beq	r4,zero,8008ccc <__swsetup_r+0x30>
 8008cc4:	20800e17 	ldw	r2,56(r4)
 8008cc8:	10003126 	beq	r2,zero,8008d90 <__swsetup_r+0xf4>
 8008ccc:	8080030b 	ldhu	r2,12(r16)
 8008cd0:	10c0020c 	andi	r3,r2,8
 8008cd4:	1009883a 	mov	r4,r2
 8008cd8:	18000f26 	beq	r3,zero,8008d18 <__swsetup_r+0x7c>
 8008cdc:	80c00417 	ldw	r3,16(r16)
 8008ce0:	18001526 	beq	r3,zero,8008d38 <__swsetup_r+0x9c>
 8008ce4:	1100004c 	andi	r4,r2,1
 8008ce8:	20001c1e 	bne	r4,zero,8008d5c <__swsetup_r+0xc0>
 8008cec:	1080008c 	andi	r2,r2,2
 8008cf0:	1000291e 	bne	r2,zero,8008d98 <__swsetup_r+0xfc>
 8008cf4:	80800517 	ldw	r2,20(r16)
 8008cf8:	80800215 	stw	r2,8(r16)
 8008cfc:	18001c26 	beq	r3,zero,8008d70 <__swsetup_r+0xd4>
 8008d00:	0005883a 	mov	r2,zero
 8008d04:	dfc00217 	ldw	ra,8(sp)
 8008d08:	dc400117 	ldw	r17,4(sp)
 8008d0c:	dc000017 	ldw	r16,0(sp)
 8008d10:	dec00304 	addi	sp,sp,12
 8008d14:	f800283a 	ret
 8008d18:	2080040c 	andi	r2,r4,16
 8008d1c:	10002e26 	beq	r2,zero,8008dd8 <__swsetup_r+0x13c>
 8008d20:	2080010c 	andi	r2,r4,4
 8008d24:	10001e1e 	bne	r2,zero,8008da0 <__swsetup_r+0x104>
 8008d28:	80c00417 	ldw	r3,16(r16)
 8008d2c:	20800214 	ori	r2,r4,8
 8008d30:	8080030d 	sth	r2,12(r16)
 8008d34:	183feb1e 	bne	r3,zero,8008ce4 <__alt_data_end+0xfc008ce4>
 8008d38:	1100a00c 	andi	r4,r2,640
 8008d3c:	01408004 	movi	r5,512
 8008d40:	217fe826 	beq	r4,r5,8008ce4 <__alt_data_end+0xfc008ce4>
 8008d44:	800b883a 	mov	r5,r16
 8008d48:	8809883a 	mov	r4,r17
 8008d4c:	80096840 	call	8009684 <__smakebuf_r>
 8008d50:	8080030b 	ldhu	r2,12(r16)
 8008d54:	80c00417 	ldw	r3,16(r16)
 8008d58:	003fe206 	br	8008ce4 <__alt_data_end+0xfc008ce4>
 8008d5c:	80800517 	ldw	r2,20(r16)
 8008d60:	80000215 	stw	zero,8(r16)
 8008d64:	0085c83a 	sub	r2,zero,r2
 8008d68:	80800615 	stw	r2,24(r16)
 8008d6c:	183fe41e 	bne	r3,zero,8008d00 <__alt_data_end+0xfc008d00>
 8008d70:	80c0030b 	ldhu	r3,12(r16)
 8008d74:	0005883a 	mov	r2,zero
 8008d78:	1900200c 	andi	r4,r3,128
 8008d7c:	203fe126 	beq	r4,zero,8008d04 <__alt_data_end+0xfc008d04>
 8008d80:	18c01014 	ori	r3,r3,64
 8008d84:	80c0030d 	sth	r3,12(r16)
 8008d88:	00bfffc4 	movi	r2,-1
 8008d8c:	003fdd06 	br	8008d04 <__alt_data_end+0xfc008d04>
 8008d90:	80071f80 	call	80071f8 <__sinit>
 8008d94:	003fcd06 	br	8008ccc <__alt_data_end+0xfc008ccc>
 8008d98:	0005883a 	mov	r2,zero
 8008d9c:	003fd606 	br	8008cf8 <__alt_data_end+0xfc008cf8>
 8008da0:	81400c17 	ldw	r5,48(r16)
 8008da4:	28000626 	beq	r5,zero,8008dc0 <__swsetup_r+0x124>
 8008da8:	80801004 	addi	r2,r16,64
 8008dac:	28800326 	beq	r5,r2,8008dbc <__swsetup_r+0x120>
 8008db0:	8809883a 	mov	r4,r17
 8008db4:	80093140 	call	8009314 <_free_r>
 8008db8:	8100030b 	ldhu	r4,12(r16)
 8008dbc:	80000c15 	stw	zero,48(r16)
 8008dc0:	80c00417 	ldw	r3,16(r16)
 8008dc4:	00bff6c4 	movi	r2,-37
 8008dc8:	1108703a 	and	r4,r2,r4
 8008dcc:	80000115 	stw	zero,4(r16)
 8008dd0:	80c00015 	stw	r3,0(r16)
 8008dd4:	003fd506 	br	8008d2c <__alt_data_end+0xfc008d2c>
 8008dd8:	00800244 	movi	r2,9
 8008ddc:	88800015 	stw	r2,0(r17)
 8008de0:	20801014 	ori	r2,r4,64
 8008de4:	8080030d 	sth	r2,12(r16)
 8008de8:	00bfffc4 	movi	r2,-1
 8008dec:	003fc506 	br	8008d04 <__alt_data_end+0xfc008d04>

08008df0 <_close_r>:
 8008df0:	defffd04 	addi	sp,sp,-12
 8008df4:	dc000015 	stw	r16,0(sp)
 8008df8:	04020074 	movhi	r16,2049
 8008dfc:	dc400115 	stw	r17,4(sp)
 8008e00:	8403ce04 	addi	r16,r16,3896
 8008e04:	2023883a 	mov	r17,r4
 8008e08:	2809883a 	mov	r4,r5
 8008e0c:	dfc00215 	stw	ra,8(sp)
 8008e10:	80000015 	stw	zero,0(r16)
 8008e14:	800998c0 	call	800998c <close>
 8008e18:	00ffffc4 	movi	r3,-1
 8008e1c:	10c00526 	beq	r2,r3,8008e34 <_close_r+0x44>
 8008e20:	dfc00217 	ldw	ra,8(sp)
 8008e24:	dc400117 	ldw	r17,4(sp)
 8008e28:	dc000017 	ldw	r16,0(sp)
 8008e2c:	dec00304 	addi	sp,sp,12
 8008e30:	f800283a 	ret
 8008e34:	80c00017 	ldw	r3,0(r16)
 8008e38:	183ff926 	beq	r3,zero,8008e20 <__alt_data_end+0xfc008e20>
 8008e3c:	88c00015 	stw	r3,0(r17)
 8008e40:	003ff706 	br	8008e20 <__alt_data_end+0xfc008e20>

08008e44 <_fclose_r>:
 8008e44:	28003926 	beq	r5,zero,8008f2c <_fclose_r+0xe8>
 8008e48:	defffc04 	addi	sp,sp,-16
 8008e4c:	dc400115 	stw	r17,4(sp)
 8008e50:	dc000015 	stw	r16,0(sp)
 8008e54:	dfc00315 	stw	ra,12(sp)
 8008e58:	dc800215 	stw	r18,8(sp)
 8008e5c:	2023883a 	mov	r17,r4
 8008e60:	2821883a 	mov	r16,r5
 8008e64:	20000226 	beq	r4,zero,8008e70 <_fclose_r+0x2c>
 8008e68:	20800e17 	ldw	r2,56(r4)
 8008e6c:	10002726 	beq	r2,zero,8008f0c <_fclose_r+0xc8>
 8008e70:	8080030f 	ldh	r2,12(r16)
 8008e74:	1000071e 	bne	r2,zero,8008e94 <_fclose_r+0x50>
 8008e78:	0005883a 	mov	r2,zero
 8008e7c:	dfc00317 	ldw	ra,12(sp)
 8008e80:	dc800217 	ldw	r18,8(sp)
 8008e84:	dc400117 	ldw	r17,4(sp)
 8008e88:	dc000017 	ldw	r16,0(sp)
 8008e8c:	dec00404 	addi	sp,sp,16
 8008e90:	f800283a 	ret
 8008e94:	800b883a 	mov	r5,r16
 8008e98:	8809883a 	mov	r4,r17
 8008e9c:	8008f480 	call	8008f48 <__sflush_r>
 8008ea0:	1025883a 	mov	r18,r2
 8008ea4:	80800b17 	ldw	r2,44(r16)
 8008ea8:	10000426 	beq	r2,zero,8008ebc <_fclose_r+0x78>
 8008eac:	81400717 	ldw	r5,28(r16)
 8008eb0:	8809883a 	mov	r4,r17
 8008eb4:	103ee83a 	callr	r2
 8008eb8:	10001616 	blt	r2,zero,8008f14 <_fclose_r+0xd0>
 8008ebc:	8080030b 	ldhu	r2,12(r16)
 8008ec0:	1080200c 	andi	r2,r2,128
 8008ec4:	1000151e 	bne	r2,zero,8008f1c <_fclose_r+0xd8>
 8008ec8:	81400c17 	ldw	r5,48(r16)
 8008ecc:	28000526 	beq	r5,zero,8008ee4 <_fclose_r+0xa0>
 8008ed0:	80801004 	addi	r2,r16,64
 8008ed4:	28800226 	beq	r5,r2,8008ee0 <_fclose_r+0x9c>
 8008ed8:	8809883a 	mov	r4,r17
 8008edc:	80093140 	call	8009314 <_free_r>
 8008ee0:	80000c15 	stw	zero,48(r16)
 8008ee4:	81401117 	ldw	r5,68(r16)
 8008ee8:	28000326 	beq	r5,zero,8008ef8 <_fclose_r+0xb4>
 8008eec:	8809883a 	mov	r4,r17
 8008ef0:	80093140 	call	8009314 <_free_r>
 8008ef4:	80001115 	stw	zero,68(r16)
 8008ef8:	80072080 	call	8007208 <__sfp_lock_acquire>
 8008efc:	8000030d 	sth	zero,12(r16)
 8008f00:	800720c0 	call	800720c <__sfp_lock_release>
 8008f04:	9005883a 	mov	r2,r18
 8008f08:	003fdc06 	br	8008e7c <__alt_data_end+0xfc008e7c>
 8008f0c:	80071f80 	call	80071f8 <__sinit>
 8008f10:	003fd706 	br	8008e70 <__alt_data_end+0xfc008e70>
 8008f14:	04bfffc4 	movi	r18,-1
 8008f18:	003fe806 	br	8008ebc <__alt_data_end+0xfc008ebc>
 8008f1c:	81400417 	ldw	r5,16(r16)
 8008f20:	8809883a 	mov	r4,r17
 8008f24:	80093140 	call	8009314 <_free_r>
 8008f28:	003fe706 	br	8008ec8 <__alt_data_end+0xfc008ec8>
 8008f2c:	0005883a 	mov	r2,zero
 8008f30:	f800283a 	ret

08008f34 <fclose>:
 8008f34:	00820074 	movhi	r2,2049
 8008f38:	10bcec04 	addi	r2,r2,-3152
 8008f3c:	200b883a 	mov	r5,r4
 8008f40:	11000017 	ldw	r4,0(r2)
 8008f44:	8008e441 	jmpi	8008e44 <_fclose_r>

08008f48 <__sflush_r>:
 8008f48:	2880030b 	ldhu	r2,12(r5)
 8008f4c:	defffb04 	addi	sp,sp,-20
 8008f50:	dcc00315 	stw	r19,12(sp)
 8008f54:	dc400115 	stw	r17,4(sp)
 8008f58:	dfc00415 	stw	ra,16(sp)
 8008f5c:	dc800215 	stw	r18,8(sp)
 8008f60:	dc000015 	stw	r16,0(sp)
 8008f64:	10c0020c 	andi	r3,r2,8
 8008f68:	2823883a 	mov	r17,r5
 8008f6c:	2027883a 	mov	r19,r4
 8008f70:	1800311e 	bne	r3,zero,8009038 <__sflush_r+0xf0>
 8008f74:	28c00117 	ldw	r3,4(r5)
 8008f78:	10820014 	ori	r2,r2,2048
 8008f7c:	2880030d 	sth	r2,12(r5)
 8008f80:	00c04b0e 	bge	zero,r3,80090b0 <__sflush_r+0x168>
 8008f84:	8a000a17 	ldw	r8,40(r17)
 8008f88:	40002326 	beq	r8,zero,8009018 <__sflush_r+0xd0>
 8008f8c:	9c000017 	ldw	r16,0(r19)
 8008f90:	10c4000c 	andi	r3,r2,4096
 8008f94:	98000015 	stw	zero,0(r19)
 8008f98:	18004826 	beq	r3,zero,80090bc <__sflush_r+0x174>
 8008f9c:	89801417 	ldw	r6,80(r17)
 8008fa0:	10c0010c 	andi	r3,r2,4
 8008fa4:	18000626 	beq	r3,zero,8008fc0 <__sflush_r+0x78>
 8008fa8:	88c00117 	ldw	r3,4(r17)
 8008fac:	88800c17 	ldw	r2,48(r17)
 8008fb0:	30cdc83a 	sub	r6,r6,r3
 8008fb4:	10000226 	beq	r2,zero,8008fc0 <__sflush_r+0x78>
 8008fb8:	88800f17 	ldw	r2,60(r17)
 8008fbc:	308dc83a 	sub	r6,r6,r2
 8008fc0:	89400717 	ldw	r5,28(r17)
 8008fc4:	000f883a 	mov	r7,zero
 8008fc8:	9809883a 	mov	r4,r19
 8008fcc:	403ee83a 	callr	r8
 8008fd0:	00ffffc4 	movi	r3,-1
 8008fd4:	10c04426 	beq	r2,r3,80090e8 <__sflush_r+0x1a0>
 8008fd8:	88c0030b 	ldhu	r3,12(r17)
 8008fdc:	89000417 	ldw	r4,16(r17)
 8008fe0:	88000115 	stw	zero,4(r17)
 8008fe4:	197dffcc 	andi	r5,r3,63487
 8008fe8:	8940030d 	sth	r5,12(r17)
 8008fec:	89000015 	stw	r4,0(r17)
 8008ff0:	18c4000c 	andi	r3,r3,4096
 8008ff4:	18002c1e 	bne	r3,zero,80090a8 <__sflush_r+0x160>
 8008ff8:	89400c17 	ldw	r5,48(r17)
 8008ffc:	9c000015 	stw	r16,0(r19)
 8009000:	28000526 	beq	r5,zero,8009018 <__sflush_r+0xd0>
 8009004:	88801004 	addi	r2,r17,64
 8009008:	28800226 	beq	r5,r2,8009014 <__sflush_r+0xcc>
 800900c:	9809883a 	mov	r4,r19
 8009010:	80093140 	call	8009314 <_free_r>
 8009014:	88000c15 	stw	zero,48(r17)
 8009018:	0005883a 	mov	r2,zero
 800901c:	dfc00417 	ldw	ra,16(sp)
 8009020:	dcc00317 	ldw	r19,12(sp)
 8009024:	dc800217 	ldw	r18,8(sp)
 8009028:	dc400117 	ldw	r17,4(sp)
 800902c:	dc000017 	ldw	r16,0(sp)
 8009030:	dec00504 	addi	sp,sp,20
 8009034:	f800283a 	ret
 8009038:	2c800417 	ldw	r18,16(r5)
 800903c:	903ff626 	beq	r18,zero,8009018 <__alt_data_end+0xfc009018>
 8009040:	2c000017 	ldw	r16,0(r5)
 8009044:	108000cc 	andi	r2,r2,3
 8009048:	2c800015 	stw	r18,0(r5)
 800904c:	84a1c83a 	sub	r16,r16,r18
 8009050:	1000131e 	bne	r2,zero,80090a0 <__sflush_r+0x158>
 8009054:	28800517 	ldw	r2,20(r5)
 8009058:	88800215 	stw	r2,8(r17)
 800905c:	04000316 	blt	zero,r16,800906c <__sflush_r+0x124>
 8009060:	003fed06 	br	8009018 <__alt_data_end+0xfc009018>
 8009064:	90a5883a 	add	r18,r18,r2
 8009068:	043feb0e 	bge	zero,r16,8009018 <__alt_data_end+0xfc009018>
 800906c:	88800917 	ldw	r2,36(r17)
 8009070:	89400717 	ldw	r5,28(r17)
 8009074:	800f883a 	mov	r7,r16
 8009078:	900d883a 	mov	r6,r18
 800907c:	9809883a 	mov	r4,r19
 8009080:	103ee83a 	callr	r2
 8009084:	80a1c83a 	sub	r16,r16,r2
 8009088:	00bff616 	blt	zero,r2,8009064 <__alt_data_end+0xfc009064>
 800908c:	88c0030b 	ldhu	r3,12(r17)
 8009090:	00bfffc4 	movi	r2,-1
 8009094:	18c01014 	ori	r3,r3,64
 8009098:	88c0030d 	sth	r3,12(r17)
 800909c:	003fdf06 	br	800901c <__alt_data_end+0xfc00901c>
 80090a0:	0005883a 	mov	r2,zero
 80090a4:	003fec06 	br	8009058 <__alt_data_end+0xfc009058>
 80090a8:	88801415 	stw	r2,80(r17)
 80090ac:	003fd206 	br	8008ff8 <__alt_data_end+0xfc008ff8>
 80090b0:	28c00f17 	ldw	r3,60(r5)
 80090b4:	00ffb316 	blt	zero,r3,8008f84 <__alt_data_end+0xfc008f84>
 80090b8:	003fd706 	br	8009018 <__alt_data_end+0xfc009018>
 80090bc:	89400717 	ldw	r5,28(r17)
 80090c0:	000d883a 	mov	r6,zero
 80090c4:	01c00044 	movi	r7,1
 80090c8:	9809883a 	mov	r4,r19
 80090cc:	403ee83a 	callr	r8
 80090d0:	100d883a 	mov	r6,r2
 80090d4:	00bfffc4 	movi	r2,-1
 80090d8:	30801426 	beq	r6,r2,800912c <__sflush_r+0x1e4>
 80090dc:	8880030b 	ldhu	r2,12(r17)
 80090e0:	8a000a17 	ldw	r8,40(r17)
 80090e4:	003fae06 	br	8008fa0 <__alt_data_end+0xfc008fa0>
 80090e8:	98c00017 	ldw	r3,0(r19)
 80090ec:	183fba26 	beq	r3,zero,8008fd8 <__alt_data_end+0xfc008fd8>
 80090f0:	01000744 	movi	r4,29
 80090f4:	19000626 	beq	r3,r4,8009110 <__sflush_r+0x1c8>
 80090f8:	01000584 	movi	r4,22
 80090fc:	19000426 	beq	r3,r4,8009110 <__sflush_r+0x1c8>
 8009100:	88c0030b 	ldhu	r3,12(r17)
 8009104:	18c01014 	ori	r3,r3,64
 8009108:	88c0030d 	sth	r3,12(r17)
 800910c:	003fc306 	br	800901c <__alt_data_end+0xfc00901c>
 8009110:	8880030b 	ldhu	r2,12(r17)
 8009114:	88c00417 	ldw	r3,16(r17)
 8009118:	88000115 	stw	zero,4(r17)
 800911c:	10bdffcc 	andi	r2,r2,63487
 8009120:	8880030d 	sth	r2,12(r17)
 8009124:	88c00015 	stw	r3,0(r17)
 8009128:	003fb306 	br	8008ff8 <__alt_data_end+0xfc008ff8>
 800912c:	98800017 	ldw	r2,0(r19)
 8009130:	103fea26 	beq	r2,zero,80090dc <__alt_data_end+0xfc0090dc>
 8009134:	00c00744 	movi	r3,29
 8009138:	10c00226 	beq	r2,r3,8009144 <__sflush_r+0x1fc>
 800913c:	00c00584 	movi	r3,22
 8009140:	10c0031e 	bne	r2,r3,8009150 <__sflush_r+0x208>
 8009144:	9c000015 	stw	r16,0(r19)
 8009148:	0005883a 	mov	r2,zero
 800914c:	003fb306 	br	800901c <__alt_data_end+0xfc00901c>
 8009150:	88c0030b 	ldhu	r3,12(r17)
 8009154:	3005883a 	mov	r2,r6
 8009158:	18c01014 	ori	r3,r3,64
 800915c:	88c0030d 	sth	r3,12(r17)
 8009160:	003fae06 	br	800901c <__alt_data_end+0xfc00901c>

08009164 <_fflush_r>:
 8009164:	defffd04 	addi	sp,sp,-12
 8009168:	dc000115 	stw	r16,4(sp)
 800916c:	dfc00215 	stw	ra,8(sp)
 8009170:	2021883a 	mov	r16,r4
 8009174:	20000226 	beq	r4,zero,8009180 <_fflush_r+0x1c>
 8009178:	20800e17 	ldw	r2,56(r4)
 800917c:	10000c26 	beq	r2,zero,80091b0 <_fflush_r+0x4c>
 8009180:	2880030f 	ldh	r2,12(r5)
 8009184:	1000051e 	bne	r2,zero,800919c <_fflush_r+0x38>
 8009188:	0005883a 	mov	r2,zero
 800918c:	dfc00217 	ldw	ra,8(sp)
 8009190:	dc000117 	ldw	r16,4(sp)
 8009194:	dec00304 	addi	sp,sp,12
 8009198:	f800283a 	ret
 800919c:	8009883a 	mov	r4,r16
 80091a0:	dfc00217 	ldw	ra,8(sp)
 80091a4:	dc000117 	ldw	r16,4(sp)
 80091a8:	dec00304 	addi	sp,sp,12
 80091ac:	8008f481 	jmpi	8008f48 <__sflush_r>
 80091b0:	d9400015 	stw	r5,0(sp)
 80091b4:	80071f80 	call	80071f8 <__sinit>
 80091b8:	d9400017 	ldw	r5,0(sp)
 80091bc:	003ff006 	br	8009180 <__alt_data_end+0xfc009180>

080091c0 <fflush>:
 80091c0:	20000526 	beq	r4,zero,80091d8 <fflush+0x18>
 80091c4:	00820074 	movhi	r2,2049
 80091c8:	10bcec04 	addi	r2,r2,-3152
 80091cc:	200b883a 	mov	r5,r4
 80091d0:	11000017 	ldw	r4,0(r2)
 80091d4:	80091641 	jmpi	8009164 <_fflush_r>
 80091d8:	00820074 	movhi	r2,2049
 80091dc:	10bceb04 	addi	r2,r2,-3156
 80091e0:	11000017 	ldw	r4,0(r2)
 80091e4:	01420074 	movhi	r5,2049
 80091e8:	29645904 	addi	r5,r5,-28316
 80091ec:	80077c81 	jmpi	80077c8 <_fwalk_reent>

080091f0 <_malloc_trim_r>:
 80091f0:	defffb04 	addi	sp,sp,-20
 80091f4:	dcc00315 	stw	r19,12(sp)
 80091f8:	04c20074 	movhi	r19,2049
 80091fc:	dc800215 	stw	r18,8(sp)
 8009200:	dc400115 	stw	r17,4(sp)
 8009204:	dc000015 	stw	r16,0(sp)
 8009208:	dfc00415 	stw	ra,16(sp)
 800920c:	2821883a 	mov	r16,r5
 8009210:	9cf73804 	addi	r19,r19,-8992
 8009214:	2025883a 	mov	r18,r4
 8009218:	8009ecc0 	call	8009ecc <__malloc_lock>
 800921c:	98800217 	ldw	r2,8(r19)
 8009220:	14400117 	ldw	r17,4(r2)
 8009224:	00bfff04 	movi	r2,-4
 8009228:	88a2703a 	and	r17,r17,r2
 800922c:	8c21c83a 	sub	r16,r17,r16
 8009230:	8403fbc4 	addi	r16,r16,4079
 8009234:	8020d33a 	srli	r16,r16,12
 8009238:	0083ffc4 	movi	r2,4095
 800923c:	843fffc4 	addi	r16,r16,-1
 8009240:	8020933a 	slli	r16,r16,12
 8009244:	1400060e 	bge	r2,r16,8009260 <_malloc_trim_r+0x70>
 8009248:	000b883a 	mov	r5,zero
 800924c:	9009883a 	mov	r4,r18
 8009250:	8008aac0 	call	8008aac <_sbrk_r>
 8009254:	98c00217 	ldw	r3,8(r19)
 8009258:	1c47883a 	add	r3,r3,r17
 800925c:	10c00a26 	beq	r2,r3,8009288 <_malloc_trim_r+0x98>
 8009260:	9009883a 	mov	r4,r18
 8009264:	8009ef00 	call	8009ef0 <__malloc_unlock>
 8009268:	0005883a 	mov	r2,zero
 800926c:	dfc00417 	ldw	ra,16(sp)
 8009270:	dcc00317 	ldw	r19,12(sp)
 8009274:	dc800217 	ldw	r18,8(sp)
 8009278:	dc400117 	ldw	r17,4(sp)
 800927c:	dc000017 	ldw	r16,0(sp)
 8009280:	dec00504 	addi	sp,sp,20
 8009284:	f800283a 	ret
 8009288:	040bc83a 	sub	r5,zero,r16
 800928c:	9009883a 	mov	r4,r18
 8009290:	8008aac0 	call	8008aac <_sbrk_r>
 8009294:	00ffffc4 	movi	r3,-1
 8009298:	10c00d26 	beq	r2,r3,80092d0 <_malloc_trim_r+0xe0>
 800929c:	00c20074 	movhi	r3,2049
 80092a0:	18c3d604 	addi	r3,r3,3928
 80092a4:	18800017 	ldw	r2,0(r3)
 80092a8:	99000217 	ldw	r4,8(r19)
 80092ac:	8c23c83a 	sub	r17,r17,r16
 80092b0:	8c400054 	ori	r17,r17,1
 80092b4:	1421c83a 	sub	r16,r2,r16
 80092b8:	24400115 	stw	r17,4(r4)
 80092bc:	9009883a 	mov	r4,r18
 80092c0:	1c000015 	stw	r16,0(r3)
 80092c4:	8009ef00 	call	8009ef0 <__malloc_unlock>
 80092c8:	00800044 	movi	r2,1
 80092cc:	003fe706 	br	800926c <__alt_data_end+0xfc00926c>
 80092d0:	000b883a 	mov	r5,zero
 80092d4:	9009883a 	mov	r4,r18
 80092d8:	8008aac0 	call	8008aac <_sbrk_r>
 80092dc:	99000217 	ldw	r4,8(r19)
 80092e0:	014003c4 	movi	r5,15
 80092e4:	1107c83a 	sub	r3,r2,r4
 80092e8:	28ffdd0e 	bge	r5,r3,8009260 <__alt_data_end+0xfc009260>
 80092ec:	01420074 	movhi	r5,2049
 80092f0:	297ced04 	addi	r5,r5,-3148
 80092f4:	29400017 	ldw	r5,0(r5)
 80092f8:	18c00054 	ori	r3,r3,1
 80092fc:	20c00115 	stw	r3,4(r4)
 8009300:	00c20074 	movhi	r3,2049
 8009304:	1145c83a 	sub	r2,r2,r5
 8009308:	18c3d604 	addi	r3,r3,3928
 800930c:	18800015 	stw	r2,0(r3)
 8009310:	003fd306 	br	8009260 <__alt_data_end+0xfc009260>

08009314 <_free_r>:
 8009314:	28004126 	beq	r5,zero,800941c <_free_r+0x108>
 8009318:	defffd04 	addi	sp,sp,-12
 800931c:	dc400115 	stw	r17,4(sp)
 8009320:	dc000015 	stw	r16,0(sp)
 8009324:	2023883a 	mov	r17,r4
 8009328:	2821883a 	mov	r16,r5
 800932c:	dfc00215 	stw	ra,8(sp)
 8009330:	8009ecc0 	call	8009ecc <__malloc_lock>
 8009334:	81ffff17 	ldw	r7,-4(r16)
 8009338:	00bfff84 	movi	r2,-2
 800933c:	01020074 	movhi	r4,2049
 8009340:	81bffe04 	addi	r6,r16,-8
 8009344:	3884703a 	and	r2,r7,r2
 8009348:	21373804 	addi	r4,r4,-8992
 800934c:	308b883a 	add	r5,r6,r2
 8009350:	2a400117 	ldw	r9,4(r5)
 8009354:	22000217 	ldw	r8,8(r4)
 8009358:	00ffff04 	movi	r3,-4
 800935c:	48c6703a 	and	r3,r9,r3
 8009360:	2a005726 	beq	r5,r8,80094c0 <_free_r+0x1ac>
 8009364:	28c00115 	stw	r3,4(r5)
 8009368:	39c0004c 	andi	r7,r7,1
 800936c:	3800091e 	bne	r7,zero,8009394 <_free_r+0x80>
 8009370:	823ffe17 	ldw	r8,-8(r16)
 8009374:	22400204 	addi	r9,r4,8
 8009378:	320dc83a 	sub	r6,r6,r8
 800937c:	31c00217 	ldw	r7,8(r6)
 8009380:	1205883a 	add	r2,r2,r8
 8009384:	3a406526 	beq	r7,r9,800951c <_free_r+0x208>
 8009388:	32000317 	ldw	r8,12(r6)
 800938c:	3a000315 	stw	r8,12(r7)
 8009390:	41c00215 	stw	r7,8(r8)
 8009394:	28cf883a 	add	r7,r5,r3
 8009398:	39c00117 	ldw	r7,4(r7)
 800939c:	39c0004c 	andi	r7,r7,1
 80093a0:	38003a26 	beq	r7,zero,800948c <_free_r+0x178>
 80093a4:	10c00054 	ori	r3,r2,1
 80093a8:	30c00115 	stw	r3,4(r6)
 80093ac:	3087883a 	add	r3,r6,r2
 80093b0:	18800015 	stw	r2,0(r3)
 80093b4:	00c07fc4 	movi	r3,511
 80093b8:	18801936 	bltu	r3,r2,8009420 <_free_r+0x10c>
 80093bc:	1004d0fa 	srli	r2,r2,3
 80093c0:	01c00044 	movi	r7,1
 80093c4:	21400117 	ldw	r5,4(r4)
 80093c8:	10c00044 	addi	r3,r2,1
 80093cc:	18c7883a 	add	r3,r3,r3
 80093d0:	1005d0ba 	srai	r2,r2,2
 80093d4:	18c7883a 	add	r3,r3,r3
 80093d8:	18c7883a 	add	r3,r3,r3
 80093dc:	1907883a 	add	r3,r3,r4
 80093e0:	3884983a 	sll	r2,r7,r2
 80093e4:	19c00017 	ldw	r7,0(r3)
 80093e8:	1a3ffe04 	addi	r8,r3,-8
 80093ec:	1144b03a 	or	r2,r2,r5
 80093f0:	32000315 	stw	r8,12(r6)
 80093f4:	31c00215 	stw	r7,8(r6)
 80093f8:	20800115 	stw	r2,4(r4)
 80093fc:	19800015 	stw	r6,0(r3)
 8009400:	39800315 	stw	r6,12(r7)
 8009404:	8809883a 	mov	r4,r17
 8009408:	dfc00217 	ldw	ra,8(sp)
 800940c:	dc400117 	ldw	r17,4(sp)
 8009410:	dc000017 	ldw	r16,0(sp)
 8009414:	dec00304 	addi	sp,sp,12
 8009418:	8009ef01 	jmpi	8009ef0 <__malloc_unlock>
 800941c:	f800283a 	ret
 8009420:	100ad27a 	srli	r5,r2,9
 8009424:	00c00104 	movi	r3,4
 8009428:	19404a36 	bltu	r3,r5,8009554 <_free_r+0x240>
 800942c:	100ad1ba 	srli	r5,r2,6
 8009430:	28c00e44 	addi	r3,r5,57
 8009434:	18c7883a 	add	r3,r3,r3
 8009438:	29400e04 	addi	r5,r5,56
 800943c:	18c7883a 	add	r3,r3,r3
 8009440:	18c7883a 	add	r3,r3,r3
 8009444:	1909883a 	add	r4,r3,r4
 8009448:	20c00017 	ldw	r3,0(r4)
 800944c:	01c20074 	movhi	r7,2049
 8009450:	213ffe04 	addi	r4,r4,-8
 8009454:	39f73804 	addi	r7,r7,-8992
 8009458:	20c04426 	beq	r4,r3,800956c <_free_r+0x258>
 800945c:	01ffff04 	movi	r7,-4
 8009460:	19400117 	ldw	r5,4(r3)
 8009464:	29ca703a 	and	r5,r5,r7
 8009468:	1140022e 	bgeu	r2,r5,8009474 <_free_r+0x160>
 800946c:	18c00217 	ldw	r3,8(r3)
 8009470:	20fffb1e 	bne	r4,r3,8009460 <__alt_data_end+0xfc009460>
 8009474:	19000317 	ldw	r4,12(r3)
 8009478:	31000315 	stw	r4,12(r6)
 800947c:	30c00215 	stw	r3,8(r6)
 8009480:	21800215 	stw	r6,8(r4)
 8009484:	19800315 	stw	r6,12(r3)
 8009488:	003fde06 	br	8009404 <__alt_data_end+0xfc009404>
 800948c:	29c00217 	ldw	r7,8(r5)
 8009490:	10c5883a 	add	r2,r2,r3
 8009494:	00c20074 	movhi	r3,2049
 8009498:	18f73a04 	addi	r3,r3,-8984
 800949c:	38c03b26 	beq	r7,r3,800958c <_free_r+0x278>
 80094a0:	2a000317 	ldw	r8,12(r5)
 80094a4:	11400054 	ori	r5,r2,1
 80094a8:	3087883a 	add	r3,r6,r2
 80094ac:	3a000315 	stw	r8,12(r7)
 80094b0:	41c00215 	stw	r7,8(r8)
 80094b4:	31400115 	stw	r5,4(r6)
 80094b8:	18800015 	stw	r2,0(r3)
 80094bc:	003fbd06 	br	80093b4 <__alt_data_end+0xfc0093b4>
 80094c0:	39c0004c 	andi	r7,r7,1
 80094c4:	10c5883a 	add	r2,r2,r3
 80094c8:	3800071e 	bne	r7,zero,80094e8 <_free_r+0x1d4>
 80094cc:	81fffe17 	ldw	r7,-8(r16)
 80094d0:	31cdc83a 	sub	r6,r6,r7
 80094d4:	30c00317 	ldw	r3,12(r6)
 80094d8:	31400217 	ldw	r5,8(r6)
 80094dc:	11c5883a 	add	r2,r2,r7
 80094e0:	28c00315 	stw	r3,12(r5)
 80094e4:	19400215 	stw	r5,8(r3)
 80094e8:	10c00054 	ori	r3,r2,1
 80094ec:	30c00115 	stw	r3,4(r6)
 80094f0:	00c20074 	movhi	r3,2049
 80094f4:	18fcee04 	addi	r3,r3,-3144
 80094f8:	18c00017 	ldw	r3,0(r3)
 80094fc:	21800215 	stw	r6,8(r4)
 8009500:	10ffc036 	bltu	r2,r3,8009404 <__alt_data_end+0xfc009404>
 8009504:	00820074 	movhi	r2,2049
 8009508:	1083cd04 	addi	r2,r2,3892
 800950c:	11400017 	ldw	r5,0(r2)
 8009510:	8809883a 	mov	r4,r17
 8009514:	80091f00 	call	80091f0 <_malloc_trim_r>
 8009518:	003fba06 	br	8009404 <__alt_data_end+0xfc009404>
 800951c:	28c9883a 	add	r4,r5,r3
 8009520:	21000117 	ldw	r4,4(r4)
 8009524:	2100004c 	andi	r4,r4,1
 8009528:	2000391e 	bne	r4,zero,8009610 <_free_r+0x2fc>
 800952c:	29c00217 	ldw	r7,8(r5)
 8009530:	29000317 	ldw	r4,12(r5)
 8009534:	1885883a 	add	r2,r3,r2
 8009538:	10c00054 	ori	r3,r2,1
 800953c:	39000315 	stw	r4,12(r7)
 8009540:	21c00215 	stw	r7,8(r4)
 8009544:	30c00115 	stw	r3,4(r6)
 8009548:	308d883a 	add	r6,r6,r2
 800954c:	30800015 	stw	r2,0(r6)
 8009550:	003fac06 	br	8009404 <__alt_data_end+0xfc009404>
 8009554:	00c00504 	movi	r3,20
 8009558:	19401536 	bltu	r3,r5,80095b0 <_free_r+0x29c>
 800955c:	28c01704 	addi	r3,r5,92
 8009560:	18c7883a 	add	r3,r3,r3
 8009564:	294016c4 	addi	r5,r5,91
 8009568:	003fb406 	br	800943c <__alt_data_end+0xfc00943c>
 800956c:	280bd0ba 	srai	r5,r5,2
 8009570:	00c00044 	movi	r3,1
 8009574:	38800117 	ldw	r2,4(r7)
 8009578:	194a983a 	sll	r5,r3,r5
 800957c:	2007883a 	mov	r3,r4
 8009580:	2884b03a 	or	r2,r5,r2
 8009584:	38800115 	stw	r2,4(r7)
 8009588:	003fbb06 	br	8009478 <__alt_data_end+0xfc009478>
 800958c:	21800515 	stw	r6,20(r4)
 8009590:	21800415 	stw	r6,16(r4)
 8009594:	10c00054 	ori	r3,r2,1
 8009598:	31c00315 	stw	r7,12(r6)
 800959c:	31c00215 	stw	r7,8(r6)
 80095a0:	30c00115 	stw	r3,4(r6)
 80095a4:	308d883a 	add	r6,r6,r2
 80095a8:	30800015 	stw	r2,0(r6)
 80095ac:	003f9506 	br	8009404 <__alt_data_end+0xfc009404>
 80095b0:	00c01504 	movi	r3,84
 80095b4:	19400536 	bltu	r3,r5,80095cc <_free_r+0x2b8>
 80095b8:	100ad33a 	srli	r5,r2,12
 80095bc:	28c01bc4 	addi	r3,r5,111
 80095c0:	18c7883a 	add	r3,r3,r3
 80095c4:	29401b84 	addi	r5,r5,110
 80095c8:	003f9c06 	br	800943c <__alt_data_end+0xfc00943c>
 80095cc:	00c05504 	movi	r3,340
 80095d0:	19400536 	bltu	r3,r5,80095e8 <_free_r+0x2d4>
 80095d4:	100ad3fa 	srli	r5,r2,15
 80095d8:	28c01e04 	addi	r3,r5,120
 80095dc:	18c7883a 	add	r3,r3,r3
 80095e0:	29401dc4 	addi	r5,r5,119
 80095e4:	003f9506 	br	800943c <__alt_data_end+0xfc00943c>
 80095e8:	00c15504 	movi	r3,1364
 80095ec:	19400536 	bltu	r3,r5,8009604 <_free_r+0x2f0>
 80095f0:	100ad4ba 	srli	r5,r2,18
 80095f4:	28c01f44 	addi	r3,r5,125
 80095f8:	18c7883a 	add	r3,r3,r3
 80095fc:	29401f04 	addi	r5,r5,124
 8009600:	003f8e06 	br	800943c <__alt_data_end+0xfc00943c>
 8009604:	00c03f84 	movi	r3,254
 8009608:	01401f84 	movi	r5,126
 800960c:	003f8b06 	br	800943c <__alt_data_end+0xfc00943c>
 8009610:	10c00054 	ori	r3,r2,1
 8009614:	30c00115 	stw	r3,4(r6)
 8009618:	308d883a 	add	r6,r6,r2
 800961c:	30800015 	stw	r2,0(r6)
 8009620:	003f7806 	br	8009404 <__alt_data_end+0xfc009404>

08009624 <_lseek_r>:
 8009624:	defffd04 	addi	sp,sp,-12
 8009628:	2805883a 	mov	r2,r5
 800962c:	dc000015 	stw	r16,0(sp)
 8009630:	04020074 	movhi	r16,2049
 8009634:	dc400115 	stw	r17,4(sp)
 8009638:	300b883a 	mov	r5,r6
 800963c:	8403ce04 	addi	r16,r16,3896
 8009640:	2023883a 	mov	r17,r4
 8009644:	380d883a 	mov	r6,r7
 8009648:	1009883a 	mov	r4,r2
 800964c:	dfc00215 	stw	ra,8(sp)
 8009650:	80000015 	stw	zero,0(r16)
 8009654:	8009d7c0 	call	8009d7c <lseek>
 8009658:	00ffffc4 	movi	r3,-1
 800965c:	10c00526 	beq	r2,r3,8009674 <_lseek_r+0x50>
 8009660:	dfc00217 	ldw	ra,8(sp)
 8009664:	dc400117 	ldw	r17,4(sp)
 8009668:	dc000017 	ldw	r16,0(sp)
 800966c:	dec00304 	addi	sp,sp,12
 8009670:	f800283a 	ret
 8009674:	80c00017 	ldw	r3,0(r16)
 8009678:	183ff926 	beq	r3,zero,8009660 <__alt_data_end+0xfc009660>
 800967c:	88c00015 	stw	r3,0(r17)
 8009680:	003ff706 	br	8009660 <__alt_data_end+0xfc009660>

08009684 <__smakebuf_r>:
 8009684:	2880030b 	ldhu	r2,12(r5)
 8009688:	10c0008c 	andi	r3,r2,2
 800968c:	1800411e 	bne	r3,zero,8009794 <__smakebuf_r+0x110>
 8009690:	deffec04 	addi	sp,sp,-80
 8009694:	dc000f15 	stw	r16,60(sp)
 8009698:	2821883a 	mov	r16,r5
 800969c:	2940038f 	ldh	r5,14(r5)
 80096a0:	dc401015 	stw	r17,64(sp)
 80096a4:	dfc01315 	stw	ra,76(sp)
 80096a8:	dcc01215 	stw	r19,72(sp)
 80096ac:	dc801115 	stw	r18,68(sp)
 80096b0:	2023883a 	mov	r17,r4
 80096b4:	28001c16 	blt	r5,zero,8009728 <__smakebuf_r+0xa4>
 80096b8:	d80d883a 	mov	r6,sp
 80096bc:	80098a00 	call	80098a0 <_fstat_r>
 80096c0:	10001816 	blt	r2,zero,8009724 <__smakebuf_r+0xa0>
 80096c4:	d8800117 	ldw	r2,4(sp)
 80096c8:	00e00014 	movui	r3,32768
 80096cc:	10bc000c 	andi	r2,r2,61440
 80096d0:	14c80020 	cmpeqi	r19,r2,8192
 80096d4:	10c03726 	beq	r2,r3,80097b4 <__smakebuf_r+0x130>
 80096d8:	80c0030b 	ldhu	r3,12(r16)
 80096dc:	18c20014 	ori	r3,r3,2048
 80096e0:	80c0030d 	sth	r3,12(r16)
 80096e4:	00c80004 	movi	r3,8192
 80096e8:	10c0521e 	bne	r2,r3,8009834 <__smakebuf_r+0x1b0>
 80096ec:	8140038f 	ldh	r5,14(r16)
 80096f0:	8809883a 	mov	r4,r17
 80096f4:	80098fc0 	call	80098fc <_isatty_r>
 80096f8:	10004c26 	beq	r2,zero,800982c <__smakebuf_r+0x1a8>
 80096fc:	8080030b 	ldhu	r2,12(r16)
 8009700:	80c010c4 	addi	r3,r16,67
 8009704:	80c00015 	stw	r3,0(r16)
 8009708:	10800054 	ori	r2,r2,1
 800970c:	8080030d 	sth	r2,12(r16)
 8009710:	00800044 	movi	r2,1
 8009714:	80c00415 	stw	r3,16(r16)
 8009718:	80800515 	stw	r2,20(r16)
 800971c:	04810004 	movi	r18,1024
 8009720:	00000706 	br	8009740 <__smakebuf_r+0xbc>
 8009724:	8080030b 	ldhu	r2,12(r16)
 8009728:	10c0200c 	andi	r3,r2,128
 800972c:	18001f1e 	bne	r3,zero,80097ac <__smakebuf_r+0x128>
 8009730:	04810004 	movi	r18,1024
 8009734:	10820014 	ori	r2,r2,2048
 8009738:	8080030d 	sth	r2,12(r16)
 800973c:	0027883a 	mov	r19,zero
 8009740:	900b883a 	mov	r5,r18
 8009744:	8809883a 	mov	r4,r17
 8009748:	800788c0 	call	800788c <_malloc_r>
 800974c:	10002c26 	beq	r2,zero,8009800 <__smakebuf_r+0x17c>
 8009750:	80c0030b 	ldhu	r3,12(r16)
 8009754:	01020034 	movhi	r4,2048
 8009758:	211bac04 	addi	r4,r4,28336
 800975c:	89000f15 	stw	r4,60(r17)
 8009760:	18c02014 	ori	r3,r3,128
 8009764:	80c0030d 	sth	r3,12(r16)
 8009768:	80800015 	stw	r2,0(r16)
 800976c:	80800415 	stw	r2,16(r16)
 8009770:	84800515 	stw	r18,20(r16)
 8009774:	98001a1e 	bne	r19,zero,80097e0 <__smakebuf_r+0x15c>
 8009778:	dfc01317 	ldw	ra,76(sp)
 800977c:	dcc01217 	ldw	r19,72(sp)
 8009780:	dc801117 	ldw	r18,68(sp)
 8009784:	dc401017 	ldw	r17,64(sp)
 8009788:	dc000f17 	ldw	r16,60(sp)
 800978c:	dec01404 	addi	sp,sp,80
 8009790:	f800283a 	ret
 8009794:	288010c4 	addi	r2,r5,67
 8009798:	28800015 	stw	r2,0(r5)
 800979c:	28800415 	stw	r2,16(r5)
 80097a0:	00800044 	movi	r2,1
 80097a4:	28800515 	stw	r2,20(r5)
 80097a8:	f800283a 	ret
 80097ac:	04801004 	movi	r18,64
 80097b0:	003fe006 	br	8009734 <__alt_data_end+0xfc009734>
 80097b4:	81000a17 	ldw	r4,40(r16)
 80097b8:	00c20074 	movhi	r3,2049
 80097bc:	18e2f604 	addi	r3,r3,-29736
 80097c0:	20ffc51e 	bne	r4,r3,80096d8 <__alt_data_end+0xfc0096d8>
 80097c4:	8080030b 	ldhu	r2,12(r16)
 80097c8:	04810004 	movi	r18,1024
 80097cc:	84801315 	stw	r18,76(r16)
 80097d0:	1484b03a 	or	r2,r2,r18
 80097d4:	8080030d 	sth	r2,12(r16)
 80097d8:	0027883a 	mov	r19,zero
 80097dc:	003fd806 	br	8009740 <__alt_data_end+0xfc009740>
 80097e0:	8140038f 	ldh	r5,14(r16)
 80097e4:	8809883a 	mov	r4,r17
 80097e8:	80098fc0 	call	80098fc <_isatty_r>
 80097ec:	103fe226 	beq	r2,zero,8009778 <__alt_data_end+0xfc009778>
 80097f0:	8080030b 	ldhu	r2,12(r16)
 80097f4:	10800054 	ori	r2,r2,1
 80097f8:	8080030d 	sth	r2,12(r16)
 80097fc:	003fde06 	br	8009778 <__alt_data_end+0xfc009778>
 8009800:	8080030b 	ldhu	r2,12(r16)
 8009804:	10c0800c 	andi	r3,r2,512
 8009808:	183fdb1e 	bne	r3,zero,8009778 <__alt_data_end+0xfc009778>
 800980c:	10800094 	ori	r2,r2,2
 8009810:	80c010c4 	addi	r3,r16,67
 8009814:	8080030d 	sth	r2,12(r16)
 8009818:	00800044 	movi	r2,1
 800981c:	80c00015 	stw	r3,0(r16)
 8009820:	80c00415 	stw	r3,16(r16)
 8009824:	80800515 	stw	r2,20(r16)
 8009828:	003fd306 	br	8009778 <__alt_data_end+0xfc009778>
 800982c:	04810004 	movi	r18,1024
 8009830:	003fc306 	br	8009740 <__alt_data_end+0xfc009740>
 8009834:	0027883a 	mov	r19,zero
 8009838:	04810004 	movi	r18,1024
 800983c:	003fc006 	br	8009740 <__alt_data_end+0xfc009740>

08009840 <_read_r>:
 8009840:	defffd04 	addi	sp,sp,-12
 8009844:	2805883a 	mov	r2,r5
 8009848:	dc000015 	stw	r16,0(sp)
 800984c:	04020074 	movhi	r16,2049
 8009850:	dc400115 	stw	r17,4(sp)
 8009854:	300b883a 	mov	r5,r6
 8009858:	8403ce04 	addi	r16,r16,3896
 800985c:	2023883a 	mov	r17,r4
 8009860:	380d883a 	mov	r6,r7
 8009864:	1009883a 	mov	r4,r2
 8009868:	dfc00215 	stw	ra,8(sp)
 800986c:	80000015 	stw	zero,0(r16)
 8009870:	8009f500 	call	8009f50 <read>
 8009874:	00ffffc4 	movi	r3,-1
 8009878:	10c00526 	beq	r2,r3,8009890 <_read_r+0x50>
 800987c:	dfc00217 	ldw	ra,8(sp)
 8009880:	dc400117 	ldw	r17,4(sp)
 8009884:	dc000017 	ldw	r16,0(sp)
 8009888:	dec00304 	addi	sp,sp,12
 800988c:	f800283a 	ret
 8009890:	80c00017 	ldw	r3,0(r16)
 8009894:	183ff926 	beq	r3,zero,800987c <__alt_data_end+0xfc00987c>
 8009898:	88c00015 	stw	r3,0(r17)
 800989c:	003ff706 	br	800987c <__alt_data_end+0xfc00987c>

080098a0 <_fstat_r>:
 80098a0:	defffd04 	addi	sp,sp,-12
 80098a4:	2805883a 	mov	r2,r5
 80098a8:	dc000015 	stw	r16,0(sp)
 80098ac:	04020074 	movhi	r16,2049
 80098b0:	dc400115 	stw	r17,4(sp)
 80098b4:	8403ce04 	addi	r16,r16,3896
 80098b8:	2023883a 	mov	r17,r4
 80098bc:	300b883a 	mov	r5,r6
 80098c0:	1009883a 	mov	r4,r2
 80098c4:	dfc00215 	stw	ra,8(sp)
 80098c8:	80000015 	stw	zero,0(r16)
 80098cc:	8009ac40 	call	8009ac4 <fstat>
 80098d0:	00ffffc4 	movi	r3,-1
 80098d4:	10c00526 	beq	r2,r3,80098ec <_fstat_r+0x4c>
 80098d8:	dfc00217 	ldw	ra,8(sp)
 80098dc:	dc400117 	ldw	r17,4(sp)
 80098e0:	dc000017 	ldw	r16,0(sp)
 80098e4:	dec00304 	addi	sp,sp,12
 80098e8:	f800283a 	ret
 80098ec:	80c00017 	ldw	r3,0(r16)
 80098f0:	183ff926 	beq	r3,zero,80098d8 <__alt_data_end+0xfc0098d8>
 80098f4:	88c00015 	stw	r3,0(r17)
 80098f8:	003ff706 	br	80098d8 <__alt_data_end+0xfc0098d8>

080098fc <_isatty_r>:
 80098fc:	defffd04 	addi	sp,sp,-12
 8009900:	dc000015 	stw	r16,0(sp)
 8009904:	04020074 	movhi	r16,2049
 8009908:	dc400115 	stw	r17,4(sp)
 800990c:	8403ce04 	addi	r16,r16,3896
 8009910:	2023883a 	mov	r17,r4
 8009914:	2809883a 	mov	r4,r5
 8009918:	dfc00215 	stw	ra,8(sp)
 800991c:	80000015 	stw	zero,0(r16)
 8009920:	8009bb00 	call	8009bb0 <isatty>
 8009924:	00ffffc4 	movi	r3,-1
 8009928:	10c00526 	beq	r2,r3,8009940 <_isatty_r+0x44>
 800992c:	dfc00217 	ldw	ra,8(sp)
 8009930:	dc400117 	ldw	r17,4(sp)
 8009934:	dc000017 	ldw	r16,0(sp)
 8009938:	dec00304 	addi	sp,sp,12
 800993c:	f800283a 	ret
 8009940:	80c00017 	ldw	r3,0(r16)
 8009944:	183ff926 	beq	r3,zero,800992c <__alt_data_end+0xfc00992c>
 8009948:	88c00015 	stw	r3,0(r17)
 800994c:	003ff706 	br	800992c <__alt_data_end+0xfc00992c>

08009950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009950:	defffe04 	addi	sp,sp,-8
 8009954:	dfc00115 	stw	ra,4(sp)
 8009958:	df000015 	stw	fp,0(sp)
 800995c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8009960:	d0a00a17 	ldw	r2,-32728(gp)
 8009964:	10000326 	beq	r2,zero,8009974 <alt_get_errno+0x24>
 8009968:	d0a00a17 	ldw	r2,-32728(gp)
 800996c:	103ee83a 	callr	r2
 8009970:	00000106 	br	8009978 <alt_get_errno+0x28>
 8009974:	d0a6e404 	addi	r2,gp,-25712
}
 8009978:	e037883a 	mov	sp,fp
 800997c:	dfc00117 	ldw	ra,4(sp)
 8009980:	df000017 	ldw	fp,0(sp)
 8009984:	dec00204 	addi	sp,sp,8
 8009988:	f800283a 	ret

0800998c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800998c:	defffb04 	addi	sp,sp,-20
 8009990:	dfc00415 	stw	ra,16(sp)
 8009994:	df000315 	stw	fp,12(sp)
 8009998:	df000304 	addi	fp,sp,12
 800999c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80099a0:	e0bfff17 	ldw	r2,-4(fp)
 80099a4:	10000616 	blt	r2,zero,80099c0 <close+0x34>
 80099a8:	e0bfff17 	ldw	r2,-4(fp)
 80099ac:	10c00324 	muli	r3,r2,12
 80099b0:	00820074 	movhi	r2,2049
 80099b4:	10b84404 	addi	r2,r2,-7920
 80099b8:	1885883a 	add	r2,r3,r2
 80099bc:	00000106 	br	80099c4 <close+0x38>
 80099c0:	0005883a 	mov	r2,zero
 80099c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80099c8:	e0bffd17 	ldw	r2,-12(fp)
 80099cc:	10001926 	beq	r2,zero,8009a34 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80099d0:	e0bffd17 	ldw	r2,-12(fp)
 80099d4:	10800017 	ldw	r2,0(r2)
 80099d8:	10800417 	ldw	r2,16(r2)
 80099dc:	10000626 	beq	r2,zero,80099f8 <close+0x6c>
 80099e0:	e0bffd17 	ldw	r2,-12(fp)
 80099e4:	10800017 	ldw	r2,0(r2)
 80099e8:	10800417 	ldw	r2,16(r2)
 80099ec:	e13ffd17 	ldw	r4,-12(fp)
 80099f0:	103ee83a 	callr	r2
 80099f4:	00000106 	br	80099fc <close+0x70>
 80099f8:	0005883a 	mov	r2,zero
 80099fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8009a00:	e13fff17 	ldw	r4,-4(fp)
 8009a04:	800a04c0 	call	800a04c <alt_release_fd>
    if (rval < 0)
 8009a08:	e0bffe17 	ldw	r2,-8(fp)
 8009a0c:	1000070e 	bge	r2,zero,8009a2c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8009a10:	80099500 	call	8009950 <alt_get_errno>
 8009a14:	1007883a 	mov	r3,r2
 8009a18:	e0bffe17 	ldw	r2,-8(fp)
 8009a1c:	0085c83a 	sub	r2,zero,r2
 8009a20:	18800015 	stw	r2,0(r3)
      return -1;
 8009a24:	00bfffc4 	movi	r2,-1
 8009a28:	00000706 	br	8009a48 <close+0xbc>
    }
    return 0;
 8009a2c:	0005883a 	mov	r2,zero
 8009a30:	00000506 	br	8009a48 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8009a34:	80099500 	call	8009950 <alt_get_errno>
 8009a38:	1007883a 	mov	r3,r2
 8009a3c:	00801444 	movi	r2,81
 8009a40:	18800015 	stw	r2,0(r3)
    return -1;
 8009a44:	00bfffc4 	movi	r2,-1
  }
}
 8009a48:	e037883a 	mov	sp,fp
 8009a4c:	dfc00117 	ldw	ra,4(sp)
 8009a50:	df000017 	ldw	fp,0(sp)
 8009a54:	dec00204 	addi	sp,sp,8
 8009a58:	f800283a 	ret

08009a5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8009a5c:	defffc04 	addi	sp,sp,-16
 8009a60:	df000315 	stw	fp,12(sp)
 8009a64:	df000304 	addi	fp,sp,12
 8009a68:	e13ffd15 	stw	r4,-12(fp)
 8009a6c:	e17ffe15 	stw	r5,-8(fp)
 8009a70:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8009a74:	e0bfff17 	ldw	r2,-4(fp)
}
 8009a78:	e037883a 	mov	sp,fp
 8009a7c:	df000017 	ldw	fp,0(sp)
 8009a80:	dec00104 	addi	sp,sp,4
 8009a84:	f800283a 	ret

08009a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009a88:	defffe04 	addi	sp,sp,-8
 8009a8c:	dfc00115 	stw	ra,4(sp)
 8009a90:	df000015 	stw	fp,0(sp)
 8009a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8009a98:	d0a00a17 	ldw	r2,-32728(gp)
 8009a9c:	10000326 	beq	r2,zero,8009aac <alt_get_errno+0x24>
 8009aa0:	d0a00a17 	ldw	r2,-32728(gp)
 8009aa4:	103ee83a 	callr	r2
 8009aa8:	00000106 	br	8009ab0 <alt_get_errno+0x28>
 8009aac:	d0a6e404 	addi	r2,gp,-25712
}
 8009ab0:	e037883a 	mov	sp,fp
 8009ab4:	dfc00117 	ldw	ra,4(sp)
 8009ab8:	df000017 	ldw	fp,0(sp)
 8009abc:	dec00204 	addi	sp,sp,8
 8009ac0:	f800283a 	ret

08009ac4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8009ac4:	defffb04 	addi	sp,sp,-20
 8009ac8:	dfc00415 	stw	ra,16(sp)
 8009acc:	df000315 	stw	fp,12(sp)
 8009ad0:	df000304 	addi	fp,sp,12
 8009ad4:	e13ffe15 	stw	r4,-8(fp)
 8009ad8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8009adc:	e0bffe17 	ldw	r2,-8(fp)
 8009ae0:	10000616 	blt	r2,zero,8009afc <fstat+0x38>
 8009ae4:	e0bffe17 	ldw	r2,-8(fp)
 8009ae8:	10c00324 	muli	r3,r2,12
 8009aec:	00820074 	movhi	r2,2049
 8009af0:	10b84404 	addi	r2,r2,-7920
 8009af4:	1885883a 	add	r2,r3,r2
 8009af8:	00000106 	br	8009b00 <fstat+0x3c>
 8009afc:	0005883a 	mov	r2,zero
 8009b00:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8009b04:	e0bffd17 	ldw	r2,-12(fp)
 8009b08:	10001026 	beq	r2,zero,8009b4c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8009b0c:	e0bffd17 	ldw	r2,-12(fp)
 8009b10:	10800017 	ldw	r2,0(r2)
 8009b14:	10800817 	ldw	r2,32(r2)
 8009b18:	10000726 	beq	r2,zero,8009b38 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8009b1c:	e0bffd17 	ldw	r2,-12(fp)
 8009b20:	10800017 	ldw	r2,0(r2)
 8009b24:	10800817 	ldw	r2,32(r2)
 8009b28:	e17fff17 	ldw	r5,-4(fp)
 8009b2c:	e13ffd17 	ldw	r4,-12(fp)
 8009b30:	103ee83a 	callr	r2
 8009b34:	00000a06 	br	8009b60 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8009b38:	e0bfff17 	ldw	r2,-4(fp)
 8009b3c:	00c80004 	movi	r3,8192
 8009b40:	10c00115 	stw	r3,4(r2)
      return 0;
 8009b44:	0005883a 	mov	r2,zero
 8009b48:	00000506 	br	8009b60 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8009b4c:	8009a880 	call	8009a88 <alt_get_errno>
 8009b50:	1007883a 	mov	r3,r2
 8009b54:	00801444 	movi	r2,81
 8009b58:	18800015 	stw	r2,0(r3)
    return -1;
 8009b5c:	00bfffc4 	movi	r2,-1
  }
}
 8009b60:	e037883a 	mov	sp,fp
 8009b64:	dfc00117 	ldw	ra,4(sp)
 8009b68:	df000017 	ldw	fp,0(sp)
 8009b6c:	dec00204 	addi	sp,sp,8
 8009b70:	f800283a 	ret

08009b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009b74:	defffe04 	addi	sp,sp,-8
 8009b78:	dfc00115 	stw	ra,4(sp)
 8009b7c:	df000015 	stw	fp,0(sp)
 8009b80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8009b84:	d0a00a17 	ldw	r2,-32728(gp)
 8009b88:	10000326 	beq	r2,zero,8009b98 <alt_get_errno+0x24>
 8009b8c:	d0a00a17 	ldw	r2,-32728(gp)
 8009b90:	103ee83a 	callr	r2
 8009b94:	00000106 	br	8009b9c <alt_get_errno+0x28>
 8009b98:	d0a6e404 	addi	r2,gp,-25712
}
 8009b9c:	e037883a 	mov	sp,fp
 8009ba0:	dfc00117 	ldw	ra,4(sp)
 8009ba4:	df000017 	ldw	fp,0(sp)
 8009ba8:	dec00204 	addi	sp,sp,8
 8009bac:	f800283a 	ret

08009bb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8009bb0:	deffed04 	addi	sp,sp,-76
 8009bb4:	dfc01215 	stw	ra,72(sp)
 8009bb8:	df001115 	stw	fp,68(sp)
 8009bbc:	df001104 	addi	fp,sp,68
 8009bc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8009bc4:	e0bfff17 	ldw	r2,-4(fp)
 8009bc8:	10000616 	blt	r2,zero,8009be4 <isatty+0x34>
 8009bcc:	e0bfff17 	ldw	r2,-4(fp)
 8009bd0:	10c00324 	muli	r3,r2,12
 8009bd4:	00820074 	movhi	r2,2049
 8009bd8:	10b84404 	addi	r2,r2,-7920
 8009bdc:	1885883a 	add	r2,r3,r2
 8009be0:	00000106 	br	8009be8 <isatty+0x38>
 8009be4:	0005883a 	mov	r2,zero
 8009be8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8009bec:	e0bfef17 	ldw	r2,-68(fp)
 8009bf0:	10000e26 	beq	r2,zero,8009c2c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8009bf4:	e0bfef17 	ldw	r2,-68(fp)
 8009bf8:	10800017 	ldw	r2,0(r2)
 8009bfc:	10800817 	ldw	r2,32(r2)
 8009c00:	1000021e 	bne	r2,zero,8009c0c <isatty+0x5c>
    {
      return 1;
 8009c04:	00800044 	movi	r2,1
 8009c08:	00000d06 	br	8009c40 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8009c0c:	e0bff004 	addi	r2,fp,-64
 8009c10:	100b883a 	mov	r5,r2
 8009c14:	e13fff17 	ldw	r4,-4(fp)
 8009c18:	8009ac40 	call	8009ac4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8009c1c:	e0bff117 	ldw	r2,-60(fp)
 8009c20:	10880020 	cmpeqi	r2,r2,8192
 8009c24:	10803fcc 	andi	r2,r2,255
 8009c28:	00000506 	br	8009c40 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8009c2c:	8009b740 	call	8009b74 <alt_get_errno>
 8009c30:	1007883a 	mov	r3,r2
 8009c34:	00801444 	movi	r2,81
 8009c38:	18800015 	stw	r2,0(r3)
    return 0;
 8009c3c:	0005883a 	mov	r2,zero
  }
}
 8009c40:	e037883a 	mov	sp,fp
 8009c44:	dfc00117 	ldw	ra,4(sp)
 8009c48:	df000017 	ldw	fp,0(sp)
 8009c4c:	dec00204 	addi	sp,sp,8
 8009c50:	f800283a 	ret

08009c54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8009c54:	defffc04 	addi	sp,sp,-16
 8009c58:	df000315 	stw	fp,12(sp)
 8009c5c:	df000304 	addi	fp,sp,12
 8009c60:	e13ffd15 	stw	r4,-12(fp)
 8009c64:	e17ffe15 	stw	r5,-8(fp)
 8009c68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8009c6c:	e0fffe17 	ldw	r3,-8(fp)
 8009c70:	e0bffd17 	ldw	r2,-12(fp)
 8009c74:	18800c26 	beq	r3,r2,8009ca8 <alt_load_section+0x54>
  {
    while( to != end )
 8009c78:	00000806 	br	8009c9c <alt_load_section+0x48>
    {
      *to++ = *from++;
 8009c7c:	e0bffe17 	ldw	r2,-8(fp)
 8009c80:	10c00104 	addi	r3,r2,4
 8009c84:	e0fffe15 	stw	r3,-8(fp)
 8009c88:	e0fffd17 	ldw	r3,-12(fp)
 8009c8c:	19000104 	addi	r4,r3,4
 8009c90:	e13ffd15 	stw	r4,-12(fp)
 8009c94:	18c00017 	ldw	r3,0(r3)
 8009c98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8009c9c:	e0fffe17 	ldw	r3,-8(fp)
 8009ca0:	e0bfff17 	ldw	r2,-4(fp)
 8009ca4:	18bff51e 	bne	r3,r2,8009c7c <__alt_data_end+0xfc009c7c>
    {
      *to++ = *from++;
    }
  }
}
 8009ca8:	0001883a 	nop
 8009cac:	e037883a 	mov	sp,fp
 8009cb0:	df000017 	ldw	fp,0(sp)
 8009cb4:	dec00104 	addi	sp,sp,4
 8009cb8:	f800283a 	ret

08009cbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8009cbc:	defffe04 	addi	sp,sp,-8
 8009cc0:	dfc00115 	stw	ra,4(sp)
 8009cc4:	df000015 	stw	fp,0(sp)
 8009cc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8009ccc:	01820074 	movhi	r6,2049
 8009cd0:	31bcfd04 	addi	r6,r6,-3084
 8009cd4:	01420074 	movhi	r5,2049
 8009cd8:	29762f04 	addi	r5,r5,-10052
 8009cdc:	01020074 	movhi	r4,2049
 8009ce0:	213cfd04 	addi	r4,r4,-3084
 8009ce4:	8009c540 	call	8009c54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8009ce8:	018000b4 	movhi	r6,2
 8009cec:	31809204 	addi	r6,r6,584
 8009cf0:	014000b4 	movhi	r5,2
 8009cf4:	29400804 	addi	r5,r5,32
 8009cf8:	01020034 	movhi	r4,2048
 8009cfc:	21000004 	addi	r4,r4,0
 8009d00:	8009c540 	call	8009c54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8009d04:	01820074 	movhi	r6,2049
 8009d08:	31b62f04 	addi	r6,r6,-10052
 8009d0c:	01420074 	movhi	r5,2049
 8009d10:	29753704 	addi	r5,r5,-11044
 8009d14:	01020074 	movhi	r4,2049
 8009d18:	21353704 	addi	r4,r4,-11044
 8009d1c:	8009c540 	call	8009c54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8009d20:	800c4e80 	call	800c4e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8009d24:	800c7600 	call	800c760 <alt_icache_flush_all>
}
 8009d28:	0001883a 	nop
 8009d2c:	e037883a 	mov	sp,fp
 8009d30:	dfc00117 	ldw	ra,4(sp)
 8009d34:	df000017 	ldw	fp,0(sp)
 8009d38:	dec00204 	addi	sp,sp,8
 8009d3c:	f800283a 	ret

08009d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009d40:	defffe04 	addi	sp,sp,-8
 8009d44:	dfc00115 	stw	ra,4(sp)
 8009d48:	df000015 	stw	fp,0(sp)
 8009d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8009d50:	d0a00a17 	ldw	r2,-32728(gp)
 8009d54:	10000326 	beq	r2,zero,8009d64 <alt_get_errno+0x24>
 8009d58:	d0a00a17 	ldw	r2,-32728(gp)
 8009d5c:	103ee83a 	callr	r2
 8009d60:	00000106 	br	8009d68 <alt_get_errno+0x28>
 8009d64:	d0a6e404 	addi	r2,gp,-25712
}
 8009d68:	e037883a 	mov	sp,fp
 8009d6c:	dfc00117 	ldw	ra,4(sp)
 8009d70:	df000017 	ldw	fp,0(sp)
 8009d74:	dec00204 	addi	sp,sp,8
 8009d78:	f800283a 	ret

08009d7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8009d7c:	defff904 	addi	sp,sp,-28
 8009d80:	dfc00615 	stw	ra,24(sp)
 8009d84:	df000515 	stw	fp,20(sp)
 8009d88:	df000504 	addi	fp,sp,20
 8009d8c:	e13ffd15 	stw	r4,-12(fp)
 8009d90:	e17ffe15 	stw	r5,-8(fp)
 8009d94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8009d98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8009d9c:	e0bffd17 	ldw	r2,-12(fp)
 8009da0:	10000616 	blt	r2,zero,8009dbc <lseek+0x40>
 8009da4:	e0bffd17 	ldw	r2,-12(fp)
 8009da8:	10c00324 	muli	r3,r2,12
 8009dac:	00820074 	movhi	r2,2049
 8009db0:	10b84404 	addi	r2,r2,-7920
 8009db4:	1885883a 	add	r2,r3,r2
 8009db8:	00000106 	br	8009dc0 <lseek+0x44>
 8009dbc:	0005883a 	mov	r2,zero
 8009dc0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8009dc4:	e0bffc17 	ldw	r2,-16(fp)
 8009dc8:	10001026 	beq	r2,zero,8009e0c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8009dcc:	e0bffc17 	ldw	r2,-16(fp)
 8009dd0:	10800017 	ldw	r2,0(r2)
 8009dd4:	10800717 	ldw	r2,28(r2)
 8009dd8:	10000926 	beq	r2,zero,8009e00 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8009ddc:	e0bffc17 	ldw	r2,-16(fp)
 8009de0:	10800017 	ldw	r2,0(r2)
 8009de4:	10800717 	ldw	r2,28(r2)
 8009de8:	e1bfff17 	ldw	r6,-4(fp)
 8009dec:	e17ffe17 	ldw	r5,-8(fp)
 8009df0:	e13ffc17 	ldw	r4,-16(fp)
 8009df4:	103ee83a 	callr	r2
 8009df8:	e0bffb15 	stw	r2,-20(fp)
 8009dfc:	00000506 	br	8009e14 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8009e00:	00bfde84 	movi	r2,-134
 8009e04:	e0bffb15 	stw	r2,-20(fp)
 8009e08:	00000206 	br	8009e14 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8009e0c:	00bfebc4 	movi	r2,-81
 8009e10:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8009e14:	e0bffb17 	ldw	r2,-20(fp)
 8009e18:	1000070e 	bge	r2,zero,8009e38 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8009e1c:	8009d400 	call	8009d40 <alt_get_errno>
 8009e20:	1007883a 	mov	r3,r2
 8009e24:	e0bffb17 	ldw	r2,-20(fp)
 8009e28:	0085c83a 	sub	r2,zero,r2
 8009e2c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8009e30:	00bfffc4 	movi	r2,-1
 8009e34:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8009e38:	e0bffb17 	ldw	r2,-20(fp)
}
 8009e3c:	e037883a 	mov	sp,fp
 8009e40:	dfc00117 	ldw	ra,4(sp)
 8009e44:	df000017 	ldw	fp,0(sp)
 8009e48:	dec00204 	addi	sp,sp,8
 8009e4c:	f800283a 	ret

08009e50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8009e50:	defffd04 	addi	sp,sp,-12
 8009e54:	dfc00215 	stw	ra,8(sp)
 8009e58:	df000115 	stw	fp,4(sp)
 8009e5c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8009e60:	0009883a 	mov	r4,zero
 8009e64:	800a39c0 	call	800a39c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8009e68:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8009e6c:	800a3d40 	call	800a3d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8009e70:	01820074 	movhi	r6,2049
 8009e74:	31b60e04 	addi	r6,r6,-10184
 8009e78:	01420074 	movhi	r5,2049
 8009e7c:	29760e04 	addi	r5,r5,-10184
 8009e80:	01020074 	movhi	r4,2049
 8009e84:	21360e04 	addi	r4,r4,-10184
 8009e88:	800c8580 	call	800c858 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8009e8c:	800c6100 	call	800c610 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8009e90:	01020074 	movhi	r4,2049
 8009e94:	21319c04 	addi	r4,r4,-14736
 8009e98:	800d1480 	call	800d148 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8009e9c:	d0a6e517 	ldw	r2,-25708(gp)
 8009ea0:	d0e6e617 	ldw	r3,-25704(gp)
 8009ea4:	d126e717 	ldw	r4,-25700(gp)
 8009ea8:	200d883a 	mov	r6,r4
 8009eac:	180b883a 	mov	r5,r3
 8009eb0:	1009883a 	mov	r4,r2
 8009eb4:	80002740 	call	8000274 <main>
 8009eb8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8009ebc:	01000044 	movi	r4,1
 8009ec0:	800998c0 	call	800998c <close>
  exit (result);
 8009ec4:	e13fff17 	ldw	r4,-4(fp)
 8009ec8:	800d15c0 	call	800d15c <exit>

08009ecc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8009ecc:	defffe04 	addi	sp,sp,-8
 8009ed0:	df000115 	stw	fp,4(sp)
 8009ed4:	df000104 	addi	fp,sp,4
 8009ed8:	e13fff15 	stw	r4,-4(fp)
}
 8009edc:	0001883a 	nop
 8009ee0:	e037883a 	mov	sp,fp
 8009ee4:	df000017 	ldw	fp,0(sp)
 8009ee8:	dec00104 	addi	sp,sp,4
 8009eec:	f800283a 	ret

08009ef0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8009ef0:	defffe04 	addi	sp,sp,-8
 8009ef4:	df000115 	stw	fp,4(sp)
 8009ef8:	df000104 	addi	fp,sp,4
 8009efc:	e13fff15 	stw	r4,-4(fp)
}
 8009f00:	0001883a 	nop
 8009f04:	e037883a 	mov	sp,fp
 8009f08:	df000017 	ldw	fp,0(sp)
 8009f0c:	dec00104 	addi	sp,sp,4
 8009f10:	f800283a 	ret

08009f14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8009f14:	defffe04 	addi	sp,sp,-8
 8009f18:	dfc00115 	stw	ra,4(sp)
 8009f1c:	df000015 	stw	fp,0(sp)
 8009f20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8009f24:	d0a00a17 	ldw	r2,-32728(gp)
 8009f28:	10000326 	beq	r2,zero,8009f38 <alt_get_errno+0x24>
 8009f2c:	d0a00a17 	ldw	r2,-32728(gp)
 8009f30:	103ee83a 	callr	r2
 8009f34:	00000106 	br	8009f3c <alt_get_errno+0x28>
 8009f38:	d0a6e404 	addi	r2,gp,-25712
}
 8009f3c:	e037883a 	mov	sp,fp
 8009f40:	dfc00117 	ldw	ra,4(sp)
 8009f44:	df000017 	ldw	fp,0(sp)
 8009f48:	dec00204 	addi	sp,sp,8
 8009f4c:	f800283a 	ret

08009f50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8009f50:	defff904 	addi	sp,sp,-28
 8009f54:	dfc00615 	stw	ra,24(sp)
 8009f58:	df000515 	stw	fp,20(sp)
 8009f5c:	df000504 	addi	fp,sp,20
 8009f60:	e13ffd15 	stw	r4,-12(fp)
 8009f64:	e17ffe15 	stw	r5,-8(fp)
 8009f68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8009f6c:	e0bffd17 	ldw	r2,-12(fp)
 8009f70:	10000616 	blt	r2,zero,8009f8c <read+0x3c>
 8009f74:	e0bffd17 	ldw	r2,-12(fp)
 8009f78:	10c00324 	muli	r3,r2,12
 8009f7c:	00820074 	movhi	r2,2049
 8009f80:	10b84404 	addi	r2,r2,-7920
 8009f84:	1885883a 	add	r2,r3,r2
 8009f88:	00000106 	br	8009f90 <read+0x40>
 8009f8c:	0005883a 	mov	r2,zero
 8009f90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8009f94:	e0bffb17 	ldw	r2,-20(fp)
 8009f98:	10002226 	beq	r2,zero,800a024 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8009f9c:	e0bffb17 	ldw	r2,-20(fp)
 8009fa0:	10800217 	ldw	r2,8(r2)
 8009fa4:	108000cc 	andi	r2,r2,3
 8009fa8:	10800060 	cmpeqi	r2,r2,1
 8009fac:	1000181e 	bne	r2,zero,800a010 <read+0xc0>
        (fd->dev->read))
 8009fb0:	e0bffb17 	ldw	r2,-20(fp)
 8009fb4:	10800017 	ldw	r2,0(r2)
 8009fb8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8009fbc:	10001426 	beq	r2,zero,800a010 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8009fc0:	e0bffb17 	ldw	r2,-20(fp)
 8009fc4:	10800017 	ldw	r2,0(r2)
 8009fc8:	10800517 	ldw	r2,20(r2)
 8009fcc:	e0ffff17 	ldw	r3,-4(fp)
 8009fd0:	180d883a 	mov	r6,r3
 8009fd4:	e17ffe17 	ldw	r5,-8(fp)
 8009fd8:	e13ffb17 	ldw	r4,-20(fp)
 8009fdc:	103ee83a 	callr	r2
 8009fe0:	e0bffc15 	stw	r2,-16(fp)
 8009fe4:	e0bffc17 	ldw	r2,-16(fp)
 8009fe8:	1000070e 	bge	r2,zero,800a008 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8009fec:	8009f140 	call	8009f14 <alt_get_errno>
 8009ff0:	1007883a 	mov	r3,r2
 8009ff4:	e0bffc17 	ldw	r2,-16(fp)
 8009ff8:	0085c83a 	sub	r2,zero,r2
 8009ffc:	18800015 	stw	r2,0(r3)
          return -1;
 800a000:	00bfffc4 	movi	r2,-1
 800a004:	00000c06 	br	800a038 <read+0xe8>
        }
        return rval;
 800a008:	e0bffc17 	ldw	r2,-16(fp)
 800a00c:	00000a06 	br	800a038 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800a010:	8009f140 	call	8009f14 <alt_get_errno>
 800a014:	1007883a 	mov	r3,r2
 800a018:	00800344 	movi	r2,13
 800a01c:	18800015 	stw	r2,0(r3)
 800a020:	00000406 	br	800a034 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800a024:	8009f140 	call	8009f14 <alt_get_errno>
 800a028:	1007883a 	mov	r3,r2
 800a02c:	00801444 	movi	r2,81
 800a030:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800a034:	00bfffc4 	movi	r2,-1
}
 800a038:	e037883a 	mov	sp,fp
 800a03c:	dfc00117 	ldw	ra,4(sp)
 800a040:	df000017 	ldw	fp,0(sp)
 800a044:	dec00204 	addi	sp,sp,8
 800a048:	f800283a 	ret

0800a04c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800a04c:	defffe04 	addi	sp,sp,-8
 800a050:	df000115 	stw	fp,4(sp)
 800a054:	df000104 	addi	fp,sp,4
 800a058:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800a05c:	e0bfff17 	ldw	r2,-4(fp)
 800a060:	108000d0 	cmplti	r2,r2,3
 800a064:	10000d1e 	bne	r2,zero,800a09c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800a068:	00820074 	movhi	r2,2049
 800a06c:	10b84404 	addi	r2,r2,-7920
 800a070:	e0ffff17 	ldw	r3,-4(fp)
 800a074:	18c00324 	muli	r3,r3,12
 800a078:	10c5883a 	add	r2,r2,r3
 800a07c:	10800204 	addi	r2,r2,8
 800a080:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800a084:	00820074 	movhi	r2,2049
 800a088:	10b84404 	addi	r2,r2,-7920
 800a08c:	e0ffff17 	ldw	r3,-4(fp)
 800a090:	18c00324 	muli	r3,r3,12
 800a094:	10c5883a 	add	r2,r2,r3
 800a098:	10000015 	stw	zero,0(r2)
  }
}
 800a09c:	0001883a 	nop
 800a0a0:	e037883a 	mov	sp,fp
 800a0a4:	df000017 	ldw	fp,0(sp)
 800a0a8:	dec00104 	addi	sp,sp,4
 800a0ac:	f800283a 	ret

0800a0b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800a0b0:	defff904 	addi	sp,sp,-28
 800a0b4:	df000615 	stw	fp,24(sp)
 800a0b8:	df000604 	addi	fp,sp,24
 800a0bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800a0c0:	0005303a 	rdctl	r2,status
 800a0c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800a0c8:	e0fffe17 	ldw	r3,-8(fp)
 800a0cc:	00bfff84 	movi	r2,-2
 800a0d0:	1884703a 	and	r2,r3,r2
 800a0d4:	1001703a 	wrctl	status,r2
  
  return context;
 800a0d8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800a0dc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800a0e0:	d0a00b17 	ldw	r2,-32724(gp)
 800a0e4:	10c000c4 	addi	r3,r2,3
 800a0e8:	00bfff04 	movi	r2,-4
 800a0ec:	1884703a 	and	r2,r3,r2
 800a0f0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800a0f4:	d0e00b17 	ldw	r3,-32724(gp)
 800a0f8:	e0bfff17 	ldw	r2,-4(fp)
 800a0fc:	1887883a 	add	r3,r3,r2
 800a100:	00830034 	movhi	r2,3072
 800a104:	10800004 	addi	r2,r2,0
 800a108:	10c0062e 	bgeu	r2,r3,800a124 <sbrk+0x74>
 800a10c:	e0bffb17 	ldw	r2,-20(fp)
 800a110:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800a114:	e0bffa17 	ldw	r2,-24(fp)
 800a118:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800a11c:	00bfffc4 	movi	r2,-1
 800a120:	00000b06 	br	800a150 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800a124:	d0a00b17 	ldw	r2,-32724(gp)
 800a128:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800a12c:	d0e00b17 	ldw	r3,-32724(gp)
 800a130:	e0bfff17 	ldw	r2,-4(fp)
 800a134:	1885883a 	add	r2,r3,r2
 800a138:	d0a00b15 	stw	r2,-32724(gp)
 800a13c:	e0bffb17 	ldw	r2,-20(fp)
 800a140:	e0bffc15 	stw	r2,-16(fp)
 800a144:	e0bffc17 	ldw	r2,-16(fp)
 800a148:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800a14c:	e0bffd17 	ldw	r2,-12(fp)
} 
 800a150:	e037883a 	mov	sp,fp
 800a154:	df000017 	ldw	fp,0(sp)
 800a158:	dec00104 	addi	sp,sp,4
 800a15c:	f800283a 	ret

0800a160 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800a160:	defffd04 	addi	sp,sp,-12
 800a164:	dfc00215 	stw	ra,8(sp)
 800a168:	df000115 	stw	fp,4(sp)
 800a16c:	df000104 	addi	fp,sp,4
 800a170:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800a174:	e13fff17 	ldw	r4,-4(fp)
 800a178:	800c3900 	call	800c390 <alt_busy_sleep>
}
 800a17c:	e037883a 	mov	sp,fp
 800a180:	dfc00117 	ldw	ra,4(sp)
 800a184:	df000017 	ldw	fp,0(sp)
 800a188:	dec00204 	addi	sp,sp,8
 800a18c:	f800283a 	ret

0800a190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a190:	defffe04 	addi	sp,sp,-8
 800a194:	dfc00115 	stw	ra,4(sp)
 800a198:	df000015 	stw	fp,0(sp)
 800a19c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800a1a0:	d0a00a17 	ldw	r2,-32728(gp)
 800a1a4:	10000326 	beq	r2,zero,800a1b4 <alt_get_errno+0x24>
 800a1a8:	d0a00a17 	ldw	r2,-32728(gp)
 800a1ac:	103ee83a 	callr	r2
 800a1b0:	00000106 	br	800a1b8 <alt_get_errno+0x28>
 800a1b4:	d0a6e404 	addi	r2,gp,-25712
}
 800a1b8:	e037883a 	mov	sp,fp
 800a1bc:	dfc00117 	ldw	ra,4(sp)
 800a1c0:	df000017 	ldw	fp,0(sp)
 800a1c4:	dec00204 	addi	sp,sp,8
 800a1c8:	f800283a 	ret

0800a1cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800a1cc:	defff904 	addi	sp,sp,-28
 800a1d0:	dfc00615 	stw	ra,24(sp)
 800a1d4:	df000515 	stw	fp,20(sp)
 800a1d8:	df000504 	addi	fp,sp,20
 800a1dc:	e13ffd15 	stw	r4,-12(fp)
 800a1e0:	e17ffe15 	stw	r5,-8(fp)
 800a1e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a1e8:	e0bffd17 	ldw	r2,-12(fp)
 800a1ec:	10000616 	blt	r2,zero,800a208 <write+0x3c>
 800a1f0:	e0bffd17 	ldw	r2,-12(fp)
 800a1f4:	10c00324 	muli	r3,r2,12
 800a1f8:	00820074 	movhi	r2,2049
 800a1fc:	10b84404 	addi	r2,r2,-7920
 800a200:	1885883a 	add	r2,r3,r2
 800a204:	00000106 	br	800a20c <write+0x40>
 800a208:	0005883a 	mov	r2,zero
 800a20c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800a210:	e0bffb17 	ldw	r2,-20(fp)
 800a214:	10002126 	beq	r2,zero,800a29c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800a218:	e0bffb17 	ldw	r2,-20(fp)
 800a21c:	10800217 	ldw	r2,8(r2)
 800a220:	108000cc 	andi	r2,r2,3
 800a224:	10001826 	beq	r2,zero,800a288 <write+0xbc>
 800a228:	e0bffb17 	ldw	r2,-20(fp)
 800a22c:	10800017 	ldw	r2,0(r2)
 800a230:	10800617 	ldw	r2,24(r2)
 800a234:	10001426 	beq	r2,zero,800a288 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800a238:	e0bffb17 	ldw	r2,-20(fp)
 800a23c:	10800017 	ldw	r2,0(r2)
 800a240:	10800617 	ldw	r2,24(r2)
 800a244:	e0ffff17 	ldw	r3,-4(fp)
 800a248:	180d883a 	mov	r6,r3
 800a24c:	e17ffe17 	ldw	r5,-8(fp)
 800a250:	e13ffb17 	ldw	r4,-20(fp)
 800a254:	103ee83a 	callr	r2
 800a258:	e0bffc15 	stw	r2,-16(fp)
 800a25c:	e0bffc17 	ldw	r2,-16(fp)
 800a260:	1000070e 	bge	r2,zero,800a280 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800a264:	800a1900 	call	800a190 <alt_get_errno>
 800a268:	1007883a 	mov	r3,r2
 800a26c:	e0bffc17 	ldw	r2,-16(fp)
 800a270:	0085c83a 	sub	r2,zero,r2
 800a274:	18800015 	stw	r2,0(r3)
        return -1;
 800a278:	00bfffc4 	movi	r2,-1
 800a27c:	00000c06 	br	800a2b0 <write+0xe4>
      }
      return rval;
 800a280:	e0bffc17 	ldw	r2,-16(fp)
 800a284:	00000a06 	br	800a2b0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800a288:	800a1900 	call	800a190 <alt_get_errno>
 800a28c:	1007883a 	mov	r3,r2
 800a290:	00800344 	movi	r2,13
 800a294:	18800015 	stw	r2,0(r3)
 800a298:	00000406 	br	800a2ac <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800a29c:	800a1900 	call	800a190 <alt_get_errno>
 800a2a0:	1007883a 	mov	r3,r2
 800a2a4:	00801444 	movi	r2,81
 800a2a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800a2ac:	00bfffc4 	movi	r2,-1
}
 800a2b0:	e037883a 	mov	sp,fp
 800a2b4:	dfc00117 	ldw	ra,4(sp)
 800a2b8:	df000017 	ldw	fp,0(sp)
 800a2bc:	dec00204 	addi	sp,sp,8
 800a2c0:	f800283a 	ret

0800a2c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800a2c4:	defffd04 	addi	sp,sp,-12
 800a2c8:	dfc00215 	stw	ra,8(sp)
 800a2cc:	df000115 	stw	fp,4(sp)
 800a2d0:	df000104 	addi	fp,sp,4
 800a2d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800a2d8:	d1600704 	addi	r5,gp,-32740
 800a2dc:	e13fff17 	ldw	r4,-4(fp)
 800a2e0:	800c56c0 	call	800c56c <alt_dev_llist_insert>
}
 800a2e4:	e037883a 	mov	sp,fp
 800a2e8:	dfc00117 	ldw	ra,4(sp)
 800a2ec:	df000017 	ldw	fp,0(sp)
 800a2f0:	dec00204 	addi	sp,sp,8
 800a2f4:	f800283a 	ret

0800a2f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a2f8:	defffe04 	addi	sp,sp,-8
 800a2fc:	dfc00115 	stw	ra,4(sp)
 800a300:	df000015 	stw	fp,0(sp)
 800a304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800a308:	d0a00a17 	ldw	r2,-32728(gp)
 800a30c:	10000326 	beq	r2,zero,800a31c <alt_get_errno+0x24>
 800a310:	d0a00a17 	ldw	r2,-32728(gp)
 800a314:	103ee83a 	callr	r2
 800a318:	00000106 	br	800a320 <alt_get_errno+0x28>
 800a31c:	d0a6e404 	addi	r2,gp,-25712
}
 800a320:	e037883a 	mov	sp,fp
 800a324:	dfc00117 	ldw	ra,4(sp)
 800a328:	df000017 	ldw	fp,0(sp)
 800a32c:	dec00204 	addi	sp,sp,8
 800a330:	f800283a 	ret

0800a334 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 800a334:	defffc04 	addi	sp,sp,-16
 800a338:	dfc00315 	stw	ra,12(sp)
 800a33c:	df000215 	stw	fp,8(sp)
 800a340:	df000204 	addi	fp,sp,8
 800a344:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800a348:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 800a34c:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 800a350:	e0bffe17 	ldw	r2,-8(fp)
 800a354:	1000051e 	bne	r2,zero,800a36c <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 800a358:	d1600e04 	addi	r5,gp,-32712
 800a35c:	e13fff17 	ldw	r4,-4(fp)
 800a360:	800c56c0 	call	800c56c <alt_dev_llist_insert>
 800a364:	e0bffe15 	stw	r2,-8(fp)
 800a368:	00000606 	br	800a384 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 800a36c:	800a2f80 	call	800a2f8 <alt_get_errno>
 800a370:	1007883a 	mov	r3,r2
 800a374:	00800304 	movi	r2,12
 800a378:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 800a37c:	00bffd04 	movi	r2,-12
 800a380:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 800a384:	e0bffe17 	ldw	r2,-8(fp)
}
 800a388:	e037883a 	mov	sp,fp
 800a38c:	dfc00117 	ldw	ra,4(sp)
 800a390:	df000017 	ldw	fp,0(sp)
 800a394:	dec00204 	addi	sp,sp,8
 800a398:	f800283a 	ret

0800a39c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800a39c:	defffd04 	addi	sp,sp,-12
 800a3a0:	dfc00215 	stw	ra,8(sp)
 800a3a4:	df000115 	stw	fp,4(sp)
 800a3a8:	df000104 	addi	fp,sp,4
 800a3ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_SOUND_ACQUISITION, nios2_sound_acquisition);
 800a3b0:	800ce4c0 	call	800ce4c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800a3b4:	00800044 	movi	r2,1
 800a3b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800a3bc:	0001883a 	nop
 800a3c0:	e037883a 	mov	sp,fp
 800a3c4:	dfc00117 	ldw	ra,4(sp)
 800a3c8:	df000017 	ldw	fp,0(sp)
 800a3cc:	dec00204 	addi	sp,sp,8
 800a3d0:	f800283a 	ret

0800a3d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800a3d4:	defffe04 	addi	sp,sp,-8
 800a3d8:	dfc00115 	stw	ra,4(sp)
 800a3dc:	df000015 	stw	fp,0(sp)
 800a3e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800a3e4:	01800044 	movi	r6,1
 800a3e8:	000b883a 	mov	r5,zero
 800a3ec:	01020074 	movhi	r4,2049
 800a3f0:	2138ae04 	addi	r4,r4,-7496
 800a3f4:	800a5bc0 	call	800a5bc <altera_avalon_jtag_uart_init>
 800a3f8:	01020074 	movhi	r4,2049
 800a3fc:	2138a404 	addi	r4,r4,-7536
 800a400:	800a2c40 	call	800a2c4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 800a404:	01bfffc4 	movi	r6,-1
 800a408:	000b883a 	mov	r5,zero
 800a40c:	01020074 	movhi	r4,2049
 800a410:	213cbc04 	addi	r4,r4,-3344
 800a414:	800b1a80 	call	800b1a8 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
 800a418:	01020074 	movhi	r4,2049
 800a41c:	213cce04 	addi	r4,r4,-3272
 800a420:	800a3340 	call	800a334 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800a424:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 800a428:	01020074 	movhi	r4,2049
 800a42c:	213cd204 	addi	r4,r4,-3256
 800a430:	800a2c40 	call	800a2c4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 800a434:	01020074 	movhi	r4,2049
 800a438:	213cde04 	addi	r4,r4,-3208
 800a43c:	800a2c40 	call	800a2c4 <alt_dev_reg>
}
 800a440:	0001883a 	nop
 800a444:	e037883a 	mov	sp,fp
 800a448:	dfc00117 	ldw	ra,4(sp)
 800a44c:	df000017 	ldw	fp,0(sp)
 800a450:	dec00204 	addi	sp,sp,8
 800a454:	f800283a 	ret

0800a458 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800a458:	defffa04 	addi	sp,sp,-24
 800a45c:	dfc00515 	stw	ra,20(sp)
 800a460:	df000415 	stw	fp,16(sp)
 800a464:	df000404 	addi	fp,sp,16
 800a468:	e13ffd15 	stw	r4,-12(fp)
 800a46c:	e17ffe15 	stw	r5,-8(fp)
 800a470:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800a474:	e0bffd17 	ldw	r2,-12(fp)
 800a478:	10800017 	ldw	r2,0(r2)
 800a47c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800a480:	e0bffc17 	ldw	r2,-16(fp)
 800a484:	10c00a04 	addi	r3,r2,40
 800a488:	e0bffd17 	ldw	r2,-12(fp)
 800a48c:	10800217 	ldw	r2,8(r2)
 800a490:	100f883a 	mov	r7,r2
 800a494:	e1bfff17 	ldw	r6,-4(fp)
 800a498:	e17ffe17 	ldw	r5,-8(fp)
 800a49c:	1809883a 	mov	r4,r3
 800a4a0:	800aa780 	call	800aa78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800a4a4:	e037883a 	mov	sp,fp
 800a4a8:	dfc00117 	ldw	ra,4(sp)
 800a4ac:	df000017 	ldw	fp,0(sp)
 800a4b0:	dec00204 	addi	sp,sp,8
 800a4b4:	f800283a 	ret

0800a4b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800a4b8:	defffa04 	addi	sp,sp,-24
 800a4bc:	dfc00515 	stw	ra,20(sp)
 800a4c0:	df000415 	stw	fp,16(sp)
 800a4c4:	df000404 	addi	fp,sp,16
 800a4c8:	e13ffd15 	stw	r4,-12(fp)
 800a4cc:	e17ffe15 	stw	r5,-8(fp)
 800a4d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800a4d4:	e0bffd17 	ldw	r2,-12(fp)
 800a4d8:	10800017 	ldw	r2,0(r2)
 800a4dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800a4e0:	e0bffc17 	ldw	r2,-16(fp)
 800a4e4:	10c00a04 	addi	r3,r2,40
 800a4e8:	e0bffd17 	ldw	r2,-12(fp)
 800a4ec:	10800217 	ldw	r2,8(r2)
 800a4f0:	100f883a 	mov	r7,r2
 800a4f4:	e1bfff17 	ldw	r6,-4(fp)
 800a4f8:	e17ffe17 	ldw	r5,-8(fp)
 800a4fc:	1809883a 	mov	r4,r3
 800a500:	800ac940 	call	800ac94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800a504:	e037883a 	mov	sp,fp
 800a508:	dfc00117 	ldw	ra,4(sp)
 800a50c:	df000017 	ldw	fp,0(sp)
 800a510:	dec00204 	addi	sp,sp,8
 800a514:	f800283a 	ret

0800a518 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800a518:	defffc04 	addi	sp,sp,-16
 800a51c:	dfc00315 	stw	ra,12(sp)
 800a520:	df000215 	stw	fp,8(sp)
 800a524:	df000204 	addi	fp,sp,8
 800a528:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800a52c:	e0bfff17 	ldw	r2,-4(fp)
 800a530:	10800017 	ldw	r2,0(r2)
 800a534:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800a538:	e0bffe17 	ldw	r2,-8(fp)
 800a53c:	10c00a04 	addi	r3,r2,40
 800a540:	e0bfff17 	ldw	r2,-4(fp)
 800a544:	10800217 	ldw	r2,8(r2)
 800a548:	100b883a 	mov	r5,r2
 800a54c:	1809883a 	mov	r4,r3
 800a550:	800a9200 	call	800a920 <altera_avalon_jtag_uart_close>
}
 800a554:	e037883a 	mov	sp,fp
 800a558:	dfc00117 	ldw	ra,4(sp)
 800a55c:	df000017 	ldw	fp,0(sp)
 800a560:	dec00204 	addi	sp,sp,8
 800a564:	f800283a 	ret

0800a568 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800a568:	defffa04 	addi	sp,sp,-24
 800a56c:	dfc00515 	stw	ra,20(sp)
 800a570:	df000415 	stw	fp,16(sp)
 800a574:	df000404 	addi	fp,sp,16
 800a578:	e13ffd15 	stw	r4,-12(fp)
 800a57c:	e17ffe15 	stw	r5,-8(fp)
 800a580:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800a584:	e0bffd17 	ldw	r2,-12(fp)
 800a588:	10800017 	ldw	r2,0(r2)
 800a58c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800a590:	e0bffc17 	ldw	r2,-16(fp)
 800a594:	10800a04 	addi	r2,r2,40
 800a598:	e1bfff17 	ldw	r6,-4(fp)
 800a59c:	e17ffe17 	ldw	r5,-8(fp)
 800a5a0:	1009883a 	mov	r4,r2
 800a5a4:	800a9880 	call	800a988 <altera_avalon_jtag_uart_ioctl>
}
 800a5a8:	e037883a 	mov	sp,fp
 800a5ac:	dfc00117 	ldw	ra,4(sp)
 800a5b0:	df000017 	ldw	fp,0(sp)
 800a5b4:	dec00204 	addi	sp,sp,8
 800a5b8:	f800283a 	ret

0800a5bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800a5bc:	defffb04 	addi	sp,sp,-20
 800a5c0:	dfc00415 	stw	ra,16(sp)
 800a5c4:	df000315 	stw	fp,12(sp)
 800a5c8:	df000304 	addi	fp,sp,12
 800a5cc:	e13ffd15 	stw	r4,-12(fp)
 800a5d0:	e17ffe15 	stw	r5,-8(fp)
 800a5d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800a5d8:	e0bffd17 	ldw	r2,-12(fp)
 800a5dc:	00c00044 	movi	r3,1
 800a5e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800a5e4:	e0bffd17 	ldw	r2,-12(fp)
 800a5e8:	10800017 	ldw	r2,0(r2)
 800a5ec:	10800104 	addi	r2,r2,4
 800a5f0:	1007883a 	mov	r3,r2
 800a5f4:	e0bffd17 	ldw	r2,-12(fp)
 800a5f8:	10800817 	ldw	r2,32(r2)
 800a5fc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 800a600:	e0bfff17 	ldw	r2,-4(fp)
 800a604:	01820074 	movhi	r6,2049
 800a608:	31a99c04 	addi	r6,r6,-22928
 800a60c:	e17ffd17 	ldw	r5,-12(fp)
 800a610:	1009883a 	mov	r4,r2
 800a614:	800c8d40 	call	800c8d4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800a618:	e0bffd17 	ldw	r2,-12(fp)
 800a61c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800a620:	e0bffd17 	ldw	r2,-12(fp)
 800a624:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800a628:	d0e6e917 	ldw	r3,-25692(gp)
 800a62c:	e1fffd17 	ldw	r7,-12(fp)
 800a630:	01820074 	movhi	r6,2049
 800a634:	31aa2004 	addi	r6,r6,-22400
 800a638:	180b883a 	mov	r5,r3
 800a63c:	1009883a 	mov	r4,r2
 800a640:	800c2640 	call	800c264 <alt_alarm_start>
 800a644:	1000040e 	bge	r2,zero,800a658 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800a648:	e0fffd17 	ldw	r3,-12(fp)
 800a64c:	00a00034 	movhi	r2,32768
 800a650:	10bfffc4 	addi	r2,r2,-1
 800a654:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800a658:	0001883a 	nop
 800a65c:	e037883a 	mov	sp,fp
 800a660:	dfc00117 	ldw	ra,4(sp)
 800a664:	df000017 	ldw	fp,0(sp)
 800a668:	dec00204 	addi	sp,sp,8
 800a66c:	f800283a 	ret

0800a670 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800a670:	defff704 	addi	sp,sp,-36
 800a674:	df000815 	stw	fp,32(sp)
 800a678:	df000804 	addi	fp,sp,32
 800a67c:	e13ffe15 	stw	r4,-8(fp)
 800a680:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800a684:	e0bffe17 	ldw	r2,-8(fp)
 800a688:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 800a68c:	e0bffa17 	ldw	r2,-24(fp)
 800a690:	10800017 	ldw	r2,0(r2)
 800a694:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800a698:	e0bffb17 	ldw	r2,-20(fp)
 800a69c:	10800104 	addi	r2,r2,4
 800a6a0:	10800037 	ldwio	r2,0(r2)
 800a6a4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800a6a8:	e0bffc17 	ldw	r2,-16(fp)
 800a6ac:	1080c00c 	andi	r2,r2,768
 800a6b0:	10006d26 	beq	r2,zero,800a868 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800a6b4:	e0bffc17 	ldw	r2,-16(fp)
 800a6b8:	1080400c 	andi	r2,r2,256
 800a6bc:	10003526 	beq	r2,zero,800a794 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800a6c0:	00800074 	movhi	r2,1
 800a6c4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800a6c8:	e0bffa17 	ldw	r2,-24(fp)
 800a6cc:	10800a17 	ldw	r2,40(r2)
 800a6d0:	10800044 	addi	r2,r2,1
 800a6d4:	1081ffcc 	andi	r2,r2,2047
 800a6d8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 800a6dc:	e0bffa17 	ldw	r2,-24(fp)
 800a6e0:	10c00b17 	ldw	r3,44(r2)
 800a6e4:	e0bffd17 	ldw	r2,-12(fp)
 800a6e8:	18801526 	beq	r3,r2,800a740 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800a6ec:	e0bffb17 	ldw	r2,-20(fp)
 800a6f0:	10800037 	ldwio	r2,0(r2)
 800a6f4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800a6f8:	e0bff817 	ldw	r2,-32(fp)
 800a6fc:	10a0000c 	andi	r2,r2,32768
 800a700:	10001126 	beq	r2,zero,800a748 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800a704:	e0bffa17 	ldw	r2,-24(fp)
 800a708:	10800a17 	ldw	r2,40(r2)
 800a70c:	e0fff817 	ldw	r3,-32(fp)
 800a710:	1809883a 	mov	r4,r3
 800a714:	e0fffa17 	ldw	r3,-24(fp)
 800a718:	1885883a 	add	r2,r3,r2
 800a71c:	10800e04 	addi	r2,r2,56
 800a720:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800a724:	e0bffa17 	ldw	r2,-24(fp)
 800a728:	10800a17 	ldw	r2,40(r2)
 800a72c:	10800044 	addi	r2,r2,1
 800a730:	10c1ffcc 	andi	r3,r2,2047
 800a734:	e0bffa17 	ldw	r2,-24(fp)
 800a738:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800a73c:	003fe206 	br	800a6c8 <__alt_data_end+0xfc00a6c8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800a740:	0001883a 	nop
 800a744:	00000106 	br	800a74c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800a748:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800a74c:	e0bff817 	ldw	r2,-32(fp)
 800a750:	10bfffec 	andhi	r2,r2,65535
 800a754:	10000f26 	beq	r2,zero,800a794 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800a758:	e0bffa17 	ldw	r2,-24(fp)
 800a75c:	10c00817 	ldw	r3,32(r2)
 800a760:	00bfff84 	movi	r2,-2
 800a764:	1886703a 	and	r3,r3,r2
 800a768:	e0bffa17 	ldw	r2,-24(fp)
 800a76c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800a770:	e0bffb17 	ldw	r2,-20(fp)
 800a774:	10800104 	addi	r2,r2,4
 800a778:	1007883a 	mov	r3,r2
 800a77c:	e0bffa17 	ldw	r2,-24(fp)
 800a780:	10800817 	ldw	r2,32(r2)
 800a784:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800a788:	e0bffb17 	ldw	r2,-20(fp)
 800a78c:	10800104 	addi	r2,r2,4
 800a790:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800a794:	e0bffc17 	ldw	r2,-16(fp)
 800a798:	1080800c 	andi	r2,r2,512
 800a79c:	103fbe26 	beq	r2,zero,800a698 <__alt_data_end+0xfc00a698>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800a7a0:	e0bffc17 	ldw	r2,-16(fp)
 800a7a4:	1004d43a 	srli	r2,r2,16
 800a7a8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800a7ac:	00001406 	br	800a800 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800a7b0:	e0bffb17 	ldw	r2,-20(fp)
 800a7b4:	e0fffa17 	ldw	r3,-24(fp)
 800a7b8:	18c00d17 	ldw	r3,52(r3)
 800a7bc:	e13ffa17 	ldw	r4,-24(fp)
 800a7c0:	20c7883a 	add	r3,r4,r3
 800a7c4:	18c20e04 	addi	r3,r3,2104
 800a7c8:	18c00003 	ldbu	r3,0(r3)
 800a7cc:	18c03fcc 	andi	r3,r3,255
 800a7d0:	18c0201c 	xori	r3,r3,128
 800a7d4:	18ffe004 	addi	r3,r3,-128
 800a7d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800a7dc:	e0bffa17 	ldw	r2,-24(fp)
 800a7e0:	10800d17 	ldw	r2,52(r2)
 800a7e4:	10800044 	addi	r2,r2,1
 800a7e8:	10c1ffcc 	andi	r3,r2,2047
 800a7ec:	e0bffa17 	ldw	r2,-24(fp)
 800a7f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800a7f4:	e0bff917 	ldw	r2,-28(fp)
 800a7f8:	10bfffc4 	addi	r2,r2,-1
 800a7fc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800a800:	e0bff917 	ldw	r2,-28(fp)
 800a804:	10000526 	beq	r2,zero,800a81c <altera_avalon_jtag_uart_irq+0x1ac>
 800a808:	e0bffa17 	ldw	r2,-24(fp)
 800a80c:	10c00d17 	ldw	r3,52(r2)
 800a810:	e0bffa17 	ldw	r2,-24(fp)
 800a814:	10800c17 	ldw	r2,48(r2)
 800a818:	18bfe51e 	bne	r3,r2,800a7b0 <__alt_data_end+0xfc00a7b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800a81c:	e0bff917 	ldw	r2,-28(fp)
 800a820:	103f9d26 	beq	r2,zero,800a698 <__alt_data_end+0xfc00a698>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800a824:	e0bffa17 	ldw	r2,-24(fp)
 800a828:	10c00817 	ldw	r3,32(r2)
 800a82c:	00bfff44 	movi	r2,-3
 800a830:	1886703a 	and	r3,r3,r2
 800a834:	e0bffa17 	ldw	r2,-24(fp)
 800a838:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800a83c:	e0bffa17 	ldw	r2,-24(fp)
 800a840:	10800017 	ldw	r2,0(r2)
 800a844:	10800104 	addi	r2,r2,4
 800a848:	1007883a 	mov	r3,r2
 800a84c:	e0bffa17 	ldw	r2,-24(fp)
 800a850:	10800817 	ldw	r2,32(r2)
 800a854:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800a858:	e0bffb17 	ldw	r2,-20(fp)
 800a85c:	10800104 	addi	r2,r2,4
 800a860:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800a864:	003f8c06 	br	800a698 <__alt_data_end+0xfc00a698>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800a868:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800a86c:	0001883a 	nop
 800a870:	e037883a 	mov	sp,fp
 800a874:	df000017 	ldw	fp,0(sp)
 800a878:	dec00104 	addi	sp,sp,4
 800a87c:	f800283a 	ret

0800a880 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800a880:	defff804 	addi	sp,sp,-32
 800a884:	df000715 	stw	fp,28(sp)
 800a888:	df000704 	addi	fp,sp,28
 800a88c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800a890:	e0bffb17 	ldw	r2,-20(fp)
 800a894:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800a898:	e0bff917 	ldw	r2,-28(fp)
 800a89c:	10800017 	ldw	r2,0(r2)
 800a8a0:	10800104 	addi	r2,r2,4
 800a8a4:	10800037 	ldwio	r2,0(r2)
 800a8a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800a8ac:	e0bffa17 	ldw	r2,-24(fp)
 800a8b0:	1081000c 	andi	r2,r2,1024
 800a8b4:	10000b26 	beq	r2,zero,800a8e4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800a8b8:	e0bff917 	ldw	r2,-28(fp)
 800a8bc:	10800017 	ldw	r2,0(r2)
 800a8c0:	10800104 	addi	r2,r2,4
 800a8c4:	1007883a 	mov	r3,r2
 800a8c8:	e0bff917 	ldw	r2,-28(fp)
 800a8cc:	10800817 	ldw	r2,32(r2)
 800a8d0:	10810014 	ori	r2,r2,1024
 800a8d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800a8d8:	e0bff917 	ldw	r2,-28(fp)
 800a8dc:	10000915 	stw	zero,36(r2)
 800a8e0:	00000a06 	br	800a90c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800a8e4:	e0bff917 	ldw	r2,-28(fp)
 800a8e8:	10c00917 	ldw	r3,36(r2)
 800a8ec:	00a00034 	movhi	r2,32768
 800a8f0:	10bfff04 	addi	r2,r2,-4
 800a8f4:	10c00536 	bltu	r2,r3,800a90c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800a8f8:	e0bff917 	ldw	r2,-28(fp)
 800a8fc:	10800917 	ldw	r2,36(r2)
 800a900:	10c00044 	addi	r3,r2,1
 800a904:	e0bff917 	ldw	r2,-28(fp)
 800a908:	10c00915 	stw	r3,36(r2)
 800a90c:	d0a6e917 	ldw	r2,-25692(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800a910:	e037883a 	mov	sp,fp
 800a914:	df000017 	ldw	fp,0(sp)
 800a918:	dec00104 	addi	sp,sp,4
 800a91c:	f800283a 	ret

0800a920 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800a920:	defffd04 	addi	sp,sp,-12
 800a924:	df000215 	stw	fp,8(sp)
 800a928:	df000204 	addi	fp,sp,8
 800a92c:	e13ffe15 	stw	r4,-8(fp)
 800a930:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800a934:	00000506 	br	800a94c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800a938:	e0bfff17 	ldw	r2,-4(fp)
 800a93c:	1090000c 	andi	r2,r2,16384
 800a940:	10000226 	beq	r2,zero,800a94c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800a944:	00bffd44 	movi	r2,-11
 800a948:	00000b06 	br	800a978 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800a94c:	e0bffe17 	ldw	r2,-8(fp)
 800a950:	10c00d17 	ldw	r3,52(r2)
 800a954:	e0bffe17 	ldw	r2,-8(fp)
 800a958:	10800c17 	ldw	r2,48(r2)
 800a95c:	18800526 	beq	r3,r2,800a974 <altera_avalon_jtag_uart_close+0x54>
 800a960:	e0bffe17 	ldw	r2,-8(fp)
 800a964:	10c00917 	ldw	r3,36(r2)
 800a968:	e0bffe17 	ldw	r2,-8(fp)
 800a96c:	10800117 	ldw	r2,4(r2)
 800a970:	18bff136 	bltu	r3,r2,800a938 <__alt_data_end+0xfc00a938>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800a974:	0005883a 	mov	r2,zero
}
 800a978:	e037883a 	mov	sp,fp
 800a97c:	df000017 	ldw	fp,0(sp)
 800a980:	dec00104 	addi	sp,sp,4
 800a984:	f800283a 	ret

0800a988 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800a988:	defffa04 	addi	sp,sp,-24
 800a98c:	df000515 	stw	fp,20(sp)
 800a990:	df000504 	addi	fp,sp,20
 800a994:	e13ffd15 	stw	r4,-12(fp)
 800a998:	e17ffe15 	stw	r5,-8(fp)
 800a99c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800a9a0:	00bff9c4 	movi	r2,-25
 800a9a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800a9a8:	e0bffe17 	ldw	r2,-8(fp)
 800a9ac:	10da8060 	cmpeqi	r3,r2,27137
 800a9b0:	1800031e 	bne	r3,zero,800a9c0 <altera_avalon_jtag_uart_ioctl+0x38>
 800a9b4:	109a80a0 	cmpeqi	r2,r2,27138
 800a9b8:	1000181e 	bne	r2,zero,800aa1c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800a9bc:	00002906 	br	800aa64 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800a9c0:	e0bffd17 	ldw	r2,-12(fp)
 800a9c4:	10c00117 	ldw	r3,4(r2)
 800a9c8:	00a00034 	movhi	r2,32768
 800a9cc:	10bfffc4 	addi	r2,r2,-1
 800a9d0:	18802126 	beq	r3,r2,800aa58 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800a9d4:	e0bfff17 	ldw	r2,-4(fp)
 800a9d8:	10800017 	ldw	r2,0(r2)
 800a9dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800a9e0:	e0bffc17 	ldw	r2,-16(fp)
 800a9e4:	10800090 	cmplti	r2,r2,2
 800a9e8:	1000061e 	bne	r2,zero,800aa04 <altera_avalon_jtag_uart_ioctl+0x7c>
 800a9ec:	e0fffc17 	ldw	r3,-16(fp)
 800a9f0:	00a00034 	movhi	r2,32768
 800a9f4:	10bfffc4 	addi	r2,r2,-1
 800a9f8:	18800226 	beq	r3,r2,800aa04 <altera_avalon_jtag_uart_ioctl+0x7c>
 800a9fc:	e0bffc17 	ldw	r2,-16(fp)
 800aa00:	00000206 	br	800aa0c <altera_avalon_jtag_uart_ioctl+0x84>
 800aa04:	00a00034 	movhi	r2,32768
 800aa08:	10bfff84 	addi	r2,r2,-2
 800aa0c:	e0fffd17 	ldw	r3,-12(fp)
 800aa10:	18800115 	stw	r2,4(r3)
      rc = 0;
 800aa14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800aa18:	00000f06 	br	800aa58 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800aa1c:	e0bffd17 	ldw	r2,-12(fp)
 800aa20:	10c00117 	ldw	r3,4(r2)
 800aa24:	00a00034 	movhi	r2,32768
 800aa28:	10bfffc4 	addi	r2,r2,-1
 800aa2c:	18800c26 	beq	r3,r2,800aa60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800aa30:	e0bffd17 	ldw	r2,-12(fp)
 800aa34:	10c00917 	ldw	r3,36(r2)
 800aa38:	e0bffd17 	ldw	r2,-12(fp)
 800aa3c:	10800117 	ldw	r2,4(r2)
 800aa40:	1885803a 	cmpltu	r2,r3,r2
 800aa44:	10c03fcc 	andi	r3,r2,255
 800aa48:	e0bfff17 	ldw	r2,-4(fp)
 800aa4c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800aa50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800aa54:	00000206 	br	800aa60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800aa58:	0001883a 	nop
 800aa5c:	00000106 	br	800aa64 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800aa60:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800aa64:	e0bffb17 	ldw	r2,-20(fp)
}
 800aa68:	e037883a 	mov	sp,fp
 800aa6c:	df000017 	ldw	fp,0(sp)
 800aa70:	dec00104 	addi	sp,sp,4
 800aa74:	f800283a 	ret

0800aa78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800aa78:	defff304 	addi	sp,sp,-52
 800aa7c:	dfc00c15 	stw	ra,48(sp)
 800aa80:	df000b15 	stw	fp,44(sp)
 800aa84:	df000b04 	addi	fp,sp,44
 800aa88:	e13ffc15 	stw	r4,-16(fp)
 800aa8c:	e17ffd15 	stw	r5,-12(fp)
 800aa90:	e1bffe15 	stw	r6,-8(fp)
 800aa94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800aa98:	e0bffd17 	ldw	r2,-12(fp)
 800aa9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800aaa0:	00004706 	br	800abc0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800aaa4:	e0bffc17 	ldw	r2,-16(fp)
 800aaa8:	10800a17 	ldw	r2,40(r2)
 800aaac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800aab0:	e0bffc17 	ldw	r2,-16(fp)
 800aab4:	10800b17 	ldw	r2,44(r2)
 800aab8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800aabc:	e0fff717 	ldw	r3,-36(fp)
 800aac0:	e0bff817 	ldw	r2,-32(fp)
 800aac4:	18800536 	bltu	r3,r2,800aadc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800aac8:	e0fff717 	ldw	r3,-36(fp)
 800aacc:	e0bff817 	ldw	r2,-32(fp)
 800aad0:	1885c83a 	sub	r2,r3,r2
 800aad4:	e0bff615 	stw	r2,-40(fp)
 800aad8:	00000406 	br	800aaec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800aadc:	00c20004 	movi	r3,2048
 800aae0:	e0bff817 	ldw	r2,-32(fp)
 800aae4:	1885c83a 	sub	r2,r3,r2
 800aae8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800aaec:	e0bff617 	ldw	r2,-40(fp)
 800aaf0:	10001e26 	beq	r2,zero,800ab6c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800aaf4:	e0fffe17 	ldw	r3,-8(fp)
 800aaf8:	e0bff617 	ldw	r2,-40(fp)
 800aafc:	1880022e 	bgeu	r3,r2,800ab08 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800ab00:	e0bffe17 	ldw	r2,-8(fp)
 800ab04:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800ab08:	e0bffc17 	ldw	r2,-16(fp)
 800ab0c:	10c00e04 	addi	r3,r2,56
 800ab10:	e0bff817 	ldw	r2,-32(fp)
 800ab14:	1885883a 	add	r2,r3,r2
 800ab18:	e1bff617 	ldw	r6,-40(fp)
 800ab1c:	100b883a 	mov	r5,r2
 800ab20:	e13ff517 	ldw	r4,-44(fp)
 800ab24:	800817c0 	call	800817c <memcpy>
      ptr   += n;
 800ab28:	e0fff517 	ldw	r3,-44(fp)
 800ab2c:	e0bff617 	ldw	r2,-40(fp)
 800ab30:	1885883a 	add	r2,r3,r2
 800ab34:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800ab38:	e0fffe17 	ldw	r3,-8(fp)
 800ab3c:	e0bff617 	ldw	r2,-40(fp)
 800ab40:	1885c83a 	sub	r2,r3,r2
 800ab44:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ab48:	e0fff817 	ldw	r3,-32(fp)
 800ab4c:	e0bff617 	ldw	r2,-40(fp)
 800ab50:	1885883a 	add	r2,r3,r2
 800ab54:	10c1ffcc 	andi	r3,r2,2047
 800ab58:	e0bffc17 	ldw	r2,-16(fp)
 800ab5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800ab60:	e0bffe17 	ldw	r2,-8(fp)
 800ab64:	00bfcf16 	blt	zero,r2,800aaa4 <__alt_data_end+0xfc00aaa4>
 800ab68:	00000106 	br	800ab70 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800ab6c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800ab70:	e0fff517 	ldw	r3,-44(fp)
 800ab74:	e0bffd17 	ldw	r2,-12(fp)
 800ab78:	1880141e 	bne	r3,r2,800abcc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800ab7c:	e0bfff17 	ldw	r2,-4(fp)
 800ab80:	1090000c 	andi	r2,r2,16384
 800ab84:	1000131e 	bne	r2,zero,800abd4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800ab88:	0001883a 	nop
 800ab8c:	e0bffc17 	ldw	r2,-16(fp)
 800ab90:	10c00a17 	ldw	r3,40(r2)
 800ab94:	e0bff717 	ldw	r2,-36(fp)
 800ab98:	1880051e 	bne	r3,r2,800abb0 <altera_avalon_jtag_uart_read+0x138>
 800ab9c:	e0bffc17 	ldw	r2,-16(fp)
 800aba0:	10c00917 	ldw	r3,36(r2)
 800aba4:	e0bffc17 	ldw	r2,-16(fp)
 800aba8:	10800117 	ldw	r2,4(r2)
 800abac:	18bff736 	bltu	r3,r2,800ab8c <__alt_data_end+0xfc00ab8c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800abb0:	e0bffc17 	ldw	r2,-16(fp)
 800abb4:	10c00a17 	ldw	r3,40(r2)
 800abb8:	e0bff717 	ldw	r2,-36(fp)
 800abbc:	18800726 	beq	r3,r2,800abdc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800abc0:	e0bffe17 	ldw	r2,-8(fp)
 800abc4:	00bfb716 	blt	zero,r2,800aaa4 <__alt_data_end+0xfc00aaa4>
 800abc8:	00000506 	br	800abe0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800abcc:	0001883a 	nop
 800abd0:	00000306 	br	800abe0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800abd4:	0001883a 	nop
 800abd8:	00000106 	br	800abe0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800abdc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800abe0:	e0fff517 	ldw	r3,-44(fp)
 800abe4:	e0bffd17 	ldw	r2,-12(fp)
 800abe8:	18801826 	beq	r3,r2,800ac4c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800abec:	0005303a 	rdctl	r2,status
 800abf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800abf4:	e0fffb17 	ldw	r3,-20(fp)
 800abf8:	00bfff84 	movi	r2,-2
 800abfc:	1884703a 	and	r2,r3,r2
 800ac00:	1001703a 	wrctl	status,r2
  
  return context;
 800ac04:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800ac08:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ac0c:	e0bffc17 	ldw	r2,-16(fp)
 800ac10:	10800817 	ldw	r2,32(r2)
 800ac14:	10c00054 	ori	r3,r2,1
 800ac18:	e0bffc17 	ldw	r2,-16(fp)
 800ac1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ac20:	e0bffc17 	ldw	r2,-16(fp)
 800ac24:	10800017 	ldw	r2,0(r2)
 800ac28:	10800104 	addi	r2,r2,4
 800ac2c:	1007883a 	mov	r3,r2
 800ac30:	e0bffc17 	ldw	r2,-16(fp)
 800ac34:	10800817 	ldw	r2,32(r2)
 800ac38:	18800035 	stwio	r2,0(r3)
 800ac3c:	e0bffa17 	ldw	r2,-24(fp)
 800ac40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ac44:	e0bff917 	ldw	r2,-28(fp)
 800ac48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800ac4c:	e0fff517 	ldw	r3,-44(fp)
 800ac50:	e0bffd17 	ldw	r2,-12(fp)
 800ac54:	18800426 	beq	r3,r2,800ac68 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800ac58:	e0fff517 	ldw	r3,-44(fp)
 800ac5c:	e0bffd17 	ldw	r2,-12(fp)
 800ac60:	1885c83a 	sub	r2,r3,r2
 800ac64:	00000606 	br	800ac80 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800ac68:	e0bfff17 	ldw	r2,-4(fp)
 800ac6c:	1090000c 	andi	r2,r2,16384
 800ac70:	10000226 	beq	r2,zero,800ac7c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800ac74:	00bffd44 	movi	r2,-11
 800ac78:	00000106 	br	800ac80 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800ac7c:	00bffec4 	movi	r2,-5
}
 800ac80:	e037883a 	mov	sp,fp
 800ac84:	dfc00117 	ldw	ra,4(sp)
 800ac88:	df000017 	ldw	fp,0(sp)
 800ac8c:	dec00204 	addi	sp,sp,8
 800ac90:	f800283a 	ret

0800ac94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800ac94:	defff304 	addi	sp,sp,-52
 800ac98:	dfc00c15 	stw	ra,48(sp)
 800ac9c:	df000b15 	stw	fp,44(sp)
 800aca0:	df000b04 	addi	fp,sp,44
 800aca4:	e13ffc15 	stw	r4,-16(fp)
 800aca8:	e17ffd15 	stw	r5,-12(fp)
 800acac:	e1bffe15 	stw	r6,-8(fp)
 800acb0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800acb4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800acb8:	e0bffd17 	ldw	r2,-12(fp)
 800acbc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800acc0:	00003706 	br	800ada0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800acc4:	e0bffc17 	ldw	r2,-16(fp)
 800acc8:	10800c17 	ldw	r2,48(r2)
 800accc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800acd0:	e0bffc17 	ldw	r2,-16(fp)
 800acd4:	10800d17 	ldw	r2,52(r2)
 800acd8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800acdc:	e0fff917 	ldw	r3,-28(fp)
 800ace0:	e0bff517 	ldw	r2,-44(fp)
 800ace4:	1880062e 	bgeu	r3,r2,800ad00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800ace8:	e0fff517 	ldw	r3,-44(fp)
 800acec:	e0bff917 	ldw	r2,-28(fp)
 800acf0:	1885c83a 	sub	r2,r3,r2
 800acf4:	10bfffc4 	addi	r2,r2,-1
 800acf8:	e0bff615 	stw	r2,-40(fp)
 800acfc:	00000b06 	br	800ad2c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800ad00:	e0bff517 	ldw	r2,-44(fp)
 800ad04:	10000526 	beq	r2,zero,800ad1c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800ad08:	00c20004 	movi	r3,2048
 800ad0c:	e0bff917 	ldw	r2,-28(fp)
 800ad10:	1885c83a 	sub	r2,r3,r2
 800ad14:	e0bff615 	stw	r2,-40(fp)
 800ad18:	00000406 	br	800ad2c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800ad1c:	00c1ffc4 	movi	r3,2047
 800ad20:	e0bff917 	ldw	r2,-28(fp)
 800ad24:	1885c83a 	sub	r2,r3,r2
 800ad28:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800ad2c:	e0bff617 	ldw	r2,-40(fp)
 800ad30:	10001e26 	beq	r2,zero,800adac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800ad34:	e0fffe17 	ldw	r3,-8(fp)
 800ad38:	e0bff617 	ldw	r2,-40(fp)
 800ad3c:	1880022e 	bgeu	r3,r2,800ad48 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800ad40:	e0bffe17 	ldw	r2,-8(fp)
 800ad44:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800ad48:	e0bffc17 	ldw	r2,-16(fp)
 800ad4c:	10c20e04 	addi	r3,r2,2104
 800ad50:	e0bff917 	ldw	r2,-28(fp)
 800ad54:	1885883a 	add	r2,r3,r2
 800ad58:	e1bff617 	ldw	r6,-40(fp)
 800ad5c:	e17ffd17 	ldw	r5,-12(fp)
 800ad60:	1009883a 	mov	r4,r2
 800ad64:	800817c0 	call	800817c <memcpy>
      ptr   += n;
 800ad68:	e0fffd17 	ldw	r3,-12(fp)
 800ad6c:	e0bff617 	ldw	r2,-40(fp)
 800ad70:	1885883a 	add	r2,r3,r2
 800ad74:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800ad78:	e0fffe17 	ldw	r3,-8(fp)
 800ad7c:	e0bff617 	ldw	r2,-40(fp)
 800ad80:	1885c83a 	sub	r2,r3,r2
 800ad84:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ad88:	e0fff917 	ldw	r3,-28(fp)
 800ad8c:	e0bff617 	ldw	r2,-40(fp)
 800ad90:	1885883a 	add	r2,r3,r2
 800ad94:	10c1ffcc 	andi	r3,r2,2047
 800ad98:	e0bffc17 	ldw	r2,-16(fp)
 800ad9c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ada0:	e0bffe17 	ldw	r2,-8(fp)
 800ada4:	00bfc716 	blt	zero,r2,800acc4 <__alt_data_end+0xfc00acc4>
 800ada8:	00000106 	br	800adb0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800adac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800adb0:	0005303a 	rdctl	r2,status
 800adb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800adb8:	e0fffb17 	ldw	r3,-20(fp)
 800adbc:	00bfff84 	movi	r2,-2
 800adc0:	1884703a 	and	r2,r3,r2
 800adc4:	1001703a 	wrctl	status,r2
  
  return context;
 800adc8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800adcc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800add0:	e0bffc17 	ldw	r2,-16(fp)
 800add4:	10800817 	ldw	r2,32(r2)
 800add8:	10c00094 	ori	r3,r2,2
 800addc:	e0bffc17 	ldw	r2,-16(fp)
 800ade0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ade4:	e0bffc17 	ldw	r2,-16(fp)
 800ade8:	10800017 	ldw	r2,0(r2)
 800adec:	10800104 	addi	r2,r2,4
 800adf0:	1007883a 	mov	r3,r2
 800adf4:	e0bffc17 	ldw	r2,-16(fp)
 800adf8:	10800817 	ldw	r2,32(r2)
 800adfc:	18800035 	stwio	r2,0(r3)
 800ae00:	e0bffa17 	ldw	r2,-24(fp)
 800ae04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ae08:	e0bff817 	ldw	r2,-32(fp)
 800ae0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ae10:	e0bffe17 	ldw	r2,-8(fp)
 800ae14:	0080100e 	bge	zero,r2,800ae58 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800ae18:	e0bfff17 	ldw	r2,-4(fp)
 800ae1c:	1090000c 	andi	r2,r2,16384
 800ae20:	1000101e 	bne	r2,zero,800ae64 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ae24:	0001883a 	nop
 800ae28:	e0bffc17 	ldw	r2,-16(fp)
 800ae2c:	10c00d17 	ldw	r3,52(r2)
 800ae30:	e0bff517 	ldw	r2,-44(fp)
 800ae34:	1880051e 	bne	r3,r2,800ae4c <altera_avalon_jtag_uart_write+0x1b8>
 800ae38:	e0bffc17 	ldw	r2,-16(fp)
 800ae3c:	10c00917 	ldw	r3,36(r2)
 800ae40:	e0bffc17 	ldw	r2,-16(fp)
 800ae44:	10800117 	ldw	r2,4(r2)
 800ae48:	18bff736 	bltu	r3,r2,800ae28 <__alt_data_end+0xfc00ae28>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800ae4c:	e0bffc17 	ldw	r2,-16(fp)
 800ae50:	10800917 	ldw	r2,36(r2)
 800ae54:	1000051e 	bne	r2,zero,800ae6c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800ae58:	e0bffe17 	ldw	r2,-8(fp)
 800ae5c:	00bfd016 	blt	zero,r2,800ada0 <__alt_data_end+0xfc00ada0>
 800ae60:	00000306 	br	800ae70 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800ae64:	0001883a 	nop
 800ae68:	00000106 	br	800ae70 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800ae6c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ae70:	e0fffd17 	ldw	r3,-12(fp)
 800ae74:	e0bff717 	ldw	r2,-36(fp)
 800ae78:	18800426 	beq	r3,r2,800ae8c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800ae7c:	e0fffd17 	ldw	r3,-12(fp)
 800ae80:	e0bff717 	ldw	r2,-36(fp)
 800ae84:	1885c83a 	sub	r2,r3,r2
 800ae88:	00000606 	br	800aea4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800ae8c:	e0bfff17 	ldw	r2,-4(fp)
 800ae90:	1090000c 	andi	r2,r2,16384
 800ae94:	10000226 	beq	r2,zero,800aea0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800ae98:	00bffd44 	movi	r2,-11
 800ae9c:	00000106 	br	800aea4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800aea0:	00bffec4 	movi	r2,-5
}
 800aea4:	e037883a 	mov	sp,fp
 800aea8:	dfc00117 	ldw	ra,4(sp)
 800aeac:	df000017 	ldw	fp,0(sp)
 800aeb0:	dec00204 	addi	sp,sp,8
 800aeb4:	f800283a 	ret

0800aeb8 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 800aeb8:	defffd04 	addi	sp,sp,-12
 800aebc:	df000215 	stw	fp,8(sp)
 800aec0:	df000204 	addi	fp,sp,8
 800aec4:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 800aec8:	008e84b4 	movhi	r2,14866
 800aecc:	10ac1144 	addi	r2,r2,-20411
 800aed0:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 800aed4:	e0bfff17 	ldw	r2,-4(fp)
 800aed8:	10800a17 	ldw	r2,40(r2)
 800aedc:	10800104 	addi	r2,r2,4
 800aee0:	1007883a 	mov	r3,r2
 800aee4:	e0bffe17 	ldw	r2,-8(fp)
 800aee8:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 800aeec:	e0bfff17 	ldw	r2,-4(fp)
 800aef0:	10800a17 	ldw	r2,40(r2)
 800aef4:	10800104 	addi	r2,r2,4
 800aef8:	10800037 	ldwio	r2,0(r2)
 800aefc:	1007883a 	mov	r3,r2
 800af00:	e0bffe17 	ldw	r2,-8(fp)
 800af04:	1880081e 	bne	r3,r2,800af28 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 800af08:	e0bfff17 	ldw	r2,-4(fp)
 800af0c:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 800af10:	e0bfff17 	ldw	r2,-4(fp)
 800af14:	10800a17 	ldw	r2,40(r2)
 800af18:	10800104 	addi	r2,r2,4
 800af1c:	0007883a 	mov	r3,zero
 800af20:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 800af24:	00000306 	br	800af34 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 800af28:	e0bfff17 	ldw	r2,-4(fp)
 800af2c:	00c00044 	movi	r3,1
 800af30:	10c00f15 	stw	r3,60(r2)
    }
}
 800af34:	0001883a 	nop
 800af38:	e037883a 	mov	sp,fp
 800af3c:	df000017 	ldw	fp,0(sp)
 800af40:	dec00104 	addi	sp,sp,4
 800af44:	f800283a 	ret

0800af48 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 800af48:	defffc04 	addi	sp,sp,-16
 800af4c:	df000315 	stw	fp,12(sp)
 800af50:	df000304 	addi	fp,sp,12
 800af54:	e13ffe15 	stw	r4,-8(fp)
 800af58:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 800af5c:	e0bfff17 	ldw	r2,-4(fp)
 800af60:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 800af64:	e0bffd17 	ldw	r2,-12(fp)
 800af68:	10001026 	beq	r2,zero,800afac <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 800af6c:	e0bffe17 	ldw	r2,-8(fp)
 800af70:	10800a17 	ldw	r2,40(r2)
 800af74:	10800104 	addi	r2,r2,4
 800af78:	1007883a 	mov	r3,r2
 800af7c:	e0bffd17 	ldw	r2,-12(fp)
 800af80:	10800104 	addi	r2,r2,4
 800af84:	10800017 	ldw	r2,0(r2)
 800af88:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 800af8c:	e0bffe17 	ldw	r2,-8(fp)
 800af90:	10800a17 	ldw	r2,40(r2)
 800af94:	1007883a 	mov	r3,r2
 800af98:	e0bffd17 	ldw	r2,-12(fp)
 800af9c:	10800017 	ldw	r2,0(r2)
 800afa0:	18800035 	stwio	r2,0(r3)
        return 0;
 800afa4:	0005883a 	mov	r2,zero
 800afa8:	00000106 	br	800afb0 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 800afac:	00bffa84 	movi	r2,-22
}
 800afb0:	e037883a 	mov	sp,fp
 800afb4:	df000017 	ldw	fp,0(sp)
 800afb8:	dec00104 	addi	sp,sp,4
 800afbc:	f800283a 	ret

0800afc0 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 800afc0:	defff504 	addi	sp,sp,-44
 800afc4:	dfc00a15 	stw	ra,40(sp)
 800afc8:	df000915 	stw	fp,36(sp)
 800afcc:	df000904 	addi	fp,sp,36
 800afd0:	e13ffe15 	stw	r4,-8(fp)
 800afd4:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 800afd8:	e0bffe17 	ldw	r2,-8(fp)
 800afdc:	e0bff715 	stw	r2,-36(fp)
    int status = 0;
 800afe0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 800afe4:	e0bff717 	ldw	r2,-36(fp)
 800afe8:	10801017 	ldw	r2,64(r2)
 800afec:	e0bff915 	stw	r2,-28(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 800aff0:	e0bff717 	ldw	r2,-36(fp)
 800aff4:	10800a17 	ldw	r2,40(r2)
 800aff8:	10800304 	addi	r2,r2,12
 800affc:	10800037 	ldwio	r2,0(r2)
 800b000:	1007883a 	mov	r3,r2
 800b004:	00bfff44 	movi	r2,-3
 800b008:	1884703a 	and	r2,r3,r2
 800b00c:	e0bffa15 	stw	r2,-24(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 800b010:	e0bff717 	ldw	r2,-36(fp)
 800b014:	10800a17 	ldw	r2,40(r2)
 800b018:	10800304 	addi	r2,r2,12
 800b01c:	1007883a 	mov	r3,r2
 800b020:	e0bffa17 	ldw	r2,-24(fp)
 800b024:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 800b028:	e0bff917 	ldw	r2,-28(fp)
 800b02c:	10002d26 	beq	r2,zero,800b0e4 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 800b030:	e0bff717 	ldw	r2,-36(fp)
 800b034:	10800a17 	ldw	r2,40(r2)
 800b038:	10800104 	addi	r2,r2,4
 800b03c:	1007883a 	mov	r3,r2
 800b040:	e0bff917 	ldw	r2,-28(fp)
 800b044:	10800104 	addi	r2,r2,4
 800b048:	10800017 	ldw	r2,0(r2)
 800b04c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 800b050:	e0bff717 	ldw	r2,-36(fp)
 800b054:	10800a17 	ldw	r2,40(r2)
 800b058:	1007883a 	mov	r3,r2
 800b05c:	e0bff917 	ldw	r2,-28(fp)
 800b060:	10800017 	ldw	r2,0(r2)
 800b064:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 800b068:	e0bff717 	ldw	r2,-36(fp)
 800b06c:	10800a17 	ldw	r2,40(r2)
 800b070:	10800204 	addi	r2,r2,8
 800b074:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 800b078:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 800b07c:	1005d07a 	srai	r2,r2,1
 800b080:	e0bff815 	stw	r2,-32(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 800b084:	e0bff717 	ldw	r2,-36(fp)
 800b088:	10800d17 	ldw	r2,52(r2)
 800b08c:	10001126 	beq	r2,zero,800b0d4 <altera_avalon_mailbox_simple_tx_isr+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b090:	0005303a 	rdctl	r2,status
 800b094:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b098:	e0fffc17 	ldw	r3,-16(fp)
 800b09c:	00bfff84 	movi	r2,-2
 800b0a0:	1884703a 	and	r2,r3,r2
 800b0a4:	1001703a 	wrctl	status,r2
  
  return context;
 800b0a8:	e0bffc17 	ldw	r2,-16(fp)
        {
            cpu_sr = alt_irq_disable_all();
 800b0ac:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 800b0b0:	e0bff717 	ldw	r2,-36(fp)
 800b0b4:	10800d17 	ldw	r2,52(r2)
 800b0b8:	e17ff817 	ldw	r5,-32(fp)
 800b0bc:	e13ff917 	ldw	r4,-28(fp)
 800b0c0:	103ee83a 	callr	r2
 800b0c4:	e0bffb17 	ldw	r2,-20(fp)
 800b0c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b0cc:	e0bffd17 	ldw	r2,-12(fp)
 800b0d0:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 800b0d4:	e0bff717 	ldw	r2,-36(fp)
 800b0d8:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 800b0dc:	e0bff717 	ldw	r2,-36(fp)
 800b0e0:	10001105 	stb	zero,68(r2)
    }
}
 800b0e4:	0001883a 	nop
 800b0e8:	e037883a 	mov	sp,fp
 800b0ec:	dfc00117 	ldw	ra,4(sp)
 800b0f0:	df000017 	ldw	fp,0(sp)
 800b0f4:	dec00204 	addi	sp,sp,8
 800b0f8:	f800283a 	ret

0800b0fc <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 800b0fc:	defff604 	addi	sp,sp,-40
 800b100:	dfc00915 	stw	ra,36(sp)
 800b104:	df000815 	stw	fp,32(sp)
 800b108:	df000804 	addi	fp,sp,32
 800b10c:	e13ffe15 	stw	r4,-8(fp)
 800b110:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 800b114:	e0bffe17 	ldw	r2,-8(fp)
 800b118:	e0bff815 	stw	r2,-32(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 800b11c:	e0bff817 	ldw	r2,-32(fp)
 800b120:	10800a17 	ldw	r2,40(r2)
 800b124:	10800104 	addi	r2,r2,4
 800b128:	10800037 	ldwio	r2,0(r2)
 800b12c:	e0bffd15 	stw	r2,-12(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 800b130:	e0bff817 	ldw	r2,-32(fp)
 800b134:	10800a17 	ldw	r2,40(r2)
 800b138:	10800037 	ldwio	r2,0(r2)
 800b13c:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 800b140:	e0bff817 	ldw	r2,-32(fp)
 800b144:	10800e17 	ldw	r2,56(r2)
 800b148:	10001126 	beq	r2,zero,800b190 <altera_avalon_mailbox_simple_rx_isr+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b14c:	0005303a 	rdctl	r2,status
 800b150:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b154:	e0fffa17 	ldw	r3,-24(fp)
 800b158:	00bfff84 	movi	r2,-2
 800b15c:	1884703a 	and	r2,r3,r2
 800b160:	1001703a 	wrctl	status,r2
  
  return context;
 800b164:	e0bffa17 	ldw	r2,-24(fp)
    {
        cpu_sr = alt_irq_disable_all();
 800b168:	e0bff915 	stw	r2,-28(fp)
        (dev->rx_cb)(inbox);
 800b16c:	e0bff817 	ldw	r2,-32(fp)
 800b170:	10800e17 	ldw	r2,56(r2)
 800b174:	e0fffc04 	addi	r3,fp,-16
 800b178:	1809883a 	mov	r4,r3
 800b17c:	103ee83a 	callr	r2
 800b180:	e0bff917 	ldw	r2,-28(fp)
 800b184:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b188:	e0bffb17 	ldw	r2,-20(fp)
 800b18c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 800b190:	0001883a 	nop
 800b194:	e037883a 	mov	sp,fp
 800b198:	dfc00117 	ldw	ra,4(sp)
 800b19c:	df000017 	ldw	fp,0(sp)
 800b1a0:	dec00204 	addi	sp,sp,8
 800b1a4:	f800283a 	ret

0800b1a8 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 800b1a8:	defffb04 	addi	sp,sp,-20
 800b1ac:	dfc00415 	stw	ra,16(sp)
 800b1b0:	df000315 	stw	fp,12(sp)
 800b1b4:	df000304 	addi	fp,sp,12
 800b1b8:	e13ffd15 	stw	r4,-12(fp)
 800b1bc:	e17ffe15 	stw	r5,-8(fp)
 800b1c0:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 800b1c4:	d1600c04 	addi	r5,gp,-32720
 800b1c8:	e13ffd17 	ldw	r4,-12(fp)
 800b1cc:	800c56c0 	call	800c56c <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 800b1d0:	e0ffff17 	ldw	r3,-4(fp)
 800b1d4:	e0bffd17 	ldw	r2,-12(fp)
 800b1d8:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 800b1dc:	e0fffe17 	ldw	r3,-8(fp)
 800b1e0:	e0bffd17 	ldw	r2,-12(fp)
 800b1e4:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 800b1e8:	e0bffd17 	ldw	r2,-12(fp)
 800b1ec:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 800b1f0:	e0bffd17 	ldw	r2,-12(fp)
 800b1f4:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 800b1f8:	e0bffd17 	ldw	r2,-12(fp)
 800b1fc:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 800b200:	e13ffd17 	ldw	r4,-12(fp)
 800b204:	800aeb80 	call	800aeb8 <altera_avalon_mailbox_identify>
}
 800b208:	0001883a 	nop
 800b20c:	e037883a 	mov	sp,fp
 800b210:	dfc00117 	ldw	ra,4(sp)
 800b214:	df000017 	ldw	fp,0(sp)
 800b218:	dec00204 	addi	sp,sp,8
 800b21c:	f800283a 	ret

0800b220 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 800b220:	defff904 	addi	sp,sp,-28
 800b224:	dfc00615 	stw	ra,24(sp)
 800b228:	df000515 	stw	fp,20(sp)
 800b22c:	df000504 	addi	fp,sp,20
 800b230:	e13ffd15 	stw	r4,-12(fp)
 800b234:	e17ffe15 	stw	r5,-8(fp)
 800b238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 800b23c:	d1600c04 	addi	r5,gp,-32720
 800b240:	e13ffd17 	ldw	r4,-12(fp)
 800b244:	800c6d00 	call	800c6d0 <alt_find_dev>
 800b248:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 800b24c:	e0bffb17 	ldw	r2,-20(fp)
 800b250:	1000021e 	bne	r2,zero,800b25c <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 800b254:	0005883a 	mov	r2,zero
 800b258:	00005d06 	br	800b3d0 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 800b25c:	e0bffb17 	ldw	r2,-20(fp)
 800b260:	10800a17 	ldw	r2,40(r2)
 800b264:	10800304 	addi	r2,r2,12
 800b268:	10800037 	ldwio	r2,0(r2)
 800b26c:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 800b270:	e0bffb17 	ldw	r2,-20(fp)
 800b274:	10800f17 	ldw	r2,60(r2)
 800b278:	1000081e 	bne	r2,zero,800b29c <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 800b27c:	e0bffb17 	ldw	r2,-20(fp)
 800b280:	10800a17 	ldw	r2,40(r2)
 800b284:	10800304 	addi	r2,r2,12
 800b288:	1009883a 	mov	r4,r2
 800b28c:	e0fffc17 	ldw	r3,-16(fp)
 800b290:	00bfff44 	movi	r2,-3
 800b294:	1884703a 	and	r2,r3,r2
 800b298:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 800b29c:	e0bffb17 	ldw	r2,-20(fp)
 800b2a0:	10800f17 	ldw	r2,60(r2)
 800b2a4:	10800058 	cmpnei	r2,r2,1
 800b2a8:	1000081e 	bne	r2,zero,800b2cc <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 800b2ac:	e0bffb17 	ldw	r2,-20(fp)
 800b2b0:	10800a17 	ldw	r2,40(r2)
 800b2b4:	10800304 	addi	r2,r2,12
 800b2b8:	1009883a 	mov	r4,r2
 800b2bc:	e0fffc17 	ldw	r3,-16(fp)
 800b2c0:	00bfff84 	movi	r2,-2
 800b2c4:	1884703a 	and	r2,r3,r2
 800b2c8:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 800b2cc:	e0bffb17 	ldw	r2,-20(fp)
 800b2d0:	10800b17 	ldw	r2,44(r2)
 800b2d4:	10bfffd8 	cmpnei	r2,r2,-1
 800b2d8:	1000021e 	bne	r2,zero,800b2e4 <altera_avalon_mailbox_open+0xc4>
        return dev;
 800b2dc:	e0bffb17 	ldw	r2,-20(fp)
 800b2e0:	00003b06 	br	800b3d0 <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 800b2e4:	e0bffe17 	ldw	r2,-8(fp)
 800b2e8:	1000041e 	bne	r2,zero,800b2fc <altera_avalon_mailbox_open+0xdc>
 800b2ec:	e0bfff17 	ldw	r2,-4(fp)
 800b2f0:	1000021e 	bne	r2,zero,800b2fc <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 800b2f4:	e0bffb17 	ldw	r2,-20(fp)
 800b2f8:	00003506 	br	800b3d0 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 800b2fc:	e0bffb17 	ldw	r2,-20(fp)
 800b300:	10800f17 	ldw	r2,60(r2)
 800b304:	1000021e 	bne	r2,zero,800b310 <altera_avalon_mailbox_open+0xf0>
 800b308:	e0bfff17 	ldw	r2,-4(fp)
 800b30c:	1000061e 	bne	r2,zero,800b328 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 800b310:	e0bffb17 	ldw	r2,-20(fp)
 800b314:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 800b318:	10800058 	cmpnei	r2,r2,1
 800b31c:	1000041e 	bne	r2,zero,800b330 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 800b320:	e0bffe17 	ldw	r2,-8(fp)
 800b324:	10000226 	beq	r2,zero,800b330 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 800b328:	0005883a 	mov	r2,zero
 800b32c:	00002806 	br	800b3d0 <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 800b330:	e0bffb17 	ldw	r2,-20(fp)
 800b334:	e0fffe17 	ldw	r3,-8(fp)
 800b338:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 800b33c:	e0bffb17 	ldw	r2,-20(fp)
 800b340:	e0ffff17 	ldw	r3,-4(fp)
 800b344:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 800b348:	e0bffb17 	ldw	r2,-20(fp)
 800b34c:	10800f17 	ldw	r2,60(r2)
 800b350:	1000071e 	bne	r2,zero,800b370 <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
 800b354:	e0bffb17 	ldw	r2,-20(fp)
 800b358:	10800b17 	ldw	r2,44(r2)
 800b35c:	01820074 	movhi	r6,2049
 800b360:	31abf004 	addi	r6,r6,-20544
 800b364:	e17ffb17 	ldw	r5,-20(fp)
 800b368:	1009883a 	mov	r4,r2
 800b36c:	800c8d40 	call	800c8d4 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 800b370:	e0bffb17 	ldw	r2,-20(fp)
 800b374:	10800f17 	ldw	r2,60(r2)
 800b378:	10800058 	cmpnei	r2,r2,1
 800b37c:	1000131e 	bne	r2,zero,800b3cc <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
 800b380:	e0bffb17 	ldw	r2,-20(fp)
 800b384:	10800b17 	ldw	r2,44(r2)
 800b388:	01820074 	movhi	r6,2049
 800b38c:	31ac3f04 	addi	r6,r6,-20228
 800b390:	e17ffb17 	ldw	r5,-20(fp)
 800b394:	1009883a 	mov	r4,r2
 800b398:	800c8d40 	call	800c8d4 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 800b39c:	e0bffb17 	ldw	r2,-20(fp)
 800b3a0:	10800a17 	ldw	r2,40(r2)
 800b3a4:	10800304 	addi	r2,r2,12
 800b3a8:	10800037 	ldwio	r2,0(r2)
 800b3ac:	10800054 	ori	r2,r2,1
 800b3b0:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 800b3b4:	e0bffb17 	ldw	r2,-20(fp)
 800b3b8:	10800a17 	ldw	r2,40(r2)
 800b3bc:	10800304 	addi	r2,r2,12
 800b3c0:	1007883a 	mov	r3,r2
 800b3c4:	e0bffc17 	ldw	r2,-16(fp)
 800b3c8:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 800b3cc:	e0bffb17 	ldw	r2,-20(fp)
}
 800b3d0:	e037883a 	mov	sp,fp
 800b3d4:	dfc00117 	ldw	ra,4(sp)
 800b3d8:	df000017 	ldw	fp,0(sp)
 800b3dc:	dec00204 	addi	sp,sp,8
 800b3e0:	f800283a 	ret

0800b3e4 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 800b3e4:	defffc04 	addi	sp,sp,-16
 800b3e8:	dfc00315 	stw	ra,12(sp)
 800b3ec:	df000215 	stw	fp,8(sp)
 800b3f0:	df000204 	addi	fp,sp,8
 800b3f4:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 800b3f8:	e0bfff17 	ldw	r2,-4(fp)
 800b3fc:	10003526 	beq	r2,zero,800b4d4 <altera_avalon_mailbox_close+0xf0>
 800b400:	e0bfff17 	ldw	r2,-4(fp)
 800b404:	10800b17 	ldw	r2,44(r2)
 800b408:	10bfffe0 	cmpeqi	r2,r2,-1
 800b40c:	1000311e 	bne	r2,zero,800b4d4 <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 800b410:	e0bfff17 	ldw	r2,-4(fp)
 800b414:	10800f17 	ldw	r2,60(r2)
 800b418:	10000e1e 	bne	r2,zero,800b454 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 800b41c:	e0bfff17 	ldw	r2,-4(fp)
 800b420:	10800a17 	ldw	r2,40(r2)
 800b424:	10800304 	addi	r2,r2,12
 800b428:	10800037 	ldwio	r2,0(r2)
 800b42c:	1007883a 	mov	r3,r2
 800b430:	00bfff44 	movi	r2,-3
 800b434:	1884703a 	and	r2,r3,r2
 800b438:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 800b43c:	e0bfff17 	ldw	r2,-4(fp)
 800b440:	10800a17 	ldw	r2,40(r2)
 800b444:	10800304 	addi	r2,r2,12
 800b448:	1007883a 	mov	r3,r2
 800b44c:	e0bffe17 	ldw	r2,-8(fp)
 800b450:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 800b454:	e0bfff17 	ldw	r2,-4(fp)
 800b458:	10800f17 	ldw	r2,60(r2)
 800b45c:	10800058 	cmpnei	r2,r2,1
 800b460:	10000e1e 	bne	r2,zero,800b49c <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 800b464:	e0bfff17 	ldw	r2,-4(fp)
 800b468:	10800a17 	ldw	r2,40(r2)
 800b46c:	10800304 	addi	r2,r2,12
 800b470:	10800037 	ldwio	r2,0(r2)
 800b474:	1007883a 	mov	r3,r2
 800b478:	00bfff84 	movi	r2,-2
 800b47c:	1884703a 	and	r2,r3,r2
 800b480:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 800b484:	e0bfff17 	ldw	r2,-4(fp)
 800b488:	10800a17 	ldw	r2,40(r2)
 800b48c:	10800304 	addi	r2,r2,12
 800b490:	1007883a 	mov	r3,r2
 800b494:	e0bffe17 	ldw	r2,-8(fp)
 800b498:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 800b49c:	e0bfff17 	ldw	r2,-4(fp)
 800b4a0:	10800b17 	ldw	r2,44(r2)
 800b4a4:	10bfffe0 	cmpeqi	r2,r2,-1
 800b4a8:	1000061e 	bne	r2,zero,800b4c4 <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
 800b4ac:	e0bfff17 	ldw	r2,-4(fp)
 800b4b0:	10800b17 	ldw	r2,44(r2)
 800b4b4:	000d883a 	mov	r6,zero
 800b4b8:	e17fff17 	ldw	r5,-4(fp)
 800b4bc:	1009883a 	mov	r4,r2
 800b4c0:	800c8d40 	call	800c8d4 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 800b4c4:	e0bfff17 	ldw	r2,-4(fp)
 800b4c8:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 800b4cc:	e0bfff17 	ldw	r2,-4(fp)
 800b4d0:	10000e15 	stw	zero,56(r2)
    }
}
 800b4d4:	0001883a 	nop
 800b4d8:	e037883a 	mov	sp,fp
 800b4dc:	dfc00117 	ldw	ra,4(sp)
 800b4e0:	df000017 	ldw	fp,0(sp)
 800b4e4:	dec00204 	addi	sp,sp,8
 800b4e8:	f800283a 	ret

0800b4ec <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 800b4ec:	defffd04 	addi	sp,sp,-12
 800b4f0:	df000215 	stw	fp,8(sp)
 800b4f4:	df000204 	addi	fp,sp,8
 800b4f8:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 800b4fc:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 800b500:	e0bfff17 	ldw	r2,-4(fp)
 800b504:	10800a17 	ldw	r2,40(r2)
 800b508:	10800204 	addi	r2,r2,8
 800b50c:	10800037 	ldwio	r2,0(r2)
 800b510:	108000cc 	andi	r2,r2,3
 800b514:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 800b518:	e0bfff17 	ldw	r2,-4(fp)
 800b51c:	10800f17 	ldw	r2,60(r2)
 800b520:	1000041e 	bne	r2,zero,800b534 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 800b524:	e0bffe17 	ldw	r2,-8(fp)
 800b528:	1080008c 	andi	r2,r2,2
 800b52c:	1004d07a 	srli	r2,r2,1
 800b530:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 800b534:	e0bfff17 	ldw	r2,-4(fp)
 800b538:	10800f17 	ldw	r2,60(r2)
 800b53c:	10800058 	cmpnei	r2,r2,1
 800b540:	1000031e 	bne	r2,zero,800b550 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 800b544:	e0bffe17 	ldw	r2,-8(fp)
 800b548:	1080004c 	andi	r2,r2,1
 800b54c:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 800b550:	e0bffe17 	ldw	r2,-8(fp)
}
 800b554:	e037883a 	mov	sp,fp
 800b558:	df000017 	ldw	fp,0(sp)
 800b55c:	dec00104 	addi	sp,sp,4
 800b560:	f800283a 	ret

0800b564 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 800b564:	defff704 	addi	sp,sp,-36
 800b568:	dfc00815 	stw	ra,32(sp)
 800b56c:	df000715 	stw	fp,28(sp)
 800b570:	df000704 	addi	fp,sp,28
 800b574:	e13ffc15 	stw	r4,-16(fp)
 800b578:	e17ffd15 	stw	r5,-12(fp)
 800b57c:	e1bffe15 	stw	r6,-8(fp)
 800b580:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 800b584:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 800b588:	e0bffc17 	ldw	r2,-16(fp)
 800b58c:	10801103 	ldbu	r2,68(r2)
 800b590:	10803fcc 	andi	r2,r2,255
 800b594:	1000061e 	bne	r2,zero,800b5b0 <altera_avalon_mailbox_send+0x4c>
 800b598:	e0bffc17 	ldw	r2,-16(fp)
 800b59c:	10800a17 	ldw	r2,40(r2)
 800b5a0:	10800204 	addi	r2,r2,8
 800b5a4:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 800b5a8:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 800b5ac:	10000226 	beq	r2,zero,800b5b8 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 800b5b0:	00bfffc4 	movi	r2,-1
 800b5b4:	00003a06 	br	800b6a0 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 800b5b8:	e0bffc17 	ldw	r2,-16(fp)
 800b5bc:	e0fffd17 	ldw	r3,-12(fp)
 800b5c0:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 800b5c4:	e0bffc17 	ldw	r2,-16(fp)
 800b5c8:	00c00044 	movi	r3,1
 800b5cc:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 800b5d0:	e0bffc17 	ldw	r2,-16(fp)
 800b5d4:	10800b17 	ldw	r2,44(r2)
 800b5d8:	10bfffe0 	cmpeqi	r2,r2,-1
 800b5dc:	1000031e 	bne	r2,zero,800b5ec <altera_avalon_mailbox_send+0x88>
 800b5e0:	e0bfff17 	ldw	r2,-4(fp)
 800b5e4:	10800058 	cmpnei	r2,r2,1
 800b5e8:	1000201e 	bne	r2,zero,800b66c <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout == 0)
 800b5ec:	e0bffe17 	ldw	r2,-8(fp)
 800b5f0:	1000061e 	bne	r2,zero,800b60c <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 800b5f4:	e13ffc17 	ldw	r4,-16(fp)
 800b5f8:	800b4ec0 	call	800b4ec <altera_avalon_mailbox_status>
 800b5fc:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 800b600:	e0bffb17 	ldw	r2,-20(fp)
 800b604:	103ffb1e 	bne	r2,zero,800b5f4 <__alt_data_end+0xfc00b5f4>
 800b608:	00000e06 	br	800b644 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 800b60c:	e13ffc17 	ldw	r4,-16(fp)
 800b610:	800b4ec0 	call	800b4ec <altera_avalon_mailbox_status>
 800b614:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 800b618:	e0bffe17 	ldw	r2,-8(fp)
 800b61c:	10bfffc4 	addi	r2,r2,-1
 800b620:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 800b624:	e0bffb17 	ldw	r2,-20(fp)
 800b628:	10000226 	beq	r2,zero,800b634 <altera_avalon_mailbox_send+0xd0>
 800b62c:	e0bffe17 	ldw	r2,-8(fp)
 800b630:	103ff61e 	bne	r2,zero,800b60c <__alt_data_end+0xfc00b60c>
            if (timeout == 0)
 800b634:	e0bffe17 	ldw	r2,-8(fp)
 800b638:	1000021e 	bne	r2,zero,800b644 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 800b63c:	00bff084 	movi	r2,-62
 800b640:	00001706 	br	800b6a0 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 800b644:	e17ffd17 	ldw	r5,-12(fp)
 800b648:	e13ffc17 	ldw	r4,-16(fp)
 800b64c:	800af480 	call	800af48 <altera_avalon_mailbox_post>
 800b650:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 800b654:	e0bffc17 	ldw	r2,-16(fp)
 800b658:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 800b65c:	e0bffc17 	ldw	r2,-16(fp)
 800b660:	10001105 	stb	zero,68(r2)
        return status;
 800b664:	e0bff917 	ldw	r2,-28(fp)
 800b668:	00000d06 	br	800b6a0 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 800b66c:	e0bffc17 	ldw	r2,-16(fp)
 800b670:	10800a17 	ldw	r2,40(r2)
 800b674:	10800304 	addi	r2,r2,12
 800b678:	10800037 	ldwio	r2,0(r2)
 800b67c:	10800094 	ori	r2,r2,2
 800b680:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 800b684:	e0bffc17 	ldw	r2,-16(fp)
 800b688:	10800a17 	ldw	r2,40(r2)
 800b68c:	10800304 	addi	r2,r2,12
 800b690:	1007883a 	mov	r3,r2
 800b694:	e0bffa17 	ldw	r2,-24(fp)
 800b698:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 800b69c:	0005883a 	mov	r2,zero
}
 800b6a0:	e037883a 	mov	sp,fp
 800b6a4:	dfc00117 	ldw	ra,4(sp)
 800b6a8:	df000017 	ldw	fp,0(sp)
 800b6ac:	dec00204 	addi	sp,sp,8
 800b6b0:	f800283a 	ret

0800b6b4 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 800b6b4:	defff904 	addi	sp,sp,-28
 800b6b8:	dfc00615 	stw	ra,24(sp)
 800b6bc:	df000515 	stw	fp,20(sp)
 800b6c0:	df000504 	addi	fp,sp,20
 800b6c4:	e13ffd15 	stw	r4,-12(fp)
 800b6c8:	e17ffe15 	stw	r5,-8(fp)
 800b6cc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 800b6d0:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 800b6d4:	e0bffd17 	ldw	r2,-12(fp)
 800b6d8:	10003a26 	beq	r2,zero,800b7c4 <altera_avalon_mailbox_retrieve_poll+0x110>
 800b6dc:	e0bffe17 	ldw	r2,-8(fp)
 800b6e0:	10003826 	beq	r2,zero,800b7c4 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 800b6e4:	e0bffd17 	ldw	r2,-12(fp)
 800b6e8:	10800a17 	ldw	r2,40(r2)
 800b6ec:	10800304 	addi	r2,r2,12
 800b6f0:	10800037 	ldwio	r2,0(r2)
 800b6f4:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 800b6f8:	e0bffd17 	ldw	r2,-12(fp)
 800b6fc:	10800a17 	ldw	r2,40(r2)
 800b700:	10800304 	addi	r2,r2,12
 800b704:	1009883a 	mov	r4,r2
 800b708:	e0fffc17 	ldw	r3,-16(fp)
 800b70c:	00bfff84 	movi	r2,-2
 800b710:	1884703a 	and	r2,r3,r2
 800b714:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 800b718:	e0bfff17 	ldw	r2,-4(fp)
 800b71c:	1000061e 	bne	r2,zero,800b738 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 800b720:	e13ffd17 	ldw	r4,-12(fp)
 800b724:	800b4ec0 	call	800b4ec <altera_avalon_mailbox_status>
 800b728:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 800b72c:	e0bffb17 	ldw	r2,-20(fp)
 800b730:	103ffb26 	beq	r2,zero,800b720 <__alt_data_end+0xfc00b720>
 800b734:	00000a06 	br	800b760 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 800b738:	e13ffd17 	ldw	r4,-12(fp)
 800b73c:	800b4ec0 	call	800b4ec <altera_avalon_mailbox_status>
 800b740:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 800b744:	e0bfff17 	ldw	r2,-4(fp)
 800b748:	10bfffc4 	addi	r2,r2,-1
 800b74c:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 800b750:	e0bffb17 	ldw	r2,-20(fp)
 800b754:	1000021e 	bne	r2,zero,800b760 <altera_avalon_mailbox_retrieve_poll+0xac>
 800b758:	e0bfff17 	ldw	r2,-4(fp)
 800b75c:	103ff61e 	bne	r2,zero,800b738 <__alt_data_end+0xfc00b738>
        }

        /* if timeout, status remain 0 */
        if (status)
 800b760:	e0bffb17 	ldw	r2,-20(fp)
 800b764:	10000d26 	beq	r2,zero,800b79c <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 800b768:	e0bffe17 	ldw	r2,-8(fp)
 800b76c:	10800104 	addi	r2,r2,4
 800b770:	e0fffd17 	ldw	r3,-12(fp)
 800b774:	18c00a17 	ldw	r3,40(r3)
 800b778:	18c00104 	addi	r3,r3,4
 800b77c:	18c00037 	ldwio	r3,0(r3)
 800b780:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 800b784:	e0bffd17 	ldw	r2,-12(fp)
 800b788:	10800a17 	ldw	r2,40(r2)
 800b78c:	10800037 	ldwio	r2,0(r2)
 800b790:	1007883a 	mov	r3,r2
 800b794:	e0bffe17 	ldw	r2,-8(fp)
 800b798:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 800b79c:	e0bffd17 	ldw	r2,-12(fp)
 800b7a0:	10800a17 	ldw	r2,40(r2)
 800b7a4:	10800304 	addi	r2,r2,12
 800b7a8:	1007883a 	mov	r3,r2
 800b7ac:	e0bffc17 	ldw	r2,-16(fp)
 800b7b0:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 800b7b4:	e0bffb17 	ldw	r2,-20(fp)
 800b7b8:	10000226 	beq	r2,zero,800b7c4 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 800b7bc:	0005883a 	mov	r2,zero
 800b7c0:	00000606 	br	800b7dc <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 800b7c4:	e0bffe17 	ldw	r2,-8(fp)
 800b7c8:	10800104 	addi	r2,r2,4
 800b7cc:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 800b7d0:	e0bffe17 	ldw	r2,-8(fp)
 800b7d4:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 800b7d8:	00bffa84 	movi	r2,-22
}
 800b7dc:	e037883a 	mov	sp,fp
 800b7e0:	dfc00117 	ldw	ra,4(sp)
 800b7e4:	df000017 	ldw	fp,0(sp)
 800b7e8:	dec00204 	addi	sp,sp,8
 800b7ec:	f800283a 	ret

0800b7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b7f0:	defffe04 	addi	sp,sp,-8
 800b7f4:	dfc00115 	stw	ra,4(sp)
 800b7f8:	df000015 	stw	fp,0(sp)
 800b7fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b800:	d0a00a17 	ldw	r2,-32728(gp)
 800b804:	10000326 	beq	r2,zero,800b814 <alt_get_errno+0x24>
 800b808:	d0a00a17 	ldw	r2,-32728(gp)
 800b80c:	103ee83a 	callr	r2
 800b810:	00000106 	br	800b818 <alt_get_errno+0x28>
 800b814:	d0a6e404 	addi	r2,gp,-25712
}
 800b818:	e037883a 	mov	sp,fp
 800b81c:	dfc00117 	ldw	ra,4(sp)
 800b820:	df000017 	ldw	fp,0(sp)
 800b824:	dec00204 	addi	sp,sp,8
 800b828:	f800283a 	ret

0800b82c <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 800b82c:	defff904 	addi	sp,sp,-28
 800b830:	df000615 	stw	fp,24(sp)
 800b834:	df000604 	addi	fp,sp,24
 800b838:	e13ffe15 	stw	r4,-8(fp)
 800b83c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 800b840:	00bfffc4 	movi	r2,-1
 800b844:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 800b848:	0005317a 	rdctl	r2,cpuid
 800b84c:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 800b850:	e0bffb17 	ldw	r2,-20(fp)
 800b854:	1006943a 	slli	r3,r2,16
 800b858:	e0bfff17 	ldw	r2,-4(fp)
 800b85c:	1884b03a 	or	r2,r3,r2
 800b860:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 800b864:	e0bffe17 	ldw	r2,-8(fp)
 800b868:	10800317 	ldw	r2,12(r2)
 800b86c:	e0fffc17 	ldw	r3,-16(fp)
 800b870:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 800b874:	e0bffe17 	ldw	r2,-8(fp)
 800b878:	10800317 	ldw	r2,12(r2)
 800b87c:	10800037 	ldwio	r2,0(r2)
 800b880:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 800b884:	e0fffd17 	ldw	r3,-12(fp)
 800b888:	e0bffc17 	ldw	r2,-16(fp)
 800b88c:	1880011e 	bne	r3,r2,800b894 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 800b890:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 800b894:	e0bffa17 	ldw	r2,-24(fp)
}
 800b898:	e037883a 	mov	sp,fp
 800b89c:	df000017 	ldw	fp,0(sp)
 800b8a0:	dec00104 	addi	sp,sp,4
 800b8a4:	f800283a 	ret

0800b8a8 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 800b8a8:	defffc04 	addi	sp,sp,-16
 800b8ac:	dfc00315 	stw	ra,12(sp)
 800b8b0:	df000215 	stw	fp,8(sp)
 800b8b4:	df000204 	addi	fp,sp,8
 800b8b8:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 800b8bc:	d1600e04 	addi	r5,gp,-32712
 800b8c0:	e13fff17 	ldw	r4,-4(fp)
 800b8c4:	800c6d00 	call	800c6d0 <alt_find_dev>
 800b8c8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 800b8cc:	e0bffe17 	ldw	r2,-8(fp)
 800b8d0:	1000041e 	bne	r2,zero,800b8e4 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 800b8d4:	800b7f00 	call	800b7f0 <alt_get_errno>
 800b8d8:	1007883a 	mov	r3,r2
 800b8dc:	008004c4 	movi	r2,19
 800b8e0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 800b8e4:	e0bffe17 	ldw	r2,-8(fp)
}
 800b8e8:	e037883a 	mov	sp,fp
 800b8ec:	dfc00117 	ldw	ra,4(sp)
 800b8f0:	df000017 	ldw	fp,0(sp)
 800b8f4:	dec00204 	addi	sp,sp,8
 800b8f8:	f800283a 	ret

0800b8fc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 800b8fc:	defffe04 	addi	sp,sp,-8
 800b900:	df000115 	stw	fp,4(sp)
 800b904:	df000104 	addi	fp,sp,4
 800b908:	e13fff15 	stw	r4,-4(fp)
  return;
 800b90c:	0001883a 	nop
}
 800b910:	e037883a 	mov	sp,fp
 800b914:	df000017 	ldw	fp,0(sp)
 800b918:	dec00104 	addi	sp,sp,4
 800b91c:	f800283a 	ret

0800b920 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 800b920:	defffc04 	addi	sp,sp,-16
 800b924:	dfc00315 	stw	ra,12(sp)
 800b928:	df000215 	stw	fp,8(sp)
 800b92c:	df000204 	addi	fp,sp,8
 800b930:	e13ffe15 	stw	r4,-8(fp)
 800b934:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 800b938:	0001883a 	nop
 800b93c:	e17fff17 	ldw	r5,-4(fp)
 800b940:	e13ffe17 	ldw	r4,-8(fp)
 800b944:	800b82c0 	call	800b82c <alt_mutex_trylock>
 800b948:	103ffc1e 	bne	r2,zero,800b93c <__alt_data_end+0xfc00b93c>
}
 800b94c:	0001883a 	nop
 800b950:	e037883a 	mov	sp,fp
 800b954:	dfc00117 	ldw	ra,4(sp)
 800b958:	df000017 	ldw	fp,0(sp)
 800b95c:	dec00204 	addi	sp,sp,8
 800b960:	f800283a 	ret

0800b964 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 800b964:	defffa04 	addi	sp,sp,-24
 800b968:	dfc00515 	stw	ra,20(sp)
 800b96c:	df000415 	stw	fp,16(sp)
 800b970:	df000404 	addi	fp,sp,16
 800b974:	e13ffd15 	stw	r4,-12(fp)
 800b978:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 800b97c:	e17ffe17 	ldw	r5,-8(fp)
 800b980:	e13ffd17 	ldw	r4,-12(fp)
 800b984:	800b82c0 	call	800b82c <alt_mutex_trylock>
 800b988:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 800b98c:	e0bffc17 	ldw	r2,-16(fp)
}
 800b990:	e037883a 	mov	sp,fp
 800b994:	dfc00117 	ldw	ra,4(sp)
 800b998:	df000017 	ldw	fp,0(sp)
 800b99c:	dec00204 	addi	sp,sp,8
 800b9a0:	f800283a 	ret

0800b9a4 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 800b9a4:	defffd04 	addi	sp,sp,-12
 800b9a8:	df000215 	stw	fp,8(sp)
 800b9ac:	df000204 	addi	fp,sp,8
 800b9b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 800b9b4:	0005317a 	rdctl	r2,cpuid
 800b9b8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 800b9bc:	e0bfff17 	ldw	r2,-4(fp)
 800b9c0:	10800317 	ldw	r2,12(r2)
 800b9c4:	10800104 	addi	r2,r2,4
 800b9c8:	00c00044 	movi	r3,1
 800b9cc:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 800b9d0:	e0bfff17 	ldw	r2,-4(fp)
 800b9d4:	10800317 	ldw	r2,12(r2)
 800b9d8:	e0fffe17 	ldw	r3,-8(fp)
 800b9dc:	1806943a 	slli	r3,r3,16
 800b9e0:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 800b9e4:	0001883a 	nop
 800b9e8:	e037883a 	mov	sp,fp
 800b9ec:	df000017 	ldw	fp,0(sp)
 800b9f0:	dec00104 	addi	sp,sp,4
 800b9f4:	f800283a 	ret

0800b9f8 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 800b9f8:	defff904 	addi	sp,sp,-28
 800b9fc:	df000615 	stw	fp,24(sp)
 800ba00:	df000604 	addi	fp,sp,24
 800ba04:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 800ba08:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 800ba0c:	0005317a 	rdctl	r2,cpuid
 800ba10:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 800ba14:	e0bfff17 	ldw	r2,-4(fp)
 800ba18:	10800317 	ldw	r2,12(r2)
 800ba1c:	10800037 	ldwio	r2,0(r2)
 800ba20:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 800ba24:	e0bffc17 	ldw	r2,-16(fp)
 800ba28:	1004d43a 	srli	r2,r2,16
 800ba2c:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 800ba30:	e0fffd17 	ldw	r3,-12(fp)
 800ba34:	e0bffb17 	ldw	r2,-20(fp)
 800ba38:	1880071e 	bne	r3,r2,800ba58 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 800ba3c:	e0bffc17 	ldw	r2,-16(fp)
 800ba40:	10bfffcc 	andi	r2,r2,65535
 800ba44:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 800ba48:	e0bffe17 	ldw	r2,-8(fp)
 800ba4c:	10000226 	beq	r2,zero,800ba58 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 800ba50:	00800044 	movi	r2,1
 800ba54:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 800ba58:	e0bffa17 	ldw	r2,-24(fp)
}
 800ba5c:	e037883a 	mov	sp,fp
 800ba60:	df000017 	ldw	fp,0(sp)
 800ba64:	dec00104 	addi	sp,sp,4
 800ba68:	f800283a 	ret

0800ba6c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 800ba6c:	defffc04 	addi	sp,sp,-16
 800ba70:	df000315 	stw	fp,12(sp)
 800ba74:	df000304 	addi	fp,sp,12
 800ba78:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 800ba7c:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 800ba80:	e0bfff17 	ldw	r2,-4(fp)
 800ba84:	10800317 	ldw	r2,12(r2)
 800ba88:	10800104 	addi	r2,r2,4
 800ba8c:	10800037 	ldwio	r2,0(r2)
 800ba90:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 800ba94:	e0bffe17 	ldw	r2,-8(fp)
 800ba98:	1080004c 	andi	r2,r2,1
 800ba9c:	10000226 	beq	r2,zero,800baa8 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 800baa0:	00800044 	movi	r2,1
 800baa4:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 800baa8:	e0bffd17 	ldw	r2,-12(fp)
}
 800baac:	e037883a 	mov	sp,fp
 800bab0:	df000017 	ldw	fp,0(sp)
 800bab4:	dec00104 	addi	sp,sp,4
 800bab8:	f800283a 	ret

0800babc <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 800babc:	defffc04 	addi	sp,sp,-16
 800bac0:	dfc00315 	stw	ra,12(sp)
 800bac4:	df000215 	stw	fp,8(sp)
 800bac8:	df000204 	addi	fp,sp,8
 800bacc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 800bad0:	d1600704 	addi	r5,gp,-32740
 800bad4:	e13fff17 	ldw	r4,-4(fp)
 800bad8:	800c6d00 	call	800c6d0 <alt_find_dev>
 800badc:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 800bae0:	e0bffe17 	ldw	r2,-8(fp)
}
 800bae4:	e037883a 	mov	sp,fp
 800bae8:	dfc00117 	ldw	ra,4(sp)
 800baec:	df000017 	ldw	fp,0(sp)
 800baf0:	dec00204 	addi	sp,sp,8
 800baf4:	f800283a 	ret

0800baf8 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 800baf8:	defffd04 	addi	sp,sp,-12
 800bafc:	df000215 	stw	fp,8(sp)
 800bb00:	df000204 	addi	fp,sp,8
 800bb04:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 800bb08:	e0bfff17 	ldw	r2,-4(fp)
 800bb0c:	10800a17 	ldw	r2,40(r2)
 800bb10:	10800037 	ldwio	r2,0(r2)
 800bb14:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 800bb18:	e0bffe17 	ldw	r2,-8(fp)
 800bb1c:	10800054 	ori	r2,r2,1
 800bb20:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 800bb24:	e0bfff17 	ldw	r2,-4(fp)
 800bb28:	10800a17 	ldw	r2,40(r2)
 800bb2c:	1007883a 	mov	r3,r2
 800bb30:	e0bffe17 	ldw	r2,-8(fp)
 800bb34:	18800035 	stwio	r2,0(r3)
}
 800bb38:	0001883a 	nop
 800bb3c:	e037883a 	mov	sp,fp
 800bb40:	df000017 	ldw	fp,0(sp)
 800bb44:	dec00104 	addi	sp,sp,4
 800bb48:	f800283a 	ret

0800bb4c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 800bb4c:	defffd04 	addi	sp,sp,-12
 800bb50:	df000215 	stw	fp,8(sp)
 800bb54:	df000204 	addi	fp,sp,8
 800bb58:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 800bb5c:	e0bfff17 	ldw	r2,-4(fp)
 800bb60:	10800a17 	ldw	r2,40(r2)
 800bb64:	10800037 	ldwio	r2,0(r2)
 800bb68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 800bb6c:	e0fffe17 	ldw	r3,-8(fp)
 800bb70:	00bfff84 	movi	r2,-2
 800bb74:	1884703a 	and	r2,r3,r2
 800bb78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 800bb7c:	e0bfff17 	ldw	r2,-4(fp)
 800bb80:	10800a17 	ldw	r2,40(r2)
 800bb84:	1007883a 	mov	r3,r2
 800bb88:	e0bffe17 	ldw	r2,-8(fp)
 800bb8c:	18800035 	stwio	r2,0(r3)
}
 800bb90:	0001883a 	nop
 800bb94:	e037883a 	mov	sp,fp
 800bb98:	df000017 	ldw	fp,0(sp)
 800bb9c:	dec00104 	addi	sp,sp,4
 800bba0:	f800283a 	ret

0800bba4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 800bba4:	defffd04 	addi	sp,sp,-12
 800bba8:	df000215 	stw	fp,8(sp)
 800bbac:	df000204 	addi	fp,sp,8
 800bbb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 800bbb4:	e0bfff17 	ldw	r2,-4(fp)
 800bbb8:	10800a17 	ldw	r2,40(r2)
 800bbbc:	10800037 	ldwio	r2,0(r2)
 800bbc0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 800bbc4:	e0bffe17 	ldw	r2,-8(fp)
 800bbc8:	10800094 	ori	r2,r2,2
 800bbcc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 800bbd0:	e0bfff17 	ldw	r2,-4(fp)
 800bbd4:	10800a17 	ldw	r2,40(r2)
 800bbd8:	1007883a 	mov	r3,r2
 800bbdc:	e0bffe17 	ldw	r2,-8(fp)
 800bbe0:	18800035 	stwio	r2,0(r3)
}
 800bbe4:	0001883a 	nop
 800bbe8:	e037883a 	mov	sp,fp
 800bbec:	df000017 	ldw	fp,0(sp)
 800bbf0:	dec00104 	addi	sp,sp,4
 800bbf4:	f800283a 	ret

0800bbf8 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 800bbf8:	defffd04 	addi	sp,sp,-12
 800bbfc:	df000215 	stw	fp,8(sp)
 800bc00:	df000204 	addi	fp,sp,8
 800bc04:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 800bc08:	e0bfff17 	ldw	r2,-4(fp)
 800bc0c:	10800a17 	ldw	r2,40(r2)
 800bc10:	10800037 	ldwio	r2,0(r2)
 800bc14:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 800bc18:	e0fffe17 	ldw	r3,-8(fp)
 800bc1c:	00bfff44 	movi	r2,-3
 800bc20:	1884703a 	and	r2,r3,r2
 800bc24:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 800bc28:	e0bfff17 	ldw	r2,-4(fp)
 800bc2c:	10800a17 	ldw	r2,40(r2)
 800bc30:	1007883a 	mov	r3,r2
 800bc34:	e0bffe17 	ldw	r2,-8(fp)
 800bc38:	18800035 	stwio	r2,0(r3)
}
 800bc3c:	0001883a 	nop
 800bc40:	e037883a 	mov	sp,fp
 800bc44:	df000017 	ldw	fp,0(sp)
 800bc48:	dec00104 	addi	sp,sp,4
 800bc4c:	f800283a 	ret

0800bc50 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 800bc50:	defffd04 	addi	sp,sp,-12
 800bc54:	df000215 	stw	fp,8(sp)
 800bc58:	df000204 	addi	fp,sp,8
 800bc5c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 800bc60:	e0bfff17 	ldw	r2,-4(fp)
 800bc64:	10800a17 	ldw	r2,40(r2)
 800bc68:	10800037 	ldwio	r2,0(r2)
 800bc6c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 800bc70:	e0bffe17 	ldw	r2,-8(fp)
 800bc74:	1080400c 	andi	r2,r2,256
 800bc78:	1004c03a 	cmpne	r2,r2,zero
 800bc7c:	10803fcc 	andi	r2,r2,255
}
 800bc80:	e037883a 	mov	sp,fp
 800bc84:	df000017 	ldw	fp,0(sp)
 800bc88:	dec00104 	addi	sp,sp,4
 800bc8c:	f800283a 	ret

0800bc90 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 800bc90:	defffd04 	addi	sp,sp,-12
 800bc94:	df000215 	stw	fp,8(sp)
 800bc98:	df000204 	addi	fp,sp,8
 800bc9c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 800bca0:	e0bfff17 	ldw	r2,-4(fp)
 800bca4:	10800a17 	ldw	r2,40(r2)
 800bca8:	10800037 	ldwio	r2,0(r2)
 800bcac:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 800bcb0:	e0bffe17 	ldw	r2,-8(fp)
 800bcb4:	1080800c 	andi	r2,r2,512
 800bcb8:	1004c03a 	cmpne	r2,r2,zero
 800bcbc:	10803fcc 	andi	r2,r2,255
}
 800bcc0:	e037883a 	mov	sp,fp
 800bcc4:	df000017 	ldw	fp,0(sp)
 800bcc8:	dec00104 	addi	sp,sp,4
 800bccc:	f800283a 	ret

0800bcd0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 800bcd0:	defffd04 	addi	sp,sp,-12
 800bcd4:	df000215 	stw	fp,8(sp)
 800bcd8:	df000204 	addi	fp,sp,8
 800bcdc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 800bce0:	e0bfff17 	ldw	r2,-4(fp)
 800bce4:	10800a17 	ldw	r2,40(r2)
 800bce8:	10800037 	ldwio	r2,0(r2)
 800bcec:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 800bcf0:	e0bffe17 	ldw	r2,-8(fp)
 800bcf4:	10800114 	ori	r2,r2,4
 800bcf8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 800bcfc:	e0bffe17 	ldw	r2,-8(fp)
 800bd00:	10800214 	ori	r2,r2,8
 800bd04:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 800bd08:	e0bfff17 	ldw	r2,-4(fp)
 800bd0c:	10800a17 	ldw	r2,40(r2)
 800bd10:	1007883a 	mov	r3,r2
 800bd14:	e0bffe17 	ldw	r2,-8(fp)
 800bd18:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 800bd1c:	e0fffe17 	ldw	r3,-8(fp)
 800bd20:	00bffec4 	movi	r2,-5
 800bd24:	1884703a 	and	r2,r3,r2
 800bd28:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 800bd2c:	e0fffe17 	ldw	r3,-8(fp)
 800bd30:	00bffdc4 	movi	r2,-9
 800bd34:	1884703a 	and	r2,r3,r2
 800bd38:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 800bd3c:	e0bfff17 	ldw	r2,-4(fp)
 800bd40:	10800a17 	ldw	r2,40(r2)
 800bd44:	1007883a 	mov	r3,r2
 800bd48:	e0bffe17 	ldw	r2,-8(fp)
 800bd4c:	18800035 	stwio	r2,0(r3)
}
 800bd50:	0001883a 	nop
 800bd54:	e037883a 	mov	sp,fp
 800bd58:	df000017 	ldw	fp,0(sp)
 800bd5c:	dec00104 	addi	sp,sp,4
 800bd60:	f800283a 	ret

0800bd64 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 800bd64:	defffc04 	addi	sp,sp,-16
 800bd68:	df000315 	stw	fp,12(sp)
 800bd6c:	df000304 	addi	fp,sp,12
 800bd70:	e13ffe15 	stw	r4,-8(fp)
 800bd74:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 800bd78:	e0bffe17 	ldw	r2,-8(fp)
 800bd7c:	10800a17 	ldw	r2,40(r2)
 800bd80:	10800104 	addi	r2,r2,4
 800bd84:	10800037 	ldwio	r2,0(r2)
 800bd88:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 800bd8c:	e0bfff17 	ldw	r2,-4(fp)
 800bd90:	1000041e 	bne	r2,zero,800bda4 <alt_up_audio_read_fifo_avail+0x40>
 800bd94:	e0bffd17 	ldw	r2,-12(fp)
 800bd98:	10bfc00c 	andi	r2,r2,65280
 800bd9c:	1004d23a 	srli	r2,r2,8
 800bda0:	00000206 	br	800bdac <alt_up_audio_read_fifo_avail+0x48>
 800bda4:	e0bffd17 	ldw	r2,-12(fp)
 800bda8:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 800bdac:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 800bdb0:	e0bffd17 	ldw	r2,-12(fp)
}
 800bdb4:	e037883a 	mov	sp,fp
 800bdb8:	df000017 	ldw	fp,0(sp)
 800bdbc:	dec00104 	addi	sp,sp,4
 800bdc0:	f800283a 	ret

0800bdc4 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 800bdc4:	defffa04 	addi	sp,sp,-24
 800bdc8:	dfc00515 	stw	ra,20(sp)
 800bdcc:	df000415 	stw	fp,16(sp)
 800bdd0:	df000404 	addi	fp,sp,16
 800bdd4:	e13ffd15 	stw	r4,-12(fp)
 800bdd8:	e17ffe15 	stw	r5,-8(fp)
 800bddc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 800bde0:	01400044 	movi	r5,1
 800bde4:	e13ffd17 	ldw	r4,-12(fp)
 800bde8:	800bd640 	call	800bd64 <alt_up_audio_read_fifo_avail>
 800bdec:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 800bdf0:	e0bffc17 	ldw	r2,-16(fp)
 800bdf4:	10801868 	cmpgeui	r2,r2,97
 800bdf8:	1000021e 	bne	r2,zero,800be04 <alt_up_audio_record_r+0x40>
		return 0;
 800bdfc:	0005883a 	mov	r2,zero
 800be00:	00000506 	br	800be18 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 800be04:	01c00044 	movi	r7,1
 800be08:	e1bfff17 	ldw	r6,-4(fp)
 800be0c:	e17ffe17 	ldw	r5,-8(fp)
 800be10:	e13ffd17 	ldw	r4,-12(fp)
 800be14:	800bfc40 	call	800bfc4 <alt_up_audio_read_fifo>
}
 800be18:	e037883a 	mov	sp,fp
 800be1c:	dfc00117 	ldw	ra,4(sp)
 800be20:	df000017 	ldw	fp,0(sp)
 800be24:	dec00204 	addi	sp,sp,8
 800be28:	f800283a 	ret

0800be2c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 800be2c:	defffa04 	addi	sp,sp,-24
 800be30:	dfc00515 	stw	ra,20(sp)
 800be34:	df000415 	stw	fp,16(sp)
 800be38:	df000404 	addi	fp,sp,16
 800be3c:	e13ffd15 	stw	r4,-12(fp)
 800be40:	e17ffe15 	stw	r5,-8(fp)
 800be44:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 800be48:	000b883a 	mov	r5,zero
 800be4c:	e13ffd17 	ldw	r4,-12(fp)
 800be50:	800bd640 	call	800bd64 <alt_up_audio_read_fifo_avail>
 800be54:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 800be58:	e0bffc17 	ldw	r2,-16(fp)
 800be5c:	10801868 	cmpgeui	r2,r2,97
 800be60:	1000021e 	bne	r2,zero,800be6c <alt_up_audio_record_l+0x40>
		return 0;
 800be64:	0005883a 	mov	r2,zero
 800be68:	00000506 	br	800be80 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 800be6c:	000f883a 	mov	r7,zero
 800be70:	e1bfff17 	ldw	r6,-4(fp)
 800be74:	e17ffe17 	ldw	r5,-8(fp)
 800be78:	e13ffd17 	ldw	r4,-12(fp)
 800be7c:	800bfc40 	call	800bfc4 <alt_up_audio_read_fifo>
}
 800be80:	e037883a 	mov	sp,fp
 800be84:	dfc00117 	ldw	ra,4(sp)
 800be88:	df000017 	ldw	fp,0(sp)
 800be8c:	dec00204 	addi	sp,sp,8
 800be90:	f800283a 	ret

0800be94 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 800be94:	defffc04 	addi	sp,sp,-16
 800be98:	df000315 	stw	fp,12(sp)
 800be9c:	df000304 	addi	fp,sp,12
 800bea0:	e13ffe15 	stw	r4,-8(fp)
 800bea4:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 800bea8:	e0bffe17 	ldw	r2,-8(fp)
 800beac:	10800a17 	ldw	r2,40(r2)
 800beb0:	10800104 	addi	r2,r2,4
 800beb4:	10800037 	ldwio	r2,0(r2)
 800beb8:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 800bebc:	e0bfff17 	ldw	r2,-4(fp)
 800bec0:	1000031e 	bne	r2,zero,800bed0 <alt_up_audio_write_fifo_space+0x3c>
 800bec4:	e0bffd17 	ldw	r2,-12(fp)
 800bec8:	1004d63a 	srli	r2,r2,24
 800becc:	00000306 	br	800bedc <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 800bed0:	e0bffd17 	ldw	r2,-12(fp)
 800bed4:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 800bed8:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 800bedc:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 800bee0:	e0bffd17 	ldw	r2,-12(fp)
}
 800bee4:	e037883a 	mov	sp,fp
 800bee8:	df000017 	ldw	fp,0(sp)
 800beec:	dec00104 	addi	sp,sp,4
 800bef0:	f800283a 	ret

0800bef4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 800bef4:	defffa04 	addi	sp,sp,-24
 800bef8:	dfc00515 	stw	ra,20(sp)
 800befc:	df000415 	stw	fp,16(sp)
 800bf00:	df000404 	addi	fp,sp,16
 800bf04:	e13ffd15 	stw	r4,-12(fp)
 800bf08:	e17ffe15 	stw	r5,-8(fp)
 800bf0c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 800bf10:	01400044 	movi	r5,1
 800bf14:	e13ffd17 	ldw	r4,-12(fp)
 800bf18:	800be940 	call	800be94 <alt_up_audio_write_fifo_space>
 800bf1c:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 800bf20:	e0bffc17 	ldw	r2,-16(fp)
 800bf24:	10801868 	cmpgeui	r2,r2,97
 800bf28:	1000021e 	bne	r2,zero,800bf34 <alt_up_audio_play_r+0x40>
		return 0;
 800bf2c:	0005883a 	mov	r2,zero
 800bf30:	00000506 	br	800bf48 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 800bf34:	01c00044 	movi	r7,1
 800bf38:	e1bfff17 	ldw	r6,-4(fp)
 800bf3c:	e17ffe17 	ldw	r5,-8(fp)
 800bf40:	e13ffd17 	ldw	r4,-12(fp)
 800bf44:	800c0a40 	call	800c0a4 <alt_up_audio_write_fifo>
}
 800bf48:	e037883a 	mov	sp,fp
 800bf4c:	dfc00117 	ldw	ra,4(sp)
 800bf50:	df000017 	ldw	fp,0(sp)
 800bf54:	dec00204 	addi	sp,sp,8
 800bf58:	f800283a 	ret

0800bf5c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 800bf5c:	defffa04 	addi	sp,sp,-24
 800bf60:	dfc00515 	stw	ra,20(sp)
 800bf64:	df000415 	stw	fp,16(sp)
 800bf68:	df000404 	addi	fp,sp,16
 800bf6c:	e13ffd15 	stw	r4,-12(fp)
 800bf70:	e17ffe15 	stw	r5,-8(fp)
 800bf74:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 800bf78:	000b883a 	mov	r5,zero
 800bf7c:	e13ffd17 	ldw	r4,-12(fp)
 800bf80:	800be940 	call	800be94 <alt_up_audio_write_fifo_space>
 800bf84:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 800bf88:	e0bffc17 	ldw	r2,-16(fp)
 800bf8c:	10801868 	cmpgeui	r2,r2,97
 800bf90:	1000021e 	bne	r2,zero,800bf9c <alt_up_audio_play_l+0x40>
		return 0;
 800bf94:	0005883a 	mov	r2,zero
 800bf98:	00000506 	br	800bfb0 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 800bf9c:	000f883a 	mov	r7,zero
 800bfa0:	e1bfff17 	ldw	r6,-4(fp)
 800bfa4:	e17ffe17 	ldw	r5,-8(fp)
 800bfa8:	e13ffd17 	ldw	r4,-12(fp)
 800bfac:	800c0a40 	call	800c0a4 <alt_up_audio_write_fifo>
}
 800bfb0:	e037883a 	mov	sp,fp
 800bfb4:	dfc00117 	ldw	ra,4(sp)
 800bfb8:	df000017 	ldw	fp,0(sp)
 800bfbc:	dec00204 	addi	sp,sp,8
 800bfc0:	f800283a 	ret

0800bfc4 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 800bfc4:	defff904 	addi	sp,sp,-28
 800bfc8:	df000615 	stw	fp,24(sp)
 800bfcc:	df000604 	addi	fp,sp,24
 800bfd0:	e13ffc15 	stw	r4,-16(fp)
 800bfd4:	e17ffd15 	stw	r5,-12(fp)
 800bfd8:	e1bffe15 	stw	r6,-8(fp)
 800bfdc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 800bfe0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 800bfe4:	00002506 	br	800c07c <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 800bfe8:	e0bffc17 	ldw	r2,-16(fp)
 800bfec:	10800a17 	ldw	r2,40(r2)
 800bff0:	10800104 	addi	r2,r2,4
 800bff4:	10800037 	ldwio	r2,0(r2)
 800bff8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 800bffc:	e0bfff17 	ldw	r2,-4(fp)
 800c000:	1000041e 	bne	r2,zero,800c014 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 800c004:	e0bffb17 	ldw	r2,-20(fp)
 800c008:	10bfc00c 	andi	r2,r2,65280
			:
 800c00c:	1004d23a 	srli	r2,r2,8
 800c010:	00000206 	br	800c01c <alt_up_audio_read_fifo+0x58>
 800c014:	e0bffb17 	ldw	r2,-20(fp)
 800c018:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 800c01c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 800c020:	e0bffb17 	ldw	r2,-20(fp)
 800c024:	10001926 	beq	r2,zero,800c08c <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 800c028:	e0bffa17 	ldw	r2,-24(fp)
 800c02c:	1085883a 	add	r2,r2,r2
 800c030:	1085883a 	add	r2,r2,r2
 800c034:	1007883a 	mov	r3,r2
 800c038:	e0bffd17 	ldw	r2,-12(fp)
 800c03c:	10c5883a 	add	r2,r2,r3
 800c040:	e0ffff17 	ldw	r3,-4(fp)
 800c044:	1800051e 	bne	r3,zero,800c05c <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 800c048:	e0fffc17 	ldw	r3,-16(fp)
 800c04c:	18c00a17 	ldw	r3,40(r3)
 800c050:	18c00204 	addi	r3,r3,8
 800c054:	18c00037 	ldwio	r3,0(r3)
 800c058:	00000406 	br	800c06c <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 800c05c:	e0fffc17 	ldw	r3,-16(fp)
 800c060:	18c00a17 	ldw	r3,40(r3)
 800c064:	18c00304 	addi	r3,r3,12
 800c068:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 800c06c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 800c070:	e0bffa17 	ldw	r2,-24(fp)
 800c074:	10800044 	addi	r2,r2,1
 800c078:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 800c07c:	e0fffa17 	ldw	r3,-24(fp)
 800c080:	e0bffe17 	ldw	r2,-8(fp)
 800c084:	18bfd816 	blt	r3,r2,800bfe8 <__alt_data_end+0xfc00bfe8>
 800c088:	00000106 	br	800c090 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 800c08c:	0001883a 	nop
		}
	}
	return count;
 800c090:	e0bffa17 	ldw	r2,-24(fp)
}
 800c094:	e037883a 	mov	sp,fp
 800c098:	df000017 	ldw	fp,0(sp)
 800c09c:	dec00104 	addi	sp,sp,4
 800c0a0:	f800283a 	ret

0800c0a4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 800c0a4:	defff904 	addi	sp,sp,-28
 800c0a8:	df000615 	stw	fp,24(sp)
 800c0ac:	df000604 	addi	fp,sp,24
 800c0b0:	e13ffc15 	stw	r4,-16(fp)
 800c0b4:	e17ffd15 	stw	r5,-12(fp)
 800c0b8:	e1bffe15 	stw	r6,-8(fp)
 800c0bc:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 800c0c0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 800c0c4:	00002f06 	br	800c184 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 800c0c8:	e0bffc17 	ldw	r2,-16(fp)
 800c0cc:	10800a17 	ldw	r2,40(r2)
 800c0d0:	10800104 	addi	r2,r2,4
 800c0d4:	10800037 	ldwio	r2,0(r2)
 800c0d8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 800c0dc:	e0bfff17 	ldw	r2,-4(fp)
 800c0e0:	1000031e 	bne	r2,zero,800c0f0 <alt_up_audio_write_fifo+0x4c>
 800c0e4:	e0bffb17 	ldw	r2,-20(fp)
 800c0e8:	1004d63a 	srli	r2,r2,24
 800c0ec:	00000306 	br	800c0fc <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 800c0f0:	e0bffb17 	ldw	r2,-20(fp)
 800c0f4:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 800c0f8:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 800c0fc:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 800c100:	e0bffb17 	ldw	r2,-20(fp)
 800c104:	10002326 	beq	r2,zero,800c194 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 800c108:	e0bfff17 	ldw	r2,-4(fp)
 800c10c:	10000f1e 	bne	r2,zero,800c14c <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 800c110:	e0bffc17 	ldw	r2,-16(fp)
 800c114:	10800a17 	ldw	r2,40(r2)
 800c118:	10800204 	addi	r2,r2,8
 800c11c:	1009883a 	mov	r4,r2
 800c120:	e0bffa17 	ldw	r2,-24(fp)
 800c124:	10c00044 	addi	r3,r2,1
 800c128:	e0fffa15 	stw	r3,-24(fp)
 800c12c:	1085883a 	add	r2,r2,r2
 800c130:	1085883a 	add	r2,r2,r2
 800c134:	1007883a 	mov	r3,r2
 800c138:	e0bffd17 	ldw	r2,-12(fp)
 800c13c:	10c5883a 	add	r2,r2,r3
 800c140:	10800017 	ldw	r2,0(r2)
 800c144:	20800035 	stwio	r2,0(r4)
 800c148:	00000e06 	br	800c184 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 800c14c:	e0bffc17 	ldw	r2,-16(fp)
 800c150:	10800a17 	ldw	r2,40(r2)
 800c154:	10800304 	addi	r2,r2,12
 800c158:	1009883a 	mov	r4,r2
 800c15c:	e0bffa17 	ldw	r2,-24(fp)
 800c160:	10c00044 	addi	r3,r2,1
 800c164:	e0fffa15 	stw	r3,-24(fp)
 800c168:	1085883a 	add	r2,r2,r2
 800c16c:	1085883a 	add	r2,r2,r2
 800c170:	1007883a 	mov	r3,r2
 800c174:	e0bffd17 	ldw	r2,-12(fp)
 800c178:	10c5883a 	add	r2,r2,r3
 800c17c:	10800017 	ldw	r2,0(r2)
 800c180:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 800c184:	e0fffa17 	ldw	r3,-24(fp)
 800c188:	e0bffe17 	ldw	r2,-8(fp)
 800c18c:	18bfce16 	blt	r3,r2,800c0c8 <__alt_data_end+0xfc00c0c8>
 800c190:	00000106 	br	800c198 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 800c194:	0001883a 	nop
		}
	}
	return count;
 800c198:	e0bffa17 	ldw	r2,-24(fp)
}
 800c19c:	e037883a 	mov	sp,fp
 800c1a0:	df000017 	ldw	fp,0(sp)
 800c1a4:	dec00104 	addi	sp,sp,4
 800c1a8:	f800283a 	ret

0800c1ac <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 800c1ac:	defffd04 	addi	sp,sp,-12
 800c1b0:	df000215 	stw	fp,8(sp)
 800c1b4:	df000204 	addi	fp,sp,8
 800c1b8:	e13ffe15 	stw	r4,-8(fp)
 800c1bc:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 800c1c0:	e0bfff17 	ldw	r2,-4(fp)
 800c1c4:	1000051e 	bne	r2,zero,800c1dc <alt_up_audio_read_fifo_head+0x30>
 800c1c8:	e0bffe17 	ldw	r2,-8(fp)
 800c1cc:	10800a17 	ldw	r2,40(r2)
 800c1d0:	10800204 	addi	r2,r2,8
 800c1d4:	10800037 	ldwio	r2,0(r2)
 800c1d8:	00000406 	br	800c1ec <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 800c1dc:	e0bffe17 	ldw	r2,-8(fp)
 800c1e0:	10800a17 	ldw	r2,40(r2)
 800c1e4:	10800304 	addi	r2,r2,12
 800c1e8:	10800037 	ldwio	r2,0(r2)
}
 800c1ec:	e037883a 	mov	sp,fp
 800c1f0:	df000017 	ldw	fp,0(sp)
 800c1f4:	dec00104 	addi	sp,sp,4
 800c1f8:	f800283a 	ret

0800c1fc <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 800c1fc:	defffc04 	addi	sp,sp,-16
 800c200:	df000315 	stw	fp,12(sp)
 800c204:	df000304 	addi	fp,sp,12
 800c208:	e13ffd15 	stw	r4,-12(fp)
 800c20c:	e17ffe15 	stw	r5,-8(fp)
 800c210:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 800c214:	e0bfff17 	ldw	r2,-4(fp)
 800c218:	1000071e 	bne	r2,zero,800c238 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 800c21c:	e0bffd17 	ldw	r2,-12(fp)
 800c220:	10800a17 	ldw	r2,40(r2)
 800c224:	10800204 	addi	r2,r2,8
 800c228:	1007883a 	mov	r3,r2
 800c22c:	e0bffe17 	ldw	r2,-8(fp)
 800c230:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 800c234:	00000606 	br	800c250 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 800c238:	e0bffd17 	ldw	r2,-12(fp)
 800c23c:	10800a17 	ldw	r2,40(r2)
 800c240:	10800304 	addi	r2,r2,12
 800c244:	1007883a 	mov	r3,r2
 800c248:	e0bffe17 	ldw	r2,-8(fp)
 800c24c:	18800035 	stwio	r2,0(r3)
}
 800c250:	0001883a 	nop
 800c254:	e037883a 	mov	sp,fp
 800c258:	df000017 	ldw	fp,0(sp)
 800c25c:	dec00104 	addi	sp,sp,4
 800c260:	f800283a 	ret

0800c264 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800c264:	defff504 	addi	sp,sp,-44
 800c268:	df000a15 	stw	fp,40(sp)
 800c26c:	df000a04 	addi	fp,sp,40
 800c270:	e13ffc15 	stw	r4,-16(fp)
 800c274:	e17ffd15 	stw	r5,-12(fp)
 800c278:	e1bffe15 	stw	r6,-8(fp)
 800c27c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800c280:	e03ff615 	stw	zero,-40(fp)
 800c284:	d0a6e917 	ldw	r2,-25692(gp)
  
  if (alt_ticks_per_second ())
 800c288:	10003c26 	beq	r2,zero,800c37c <alt_alarm_start+0x118>
  {
    if (alarm)
 800c28c:	e0bffc17 	ldw	r2,-16(fp)
 800c290:	10003826 	beq	r2,zero,800c374 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800c294:	e0bffc17 	ldw	r2,-16(fp)
 800c298:	e0fffe17 	ldw	r3,-8(fp)
 800c29c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800c2a0:	e0bffc17 	ldw	r2,-16(fp)
 800c2a4:	e0ffff17 	ldw	r3,-4(fp)
 800c2a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c2ac:	0005303a 	rdctl	r2,status
 800c2b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c2b4:	e0fff917 	ldw	r3,-28(fp)
 800c2b8:	00bfff84 	movi	r2,-2
 800c2bc:	1884703a 	and	r2,r3,r2
 800c2c0:	1001703a 	wrctl	status,r2
  
  return context;
 800c2c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800c2c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800c2cc:	d0a6ea17 	ldw	r2,-25688(gp)
      
      current_nticks = alt_nticks();
 800c2d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800c2d4:	e0fffd17 	ldw	r3,-12(fp)
 800c2d8:	e0bff617 	ldw	r2,-40(fp)
 800c2dc:	1885883a 	add	r2,r3,r2
 800c2e0:	10c00044 	addi	r3,r2,1
 800c2e4:	e0bffc17 	ldw	r2,-16(fp)
 800c2e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800c2ec:	e0bffc17 	ldw	r2,-16(fp)
 800c2f0:	10c00217 	ldw	r3,8(r2)
 800c2f4:	e0bff617 	ldw	r2,-40(fp)
 800c2f8:	1880042e 	bgeu	r3,r2,800c30c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800c2fc:	e0bffc17 	ldw	r2,-16(fp)
 800c300:	00c00044 	movi	r3,1
 800c304:	10c00405 	stb	r3,16(r2)
 800c308:	00000206 	br	800c314 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800c30c:	e0bffc17 	ldw	r2,-16(fp)
 800c310:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800c314:	e0bffc17 	ldw	r2,-16(fp)
 800c318:	d0e01104 	addi	r3,gp,-32700
 800c31c:	e0fffa15 	stw	r3,-24(fp)
 800c320:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800c324:	e0bffb17 	ldw	r2,-20(fp)
 800c328:	e0fffa17 	ldw	r3,-24(fp)
 800c32c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800c330:	e0bffa17 	ldw	r2,-24(fp)
 800c334:	10c00017 	ldw	r3,0(r2)
 800c338:	e0bffb17 	ldw	r2,-20(fp)
 800c33c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800c340:	e0bffa17 	ldw	r2,-24(fp)
 800c344:	10800017 	ldw	r2,0(r2)
 800c348:	e0fffb17 	ldw	r3,-20(fp)
 800c34c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800c350:	e0bffa17 	ldw	r2,-24(fp)
 800c354:	e0fffb17 	ldw	r3,-20(fp)
 800c358:	10c00015 	stw	r3,0(r2)
 800c35c:	e0bff817 	ldw	r2,-32(fp)
 800c360:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c364:	e0bff717 	ldw	r2,-36(fp)
 800c368:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800c36c:	0005883a 	mov	r2,zero
 800c370:	00000306 	br	800c380 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800c374:	00bffa84 	movi	r2,-22
 800c378:	00000106 	br	800c380 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800c37c:	00bfde84 	movi	r2,-134
  }
}
 800c380:	e037883a 	mov	sp,fp
 800c384:	df000017 	ldw	fp,0(sp)
 800c388:	dec00104 	addi	sp,sp,4
 800c38c:	f800283a 	ret

0800c390 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800c390:	defffa04 	addi	sp,sp,-24
 800c394:	dfc00515 	stw	ra,20(sp)
 800c398:	df000415 	stw	fp,16(sp)
 800c39c:	df000404 	addi	fp,sp,16
 800c3a0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 800c3a4:	008000c4 	movi	r2,3
 800c3a8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800c3ac:	e0fffd17 	ldw	r3,-12(fp)
 800c3b0:	008003f4 	movhi	r2,15
 800c3b4:	10909004 	addi	r2,r2,16960
 800c3b8:	1885383a 	mul	r2,r3,r2
 800c3bc:	100b883a 	mov	r5,r2
 800c3c0:	0100bef4 	movhi	r4,763
 800c3c4:	213c2004 	addi	r4,r4,-3968
 800c3c8:	8002fb40 	call	8002fb4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800c3cc:	100b883a 	mov	r5,r2
 800c3d0:	01200034 	movhi	r4,32768
 800c3d4:	213fffc4 	addi	r4,r4,-1
 800c3d8:	8002fb40 	call	8002fb4 <__udivsi3>
 800c3dc:	100b883a 	mov	r5,r2
 800c3e0:	e13fff17 	ldw	r4,-4(fp)
 800c3e4:	8002fb40 	call	8002fb4 <__udivsi3>
 800c3e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800c3ec:	e0bffe17 	ldw	r2,-8(fp)
 800c3f0:	10002a26 	beq	r2,zero,800c49c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800c3f4:	e03ffc15 	stw	zero,-16(fp)
 800c3f8:	00001706 	br	800c458 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800c3fc:	00a00034 	movhi	r2,32768
 800c400:	10bfffc4 	addi	r2,r2,-1
 800c404:	10bfffc4 	addi	r2,r2,-1
 800c408:	103ffe1e 	bne	r2,zero,800c404 <__alt_data_end+0xfc00c404>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800c40c:	e0fffd17 	ldw	r3,-12(fp)
 800c410:	008003f4 	movhi	r2,15
 800c414:	10909004 	addi	r2,r2,16960
 800c418:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800c41c:	100b883a 	mov	r5,r2
 800c420:	0100bef4 	movhi	r4,763
 800c424:	213c2004 	addi	r4,r4,-3968
 800c428:	8002fb40 	call	8002fb4 <__udivsi3>
 800c42c:	100b883a 	mov	r5,r2
 800c430:	01200034 	movhi	r4,32768
 800c434:	213fffc4 	addi	r4,r4,-1
 800c438:	8002fb40 	call	8002fb4 <__udivsi3>
 800c43c:	1007883a 	mov	r3,r2
 800c440:	e0bfff17 	ldw	r2,-4(fp)
 800c444:	10c5c83a 	sub	r2,r2,r3
 800c448:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800c44c:	e0bffc17 	ldw	r2,-16(fp)
 800c450:	10800044 	addi	r2,r2,1
 800c454:	e0bffc15 	stw	r2,-16(fp)
 800c458:	e0fffc17 	ldw	r3,-16(fp)
 800c45c:	e0bffe17 	ldw	r2,-8(fp)
 800c460:	18bfe616 	blt	r3,r2,800c3fc <__alt_data_end+0xfc00c3fc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800c464:	e0fffd17 	ldw	r3,-12(fp)
 800c468:	008003f4 	movhi	r2,15
 800c46c:	10909004 	addi	r2,r2,16960
 800c470:	1885383a 	mul	r2,r3,r2
 800c474:	100b883a 	mov	r5,r2
 800c478:	0100bef4 	movhi	r4,763
 800c47c:	213c2004 	addi	r4,r4,-3968
 800c480:	8002fb40 	call	8002fb4 <__udivsi3>
 800c484:	1007883a 	mov	r3,r2
 800c488:	e0bfff17 	ldw	r2,-4(fp)
 800c48c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800c490:	10bfffc4 	addi	r2,r2,-1
 800c494:	103ffe1e 	bne	r2,zero,800c490 <__alt_data_end+0xfc00c490>
 800c498:	00000d06 	br	800c4d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800c49c:	e0fffd17 	ldw	r3,-12(fp)
 800c4a0:	008003f4 	movhi	r2,15
 800c4a4:	10909004 	addi	r2,r2,16960
 800c4a8:	1885383a 	mul	r2,r3,r2
 800c4ac:	100b883a 	mov	r5,r2
 800c4b0:	0100bef4 	movhi	r4,763
 800c4b4:	213c2004 	addi	r4,r4,-3968
 800c4b8:	8002fb40 	call	8002fb4 <__udivsi3>
 800c4bc:	1007883a 	mov	r3,r2
 800c4c0:	e0bfff17 	ldw	r2,-4(fp)
 800c4c4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800c4c8:	10bfffc4 	addi	r2,r2,-1
 800c4cc:	00bffe16 	blt	zero,r2,800c4c8 <__alt_data_end+0xfc00c4c8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800c4d0:	0005883a 	mov	r2,zero
}
 800c4d4:	e037883a 	mov	sp,fp
 800c4d8:	dfc00117 	ldw	ra,4(sp)
 800c4dc:	df000017 	ldw	fp,0(sp)
 800c4e0:	dec00204 	addi	sp,sp,8
 800c4e4:	f800283a 	ret

0800c4e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800c4e8:	defffe04 	addi	sp,sp,-8
 800c4ec:	df000115 	stw	fp,4(sp)
 800c4f0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800c4f4:	e03fff15 	stw	zero,-4(fp)
 800c4f8:	00000506 	br	800c510 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 800c4fc:	e0bfff17 	ldw	r2,-4(fp)
 800c500:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800c504:	e0bfff17 	ldw	r2,-4(fp)
 800c508:	10800804 	addi	r2,r2,32
 800c50c:	e0bfff15 	stw	r2,-4(fp)
 800c510:	e0bfff17 	ldw	r2,-4(fp)
 800c514:	10820030 	cmpltui	r2,r2,2048
 800c518:	103ff81e 	bne	r2,zero,800c4fc <__alt_data_end+0xfc00c4fc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800c51c:	0001883a 	nop
 800c520:	e037883a 	mov	sp,fp
 800c524:	df000017 	ldw	fp,0(sp)
 800c528:	dec00104 	addi	sp,sp,4
 800c52c:	f800283a 	ret

0800c530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c530:	defffe04 	addi	sp,sp,-8
 800c534:	dfc00115 	stw	ra,4(sp)
 800c538:	df000015 	stw	fp,0(sp)
 800c53c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c540:	d0a00a17 	ldw	r2,-32728(gp)
 800c544:	10000326 	beq	r2,zero,800c554 <alt_get_errno+0x24>
 800c548:	d0a00a17 	ldw	r2,-32728(gp)
 800c54c:	103ee83a 	callr	r2
 800c550:	00000106 	br	800c558 <alt_get_errno+0x28>
 800c554:	d0a6e404 	addi	r2,gp,-25712
}
 800c558:	e037883a 	mov	sp,fp
 800c55c:	dfc00117 	ldw	ra,4(sp)
 800c560:	df000017 	ldw	fp,0(sp)
 800c564:	dec00204 	addi	sp,sp,8
 800c568:	f800283a 	ret

0800c56c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800c56c:	defffa04 	addi	sp,sp,-24
 800c570:	dfc00515 	stw	ra,20(sp)
 800c574:	df000415 	stw	fp,16(sp)
 800c578:	df000404 	addi	fp,sp,16
 800c57c:	e13ffe15 	stw	r4,-8(fp)
 800c580:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800c584:	e0bffe17 	ldw	r2,-8(fp)
 800c588:	10000326 	beq	r2,zero,800c598 <alt_dev_llist_insert+0x2c>
 800c58c:	e0bffe17 	ldw	r2,-8(fp)
 800c590:	10800217 	ldw	r2,8(r2)
 800c594:	1000061e 	bne	r2,zero,800c5b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800c598:	800c5300 	call	800c530 <alt_get_errno>
 800c59c:	1007883a 	mov	r3,r2
 800c5a0:	00800584 	movi	r2,22
 800c5a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800c5a8:	00bffa84 	movi	r2,-22
 800c5ac:	00001306 	br	800c5fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800c5b0:	e0bffe17 	ldw	r2,-8(fp)
 800c5b4:	e0ffff17 	ldw	r3,-4(fp)
 800c5b8:	e0fffc15 	stw	r3,-16(fp)
 800c5bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800c5c0:	e0bffd17 	ldw	r2,-12(fp)
 800c5c4:	e0fffc17 	ldw	r3,-16(fp)
 800c5c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800c5cc:	e0bffc17 	ldw	r2,-16(fp)
 800c5d0:	10c00017 	ldw	r3,0(r2)
 800c5d4:	e0bffd17 	ldw	r2,-12(fp)
 800c5d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800c5dc:	e0bffc17 	ldw	r2,-16(fp)
 800c5e0:	10800017 	ldw	r2,0(r2)
 800c5e4:	e0fffd17 	ldw	r3,-12(fp)
 800c5e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800c5ec:	e0bffc17 	ldw	r2,-16(fp)
 800c5f0:	e0fffd17 	ldw	r3,-12(fp)
 800c5f4:	10c00015 	stw	r3,0(r2)

  return 0;  
 800c5f8:	0005883a 	mov	r2,zero
}
 800c5fc:	e037883a 	mov	sp,fp
 800c600:	dfc00117 	ldw	ra,4(sp)
 800c604:	df000017 	ldw	fp,0(sp)
 800c608:	dec00204 	addi	sp,sp,8
 800c60c:	f800283a 	ret

0800c610 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800c610:	defffd04 	addi	sp,sp,-12
 800c614:	dfc00215 	stw	ra,8(sp)
 800c618:	df000115 	stw	fp,4(sp)
 800c61c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800c620:	00820074 	movhi	r2,2049
 800c624:	10b53604 	addi	r2,r2,-11048
 800c628:	e0bfff15 	stw	r2,-4(fp)
 800c62c:	00000606 	br	800c648 <_do_ctors+0x38>
        (*ctor) (); 
 800c630:	e0bfff17 	ldw	r2,-4(fp)
 800c634:	10800017 	ldw	r2,0(r2)
 800c638:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800c63c:	e0bfff17 	ldw	r2,-4(fp)
 800c640:	10bfff04 	addi	r2,r2,-4
 800c644:	e0bfff15 	stw	r2,-4(fp)
 800c648:	e0ffff17 	ldw	r3,-4(fp)
 800c64c:	00820074 	movhi	r2,2049
 800c650:	10b53704 	addi	r2,r2,-11044
 800c654:	18bff62e 	bgeu	r3,r2,800c630 <__alt_data_end+0xfc00c630>
        (*ctor) (); 
}
 800c658:	0001883a 	nop
 800c65c:	e037883a 	mov	sp,fp
 800c660:	dfc00117 	ldw	ra,4(sp)
 800c664:	df000017 	ldw	fp,0(sp)
 800c668:	dec00204 	addi	sp,sp,8
 800c66c:	f800283a 	ret

0800c670 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800c670:	defffd04 	addi	sp,sp,-12
 800c674:	dfc00215 	stw	ra,8(sp)
 800c678:	df000115 	stw	fp,4(sp)
 800c67c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800c680:	00820074 	movhi	r2,2049
 800c684:	10b53604 	addi	r2,r2,-11048
 800c688:	e0bfff15 	stw	r2,-4(fp)
 800c68c:	00000606 	br	800c6a8 <_do_dtors+0x38>
        (*dtor) (); 
 800c690:	e0bfff17 	ldw	r2,-4(fp)
 800c694:	10800017 	ldw	r2,0(r2)
 800c698:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800c69c:	e0bfff17 	ldw	r2,-4(fp)
 800c6a0:	10bfff04 	addi	r2,r2,-4
 800c6a4:	e0bfff15 	stw	r2,-4(fp)
 800c6a8:	e0ffff17 	ldw	r3,-4(fp)
 800c6ac:	00820074 	movhi	r2,2049
 800c6b0:	10b53704 	addi	r2,r2,-11044
 800c6b4:	18bff62e 	bgeu	r3,r2,800c690 <__alt_data_end+0xfc00c690>
        (*dtor) (); 
}
 800c6b8:	0001883a 	nop
 800c6bc:	e037883a 	mov	sp,fp
 800c6c0:	dfc00117 	ldw	ra,4(sp)
 800c6c4:	df000017 	ldw	fp,0(sp)
 800c6c8:	dec00204 	addi	sp,sp,8
 800c6cc:	f800283a 	ret

0800c6d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800c6d0:	defffa04 	addi	sp,sp,-24
 800c6d4:	dfc00515 	stw	ra,20(sp)
 800c6d8:	df000415 	stw	fp,16(sp)
 800c6dc:	df000404 	addi	fp,sp,16
 800c6e0:	e13ffe15 	stw	r4,-8(fp)
 800c6e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800c6e8:	e0bfff17 	ldw	r2,-4(fp)
 800c6ec:	10800017 	ldw	r2,0(r2)
 800c6f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800c6f4:	e13ffe17 	ldw	r4,-8(fp)
 800c6f8:	8006e100 	call	8006e10 <strlen>
 800c6fc:	10800044 	addi	r2,r2,1
 800c700:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c704:	00000d06 	br	800c73c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800c708:	e0bffc17 	ldw	r2,-16(fp)
 800c70c:	10800217 	ldw	r2,8(r2)
 800c710:	e0fffd17 	ldw	r3,-12(fp)
 800c714:	180d883a 	mov	r6,r3
 800c718:	e17ffe17 	ldw	r5,-8(fp)
 800c71c:	1009883a 	mov	r4,r2
 800c720:	800d1940 	call	800d194 <memcmp>
 800c724:	1000021e 	bne	r2,zero,800c730 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800c728:	e0bffc17 	ldw	r2,-16(fp)
 800c72c:	00000706 	br	800c74c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800c730:	e0bffc17 	ldw	r2,-16(fp)
 800c734:	10800017 	ldw	r2,0(r2)
 800c738:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c73c:	e0fffc17 	ldw	r3,-16(fp)
 800c740:	e0bfff17 	ldw	r2,-4(fp)
 800c744:	18bff01e 	bne	r3,r2,800c708 <__alt_data_end+0xfc00c708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800c748:	0005883a 	mov	r2,zero
}
 800c74c:	e037883a 	mov	sp,fp
 800c750:	dfc00117 	ldw	ra,4(sp)
 800c754:	df000017 	ldw	fp,0(sp)
 800c758:	dec00204 	addi	sp,sp,8
 800c75c:	f800283a 	ret

0800c760 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800c760:	defffe04 	addi	sp,sp,-8
 800c764:	dfc00115 	stw	ra,4(sp)
 800c768:	df000015 	stw	fp,0(sp)
 800c76c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800c770:	01440004 	movi	r5,4096
 800c774:	0009883a 	mov	r4,zero
 800c778:	800d01c0 	call	800d01c <alt_icache_flush>
#endif
}
 800c77c:	0001883a 	nop
 800c780:	e037883a 	mov	sp,fp
 800c784:	dfc00117 	ldw	ra,4(sp)
 800c788:	df000017 	ldw	fp,0(sp)
 800c78c:	dec00204 	addi	sp,sp,8
 800c790:	f800283a 	ret

0800c794 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800c794:	defff904 	addi	sp,sp,-28
 800c798:	dfc00615 	stw	ra,24(sp)
 800c79c:	df000515 	stw	fp,20(sp)
 800c7a0:	df000504 	addi	fp,sp,20
 800c7a4:	e13ffc15 	stw	r4,-16(fp)
 800c7a8:	e17ffd15 	stw	r5,-12(fp)
 800c7ac:	e1bffe15 	stw	r6,-8(fp)
 800c7b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800c7b4:	e1bfff17 	ldw	r6,-4(fp)
 800c7b8:	e17ffe17 	ldw	r5,-8(fp)
 800c7bc:	e13ffd17 	ldw	r4,-12(fp)
 800c7c0:	800cb540 	call	800cb54 <open>
 800c7c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800c7c8:	e0bffb17 	ldw	r2,-20(fp)
 800c7cc:	10001c16 	blt	r2,zero,800c840 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 800c7d0:	00820074 	movhi	r2,2049
 800c7d4:	10b84404 	addi	r2,r2,-7920
 800c7d8:	e0fffb17 	ldw	r3,-20(fp)
 800c7dc:	18c00324 	muli	r3,r3,12
 800c7e0:	10c5883a 	add	r2,r2,r3
 800c7e4:	10c00017 	ldw	r3,0(r2)
 800c7e8:	e0bffc17 	ldw	r2,-16(fp)
 800c7ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800c7f0:	00820074 	movhi	r2,2049
 800c7f4:	10b84404 	addi	r2,r2,-7920
 800c7f8:	e0fffb17 	ldw	r3,-20(fp)
 800c7fc:	18c00324 	muli	r3,r3,12
 800c800:	10c5883a 	add	r2,r2,r3
 800c804:	10800104 	addi	r2,r2,4
 800c808:	10c00017 	ldw	r3,0(r2)
 800c80c:	e0bffc17 	ldw	r2,-16(fp)
 800c810:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800c814:	00820074 	movhi	r2,2049
 800c818:	10b84404 	addi	r2,r2,-7920
 800c81c:	e0fffb17 	ldw	r3,-20(fp)
 800c820:	18c00324 	muli	r3,r3,12
 800c824:	10c5883a 	add	r2,r2,r3
 800c828:	10800204 	addi	r2,r2,8
 800c82c:	10c00017 	ldw	r3,0(r2)
 800c830:	e0bffc17 	ldw	r2,-16(fp)
 800c834:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800c838:	e13ffb17 	ldw	r4,-20(fp)
 800c83c:	800a04c0 	call	800a04c <alt_release_fd>
  }
} 
 800c840:	0001883a 	nop
 800c844:	e037883a 	mov	sp,fp
 800c848:	dfc00117 	ldw	ra,4(sp)
 800c84c:	df000017 	ldw	fp,0(sp)
 800c850:	dec00204 	addi	sp,sp,8
 800c854:	f800283a 	ret

0800c858 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800c858:	defffb04 	addi	sp,sp,-20
 800c85c:	dfc00415 	stw	ra,16(sp)
 800c860:	df000315 	stw	fp,12(sp)
 800c864:	df000304 	addi	fp,sp,12
 800c868:	e13ffd15 	stw	r4,-12(fp)
 800c86c:	e17ffe15 	stw	r5,-8(fp)
 800c870:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800c874:	01c07fc4 	movi	r7,511
 800c878:	01800044 	movi	r6,1
 800c87c:	e17ffd17 	ldw	r5,-12(fp)
 800c880:	01020074 	movhi	r4,2049
 800c884:	21384704 	addi	r4,r4,-7908
 800c888:	800c7940 	call	800c794 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800c88c:	01c07fc4 	movi	r7,511
 800c890:	000d883a 	mov	r6,zero
 800c894:	e17ffe17 	ldw	r5,-8(fp)
 800c898:	01020074 	movhi	r4,2049
 800c89c:	21384404 	addi	r4,r4,-7920
 800c8a0:	800c7940 	call	800c794 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800c8a4:	01c07fc4 	movi	r7,511
 800c8a8:	01800044 	movi	r6,1
 800c8ac:	e17fff17 	ldw	r5,-4(fp)
 800c8b0:	01020074 	movhi	r4,2049
 800c8b4:	21384a04 	addi	r4,r4,-7896
 800c8b8:	800c7940 	call	800c794 <alt_open_fd>
}  
 800c8bc:	0001883a 	nop
 800c8c0:	e037883a 	mov	sp,fp
 800c8c4:	dfc00117 	ldw	ra,4(sp)
 800c8c8:	df000017 	ldw	fp,0(sp)
 800c8cc:	dec00204 	addi	sp,sp,8
 800c8d0:	f800283a 	ret

0800c8d4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 800c8d4:	defff004 	addi	sp,sp,-64
 800c8d8:	df000f15 	stw	fp,60(sp)
 800c8dc:	df000f04 	addi	fp,sp,60
 800c8e0:	e13ffd15 	stw	r4,-12(fp)
 800c8e4:	e17ffe15 	stw	r5,-8(fp)
 800c8e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 800c8ec:	00bffa84 	movi	r2,-22
 800c8f0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800c8f4:	e0bffd17 	ldw	r2,-12(fp)
 800c8f8:	10800828 	cmpgeui	r2,r2,32
 800c8fc:	1000501e 	bne	r2,zero,800ca40 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c900:	0005303a 	rdctl	r2,status
 800c904:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c908:	e0fff617 	ldw	r3,-40(fp)
 800c90c:	00bfff84 	movi	r2,-2
 800c910:	1884703a 	and	r2,r3,r2
 800c914:	1001703a 	wrctl	status,r2
  
  return context;
 800c918:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 800c91c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 800c920:	00820074 	movhi	r2,2049
 800c924:	1083e004 	addi	r2,r2,3968
 800c928:	e0fffd17 	ldw	r3,-12(fp)
 800c92c:	180690fa 	slli	r3,r3,3
 800c930:	10c5883a 	add	r2,r2,r3
 800c934:	e0ffff17 	ldw	r3,-4(fp)
 800c938:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 800c93c:	00820074 	movhi	r2,2049
 800c940:	1083e004 	addi	r2,r2,3968
 800c944:	e0fffd17 	ldw	r3,-12(fp)
 800c948:	180690fa 	slli	r3,r3,3
 800c94c:	10c5883a 	add	r2,r2,r3
 800c950:	10800104 	addi	r2,r2,4
 800c954:	e0fffe17 	ldw	r3,-8(fp)
 800c958:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 800c95c:	e0bfff17 	ldw	r2,-4(fp)
 800c960:	10001926 	beq	r2,zero,800c9c8 <alt_irq_register+0xf4>
 800c964:	e0bffd17 	ldw	r2,-12(fp)
 800c968:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c96c:	0005303a 	rdctl	r2,status
 800c970:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c974:	e0fff717 	ldw	r3,-36(fp)
 800c978:	00bfff84 	movi	r2,-2
 800c97c:	1884703a 	and	r2,r3,r2
 800c980:	1001703a 	wrctl	status,r2
  
  return context;
 800c984:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800c988:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 800c98c:	00c00044 	movi	r3,1
 800c990:	e0bff217 	ldw	r2,-56(fp)
 800c994:	1884983a 	sll	r2,r3,r2
 800c998:	1007883a 	mov	r3,r2
 800c99c:	d0a6e817 	ldw	r2,-25696(gp)
 800c9a0:	1884b03a 	or	r2,r3,r2
 800c9a4:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800c9a8:	d0a6e817 	ldw	r2,-25696(gp)
 800c9ac:	100170fa 	wrctl	ienable,r2
 800c9b0:	e0bff817 	ldw	r2,-32(fp)
 800c9b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c9b8:	e0bff917 	ldw	r2,-28(fp)
 800c9bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800c9c0:	0005883a 	mov	r2,zero
 800c9c4:	00001906 	br	800ca2c <alt_irq_register+0x158>
 800c9c8:	e0bffd17 	ldw	r2,-12(fp)
 800c9cc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c9d0:	0005303a 	rdctl	r2,status
 800c9d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c9d8:	e0fffa17 	ldw	r3,-24(fp)
 800c9dc:	00bfff84 	movi	r2,-2
 800c9e0:	1884703a 	and	r2,r3,r2
 800c9e4:	1001703a 	wrctl	status,r2
  
  return context;
 800c9e8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800c9ec:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 800c9f0:	00c00044 	movi	r3,1
 800c9f4:	e0bff417 	ldw	r2,-48(fp)
 800c9f8:	1884983a 	sll	r2,r3,r2
 800c9fc:	0084303a 	nor	r2,zero,r2
 800ca00:	1007883a 	mov	r3,r2
 800ca04:	d0a6e817 	ldw	r2,-25696(gp)
 800ca08:	1884703a 	and	r2,r3,r2
 800ca0c:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800ca10:	d0a6e817 	ldw	r2,-25696(gp)
 800ca14:	100170fa 	wrctl	ienable,r2
 800ca18:	e0bffb17 	ldw	r2,-20(fp)
 800ca1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ca20:	e0bffc17 	ldw	r2,-16(fp)
 800ca24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800ca28:	0005883a 	mov	r2,zero
 800ca2c:	e0bff115 	stw	r2,-60(fp)
 800ca30:	e0bff317 	ldw	r2,-52(fp)
 800ca34:	e0bff515 	stw	r2,-44(fp)
 800ca38:	e0bff517 	ldw	r2,-44(fp)
 800ca3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 800ca40:	e0bff117 	ldw	r2,-60(fp)
}
 800ca44:	e037883a 	mov	sp,fp
 800ca48:	df000017 	ldw	fp,0(sp)
 800ca4c:	dec00104 	addi	sp,sp,4
 800ca50:	f800283a 	ret

0800ca54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ca54:	defffe04 	addi	sp,sp,-8
 800ca58:	dfc00115 	stw	ra,4(sp)
 800ca5c:	df000015 	stw	fp,0(sp)
 800ca60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ca64:	d0a00a17 	ldw	r2,-32728(gp)
 800ca68:	10000326 	beq	r2,zero,800ca78 <alt_get_errno+0x24>
 800ca6c:	d0a00a17 	ldw	r2,-32728(gp)
 800ca70:	103ee83a 	callr	r2
 800ca74:	00000106 	br	800ca7c <alt_get_errno+0x28>
 800ca78:	d0a6e404 	addi	r2,gp,-25712
}
 800ca7c:	e037883a 	mov	sp,fp
 800ca80:	dfc00117 	ldw	ra,4(sp)
 800ca84:	df000017 	ldw	fp,0(sp)
 800ca88:	dec00204 	addi	sp,sp,8
 800ca8c:	f800283a 	ret

0800ca90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800ca90:	defffd04 	addi	sp,sp,-12
 800ca94:	df000215 	stw	fp,8(sp)
 800ca98:	df000204 	addi	fp,sp,8
 800ca9c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800caa0:	e0bfff17 	ldw	r2,-4(fp)
 800caa4:	10800217 	ldw	r2,8(r2)
 800caa8:	10d00034 	orhi	r3,r2,16384
 800caac:	e0bfff17 	ldw	r2,-4(fp)
 800cab0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800cab4:	e03ffe15 	stw	zero,-8(fp)
 800cab8:	00001d06 	br	800cb30 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800cabc:	00820074 	movhi	r2,2049
 800cac0:	10b84404 	addi	r2,r2,-7920
 800cac4:	e0fffe17 	ldw	r3,-8(fp)
 800cac8:	18c00324 	muli	r3,r3,12
 800cacc:	10c5883a 	add	r2,r2,r3
 800cad0:	10c00017 	ldw	r3,0(r2)
 800cad4:	e0bfff17 	ldw	r2,-4(fp)
 800cad8:	10800017 	ldw	r2,0(r2)
 800cadc:	1880111e 	bne	r3,r2,800cb24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800cae0:	00820074 	movhi	r2,2049
 800cae4:	10b84404 	addi	r2,r2,-7920
 800cae8:	e0fffe17 	ldw	r3,-8(fp)
 800caec:	18c00324 	muli	r3,r3,12
 800caf0:	10c5883a 	add	r2,r2,r3
 800caf4:	10800204 	addi	r2,r2,8
 800caf8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800cafc:	1000090e 	bge	r2,zero,800cb24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800cb00:	e0bffe17 	ldw	r2,-8(fp)
 800cb04:	10c00324 	muli	r3,r2,12
 800cb08:	00820074 	movhi	r2,2049
 800cb0c:	10b84404 	addi	r2,r2,-7920
 800cb10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800cb14:	e0bfff17 	ldw	r2,-4(fp)
 800cb18:	18800226 	beq	r3,r2,800cb24 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800cb1c:	00bffcc4 	movi	r2,-13
 800cb20:	00000806 	br	800cb44 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800cb24:	e0bffe17 	ldw	r2,-8(fp)
 800cb28:	10800044 	addi	r2,r2,1
 800cb2c:	e0bffe15 	stw	r2,-8(fp)
 800cb30:	d0a00917 	ldw	r2,-32732(gp)
 800cb34:	1007883a 	mov	r3,r2
 800cb38:	e0bffe17 	ldw	r2,-8(fp)
 800cb3c:	18bfdf2e 	bgeu	r3,r2,800cabc <__alt_data_end+0xfc00cabc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800cb40:	0005883a 	mov	r2,zero
}
 800cb44:	e037883a 	mov	sp,fp
 800cb48:	df000017 	ldw	fp,0(sp)
 800cb4c:	dec00104 	addi	sp,sp,4
 800cb50:	f800283a 	ret

0800cb54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800cb54:	defff604 	addi	sp,sp,-40
 800cb58:	dfc00915 	stw	ra,36(sp)
 800cb5c:	df000815 	stw	fp,32(sp)
 800cb60:	df000804 	addi	fp,sp,32
 800cb64:	e13ffd15 	stw	r4,-12(fp)
 800cb68:	e17ffe15 	stw	r5,-8(fp)
 800cb6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800cb70:	00bfffc4 	movi	r2,-1
 800cb74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800cb78:	00bffb44 	movi	r2,-19
 800cb7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800cb80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800cb84:	d1600704 	addi	r5,gp,-32740
 800cb88:	e13ffd17 	ldw	r4,-12(fp)
 800cb8c:	800c6d00 	call	800c6d0 <alt_find_dev>
 800cb90:	e0bff815 	stw	r2,-32(fp)
 800cb94:	e0bff817 	ldw	r2,-32(fp)
 800cb98:	1000051e 	bne	r2,zero,800cbb0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800cb9c:	e13ffd17 	ldw	r4,-12(fp)
 800cba0:	800ce700 	call	800ce70 <alt_find_file>
 800cba4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800cba8:	00800044 	movi	r2,1
 800cbac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800cbb0:	e0bff817 	ldw	r2,-32(fp)
 800cbb4:	10002926 	beq	r2,zero,800cc5c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800cbb8:	e13ff817 	ldw	r4,-32(fp)
 800cbbc:	800cf780 	call	800cf78 <alt_get_fd>
 800cbc0:	e0bff915 	stw	r2,-28(fp)
 800cbc4:	e0bff917 	ldw	r2,-28(fp)
 800cbc8:	1000030e 	bge	r2,zero,800cbd8 <open+0x84>
    {
      status = index;
 800cbcc:	e0bff917 	ldw	r2,-28(fp)
 800cbd0:	e0bffa15 	stw	r2,-24(fp)
 800cbd4:	00002306 	br	800cc64 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 800cbd8:	e0bff917 	ldw	r2,-28(fp)
 800cbdc:	10c00324 	muli	r3,r2,12
 800cbe0:	00820074 	movhi	r2,2049
 800cbe4:	10b84404 	addi	r2,r2,-7920
 800cbe8:	1885883a 	add	r2,r3,r2
 800cbec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800cbf0:	e0fffe17 	ldw	r3,-8(fp)
 800cbf4:	00900034 	movhi	r2,16384
 800cbf8:	10bfffc4 	addi	r2,r2,-1
 800cbfc:	1886703a 	and	r3,r3,r2
 800cc00:	e0bffc17 	ldw	r2,-16(fp)
 800cc04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800cc08:	e0bffb17 	ldw	r2,-20(fp)
 800cc0c:	1000051e 	bne	r2,zero,800cc24 <open+0xd0>
 800cc10:	e13ffc17 	ldw	r4,-16(fp)
 800cc14:	800ca900 	call	800ca90 <alt_file_locked>
 800cc18:	e0bffa15 	stw	r2,-24(fp)
 800cc1c:	e0bffa17 	ldw	r2,-24(fp)
 800cc20:	10001016 	blt	r2,zero,800cc64 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800cc24:	e0bff817 	ldw	r2,-32(fp)
 800cc28:	10800317 	ldw	r2,12(r2)
 800cc2c:	10000826 	beq	r2,zero,800cc50 <open+0xfc>
 800cc30:	e0bff817 	ldw	r2,-32(fp)
 800cc34:	10800317 	ldw	r2,12(r2)
 800cc38:	e1ffff17 	ldw	r7,-4(fp)
 800cc3c:	e1bffe17 	ldw	r6,-8(fp)
 800cc40:	e17ffd17 	ldw	r5,-12(fp)
 800cc44:	e13ffc17 	ldw	r4,-16(fp)
 800cc48:	103ee83a 	callr	r2
 800cc4c:	00000106 	br	800cc54 <open+0x100>
 800cc50:	0005883a 	mov	r2,zero
 800cc54:	e0bffa15 	stw	r2,-24(fp)
 800cc58:	00000206 	br	800cc64 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800cc5c:	00bffb44 	movi	r2,-19
 800cc60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800cc64:	e0bffa17 	ldw	r2,-24(fp)
 800cc68:	1000090e 	bge	r2,zero,800cc90 <open+0x13c>
  {
    alt_release_fd (index);  
 800cc6c:	e13ff917 	ldw	r4,-28(fp)
 800cc70:	800a04c0 	call	800a04c <alt_release_fd>
    ALT_ERRNO = -status;
 800cc74:	800ca540 	call	800ca54 <alt_get_errno>
 800cc78:	1007883a 	mov	r3,r2
 800cc7c:	e0bffa17 	ldw	r2,-24(fp)
 800cc80:	0085c83a 	sub	r2,zero,r2
 800cc84:	18800015 	stw	r2,0(r3)
    return -1;
 800cc88:	00bfffc4 	movi	r2,-1
 800cc8c:	00000106 	br	800cc94 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 800cc90:	e0bff917 	ldw	r2,-28(fp)
}
 800cc94:	e037883a 	mov	sp,fp
 800cc98:	dfc00117 	ldw	ra,4(sp)
 800cc9c:	df000017 	ldw	fp,0(sp)
 800cca0:	dec00204 	addi	sp,sp,8
 800cca4:	f800283a 	ret

0800cca8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800cca8:	defffa04 	addi	sp,sp,-24
 800ccac:	df000515 	stw	fp,20(sp)
 800ccb0:	df000504 	addi	fp,sp,20
 800ccb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ccb8:	0005303a 	rdctl	r2,status
 800ccbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ccc0:	e0fffc17 	ldw	r3,-16(fp)
 800ccc4:	00bfff84 	movi	r2,-2
 800ccc8:	1884703a 	and	r2,r3,r2
 800cccc:	1001703a 	wrctl	status,r2
  
  return context;
 800ccd0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800ccd4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800ccd8:	e0bfff17 	ldw	r2,-4(fp)
 800ccdc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800cce0:	e0bffd17 	ldw	r2,-12(fp)
 800cce4:	10800017 	ldw	r2,0(r2)
 800cce8:	e0fffd17 	ldw	r3,-12(fp)
 800ccec:	18c00117 	ldw	r3,4(r3)
 800ccf0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800ccf4:	e0bffd17 	ldw	r2,-12(fp)
 800ccf8:	10800117 	ldw	r2,4(r2)
 800ccfc:	e0fffd17 	ldw	r3,-12(fp)
 800cd00:	18c00017 	ldw	r3,0(r3)
 800cd04:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800cd08:	e0bffd17 	ldw	r2,-12(fp)
 800cd0c:	e0fffd17 	ldw	r3,-12(fp)
 800cd10:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800cd14:	e0bffd17 	ldw	r2,-12(fp)
 800cd18:	e0fffd17 	ldw	r3,-12(fp)
 800cd1c:	10c00015 	stw	r3,0(r2)
 800cd20:	e0bffb17 	ldw	r2,-20(fp)
 800cd24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cd28:	e0bffe17 	ldw	r2,-8(fp)
 800cd2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800cd30:	0001883a 	nop
 800cd34:	e037883a 	mov	sp,fp
 800cd38:	df000017 	ldw	fp,0(sp)
 800cd3c:	dec00104 	addi	sp,sp,4
 800cd40:	f800283a 	ret

0800cd44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800cd44:	defffb04 	addi	sp,sp,-20
 800cd48:	dfc00415 	stw	ra,16(sp)
 800cd4c:	df000315 	stw	fp,12(sp)
 800cd50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800cd54:	d0a01117 	ldw	r2,-32700(gp)
 800cd58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800cd5c:	d0a6ea17 	ldw	r2,-25688(gp)
 800cd60:	10800044 	addi	r2,r2,1
 800cd64:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800cd68:	00002e06 	br	800ce24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800cd6c:	e0bffd17 	ldw	r2,-12(fp)
 800cd70:	10800017 	ldw	r2,0(r2)
 800cd74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800cd78:	e0bffd17 	ldw	r2,-12(fp)
 800cd7c:	10800403 	ldbu	r2,16(r2)
 800cd80:	10803fcc 	andi	r2,r2,255
 800cd84:	10000426 	beq	r2,zero,800cd98 <alt_tick+0x54>
 800cd88:	d0a6ea17 	ldw	r2,-25688(gp)
 800cd8c:	1000021e 	bne	r2,zero,800cd98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800cd90:	e0bffd17 	ldw	r2,-12(fp)
 800cd94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800cd98:	e0bffd17 	ldw	r2,-12(fp)
 800cd9c:	10800217 	ldw	r2,8(r2)
 800cda0:	d0e6ea17 	ldw	r3,-25688(gp)
 800cda4:	18801d36 	bltu	r3,r2,800ce1c <alt_tick+0xd8>
 800cda8:	e0bffd17 	ldw	r2,-12(fp)
 800cdac:	10800403 	ldbu	r2,16(r2)
 800cdb0:	10803fcc 	andi	r2,r2,255
 800cdb4:	1000191e 	bne	r2,zero,800ce1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800cdb8:	e0bffd17 	ldw	r2,-12(fp)
 800cdbc:	10800317 	ldw	r2,12(r2)
 800cdc0:	e0fffd17 	ldw	r3,-12(fp)
 800cdc4:	18c00517 	ldw	r3,20(r3)
 800cdc8:	1809883a 	mov	r4,r3
 800cdcc:	103ee83a 	callr	r2
 800cdd0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800cdd4:	e0bfff17 	ldw	r2,-4(fp)
 800cdd8:	1000031e 	bne	r2,zero,800cde8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800cddc:	e13ffd17 	ldw	r4,-12(fp)
 800cde0:	800cca80 	call	800cca8 <alt_alarm_stop>
 800cde4:	00000d06 	br	800ce1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800cde8:	e0bffd17 	ldw	r2,-12(fp)
 800cdec:	10c00217 	ldw	r3,8(r2)
 800cdf0:	e0bfff17 	ldw	r2,-4(fp)
 800cdf4:	1887883a 	add	r3,r3,r2
 800cdf8:	e0bffd17 	ldw	r2,-12(fp)
 800cdfc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800ce00:	e0bffd17 	ldw	r2,-12(fp)
 800ce04:	10c00217 	ldw	r3,8(r2)
 800ce08:	d0a6ea17 	ldw	r2,-25688(gp)
 800ce0c:	1880032e 	bgeu	r3,r2,800ce1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800ce10:	e0bffd17 	ldw	r2,-12(fp)
 800ce14:	00c00044 	movi	r3,1
 800ce18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800ce1c:	e0bffe17 	ldw	r2,-8(fp)
 800ce20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800ce24:	e0fffd17 	ldw	r3,-12(fp)
 800ce28:	d0a01104 	addi	r2,gp,-32700
 800ce2c:	18bfcf1e 	bne	r3,r2,800cd6c <__alt_data_end+0xfc00cd6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800ce30:	0001883a 	nop
}
 800ce34:	0001883a 	nop
 800ce38:	e037883a 	mov	sp,fp
 800ce3c:	dfc00117 	ldw	ra,4(sp)
 800ce40:	df000017 	ldw	fp,0(sp)
 800ce44:	dec00204 	addi	sp,sp,8
 800ce48:	f800283a 	ret

0800ce4c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800ce4c:	deffff04 	addi	sp,sp,-4
 800ce50:	df000015 	stw	fp,0(sp)
 800ce54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800ce58:	000170fa 	wrctl	ienable,zero
}
 800ce5c:	0001883a 	nop
 800ce60:	e037883a 	mov	sp,fp
 800ce64:	df000017 	ldw	fp,0(sp)
 800ce68:	dec00104 	addi	sp,sp,4
 800ce6c:	f800283a 	ret

0800ce70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800ce70:	defffb04 	addi	sp,sp,-20
 800ce74:	dfc00415 	stw	ra,16(sp)
 800ce78:	df000315 	stw	fp,12(sp)
 800ce7c:	df000304 	addi	fp,sp,12
 800ce80:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800ce84:	d0a00517 	ldw	r2,-32748(gp)
 800ce88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ce8c:	00003106 	br	800cf54 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800ce90:	e0bffd17 	ldw	r2,-12(fp)
 800ce94:	10800217 	ldw	r2,8(r2)
 800ce98:	1009883a 	mov	r4,r2
 800ce9c:	8006e100 	call	8006e10 <strlen>
 800cea0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800cea4:	e0bffd17 	ldw	r2,-12(fp)
 800cea8:	10c00217 	ldw	r3,8(r2)
 800ceac:	e0bffe17 	ldw	r2,-8(fp)
 800ceb0:	10bfffc4 	addi	r2,r2,-1
 800ceb4:	1885883a 	add	r2,r3,r2
 800ceb8:	10800003 	ldbu	r2,0(r2)
 800cebc:	10803fcc 	andi	r2,r2,255
 800cec0:	1080201c 	xori	r2,r2,128
 800cec4:	10bfe004 	addi	r2,r2,-128
 800cec8:	10800bd8 	cmpnei	r2,r2,47
 800cecc:	1000031e 	bne	r2,zero,800cedc <alt_find_file+0x6c>
    {
      len -= 1;
 800ced0:	e0bffe17 	ldw	r2,-8(fp)
 800ced4:	10bfffc4 	addi	r2,r2,-1
 800ced8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800cedc:	e0bffe17 	ldw	r2,-8(fp)
 800cee0:	e0ffff17 	ldw	r3,-4(fp)
 800cee4:	1885883a 	add	r2,r3,r2
 800cee8:	10800003 	ldbu	r2,0(r2)
 800ceec:	10803fcc 	andi	r2,r2,255
 800cef0:	1080201c 	xori	r2,r2,128
 800cef4:	10bfe004 	addi	r2,r2,-128
 800cef8:	10800be0 	cmpeqi	r2,r2,47
 800cefc:	1000081e 	bne	r2,zero,800cf20 <alt_find_file+0xb0>
 800cf00:	e0bffe17 	ldw	r2,-8(fp)
 800cf04:	e0ffff17 	ldw	r3,-4(fp)
 800cf08:	1885883a 	add	r2,r3,r2
 800cf0c:	10800003 	ldbu	r2,0(r2)
 800cf10:	10803fcc 	andi	r2,r2,255
 800cf14:	1080201c 	xori	r2,r2,128
 800cf18:	10bfe004 	addi	r2,r2,-128
 800cf1c:	10000a1e 	bne	r2,zero,800cf48 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800cf20:	e0bffd17 	ldw	r2,-12(fp)
 800cf24:	10800217 	ldw	r2,8(r2)
 800cf28:	e0fffe17 	ldw	r3,-8(fp)
 800cf2c:	180d883a 	mov	r6,r3
 800cf30:	e17fff17 	ldw	r5,-4(fp)
 800cf34:	1009883a 	mov	r4,r2
 800cf38:	800d1940 	call	800d194 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800cf3c:	1000021e 	bne	r2,zero,800cf48 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800cf40:	e0bffd17 	ldw	r2,-12(fp)
 800cf44:	00000706 	br	800cf64 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800cf48:	e0bffd17 	ldw	r2,-12(fp)
 800cf4c:	10800017 	ldw	r2,0(r2)
 800cf50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800cf54:	e0fffd17 	ldw	r3,-12(fp)
 800cf58:	d0a00504 	addi	r2,gp,-32748
 800cf5c:	18bfcc1e 	bne	r3,r2,800ce90 <__alt_data_end+0xfc00ce90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800cf60:	0005883a 	mov	r2,zero
}
 800cf64:	e037883a 	mov	sp,fp
 800cf68:	dfc00117 	ldw	ra,4(sp)
 800cf6c:	df000017 	ldw	fp,0(sp)
 800cf70:	dec00204 	addi	sp,sp,8
 800cf74:	f800283a 	ret

0800cf78 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800cf78:	defffc04 	addi	sp,sp,-16
 800cf7c:	df000315 	stw	fp,12(sp)
 800cf80:	df000304 	addi	fp,sp,12
 800cf84:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800cf88:	00bffa04 	movi	r2,-24
 800cf8c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800cf90:	e03ffd15 	stw	zero,-12(fp)
 800cf94:	00001906 	br	800cffc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 800cf98:	00820074 	movhi	r2,2049
 800cf9c:	10b84404 	addi	r2,r2,-7920
 800cfa0:	e0fffd17 	ldw	r3,-12(fp)
 800cfa4:	18c00324 	muli	r3,r3,12
 800cfa8:	10c5883a 	add	r2,r2,r3
 800cfac:	10800017 	ldw	r2,0(r2)
 800cfb0:	10000f1e 	bne	r2,zero,800cff0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 800cfb4:	00820074 	movhi	r2,2049
 800cfb8:	10b84404 	addi	r2,r2,-7920
 800cfbc:	e0fffd17 	ldw	r3,-12(fp)
 800cfc0:	18c00324 	muli	r3,r3,12
 800cfc4:	10c5883a 	add	r2,r2,r3
 800cfc8:	e0ffff17 	ldw	r3,-4(fp)
 800cfcc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800cfd0:	d0e00917 	ldw	r3,-32732(gp)
 800cfd4:	e0bffd17 	ldw	r2,-12(fp)
 800cfd8:	1880020e 	bge	r3,r2,800cfe4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 800cfdc:	e0bffd17 	ldw	r2,-12(fp)
 800cfe0:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 800cfe4:	e0bffd17 	ldw	r2,-12(fp)
 800cfe8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800cfec:	00000606 	br	800d008 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800cff0:	e0bffd17 	ldw	r2,-12(fp)
 800cff4:	10800044 	addi	r2,r2,1
 800cff8:	e0bffd15 	stw	r2,-12(fp)
 800cffc:	e0bffd17 	ldw	r2,-12(fp)
 800d000:	10800810 	cmplti	r2,r2,32
 800d004:	103fe41e 	bne	r2,zero,800cf98 <__alt_data_end+0xfc00cf98>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800d008:	e0bffe17 	ldw	r2,-8(fp)
}
 800d00c:	e037883a 	mov	sp,fp
 800d010:	df000017 	ldw	fp,0(sp)
 800d014:	dec00104 	addi	sp,sp,4
 800d018:	f800283a 	ret

0800d01c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800d01c:	defffb04 	addi	sp,sp,-20
 800d020:	df000415 	stw	fp,16(sp)
 800d024:	df000404 	addi	fp,sp,16
 800d028:	e13ffe15 	stw	r4,-8(fp)
 800d02c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800d030:	e0bfff17 	ldw	r2,-4(fp)
 800d034:	10840070 	cmpltui	r2,r2,4097
 800d038:	1000021e 	bne	r2,zero,800d044 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 800d03c:	00840004 	movi	r2,4096
 800d040:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 800d044:	e0fffe17 	ldw	r3,-8(fp)
 800d048:	e0bfff17 	ldw	r2,-4(fp)
 800d04c:	1885883a 	add	r2,r3,r2
 800d050:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800d054:	e0bffe17 	ldw	r2,-8(fp)
 800d058:	e0bffc15 	stw	r2,-16(fp)
 800d05c:	00000506 	br	800d074 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800d060:	e0bffc17 	ldw	r2,-16(fp)
 800d064:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800d068:	e0bffc17 	ldw	r2,-16(fp)
 800d06c:	10800804 	addi	r2,r2,32
 800d070:	e0bffc15 	stw	r2,-16(fp)
 800d074:	e0fffc17 	ldw	r3,-16(fp)
 800d078:	e0bffd17 	ldw	r2,-12(fp)
 800d07c:	18bff836 	bltu	r3,r2,800d060 <__alt_data_end+0xfc00d060>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800d080:	e0bffe17 	ldw	r2,-8(fp)
 800d084:	108007cc 	andi	r2,r2,31
 800d088:	10000226 	beq	r2,zero,800d094 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800d08c:	e0bffc17 	ldw	r2,-16(fp)
 800d090:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800d094:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 800d098:	0001883a 	nop
 800d09c:	e037883a 	mov	sp,fp
 800d0a0:	df000017 	ldw	fp,0(sp)
 800d0a4:	dec00104 	addi	sp,sp,4
 800d0a8:	f800283a 	ret

0800d0ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800d0ac:	defffe04 	addi	sp,sp,-8
 800d0b0:	df000115 	stw	fp,4(sp)
 800d0b4:	df000104 	addi	fp,sp,4
 800d0b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800d0bc:	e0bfff17 	ldw	r2,-4(fp)
 800d0c0:	10bffe84 	addi	r2,r2,-6
 800d0c4:	10c00428 	cmpgeui	r3,r2,16
 800d0c8:	18001a1e 	bne	r3,zero,800d134 <alt_exception_cause_generated_bad_addr+0x88>
 800d0cc:	100690ba 	slli	r3,r2,2
 800d0d0:	00820074 	movhi	r2,2049
 800d0d4:	10b43904 	addi	r2,r2,-12060
 800d0d8:	1885883a 	add	r2,r3,r2
 800d0dc:	10800017 	ldw	r2,0(r2)
 800d0e0:	1000683a 	jmp	r2
 800d0e4:	0800d124 	muli	zero,at,836
 800d0e8:	0800d124 	muli	zero,at,836
 800d0ec:	0800d134 	orhi	zero,at,836
 800d0f0:	0800d134 	orhi	zero,at,836
 800d0f4:	0800d134 	orhi	zero,at,836
 800d0f8:	0800d124 	muli	zero,at,836
 800d0fc:	0800d12c 	andhi	zero,at,836
 800d100:	0800d134 	orhi	zero,at,836
 800d104:	0800d124 	muli	zero,at,836
 800d108:	0800d124 	muli	zero,at,836
 800d10c:	0800d134 	orhi	zero,at,836
 800d110:	0800d124 	muli	zero,at,836
 800d114:	0800d12c 	andhi	zero,at,836
 800d118:	0800d134 	orhi	zero,at,836
 800d11c:	0800d134 	orhi	zero,at,836
 800d120:	0800d124 	muli	zero,at,836
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800d124:	00800044 	movi	r2,1
 800d128:	00000306 	br	800d138 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800d12c:	0005883a 	mov	r2,zero
 800d130:	00000106 	br	800d138 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800d134:	0005883a 	mov	r2,zero
  }
}
 800d138:	e037883a 	mov	sp,fp
 800d13c:	df000017 	ldw	fp,0(sp)
 800d140:	dec00104 	addi	sp,sp,4
 800d144:	f800283a 	ret

0800d148 <atexit>:
 800d148:	200b883a 	mov	r5,r4
 800d14c:	000f883a 	mov	r7,zero
 800d150:	000d883a 	mov	r6,zero
 800d154:	0009883a 	mov	r4,zero
 800d158:	800d2101 	jmpi	800d210 <__register_exitproc>

0800d15c <exit>:
 800d15c:	defffe04 	addi	sp,sp,-8
 800d160:	000b883a 	mov	r5,zero
 800d164:	dc000015 	stw	r16,0(sp)
 800d168:	dfc00115 	stw	ra,4(sp)
 800d16c:	2021883a 	mov	r16,r4
 800d170:	800d3280 	call	800d328 <__call_exitprocs>
 800d174:	00820074 	movhi	r2,2049
 800d178:	10bceb04 	addi	r2,r2,-3156
 800d17c:	11000017 	ldw	r4,0(r2)
 800d180:	20800f17 	ldw	r2,60(r4)
 800d184:	10000126 	beq	r2,zero,800d18c <exit+0x30>
 800d188:	103ee83a 	callr	r2
 800d18c:	8009883a 	mov	r4,r16
 800d190:	800d4a80 	call	800d4a8 <_exit>

0800d194 <memcmp>:
 800d194:	01c000c4 	movi	r7,3
 800d198:	3980192e 	bgeu	r7,r6,800d200 <memcmp+0x6c>
 800d19c:	2144b03a 	or	r2,r4,r5
 800d1a0:	11c4703a 	and	r2,r2,r7
 800d1a4:	10000f26 	beq	r2,zero,800d1e4 <memcmp+0x50>
 800d1a8:	20800003 	ldbu	r2,0(r4)
 800d1ac:	28c00003 	ldbu	r3,0(r5)
 800d1b0:	10c0151e 	bne	r2,r3,800d208 <memcmp+0x74>
 800d1b4:	31bfff84 	addi	r6,r6,-2
 800d1b8:	01ffffc4 	movi	r7,-1
 800d1bc:	00000406 	br	800d1d0 <memcmp+0x3c>
 800d1c0:	20800003 	ldbu	r2,0(r4)
 800d1c4:	28c00003 	ldbu	r3,0(r5)
 800d1c8:	31bfffc4 	addi	r6,r6,-1
 800d1cc:	10c00e1e 	bne	r2,r3,800d208 <memcmp+0x74>
 800d1d0:	21000044 	addi	r4,r4,1
 800d1d4:	29400044 	addi	r5,r5,1
 800d1d8:	31fff91e 	bne	r6,r7,800d1c0 <__alt_data_end+0xfc00d1c0>
 800d1dc:	0005883a 	mov	r2,zero
 800d1e0:	f800283a 	ret
 800d1e4:	20c00017 	ldw	r3,0(r4)
 800d1e8:	28800017 	ldw	r2,0(r5)
 800d1ec:	18bfee1e 	bne	r3,r2,800d1a8 <__alt_data_end+0xfc00d1a8>
 800d1f0:	31bfff04 	addi	r6,r6,-4
 800d1f4:	21000104 	addi	r4,r4,4
 800d1f8:	29400104 	addi	r5,r5,4
 800d1fc:	39bff936 	bltu	r7,r6,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d200:	303fe91e 	bne	r6,zero,800d1a8 <__alt_data_end+0xfc00d1a8>
 800d204:	003ff506 	br	800d1dc <__alt_data_end+0xfc00d1dc>
 800d208:	10c5c83a 	sub	r2,r2,r3
 800d20c:	f800283a 	ret

0800d210 <__register_exitproc>:
 800d210:	defffa04 	addi	sp,sp,-24
 800d214:	dc000315 	stw	r16,12(sp)
 800d218:	04020074 	movhi	r16,2049
 800d21c:	843ceb04 	addi	r16,r16,-3156
 800d220:	80c00017 	ldw	r3,0(r16)
 800d224:	dc400415 	stw	r17,16(sp)
 800d228:	dfc00515 	stw	ra,20(sp)
 800d22c:	18805217 	ldw	r2,328(r3)
 800d230:	2023883a 	mov	r17,r4
 800d234:	10003726 	beq	r2,zero,800d314 <__register_exitproc+0x104>
 800d238:	10c00117 	ldw	r3,4(r2)
 800d23c:	010007c4 	movi	r4,31
 800d240:	20c00e16 	blt	r4,r3,800d27c <__register_exitproc+0x6c>
 800d244:	1a000044 	addi	r8,r3,1
 800d248:	8800221e 	bne	r17,zero,800d2d4 <__register_exitproc+0xc4>
 800d24c:	18c00084 	addi	r3,r3,2
 800d250:	18c7883a 	add	r3,r3,r3
 800d254:	18c7883a 	add	r3,r3,r3
 800d258:	12000115 	stw	r8,4(r2)
 800d25c:	10c7883a 	add	r3,r2,r3
 800d260:	19400015 	stw	r5,0(r3)
 800d264:	0005883a 	mov	r2,zero
 800d268:	dfc00517 	ldw	ra,20(sp)
 800d26c:	dc400417 	ldw	r17,16(sp)
 800d270:	dc000317 	ldw	r16,12(sp)
 800d274:	dec00604 	addi	sp,sp,24
 800d278:	f800283a 	ret
 800d27c:	00800034 	movhi	r2,0
 800d280:	10800004 	addi	r2,r2,0
 800d284:	10002626 	beq	r2,zero,800d320 <__register_exitproc+0x110>
 800d288:	01006404 	movi	r4,400
 800d28c:	d9400015 	stw	r5,0(sp)
 800d290:	d9800115 	stw	r6,4(sp)
 800d294:	d9c00215 	stw	r7,8(sp)
 800d298:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>
 800d29c:	d9400017 	ldw	r5,0(sp)
 800d2a0:	d9800117 	ldw	r6,4(sp)
 800d2a4:	d9c00217 	ldw	r7,8(sp)
 800d2a8:	10001d26 	beq	r2,zero,800d320 <__register_exitproc+0x110>
 800d2ac:	81000017 	ldw	r4,0(r16)
 800d2b0:	10000115 	stw	zero,4(r2)
 800d2b4:	02000044 	movi	r8,1
 800d2b8:	22405217 	ldw	r9,328(r4)
 800d2bc:	0007883a 	mov	r3,zero
 800d2c0:	12400015 	stw	r9,0(r2)
 800d2c4:	20805215 	stw	r2,328(r4)
 800d2c8:	10006215 	stw	zero,392(r2)
 800d2cc:	10006315 	stw	zero,396(r2)
 800d2d0:	883fde26 	beq	r17,zero,800d24c <__alt_data_end+0xfc00d24c>
 800d2d4:	18c9883a 	add	r4,r3,r3
 800d2d8:	2109883a 	add	r4,r4,r4
 800d2dc:	1109883a 	add	r4,r2,r4
 800d2e0:	21802215 	stw	r6,136(r4)
 800d2e4:	01800044 	movi	r6,1
 800d2e8:	12406217 	ldw	r9,392(r2)
 800d2ec:	30cc983a 	sll	r6,r6,r3
 800d2f0:	4992b03a 	or	r9,r9,r6
 800d2f4:	12406215 	stw	r9,392(r2)
 800d2f8:	21c04215 	stw	r7,264(r4)
 800d2fc:	01000084 	movi	r4,2
 800d300:	893fd21e 	bne	r17,r4,800d24c <__alt_data_end+0xfc00d24c>
 800d304:	11006317 	ldw	r4,396(r2)
 800d308:	218cb03a 	or	r6,r4,r6
 800d30c:	11806315 	stw	r6,396(r2)
 800d310:	003fce06 	br	800d24c <__alt_data_end+0xfc00d24c>
 800d314:	18805304 	addi	r2,r3,332
 800d318:	18805215 	stw	r2,328(r3)
 800d31c:	003fc606 	br	800d238 <__alt_data_end+0xfc00d238>
 800d320:	00bfffc4 	movi	r2,-1
 800d324:	003fd006 	br	800d268 <__alt_data_end+0xfc00d268>

0800d328 <__call_exitprocs>:
 800d328:	defff504 	addi	sp,sp,-44
 800d32c:	df000915 	stw	fp,36(sp)
 800d330:	dd400615 	stw	r21,24(sp)
 800d334:	dc800315 	stw	r18,12(sp)
 800d338:	dfc00a15 	stw	ra,40(sp)
 800d33c:	ddc00815 	stw	r23,32(sp)
 800d340:	dd800715 	stw	r22,28(sp)
 800d344:	dd000515 	stw	r20,20(sp)
 800d348:	dcc00415 	stw	r19,16(sp)
 800d34c:	dc400215 	stw	r17,8(sp)
 800d350:	dc000115 	stw	r16,4(sp)
 800d354:	d9000015 	stw	r4,0(sp)
 800d358:	2839883a 	mov	fp,r5
 800d35c:	04800044 	movi	r18,1
 800d360:	057fffc4 	movi	r21,-1
 800d364:	00820074 	movhi	r2,2049
 800d368:	10bceb04 	addi	r2,r2,-3156
 800d36c:	12000017 	ldw	r8,0(r2)
 800d370:	45005217 	ldw	r20,328(r8)
 800d374:	44c05204 	addi	r19,r8,328
 800d378:	a0001c26 	beq	r20,zero,800d3ec <__call_exitprocs+0xc4>
 800d37c:	a0800117 	ldw	r2,4(r20)
 800d380:	15ffffc4 	addi	r23,r2,-1
 800d384:	b8000d16 	blt	r23,zero,800d3bc <__call_exitprocs+0x94>
 800d388:	14000044 	addi	r16,r2,1
 800d38c:	8421883a 	add	r16,r16,r16
 800d390:	8421883a 	add	r16,r16,r16
 800d394:	84402004 	addi	r17,r16,128
 800d398:	a463883a 	add	r17,r20,r17
 800d39c:	a421883a 	add	r16,r20,r16
 800d3a0:	e0001e26 	beq	fp,zero,800d41c <__call_exitprocs+0xf4>
 800d3a4:	80804017 	ldw	r2,256(r16)
 800d3a8:	e0801c26 	beq	fp,r2,800d41c <__call_exitprocs+0xf4>
 800d3ac:	bdffffc4 	addi	r23,r23,-1
 800d3b0:	843fff04 	addi	r16,r16,-4
 800d3b4:	8c7fff04 	addi	r17,r17,-4
 800d3b8:	bd7ff91e 	bne	r23,r21,800d3a0 <__alt_data_end+0xfc00d3a0>
 800d3bc:	00800034 	movhi	r2,0
 800d3c0:	10800004 	addi	r2,r2,0
 800d3c4:	10000926 	beq	r2,zero,800d3ec <__call_exitprocs+0xc4>
 800d3c8:	a0800117 	ldw	r2,4(r20)
 800d3cc:	1000301e 	bne	r2,zero,800d490 <__call_exitprocs+0x168>
 800d3d0:	a0800017 	ldw	r2,0(r20)
 800d3d4:	10003226 	beq	r2,zero,800d4a0 <__call_exitprocs+0x178>
 800d3d8:	a009883a 	mov	r4,r20
 800d3dc:	98800015 	stw	r2,0(r19)
 800d3e0:	00000000 	call	0 <__alt_mem_onchip_memory-0x20000>
 800d3e4:	9d000017 	ldw	r20,0(r19)
 800d3e8:	a03fe41e 	bne	r20,zero,800d37c <__alt_data_end+0xfc00d37c>
 800d3ec:	dfc00a17 	ldw	ra,40(sp)
 800d3f0:	df000917 	ldw	fp,36(sp)
 800d3f4:	ddc00817 	ldw	r23,32(sp)
 800d3f8:	dd800717 	ldw	r22,28(sp)
 800d3fc:	dd400617 	ldw	r21,24(sp)
 800d400:	dd000517 	ldw	r20,20(sp)
 800d404:	dcc00417 	ldw	r19,16(sp)
 800d408:	dc800317 	ldw	r18,12(sp)
 800d40c:	dc400217 	ldw	r17,8(sp)
 800d410:	dc000117 	ldw	r16,4(sp)
 800d414:	dec00b04 	addi	sp,sp,44
 800d418:	f800283a 	ret
 800d41c:	a0800117 	ldw	r2,4(r20)
 800d420:	80c00017 	ldw	r3,0(r16)
 800d424:	10bfffc4 	addi	r2,r2,-1
 800d428:	15c01426 	beq	r2,r23,800d47c <__call_exitprocs+0x154>
 800d42c:	80000015 	stw	zero,0(r16)
 800d430:	183fde26 	beq	r3,zero,800d3ac <__alt_data_end+0xfc00d3ac>
 800d434:	95c8983a 	sll	r4,r18,r23
 800d438:	a0806217 	ldw	r2,392(r20)
 800d43c:	a5800117 	ldw	r22,4(r20)
 800d440:	2084703a 	and	r2,r4,r2
 800d444:	10000b26 	beq	r2,zero,800d474 <__call_exitprocs+0x14c>
 800d448:	a0806317 	ldw	r2,396(r20)
 800d44c:	2088703a 	and	r4,r4,r2
 800d450:	20000c1e 	bne	r4,zero,800d484 <__call_exitprocs+0x15c>
 800d454:	89400017 	ldw	r5,0(r17)
 800d458:	d9000017 	ldw	r4,0(sp)
 800d45c:	183ee83a 	callr	r3
 800d460:	a0800117 	ldw	r2,4(r20)
 800d464:	15bfbf1e 	bne	r2,r22,800d364 <__alt_data_end+0xfc00d364>
 800d468:	98800017 	ldw	r2,0(r19)
 800d46c:	153fcf26 	beq	r2,r20,800d3ac <__alt_data_end+0xfc00d3ac>
 800d470:	003fbc06 	br	800d364 <__alt_data_end+0xfc00d364>
 800d474:	183ee83a 	callr	r3
 800d478:	003ff906 	br	800d460 <__alt_data_end+0xfc00d460>
 800d47c:	a5c00115 	stw	r23,4(r20)
 800d480:	003feb06 	br	800d430 <__alt_data_end+0xfc00d430>
 800d484:	89000017 	ldw	r4,0(r17)
 800d488:	183ee83a 	callr	r3
 800d48c:	003ff406 	br	800d460 <__alt_data_end+0xfc00d460>
 800d490:	a0800017 	ldw	r2,0(r20)
 800d494:	a027883a 	mov	r19,r20
 800d498:	1029883a 	mov	r20,r2
 800d49c:	003fb606 	br	800d378 <__alt_data_end+0xfc00d378>
 800d4a0:	0005883a 	mov	r2,zero
 800d4a4:	003ffb06 	br	800d494 <__alt_data_end+0xfc00d494>

0800d4a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800d4a8:	defffd04 	addi	sp,sp,-12
 800d4ac:	df000215 	stw	fp,8(sp)
 800d4b0:	df000204 	addi	fp,sp,8
 800d4b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800d4b8:	0001883a 	nop
 800d4bc:	e0bfff17 	ldw	r2,-4(fp)
 800d4c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800d4c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800d4c8:	10000226 	beq	r2,zero,800d4d4 <_exit+0x2c>
    ALT_SIM_FAIL();
 800d4cc:	002af070 	cmpltui	zero,zero,43969
 800d4d0:	00000106 	br	800d4d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800d4d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800d4d8:	003fff06 	br	800d4d8 <__alt_data_end+0xfc00d4d8>
