
Lab4_6_FFT.elf:     file format elf32-littlenios2
Lab4_6_FFT.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08020244

Program Header:
    LOAD off    0x00001000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x08020020 align 2**12
         filesz 0x00017adc memsz 0x00017adc flags r-x
    LOAD off    0x00018afc vaddr 0x08037afc paddr 0x08039760 align 2**12
         filesz 0x00001c64 memsz 0x00001c64 flags rw-
    LOAD off    0x0001b3c4 vaddr 0x0803b3c4 paddr 0x0803b3c4 align 2**12
         filesz 0x00000000 memsz 0x000002bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08020020  08020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017030  08020244  08020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000888  08037274  08037274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c64  08037afc  08039760  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002bc  0803b3c4  0803b3c4  0001b3c4  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_controller 00000000  04000000  04000000  0001a760  2**0
                  CONTENTS
  7 .onchip_memory_nios2_FFT 00000000  0803b680  0803b680  0001a760  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001a760  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001278  00000000  00000000  0001a788  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029bb0  00000000  00000000  0001ba00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b585  00000000  00000000  000455b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e8e1  00000000  00000000  00050b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002e64  00000000  00000000  0005f418  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000499e  00000000  00000000  0006227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c2fe  00000000  00000000  00066c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00082f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001e40  00000000  00000000  00082f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00088df2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00088df5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00088dfe  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088dff  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00088e00  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00088e04  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00088e08  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000d  00000000  00000000  00088e0c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000d  00000000  00000000  00088e19  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000d  00000000  00000000  00088e26  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00088e33  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000041  00000000  00000000  00088e3e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000baf4  00000000  00000000  00088e7f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000cfc96  00000000  00000000  00094973  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
08020244 l    d  .text	00000000 .text
08037274 l    d  .rodata	00000000 .rodata
08037afc l    d  .rwdata	00000000 .rwdata
0803b3c4 l    d  .bss	00000000 .bss
04000000 l    d  .SDRAM_controller	00000000 .SDRAM_controller
0803b680 l    d  .onchip_memory_nios2_FFT	00000000 .onchip_memory_nios2_FFT
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_6_FFT_bsp//obj/HAL/src/crt0.o
0802028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SoundTreatment.c
0803b3cc l     O .bss	00000004 cfg.3978
00000000 l    df *ABS*	00000000 kiss_fft.c
08020ed4 l     F .text	00000200 kf_bfly2
080210d4 l     F .text	00000710 kf_bfly4
080217e4 l     F .text	0000060c kf_bfly3
08021df0 l     F .text	00000b00 kf_bfly5
080228f0 l     F .text	00000344 kf_bfly_generic
08022c34 l     F .text	00000210 kf_work
08022e44 l     F .text	0000013c kf_factor
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0803764c l     O .rodata	00000108 two_over_pi
080375cc l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
08037794 l     O .rodata	00000010 init_jk
08037754 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
08037afc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080378ee l     O .rodata	00000010 zeroes.4404
0802c204 l     F .text	000000bc __sbprintf
080378fe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0802c594 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0802e0c4 l     F .text	00000008 __fp_unlock
0802e0d8 l     F .text	0000019c __sinit.part.1
0802e274 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08038348 l     O .rwdata	00000020 lc_ctype_charset
08038328 l     O .rwdata	00000020 lc_message_charset
08038368 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0803792c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08030c54 l     F .text	000000fc __sprint_r.part.0
08037a60 l     O .rodata	00000010 blanks.4348
08037a50 l     O .rodata	00000010 zeroes.4349
080321e0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08033680 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0803378c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080337ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080338d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080339b8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08033aa4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08033c78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08039740 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08033ec4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08033ff8 l     F .text	00000034 alt_dev_reg
0803402c l     F .text	0000003c alt_get_errno
08034068 l     F .text	00000068 alt_avalon_mutex_reg
08038548 l     O .rwdata	00001060 jtag_uart_FFT
080395a8 l     O .rwdata	00000048 mailbox_to_FFT
080395f0 l     O .rwdata	00000048 mailbox_to_Sound_Acquisition
08039638 l     O .rwdata	00000010 mutex_SDRAM
08039648 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080343e4 l     F .text	0000020c altera_avalon_jtag_uart_irq
080345f0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
08034c28 l     F .text	00000090 altera_avalon_mailbox_identify
08034cb8 l     F .text	00000078 altera_avalon_mailbox_post
08034d30 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
08034e68 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
08035588 l     F .text	0000003c alt_get_errno
080355c4 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08035854 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
08035b04 l     F .text	0000009c altera_avalon_uart_irq
08035ba0 l     F .text	000000e4 altera_avalon_uart_rxirq
08035c84 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
08035e20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
08036038 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08036394 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08036898 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080369d8 l     F .text	0000003c alt_get_errno
08036a14 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
08020c0c g     F .text	00000240 modify_pitch
0803b404 g     O .bss	00000004 alt_instruction_exception_handler
08030360 g     F .text	00000074 _mprec_log10
080352fc g     F .text	00000150 altera_avalon_mailbox_send
0803044c g     F .text	0000008c __any_on
0803277c g     F .text	00000054 _isatty_r
08037938 g     O .rodata	00000028 __mprec_tinytens
08033bb4 g     F .text	0000007c alt_main
08029e30 g     F .text	000000c0 _puts_r
0803b580 g     O .bss	00000100 alt_irq
080257a8 g     F .text	00000014 fabs
080327d0 g     F .text	00000060 _lseek_r
08023784 g     F .text	00000130 sqrt
08039760 g       *ABS*	00000000 __flash_rwdata_start
08027c74 g     F .text	00000088 .hidden __eqdf2
0803b680 g       *ABS*	00000000 __alt_heap_start
080206c4 g     F .text	00000114 add_reverberation
08029df4 g     F .text	0000003c printf
080329e8 g     F .text	0000009c _wcrtomb_r
08030b14 g     F .text	0000005c __sseek
0802e414 g     F .text	00000010 __sinit
08032890 g     F .text	00000140 __swbuf_r
0802eedc g     F .text	0000007c _setlocale_r
0802e27c g     F .text	00000068 __sfmoreglue
08033c54 g     F .text	00000024 __malloc_unlock
0802f258 g     F .text	0000015c memmove
0802e3fc g     F .text	00000018 _cleanup
080356fc g     F .text	00000040 altera_avalon_mutex_trylock
0802f4dc g     F .text	000000a8 _Balloc
0802694c g     F .text	00000070 .hidden __fixsfsi
080208ec g     F .text	000000dc reverse
08027cfc g     F .text	000000dc .hidden __gtdf2
08036dd0 g     F .text	00000024 altera_nios2_gen2_irq_init
08029400 g     F .text	00000010 __errno
08020000 g     F .entry	0000001c __reset
08035790 g     F .text	00000074 altera_avalon_mutex_is_mine
08020020 g       *ABS*	00000000 __flash_exceptions_start
08032720 g     F .text	0000005c _fstat_r
0803b3dc g     O .bss	00000004 errno
080234a8 g     F .text	000001ec floor
08030a90 g     F .text	00000008 __seofread
0803b3f0 g     O .bss	00000004 alt_argv
0804170c g       *ABS*	00000000 _gp
0803544c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
08026468 g     F .text	000004e4 .hidden __subsf3
080207d8 g     F .text	00000114 add_echo
080383c8 g     O .rwdata	00000180 alt_fd_list
080238b4 g     F .text	0000076c __ieee754_rem_pio2
08036534 g     F .text	00000090 alt_find_dev
08029c7c g     F .text	00000148 memcpy
0802e0cc g     F .text	0000000c _cleanup_r
08028f60 g     F .text	000000dc .hidden __floatsidf
0803695c g     F .text	0000007c alt_io_redirect
08027dd8 g     F .text	000000f4 .hidden __ltdf2
08037274 g       *ABS*	00000000 __DTOR_END__
08029ef0 g     F .text	00000014 puts
08037030 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08034f10 g     F .text	00000078 altera_avalon_mailbox_simple_init
080257bc g     F .text	00000074 __fpclassifyd
080302bc g     F .text	000000a4 __ratio
080321c4 g     F .text	0000001c __vfiprintf_internal
080347e8 g     F .text	0000021c altera_avalon_jtag_uart_read
08029448 g     F .text	00000014 malloc
08029dc4 g     F .text	00000030 _printf_r
08025ae8 g     F .text	00000064 .hidden __udivsi3
08033914 g     F .text	000000a4 isatty
08037988 g     O .rodata	000000c8 __mprec_tens
08035284 g     F .text	00000078 altera_avalon_mailbox_status
0803516c g     F .text	00000118 altera_avalon_mailbox_close
0802ef58 g     F .text	0000000c __locale_charset
080242a8 g     F .text	000004a4 __kernel_cos
08036fa0 g     F .text	00000090 alt_icache_flush
0803b3d8 g     O .bss	00000004 __malloc_top_pad
08039720 g     O .rwdata	00000004 __mb_cur_max
0802ef88 g     F .text	0000000c _localeconv_r
0802f8e8 g     F .text	0000003c __i2b
0802e898 g     F .text	000004bc __sfvwrite_r
08029f04 g     F .text	00000054 _sbrk_r
08032830 g     F .text	00000060 _read_r
08039738 g     O .rwdata	00000004 alt_max_fd
08032414 g     F .text	000000f0 _fclose_r
0802e094 g     F .text	00000030 fflush
0803b3d4 g     O .bss	00000004 __malloc_max_sbrked_mem
080254dc g     F .text	000002cc __kernel_sin
080290e4 g     F .text	00000110 .hidden __extendsfdf2
08026ae0 g     F .text	000008ac .hidden __adddf3
08030064 g     F .text	0000010c __b2d
08033148 g     F .text	00000538 .hidden __umoddi3
08033ae0 g     F .text	000000d4 lseek
08035804 g     F .text	00000050 altera_avalon_mutex_first_lock
0803970c g     O .rwdata	00000004 __fdlib_version
08039710 g     O .rwdata	00000004 _global_impure_ptr
080304d8 g     F .text	00000564 _realloc_r
0803b680 g       *ABS*	00000000 __bss_end
080367a8 g     F .text	000000f0 alt_iic_isr_register
08036cc8 g     F .text	00000108 alt_tick
08032bd0 g     F .text	00000578 .hidden __udivdi3
0803267c g     F .text	00000024 _fputwc_r
08037960 g     O .rodata	00000028 __mprec_bigtens
0802f6cc g     F .text	00000104 __s2b
0802903c g     F .text	000000a8 .hidden __floatunsidf
0802fda4 g     F .text	00000060 __mcmp
08035a58 g     F .text	000000ac altera_avalon_uart_init
0802e434 g     F .text	00000018 __fp_lock_all
0803675c g     F .text	0000004c alt_ic_irq_enabled
08036c2c g     F .text	0000009c alt_alarm_stop
0802058c g     F .text	000000e4 receiver_mailbox_callback
0803b3f8 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d4 alt_irq_handler
080383a0 g     O .rwdata	00000028 alt_dev_null
0802474c g     F .text	00000d90 __kernel_rem_pio2
08035640 g     F .text	00000054 altera_avalon_mutex_open
0803b430 g     O .bss	00000050 audio_file
0803b480 g     O .bss	00000080 freq_domain
0803634c g     F .text	00000048 alt_dcache_flush_all
0802f7d0 g     F .text	00000068 __hi0bits
08028ee0 g     F .text	00000080 .hidden __fixdfsi
08039760 g       *ABS*	00000000 __ram_rwdata_end
08039730 g     O .rwdata	00000008 alt_dev_list
08033f00 g     F .text	000000f8 write
0803b3c4 g     O .bss	00000004 FIFO_start
0803974c g     O .rwdata	00000008 alt_mutex_list
08037afc g       *ABS*	00000000 __ram_rodata_end
08033828 g     F .text	000000b0 fstat
08027dd8 g     F .text	000000f4 .hidden __ledf2
0802fb1c g     F .text	00000140 __pow5mult
08030d68 g     F .text	0000145c ___vfiprintf_internal_r
0803b3e8 g     O .bss	00000004 __nlocale_changed
08025b4c g     F .text	00000058 .hidden __umodsi3
0803b680 g       *ABS*	00000000 end
08036074 g     F .text	000001ac altera_avalon_uart_write
08034324 g     F .text	000000c0 altera_avalon_jtag_uart_init
080201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08037274 g       *ABS*	00000000 __CTOR_LIST__
08040000 g       *ABS*	00000000 __alt_stack_pointer
080358cc g     F .text	0000007c alt_avalon_timer_sc_init
080359a8 g     F .text	00000060 altera_avalon_uart_write_fd
0802939c g     F .text	00000064 .hidden __clzsi2
08035a08 g     F .text	00000050 altera_avalon_uart_close_fd
08034a04 g     F .text	00000224 altera_avalon_jtag_uart_write
080233bc g     F .text	000000ec cos
080231b0 g     F .text	000000d4 kiss_fft_stride
0803b3c8 g     O .bss	00000004 FIFO_length
0802e424 g     F .text	00000004 __sfp_lock_acquire
0802f174 g     F .text	000000e4 memchr
08023284 g     F .text	00000048 kiss_fft
08029ff0 g     F .text	000021f8 ___vfprintf_internal_r
0802e588 g     F .text	00000310 _free_r
0802ef64 g     F .text	00000010 __locale_mb_cur_max
0802c414 g     F .text	00000180 __call_exitprocs
08020e4c g     F .text	00000088 SilentFft
0803b3e4 g     O .bss	00000004 __mlocale_changed
08039718 g     O .rwdata	00000004 __malloc_sbrk_base
08020244 g     F .text	0000004c _start
0803b3fc g     O .bss	00000004 _alt_tick_rate
08023694 g     F .text	000000f0 sin
0802fc5c g     F .text	00000148 __lshift
0803b400 g     O .bss	00000004 _alt_nticks
08033cb4 g     F .text	000000fc read
08034108 g     F .text	000000b8 alt_sys_init
080269bc g     F .text	00000124 .hidden __floatsisf
0803715c g     F .text	00000118 __register_exitproc
0803573c g     F .text	00000054 altera_avalon_mutex_unlock
0802f924 g     F .text	000001f8 __multiply
08034690 g     F .text	00000068 altera_avalon_jtag_uart_close
08037afc g       *ABS*	00000000 __ram_rwdata_start
08037274 g       *ABS*	00000000 __ram_rodata_start
0803b408 g     O .bss	00000028 __malloc_current_mallinfo
08030170 g     F .text	0000014c __d2b
080341c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08036efc g     F .text	000000a4 alt_get_fd
080322fc g     F .text	00000054 _close_r
080370e0 g     F .text	0000007c memcmp
08034280 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0803b680 g       *ABS*	00000000 __alt_stack_base
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios2_FFT
080342d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0802c2c0 g     F .text	00000154 __swsetup_r
0802738c g     F .text	000008e8 .hidden __divdf3
0802e2e4 g     F .text	00000118 __sfp
080303d4 g     F .text	00000078 __copybits
08037f20 g     O .rwdata	00000408 __malloc_av_
0802e430 g     F .text	00000004 __sinit_lock_release
08027ecc g     F .text	00000718 .hidden __muldf3
08030a3c g     F .text	00000054 __sread
08036df4 g     F .text	00000108 alt_find_file
080363d0 g     F .text	000000a4 alt_dev_llist_insert
08033c30 g     F .text	00000024 __malloc_lock
08033e14 g     F .text	000000b0 sbrk
080209c8 g     F .text	00000244 moving_average
0802e038 g     F .text	0000005c _fflush_r
08032350 g     F .text	000000c4 _calloc_r
0803b3c4 g       *ABS*	00000000 __bss_start
0802f3b4 g     F .text	00000128 memset
08020290 g     F .text	000002fc main
0803b3f4 g     O .bss	00000004 alt_envp
0803b3d0 g     O .bss	00000004 __malloc_max_total_mem
08034220 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080329d0 g     F .text	00000018 __swbuf
08030b70 g     F .text	00000008 __sclose
08025830 g     F .text	00000008 matherr
08040000 g       *ABS*	00000000 __alt_heap_limit
08032504 g     F .text	00000014 fclose
080291f4 g     F .text	000001a8 .hidden __truncdfsf2
080356b8 g     F .text	00000044 altera_avalon_mutex_lock
0802c794 g     F .text	00001688 _dtoa_r
08029470 g     F .text	0000080c _malloc_r
08032b44 g     F .text	00000030 __ascii_wctomb
0803973c g     O .rwdata	00000004 alt_errno
0802ed54 g     F .text	000000c4 _fwalk
080259f0 g     F .text	00000084 .hidden __divsi3
0802e464 g     F .text	00000124 _malloc_trim_r
08037274 g       *ABS*	00000000 __CTOR_END__
0802606c g     F .text	000003fc .hidden __mulsf3
08030b78 g     F .text	000000dc strcmp
08037274 g       *ABS*	00000000 __flash_rodata_start
08037274 g       *ABS*	00000000 __DTOR_LIST__
080259d4 g     F .text	0000001c copysign
08027c74 g     F .text	00000088 .hidden __nedf2
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
080340d0 g     F .text	00000038 alt_irq_init
08033db0 g     F .text	00000064 alt_release_fd
080377a4 g     O .rodata	00000100 .hidden __clz_tab
0803b3e0 g     O .bss	00000004 _PathLocale
080370cc g     F .text	00000014 atexit
0803229c g     F .text	00000060 _write_r
0802ef94 g     F .text	00000018 setlocale
08039714 g     O .rwdata	00000004 _impure_ptr
0803b3ec g     O .bss	00000004 alt_argc
0802de1c g     F .text	0000021c __sflush_r
08025838 g     F .text	0000019c scalbn
080364d4 g     F .text	00000060 _do_dtors
0802ef80 g     F .text	00000008 __locale_cjk_lang
08020020 g       .exceptions	00000000 alt_irq_entry
08030000 g     F .text	00000064 __ulp
0802e44c g     F .text	00000018 __fp_unlock_all
0803b500 g     O .bss	00000080 time_domain
08039728 g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
0802efac g     F .text	0000000c localeconv
08024020 g     F .text	00000288 __ieee754_sqrt
080365f8 g     F .text	00000050 alt_ic_isr_register
08039760 g       *ABS*	00000000 _edata
08035948 g     F .text	00000060 altera_avalon_uart_read_fd
0803b680 g       *ABS*	00000000 _end
08032518 g     F .text	00000164 __fputwc
08020244 g       *ABS*	00000000 __ram_exceptions_end
080346f8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080366d0 g     F .text	0000008c alt_ic_irq_disable
08039744 g     O .rwdata	00000008 alt_mailbox_simple_list
08030a98 g     F .text	0000007c __swrite
0803971c g     O .rwdata	00000004 __malloc_trim_threshold
0802ef74 g     F .text	0000000c __locale_msgcharset
08029410 g     F .text	00000038 exit
0802ee18 g     F .text	000000c4 _fwalk_reent
0802fe04 g     F .text	000001fc __mdiff
080232cc g     F .text	00000020 kiss_fft_cleanup
08025a74 g     F .text	00000074 .hidden __modsi3
08040000 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
0802e428 g     F .text	00000004 __sfp_lock_release
08035dcc g     F .text	00000054 altera_avalon_uart_close
08034f88 g     F .text	000001e4 altera_avalon_mailbox_open
080337b8 g     F .text	00000034 _exit
08036220 g     F .text	0000012c alt_alarm_start
0802efb8 g     F .text	000001bc __smakebuf_r
08029f58 g     F .text	00000098 strlen
08036ad8 g     F .text	00000154 open
08027cfc g     F .text	000000dc .hidden __gedf2
08039724 g     O .rwdata	00000004 __wctomb
08020670 g     F .text	00000054 sender_mailbox_callback
08030d50 g     F .text	00000018 __sprint_r
080365c4 g     F .text	00000034 alt_icache_flush_all
08039754 g     O .rwdata	00000004 alt_priority_mask
08036648 g     F .text	00000088 alt_ic_irq_enable
0802c1e8 g     F .text	0000001c __vfprintf_internal
08035694 g     F .text	00000024 altera_avalon_mutex_close
080232ec g     F .text	000000d0 kiss_fft_next_fast_size
08035e5c g     F .text	000001dc altera_avalon_uart_read
08032b74 g     F .text	0000005c _wctomb_r
08022f80 g     F .text	00000230 kiss_fft_alloc
080285e4 g     F .text	000008fc .hidden __subdf3
0802f838 g     F .text	000000b0 __lo0bits
08039758 g     O .rwdata	00000008 alt_alarm_list
08036474 g     F .text	00000060 _do_ctors
08032a84 g     F .text	000000c0 wcrtomb
080336bc g     F .text	000000d0 close
08025ba4 g     F .text	000004c8 .hidden __addsf3
08033a20 g     F .text	00000084 alt_load
080326a0 g     F .text	00000080 fputwc
0802945c g     F .text	00000014 free
0802e42c g     F .text	00000004 __sinit_lock_acquire
0802f5ac g     F .text	00000120 __multadd
0802f584 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 802000c:	00bffd16 	blt	zero,r2,8020004 <_gp+0xfffde8f8>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020010:	004200b4 	movhi	at,2050
    ori r1, r1, %lo(_start)
 8020014:	08409114 	ori	at,at,580
    jmp r1
 8020018:	0800683a 	jmp	at
 802001c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x4000000>

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d00 	call	80201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001426 	beq	r2,zero,802018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 802013c:	00820134 	movhi	r2,2052
 8020140:	10ad6004 	addi	r2,r2,-19072
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	00820134 	movhi	r2,2052
 8020158:	10ad6004 	addi	r2,r2,-19072
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	1009883a 	mov	r4,r2
 8020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 802017c:	0005313a 	rdctl	r2,ipending
 8020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020184:	e0bfff17 	ldw	r2,-4(fp)
 8020188:	00000706 	br	80201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 802018c:	e0bffc17 	ldw	r2,-16(fp)
 8020190:	1085883a 	add	r2,r2,r2
 8020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8020198:	e0bffd17 	ldw	r2,-12(fp)
 802019c:	10800044 	addi	r2,r2,1
 80201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a4:	003fe106 	br	802012c <_gp+0xfffdea20>

    active = alt_irq_pending ();
 80201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201ac:	e0bffb17 	ldw	r2,-20(fp)
 80201b0:	103fdb1e 	bne	r2,zero,8020120 <_gp+0xfffdea14>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b4:	0001883a 	nop
}
 80201b8:	0001883a 	nop
 80201bc:	e037883a 	mov	sp,fp
 80201c0:	dfc00117 	ldw	ra,4(sp)
 80201c4:	df000017 	ldw	fp,0(sp)
 80201c8:	dec00204 	addi	sp,sp,8
 80201cc:	f800283a 	ret

080201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d0:	defffb04 	addi	sp,sp,-20
 80201d4:	dfc00415 	stw	ra,16(sp)
 80201d8:	df000315 	stw	fp,12(sp)
 80201dc:	df000304 	addi	fp,sp,12
 80201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80201e4:	000531fa 	rdctl	r2,exception
 80201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80201ec:	e0bffd17 	ldw	r2,-12(fp)
 80201f0:	10801f0c 	andi	r2,r2,124
 80201f4:	1004d0ba 	srli	r2,r2,2
 80201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80201fc:	0005333a 	rdctl	r2,badaddr
 8020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8020204:	d0a73e17 	ldw	r2,-25352(gp)
 8020208:	10000726 	beq	r2,zero,8020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 802020c:	d0a73e17 	ldw	r2,-25352(gp)
 8020210:	e0fffd17 	ldw	r3,-12(fp)
 8020214:	e1bffe17 	ldw	r6,-8(fp)
 8020218:	e17fff17 	ldw	r5,-4(fp)
 802021c:	1809883a 	mov	r4,r3
 8020220:	103ee83a 	callr	r2
 8020224:	00000206 	br	8020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 802022c:	0005883a 	mov	r2,zero
}
 8020230:	e037883a 	mov	sp,fp
 8020234:	dfc00117 	ldw	ra,4(sp)
 8020238:	df000017 	ldw	fp,0(sp)
 802023c:	dec00204 	addi	sp,sp,8
 8020240:	f800283a 	ret

Disassembly of section .text:

08020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 802024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8020250:	00bffd16 	blt	zero,r2,8020248 <_gp+0xfffdeb3c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8020254:	06c20134 	movhi	sp,2052
    ori sp, sp, %lo(__alt_stack_pointer)
 8020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 802025c:	06820134 	movhi	gp,2052
    ori gp, gp, %lo(_gp)
 8020260:	d685c314 	ori	gp,gp,5900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8020264:	008200f4 	movhi	r2,2051
    ori r2, r2, %lo(__bss_start)
 8020268:	10acf114 	ori	r2,r2,46020

    movhi r3, %hi(__bss_end)
 802026c:	00c200f4 	movhi	r3,2051
    ori r3, r3, %lo(__bss_end)
 8020270:	18eda014 	ori	r3,r3,46720

    beq r2, r3, 1f
 8020274:	10c00326 	beq	r2,r3,8020284 <_start+0x40>

0:
    stw zero, (r2)
 8020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 802027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8020280:	10fffd36 	bltu	r2,r3,8020278 <_gp+0xfffdeb6c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8020284:	8033a200 	call	8033a20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8020288:	8033bb40 	call	8033bb4 <alt_main>

0802028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 802028c:	003fff06 	br	802028c <_gp+0xfffdeb80>

08020290 <main>:

//arrays for the FFT
kiss_fft_cpx time_domain[FFT_SIZE], freq_domain[FFT_SIZE];

int main()
{
 8020290:	defff704 	addi	sp,sp,-36
 8020294:	dfc00815 	stw	ra,32(sp)
 8020298:	df000715 	stw	fp,28(sp)
 802029c:	df000704 	addi	fp,sp,28
	alt_u32 message[2];
	altera_avalon_mailbox_dev *sender_mailbox, *receiver_mailbox;	// handle to the Mailbox
	int activated_audio_effects = 0, i;	// each bit of this variable represents an effect which can be activated by toggling the switches
 80202a0:	e03ff915 	stw	zero,-28(fp)
	unsigned int* file_address, file_length;

	// initialize the LEDS parallel port
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_SWITCHES_BASE, 0x00000000);	// sets all pins as input
 80202a4:	0007883a 	mov	r3,zero
 80202a8:	00820134 	movhi	r2,2052
 80202ac:	10841104 	addi	r2,r2,4164
 80202b0:	10c00035 	stwio	r3,0(r2)

	// Open mailbox
	receiver_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_FFT", NULL, receiver_mailbox_callback);
 80202b4:	018200b4 	movhi	r6,2050
 80202b8:	31816304 	addi	r6,r6,1420
 80202bc:	000b883a 	mov	r5,zero
 80202c0:	010200f4 	movhi	r4,2051
 80202c4:	211c9d04 	addi	r4,r4,29300
 80202c8:	8034f880 	call	8034f88 <altera_avalon_mailbox_open>
 80202cc:	e0bffa15 	stw	r2,-24(fp)
	if (!receiver_mailbox) {
 80202d0:	e0bffa17 	ldw	r2,-24(fp)
 80202d4:	1000051e 	bne	r2,zero,80202ec <main+0x5c>
		printf("FAIL: Unable to open mailbox from other processor\n");
 80202d8:	010200f4 	movhi	r4,2051
 80202dc:	211ca204 	addi	r4,r4,29320
 80202e0:	8029ef00 	call	8029ef0 <puts>
		return 1;
 80202e4:	00800044 	movi	r2,1
 80202e8:	0000a306 	br	8020578 <main+0x2e8>
	}
	sender_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_Sound_Acquisition", sender_mailbox_callback, NULL);
 80202ec:	000d883a 	mov	r6,zero
 80202f0:	014200b4 	movhi	r5,2050
 80202f4:	29419c04 	addi	r5,r5,1648
 80202f8:	010200f4 	movhi	r4,2051
 80202fc:	211caf04 	addi	r4,r4,29372
 8020300:	8034f880 	call	8034f88 <altera_avalon_mailbox_open>
 8020304:	e0bffb15 	stw	r2,-20(fp)
	if (!sender_mailbox) {
 8020308:	e0bffb17 	ldw	r2,-20(fp)
 802030c:	1000051e 	bne	r2,zero,8020324 <main+0x94>
		printf("FAIL: Unable to open mailbox to other processor\n");
 8020310:	010200f4 	movhi	r4,2051
 8020314:	211cb804 	addi	r4,r4,29408
 8020318:	8029ef00 	call	8029ef0 <puts>
		return 1;
 802031c:	00800044 	movi	r2,1
 8020320:	00009506 	br	8020578 <main+0x2e8>
	}

	printf("Hello, this is FFT processor\n");
 8020324:	010200f4 	movhi	r4,2051
 8020328:	211cc404 	addi	r4,r4,29456
 802032c:	8029ef00 	call	8029ef0 <puts>
	while(1)
	{
		if(FIFO_length > 0)
 8020330:	d0a72f17 	ldw	r2,-25412(gp)
 8020334:	00bffe0e 	bge	zero,r2,8020330 <_gp+0xfffdec24>
		{

			file_address = audio_file[FIFO_start].start_address;
 8020338:	d0e72e17 	ldw	r3,-25416(gp)
 802033c:	00820134 	movhi	r2,2052
 8020340:	10ad0c04 	addi	r2,r2,-19408
 8020344:	1806913a 	slli	r3,r3,4
 8020348:	10c5883a 	add	r2,r2,r3
 802034c:	10800017 	ldw	r2,0(r2)
 8020350:	e0bffc15 	stw	r2,-16(fp)
			file_length = audio_file[FIFO_start].end_address - audio_file[FIFO_start].start_address;
 8020354:	d0e72e17 	ldw	r3,-25416(gp)
 8020358:	00820134 	movhi	r2,2052
 802035c:	10ad0c04 	addi	r2,r2,-19408
 8020360:	1806913a 	slli	r3,r3,4
 8020364:	10c5883a 	add	r2,r2,r3
 8020368:	10800204 	addi	r2,r2,8
 802036c:	10800017 	ldw	r2,0(r2)
 8020370:	1009883a 	mov	r4,r2
 8020374:	d0e72e17 	ldw	r3,-25416(gp)
 8020378:	00820134 	movhi	r2,2052
 802037c:	10ad0c04 	addi	r2,r2,-19408
 8020380:	1806913a 	slli	r3,r3,4
 8020384:	10c5883a 	add	r2,r2,r3
 8020388:	10800017 	ldw	r2,0(r2)
 802038c:	2085c83a 	sub	r2,r4,r2
 8020390:	1005d0ba 	srai	r2,r2,2
 8020394:	e0bffd15 	stw	r2,-12(fp)

			FIFO_length--;
 8020398:	d0a72f17 	ldw	r2,-25412(gp)
 802039c:	10bfffc4 	addi	r2,r2,-1
 80203a0:	d0a72f15 	stw	r2,-25412(gp)
			FIFO_start++;
 80203a4:	d0a72e17 	ldw	r2,-25416(gp)
 80203a8:	10800044 	addi	r2,r2,1
 80203ac:	d0a72e15 	stw	r2,-25416(gp)
			if(FIFO_start >= FIFO_SIZE)
 80203b0:	d0a72e17 	ldw	r2,-25416(gp)
 80203b4:	10800150 	cmplti	r2,r2,5
 80203b8:	1000011e 	bne	r2,zero,80203c0 <main+0x130>
				FIFO_start = 0;
 80203bc:	d0272e15 	stw	zero,-25416(gp)


			printf("\n\n\n\n----------------------------------------------------\n");
 80203c0:	010200f4 	movhi	r4,2051
 80203c4:	211ccc04 	addi	r4,r4,29488
 80203c8:	8029ef00 	call	8029ef0 <puts>
			printf("Processing file:\n");
 80203cc:	010200f4 	movhi	r4,2051
 80203d0:	211cdb04 	addi	r4,r4,29548
 80203d4:	8029ef00 	call	8029ef0 <puts>
			printf("\tADDRESS:\t0x%x\n\tLENGHT:\t%u samples\n", file_address, file_length);
 80203d8:	e1bffd17 	ldw	r6,-12(fp)
 80203dc:	e17ffc17 	ldw	r5,-16(fp)
 80203e0:	010200f4 	movhi	r4,2051
 80203e4:	211ce004 	addi	r4,r4,29568
 80203e8:	8029df40 	call	8029df4 <printf>

			// read the switches to see which effects are active
			activated_audio_effects = IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCHES_BASE);
 80203ec:	00820134 	movhi	r2,2052
 80203f0:	10841004 	addi	r2,r2,4160
 80203f4:	10800037 	ldwio	r2,0(r2)
 80203f8:	e0bff915 	stw	r2,-28(fp)

			// TO DO:    FFT

			// check which effects are active and apply them
			printf("LIST OF AUDIO EFFECTS APPLIED:\n");
 80203fc:	010200f4 	movhi	r4,2051
 8020400:	211ce904 	addi	r4,r4,29604
 8020404:	8029ef00 	call	8029ef0 <puts>
			if (activated_audio_effects & EFFECT_REVERSE)	// if this effect is active
 8020408:	e0bff917 	ldw	r2,-28(fp)
 802040c:	1080004c 	andi	r2,r2,1
 8020410:	10000926 	beq	r2,zero,8020438 <main+0x1a8>
			{
				printf("\tReversing audio...\n");
 8020414:	010200f4 	movhi	r4,2051
 8020418:	211cf104 	addi	r4,r4,29636
 802041c:	8029ef00 	call	8029ef0 <puts>
				reverse(file_address, file_length);
 8020420:	e17ffd17 	ldw	r5,-12(fp)
 8020424:	e13ffc17 	ldw	r4,-16(fp)
 8020428:	80208ec0 	call	80208ec <reverse>
				printf("\tAudio reversed\n");
 802042c:	010200f4 	movhi	r4,2051
 8020430:	211cf604 	addi	r4,r4,29656
 8020434:	8029ef00 	call	8029ef0 <puts>
			}
			if (activated_audio_effects & EFFECT_ECHO)
 8020438:	e0bff917 	ldw	r2,-28(fp)
 802043c:	1080008c 	andi	r2,r2,2
 8020440:	10000b26 	beq	r2,zero,8020470 <main+0x1e0>
			{
				printf("\tApplying echo...\n");
 8020444:	010200f4 	movhi	r4,2051
 8020448:	211cfa04 	addi	r4,r4,29672
 802044c:	8029ef00 	call	8029ef0 <puts>
				add_echo(file_address, file_length, ECHO_DELAY_MS, ECHO_AMPLITUDE);
 8020450:	01cfc034 	movhi	r7,16128
 8020454:	01807d04 	movi	r6,500
 8020458:	e17ffd17 	ldw	r5,-12(fp)
 802045c:	e13ffc17 	ldw	r4,-16(fp)
 8020460:	80207d80 	call	80207d8 <add_echo>
				printf("\tEcho applied\n");
 8020464:	010200f4 	movhi	r4,2051
 8020468:	211cff04 	addi	r4,r4,29692
 802046c:	8029ef00 	call	8029ef0 <puts>
			}
			if (activated_audio_effects & EFFECT_REVERBERATION)
 8020470:	e0bff917 	ldw	r2,-28(fp)
 8020474:	1080010c 	andi	r2,r2,4
 8020478:	10000c26 	beq	r2,zero,80204ac <main+0x21c>
			{
				printf("\tApplying reverberation...\n");
 802047c:	010200f4 	movhi	r4,2051
 8020480:	211d0304 	addi	r4,r4,29708
 8020484:	8029ef00 	call	8029ef0 <puts>
				add_reverberation(file_address, file_length, REVERB_DELAY_MS, REVERB_DECAY);
 8020488:	01cfa6b4 	movhi	r7,16026
 802048c:	39e66684 	addi	r7,r7,-26214
 8020490:	01803204 	movi	r6,200
 8020494:	e17ffd17 	ldw	r5,-12(fp)
 8020498:	e13ffc17 	ldw	r4,-16(fp)
 802049c:	80206c40 	call	80206c4 <add_reverberation>
				printf("\tReverberation applied\n");
 80204a0:	010200f4 	movhi	r4,2051
 80204a4:	211d0a04 	addi	r4,r4,29736
 80204a8:	8029ef00 	call	8029ef0 <puts>
			}
			if (activated_audio_effects & EFFECT_MOVING_AVERAGE)
 80204ac:	e0bff917 	ldw	r2,-28(fp)
 80204b0:	1080020c 	andi	r2,r2,8
 80204b4:	10000a26 	beq	r2,zero,80204e0 <main+0x250>
			{
				printf("\tApplying moving average...\n");
 80204b8:	010200f4 	movhi	r4,2051
 80204bc:	211d1004 	addi	r4,r4,29760
 80204c0:	8029ef00 	call	8029ef0 <puts>
				moving_average(file_address, file_length, MOVING_AVERAGE_N);
 80204c4:	01801904 	movi	r6,100
 80204c8:	e17ffd17 	ldw	r5,-12(fp)
 80204cc:	e13ffc17 	ldw	r4,-16(fp)
 80204d0:	80209c80 	call	80209c8 <moving_average>
				printf("\tMoving average applied\n");
 80204d4:	010200f4 	movhi	r4,2051
 80204d8:	211d1704 	addi	r4,r4,29788
 80204dc:	8029ef00 	call	8029ef0 <puts>
			}
			if (activated_audio_effects & EFFECT_CHANGE_PITCH)
 80204e0:	e0bff917 	ldw	r2,-28(fp)
 80204e4:	1080040c 	andi	r2,r2,16
 80204e8:	10000a26 	beq	r2,zero,8020514 <main+0x284>
			{
				printf("\tApplying pitch modification...\n");
 80204ec:	010200f4 	movhi	r4,2051
 80204f0:	211d1d04 	addi	r4,r4,29812
 80204f4:	8029ef00 	call	8029ef0 <puts>
				modify_pitch(file_address, file_length, PITCH_CHANGE);
 80204f8:	01800044 	movi	r6,1
 80204fc:	e17ffd17 	ldw	r5,-12(fp)
 8020500:	e13ffc17 	ldw	r4,-16(fp)
 8020504:	8020c0c0 	call	8020c0c <modify_pitch>
				printf("\tPitch change applied\n");
 8020508:	010200f4 	movhi	r4,2051
 802050c:	211d2504 	addi	r4,r4,29844
 8020510:	8029ef00 	call	8029ef0 <puts>
			}
			printf("----------------------------------------------------\n");
 8020514:	010200f4 	movhi	r4,2051
 8020518:	211d2b04 	addi	r4,r4,29868
 802051c:	8029ef00 	call	8029ef0 <puts>
			// sends to the other processor the address and the length of the processed file
			printf("Finished processing.\n");
 8020520:	010200f4 	movhi	r4,2051
 8020524:	211d3904 	addi	r4,r4,29924
 8020528:	8029ef00 	call	8029ef0 <puts>
			printf("Sending processed file to the other processor...\n");
 802052c:	010200f4 	movhi	r4,2051
 8020530:	211d3f04 	addi	r4,r4,29948
 8020534:	8029ef00 	call	8029ef0 <puts>

			message[0] = file_address;
 8020538:	e0bffc17 	ldw	r2,-16(fp)
 802053c:	e0bffe15 	stw	r2,-8(fp)
			message[1] = file_address + file_length;
 8020540:	e0bffd17 	ldw	r2,-12(fp)
 8020544:	1085883a 	add	r2,r2,r2
 8020548:	1085883a 	add	r2,r2,r2
 802054c:	1007883a 	mov	r3,r2
 8020550:	e0bffc17 	ldw	r2,-16(fp)
 8020554:	10c5883a 	add	r2,r2,r3
 8020558:	e0bfff15 	stw	r2,-4(fp)
			altera_avalon_mailbox_send (sender_mailbox, message, 0, ISR);	// sends the info through the mailbox
 802055c:	e0bffe04 	addi	r2,fp,-8
 8020560:	000f883a 	mov	r7,zero
 8020564:	000d883a 	mov	r6,zero
 8020568:	100b883a 	mov	r5,r2
 802056c:	e13ffb17 	ldw	r4,-20(fp)
 8020570:	80352fc0 	call	80352fc <altera_avalon_mailbox_send>
		}


	}
 8020574:	003f6e06 	br	8020330 <_gp+0xfffdec24>

	altera_avalon_mailbox_close(receiver_mailbox);
	altera_avalon_mailbox_close(sender_mailbox);
	return 0;
}
 8020578:	e037883a 	mov	sp,fp
 802057c:	dfc00117 	ldw	ra,4(sp)
 8020580:	df000017 	ldw	fp,0(sp)
 8020584:	dec00204 	addi	sp,sp,8
 8020588:	f800283a 	ret

0802058c <receiver_mailbox_callback>:




// Get message read from mailbox
void receiver_mailbox_callback(void* message) {
 802058c:	defffb04 	addi	sp,sp,-20
 8020590:	dfc00415 	stw	ra,16(sp)
 8020594:	df000315 	stw	fp,12(sp)
 8020598:	df000304 	addi	fp,sp,12
 802059c:	e13fff15 	stw	r4,-4(fp)

	alt_u32* data = (alt_u32*)message;	// cast from void* to alt_u32*
 80205a0:	e0bfff17 	ldw	r2,-4(fp)
 80205a4:	e0bffd15 	stw	r2,-12(fp)
	int index;

	if (message != NULL) {
 80205a8:	e0bfff17 	ldw	r2,-4(fp)
 80205ac:	10002726 	beq	r2,zero,802064c <receiver_mailbox_callback+0xc0>
		//printf("Message received from sound acquisition CPU: msg[0]: %lx   msg[1]: %lx\n", data[0], data[1]);

		if(FIFO_length < FIFO_SIZE)
 80205b0:	d0a72f17 	ldw	r2,-25412(gp)
 80205b4:	10800148 	cmpgei	r2,r2,5
 80205b8:	1000041e 	bne	r2,zero,80205cc <receiver_mailbox_callback+0x40>
			FIFO_length++;
 80205bc:	d0a72f17 	ldw	r2,-25412(gp)
 80205c0:	10800044 	addi	r2,r2,1
 80205c4:	d0a72f15 	stw	r2,-25412(gp)
 80205c8:	00000306 	br	80205d8 <receiver_mailbox_callback+0x4c>
		else
			printf("Not enough space in FIFO\n");
 80205cc:	010200f4 	movhi	r4,2051
 80205d0:	211d4c04 	addi	r4,r4,30000
 80205d4:	8029ef00 	call	8029ef0 <puts>

		index = (FIFO_start + FIFO_length - 1)%FIFO_SIZE;
 80205d8:	d0e72e17 	ldw	r3,-25416(gp)
 80205dc:	d0a72f17 	ldw	r2,-25412(gp)
 80205e0:	1885883a 	add	r2,r3,r2
 80205e4:	10bfffc4 	addi	r2,r2,-1
 80205e8:	01400144 	movi	r5,5
 80205ec:	1009883a 	mov	r4,r2
 80205f0:	8025a740 	call	8025a74 <__modsi3>
 80205f4:	e0bffe15 	stw	r2,-8(fp)

		audio_file[index].start_address = (unsigned int*)data[0];
 80205f8:	e0bffd17 	ldw	r2,-12(fp)
 80205fc:	10800017 	ldw	r2,0(r2)
 8020600:	1009883a 	mov	r4,r2
 8020604:	00820134 	movhi	r2,2052
 8020608:	10ad0c04 	addi	r2,r2,-19408
 802060c:	e0fffe17 	ldw	r3,-8(fp)
 8020610:	1806913a 	slli	r3,r3,4
 8020614:	10c5883a 	add	r2,r2,r3
 8020618:	11000015 	stw	r4,0(r2)
		audio_file[index].end_address = (unsigned int*) data[1];
 802061c:	e0bffd17 	ldw	r2,-12(fp)
 8020620:	10800104 	addi	r2,r2,4
 8020624:	10800017 	ldw	r2,0(r2)
 8020628:	1009883a 	mov	r4,r2
 802062c:	00820134 	movhi	r2,2052
 8020630:	10ad0c04 	addi	r2,r2,-19408
 8020634:	e0fffe17 	ldw	r3,-8(fp)
 8020638:	1806913a 	slli	r3,r3,4
 802063c:	10c5883a 	add	r2,r2,r3
 8020640:	10800204 	addi	r2,r2,8
 8020644:	11000015 	stw	r4,0(r2)
	} else {
		printf("[FFT]Incomplete receive\n");
	}
}
 8020648:	00000306 	br	8020658 <receiver_mailbox_callback+0xcc>
		index = (FIFO_start + FIFO_length - 1)%FIFO_SIZE;

		audio_file[index].start_address = (unsigned int*)data[0];
		audio_file[index].end_address = (unsigned int*) data[1];
	} else {
		printf("[FFT]Incomplete receive\n");
 802064c:	010200f4 	movhi	r4,2051
 8020650:	211d5304 	addi	r4,r4,30028
 8020654:	8029ef00 	call	8029ef0 <puts>
	}
}
 8020658:	0001883a 	nop
 802065c:	e037883a 	mov	sp,fp
 8020660:	dfc00117 	ldw	ra,4(sp)
 8020664:	df000017 	ldw	fp,0(sp)
 8020668:	dec00204 	addi	sp,sp,8
 802066c:	f800283a 	ret

08020670 <sender_mailbox_callback>:





void sender_mailbox_callback(void* report, int status) {
 8020670:	defffc04 	addi	sp,sp,-16
 8020674:	dfc00315 	stw	ra,12(sp)
 8020678:	df000215 	stw	fp,8(sp)
 802067c:	df000204 	addi	fp,sp,8
 8020680:	e13ffe15 	stw	r4,-8(fp)
 8020684:	e17fff15 	stw	r5,-4(fp)
	if (status) {
 8020688:	e0bfff17 	ldw	r2,-4(fp)
 802068c:	10000426 	beq	r2,zero,80206a0 <sender_mailbox_callback+0x30>
		printf("Processed file sent with success.\n");
 8020690:	010200f4 	movhi	r4,2051
 8020694:	211d5904 	addi	r4,r4,30052
 8020698:	8029ef00 	call	8029ef0 <puts>
	} else {
		printf("Error in transfer\n");
	}
}
 802069c:	00000306 	br	80206ac <sender_mailbox_callback+0x3c>

void sender_mailbox_callback(void* report, int status) {
	if (status) {
		printf("Processed file sent with success.\n");
	} else {
		printf("Error in transfer\n");
 80206a0:	010200f4 	movhi	r4,2051
 80206a4:	211d6204 	addi	r4,r4,30088
 80206a8:	8029ef00 	call	8029ef0 <puts>
	}
}
 80206ac:	0001883a 	nop
 80206b0:	e037883a 	mov	sp,fp
 80206b4:	dfc00117 	ldw	ra,4(sp)
 80206b8:	df000017 	ldw	fp,0(sp)
 80206bc:	dec00204 	addi	sp,sp,8
 80206c0:	f800283a 	ret

080206c4 <add_reverberation>:




void add_reverberation(unsigned int *file_address, unsigned int file_length, unsigned int delay_ms, float decay)
{
 80206c4:	defff604 	addi	sp,sp,-40
 80206c8:	dfc00915 	stw	ra,36(sp)
 80206cc:	df000815 	stw	fp,32(sp)
 80206d0:	dc000715 	stw	r16,28(sp)
 80206d4:	df000804 	addi	fp,sp,32
 80206d8:	e13ffb15 	stw	r4,-20(fp)
 80206dc:	e17ffc15 	stw	r5,-16(fp)
 80206e0:	e1bffd15 	stw	r6,-12(fp)
 80206e4:	e1fffe15 	stw	r7,-8(fp)
	unsigned int i, samples_delay;
	float sample_amplitude;

	samples_delay = delay_ms*SAMPLING_FREQ_kHz;
 80206e8:	e0bffd17 	ldw	r2,-12(fp)
 80206ec:	10800c24 	muli	r2,r2,48
 80206f0:	e0bff915 	stw	r2,-28(fp)
	for (i=samples_delay; i<file_length; i++)
 80206f4:	e0bff917 	ldw	r2,-28(fp)
 80206f8:	e0bff815 	stw	r2,-32(fp)
 80206fc:	00002c06 	br	80207b0 <add_reverberation+0xec>
	{
		sample_amplitude = IORD_32DIRECT(file_address, (i-samples_delay)*4) * decay;
 8020700:	e0fff817 	ldw	r3,-32(fp)
 8020704:	e0bff917 	ldw	r2,-28(fp)
 8020708:	1885c83a 	sub	r2,r3,r2
 802070c:	1085883a 	add	r2,r2,r2
 8020710:	1085883a 	add	r2,r2,r2
 8020714:	1007883a 	mov	r3,r2
 8020718:	e0bffb17 	ldw	r2,-20(fp)
 802071c:	10c5883a 	add	r2,r2,r3
 8020720:	10800037 	ldwio	r2,0(r2)
 8020724:	1009883a 	mov	r4,r2
 8020728:	80269bc0 	call	80269bc <__floatsisf>
 802072c:	1007883a 	mov	r3,r2
 8020730:	e17ffe17 	ldw	r5,-8(fp)
 8020734:	1809883a 	mov	r4,r3
 8020738:	802606c0 	call	802606c <__mulsf3>
 802073c:	1007883a 	mov	r3,r2
 8020740:	e0fffa15 	stw	r3,-24(fp)
		sample_amplitude += IORD_32DIRECT(file_address, i*4);
 8020744:	e0bff817 	ldw	r2,-32(fp)
 8020748:	1085883a 	add	r2,r2,r2
 802074c:	1085883a 	add	r2,r2,r2
 8020750:	1007883a 	mov	r3,r2
 8020754:	e0bffb17 	ldw	r2,-20(fp)
 8020758:	10c5883a 	add	r2,r2,r3
 802075c:	10800037 	ldwio	r2,0(r2)
 8020760:	1009883a 	mov	r4,r2
 8020764:	80269bc0 	call	80269bc <__floatsisf>
 8020768:	1007883a 	mov	r3,r2
 802076c:	180b883a 	mov	r5,r3
 8020770:	e13ffa17 	ldw	r4,-24(fp)
 8020774:	8025ba40 	call	8025ba4 <__addsf3>
 8020778:	1007883a 	mov	r3,r2
 802077c:	e0fffa15 	stw	r3,-24(fp)
		IOWR_32DIRECT(file_address, i*4, sample_amplitude);
 8020780:	e0bff817 	ldw	r2,-32(fp)
 8020784:	1085883a 	add	r2,r2,r2
 8020788:	1085883a 	add	r2,r2,r2
 802078c:	1007883a 	mov	r3,r2
 8020790:	e0bffb17 	ldw	r2,-20(fp)
 8020794:	10e1883a 	add	r16,r2,r3
 8020798:	e13ffa17 	ldw	r4,-24(fp)
 802079c:	802694c0 	call	802694c <__fixsfsi>
 80207a0:	80800035 	stwio	r2,0(r16)
{
	unsigned int i, samples_delay;
	float sample_amplitude;

	samples_delay = delay_ms*SAMPLING_FREQ_kHz;
	for (i=samples_delay; i<file_length; i++)
 80207a4:	e0bff817 	ldw	r2,-32(fp)
 80207a8:	10800044 	addi	r2,r2,1
 80207ac:	e0bff815 	stw	r2,-32(fp)
 80207b0:	e0fff817 	ldw	r3,-32(fp)
 80207b4:	e0bffc17 	ldw	r2,-16(fp)
 80207b8:	18bfd136 	bltu	r3,r2,8020700 <_gp+0xfffdeff4>
	{
		sample_amplitude = IORD_32DIRECT(file_address, (i-samples_delay)*4) * decay;
		sample_amplitude += IORD_32DIRECT(file_address, i*4);
		IOWR_32DIRECT(file_address, i*4, sample_amplitude);
	}
}
 80207bc:	0001883a 	nop
 80207c0:	e6ffff04 	addi	sp,fp,-4
 80207c4:	dfc00217 	ldw	ra,8(sp)
 80207c8:	df000117 	ldw	fp,4(sp)
 80207cc:	dc000017 	ldw	r16,0(sp)
 80207d0:	dec00304 	addi	sp,sp,12
 80207d4:	f800283a 	ret

080207d8 <add_echo>:




void add_echo(unsigned int *file_address, unsigned int file_length, unsigned int delay_ms, float amplitude)
{
 80207d8:	defff604 	addi	sp,sp,-40
 80207dc:	dfc00915 	stw	ra,36(sp)
 80207e0:	df000815 	stw	fp,32(sp)
 80207e4:	dc000715 	stw	r16,28(sp)
 80207e8:	df000804 	addi	fp,sp,32
 80207ec:	e13ffb15 	stw	r4,-20(fp)
 80207f0:	e17ffc15 	stw	r5,-16(fp)
 80207f4:	e1bffd15 	stw	r6,-12(fp)
 80207f8:	e1fffe15 	stw	r7,-8(fp)
	unsigned int i, samples_delay;
	float sample_amplitude;

	samples_delay = delay_ms*SAMPLING_FREQ_kHz;
 80207fc:	e0bffd17 	ldw	r2,-12(fp)
 8020800:	10800c24 	muli	r2,r2,48
 8020804:	e0bff915 	stw	r2,-28(fp)
	for (i=file_length; i>samples_delay; i--)
 8020808:	e0bffc17 	ldw	r2,-16(fp)
 802080c:	e0bff815 	stw	r2,-32(fp)
 8020810:	00002c06 	br	80208c4 <add_echo+0xec>
	{
		sample_amplitude = IORD_32DIRECT(file_address, (i-samples_delay)*4) * amplitude;
 8020814:	e0fff817 	ldw	r3,-32(fp)
 8020818:	e0bff917 	ldw	r2,-28(fp)
 802081c:	1885c83a 	sub	r2,r3,r2
 8020820:	1085883a 	add	r2,r2,r2
 8020824:	1085883a 	add	r2,r2,r2
 8020828:	1007883a 	mov	r3,r2
 802082c:	e0bffb17 	ldw	r2,-20(fp)
 8020830:	10c5883a 	add	r2,r2,r3
 8020834:	10800037 	ldwio	r2,0(r2)
 8020838:	1009883a 	mov	r4,r2
 802083c:	80269bc0 	call	80269bc <__floatsisf>
 8020840:	1007883a 	mov	r3,r2
 8020844:	e17ffe17 	ldw	r5,-8(fp)
 8020848:	1809883a 	mov	r4,r3
 802084c:	802606c0 	call	802606c <__mulsf3>
 8020850:	1007883a 	mov	r3,r2
 8020854:	e0fffa15 	stw	r3,-24(fp)
		sample_amplitude += IORD_32DIRECT(file_address, i*4);
 8020858:	e0bff817 	ldw	r2,-32(fp)
 802085c:	1085883a 	add	r2,r2,r2
 8020860:	1085883a 	add	r2,r2,r2
 8020864:	1007883a 	mov	r3,r2
 8020868:	e0bffb17 	ldw	r2,-20(fp)
 802086c:	10c5883a 	add	r2,r2,r3
 8020870:	10800037 	ldwio	r2,0(r2)
 8020874:	1009883a 	mov	r4,r2
 8020878:	80269bc0 	call	80269bc <__floatsisf>
 802087c:	1007883a 	mov	r3,r2
 8020880:	180b883a 	mov	r5,r3
 8020884:	e13ffa17 	ldw	r4,-24(fp)
 8020888:	8025ba40 	call	8025ba4 <__addsf3>
 802088c:	1007883a 	mov	r3,r2
 8020890:	e0fffa15 	stw	r3,-24(fp)
		IOWR_32DIRECT(file_address, i*4, sample_amplitude);
 8020894:	e0bff817 	ldw	r2,-32(fp)
 8020898:	1085883a 	add	r2,r2,r2
 802089c:	1085883a 	add	r2,r2,r2
 80208a0:	1007883a 	mov	r3,r2
 80208a4:	e0bffb17 	ldw	r2,-20(fp)
 80208a8:	10e1883a 	add	r16,r2,r3
 80208ac:	e13ffa17 	ldw	r4,-24(fp)
 80208b0:	802694c0 	call	802694c <__fixsfsi>
 80208b4:	80800035 	stwio	r2,0(r16)
{
	unsigned int i, samples_delay;
	float sample_amplitude;

	samples_delay = delay_ms*SAMPLING_FREQ_kHz;
	for (i=file_length; i>samples_delay; i--)
 80208b8:	e0bff817 	ldw	r2,-32(fp)
 80208bc:	10bfffc4 	addi	r2,r2,-1
 80208c0:	e0bff815 	stw	r2,-32(fp)
 80208c4:	e0bff817 	ldw	r2,-32(fp)
 80208c8:	e0fff917 	ldw	r3,-28(fp)
 80208cc:	18bfd136 	bltu	r3,r2,8020814 <_gp+0xfffdf108>
	{
		sample_amplitude = IORD_32DIRECT(file_address, (i-samples_delay)*4) * amplitude;
		sample_amplitude += IORD_32DIRECT(file_address, i*4);
		IOWR_32DIRECT(file_address, i*4, sample_amplitude);
	}
}
 80208d0:	0001883a 	nop
 80208d4:	e6ffff04 	addi	sp,fp,-4
 80208d8:	dfc00217 	ldw	ra,8(sp)
 80208dc:	df000117 	ldw	fp,4(sp)
 80208e0:	dc000017 	ldw	r16,0(sp)
 80208e4:	dec00304 	addi	sp,sp,12
 80208e8:	f800283a 	ret

080208ec <reverse>:


void reverse(unsigned int *file_address, unsigned int file_length)
{
 80208ec:	defffa04 	addi	sp,sp,-24
 80208f0:	df000515 	stw	fp,20(sp)
 80208f4:	df000504 	addi	fp,sp,20
 80208f8:	e13ffe15 	stw	r4,-8(fp)
 80208fc:	e17fff15 	stw	r5,-4(fp)
	unsigned int i, last_sample, first_sample;

	for (i=0; i<file_length/2; i++)
 8020900:	e03ffb15 	stw	zero,-20(fp)
 8020904:	00002706 	br	80209a4 <reverse+0xb8>
	{
		// swaps the first with the last sample (for all samples)
		last_sample = IORD_32DIRECT(file_address, (file_length-i)*4);
 8020908:	e0ffff17 	ldw	r3,-4(fp)
 802090c:	e0bffb17 	ldw	r2,-20(fp)
 8020910:	1885c83a 	sub	r2,r3,r2
 8020914:	1085883a 	add	r2,r2,r2
 8020918:	1085883a 	add	r2,r2,r2
 802091c:	1007883a 	mov	r3,r2
 8020920:	e0bffe17 	ldw	r2,-8(fp)
 8020924:	10c5883a 	add	r2,r2,r3
 8020928:	10800037 	ldwio	r2,0(r2)
 802092c:	e0bffc15 	stw	r2,-16(fp)
		first_sample = IORD_32DIRECT(file_address, i*4);
 8020930:	e0bffb17 	ldw	r2,-20(fp)
 8020934:	1085883a 	add	r2,r2,r2
 8020938:	1085883a 	add	r2,r2,r2
 802093c:	1007883a 	mov	r3,r2
 8020940:	e0bffe17 	ldw	r2,-8(fp)
 8020944:	10c5883a 	add	r2,r2,r3
 8020948:	10800037 	ldwio	r2,0(r2)
 802094c:	e0bffd15 	stw	r2,-12(fp)
		IOWR_32DIRECT(file_address, i*4, last_sample);
 8020950:	e0bffb17 	ldw	r2,-20(fp)
 8020954:	1085883a 	add	r2,r2,r2
 8020958:	1085883a 	add	r2,r2,r2
 802095c:	1007883a 	mov	r3,r2
 8020960:	e0bffe17 	ldw	r2,-8(fp)
 8020964:	10c5883a 	add	r2,r2,r3
 8020968:	e0fffc17 	ldw	r3,-16(fp)
 802096c:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(file_address, (file_length-i)*4, first_sample);
 8020970:	e0ffff17 	ldw	r3,-4(fp)
 8020974:	e0bffb17 	ldw	r2,-20(fp)
 8020978:	1885c83a 	sub	r2,r3,r2
 802097c:	1085883a 	add	r2,r2,r2
 8020980:	1085883a 	add	r2,r2,r2
 8020984:	1007883a 	mov	r3,r2
 8020988:	e0bffe17 	ldw	r2,-8(fp)
 802098c:	10c5883a 	add	r2,r2,r3
 8020990:	e0fffd17 	ldw	r3,-12(fp)
 8020994:	10c00035 	stwio	r3,0(r2)

void reverse(unsigned int *file_address, unsigned int file_length)
{
	unsigned int i, last_sample, first_sample;

	for (i=0; i<file_length/2; i++)
 8020998:	e0bffb17 	ldw	r2,-20(fp)
 802099c:	10800044 	addi	r2,r2,1
 80209a0:	e0bffb15 	stw	r2,-20(fp)
 80209a4:	e0bfff17 	ldw	r2,-4(fp)
 80209a8:	1004d07a 	srli	r2,r2,1
 80209ac:	e0fffb17 	ldw	r3,-20(fp)
 80209b0:	18bfd536 	bltu	r3,r2,8020908 <_gp+0xfffdf1fc>
		last_sample = IORD_32DIRECT(file_address, (file_length-i)*4);
		first_sample = IORD_32DIRECT(file_address, i*4);
		IOWR_32DIRECT(file_address, i*4, last_sample);
		IOWR_32DIRECT(file_address, (file_length-i)*4, first_sample);
	}
}
 80209b4:	0001883a 	nop
 80209b8:	e037883a 	mov	sp,fp
 80209bc:	df000017 	ldw	fp,0(sp)
 80209c0:	dec00104 	addi	sp,sp,4
 80209c4:	f800283a 	ret

080209c8 <moving_average>:


void moving_average(unsigned int *file_address, unsigned int file_length, unsigned int n_samples)
{
 80209c8:	defff504 	addi	sp,sp,-44
 80209cc:	dfc00a15 	stw	ra,40(sp)
 80209d0:	df000915 	stw	fp,36(sp)
 80209d4:	dc000815 	stw	r16,32(sp)
 80209d8:	df000904 	addi	fp,sp,36
 80209dc:	e13ffc15 	stw	r4,-16(fp)
 80209e0:	e17ffd15 	stw	r5,-12(fp)
 80209e4:	e1bffe15 	stw	r6,-8(fp)
	int i, moving_average = 0, sample, last_sample;
 80209e8:	e03ff815 	stw	zero,-32(fp)
	float  coeff = 1./n_samples;	// transform division into multiplication for speed
 80209ec:	e13ffe17 	ldw	r4,-8(fp)
 80209f0:	802903c0 	call	802903c <__floatunsidf>
 80209f4:	1009883a 	mov	r4,r2
 80209f8:	180b883a 	mov	r5,r3
 80209fc:	200d883a 	mov	r6,r4
 8020a00:	280f883a 	mov	r7,r5
 8020a04:	0009883a 	mov	r4,zero
 8020a08:	014ffc34 	movhi	r5,16368
 8020a0c:	802738c0 	call	802738c <__divdf3>
 8020a10:	1009883a 	mov	r4,r2
 8020a14:	180b883a 	mov	r5,r3
 8020a18:	2005883a 	mov	r2,r4
 8020a1c:	2807883a 	mov	r3,r5
 8020a20:	1009883a 	mov	r4,r2
 8020a24:	180b883a 	mov	r5,r3
 8020a28:	80291f40 	call	80291f4 <__truncdfsf2>
 8020a2c:	1007883a 	mov	r3,r2
 8020a30:	e0fff915 	stw	r3,-28(fp)

	moving_average = 0;
 8020a34:	e03ff815 	stw	zero,-32(fp)
	for (i=file_length-n_samples; i<file_length; i++)
 8020a38:	e0fffd17 	ldw	r3,-12(fp)
 8020a3c:	e0bffe17 	ldw	r2,-8(fp)
 8020a40:	1885c83a 	sub	r2,r3,r2
 8020a44:	e0bff715 	stw	r2,-36(fp)
 8020a48:	00001e06 	br	8020ac4 <moving_average+0xfc>
	{
		sample = IORD_32DIRECT(file_address, i*4);
 8020a4c:	e0bff717 	ldw	r2,-36(fp)
 8020a50:	1085883a 	add	r2,r2,r2
 8020a54:	1085883a 	add	r2,r2,r2
 8020a58:	1007883a 	mov	r3,r2
 8020a5c:	e0bffc17 	ldw	r2,-16(fp)
 8020a60:	10c5883a 	add	r2,r2,r3
 8020a64:	10800037 	ldwio	r2,0(r2)
 8020a68:	e0bffa15 	stw	r2,-24(fp)
		moving_average += sample * coeff;
 8020a6c:	e13ff817 	ldw	r4,-32(fp)
 8020a70:	80269bc0 	call	80269bc <__floatsisf>
 8020a74:	1021883a 	mov	r16,r2
 8020a78:	e13ffa17 	ldw	r4,-24(fp)
 8020a7c:	80269bc0 	call	80269bc <__floatsisf>
 8020a80:	1007883a 	mov	r3,r2
 8020a84:	e17ff917 	ldw	r5,-28(fp)
 8020a88:	1809883a 	mov	r4,r3
 8020a8c:	802606c0 	call	802606c <__mulsf3>
 8020a90:	1007883a 	mov	r3,r2
 8020a94:	1805883a 	mov	r2,r3
 8020a98:	100b883a 	mov	r5,r2
 8020a9c:	8009883a 	mov	r4,r16
 8020aa0:	8025ba40 	call	8025ba4 <__addsf3>
 8020aa4:	1007883a 	mov	r3,r2
 8020aa8:	1805883a 	mov	r2,r3
 8020aac:	1009883a 	mov	r4,r2
 8020ab0:	802694c0 	call	802694c <__fixsfsi>
 8020ab4:	e0bff815 	stw	r2,-32(fp)
{
	int i, moving_average = 0, sample, last_sample;
	float  coeff = 1./n_samples;	// transform division into multiplication for speed

	moving_average = 0;
	for (i=file_length-n_samples; i<file_length; i++)
 8020ab8:	e0bff717 	ldw	r2,-36(fp)
 8020abc:	10800044 	addi	r2,r2,1
 8020ac0:	e0bff715 	stw	r2,-36(fp)
 8020ac4:	e0fff717 	ldw	r3,-36(fp)
 8020ac8:	e0bffd17 	ldw	r2,-12(fp)
 8020acc:	18bfdf36 	bltu	r3,r2,8020a4c <_gp+0xfffdf340>
	{
		sample = IORD_32DIRECT(file_address, i*4);
		moving_average += sample * coeff;
	}

	for (i=file_length; i>n_samples; i--)
 8020ad0:	e0bffd17 	ldw	r2,-12(fp)
 8020ad4:	e0bff715 	stw	r2,-36(fp)
 8020ad8:	00004206 	br	8020be4 <moving_average+0x21c>
	{
		last_sample = IORD_32DIRECT(file_address, i*4);
 8020adc:	e0bff717 	ldw	r2,-36(fp)
 8020ae0:	1085883a 	add	r2,r2,r2
 8020ae4:	1085883a 	add	r2,r2,r2
 8020ae8:	1007883a 	mov	r3,r2
 8020aec:	e0bffc17 	ldw	r2,-16(fp)
 8020af0:	10c5883a 	add	r2,r2,r3
 8020af4:	10800037 	ldwio	r2,0(r2)
 8020af8:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT(file_address, i*4, moving_average);
 8020afc:	e0bff717 	ldw	r2,-36(fp)
 8020b00:	1085883a 	add	r2,r2,r2
 8020b04:	1085883a 	add	r2,r2,r2
 8020b08:	1007883a 	mov	r3,r2
 8020b0c:	e0bffc17 	ldw	r2,-16(fp)
 8020b10:	10c5883a 	add	r2,r2,r3
 8020b14:	e0fff817 	ldw	r3,-32(fp)
 8020b18:	10c00035 	stwio	r3,0(r2)

		moving_average -= last_sample * coeff;
 8020b1c:	e13ff817 	ldw	r4,-32(fp)
 8020b20:	80269bc0 	call	80269bc <__floatsisf>
 8020b24:	1021883a 	mov	r16,r2
 8020b28:	e13ffb17 	ldw	r4,-20(fp)
 8020b2c:	80269bc0 	call	80269bc <__floatsisf>
 8020b30:	1007883a 	mov	r3,r2
 8020b34:	e17ff917 	ldw	r5,-28(fp)
 8020b38:	1809883a 	mov	r4,r3
 8020b3c:	802606c0 	call	802606c <__mulsf3>
 8020b40:	1007883a 	mov	r3,r2
 8020b44:	1805883a 	mov	r2,r3
 8020b48:	100b883a 	mov	r5,r2
 8020b4c:	8009883a 	mov	r4,r16
 8020b50:	80264680 	call	8026468 <__subsf3>
 8020b54:	1007883a 	mov	r3,r2
 8020b58:	1805883a 	mov	r2,r3
 8020b5c:	1009883a 	mov	r4,r2
 8020b60:	802694c0 	call	802694c <__fixsfsi>
 8020b64:	e0bff815 	stw	r2,-32(fp)
		moving_average += IORD_32DIRECT(file_address, (i-n_samples)*4) * coeff;
 8020b68:	e0fff717 	ldw	r3,-36(fp)
 8020b6c:	e0bffe17 	ldw	r2,-8(fp)
 8020b70:	1885c83a 	sub	r2,r3,r2
 8020b74:	1085883a 	add	r2,r2,r2
 8020b78:	1085883a 	add	r2,r2,r2
 8020b7c:	1007883a 	mov	r3,r2
 8020b80:	e0bffc17 	ldw	r2,-16(fp)
 8020b84:	10c5883a 	add	r2,r2,r3
 8020b88:	10800037 	ldwio	r2,0(r2)
 8020b8c:	1009883a 	mov	r4,r2
 8020b90:	80269bc0 	call	80269bc <__floatsisf>
 8020b94:	1007883a 	mov	r3,r2
 8020b98:	e17ff917 	ldw	r5,-28(fp)
 8020b9c:	1809883a 	mov	r4,r3
 8020ba0:	802606c0 	call	802606c <__mulsf3>
 8020ba4:	1007883a 	mov	r3,r2
 8020ba8:	1821883a 	mov	r16,r3
 8020bac:	e13ff817 	ldw	r4,-32(fp)
 8020bb0:	80269bc0 	call	80269bc <__floatsisf>
 8020bb4:	1007883a 	mov	r3,r2
 8020bb8:	800b883a 	mov	r5,r16
 8020bbc:	1809883a 	mov	r4,r3
 8020bc0:	8025ba40 	call	8025ba4 <__addsf3>
 8020bc4:	1007883a 	mov	r3,r2
 8020bc8:	1805883a 	mov	r2,r3
 8020bcc:	1009883a 	mov	r4,r2
 8020bd0:	802694c0 	call	802694c <__fixsfsi>
 8020bd4:	e0bff815 	stw	r2,-32(fp)
	{
		sample = IORD_32DIRECT(file_address, i*4);
		moving_average += sample * coeff;
	}

	for (i=file_length; i>n_samples; i--)
 8020bd8:	e0bff717 	ldw	r2,-36(fp)
 8020bdc:	10bfffc4 	addi	r2,r2,-1
 8020be0:	e0bff715 	stw	r2,-36(fp)
 8020be4:	e0bff717 	ldw	r2,-36(fp)
 8020be8:	e0fffe17 	ldw	r3,-8(fp)
 8020bec:	18bfbb36 	bltu	r3,r2,8020adc <_gp+0xfffdf3d0>
		IOWR_32DIRECT(file_address, i*4, moving_average);

		moving_average -= last_sample * coeff;
		moving_average += IORD_32DIRECT(file_address, (i-n_samples)*4) * coeff;
	}
}
 8020bf0:	0001883a 	nop
 8020bf4:	e6ffff04 	addi	sp,fp,-4
 8020bf8:	dfc00217 	ldw	ra,8(sp)
 8020bfc:	df000117 	ldw	fp,4(sp)
 8020c00:	dc000017 	ldw	r16,0(sp)
 8020c04:	dec00304 	addi	sp,sp,12
 8020c08:	f800283a 	ret

08020c0c <modify_pitch>:




void modify_pitch(unsigned int *file_address, unsigned int file_length, unsigned int pitch_change)
{
 8020c0c:	defff704 	addi	sp,sp,-36
 8020c10:	dfc00815 	stw	ra,32(sp)
 8020c14:	df000715 	stw	fp,28(sp)
 8020c18:	dc000615 	stw	r16,24(sp)
 8020c1c:	df000704 	addi	fp,sp,28
 8020c20:	e13ffc15 	stw	r4,-16(fp)
 8020c24:	e17ffd15 	stw	r5,-12(fp)
 8020c28:	e1bffe15 	stw	r6,-8(fp)
	unsigned int j, i, n_batches;

	n_batches = file_length/FFT_SIZE;
 8020c2c:	e0bffd17 	ldw	r2,-12(fp)
 8020c30:	1004d13a 	srli	r2,r2,4
 8020c34:	e0bffb15 	stw	r2,-20(fp)

	for (j=0; j<n_batches; j++)
 8020c38:	e03ff915 	stw	zero,-28(fp)
 8020c3c:	00007906 	br	8020e24 <modify_pitch+0x218>
	{
		for (i = 0; i < FFT_SIZE; i++){
 8020c40:	e03ffa15 	stw	zero,-24(fp)
 8020c44:	00001d06 	br	8020cbc <modify_pitch+0xb0>
			time_domain[i].r = IORD_32DIRECT(file_address, (j*FFT_SIZE + i)*4);
 8020c48:	e0bff917 	ldw	r2,-28(fp)
 8020c4c:	1006913a 	slli	r3,r2,4
 8020c50:	e0bffa17 	ldw	r2,-24(fp)
 8020c54:	1885883a 	add	r2,r3,r2
 8020c58:	1085883a 	add	r2,r2,r2
 8020c5c:	1085883a 	add	r2,r2,r2
 8020c60:	1007883a 	mov	r3,r2
 8020c64:	e0bffc17 	ldw	r2,-16(fp)
 8020c68:	10c5883a 	add	r2,r2,r3
 8020c6c:	10800037 	ldwio	r2,0(r2)
 8020c70:	1009883a 	mov	r4,r2
 8020c74:	80269bc0 	call	80269bc <__floatsisf>
 8020c78:	1009883a 	mov	r4,r2
 8020c7c:	00820134 	movhi	r2,2052
 8020c80:	10ad4004 	addi	r2,r2,-19200
 8020c84:	e0fffa17 	ldw	r3,-24(fp)
 8020c88:	180690fa 	slli	r3,r3,3
 8020c8c:	10c5883a 	add	r2,r2,r3
 8020c90:	11000015 	stw	r4,0(r2)
			time_domain[i].i = 0;
 8020c94:	00820134 	movhi	r2,2052
 8020c98:	10ad4004 	addi	r2,r2,-19200
 8020c9c:	e0fffa17 	ldw	r3,-24(fp)
 8020ca0:	180690fa 	slli	r3,r3,3
 8020ca4:	10c5883a 	add	r2,r2,r3
 8020ca8:	10800104 	addi	r2,r2,4
 8020cac:	10000015 	stw	zero,0(r2)

	n_batches = file_length/FFT_SIZE;

	for (j=0; j<n_batches; j++)
	{
		for (i = 0; i < FFT_SIZE; i++){
 8020cb0:	e0bffa17 	ldw	r2,-24(fp)
 8020cb4:	10800044 	addi	r2,r2,1
 8020cb8:	e0bffa15 	stw	r2,-24(fp)
 8020cbc:	e0bffa17 	ldw	r2,-24(fp)
 8020cc0:	10800430 	cmpltui	r2,r2,16
 8020cc4:	103fe01e 	bne	r2,zero,8020c48 <_gp+0xfffdf53c>
			time_domain[i].r = IORD_32DIRECT(file_address, (j*FFT_SIZE + i)*4);
			time_domain[i].i = 0;
		}
		SilentFft("Signal (complex)", time_domain, freq_domain, 0);	//calculate FFT
 8020cc8:	000f883a 	mov	r7,zero
 8020ccc:	01820134 	movhi	r6,2052
 8020cd0:	31ad2004 	addi	r6,r6,-19328
 8020cd4:	01420134 	movhi	r5,2052
 8020cd8:	296d4004 	addi	r5,r5,-19200
 8020cdc:	010200f4 	movhi	r4,2051
 8020ce0:	211d6704 	addi	r4,r4,30108
 8020ce4:	8020e4c0 	call	8020e4c <SilentFft>

		for(i=1; i<FFT_SIZE/2; i++)
 8020ce8:	00800044 	movi	r2,1
 8020cec:	e0bffa15 	stw	r2,-24(fp)
 8020cf0:	00002406 	br	8020d84 <modify_pitch+0x178>
		{
			if(i!=FFT_SIZE-1)	// keeps only 24kHz frequencies (at least in theory)
 8020cf4:	e0bffa17 	ldw	r2,-24(fp)
 8020cf8:	108003e0 	cmpeqi	r2,r2,15
 8020cfc:	10001e1e 	bne	r2,zero,8020d78 <modify_pitch+0x16c>
			{
				freq_domain[i].r = 0;
 8020d00:	00820134 	movhi	r2,2052
 8020d04:	10ad2004 	addi	r2,r2,-19328
 8020d08:	e0fffa17 	ldw	r3,-24(fp)
 8020d0c:	180690fa 	slli	r3,r3,3
 8020d10:	10c5883a 	add	r2,r2,r3
 8020d14:	10000015 	stw	zero,0(r2)
				freq_domain[i].i = 0;
 8020d18:	00820134 	movhi	r2,2052
 8020d1c:	10ad2004 	addi	r2,r2,-19328
 8020d20:	e0fffa17 	ldw	r3,-24(fp)
 8020d24:	180690fa 	slli	r3,r3,3
 8020d28:	10c5883a 	add	r2,r2,r3
 8020d2c:	10800104 	addi	r2,r2,4
 8020d30:	10000015 	stw	zero,0(r2)
				freq_domain[FFT_SIZE-i].r = 0;
 8020d34:	00c00404 	movi	r3,16
 8020d38:	e0bffa17 	ldw	r2,-24(fp)
 8020d3c:	1887c83a 	sub	r3,r3,r2
 8020d40:	00820134 	movhi	r2,2052
 8020d44:	10ad2004 	addi	r2,r2,-19328
 8020d48:	180690fa 	slli	r3,r3,3
 8020d4c:	10c5883a 	add	r2,r2,r3
 8020d50:	10000015 	stw	zero,0(r2)
				freq_domain[FFT_SIZE-i].i = 0;
 8020d54:	00c00404 	movi	r3,16
 8020d58:	e0bffa17 	ldw	r2,-24(fp)
 8020d5c:	1887c83a 	sub	r3,r3,r2
 8020d60:	00820134 	movhi	r2,2052
 8020d64:	10ad2004 	addi	r2,r2,-19328
 8020d68:	180690fa 	slli	r3,r3,3
 8020d6c:	10c5883a 	add	r2,r2,r3
 8020d70:	10800104 	addi	r2,r2,4
 8020d74:	10000015 	stw	zero,0(r2)
			time_domain[i].r = IORD_32DIRECT(file_address, (j*FFT_SIZE + i)*4);
			time_domain[i].i = 0;
		}
		SilentFft("Signal (complex)", time_domain, freq_domain, 0);	//calculate FFT

		for(i=1; i<FFT_SIZE/2; i++)
 8020d78:	e0bffa17 	ldw	r2,-24(fp)
 8020d7c:	10800044 	addi	r2,r2,1
 8020d80:	e0bffa15 	stw	r2,-24(fp)
 8020d84:	e0bffa17 	ldw	r2,-24(fp)
 8020d88:	10800230 	cmpltui	r2,r2,8
 8020d8c:	103fd91e 	bne	r2,zero,8020cf4 <_gp+0xfffdf5e8>
				freq_domain[FFT_SIZE-i].i = 0;
			}
		}


		SilentFft("Signal (complex)", freq_domain, time_domain, 1);	//calculate reverse FFT
 8020d90:	01c00044 	movi	r7,1
 8020d94:	01820134 	movhi	r6,2052
 8020d98:	31ad4004 	addi	r6,r6,-19200
 8020d9c:	01420134 	movhi	r5,2052
 8020da0:	296d2004 	addi	r5,r5,-19328
 8020da4:	010200f4 	movhi	r4,2051
 8020da8:	211d6704 	addi	r4,r4,30108
 8020dac:	8020e4c0 	call	8020e4c <SilentFft>
		for (i = 0; i < FFT_SIZE; i++)
 8020db0:	e03ffa15 	stw	zero,-24(fp)
 8020db4:	00001506 	br	8020e0c <modify_pitch+0x200>
			IOWR_32DIRECT(file_address, (j*FFT_SIZE + i)*4, time_domain[i].r);
 8020db8:	e0bff917 	ldw	r2,-28(fp)
 8020dbc:	1006913a 	slli	r3,r2,4
 8020dc0:	e0bffa17 	ldw	r2,-24(fp)
 8020dc4:	1885883a 	add	r2,r3,r2
 8020dc8:	1085883a 	add	r2,r2,r2
 8020dcc:	1085883a 	add	r2,r2,r2
 8020dd0:	1007883a 	mov	r3,r2
 8020dd4:	e0bffc17 	ldw	r2,-16(fp)
 8020dd8:	10e1883a 	add	r16,r2,r3
 8020ddc:	00820134 	movhi	r2,2052
 8020de0:	10ad4004 	addi	r2,r2,-19200
 8020de4:	e0fffa17 	ldw	r3,-24(fp)
 8020de8:	180690fa 	slli	r3,r3,3
 8020dec:	10c5883a 	add	r2,r2,r3
 8020df0:	10c00017 	ldw	r3,0(r2)
 8020df4:	1809883a 	mov	r4,r3
 8020df8:	802694c0 	call	802694c <__fixsfsi>
 8020dfc:	80800035 	stwio	r2,0(r16)
			}
		}


		SilentFft("Signal (complex)", freq_domain, time_domain, 1);	//calculate reverse FFT
		for (i = 0; i < FFT_SIZE; i++)
 8020e00:	e0bffa17 	ldw	r2,-24(fp)
 8020e04:	10800044 	addi	r2,r2,1
 8020e08:	e0bffa15 	stw	r2,-24(fp)
 8020e0c:	e0bffa17 	ldw	r2,-24(fp)
 8020e10:	10800430 	cmpltui	r2,r2,16
 8020e14:	103fe81e 	bne	r2,zero,8020db8 <_gp+0xfffdf6ac>
{
	unsigned int j, i, n_batches;

	n_batches = file_length/FFT_SIZE;

	for (j=0; j<n_batches; j++)
 8020e18:	e0bff917 	ldw	r2,-28(fp)
 8020e1c:	10800044 	addi	r2,r2,1
 8020e20:	e0bff915 	stw	r2,-28(fp)
 8020e24:	e0fff917 	ldw	r3,-28(fp)
 8020e28:	e0bffb17 	ldw	r2,-20(fp)
 8020e2c:	18bf8436 	bltu	r3,r2,8020c40 <_gp+0xfffdf534>

		SilentFft("Signal (complex)", freq_domain, time_domain, 1);	//calculate reverse FFT
		for (i = 0; i < FFT_SIZE; i++)
			IOWR_32DIRECT(file_address, (j*FFT_SIZE + i)*4, time_domain[i].r);
	}
}
 8020e30:	0001883a 	nop
 8020e34:	e6ffff04 	addi	sp,fp,-4
 8020e38:	dfc00217 	ldw	ra,8(sp)
 8020e3c:	df000117 	ldw	fp,4(sp)
 8020e40:	dc000017 	ldw	r16,0(sp)
 8020e44:	dec00304 	addi	sp,sp,12
 8020e48:	f800283a 	ret

08020e4c <SilentFft>:


void SilentFft(const char* title, const kiss_fft_cpx in[FFT_SIZE], kiss_fft_cpx out[FFT_SIZE], int inverse)
{
 8020e4c:	defffa04 	addi	sp,sp,-24
 8020e50:	dfc00515 	stw	ra,20(sp)
 8020e54:	df000415 	stw	fp,16(sp)
 8020e58:	df000404 	addi	fp,sp,16
 8020e5c:	e13ffc15 	stw	r4,-16(fp)
 8020e60:	e17ffd15 	stw	r5,-12(fp)
 8020e64:	e1bffe15 	stw	r6,-8(fp)
 8020e68:	e1ffff15 	stw	r7,-4(fp)
  static kiss_fft_cfg cfg = NULL;

  // if first time allocates memory
  if (cfg == NULL)
 8020e6c:	d0a73017 	ldw	r2,-25408(gp)
 8020e70:	1000061e 	bne	r2,zero,8020e8c <SilentFft+0x40>
	  cfg = kiss_fft_alloc(FFT_SIZE, inverse, NULL, NULL);
 8020e74:	000f883a 	mov	r7,zero
 8020e78:	000d883a 	mov	r6,zero
 8020e7c:	e17fff17 	ldw	r5,-4(fp)
 8020e80:	01000404 	movi	r4,16
 8020e84:	8022f800 	call	8022f80 <kiss_fft_alloc>
 8020e88:	d0a73015 	stw	r2,-25408(gp)

  // checks if memory was successfully allocated
  if (cfg  != NULL)
 8020e8c:	d0a73017 	ldw	r2,-25408(gp)
 8020e90:	10000626 	beq	r2,zero,8020eac <SilentFft+0x60>
  {
    size_t i;

    kiss_fft(cfg, in, out);
 8020e94:	d0a73017 	ldw	r2,-25408(gp)
 8020e98:	e1bffe17 	ldw	r6,-8(fp)
 8020e9c:	e17ffd17 	ldw	r5,-12(fp)
 8020ea0:	1009883a 	mov	r4,r2
 8020ea4:	80232840 	call	8023284 <kiss_fft>
  else
  {
    printf("not enough memory?\n");
    exit(-1);
  }
}
 8020ea8:	00000506 	br	8020ec0 <SilentFft+0x74>
    kiss_fft(cfg, in, out);
    //free(cfg);
  }
  else
  {
    printf("not enough memory?\n");
 8020eac:	010200f4 	movhi	r4,2051
 8020eb0:	211d6c04 	addi	r4,r4,30128
 8020eb4:	8029ef00 	call	8029ef0 <puts>
    exit(-1);
 8020eb8:	013fffc4 	movi	r4,-1
 8020ebc:	80294100 	call	8029410 <exit>
  }
}
 8020ec0:	e037883a 	mov	sp,fp
 8020ec4:	dfc00117 	ldw	ra,4(sp)
 8020ec8:	df000017 	ldw	fp,0(sp)
 8020ecc:	dec00204 	addi	sp,sp,8
 8020ed0:	f800283a 	ret

08020ed4 <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8020ed4:	defff504 	addi	sp,sp,-44
 8020ed8:	dfc00a15 	stw	ra,40(sp)
 8020edc:	df000915 	stw	fp,36(sp)
 8020ee0:	dc000815 	stw	r16,32(sp)
 8020ee4:	df000904 	addi	fp,sp,36
 8020ee8:	e13ffb15 	stw	r4,-20(fp)
 8020eec:	e17ffc15 	stw	r5,-16(fp)
 8020ef0:	e1bffd15 	stw	r6,-12(fp)
 8020ef4:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8020ef8:	e0bffd17 	ldw	r2,-12(fp)
 8020efc:	10804204 	addi	r2,r2,264
 8020f00:	e0bff815 	stw	r2,-32(fp)
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8020f04:	e0bffe17 	ldw	r2,-8(fp)
 8020f08:	100490fa 	slli	r2,r2,3
 8020f0c:	e0fffb17 	ldw	r3,-20(fp)
 8020f10:	1885883a 	add	r2,r3,r2
 8020f14:	e0bff715 	stw	r2,-36(fp)
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8020f18:	e0bff717 	ldw	r2,-36(fp)
 8020f1c:	10c00017 	ldw	r3,0(r2)
 8020f20:	e0bff817 	ldw	r2,-32(fp)
 8020f24:	11000017 	ldw	r4,0(r2)
 8020f28:	200b883a 	mov	r5,r4
 8020f2c:	1809883a 	mov	r4,r3
 8020f30:	802606c0 	call	802606c <__mulsf3>
 8020f34:	1007883a 	mov	r3,r2
 8020f38:	1821883a 	mov	r16,r3
 8020f3c:	e0bff717 	ldw	r2,-36(fp)
 8020f40:	10c00117 	ldw	r3,4(r2)
 8020f44:	e0bff817 	ldw	r2,-32(fp)
 8020f48:	11000117 	ldw	r4,4(r2)
 8020f4c:	200b883a 	mov	r5,r4
 8020f50:	1809883a 	mov	r4,r3
 8020f54:	802606c0 	call	802606c <__mulsf3>
 8020f58:	1007883a 	mov	r3,r2
 8020f5c:	1805883a 	mov	r2,r3
 8020f60:	100b883a 	mov	r5,r2
 8020f64:	8009883a 	mov	r4,r16
 8020f68:	80264680 	call	8026468 <__subsf3>
 8020f6c:	1007883a 	mov	r3,r2
 8020f70:	1805883a 	mov	r2,r3
 8020f74:	e0bff915 	stw	r2,-28(fp)
 8020f78:	e0bff717 	ldw	r2,-36(fp)
 8020f7c:	10c00017 	ldw	r3,0(r2)
 8020f80:	e0bff817 	ldw	r2,-32(fp)
 8020f84:	11000117 	ldw	r4,4(r2)
 8020f88:	200b883a 	mov	r5,r4
 8020f8c:	1809883a 	mov	r4,r3
 8020f90:	802606c0 	call	802606c <__mulsf3>
 8020f94:	1007883a 	mov	r3,r2
 8020f98:	1821883a 	mov	r16,r3
 8020f9c:	e0bff717 	ldw	r2,-36(fp)
 8020fa0:	10c00117 	ldw	r3,4(r2)
 8020fa4:	e0bff817 	ldw	r2,-32(fp)
 8020fa8:	11000017 	ldw	r4,0(r2)
 8020fac:	200b883a 	mov	r5,r4
 8020fb0:	1809883a 	mov	r4,r3
 8020fb4:	802606c0 	call	802606c <__mulsf3>
 8020fb8:	1007883a 	mov	r3,r2
 8020fbc:	1805883a 	mov	r2,r3
 8020fc0:	100b883a 	mov	r5,r2
 8020fc4:	8009883a 	mov	r4,r16
 8020fc8:	8025ba40 	call	8025ba4 <__addsf3>
 8020fcc:	1007883a 	mov	r3,r2
 8020fd0:	1805883a 	mov	r2,r3
 8020fd4:	e0bffa15 	stw	r2,-24(fp)
        tw1 += fstride;
 8020fd8:	e0bffc17 	ldw	r2,-16(fp)
 8020fdc:	100490fa 	slli	r2,r2,3
 8020fe0:	e0fff817 	ldw	r3,-32(fp)
 8020fe4:	1885883a 	add	r2,r3,r2
 8020fe8:	e0bff815 	stw	r2,-32(fp)
        C_SUB( *Fout2 ,  *Fout , t );
 8020fec:	e0bffb17 	ldw	r2,-20(fp)
 8020ff0:	10c00017 	ldw	r3,0(r2)
 8020ff4:	e0bff917 	ldw	r2,-28(fp)
 8020ff8:	100b883a 	mov	r5,r2
 8020ffc:	1809883a 	mov	r4,r3
 8021000:	80264680 	call	8026468 <__subsf3>
 8021004:	1009883a 	mov	r4,r2
 8021008:	2007883a 	mov	r3,r4
 802100c:	e0bff717 	ldw	r2,-36(fp)
 8021010:	10c00015 	stw	r3,0(r2)
 8021014:	e0bffb17 	ldw	r2,-20(fp)
 8021018:	10c00117 	ldw	r3,4(r2)
 802101c:	e0bffa17 	ldw	r2,-24(fp)
 8021020:	100b883a 	mov	r5,r2
 8021024:	1809883a 	mov	r4,r3
 8021028:	80264680 	call	8026468 <__subsf3>
 802102c:	1009883a 	mov	r4,r2
 8021030:	2007883a 	mov	r3,r4
 8021034:	e0bff717 	ldw	r2,-36(fp)
 8021038:	10c00115 	stw	r3,4(r2)
        C_ADDTO( *Fout ,  t );
 802103c:	e0bffb17 	ldw	r2,-20(fp)
 8021040:	10c00017 	ldw	r3,0(r2)
 8021044:	e0bff917 	ldw	r2,-28(fp)
 8021048:	100b883a 	mov	r5,r2
 802104c:	1809883a 	mov	r4,r3
 8021050:	8025ba40 	call	8025ba4 <__addsf3>
 8021054:	1009883a 	mov	r4,r2
 8021058:	2007883a 	mov	r3,r4
 802105c:	e0bffb17 	ldw	r2,-20(fp)
 8021060:	10c00015 	stw	r3,0(r2)
 8021064:	e0bffb17 	ldw	r2,-20(fp)
 8021068:	10c00117 	ldw	r3,4(r2)
 802106c:	e0bffa17 	ldw	r2,-24(fp)
 8021070:	100b883a 	mov	r5,r2
 8021074:	1809883a 	mov	r4,r3
 8021078:	8025ba40 	call	8025ba4 <__addsf3>
 802107c:	1009883a 	mov	r4,r2
 8021080:	2007883a 	mov	r3,r4
 8021084:	e0bffb17 	ldw	r2,-20(fp)
 8021088:	10c00115 	stw	r3,4(r2)
        ++Fout2;
 802108c:	e0bff717 	ldw	r2,-36(fp)
 8021090:	10800204 	addi	r2,r2,8
 8021094:	e0bff715 	stw	r2,-36(fp)
        ++Fout;
 8021098:	e0bffb17 	ldw	r2,-20(fp)
 802109c:	10800204 	addi	r2,r2,8
 80210a0:	e0bffb15 	stw	r2,-20(fp)
    }while (--m);
 80210a4:	e0bffe17 	ldw	r2,-8(fp)
 80210a8:	10bfffc4 	addi	r2,r2,-1
 80210ac:	e0bffe15 	stw	r2,-8(fp)
 80210b0:	e0bffe17 	ldw	r2,-8(fp)
 80210b4:	103f981e 	bne	r2,zero,8020f18 <_gp+0xfffdf80c>
}
 80210b8:	0001883a 	nop
 80210bc:	e6ffff04 	addi	sp,fp,-4
 80210c0:	dfc00217 	ldw	ra,8(sp)
 80210c4:	df000117 	ldw	fp,4(sp)
 80210c8:	dc000017 	ldw	r16,0(sp)
 80210cc:	dec00304 	addi	sp,sp,12
 80210d0:	f800283a 	ret

080210d4 <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80210d4:	deffe704 	addi	sp,sp,-100
 80210d8:	dfc01815 	stw	ra,96(sp)
 80210dc:	df001715 	stw	fp,92(sp)
 80210e0:	dc001615 	stw	r16,88(sp)
 80210e4:	df001704 	addi	fp,sp,92
 80210e8:	e13ffb15 	stw	r4,-20(fp)
 80210ec:	e17ffc15 	stw	r5,-16(fp)
 80210f0:	e1bffd15 	stw	r6,-12(fp)
 80210f4:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80210f8:	e0bffe17 	ldw	r2,-8(fp)
 80210fc:	e0bfec15 	stw	r2,-80(fp)
    const size_t m2=2*m;
 8021100:	e0bffe17 	ldw	r2,-8(fp)
 8021104:	1085883a 	add	r2,r2,r2
 8021108:	e0bfed15 	stw	r2,-76(fp)
    const size_t m3=3*m;
 802110c:	e0fffe17 	ldw	r3,-8(fp)
 8021110:	1805883a 	mov	r2,r3
 8021114:	1085883a 	add	r2,r2,r2
 8021118:	10c5883a 	add	r2,r2,r3
 802111c:	e0bfee15 	stw	r2,-72(fp)


    tw3 = tw2 = tw1 = st->twiddles;
 8021120:	e0bffd17 	ldw	r2,-12(fp)
 8021124:	10804204 	addi	r2,r2,264
 8021128:	e0bfe915 	stw	r2,-92(fp)
 802112c:	e0bfe917 	ldw	r2,-92(fp)
 8021130:	e0bfea15 	stw	r2,-88(fp)
 8021134:	e0bfea17 	ldw	r2,-88(fp)
 8021138:	e0bfeb15 	stw	r2,-84(fp)

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 802113c:	e0bffe17 	ldw	r2,-8(fp)
 8021140:	100490fa 	slli	r2,r2,3
 8021144:	e0fffb17 	ldw	r3,-20(fp)
 8021148:	1885883a 	add	r2,r3,r2
 802114c:	10c00017 	ldw	r3,0(r2)
 8021150:	e0bfe917 	ldw	r2,-92(fp)
 8021154:	11000017 	ldw	r4,0(r2)
 8021158:	200b883a 	mov	r5,r4
 802115c:	1809883a 	mov	r4,r3
 8021160:	802606c0 	call	802606c <__mulsf3>
 8021164:	1007883a 	mov	r3,r2
 8021168:	1821883a 	mov	r16,r3
 802116c:	e0bffe17 	ldw	r2,-8(fp)
 8021170:	100490fa 	slli	r2,r2,3
 8021174:	e0fffb17 	ldw	r3,-20(fp)
 8021178:	1885883a 	add	r2,r3,r2
 802117c:	10c00117 	ldw	r3,4(r2)
 8021180:	e0bfe917 	ldw	r2,-92(fp)
 8021184:	11000117 	ldw	r4,4(r2)
 8021188:	200b883a 	mov	r5,r4
 802118c:	1809883a 	mov	r4,r3
 8021190:	802606c0 	call	802606c <__mulsf3>
 8021194:	1007883a 	mov	r3,r2
 8021198:	1805883a 	mov	r2,r3
 802119c:	100b883a 	mov	r5,r2
 80211a0:	8009883a 	mov	r4,r16
 80211a4:	80264680 	call	8026468 <__subsf3>
 80211a8:	1007883a 	mov	r3,r2
 80211ac:	1805883a 	mov	r2,r3
 80211b0:	e0bfef15 	stw	r2,-68(fp)
 80211b4:	e0bffe17 	ldw	r2,-8(fp)
 80211b8:	100490fa 	slli	r2,r2,3
 80211bc:	e0fffb17 	ldw	r3,-20(fp)
 80211c0:	1885883a 	add	r2,r3,r2
 80211c4:	10c00017 	ldw	r3,0(r2)
 80211c8:	e0bfe917 	ldw	r2,-92(fp)
 80211cc:	11000117 	ldw	r4,4(r2)
 80211d0:	200b883a 	mov	r5,r4
 80211d4:	1809883a 	mov	r4,r3
 80211d8:	802606c0 	call	802606c <__mulsf3>
 80211dc:	1007883a 	mov	r3,r2
 80211e0:	1821883a 	mov	r16,r3
 80211e4:	e0bffe17 	ldw	r2,-8(fp)
 80211e8:	100490fa 	slli	r2,r2,3
 80211ec:	e0fffb17 	ldw	r3,-20(fp)
 80211f0:	1885883a 	add	r2,r3,r2
 80211f4:	10c00117 	ldw	r3,4(r2)
 80211f8:	e0bfe917 	ldw	r2,-92(fp)
 80211fc:	11000017 	ldw	r4,0(r2)
 8021200:	200b883a 	mov	r5,r4
 8021204:	1809883a 	mov	r4,r3
 8021208:	802606c0 	call	802606c <__mulsf3>
 802120c:	1007883a 	mov	r3,r2
 8021210:	1805883a 	mov	r2,r3
 8021214:	100b883a 	mov	r5,r2
 8021218:	8009883a 	mov	r4,r16
 802121c:	8025ba40 	call	8025ba4 <__addsf3>
 8021220:	1007883a 	mov	r3,r2
 8021224:	1805883a 	mov	r2,r3
 8021228:	e0bff015 	stw	r2,-64(fp)
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 802122c:	e0bfed17 	ldw	r2,-76(fp)
 8021230:	100490fa 	slli	r2,r2,3
 8021234:	e0fffb17 	ldw	r3,-20(fp)
 8021238:	1885883a 	add	r2,r3,r2
 802123c:	10c00017 	ldw	r3,0(r2)
 8021240:	e0bfea17 	ldw	r2,-88(fp)
 8021244:	11000017 	ldw	r4,0(r2)
 8021248:	200b883a 	mov	r5,r4
 802124c:	1809883a 	mov	r4,r3
 8021250:	802606c0 	call	802606c <__mulsf3>
 8021254:	1007883a 	mov	r3,r2
 8021258:	1821883a 	mov	r16,r3
 802125c:	e0bfed17 	ldw	r2,-76(fp)
 8021260:	100490fa 	slli	r2,r2,3
 8021264:	e0fffb17 	ldw	r3,-20(fp)
 8021268:	1885883a 	add	r2,r3,r2
 802126c:	10c00117 	ldw	r3,4(r2)
 8021270:	e0bfea17 	ldw	r2,-88(fp)
 8021274:	11000117 	ldw	r4,4(r2)
 8021278:	200b883a 	mov	r5,r4
 802127c:	1809883a 	mov	r4,r3
 8021280:	802606c0 	call	802606c <__mulsf3>
 8021284:	1007883a 	mov	r3,r2
 8021288:	1805883a 	mov	r2,r3
 802128c:	100b883a 	mov	r5,r2
 8021290:	8009883a 	mov	r4,r16
 8021294:	80264680 	call	8026468 <__subsf3>
 8021298:	1007883a 	mov	r3,r2
 802129c:	1805883a 	mov	r2,r3
 80212a0:	e0bff115 	stw	r2,-60(fp)
 80212a4:	e0bfed17 	ldw	r2,-76(fp)
 80212a8:	100490fa 	slli	r2,r2,3
 80212ac:	e0fffb17 	ldw	r3,-20(fp)
 80212b0:	1885883a 	add	r2,r3,r2
 80212b4:	10c00017 	ldw	r3,0(r2)
 80212b8:	e0bfea17 	ldw	r2,-88(fp)
 80212bc:	11000117 	ldw	r4,4(r2)
 80212c0:	200b883a 	mov	r5,r4
 80212c4:	1809883a 	mov	r4,r3
 80212c8:	802606c0 	call	802606c <__mulsf3>
 80212cc:	1007883a 	mov	r3,r2
 80212d0:	1821883a 	mov	r16,r3
 80212d4:	e0bfed17 	ldw	r2,-76(fp)
 80212d8:	100490fa 	slli	r2,r2,3
 80212dc:	e0fffb17 	ldw	r3,-20(fp)
 80212e0:	1885883a 	add	r2,r3,r2
 80212e4:	10c00117 	ldw	r3,4(r2)
 80212e8:	e0bfea17 	ldw	r2,-88(fp)
 80212ec:	11000017 	ldw	r4,0(r2)
 80212f0:	200b883a 	mov	r5,r4
 80212f4:	1809883a 	mov	r4,r3
 80212f8:	802606c0 	call	802606c <__mulsf3>
 80212fc:	1007883a 	mov	r3,r2
 8021300:	1805883a 	mov	r2,r3
 8021304:	100b883a 	mov	r5,r2
 8021308:	8009883a 	mov	r4,r16
 802130c:	8025ba40 	call	8025ba4 <__addsf3>
 8021310:	1007883a 	mov	r3,r2
 8021314:	1805883a 	mov	r2,r3
 8021318:	e0bff215 	stw	r2,-56(fp)
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 802131c:	e0bfee17 	ldw	r2,-72(fp)
 8021320:	100490fa 	slli	r2,r2,3
 8021324:	e0fffb17 	ldw	r3,-20(fp)
 8021328:	1885883a 	add	r2,r3,r2
 802132c:	10c00017 	ldw	r3,0(r2)
 8021330:	e0bfeb17 	ldw	r2,-84(fp)
 8021334:	11000017 	ldw	r4,0(r2)
 8021338:	200b883a 	mov	r5,r4
 802133c:	1809883a 	mov	r4,r3
 8021340:	802606c0 	call	802606c <__mulsf3>
 8021344:	1007883a 	mov	r3,r2
 8021348:	1821883a 	mov	r16,r3
 802134c:	e0bfee17 	ldw	r2,-72(fp)
 8021350:	100490fa 	slli	r2,r2,3
 8021354:	e0fffb17 	ldw	r3,-20(fp)
 8021358:	1885883a 	add	r2,r3,r2
 802135c:	10c00117 	ldw	r3,4(r2)
 8021360:	e0bfeb17 	ldw	r2,-84(fp)
 8021364:	11000117 	ldw	r4,4(r2)
 8021368:	200b883a 	mov	r5,r4
 802136c:	1809883a 	mov	r4,r3
 8021370:	802606c0 	call	802606c <__mulsf3>
 8021374:	1007883a 	mov	r3,r2
 8021378:	1805883a 	mov	r2,r3
 802137c:	100b883a 	mov	r5,r2
 8021380:	8009883a 	mov	r4,r16
 8021384:	80264680 	call	8026468 <__subsf3>
 8021388:	1007883a 	mov	r3,r2
 802138c:	1805883a 	mov	r2,r3
 8021390:	e0bff315 	stw	r2,-52(fp)
 8021394:	e0bfee17 	ldw	r2,-72(fp)
 8021398:	100490fa 	slli	r2,r2,3
 802139c:	e0fffb17 	ldw	r3,-20(fp)
 80213a0:	1885883a 	add	r2,r3,r2
 80213a4:	10c00017 	ldw	r3,0(r2)
 80213a8:	e0bfeb17 	ldw	r2,-84(fp)
 80213ac:	11000117 	ldw	r4,4(r2)
 80213b0:	200b883a 	mov	r5,r4
 80213b4:	1809883a 	mov	r4,r3
 80213b8:	802606c0 	call	802606c <__mulsf3>
 80213bc:	1007883a 	mov	r3,r2
 80213c0:	1821883a 	mov	r16,r3
 80213c4:	e0bfee17 	ldw	r2,-72(fp)
 80213c8:	100490fa 	slli	r2,r2,3
 80213cc:	e0fffb17 	ldw	r3,-20(fp)
 80213d0:	1885883a 	add	r2,r3,r2
 80213d4:	10c00117 	ldw	r3,4(r2)
 80213d8:	e0bfeb17 	ldw	r2,-84(fp)
 80213dc:	11000017 	ldw	r4,0(r2)
 80213e0:	200b883a 	mov	r5,r4
 80213e4:	1809883a 	mov	r4,r3
 80213e8:	802606c0 	call	802606c <__mulsf3>
 80213ec:	1007883a 	mov	r3,r2
 80213f0:	1805883a 	mov	r2,r3
 80213f4:	100b883a 	mov	r5,r2
 80213f8:	8009883a 	mov	r4,r16
 80213fc:	8025ba40 	call	8025ba4 <__addsf3>
 8021400:	1007883a 	mov	r3,r2
 8021404:	1805883a 	mov	r2,r3
 8021408:	e0bff415 	stw	r2,-48(fp)

        C_SUB( scratch[5] , *Fout, scratch[1] );
 802140c:	e0bffb17 	ldw	r2,-20(fp)
 8021410:	10c00017 	ldw	r3,0(r2)
 8021414:	e0bff117 	ldw	r2,-60(fp)
 8021418:	100b883a 	mov	r5,r2
 802141c:	1809883a 	mov	r4,r3
 8021420:	80264680 	call	8026468 <__subsf3>
 8021424:	1007883a 	mov	r3,r2
 8021428:	1805883a 	mov	r2,r3
 802142c:	e0bff915 	stw	r2,-28(fp)
 8021430:	e0bffb17 	ldw	r2,-20(fp)
 8021434:	10c00117 	ldw	r3,4(r2)
 8021438:	e0bff217 	ldw	r2,-56(fp)
 802143c:	100b883a 	mov	r5,r2
 8021440:	1809883a 	mov	r4,r3
 8021444:	80264680 	call	8026468 <__subsf3>
 8021448:	1007883a 	mov	r3,r2
 802144c:	1805883a 	mov	r2,r3
 8021450:	e0bffa15 	stw	r2,-24(fp)
        C_ADDTO(*Fout, scratch[1]);
 8021454:	e0bffb17 	ldw	r2,-20(fp)
 8021458:	10c00017 	ldw	r3,0(r2)
 802145c:	e0bff117 	ldw	r2,-60(fp)
 8021460:	100b883a 	mov	r5,r2
 8021464:	1809883a 	mov	r4,r3
 8021468:	8025ba40 	call	8025ba4 <__addsf3>
 802146c:	1009883a 	mov	r4,r2
 8021470:	2007883a 	mov	r3,r4
 8021474:	e0bffb17 	ldw	r2,-20(fp)
 8021478:	10c00015 	stw	r3,0(r2)
 802147c:	e0bffb17 	ldw	r2,-20(fp)
 8021480:	10c00117 	ldw	r3,4(r2)
 8021484:	e0bff217 	ldw	r2,-56(fp)
 8021488:	100b883a 	mov	r5,r2
 802148c:	1809883a 	mov	r4,r3
 8021490:	8025ba40 	call	8025ba4 <__addsf3>
 8021494:	1009883a 	mov	r4,r2
 8021498:	2007883a 	mov	r3,r4
 802149c:	e0bffb17 	ldw	r2,-20(fp)
 80214a0:	10c00115 	stw	r3,4(r2)
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 80214a4:	e0bfef17 	ldw	r2,-68(fp)
 80214a8:	e0fff317 	ldw	r3,-52(fp)
 80214ac:	180b883a 	mov	r5,r3
 80214b0:	1009883a 	mov	r4,r2
 80214b4:	8025ba40 	call	8025ba4 <__addsf3>
 80214b8:	1007883a 	mov	r3,r2
 80214bc:	1805883a 	mov	r2,r3
 80214c0:	e0bff515 	stw	r2,-44(fp)
 80214c4:	e0bff017 	ldw	r2,-64(fp)
 80214c8:	e0fff417 	ldw	r3,-48(fp)
 80214cc:	180b883a 	mov	r5,r3
 80214d0:	1009883a 	mov	r4,r2
 80214d4:	8025ba40 	call	8025ba4 <__addsf3>
 80214d8:	1007883a 	mov	r3,r2
 80214dc:	1805883a 	mov	r2,r3
 80214e0:	e0bff615 	stw	r2,-40(fp)
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 80214e4:	e0bfef17 	ldw	r2,-68(fp)
 80214e8:	e0fff317 	ldw	r3,-52(fp)
 80214ec:	180b883a 	mov	r5,r3
 80214f0:	1009883a 	mov	r4,r2
 80214f4:	80264680 	call	8026468 <__subsf3>
 80214f8:	1007883a 	mov	r3,r2
 80214fc:	1805883a 	mov	r2,r3
 8021500:	e0bff715 	stw	r2,-36(fp)
 8021504:	e0bff017 	ldw	r2,-64(fp)
 8021508:	e0fff417 	ldw	r3,-48(fp)
 802150c:	180b883a 	mov	r5,r3
 8021510:	1009883a 	mov	r4,r2
 8021514:	80264680 	call	8026468 <__subsf3>
 8021518:	1007883a 	mov	r3,r2
 802151c:	1805883a 	mov	r2,r3
 8021520:	e0bff815 	stw	r2,-32(fp)
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8021524:	e0bfed17 	ldw	r2,-76(fp)
 8021528:	100490fa 	slli	r2,r2,3
 802152c:	e0fffb17 	ldw	r3,-20(fp)
 8021530:	18a1883a 	add	r16,r3,r2
 8021534:	e0bffb17 	ldw	r2,-20(fp)
 8021538:	10c00017 	ldw	r3,0(r2)
 802153c:	e0bff517 	ldw	r2,-44(fp)
 8021540:	100b883a 	mov	r5,r2
 8021544:	1809883a 	mov	r4,r3
 8021548:	80264680 	call	8026468 <__subsf3>
 802154c:	1007883a 	mov	r3,r2
 8021550:	1805883a 	mov	r2,r3
 8021554:	80800015 	stw	r2,0(r16)
 8021558:	e0bfed17 	ldw	r2,-76(fp)
 802155c:	100490fa 	slli	r2,r2,3
 8021560:	e0fffb17 	ldw	r3,-20(fp)
 8021564:	18a1883a 	add	r16,r3,r2
 8021568:	e0bffb17 	ldw	r2,-20(fp)
 802156c:	10c00117 	ldw	r3,4(r2)
 8021570:	e0bff617 	ldw	r2,-40(fp)
 8021574:	100b883a 	mov	r5,r2
 8021578:	1809883a 	mov	r4,r3
 802157c:	80264680 	call	8026468 <__subsf3>
 8021580:	1007883a 	mov	r3,r2
 8021584:	1805883a 	mov	r2,r3
 8021588:	80800115 	stw	r2,4(r16)
        tw1 += fstride;
 802158c:	e0bffc17 	ldw	r2,-16(fp)
 8021590:	100490fa 	slli	r2,r2,3
 8021594:	e0ffe917 	ldw	r3,-92(fp)
 8021598:	1885883a 	add	r2,r3,r2
 802159c:	e0bfe915 	stw	r2,-92(fp)
        tw2 += fstride*2;
 80215a0:	e0bffc17 	ldw	r2,-16(fp)
 80215a4:	1004913a 	slli	r2,r2,4
 80215a8:	e0ffea17 	ldw	r3,-88(fp)
 80215ac:	1885883a 	add	r2,r3,r2
 80215b0:	e0bfea15 	stw	r2,-88(fp)
        tw3 += fstride*3;
 80215b4:	e0bffc17 	ldw	r2,-16(fp)
 80215b8:	10800624 	muli	r2,r2,24
 80215bc:	e0ffeb17 	ldw	r3,-84(fp)
 80215c0:	1885883a 	add	r2,r3,r2
 80215c4:	e0bfeb15 	stw	r2,-84(fp)
        C_ADDTO( *Fout , scratch[3] );
 80215c8:	e0bffb17 	ldw	r2,-20(fp)
 80215cc:	10c00017 	ldw	r3,0(r2)
 80215d0:	e0bff517 	ldw	r2,-44(fp)
 80215d4:	100b883a 	mov	r5,r2
 80215d8:	1809883a 	mov	r4,r3
 80215dc:	8025ba40 	call	8025ba4 <__addsf3>
 80215e0:	1009883a 	mov	r4,r2
 80215e4:	2007883a 	mov	r3,r4
 80215e8:	e0bffb17 	ldw	r2,-20(fp)
 80215ec:	10c00015 	stw	r3,0(r2)
 80215f0:	e0bffb17 	ldw	r2,-20(fp)
 80215f4:	10c00117 	ldw	r3,4(r2)
 80215f8:	e0bff617 	ldw	r2,-40(fp)
 80215fc:	100b883a 	mov	r5,r2
 8021600:	1809883a 	mov	r4,r3
 8021604:	8025ba40 	call	8025ba4 <__addsf3>
 8021608:	1009883a 	mov	r4,r2
 802160c:	2007883a 	mov	r3,r4
 8021610:	e0bffb17 	ldw	r2,-20(fp)
 8021614:	10c00115 	stw	r3,4(r2)

        if(st->inverse) {
 8021618:	e0bffd17 	ldw	r2,-12(fp)
 802161c:	10800117 	ldw	r2,4(r2)
 8021620:	10003126 	beq	r2,zero,80216e8 <kf_bfly4+0x614>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8021624:	e0bffe17 	ldw	r2,-8(fp)
 8021628:	100490fa 	slli	r2,r2,3
 802162c:	e0fffb17 	ldw	r3,-20(fp)
 8021630:	18a1883a 	add	r16,r3,r2
 8021634:	e0bff917 	ldw	r2,-28(fp)
 8021638:	e0fff817 	ldw	r3,-32(fp)
 802163c:	180b883a 	mov	r5,r3
 8021640:	1009883a 	mov	r4,r2
 8021644:	80264680 	call	8026468 <__subsf3>
 8021648:	1007883a 	mov	r3,r2
 802164c:	1805883a 	mov	r2,r3
 8021650:	80800015 	stw	r2,0(r16)
            Fout[m].i = scratch[5].i + scratch[4].r;
 8021654:	e0bffe17 	ldw	r2,-8(fp)
 8021658:	100490fa 	slli	r2,r2,3
 802165c:	e0fffb17 	ldw	r3,-20(fp)
 8021660:	18a1883a 	add	r16,r3,r2
 8021664:	e0bffa17 	ldw	r2,-24(fp)
 8021668:	e0fff717 	ldw	r3,-36(fp)
 802166c:	180b883a 	mov	r5,r3
 8021670:	1009883a 	mov	r4,r2
 8021674:	8025ba40 	call	8025ba4 <__addsf3>
 8021678:	1007883a 	mov	r3,r2
 802167c:	1805883a 	mov	r2,r3
 8021680:	80800115 	stw	r2,4(r16)
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8021684:	e0bfee17 	ldw	r2,-72(fp)
 8021688:	100490fa 	slli	r2,r2,3
 802168c:	e0fffb17 	ldw	r3,-20(fp)
 8021690:	18a1883a 	add	r16,r3,r2
 8021694:	e0bff917 	ldw	r2,-28(fp)
 8021698:	e0fff817 	ldw	r3,-32(fp)
 802169c:	180b883a 	mov	r5,r3
 80216a0:	1009883a 	mov	r4,r2
 80216a4:	8025ba40 	call	8025ba4 <__addsf3>
 80216a8:	1007883a 	mov	r3,r2
 80216ac:	1805883a 	mov	r2,r3
 80216b0:	80800015 	stw	r2,0(r16)
            Fout[m3].i = scratch[5].i - scratch[4].r;
 80216b4:	e0bfee17 	ldw	r2,-72(fp)
 80216b8:	100490fa 	slli	r2,r2,3
 80216bc:	e0fffb17 	ldw	r3,-20(fp)
 80216c0:	18a1883a 	add	r16,r3,r2
 80216c4:	e0bffa17 	ldw	r2,-24(fp)
 80216c8:	e0fff717 	ldw	r3,-36(fp)
 80216cc:	180b883a 	mov	r5,r3
 80216d0:	1009883a 	mov	r4,r2
 80216d4:	80264680 	call	8026468 <__subsf3>
 80216d8:	1007883a 	mov	r3,r2
 80216dc:	1805883a 	mov	r2,r3
 80216e0:	80800115 	stw	r2,4(r16)
 80216e4:	00003006 	br	80217a8 <kf_bfly4+0x6d4>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 80216e8:	e0bffe17 	ldw	r2,-8(fp)
 80216ec:	100490fa 	slli	r2,r2,3
 80216f0:	e0fffb17 	ldw	r3,-20(fp)
 80216f4:	18a1883a 	add	r16,r3,r2
 80216f8:	e0bff917 	ldw	r2,-28(fp)
 80216fc:	e0fff817 	ldw	r3,-32(fp)
 8021700:	180b883a 	mov	r5,r3
 8021704:	1009883a 	mov	r4,r2
 8021708:	8025ba40 	call	8025ba4 <__addsf3>
 802170c:	1007883a 	mov	r3,r2
 8021710:	1805883a 	mov	r2,r3
 8021714:	80800015 	stw	r2,0(r16)
            Fout[m].i = scratch[5].i - scratch[4].r;
 8021718:	e0bffe17 	ldw	r2,-8(fp)
 802171c:	100490fa 	slli	r2,r2,3
 8021720:	e0fffb17 	ldw	r3,-20(fp)
 8021724:	18a1883a 	add	r16,r3,r2
 8021728:	e0bffa17 	ldw	r2,-24(fp)
 802172c:	e0fff717 	ldw	r3,-36(fp)
 8021730:	180b883a 	mov	r5,r3
 8021734:	1009883a 	mov	r4,r2
 8021738:	80264680 	call	8026468 <__subsf3>
 802173c:	1007883a 	mov	r3,r2
 8021740:	1805883a 	mov	r2,r3
 8021744:	80800115 	stw	r2,4(r16)
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8021748:	e0bfee17 	ldw	r2,-72(fp)
 802174c:	100490fa 	slli	r2,r2,3
 8021750:	e0fffb17 	ldw	r3,-20(fp)
 8021754:	18a1883a 	add	r16,r3,r2
 8021758:	e0bff917 	ldw	r2,-28(fp)
 802175c:	e0fff817 	ldw	r3,-32(fp)
 8021760:	180b883a 	mov	r5,r3
 8021764:	1009883a 	mov	r4,r2
 8021768:	80264680 	call	8026468 <__subsf3>
 802176c:	1007883a 	mov	r3,r2
 8021770:	1805883a 	mov	r2,r3
 8021774:	80800015 	stw	r2,0(r16)
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8021778:	e0bfee17 	ldw	r2,-72(fp)
 802177c:	100490fa 	slli	r2,r2,3
 8021780:	e0fffb17 	ldw	r3,-20(fp)
 8021784:	18a1883a 	add	r16,r3,r2
 8021788:	e0bffa17 	ldw	r2,-24(fp)
 802178c:	e0fff717 	ldw	r3,-36(fp)
 8021790:	180b883a 	mov	r5,r3
 8021794:	1009883a 	mov	r4,r2
 8021798:	8025ba40 	call	8025ba4 <__addsf3>
 802179c:	1007883a 	mov	r3,r2
 80217a0:	1805883a 	mov	r2,r3
 80217a4:	80800115 	stw	r2,4(r16)
        }
        ++Fout;
 80217a8:	e0bffb17 	ldw	r2,-20(fp)
 80217ac:	10800204 	addi	r2,r2,8
 80217b0:	e0bffb15 	stw	r2,-20(fp)
    }while(--k);
 80217b4:	e0bfec17 	ldw	r2,-80(fp)
 80217b8:	10bfffc4 	addi	r2,r2,-1
 80217bc:	e0bfec15 	stw	r2,-80(fp)
 80217c0:	e0bfec17 	ldw	r2,-80(fp)
 80217c4:	103e5d1e 	bne	r2,zero,802113c <_gp+0xfffdfa30>
}
 80217c8:	0001883a 	nop
 80217cc:	e6ffff04 	addi	sp,fp,-4
 80217d0:	dfc00217 	ldw	ra,8(sp)
 80217d4:	df000117 	ldw	fp,4(sp)
 80217d8:	dc000017 	ldw	r16,0(sp)
 80217dc:	dec00304 	addi	sp,sp,12
 80217e0:	f800283a 	ret

080217e4 <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 80217e4:	deffe704 	addi	sp,sp,-100
 80217e8:	dfc01815 	stw	ra,96(sp)
 80217ec:	df001715 	stw	fp,92(sp)
 80217f0:	dc801615 	stw	r18,88(sp)
 80217f4:	dc401515 	stw	r17,84(sp)
 80217f8:	dc001415 	stw	r16,80(sp)
 80217fc:	df001704 	addi	fp,sp,92
 8021800:	e13ff915 	stw	r4,-28(fp)
 8021804:	e17ffa15 	stw	r5,-24(fp)
 8021808:	e1bffb15 	stw	r6,-20(fp)
 802180c:	e1fffc15 	stw	r7,-16(fp)
     size_t k=m;
 8021810:	e0bffc17 	ldw	r2,-16(fp)
 8021814:	e0bfe915 	stw	r2,-92(fp)
     const size_t m2 = 2*m;
 8021818:	e0bffc17 	ldw	r2,-16(fp)
 802181c:	1085883a 	add	r2,r2,r2
 8021820:	e0bfec15 	stw	r2,-80(fp)
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8021824:	e0fffa17 	ldw	r3,-24(fp)
 8021828:	e0bffc17 	ldw	r2,-16(fp)
 802182c:	1885383a 	mul	r2,r3,r2
 8021830:	e0fffb17 	ldw	r3,-20(fp)
 8021834:	10800844 	addi	r2,r2,33
 8021838:	100490fa 	slli	r2,r2,3
 802183c:	1885883a 	add	r2,r3,r2
 8021840:	10c00017 	ldw	r3,0(r2)
 8021844:	e0fff715 	stw	r3,-36(fp)
 8021848:	10800117 	ldw	r2,4(r2)
 802184c:	e0bff815 	stw	r2,-32(fp)

     tw1=tw2=st->twiddles;
 8021850:	e0bffb17 	ldw	r2,-20(fp)
 8021854:	10804204 	addi	r2,r2,264
 8021858:	e0bfeb15 	stw	r2,-84(fp)
 802185c:	e0bfeb17 	ldw	r2,-84(fp)
 8021860:	e0bfea15 	stw	r2,-88(fp)

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8021864:	e0bffc17 	ldw	r2,-16(fp)
 8021868:	100490fa 	slli	r2,r2,3
 802186c:	e0fff917 	ldw	r3,-28(fp)
 8021870:	1885883a 	add	r2,r3,r2
 8021874:	10c00017 	ldw	r3,0(r2)
 8021878:	e0bfea17 	ldw	r2,-88(fp)
 802187c:	11000017 	ldw	r4,0(r2)
 8021880:	200b883a 	mov	r5,r4
 8021884:	1809883a 	mov	r4,r3
 8021888:	802606c0 	call	802606c <__mulsf3>
 802188c:	1007883a 	mov	r3,r2
 8021890:	1821883a 	mov	r16,r3
 8021894:	e0bffc17 	ldw	r2,-16(fp)
 8021898:	100490fa 	slli	r2,r2,3
 802189c:	e0fff917 	ldw	r3,-28(fp)
 80218a0:	1885883a 	add	r2,r3,r2
 80218a4:	10c00117 	ldw	r3,4(r2)
 80218a8:	e0bfea17 	ldw	r2,-88(fp)
 80218ac:	11000117 	ldw	r4,4(r2)
 80218b0:	200b883a 	mov	r5,r4
 80218b4:	1809883a 	mov	r4,r3
 80218b8:	802606c0 	call	802606c <__mulsf3>
 80218bc:	1007883a 	mov	r3,r2
 80218c0:	1805883a 	mov	r2,r3
 80218c4:	100b883a 	mov	r5,r2
 80218c8:	8009883a 	mov	r4,r16
 80218cc:	80264680 	call	8026468 <__subsf3>
 80218d0:	1007883a 	mov	r3,r2
 80218d4:	1805883a 	mov	r2,r3
 80218d8:	e0bfef15 	stw	r2,-68(fp)
 80218dc:	e0bffc17 	ldw	r2,-16(fp)
 80218e0:	100490fa 	slli	r2,r2,3
 80218e4:	e0fff917 	ldw	r3,-28(fp)
 80218e8:	1885883a 	add	r2,r3,r2
 80218ec:	10c00017 	ldw	r3,0(r2)
 80218f0:	e0bfea17 	ldw	r2,-88(fp)
 80218f4:	11000117 	ldw	r4,4(r2)
 80218f8:	200b883a 	mov	r5,r4
 80218fc:	1809883a 	mov	r4,r3
 8021900:	802606c0 	call	802606c <__mulsf3>
 8021904:	1007883a 	mov	r3,r2
 8021908:	1821883a 	mov	r16,r3
 802190c:	e0bffc17 	ldw	r2,-16(fp)
 8021910:	100490fa 	slli	r2,r2,3
 8021914:	e0fff917 	ldw	r3,-28(fp)
 8021918:	1885883a 	add	r2,r3,r2
 802191c:	10c00117 	ldw	r3,4(r2)
 8021920:	e0bfea17 	ldw	r2,-88(fp)
 8021924:	11000017 	ldw	r4,0(r2)
 8021928:	200b883a 	mov	r5,r4
 802192c:	1809883a 	mov	r4,r3
 8021930:	802606c0 	call	802606c <__mulsf3>
 8021934:	1007883a 	mov	r3,r2
 8021938:	1805883a 	mov	r2,r3
 802193c:	100b883a 	mov	r5,r2
 8021940:	8009883a 	mov	r4,r16
 8021944:	8025ba40 	call	8025ba4 <__addsf3>
 8021948:	1007883a 	mov	r3,r2
 802194c:	1805883a 	mov	r2,r3
 8021950:	e0bff015 	stw	r2,-64(fp)
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8021954:	e0bfec17 	ldw	r2,-80(fp)
 8021958:	100490fa 	slli	r2,r2,3
 802195c:	e0fff917 	ldw	r3,-28(fp)
 8021960:	1885883a 	add	r2,r3,r2
 8021964:	10c00017 	ldw	r3,0(r2)
 8021968:	e0bfeb17 	ldw	r2,-84(fp)
 802196c:	11000017 	ldw	r4,0(r2)
 8021970:	200b883a 	mov	r5,r4
 8021974:	1809883a 	mov	r4,r3
 8021978:	802606c0 	call	802606c <__mulsf3>
 802197c:	1007883a 	mov	r3,r2
 8021980:	1821883a 	mov	r16,r3
 8021984:	e0bfec17 	ldw	r2,-80(fp)
 8021988:	100490fa 	slli	r2,r2,3
 802198c:	e0fff917 	ldw	r3,-28(fp)
 8021990:	1885883a 	add	r2,r3,r2
 8021994:	10c00117 	ldw	r3,4(r2)
 8021998:	e0bfeb17 	ldw	r2,-84(fp)
 802199c:	11000117 	ldw	r4,4(r2)
 80219a0:	200b883a 	mov	r5,r4
 80219a4:	1809883a 	mov	r4,r3
 80219a8:	802606c0 	call	802606c <__mulsf3>
 80219ac:	1007883a 	mov	r3,r2
 80219b0:	1805883a 	mov	r2,r3
 80219b4:	100b883a 	mov	r5,r2
 80219b8:	8009883a 	mov	r4,r16
 80219bc:	80264680 	call	8026468 <__subsf3>
 80219c0:	1007883a 	mov	r3,r2
 80219c4:	1805883a 	mov	r2,r3
 80219c8:	e0bff115 	stw	r2,-60(fp)
 80219cc:	e0bfec17 	ldw	r2,-80(fp)
 80219d0:	100490fa 	slli	r2,r2,3
 80219d4:	e0fff917 	ldw	r3,-28(fp)
 80219d8:	1885883a 	add	r2,r3,r2
 80219dc:	10c00017 	ldw	r3,0(r2)
 80219e0:	e0bfeb17 	ldw	r2,-84(fp)
 80219e4:	11000117 	ldw	r4,4(r2)
 80219e8:	200b883a 	mov	r5,r4
 80219ec:	1809883a 	mov	r4,r3
 80219f0:	802606c0 	call	802606c <__mulsf3>
 80219f4:	1007883a 	mov	r3,r2
 80219f8:	1821883a 	mov	r16,r3
 80219fc:	e0bfec17 	ldw	r2,-80(fp)
 8021a00:	100490fa 	slli	r2,r2,3
 8021a04:	e0fff917 	ldw	r3,-28(fp)
 8021a08:	1885883a 	add	r2,r3,r2
 8021a0c:	10c00117 	ldw	r3,4(r2)
 8021a10:	e0bfeb17 	ldw	r2,-84(fp)
 8021a14:	11000017 	ldw	r4,0(r2)
 8021a18:	200b883a 	mov	r5,r4
 8021a1c:	1809883a 	mov	r4,r3
 8021a20:	802606c0 	call	802606c <__mulsf3>
 8021a24:	1007883a 	mov	r3,r2
 8021a28:	1805883a 	mov	r2,r3
 8021a2c:	100b883a 	mov	r5,r2
 8021a30:	8009883a 	mov	r4,r16
 8021a34:	8025ba40 	call	8025ba4 <__addsf3>
 8021a38:	1007883a 	mov	r3,r2
 8021a3c:	1805883a 	mov	r2,r3
 8021a40:	e0bff215 	stw	r2,-56(fp)

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8021a44:	e0bfef17 	ldw	r2,-68(fp)
 8021a48:	e0fff117 	ldw	r3,-60(fp)
 8021a4c:	180b883a 	mov	r5,r3
 8021a50:	1009883a 	mov	r4,r2
 8021a54:	8025ba40 	call	8025ba4 <__addsf3>
 8021a58:	1007883a 	mov	r3,r2
 8021a5c:	1805883a 	mov	r2,r3
 8021a60:	e0bff315 	stw	r2,-52(fp)
 8021a64:	e0bff017 	ldw	r2,-64(fp)
 8021a68:	e0fff217 	ldw	r3,-56(fp)
 8021a6c:	180b883a 	mov	r5,r3
 8021a70:	1009883a 	mov	r4,r2
 8021a74:	8025ba40 	call	8025ba4 <__addsf3>
 8021a78:	1007883a 	mov	r3,r2
 8021a7c:	1805883a 	mov	r2,r3
 8021a80:	e0bff415 	stw	r2,-48(fp)
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8021a84:	e0bfef17 	ldw	r2,-68(fp)
 8021a88:	e0fff117 	ldw	r3,-60(fp)
 8021a8c:	180b883a 	mov	r5,r3
 8021a90:	1009883a 	mov	r4,r2
 8021a94:	80264680 	call	8026468 <__subsf3>
 8021a98:	1007883a 	mov	r3,r2
 8021a9c:	1805883a 	mov	r2,r3
 8021aa0:	e0bfed15 	stw	r2,-76(fp)
 8021aa4:	e0bff017 	ldw	r2,-64(fp)
 8021aa8:	e0fff217 	ldw	r3,-56(fp)
 8021aac:	180b883a 	mov	r5,r3
 8021ab0:	1009883a 	mov	r4,r2
 8021ab4:	80264680 	call	8026468 <__subsf3>
 8021ab8:	1007883a 	mov	r3,r2
 8021abc:	1805883a 	mov	r2,r3
 8021ac0:	e0bfee15 	stw	r2,-72(fp)
         tw1 += fstride;
 8021ac4:	e0bffa17 	ldw	r2,-24(fp)
 8021ac8:	100490fa 	slli	r2,r2,3
 8021acc:	e0ffea17 	ldw	r3,-88(fp)
 8021ad0:	1885883a 	add	r2,r3,r2
 8021ad4:	e0bfea15 	stw	r2,-88(fp)
         tw2 += fstride*2;
 8021ad8:	e0bffa17 	ldw	r2,-24(fp)
 8021adc:	1004913a 	slli	r2,r2,4
 8021ae0:	e0ffeb17 	ldw	r3,-84(fp)
 8021ae4:	1885883a 	add	r2,r3,r2
 8021ae8:	e0bfeb15 	stw	r2,-84(fp)

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8021aec:	e0bffc17 	ldw	r2,-16(fp)
 8021af0:	100490fa 	slli	r2,r2,3
 8021af4:	e0fff917 	ldw	r3,-28(fp)
 8021af8:	18a5883a 	add	r18,r3,r2
 8021afc:	e0bff917 	ldw	r2,-28(fp)
 8021b00:	10c00017 	ldw	r3,0(r2)
 8021b04:	1809883a 	mov	r4,r3
 8021b08:	80290e40 	call	80290e4 <__extendsfdf2>
 8021b0c:	1021883a 	mov	r16,r2
 8021b10:	1823883a 	mov	r17,r3
 8021b14:	e0bff317 	ldw	r2,-52(fp)
 8021b18:	1009883a 	mov	r4,r2
 8021b1c:	80290e40 	call	80290e4 <__extendsfdf2>
 8021b20:	1011883a 	mov	r8,r2
 8021b24:	1813883a 	mov	r9,r3
 8021b28:	000d883a 	mov	r6,zero
 8021b2c:	01cff834 	movhi	r7,16352
 8021b30:	4009883a 	mov	r4,r8
 8021b34:	480b883a 	mov	r5,r9
 8021b38:	8027ecc0 	call	8027ecc <__muldf3>
 8021b3c:	1009883a 	mov	r4,r2
 8021b40:	180b883a 	mov	r5,r3
 8021b44:	2005883a 	mov	r2,r4
 8021b48:	2807883a 	mov	r3,r5
 8021b4c:	100d883a 	mov	r6,r2
 8021b50:	180f883a 	mov	r7,r3
 8021b54:	8009883a 	mov	r4,r16
 8021b58:	880b883a 	mov	r5,r17
 8021b5c:	80285e40 	call	80285e4 <__subdf3>
 8021b60:	1009883a 	mov	r4,r2
 8021b64:	180b883a 	mov	r5,r3
 8021b68:	2005883a 	mov	r2,r4
 8021b6c:	2807883a 	mov	r3,r5
 8021b70:	1009883a 	mov	r4,r2
 8021b74:	180b883a 	mov	r5,r3
 8021b78:	80291f40 	call	80291f4 <__truncdfsf2>
 8021b7c:	1007883a 	mov	r3,r2
 8021b80:	90c00015 	stw	r3,0(r18)
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8021b84:	e0bffc17 	ldw	r2,-16(fp)
 8021b88:	100490fa 	slli	r2,r2,3
 8021b8c:	e0fff917 	ldw	r3,-28(fp)
 8021b90:	18a5883a 	add	r18,r3,r2
 8021b94:	e0bff917 	ldw	r2,-28(fp)
 8021b98:	10c00117 	ldw	r3,4(r2)
 8021b9c:	1809883a 	mov	r4,r3
 8021ba0:	80290e40 	call	80290e4 <__extendsfdf2>
 8021ba4:	1021883a 	mov	r16,r2
 8021ba8:	1823883a 	mov	r17,r3
 8021bac:	e0bff417 	ldw	r2,-48(fp)
 8021bb0:	1009883a 	mov	r4,r2
 8021bb4:	80290e40 	call	80290e4 <__extendsfdf2>
 8021bb8:	1011883a 	mov	r8,r2
 8021bbc:	1813883a 	mov	r9,r3
 8021bc0:	000d883a 	mov	r6,zero
 8021bc4:	01cff834 	movhi	r7,16352
 8021bc8:	4009883a 	mov	r4,r8
 8021bcc:	480b883a 	mov	r5,r9
 8021bd0:	8027ecc0 	call	8027ecc <__muldf3>
 8021bd4:	1009883a 	mov	r4,r2
 8021bd8:	180b883a 	mov	r5,r3
 8021bdc:	2005883a 	mov	r2,r4
 8021be0:	2807883a 	mov	r3,r5
 8021be4:	100d883a 	mov	r6,r2
 8021be8:	180f883a 	mov	r7,r3
 8021bec:	8009883a 	mov	r4,r16
 8021bf0:	880b883a 	mov	r5,r17
 8021bf4:	80285e40 	call	80285e4 <__subdf3>
 8021bf8:	1009883a 	mov	r4,r2
 8021bfc:	180b883a 	mov	r5,r3
 8021c00:	2005883a 	mov	r2,r4
 8021c04:	2807883a 	mov	r3,r5
 8021c08:	1009883a 	mov	r4,r2
 8021c0c:	180b883a 	mov	r5,r3
 8021c10:	80291f40 	call	80291f4 <__truncdfsf2>
 8021c14:	1007883a 	mov	r3,r2
 8021c18:	90c00115 	stw	r3,4(r18)

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8021c1c:	e0bfed17 	ldw	r2,-76(fp)
 8021c20:	e0fff817 	ldw	r3,-32(fp)
 8021c24:	180b883a 	mov	r5,r3
 8021c28:	1009883a 	mov	r4,r2
 8021c2c:	802606c0 	call	802606c <__mulsf3>
 8021c30:	1007883a 	mov	r3,r2
 8021c34:	1805883a 	mov	r2,r3
 8021c38:	e0bfed15 	stw	r2,-76(fp)
 8021c3c:	e0bfee17 	ldw	r2,-72(fp)
 8021c40:	e0fff817 	ldw	r3,-32(fp)
 8021c44:	180b883a 	mov	r5,r3
 8021c48:	1009883a 	mov	r4,r2
 8021c4c:	802606c0 	call	802606c <__mulsf3>
 8021c50:	1007883a 	mov	r3,r2
 8021c54:	1805883a 	mov	r2,r3
 8021c58:	e0bfee15 	stw	r2,-72(fp)

         C_ADDTO(*Fout,scratch[3]);
 8021c5c:	e0bff917 	ldw	r2,-28(fp)
 8021c60:	10c00017 	ldw	r3,0(r2)
 8021c64:	e0bff317 	ldw	r2,-52(fp)
 8021c68:	100b883a 	mov	r5,r2
 8021c6c:	1809883a 	mov	r4,r3
 8021c70:	8025ba40 	call	8025ba4 <__addsf3>
 8021c74:	1009883a 	mov	r4,r2
 8021c78:	2007883a 	mov	r3,r4
 8021c7c:	e0bff917 	ldw	r2,-28(fp)
 8021c80:	10c00015 	stw	r3,0(r2)
 8021c84:	e0bff917 	ldw	r2,-28(fp)
 8021c88:	10c00117 	ldw	r3,4(r2)
 8021c8c:	e0bff417 	ldw	r2,-48(fp)
 8021c90:	100b883a 	mov	r5,r2
 8021c94:	1809883a 	mov	r4,r3
 8021c98:	8025ba40 	call	8025ba4 <__addsf3>
 8021c9c:	1009883a 	mov	r4,r2
 8021ca0:	2007883a 	mov	r3,r4
 8021ca4:	e0bff917 	ldw	r2,-28(fp)
 8021ca8:	10c00115 	stw	r3,4(r2)

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8021cac:	e0bfec17 	ldw	r2,-80(fp)
 8021cb0:	100490fa 	slli	r2,r2,3
 8021cb4:	e0fff917 	ldw	r3,-28(fp)
 8021cb8:	18a1883a 	add	r16,r3,r2
 8021cbc:	e0bffc17 	ldw	r2,-16(fp)
 8021cc0:	100490fa 	slli	r2,r2,3
 8021cc4:	e0fff917 	ldw	r3,-28(fp)
 8021cc8:	1885883a 	add	r2,r3,r2
 8021ccc:	10c00017 	ldw	r3,0(r2)
 8021cd0:	e0bfee17 	ldw	r2,-72(fp)
 8021cd4:	100b883a 	mov	r5,r2
 8021cd8:	1809883a 	mov	r4,r3
 8021cdc:	8025ba40 	call	8025ba4 <__addsf3>
 8021ce0:	1007883a 	mov	r3,r2
 8021ce4:	1805883a 	mov	r2,r3
 8021ce8:	80800015 	stw	r2,0(r16)
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8021cec:	e0bfec17 	ldw	r2,-80(fp)
 8021cf0:	100490fa 	slli	r2,r2,3
 8021cf4:	e0fff917 	ldw	r3,-28(fp)
 8021cf8:	18a1883a 	add	r16,r3,r2
 8021cfc:	e0bffc17 	ldw	r2,-16(fp)
 8021d00:	100490fa 	slli	r2,r2,3
 8021d04:	e0fff917 	ldw	r3,-28(fp)
 8021d08:	1885883a 	add	r2,r3,r2
 8021d0c:	10c00117 	ldw	r3,4(r2)
 8021d10:	e0bfed17 	ldw	r2,-76(fp)
 8021d14:	100b883a 	mov	r5,r2
 8021d18:	1809883a 	mov	r4,r3
 8021d1c:	80264680 	call	8026468 <__subsf3>
 8021d20:	1007883a 	mov	r3,r2
 8021d24:	1805883a 	mov	r2,r3
 8021d28:	80800115 	stw	r2,4(r16)

         Fout[m].r -= scratch[0].i;
 8021d2c:	e0bffc17 	ldw	r2,-16(fp)
 8021d30:	100490fa 	slli	r2,r2,3
 8021d34:	e0fff917 	ldw	r3,-28(fp)
 8021d38:	18a1883a 	add	r16,r3,r2
 8021d3c:	e0bffc17 	ldw	r2,-16(fp)
 8021d40:	100490fa 	slli	r2,r2,3
 8021d44:	e0fff917 	ldw	r3,-28(fp)
 8021d48:	1885883a 	add	r2,r3,r2
 8021d4c:	10c00017 	ldw	r3,0(r2)
 8021d50:	e0bfee17 	ldw	r2,-72(fp)
 8021d54:	100b883a 	mov	r5,r2
 8021d58:	1809883a 	mov	r4,r3
 8021d5c:	80264680 	call	8026468 <__subsf3>
 8021d60:	1007883a 	mov	r3,r2
 8021d64:	1805883a 	mov	r2,r3
 8021d68:	80800015 	stw	r2,0(r16)
         Fout[m].i += scratch[0].r;
 8021d6c:	e0bffc17 	ldw	r2,-16(fp)
 8021d70:	100490fa 	slli	r2,r2,3
 8021d74:	e0fff917 	ldw	r3,-28(fp)
 8021d78:	18a1883a 	add	r16,r3,r2
 8021d7c:	e0bffc17 	ldw	r2,-16(fp)
 8021d80:	100490fa 	slli	r2,r2,3
 8021d84:	e0fff917 	ldw	r3,-28(fp)
 8021d88:	1885883a 	add	r2,r3,r2
 8021d8c:	10c00117 	ldw	r3,4(r2)
 8021d90:	e0bfed17 	ldw	r2,-76(fp)
 8021d94:	100b883a 	mov	r5,r2
 8021d98:	1809883a 	mov	r4,r3
 8021d9c:	8025ba40 	call	8025ba4 <__addsf3>
 8021da0:	1007883a 	mov	r3,r2
 8021da4:	1805883a 	mov	r2,r3
 8021da8:	80800115 	stw	r2,4(r16)

         ++Fout;
 8021dac:	e0bff917 	ldw	r2,-28(fp)
 8021db0:	10800204 	addi	r2,r2,8
 8021db4:	e0bff915 	stw	r2,-28(fp)
     }while(--k);
 8021db8:	e0bfe917 	ldw	r2,-92(fp)
 8021dbc:	10bfffc4 	addi	r2,r2,-1
 8021dc0:	e0bfe915 	stw	r2,-92(fp)
 8021dc4:	e0bfe917 	ldw	r2,-92(fp)
 8021dc8:	103ea61e 	bne	r2,zero,8021864 <_gp+0xfffe0158>
}
 8021dcc:	0001883a 	nop
 8021dd0:	e6fffd04 	addi	sp,fp,-12
 8021dd4:	dfc00417 	ldw	ra,16(sp)
 8021dd8:	df000317 	ldw	fp,12(sp)
 8021ddc:	dc800217 	ldw	r18,8(sp)
 8021de0:	dc400117 	ldw	r17,4(sp)
 8021de4:	dc000017 	ldw	r16,0(sp)
 8021de8:	dec00504 	addi	sp,sp,20
 8021dec:	f800283a 	ret

08021df0 <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8021df0:	deffd304 	addi	sp,sp,-180
 8021df4:	dfc02c15 	stw	ra,176(sp)
 8021df8:	df002b15 	stw	fp,172(sp)
 8021dfc:	dc002a15 	stw	r16,168(sp)
 8021e00:	df002b04 	addi	fp,sp,172
 8021e04:	e13ffb15 	stw	r4,-20(fp)
 8021e08:	e17ffc15 	stw	r5,-16(fp)
 8021e0c:	e1bffd15 	stw	r6,-12(fp)
 8021e10:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8021e14:	e0bffd17 	ldw	r2,-12(fp)
 8021e18:	10804204 	addi	r2,r2,264
 8021e1c:	e0bfdb15 	stw	r2,-148(fp)
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8021e20:	e0fffe17 	ldw	r3,-8(fp)
 8021e24:	e0bffc17 	ldw	r2,-16(fp)
 8021e28:	1885383a 	mul	r2,r3,r2
 8021e2c:	100490fa 	slli	r2,r2,3
 8021e30:	e0ffdb17 	ldw	r3,-148(fp)
 8021e34:	1885883a 	add	r2,r3,r2
 8021e38:	10c00017 	ldw	r3,0(r2)
 8021e3c:	e0fff715 	stw	r3,-36(fp)
 8021e40:	10800117 	ldw	r2,4(r2)
 8021e44:	e0bff815 	stw	r2,-32(fp)
    yb = twiddles[fstride*2*m];
 8021e48:	e0fffe17 	ldw	r3,-8(fp)
 8021e4c:	e0bffc17 	ldw	r2,-16(fp)
 8021e50:	1885383a 	mul	r2,r3,r2
 8021e54:	1004913a 	slli	r2,r2,4
 8021e58:	e0ffdb17 	ldw	r3,-148(fp)
 8021e5c:	1885883a 	add	r2,r3,r2
 8021e60:	10c00017 	ldw	r3,0(r2)
 8021e64:	e0fff915 	stw	r3,-28(fp)
 8021e68:	10800117 	ldw	r2,4(r2)
 8021e6c:	e0bffa15 	stw	r2,-24(fp)

    Fout0=Fout;
 8021e70:	e0bffb17 	ldw	r2,-20(fp)
 8021e74:	e0bfd515 	stw	r2,-172(fp)
    Fout1=Fout0+m;
 8021e78:	e0bffe17 	ldw	r2,-8(fp)
 8021e7c:	100490fa 	slli	r2,r2,3
 8021e80:	e0ffd517 	ldw	r3,-172(fp)
 8021e84:	1885883a 	add	r2,r3,r2
 8021e88:	e0bfd615 	stw	r2,-168(fp)
    Fout2=Fout0+2*m;
 8021e8c:	e0bffe17 	ldw	r2,-8(fp)
 8021e90:	1004913a 	slli	r2,r2,4
 8021e94:	1007883a 	mov	r3,r2
 8021e98:	e0bfd517 	ldw	r2,-172(fp)
 8021e9c:	10c5883a 	add	r2,r2,r3
 8021ea0:	e0bfd715 	stw	r2,-164(fp)
    Fout3=Fout0+3*m;
 8021ea4:	e0bffe17 	ldw	r2,-8(fp)
 8021ea8:	10800624 	muli	r2,r2,24
 8021eac:	1007883a 	mov	r3,r2
 8021eb0:	e0bfd517 	ldw	r2,-172(fp)
 8021eb4:	10c5883a 	add	r2,r2,r3
 8021eb8:	e0bfd815 	stw	r2,-160(fp)
    Fout4=Fout0+4*m;
 8021ebc:	e0bffe17 	ldw	r2,-8(fp)
 8021ec0:	1004917a 	slli	r2,r2,5
 8021ec4:	1007883a 	mov	r3,r2
 8021ec8:	e0bfd517 	ldw	r2,-172(fp)
 8021ecc:	10c5883a 	add	r2,r2,r3
 8021ed0:	e0bfd915 	stw	r2,-156(fp)

    tw=st->twiddles;
 8021ed4:	e0bffd17 	ldw	r2,-12(fp)
 8021ed8:	10804204 	addi	r2,r2,264
 8021edc:	e0bfdc15 	stw	r2,-144(fp)
    for ( u=0; u<m; ++u ) {
 8021ee0:	e03fda15 	stw	zero,-152(fp)
 8021ee4:	00027806 	br	80228c8 <kf_bfly5+0xad8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8021ee8:	e0bfd517 	ldw	r2,-172(fp)
 8021eec:	10c00017 	ldw	r3,0(r2)
 8021ef0:	e0ffdd15 	stw	r3,-140(fp)
 8021ef4:	10800117 	ldw	r2,4(r2)
 8021ef8:	e0bfde15 	stw	r2,-136(fp)

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8021efc:	e0bfd617 	ldw	r2,-168(fp)
 8021f00:	11000017 	ldw	r4,0(r2)
 8021f04:	e0ffda17 	ldw	r3,-152(fp)
 8021f08:	e0bffc17 	ldw	r2,-16(fp)
 8021f0c:	1885383a 	mul	r2,r3,r2
 8021f10:	100490fa 	slli	r2,r2,3
 8021f14:	e0ffdc17 	ldw	r3,-144(fp)
 8021f18:	1885883a 	add	r2,r3,r2
 8021f1c:	10c00017 	ldw	r3,0(r2)
 8021f20:	180b883a 	mov	r5,r3
 8021f24:	802606c0 	call	802606c <__mulsf3>
 8021f28:	1007883a 	mov	r3,r2
 8021f2c:	1821883a 	mov	r16,r3
 8021f30:	e0bfd617 	ldw	r2,-168(fp)
 8021f34:	11000117 	ldw	r4,4(r2)
 8021f38:	e0ffda17 	ldw	r3,-152(fp)
 8021f3c:	e0bffc17 	ldw	r2,-16(fp)
 8021f40:	1885383a 	mul	r2,r3,r2
 8021f44:	100490fa 	slli	r2,r2,3
 8021f48:	e0ffdc17 	ldw	r3,-144(fp)
 8021f4c:	1885883a 	add	r2,r3,r2
 8021f50:	10c00117 	ldw	r3,4(r2)
 8021f54:	180b883a 	mov	r5,r3
 8021f58:	802606c0 	call	802606c <__mulsf3>
 8021f5c:	1007883a 	mov	r3,r2
 8021f60:	1805883a 	mov	r2,r3
 8021f64:	100b883a 	mov	r5,r2
 8021f68:	8009883a 	mov	r4,r16
 8021f6c:	80264680 	call	8026468 <__subsf3>
 8021f70:	1007883a 	mov	r3,r2
 8021f74:	1805883a 	mov	r2,r3
 8021f78:	e0bfdf15 	stw	r2,-132(fp)
 8021f7c:	e0bfd617 	ldw	r2,-168(fp)
 8021f80:	11000017 	ldw	r4,0(r2)
 8021f84:	e0ffda17 	ldw	r3,-152(fp)
 8021f88:	e0bffc17 	ldw	r2,-16(fp)
 8021f8c:	1885383a 	mul	r2,r3,r2
 8021f90:	100490fa 	slli	r2,r2,3
 8021f94:	e0ffdc17 	ldw	r3,-144(fp)
 8021f98:	1885883a 	add	r2,r3,r2
 8021f9c:	10c00117 	ldw	r3,4(r2)
 8021fa0:	180b883a 	mov	r5,r3
 8021fa4:	802606c0 	call	802606c <__mulsf3>
 8021fa8:	1007883a 	mov	r3,r2
 8021fac:	1821883a 	mov	r16,r3
 8021fb0:	e0bfd617 	ldw	r2,-168(fp)
 8021fb4:	11000117 	ldw	r4,4(r2)
 8021fb8:	e0ffda17 	ldw	r3,-152(fp)
 8021fbc:	e0bffc17 	ldw	r2,-16(fp)
 8021fc0:	1885383a 	mul	r2,r3,r2
 8021fc4:	100490fa 	slli	r2,r2,3
 8021fc8:	e0ffdc17 	ldw	r3,-144(fp)
 8021fcc:	1885883a 	add	r2,r3,r2
 8021fd0:	10c00017 	ldw	r3,0(r2)
 8021fd4:	180b883a 	mov	r5,r3
 8021fd8:	802606c0 	call	802606c <__mulsf3>
 8021fdc:	1007883a 	mov	r3,r2
 8021fe0:	1805883a 	mov	r2,r3
 8021fe4:	100b883a 	mov	r5,r2
 8021fe8:	8009883a 	mov	r4,r16
 8021fec:	8025ba40 	call	8025ba4 <__addsf3>
 8021ff0:	1007883a 	mov	r3,r2
 8021ff4:	1805883a 	mov	r2,r3
 8021ff8:	e0bfe015 	stw	r2,-128(fp)
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8021ffc:	e0bfd717 	ldw	r2,-164(fp)
 8022000:	11000017 	ldw	r4,0(r2)
 8022004:	e0ffda17 	ldw	r3,-152(fp)
 8022008:	e0bffc17 	ldw	r2,-16(fp)
 802200c:	1885383a 	mul	r2,r3,r2
 8022010:	1004913a 	slli	r2,r2,4
 8022014:	e0ffdc17 	ldw	r3,-144(fp)
 8022018:	1885883a 	add	r2,r3,r2
 802201c:	10c00017 	ldw	r3,0(r2)
 8022020:	180b883a 	mov	r5,r3
 8022024:	802606c0 	call	802606c <__mulsf3>
 8022028:	1007883a 	mov	r3,r2
 802202c:	1821883a 	mov	r16,r3
 8022030:	e0bfd717 	ldw	r2,-164(fp)
 8022034:	11000117 	ldw	r4,4(r2)
 8022038:	e0ffda17 	ldw	r3,-152(fp)
 802203c:	e0bffc17 	ldw	r2,-16(fp)
 8022040:	1885383a 	mul	r2,r3,r2
 8022044:	1004913a 	slli	r2,r2,4
 8022048:	e0ffdc17 	ldw	r3,-144(fp)
 802204c:	1885883a 	add	r2,r3,r2
 8022050:	10c00117 	ldw	r3,4(r2)
 8022054:	180b883a 	mov	r5,r3
 8022058:	802606c0 	call	802606c <__mulsf3>
 802205c:	1007883a 	mov	r3,r2
 8022060:	1805883a 	mov	r2,r3
 8022064:	100b883a 	mov	r5,r2
 8022068:	8009883a 	mov	r4,r16
 802206c:	80264680 	call	8026468 <__subsf3>
 8022070:	1007883a 	mov	r3,r2
 8022074:	1805883a 	mov	r2,r3
 8022078:	e0bfe115 	stw	r2,-124(fp)
 802207c:	e0bfd717 	ldw	r2,-164(fp)
 8022080:	11000017 	ldw	r4,0(r2)
 8022084:	e0ffda17 	ldw	r3,-152(fp)
 8022088:	e0bffc17 	ldw	r2,-16(fp)
 802208c:	1885383a 	mul	r2,r3,r2
 8022090:	1004913a 	slli	r2,r2,4
 8022094:	e0ffdc17 	ldw	r3,-144(fp)
 8022098:	1885883a 	add	r2,r3,r2
 802209c:	10c00117 	ldw	r3,4(r2)
 80220a0:	180b883a 	mov	r5,r3
 80220a4:	802606c0 	call	802606c <__mulsf3>
 80220a8:	1007883a 	mov	r3,r2
 80220ac:	1821883a 	mov	r16,r3
 80220b0:	e0bfd717 	ldw	r2,-164(fp)
 80220b4:	11000117 	ldw	r4,4(r2)
 80220b8:	e0ffda17 	ldw	r3,-152(fp)
 80220bc:	e0bffc17 	ldw	r2,-16(fp)
 80220c0:	1885383a 	mul	r2,r3,r2
 80220c4:	1004913a 	slli	r2,r2,4
 80220c8:	e0ffdc17 	ldw	r3,-144(fp)
 80220cc:	1885883a 	add	r2,r3,r2
 80220d0:	10c00017 	ldw	r3,0(r2)
 80220d4:	180b883a 	mov	r5,r3
 80220d8:	802606c0 	call	802606c <__mulsf3>
 80220dc:	1007883a 	mov	r3,r2
 80220e0:	1805883a 	mov	r2,r3
 80220e4:	100b883a 	mov	r5,r2
 80220e8:	8009883a 	mov	r4,r16
 80220ec:	8025ba40 	call	8025ba4 <__addsf3>
 80220f0:	1007883a 	mov	r3,r2
 80220f4:	1805883a 	mov	r2,r3
 80220f8:	e0bfe215 	stw	r2,-120(fp)
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 80220fc:	e0bfd817 	ldw	r2,-160(fp)
 8022100:	11000017 	ldw	r4,0(r2)
 8022104:	e0ffda17 	ldw	r3,-152(fp)
 8022108:	e0bffc17 	ldw	r2,-16(fp)
 802210c:	1885383a 	mul	r2,r3,r2
 8022110:	10800624 	muli	r2,r2,24
 8022114:	e0ffdc17 	ldw	r3,-144(fp)
 8022118:	1885883a 	add	r2,r3,r2
 802211c:	10c00017 	ldw	r3,0(r2)
 8022120:	180b883a 	mov	r5,r3
 8022124:	802606c0 	call	802606c <__mulsf3>
 8022128:	1007883a 	mov	r3,r2
 802212c:	1821883a 	mov	r16,r3
 8022130:	e0bfd817 	ldw	r2,-160(fp)
 8022134:	11000117 	ldw	r4,4(r2)
 8022138:	e0ffda17 	ldw	r3,-152(fp)
 802213c:	e0bffc17 	ldw	r2,-16(fp)
 8022140:	1885383a 	mul	r2,r3,r2
 8022144:	10800624 	muli	r2,r2,24
 8022148:	e0ffdc17 	ldw	r3,-144(fp)
 802214c:	1885883a 	add	r2,r3,r2
 8022150:	10c00117 	ldw	r3,4(r2)
 8022154:	180b883a 	mov	r5,r3
 8022158:	802606c0 	call	802606c <__mulsf3>
 802215c:	1007883a 	mov	r3,r2
 8022160:	1805883a 	mov	r2,r3
 8022164:	100b883a 	mov	r5,r2
 8022168:	8009883a 	mov	r4,r16
 802216c:	80264680 	call	8026468 <__subsf3>
 8022170:	1007883a 	mov	r3,r2
 8022174:	1805883a 	mov	r2,r3
 8022178:	e0bfe315 	stw	r2,-116(fp)
 802217c:	e0bfd817 	ldw	r2,-160(fp)
 8022180:	11000017 	ldw	r4,0(r2)
 8022184:	e0ffda17 	ldw	r3,-152(fp)
 8022188:	e0bffc17 	ldw	r2,-16(fp)
 802218c:	1885383a 	mul	r2,r3,r2
 8022190:	10800624 	muli	r2,r2,24
 8022194:	e0ffdc17 	ldw	r3,-144(fp)
 8022198:	1885883a 	add	r2,r3,r2
 802219c:	10c00117 	ldw	r3,4(r2)
 80221a0:	180b883a 	mov	r5,r3
 80221a4:	802606c0 	call	802606c <__mulsf3>
 80221a8:	1007883a 	mov	r3,r2
 80221ac:	1821883a 	mov	r16,r3
 80221b0:	e0bfd817 	ldw	r2,-160(fp)
 80221b4:	11000117 	ldw	r4,4(r2)
 80221b8:	e0ffda17 	ldw	r3,-152(fp)
 80221bc:	e0bffc17 	ldw	r2,-16(fp)
 80221c0:	1885383a 	mul	r2,r3,r2
 80221c4:	10800624 	muli	r2,r2,24
 80221c8:	e0ffdc17 	ldw	r3,-144(fp)
 80221cc:	1885883a 	add	r2,r3,r2
 80221d0:	10c00017 	ldw	r3,0(r2)
 80221d4:	180b883a 	mov	r5,r3
 80221d8:	802606c0 	call	802606c <__mulsf3>
 80221dc:	1007883a 	mov	r3,r2
 80221e0:	1805883a 	mov	r2,r3
 80221e4:	100b883a 	mov	r5,r2
 80221e8:	8009883a 	mov	r4,r16
 80221ec:	8025ba40 	call	8025ba4 <__addsf3>
 80221f0:	1007883a 	mov	r3,r2
 80221f4:	1805883a 	mov	r2,r3
 80221f8:	e0bfe415 	stw	r2,-112(fp)
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 80221fc:	e0bfd917 	ldw	r2,-156(fp)
 8022200:	11000017 	ldw	r4,0(r2)
 8022204:	e0ffda17 	ldw	r3,-152(fp)
 8022208:	e0bffc17 	ldw	r2,-16(fp)
 802220c:	1885383a 	mul	r2,r3,r2
 8022210:	1004917a 	slli	r2,r2,5
 8022214:	e0ffdc17 	ldw	r3,-144(fp)
 8022218:	1885883a 	add	r2,r3,r2
 802221c:	10c00017 	ldw	r3,0(r2)
 8022220:	180b883a 	mov	r5,r3
 8022224:	802606c0 	call	802606c <__mulsf3>
 8022228:	1007883a 	mov	r3,r2
 802222c:	1821883a 	mov	r16,r3
 8022230:	e0bfd917 	ldw	r2,-156(fp)
 8022234:	11000117 	ldw	r4,4(r2)
 8022238:	e0ffda17 	ldw	r3,-152(fp)
 802223c:	e0bffc17 	ldw	r2,-16(fp)
 8022240:	1885383a 	mul	r2,r3,r2
 8022244:	1004917a 	slli	r2,r2,5
 8022248:	e0ffdc17 	ldw	r3,-144(fp)
 802224c:	1885883a 	add	r2,r3,r2
 8022250:	10c00117 	ldw	r3,4(r2)
 8022254:	180b883a 	mov	r5,r3
 8022258:	802606c0 	call	802606c <__mulsf3>
 802225c:	1007883a 	mov	r3,r2
 8022260:	1805883a 	mov	r2,r3
 8022264:	100b883a 	mov	r5,r2
 8022268:	8009883a 	mov	r4,r16
 802226c:	80264680 	call	8026468 <__subsf3>
 8022270:	1007883a 	mov	r3,r2
 8022274:	1805883a 	mov	r2,r3
 8022278:	e0bfe515 	stw	r2,-108(fp)
 802227c:	e0bfd917 	ldw	r2,-156(fp)
 8022280:	11000017 	ldw	r4,0(r2)
 8022284:	e0ffda17 	ldw	r3,-152(fp)
 8022288:	e0bffc17 	ldw	r2,-16(fp)
 802228c:	1885383a 	mul	r2,r3,r2
 8022290:	1004917a 	slli	r2,r2,5
 8022294:	e0ffdc17 	ldw	r3,-144(fp)
 8022298:	1885883a 	add	r2,r3,r2
 802229c:	10c00117 	ldw	r3,4(r2)
 80222a0:	180b883a 	mov	r5,r3
 80222a4:	802606c0 	call	802606c <__mulsf3>
 80222a8:	1007883a 	mov	r3,r2
 80222ac:	1821883a 	mov	r16,r3
 80222b0:	e0bfd917 	ldw	r2,-156(fp)
 80222b4:	11000117 	ldw	r4,4(r2)
 80222b8:	e0ffda17 	ldw	r3,-152(fp)
 80222bc:	e0bffc17 	ldw	r2,-16(fp)
 80222c0:	1885383a 	mul	r2,r3,r2
 80222c4:	1004917a 	slli	r2,r2,5
 80222c8:	e0ffdc17 	ldw	r3,-144(fp)
 80222cc:	1885883a 	add	r2,r3,r2
 80222d0:	10c00017 	ldw	r3,0(r2)
 80222d4:	180b883a 	mov	r5,r3
 80222d8:	802606c0 	call	802606c <__mulsf3>
 80222dc:	1007883a 	mov	r3,r2
 80222e0:	1805883a 	mov	r2,r3
 80222e4:	100b883a 	mov	r5,r2
 80222e8:	8009883a 	mov	r4,r16
 80222ec:	8025ba40 	call	8025ba4 <__addsf3>
 80222f0:	1007883a 	mov	r3,r2
 80222f4:	1805883a 	mov	r2,r3
 80222f8:	e0bfe615 	stw	r2,-104(fp)

        C_ADD( scratch[7],scratch[1],scratch[4]);
 80222fc:	e0bfdf17 	ldw	r2,-132(fp)
 8022300:	e0ffe517 	ldw	r3,-108(fp)
 8022304:	180b883a 	mov	r5,r3
 8022308:	1009883a 	mov	r4,r2
 802230c:	8025ba40 	call	8025ba4 <__addsf3>
 8022310:	1007883a 	mov	r3,r2
 8022314:	1805883a 	mov	r2,r3
 8022318:	e0bfeb15 	stw	r2,-84(fp)
 802231c:	e0bfe017 	ldw	r2,-128(fp)
 8022320:	e0ffe617 	ldw	r3,-104(fp)
 8022324:	180b883a 	mov	r5,r3
 8022328:	1009883a 	mov	r4,r2
 802232c:	8025ba40 	call	8025ba4 <__addsf3>
 8022330:	1007883a 	mov	r3,r2
 8022334:	1805883a 	mov	r2,r3
 8022338:	e0bfec15 	stw	r2,-80(fp)
        C_SUB( scratch[10],scratch[1],scratch[4]);
 802233c:	e0bfdf17 	ldw	r2,-132(fp)
 8022340:	e0ffe517 	ldw	r3,-108(fp)
 8022344:	180b883a 	mov	r5,r3
 8022348:	1009883a 	mov	r4,r2
 802234c:	80264680 	call	8026468 <__subsf3>
 8022350:	1007883a 	mov	r3,r2
 8022354:	1805883a 	mov	r2,r3
 8022358:	e0bff115 	stw	r2,-60(fp)
 802235c:	e0bfe017 	ldw	r2,-128(fp)
 8022360:	e0ffe617 	ldw	r3,-104(fp)
 8022364:	180b883a 	mov	r5,r3
 8022368:	1009883a 	mov	r4,r2
 802236c:	80264680 	call	8026468 <__subsf3>
 8022370:	1007883a 	mov	r3,r2
 8022374:	1805883a 	mov	r2,r3
 8022378:	e0bff215 	stw	r2,-56(fp)
        C_ADD( scratch[8],scratch[2],scratch[3]);
 802237c:	e0bfe117 	ldw	r2,-124(fp)
 8022380:	e0ffe317 	ldw	r3,-116(fp)
 8022384:	180b883a 	mov	r5,r3
 8022388:	1009883a 	mov	r4,r2
 802238c:	8025ba40 	call	8025ba4 <__addsf3>
 8022390:	1007883a 	mov	r3,r2
 8022394:	1805883a 	mov	r2,r3
 8022398:	e0bfed15 	stw	r2,-76(fp)
 802239c:	e0bfe217 	ldw	r2,-120(fp)
 80223a0:	e0ffe417 	ldw	r3,-112(fp)
 80223a4:	180b883a 	mov	r5,r3
 80223a8:	1009883a 	mov	r4,r2
 80223ac:	8025ba40 	call	8025ba4 <__addsf3>
 80223b0:	1007883a 	mov	r3,r2
 80223b4:	1805883a 	mov	r2,r3
 80223b8:	e0bfee15 	stw	r2,-72(fp)
        C_SUB( scratch[9],scratch[2],scratch[3]);
 80223bc:	e0bfe117 	ldw	r2,-124(fp)
 80223c0:	e0ffe317 	ldw	r3,-116(fp)
 80223c4:	180b883a 	mov	r5,r3
 80223c8:	1009883a 	mov	r4,r2
 80223cc:	80264680 	call	8026468 <__subsf3>
 80223d0:	1007883a 	mov	r3,r2
 80223d4:	1805883a 	mov	r2,r3
 80223d8:	e0bfef15 	stw	r2,-68(fp)
 80223dc:	e0bfe217 	ldw	r2,-120(fp)
 80223e0:	e0ffe417 	ldw	r3,-112(fp)
 80223e4:	180b883a 	mov	r5,r3
 80223e8:	1009883a 	mov	r4,r2
 80223ec:	80264680 	call	8026468 <__subsf3>
 80223f0:	1007883a 	mov	r3,r2
 80223f4:	1805883a 	mov	r2,r3
 80223f8:	e0bff015 	stw	r2,-64(fp)

        Fout0->r += scratch[7].r + scratch[8].r;
 80223fc:	e0bfd517 	ldw	r2,-172(fp)
 8022400:	14000017 	ldw	r16,0(r2)
 8022404:	e0bfeb17 	ldw	r2,-84(fp)
 8022408:	e0ffed17 	ldw	r3,-76(fp)
 802240c:	180b883a 	mov	r5,r3
 8022410:	1009883a 	mov	r4,r2
 8022414:	8025ba40 	call	8025ba4 <__addsf3>
 8022418:	1007883a 	mov	r3,r2
 802241c:	1805883a 	mov	r2,r3
 8022420:	100b883a 	mov	r5,r2
 8022424:	8009883a 	mov	r4,r16
 8022428:	8025ba40 	call	8025ba4 <__addsf3>
 802242c:	1009883a 	mov	r4,r2
 8022430:	2007883a 	mov	r3,r4
 8022434:	e0bfd517 	ldw	r2,-172(fp)
 8022438:	10c00015 	stw	r3,0(r2)
        Fout0->i += scratch[7].i + scratch[8].i;
 802243c:	e0bfd517 	ldw	r2,-172(fp)
 8022440:	14000117 	ldw	r16,4(r2)
 8022444:	e0bfec17 	ldw	r2,-80(fp)
 8022448:	e0ffee17 	ldw	r3,-72(fp)
 802244c:	180b883a 	mov	r5,r3
 8022450:	1009883a 	mov	r4,r2
 8022454:	8025ba40 	call	8025ba4 <__addsf3>
 8022458:	1007883a 	mov	r3,r2
 802245c:	1805883a 	mov	r2,r3
 8022460:	100b883a 	mov	r5,r2
 8022464:	8009883a 	mov	r4,r16
 8022468:	8025ba40 	call	8025ba4 <__addsf3>
 802246c:	1009883a 	mov	r4,r2
 8022470:	2007883a 	mov	r3,r4
 8022474:	e0bfd517 	ldw	r2,-172(fp)
 8022478:	10c00115 	stw	r3,4(r2)

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 802247c:	e43fdd17 	ldw	r16,-140(fp)
 8022480:	e0bfeb17 	ldw	r2,-84(fp)
 8022484:	e0fff717 	ldw	r3,-36(fp)
 8022488:	180b883a 	mov	r5,r3
 802248c:	1009883a 	mov	r4,r2
 8022490:	802606c0 	call	802606c <__mulsf3>
 8022494:	1007883a 	mov	r3,r2
 8022498:	1805883a 	mov	r2,r3
 802249c:	100b883a 	mov	r5,r2
 80224a0:	8009883a 	mov	r4,r16
 80224a4:	8025ba40 	call	8025ba4 <__addsf3>
 80224a8:	1007883a 	mov	r3,r2
 80224ac:	1821883a 	mov	r16,r3
 80224b0:	e0bfed17 	ldw	r2,-76(fp)
 80224b4:	e0fff917 	ldw	r3,-28(fp)
 80224b8:	180b883a 	mov	r5,r3
 80224bc:	1009883a 	mov	r4,r2
 80224c0:	802606c0 	call	802606c <__mulsf3>
 80224c4:	1007883a 	mov	r3,r2
 80224c8:	1805883a 	mov	r2,r3
 80224cc:	100b883a 	mov	r5,r2
 80224d0:	8009883a 	mov	r4,r16
 80224d4:	8025ba40 	call	8025ba4 <__addsf3>
 80224d8:	1007883a 	mov	r3,r2
 80224dc:	1805883a 	mov	r2,r3
 80224e0:	e0bfe715 	stw	r2,-100(fp)
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 80224e4:	e43fde17 	ldw	r16,-136(fp)
 80224e8:	e0bfec17 	ldw	r2,-80(fp)
 80224ec:	e0fff717 	ldw	r3,-36(fp)
 80224f0:	180b883a 	mov	r5,r3
 80224f4:	1009883a 	mov	r4,r2
 80224f8:	802606c0 	call	802606c <__mulsf3>
 80224fc:	1007883a 	mov	r3,r2
 8022500:	1805883a 	mov	r2,r3
 8022504:	100b883a 	mov	r5,r2
 8022508:	8009883a 	mov	r4,r16
 802250c:	8025ba40 	call	8025ba4 <__addsf3>
 8022510:	1007883a 	mov	r3,r2
 8022514:	1821883a 	mov	r16,r3
 8022518:	e0bfee17 	ldw	r2,-72(fp)
 802251c:	e0fff917 	ldw	r3,-28(fp)
 8022520:	180b883a 	mov	r5,r3
 8022524:	1009883a 	mov	r4,r2
 8022528:	802606c0 	call	802606c <__mulsf3>
 802252c:	1007883a 	mov	r3,r2
 8022530:	1805883a 	mov	r2,r3
 8022534:	100b883a 	mov	r5,r2
 8022538:	8009883a 	mov	r4,r16
 802253c:	8025ba40 	call	8025ba4 <__addsf3>
 8022540:	1007883a 	mov	r3,r2
 8022544:	1805883a 	mov	r2,r3
 8022548:	e0bfe815 	stw	r2,-96(fp)

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 802254c:	e0bff217 	ldw	r2,-56(fp)
 8022550:	e0fff817 	ldw	r3,-32(fp)
 8022554:	180b883a 	mov	r5,r3
 8022558:	1009883a 	mov	r4,r2
 802255c:	802606c0 	call	802606c <__mulsf3>
 8022560:	1007883a 	mov	r3,r2
 8022564:	1821883a 	mov	r16,r3
 8022568:	e0bff017 	ldw	r2,-64(fp)
 802256c:	e0fffa17 	ldw	r3,-24(fp)
 8022570:	180b883a 	mov	r5,r3
 8022574:	1009883a 	mov	r4,r2
 8022578:	802606c0 	call	802606c <__mulsf3>
 802257c:	1007883a 	mov	r3,r2
 8022580:	1805883a 	mov	r2,r3
 8022584:	100b883a 	mov	r5,r2
 8022588:	8009883a 	mov	r4,r16
 802258c:	8025ba40 	call	8025ba4 <__addsf3>
 8022590:	1007883a 	mov	r3,r2
 8022594:	1805883a 	mov	r2,r3
 8022598:	e0bfe915 	stw	r2,-92(fp)
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 802259c:	e0bff117 	ldw	r2,-60(fp)
 80225a0:	e0fff817 	ldw	r3,-32(fp)
 80225a4:	180b883a 	mov	r5,r3
 80225a8:	1009883a 	mov	r4,r2
 80225ac:	802606c0 	call	802606c <__mulsf3>
 80225b0:	1007883a 	mov	r3,r2
 80225b4:	1805883a 	mov	r2,r3
 80225b8:	1420003c 	xorhi	r16,r2,32768
 80225bc:	e0bfef17 	ldw	r2,-68(fp)
 80225c0:	e0fffa17 	ldw	r3,-24(fp)
 80225c4:	180b883a 	mov	r5,r3
 80225c8:	1009883a 	mov	r4,r2
 80225cc:	802606c0 	call	802606c <__mulsf3>
 80225d0:	1007883a 	mov	r3,r2
 80225d4:	1805883a 	mov	r2,r3
 80225d8:	100b883a 	mov	r5,r2
 80225dc:	8009883a 	mov	r4,r16
 80225e0:	80264680 	call	8026468 <__subsf3>
 80225e4:	1007883a 	mov	r3,r2
 80225e8:	1805883a 	mov	r2,r3
 80225ec:	e0bfea15 	stw	r2,-88(fp)

        C_SUB(*Fout1,scratch[5],scratch[6]);
 80225f0:	e0bfe717 	ldw	r2,-100(fp)
 80225f4:	e0ffe917 	ldw	r3,-92(fp)
 80225f8:	180b883a 	mov	r5,r3
 80225fc:	1009883a 	mov	r4,r2
 8022600:	80264680 	call	8026468 <__subsf3>
 8022604:	1009883a 	mov	r4,r2
 8022608:	2007883a 	mov	r3,r4
 802260c:	e0bfd617 	ldw	r2,-168(fp)
 8022610:	10c00015 	stw	r3,0(r2)
 8022614:	e0bfe817 	ldw	r2,-96(fp)
 8022618:	e0ffea17 	ldw	r3,-88(fp)
 802261c:	180b883a 	mov	r5,r3
 8022620:	1009883a 	mov	r4,r2
 8022624:	80264680 	call	8026468 <__subsf3>
 8022628:	1009883a 	mov	r4,r2
 802262c:	2007883a 	mov	r3,r4
 8022630:	e0bfd617 	ldw	r2,-168(fp)
 8022634:	10c00115 	stw	r3,4(r2)
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8022638:	e0bfe717 	ldw	r2,-100(fp)
 802263c:	e0ffe917 	ldw	r3,-92(fp)
 8022640:	180b883a 	mov	r5,r3
 8022644:	1009883a 	mov	r4,r2
 8022648:	8025ba40 	call	8025ba4 <__addsf3>
 802264c:	1009883a 	mov	r4,r2
 8022650:	2007883a 	mov	r3,r4
 8022654:	e0bfd917 	ldw	r2,-156(fp)
 8022658:	10c00015 	stw	r3,0(r2)
 802265c:	e0bfe817 	ldw	r2,-96(fp)
 8022660:	e0ffea17 	ldw	r3,-88(fp)
 8022664:	180b883a 	mov	r5,r3
 8022668:	1009883a 	mov	r4,r2
 802266c:	8025ba40 	call	8025ba4 <__addsf3>
 8022670:	1009883a 	mov	r4,r2
 8022674:	2007883a 	mov	r3,r4
 8022678:	e0bfd917 	ldw	r2,-156(fp)
 802267c:	10c00115 	stw	r3,4(r2)

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8022680:	e43fdd17 	ldw	r16,-140(fp)
 8022684:	e0bfeb17 	ldw	r2,-84(fp)
 8022688:	e0fff917 	ldw	r3,-28(fp)
 802268c:	180b883a 	mov	r5,r3
 8022690:	1009883a 	mov	r4,r2
 8022694:	802606c0 	call	802606c <__mulsf3>
 8022698:	1007883a 	mov	r3,r2
 802269c:	1805883a 	mov	r2,r3
 80226a0:	100b883a 	mov	r5,r2
 80226a4:	8009883a 	mov	r4,r16
 80226a8:	8025ba40 	call	8025ba4 <__addsf3>
 80226ac:	1007883a 	mov	r3,r2
 80226b0:	1821883a 	mov	r16,r3
 80226b4:	e0bfed17 	ldw	r2,-76(fp)
 80226b8:	e0fff717 	ldw	r3,-36(fp)
 80226bc:	180b883a 	mov	r5,r3
 80226c0:	1009883a 	mov	r4,r2
 80226c4:	802606c0 	call	802606c <__mulsf3>
 80226c8:	1007883a 	mov	r3,r2
 80226cc:	1805883a 	mov	r2,r3
 80226d0:	100b883a 	mov	r5,r2
 80226d4:	8009883a 	mov	r4,r16
 80226d8:	8025ba40 	call	8025ba4 <__addsf3>
 80226dc:	1007883a 	mov	r3,r2
 80226e0:	1805883a 	mov	r2,r3
 80226e4:	e0bff315 	stw	r2,-52(fp)
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 80226e8:	e43fde17 	ldw	r16,-136(fp)
 80226ec:	e0bfec17 	ldw	r2,-80(fp)
 80226f0:	e0fff917 	ldw	r3,-28(fp)
 80226f4:	180b883a 	mov	r5,r3
 80226f8:	1009883a 	mov	r4,r2
 80226fc:	802606c0 	call	802606c <__mulsf3>
 8022700:	1007883a 	mov	r3,r2
 8022704:	1805883a 	mov	r2,r3
 8022708:	100b883a 	mov	r5,r2
 802270c:	8009883a 	mov	r4,r16
 8022710:	8025ba40 	call	8025ba4 <__addsf3>
 8022714:	1007883a 	mov	r3,r2
 8022718:	1821883a 	mov	r16,r3
 802271c:	e0bfee17 	ldw	r2,-72(fp)
 8022720:	e0fff717 	ldw	r3,-36(fp)
 8022724:	180b883a 	mov	r5,r3
 8022728:	1009883a 	mov	r4,r2
 802272c:	802606c0 	call	802606c <__mulsf3>
 8022730:	1007883a 	mov	r3,r2
 8022734:	1805883a 	mov	r2,r3
 8022738:	100b883a 	mov	r5,r2
 802273c:	8009883a 	mov	r4,r16
 8022740:	8025ba40 	call	8025ba4 <__addsf3>
 8022744:	1007883a 	mov	r3,r2
 8022748:	1805883a 	mov	r2,r3
 802274c:	e0bff415 	stw	r2,-48(fp)
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8022750:	e0bff017 	ldw	r2,-64(fp)
 8022754:	e0fff817 	ldw	r3,-32(fp)
 8022758:	180b883a 	mov	r5,r3
 802275c:	1009883a 	mov	r4,r2
 8022760:	802606c0 	call	802606c <__mulsf3>
 8022764:	1007883a 	mov	r3,r2
 8022768:	1821883a 	mov	r16,r3
 802276c:	e0bff217 	ldw	r2,-56(fp)
 8022770:	e0fffa17 	ldw	r3,-24(fp)
 8022774:	180b883a 	mov	r5,r3
 8022778:	1009883a 	mov	r4,r2
 802277c:	802606c0 	call	802606c <__mulsf3>
 8022780:	1007883a 	mov	r3,r2
 8022784:	1805883a 	mov	r2,r3
 8022788:	100b883a 	mov	r5,r2
 802278c:	8009883a 	mov	r4,r16
 8022790:	80264680 	call	8026468 <__subsf3>
 8022794:	1007883a 	mov	r3,r2
 8022798:	1805883a 	mov	r2,r3
 802279c:	e0bff515 	stw	r2,-44(fp)
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 80227a0:	e0bff117 	ldw	r2,-60(fp)
 80227a4:	e0fffa17 	ldw	r3,-24(fp)
 80227a8:	180b883a 	mov	r5,r3
 80227ac:	1009883a 	mov	r4,r2
 80227b0:	802606c0 	call	802606c <__mulsf3>
 80227b4:	1007883a 	mov	r3,r2
 80227b8:	1821883a 	mov	r16,r3
 80227bc:	e0bfef17 	ldw	r2,-68(fp)
 80227c0:	e0fff817 	ldw	r3,-32(fp)
 80227c4:	180b883a 	mov	r5,r3
 80227c8:	1009883a 	mov	r4,r2
 80227cc:	802606c0 	call	802606c <__mulsf3>
 80227d0:	1007883a 	mov	r3,r2
 80227d4:	1805883a 	mov	r2,r3
 80227d8:	100b883a 	mov	r5,r2
 80227dc:	8009883a 	mov	r4,r16
 80227e0:	80264680 	call	8026468 <__subsf3>
 80227e4:	1007883a 	mov	r3,r2
 80227e8:	1805883a 	mov	r2,r3
 80227ec:	e0bff615 	stw	r2,-40(fp)

        C_ADD(*Fout2,scratch[11],scratch[12]);
 80227f0:	e0bff317 	ldw	r2,-52(fp)
 80227f4:	e0fff517 	ldw	r3,-44(fp)
 80227f8:	180b883a 	mov	r5,r3
 80227fc:	1009883a 	mov	r4,r2
 8022800:	8025ba40 	call	8025ba4 <__addsf3>
 8022804:	1009883a 	mov	r4,r2
 8022808:	2007883a 	mov	r3,r4
 802280c:	e0bfd717 	ldw	r2,-164(fp)
 8022810:	10c00015 	stw	r3,0(r2)
 8022814:	e0bff417 	ldw	r2,-48(fp)
 8022818:	e0fff617 	ldw	r3,-40(fp)
 802281c:	180b883a 	mov	r5,r3
 8022820:	1009883a 	mov	r4,r2
 8022824:	8025ba40 	call	8025ba4 <__addsf3>
 8022828:	1009883a 	mov	r4,r2
 802282c:	2007883a 	mov	r3,r4
 8022830:	e0bfd717 	ldw	r2,-164(fp)
 8022834:	10c00115 	stw	r3,4(r2)
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8022838:	e0bff317 	ldw	r2,-52(fp)
 802283c:	e0fff517 	ldw	r3,-44(fp)
 8022840:	180b883a 	mov	r5,r3
 8022844:	1009883a 	mov	r4,r2
 8022848:	80264680 	call	8026468 <__subsf3>
 802284c:	1009883a 	mov	r4,r2
 8022850:	2007883a 	mov	r3,r4
 8022854:	e0bfd817 	ldw	r2,-160(fp)
 8022858:	10c00015 	stw	r3,0(r2)
 802285c:	e0bff417 	ldw	r2,-48(fp)
 8022860:	e0fff617 	ldw	r3,-40(fp)
 8022864:	180b883a 	mov	r5,r3
 8022868:	1009883a 	mov	r4,r2
 802286c:	80264680 	call	8026468 <__subsf3>
 8022870:	1009883a 	mov	r4,r2
 8022874:	2007883a 	mov	r3,r4
 8022878:	e0bfd817 	ldw	r2,-160(fp)
 802287c:	10c00115 	stw	r3,4(r2)

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8022880:	e0bfd517 	ldw	r2,-172(fp)
 8022884:	10800204 	addi	r2,r2,8
 8022888:	e0bfd515 	stw	r2,-172(fp)
 802288c:	e0bfd617 	ldw	r2,-168(fp)
 8022890:	10800204 	addi	r2,r2,8
 8022894:	e0bfd615 	stw	r2,-168(fp)
 8022898:	e0bfd717 	ldw	r2,-164(fp)
 802289c:	10800204 	addi	r2,r2,8
 80228a0:	e0bfd715 	stw	r2,-164(fp)
 80228a4:	e0bfd817 	ldw	r2,-160(fp)
 80228a8:	10800204 	addi	r2,r2,8
 80228ac:	e0bfd815 	stw	r2,-160(fp)
 80228b0:	e0bfd917 	ldw	r2,-156(fp)
 80228b4:	10800204 	addi	r2,r2,8
 80228b8:	e0bfd915 	stw	r2,-156(fp)
    Fout2=Fout0+2*m;
    Fout3=Fout0+3*m;
    Fout4=Fout0+4*m;

    tw=st->twiddles;
    for ( u=0; u<m; ++u ) {
 80228bc:	e0bfda17 	ldw	r2,-152(fp)
 80228c0:	10800044 	addi	r2,r2,1
 80228c4:	e0bfda15 	stw	r2,-152(fp)
 80228c8:	e0ffda17 	ldw	r3,-152(fp)
 80228cc:	e0bffe17 	ldw	r2,-8(fp)
 80228d0:	18bd8516 	blt	r3,r2,8021ee8 <_gp+0xfffe07dc>
        C_ADD(*Fout2,scratch[11],scratch[12]);
        C_SUB(*Fout3,scratch[11],scratch[12]);

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
    }
}
 80228d4:	0001883a 	nop
 80228d8:	e6ffff04 	addi	sp,fp,-4
 80228dc:	dfc00217 	ldw	ra,8(sp)
 80228e0:	df000117 	ldw	fp,4(sp)
 80228e4:	dc000017 	ldw	r16,0(sp)
 80228e8:	dec00304 	addi	sp,sp,12
 80228ec:	f800283a 	ret

080228f0 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 80228f0:	deffef04 	addi	sp,sp,-68
 80228f4:	dfc01015 	stw	ra,64(sp)
 80228f8:	df000f15 	stw	fp,60(sp)
 80228fc:	dc000e15 	stw	r16,56(sp)
 8022900:	df000f04 	addi	fp,sp,60
 8022904:	e13ffb15 	stw	r4,-20(fp)
 8022908:	e17ffc15 	stw	r5,-16(fp)
 802290c:	e1bffd15 	stw	r6,-12(fp)
 8022910:	e1fffe15 	stw	r7,-8(fp)
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8022914:	e0bffd17 	ldw	r2,-12(fp)
 8022918:	10804204 	addi	r2,r2,264
 802291c:	e0bff615 	stw	r2,-40(fp)
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8022920:	e0bffd17 	ldw	r2,-12(fp)
 8022924:	10800017 	ldw	r2,0(r2)
 8022928:	e0bff715 	stw	r2,-36(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 802292c:	e0800217 	ldw	r2,8(fp)
 8022930:	100490fa 	slli	r2,r2,3
 8022934:	1009883a 	mov	r4,r2
 8022938:	80294480 	call	8029448 <malloc>
 802293c:	e0bff815 	stw	r2,-32(fp)

    for ( u=0; u<m; ++u ) {
 8022940:	e03ff115 	stw	zero,-60(fp)
 8022944:	0000af06 	br	8022c04 <kf_bfly_generic+0x314>
        k=u;
 8022948:	e0bff117 	ldw	r2,-60(fp)
 802294c:	e0bff215 	stw	r2,-56(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
 8022950:	e03ff315 	stw	zero,-52(fp)
 8022954:	00001306 	br	80229a4 <kf_bfly_generic+0xb4>
            scratch[q1] = Fout[ k  ];
 8022958:	e0bff317 	ldw	r2,-52(fp)
 802295c:	100490fa 	slli	r2,r2,3
 8022960:	e0fff817 	ldw	r3,-32(fp)
 8022964:	1885883a 	add	r2,r3,r2
 8022968:	e0fff217 	ldw	r3,-56(fp)
 802296c:	180690fa 	slli	r3,r3,3
 8022970:	e13ffb17 	ldw	r4,-20(fp)
 8022974:	20c7883a 	add	r3,r4,r3
 8022978:	19000017 	ldw	r4,0(r3)
 802297c:	11000015 	stw	r4,0(r2)
 8022980:	18c00117 	ldw	r3,4(r3)
 8022984:	10c00115 	stw	r3,4(r2)
            C_FIXDIV(scratch[q1],p);
            k += m;
 8022988:	e0fff217 	ldw	r3,-56(fp)
 802298c:	e0bffe17 	ldw	r2,-8(fp)
 8022990:	1885883a 	add	r2,r3,r2
 8022994:	e0bff215 	stw	r2,-56(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);

    for ( u=0; u<m; ++u ) {
        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
 8022998:	e0bff317 	ldw	r2,-52(fp)
 802299c:	10800044 	addi	r2,r2,1
 80229a0:	e0bff315 	stw	r2,-52(fp)
 80229a4:	e0fff317 	ldw	r3,-52(fp)
 80229a8:	e0800217 	ldw	r2,8(fp)
 80229ac:	18bfea16 	blt	r3,r2,8022958 <_gp+0xfffe124c>
            scratch[q1] = Fout[ k  ];
            C_FIXDIV(scratch[q1],p);
            k += m;
        }

        k=u;
 80229b0:	e0bff117 	ldw	r2,-60(fp)
 80229b4:	e0bff215 	stw	r2,-56(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
 80229b8:	e03ff315 	stw	zero,-52(fp)
 80229bc:	00008b06 	br	8022bec <kf_bfly_generic+0x2fc>
            int twidx=0;
 80229c0:	e03ff515 	stw	zero,-44(fp)
            Fout[ k ] = scratch[0];
 80229c4:	e0bff217 	ldw	r2,-56(fp)
 80229c8:	100490fa 	slli	r2,r2,3
 80229cc:	e0fffb17 	ldw	r3,-20(fp)
 80229d0:	1885883a 	add	r2,r3,r2
 80229d4:	e0fff817 	ldw	r3,-32(fp)
 80229d8:	19000017 	ldw	r4,0(r3)
 80229dc:	11000015 	stw	r4,0(r2)
 80229e0:	18c00117 	ldw	r3,4(r3)
 80229e4:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
 80229e8:	00800044 	movi	r2,1
 80229ec:	e0bff415 	stw	r2,-48(fp)
 80229f0:	00007406 	br	8022bc4 <kf_bfly_generic+0x2d4>
                twidx += fstride * k;
 80229f4:	e0fff217 	ldw	r3,-56(fp)
 80229f8:	e0bffc17 	ldw	r2,-16(fp)
 80229fc:	1887383a 	mul	r3,r3,r2
 8022a00:	e0bff517 	ldw	r2,-44(fp)
 8022a04:	1885883a 	add	r2,r3,r2
 8022a08:	e0bff515 	stw	r2,-44(fp)
                if (twidx>=Norig) twidx-=Norig;
 8022a0c:	e0fff517 	ldw	r3,-44(fp)
 8022a10:	e0bff717 	ldw	r2,-36(fp)
 8022a14:	18800416 	blt	r3,r2,8022a28 <kf_bfly_generic+0x138>
 8022a18:	e0fff517 	ldw	r3,-44(fp)
 8022a1c:	e0bff717 	ldw	r2,-36(fp)
 8022a20:	1885c83a 	sub	r2,r3,r2
 8022a24:	e0bff515 	stw	r2,-44(fp)
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8022a28:	e0bff417 	ldw	r2,-48(fp)
 8022a2c:	100490fa 	slli	r2,r2,3
 8022a30:	e0fff817 	ldw	r3,-32(fp)
 8022a34:	1885883a 	add	r2,r3,r2
 8022a38:	11000017 	ldw	r4,0(r2)
 8022a3c:	e0bff517 	ldw	r2,-44(fp)
 8022a40:	100490fa 	slli	r2,r2,3
 8022a44:	e0fff617 	ldw	r3,-40(fp)
 8022a48:	1885883a 	add	r2,r3,r2
 8022a4c:	10c00017 	ldw	r3,0(r2)
 8022a50:	180b883a 	mov	r5,r3
 8022a54:	802606c0 	call	802606c <__mulsf3>
 8022a58:	1007883a 	mov	r3,r2
 8022a5c:	1821883a 	mov	r16,r3
 8022a60:	e0bff417 	ldw	r2,-48(fp)
 8022a64:	100490fa 	slli	r2,r2,3
 8022a68:	e0fff817 	ldw	r3,-32(fp)
 8022a6c:	1885883a 	add	r2,r3,r2
 8022a70:	11000117 	ldw	r4,4(r2)
 8022a74:	e0bff517 	ldw	r2,-44(fp)
 8022a78:	100490fa 	slli	r2,r2,3
 8022a7c:	e0fff617 	ldw	r3,-40(fp)
 8022a80:	1885883a 	add	r2,r3,r2
 8022a84:	10c00117 	ldw	r3,4(r2)
 8022a88:	180b883a 	mov	r5,r3
 8022a8c:	802606c0 	call	802606c <__mulsf3>
 8022a90:	1007883a 	mov	r3,r2
 8022a94:	1805883a 	mov	r2,r3
 8022a98:	100b883a 	mov	r5,r2
 8022a9c:	8009883a 	mov	r4,r16
 8022aa0:	80264680 	call	8026468 <__subsf3>
 8022aa4:	1007883a 	mov	r3,r2
 8022aa8:	1805883a 	mov	r2,r3
 8022aac:	e0bff915 	stw	r2,-28(fp)
 8022ab0:	e0bff417 	ldw	r2,-48(fp)
 8022ab4:	100490fa 	slli	r2,r2,3
 8022ab8:	e0fff817 	ldw	r3,-32(fp)
 8022abc:	1885883a 	add	r2,r3,r2
 8022ac0:	11000017 	ldw	r4,0(r2)
 8022ac4:	e0bff517 	ldw	r2,-44(fp)
 8022ac8:	100490fa 	slli	r2,r2,3
 8022acc:	e0fff617 	ldw	r3,-40(fp)
 8022ad0:	1885883a 	add	r2,r3,r2
 8022ad4:	10c00117 	ldw	r3,4(r2)
 8022ad8:	180b883a 	mov	r5,r3
 8022adc:	802606c0 	call	802606c <__mulsf3>
 8022ae0:	1007883a 	mov	r3,r2
 8022ae4:	1821883a 	mov	r16,r3
 8022ae8:	e0bff417 	ldw	r2,-48(fp)
 8022aec:	100490fa 	slli	r2,r2,3
 8022af0:	e0fff817 	ldw	r3,-32(fp)
 8022af4:	1885883a 	add	r2,r3,r2
 8022af8:	11000117 	ldw	r4,4(r2)
 8022afc:	e0bff517 	ldw	r2,-44(fp)
 8022b00:	100490fa 	slli	r2,r2,3
 8022b04:	e0fff617 	ldw	r3,-40(fp)
 8022b08:	1885883a 	add	r2,r3,r2
 8022b0c:	10c00017 	ldw	r3,0(r2)
 8022b10:	180b883a 	mov	r5,r3
 8022b14:	802606c0 	call	802606c <__mulsf3>
 8022b18:	1007883a 	mov	r3,r2
 8022b1c:	1805883a 	mov	r2,r3
 8022b20:	100b883a 	mov	r5,r2
 8022b24:	8009883a 	mov	r4,r16
 8022b28:	8025ba40 	call	8025ba4 <__addsf3>
 8022b2c:	1007883a 	mov	r3,r2
 8022b30:	1805883a 	mov	r2,r3
 8022b34:	e0bffa15 	stw	r2,-24(fp)
                C_ADDTO( Fout[ k ] ,t);
 8022b38:	e0bff217 	ldw	r2,-56(fp)
 8022b3c:	100490fa 	slli	r2,r2,3
 8022b40:	e0fffb17 	ldw	r3,-20(fp)
 8022b44:	18a1883a 	add	r16,r3,r2
 8022b48:	e0bff217 	ldw	r2,-56(fp)
 8022b4c:	100490fa 	slli	r2,r2,3
 8022b50:	e0fffb17 	ldw	r3,-20(fp)
 8022b54:	1885883a 	add	r2,r3,r2
 8022b58:	10c00017 	ldw	r3,0(r2)
 8022b5c:	e0bff917 	ldw	r2,-28(fp)
 8022b60:	100b883a 	mov	r5,r2
 8022b64:	1809883a 	mov	r4,r3
 8022b68:	8025ba40 	call	8025ba4 <__addsf3>
 8022b6c:	1007883a 	mov	r3,r2
 8022b70:	1805883a 	mov	r2,r3
 8022b74:	80800015 	stw	r2,0(r16)
 8022b78:	e0bff217 	ldw	r2,-56(fp)
 8022b7c:	100490fa 	slli	r2,r2,3
 8022b80:	e0fffb17 	ldw	r3,-20(fp)
 8022b84:	18a1883a 	add	r16,r3,r2
 8022b88:	e0bff217 	ldw	r2,-56(fp)
 8022b8c:	100490fa 	slli	r2,r2,3
 8022b90:	e0fffb17 	ldw	r3,-20(fp)
 8022b94:	1885883a 	add	r2,r3,r2
 8022b98:	10c00117 	ldw	r3,4(r2)
 8022b9c:	e0bffa17 	ldw	r2,-24(fp)
 8022ba0:	100b883a 	mov	r5,r2
 8022ba4:	1809883a 	mov	r4,r3
 8022ba8:	8025ba40 	call	8025ba4 <__addsf3>
 8022bac:	1007883a 	mov	r3,r2
 8022bb0:	1805883a 	mov	r2,r3
 8022bb4:	80800115 	stw	r2,4(r16)

        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
            int twidx=0;
            Fout[ k ] = scratch[0];
            for (q=1;q<p;++q ) {
 8022bb8:	e0bff417 	ldw	r2,-48(fp)
 8022bbc:	10800044 	addi	r2,r2,1
 8022bc0:	e0bff415 	stw	r2,-48(fp)
 8022bc4:	e0fff417 	ldw	r3,-48(fp)
 8022bc8:	e0800217 	ldw	r2,8(fp)
 8022bcc:	18bf8916 	blt	r3,r2,80229f4 <_gp+0xfffe12e8>
                twidx += fstride * k;
                if (twidx>=Norig) twidx-=Norig;
                C_MUL(t,scratch[q] , twiddles[twidx] );
                C_ADDTO( Fout[ k ] ,t);
            }
            k += m;
 8022bd0:	e0fff217 	ldw	r3,-56(fp)
 8022bd4:	e0bffe17 	ldw	r2,-8(fp)
 8022bd8:	1885883a 	add	r2,r3,r2
 8022bdc:	e0bff215 	stw	r2,-56(fp)
            C_FIXDIV(scratch[q1],p);
            k += m;
        }

        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
 8022be0:	e0bff317 	ldw	r2,-52(fp)
 8022be4:	10800044 	addi	r2,r2,1
 8022be8:	e0bff315 	stw	r2,-52(fp)
 8022bec:	e0fff317 	ldw	r3,-52(fp)
 8022bf0:	e0800217 	ldw	r2,8(fp)
 8022bf4:	18bf7216 	blt	r3,r2,80229c0 <_gp+0xfffe12b4>
    kiss_fft_cpx t;
    int Norig = st->nfft;

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);

    for ( u=0; u<m; ++u ) {
 8022bf8:	e0bff117 	ldw	r2,-60(fp)
 8022bfc:	10800044 	addi	r2,r2,1
 8022c00:	e0bff115 	stw	r2,-60(fp)
 8022c04:	e0fff117 	ldw	r3,-60(fp)
 8022c08:	e0bffe17 	ldw	r2,-8(fp)
 8022c0c:	18bf4e16 	blt	r3,r2,8022948 <_gp+0xfffe123c>
                C_ADDTO( Fout[ k ] ,t);
            }
            k += m;
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8022c10:	e13ff817 	ldw	r4,-32(fp)
 8022c14:	802945c0 	call	802945c <free>
}
 8022c18:	0001883a 	nop
 8022c1c:	e6ffff04 	addi	sp,fp,-4
 8022c20:	dfc00217 	ldw	ra,8(sp)
 8022c24:	df000117 	ldw	fp,4(sp)
 8022c28:	dc000017 	ldw	r16,0(sp)
 8022c2c:	dec00304 	addi	sp,sp,12
 8022c30:	f800283a 	ret

08022c34 <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8022c34:	defff404 	addi	sp,sp,-48
 8022c38:	dfc00b15 	stw	ra,44(sp)
 8022c3c:	df000a15 	stw	fp,40(sp)
 8022c40:	df000a04 	addi	fp,sp,40
 8022c44:	e13ffc15 	stw	r4,-16(fp)
 8022c48:	e17ffd15 	stw	r5,-12(fp)
 8022c4c:	e1bffe15 	stw	r6,-8(fp)
 8022c50:	e1ffff15 	stw	r7,-4(fp)
    kiss_fft_cpx * Fout_beg=Fout;
 8022c54:	e0bffc17 	ldw	r2,-16(fp)
 8022c58:	e0bff815 	stw	r2,-32(fp)
    const int p=*factors++; /* the radix  */
 8022c5c:	e0800217 	ldw	r2,8(fp)
 8022c60:	10c00104 	addi	r3,r2,4
 8022c64:	e0c00215 	stw	r3,8(fp)
 8022c68:	10800017 	ldw	r2,0(r2)
 8022c6c:	e0bff915 	stw	r2,-28(fp)
    const int m=*factors++; /* stage's fft length/p */
 8022c70:	e0800217 	ldw	r2,8(fp)
 8022c74:	10c00104 	addi	r3,r2,4
 8022c78:	e0c00215 	stw	r3,8(fp)
 8022c7c:	10800017 	ldw	r2,0(r2)
 8022c80:	e0bffa15 	stw	r2,-24(fp)
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8022c84:	e0fff917 	ldw	r3,-28(fp)
 8022c88:	e0bffa17 	ldw	r2,-24(fp)
 8022c8c:	1885383a 	mul	r2,r3,r2
 8022c90:	100490fa 	slli	r2,r2,3
 8022c94:	e0fffc17 	ldw	r3,-16(fp)
 8022c98:	1885883a 	add	r2,r3,r2
 8022c9c:	e0bffb15 	stw	r2,-20(fp)
        }
        return;
    }
#endif

    if (m==1) {
 8022ca0:	e0bffa17 	ldw	r2,-24(fp)
 8022ca4:	10800058 	cmpnei	r2,r2,1
 8022ca8:	1000141e 	bne	r2,zero,8022cfc <kf_work+0xc8>
        do{
            *Fout = *f;
 8022cac:	e0bffc17 	ldw	r2,-16(fp)
 8022cb0:	e0fffd17 	ldw	r3,-12(fp)
 8022cb4:	19000017 	ldw	r4,0(r3)
 8022cb8:	11000015 	stw	r4,0(r2)
 8022cbc:	18c00117 	ldw	r3,4(r3)
 8022cc0:	10c00115 	stw	r3,4(r2)
            f += fstride*in_stride;
 8022cc4:	e0ffff17 	ldw	r3,-4(fp)
 8022cc8:	e0bffe17 	ldw	r2,-8(fp)
 8022ccc:	1885383a 	mul	r2,r3,r2
 8022cd0:	100490fa 	slli	r2,r2,3
 8022cd4:	e0fffd17 	ldw	r3,-12(fp)
 8022cd8:	1885883a 	add	r2,r3,r2
 8022cdc:	e0bffd15 	stw	r2,-12(fp)
        }while(++Fout != Fout_end );
 8022ce0:	e0bffc17 	ldw	r2,-16(fp)
 8022ce4:	10800204 	addi	r2,r2,8
 8022ce8:	e0bffc15 	stw	r2,-16(fp)
 8022cec:	e0fffc17 	ldw	r3,-16(fp)
 8022cf0:	e0bffb17 	ldw	r2,-20(fp)
 8022cf4:	18bfed1e 	bne	r3,r2,8022cac <_gp+0xfffe15a0>
 8022cf8:	00001b06 	br	8022d68 <kf_work+0x134>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m, 
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8022cfc:	e0fff917 	ldw	r3,-28(fp)
 8022d00:	e0bffe17 	ldw	r2,-8(fp)
 8022d04:	1887383a 	mul	r3,r3,r2
 8022d08:	e0800317 	ldw	r2,12(fp)
 8022d0c:	d8800115 	stw	r2,4(sp)
 8022d10:	e0800217 	ldw	r2,8(fp)
 8022d14:	d8800015 	stw	r2,0(sp)
 8022d18:	e1ffff17 	ldw	r7,-4(fp)
 8022d1c:	180d883a 	mov	r6,r3
 8022d20:	e17ffd17 	ldw	r5,-12(fp)
 8022d24:	e13ffc17 	ldw	r4,-16(fp)
 8022d28:	8022c340 	call	8022c34 <kf_work>
            f += fstride*in_stride;
 8022d2c:	e0ffff17 	ldw	r3,-4(fp)
 8022d30:	e0bffe17 	ldw	r2,-8(fp)
 8022d34:	1885383a 	mul	r2,r3,r2
 8022d38:	100490fa 	slli	r2,r2,3
 8022d3c:	e0fffd17 	ldw	r3,-12(fp)
 8022d40:	1885883a 	add	r2,r3,r2
 8022d44:	e0bffd15 	stw	r2,-12(fp)
        }while( (Fout += m) != Fout_end );
 8022d48:	e0bffa17 	ldw	r2,-24(fp)
 8022d4c:	100490fa 	slli	r2,r2,3
 8022d50:	e0fffc17 	ldw	r3,-16(fp)
 8022d54:	1885883a 	add	r2,r3,r2
 8022d58:	e0bffc15 	stw	r2,-16(fp)
 8022d5c:	e0fffc17 	ldw	r3,-16(fp)
 8022d60:	e0bffb17 	ldw	r2,-20(fp)
 8022d64:	18bfe51e 	bne	r3,r2,8022cfc <_gp+0xfffe15f0>
    }

    Fout=Fout_beg;
 8022d68:	e0bff817 	ldw	r2,-32(fp)
 8022d6c:	e0bffc15 	stw	r2,-16(fp)

    // recombine the p smaller DFTs 
    switch (p) {
 8022d70:	e0bff917 	ldw	r2,-28(fp)
 8022d74:	10c000e0 	cmpeqi	r3,r2,3
 8022d78:	1800101e 	bne	r3,zero,8022dbc <kf_work+0x188>
 8022d7c:	10c00108 	cmpgei	r3,r2,4
 8022d80:	1800031e 	bne	r3,zero,8022d90 <kf_work+0x15c>
 8022d84:	108000a0 	cmpeqi	r2,r2,2
 8022d88:	1000061e 	bne	r2,zero,8022da4 <kf_work+0x170>
 8022d8c:	00001f06 	br	8022e0c <kf_work+0x1d8>
 8022d90:	10c00120 	cmpeqi	r3,r2,4
 8022d94:	1800101e 	bne	r3,zero,8022dd8 <kf_work+0x1a4>
 8022d98:	10800160 	cmpeqi	r2,r2,5
 8022d9c:	1000151e 	bne	r2,zero,8022df4 <kf_work+0x1c0>
 8022da0:	00001a06 	br	8022e0c <kf_work+0x1d8>
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 8022da4:	e1fffa17 	ldw	r7,-24(fp)
 8022da8:	e1800317 	ldw	r6,12(fp)
 8022dac:	e17ffe17 	ldw	r5,-8(fp)
 8022db0:	e13ffc17 	ldw	r4,-16(fp)
 8022db4:	8020ed40 	call	8020ed4 <kf_bfly2>
 8022db8:	00001c06 	br	8022e2c <kf_work+0x1f8>
        case 3: kf_bfly3(Fout,fstride,st,m); break; 
 8022dbc:	e0bffa17 	ldw	r2,-24(fp)
 8022dc0:	100f883a 	mov	r7,r2
 8022dc4:	e1800317 	ldw	r6,12(fp)
 8022dc8:	e17ffe17 	ldw	r5,-8(fp)
 8022dcc:	e13ffc17 	ldw	r4,-16(fp)
 8022dd0:	80217e40 	call	80217e4 <kf_bfly3>
 8022dd4:	00001506 	br	8022e2c <kf_work+0x1f8>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 8022dd8:	e0bffa17 	ldw	r2,-24(fp)
 8022ddc:	100f883a 	mov	r7,r2
 8022de0:	e1800317 	ldw	r6,12(fp)
 8022de4:	e17ffe17 	ldw	r5,-8(fp)
 8022de8:	e13ffc17 	ldw	r4,-16(fp)
 8022dec:	80210d40 	call	80210d4 <kf_bfly4>
 8022df0:	00000e06 	br	8022e2c <kf_work+0x1f8>
        case 5: kf_bfly5(Fout,fstride,st,m); break; 
 8022df4:	e1fffa17 	ldw	r7,-24(fp)
 8022df8:	e1800317 	ldw	r6,12(fp)
 8022dfc:	e17ffe17 	ldw	r5,-8(fp)
 8022e00:	e13ffc17 	ldw	r4,-16(fp)
 8022e04:	8021df00 	call	8021df0 <kf_bfly5>
 8022e08:	00000806 	br	8022e2c <kf_work+0x1f8>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8022e0c:	e0bff917 	ldw	r2,-28(fp)
 8022e10:	d8800015 	stw	r2,0(sp)
 8022e14:	e1fffa17 	ldw	r7,-24(fp)
 8022e18:	e1800317 	ldw	r6,12(fp)
 8022e1c:	e17ffe17 	ldw	r5,-8(fp)
 8022e20:	e13ffc17 	ldw	r4,-16(fp)
 8022e24:	80228f00 	call	80228f0 <kf_bfly_generic>
 8022e28:	0001883a 	nop
    }
}
 8022e2c:	0001883a 	nop
 8022e30:	e037883a 	mov	sp,fp
 8022e34:	dfc00117 	ldw	ra,4(sp)
 8022e38:	df000017 	ldw	fp,0(sp)
 8022e3c:	dec00204 	addi	sp,sp,8
 8022e40:	f800283a 	ret

08022e44 <kf_factor>:
    where 
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static 
void kf_factor(int n,int * facbuf)
{
 8022e44:	defff904 	addi	sp,sp,-28
 8022e48:	dfc00615 	stw	ra,24(sp)
 8022e4c:	df000515 	stw	fp,20(sp)
 8022e50:	df000504 	addi	fp,sp,20
 8022e54:	e13ffe15 	stw	r4,-8(fp)
 8022e58:	e17fff15 	stw	r5,-4(fp)
    int p=4;
 8022e5c:	00800104 	movi	r2,4
 8022e60:	e0bffb15 	stw	r2,-20(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8022e64:	e13ffe17 	ldw	r4,-8(fp)
 8022e68:	8028f600 	call	8028f60 <__floatsidf>
 8022e6c:	100b883a 	mov	r5,r2
 8022e70:	180d883a 	mov	r6,r3
 8022e74:	2809883a 	mov	r4,r5
 8022e78:	300b883a 	mov	r5,r6
 8022e7c:	80237840 	call	8023784 <sqrt>
 8022e80:	100b883a 	mov	r5,r2
 8022e84:	180d883a 	mov	r6,r3
 8022e88:	2809883a 	mov	r4,r5
 8022e8c:	300b883a 	mov	r5,r6
 8022e90:	80234a80 	call	80234a8 <floor>
 8022e94:	e0bffc15 	stw	r2,-16(fp)
 8022e98:	e0fffd15 	stw	r3,-12(fp)

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8022e9c:	00001c06 	br	8022f10 <kf_factor+0xcc>
            switch (p) {
 8022ea0:	e0bffb17 	ldw	r2,-20(fp)
 8022ea4:	10c000a0 	cmpeqi	r3,r2,2
 8022ea8:	1800051e 	bne	r3,zero,8022ec0 <kf_factor+0x7c>
 8022eac:	10800120 	cmpeqi	r2,r2,4
 8022eb0:	10000626 	beq	r2,zero,8022ecc <kf_factor+0x88>
                case 4: p = 2; break;
 8022eb4:	00800084 	movi	r2,2
 8022eb8:	e0bffb15 	stw	r2,-20(fp)
 8022ebc:	00000706 	br	8022edc <kf_factor+0x98>
                case 2: p = 3; break;
 8022ec0:	008000c4 	movi	r2,3
 8022ec4:	e0bffb15 	stw	r2,-20(fp)
 8022ec8:	00000406 	br	8022edc <kf_factor+0x98>
                default: p += 2; break;
 8022ecc:	e0bffb17 	ldw	r2,-20(fp)
 8022ed0:	10800084 	addi	r2,r2,2
 8022ed4:	e0bffb15 	stw	r2,-20(fp)
 8022ed8:	0001883a 	nop
            }
            if (p > floor_sqrt)
 8022edc:	e13ffb17 	ldw	r4,-20(fp)
 8022ee0:	8028f600 	call	8028f60 <__floatsidf>
 8022ee4:	1011883a 	mov	r8,r2
 8022ee8:	1813883a 	mov	r9,r3
 8022eec:	e1bffc17 	ldw	r6,-16(fp)
 8022ef0:	e1fffd17 	ldw	r7,-12(fp)
 8022ef4:	4009883a 	mov	r4,r8
 8022ef8:	480b883a 	mov	r5,r9
 8022efc:	8027cfc0 	call	8027cfc <__gedf2>
 8022f00:	00800116 	blt	zero,r2,8022f08 <kf_factor+0xc4>
 8022f04:	00000206 	br	8022f10 <kf_factor+0xcc>
                p = n;          /* no more factors, skip to end */
 8022f08:	e0bffe17 	ldw	r2,-8(fp)
 8022f0c:	e0bffb15 	stw	r2,-20(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8022f10:	e0bffe17 	ldw	r2,-8(fp)
 8022f14:	e17ffb17 	ldw	r5,-20(fp)
 8022f18:	1009883a 	mov	r4,r2
 8022f1c:	8025a740 	call	8025a74 <__modsi3>
 8022f20:	103fdf1e 	bne	r2,zero,8022ea0 <_gp+0xfffe1794>
                default: p += 2; break;
            }
            if (p > floor_sqrt)
                p = n;          /* no more factors, skip to end */
        }
        n /= p;
 8022f24:	e17ffb17 	ldw	r5,-20(fp)
 8022f28:	e13ffe17 	ldw	r4,-8(fp)
 8022f2c:	80259f00 	call	80259f0 <__divsi3>
 8022f30:	e0bffe15 	stw	r2,-8(fp)
        *facbuf++ = p;
 8022f34:	e0bfff17 	ldw	r2,-4(fp)
 8022f38:	10c00104 	addi	r3,r2,4
 8022f3c:	e0ffff15 	stw	r3,-4(fp)
 8022f40:	e0fffb17 	ldw	r3,-20(fp)
 8022f44:	10c00015 	stw	r3,0(r2)
        *facbuf++ = n;
 8022f48:	e0bfff17 	ldw	r2,-4(fp)
 8022f4c:	10c00104 	addi	r3,r2,4
 8022f50:	e0ffff15 	stw	r3,-4(fp)
 8022f54:	e0fffe17 	ldw	r3,-8(fp)
 8022f58:	10c00015 	stw	r3,0(r2)
    } while (n > 1);
 8022f5c:	e0bffe17 	ldw	r2,-8(fp)
 8022f60:	10800088 	cmpgei	r2,r2,2
 8022f64:	103fea1e 	bne	r2,zero,8022f10 <_gp+0xfffe1804>
}
 8022f68:	0001883a 	nop
 8022f6c:	e037883a 	mov	sp,fp
 8022f70:	dfc00117 	ldw	ra,4(sp)
 8022f74:	df000017 	ldw	fp,0(sp)
 8022f78:	dec00204 	addi	sp,sp,8
 8022f7c:	f800283a 	ret

08022f80 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
 8022f80:	defff104 	addi	sp,sp,-60
 8022f84:	dfc00e15 	stw	ra,56(sp)
 8022f88:	df000d15 	stw	fp,52(sp)
 8022f8c:	dc400c15 	stw	r17,48(sp)
 8022f90:	dc000b15 	stw	r16,44(sp)
 8022f94:	df000d04 	addi	fp,sp,52
 8022f98:	e13ffa15 	stw	r4,-24(fp)
 8022f9c:	e17ffb15 	stw	r5,-20(fp)
 8022fa0:	e1bffc15 	stw	r6,-16(fp)
 8022fa4:	e1fffd15 	stw	r7,-12(fp)
    KISS_FFT_ALIGN_CHECK(mem)

    kiss_fft_cfg st=NULL;
 8022fa8:	e03ff315 	stw	zero,-52(fp)
    size_t memneeded = KISS_FFT_ALIGN_SIZE_UP(sizeof(struct kiss_fft_state)
 8022fac:	e0bffa17 	ldw	r2,-24(fp)
 8022fb0:	10800844 	addi	r2,r2,33
 8022fb4:	100490fa 	slli	r2,r2,3
 8022fb8:	e0bff715 	stw	r2,-36(fp)
        + sizeof(kiss_fft_cpx)*(nfft-1)); /* twiddle factors*/

    if ( lenmem==NULL ) {
 8022fbc:	e0bffd17 	ldw	r2,-12(fp)
 8022fc0:	1000041e 	bne	r2,zero,8022fd4 <kiss_fft_alloc+0x54>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8022fc4:	e13ff717 	ldw	r4,-36(fp)
 8022fc8:	80294480 	call	8029448 <malloc>
 8022fcc:	e0bff315 	stw	r2,-52(fp)
 8022fd0:	00000b06 	br	8023000 <kiss_fft_alloc+0x80>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8022fd4:	e0bffc17 	ldw	r2,-16(fp)
 8022fd8:	10000626 	beq	r2,zero,8022ff4 <kiss_fft_alloc+0x74>
 8022fdc:	e0bffd17 	ldw	r2,-12(fp)
 8022fe0:	10c00017 	ldw	r3,0(r2)
 8022fe4:	e0bff717 	ldw	r2,-36(fp)
 8022fe8:	18800236 	bltu	r3,r2,8022ff4 <kiss_fft_alloc+0x74>
            st = (kiss_fft_cfg)mem;
 8022fec:	e0bffc17 	ldw	r2,-16(fp)
 8022ff0:	e0bff315 	stw	r2,-52(fp)
        *lenmem = memneeded;
 8022ff4:	e0bffd17 	ldw	r2,-12(fp)
 8022ff8:	e0fff717 	ldw	r3,-36(fp)
 8022ffc:	10c00015 	stw	r3,0(r2)
    }
    if (st) {
 8023000:	e0bff317 	ldw	r2,-52(fp)
 8023004:	10006226 	beq	r2,zero,8023190 <kiss_fft_alloc+0x210>
        int i;
        st->nfft=nfft;
 8023008:	e0bff317 	ldw	r2,-52(fp)
 802300c:	e0fffa17 	ldw	r3,-24(fp)
 8023010:	10c00015 	stw	r3,0(r2)
        st->inverse = inverse_fft;
 8023014:	e0bff317 	ldw	r2,-52(fp)
 8023018:	e0fffb17 	ldw	r3,-20(fp)
 802301c:	10c00115 	stw	r3,4(r2)

        for (i=0;i<nfft;++i) {
 8023020:	e03ff415 	stw	zero,-48(fp)
 8023024:	00005206 	br	8023170 <kiss_fft_alloc+0x1f0>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8023028:	00951134 	movhi	r2,21572
 802302c:	108b4604 	addi	r2,r2,11544
 8023030:	e0bff815 	stw	r2,-32(fp)
 8023034:	00900274 	movhi	r2,16393
 8023038:	10887ec4 	addi	r2,r2,8699
 802303c:	e0bff915 	stw	r2,-28(fp)
            double phase = -2*pi*i / nfft;
 8023040:	000d883a 	mov	r6,zero
 8023044:	01f00034 	movhi	r7,49152
 8023048:	e13ff817 	ldw	r4,-32(fp)
 802304c:	e17ff917 	ldw	r5,-28(fp)
 8023050:	8027ecc0 	call	8027ecc <__muldf3>
 8023054:	1009883a 	mov	r4,r2
 8023058:	180b883a 	mov	r5,r3
 802305c:	2021883a 	mov	r16,r4
 8023060:	2823883a 	mov	r17,r5
 8023064:	e13ff417 	ldw	r4,-48(fp)
 8023068:	8028f600 	call	8028f60 <__floatsidf>
 802306c:	1009883a 	mov	r4,r2
 8023070:	180b883a 	mov	r5,r3
 8023074:	200d883a 	mov	r6,r4
 8023078:	280f883a 	mov	r7,r5
 802307c:	8009883a 	mov	r4,r16
 8023080:	880b883a 	mov	r5,r17
 8023084:	8027ecc0 	call	8027ecc <__muldf3>
 8023088:	1009883a 	mov	r4,r2
 802308c:	180b883a 	mov	r5,r3
 8023090:	2021883a 	mov	r16,r4
 8023094:	2823883a 	mov	r17,r5
 8023098:	e13ffa17 	ldw	r4,-24(fp)
 802309c:	8028f600 	call	8028f60 <__floatsidf>
 80230a0:	1009883a 	mov	r4,r2
 80230a4:	180b883a 	mov	r5,r3
 80230a8:	200d883a 	mov	r6,r4
 80230ac:	280f883a 	mov	r7,r5
 80230b0:	8009883a 	mov	r4,r16
 80230b4:	880b883a 	mov	r5,r17
 80230b8:	802738c0 	call	802738c <__divdf3>
 80230bc:	1009883a 	mov	r4,r2
 80230c0:	180b883a 	mov	r5,r3
 80230c4:	e13ff515 	stw	r4,-44(fp)
 80230c8:	e17ff615 	stw	r5,-40(fp)
            if (st->inverse)
 80230cc:	e0bff317 	ldw	r2,-52(fp)
 80230d0:	10800117 	ldw	r2,4(r2)
 80230d4:	10000526 	beq	r2,zero,80230ec <kiss_fft_alloc+0x16c>
                phase *= -1;
 80230d8:	e0bff517 	ldw	r2,-44(fp)
 80230dc:	e0bff515 	stw	r2,-44(fp)
 80230e0:	e0bff617 	ldw	r2,-40(fp)
 80230e4:	10a0003c 	xorhi	r2,r2,32768
 80230e8:	e0bff615 	stw	r2,-40(fp)
            kf_cexp(st->twiddles+i, phase );
 80230ec:	e0bff317 	ldw	r2,-52(fp)
 80230f0:	10c04204 	addi	r3,r2,264
 80230f4:	e0bff417 	ldw	r2,-48(fp)
 80230f8:	100490fa 	slli	r2,r2,3
 80230fc:	18a1883a 	add	r16,r3,r2
 8023100:	e13ff517 	ldw	r4,-44(fp)
 8023104:	e17ff617 	ldw	r5,-40(fp)
 8023108:	80233bc0 	call	80233bc <cos>
 802310c:	100b883a 	mov	r5,r2
 8023110:	180d883a 	mov	r6,r3
 8023114:	2809883a 	mov	r4,r5
 8023118:	300b883a 	mov	r5,r6
 802311c:	80291f40 	call	80291f4 <__truncdfsf2>
 8023120:	1007883a 	mov	r3,r2
 8023124:	80c00015 	stw	r3,0(r16)
 8023128:	e0bff317 	ldw	r2,-52(fp)
 802312c:	10c04204 	addi	r3,r2,264
 8023130:	e0bff417 	ldw	r2,-48(fp)
 8023134:	100490fa 	slli	r2,r2,3
 8023138:	18a1883a 	add	r16,r3,r2
 802313c:	e13ff517 	ldw	r4,-44(fp)
 8023140:	e17ff617 	ldw	r5,-40(fp)
 8023144:	80236940 	call	8023694 <sin>
 8023148:	100b883a 	mov	r5,r2
 802314c:	180d883a 	mov	r6,r3
 8023150:	2809883a 	mov	r4,r5
 8023154:	300b883a 	mov	r5,r6
 8023158:	80291f40 	call	80291f4 <__truncdfsf2>
 802315c:	1007883a 	mov	r3,r2
 8023160:	80c00115 	stw	r3,4(r16)
    if (st) {
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;

        for (i=0;i<nfft;++i) {
 8023164:	e0bff417 	ldw	r2,-48(fp)
 8023168:	10800044 	addi	r2,r2,1
 802316c:	e0bff415 	stw	r2,-48(fp)
 8023170:	e0fff417 	ldw	r3,-48(fp)
 8023174:	e0bffa17 	ldw	r2,-24(fp)
 8023178:	18bfab16 	blt	r3,r2,8023028 <_gp+0xfffe191c>
            if (st->inverse)
                phase *= -1;
            kf_cexp(st->twiddles+i, phase );
        }

        kf_factor(nfft,st->factors);
 802317c:	e0bff317 	ldw	r2,-52(fp)
 8023180:	10800204 	addi	r2,r2,8
 8023184:	100b883a 	mov	r5,r2
 8023188:	e13ffa17 	ldw	r4,-24(fp)
 802318c:	8022e440 	call	8022e44 <kf_factor>
    }
    return st;
 8023190:	e0bff317 	ldw	r2,-52(fp)
}
 8023194:	e6fffe04 	addi	sp,fp,-8
 8023198:	dfc00317 	ldw	ra,12(sp)
 802319c:	df000217 	ldw	fp,8(sp)
 80231a0:	dc400117 	ldw	r17,4(sp)
 80231a4:	dc000017 	ldw	r16,0(sp)
 80231a8:	dec00404 	addi	sp,sp,16
 80231ac:	f800283a 	ret

080231b0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 80231b0:	defff704 	addi	sp,sp,-36
 80231b4:	dfc00815 	stw	ra,32(sp)
 80231b8:	df000715 	stw	fp,28(sp)
 80231bc:	df000704 	addi	fp,sp,28
 80231c0:	e13ffc15 	stw	r4,-16(fp)
 80231c4:	e17ffd15 	stw	r5,-12(fp)
 80231c8:	e1bffe15 	stw	r6,-8(fp)
 80231cc:	e1ffff15 	stw	r7,-4(fp)
    if (fin == fout) {
 80231d0:	e0fffd17 	ldw	r3,-12(fp)
 80231d4:	e0bffe17 	ldw	r2,-8(fp)
 80231d8:	18801a1e 	bne	r3,r2,8023244 <kiss_fft_stride+0x94>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 80231dc:	e0bffc17 	ldw	r2,-16(fp)
 80231e0:	10800017 	ldw	r2,0(r2)
 80231e4:	100490fa 	slli	r2,r2,3
 80231e8:	1009883a 	mov	r4,r2
 80231ec:	80294480 	call	8029448 <malloc>
 80231f0:	e0bffb15 	stw	r2,-20(fp)
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 80231f4:	e0bffc17 	ldw	r2,-16(fp)
 80231f8:	10800204 	addi	r2,r2,8
 80231fc:	e0fffc17 	ldw	r3,-16(fp)
 8023200:	d8c00115 	stw	r3,4(sp)
 8023204:	d8800015 	stw	r2,0(sp)
 8023208:	e1ffff17 	ldw	r7,-4(fp)
 802320c:	01800044 	movi	r6,1
 8023210:	e17ffd17 	ldw	r5,-12(fp)
 8023214:	e13ffb17 	ldw	r4,-20(fp)
 8023218:	8022c340 	call	8022c34 <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 802321c:	e0bffc17 	ldw	r2,-16(fp)
 8023220:	10800017 	ldw	r2,0(r2)
 8023224:	100490fa 	slli	r2,r2,3
 8023228:	100d883a 	mov	r6,r2
 802322c:	e17ffb17 	ldw	r5,-20(fp)
 8023230:	e13ffe17 	ldw	r4,-8(fp)
 8023234:	8029c7c0 	call	8029c7c <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 8023238:	e13ffb17 	ldw	r4,-20(fp)
 802323c:	802945c0 	call	802945c <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8023240:	00000a06 	br	802326c <kiss_fft_stride+0xbc>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
        KISS_FFT_TMP_FREE(tmpbuf);
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8023244:	e0bffc17 	ldw	r2,-16(fp)
 8023248:	10800204 	addi	r2,r2,8
 802324c:	e0fffc17 	ldw	r3,-16(fp)
 8023250:	d8c00115 	stw	r3,4(sp)
 8023254:	d8800015 	stw	r2,0(sp)
 8023258:	e1ffff17 	ldw	r7,-4(fp)
 802325c:	01800044 	movi	r6,1
 8023260:	e17ffd17 	ldw	r5,-12(fp)
 8023264:	e13ffe17 	ldw	r4,-8(fp)
 8023268:	8022c340 	call	8022c34 <kf_work>
    }
}
 802326c:	0001883a 	nop
 8023270:	e037883a 	mov	sp,fp
 8023274:	dfc00117 	ldw	ra,4(sp)
 8023278:	df000017 	ldw	fp,0(sp)
 802327c:	dec00204 	addi	sp,sp,8
 8023280:	f800283a 	ret

08023284 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8023284:	defffb04 	addi	sp,sp,-20
 8023288:	dfc00415 	stw	ra,16(sp)
 802328c:	df000315 	stw	fp,12(sp)
 8023290:	df000304 	addi	fp,sp,12
 8023294:	e13ffd15 	stw	r4,-12(fp)
 8023298:	e17ffe15 	stw	r5,-8(fp)
 802329c:	e1bfff15 	stw	r6,-4(fp)
    kiss_fft_stride(cfg,fin,fout,1);
 80232a0:	01c00044 	movi	r7,1
 80232a4:	e1bfff17 	ldw	r6,-4(fp)
 80232a8:	e17ffe17 	ldw	r5,-8(fp)
 80232ac:	e13ffd17 	ldw	r4,-12(fp)
 80232b0:	80231b00 	call	80231b0 <kiss_fft_stride>
}
 80232b4:	0001883a 	nop
 80232b8:	e037883a 	mov	sp,fp
 80232bc:	dfc00117 	ldw	ra,4(sp)
 80232c0:	df000017 	ldw	fp,0(sp)
 80232c4:	dec00204 	addi	sp,sp,8
 80232c8:	f800283a 	ret

080232cc <kiss_fft_cleanup>:


void kiss_fft_cleanup(void)
{
 80232cc:	deffff04 	addi	sp,sp,-4
 80232d0:	df000015 	stw	fp,0(sp)
 80232d4:	d839883a 	mov	fp,sp
    // nothing needed any more
}
 80232d8:	0001883a 	nop
 80232dc:	e037883a 	mov	sp,fp
 80232e0:	df000017 	ldw	fp,0(sp)
 80232e4:	dec00104 	addi	sp,sp,4
 80232e8:	f800283a 	ret

080232ec <kiss_fft_next_fast_size>:

int kiss_fft_next_fast_size(int n)
{
 80232ec:	defffc04 	addi	sp,sp,-16
 80232f0:	dfc00315 	stw	ra,12(sp)
 80232f4:	df000215 	stw	fp,8(sp)
 80232f8:	df000204 	addi	fp,sp,8
 80232fc:	e13fff15 	stw	r4,-4(fp)
    while(1) {
        int m=n;
 8023300:	e0bfff17 	ldw	r2,-4(fp)
 8023304:	e0bffe15 	stw	r2,-8(fp)
        while ( (m%2) == 0 ) m/=2;
 8023308:	00000506 	br	8023320 <kiss_fft_next_fast_size+0x34>
 802330c:	e0bffe17 	ldw	r2,-8(fp)
 8023310:	1006d7fa 	srli	r3,r2,31
 8023314:	1885883a 	add	r2,r3,r2
 8023318:	1005d07a 	srai	r2,r2,1
 802331c:	e0bffe15 	stw	r2,-8(fp)
 8023320:	e0bffe17 	ldw	r2,-8(fp)
 8023324:	1080004c 	andi	r2,r2,1
 8023328:	103ff826 	beq	r2,zero,802330c <_gp+0xfffe1c00>
        while ( (m%3) == 0 ) m/=3;
 802332c:	00000506 	br	8023344 <kiss_fft_next_fast_size+0x58>
 8023330:	e0bffe17 	ldw	r2,-8(fp)
 8023334:	014000c4 	movi	r5,3
 8023338:	1009883a 	mov	r4,r2
 802333c:	80259f00 	call	80259f0 <__divsi3>
 8023340:	e0bffe15 	stw	r2,-8(fp)
 8023344:	e0bffe17 	ldw	r2,-8(fp)
 8023348:	014000c4 	movi	r5,3
 802334c:	1009883a 	mov	r4,r2
 8023350:	8025a740 	call	8025a74 <__modsi3>
 8023354:	103ff626 	beq	r2,zero,8023330 <_gp+0xfffe1c24>
        while ( (m%5) == 0 ) m/=5;
 8023358:	00000506 	br	8023370 <kiss_fft_next_fast_size+0x84>
 802335c:	e0bffe17 	ldw	r2,-8(fp)
 8023360:	01400144 	movi	r5,5
 8023364:	1009883a 	mov	r4,r2
 8023368:	80259f00 	call	80259f0 <__divsi3>
 802336c:	e0bffe15 	stw	r2,-8(fp)
 8023370:	e0bffe17 	ldw	r2,-8(fp)
 8023374:	01400144 	movi	r5,5
 8023378:	1009883a 	mov	r4,r2
 802337c:	8025a740 	call	8025a74 <__modsi3>
 8023380:	103ff626 	beq	r2,zero,802335c <_gp+0xfffe1c50>
        if (m<=1)
 8023384:	e0bffe17 	ldw	r2,-8(fp)
 8023388:	10800088 	cmpgei	r2,r2,2
 802338c:	10000426 	beq	r2,zero,80233a0 <kiss_fft_next_fast_size+0xb4>
            break; /* n is completely factorable by twos, threes, and fives */
        n++;
 8023390:	e0bfff17 	ldw	r2,-4(fp)
 8023394:	10800044 	addi	r2,r2,1
 8023398:	e0bfff15 	stw	r2,-4(fp)
    }
 802339c:	003fd806 	br	8023300 <_gp+0xfffe1bf4>
        int m=n;
        while ( (m%2) == 0 ) m/=2;
        while ( (m%3) == 0 ) m/=3;
        while ( (m%5) == 0 ) m/=5;
        if (m<=1)
            break; /* n is completely factorable by twos, threes, and fives */
 80233a0:	0001883a 	nop
        n++;
    }
    return n;
 80233a4:	e0bfff17 	ldw	r2,-4(fp)
}
 80233a8:	e037883a 	mov	sp,fp
 80233ac:	dfc00117 	ldw	ra,4(sp)
 80233b0:	df000017 	ldw	fp,0(sp)
 80233b4:	dec00204 	addi	sp,sp,8
 80233b8:	f800283a 	ret

080233bc <cos>:
 80233bc:	00a00034 	movhi	r2,32768
 80233c0:	defffa04 	addi	sp,sp,-24
 80233c4:	10bfffc4 	addi	r2,r2,-1
 80233c8:	00cffa74 	movhi	r3,16361
 80233cc:	dfc00515 	stw	ra,20(sp)
 80233d0:	2884703a 	and	r2,r5,r2
 80233d4:	18c87ec4 	addi	r3,r3,8699
 80233d8:	1880180e 	bge	r3,r2,802343c <cos+0x80>
 80233dc:	00dffc34 	movhi	r3,32752
 80233e0:	18ffffc4 	addi	r3,r3,-1
 80233e4:	1880060e 	bge	r3,r2,8023400 <cos+0x44>
 80233e8:	280f883a 	mov	r7,r5
 80233ec:	200d883a 	mov	r6,r4
 80233f0:	80285e40 	call	80285e4 <__subdf3>
 80233f4:	dfc00517 	ldw	ra,20(sp)
 80233f8:	dec00604 	addi	sp,sp,24
 80233fc:	f800283a 	ret
 8023400:	d9800104 	addi	r6,sp,4
 8023404:	80238b40 	call	80238b4 <__ieee754_rem_pio2>
 8023408:	108000cc 	andi	r2,r2,3
 802340c:	00c00044 	movi	r3,1
 8023410:	10c01726 	beq	r2,r3,8023470 <cos+0xb4>
 8023414:	01000084 	movi	r4,2
 8023418:	11000e26 	beq	r2,r4,8023454 <cos+0x98>
 802341c:	10001c26 	beq	r2,zero,8023490 <cos+0xd4>
 8023420:	d9800317 	ldw	r6,12(sp)
 8023424:	d9c00417 	ldw	r7,16(sp)
 8023428:	d9000117 	ldw	r4,4(sp)
 802342c:	d9400217 	ldw	r5,8(sp)
 8023430:	d8c00015 	stw	r3,0(sp)
 8023434:	80254dc0 	call	80254dc <__kernel_sin>
 8023438:	003fee06 	br	80233f4 <_gp+0xfffe1ce8>
 802343c:	000d883a 	mov	r6,zero
 8023440:	000f883a 	mov	r7,zero
 8023444:	80242a80 	call	80242a8 <__kernel_cos>
 8023448:	dfc00517 	ldw	ra,20(sp)
 802344c:	dec00604 	addi	sp,sp,24
 8023450:	f800283a 	ret
 8023454:	d9800317 	ldw	r6,12(sp)
 8023458:	d9c00417 	ldw	r7,16(sp)
 802345c:	d9000117 	ldw	r4,4(sp)
 8023460:	d9400217 	ldw	r5,8(sp)
 8023464:	80242a80 	call	80242a8 <__kernel_cos>
 8023468:	18e0003c 	xorhi	r3,r3,32768
 802346c:	003fe106 	br	80233f4 <_gp+0xfffe1ce8>
 8023470:	d9800317 	ldw	r6,12(sp)
 8023474:	d9c00417 	ldw	r7,16(sp)
 8023478:	d9000117 	ldw	r4,4(sp)
 802347c:	d9400217 	ldw	r5,8(sp)
 8023480:	d8800015 	stw	r2,0(sp)
 8023484:	80254dc0 	call	80254dc <__kernel_sin>
 8023488:	18e0003c 	xorhi	r3,r3,32768
 802348c:	003fd906 	br	80233f4 <_gp+0xfffe1ce8>
 8023490:	d9800317 	ldw	r6,12(sp)
 8023494:	d9c00417 	ldw	r7,16(sp)
 8023498:	d9000117 	ldw	r4,4(sp)
 802349c:	d9400217 	ldw	r5,8(sp)
 80234a0:	80242a80 	call	80242a8 <__kernel_cos>
 80234a4:	003fd306 	br	80233f4 <_gp+0xfffe1ce8>

080234a8 <floor>:
 80234a8:	2811d53a 	srai	r8,r5,20
 80234ac:	defffa04 	addi	sp,sp,-24
 80234b0:	dcc00315 	stw	r19,12(sp)
 80234b4:	4201ffcc 	andi	r8,r8,2047
 80234b8:	dc800215 	stw	r18,8(sp)
 80234bc:	dc400115 	stw	r17,4(sp)
 80234c0:	dc000015 	stw	r16,0(sp)
 80234c4:	dfc00515 	stw	ra,20(sp)
 80234c8:	dd000415 	stw	r20,16(sp)
 80234cc:	44bf0044 	addi	r18,r8,-1023
 80234d0:	018004c4 	movi	r6,19
 80234d4:	2821883a 	mov	r16,r5
 80234d8:	2005883a 	mov	r2,r4
 80234dc:	280f883a 	mov	r7,r5
 80234e0:	2827883a 	mov	r19,r5
 80234e4:	2023883a 	mov	r17,r4
 80234e8:	34801916 	blt	r6,r18,8023550 <floor+0xa8>
 80234ec:	90003c16 	blt	r18,zero,80235e0 <floor+0x138>
 80234f0:	05000434 	movhi	r20,16
 80234f4:	a53fffc4 	addi	r20,r20,-1
 80234f8:	a4a9d83a 	sra	r20,r20,r18
 80234fc:	2d0c703a 	and	r6,r5,r20
 8023500:	310cb03a 	or	r6,r6,r4
 8023504:	30001626 	beq	r6,zero,8023560 <floor+0xb8>
 8023508:	01a20034 	movhi	r6,34816
 802350c:	01df8e34 	movhi	r7,32312
 8023510:	319d6704 	addi	r6,r6,30108
 8023514:	39f90f04 	addi	r7,r7,-7108
 8023518:	8026ae00 	call	8026ae0 <__adddf3>
 802351c:	000d883a 	mov	r6,zero
 8023520:	000f883a 	mov	r7,zero
 8023524:	1009883a 	mov	r4,r2
 8023528:	180b883a 	mov	r5,r3
 802352c:	8027cfc0 	call	8027cfc <__gedf2>
 8023530:	0080040e 	bge	zero,r2,8023544 <floor+0x9c>
 8023534:	80003c16 	blt	r16,zero,8023628 <floor+0x180>
 8023538:	0520303a 	nor	r16,zero,r20
 802353c:	84e0703a 	and	r16,r16,r19
 8023540:	0023883a 	mov	r17,zero
 8023544:	8805883a 	mov	r2,r17
 8023548:	8007883a 	mov	r3,r16
 802354c:	00000506 	br	8023564 <floor+0xbc>
 8023550:	01800cc4 	movi	r6,51
 8023554:	34800b0e 	bge	r6,r18,8023584 <floor+0xdc>
 8023558:	01810004 	movi	r6,1024
 802355c:	91802f26 	beq	r18,r6,802361c <floor+0x174>
 8023560:	3807883a 	mov	r3,r7
 8023564:	dfc00517 	ldw	ra,20(sp)
 8023568:	dd000417 	ldw	r20,16(sp)
 802356c:	dcc00317 	ldw	r19,12(sp)
 8023570:	dc800217 	ldw	r18,8(sp)
 8023574:	dc400117 	ldw	r17,4(sp)
 8023578:	dc000017 	ldw	r16,0(sp)
 802357c:	dec00604 	addi	sp,sp,24
 8023580:	f800283a 	ret
 8023584:	423efb44 	addi	r8,r8,-1043
 8023588:	053fffc4 	movi	r20,-1
 802358c:	a228d83a 	srl	r20,r20,r8
 8023590:	250c703a 	and	r6,r4,r20
 8023594:	303ff226 	beq	r6,zero,8023560 <_gp+0xfffe1e54>
 8023598:	01a20034 	movhi	r6,34816
 802359c:	01df8e34 	movhi	r7,32312
 80235a0:	319d6704 	addi	r6,r6,30108
 80235a4:	39f90f04 	addi	r7,r7,-7108
 80235a8:	8026ae00 	call	8026ae0 <__adddf3>
 80235ac:	000d883a 	mov	r6,zero
 80235b0:	000f883a 	mov	r7,zero
 80235b4:	1009883a 	mov	r4,r2
 80235b8:	180b883a 	mov	r5,r3
 80235bc:	8027cfc0 	call	8027cfc <__gedf2>
 80235c0:	00bfe00e 	bge	zero,r2,8023544 <_gp+0xfffe1e38>
 80235c4:	80001c16 	blt	r16,zero,8023638 <floor+0x190>
 80235c8:	0510303a 	nor	r8,zero,r20
 80235cc:	9821883a 	mov	r16,r19
 80235d0:	8a22703a 	and	r17,r17,r8
 80235d4:	8805883a 	mov	r2,r17
 80235d8:	8007883a 	mov	r3,r16
 80235dc:	003fe106 	br	8023564 <_gp+0xfffe1e58>
 80235e0:	01a20034 	movhi	r6,34816
 80235e4:	01df8e34 	movhi	r7,32312
 80235e8:	319d6704 	addi	r6,r6,30108
 80235ec:	39f90f04 	addi	r7,r7,-7108
 80235f0:	8026ae00 	call	8026ae0 <__adddf3>
 80235f4:	000d883a 	mov	r6,zero
 80235f8:	000f883a 	mov	r7,zero
 80235fc:	1009883a 	mov	r4,r2
 8023600:	180b883a 	mov	r5,r3
 8023604:	8027cfc0 	call	8027cfc <__gedf2>
 8023608:	00bfce0e 	bge	zero,r2,8023544 <_gp+0xfffe1e38>
 802360c:	80001516 	blt	r16,zero,8023664 <floor+0x1bc>
 8023610:	0023883a 	mov	r17,zero
 8023614:	0021883a 	mov	r16,zero
 8023618:	003fca06 	br	8023544 <_gp+0xfffe1e38>
 802361c:	200d883a 	mov	r6,r4
 8023620:	8026ae00 	call	8026ae0 <__adddf3>
 8023624:	003fcf06 	br	8023564 <_gp+0xfffe1e58>
 8023628:	00800434 	movhi	r2,16
 802362c:	14a5d83a 	sra	r18,r2,r18
 8023630:	84a7883a 	add	r19,r16,r18
 8023634:	003fc006 	br	8023538 <_gp+0xfffe1e2c>
 8023638:	00800504 	movi	r2,20
 802363c:	90801326 	beq	r18,r2,802368c <floor+0x1e4>
 8023640:	00800d04 	movi	r2,52
 8023644:	14a5c83a 	sub	r18,r2,r18
 8023648:	00800044 	movi	r2,1
 802364c:	1484983a 	sll	r2,r2,r18
 8023650:	1445883a 	add	r2,r2,r17
 8023654:	14400b2e 	bgeu	r2,r17,8023684 <floor+0x1dc>
 8023658:	84c00044 	addi	r19,r16,1
 802365c:	1023883a 	mov	r17,r2
 8023660:	003fd906 	br	80235c8 <_gp+0xfffe1ebc>
 8023664:	00a00034 	movhi	r2,32768
 8023668:	10bfffc4 	addi	r2,r2,-1
 802366c:	8084703a 	and	r2,r16,r2
 8023670:	1462b03a 	or	r17,r2,r17
 8023674:	883fb326 	beq	r17,zero,8023544 <_gp+0xfffe1e38>
 8023678:	0023883a 	mov	r17,zero
 802367c:	042ffc34 	movhi	r16,49136
 8023680:	003fb006 	br	8023544 <_gp+0xfffe1e38>
 8023684:	1023883a 	mov	r17,r2
 8023688:	003fcf06 	br	80235c8 <_gp+0xfffe1ebc>
 802368c:	84c00044 	addi	r19,r16,1
 8023690:	003fcd06 	br	80235c8 <_gp+0xfffe1ebc>

08023694 <sin>:
 8023694:	00a00034 	movhi	r2,32768
 8023698:	defffa04 	addi	sp,sp,-24
 802369c:	10bfffc4 	addi	r2,r2,-1
 80236a0:	00cffa74 	movhi	r3,16361
 80236a4:	dfc00515 	stw	ra,20(sp)
 80236a8:	2884703a 	and	r2,r5,r2
 80236ac:	18c87ec4 	addi	r3,r3,8699
 80236b0:	1880180e 	bge	r3,r2,8023714 <sin+0x80>
 80236b4:	00dffc34 	movhi	r3,32752
 80236b8:	18ffffc4 	addi	r3,r3,-1
 80236bc:	1880060e 	bge	r3,r2,80236d8 <sin+0x44>
 80236c0:	280f883a 	mov	r7,r5
 80236c4:	200d883a 	mov	r6,r4
 80236c8:	80285e40 	call	80285e4 <__subdf3>
 80236cc:	dfc00517 	ldw	ra,20(sp)
 80236d0:	dec00604 	addi	sp,sp,24
 80236d4:	f800283a 	ret
 80236d8:	d9800104 	addi	r6,sp,4
 80236dc:	80238b40 	call	80238b4 <__ieee754_rem_pio2>
 80236e0:	108000cc 	andi	r2,r2,3
 80236e4:	00c00044 	movi	r3,1
 80236e8:	10c01926 	beq	r2,r3,8023750 <sin+0xbc>
 80236ec:	01000084 	movi	r4,2
 80236f0:	11000f26 	beq	r2,r4,8023730 <sin+0x9c>
 80236f4:	10001c26 	beq	r2,zero,8023768 <sin+0xd4>
 80236f8:	d9800317 	ldw	r6,12(sp)
 80236fc:	d9c00417 	ldw	r7,16(sp)
 8023700:	d9000117 	ldw	r4,4(sp)
 8023704:	d9400217 	ldw	r5,8(sp)
 8023708:	80242a80 	call	80242a8 <__kernel_cos>
 802370c:	18e0003c 	xorhi	r3,r3,32768
 8023710:	003fee06 	br	80236cc <_gp+0xfffe1fc0>
 8023714:	d8000015 	stw	zero,0(sp)
 8023718:	000d883a 	mov	r6,zero
 802371c:	000f883a 	mov	r7,zero
 8023720:	80254dc0 	call	80254dc <__kernel_sin>
 8023724:	dfc00517 	ldw	ra,20(sp)
 8023728:	dec00604 	addi	sp,sp,24
 802372c:	f800283a 	ret
 8023730:	d9800317 	ldw	r6,12(sp)
 8023734:	d9c00417 	ldw	r7,16(sp)
 8023738:	d9000117 	ldw	r4,4(sp)
 802373c:	d9400217 	ldw	r5,8(sp)
 8023740:	d8c00015 	stw	r3,0(sp)
 8023744:	80254dc0 	call	80254dc <__kernel_sin>
 8023748:	18e0003c 	xorhi	r3,r3,32768
 802374c:	003fdf06 	br	80236cc <_gp+0xfffe1fc0>
 8023750:	d9800317 	ldw	r6,12(sp)
 8023754:	d9c00417 	ldw	r7,16(sp)
 8023758:	d9000117 	ldw	r4,4(sp)
 802375c:	d9400217 	ldw	r5,8(sp)
 8023760:	80242a80 	call	80242a8 <__kernel_cos>
 8023764:	003fd906 	br	80236cc <_gp+0xfffe1fc0>
 8023768:	d9800317 	ldw	r6,12(sp)
 802376c:	d9c00417 	ldw	r7,16(sp)
 8023770:	d9000117 	ldw	r4,4(sp)
 8023774:	d9400217 	ldw	r5,8(sp)
 8023778:	d8c00015 	stw	r3,0(sp)
 802377c:	80254dc0 	call	80254dc <__kernel_sin>
 8023780:	003fd206 	br	80236cc <_gp+0xfffe1fc0>

08023784 <sqrt>:
 8023784:	defff104 	addi	sp,sp,-60
 8023788:	dd000d15 	stw	r20,52(sp)
 802378c:	05020134 	movhi	r20,2052
 8023790:	dcc00c15 	stw	r19,48(sp)
 8023794:	dc800b15 	stw	r18,44(sp)
 8023798:	dc400a15 	stw	r17,40(sp)
 802379c:	dc000915 	stw	r16,36(sp)
 80237a0:	dfc00e15 	stw	ra,56(sp)
 80237a4:	a525c304 	addi	r20,r20,-26868
 80237a8:	2027883a 	mov	r19,r4
 80237ac:	2825883a 	mov	r18,r5
 80237b0:	80240200 	call	8024020 <__ieee754_sqrt>
 80237b4:	1821883a 	mov	r16,r3
 80237b8:	a0c00017 	ldw	r3,0(r20)
 80237bc:	1023883a 	mov	r17,r2
 80237c0:	00bfffc4 	movi	r2,-1
 80237c4:	18800a26 	beq	r3,r2,80237f0 <sqrt+0x6c>
 80237c8:	9809883a 	mov	r4,r19
 80237cc:	900b883a 	mov	r5,r18
 80237d0:	80257bc0 	call	80257bc <__fpclassifyd>
 80237d4:	10000626 	beq	r2,zero,80237f0 <sqrt+0x6c>
 80237d8:	000d883a 	mov	r6,zero
 80237dc:	000f883a 	mov	r7,zero
 80237e0:	9809883a 	mov	r4,r19
 80237e4:	900b883a 	mov	r5,r18
 80237e8:	8027dd80 	call	8027dd8 <__ledf2>
 80237ec:	10000a16 	blt	r2,zero,8023818 <sqrt+0x94>
 80237f0:	8805883a 	mov	r2,r17
 80237f4:	8007883a 	mov	r3,r16
 80237f8:	dfc00e17 	ldw	ra,56(sp)
 80237fc:	dd000d17 	ldw	r20,52(sp)
 8023800:	dcc00c17 	ldw	r19,48(sp)
 8023804:	dc800b17 	ldw	r18,44(sp)
 8023808:	dc400a17 	ldw	r17,40(sp)
 802380c:	dc000917 	ldw	r16,36(sp)
 8023810:	dec00f04 	addi	sp,sp,60
 8023814:	f800283a 	ret
 8023818:	00800044 	movi	r2,1
 802381c:	d8800015 	stw	r2,0(sp)
 8023820:	a4000017 	ldw	r16,0(r20)
 8023824:	008200f4 	movhi	r2,2051
 8023828:	109d7104 	addi	r2,r2,30148
 802382c:	d8800115 	stw	r2,4(sp)
 8023830:	d8000815 	stw	zero,32(sp)
 8023834:	dcc00415 	stw	r19,16(sp)
 8023838:	dc800515 	stw	r18,20(sp)
 802383c:	dcc00215 	stw	r19,8(sp)
 8023840:	dc800315 	stw	r18,12(sp)
 8023844:	80000a1e 	bne	r16,zero,8023870 <sqrt+0xec>
 8023848:	d8000615 	stw	zero,24(sp)
 802384c:	d8000715 	stw	zero,28(sp)
 8023850:	d809883a 	mov	r4,sp
 8023854:	80258300 	call	8025830 <matherr>
 8023858:	10000e26 	beq	r2,zero,8023894 <sqrt+0x110>
 802385c:	d8800817 	ldw	r2,32(sp)
 8023860:	1000101e 	bne	r2,zero,80238a4 <sqrt+0x120>
 8023864:	d8800617 	ldw	r2,24(sp)
 8023868:	d8c00717 	ldw	r3,28(sp)
 802386c:	003fe206 	br	80237f8 <_gp+0xfffe20ec>
 8023870:	000d883a 	mov	r6,zero
 8023874:	000f883a 	mov	r7,zero
 8023878:	0009883a 	mov	r4,zero
 802387c:	000b883a 	mov	r5,zero
 8023880:	802738c0 	call	802738c <__divdf3>
 8023884:	d8800615 	stw	r2,24(sp)
 8023888:	d8c00715 	stw	r3,28(sp)
 802388c:	00800084 	movi	r2,2
 8023890:	80bfef1e 	bne	r16,r2,8023850 <_gp+0xfffe2144>
 8023894:	80294000 	call	8029400 <__errno>
 8023898:	00c00844 	movi	r3,33
 802389c:	10c00015 	stw	r3,0(r2)
 80238a0:	003fee06 	br	802385c <_gp+0xfffe2150>
 80238a4:	80294000 	call	8029400 <__errno>
 80238a8:	d8c00817 	ldw	r3,32(sp)
 80238ac:	10c00015 	stw	r3,0(r2)
 80238b0:	003fec06 	br	8023864 <_gp+0xfffe2158>

080238b4 <__ieee754_rem_pio2>:
 80238b4:	02200034 	movhi	r8,32768
 80238b8:	deffea04 	addi	sp,sp,-88
 80238bc:	423fffc4 	addi	r8,r8,-1
 80238c0:	00cffa74 	movhi	r3,16361
 80238c4:	ddc01315 	stw	r23,76(sp)
 80238c8:	dc400d15 	stw	r17,52(sp)
 80238cc:	dfc01515 	stw	ra,84(sp)
 80238d0:	df001415 	stw	fp,80(sp)
 80238d4:	dd801215 	stw	r22,72(sp)
 80238d8:	dd401115 	stw	r21,68(sp)
 80238dc:	dd001015 	stw	r20,64(sp)
 80238e0:	dcc00f15 	stw	r19,60(sp)
 80238e4:	dc800e15 	stw	r18,56(sp)
 80238e8:	dc000c15 	stw	r16,48(sp)
 80238ec:	2a2e703a 	and	r23,r5,r8
 80238f0:	18c87ec4 	addi	r3,r3,8699
 80238f4:	2823883a 	mov	r17,r5
 80238f8:	1dc0790e 	bge	r3,r23,8023ae0 <__ieee754_rem_pio2+0x22c>
 80238fc:	009000f4 	movhi	r2,16387
 8023900:	10b65ec4 	addi	r2,r2,-9861
 8023904:	3021883a 	mov	r16,r6
 8023908:	2027883a 	mov	r19,r4
 802390c:	15c02316 	blt	r2,r23,802399c <__ieee754_rem_pio2+0xe8>
 8023910:	01cffe74 	movhi	r7,16377
 8023914:	39c87ec4 	addi	r7,r7,8699
 8023918:	01951034 	movhi	r6,21568
 802391c:	01417a0e 	bge	zero,r5,8023f08 <__ieee754_rem_pio2+0x654>
 8023920:	80285e40 	call	80285e4 <__subdf3>
 8023924:	1025883a 	mov	r18,r2
 8023928:	008ffe74 	movhi	r2,16377
 802392c:	10887ec4 	addi	r2,r2,8699
 8023930:	1823883a 	mov	r17,r3
 8023934:	b8808426 	beq	r23,r2,8023b48 <__ieee754_rem_pio2+0x294>
 8023938:	018698b4 	movhi	r6,6754
 802393c:	01cf7474 	movhi	r7,15825
 8023940:	3198cc44 	addi	r6,r6,25393
 8023944:	39ed1844 	addi	r7,r7,-19359
 8023948:	9009883a 	mov	r4,r18
 802394c:	180b883a 	mov	r5,r3
 8023950:	80285e40 	call	80285e4 <__subdf3>
 8023954:	100d883a 	mov	r6,r2
 8023958:	180f883a 	mov	r7,r3
 802395c:	9009883a 	mov	r4,r18
 8023960:	880b883a 	mov	r5,r17
 8023964:	80800015 	stw	r2,0(r16)
 8023968:	80c00115 	stw	r3,4(r16)
 802396c:	80285e40 	call	80285e4 <__subdf3>
 8023970:	018698b4 	movhi	r6,6754
 8023974:	01cf7474 	movhi	r7,15825
 8023978:	3198cc44 	addi	r6,r6,25393
 802397c:	39ed1844 	addi	r7,r7,-19359
 8023980:	1009883a 	mov	r4,r2
 8023984:	180b883a 	mov	r5,r3
 8023988:	80285e40 	call	80285e4 <__subdf3>
 802398c:	80800215 	stw	r2,8(r16)
 8023990:	80c00315 	stw	r3,12(r16)
 8023994:	00800044 	movi	r2,1
 8023998:	00005606 	br	8023af4 <__ieee754_rem_pio2+0x240>
 802399c:	00904e74 	movhi	r2,16697
 80239a0:	10887ec4 	addi	r2,r2,8699
 80239a4:	15c0830e 	bge	r2,r23,8023bb4 <__ieee754_rem_pio2+0x300>
 80239a8:	009ffc34 	movhi	r2,32752
 80239ac:	10bfffc4 	addi	r2,r2,-1
 80239b0:	15c05c16 	blt	r2,r23,8023b24 <__ieee754_rem_pio2+0x270>
 80239b4:	b829d53a 	srai	r20,r23,20
 80239b8:	a53efa84 	addi	r20,r20,-1046
 80239bc:	a024953a 	slli	r18,r20,20
 80239c0:	bca5c83a 	sub	r18,r23,r18
 80239c4:	900b883a 	mov	r5,r18
 80239c8:	8028ee00 	call	8028ee0 <__fixdfsi>
 80239cc:	1009883a 	mov	r4,r2
 80239d0:	8028f600 	call	8028f60 <__floatsidf>
 80239d4:	9809883a 	mov	r4,r19
 80239d8:	900b883a 	mov	r5,r18
 80239dc:	100d883a 	mov	r6,r2
 80239e0:	180f883a 	mov	r7,r3
 80239e4:	d8800215 	stw	r2,8(sp)
 80239e8:	d8c00315 	stw	r3,12(sp)
 80239ec:	80285e40 	call	80285e4 <__subdf3>
 80239f0:	000d883a 	mov	r6,zero
 80239f4:	01d05c34 	movhi	r7,16752
 80239f8:	1009883a 	mov	r4,r2
 80239fc:	180b883a 	mov	r5,r3
 8023a00:	8027ecc0 	call	8027ecc <__muldf3>
 8023a04:	180b883a 	mov	r5,r3
 8023a08:	1009883a 	mov	r4,r2
 8023a0c:	182b883a 	mov	r21,r3
 8023a10:	102d883a 	mov	r22,r2
 8023a14:	8028ee00 	call	8028ee0 <__fixdfsi>
 8023a18:	1009883a 	mov	r4,r2
 8023a1c:	8028f600 	call	8028f60 <__floatsidf>
 8023a20:	100d883a 	mov	r6,r2
 8023a24:	180f883a 	mov	r7,r3
 8023a28:	b009883a 	mov	r4,r22
 8023a2c:	a80b883a 	mov	r5,r21
 8023a30:	1027883a 	mov	r19,r2
 8023a34:	1825883a 	mov	r18,r3
 8023a38:	d8800415 	stw	r2,16(sp)
 8023a3c:	d8c00515 	stw	r3,20(sp)
 8023a40:	80285e40 	call	80285e4 <__subdf3>
 8023a44:	000d883a 	mov	r6,zero
 8023a48:	01d05c34 	movhi	r7,16752
 8023a4c:	1009883a 	mov	r4,r2
 8023a50:	180b883a 	mov	r5,r3
 8023a54:	8027ecc0 	call	8027ecc <__muldf3>
 8023a58:	000d883a 	mov	r6,zero
 8023a5c:	000f883a 	mov	r7,zero
 8023a60:	1009883a 	mov	r4,r2
 8023a64:	180b883a 	mov	r5,r3
 8023a68:	d8800615 	stw	r2,24(sp)
 8023a6c:	d8c00715 	stw	r3,28(sp)
 8023a70:	8027c740 	call	8027c74 <__eqdf2>
 8023a74:	1001431e 	bne	r2,zero,8023f84 <__ieee754_rem_pio2+0x6d0>
 8023a78:	000f883a 	mov	r7,zero
 8023a7c:	000d883a 	mov	r6,zero
 8023a80:	9809883a 	mov	r4,r19
 8023a84:	900b883a 	mov	r5,r18
 8023a88:	8027c740 	call	8027c74 <__eqdf2>
 8023a8c:	100f003a 	cmpeq	r7,r2,zero
 8023a90:	00800084 	movi	r2,2
 8023a94:	11cfc83a 	sub	r7,r2,r7
 8023a98:	00800084 	movi	r2,2
 8023a9c:	d8800015 	stw	r2,0(sp)
 8023aa0:	008200f4 	movhi	r2,2051
 8023aa4:	109d9304 	addi	r2,r2,30284
 8023aa8:	d8800115 	stw	r2,4(sp)
 8023aac:	a00d883a 	mov	r6,r20
 8023ab0:	800b883a 	mov	r5,r16
 8023ab4:	d9000204 	addi	r4,sp,8
 8023ab8:	802474c0 	call	802474c <__kernel_rem_pio2>
 8023abc:	88000d0e 	bge	r17,zero,8023af4 <__ieee754_rem_pio2+0x240>
 8023ac0:	81000117 	ldw	r4,4(r16)
 8023ac4:	80c00317 	ldw	r3,12(r16)
 8023ac8:	0085c83a 	sub	r2,zero,r2
 8023acc:	2120003c 	xorhi	r4,r4,32768
 8023ad0:	18e0003c 	xorhi	r3,r3,32768
 8023ad4:	81000115 	stw	r4,4(r16)
 8023ad8:	80c00315 	stw	r3,12(r16)
 8023adc:	00000506 	br	8023af4 <__ieee754_rem_pio2+0x240>
 8023ae0:	31000015 	stw	r4,0(r6)
 8023ae4:	31400115 	stw	r5,4(r6)
 8023ae8:	30000215 	stw	zero,8(r6)
 8023aec:	30000315 	stw	zero,12(r6)
 8023af0:	0005883a 	mov	r2,zero
 8023af4:	dfc01517 	ldw	ra,84(sp)
 8023af8:	df001417 	ldw	fp,80(sp)
 8023afc:	ddc01317 	ldw	r23,76(sp)
 8023b00:	dd801217 	ldw	r22,72(sp)
 8023b04:	dd401117 	ldw	r21,68(sp)
 8023b08:	dd001017 	ldw	r20,64(sp)
 8023b0c:	dcc00f17 	ldw	r19,60(sp)
 8023b10:	dc800e17 	ldw	r18,56(sp)
 8023b14:	dc400d17 	ldw	r17,52(sp)
 8023b18:	dc000c17 	ldw	r16,48(sp)
 8023b1c:	dec01604 	addi	sp,sp,88
 8023b20:	f800283a 	ret
 8023b24:	200d883a 	mov	r6,r4
 8023b28:	280f883a 	mov	r7,r5
 8023b2c:	80285e40 	call	80285e4 <__subdf3>
 8023b30:	80800215 	stw	r2,8(r16)
 8023b34:	80800015 	stw	r2,0(r16)
 8023b38:	80c00315 	stw	r3,12(r16)
 8023b3c:	80c00115 	stw	r3,4(r16)
 8023b40:	0005883a 	mov	r2,zero
 8023b44:	003feb06 	br	8023af4 <_gp+0xfffe23e8>
 8023b48:	01cf7474 	movhi	r7,15825
 8023b4c:	9009883a 	mov	r4,r18
 8023b50:	39ed1844 	addi	r7,r7,-19359
 8023b54:	01869834 	movhi	r6,6752
 8023b58:	180b883a 	mov	r5,r3
 8023b5c:	80285e40 	call	80285e4 <__subdf3>
 8023b60:	018b80f4 	movhi	r6,11779
 8023b64:	01cee8f4 	movhi	r7,15267
 8023b68:	319c1cc4 	addi	r6,r6,28787
 8023b6c:	39c66284 	addi	r7,r7,6538
 8023b70:	1009883a 	mov	r4,r2
 8023b74:	180b883a 	mov	r5,r3
 8023b78:	1025883a 	mov	r18,r2
 8023b7c:	1823883a 	mov	r17,r3
 8023b80:	80285e40 	call	80285e4 <__subdf3>
 8023b84:	100d883a 	mov	r6,r2
 8023b88:	180f883a 	mov	r7,r3
 8023b8c:	9009883a 	mov	r4,r18
 8023b90:	880b883a 	mov	r5,r17
 8023b94:	80800015 	stw	r2,0(r16)
 8023b98:	80c00115 	stw	r3,4(r16)
 8023b9c:	80285e40 	call	80285e4 <__subdf3>
 8023ba0:	018b80f4 	movhi	r6,11779
 8023ba4:	01cee8f4 	movhi	r7,15267
 8023ba8:	319c1cc4 	addi	r6,r6,28787
 8023bac:	39c66284 	addi	r7,r7,6538
 8023bb0:	003f7306 	br	8023980 <_gp+0xfffe2274>
 8023bb4:	80257a80 	call	80257a8 <fabs>
 8023bb8:	019b72b4 	movhi	r6,28106
 8023bbc:	01cff934 	movhi	r7,16356
 8023bc0:	31b220c4 	addi	r6,r6,-14205
 8023bc4:	39d7cc04 	addi	r7,r7,24368
 8023bc8:	1009883a 	mov	r4,r2
 8023bcc:	180b883a 	mov	r5,r3
 8023bd0:	102d883a 	mov	r22,r2
 8023bd4:	182b883a 	mov	r21,r3
 8023bd8:	8027ecc0 	call	8027ecc <__muldf3>
 8023bdc:	000d883a 	mov	r6,zero
 8023be0:	01cff834 	movhi	r7,16352
 8023be4:	1009883a 	mov	r4,r2
 8023be8:	180b883a 	mov	r5,r3
 8023bec:	8026ae00 	call	8026ae0 <__adddf3>
 8023bf0:	180b883a 	mov	r5,r3
 8023bf4:	1009883a 	mov	r4,r2
 8023bf8:	8028ee00 	call	8028ee0 <__fixdfsi>
 8023bfc:	1009883a 	mov	r4,r2
 8023c00:	1025883a 	mov	r18,r2
 8023c04:	8028f600 	call	8028f60 <__floatsidf>
 8023c08:	01cffe74 	movhi	r7,16377
 8023c0c:	39c87ec4 	addi	r7,r7,8699
 8023c10:	01951034 	movhi	r6,21568
 8023c14:	1009883a 	mov	r4,r2
 8023c18:	180b883a 	mov	r5,r3
 8023c1c:	1029883a 	mov	r20,r2
 8023c20:	1827883a 	mov	r19,r3
 8023c24:	8027ecc0 	call	8027ecc <__muldf3>
 8023c28:	b009883a 	mov	r4,r22
 8023c2c:	a80b883a 	mov	r5,r21
 8023c30:	100d883a 	mov	r6,r2
 8023c34:	180f883a 	mov	r7,r3
 8023c38:	80285e40 	call	80285e4 <__subdf3>
 8023c3c:	018698b4 	movhi	r6,6754
 8023c40:	01cf7474 	movhi	r7,15825
 8023c44:	a009883a 	mov	r4,r20
 8023c48:	3198cc44 	addi	r6,r6,25393
 8023c4c:	39ed1844 	addi	r7,r7,-19359
 8023c50:	980b883a 	mov	r5,r19
 8023c54:	1039883a 	mov	fp,r2
 8023c58:	d8c00815 	stw	r3,32(sp)
 8023c5c:	8027ecc0 	call	8027ecc <__muldf3>
 8023c60:	010007c4 	movi	r4,31
 8023c64:	e017883a 	mov	r11,fp
 8023c68:	da800817 	ldw	r10,32(sp)
 8023c6c:	102d883a 	mov	r22,r2
 8023c70:	182b883a 	mov	r21,r3
 8023c74:	24802816 	blt	r4,r18,8023d18 <__ieee754_rem_pio2+0x464>
 8023c78:	913fffc4 	addi	r4,r18,-1
 8023c7c:	2109883a 	add	r4,r4,r4
 8023c80:	014200f4 	movhi	r5,2051
 8023c84:	2109883a 	add	r4,r4,r4
 8023c88:	295d7304 	addi	r5,r5,30156
 8023c8c:	2909883a 	add	r4,r5,r4
 8023c90:	21000017 	ldw	r4,0(r4)
 8023c94:	b9002026 	beq	r23,r4,8023d18 <__ieee754_rem_pio2+0x464>
 8023c98:	100d883a 	mov	r6,r2
 8023c9c:	180f883a 	mov	r7,r3
 8023ca0:	e009883a 	mov	r4,fp
 8023ca4:	500b883a 	mov	r5,r10
 8023ca8:	da800b15 	stw	r10,44(sp)
 8023cac:	df000a15 	stw	fp,40(sp)
 8023cb0:	80285e40 	call	80285e4 <__subdf3>
 8023cb4:	da800b17 	ldw	r10,44(sp)
 8023cb8:	dac00a17 	ldw	r11,40(sp)
 8023cbc:	1019883a 	mov	r12,r2
 8023cc0:	1813883a 	mov	r9,r3
 8023cc4:	80800015 	stw	r2,0(r16)
 8023cc8:	80c00115 	stw	r3,4(r16)
 8023ccc:	600d883a 	mov	r6,r12
 8023cd0:	480f883a 	mov	r7,r9
 8023cd4:	5809883a 	mov	r4,r11
 8023cd8:	500b883a 	mov	r5,r10
 8023cdc:	da400b15 	stw	r9,44(sp)
 8023ce0:	db000a15 	stw	r12,40(sp)
 8023ce4:	80285e40 	call	80285e4 <__subdf3>
 8023ce8:	b00d883a 	mov	r6,r22
 8023cec:	a80f883a 	mov	r7,r21
 8023cf0:	1009883a 	mov	r4,r2
 8023cf4:	180b883a 	mov	r5,r3
 8023cf8:	80285e40 	call	80285e4 <__subdf3>
 8023cfc:	80800215 	stw	r2,8(r16)
 8023d00:	80c00315 	stw	r3,12(r16)
 8023d04:	da400b17 	ldw	r9,44(sp)
 8023d08:	db000a17 	ldw	r12,40(sp)
 8023d0c:	88009f16 	blt	r17,zero,8023f8c <__ieee754_rem_pio2+0x6d8>
 8023d10:	9005883a 	mov	r2,r18
 8023d14:	003f7706 	br	8023af4 <_gp+0xfffe23e8>
 8023d18:	d9400817 	ldw	r5,32(sp)
 8023d1c:	100d883a 	mov	r6,r2
 8023d20:	180f883a 	mov	r7,r3
 8023d24:	e009883a 	mov	r4,fp
 8023d28:	da800b15 	stw	r10,44(sp)
 8023d2c:	dac00a15 	stw	r11,40(sp)
 8023d30:	80285e40 	call	80285e4 <__subdf3>
 8023d34:	1019883a 	mov	r12,r2
 8023d38:	1804d53a 	srli	r2,r3,20
 8023d3c:	b811d53a 	srai	r8,r23,20
 8023d40:	1813883a 	mov	r9,r3
 8023d44:	1081ffcc 	andi	r2,r2,2047
 8023d48:	80c00115 	stw	r3,4(r16)
 8023d4c:	83000015 	stw	r12,0(r16)
 8023d50:	4085c83a 	sub	r2,r8,r2
 8023d54:	00c00404 	movi	r3,16
 8023d58:	da800b17 	ldw	r10,44(sp)
 8023d5c:	dac00a17 	ldw	r11,40(sp)
 8023d60:	18bfda0e 	bge	r3,r2,8023ccc <_gp+0xfffe25c0>
 8023d64:	01cf7474 	movhi	r7,15825
 8023d68:	39ed1844 	addi	r7,r7,-19359
 8023d6c:	01869834 	movhi	r6,6752
 8023d70:	a009883a 	mov	r4,r20
 8023d74:	980b883a 	mov	r5,r19
 8023d78:	da000a15 	stw	r8,40(sp)
 8023d7c:	8027ecc0 	call	8027ecc <__muldf3>
 8023d80:	d9400817 	ldw	r5,32(sp)
 8023d84:	100d883a 	mov	r6,r2
 8023d88:	180f883a 	mov	r7,r3
 8023d8c:	e009883a 	mov	r4,fp
 8023d90:	102d883a 	mov	r22,r2
 8023d94:	182b883a 	mov	r21,r3
 8023d98:	80285e40 	call	80285e4 <__subdf3>
 8023d9c:	d9400817 	ldw	r5,32(sp)
 8023da0:	100d883a 	mov	r6,r2
 8023da4:	180f883a 	mov	r7,r3
 8023da8:	e009883a 	mov	r4,fp
 8023dac:	182f883a 	mov	r23,r3
 8023db0:	d8800915 	stw	r2,36(sp)
 8023db4:	80285e40 	call	80285e4 <__subdf3>
 8023db8:	b00d883a 	mov	r6,r22
 8023dbc:	a80f883a 	mov	r7,r21
 8023dc0:	1009883a 	mov	r4,r2
 8023dc4:	180b883a 	mov	r5,r3
 8023dc8:	80285e40 	call	80285e4 <__subdf3>
 8023dcc:	018b80f4 	movhi	r6,11779
 8023dd0:	01cee8f4 	movhi	r7,15267
 8023dd4:	319c1cc4 	addi	r6,r6,28787
 8023dd8:	39c66284 	addi	r7,r7,6538
 8023ddc:	a009883a 	mov	r4,r20
 8023de0:	980b883a 	mov	r5,r19
 8023de4:	102d883a 	mov	r22,r2
 8023de8:	182b883a 	mov	r21,r3
 8023dec:	8027ecc0 	call	8027ecc <__muldf3>
 8023df0:	b00d883a 	mov	r6,r22
 8023df4:	a80f883a 	mov	r7,r21
 8023df8:	1009883a 	mov	r4,r2
 8023dfc:	180b883a 	mov	r5,r3
 8023e00:	80285e40 	call	80285e4 <__subdf3>
 8023e04:	d9000917 	ldw	r4,36(sp)
 8023e08:	100d883a 	mov	r6,r2
 8023e0c:	180f883a 	mov	r7,r3
 8023e10:	b80b883a 	mov	r5,r23
 8023e14:	102d883a 	mov	r22,r2
 8023e18:	182b883a 	mov	r21,r3
 8023e1c:	80285e40 	call	80285e4 <__subdf3>
 8023e20:	1019883a 	mov	r12,r2
 8023e24:	1804d53a 	srli	r2,r3,20
 8023e28:	da000a17 	ldw	r8,40(sp)
 8023e2c:	83000015 	stw	r12,0(r16)
 8023e30:	1081ffcc 	andi	r2,r2,2047
 8023e34:	4091c83a 	sub	r8,r8,r2
 8023e38:	80c00115 	stw	r3,4(r16)
 8023e3c:	00800c44 	movi	r2,49
 8023e40:	1813883a 	mov	r9,r3
 8023e44:	1200730e 	bge	r2,r8,8024014 <__ieee754_rem_pio2+0x760>
 8023e48:	01cee8f4 	movhi	r7,15267
 8023e4c:	39c66284 	addi	r7,r7,6538
 8023e50:	018b8034 	movhi	r6,11776
 8023e54:	a009883a 	mov	r4,r20
 8023e58:	980b883a 	mov	r5,r19
 8023e5c:	8027ecc0 	call	8027ecc <__muldf3>
 8023e60:	d9000917 	ldw	r4,36(sp)
 8023e64:	100d883a 	mov	r6,r2
 8023e68:	180f883a 	mov	r7,r3
 8023e6c:	b80b883a 	mov	r5,r23
 8023e70:	102d883a 	mov	r22,r2
 8023e74:	182b883a 	mov	r21,r3
 8023e78:	80285e40 	call	80285e4 <__subdf3>
 8023e7c:	d9000917 	ldw	r4,36(sp)
 8023e80:	100d883a 	mov	r6,r2
 8023e84:	180f883a 	mov	r7,r3
 8023e88:	b80b883a 	mov	r5,r23
 8023e8c:	d8c00b15 	stw	r3,44(sp)
 8023e90:	d8800a15 	stw	r2,40(sp)
 8023e94:	80285e40 	call	80285e4 <__subdf3>
 8023e98:	b00d883a 	mov	r6,r22
 8023e9c:	a80f883a 	mov	r7,r21
 8023ea0:	1009883a 	mov	r4,r2
 8023ea4:	180b883a 	mov	r5,r3
 8023ea8:	80285e40 	call	80285e4 <__subdf3>
 8023eac:	01894834 	movhi	r6,9504
 8023eb0:	01ce5f34 	movhi	r7,14716
 8023eb4:	31927044 	addi	r6,r6,18881
 8023eb8:	39e0e684 	addi	r7,r7,-31846
 8023ebc:	a009883a 	mov	r4,r20
 8023ec0:	980b883a 	mov	r5,r19
 8023ec4:	102d883a 	mov	r22,r2
 8023ec8:	182b883a 	mov	r21,r3
 8023ecc:	8027ecc0 	call	8027ecc <__muldf3>
 8023ed0:	b00d883a 	mov	r6,r22
 8023ed4:	a80f883a 	mov	r7,r21
 8023ed8:	1009883a 	mov	r4,r2
 8023edc:	180b883a 	mov	r5,r3
 8023ee0:	80285e40 	call	80285e4 <__subdf3>
 8023ee4:	dac00a17 	ldw	r11,40(sp)
 8023ee8:	da800b17 	ldw	r10,44(sp)
 8023eec:	102d883a 	mov	r22,r2
 8023ef0:	182b883a 	mov	r21,r3
 8023ef4:	100d883a 	mov	r6,r2
 8023ef8:	180f883a 	mov	r7,r3
 8023efc:	5809883a 	mov	r4,r11
 8023f00:	500b883a 	mov	r5,r10
 8023f04:	003f6a06 	br	8023cb0 <_gp+0xfffe25a4>
 8023f08:	8026ae00 	call	8026ae0 <__adddf3>
 8023f0c:	1025883a 	mov	r18,r2
 8023f10:	008ffe74 	movhi	r2,16377
 8023f14:	10887ec4 	addi	r2,r2,8699
 8023f18:	1823883a 	mov	r17,r3
 8023f1c:	b8802226 	beq	r23,r2,8023fa8 <__ieee754_rem_pio2+0x6f4>
 8023f20:	018698b4 	movhi	r6,6754
 8023f24:	01cf7474 	movhi	r7,15825
 8023f28:	3198cc44 	addi	r6,r6,25393
 8023f2c:	39ed1844 	addi	r7,r7,-19359
 8023f30:	9009883a 	mov	r4,r18
 8023f34:	180b883a 	mov	r5,r3
 8023f38:	8026ae00 	call	8026ae0 <__adddf3>
 8023f3c:	100d883a 	mov	r6,r2
 8023f40:	180f883a 	mov	r7,r3
 8023f44:	9009883a 	mov	r4,r18
 8023f48:	880b883a 	mov	r5,r17
 8023f4c:	80800015 	stw	r2,0(r16)
 8023f50:	80c00115 	stw	r3,4(r16)
 8023f54:	80285e40 	call	80285e4 <__subdf3>
 8023f58:	018698b4 	movhi	r6,6754
 8023f5c:	01cf7474 	movhi	r7,15825
 8023f60:	3198cc44 	addi	r6,r6,25393
 8023f64:	39ed1844 	addi	r7,r7,-19359
 8023f68:	1009883a 	mov	r4,r2
 8023f6c:	180b883a 	mov	r5,r3
 8023f70:	8026ae00 	call	8026ae0 <__adddf3>
 8023f74:	80800215 	stw	r2,8(r16)
 8023f78:	80c00315 	stw	r3,12(r16)
 8023f7c:	00bfffc4 	movi	r2,-1
 8023f80:	003edc06 	br	8023af4 <_gp+0xfffe23e8>
 8023f84:	01c000c4 	movi	r7,3
 8023f88:	003ec306 	br	8023a98 <_gp+0xfffe238c>
 8023f8c:	4a60003c 	xorhi	r9,r9,32768
 8023f90:	18e0003c 	xorhi	r3,r3,32768
 8023f94:	83000015 	stw	r12,0(r16)
 8023f98:	82400115 	stw	r9,4(r16)
 8023f9c:	80c00315 	stw	r3,12(r16)
 8023fa0:	0485c83a 	sub	r2,zero,r18
 8023fa4:	003ed306 	br	8023af4 <_gp+0xfffe23e8>
 8023fa8:	01cf7474 	movhi	r7,15825
 8023fac:	9009883a 	mov	r4,r18
 8023fb0:	39ed1844 	addi	r7,r7,-19359
 8023fb4:	01869834 	movhi	r6,6752
 8023fb8:	180b883a 	mov	r5,r3
 8023fbc:	8026ae00 	call	8026ae0 <__adddf3>
 8023fc0:	018b80f4 	movhi	r6,11779
 8023fc4:	01cee8f4 	movhi	r7,15267
 8023fc8:	319c1cc4 	addi	r6,r6,28787
 8023fcc:	39c66284 	addi	r7,r7,6538
 8023fd0:	1009883a 	mov	r4,r2
 8023fd4:	180b883a 	mov	r5,r3
 8023fd8:	1025883a 	mov	r18,r2
 8023fdc:	1823883a 	mov	r17,r3
 8023fe0:	8026ae00 	call	8026ae0 <__adddf3>
 8023fe4:	100d883a 	mov	r6,r2
 8023fe8:	180f883a 	mov	r7,r3
 8023fec:	9009883a 	mov	r4,r18
 8023ff0:	880b883a 	mov	r5,r17
 8023ff4:	80800015 	stw	r2,0(r16)
 8023ff8:	80c00115 	stw	r3,4(r16)
 8023ffc:	80285e40 	call	80285e4 <__subdf3>
 8024000:	018b80f4 	movhi	r6,11779
 8024004:	01cee8f4 	movhi	r7,15267
 8024008:	319c1cc4 	addi	r6,r6,28787
 802400c:	39c66284 	addi	r7,r7,6538
 8024010:	003fd506 	br	8023f68 <_gp+0xfffe285c>
 8024014:	dac00917 	ldw	r11,36(sp)
 8024018:	b815883a 	mov	r10,r23
 802401c:	003f2b06 	br	8023ccc <_gp+0xfffe25c0>

08024020 <__ieee754_sqrt>:
 8024020:	defffd04 	addi	sp,sp,-12
 8024024:	dc400115 	stw	r17,4(sp)
 8024028:	dc000015 	stw	r16,0(sp)
 802402c:	dfc00215 	stw	ra,8(sp)
 8024030:	28dffc2c 	andhi	r3,r5,32752
 8024034:	009ffc34 	movhi	r2,32752
 8024038:	2821883a 	mov	r16,r5
 802403c:	2023883a 	mov	r17,r4
 8024040:	200d883a 	mov	r6,r4
 8024044:	18807b26 	beq	r3,r2,8024234 <__ieee754_sqrt+0x214>
 8024048:	01405f0e 	bge	zero,r5,80241c8 <__ieee754_sqrt+0x1a8>
 802404c:	2815d53a 	srai	r10,r5,20
 8024050:	50006a26 	beq	r10,zero,80241fc <__ieee754_sqrt+0x1dc>
 8024054:	00c00434 	movhi	r3,16
 8024058:	52bf0044 	addi	r10,r10,-1023
 802405c:	18ffffc4 	addi	r3,r3,-1
 8024060:	80c6703a 	and	r3,r16,r3
 8024064:	5080004c 	andi	r2,r10,1
 8024068:	18c00434 	orhi	r3,r3,16
 802406c:	1000511e 	bne	r2,zero,80241b4 <__ieee754_sqrt+0x194>
 8024070:	3004d7fa 	srli	r2,r6,31
 8024074:	5015d07a 	srai	r10,r10,1
 8024078:	18c7883a 	add	r3,r3,r3
 802407c:	10c5883a 	add	r2,r2,r3
 8024080:	01400584 	movi	r5,22
 8024084:	3187883a 	add	r3,r6,r6
 8024088:	0013883a 	mov	r9,zero
 802408c:	000f883a 	mov	r7,zero
 8024090:	01000834 	movhi	r4,32
 8024094:	390d883a 	add	r6,r7,r4
 8024098:	1810d7fa 	srli	r8,r3,31
 802409c:	297fffc4 	addi	r5,r5,-1
 80240a0:	11800316 	blt	r2,r6,80240b0 <__ieee754_sqrt+0x90>
 80240a4:	1185c83a 	sub	r2,r2,r6
 80240a8:	310f883a 	add	r7,r6,r4
 80240ac:	4913883a 	add	r9,r9,r4
 80240b0:	1085883a 	add	r2,r2,r2
 80240b4:	4085883a 	add	r2,r8,r2
 80240b8:	18c7883a 	add	r3,r3,r3
 80240bc:	2008d07a 	srli	r4,r4,1
 80240c0:	283ff41e 	bne	r5,zero,8024094 <_gp+0xfffe2988>
 80240c4:	01200034 	movhi	r4,32768
 80240c8:	01800804 	movi	r6,32
 80240cc:	0011883a 	mov	r8,zero
 80240d0:	0019883a 	mov	r12,zero
 80240d4:	201b883a 	mov	r13,r4
 80240d8:	00000806 	br	80240fc <__ieee754_sqrt+0xdc>
 80240dc:	38801726 	beq	r7,r2,802413c <__ieee754_sqrt+0x11c>
 80240e0:	180ad7fa 	srli	r5,r3,31
 80240e4:	1085883a 	add	r2,r2,r2
 80240e8:	31bfffc4 	addi	r6,r6,-1
 80240ec:	2885883a 	add	r2,r5,r2
 80240f0:	18c7883a 	add	r3,r3,r3
 80240f4:	2008d07a 	srli	r4,r4,1
 80240f8:	30001726 	beq	r6,zero,8024158 <__ieee754_sqrt+0x138>
 80240fc:	230b883a 	add	r5,r4,r12
 8024100:	38bff60e 	bge	r7,r2,80240dc <_gp+0xfffe29d0>
 8024104:	2ae0002c 	andhi	r11,r5,32768
 8024108:	2919883a 	add	r12,r5,r4
 802410c:	5b400826 	beq	r11,r13,8024130 <__ieee754_sqrt+0x110>
 8024110:	3817883a 	mov	r11,r7
 8024114:	11c5c83a 	sub	r2,r2,r7
 8024118:	1940012e 	bgeu	r3,r5,8024120 <__ieee754_sqrt+0x100>
 802411c:	10bfffc4 	addi	r2,r2,-1
 8024120:	1947c83a 	sub	r3,r3,r5
 8024124:	4111883a 	add	r8,r8,r4
 8024128:	580f883a 	mov	r7,r11
 802412c:	003fec06 	br	80240e0 <_gp+0xfffe29d4>
 8024130:	603ff716 	blt	r12,zero,8024110 <_gp+0xfffe2a04>
 8024134:	3ac00044 	addi	r11,r7,1
 8024138:	003ff606 	br	8024114 <_gp+0xfffe2a08>
 802413c:	19401936 	bltu	r3,r5,80241a4 <__ieee754_sqrt+0x184>
 8024140:	2ae0002c 	andhi	r11,r5,32768
 8024144:	2919883a 	add	r12,r5,r4
 8024148:	5b404526 	beq	r11,r13,8024260 <__ieee754_sqrt+0x240>
 802414c:	1017883a 	mov	r11,r2
 8024150:	0005883a 	mov	r2,zero
 8024154:	003ff206 	br	8024120 <_gp+0xfffe2a14>
 8024158:	10c4b03a 	or	r2,r2,r3
 802415c:	10000426 	beq	r2,zero,8024170 <__ieee754_sqrt+0x150>
 8024160:	00bfffc4 	movi	r2,-1
 8024164:	40804026 	beq	r8,r2,8024268 <__ieee754_sqrt+0x248>
 8024168:	4080004c 	andi	r2,r8,1
 802416c:	4091883a 	add	r8,r8,r2
 8024170:	4004d07a 	srli	r2,r8,1
 8024174:	4807d07a 	srai	r3,r9,1
 8024178:	010ff834 	movhi	r4,16352
 802417c:	4a40004c 	andi	r9,r9,1
 8024180:	1909883a 	add	r4,r3,r4
 8024184:	4800091e 	bne	r9,zero,80241ac <__ieee754_sqrt+0x18c>
 8024188:	5006953a 	slli	r3,r10,20
 802418c:	1907883a 	add	r3,r3,r4
 8024190:	dfc00217 	ldw	ra,8(sp)
 8024194:	dc400117 	ldw	r17,4(sp)
 8024198:	dc000017 	ldw	r16,0(sp)
 802419c:	dec00304 	addi	sp,sp,12
 80241a0:	f800283a 	ret
 80241a4:	3805883a 	mov	r2,r7
 80241a8:	003fcd06 	br	80240e0 <_gp+0xfffe29d4>
 80241ac:	10a00034 	orhi	r2,r2,32768
 80241b0:	003ff506 	br	8024188 <_gp+0xfffe2a7c>
 80241b4:	3004d7fa 	srli	r2,r6,31
 80241b8:	18c7883a 	add	r3,r3,r3
 80241bc:	318d883a 	add	r6,r6,r6
 80241c0:	10c7883a 	add	r3,r2,r3
 80241c4:	003faa06 	br	8024070 <_gp+0xfffe2964>
 80241c8:	00a00034 	movhi	r2,32768
 80241cc:	10bfffc4 	addi	r2,r2,-1
 80241d0:	2884703a 	and	r2,r5,r2
 80241d4:	1104b03a 	or	r2,r2,r4
 80241d8:	10001e26 	beq	r2,zero,8024254 <__ieee754_sqrt+0x234>
 80241dc:	2800291e 	bne	r5,zero,8024284 <__ieee754_sqrt+0x264>
 80241e0:	0015883a 	mov	r10,zero
 80241e4:	3020d2fa 	srli	r16,r6,11
 80241e8:	52bffac4 	addi	r10,r10,-21
 80241ec:	300c957a 	slli	r6,r6,21
 80241f0:	803ffc26 	beq	r16,zero,80241e4 <_gp+0xfffe2ad8>
 80241f4:	8080042c 	andhi	r2,r16,16
 80241f8:	10001e1e 	bne	r2,zero,8024274 <__ieee754_sqrt+0x254>
 80241fc:	0005883a 	mov	r2,zero
 8024200:	00000106 	br	8024208 <__ieee754_sqrt+0x1e8>
 8024204:	1805883a 	mov	r2,r3
 8024208:	8421883a 	add	r16,r16,r16
 802420c:	8100042c 	andhi	r4,r16,16
 8024210:	10c00044 	addi	r3,r2,1
 8024214:	203ffb26 	beq	r4,zero,8024204 <_gp+0xfffe2af8>
 8024218:	01000804 	movi	r4,32
 802421c:	20c9c83a 	sub	r4,r4,r3
 8024220:	3108d83a 	srl	r4,r6,r4
 8024224:	5095c83a 	sub	r10,r10,r2
 8024228:	30cc983a 	sll	r6,r6,r3
 802422c:	2420b03a 	or	r16,r4,r16
 8024230:	003f8806 	br	8024054 <_gp+0xfffe2948>
 8024234:	280f883a 	mov	r7,r5
 8024238:	8027ecc0 	call	8027ecc <__muldf3>
 802423c:	880d883a 	mov	r6,r17
 8024240:	800f883a 	mov	r7,r16
 8024244:	1009883a 	mov	r4,r2
 8024248:	180b883a 	mov	r5,r3
 802424c:	8026ae00 	call	8026ae0 <__adddf3>
 8024250:	003fcf06 	br	8024190 <_gp+0xfffe2a84>
 8024254:	2005883a 	mov	r2,r4
 8024258:	2807883a 	mov	r3,r5
 802425c:	003fcc06 	br	8024190 <_gp+0xfffe2a84>
 8024260:	603fba16 	blt	r12,zero,802414c <_gp+0xfffe2a40>
 8024264:	003fb306 	br	8024134 <_gp+0xfffe2a28>
 8024268:	4a400044 	addi	r9,r9,1
 802426c:	0005883a 	mov	r2,zero
 8024270:	003fc006 	br	8024174 <_gp+0xfffe2a68>
 8024274:	01000804 	movi	r4,32
 8024278:	00bfffc4 	movi	r2,-1
 802427c:	0007883a 	mov	r3,zero
 8024280:	003fe706 	br	8024220 <_gp+0xfffe2b14>
 8024284:	200d883a 	mov	r6,r4
 8024288:	280f883a 	mov	r7,r5
 802428c:	80285e40 	call	80285e4 <__subdf3>
 8024290:	100d883a 	mov	r6,r2
 8024294:	180f883a 	mov	r7,r3
 8024298:	1009883a 	mov	r4,r2
 802429c:	180b883a 	mov	r5,r3
 80242a0:	802738c0 	call	802738c <__divdf3>
 80242a4:	003fba06 	br	8024190 <_gp+0xfffe2a84>

080242a8 <__kernel_cos>:
 80242a8:	defff304 	addi	sp,sp,-52
 80242ac:	dc000315 	stw	r16,12(sp)
 80242b0:	04200034 	movhi	r16,32768
 80242b4:	843fffc4 	addi	r16,r16,-1
 80242b8:	008f9034 	movhi	r2,15936
 80242bc:	df000b15 	stw	fp,44(sp)
 80242c0:	ddc00a15 	stw	r23,40(sp)
 80242c4:	dd800915 	stw	r22,36(sp)
 80242c8:	dcc00615 	stw	r19,24(sp)
 80242cc:	dfc00c15 	stw	ra,48(sp)
 80242d0:	dd400815 	stw	r21,32(sp)
 80242d4:	dd000715 	stw	r20,28(sp)
 80242d8:	dc800515 	stw	r18,20(sp)
 80242dc:	dc400415 	stw	r17,16(sp)
 80242e0:	2c20703a 	and	r16,r5,r16
 80242e4:	10bfffc4 	addi	r2,r2,-1
 80242e8:	2827883a 	mov	r19,r5
 80242ec:	202d883a 	mov	r22,r4
 80242f0:	302f883a 	mov	r23,r6
 80242f4:	3839883a 	mov	fp,r7
 80242f8:	14007516 	blt	r2,r16,80244d0 <__kernel_cos+0x228>
 80242fc:	8028ee00 	call	8028ee0 <__fixdfsi>
 8024300:	10010f26 	beq	r2,zero,8024740 <__kernel_cos+0x498>
 8024304:	b00d883a 	mov	r6,r22
 8024308:	980f883a 	mov	r7,r19
 802430c:	b009883a 	mov	r4,r22
 8024310:	980b883a 	mov	r5,r19
 8024314:	8027ecc0 	call	8027ecc <__muldf3>
 8024318:	01afa234 	movhi	r6,48776
 802431c:	01ef6a74 	movhi	r7,48553
 8024320:	318e3504 	addi	r6,r6,14548
 8024324:	39feba44 	addi	r7,r7,-1303
 8024328:	1009883a 	mov	r4,r2
 802432c:	180b883a 	mov	r5,r3
 8024330:	102b883a 	mov	r21,r2
 8024334:	1829883a 	mov	r20,r3
 8024338:	8027ecc0 	call	8027ecc <__muldf3>
 802433c:	01af6d74 	movhi	r6,48565
 8024340:	01cf88b4 	movhi	r7,15906
 8024344:	31ac7104 	addi	r6,r6,-20028
 8024348:	39fba784 	addi	r7,r7,-4450
 802434c:	1009883a 	mov	r4,r2
 8024350:	180b883a 	mov	r5,r3
 8024354:	8026ae00 	call	8026ae0 <__adddf3>
 8024358:	a80d883a 	mov	r6,r21
 802435c:	a00f883a 	mov	r7,r20
 8024360:	1009883a 	mov	r4,r2
 8024364:	180b883a 	mov	r5,r3
 8024368:	8027ecc0 	call	8027ecc <__muldf3>
 802436c:	01a02734 	movhi	r6,32924
 8024370:	01cfa4b4 	movhi	r7,16018
 8024374:	3194ab44 	addi	r6,r6,21165
 8024378:	39df93c4 	addi	r7,r7,32335
 802437c:	1009883a 	mov	r4,r2
 8024380:	180b883a 	mov	r5,r3
 8024384:	80285e40 	call	80285e4 <__subdf3>
 8024388:	a80d883a 	mov	r6,r21
 802438c:	a00f883a 	mov	r7,r20
 8024390:	1009883a 	mov	r4,r2
 8024394:	180b883a 	mov	r5,r3
 8024398:	8027ecc0 	call	8027ecc <__muldf3>
 802439c:	018672f4 	movhi	r6,6603
 80243a0:	01cfbeb4 	movhi	r7,16122
 80243a4:	31856404 	addi	r6,r6,5520
 80243a8:	39c06804 	addi	r7,r7,416
 80243ac:	1009883a 	mov	r4,r2
 80243b0:	180b883a 	mov	r5,r3
 80243b4:	8026ae00 	call	8026ae0 <__adddf3>
 80243b8:	a80d883a 	mov	r6,r21
 80243bc:	a00f883a 	mov	r7,r20
 80243c0:	1009883a 	mov	r4,r2
 80243c4:	180b883a 	mov	r5,r3
 80243c8:	8027ecc0 	call	8027ecc <__muldf3>
 80243cc:	0185b074 	movhi	r6,5825
 80243d0:	01cfd5f4 	movhi	r7,16215
 80243d4:	31945dc4 	addi	r6,r6,20855
 80243d8:	39f05b04 	addi	r7,r7,-16020
 80243dc:	1009883a 	mov	r4,r2
 80243e0:	180b883a 	mov	r5,r3
 80243e4:	80285e40 	call	80285e4 <__subdf3>
 80243e8:	a80d883a 	mov	r6,r21
 80243ec:	a00f883a 	mov	r7,r20
 80243f0:	1009883a 	mov	r4,r2
 80243f4:	180b883a 	mov	r5,r3
 80243f8:	8027ecc0 	call	8027ecc <__muldf3>
 80243fc:	01955574 	movhi	r6,21845
 8024400:	01cfe974 	movhi	r7,16293
 8024404:	31955304 	addi	r6,r6,21836
 8024408:	39d55544 	addi	r7,r7,21845
 802440c:	1009883a 	mov	r4,r2
 8024410:	180b883a 	mov	r5,r3
 8024414:	8026ae00 	call	8026ae0 <__adddf3>
 8024418:	a80d883a 	mov	r6,r21
 802441c:	a00f883a 	mov	r7,r20
 8024420:	1009883a 	mov	r4,r2
 8024424:	180b883a 	mov	r5,r3
 8024428:	8027ecc0 	call	8027ecc <__muldf3>
 802442c:	1017883a 	mov	r11,r2
 8024430:	1815883a 	mov	r10,r3
 8024434:	a809883a 	mov	r4,r21
 8024438:	a00b883a 	mov	r5,r20
 802443c:	000d883a 	mov	r6,zero
 8024440:	01cff834 	movhi	r7,16352
 8024444:	da800215 	stw	r10,8(sp)
 8024448:	dac00115 	stw	r11,4(sp)
 802444c:	8027ecc0 	call	8027ecc <__muldf3>
 8024450:	dac00117 	ldw	r11,4(sp)
 8024454:	da800217 	ldw	r10,8(sp)
 8024458:	a809883a 	mov	r4,r21
 802445c:	580d883a 	mov	r6,r11
 8024460:	500f883a 	mov	r7,r10
 8024464:	a00b883a 	mov	r5,r20
 8024468:	1023883a 	mov	r17,r2
 802446c:	1821883a 	mov	r16,r3
 8024470:	8027ecc0 	call	8027ecc <__muldf3>
 8024474:	b80d883a 	mov	r6,r23
 8024478:	e00f883a 	mov	r7,fp
 802447c:	b009883a 	mov	r4,r22
 8024480:	980b883a 	mov	r5,r19
 8024484:	1029883a 	mov	r20,r2
 8024488:	1825883a 	mov	r18,r3
 802448c:	8027ecc0 	call	8027ecc <__muldf3>
 8024490:	a009883a 	mov	r4,r20
 8024494:	900b883a 	mov	r5,r18
 8024498:	100d883a 	mov	r6,r2
 802449c:	180f883a 	mov	r7,r3
 80244a0:	80285e40 	call	80285e4 <__subdf3>
 80244a4:	8809883a 	mov	r4,r17
 80244a8:	800b883a 	mov	r5,r16
 80244ac:	100d883a 	mov	r6,r2
 80244b0:	180f883a 	mov	r7,r3
 80244b4:	80285e40 	call	80285e4 <__subdf3>
 80244b8:	100d883a 	mov	r6,r2
 80244bc:	180f883a 	mov	r7,r3
 80244c0:	0009883a 	mov	r4,zero
 80244c4:	014ffc34 	movhi	r5,16368
 80244c8:	80285e40 	call	80285e4 <__subdf3>
 80244cc:	00008b06 	br	80246fc <__kernel_cos+0x454>
 80244d0:	200d883a 	mov	r6,r4
 80244d4:	280f883a 	mov	r7,r5
 80244d8:	8027ecc0 	call	8027ecc <__muldf3>
 80244dc:	01afa234 	movhi	r6,48776
 80244e0:	01ef6a74 	movhi	r7,48553
 80244e4:	318e3504 	addi	r6,r6,14548
 80244e8:	39feba44 	addi	r7,r7,-1303
 80244ec:	1009883a 	mov	r4,r2
 80244f0:	180b883a 	mov	r5,r3
 80244f4:	1025883a 	mov	r18,r2
 80244f8:	1823883a 	mov	r17,r3
 80244fc:	8027ecc0 	call	8027ecc <__muldf3>
 8024500:	01af6d74 	movhi	r6,48565
 8024504:	01cf88b4 	movhi	r7,15906
 8024508:	31ac7104 	addi	r6,r6,-20028
 802450c:	39fba784 	addi	r7,r7,-4450
 8024510:	1009883a 	mov	r4,r2
 8024514:	180b883a 	mov	r5,r3
 8024518:	8026ae00 	call	8026ae0 <__adddf3>
 802451c:	900d883a 	mov	r6,r18
 8024520:	880f883a 	mov	r7,r17
 8024524:	1009883a 	mov	r4,r2
 8024528:	180b883a 	mov	r5,r3
 802452c:	8027ecc0 	call	8027ecc <__muldf3>
 8024530:	01a02734 	movhi	r6,32924
 8024534:	01cfa4b4 	movhi	r7,16018
 8024538:	3194ab44 	addi	r6,r6,21165
 802453c:	39df93c4 	addi	r7,r7,32335
 8024540:	1009883a 	mov	r4,r2
 8024544:	180b883a 	mov	r5,r3
 8024548:	80285e40 	call	80285e4 <__subdf3>
 802454c:	900d883a 	mov	r6,r18
 8024550:	880f883a 	mov	r7,r17
 8024554:	1009883a 	mov	r4,r2
 8024558:	180b883a 	mov	r5,r3
 802455c:	8027ecc0 	call	8027ecc <__muldf3>
 8024560:	018672f4 	movhi	r6,6603
 8024564:	01cfbeb4 	movhi	r7,16122
 8024568:	31856404 	addi	r6,r6,5520
 802456c:	39c06804 	addi	r7,r7,416
 8024570:	1009883a 	mov	r4,r2
 8024574:	180b883a 	mov	r5,r3
 8024578:	8026ae00 	call	8026ae0 <__adddf3>
 802457c:	900d883a 	mov	r6,r18
 8024580:	880f883a 	mov	r7,r17
 8024584:	1009883a 	mov	r4,r2
 8024588:	180b883a 	mov	r5,r3
 802458c:	8027ecc0 	call	8027ecc <__muldf3>
 8024590:	0185b074 	movhi	r6,5825
 8024594:	01cfd5f4 	movhi	r7,16215
 8024598:	31945dc4 	addi	r6,r6,20855
 802459c:	39f05b04 	addi	r7,r7,-16020
 80245a0:	1009883a 	mov	r4,r2
 80245a4:	180b883a 	mov	r5,r3
 80245a8:	80285e40 	call	80285e4 <__subdf3>
 80245ac:	900d883a 	mov	r6,r18
 80245b0:	880f883a 	mov	r7,r17
 80245b4:	1009883a 	mov	r4,r2
 80245b8:	180b883a 	mov	r5,r3
 80245bc:	8027ecc0 	call	8027ecc <__muldf3>
 80245c0:	01955574 	movhi	r6,21845
 80245c4:	01cfe974 	movhi	r7,16293
 80245c8:	31955304 	addi	r6,r6,21836
 80245cc:	39d55544 	addi	r7,r7,21845
 80245d0:	1009883a 	mov	r4,r2
 80245d4:	180b883a 	mov	r5,r3
 80245d8:	8026ae00 	call	8026ae0 <__adddf3>
 80245dc:	900d883a 	mov	r6,r18
 80245e0:	880f883a 	mov	r7,r17
 80245e4:	1009883a 	mov	r4,r2
 80245e8:	180b883a 	mov	r5,r3
 80245ec:	8027ecc0 	call	8027ecc <__muldf3>
 80245f0:	1013883a 	mov	r9,r2
 80245f4:	1017883a 	mov	r11,r2
 80245f8:	008ff4f4 	movhi	r2,16339
 80245fc:	108ccc84 	addi	r2,r2,13106
 8024600:	1811883a 	mov	r8,r3
 8024604:	902b883a 	mov	r21,r18
 8024608:	8829883a 	mov	r20,r17
 802460c:	1815883a 	mov	r10,r3
 8024610:	143f880e 	bge	r2,r16,8024434 <_gp+0xfffe2d28>
 8024614:	008ffa74 	movhi	r2,16361
 8024618:	14004416 	blt	r2,r16,802472c <__kernel_cos+0x484>
 802461c:	00bff834 	movhi	r2,65504
 8024620:	80a1883a 	add	r16,r16,r2
 8024624:	000d883a 	mov	r6,zero
 8024628:	800f883a 	mov	r7,r16
 802462c:	0009883a 	mov	r4,zero
 8024630:	014ffc34 	movhi	r5,16368
 8024634:	da400115 	stw	r9,4(sp)
 8024638:	d8c00215 	stw	r3,8(sp)
 802463c:	80285e40 	call	80285e4 <__subdf3>
 8024640:	da000217 	ldw	r8,8(sp)
 8024644:	da400117 	ldw	r9,4(sp)
 8024648:	102b883a 	mov	r21,r2
 802464c:	d8c00015 	stw	r3,0(sp)
 8024650:	9009883a 	mov	r4,r18
 8024654:	880b883a 	mov	r5,r17
 8024658:	000d883a 	mov	r6,zero
 802465c:	01cff834 	movhi	r7,16352
 8024660:	da000215 	stw	r8,8(sp)
 8024664:	da400115 	stw	r9,4(sp)
 8024668:	8027ecc0 	call	8027ecc <__muldf3>
 802466c:	800f883a 	mov	r7,r16
 8024670:	000d883a 	mov	r6,zero
 8024674:	1009883a 	mov	r4,r2
 8024678:	180b883a 	mov	r5,r3
 802467c:	80285e40 	call	80285e4 <__subdf3>
 8024680:	da400117 	ldw	r9,4(sp)
 8024684:	da000217 	ldw	r8,8(sp)
 8024688:	9009883a 	mov	r4,r18
 802468c:	480d883a 	mov	r6,r9
 8024690:	400f883a 	mov	r7,r8
 8024694:	880b883a 	mov	r5,r17
 8024698:	1029883a 	mov	r20,r2
 802469c:	1821883a 	mov	r16,r3
 80246a0:	8027ecc0 	call	8027ecc <__muldf3>
 80246a4:	b80d883a 	mov	r6,r23
 80246a8:	e00f883a 	mov	r7,fp
 80246ac:	b009883a 	mov	r4,r22
 80246b0:	980b883a 	mov	r5,r19
 80246b4:	1025883a 	mov	r18,r2
 80246b8:	1823883a 	mov	r17,r3
 80246bc:	8027ecc0 	call	8027ecc <__muldf3>
 80246c0:	100d883a 	mov	r6,r2
 80246c4:	180f883a 	mov	r7,r3
 80246c8:	9009883a 	mov	r4,r18
 80246cc:	880b883a 	mov	r5,r17
 80246d0:	80285e40 	call	80285e4 <__subdf3>
 80246d4:	100d883a 	mov	r6,r2
 80246d8:	180f883a 	mov	r7,r3
 80246dc:	a009883a 	mov	r4,r20
 80246e0:	800b883a 	mov	r5,r16
 80246e4:	80285e40 	call	80285e4 <__subdf3>
 80246e8:	d9400017 	ldw	r5,0(sp)
 80246ec:	100d883a 	mov	r6,r2
 80246f0:	180f883a 	mov	r7,r3
 80246f4:	a809883a 	mov	r4,r21
 80246f8:	80285e40 	call	80285e4 <__subdf3>
 80246fc:	dfc00c17 	ldw	ra,48(sp)
 8024700:	df000b17 	ldw	fp,44(sp)
 8024704:	ddc00a17 	ldw	r23,40(sp)
 8024708:	dd800917 	ldw	r22,36(sp)
 802470c:	dd400817 	ldw	r21,32(sp)
 8024710:	dd000717 	ldw	r20,28(sp)
 8024714:	dcc00617 	ldw	r19,24(sp)
 8024718:	dc800517 	ldw	r18,20(sp)
 802471c:	dc400417 	ldw	r17,16(sp)
 8024720:	dc000317 	ldw	r16,12(sp)
 8024724:	dec00d04 	addi	sp,sp,52
 8024728:	f800283a 	ret
 802472c:	008ff9f4 	movhi	r2,16359
 8024730:	002b883a 	mov	r21,zero
 8024734:	d8800015 	stw	r2,0(sp)
 8024738:	040ff4b4 	movhi	r16,16338
 802473c:	003fc406 	br	8024650 <_gp+0xfffe2f44>
 8024740:	0005883a 	mov	r2,zero
 8024744:	00cffc34 	movhi	r3,16368
 8024748:	003fec06 	br	80246fc <_gp+0xfffe2ff0>

0802474c <__kernel_rem_pio2>:
 802474c:	deff5a04 	addi	sp,sp,-664
 8024750:	da00a617 	ldw	r8,664(sp)
 8024754:	00c200f4 	movhi	r3,2051
 8024758:	18dde504 	addi	r3,r3,30612
 802475c:	4205883a 	add	r2,r8,r8
 8024760:	1085883a 	add	r2,r2,r2
 8024764:	1885883a 	add	r2,r3,r2
 8024768:	d9008e15 	stw	r4,568(sp)
 802476c:	d9408f15 	stw	r5,572(sp)
 8024770:	313fff44 	addi	r4,r6,-3
 8024774:	01400604 	movi	r5,24
 8024778:	dd80a215 	stw	r22,648(sp)
 802477c:	dc009c15 	stw	r16,624(sp)
 8024780:	dfc0a515 	stw	ra,660(sp)
 8024784:	df00a415 	stw	fp,656(sp)
 8024788:	ddc0a315 	stw	r23,652(sp)
 802478c:	dd40a115 	stw	r21,644(sp)
 8024790:	dd00a015 	stw	r20,640(sp)
 8024794:	dcc09f15 	stw	r19,636(sp)
 8024798:	dc809e15 	stw	r18,632(sp)
 802479c:	dc409d15 	stw	r17,628(sp)
 80247a0:	3021883a 	mov	r16,r6
 80247a4:	d9c09315 	stw	r7,588(sp)
 80247a8:	15800017 	ldw	r22,0(r2)
 80247ac:	80259f00 	call	80259f0 <__divsi3>
 80247b0:	da009317 	ldw	r8,588(sp)
 80247b4:	d8809215 	stw	r2,584(sp)
 80247b8:	423fffc4 	addi	r8,r8,-1
 80247bc:	da008d15 	stw	r8,564(sp)
 80247c0:	10033b16 	blt	r2,zero,80254b0 <__kernel_rem_pio2+0xd64>
 80247c4:	da009217 	ldw	r8,584(sp)
 80247c8:	d9009217 	ldw	r4,584(sp)
 80247cc:	42000044 	addi	r8,r8,1
 80247d0:	40fffa24 	muli	r3,r8,-24
 80247d4:	da009515 	stw	r8,596(sp)
 80247d8:	da008d17 	ldw	r8,564(sp)
 80247dc:	1c07883a 	add	r3,r3,r16
 80247e0:	d8c09015 	stw	r3,576(sp)
 80247e4:	b205883a 	add	r2,r22,r8
 80247e8:	2223c83a 	sub	r17,r4,r8
 80247ec:	10001016 	blt	r2,zero,8024830 <__kernel_rem_pio2+0xe4>
 80247f0:	da00a717 	ldw	r8,668(sp)
 80247f4:	8c65883a 	add	r18,r17,r17
 80247f8:	94a5883a 	add	r18,r18,r18
 80247fc:	1445883a 	add	r2,r2,r17
 8024800:	dcc05004 	addi	r19,sp,320
 8024804:	44a5883a 	add	r18,r8,r18
 8024808:	14000044 	addi	r16,r2,1
 802480c:	88015316 	blt	r17,zero,8024d5c <__kernel_rem_pio2+0x610>
 8024810:	91000017 	ldw	r4,0(r18)
 8024814:	8028f600 	call	8028f60 <__floatsidf>
 8024818:	98800015 	stw	r2,0(r19)
 802481c:	98c00115 	stw	r3,4(r19)
 8024820:	8c400044 	addi	r17,r17,1
 8024824:	9cc00204 	addi	r19,r19,8
 8024828:	94800104 	addi	r18,r18,4
 802482c:	8c3ff71e 	bne	r17,r16,802480c <_gp+0xfffe3100>
 8024830:	b0002816 	blt	r22,zero,80248d4 <__kernel_rem_pio2+0x188>
 8024834:	da008d17 	ldw	r8,564(sp)
 8024838:	b4c00044 	addi	r19,r22,1
 802483c:	982690fa 	slli	r19,r19,3
 8024840:	402490fa 	slli	r18,r8,3
 8024844:	da008e17 	ldw	r8,568(sp)
 8024848:	d8805004 	addi	r2,sp,320
 802484c:	94000204 	addi	r16,r18,8
 8024850:	d823883a 	mov	r17,sp
 8024854:	14a5883a 	add	r18,r2,r18
 8024858:	dcef883a 	add	r23,sp,r19
 802485c:	4421883a 	add	r16,r8,r16
 8024860:	dd809115 	stw	r22,580(sp)
 8024864:	4039883a 	mov	fp,r8
 8024868:	da008d17 	ldw	r8,564(sp)
 802486c:	40016016 	blt	r8,zero,8024df0 <__kernel_rem_pio2+0x6a4>
 8024870:	e027883a 	mov	r19,fp
 8024874:	9029883a 	mov	r20,r18
 8024878:	002d883a 	mov	r22,zero
 802487c:	002b883a 	mov	r21,zero
 8024880:	a1800017 	ldw	r6,0(r20)
 8024884:	a1c00117 	ldw	r7,4(r20)
 8024888:	99000017 	ldw	r4,0(r19)
 802488c:	99400117 	ldw	r5,4(r19)
 8024890:	9cc00204 	addi	r19,r19,8
 8024894:	a53ffe04 	addi	r20,r20,-8
 8024898:	8027ecc0 	call	8027ecc <__muldf3>
 802489c:	b009883a 	mov	r4,r22
 80248a0:	a80b883a 	mov	r5,r21
 80248a4:	100d883a 	mov	r6,r2
 80248a8:	180f883a 	mov	r7,r3
 80248ac:	8026ae00 	call	8026ae0 <__adddf3>
 80248b0:	102d883a 	mov	r22,r2
 80248b4:	182b883a 	mov	r21,r3
 80248b8:	9c3ff11e 	bne	r19,r16,8024880 <_gp+0xfffe3174>
 80248bc:	8d800015 	stw	r22,0(r17)
 80248c0:	8d400115 	stw	r21,4(r17)
 80248c4:	8c400204 	addi	r17,r17,8
 80248c8:	94800204 	addi	r18,r18,8
 80248cc:	8dffe61e 	bne	r17,r23,8024868 <_gp+0xfffe315c>
 80248d0:	dd809117 	ldw	r22,580(sp)
 80248d4:	00d00034 	movhi	r3,16384
 80248d8:	da009317 	ldw	r8,588(sp)
 80248dc:	18ffff84 	addi	r3,r3,-2
 80248e0:	b0c7883a 	add	r3,r22,r3
 80248e4:	18c7883a 	add	r3,r3,r3
 80248e8:	402090fa 	slli	r16,r8,3
 80248ec:	18c7883a 	add	r3,r3,r3
 80248f0:	da007804 	addi	r8,sp,480
 80248f4:	40d1883a 	add	r8,r8,r3
 80248f8:	b0bfffc4 	addi	r2,r22,-1
 80248fc:	da009615 	stw	r8,600(sp)
 8024900:	da008e17 	ldw	r8,568(sp)
 8024904:	1085883a 	add	r2,r2,r2
 8024908:	1085883a 	add	r2,r2,r2
 802490c:	19000104 	addi	r4,r3,4
 8024910:	d885883a 	add	r2,sp,r2
 8024914:	4421883a 	add	r16,r8,r16
 8024918:	da007804 	addi	r8,sp,480
 802491c:	4111883a 	add	r8,r8,r4
 8024920:	10807804 	addi	r2,r2,480
 8024924:	da009715 	stw	r8,604(sp)
 8024928:	b025883a 	mov	r18,r22
 802492c:	d8809815 	stw	r2,608(sp)
 8024930:	dd809415 	stw	r22,592(sp)
 8024934:	900490fa 	slli	r2,r18,3
 8024938:	d885883a 	add	r2,sp,r2
 802493c:	17000017 	ldw	fp,0(r2)
 8024940:	15400117 	ldw	r21,4(r2)
 8024944:	04802b0e 	bge	zero,r18,80249f4 <__kernel_rem_pio2+0x2a8>
 8024948:	00880034 	movhi	r2,8192
 802494c:	10bfffc4 	addi	r2,r2,-1
 8024950:	90a9883a 	add	r20,r18,r2
 8024954:	a02890fa 	slli	r20,r20,3
 8024958:	dc407804 	addi	r17,sp,480
 802495c:	dcfffe04 	addi	r19,sp,-8
 8024960:	dd29883a 	add	r20,sp,r20
 8024964:	000d883a 	mov	r6,zero
 8024968:	01cf9c34 	movhi	r7,15984
 802496c:	e009883a 	mov	r4,fp
 8024970:	a80b883a 	mov	r5,r21
 8024974:	8027ecc0 	call	8027ecc <__muldf3>
 8024978:	180b883a 	mov	r5,r3
 802497c:	1009883a 	mov	r4,r2
 8024980:	8028ee00 	call	8028ee0 <__fixdfsi>
 8024984:	1009883a 	mov	r4,r2
 8024988:	8028f600 	call	8028f60 <__floatsidf>
 802498c:	000d883a 	mov	r6,zero
 8024990:	01d05c34 	movhi	r7,16752
 8024994:	1009883a 	mov	r4,r2
 8024998:	180b883a 	mov	r5,r3
 802499c:	102f883a 	mov	r23,r2
 80249a0:	182d883a 	mov	r22,r3
 80249a4:	8027ecc0 	call	8027ecc <__muldf3>
 80249a8:	100d883a 	mov	r6,r2
 80249ac:	180f883a 	mov	r7,r3
 80249b0:	e009883a 	mov	r4,fp
 80249b4:	a80b883a 	mov	r5,r21
 80249b8:	80285e40 	call	80285e4 <__subdf3>
 80249bc:	180b883a 	mov	r5,r3
 80249c0:	1009883a 	mov	r4,r2
 80249c4:	8028ee00 	call	8028ee0 <__fixdfsi>
 80249c8:	a1800017 	ldw	r6,0(r20)
 80249cc:	a1c00117 	ldw	r7,4(r20)
 80249d0:	88800015 	stw	r2,0(r17)
 80249d4:	b809883a 	mov	r4,r23
 80249d8:	b00b883a 	mov	r5,r22
 80249dc:	8026ae00 	call	8026ae0 <__adddf3>
 80249e0:	a53ffe04 	addi	r20,r20,-8
 80249e4:	1039883a 	mov	fp,r2
 80249e8:	182b883a 	mov	r21,r3
 80249ec:	8c400104 	addi	r17,r17,4
 80249f0:	a4ffdc1e 	bne	r20,r19,8024964 <_gp+0xfffe3258>
 80249f4:	d9809017 	ldw	r6,576(sp)
 80249f8:	a80b883a 	mov	r5,r21
 80249fc:	e009883a 	mov	r4,fp
 8024a00:	80258380 	call	8025838 <scalbn>
 8024a04:	000d883a 	mov	r6,zero
 8024a08:	01cff034 	movhi	r7,16320
 8024a0c:	1009883a 	mov	r4,r2
 8024a10:	180b883a 	mov	r5,r3
 8024a14:	1027883a 	mov	r19,r2
 8024a18:	1823883a 	mov	r17,r3
 8024a1c:	8027ecc0 	call	8027ecc <__muldf3>
 8024a20:	1009883a 	mov	r4,r2
 8024a24:	180b883a 	mov	r5,r3
 8024a28:	80234a80 	call	80234a8 <floor>
 8024a2c:	000d883a 	mov	r6,zero
 8024a30:	01d00834 	movhi	r7,16416
 8024a34:	1009883a 	mov	r4,r2
 8024a38:	180b883a 	mov	r5,r3
 8024a3c:	8027ecc0 	call	8027ecc <__muldf3>
 8024a40:	100d883a 	mov	r6,r2
 8024a44:	180f883a 	mov	r7,r3
 8024a48:	9809883a 	mov	r4,r19
 8024a4c:	880b883a 	mov	r5,r17
 8024a50:	80285e40 	call	80285e4 <__subdf3>
 8024a54:	180b883a 	mov	r5,r3
 8024a58:	1009883a 	mov	r4,r2
 8024a5c:	1827883a 	mov	r19,r3
 8024a60:	1029883a 	mov	r20,r2
 8024a64:	8028ee00 	call	8028ee0 <__fixdfsi>
 8024a68:	1009883a 	mov	r4,r2
 8024a6c:	1023883a 	mov	r17,r2
 8024a70:	8028f600 	call	8028f60 <__floatsidf>
 8024a74:	a009883a 	mov	r4,r20
 8024a78:	100d883a 	mov	r6,r2
 8024a7c:	180f883a 	mov	r7,r3
 8024a80:	980b883a 	mov	r5,r19
 8024a84:	80285e40 	call	80285e4 <__subdf3>
 8024a88:	d9009017 	ldw	r4,576(sp)
 8024a8c:	1013883a 	mov	r9,r2
 8024a90:	102b883a 	mov	r21,r2
 8024a94:	1811883a 	mov	r8,r3
 8024a98:	0100b30e 	bge	zero,r4,8024d68 <__kernel_rem_pio2+0x61c>
 8024a9c:	90bfffc4 	addi	r2,r18,-1
 8024aa0:	1085883a 	add	r2,r2,r2
 8024aa4:	1085883a 	add	r2,r2,r2
 8024aa8:	d885883a 	add	r2,sp,r2
 8024aac:	10807804 	addi	r2,r2,480
 8024ab0:	d9809017 	ldw	r6,576(sp)
 8024ab4:	11400017 	ldw	r5,0(r2)
 8024ab8:	01000604 	movi	r4,24
 8024abc:	2189c83a 	sub	r4,r4,r6
 8024ac0:	290dd83a 	sra	r6,r5,r4
 8024ac4:	d9c09017 	ldw	r7,576(sp)
 8024ac8:	04c005c4 	movi	r19,23
 8024acc:	3108983a 	sll	r4,r6,r4
 8024ad0:	99e7c83a 	sub	r19,r19,r7
 8024ad4:	89a3883a 	add	r17,r17,r6
 8024ad8:	2909c83a 	sub	r4,r5,r4
 8024adc:	24e7d83a 	sra	r19,r4,r19
 8024ae0:	11000015 	stw	r4,0(r2)
 8024ae4:	04c02a0e 	bge	zero,r19,8024b90 <__kernel_rem_pio2+0x444>
 8024ae8:	8c400044 	addi	r17,r17,1
 8024aec:	0481570e 	bge	zero,r18,802504c <__kernel_rem_pio2+0x900>
 8024af0:	02804034 	movhi	r10,256
 8024af4:	52bfffc4 	addi	r10,r10,-1
 8024af8:	d8807804 	addi	r2,sp,480
 8024afc:	000b883a 	mov	r5,zero
 8024b00:	0029883a 	mov	r20,zero
 8024b04:	01c04034 	movhi	r7,256
 8024b08:	00000706 	br	8024b28 <__kernel_rem_pio2+0x3dc>
 8024b0c:	390dc83a 	sub	r6,r7,r4
 8024b10:	20000226 	beq	r4,zero,8024b1c <__kernel_rem_pio2+0x3d0>
 8024b14:	11800015 	stw	r6,0(r2)
 8024b18:	05000044 	movi	r20,1
 8024b1c:	29400044 	addi	r5,r5,1
 8024b20:	10800104 	addi	r2,r2,4
 8024b24:	2c80080e 	bge	r5,r18,8024b48 <__kernel_rem_pio2+0x3fc>
 8024b28:	11000017 	ldw	r4,0(r2)
 8024b2c:	a03ff726 	beq	r20,zero,8024b0c <_gp+0xfffe3400>
 8024b30:	5109c83a 	sub	r4,r10,r4
 8024b34:	11000015 	stw	r4,0(r2)
 8024b38:	29400044 	addi	r5,r5,1
 8024b3c:	05000044 	movi	r20,1
 8024b40:	10800104 	addi	r2,r2,4
 8024b44:	2cbff816 	blt	r5,r18,8024b28 <_gp+0xfffe341c>
 8024b48:	d9009017 	ldw	r4,576(sp)
 8024b4c:	01000e0e 	bge	zero,r4,8024b88 <__kernel_rem_pio2+0x43c>
 8024b50:	00800044 	movi	r2,1
 8024b54:	20808d26 	beq	r4,r2,8024d8c <__kernel_rem_pio2+0x640>
 8024b58:	00800084 	movi	r2,2
 8024b5c:	20800a1e 	bne	r4,r2,8024b88 <__kernel_rem_pio2+0x43c>
 8024b60:	90bfffc4 	addi	r2,r18,-1
 8024b64:	1085883a 	add	r2,r2,r2
 8024b68:	1085883a 	add	r2,r2,r2
 8024b6c:	d885883a 	add	r2,sp,r2
 8024b70:	10807804 	addi	r2,r2,480
 8024b74:	11400017 	ldw	r5,0(r2)
 8024b78:	01001034 	movhi	r4,64
 8024b7c:	213fffc4 	addi	r4,r4,-1
 8024b80:	2908703a 	and	r4,r5,r4
 8024b84:	11000015 	stw	r4,0(r2)
 8024b88:	00800084 	movi	r2,2
 8024b8c:	98805d26 	beq	r19,r2,8024d04 <__kernel_rem_pio2+0x5b8>
 8024b90:	400b883a 	mov	r5,r8
 8024b94:	000d883a 	mov	r6,zero
 8024b98:	000f883a 	mov	r7,zero
 8024b9c:	a809883a 	mov	r4,r21
 8024ba0:	da009b15 	stw	r8,620(sp)
 8024ba4:	8027c740 	call	8027c74 <__eqdf2>
 8024ba8:	da009b17 	ldw	r8,620(sp)
 8024bac:	10012b1e 	bne	r2,zero,802505c <__kernel_rem_pio2+0x910>
 8024bb0:	da009417 	ldw	r8,592(sp)
 8024bb4:	917fffc4 	addi	r5,r18,-1
 8024bb8:	2a000e16 	blt	r5,r8,8024bf4 <__kernel_rem_pio2+0x4a8>
 8024bbc:	00900034 	movhi	r2,16384
 8024bc0:	10bfffc4 	addi	r2,r2,-1
 8024bc4:	9085883a 	add	r2,r18,r2
 8024bc8:	1085883a 	add	r2,r2,r2
 8024bcc:	d9809717 	ldw	r6,604(sp)
 8024bd0:	1085883a 	add	r2,r2,r2
 8024bd4:	d9007804 	addi	r4,sp,480
 8024bd8:	0007883a 	mov	r3,zero
 8024bdc:	2085883a 	add	r2,r4,r2
 8024be0:	11000017 	ldw	r4,0(r2)
 8024be4:	10bfff04 	addi	r2,r2,-4
 8024be8:	1906b03a 	or	r3,r3,r4
 8024bec:	11bffc1e 	bne	r2,r6,8024be0 <_gp+0xfffe34d4>
 8024bf0:	1800821e 	bne	r3,zero,8024dfc <__kernel_rem_pio2+0x6b0>
 8024bf4:	da009817 	ldw	r8,608(sp)
 8024bf8:	40800017 	ldw	r2,0(r8)
 8024bfc:	1001151e 	bne	r2,zero,8025054 <__kernel_rem_pio2+0x908>
 8024c00:	d8809617 	ldw	r2,600(sp)
 8024c04:	05000044 	movi	r20,1
 8024c08:	10bfff04 	addi	r2,r2,-4
 8024c0c:	10c00117 	ldw	r3,4(r2)
 8024c10:	a5000044 	addi	r20,r20,1
 8024c14:	183ffc26 	beq	r3,zero,8024c08 <_gp+0xfffe34fc>
 8024c18:	9529883a 	add	r20,r18,r20
 8024c1c:	90800044 	addi	r2,r18,1
 8024c20:	dd009115 	stw	r20,580(sp)
 8024c24:	a0803216 	blt	r20,r2,8024cf0 <__kernel_rem_pio2+0x5a4>
 8024c28:	da009317 	ldw	r8,588(sp)
 8024c2c:	d8c09117 	ldw	r3,580(sp)
 8024c30:	44a3883a 	add	r17,r8,r18
 8024c34:	da009217 	ldw	r8,584(sp)
 8024c38:	882290fa 	slli	r17,r17,3
 8024c3c:	40a5883a 	add	r18,r8,r2
 8024c40:	da009517 	ldw	r8,596(sp)
 8024c44:	100490fa 	slli	r2,r2,3
 8024c48:	94a5883a 	add	r18,r18,r18
 8024c4c:	40eb883a 	add	r21,r8,r3
 8024c50:	da00a717 	ldw	r8,668(sp)
 8024c54:	ad6b883a 	add	r21,r21,r21
 8024c58:	94a5883a 	add	r18,r18,r18
 8024c5c:	ad6b883a 	add	r21,r21,r21
 8024c60:	d8c05004 	addi	r3,sp,320
 8024c64:	44a5883a 	add	r18,r8,r18
 8024c68:	1c63883a 	add	r17,r3,r17
 8024c6c:	d8a7883a 	add	r19,sp,r2
 8024c70:	456b883a 	add	r21,r8,r21
 8024c74:	91000017 	ldw	r4,0(r18)
 8024c78:	8028f600 	call	8028f60 <__floatsidf>
 8024c7c:	da008d17 	ldw	r8,564(sp)
 8024c80:	88800015 	stw	r2,0(r17)
 8024c84:	88c00115 	stw	r3,4(r17)
 8024c88:	40001b16 	blt	r8,zero,8024cf8 <__kernel_rem_pio2+0x5ac>
 8024c8c:	dd008e17 	ldw	r20,568(sp)
 8024c90:	882d883a 	mov	r22,r17
 8024c94:	002f883a 	mov	r23,zero
 8024c98:	0039883a 	mov	fp,zero
 8024c9c:	b1800017 	ldw	r6,0(r22)
 8024ca0:	b1c00117 	ldw	r7,4(r22)
 8024ca4:	a1000017 	ldw	r4,0(r20)
 8024ca8:	a1400117 	ldw	r5,4(r20)
 8024cac:	a5000204 	addi	r20,r20,8
 8024cb0:	b5bffe04 	addi	r22,r22,-8
 8024cb4:	8027ecc0 	call	8027ecc <__muldf3>
 8024cb8:	b809883a 	mov	r4,r23
 8024cbc:	e00b883a 	mov	r5,fp
 8024cc0:	100d883a 	mov	r6,r2
 8024cc4:	180f883a 	mov	r7,r3
 8024cc8:	8026ae00 	call	8026ae0 <__adddf3>
 8024ccc:	102f883a 	mov	r23,r2
 8024cd0:	1839883a 	mov	fp,r3
 8024cd4:	a43ff11e 	bne	r20,r16,8024c9c <_gp+0xfffe3590>
 8024cd8:	9dc00015 	stw	r23,0(r19)
 8024cdc:	9f000115 	stw	fp,4(r19)
 8024ce0:	94800104 	addi	r18,r18,4
 8024ce4:	8c400204 	addi	r17,r17,8
 8024ce8:	9cc00204 	addi	r19,r19,8
 8024cec:	957fe11e 	bne	r18,r21,8024c74 <_gp+0xfffe3568>
 8024cf0:	dc809117 	ldw	r18,580(sp)
 8024cf4:	003f0f06 	br	8024934 <_gp+0xfffe3228>
 8024cf8:	002f883a 	mov	r23,zero
 8024cfc:	0039883a 	mov	fp,zero
 8024d00:	003ff506 	br	8024cd8 <_gp+0xfffe35cc>
 8024d04:	480d883a 	mov	r6,r9
 8024d08:	180f883a 	mov	r7,r3
 8024d0c:	0009883a 	mov	r4,zero
 8024d10:	014ffc34 	movhi	r5,16368
 8024d14:	80285e40 	call	80285e4 <__subdf3>
 8024d18:	102b883a 	mov	r21,r2
 8024d1c:	1811883a 	mov	r8,r3
 8024d20:	a03f9b26 	beq	r20,zero,8024b90 <_gp+0xfffe3484>
 8024d24:	d9809017 	ldw	r6,576(sp)
 8024d28:	0009883a 	mov	r4,zero
 8024d2c:	014ffc34 	movhi	r5,16368
 8024d30:	d8c09b15 	stw	r3,620(sp)
 8024d34:	80258380 	call	8025838 <scalbn>
 8024d38:	da009b17 	ldw	r8,620(sp)
 8024d3c:	a809883a 	mov	r4,r21
 8024d40:	100d883a 	mov	r6,r2
 8024d44:	400b883a 	mov	r5,r8
 8024d48:	180f883a 	mov	r7,r3
 8024d4c:	80285e40 	call	80285e4 <__subdf3>
 8024d50:	102b883a 	mov	r21,r2
 8024d54:	1811883a 	mov	r8,r3
 8024d58:	003f8d06 	br	8024b90 <_gp+0xfffe3484>
 8024d5c:	0005883a 	mov	r2,zero
 8024d60:	0007883a 	mov	r3,zero
 8024d64:	003eac06 	br	8024818 <_gp+0xfffe310c>
 8024d68:	d8809017 	ldw	r2,576(sp)
 8024d6c:	1000121e 	bne	r2,zero,8024db8 <__kernel_rem_pio2+0x66c>
 8024d70:	90bfffc4 	addi	r2,r18,-1
 8024d74:	1085883a 	add	r2,r2,r2
 8024d78:	1085883a 	add	r2,r2,r2
 8024d7c:	d885883a 	add	r2,sp,r2
 8024d80:	14c07817 	ldw	r19,480(r2)
 8024d84:	9827d5fa 	srai	r19,r19,23
 8024d88:	003f5606 	br	8024ae4 <_gp+0xfffe33d8>
 8024d8c:	90bfffc4 	addi	r2,r18,-1
 8024d90:	1085883a 	add	r2,r2,r2
 8024d94:	1085883a 	add	r2,r2,r2
 8024d98:	d885883a 	add	r2,sp,r2
 8024d9c:	10807804 	addi	r2,r2,480
 8024da0:	11000017 	ldw	r4,0(r2)
 8024da4:	01402034 	movhi	r5,128
 8024da8:	297fffc4 	addi	r5,r5,-1
 8024dac:	2148703a 	and	r4,r4,r5
 8024db0:	11000015 	stw	r4,0(r2)
 8024db4:	003f7406 	br	8024b88 <_gp+0xfffe347c>
 8024db8:	4809883a 	mov	r4,r9
 8024dbc:	180b883a 	mov	r5,r3
 8024dc0:	000d883a 	mov	r6,zero
 8024dc4:	01cff834 	movhi	r7,16352
 8024dc8:	d8c09a15 	stw	r3,616(sp)
 8024dcc:	d8c09b15 	stw	r3,620(sp)
 8024dd0:	da409915 	stw	r9,612(sp)
 8024dd4:	8027cfc0 	call	8027cfc <__gedf2>
 8024dd8:	d8c09a17 	ldw	r3,616(sp)
 8024ddc:	da009b17 	ldw	r8,620(sp)
 8024de0:	da409917 	ldw	r9,612(sp)
 8024de4:	1000920e 	bge	r2,zero,8025030 <__kernel_rem_pio2+0x8e4>
 8024de8:	0027883a 	mov	r19,zero
 8024dec:	003f6806 	br	8024b90 <_gp+0xfffe3484>
 8024df0:	002d883a 	mov	r22,zero
 8024df4:	002b883a 	mov	r21,zero
 8024df8:	003eb006 	br	80248bc <_gp+0xfffe31b0>
 8024dfc:	2945883a 	add	r2,r5,r5
 8024e00:	da009017 	ldw	r8,576(sp)
 8024e04:	1085883a 	add	r2,r2,r2
 8024e08:	d885883a 	add	r2,sp,r2
 8024e0c:	10807817 	ldw	r2,480(r2)
 8024e10:	423ffa04 	addi	r8,r8,-24
 8024e14:	dc409115 	stw	r17,580(sp)
 8024e18:	dcc08d15 	stw	r19,564(sp)
 8024e1c:	da009015 	stw	r8,576(sp)
 8024e20:	dd809417 	ldw	r22,592(sp)
 8024e24:	2823883a 	mov	r17,r5
 8024e28:	10000e1e 	bne	r2,zero,8024e64 <__kernel_rem_pio2+0x718>
 8024e2c:	00900034 	movhi	r2,16384
 8024e30:	10bfffc4 	addi	r2,r2,-1
 8024e34:	2885883a 	add	r2,r5,r2
 8024e38:	1085883a 	add	r2,r2,r2
 8024e3c:	d8c07804 	addi	r3,sp,480
 8024e40:	1085883a 	add	r2,r2,r2
 8024e44:	1885883a 	add	r2,r3,r2
 8024e48:	4007883a 	mov	r3,r8
 8024e4c:	10bfff04 	addi	r2,r2,-4
 8024e50:	11000117 	ldw	r4,4(r2)
 8024e54:	8c7fffc4 	addi	r17,r17,-1
 8024e58:	18fffa04 	addi	r3,r3,-24
 8024e5c:	203ffb26 	beq	r4,zero,8024e4c <_gp+0xfffe3740>
 8024e60:	d8c09015 	stw	r3,576(sp)
 8024e64:	d9809017 	ldw	r6,576(sp)
 8024e68:	0009883a 	mov	r4,zero
 8024e6c:	014ffc34 	movhi	r5,16368
 8024e70:	80258380 	call	8025838 <scalbn>
 8024e74:	1029883a 	mov	r20,r2
 8024e78:	182b883a 	mov	r21,r3
 8024e7c:	88018416 	blt	r17,zero,8025490 <__kernel_rem_pio2+0xd44>
 8024e80:	881090fa 	slli	r8,r17,3
 8024e84:	d8c07804 	addi	r3,sp,480
 8024e88:	da008e15 	stw	r8,568(sp)
 8024e8c:	d8808e17 	ldw	r2,568(sp)
 8024e90:	8c51883a 	add	r8,r17,r17
 8024e94:	4211883a 	add	r8,r8,r8
 8024e98:	d8a1883a 	add	r16,sp,r2
 8024e9c:	1a25883a 	add	r18,r3,r8
 8024ea0:	da3ffe04 	addi	r8,sp,-8
 8024ea4:	da008c15 	stw	r8,560(sp)
 8024ea8:	8039883a 	mov	fp,r16
 8024eac:	91000017 	ldw	r4,0(r18)
 8024eb0:	e73ffe04 	addi	fp,fp,-8
 8024eb4:	94bfff04 	addi	r18,r18,-4
 8024eb8:	8028f600 	call	8028f60 <__floatsidf>
 8024ebc:	a00d883a 	mov	r6,r20
 8024ec0:	a80f883a 	mov	r7,r21
 8024ec4:	1009883a 	mov	r4,r2
 8024ec8:	180b883a 	mov	r5,r3
 8024ecc:	8027ecc0 	call	8027ecc <__muldf3>
 8024ed0:	a009883a 	mov	r4,r20
 8024ed4:	a80b883a 	mov	r5,r21
 8024ed8:	e0800215 	stw	r2,8(fp)
 8024edc:	e0c00315 	stw	r3,12(fp)
 8024ee0:	000d883a 	mov	r6,zero
 8024ee4:	01cf9c34 	movhi	r7,15984
 8024ee8:	8027ecc0 	call	8027ecc <__muldf3>
 8024eec:	da008c17 	ldw	r8,560(sp)
 8024ef0:	1029883a 	mov	r20,r2
 8024ef4:	182b883a 	mov	r21,r3
 8024ef8:	e23fec1e 	bne	fp,r8,8024eac <_gp+0xfffe37a0>
 8024efc:	0029883a 	mov	r20,zero
 8024f00:	b0004f16 	blt	r22,zero,8025040 <__kernel_rem_pio2+0x8f4>
 8024f04:	054200f4 	movhi	r21,2051
 8024f08:	014ffe74 	movhi	r5,16377
 8024f0c:	ad5dd704 	addi	r21,r21,30556
 8024f10:	8027883a 	mov	r19,r16
 8024f14:	01100034 	movhi	r4,16384
 8024f18:	29487ec4 	addi	r5,r5,8699
 8024f1c:	0039883a 	mov	fp,zero
 8024f20:	002f883a 	mov	r23,zero
 8024f24:	0025883a 	mov	r18,zero
 8024f28:	00000506 	br	8024f40 <__kernel_rem_pio2+0x7f4>
 8024f2c:	9cc00204 	addi	r19,r19,8
 8024f30:	a4800f16 	blt	r20,r18,8024f70 <__kernel_rem_pio2+0x824>
 8024f34:	a9000017 	ldw	r4,0(r21)
 8024f38:	a9400117 	ldw	r5,4(r21)
 8024f3c:	ad400204 	addi	r21,r21,8
 8024f40:	99800017 	ldw	r6,0(r19)
 8024f44:	99c00117 	ldw	r7,4(r19)
 8024f48:	94800044 	addi	r18,r18,1
 8024f4c:	8027ecc0 	call	8027ecc <__muldf3>
 8024f50:	e009883a 	mov	r4,fp
 8024f54:	b80b883a 	mov	r5,r23
 8024f58:	100d883a 	mov	r6,r2
 8024f5c:	180f883a 	mov	r7,r3
 8024f60:	8026ae00 	call	8026ae0 <__adddf3>
 8024f64:	1039883a 	mov	fp,r2
 8024f68:	182f883a 	mov	r23,r3
 8024f6c:	b4bfef0e 	bge	r22,r18,8024f2c <_gp+0xfffe3820>
 8024f70:	a00490fa 	slli	r2,r20,3
 8024f74:	da008c17 	ldw	r8,560(sp)
 8024f78:	843ffe04 	addi	r16,r16,-8
 8024f7c:	d885883a 	add	r2,sp,r2
 8024f80:	10802804 	addi	r2,r2,160
 8024f84:	17000015 	stw	fp,0(r2)
 8024f88:	15c00115 	stw	r23,4(r2)
 8024f8c:	a5000044 	addi	r20,r20,1
 8024f90:	823fdb1e 	bne	r16,r8,8024f00 <_gp+0xfffe37f4>
 8024f94:	da00a617 	ldw	r8,664(sp)
 8024f98:	00800084 	movi	r2,2
 8024f9c:	12006616 	blt	r2,r8,8025138 <__kernel_rem_pio2+0x9ec>
 8024fa0:	0200de16 	blt	zero,r8,802531c <__kernel_rem_pio2+0xbd0>
 8024fa4:	4000141e 	bne	r8,zero,8024ff8 <__kernel_rem_pio2+0x8ac>
 8024fa8:	da008e17 	ldw	r8,568(sp)
 8024fac:	d8802804 	addi	r2,sp,160
 8024fb0:	0007883a 	mov	r3,zero
 8024fb4:	1225883a 	add	r18,r2,r8
 8024fb8:	043fffc4 	movi	r16,-1
 8024fbc:	0005883a 	mov	r2,zero
 8024fc0:	91800017 	ldw	r6,0(r18)
 8024fc4:	91c00117 	ldw	r7,4(r18)
 8024fc8:	1009883a 	mov	r4,r2
 8024fcc:	180b883a 	mov	r5,r3
 8024fd0:	8c7fffc4 	addi	r17,r17,-1
 8024fd4:	8026ae00 	call	8026ae0 <__adddf3>
 8024fd8:	94bffe04 	addi	r18,r18,-8
 8024fdc:	8c3ff81e 	bne	r17,r16,8024fc0 <_gp+0xfffe38b4>
 8024fe0:	da008d17 	ldw	r8,564(sp)
 8024fe4:	40000126 	beq	r8,zero,8024fec <__kernel_rem_pio2+0x8a0>
 8024fe8:	18e0003c 	xorhi	r3,r3,32768
 8024fec:	da008f17 	ldw	r8,572(sp)
 8024ff0:	40800015 	stw	r2,0(r8)
 8024ff4:	40c00115 	stw	r3,4(r8)
 8024ff8:	da009117 	ldw	r8,580(sp)
 8024ffc:	408001cc 	andi	r2,r8,7
 8025000:	dfc0a517 	ldw	ra,660(sp)
 8025004:	df00a417 	ldw	fp,656(sp)
 8025008:	ddc0a317 	ldw	r23,652(sp)
 802500c:	dd80a217 	ldw	r22,648(sp)
 8025010:	dd40a117 	ldw	r21,644(sp)
 8025014:	dd00a017 	ldw	r20,640(sp)
 8025018:	dcc09f17 	ldw	r19,636(sp)
 802501c:	dc809e17 	ldw	r18,632(sp)
 8025020:	dc409d17 	ldw	r17,628(sp)
 8025024:	dc009c17 	ldw	r16,624(sp)
 8025028:	dec0a604 	addi	sp,sp,664
 802502c:	f800283a 	ret
 8025030:	8c400044 	addi	r17,r17,1
 8025034:	04810d0e 	bge	zero,r18,802546c <__kernel_rem_pio2+0xd20>
 8025038:	04c00084 	movi	r19,2
 802503c:	003eac06 	br	8024af0 <_gp+0xfffe33e4>
 8025040:	0039883a 	mov	fp,zero
 8025044:	002f883a 	mov	r23,zero
 8025048:	003fc906 	br	8024f70 <_gp+0xfffe3864>
 802504c:	0029883a 	mov	r20,zero
 8025050:	003ebd06 	br	8024b48 <_gp+0xfffe343c>
 8025054:	05000044 	movi	r20,1
 8025058:	003eef06 	br	8024c18 <_gp+0xfffe350c>
 802505c:	4029883a 	mov	r20,r8
 8025060:	da009017 	ldw	r8,576(sp)
 8025064:	a809883a 	mov	r4,r21
 8025068:	a00b883a 	mov	r5,r20
 802506c:	020dc83a 	sub	r6,zero,r8
 8025070:	dc409115 	stw	r17,580(sp)
 8025074:	dd809417 	ldw	r22,592(sp)
 8025078:	dcc08d15 	stw	r19,564(sp)
 802507c:	80258380 	call	8025838 <scalbn>
 8025080:	000d883a 	mov	r6,zero
 8025084:	01d05c34 	movhi	r7,16752
 8025088:	1009883a 	mov	r4,r2
 802508c:	180b883a 	mov	r5,r3
 8025090:	102b883a 	mov	r21,r2
 8025094:	1823883a 	mov	r17,r3
 8025098:	8027cfc0 	call	8027cfc <__gedf2>
 802509c:	1000e916 	blt	r2,zero,8025444 <__kernel_rem_pio2+0xcf8>
 80250a0:	000d883a 	mov	r6,zero
 80250a4:	01cf9c34 	movhi	r7,15984
 80250a8:	880b883a 	mov	r5,r17
 80250ac:	a809883a 	mov	r4,r21
 80250b0:	8027ecc0 	call	8027ecc <__muldf3>
 80250b4:	180b883a 	mov	r5,r3
 80250b8:	1009883a 	mov	r4,r2
 80250bc:	8028ee00 	call	8028ee0 <__fixdfsi>
 80250c0:	1029883a 	mov	r20,r2
 80250c4:	9485883a 	add	r2,r18,r18
 80250c8:	1085883a 	add	r2,r2,r2
 80250cc:	a009883a 	mov	r4,r20
 80250d0:	d8a1883a 	add	r16,sp,r2
 80250d4:	8028f600 	call	8028f60 <__floatsidf>
 80250d8:	000d883a 	mov	r6,zero
 80250dc:	01d05c34 	movhi	r7,16752
 80250e0:	1009883a 	mov	r4,r2
 80250e4:	180b883a 	mov	r5,r3
 80250e8:	8027ecc0 	call	8027ecc <__muldf3>
 80250ec:	880b883a 	mov	r5,r17
 80250f0:	100d883a 	mov	r6,r2
 80250f4:	180f883a 	mov	r7,r3
 80250f8:	a809883a 	mov	r4,r21
 80250fc:	80285e40 	call	80285e4 <__subdf3>
 8025100:	180b883a 	mov	r5,r3
 8025104:	1009883a 	mov	r4,r2
 8025108:	8028ee00 	call	8028ee0 <__fixdfsi>
 802510c:	da009017 	ldw	r8,576(sp)
 8025110:	94400044 	addi	r17,r18,1
 8025114:	8c47883a 	add	r3,r17,r17
 8025118:	84007804 	addi	r16,r16,480
 802511c:	18c7883a 	add	r3,r3,r3
 8025120:	80800015 	stw	r2,0(r16)
 8025124:	d8c7883a 	add	r3,sp,r3
 8025128:	42000604 	addi	r8,r8,24
 802512c:	da009015 	stw	r8,576(sp)
 8025130:	1d007815 	stw	r20,480(r3)
 8025134:	003f4b06 	br	8024e64 <_gp+0xfffe3758>
 8025138:	da00a617 	ldw	r8,664(sp)
 802513c:	008000c4 	movi	r2,3
 8025140:	40bfad1e 	bne	r8,r2,8024ff8 <_gp+0xfffe38ec>
 8025144:	0440bc0e 	bge	zero,r17,8025438 <__kernel_rem_pio2+0xcec>
 8025148:	da008e17 	ldw	r8,568(sp)
 802514c:	882090fa 	slli	r16,r17,3
 8025150:	dd402804 	addi	r21,sp,160
 8025154:	da05883a 	add	r2,sp,r8
 8025158:	10802804 	addi	r2,r2,160
 802515c:	15c00017 	ldw	r23,0(r2)
 8025160:	15800117 	ldw	r22,4(r2)
 8025164:	8029883a 	mov	r20,r16
 8025168:	843ffe04 	addi	r16,r16,-8
 802516c:	ac21883a 	add	r16,r21,r16
 8025170:	ad29883a 	add	r20,r21,r20
 8025174:	dac02604 	addi	r11,sp,152
 8025178:	8811883a 	mov	r8,r17
 802517c:	84400017 	ldw	r17,0(r16)
 8025180:	87000117 	ldw	fp,4(r16)
 8025184:	b80d883a 	mov	r6,r23
 8025188:	b00f883a 	mov	r7,r22
 802518c:	8809883a 	mov	r4,r17
 8025190:	e00b883a 	mov	r5,fp
 8025194:	da009b15 	stw	r8,620(sp)
 8025198:	dac09915 	stw	r11,612(sp)
 802519c:	8026ae00 	call	8026ae0 <__adddf3>
 80251a0:	100d883a 	mov	r6,r2
 80251a4:	180f883a 	mov	r7,r3
 80251a8:	8809883a 	mov	r4,r17
 80251ac:	e00b883a 	mov	r5,fp
 80251b0:	1027883a 	mov	r19,r2
 80251b4:	1825883a 	mov	r18,r3
 80251b8:	80285e40 	call	80285e4 <__subdf3>
 80251bc:	b80d883a 	mov	r6,r23
 80251c0:	b00f883a 	mov	r7,r22
 80251c4:	1009883a 	mov	r4,r2
 80251c8:	180b883a 	mov	r5,r3
 80251cc:	8026ae00 	call	8026ae0 <__adddf3>
 80251d0:	dac09917 	ldw	r11,612(sp)
 80251d4:	a0800015 	stw	r2,0(r20)
 80251d8:	a0c00115 	stw	r3,4(r20)
 80251dc:	84c00015 	stw	r19,0(r16)
 80251e0:	84800115 	stw	r18,4(r16)
 80251e4:	843ffe04 	addi	r16,r16,-8
 80251e8:	a53ffe04 	addi	r20,r20,-8
 80251ec:	982f883a 	mov	r23,r19
 80251f0:	902d883a 	mov	r22,r18
 80251f4:	da009b17 	ldw	r8,620(sp)
 80251f8:	5c3fe01e 	bne	r11,r16,802517c <_gp+0xfffe3a70>
 80251fc:	00800044 	movi	r2,1
 8025200:	12008d0e 	bge	r2,r8,8025438 <__kernel_rem_pio2+0xcec>
 8025204:	402090fa 	slli	r16,r8,3
 8025208:	da008e17 	ldw	r8,568(sp)
 802520c:	8023883a 	mov	r17,r16
 8025210:	da05883a 	add	r2,sp,r8
 8025214:	10802804 	addi	r2,r2,160
 8025218:	15800017 	ldw	r22,0(r2)
 802521c:	15000117 	ldw	r20,4(r2)
 8025220:	ac63883a 	add	r17,r21,r17
 8025224:	843ffe04 	addi	r16,r16,-8
 8025228:	ac21883a 	add	r16,r21,r16
 802522c:	8825883a 	mov	r18,r17
 8025230:	8811883a 	mov	r8,r17
 8025234:	84400017 	ldw	r17,0(r16)
 8025238:	87000117 	ldw	fp,4(r16)
 802523c:	b009883a 	mov	r4,r22
 8025240:	a00b883a 	mov	r5,r20
 8025244:	880d883a 	mov	r6,r17
 8025248:	e00f883a 	mov	r7,fp
 802524c:	da009b15 	stw	r8,620(sp)
 8025250:	8026ae00 	call	8026ae0 <__adddf3>
 8025254:	100d883a 	mov	r6,r2
 8025258:	180f883a 	mov	r7,r3
 802525c:	8809883a 	mov	r4,r17
 8025260:	e00b883a 	mov	r5,fp
 8025264:	102f883a 	mov	r23,r2
 8025268:	1827883a 	mov	r19,r3
 802526c:	80285e40 	call	80285e4 <__subdf3>
 8025270:	b00d883a 	mov	r6,r22
 8025274:	a00f883a 	mov	r7,r20
 8025278:	1009883a 	mov	r4,r2
 802527c:	180b883a 	mov	r5,r3
 8025280:	8026ae00 	call	8026ae0 <__adddf3>
 8025284:	90800015 	stw	r2,0(r18)
 8025288:	90c00115 	stw	r3,4(r18)
 802528c:	85c00015 	stw	r23,0(r16)
 8025290:	84c00115 	stw	r19,4(r16)
 8025294:	843ffe04 	addi	r16,r16,-8
 8025298:	94bffe04 	addi	r18,r18,-8
 802529c:	b82d883a 	mov	r22,r23
 80252a0:	9829883a 	mov	r20,r19
 80252a4:	da009b17 	ldw	r8,620(sp)
 80252a8:	ac3fe21e 	bne	r21,r16,8025234 <_gp+0xfffe3b28>
 80252ac:	4023883a 	mov	r17,r8
 80252b0:	dc002a04 	addi	r16,sp,168
 80252b4:	0005883a 	mov	r2,zero
 80252b8:	0007883a 	mov	r3,zero
 80252bc:	89800017 	ldw	r6,0(r17)
 80252c0:	89c00117 	ldw	r7,4(r17)
 80252c4:	1009883a 	mov	r4,r2
 80252c8:	8c7ffe04 	addi	r17,r17,-8
 80252cc:	180b883a 	mov	r5,r3
 80252d0:	8026ae00 	call	8026ae0 <__adddf3>
 80252d4:	847ff91e 	bne	r16,r17,80252bc <_gp+0xfffe3bb0>
 80252d8:	da008d17 	ldw	r8,564(sp)
 80252dc:	40004726 	beq	r8,zero,80253fc <__kernel_rem_pio2+0xcb0>
 80252e0:	d9002b17 	ldw	r4,172(sp)
 80252e4:	d9402917 	ldw	r5,164(sp)
 80252e8:	d9802a17 	ldw	r6,168(sp)
 80252ec:	da008f17 	ldw	r8,572(sp)
 80252f0:	d9c02817 	ldw	r7,160(sp)
 80252f4:	2960003c 	xorhi	r5,r5,32768
 80252f8:	2120003c 	xorhi	r4,r4,32768
 80252fc:	18e0003c 	xorhi	r3,r3,32768
 8025300:	41c00015 	stw	r7,0(r8)
 8025304:	41400115 	stw	r5,4(r8)
 8025308:	41800215 	stw	r6,8(r8)
 802530c:	41000315 	stw	r4,12(r8)
 8025310:	40800415 	stw	r2,16(r8)
 8025314:	40c00515 	stw	r3,20(r8)
 8025318:	003f3706 	br	8024ff8 <_gp+0xfffe38ec>
 802531c:	da008e17 	ldw	r8,568(sp)
 8025320:	d8802804 	addi	r2,sp,160
 8025324:	dc002604 	addi	r16,sp,152
 8025328:	1225883a 	add	r18,r2,r8
 802532c:	0007883a 	mov	r3,zero
 8025330:	0005883a 	mov	r2,zero
 8025334:	91800017 	ldw	r6,0(r18)
 8025338:	91c00117 	ldw	r7,4(r18)
 802533c:	1009883a 	mov	r4,r2
 8025340:	94bffe04 	addi	r18,r18,-8
 8025344:	180b883a 	mov	r5,r3
 8025348:	8026ae00 	call	8026ae0 <__adddf3>
 802534c:	943ff91e 	bne	r18,r16,8025334 <_gp+0xfffe3c28>
 8025350:	da008d17 	ldw	r8,564(sp)
 8025354:	d9002817 	ldw	r4,160(sp)
 8025358:	d9402917 	ldw	r5,164(sp)
 802535c:	40001a26 	beq	r8,zero,80253c8 <__kernel_rem_pio2+0xc7c>
 8025360:	da008f17 	ldw	r8,572(sp)
 8025364:	19a0003c 	xorhi	r6,r3,32768
 8025368:	180f883a 	mov	r7,r3
 802536c:	41800115 	stw	r6,4(r8)
 8025370:	40800015 	stw	r2,0(r8)
 8025374:	100d883a 	mov	r6,r2
 8025378:	80285e40 	call	80285e4 <__subdf3>
 802537c:	04400c0e 	bge	zero,r17,80253b0 <__kernel_rem_pio2+0xc64>
 8025380:	dc002a04 	addi	r16,sp,168
 8025384:	04800044 	movi	r18,1
 8025388:	81800017 	ldw	r6,0(r16)
 802538c:	81c00117 	ldw	r7,4(r16)
 8025390:	1009883a 	mov	r4,r2
 8025394:	180b883a 	mov	r5,r3
 8025398:	94800044 	addi	r18,r18,1
 802539c:	8026ae00 	call	8026ae0 <__adddf3>
 80253a0:	84000204 	addi	r16,r16,8
 80253a4:	8cbff80e 	bge	r17,r18,8025388 <_gp+0xfffe3c7c>
 80253a8:	da008d17 	ldw	r8,564(sp)
 80253ac:	40004226 	beq	r8,zero,80254b8 <__kernel_rem_pio2+0xd6c>
 80253b0:	da008f17 	ldw	r8,572(sp)
 80253b4:	1009883a 	mov	r4,r2
 80253b8:	18a0003c 	xorhi	r2,r3,32768
 80253bc:	41000215 	stw	r4,8(r8)
 80253c0:	40800315 	stw	r2,12(r8)
 80253c4:	003f0c06 	br	8024ff8 <_gp+0xfffe38ec>
 80253c8:	da008f17 	ldw	r8,572(sp)
 80253cc:	100d883a 	mov	r6,r2
 80253d0:	180f883a 	mov	r7,r3
 80253d4:	40800015 	stw	r2,0(r8)
 80253d8:	40c00115 	stw	r3,4(r8)
 80253dc:	80285e40 	call	80285e4 <__subdf3>
 80253e0:	047fe716 	blt	zero,r17,8025380 <_gp+0xfffe3c74>
 80253e4:	da008f17 	ldw	r8,572(sp)
 80253e8:	1009883a 	mov	r4,r2
 80253ec:	1805883a 	mov	r2,r3
 80253f0:	41000215 	stw	r4,8(r8)
 80253f4:	40800315 	stw	r2,12(r8)
 80253f8:	003eff06 	br	8024ff8 <_gp+0xfffe38ec>
 80253fc:	da008f17 	ldw	r8,572(sp)
 8025400:	d9802817 	ldw	r6,160(sp)
 8025404:	d9402a17 	ldw	r5,168(sp)
 8025408:	d9002b17 	ldw	r4,172(sp)
 802540c:	41800015 	stw	r6,0(r8)
 8025410:	d9802917 	ldw	r6,164(sp)
 8025414:	41400215 	stw	r5,8(r8)
 8025418:	41000315 	stw	r4,12(r8)
 802541c:	41800115 	stw	r6,4(r8)
 8025420:	40800415 	stw	r2,16(r8)
 8025424:	40c00515 	stw	r3,20(r8)
 8025428:	003ef306 	br	8024ff8 <_gp+0xfffe38ec>
 802542c:	da00a617 	ldw	r8,664(sp)
 8025430:	008000c4 	movi	r2,3
 8025434:	40bef01e 	bne	r8,r2,8024ff8 <_gp+0xfffe38ec>
 8025438:	0005883a 	mov	r2,zero
 802543c:	0007883a 	mov	r3,zero
 8025440:	003fa506 	br	80252d8 <_gp+0xfffe3bcc>
 8025444:	9485883a 	add	r2,r18,r18
 8025448:	1085883a 	add	r2,r2,r2
 802544c:	d8a1883a 	add	r16,sp,r2
 8025450:	880b883a 	mov	r5,r17
 8025454:	a809883a 	mov	r4,r21
 8025458:	84007804 	addi	r16,r16,480
 802545c:	8028ee00 	call	8028ee0 <__fixdfsi>
 8025460:	80800015 	stw	r2,0(r16)
 8025464:	9023883a 	mov	r17,r18
 8025468:	003e7e06 	br	8024e64 <_gp+0xfffe3758>
 802546c:	a80d883a 	mov	r6,r21
 8025470:	400f883a 	mov	r7,r8
 8025474:	0009883a 	mov	r4,zero
 8025478:	014ffc34 	movhi	r5,16368
 802547c:	80285e40 	call	80285e4 <__subdf3>
 8025480:	102b883a 	mov	r21,r2
 8025484:	1811883a 	mov	r8,r3
 8025488:	04c00084 	movi	r19,2
 802548c:	003dc006 	br	8024b90 <_gp+0xfffe3484>
 8025490:	da00a617 	ldw	r8,664(sp)
 8025494:	00800084 	movi	r2,2
 8025498:	123fe416 	blt	r2,r8,802542c <_gp+0xfffe3d20>
 802549c:	02000c16 	blt	zero,r8,80254d0 <__kernel_rem_pio2+0xd84>
 80254a0:	403ed51e 	bne	r8,zero,8024ff8 <_gp+0xfffe38ec>
 80254a4:	0005883a 	mov	r2,zero
 80254a8:	0007883a 	mov	r3,zero
 80254ac:	003ecc06 	br	8024fe0 <_gp+0xfffe38d4>
 80254b0:	d8009215 	stw	zero,584(sp)
 80254b4:	003cc306 	br	80247c4 <_gp+0xfffe30b8>
 80254b8:	da008f17 	ldw	r8,572(sp)
 80254bc:	1009883a 	mov	r4,r2
 80254c0:	1805883a 	mov	r2,r3
 80254c4:	41000215 	stw	r4,8(r8)
 80254c8:	40800315 	stw	r2,12(r8)
 80254cc:	003eca06 	br	8024ff8 <_gp+0xfffe38ec>
 80254d0:	0005883a 	mov	r2,zero
 80254d4:	0007883a 	mov	r3,zero
 80254d8:	003f9d06 	br	8025350 <_gp+0xfffe3c44>

080254dc <__kernel_sin>:
 80254dc:	00a00034 	movhi	r2,32768
 80254e0:	defff404 	addi	sp,sp,-48
 80254e4:	10bfffc4 	addi	r2,r2,-1
 80254e8:	00cf9034 	movhi	r3,15936
 80254ec:	ddc00915 	stw	r23,36(sp)
 80254f0:	dd800815 	stw	r22,32(sp)
 80254f4:	dc400315 	stw	r17,12(sp)
 80254f8:	dc000215 	stw	r16,8(sp)
 80254fc:	dfc00b15 	stw	ra,44(sp)
 8025500:	df000a15 	stw	fp,40(sp)
 8025504:	dd400715 	stw	r21,28(sp)
 8025508:	dd000615 	stw	r20,24(sp)
 802550c:	dcc00515 	stw	r19,20(sp)
 8025510:	dc800415 	stw	r18,16(sp)
 8025514:	2884703a 	and	r2,r5,r2
 8025518:	18ffffc4 	addi	r3,r3,-1
 802551c:	2821883a 	mov	r16,r5
 8025520:	2023883a 	mov	r17,r4
 8025524:	302f883a 	mov	r23,r6
 8025528:	382d883a 	mov	r22,r7
 802552c:	18800216 	blt	r3,r2,8025538 <__kernel_sin+0x5c>
 8025530:	8028ee00 	call	8028ee0 <__fixdfsi>
 8025534:	10009926 	beq	r2,zero,802579c <__kernel_sin+0x2c0>
 8025538:	880d883a 	mov	r6,r17
 802553c:	800f883a 	mov	r7,r16
 8025540:	8809883a 	mov	r4,r17
 8025544:	800b883a 	mov	r5,r16
 8025548:	8027ecc0 	call	8027ecc <__muldf3>
 802554c:	100d883a 	mov	r6,r2
 8025550:	180f883a 	mov	r7,r3
 8025554:	8809883a 	mov	r4,r17
 8025558:	800b883a 	mov	r5,r16
 802555c:	1027883a 	mov	r19,r2
 8025560:	1825883a 	mov	r18,r3
 8025564:	8027ecc0 	call	8027ecc <__muldf3>
 8025568:	0196b434 	movhi	r6,23248
 802556c:	01cf79b4 	movhi	r7,15846
 8025570:	31b55f04 	addi	r6,r6,-10884
 8025574:	39f64e84 	addi	r7,r7,-9926
 8025578:	9809883a 	mov	r4,r19
 802557c:	900b883a 	mov	r5,r18
 8025580:	102b883a 	mov	r21,r2
 8025584:	1829883a 	mov	r20,r3
 8025588:	8027ecc0 	call	8027ecc <__muldf3>
 802558c:	01a28b34 	movhi	r6,35372
 8025590:	01cf96f4 	movhi	r7,15963
 8025594:	31a73ac4 	addi	r6,r6,-25365
 8025598:	39f97984 	addi	r7,r7,-6682
 802559c:	1009883a 	mov	r4,r2
 80255a0:	180b883a 	mov	r5,r3
 80255a4:	80285e40 	call	80285e4 <__subdf3>
 80255a8:	980d883a 	mov	r6,r19
 80255ac:	900f883a 	mov	r7,r18
 80255b0:	1009883a 	mov	r4,r2
 80255b4:	180b883a 	mov	r5,r3
 80255b8:	8027ecc0 	call	8027ecc <__muldf3>
 80255bc:	0195ecb4 	movhi	r6,22450
 80255c0:	01cfb1f4 	movhi	r7,16071
 80255c4:	31bf9f44 	addi	r6,r6,-387
 80255c8:	39c778c4 	addi	r7,r7,7651
 80255cc:	1009883a 	mov	r4,r2
 80255d0:	180b883a 	mov	r5,r3
 80255d4:	8026ae00 	call	8026ae0 <__adddf3>
 80255d8:	980d883a 	mov	r6,r19
 80255dc:	900f883a 	mov	r7,r18
 80255e0:	1009883a 	mov	r4,r2
 80255e4:	180b883a 	mov	r5,r3
 80255e8:	8027ecc0 	call	8027ecc <__muldf3>
 80255ec:	01867074 	movhi	r6,6593
 80255f0:	01cfcab4 	movhi	r7,16170
 80255f4:	31987544 	addi	r6,r6,25045
 80255f8:	39c06804 	addi	r7,r7,416
 80255fc:	1009883a 	mov	r4,r2
 8025600:	180b883a 	mov	r5,r3
 8025604:	80285e40 	call	80285e4 <__subdf3>
 8025608:	980d883a 	mov	r6,r19
 802560c:	900f883a 	mov	r7,r18
 8025610:	1009883a 	mov	r4,r2
 8025614:	180b883a 	mov	r5,r3
 8025618:	8027ecc0 	call	8027ecc <__muldf3>
 802561c:	01844474 	movhi	r6,4369
 8025620:	01cfe074 	movhi	r7,16257
 8025624:	31be2984 	addi	r6,r6,-1882
 8025628:	39c44444 	addi	r7,r7,4369
 802562c:	1009883a 	mov	r4,r2
 8025630:	180b883a 	mov	r5,r3
 8025634:	8026ae00 	call	8026ae0 <__adddf3>
 8025638:	1011883a 	mov	r8,r2
 802563c:	d8800c17 	ldw	r2,48(sp)
 8025640:	1839883a 	mov	fp,r3
 8025644:	10003e26 	beq	r2,zero,8025740 <__kernel_sin+0x264>
 8025648:	000d883a 	mov	r6,zero
 802564c:	01cff834 	movhi	r7,16352
 8025650:	b809883a 	mov	r4,r23
 8025654:	b00b883a 	mov	r5,r22
 8025658:	da000015 	stw	r8,0(sp)
 802565c:	8027ecc0 	call	8027ecc <__muldf3>
 8025660:	da000017 	ldw	r8,0(sp)
 8025664:	e00f883a 	mov	r7,fp
 8025668:	a809883a 	mov	r4,r21
 802566c:	400d883a 	mov	r6,r8
 8025670:	a00b883a 	mov	r5,r20
 8025674:	d8c00115 	stw	r3,4(sp)
 8025678:	d8800015 	stw	r2,0(sp)
 802567c:	8027ecc0 	call	8027ecc <__muldf3>
 8025680:	da800017 	ldw	r10,0(sp)
 8025684:	da400117 	ldw	r9,4(sp)
 8025688:	100d883a 	mov	r6,r2
 802568c:	5009883a 	mov	r4,r10
 8025690:	480b883a 	mov	r5,r9
 8025694:	180f883a 	mov	r7,r3
 8025698:	80285e40 	call	80285e4 <__subdf3>
 802569c:	980d883a 	mov	r6,r19
 80256a0:	900f883a 	mov	r7,r18
 80256a4:	1009883a 	mov	r4,r2
 80256a8:	180b883a 	mov	r5,r3
 80256ac:	8027ecc0 	call	8027ecc <__muldf3>
 80256b0:	b80d883a 	mov	r6,r23
 80256b4:	b00f883a 	mov	r7,r22
 80256b8:	1009883a 	mov	r4,r2
 80256bc:	180b883a 	mov	r5,r3
 80256c0:	80285e40 	call	80285e4 <__subdf3>
 80256c4:	01955574 	movhi	r6,21845
 80256c8:	01cff174 	movhi	r7,16325
 80256cc:	31955244 	addi	r6,r6,21833
 80256d0:	39d55544 	addi	r7,r7,21845
 80256d4:	a809883a 	mov	r4,r21
 80256d8:	a00b883a 	mov	r5,r20
 80256dc:	1027883a 	mov	r19,r2
 80256e0:	1825883a 	mov	r18,r3
 80256e4:	8027ecc0 	call	8027ecc <__muldf3>
 80256e8:	100d883a 	mov	r6,r2
 80256ec:	180f883a 	mov	r7,r3
 80256f0:	9809883a 	mov	r4,r19
 80256f4:	900b883a 	mov	r5,r18
 80256f8:	8026ae00 	call	8026ae0 <__adddf3>
 80256fc:	100d883a 	mov	r6,r2
 8025700:	180f883a 	mov	r7,r3
 8025704:	8809883a 	mov	r4,r17
 8025708:	800b883a 	mov	r5,r16
 802570c:	80285e40 	call	80285e4 <__subdf3>
 8025710:	dfc00b17 	ldw	ra,44(sp)
 8025714:	df000a17 	ldw	fp,40(sp)
 8025718:	ddc00917 	ldw	r23,36(sp)
 802571c:	dd800817 	ldw	r22,32(sp)
 8025720:	dd400717 	ldw	r21,28(sp)
 8025724:	dd000617 	ldw	r20,24(sp)
 8025728:	dcc00517 	ldw	r19,20(sp)
 802572c:	dc800417 	ldw	r18,16(sp)
 8025730:	dc400317 	ldw	r17,12(sp)
 8025734:	dc000217 	ldw	r16,8(sp)
 8025738:	dec00c04 	addi	sp,sp,48
 802573c:	f800283a 	ret
 8025740:	400d883a 	mov	r6,r8
 8025744:	9809883a 	mov	r4,r19
 8025748:	900b883a 	mov	r5,r18
 802574c:	180f883a 	mov	r7,r3
 8025750:	8027ecc0 	call	8027ecc <__muldf3>
 8025754:	01955574 	movhi	r6,21845
 8025758:	01cff174 	movhi	r7,16325
 802575c:	31955244 	addi	r6,r6,21833
 8025760:	39d55544 	addi	r7,r7,21845
 8025764:	1009883a 	mov	r4,r2
 8025768:	180b883a 	mov	r5,r3
 802576c:	80285e40 	call	80285e4 <__subdf3>
 8025770:	a80d883a 	mov	r6,r21
 8025774:	a00f883a 	mov	r7,r20
 8025778:	1009883a 	mov	r4,r2
 802577c:	180b883a 	mov	r5,r3
 8025780:	8027ecc0 	call	8027ecc <__muldf3>
 8025784:	880d883a 	mov	r6,r17
 8025788:	800f883a 	mov	r7,r16
 802578c:	1009883a 	mov	r4,r2
 8025790:	180b883a 	mov	r5,r3
 8025794:	8026ae00 	call	8026ae0 <__adddf3>
 8025798:	003fdd06 	br	8025710 <_gp+0xfffe4004>
 802579c:	8805883a 	mov	r2,r17
 80257a0:	8007883a 	mov	r3,r16
 80257a4:	003fda06 	br	8025710 <_gp+0xfffe4004>

080257a8 <fabs>:
 80257a8:	00e00034 	movhi	r3,32768
 80257ac:	18ffffc4 	addi	r3,r3,-1
 80257b0:	2005883a 	mov	r2,r4
 80257b4:	28c6703a 	and	r3,r5,r3
 80257b8:	f800283a 	ret

080257bc <__fpclassifyd>:
 80257bc:	00a00034 	movhi	r2,32768
 80257c0:	10bfffc4 	addi	r2,r2,-1
 80257c4:	2884703a 	and	r2,r5,r2
 80257c8:	10000726 	beq	r2,zero,80257e8 <__fpclassifyd+0x2c>
 80257cc:	00fffc34 	movhi	r3,65520
 80257d0:	019ff834 	movhi	r6,32736
 80257d4:	28c7883a 	add	r3,r5,r3
 80257d8:	31bfffc4 	addi	r6,r6,-1
 80257dc:	30c00536 	bltu	r6,r3,80257f4 <__fpclassifyd+0x38>
 80257e0:	00800104 	movi	r2,4
 80257e4:	f800283a 	ret
 80257e8:	2000021e 	bne	r4,zero,80257f4 <__fpclassifyd+0x38>
 80257ec:	00800084 	movi	r2,2
 80257f0:	f800283a 	ret
 80257f4:	00dffc34 	movhi	r3,32752
 80257f8:	019ff834 	movhi	r6,32736
 80257fc:	28cb883a 	add	r5,r5,r3
 8025800:	31bfffc4 	addi	r6,r6,-1
 8025804:	317ff62e 	bgeu	r6,r5,80257e0 <_gp+0xfffe40d4>
 8025808:	01400434 	movhi	r5,16
 802580c:	297fffc4 	addi	r5,r5,-1
 8025810:	28800236 	bltu	r5,r2,802581c <__fpclassifyd+0x60>
 8025814:	008000c4 	movi	r2,3
 8025818:	f800283a 	ret
 802581c:	10c00226 	beq	r2,r3,8025828 <__fpclassifyd+0x6c>
 8025820:	0005883a 	mov	r2,zero
 8025824:	f800283a 	ret
 8025828:	2005003a 	cmpeq	r2,r4,zero
 802582c:	f800283a 	ret

08025830 <matherr>:
 8025830:	0005883a 	mov	r2,zero
 8025834:	f800283a 	ret

08025838 <scalbn>:
 8025838:	2a1ffc2c 	andhi	r8,r5,32752
 802583c:	4011d53a 	srai	r8,r8,20
 8025840:	defffe04 	addi	sp,sp,-8
 8025844:	dc000015 	stw	r16,0(sp)
 8025848:	dfc00115 	stw	ra,4(sp)
 802584c:	280f883a 	mov	r7,r5
 8025850:	2015883a 	mov	r10,r4
 8025854:	3021883a 	mov	r16,r6
 8025858:	40001e1e 	bne	r8,zero,80258d4 <scalbn+0x9c>
 802585c:	00a00034 	movhi	r2,32768
 8025860:	10bfffc4 	addi	r2,r2,-1
 8025864:	2884703a 	and	r2,r5,r2
 8025868:	1104b03a 	or	r2,r2,r4
 802586c:	10002226 	beq	r2,zero,80258f8 <scalbn+0xc0>
 8025870:	01d0d434 	movhi	r7,17232
 8025874:	000d883a 	mov	r6,zero
 8025878:	8027ecc0 	call	8027ecc <__muldf3>
 802587c:	013ffff4 	movhi	r4,65535
 8025880:	210f2c04 	addi	r4,r4,15536
 8025884:	1015883a 	mov	r10,r2
 8025888:	180f883a 	mov	r7,r3
 802588c:	81002a16 	blt	r16,r4,8025938 <scalbn+0x100>
 8025890:	191ffc2c 	andhi	r4,r3,32752
 8025894:	2009d53a 	srai	r4,r4,20
 8025898:	223ff284 	addi	r8,r4,-54
 802589c:	8211883a 	add	r8,r16,r8
 80258a0:	0081ff84 	movi	r2,2046
 80258a4:	12002f16 	blt	r2,r8,8025964 <scalbn+0x12c>
 80258a8:	0200190e 	bge	zero,r8,8025910 <scalbn+0xd8>
 80258ac:	4010953a 	slli	r8,r8,20
 80258b0:	01600434 	movhi	r5,32784
 80258b4:	297fffc4 	addi	r5,r5,-1
 80258b8:	194e703a 	and	r7,r3,r5
 80258bc:	5005883a 	mov	r2,r10
 80258c0:	3a06b03a 	or	r3,r7,r8
 80258c4:	dfc00117 	ldw	ra,4(sp)
 80258c8:	dc000017 	ldw	r16,0(sp)
 80258cc:	dec00204 	addi	sp,sp,8
 80258d0:	f800283a 	ret
 80258d4:	0081ffc4 	movi	r2,2047
 80258d8:	2807883a 	mov	r3,r5
 80258dc:	40bfef1e 	bne	r8,r2,802589c <_gp+0xfffe4190>
 80258e0:	200d883a 	mov	r6,r4
 80258e4:	8026ae00 	call	8026ae0 <__adddf3>
 80258e8:	dfc00117 	ldw	ra,4(sp)
 80258ec:	dc000017 	ldw	r16,0(sp)
 80258f0:	dec00204 	addi	sp,sp,8
 80258f4:	f800283a 	ret
 80258f8:	2005883a 	mov	r2,r4
 80258fc:	2807883a 	mov	r3,r5
 8025900:	dfc00117 	ldw	ra,4(sp)
 8025904:	dc000017 	ldw	r16,0(sp)
 8025908:	dec00204 	addi	sp,sp,8
 802590c:	f800283a 	ret
 8025910:	00bff2c4 	movi	r2,-53
 8025914:	4080240e 	bge	r8,r2,80259a8 <scalbn+0x170>
 8025918:	00b0d414 	movui	r2,50000
 802591c:	14001116 	blt	r2,r16,8025964 <scalbn+0x12c>
 8025920:	0130be74 	movhi	r4,49913
 8025924:	01406974 	movhi	r5,421
 8025928:	213cd644 	addi	r4,r4,-3239
 802592c:	295b87c4 	addi	r5,r5,28191
 8025930:	500d883a 	mov	r6,r10
 8025934:	80259d40 	call	80259d4 <copysign>
 8025938:	01b0be74 	movhi	r6,49913
 802593c:	01c06974 	movhi	r7,421
 8025940:	31bcd644 	addi	r6,r6,-3239
 8025944:	39db87c4 	addi	r7,r7,28191
 8025948:	1009883a 	mov	r4,r2
 802594c:	180b883a 	mov	r5,r3
 8025950:	8027ecc0 	call	8027ecc <__muldf3>
 8025954:	dfc00117 	ldw	ra,4(sp)
 8025958:	dc000017 	ldw	r16,0(sp)
 802595c:	dec00204 	addi	sp,sp,8
 8025960:	f800283a 	ret
 8025964:	01220034 	movhi	r4,34816
 8025968:	015f8e34 	movhi	r5,32312
 802596c:	500d883a 	mov	r6,r10
 8025970:	211d6704 	addi	r4,r4,30108
 8025974:	29790f04 	addi	r5,r5,-7108
 8025978:	80259d40 	call	80259d4 <copysign>
 802597c:	01a20034 	movhi	r6,34816
 8025980:	01df8e34 	movhi	r7,32312
 8025984:	319d6704 	addi	r6,r6,30108
 8025988:	39f90f04 	addi	r7,r7,-7108
 802598c:	1009883a 	mov	r4,r2
 8025990:	180b883a 	mov	r5,r3
 8025994:	8027ecc0 	call	8027ecc <__muldf3>
 8025998:	dfc00117 	ldw	ra,4(sp)
 802599c:	dc000017 	ldw	r16,0(sp)
 80259a0:	dec00204 	addi	sp,sp,8
 80259a4:	f800283a 	ret
 80259a8:	42000d84 	addi	r8,r8,54
 80259ac:	4012953a 	slli	r9,r8,20
 80259b0:	01e00434 	movhi	r7,32784
 80259b4:	39ffffc4 	addi	r7,r7,-1
 80259b8:	19ca703a 	and	r5,r3,r7
 80259bc:	000d883a 	mov	r6,zero
 80259c0:	01cf2434 	movhi	r7,15504
 80259c4:	5009883a 	mov	r4,r10
 80259c8:	494ab03a 	or	r5,r9,r5
 80259cc:	8027ecc0 	call	8027ecc <__muldf3>
 80259d0:	003fbc06 	br	80258c4 <_gp+0xfffe41b8>

080259d4 <copysign>:
 80259d4:	2005883a 	mov	r2,r4
 80259d8:	01200034 	movhi	r4,32768
 80259dc:	213fffc4 	addi	r4,r4,-1
 80259e0:	38e0002c 	andhi	r3,r7,32768
 80259e4:	290a703a 	and	r5,r5,r4
 80259e8:	28c6b03a 	or	r3,r5,r3
 80259ec:	f800283a 	ret

080259f0 <__divsi3>:
 80259f0:	20001b16 	blt	r4,zero,8025a60 <__divsi3+0x70>
 80259f4:	000f883a 	mov	r7,zero
 80259f8:	28001616 	blt	r5,zero,8025a54 <__divsi3+0x64>
 80259fc:	200d883a 	mov	r6,r4
 8025a00:	29001a2e 	bgeu	r5,r4,8025a6c <__divsi3+0x7c>
 8025a04:	00800804 	movi	r2,32
 8025a08:	00c00044 	movi	r3,1
 8025a0c:	00000106 	br	8025a14 <__divsi3+0x24>
 8025a10:	10000d26 	beq	r2,zero,8025a48 <__divsi3+0x58>
 8025a14:	294b883a 	add	r5,r5,r5
 8025a18:	10bfffc4 	addi	r2,r2,-1
 8025a1c:	18c7883a 	add	r3,r3,r3
 8025a20:	293ffb36 	bltu	r5,r4,8025a10 <_gp+0xfffe4304>
 8025a24:	0005883a 	mov	r2,zero
 8025a28:	18000726 	beq	r3,zero,8025a48 <__divsi3+0x58>
 8025a2c:	0005883a 	mov	r2,zero
 8025a30:	31400236 	bltu	r6,r5,8025a3c <__divsi3+0x4c>
 8025a34:	314dc83a 	sub	r6,r6,r5
 8025a38:	10c4b03a 	or	r2,r2,r3
 8025a3c:	1806d07a 	srli	r3,r3,1
 8025a40:	280ad07a 	srli	r5,r5,1
 8025a44:	183ffa1e 	bne	r3,zero,8025a30 <_gp+0xfffe4324>
 8025a48:	38000126 	beq	r7,zero,8025a50 <__divsi3+0x60>
 8025a4c:	0085c83a 	sub	r2,zero,r2
 8025a50:	f800283a 	ret
 8025a54:	014bc83a 	sub	r5,zero,r5
 8025a58:	39c0005c 	xori	r7,r7,1
 8025a5c:	003fe706 	br	80259fc <_gp+0xfffe42f0>
 8025a60:	0109c83a 	sub	r4,zero,r4
 8025a64:	01c00044 	movi	r7,1
 8025a68:	003fe306 	br	80259f8 <_gp+0xfffe42ec>
 8025a6c:	00c00044 	movi	r3,1
 8025a70:	003fee06 	br	8025a2c <_gp+0xfffe4320>

08025a74 <__modsi3>:
 8025a74:	20001716 	blt	r4,zero,8025ad4 <__modsi3+0x60>
 8025a78:	000f883a 	mov	r7,zero
 8025a7c:	2005883a 	mov	r2,r4
 8025a80:	28001216 	blt	r5,zero,8025acc <__modsi3+0x58>
 8025a84:	2900162e 	bgeu	r5,r4,8025ae0 <__modsi3+0x6c>
 8025a88:	01800804 	movi	r6,32
 8025a8c:	00c00044 	movi	r3,1
 8025a90:	00000106 	br	8025a98 <__modsi3+0x24>
 8025a94:	30000a26 	beq	r6,zero,8025ac0 <__modsi3+0x4c>
 8025a98:	294b883a 	add	r5,r5,r5
 8025a9c:	31bfffc4 	addi	r6,r6,-1
 8025aa0:	18c7883a 	add	r3,r3,r3
 8025aa4:	293ffb36 	bltu	r5,r4,8025a94 <_gp+0xfffe4388>
 8025aa8:	18000526 	beq	r3,zero,8025ac0 <__modsi3+0x4c>
 8025aac:	1806d07a 	srli	r3,r3,1
 8025ab0:	11400136 	bltu	r2,r5,8025ab8 <__modsi3+0x44>
 8025ab4:	1145c83a 	sub	r2,r2,r5
 8025ab8:	280ad07a 	srli	r5,r5,1
 8025abc:	183ffb1e 	bne	r3,zero,8025aac <_gp+0xfffe43a0>
 8025ac0:	38000126 	beq	r7,zero,8025ac8 <__modsi3+0x54>
 8025ac4:	0085c83a 	sub	r2,zero,r2
 8025ac8:	f800283a 	ret
 8025acc:	014bc83a 	sub	r5,zero,r5
 8025ad0:	003fec06 	br	8025a84 <_gp+0xfffe4378>
 8025ad4:	0109c83a 	sub	r4,zero,r4
 8025ad8:	01c00044 	movi	r7,1
 8025adc:	003fe706 	br	8025a7c <_gp+0xfffe4370>
 8025ae0:	00c00044 	movi	r3,1
 8025ae4:	003ff106 	br	8025aac <_gp+0xfffe43a0>

08025ae8 <__udivsi3>:
 8025ae8:	200d883a 	mov	r6,r4
 8025aec:	2900152e 	bgeu	r5,r4,8025b44 <__udivsi3+0x5c>
 8025af0:	28001416 	blt	r5,zero,8025b44 <__udivsi3+0x5c>
 8025af4:	00800804 	movi	r2,32
 8025af8:	00c00044 	movi	r3,1
 8025afc:	00000206 	br	8025b08 <__udivsi3+0x20>
 8025b00:	10000e26 	beq	r2,zero,8025b3c <__udivsi3+0x54>
 8025b04:	28000516 	blt	r5,zero,8025b1c <__udivsi3+0x34>
 8025b08:	294b883a 	add	r5,r5,r5
 8025b0c:	10bfffc4 	addi	r2,r2,-1
 8025b10:	18c7883a 	add	r3,r3,r3
 8025b14:	293ffa36 	bltu	r5,r4,8025b00 <_gp+0xfffe43f4>
 8025b18:	18000826 	beq	r3,zero,8025b3c <__udivsi3+0x54>
 8025b1c:	0005883a 	mov	r2,zero
 8025b20:	31400236 	bltu	r6,r5,8025b2c <__udivsi3+0x44>
 8025b24:	314dc83a 	sub	r6,r6,r5
 8025b28:	10c4b03a 	or	r2,r2,r3
 8025b2c:	1806d07a 	srli	r3,r3,1
 8025b30:	280ad07a 	srli	r5,r5,1
 8025b34:	183ffa1e 	bne	r3,zero,8025b20 <_gp+0xfffe4414>
 8025b38:	f800283a 	ret
 8025b3c:	0005883a 	mov	r2,zero
 8025b40:	f800283a 	ret
 8025b44:	00c00044 	movi	r3,1
 8025b48:	003ff406 	br	8025b1c <_gp+0xfffe4410>

08025b4c <__umodsi3>:
 8025b4c:	2005883a 	mov	r2,r4
 8025b50:	2900122e 	bgeu	r5,r4,8025b9c <__umodsi3+0x50>
 8025b54:	28001116 	blt	r5,zero,8025b9c <__umodsi3+0x50>
 8025b58:	01800804 	movi	r6,32
 8025b5c:	00c00044 	movi	r3,1
 8025b60:	00000206 	br	8025b6c <__umodsi3+0x20>
 8025b64:	30000c26 	beq	r6,zero,8025b98 <__umodsi3+0x4c>
 8025b68:	28000516 	blt	r5,zero,8025b80 <__umodsi3+0x34>
 8025b6c:	294b883a 	add	r5,r5,r5
 8025b70:	31bfffc4 	addi	r6,r6,-1
 8025b74:	18c7883a 	add	r3,r3,r3
 8025b78:	293ffa36 	bltu	r5,r4,8025b64 <_gp+0xfffe4458>
 8025b7c:	18000626 	beq	r3,zero,8025b98 <__umodsi3+0x4c>
 8025b80:	1806d07a 	srli	r3,r3,1
 8025b84:	11400136 	bltu	r2,r5,8025b8c <__umodsi3+0x40>
 8025b88:	1145c83a 	sub	r2,r2,r5
 8025b8c:	280ad07a 	srli	r5,r5,1
 8025b90:	183ffb1e 	bne	r3,zero,8025b80 <_gp+0xfffe4474>
 8025b94:	f800283a 	ret
 8025b98:	f800283a 	ret
 8025b9c:	00c00044 	movi	r3,1
 8025ba0:	003ff706 	br	8025b80 <_gp+0xfffe4474>

08025ba4 <__addsf3>:
 8025ba4:	defffc04 	addi	sp,sp,-16
 8025ba8:	2004d7fa 	srli	r2,r4,31
 8025bac:	280cd5fa 	srli	r6,r5,23
 8025bb0:	dc000015 	stw	r16,0(sp)
 8025bb4:	00c02034 	movhi	r3,128
 8025bb8:	2020d5fa 	srli	r16,r4,23
 8025bbc:	280ed7fa 	srli	r7,r5,31
 8025bc0:	18ffffc4 	addi	r3,r3,-1
 8025bc4:	dc400115 	stw	r17,4(sp)
 8025bc8:	1908703a 	and	r4,r3,r4
 8025bcc:	194a703a 	and	r5,r3,r5
 8025bd0:	dfc00315 	stw	ra,12(sp)
 8025bd4:	dc800215 	stw	r18,8(sp)
 8025bd8:	14403fcc 	andi	r17,r2,255
 8025bdc:	84003fcc 	andi	r16,r16,255
 8025be0:	200890fa 	slli	r4,r4,3
 8025be4:	31803fcc 	andi	r6,r6,255
 8025be8:	280a90fa 	slli	r5,r5,3
 8025bec:	89c05026 	beq	r17,r7,8025d30 <__addsf3+0x18c>
 8025bf0:	8185c83a 	sub	r2,r16,r6
 8025bf4:	00807a0e 	bge	zero,r2,8025de0 <__addsf3+0x23c>
 8025bf8:	30001e1e 	bne	r6,zero,8025c74 <__addsf3+0xd0>
 8025bfc:	28006d1e 	bne	r5,zero,8025db4 <__addsf3+0x210>
 8025c00:	208001cc 	andi	r2,r4,7
 8025c04:	10000426 	beq	r2,zero,8025c18 <__addsf3+0x74>
 8025c08:	208003cc 	andi	r2,r4,15
 8025c0c:	00c00104 	movi	r3,4
 8025c10:	10c00126 	beq	r2,r3,8025c18 <__addsf3+0x74>
 8025c14:	20c9883a 	add	r4,r4,r3
 8025c18:	2081002c 	andhi	r2,r4,1024
 8025c1c:	10003926 	beq	r2,zero,8025d04 <__addsf3+0x160>
 8025c20:	84000044 	addi	r16,r16,1
 8025c24:	00803fc4 	movi	r2,255
 8025c28:	80807826 	beq	r16,r2,8025e0c <__addsf3+0x268>
 8025c2c:	200891ba 	slli	r4,r4,6
 8025c30:	8805883a 	mov	r2,r17
 8025c34:	2008d27a 	srli	r4,r4,9
 8025c38:	84003fcc 	andi	r16,r16,255
 8025c3c:	800695fa 	slli	r3,r16,23
 8025c40:	10803fcc 	andi	r2,r2,255
 8025c44:	04002034 	movhi	r16,128
 8025c48:	843fffc4 	addi	r16,r16,-1
 8025c4c:	100497fa 	slli	r2,r2,31
 8025c50:	2408703a 	and	r4,r4,r16
 8025c54:	20e0b03a 	or	r16,r4,r3
 8025c58:	8084b03a 	or	r2,r16,r2
 8025c5c:	dfc00317 	ldw	ra,12(sp)
 8025c60:	dc800217 	ldw	r18,8(sp)
 8025c64:	dc400117 	ldw	r17,4(sp)
 8025c68:	dc000017 	ldw	r16,0(sp)
 8025c6c:	dec00404 	addi	sp,sp,16
 8025c70:	f800283a 	ret
 8025c74:	00c03fc4 	movi	r3,255
 8025c78:	80ffe126 	beq	r16,r3,8025c00 <_gp+0xfffe44f4>
 8025c7c:	29410034 	orhi	r5,r5,1024
 8025c80:	00c006c4 	movi	r3,27
 8025c84:	18807516 	blt	r3,r2,8025e5c <__addsf3+0x2b8>
 8025c88:	00c00804 	movi	r3,32
 8025c8c:	1887c83a 	sub	r3,r3,r2
 8025c90:	28c6983a 	sll	r3,r5,r3
 8025c94:	288ad83a 	srl	r5,r5,r2
 8025c98:	1804c03a 	cmpne	r2,r3,zero
 8025c9c:	288ab03a 	or	r5,r5,r2
 8025ca0:	2149c83a 	sub	r4,r4,r5
 8025ca4:	2081002c 	andhi	r2,r4,1024
 8025ca8:	10001426 	beq	r2,zero,8025cfc <__addsf3+0x158>
 8025cac:	04810034 	movhi	r18,1024
 8025cb0:	94bfffc4 	addi	r18,r18,-1
 8025cb4:	24a4703a 	and	r18,r4,r18
 8025cb8:	9009883a 	mov	r4,r18
 8025cbc:	802939c0 	call	802939c <__clzsi2>
 8025cc0:	10bffec4 	addi	r2,r2,-5
 8025cc4:	90a4983a 	sll	r18,r18,r2
 8025cc8:	14005416 	blt	r2,r16,8025e1c <__addsf3+0x278>
 8025ccc:	1405c83a 	sub	r2,r2,r16
 8025cd0:	11000044 	addi	r4,r2,1
 8025cd4:	00800804 	movi	r2,32
 8025cd8:	1105c83a 	sub	r2,r2,r4
 8025cdc:	9084983a 	sll	r2,r18,r2
 8025ce0:	9124d83a 	srl	r18,r18,r4
 8025ce4:	0021883a 	mov	r16,zero
 8025ce8:	1008c03a 	cmpne	r4,r2,zero
 8025cec:	9108b03a 	or	r4,r18,r4
 8025cf0:	003fc306 	br	8025c00 <_gp+0xfffe44f4>
 8025cf4:	1000db26 	beq	r2,zero,8026064 <__addsf3+0x4c0>
 8025cf8:	1009883a 	mov	r4,r2
 8025cfc:	208001cc 	andi	r2,r4,7
 8025d00:	103fc11e 	bne	r2,zero,8025c08 <_gp+0xfffe44fc>
 8025d04:	2006d0fa 	srli	r3,r4,3
 8025d08:	01003fc4 	movi	r4,255
 8025d0c:	8805883a 	mov	r2,r17
 8025d10:	8100241e 	bne	r16,r4,8025da4 <__addsf3+0x200>
 8025d14:	18006e26 	beq	r3,zero,8025ed0 <__addsf3+0x32c>
 8025d18:	19001034 	orhi	r4,r3,64
 8025d1c:	00c02034 	movhi	r3,128
 8025d20:	18ffffc4 	addi	r3,r3,-1
 8025d24:	043fffc4 	movi	r16,-1
 8025d28:	20c8703a 	and	r4,r4,r3
 8025d2c:	003fc206 	br	8025c38 <_gp+0xfffe452c>
 8025d30:	8187c83a 	sub	r3,r16,r6
 8025d34:	00c03e0e 	bge	zero,r3,8025e30 <__addsf3+0x28c>
 8025d38:	30002326 	beq	r6,zero,8025dc8 <__addsf3+0x224>
 8025d3c:	01803fc4 	movi	r6,255
 8025d40:	81bfaf26 	beq	r16,r6,8025c00 <_gp+0xfffe44f4>
 8025d44:	29410034 	orhi	r5,r5,1024
 8025d48:	018006c4 	movi	r6,27
 8025d4c:	30c07416 	blt	r6,r3,8025f20 <__addsf3+0x37c>
 8025d50:	01800804 	movi	r6,32
 8025d54:	30cdc83a 	sub	r6,r6,r3
 8025d58:	298c983a 	sll	r6,r5,r6
 8025d5c:	28cad83a 	srl	r5,r5,r3
 8025d60:	3006c03a 	cmpne	r3,r6,zero
 8025d64:	28cab03a 	or	r5,r5,r3
 8025d68:	2149883a 	add	r4,r4,r5
 8025d6c:	20c1002c 	andhi	r3,r4,1024
 8025d70:	183fe226 	beq	r3,zero,8025cfc <_gp+0xfffe45f0>
 8025d74:	84000044 	addi	r16,r16,1
 8025d78:	00c03fc4 	movi	r3,255
 8025d7c:	80c05426 	beq	r16,r3,8025ed0 <__addsf3+0x32c>
 8025d80:	00bf0034 	movhi	r2,64512
 8025d84:	10bfffc4 	addi	r2,r2,-1
 8025d88:	20c0004c 	andi	r3,r4,1
 8025d8c:	2088703a 	and	r4,r4,r2
 8025d90:	2008d07a 	srli	r4,r4,1
 8025d94:	20c8b03a 	or	r4,r4,r3
 8025d98:	003f9906 	br	8025c00 <_gp+0xfffe44f4>
 8025d9c:	0007883a 	mov	r3,zero
 8025da0:	0005883a 	mov	r2,zero
 8025da4:	01002034 	movhi	r4,128
 8025da8:	213fffc4 	addi	r4,r4,-1
 8025dac:	1908703a 	and	r4,r3,r4
 8025db0:	003fa106 	br	8025c38 <_gp+0xfffe452c>
 8025db4:	10bfffc4 	addi	r2,r2,-1
 8025db8:	103fb926 	beq	r2,zero,8025ca0 <_gp+0xfffe4594>
 8025dbc:	00c03fc4 	movi	r3,255
 8025dc0:	80ffaf1e 	bne	r16,r3,8025c80 <_gp+0xfffe4574>
 8025dc4:	003f8e06 	br	8025c00 <_gp+0xfffe44f4>
 8025dc8:	283f8d26 	beq	r5,zero,8025c00 <_gp+0xfffe44f4>
 8025dcc:	18ffffc4 	addi	r3,r3,-1
 8025dd0:	183fe526 	beq	r3,zero,8025d68 <_gp+0xfffe465c>
 8025dd4:	01803fc4 	movi	r6,255
 8025dd8:	81bfdb1e 	bne	r16,r6,8025d48 <_gp+0xfffe463c>
 8025ddc:	003f8806 	br	8025c00 <_gp+0xfffe44f4>
 8025de0:	1000201e 	bne	r2,zero,8025e64 <__addsf3+0x2c0>
 8025de4:	80800044 	addi	r2,r16,1
 8025de8:	10803fcc 	andi	r2,r2,255
 8025dec:	01800044 	movi	r6,1
 8025df0:	3080450e 	bge	r6,r2,8025f08 <__addsf3+0x364>
 8025df4:	2165c83a 	sub	r18,r4,r5
 8025df8:	90c1002c 	andhi	r3,r18,1024
 8025dfc:	18002b26 	beq	r3,zero,8025eac <__addsf3+0x308>
 8025e00:	2925c83a 	sub	r18,r5,r4
 8025e04:	3823883a 	mov	r17,r7
 8025e08:	003fab06 	br	8025cb8 <_gp+0xfffe45ac>
 8025e0c:	8805883a 	mov	r2,r17
 8025e10:	043fffc4 	movi	r16,-1
 8025e14:	0009883a 	mov	r4,zero
 8025e18:	003f8706 	br	8025c38 <_gp+0xfffe452c>
 8025e1c:	013f0034 	movhi	r4,64512
 8025e20:	213fffc4 	addi	r4,r4,-1
 8025e24:	80a1c83a 	sub	r16,r16,r2
 8025e28:	9108703a 	and	r4,r18,r4
 8025e2c:	003f7406 	br	8025c00 <_gp+0xfffe44f4>
 8025e30:	1800411e 	bne	r3,zero,8025f38 <__addsf3+0x394>
 8025e34:	80c00044 	addi	r3,r16,1
 8025e38:	19c03fcc 	andi	r7,r3,255
 8025e3c:	01800044 	movi	r6,1
 8025e40:	31c0260e 	bge	r6,r7,8025edc <__addsf3+0x338>
 8025e44:	01803fc4 	movi	r6,255
 8025e48:	19802126 	beq	r3,r6,8025ed0 <__addsf3+0x32c>
 8025e4c:	2149883a 	add	r4,r4,r5
 8025e50:	2008d07a 	srli	r4,r4,1
 8025e54:	1821883a 	mov	r16,r3
 8025e58:	003f6906 	br	8025c00 <_gp+0xfffe44f4>
 8025e5c:	01400044 	movi	r5,1
 8025e60:	003f8f06 	br	8025ca0 <_gp+0xfffe4594>
 8025e64:	8000151e 	bne	r16,zero,8025ebc <__addsf3+0x318>
 8025e68:	20002f26 	beq	r4,zero,8025f28 <__addsf3+0x384>
 8025e6c:	0084303a 	nor	r2,zero,r2
 8025e70:	10000a26 	beq	r2,zero,8025e9c <__addsf3+0x2f8>
 8025e74:	00c03fc4 	movi	r3,255
 8025e78:	30c02b26 	beq	r6,r3,8025f28 <__addsf3+0x384>
 8025e7c:	00c006c4 	movi	r3,27
 8025e80:	18806d16 	blt	r3,r2,8026038 <__addsf3+0x494>
 8025e84:	00c00804 	movi	r3,32
 8025e88:	1887c83a 	sub	r3,r3,r2
 8025e8c:	20c6983a 	sll	r3,r4,r3
 8025e90:	2084d83a 	srl	r2,r4,r2
 8025e94:	1808c03a 	cmpne	r4,r3,zero
 8025e98:	1108b03a 	or	r4,r2,r4
 8025e9c:	2909c83a 	sub	r4,r5,r4
 8025ea0:	3021883a 	mov	r16,r6
 8025ea4:	3823883a 	mov	r17,r7
 8025ea8:	003f7e06 	br	8025ca4 <_gp+0xfffe4598>
 8025eac:	903f821e 	bne	r18,zero,8025cb8 <_gp+0xfffe45ac>
 8025eb0:	0005883a 	mov	r2,zero
 8025eb4:	0021883a 	mov	r16,zero
 8025eb8:	003fba06 	br	8025da4 <_gp+0xfffe4698>
 8025ebc:	00c03fc4 	movi	r3,255
 8025ec0:	30c01926 	beq	r6,r3,8025f28 <__addsf3+0x384>
 8025ec4:	0085c83a 	sub	r2,zero,r2
 8025ec8:	21010034 	orhi	r4,r4,1024
 8025ecc:	003feb06 	br	8025e7c <_gp+0xfffe4770>
 8025ed0:	043fffc4 	movi	r16,-1
 8025ed4:	0009883a 	mov	r4,zero
 8025ed8:	003f5706 	br	8025c38 <_gp+0xfffe452c>
 8025edc:	80004a1e 	bne	r16,zero,8026008 <__addsf3+0x464>
 8025ee0:	20005926 	beq	r4,zero,8026048 <__addsf3+0x4a4>
 8025ee4:	283f4626 	beq	r5,zero,8025c00 <_gp+0xfffe44f4>
 8025ee8:	2149883a 	add	r4,r4,r5
 8025eec:	2081002c 	andhi	r2,r4,1024
 8025ef0:	103f8226 	beq	r2,zero,8025cfc <_gp+0xfffe45f0>
 8025ef4:	00bf0034 	movhi	r2,64512
 8025ef8:	10bfffc4 	addi	r2,r2,-1
 8025efc:	3021883a 	mov	r16,r6
 8025f00:	2088703a 	and	r4,r4,r2
 8025f04:	003f3e06 	br	8025c00 <_gp+0xfffe44f4>
 8025f08:	8000121e 	bne	r16,zero,8025f54 <__addsf3+0x3b0>
 8025f0c:	2000261e 	bne	r4,zero,8025fa8 <__addsf3+0x404>
 8025f10:	283fa226 	beq	r5,zero,8025d9c <_gp+0xfffe4690>
 8025f14:	2809883a 	mov	r4,r5
 8025f18:	3823883a 	mov	r17,r7
 8025f1c:	003f3806 	br	8025c00 <_gp+0xfffe44f4>
 8025f20:	01400044 	movi	r5,1
 8025f24:	003f9006 	br	8025d68 <_gp+0xfffe465c>
 8025f28:	2809883a 	mov	r4,r5
 8025f2c:	3021883a 	mov	r16,r6
 8025f30:	3823883a 	mov	r17,r7
 8025f34:	003f3206 	br	8025c00 <_gp+0xfffe44f4>
 8025f38:	80000c1e 	bne	r16,zero,8025f6c <__addsf3+0x3c8>
 8025f3c:	20002f26 	beq	r4,zero,8025ffc <__addsf3+0x458>
 8025f40:	00c6303a 	nor	r3,zero,r3
 8025f44:	18002b1e 	bne	r3,zero,8025ff4 <__addsf3+0x450>
 8025f48:	2149883a 	add	r4,r4,r5
 8025f4c:	3021883a 	mov	r16,r6
 8025f50:	003f8606 	br	8025d6c <_gp+0xfffe4660>
 8025f54:	20001b1e 	bne	r4,zero,8025fc4 <__addsf3+0x420>
 8025f58:	28003926 	beq	r5,zero,8026040 <__addsf3+0x49c>
 8025f5c:	2809883a 	mov	r4,r5
 8025f60:	3823883a 	mov	r17,r7
 8025f64:	04003fc4 	movi	r16,255
 8025f68:	003f2506 	br	8025c00 <_gp+0xfffe44f4>
 8025f6c:	01c03fc4 	movi	r7,255
 8025f70:	31c02226 	beq	r6,r7,8025ffc <__addsf3+0x458>
 8025f74:	00c7c83a 	sub	r3,zero,r3
 8025f78:	21010034 	orhi	r4,r4,1024
 8025f7c:	01c006c4 	movi	r7,27
 8025f80:	38c03616 	blt	r7,r3,802605c <__addsf3+0x4b8>
 8025f84:	01c00804 	movi	r7,32
 8025f88:	38cfc83a 	sub	r7,r7,r3
 8025f8c:	21ce983a 	sll	r7,r4,r7
 8025f90:	20c6d83a 	srl	r3,r4,r3
 8025f94:	3808c03a 	cmpne	r4,r7,zero
 8025f98:	1906b03a 	or	r3,r3,r4
 8025f9c:	1949883a 	add	r4,r3,r5
 8025fa0:	3021883a 	mov	r16,r6
 8025fa4:	003f7106 	br	8025d6c <_gp+0xfffe4660>
 8025fa8:	283f1526 	beq	r5,zero,8025c00 <_gp+0xfffe44f4>
 8025fac:	2145c83a 	sub	r2,r4,r5
 8025fb0:	10c1002c 	andhi	r3,r2,1024
 8025fb4:	183f4f26 	beq	r3,zero,8025cf4 <_gp+0xfffe45e8>
 8025fb8:	2909c83a 	sub	r4,r5,r4
 8025fbc:	3823883a 	mov	r17,r7
 8025fc0:	003f0f06 	br	8025c00 <_gp+0xfffe44f4>
 8025fc4:	28001a26 	beq	r5,zero,8026030 <__addsf3+0x48c>
 8025fc8:	2008d0fa 	srli	r4,r4,3
 8025fcc:	2080102c 	andhi	r2,r4,64
 8025fd0:	10000526 	beq	r2,zero,8025fe8 <__addsf3+0x444>
 8025fd4:	280ad0fa 	srli	r5,r5,3
 8025fd8:	2880102c 	andhi	r2,r5,64
 8025fdc:	1000021e 	bne	r2,zero,8025fe8 <__addsf3+0x444>
 8025fe0:	2809883a 	mov	r4,r5
 8025fe4:	3823883a 	mov	r17,r7
 8025fe8:	200890fa 	slli	r4,r4,3
 8025fec:	04003fc4 	movi	r16,255
 8025ff0:	003f0306 	br	8025c00 <_gp+0xfffe44f4>
 8025ff4:	01c03fc4 	movi	r7,255
 8025ff8:	31ffe01e 	bne	r6,r7,8025f7c <_gp+0xfffe4870>
 8025ffc:	2809883a 	mov	r4,r5
 8026000:	3021883a 	mov	r16,r6
 8026004:	003efe06 	br	8025c00 <_gp+0xfffe44f4>
 8026008:	20001126 	beq	r4,zero,8026050 <__addsf3+0x4ac>
 802600c:	28000826 	beq	r5,zero,8026030 <__addsf3+0x48c>
 8026010:	2008d0fa 	srli	r4,r4,3
 8026014:	2080102c 	andhi	r2,r4,64
 8026018:	103ff326 	beq	r2,zero,8025fe8 <_gp+0xfffe48dc>
 802601c:	280ad0fa 	srli	r5,r5,3
 8026020:	2880102c 	andhi	r2,r5,64
 8026024:	103ff01e 	bne	r2,zero,8025fe8 <_gp+0xfffe48dc>
 8026028:	2809883a 	mov	r4,r5
 802602c:	003fee06 	br	8025fe8 <_gp+0xfffe48dc>
 8026030:	04003fc4 	movi	r16,255
 8026034:	003ef206 	br	8025c00 <_gp+0xfffe44f4>
 8026038:	01000044 	movi	r4,1
 802603c:	003f9706 	br	8025e9c <_gp+0xfffe4790>
 8026040:	0005883a 	mov	r2,zero
 8026044:	003f3406 	br	8025d18 <_gp+0xfffe460c>
 8026048:	2809883a 	mov	r4,r5
 802604c:	003eec06 	br	8025c00 <_gp+0xfffe44f4>
 8026050:	2809883a 	mov	r4,r5
 8026054:	04003fc4 	movi	r16,255
 8026058:	003ee906 	br	8025c00 <_gp+0xfffe44f4>
 802605c:	00c00044 	movi	r3,1
 8026060:	003fce06 	br	8025f9c <_gp+0xfffe4890>
 8026064:	0005883a 	mov	r2,zero
 8026068:	003f4e06 	br	8025da4 <_gp+0xfffe4698>

0802606c <__mulsf3>:
 802606c:	defff504 	addi	sp,sp,-44
 8026070:	dc000115 	stw	r16,4(sp)
 8026074:	2020d5fa 	srli	r16,r4,23
 8026078:	dd400615 	stw	r21,24(sp)
 802607c:	202ad7fa 	srli	r21,r4,31
 8026080:	dc800315 	stw	r18,12(sp)
 8026084:	04802034 	movhi	r18,128
 8026088:	df000915 	stw	fp,36(sp)
 802608c:	dd000515 	stw	r20,20(sp)
 8026090:	94bfffc4 	addi	r18,r18,-1
 8026094:	dfc00a15 	stw	ra,40(sp)
 8026098:	ddc00815 	stw	r23,32(sp)
 802609c:	dd800715 	stw	r22,28(sp)
 80260a0:	dcc00415 	stw	r19,16(sp)
 80260a4:	dc400215 	stw	r17,8(sp)
 80260a8:	84003fcc 	andi	r16,r16,255
 80260ac:	9124703a 	and	r18,r18,r4
 80260b0:	a829883a 	mov	r20,r21
 80260b4:	af003fcc 	andi	fp,r21,255
 80260b8:	80005426 	beq	r16,zero,802620c <__mulsf3+0x1a0>
 80260bc:	00803fc4 	movi	r2,255
 80260c0:	80802f26 	beq	r16,r2,8026180 <__mulsf3+0x114>
 80260c4:	91002034 	orhi	r4,r18,128
 80260c8:	202490fa 	slli	r18,r4,3
 80260cc:	843fe044 	addi	r16,r16,-127
 80260d0:	0023883a 	mov	r17,zero
 80260d4:	002f883a 	mov	r23,zero
 80260d8:	2804d5fa 	srli	r2,r5,23
 80260dc:	282cd7fa 	srli	r22,r5,31
 80260e0:	01002034 	movhi	r4,128
 80260e4:	213fffc4 	addi	r4,r4,-1
 80260e8:	10803fcc 	andi	r2,r2,255
 80260ec:	2166703a 	and	r19,r4,r5
 80260f0:	b1803fcc 	andi	r6,r22,255
 80260f4:	10004c26 	beq	r2,zero,8026228 <__mulsf3+0x1bc>
 80260f8:	00c03fc4 	movi	r3,255
 80260fc:	10c04726 	beq	r2,r3,802621c <__mulsf3+0x1b0>
 8026100:	99002034 	orhi	r4,r19,128
 8026104:	202690fa 	slli	r19,r4,3
 8026108:	10bfe044 	addi	r2,r2,-127
 802610c:	0007883a 	mov	r3,zero
 8026110:	80a1883a 	add	r16,r16,r2
 8026114:	010003c4 	movi	r4,15
 8026118:	1c44b03a 	or	r2,r3,r17
 802611c:	b56af03a 	xor	r21,r22,r21
 8026120:	81c00044 	addi	r7,r16,1
 8026124:	20806b36 	bltu	r4,r2,80262d4 <__mulsf3+0x268>
 8026128:	100490ba 	slli	r2,r2,2
 802612c:	010200b4 	movhi	r4,2050
 8026130:	21185004 	addi	r4,r4,24896
 8026134:	1105883a 	add	r2,r2,r4
 8026138:	10800017 	ldw	r2,0(r2)
 802613c:	1000683a 	jmp	r2
 8026140:	080262d4 	ori	zero,at,2443
 8026144:	08026194 	ori	zero,at,2438
 8026148:	08026194 	ori	zero,at,2438
 802614c:	08026190 	cmplti	zero,at,2438
 8026150:	080262b8 	rdprs	zero,at,2442
 8026154:	080262b8 	rdprs	zero,at,2442
 8026158:	080262a4 	muli	zero,at,2442
 802615c:	08026190 	cmplti	zero,at,2438
 8026160:	080262b8 	rdprs	zero,at,2442
 8026164:	080262a4 	muli	zero,at,2442
 8026168:	080262b8 	rdprs	zero,at,2442
 802616c:	08026190 	cmplti	zero,at,2438
 8026170:	080262c4 	addi	zero,at,2443
 8026174:	080262c4 	addi	zero,at,2443
 8026178:	080262c4 	addi	zero,at,2443
 802617c:	080263a0 	cmpeqi	zero,at,2446
 8026180:	90003b1e 	bne	r18,zero,8026270 <__mulsf3+0x204>
 8026184:	04400204 	movi	r17,8
 8026188:	05c00084 	movi	r23,2
 802618c:	003fd206 	br	80260d8 <_gp+0xfffe49cc>
 8026190:	302b883a 	mov	r21,r6
 8026194:	00800084 	movi	r2,2
 8026198:	18802626 	beq	r3,r2,8026234 <__mulsf3+0x1c8>
 802619c:	008000c4 	movi	r2,3
 80261a0:	1880ab26 	beq	r3,r2,8026450 <__mulsf3+0x3e4>
 80261a4:	00800044 	movi	r2,1
 80261a8:	1880a21e 	bne	r3,r2,8026434 <__mulsf3+0x3c8>
 80261ac:	a829883a 	mov	r20,r21
 80261b0:	0007883a 	mov	r3,zero
 80261b4:	0009883a 	mov	r4,zero
 80261b8:	18803fcc 	andi	r2,r3,255
 80261bc:	100695fa 	slli	r3,r2,23
 80261c0:	a0803fcc 	andi	r2,r20,255
 80261c4:	100a97fa 	slli	r5,r2,31
 80261c8:	00802034 	movhi	r2,128
 80261cc:	10bfffc4 	addi	r2,r2,-1
 80261d0:	2084703a 	and	r2,r4,r2
 80261d4:	10c4b03a 	or	r2,r2,r3
 80261d8:	1144b03a 	or	r2,r2,r5
 80261dc:	dfc00a17 	ldw	ra,40(sp)
 80261e0:	df000917 	ldw	fp,36(sp)
 80261e4:	ddc00817 	ldw	r23,32(sp)
 80261e8:	dd800717 	ldw	r22,28(sp)
 80261ec:	dd400617 	ldw	r21,24(sp)
 80261f0:	dd000517 	ldw	r20,20(sp)
 80261f4:	dcc00417 	ldw	r19,16(sp)
 80261f8:	dc800317 	ldw	r18,12(sp)
 80261fc:	dc400217 	ldw	r17,8(sp)
 8026200:	dc000117 	ldw	r16,4(sp)
 8026204:	dec00b04 	addi	sp,sp,44
 8026208:	f800283a 	ret
 802620c:	90000d1e 	bne	r18,zero,8026244 <__mulsf3+0x1d8>
 8026210:	04400104 	movi	r17,4
 8026214:	05c00044 	movi	r23,1
 8026218:	003faf06 	br	80260d8 <_gp+0xfffe49cc>
 802621c:	9806c03a 	cmpne	r3,r19,zero
 8026220:	18c00084 	addi	r3,r3,2
 8026224:	003fba06 	br	8026110 <_gp+0xfffe4a04>
 8026228:	9800141e 	bne	r19,zero,802627c <__mulsf3+0x210>
 802622c:	00c00044 	movi	r3,1
 8026230:	003fb706 	br	8026110 <_gp+0xfffe4a04>
 8026234:	a829883a 	mov	r20,r21
 8026238:	00ffffc4 	movi	r3,-1
 802623c:	0009883a 	mov	r4,zero
 8026240:	003fdd06 	br	80261b8 <_gp+0xfffe4aac>
 8026244:	9009883a 	mov	r4,r18
 8026248:	d9400015 	stw	r5,0(sp)
 802624c:	802939c0 	call	802939c <__clzsi2>
 8026250:	10fffec4 	addi	r3,r2,-5
 8026254:	10801d84 	addi	r2,r2,118
 8026258:	90e4983a 	sll	r18,r18,r3
 802625c:	00a1c83a 	sub	r16,zero,r2
 8026260:	0023883a 	mov	r17,zero
 8026264:	002f883a 	mov	r23,zero
 8026268:	d9400017 	ldw	r5,0(sp)
 802626c:	003f9a06 	br	80260d8 <_gp+0xfffe49cc>
 8026270:	04400304 	movi	r17,12
 8026274:	05c000c4 	movi	r23,3
 8026278:	003f9706 	br	80260d8 <_gp+0xfffe49cc>
 802627c:	9809883a 	mov	r4,r19
 8026280:	d9800015 	stw	r6,0(sp)
 8026284:	802939c0 	call	802939c <__clzsi2>
 8026288:	10fffec4 	addi	r3,r2,-5
 802628c:	10801d84 	addi	r2,r2,118
 8026290:	98e6983a 	sll	r19,r19,r3
 8026294:	0085c83a 	sub	r2,zero,r2
 8026298:	0007883a 	mov	r3,zero
 802629c:	d9800017 	ldw	r6,0(sp)
 80262a0:	003f9b06 	br	8026110 <_gp+0xfffe4a04>
 80262a4:	01002034 	movhi	r4,128
 80262a8:	0029883a 	mov	r20,zero
 80262ac:	213fffc4 	addi	r4,r4,-1
 80262b0:	00ffffc4 	movi	r3,-1
 80262b4:	003fc006 	br	80261b8 <_gp+0xfffe4aac>
 80262b8:	9027883a 	mov	r19,r18
 80262bc:	b807883a 	mov	r3,r23
 80262c0:	003fb406 	br	8026194 <_gp+0xfffe4a88>
 80262c4:	9027883a 	mov	r19,r18
 80262c8:	e02b883a 	mov	r21,fp
 80262cc:	b807883a 	mov	r3,r23
 80262d0:	003fb006 	br	8026194 <_gp+0xfffe4a88>
 80262d4:	9004d43a 	srli	r2,r18,16
 80262d8:	9810d43a 	srli	r8,r19,16
 80262dc:	94bfffcc 	andi	r18,r18,65535
 80262e0:	993fffcc 	andi	r4,r19,65535
 80262e4:	910d383a 	mul	r6,r18,r4
 80262e8:	20a7383a 	mul	r19,r4,r2
 80262ec:	9225383a 	mul	r18,r18,r8
 80262f0:	3006d43a 	srli	r3,r6,16
 80262f4:	1211383a 	mul	r8,r2,r8
 80262f8:	94e5883a 	add	r18,r18,r19
 80262fc:	1c87883a 	add	r3,r3,r18
 8026300:	1cc0022e 	bgeu	r3,r19,802630c <__mulsf3+0x2a0>
 8026304:	00800074 	movhi	r2,1
 8026308:	4091883a 	add	r8,r8,r2
 802630c:	1804943a 	slli	r2,r3,16
 8026310:	31bfffcc 	andi	r6,r6,65535
 8026314:	1806d43a 	srli	r3,r3,16
 8026318:	1185883a 	add	r2,r2,r6
 802631c:	102691ba 	slli	r19,r2,6
 8026320:	1a07883a 	add	r3,r3,r8
 8026324:	1004d6ba 	srli	r2,r2,26
 8026328:	180891ba 	slli	r4,r3,6
 802632c:	9826c03a 	cmpne	r19,r19,zero
 8026330:	9884b03a 	or	r2,r19,r2
 8026334:	1126b03a 	or	r19,r2,r4
 8026338:	9882002c 	andhi	r2,r19,2048
 802633c:	10000426 	beq	r2,zero,8026350 <__mulsf3+0x2e4>
 8026340:	9804d07a 	srli	r2,r19,1
 8026344:	9900004c 	andi	r4,r19,1
 8026348:	3821883a 	mov	r16,r7
 802634c:	1126b03a 	or	r19,r2,r4
 8026350:	80c01fc4 	addi	r3,r16,127
 8026354:	00c0210e 	bge	zero,r3,80263dc <__mulsf3+0x370>
 8026358:	988001cc 	andi	r2,r19,7
 802635c:	10000426 	beq	r2,zero,8026370 <__mulsf3+0x304>
 8026360:	988003cc 	andi	r2,r19,15
 8026364:	01000104 	movi	r4,4
 8026368:	11000126 	beq	r2,r4,8026370 <__mulsf3+0x304>
 802636c:	9927883a 	add	r19,r19,r4
 8026370:	9882002c 	andhi	r2,r19,2048
 8026374:	10000426 	beq	r2,zero,8026388 <__mulsf3+0x31c>
 8026378:	00be0034 	movhi	r2,63488
 802637c:	10bfffc4 	addi	r2,r2,-1
 8026380:	80c02004 	addi	r3,r16,128
 8026384:	98a6703a 	and	r19,r19,r2
 8026388:	00803f84 	movi	r2,254
 802638c:	10ffa916 	blt	r2,r3,8026234 <_gp+0xfffe4b28>
 8026390:	980891ba 	slli	r4,r19,6
 8026394:	a829883a 	mov	r20,r21
 8026398:	2008d27a 	srli	r4,r4,9
 802639c:	003f8606 	br	80261b8 <_gp+0xfffe4aac>
 80263a0:	9080102c 	andhi	r2,r18,64
 80263a4:	10000826 	beq	r2,zero,80263c8 <__mulsf3+0x35c>
 80263a8:	9880102c 	andhi	r2,r19,64
 80263ac:	1000061e 	bne	r2,zero,80263c8 <__mulsf3+0x35c>
 80263b0:	00802034 	movhi	r2,128
 80263b4:	99001034 	orhi	r4,r19,64
 80263b8:	10bfffc4 	addi	r2,r2,-1
 80263bc:	b029883a 	mov	r20,r22
 80263c0:	2088703a 	and	r4,r4,r2
 80263c4:	003fba06 	br	80262b0 <_gp+0xfffe4ba4>
 80263c8:	00802034 	movhi	r2,128
 80263cc:	91001034 	orhi	r4,r18,64
 80263d0:	10bfffc4 	addi	r2,r2,-1
 80263d4:	2088703a 	and	r4,r4,r2
 80263d8:	003fb506 	br	80262b0 <_gp+0xfffe4ba4>
 80263dc:	00800044 	movi	r2,1
 80263e0:	10c7c83a 	sub	r3,r2,r3
 80263e4:	008006c4 	movi	r2,27
 80263e8:	10ff7016 	blt	r2,r3,80261ac <_gp+0xfffe4aa0>
 80263ec:	00800804 	movi	r2,32
 80263f0:	10c5c83a 	sub	r2,r2,r3
 80263f4:	9884983a 	sll	r2,r19,r2
 80263f8:	98c6d83a 	srl	r3,r19,r3
 80263fc:	1004c03a 	cmpne	r2,r2,zero
 8026400:	1884b03a 	or	r2,r3,r2
 8026404:	10c001cc 	andi	r3,r2,7
 8026408:	18000426 	beq	r3,zero,802641c <__mulsf3+0x3b0>
 802640c:	10c003cc 	andi	r3,r2,15
 8026410:	01000104 	movi	r4,4
 8026414:	19000126 	beq	r3,r4,802641c <__mulsf3+0x3b0>
 8026418:	1105883a 	add	r2,r2,r4
 802641c:	10c1002c 	andhi	r3,r2,1024
 8026420:	18000626 	beq	r3,zero,802643c <__mulsf3+0x3d0>
 8026424:	a829883a 	mov	r20,r21
 8026428:	00c00044 	movi	r3,1
 802642c:	0009883a 	mov	r4,zero
 8026430:	003f6106 	br	80261b8 <_gp+0xfffe4aac>
 8026434:	3821883a 	mov	r16,r7
 8026438:	003fc506 	br	8026350 <_gp+0xfffe4c44>
 802643c:	100491ba 	slli	r2,r2,6
 8026440:	a829883a 	mov	r20,r21
 8026444:	0007883a 	mov	r3,zero
 8026448:	1008d27a 	srli	r4,r2,9
 802644c:	003f5a06 	br	80261b8 <_gp+0xfffe4aac>
 8026450:	00802034 	movhi	r2,128
 8026454:	99001034 	orhi	r4,r19,64
 8026458:	10bfffc4 	addi	r2,r2,-1
 802645c:	a829883a 	mov	r20,r21
 8026460:	2088703a 	and	r4,r4,r2
 8026464:	003f9206 	br	80262b0 <_gp+0xfffe4ba4>

08026468 <__subsf3>:
 8026468:	defffc04 	addi	sp,sp,-16
 802646c:	280cd5fa 	srli	r6,r5,23
 8026470:	dc000015 	stw	r16,0(sp)
 8026474:	01c02034 	movhi	r7,128
 8026478:	2020d5fa 	srli	r16,r4,23
 802647c:	39ffffc4 	addi	r7,r7,-1
 8026480:	3906703a 	and	r3,r7,r4
 8026484:	dc400115 	stw	r17,4(sp)
 8026488:	394e703a 	and	r7,r7,r5
 802648c:	2022d7fa 	srli	r17,r4,31
 8026490:	dfc00315 	stw	ra,12(sp)
 8026494:	dc800215 	stw	r18,8(sp)
 8026498:	31803fcc 	andi	r6,r6,255
 802649c:	01003fc4 	movi	r4,255
 80264a0:	84003fcc 	andi	r16,r16,255
 80264a4:	180690fa 	slli	r3,r3,3
 80264a8:	2804d7fa 	srli	r2,r5,31
 80264ac:	380e90fa 	slli	r7,r7,3
 80264b0:	31006d26 	beq	r6,r4,8026668 <__subsf3+0x200>
 80264b4:	1080005c 	xori	r2,r2,1
 80264b8:	8189c83a 	sub	r4,r16,r6
 80264bc:	14404f26 	beq	r2,r17,80265fc <__subsf3+0x194>
 80264c0:	0100770e 	bge	zero,r4,80266a0 <__subsf3+0x238>
 80264c4:	30001e1e 	bne	r6,zero,8026540 <__subsf3+0xd8>
 80264c8:	38006a1e 	bne	r7,zero,8026674 <__subsf3+0x20c>
 80264cc:	188001cc 	andi	r2,r3,7
 80264d0:	10000426 	beq	r2,zero,80264e4 <__subsf3+0x7c>
 80264d4:	188003cc 	andi	r2,r3,15
 80264d8:	01000104 	movi	r4,4
 80264dc:	11000126 	beq	r2,r4,80264e4 <__subsf3+0x7c>
 80264e0:	1907883a 	add	r3,r3,r4
 80264e4:	1881002c 	andhi	r2,r3,1024
 80264e8:	10003926 	beq	r2,zero,80265d0 <__subsf3+0x168>
 80264ec:	84000044 	addi	r16,r16,1
 80264f0:	00803fc4 	movi	r2,255
 80264f4:	80807526 	beq	r16,r2,80266cc <__subsf3+0x264>
 80264f8:	180691ba 	slli	r3,r3,6
 80264fc:	8880004c 	andi	r2,r17,1
 8026500:	180ad27a 	srli	r5,r3,9
 8026504:	84003fcc 	andi	r16,r16,255
 8026508:	800695fa 	slli	r3,r16,23
 802650c:	10803fcc 	andi	r2,r2,255
 8026510:	01002034 	movhi	r4,128
 8026514:	213fffc4 	addi	r4,r4,-1
 8026518:	100497fa 	slli	r2,r2,31
 802651c:	2920703a 	and	r16,r5,r4
 8026520:	80e0b03a 	or	r16,r16,r3
 8026524:	8084b03a 	or	r2,r16,r2
 8026528:	dfc00317 	ldw	ra,12(sp)
 802652c:	dc800217 	ldw	r18,8(sp)
 8026530:	dc400117 	ldw	r17,4(sp)
 8026534:	dc000017 	ldw	r16,0(sp)
 8026538:	dec00404 	addi	sp,sp,16
 802653c:	f800283a 	ret
 8026540:	00803fc4 	movi	r2,255
 8026544:	80bfe126 	beq	r16,r2,80264cc <_gp+0xfffe4dc0>
 8026548:	39c10034 	orhi	r7,r7,1024
 802654c:	008006c4 	movi	r2,27
 8026550:	11007416 	blt	r2,r4,8026724 <__subsf3+0x2bc>
 8026554:	00800804 	movi	r2,32
 8026558:	1105c83a 	sub	r2,r2,r4
 802655c:	3884983a 	sll	r2,r7,r2
 8026560:	390ed83a 	srl	r7,r7,r4
 8026564:	1008c03a 	cmpne	r4,r2,zero
 8026568:	390eb03a 	or	r7,r7,r4
 802656c:	19c7c83a 	sub	r3,r3,r7
 8026570:	1881002c 	andhi	r2,r3,1024
 8026574:	10001426 	beq	r2,zero,80265c8 <__subsf3+0x160>
 8026578:	04810034 	movhi	r18,1024
 802657c:	94bfffc4 	addi	r18,r18,-1
 8026580:	1ca4703a 	and	r18,r3,r18
 8026584:	9009883a 	mov	r4,r18
 8026588:	802939c0 	call	802939c <__clzsi2>
 802658c:	10bffec4 	addi	r2,r2,-5
 8026590:	90a4983a 	sll	r18,r18,r2
 8026594:	14005116 	blt	r2,r16,80266dc <__subsf3+0x274>
 8026598:	1405c83a 	sub	r2,r2,r16
 802659c:	10c00044 	addi	r3,r2,1
 80265a0:	00800804 	movi	r2,32
 80265a4:	10c5c83a 	sub	r2,r2,r3
 80265a8:	9084983a 	sll	r2,r18,r2
 80265ac:	90e4d83a 	srl	r18,r18,r3
 80265b0:	0021883a 	mov	r16,zero
 80265b4:	1006c03a 	cmpne	r3,r2,zero
 80265b8:	90c6b03a 	or	r3,r18,r3
 80265bc:	003fc306 	br	80264cc <_gp+0xfffe4dc0>
 80265c0:	2000e026 	beq	r4,zero,8026944 <__subsf3+0x4dc>
 80265c4:	2007883a 	mov	r3,r4
 80265c8:	188001cc 	andi	r2,r3,7
 80265cc:	103fc11e 	bne	r2,zero,80264d4 <_gp+0xfffe4dc8>
 80265d0:	180ad0fa 	srli	r5,r3,3
 80265d4:	00c03fc4 	movi	r3,255
 80265d8:	8880004c 	andi	r2,r17,1
 80265dc:	80c0031e 	bne	r16,r3,80265ec <__subsf3+0x184>
 80265e0:	28006d26 	beq	r5,zero,8026798 <__subsf3+0x330>
 80265e4:	29401034 	orhi	r5,r5,64
 80265e8:	043fffc4 	movi	r16,-1
 80265ec:	00c02034 	movhi	r3,128
 80265f0:	18ffffc4 	addi	r3,r3,-1
 80265f4:	28ca703a 	and	r5,r5,r3
 80265f8:	003fc206 	br	8026504 <_gp+0xfffe4df8>
 80265fc:	01003c0e 	bge	zero,r4,80266f0 <__subsf3+0x288>
 8026600:	30002126 	beq	r6,zero,8026688 <__subsf3+0x220>
 8026604:	01403fc4 	movi	r5,255
 8026608:	817fb026 	beq	r16,r5,80264cc <_gp+0xfffe4dc0>
 802660c:	39c10034 	orhi	r7,r7,1024
 8026610:	014006c4 	movi	r5,27
 8026614:	29007416 	blt	r5,r4,80267e8 <__subsf3+0x380>
 8026618:	01400804 	movi	r5,32
 802661c:	290bc83a 	sub	r5,r5,r4
 8026620:	394a983a 	sll	r5,r7,r5
 8026624:	390ed83a 	srl	r7,r7,r4
 8026628:	2808c03a 	cmpne	r4,r5,zero
 802662c:	390eb03a 	or	r7,r7,r4
 8026630:	19c7883a 	add	r3,r3,r7
 8026634:	1901002c 	andhi	r4,r3,1024
 8026638:	20003826 	beq	r4,zero,802671c <__subsf3+0x2b4>
 802663c:	84000044 	addi	r16,r16,1
 8026640:	01003fc4 	movi	r4,255
 8026644:	81005426 	beq	r16,r4,8026798 <__subsf3+0x330>
 8026648:	1023883a 	mov	r17,r2
 802664c:	00bf0034 	movhi	r2,64512
 8026650:	10bfffc4 	addi	r2,r2,-1
 8026654:	1900004c 	andi	r4,r3,1
 8026658:	1886703a 	and	r3,r3,r2
 802665c:	1806d07a 	srli	r3,r3,1
 8026660:	1906b03a 	or	r3,r3,r4
 8026664:	003f9906 	br	80264cc <_gp+0xfffe4dc0>
 8026668:	383f9226 	beq	r7,zero,80264b4 <_gp+0xfffe4da8>
 802666c:	10803fcc 	andi	r2,r2,255
 8026670:	003f9106 	br	80264b8 <_gp+0xfffe4dac>
 8026674:	213fffc4 	addi	r4,r4,-1
 8026678:	203fbc26 	beq	r4,zero,802656c <_gp+0xfffe4e60>
 802667c:	00803fc4 	movi	r2,255
 8026680:	80bfb21e 	bne	r16,r2,802654c <_gp+0xfffe4e40>
 8026684:	003f9106 	br	80264cc <_gp+0xfffe4dc0>
 8026688:	383f9026 	beq	r7,zero,80264cc <_gp+0xfffe4dc0>
 802668c:	213fffc4 	addi	r4,r4,-1
 8026690:	203fe726 	beq	r4,zero,8026630 <_gp+0xfffe4f24>
 8026694:	01403fc4 	movi	r5,255
 8026698:	817fdd1e 	bne	r16,r5,8026610 <_gp+0xfffe4f04>
 802669c:	003f8b06 	br	80264cc <_gp+0xfffe4dc0>
 80266a0:	2000221e 	bne	r4,zero,802672c <__subsf3+0x2c4>
 80266a4:	81000044 	addi	r4,r16,1
 80266a8:	21003fcc 	andi	r4,r4,255
 80266ac:	01400044 	movi	r5,1
 80266b0:	2900470e 	bge	r5,r4,80267d0 <__subsf3+0x368>
 80266b4:	19e5c83a 	sub	r18,r3,r7
 80266b8:	9141002c 	andhi	r5,r18,1024
 80266bc:	28002d26 	beq	r5,zero,8026774 <__subsf3+0x30c>
 80266c0:	38e5c83a 	sub	r18,r7,r3
 80266c4:	1023883a 	mov	r17,r2
 80266c8:	003fae06 	br	8026584 <_gp+0xfffe4e78>
 80266cc:	8880004c 	andi	r2,r17,1
 80266d0:	043fffc4 	movi	r16,-1
 80266d4:	000b883a 	mov	r5,zero
 80266d8:	003f8a06 	br	8026504 <_gp+0xfffe4df8>
 80266dc:	00ff0034 	movhi	r3,64512
 80266e0:	18ffffc4 	addi	r3,r3,-1
 80266e4:	80a1c83a 	sub	r16,r16,r2
 80266e8:	90c6703a 	and	r3,r18,r3
 80266ec:	003f7706 	br	80264cc <_gp+0xfffe4dc0>
 80266f0:	2000431e 	bne	r4,zero,8026800 <__subsf3+0x398>
 80266f4:	81000044 	addi	r4,r16,1
 80266f8:	21803fcc 	andi	r6,r4,255
 80266fc:	01400044 	movi	r5,1
 8026700:	2980280e 	bge	r5,r6,80267a4 <__subsf3+0x33c>
 8026704:	01403fc4 	movi	r5,255
 8026708:	21402326 	beq	r4,r5,8026798 <__subsf3+0x330>
 802670c:	19c7883a 	add	r3,r3,r7
 8026710:	1806d07a 	srli	r3,r3,1
 8026714:	2021883a 	mov	r16,r4
 8026718:	003f6c06 	br	80264cc <_gp+0xfffe4dc0>
 802671c:	1023883a 	mov	r17,r2
 8026720:	003fa906 	br	80265c8 <_gp+0xfffe4ebc>
 8026724:	01c00044 	movi	r7,1
 8026728:	003f9006 	br	802656c <_gp+0xfffe4e60>
 802672c:	8000151e 	bne	r16,zero,8026784 <__subsf3+0x31c>
 8026730:	18002f26 	beq	r3,zero,80267f0 <__subsf3+0x388>
 8026734:	0108303a 	nor	r4,zero,r4
 8026738:	20000a26 	beq	r4,zero,8026764 <__subsf3+0x2fc>
 802673c:	01403fc4 	movi	r5,255
 8026740:	31402b26 	beq	r6,r5,80267f0 <__subsf3+0x388>
 8026744:	014006c4 	movi	r5,27
 8026748:	29006e16 	blt	r5,r4,8026904 <__subsf3+0x49c>
 802674c:	01400804 	movi	r5,32
 8026750:	290bc83a 	sub	r5,r5,r4
 8026754:	194a983a 	sll	r5,r3,r5
 8026758:	1908d83a 	srl	r4,r3,r4
 802675c:	2806c03a 	cmpne	r3,r5,zero
 8026760:	20c6b03a 	or	r3,r4,r3
 8026764:	38c7c83a 	sub	r3,r7,r3
 8026768:	3021883a 	mov	r16,r6
 802676c:	1023883a 	mov	r17,r2
 8026770:	003f7f06 	br	8026570 <_gp+0xfffe4e64>
 8026774:	903f831e 	bne	r18,zero,8026584 <_gp+0xfffe4e78>
 8026778:	0005883a 	mov	r2,zero
 802677c:	0021883a 	mov	r16,zero
 8026780:	003f9a06 	br	80265ec <_gp+0xfffe4ee0>
 8026784:	01403fc4 	movi	r5,255
 8026788:	31401926 	beq	r6,r5,80267f0 <__subsf3+0x388>
 802678c:	0109c83a 	sub	r4,zero,r4
 8026790:	18c10034 	orhi	r3,r3,1024
 8026794:	003feb06 	br	8026744 <_gp+0xfffe5038>
 8026798:	043fffc4 	movi	r16,-1
 802679c:	000b883a 	mov	r5,zero
 80267a0:	003f5806 	br	8026504 <_gp+0xfffe4df8>
 80267a4:	8000481e 	bne	r16,zero,80268c8 <__subsf3+0x460>
 80267a8:	18006226 	beq	r3,zero,8026934 <__subsf3+0x4cc>
 80267ac:	383f4726 	beq	r7,zero,80264cc <_gp+0xfffe4dc0>
 80267b0:	19c7883a 	add	r3,r3,r7
 80267b4:	1881002c 	andhi	r2,r3,1024
 80267b8:	103f8326 	beq	r2,zero,80265c8 <_gp+0xfffe4ebc>
 80267bc:	00bf0034 	movhi	r2,64512
 80267c0:	10bfffc4 	addi	r2,r2,-1
 80267c4:	2821883a 	mov	r16,r5
 80267c8:	1886703a 	and	r3,r3,r2
 80267cc:	003f3f06 	br	80264cc <_gp+0xfffe4dc0>
 80267d0:	80001c1e 	bne	r16,zero,8026844 <__subsf3+0x3dc>
 80267d4:	1800261e 	bne	r3,zero,8026870 <__subsf3+0x408>
 80267d8:	38004c26 	beq	r7,zero,802690c <__subsf3+0x4a4>
 80267dc:	3807883a 	mov	r3,r7
 80267e0:	1023883a 	mov	r17,r2
 80267e4:	003f3906 	br	80264cc <_gp+0xfffe4dc0>
 80267e8:	01c00044 	movi	r7,1
 80267ec:	003f9006 	br	8026630 <_gp+0xfffe4f24>
 80267f0:	3807883a 	mov	r3,r7
 80267f4:	3021883a 	mov	r16,r6
 80267f8:	1023883a 	mov	r17,r2
 80267fc:	003f3306 	br	80264cc <_gp+0xfffe4dc0>
 8026800:	8000161e 	bne	r16,zero,802685c <__subsf3+0x3f4>
 8026804:	18002d26 	beq	r3,zero,80268bc <__subsf3+0x454>
 8026808:	0108303a 	nor	r4,zero,r4
 802680c:	20000a26 	beq	r4,zero,8026838 <__subsf3+0x3d0>
 8026810:	01403fc4 	movi	r5,255
 8026814:	31402926 	beq	r6,r5,80268bc <__subsf3+0x454>
 8026818:	014006c4 	movi	r5,27
 802681c:	29004716 	blt	r5,r4,802693c <__subsf3+0x4d4>
 8026820:	01400804 	movi	r5,32
 8026824:	290bc83a 	sub	r5,r5,r4
 8026828:	194a983a 	sll	r5,r3,r5
 802682c:	1908d83a 	srl	r4,r3,r4
 8026830:	2806c03a 	cmpne	r3,r5,zero
 8026834:	20c6b03a 	or	r3,r4,r3
 8026838:	19c7883a 	add	r3,r3,r7
 802683c:	3021883a 	mov	r16,r6
 8026840:	003f7c06 	br	8026634 <_gp+0xfffe4f28>
 8026844:	1800111e 	bne	r3,zero,802688c <__subsf3+0x424>
 8026848:	38003326 	beq	r7,zero,8026918 <__subsf3+0x4b0>
 802684c:	3807883a 	mov	r3,r7
 8026850:	1023883a 	mov	r17,r2
 8026854:	04003fc4 	movi	r16,255
 8026858:	003f1c06 	br	80264cc <_gp+0xfffe4dc0>
 802685c:	01403fc4 	movi	r5,255
 8026860:	31401626 	beq	r6,r5,80268bc <__subsf3+0x454>
 8026864:	0109c83a 	sub	r4,zero,r4
 8026868:	18c10034 	orhi	r3,r3,1024
 802686c:	003fea06 	br	8026818 <_gp+0xfffe510c>
 8026870:	383f1626 	beq	r7,zero,80264cc <_gp+0xfffe4dc0>
 8026874:	19c9c83a 	sub	r4,r3,r7
 8026878:	2141002c 	andhi	r5,r4,1024
 802687c:	283f5026 	beq	r5,zero,80265c0 <_gp+0xfffe4eb4>
 8026880:	38c7c83a 	sub	r3,r7,r3
 8026884:	1023883a 	mov	r17,r2
 8026888:	003f1006 	br	80264cc <_gp+0xfffe4dc0>
 802688c:	38001b26 	beq	r7,zero,80268fc <__subsf3+0x494>
 8026890:	1806d0fa 	srli	r3,r3,3
 8026894:	1900102c 	andhi	r4,r3,64
 8026898:	20000526 	beq	r4,zero,80268b0 <__subsf3+0x448>
 802689c:	380ed0fa 	srli	r7,r7,3
 80268a0:	3900102c 	andhi	r4,r7,64
 80268a4:	2000021e 	bne	r4,zero,80268b0 <__subsf3+0x448>
 80268a8:	3807883a 	mov	r3,r7
 80268ac:	1023883a 	mov	r17,r2
 80268b0:	180690fa 	slli	r3,r3,3
 80268b4:	04003fc4 	movi	r16,255
 80268b8:	003f0406 	br	80264cc <_gp+0xfffe4dc0>
 80268bc:	3807883a 	mov	r3,r7
 80268c0:	3021883a 	mov	r16,r6
 80268c4:	003f0106 	br	80264cc <_gp+0xfffe4dc0>
 80268c8:	18001726 	beq	r3,zero,8026928 <__subsf3+0x4c0>
 80268cc:	38000b26 	beq	r7,zero,80268fc <__subsf3+0x494>
 80268d0:	1806d0fa 	srli	r3,r3,3
 80268d4:	1900102c 	andhi	r4,r3,64
 80268d8:	20000426 	beq	r4,zero,80268ec <__subsf3+0x484>
 80268dc:	380ed0fa 	srli	r7,r7,3
 80268e0:	3900102c 	andhi	r4,r7,64
 80268e4:	2000011e 	bne	r4,zero,80268ec <__subsf3+0x484>
 80268e8:	3807883a 	mov	r3,r7
 80268ec:	180690fa 	slli	r3,r3,3
 80268f0:	1023883a 	mov	r17,r2
 80268f4:	04003fc4 	movi	r16,255
 80268f8:	003ef406 	br	80264cc <_gp+0xfffe4dc0>
 80268fc:	04003fc4 	movi	r16,255
 8026900:	003ef206 	br	80264cc <_gp+0xfffe4dc0>
 8026904:	00c00044 	movi	r3,1
 8026908:	003f9606 	br	8026764 <_gp+0xfffe5058>
 802690c:	000b883a 	mov	r5,zero
 8026910:	0005883a 	mov	r2,zero
 8026914:	003f3506 	br	80265ec <_gp+0xfffe4ee0>
 8026918:	01402034 	movhi	r5,128
 802691c:	297fffc4 	addi	r5,r5,-1
 8026920:	0005883a 	mov	r2,zero
 8026924:	003f2f06 	br	80265e4 <_gp+0xfffe4ed8>
 8026928:	3807883a 	mov	r3,r7
 802692c:	04003fc4 	movi	r16,255
 8026930:	003ee606 	br	80264cc <_gp+0xfffe4dc0>
 8026934:	3807883a 	mov	r3,r7
 8026938:	003ee406 	br	80264cc <_gp+0xfffe4dc0>
 802693c:	00c00044 	movi	r3,1
 8026940:	003fbd06 	br	8026838 <_gp+0xfffe512c>
 8026944:	0005883a 	mov	r2,zero
 8026948:	003f2806 	br	80265ec <_gp+0xfffe4ee0>

0802694c <__fixsfsi>:
 802694c:	200ad5fa 	srli	r5,r4,23
 8026950:	00c02034 	movhi	r3,128
 8026954:	18ffffc4 	addi	r3,r3,-1
 8026958:	29403fcc 	andi	r5,r5,255
 802695c:	00801f84 	movi	r2,126
 8026960:	1906703a 	and	r3,r3,r4
 8026964:	2008d7fa 	srli	r4,r4,31
 8026968:	11400e0e 	bge	r2,r5,80269a4 <__fixsfsi+0x58>
 802696c:	00802744 	movi	r2,157
 8026970:	11400816 	blt	r2,r5,8026994 <__fixsfsi+0x48>
 8026974:	00802544 	movi	r2,149
 8026978:	18c02034 	orhi	r3,r3,128
 802697c:	11400b0e 	bge	r2,r5,80269ac <__fixsfsi+0x60>
 8026980:	28bfda84 	addi	r2,r5,-150
 8026984:	1884983a 	sll	r2,r3,r2
 8026988:	20000726 	beq	r4,zero,80269a8 <__fixsfsi+0x5c>
 802698c:	0085c83a 	sub	r2,zero,r2
 8026990:	f800283a 	ret
 8026994:	00a00034 	movhi	r2,32768
 8026998:	10bfffc4 	addi	r2,r2,-1
 802699c:	2085883a 	add	r2,r4,r2
 80269a0:	f800283a 	ret
 80269a4:	0005883a 	mov	r2,zero
 80269a8:	f800283a 	ret
 80269ac:	00802584 	movi	r2,150
 80269b0:	1145c83a 	sub	r2,r2,r5
 80269b4:	1884d83a 	srl	r2,r3,r2
 80269b8:	003ff306 	br	8026988 <_gp+0xfffe527c>

080269bc <__floatsisf>:
 80269bc:	defffd04 	addi	sp,sp,-12
 80269c0:	dfc00215 	stw	ra,8(sp)
 80269c4:	dc400115 	stw	r17,4(sp)
 80269c8:	dc000015 	stw	r16,0(sp)
 80269cc:	20003526 	beq	r4,zero,8026aa4 <__floatsisf+0xe8>
 80269d0:	2021883a 	mov	r16,r4
 80269d4:	2022d7fa 	srli	r17,r4,31
 80269d8:	20003616 	blt	r4,zero,8026ab4 <__floatsisf+0xf8>
 80269dc:	8009883a 	mov	r4,r16
 80269e0:	802939c0 	call	802939c <__clzsi2>
 80269e4:	00c02784 	movi	r3,158
 80269e8:	1887c83a 	sub	r3,r3,r2
 80269ec:	01002584 	movi	r4,150
 80269f0:	20c01416 	blt	r4,r3,8026a44 <__floatsisf+0x88>
 80269f4:	20c9c83a 	sub	r4,r4,r3
 80269f8:	8120983a 	sll	r16,r16,r4
 80269fc:	00802034 	movhi	r2,128
 8026a00:	10bfffc4 	addi	r2,r2,-1
 8026a04:	8809883a 	mov	r4,r17
 8026a08:	80a0703a 	and	r16,r16,r2
 8026a0c:	18803fcc 	andi	r2,r3,255
 8026a10:	100695fa 	slli	r3,r2,23
 8026a14:	20803fcc 	andi	r2,r4,255
 8026a18:	100897fa 	slli	r4,r2,31
 8026a1c:	00802034 	movhi	r2,128
 8026a20:	10bfffc4 	addi	r2,r2,-1
 8026a24:	8084703a 	and	r2,r16,r2
 8026a28:	10c4b03a 	or	r2,r2,r3
 8026a2c:	1104b03a 	or	r2,r2,r4
 8026a30:	dfc00217 	ldw	ra,8(sp)
 8026a34:	dc400117 	ldw	r17,4(sp)
 8026a38:	dc000017 	ldw	r16,0(sp)
 8026a3c:	dec00304 	addi	sp,sp,12
 8026a40:	f800283a 	ret
 8026a44:	01002644 	movi	r4,153
 8026a48:	20c01c16 	blt	r4,r3,8026abc <__floatsisf+0x100>
 8026a4c:	20c9c83a 	sub	r4,r4,r3
 8026a50:	8120983a 	sll	r16,r16,r4
 8026a54:	013f0034 	movhi	r4,64512
 8026a58:	213fffc4 	addi	r4,r4,-1
 8026a5c:	814001cc 	andi	r5,r16,7
 8026a60:	8108703a 	and	r4,r16,r4
 8026a64:	28000426 	beq	r5,zero,8026a78 <__floatsisf+0xbc>
 8026a68:	840003cc 	andi	r16,r16,15
 8026a6c:	01400104 	movi	r5,4
 8026a70:	81400126 	beq	r16,r5,8026a78 <__floatsisf+0xbc>
 8026a74:	2149883a 	add	r4,r4,r5
 8026a78:	2141002c 	andhi	r5,r4,1024
 8026a7c:	28000526 	beq	r5,zero,8026a94 <__floatsisf+0xd8>
 8026a80:	00c027c4 	movi	r3,159
 8026a84:	1887c83a 	sub	r3,r3,r2
 8026a88:	00bf0034 	movhi	r2,64512
 8026a8c:	10bfffc4 	addi	r2,r2,-1
 8026a90:	2088703a 	and	r4,r4,r2
 8026a94:	202091ba 	slli	r16,r4,6
 8026a98:	8809883a 	mov	r4,r17
 8026a9c:	8020d27a 	srli	r16,r16,9
 8026aa0:	003fda06 	br	8026a0c <_gp+0xfffe5300>
 8026aa4:	0009883a 	mov	r4,zero
 8026aa8:	0007883a 	mov	r3,zero
 8026aac:	0021883a 	mov	r16,zero
 8026ab0:	003fd606 	br	8026a0c <_gp+0xfffe5300>
 8026ab4:	0121c83a 	sub	r16,zero,r4
 8026ab8:	003fc806 	br	80269dc <_gp+0xfffe52d0>
 8026abc:	01002e44 	movi	r4,185
 8026ac0:	20c9c83a 	sub	r4,r4,r3
 8026ac4:	01400144 	movi	r5,5
 8026ac8:	8108983a 	sll	r4,r16,r4
 8026acc:	288bc83a 	sub	r5,r5,r2
 8026ad0:	8160d83a 	srl	r16,r16,r5
 8026ad4:	2008c03a 	cmpne	r4,r4,zero
 8026ad8:	8120b03a 	or	r16,r16,r4
 8026adc:	003fdd06 	br	8026a54 <_gp+0xfffe5348>

08026ae0 <__adddf3>:
 8026ae0:	02c00434 	movhi	r11,16
 8026ae4:	5affffc4 	addi	r11,r11,-1
 8026ae8:	2806d7fa 	srli	r3,r5,31
 8026aec:	2ad4703a 	and	r10,r5,r11
 8026af0:	3ad2703a 	and	r9,r7,r11
 8026af4:	3804d53a 	srli	r2,r7,20
 8026af8:	3018d77a 	srli	r12,r6,29
 8026afc:	280ad53a 	srli	r5,r5,20
 8026b00:	501490fa 	slli	r10,r10,3
 8026b04:	2010d77a 	srli	r8,r4,29
 8026b08:	481290fa 	slli	r9,r9,3
 8026b0c:	380ed7fa 	srli	r7,r7,31
 8026b10:	defffb04 	addi	sp,sp,-20
 8026b14:	dc800215 	stw	r18,8(sp)
 8026b18:	dc400115 	stw	r17,4(sp)
 8026b1c:	dc000015 	stw	r16,0(sp)
 8026b20:	dfc00415 	stw	ra,16(sp)
 8026b24:	dcc00315 	stw	r19,12(sp)
 8026b28:	1c803fcc 	andi	r18,r3,255
 8026b2c:	2c01ffcc 	andi	r16,r5,2047
 8026b30:	5210b03a 	or	r8,r10,r8
 8026b34:	202290fa 	slli	r17,r4,3
 8026b38:	1081ffcc 	andi	r2,r2,2047
 8026b3c:	4b12b03a 	or	r9,r9,r12
 8026b40:	300c90fa 	slli	r6,r6,3
 8026b44:	91c07526 	beq	r18,r7,8026d1c <__adddf3+0x23c>
 8026b48:	8087c83a 	sub	r3,r16,r2
 8026b4c:	00c0ab0e 	bge	zero,r3,8026dfc <__adddf3+0x31c>
 8026b50:	10002a1e 	bne	r2,zero,8026bfc <__adddf3+0x11c>
 8026b54:	4984b03a 	or	r2,r9,r6
 8026b58:	1000961e 	bne	r2,zero,8026db4 <__adddf3+0x2d4>
 8026b5c:	888001cc 	andi	r2,r17,7
 8026b60:	10000726 	beq	r2,zero,8026b80 <__adddf3+0xa0>
 8026b64:	888003cc 	andi	r2,r17,15
 8026b68:	00c00104 	movi	r3,4
 8026b6c:	10c00426 	beq	r2,r3,8026b80 <__adddf3+0xa0>
 8026b70:	88c7883a 	add	r3,r17,r3
 8026b74:	1c63803a 	cmpltu	r17,r3,r17
 8026b78:	4451883a 	add	r8,r8,r17
 8026b7c:	1823883a 	mov	r17,r3
 8026b80:	4080202c 	andhi	r2,r8,128
 8026b84:	10005926 	beq	r2,zero,8026cec <__adddf3+0x20c>
 8026b88:	84000044 	addi	r16,r16,1
 8026b8c:	0081ffc4 	movi	r2,2047
 8026b90:	8080ba26 	beq	r16,r2,8026e7c <__adddf3+0x39c>
 8026b94:	00bfe034 	movhi	r2,65408
 8026b98:	10bfffc4 	addi	r2,r2,-1
 8026b9c:	4090703a 	and	r8,r8,r2
 8026ba0:	4004977a 	slli	r2,r8,29
 8026ba4:	4010927a 	slli	r8,r8,9
 8026ba8:	8822d0fa 	srli	r17,r17,3
 8026bac:	8401ffcc 	andi	r16,r16,2047
 8026bb0:	4010d33a 	srli	r8,r8,12
 8026bb4:	9007883a 	mov	r3,r18
 8026bb8:	1444b03a 	or	r2,r2,r17
 8026bbc:	8401ffcc 	andi	r16,r16,2047
 8026bc0:	8020953a 	slli	r16,r16,20
 8026bc4:	18c03fcc 	andi	r3,r3,255
 8026bc8:	01000434 	movhi	r4,16
 8026bcc:	213fffc4 	addi	r4,r4,-1
 8026bd0:	180697fa 	slli	r3,r3,31
 8026bd4:	4110703a 	and	r8,r8,r4
 8026bd8:	4410b03a 	or	r8,r8,r16
 8026bdc:	40c6b03a 	or	r3,r8,r3
 8026be0:	dfc00417 	ldw	ra,16(sp)
 8026be4:	dcc00317 	ldw	r19,12(sp)
 8026be8:	dc800217 	ldw	r18,8(sp)
 8026bec:	dc400117 	ldw	r17,4(sp)
 8026bf0:	dc000017 	ldw	r16,0(sp)
 8026bf4:	dec00504 	addi	sp,sp,20
 8026bf8:	f800283a 	ret
 8026bfc:	0081ffc4 	movi	r2,2047
 8026c00:	80bfd626 	beq	r16,r2,8026b5c <_gp+0xfffe5450>
 8026c04:	4a402034 	orhi	r9,r9,128
 8026c08:	00800e04 	movi	r2,56
 8026c0c:	10c09f16 	blt	r2,r3,8026e8c <__adddf3+0x3ac>
 8026c10:	008007c4 	movi	r2,31
 8026c14:	10c0c216 	blt	r2,r3,8026f20 <__adddf3+0x440>
 8026c18:	00800804 	movi	r2,32
 8026c1c:	10c5c83a 	sub	r2,r2,r3
 8026c20:	488a983a 	sll	r5,r9,r2
 8026c24:	30c8d83a 	srl	r4,r6,r3
 8026c28:	3084983a 	sll	r2,r6,r2
 8026c2c:	48c6d83a 	srl	r3,r9,r3
 8026c30:	290cb03a 	or	r6,r5,r4
 8026c34:	1004c03a 	cmpne	r2,r2,zero
 8026c38:	308cb03a 	or	r6,r6,r2
 8026c3c:	898dc83a 	sub	r6,r17,r6
 8026c40:	89a3803a 	cmpltu	r17,r17,r6
 8026c44:	40d1c83a 	sub	r8,r8,r3
 8026c48:	4451c83a 	sub	r8,r8,r17
 8026c4c:	3023883a 	mov	r17,r6
 8026c50:	4080202c 	andhi	r2,r8,128
 8026c54:	10002326 	beq	r2,zero,8026ce4 <__adddf3+0x204>
 8026c58:	04c02034 	movhi	r19,128
 8026c5c:	9cffffc4 	addi	r19,r19,-1
 8026c60:	44e6703a 	and	r19,r8,r19
 8026c64:	98007626 	beq	r19,zero,8026e40 <__adddf3+0x360>
 8026c68:	9809883a 	mov	r4,r19
 8026c6c:	802939c0 	call	802939c <__clzsi2>
 8026c70:	10fffe04 	addi	r3,r2,-8
 8026c74:	010007c4 	movi	r4,31
 8026c78:	20c07716 	blt	r4,r3,8026e58 <__adddf3+0x378>
 8026c7c:	00800804 	movi	r2,32
 8026c80:	10c5c83a 	sub	r2,r2,r3
 8026c84:	8884d83a 	srl	r2,r17,r2
 8026c88:	98d0983a 	sll	r8,r19,r3
 8026c8c:	88e2983a 	sll	r17,r17,r3
 8026c90:	1204b03a 	or	r2,r2,r8
 8026c94:	1c007416 	blt	r3,r16,8026e68 <__adddf3+0x388>
 8026c98:	1c21c83a 	sub	r16,r3,r16
 8026c9c:	82000044 	addi	r8,r16,1
 8026ca0:	00c007c4 	movi	r3,31
 8026ca4:	1a009116 	blt	r3,r8,8026eec <__adddf3+0x40c>
 8026ca8:	00c00804 	movi	r3,32
 8026cac:	1a07c83a 	sub	r3,r3,r8
 8026cb0:	8a08d83a 	srl	r4,r17,r8
 8026cb4:	88e2983a 	sll	r17,r17,r3
 8026cb8:	10c6983a 	sll	r3,r2,r3
 8026cbc:	1210d83a 	srl	r8,r2,r8
 8026cc0:	8804c03a 	cmpne	r2,r17,zero
 8026cc4:	1906b03a 	or	r3,r3,r4
 8026cc8:	18a2b03a 	or	r17,r3,r2
 8026ccc:	0021883a 	mov	r16,zero
 8026cd0:	003fa206 	br	8026b5c <_gp+0xfffe5450>
 8026cd4:	1890b03a 	or	r8,r3,r2
 8026cd8:	40017d26 	beq	r8,zero,80272d0 <__adddf3+0x7f0>
 8026cdc:	1011883a 	mov	r8,r2
 8026ce0:	1823883a 	mov	r17,r3
 8026ce4:	888001cc 	andi	r2,r17,7
 8026ce8:	103f9e1e 	bne	r2,zero,8026b64 <_gp+0xfffe5458>
 8026cec:	4004977a 	slli	r2,r8,29
 8026cf0:	8822d0fa 	srli	r17,r17,3
 8026cf4:	4010d0fa 	srli	r8,r8,3
 8026cf8:	9007883a 	mov	r3,r18
 8026cfc:	1444b03a 	or	r2,r2,r17
 8026d00:	0101ffc4 	movi	r4,2047
 8026d04:	81002426 	beq	r16,r4,8026d98 <__adddf3+0x2b8>
 8026d08:	8120703a 	and	r16,r16,r4
 8026d0c:	01000434 	movhi	r4,16
 8026d10:	213fffc4 	addi	r4,r4,-1
 8026d14:	4110703a 	and	r8,r8,r4
 8026d18:	003fa806 	br	8026bbc <_gp+0xfffe54b0>
 8026d1c:	8089c83a 	sub	r4,r16,r2
 8026d20:	01005e0e 	bge	zero,r4,8026e9c <__adddf3+0x3bc>
 8026d24:	10002b26 	beq	r2,zero,8026dd4 <__adddf3+0x2f4>
 8026d28:	0081ffc4 	movi	r2,2047
 8026d2c:	80bf8b26 	beq	r16,r2,8026b5c <_gp+0xfffe5450>
 8026d30:	4a402034 	orhi	r9,r9,128
 8026d34:	00800e04 	movi	r2,56
 8026d38:	1100a40e 	bge	r2,r4,8026fcc <__adddf3+0x4ec>
 8026d3c:	498cb03a 	or	r6,r9,r6
 8026d40:	300ac03a 	cmpne	r5,r6,zero
 8026d44:	0013883a 	mov	r9,zero
 8026d48:	2c4b883a 	add	r5,r5,r17
 8026d4c:	2c63803a 	cmpltu	r17,r5,r17
 8026d50:	4a11883a 	add	r8,r9,r8
 8026d54:	8a11883a 	add	r8,r17,r8
 8026d58:	2823883a 	mov	r17,r5
 8026d5c:	4080202c 	andhi	r2,r8,128
 8026d60:	103fe026 	beq	r2,zero,8026ce4 <_gp+0xfffe55d8>
 8026d64:	84000044 	addi	r16,r16,1
 8026d68:	0081ffc4 	movi	r2,2047
 8026d6c:	8080d226 	beq	r16,r2,80270b8 <__adddf3+0x5d8>
 8026d70:	00bfe034 	movhi	r2,65408
 8026d74:	10bfffc4 	addi	r2,r2,-1
 8026d78:	4090703a 	and	r8,r8,r2
 8026d7c:	880ad07a 	srli	r5,r17,1
 8026d80:	400897fa 	slli	r4,r8,31
 8026d84:	88c0004c 	andi	r3,r17,1
 8026d88:	28e2b03a 	or	r17,r5,r3
 8026d8c:	4010d07a 	srli	r8,r8,1
 8026d90:	2462b03a 	or	r17,r4,r17
 8026d94:	003f7106 	br	8026b5c <_gp+0xfffe5450>
 8026d98:	4088b03a 	or	r4,r8,r2
 8026d9c:	20014526 	beq	r4,zero,80272b4 <__adddf3+0x7d4>
 8026da0:	01000434 	movhi	r4,16
 8026da4:	42000234 	orhi	r8,r8,8
 8026da8:	213fffc4 	addi	r4,r4,-1
 8026dac:	4110703a 	and	r8,r8,r4
 8026db0:	003f8206 	br	8026bbc <_gp+0xfffe54b0>
 8026db4:	18ffffc4 	addi	r3,r3,-1
 8026db8:	1800491e 	bne	r3,zero,8026ee0 <__adddf3+0x400>
 8026dbc:	898bc83a 	sub	r5,r17,r6
 8026dc0:	8963803a 	cmpltu	r17,r17,r5
 8026dc4:	4251c83a 	sub	r8,r8,r9
 8026dc8:	4451c83a 	sub	r8,r8,r17
 8026dcc:	2823883a 	mov	r17,r5
 8026dd0:	003f9f06 	br	8026c50 <_gp+0xfffe5544>
 8026dd4:	4984b03a 	or	r2,r9,r6
 8026dd8:	103f6026 	beq	r2,zero,8026b5c <_gp+0xfffe5450>
 8026ddc:	213fffc4 	addi	r4,r4,-1
 8026de0:	2000931e 	bne	r4,zero,8027030 <__adddf3+0x550>
 8026de4:	898d883a 	add	r6,r17,r6
 8026de8:	3463803a 	cmpltu	r17,r6,r17
 8026dec:	4251883a 	add	r8,r8,r9
 8026df0:	8a11883a 	add	r8,r17,r8
 8026df4:	3023883a 	mov	r17,r6
 8026df8:	003fd806 	br	8026d5c <_gp+0xfffe5650>
 8026dfc:	1800541e 	bne	r3,zero,8026f50 <__adddf3+0x470>
 8026e00:	80800044 	addi	r2,r16,1
 8026e04:	1081ffcc 	andi	r2,r2,2047
 8026e08:	00c00044 	movi	r3,1
 8026e0c:	1880a00e 	bge	r3,r2,8027090 <__adddf3+0x5b0>
 8026e10:	8989c83a 	sub	r4,r17,r6
 8026e14:	8905803a 	cmpltu	r2,r17,r4
 8026e18:	4267c83a 	sub	r19,r8,r9
 8026e1c:	98a7c83a 	sub	r19,r19,r2
 8026e20:	9880202c 	andhi	r2,r19,128
 8026e24:	10006326 	beq	r2,zero,8026fb4 <__adddf3+0x4d4>
 8026e28:	3463c83a 	sub	r17,r6,r17
 8026e2c:	4a07c83a 	sub	r3,r9,r8
 8026e30:	344d803a 	cmpltu	r6,r6,r17
 8026e34:	19a7c83a 	sub	r19,r3,r6
 8026e38:	3825883a 	mov	r18,r7
 8026e3c:	983f8a1e 	bne	r19,zero,8026c68 <_gp+0xfffe555c>
 8026e40:	8809883a 	mov	r4,r17
 8026e44:	802939c0 	call	802939c <__clzsi2>
 8026e48:	10800804 	addi	r2,r2,32
 8026e4c:	10fffe04 	addi	r3,r2,-8
 8026e50:	010007c4 	movi	r4,31
 8026e54:	20ff890e 	bge	r4,r3,8026c7c <_gp+0xfffe5570>
 8026e58:	10bff604 	addi	r2,r2,-40
 8026e5c:	8884983a 	sll	r2,r17,r2
 8026e60:	0023883a 	mov	r17,zero
 8026e64:	1c3f8c0e 	bge	r3,r16,8026c98 <_gp+0xfffe558c>
 8026e68:	023fe034 	movhi	r8,65408
 8026e6c:	423fffc4 	addi	r8,r8,-1
 8026e70:	80e1c83a 	sub	r16,r16,r3
 8026e74:	1210703a 	and	r8,r2,r8
 8026e78:	003f3806 	br	8026b5c <_gp+0xfffe5450>
 8026e7c:	9007883a 	mov	r3,r18
 8026e80:	0011883a 	mov	r8,zero
 8026e84:	0005883a 	mov	r2,zero
 8026e88:	003f4c06 	br	8026bbc <_gp+0xfffe54b0>
 8026e8c:	498cb03a 	or	r6,r9,r6
 8026e90:	300cc03a 	cmpne	r6,r6,zero
 8026e94:	0007883a 	mov	r3,zero
 8026e98:	003f6806 	br	8026c3c <_gp+0xfffe5530>
 8026e9c:	20009c1e 	bne	r4,zero,8027110 <__adddf3+0x630>
 8026ea0:	80800044 	addi	r2,r16,1
 8026ea4:	1141ffcc 	andi	r5,r2,2047
 8026ea8:	01000044 	movi	r4,1
 8026eac:	2140670e 	bge	r4,r5,802704c <__adddf3+0x56c>
 8026eb0:	0101ffc4 	movi	r4,2047
 8026eb4:	11007f26 	beq	r2,r4,80270b4 <__adddf3+0x5d4>
 8026eb8:	898d883a 	add	r6,r17,r6
 8026ebc:	4247883a 	add	r3,r8,r9
 8026ec0:	3451803a 	cmpltu	r8,r6,r17
 8026ec4:	40d1883a 	add	r8,r8,r3
 8026ec8:	402297fa 	slli	r17,r8,31
 8026ecc:	300cd07a 	srli	r6,r6,1
 8026ed0:	4010d07a 	srli	r8,r8,1
 8026ed4:	1021883a 	mov	r16,r2
 8026ed8:	89a2b03a 	or	r17,r17,r6
 8026edc:	003f1f06 	br	8026b5c <_gp+0xfffe5450>
 8026ee0:	0081ffc4 	movi	r2,2047
 8026ee4:	80bf481e 	bne	r16,r2,8026c08 <_gp+0xfffe54fc>
 8026ee8:	003f1c06 	br	8026b5c <_gp+0xfffe5450>
 8026eec:	843ff844 	addi	r16,r16,-31
 8026ef0:	01000804 	movi	r4,32
 8026ef4:	1406d83a 	srl	r3,r2,r16
 8026ef8:	41005026 	beq	r8,r4,802703c <__adddf3+0x55c>
 8026efc:	01001004 	movi	r4,64
 8026f00:	2211c83a 	sub	r8,r4,r8
 8026f04:	1204983a 	sll	r2,r2,r8
 8026f08:	88a2b03a 	or	r17,r17,r2
 8026f0c:	8822c03a 	cmpne	r17,r17,zero
 8026f10:	1c62b03a 	or	r17,r3,r17
 8026f14:	0011883a 	mov	r8,zero
 8026f18:	0021883a 	mov	r16,zero
 8026f1c:	003f7106 	br	8026ce4 <_gp+0xfffe55d8>
 8026f20:	193ff804 	addi	r4,r3,-32
 8026f24:	00800804 	movi	r2,32
 8026f28:	4908d83a 	srl	r4,r9,r4
 8026f2c:	18804526 	beq	r3,r2,8027044 <__adddf3+0x564>
 8026f30:	00801004 	movi	r2,64
 8026f34:	10c5c83a 	sub	r2,r2,r3
 8026f38:	4886983a 	sll	r3,r9,r2
 8026f3c:	198cb03a 	or	r6,r3,r6
 8026f40:	300cc03a 	cmpne	r6,r6,zero
 8026f44:	218cb03a 	or	r6,r4,r6
 8026f48:	0007883a 	mov	r3,zero
 8026f4c:	003f3b06 	br	8026c3c <_gp+0xfffe5530>
 8026f50:	80002a26 	beq	r16,zero,8026ffc <__adddf3+0x51c>
 8026f54:	0101ffc4 	movi	r4,2047
 8026f58:	11006826 	beq	r2,r4,80270fc <__adddf3+0x61c>
 8026f5c:	00c7c83a 	sub	r3,zero,r3
 8026f60:	42002034 	orhi	r8,r8,128
 8026f64:	01000e04 	movi	r4,56
 8026f68:	20c07c16 	blt	r4,r3,802715c <__adddf3+0x67c>
 8026f6c:	010007c4 	movi	r4,31
 8026f70:	20c0da16 	blt	r4,r3,80272dc <__adddf3+0x7fc>
 8026f74:	01000804 	movi	r4,32
 8026f78:	20c9c83a 	sub	r4,r4,r3
 8026f7c:	4114983a 	sll	r10,r8,r4
 8026f80:	88cad83a 	srl	r5,r17,r3
 8026f84:	8908983a 	sll	r4,r17,r4
 8026f88:	40c6d83a 	srl	r3,r8,r3
 8026f8c:	5162b03a 	or	r17,r10,r5
 8026f90:	2008c03a 	cmpne	r4,r4,zero
 8026f94:	8922b03a 	or	r17,r17,r4
 8026f98:	3463c83a 	sub	r17,r6,r17
 8026f9c:	48c7c83a 	sub	r3,r9,r3
 8026fa0:	344d803a 	cmpltu	r6,r6,r17
 8026fa4:	1991c83a 	sub	r8,r3,r6
 8026fa8:	1021883a 	mov	r16,r2
 8026fac:	3825883a 	mov	r18,r7
 8026fb0:	003f2706 	br	8026c50 <_gp+0xfffe5544>
 8026fb4:	24d0b03a 	or	r8,r4,r19
 8026fb8:	40001b1e 	bne	r8,zero,8027028 <__adddf3+0x548>
 8026fbc:	0005883a 	mov	r2,zero
 8026fc0:	0007883a 	mov	r3,zero
 8026fc4:	0021883a 	mov	r16,zero
 8026fc8:	003f4d06 	br	8026d00 <_gp+0xfffe55f4>
 8026fcc:	008007c4 	movi	r2,31
 8026fd0:	11003c16 	blt	r2,r4,80270c4 <__adddf3+0x5e4>
 8026fd4:	00800804 	movi	r2,32
 8026fd8:	1105c83a 	sub	r2,r2,r4
 8026fdc:	488e983a 	sll	r7,r9,r2
 8026fe0:	310ad83a 	srl	r5,r6,r4
 8026fe4:	3084983a 	sll	r2,r6,r2
 8026fe8:	4912d83a 	srl	r9,r9,r4
 8026fec:	394ab03a 	or	r5,r7,r5
 8026ff0:	1004c03a 	cmpne	r2,r2,zero
 8026ff4:	288ab03a 	or	r5,r5,r2
 8026ff8:	003f5306 	br	8026d48 <_gp+0xfffe563c>
 8026ffc:	4448b03a 	or	r4,r8,r17
 8027000:	20003e26 	beq	r4,zero,80270fc <__adddf3+0x61c>
 8027004:	00c6303a 	nor	r3,zero,r3
 8027008:	18003a1e 	bne	r3,zero,80270f4 <__adddf3+0x614>
 802700c:	3463c83a 	sub	r17,r6,r17
 8027010:	4a07c83a 	sub	r3,r9,r8
 8027014:	344d803a 	cmpltu	r6,r6,r17
 8027018:	1991c83a 	sub	r8,r3,r6
 802701c:	1021883a 	mov	r16,r2
 8027020:	3825883a 	mov	r18,r7
 8027024:	003f0a06 	br	8026c50 <_gp+0xfffe5544>
 8027028:	2023883a 	mov	r17,r4
 802702c:	003f0d06 	br	8026c64 <_gp+0xfffe5558>
 8027030:	0081ffc4 	movi	r2,2047
 8027034:	80bf3f1e 	bne	r16,r2,8026d34 <_gp+0xfffe5628>
 8027038:	003ec806 	br	8026b5c <_gp+0xfffe5450>
 802703c:	0005883a 	mov	r2,zero
 8027040:	003fb106 	br	8026f08 <_gp+0xfffe57fc>
 8027044:	0007883a 	mov	r3,zero
 8027048:	003fbc06 	br	8026f3c <_gp+0xfffe5830>
 802704c:	4444b03a 	or	r2,r8,r17
 8027050:	8000871e 	bne	r16,zero,8027270 <__adddf3+0x790>
 8027054:	1000ba26 	beq	r2,zero,8027340 <__adddf3+0x860>
 8027058:	4984b03a 	or	r2,r9,r6
 802705c:	103ebf26 	beq	r2,zero,8026b5c <_gp+0xfffe5450>
 8027060:	8985883a 	add	r2,r17,r6
 8027064:	4247883a 	add	r3,r8,r9
 8027068:	1451803a 	cmpltu	r8,r2,r17
 802706c:	40d1883a 	add	r8,r8,r3
 8027070:	40c0202c 	andhi	r3,r8,128
 8027074:	1023883a 	mov	r17,r2
 8027078:	183f1a26 	beq	r3,zero,8026ce4 <_gp+0xfffe55d8>
 802707c:	00bfe034 	movhi	r2,65408
 8027080:	10bfffc4 	addi	r2,r2,-1
 8027084:	2021883a 	mov	r16,r4
 8027088:	4090703a 	and	r8,r8,r2
 802708c:	003eb306 	br	8026b5c <_gp+0xfffe5450>
 8027090:	4444b03a 	or	r2,r8,r17
 8027094:	8000291e 	bne	r16,zero,802713c <__adddf3+0x65c>
 8027098:	10004b1e 	bne	r2,zero,80271c8 <__adddf3+0x6e8>
 802709c:	4990b03a 	or	r8,r9,r6
 80270a0:	40008b26 	beq	r8,zero,80272d0 <__adddf3+0x7f0>
 80270a4:	4811883a 	mov	r8,r9
 80270a8:	3023883a 	mov	r17,r6
 80270ac:	3825883a 	mov	r18,r7
 80270b0:	003eaa06 	br	8026b5c <_gp+0xfffe5450>
 80270b4:	1021883a 	mov	r16,r2
 80270b8:	0011883a 	mov	r8,zero
 80270bc:	0005883a 	mov	r2,zero
 80270c0:	003f0f06 	br	8026d00 <_gp+0xfffe55f4>
 80270c4:	217ff804 	addi	r5,r4,-32
 80270c8:	00800804 	movi	r2,32
 80270cc:	494ad83a 	srl	r5,r9,r5
 80270d0:	20807d26 	beq	r4,r2,80272c8 <__adddf3+0x7e8>
 80270d4:	00801004 	movi	r2,64
 80270d8:	1109c83a 	sub	r4,r2,r4
 80270dc:	4912983a 	sll	r9,r9,r4
 80270e0:	498cb03a 	or	r6,r9,r6
 80270e4:	300cc03a 	cmpne	r6,r6,zero
 80270e8:	298ab03a 	or	r5,r5,r6
 80270ec:	0013883a 	mov	r9,zero
 80270f0:	003f1506 	br	8026d48 <_gp+0xfffe563c>
 80270f4:	0101ffc4 	movi	r4,2047
 80270f8:	113f9a1e 	bne	r2,r4,8026f64 <_gp+0xfffe5858>
 80270fc:	4811883a 	mov	r8,r9
 8027100:	3023883a 	mov	r17,r6
 8027104:	1021883a 	mov	r16,r2
 8027108:	3825883a 	mov	r18,r7
 802710c:	003e9306 	br	8026b5c <_gp+0xfffe5450>
 8027110:	8000161e 	bne	r16,zero,802716c <__adddf3+0x68c>
 8027114:	444ab03a 	or	r5,r8,r17
 8027118:	28005126 	beq	r5,zero,8027260 <__adddf3+0x780>
 802711c:	0108303a 	nor	r4,zero,r4
 8027120:	20004d1e 	bne	r4,zero,8027258 <__adddf3+0x778>
 8027124:	89a3883a 	add	r17,r17,r6
 8027128:	4253883a 	add	r9,r8,r9
 802712c:	898d803a 	cmpltu	r6,r17,r6
 8027130:	3251883a 	add	r8,r6,r9
 8027134:	1021883a 	mov	r16,r2
 8027138:	003f0806 	br	8026d5c <_gp+0xfffe5650>
 802713c:	1000301e 	bne	r2,zero,8027200 <__adddf3+0x720>
 8027140:	4984b03a 	or	r2,r9,r6
 8027144:	10007126 	beq	r2,zero,802730c <__adddf3+0x82c>
 8027148:	4811883a 	mov	r8,r9
 802714c:	3023883a 	mov	r17,r6
 8027150:	3825883a 	mov	r18,r7
 8027154:	0401ffc4 	movi	r16,2047
 8027158:	003e8006 	br	8026b5c <_gp+0xfffe5450>
 802715c:	4462b03a 	or	r17,r8,r17
 8027160:	8822c03a 	cmpne	r17,r17,zero
 8027164:	0007883a 	mov	r3,zero
 8027168:	003f8b06 	br	8026f98 <_gp+0xfffe588c>
 802716c:	0141ffc4 	movi	r5,2047
 8027170:	11403b26 	beq	r2,r5,8027260 <__adddf3+0x780>
 8027174:	0109c83a 	sub	r4,zero,r4
 8027178:	42002034 	orhi	r8,r8,128
 802717c:	01400e04 	movi	r5,56
 8027180:	29006716 	blt	r5,r4,8027320 <__adddf3+0x840>
 8027184:	014007c4 	movi	r5,31
 8027188:	29007016 	blt	r5,r4,802734c <__adddf3+0x86c>
 802718c:	01400804 	movi	r5,32
 8027190:	290bc83a 	sub	r5,r5,r4
 8027194:	4154983a 	sll	r10,r8,r5
 8027198:	890ed83a 	srl	r7,r17,r4
 802719c:	894a983a 	sll	r5,r17,r5
 80271a0:	4108d83a 	srl	r4,r8,r4
 80271a4:	51e2b03a 	or	r17,r10,r7
 80271a8:	280ac03a 	cmpne	r5,r5,zero
 80271ac:	8962b03a 	or	r17,r17,r5
 80271b0:	89a3883a 	add	r17,r17,r6
 80271b4:	2253883a 	add	r9,r4,r9
 80271b8:	898d803a 	cmpltu	r6,r17,r6
 80271bc:	3251883a 	add	r8,r6,r9
 80271c0:	1021883a 	mov	r16,r2
 80271c4:	003ee506 	br	8026d5c <_gp+0xfffe5650>
 80271c8:	4984b03a 	or	r2,r9,r6
 80271cc:	103e6326 	beq	r2,zero,8026b5c <_gp+0xfffe5450>
 80271d0:	8987c83a 	sub	r3,r17,r6
 80271d4:	88c9803a 	cmpltu	r4,r17,r3
 80271d8:	4245c83a 	sub	r2,r8,r9
 80271dc:	1105c83a 	sub	r2,r2,r4
 80271e0:	1100202c 	andhi	r4,r2,128
 80271e4:	203ebb26 	beq	r4,zero,8026cd4 <_gp+0xfffe55c8>
 80271e8:	3463c83a 	sub	r17,r6,r17
 80271ec:	4a07c83a 	sub	r3,r9,r8
 80271f0:	344d803a 	cmpltu	r6,r6,r17
 80271f4:	1991c83a 	sub	r8,r3,r6
 80271f8:	3825883a 	mov	r18,r7
 80271fc:	003e5706 	br	8026b5c <_gp+0xfffe5450>
 8027200:	4984b03a 	or	r2,r9,r6
 8027204:	10002e26 	beq	r2,zero,80272c0 <__adddf3+0x7e0>
 8027208:	4004d0fa 	srli	r2,r8,3
 802720c:	8822d0fa 	srli	r17,r17,3
 8027210:	4010977a 	slli	r8,r8,29
 8027214:	10c0022c 	andhi	r3,r2,8
 8027218:	4462b03a 	or	r17,r8,r17
 802721c:	18000826 	beq	r3,zero,8027240 <__adddf3+0x760>
 8027220:	4808d0fa 	srli	r4,r9,3
 8027224:	20c0022c 	andhi	r3,r4,8
 8027228:	1800051e 	bne	r3,zero,8027240 <__adddf3+0x760>
 802722c:	300cd0fa 	srli	r6,r6,3
 8027230:	4806977a 	slli	r3,r9,29
 8027234:	2005883a 	mov	r2,r4
 8027238:	3825883a 	mov	r18,r7
 802723c:	19a2b03a 	or	r17,r3,r6
 8027240:	8810d77a 	srli	r8,r17,29
 8027244:	100490fa 	slli	r2,r2,3
 8027248:	882290fa 	slli	r17,r17,3
 802724c:	0401ffc4 	movi	r16,2047
 8027250:	4090b03a 	or	r8,r8,r2
 8027254:	003e4106 	br	8026b5c <_gp+0xfffe5450>
 8027258:	0141ffc4 	movi	r5,2047
 802725c:	117fc71e 	bne	r2,r5,802717c <_gp+0xfffe5a70>
 8027260:	4811883a 	mov	r8,r9
 8027264:	3023883a 	mov	r17,r6
 8027268:	1021883a 	mov	r16,r2
 802726c:	003e3b06 	br	8026b5c <_gp+0xfffe5450>
 8027270:	10002f26 	beq	r2,zero,8027330 <__adddf3+0x850>
 8027274:	4984b03a 	or	r2,r9,r6
 8027278:	10001126 	beq	r2,zero,80272c0 <__adddf3+0x7e0>
 802727c:	4004d0fa 	srli	r2,r8,3
 8027280:	8822d0fa 	srli	r17,r17,3
 8027284:	4010977a 	slli	r8,r8,29
 8027288:	10c0022c 	andhi	r3,r2,8
 802728c:	4462b03a 	or	r17,r8,r17
 8027290:	183feb26 	beq	r3,zero,8027240 <_gp+0xfffe5b34>
 8027294:	4808d0fa 	srli	r4,r9,3
 8027298:	20c0022c 	andhi	r3,r4,8
 802729c:	183fe81e 	bne	r3,zero,8027240 <_gp+0xfffe5b34>
 80272a0:	300cd0fa 	srli	r6,r6,3
 80272a4:	4806977a 	slli	r3,r9,29
 80272a8:	2005883a 	mov	r2,r4
 80272ac:	19a2b03a 	or	r17,r3,r6
 80272b0:	003fe306 	br	8027240 <_gp+0xfffe5b34>
 80272b4:	0011883a 	mov	r8,zero
 80272b8:	0005883a 	mov	r2,zero
 80272bc:	003e3f06 	br	8026bbc <_gp+0xfffe54b0>
 80272c0:	0401ffc4 	movi	r16,2047
 80272c4:	003e2506 	br	8026b5c <_gp+0xfffe5450>
 80272c8:	0013883a 	mov	r9,zero
 80272cc:	003f8406 	br	80270e0 <_gp+0xfffe59d4>
 80272d0:	0005883a 	mov	r2,zero
 80272d4:	0007883a 	mov	r3,zero
 80272d8:	003e8906 	br	8026d00 <_gp+0xfffe55f4>
 80272dc:	197ff804 	addi	r5,r3,-32
 80272e0:	01000804 	movi	r4,32
 80272e4:	414ad83a 	srl	r5,r8,r5
 80272e8:	19002426 	beq	r3,r4,802737c <__adddf3+0x89c>
 80272ec:	01001004 	movi	r4,64
 80272f0:	20c7c83a 	sub	r3,r4,r3
 80272f4:	40c6983a 	sll	r3,r8,r3
 80272f8:	1c46b03a 	or	r3,r3,r17
 80272fc:	1806c03a 	cmpne	r3,r3,zero
 8027300:	28e2b03a 	or	r17,r5,r3
 8027304:	0007883a 	mov	r3,zero
 8027308:	003f2306 	br	8026f98 <_gp+0xfffe588c>
 802730c:	0007883a 	mov	r3,zero
 8027310:	5811883a 	mov	r8,r11
 8027314:	00bfffc4 	movi	r2,-1
 8027318:	0401ffc4 	movi	r16,2047
 802731c:	003e7806 	br	8026d00 <_gp+0xfffe55f4>
 8027320:	4462b03a 	or	r17,r8,r17
 8027324:	8822c03a 	cmpne	r17,r17,zero
 8027328:	0009883a 	mov	r4,zero
 802732c:	003fa006 	br	80271b0 <_gp+0xfffe5aa4>
 8027330:	4811883a 	mov	r8,r9
 8027334:	3023883a 	mov	r17,r6
 8027338:	0401ffc4 	movi	r16,2047
 802733c:	003e0706 	br	8026b5c <_gp+0xfffe5450>
 8027340:	4811883a 	mov	r8,r9
 8027344:	3023883a 	mov	r17,r6
 8027348:	003e0406 	br	8026b5c <_gp+0xfffe5450>
 802734c:	21fff804 	addi	r7,r4,-32
 8027350:	01400804 	movi	r5,32
 8027354:	41ced83a 	srl	r7,r8,r7
 8027358:	21400a26 	beq	r4,r5,8027384 <__adddf3+0x8a4>
 802735c:	01401004 	movi	r5,64
 8027360:	2909c83a 	sub	r4,r5,r4
 8027364:	4108983a 	sll	r4,r8,r4
 8027368:	2448b03a 	or	r4,r4,r17
 802736c:	2008c03a 	cmpne	r4,r4,zero
 8027370:	3922b03a 	or	r17,r7,r4
 8027374:	0009883a 	mov	r4,zero
 8027378:	003f8d06 	br	80271b0 <_gp+0xfffe5aa4>
 802737c:	0007883a 	mov	r3,zero
 8027380:	003fdd06 	br	80272f8 <_gp+0xfffe5bec>
 8027384:	0009883a 	mov	r4,zero
 8027388:	003ff706 	br	8027368 <_gp+0xfffe5c5c>

0802738c <__divdf3>:
 802738c:	defff204 	addi	sp,sp,-56
 8027390:	dd400915 	stw	r21,36(sp)
 8027394:	282ad53a 	srli	r21,r5,20
 8027398:	dd000815 	stw	r20,32(sp)
 802739c:	2828d7fa 	srli	r20,r5,31
 80273a0:	dc000415 	stw	r16,16(sp)
 80273a4:	04000434 	movhi	r16,16
 80273a8:	df000c15 	stw	fp,48(sp)
 80273ac:	843fffc4 	addi	r16,r16,-1
 80273b0:	dfc00d15 	stw	ra,52(sp)
 80273b4:	ddc00b15 	stw	r23,44(sp)
 80273b8:	dd800a15 	stw	r22,40(sp)
 80273bc:	dcc00715 	stw	r19,28(sp)
 80273c0:	dc800615 	stw	r18,24(sp)
 80273c4:	dc400515 	stw	r17,20(sp)
 80273c8:	ad41ffcc 	andi	r21,r21,2047
 80273cc:	2c20703a 	and	r16,r5,r16
 80273d0:	a7003fcc 	andi	fp,r20,255
 80273d4:	a8006126 	beq	r21,zero,802755c <__divdf3+0x1d0>
 80273d8:	0081ffc4 	movi	r2,2047
 80273dc:	2025883a 	mov	r18,r4
 80273e0:	a8803726 	beq	r21,r2,80274c0 <__divdf3+0x134>
 80273e4:	80800434 	orhi	r2,r16,16
 80273e8:	100490fa 	slli	r2,r2,3
 80273ec:	2020d77a 	srli	r16,r4,29
 80273f0:	202490fa 	slli	r18,r4,3
 80273f4:	ad7f0044 	addi	r21,r21,-1023
 80273f8:	80a0b03a 	or	r16,r16,r2
 80273fc:	0027883a 	mov	r19,zero
 8027400:	0013883a 	mov	r9,zero
 8027404:	3804d53a 	srli	r2,r7,20
 8027408:	382cd7fa 	srli	r22,r7,31
 802740c:	04400434 	movhi	r17,16
 8027410:	8c7fffc4 	addi	r17,r17,-1
 8027414:	1081ffcc 	andi	r2,r2,2047
 8027418:	3011883a 	mov	r8,r6
 802741c:	3c62703a 	and	r17,r7,r17
 8027420:	b5c03fcc 	andi	r23,r22,255
 8027424:	10006c26 	beq	r2,zero,80275d8 <__divdf3+0x24c>
 8027428:	00c1ffc4 	movi	r3,2047
 802742c:	10c06426 	beq	r2,r3,80275c0 <__divdf3+0x234>
 8027430:	88c00434 	orhi	r3,r17,16
 8027434:	180690fa 	slli	r3,r3,3
 8027438:	3022d77a 	srli	r17,r6,29
 802743c:	301090fa 	slli	r8,r6,3
 8027440:	10bf0044 	addi	r2,r2,-1023
 8027444:	88e2b03a 	or	r17,r17,r3
 8027448:	000f883a 	mov	r7,zero
 802744c:	a58cf03a 	xor	r6,r20,r22
 8027450:	3cc8b03a 	or	r4,r7,r19
 8027454:	a8abc83a 	sub	r21,r21,r2
 8027458:	008003c4 	movi	r2,15
 802745c:	3007883a 	mov	r3,r6
 8027460:	34c03fcc 	andi	r19,r6,255
 8027464:	11009036 	bltu	r2,r4,80276a8 <__divdf3+0x31c>
 8027468:	200890ba 	slli	r4,r4,2
 802746c:	008200b4 	movhi	r2,2050
 8027470:	109d2004 	addi	r2,r2,29824
 8027474:	2089883a 	add	r4,r4,r2
 8027478:	20800017 	ldw	r2,0(r4)
 802747c:	1000683a 	jmp	r2
 8027480:	080276a8 	cmpgeui	zero,at,2522
 8027484:	080274f8 	rdprs	zero,at,2515
 8027488:	08027698 	cmpnei	zero,at,2522
 802748c:	080274ec 	andhi	zero,at,2515
 8027490:	08027698 	cmpnei	zero,at,2522
 8027494:	0802766c 	andhi	zero,at,2521
 8027498:	08027698 	cmpnei	zero,at,2522
 802749c:	080274ec 	andhi	zero,at,2515
 80274a0:	080274f8 	rdprs	zero,at,2515
 80274a4:	080274f8 	rdprs	zero,at,2515
 80274a8:	0802766c 	andhi	zero,at,2521
 80274ac:	080274ec 	andhi	zero,at,2515
 80274b0:	080274dc 	xori	zero,at,2515
 80274b4:	080274dc 	xori	zero,at,2515
 80274b8:	080274dc 	xori	zero,at,2515
 80274bc:	0802798c 	andi	zero,at,2534
 80274c0:	2404b03a 	or	r2,r4,r16
 80274c4:	1000661e 	bne	r2,zero,8027660 <__divdf3+0x2d4>
 80274c8:	04c00204 	movi	r19,8
 80274cc:	0021883a 	mov	r16,zero
 80274d0:	0025883a 	mov	r18,zero
 80274d4:	02400084 	movi	r9,2
 80274d8:	003fca06 	br	8027404 <_gp+0xfffe5cf8>
 80274dc:	8023883a 	mov	r17,r16
 80274e0:	9011883a 	mov	r8,r18
 80274e4:	e02f883a 	mov	r23,fp
 80274e8:	480f883a 	mov	r7,r9
 80274ec:	00800084 	movi	r2,2
 80274f0:	3881311e 	bne	r7,r2,80279b8 <__divdf3+0x62c>
 80274f4:	b827883a 	mov	r19,r23
 80274f8:	98c0004c 	andi	r3,r19,1
 80274fc:	0081ffc4 	movi	r2,2047
 8027500:	000b883a 	mov	r5,zero
 8027504:	0025883a 	mov	r18,zero
 8027508:	1004953a 	slli	r2,r2,20
 802750c:	18c03fcc 	andi	r3,r3,255
 8027510:	04400434 	movhi	r17,16
 8027514:	8c7fffc4 	addi	r17,r17,-1
 8027518:	180697fa 	slli	r3,r3,31
 802751c:	2c4a703a 	and	r5,r5,r17
 8027520:	288ab03a 	or	r5,r5,r2
 8027524:	28c6b03a 	or	r3,r5,r3
 8027528:	9005883a 	mov	r2,r18
 802752c:	dfc00d17 	ldw	ra,52(sp)
 8027530:	df000c17 	ldw	fp,48(sp)
 8027534:	ddc00b17 	ldw	r23,44(sp)
 8027538:	dd800a17 	ldw	r22,40(sp)
 802753c:	dd400917 	ldw	r21,36(sp)
 8027540:	dd000817 	ldw	r20,32(sp)
 8027544:	dcc00717 	ldw	r19,28(sp)
 8027548:	dc800617 	ldw	r18,24(sp)
 802754c:	dc400517 	ldw	r17,20(sp)
 8027550:	dc000417 	ldw	r16,16(sp)
 8027554:	dec00e04 	addi	sp,sp,56
 8027558:	f800283a 	ret
 802755c:	2404b03a 	or	r2,r4,r16
 8027560:	2027883a 	mov	r19,r4
 8027564:	10003926 	beq	r2,zero,802764c <__divdf3+0x2c0>
 8027568:	80012e26 	beq	r16,zero,8027a24 <__divdf3+0x698>
 802756c:	8009883a 	mov	r4,r16
 8027570:	d9800315 	stw	r6,12(sp)
 8027574:	d9c00215 	stw	r7,8(sp)
 8027578:	802939c0 	call	802939c <__clzsi2>
 802757c:	d9800317 	ldw	r6,12(sp)
 8027580:	d9c00217 	ldw	r7,8(sp)
 8027584:	113ffd44 	addi	r4,r2,-11
 8027588:	00c00704 	movi	r3,28
 802758c:	19012116 	blt	r3,r4,8027a14 <__divdf3+0x688>
 8027590:	00c00744 	movi	r3,29
 8027594:	147ffe04 	addi	r17,r2,-8
 8027598:	1907c83a 	sub	r3,r3,r4
 802759c:	8460983a 	sll	r16,r16,r17
 80275a0:	98c6d83a 	srl	r3,r19,r3
 80275a4:	9c64983a 	sll	r18,r19,r17
 80275a8:	1c20b03a 	or	r16,r3,r16
 80275ac:	1080fcc4 	addi	r2,r2,1011
 80275b0:	00abc83a 	sub	r21,zero,r2
 80275b4:	0027883a 	mov	r19,zero
 80275b8:	0013883a 	mov	r9,zero
 80275bc:	003f9106 	br	8027404 <_gp+0xfffe5cf8>
 80275c0:	3446b03a 	or	r3,r6,r17
 80275c4:	18001f1e 	bne	r3,zero,8027644 <__divdf3+0x2b8>
 80275c8:	0023883a 	mov	r17,zero
 80275cc:	0011883a 	mov	r8,zero
 80275d0:	01c00084 	movi	r7,2
 80275d4:	003f9d06 	br	802744c <_gp+0xfffe5d40>
 80275d8:	3446b03a 	or	r3,r6,r17
 80275dc:	18001526 	beq	r3,zero,8027634 <__divdf3+0x2a8>
 80275e0:	88011b26 	beq	r17,zero,8027a50 <__divdf3+0x6c4>
 80275e4:	8809883a 	mov	r4,r17
 80275e8:	d9800315 	stw	r6,12(sp)
 80275ec:	da400115 	stw	r9,4(sp)
 80275f0:	802939c0 	call	802939c <__clzsi2>
 80275f4:	d9800317 	ldw	r6,12(sp)
 80275f8:	da400117 	ldw	r9,4(sp)
 80275fc:	113ffd44 	addi	r4,r2,-11
 8027600:	00c00704 	movi	r3,28
 8027604:	19010e16 	blt	r3,r4,8027a40 <__divdf3+0x6b4>
 8027608:	00c00744 	movi	r3,29
 802760c:	123ffe04 	addi	r8,r2,-8
 8027610:	1907c83a 	sub	r3,r3,r4
 8027614:	8a22983a 	sll	r17,r17,r8
 8027618:	30c6d83a 	srl	r3,r6,r3
 802761c:	3210983a 	sll	r8,r6,r8
 8027620:	1c62b03a 	or	r17,r3,r17
 8027624:	1080fcc4 	addi	r2,r2,1011
 8027628:	0085c83a 	sub	r2,zero,r2
 802762c:	000f883a 	mov	r7,zero
 8027630:	003f8606 	br	802744c <_gp+0xfffe5d40>
 8027634:	0023883a 	mov	r17,zero
 8027638:	0011883a 	mov	r8,zero
 802763c:	01c00044 	movi	r7,1
 8027640:	003f8206 	br	802744c <_gp+0xfffe5d40>
 8027644:	01c000c4 	movi	r7,3
 8027648:	003f8006 	br	802744c <_gp+0xfffe5d40>
 802764c:	04c00104 	movi	r19,4
 8027650:	0021883a 	mov	r16,zero
 8027654:	0025883a 	mov	r18,zero
 8027658:	02400044 	movi	r9,1
 802765c:	003f6906 	br	8027404 <_gp+0xfffe5cf8>
 8027660:	04c00304 	movi	r19,12
 8027664:	024000c4 	movi	r9,3
 8027668:	003f6606 	br	8027404 <_gp+0xfffe5cf8>
 802766c:	01400434 	movhi	r5,16
 8027670:	0007883a 	mov	r3,zero
 8027674:	297fffc4 	addi	r5,r5,-1
 8027678:	04bfffc4 	movi	r18,-1
 802767c:	0081ffc4 	movi	r2,2047
 8027680:	003fa106 	br	8027508 <_gp+0xfffe5dfc>
 8027684:	00c00044 	movi	r3,1
 8027688:	1887c83a 	sub	r3,r3,r2
 802768c:	01000e04 	movi	r4,56
 8027690:	20c1210e 	bge	r4,r3,8027b18 <__divdf3+0x78c>
 8027694:	98c0004c 	andi	r3,r19,1
 8027698:	0005883a 	mov	r2,zero
 802769c:	000b883a 	mov	r5,zero
 80276a0:	0025883a 	mov	r18,zero
 80276a4:	003f9806 	br	8027508 <_gp+0xfffe5dfc>
 80276a8:	8c00fd36 	bltu	r17,r16,8027aa0 <__divdf3+0x714>
 80276ac:	8440fb26 	beq	r16,r17,8027a9c <__divdf3+0x710>
 80276b0:	8007883a 	mov	r3,r16
 80276b4:	ad7fffc4 	addi	r21,r21,-1
 80276b8:	0021883a 	mov	r16,zero
 80276bc:	4004d63a 	srli	r2,r8,24
 80276c0:	8822923a 	slli	r17,r17,8
 80276c4:	1809883a 	mov	r4,r3
 80276c8:	402c923a 	slli	r22,r8,8
 80276cc:	88b8b03a 	or	fp,r17,r2
 80276d0:	e028d43a 	srli	r20,fp,16
 80276d4:	d8c00015 	stw	r3,0(sp)
 80276d8:	e5ffffcc 	andi	r23,fp,65535
 80276dc:	a00b883a 	mov	r5,r20
 80276e0:	8025ae80 	call	8025ae8 <__udivsi3>
 80276e4:	d8c00017 	ldw	r3,0(sp)
 80276e8:	a00b883a 	mov	r5,r20
 80276ec:	d8800315 	stw	r2,12(sp)
 80276f0:	1809883a 	mov	r4,r3
 80276f4:	8025b4c0 	call	8025b4c <__umodsi3>
 80276f8:	d9800317 	ldw	r6,12(sp)
 80276fc:	1006943a 	slli	r3,r2,16
 8027700:	9004d43a 	srli	r2,r18,16
 8027704:	b9a3383a 	mul	r17,r23,r6
 8027708:	10c4b03a 	or	r2,r2,r3
 802770c:	1440062e 	bgeu	r2,r17,8027728 <__divdf3+0x39c>
 8027710:	1705883a 	add	r2,r2,fp
 8027714:	30ffffc4 	addi	r3,r6,-1
 8027718:	1700ee36 	bltu	r2,fp,8027ad4 <__divdf3+0x748>
 802771c:	1440ed2e 	bgeu	r2,r17,8027ad4 <__divdf3+0x748>
 8027720:	31bfff84 	addi	r6,r6,-2
 8027724:	1705883a 	add	r2,r2,fp
 8027728:	1463c83a 	sub	r17,r2,r17
 802772c:	a00b883a 	mov	r5,r20
 8027730:	8809883a 	mov	r4,r17
 8027734:	d9800315 	stw	r6,12(sp)
 8027738:	8025ae80 	call	8025ae8 <__udivsi3>
 802773c:	a00b883a 	mov	r5,r20
 8027740:	8809883a 	mov	r4,r17
 8027744:	d8800215 	stw	r2,8(sp)
 8027748:	8025b4c0 	call	8025b4c <__umodsi3>
 802774c:	d9c00217 	ldw	r7,8(sp)
 8027750:	1004943a 	slli	r2,r2,16
 8027754:	94bfffcc 	andi	r18,r18,65535
 8027758:	b9d1383a 	mul	r8,r23,r7
 802775c:	90a4b03a 	or	r18,r18,r2
 8027760:	d9800317 	ldw	r6,12(sp)
 8027764:	9200062e 	bgeu	r18,r8,8027780 <__divdf3+0x3f4>
 8027768:	9725883a 	add	r18,r18,fp
 802776c:	38bfffc4 	addi	r2,r7,-1
 8027770:	9700d636 	bltu	r18,fp,8027acc <__divdf3+0x740>
 8027774:	9200d52e 	bgeu	r18,r8,8027acc <__divdf3+0x740>
 8027778:	39ffff84 	addi	r7,r7,-2
 802777c:	9725883a 	add	r18,r18,fp
 8027780:	3004943a 	slli	r2,r6,16
 8027784:	b012d43a 	srli	r9,r22,16
 8027788:	b1bfffcc 	andi	r6,r22,65535
 802778c:	11e2b03a 	or	r17,r2,r7
 8027790:	8806d43a 	srli	r3,r17,16
 8027794:	893fffcc 	andi	r4,r17,65535
 8027798:	218b383a 	mul	r5,r4,r6
 802779c:	30c5383a 	mul	r2,r6,r3
 80277a0:	2249383a 	mul	r4,r4,r9
 80277a4:	280ed43a 	srli	r7,r5,16
 80277a8:	9225c83a 	sub	r18,r18,r8
 80277ac:	2089883a 	add	r4,r4,r2
 80277b0:	3909883a 	add	r4,r7,r4
 80277b4:	1a47383a 	mul	r3,r3,r9
 80277b8:	2080022e 	bgeu	r4,r2,80277c4 <__divdf3+0x438>
 80277bc:	00800074 	movhi	r2,1
 80277c0:	1887883a 	add	r3,r3,r2
 80277c4:	2004d43a 	srli	r2,r4,16
 80277c8:	2008943a 	slli	r4,r4,16
 80277cc:	297fffcc 	andi	r5,r5,65535
 80277d0:	10c7883a 	add	r3,r2,r3
 80277d4:	2149883a 	add	r4,r4,r5
 80277d8:	90c0a536 	bltu	r18,r3,8027a70 <__divdf3+0x6e4>
 80277dc:	90c0bf26 	beq	r18,r3,8027adc <__divdf3+0x750>
 80277e0:	90c7c83a 	sub	r3,r18,r3
 80277e4:	810fc83a 	sub	r7,r16,r4
 80277e8:	81e5803a 	cmpltu	r18,r16,r7
 80277ec:	1ca5c83a 	sub	r18,r3,r18
 80277f0:	e480c126 	beq	fp,r18,8027af8 <__divdf3+0x76c>
 80277f4:	a00b883a 	mov	r5,r20
 80277f8:	9009883a 	mov	r4,r18
 80277fc:	d9800315 	stw	r6,12(sp)
 8027800:	d9c00215 	stw	r7,8(sp)
 8027804:	da400115 	stw	r9,4(sp)
 8027808:	8025ae80 	call	8025ae8 <__udivsi3>
 802780c:	a00b883a 	mov	r5,r20
 8027810:	9009883a 	mov	r4,r18
 8027814:	d8800015 	stw	r2,0(sp)
 8027818:	8025b4c0 	call	8025b4c <__umodsi3>
 802781c:	d9c00217 	ldw	r7,8(sp)
 8027820:	da000017 	ldw	r8,0(sp)
 8027824:	1006943a 	slli	r3,r2,16
 8027828:	3804d43a 	srli	r2,r7,16
 802782c:	ba21383a 	mul	r16,r23,r8
 8027830:	d9800317 	ldw	r6,12(sp)
 8027834:	10c4b03a 	or	r2,r2,r3
 8027838:	da400117 	ldw	r9,4(sp)
 802783c:	1400062e 	bgeu	r2,r16,8027858 <__divdf3+0x4cc>
 8027840:	1705883a 	add	r2,r2,fp
 8027844:	40ffffc4 	addi	r3,r8,-1
 8027848:	1700ad36 	bltu	r2,fp,8027b00 <__divdf3+0x774>
 802784c:	1400ac2e 	bgeu	r2,r16,8027b00 <__divdf3+0x774>
 8027850:	423fff84 	addi	r8,r8,-2
 8027854:	1705883a 	add	r2,r2,fp
 8027858:	1421c83a 	sub	r16,r2,r16
 802785c:	a00b883a 	mov	r5,r20
 8027860:	8009883a 	mov	r4,r16
 8027864:	d9800315 	stw	r6,12(sp)
 8027868:	d9c00215 	stw	r7,8(sp)
 802786c:	da000015 	stw	r8,0(sp)
 8027870:	da400115 	stw	r9,4(sp)
 8027874:	8025ae80 	call	8025ae8 <__udivsi3>
 8027878:	8009883a 	mov	r4,r16
 802787c:	a00b883a 	mov	r5,r20
 8027880:	1025883a 	mov	r18,r2
 8027884:	8025b4c0 	call	8025b4c <__umodsi3>
 8027888:	d9c00217 	ldw	r7,8(sp)
 802788c:	1004943a 	slli	r2,r2,16
 8027890:	bcaf383a 	mul	r23,r23,r18
 8027894:	393fffcc 	andi	r4,r7,65535
 8027898:	2088b03a 	or	r4,r4,r2
 802789c:	d9800317 	ldw	r6,12(sp)
 80278a0:	da000017 	ldw	r8,0(sp)
 80278a4:	da400117 	ldw	r9,4(sp)
 80278a8:	25c0062e 	bgeu	r4,r23,80278c4 <__divdf3+0x538>
 80278ac:	2709883a 	add	r4,r4,fp
 80278b0:	90bfffc4 	addi	r2,r18,-1
 80278b4:	27009436 	bltu	r4,fp,8027b08 <__divdf3+0x77c>
 80278b8:	25c0932e 	bgeu	r4,r23,8027b08 <__divdf3+0x77c>
 80278bc:	94bfff84 	addi	r18,r18,-2
 80278c0:	2709883a 	add	r4,r4,fp
 80278c4:	4004943a 	slli	r2,r8,16
 80278c8:	25efc83a 	sub	r23,r4,r23
 80278cc:	1490b03a 	or	r8,r2,r18
 80278d0:	4008d43a 	srli	r4,r8,16
 80278d4:	40ffffcc 	andi	r3,r8,65535
 80278d8:	30c5383a 	mul	r2,r6,r3
 80278dc:	1a47383a 	mul	r3,r3,r9
 80278e0:	310d383a 	mul	r6,r6,r4
 80278e4:	100ad43a 	srli	r5,r2,16
 80278e8:	4913383a 	mul	r9,r9,r4
 80278ec:	1987883a 	add	r3,r3,r6
 80278f0:	28c7883a 	add	r3,r5,r3
 80278f4:	1980022e 	bgeu	r3,r6,8027900 <__divdf3+0x574>
 80278f8:	01000074 	movhi	r4,1
 80278fc:	4913883a 	add	r9,r9,r4
 8027900:	1808d43a 	srli	r4,r3,16
 8027904:	1806943a 	slli	r3,r3,16
 8027908:	10bfffcc 	andi	r2,r2,65535
 802790c:	2253883a 	add	r9,r4,r9
 8027910:	1887883a 	add	r3,r3,r2
 8027914:	ba403836 	bltu	r23,r9,80279f8 <__divdf3+0x66c>
 8027918:	ba403626 	beq	r23,r9,80279f4 <__divdf3+0x668>
 802791c:	42000054 	ori	r8,r8,1
 8027920:	a880ffc4 	addi	r2,r21,1023
 8027924:	00bf570e 	bge	zero,r2,8027684 <_gp+0xfffe5f78>
 8027928:	40c001cc 	andi	r3,r8,7
 802792c:	18000726 	beq	r3,zero,802794c <__divdf3+0x5c0>
 8027930:	40c003cc 	andi	r3,r8,15
 8027934:	01000104 	movi	r4,4
 8027938:	19000426 	beq	r3,r4,802794c <__divdf3+0x5c0>
 802793c:	4107883a 	add	r3,r8,r4
 8027940:	1a11803a 	cmpltu	r8,r3,r8
 8027944:	8a23883a 	add	r17,r17,r8
 8027948:	1811883a 	mov	r8,r3
 802794c:	88c0402c 	andhi	r3,r17,256
 8027950:	18000426 	beq	r3,zero,8027964 <__divdf3+0x5d8>
 8027954:	00ffc034 	movhi	r3,65280
 8027958:	18ffffc4 	addi	r3,r3,-1
 802795c:	a8810004 	addi	r2,r21,1024
 8027960:	88e2703a 	and	r17,r17,r3
 8027964:	00c1ff84 	movi	r3,2046
 8027968:	18bee316 	blt	r3,r2,80274f8 <_gp+0xfffe5dec>
 802796c:	8824977a 	slli	r18,r17,29
 8027970:	4010d0fa 	srli	r8,r8,3
 8027974:	8822927a 	slli	r17,r17,9
 8027978:	1081ffcc 	andi	r2,r2,2047
 802797c:	9224b03a 	or	r18,r18,r8
 8027980:	880ad33a 	srli	r5,r17,12
 8027984:	98c0004c 	andi	r3,r19,1
 8027988:	003edf06 	br	8027508 <_gp+0xfffe5dfc>
 802798c:	8080022c 	andhi	r2,r16,8
 8027990:	10001226 	beq	r2,zero,80279dc <__divdf3+0x650>
 8027994:	8880022c 	andhi	r2,r17,8
 8027998:	1000101e 	bne	r2,zero,80279dc <__divdf3+0x650>
 802799c:	00800434 	movhi	r2,16
 80279a0:	89400234 	orhi	r5,r17,8
 80279a4:	10bfffc4 	addi	r2,r2,-1
 80279a8:	b007883a 	mov	r3,r22
 80279ac:	288a703a 	and	r5,r5,r2
 80279b0:	4025883a 	mov	r18,r8
 80279b4:	003f3106 	br	802767c <_gp+0xfffe5f70>
 80279b8:	008000c4 	movi	r2,3
 80279bc:	3880a626 	beq	r7,r2,8027c58 <__divdf3+0x8cc>
 80279c0:	00800044 	movi	r2,1
 80279c4:	3880521e 	bne	r7,r2,8027b10 <__divdf3+0x784>
 80279c8:	b807883a 	mov	r3,r23
 80279cc:	0005883a 	mov	r2,zero
 80279d0:	000b883a 	mov	r5,zero
 80279d4:	0025883a 	mov	r18,zero
 80279d8:	003ecb06 	br	8027508 <_gp+0xfffe5dfc>
 80279dc:	00800434 	movhi	r2,16
 80279e0:	81400234 	orhi	r5,r16,8
 80279e4:	10bfffc4 	addi	r2,r2,-1
 80279e8:	a007883a 	mov	r3,r20
 80279ec:	288a703a 	and	r5,r5,r2
 80279f0:	003f2206 	br	802767c <_gp+0xfffe5f70>
 80279f4:	183fca26 	beq	r3,zero,8027920 <_gp+0xfffe6214>
 80279f8:	e5ef883a 	add	r23,fp,r23
 80279fc:	40bfffc4 	addi	r2,r8,-1
 8027a00:	bf00392e 	bgeu	r23,fp,8027ae8 <__divdf3+0x75c>
 8027a04:	1011883a 	mov	r8,r2
 8027a08:	ba7fc41e 	bne	r23,r9,802791c <_gp+0xfffe6210>
 8027a0c:	b0ffc31e 	bne	r22,r3,802791c <_gp+0xfffe6210>
 8027a10:	003fc306 	br	8027920 <_gp+0xfffe6214>
 8027a14:	143ff604 	addi	r16,r2,-40
 8027a18:	9c20983a 	sll	r16,r19,r16
 8027a1c:	0025883a 	mov	r18,zero
 8027a20:	003ee206 	br	80275ac <_gp+0xfffe5ea0>
 8027a24:	d9800315 	stw	r6,12(sp)
 8027a28:	d9c00215 	stw	r7,8(sp)
 8027a2c:	802939c0 	call	802939c <__clzsi2>
 8027a30:	10800804 	addi	r2,r2,32
 8027a34:	d9c00217 	ldw	r7,8(sp)
 8027a38:	d9800317 	ldw	r6,12(sp)
 8027a3c:	003ed106 	br	8027584 <_gp+0xfffe5e78>
 8027a40:	147ff604 	addi	r17,r2,-40
 8027a44:	3462983a 	sll	r17,r6,r17
 8027a48:	0011883a 	mov	r8,zero
 8027a4c:	003ef506 	br	8027624 <_gp+0xfffe5f18>
 8027a50:	3009883a 	mov	r4,r6
 8027a54:	d9800315 	stw	r6,12(sp)
 8027a58:	da400115 	stw	r9,4(sp)
 8027a5c:	802939c0 	call	802939c <__clzsi2>
 8027a60:	10800804 	addi	r2,r2,32
 8027a64:	da400117 	ldw	r9,4(sp)
 8027a68:	d9800317 	ldw	r6,12(sp)
 8027a6c:	003ee306 	br	80275fc <_gp+0xfffe5ef0>
 8027a70:	85a1883a 	add	r16,r16,r22
 8027a74:	8585803a 	cmpltu	r2,r16,r22
 8027a78:	1705883a 	add	r2,r2,fp
 8027a7c:	14a5883a 	add	r18,r2,r18
 8027a80:	88bfffc4 	addi	r2,r17,-1
 8027a84:	e4800c2e 	bgeu	fp,r18,8027ab8 <__divdf3+0x72c>
 8027a88:	90c03e36 	bltu	r18,r3,8027b84 <__divdf3+0x7f8>
 8027a8c:	1c806926 	beq	r3,r18,8027c34 <__divdf3+0x8a8>
 8027a90:	90c7c83a 	sub	r3,r18,r3
 8027a94:	1023883a 	mov	r17,r2
 8027a98:	003f5206 	br	80277e4 <_gp+0xfffe60d8>
 8027a9c:	923f0436 	bltu	r18,r8,80276b0 <_gp+0xfffe5fa4>
 8027aa0:	800897fa 	slli	r4,r16,31
 8027aa4:	9004d07a 	srli	r2,r18,1
 8027aa8:	8006d07a 	srli	r3,r16,1
 8027aac:	902097fa 	slli	r16,r18,31
 8027ab0:	20a4b03a 	or	r18,r4,r2
 8027ab4:	003f0106 	br	80276bc <_gp+0xfffe5fb0>
 8027ab8:	e4bff51e 	bne	fp,r18,8027a90 <_gp+0xfffe6384>
 8027abc:	85bff22e 	bgeu	r16,r22,8027a88 <_gp+0xfffe637c>
 8027ac0:	e0c7c83a 	sub	r3,fp,r3
 8027ac4:	1023883a 	mov	r17,r2
 8027ac8:	003f4606 	br	80277e4 <_gp+0xfffe60d8>
 8027acc:	100f883a 	mov	r7,r2
 8027ad0:	003f2b06 	br	8027780 <_gp+0xfffe6074>
 8027ad4:	180d883a 	mov	r6,r3
 8027ad8:	003f1306 	br	8027728 <_gp+0xfffe601c>
 8027adc:	813fe436 	bltu	r16,r4,8027a70 <_gp+0xfffe6364>
 8027ae0:	0007883a 	mov	r3,zero
 8027ae4:	003f3f06 	br	80277e4 <_gp+0xfffe60d8>
 8027ae8:	ba402c36 	bltu	r23,r9,8027b9c <__divdf3+0x810>
 8027aec:	4dc05426 	beq	r9,r23,8027c40 <__divdf3+0x8b4>
 8027af0:	1011883a 	mov	r8,r2
 8027af4:	003f8906 	br	802791c <_gp+0xfffe6210>
 8027af8:	023fffc4 	movi	r8,-1
 8027afc:	003f8806 	br	8027920 <_gp+0xfffe6214>
 8027b00:	1811883a 	mov	r8,r3
 8027b04:	003f5406 	br	8027858 <_gp+0xfffe614c>
 8027b08:	1025883a 	mov	r18,r2
 8027b0c:	003f6d06 	br	80278c4 <_gp+0xfffe61b8>
 8027b10:	b827883a 	mov	r19,r23
 8027b14:	003f8206 	br	8027920 <_gp+0xfffe6214>
 8027b18:	010007c4 	movi	r4,31
 8027b1c:	20c02616 	blt	r4,r3,8027bb8 <__divdf3+0x82c>
 8027b20:	00800804 	movi	r2,32
 8027b24:	10c5c83a 	sub	r2,r2,r3
 8027b28:	888a983a 	sll	r5,r17,r2
 8027b2c:	40c8d83a 	srl	r4,r8,r3
 8027b30:	4084983a 	sll	r2,r8,r2
 8027b34:	88e2d83a 	srl	r17,r17,r3
 8027b38:	2906b03a 	or	r3,r5,r4
 8027b3c:	1004c03a 	cmpne	r2,r2,zero
 8027b40:	1886b03a 	or	r3,r3,r2
 8027b44:	188001cc 	andi	r2,r3,7
 8027b48:	10000726 	beq	r2,zero,8027b68 <__divdf3+0x7dc>
 8027b4c:	188003cc 	andi	r2,r3,15
 8027b50:	01000104 	movi	r4,4
 8027b54:	11000426 	beq	r2,r4,8027b68 <__divdf3+0x7dc>
 8027b58:	1805883a 	mov	r2,r3
 8027b5c:	10c00104 	addi	r3,r2,4
 8027b60:	1885803a 	cmpltu	r2,r3,r2
 8027b64:	88a3883a 	add	r17,r17,r2
 8027b68:	8880202c 	andhi	r2,r17,128
 8027b6c:	10002726 	beq	r2,zero,8027c0c <__divdf3+0x880>
 8027b70:	98c0004c 	andi	r3,r19,1
 8027b74:	00800044 	movi	r2,1
 8027b78:	000b883a 	mov	r5,zero
 8027b7c:	0025883a 	mov	r18,zero
 8027b80:	003e6106 	br	8027508 <_gp+0xfffe5dfc>
 8027b84:	85a1883a 	add	r16,r16,r22
 8027b88:	8585803a 	cmpltu	r2,r16,r22
 8027b8c:	1705883a 	add	r2,r2,fp
 8027b90:	14a5883a 	add	r18,r2,r18
 8027b94:	8c7fff84 	addi	r17,r17,-2
 8027b98:	003f1106 	br	80277e0 <_gp+0xfffe60d4>
 8027b9c:	b589883a 	add	r4,r22,r22
 8027ba0:	25ad803a 	cmpltu	r22,r4,r22
 8027ba4:	b739883a 	add	fp,r22,fp
 8027ba8:	40bfff84 	addi	r2,r8,-2
 8027bac:	bf2f883a 	add	r23,r23,fp
 8027bb0:	202d883a 	mov	r22,r4
 8027bb4:	003f9306 	br	8027a04 <_gp+0xfffe62f8>
 8027bb8:	013ff844 	movi	r4,-31
 8027bbc:	2085c83a 	sub	r2,r4,r2
 8027bc0:	8888d83a 	srl	r4,r17,r2
 8027bc4:	00800804 	movi	r2,32
 8027bc8:	18802126 	beq	r3,r2,8027c50 <__divdf3+0x8c4>
 8027bcc:	00801004 	movi	r2,64
 8027bd0:	10c5c83a 	sub	r2,r2,r3
 8027bd4:	8884983a 	sll	r2,r17,r2
 8027bd8:	1204b03a 	or	r2,r2,r8
 8027bdc:	1004c03a 	cmpne	r2,r2,zero
 8027be0:	2084b03a 	or	r2,r4,r2
 8027be4:	144001cc 	andi	r17,r2,7
 8027be8:	88000d1e 	bne	r17,zero,8027c20 <__divdf3+0x894>
 8027bec:	000b883a 	mov	r5,zero
 8027bf0:	1024d0fa 	srli	r18,r2,3
 8027bf4:	98c0004c 	andi	r3,r19,1
 8027bf8:	0005883a 	mov	r2,zero
 8027bfc:	9464b03a 	or	r18,r18,r17
 8027c00:	003e4106 	br	8027508 <_gp+0xfffe5dfc>
 8027c04:	1007883a 	mov	r3,r2
 8027c08:	0023883a 	mov	r17,zero
 8027c0c:	880a927a 	slli	r5,r17,9
 8027c10:	1805883a 	mov	r2,r3
 8027c14:	8822977a 	slli	r17,r17,29
 8027c18:	280ad33a 	srli	r5,r5,12
 8027c1c:	003ff406 	br	8027bf0 <_gp+0xfffe64e4>
 8027c20:	10c003cc 	andi	r3,r2,15
 8027c24:	01000104 	movi	r4,4
 8027c28:	193ff626 	beq	r3,r4,8027c04 <_gp+0xfffe64f8>
 8027c2c:	0023883a 	mov	r17,zero
 8027c30:	003fca06 	br	8027b5c <_gp+0xfffe6450>
 8027c34:	813fd336 	bltu	r16,r4,8027b84 <_gp+0xfffe6478>
 8027c38:	1023883a 	mov	r17,r2
 8027c3c:	003fa806 	br	8027ae0 <_gp+0xfffe63d4>
 8027c40:	b0ffd636 	bltu	r22,r3,8027b9c <_gp+0xfffe6490>
 8027c44:	1011883a 	mov	r8,r2
 8027c48:	b0ff341e 	bne	r22,r3,802791c <_gp+0xfffe6210>
 8027c4c:	003f3406 	br	8027920 <_gp+0xfffe6214>
 8027c50:	0005883a 	mov	r2,zero
 8027c54:	003fe006 	br	8027bd8 <_gp+0xfffe64cc>
 8027c58:	00800434 	movhi	r2,16
 8027c5c:	89400234 	orhi	r5,r17,8
 8027c60:	10bfffc4 	addi	r2,r2,-1
 8027c64:	b807883a 	mov	r3,r23
 8027c68:	288a703a 	and	r5,r5,r2
 8027c6c:	4025883a 	mov	r18,r8
 8027c70:	003e8206 	br	802767c <_gp+0xfffe5f70>

08027c74 <__eqdf2>:
 8027c74:	2804d53a 	srli	r2,r5,20
 8027c78:	3806d53a 	srli	r3,r7,20
 8027c7c:	02000434 	movhi	r8,16
 8027c80:	423fffc4 	addi	r8,r8,-1
 8027c84:	1081ffcc 	andi	r2,r2,2047
 8027c88:	0281ffc4 	movi	r10,2047
 8027c8c:	2a12703a 	and	r9,r5,r8
 8027c90:	18c1ffcc 	andi	r3,r3,2047
 8027c94:	3a10703a 	and	r8,r7,r8
 8027c98:	280ad7fa 	srli	r5,r5,31
 8027c9c:	380ed7fa 	srli	r7,r7,31
 8027ca0:	12801026 	beq	r2,r10,8027ce4 <__eqdf2+0x70>
 8027ca4:	0281ffc4 	movi	r10,2047
 8027ca8:	1a800a26 	beq	r3,r10,8027cd4 <__eqdf2+0x60>
 8027cac:	10c00226 	beq	r2,r3,8027cb8 <__eqdf2+0x44>
 8027cb0:	00800044 	movi	r2,1
 8027cb4:	f800283a 	ret
 8027cb8:	4a3ffd1e 	bne	r9,r8,8027cb0 <_gp+0xfffe65a4>
 8027cbc:	21bffc1e 	bne	r4,r6,8027cb0 <_gp+0xfffe65a4>
 8027cc0:	29c00c26 	beq	r5,r7,8027cf4 <__eqdf2+0x80>
 8027cc4:	103ffa1e 	bne	r2,zero,8027cb0 <_gp+0xfffe65a4>
 8027cc8:	2244b03a 	or	r2,r4,r9
 8027ccc:	1004c03a 	cmpne	r2,r2,zero
 8027cd0:	f800283a 	ret
 8027cd4:	3214b03a 	or	r10,r6,r8
 8027cd8:	503ff426 	beq	r10,zero,8027cac <_gp+0xfffe65a0>
 8027cdc:	00800044 	movi	r2,1
 8027ce0:	f800283a 	ret
 8027ce4:	2254b03a 	or	r10,r4,r9
 8027ce8:	503fee26 	beq	r10,zero,8027ca4 <_gp+0xfffe6598>
 8027cec:	00800044 	movi	r2,1
 8027cf0:	f800283a 	ret
 8027cf4:	0005883a 	mov	r2,zero
 8027cf8:	f800283a 	ret

08027cfc <__gedf2>:
 8027cfc:	2804d53a 	srli	r2,r5,20
 8027d00:	3806d53a 	srli	r3,r7,20
 8027d04:	02000434 	movhi	r8,16
 8027d08:	423fffc4 	addi	r8,r8,-1
 8027d0c:	1081ffcc 	andi	r2,r2,2047
 8027d10:	0241ffc4 	movi	r9,2047
 8027d14:	2a14703a 	and	r10,r5,r8
 8027d18:	18c1ffcc 	andi	r3,r3,2047
 8027d1c:	3a10703a 	and	r8,r7,r8
 8027d20:	280ad7fa 	srli	r5,r5,31
 8027d24:	380ed7fa 	srli	r7,r7,31
 8027d28:	12401d26 	beq	r2,r9,8027da0 <__gedf2+0xa4>
 8027d2c:	0241ffc4 	movi	r9,2047
 8027d30:	1a401226 	beq	r3,r9,8027d7c <__gedf2+0x80>
 8027d34:	1000081e 	bne	r2,zero,8027d58 <__gedf2+0x5c>
 8027d38:	2296b03a 	or	r11,r4,r10
 8027d3c:	5813003a 	cmpeq	r9,r11,zero
 8027d40:	1800091e 	bne	r3,zero,8027d68 <__gedf2+0x6c>
 8027d44:	3218b03a 	or	r12,r6,r8
 8027d48:	6000071e 	bne	r12,zero,8027d68 <__gedf2+0x6c>
 8027d4c:	0005883a 	mov	r2,zero
 8027d50:	5800101e 	bne	r11,zero,8027d94 <__gedf2+0x98>
 8027d54:	f800283a 	ret
 8027d58:	18000c1e 	bne	r3,zero,8027d8c <__gedf2+0x90>
 8027d5c:	3212b03a 	or	r9,r6,r8
 8027d60:	48000c26 	beq	r9,zero,8027d94 <__gedf2+0x98>
 8027d64:	0013883a 	mov	r9,zero
 8027d68:	39c03fcc 	andi	r7,r7,255
 8027d6c:	48000826 	beq	r9,zero,8027d90 <__gedf2+0x94>
 8027d70:	38000926 	beq	r7,zero,8027d98 <__gedf2+0x9c>
 8027d74:	00800044 	movi	r2,1
 8027d78:	f800283a 	ret
 8027d7c:	3212b03a 	or	r9,r6,r8
 8027d80:	483fec26 	beq	r9,zero,8027d34 <_gp+0xfffe6628>
 8027d84:	00bfff84 	movi	r2,-2
 8027d88:	f800283a 	ret
 8027d8c:	39c03fcc 	andi	r7,r7,255
 8027d90:	29c00626 	beq	r5,r7,8027dac <__gedf2+0xb0>
 8027d94:	283ff726 	beq	r5,zero,8027d74 <_gp+0xfffe6668>
 8027d98:	00bfffc4 	movi	r2,-1
 8027d9c:	f800283a 	ret
 8027da0:	2292b03a 	or	r9,r4,r10
 8027da4:	483fe126 	beq	r9,zero,8027d2c <_gp+0xfffe6620>
 8027da8:	003ff606 	br	8027d84 <_gp+0xfffe6678>
 8027dac:	18bff916 	blt	r3,r2,8027d94 <_gp+0xfffe6688>
 8027db0:	10c00316 	blt	r2,r3,8027dc0 <__gedf2+0xc4>
 8027db4:	42bff736 	bltu	r8,r10,8027d94 <_gp+0xfffe6688>
 8027db8:	52000326 	beq	r10,r8,8027dc8 <__gedf2+0xcc>
 8027dbc:	5200042e 	bgeu	r10,r8,8027dd0 <__gedf2+0xd4>
 8027dc0:	283fec1e 	bne	r5,zero,8027d74 <_gp+0xfffe6668>
 8027dc4:	003ff406 	br	8027d98 <_gp+0xfffe668c>
 8027dc8:	313ff236 	bltu	r6,r4,8027d94 <_gp+0xfffe6688>
 8027dcc:	21bffc36 	bltu	r4,r6,8027dc0 <_gp+0xfffe66b4>
 8027dd0:	0005883a 	mov	r2,zero
 8027dd4:	f800283a 	ret

08027dd8 <__ledf2>:
 8027dd8:	2804d53a 	srli	r2,r5,20
 8027ddc:	3810d53a 	srli	r8,r7,20
 8027de0:	00c00434 	movhi	r3,16
 8027de4:	18ffffc4 	addi	r3,r3,-1
 8027de8:	1081ffcc 	andi	r2,r2,2047
 8027dec:	0241ffc4 	movi	r9,2047
 8027df0:	28d4703a 	and	r10,r5,r3
 8027df4:	4201ffcc 	andi	r8,r8,2047
 8027df8:	38c6703a 	and	r3,r7,r3
 8027dfc:	280ad7fa 	srli	r5,r5,31
 8027e00:	380ed7fa 	srli	r7,r7,31
 8027e04:	12401f26 	beq	r2,r9,8027e84 <__ledf2+0xac>
 8027e08:	0241ffc4 	movi	r9,2047
 8027e0c:	42401426 	beq	r8,r9,8027e60 <__ledf2+0x88>
 8027e10:	1000091e 	bne	r2,zero,8027e38 <__ledf2+0x60>
 8027e14:	2296b03a 	or	r11,r4,r10
 8027e18:	5813003a 	cmpeq	r9,r11,zero
 8027e1c:	29403fcc 	andi	r5,r5,255
 8027e20:	40000a1e 	bne	r8,zero,8027e4c <__ledf2+0x74>
 8027e24:	30d8b03a 	or	r12,r6,r3
 8027e28:	6000081e 	bne	r12,zero,8027e4c <__ledf2+0x74>
 8027e2c:	0005883a 	mov	r2,zero
 8027e30:	5800111e 	bne	r11,zero,8027e78 <__ledf2+0xa0>
 8027e34:	f800283a 	ret
 8027e38:	29403fcc 	andi	r5,r5,255
 8027e3c:	40000c1e 	bne	r8,zero,8027e70 <__ledf2+0x98>
 8027e40:	30d2b03a 	or	r9,r6,r3
 8027e44:	48000c26 	beq	r9,zero,8027e78 <__ledf2+0xa0>
 8027e48:	0013883a 	mov	r9,zero
 8027e4c:	39c03fcc 	andi	r7,r7,255
 8027e50:	48000826 	beq	r9,zero,8027e74 <__ledf2+0x9c>
 8027e54:	38001126 	beq	r7,zero,8027e9c <__ledf2+0xc4>
 8027e58:	00800044 	movi	r2,1
 8027e5c:	f800283a 	ret
 8027e60:	30d2b03a 	or	r9,r6,r3
 8027e64:	483fea26 	beq	r9,zero,8027e10 <_gp+0xfffe6704>
 8027e68:	00800084 	movi	r2,2
 8027e6c:	f800283a 	ret
 8027e70:	39c03fcc 	andi	r7,r7,255
 8027e74:	39400726 	beq	r7,r5,8027e94 <__ledf2+0xbc>
 8027e78:	2800081e 	bne	r5,zero,8027e9c <__ledf2+0xc4>
 8027e7c:	00800044 	movi	r2,1
 8027e80:	f800283a 	ret
 8027e84:	2292b03a 	or	r9,r4,r10
 8027e88:	483fdf26 	beq	r9,zero,8027e08 <_gp+0xfffe66fc>
 8027e8c:	00800084 	movi	r2,2
 8027e90:	f800283a 	ret
 8027e94:	4080030e 	bge	r8,r2,8027ea4 <__ledf2+0xcc>
 8027e98:	383fef26 	beq	r7,zero,8027e58 <_gp+0xfffe674c>
 8027e9c:	00bfffc4 	movi	r2,-1
 8027ea0:	f800283a 	ret
 8027ea4:	123feb16 	blt	r2,r8,8027e54 <_gp+0xfffe6748>
 8027ea8:	1abff336 	bltu	r3,r10,8027e78 <_gp+0xfffe676c>
 8027eac:	50c00326 	beq	r10,r3,8027ebc <__ledf2+0xe4>
 8027eb0:	50c0042e 	bgeu	r10,r3,8027ec4 <__ledf2+0xec>
 8027eb4:	283fe81e 	bne	r5,zero,8027e58 <_gp+0xfffe674c>
 8027eb8:	003ff806 	br	8027e9c <_gp+0xfffe6790>
 8027ebc:	313fee36 	bltu	r6,r4,8027e78 <_gp+0xfffe676c>
 8027ec0:	21bffc36 	bltu	r4,r6,8027eb4 <_gp+0xfffe67a8>
 8027ec4:	0005883a 	mov	r2,zero
 8027ec8:	f800283a 	ret

08027ecc <__muldf3>:
 8027ecc:	defff304 	addi	sp,sp,-52
 8027ed0:	2804d53a 	srli	r2,r5,20
 8027ed4:	dd800915 	stw	r22,36(sp)
 8027ed8:	282cd7fa 	srli	r22,r5,31
 8027edc:	dc000315 	stw	r16,12(sp)
 8027ee0:	04000434 	movhi	r16,16
 8027ee4:	dd400815 	stw	r21,32(sp)
 8027ee8:	dc800515 	stw	r18,20(sp)
 8027eec:	843fffc4 	addi	r16,r16,-1
 8027ef0:	dfc00c15 	stw	ra,48(sp)
 8027ef4:	df000b15 	stw	fp,44(sp)
 8027ef8:	ddc00a15 	stw	r23,40(sp)
 8027efc:	dd000715 	stw	r20,28(sp)
 8027f00:	dcc00615 	stw	r19,24(sp)
 8027f04:	dc400415 	stw	r17,16(sp)
 8027f08:	1481ffcc 	andi	r18,r2,2047
 8027f0c:	2c20703a 	and	r16,r5,r16
 8027f10:	b02b883a 	mov	r21,r22
 8027f14:	b2403fcc 	andi	r9,r22,255
 8027f18:	90006026 	beq	r18,zero,802809c <__muldf3+0x1d0>
 8027f1c:	0081ffc4 	movi	r2,2047
 8027f20:	2029883a 	mov	r20,r4
 8027f24:	90803626 	beq	r18,r2,8028000 <__muldf3+0x134>
 8027f28:	80800434 	orhi	r2,r16,16
 8027f2c:	100490fa 	slli	r2,r2,3
 8027f30:	2020d77a 	srli	r16,r4,29
 8027f34:	202890fa 	slli	r20,r4,3
 8027f38:	94bf0044 	addi	r18,r18,-1023
 8027f3c:	80a0b03a 	or	r16,r16,r2
 8027f40:	0027883a 	mov	r19,zero
 8027f44:	0039883a 	mov	fp,zero
 8027f48:	3804d53a 	srli	r2,r7,20
 8027f4c:	382ed7fa 	srli	r23,r7,31
 8027f50:	04400434 	movhi	r17,16
 8027f54:	8c7fffc4 	addi	r17,r17,-1
 8027f58:	1081ffcc 	andi	r2,r2,2047
 8027f5c:	3011883a 	mov	r8,r6
 8027f60:	3c62703a 	and	r17,r7,r17
 8027f64:	ba803fcc 	andi	r10,r23,255
 8027f68:	10006d26 	beq	r2,zero,8028120 <__muldf3+0x254>
 8027f6c:	00c1ffc4 	movi	r3,2047
 8027f70:	10c06526 	beq	r2,r3,8028108 <__muldf3+0x23c>
 8027f74:	88c00434 	orhi	r3,r17,16
 8027f78:	180690fa 	slli	r3,r3,3
 8027f7c:	3022d77a 	srli	r17,r6,29
 8027f80:	301090fa 	slli	r8,r6,3
 8027f84:	10bf0044 	addi	r2,r2,-1023
 8027f88:	88e2b03a 	or	r17,r17,r3
 8027f8c:	000b883a 	mov	r5,zero
 8027f90:	9085883a 	add	r2,r18,r2
 8027f94:	2cc8b03a 	or	r4,r5,r19
 8027f98:	00c003c4 	movi	r3,15
 8027f9c:	bdacf03a 	xor	r22,r23,r22
 8027fa0:	12c00044 	addi	r11,r2,1
 8027fa4:	19009936 	bltu	r3,r4,802820c <__muldf3+0x340>
 8027fa8:	200890ba 	slli	r4,r4,2
 8027fac:	00c200b4 	movhi	r3,2050
 8027fb0:	18dff004 	addi	r3,r3,32704
 8027fb4:	20c9883a 	add	r4,r4,r3
 8027fb8:	20c00017 	ldw	r3,0(r4)
 8027fbc:	1800683a 	jmp	r3
 8027fc0:	0802820c 	andi	zero,at,2568
 8027fc4:	08028020 	cmpeqi	zero,at,2560
 8027fc8:	08028020 	cmpeqi	zero,at,2560
 8027fcc:	0802801c 	xori	zero,at,2560
 8027fd0:	080281e8 	cmpgeui	zero,at,2567
 8027fd4:	080281e8 	cmpgeui	zero,at,2567
 8027fd8:	080281d0 	cmplti	zero,at,2567
 8027fdc:	0802801c 	xori	zero,at,2560
 8027fe0:	080281e8 	cmpgeui	zero,at,2567
 8027fe4:	080281d0 	cmplti	zero,at,2567
 8027fe8:	080281e8 	cmpgeui	zero,at,2567
 8027fec:	0802801c 	xori	zero,at,2560
 8027ff0:	080281f8 	rdprs	zero,at,2567
 8027ff4:	080281f8 	rdprs	zero,at,2567
 8027ff8:	080281f8 	rdprs	zero,at,2567
 8027ffc:	08028414 	ori	zero,at,2576
 8028000:	2404b03a 	or	r2,r4,r16
 8028004:	10006f1e 	bne	r2,zero,80281c4 <__muldf3+0x2f8>
 8028008:	04c00204 	movi	r19,8
 802800c:	0021883a 	mov	r16,zero
 8028010:	0029883a 	mov	r20,zero
 8028014:	07000084 	movi	fp,2
 8028018:	003fcb06 	br	8027f48 <_gp+0xfffe683c>
 802801c:	502d883a 	mov	r22,r10
 8028020:	00800084 	movi	r2,2
 8028024:	28805726 	beq	r5,r2,8028184 <__muldf3+0x2b8>
 8028028:	008000c4 	movi	r2,3
 802802c:	28816626 	beq	r5,r2,80285c8 <__muldf3+0x6fc>
 8028030:	00800044 	movi	r2,1
 8028034:	2881411e 	bne	r5,r2,802853c <__muldf3+0x670>
 8028038:	b02b883a 	mov	r21,r22
 802803c:	0005883a 	mov	r2,zero
 8028040:	000b883a 	mov	r5,zero
 8028044:	0029883a 	mov	r20,zero
 8028048:	1004953a 	slli	r2,r2,20
 802804c:	a8c03fcc 	andi	r3,r21,255
 8028050:	04400434 	movhi	r17,16
 8028054:	8c7fffc4 	addi	r17,r17,-1
 8028058:	180697fa 	slli	r3,r3,31
 802805c:	2c4a703a 	and	r5,r5,r17
 8028060:	288ab03a 	or	r5,r5,r2
 8028064:	28c6b03a 	or	r3,r5,r3
 8028068:	a005883a 	mov	r2,r20
 802806c:	dfc00c17 	ldw	ra,48(sp)
 8028070:	df000b17 	ldw	fp,44(sp)
 8028074:	ddc00a17 	ldw	r23,40(sp)
 8028078:	dd800917 	ldw	r22,36(sp)
 802807c:	dd400817 	ldw	r21,32(sp)
 8028080:	dd000717 	ldw	r20,28(sp)
 8028084:	dcc00617 	ldw	r19,24(sp)
 8028088:	dc800517 	ldw	r18,20(sp)
 802808c:	dc400417 	ldw	r17,16(sp)
 8028090:	dc000317 	ldw	r16,12(sp)
 8028094:	dec00d04 	addi	sp,sp,52
 8028098:	f800283a 	ret
 802809c:	2404b03a 	or	r2,r4,r16
 80280a0:	2027883a 	mov	r19,r4
 80280a4:	10004226 	beq	r2,zero,80281b0 <__muldf3+0x2e4>
 80280a8:	8000fc26 	beq	r16,zero,802849c <__muldf3+0x5d0>
 80280ac:	8009883a 	mov	r4,r16
 80280b0:	d9800215 	stw	r6,8(sp)
 80280b4:	d9c00015 	stw	r7,0(sp)
 80280b8:	da400115 	stw	r9,4(sp)
 80280bc:	802939c0 	call	802939c <__clzsi2>
 80280c0:	d9800217 	ldw	r6,8(sp)
 80280c4:	d9c00017 	ldw	r7,0(sp)
 80280c8:	da400117 	ldw	r9,4(sp)
 80280cc:	113ffd44 	addi	r4,r2,-11
 80280d0:	00c00704 	movi	r3,28
 80280d4:	1900ed16 	blt	r3,r4,802848c <__muldf3+0x5c0>
 80280d8:	00c00744 	movi	r3,29
 80280dc:	147ffe04 	addi	r17,r2,-8
 80280e0:	1907c83a 	sub	r3,r3,r4
 80280e4:	8460983a 	sll	r16,r16,r17
 80280e8:	98c6d83a 	srl	r3,r19,r3
 80280ec:	9c68983a 	sll	r20,r19,r17
 80280f0:	1c20b03a 	or	r16,r3,r16
 80280f4:	1080fcc4 	addi	r2,r2,1011
 80280f8:	00a5c83a 	sub	r18,zero,r2
 80280fc:	0027883a 	mov	r19,zero
 8028100:	0039883a 	mov	fp,zero
 8028104:	003f9006 	br	8027f48 <_gp+0xfffe683c>
 8028108:	3446b03a 	or	r3,r6,r17
 802810c:	1800261e 	bne	r3,zero,80281a8 <__muldf3+0x2dc>
 8028110:	0023883a 	mov	r17,zero
 8028114:	0011883a 	mov	r8,zero
 8028118:	01400084 	movi	r5,2
 802811c:	003f9c06 	br	8027f90 <_gp+0xfffe6884>
 8028120:	3446b03a 	or	r3,r6,r17
 8028124:	18001c26 	beq	r3,zero,8028198 <__muldf3+0x2cc>
 8028128:	8800ce26 	beq	r17,zero,8028464 <__muldf3+0x598>
 802812c:	8809883a 	mov	r4,r17
 8028130:	d9800215 	stw	r6,8(sp)
 8028134:	da400115 	stw	r9,4(sp)
 8028138:	da800015 	stw	r10,0(sp)
 802813c:	802939c0 	call	802939c <__clzsi2>
 8028140:	d9800217 	ldw	r6,8(sp)
 8028144:	da400117 	ldw	r9,4(sp)
 8028148:	da800017 	ldw	r10,0(sp)
 802814c:	113ffd44 	addi	r4,r2,-11
 8028150:	00c00704 	movi	r3,28
 8028154:	1900bf16 	blt	r3,r4,8028454 <__muldf3+0x588>
 8028158:	00c00744 	movi	r3,29
 802815c:	123ffe04 	addi	r8,r2,-8
 8028160:	1907c83a 	sub	r3,r3,r4
 8028164:	8a22983a 	sll	r17,r17,r8
 8028168:	30c6d83a 	srl	r3,r6,r3
 802816c:	3210983a 	sll	r8,r6,r8
 8028170:	1c62b03a 	or	r17,r3,r17
 8028174:	1080fcc4 	addi	r2,r2,1011
 8028178:	0085c83a 	sub	r2,zero,r2
 802817c:	000b883a 	mov	r5,zero
 8028180:	003f8306 	br	8027f90 <_gp+0xfffe6884>
 8028184:	b02b883a 	mov	r21,r22
 8028188:	0081ffc4 	movi	r2,2047
 802818c:	000b883a 	mov	r5,zero
 8028190:	0029883a 	mov	r20,zero
 8028194:	003fac06 	br	8028048 <_gp+0xfffe693c>
 8028198:	0023883a 	mov	r17,zero
 802819c:	0011883a 	mov	r8,zero
 80281a0:	01400044 	movi	r5,1
 80281a4:	003f7a06 	br	8027f90 <_gp+0xfffe6884>
 80281a8:	014000c4 	movi	r5,3
 80281ac:	003f7806 	br	8027f90 <_gp+0xfffe6884>
 80281b0:	04c00104 	movi	r19,4
 80281b4:	0021883a 	mov	r16,zero
 80281b8:	0029883a 	mov	r20,zero
 80281bc:	07000044 	movi	fp,1
 80281c0:	003f6106 	br	8027f48 <_gp+0xfffe683c>
 80281c4:	04c00304 	movi	r19,12
 80281c8:	070000c4 	movi	fp,3
 80281cc:	003f5e06 	br	8027f48 <_gp+0xfffe683c>
 80281d0:	01400434 	movhi	r5,16
 80281d4:	002b883a 	mov	r21,zero
 80281d8:	297fffc4 	addi	r5,r5,-1
 80281dc:	053fffc4 	movi	r20,-1
 80281e0:	0081ffc4 	movi	r2,2047
 80281e4:	003f9806 	br	8028048 <_gp+0xfffe693c>
 80281e8:	8023883a 	mov	r17,r16
 80281ec:	a011883a 	mov	r8,r20
 80281f0:	e00b883a 	mov	r5,fp
 80281f4:	003f8a06 	br	8028020 <_gp+0xfffe6914>
 80281f8:	8023883a 	mov	r17,r16
 80281fc:	a011883a 	mov	r8,r20
 8028200:	482d883a 	mov	r22,r9
 8028204:	e00b883a 	mov	r5,fp
 8028208:	003f8506 	br	8028020 <_gp+0xfffe6914>
 802820c:	a00ad43a 	srli	r5,r20,16
 8028210:	401ad43a 	srli	r13,r8,16
 8028214:	a53fffcc 	andi	r20,r20,65535
 8028218:	423fffcc 	andi	r8,r8,65535
 802821c:	4519383a 	mul	r12,r8,r20
 8028220:	4147383a 	mul	r3,r8,r5
 8028224:	6d09383a 	mul	r4,r13,r20
 8028228:	600cd43a 	srli	r6,r12,16
 802822c:	2b5d383a 	mul	r14,r5,r13
 8028230:	20c9883a 	add	r4,r4,r3
 8028234:	310d883a 	add	r6,r6,r4
 8028238:	30c0022e 	bgeu	r6,r3,8028244 <__muldf3+0x378>
 802823c:	00c00074 	movhi	r3,1
 8028240:	70dd883a 	add	r14,r14,r3
 8028244:	8826d43a 	srli	r19,r17,16
 8028248:	8bffffcc 	andi	r15,r17,65535
 802824c:	7d23383a 	mul	r17,r15,r20
 8028250:	7949383a 	mul	r4,r15,r5
 8028254:	9d29383a 	mul	r20,r19,r20
 8028258:	8814d43a 	srli	r10,r17,16
 802825c:	3012943a 	slli	r9,r6,16
 8028260:	a129883a 	add	r20,r20,r4
 8028264:	633fffcc 	andi	r12,r12,65535
 8028268:	5515883a 	add	r10,r10,r20
 802826c:	3006d43a 	srli	r3,r6,16
 8028270:	4b13883a 	add	r9,r9,r12
 8028274:	2ccb383a 	mul	r5,r5,r19
 8028278:	5100022e 	bgeu	r10,r4,8028284 <__muldf3+0x3b8>
 802827c:	01000074 	movhi	r4,1
 8028280:	290b883a 	add	r5,r5,r4
 8028284:	802ad43a 	srli	r21,r16,16
 8028288:	843fffcc 	andi	r16,r16,65535
 802828c:	440d383a 	mul	r6,r8,r16
 8028290:	4565383a 	mul	r18,r8,r21
 8028294:	8349383a 	mul	r4,r16,r13
 8028298:	500e943a 	slli	r7,r10,16
 802829c:	3010d43a 	srli	r8,r6,16
 80282a0:	5028d43a 	srli	r20,r10,16
 80282a4:	2489883a 	add	r4,r4,r18
 80282a8:	8abfffcc 	andi	r10,r17,65535
 80282ac:	3a95883a 	add	r10,r7,r10
 80282b0:	4119883a 	add	r12,r8,r4
 80282b4:	a169883a 	add	r20,r20,r5
 80282b8:	1a87883a 	add	r3,r3,r10
 80282bc:	6d5b383a 	mul	r13,r13,r21
 80282c0:	6480022e 	bgeu	r12,r18,80282cc <__muldf3+0x400>
 80282c4:	01000074 	movhi	r4,1
 80282c8:	691b883a 	add	r13,r13,r4
 80282cc:	7c25383a 	mul	r18,r15,r16
 80282d0:	7d4b383a 	mul	r5,r15,r21
 80282d4:	84cf383a 	mul	r7,r16,r19
 80282d8:	901ed43a 	srli	r15,r18,16
 80282dc:	6008d43a 	srli	r4,r12,16
 80282e0:	6010943a 	slli	r8,r12,16
 80282e4:	394f883a 	add	r7,r7,r5
 80282e8:	333fffcc 	andi	r12,r6,65535
 80282ec:	79df883a 	add	r15,r15,r7
 80282f0:	235b883a 	add	r13,r4,r13
 80282f4:	9d63383a 	mul	r17,r19,r21
 80282f8:	4309883a 	add	r4,r8,r12
 80282fc:	7940022e 	bgeu	r15,r5,8028308 <__muldf3+0x43c>
 8028300:	01400074 	movhi	r5,1
 8028304:	8963883a 	add	r17,r17,r5
 8028308:	780a943a 	slli	r5,r15,16
 802830c:	91bfffcc 	andi	r6,r18,65535
 8028310:	70c7883a 	add	r3,r14,r3
 8028314:	298d883a 	add	r6,r5,r6
 8028318:	1a8f803a 	cmpltu	r7,r3,r10
 802831c:	350b883a 	add	r5,r6,r20
 8028320:	20c7883a 	add	r3,r4,r3
 8028324:	3955883a 	add	r10,r7,r5
 8028328:	1909803a 	cmpltu	r4,r3,r4
 802832c:	6a91883a 	add	r8,r13,r10
 8028330:	780cd43a 	srli	r6,r15,16
 8028334:	2219883a 	add	r12,r4,r8
 8028338:	2d0b803a 	cmpltu	r5,r5,r20
 802833c:	51cf803a 	cmpltu	r7,r10,r7
 8028340:	29ceb03a 	or	r7,r5,r7
 8028344:	4351803a 	cmpltu	r8,r8,r13
 8028348:	610b803a 	cmpltu	r5,r12,r4
 802834c:	4148b03a 	or	r4,r8,r5
 8028350:	398f883a 	add	r7,r7,r6
 8028354:	3909883a 	add	r4,r7,r4
 8028358:	1810927a 	slli	r8,r3,9
 802835c:	2449883a 	add	r4,r4,r17
 8028360:	2008927a 	slli	r4,r4,9
 8028364:	6022d5fa 	srli	r17,r12,23
 8028368:	1806d5fa 	srli	r3,r3,23
 802836c:	4252b03a 	or	r9,r8,r9
 8028370:	600a927a 	slli	r5,r12,9
 8028374:	4810c03a 	cmpne	r8,r9,zero
 8028378:	2462b03a 	or	r17,r4,r17
 802837c:	40c6b03a 	or	r3,r8,r3
 8028380:	8900402c 	andhi	r4,r17,256
 8028384:	1950b03a 	or	r8,r3,r5
 8028388:	20000726 	beq	r4,zero,80283a8 <__muldf3+0x4dc>
 802838c:	4006d07a 	srli	r3,r8,1
 8028390:	880497fa 	slli	r2,r17,31
 8028394:	4200004c 	andi	r8,r8,1
 8028398:	8822d07a 	srli	r17,r17,1
 802839c:	1a10b03a 	or	r8,r3,r8
 80283a0:	1210b03a 	or	r8,r2,r8
 80283a4:	5805883a 	mov	r2,r11
 80283a8:	1140ffc4 	addi	r5,r2,1023
 80283ac:	0140440e 	bge	zero,r5,80284c0 <__muldf3+0x5f4>
 80283b0:	40c001cc 	andi	r3,r8,7
 80283b4:	18000726 	beq	r3,zero,80283d4 <__muldf3+0x508>
 80283b8:	40c003cc 	andi	r3,r8,15
 80283bc:	01000104 	movi	r4,4
 80283c0:	19000426 	beq	r3,r4,80283d4 <__muldf3+0x508>
 80283c4:	4107883a 	add	r3,r8,r4
 80283c8:	1a11803a 	cmpltu	r8,r3,r8
 80283cc:	8a23883a 	add	r17,r17,r8
 80283d0:	1811883a 	mov	r8,r3
 80283d4:	88c0402c 	andhi	r3,r17,256
 80283d8:	18000426 	beq	r3,zero,80283ec <__muldf3+0x520>
 80283dc:	11410004 	addi	r5,r2,1024
 80283e0:	00bfc034 	movhi	r2,65280
 80283e4:	10bfffc4 	addi	r2,r2,-1
 80283e8:	88a2703a 	and	r17,r17,r2
 80283ec:	0081ff84 	movi	r2,2046
 80283f0:	117f6416 	blt	r2,r5,8028184 <_gp+0xfffe6a78>
 80283f4:	8828977a 	slli	r20,r17,29
 80283f8:	4010d0fa 	srli	r8,r8,3
 80283fc:	8822927a 	slli	r17,r17,9
 8028400:	2881ffcc 	andi	r2,r5,2047
 8028404:	a228b03a 	or	r20,r20,r8
 8028408:	880ad33a 	srli	r5,r17,12
 802840c:	b02b883a 	mov	r21,r22
 8028410:	003f0d06 	br	8028048 <_gp+0xfffe693c>
 8028414:	8080022c 	andhi	r2,r16,8
 8028418:	10000926 	beq	r2,zero,8028440 <__muldf3+0x574>
 802841c:	8880022c 	andhi	r2,r17,8
 8028420:	1000071e 	bne	r2,zero,8028440 <__muldf3+0x574>
 8028424:	00800434 	movhi	r2,16
 8028428:	89400234 	orhi	r5,r17,8
 802842c:	10bfffc4 	addi	r2,r2,-1
 8028430:	b82b883a 	mov	r21,r23
 8028434:	288a703a 	and	r5,r5,r2
 8028438:	4029883a 	mov	r20,r8
 802843c:	003f6806 	br	80281e0 <_gp+0xfffe6ad4>
 8028440:	00800434 	movhi	r2,16
 8028444:	81400234 	orhi	r5,r16,8
 8028448:	10bfffc4 	addi	r2,r2,-1
 802844c:	288a703a 	and	r5,r5,r2
 8028450:	003f6306 	br	80281e0 <_gp+0xfffe6ad4>
 8028454:	147ff604 	addi	r17,r2,-40
 8028458:	3462983a 	sll	r17,r6,r17
 802845c:	0011883a 	mov	r8,zero
 8028460:	003f4406 	br	8028174 <_gp+0xfffe6a68>
 8028464:	3009883a 	mov	r4,r6
 8028468:	d9800215 	stw	r6,8(sp)
 802846c:	da400115 	stw	r9,4(sp)
 8028470:	da800015 	stw	r10,0(sp)
 8028474:	802939c0 	call	802939c <__clzsi2>
 8028478:	10800804 	addi	r2,r2,32
 802847c:	da800017 	ldw	r10,0(sp)
 8028480:	da400117 	ldw	r9,4(sp)
 8028484:	d9800217 	ldw	r6,8(sp)
 8028488:	003f3006 	br	802814c <_gp+0xfffe6a40>
 802848c:	143ff604 	addi	r16,r2,-40
 8028490:	9c20983a 	sll	r16,r19,r16
 8028494:	0029883a 	mov	r20,zero
 8028498:	003f1606 	br	80280f4 <_gp+0xfffe69e8>
 802849c:	d9800215 	stw	r6,8(sp)
 80284a0:	d9c00015 	stw	r7,0(sp)
 80284a4:	da400115 	stw	r9,4(sp)
 80284a8:	802939c0 	call	802939c <__clzsi2>
 80284ac:	10800804 	addi	r2,r2,32
 80284b0:	da400117 	ldw	r9,4(sp)
 80284b4:	d9c00017 	ldw	r7,0(sp)
 80284b8:	d9800217 	ldw	r6,8(sp)
 80284bc:	003f0306 	br	80280cc <_gp+0xfffe69c0>
 80284c0:	00c00044 	movi	r3,1
 80284c4:	1947c83a 	sub	r3,r3,r5
 80284c8:	00800e04 	movi	r2,56
 80284cc:	10feda16 	blt	r2,r3,8028038 <_gp+0xfffe692c>
 80284d0:	008007c4 	movi	r2,31
 80284d4:	10c01b16 	blt	r2,r3,8028544 <__muldf3+0x678>
 80284d8:	00800804 	movi	r2,32
 80284dc:	10c5c83a 	sub	r2,r2,r3
 80284e0:	888a983a 	sll	r5,r17,r2
 80284e4:	40c8d83a 	srl	r4,r8,r3
 80284e8:	4084983a 	sll	r2,r8,r2
 80284ec:	88e2d83a 	srl	r17,r17,r3
 80284f0:	2906b03a 	or	r3,r5,r4
 80284f4:	1004c03a 	cmpne	r2,r2,zero
 80284f8:	1886b03a 	or	r3,r3,r2
 80284fc:	188001cc 	andi	r2,r3,7
 8028500:	10000726 	beq	r2,zero,8028520 <__muldf3+0x654>
 8028504:	188003cc 	andi	r2,r3,15
 8028508:	01000104 	movi	r4,4
 802850c:	11000426 	beq	r2,r4,8028520 <__muldf3+0x654>
 8028510:	1805883a 	mov	r2,r3
 8028514:	10c00104 	addi	r3,r2,4
 8028518:	1885803a 	cmpltu	r2,r3,r2
 802851c:	88a3883a 	add	r17,r17,r2
 8028520:	8880202c 	andhi	r2,r17,128
 8028524:	10001c26 	beq	r2,zero,8028598 <__muldf3+0x6cc>
 8028528:	b02b883a 	mov	r21,r22
 802852c:	00800044 	movi	r2,1
 8028530:	000b883a 	mov	r5,zero
 8028534:	0029883a 	mov	r20,zero
 8028538:	003ec306 	br	8028048 <_gp+0xfffe693c>
 802853c:	5805883a 	mov	r2,r11
 8028540:	003f9906 	br	80283a8 <_gp+0xfffe6c9c>
 8028544:	00bff844 	movi	r2,-31
 8028548:	1145c83a 	sub	r2,r2,r5
 802854c:	8888d83a 	srl	r4,r17,r2
 8028550:	00800804 	movi	r2,32
 8028554:	18801a26 	beq	r3,r2,80285c0 <__muldf3+0x6f4>
 8028558:	00801004 	movi	r2,64
 802855c:	10c5c83a 	sub	r2,r2,r3
 8028560:	8884983a 	sll	r2,r17,r2
 8028564:	1204b03a 	or	r2,r2,r8
 8028568:	1004c03a 	cmpne	r2,r2,zero
 802856c:	2084b03a 	or	r2,r4,r2
 8028570:	144001cc 	andi	r17,r2,7
 8028574:	88000d1e 	bne	r17,zero,80285ac <__muldf3+0x6e0>
 8028578:	000b883a 	mov	r5,zero
 802857c:	1028d0fa 	srli	r20,r2,3
 8028580:	b02b883a 	mov	r21,r22
 8028584:	0005883a 	mov	r2,zero
 8028588:	a468b03a 	or	r20,r20,r17
 802858c:	003eae06 	br	8028048 <_gp+0xfffe693c>
 8028590:	1007883a 	mov	r3,r2
 8028594:	0023883a 	mov	r17,zero
 8028598:	880a927a 	slli	r5,r17,9
 802859c:	1805883a 	mov	r2,r3
 80285a0:	8822977a 	slli	r17,r17,29
 80285a4:	280ad33a 	srli	r5,r5,12
 80285a8:	003ff406 	br	802857c <_gp+0xfffe6e70>
 80285ac:	10c003cc 	andi	r3,r2,15
 80285b0:	01000104 	movi	r4,4
 80285b4:	193ff626 	beq	r3,r4,8028590 <_gp+0xfffe6e84>
 80285b8:	0023883a 	mov	r17,zero
 80285bc:	003fd506 	br	8028514 <_gp+0xfffe6e08>
 80285c0:	0005883a 	mov	r2,zero
 80285c4:	003fe706 	br	8028564 <_gp+0xfffe6e58>
 80285c8:	00800434 	movhi	r2,16
 80285cc:	89400234 	orhi	r5,r17,8
 80285d0:	10bfffc4 	addi	r2,r2,-1
 80285d4:	b02b883a 	mov	r21,r22
 80285d8:	288a703a 	and	r5,r5,r2
 80285dc:	4029883a 	mov	r20,r8
 80285e0:	003eff06 	br	80281e0 <_gp+0xfffe6ad4>

080285e4 <__subdf3>:
 80285e4:	02000434 	movhi	r8,16
 80285e8:	423fffc4 	addi	r8,r8,-1
 80285ec:	defffb04 	addi	sp,sp,-20
 80285f0:	2a14703a 	and	r10,r5,r8
 80285f4:	3812d53a 	srli	r9,r7,20
 80285f8:	3a10703a 	and	r8,r7,r8
 80285fc:	2006d77a 	srli	r3,r4,29
 8028600:	3004d77a 	srli	r2,r6,29
 8028604:	dc000015 	stw	r16,0(sp)
 8028608:	501490fa 	slli	r10,r10,3
 802860c:	2820d53a 	srli	r16,r5,20
 8028610:	401090fa 	slli	r8,r8,3
 8028614:	dc800215 	stw	r18,8(sp)
 8028618:	dc400115 	stw	r17,4(sp)
 802861c:	dfc00415 	stw	ra,16(sp)
 8028620:	202290fa 	slli	r17,r4,3
 8028624:	dcc00315 	stw	r19,12(sp)
 8028628:	4a41ffcc 	andi	r9,r9,2047
 802862c:	0101ffc4 	movi	r4,2047
 8028630:	2824d7fa 	srli	r18,r5,31
 8028634:	8401ffcc 	andi	r16,r16,2047
 8028638:	50c6b03a 	or	r3,r10,r3
 802863c:	380ed7fa 	srli	r7,r7,31
 8028640:	408ab03a 	or	r5,r8,r2
 8028644:	300c90fa 	slli	r6,r6,3
 8028648:	49009626 	beq	r9,r4,80288a4 <__subdf3+0x2c0>
 802864c:	39c0005c 	xori	r7,r7,1
 8028650:	8245c83a 	sub	r2,r16,r9
 8028654:	3c807426 	beq	r7,r18,8028828 <__subdf3+0x244>
 8028658:	0080af0e 	bge	zero,r2,8028918 <__subdf3+0x334>
 802865c:	48002a1e 	bne	r9,zero,8028708 <__subdf3+0x124>
 8028660:	2988b03a 	or	r4,r5,r6
 8028664:	20009a1e 	bne	r4,zero,80288d0 <__subdf3+0x2ec>
 8028668:	888001cc 	andi	r2,r17,7
 802866c:	10000726 	beq	r2,zero,802868c <__subdf3+0xa8>
 8028670:	888003cc 	andi	r2,r17,15
 8028674:	01000104 	movi	r4,4
 8028678:	11000426 	beq	r2,r4,802868c <__subdf3+0xa8>
 802867c:	890b883a 	add	r5,r17,r4
 8028680:	2c63803a 	cmpltu	r17,r5,r17
 8028684:	1c47883a 	add	r3,r3,r17
 8028688:	2823883a 	mov	r17,r5
 802868c:	1880202c 	andhi	r2,r3,128
 8028690:	10005926 	beq	r2,zero,80287f8 <__subdf3+0x214>
 8028694:	84000044 	addi	r16,r16,1
 8028698:	0081ffc4 	movi	r2,2047
 802869c:	8080be26 	beq	r16,r2,8028998 <__subdf3+0x3b4>
 80286a0:	017fe034 	movhi	r5,65408
 80286a4:	297fffc4 	addi	r5,r5,-1
 80286a8:	1946703a 	and	r3,r3,r5
 80286ac:	1804977a 	slli	r2,r3,29
 80286b0:	1806927a 	slli	r3,r3,9
 80286b4:	8822d0fa 	srli	r17,r17,3
 80286b8:	8401ffcc 	andi	r16,r16,2047
 80286bc:	180ad33a 	srli	r5,r3,12
 80286c0:	9100004c 	andi	r4,r18,1
 80286c4:	1444b03a 	or	r2,r2,r17
 80286c8:	80c1ffcc 	andi	r3,r16,2047
 80286cc:	1820953a 	slli	r16,r3,20
 80286d0:	20c03fcc 	andi	r3,r4,255
 80286d4:	180897fa 	slli	r4,r3,31
 80286d8:	00c00434 	movhi	r3,16
 80286dc:	18ffffc4 	addi	r3,r3,-1
 80286e0:	28c6703a 	and	r3,r5,r3
 80286e4:	1c06b03a 	or	r3,r3,r16
 80286e8:	1906b03a 	or	r3,r3,r4
 80286ec:	dfc00417 	ldw	ra,16(sp)
 80286f0:	dcc00317 	ldw	r19,12(sp)
 80286f4:	dc800217 	ldw	r18,8(sp)
 80286f8:	dc400117 	ldw	r17,4(sp)
 80286fc:	dc000017 	ldw	r16,0(sp)
 8028700:	dec00504 	addi	sp,sp,20
 8028704:	f800283a 	ret
 8028708:	0101ffc4 	movi	r4,2047
 802870c:	813fd626 	beq	r16,r4,8028668 <_gp+0xfffe6f5c>
 8028710:	29402034 	orhi	r5,r5,128
 8028714:	01000e04 	movi	r4,56
 8028718:	2080a316 	blt	r4,r2,80289a8 <__subdf3+0x3c4>
 802871c:	010007c4 	movi	r4,31
 8028720:	2080c616 	blt	r4,r2,8028a3c <__subdf3+0x458>
 8028724:	01000804 	movi	r4,32
 8028728:	2089c83a 	sub	r4,r4,r2
 802872c:	2910983a 	sll	r8,r5,r4
 8028730:	308ed83a 	srl	r7,r6,r2
 8028734:	3108983a 	sll	r4,r6,r4
 8028738:	2884d83a 	srl	r2,r5,r2
 802873c:	41ccb03a 	or	r6,r8,r7
 8028740:	2008c03a 	cmpne	r4,r4,zero
 8028744:	310cb03a 	or	r6,r6,r4
 8028748:	898dc83a 	sub	r6,r17,r6
 802874c:	89a3803a 	cmpltu	r17,r17,r6
 8028750:	1887c83a 	sub	r3,r3,r2
 8028754:	1c47c83a 	sub	r3,r3,r17
 8028758:	3023883a 	mov	r17,r6
 802875c:	1880202c 	andhi	r2,r3,128
 8028760:	10002326 	beq	r2,zero,80287f0 <__subdf3+0x20c>
 8028764:	04c02034 	movhi	r19,128
 8028768:	9cffffc4 	addi	r19,r19,-1
 802876c:	1ce6703a 	and	r19,r3,r19
 8028770:	98007a26 	beq	r19,zero,802895c <__subdf3+0x378>
 8028774:	9809883a 	mov	r4,r19
 8028778:	802939c0 	call	802939c <__clzsi2>
 802877c:	113ffe04 	addi	r4,r2,-8
 8028780:	00c007c4 	movi	r3,31
 8028784:	19007b16 	blt	r3,r4,8028974 <__subdf3+0x390>
 8028788:	00800804 	movi	r2,32
 802878c:	1105c83a 	sub	r2,r2,r4
 8028790:	8884d83a 	srl	r2,r17,r2
 8028794:	9906983a 	sll	r3,r19,r4
 8028798:	8922983a 	sll	r17,r17,r4
 802879c:	10c4b03a 	or	r2,r2,r3
 80287a0:	24007816 	blt	r4,r16,8028984 <__subdf3+0x3a0>
 80287a4:	2421c83a 	sub	r16,r4,r16
 80287a8:	80c00044 	addi	r3,r16,1
 80287ac:	010007c4 	movi	r4,31
 80287b0:	20c09516 	blt	r4,r3,8028a08 <__subdf3+0x424>
 80287b4:	01400804 	movi	r5,32
 80287b8:	28cbc83a 	sub	r5,r5,r3
 80287bc:	88c8d83a 	srl	r4,r17,r3
 80287c0:	8962983a 	sll	r17,r17,r5
 80287c4:	114a983a 	sll	r5,r2,r5
 80287c8:	10c6d83a 	srl	r3,r2,r3
 80287cc:	8804c03a 	cmpne	r2,r17,zero
 80287d0:	290ab03a 	or	r5,r5,r4
 80287d4:	28a2b03a 	or	r17,r5,r2
 80287d8:	0021883a 	mov	r16,zero
 80287dc:	003fa206 	br	8028668 <_gp+0xfffe6f5c>
 80287e0:	2090b03a 	or	r8,r4,r2
 80287e4:	40018e26 	beq	r8,zero,8028e20 <__subdf3+0x83c>
 80287e8:	1007883a 	mov	r3,r2
 80287ec:	2023883a 	mov	r17,r4
 80287f0:	888001cc 	andi	r2,r17,7
 80287f4:	103f9e1e 	bne	r2,zero,8028670 <_gp+0xfffe6f64>
 80287f8:	1804977a 	slli	r2,r3,29
 80287fc:	8822d0fa 	srli	r17,r17,3
 8028800:	1810d0fa 	srli	r8,r3,3
 8028804:	9100004c 	andi	r4,r18,1
 8028808:	1444b03a 	or	r2,r2,r17
 802880c:	00c1ffc4 	movi	r3,2047
 8028810:	80c02826 	beq	r16,r3,80288b4 <__subdf3+0x2d0>
 8028814:	01400434 	movhi	r5,16
 8028818:	297fffc4 	addi	r5,r5,-1
 802881c:	80e0703a 	and	r16,r16,r3
 8028820:	414a703a 	and	r5,r8,r5
 8028824:	003fa806 	br	80286c8 <_gp+0xfffe6fbc>
 8028828:	0080630e 	bge	zero,r2,80289b8 <__subdf3+0x3d4>
 802882c:	48003026 	beq	r9,zero,80288f0 <__subdf3+0x30c>
 8028830:	0101ffc4 	movi	r4,2047
 8028834:	813f8c26 	beq	r16,r4,8028668 <_gp+0xfffe6f5c>
 8028838:	29402034 	orhi	r5,r5,128
 802883c:	01000e04 	movi	r4,56
 8028840:	2080a90e 	bge	r4,r2,8028ae8 <__subdf3+0x504>
 8028844:	298cb03a 	or	r6,r5,r6
 8028848:	3012c03a 	cmpne	r9,r6,zero
 802884c:	0005883a 	mov	r2,zero
 8028850:	4c53883a 	add	r9,r9,r17
 8028854:	4c63803a 	cmpltu	r17,r9,r17
 8028858:	10c7883a 	add	r3,r2,r3
 802885c:	88c7883a 	add	r3,r17,r3
 8028860:	4823883a 	mov	r17,r9
 8028864:	1880202c 	andhi	r2,r3,128
 8028868:	1000d026 	beq	r2,zero,8028bac <__subdf3+0x5c8>
 802886c:	84000044 	addi	r16,r16,1
 8028870:	0081ffc4 	movi	r2,2047
 8028874:	8080fe26 	beq	r16,r2,8028c70 <__subdf3+0x68c>
 8028878:	00bfe034 	movhi	r2,65408
 802887c:	10bfffc4 	addi	r2,r2,-1
 8028880:	1886703a 	and	r3,r3,r2
 8028884:	880ad07a 	srli	r5,r17,1
 8028888:	180497fa 	slli	r2,r3,31
 802888c:	8900004c 	andi	r4,r17,1
 8028890:	2922b03a 	or	r17,r5,r4
 8028894:	1806d07a 	srli	r3,r3,1
 8028898:	1462b03a 	or	r17,r2,r17
 802889c:	3825883a 	mov	r18,r7
 80288a0:	003f7106 	br	8028668 <_gp+0xfffe6f5c>
 80288a4:	2984b03a 	or	r2,r5,r6
 80288a8:	103f6826 	beq	r2,zero,802864c <_gp+0xfffe6f40>
 80288ac:	39c03fcc 	andi	r7,r7,255
 80288b0:	003f6706 	br	8028650 <_gp+0xfffe6f44>
 80288b4:	4086b03a 	or	r3,r8,r2
 80288b8:	18015226 	beq	r3,zero,8028e04 <__subdf3+0x820>
 80288bc:	00c00434 	movhi	r3,16
 80288c0:	41400234 	orhi	r5,r8,8
 80288c4:	18ffffc4 	addi	r3,r3,-1
 80288c8:	28ca703a 	and	r5,r5,r3
 80288cc:	003f7e06 	br	80286c8 <_gp+0xfffe6fbc>
 80288d0:	10bfffc4 	addi	r2,r2,-1
 80288d4:	1000491e 	bne	r2,zero,80289fc <__subdf3+0x418>
 80288d8:	898fc83a 	sub	r7,r17,r6
 80288dc:	89e3803a 	cmpltu	r17,r17,r7
 80288e0:	1947c83a 	sub	r3,r3,r5
 80288e4:	1c47c83a 	sub	r3,r3,r17
 80288e8:	3823883a 	mov	r17,r7
 80288ec:	003f9b06 	br	802875c <_gp+0xfffe7050>
 80288f0:	2988b03a 	or	r4,r5,r6
 80288f4:	203f5c26 	beq	r4,zero,8028668 <_gp+0xfffe6f5c>
 80288f8:	10bfffc4 	addi	r2,r2,-1
 80288fc:	1000931e 	bne	r2,zero,8028b4c <__subdf3+0x568>
 8028900:	898d883a 	add	r6,r17,r6
 8028904:	3463803a 	cmpltu	r17,r6,r17
 8028908:	1947883a 	add	r3,r3,r5
 802890c:	88c7883a 	add	r3,r17,r3
 8028910:	3023883a 	mov	r17,r6
 8028914:	003fd306 	br	8028864 <_gp+0xfffe7158>
 8028918:	1000541e 	bne	r2,zero,8028a6c <__subdf3+0x488>
 802891c:	80800044 	addi	r2,r16,1
 8028920:	1081ffcc 	andi	r2,r2,2047
 8028924:	01000044 	movi	r4,1
 8028928:	2080a20e 	bge	r4,r2,8028bb4 <__subdf3+0x5d0>
 802892c:	8989c83a 	sub	r4,r17,r6
 8028930:	8905803a 	cmpltu	r2,r17,r4
 8028934:	1967c83a 	sub	r19,r3,r5
 8028938:	98a7c83a 	sub	r19,r19,r2
 802893c:	9880202c 	andhi	r2,r19,128
 8028940:	10006326 	beq	r2,zero,8028ad0 <__subdf3+0x4ec>
 8028944:	3463c83a 	sub	r17,r6,r17
 8028948:	28c7c83a 	sub	r3,r5,r3
 802894c:	344d803a 	cmpltu	r6,r6,r17
 8028950:	19a7c83a 	sub	r19,r3,r6
 8028954:	3825883a 	mov	r18,r7
 8028958:	983f861e 	bne	r19,zero,8028774 <_gp+0xfffe7068>
 802895c:	8809883a 	mov	r4,r17
 8028960:	802939c0 	call	802939c <__clzsi2>
 8028964:	10800804 	addi	r2,r2,32
 8028968:	113ffe04 	addi	r4,r2,-8
 802896c:	00c007c4 	movi	r3,31
 8028970:	193f850e 	bge	r3,r4,8028788 <_gp+0xfffe707c>
 8028974:	10bff604 	addi	r2,r2,-40
 8028978:	8884983a 	sll	r2,r17,r2
 802897c:	0023883a 	mov	r17,zero
 8028980:	243f880e 	bge	r4,r16,80287a4 <_gp+0xfffe7098>
 8028984:	00ffe034 	movhi	r3,65408
 8028988:	18ffffc4 	addi	r3,r3,-1
 802898c:	8121c83a 	sub	r16,r16,r4
 8028990:	10c6703a 	and	r3,r2,r3
 8028994:	003f3406 	br	8028668 <_gp+0xfffe6f5c>
 8028998:	9100004c 	andi	r4,r18,1
 802899c:	000b883a 	mov	r5,zero
 80289a0:	0005883a 	mov	r2,zero
 80289a4:	003f4806 	br	80286c8 <_gp+0xfffe6fbc>
 80289a8:	298cb03a 	or	r6,r5,r6
 80289ac:	300cc03a 	cmpne	r6,r6,zero
 80289b0:	0005883a 	mov	r2,zero
 80289b4:	003f6406 	br	8028748 <_gp+0xfffe703c>
 80289b8:	10009a1e 	bne	r2,zero,8028c24 <__subdf3+0x640>
 80289bc:	82400044 	addi	r9,r16,1
 80289c0:	4881ffcc 	andi	r2,r9,2047
 80289c4:	02800044 	movi	r10,1
 80289c8:	5080670e 	bge	r10,r2,8028b68 <__subdf3+0x584>
 80289cc:	0081ffc4 	movi	r2,2047
 80289d0:	4880af26 	beq	r9,r2,8028c90 <__subdf3+0x6ac>
 80289d4:	898d883a 	add	r6,r17,r6
 80289d8:	1945883a 	add	r2,r3,r5
 80289dc:	3447803a 	cmpltu	r3,r6,r17
 80289e0:	1887883a 	add	r3,r3,r2
 80289e4:	182297fa 	slli	r17,r3,31
 80289e8:	300cd07a 	srli	r6,r6,1
 80289ec:	1806d07a 	srli	r3,r3,1
 80289f0:	4821883a 	mov	r16,r9
 80289f4:	89a2b03a 	or	r17,r17,r6
 80289f8:	003f1b06 	br	8028668 <_gp+0xfffe6f5c>
 80289fc:	0101ffc4 	movi	r4,2047
 8028a00:	813f441e 	bne	r16,r4,8028714 <_gp+0xfffe7008>
 8028a04:	003f1806 	br	8028668 <_gp+0xfffe6f5c>
 8028a08:	843ff844 	addi	r16,r16,-31
 8028a0c:	01400804 	movi	r5,32
 8028a10:	1408d83a 	srl	r4,r2,r16
 8028a14:	19405026 	beq	r3,r5,8028b58 <__subdf3+0x574>
 8028a18:	01401004 	movi	r5,64
 8028a1c:	28c7c83a 	sub	r3,r5,r3
 8028a20:	10c4983a 	sll	r2,r2,r3
 8028a24:	88a2b03a 	or	r17,r17,r2
 8028a28:	8822c03a 	cmpne	r17,r17,zero
 8028a2c:	2462b03a 	or	r17,r4,r17
 8028a30:	0007883a 	mov	r3,zero
 8028a34:	0021883a 	mov	r16,zero
 8028a38:	003f6d06 	br	80287f0 <_gp+0xfffe70e4>
 8028a3c:	11fff804 	addi	r7,r2,-32
 8028a40:	01000804 	movi	r4,32
 8028a44:	29ced83a 	srl	r7,r5,r7
 8028a48:	11004526 	beq	r2,r4,8028b60 <__subdf3+0x57c>
 8028a4c:	01001004 	movi	r4,64
 8028a50:	2089c83a 	sub	r4,r4,r2
 8028a54:	2904983a 	sll	r2,r5,r4
 8028a58:	118cb03a 	or	r6,r2,r6
 8028a5c:	300cc03a 	cmpne	r6,r6,zero
 8028a60:	398cb03a 	or	r6,r7,r6
 8028a64:	0005883a 	mov	r2,zero
 8028a68:	003f3706 	br	8028748 <_gp+0xfffe703c>
 8028a6c:	80002a26 	beq	r16,zero,8028b18 <__subdf3+0x534>
 8028a70:	0101ffc4 	movi	r4,2047
 8028a74:	49006626 	beq	r9,r4,8028c10 <__subdf3+0x62c>
 8028a78:	0085c83a 	sub	r2,zero,r2
 8028a7c:	18c02034 	orhi	r3,r3,128
 8028a80:	01000e04 	movi	r4,56
 8028a84:	20807e16 	blt	r4,r2,8028c80 <__subdf3+0x69c>
 8028a88:	010007c4 	movi	r4,31
 8028a8c:	2080e716 	blt	r4,r2,8028e2c <__subdf3+0x848>
 8028a90:	01000804 	movi	r4,32
 8028a94:	2089c83a 	sub	r4,r4,r2
 8028a98:	1914983a 	sll	r10,r3,r4
 8028a9c:	8890d83a 	srl	r8,r17,r2
 8028aa0:	8908983a 	sll	r4,r17,r4
 8028aa4:	1884d83a 	srl	r2,r3,r2
 8028aa8:	5222b03a 	or	r17,r10,r8
 8028aac:	2006c03a 	cmpne	r3,r4,zero
 8028ab0:	88e2b03a 	or	r17,r17,r3
 8028ab4:	3463c83a 	sub	r17,r6,r17
 8028ab8:	2885c83a 	sub	r2,r5,r2
 8028abc:	344d803a 	cmpltu	r6,r6,r17
 8028ac0:	1187c83a 	sub	r3,r2,r6
 8028ac4:	4821883a 	mov	r16,r9
 8028ac8:	3825883a 	mov	r18,r7
 8028acc:	003f2306 	br	802875c <_gp+0xfffe7050>
 8028ad0:	24d0b03a 	or	r8,r4,r19
 8028ad4:	40001b1e 	bne	r8,zero,8028b44 <__subdf3+0x560>
 8028ad8:	0005883a 	mov	r2,zero
 8028adc:	0009883a 	mov	r4,zero
 8028ae0:	0021883a 	mov	r16,zero
 8028ae4:	003f4906 	br	802880c <_gp+0xfffe7100>
 8028ae8:	010007c4 	movi	r4,31
 8028aec:	20803a16 	blt	r4,r2,8028bd8 <__subdf3+0x5f4>
 8028af0:	01000804 	movi	r4,32
 8028af4:	2089c83a 	sub	r4,r4,r2
 8028af8:	2912983a 	sll	r9,r5,r4
 8028afc:	3090d83a 	srl	r8,r6,r2
 8028b00:	3108983a 	sll	r4,r6,r4
 8028b04:	2884d83a 	srl	r2,r5,r2
 8028b08:	4a12b03a 	or	r9,r9,r8
 8028b0c:	2008c03a 	cmpne	r4,r4,zero
 8028b10:	4912b03a 	or	r9,r9,r4
 8028b14:	003f4e06 	br	8028850 <_gp+0xfffe7144>
 8028b18:	1c48b03a 	or	r4,r3,r17
 8028b1c:	20003c26 	beq	r4,zero,8028c10 <__subdf3+0x62c>
 8028b20:	0084303a 	nor	r2,zero,r2
 8028b24:	1000381e 	bne	r2,zero,8028c08 <__subdf3+0x624>
 8028b28:	3463c83a 	sub	r17,r6,r17
 8028b2c:	28c5c83a 	sub	r2,r5,r3
 8028b30:	344d803a 	cmpltu	r6,r6,r17
 8028b34:	1187c83a 	sub	r3,r2,r6
 8028b38:	4821883a 	mov	r16,r9
 8028b3c:	3825883a 	mov	r18,r7
 8028b40:	003f0606 	br	802875c <_gp+0xfffe7050>
 8028b44:	2023883a 	mov	r17,r4
 8028b48:	003f0906 	br	8028770 <_gp+0xfffe7064>
 8028b4c:	0101ffc4 	movi	r4,2047
 8028b50:	813f3a1e 	bne	r16,r4,802883c <_gp+0xfffe7130>
 8028b54:	003ec406 	br	8028668 <_gp+0xfffe6f5c>
 8028b58:	0005883a 	mov	r2,zero
 8028b5c:	003fb106 	br	8028a24 <_gp+0xfffe7318>
 8028b60:	0005883a 	mov	r2,zero
 8028b64:	003fbc06 	br	8028a58 <_gp+0xfffe734c>
 8028b68:	1c44b03a 	or	r2,r3,r17
 8028b6c:	80008e1e 	bne	r16,zero,8028da8 <__subdf3+0x7c4>
 8028b70:	1000c826 	beq	r2,zero,8028e94 <__subdf3+0x8b0>
 8028b74:	2984b03a 	or	r2,r5,r6
 8028b78:	103ebb26 	beq	r2,zero,8028668 <_gp+0xfffe6f5c>
 8028b7c:	8989883a 	add	r4,r17,r6
 8028b80:	1945883a 	add	r2,r3,r5
 8028b84:	2447803a 	cmpltu	r3,r4,r17
 8028b88:	1887883a 	add	r3,r3,r2
 8028b8c:	1880202c 	andhi	r2,r3,128
 8028b90:	2023883a 	mov	r17,r4
 8028b94:	103f1626 	beq	r2,zero,80287f0 <_gp+0xfffe70e4>
 8028b98:	00bfe034 	movhi	r2,65408
 8028b9c:	10bfffc4 	addi	r2,r2,-1
 8028ba0:	5021883a 	mov	r16,r10
 8028ba4:	1886703a 	and	r3,r3,r2
 8028ba8:	003eaf06 	br	8028668 <_gp+0xfffe6f5c>
 8028bac:	3825883a 	mov	r18,r7
 8028bb0:	003f0f06 	br	80287f0 <_gp+0xfffe70e4>
 8028bb4:	1c44b03a 	or	r2,r3,r17
 8028bb8:	8000251e 	bne	r16,zero,8028c50 <__subdf3+0x66c>
 8028bbc:	1000661e 	bne	r2,zero,8028d58 <__subdf3+0x774>
 8028bc0:	2990b03a 	or	r8,r5,r6
 8028bc4:	40009626 	beq	r8,zero,8028e20 <__subdf3+0x83c>
 8028bc8:	2807883a 	mov	r3,r5
 8028bcc:	3023883a 	mov	r17,r6
 8028bd0:	3825883a 	mov	r18,r7
 8028bd4:	003ea406 	br	8028668 <_gp+0xfffe6f5c>
 8028bd8:	127ff804 	addi	r9,r2,-32
 8028bdc:	01000804 	movi	r4,32
 8028be0:	2a52d83a 	srl	r9,r5,r9
 8028be4:	11008c26 	beq	r2,r4,8028e18 <__subdf3+0x834>
 8028be8:	01001004 	movi	r4,64
 8028bec:	2085c83a 	sub	r2,r4,r2
 8028bf0:	2884983a 	sll	r2,r5,r2
 8028bf4:	118cb03a 	or	r6,r2,r6
 8028bf8:	300cc03a 	cmpne	r6,r6,zero
 8028bfc:	4992b03a 	or	r9,r9,r6
 8028c00:	0005883a 	mov	r2,zero
 8028c04:	003f1206 	br	8028850 <_gp+0xfffe7144>
 8028c08:	0101ffc4 	movi	r4,2047
 8028c0c:	493f9c1e 	bne	r9,r4,8028a80 <_gp+0xfffe7374>
 8028c10:	2807883a 	mov	r3,r5
 8028c14:	3023883a 	mov	r17,r6
 8028c18:	4821883a 	mov	r16,r9
 8028c1c:	3825883a 	mov	r18,r7
 8028c20:	003e9106 	br	8028668 <_gp+0xfffe6f5c>
 8028c24:	80001f1e 	bne	r16,zero,8028ca4 <__subdf3+0x6c0>
 8028c28:	1c48b03a 	or	r4,r3,r17
 8028c2c:	20005a26 	beq	r4,zero,8028d98 <__subdf3+0x7b4>
 8028c30:	0084303a 	nor	r2,zero,r2
 8028c34:	1000561e 	bne	r2,zero,8028d90 <__subdf3+0x7ac>
 8028c38:	89a3883a 	add	r17,r17,r6
 8028c3c:	1945883a 	add	r2,r3,r5
 8028c40:	898d803a 	cmpltu	r6,r17,r6
 8028c44:	3087883a 	add	r3,r6,r2
 8028c48:	4821883a 	mov	r16,r9
 8028c4c:	003f0506 	br	8028864 <_gp+0xfffe7158>
 8028c50:	10002b1e 	bne	r2,zero,8028d00 <__subdf3+0x71c>
 8028c54:	2984b03a 	or	r2,r5,r6
 8028c58:	10008026 	beq	r2,zero,8028e5c <__subdf3+0x878>
 8028c5c:	2807883a 	mov	r3,r5
 8028c60:	3023883a 	mov	r17,r6
 8028c64:	3825883a 	mov	r18,r7
 8028c68:	0401ffc4 	movi	r16,2047
 8028c6c:	003e7e06 	br	8028668 <_gp+0xfffe6f5c>
 8028c70:	3809883a 	mov	r4,r7
 8028c74:	0011883a 	mov	r8,zero
 8028c78:	0005883a 	mov	r2,zero
 8028c7c:	003ee306 	br	802880c <_gp+0xfffe7100>
 8028c80:	1c62b03a 	or	r17,r3,r17
 8028c84:	8822c03a 	cmpne	r17,r17,zero
 8028c88:	0005883a 	mov	r2,zero
 8028c8c:	003f8906 	br	8028ab4 <_gp+0xfffe73a8>
 8028c90:	3809883a 	mov	r4,r7
 8028c94:	4821883a 	mov	r16,r9
 8028c98:	0011883a 	mov	r8,zero
 8028c9c:	0005883a 	mov	r2,zero
 8028ca0:	003eda06 	br	802880c <_gp+0xfffe7100>
 8028ca4:	0101ffc4 	movi	r4,2047
 8028ca8:	49003b26 	beq	r9,r4,8028d98 <__subdf3+0x7b4>
 8028cac:	0085c83a 	sub	r2,zero,r2
 8028cb0:	18c02034 	orhi	r3,r3,128
 8028cb4:	01000e04 	movi	r4,56
 8028cb8:	20806e16 	blt	r4,r2,8028e74 <__subdf3+0x890>
 8028cbc:	010007c4 	movi	r4,31
 8028cc0:	20807716 	blt	r4,r2,8028ea0 <__subdf3+0x8bc>
 8028cc4:	01000804 	movi	r4,32
 8028cc8:	2089c83a 	sub	r4,r4,r2
 8028ccc:	1914983a 	sll	r10,r3,r4
 8028cd0:	8890d83a 	srl	r8,r17,r2
 8028cd4:	8908983a 	sll	r4,r17,r4
 8028cd8:	1884d83a 	srl	r2,r3,r2
 8028cdc:	5222b03a 	or	r17,r10,r8
 8028ce0:	2006c03a 	cmpne	r3,r4,zero
 8028ce4:	88e2b03a 	or	r17,r17,r3
 8028ce8:	89a3883a 	add	r17,r17,r6
 8028cec:	1145883a 	add	r2,r2,r5
 8028cf0:	898d803a 	cmpltu	r6,r17,r6
 8028cf4:	3087883a 	add	r3,r6,r2
 8028cf8:	4821883a 	mov	r16,r9
 8028cfc:	003ed906 	br	8028864 <_gp+0xfffe7158>
 8028d00:	2984b03a 	or	r2,r5,r6
 8028d04:	10004226 	beq	r2,zero,8028e10 <__subdf3+0x82c>
 8028d08:	1808d0fa 	srli	r4,r3,3
 8028d0c:	8822d0fa 	srli	r17,r17,3
 8028d10:	1806977a 	slli	r3,r3,29
 8028d14:	2080022c 	andhi	r2,r4,8
 8028d18:	1c62b03a 	or	r17,r3,r17
 8028d1c:	10000826 	beq	r2,zero,8028d40 <__subdf3+0x75c>
 8028d20:	2812d0fa 	srli	r9,r5,3
 8028d24:	4880022c 	andhi	r2,r9,8
 8028d28:	1000051e 	bne	r2,zero,8028d40 <__subdf3+0x75c>
 8028d2c:	300cd0fa 	srli	r6,r6,3
 8028d30:	2804977a 	slli	r2,r5,29
 8028d34:	4809883a 	mov	r4,r9
 8028d38:	3825883a 	mov	r18,r7
 8028d3c:	11a2b03a 	or	r17,r2,r6
 8028d40:	8806d77a 	srli	r3,r17,29
 8028d44:	200890fa 	slli	r4,r4,3
 8028d48:	882290fa 	slli	r17,r17,3
 8028d4c:	0401ffc4 	movi	r16,2047
 8028d50:	1906b03a 	or	r3,r3,r4
 8028d54:	003e4406 	br	8028668 <_gp+0xfffe6f5c>
 8028d58:	2984b03a 	or	r2,r5,r6
 8028d5c:	103e4226 	beq	r2,zero,8028668 <_gp+0xfffe6f5c>
 8028d60:	8989c83a 	sub	r4,r17,r6
 8028d64:	8911803a 	cmpltu	r8,r17,r4
 8028d68:	1945c83a 	sub	r2,r3,r5
 8028d6c:	1205c83a 	sub	r2,r2,r8
 8028d70:	1200202c 	andhi	r8,r2,128
 8028d74:	403e9a26 	beq	r8,zero,80287e0 <_gp+0xfffe70d4>
 8028d78:	3463c83a 	sub	r17,r6,r17
 8028d7c:	28c5c83a 	sub	r2,r5,r3
 8028d80:	344d803a 	cmpltu	r6,r6,r17
 8028d84:	1187c83a 	sub	r3,r2,r6
 8028d88:	3825883a 	mov	r18,r7
 8028d8c:	003e3606 	br	8028668 <_gp+0xfffe6f5c>
 8028d90:	0101ffc4 	movi	r4,2047
 8028d94:	493fc71e 	bne	r9,r4,8028cb4 <_gp+0xfffe75a8>
 8028d98:	2807883a 	mov	r3,r5
 8028d9c:	3023883a 	mov	r17,r6
 8028da0:	4821883a 	mov	r16,r9
 8028da4:	003e3006 	br	8028668 <_gp+0xfffe6f5c>
 8028da8:	10003626 	beq	r2,zero,8028e84 <__subdf3+0x8a0>
 8028dac:	2984b03a 	or	r2,r5,r6
 8028db0:	10001726 	beq	r2,zero,8028e10 <__subdf3+0x82c>
 8028db4:	1808d0fa 	srli	r4,r3,3
 8028db8:	8822d0fa 	srli	r17,r17,3
 8028dbc:	1806977a 	slli	r3,r3,29
 8028dc0:	2080022c 	andhi	r2,r4,8
 8028dc4:	1c62b03a 	or	r17,r3,r17
 8028dc8:	10000726 	beq	r2,zero,8028de8 <__subdf3+0x804>
 8028dcc:	2812d0fa 	srli	r9,r5,3
 8028dd0:	4880022c 	andhi	r2,r9,8
 8028dd4:	1000041e 	bne	r2,zero,8028de8 <__subdf3+0x804>
 8028dd8:	300cd0fa 	srli	r6,r6,3
 8028ddc:	2804977a 	slli	r2,r5,29
 8028de0:	4809883a 	mov	r4,r9
 8028de4:	11a2b03a 	or	r17,r2,r6
 8028de8:	8806d77a 	srli	r3,r17,29
 8028dec:	200890fa 	slli	r4,r4,3
 8028df0:	882290fa 	slli	r17,r17,3
 8028df4:	3825883a 	mov	r18,r7
 8028df8:	1906b03a 	or	r3,r3,r4
 8028dfc:	0401ffc4 	movi	r16,2047
 8028e00:	003e1906 	br	8028668 <_gp+0xfffe6f5c>
 8028e04:	000b883a 	mov	r5,zero
 8028e08:	0005883a 	mov	r2,zero
 8028e0c:	003e2e06 	br	80286c8 <_gp+0xfffe6fbc>
 8028e10:	0401ffc4 	movi	r16,2047
 8028e14:	003e1406 	br	8028668 <_gp+0xfffe6f5c>
 8028e18:	0005883a 	mov	r2,zero
 8028e1c:	003f7506 	br	8028bf4 <_gp+0xfffe74e8>
 8028e20:	0005883a 	mov	r2,zero
 8028e24:	0009883a 	mov	r4,zero
 8028e28:	003e7806 	br	802880c <_gp+0xfffe7100>
 8028e2c:	123ff804 	addi	r8,r2,-32
 8028e30:	01000804 	movi	r4,32
 8028e34:	1a10d83a 	srl	r8,r3,r8
 8028e38:	11002526 	beq	r2,r4,8028ed0 <__subdf3+0x8ec>
 8028e3c:	01001004 	movi	r4,64
 8028e40:	2085c83a 	sub	r2,r4,r2
 8028e44:	1884983a 	sll	r2,r3,r2
 8028e48:	1444b03a 	or	r2,r2,r17
 8028e4c:	1004c03a 	cmpne	r2,r2,zero
 8028e50:	40a2b03a 	or	r17,r8,r2
 8028e54:	0005883a 	mov	r2,zero
 8028e58:	003f1606 	br	8028ab4 <_gp+0xfffe73a8>
 8028e5c:	02000434 	movhi	r8,16
 8028e60:	0009883a 	mov	r4,zero
 8028e64:	423fffc4 	addi	r8,r8,-1
 8028e68:	00bfffc4 	movi	r2,-1
 8028e6c:	0401ffc4 	movi	r16,2047
 8028e70:	003e6606 	br	802880c <_gp+0xfffe7100>
 8028e74:	1c62b03a 	or	r17,r3,r17
 8028e78:	8822c03a 	cmpne	r17,r17,zero
 8028e7c:	0005883a 	mov	r2,zero
 8028e80:	003f9906 	br	8028ce8 <_gp+0xfffe75dc>
 8028e84:	2807883a 	mov	r3,r5
 8028e88:	3023883a 	mov	r17,r6
 8028e8c:	0401ffc4 	movi	r16,2047
 8028e90:	003df506 	br	8028668 <_gp+0xfffe6f5c>
 8028e94:	2807883a 	mov	r3,r5
 8028e98:	3023883a 	mov	r17,r6
 8028e9c:	003df206 	br	8028668 <_gp+0xfffe6f5c>
 8028ea0:	123ff804 	addi	r8,r2,-32
 8028ea4:	01000804 	movi	r4,32
 8028ea8:	1a10d83a 	srl	r8,r3,r8
 8028eac:	11000a26 	beq	r2,r4,8028ed8 <__subdf3+0x8f4>
 8028eb0:	01001004 	movi	r4,64
 8028eb4:	2085c83a 	sub	r2,r4,r2
 8028eb8:	1884983a 	sll	r2,r3,r2
 8028ebc:	1444b03a 	or	r2,r2,r17
 8028ec0:	1004c03a 	cmpne	r2,r2,zero
 8028ec4:	40a2b03a 	or	r17,r8,r2
 8028ec8:	0005883a 	mov	r2,zero
 8028ecc:	003f8606 	br	8028ce8 <_gp+0xfffe75dc>
 8028ed0:	0005883a 	mov	r2,zero
 8028ed4:	003fdc06 	br	8028e48 <_gp+0xfffe773c>
 8028ed8:	0005883a 	mov	r2,zero
 8028edc:	003ff706 	br	8028ebc <_gp+0xfffe77b0>

08028ee0 <__fixdfsi>:
 8028ee0:	280cd53a 	srli	r6,r5,20
 8028ee4:	00c00434 	movhi	r3,16
 8028ee8:	18ffffc4 	addi	r3,r3,-1
 8028eec:	3181ffcc 	andi	r6,r6,2047
 8028ef0:	01c0ff84 	movi	r7,1022
 8028ef4:	28c6703a 	and	r3,r5,r3
 8028ef8:	280ad7fa 	srli	r5,r5,31
 8028efc:	3980120e 	bge	r7,r6,8028f48 <__fixdfsi+0x68>
 8028f00:	00810744 	movi	r2,1053
 8028f04:	11800c16 	blt	r2,r6,8028f38 <__fixdfsi+0x58>
 8028f08:	00810cc4 	movi	r2,1075
 8028f0c:	1185c83a 	sub	r2,r2,r6
 8028f10:	01c007c4 	movi	r7,31
 8028f14:	18c00434 	orhi	r3,r3,16
 8028f18:	38800d16 	blt	r7,r2,8028f50 <__fixdfsi+0x70>
 8028f1c:	31befb44 	addi	r6,r6,-1043
 8028f20:	2084d83a 	srl	r2,r4,r2
 8028f24:	1986983a 	sll	r3,r3,r6
 8028f28:	1884b03a 	or	r2,r3,r2
 8028f2c:	28000726 	beq	r5,zero,8028f4c <__fixdfsi+0x6c>
 8028f30:	0085c83a 	sub	r2,zero,r2
 8028f34:	f800283a 	ret
 8028f38:	00a00034 	movhi	r2,32768
 8028f3c:	10bfffc4 	addi	r2,r2,-1
 8028f40:	2885883a 	add	r2,r5,r2
 8028f44:	f800283a 	ret
 8028f48:	0005883a 	mov	r2,zero
 8028f4c:	f800283a 	ret
 8028f50:	008104c4 	movi	r2,1043
 8028f54:	1185c83a 	sub	r2,r2,r6
 8028f58:	1884d83a 	srl	r2,r3,r2
 8028f5c:	003ff306 	br	8028f2c <_gp+0xfffe7820>

08028f60 <__floatsidf>:
 8028f60:	defffd04 	addi	sp,sp,-12
 8028f64:	dfc00215 	stw	ra,8(sp)
 8028f68:	dc400115 	stw	r17,4(sp)
 8028f6c:	dc000015 	stw	r16,0(sp)
 8028f70:	20002b26 	beq	r4,zero,8029020 <__floatsidf+0xc0>
 8028f74:	2023883a 	mov	r17,r4
 8028f78:	2020d7fa 	srli	r16,r4,31
 8028f7c:	20002d16 	blt	r4,zero,8029034 <__floatsidf+0xd4>
 8028f80:	8809883a 	mov	r4,r17
 8028f84:	802939c0 	call	802939c <__clzsi2>
 8028f88:	01410784 	movi	r5,1054
 8028f8c:	288bc83a 	sub	r5,r5,r2
 8028f90:	01010cc4 	movi	r4,1075
 8028f94:	2149c83a 	sub	r4,r4,r5
 8028f98:	00c007c4 	movi	r3,31
 8028f9c:	1900160e 	bge	r3,r4,8028ff8 <__floatsidf+0x98>
 8028fa0:	00c104c4 	movi	r3,1043
 8028fa4:	1947c83a 	sub	r3,r3,r5
 8028fa8:	88c6983a 	sll	r3,r17,r3
 8028fac:	00800434 	movhi	r2,16
 8028fb0:	10bfffc4 	addi	r2,r2,-1
 8028fb4:	1886703a 	and	r3,r3,r2
 8028fb8:	2941ffcc 	andi	r5,r5,2047
 8028fbc:	800d883a 	mov	r6,r16
 8028fc0:	0005883a 	mov	r2,zero
 8028fc4:	280a953a 	slli	r5,r5,20
 8028fc8:	31803fcc 	andi	r6,r6,255
 8028fcc:	01000434 	movhi	r4,16
 8028fd0:	300c97fa 	slli	r6,r6,31
 8028fd4:	213fffc4 	addi	r4,r4,-1
 8028fd8:	1906703a 	and	r3,r3,r4
 8028fdc:	1946b03a 	or	r3,r3,r5
 8028fe0:	1986b03a 	or	r3,r3,r6
 8028fe4:	dfc00217 	ldw	ra,8(sp)
 8028fe8:	dc400117 	ldw	r17,4(sp)
 8028fec:	dc000017 	ldw	r16,0(sp)
 8028ff0:	dec00304 	addi	sp,sp,12
 8028ff4:	f800283a 	ret
 8028ff8:	00c002c4 	movi	r3,11
 8028ffc:	1887c83a 	sub	r3,r3,r2
 8029000:	88c6d83a 	srl	r3,r17,r3
 8029004:	8904983a 	sll	r2,r17,r4
 8029008:	01000434 	movhi	r4,16
 802900c:	213fffc4 	addi	r4,r4,-1
 8029010:	2941ffcc 	andi	r5,r5,2047
 8029014:	1906703a 	and	r3,r3,r4
 8029018:	800d883a 	mov	r6,r16
 802901c:	003fe906 	br	8028fc4 <_gp+0xfffe78b8>
 8029020:	000d883a 	mov	r6,zero
 8029024:	000b883a 	mov	r5,zero
 8029028:	0007883a 	mov	r3,zero
 802902c:	0005883a 	mov	r2,zero
 8029030:	003fe406 	br	8028fc4 <_gp+0xfffe78b8>
 8029034:	0123c83a 	sub	r17,zero,r4
 8029038:	003fd106 	br	8028f80 <_gp+0xfffe7874>

0802903c <__floatunsidf>:
 802903c:	defffe04 	addi	sp,sp,-8
 8029040:	dc000015 	stw	r16,0(sp)
 8029044:	dfc00115 	stw	ra,4(sp)
 8029048:	2021883a 	mov	r16,r4
 802904c:	20002226 	beq	r4,zero,80290d8 <__floatunsidf+0x9c>
 8029050:	802939c0 	call	802939c <__clzsi2>
 8029054:	01010784 	movi	r4,1054
 8029058:	2089c83a 	sub	r4,r4,r2
 802905c:	01810cc4 	movi	r6,1075
 8029060:	310dc83a 	sub	r6,r6,r4
 8029064:	00c007c4 	movi	r3,31
 8029068:	1980120e 	bge	r3,r6,80290b4 <__floatunsidf+0x78>
 802906c:	00c104c4 	movi	r3,1043
 8029070:	1907c83a 	sub	r3,r3,r4
 8029074:	80ca983a 	sll	r5,r16,r3
 8029078:	00800434 	movhi	r2,16
 802907c:	10bfffc4 	addi	r2,r2,-1
 8029080:	2101ffcc 	andi	r4,r4,2047
 8029084:	0021883a 	mov	r16,zero
 8029088:	288a703a 	and	r5,r5,r2
 802908c:	2008953a 	slli	r4,r4,20
 8029090:	00c00434 	movhi	r3,16
 8029094:	18ffffc4 	addi	r3,r3,-1
 8029098:	28c6703a 	and	r3,r5,r3
 802909c:	8005883a 	mov	r2,r16
 80290a0:	1906b03a 	or	r3,r3,r4
 80290a4:	dfc00117 	ldw	ra,4(sp)
 80290a8:	dc000017 	ldw	r16,0(sp)
 80290ac:	dec00204 	addi	sp,sp,8
 80290b0:	f800283a 	ret
 80290b4:	00c002c4 	movi	r3,11
 80290b8:	188bc83a 	sub	r5,r3,r2
 80290bc:	814ad83a 	srl	r5,r16,r5
 80290c0:	00c00434 	movhi	r3,16
 80290c4:	18ffffc4 	addi	r3,r3,-1
 80290c8:	81a0983a 	sll	r16,r16,r6
 80290cc:	2101ffcc 	andi	r4,r4,2047
 80290d0:	28ca703a 	and	r5,r5,r3
 80290d4:	003fed06 	br	802908c <_gp+0xfffe7980>
 80290d8:	0009883a 	mov	r4,zero
 80290dc:	000b883a 	mov	r5,zero
 80290e0:	003fea06 	br	802908c <_gp+0xfffe7980>

080290e4 <__extendsfdf2>:
 80290e4:	200ad5fa 	srli	r5,r4,23
 80290e8:	defffd04 	addi	sp,sp,-12
 80290ec:	dc400115 	stw	r17,4(sp)
 80290f0:	29403fcc 	andi	r5,r5,255
 80290f4:	29800044 	addi	r6,r5,1
 80290f8:	04402034 	movhi	r17,128
 80290fc:	dc000015 	stw	r16,0(sp)
 8029100:	8c7fffc4 	addi	r17,r17,-1
 8029104:	dfc00215 	stw	ra,8(sp)
 8029108:	31803fcc 	andi	r6,r6,255
 802910c:	00800044 	movi	r2,1
 8029110:	8922703a 	and	r17,r17,r4
 8029114:	2020d7fa 	srli	r16,r4,31
 8029118:	1180110e 	bge	r2,r6,8029160 <__extendsfdf2+0x7c>
 802911c:	880cd0fa 	srli	r6,r17,3
 8029120:	8822977a 	slli	r17,r17,29
 8029124:	2940e004 	addi	r5,r5,896
 8029128:	2941ffcc 	andi	r5,r5,2047
 802912c:	2804953a 	slli	r2,r5,20
 8029130:	01400434 	movhi	r5,16
 8029134:	800697fa 	slli	r3,r16,31
 8029138:	297fffc4 	addi	r5,r5,-1
 802913c:	314a703a 	and	r5,r6,r5
 8029140:	288ab03a 	or	r5,r5,r2
 8029144:	28c6b03a 	or	r3,r5,r3
 8029148:	8805883a 	mov	r2,r17
 802914c:	dfc00217 	ldw	ra,8(sp)
 8029150:	dc400117 	ldw	r17,4(sp)
 8029154:	dc000017 	ldw	r16,0(sp)
 8029158:	dec00304 	addi	sp,sp,12
 802915c:	f800283a 	ret
 8029160:	2800111e 	bne	r5,zero,80291a8 <__extendsfdf2+0xc4>
 8029164:	88001c26 	beq	r17,zero,80291d8 <__extendsfdf2+0xf4>
 8029168:	8809883a 	mov	r4,r17
 802916c:	802939c0 	call	802939c <__clzsi2>
 8029170:	00c00284 	movi	r3,10
 8029174:	18801b16 	blt	r3,r2,80291e4 <__extendsfdf2+0x100>
 8029178:	018002c4 	movi	r6,11
 802917c:	308dc83a 	sub	r6,r6,r2
 8029180:	11000544 	addi	r4,r2,21
 8029184:	8986d83a 	srl	r3,r17,r6
 8029188:	8922983a 	sll	r17,r17,r4
 802918c:	0180e244 	movi	r6,905
 8029190:	01400434 	movhi	r5,16
 8029194:	3085c83a 	sub	r2,r6,r2
 8029198:	297fffc4 	addi	r5,r5,-1
 802919c:	194c703a 	and	r6,r3,r5
 80291a0:	1141ffcc 	andi	r5,r2,2047
 80291a4:	003fe006 	br	8029128 <_gp+0xfffe7a1c>
 80291a8:	88000826 	beq	r17,zero,80291cc <__extendsfdf2+0xe8>
 80291ac:	880cd0fa 	srli	r6,r17,3
 80291b0:	00800434 	movhi	r2,16
 80291b4:	10bfffc4 	addi	r2,r2,-1
 80291b8:	31800234 	orhi	r6,r6,8
 80291bc:	8822977a 	slli	r17,r17,29
 80291c0:	308c703a 	and	r6,r6,r2
 80291c4:	0141ffc4 	movi	r5,2047
 80291c8:	003fd706 	br	8029128 <_gp+0xfffe7a1c>
 80291cc:	0141ffc4 	movi	r5,2047
 80291d0:	000d883a 	mov	r6,zero
 80291d4:	003fd406 	br	8029128 <_gp+0xfffe7a1c>
 80291d8:	000b883a 	mov	r5,zero
 80291dc:	000d883a 	mov	r6,zero
 80291e0:	003fd106 	br	8029128 <_gp+0xfffe7a1c>
 80291e4:	11bffd44 	addi	r6,r2,-11
 80291e8:	8986983a 	sll	r3,r17,r6
 80291ec:	0023883a 	mov	r17,zero
 80291f0:	003fe606 	br	802918c <_gp+0xfffe7a80>

080291f4 <__truncdfsf2>:
 80291f4:	2810d53a 	srli	r8,r5,20
 80291f8:	01c00434 	movhi	r7,16
 80291fc:	39ffffc4 	addi	r7,r7,-1
 8029200:	29ce703a 	and	r7,r5,r7
 8029204:	4201ffcc 	andi	r8,r8,2047
 8029208:	380e90fa 	slli	r7,r7,3
 802920c:	200cd77a 	srli	r6,r4,29
 8029210:	42400044 	addi	r9,r8,1
 8029214:	4a41ffcc 	andi	r9,r9,2047
 8029218:	00c00044 	movi	r3,1
 802921c:	280ad7fa 	srli	r5,r5,31
 8029220:	31ceb03a 	or	r7,r6,r7
 8029224:	200490fa 	slli	r2,r4,3
 8029228:	1a40230e 	bge	r3,r9,80292b8 <__truncdfsf2+0xc4>
 802922c:	40ff2004 	addi	r3,r8,-896
 8029230:	01803f84 	movi	r6,254
 8029234:	30c01516 	blt	r6,r3,802928c <__truncdfsf2+0x98>
 8029238:	00c0380e 	bge	zero,r3,802931c <__truncdfsf2+0x128>
 802923c:	200c91ba 	slli	r6,r4,6
 8029240:	380e90fa 	slli	r7,r7,3
 8029244:	1004d77a 	srli	r2,r2,29
 8029248:	300cc03a 	cmpne	r6,r6,zero
 802924c:	31ccb03a 	or	r6,r6,r7
 8029250:	308cb03a 	or	r6,r6,r2
 8029254:	308001cc 	andi	r2,r6,7
 8029258:	10000426 	beq	r2,zero,802926c <__truncdfsf2+0x78>
 802925c:	308003cc 	andi	r2,r6,15
 8029260:	01000104 	movi	r4,4
 8029264:	11000126 	beq	r2,r4,802926c <__truncdfsf2+0x78>
 8029268:	31800104 	addi	r6,r6,4
 802926c:	3081002c 	andhi	r2,r6,1024
 8029270:	10001626 	beq	r2,zero,80292cc <__truncdfsf2+0xd8>
 8029274:	18c00044 	addi	r3,r3,1
 8029278:	00803fc4 	movi	r2,255
 802927c:	18800326 	beq	r3,r2,802928c <__truncdfsf2+0x98>
 8029280:	300c91ba 	slli	r6,r6,6
 8029284:	300cd27a 	srli	r6,r6,9
 8029288:	00000206 	br	8029294 <__truncdfsf2+0xa0>
 802928c:	00ffffc4 	movi	r3,-1
 8029290:	000d883a 	mov	r6,zero
 8029294:	18c03fcc 	andi	r3,r3,255
 8029298:	180895fa 	slli	r4,r3,23
 802929c:	00c02034 	movhi	r3,128
 80292a0:	280a97fa 	slli	r5,r5,31
 80292a4:	18ffffc4 	addi	r3,r3,-1
 80292a8:	30c6703a 	and	r3,r6,r3
 80292ac:	1906b03a 	or	r3,r3,r4
 80292b0:	1944b03a 	or	r2,r3,r5
 80292b4:	f800283a 	ret
 80292b8:	40000b1e 	bne	r8,zero,80292e8 <__truncdfsf2+0xf4>
 80292bc:	388cb03a 	or	r6,r7,r2
 80292c0:	0007883a 	mov	r3,zero
 80292c4:	30000426 	beq	r6,zero,80292d8 <__truncdfsf2+0xe4>
 80292c8:	01800144 	movi	r6,5
 80292cc:	00803fc4 	movi	r2,255
 80292d0:	300cd0fa 	srli	r6,r6,3
 80292d4:	18800a26 	beq	r3,r2,8029300 <__truncdfsf2+0x10c>
 80292d8:	00802034 	movhi	r2,128
 80292dc:	10bfffc4 	addi	r2,r2,-1
 80292e0:	308c703a 	and	r6,r6,r2
 80292e4:	003feb06 	br	8029294 <_gp+0xfffe7b88>
 80292e8:	3888b03a 	or	r4,r7,r2
 80292ec:	203fe726 	beq	r4,zero,802928c <_gp+0xfffe7b80>
 80292f0:	380c90fa 	slli	r6,r7,3
 80292f4:	00c03fc4 	movi	r3,255
 80292f8:	31808034 	orhi	r6,r6,512
 80292fc:	003fd506 	br	8029254 <_gp+0xfffe7b48>
 8029300:	303fe226 	beq	r6,zero,802928c <_gp+0xfffe7b80>
 8029304:	00802034 	movhi	r2,128
 8029308:	31801034 	orhi	r6,r6,64
 802930c:	10bfffc4 	addi	r2,r2,-1
 8029310:	00ffffc4 	movi	r3,-1
 8029314:	308c703a 	and	r6,r6,r2
 8029318:	003fde06 	br	8029294 <_gp+0xfffe7b88>
 802931c:	013ffa44 	movi	r4,-23
 8029320:	19000e16 	blt	r3,r4,802935c <__truncdfsf2+0x168>
 8029324:	01000784 	movi	r4,30
 8029328:	20c9c83a 	sub	r4,r4,r3
 802932c:	018007c4 	movi	r6,31
 8029330:	39c02034 	orhi	r7,r7,128
 8029334:	31000b16 	blt	r6,r4,8029364 <__truncdfsf2+0x170>
 8029338:	423f2084 	addi	r8,r8,-894
 802933c:	120c983a 	sll	r6,r2,r8
 8029340:	3a0e983a 	sll	r7,r7,r8
 8029344:	1104d83a 	srl	r2,r2,r4
 8029348:	300cc03a 	cmpne	r6,r6,zero
 802934c:	31ceb03a 	or	r7,r6,r7
 8029350:	388cb03a 	or	r6,r7,r2
 8029354:	0007883a 	mov	r3,zero
 8029358:	003fbe06 	br	8029254 <_gp+0xfffe7b48>
 802935c:	0007883a 	mov	r3,zero
 8029360:	003fd906 	br	80292c8 <_gp+0xfffe7bbc>
 8029364:	01bfff84 	movi	r6,-2
 8029368:	30cdc83a 	sub	r6,r6,r3
 802936c:	00c00804 	movi	r3,32
 8029370:	398cd83a 	srl	r6,r7,r6
 8029374:	20c00726 	beq	r4,r3,8029394 <__truncdfsf2+0x1a0>
 8029378:	423f2884 	addi	r8,r8,-862
 802937c:	3a0e983a 	sll	r7,r7,r8
 8029380:	3884b03a 	or	r2,r7,r2
 8029384:	1004c03a 	cmpne	r2,r2,zero
 8029388:	118cb03a 	or	r6,r2,r6
 802938c:	0007883a 	mov	r3,zero
 8029390:	003fb006 	br	8029254 <_gp+0xfffe7b48>
 8029394:	000f883a 	mov	r7,zero
 8029398:	003ff906 	br	8029380 <_gp+0xfffe7c74>

0802939c <__clzsi2>:
 802939c:	00bfffd4 	movui	r2,65535
 80293a0:	11000536 	bltu	r2,r4,80293b8 <__clzsi2+0x1c>
 80293a4:	00803fc4 	movi	r2,255
 80293a8:	11000f36 	bltu	r2,r4,80293e8 <__clzsi2+0x4c>
 80293ac:	00800804 	movi	r2,32
 80293b0:	0007883a 	mov	r3,zero
 80293b4:	00000506 	br	80293cc <__clzsi2+0x30>
 80293b8:	00804034 	movhi	r2,256
 80293bc:	10bfffc4 	addi	r2,r2,-1
 80293c0:	11000c2e 	bgeu	r2,r4,80293f4 <__clzsi2+0x58>
 80293c4:	00800204 	movi	r2,8
 80293c8:	00c00604 	movi	r3,24
 80293cc:	20c8d83a 	srl	r4,r4,r3
 80293d0:	00c200f4 	movhi	r3,2051
 80293d4:	18dde904 	addi	r3,r3,30628
 80293d8:	1909883a 	add	r4,r3,r4
 80293dc:	20c00003 	ldbu	r3,0(r4)
 80293e0:	10c5c83a 	sub	r2,r2,r3
 80293e4:	f800283a 	ret
 80293e8:	00800604 	movi	r2,24
 80293ec:	00c00204 	movi	r3,8
 80293f0:	003ff606 	br	80293cc <_gp+0xfffe7cc0>
 80293f4:	00800404 	movi	r2,16
 80293f8:	1007883a 	mov	r3,r2
 80293fc:	003ff306 	br	80293cc <_gp+0xfffe7cc0>

08029400 <__errno>:
 8029400:	00820134 	movhi	r2,2052
 8029404:	10a5c504 	addi	r2,r2,-26860
 8029408:	10800017 	ldw	r2,0(r2)
 802940c:	f800283a 	ret

08029410 <exit>:
 8029410:	defffe04 	addi	sp,sp,-8
 8029414:	000b883a 	mov	r5,zero
 8029418:	dc000015 	stw	r16,0(sp)
 802941c:	dfc00115 	stw	ra,4(sp)
 8029420:	2021883a 	mov	r16,r4
 8029424:	802c4140 	call	802c414 <__call_exitprocs>
 8029428:	00820134 	movhi	r2,2052
 802942c:	10a5c404 	addi	r2,r2,-26864
 8029430:	11000017 	ldw	r4,0(r2)
 8029434:	20800f17 	ldw	r2,60(r4)
 8029438:	10000126 	beq	r2,zero,8029440 <exit+0x30>
 802943c:	103ee83a 	callr	r2
 8029440:	8009883a 	mov	r4,r16
 8029444:	80337b80 	call	80337b8 <_exit>

08029448 <malloc>:
 8029448:	00820134 	movhi	r2,2052
 802944c:	10a5c504 	addi	r2,r2,-26860
 8029450:	200b883a 	mov	r5,r4
 8029454:	11000017 	ldw	r4,0(r2)
 8029458:	80294701 	jmpi	8029470 <_malloc_r>

0802945c <free>:
 802945c:	00820134 	movhi	r2,2052
 8029460:	10a5c504 	addi	r2,r2,-26860
 8029464:	200b883a 	mov	r5,r4
 8029468:	11000017 	ldw	r4,0(r2)
 802946c:	802e5881 	jmpi	802e588 <_free_r>

08029470 <_malloc_r>:
 8029470:	defff504 	addi	sp,sp,-44
 8029474:	dc800315 	stw	r18,12(sp)
 8029478:	dfc00a15 	stw	ra,40(sp)
 802947c:	df000915 	stw	fp,36(sp)
 8029480:	ddc00815 	stw	r23,32(sp)
 8029484:	dd800715 	stw	r22,28(sp)
 8029488:	dd400615 	stw	r21,24(sp)
 802948c:	dd000515 	stw	r20,20(sp)
 8029490:	dcc00415 	stw	r19,16(sp)
 8029494:	dc400215 	stw	r17,8(sp)
 8029498:	dc000115 	stw	r16,4(sp)
 802949c:	288002c4 	addi	r2,r5,11
 80294a0:	00c00584 	movi	r3,22
 80294a4:	2025883a 	mov	r18,r4
 80294a8:	18807f2e 	bgeu	r3,r2,80296a8 <_malloc_r+0x238>
 80294ac:	047ffe04 	movi	r17,-8
 80294b0:	1462703a 	and	r17,r2,r17
 80294b4:	8800a316 	blt	r17,zero,8029744 <_malloc_r+0x2d4>
 80294b8:	8940a236 	bltu	r17,r5,8029744 <_malloc_r+0x2d4>
 80294bc:	8033c300 	call	8033c30 <__malloc_lock>
 80294c0:	00807dc4 	movi	r2,503
 80294c4:	1441e92e 	bgeu	r2,r17,8029c6c <_malloc_r+0x7fc>
 80294c8:	8804d27a 	srli	r2,r17,9
 80294cc:	1000a126 	beq	r2,zero,8029754 <_malloc_r+0x2e4>
 80294d0:	00c00104 	movi	r3,4
 80294d4:	18811e36 	bltu	r3,r2,8029950 <_malloc_r+0x4e0>
 80294d8:	8804d1ba 	srli	r2,r17,6
 80294dc:	12000e44 	addi	r8,r2,57
 80294e0:	11c00e04 	addi	r7,r2,56
 80294e4:	4209883a 	add	r4,r8,r8
 80294e8:	04c200f4 	movhi	r19,2051
 80294ec:	2109883a 	add	r4,r4,r4
 80294f0:	9cdfc804 	addi	r19,r19,32544
 80294f4:	2109883a 	add	r4,r4,r4
 80294f8:	9909883a 	add	r4,r19,r4
 80294fc:	24000117 	ldw	r16,4(r4)
 8029500:	213ffe04 	addi	r4,r4,-8
 8029504:	24009726 	beq	r4,r16,8029764 <_malloc_r+0x2f4>
 8029508:	80800117 	ldw	r2,4(r16)
 802950c:	01bfff04 	movi	r6,-4
 8029510:	014003c4 	movi	r5,15
 8029514:	1184703a 	and	r2,r2,r6
 8029518:	1447c83a 	sub	r3,r2,r17
 802951c:	28c00716 	blt	r5,r3,802953c <_malloc_r+0xcc>
 8029520:	1800920e 	bge	r3,zero,802976c <_malloc_r+0x2fc>
 8029524:	84000317 	ldw	r16,12(r16)
 8029528:	24008e26 	beq	r4,r16,8029764 <_malloc_r+0x2f4>
 802952c:	80800117 	ldw	r2,4(r16)
 8029530:	1184703a 	and	r2,r2,r6
 8029534:	1447c83a 	sub	r3,r2,r17
 8029538:	28fff90e 	bge	r5,r3,8029520 <_gp+0xfffe7e14>
 802953c:	3809883a 	mov	r4,r7
 8029540:	018200f4 	movhi	r6,2051
 8029544:	9c000417 	ldw	r16,16(r19)
 8029548:	319fc804 	addi	r6,r6,32544
 802954c:	32000204 	addi	r8,r6,8
 8029550:	82013426 	beq	r16,r8,8029a24 <_malloc_r+0x5b4>
 8029554:	80c00117 	ldw	r3,4(r16)
 8029558:	00bfff04 	movi	r2,-4
 802955c:	188e703a 	and	r7,r3,r2
 8029560:	3c45c83a 	sub	r2,r7,r17
 8029564:	00c003c4 	movi	r3,15
 8029568:	18811f16 	blt	r3,r2,80299e8 <_malloc_r+0x578>
 802956c:	32000515 	stw	r8,20(r6)
 8029570:	32000415 	stw	r8,16(r6)
 8029574:	10007f0e 	bge	r2,zero,8029774 <_malloc_r+0x304>
 8029578:	00807fc4 	movi	r2,511
 802957c:	11c0fd36 	bltu	r2,r7,8029974 <_malloc_r+0x504>
 8029580:	3806d0fa 	srli	r3,r7,3
 8029584:	01c00044 	movi	r7,1
 8029588:	30800117 	ldw	r2,4(r6)
 802958c:	19400044 	addi	r5,r3,1
 8029590:	294b883a 	add	r5,r5,r5
 8029594:	1807d0ba 	srai	r3,r3,2
 8029598:	294b883a 	add	r5,r5,r5
 802959c:	294b883a 	add	r5,r5,r5
 80295a0:	298b883a 	add	r5,r5,r6
 80295a4:	38c6983a 	sll	r3,r7,r3
 80295a8:	29c00017 	ldw	r7,0(r5)
 80295ac:	2a7ffe04 	addi	r9,r5,-8
 80295b0:	1886b03a 	or	r3,r3,r2
 80295b4:	82400315 	stw	r9,12(r16)
 80295b8:	81c00215 	stw	r7,8(r16)
 80295bc:	30c00115 	stw	r3,4(r6)
 80295c0:	2c000015 	stw	r16,0(r5)
 80295c4:	3c000315 	stw	r16,12(r7)
 80295c8:	2005d0ba 	srai	r2,r4,2
 80295cc:	01400044 	movi	r5,1
 80295d0:	288a983a 	sll	r5,r5,r2
 80295d4:	19406f36 	bltu	r3,r5,8029794 <_malloc_r+0x324>
 80295d8:	28c4703a 	and	r2,r5,r3
 80295dc:	10000a1e 	bne	r2,zero,8029608 <_malloc_r+0x198>
 80295e0:	00bfff04 	movi	r2,-4
 80295e4:	294b883a 	add	r5,r5,r5
 80295e8:	2088703a 	and	r4,r4,r2
 80295ec:	28c4703a 	and	r2,r5,r3
 80295f0:	21000104 	addi	r4,r4,4
 80295f4:	1000041e 	bne	r2,zero,8029608 <_malloc_r+0x198>
 80295f8:	294b883a 	add	r5,r5,r5
 80295fc:	28c4703a 	and	r2,r5,r3
 8029600:	21000104 	addi	r4,r4,4
 8029604:	103ffc26 	beq	r2,zero,80295f8 <_gp+0xfffe7eec>
 8029608:	02bfff04 	movi	r10,-4
 802960c:	024003c4 	movi	r9,15
 8029610:	21800044 	addi	r6,r4,1
 8029614:	318d883a 	add	r6,r6,r6
 8029618:	318d883a 	add	r6,r6,r6
 802961c:	318d883a 	add	r6,r6,r6
 8029620:	998d883a 	add	r6,r19,r6
 8029624:	333ffe04 	addi	r12,r6,-8
 8029628:	2017883a 	mov	r11,r4
 802962c:	31800104 	addi	r6,r6,4
 8029630:	34000017 	ldw	r16,0(r6)
 8029634:	31fffd04 	addi	r7,r6,-12
 8029638:	81c0041e 	bne	r16,r7,802964c <_malloc_r+0x1dc>
 802963c:	0000fb06 	br	8029a2c <_malloc_r+0x5bc>
 8029640:	1801030e 	bge	r3,zero,8029a50 <_malloc_r+0x5e0>
 8029644:	84000317 	ldw	r16,12(r16)
 8029648:	81c0f826 	beq	r16,r7,8029a2c <_malloc_r+0x5bc>
 802964c:	80800117 	ldw	r2,4(r16)
 8029650:	1284703a 	and	r2,r2,r10
 8029654:	1447c83a 	sub	r3,r2,r17
 8029658:	48fff90e 	bge	r9,r3,8029640 <_gp+0xfffe7f34>
 802965c:	80800317 	ldw	r2,12(r16)
 8029660:	81000217 	ldw	r4,8(r16)
 8029664:	89400054 	ori	r5,r17,1
 8029668:	81400115 	stw	r5,4(r16)
 802966c:	20800315 	stw	r2,12(r4)
 8029670:	11000215 	stw	r4,8(r2)
 8029674:	8463883a 	add	r17,r16,r17
 8029678:	9c400515 	stw	r17,20(r19)
 802967c:	9c400415 	stw	r17,16(r19)
 8029680:	18800054 	ori	r2,r3,1
 8029684:	88800115 	stw	r2,4(r17)
 8029688:	8a000315 	stw	r8,12(r17)
 802968c:	8a000215 	stw	r8,8(r17)
 8029690:	88e3883a 	add	r17,r17,r3
 8029694:	88c00015 	stw	r3,0(r17)
 8029698:	9009883a 	mov	r4,r18
 802969c:	8033c540 	call	8033c54 <__malloc_unlock>
 80296a0:	80800204 	addi	r2,r16,8
 80296a4:	00001b06 	br	8029714 <_malloc_r+0x2a4>
 80296a8:	04400404 	movi	r17,16
 80296ac:	89402536 	bltu	r17,r5,8029744 <_malloc_r+0x2d4>
 80296b0:	8033c300 	call	8033c30 <__malloc_lock>
 80296b4:	00800184 	movi	r2,6
 80296b8:	01000084 	movi	r4,2
 80296bc:	04c200f4 	movhi	r19,2051
 80296c0:	1085883a 	add	r2,r2,r2
 80296c4:	9cdfc804 	addi	r19,r19,32544
 80296c8:	1085883a 	add	r2,r2,r2
 80296cc:	9885883a 	add	r2,r19,r2
 80296d0:	14000117 	ldw	r16,4(r2)
 80296d4:	10fffe04 	addi	r3,r2,-8
 80296d8:	80c0d926 	beq	r16,r3,8029a40 <_malloc_r+0x5d0>
 80296dc:	80c00117 	ldw	r3,4(r16)
 80296e0:	81000317 	ldw	r4,12(r16)
 80296e4:	00bfff04 	movi	r2,-4
 80296e8:	1884703a 	and	r2,r3,r2
 80296ec:	81400217 	ldw	r5,8(r16)
 80296f0:	8085883a 	add	r2,r16,r2
 80296f4:	10c00117 	ldw	r3,4(r2)
 80296f8:	29000315 	stw	r4,12(r5)
 80296fc:	21400215 	stw	r5,8(r4)
 8029700:	18c00054 	ori	r3,r3,1
 8029704:	10c00115 	stw	r3,4(r2)
 8029708:	9009883a 	mov	r4,r18
 802970c:	8033c540 	call	8033c54 <__malloc_unlock>
 8029710:	80800204 	addi	r2,r16,8
 8029714:	dfc00a17 	ldw	ra,40(sp)
 8029718:	df000917 	ldw	fp,36(sp)
 802971c:	ddc00817 	ldw	r23,32(sp)
 8029720:	dd800717 	ldw	r22,28(sp)
 8029724:	dd400617 	ldw	r21,24(sp)
 8029728:	dd000517 	ldw	r20,20(sp)
 802972c:	dcc00417 	ldw	r19,16(sp)
 8029730:	dc800317 	ldw	r18,12(sp)
 8029734:	dc400217 	ldw	r17,8(sp)
 8029738:	dc000117 	ldw	r16,4(sp)
 802973c:	dec00b04 	addi	sp,sp,44
 8029740:	f800283a 	ret
 8029744:	00800304 	movi	r2,12
 8029748:	90800015 	stw	r2,0(r18)
 802974c:	0005883a 	mov	r2,zero
 8029750:	003ff006 	br	8029714 <_gp+0xfffe8008>
 8029754:	01002004 	movi	r4,128
 8029758:	02001004 	movi	r8,64
 802975c:	01c00fc4 	movi	r7,63
 8029760:	003f6106 	br	80294e8 <_gp+0xfffe7ddc>
 8029764:	4009883a 	mov	r4,r8
 8029768:	003f7506 	br	8029540 <_gp+0xfffe7e34>
 802976c:	81000317 	ldw	r4,12(r16)
 8029770:	003fde06 	br	80296ec <_gp+0xfffe7fe0>
 8029774:	81c5883a 	add	r2,r16,r7
 8029778:	11400117 	ldw	r5,4(r2)
 802977c:	9009883a 	mov	r4,r18
 8029780:	29400054 	ori	r5,r5,1
 8029784:	11400115 	stw	r5,4(r2)
 8029788:	8033c540 	call	8033c54 <__malloc_unlock>
 802978c:	80800204 	addi	r2,r16,8
 8029790:	003fe006 	br	8029714 <_gp+0xfffe8008>
 8029794:	9c000217 	ldw	r16,8(r19)
 8029798:	00bfff04 	movi	r2,-4
 802979c:	85800117 	ldw	r22,4(r16)
 80297a0:	b0ac703a 	and	r22,r22,r2
 80297a4:	b4400336 	bltu	r22,r17,80297b4 <_malloc_r+0x344>
 80297a8:	b445c83a 	sub	r2,r22,r17
 80297ac:	00c003c4 	movi	r3,15
 80297b0:	18805d16 	blt	r3,r2,8029928 <_malloc_r+0x4b8>
 80297b4:	05c20134 	movhi	r23,2052
 80297b8:	00820134 	movhi	r2,2052
 80297bc:	10acf604 	addi	r2,r2,-19496
 80297c0:	bde5c604 	addi	r23,r23,-26856
 80297c4:	15400017 	ldw	r21,0(r2)
 80297c8:	b8c00017 	ldw	r3,0(r23)
 80297cc:	00bfffc4 	movi	r2,-1
 80297d0:	858d883a 	add	r6,r16,r22
 80297d4:	8d6b883a 	add	r21,r17,r21
 80297d8:	1880ea26 	beq	r3,r2,8029b84 <_malloc_r+0x714>
 80297dc:	ad4403c4 	addi	r21,r21,4111
 80297e0:	00bc0004 	movi	r2,-4096
 80297e4:	a8aa703a 	and	r21,r21,r2
 80297e8:	a80b883a 	mov	r5,r21
 80297ec:	9009883a 	mov	r4,r18
 80297f0:	d9800015 	stw	r6,0(sp)
 80297f4:	8029f040 	call	8029f04 <_sbrk_r>
 80297f8:	1029883a 	mov	r20,r2
 80297fc:	00bfffc4 	movi	r2,-1
 8029800:	d9800017 	ldw	r6,0(sp)
 8029804:	a080e826 	beq	r20,r2,8029ba8 <_malloc_r+0x738>
 8029808:	a180a636 	bltu	r20,r6,8029aa4 <_malloc_r+0x634>
 802980c:	07020134 	movhi	fp,2052
 8029810:	e72d0204 	addi	fp,fp,-19448
 8029814:	e0800017 	ldw	r2,0(fp)
 8029818:	a887883a 	add	r3,r21,r2
 802981c:	e0c00015 	stw	r3,0(fp)
 8029820:	3500e626 	beq	r6,r20,8029bbc <_malloc_r+0x74c>
 8029824:	b9000017 	ldw	r4,0(r23)
 8029828:	00bfffc4 	movi	r2,-1
 802982c:	2080ee26 	beq	r4,r2,8029be8 <_malloc_r+0x778>
 8029830:	a185c83a 	sub	r2,r20,r6
 8029834:	10c5883a 	add	r2,r2,r3
 8029838:	e0800015 	stw	r2,0(fp)
 802983c:	a0c001cc 	andi	r3,r20,7
 8029840:	1800bc26 	beq	r3,zero,8029b34 <_malloc_r+0x6c4>
 8029844:	a0e9c83a 	sub	r20,r20,r3
 8029848:	00840204 	movi	r2,4104
 802984c:	a5000204 	addi	r20,r20,8
 8029850:	10c7c83a 	sub	r3,r2,r3
 8029854:	a545883a 	add	r2,r20,r21
 8029858:	1083ffcc 	andi	r2,r2,4095
 802985c:	18abc83a 	sub	r21,r3,r2
 8029860:	a80b883a 	mov	r5,r21
 8029864:	9009883a 	mov	r4,r18
 8029868:	8029f040 	call	8029f04 <_sbrk_r>
 802986c:	00ffffc4 	movi	r3,-1
 8029870:	10c0e126 	beq	r2,r3,8029bf8 <_malloc_r+0x788>
 8029874:	1505c83a 	sub	r2,r2,r20
 8029878:	1545883a 	add	r2,r2,r21
 802987c:	10800054 	ori	r2,r2,1
 8029880:	e0c00017 	ldw	r3,0(fp)
 8029884:	9d000215 	stw	r20,8(r19)
 8029888:	a0800115 	stw	r2,4(r20)
 802988c:	a8c7883a 	add	r3,r21,r3
 8029890:	e0c00015 	stw	r3,0(fp)
 8029894:	84c00e26 	beq	r16,r19,80298d0 <_malloc_r+0x460>
 8029898:	018003c4 	movi	r6,15
 802989c:	3580a72e 	bgeu	r6,r22,8029b3c <_malloc_r+0x6cc>
 80298a0:	81400117 	ldw	r5,4(r16)
 80298a4:	013ffe04 	movi	r4,-8
 80298a8:	b0bffd04 	addi	r2,r22,-12
 80298ac:	1104703a 	and	r2,r2,r4
 80298b0:	2900004c 	andi	r4,r5,1
 80298b4:	2088b03a 	or	r4,r4,r2
 80298b8:	81000115 	stw	r4,4(r16)
 80298bc:	01400144 	movi	r5,5
 80298c0:	8089883a 	add	r4,r16,r2
 80298c4:	21400115 	stw	r5,4(r4)
 80298c8:	21400215 	stw	r5,8(r4)
 80298cc:	3080cd36 	bltu	r6,r2,8029c04 <_malloc_r+0x794>
 80298d0:	00820134 	movhi	r2,2052
 80298d4:	10acf504 	addi	r2,r2,-19500
 80298d8:	11000017 	ldw	r4,0(r2)
 80298dc:	20c0012e 	bgeu	r4,r3,80298e4 <_malloc_r+0x474>
 80298e0:	10c00015 	stw	r3,0(r2)
 80298e4:	00820134 	movhi	r2,2052
 80298e8:	10acf404 	addi	r2,r2,-19504
 80298ec:	11000017 	ldw	r4,0(r2)
 80298f0:	9c000217 	ldw	r16,8(r19)
 80298f4:	20c0012e 	bgeu	r4,r3,80298fc <_malloc_r+0x48c>
 80298f8:	10c00015 	stw	r3,0(r2)
 80298fc:	80c00117 	ldw	r3,4(r16)
 8029900:	00bfff04 	movi	r2,-4
 8029904:	1886703a 	and	r3,r3,r2
 8029908:	1c45c83a 	sub	r2,r3,r17
 802990c:	1c400236 	bltu	r3,r17,8029918 <_malloc_r+0x4a8>
 8029910:	00c003c4 	movi	r3,15
 8029914:	18800416 	blt	r3,r2,8029928 <_malloc_r+0x4b8>
 8029918:	9009883a 	mov	r4,r18
 802991c:	8033c540 	call	8033c54 <__malloc_unlock>
 8029920:	0005883a 	mov	r2,zero
 8029924:	003f7b06 	br	8029714 <_gp+0xfffe8008>
 8029928:	88c00054 	ori	r3,r17,1
 802992c:	80c00115 	stw	r3,4(r16)
 8029930:	8463883a 	add	r17,r16,r17
 8029934:	10800054 	ori	r2,r2,1
 8029938:	9c400215 	stw	r17,8(r19)
 802993c:	88800115 	stw	r2,4(r17)
 8029940:	9009883a 	mov	r4,r18
 8029944:	8033c540 	call	8033c54 <__malloc_unlock>
 8029948:	80800204 	addi	r2,r16,8
 802994c:	003f7106 	br	8029714 <_gp+0xfffe8008>
 8029950:	00c00504 	movi	r3,20
 8029954:	18804a2e 	bgeu	r3,r2,8029a80 <_malloc_r+0x610>
 8029958:	00c01504 	movi	r3,84
 802995c:	18806e36 	bltu	r3,r2,8029b18 <_malloc_r+0x6a8>
 8029960:	8804d33a 	srli	r2,r17,12
 8029964:	12001bc4 	addi	r8,r2,111
 8029968:	11c01b84 	addi	r7,r2,110
 802996c:	4209883a 	add	r4,r8,r8
 8029970:	003edd06 	br	80294e8 <_gp+0xfffe7ddc>
 8029974:	3804d27a 	srli	r2,r7,9
 8029978:	00c00104 	movi	r3,4
 802997c:	1880442e 	bgeu	r3,r2,8029a90 <_malloc_r+0x620>
 8029980:	00c00504 	movi	r3,20
 8029984:	18808136 	bltu	r3,r2,8029b8c <_malloc_r+0x71c>
 8029988:	11401704 	addi	r5,r2,92
 802998c:	10c016c4 	addi	r3,r2,91
 8029990:	294b883a 	add	r5,r5,r5
 8029994:	294b883a 	add	r5,r5,r5
 8029998:	294b883a 	add	r5,r5,r5
 802999c:	994b883a 	add	r5,r19,r5
 80299a0:	28800017 	ldw	r2,0(r5)
 80299a4:	018200f4 	movhi	r6,2051
 80299a8:	297ffe04 	addi	r5,r5,-8
 80299ac:	319fc804 	addi	r6,r6,32544
 80299b0:	28806526 	beq	r5,r2,8029b48 <_malloc_r+0x6d8>
 80299b4:	01bfff04 	movi	r6,-4
 80299b8:	10c00117 	ldw	r3,4(r2)
 80299bc:	1986703a 	and	r3,r3,r6
 80299c0:	38c0022e 	bgeu	r7,r3,80299cc <_malloc_r+0x55c>
 80299c4:	10800217 	ldw	r2,8(r2)
 80299c8:	28bffb1e 	bne	r5,r2,80299b8 <_gp+0xfffe82ac>
 80299cc:	11400317 	ldw	r5,12(r2)
 80299d0:	98c00117 	ldw	r3,4(r19)
 80299d4:	81400315 	stw	r5,12(r16)
 80299d8:	80800215 	stw	r2,8(r16)
 80299dc:	2c000215 	stw	r16,8(r5)
 80299e0:	14000315 	stw	r16,12(r2)
 80299e4:	003ef806 	br	80295c8 <_gp+0xfffe7ebc>
 80299e8:	88c00054 	ori	r3,r17,1
 80299ec:	80c00115 	stw	r3,4(r16)
 80299f0:	8463883a 	add	r17,r16,r17
 80299f4:	34400515 	stw	r17,20(r6)
 80299f8:	34400415 	stw	r17,16(r6)
 80299fc:	10c00054 	ori	r3,r2,1
 8029a00:	8a000315 	stw	r8,12(r17)
 8029a04:	8a000215 	stw	r8,8(r17)
 8029a08:	88c00115 	stw	r3,4(r17)
 8029a0c:	88a3883a 	add	r17,r17,r2
 8029a10:	88800015 	stw	r2,0(r17)
 8029a14:	9009883a 	mov	r4,r18
 8029a18:	8033c540 	call	8033c54 <__malloc_unlock>
 8029a1c:	80800204 	addi	r2,r16,8
 8029a20:	003f3c06 	br	8029714 <_gp+0xfffe8008>
 8029a24:	30c00117 	ldw	r3,4(r6)
 8029a28:	003ee706 	br	80295c8 <_gp+0xfffe7ebc>
 8029a2c:	5ac00044 	addi	r11,r11,1
 8029a30:	588000cc 	andi	r2,r11,3
 8029a34:	31800204 	addi	r6,r6,8
 8029a38:	103efd1e 	bne	r2,zero,8029630 <_gp+0xfffe7f24>
 8029a3c:	00002406 	br	8029ad0 <_malloc_r+0x660>
 8029a40:	14000317 	ldw	r16,12(r2)
 8029a44:	143f251e 	bne	r2,r16,80296dc <_gp+0xfffe7fd0>
 8029a48:	21000084 	addi	r4,r4,2
 8029a4c:	003ebc06 	br	8029540 <_gp+0xfffe7e34>
 8029a50:	8085883a 	add	r2,r16,r2
 8029a54:	10c00117 	ldw	r3,4(r2)
 8029a58:	81000317 	ldw	r4,12(r16)
 8029a5c:	81400217 	ldw	r5,8(r16)
 8029a60:	18c00054 	ori	r3,r3,1
 8029a64:	10c00115 	stw	r3,4(r2)
 8029a68:	29000315 	stw	r4,12(r5)
 8029a6c:	21400215 	stw	r5,8(r4)
 8029a70:	9009883a 	mov	r4,r18
 8029a74:	8033c540 	call	8033c54 <__malloc_unlock>
 8029a78:	80800204 	addi	r2,r16,8
 8029a7c:	003f2506 	br	8029714 <_gp+0xfffe8008>
 8029a80:	12001704 	addi	r8,r2,92
 8029a84:	11c016c4 	addi	r7,r2,91
 8029a88:	4209883a 	add	r4,r8,r8
 8029a8c:	003e9606 	br	80294e8 <_gp+0xfffe7ddc>
 8029a90:	3804d1ba 	srli	r2,r7,6
 8029a94:	11400e44 	addi	r5,r2,57
 8029a98:	10c00e04 	addi	r3,r2,56
 8029a9c:	294b883a 	add	r5,r5,r5
 8029aa0:	003fbc06 	br	8029994 <_gp+0xfffe8288>
 8029aa4:	84ff5926 	beq	r16,r19,802980c <_gp+0xfffe8100>
 8029aa8:	008200f4 	movhi	r2,2051
 8029aac:	109fc804 	addi	r2,r2,32544
 8029ab0:	14000217 	ldw	r16,8(r2)
 8029ab4:	00bfff04 	movi	r2,-4
 8029ab8:	80c00117 	ldw	r3,4(r16)
 8029abc:	1886703a 	and	r3,r3,r2
 8029ac0:	003f9106 	br	8029908 <_gp+0xfffe81fc>
 8029ac4:	60800217 	ldw	r2,8(r12)
 8029ac8:	213fffc4 	addi	r4,r4,-1
 8029acc:	1300651e 	bne	r2,r12,8029c64 <_malloc_r+0x7f4>
 8029ad0:	208000cc 	andi	r2,r4,3
 8029ad4:	633ffe04 	addi	r12,r12,-8
 8029ad8:	103ffa1e 	bne	r2,zero,8029ac4 <_gp+0xfffe83b8>
 8029adc:	98800117 	ldw	r2,4(r19)
 8029ae0:	0146303a 	nor	r3,zero,r5
 8029ae4:	1884703a 	and	r2,r3,r2
 8029ae8:	98800115 	stw	r2,4(r19)
 8029aec:	294b883a 	add	r5,r5,r5
 8029af0:	117f2836 	bltu	r2,r5,8029794 <_gp+0xfffe8088>
 8029af4:	283f2726 	beq	r5,zero,8029794 <_gp+0xfffe8088>
 8029af8:	2886703a 	and	r3,r5,r2
 8029afc:	5809883a 	mov	r4,r11
 8029b00:	183ec31e 	bne	r3,zero,8029610 <_gp+0xfffe7f04>
 8029b04:	294b883a 	add	r5,r5,r5
 8029b08:	2886703a 	and	r3,r5,r2
 8029b0c:	21000104 	addi	r4,r4,4
 8029b10:	183ffc26 	beq	r3,zero,8029b04 <_gp+0xfffe83f8>
 8029b14:	003ebe06 	br	8029610 <_gp+0xfffe7f04>
 8029b18:	00c05504 	movi	r3,340
 8029b1c:	18801236 	bltu	r3,r2,8029b68 <_malloc_r+0x6f8>
 8029b20:	8804d3fa 	srli	r2,r17,15
 8029b24:	12001e04 	addi	r8,r2,120
 8029b28:	11c01dc4 	addi	r7,r2,119
 8029b2c:	4209883a 	add	r4,r8,r8
 8029b30:	003e6d06 	br	80294e8 <_gp+0xfffe7ddc>
 8029b34:	00c40004 	movi	r3,4096
 8029b38:	003f4606 	br	8029854 <_gp+0xfffe8148>
 8029b3c:	00800044 	movi	r2,1
 8029b40:	a0800115 	stw	r2,4(r20)
 8029b44:	003f7406 	br	8029918 <_gp+0xfffe820c>
 8029b48:	1805d0ba 	srai	r2,r3,2
 8029b4c:	01c00044 	movi	r7,1
 8029b50:	30c00117 	ldw	r3,4(r6)
 8029b54:	388e983a 	sll	r7,r7,r2
 8029b58:	2805883a 	mov	r2,r5
 8029b5c:	38c6b03a 	or	r3,r7,r3
 8029b60:	30c00115 	stw	r3,4(r6)
 8029b64:	003f9b06 	br	80299d4 <_gp+0xfffe82c8>
 8029b68:	00c15504 	movi	r3,1364
 8029b6c:	18801a36 	bltu	r3,r2,8029bd8 <_malloc_r+0x768>
 8029b70:	8804d4ba 	srli	r2,r17,18
 8029b74:	12001f44 	addi	r8,r2,125
 8029b78:	11c01f04 	addi	r7,r2,124
 8029b7c:	4209883a 	add	r4,r8,r8
 8029b80:	003e5906 	br	80294e8 <_gp+0xfffe7ddc>
 8029b84:	ad400404 	addi	r21,r21,16
 8029b88:	003f1706 	br	80297e8 <_gp+0xfffe80dc>
 8029b8c:	00c01504 	movi	r3,84
 8029b90:	18802336 	bltu	r3,r2,8029c20 <_malloc_r+0x7b0>
 8029b94:	3804d33a 	srli	r2,r7,12
 8029b98:	11401bc4 	addi	r5,r2,111
 8029b9c:	10c01b84 	addi	r3,r2,110
 8029ba0:	294b883a 	add	r5,r5,r5
 8029ba4:	003f7b06 	br	8029994 <_gp+0xfffe8288>
 8029ba8:	9c000217 	ldw	r16,8(r19)
 8029bac:	00bfff04 	movi	r2,-4
 8029bb0:	80c00117 	ldw	r3,4(r16)
 8029bb4:	1886703a 	and	r3,r3,r2
 8029bb8:	003f5306 	br	8029908 <_gp+0xfffe81fc>
 8029bbc:	3083ffcc 	andi	r2,r6,4095
 8029bc0:	103f181e 	bne	r2,zero,8029824 <_gp+0xfffe8118>
 8029bc4:	99000217 	ldw	r4,8(r19)
 8029bc8:	b545883a 	add	r2,r22,r21
 8029bcc:	10800054 	ori	r2,r2,1
 8029bd0:	20800115 	stw	r2,4(r4)
 8029bd4:	003f3e06 	br	80298d0 <_gp+0xfffe81c4>
 8029bd8:	01003f84 	movi	r4,254
 8029bdc:	02001fc4 	movi	r8,127
 8029be0:	01c01f84 	movi	r7,126
 8029be4:	003e4006 	br	80294e8 <_gp+0xfffe7ddc>
 8029be8:	00820134 	movhi	r2,2052
 8029bec:	10a5c604 	addi	r2,r2,-26856
 8029bf0:	15000015 	stw	r20,0(r2)
 8029bf4:	003f1106 	br	802983c <_gp+0xfffe8130>
 8029bf8:	00800044 	movi	r2,1
 8029bfc:	002b883a 	mov	r21,zero
 8029c00:	003f1f06 	br	8029880 <_gp+0xfffe8174>
 8029c04:	81400204 	addi	r5,r16,8
 8029c08:	9009883a 	mov	r4,r18
 8029c0c:	802e5880 	call	802e588 <_free_r>
 8029c10:	00820134 	movhi	r2,2052
 8029c14:	10ad0204 	addi	r2,r2,-19448
 8029c18:	10c00017 	ldw	r3,0(r2)
 8029c1c:	003f2c06 	br	80298d0 <_gp+0xfffe81c4>
 8029c20:	00c05504 	movi	r3,340
 8029c24:	18800536 	bltu	r3,r2,8029c3c <_malloc_r+0x7cc>
 8029c28:	3804d3fa 	srli	r2,r7,15
 8029c2c:	11401e04 	addi	r5,r2,120
 8029c30:	10c01dc4 	addi	r3,r2,119
 8029c34:	294b883a 	add	r5,r5,r5
 8029c38:	003f5606 	br	8029994 <_gp+0xfffe8288>
 8029c3c:	00c15504 	movi	r3,1364
 8029c40:	18800536 	bltu	r3,r2,8029c58 <_malloc_r+0x7e8>
 8029c44:	3804d4ba 	srli	r2,r7,18
 8029c48:	11401f44 	addi	r5,r2,125
 8029c4c:	10c01f04 	addi	r3,r2,124
 8029c50:	294b883a 	add	r5,r5,r5
 8029c54:	003f4f06 	br	8029994 <_gp+0xfffe8288>
 8029c58:	01403f84 	movi	r5,254
 8029c5c:	00c01f84 	movi	r3,126
 8029c60:	003f4c06 	br	8029994 <_gp+0xfffe8288>
 8029c64:	98800117 	ldw	r2,4(r19)
 8029c68:	003fa006 	br	8029aec <_gp+0xfffe83e0>
 8029c6c:	8808d0fa 	srli	r4,r17,3
 8029c70:	20800044 	addi	r2,r4,1
 8029c74:	1085883a 	add	r2,r2,r2
 8029c78:	003e9006 	br	80296bc <_gp+0xfffe7fb0>

08029c7c <memcpy>:
 8029c7c:	defffd04 	addi	sp,sp,-12
 8029c80:	dfc00215 	stw	ra,8(sp)
 8029c84:	dc400115 	stw	r17,4(sp)
 8029c88:	dc000015 	stw	r16,0(sp)
 8029c8c:	00c003c4 	movi	r3,15
 8029c90:	2005883a 	mov	r2,r4
 8029c94:	1980452e 	bgeu	r3,r6,8029dac <memcpy+0x130>
 8029c98:	2906b03a 	or	r3,r5,r4
 8029c9c:	18c000cc 	andi	r3,r3,3
 8029ca0:	1800441e 	bne	r3,zero,8029db4 <memcpy+0x138>
 8029ca4:	347ffc04 	addi	r17,r6,-16
 8029ca8:	8822d13a 	srli	r17,r17,4
 8029cac:	28c00104 	addi	r3,r5,4
 8029cb0:	23400104 	addi	r13,r4,4
 8029cb4:	8820913a 	slli	r16,r17,4
 8029cb8:	2b000204 	addi	r12,r5,8
 8029cbc:	22c00204 	addi	r11,r4,8
 8029cc0:	84000504 	addi	r16,r16,20
 8029cc4:	2a800304 	addi	r10,r5,12
 8029cc8:	22400304 	addi	r9,r4,12
 8029ccc:	2c21883a 	add	r16,r5,r16
 8029cd0:	2811883a 	mov	r8,r5
 8029cd4:	200f883a 	mov	r7,r4
 8029cd8:	41000017 	ldw	r4,0(r8)
 8029cdc:	1fc00017 	ldw	ra,0(r3)
 8029ce0:	63c00017 	ldw	r15,0(r12)
 8029ce4:	39000015 	stw	r4,0(r7)
 8029ce8:	53800017 	ldw	r14,0(r10)
 8029cec:	6fc00015 	stw	ra,0(r13)
 8029cf0:	5bc00015 	stw	r15,0(r11)
 8029cf4:	4b800015 	stw	r14,0(r9)
 8029cf8:	18c00404 	addi	r3,r3,16
 8029cfc:	39c00404 	addi	r7,r7,16
 8029d00:	42000404 	addi	r8,r8,16
 8029d04:	6b400404 	addi	r13,r13,16
 8029d08:	63000404 	addi	r12,r12,16
 8029d0c:	5ac00404 	addi	r11,r11,16
 8029d10:	52800404 	addi	r10,r10,16
 8029d14:	4a400404 	addi	r9,r9,16
 8029d18:	1c3fef1e 	bne	r3,r16,8029cd8 <_gp+0xfffe85cc>
 8029d1c:	89c00044 	addi	r7,r17,1
 8029d20:	380e913a 	slli	r7,r7,4
 8029d24:	310003cc 	andi	r4,r6,15
 8029d28:	02c000c4 	movi	r11,3
 8029d2c:	11c7883a 	add	r3,r2,r7
 8029d30:	29cb883a 	add	r5,r5,r7
 8029d34:	5900212e 	bgeu	r11,r4,8029dbc <memcpy+0x140>
 8029d38:	1813883a 	mov	r9,r3
 8029d3c:	2811883a 	mov	r8,r5
 8029d40:	200f883a 	mov	r7,r4
 8029d44:	42800017 	ldw	r10,0(r8)
 8029d48:	4a400104 	addi	r9,r9,4
 8029d4c:	39ffff04 	addi	r7,r7,-4
 8029d50:	4abfff15 	stw	r10,-4(r9)
 8029d54:	42000104 	addi	r8,r8,4
 8029d58:	59fffa36 	bltu	r11,r7,8029d44 <_gp+0xfffe8638>
 8029d5c:	213fff04 	addi	r4,r4,-4
 8029d60:	2008d0ba 	srli	r4,r4,2
 8029d64:	318000cc 	andi	r6,r6,3
 8029d68:	21000044 	addi	r4,r4,1
 8029d6c:	2109883a 	add	r4,r4,r4
 8029d70:	2109883a 	add	r4,r4,r4
 8029d74:	1907883a 	add	r3,r3,r4
 8029d78:	290b883a 	add	r5,r5,r4
 8029d7c:	30000626 	beq	r6,zero,8029d98 <memcpy+0x11c>
 8029d80:	198d883a 	add	r6,r3,r6
 8029d84:	29c00003 	ldbu	r7,0(r5)
 8029d88:	18c00044 	addi	r3,r3,1
 8029d8c:	29400044 	addi	r5,r5,1
 8029d90:	19ffffc5 	stb	r7,-1(r3)
 8029d94:	19bffb1e 	bne	r3,r6,8029d84 <_gp+0xfffe8678>
 8029d98:	dfc00217 	ldw	ra,8(sp)
 8029d9c:	dc400117 	ldw	r17,4(sp)
 8029da0:	dc000017 	ldw	r16,0(sp)
 8029da4:	dec00304 	addi	sp,sp,12
 8029da8:	f800283a 	ret
 8029dac:	2007883a 	mov	r3,r4
 8029db0:	003ff206 	br	8029d7c <_gp+0xfffe8670>
 8029db4:	2007883a 	mov	r3,r4
 8029db8:	003ff106 	br	8029d80 <_gp+0xfffe8674>
 8029dbc:	200d883a 	mov	r6,r4
 8029dc0:	003fee06 	br	8029d7c <_gp+0xfffe8670>

08029dc4 <_printf_r>:
 8029dc4:	defffd04 	addi	sp,sp,-12
 8029dc8:	2805883a 	mov	r2,r5
 8029dcc:	dfc00015 	stw	ra,0(sp)
 8029dd0:	d9800115 	stw	r6,4(sp)
 8029dd4:	d9c00215 	stw	r7,8(sp)
 8029dd8:	21400217 	ldw	r5,8(r4)
 8029ddc:	d9c00104 	addi	r7,sp,4
 8029de0:	100d883a 	mov	r6,r2
 8029de4:	8029ff00 	call	8029ff0 <___vfprintf_internal_r>
 8029de8:	dfc00017 	ldw	ra,0(sp)
 8029dec:	dec00304 	addi	sp,sp,12
 8029df0:	f800283a 	ret

08029df4 <printf>:
 8029df4:	defffc04 	addi	sp,sp,-16
 8029df8:	dfc00015 	stw	ra,0(sp)
 8029dfc:	d9400115 	stw	r5,4(sp)
 8029e00:	d9800215 	stw	r6,8(sp)
 8029e04:	d9c00315 	stw	r7,12(sp)
 8029e08:	00820134 	movhi	r2,2052
 8029e0c:	10a5c504 	addi	r2,r2,-26860
 8029e10:	10800017 	ldw	r2,0(r2)
 8029e14:	200b883a 	mov	r5,r4
 8029e18:	d9800104 	addi	r6,sp,4
 8029e1c:	11000217 	ldw	r4,8(r2)
 8029e20:	802c1e80 	call	802c1e8 <__vfprintf_internal>
 8029e24:	dfc00017 	ldw	ra,0(sp)
 8029e28:	dec00404 	addi	sp,sp,16
 8029e2c:	f800283a 	ret

08029e30 <_puts_r>:
 8029e30:	defff604 	addi	sp,sp,-40
 8029e34:	dc000715 	stw	r16,28(sp)
 8029e38:	2021883a 	mov	r16,r4
 8029e3c:	2809883a 	mov	r4,r5
 8029e40:	dc400815 	stw	r17,32(sp)
 8029e44:	dfc00915 	stw	ra,36(sp)
 8029e48:	2823883a 	mov	r17,r5
 8029e4c:	8029f580 	call	8029f58 <strlen>
 8029e50:	10c00044 	addi	r3,r2,1
 8029e54:	d8800115 	stw	r2,4(sp)
 8029e58:	008200f4 	movhi	r2,2051
 8029e5c:	109e2a04 	addi	r2,r2,30888
 8029e60:	d8800215 	stw	r2,8(sp)
 8029e64:	00800044 	movi	r2,1
 8029e68:	d8800315 	stw	r2,12(sp)
 8029e6c:	00800084 	movi	r2,2
 8029e70:	dc400015 	stw	r17,0(sp)
 8029e74:	d8c00615 	stw	r3,24(sp)
 8029e78:	dec00415 	stw	sp,16(sp)
 8029e7c:	d8800515 	stw	r2,20(sp)
 8029e80:	80000226 	beq	r16,zero,8029e8c <_puts_r+0x5c>
 8029e84:	80800e17 	ldw	r2,56(r16)
 8029e88:	10001426 	beq	r2,zero,8029edc <_puts_r+0xac>
 8029e8c:	81400217 	ldw	r5,8(r16)
 8029e90:	2880030b 	ldhu	r2,12(r5)
 8029e94:	10c8000c 	andi	r3,r2,8192
 8029e98:	1800061e 	bne	r3,zero,8029eb4 <_puts_r+0x84>
 8029e9c:	29001917 	ldw	r4,100(r5)
 8029ea0:	00f7ffc4 	movi	r3,-8193
 8029ea4:	10880014 	ori	r2,r2,8192
 8029ea8:	20c6703a 	and	r3,r4,r3
 8029eac:	2880030d 	sth	r2,12(r5)
 8029eb0:	28c01915 	stw	r3,100(r5)
 8029eb4:	d9800404 	addi	r6,sp,16
 8029eb8:	8009883a 	mov	r4,r16
 8029ebc:	802e8980 	call	802e898 <__sfvwrite_r>
 8029ec0:	1000091e 	bne	r2,zero,8029ee8 <_puts_r+0xb8>
 8029ec4:	00800284 	movi	r2,10
 8029ec8:	dfc00917 	ldw	ra,36(sp)
 8029ecc:	dc400817 	ldw	r17,32(sp)
 8029ed0:	dc000717 	ldw	r16,28(sp)
 8029ed4:	dec00a04 	addi	sp,sp,40
 8029ed8:	f800283a 	ret
 8029edc:	8009883a 	mov	r4,r16
 8029ee0:	802e4140 	call	802e414 <__sinit>
 8029ee4:	003fe906 	br	8029e8c <_gp+0xfffe8780>
 8029ee8:	00bfffc4 	movi	r2,-1
 8029eec:	003ff606 	br	8029ec8 <_gp+0xfffe87bc>

08029ef0 <puts>:
 8029ef0:	00820134 	movhi	r2,2052
 8029ef4:	10a5c504 	addi	r2,r2,-26860
 8029ef8:	200b883a 	mov	r5,r4
 8029efc:	11000017 	ldw	r4,0(r2)
 8029f00:	8029e301 	jmpi	8029e30 <_puts_r>

08029f04 <_sbrk_r>:
 8029f04:	defffd04 	addi	sp,sp,-12
 8029f08:	dc000015 	stw	r16,0(sp)
 8029f0c:	04020134 	movhi	r16,2052
 8029f10:	dc400115 	stw	r17,4(sp)
 8029f14:	842cf704 	addi	r16,r16,-19492
 8029f18:	2023883a 	mov	r17,r4
 8029f1c:	2809883a 	mov	r4,r5
 8029f20:	dfc00215 	stw	ra,8(sp)
 8029f24:	80000015 	stw	zero,0(r16)
 8029f28:	8033e140 	call	8033e14 <sbrk>
 8029f2c:	00ffffc4 	movi	r3,-1
 8029f30:	10c00526 	beq	r2,r3,8029f48 <_sbrk_r+0x44>
 8029f34:	dfc00217 	ldw	ra,8(sp)
 8029f38:	dc400117 	ldw	r17,4(sp)
 8029f3c:	dc000017 	ldw	r16,0(sp)
 8029f40:	dec00304 	addi	sp,sp,12
 8029f44:	f800283a 	ret
 8029f48:	80c00017 	ldw	r3,0(r16)
 8029f4c:	183ff926 	beq	r3,zero,8029f34 <_gp+0xfffe8828>
 8029f50:	88c00015 	stw	r3,0(r17)
 8029f54:	003ff706 	br	8029f34 <_gp+0xfffe8828>

08029f58 <strlen>:
 8029f58:	208000cc 	andi	r2,r4,3
 8029f5c:	10002026 	beq	r2,zero,8029fe0 <strlen+0x88>
 8029f60:	20800007 	ldb	r2,0(r4)
 8029f64:	10002026 	beq	r2,zero,8029fe8 <strlen+0x90>
 8029f68:	2005883a 	mov	r2,r4
 8029f6c:	00000206 	br	8029f78 <strlen+0x20>
 8029f70:	10c00007 	ldb	r3,0(r2)
 8029f74:	18001826 	beq	r3,zero,8029fd8 <strlen+0x80>
 8029f78:	10800044 	addi	r2,r2,1
 8029f7c:	10c000cc 	andi	r3,r2,3
 8029f80:	183ffb1e 	bne	r3,zero,8029f70 <_gp+0xfffe8864>
 8029f84:	10c00017 	ldw	r3,0(r2)
 8029f88:	01ffbff4 	movhi	r7,65279
 8029f8c:	39ffbfc4 	addi	r7,r7,-257
 8029f90:	00ca303a 	nor	r5,zero,r3
 8029f94:	01a02074 	movhi	r6,32897
 8029f98:	19c7883a 	add	r3,r3,r7
 8029f9c:	31a02004 	addi	r6,r6,-32640
 8029fa0:	1946703a 	and	r3,r3,r5
 8029fa4:	1986703a 	and	r3,r3,r6
 8029fa8:	1800091e 	bne	r3,zero,8029fd0 <strlen+0x78>
 8029fac:	10800104 	addi	r2,r2,4
 8029fb0:	10c00017 	ldw	r3,0(r2)
 8029fb4:	19cb883a 	add	r5,r3,r7
 8029fb8:	00c6303a 	nor	r3,zero,r3
 8029fbc:	28c6703a 	and	r3,r5,r3
 8029fc0:	1986703a 	and	r3,r3,r6
 8029fc4:	183ff926 	beq	r3,zero,8029fac <_gp+0xfffe88a0>
 8029fc8:	00000106 	br	8029fd0 <strlen+0x78>
 8029fcc:	10800044 	addi	r2,r2,1
 8029fd0:	10c00007 	ldb	r3,0(r2)
 8029fd4:	183ffd1e 	bne	r3,zero,8029fcc <_gp+0xfffe88c0>
 8029fd8:	1105c83a 	sub	r2,r2,r4
 8029fdc:	f800283a 	ret
 8029fe0:	2005883a 	mov	r2,r4
 8029fe4:	003fe706 	br	8029f84 <_gp+0xfffe8878>
 8029fe8:	0005883a 	mov	r2,zero
 8029fec:	f800283a 	ret

08029ff0 <___vfprintf_internal_r>:
 8029ff0:	deffb804 	addi	sp,sp,-288
 8029ff4:	dfc04715 	stw	ra,284(sp)
 8029ff8:	ddc04515 	stw	r23,276(sp)
 8029ffc:	dd404315 	stw	r21,268(sp)
 802a000:	d9002c15 	stw	r4,176(sp)
 802a004:	282f883a 	mov	r23,r5
 802a008:	302b883a 	mov	r21,r6
 802a00c:	d9c02d15 	stw	r7,180(sp)
 802a010:	df004615 	stw	fp,280(sp)
 802a014:	dd804415 	stw	r22,272(sp)
 802a018:	dd004215 	stw	r20,264(sp)
 802a01c:	dcc04115 	stw	r19,260(sp)
 802a020:	dc804015 	stw	r18,256(sp)
 802a024:	dc403f15 	stw	r17,252(sp)
 802a028:	dc003e15 	stw	r16,248(sp)
 802a02c:	802ef880 	call	802ef88 <_localeconv_r>
 802a030:	10800017 	ldw	r2,0(r2)
 802a034:	1009883a 	mov	r4,r2
 802a038:	d8803415 	stw	r2,208(sp)
 802a03c:	8029f580 	call	8029f58 <strlen>
 802a040:	d8803715 	stw	r2,220(sp)
 802a044:	d8802c17 	ldw	r2,176(sp)
 802a048:	10000226 	beq	r2,zero,802a054 <___vfprintf_internal_r+0x64>
 802a04c:	10800e17 	ldw	r2,56(r2)
 802a050:	1000f926 	beq	r2,zero,802a438 <___vfprintf_internal_r+0x448>
 802a054:	b880030b 	ldhu	r2,12(r23)
 802a058:	10c8000c 	andi	r3,r2,8192
 802a05c:	1800061e 	bne	r3,zero,802a078 <___vfprintf_internal_r+0x88>
 802a060:	b9001917 	ldw	r4,100(r23)
 802a064:	00f7ffc4 	movi	r3,-8193
 802a068:	10880014 	ori	r2,r2,8192
 802a06c:	20c6703a 	and	r3,r4,r3
 802a070:	b880030d 	sth	r2,12(r23)
 802a074:	b8c01915 	stw	r3,100(r23)
 802a078:	10c0020c 	andi	r3,r2,8
 802a07c:	1800c126 	beq	r3,zero,802a384 <___vfprintf_internal_r+0x394>
 802a080:	b8c00417 	ldw	r3,16(r23)
 802a084:	1800bf26 	beq	r3,zero,802a384 <___vfprintf_internal_r+0x394>
 802a088:	1080068c 	andi	r2,r2,26
 802a08c:	00c00284 	movi	r3,10
 802a090:	10c0c426 	beq	r2,r3,802a3a4 <___vfprintf_internal_r+0x3b4>
 802a094:	d8c00404 	addi	r3,sp,16
 802a098:	050200f4 	movhi	r20,2051
 802a09c:	d9001e04 	addi	r4,sp,120
 802a0a0:	a51e3b84 	addi	r20,r20,30958
 802a0a4:	d8c01e15 	stw	r3,120(sp)
 802a0a8:	d8002015 	stw	zero,128(sp)
 802a0ac:	d8001f15 	stw	zero,124(sp)
 802a0b0:	d8003315 	stw	zero,204(sp)
 802a0b4:	d8003615 	stw	zero,216(sp)
 802a0b8:	d8003815 	stw	zero,224(sp)
 802a0bc:	1811883a 	mov	r8,r3
 802a0c0:	d8003915 	stw	zero,228(sp)
 802a0c4:	d8003a15 	stw	zero,232(sp)
 802a0c8:	d8002f15 	stw	zero,188(sp)
 802a0cc:	d9002815 	stw	r4,160(sp)
 802a0d0:	a8800007 	ldb	r2,0(r21)
 802a0d4:	10027b26 	beq	r2,zero,802aac4 <___vfprintf_internal_r+0xad4>
 802a0d8:	00c00944 	movi	r3,37
 802a0dc:	a821883a 	mov	r16,r21
 802a0e0:	10c0021e 	bne	r2,r3,802a0ec <___vfprintf_internal_r+0xfc>
 802a0e4:	00001406 	br	802a138 <___vfprintf_internal_r+0x148>
 802a0e8:	10c00326 	beq	r2,r3,802a0f8 <___vfprintf_internal_r+0x108>
 802a0ec:	84000044 	addi	r16,r16,1
 802a0f0:	80800007 	ldb	r2,0(r16)
 802a0f4:	103ffc1e 	bne	r2,zero,802a0e8 <_gp+0xfffe89dc>
 802a0f8:	8563c83a 	sub	r17,r16,r21
 802a0fc:	88000e26 	beq	r17,zero,802a138 <___vfprintf_internal_r+0x148>
 802a100:	d8c02017 	ldw	r3,128(sp)
 802a104:	d8801f17 	ldw	r2,124(sp)
 802a108:	45400015 	stw	r21,0(r8)
 802a10c:	1c47883a 	add	r3,r3,r17
 802a110:	10800044 	addi	r2,r2,1
 802a114:	d8c02015 	stw	r3,128(sp)
 802a118:	44400115 	stw	r17,4(r8)
 802a11c:	d8801f15 	stw	r2,124(sp)
 802a120:	00c001c4 	movi	r3,7
 802a124:	1880a716 	blt	r3,r2,802a3c4 <___vfprintf_internal_r+0x3d4>
 802a128:	42000204 	addi	r8,r8,8
 802a12c:	d9402f17 	ldw	r5,188(sp)
 802a130:	2c4b883a 	add	r5,r5,r17
 802a134:	d9402f15 	stw	r5,188(sp)
 802a138:	80800007 	ldb	r2,0(r16)
 802a13c:	1000a826 	beq	r2,zero,802a3e0 <___vfprintf_internal_r+0x3f0>
 802a140:	84400047 	ldb	r17,1(r16)
 802a144:	00bfffc4 	movi	r2,-1
 802a148:	85400044 	addi	r21,r16,1
 802a14c:	d8002785 	stb	zero,158(sp)
 802a150:	0007883a 	mov	r3,zero
 802a154:	000f883a 	mov	r7,zero
 802a158:	d8802915 	stw	r2,164(sp)
 802a15c:	d8003115 	stw	zero,196(sp)
 802a160:	0025883a 	mov	r18,zero
 802a164:	01401604 	movi	r5,88
 802a168:	01800244 	movi	r6,9
 802a16c:	02800a84 	movi	r10,42
 802a170:	02401b04 	movi	r9,108
 802a174:	ad400044 	addi	r21,r21,1
 802a178:	88bff804 	addi	r2,r17,-32
 802a17c:	28830436 	bltu	r5,r2,802ad90 <___vfprintf_internal_r+0xda0>
 802a180:	100490ba 	slli	r2,r2,2
 802a184:	010200f4 	movhi	r4,2051
 802a188:	21286604 	addi	r4,r4,-24168
 802a18c:	1105883a 	add	r2,r2,r4
 802a190:	10800017 	ldw	r2,0(r2)
 802a194:	1000683a 	jmp	r2
 802a198:	0802acb0 	cmpltui	zero,at,2738
 802a19c:	0802ad90 	cmplti	zero,at,2742
 802a1a0:	0802ad90 	cmplti	zero,at,2742
 802a1a4:	0802acd0 	cmplti	zero,at,2739
 802a1a8:	0802ad90 	cmplti	zero,at,2742
 802a1ac:	0802ad90 	cmplti	zero,at,2742
 802a1b0:	0802ad90 	cmplti	zero,at,2742
 802a1b4:	0802ad90 	cmplti	zero,at,2742
 802a1b8:	0802ad90 	cmplti	zero,at,2742
 802a1bc:	0802ad90 	cmplti	zero,at,2742
 802a1c0:	0802a444 	addi	zero,at,2705
 802a1c4:	0802abec 	andhi	zero,at,2735
 802a1c8:	0802ad90 	cmplti	zero,at,2742
 802a1cc:	0802a30c 	andi	zero,at,2700
 802a1d0:	0802a46c 	andhi	zero,at,2705
 802a1d4:	0802ad90 	cmplti	zero,at,2742
 802a1d8:	0802a4ac 	andhi	zero,at,2706
 802a1dc:	0802a4b8 	rdprs	zero,at,2706
 802a1e0:	0802a4b8 	rdprs	zero,at,2706
 802a1e4:	0802a4b8 	rdprs	zero,at,2706
 802a1e8:	0802a4b8 	rdprs	zero,at,2706
 802a1ec:	0802a4b8 	rdprs	zero,at,2706
 802a1f0:	0802a4b8 	rdprs	zero,at,2706
 802a1f4:	0802a4b8 	rdprs	zero,at,2706
 802a1f8:	0802a4b8 	rdprs	zero,at,2706
 802a1fc:	0802a4b8 	rdprs	zero,at,2706
 802a200:	0802ad90 	cmplti	zero,at,2742
 802a204:	0802ad90 	cmplti	zero,at,2742
 802a208:	0802ad90 	cmplti	zero,at,2742
 802a20c:	0802ad90 	cmplti	zero,at,2742
 802a210:	0802ad90 	cmplti	zero,at,2742
 802a214:	0802ad90 	cmplti	zero,at,2742
 802a218:	0802ad90 	cmplti	zero,at,2742
 802a21c:	0802ad90 	cmplti	zero,at,2742
 802a220:	0802ad90 	cmplti	zero,at,2742
 802a224:	0802ad90 	cmplti	zero,at,2742
 802a228:	0802a4ec 	andhi	zero,at,2707
 802a22c:	0802a5a8 	cmpgeui	zero,at,2710
 802a230:	0802ad90 	cmplti	zero,at,2742
 802a234:	0802a5a8 	cmpgeui	zero,at,2710
 802a238:	0802ad90 	cmplti	zero,at,2742
 802a23c:	0802ad90 	cmplti	zero,at,2742
 802a240:	0802ad90 	cmplti	zero,at,2742
 802a244:	0802ad90 	cmplti	zero,at,2742
 802a248:	0802a648 	cmpgei	zero,at,2713
 802a24c:	0802ad90 	cmplti	zero,at,2742
 802a250:	0802ad90 	cmplti	zero,at,2742
 802a254:	0802a654 	ori	zero,at,2713
 802a258:	0802ad90 	cmplti	zero,at,2742
 802a25c:	0802ad90 	cmplti	zero,at,2742
 802a260:	0802ad90 	cmplti	zero,at,2742
 802a264:	0802ad90 	cmplti	zero,at,2742
 802a268:	0802ad90 	cmplti	zero,at,2742
 802a26c:	0802aacc 	andi	zero,at,2731
 802a270:	0802ad90 	cmplti	zero,at,2742
 802a274:	0802ad90 	cmplti	zero,at,2742
 802a278:	0802ab2c 	andhi	zero,at,2732
 802a27c:	0802ad90 	cmplti	zero,at,2742
 802a280:	0802ad90 	cmplti	zero,at,2742
 802a284:	0802ad90 	cmplti	zero,at,2742
 802a288:	0802ad90 	cmplti	zero,at,2742
 802a28c:	0802ad90 	cmplti	zero,at,2742
 802a290:	0802ad90 	cmplti	zero,at,2742
 802a294:	0802ad90 	cmplti	zero,at,2742
 802a298:	0802ad90 	cmplti	zero,at,2742
 802a29c:	0802ad90 	cmplti	zero,at,2742
 802a2a0:	0802ad90 	cmplti	zero,at,2742
 802a2a4:	0802ad3c 	xorhi	zero,at,2740
 802a2a8:	0802acdc 	xori	zero,at,2739
 802a2ac:	0802a5a8 	cmpgeui	zero,at,2710
 802a2b0:	0802a5a8 	cmpgeui	zero,at,2710
 802a2b4:	0802a5a8 	cmpgeui	zero,at,2710
 802a2b8:	0802acec 	andhi	zero,at,2739
 802a2bc:	0802acdc 	xori	zero,at,2739
 802a2c0:	0802ad90 	cmplti	zero,at,2742
 802a2c4:	0802ad90 	cmplti	zero,at,2742
 802a2c8:	0802acf8 	rdprs	zero,at,2739
 802a2cc:	0802ad90 	cmplti	zero,at,2742
 802a2d0:	0802ad08 	cmpgei	zero,at,2740
 802a2d4:	0802abdc 	xori	zero,at,2735
 802a2d8:	0802a318 	cmpnei	zero,at,2700
 802a2dc:	0802abfc 	xorhi	zero,at,2735
 802a2e0:	0802ad90 	cmplti	zero,at,2742
 802a2e4:	0802ac08 	cmpgei	zero,at,2736
 802a2e8:	0802ad90 	cmplti	zero,at,2742
 802a2ec:	0802ac64 	muli	zero,at,2737
 802a2f0:	0802ad90 	cmplti	zero,at,2742
 802a2f4:	0802ad90 	cmplti	zero,at,2742
 802a2f8:	0802ac74 	orhi	zero,at,2737
 802a2fc:	d9003117 	ldw	r4,196(sp)
 802a300:	d8802d15 	stw	r2,180(sp)
 802a304:	0109c83a 	sub	r4,zero,r4
 802a308:	d9003115 	stw	r4,196(sp)
 802a30c:	94800114 	ori	r18,r18,4
 802a310:	ac400007 	ldb	r17,0(r21)
 802a314:	003f9706 	br	802a174 <_gp+0xfffe8a68>
 802a318:	00800c04 	movi	r2,48
 802a31c:	d9002d17 	ldw	r4,180(sp)
 802a320:	d9402917 	ldw	r5,164(sp)
 802a324:	d8802705 	stb	r2,156(sp)
 802a328:	00801e04 	movi	r2,120
 802a32c:	d8802745 	stb	r2,157(sp)
 802a330:	d8002785 	stb	zero,158(sp)
 802a334:	20c00104 	addi	r3,r4,4
 802a338:	24c00017 	ldw	r19,0(r4)
 802a33c:	002d883a 	mov	r22,zero
 802a340:	90800094 	ori	r2,r18,2
 802a344:	28029a16 	blt	r5,zero,802adb0 <___vfprintf_internal_r+0xdc0>
 802a348:	00bfdfc4 	movi	r2,-129
 802a34c:	90a4703a 	and	r18,r18,r2
 802a350:	d8c02d15 	stw	r3,180(sp)
 802a354:	94800094 	ori	r18,r18,2
 802a358:	9802871e 	bne	r19,zero,802ad78 <___vfprintf_internal_r+0xd88>
 802a35c:	008200f4 	movhi	r2,2051
 802a360:	109e3404 	addi	r2,r2,30928
 802a364:	d8803915 	stw	r2,228(sp)
 802a368:	04401e04 	movi	r17,120
 802a36c:	d8802917 	ldw	r2,164(sp)
 802a370:	0039883a 	mov	fp,zero
 802a374:	1001e926 	beq	r2,zero,802ab1c <___vfprintf_internal_r+0xb2c>
 802a378:	0027883a 	mov	r19,zero
 802a37c:	002d883a 	mov	r22,zero
 802a380:	00020506 	br	802ab98 <___vfprintf_internal_r+0xba8>
 802a384:	d9002c17 	ldw	r4,176(sp)
 802a388:	b80b883a 	mov	r5,r23
 802a38c:	802c2c00 	call	802c2c0 <__swsetup_r>
 802a390:	1005ac1e 	bne	r2,zero,802ba44 <___vfprintf_internal_r+0x1a54>
 802a394:	b880030b 	ldhu	r2,12(r23)
 802a398:	00c00284 	movi	r3,10
 802a39c:	1080068c 	andi	r2,r2,26
 802a3a0:	10ff3c1e 	bne	r2,r3,802a094 <_gp+0xfffe8988>
 802a3a4:	b880038f 	ldh	r2,14(r23)
 802a3a8:	103f3a16 	blt	r2,zero,802a094 <_gp+0xfffe8988>
 802a3ac:	d9c02d17 	ldw	r7,180(sp)
 802a3b0:	d9002c17 	ldw	r4,176(sp)
 802a3b4:	a80d883a 	mov	r6,r21
 802a3b8:	b80b883a 	mov	r5,r23
 802a3bc:	802c2040 	call	802c204 <__sbprintf>
 802a3c0:	00001106 	br	802a408 <___vfprintf_internal_r+0x418>
 802a3c4:	d9002c17 	ldw	r4,176(sp)
 802a3c8:	d9801e04 	addi	r6,sp,120
 802a3cc:	b80b883a 	mov	r5,r23
 802a3d0:	8030d500 	call	8030d50 <__sprint_r>
 802a3d4:	1000081e 	bne	r2,zero,802a3f8 <___vfprintf_internal_r+0x408>
 802a3d8:	da000404 	addi	r8,sp,16
 802a3dc:	003f5306 	br	802a12c <_gp+0xfffe8a20>
 802a3e0:	d8802017 	ldw	r2,128(sp)
 802a3e4:	10000426 	beq	r2,zero,802a3f8 <___vfprintf_internal_r+0x408>
 802a3e8:	d9002c17 	ldw	r4,176(sp)
 802a3ec:	d9801e04 	addi	r6,sp,120
 802a3f0:	b80b883a 	mov	r5,r23
 802a3f4:	8030d500 	call	8030d50 <__sprint_r>
 802a3f8:	b880030b 	ldhu	r2,12(r23)
 802a3fc:	1080100c 	andi	r2,r2,64
 802a400:	1005901e 	bne	r2,zero,802ba44 <___vfprintf_internal_r+0x1a54>
 802a404:	d8802f17 	ldw	r2,188(sp)
 802a408:	dfc04717 	ldw	ra,284(sp)
 802a40c:	df004617 	ldw	fp,280(sp)
 802a410:	ddc04517 	ldw	r23,276(sp)
 802a414:	dd804417 	ldw	r22,272(sp)
 802a418:	dd404317 	ldw	r21,268(sp)
 802a41c:	dd004217 	ldw	r20,264(sp)
 802a420:	dcc04117 	ldw	r19,260(sp)
 802a424:	dc804017 	ldw	r18,256(sp)
 802a428:	dc403f17 	ldw	r17,252(sp)
 802a42c:	dc003e17 	ldw	r16,248(sp)
 802a430:	dec04804 	addi	sp,sp,288
 802a434:	f800283a 	ret
 802a438:	d9002c17 	ldw	r4,176(sp)
 802a43c:	802e4140 	call	802e414 <__sinit>
 802a440:	003f0406 	br	802a054 <_gp+0xfffe8948>
 802a444:	d8802d17 	ldw	r2,180(sp)
 802a448:	d9002d17 	ldw	r4,180(sp)
 802a44c:	10800017 	ldw	r2,0(r2)
 802a450:	d8803115 	stw	r2,196(sp)
 802a454:	20800104 	addi	r2,r4,4
 802a458:	d9003117 	ldw	r4,196(sp)
 802a45c:	203fa716 	blt	r4,zero,802a2fc <_gp+0xfffe8bf0>
 802a460:	d8802d15 	stw	r2,180(sp)
 802a464:	ac400007 	ldb	r17,0(r21)
 802a468:	003f4206 	br	802a174 <_gp+0xfffe8a68>
 802a46c:	ac400007 	ldb	r17,0(r21)
 802a470:	aac00044 	addi	r11,r21,1
 802a474:	8a872826 	beq	r17,r10,802c118 <___vfprintf_internal_r+0x2128>
 802a478:	88bff404 	addi	r2,r17,-48
 802a47c:	0009883a 	mov	r4,zero
 802a480:	30867d36 	bltu	r6,r2,802be78 <___vfprintf_internal_r+0x1e88>
 802a484:	5c400007 	ldb	r17,0(r11)
 802a488:	210002a4 	muli	r4,r4,10
 802a48c:	5d400044 	addi	r21,r11,1
 802a490:	a817883a 	mov	r11,r21
 802a494:	2089883a 	add	r4,r4,r2
 802a498:	88bff404 	addi	r2,r17,-48
 802a49c:	30bff92e 	bgeu	r6,r2,802a484 <_gp+0xfffe8d78>
 802a4a0:	2005c916 	blt	r4,zero,802bbc8 <___vfprintf_internal_r+0x1bd8>
 802a4a4:	d9002915 	stw	r4,164(sp)
 802a4a8:	003f3306 	br	802a178 <_gp+0xfffe8a6c>
 802a4ac:	94802014 	ori	r18,r18,128
 802a4b0:	ac400007 	ldb	r17,0(r21)
 802a4b4:	003f2f06 	br	802a174 <_gp+0xfffe8a68>
 802a4b8:	a809883a 	mov	r4,r21
 802a4bc:	d8003115 	stw	zero,196(sp)
 802a4c0:	88bff404 	addi	r2,r17,-48
 802a4c4:	0017883a 	mov	r11,zero
 802a4c8:	24400007 	ldb	r17,0(r4)
 802a4cc:	5ac002a4 	muli	r11,r11,10
 802a4d0:	ad400044 	addi	r21,r21,1
 802a4d4:	a809883a 	mov	r4,r21
 802a4d8:	12d7883a 	add	r11,r2,r11
 802a4dc:	88bff404 	addi	r2,r17,-48
 802a4e0:	30bff92e 	bgeu	r6,r2,802a4c8 <_gp+0xfffe8dbc>
 802a4e4:	dac03115 	stw	r11,196(sp)
 802a4e8:	003f2306 	br	802a178 <_gp+0xfffe8a6c>
 802a4ec:	18c03fcc 	andi	r3,r3,255
 802a4f0:	18072b1e 	bne	r3,zero,802c1a0 <___vfprintf_internal_r+0x21b0>
 802a4f4:	94800414 	ori	r18,r18,16
 802a4f8:	9080080c 	andi	r2,r18,32
 802a4fc:	10037b26 	beq	r2,zero,802b2ec <___vfprintf_internal_r+0x12fc>
 802a500:	d9402d17 	ldw	r5,180(sp)
 802a504:	28800117 	ldw	r2,4(r5)
 802a508:	2cc00017 	ldw	r19,0(r5)
 802a50c:	29400204 	addi	r5,r5,8
 802a510:	d9402d15 	stw	r5,180(sp)
 802a514:	102d883a 	mov	r22,r2
 802a518:	10044b16 	blt	r2,zero,802b648 <___vfprintf_internal_r+0x1658>
 802a51c:	d9402917 	ldw	r5,164(sp)
 802a520:	df002783 	ldbu	fp,158(sp)
 802a524:	2803bc16 	blt	r5,zero,802b418 <___vfprintf_internal_r+0x1428>
 802a528:	00ffdfc4 	movi	r3,-129
 802a52c:	9d84b03a 	or	r2,r19,r22
 802a530:	90e4703a 	and	r18,r18,r3
 802a534:	10017726 	beq	r2,zero,802ab14 <___vfprintf_internal_r+0xb24>
 802a538:	b0038326 	beq	r22,zero,802b348 <___vfprintf_internal_r+0x1358>
 802a53c:	dc402a15 	stw	r17,168(sp)
 802a540:	dc001e04 	addi	r16,sp,120
 802a544:	b023883a 	mov	r17,r22
 802a548:	402d883a 	mov	r22,r8
 802a54c:	9809883a 	mov	r4,r19
 802a550:	880b883a 	mov	r5,r17
 802a554:	01800284 	movi	r6,10
 802a558:	000f883a 	mov	r7,zero
 802a55c:	80331480 	call	8033148 <__umoddi3>
 802a560:	10800c04 	addi	r2,r2,48
 802a564:	843fffc4 	addi	r16,r16,-1
 802a568:	9809883a 	mov	r4,r19
 802a56c:	880b883a 	mov	r5,r17
 802a570:	80800005 	stb	r2,0(r16)
 802a574:	01800284 	movi	r6,10
 802a578:	000f883a 	mov	r7,zero
 802a57c:	8032bd00 	call	8032bd0 <__udivdi3>
 802a580:	1027883a 	mov	r19,r2
 802a584:	10c4b03a 	or	r2,r2,r3
 802a588:	1823883a 	mov	r17,r3
 802a58c:	103fef1e 	bne	r2,zero,802a54c <_gp+0xfffe8e40>
 802a590:	d8c02817 	ldw	r3,160(sp)
 802a594:	dc402a17 	ldw	r17,168(sp)
 802a598:	b011883a 	mov	r8,r22
 802a59c:	1c07c83a 	sub	r3,r3,r16
 802a5a0:	d8c02e15 	stw	r3,184(sp)
 802a5a4:	00005906 	br	802a70c <___vfprintf_internal_r+0x71c>
 802a5a8:	18c03fcc 	andi	r3,r3,255
 802a5ac:	1806fa1e 	bne	r3,zero,802c198 <___vfprintf_internal_r+0x21a8>
 802a5b0:	9080020c 	andi	r2,r18,8
 802a5b4:	10048a26 	beq	r2,zero,802b7e0 <___vfprintf_internal_r+0x17f0>
 802a5b8:	d8c02d17 	ldw	r3,180(sp)
 802a5bc:	d9002d17 	ldw	r4,180(sp)
 802a5c0:	d9402d17 	ldw	r5,180(sp)
 802a5c4:	18c00017 	ldw	r3,0(r3)
 802a5c8:	21000117 	ldw	r4,4(r4)
 802a5cc:	29400204 	addi	r5,r5,8
 802a5d0:	d8c03615 	stw	r3,216(sp)
 802a5d4:	d9003815 	stw	r4,224(sp)
 802a5d8:	d9402d15 	stw	r5,180(sp)
 802a5dc:	d9003617 	ldw	r4,216(sp)
 802a5e0:	d9403817 	ldw	r5,224(sp)
 802a5e4:	da003d15 	stw	r8,244(sp)
 802a5e8:	04000044 	movi	r16,1
 802a5ec:	80257bc0 	call	80257bc <__fpclassifyd>
 802a5f0:	da003d17 	ldw	r8,244(sp)
 802a5f4:	14041f1e 	bne	r2,r16,802b674 <___vfprintf_internal_r+0x1684>
 802a5f8:	d9003617 	ldw	r4,216(sp)
 802a5fc:	d9403817 	ldw	r5,224(sp)
 802a600:	000d883a 	mov	r6,zero
 802a604:	000f883a 	mov	r7,zero
 802a608:	8027dd80 	call	8027dd8 <__ledf2>
 802a60c:	da003d17 	ldw	r8,244(sp)
 802a610:	1005be16 	blt	r2,zero,802bd0c <___vfprintf_internal_r+0x1d1c>
 802a614:	df002783 	ldbu	fp,158(sp)
 802a618:	008011c4 	movi	r2,71
 802a61c:	1445330e 	bge	r2,r17,802baec <___vfprintf_internal_r+0x1afc>
 802a620:	040200f4 	movhi	r16,2051
 802a624:	841e2c04 	addi	r16,r16,30896
 802a628:	00c000c4 	movi	r3,3
 802a62c:	00bfdfc4 	movi	r2,-129
 802a630:	d8c02a15 	stw	r3,168(sp)
 802a634:	90a4703a 	and	r18,r18,r2
 802a638:	d8c02e15 	stw	r3,184(sp)
 802a63c:	d8002915 	stw	zero,164(sp)
 802a640:	d8003215 	stw	zero,200(sp)
 802a644:	00003706 	br	802a724 <___vfprintf_internal_r+0x734>
 802a648:	94800214 	ori	r18,r18,8
 802a64c:	ac400007 	ldb	r17,0(r21)
 802a650:	003ec806 	br	802a174 <_gp+0xfffe8a68>
 802a654:	18c03fcc 	andi	r3,r3,255
 802a658:	1806db1e 	bne	r3,zero,802c1c8 <___vfprintf_internal_r+0x21d8>
 802a65c:	94800414 	ori	r18,r18,16
 802a660:	9080080c 	andi	r2,r18,32
 802a664:	1002d826 	beq	r2,zero,802b1c8 <___vfprintf_internal_r+0x11d8>
 802a668:	d9402d17 	ldw	r5,180(sp)
 802a66c:	d8c02917 	ldw	r3,164(sp)
 802a670:	d8002785 	stb	zero,158(sp)
 802a674:	28800204 	addi	r2,r5,8
 802a678:	2cc00017 	ldw	r19,0(r5)
 802a67c:	2d800117 	ldw	r22,4(r5)
 802a680:	18048f16 	blt	r3,zero,802b8c0 <___vfprintf_internal_r+0x18d0>
 802a684:	013fdfc4 	movi	r4,-129
 802a688:	9d86b03a 	or	r3,r19,r22
 802a68c:	d8802d15 	stw	r2,180(sp)
 802a690:	9124703a 	and	r18,r18,r4
 802a694:	1802d91e 	bne	r3,zero,802b1fc <___vfprintf_internal_r+0x120c>
 802a698:	d8c02917 	ldw	r3,164(sp)
 802a69c:	0039883a 	mov	fp,zero
 802a6a0:	1805c326 	beq	r3,zero,802bdb0 <___vfprintf_internal_r+0x1dc0>
 802a6a4:	0027883a 	mov	r19,zero
 802a6a8:	002d883a 	mov	r22,zero
 802a6ac:	dc001e04 	addi	r16,sp,120
 802a6b0:	9806d0fa 	srli	r3,r19,3
 802a6b4:	b008977a 	slli	r4,r22,29
 802a6b8:	b02cd0fa 	srli	r22,r22,3
 802a6bc:	9cc001cc 	andi	r19,r19,7
 802a6c0:	98800c04 	addi	r2,r19,48
 802a6c4:	843fffc4 	addi	r16,r16,-1
 802a6c8:	20e6b03a 	or	r19,r4,r3
 802a6cc:	80800005 	stb	r2,0(r16)
 802a6d0:	9d86b03a 	or	r3,r19,r22
 802a6d4:	183ff61e 	bne	r3,zero,802a6b0 <_gp+0xfffe8fa4>
 802a6d8:	90c0004c 	andi	r3,r18,1
 802a6dc:	18013b26 	beq	r3,zero,802abcc <___vfprintf_internal_r+0xbdc>
 802a6e0:	10803fcc 	andi	r2,r2,255
 802a6e4:	1080201c 	xori	r2,r2,128
 802a6e8:	10bfe004 	addi	r2,r2,-128
 802a6ec:	00c00c04 	movi	r3,48
 802a6f0:	10c13626 	beq	r2,r3,802abcc <___vfprintf_internal_r+0xbdc>
 802a6f4:	80ffffc5 	stb	r3,-1(r16)
 802a6f8:	d8c02817 	ldw	r3,160(sp)
 802a6fc:	80bfffc4 	addi	r2,r16,-1
 802a700:	1021883a 	mov	r16,r2
 802a704:	1887c83a 	sub	r3,r3,r2
 802a708:	d8c02e15 	stw	r3,184(sp)
 802a70c:	d8802e17 	ldw	r2,184(sp)
 802a710:	d9002917 	ldw	r4,164(sp)
 802a714:	1100010e 	bge	r2,r4,802a71c <___vfprintf_internal_r+0x72c>
 802a718:	2005883a 	mov	r2,r4
 802a71c:	d8802a15 	stw	r2,168(sp)
 802a720:	d8003215 	stw	zero,200(sp)
 802a724:	e7003fcc 	andi	fp,fp,255
 802a728:	e700201c 	xori	fp,fp,128
 802a72c:	e73fe004 	addi	fp,fp,-128
 802a730:	e0000326 	beq	fp,zero,802a740 <___vfprintf_internal_r+0x750>
 802a734:	d8c02a17 	ldw	r3,168(sp)
 802a738:	18c00044 	addi	r3,r3,1
 802a73c:	d8c02a15 	stw	r3,168(sp)
 802a740:	90c0008c 	andi	r3,r18,2
 802a744:	d8c02b15 	stw	r3,172(sp)
 802a748:	18000326 	beq	r3,zero,802a758 <___vfprintf_internal_r+0x768>
 802a74c:	d8c02a17 	ldw	r3,168(sp)
 802a750:	18c00084 	addi	r3,r3,2
 802a754:	d8c02a15 	stw	r3,168(sp)
 802a758:	90c0210c 	andi	r3,r18,132
 802a75c:	d8c03015 	stw	r3,192(sp)
 802a760:	1801a31e 	bne	r3,zero,802adf0 <___vfprintf_internal_r+0xe00>
 802a764:	d9003117 	ldw	r4,196(sp)
 802a768:	d8c02a17 	ldw	r3,168(sp)
 802a76c:	20e7c83a 	sub	r19,r4,r3
 802a770:	04c19f0e 	bge	zero,r19,802adf0 <___vfprintf_internal_r+0xe00>
 802a774:	02400404 	movi	r9,16
 802a778:	d8c02017 	ldw	r3,128(sp)
 802a77c:	d8801f17 	ldw	r2,124(sp)
 802a780:	4cc50d0e 	bge	r9,r19,802bbb8 <___vfprintf_internal_r+0x1bc8>
 802a784:	014200f4 	movhi	r5,2051
 802a788:	295e3f84 	addi	r5,r5,30974
 802a78c:	dc403b15 	stw	r17,236(sp)
 802a790:	d9403515 	stw	r5,212(sp)
 802a794:	9823883a 	mov	r17,r19
 802a798:	482d883a 	mov	r22,r9
 802a79c:	9027883a 	mov	r19,r18
 802a7a0:	070001c4 	movi	fp,7
 802a7a4:	8025883a 	mov	r18,r16
 802a7a8:	dc002c17 	ldw	r16,176(sp)
 802a7ac:	00000306 	br	802a7bc <___vfprintf_internal_r+0x7cc>
 802a7b0:	8c7ffc04 	addi	r17,r17,-16
 802a7b4:	42000204 	addi	r8,r8,8
 802a7b8:	b440130e 	bge	r22,r17,802a808 <___vfprintf_internal_r+0x818>
 802a7bc:	010200f4 	movhi	r4,2051
 802a7c0:	18c00404 	addi	r3,r3,16
 802a7c4:	10800044 	addi	r2,r2,1
 802a7c8:	211e3f84 	addi	r4,r4,30974
 802a7cc:	41000015 	stw	r4,0(r8)
 802a7d0:	45800115 	stw	r22,4(r8)
 802a7d4:	d8c02015 	stw	r3,128(sp)
 802a7d8:	d8801f15 	stw	r2,124(sp)
 802a7dc:	e0bff40e 	bge	fp,r2,802a7b0 <_gp+0xfffe90a4>
 802a7e0:	d9801e04 	addi	r6,sp,120
 802a7e4:	b80b883a 	mov	r5,r23
 802a7e8:	8009883a 	mov	r4,r16
 802a7ec:	8030d500 	call	8030d50 <__sprint_r>
 802a7f0:	103f011e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802a7f4:	8c7ffc04 	addi	r17,r17,-16
 802a7f8:	d8c02017 	ldw	r3,128(sp)
 802a7fc:	d8801f17 	ldw	r2,124(sp)
 802a800:	da000404 	addi	r8,sp,16
 802a804:	b47fed16 	blt	r22,r17,802a7bc <_gp+0xfffe90b0>
 802a808:	9021883a 	mov	r16,r18
 802a80c:	9825883a 	mov	r18,r19
 802a810:	8827883a 	mov	r19,r17
 802a814:	dc403b17 	ldw	r17,236(sp)
 802a818:	d9403517 	ldw	r5,212(sp)
 802a81c:	98c7883a 	add	r3,r19,r3
 802a820:	10800044 	addi	r2,r2,1
 802a824:	41400015 	stw	r5,0(r8)
 802a828:	44c00115 	stw	r19,4(r8)
 802a82c:	d8c02015 	stw	r3,128(sp)
 802a830:	d8801f15 	stw	r2,124(sp)
 802a834:	010001c4 	movi	r4,7
 802a838:	2082a316 	blt	r4,r2,802b2c8 <___vfprintf_internal_r+0x12d8>
 802a83c:	df002787 	ldb	fp,158(sp)
 802a840:	42000204 	addi	r8,r8,8
 802a844:	e0000c26 	beq	fp,zero,802a878 <___vfprintf_internal_r+0x888>
 802a848:	d8801f17 	ldw	r2,124(sp)
 802a84c:	d9002784 	addi	r4,sp,158
 802a850:	18c00044 	addi	r3,r3,1
 802a854:	10800044 	addi	r2,r2,1
 802a858:	41000015 	stw	r4,0(r8)
 802a85c:	01000044 	movi	r4,1
 802a860:	41000115 	stw	r4,4(r8)
 802a864:	d8c02015 	stw	r3,128(sp)
 802a868:	d8801f15 	stw	r2,124(sp)
 802a86c:	010001c4 	movi	r4,7
 802a870:	20823c16 	blt	r4,r2,802b164 <___vfprintf_internal_r+0x1174>
 802a874:	42000204 	addi	r8,r8,8
 802a878:	d8802b17 	ldw	r2,172(sp)
 802a87c:	10000c26 	beq	r2,zero,802a8b0 <___vfprintf_internal_r+0x8c0>
 802a880:	d8801f17 	ldw	r2,124(sp)
 802a884:	d9002704 	addi	r4,sp,156
 802a888:	18c00084 	addi	r3,r3,2
 802a88c:	10800044 	addi	r2,r2,1
 802a890:	41000015 	stw	r4,0(r8)
 802a894:	01000084 	movi	r4,2
 802a898:	41000115 	stw	r4,4(r8)
 802a89c:	d8c02015 	stw	r3,128(sp)
 802a8a0:	d8801f15 	stw	r2,124(sp)
 802a8a4:	010001c4 	movi	r4,7
 802a8a8:	20823616 	blt	r4,r2,802b184 <___vfprintf_internal_r+0x1194>
 802a8ac:	42000204 	addi	r8,r8,8
 802a8b0:	d9003017 	ldw	r4,192(sp)
 802a8b4:	00802004 	movi	r2,128
 802a8b8:	20819926 	beq	r4,r2,802af20 <___vfprintf_internal_r+0xf30>
 802a8bc:	d9402917 	ldw	r5,164(sp)
 802a8c0:	d8802e17 	ldw	r2,184(sp)
 802a8c4:	28adc83a 	sub	r22,r5,r2
 802a8c8:	0580310e 	bge	zero,r22,802a990 <___vfprintf_internal_r+0x9a0>
 802a8cc:	07000404 	movi	fp,16
 802a8d0:	d8801f17 	ldw	r2,124(sp)
 802a8d4:	e584140e 	bge	fp,r22,802b928 <___vfprintf_internal_r+0x1938>
 802a8d8:	014200f4 	movhi	r5,2051
 802a8dc:	295e3b84 	addi	r5,r5,30958
 802a8e0:	dc402915 	stw	r17,164(sp)
 802a8e4:	d9402b15 	stw	r5,172(sp)
 802a8e8:	b023883a 	mov	r17,r22
 802a8ec:	04c001c4 	movi	r19,7
 802a8f0:	a82d883a 	mov	r22,r21
 802a8f4:	902b883a 	mov	r21,r18
 802a8f8:	8025883a 	mov	r18,r16
 802a8fc:	dc002c17 	ldw	r16,176(sp)
 802a900:	00000306 	br	802a910 <___vfprintf_internal_r+0x920>
 802a904:	8c7ffc04 	addi	r17,r17,-16
 802a908:	42000204 	addi	r8,r8,8
 802a90c:	e440110e 	bge	fp,r17,802a954 <___vfprintf_internal_r+0x964>
 802a910:	18c00404 	addi	r3,r3,16
 802a914:	10800044 	addi	r2,r2,1
 802a918:	45000015 	stw	r20,0(r8)
 802a91c:	47000115 	stw	fp,4(r8)
 802a920:	d8c02015 	stw	r3,128(sp)
 802a924:	d8801f15 	stw	r2,124(sp)
 802a928:	98bff60e 	bge	r19,r2,802a904 <_gp+0xfffe91f8>
 802a92c:	d9801e04 	addi	r6,sp,120
 802a930:	b80b883a 	mov	r5,r23
 802a934:	8009883a 	mov	r4,r16
 802a938:	8030d500 	call	8030d50 <__sprint_r>
 802a93c:	103eae1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802a940:	8c7ffc04 	addi	r17,r17,-16
 802a944:	d8c02017 	ldw	r3,128(sp)
 802a948:	d8801f17 	ldw	r2,124(sp)
 802a94c:	da000404 	addi	r8,sp,16
 802a950:	e47fef16 	blt	fp,r17,802a910 <_gp+0xfffe9204>
 802a954:	9021883a 	mov	r16,r18
 802a958:	a825883a 	mov	r18,r21
 802a95c:	b02b883a 	mov	r21,r22
 802a960:	882d883a 	mov	r22,r17
 802a964:	dc402917 	ldw	r17,164(sp)
 802a968:	d9002b17 	ldw	r4,172(sp)
 802a96c:	1d87883a 	add	r3,r3,r22
 802a970:	10800044 	addi	r2,r2,1
 802a974:	41000015 	stw	r4,0(r8)
 802a978:	45800115 	stw	r22,4(r8)
 802a97c:	d8c02015 	stw	r3,128(sp)
 802a980:	d8801f15 	stw	r2,124(sp)
 802a984:	010001c4 	movi	r4,7
 802a988:	2081ee16 	blt	r4,r2,802b144 <___vfprintf_internal_r+0x1154>
 802a98c:	42000204 	addi	r8,r8,8
 802a990:	9080400c 	andi	r2,r18,256
 802a994:	1001181e 	bne	r2,zero,802adf8 <___vfprintf_internal_r+0xe08>
 802a998:	d9402e17 	ldw	r5,184(sp)
 802a99c:	d8801f17 	ldw	r2,124(sp)
 802a9a0:	44000015 	stw	r16,0(r8)
 802a9a4:	1947883a 	add	r3,r3,r5
 802a9a8:	10800044 	addi	r2,r2,1
 802a9ac:	41400115 	stw	r5,4(r8)
 802a9b0:	d8c02015 	stw	r3,128(sp)
 802a9b4:	d8801f15 	stw	r2,124(sp)
 802a9b8:	010001c4 	movi	r4,7
 802a9bc:	2081d316 	blt	r4,r2,802b10c <___vfprintf_internal_r+0x111c>
 802a9c0:	42000204 	addi	r8,r8,8
 802a9c4:	9480010c 	andi	r18,r18,4
 802a9c8:	90003226 	beq	r18,zero,802aa94 <___vfprintf_internal_r+0xaa4>
 802a9cc:	d9403117 	ldw	r5,196(sp)
 802a9d0:	d8802a17 	ldw	r2,168(sp)
 802a9d4:	28a1c83a 	sub	r16,r5,r2
 802a9d8:	04002e0e 	bge	zero,r16,802aa94 <___vfprintf_internal_r+0xaa4>
 802a9dc:	04400404 	movi	r17,16
 802a9e0:	d8801f17 	ldw	r2,124(sp)
 802a9e4:	8c04a20e 	bge	r17,r16,802bc70 <___vfprintf_internal_r+0x1c80>
 802a9e8:	014200f4 	movhi	r5,2051
 802a9ec:	295e3f84 	addi	r5,r5,30974
 802a9f0:	d9403515 	stw	r5,212(sp)
 802a9f4:	048001c4 	movi	r18,7
 802a9f8:	dcc02c17 	ldw	r19,176(sp)
 802a9fc:	00000306 	br	802aa0c <___vfprintf_internal_r+0xa1c>
 802aa00:	843ffc04 	addi	r16,r16,-16
 802aa04:	42000204 	addi	r8,r8,8
 802aa08:	8c00130e 	bge	r17,r16,802aa58 <___vfprintf_internal_r+0xa68>
 802aa0c:	010200f4 	movhi	r4,2051
 802aa10:	18c00404 	addi	r3,r3,16
 802aa14:	10800044 	addi	r2,r2,1
 802aa18:	211e3f84 	addi	r4,r4,30974
 802aa1c:	41000015 	stw	r4,0(r8)
 802aa20:	44400115 	stw	r17,4(r8)
 802aa24:	d8c02015 	stw	r3,128(sp)
 802aa28:	d8801f15 	stw	r2,124(sp)
 802aa2c:	90bff40e 	bge	r18,r2,802aa00 <_gp+0xfffe92f4>
 802aa30:	d9801e04 	addi	r6,sp,120
 802aa34:	b80b883a 	mov	r5,r23
 802aa38:	9809883a 	mov	r4,r19
 802aa3c:	8030d500 	call	8030d50 <__sprint_r>
 802aa40:	103e6d1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802aa44:	843ffc04 	addi	r16,r16,-16
 802aa48:	d8c02017 	ldw	r3,128(sp)
 802aa4c:	d8801f17 	ldw	r2,124(sp)
 802aa50:	da000404 	addi	r8,sp,16
 802aa54:	8c3fed16 	blt	r17,r16,802aa0c <_gp+0xfffe9300>
 802aa58:	d9403517 	ldw	r5,212(sp)
 802aa5c:	1c07883a 	add	r3,r3,r16
 802aa60:	10800044 	addi	r2,r2,1
 802aa64:	41400015 	stw	r5,0(r8)
 802aa68:	44000115 	stw	r16,4(r8)
 802aa6c:	d8c02015 	stw	r3,128(sp)
 802aa70:	d8801f15 	stw	r2,124(sp)
 802aa74:	010001c4 	movi	r4,7
 802aa78:	2080060e 	bge	r4,r2,802aa94 <___vfprintf_internal_r+0xaa4>
 802aa7c:	d9002c17 	ldw	r4,176(sp)
 802aa80:	d9801e04 	addi	r6,sp,120
 802aa84:	b80b883a 	mov	r5,r23
 802aa88:	8030d500 	call	8030d50 <__sprint_r>
 802aa8c:	103e5a1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802aa90:	d8c02017 	ldw	r3,128(sp)
 802aa94:	d8803117 	ldw	r2,196(sp)
 802aa98:	d9002a17 	ldw	r4,168(sp)
 802aa9c:	1100010e 	bge	r2,r4,802aaa4 <___vfprintf_internal_r+0xab4>
 802aaa0:	2005883a 	mov	r2,r4
 802aaa4:	d9402f17 	ldw	r5,188(sp)
 802aaa8:	288b883a 	add	r5,r5,r2
 802aaac:	d9402f15 	stw	r5,188(sp)
 802aab0:	18019e1e 	bne	r3,zero,802b12c <___vfprintf_internal_r+0x113c>
 802aab4:	a8800007 	ldb	r2,0(r21)
 802aab8:	d8001f15 	stw	zero,124(sp)
 802aabc:	da000404 	addi	r8,sp,16
 802aac0:	103d851e 	bne	r2,zero,802a0d8 <_gp+0xfffe89cc>
 802aac4:	a821883a 	mov	r16,r21
 802aac8:	003d9b06 	br	802a138 <_gp+0xfffe8a2c>
 802aacc:	18c03fcc 	andi	r3,r3,255
 802aad0:	1805c11e 	bne	r3,zero,802c1d8 <___vfprintf_internal_r+0x21e8>
 802aad4:	94800414 	ori	r18,r18,16
 802aad8:	9080080c 	andi	r2,r18,32
 802aadc:	10020c26 	beq	r2,zero,802b310 <___vfprintf_internal_r+0x1320>
 802aae0:	d8802d17 	ldw	r2,180(sp)
 802aae4:	d9002917 	ldw	r4,164(sp)
 802aae8:	d8002785 	stb	zero,158(sp)
 802aaec:	10c00204 	addi	r3,r2,8
 802aaf0:	14c00017 	ldw	r19,0(r2)
 802aaf4:	15800117 	ldw	r22,4(r2)
 802aaf8:	20040f16 	blt	r4,zero,802bb38 <___vfprintf_internal_r+0x1b48>
 802aafc:	013fdfc4 	movi	r4,-129
 802ab00:	9d84b03a 	or	r2,r19,r22
 802ab04:	d8c02d15 	stw	r3,180(sp)
 802ab08:	9124703a 	and	r18,r18,r4
 802ab0c:	0039883a 	mov	fp,zero
 802ab10:	103e891e 	bne	r2,zero,802a538 <_gp+0xfffe8e2c>
 802ab14:	d9002917 	ldw	r4,164(sp)
 802ab18:	2002c11e 	bne	r4,zero,802b620 <___vfprintf_internal_r+0x1630>
 802ab1c:	d8002915 	stw	zero,164(sp)
 802ab20:	d8002e15 	stw	zero,184(sp)
 802ab24:	dc001e04 	addi	r16,sp,120
 802ab28:	003ef806 	br	802a70c <_gp+0xfffe9000>
 802ab2c:	18c03fcc 	andi	r3,r3,255
 802ab30:	18059d1e 	bne	r3,zero,802c1a8 <___vfprintf_internal_r+0x21b8>
 802ab34:	014200f4 	movhi	r5,2051
 802ab38:	295e2f04 	addi	r5,r5,30908
 802ab3c:	d9403915 	stw	r5,228(sp)
 802ab40:	9080080c 	andi	r2,r18,32
 802ab44:	10005226 	beq	r2,zero,802ac90 <___vfprintf_internal_r+0xca0>
 802ab48:	d8802d17 	ldw	r2,180(sp)
 802ab4c:	14c00017 	ldw	r19,0(r2)
 802ab50:	15800117 	ldw	r22,4(r2)
 802ab54:	10800204 	addi	r2,r2,8
 802ab58:	d8802d15 	stw	r2,180(sp)
 802ab5c:	9080004c 	andi	r2,r18,1
 802ab60:	10019026 	beq	r2,zero,802b1a4 <___vfprintf_internal_r+0x11b4>
 802ab64:	9d84b03a 	or	r2,r19,r22
 802ab68:	10036926 	beq	r2,zero,802b910 <___vfprintf_internal_r+0x1920>
 802ab6c:	d8c02917 	ldw	r3,164(sp)
 802ab70:	00800c04 	movi	r2,48
 802ab74:	d8802705 	stb	r2,156(sp)
 802ab78:	dc402745 	stb	r17,157(sp)
 802ab7c:	d8002785 	stb	zero,158(sp)
 802ab80:	90800094 	ori	r2,r18,2
 802ab84:	18045d16 	blt	r3,zero,802bcfc <___vfprintf_internal_r+0x1d0c>
 802ab88:	00bfdfc4 	movi	r2,-129
 802ab8c:	90a4703a 	and	r18,r18,r2
 802ab90:	94800094 	ori	r18,r18,2
 802ab94:	0039883a 	mov	fp,zero
 802ab98:	d9003917 	ldw	r4,228(sp)
 802ab9c:	dc001e04 	addi	r16,sp,120
 802aba0:	988003cc 	andi	r2,r19,15
 802aba4:	b006973a 	slli	r3,r22,28
 802aba8:	2085883a 	add	r2,r4,r2
 802abac:	9826d13a 	srli	r19,r19,4
 802abb0:	10800003 	ldbu	r2,0(r2)
 802abb4:	b02cd13a 	srli	r22,r22,4
 802abb8:	843fffc4 	addi	r16,r16,-1
 802abbc:	1ce6b03a 	or	r19,r3,r19
 802abc0:	80800005 	stb	r2,0(r16)
 802abc4:	9d84b03a 	or	r2,r19,r22
 802abc8:	103ff51e 	bne	r2,zero,802aba0 <_gp+0xfffe9494>
 802abcc:	d8c02817 	ldw	r3,160(sp)
 802abd0:	1c07c83a 	sub	r3,r3,r16
 802abd4:	d8c02e15 	stw	r3,184(sp)
 802abd8:	003ecc06 	br	802a70c <_gp+0xfffe9000>
 802abdc:	18c03fcc 	andi	r3,r3,255
 802abe0:	183e9f26 	beq	r3,zero,802a660 <_gp+0xfffe8f54>
 802abe4:	d9c02785 	stb	r7,158(sp)
 802abe8:	003e9d06 	br	802a660 <_gp+0xfffe8f54>
 802abec:	00c00044 	movi	r3,1
 802abf0:	01c00ac4 	movi	r7,43
 802abf4:	ac400007 	ldb	r17,0(r21)
 802abf8:	003d5e06 	br	802a174 <_gp+0xfffe8a68>
 802abfc:	94800814 	ori	r18,r18,32
 802ac00:	ac400007 	ldb	r17,0(r21)
 802ac04:	003d5b06 	br	802a174 <_gp+0xfffe8a68>
 802ac08:	d8c02d17 	ldw	r3,180(sp)
 802ac0c:	d8002785 	stb	zero,158(sp)
 802ac10:	1c000017 	ldw	r16,0(r3)
 802ac14:	1cc00104 	addi	r19,r3,4
 802ac18:	80041926 	beq	r16,zero,802bc80 <___vfprintf_internal_r+0x1c90>
 802ac1c:	d9002917 	ldw	r4,164(sp)
 802ac20:	2003d016 	blt	r4,zero,802bb64 <___vfprintf_internal_r+0x1b74>
 802ac24:	200d883a 	mov	r6,r4
 802ac28:	000b883a 	mov	r5,zero
 802ac2c:	8009883a 	mov	r4,r16
 802ac30:	da003d15 	stw	r8,244(sp)
 802ac34:	802f1740 	call	802f174 <memchr>
 802ac38:	da003d17 	ldw	r8,244(sp)
 802ac3c:	10045426 	beq	r2,zero,802bd90 <___vfprintf_internal_r+0x1da0>
 802ac40:	1405c83a 	sub	r2,r2,r16
 802ac44:	d8802e15 	stw	r2,184(sp)
 802ac48:	1003cc16 	blt	r2,zero,802bb7c <___vfprintf_internal_r+0x1b8c>
 802ac4c:	df002783 	ldbu	fp,158(sp)
 802ac50:	d8802a15 	stw	r2,168(sp)
 802ac54:	dcc02d15 	stw	r19,180(sp)
 802ac58:	d8002915 	stw	zero,164(sp)
 802ac5c:	d8003215 	stw	zero,200(sp)
 802ac60:	003eb006 	br	802a724 <_gp+0xfffe9018>
 802ac64:	18c03fcc 	andi	r3,r3,255
 802ac68:	183f9b26 	beq	r3,zero,802aad8 <_gp+0xfffe93cc>
 802ac6c:	d9c02785 	stb	r7,158(sp)
 802ac70:	003f9906 	br	802aad8 <_gp+0xfffe93cc>
 802ac74:	18c03fcc 	andi	r3,r3,255
 802ac78:	1805551e 	bne	r3,zero,802c1d0 <___vfprintf_internal_r+0x21e0>
 802ac7c:	014200f4 	movhi	r5,2051
 802ac80:	295e3404 	addi	r5,r5,30928
 802ac84:	d9403915 	stw	r5,228(sp)
 802ac88:	9080080c 	andi	r2,r18,32
 802ac8c:	103fae1e 	bne	r2,zero,802ab48 <_gp+0xfffe943c>
 802ac90:	9080040c 	andi	r2,r18,16
 802ac94:	1002de26 	beq	r2,zero,802b810 <___vfprintf_internal_r+0x1820>
 802ac98:	d8c02d17 	ldw	r3,180(sp)
 802ac9c:	002d883a 	mov	r22,zero
 802aca0:	1cc00017 	ldw	r19,0(r3)
 802aca4:	18c00104 	addi	r3,r3,4
 802aca8:	d8c02d15 	stw	r3,180(sp)
 802acac:	003fab06 	br	802ab5c <_gp+0xfffe9450>
 802acb0:	38803fcc 	andi	r2,r7,255
 802acb4:	1080201c 	xori	r2,r2,128
 802acb8:	10bfe004 	addi	r2,r2,-128
 802acbc:	1002d21e 	bne	r2,zero,802b808 <___vfprintf_internal_r+0x1818>
 802acc0:	00c00044 	movi	r3,1
 802acc4:	01c00804 	movi	r7,32
 802acc8:	ac400007 	ldb	r17,0(r21)
 802accc:	003d2906 	br	802a174 <_gp+0xfffe8a68>
 802acd0:	94800054 	ori	r18,r18,1
 802acd4:	ac400007 	ldb	r17,0(r21)
 802acd8:	003d2606 	br	802a174 <_gp+0xfffe8a68>
 802acdc:	18c03fcc 	andi	r3,r3,255
 802ace0:	183e0526 	beq	r3,zero,802a4f8 <_gp+0xfffe8dec>
 802ace4:	d9c02785 	stb	r7,158(sp)
 802ace8:	003e0306 	br	802a4f8 <_gp+0xfffe8dec>
 802acec:	94801014 	ori	r18,r18,64
 802acf0:	ac400007 	ldb	r17,0(r21)
 802acf4:	003d1f06 	br	802a174 <_gp+0xfffe8a68>
 802acf8:	ac400007 	ldb	r17,0(r21)
 802acfc:	8a438726 	beq	r17,r9,802bb1c <___vfprintf_internal_r+0x1b2c>
 802ad00:	94800414 	ori	r18,r18,16
 802ad04:	003d1b06 	br	802a174 <_gp+0xfffe8a68>
 802ad08:	18c03fcc 	andi	r3,r3,255
 802ad0c:	1805341e 	bne	r3,zero,802c1e0 <___vfprintf_internal_r+0x21f0>
 802ad10:	9080080c 	andi	r2,r18,32
 802ad14:	1002cd26 	beq	r2,zero,802b84c <___vfprintf_internal_r+0x185c>
 802ad18:	d9402d17 	ldw	r5,180(sp)
 802ad1c:	d9002f17 	ldw	r4,188(sp)
 802ad20:	28800017 	ldw	r2,0(r5)
 802ad24:	2007d7fa 	srai	r3,r4,31
 802ad28:	29400104 	addi	r5,r5,4
 802ad2c:	d9402d15 	stw	r5,180(sp)
 802ad30:	11000015 	stw	r4,0(r2)
 802ad34:	10c00115 	stw	r3,4(r2)
 802ad38:	003ce506 	br	802a0d0 <_gp+0xfffe89c4>
 802ad3c:	d8c02d17 	ldw	r3,180(sp)
 802ad40:	d9002d17 	ldw	r4,180(sp)
 802ad44:	d8002785 	stb	zero,158(sp)
 802ad48:	18800017 	ldw	r2,0(r3)
 802ad4c:	21000104 	addi	r4,r4,4
 802ad50:	00c00044 	movi	r3,1
 802ad54:	d8c02a15 	stw	r3,168(sp)
 802ad58:	d8801405 	stb	r2,80(sp)
 802ad5c:	d9002d15 	stw	r4,180(sp)
 802ad60:	d8c02e15 	stw	r3,184(sp)
 802ad64:	d8002915 	stw	zero,164(sp)
 802ad68:	d8003215 	stw	zero,200(sp)
 802ad6c:	dc001404 	addi	r16,sp,80
 802ad70:	0039883a 	mov	fp,zero
 802ad74:	003e7206 	br	802a740 <_gp+0xfffe9034>
 802ad78:	010200f4 	movhi	r4,2051
 802ad7c:	211e3404 	addi	r4,r4,30928
 802ad80:	0039883a 	mov	fp,zero
 802ad84:	d9003915 	stw	r4,228(sp)
 802ad88:	04401e04 	movi	r17,120
 802ad8c:	003f8206 	br	802ab98 <_gp+0xfffe948c>
 802ad90:	18c03fcc 	andi	r3,r3,255
 802ad94:	1805061e 	bne	r3,zero,802c1b0 <___vfprintf_internal_r+0x21c0>
 802ad98:	883d9126 	beq	r17,zero,802a3e0 <_gp+0xfffe8cd4>
 802ad9c:	00c00044 	movi	r3,1
 802ada0:	d8c02a15 	stw	r3,168(sp)
 802ada4:	dc401405 	stb	r17,80(sp)
 802ada8:	d8002785 	stb	zero,158(sp)
 802adac:	003fec06 	br	802ad60 <_gp+0xfffe9654>
 802adb0:	014200f4 	movhi	r5,2051
 802adb4:	295e3404 	addi	r5,r5,30928
 802adb8:	d9403915 	stw	r5,228(sp)
 802adbc:	d8c02d15 	stw	r3,180(sp)
 802adc0:	1025883a 	mov	r18,r2
 802adc4:	04401e04 	movi	r17,120
 802adc8:	9d84b03a 	or	r2,r19,r22
 802adcc:	1000fc1e 	bne	r2,zero,802b1c0 <___vfprintf_internal_r+0x11d0>
 802add0:	0039883a 	mov	fp,zero
 802add4:	00800084 	movi	r2,2
 802add8:	10803fcc 	andi	r2,r2,255
 802addc:	00c00044 	movi	r3,1
 802ade0:	10c20f26 	beq	r2,r3,802b620 <___vfprintf_internal_r+0x1630>
 802ade4:	00c00084 	movi	r3,2
 802ade8:	10fd6326 	beq	r2,r3,802a378 <_gp+0xfffe8c6c>
 802adec:	003e2d06 	br	802a6a4 <_gp+0xfffe8f98>
 802adf0:	d8c02017 	ldw	r3,128(sp)
 802adf4:	003e9306 	br	802a844 <_gp+0xfffe9138>
 802adf8:	00801944 	movi	r2,101
 802adfc:	14407e0e 	bge	r2,r17,802aff8 <___vfprintf_internal_r+0x1008>
 802ae00:	d9003617 	ldw	r4,216(sp)
 802ae04:	d9403817 	ldw	r5,224(sp)
 802ae08:	000d883a 	mov	r6,zero
 802ae0c:	000f883a 	mov	r7,zero
 802ae10:	d8c03c15 	stw	r3,240(sp)
 802ae14:	da003d15 	stw	r8,244(sp)
 802ae18:	8027c740 	call	8027c74 <__eqdf2>
 802ae1c:	d8c03c17 	ldw	r3,240(sp)
 802ae20:	da003d17 	ldw	r8,244(sp)
 802ae24:	1000f71e 	bne	r2,zero,802b204 <___vfprintf_internal_r+0x1214>
 802ae28:	d8801f17 	ldw	r2,124(sp)
 802ae2c:	010200f4 	movhi	r4,2051
 802ae30:	211e3b04 	addi	r4,r4,30956
 802ae34:	18c00044 	addi	r3,r3,1
 802ae38:	10800044 	addi	r2,r2,1
 802ae3c:	41000015 	stw	r4,0(r8)
 802ae40:	01000044 	movi	r4,1
 802ae44:	41000115 	stw	r4,4(r8)
 802ae48:	d8c02015 	stw	r3,128(sp)
 802ae4c:	d8801f15 	stw	r2,124(sp)
 802ae50:	010001c4 	movi	r4,7
 802ae54:	2082b816 	blt	r4,r2,802b938 <___vfprintf_internal_r+0x1948>
 802ae58:	42000204 	addi	r8,r8,8
 802ae5c:	d8802617 	ldw	r2,152(sp)
 802ae60:	d9403317 	ldw	r5,204(sp)
 802ae64:	11400216 	blt	r2,r5,802ae70 <___vfprintf_internal_r+0xe80>
 802ae68:	9080004c 	andi	r2,r18,1
 802ae6c:	103ed526 	beq	r2,zero,802a9c4 <_gp+0xfffe92b8>
 802ae70:	d8803717 	ldw	r2,220(sp)
 802ae74:	d9003417 	ldw	r4,208(sp)
 802ae78:	d9403717 	ldw	r5,220(sp)
 802ae7c:	1887883a 	add	r3,r3,r2
 802ae80:	d8801f17 	ldw	r2,124(sp)
 802ae84:	41000015 	stw	r4,0(r8)
 802ae88:	41400115 	stw	r5,4(r8)
 802ae8c:	10800044 	addi	r2,r2,1
 802ae90:	d8c02015 	stw	r3,128(sp)
 802ae94:	d8801f15 	stw	r2,124(sp)
 802ae98:	010001c4 	movi	r4,7
 802ae9c:	20832916 	blt	r4,r2,802bb44 <___vfprintf_internal_r+0x1b54>
 802aea0:	42000204 	addi	r8,r8,8
 802aea4:	d8803317 	ldw	r2,204(sp)
 802aea8:	143fffc4 	addi	r16,r2,-1
 802aeac:	043ec50e 	bge	zero,r16,802a9c4 <_gp+0xfffe92b8>
 802aeb0:	04400404 	movi	r17,16
 802aeb4:	d8801f17 	ldw	r2,124(sp)
 802aeb8:	8c00880e 	bge	r17,r16,802b0dc <___vfprintf_internal_r+0x10ec>
 802aebc:	014200f4 	movhi	r5,2051
 802aec0:	295e3b84 	addi	r5,r5,30958
 802aec4:	d9402b15 	stw	r5,172(sp)
 802aec8:	058001c4 	movi	r22,7
 802aecc:	dcc02c17 	ldw	r19,176(sp)
 802aed0:	00000306 	br	802aee0 <___vfprintf_internal_r+0xef0>
 802aed4:	42000204 	addi	r8,r8,8
 802aed8:	843ffc04 	addi	r16,r16,-16
 802aedc:	8c00820e 	bge	r17,r16,802b0e8 <___vfprintf_internal_r+0x10f8>
 802aee0:	18c00404 	addi	r3,r3,16
 802aee4:	10800044 	addi	r2,r2,1
 802aee8:	45000015 	stw	r20,0(r8)
 802aeec:	44400115 	stw	r17,4(r8)
 802aef0:	d8c02015 	stw	r3,128(sp)
 802aef4:	d8801f15 	stw	r2,124(sp)
 802aef8:	b0bff60e 	bge	r22,r2,802aed4 <_gp+0xfffe97c8>
 802aefc:	d9801e04 	addi	r6,sp,120
 802af00:	b80b883a 	mov	r5,r23
 802af04:	9809883a 	mov	r4,r19
 802af08:	8030d500 	call	8030d50 <__sprint_r>
 802af0c:	103d3a1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802af10:	d8c02017 	ldw	r3,128(sp)
 802af14:	d8801f17 	ldw	r2,124(sp)
 802af18:	da000404 	addi	r8,sp,16
 802af1c:	003fee06 	br	802aed8 <_gp+0xfffe97cc>
 802af20:	d9403117 	ldw	r5,196(sp)
 802af24:	d8802a17 	ldw	r2,168(sp)
 802af28:	28adc83a 	sub	r22,r5,r2
 802af2c:	05be630e 	bge	zero,r22,802a8bc <_gp+0xfffe91b0>
 802af30:	07000404 	movi	fp,16
 802af34:	d8801f17 	ldw	r2,124(sp)
 802af38:	e5838f0e 	bge	fp,r22,802bd78 <___vfprintf_internal_r+0x1d88>
 802af3c:	014200f4 	movhi	r5,2051
 802af40:	295e3b84 	addi	r5,r5,30958
 802af44:	dc403015 	stw	r17,192(sp)
 802af48:	d9402b15 	stw	r5,172(sp)
 802af4c:	b023883a 	mov	r17,r22
 802af50:	04c001c4 	movi	r19,7
 802af54:	a82d883a 	mov	r22,r21
 802af58:	902b883a 	mov	r21,r18
 802af5c:	8025883a 	mov	r18,r16
 802af60:	dc002c17 	ldw	r16,176(sp)
 802af64:	00000306 	br	802af74 <___vfprintf_internal_r+0xf84>
 802af68:	8c7ffc04 	addi	r17,r17,-16
 802af6c:	42000204 	addi	r8,r8,8
 802af70:	e440110e 	bge	fp,r17,802afb8 <___vfprintf_internal_r+0xfc8>
 802af74:	18c00404 	addi	r3,r3,16
 802af78:	10800044 	addi	r2,r2,1
 802af7c:	45000015 	stw	r20,0(r8)
 802af80:	47000115 	stw	fp,4(r8)
 802af84:	d8c02015 	stw	r3,128(sp)
 802af88:	d8801f15 	stw	r2,124(sp)
 802af8c:	98bff60e 	bge	r19,r2,802af68 <_gp+0xfffe985c>
 802af90:	d9801e04 	addi	r6,sp,120
 802af94:	b80b883a 	mov	r5,r23
 802af98:	8009883a 	mov	r4,r16
 802af9c:	8030d500 	call	8030d50 <__sprint_r>
 802afa0:	103d151e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802afa4:	8c7ffc04 	addi	r17,r17,-16
 802afa8:	d8c02017 	ldw	r3,128(sp)
 802afac:	d8801f17 	ldw	r2,124(sp)
 802afb0:	da000404 	addi	r8,sp,16
 802afb4:	e47fef16 	blt	fp,r17,802af74 <_gp+0xfffe9868>
 802afb8:	9021883a 	mov	r16,r18
 802afbc:	a825883a 	mov	r18,r21
 802afc0:	b02b883a 	mov	r21,r22
 802afc4:	882d883a 	mov	r22,r17
 802afc8:	dc403017 	ldw	r17,192(sp)
 802afcc:	d9002b17 	ldw	r4,172(sp)
 802afd0:	1d87883a 	add	r3,r3,r22
 802afd4:	10800044 	addi	r2,r2,1
 802afd8:	41000015 	stw	r4,0(r8)
 802afdc:	45800115 	stw	r22,4(r8)
 802afe0:	d8c02015 	stw	r3,128(sp)
 802afe4:	d8801f15 	stw	r2,124(sp)
 802afe8:	010001c4 	movi	r4,7
 802afec:	20818e16 	blt	r4,r2,802b628 <___vfprintf_internal_r+0x1638>
 802aff0:	42000204 	addi	r8,r8,8
 802aff4:	003e3106 	br	802a8bc <_gp+0xfffe91b0>
 802aff8:	d9403317 	ldw	r5,204(sp)
 802affc:	00800044 	movi	r2,1
 802b000:	18c00044 	addi	r3,r3,1
 802b004:	1141530e 	bge	r2,r5,802b554 <___vfprintf_internal_r+0x1564>
 802b008:	dc401f17 	ldw	r17,124(sp)
 802b00c:	00800044 	movi	r2,1
 802b010:	40800115 	stw	r2,4(r8)
 802b014:	8c400044 	addi	r17,r17,1
 802b018:	44000015 	stw	r16,0(r8)
 802b01c:	d8c02015 	stw	r3,128(sp)
 802b020:	dc401f15 	stw	r17,124(sp)
 802b024:	008001c4 	movi	r2,7
 802b028:	14416b16 	blt	r2,r17,802b5d8 <___vfprintf_internal_r+0x15e8>
 802b02c:	42000204 	addi	r8,r8,8
 802b030:	d8803717 	ldw	r2,220(sp)
 802b034:	d9003417 	ldw	r4,208(sp)
 802b038:	8c400044 	addi	r17,r17,1
 802b03c:	10c7883a 	add	r3,r2,r3
 802b040:	40800115 	stw	r2,4(r8)
 802b044:	41000015 	stw	r4,0(r8)
 802b048:	d8c02015 	stw	r3,128(sp)
 802b04c:	dc401f15 	stw	r17,124(sp)
 802b050:	008001c4 	movi	r2,7
 802b054:	14416916 	blt	r2,r17,802b5fc <___vfprintf_internal_r+0x160c>
 802b058:	45800204 	addi	r22,r8,8
 802b05c:	d9003617 	ldw	r4,216(sp)
 802b060:	d9403817 	ldw	r5,224(sp)
 802b064:	000d883a 	mov	r6,zero
 802b068:	000f883a 	mov	r7,zero
 802b06c:	d8c03c15 	stw	r3,240(sp)
 802b070:	8027c740 	call	8027c74 <__eqdf2>
 802b074:	d8c03c17 	ldw	r3,240(sp)
 802b078:	1000bc26 	beq	r2,zero,802b36c <___vfprintf_internal_r+0x137c>
 802b07c:	d9403317 	ldw	r5,204(sp)
 802b080:	84000044 	addi	r16,r16,1
 802b084:	8c400044 	addi	r17,r17,1
 802b088:	28bfffc4 	addi	r2,r5,-1
 802b08c:	1887883a 	add	r3,r3,r2
 802b090:	b0800115 	stw	r2,4(r22)
 802b094:	b4000015 	stw	r16,0(r22)
 802b098:	d8c02015 	stw	r3,128(sp)
 802b09c:	dc401f15 	stw	r17,124(sp)
 802b0a0:	008001c4 	movi	r2,7
 802b0a4:	14414316 	blt	r2,r17,802b5b4 <___vfprintf_internal_r+0x15c4>
 802b0a8:	b5800204 	addi	r22,r22,8
 802b0ac:	d9003a17 	ldw	r4,232(sp)
 802b0b0:	df0022c4 	addi	fp,sp,139
 802b0b4:	8c400044 	addi	r17,r17,1
 802b0b8:	20c7883a 	add	r3,r4,r3
 802b0bc:	b7000015 	stw	fp,0(r22)
 802b0c0:	b1000115 	stw	r4,4(r22)
 802b0c4:	d8c02015 	stw	r3,128(sp)
 802b0c8:	dc401f15 	stw	r17,124(sp)
 802b0cc:	008001c4 	movi	r2,7
 802b0d0:	14400e16 	blt	r2,r17,802b10c <___vfprintf_internal_r+0x111c>
 802b0d4:	b2000204 	addi	r8,r22,8
 802b0d8:	003e3a06 	br	802a9c4 <_gp+0xfffe92b8>
 802b0dc:	010200f4 	movhi	r4,2051
 802b0e0:	211e3b84 	addi	r4,r4,30958
 802b0e4:	d9002b15 	stw	r4,172(sp)
 802b0e8:	d9002b17 	ldw	r4,172(sp)
 802b0ec:	1c07883a 	add	r3,r3,r16
 802b0f0:	44000115 	stw	r16,4(r8)
 802b0f4:	41000015 	stw	r4,0(r8)
 802b0f8:	10800044 	addi	r2,r2,1
 802b0fc:	d8c02015 	stw	r3,128(sp)
 802b100:	d8801f15 	stw	r2,124(sp)
 802b104:	010001c4 	movi	r4,7
 802b108:	20be2d0e 	bge	r4,r2,802a9c0 <_gp+0xfffe92b4>
 802b10c:	d9002c17 	ldw	r4,176(sp)
 802b110:	d9801e04 	addi	r6,sp,120
 802b114:	b80b883a 	mov	r5,r23
 802b118:	8030d500 	call	8030d50 <__sprint_r>
 802b11c:	103cb61e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b120:	d8c02017 	ldw	r3,128(sp)
 802b124:	da000404 	addi	r8,sp,16
 802b128:	003e2606 	br	802a9c4 <_gp+0xfffe92b8>
 802b12c:	d9002c17 	ldw	r4,176(sp)
 802b130:	d9801e04 	addi	r6,sp,120
 802b134:	b80b883a 	mov	r5,r23
 802b138:	8030d500 	call	8030d50 <__sprint_r>
 802b13c:	103e5d26 	beq	r2,zero,802aab4 <_gp+0xfffe93a8>
 802b140:	003cad06 	br	802a3f8 <_gp+0xfffe8cec>
 802b144:	d9002c17 	ldw	r4,176(sp)
 802b148:	d9801e04 	addi	r6,sp,120
 802b14c:	b80b883a 	mov	r5,r23
 802b150:	8030d500 	call	8030d50 <__sprint_r>
 802b154:	103ca81e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b158:	d8c02017 	ldw	r3,128(sp)
 802b15c:	da000404 	addi	r8,sp,16
 802b160:	003e0b06 	br	802a990 <_gp+0xfffe9284>
 802b164:	d9002c17 	ldw	r4,176(sp)
 802b168:	d9801e04 	addi	r6,sp,120
 802b16c:	b80b883a 	mov	r5,r23
 802b170:	8030d500 	call	8030d50 <__sprint_r>
 802b174:	103ca01e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b178:	d8c02017 	ldw	r3,128(sp)
 802b17c:	da000404 	addi	r8,sp,16
 802b180:	003dbd06 	br	802a878 <_gp+0xfffe916c>
 802b184:	d9002c17 	ldw	r4,176(sp)
 802b188:	d9801e04 	addi	r6,sp,120
 802b18c:	b80b883a 	mov	r5,r23
 802b190:	8030d500 	call	8030d50 <__sprint_r>
 802b194:	103c981e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b198:	d8c02017 	ldw	r3,128(sp)
 802b19c:	da000404 	addi	r8,sp,16
 802b1a0:	003dc306 	br	802a8b0 <_gp+0xfffe91a4>
 802b1a4:	d8802917 	ldw	r2,164(sp)
 802b1a8:	d8002785 	stb	zero,158(sp)
 802b1ac:	103f0616 	blt	r2,zero,802adc8 <_gp+0xfffe96bc>
 802b1b0:	00ffdfc4 	movi	r3,-129
 802b1b4:	9d84b03a 	or	r2,r19,r22
 802b1b8:	90e4703a 	and	r18,r18,r3
 802b1bc:	103c6b26 	beq	r2,zero,802a36c <_gp+0xfffe8c60>
 802b1c0:	0039883a 	mov	fp,zero
 802b1c4:	003e7406 	br	802ab98 <_gp+0xfffe948c>
 802b1c8:	9080040c 	andi	r2,r18,16
 802b1cc:	1001b326 	beq	r2,zero,802b89c <___vfprintf_internal_r+0x18ac>
 802b1d0:	d9002d17 	ldw	r4,180(sp)
 802b1d4:	d9402917 	ldw	r5,164(sp)
 802b1d8:	d8002785 	stb	zero,158(sp)
 802b1dc:	20800104 	addi	r2,r4,4
 802b1e0:	24c00017 	ldw	r19,0(r4)
 802b1e4:	002d883a 	mov	r22,zero
 802b1e8:	2801b516 	blt	r5,zero,802b8c0 <___vfprintf_internal_r+0x18d0>
 802b1ec:	00ffdfc4 	movi	r3,-129
 802b1f0:	d8802d15 	stw	r2,180(sp)
 802b1f4:	90e4703a 	and	r18,r18,r3
 802b1f8:	983d2726 	beq	r19,zero,802a698 <_gp+0xfffe8f8c>
 802b1fc:	0039883a 	mov	fp,zero
 802b200:	003d2a06 	br	802a6ac <_gp+0xfffe8fa0>
 802b204:	dc402617 	ldw	r17,152(sp)
 802b208:	0441d30e 	bge	zero,r17,802b958 <___vfprintf_internal_r+0x1968>
 802b20c:	dc403217 	ldw	r17,200(sp)
 802b210:	d8803317 	ldw	r2,204(sp)
 802b214:	1440010e 	bge	r2,r17,802b21c <___vfprintf_internal_r+0x122c>
 802b218:	1023883a 	mov	r17,r2
 802b21c:	04400a0e 	bge	zero,r17,802b248 <___vfprintf_internal_r+0x1258>
 802b220:	d8801f17 	ldw	r2,124(sp)
 802b224:	1c47883a 	add	r3,r3,r17
 802b228:	44000015 	stw	r16,0(r8)
 802b22c:	10800044 	addi	r2,r2,1
 802b230:	44400115 	stw	r17,4(r8)
 802b234:	d8c02015 	stw	r3,128(sp)
 802b238:	d8801f15 	stw	r2,124(sp)
 802b23c:	010001c4 	movi	r4,7
 802b240:	20826516 	blt	r4,r2,802bbd8 <___vfprintf_internal_r+0x1be8>
 802b244:	42000204 	addi	r8,r8,8
 802b248:	88026116 	blt	r17,zero,802bbd0 <___vfprintf_internal_r+0x1be0>
 802b24c:	d9003217 	ldw	r4,200(sp)
 802b250:	2463c83a 	sub	r17,r4,r17
 802b254:	04407b0e 	bge	zero,r17,802b444 <___vfprintf_internal_r+0x1454>
 802b258:	05800404 	movi	r22,16
 802b25c:	d8801f17 	ldw	r2,124(sp)
 802b260:	b4419d0e 	bge	r22,r17,802b8d8 <___vfprintf_internal_r+0x18e8>
 802b264:	010200f4 	movhi	r4,2051
 802b268:	211e3b84 	addi	r4,r4,30958
 802b26c:	d9002b15 	stw	r4,172(sp)
 802b270:	070001c4 	movi	fp,7
 802b274:	dcc02c17 	ldw	r19,176(sp)
 802b278:	00000306 	br	802b288 <___vfprintf_internal_r+0x1298>
 802b27c:	42000204 	addi	r8,r8,8
 802b280:	8c7ffc04 	addi	r17,r17,-16
 802b284:	b441970e 	bge	r22,r17,802b8e4 <___vfprintf_internal_r+0x18f4>
 802b288:	18c00404 	addi	r3,r3,16
 802b28c:	10800044 	addi	r2,r2,1
 802b290:	45000015 	stw	r20,0(r8)
 802b294:	45800115 	stw	r22,4(r8)
 802b298:	d8c02015 	stw	r3,128(sp)
 802b29c:	d8801f15 	stw	r2,124(sp)
 802b2a0:	e0bff60e 	bge	fp,r2,802b27c <_gp+0xfffe9b70>
 802b2a4:	d9801e04 	addi	r6,sp,120
 802b2a8:	b80b883a 	mov	r5,r23
 802b2ac:	9809883a 	mov	r4,r19
 802b2b0:	8030d500 	call	8030d50 <__sprint_r>
 802b2b4:	103c501e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b2b8:	d8c02017 	ldw	r3,128(sp)
 802b2bc:	d8801f17 	ldw	r2,124(sp)
 802b2c0:	da000404 	addi	r8,sp,16
 802b2c4:	003fee06 	br	802b280 <_gp+0xfffe9b74>
 802b2c8:	d9002c17 	ldw	r4,176(sp)
 802b2cc:	d9801e04 	addi	r6,sp,120
 802b2d0:	b80b883a 	mov	r5,r23
 802b2d4:	8030d500 	call	8030d50 <__sprint_r>
 802b2d8:	103c471e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b2dc:	d8c02017 	ldw	r3,128(sp)
 802b2e0:	df002787 	ldb	fp,158(sp)
 802b2e4:	da000404 	addi	r8,sp,16
 802b2e8:	003d5606 	br	802a844 <_gp+0xfffe9138>
 802b2ec:	9080040c 	andi	r2,r18,16
 802b2f0:	10016126 	beq	r2,zero,802b878 <___vfprintf_internal_r+0x1888>
 802b2f4:	d8802d17 	ldw	r2,180(sp)
 802b2f8:	14c00017 	ldw	r19,0(r2)
 802b2fc:	10800104 	addi	r2,r2,4
 802b300:	d8802d15 	stw	r2,180(sp)
 802b304:	982dd7fa 	srai	r22,r19,31
 802b308:	b005883a 	mov	r2,r22
 802b30c:	003c8206 	br	802a518 <_gp+0xfffe8e0c>
 802b310:	9080040c 	andi	r2,r18,16
 802b314:	10003526 	beq	r2,zero,802b3ec <___vfprintf_internal_r+0x13fc>
 802b318:	d9402d17 	ldw	r5,180(sp)
 802b31c:	d8c02917 	ldw	r3,164(sp)
 802b320:	d8002785 	stb	zero,158(sp)
 802b324:	28800104 	addi	r2,r5,4
 802b328:	2cc00017 	ldw	r19,0(r5)
 802b32c:	002d883a 	mov	r22,zero
 802b330:	18003716 	blt	r3,zero,802b410 <___vfprintf_internal_r+0x1420>
 802b334:	00ffdfc4 	movi	r3,-129
 802b338:	d8802d15 	stw	r2,180(sp)
 802b33c:	90e4703a 	and	r18,r18,r3
 802b340:	0039883a 	mov	fp,zero
 802b344:	983df326 	beq	r19,zero,802ab14 <_gp+0xfffe9408>
 802b348:	00800244 	movi	r2,9
 802b34c:	14fc7b36 	bltu	r2,r19,802a53c <_gp+0xfffe8e30>
 802b350:	d8c02817 	ldw	r3,160(sp)
 802b354:	dc001dc4 	addi	r16,sp,119
 802b358:	9cc00c04 	addi	r19,r19,48
 802b35c:	1c07c83a 	sub	r3,r3,r16
 802b360:	dcc01dc5 	stb	r19,119(sp)
 802b364:	d8c02e15 	stw	r3,184(sp)
 802b368:	003ce806 	br	802a70c <_gp+0xfffe9000>
 802b36c:	d8803317 	ldw	r2,204(sp)
 802b370:	143fffc4 	addi	r16,r2,-1
 802b374:	043f4d0e 	bge	zero,r16,802b0ac <_gp+0xfffe99a0>
 802b378:	07000404 	movi	fp,16
 802b37c:	e400810e 	bge	fp,r16,802b584 <___vfprintf_internal_r+0x1594>
 802b380:	014200f4 	movhi	r5,2051
 802b384:	295e3b84 	addi	r5,r5,30958
 802b388:	d9402b15 	stw	r5,172(sp)
 802b38c:	01c001c4 	movi	r7,7
 802b390:	dcc02c17 	ldw	r19,176(sp)
 802b394:	00000306 	br	802b3a4 <___vfprintf_internal_r+0x13b4>
 802b398:	b5800204 	addi	r22,r22,8
 802b39c:	843ffc04 	addi	r16,r16,-16
 802b3a0:	e4007b0e 	bge	fp,r16,802b590 <___vfprintf_internal_r+0x15a0>
 802b3a4:	18c00404 	addi	r3,r3,16
 802b3a8:	8c400044 	addi	r17,r17,1
 802b3ac:	b5000015 	stw	r20,0(r22)
 802b3b0:	b7000115 	stw	fp,4(r22)
 802b3b4:	d8c02015 	stw	r3,128(sp)
 802b3b8:	dc401f15 	stw	r17,124(sp)
 802b3bc:	3c7ff60e 	bge	r7,r17,802b398 <_gp+0xfffe9c8c>
 802b3c0:	d9801e04 	addi	r6,sp,120
 802b3c4:	b80b883a 	mov	r5,r23
 802b3c8:	9809883a 	mov	r4,r19
 802b3cc:	d9c03c15 	stw	r7,240(sp)
 802b3d0:	8030d500 	call	8030d50 <__sprint_r>
 802b3d4:	d9c03c17 	ldw	r7,240(sp)
 802b3d8:	103c071e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b3dc:	d8c02017 	ldw	r3,128(sp)
 802b3e0:	dc401f17 	ldw	r17,124(sp)
 802b3e4:	dd800404 	addi	r22,sp,16
 802b3e8:	003fec06 	br	802b39c <_gp+0xfffe9c90>
 802b3ec:	9080100c 	andi	r2,r18,64
 802b3f0:	d8002785 	stb	zero,158(sp)
 802b3f4:	10010e26 	beq	r2,zero,802b830 <___vfprintf_internal_r+0x1840>
 802b3f8:	d9002d17 	ldw	r4,180(sp)
 802b3fc:	d9402917 	ldw	r5,164(sp)
 802b400:	002d883a 	mov	r22,zero
 802b404:	20800104 	addi	r2,r4,4
 802b408:	24c0000b 	ldhu	r19,0(r4)
 802b40c:	283fc90e 	bge	r5,zero,802b334 <_gp+0xfffe9c28>
 802b410:	d8802d15 	stw	r2,180(sp)
 802b414:	0039883a 	mov	fp,zero
 802b418:	9d84b03a 	or	r2,r19,r22
 802b41c:	103c461e 	bne	r2,zero,802a538 <_gp+0xfffe8e2c>
 802b420:	00800044 	movi	r2,1
 802b424:	003e6c06 	br	802add8 <_gp+0xfffe96cc>
 802b428:	d9002c17 	ldw	r4,176(sp)
 802b42c:	d9801e04 	addi	r6,sp,120
 802b430:	b80b883a 	mov	r5,r23
 802b434:	8030d500 	call	8030d50 <__sprint_r>
 802b438:	103bef1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b43c:	d8c02017 	ldw	r3,128(sp)
 802b440:	da000404 	addi	r8,sp,16
 802b444:	d9003217 	ldw	r4,200(sp)
 802b448:	d8802617 	ldw	r2,152(sp)
 802b44c:	d9403317 	ldw	r5,204(sp)
 802b450:	8123883a 	add	r17,r16,r4
 802b454:	11400216 	blt	r2,r5,802b460 <___vfprintf_internal_r+0x1470>
 802b458:	9100004c 	andi	r4,r18,1
 802b45c:	20000d26 	beq	r4,zero,802b494 <___vfprintf_internal_r+0x14a4>
 802b460:	d9003717 	ldw	r4,220(sp)
 802b464:	d9403417 	ldw	r5,208(sp)
 802b468:	1907883a 	add	r3,r3,r4
 802b46c:	d9001f17 	ldw	r4,124(sp)
 802b470:	41400015 	stw	r5,0(r8)
 802b474:	d9403717 	ldw	r5,220(sp)
 802b478:	21000044 	addi	r4,r4,1
 802b47c:	d8c02015 	stw	r3,128(sp)
 802b480:	41400115 	stw	r5,4(r8)
 802b484:	d9001f15 	stw	r4,124(sp)
 802b488:	014001c4 	movi	r5,7
 802b48c:	2901e816 	blt	r5,r4,802bc30 <___vfprintf_internal_r+0x1c40>
 802b490:	42000204 	addi	r8,r8,8
 802b494:	d9003317 	ldw	r4,204(sp)
 802b498:	8121883a 	add	r16,r16,r4
 802b49c:	2085c83a 	sub	r2,r4,r2
 802b4a0:	8461c83a 	sub	r16,r16,r17
 802b4a4:	1400010e 	bge	r2,r16,802b4ac <___vfprintf_internal_r+0x14bc>
 802b4a8:	1021883a 	mov	r16,r2
 802b4ac:	04000a0e 	bge	zero,r16,802b4d8 <___vfprintf_internal_r+0x14e8>
 802b4b0:	d9001f17 	ldw	r4,124(sp)
 802b4b4:	1c07883a 	add	r3,r3,r16
 802b4b8:	44400015 	stw	r17,0(r8)
 802b4bc:	21000044 	addi	r4,r4,1
 802b4c0:	44000115 	stw	r16,4(r8)
 802b4c4:	d8c02015 	stw	r3,128(sp)
 802b4c8:	d9001f15 	stw	r4,124(sp)
 802b4cc:	014001c4 	movi	r5,7
 802b4d0:	2901fb16 	blt	r5,r4,802bcc0 <___vfprintf_internal_r+0x1cd0>
 802b4d4:	42000204 	addi	r8,r8,8
 802b4d8:	8001f716 	blt	r16,zero,802bcb8 <___vfprintf_internal_r+0x1cc8>
 802b4dc:	1421c83a 	sub	r16,r2,r16
 802b4e0:	043d380e 	bge	zero,r16,802a9c4 <_gp+0xfffe92b8>
 802b4e4:	04400404 	movi	r17,16
 802b4e8:	d8801f17 	ldw	r2,124(sp)
 802b4ec:	8c3efb0e 	bge	r17,r16,802b0dc <_gp+0xfffe99d0>
 802b4f0:	014200f4 	movhi	r5,2051
 802b4f4:	295e3b84 	addi	r5,r5,30958
 802b4f8:	d9402b15 	stw	r5,172(sp)
 802b4fc:	058001c4 	movi	r22,7
 802b500:	dcc02c17 	ldw	r19,176(sp)
 802b504:	00000306 	br	802b514 <___vfprintf_internal_r+0x1524>
 802b508:	42000204 	addi	r8,r8,8
 802b50c:	843ffc04 	addi	r16,r16,-16
 802b510:	8c3ef50e 	bge	r17,r16,802b0e8 <_gp+0xfffe99dc>
 802b514:	18c00404 	addi	r3,r3,16
 802b518:	10800044 	addi	r2,r2,1
 802b51c:	45000015 	stw	r20,0(r8)
 802b520:	44400115 	stw	r17,4(r8)
 802b524:	d8c02015 	stw	r3,128(sp)
 802b528:	d8801f15 	stw	r2,124(sp)
 802b52c:	b0bff60e 	bge	r22,r2,802b508 <_gp+0xfffe9dfc>
 802b530:	d9801e04 	addi	r6,sp,120
 802b534:	b80b883a 	mov	r5,r23
 802b538:	9809883a 	mov	r4,r19
 802b53c:	8030d500 	call	8030d50 <__sprint_r>
 802b540:	103bad1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b544:	d8c02017 	ldw	r3,128(sp)
 802b548:	d8801f17 	ldw	r2,124(sp)
 802b54c:	da000404 	addi	r8,sp,16
 802b550:	003fee06 	br	802b50c <_gp+0xfffe9e00>
 802b554:	9088703a 	and	r4,r18,r2
 802b558:	203eab1e 	bne	r4,zero,802b008 <_gp+0xfffe98fc>
 802b55c:	dc401f17 	ldw	r17,124(sp)
 802b560:	40800115 	stw	r2,4(r8)
 802b564:	44000015 	stw	r16,0(r8)
 802b568:	8c400044 	addi	r17,r17,1
 802b56c:	d8c02015 	stw	r3,128(sp)
 802b570:	dc401f15 	stw	r17,124(sp)
 802b574:	008001c4 	movi	r2,7
 802b578:	14400e16 	blt	r2,r17,802b5b4 <___vfprintf_internal_r+0x15c4>
 802b57c:	45800204 	addi	r22,r8,8
 802b580:	003eca06 	br	802b0ac <_gp+0xfffe99a0>
 802b584:	010200f4 	movhi	r4,2051
 802b588:	211e3b84 	addi	r4,r4,30958
 802b58c:	d9002b15 	stw	r4,172(sp)
 802b590:	d8802b17 	ldw	r2,172(sp)
 802b594:	1c07883a 	add	r3,r3,r16
 802b598:	8c400044 	addi	r17,r17,1
 802b59c:	b0800015 	stw	r2,0(r22)
 802b5a0:	b4000115 	stw	r16,4(r22)
 802b5a4:	d8c02015 	stw	r3,128(sp)
 802b5a8:	dc401f15 	stw	r17,124(sp)
 802b5ac:	008001c4 	movi	r2,7
 802b5b0:	147ebd0e 	bge	r2,r17,802b0a8 <_gp+0xfffe999c>
 802b5b4:	d9002c17 	ldw	r4,176(sp)
 802b5b8:	d9801e04 	addi	r6,sp,120
 802b5bc:	b80b883a 	mov	r5,r23
 802b5c0:	8030d500 	call	8030d50 <__sprint_r>
 802b5c4:	103b8c1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b5c8:	d8c02017 	ldw	r3,128(sp)
 802b5cc:	dc401f17 	ldw	r17,124(sp)
 802b5d0:	dd800404 	addi	r22,sp,16
 802b5d4:	003eb506 	br	802b0ac <_gp+0xfffe99a0>
 802b5d8:	d9002c17 	ldw	r4,176(sp)
 802b5dc:	d9801e04 	addi	r6,sp,120
 802b5e0:	b80b883a 	mov	r5,r23
 802b5e4:	8030d500 	call	8030d50 <__sprint_r>
 802b5e8:	103b831e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b5ec:	d8c02017 	ldw	r3,128(sp)
 802b5f0:	dc401f17 	ldw	r17,124(sp)
 802b5f4:	da000404 	addi	r8,sp,16
 802b5f8:	003e8d06 	br	802b030 <_gp+0xfffe9924>
 802b5fc:	d9002c17 	ldw	r4,176(sp)
 802b600:	d9801e04 	addi	r6,sp,120
 802b604:	b80b883a 	mov	r5,r23
 802b608:	8030d500 	call	8030d50 <__sprint_r>
 802b60c:	103b7a1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b610:	d8c02017 	ldw	r3,128(sp)
 802b614:	dc401f17 	ldw	r17,124(sp)
 802b618:	dd800404 	addi	r22,sp,16
 802b61c:	003e8f06 	br	802b05c <_gp+0xfffe9950>
 802b620:	0027883a 	mov	r19,zero
 802b624:	003f4a06 	br	802b350 <_gp+0xfffe9c44>
 802b628:	d9002c17 	ldw	r4,176(sp)
 802b62c:	d9801e04 	addi	r6,sp,120
 802b630:	b80b883a 	mov	r5,r23
 802b634:	8030d500 	call	8030d50 <__sprint_r>
 802b638:	103b6f1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b63c:	d8c02017 	ldw	r3,128(sp)
 802b640:	da000404 	addi	r8,sp,16
 802b644:	003c9d06 	br	802a8bc <_gp+0xfffe91b0>
 802b648:	04e7c83a 	sub	r19,zero,r19
 802b64c:	9804c03a 	cmpne	r2,r19,zero
 802b650:	05adc83a 	sub	r22,zero,r22
 802b654:	b0adc83a 	sub	r22,r22,r2
 802b658:	d8802917 	ldw	r2,164(sp)
 802b65c:	07000b44 	movi	fp,45
 802b660:	df002785 	stb	fp,158(sp)
 802b664:	10017b16 	blt	r2,zero,802bc54 <___vfprintf_internal_r+0x1c64>
 802b668:	00bfdfc4 	movi	r2,-129
 802b66c:	90a4703a 	and	r18,r18,r2
 802b670:	003bb106 	br	802a538 <_gp+0xfffe8e2c>
 802b674:	d9003617 	ldw	r4,216(sp)
 802b678:	d9403817 	ldw	r5,224(sp)
 802b67c:	da003d15 	stw	r8,244(sp)
 802b680:	80257bc0 	call	80257bc <__fpclassifyd>
 802b684:	da003d17 	ldw	r8,244(sp)
 802b688:	1000f026 	beq	r2,zero,802ba4c <___vfprintf_internal_r+0x1a5c>
 802b68c:	d9002917 	ldw	r4,164(sp)
 802b690:	05bff7c4 	movi	r22,-33
 802b694:	00bfffc4 	movi	r2,-1
 802b698:	8dac703a 	and	r22,r17,r22
 802b69c:	20820026 	beq	r4,r2,802bea0 <___vfprintf_internal_r+0x1eb0>
 802b6a0:	008011c4 	movi	r2,71
 802b6a4:	b081f726 	beq	r22,r2,802be84 <___vfprintf_internal_r+0x1e94>
 802b6a8:	d9003817 	ldw	r4,224(sp)
 802b6ac:	90c04014 	ori	r3,r18,256
 802b6b0:	d8c02b15 	stw	r3,172(sp)
 802b6b4:	20021516 	blt	r4,zero,802bf0c <___vfprintf_internal_r+0x1f1c>
 802b6b8:	dcc03817 	ldw	r19,224(sp)
 802b6bc:	d8002a05 	stb	zero,168(sp)
 802b6c0:	00801984 	movi	r2,102
 802b6c4:	8881f926 	beq	r17,r2,802beac <___vfprintf_internal_r+0x1ebc>
 802b6c8:	00801184 	movi	r2,70
 802b6cc:	88821c26 	beq	r17,r2,802bf40 <___vfprintf_internal_r+0x1f50>
 802b6d0:	00801144 	movi	r2,69
 802b6d4:	b081ef26 	beq	r22,r2,802be94 <___vfprintf_internal_r+0x1ea4>
 802b6d8:	d8c02917 	ldw	r3,164(sp)
 802b6dc:	d8802104 	addi	r2,sp,132
 802b6e0:	d8800315 	stw	r2,12(sp)
 802b6e4:	d9403617 	ldw	r5,216(sp)
 802b6e8:	d8802504 	addi	r2,sp,148
 802b6ec:	d9002c17 	ldw	r4,176(sp)
 802b6f0:	d8800215 	stw	r2,8(sp)
 802b6f4:	d8802604 	addi	r2,sp,152
 802b6f8:	d8c00015 	stw	r3,0(sp)
 802b6fc:	d8800115 	stw	r2,4(sp)
 802b700:	01c00084 	movi	r7,2
 802b704:	980d883a 	mov	r6,r19
 802b708:	d8c03c15 	stw	r3,240(sp)
 802b70c:	da003d15 	stw	r8,244(sp)
 802b710:	802c7940 	call	802c794 <_dtoa_r>
 802b714:	1021883a 	mov	r16,r2
 802b718:	008019c4 	movi	r2,103
 802b71c:	d8c03c17 	ldw	r3,240(sp)
 802b720:	da003d17 	ldw	r8,244(sp)
 802b724:	88817126 	beq	r17,r2,802bcec <___vfprintf_internal_r+0x1cfc>
 802b728:	008011c4 	movi	r2,71
 802b72c:	88829226 	beq	r17,r2,802c178 <___vfprintf_internal_r+0x2188>
 802b730:	80f9883a 	add	fp,r16,r3
 802b734:	d9003617 	ldw	r4,216(sp)
 802b738:	000d883a 	mov	r6,zero
 802b73c:	000f883a 	mov	r7,zero
 802b740:	980b883a 	mov	r5,r19
 802b744:	da003d15 	stw	r8,244(sp)
 802b748:	8027c740 	call	8027c74 <__eqdf2>
 802b74c:	da003d17 	ldw	r8,244(sp)
 802b750:	10018d26 	beq	r2,zero,802bd88 <___vfprintf_internal_r+0x1d98>
 802b754:	d8802117 	ldw	r2,132(sp)
 802b758:	1700062e 	bgeu	r2,fp,802b774 <___vfprintf_internal_r+0x1784>
 802b75c:	01000c04 	movi	r4,48
 802b760:	10c00044 	addi	r3,r2,1
 802b764:	d8c02115 	stw	r3,132(sp)
 802b768:	11000005 	stb	r4,0(r2)
 802b76c:	d8802117 	ldw	r2,132(sp)
 802b770:	173ffb36 	bltu	r2,fp,802b760 <_gp+0xfffea054>
 802b774:	1405c83a 	sub	r2,r2,r16
 802b778:	d8803315 	stw	r2,204(sp)
 802b77c:	008011c4 	movi	r2,71
 802b780:	b0817626 	beq	r22,r2,802bd5c <___vfprintf_internal_r+0x1d6c>
 802b784:	00801944 	movi	r2,101
 802b788:	1442810e 	bge	r2,r17,802c190 <___vfprintf_internal_r+0x21a0>
 802b78c:	d8c02617 	ldw	r3,152(sp)
 802b790:	00801984 	movi	r2,102
 802b794:	d8c03215 	stw	r3,200(sp)
 802b798:	8881fe26 	beq	r17,r2,802bf94 <___vfprintf_internal_r+0x1fa4>
 802b79c:	d8c03217 	ldw	r3,200(sp)
 802b7a0:	d9003317 	ldw	r4,204(sp)
 802b7a4:	1901dd16 	blt	r3,r4,802bf1c <___vfprintf_internal_r+0x1f2c>
 802b7a8:	9480004c 	andi	r18,r18,1
 802b7ac:	90022b1e 	bne	r18,zero,802c05c <___vfprintf_internal_r+0x206c>
 802b7b0:	1805883a 	mov	r2,r3
 802b7b4:	18028016 	blt	r3,zero,802c1b8 <___vfprintf_internal_r+0x21c8>
 802b7b8:	d8c03217 	ldw	r3,200(sp)
 802b7bc:	044019c4 	movi	r17,103
 802b7c0:	d8c02e15 	stw	r3,184(sp)
 802b7c4:	df002a07 	ldb	fp,168(sp)
 802b7c8:	e001531e 	bne	fp,zero,802bd18 <___vfprintf_internal_r+0x1d28>
 802b7cc:	df002783 	ldbu	fp,158(sp)
 802b7d0:	d8802a15 	stw	r2,168(sp)
 802b7d4:	dc802b17 	ldw	r18,172(sp)
 802b7d8:	d8002915 	stw	zero,164(sp)
 802b7dc:	003bd106 	br	802a724 <_gp+0xfffe9018>
 802b7e0:	d8802d17 	ldw	r2,180(sp)
 802b7e4:	d8c02d17 	ldw	r3,180(sp)
 802b7e8:	d9002d17 	ldw	r4,180(sp)
 802b7ec:	10800017 	ldw	r2,0(r2)
 802b7f0:	18c00117 	ldw	r3,4(r3)
 802b7f4:	21000204 	addi	r4,r4,8
 802b7f8:	d8803615 	stw	r2,216(sp)
 802b7fc:	d8c03815 	stw	r3,224(sp)
 802b800:	d9002d15 	stw	r4,180(sp)
 802b804:	003b7506 	br	802a5dc <_gp+0xfffe8ed0>
 802b808:	ac400007 	ldb	r17,0(r21)
 802b80c:	003a5906 	br	802a174 <_gp+0xfffe8a68>
 802b810:	9080100c 	andi	r2,r18,64
 802b814:	1000a826 	beq	r2,zero,802bab8 <___vfprintf_internal_r+0x1ac8>
 802b818:	d9002d17 	ldw	r4,180(sp)
 802b81c:	002d883a 	mov	r22,zero
 802b820:	24c0000b 	ldhu	r19,0(r4)
 802b824:	21000104 	addi	r4,r4,4
 802b828:	d9002d15 	stw	r4,180(sp)
 802b82c:	003ccb06 	br	802ab5c <_gp+0xfffe9450>
 802b830:	d8c02d17 	ldw	r3,180(sp)
 802b834:	d9002917 	ldw	r4,164(sp)
 802b838:	002d883a 	mov	r22,zero
 802b83c:	18800104 	addi	r2,r3,4
 802b840:	1cc00017 	ldw	r19,0(r3)
 802b844:	203ebb0e 	bge	r4,zero,802b334 <_gp+0xfffe9c28>
 802b848:	003ef106 	br	802b410 <_gp+0xfffe9d04>
 802b84c:	9080040c 	andi	r2,r18,16
 802b850:	1000921e 	bne	r2,zero,802ba9c <___vfprintf_internal_r+0x1aac>
 802b854:	9480100c 	andi	r18,r18,64
 802b858:	90013926 	beq	r18,zero,802bd40 <___vfprintf_internal_r+0x1d50>
 802b85c:	d9002d17 	ldw	r4,180(sp)
 802b860:	d9402f17 	ldw	r5,188(sp)
 802b864:	20800017 	ldw	r2,0(r4)
 802b868:	21000104 	addi	r4,r4,4
 802b86c:	d9002d15 	stw	r4,180(sp)
 802b870:	1140000d 	sth	r5,0(r2)
 802b874:	003a1606 	br	802a0d0 <_gp+0xfffe89c4>
 802b878:	9080100c 	andi	r2,r18,64
 802b87c:	10008026 	beq	r2,zero,802ba80 <___vfprintf_internal_r+0x1a90>
 802b880:	d8c02d17 	ldw	r3,180(sp)
 802b884:	1cc0000f 	ldh	r19,0(r3)
 802b888:	18c00104 	addi	r3,r3,4
 802b88c:	d8c02d15 	stw	r3,180(sp)
 802b890:	982dd7fa 	srai	r22,r19,31
 802b894:	b005883a 	mov	r2,r22
 802b898:	003b1f06 	br	802a518 <_gp+0xfffe8e0c>
 802b89c:	9080100c 	andi	r2,r18,64
 802b8a0:	d8002785 	stb	zero,158(sp)
 802b8a4:	10008a1e 	bne	r2,zero,802bad0 <___vfprintf_internal_r+0x1ae0>
 802b8a8:	d9402d17 	ldw	r5,180(sp)
 802b8ac:	d8c02917 	ldw	r3,164(sp)
 802b8b0:	002d883a 	mov	r22,zero
 802b8b4:	28800104 	addi	r2,r5,4
 802b8b8:	2cc00017 	ldw	r19,0(r5)
 802b8bc:	183e4b0e 	bge	r3,zero,802b1ec <_gp+0xfffe9ae0>
 802b8c0:	9d86b03a 	or	r3,r19,r22
 802b8c4:	d8802d15 	stw	r2,180(sp)
 802b8c8:	183e4c1e 	bne	r3,zero,802b1fc <_gp+0xfffe9af0>
 802b8cc:	0039883a 	mov	fp,zero
 802b8d0:	0005883a 	mov	r2,zero
 802b8d4:	003d4006 	br	802add8 <_gp+0xfffe96cc>
 802b8d8:	014200f4 	movhi	r5,2051
 802b8dc:	295e3b84 	addi	r5,r5,30958
 802b8e0:	d9402b15 	stw	r5,172(sp)
 802b8e4:	d9402b17 	ldw	r5,172(sp)
 802b8e8:	1c47883a 	add	r3,r3,r17
 802b8ec:	10800044 	addi	r2,r2,1
 802b8f0:	41400015 	stw	r5,0(r8)
 802b8f4:	44400115 	stw	r17,4(r8)
 802b8f8:	d8c02015 	stw	r3,128(sp)
 802b8fc:	d8801f15 	stw	r2,124(sp)
 802b900:	010001c4 	movi	r4,7
 802b904:	20bec816 	blt	r4,r2,802b428 <_gp+0xfffe9d1c>
 802b908:	42000204 	addi	r8,r8,8
 802b90c:	003ecd06 	br	802b444 <_gp+0xfffe9d38>
 802b910:	d9002917 	ldw	r4,164(sp)
 802b914:	d8002785 	stb	zero,158(sp)
 802b918:	203d2d16 	blt	r4,zero,802add0 <_gp+0xfffe96c4>
 802b91c:	00bfdfc4 	movi	r2,-129
 802b920:	90a4703a 	and	r18,r18,r2
 802b924:	003a9106 	br	802a36c <_gp+0xfffe8c60>
 802b928:	010200f4 	movhi	r4,2051
 802b92c:	211e3b84 	addi	r4,r4,30958
 802b930:	d9002b15 	stw	r4,172(sp)
 802b934:	003c0c06 	br	802a968 <_gp+0xfffe925c>
 802b938:	d9002c17 	ldw	r4,176(sp)
 802b93c:	d9801e04 	addi	r6,sp,120
 802b940:	b80b883a 	mov	r5,r23
 802b944:	8030d500 	call	8030d50 <__sprint_r>
 802b948:	103aab1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802b94c:	d8c02017 	ldw	r3,128(sp)
 802b950:	da000404 	addi	r8,sp,16
 802b954:	003d4106 	br	802ae5c <_gp+0xfffe9750>
 802b958:	d8801f17 	ldw	r2,124(sp)
 802b95c:	014200f4 	movhi	r5,2051
 802b960:	01000044 	movi	r4,1
 802b964:	18c00044 	addi	r3,r3,1
 802b968:	10800044 	addi	r2,r2,1
 802b96c:	295e3b04 	addi	r5,r5,30956
 802b970:	41000115 	stw	r4,4(r8)
 802b974:	41400015 	stw	r5,0(r8)
 802b978:	d8c02015 	stw	r3,128(sp)
 802b97c:	d8801f15 	stw	r2,124(sp)
 802b980:	010001c4 	movi	r4,7
 802b984:	20805c16 	blt	r4,r2,802baf8 <___vfprintf_internal_r+0x1b08>
 802b988:	42000204 	addi	r8,r8,8
 802b98c:	8800041e 	bne	r17,zero,802b9a0 <___vfprintf_internal_r+0x19b0>
 802b990:	d8803317 	ldw	r2,204(sp)
 802b994:	1000021e 	bne	r2,zero,802b9a0 <___vfprintf_internal_r+0x19b0>
 802b998:	9080004c 	andi	r2,r18,1
 802b99c:	103c0926 	beq	r2,zero,802a9c4 <_gp+0xfffe92b8>
 802b9a0:	d9003717 	ldw	r4,220(sp)
 802b9a4:	d8801f17 	ldw	r2,124(sp)
 802b9a8:	d9403417 	ldw	r5,208(sp)
 802b9ac:	20c7883a 	add	r3,r4,r3
 802b9b0:	10800044 	addi	r2,r2,1
 802b9b4:	41000115 	stw	r4,4(r8)
 802b9b8:	41400015 	stw	r5,0(r8)
 802b9bc:	d8c02015 	stw	r3,128(sp)
 802b9c0:	d8801f15 	stw	r2,124(sp)
 802b9c4:	010001c4 	movi	r4,7
 802b9c8:	20812116 	blt	r4,r2,802be50 <___vfprintf_internal_r+0x1e60>
 802b9cc:	42000204 	addi	r8,r8,8
 802b9d0:	0463c83a 	sub	r17,zero,r17
 802b9d4:	0440730e 	bge	zero,r17,802bba4 <___vfprintf_internal_r+0x1bb4>
 802b9d8:	05800404 	movi	r22,16
 802b9dc:	b440860e 	bge	r22,r17,802bbf8 <___vfprintf_internal_r+0x1c08>
 802b9e0:	014200f4 	movhi	r5,2051
 802b9e4:	295e3b84 	addi	r5,r5,30958
 802b9e8:	d9402b15 	stw	r5,172(sp)
 802b9ec:	070001c4 	movi	fp,7
 802b9f0:	dcc02c17 	ldw	r19,176(sp)
 802b9f4:	00000306 	br	802ba04 <___vfprintf_internal_r+0x1a14>
 802b9f8:	42000204 	addi	r8,r8,8
 802b9fc:	8c7ffc04 	addi	r17,r17,-16
 802ba00:	b440800e 	bge	r22,r17,802bc04 <___vfprintf_internal_r+0x1c14>
 802ba04:	18c00404 	addi	r3,r3,16
 802ba08:	10800044 	addi	r2,r2,1
 802ba0c:	45000015 	stw	r20,0(r8)
 802ba10:	45800115 	stw	r22,4(r8)
 802ba14:	d8c02015 	stw	r3,128(sp)
 802ba18:	d8801f15 	stw	r2,124(sp)
 802ba1c:	e0bff60e 	bge	fp,r2,802b9f8 <_gp+0xfffea2ec>
 802ba20:	d9801e04 	addi	r6,sp,120
 802ba24:	b80b883a 	mov	r5,r23
 802ba28:	9809883a 	mov	r4,r19
 802ba2c:	8030d500 	call	8030d50 <__sprint_r>
 802ba30:	103a711e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802ba34:	d8c02017 	ldw	r3,128(sp)
 802ba38:	d8801f17 	ldw	r2,124(sp)
 802ba3c:	da000404 	addi	r8,sp,16
 802ba40:	003fee06 	br	802b9fc <_gp+0xfffea2f0>
 802ba44:	00bfffc4 	movi	r2,-1
 802ba48:	003a6f06 	br	802a408 <_gp+0xfffe8cfc>
 802ba4c:	008011c4 	movi	r2,71
 802ba50:	1440b816 	blt	r2,r17,802bd34 <___vfprintf_internal_r+0x1d44>
 802ba54:	040200f4 	movhi	r16,2051
 802ba58:	841e2d04 	addi	r16,r16,30900
 802ba5c:	00c000c4 	movi	r3,3
 802ba60:	00bfdfc4 	movi	r2,-129
 802ba64:	d8c02a15 	stw	r3,168(sp)
 802ba68:	90a4703a 	and	r18,r18,r2
 802ba6c:	df002783 	ldbu	fp,158(sp)
 802ba70:	d8c02e15 	stw	r3,184(sp)
 802ba74:	d8002915 	stw	zero,164(sp)
 802ba78:	d8003215 	stw	zero,200(sp)
 802ba7c:	003b2906 	br	802a724 <_gp+0xfffe9018>
 802ba80:	d9002d17 	ldw	r4,180(sp)
 802ba84:	24c00017 	ldw	r19,0(r4)
 802ba88:	21000104 	addi	r4,r4,4
 802ba8c:	d9002d15 	stw	r4,180(sp)
 802ba90:	982dd7fa 	srai	r22,r19,31
 802ba94:	b005883a 	mov	r2,r22
 802ba98:	003a9f06 	br	802a518 <_gp+0xfffe8e0c>
 802ba9c:	d9402d17 	ldw	r5,180(sp)
 802baa0:	d8c02f17 	ldw	r3,188(sp)
 802baa4:	28800017 	ldw	r2,0(r5)
 802baa8:	29400104 	addi	r5,r5,4
 802baac:	d9402d15 	stw	r5,180(sp)
 802bab0:	10c00015 	stw	r3,0(r2)
 802bab4:	00398606 	br	802a0d0 <_gp+0xfffe89c4>
 802bab8:	d9402d17 	ldw	r5,180(sp)
 802babc:	002d883a 	mov	r22,zero
 802bac0:	2cc00017 	ldw	r19,0(r5)
 802bac4:	29400104 	addi	r5,r5,4
 802bac8:	d9402d15 	stw	r5,180(sp)
 802bacc:	003c2306 	br	802ab5c <_gp+0xfffe9450>
 802bad0:	d8c02d17 	ldw	r3,180(sp)
 802bad4:	d9002917 	ldw	r4,164(sp)
 802bad8:	002d883a 	mov	r22,zero
 802badc:	18800104 	addi	r2,r3,4
 802bae0:	1cc0000b 	ldhu	r19,0(r3)
 802bae4:	203dc10e 	bge	r4,zero,802b1ec <_gp+0xfffe9ae0>
 802bae8:	003f7506 	br	802b8c0 <_gp+0xfffea1b4>
 802baec:	040200f4 	movhi	r16,2051
 802baf0:	841e2b04 	addi	r16,r16,30892
 802baf4:	003acc06 	br	802a628 <_gp+0xfffe8f1c>
 802baf8:	d9002c17 	ldw	r4,176(sp)
 802bafc:	d9801e04 	addi	r6,sp,120
 802bb00:	b80b883a 	mov	r5,r23
 802bb04:	8030d500 	call	8030d50 <__sprint_r>
 802bb08:	103a3b1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802bb0c:	dc402617 	ldw	r17,152(sp)
 802bb10:	d8c02017 	ldw	r3,128(sp)
 802bb14:	da000404 	addi	r8,sp,16
 802bb18:	003f9c06 	br	802b98c <_gp+0xfffea280>
 802bb1c:	ac400043 	ldbu	r17,1(r21)
 802bb20:	94800814 	ori	r18,r18,32
 802bb24:	ad400044 	addi	r21,r21,1
 802bb28:	8c403fcc 	andi	r17,r17,255
 802bb2c:	8c40201c 	xori	r17,r17,128
 802bb30:	8c7fe004 	addi	r17,r17,-128
 802bb34:	00398f06 	br	802a174 <_gp+0xfffe8a68>
 802bb38:	d8c02d15 	stw	r3,180(sp)
 802bb3c:	0039883a 	mov	fp,zero
 802bb40:	003e3506 	br	802b418 <_gp+0xfffe9d0c>
 802bb44:	d9002c17 	ldw	r4,176(sp)
 802bb48:	d9801e04 	addi	r6,sp,120
 802bb4c:	b80b883a 	mov	r5,r23
 802bb50:	8030d500 	call	8030d50 <__sprint_r>
 802bb54:	103a281e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802bb58:	d8c02017 	ldw	r3,128(sp)
 802bb5c:	da000404 	addi	r8,sp,16
 802bb60:	003cd006 	br	802aea4 <_gp+0xfffe9798>
 802bb64:	8009883a 	mov	r4,r16
 802bb68:	da003d15 	stw	r8,244(sp)
 802bb6c:	8029f580 	call	8029f58 <strlen>
 802bb70:	d8802e15 	stw	r2,184(sp)
 802bb74:	da003d17 	ldw	r8,244(sp)
 802bb78:	103c340e 	bge	r2,zero,802ac4c <_gp+0xfffe9540>
 802bb7c:	0005883a 	mov	r2,zero
 802bb80:	003c3206 	br	802ac4c <_gp+0xfffe9540>
 802bb84:	d9002c17 	ldw	r4,176(sp)
 802bb88:	d9801e04 	addi	r6,sp,120
 802bb8c:	b80b883a 	mov	r5,r23
 802bb90:	8030d500 	call	8030d50 <__sprint_r>
 802bb94:	103a181e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802bb98:	d8c02017 	ldw	r3,128(sp)
 802bb9c:	d8801f17 	ldw	r2,124(sp)
 802bba0:	da000404 	addi	r8,sp,16
 802bba4:	d9403317 	ldw	r5,204(sp)
 802bba8:	10800044 	addi	r2,r2,1
 802bbac:	44000015 	stw	r16,0(r8)
 802bbb0:	28c7883a 	add	r3,r5,r3
 802bbb4:	003b7d06 	br	802a9ac <_gp+0xfffe92a0>
 802bbb8:	010200f4 	movhi	r4,2051
 802bbbc:	211e3f84 	addi	r4,r4,30974
 802bbc0:	d9003515 	stw	r4,212(sp)
 802bbc4:	003b1406 	br	802a818 <_gp+0xfffe910c>
 802bbc8:	013fffc4 	movi	r4,-1
 802bbcc:	003a3506 	br	802a4a4 <_gp+0xfffe8d98>
 802bbd0:	0023883a 	mov	r17,zero
 802bbd4:	003d9d06 	br	802b24c <_gp+0xfffe9b40>
 802bbd8:	d9002c17 	ldw	r4,176(sp)
 802bbdc:	d9801e04 	addi	r6,sp,120
 802bbe0:	b80b883a 	mov	r5,r23
 802bbe4:	8030d500 	call	8030d50 <__sprint_r>
 802bbe8:	103a031e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802bbec:	d8c02017 	ldw	r3,128(sp)
 802bbf0:	da000404 	addi	r8,sp,16
 802bbf4:	003d9406 	br	802b248 <_gp+0xfffe9b3c>
 802bbf8:	010200f4 	movhi	r4,2051
 802bbfc:	211e3b84 	addi	r4,r4,30958
 802bc00:	d9002b15 	stw	r4,172(sp)
 802bc04:	d9002b17 	ldw	r4,172(sp)
 802bc08:	1c47883a 	add	r3,r3,r17
 802bc0c:	10800044 	addi	r2,r2,1
 802bc10:	41000015 	stw	r4,0(r8)
 802bc14:	44400115 	stw	r17,4(r8)
 802bc18:	d8c02015 	stw	r3,128(sp)
 802bc1c:	d8801f15 	stw	r2,124(sp)
 802bc20:	010001c4 	movi	r4,7
 802bc24:	20bfd716 	blt	r4,r2,802bb84 <_gp+0xfffea478>
 802bc28:	42000204 	addi	r8,r8,8
 802bc2c:	003fdd06 	br	802bba4 <_gp+0xfffea498>
 802bc30:	d9002c17 	ldw	r4,176(sp)
 802bc34:	d9801e04 	addi	r6,sp,120
 802bc38:	b80b883a 	mov	r5,r23
 802bc3c:	8030d500 	call	8030d50 <__sprint_r>
 802bc40:	1039ed1e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802bc44:	d8802617 	ldw	r2,152(sp)
 802bc48:	d8c02017 	ldw	r3,128(sp)
 802bc4c:	da000404 	addi	r8,sp,16
 802bc50:	003e1006 	br	802b494 <_gp+0xfffe9d88>
 802bc54:	00800044 	movi	r2,1
 802bc58:	10803fcc 	andi	r2,r2,255
 802bc5c:	00c00044 	movi	r3,1
 802bc60:	10fa3526 	beq	r2,r3,802a538 <_gp+0xfffe8e2c>
 802bc64:	00c00084 	movi	r3,2
 802bc68:	10fbcb26 	beq	r2,r3,802ab98 <_gp+0xfffe948c>
 802bc6c:	003a8f06 	br	802a6ac <_gp+0xfffe8fa0>
 802bc70:	010200f4 	movhi	r4,2051
 802bc74:	211e3f84 	addi	r4,r4,30974
 802bc78:	d9003515 	stw	r4,212(sp)
 802bc7c:	003b7606 	br	802aa58 <_gp+0xfffe934c>
 802bc80:	d8802917 	ldw	r2,164(sp)
 802bc84:	00c00184 	movi	r3,6
 802bc88:	1880012e 	bgeu	r3,r2,802bc90 <___vfprintf_internal_r+0x1ca0>
 802bc8c:	1805883a 	mov	r2,r3
 802bc90:	d8802e15 	stw	r2,184(sp)
 802bc94:	1000ef16 	blt	r2,zero,802c054 <___vfprintf_internal_r+0x2064>
 802bc98:	040200f4 	movhi	r16,2051
 802bc9c:	d8802a15 	stw	r2,168(sp)
 802bca0:	dcc02d15 	stw	r19,180(sp)
 802bca4:	d8002915 	stw	zero,164(sp)
 802bca8:	d8003215 	stw	zero,200(sp)
 802bcac:	841e3904 	addi	r16,r16,30948
 802bcb0:	0039883a 	mov	fp,zero
 802bcb4:	003aa206 	br	802a740 <_gp+0xfffe9034>
 802bcb8:	0021883a 	mov	r16,zero
 802bcbc:	003e0706 	br	802b4dc <_gp+0xfffe9dd0>
 802bcc0:	d9002c17 	ldw	r4,176(sp)
 802bcc4:	d9801e04 	addi	r6,sp,120
 802bcc8:	b80b883a 	mov	r5,r23
 802bccc:	8030d500 	call	8030d50 <__sprint_r>
 802bcd0:	1039c91e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802bcd4:	d8802617 	ldw	r2,152(sp)
 802bcd8:	d9403317 	ldw	r5,204(sp)
 802bcdc:	d8c02017 	ldw	r3,128(sp)
 802bce0:	da000404 	addi	r8,sp,16
 802bce4:	2885c83a 	sub	r2,r5,r2
 802bce8:	003dfb06 	br	802b4d8 <_gp+0xfffe9dcc>
 802bcec:	9080004c 	andi	r2,r18,1
 802bcf0:	103e8f1e 	bne	r2,zero,802b730 <_gp+0xfffea024>
 802bcf4:	d8802117 	ldw	r2,132(sp)
 802bcf8:	003e9e06 	br	802b774 <_gp+0xfffea068>
 802bcfc:	1025883a 	mov	r18,r2
 802bd00:	0039883a 	mov	fp,zero
 802bd04:	00800084 	movi	r2,2
 802bd08:	003fd306 	br	802bc58 <_gp+0xfffea54c>
 802bd0c:	07000b44 	movi	fp,45
 802bd10:	df002785 	stb	fp,158(sp)
 802bd14:	003a4006 	br	802a618 <_gp+0xfffe8f0c>
 802bd18:	00c00b44 	movi	r3,45
 802bd1c:	d8c02785 	stb	r3,158(sp)
 802bd20:	d8802a15 	stw	r2,168(sp)
 802bd24:	dc802b17 	ldw	r18,172(sp)
 802bd28:	d8002915 	stw	zero,164(sp)
 802bd2c:	07000b44 	movi	fp,45
 802bd30:	003a8006 	br	802a734 <_gp+0xfffe9028>
 802bd34:	040200f4 	movhi	r16,2051
 802bd38:	841e2e04 	addi	r16,r16,30904
 802bd3c:	003f4706 	br	802ba5c <_gp+0xfffea350>
 802bd40:	d8c02d17 	ldw	r3,180(sp)
 802bd44:	d9002f17 	ldw	r4,188(sp)
 802bd48:	18800017 	ldw	r2,0(r3)
 802bd4c:	18c00104 	addi	r3,r3,4
 802bd50:	d8c02d15 	stw	r3,180(sp)
 802bd54:	11000015 	stw	r4,0(r2)
 802bd58:	0038dd06 	br	802a0d0 <_gp+0xfffe89c4>
 802bd5c:	dd802617 	ldw	r22,152(sp)
 802bd60:	00bfff44 	movi	r2,-3
 802bd64:	b0801c16 	blt	r22,r2,802bdd8 <___vfprintf_internal_r+0x1de8>
 802bd68:	d9402917 	ldw	r5,164(sp)
 802bd6c:	2d801a16 	blt	r5,r22,802bdd8 <___vfprintf_internal_r+0x1de8>
 802bd70:	dd803215 	stw	r22,200(sp)
 802bd74:	003e8906 	br	802b79c <_gp+0xfffea090>
 802bd78:	010200f4 	movhi	r4,2051
 802bd7c:	211e3b84 	addi	r4,r4,30958
 802bd80:	d9002b15 	stw	r4,172(sp)
 802bd84:	003c9106 	br	802afcc <_gp+0xfffe98c0>
 802bd88:	e005883a 	mov	r2,fp
 802bd8c:	003e7906 	br	802b774 <_gp+0xfffea068>
 802bd90:	d9402917 	ldw	r5,164(sp)
 802bd94:	df002783 	ldbu	fp,158(sp)
 802bd98:	dcc02d15 	stw	r19,180(sp)
 802bd9c:	d9402a15 	stw	r5,168(sp)
 802bda0:	d9402e15 	stw	r5,184(sp)
 802bda4:	d8002915 	stw	zero,164(sp)
 802bda8:	d8003215 	stw	zero,200(sp)
 802bdac:	003a5d06 	br	802a724 <_gp+0xfffe9018>
 802bdb0:	9080004c 	andi	r2,r18,1
 802bdb4:	0039883a 	mov	fp,zero
 802bdb8:	10000426 	beq	r2,zero,802bdcc <___vfprintf_internal_r+0x1ddc>
 802bdbc:	00800c04 	movi	r2,48
 802bdc0:	dc001dc4 	addi	r16,sp,119
 802bdc4:	d8801dc5 	stb	r2,119(sp)
 802bdc8:	003b8006 	br	802abcc <_gp+0xfffe94c0>
 802bdcc:	d8002e15 	stw	zero,184(sp)
 802bdd0:	dc001e04 	addi	r16,sp,120
 802bdd4:	003a4d06 	br	802a70c <_gp+0xfffe9000>
 802bdd8:	8c7fff84 	addi	r17,r17,-2
 802bddc:	b5bfffc4 	addi	r22,r22,-1
 802bde0:	dd802615 	stw	r22,152(sp)
 802bde4:	dc4022c5 	stb	r17,139(sp)
 802bde8:	b000bf16 	blt	r22,zero,802c0e8 <___vfprintf_internal_r+0x20f8>
 802bdec:	00800ac4 	movi	r2,43
 802bdf0:	d8802305 	stb	r2,140(sp)
 802bdf4:	00800244 	movi	r2,9
 802bdf8:	15807016 	blt	r2,r22,802bfbc <___vfprintf_internal_r+0x1fcc>
 802bdfc:	00800c04 	movi	r2,48
 802be00:	b5800c04 	addi	r22,r22,48
 802be04:	d8802345 	stb	r2,141(sp)
 802be08:	dd802385 	stb	r22,142(sp)
 802be0c:	d88023c4 	addi	r2,sp,143
 802be10:	df0022c4 	addi	fp,sp,139
 802be14:	d8c03317 	ldw	r3,204(sp)
 802be18:	1739c83a 	sub	fp,r2,fp
 802be1c:	d9003317 	ldw	r4,204(sp)
 802be20:	e0c7883a 	add	r3,fp,r3
 802be24:	df003a15 	stw	fp,232(sp)
 802be28:	d8c02e15 	stw	r3,184(sp)
 802be2c:	00800044 	movi	r2,1
 802be30:	1100b30e 	bge	r2,r4,802c100 <___vfprintf_internal_r+0x2110>
 802be34:	d8c02e17 	ldw	r3,184(sp)
 802be38:	18c00044 	addi	r3,r3,1
 802be3c:	d8c02e15 	stw	r3,184(sp)
 802be40:	1805883a 	mov	r2,r3
 802be44:	1800ac16 	blt	r3,zero,802c0f8 <___vfprintf_internal_r+0x2108>
 802be48:	d8003215 	stw	zero,200(sp)
 802be4c:	003e5d06 	br	802b7c4 <_gp+0xfffea0b8>
 802be50:	d9002c17 	ldw	r4,176(sp)
 802be54:	d9801e04 	addi	r6,sp,120
 802be58:	b80b883a 	mov	r5,r23
 802be5c:	8030d500 	call	8030d50 <__sprint_r>
 802be60:	1039651e 	bne	r2,zero,802a3f8 <_gp+0xfffe8cec>
 802be64:	dc402617 	ldw	r17,152(sp)
 802be68:	d8c02017 	ldw	r3,128(sp)
 802be6c:	d8801f17 	ldw	r2,124(sp)
 802be70:	da000404 	addi	r8,sp,16
 802be74:	003ed606 	br	802b9d0 <_gp+0xfffea2c4>
 802be78:	582b883a 	mov	r21,r11
 802be7c:	d8002915 	stw	zero,164(sp)
 802be80:	0038bd06 	br	802a178 <_gp+0xfffe8a6c>
 802be84:	d8802917 	ldw	r2,164(sp)
 802be88:	103e071e 	bne	r2,zero,802b6a8 <_gp+0xfffe9f9c>
 802be8c:	dc002915 	stw	r16,164(sp)
 802be90:	003e0506 	br	802b6a8 <_gp+0xfffe9f9c>
 802be94:	d9002917 	ldw	r4,164(sp)
 802be98:	20c00044 	addi	r3,r4,1
 802be9c:	003e0f06 	br	802b6dc <_gp+0xfffe9fd0>
 802bea0:	01400184 	movi	r5,6
 802bea4:	d9402915 	stw	r5,164(sp)
 802bea8:	003dff06 	br	802b6a8 <_gp+0xfffe9f9c>
 802beac:	d8802104 	addi	r2,sp,132
 802beb0:	d8800315 	stw	r2,12(sp)
 802beb4:	d8802504 	addi	r2,sp,148
 802beb8:	d8800215 	stw	r2,8(sp)
 802bebc:	d8802604 	addi	r2,sp,152
 802bec0:	d8800115 	stw	r2,4(sp)
 802bec4:	d8802917 	ldw	r2,164(sp)
 802bec8:	d9403617 	ldw	r5,216(sp)
 802becc:	d9002c17 	ldw	r4,176(sp)
 802bed0:	d8800015 	stw	r2,0(sp)
 802bed4:	01c000c4 	movi	r7,3
 802bed8:	980d883a 	mov	r6,r19
 802bedc:	da003d15 	stw	r8,244(sp)
 802bee0:	802c7940 	call	802c794 <_dtoa_r>
 802bee4:	d8c02917 	ldw	r3,164(sp)
 802bee8:	da003d17 	ldw	r8,244(sp)
 802beec:	1021883a 	mov	r16,r2
 802bef0:	10f9883a 	add	fp,r2,r3
 802bef4:	81000007 	ldb	r4,0(r16)
 802bef8:	00800c04 	movi	r2,48
 802befc:	20805e26 	beq	r4,r2,802c078 <___vfprintf_internal_r+0x2088>
 802bf00:	d8c02617 	ldw	r3,152(sp)
 802bf04:	e0f9883a 	add	fp,fp,r3
 802bf08:	003e0a06 	br	802b734 <_gp+0xfffea028>
 802bf0c:	00c00b44 	movi	r3,45
 802bf10:	24e0003c 	xorhi	r19,r4,32768
 802bf14:	d8c02a05 	stb	r3,168(sp)
 802bf18:	003de906 	br	802b6c0 <_gp+0xfffe9fb4>
 802bf1c:	d8c03217 	ldw	r3,200(sp)
 802bf20:	00c07a0e 	bge	zero,r3,802c10c <___vfprintf_internal_r+0x211c>
 802bf24:	00800044 	movi	r2,1
 802bf28:	d9003317 	ldw	r4,204(sp)
 802bf2c:	1105883a 	add	r2,r2,r4
 802bf30:	d8802e15 	stw	r2,184(sp)
 802bf34:	10004e16 	blt	r2,zero,802c070 <___vfprintf_internal_r+0x2080>
 802bf38:	044019c4 	movi	r17,103
 802bf3c:	003e2106 	br	802b7c4 <_gp+0xfffea0b8>
 802bf40:	d9002917 	ldw	r4,164(sp)
 802bf44:	d8802104 	addi	r2,sp,132
 802bf48:	d8800315 	stw	r2,12(sp)
 802bf4c:	d9000015 	stw	r4,0(sp)
 802bf50:	d8802504 	addi	r2,sp,148
 802bf54:	d9403617 	ldw	r5,216(sp)
 802bf58:	d9002c17 	ldw	r4,176(sp)
 802bf5c:	d8800215 	stw	r2,8(sp)
 802bf60:	d8802604 	addi	r2,sp,152
 802bf64:	d8800115 	stw	r2,4(sp)
 802bf68:	01c000c4 	movi	r7,3
 802bf6c:	980d883a 	mov	r6,r19
 802bf70:	da003d15 	stw	r8,244(sp)
 802bf74:	802c7940 	call	802c794 <_dtoa_r>
 802bf78:	d8c02917 	ldw	r3,164(sp)
 802bf7c:	da003d17 	ldw	r8,244(sp)
 802bf80:	1021883a 	mov	r16,r2
 802bf84:	00801184 	movi	r2,70
 802bf88:	80f9883a 	add	fp,r16,r3
 802bf8c:	88bfd926 	beq	r17,r2,802bef4 <_gp+0xfffea7e8>
 802bf90:	003de806 	br	802b734 <_gp+0xfffea028>
 802bf94:	d9002917 	ldw	r4,164(sp)
 802bf98:	00c04d0e 	bge	zero,r3,802c0d0 <___vfprintf_internal_r+0x20e0>
 802bf9c:	2000441e 	bne	r4,zero,802c0b0 <___vfprintf_internal_r+0x20c0>
 802bfa0:	9480004c 	andi	r18,r18,1
 802bfa4:	9000421e 	bne	r18,zero,802c0b0 <___vfprintf_internal_r+0x20c0>
 802bfa8:	1805883a 	mov	r2,r3
 802bfac:	18007016 	blt	r3,zero,802c170 <___vfprintf_internal_r+0x2180>
 802bfb0:	d8c03217 	ldw	r3,200(sp)
 802bfb4:	d8c02e15 	stw	r3,184(sp)
 802bfb8:	003e0206 	br	802b7c4 <_gp+0xfffea0b8>
 802bfbc:	df0022c4 	addi	fp,sp,139
 802bfc0:	dc002915 	stw	r16,164(sp)
 802bfc4:	4027883a 	mov	r19,r8
 802bfc8:	e021883a 	mov	r16,fp
 802bfcc:	b009883a 	mov	r4,r22
 802bfd0:	01400284 	movi	r5,10
 802bfd4:	8025a740 	call	8025a74 <__modsi3>
 802bfd8:	10800c04 	addi	r2,r2,48
 802bfdc:	843fffc4 	addi	r16,r16,-1
 802bfe0:	b009883a 	mov	r4,r22
 802bfe4:	01400284 	movi	r5,10
 802bfe8:	80800005 	stb	r2,0(r16)
 802bfec:	80259f00 	call	80259f0 <__divsi3>
 802bff0:	102d883a 	mov	r22,r2
 802bff4:	00800244 	movi	r2,9
 802bff8:	15bff416 	blt	r2,r22,802bfcc <_gp+0xfffea8c0>
 802bffc:	9811883a 	mov	r8,r19
 802c000:	b0800c04 	addi	r2,r22,48
 802c004:	8027883a 	mov	r19,r16
 802c008:	997fffc4 	addi	r5,r19,-1
 802c00c:	98bfffc5 	stb	r2,-1(r19)
 802c010:	dc002917 	ldw	r16,164(sp)
 802c014:	2f006a2e 	bgeu	r5,fp,802c1c0 <___vfprintf_internal_r+0x21d0>
 802c018:	d9c02384 	addi	r7,sp,142
 802c01c:	3ccfc83a 	sub	r7,r7,r19
 802c020:	d9002344 	addi	r4,sp,141
 802c024:	e1cf883a 	add	r7,fp,r7
 802c028:	00000106 	br	802c030 <___vfprintf_internal_r+0x2040>
 802c02c:	28800003 	ldbu	r2,0(r5)
 802c030:	20800005 	stb	r2,0(r4)
 802c034:	21000044 	addi	r4,r4,1
 802c038:	29400044 	addi	r5,r5,1
 802c03c:	393ffb1e 	bne	r7,r4,802c02c <_gp+0xfffea920>
 802c040:	d8802304 	addi	r2,sp,140
 802c044:	14c5c83a 	sub	r2,r2,r19
 802c048:	d8c02344 	addi	r3,sp,141
 802c04c:	1885883a 	add	r2,r3,r2
 802c050:	003f7006 	br	802be14 <_gp+0xfffea708>
 802c054:	0005883a 	mov	r2,zero
 802c058:	003f0f06 	br	802bc98 <_gp+0xfffea58c>
 802c05c:	d8c03217 	ldw	r3,200(sp)
 802c060:	18c00044 	addi	r3,r3,1
 802c064:	d8c02e15 	stw	r3,184(sp)
 802c068:	1805883a 	mov	r2,r3
 802c06c:	183fb20e 	bge	r3,zero,802bf38 <_gp+0xfffea82c>
 802c070:	0005883a 	mov	r2,zero
 802c074:	003fb006 	br	802bf38 <_gp+0xfffea82c>
 802c078:	d9003617 	ldw	r4,216(sp)
 802c07c:	000d883a 	mov	r6,zero
 802c080:	000f883a 	mov	r7,zero
 802c084:	980b883a 	mov	r5,r19
 802c088:	d8c03c15 	stw	r3,240(sp)
 802c08c:	da003d15 	stw	r8,244(sp)
 802c090:	8027c740 	call	8027c74 <__eqdf2>
 802c094:	d8c03c17 	ldw	r3,240(sp)
 802c098:	da003d17 	ldw	r8,244(sp)
 802c09c:	103f9826 	beq	r2,zero,802bf00 <_gp+0xfffea7f4>
 802c0a0:	00800044 	movi	r2,1
 802c0a4:	10c7c83a 	sub	r3,r2,r3
 802c0a8:	d8c02615 	stw	r3,152(sp)
 802c0ac:	003f9506 	br	802bf04 <_gp+0xfffea7f8>
 802c0b0:	d9002917 	ldw	r4,164(sp)
 802c0b4:	d8c03217 	ldw	r3,200(sp)
 802c0b8:	20800044 	addi	r2,r4,1
 802c0bc:	1885883a 	add	r2,r3,r2
 802c0c0:	d8802e15 	stw	r2,184(sp)
 802c0c4:	103dbf0e 	bge	r2,zero,802b7c4 <_gp+0xfffea0b8>
 802c0c8:	0005883a 	mov	r2,zero
 802c0cc:	003dbd06 	br	802b7c4 <_gp+0xfffea0b8>
 802c0d0:	2000211e 	bne	r4,zero,802c158 <___vfprintf_internal_r+0x2168>
 802c0d4:	9480004c 	andi	r18,r18,1
 802c0d8:	90001f1e 	bne	r18,zero,802c158 <___vfprintf_internal_r+0x2168>
 802c0dc:	00800044 	movi	r2,1
 802c0e0:	d8802e15 	stw	r2,184(sp)
 802c0e4:	003db706 	br	802b7c4 <_gp+0xfffea0b8>
 802c0e8:	00800b44 	movi	r2,45
 802c0ec:	05adc83a 	sub	r22,zero,r22
 802c0f0:	d8802305 	stb	r2,140(sp)
 802c0f4:	003f3f06 	br	802bdf4 <_gp+0xfffea6e8>
 802c0f8:	0005883a 	mov	r2,zero
 802c0fc:	003f5206 	br	802be48 <_gp+0xfffea73c>
 802c100:	90a4703a 	and	r18,r18,r2
 802c104:	903f4e26 	beq	r18,zero,802be40 <_gp+0xfffea734>
 802c108:	003f4a06 	br	802be34 <_gp+0xfffea728>
 802c10c:	00800084 	movi	r2,2
 802c110:	10c5c83a 	sub	r2,r2,r3
 802c114:	003f8406 	br	802bf28 <_gp+0xfffea81c>
 802c118:	d8802d17 	ldw	r2,180(sp)
 802c11c:	d9002d17 	ldw	r4,180(sp)
 802c120:	ac400043 	ldbu	r17,1(r21)
 802c124:	10800017 	ldw	r2,0(r2)
 802c128:	582b883a 	mov	r21,r11
 802c12c:	d8802915 	stw	r2,164(sp)
 802c130:	20800104 	addi	r2,r4,4
 802c134:	d9002917 	ldw	r4,164(sp)
 802c138:	d8802d15 	stw	r2,180(sp)
 802c13c:	203e7a0e 	bge	r4,zero,802bb28 <_gp+0xfffea41c>
 802c140:	8c403fcc 	andi	r17,r17,255
 802c144:	00bfffc4 	movi	r2,-1
 802c148:	8c40201c 	xori	r17,r17,128
 802c14c:	d8802915 	stw	r2,164(sp)
 802c150:	8c7fe004 	addi	r17,r17,-128
 802c154:	00380706 	br	802a174 <_gp+0xfffe8a68>
 802c158:	d8c02917 	ldw	r3,164(sp)
 802c15c:	18c00084 	addi	r3,r3,2
 802c160:	d8c02e15 	stw	r3,184(sp)
 802c164:	1805883a 	mov	r2,r3
 802c168:	183d960e 	bge	r3,zero,802b7c4 <_gp+0xfffea0b8>
 802c16c:	003fd606 	br	802c0c8 <_gp+0xfffea9bc>
 802c170:	0005883a 	mov	r2,zero
 802c174:	003f8e06 	br	802bfb0 <_gp+0xfffea8a4>
 802c178:	9080004c 	andi	r2,r18,1
 802c17c:	103f811e 	bne	r2,zero,802bf84 <_gp+0xfffea878>
 802c180:	d8802117 	ldw	r2,132(sp)
 802c184:	1405c83a 	sub	r2,r2,r16
 802c188:	d8803315 	stw	r2,204(sp)
 802c18c:	b47ef326 	beq	r22,r17,802bd5c <_gp+0xfffea650>
 802c190:	dd802617 	ldw	r22,152(sp)
 802c194:	003f1106 	br	802bddc <_gp+0xfffea6d0>
 802c198:	d9c02785 	stb	r7,158(sp)
 802c19c:	00390406 	br	802a5b0 <_gp+0xfffe8ea4>
 802c1a0:	d9c02785 	stb	r7,158(sp)
 802c1a4:	0038d306 	br	802a4f4 <_gp+0xfffe8de8>
 802c1a8:	d9c02785 	stb	r7,158(sp)
 802c1ac:	003a6106 	br	802ab34 <_gp+0xfffe9428>
 802c1b0:	d9c02785 	stb	r7,158(sp)
 802c1b4:	003af806 	br	802ad98 <_gp+0xfffe968c>
 802c1b8:	0005883a 	mov	r2,zero
 802c1bc:	003d7e06 	br	802b7b8 <_gp+0xfffea0ac>
 802c1c0:	d8802344 	addi	r2,sp,141
 802c1c4:	003f1306 	br	802be14 <_gp+0xfffea708>
 802c1c8:	d9c02785 	stb	r7,158(sp)
 802c1cc:	00392306 	br	802a65c <_gp+0xfffe8f50>
 802c1d0:	d9c02785 	stb	r7,158(sp)
 802c1d4:	003aa906 	br	802ac7c <_gp+0xfffe9570>
 802c1d8:	d9c02785 	stb	r7,158(sp)
 802c1dc:	003a3d06 	br	802aad4 <_gp+0xfffe93c8>
 802c1e0:	d9c02785 	stb	r7,158(sp)
 802c1e4:	003aca06 	br	802ad10 <_gp+0xfffe9604>

0802c1e8 <__vfprintf_internal>:
 802c1e8:	00820134 	movhi	r2,2052
 802c1ec:	10a5c504 	addi	r2,r2,-26860
 802c1f0:	300f883a 	mov	r7,r6
 802c1f4:	280d883a 	mov	r6,r5
 802c1f8:	200b883a 	mov	r5,r4
 802c1fc:	11000017 	ldw	r4,0(r2)
 802c200:	8029ff01 	jmpi	8029ff0 <___vfprintf_internal_r>

0802c204 <__sbprintf>:
 802c204:	2880030b 	ldhu	r2,12(r5)
 802c208:	2ac01917 	ldw	r11,100(r5)
 802c20c:	2a80038b 	ldhu	r10,14(r5)
 802c210:	2a400717 	ldw	r9,28(r5)
 802c214:	2a000917 	ldw	r8,36(r5)
 802c218:	defee204 	addi	sp,sp,-1144
 802c21c:	00c10004 	movi	r3,1024
 802c220:	dc011a15 	stw	r16,1128(sp)
 802c224:	10bfff4c 	andi	r2,r2,65533
 802c228:	2821883a 	mov	r16,r5
 802c22c:	d8cb883a 	add	r5,sp,r3
 802c230:	dc811c15 	stw	r18,1136(sp)
 802c234:	dc411b15 	stw	r17,1132(sp)
 802c238:	dfc11d15 	stw	ra,1140(sp)
 802c23c:	2025883a 	mov	r18,r4
 802c240:	d881030d 	sth	r2,1036(sp)
 802c244:	dac11915 	stw	r11,1124(sp)
 802c248:	da81038d 	sth	r10,1038(sp)
 802c24c:	da410715 	stw	r9,1052(sp)
 802c250:	da010915 	stw	r8,1060(sp)
 802c254:	dec10015 	stw	sp,1024(sp)
 802c258:	dec10415 	stw	sp,1040(sp)
 802c25c:	d8c10215 	stw	r3,1032(sp)
 802c260:	d8c10515 	stw	r3,1044(sp)
 802c264:	d8010615 	stw	zero,1048(sp)
 802c268:	8029ff00 	call	8029ff0 <___vfprintf_internal_r>
 802c26c:	1023883a 	mov	r17,r2
 802c270:	10000416 	blt	r2,zero,802c284 <__sbprintf+0x80>
 802c274:	d9410004 	addi	r5,sp,1024
 802c278:	9009883a 	mov	r4,r18
 802c27c:	802e0380 	call	802e038 <_fflush_r>
 802c280:	10000d1e 	bne	r2,zero,802c2b8 <__sbprintf+0xb4>
 802c284:	d881030b 	ldhu	r2,1036(sp)
 802c288:	1080100c 	andi	r2,r2,64
 802c28c:	10000326 	beq	r2,zero,802c29c <__sbprintf+0x98>
 802c290:	8080030b 	ldhu	r2,12(r16)
 802c294:	10801014 	ori	r2,r2,64
 802c298:	8080030d 	sth	r2,12(r16)
 802c29c:	8805883a 	mov	r2,r17
 802c2a0:	dfc11d17 	ldw	ra,1140(sp)
 802c2a4:	dc811c17 	ldw	r18,1136(sp)
 802c2a8:	dc411b17 	ldw	r17,1132(sp)
 802c2ac:	dc011a17 	ldw	r16,1128(sp)
 802c2b0:	dec11e04 	addi	sp,sp,1144
 802c2b4:	f800283a 	ret
 802c2b8:	047fffc4 	movi	r17,-1
 802c2bc:	003ff106 	br	802c284 <_gp+0xfffeab78>

0802c2c0 <__swsetup_r>:
 802c2c0:	00820134 	movhi	r2,2052
 802c2c4:	defffd04 	addi	sp,sp,-12
 802c2c8:	10a5c504 	addi	r2,r2,-26860
 802c2cc:	dc400115 	stw	r17,4(sp)
 802c2d0:	2023883a 	mov	r17,r4
 802c2d4:	11000017 	ldw	r4,0(r2)
 802c2d8:	dc000015 	stw	r16,0(sp)
 802c2dc:	dfc00215 	stw	ra,8(sp)
 802c2e0:	2821883a 	mov	r16,r5
 802c2e4:	20000226 	beq	r4,zero,802c2f0 <__swsetup_r+0x30>
 802c2e8:	20800e17 	ldw	r2,56(r4)
 802c2ec:	10003126 	beq	r2,zero,802c3b4 <__swsetup_r+0xf4>
 802c2f0:	8080030b 	ldhu	r2,12(r16)
 802c2f4:	10c0020c 	andi	r3,r2,8
 802c2f8:	1009883a 	mov	r4,r2
 802c2fc:	18000f26 	beq	r3,zero,802c33c <__swsetup_r+0x7c>
 802c300:	80c00417 	ldw	r3,16(r16)
 802c304:	18001526 	beq	r3,zero,802c35c <__swsetup_r+0x9c>
 802c308:	1100004c 	andi	r4,r2,1
 802c30c:	20001c1e 	bne	r4,zero,802c380 <__swsetup_r+0xc0>
 802c310:	1080008c 	andi	r2,r2,2
 802c314:	1000291e 	bne	r2,zero,802c3bc <__swsetup_r+0xfc>
 802c318:	80800517 	ldw	r2,20(r16)
 802c31c:	80800215 	stw	r2,8(r16)
 802c320:	18001c26 	beq	r3,zero,802c394 <__swsetup_r+0xd4>
 802c324:	0005883a 	mov	r2,zero
 802c328:	dfc00217 	ldw	ra,8(sp)
 802c32c:	dc400117 	ldw	r17,4(sp)
 802c330:	dc000017 	ldw	r16,0(sp)
 802c334:	dec00304 	addi	sp,sp,12
 802c338:	f800283a 	ret
 802c33c:	2080040c 	andi	r2,r4,16
 802c340:	10002e26 	beq	r2,zero,802c3fc <__swsetup_r+0x13c>
 802c344:	2080010c 	andi	r2,r4,4
 802c348:	10001e1e 	bne	r2,zero,802c3c4 <__swsetup_r+0x104>
 802c34c:	80c00417 	ldw	r3,16(r16)
 802c350:	20800214 	ori	r2,r4,8
 802c354:	8080030d 	sth	r2,12(r16)
 802c358:	183feb1e 	bne	r3,zero,802c308 <_gp+0xfffeabfc>
 802c35c:	1100a00c 	andi	r4,r2,640
 802c360:	01408004 	movi	r5,512
 802c364:	217fe826 	beq	r4,r5,802c308 <_gp+0xfffeabfc>
 802c368:	800b883a 	mov	r5,r16
 802c36c:	8809883a 	mov	r4,r17
 802c370:	802efb80 	call	802efb8 <__smakebuf_r>
 802c374:	8080030b 	ldhu	r2,12(r16)
 802c378:	80c00417 	ldw	r3,16(r16)
 802c37c:	003fe206 	br	802c308 <_gp+0xfffeabfc>
 802c380:	80800517 	ldw	r2,20(r16)
 802c384:	80000215 	stw	zero,8(r16)
 802c388:	0085c83a 	sub	r2,zero,r2
 802c38c:	80800615 	stw	r2,24(r16)
 802c390:	183fe41e 	bne	r3,zero,802c324 <_gp+0xfffeac18>
 802c394:	80c0030b 	ldhu	r3,12(r16)
 802c398:	0005883a 	mov	r2,zero
 802c39c:	1900200c 	andi	r4,r3,128
 802c3a0:	203fe126 	beq	r4,zero,802c328 <_gp+0xfffeac1c>
 802c3a4:	18c01014 	ori	r3,r3,64
 802c3a8:	80c0030d 	sth	r3,12(r16)
 802c3ac:	00bfffc4 	movi	r2,-1
 802c3b0:	003fdd06 	br	802c328 <_gp+0xfffeac1c>
 802c3b4:	802e4140 	call	802e414 <__sinit>
 802c3b8:	003fcd06 	br	802c2f0 <_gp+0xfffeabe4>
 802c3bc:	0005883a 	mov	r2,zero
 802c3c0:	003fd606 	br	802c31c <_gp+0xfffeac10>
 802c3c4:	81400c17 	ldw	r5,48(r16)
 802c3c8:	28000626 	beq	r5,zero,802c3e4 <__swsetup_r+0x124>
 802c3cc:	80801004 	addi	r2,r16,64
 802c3d0:	28800326 	beq	r5,r2,802c3e0 <__swsetup_r+0x120>
 802c3d4:	8809883a 	mov	r4,r17
 802c3d8:	802e5880 	call	802e588 <_free_r>
 802c3dc:	8100030b 	ldhu	r4,12(r16)
 802c3e0:	80000c15 	stw	zero,48(r16)
 802c3e4:	80c00417 	ldw	r3,16(r16)
 802c3e8:	00bff6c4 	movi	r2,-37
 802c3ec:	1108703a 	and	r4,r2,r4
 802c3f0:	80000115 	stw	zero,4(r16)
 802c3f4:	80c00015 	stw	r3,0(r16)
 802c3f8:	003fd506 	br	802c350 <_gp+0xfffeac44>
 802c3fc:	00800244 	movi	r2,9
 802c400:	88800015 	stw	r2,0(r17)
 802c404:	20801014 	ori	r2,r4,64
 802c408:	8080030d 	sth	r2,12(r16)
 802c40c:	00bfffc4 	movi	r2,-1
 802c410:	003fc506 	br	802c328 <_gp+0xfffeac1c>

0802c414 <__call_exitprocs>:
 802c414:	defff504 	addi	sp,sp,-44
 802c418:	df000915 	stw	fp,36(sp)
 802c41c:	dd400615 	stw	r21,24(sp)
 802c420:	dc800315 	stw	r18,12(sp)
 802c424:	dfc00a15 	stw	ra,40(sp)
 802c428:	ddc00815 	stw	r23,32(sp)
 802c42c:	dd800715 	stw	r22,28(sp)
 802c430:	dd000515 	stw	r20,20(sp)
 802c434:	dcc00415 	stw	r19,16(sp)
 802c438:	dc400215 	stw	r17,8(sp)
 802c43c:	dc000115 	stw	r16,4(sp)
 802c440:	d9000015 	stw	r4,0(sp)
 802c444:	2839883a 	mov	fp,r5
 802c448:	04800044 	movi	r18,1
 802c44c:	057fffc4 	movi	r21,-1
 802c450:	00820134 	movhi	r2,2052
 802c454:	10a5c404 	addi	r2,r2,-26864
 802c458:	12000017 	ldw	r8,0(r2)
 802c45c:	45005217 	ldw	r20,328(r8)
 802c460:	44c05204 	addi	r19,r8,328
 802c464:	a0001c26 	beq	r20,zero,802c4d8 <__call_exitprocs+0xc4>
 802c468:	a0800117 	ldw	r2,4(r20)
 802c46c:	15ffffc4 	addi	r23,r2,-1
 802c470:	b8000d16 	blt	r23,zero,802c4a8 <__call_exitprocs+0x94>
 802c474:	14000044 	addi	r16,r2,1
 802c478:	8421883a 	add	r16,r16,r16
 802c47c:	8421883a 	add	r16,r16,r16
 802c480:	84402004 	addi	r17,r16,128
 802c484:	a463883a 	add	r17,r20,r17
 802c488:	a421883a 	add	r16,r20,r16
 802c48c:	e0001e26 	beq	fp,zero,802c508 <__call_exitprocs+0xf4>
 802c490:	80804017 	ldw	r2,256(r16)
 802c494:	e0801c26 	beq	fp,r2,802c508 <__call_exitprocs+0xf4>
 802c498:	bdffffc4 	addi	r23,r23,-1
 802c49c:	843fff04 	addi	r16,r16,-4
 802c4a0:	8c7fff04 	addi	r17,r17,-4
 802c4a4:	bd7ff91e 	bne	r23,r21,802c48c <_gp+0xfffead80>
 802c4a8:	008200f4 	movhi	r2,2051
 802c4ac:	10a51704 	addi	r2,r2,-27556
 802c4b0:	10000926 	beq	r2,zero,802c4d8 <__call_exitprocs+0xc4>
 802c4b4:	a0800117 	ldw	r2,4(r20)
 802c4b8:	1000301e 	bne	r2,zero,802c57c <__call_exitprocs+0x168>
 802c4bc:	a0800017 	ldw	r2,0(r20)
 802c4c0:	10003226 	beq	r2,zero,802c58c <__call_exitprocs+0x178>
 802c4c4:	a009883a 	mov	r4,r20
 802c4c8:	98800015 	stw	r2,0(r19)
 802c4cc:	802945c0 	call	802945c <free>
 802c4d0:	9d000017 	ldw	r20,0(r19)
 802c4d4:	a03fe41e 	bne	r20,zero,802c468 <_gp+0xfffead5c>
 802c4d8:	dfc00a17 	ldw	ra,40(sp)
 802c4dc:	df000917 	ldw	fp,36(sp)
 802c4e0:	ddc00817 	ldw	r23,32(sp)
 802c4e4:	dd800717 	ldw	r22,28(sp)
 802c4e8:	dd400617 	ldw	r21,24(sp)
 802c4ec:	dd000517 	ldw	r20,20(sp)
 802c4f0:	dcc00417 	ldw	r19,16(sp)
 802c4f4:	dc800317 	ldw	r18,12(sp)
 802c4f8:	dc400217 	ldw	r17,8(sp)
 802c4fc:	dc000117 	ldw	r16,4(sp)
 802c500:	dec00b04 	addi	sp,sp,44
 802c504:	f800283a 	ret
 802c508:	a0800117 	ldw	r2,4(r20)
 802c50c:	80c00017 	ldw	r3,0(r16)
 802c510:	10bfffc4 	addi	r2,r2,-1
 802c514:	15c01426 	beq	r2,r23,802c568 <__call_exitprocs+0x154>
 802c518:	80000015 	stw	zero,0(r16)
 802c51c:	183fde26 	beq	r3,zero,802c498 <_gp+0xfffead8c>
 802c520:	95c8983a 	sll	r4,r18,r23
 802c524:	a0806217 	ldw	r2,392(r20)
 802c528:	a5800117 	ldw	r22,4(r20)
 802c52c:	2084703a 	and	r2,r4,r2
 802c530:	10000b26 	beq	r2,zero,802c560 <__call_exitprocs+0x14c>
 802c534:	a0806317 	ldw	r2,396(r20)
 802c538:	2088703a 	and	r4,r4,r2
 802c53c:	20000c1e 	bne	r4,zero,802c570 <__call_exitprocs+0x15c>
 802c540:	89400017 	ldw	r5,0(r17)
 802c544:	d9000017 	ldw	r4,0(sp)
 802c548:	183ee83a 	callr	r3
 802c54c:	a0800117 	ldw	r2,4(r20)
 802c550:	15bfbf1e 	bne	r2,r22,802c450 <_gp+0xfffead44>
 802c554:	98800017 	ldw	r2,0(r19)
 802c558:	153fcf26 	beq	r2,r20,802c498 <_gp+0xfffead8c>
 802c55c:	003fbc06 	br	802c450 <_gp+0xfffead44>
 802c560:	183ee83a 	callr	r3
 802c564:	003ff906 	br	802c54c <_gp+0xfffeae40>
 802c568:	a5c00115 	stw	r23,4(r20)
 802c56c:	003feb06 	br	802c51c <_gp+0xfffeae10>
 802c570:	89000017 	ldw	r4,0(r17)
 802c574:	183ee83a 	callr	r3
 802c578:	003ff406 	br	802c54c <_gp+0xfffeae40>
 802c57c:	a0800017 	ldw	r2,0(r20)
 802c580:	a027883a 	mov	r19,r20
 802c584:	1029883a 	mov	r20,r2
 802c588:	003fb606 	br	802c464 <_gp+0xfffead58>
 802c58c:	0005883a 	mov	r2,zero
 802c590:	003ffb06 	br	802c580 <_gp+0xfffeae74>

0802c594 <quorem>:
 802c594:	defff704 	addi	sp,sp,-36
 802c598:	dc800215 	stw	r18,8(sp)
 802c59c:	20800417 	ldw	r2,16(r4)
 802c5a0:	2c800417 	ldw	r18,16(r5)
 802c5a4:	dfc00815 	stw	ra,32(sp)
 802c5a8:	ddc00715 	stw	r23,28(sp)
 802c5ac:	dd800615 	stw	r22,24(sp)
 802c5b0:	dd400515 	stw	r21,20(sp)
 802c5b4:	dd000415 	stw	r20,16(sp)
 802c5b8:	dcc00315 	stw	r19,12(sp)
 802c5bc:	dc400115 	stw	r17,4(sp)
 802c5c0:	dc000015 	stw	r16,0(sp)
 802c5c4:	14807116 	blt	r2,r18,802c78c <quorem+0x1f8>
 802c5c8:	94bfffc4 	addi	r18,r18,-1
 802c5cc:	94ad883a 	add	r22,r18,r18
 802c5d0:	b5ad883a 	add	r22,r22,r22
 802c5d4:	2c400504 	addi	r17,r5,20
 802c5d8:	8da9883a 	add	r20,r17,r22
 802c5dc:	25400504 	addi	r21,r4,20
 802c5e0:	282f883a 	mov	r23,r5
 802c5e4:	adad883a 	add	r22,r21,r22
 802c5e8:	a1400017 	ldw	r5,0(r20)
 802c5ec:	2021883a 	mov	r16,r4
 802c5f0:	b1000017 	ldw	r4,0(r22)
 802c5f4:	29400044 	addi	r5,r5,1
 802c5f8:	8025ae80 	call	8025ae8 <__udivsi3>
 802c5fc:	1027883a 	mov	r19,r2
 802c600:	10002c26 	beq	r2,zero,802c6b4 <quorem+0x120>
 802c604:	a813883a 	mov	r9,r21
 802c608:	880b883a 	mov	r5,r17
 802c60c:	0009883a 	mov	r4,zero
 802c610:	000d883a 	mov	r6,zero
 802c614:	2a000017 	ldw	r8,0(r5)
 802c618:	49c00017 	ldw	r7,0(r9)
 802c61c:	29400104 	addi	r5,r5,4
 802c620:	40bfffcc 	andi	r2,r8,65535
 802c624:	14c5383a 	mul	r2,r2,r19
 802c628:	4010d43a 	srli	r8,r8,16
 802c62c:	38ffffcc 	andi	r3,r7,65535
 802c630:	1105883a 	add	r2,r2,r4
 802c634:	1008d43a 	srli	r4,r2,16
 802c638:	44d1383a 	mul	r8,r8,r19
 802c63c:	198d883a 	add	r6,r3,r6
 802c640:	10ffffcc 	andi	r3,r2,65535
 802c644:	30c7c83a 	sub	r3,r6,r3
 802c648:	380ed43a 	srli	r7,r7,16
 802c64c:	4105883a 	add	r2,r8,r4
 802c650:	180dd43a 	srai	r6,r3,16
 802c654:	113fffcc 	andi	r4,r2,65535
 802c658:	390fc83a 	sub	r7,r7,r4
 802c65c:	398d883a 	add	r6,r7,r6
 802c660:	300e943a 	slli	r7,r6,16
 802c664:	18ffffcc 	andi	r3,r3,65535
 802c668:	1008d43a 	srli	r4,r2,16
 802c66c:	38ceb03a 	or	r7,r7,r3
 802c670:	49c00015 	stw	r7,0(r9)
 802c674:	300dd43a 	srai	r6,r6,16
 802c678:	4a400104 	addi	r9,r9,4
 802c67c:	a17fe52e 	bgeu	r20,r5,802c614 <_gp+0xfffeaf08>
 802c680:	b0800017 	ldw	r2,0(r22)
 802c684:	10000b1e 	bne	r2,zero,802c6b4 <quorem+0x120>
 802c688:	b0bfff04 	addi	r2,r22,-4
 802c68c:	a880082e 	bgeu	r21,r2,802c6b0 <quorem+0x11c>
 802c690:	b0ffff17 	ldw	r3,-4(r22)
 802c694:	18000326 	beq	r3,zero,802c6a4 <quorem+0x110>
 802c698:	00000506 	br	802c6b0 <quorem+0x11c>
 802c69c:	10c00017 	ldw	r3,0(r2)
 802c6a0:	1800031e 	bne	r3,zero,802c6b0 <quorem+0x11c>
 802c6a4:	10bfff04 	addi	r2,r2,-4
 802c6a8:	94bfffc4 	addi	r18,r18,-1
 802c6ac:	a8bffb36 	bltu	r21,r2,802c69c <_gp+0xfffeaf90>
 802c6b0:	84800415 	stw	r18,16(r16)
 802c6b4:	b80b883a 	mov	r5,r23
 802c6b8:	8009883a 	mov	r4,r16
 802c6bc:	802fda40 	call	802fda4 <__mcmp>
 802c6c0:	10002616 	blt	r2,zero,802c75c <quorem+0x1c8>
 802c6c4:	9cc00044 	addi	r19,r19,1
 802c6c8:	a805883a 	mov	r2,r21
 802c6cc:	000b883a 	mov	r5,zero
 802c6d0:	11000017 	ldw	r4,0(r2)
 802c6d4:	89800017 	ldw	r6,0(r17)
 802c6d8:	10800104 	addi	r2,r2,4
 802c6dc:	20ffffcc 	andi	r3,r4,65535
 802c6e0:	194b883a 	add	r5,r3,r5
 802c6e4:	30ffffcc 	andi	r3,r6,65535
 802c6e8:	28c7c83a 	sub	r3,r5,r3
 802c6ec:	300cd43a 	srli	r6,r6,16
 802c6f0:	2008d43a 	srli	r4,r4,16
 802c6f4:	180bd43a 	srai	r5,r3,16
 802c6f8:	18ffffcc 	andi	r3,r3,65535
 802c6fc:	2189c83a 	sub	r4,r4,r6
 802c700:	2149883a 	add	r4,r4,r5
 802c704:	200c943a 	slli	r6,r4,16
 802c708:	8c400104 	addi	r17,r17,4
 802c70c:	200bd43a 	srai	r5,r4,16
 802c710:	30c6b03a 	or	r3,r6,r3
 802c714:	10ffff15 	stw	r3,-4(r2)
 802c718:	a47fed2e 	bgeu	r20,r17,802c6d0 <_gp+0xfffeafc4>
 802c71c:	9485883a 	add	r2,r18,r18
 802c720:	1085883a 	add	r2,r2,r2
 802c724:	a887883a 	add	r3,r21,r2
 802c728:	18800017 	ldw	r2,0(r3)
 802c72c:	10000b1e 	bne	r2,zero,802c75c <quorem+0x1c8>
 802c730:	18bfff04 	addi	r2,r3,-4
 802c734:	a880082e 	bgeu	r21,r2,802c758 <quorem+0x1c4>
 802c738:	18ffff17 	ldw	r3,-4(r3)
 802c73c:	18000326 	beq	r3,zero,802c74c <quorem+0x1b8>
 802c740:	00000506 	br	802c758 <quorem+0x1c4>
 802c744:	10c00017 	ldw	r3,0(r2)
 802c748:	1800031e 	bne	r3,zero,802c758 <quorem+0x1c4>
 802c74c:	10bfff04 	addi	r2,r2,-4
 802c750:	94bfffc4 	addi	r18,r18,-1
 802c754:	a8bffb36 	bltu	r21,r2,802c744 <_gp+0xfffeb038>
 802c758:	84800415 	stw	r18,16(r16)
 802c75c:	9805883a 	mov	r2,r19
 802c760:	dfc00817 	ldw	ra,32(sp)
 802c764:	ddc00717 	ldw	r23,28(sp)
 802c768:	dd800617 	ldw	r22,24(sp)
 802c76c:	dd400517 	ldw	r21,20(sp)
 802c770:	dd000417 	ldw	r20,16(sp)
 802c774:	dcc00317 	ldw	r19,12(sp)
 802c778:	dc800217 	ldw	r18,8(sp)
 802c77c:	dc400117 	ldw	r17,4(sp)
 802c780:	dc000017 	ldw	r16,0(sp)
 802c784:	dec00904 	addi	sp,sp,36
 802c788:	f800283a 	ret
 802c78c:	0005883a 	mov	r2,zero
 802c790:	003ff306 	br	802c760 <_gp+0xfffeb054>

0802c794 <_dtoa_r>:
 802c794:	20801017 	ldw	r2,64(r4)
 802c798:	deffde04 	addi	sp,sp,-136
 802c79c:	df002015 	stw	fp,128(sp)
 802c7a0:	dcc01b15 	stw	r19,108(sp)
 802c7a4:	dc801a15 	stw	r18,104(sp)
 802c7a8:	dc401915 	stw	r17,100(sp)
 802c7ac:	dc001815 	stw	r16,96(sp)
 802c7b0:	dfc02115 	stw	ra,132(sp)
 802c7b4:	ddc01f15 	stw	r23,124(sp)
 802c7b8:	dd801e15 	stw	r22,120(sp)
 802c7bc:	dd401d15 	stw	r21,116(sp)
 802c7c0:	dd001c15 	stw	r20,112(sp)
 802c7c4:	d9c00315 	stw	r7,12(sp)
 802c7c8:	2039883a 	mov	fp,r4
 802c7cc:	3023883a 	mov	r17,r6
 802c7d0:	2825883a 	mov	r18,r5
 802c7d4:	dc002417 	ldw	r16,144(sp)
 802c7d8:	3027883a 	mov	r19,r6
 802c7dc:	10000826 	beq	r2,zero,802c800 <_dtoa_r+0x6c>
 802c7e0:	21801117 	ldw	r6,68(r4)
 802c7e4:	00c00044 	movi	r3,1
 802c7e8:	100b883a 	mov	r5,r2
 802c7ec:	1986983a 	sll	r3,r3,r6
 802c7f0:	11800115 	stw	r6,4(r2)
 802c7f4:	10c00215 	stw	r3,8(r2)
 802c7f8:	802f5840 	call	802f584 <_Bfree>
 802c7fc:	e0001015 	stw	zero,64(fp)
 802c800:	88002e16 	blt	r17,zero,802c8bc <_dtoa_r+0x128>
 802c804:	80000015 	stw	zero,0(r16)
 802c808:	889ffc2c 	andhi	r2,r17,32752
 802c80c:	00dffc34 	movhi	r3,32752
 802c810:	10c01c26 	beq	r2,r3,802c884 <_dtoa_r+0xf0>
 802c814:	000d883a 	mov	r6,zero
 802c818:	000f883a 	mov	r7,zero
 802c81c:	9009883a 	mov	r4,r18
 802c820:	980b883a 	mov	r5,r19
 802c824:	8027c740 	call	8027c74 <__eqdf2>
 802c828:	10002b1e 	bne	r2,zero,802c8d8 <_dtoa_r+0x144>
 802c82c:	d9c02317 	ldw	r7,140(sp)
 802c830:	00800044 	movi	r2,1
 802c834:	38800015 	stw	r2,0(r7)
 802c838:	d8802517 	ldw	r2,148(sp)
 802c83c:	10019e26 	beq	r2,zero,802ceb8 <_dtoa_r+0x724>
 802c840:	d8c02517 	ldw	r3,148(sp)
 802c844:	008200f4 	movhi	r2,2051
 802c848:	109e3b44 	addi	r2,r2,30957
 802c84c:	18800015 	stw	r2,0(r3)
 802c850:	10bfffc4 	addi	r2,r2,-1
 802c854:	dfc02117 	ldw	ra,132(sp)
 802c858:	df002017 	ldw	fp,128(sp)
 802c85c:	ddc01f17 	ldw	r23,124(sp)
 802c860:	dd801e17 	ldw	r22,120(sp)
 802c864:	dd401d17 	ldw	r21,116(sp)
 802c868:	dd001c17 	ldw	r20,112(sp)
 802c86c:	dcc01b17 	ldw	r19,108(sp)
 802c870:	dc801a17 	ldw	r18,104(sp)
 802c874:	dc401917 	ldw	r17,100(sp)
 802c878:	dc001817 	ldw	r16,96(sp)
 802c87c:	dec02204 	addi	sp,sp,136
 802c880:	f800283a 	ret
 802c884:	d8c02317 	ldw	r3,140(sp)
 802c888:	0089c3c4 	movi	r2,9999
 802c88c:	18800015 	stw	r2,0(r3)
 802c890:	90017726 	beq	r18,zero,802ce70 <_dtoa_r+0x6dc>
 802c894:	008200f4 	movhi	r2,2051
 802c898:	109e4704 	addi	r2,r2,31004
 802c89c:	d9002517 	ldw	r4,148(sp)
 802c8a0:	203fec26 	beq	r4,zero,802c854 <_gp+0xfffeb148>
 802c8a4:	10c000c7 	ldb	r3,3(r2)
 802c8a8:	1801781e 	bne	r3,zero,802ce8c <_dtoa_r+0x6f8>
 802c8ac:	10c000c4 	addi	r3,r2,3
 802c8b0:	d9802517 	ldw	r6,148(sp)
 802c8b4:	30c00015 	stw	r3,0(r6)
 802c8b8:	003fe606 	br	802c854 <_gp+0xfffeb148>
 802c8bc:	04e00034 	movhi	r19,32768
 802c8c0:	9cffffc4 	addi	r19,r19,-1
 802c8c4:	00800044 	movi	r2,1
 802c8c8:	8ce6703a 	and	r19,r17,r19
 802c8cc:	80800015 	stw	r2,0(r16)
 802c8d0:	9823883a 	mov	r17,r19
 802c8d4:	003fcc06 	br	802c808 <_gp+0xfffeb0fc>
 802c8d8:	d8800204 	addi	r2,sp,8
 802c8dc:	d8800015 	stw	r2,0(sp)
 802c8e0:	d9c00104 	addi	r7,sp,4
 802c8e4:	900b883a 	mov	r5,r18
 802c8e8:	980d883a 	mov	r6,r19
 802c8ec:	e009883a 	mov	r4,fp
 802c8f0:	8820d53a 	srli	r16,r17,20
 802c8f4:	80301700 	call	8030170 <__d2b>
 802c8f8:	d8800915 	stw	r2,36(sp)
 802c8fc:	8001651e 	bne	r16,zero,802ce94 <_dtoa_r+0x700>
 802c900:	dd800217 	ldw	r22,8(sp)
 802c904:	dc000117 	ldw	r16,4(sp)
 802c908:	00800804 	movi	r2,32
 802c90c:	b421883a 	add	r16,r22,r16
 802c910:	80c10c84 	addi	r3,r16,1074
 802c914:	10c2d10e 	bge	r2,r3,802d45c <_dtoa_r+0xcc8>
 802c918:	00801004 	movi	r2,64
 802c91c:	81010484 	addi	r4,r16,1042
 802c920:	10c7c83a 	sub	r3,r2,r3
 802c924:	9108d83a 	srl	r4,r18,r4
 802c928:	88e2983a 	sll	r17,r17,r3
 802c92c:	2448b03a 	or	r4,r4,r17
 802c930:	802903c0 	call	802903c <__floatunsidf>
 802c934:	017f8434 	movhi	r5,65040
 802c938:	01800044 	movi	r6,1
 802c93c:	1009883a 	mov	r4,r2
 802c940:	194b883a 	add	r5,r3,r5
 802c944:	843fffc4 	addi	r16,r16,-1
 802c948:	d9801115 	stw	r6,68(sp)
 802c94c:	000d883a 	mov	r6,zero
 802c950:	01cffe34 	movhi	r7,16376
 802c954:	80285e40 	call	80285e4 <__subdf3>
 802c958:	0198dbf4 	movhi	r6,25455
 802c95c:	01cff4f4 	movhi	r7,16339
 802c960:	3190d844 	addi	r6,r6,17249
 802c964:	39e1e9c4 	addi	r7,r7,-30809
 802c968:	1009883a 	mov	r4,r2
 802c96c:	180b883a 	mov	r5,r3
 802c970:	8027ecc0 	call	8027ecc <__muldf3>
 802c974:	01a2d874 	movhi	r6,35681
 802c978:	01cff1f4 	movhi	r7,16327
 802c97c:	31b22cc4 	addi	r6,r6,-14157
 802c980:	39e28a04 	addi	r7,r7,-30168
 802c984:	180b883a 	mov	r5,r3
 802c988:	1009883a 	mov	r4,r2
 802c98c:	8026ae00 	call	8026ae0 <__adddf3>
 802c990:	8009883a 	mov	r4,r16
 802c994:	1029883a 	mov	r20,r2
 802c998:	1823883a 	mov	r17,r3
 802c99c:	8028f600 	call	8028f60 <__floatsidf>
 802c9a0:	019427f4 	movhi	r6,20639
 802c9a4:	01cff4f4 	movhi	r7,16339
 802c9a8:	319e7ec4 	addi	r6,r6,31227
 802c9ac:	39d104c4 	addi	r7,r7,17427
 802c9b0:	1009883a 	mov	r4,r2
 802c9b4:	180b883a 	mov	r5,r3
 802c9b8:	8027ecc0 	call	8027ecc <__muldf3>
 802c9bc:	100d883a 	mov	r6,r2
 802c9c0:	180f883a 	mov	r7,r3
 802c9c4:	a009883a 	mov	r4,r20
 802c9c8:	880b883a 	mov	r5,r17
 802c9cc:	8026ae00 	call	8026ae0 <__adddf3>
 802c9d0:	1009883a 	mov	r4,r2
 802c9d4:	180b883a 	mov	r5,r3
 802c9d8:	1029883a 	mov	r20,r2
 802c9dc:	1823883a 	mov	r17,r3
 802c9e0:	8028ee00 	call	8028ee0 <__fixdfsi>
 802c9e4:	000d883a 	mov	r6,zero
 802c9e8:	000f883a 	mov	r7,zero
 802c9ec:	a009883a 	mov	r4,r20
 802c9f0:	880b883a 	mov	r5,r17
 802c9f4:	d8800515 	stw	r2,20(sp)
 802c9f8:	8027dd80 	call	8027dd8 <__ledf2>
 802c9fc:	10028716 	blt	r2,zero,802d41c <_dtoa_r+0xc88>
 802ca00:	d8c00517 	ldw	r3,20(sp)
 802ca04:	00800584 	movi	r2,22
 802ca08:	10c27536 	bltu	r2,r3,802d3e0 <_dtoa_r+0xc4c>
 802ca0c:	180490fa 	slli	r2,r3,3
 802ca10:	00c200f4 	movhi	r3,2051
 802ca14:	18de6204 	addi	r3,r3,31112
 802ca18:	1885883a 	add	r2,r3,r2
 802ca1c:	11000017 	ldw	r4,0(r2)
 802ca20:	11400117 	ldw	r5,4(r2)
 802ca24:	900d883a 	mov	r6,r18
 802ca28:	980f883a 	mov	r7,r19
 802ca2c:	8027cfc0 	call	8027cfc <__gedf2>
 802ca30:	00828d0e 	bge	zero,r2,802d468 <_dtoa_r+0xcd4>
 802ca34:	d9000517 	ldw	r4,20(sp)
 802ca38:	d8000e15 	stw	zero,56(sp)
 802ca3c:	213fffc4 	addi	r4,r4,-1
 802ca40:	d9000515 	stw	r4,20(sp)
 802ca44:	b42dc83a 	sub	r22,r22,r16
 802ca48:	b5bfffc4 	addi	r22,r22,-1
 802ca4c:	b0026f16 	blt	r22,zero,802d40c <_dtoa_r+0xc78>
 802ca50:	d8000815 	stw	zero,32(sp)
 802ca54:	d9c00517 	ldw	r7,20(sp)
 802ca58:	38026416 	blt	r7,zero,802d3ec <_dtoa_r+0xc58>
 802ca5c:	b1ed883a 	add	r22,r22,r7
 802ca60:	d9c00d15 	stw	r7,52(sp)
 802ca64:	d8000a15 	stw	zero,40(sp)
 802ca68:	d9800317 	ldw	r6,12(sp)
 802ca6c:	00800244 	movi	r2,9
 802ca70:	11811436 	bltu	r2,r6,802cec4 <_dtoa_r+0x730>
 802ca74:	00800144 	movi	r2,5
 802ca78:	1184e10e 	bge	r2,r6,802de00 <_dtoa_r+0x166c>
 802ca7c:	31bfff04 	addi	r6,r6,-4
 802ca80:	d9800315 	stw	r6,12(sp)
 802ca84:	0023883a 	mov	r17,zero
 802ca88:	d9800317 	ldw	r6,12(sp)
 802ca8c:	008000c4 	movi	r2,3
 802ca90:	30836726 	beq	r6,r2,802d830 <_dtoa_r+0x109c>
 802ca94:	1183410e 	bge	r2,r6,802d79c <_dtoa_r+0x1008>
 802ca98:	d9c00317 	ldw	r7,12(sp)
 802ca9c:	00800104 	movi	r2,4
 802caa0:	38827c26 	beq	r7,r2,802d494 <_dtoa_r+0xd00>
 802caa4:	00800144 	movi	r2,5
 802caa8:	3884c41e 	bne	r7,r2,802ddbc <_dtoa_r+0x1628>
 802caac:	00800044 	movi	r2,1
 802cab0:	d8800b15 	stw	r2,44(sp)
 802cab4:	d8c00517 	ldw	r3,20(sp)
 802cab8:	d9002217 	ldw	r4,136(sp)
 802cabc:	1907883a 	add	r3,r3,r4
 802cac0:	19800044 	addi	r6,r3,1
 802cac4:	d8c00c15 	stw	r3,48(sp)
 802cac8:	d9800615 	stw	r6,24(sp)
 802cacc:	0183a40e 	bge	zero,r6,802d960 <_dtoa_r+0x11cc>
 802cad0:	d9800617 	ldw	r6,24(sp)
 802cad4:	3021883a 	mov	r16,r6
 802cad8:	e0001115 	stw	zero,68(fp)
 802cadc:	008005c4 	movi	r2,23
 802cae0:	1184c92e 	bgeu	r2,r6,802de08 <_dtoa_r+0x1674>
 802cae4:	00c00044 	movi	r3,1
 802cae8:	00800104 	movi	r2,4
 802caec:	1085883a 	add	r2,r2,r2
 802caf0:	11000504 	addi	r4,r2,20
 802caf4:	180b883a 	mov	r5,r3
 802caf8:	18c00044 	addi	r3,r3,1
 802cafc:	313ffb2e 	bgeu	r6,r4,802caec <_gp+0xfffeb3e0>
 802cb00:	e1401115 	stw	r5,68(fp)
 802cb04:	e009883a 	mov	r4,fp
 802cb08:	802f4dc0 	call	802f4dc <_Balloc>
 802cb0c:	d8800715 	stw	r2,28(sp)
 802cb10:	e0801015 	stw	r2,64(fp)
 802cb14:	00800384 	movi	r2,14
 802cb18:	1400f736 	bltu	r2,r16,802cef8 <_dtoa_r+0x764>
 802cb1c:	8800f626 	beq	r17,zero,802cef8 <_dtoa_r+0x764>
 802cb20:	d9c00517 	ldw	r7,20(sp)
 802cb24:	01c39a0e 	bge	zero,r7,802d990 <_dtoa_r+0x11fc>
 802cb28:	388003cc 	andi	r2,r7,15
 802cb2c:	100490fa 	slli	r2,r2,3
 802cb30:	382bd13a 	srai	r21,r7,4
 802cb34:	00c200f4 	movhi	r3,2051
 802cb38:	18de6204 	addi	r3,r3,31112
 802cb3c:	1885883a 	add	r2,r3,r2
 802cb40:	a8c0040c 	andi	r3,r21,16
 802cb44:	12400017 	ldw	r9,0(r2)
 802cb48:	12000117 	ldw	r8,4(r2)
 802cb4c:	18037926 	beq	r3,zero,802d934 <_dtoa_r+0x11a0>
 802cb50:	008200f4 	movhi	r2,2051
 802cb54:	109e5804 	addi	r2,r2,31072
 802cb58:	11800817 	ldw	r6,32(r2)
 802cb5c:	11c00917 	ldw	r7,36(r2)
 802cb60:	9009883a 	mov	r4,r18
 802cb64:	980b883a 	mov	r5,r19
 802cb68:	da001715 	stw	r8,92(sp)
 802cb6c:	da401615 	stw	r9,88(sp)
 802cb70:	802738c0 	call	802738c <__divdf3>
 802cb74:	da001717 	ldw	r8,92(sp)
 802cb78:	da401617 	ldw	r9,88(sp)
 802cb7c:	ad4003cc 	andi	r21,r21,15
 802cb80:	040000c4 	movi	r16,3
 802cb84:	1023883a 	mov	r17,r2
 802cb88:	1829883a 	mov	r20,r3
 802cb8c:	a8001126 	beq	r21,zero,802cbd4 <_dtoa_r+0x440>
 802cb90:	05c200f4 	movhi	r23,2051
 802cb94:	bdde5804 	addi	r23,r23,31072
 802cb98:	4805883a 	mov	r2,r9
 802cb9c:	4007883a 	mov	r3,r8
 802cba0:	a980004c 	andi	r6,r21,1
 802cba4:	1009883a 	mov	r4,r2
 802cba8:	a82bd07a 	srai	r21,r21,1
 802cbac:	180b883a 	mov	r5,r3
 802cbb0:	30000426 	beq	r6,zero,802cbc4 <_dtoa_r+0x430>
 802cbb4:	b9800017 	ldw	r6,0(r23)
 802cbb8:	b9c00117 	ldw	r7,4(r23)
 802cbbc:	84000044 	addi	r16,r16,1
 802cbc0:	8027ecc0 	call	8027ecc <__muldf3>
 802cbc4:	bdc00204 	addi	r23,r23,8
 802cbc8:	a83ff51e 	bne	r21,zero,802cba0 <_gp+0xfffeb494>
 802cbcc:	1013883a 	mov	r9,r2
 802cbd0:	1811883a 	mov	r8,r3
 802cbd4:	480d883a 	mov	r6,r9
 802cbd8:	400f883a 	mov	r7,r8
 802cbdc:	8809883a 	mov	r4,r17
 802cbe0:	a00b883a 	mov	r5,r20
 802cbe4:	802738c0 	call	802738c <__divdf3>
 802cbe8:	d8800f15 	stw	r2,60(sp)
 802cbec:	d8c01015 	stw	r3,64(sp)
 802cbf0:	d8c00e17 	ldw	r3,56(sp)
 802cbf4:	18000626 	beq	r3,zero,802cc10 <_dtoa_r+0x47c>
 802cbf8:	d9000f17 	ldw	r4,60(sp)
 802cbfc:	d9401017 	ldw	r5,64(sp)
 802cc00:	000d883a 	mov	r6,zero
 802cc04:	01cffc34 	movhi	r7,16368
 802cc08:	8027dd80 	call	8027dd8 <__ledf2>
 802cc0c:	10040b16 	blt	r2,zero,802dc3c <_dtoa_r+0x14a8>
 802cc10:	8009883a 	mov	r4,r16
 802cc14:	8028f600 	call	8028f60 <__floatsidf>
 802cc18:	d9800f17 	ldw	r6,60(sp)
 802cc1c:	d9c01017 	ldw	r7,64(sp)
 802cc20:	1009883a 	mov	r4,r2
 802cc24:	180b883a 	mov	r5,r3
 802cc28:	8027ecc0 	call	8027ecc <__muldf3>
 802cc2c:	000d883a 	mov	r6,zero
 802cc30:	01d00734 	movhi	r7,16412
 802cc34:	1009883a 	mov	r4,r2
 802cc38:	180b883a 	mov	r5,r3
 802cc3c:	8026ae00 	call	8026ae0 <__adddf3>
 802cc40:	1021883a 	mov	r16,r2
 802cc44:	d8800617 	ldw	r2,24(sp)
 802cc48:	047f3034 	movhi	r17,64704
 802cc4c:	1c63883a 	add	r17,r3,r17
 802cc50:	10031826 	beq	r2,zero,802d8b4 <_dtoa_r+0x1120>
 802cc54:	d8c00517 	ldw	r3,20(sp)
 802cc58:	db000617 	ldw	r12,24(sp)
 802cc5c:	d8c01315 	stw	r3,76(sp)
 802cc60:	d9000b17 	ldw	r4,44(sp)
 802cc64:	20038f26 	beq	r4,zero,802daa4 <_dtoa_r+0x1310>
 802cc68:	60bfffc4 	addi	r2,r12,-1
 802cc6c:	100490fa 	slli	r2,r2,3
 802cc70:	00c200f4 	movhi	r3,2051
 802cc74:	18de6204 	addi	r3,r3,31112
 802cc78:	1885883a 	add	r2,r3,r2
 802cc7c:	11800017 	ldw	r6,0(r2)
 802cc80:	11c00117 	ldw	r7,4(r2)
 802cc84:	d8800717 	ldw	r2,28(sp)
 802cc88:	0009883a 	mov	r4,zero
 802cc8c:	014ff834 	movhi	r5,16352
 802cc90:	db001615 	stw	r12,88(sp)
 802cc94:	15c00044 	addi	r23,r2,1
 802cc98:	802738c0 	call	802738c <__divdf3>
 802cc9c:	800d883a 	mov	r6,r16
 802cca0:	880f883a 	mov	r7,r17
 802cca4:	1009883a 	mov	r4,r2
 802cca8:	180b883a 	mov	r5,r3
 802ccac:	80285e40 	call	80285e4 <__subdf3>
 802ccb0:	d9401017 	ldw	r5,64(sp)
 802ccb4:	d9000f17 	ldw	r4,60(sp)
 802ccb8:	102b883a 	mov	r21,r2
 802ccbc:	d8c01215 	stw	r3,72(sp)
 802ccc0:	8028ee00 	call	8028ee0 <__fixdfsi>
 802ccc4:	1009883a 	mov	r4,r2
 802ccc8:	1029883a 	mov	r20,r2
 802cccc:	8028f600 	call	8028f60 <__floatsidf>
 802ccd0:	d9000f17 	ldw	r4,60(sp)
 802ccd4:	d9401017 	ldw	r5,64(sp)
 802ccd8:	100d883a 	mov	r6,r2
 802ccdc:	180f883a 	mov	r7,r3
 802cce0:	80285e40 	call	80285e4 <__subdf3>
 802cce4:	1823883a 	mov	r17,r3
 802cce8:	d8c00717 	ldw	r3,28(sp)
 802ccec:	d9401217 	ldw	r5,72(sp)
 802ccf0:	a2000c04 	addi	r8,r20,48
 802ccf4:	1021883a 	mov	r16,r2
 802ccf8:	1a000005 	stb	r8,0(r3)
 802ccfc:	800d883a 	mov	r6,r16
 802cd00:	880f883a 	mov	r7,r17
 802cd04:	a809883a 	mov	r4,r21
 802cd08:	4029883a 	mov	r20,r8
 802cd0c:	8027cfc0 	call	8027cfc <__gedf2>
 802cd10:	00841d16 	blt	zero,r2,802dd88 <_dtoa_r+0x15f4>
 802cd14:	800d883a 	mov	r6,r16
 802cd18:	880f883a 	mov	r7,r17
 802cd1c:	0009883a 	mov	r4,zero
 802cd20:	014ffc34 	movhi	r5,16368
 802cd24:	80285e40 	call	80285e4 <__subdf3>
 802cd28:	d9401217 	ldw	r5,72(sp)
 802cd2c:	100d883a 	mov	r6,r2
 802cd30:	180f883a 	mov	r7,r3
 802cd34:	a809883a 	mov	r4,r21
 802cd38:	8027cfc0 	call	8027cfc <__gedf2>
 802cd3c:	db001617 	ldw	r12,88(sp)
 802cd40:	00840e16 	blt	zero,r2,802dd7c <_dtoa_r+0x15e8>
 802cd44:	00800044 	movi	r2,1
 802cd48:	13006b0e 	bge	r2,r12,802cef8 <_dtoa_r+0x764>
 802cd4c:	d9000717 	ldw	r4,28(sp)
 802cd50:	dd800f15 	stw	r22,60(sp)
 802cd54:	dcc01015 	stw	r19,64(sp)
 802cd58:	2319883a 	add	r12,r4,r12
 802cd5c:	dcc01217 	ldw	r19,72(sp)
 802cd60:	602d883a 	mov	r22,r12
 802cd64:	dc801215 	stw	r18,72(sp)
 802cd68:	b825883a 	mov	r18,r23
 802cd6c:	00000906 	br	802cd94 <_dtoa_r+0x600>
 802cd70:	80285e40 	call	80285e4 <__subdf3>
 802cd74:	a80d883a 	mov	r6,r21
 802cd78:	980f883a 	mov	r7,r19
 802cd7c:	1009883a 	mov	r4,r2
 802cd80:	180b883a 	mov	r5,r3
 802cd84:	8027dd80 	call	8027dd8 <__ledf2>
 802cd88:	1003e816 	blt	r2,zero,802dd2c <_dtoa_r+0x1598>
 802cd8c:	b825883a 	mov	r18,r23
 802cd90:	bd83e926 	beq	r23,r22,802dd38 <_dtoa_r+0x15a4>
 802cd94:	a809883a 	mov	r4,r21
 802cd98:	980b883a 	mov	r5,r19
 802cd9c:	000d883a 	mov	r6,zero
 802cda0:	01d00934 	movhi	r7,16420
 802cda4:	8027ecc0 	call	8027ecc <__muldf3>
 802cda8:	000d883a 	mov	r6,zero
 802cdac:	01d00934 	movhi	r7,16420
 802cdb0:	8009883a 	mov	r4,r16
 802cdb4:	880b883a 	mov	r5,r17
 802cdb8:	102b883a 	mov	r21,r2
 802cdbc:	1827883a 	mov	r19,r3
 802cdc0:	8027ecc0 	call	8027ecc <__muldf3>
 802cdc4:	180b883a 	mov	r5,r3
 802cdc8:	1009883a 	mov	r4,r2
 802cdcc:	1821883a 	mov	r16,r3
 802cdd0:	1023883a 	mov	r17,r2
 802cdd4:	8028ee00 	call	8028ee0 <__fixdfsi>
 802cdd8:	1009883a 	mov	r4,r2
 802cddc:	1029883a 	mov	r20,r2
 802cde0:	8028f600 	call	8028f60 <__floatsidf>
 802cde4:	8809883a 	mov	r4,r17
 802cde8:	800b883a 	mov	r5,r16
 802cdec:	100d883a 	mov	r6,r2
 802cdf0:	180f883a 	mov	r7,r3
 802cdf4:	80285e40 	call	80285e4 <__subdf3>
 802cdf8:	a5000c04 	addi	r20,r20,48
 802cdfc:	a80d883a 	mov	r6,r21
 802ce00:	980f883a 	mov	r7,r19
 802ce04:	1009883a 	mov	r4,r2
 802ce08:	180b883a 	mov	r5,r3
 802ce0c:	95000005 	stb	r20,0(r18)
 802ce10:	1021883a 	mov	r16,r2
 802ce14:	1823883a 	mov	r17,r3
 802ce18:	8027dd80 	call	8027dd8 <__ledf2>
 802ce1c:	bdc00044 	addi	r23,r23,1
 802ce20:	800d883a 	mov	r6,r16
 802ce24:	880f883a 	mov	r7,r17
 802ce28:	0009883a 	mov	r4,zero
 802ce2c:	014ffc34 	movhi	r5,16368
 802ce30:	103fcf0e 	bge	r2,zero,802cd70 <_gp+0xfffeb664>
 802ce34:	d8c01317 	ldw	r3,76(sp)
 802ce38:	d8c00515 	stw	r3,20(sp)
 802ce3c:	d9400917 	ldw	r5,36(sp)
 802ce40:	e009883a 	mov	r4,fp
 802ce44:	802f5840 	call	802f584 <_Bfree>
 802ce48:	d9000517 	ldw	r4,20(sp)
 802ce4c:	d9802317 	ldw	r6,140(sp)
 802ce50:	d9c02517 	ldw	r7,148(sp)
 802ce54:	b8000005 	stb	zero,0(r23)
 802ce58:	20800044 	addi	r2,r4,1
 802ce5c:	30800015 	stw	r2,0(r6)
 802ce60:	3802aa26 	beq	r7,zero,802d90c <_dtoa_r+0x1178>
 802ce64:	3dc00015 	stw	r23,0(r7)
 802ce68:	d8800717 	ldw	r2,28(sp)
 802ce6c:	003e7906 	br	802c854 <_gp+0xfffeb148>
 802ce70:	00800434 	movhi	r2,16
 802ce74:	10bfffc4 	addi	r2,r2,-1
 802ce78:	88a2703a 	and	r17,r17,r2
 802ce7c:	883e851e 	bne	r17,zero,802c894 <_gp+0xfffeb188>
 802ce80:	008200f4 	movhi	r2,2051
 802ce84:	109e4404 	addi	r2,r2,30992
 802ce88:	003e8406 	br	802c89c <_gp+0xfffeb190>
 802ce8c:	10c00204 	addi	r3,r2,8
 802ce90:	003e8706 	br	802c8b0 <_gp+0xfffeb1a4>
 802ce94:	01400434 	movhi	r5,16
 802ce98:	297fffc4 	addi	r5,r5,-1
 802ce9c:	994a703a 	and	r5,r19,r5
 802cea0:	9009883a 	mov	r4,r18
 802cea4:	843f0044 	addi	r16,r16,-1023
 802cea8:	294ffc34 	orhi	r5,r5,16368
 802ceac:	dd800217 	ldw	r22,8(sp)
 802ceb0:	d8001115 	stw	zero,68(sp)
 802ceb4:	003ea506 	br	802c94c <_gp+0xfffeb240>
 802ceb8:	008200f4 	movhi	r2,2051
 802cebc:	109e3b04 	addi	r2,r2,30956
 802cec0:	003e6406 	br	802c854 <_gp+0xfffeb148>
 802cec4:	e0001115 	stw	zero,68(fp)
 802cec8:	000b883a 	mov	r5,zero
 802cecc:	e009883a 	mov	r4,fp
 802ced0:	802f4dc0 	call	802f4dc <_Balloc>
 802ced4:	01bfffc4 	movi	r6,-1
 802ced8:	01c00044 	movi	r7,1
 802cedc:	d8800715 	stw	r2,28(sp)
 802cee0:	d9800c15 	stw	r6,48(sp)
 802cee4:	e0801015 	stw	r2,64(fp)
 802cee8:	d8000315 	stw	zero,12(sp)
 802ceec:	d9c00b15 	stw	r7,44(sp)
 802cef0:	d9800615 	stw	r6,24(sp)
 802cef4:	d8002215 	stw	zero,136(sp)
 802cef8:	d8800117 	ldw	r2,4(sp)
 802cefc:	10008916 	blt	r2,zero,802d124 <_dtoa_r+0x990>
 802cf00:	d9000517 	ldw	r4,20(sp)
 802cf04:	00c00384 	movi	r3,14
 802cf08:	19008616 	blt	r3,r4,802d124 <_dtoa_r+0x990>
 802cf0c:	200490fa 	slli	r2,r4,3
 802cf10:	00c200f4 	movhi	r3,2051
 802cf14:	d9802217 	ldw	r6,136(sp)
 802cf18:	18de6204 	addi	r3,r3,31112
 802cf1c:	1885883a 	add	r2,r3,r2
 802cf20:	14000017 	ldw	r16,0(r2)
 802cf24:	14400117 	ldw	r17,4(r2)
 802cf28:	30016316 	blt	r6,zero,802d4b8 <_dtoa_r+0xd24>
 802cf2c:	800d883a 	mov	r6,r16
 802cf30:	880f883a 	mov	r7,r17
 802cf34:	9009883a 	mov	r4,r18
 802cf38:	980b883a 	mov	r5,r19
 802cf3c:	802738c0 	call	802738c <__divdf3>
 802cf40:	180b883a 	mov	r5,r3
 802cf44:	1009883a 	mov	r4,r2
 802cf48:	8028ee00 	call	8028ee0 <__fixdfsi>
 802cf4c:	1009883a 	mov	r4,r2
 802cf50:	102b883a 	mov	r21,r2
 802cf54:	8028f600 	call	8028f60 <__floatsidf>
 802cf58:	800d883a 	mov	r6,r16
 802cf5c:	880f883a 	mov	r7,r17
 802cf60:	1009883a 	mov	r4,r2
 802cf64:	180b883a 	mov	r5,r3
 802cf68:	8027ecc0 	call	8027ecc <__muldf3>
 802cf6c:	100d883a 	mov	r6,r2
 802cf70:	180f883a 	mov	r7,r3
 802cf74:	9009883a 	mov	r4,r18
 802cf78:	980b883a 	mov	r5,r19
 802cf7c:	80285e40 	call	80285e4 <__subdf3>
 802cf80:	d9c00717 	ldw	r7,28(sp)
 802cf84:	1009883a 	mov	r4,r2
 802cf88:	a8800c04 	addi	r2,r21,48
 802cf8c:	38800005 	stb	r2,0(r7)
 802cf90:	3dc00044 	addi	r23,r7,1
 802cf94:	d9c00617 	ldw	r7,24(sp)
 802cf98:	01800044 	movi	r6,1
 802cf9c:	180b883a 	mov	r5,r3
 802cfa0:	2005883a 	mov	r2,r4
 802cfa4:	39803826 	beq	r7,r6,802d088 <_dtoa_r+0x8f4>
 802cfa8:	000d883a 	mov	r6,zero
 802cfac:	01d00934 	movhi	r7,16420
 802cfb0:	8027ecc0 	call	8027ecc <__muldf3>
 802cfb4:	000d883a 	mov	r6,zero
 802cfb8:	000f883a 	mov	r7,zero
 802cfbc:	1009883a 	mov	r4,r2
 802cfc0:	180b883a 	mov	r5,r3
 802cfc4:	1025883a 	mov	r18,r2
 802cfc8:	1827883a 	mov	r19,r3
 802cfcc:	8027c740 	call	8027c74 <__eqdf2>
 802cfd0:	103f9a26 	beq	r2,zero,802ce3c <_gp+0xfffeb730>
 802cfd4:	d9c00617 	ldw	r7,24(sp)
 802cfd8:	d8c00717 	ldw	r3,28(sp)
 802cfdc:	b829883a 	mov	r20,r23
 802cfe0:	38bfffc4 	addi	r2,r7,-1
 802cfe4:	18ad883a 	add	r22,r3,r2
 802cfe8:	00000a06 	br	802d014 <_dtoa_r+0x880>
 802cfec:	8027ecc0 	call	8027ecc <__muldf3>
 802cff0:	000d883a 	mov	r6,zero
 802cff4:	000f883a 	mov	r7,zero
 802cff8:	1009883a 	mov	r4,r2
 802cffc:	180b883a 	mov	r5,r3
 802d000:	1025883a 	mov	r18,r2
 802d004:	1827883a 	mov	r19,r3
 802d008:	b829883a 	mov	r20,r23
 802d00c:	8027c740 	call	8027c74 <__eqdf2>
 802d010:	103f8a26 	beq	r2,zero,802ce3c <_gp+0xfffeb730>
 802d014:	800d883a 	mov	r6,r16
 802d018:	880f883a 	mov	r7,r17
 802d01c:	9009883a 	mov	r4,r18
 802d020:	980b883a 	mov	r5,r19
 802d024:	802738c0 	call	802738c <__divdf3>
 802d028:	180b883a 	mov	r5,r3
 802d02c:	1009883a 	mov	r4,r2
 802d030:	8028ee00 	call	8028ee0 <__fixdfsi>
 802d034:	1009883a 	mov	r4,r2
 802d038:	102b883a 	mov	r21,r2
 802d03c:	8028f600 	call	8028f60 <__floatsidf>
 802d040:	800d883a 	mov	r6,r16
 802d044:	880f883a 	mov	r7,r17
 802d048:	1009883a 	mov	r4,r2
 802d04c:	180b883a 	mov	r5,r3
 802d050:	8027ecc0 	call	8027ecc <__muldf3>
 802d054:	100d883a 	mov	r6,r2
 802d058:	180f883a 	mov	r7,r3
 802d05c:	9009883a 	mov	r4,r18
 802d060:	980b883a 	mov	r5,r19
 802d064:	80285e40 	call	80285e4 <__subdf3>
 802d068:	aa000c04 	addi	r8,r21,48
 802d06c:	a2000005 	stb	r8,0(r20)
 802d070:	000d883a 	mov	r6,zero
 802d074:	01d00934 	movhi	r7,16420
 802d078:	1009883a 	mov	r4,r2
 802d07c:	180b883a 	mov	r5,r3
 802d080:	a5c00044 	addi	r23,r20,1
 802d084:	b53fd91e 	bne	r22,r20,802cfec <_gp+0xfffeb8e0>
 802d088:	100d883a 	mov	r6,r2
 802d08c:	180f883a 	mov	r7,r3
 802d090:	1009883a 	mov	r4,r2
 802d094:	180b883a 	mov	r5,r3
 802d098:	8026ae00 	call	8026ae0 <__adddf3>
 802d09c:	100d883a 	mov	r6,r2
 802d0a0:	180f883a 	mov	r7,r3
 802d0a4:	8009883a 	mov	r4,r16
 802d0a8:	880b883a 	mov	r5,r17
 802d0ac:	1027883a 	mov	r19,r2
 802d0b0:	1825883a 	mov	r18,r3
 802d0b4:	8027dd80 	call	8027dd8 <__ledf2>
 802d0b8:	10000816 	blt	r2,zero,802d0dc <_dtoa_r+0x948>
 802d0bc:	980d883a 	mov	r6,r19
 802d0c0:	900f883a 	mov	r7,r18
 802d0c4:	8009883a 	mov	r4,r16
 802d0c8:	880b883a 	mov	r5,r17
 802d0cc:	8027c740 	call	8027c74 <__eqdf2>
 802d0d0:	103f5a1e 	bne	r2,zero,802ce3c <_gp+0xfffeb730>
 802d0d4:	ad40004c 	andi	r21,r21,1
 802d0d8:	a83f5826 	beq	r21,zero,802ce3c <_gp+0xfffeb730>
 802d0dc:	bd3fffc3 	ldbu	r20,-1(r23)
 802d0e0:	b8bfffc4 	addi	r2,r23,-1
 802d0e4:	1007883a 	mov	r3,r2
 802d0e8:	01400e44 	movi	r5,57
 802d0ec:	d9800717 	ldw	r6,28(sp)
 802d0f0:	00000506 	br	802d108 <_dtoa_r+0x974>
 802d0f4:	18ffffc4 	addi	r3,r3,-1
 802d0f8:	11824726 	beq	r2,r6,802da18 <_dtoa_r+0x1284>
 802d0fc:	1d000003 	ldbu	r20,0(r3)
 802d100:	102f883a 	mov	r23,r2
 802d104:	10bfffc4 	addi	r2,r2,-1
 802d108:	a1003fcc 	andi	r4,r20,255
 802d10c:	2100201c 	xori	r4,r4,128
 802d110:	213fe004 	addi	r4,r4,-128
 802d114:	217ff726 	beq	r4,r5,802d0f4 <_gp+0xfffeb9e8>
 802d118:	a2000044 	addi	r8,r20,1
 802d11c:	12000005 	stb	r8,0(r2)
 802d120:	003f4606 	br	802ce3c <_gp+0xfffeb730>
 802d124:	d9000b17 	ldw	r4,44(sp)
 802d128:	2000c826 	beq	r4,zero,802d44c <_dtoa_r+0xcb8>
 802d12c:	d9800317 	ldw	r6,12(sp)
 802d130:	00c00044 	movi	r3,1
 802d134:	1980f90e 	bge	r3,r6,802d51c <_dtoa_r+0xd88>
 802d138:	d8800617 	ldw	r2,24(sp)
 802d13c:	d8c00a17 	ldw	r3,40(sp)
 802d140:	157fffc4 	addi	r21,r2,-1
 802d144:	1d41f316 	blt	r3,r21,802d914 <_dtoa_r+0x1180>
 802d148:	1d6bc83a 	sub	r21,r3,r21
 802d14c:	d9c00617 	ldw	r7,24(sp)
 802d150:	3802aa16 	blt	r7,zero,802dbfc <_dtoa_r+0x1468>
 802d154:	dd000817 	ldw	r20,32(sp)
 802d158:	d8800617 	ldw	r2,24(sp)
 802d15c:	d8c00817 	ldw	r3,32(sp)
 802d160:	01400044 	movi	r5,1
 802d164:	e009883a 	mov	r4,fp
 802d168:	1887883a 	add	r3,r3,r2
 802d16c:	d8c00815 	stw	r3,32(sp)
 802d170:	b0ad883a 	add	r22,r22,r2
 802d174:	802f8e80 	call	802f8e8 <__i2b>
 802d178:	1023883a 	mov	r17,r2
 802d17c:	a0000826 	beq	r20,zero,802d1a0 <_dtoa_r+0xa0c>
 802d180:	0580070e 	bge	zero,r22,802d1a0 <_dtoa_r+0xa0c>
 802d184:	a005883a 	mov	r2,r20
 802d188:	b500b916 	blt	r22,r20,802d470 <_dtoa_r+0xcdc>
 802d18c:	d9000817 	ldw	r4,32(sp)
 802d190:	a0a9c83a 	sub	r20,r20,r2
 802d194:	b0adc83a 	sub	r22,r22,r2
 802d198:	2089c83a 	sub	r4,r4,r2
 802d19c:	d9000815 	stw	r4,32(sp)
 802d1a0:	d9800a17 	ldw	r6,40(sp)
 802d1a4:	0181810e 	bge	zero,r6,802d7ac <_dtoa_r+0x1018>
 802d1a8:	d9c00b17 	ldw	r7,44(sp)
 802d1ac:	3800b326 	beq	r7,zero,802d47c <_dtoa_r+0xce8>
 802d1b0:	a800b226 	beq	r21,zero,802d47c <_dtoa_r+0xce8>
 802d1b4:	880b883a 	mov	r5,r17
 802d1b8:	a80d883a 	mov	r6,r21
 802d1bc:	e009883a 	mov	r4,fp
 802d1c0:	802fb1c0 	call	802fb1c <__pow5mult>
 802d1c4:	d9800917 	ldw	r6,36(sp)
 802d1c8:	100b883a 	mov	r5,r2
 802d1cc:	e009883a 	mov	r4,fp
 802d1d0:	1023883a 	mov	r17,r2
 802d1d4:	802f9240 	call	802f924 <__multiply>
 802d1d8:	1021883a 	mov	r16,r2
 802d1dc:	d8800a17 	ldw	r2,40(sp)
 802d1e0:	d9400917 	ldw	r5,36(sp)
 802d1e4:	e009883a 	mov	r4,fp
 802d1e8:	1545c83a 	sub	r2,r2,r21
 802d1ec:	d8800a15 	stw	r2,40(sp)
 802d1f0:	802f5840 	call	802f584 <_Bfree>
 802d1f4:	d8c00a17 	ldw	r3,40(sp)
 802d1f8:	18009f1e 	bne	r3,zero,802d478 <_dtoa_r+0xce4>
 802d1fc:	05c00044 	movi	r23,1
 802d200:	e009883a 	mov	r4,fp
 802d204:	b80b883a 	mov	r5,r23
 802d208:	802f8e80 	call	802f8e8 <__i2b>
 802d20c:	d9000d17 	ldw	r4,52(sp)
 802d210:	102b883a 	mov	r21,r2
 802d214:	2000ce26 	beq	r4,zero,802d550 <_dtoa_r+0xdbc>
 802d218:	200d883a 	mov	r6,r4
 802d21c:	100b883a 	mov	r5,r2
 802d220:	e009883a 	mov	r4,fp
 802d224:	802fb1c0 	call	802fb1c <__pow5mult>
 802d228:	d9800317 	ldw	r6,12(sp)
 802d22c:	102b883a 	mov	r21,r2
 802d230:	b981810e 	bge	r23,r6,802d838 <_dtoa_r+0x10a4>
 802d234:	0027883a 	mov	r19,zero
 802d238:	a8800417 	ldw	r2,16(r21)
 802d23c:	05c00804 	movi	r23,32
 802d240:	10800104 	addi	r2,r2,4
 802d244:	1085883a 	add	r2,r2,r2
 802d248:	1085883a 	add	r2,r2,r2
 802d24c:	a885883a 	add	r2,r21,r2
 802d250:	11000017 	ldw	r4,0(r2)
 802d254:	802f7d00 	call	802f7d0 <__hi0bits>
 802d258:	b885c83a 	sub	r2,r23,r2
 802d25c:	1585883a 	add	r2,r2,r22
 802d260:	108007cc 	andi	r2,r2,31
 802d264:	1000b326 	beq	r2,zero,802d534 <_dtoa_r+0xda0>
 802d268:	00c00804 	movi	r3,32
 802d26c:	1887c83a 	sub	r3,r3,r2
 802d270:	01000104 	movi	r4,4
 802d274:	20c2cd0e 	bge	r4,r3,802ddac <_dtoa_r+0x1618>
 802d278:	00c00704 	movi	r3,28
 802d27c:	1885c83a 	sub	r2,r3,r2
 802d280:	d8c00817 	ldw	r3,32(sp)
 802d284:	a0a9883a 	add	r20,r20,r2
 802d288:	b0ad883a 	add	r22,r22,r2
 802d28c:	1887883a 	add	r3,r3,r2
 802d290:	d8c00815 	stw	r3,32(sp)
 802d294:	d9800817 	ldw	r6,32(sp)
 802d298:	0180040e 	bge	zero,r6,802d2ac <_dtoa_r+0xb18>
 802d29c:	800b883a 	mov	r5,r16
 802d2a0:	e009883a 	mov	r4,fp
 802d2a4:	802fc5c0 	call	802fc5c <__lshift>
 802d2a8:	1021883a 	mov	r16,r2
 802d2ac:	0580050e 	bge	zero,r22,802d2c4 <_dtoa_r+0xb30>
 802d2b0:	a80b883a 	mov	r5,r21
 802d2b4:	b00d883a 	mov	r6,r22
 802d2b8:	e009883a 	mov	r4,fp
 802d2bc:	802fc5c0 	call	802fc5c <__lshift>
 802d2c0:	102b883a 	mov	r21,r2
 802d2c4:	d9c00e17 	ldw	r7,56(sp)
 802d2c8:	3801211e 	bne	r7,zero,802d750 <_dtoa_r+0xfbc>
 802d2cc:	d9800617 	ldw	r6,24(sp)
 802d2d0:	0181380e 	bge	zero,r6,802d7b4 <_dtoa_r+0x1020>
 802d2d4:	d8c00b17 	ldw	r3,44(sp)
 802d2d8:	1800ab1e 	bne	r3,zero,802d588 <_dtoa_r+0xdf4>
 802d2dc:	dc800717 	ldw	r18,28(sp)
 802d2e0:	dcc00617 	ldw	r19,24(sp)
 802d2e4:	9029883a 	mov	r20,r18
 802d2e8:	00000206 	br	802d2f4 <_dtoa_r+0xb60>
 802d2ec:	802f5ac0 	call	802f5ac <__multadd>
 802d2f0:	1021883a 	mov	r16,r2
 802d2f4:	a80b883a 	mov	r5,r21
 802d2f8:	8009883a 	mov	r4,r16
 802d2fc:	802c5940 	call	802c594 <quorem>
 802d300:	10800c04 	addi	r2,r2,48
 802d304:	90800005 	stb	r2,0(r18)
 802d308:	94800044 	addi	r18,r18,1
 802d30c:	9507c83a 	sub	r3,r18,r20
 802d310:	000f883a 	mov	r7,zero
 802d314:	01800284 	movi	r6,10
 802d318:	800b883a 	mov	r5,r16
 802d31c:	e009883a 	mov	r4,fp
 802d320:	1cfff216 	blt	r3,r19,802d2ec <_gp+0xfffebbe0>
 802d324:	1011883a 	mov	r8,r2
 802d328:	d8800617 	ldw	r2,24(sp)
 802d32c:	0082370e 	bge	zero,r2,802dc0c <_dtoa_r+0x1478>
 802d330:	d9000717 	ldw	r4,28(sp)
 802d334:	0025883a 	mov	r18,zero
 802d338:	20af883a 	add	r23,r4,r2
 802d33c:	01800044 	movi	r6,1
 802d340:	800b883a 	mov	r5,r16
 802d344:	e009883a 	mov	r4,fp
 802d348:	da001715 	stw	r8,92(sp)
 802d34c:	802fc5c0 	call	802fc5c <__lshift>
 802d350:	a80b883a 	mov	r5,r21
 802d354:	1009883a 	mov	r4,r2
 802d358:	d8800915 	stw	r2,36(sp)
 802d35c:	802fda40 	call	802fda4 <__mcmp>
 802d360:	da001717 	ldw	r8,92(sp)
 802d364:	0081800e 	bge	zero,r2,802d968 <_dtoa_r+0x11d4>
 802d368:	b93fffc3 	ldbu	r4,-1(r23)
 802d36c:	b8bfffc4 	addi	r2,r23,-1
 802d370:	1007883a 	mov	r3,r2
 802d374:	01800e44 	movi	r6,57
 802d378:	d9c00717 	ldw	r7,28(sp)
 802d37c:	00000506 	br	802d394 <_dtoa_r+0xc00>
 802d380:	18ffffc4 	addi	r3,r3,-1
 802d384:	11c12326 	beq	r2,r7,802d814 <_dtoa_r+0x1080>
 802d388:	19000003 	ldbu	r4,0(r3)
 802d38c:	102f883a 	mov	r23,r2
 802d390:	10bfffc4 	addi	r2,r2,-1
 802d394:	21403fcc 	andi	r5,r4,255
 802d398:	2940201c 	xori	r5,r5,128
 802d39c:	297fe004 	addi	r5,r5,-128
 802d3a0:	29bff726 	beq	r5,r6,802d380 <_gp+0xfffebc74>
 802d3a4:	21000044 	addi	r4,r4,1
 802d3a8:	11000005 	stb	r4,0(r2)
 802d3ac:	a80b883a 	mov	r5,r21
 802d3b0:	e009883a 	mov	r4,fp
 802d3b4:	802f5840 	call	802f584 <_Bfree>
 802d3b8:	883ea026 	beq	r17,zero,802ce3c <_gp+0xfffeb730>
 802d3bc:	90000426 	beq	r18,zero,802d3d0 <_dtoa_r+0xc3c>
 802d3c0:	94400326 	beq	r18,r17,802d3d0 <_dtoa_r+0xc3c>
 802d3c4:	900b883a 	mov	r5,r18
 802d3c8:	e009883a 	mov	r4,fp
 802d3cc:	802f5840 	call	802f584 <_Bfree>
 802d3d0:	880b883a 	mov	r5,r17
 802d3d4:	e009883a 	mov	r4,fp
 802d3d8:	802f5840 	call	802f584 <_Bfree>
 802d3dc:	003e9706 	br	802ce3c <_gp+0xfffeb730>
 802d3e0:	01800044 	movi	r6,1
 802d3e4:	d9800e15 	stw	r6,56(sp)
 802d3e8:	003d9606 	br	802ca44 <_gp+0xfffeb338>
 802d3ec:	d8800817 	ldw	r2,32(sp)
 802d3f0:	d8c00517 	ldw	r3,20(sp)
 802d3f4:	d8000d15 	stw	zero,52(sp)
 802d3f8:	10c5c83a 	sub	r2,r2,r3
 802d3fc:	00c9c83a 	sub	r4,zero,r3
 802d400:	d8800815 	stw	r2,32(sp)
 802d404:	d9000a15 	stw	r4,40(sp)
 802d408:	003d9706 	br	802ca68 <_gp+0xfffeb35c>
 802d40c:	05adc83a 	sub	r22,zero,r22
 802d410:	dd800815 	stw	r22,32(sp)
 802d414:	002d883a 	mov	r22,zero
 802d418:	003d8e06 	br	802ca54 <_gp+0xfffeb348>
 802d41c:	d9000517 	ldw	r4,20(sp)
 802d420:	8028f600 	call	8028f60 <__floatsidf>
 802d424:	100d883a 	mov	r6,r2
 802d428:	180f883a 	mov	r7,r3
 802d42c:	a009883a 	mov	r4,r20
 802d430:	880b883a 	mov	r5,r17
 802d434:	8027c740 	call	8027c74 <__eqdf2>
 802d438:	103d7126 	beq	r2,zero,802ca00 <_gp+0xfffeb2f4>
 802d43c:	d9c00517 	ldw	r7,20(sp)
 802d440:	39ffffc4 	addi	r7,r7,-1
 802d444:	d9c00515 	stw	r7,20(sp)
 802d448:	003d6d06 	br	802ca00 <_gp+0xfffeb2f4>
 802d44c:	dd400a17 	ldw	r21,40(sp)
 802d450:	dd000817 	ldw	r20,32(sp)
 802d454:	0023883a 	mov	r17,zero
 802d458:	003f4806 	br	802d17c <_gp+0xfffeba70>
 802d45c:	10e3c83a 	sub	r17,r2,r3
 802d460:	9448983a 	sll	r4,r18,r17
 802d464:	003d3206 	br	802c930 <_gp+0xfffeb224>
 802d468:	d8000e15 	stw	zero,56(sp)
 802d46c:	003d7506 	br	802ca44 <_gp+0xfffeb338>
 802d470:	b005883a 	mov	r2,r22
 802d474:	003f4506 	br	802d18c <_gp+0xfffeba80>
 802d478:	dc000915 	stw	r16,36(sp)
 802d47c:	d9800a17 	ldw	r6,40(sp)
 802d480:	d9400917 	ldw	r5,36(sp)
 802d484:	e009883a 	mov	r4,fp
 802d488:	802fb1c0 	call	802fb1c <__pow5mult>
 802d48c:	1021883a 	mov	r16,r2
 802d490:	003f5a06 	br	802d1fc <_gp+0xfffebaf0>
 802d494:	01c00044 	movi	r7,1
 802d498:	d9c00b15 	stw	r7,44(sp)
 802d49c:	d8802217 	ldw	r2,136(sp)
 802d4a0:	0081280e 	bge	zero,r2,802d944 <_dtoa_r+0x11b0>
 802d4a4:	100d883a 	mov	r6,r2
 802d4a8:	1021883a 	mov	r16,r2
 802d4ac:	d8800c15 	stw	r2,48(sp)
 802d4b0:	d8800615 	stw	r2,24(sp)
 802d4b4:	003d8806 	br	802cad8 <_gp+0xfffeb3cc>
 802d4b8:	d8800617 	ldw	r2,24(sp)
 802d4bc:	00be9b16 	blt	zero,r2,802cf2c <_gp+0xfffeb820>
 802d4c0:	10010f1e 	bne	r2,zero,802d900 <_dtoa_r+0x116c>
 802d4c4:	880b883a 	mov	r5,r17
 802d4c8:	000d883a 	mov	r6,zero
 802d4cc:	01d00534 	movhi	r7,16404
 802d4d0:	8009883a 	mov	r4,r16
 802d4d4:	8027ecc0 	call	8027ecc <__muldf3>
 802d4d8:	900d883a 	mov	r6,r18
 802d4dc:	980f883a 	mov	r7,r19
 802d4e0:	1009883a 	mov	r4,r2
 802d4e4:	180b883a 	mov	r5,r3
 802d4e8:	8027cfc0 	call	8027cfc <__gedf2>
 802d4ec:	002b883a 	mov	r21,zero
 802d4f0:	0023883a 	mov	r17,zero
 802d4f4:	1000bf16 	blt	r2,zero,802d7f4 <_dtoa_r+0x1060>
 802d4f8:	d9802217 	ldw	r6,136(sp)
 802d4fc:	ddc00717 	ldw	r23,28(sp)
 802d500:	018c303a 	nor	r6,zero,r6
 802d504:	d9800515 	stw	r6,20(sp)
 802d508:	a80b883a 	mov	r5,r21
 802d50c:	e009883a 	mov	r4,fp
 802d510:	802f5840 	call	802f584 <_Bfree>
 802d514:	883e4926 	beq	r17,zero,802ce3c <_gp+0xfffeb730>
 802d518:	003fad06 	br	802d3d0 <_gp+0xfffebcc4>
 802d51c:	d9c01117 	ldw	r7,68(sp)
 802d520:	3801bc26 	beq	r7,zero,802dc14 <_dtoa_r+0x1480>
 802d524:	10810cc4 	addi	r2,r2,1075
 802d528:	dd400a17 	ldw	r21,40(sp)
 802d52c:	dd000817 	ldw	r20,32(sp)
 802d530:	003f0a06 	br	802d15c <_gp+0xfffeba50>
 802d534:	00800704 	movi	r2,28
 802d538:	d9000817 	ldw	r4,32(sp)
 802d53c:	a0a9883a 	add	r20,r20,r2
 802d540:	b0ad883a 	add	r22,r22,r2
 802d544:	2089883a 	add	r4,r4,r2
 802d548:	d9000815 	stw	r4,32(sp)
 802d54c:	003f5106 	br	802d294 <_gp+0xfffebb88>
 802d550:	d8c00317 	ldw	r3,12(sp)
 802d554:	b8c1fc0e 	bge	r23,r3,802dd48 <_dtoa_r+0x15b4>
 802d558:	0027883a 	mov	r19,zero
 802d55c:	b805883a 	mov	r2,r23
 802d560:	003f3e06 	br	802d25c <_gp+0xfffebb50>
 802d564:	880b883a 	mov	r5,r17
 802d568:	e009883a 	mov	r4,fp
 802d56c:	000f883a 	mov	r7,zero
 802d570:	01800284 	movi	r6,10
 802d574:	802f5ac0 	call	802f5ac <__multadd>
 802d578:	d9000c17 	ldw	r4,48(sp)
 802d57c:	1023883a 	mov	r17,r2
 802d580:	0102040e 	bge	zero,r4,802dd94 <_dtoa_r+0x1600>
 802d584:	d9000615 	stw	r4,24(sp)
 802d588:	0500050e 	bge	zero,r20,802d5a0 <_dtoa_r+0xe0c>
 802d58c:	880b883a 	mov	r5,r17
 802d590:	a00d883a 	mov	r6,r20
 802d594:	e009883a 	mov	r4,fp
 802d598:	802fc5c0 	call	802fc5c <__lshift>
 802d59c:	1023883a 	mov	r17,r2
 802d5a0:	9801241e 	bne	r19,zero,802da34 <_dtoa_r+0x12a0>
 802d5a4:	8829883a 	mov	r20,r17
 802d5a8:	d9000617 	ldw	r4,24(sp)
 802d5ac:	dcc00717 	ldw	r19,28(sp)
 802d5b0:	9480004c 	andi	r18,r18,1
 802d5b4:	20bfffc4 	addi	r2,r4,-1
 802d5b8:	9885883a 	add	r2,r19,r2
 802d5bc:	d8800415 	stw	r2,16(sp)
 802d5c0:	dc800615 	stw	r18,24(sp)
 802d5c4:	a80b883a 	mov	r5,r21
 802d5c8:	8009883a 	mov	r4,r16
 802d5cc:	802c5940 	call	802c594 <quorem>
 802d5d0:	880b883a 	mov	r5,r17
 802d5d4:	8009883a 	mov	r4,r16
 802d5d8:	102f883a 	mov	r23,r2
 802d5dc:	802fda40 	call	802fda4 <__mcmp>
 802d5e0:	a80b883a 	mov	r5,r21
 802d5e4:	a00d883a 	mov	r6,r20
 802d5e8:	e009883a 	mov	r4,fp
 802d5ec:	102d883a 	mov	r22,r2
 802d5f0:	802fe040 	call	802fe04 <__mdiff>
 802d5f4:	1007883a 	mov	r3,r2
 802d5f8:	10800317 	ldw	r2,12(r2)
 802d5fc:	bc800c04 	addi	r18,r23,48
 802d600:	180b883a 	mov	r5,r3
 802d604:	10004e1e 	bne	r2,zero,802d740 <_dtoa_r+0xfac>
 802d608:	8009883a 	mov	r4,r16
 802d60c:	d8c01615 	stw	r3,88(sp)
 802d610:	802fda40 	call	802fda4 <__mcmp>
 802d614:	d8c01617 	ldw	r3,88(sp)
 802d618:	e009883a 	mov	r4,fp
 802d61c:	d8801615 	stw	r2,88(sp)
 802d620:	180b883a 	mov	r5,r3
 802d624:	802f5840 	call	802f584 <_Bfree>
 802d628:	d8801617 	ldw	r2,88(sp)
 802d62c:	1000041e 	bne	r2,zero,802d640 <_dtoa_r+0xeac>
 802d630:	d9800317 	ldw	r6,12(sp)
 802d634:	3000021e 	bne	r6,zero,802d640 <_dtoa_r+0xeac>
 802d638:	d8c00617 	ldw	r3,24(sp)
 802d63c:	18003726 	beq	r3,zero,802d71c <_dtoa_r+0xf88>
 802d640:	b0002016 	blt	r22,zero,802d6c4 <_dtoa_r+0xf30>
 802d644:	b000041e 	bne	r22,zero,802d658 <_dtoa_r+0xec4>
 802d648:	d9000317 	ldw	r4,12(sp)
 802d64c:	2000021e 	bne	r4,zero,802d658 <_dtoa_r+0xec4>
 802d650:	d8c00617 	ldw	r3,24(sp)
 802d654:	18001b26 	beq	r3,zero,802d6c4 <_dtoa_r+0xf30>
 802d658:	00810716 	blt	zero,r2,802da78 <_dtoa_r+0x12e4>
 802d65c:	d8c00417 	ldw	r3,16(sp)
 802d660:	9d800044 	addi	r22,r19,1
 802d664:	9c800005 	stb	r18,0(r19)
 802d668:	b02f883a 	mov	r23,r22
 802d66c:	98c10626 	beq	r19,r3,802da88 <_dtoa_r+0x12f4>
 802d670:	800b883a 	mov	r5,r16
 802d674:	000f883a 	mov	r7,zero
 802d678:	01800284 	movi	r6,10
 802d67c:	e009883a 	mov	r4,fp
 802d680:	802f5ac0 	call	802f5ac <__multadd>
 802d684:	1021883a 	mov	r16,r2
 802d688:	000f883a 	mov	r7,zero
 802d68c:	01800284 	movi	r6,10
 802d690:	880b883a 	mov	r5,r17
 802d694:	e009883a 	mov	r4,fp
 802d698:	8d002526 	beq	r17,r20,802d730 <_dtoa_r+0xf9c>
 802d69c:	802f5ac0 	call	802f5ac <__multadd>
 802d6a0:	a00b883a 	mov	r5,r20
 802d6a4:	000f883a 	mov	r7,zero
 802d6a8:	01800284 	movi	r6,10
 802d6ac:	e009883a 	mov	r4,fp
 802d6b0:	1023883a 	mov	r17,r2
 802d6b4:	802f5ac0 	call	802f5ac <__multadd>
 802d6b8:	1029883a 	mov	r20,r2
 802d6bc:	b027883a 	mov	r19,r22
 802d6c0:	003fc006 	br	802d5c4 <_gp+0xfffebeb8>
 802d6c4:	9011883a 	mov	r8,r18
 802d6c8:	00800e0e 	bge	zero,r2,802d704 <_dtoa_r+0xf70>
 802d6cc:	800b883a 	mov	r5,r16
 802d6d0:	01800044 	movi	r6,1
 802d6d4:	e009883a 	mov	r4,fp
 802d6d8:	da001715 	stw	r8,92(sp)
 802d6dc:	802fc5c0 	call	802fc5c <__lshift>
 802d6e0:	a80b883a 	mov	r5,r21
 802d6e4:	1009883a 	mov	r4,r2
 802d6e8:	1021883a 	mov	r16,r2
 802d6ec:	802fda40 	call	802fda4 <__mcmp>
 802d6f0:	da001717 	ldw	r8,92(sp)
 802d6f4:	0081960e 	bge	zero,r2,802dd50 <_dtoa_r+0x15bc>
 802d6f8:	00800e44 	movi	r2,57
 802d6fc:	40817026 	beq	r8,r2,802dcc0 <_dtoa_r+0x152c>
 802d700:	ba000c44 	addi	r8,r23,49
 802d704:	8825883a 	mov	r18,r17
 802d708:	9dc00044 	addi	r23,r19,1
 802d70c:	9a000005 	stb	r8,0(r19)
 802d710:	a023883a 	mov	r17,r20
 802d714:	dc000915 	stw	r16,36(sp)
 802d718:	003f2406 	br	802d3ac <_gp+0xfffebca0>
 802d71c:	00800e44 	movi	r2,57
 802d720:	9011883a 	mov	r8,r18
 802d724:	90816626 	beq	r18,r2,802dcc0 <_dtoa_r+0x152c>
 802d728:	05bff516 	blt	zero,r22,802d700 <_gp+0xfffebff4>
 802d72c:	003ff506 	br	802d704 <_gp+0xfffebff8>
 802d730:	802f5ac0 	call	802f5ac <__multadd>
 802d734:	1023883a 	mov	r17,r2
 802d738:	1029883a 	mov	r20,r2
 802d73c:	003fdf06 	br	802d6bc <_gp+0xfffebfb0>
 802d740:	e009883a 	mov	r4,fp
 802d744:	802f5840 	call	802f584 <_Bfree>
 802d748:	00800044 	movi	r2,1
 802d74c:	003fbc06 	br	802d640 <_gp+0xfffebf34>
 802d750:	a80b883a 	mov	r5,r21
 802d754:	8009883a 	mov	r4,r16
 802d758:	802fda40 	call	802fda4 <__mcmp>
 802d75c:	103edb0e 	bge	r2,zero,802d2cc <_gp+0xfffebbc0>
 802d760:	800b883a 	mov	r5,r16
 802d764:	000f883a 	mov	r7,zero
 802d768:	01800284 	movi	r6,10
 802d76c:	e009883a 	mov	r4,fp
 802d770:	802f5ac0 	call	802f5ac <__multadd>
 802d774:	1021883a 	mov	r16,r2
 802d778:	d8800517 	ldw	r2,20(sp)
 802d77c:	d8c00b17 	ldw	r3,44(sp)
 802d780:	10bfffc4 	addi	r2,r2,-1
 802d784:	d8800515 	stw	r2,20(sp)
 802d788:	183f761e 	bne	r3,zero,802d564 <_gp+0xfffebe58>
 802d78c:	d9000c17 	ldw	r4,48(sp)
 802d790:	0101730e 	bge	zero,r4,802dd60 <_dtoa_r+0x15cc>
 802d794:	d9000615 	stw	r4,24(sp)
 802d798:	003ed006 	br	802d2dc <_gp+0xfffebbd0>
 802d79c:	00800084 	movi	r2,2
 802d7a0:	3081861e 	bne	r6,r2,802ddbc <_dtoa_r+0x1628>
 802d7a4:	d8000b15 	stw	zero,44(sp)
 802d7a8:	003f3c06 	br	802d49c <_gp+0xfffebd90>
 802d7ac:	dc000917 	ldw	r16,36(sp)
 802d7b0:	003e9206 	br	802d1fc <_gp+0xfffebaf0>
 802d7b4:	d9c00317 	ldw	r7,12(sp)
 802d7b8:	00800084 	movi	r2,2
 802d7bc:	11fec50e 	bge	r2,r7,802d2d4 <_gp+0xfffebbc8>
 802d7c0:	d9000617 	ldw	r4,24(sp)
 802d7c4:	20013c1e 	bne	r4,zero,802dcb8 <_dtoa_r+0x1524>
 802d7c8:	a80b883a 	mov	r5,r21
 802d7cc:	000f883a 	mov	r7,zero
 802d7d0:	01800144 	movi	r6,5
 802d7d4:	e009883a 	mov	r4,fp
 802d7d8:	802f5ac0 	call	802f5ac <__multadd>
 802d7dc:	100b883a 	mov	r5,r2
 802d7e0:	8009883a 	mov	r4,r16
 802d7e4:	102b883a 	mov	r21,r2
 802d7e8:	802fda40 	call	802fda4 <__mcmp>
 802d7ec:	dc000915 	stw	r16,36(sp)
 802d7f0:	00bf410e 	bge	zero,r2,802d4f8 <_gp+0xfffebdec>
 802d7f4:	d9c00717 	ldw	r7,28(sp)
 802d7f8:	00800c44 	movi	r2,49
 802d7fc:	38800005 	stb	r2,0(r7)
 802d800:	d8800517 	ldw	r2,20(sp)
 802d804:	3dc00044 	addi	r23,r7,1
 802d808:	10800044 	addi	r2,r2,1
 802d80c:	d8800515 	stw	r2,20(sp)
 802d810:	003f3d06 	br	802d508 <_gp+0xfffebdfc>
 802d814:	d9800517 	ldw	r6,20(sp)
 802d818:	d9c00717 	ldw	r7,28(sp)
 802d81c:	00800c44 	movi	r2,49
 802d820:	31800044 	addi	r6,r6,1
 802d824:	d9800515 	stw	r6,20(sp)
 802d828:	38800005 	stb	r2,0(r7)
 802d82c:	003edf06 	br	802d3ac <_gp+0xfffebca0>
 802d830:	d8000b15 	stw	zero,44(sp)
 802d834:	003c9f06 	br	802cab4 <_gp+0xfffeb3a8>
 802d838:	903e7e1e 	bne	r18,zero,802d234 <_gp+0xfffebb28>
 802d83c:	00800434 	movhi	r2,16
 802d840:	10bfffc4 	addi	r2,r2,-1
 802d844:	9884703a 	and	r2,r19,r2
 802d848:	1000ea1e 	bne	r2,zero,802dbf4 <_dtoa_r+0x1460>
 802d84c:	9cdffc2c 	andhi	r19,r19,32752
 802d850:	9800e826 	beq	r19,zero,802dbf4 <_dtoa_r+0x1460>
 802d854:	d9c00817 	ldw	r7,32(sp)
 802d858:	b5800044 	addi	r22,r22,1
 802d85c:	04c00044 	movi	r19,1
 802d860:	39c00044 	addi	r7,r7,1
 802d864:	d9c00815 	stw	r7,32(sp)
 802d868:	d8800d17 	ldw	r2,52(sp)
 802d86c:	103e721e 	bne	r2,zero,802d238 <_gp+0xfffebb2c>
 802d870:	00800044 	movi	r2,1
 802d874:	003e7906 	br	802d25c <_gp+0xfffebb50>
 802d878:	8009883a 	mov	r4,r16
 802d87c:	8028f600 	call	8028f60 <__floatsidf>
 802d880:	d9800f17 	ldw	r6,60(sp)
 802d884:	d9c01017 	ldw	r7,64(sp)
 802d888:	1009883a 	mov	r4,r2
 802d88c:	180b883a 	mov	r5,r3
 802d890:	8027ecc0 	call	8027ecc <__muldf3>
 802d894:	000d883a 	mov	r6,zero
 802d898:	01d00734 	movhi	r7,16412
 802d89c:	1009883a 	mov	r4,r2
 802d8a0:	180b883a 	mov	r5,r3
 802d8a4:	8026ae00 	call	8026ae0 <__adddf3>
 802d8a8:	047f3034 	movhi	r17,64704
 802d8ac:	1021883a 	mov	r16,r2
 802d8b0:	1c63883a 	add	r17,r3,r17
 802d8b4:	d9000f17 	ldw	r4,60(sp)
 802d8b8:	d9401017 	ldw	r5,64(sp)
 802d8bc:	000d883a 	mov	r6,zero
 802d8c0:	01d00534 	movhi	r7,16404
 802d8c4:	80285e40 	call	80285e4 <__subdf3>
 802d8c8:	800d883a 	mov	r6,r16
 802d8cc:	880f883a 	mov	r7,r17
 802d8d0:	1009883a 	mov	r4,r2
 802d8d4:	180b883a 	mov	r5,r3
 802d8d8:	102b883a 	mov	r21,r2
 802d8dc:	1829883a 	mov	r20,r3
 802d8e0:	8027cfc0 	call	8027cfc <__gedf2>
 802d8e4:	00806c16 	blt	zero,r2,802da98 <_dtoa_r+0x1304>
 802d8e8:	89e0003c 	xorhi	r7,r17,32768
 802d8ec:	800d883a 	mov	r6,r16
 802d8f0:	a809883a 	mov	r4,r21
 802d8f4:	a00b883a 	mov	r5,r20
 802d8f8:	8027dd80 	call	8027dd8 <__ledf2>
 802d8fc:	103d7e0e 	bge	r2,zero,802cef8 <_gp+0xfffeb7ec>
 802d900:	002b883a 	mov	r21,zero
 802d904:	0023883a 	mov	r17,zero
 802d908:	003efb06 	br	802d4f8 <_gp+0xfffebdec>
 802d90c:	d8800717 	ldw	r2,28(sp)
 802d910:	003bd006 	br	802c854 <_gp+0xfffeb148>
 802d914:	d9000a17 	ldw	r4,40(sp)
 802d918:	d9800d17 	ldw	r6,52(sp)
 802d91c:	dd400a15 	stw	r21,40(sp)
 802d920:	a905c83a 	sub	r2,r21,r4
 802d924:	308d883a 	add	r6,r6,r2
 802d928:	d9800d15 	stw	r6,52(sp)
 802d92c:	002b883a 	mov	r21,zero
 802d930:	003e0606 	br	802d14c <_gp+0xfffeba40>
 802d934:	9023883a 	mov	r17,r18
 802d938:	9829883a 	mov	r20,r19
 802d93c:	04000084 	movi	r16,2
 802d940:	003c9206 	br	802cb8c <_gp+0xfffeb480>
 802d944:	04000044 	movi	r16,1
 802d948:	dc000c15 	stw	r16,48(sp)
 802d94c:	dc000615 	stw	r16,24(sp)
 802d950:	dc002215 	stw	r16,136(sp)
 802d954:	e0001115 	stw	zero,68(fp)
 802d958:	000b883a 	mov	r5,zero
 802d95c:	003c6906 	br	802cb04 <_gp+0xfffeb3f8>
 802d960:	3021883a 	mov	r16,r6
 802d964:	003ffb06 	br	802d954 <_gp+0xfffec248>
 802d968:	1000021e 	bne	r2,zero,802d974 <_dtoa_r+0x11e0>
 802d96c:	4200004c 	andi	r8,r8,1
 802d970:	403e7d1e 	bne	r8,zero,802d368 <_gp+0xfffebc5c>
 802d974:	01000c04 	movi	r4,48
 802d978:	00000106 	br	802d980 <_dtoa_r+0x11ec>
 802d97c:	102f883a 	mov	r23,r2
 802d980:	b8bfffc4 	addi	r2,r23,-1
 802d984:	10c00007 	ldb	r3,0(r2)
 802d988:	193ffc26 	beq	r3,r4,802d97c <_gp+0xfffec270>
 802d98c:	003e8706 	br	802d3ac <_gp+0xfffebca0>
 802d990:	d8800517 	ldw	r2,20(sp)
 802d994:	00a3c83a 	sub	r17,zero,r2
 802d998:	8800a426 	beq	r17,zero,802dc2c <_dtoa_r+0x1498>
 802d99c:	888003cc 	andi	r2,r17,15
 802d9a0:	100490fa 	slli	r2,r2,3
 802d9a4:	00c200f4 	movhi	r3,2051
 802d9a8:	18de6204 	addi	r3,r3,31112
 802d9ac:	1885883a 	add	r2,r3,r2
 802d9b0:	11800017 	ldw	r6,0(r2)
 802d9b4:	11c00117 	ldw	r7,4(r2)
 802d9b8:	9009883a 	mov	r4,r18
 802d9bc:	980b883a 	mov	r5,r19
 802d9c0:	8823d13a 	srai	r17,r17,4
 802d9c4:	8027ecc0 	call	8027ecc <__muldf3>
 802d9c8:	d8800f15 	stw	r2,60(sp)
 802d9cc:	d8c01015 	stw	r3,64(sp)
 802d9d0:	8800e826 	beq	r17,zero,802dd74 <_dtoa_r+0x15e0>
 802d9d4:	050200f4 	movhi	r20,2051
 802d9d8:	a51e5804 	addi	r20,r20,31072
 802d9dc:	04000084 	movi	r16,2
 802d9e0:	8980004c 	andi	r6,r17,1
 802d9e4:	1009883a 	mov	r4,r2
 802d9e8:	8823d07a 	srai	r17,r17,1
 802d9ec:	180b883a 	mov	r5,r3
 802d9f0:	30000426 	beq	r6,zero,802da04 <_dtoa_r+0x1270>
 802d9f4:	a1800017 	ldw	r6,0(r20)
 802d9f8:	a1c00117 	ldw	r7,4(r20)
 802d9fc:	84000044 	addi	r16,r16,1
 802da00:	8027ecc0 	call	8027ecc <__muldf3>
 802da04:	a5000204 	addi	r20,r20,8
 802da08:	883ff51e 	bne	r17,zero,802d9e0 <_gp+0xfffec2d4>
 802da0c:	d8800f15 	stw	r2,60(sp)
 802da10:	d8c01015 	stw	r3,64(sp)
 802da14:	003c7606 	br	802cbf0 <_gp+0xfffeb4e4>
 802da18:	00c00c04 	movi	r3,48
 802da1c:	10c00005 	stb	r3,0(r2)
 802da20:	d8c00517 	ldw	r3,20(sp)
 802da24:	bd3fffc3 	ldbu	r20,-1(r23)
 802da28:	18c00044 	addi	r3,r3,1
 802da2c:	d8c00515 	stw	r3,20(sp)
 802da30:	003db906 	br	802d118 <_gp+0xfffeba0c>
 802da34:	89400117 	ldw	r5,4(r17)
 802da38:	e009883a 	mov	r4,fp
 802da3c:	802f4dc0 	call	802f4dc <_Balloc>
 802da40:	89800417 	ldw	r6,16(r17)
 802da44:	89400304 	addi	r5,r17,12
 802da48:	11000304 	addi	r4,r2,12
 802da4c:	31800084 	addi	r6,r6,2
 802da50:	318d883a 	add	r6,r6,r6
 802da54:	318d883a 	add	r6,r6,r6
 802da58:	1027883a 	mov	r19,r2
 802da5c:	8029c7c0 	call	8029c7c <memcpy>
 802da60:	01800044 	movi	r6,1
 802da64:	980b883a 	mov	r5,r19
 802da68:	e009883a 	mov	r4,fp
 802da6c:	802fc5c0 	call	802fc5c <__lshift>
 802da70:	1029883a 	mov	r20,r2
 802da74:	003ecc06 	br	802d5a8 <_gp+0xfffebe9c>
 802da78:	00800e44 	movi	r2,57
 802da7c:	90809026 	beq	r18,r2,802dcc0 <_dtoa_r+0x152c>
 802da80:	92000044 	addi	r8,r18,1
 802da84:	003f1f06 	br	802d704 <_gp+0xfffebff8>
 802da88:	9011883a 	mov	r8,r18
 802da8c:	8825883a 	mov	r18,r17
 802da90:	a023883a 	mov	r17,r20
 802da94:	003e2906 	br	802d33c <_gp+0xfffebc30>
 802da98:	002b883a 	mov	r21,zero
 802da9c:	0023883a 	mov	r17,zero
 802daa0:	003f5406 	br	802d7f4 <_gp+0xfffec0e8>
 802daa4:	61bfffc4 	addi	r6,r12,-1
 802daa8:	300490fa 	slli	r2,r6,3
 802daac:	00c200f4 	movhi	r3,2051
 802dab0:	18de6204 	addi	r3,r3,31112
 802dab4:	1885883a 	add	r2,r3,r2
 802dab8:	11000017 	ldw	r4,0(r2)
 802dabc:	11400117 	ldw	r5,4(r2)
 802dac0:	d8800717 	ldw	r2,28(sp)
 802dac4:	880f883a 	mov	r7,r17
 802dac8:	d9801215 	stw	r6,72(sp)
 802dacc:	800d883a 	mov	r6,r16
 802dad0:	db001615 	stw	r12,88(sp)
 802dad4:	15c00044 	addi	r23,r2,1
 802dad8:	8027ecc0 	call	8027ecc <__muldf3>
 802dadc:	d9401017 	ldw	r5,64(sp)
 802dae0:	d9000f17 	ldw	r4,60(sp)
 802dae4:	d8c01515 	stw	r3,84(sp)
 802dae8:	d8801415 	stw	r2,80(sp)
 802daec:	8028ee00 	call	8028ee0 <__fixdfsi>
 802daf0:	1009883a 	mov	r4,r2
 802daf4:	1021883a 	mov	r16,r2
 802daf8:	8028f600 	call	8028f60 <__floatsidf>
 802dafc:	d9000f17 	ldw	r4,60(sp)
 802db00:	d9401017 	ldw	r5,64(sp)
 802db04:	100d883a 	mov	r6,r2
 802db08:	180f883a 	mov	r7,r3
 802db0c:	80285e40 	call	80285e4 <__subdf3>
 802db10:	1829883a 	mov	r20,r3
 802db14:	d8c00717 	ldw	r3,28(sp)
 802db18:	84000c04 	addi	r16,r16,48
 802db1c:	1023883a 	mov	r17,r2
 802db20:	1c000005 	stb	r16,0(r3)
 802db24:	db001617 	ldw	r12,88(sp)
 802db28:	00800044 	movi	r2,1
 802db2c:	60802226 	beq	r12,r2,802dbb8 <_dtoa_r+0x1424>
 802db30:	d9c00717 	ldw	r7,28(sp)
 802db34:	8805883a 	mov	r2,r17
 802db38:	b82b883a 	mov	r21,r23
 802db3c:	3b19883a 	add	r12,r7,r12
 802db40:	6023883a 	mov	r17,r12
 802db44:	a007883a 	mov	r3,r20
 802db48:	dc800f15 	stw	r18,60(sp)
 802db4c:	000d883a 	mov	r6,zero
 802db50:	01d00934 	movhi	r7,16420
 802db54:	1009883a 	mov	r4,r2
 802db58:	180b883a 	mov	r5,r3
 802db5c:	8027ecc0 	call	8027ecc <__muldf3>
 802db60:	180b883a 	mov	r5,r3
 802db64:	1009883a 	mov	r4,r2
 802db68:	1829883a 	mov	r20,r3
 802db6c:	1025883a 	mov	r18,r2
 802db70:	8028ee00 	call	8028ee0 <__fixdfsi>
 802db74:	1009883a 	mov	r4,r2
 802db78:	1021883a 	mov	r16,r2
 802db7c:	8028f600 	call	8028f60 <__floatsidf>
 802db80:	100d883a 	mov	r6,r2
 802db84:	180f883a 	mov	r7,r3
 802db88:	9009883a 	mov	r4,r18
 802db8c:	a00b883a 	mov	r5,r20
 802db90:	84000c04 	addi	r16,r16,48
 802db94:	80285e40 	call	80285e4 <__subdf3>
 802db98:	ad400044 	addi	r21,r21,1
 802db9c:	ac3fffc5 	stb	r16,-1(r21)
 802dba0:	ac7fea1e 	bne	r21,r17,802db4c <_gp+0xfffec440>
 802dba4:	1023883a 	mov	r17,r2
 802dba8:	d8801217 	ldw	r2,72(sp)
 802dbac:	dc800f17 	ldw	r18,60(sp)
 802dbb0:	1829883a 	mov	r20,r3
 802dbb4:	b8af883a 	add	r23,r23,r2
 802dbb8:	d9001417 	ldw	r4,80(sp)
 802dbbc:	d9401517 	ldw	r5,84(sp)
 802dbc0:	000d883a 	mov	r6,zero
 802dbc4:	01cff834 	movhi	r7,16352
 802dbc8:	8026ae00 	call	8026ae0 <__adddf3>
 802dbcc:	880d883a 	mov	r6,r17
 802dbd0:	a00f883a 	mov	r7,r20
 802dbd4:	1009883a 	mov	r4,r2
 802dbd8:	180b883a 	mov	r5,r3
 802dbdc:	8027dd80 	call	8027dd8 <__ledf2>
 802dbe0:	10003e0e 	bge	r2,zero,802dcdc <_dtoa_r+0x1548>
 802dbe4:	d9001317 	ldw	r4,76(sp)
 802dbe8:	bd3fffc3 	ldbu	r20,-1(r23)
 802dbec:	d9000515 	stw	r4,20(sp)
 802dbf0:	003d3b06 	br	802d0e0 <_gp+0xfffeb9d4>
 802dbf4:	0027883a 	mov	r19,zero
 802dbf8:	003f1b06 	br	802d868 <_gp+0xfffec15c>
 802dbfc:	d8800817 	ldw	r2,32(sp)
 802dc00:	11e9c83a 	sub	r20,r2,r7
 802dc04:	0005883a 	mov	r2,zero
 802dc08:	003d5406 	br	802d15c <_gp+0xfffeba50>
 802dc0c:	00800044 	movi	r2,1
 802dc10:	003dc706 	br	802d330 <_gp+0xfffebc24>
 802dc14:	d8c00217 	ldw	r3,8(sp)
 802dc18:	00800d84 	movi	r2,54
 802dc1c:	dd400a17 	ldw	r21,40(sp)
 802dc20:	10c5c83a 	sub	r2,r2,r3
 802dc24:	dd000817 	ldw	r20,32(sp)
 802dc28:	003d4c06 	br	802d15c <_gp+0xfffeba50>
 802dc2c:	dc800f15 	stw	r18,60(sp)
 802dc30:	dcc01015 	stw	r19,64(sp)
 802dc34:	04000084 	movi	r16,2
 802dc38:	003bed06 	br	802cbf0 <_gp+0xfffeb4e4>
 802dc3c:	d9000617 	ldw	r4,24(sp)
 802dc40:	203f0d26 	beq	r4,zero,802d878 <_gp+0xfffec16c>
 802dc44:	d9800c17 	ldw	r6,48(sp)
 802dc48:	01bcab0e 	bge	zero,r6,802cef8 <_gp+0xfffeb7ec>
 802dc4c:	d9401017 	ldw	r5,64(sp)
 802dc50:	d9000f17 	ldw	r4,60(sp)
 802dc54:	000d883a 	mov	r6,zero
 802dc58:	01d00934 	movhi	r7,16420
 802dc5c:	8027ecc0 	call	8027ecc <__muldf3>
 802dc60:	81000044 	addi	r4,r16,1
 802dc64:	d8800f15 	stw	r2,60(sp)
 802dc68:	d8c01015 	stw	r3,64(sp)
 802dc6c:	8028f600 	call	8028f60 <__floatsidf>
 802dc70:	d9800f17 	ldw	r6,60(sp)
 802dc74:	d9c01017 	ldw	r7,64(sp)
 802dc78:	1009883a 	mov	r4,r2
 802dc7c:	180b883a 	mov	r5,r3
 802dc80:	8027ecc0 	call	8027ecc <__muldf3>
 802dc84:	01d00734 	movhi	r7,16412
 802dc88:	000d883a 	mov	r6,zero
 802dc8c:	1009883a 	mov	r4,r2
 802dc90:	180b883a 	mov	r5,r3
 802dc94:	8026ae00 	call	8026ae0 <__adddf3>
 802dc98:	d9c00517 	ldw	r7,20(sp)
 802dc9c:	047f3034 	movhi	r17,64704
 802dca0:	1021883a 	mov	r16,r2
 802dca4:	39ffffc4 	addi	r7,r7,-1
 802dca8:	d9c01315 	stw	r7,76(sp)
 802dcac:	1c63883a 	add	r17,r3,r17
 802dcb0:	db000c17 	ldw	r12,48(sp)
 802dcb4:	003bea06 	br	802cc60 <_gp+0xfffeb554>
 802dcb8:	dc000915 	stw	r16,36(sp)
 802dcbc:	003e0e06 	br	802d4f8 <_gp+0xfffebdec>
 802dcc0:	01000e44 	movi	r4,57
 802dcc4:	8825883a 	mov	r18,r17
 802dcc8:	9dc00044 	addi	r23,r19,1
 802dccc:	99000005 	stb	r4,0(r19)
 802dcd0:	a023883a 	mov	r17,r20
 802dcd4:	dc000915 	stw	r16,36(sp)
 802dcd8:	003da406 	br	802d36c <_gp+0xfffebc60>
 802dcdc:	d9801417 	ldw	r6,80(sp)
 802dce0:	d9c01517 	ldw	r7,84(sp)
 802dce4:	0009883a 	mov	r4,zero
 802dce8:	014ff834 	movhi	r5,16352
 802dcec:	80285e40 	call	80285e4 <__subdf3>
 802dcf0:	880d883a 	mov	r6,r17
 802dcf4:	a00f883a 	mov	r7,r20
 802dcf8:	1009883a 	mov	r4,r2
 802dcfc:	180b883a 	mov	r5,r3
 802dd00:	8027cfc0 	call	8027cfc <__gedf2>
 802dd04:	00bc7c0e 	bge	zero,r2,802cef8 <_gp+0xfffeb7ec>
 802dd08:	01000c04 	movi	r4,48
 802dd0c:	00000106 	br	802dd14 <_dtoa_r+0x1580>
 802dd10:	102f883a 	mov	r23,r2
 802dd14:	b8bfffc4 	addi	r2,r23,-1
 802dd18:	10c00007 	ldb	r3,0(r2)
 802dd1c:	193ffc26 	beq	r3,r4,802dd10 <_gp+0xfffec604>
 802dd20:	d9801317 	ldw	r6,76(sp)
 802dd24:	d9800515 	stw	r6,20(sp)
 802dd28:	003c4406 	br	802ce3c <_gp+0xfffeb730>
 802dd2c:	d9801317 	ldw	r6,76(sp)
 802dd30:	d9800515 	stw	r6,20(sp)
 802dd34:	003cea06 	br	802d0e0 <_gp+0xfffeb9d4>
 802dd38:	dd800f17 	ldw	r22,60(sp)
 802dd3c:	dcc01017 	ldw	r19,64(sp)
 802dd40:	dc801217 	ldw	r18,72(sp)
 802dd44:	003c6c06 	br	802cef8 <_gp+0xfffeb7ec>
 802dd48:	903e031e 	bne	r18,zero,802d558 <_gp+0xfffebe4c>
 802dd4c:	003ebb06 	br	802d83c <_gp+0xfffec130>
 802dd50:	103e6c1e 	bne	r2,zero,802d704 <_gp+0xfffebff8>
 802dd54:	4080004c 	andi	r2,r8,1
 802dd58:	103e6a26 	beq	r2,zero,802d704 <_gp+0xfffebff8>
 802dd5c:	003e6606 	br	802d6f8 <_gp+0xfffebfec>
 802dd60:	d8c00317 	ldw	r3,12(sp)
 802dd64:	00800084 	movi	r2,2
 802dd68:	10c02916 	blt	r2,r3,802de10 <_dtoa_r+0x167c>
 802dd6c:	d9000c17 	ldw	r4,48(sp)
 802dd70:	003e8806 	br	802d794 <_gp+0xfffec088>
 802dd74:	04000084 	movi	r16,2
 802dd78:	003b9d06 	br	802cbf0 <_gp+0xfffeb4e4>
 802dd7c:	d9001317 	ldw	r4,76(sp)
 802dd80:	d9000515 	stw	r4,20(sp)
 802dd84:	003cd606 	br	802d0e0 <_gp+0xfffeb9d4>
 802dd88:	d8801317 	ldw	r2,76(sp)
 802dd8c:	d8800515 	stw	r2,20(sp)
 802dd90:	003c2a06 	br	802ce3c <_gp+0xfffeb730>
 802dd94:	d9800317 	ldw	r6,12(sp)
 802dd98:	00800084 	movi	r2,2
 802dd9c:	11801516 	blt	r2,r6,802ddf4 <_dtoa_r+0x1660>
 802dda0:	d9c00c17 	ldw	r7,48(sp)
 802dda4:	d9c00615 	stw	r7,24(sp)
 802dda8:	003df706 	br	802d588 <_gp+0xfffebe7c>
 802ddac:	193d3926 	beq	r3,r4,802d294 <_gp+0xfffebb88>
 802ddb0:	00c00f04 	movi	r3,60
 802ddb4:	1885c83a 	sub	r2,r3,r2
 802ddb8:	003ddf06 	br	802d538 <_gp+0xfffebe2c>
 802ddbc:	e009883a 	mov	r4,fp
 802ddc0:	e0001115 	stw	zero,68(fp)
 802ddc4:	000b883a 	mov	r5,zero
 802ddc8:	802f4dc0 	call	802f4dc <_Balloc>
 802ddcc:	d8800715 	stw	r2,28(sp)
 802ddd0:	d8c00717 	ldw	r3,28(sp)
 802ddd4:	00bfffc4 	movi	r2,-1
 802ddd8:	01000044 	movi	r4,1
 802dddc:	d8800c15 	stw	r2,48(sp)
 802dde0:	e0c01015 	stw	r3,64(fp)
 802dde4:	d9000b15 	stw	r4,44(sp)
 802dde8:	d8800615 	stw	r2,24(sp)
 802ddec:	d8002215 	stw	zero,136(sp)
 802ddf0:	003c4106 	br	802cef8 <_gp+0xfffeb7ec>
 802ddf4:	d8c00c17 	ldw	r3,48(sp)
 802ddf8:	d8c00615 	stw	r3,24(sp)
 802ddfc:	003e7006 	br	802d7c0 <_gp+0xfffec0b4>
 802de00:	04400044 	movi	r17,1
 802de04:	003b2006 	br	802ca88 <_gp+0xfffeb37c>
 802de08:	000b883a 	mov	r5,zero
 802de0c:	003b3d06 	br	802cb04 <_gp+0xfffeb3f8>
 802de10:	d8800c17 	ldw	r2,48(sp)
 802de14:	d8800615 	stw	r2,24(sp)
 802de18:	003e6906 	br	802d7c0 <_gp+0xfffec0b4>

0802de1c <__sflush_r>:
 802de1c:	2880030b 	ldhu	r2,12(r5)
 802de20:	defffb04 	addi	sp,sp,-20
 802de24:	dcc00315 	stw	r19,12(sp)
 802de28:	dc400115 	stw	r17,4(sp)
 802de2c:	dfc00415 	stw	ra,16(sp)
 802de30:	dc800215 	stw	r18,8(sp)
 802de34:	dc000015 	stw	r16,0(sp)
 802de38:	10c0020c 	andi	r3,r2,8
 802de3c:	2823883a 	mov	r17,r5
 802de40:	2027883a 	mov	r19,r4
 802de44:	1800311e 	bne	r3,zero,802df0c <__sflush_r+0xf0>
 802de48:	28c00117 	ldw	r3,4(r5)
 802de4c:	10820014 	ori	r2,r2,2048
 802de50:	2880030d 	sth	r2,12(r5)
 802de54:	00c04b0e 	bge	zero,r3,802df84 <__sflush_r+0x168>
 802de58:	8a000a17 	ldw	r8,40(r17)
 802de5c:	40002326 	beq	r8,zero,802deec <__sflush_r+0xd0>
 802de60:	9c000017 	ldw	r16,0(r19)
 802de64:	10c4000c 	andi	r3,r2,4096
 802de68:	98000015 	stw	zero,0(r19)
 802de6c:	18004826 	beq	r3,zero,802df90 <__sflush_r+0x174>
 802de70:	89801417 	ldw	r6,80(r17)
 802de74:	10c0010c 	andi	r3,r2,4
 802de78:	18000626 	beq	r3,zero,802de94 <__sflush_r+0x78>
 802de7c:	88c00117 	ldw	r3,4(r17)
 802de80:	88800c17 	ldw	r2,48(r17)
 802de84:	30cdc83a 	sub	r6,r6,r3
 802de88:	10000226 	beq	r2,zero,802de94 <__sflush_r+0x78>
 802de8c:	88800f17 	ldw	r2,60(r17)
 802de90:	308dc83a 	sub	r6,r6,r2
 802de94:	89400717 	ldw	r5,28(r17)
 802de98:	000f883a 	mov	r7,zero
 802de9c:	9809883a 	mov	r4,r19
 802dea0:	403ee83a 	callr	r8
 802dea4:	00ffffc4 	movi	r3,-1
 802dea8:	10c04426 	beq	r2,r3,802dfbc <__sflush_r+0x1a0>
 802deac:	88c0030b 	ldhu	r3,12(r17)
 802deb0:	89000417 	ldw	r4,16(r17)
 802deb4:	88000115 	stw	zero,4(r17)
 802deb8:	197dffcc 	andi	r5,r3,63487
 802debc:	8940030d 	sth	r5,12(r17)
 802dec0:	89000015 	stw	r4,0(r17)
 802dec4:	18c4000c 	andi	r3,r3,4096
 802dec8:	18002c1e 	bne	r3,zero,802df7c <__sflush_r+0x160>
 802decc:	89400c17 	ldw	r5,48(r17)
 802ded0:	9c000015 	stw	r16,0(r19)
 802ded4:	28000526 	beq	r5,zero,802deec <__sflush_r+0xd0>
 802ded8:	88801004 	addi	r2,r17,64
 802dedc:	28800226 	beq	r5,r2,802dee8 <__sflush_r+0xcc>
 802dee0:	9809883a 	mov	r4,r19
 802dee4:	802e5880 	call	802e588 <_free_r>
 802dee8:	88000c15 	stw	zero,48(r17)
 802deec:	0005883a 	mov	r2,zero
 802def0:	dfc00417 	ldw	ra,16(sp)
 802def4:	dcc00317 	ldw	r19,12(sp)
 802def8:	dc800217 	ldw	r18,8(sp)
 802defc:	dc400117 	ldw	r17,4(sp)
 802df00:	dc000017 	ldw	r16,0(sp)
 802df04:	dec00504 	addi	sp,sp,20
 802df08:	f800283a 	ret
 802df0c:	2c800417 	ldw	r18,16(r5)
 802df10:	903ff626 	beq	r18,zero,802deec <_gp+0xfffec7e0>
 802df14:	2c000017 	ldw	r16,0(r5)
 802df18:	108000cc 	andi	r2,r2,3
 802df1c:	2c800015 	stw	r18,0(r5)
 802df20:	84a1c83a 	sub	r16,r16,r18
 802df24:	1000131e 	bne	r2,zero,802df74 <__sflush_r+0x158>
 802df28:	28800517 	ldw	r2,20(r5)
 802df2c:	88800215 	stw	r2,8(r17)
 802df30:	04000316 	blt	zero,r16,802df40 <__sflush_r+0x124>
 802df34:	003fed06 	br	802deec <_gp+0xfffec7e0>
 802df38:	90a5883a 	add	r18,r18,r2
 802df3c:	043feb0e 	bge	zero,r16,802deec <_gp+0xfffec7e0>
 802df40:	88800917 	ldw	r2,36(r17)
 802df44:	89400717 	ldw	r5,28(r17)
 802df48:	800f883a 	mov	r7,r16
 802df4c:	900d883a 	mov	r6,r18
 802df50:	9809883a 	mov	r4,r19
 802df54:	103ee83a 	callr	r2
 802df58:	80a1c83a 	sub	r16,r16,r2
 802df5c:	00bff616 	blt	zero,r2,802df38 <_gp+0xfffec82c>
 802df60:	88c0030b 	ldhu	r3,12(r17)
 802df64:	00bfffc4 	movi	r2,-1
 802df68:	18c01014 	ori	r3,r3,64
 802df6c:	88c0030d 	sth	r3,12(r17)
 802df70:	003fdf06 	br	802def0 <_gp+0xfffec7e4>
 802df74:	0005883a 	mov	r2,zero
 802df78:	003fec06 	br	802df2c <_gp+0xfffec820>
 802df7c:	88801415 	stw	r2,80(r17)
 802df80:	003fd206 	br	802decc <_gp+0xfffec7c0>
 802df84:	28c00f17 	ldw	r3,60(r5)
 802df88:	00ffb316 	blt	zero,r3,802de58 <_gp+0xfffec74c>
 802df8c:	003fd706 	br	802deec <_gp+0xfffec7e0>
 802df90:	89400717 	ldw	r5,28(r17)
 802df94:	000d883a 	mov	r6,zero
 802df98:	01c00044 	movi	r7,1
 802df9c:	9809883a 	mov	r4,r19
 802dfa0:	403ee83a 	callr	r8
 802dfa4:	100d883a 	mov	r6,r2
 802dfa8:	00bfffc4 	movi	r2,-1
 802dfac:	30801426 	beq	r6,r2,802e000 <__sflush_r+0x1e4>
 802dfb0:	8880030b 	ldhu	r2,12(r17)
 802dfb4:	8a000a17 	ldw	r8,40(r17)
 802dfb8:	003fae06 	br	802de74 <_gp+0xfffec768>
 802dfbc:	98c00017 	ldw	r3,0(r19)
 802dfc0:	183fba26 	beq	r3,zero,802deac <_gp+0xfffec7a0>
 802dfc4:	01000744 	movi	r4,29
 802dfc8:	19000626 	beq	r3,r4,802dfe4 <__sflush_r+0x1c8>
 802dfcc:	01000584 	movi	r4,22
 802dfd0:	19000426 	beq	r3,r4,802dfe4 <__sflush_r+0x1c8>
 802dfd4:	88c0030b 	ldhu	r3,12(r17)
 802dfd8:	18c01014 	ori	r3,r3,64
 802dfdc:	88c0030d 	sth	r3,12(r17)
 802dfe0:	003fc306 	br	802def0 <_gp+0xfffec7e4>
 802dfe4:	8880030b 	ldhu	r2,12(r17)
 802dfe8:	88c00417 	ldw	r3,16(r17)
 802dfec:	88000115 	stw	zero,4(r17)
 802dff0:	10bdffcc 	andi	r2,r2,63487
 802dff4:	8880030d 	sth	r2,12(r17)
 802dff8:	88c00015 	stw	r3,0(r17)
 802dffc:	003fb306 	br	802decc <_gp+0xfffec7c0>
 802e000:	98800017 	ldw	r2,0(r19)
 802e004:	103fea26 	beq	r2,zero,802dfb0 <_gp+0xfffec8a4>
 802e008:	00c00744 	movi	r3,29
 802e00c:	10c00226 	beq	r2,r3,802e018 <__sflush_r+0x1fc>
 802e010:	00c00584 	movi	r3,22
 802e014:	10c0031e 	bne	r2,r3,802e024 <__sflush_r+0x208>
 802e018:	9c000015 	stw	r16,0(r19)
 802e01c:	0005883a 	mov	r2,zero
 802e020:	003fb306 	br	802def0 <_gp+0xfffec7e4>
 802e024:	88c0030b 	ldhu	r3,12(r17)
 802e028:	3005883a 	mov	r2,r6
 802e02c:	18c01014 	ori	r3,r3,64
 802e030:	88c0030d 	sth	r3,12(r17)
 802e034:	003fae06 	br	802def0 <_gp+0xfffec7e4>

0802e038 <_fflush_r>:
 802e038:	defffd04 	addi	sp,sp,-12
 802e03c:	dc000115 	stw	r16,4(sp)
 802e040:	dfc00215 	stw	ra,8(sp)
 802e044:	2021883a 	mov	r16,r4
 802e048:	20000226 	beq	r4,zero,802e054 <_fflush_r+0x1c>
 802e04c:	20800e17 	ldw	r2,56(r4)
 802e050:	10000c26 	beq	r2,zero,802e084 <_fflush_r+0x4c>
 802e054:	2880030f 	ldh	r2,12(r5)
 802e058:	1000051e 	bne	r2,zero,802e070 <_fflush_r+0x38>
 802e05c:	0005883a 	mov	r2,zero
 802e060:	dfc00217 	ldw	ra,8(sp)
 802e064:	dc000117 	ldw	r16,4(sp)
 802e068:	dec00304 	addi	sp,sp,12
 802e06c:	f800283a 	ret
 802e070:	8009883a 	mov	r4,r16
 802e074:	dfc00217 	ldw	ra,8(sp)
 802e078:	dc000117 	ldw	r16,4(sp)
 802e07c:	dec00304 	addi	sp,sp,12
 802e080:	802de1c1 	jmpi	802de1c <__sflush_r>
 802e084:	d9400015 	stw	r5,0(sp)
 802e088:	802e4140 	call	802e414 <__sinit>
 802e08c:	d9400017 	ldw	r5,0(sp)
 802e090:	003ff006 	br	802e054 <_gp+0xfffec948>

0802e094 <fflush>:
 802e094:	20000526 	beq	r4,zero,802e0ac <fflush+0x18>
 802e098:	00820134 	movhi	r2,2052
 802e09c:	10a5c504 	addi	r2,r2,-26860
 802e0a0:	200b883a 	mov	r5,r4
 802e0a4:	11000017 	ldw	r4,0(r2)
 802e0a8:	802e0381 	jmpi	802e038 <_fflush_r>
 802e0ac:	00820134 	movhi	r2,2052
 802e0b0:	10a5c404 	addi	r2,r2,-26864
 802e0b4:	11000017 	ldw	r4,0(r2)
 802e0b8:	014200f4 	movhi	r5,2051
 802e0bc:	29780e04 	addi	r5,r5,-8136
 802e0c0:	802ee181 	jmpi	802ee18 <_fwalk_reent>

0802e0c4 <__fp_unlock>:
 802e0c4:	0005883a 	mov	r2,zero
 802e0c8:	f800283a 	ret

0802e0cc <_cleanup_r>:
 802e0cc:	014200f4 	movhi	r5,2051
 802e0d0:	29490504 	addi	r5,r5,9236
 802e0d4:	802ee181 	jmpi	802ee18 <_fwalk_reent>

0802e0d8 <__sinit.part.1>:
 802e0d8:	defff704 	addi	sp,sp,-36
 802e0dc:	00c200f4 	movhi	r3,2051
 802e0e0:	dfc00815 	stw	ra,32(sp)
 802e0e4:	ddc00715 	stw	r23,28(sp)
 802e0e8:	dd800615 	stw	r22,24(sp)
 802e0ec:	dd400515 	stw	r21,20(sp)
 802e0f0:	dd000415 	stw	r20,16(sp)
 802e0f4:	dcc00315 	stw	r19,12(sp)
 802e0f8:	dc800215 	stw	r18,8(sp)
 802e0fc:	dc400115 	stw	r17,4(sp)
 802e100:	dc000015 	stw	r16,0(sp)
 802e104:	18f83304 	addi	r3,r3,-7988
 802e108:	24000117 	ldw	r16,4(r4)
 802e10c:	20c00f15 	stw	r3,60(r4)
 802e110:	2080bb04 	addi	r2,r4,748
 802e114:	00c000c4 	movi	r3,3
 802e118:	20c0b915 	stw	r3,740(r4)
 802e11c:	2080ba15 	stw	r2,744(r4)
 802e120:	2000b815 	stw	zero,736(r4)
 802e124:	05c00204 	movi	r23,8
 802e128:	00800104 	movi	r2,4
 802e12c:	2025883a 	mov	r18,r4
 802e130:	b80d883a 	mov	r6,r23
 802e134:	81001704 	addi	r4,r16,92
 802e138:	000b883a 	mov	r5,zero
 802e13c:	80000015 	stw	zero,0(r16)
 802e140:	80000115 	stw	zero,4(r16)
 802e144:	80000215 	stw	zero,8(r16)
 802e148:	8080030d 	sth	r2,12(r16)
 802e14c:	80001915 	stw	zero,100(r16)
 802e150:	8000038d 	sth	zero,14(r16)
 802e154:	80000415 	stw	zero,16(r16)
 802e158:	80000515 	stw	zero,20(r16)
 802e15c:	80000615 	stw	zero,24(r16)
 802e160:	802f3b40 	call	802f3b4 <memset>
 802e164:	058200f4 	movhi	r22,2051
 802e168:	94400217 	ldw	r17,8(r18)
 802e16c:	054200f4 	movhi	r21,2051
 802e170:	050200f4 	movhi	r20,2051
 802e174:	04c200f4 	movhi	r19,2051
 802e178:	b5828f04 	addi	r22,r22,2620
 802e17c:	ad42a604 	addi	r21,r21,2712
 802e180:	a502c504 	addi	r20,r20,2836
 802e184:	9cc2dc04 	addi	r19,r19,2928
 802e188:	85800815 	stw	r22,32(r16)
 802e18c:	85400915 	stw	r21,36(r16)
 802e190:	85000a15 	stw	r20,40(r16)
 802e194:	84c00b15 	stw	r19,44(r16)
 802e198:	84000715 	stw	r16,28(r16)
 802e19c:	00800284 	movi	r2,10
 802e1a0:	8880030d 	sth	r2,12(r17)
 802e1a4:	00800044 	movi	r2,1
 802e1a8:	b80d883a 	mov	r6,r23
 802e1ac:	89001704 	addi	r4,r17,92
 802e1b0:	000b883a 	mov	r5,zero
 802e1b4:	88000015 	stw	zero,0(r17)
 802e1b8:	88000115 	stw	zero,4(r17)
 802e1bc:	88000215 	stw	zero,8(r17)
 802e1c0:	88001915 	stw	zero,100(r17)
 802e1c4:	8880038d 	sth	r2,14(r17)
 802e1c8:	88000415 	stw	zero,16(r17)
 802e1cc:	88000515 	stw	zero,20(r17)
 802e1d0:	88000615 	stw	zero,24(r17)
 802e1d4:	802f3b40 	call	802f3b4 <memset>
 802e1d8:	94000317 	ldw	r16,12(r18)
 802e1dc:	00800484 	movi	r2,18
 802e1e0:	8c400715 	stw	r17,28(r17)
 802e1e4:	8d800815 	stw	r22,32(r17)
 802e1e8:	8d400915 	stw	r21,36(r17)
 802e1ec:	8d000a15 	stw	r20,40(r17)
 802e1f0:	8cc00b15 	stw	r19,44(r17)
 802e1f4:	8080030d 	sth	r2,12(r16)
 802e1f8:	00800084 	movi	r2,2
 802e1fc:	80000015 	stw	zero,0(r16)
 802e200:	80000115 	stw	zero,4(r16)
 802e204:	80000215 	stw	zero,8(r16)
 802e208:	80001915 	stw	zero,100(r16)
 802e20c:	8080038d 	sth	r2,14(r16)
 802e210:	80000415 	stw	zero,16(r16)
 802e214:	80000515 	stw	zero,20(r16)
 802e218:	80000615 	stw	zero,24(r16)
 802e21c:	b80d883a 	mov	r6,r23
 802e220:	000b883a 	mov	r5,zero
 802e224:	81001704 	addi	r4,r16,92
 802e228:	802f3b40 	call	802f3b4 <memset>
 802e22c:	00800044 	movi	r2,1
 802e230:	84000715 	stw	r16,28(r16)
 802e234:	85800815 	stw	r22,32(r16)
 802e238:	85400915 	stw	r21,36(r16)
 802e23c:	85000a15 	stw	r20,40(r16)
 802e240:	84c00b15 	stw	r19,44(r16)
 802e244:	90800e15 	stw	r2,56(r18)
 802e248:	dfc00817 	ldw	ra,32(sp)
 802e24c:	ddc00717 	ldw	r23,28(sp)
 802e250:	dd800617 	ldw	r22,24(sp)
 802e254:	dd400517 	ldw	r21,20(sp)
 802e258:	dd000417 	ldw	r20,16(sp)
 802e25c:	dcc00317 	ldw	r19,12(sp)
 802e260:	dc800217 	ldw	r18,8(sp)
 802e264:	dc400117 	ldw	r17,4(sp)
 802e268:	dc000017 	ldw	r16,0(sp)
 802e26c:	dec00904 	addi	sp,sp,36
 802e270:	f800283a 	ret

0802e274 <__fp_lock>:
 802e274:	0005883a 	mov	r2,zero
 802e278:	f800283a 	ret

0802e27c <__sfmoreglue>:
 802e27c:	defffc04 	addi	sp,sp,-16
 802e280:	dc400115 	stw	r17,4(sp)
 802e284:	2c7fffc4 	addi	r17,r5,-1
 802e288:	8c401a24 	muli	r17,r17,104
 802e28c:	dc800215 	stw	r18,8(sp)
 802e290:	2825883a 	mov	r18,r5
 802e294:	89401d04 	addi	r5,r17,116
 802e298:	dc000015 	stw	r16,0(sp)
 802e29c:	dfc00315 	stw	ra,12(sp)
 802e2a0:	80294700 	call	8029470 <_malloc_r>
 802e2a4:	1021883a 	mov	r16,r2
 802e2a8:	10000726 	beq	r2,zero,802e2c8 <__sfmoreglue+0x4c>
 802e2ac:	11000304 	addi	r4,r2,12
 802e2b0:	10000015 	stw	zero,0(r2)
 802e2b4:	14800115 	stw	r18,4(r2)
 802e2b8:	11000215 	stw	r4,8(r2)
 802e2bc:	89801a04 	addi	r6,r17,104
 802e2c0:	000b883a 	mov	r5,zero
 802e2c4:	802f3b40 	call	802f3b4 <memset>
 802e2c8:	8005883a 	mov	r2,r16
 802e2cc:	dfc00317 	ldw	ra,12(sp)
 802e2d0:	dc800217 	ldw	r18,8(sp)
 802e2d4:	dc400117 	ldw	r17,4(sp)
 802e2d8:	dc000017 	ldw	r16,0(sp)
 802e2dc:	dec00404 	addi	sp,sp,16
 802e2e0:	f800283a 	ret

0802e2e4 <__sfp>:
 802e2e4:	defffb04 	addi	sp,sp,-20
 802e2e8:	dc000015 	stw	r16,0(sp)
 802e2ec:	04020134 	movhi	r16,2052
 802e2f0:	8425c404 	addi	r16,r16,-26864
 802e2f4:	dcc00315 	stw	r19,12(sp)
 802e2f8:	2027883a 	mov	r19,r4
 802e2fc:	81000017 	ldw	r4,0(r16)
 802e300:	dfc00415 	stw	ra,16(sp)
 802e304:	dc800215 	stw	r18,8(sp)
 802e308:	20800e17 	ldw	r2,56(r4)
 802e30c:	dc400115 	stw	r17,4(sp)
 802e310:	1000021e 	bne	r2,zero,802e31c <__sfp+0x38>
 802e314:	802e0d80 	call	802e0d8 <__sinit.part.1>
 802e318:	81000017 	ldw	r4,0(r16)
 802e31c:	2480b804 	addi	r18,r4,736
 802e320:	047fffc4 	movi	r17,-1
 802e324:	91000117 	ldw	r4,4(r18)
 802e328:	94000217 	ldw	r16,8(r18)
 802e32c:	213fffc4 	addi	r4,r4,-1
 802e330:	20000a16 	blt	r4,zero,802e35c <__sfp+0x78>
 802e334:	8080030f 	ldh	r2,12(r16)
 802e338:	10000c26 	beq	r2,zero,802e36c <__sfp+0x88>
 802e33c:	80c01d04 	addi	r3,r16,116
 802e340:	00000206 	br	802e34c <__sfp+0x68>
 802e344:	18bfe60f 	ldh	r2,-104(r3)
 802e348:	10000826 	beq	r2,zero,802e36c <__sfp+0x88>
 802e34c:	213fffc4 	addi	r4,r4,-1
 802e350:	1c3ffd04 	addi	r16,r3,-12
 802e354:	18c01a04 	addi	r3,r3,104
 802e358:	247ffa1e 	bne	r4,r17,802e344 <_gp+0xfffecc38>
 802e35c:	90800017 	ldw	r2,0(r18)
 802e360:	10001d26 	beq	r2,zero,802e3d8 <__sfp+0xf4>
 802e364:	1025883a 	mov	r18,r2
 802e368:	003fee06 	br	802e324 <_gp+0xfffecc18>
 802e36c:	00bfffc4 	movi	r2,-1
 802e370:	8080038d 	sth	r2,14(r16)
 802e374:	00800044 	movi	r2,1
 802e378:	8080030d 	sth	r2,12(r16)
 802e37c:	80001915 	stw	zero,100(r16)
 802e380:	80000015 	stw	zero,0(r16)
 802e384:	80000215 	stw	zero,8(r16)
 802e388:	80000115 	stw	zero,4(r16)
 802e38c:	80000415 	stw	zero,16(r16)
 802e390:	80000515 	stw	zero,20(r16)
 802e394:	80000615 	stw	zero,24(r16)
 802e398:	01800204 	movi	r6,8
 802e39c:	000b883a 	mov	r5,zero
 802e3a0:	81001704 	addi	r4,r16,92
 802e3a4:	802f3b40 	call	802f3b4 <memset>
 802e3a8:	8005883a 	mov	r2,r16
 802e3ac:	80000c15 	stw	zero,48(r16)
 802e3b0:	80000d15 	stw	zero,52(r16)
 802e3b4:	80001115 	stw	zero,68(r16)
 802e3b8:	80001215 	stw	zero,72(r16)
 802e3bc:	dfc00417 	ldw	ra,16(sp)
 802e3c0:	dcc00317 	ldw	r19,12(sp)
 802e3c4:	dc800217 	ldw	r18,8(sp)
 802e3c8:	dc400117 	ldw	r17,4(sp)
 802e3cc:	dc000017 	ldw	r16,0(sp)
 802e3d0:	dec00504 	addi	sp,sp,20
 802e3d4:	f800283a 	ret
 802e3d8:	01400104 	movi	r5,4
 802e3dc:	9809883a 	mov	r4,r19
 802e3e0:	802e27c0 	call	802e27c <__sfmoreglue>
 802e3e4:	90800015 	stw	r2,0(r18)
 802e3e8:	103fde1e 	bne	r2,zero,802e364 <_gp+0xfffecc58>
 802e3ec:	00800304 	movi	r2,12
 802e3f0:	98800015 	stw	r2,0(r19)
 802e3f4:	0005883a 	mov	r2,zero
 802e3f8:	003ff006 	br	802e3bc <_gp+0xfffeccb0>

0802e3fc <_cleanup>:
 802e3fc:	00820134 	movhi	r2,2052
 802e400:	10a5c404 	addi	r2,r2,-26864
 802e404:	11000017 	ldw	r4,0(r2)
 802e408:	014200f4 	movhi	r5,2051
 802e40c:	29490504 	addi	r5,r5,9236
 802e410:	802ee181 	jmpi	802ee18 <_fwalk_reent>

0802e414 <__sinit>:
 802e414:	20800e17 	ldw	r2,56(r4)
 802e418:	10000126 	beq	r2,zero,802e420 <__sinit+0xc>
 802e41c:	f800283a 	ret
 802e420:	802e0d81 	jmpi	802e0d8 <__sinit.part.1>

0802e424 <__sfp_lock_acquire>:
 802e424:	f800283a 	ret

0802e428 <__sfp_lock_release>:
 802e428:	f800283a 	ret

0802e42c <__sinit_lock_acquire>:
 802e42c:	f800283a 	ret

0802e430 <__sinit_lock_release>:
 802e430:	f800283a 	ret

0802e434 <__fp_lock_all>:
 802e434:	00820134 	movhi	r2,2052
 802e438:	10a5c504 	addi	r2,r2,-26860
 802e43c:	11000017 	ldw	r4,0(r2)
 802e440:	014200f4 	movhi	r5,2051
 802e444:	29789d04 	addi	r5,r5,-7564
 802e448:	802ed541 	jmpi	802ed54 <_fwalk>

0802e44c <__fp_unlock_all>:
 802e44c:	00820134 	movhi	r2,2052
 802e450:	10a5c504 	addi	r2,r2,-26860
 802e454:	11000017 	ldw	r4,0(r2)
 802e458:	014200f4 	movhi	r5,2051
 802e45c:	29783104 	addi	r5,r5,-7996
 802e460:	802ed541 	jmpi	802ed54 <_fwalk>

0802e464 <_malloc_trim_r>:
 802e464:	defffb04 	addi	sp,sp,-20
 802e468:	dcc00315 	stw	r19,12(sp)
 802e46c:	04c200f4 	movhi	r19,2051
 802e470:	dc800215 	stw	r18,8(sp)
 802e474:	dc400115 	stw	r17,4(sp)
 802e478:	dc000015 	stw	r16,0(sp)
 802e47c:	dfc00415 	stw	ra,16(sp)
 802e480:	2821883a 	mov	r16,r5
 802e484:	9cdfc804 	addi	r19,r19,32544
 802e488:	2025883a 	mov	r18,r4
 802e48c:	8033c300 	call	8033c30 <__malloc_lock>
 802e490:	98800217 	ldw	r2,8(r19)
 802e494:	14400117 	ldw	r17,4(r2)
 802e498:	00bfff04 	movi	r2,-4
 802e49c:	88a2703a 	and	r17,r17,r2
 802e4a0:	8c21c83a 	sub	r16,r17,r16
 802e4a4:	8403fbc4 	addi	r16,r16,4079
 802e4a8:	8020d33a 	srli	r16,r16,12
 802e4ac:	0083ffc4 	movi	r2,4095
 802e4b0:	843fffc4 	addi	r16,r16,-1
 802e4b4:	8020933a 	slli	r16,r16,12
 802e4b8:	1400060e 	bge	r2,r16,802e4d4 <_malloc_trim_r+0x70>
 802e4bc:	000b883a 	mov	r5,zero
 802e4c0:	9009883a 	mov	r4,r18
 802e4c4:	8029f040 	call	8029f04 <_sbrk_r>
 802e4c8:	98c00217 	ldw	r3,8(r19)
 802e4cc:	1c47883a 	add	r3,r3,r17
 802e4d0:	10c00a26 	beq	r2,r3,802e4fc <_malloc_trim_r+0x98>
 802e4d4:	9009883a 	mov	r4,r18
 802e4d8:	8033c540 	call	8033c54 <__malloc_unlock>
 802e4dc:	0005883a 	mov	r2,zero
 802e4e0:	dfc00417 	ldw	ra,16(sp)
 802e4e4:	dcc00317 	ldw	r19,12(sp)
 802e4e8:	dc800217 	ldw	r18,8(sp)
 802e4ec:	dc400117 	ldw	r17,4(sp)
 802e4f0:	dc000017 	ldw	r16,0(sp)
 802e4f4:	dec00504 	addi	sp,sp,20
 802e4f8:	f800283a 	ret
 802e4fc:	040bc83a 	sub	r5,zero,r16
 802e500:	9009883a 	mov	r4,r18
 802e504:	8029f040 	call	8029f04 <_sbrk_r>
 802e508:	00ffffc4 	movi	r3,-1
 802e50c:	10c00d26 	beq	r2,r3,802e544 <_malloc_trim_r+0xe0>
 802e510:	00c20134 	movhi	r3,2052
 802e514:	18ed0204 	addi	r3,r3,-19448
 802e518:	18800017 	ldw	r2,0(r3)
 802e51c:	99000217 	ldw	r4,8(r19)
 802e520:	8c23c83a 	sub	r17,r17,r16
 802e524:	8c400054 	ori	r17,r17,1
 802e528:	1421c83a 	sub	r16,r2,r16
 802e52c:	24400115 	stw	r17,4(r4)
 802e530:	9009883a 	mov	r4,r18
 802e534:	1c000015 	stw	r16,0(r3)
 802e538:	8033c540 	call	8033c54 <__malloc_unlock>
 802e53c:	00800044 	movi	r2,1
 802e540:	003fe706 	br	802e4e0 <_gp+0xfffecdd4>
 802e544:	000b883a 	mov	r5,zero
 802e548:	9009883a 	mov	r4,r18
 802e54c:	8029f040 	call	8029f04 <_sbrk_r>
 802e550:	99000217 	ldw	r4,8(r19)
 802e554:	014003c4 	movi	r5,15
 802e558:	1107c83a 	sub	r3,r2,r4
 802e55c:	28ffdd0e 	bge	r5,r3,802e4d4 <_gp+0xfffecdc8>
 802e560:	01420134 	movhi	r5,2052
 802e564:	2965c604 	addi	r5,r5,-26856
 802e568:	29400017 	ldw	r5,0(r5)
 802e56c:	18c00054 	ori	r3,r3,1
 802e570:	20c00115 	stw	r3,4(r4)
 802e574:	00c20134 	movhi	r3,2052
 802e578:	1145c83a 	sub	r2,r2,r5
 802e57c:	18ed0204 	addi	r3,r3,-19448
 802e580:	18800015 	stw	r2,0(r3)
 802e584:	003fd306 	br	802e4d4 <_gp+0xfffecdc8>

0802e588 <_free_r>:
 802e588:	28004126 	beq	r5,zero,802e690 <_free_r+0x108>
 802e58c:	defffd04 	addi	sp,sp,-12
 802e590:	dc400115 	stw	r17,4(sp)
 802e594:	dc000015 	stw	r16,0(sp)
 802e598:	2023883a 	mov	r17,r4
 802e59c:	2821883a 	mov	r16,r5
 802e5a0:	dfc00215 	stw	ra,8(sp)
 802e5a4:	8033c300 	call	8033c30 <__malloc_lock>
 802e5a8:	81ffff17 	ldw	r7,-4(r16)
 802e5ac:	00bfff84 	movi	r2,-2
 802e5b0:	010200f4 	movhi	r4,2051
 802e5b4:	81bffe04 	addi	r6,r16,-8
 802e5b8:	3884703a 	and	r2,r7,r2
 802e5bc:	211fc804 	addi	r4,r4,32544
 802e5c0:	308b883a 	add	r5,r6,r2
 802e5c4:	2a400117 	ldw	r9,4(r5)
 802e5c8:	22000217 	ldw	r8,8(r4)
 802e5cc:	00ffff04 	movi	r3,-4
 802e5d0:	48c6703a 	and	r3,r9,r3
 802e5d4:	2a005726 	beq	r5,r8,802e734 <_free_r+0x1ac>
 802e5d8:	28c00115 	stw	r3,4(r5)
 802e5dc:	39c0004c 	andi	r7,r7,1
 802e5e0:	3800091e 	bne	r7,zero,802e608 <_free_r+0x80>
 802e5e4:	823ffe17 	ldw	r8,-8(r16)
 802e5e8:	22400204 	addi	r9,r4,8
 802e5ec:	320dc83a 	sub	r6,r6,r8
 802e5f0:	31c00217 	ldw	r7,8(r6)
 802e5f4:	1205883a 	add	r2,r2,r8
 802e5f8:	3a406526 	beq	r7,r9,802e790 <_free_r+0x208>
 802e5fc:	32000317 	ldw	r8,12(r6)
 802e600:	3a000315 	stw	r8,12(r7)
 802e604:	41c00215 	stw	r7,8(r8)
 802e608:	28cf883a 	add	r7,r5,r3
 802e60c:	39c00117 	ldw	r7,4(r7)
 802e610:	39c0004c 	andi	r7,r7,1
 802e614:	38003a26 	beq	r7,zero,802e700 <_free_r+0x178>
 802e618:	10c00054 	ori	r3,r2,1
 802e61c:	30c00115 	stw	r3,4(r6)
 802e620:	3087883a 	add	r3,r6,r2
 802e624:	18800015 	stw	r2,0(r3)
 802e628:	00c07fc4 	movi	r3,511
 802e62c:	18801936 	bltu	r3,r2,802e694 <_free_r+0x10c>
 802e630:	1004d0fa 	srli	r2,r2,3
 802e634:	01c00044 	movi	r7,1
 802e638:	21400117 	ldw	r5,4(r4)
 802e63c:	10c00044 	addi	r3,r2,1
 802e640:	18c7883a 	add	r3,r3,r3
 802e644:	1005d0ba 	srai	r2,r2,2
 802e648:	18c7883a 	add	r3,r3,r3
 802e64c:	18c7883a 	add	r3,r3,r3
 802e650:	1907883a 	add	r3,r3,r4
 802e654:	3884983a 	sll	r2,r7,r2
 802e658:	19c00017 	ldw	r7,0(r3)
 802e65c:	1a3ffe04 	addi	r8,r3,-8
 802e660:	1144b03a 	or	r2,r2,r5
 802e664:	32000315 	stw	r8,12(r6)
 802e668:	31c00215 	stw	r7,8(r6)
 802e66c:	20800115 	stw	r2,4(r4)
 802e670:	19800015 	stw	r6,0(r3)
 802e674:	39800315 	stw	r6,12(r7)
 802e678:	8809883a 	mov	r4,r17
 802e67c:	dfc00217 	ldw	ra,8(sp)
 802e680:	dc400117 	ldw	r17,4(sp)
 802e684:	dc000017 	ldw	r16,0(sp)
 802e688:	dec00304 	addi	sp,sp,12
 802e68c:	8033c541 	jmpi	8033c54 <__malloc_unlock>
 802e690:	f800283a 	ret
 802e694:	100ad27a 	srli	r5,r2,9
 802e698:	00c00104 	movi	r3,4
 802e69c:	19404a36 	bltu	r3,r5,802e7c8 <_free_r+0x240>
 802e6a0:	100ad1ba 	srli	r5,r2,6
 802e6a4:	28c00e44 	addi	r3,r5,57
 802e6a8:	18c7883a 	add	r3,r3,r3
 802e6ac:	29400e04 	addi	r5,r5,56
 802e6b0:	18c7883a 	add	r3,r3,r3
 802e6b4:	18c7883a 	add	r3,r3,r3
 802e6b8:	1909883a 	add	r4,r3,r4
 802e6bc:	20c00017 	ldw	r3,0(r4)
 802e6c0:	01c200f4 	movhi	r7,2051
 802e6c4:	213ffe04 	addi	r4,r4,-8
 802e6c8:	39dfc804 	addi	r7,r7,32544
 802e6cc:	20c04426 	beq	r4,r3,802e7e0 <_free_r+0x258>
 802e6d0:	01ffff04 	movi	r7,-4
 802e6d4:	19400117 	ldw	r5,4(r3)
 802e6d8:	29ca703a 	and	r5,r5,r7
 802e6dc:	1140022e 	bgeu	r2,r5,802e6e8 <_free_r+0x160>
 802e6e0:	18c00217 	ldw	r3,8(r3)
 802e6e4:	20fffb1e 	bne	r4,r3,802e6d4 <_gp+0xfffecfc8>
 802e6e8:	19000317 	ldw	r4,12(r3)
 802e6ec:	31000315 	stw	r4,12(r6)
 802e6f0:	30c00215 	stw	r3,8(r6)
 802e6f4:	21800215 	stw	r6,8(r4)
 802e6f8:	19800315 	stw	r6,12(r3)
 802e6fc:	003fde06 	br	802e678 <_gp+0xfffecf6c>
 802e700:	29c00217 	ldw	r7,8(r5)
 802e704:	10c5883a 	add	r2,r2,r3
 802e708:	00c200f4 	movhi	r3,2051
 802e70c:	18dfca04 	addi	r3,r3,32552
 802e710:	38c03b26 	beq	r7,r3,802e800 <_free_r+0x278>
 802e714:	2a000317 	ldw	r8,12(r5)
 802e718:	11400054 	ori	r5,r2,1
 802e71c:	3087883a 	add	r3,r6,r2
 802e720:	3a000315 	stw	r8,12(r7)
 802e724:	41c00215 	stw	r7,8(r8)
 802e728:	31400115 	stw	r5,4(r6)
 802e72c:	18800015 	stw	r2,0(r3)
 802e730:	003fbd06 	br	802e628 <_gp+0xfffecf1c>
 802e734:	39c0004c 	andi	r7,r7,1
 802e738:	10c5883a 	add	r2,r2,r3
 802e73c:	3800071e 	bne	r7,zero,802e75c <_free_r+0x1d4>
 802e740:	81fffe17 	ldw	r7,-8(r16)
 802e744:	31cdc83a 	sub	r6,r6,r7
 802e748:	30c00317 	ldw	r3,12(r6)
 802e74c:	31400217 	ldw	r5,8(r6)
 802e750:	11c5883a 	add	r2,r2,r7
 802e754:	28c00315 	stw	r3,12(r5)
 802e758:	19400215 	stw	r5,8(r3)
 802e75c:	10c00054 	ori	r3,r2,1
 802e760:	30c00115 	stw	r3,4(r6)
 802e764:	00c20134 	movhi	r3,2052
 802e768:	18e5c704 	addi	r3,r3,-26852
 802e76c:	18c00017 	ldw	r3,0(r3)
 802e770:	21800215 	stw	r6,8(r4)
 802e774:	10ffc036 	bltu	r2,r3,802e678 <_gp+0xfffecf6c>
 802e778:	00820134 	movhi	r2,2052
 802e77c:	10acf604 	addi	r2,r2,-19496
 802e780:	11400017 	ldw	r5,0(r2)
 802e784:	8809883a 	mov	r4,r17
 802e788:	802e4640 	call	802e464 <_malloc_trim_r>
 802e78c:	003fba06 	br	802e678 <_gp+0xfffecf6c>
 802e790:	28c9883a 	add	r4,r5,r3
 802e794:	21000117 	ldw	r4,4(r4)
 802e798:	2100004c 	andi	r4,r4,1
 802e79c:	2000391e 	bne	r4,zero,802e884 <_free_r+0x2fc>
 802e7a0:	29c00217 	ldw	r7,8(r5)
 802e7a4:	29000317 	ldw	r4,12(r5)
 802e7a8:	1885883a 	add	r2,r3,r2
 802e7ac:	10c00054 	ori	r3,r2,1
 802e7b0:	39000315 	stw	r4,12(r7)
 802e7b4:	21c00215 	stw	r7,8(r4)
 802e7b8:	30c00115 	stw	r3,4(r6)
 802e7bc:	308d883a 	add	r6,r6,r2
 802e7c0:	30800015 	stw	r2,0(r6)
 802e7c4:	003fac06 	br	802e678 <_gp+0xfffecf6c>
 802e7c8:	00c00504 	movi	r3,20
 802e7cc:	19401536 	bltu	r3,r5,802e824 <_free_r+0x29c>
 802e7d0:	28c01704 	addi	r3,r5,92
 802e7d4:	18c7883a 	add	r3,r3,r3
 802e7d8:	294016c4 	addi	r5,r5,91
 802e7dc:	003fb406 	br	802e6b0 <_gp+0xfffecfa4>
 802e7e0:	280bd0ba 	srai	r5,r5,2
 802e7e4:	00c00044 	movi	r3,1
 802e7e8:	38800117 	ldw	r2,4(r7)
 802e7ec:	194a983a 	sll	r5,r3,r5
 802e7f0:	2007883a 	mov	r3,r4
 802e7f4:	2884b03a 	or	r2,r5,r2
 802e7f8:	38800115 	stw	r2,4(r7)
 802e7fc:	003fbb06 	br	802e6ec <_gp+0xfffecfe0>
 802e800:	21800515 	stw	r6,20(r4)
 802e804:	21800415 	stw	r6,16(r4)
 802e808:	10c00054 	ori	r3,r2,1
 802e80c:	31c00315 	stw	r7,12(r6)
 802e810:	31c00215 	stw	r7,8(r6)
 802e814:	30c00115 	stw	r3,4(r6)
 802e818:	308d883a 	add	r6,r6,r2
 802e81c:	30800015 	stw	r2,0(r6)
 802e820:	003f9506 	br	802e678 <_gp+0xfffecf6c>
 802e824:	00c01504 	movi	r3,84
 802e828:	19400536 	bltu	r3,r5,802e840 <_free_r+0x2b8>
 802e82c:	100ad33a 	srli	r5,r2,12
 802e830:	28c01bc4 	addi	r3,r5,111
 802e834:	18c7883a 	add	r3,r3,r3
 802e838:	29401b84 	addi	r5,r5,110
 802e83c:	003f9c06 	br	802e6b0 <_gp+0xfffecfa4>
 802e840:	00c05504 	movi	r3,340
 802e844:	19400536 	bltu	r3,r5,802e85c <_free_r+0x2d4>
 802e848:	100ad3fa 	srli	r5,r2,15
 802e84c:	28c01e04 	addi	r3,r5,120
 802e850:	18c7883a 	add	r3,r3,r3
 802e854:	29401dc4 	addi	r5,r5,119
 802e858:	003f9506 	br	802e6b0 <_gp+0xfffecfa4>
 802e85c:	00c15504 	movi	r3,1364
 802e860:	19400536 	bltu	r3,r5,802e878 <_free_r+0x2f0>
 802e864:	100ad4ba 	srli	r5,r2,18
 802e868:	28c01f44 	addi	r3,r5,125
 802e86c:	18c7883a 	add	r3,r3,r3
 802e870:	29401f04 	addi	r5,r5,124
 802e874:	003f8e06 	br	802e6b0 <_gp+0xfffecfa4>
 802e878:	00c03f84 	movi	r3,254
 802e87c:	01401f84 	movi	r5,126
 802e880:	003f8b06 	br	802e6b0 <_gp+0xfffecfa4>
 802e884:	10c00054 	ori	r3,r2,1
 802e888:	30c00115 	stw	r3,4(r6)
 802e88c:	308d883a 	add	r6,r6,r2
 802e890:	30800015 	stw	r2,0(r6)
 802e894:	003f7806 	br	802e678 <_gp+0xfffecf6c>

0802e898 <__sfvwrite_r>:
 802e898:	30800217 	ldw	r2,8(r6)
 802e89c:	10006726 	beq	r2,zero,802ea3c <__sfvwrite_r+0x1a4>
 802e8a0:	28c0030b 	ldhu	r3,12(r5)
 802e8a4:	defff404 	addi	sp,sp,-48
 802e8a8:	dd400715 	stw	r21,28(sp)
 802e8ac:	dd000615 	stw	r20,24(sp)
 802e8b0:	dc000215 	stw	r16,8(sp)
 802e8b4:	dfc00b15 	stw	ra,44(sp)
 802e8b8:	df000a15 	stw	fp,40(sp)
 802e8bc:	ddc00915 	stw	r23,36(sp)
 802e8c0:	dd800815 	stw	r22,32(sp)
 802e8c4:	dcc00515 	stw	r19,20(sp)
 802e8c8:	dc800415 	stw	r18,16(sp)
 802e8cc:	dc400315 	stw	r17,12(sp)
 802e8d0:	1880020c 	andi	r2,r3,8
 802e8d4:	2821883a 	mov	r16,r5
 802e8d8:	202b883a 	mov	r21,r4
 802e8dc:	3029883a 	mov	r20,r6
 802e8e0:	10002726 	beq	r2,zero,802e980 <__sfvwrite_r+0xe8>
 802e8e4:	28800417 	ldw	r2,16(r5)
 802e8e8:	10002526 	beq	r2,zero,802e980 <__sfvwrite_r+0xe8>
 802e8ec:	1880008c 	andi	r2,r3,2
 802e8f0:	a4400017 	ldw	r17,0(r20)
 802e8f4:	10002a26 	beq	r2,zero,802e9a0 <__sfvwrite_r+0x108>
 802e8f8:	05a00034 	movhi	r22,32768
 802e8fc:	0027883a 	mov	r19,zero
 802e900:	0025883a 	mov	r18,zero
 802e904:	b5bf0004 	addi	r22,r22,-1024
 802e908:	980d883a 	mov	r6,r19
 802e90c:	a809883a 	mov	r4,r21
 802e910:	90004626 	beq	r18,zero,802ea2c <__sfvwrite_r+0x194>
 802e914:	900f883a 	mov	r7,r18
 802e918:	b480022e 	bgeu	r22,r18,802e924 <__sfvwrite_r+0x8c>
 802e91c:	01e00034 	movhi	r7,32768
 802e920:	39ff0004 	addi	r7,r7,-1024
 802e924:	80800917 	ldw	r2,36(r16)
 802e928:	81400717 	ldw	r5,28(r16)
 802e92c:	103ee83a 	callr	r2
 802e930:	0080570e 	bge	zero,r2,802ea90 <__sfvwrite_r+0x1f8>
 802e934:	a0c00217 	ldw	r3,8(r20)
 802e938:	98a7883a 	add	r19,r19,r2
 802e93c:	90a5c83a 	sub	r18,r18,r2
 802e940:	1885c83a 	sub	r2,r3,r2
 802e944:	a0800215 	stw	r2,8(r20)
 802e948:	103fef1e 	bne	r2,zero,802e908 <_gp+0xfffed1fc>
 802e94c:	0005883a 	mov	r2,zero
 802e950:	dfc00b17 	ldw	ra,44(sp)
 802e954:	df000a17 	ldw	fp,40(sp)
 802e958:	ddc00917 	ldw	r23,36(sp)
 802e95c:	dd800817 	ldw	r22,32(sp)
 802e960:	dd400717 	ldw	r21,28(sp)
 802e964:	dd000617 	ldw	r20,24(sp)
 802e968:	dcc00517 	ldw	r19,20(sp)
 802e96c:	dc800417 	ldw	r18,16(sp)
 802e970:	dc400317 	ldw	r17,12(sp)
 802e974:	dc000217 	ldw	r16,8(sp)
 802e978:	dec00c04 	addi	sp,sp,48
 802e97c:	f800283a 	ret
 802e980:	800b883a 	mov	r5,r16
 802e984:	a809883a 	mov	r4,r21
 802e988:	802c2c00 	call	802c2c0 <__swsetup_r>
 802e98c:	1000eb1e 	bne	r2,zero,802ed3c <__sfvwrite_r+0x4a4>
 802e990:	80c0030b 	ldhu	r3,12(r16)
 802e994:	a4400017 	ldw	r17,0(r20)
 802e998:	1880008c 	andi	r2,r3,2
 802e99c:	103fd61e 	bne	r2,zero,802e8f8 <_gp+0xfffed1ec>
 802e9a0:	1880004c 	andi	r2,r3,1
 802e9a4:	10003f1e 	bne	r2,zero,802eaa4 <__sfvwrite_r+0x20c>
 802e9a8:	0039883a 	mov	fp,zero
 802e9ac:	0025883a 	mov	r18,zero
 802e9b0:	90001a26 	beq	r18,zero,802ea1c <__sfvwrite_r+0x184>
 802e9b4:	1880800c 	andi	r2,r3,512
 802e9b8:	84c00217 	ldw	r19,8(r16)
 802e9bc:	10002126 	beq	r2,zero,802ea44 <__sfvwrite_r+0x1ac>
 802e9c0:	982f883a 	mov	r23,r19
 802e9c4:	94c09336 	bltu	r18,r19,802ec14 <__sfvwrite_r+0x37c>
 802e9c8:	1881200c 	andi	r2,r3,1152
 802e9cc:	10009e1e 	bne	r2,zero,802ec48 <__sfvwrite_r+0x3b0>
 802e9d0:	81000017 	ldw	r4,0(r16)
 802e9d4:	b80d883a 	mov	r6,r23
 802e9d8:	e00b883a 	mov	r5,fp
 802e9dc:	802f2580 	call	802f258 <memmove>
 802e9e0:	80c00217 	ldw	r3,8(r16)
 802e9e4:	81000017 	ldw	r4,0(r16)
 802e9e8:	9005883a 	mov	r2,r18
 802e9ec:	1ce7c83a 	sub	r19,r3,r19
 802e9f0:	25cf883a 	add	r7,r4,r23
 802e9f4:	84c00215 	stw	r19,8(r16)
 802e9f8:	81c00015 	stw	r7,0(r16)
 802e9fc:	a0c00217 	ldw	r3,8(r20)
 802ea00:	e0b9883a 	add	fp,fp,r2
 802ea04:	90a5c83a 	sub	r18,r18,r2
 802ea08:	18a7c83a 	sub	r19,r3,r2
 802ea0c:	a4c00215 	stw	r19,8(r20)
 802ea10:	983fce26 	beq	r19,zero,802e94c <_gp+0xfffed240>
 802ea14:	80c0030b 	ldhu	r3,12(r16)
 802ea18:	903fe61e 	bne	r18,zero,802e9b4 <_gp+0xfffed2a8>
 802ea1c:	8f000017 	ldw	fp,0(r17)
 802ea20:	8c800117 	ldw	r18,4(r17)
 802ea24:	8c400204 	addi	r17,r17,8
 802ea28:	003fe106 	br	802e9b0 <_gp+0xfffed2a4>
 802ea2c:	8cc00017 	ldw	r19,0(r17)
 802ea30:	8c800117 	ldw	r18,4(r17)
 802ea34:	8c400204 	addi	r17,r17,8
 802ea38:	003fb306 	br	802e908 <_gp+0xfffed1fc>
 802ea3c:	0005883a 	mov	r2,zero
 802ea40:	f800283a 	ret
 802ea44:	81000017 	ldw	r4,0(r16)
 802ea48:	80800417 	ldw	r2,16(r16)
 802ea4c:	11005736 	bltu	r2,r4,802ebac <__sfvwrite_r+0x314>
 802ea50:	85c00517 	ldw	r23,20(r16)
 802ea54:	95c05536 	bltu	r18,r23,802ebac <__sfvwrite_r+0x314>
 802ea58:	00a00034 	movhi	r2,32768
 802ea5c:	10bfffc4 	addi	r2,r2,-1
 802ea60:	9009883a 	mov	r4,r18
 802ea64:	1480012e 	bgeu	r2,r18,802ea6c <__sfvwrite_r+0x1d4>
 802ea68:	1009883a 	mov	r4,r2
 802ea6c:	b80b883a 	mov	r5,r23
 802ea70:	80259f00 	call	80259f0 <__divsi3>
 802ea74:	15cf383a 	mul	r7,r2,r23
 802ea78:	81400717 	ldw	r5,28(r16)
 802ea7c:	80800917 	ldw	r2,36(r16)
 802ea80:	e00d883a 	mov	r6,fp
 802ea84:	a809883a 	mov	r4,r21
 802ea88:	103ee83a 	callr	r2
 802ea8c:	00bfdb16 	blt	zero,r2,802e9fc <_gp+0xfffed2f0>
 802ea90:	8080030b 	ldhu	r2,12(r16)
 802ea94:	10801014 	ori	r2,r2,64
 802ea98:	8080030d 	sth	r2,12(r16)
 802ea9c:	00bfffc4 	movi	r2,-1
 802eaa0:	003fab06 	br	802e950 <_gp+0xfffed244>
 802eaa4:	0027883a 	mov	r19,zero
 802eaa8:	0011883a 	mov	r8,zero
 802eaac:	0039883a 	mov	fp,zero
 802eab0:	0025883a 	mov	r18,zero
 802eab4:	90001f26 	beq	r18,zero,802eb34 <__sfvwrite_r+0x29c>
 802eab8:	40005a26 	beq	r8,zero,802ec24 <__sfvwrite_r+0x38c>
 802eabc:	982d883a 	mov	r22,r19
 802eac0:	94c0012e 	bgeu	r18,r19,802eac8 <__sfvwrite_r+0x230>
 802eac4:	902d883a 	mov	r22,r18
 802eac8:	81000017 	ldw	r4,0(r16)
 802eacc:	80800417 	ldw	r2,16(r16)
 802ead0:	b02f883a 	mov	r23,r22
 802ead4:	81c00517 	ldw	r7,20(r16)
 802ead8:	1100032e 	bgeu	r2,r4,802eae8 <__sfvwrite_r+0x250>
 802eadc:	80c00217 	ldw	r3,8(r16)
 802eae0:	38c7883a 	add	r3,r7,r3
 802eae4:	1d801816 	blt	r3,r22,802eb48 <__sfvwrite_r+0x2b0>
 802eae8:	b1c03e16 	blt	r22,r7,802ebe4 <__sfvwrite_r+0x34c>
 802eaec:	80800917 	ldw	r2,36(r16)
 802eaf0:	81400717 	ldw	r5,28(r16)
 802eaf4:	e00d883a 	mov	r6,fp
 802eaf8:	da000115 	stw	r8,4(sp)
 802eafc:	a809883a 	mov	r4,r21
 802eb00:	103ee83a 	callr	r2
 802eb04:	102f883a 	mov	r23,r2
 802eb08:	da000117 	ldw	r8,4(sp)
 802eb0c:	00bfe00e 	bge	zero,r2,802ea90 <_gp+0xfffed384>
 802eb10:	9de7c83a 	sub	r19,r19,r23
 802eb14:	98001f26 	beq	r19,zero,802eb94 <__sfvwrite_r+0x2fc>
 802eb18:	a0800217 	ldw	r2,8(r20)
 802eb1c:	e5f9883a 	add	fp,fp,r23
 802eb20:	95e5c83a 	sub	r18,r18,r23
 802eb24:	15efc83a 	sub	r23,r2,r23
 802eb28:	a5c00215 	stw	r23,8(r20)
 802eb2c:	b83f8726 	beq	r23,zero,802e94c <_gp+0xfffed240>
 802eb30:	903fe11e 	bne	r18,zero,802eab8 <_gp+0xfffed3ac>
 802eb34:	8f000017 	ldw	fp,0(r17)
 802eb38:	8c800117 	ldw	r18,4(r17)
 802eb3c:	0011883a 	mov	r8,zero
 802eb40:	8c400204 	addi	r17,r17,8
 802eb44:	003fdb06 	br	802eab4 <_gp+0xfffed3a8>
 802eb48:	180d883a 	mov	r6,r3
 802eb4c:	e00b883a 	mov	r5,fp
 802eb50:	da000115 	stw	r8,4(sp)
 802eb54:	d8c00015 	stw	r3,0(sp)
 802eb58:	802f2580 	call	802f258 <memmove>
 802eb5c:	d8c00017 	ldw	r3,0(sp)
 802eb60:	80800017 	ldw	r2,0(r16)
 802eb64:	800b883a 	mov	r5,r16
 802eb68:	a809883a 	mov	r4,r21
 802eb6c:	10c5883a 	add	r2,r2,r3
 802eb70:	80800015 	stw	r2,0(r16)
 802eb74:	d8c00015 	stw	r3,0(sp)
 802eb78:	802e0380 	call	802e038 <_fflush_r>
 802eb7c:	d8c00017 	ldw	r3,0(sp)
 802eb80:	da000117 	ldw	r8,4(sp)
 802eb84:	103fc21e 	bne	r2,zero,802ea90 <_gp+0xfffed384>
 802eb88:	182f883a 	mov	r23,r3
 802eb8c:	9de7c83a 	sub	r19,r19,r23
 802eb90:	983fe11e 	bne	r19,zero,802eb18 <_gp+0xfffed40c>
 802eb94:	800b883a 	mov	r5,r16
 802eb98:	a809883a 	mov	r4,r21
 802eb9c:	802e0380 	call	802e038 <_fflush_r>
 802eba0:	103fbb1e 	bne	r2,zero,802ea90 <_gp+0xfffed384>
 802eba4:	0011883a 	mov	r8,zero
 802eba8:	003fdb06 	br	802eb18 <_gp+0xfffed40c>
 802ebac:	94c0012e 	bgeu	r18,r19,802ebb4 <__sfvwrite_r+0x31c>
 802ebb0:	9027883a 	mov	r19,r18
 802ebb4:	980d883a 	mov	r6,r19
 802ebb8:	e00b883a 	mov	r5,fp
 802ebbc:	802f2580 	call	802f258 <memmove>
 802ebc0:	80800217 	ldw	r2,8(r16)
 802ebc4:	80c00017 	ldw	r3,0(r16)
 802ebc8:	14c5c83a 	sub	r2,r2,r19
 802ebcc:	1cc7883a 	add	r3,r3,r19
 802ebd0:	80800215 	stw	r2,8(r16)
 802ebd4:	80c00015 	stw	r3,0(r16)
 802ebd8:	10004326 	beq	r2,zero,802ece8 <__sfvwrite_r+0x450>
 802ebdc:	9805883a 	mov	r2,r19
 802ebe0:	003f8606 	br	802e9fc <_gp+0xfffed2f0>
 802ebe4:	b00d883a 	mov	r6,r22
 802ebe8:	e00b883a 	mov	r5,fp
 802ebec:	da000115 	stw	r8,4(sp)
 802ebf0:	802f2580 	call	802f258 <memmove>
 802ebf4:	80800217 	ldw	r2,8(r16)
 802ebf8:	80c00017 	ldw	r3,0(r16)
 802ebfc:	da000117 	ldw	r8,4(sp)
 802ec00:	1585c83a 	sub	r2,r2,r22
 802ec04:	1dad883a 	add	r22,r3,r22
 802ec08:	80800215 	stw	r2,8(r16)
 802ec0c:	85800015 	stw	r22,0(r16)
 802ec10:	003fbf06 	br	802eb10 <_gp+0xfffed404>
 802ec14:	81000017 	ldw	r4,0(r16)
 802ec18:	9027883a 	mov	r19,r18
 802ec1c:	902f883a 	mov	r23,r18
 802ec20:	003f6c06 	br	802e9d4 <_gp+0xfffed2c8>
 802ec24:	900d883a 	mov	r6,r18
 802ec28:	01400284 	movi	r5,10
 802ec2c:	e009883a 	mov	r4,fp
 802ec30:	802f1740 	call	802f174 <memchr>
 802ec34:	10003e26 	beq	r2,zero,802ed30 <__sfvwrite_r+0x498>
 802ec38:	10800044 	addi	r2,r2,1
 802ec3c:	1727c83a 	sub	r19,r2,fp
 802ec40:	02000044 	movi	r8,1
 802ec44:	003f9d06 	br	802eabc <_gp+0xfffed3b0>
 802ec48:	80800517 	ldw	r2,20(r16)
 802ec4c:	81400417 	ldw	r5,16(r16)
 802ec50:	81c00017 	ldw	r7,0(r16)
 802ec54:	10a7883a 	add	r19,r2,r2
 802ec58:	9885883a 	add	r2,r19,r2
 802ec5c:	1026d7fa 	srli	r19,r2,31
 802ec60:	396dc83a 	sub	r22,r7,r5
 802ec64:	b1000044 	addi	r4,r22,1
 802ec68:	9885883a 	add	r2,r19,r2
 802ec6c:	1027d07a 	srai	r19,r2,1
 802ec70:	2485883a 	add	r2,r4,r18
 802ec74:	980d883a 	mov	r6,r19
 802ec78:	9880022e 	bgeu	r19,r2,802ec84 <__sfvwrite_r+0x3ec>
 802ec7c:	1027883a 	mov	r19,r2
 802ec80:	100d883a 	mov	r6,r2
 802ec84:	18c1000c 	andi	r3,r3,1024
 802ec88:	18001c26 	beq	r3,zero,802ecfc <__sfvwrite_r+0x464>
 802ec8c:	300b883a 	mov	r5,r6
 802ec90:	a809883a 	mov	r4,r21
 802ec94:	80294700 	call	8029470 <_malloc_r>
 802ec98:	102f883a 	mov	r23,r2
 802ec9c:	10002926 	beq	r2,zero,802ed44 <__sfvwrite_r+0x4ac>
 802eca0:	81400417 	ldw	r5,16(r16)
 802eca4:	b00d883a 	mov	r6,r22
 802eca8:	1009883a 	mov	r4,r2
 802ecac:	8029c7c0 	call	8029c7c <memcpy>
 802ecb0:	8080030b 	ldhu	r2,12(r16)
 802ecb4:	00fedfc4 	movi	r3,-1153
 802ecb8:	10c4703a 	and	r2,r2,r3
 802ecbc:	10802014 	ori	r2,r2,128
 802ecc0:	8080030d 	sth	r2,12(r16)
 802ecc4:	bd89883a 	add	r4,r23,r22
 802ecc8:	9d8fc83a 	sub	r7,r19,r22
 802eccc:	85c00415 	stw	r23,16(r16)
 802ecd0:	84c00515 	stw	r19,20(r16)
 802ecd4:	81000015 	stw	r4,0(r16)
 802ecd8:	9027883a 	mov	r19,r18
 802ecdc:	81c00215 	stw	r7,8(r16)
 802ece0:	902f883a 	mov	r23,r18
 802ece4:	003f3b06 	br	802e9d4 <_gp+0xfffed2c8>
 802ece8:	800b883a 	mov	r5,r16
 802ecec:	a809883a 	mov	r4,r21
 802ecf0:	802e0380 	call	802e038 <_fflush_r>
 802ecf4:	103fb926 	beq	r2,zero,802ebdc <_gp+0xfffed4d0>
 802ecf8:	003f6506 	br	802ea90 <_gp+0xfffed384>
 802ecfc:	a809883a 	mov	r4,r21
 802ed00:	80304d80 	call	80304d8 <_realloc_r>
 802ed04:	102f883a 	mov	r23,r2
 802ed08:	103fee1e 	bne	r2,zero,802ecc4 <_gp+0xfffed5b8>
 802ed0c:	81400417 	ldw	r5,16(r16)
 802ed10:	a809883a 	mov	r4,r21
 802ed14:	802e5880 	call	802e588 <_free_r>
 802ed18:	8080030b 	ldhu	r2,12(r16)
 802ed1c:	00ffdfc4 	movi	r3,-129
 802ed20:	1884703a 	and	r2,r3,r2
 802ed24:	00c00304 	movi	r3,12
 802ed28:	a8c00015 	stw	r3,0(r21)
 802ed2c:	003f5906 	br	802ea94 <_gp+0xfffed388>
 802ed30:	94c00044 	addi	r19,r18,1
 802ed34:	02000044 	movi	r8,1
 802ed38:	003f6006 	br	802eabc <_gp+0xfffed3b0>
 802ed3c:	00bfffc4 	movi	r2,-1
 802ed40:	003f0306 	br	802e950 <_gp+0xfffed244>
 802ed44:	00800304 	movi	r2,12
 802ed48:	a8800015 	stw	r2,0(r21)
 802ed4c:	8080030b 	ldhu	r2,12(r16)
 802ed50:	003f5006 	br	802ea94 <_gp+0xfffed388>

0802ed54 <_fwalk>:
 802ed54:	defff704 	addi	sp,sp,-36
 802ed58:	dd000415 	stw	r20,16(sp)
 802ed5c:	dfc00815 	stw	ra,32(sp)
 802ed60:	ddc00715 	stw	r23,28(sp)
 802ed64:	dd800615 	stw	r22,24(sp)
 802ed68:	dd400515 	stw	r21,20(sp)
 802ed6c:	dcc00315 	stw	r19,12(sp)
 802ed70:	dc800215 	stw	r18,8(sp)
 802ed74:	dc400115 	stw	r17,4(sp)
 802ed78:	dc000015 	stw	r16,0(sp)
 802ed7c:	2500b804 	addi	r20,r4,736
 802ed80:	a0002326 	beq	r20,zero,802ee10 <_fwalk+0xbc>
 802ed84:	282b883a 	mov	r21,r5
 802ed88:	002f883a 	mov	r23,zero
 802ed8c:	05800044 	movi	r22,1
 802ed90:	04ffffc4 	movi	r19,-1
 802ed94:	a4400117 	ldw	r17,4(r20)
 802ed98:	a4800217 	ldw	r18,8(r20)
 802ed9c:	8c7fffc4 	addi	r17,r17,-1
 802eda0:	88000d16 	blt	r17,zero,802edd8 <_fwalk+0x84>
 802eda4:	94000304 	addi	r16,r18,12
 802eda8:	94800384 	addi	r18,r18,14
 802edac:	8080000b 	ldhu	r2,0(r16)
 802edb0:	8c7fffc4 	addi	r17,r17,-1
 802edb4:	813ffd04 	addi	r4,r16,-12
 802edb8:	b080042e 	bgeu	r22,r2,802edcc <_fwalk+0x78>
 802edbc:	9080000f 	ldh	r2,0(r18)
 802edc0:	14c00226 	beq	r2,r19,802edcc <_fwalk+0x78>
 802edc4:	a83ee83a 	callr	r21
 802edc8:	b8aeb03a 	or	r23,r23,r2
 802edcc:	84001a04 	addi	r16,r16,104
 802edd0:	94801a04 	addi	r18,r18,104
 802edd4:	8cfff51e 	bne	r17,r19,802edac <_gp+0xfffed6a0>
 802edd8:	a5000017 	ldw	r20,0(r20)
 802eddc:	a03fed1e 	bne	r20,zero,802ed94 <_gp+0xfffed688>
 802ede0:	b805883a 	mov	r2,r23
 802ede4:	dfc00817 	ldw	ra,32(sp)
 802ede8:	ddc00717 	ldw	r23,28(sp)
 802edec:	dd800617 	ldw	r22,24(sp)
 802edf0:	dd400517 	ldw	r21,20(sp)
 802edf4:	dd000417 	ldw	r20,16(sp)
 802edf8:	dcc00317 	ldw	r19,12(sp)
 802edfc:	dc800217 	ldw	r18,8(sp)
 802ee00:	dc400117 	ldw	r17,4(sp)
 802ee04:	dc000017 	ldw	r16,0(sp)
 802ee08:	dec00904 	addi	sp,sp,36
 802ee0c:	f800283a 	ret
 802ee10:	002f883a 	mov	r23,zero
 802ee14:	003ff206 	br	802ede0 <_gp+0xfffed6d4>

0802ee18 <_fwalk_reent>:
 802ee18:	defff704 	addi	sp,sp,-36
 802ee1c:	dd000415 	stw	r20,16(sp)
 802ee20:	dfc00815 	stw	ra,32(sp)
 802ee24:	ddc00715 	stw	r23,28(sp)
 802ee28:	dd800615 	stw	r22,24(sp)
 802ee2c:	dd400515 	stw	r21,20(sp)
 802ee30:	dcc00315 	stw	r19,12(sp)
 802ee34:	dc800215 	stw	r18,8(sp)
 802ee38:	dc400115 	stw	r17,4(sp)
 802ee3c:	dc000015 	stw	r16,0(sp)
 802ee40:	2500b804 	addi	r20,r4,736
 802ee44:	a0002326 	beq	r20,zero,802eed4 <_fwalk_reent+0xbc>
 802ee48:	282b883a 	mov	r21,r5
 802ee4c:	2027883a 	mov	r19,r4
 802ee50:	002f883a 	mov	r23,zero
 802ee54:	05800044 	movi	r22,1
 802ee58:	04bfffc4 	movi	r18,-1
 802ee5c:	a4400117 	ldw	r17,4(r20)
 802ee60:	a4000217 	ldw	r16,8(r20)
 802ee64:	8c7fffc4 	addi	r17,r17,-1
 802ee68:	88000c16 	blt	r17,zero,802ee9c <_fwalk_reent+0x84>
 802ee6c:	84000304 	addi	r16,r16,12
 802ee70:	8080000b 	ldhu	r2,0(r16)
 802ee74:	8c7fffc4 	addi	r17,r17,-1
 802ee78:	817ffd04 	addi	r5,r16,-12
 802ee7c:	b080052e 	bgeu	r22,r2,802ee94 <_fwalk_reent+0x7c>
 802ee80:	8080008f 	ldh	r2,2(r16)
 802ee84:	9809883a 	mov	r4,r19
 802ee88:	14800226 	beq	r2,r18,802ee94 <_fwalk_reent+0x7c>
 802ee8c:	a83ee83a 	callr	r21
 802ee90:	b8aeb03a 	or	r23,r23,r2
 802ee94:	84001a04 	addi	r16,r16,104
 802ee98:	8cbff51e 	bne	r17,r18,802ee70 <_gp+0xfffed764>
 802ee9c:	a5000017 	ldw	r20,0(r20)
 802eea0:	a03fee1e 	bne	r20,zero,802ee5c <_gp+0xfffed750>
 802eea4:	b805883a 	mov	r2,r23
 802eea8:	dfc00817 	ldw	ra,32(sp)
 802eeac:	ddc00717 	ldw	r23,28(sp)
 802eeb0:	dd800617 	ldw	r22,24(sp)
 802eeb4:	dd400517 	ldw	r21,20(sp)
 802eeb8:	dd000417 	ldw	r20,16(sp)
 802eebc:	dcc00317 	ldw	r19,12(sp)
 802eec0:	dc800217 	ldw	r18,8(sp)
 802eec4:	dc400117 	ldw	r17,4(sp)
 802eec8:	dc000017 	ldw	r16,0(sp)
 802eecc:	dec00904 	addi	sp,sp,36
 802eed0:	f800283a 	ret
 802eed4:	002f883a 	mov	r23,zero
 802eed8:	003ff206 	br	802eea4 <_gp+0xfffed798>

0802eedc <_setlocale_r>:
 802eedc:	30001b26 	beq	r6,zero,802ef4c <_setlocale_r+0x70>
 802eee0:	014200f4 	movhi	r5,2051
 802eee4:	defffe04 	addi	sp,sp,-8
 802eee8:	295e4804 	addi	r5,r5,31008
 802eeec:	3009883a 	mov	r4,r6
 802eef0:	dc000015 	stw	r16,0(sp)
 802eef4:	dfc00115 	stw	ra,4(sp)
 802eef8:	3021883a 	mov	r16,r6
 802eefc:	8030b780 	call	8030b78 <strcmp>
 802ef00:	1000061e 	bne	r2,zero,802ef1c <_setlocale_r+0x40>
 802ef04:	008200f4 	movhi	r2,2051
 802ef08:	109e2904 	addi	r2,r2,30884
 802ef0c:	dfc00117 	ldw	ra,4(sp)
 802ef10:	dc000017 	ldw	r16,0(sp)
 802ef14:	dec00204 	addi	sp,sp,8
 802ef18:	f800283a 	ret
 802ef1c:	014200f4 	movhi	r5,2051
 802ef20:	295e2904 	addi	r5,r5,30884
 802ef24:	8009883a 	mov	r4,r16
 802ef28:	8030b780 	call	8030b78 <strcmp>
 802ef2c:	103ff526 	beq	r2,zero,802ef04 <_gp+0xfffed7f8>
 802ef30:	014200f4 	movhi	r5,2051
 802ef34:	295e3304 	addi	r5,r5,30924
 802ef38:	8009883a 	mov	r4,r16
 802ef3c:	8030b780 	call	8030b78 <strcmp>
 802ef40:	103ff026 	beq	r2,zero,802ef04 <_gp+0xfffed7f8>
 802ef44:	0005883a 	mov	r2,zero
 802ef48:	003ff006 	br	802ef0c <_gp+0xfffed800>
 802ef4c:	008200f4 	movhi	r2,2051
 802ef50:	109e2904 	addi	r2,r2,30884
 802ef54:	f800283a 	ret

0802ef58 <__locale_charset>:
 802ef58:	00820134 	movhi	r2,2052
 802ef5c:	10a0d204 	addi	r2,r2,-31928
 802ef60:	f800283a 	ret

0802ef64 <__locale_mb_cur_max>:
 802ef64:	00820134 	movhi	r2,2052
 802ef68:	10a5c804 	addi	r2,r2,-26848
 802ef6c:	10800017 	ldw	r2,0(r2)
 802ef70:	f800283a 	ret

0802ef74 <__locale_msgcharset>:
 802ef74:	00820134 	movhi	r2,2052
 802ef78:	10a0ca04 	addi	r2,r2,-31960
 802ef7c:	f800283a 	ret

0802ef80 <__locale_cjk_lang>:
 802ef80:	0005883a 	mov	r2,zero
 802ef84:	f800283a 	ret

0802ef88 <_localeconv_r>:
 802ef88:	00820134 	movhi	r2,2052
 802ef8c:	10a0da04 	addi	r2,r2,-31896
 802ef90:	f800283a 	ret

0802ef94 <setlocale>:
 802ef94:	00820134 	movhi	r2,2052
 802ef98:	10a5c504 	addi	r2,r2,-26860
 802ef9c:	280d883a 	mov	r6,r5
 802efa0:	200b883a 	mov	r5,r4
 802efa4:	11000017 	ldw	r4,0(r2)
 802efa8:	802eedc1 	jmpi	802eedc <_setlocale_r>

0802efac <localeconv>:
 802efac:	00820134 	movhi	r2,2052
 802efb0:	10a0da04 	addi	r2,r2,-31896
 802efb4:	f800283a 	ret

0802efb8 <__smakebuf_r>:
 802efb8:	2880030b 	ldhu	r2,12(r5)
 802efbc:	10c0008c 	andi	r3,r2,2
 802efc0:	1800411e 	bne	r3,zero,802f0c8 <__smakebuf_r+0x110>
 802efc4:	deffec04 	addi	sp,sp,-80
 802efc8:	dc000f15 	stw	r16,60(sp)
 802efcc:	2821883a 	mov	r16,r5
 802efd0:	2940038f 	ldh	r5,14(r5)
 802efd4:	dc401015 	stw	r17,64(sp)
 802efd8:	dfc01315 	stw	ra,76(sp)
 802efdc:	dcc01215 	stw	r19,72(sp)
 802efe0:	dc801115 	stw	r18,68(sp)
 802efe4:	2023883a 	mov	r17,r4
 802efe8:	28001c16 	blt	r5,zero,802f05c <__smakebuf_r+0xa4>
 802efec:	d80d883a 	mov	r6,sp
 802eff0:	80327200 	call	8032720 <_fstat_r>
 802eff4:	10001816 	blt	r2,zero,802f058 <__smakebuf_r+0xa0>
 802eff8:	d8800117 	ldw	r2,4(sp)
 802effc:	00e00014 	movui	r3,32768
 802f000:	10bc000c 	andi	r2,r2,61440
 802f004:	14c80020 	cmpeqi	r19,r2,8192
 802f008:	10c03726 	beq	r2,r3,802f0e8 <__smakebuf_r+0x130>
 802f00c:	80c0030b 	ldhu	r3,12(r16)
 802f010:	18c20014 	ori	r3,r3,2048
 802f014:	80c0030d 	sth	r3,12(r16)
 802f018:	00c80004 	movi	r3,8192
 802f01c:	10c0521e 	bne	r2,r3,802f168 <__smakebuf_r+0x1b0>
 802f020:	8140038f 	ldh	r5,14(r16)
 802f024:	8809883a 	mov	r4,r17
 802f028:	803277c0 	call	803277c <_isatty_r>
 802f02c:	10004c26 	beq	r2,zero,802f160 <__smakebuf_r+0x1a8>
 802f030:	8080030b 	ldhu	r2,12(r16)
 802f034:	80c010c4 	addi	r3,r16,67
 802f038:	80c00015 	stw	r3,0(r16)
 802f03c:	10800054 	ori	r2,r2,1
 802f040:	8080030d 	sth	r2,12(r16)
 802f044:	00800044 	movi	r2,1
 802f048:	80c00415 	stw	r3,16(r16)
 802f04c:	80800515 	stw	r2,20(r16)
 802f050:	04810004 	movi	r18,1024
 802f054:	00000706 	br	802f074 <__smakebuf_r+0xbc>
 802f058:	8080030b 	ldhu	r2,12(r16)
 802f05c:	10c0200c 	andi	r3,r2,128
 802f060:	18001f1e 	bne	r3,zero,802f0e0 <__smakebuf_r+0x128>
 802f064:	04810004 	movi	r18,1024
 802f068:	10820014 	ori	r2,r2,2048
 802f06c:	8080030d 	sth	r2,12(r16)
 802f070:	0027883a 	mov	r19,zero
 802f074:	900b883a 	mov	r5,r18
 802f078:	8809883a 	mov	r4,r17
 802f07c:	80294700 	call	8029470 <_malloc_r>
 802f080:	10002c26 	beq	r2,zero,802f134 <__smakebuf_r+0x17c>
 802f084:	80c0030b 	ldhu	r3,12(r16)
 802f088:	010200f4 	movhi	r4,2051
 802f08c:	21383304 	addi	r4,r4,-7988
 802f090:	89000f15 	stw	r4,60(r17)
 802f094:	18c02014 	ori	r3,r3,128
 802f098:	80c0030d 	sth	r3,12(r16)
 802f09c:	80800015 	stw	r2,0(r16)
 802f0a0:	80800415 	stw	r2,16(r16)
 802f0a4:	84800515 	stw	r18,20(r16)
 802f0a8:	98001a1e 	bne	r19,zero,802f114 <__smakebuf_r+0x15c>
 802f0ac:	dfc01317 	ldw	ra,76(sp)
 802f0b0:	dcc01217 	ldw	r19,72(sp)
 802f0b4:	dc801117 	ldw	r18,68(sp)
 802f0b8:	dc401017 	ldw	r17,64(sp)
 802f0bc:	dc000f17 	ldw	r16,60(sp)
 802f0c0:	dec01404 	addi	sp,sp,80
 802f0c4:	f800283a 	ret
 802f0c8:	288010c4 	addi	r2,r5,67
 802f0cc:	28800015 	stw	r2,0(r5)
 802f0d0:	28800415 	stw	r2,16(r5)
 802f0d4:	00800044 	movi	r2,1
 802f0d8:	28800515 	stw	r2,20(r5)
 802f0dc:	f800283a 	ret
 802f0e0:	04801004 	movi	r18,64
 802f0e4:	003fe006 	br	802f068 <_gp+0xfffed95c>
 802f0e8:	81000a17 	ldw	r4,40(r16)
 802f0ec:	00c200f4 	movhi	r3,2051
 802f0f0:	18c2c504 	addi	r3,r3,2836
 802f0f4:	20ffc51e 	bne	r4,r3,802f00c <_gp+0xfffed900>
 802f0f8:	8080030b 	ldhu	r2,12(r16)
 802f0fc:	04810004 	movi	r18,1024
 802f100:	84801315 	stw	r18,76(r16)
 802f104:	1484b03a 	or	r2,r2,r18
 802f108:	8080030d 	sth	r2,12(r16)
 802f10c:	0027883a 	mov	r19,zero
 802f110:	003fd806 	br	802f074 <_gp+0xfffed968>
 802f114:	8140038f 	ldh	r5,14(r16)
 802f118:	8809883a 	mov	r4,r17
 802f11c:	803277c0 	call	803277c <_isatty_r>
 802f120:	103fe226 	beq	r2,zero,802f0ac <_gp+0xfffed9a0>
 802f124:	8080030b 	ldhu	r2,12(r16)
 802f128:	10800054 	ori	r2,r2,1
 802f12c:	8080030d 	sth	r2,12(r16)
 802f130:	003fde06 	br	802f0ac <_gp+0xfffed9a0>
 802f134:	8080030b 	ldhu	r2,12(r16)
 802f138:	10c0800c 	andi	r3,r2,512
 802f13c:	183fdb1e 	bne	r3,zero,802f0ac <_gp+0xfffed9a0>
 802f140:	10800094 	ori	r2,r2,2
 802f144:	80c010c4 	addi	r3,r16,67
 802f148:	8080030d 	sth	r2,12(r16)
 802f14c:	00800044 	movi	r2,1
 802f150:	80c00015 	stw	r3,0(r16)
 802f154:	80c00415 	stw	r3,16(r16)
 802f158:	80800515 	stw	r2,20(r16)
 802f15c:	003fd306 	br	802f0ac <_gp+0xfffed9a0>
 802f160:	04810004 	movi	r18,1024
 802f164:	003fc306 	br	802f074 <_gp+0xfffed968>
 802f168:	0027883a 	mov	r19,zero
 802f16c:	04810004 	movi	r18,1024
 802f170:	003fc006 	br	802f074 <_gp+0xfffed968>

0802f174 <memchr>:
 802f174:	208000cc 	andi	r2,r4,3
 802f178:	280f883a 	mov	r7,r5
 802f17c:	10003426 	beq	r2,zero,802f250 <memchr+0xdc>
 802f180:	30bfffc4 	addi	r2,r6,-1
 802f184:	30001a26 	beq	r6,zero,802f1f0 <memchr+0x7c>
 802f188:	20c00003 	ldbu	r3,0(r4)
 802f18c:	29803fcc 	andi	r6,r5,255
 802f190:	30c0051e 	bne	r6,r3,802f1a8 <memchr+0x34>
 802f194:	00001806 	br	802f1f8 <memchr+0x84>
 802f198:	10001526 	beq	r2,zero,802f1f0 <memchr+0x7c>
 802f19c:	20c00003 	ldbu	r3,0(r4)
 802f1a0:	10bfffc4 	addi	r2,r2,-1
 802f1a4:	30c01426 	beq	r6,r3,802f1f8 <memchr+0x84>
 802f1a8:	21000044 	addi	r4,r4,1
 802f1ac:	20c000cc 	andi	r3,r4,3
 802f1b0:	183ff91e 	bne	r3,zero,802f198 <_gp+0xfffeda8c>
 802f1b4:	020000c4 	movi	r8,3
 802f1b8:	40801136 	bltu	r8,r2,802f200 <memchr+0x8c>
 802f1bc:	10000c26 	beq	r2,zero,802f1f0 <memchr+0x7c>
 802f1c0:	20c00003 	ldbu	r3,0(r4)
 802f1c4:	29403fcc 	andi	r5,r5,255
 802f1c8:	28c00b26 	beq	r5,r3,802f1f8 <memchr+0x84>
 802f1cc:	20c00044 	addi	r3,r4,1
 802f1d0:	39803fcc 	andi	r6,r7,255
 802f1d4:	2089883a 	add	r4,r4,r2
 802f1d8:	00000306 	br	802f1e8 <memchr+0x74>
 802f1dc:	18c00044 	addi	r3,r3,1
 802f1e0:	197fffc3 	ldbu	r5,-1(r3)
 802f1e4:	31400526 	beq	r6,r5,802f1fc <memchr+0x88>
 802f1e8:	1805883a 	mov	r2,r3
 802f1ec:	20fffb1e 	bne	r4,r3,802f1dc <_gp+0xfffedad0>
 802f1f0:	0005883a 	mov	r2,zero
 802f1f4:	f800283a 	ret
 802f1f8:	2005883a 	mov	r2,r4
 802f1fc:	f800283a 	ret
 802f200:	28c03fcc 	andi	r3,r5,255
 802f204:	1812923a 	slli	r9,r3,8
 802f208:	02ffbff4 	movhi	r11,65279
 802f20c:	02a02074 	movhi	r10,32897
 802f210:	48d2b03a 	or	r9,r9,r3
 802f214:	4806943a 	slli	r3,r9,16
 802f218:	5affbfc4 	addi	r11,r11,-257
 802f21c:	52a02004 	addi	r10,r10,-32640
 802f220:	48d2b03a 	or	r9,r9,r3
 802f224:	20c00017 	ldw	r3,0(r4)
 802f228:	48c6f03a 	xor	r3,r9,r3
 802f22c:	1acd883a 	add	r6,r3,r11
 802f230:	00c6303a 	nor	r3,zero,r3
 802f234:	30c6703a 	and	r3,r6,r3
 802f238:	1a86703a 	and	r3,r3,r10
 802f23c:	183fe01e 	bne	r3,zero,802f1c0 <_gp+0xfffedab4>
 802f240:	10bfff04 	addi	r2,r2,-4
 802f244:	21000104 	addi	r4,r4,4
 802f248:	40bff636 	bltu	r8,r2,802f224 <_gp+0xfffedb18>
 802f24c:	003fdb06 	br	802f1bc <_gp+0xfffedab0>
 802f250:	3005883a 	mov	r2,r6
 802f254:	003fd706 	br	802f1b4 <_gp+0xfffedaa8>

0802f258 <memmove>:
 802f258:	2005883a 	mov	r2,r4
 802f25c:	29000b2e 	bgeu	r5,r4,802f28c <memmove+0x34>
 802f260:	298f883a 	add	r7,r5,r6
 802f264:	21c0092e 	bgeu	r4,r7,802f28c <memmove+0x34>
 802f268:	2187883a 	add	r3,r4,r6
 802f26c:	198bc83a 	sub	r5,r3,r6
 802f270:	30004826 	beq	r6,zero,802f394 <memmove+0x13c>
 802f274:	39ffffc4 	addi	r7,r7,-1
 802f278:	39000003 	ldbu	r4,0(r7)
 802f27c:	18ffffc4 	addi	r3,r3,-1
 802f280:	19000005 	stb	r4,0(r3)
 802f284:	28fffb1e 	bne	r5,r3,802f274 <_gp+0xfffedb68>
 802f288:	f800283a 	ret
 802f28c:	00c003c4 	movi	r3,15
 802f290:	1980412e 	bgeu	r3,r6,802f398 <memmove+0x140>
 802f294:	2886b03a 	or	r3,r5,r2
 802f298:	18c000cc 	andi	r3,r3,3
 802f29c:	1800401e 	bne	r3,zero,802f3a0 <memmove+0x148>
 802f2a0:	33fffc04 	addi	r15,r6,-16
 802f2a4:	781ed13a 	srli	r15,r15,4
 802f2a8:	28c00104 	addi	r3,r5,4
 802f2ac:	13400104 	addi	r13,r2,4
 802f2b0:	781c913a 	slli	r14,r15,4
 802f2b4:	2b000204 	addi	r12,r5,8
 802f2b8:	12c00204 	addi	r11,r2,8
 802f2bc:	73800504 	addi	r14,r14,20
 802f2c0:	2a800304 	addi	r10,r5,12
 802f2c4:	12400304 	addi	r9,r2,12
 802f2c8:	2b9d883a 	add	r14,r5,r14
 802f2cc:	2811883a 	mov	r8,r5
 802f2d0:	100f883a 	mov	r7,r2
 802f2d4:	41000017 	ldw	r4,0(r8)
 802f2d8:	39c00404 	addi	r7,r7,16
 802f2dc:	18c00404 	addi	r3,r3,16
 802f2e0:	393ffc15 	stw	r4,-16(r7)
 802f2e4:	193ffc17 	ldw	r4,-16(r3)
 802f2e8:	6b400404 	addi	r13,r13,16
 802f2ec:	5ac00404 	addi	r11,r11,16
 802f2f0:	693ffc15 	stw	r4,-16(r13)
 802f2f4:	61000017 	ldw	r4,0(r12)
 802f2f8:	4a400404 	addi	r9,r9,16
 802f2fc:	42000404 	addi	r8,r8,16
 802f300:	593ffc15 	stw	r4,-16(r11)
 802f304:	51000017 	ldw	r4,0(r10)
 802f308:	63000404 	addi	r12,r12,16
 802f30c:	52800404 	addi	r10,r10,16
 802f310:	493ffc15 	stw	r4,-16(r9)
 802f314:	1bbfef1e 	bne	r3,r14,802f2d4 <_gp+0xfffedbc8>
 802f318:	79000044 	addi	r4,r15,1
 802f31c:	2008913a 	slli	r4,r4,4
 802f320:	328003cc 	andi	r10,r6,15
 802f324:	02c000c4 	movi	r11,3
 802f328:	1107883a 	add	r3,r2,r4
 802f32c:	290b883a 	add	r5,r5,r4
 802f330:	5a801e2e 	bgeu	r11,r10,802f3ac <memmove+0x154>
 802f334:	1813883a 	mov	r9,r3
 802f338:	2811883a 	mov	r8,r5
 802f33c:	500f883a 	mov	r7,r10
 802f340:	41000017 	ldw	r4,0(r8)
 802f344:	4a400104 	addi	r9,r9,4
 802f348:	39ffff04 	addi	r7,r7,-4
 802f34c:	493fff15 	stw	r4,-4(r9)
 802f350:	42000104 	addi	r8,r8,4
 802f354:	59fffa36 	bltu	r11,r7,802f340 <_gp+0xfffedc34>
 802f358:	513fff04 	addi	r4,r10,-4
 802f35c:	2008d0ba 	srli	r4,r4,2
 802f360:	318000cc 	andi	r6,r6,3
 802f364:	21000044 	addi	r4,r4,1
 802f368:	2109883a 	add	r4,r4,r4
 802f36c:	2109883a 	add	r4,r4,r4
 802f370:	1907883a 	add	r3,r3,r4
 802f374:	290b883a 	add	r5,r5,r4
 802f378:	30000b26 	beq	r6,zero,802f3a8 <memmove+0x150>
 802f37c:	198d883a 	add	r6,r3,r6
 802f380:	29c00003 	ldbu	r7,0(r5)
 802f384:	18c00044 	addi	r3,r3,1
 802f388:	29400044 	addi	r5,r5,1
 802f38c:	19ffffc5 	stb	r7,-1(r3)
 802f390:	19bffb1e 	bne	r3,r6,802f380 <_gp+0xfffedc74>
 802f394:	f800283a 	ret
 802f398:	1007883a 	mov	r3,r2
 802f39c:	003ff606 	br	802f378 <_gp+0xfffedc6c>
 802f3a0:	1007883a 	mov	r3,r2
 802f3a4:	003ff506 	br	802f37c <_gp+0xfffedc70>
 802f3a8:	f800283a 	ret
 802f3ac:	500d883a 	mov	r6,r10
 802f3b0:	003ff106 	br	802f378 <_gp+0xfffedc6c>

0802f3b4 <memset>:
 802f3b4:	20c000cc 	andi	r3,r4,3
 802f3b8:	2005883a 	mov	r2,r4
 802f3bc:	18004426 	beq	r3,zero,802f4d0 <memset+0x11c>
 802f3c0:	31ffffc4 	addi	r7,r6,-1
 802f3c4:	30004026 	beq	r6,zero,802f4c8 <memset+0x114>
 802f3c8:	2813883a 	mov	r9,r5
 802f3cc:	200d883a 	mov	r6,r4
 802f3d0:	2007883a 	mov	r3,r4
 802f3d4:	00000406 	br	802f3e8 <memset+0x34>
 802f3d8:	3a3fffc4 	addi	r8,r7,-1
 802f3dc:	31800044 	addi	r6,r6,1
 802f3e0:	38003926 	beq	r7,zero,802f4c8 <memset+0x114>
 802f3e4:	400f883a 	mov	r7,r8
 802f3e8:	18c00044 	addi	r3,r3,1
 802f3ec:	32400005 	stb	r9,0(r6)
 802f3f0:	1a0000cc 	andi	r8,r3,3
 802f3f4:	403ff81e 	bne	r8,zero,802f3d8 <_gp+0xfffedccc>
 802f3f8:	010000c4 	movi	r4,3
 802f3fc:	21c02d2e 	bgeu	r4,r7,802f4b4 <memset+0x100>
 802f400:	29003fcc 	andi	r4,r5,255
 802f404:	200c923a 	slli	r6,r4,8
 802f408:	3108b03a 	or	r4,r6,r4
 802f40c:	200c943a 	slli	r6,r4,16
 802f410:	218cb03a 	or	r6,r4,r6
 802f414:	010003c4 	movi	r4,15
 802f418:	21c0182e 	bgeu	r4,r7,802f47c <memset+0xc8>
 802f41c:	3b3ffc04 	addi	r12,r7,-16
 802f420:	6018d13a 	srli	r12,r12,4
 802f424:	1a000104 	addi	r8,r3,4
 802f428:	1ac00204 	addi	r11,r3,8
 802f42c:	6008913a 	slli	r4,r12,4
 802f430:	1a800304 	addi	r10,r3,12
 802f434:	1813883a 	mov	r9,r3
 802f438:	21000504 	addi	r4,r4,20
 802f43c:	1909883a 	add	r4,r3,r4
 802f440:	49800015 	stw	r6,0(r9)
 802f444:	41800015 	stw	r6,0(r8)
 802f448:	59800015 	stw	r6,0(r11)
 802f44c:	51800015 	stw	r6,0(r10)
 802f450:	42000404 	addi	r8,r8,16
 802f454:	4a400404 	addi	r9,r9,16
 802f458:	5ac00404 	addi	r11,r11,16
 802f45c:	52800404 	addi	r10,r10,16
 802f460:	413ff71e 	bne	r8,r4,802f440 <_gp+0xfffedd34>
 802f464:	63000044 	addi	r12,r12,1
 802f468:	6018913a 	slli	r12,r12,4
 802f46c:	39c003cc 	andi	r7,r7,15
 802f470:	010000c4 	movi	r4,3
 802f474:	1b07883a 	add	r3,r3,r12
 802f478:	21c00e2e 	bgeu	r4,r7,802f4b4 <memset+0x100>
 802f47c:	1813883a 	mov	r9,r3
 802f480:	3811883a 	mov	r8,r7
 802f484:	010000c4 	movi	r4,3
 802f488:	49800015 	stw	r6,0(r9)
 802f48c:	423fff04 	addi	r8,r8,-4
 802f490:	4a400104 	addi	r9,r9,4
 802f494:	223ffc36 	bltu	r4,r8,802f488 <_gp+0xfffedd7c>
 802f498:	393fff04 	addi	r4,r7,-4
 802f49c:	2008d0ba 	srli	r4,r4,2
 802f4a0:	39c000cc 	andi	r7,r7,3
 802f4a4:	21000044 	addi	r4,r4,1
 802f4a8:	2109883a 	add	r4,r4,r4
 802f4ac:	2109883a 	add	r4,r4,r4
 802f4b0:	1907883a 	add	r3,r3,r4
 802f4b4:	38000526 	beq	r7,zero,802f4cc <memset+0x118>
 802f4b8:	19cf883a 	add	r7,r3,r7
 802f4bc:	19400005 	stb	r5,0(r3)
 802f4c0:	18c00044 	addi	r3,r3,1
 802f4c4:	38fffd1e 	bne	r7,r3,802f4bc <_gp+0xfffeddb0>
 802f4c8:	f800283a 	ret
 802f4cc:	f800283a 	ret
 802f4d0:	2007883a 	mov	r3,r4
 802f4d4:	300f883a 	mov	r7,r6
 802f4d8:	003fc706 	br	802f3f8 <_gp+0xfffedcec>

0802f4dc <_Balloc>:
 802f4dc:	20801317 	ldw	r2,76(r4)
 802f4e0:	defffc04 	addi	sp,sp,-16
 802f4e4:	dc400115 	stw	r17,4(sp)
 802f4e8:	dc000015 	stw	r16,0(sp)
 802f4ec:	dfc00315 	stw	ra,12(sp)
 802f4f0:	dc800215 	stw	r18,8(sp)
 802f4f4:	2023883a 	mov	r17,r4
 802f4f8:	2821883a 	mov	r16,r5
 802f4fc:	10000f26 	beq	r2,zero,802f53c <_Balloc+0x60>
 802f500:	8407883a 	add	r3,r16,r16
 802f504:	18c7883a 	add	r3,r3,r3
 802f508:	10c7883a 	add	r3,r2,r3
 802f50c:	18800017 	ldw	r2,0(r3)
 802f510:	10001126 	beq	r2,zero,802f558 <_Balloc+0x7c>
 802f514:	11000017 	ldw	r4,0(r2)
 802f518:	19000015 	stw	r4,0(r3)
 802f51c:	10000415 	stw	zero,16(r2)
 802f520:	10000315 	stw	zero,12(r2)
 802f524:	dfc00317 	ldw	ra,12(sp)
 802f528:	dc800217 	ldw	r18,8(sp)
 802f52c:	dc400117 	ldw	r17,4(sp)
 802f530:	dc000017 	ldw	r16,0(sp)
 802f534:	dec00404 	addi	sp,sp,16
 802f538:	f800283a 	ret
 802f53c:	01800844 	movi	r6,33
 802f540:	01400104 	movi	r5,4
 802f544:	80323500 	call	8032350 <_calloc_r>
 802f548:	88801315 	stw	r2,76(r17)
 802f54c:	103fec1e 	bne	r2,zero,802f500 <_gp+0xfffeddf4>
 802f550:	0005883a 	mov	r2,zero
 802f554:	003ff306 	br	802f524 <_gp+0xfffede18>
 802f558:	01400044 	movi	r5,1
 802f55c:	2c24983a 	sll	r18,r5,r16
 802f560:	8809883a 	mov	r4,r17
 802f564:	91800144 	addi	r6,r18,5
 802f568:	318d883a 	add	r6,r6,r6
 802f56c:	318d883a 	add	r6,r6,r6
 802f570:	80323500 	call	8032350 <_calloc_r>
 802f574:	103ff626 	beq	r2,zero,802f550 <_gp+0xfffede44>
 802f578:	14000115 	stw	r16,4(r2)
 802f57c:	14800215 	stw	r18,8(r2)
 802f580:	003fe606 	br	802f51c <_gp+0xfffede10>

0802f584 <_Bfree>:
 802f584:	28000826 	beq	r5,zero,802f5a8 <_Bfree+0x24>
 802f588:	28c00117 	ldw	r3,4(r5)
 802f58c:	20801317 	ldw	r2,76(r4)
 802f590:	18c7883a 	add	r3,r3,r3
 802f594:	18c7883a 	add	r3,r3,r3
 802f598:	10c5883a 	add	r2,r2,r3
 802f59c:	10c00017 	ldw	r3,0(r2)
 802f5a0:	28c00015 	stw	r3,0(r5)
 802f5a4:	11400015 	stw	r5,0(r2)
 802f5a8:	f800283a 	ret

0802f5ac <__multadd>:
 802f5ac:	defffa04 	addi	sp,sp,-24
 802f5b0:	dc800315 	stw	r18,12(sp)
 802f5b4:	dc400215 	stw	r17,8(sp)
 802f5b8:	dc000115 	stw	r16,4(sp)
 802f5bc:	2823883a 	mov	r17,r5
 802f5c0:	2c000417 	ldw	r16,16(r5)
 802f5c4:	dfc00515 	stw	ra,20(sp)
 802f5c8:	dcc00415 	stw	r19,16(sp)
 802f5cc:	2025883a 	mov	r18,r4
 802f5d0:	29400504 	addi	r5,r5,20
 802f5d4:	0011883a 	mov	r8,zero
 802f5d8:	28c00017 	ldw	r3,0(r5)
 802f5dc:	29400104 	addi	r5,r5,4
 802f5e0:	42000044 	addi	r8,r8,1
 802f5e4:	18bfffcc 	andi	r2,r3,65535
 802f5e8:	1185383a 	mul	r2,r2,r6
 802f5ec:	1806d43a 	srli	r3,r3,16
 802f5f0:	11cf883a 	add	r7,r2,r7
 802f5f4:	3808d43a 	srli	r4,r7,16
 802f5f8:	1987383a 	mul	r3,r3,r6
 802f5fc:	38bfffcc 	andi	r2,r7,65535
 802f600:	1907883a 	add	r3,r3,r4
 802f604:	1808943a 	slli	r4,r3,16
 802f608:	180ed43a 	srli	r7,r3,16
 802f60c:	2085883a 	add	r2,r4,r2
 802f610:	28bfff15 	stw	r2,-4(r5)
 802f614:	443ff016 	blt	r8,r16,802f5d8 <_gp+0xfffedecc>
 802f618:	38000926 	beq	r7,zero,802f640 <__multadd+0x94>
 802f61c:	88800217 	ldw	r2,8(r17)
 802f620:	80800f0e 	bge	r16,r2,802f660 <__multadd+0xb4>
 802f624:	80800144 	addi	r2,r16,5
 802f628:	1085883a 	add	r2,r2,r2
 802f62c:	1085883a 	add	r2,r2,r2
 802f630:	8885883a 	add	r2,r17,r2
 802f634:	11c00015 	stw	r7,0(r2)
 802f638:	84000044 	addi	r16,r16,1
 802f63c:	8c000415 	stw	r16,16(r17)
 802f640:	8805883a 	mov	r2,r17
 802f644:	dfc00517 	ldw	ra,20(sp)
 802f648:	dcc00417 	ldw	r19,16(sp)
 802f64c:	dc800317 	ldw	r18,12(sp)
 802f650:	dc400217 	ldw	r17,8(sp)
 802f654:	dc000117 	ldw	r16,4(sp)
 802f658:	dec00604 	addi	sp,sp,24
 802f65c:	f800283a 	ret
 802f660:	89400117 	ldw	r5,4(r17)
 802f664:	9009883a 	mov	r4,r18
 802f668:	d9c00015 	stw	r7,0(sp)
 802f66c:	29400044 	addi	r5,r5,1
 802f670:	802f4dc0 	call	802f4dc <_Balloc>
 802f674:	89800417 	ldw	r6,16(r17)
 802f678:	89400304 	addi	r5,r17,12
 802f67c:	11000304 	addi	r4,r2,12
 802f680:	31800084 	addi	r6,r6,2
 802f684:	318d883a 	add	r6,r6,r6
 802f688:	318d883a 	add	r6,r6,r6
 802f68c:	1027883a 	mov	r19,r2
 802f690:	8029c7c0 	call	8029c7c <memcpy>
 802f694:	d9c00017 	ldw	r7,0(sp)
 802f698:	88000a26 	beq	r17,zero,802f6c4 <__multadd+0x118>
 802f69c:	88c00117 	ldw	r3,4(r17)
 802f6a0:	90801317 	ldw	r2,76(r18)
 802f6a4:	18c7883a 	add	r3,r3,r3
 802f6a8:	18c7883a 	add	r3,r3,r3
 802f6ac:	10c5883a 	add	r2,r2,r3
 802f6b0:	10c00017 	ldw	r3,0(r2)
 802f6b4:	88c00015 	stw	r3,0(r17)
 802f6b8:	14400015 	stw	r17,0(r2)
 802f6bc:	9823883a 	mov	r17,r19
 802f6c0:	003fd806 	br	802f624 <_gp+0xfffedf18>
 802f6c4:	9823883a 	mov	r17,r19
 802f6c8:	003fd606 	br	802f624 <_gp+0xfffedf18>

0802f6cc <__s2b>:
 802f6cc:	defff904 	addi	sp,sp,-28
 802f6d0:	dc400115 	stw	r17,4(sp)
 802f6d4:	dc000015 	stw	r16,0(sp)
 802f6d8:	2023883a 	mov	r17,r4
 802f6dc:	2821883a 	mov	r16,r5
 802f6e0:	39000204 	addi	r4,r7,8
 802f6e4:	01400244 	movi	r5,9
 802f6e8:	dcc00315 	stw	r19,12(sp)
 802f6ec:	dc800215 	stw	r18,8(sp)
 802f6f0:	dfc00615 	stw	ra,24(sp)
 802f6f4:	dd400515 	stw	r21,20(sp)
 802f6f8:	dd000415 	stw	r20,16(sp)
 802f6fc:	3825883a 	mov	r18,r7
 802f700:	3027883a 	mov	r19,r6
 802f704:	80259f00 	call	80259f0 <__divsi3>
 802f708:	00c00044 	movi	r3,1
 802f70c:	000b883a 	mov	r5,zero
 802f710:	1880030e 	bge	r3,r2,802f720 <__s2b+0x54>
 802f714:	18c7883a 	add	r3,r3,r3
 802f718:	29400044 	addi	r5,r5,1
 802f71c:	18bffd16 	blt	r3,r2,802f714 <_gp+0xfffee008>
 802f720:	8809883a 	mov	r4,r17
 802f724:	802f4dc0 	call	802f4dc <_Balloc>
 802f728:	d8c00717 	ldw	r3,28(sp)
 802f72c:	10c00515 	stw	r3,20(r2)
 802f730:	00c00044 	movi	r3,1
 802f734:	10c00415 	stw	r3,16(r2)
 802f738:	00c00244 	movi	r3,9
 802f73c:	1cc0210e 	bge	r3,r19,802f7c4 <__s2b+0xf8>
 802f740:	80eb883a 	add	r21,r16,r3
 802f744:	a829883a 	mov	r20,r21
 802f748:	84e1883a 	add	r16,r16,r19
 802f74c:	a1c00007 	ldb	r7,0(r20)
 802f750:	01800284 	movi	r6,10
 802f754:	a5000044 	addi	r20,r20,1
 802f758:	100b883a 	mov	r5,r2
 802f75c:	39fff404 	addi	r7,r7,-48
 802f760:	8809883a 	mov	r4,r17
 802f764:	802f5ac0 	call	802f5ac <__multadd>
 802f768:	a43ff81e 	bne	r20,r16,802f74c <_gp+0xfffee040>
 802f76c:	ace1883a 	add	r16,r21,r19
 802f770:	843ffe04 	addi	r16,r16,-8
 802f774:	9c800a0e 	bge	r19,r18,802f7a0 <__s2b+0xd4>
 802f778:	94e5c83a 	sub	r18,r18,r19
 802f77c:	84a5883a 	add	r18,r16,r18
 802f780:	81c00007 	ldb	r7,0(r16)
 802f784:	01800284 	movi	r6,10
 802f788:	84000044 	addi	r16,r16,1
 802f78c:	100b883a 	mov	r5,r2
 802f790:	39fff404 	addi	r7,r7,-48
 802f794:	8809883a 	mov	r4,r17
 802f798:	802f5ac0 	call	802f5ac <__multadd>
 802f79c:	84bff81e 	bne	r16,r18,802f780 <_gp+0xfffee074>
 802f7a0:	dfc00617 	ldw	ra,24(sp)
 802f7a4:	dd400517 	ldw	r21,20(sp)
 802f7a8:	dd000417 	ldw	r20,16(sp)
 802f7ac:	dcc00317 	ldw	r19,12(sp)
 802f7b0:	dc800217 	ldw	r18,8(sp)
 802f7b4:	dc400117 	ldw	r17,4(sp)
 802f7b8:	dc000017 	ldw	r16,0(sp)
 802f7bc:	dec00704 	addi	sp,sp,28
 802f7c0:	f800283a 	ret
 802f7c4:	84000284 	addi	r16,r16,10
 802f7c8:	1827883a 	mov	r19,r3
 802f7cc:	003fe906 	br	802f774 <_gp+0xfffee068>

0802f7d0 <__hi0bits>:
 802f7d0:	20bfffec 	andhi	r2,r4,65535
 802f7d4:	1000141e 	bne	r2,zero,802f828 <__hi0bits+0x58>
 802f7d8:	2008943a 	slli	r4,r4,16
 802f7dc:	00800404 	movi	r2,16
 802f7e0:	20ffc02c 	andhi	r3,r4,65280
 802f7e4:	1800021e 	bne	r3,zero,802f7f0 <__hi0bits+0x20>
 802f7e8:	2008923a 	slli	r4,r4,8
 802f7ec:	10800204 	addi	r2,r2,8
 802f7f0:	20fc002c 	andhi	r3,r4,61440
 802f7f4:	1800021e 	bne	r3,zero,802f800 <__hi0bits+0x30>
 802f7f8:	2008913a 	slli	r4,r4,4
 802f7fc:	10800104 	addi	r2,r2,4
 802f800:	20f0002c 	andhi	r3,r4,49152
 802f804:	1800031e 	bne	r3,zero,802f814 <__hi0bits+0x44>
 802f808:	2109883a 	add	r4,r4,r4
 802f80c:	10800084 	addi	r2,r2,2
 802f810:	2109883a 	add	r4,r4,r4
 802f814:	20000316 	blt	r4,zero,802f824 <__hi0bits+0x54>
 802f818:	2110002c 	andhi	r4,r4,16384
 802f81c:	2000041e 	bne	r4,zero,802f830 <__hi0bits+0x60>
 802f820:	00800804 	movi	r2,32
 802f824:	f800283a 	ret
 802f828:	0005883a 	mov	r2,zero
 802f82c:	003fec06 	br	802f7e0 <_gp+0xfffee0d4>
 802f830:	10800044 	addi	r2,r2,1
 802f834:	f800283a 	ret

0802f838 <__lo0bits>:
 802f838:	20c00017 	ldw	r3,0(r4)
 802f83c:	188001cc 	andi	r2,r3,7
 802f840:	10000826 	beq	r2,zero,802f864 <__lo0bits+0x2c>
 802f844:	1880004c 	andi	r2,r3,1
 802f848:	1000211e 	bne	r2,zero,802f8d0 <__lo0bits+0x98>
 802f84c:	1880008c 	andi	r2,r3,2
 802f850:	1000211e 	bne	r2,zero,802f8d8 <__lo0bits+0xa0>
 802f854:	1806d0ba 	srli	r3,r3,2
 802f858:	00800084 	movi	r2,2
 802f85c:	20c00015 	stw	r3,0(r4)
 802f860:	f800283a 	ret
 802f864:	18bfffcc 	andi	r2,r3,65535
 802f868:	10001326 	beq	r2,zero,802f8b8 <__lo0bits+0x80>
 802f86c:	0005883a 	mov	r2,zero
 802f870:	19403fcc 	andi	r5,r3,255
 802f874:	2800021e 	bne	r5,zero,802f880 <__lo0bits+0x48>
 802f878:	1806d23a 	srli	r3,r3,8
 802f87c:	10800204 	addi	r2,r2,8
 802f880:	194003cc 	andi	r5,r3,15
 802f884:	2800021e 	bne	r5,zero,802f890 <__lo0bits+0x58>
 802f888:	1806d13a 	srli	r3,r3,4
 802f88c:	10800104 	addi	r2,r2,4
 802f890:	194000cc 	andi	r5,r3,3
 802f894:	2800021e 	bne	r5,zero,802f8a0 <__lo0bits+0x68>
 802f898:	1806d0ba 	srli	r3,r3,2
 802f89c:	10800084 	addi	r2,r2,2
 802f8a0:	1940004c 	andi	r5,r3,1
 802f8a4:	2800081e 	bne	r5,zero,802f8c8 <__lo0bits+0x90>
 802f8a8:	1806d07a 	srli	r3,r3,1
 802f8ac:	1800051e 	bne	r3,zero,802f8c4 <__lo0bits+0x8c>
 802f8b0:	00800804 	movi	r2,32
 802f8b4:	f800283a 	ret
 802f8b8:	1806d43a 	srli	r3,r3,16
 802f8bc:	00800404 	movi	r2,16
 802f8c0:	003feb06 	br	802f870 <_gp+0xfffee164>
 802f8c4:	10800044 	addi	r2,r2,1
 802f8c8:	20c00015 	stw	r3,0(r4)
 802f8cc:	f800283a 	ret
 802f8d0:	0005883a 	mov	r2,zero
 802f8d4:	f800283a 	ret
 802f8d8:	1806d07a 	srli	r3,r3,1
 802f8dc:	00800044 	movi	r2,1
 802f8e0:	20c00015 	stw	r3,0(r4)
 802f8e4:	f800283a 	ret

0802f8e8 <__i2b>:
 802f8e8:	defffd04 	addi	sp,sp,-12
 802f8ec:	dc000015 	stw	r16,0(sp)
 802f8f0:	04000044 	movi	r16,1
 802f8f4:	dc400115 	stw	r17,4(sp)
 802f8f8:	2823883a 	mov	r17,r5
 802f8fc:	800b883a 	mov	r5,r16
 802f900:	dfc00215 	stw	ra,8(sp)
 802f904:	802f4dc0 	call	802f4dc <_Balloc>
 802f908:	14400515 	stw	r17,20(r2)
 802f90c:	14000415 	stw	r16,16(r2)
 802f910:	dfc00217 	ldw	ra,8(sp)
 802f914:	dc400117 	ldw	r17,4(sp)
 802f918:	dc000017 	ldw	r16,0(sp)
 802f91c:	dec00304 	addi	sp,sp,12
 802f920:	f800283a 	ret

0802f924 <__multiply>:
 802f924:	defffa04 	addi	sp,sp,-24
 802f928:	dcc00315 	stw	r19,12(sp)
 802f92c:	dc800215 	stw	r18,8(sp)
 802f930:	34c00417 	ldw	r19,16(r6)
 802f934:	2c800417 	ldw	r18,16(r5)
 802f938:	dd000415 	stw	r20,16(sp)
 802f93c:	dc400115 	stw	r17,4(sp)
 802f940:	dfc00515 	stw	ra,20(sp)
 802f944:	dc000015 	stw	r16,0(sp)
 802f948:	2829883a 	mov	r20,r5
 802f94c:	3023883a 	mov	r17,r6
 802f950:	94c0050e 	bge	r18,r19,802f968 <__multiply+0x44>
 802f954:	9007883a 	mov	r3,r18
 802f958:	3029883a 	mov	r20,r6
 802f95c:	9825883a 	mov	r18,r19
 802f960:	2823883a 	mov	r17,r5
 802f964:	1827883a 	mov	r19,r3
 802f968:	a0800217 	ldw	r2,8(r20)
 802f96c:	94e1883a 	add	r16,r18,r19
 802f970:	a1400117 	ldw	r5,4(r20)
 802f974:	1400010e 	bge	r2,r16,802f97c <__multiply+0x58>
 802f978:	29400044 	addi	r5,r5,1
 802f97c:	802f4dc0 	call	802f4dc <_Balloc>
 802f980:	8415883a 	add	r10,r16,r16
 802f984:	12c00504 	addi	r11,r2,20
 802f988:	5295883a 	add	r10,r10,r10
 802f98c:	5a95883a 	add	r10,r11,r10
 802f990:	5807883a 	mov	r3,r11
 802f994:	5a80032e 	bgeu	r11,r10,802f9a4 <__multiply+0x80>
 802f998:	18000015 	stw	zero,0(r3)
 802f99c:	18c00104 	addi	r3,r3,4
 802f9a0:	1abffd36 	bltu	r3,r10,802f998 <_gp+0xfffee28c>
 802f9a4:	9ce7883a 	add	r19,r19,r19
 802f9a8:	94a5883a 	add	r18,r18,r18
 802f9ac:	89800504 	addi	r6,r17,20
 802f9b0:	9ce7883a 	add	r19,r19,r19
 802f9b4:	a3400504 	addi	r13,r20,20
 802f9b8:	94a5883a 	add	r18,r18,r18
 802f9bc:	34d9883a 	add	r12,r6,r19
 802f9c0:	6c93883a 	add	r9,r13,r18
 802f9c4:	3300422e 	bgeu	r6,r12,802fad0 <__multiply+0x1ac>
 802f9c8:	37c00017 	ldw	ra,0(r6)
 802f9cc:	fbffffcc 	andi	r15,ra,65535
 802f9d0:	78001b26 	beq	r15,zero,802fa40 <__multiply+0x11c>
 802f9d4:	5811883a 	mov	r8,r11
 802f9d8:	681d883a 	mov	r14,r13
 802f9dc:	000f883a 	mov	r7,zero
 802f9e0:	71000017 	ldw	r4,0(r14)
 802f9e4:	40c00017 	ldw	r3,0(r8)
 802f9e8:	73800104 	addi	r14,r14,4
 802f9ec:	217fffcc 	andi	r5,r4,65535
 802f9f0:	2bcb383a 	mul	r5,r5,r15
 802f9f4:	2008d43a 	srli	r4,r4,16
 802f9f8:	1c7fffcc 	andi	r17,r3,65535
 802f9fc:	2c4b883a 	add	r5,r5,r17
 802fa00:	29cb883a 	add	r5,r5,r7
 802fa04:	23c9383a 	mul	r4,r4,r15
 802fa08:	1806d43a 	srli	r3,r3,16
 802fa0c:	280ed43a 	srli	r7,r5,16
 802fa10:	297fffcc 	andi	r5,r5,65535
 802fa14:	20c7883a 	add	r3,r4,r3
 802fa18:	19c7883a 	add	r3,r3,r7
 802fa1c:	1808943a 	slli	r4,r3,16
 802fa20:	4023883a 	mov	r17,r8
 802fa24:	180ed43a 	srli	r7,r3,16
 802fa28:	214ab03a 	or	r5,r4,r5
 802fa2c:	41400015 	stw	r5,0(r8)
 802fa30:	42000104 	addi	r8,r8,4
 802fa34:	727fea36 	bltu	r14,r9,802f9e0 <_gp+0xfffee2d4>
 802fa38:	89c00115 	stw	r7,4(r17)
 802fa3c:	37c00017 	ldw	ra,0(r6)
 802fa40:	f83ed43a 	srli	ra,ra,16
 802fa44:	f8001f26 	beq	ra,zero,802fac4 <__multiply+0x1a0>
 802fa48:	58c00017 	ldw	r3,0(r11)
 802fa4c:	681d883a 	mov	r14,r13
 802fa50:	581f883a 	mov	r15,r11
 802fa54:	1811883a 	mov	r8,r3
 802fa58:	5825883a 	mov	r18,r11
 802fa5c:	000f883a 	mov	r7,zero
 802fa60:	00000106 	br	802fa68 <__multiply+0x144>
 802fa64:	8825883a 	mov	r18,r17
 802fa68:	7140000b 	ldhu	r5,0(r14)
 802fa6c:	4010d43a 	srli	r8,r8,16
 802fa70:	193fffcc 	andi	r4,r3,65535
 802fa74:	2fcb383a 	mul	r5,r5,ra
 802fa78:	7bc00104 	addi	r15,r15,4
 802fa7c:	73800104 	addi	r14,r14,4
 802fa80:	2a0b883a 	add	r5,r5,r8
 802fa84:	29cb883a 	add	r5,r5,r7
 802fa88:	2806943a 	slli	r3,r5,16
 802fa8c:	94400104 	addi	r17,r18,4
 802fa90:	280ad43a 	srli	r5,r5,16
 802fa94:	1908b03a 	or	r4,r3,r4
 802fa98:	793fff15 	stw	r4,-4(r15)
 802fa9c:	70ffff17 	ldw	r3,-4(r14)
 802faa0:	8a000017 	ldw	r8,0(r17)
 802faa4:	1806d43a 	srli	r3,r3,16
 802faa8:	413fffcc 	andi	r4,r8,65535
 802faac:	1fc7383a 	mul	r3,r3,ra
 802fab0:	1907883a 	add	r3,r3,r4
 802fab4:	1947883a 	add	r3,r3,r5
 802fab8:	180ed43a 	srli	r7,r3,16
 802fabc:	727fe936 	bltu	r14,r9,802fa64 <_gp+0xfffee358>
 802fac0:	90c00115 	stw	r3,4(r18)
 802fac4:	31800104 	addi	r6,r6,4
 802fac8:	5ac00104 	addi	r11,r11,4
 802facc:	333fbe36 	bltu	r6,r12,802f9c8 <_gp+0xfffee2bc>
 802fad0:	0400090e 	bge	zero,r16,802faf8 <__multiply+0x1d4>
 802fad4:	50ffff17 	ldw	r3,-4(r10)
 802fad8:	52bfff04 	addi	r10,r10,-4
 802fadc:	18000326 	beq	r3,zero,802faec <__multiply+0x1c8>
 802fae0:	00000506 	br	802faf8 <__multiply+0x1d4>
 802fae4:	50c00017 	ldw	r3,0(r10)
 802fae8:	1800031e 	bne	r3,zero,802faf8 <__multiply+0x1d4>
 802faec:	843fffc4 	addi	r16,r16,-1
 802faf0:	52bfff04 	addi	r10,r10,-4
 802faf4:	803ffb1e 	bne	r16,zero,802fae4 <_gp+0xfffee3d8>
 802faf8:	14000415 	stw	r16,16(r2)
 802fafc:	dfc00517 	ldw	ra,20(sp)
 802fb00:	dd000417 	ldw	r20,16(sp)
 802fb04:	dcc00317 	ldw	r19,12(sp)
 802fb08:	dc800217 	ldw	r18,8(sp)
 802fb0c:	dc400117 	ldw	r17,4(sp)
 802fb10:	dc000017 	ldw	r16,0(sp)
 802fb14:	dec00604 	addi	sp,sp,24
 802fb18:	f800283a 	ret

0802fb1c <__pow5mult>:
 802fb1c:	defffa04 	addi	sp,sp,-24
 802fb20:	dcc00315 	stw	r19,12(sp)
 802fb24:	dc000015 	stw	r16,0(sp)
 802fb28:	dfc00515 	stw	ra,20(sp)
 802fb2c:	dd000415 	stw	r20,16(sp)
 802fb30:	dc800215 	stw	r18,8(sp)
 802fb34:	dc400115 	stw	r17,4(sp)
 802fb38:	308000cc 	andi	r2,r6,3
 802fb3c:	3021883a 	mov	r16,r6
 802fb40:	2027883a 	mov	r19,r4
 802fb44:	10002f1e 	bne	r2,zero,802fc04 <__pow5mult+0xe8>
 802fb48:	2825883a 	mov	r18,r5
 802fb4c:	8021d0ba 	srai	r16,r16,2
 802fb50:	80001a26 	beq	r16,zero,802fbbc <__pow5mult+0xa0>
 802fb54:	9c401217 	ldw	r17,72(r19)
 802fb58:	8800061e 	bne	r17,zero,802fb74 <__pow5mult+0x58>
 802fb5c:	00003406 	br	802fc30 <__pow5mult+0x114>
 802fb60:	8021d07a 	srai	r16,r16,1
 802fb64:	80001526 	beq	r16,zero,802fbbc <__pow5mult+0xa0>
 802fb68:	88800017 	ldw	r2,0(r17)
 802fb6c:	10001c26 	beq	r2,zero,802fbe0 <__pow5mult+0xc4>
 802fb70:	1023883a 	mov	r17,r2
 802fb74:	8080004c 	andi	r2,r16,1
 802fb78:	103ff926 	beq	r2,zero,802fb60 <_gp+0xfffee454>
 802fb7c:	880d883a 	mov	r6,r17
 802fb80:	900b883a 	mov	r5,r18
 802fb84:	9809883a 	mov	r4,r19
 802fb88:	802f9240 	call	802f924 <__multiply>
 802fb8c:	90001b26 	beq	r18,zero,802fbfc <__pow5mult+0xe0>
 802fb90:	91000117 	ldw	r4,4(r18)
 802fb94:	98c01317 	ldw	r3,76(r19)
 802fb98:	8021d07a 	srai	r16,r16,1
 802fb9c:	2109883a 	add	r4,r4,r4
 802fba0:	2109883a 	add	r4,r4,r4
 802fba4:	1907883a 	add	r3,r3,r4
 802fba8:	19000017 	ldw	r4,0(r3)
 802fbac:	91000015 	stw	r4,0(r18)
 802fbb0:	1c800015 	stw	r18,0(r3)
 802fbb4:	1025883a 	mov	r18,r2
 802fbb8:	803feb1e 	bne	r16,zero,802fb68 <_gp+0xfffee45c>
 802fbbc:	9005883a 	mov	r2,r18
 802fbc0:	dfc00517 	ldw	ra,20(sp)
 802fbc4:	dd000417 	ldw	r20,16(sp)
 802fbc8:	dcc00317 	ldw	r19,12(sp)
 802fbcc:	dc800217 	ldw	r18,8(sp)
 802fbd0:	dc400117 	ldw	r17,4(sp)
 802fbd4:	dc000017 	ldw	r16,0(sp)
 802fbd8:	dec00604 	addi	sp,sp,24
 802fbdc:	f800283a 	ret
 802fbe0:	880d883a 	mov	r6,r17
 802fbe4:	880b883a 	mov	r5,r17
 802fbe8:	9809883a 	mov	r4,r19
 802fbec:	802f9240 	call	802f924 <__multiply>
 802fbf0:	88800015 	stw	r2,0(r17)
 802fbf4:	10000015 	stw	zero,0(r2)
 802fbf8:	003fdd06 	br	802fb70 <_gp+0xfffee464>
 802fbfc:	1025883a 	mov	r18,r2
 802fc00:	003fd706 	br	802fb60 <_gp+0xfffee454>
 802fc04:	10bfffc4 	addi	r2,r2,-1
 802fc08:	1085883a 	add	r2,r2,r2
 802fc0c:	00c200f4 	movhi	r3,2051
 802fc10:	18de4b04 	addi	r3,r3,31020
 802fc14:	1085883a 	add	r2,r2,r2
 802fc18:	1885883a 	add	r2,r3,r2
 802fc1c:	11800017 	ldw	r6,0(r2)
 802fc20:	000f883a 	mov	r7,zero
 802fc24:	802f5ac0 	call	802f5ac <__multadd>
 802fc28:	1025883a 	mov	r18,r2
 802fc2c:	003fc706 	br	802fb4c <_gp+0xfffee440>
 802fc30:	05000044 	movi	r20,1
 802fc34:	a00b883a 	mov	r5,r20
 802fc38:	9809883a 	mov	r4,r19
 802fc3c:	802f4dc0 	call	802f4dc <_Balloc>
 802fc40:	1023883a 	mov	r17,r2
 802fc44:	00809c44 	movi	r2,625
 802fc48:	88800515 	stw	r2,20(r17)
 802fc4c:	8d000415 	stw	r20,16(r17)
 802fc50:	9c401215 	stw	r17,72(r19)
 802fc54:	88000015 	stw	zero,0(r17)
 802fc58:	003fc606 	br	802fb74 <_gp+0xfffee468>

0802fc5c <__lshift>:
 802fc5c:	defff904 	addi	sp,sp,-28
 802fc60:	dd400515 	stw	r21,20(sp)
 802fc64:	dcc00315 	stw	r19,12(sp)
 802fc68:	302bd17a 	srai	r21,r6,5
 802fc6c:	2cc00417 	ldw	r19,16(r5)
 802fc70:	28800217 	ldw	r2,8(r5)
 802fc74:	dd000415 	stw	r20,16(sp)
 802fc78:	ace7883a 	add	r19,r21,r19
 802fc7c:	dc800215 	stw	r18,8(sp)
 802fc80:	dc400115 	stw	r17,4(sp)
 802fc84:	dc000015 	stw	r16,0(sp)
 802fc88:	dfc00615 	stw	ra,24(sp)
 802fc8c:	9c000044 	addi	r16,r19,1
 802fc90:	2823883a 	mov	r17,r5
 802fc94:	3029883a 	mov	r20,r6
 802fc98:	2025883a 	mov	r18,r4
 802fc9c:	29400117 	ldw	r5,4(r5)
 802fca0:	1400030e 	bge	r2,r16,802fcb0 <__lshift+0x54>
 802fca4:	1085883a 	add	r2,r2,r2
 802fca8:	29400044 	addi	r5,r5,1
 802fcac:	143ffd16 	blt	r2,r16,802fca4 <_gp+0xfffee598>
 802fcb0:	9009883a 	mov	r4,r18
 802fcb4:	802f4dc0 	call	802f4dc <_Balloc>
 802fcb8:	10c00504 	addi	r3,r2,20
 802fcbc:	0540070e 	bge	zero,r21,802fcdc <__lshift+0x80>
 802fcc0:	ad6b883a 	add	r21,r21,r21
 802fcc4:	ad6b883a 	add	r21,r21,r21
 802fcc8:	1809883a 	mov	r4,r3
 802fccc:	1d47883a 	add	r3,r3,r21
 802fcd0:	20000015 	stw	zero,0(r4)
 802fcd4:	21000104 	addi	r4,r4,4
 802fcd8:	193ffd1e 	bne	r3,r4,802fcd0 <_gp+0xfffee5c4>
 802fcdc:	8a000417 	ldw	r8,16(r17)
 802fce0:	89000504 	addi	r4,r17,20
 802fce4:	a18007cc 	andi	r6,r20,31
 802fce8:	4211883a 	add	r8,r8,r8
 802fcec:	4211883a 	add	r8,r8,r8
 802fcf0:	2211883a 	add	r8,r4,r8
 802fcf4:	30002326 	beq	r6,zero,802fd84 <__lshift+0x128>
 802fcf8:	02400804 	movi	r9,32
 802fcfc:	4993c83a 	sub	r9,r9,r6
 802fd00:	000b883a 	mov	r5,zero
 802fd04:	21c00017 	ldw	r7,0(r4)
 802fd08:	1815883a 	mov	r10,r3
 802fd0c:	18c00104 	addi	r3,r3,4
 802fd10:	398e983a 	sll	r7,r7,r6
 802fd14:	21000104 	addi	r4,r4,4
 802fd18:	394ab03a 	or	r5,r7,r5
 802fd1c:	197fff15 	stw	r5,-4(r3)
 802fd20:	217fff17 	ldw	r5,-4(r4)
 802fd24:	2a4ad83a 	srl	r5,r5,r9
 802fd28:	223ff636 	bltu	r4,r8,802fd04 <_gp+0xfffee5f8>
 802fd2c:	51400115 	stw	r5,4(r10)
 802fd30:	28001a1e 	bne	r5,zero,802fd9c <__lshift+0x140>
 802fd34:	843fffc4 	addi	r16,r16,-1
 802fd38:	14000415 	stw	r16,16(r2)
 802fd3c:	88000826 	beq	r17,zero,802fd60 <__lshift+0x104>
 802fd40:	89000117 	ldw	r4,4(r17)
 802fd44:	90c01317 	ldw	r3,76(r18)
 802fd48:	2109883a 	add	r4,r4,r4
 802fd4c:	2109883a 	add	r4,r4,r4
 802fd50:	1907883a 	add	r3,r3,r4
 802fd54:	19000017 	ldw	r4,0(r3)
 802fd58:	89000015 	stw	r4,0(r17)
 802fd5c:	1c400015 	stw	r17,0(r3)
 802fd60:	dfc00617 	ldw	ra,24(sp)
 802fd64:	dd400517 	ldw	r21,20(sp)
 802fd68:	dd000417 	ldw	r20,16(sp)
 802fd6c:	dcc00317 	ldw	r19,12(sp)
 802fd70:	dc800217 	ldw	r18,8(sp)
 802fd74:	dc400117 	ldw	r17,4(sp)
 802fd78:	dc000017 	ldw	r16,0(sp)
 802fd7c:	dec00704 	addi	sp,sp,28
 802fd80:	f800283a 	ret
 802fd84:	21400017 	ldw	r5,0(r4)
 802fd88:	18c00104 	addi	r3,r3,4
 802fd8c:	21000104 	addi	r4,r4,4
 802fd90:	197fff15 	stw	r5,-4(r3)
 802fd94:	223ffb36 	bltu	r4,r8,802fd84 <_gp+0xfffee678>
 802fd98:	003fe606 	br	802fd34 <_gp+0xfffee628>
 802fd9c:	9c000084 	addi	r16,r19,2
 802fda0:	003fe406 	br	802fd34 <_gp+0xfffee628>

0802fda4 <__mcmp>:
 802fda4:	20800417 	ldw	r2,16(r4)
 802fda8:	28c00417 	ldw	r3,16(r5)
 802fdac:	10c5c83a 	sub	r2,r2,r3
 802fdb0:	1000111e 	bne	r2,zero,802fdf8 <__mcmp+0x54>
 802fdb4:	18c7883a 	add	r3,r3,r3
 802fdb8:	18c7883a 	add	r3,r3,r3
 802fdbc:	21000504 	addi	r4,r4,20
 802fdc0:	29400504 	addi	r5,r5,20
 802fdc4:	20c5883a 	add	r2,r4,r3
 802fdc8:	28cb883a 	add	r5,r5,r3
 802fdcc:	00000106 	br	802fdd4 <__mcmp+0x30>
 802fdd0:	20800a2e 	bgeu	r4,r2,802fdfc <__mcmp+0x58>
 802fdd4:	10bfff04 	addi	r2,r2,-4
 802fdd8:	297fff04 	addi	r5,r5,-4
 802fddc:	11800017 	ldw	r6,0(r2)
 802fde0:	28c00017 	ldw	r3,0(r5)
 802fde4:	30fffa26 	beq	r6,r3,802fdd0 <_gp+0xfffee6c4>
 802fde8:	30c00236 	bltu	r6,r3,802fdf4 <__mcmp+0x50>
 802fdec:	00800044 	movi	r2,1
 802fdf0:	f800283a 	ret
 802fdf4:	00bfffc4 	movi	r2,-1
 802fdf8:	f800283a 	ret
 802fdfc:	0005883a 	mov	r2,zero
 802fe00:	f800283a 	ret

0802fe04 <__mdiff>:
 802fe04:	28c00417 	ldw	r3,16(r5)
 802fe08:	30800417 	ldw	r2,16(r6)
 802fe0c:	defffa04 	addi	sp,sp,-24
 802fe10:	dcc00315 	stw	r19,12(sp)
 802fe14:	dc800215 	stw	r18,8(sp)
 802fe18:	dfc00515 	stw	ra,20(sp)
 802fe1c:	dd000415 	stw	r20,16(sp)
 802fe20:	dc400115 	stw	r17,4(sp)
 802fe24:	dc000015 	stw	r16,0(sp)
 802fe28:	1887c83a 	sub	r3,r3,r2
 802fe2c:	2825883a 	mov	r18,r5
 802fe30:	3027883a 	mov	r19,r6
 802fe34:	1800141e 	bne	r3,zero,802fe88 <__mdiff+0x84>
 802fe38:	1085883a 	add	r2,r2,r2
 802fe3c:	1085883a 	add	r2,r2,r2
 802fe40:	2a000504 	addi	r8,r5,20
 802fe44:	34000504 	addi	r16,r6,20
 802fe48:	4087883a 	add	r3,r8,r2
 802fe4c:	8085883a 	add	r2,r16,r2
 802fe50:	00000106 	br	802fe58 <__mdiff+0x54>
 802fe54:	40c0592e 	bgeu	r8,r3,802ffbc <__mdiff+0x1b8>
 802fe58:	18ffff04 	addi	r3,r3,-4
 802fe5c:	10bfff04 	addi	r2,r2,-4
 802fe60:	19c00017 	ldw	r7,0(r3)
 802fe64:	11400017 	ldw	r5,0(r2)
 802fe68:	397ffa26 	beq	r7,r5,802fe54 <_gp+0xfffee748>
 802fe6c:	3940592e 	bgeu	r7,r5,802ffd4 <__mdiff+0x1d0>
 802fe70:	9005883a 	mov	r2,r18
 802fe74:	4023883a 	mov	r17,r8
 802fe78:	9825883a 	mov	r18,r19
 802fe7c:	05000044 	movi	r20,1
 802fe80:	1027883a 	mov	r19,r2
 802fe84:	00000406 	br	802fe98 <__mdiff+0x94>
 802fe88:	18005616 	blt	r3,zero,802ffe4 <__mdiff+0x1e0>
 802fe8c:	34400504 	addi	r17,r6,20
 802fe90:	2c000504 	addi	r16,r5,20
 802fe94:	0029883a 	mov	r20,zero
 802fe98:	91400117 	ldw	r5,4(r18)
 802fe9c:	802f4dc0 	call	802f4dc <_Balloc>
 802fea0:	92400417 	ldw	r9,16(r18)
 802fea4:	9b000417 	ldw	r12,16(r19)
 802fea8:	12c00504 	addi	r11,r2,20
 802feac:	4a51883a 	add	r8,r9,r9
 802feb0:	6319883a 	add	r12,r12,r12
 802feb4:	4211883a 	add	r8,r8,r8
 802feb8:	6319883a 	add	r12,r12,r12
 802febc:	15000315 	stw	r20,12(r2)
 802fec0:	8211883a 	add	r8,r16,r8
 802fec4:	8b19883a 	add	r12,r17,r12
 802fec8:	0007883a 	mov	r3,zero
 802fecc:	81400017 	ldw	r5,0(r16)
 802fed0:	89c00017 	ldw	r7,0(r17)
 802fed4:	59800104 	addi	r6,r11,4
 802fed8:	293fffcc 	andi	r4,r5,65535
 802fedc:	20c7883a 	add	r3,r4,r3
 802fee0:	393fffcc 	andi	r4,r7,65535
 802fee4:	1909c83a 	sub	r4,r3,r4
 802fee8:	280ad43a 	srli	r5,r5,16
 802feec:	380ed43a 	srli	r7,r7,16
 802fef0:	2007d43a 	srai	r3,r4,16
 802fef4:	213fffcc 	andi	r4,r4,65535
 802fef8:	29cbc83a 	sub	r5,r5,r7
 802fefc:	28c7883a 	add	r3,r5,r3
 802ff00:	180a943a 	slli	r5,r3,16
 802ff04:	8c400104 	addi	r17,r17,4
 802ff08:	84000104 	addi	r16,r16,4
 802ff0c:	2908b03a 	or	r4,r5,r4
 802ff10:	59000015 	stw	r4,0(r11)
 802ff14:	1807d43a 	srai	r3,r3,16
 802ff18:	3015883a 	mov	r10,r6
 802ff1c:	3017883a 	mov	r11,r6
 802ff20:	8b3fea36 	bltu	r17,r12,802fecc <_gp+0xfffee7c0>
 802ff24:	8200162e 	bgeu	r16,r8,802ff80 <__mdiff+0x17c>
 802ff28:	8017883a 	mov	r11,r16
 802ff2c:	59400017 	ldw	r5,0(r11)
 802ff30:	31800104 	addi	r6,r6,4
 802ff34:	5ac00104 	addi	r11,r11,4
 802ff38:	293fffcc 	andi	r4,r5,65535
 802ff3c:	20c7883a 	add	r3,r4,r3
 802ff40:	280ed43a 	srli	r7,r5,16
 802ff44:	180bd43a 	srai	r5,r3,16
 802ff48:	193fffcc 	andi	r4,r3,65535
 802ff4c:	3947883a 	add	r3,r7,r5
 802ff50:	180a943a 	slli	r5,r3,16
 802ff54:	1807d43a 	srai	r3,r3,16
 802ff58:	2908b03a 	or	r4,r5,r4
 802ff5c:	313fff15 	stw	r4,-4(r6)
 802ff60:	5a3ff236 	bltu	r11,r8,802ff2c <_gp+0xfffee820>
 802ff64:	0406303a 	nor	r3,zero,r16
 802ff68:	1a07883a 	add	r3,r3,r8
 802ff6c:	1806d0ba 	srli	r3,r3,2
 802ff70:	18c00044 	addi	r3,r3,1
 802ff74:	18c7883a 	add	r3,r3,r3
 802ff78:	18c7883a 	add	r3,r3,r3
 802ff7c:	50d5883a 	add	r10,r10,r3
 802ff80:	50ffff04 	addi	r3,r10,-4
 802ff84:	2000041e 	bne	r4,zero,802ff98 <__mdiff+0x194>
 802ff88:	18ffff04 	addi	r3,r3,-4
 802ff8c:	19000017 	ldw	r4,0(r3)
 802ff90:	4a7fffc4 	addi	r9,r9,-1
 802ff94:	203ffc26 	beq	r4,zero,802ff88 <_gp+0xfffee87c>
 802ff98:	12400415 	stw	r9,16(r2)
 802ff9c:	dfc00517 	ldw	ra,20(sp)
 802ffa0:	dd000417 	ldw	r20,16(sp)
 802ffa4:	dcc00317 	ldw	r19,12(sp)
 802ffa8:	dc800217 	ldw	r18,8(sp)
 802ffac:	dc400117 	ldw	r17,4(sp)
 802ffb0:	dc000017 	ldw	r16,0(sp)
 802ffb4:	dec00604 	addi	sp,sp,24
 802ffb8:	f800283a 	ret
 802ffbc:	000b883a 	mov	r5,zero
 802ffc0:	802f4dc0 	call	802f4dc <_Balloc>
 802ffc4:	00c00044 	movi	r3,1
 802ffc8:	10c00415 	stw	r3,16(r2)
 802ffcc:	10000515 	stw	zero,20(r2)
 802ffd0:	003ff206 	br	802ff9c <_gp+0xfffee890>
 802ffd4:	8023883a 	mov	r17,r16
 802ffd8:	0029883a 	mov	r20,zero
 802ffdc:	4021883a 	mov	r16,r8
 802ffe0:	003fad06 	br	802fe98 <_gp+0xfffee78c>
 802ffe4:	9005883a 	mov	r2,r18
 802ffe8:	94400504 	addi	r17,r18,20
 802ffec:	9c000504 	addi	r16,r19,20
 802fff0:	9825883a 	mov	r18,r19
 802fff4:	05000044 	movi	r20,1
 802fff8:	1027883a 	mov	r19,r2
 802fffc:	003fa606 	br	802fe98 <_gp+0xfffee78c>

08030000 <__ulp>:
 8030000:	295ffc2c 	andhi	r5,r5,32752
 8030004:	00bf3034 	movhi	r2,64704
 8030008:	2887883a 	add	r3,r5,r2
 803000c:	00c0020e 	bge	zero,r3,8030018 <__ulp+0x18>
 8030010:	0005883a 	mov	r2,zero
 8030014:	f800283a 	ret
 8030018:	00c7c83a 	sub	r3,zero,r3
 803001c:	1807d53a 	srai	r3,r3,20
 8030020:	008004c4 	movi	r2,19
 8030024:	10c00b0e 	bge	r2,r3,8030054 <__ulp+0x54>
 8030028:	18bffb04 	addi	r2,r3,-20
 803002c:	01000784 	movi	r4,30
 8030030:	0007883a 	mov	r3,zero
 8030034:	20800516 	blt	r4,r2,803004c <__ulp+0x4c>
 8030038:	010007c4 	movi	r4,31
 803003c:	2089c83a 	sub	r4,r4,r2
 8030040:	00800044 	movi	r2,1
 8030044:	1104983a 	sll	r2,r2,r4
 8030048:	f800283a 	ret
 803004c:	00800044 	movi	r2,1
 8030050:	f800283a 	ret
 8030054:	01400234 	movhi	r5,8
 8030058:	28c7d83a 	sra	r3,r5,r3
 803005c:	0005883a 	mov	r2,zero
 8030060:	f800283a 	ret

08030064 <__b2d>:
 8030064:	defffa04 	addi	sp,sp,-24
 8030068:	dc000015 	stw	r16,0(sp)
 803006c:	24000417 	ldw	r16,16(r4)
 8030070:	dc400115 	stw	r17,4(sp)
 8030074:	24400504 	addi	r17,r4,20
 8030078:	8421883a 	add	r16,r16,r16
 803007c:	8421883a 	add	r16,r16,r16
 8030080:	8c21883a 	add	r16,r17,r16
 8030084:	dc800215 	stw	r18,8(sp)
 8030088:	84bfff17 	ldw	r18,-4(r16)
 803008c:	dd000415 	stw	r20,16(sp)
 8030090:	dcc00315 	stw	r19,12(sp)
 8030094:	9009883a 	mov	r4,r18
 8030098:	2829883a 	mov	r20,r5
 803009c:	dfc00515 	stw	ra,20(sp)
 80300a0:	802f7d00 	call	802f7d0 <__hi0bits>
 80300a4:	00c00804 	movi	r3,32
 80300a8:	1889c83a 	sub	r4,r3,r2
 80300ac:	a1000015 	stw	r4,0(r20)
 80300b0:	01000284 	movi	r4,10
 80300b4:	84ffff04 	addi	r19,r16,-4
 80300b8:	20801216 	blt	r4,r2,8030104 <__b2d+0xa0>
 80300bc:	018002c4 	movi	r6,11
 80300c0:	308dc83a 	sub	r6,r6,r2
 80300c4:	9186d83a 	srl	r3,r18,r6
 80300c8:	18cffc34 	orhi	r3,r3,16368
 80300cc:	8cc0212e 	bgeu	r17,r19,8030154 <__b2d+0xf0>
 80300d0:	813ffe17 	ldw	r4,-8(r16)
 80300d4:	218cd83a 	srl	r6,r4,r6
 80300d8:	10800544 	addi	r2,r2,21
 80300dc:	9084983a 	sll	r2,r18,r2
 80300e0:	1184b03a 	or	r2,r2,r6
 80300e4:	dfc00517 	ldw	ra,20(sp)
 80300e8:	dd000417 	ldw	r20,16(sp)
 80300ec:	dcc00317 	ldw	r19,12(sp)
 80300f0:	dc800217 	ldw	r18,8(sp)
 80300f4:	dc400117 	ldw	r17,4(sp)
 80300f8:	dc000017 	ldw	r16,0(sp)
 80300fc:	dec00604 	addi	sp,sp,24
 8030100:	f800283a 	ret
 8030104:	8cc00f2e 	bgeu	r17,r19,8030144 <__b2d+0xe0>
 8030108:	117ffd44 	addi	r5,r2,-11
 803010c:	80bffe17 	ldw	r2,-8(r16)
 8030110:	28000e26 	beq	r5,zero,803014c <__b2d+0xe8>
 8030114:	1949c83a 	sub	r4,r3,r5
 8030118:	9164983a 	sll	r18,r18,r5
 803011c:	1106d83a 	srl	r3,r2,r4
 8030120:	81bffe04 	addi	r6,r16,-8
 8030124:	948ffc34 	orhi	r18,r18,16368
 8030128:	90c6b03a 	or	r3,r18,r3
 803012c:	89800e2e 	bgeu	r17,r6,8030168 <__b2d+0x104>
 8030130:	81bffd17 	ldw	r6,-12(r16)
 8030134:	1144983a 	sll	r2,r2,r5
 8030138:	310ad83a 	srl	r5,r6,r4
 803013c:	2884b03a 	or	r2,r5,r2
 8030140:	003fe806 	br	80300e4 <_gp+0xfffee9d8>
 8030144:	10bffd44 	addi	r2,r2,-11
 8030148:	1000041e 	bne	r2,zero,803015c <__b2d+0xf8>
 803014c:	90cffc34 	orhi	r3,r18,16368
 8030150:	003fe406 	br	80300e4 <_gp+0xfffee9d8>
 8030154:	000d883a 	mov	r6,zero
 8030158:	003fdf06 	br	80300d8 <_gp+0xfffee9cc>
 803015c:	90a4983a 	sll	r18,r18,r2
 8030160:	0005883a 	mov	r2,zero
 8030164:	003ff906 	br	803014c <_gp+0xfffeea40>
 8030168:	1144983a 	sll	r2,r2,r5
 803016c:	003fdd06 	br	80300e4 <_gp+0xfffee9d8>

08030170 <__d2b>:
 8030170:	defff804 	addi	sp,sp,-32
 8030174:	dc000215 	stw	r16,8(sp)
 8030178:	3021883a 	mov	r16,r6
 803017c:	dc400315 	stw	r17,12(sp)
 8030180:	8022907a 	slli	r17,r16,1
 8030184:	dd000615 	stw	r20,24(sp)
 8030188:	2829883a 	mov	r20,r5
 803018c:	01400044 	movi	r5,1
 8030190:	dcc00515 	stw	r19,20(sp)
 8030194:	dc800415 	stw	r18,16(sp)
 8030198:	dfc00715 	stw	ra,28(sp)
 803019c:	3825883a 	mov	r18,r7
 80301a0:	8822d57a 	srli	r17,r17,21
 80301a4:	802f4dc0 	call	802f4dc <_Balloc>
 80301a8:	1027883a 	mov	r19,r2
 80301ac:	00800434 	movhi	r2,16
 80301b0:	10bfffc4 	addi	r2,r2,-1
 80301b4:	808c703a 	and	r6,r16,r2
 80301b8:	88000126 	beq	r17,zero,80301c0 <__d2b+0x50>
 80301bc:	31800434 	orhi	r6,r6,16
 80301c0:	d9800015 	stw	r6,0(sp)
 80301c4:	a0002426 	beq	r20,zero,8030258 <__d2b+0xe8>
 80301c8:	d9000104 	addi	r4,sp,4
 80301cc:	dd000115 	stw	r20,4(sp)
 80301d0:	802f8380 	call	802f838 <__lo0bits>
 80301d4:	d8c00017 	ldw	r3,0(sp)
 80301d8:	10002f1e 	bne	r2,zero,8030298 <__d2b+0x128>
 80301dc:	d9000117 	ldw	r4,4(sp)
 80301e0:	99000515 	stw	r4,20(r19)
 80301e4:	1821003a 	cmpeq	r16,r3,zero
 80301e8:	01000084 	movi	r4,2
 80301ec:	2421c83a 	sub	r16,r4,r16
 80301f0:	98c00615 	stw	r3,24(r19)
 80301f4:	9c000415 	stw	r16,16(r19)
 80301f8:	88001f1e 	bne	r17,zero,8030278 <__d2b+0x108>
 80301fc:	10bef384 	addi	r2,r2,-1074
 8030200:	90800015 	stw	r2,0(r18)
 8030204:	00900034 	movhi	r2,16384
 8030208:	10bfffc4 	addi	r2,r2,-1
 803020c:	8085883a 	add	r2,r16,r2
 8030210:	1085883a 	add	r2,r2,r2
 8030214:	1085883a 	add	r2,r2,r2
 8030218:	9885883a 	add	r2,r19,r2
 803021c:	11000517 	ldw	r4,20(r2)
 8030220:	8020917a 	slli	r16,r16,5
 8030224:	802f7d00 	call	802f7d0 <__hi0bits>
 8030228:	d8c00817 	ldw	r3,32(sp)
 803022c:	8085c83a 	sub	r2,r16,r2
 8030230:	18800015 	stw	r2,0(r3)
 8030234:	9805883a 	mov	r2,r19
 8030238:	dfc00717 	ldw	ra,28(sp)
 803023c:	dd000617 	ldw	r20,24(sp)
 8030240:	dcc00517 	ldw	r19,20(sp)
 8030244:	dc800417 	ldw	r18,16(sp)
 8030248:	dc400317 	ldw	r17,12(sp)
 803024c:	dc000217 	ldw	r16,8(sp)
 8030250:	dec00804 	addi	sp,sp,32
 8030254:	f800283a 	ret
 8030258:	d809883a 	mov	r4,sp
 803025c:	802f8380 	call	802f838 <__lo0bits>
 8030260:	d8c00017 	ldw	r3,0(sp)
 8030264:	04000044 	movi	r16,1
 8030268:	9c000415 	stw	r16,16(r19)
 803026c:	98c00515 	stw	r3,20(r19)
 8030270:	10800804 	addi	r2,r2,32
 8030274:	883fe126 	beq	r17,zero,80301fc <_gp+0xfffeeaf0>
 8030278:	00c00d44 	movi	r3,53
 803027c:	8c7ef344 	addi	r17,r17,-1075
 8030280:	88a3883a 	add	r17,r17,r2
 8030284:	1885c83a 	sub	r2,r3,r2
 8030288:	d8c00817 	ldw	r3,32(sp)
 803028c:	94400015 	stw	r17,0(r18)
 8030290:	18800015 	stw	r2,0(r3)
 8030294:	003fe706 	br	8030234 <_gp+0xfffeeb28>
 8030298:	01000804 	movi	r4,32
 803029c:	2089c83a 	sub	r4,r4,r2
 80302a0:	1908983a 	sll	r4,r3,r4
 80302a4:	d9400117 	ldw	r5,4(sp)
 80302a8:	1886d83a 	srl	r3,r3,r2
 80302ac:	2148b03a 	or	r4,r4,r5
 80302b0:	99000515 	stw	r4,20(r19)
 80302b4:	d8c00015 	stw	r3,0(sp)
 80302b8:	003fca06 	br	80301e4 <_gp+0xfffeead8>

080302bc <__ratio>:
 80302bc:	defff904 	addi	sp,sp,-28
 80302c0:	dc400315 	stw	r17,12(sp)
 80302c4:	2823883a 	mov	r17,r5
 80302c8:	d9400104 	addi	r5,sp,4
 80302cc:	dfc00615 	stw	ra,24(sp)
 80302d0:	dcc00515 	stw	r19,20(sp)
 80302d4:	dc800415 	stw	r18,16(sp)
 80302d8:	2027883a 	mov	r19,r4
 80302dc:	dc000215 	stw	r16,8(sp)
 80302e0:	80300640 	call	8030064 <__b2d>
 80302e4:	d80b883a 	mov	r5,sp
 80302e8:	8809883a 	mov	r4,r17
 80302ec:	1025883a 	mov	r18,r2
 80302f0:	1821883a 	mov	r16,r3
 80302f4:	80300640 	call	8030064 <__b2d>
 80302f8:	8a000417 	ldw	r8,16(r17)
 80302fc:	99000417 	ldw	r4,16(r19)
 8030300:	d9400117 	ldw	r5,4(sp)
 8030304:	2209c83a 	sub	r4,r4,r8
 8030308:	2010917a 	slli	r8,r4,5
 803030c:	d9000017 	ldw	r4,0(sp)
 8030310:	2909c83a 	sub	r4,r5,r4
 8030314:	4109883a 	add	r4,r8,r4
 8030318:	01000e0e 	bge	zero,r4,8030354 <__ratio+0x98>
 803031c:	2008953a 	slli	r4,r4,20
 8030320:	2421883a 	add	r16,r4,r16
 8030324:	100d883a 	mov	r6,r2
 8030328:	180f883a 	mov	r7,r3
 803032c:	9009883a 	mov	r4,r18
 8030330:	800b883a 	mov	r5,r16
 8030334:	802738c0 	call	802738c <__divdf3>
 8030338:	dfc00617 	ldw	ra,24(sp)
 803033c:	dcc00517 	ldw	r19,20(sp)
 8030340:	dc800417 	ldw	r18,16(sp)
 8030344:	dc400317 	ldw	r17,12(sp)
 8030348:	dc000217 	ldw	r16,8(sp)
 803034c:	dec00704 	addi	sp,sp,28
 8030350:	f800283a 	ret
 8030354:	2008953a 	slli	r4,r4,20
 8030358:	1907c83a 	sub	r3,r3,r4
 803035c:	003ff106 	br	8030324 <_gp+0xfffeec18>

08030360 <_mprec_log10>:
 8030360:	defffe04 	addi	sp,sp,-8
 8030364:	dc000015 	stw	r16,0(sp)
 8030368:	dfc00115 	stw	ra,4(sp)
 803036c:	008005c4 	movi	r2,23
 8030370:	2021883a 	mov	r16,r4
 8030374:	11000d0e 	bge	r2,r4,80303ac <_mprec_log10+0x4c>
 8030378:	0005883a 	mov	r2,zero
 803037c:	00cffc34 	movhi	r3,16368
 8030380:	843fffc4 	addi	r16,r16,-1
 8030384:	000d883a 	mov	r6,zero
 8030388:	01d00934 	movhi	r7,16420
 803038c:	1009883a 	mov	r4,r2
 8030390:	180b883a 	mov	r5,r3
 8030394:	8027ecc0 	call	8027ecc <__muldf3>
 8030398:	803ff91e 	bne	r16,zero,8030380 <_gp+0xfffeec74>
 803039c:	dfc00117 	ldw	ra,4(sp)
 80303a0:	dc000017 	ldw	r16,0(sp)
 80303a4:	dec00204 	addi	sp,sp,8
 80303a8:	f800283a 	ret
 80303ac:	202090fa 	slli	r16,r4,3
 80303b0:	008200f4 	movhi	r2,2051
 80303b4:	109e6204 	addi	r2,r2,31112
 80303b8:	1421883a 	add	r16,r2,r16
 80303bc:	80800017 	ldw	r2,0(r16)
 80303c0:	80c00117 	ldw	r3,4(r16)
 80303c4:	dfc00117 	ldw	ra,4(sp)
 80303c8:	dc000017 	ldw	r16,0(sp)
 80303cc:	dec00204 	addi	sp,sp,8
 80303d0:	f800283a 	ret

080303d4 <__copybits>:
 80303d4:	297fffc4 	addi	r5,r5,-1
 80303d8:	280fd17a 	srai	r7,r5,5
 80303dc:	30c00417 	ldw	r3,16(r6)
 80303e0:	30800504 	addi	r2,r6,20
 80303e4:	39c00044 	addi	r7,r7,1
 80303e8:	18c7883a 	add	r3,r3,r3
 80303ec:	39cf883a 	add	r7,r7,r7
 80303f0:	18c7883a 	add	r3,r3,r3
 80303f4:	39cf883a 	add	r7,r7,r7
 80303f8:	10c7883a 	add	r3,r2,r3
 80303fc:	21cf883a 	add	r7,r4,r7
 8030400:	10c00d2e 	bgeu	r2,r3,8030438 <__copybits+0x64>
 8030404:	200b883a 	mov	r5,r4
 8030408:	12000017 	ldw	r8,0(r2)
 803040c:	29400104 	addi	r5,r5,4
 8030410:	10800104 	addi	r2,r2,4
 8030414:	2a3fff15 	stw	r8,-4(r5)
 8030418:	10fffb36 	bltu	r2,r3,8030408 <_gp+0xfffeecfc>
 803041c:	1985c83a 	sub	r2,r3,r6
 8030420:	10bffac4 	addi	r2,r2,-21
 8030424:	1004d0ba 	srli	r2,r2,2
 8030428:	10800044 	addi	r2,r2,1
 803042c:	1085883a 	add	r2,r2,r2
 8030430:	1085883a 	add	r2,r2,r2
 8030434:	2089883a 	add	r4,r4,r2
 8030438:	21c0032e 	bgeu	r4,r7,8030448 <__copybits+0x74>
 803043c:	20000015 	stw	zero,0(r4)
 8030440:	21000104 	addi	r4,r4,4
 8030444:	21fffd36 	bltu	r4,r7,803043c <_gp+0xfffeed30>
 8030448:	f800283a 	ret

0803044c <__any_on>:
 803044c:	20c00417 	ldw	r3,16(r4)
 8030450:	2805d17a 	srai	r2,r5,5
 8030454:	21000504 	addi	r4,r4,20
 8030458:	18800d0e 	bge	r3,r2,8030490 <__any_on+0x44>
 803045c:	18c7883a 	add	r3,r3,r3
 8030460:	18c7883a 	add	r3,r3,r3
 8030464:	20c7883a 	add	r3,r4,r3
 8030468:	20c0192e 	bgeu	r4,r3,80304d0 <__any_on+0x84>
 803046c:	18bfff17 	ldw	r2,-4(r3)
 8030470:	18ffff04 	addi	r3,r3,-4
 8030474:	1000041e 	bne	r2,zero,8030488 <__any_on+0x3c>
 8030478:	20c0142e 	bgeu	r4,r3,80304cc <__any_on+0x80>
 803047c:	18ffff04 	addi	r3,r3,-4
 8030480:	19400017 	ldw	r5,0(r3)
 8030484:	283ffc26 	beq	r5,zero,8030478 <_gp+0xfffeed6c>
 8030488:	00800044 	movi	r2,1
 803048c:	f800283a 	ret
 8030490:	10c00a0e 	bge	r2,r3,80304bc <__any_on+0x70>
 8030494:	1085883a 	add	r2,r2,r2
 8030498:	1085883a 	add	r2,r2,r2
 803049c:	294007cc 	andi	r5,r5,31
 80304a0:	2087883a 	add	r3,r4,r2
 80304a4:	283ff026 	beq	r5,zero,8030468 <_gp+0xfffeed5c>
 80304a8:	19800017 	ldw	r6,0(r3)
 80304ac:	3144d83a 	srl	r2,r6,r5
 80304b0:	114a983a 	sll	r5,r2,r5
 80304b4:	317ff41e 	bne	r6,r5,8030488 <_gp+0xfffeed7c>
 80304b8:	003feb06 	br	8030468 <_gp+0xfffeed5c>
 80304bc:	1085883a 	add	r2,r2,r2
 80304c0:	1085883a 	add	r2,r2,r2
 80304c4:	2087883a 	add	r3,r4,r2
 80304c8:	003fe706 	br	8030468 <_gp+0xfffeed5c>
 80304cc:	f800283a 	ret
 80304d0:	0005883a 	mov	r2,zero
 80304d4:	f800283a 	ret

080304d8 <_realloc_r>:
 80304d8:	defff604 	addi	sp,sp,-40
 80304dc:	dc800215 	stw	r18,8(sp)
 80304e0:	dfc00915 	stw	ra,36(sp)
 80304e4:	df000815 	stw	fp,32(sp)
 80304e8:	ddc00715 	stw	r23,28(sp)
 80304ec:	dd800615 	stw	r22,24(sp)
 80304f0:	dd400515 	stw	r21,20(sp)
 80304f4:	dd000415 	stw	r20,16(sp)
 80304f8:	dcc00315 	stw	r19,12(sp)
 80304fc:	dc400115 	stw	r17,4(sp)
 8030500:	dc000015 	stw	r16,0(sp)
 8030504:	3025883a 	mov	r18,r6
 8030508:	2800b726 	beq	r5,zero,80307e8 <_realloc_r+0x310>
 803050c:	282b883a 	mov	r21,r5
 8030510:	2029883a 	mov	r20,r4
 8030514:	8033c300 	call	8033c30 <__malloc_lock>
 8030518:	a8bfff17 	ldw	r2,-4(r21)
 803051c:	043fff04 	movi	r16,-4
 8030520:	90c002c4 	addi	r3,r18,11
 8030524:	01000584 	movi	r4,22
 8030528:	acfffe04 	addi	r19,r21,-8
 803052c:	1420703a 	and	r16,r2,r16
 8030530:	20c0332e 	bgeu	r4,r3,8030600 <_realloc_r+0x128>
 8030534:	047ffe04 	movi	r17,-8
 8030538:	1c62703a 	and	r17,r3,r17
 803053c:	8807883a 	mov	r3,r17
 8030540:	88005816 	blt	r17,zero,80306a4 <_realloc_r+0x1cc>
 8030544:	8c805736 	bltu	r17,r18,80306a4 <_realloc_r+0x1cc>
 8030548:	80c0300e 	bge	r16,r3,803060c <_realloc_r+0x134>
 803054c:	070200f4 	movhi	fp,2051
 8030550:	e71fc804 	addi	fp,fp,32544
 8030554:	e1c00217 	ldw	r7,8(fp)
 8030558:	9c09883a 	add	r4,r19,r16
 803055c:	22000117 	ldw	r8,4(r4)
 8030560:	21c06326 	beq	r4,r7,80306f0 <_realloc_r+0x218>
 8030564:	017fff84 	movi	r5,-2
 8030568:	414a703a 	and	r5,r8,r5
 803056c:	214b883a 	add	r5,r4,r5
 8030570:	29800117 	ldw	r6,4(r5)
 8030574:	3180004c 	andi	r6,r6,1
 8030578:	30003f26 	beq	r6,zero,8030678 <_realloc_r+0x1a0>
 803057c:	1080004c 	andi	r2,r2,1
 8030580:	10008326 	beq	r2,zero,8030790 <_realloc_r+0x2b8>
 8030584:	900b883a 	mov	r5,r18
 8030588:	a009883a 	mov	r4,r20
 803058c:	80294700 	call	8029470 <_malloc_r>
 8030590:	1025883a 	mov	r18,r2
 8030594:	10011e26 	beq	r2,zero,8030a10 <_realloc_r+0x538>
 8030598:	a93fff17 	ldw	r4,-4(r21)
 803059c:	10fffe04 	addi	r3,r2,-8
 80305a0:	00bfff84 	movi	r2,-2
 80305a4:	2084703a 	and	r2,r4,r2
 80305a8:	9885883a 	add	r2,r19,r2
 80305ac:	1880ee26 	beq	r3,r2,8030968 <_realloc_r+0x490>
 80305b0:	81bfff04 	addi	r6,r16,-4
 80305b4:	00800904 	movi	r2,36
 80305b8:	1180b836 	bltu	r2,r6,803089c <_realloc_r+0x3c4>
 80305bc:	00c004c4 	movi	r3,19
 80305c0:	19809636 	bltu	r3,r6,803081c <_realloc_r+0x344>
 80305c4:	9005883a 	mov	r2,r18
 80305c8:	a807883a 	mov	r3,r21
 80305cc:	19000017 	ldw	r4,0(r3)
 80305d0:	11000015 	stw	r4,0(r2)
 80305d4:	19000117 	ldw	r4,4(r3)
 80305d8:	11000115 	stw	r4,4(r2)
 80305dc:	18c00217 	ldw	r3,8(r3)
 80305e0:	10c00215 	stw	r3,8(r2)
 80305e4:	a80b883a 	mov	r5,r21
 80305e8:	a009883a 	mov	r4,r20
 80305ec:	802e5880 	call	802e588 <_free_r>
 80305f0:	a009883a 	mov	r4,r20
 80305f4:	8033c540 	call	8033c54 <__malloc_unlock>
 80305f8:	9005883a 	mov	r2,r18
 80305fc:	00001206 	br	8030648 <_realloc_r+0x170>
 8030600:	00c00404 	movi	r3,16
 8030604:	1823883a 	mov	r17,r3
 8030608:	003fce06 	br	8030544 <_gp+0xfffeee38>
 803060c:	a825883a 	mov	r18,r21
 8030610:	8445c83a 	sub	r2,r16,r17
 8030614:	00c003c4 	movi	r3,15
 8030618:	18802636 	bltu	r3,r2,80306b4 <_realloc_r+0x1dc>
 803061c:	99800117 	ldw	r6,4(r19)
 8030620:	9c07883a 	add	r3,r19,r16
 8030624:	3180004c 	andi	r6,r6,1
 8030628:	3420b03a 	or	r16,r6,r16
 803062c:	9c000115 	stw	r16,4(r19)
 8030630:	18800117 	ldw	r2,4(r3)
 8030634:	10800054 	ori	r2,r2,1
 8030638:	18800115 	stw	r2,4(r3)
 803063c:	a009883a 	mov	r4,r20
 8030640:	8033c540 	call	8033c54 <__malloc_unlock>
 8030644:	9005883a 	mov	r2,r18
 8030648:	dfc00917 	ldw	ra,36(sp)
 803064c:	df000817 	ldw	fp,32(sp)
 8030650:	ddc00717 	ldw	r23,28(sp)
 8030654:	dd800617 	ldw	r22,24(sp)
 8030658:	dd400517 	ldw	r21,20(sp)
 803065c:	dd000417 	ldw	r20,16(sp)
 8030660:	dcc00317 	ldw	r19,12(sp)
 8030664:	dc800217 	ldw	r18,8(sp)
 8030668:	dc400117 	ldw	r17,4(sp)
 803066c:	dc000017 	ldw	r16,0(sp)
 8030670:	dec00a04 	addi	sp,sp,40
 8030674:	f800283a 	ret
 8030678:	017fff04 	movi	r5,-4
 803067c:	414a703a 	and	r5,r8,r5
 8030680:	814d883a 	add	r6,r16,r5
 8030684:	30c01f16 	blt	r6,r3,8030704 <_realloc_r+0x22c>
 8030688:	20800317 	ldw	r2,12(r4)
 803068c:	20c00217 	ldw	r3,8(r4)
 8030690:	a825883a 	mov	r18,r21
 8030694:	3021883a 	mov	r16,r6
 8030698:	18800315 	stw	r2,12(r3)
 803069c:	10c00215 	stw	r3,8(r2)
 80306a0:	003fdb06 	br	8030610 <_gp+0xfffeef04>
 80306a4:	00800304 	movi	r2,12
 80306a8:	a0800015 	stw	r2,0(r20)
 80306ac:	0005883a 	mov	r2,zero
 80306b0:	003fe506 	br	8030648 <_gp+0xfffeef3c>
 80306b4:	98c00117 	ldw	r3,4(r19)
 80306b8:	9c4b883a 	add	r5,r19,r17
 80306bc:	11000054 	ori	r4,r2,1
 80306c0:	18c0004c 	andi	r3,r3,1
 80306c4:	1c62b03a 	or	r17,r3,r17
 80306c8:	9c400115 	stw	r17,4(r19)
 80306cc:	29000115 	stw	r4,4(r5)
 80306d0:	2885883a 	add	r2,r5,r2
 80306d4:	10c00117 	ldw	r3,4(r2)
 80306d8:	29400204 	addi	r5,r5,8
 80306dc:	a009883a 	mov	r4,r20
 80306e0:	18c00054 	ori	r3,r3,1
 80306e4:	10c00115 	stw	r3,4(r2)
 80306e8:	802e5880 	call	802e588 <_free_r>
 80306ec:	003fd306 	br	803063c <_gp+0xfffeef30>
 80306f0:	017fff04 	movi	r5,-4
 80306f4:	414a703a 	and	r5,r8,r5
 80306f8:	89800404 	addi	r6,r17,16
 80306fc:	8151883a 	add	r8,r16,r5
 8030700:	4180590e 	bge	r8,r6,8030868 <_realloc_r+0x390>
 8030704:	1080004c 	andi	r2,r2,1
 8030708:	103f9e1e 	bne	r2,zero,8030584 <_gp+0xfffeee78>
 803070c:	adbffe17 	ldw	r22,-8(r21)
 8030710:	00bfff04 	movi	r2,-4
 8030714:	9dadc83a 	sub	r22,r19,r22
 8030718:	b1800117 	ldw	r6,4(r22)
 803071c:	3084703a 	and	r2,r6,r2
 8030720:	20002026 	beq	r4,zero,80307a4 <_realloc_r+0x2cc>
 8030724:	80af883a 	add	r23,r16,r2
 8030728:	b96f883a 	add	r23,r23,r5
 803072c:	21c05f26 	beq	r4,r7,80308ac <_realloc_r+0x3d4>
 8030730:	b8c01c16 	blt	r23,r3,80307a4 <_realloc_r+0x2cc>
 8030734:	20800317 	ldw	r2,12(r4)
 8030738:	20c00217 	ldw	r3,8(r4)
 803073c:	81bfff04 	addi	r6,r16,-4
 8030740:	01000904 	movi	r4,36
 8030744:	18800315 	stw	r2,12(r3)
 8030748:	10c00215 	stw	r3,8(r2)
 803074c:	b0c00217 	ldw	r3,8(r22)
 8030750:	b0800317 	ldw	r2,12(r22)
 8030754:	b4800204 	addi	r18,r22,8
 8030758:	18800315 	stw	r2,12(r3)
 803075c:	10c00215 	stw	r3,8(r2)
 8030760:	21801b36 	bltu	r4,r6,80307d0 <_realloc_r+0x2f8>
 8030764:	008004c4 	movi	r2,19
 8030768:	1180352e 	bgeu	r2,r6,8030840 <_realloc_r+0x368>
 803076c:	a8800017 	ldw	r2,0(r21)
 8030770:	b0800215 	stw	r2,8(r22)
 8030774:	a8800117 	ldw	r2,4(r21)
 8030778:	b0800315 	stw	r2,12(r22)
 803077c:	008006c4 	movi	r2,27
 8030780:	11807f36 	bltu	r2,r6,8030980 <_realloc_r+0x4a8>
 8030784:	b0800404 	addi	r2,r22,16
 8030788:	ad400204 	addi	r21,r21,8
 803078c:	00002d06 	br	8030844 <_realloc_r+0x36c>
 8030790:	adbffe17 	ldw	r22,-8(r21)
 8030794:	00bfff04 	movi	r2,-4
 8030798:	9dadc83a 	sub	r22,r19,r22
 803079c:	b1000117 	ldw	r4,4(r22)
 80307a0:	2084703a 	and	r2,r4,r2
 80307a4:	b03f7726 	beq	r22,zero,8030584 <_gp+0xfffeee78>
 80307a8:	80af883a 	add	r23,r16,r2
 80307ac:	b8ff7516 	blt	r23,r3,8030584 <_gp+0xfffeee78>
 80307b0:	b0800317 	ldw	r2,12(r22)
 80307b4:	b0c00217 	ldw	r3,8(r22)
 80307b8:	81bfff04 	addi	r6,r16,-4
 80307bc:	01000904 	movi	r4,36
 80307c0:	18800315 	stw	r2,12(r3)
 80307c4:	10c00215 	stw	r3,8(r2)
 80307c8:	b4800204 	addi	r18,r22,8
 80307cc:	21bfe52e 	bgeu	r4,r6,8030764 <_gp+0xfffef058>
 80307d0:	a80b883a 	mov	r5,r21
 80307d4:	9009883a 	mov	r4,r18
 80307d8:	802f2580 	call	802f258 <memmove>
 80307dc:	b821883a 	mov	r16,r23
 80307e0:	b027883a 	mov	r19,r22
 80307e4:	003f8a06 	br	8030610 <_gp+0xfffeef04>
 80307e8:	300b883a 	mov	r5,r6
 80307ec:	dfc00917 	ldw	ra,36(sp)
 80307f0:	df000817 	ldw	fp,32(sp)
 80307f4:	ddc00717 	ldw	r23,28(sp)
 80307f8:	dd800617 	ldw	r22,24(sp)
 80307fc:	dd400517 	ldw	r21,20(sp)
 8030800:	dd000417 	ldw	r20,16(sp)
 8030804:	dcc00317 	ldw	r19,12(sp)
 8030808:	dc800217 	ldw	r18,8(sp)
 803080c:	dc400117 	ldw	r17,4(sp)
 8030810:	dc000017 	ldw	r16,0(sp)
 8030814:	dec00a04 	addi	sp,sp,40
 8030818:	80294701 	jmpi	8029470 <_malloc_r>
 803081c:	a8c00017 	ldw	r3,0(r21)
 8030820:	90c00015 	stw	r3,0(r18)
 8030824:	a8c00117 	ldw	r3,4(r21)
 8030828:	90c00115 	stw	r3,4(r18)
 803082c:	00c006c4 	movi	r3,27
 8030830:	19804536 	bltu	r3,r6,8030948 <_realloc_r+0x470>
 8030834:	90800204 	addi	r2,r18,8
 8030838:	a8c00204 	addi	r3,r21,8
 803083c:	003f6306 	br	80305cc <_gp+0xfffeeec0>
 8030840:	9005883a 	mov	r2,r18
 8030844:	a8c00017 	ldw	r3,0(r21)
 8030848:	b821883a 	mov	r16,r23
 803084c:	b027883a 	mov	r19,r22
 8030850:	10c00015 	stw	r3,0(r2)
 8030854:	a8c00117 	ldw	r3,4(r21)
 8030858:	10c00115 	stw	r3,4(r2)
 803085c:	a8c00217 	ldw	r3,8(r21)
 8030860:	10c00215 	stw	r3,8(r2)
 8030864:	003f6a06 	br	8030610 <_gp+0xfffeef04>
 8030868:	9c67883a 	add	r19,r19,r17
 803086c:	4445c83a 	sub	r2,r8,r17
 8030870:	e4c00215 	stw	r19,8(fp)
 8030874:	10800054 	ori	r2,r2,1
 8030878:	98800115 	stw	r2,4(r19)
 803087c:	a8bfff17 	ldw	r2,-4(r21)
 8030880:	a009883a 	mov	r4,r20
 8030884:	1080004c 	andi	r2,r2,1
 8030888:	1462b03a 	or	r17,r2,r17
 803088c:	ac7fff15 	stw	r17,-4(r21)
 8030890:	8033c540 	call	8033c54 <__malloc_unlock>
 8030894:	a805883a 	mov	r2,r21
 8030898:	003f6b06 	br	8030648 <_gp+0xfffeef3c>
 803089c:	a80b883a 	mov	r5,r21
 80308a0:	9009883a 	mov	r4,r18
 80308a4:	802f2580 	call	802f258 <memmove>
 80308a8:	003f4e06 	br	80305e4 <_gp+0xfffeeed8>
 80308ac:	89000404 	addi	r4,r17,16
 80308b0:	b93fbc16 	blt	r23,r4,80307a4 <_gp+0xfffef098>
 80308b4:	b0800317 	ldw	r2,12(r22)
 80308b8:	b0c00217 	ldw	r3,8(r22)
 80308bc:	81bfff04 	addi	r6,r16,-4
 80308c0:	01000904 	movi	r4,36
 80308c4:	18800315 	stw	r2,12(r3)
 80308c8:	10c00215 	stw	r3,8(r2)
 80308cc:	b4800204 	addi	r18,r22,8
 80308d0:	21804336 	bltu	r4,r6,80309e0 <_realloc_r+0x508>
 80308d4:	008004c4 	movi	r2,19
 80308d8:	11803f2e 	bgeu	r2,r6,80309d8 <_realloc_r+0x500>
 80308dc:	a8800017 	ldw	r2,0(r21)
 80308e0:	b0800215 	stw	r2,8(r22)
 80308e4:	a8800117 	ldw	r2,4(r21)
 80308e8:	b0800315 	stw	r2,12(r22)
 80308ec:	008006c4 	movi	r2,27
 80308f0:	11803f36 	bltu	r2,r6,80309f0 <_realloc_r+0x518>
 80308f4:	b0800404 	addi	r2,r22,16
 80308f8:	ad400204 	addi	r21,r21,8
 80308fc:	a8c00017 	ldw	r3,0(r21)
 8030900:	10c00015 	stw	r3,0(r2)
 8030904:	a8c00117 	ldw	r3,4(r21)
 8030908:	10c00115 	stw	r3,4(r2)
 803090c:	a8c00217 	ldw	r3,8(r21)
 8030910:	10c00215 	stw	r3,8(r2)
 8030914:	b447883a 	add	r3,r22,r17
 8030918:	bc45c83a 	sub	r2,r23,r17
 803091c:	e0c00215 	stw	r3,8(fp)
 8030920:	10800054 	ori	r2,r2,1
 8030924:	18800115 	stw	r2,4(r3)
 8030928:	b0800117 	ldw	r2,4(r22)
 803092c:	a009883a 	mov	r4,r20
 8030930:	1080004c 	andi	r2,r2,1
 8030934:	1462b03a 	or	r17,r2,r17
 8030938:	b4400115 	stw	r17,4(r22)
 803093c:	8033c540 	call	8033c54 <__malloc_unlock>
 8030940:	9005883a 	mov	r2,r18
 8030944:	003f4006 	br	8030648 <_gp+0xfffeef3c>
 8030948:	a8c00217 	ldw	r3,8(r21)
 803094c:	90c00215 	stw	r3,8(r18)
 8030950:	a8c00317 	ldw	r3,12(r21)
 8030954:	90c00315 	stw	r3,12(r18)
 8030958:	30801126 	beq	r6,r2,80309a0 <_realloc_r+0x4c8>
 803095c:	90800404 	addi	r2,r18,16
 8030960:	a8c00404 	addi	r3,r21,16
 8030964:	003f1906 	br	80305cc <_gp+0xfffeeec0>
 8030968:	90ffff17 	ldw	r3,-4(r18)
 803096c:	00bfff04 	movi	r2,-4
 8030970:	a825883a 	mov	r18,r21
 8030974:	1884703a 	and	r2,r3,r2
 8030978:	80a1883a 	add	r16,r16,r2
 803097c:	003f2406 	br	8030610 <_gp+0xfffeef04>
 8030980:	a8800217 	ldw	r2,8(r21)
 8030984:	b0800415 	stw	r2,16(r22)
 8030988:	a8800317 	ldw	r2,12(r21)
 803098c:	b0800515 	stw	r2,20(r22)
 8030990:	31000a26 	beq	r6,r4,80309bc <_realloc_r+0x4e4>
 8030994:	b0800604 	addi	r2,r22,24
 8030998:	ad400404 	addi	r21,r21,16
 803099c:	003fa906 	br	8030844 <_gp+0xfffef138>
 80309a0:	a9000417 	ldw	r4,16(r21)
 80309a4:	90800604 	addi	r2,r18,24
 80309a8:	a8c00604 	addi	r3,r21,24
 80309ac:	91000415 	stw	r4,16(r18)
 80309b0:	a9000517 	ldw	r4,20(r21)
 80309b4:	91000515 	stw	r4,20(r18)
 80309b8:	003f0406 	br	80305cc <_gp+0xfffeeec0>
 80309bc:	a8c00417 	ldw	r3,16(r21)
 80309c0:	ad400604 	addi	r21,r21,24
 80309c4:	b0800804 	addi	r2,r22,32
 80309c8:	b0c00615 	stw	r3,24(r22)
 80309cc:	a8ffff17 	ldw	r3,-4(r21)
 80309d0:	b0c00715 	stw	r3,28(r22)
 80309d4:	003f9b06 	br	8030844 <_gp+0xfffef138>
 80309d8:	9005883a 	mov	r2,r18
 80309dc:	003fc706 	br	80308fc <_gp+0xfffef1f0>
 80309e0:	a80b883a 	mov	r5,r21
 80309e4:	9009883a 	mov	r4,r18
 80309e8:	802f2580 	call	802f258 <memmove>
 80309ec:	003fc906 	br	8030914 <_gp+0xfffef208>
 80309f0:	a8800217 	ldw	r2,8(r21)
 80309f4:	b0800415 	stw	r2,16(r22)
 80309f8:	a8800317 	ldw	r2,12(r21)
 80309fc:	b0800515 	stw	r2,20(r22)
 8030a00:	31000726 	beq	r6,r4,8030a20 <_realloc_r+0x548>
 8030a04:	b0800604 	addi	r2,r22,24
 8030a08:	ad400404 	addi	r21,r21,16
 8030a0c:	003fbb06 	br	80308fc <_gp+0xfffef1f0>
 8030a10:	a009883a 	mov	r4,r20
 8030a14:	8033c540 	call	8033c54 <__malloc_unlock>
 8030a18:	0005883a 	mov	r2,zero
 8030a1c:	003f0a06 	br	8030648 <_gp+0xfffeef3c>
 8030a20:	a8c00417 	ldw	r3,16(r21)
 8030a24:	ad400604 	addi	r21,r21,24
 8030a28:	b0800804 	addi	r2,r22,32
 8030a2c:	b0c00615 	stw	r3,24(r22)
 8030a30:	a8ffff17 	ldw	r3,-4(r21)
 8030a34:	b0c00715 	stw	r3,28(r22)
 8030a38:	003fb006 	br	80308fc <_gp+0xfffef1f0>

08030a3c <__sread>:
 8030a3c:	defffe04 	addi	sp,sp,-8
 8030a40:	dc000015 	stw	r16,0(sp)
 8030a44:	2821883a 	mov	r16,r5
 8030a48:	2940038f 	ldh	r5,14(r5)
 8030a4c:	dfc00115 	stw	ra,4(sp)
 8030a50:	80328300 	call	8032830 <_read_r>
 8030a54:	10000716 	blt	r2,zero,8030a74 <__sread+0x38>
 8030a58:	80c01417 	ldw	r3,80(r16)
 8030a5c:	1887883a 	add	r3,r3,r2
 8030a60:	80c01415 	stw	r3,80(r16)
 8030a64:	dfc00117 	ldw	ra,4(sp)
 8030a68:	dc000017 	ldw	r16,0(sp)
 8030a6c:	dec00204 	addi	sp,sp,8
 8030a70:	f800283a 	ret
 8030a74:	80c0030b 	ldhu	r3,12(r16)
 8030a78:	18fbffcc 	andi	r3,r3,61439
 8030a7c:	80c0030d 	sth	r3,12(r16)
 8030a80:	dfc00117 	ldw	ra,4(sp)
 8030a84:	dc000017 	ldw	r16,0(sp)
 8030a88:	dec00204 	addi	sp,sp,8
 8030a8c:	f800283a 	ret

08030a90 <__seofread>:
 8030a90:	0005883a 	mov	r2,zero
 8030a94:	f800283a 	ret

08030a98 <__swrite>:
 8030a98:	2880030b 	ldhu	r2,12(r5)
 8030a9c:	defffb04 	addi	sp,sp,-20
 8030aa0:	dcc00315 	stw	r19,12(sp)
 8030aa4:	dc800215 	stw	r18,8(sp)
 8030aa8:	dc400115 	stw	r17,4(sp)
 8030aac:	dc000015 	stw	r16,0(sp)
 8030ab0:	dfc00415 	stw	ra,16(sp)
 8030ab4:	10c0400c 	andi	r3,r2,256
 8030ab8:	2821883a 	mov	r16,r5
 8030abc:	2023883a 	mov	r17,r4
 8030ac0:	3025883a 	mov	r18,r6
 8030ac4:	3827883a 	mov	r19,r7
 8030ac8:	18000526 	beq	r3,zero,8030ae0 <__swrite+0x48>
 8030acc:	2940038f 	ldh	r5,14(r5)
 8030ad0:	01c00084 	movi	r7,2
 8030ad4:	000d883a 	mov	r6,zero
 8030ad8:	80327d00 	call	80327d0 <_lseek_r>
 8030adc:	8080030b 	ldhu	r2,12(r16)
 8030ae0:	8140038f 	ldh	r5,14(r16)
 8030ae4:	10bbffcc 	andi	r2,r2,61439
 8030ae8:	980f883a 	mov	r7,r19
 8030aec:	900d883a 	mov	r6,r18
 8030af0:	8809883a 	mov	r4,r17
 8030af4:	8080030d 	sth	r2,12(r16)
 8030af8:	dfc00417 	ldw	ra,16(sp)
 8030afc:	dcc00317 	ldw	r19,12(sp)
 8030b00:	dc800217 	ldw	r18,8(sp)
 8030b04:	dc400117 	ldw	r17,4(sp)
 8030b08:	dc000017 	ldw	r16,0(sp)
 8030b0c:	dec00504 	addi	sp,sp,20
 8030b10:	803229c1 	jmpi	803229c <_write_r>

08030b14 <__sseek>:
 8030b14:	defffe04 	addi	sp,sp,-8
 8030b18:	dc000015 	stw	r16,0(sp)
 8030b1c:	2821883a 	mov	r16,r5
 8030b20:	2940038f 	ldh	r5,14(r5)
 8030b24:	dfc00115 	stw	ra,4(sp)
 8030b28:	80327d00 	call	80327d0 <_lseek_r>
 8030b2c:	00ffffc4 	movi	r3,-1
 8030b30:	10c00826 	beq	r2,r3,8030b54 <__sseek+0x40>
 8030b34:	80c0030b 	ldhu	r3,12(r16)
 8030b38:	80801415 	stw	r2,80(r16)
 8030b3c:	18c40014 	ori	r3,r3,4096
 8030b40:	80c0030d 	sth	r3,12(r16)
 8030b44:	dfc00117 	ldw	ra,4(sp)
 8030b48:	dc000017 	ldw	r16,0(sp)
 8030b4c:	dec00204 	addi	sp,sp,8
 8030b50:	f800283a 	ret
 8030b54:	80c0030b 	ldhu	r3,12(r16)
 8030b58:	18fbffcc 	andi	r3,r3,61439
 8030b5c:	80c0030d 	sth	r3,12(r16)
 8030b60:	dfc00117 	ldw	ra,4(sp)
 8030b64:	dc000017 	ldw	r16,0(sp)
 8030b68:	dec00204 	addi	sp,sp,8
 8030b6c:	f800283a 	ret

08030b70 <__sclose>:
 8030b70:	2940038f 	ldh	r5,14(r5)
 8030b74:	80322fc1 	jmpi	80322fc <_close_r>

08030b78 <strcmp>:
 8030b78:	2144b03a 	or	r2,r4,r5
 8030b7c:	108000cc 	andi	r2,r2,3
 8030b80:	1000171e 	bne	r2,zero,8030be0 <strcmp+0x68>
 8030b84:	20800017 	ldw	r2,0(r4)
 8030b88:	28c00017 	ldw	r3,0(r5)
 8030b8c:	10c0141e 	bne	r2,r3,8030be0 <strcmp+0x68>
 8030b90:	027fbff4 	movhi	r9,65279
 8030b94:	4a7fbfc4 	addi	r9,r9,-257
 8030b98:	0086303a 	nor	r3,zero,r2
 8030b9c:	02202074 	movhi	r8,32897
 8030ba0:	1245883a 	add	r2,r2,r9
 8030ba4:	42202004 	addi	r8,r8,-32640
 8030ba8:	10c4703a 	and	r2,r2,r3
 8030bac:	1204703a 	and	r2,r2,r8
 8030bb0:	10000226 	beq	r2,zero,8030bbc <strcmp+0x44>
 8030bb4:	00002306 	br	8030c44 <strcmp+0xcc>
 8030bb8:	1000221e 	bne	r2,zero,8030c44 <strcmp+0xcc>
 8030bbc:	21000104 	addi	r4,r4,4
 8030bc0:	20c00017 	ldw	r3,0(r4)
 8030bc4:	29400104 	addi	r5,r5,4
 8030bc8:	29800017 	ldw	r6,0(r5)
 8030bcc:	1a4f883a 	add	r7,r3,r9
 8030bd0:	00c4303a 	nor	r2,zero,r3
 8030bd4:	3884703a 	and	r2,r7,r2
 8030bd8:	1204703a 	and	r2,r2,r8
 8030bdc:	19bff626 	beq	r3,r6,8030bb8 <_gp+0xfffef4ac>
 8030be0:	20800003 	ldbu	r2,0(r4)
 8030be4:	10c03fcc 	andi	r3,r2,255
 8030be8:	18c0201c 	xori	r3,r3,128
 8030bec:	18ffe004 	addi	r3,r3,-128
 8030bf0:	18000c26 	beq	r3,zero,8030c24 <strcmp+0xac>
 8030bf4:	29800007 	ldb	r6,0(r5)
 8030bf8:	19800326 	beq	r3,r6,8030c08 <strcmp+0x90>
 8030bfc:	00001306 	br	8030c4c <strcmp+0xd4>
 8030c00:	29800007 	ldb	r6,0(r5)
 8030c04:	11800b1e 	bne	r2,r6,8030c34 <strcmp+0xbc>
 8030c08:	21000044 	addi	r4,r4,1
 8030c0c:	20c00003 	ldbu	r3,0(r4)
 8030c10:	29400044 	addi	r5,r5,1
 8030c14:	18803fcc 	andi	r2,r3,255
 8030c18:	1080201c 	xori	r2,r2,128
 8030c1c:	10bfe004 	addi	r2,r2,-128
 8030c20:	103ff71e 	bne	r2,zero,8030c00 <_gp+0xfffef4f4>
 8030c24:	0007883a 	mov	r3,zero
 8030c28:	28800003 	ldbu	r2,0(r5)
 8030c2c:	1885c83a 	sub	r2,r3,r2
 8030c30:	f800283a 	ret
 8030c34:	28800003 	ldbu	r2,0(r5)
 8030c38:	18c03fcc 	andi	r3,r3,255
 8030c3c:	1885c83a 	sub	r2,r3,r2
 8030c40:	f800283a 	ret
 8030c44:	0005883a 	mov	r2,zero
 8030c48:	f800283a 	ret
 8030c4c:	10c03fcc 	andi	r3,r2,255
 8030c50:	003ff506 	br	8030c28 <_gp+0xfffef51c>

08030c54 <__sprint_r.part.0>:
 8030c54:	28801917 	ldw	r2,100(r5)
 8030c58:	defff604 	addi	sp,sp,-40
 8030c5c:	dd400515 	stw	r21,20(sp)
 8030c60:	dfc00915 	stw	ra,36(sp)
 8030c64:	df000815 	stw	fp,32(sp)
 8030c68:	ddc00715 	stw	r23,28(sp)
 8030c6c:	dd800615 	stw	r22,24(sp)
 8030c70:	dd000415 	stw	r20,16(sp)
 8030c74:	dcc00315 	stw	r19,12(sp)
 8030c78:	dc800215 	stw	r18,8(sp)
 8030c7c:	dc400115 	stw	r17,4(sp)
 8030c80:	dc000015 	stw	r16,0(sp)
 8030c84:	1088000c 	andi	r2,r2,8192
 8030c88:	302b883a 	mov	r21,r6
 8030c8c:	10002e26 	beq	r2,zero,8030d48 <__sprint_r.part.0+0xf4>
 8030c90:	30800217 	ldw	r2,8(r6)
 8030c94:	35800017 	ldw	r22,0(r6)
 8030c98:	10002926 	beq	r2,zero,8030d40 <__sprint_r.part.0+0xec>
 8030c9c:	2827883a 	mov	r19,r5
 8030ca0:	2029883a 	mov	r20,r4
 8030ca4:	b5c00104 	addi	r23,r22,4
 8030ca8:	04bfffc4 	movi	r18,-1
 8030cac:	bc400017 	ldw	r17,0(r23)
 8030cb0:	b4000017 	ldw	r16,0(r22)
 8030cb4:	0039883a 	mov	fp,zero
 8030cb8:	8822d0ba 	srli	r17,r17,2
 8030cbc:	8800031e 	bne	r17,zero,8030ccc <__sprint_r.part.0+0x78>
 8030cc0:	00001806 	br	8030d24 <__sprint_r.part.0+0xd0>
 8030cc4:	84000104 	addi	r16,r16,4
 8030cc8:	8f001526 	beq	r17,fp,8030d20 <__sprint_r.part.0+0xcc>
 8030ccc:	81400017 	ldw	r5,0(r16)
 8030cd0:	980d883a 	mov	r6,r19
 8030cd4:	a009883a 	mov	r4,r20
 8030cd8:	803267c0 	call	803267c <_fputwc_r>
 8030cdc:	e7000044 	addi	fp,fp,1
 8030ce0:	14bff81e 	bne	r2,r18,8030cc4 <_gp+0xfffef5b8>
 8030ce4:	9005883a 	mov	r2,r18
 8030ce8:	a8000215 	stw	zero,8(r21)
 8030cec:	a8000115 	stw	zero,4(r21)
 8030cf0:	dfc00917 	ldw	ra,36(sp)
 8030cf4:	df000817 	ldw	fp,32(sp)
 8030cf8:	ddc00717 	ldw	r23,28(sp)
 8030cfc:	dd800617 	ldw	r22,24(sp)
 8030d00:	dd400517 	ldw	r21,20(sp)
 8030d04:	dd000417 	ldw	r20,16(sp)
 8030d08:	dcc00317 	ldw	r19,12(sp)
 8030d0c:	dc800217 	ldw	r18,8(sp)
 8030d10:	dc400117 	ldw	r17,4(sp)
 8030d14:	dc000017 	ldw	r16,0(sp)
 8030d18:	dec00a04 	addi	sp,sp,40
 8030d1c:	f800283a 	ret
 8030d20:	a8800217 	ldw	r2,8(r21)
 8030d24:	8c63883a 	add	r17,r17,r17
 8030d28:	8c63883a 	add	r17,r17,r17
 8030d2c:	1445c83a 	sub	r2,r2,r17
 8030d30:	a8800215 	stw	r2,8(r21)
 8030d34:	b5800204 	addi	r22,r22,8
 8030d38:	bdc00204 	addi	r23,r23,8
 8030d3c:	103fdb1e 	bne	r2,zero,8030cac <_gp+0xfffef5a0>
 8030d40:	0005883a 	mov	r2,zero
 8030d44:	003fe806 	br	8030ce8 <_gp+0xfffef5dc>
 8030d48:	802e8980 	call	802e898 <__sfvwrite_r>
 8030d4c:	003fe606 	br	8030ce8 <_gp+0xfffef5dc>

08030d50 <__sprint_r>:
 8030d50:	30c00217 	ldw	r3,8(r6)
 8030d54:	18000126 	beq	r3,zero,8030d5c <__sprint_r+0xc>
 8030d58:	8030c541 	jmpi	8030c54 <__sprint_r.part.0>
 8030d5c:	30000115 	stw	zero,4(r6)
 8030d60:	0005883a 	mov	r2,zero
 8030d64:	f800283a 	ret

08030d68 <___vfiprintf_internal_r>:
 8030d68:	deffc904 	addi	sp,sp,-220
 8030d6c:	df003515 	stw	fp,212(sp)
 8030d70:	dd003115 	stw	r20,196(sp)
 8030d74:	dfc03615 	stw	ra,216(sp)
 8030d78:	ddc03415 	stw	r23,208(sp)
 8030d7c:	dd803315 	stw	r22,204(sp)
 8030d80:	dd403215 	stw	r21,200(sp)
 8030d84:	dcc03015 	stw	r19,192(sp)
 8030d88:	dc802f15 	stw	r18,188(sp)
 8030d8c:	dc402e15 	stw	r17,184(sp)
 8030d90:	dc002d15 	stw	r16,180(sp)
 8030d94:	d9002015 	stw	r4,128(sp)
 8030d98:	d9c02215 	stw	r7,136(sp)
 8030d9c:	2829883a 	mov	r20,r5
 8030da0:	3039883a 	mov	fp,r6
 8030da4:	20000226 	beq	r4,zero,8030db0 <___vfiprintf_internal_r+0x48>
 8030da8:	20800e17 	ldw	r2,56(r4)
 8030dac:	1000cf26 	beq	r2,zero,80310ec <___vfiprintf_internal_r+0x384>
 8030db0:	a080030b 	ldhu	r2,12(r20)
 8030db4:	10c8000c 	andi	r3,r2,8192
 8030db8:	1800061e 	bne	r3,zero,8030dd4 <___vfiprintf_internal_r+0x6c>
 8030dbc:	a1001917 	ldw	r4,100(r20)
 8030dc0:	00f7ffc4 	movi	r3,-8193
 8030dc4:	10880014 	ori	r2,r2,8192
 8030dc8:	20c6703a 	and	r3,r4,r3
 8030dcc:	a080030d 	sth	r2,12(r20)
 8030dd0:	a0c01915 	stw	r3,100(r20)
 8030dd4:	10c0020c 	andi	r3,r2,8
 8030dd8:	1800a926 	beq	r3,zero,8031080 <___vfiprintf_internal_r+0x318>
 8030ddc:	a0c00417 	ldw	r3,16(r20)
 8030de0:	1800a726 	beq	r3,zero,8031080 <___vfiprintf_internal_r+0x318>
 8030de4:	1080068c 	andi	r2,r2,26
 8030de8:	00c00284 	movi	r3,10
 8030dec:	10c0ac26 	beq	r2,r3,80310a0 <___vfiprintf_internal_r+0x338>
 8030df0:	da801a04 	addi	r10,sp,104
 8030df4:	da801e15 	stw	r10,120(sp)
 8030df8:	d8801e17 	ldw	r2,120(sp)
 8030dfc:	da8019c4 	addi	r10,sp,103
 8030e00:	058200f4 	movhi	r22,2051
 8030e04:	05c200f4 	movhi	r23,2051
 8030e08:	da801f15 	stw	r10,124(sp)
 8030e0c:	1295c83a 	sub	r10,r2,r10
 8030e10:	b59e9804 	addi	r22,r22,31328
 8030e14:	bdde9404 	addi	r23,r23,31312
 8030e18:	dec01a15 	stw	sp,104(sp)
 8030e1c:	d8001c15 	stw	zero,112(sp)
 8030e20:	d8001b15 	stw	zero,108(sp)
 8030e24:	d8002615 	stw	zero,152(sp)
 8030e28:	d8002315 	stw	zero,140(sp)
 8030e2c:	da802715 	stw	r10,156(sp)
 8030e30:	d811883a 	mov	r8,sp
 8030e34:	dd002115 	stw	r20,132(sp)
 8030e38:	e021883a 	mov	r16,fp
 8030e3c:	80800007 	ldb	r2,0(r16)
 8030e40:	1003ea26 	beq	r2,zero,8031dec <___vfiprintf_internal_r+0x1084>
 8030e44:	00c00944 	movi	r3,37
 8030e48:	8025883a 	mov	r18,r16
 8030e4c:	10c0021e 	bne	r2,r3,8030e58 <___vfiprintf_internal_r+0xf0>
 8030e50:	00001606 	br	8030eac <___vfiprintf_internal_r+0x144>
 8030e54:	10c00326 	beq	r2,r3,8030e64 <___vfiprintf_internal_r+0xfc>
 8030e58:	94800044 	addi	r18,r18,1
 8030e5c:	90800007 	ldb	r2,0(r18)
 8030e60:	103ffc1e 	bne	r2,zero,8030e54 <_gp+0xfffef748>
 8030e64:	9423c83a 	sub	r17,r18,r16
 8030e68:	88001026 	beq	r17,zero,8030eac <___vfiprintf_internal_r+0x144>
 8030e6c:	d8c01c17 	ldw	r3,112(sp)
 8030e70:	d8801b17 	ldw	r2,108(sp)
 8030e74:	44000015 	stw	r16,0(r8)
 8030e78:	88c7883a 	add	r3,r17,r3
 8030e7c:	10800044 	addi	r2,r2,1
 8030e80:	44400115 	stw	r17,4(r8)
 8030e84:	d8c01c15 	stw	r3,112(sp)
 8030e88:	d8801b15 	stw	r2,108(sp)
 8030e8c:	010001c4 	movi	r4,7
 8030e90:	2080760e 	bge	r4,r2,803106c <___vfiprintf_internal_r+0x304>
 8030e94:	1803821e 	bne	r3,zero,8031ca0 <___vfiprintf_internal_r+0xf38>
 8030e98:	da802317 	ldw	r10,140(sp)
 8030e9c:	d8001b15 	stw	zero,108(sp)
 8030ea0:	d811883a 	mov	r8,sp
 8030ea4:	5455883a 	add	r10,r10,r17
 8030ea8:	da802315 	stw	r10,140(sp)
 8030eac:	90800007 	ldb	r2,0(r18)
 8030eb0:	10044626 	beq	r2,zero,8031fcc <___vfiprintf_internal_r+0x1264>
 8030eb4:	90c00047 	ldb	r3,1(r18)
 8030eb8:	94000044 	addi	r16,r18,1
 8030ebc:	d8001d85 	stb	zero,118(sp)
 8030ec0:	0009883a 	mov	r4,zero
 8030ec4:	000f883a 	mov	r7,zero
 8030ec8:	027fffc4 	movi	r9,-1
 8030ecc:	0023883a 	mov	r17,zero
 8030ed0:	0029883a 	mov	r20,zero
 8030ed4:	01401604 	movi	r5,88
 8030ed8:	01800244 	movi	r6,9
 8030edc:	03400a84 	movi	r13,42
 8030ee0:	03001b04 	movi	r12,108
 8030ee4:	84000044 	addi	r16,r16,1
 8030ee8:	18bff804 	addi	r2,r3,-32
 8030eec:	28827336 	bltu	r5,r2,80318bc <___vfiprintf_internal_r+0xb54>
 8030ef0:	100490ba 	slli	r2,r2,2
 8030ef4:	028200f4 	movhi	r10,2051
 8030ef8:	5283c204 	addi	r10,r10,3848
 8030efc:	1285883a 	add	r2,r2,r10
 8030f00:	10800017 	ldw	r2,0(r2)
 8030f04:	1000683a 	jmp	r2
 8030f08:	080315f0 	cmpltui	zero,at,3159
 8030f0c:	080318bc 	xorhi	zero,at,3170
 8030f10:	080318bc 	xorhi	zero,at,3170
 8030f14:	08031610 	cmplti	zero,at,3160
 8030f18:	080318bc 	xorhi	zero,at,3170
 8030f1c:	080318bc 	xorhi	zero,at,3170
 8030f20:	080318bc 	xorhi	zero,at,3170
 8030f24:	080318bc 	xorhi	zero,at,3170
 8030f28:	080318bc 	xorhi	zero,at,3170
 8030f2c:	080318bc 	xorhi	zero,at,3170
 8030f30:	080317f8 	rdprs	zero,at,3167
 8030f34:	08031814 	ori	zero,at,3168
 8030f38:	080318bc 	xorhi	zero,at,3170
 8030f3c:	080310fc 	xorhi	zero,at,3139
 8030f40:	08031824 	muli	zero,at,3168
 8030f44:	080318bc 	xorhi	zero,at,3170
 8030f48:	0803161c 	xori	zero,at,3160
 8030f4c:	08031628 	cmpgeui	zero,at,3160
 8030f50:	08031628 	cmpgeui	zero,at,3160
 8030f54:	08031628 	cmpgeui	zero,at,3160
 8030f58:	08031628 	cmpgeui	zero,at,3160
 8030f5c:	08031628 	cmpgeui	zero,at,3160
 8030f60:	08031628 	cmpgeui	zero,at,3160
 8030f64:	08031628 	cmpgeui	zero,at,3160
 8030f68:	08031628 	cmpgeui	zero,at,3160
 8030f6c:	08031628 	cmpgeui	zero,at,3160
 8030f70:	080318bc 	xorhi	zero,at,3170
 8030f74:	080318bc 	xorhi	zero,at,3170
 8030f78:	080318bc 	xorhi	zero,at,3170
 8030f7c:	080318bc 	xorhi	zero,at,3170
 8030f80:	080318bc 	xorhi	zero,at,3170
 8030f84:	080318bc 	xorhi	zero,at,3170
 8030f88:	080318bc 	xorhi	zero,at,3170
 8030f8c:	080318bc 	xorhi	zero,at,3170
 8030f90:	080318bc 	xorhi	zero,at,3170
 8030f94:	080318bc 	xorhi	zero,at,3170
 8030f98:	08031654 	ori	zero,at,3161
 8030f9c:	080318bc 	xorhi	zero,at,3170
 8030fa0:	080318bc 	xorhi	zero,at,3170
 8030fa4:	080318bc 	xorhi	zero,at,3170
 8030fa8:	080318bc 	xorhi	zero,at,3170
 8030fac:	080318bc 	xorhi	zero,at,3170
 8030fb0:	080318bc 	xorhi	zero,at,3170
 8030fb4:	080318bc 	xorhi	zero,at,3170
 8030fb8:	080318bc 	xorhi	zero,at,3170
 8030fbc:	080318bc 	xorhi	zero,at,3170
 8030fc0:	080318bc 	xorhi	zero,at,3170
 8030fc4:	0803168c 	andi	zero,at,3162
 8030fc8:	080318bc 	xorhi	zero,at,3170
 8030fcc:	080318bc 	xorhi	zero,at,3170
 8030fd0:	080318bc 	xorhi	zero,at,3170
 8030fd4:	080318bc 	xorhi	zero,at,3170
 8030fd8:	080318bc 	xorhi	zero,at,3170
 8030fdc:	080316e4 	muli	zero,at,3163
 8030fe0:	080318bc 	xorhi	zero,at,3170
 8030fe4:	080318bc 	xorhi	zero,at,3170
 8030fe8:	08031754 	ori	zero,at,3165
 8030fec:	080318bc 	xorhi	zero,at,3170
 8030ff0:	080318bc 	xorhi	zero,at,3170
 8030ff4:	080318bc 	xorhi	zero,at,3170
 8030ff8:	080318bc 	xorhi	zero,at,3170
 8030ffc:	080318bc 	xorhi	zero,at,3170
 8031000:	080318bc 	xorhi	zero,at,3170
 8031004:	080318bc 	xorhi	zero,at,3170
 8031008:	080318bc 	xorhi	zero,at,3170
 803100c:	080318bc 	xorhi	zero,at,3170
 8031010:	080318bc 	xorhi	zero,at,3170
 8031014:	08031500 	call	803150 <__alt_mem_SDRAM_controller-0x37fceb0>
 8031018:	0803152c 	andhi	zero,at,3156
 803101c:	080318bc 	xorhi	zero,at,3170
 8031020:	080318bc 	xorhi	zero,at,3170
 8031024:	080318bc 	xorhi	zero,at,3170
 8031028:	08031864 	muli	zero,at,3169
 803102c:	0803152c 	andhi	zero,at,3156
 8031030:	080318bc 	xorhi	zero,at,3170
 8031034:	080318bc 	xorhi	zero,at,3170
 8031038:	080313c0 	call	80313c <__alt_mem_SDRAM_controller-0x37fcec4>
 803103c:	080318bc 	xorhi	zero,at,3170
 8031040:	080313d0 	cmplti	zero,at,3151
 8031044:	0803140c 	andi	zero,at,3152
 8031048:	08031108 	cmpgei	zero,at,3140
 803104c:	080313b4 	orhi	zero,at,3150
 8031050:	080318bc 	xorhi	zero,at,3170
 8031054:	08031790 	cmplti	zero,at,3166
 8031058:	080318bc 	xorhi	zero,at,3170
 803105c:	080317e8 	cmpgeui	zero,at,3167
 8031060:	080318bc 	xorhi	zero,at,3170
 8031064:	080318bc 	xorhi	zero,at,3170
 8031068:	080314ac 	andhi	zero,at,3154
 803106c:	42000204 	addi	r8,r8,8
 8031070:	da802317 	ldw	r10,140(sp)
 8031074:	5455883a 	add	r10,r10,r17
 8031078:	da802315 	stw	r10,140(sp)
 803107c:	003f8b06 	br	8030eac <_gp+0xfffef7a0>
 8031080:	d9002017 	ldw	r4,128(sp)
 8031084:	a00b883a 	mov	r5,r20
 8031088:	802c2c00 	call	802c2c0 <__swsetup_r>
 803108c:	1003b11e 	bne	r2,zero,8031f54 <___vfiprintf_internal_r+0x11ec>
 8031090:	a080030b 	ldhu	r2,12(r20)
 8031094:	00c00284 	movi	r3,10
 8031098:	1080068c 	andi	r2,r2,26
 803109c:	10ff541e 	bne	r2,r3,8030df0 <_gp+0xfffef6e4>
 80310a0:	a080038f 	ldh	r2,14(r20)
 80310a4:	103f5216 	blt	r2,zero,8030df0 <_gp+0xfffef6e4>
 80310a8:	d9c02217 	ldw	r7,136(sp)
 80310ac:	d9002017 	ldw	r4,128(sp)
 80310b0:	e00d883a 	mov	r6,fp
 80310b4:	a00b883a 	mov	r5,r20
 80310b8:	80321e00 	call	80321e0 <__sbprintf>
 80310bc:	dfc03617 	ldw	ra,216(sp)
 80310c0:	df003517 	ldw	fp,212(sp)
 80310c4:	ddc03417 	ldw	r23,208(sp)
 80310c8:	dd803317 	ldw	r22,204(sp)
 80310cc:	dd403217 	ldw	r21,200(sp)
 80310d0:	dd003117 	ldw	r20,196(sp)
 80310d4:	dcc03017 	ldw	r19,192(sp)
 80310d8:	dc802f17 	ldw	r18,188(sp)
 80310dc:	dc402e17 	ldw	r17,184(sp)
 80310e0:	dc002d17 	ldw	r16,180(sp)
 80310e4:	dec03704 	addi	sp,sp,220
 80310e8:	f800283a 	ret
 80310ec:	802e4140 	call	802e414 <__sinit>
 80310f0:	003f2f06 	br	8030db0 <_gp+0xfffef6a4>
 80310f4:	0463c83a 	sub	r17,zero,r17
 80310f8:	d8802215 	stw	r2,136(sp)
 80310fc:	a5000114 	ori	r20,r20,4
 8031100:	80c00007 	ldb	r3,0(r16)
 8031104:	003f7706 	br	8030ee4 <_gp+0xfffef7d8>
 8031108:	00800c04 	movi	r2,48
 803110c:	da802217 	ldw	r10,136(sp)
 8031110:	d8801d05 	stb	r2,116(sp)
 8031114:	00801e04 	movi	r2,120
 8031118:	d8801d45 	stb	r2,117(sp)
 803111c:	d8001d85 	stb	zero,118(sp)
 8031120:	50c00104 	addi	r3,r10,4
 8031124:	54800017 	ldw	r18,0(r10)
 8031128:	0027883a 	mov	r19,zero
 803112c:	a0800094 	ori	r2,r20,2
 8031130:	48030b16 	blt	r9,zero,8031d60 <___vfiprintf_internal_r+0xff8>
 8031134:	00bfdfc4 	movi	r2,-129
 8031138:	a096703a 	and	r11,r20,r2
 803113c:	d8c02215 	stw	r3,136(sp)
 8031140:	5d000094 	ori	r20,r11,2
 8031144:	90032b1e 	bne	r18,zero,8031df4 <___vfiprintf_internal_r+0x108c>
 8031148:	008200f4 	movhi	r2,2051
 803114c:	109e3404 	addi	r2,r2,30928
 8031150:	d8802615 	stw	r2,152(sp)
 8031154:	0039883a 	mov	fp,zero
 8031158:	48017b1e 	bne	r9,zero,8031748 <___vfiprintf_internal_r+0x9e0>
 803115c:	0013883a 	mov	r9,zero
 8031160:	0027883a 	mov	r19,zero
 8031164:	dd401a04 	addi	r21,sp,104
 8031168:	4825883a 	mov	r18,r9
 803116c:	4cc0010e 	bge	r9,r19,8031174 <___vfiprintf_internal_r+0x40c>
 8031170:	9825883a 	mov	r18,r19
 8031174:	e7003fcc 	andi	fp,fp,255
 8031178:	e700201c 	xori	fp,fp,128
 803117c:	e73fe004 	addi	fp,fp,-128
 8031180:	e0000126 	beq	fp,zero,8031188 <___vfiprintf_internal_r+0x420>
 8031184:	94800044 	addi	r18,r18,1
 8031188:	a380008c 	andi	r14,r20,2
 803118c:	70000126 	beq	r14,zero,8031194 <___vfiprintf_internal_r+0x42c>
 8031190:	94800084 	addi	r18,r18,2
 8031194:	a700210c 	andi	fp,r20,132
 8031198:	e001df1e 	bne	fp,zero,8031918 <___vfiprintf_internal_r+0xbb0>
 803119c:	8c87c83a 	sub	r3,r17,r18
 80311a0:	00c1dd0e 	bge	zero,r3,8031918 <___vfiprintf_internal_r+0xbb0>
 80311a4:	01c00404 	movi	r7,16
 80311a8:	d8801c17 	ldw	r2,112(sp)
 80311ac:	38c3ad0e 	bge	r7,r3,8032064 <___vfiprintf_internal_r+0x12fc>
 80311b0:	028200f4 	movhi	r10,2051
 80311b4:	529e9804 	addi	r10,r10,31328
 80311b8:	dc002915 	stw	r16,164(sp)
 80311bc:	d9801b17 	ldw	r6,108(sp)
 80311c0:	da802415 	stw	r10,144(sp)
 80311c4:	03c001c4 	movi	r15,7
 80311c8:	da402515 	stw	r9,148(sp)
 80311cc:	db802815 	stw	r14,160(sp)
 80311d0:	1821883a 	mov	r16,r3
 80311d4:	00000506 	br	80311ec <___vfiprintf_internal_r+0x484>
 80311d8:	31400084 	addi	r5,r6,2
 80311dc:	42000204 	addi	r8,r8,8
 80311e0:	200d883a 	mov	r6,r4
 80311e4:	843ffc04 	addi	r16,r16,-16
 80311e8:	3c000d0e 	bge	r7,r16,8031220 <___vfiprintf_internal_r+0x4b8>
 80311ec:	10800404 	addi	r2,r2,16
 80311f0:	31000044 	addi	r4,r6,1
 80311f4:	45800015 	stw	r22,0(r8)
 80311f8:	41c00115 	stw	r7,4(r8)
 80311fc:	d8801c15 	stw	r2,112(sp)
 8031200:	d9001b15 	stw	r4,108(sp)
 8031204:	793ff40e 	bge	r15,r4,80311d8 <_gp+0xfffefacc>
 8031208:	1001b51e 	bne	r2,zero,80318e0 <___vfiprintf_internal_r+0xb78>
 803120c:	843ffc04 	addi	r16,r16,-16
 8031210:	000d883a 	mov	r6,zero
 8031214:	01400044 	movi	r5,1
 8031218:	d811883a 	mov	r8,sp
 803121c:	3c3ff316 	blt	r7,r16,80311ec <_gp+0xfffefae0>
 8031220:	8007883a 	mov	r3,r16
 8031224:	da402517 	ldw	r9,148(sp)
 8031228:	db802817 	ldw	r14,160(sp)
 803122c:	dc002917 	ldw	r16,164(sp)
 8031230:	da802417 	ldw	r10,144(sp)
 8031234:	1885883a 	add	r2,r3,r2
 8031238:	40c00115 	stw	r3,4(r8)
 803123c:	42800015 	stw	r10,0(r8)
 8031240:	d8801c15 	stw	r2,112(sp)
 8031244:	d9401b15 	stw	r5,108(sp)
 8031248:	00c001c4 	movi	r3,7
 803124c:	19426016 	blt	r3,r5,8031bd0 <___vfiprintf_internal_r+0xe68>
 8031250:	d8c01d87 	ldb	r3,118(sp)
 8031254:	42000204 	addi	r8,r8,8
 8031258:	29000044 	addi	r4,r5,1
 803125c:	1801b31e 	bne	r3,zero,803192c <___vfiprintf_internal_r+0xbc4>
 8031260:	7001c026 	beq	r14,zero,8031964 <___vfiprintf_internal_r+0xbfc>
 8031264:	d8c01d04 	addi	r3,sp,116
 8031268:	10800084 	addi	r2,r2,2
 803126c:	40c00015 	stw	r3,0(r8)
 8031270:	00c00084 	movi	r3,2
 8031274:	40c00115 	stw	r3,4(r8)
 8031278:	d8801c15 	stw	r2,112(sp)
 803127c:	d9001b15 	stw	r4,108(sp)
 8031280:	00c001c4 	movi	r3,7
 8031284:	1902650e 	bge	r3,r4,8031c1c <___vfiprintf_internal_r+0xeb4>
 8031288:	10029a1e 	bne	r2,zero,8031cf4 <___vfiprintf_internal_r+0xf8c>
 803128c:	00c02004 	movi	r3,128
 8031290:	01000044 	movi	r4,1
 8031294:	000b883a 	mov	r5,zero
 8031298:	d811883a 	mov	r8,sp
 803129c:	e0c1b31e 	bne	fp,r3,803196c <___vfiprintf_internal_r+0xc04>
 80312a0:	8cb9c83a 	sub	fp,r17,r18
 80312a4:	0701b10e 	bge	zero,fp,803196c <___vfiprintf_internal_r+0xc04>
 80312a8:	01c00404 	movi	r7,16
 80312ac:	3f03890e 	bge	r7,fp,80320d4 <___vfiprintf_internal_r+0x136c>
 80312b0:	00c200f4 	movhi	r3,2051
 80312b4:	18de9404 	addi	r3,r3,31312
 80312b8:	d8c02415 	stw	r3,144(sp)
 80312bc:	8007883a 	mov	r3,r16
 80312c0:	034001c4 	movi	r13,7
 80312c4:	e021883a 	mov	r16,fp
 80312c8:	da402515 	stw	r9,148(sp)
 80312cc:	1839883a 	mov	fp,r3
 80312d0:	00000506 	br	80312e8 <___vfiprintf_internal_r+0x580>
 80312d4:	29800084 	addi	r6,r5,2
 80312d8:	42000204 	addi	r8,r8,8
 80312dc:	180b883a 	mov	r5,r3
 80312e0:	843ffc04 	addi	r16,r16,-16
 80312e4:	3c000d0e 	bge	r7,r16,803131c <___vfiprintf_internal_r+0x5b4>
 80312e8:	10800404 	addi	r2,r2,16
 80312ec:	28c00044 	addi	r3,r5,1
 80312f0:	45c00015 	stw	r23,0(r8)
 80312f4:	41c00115 	stw	r7,4(r8)
 80312f8:	d8801c15 	stw	r2,112(sp)
 80312fc:	d8c01b15 	stw	r3,108(sp)
 8031300:	68fff40e 	bge	r13,r3,80312d4 <_gp+0xfffefbc8>
 8031304:	1002241e 	bne	r2,zero,8031b98 <___vfiprintf_internal_r+0xe30>
 8031308:	843ffc04 	addi	r16,r16,-16
 803130c:	01800044 	movi	r6,1
 8031310:	000b883a 	mov	r5,zero
 8031314:	d811883a 	mov	r8,sp
 8031318:	3c3ff316 	blt	r7,r16,80312e8 <_gp+0xfffefbdc>
 803131c:	da402517 	ldw	r9,148(sp)
 8031320:	e007883a 	mov	r3,fp
 8031324:	8039883a 	mov	fp,r16
 8031328:	1821883a 	mov	r16,r3
 803132c:	d8c02417 	ldw	r3,144(sp)
 8031330:	1705883a 	add	r2,r2,fp
 8031334:	47000115 	stw	fp,4(r8)
 8031338:	40c00015 	stw	r3,0(r8)
 803133c:	d8801c15 	stw	r2,112(sp)
 8031340:	d9801b15 	stw	r6,108(sp)
 8031344:	00c001c4 	movi	r3,7
 8031348:	19827616 	blt	r3,r6,8031d24 <___vfiprintf_internal_r+0xfbc>
 803134c:	4cf9c83a 	sub	fp,r9,r19
 8031350:	42000204 	addi	r8,r8,8
 8031354:	31000044 	addi	r4,r6,1
 8031358:	300b883a 	mov	r5,r6
 803135c:	07018516 	blt	zero,fp,8031974 <___vfiprintf_internal_r+0xc0c>
 8031360:	9885883a 	add	r2,r19,r2
 8031364:	45400015 	stw	r21,0(r8)
 8031368:	44c00115 	stw	r19,4(r8)
 803136c:	d8801c15 	stw	r2,112(sp)
 8031370:	d9001b15 	stw	r4,108(sp)
 8031374:	00c001c4 	movi	r3,7
 8031378:	1901dd0e 	bge	r3,r4,8031af0 <___vfiprintf_internal_r+0xd88>
 803137c:	1002401e 	bne	r2,zero,8031c80 <___vfiprintf_internal_r+0xf18>
 8031380:	d8001b15 	stw	zero,108(sp)
 8031384:	a2c0010c 	andi	r11,r20,4
 8031388:	58000226 	beq	r11,zero,8031394 <___vfiprintf_internal_r+0x62c>
 803138c:	8ca7c83a 	sub	r19,r17,r18
 8031390:	04c2f216 	blt	zero,r19,8031f5c <___vfiprintf_internal_r+0x11f4>
 8031394:	8c80010e 	bge	r17,r18,803139c <___vfiprintf_internal_r+0x634>
 8031398:	9023883a 	mov	r17,r18
 803139c:	da802317 	ldw	r10,140(sp)
 80313a0:	5455883a 	add	r10,r10,r17
 80313a4:	da802315 	stw	r10,140(sp)
 80313a8:	d8001b15 	stw	zero,108(sp)
 80313ac:	d811883a 	mov	r8,sp
 80313b0:	003ea206 	br	8030e3c <_gp+0xfffef730>
 80313b4:	a5000814 	ori	r20,r20,32
 80313b8:	80c00007 	ldb	r3,0(r16)
 80313bc:	003ec906 	br	8030ee4 <_gp+0xfffef7d8>
 80313c0:	80c00007 	ldb	r3,0(r16)
 80313c4:	1b030926 	beq	r3,r12,8031fec <___vfiprintf_internal_r+0x1284>
 80313c8:	a5000414 	ori	r20,r20,16
 80313cc:	003ec506 	br	8030ee4 <_gp+0xfffef7d8>
 80313d0:	21003fcc 	andi	r4,r4,255
 80313d4:	20035e1e 	bne	r4,zero,8032150 <___vfiprintf_internal_r+0x13e8>
 80313d8:	a080080c 	andi	r2,r20,32
 80313dc:	1002a526 	beq	r2,zero,8031e74 <___vfiprintf_internal_r+0x110c>
 80313e0:	da802217 	ldw	r10,136(sp)
 80313e4:	50800017 	ldw	r2,0(r10)
 80313e8:	da802317 	ldw	r10,140(sp)
 80313ec:	5007d7fa 	srai	r3,r10,31
 80313f0:	da802217 	ldw	r10,136(sp)
 80313f4:	10c00115 	stw	r3,4(r2)
 80313f8:	52800104 	addi	r10,r10,4
 80313fc:	da802215 	stw	r10,136(sp)
 8031400:	da802317 	ldw	r10,140(sp)
 8031404:	12800015 	stw	r10,0(r2)
 8031408:	003e8c06 	br	8030e3c <_gp+0xfffef730>
 803140c:	21003fcc 	andi	r4,r4,255
 8031410:	2003511e 	bne	r4,zero,8032158 <___vfiprintf_internal_r+0x13f0>
 8031414:	a080080c 	andi	r2,r20,32
 8031418:	1000a126 	beq	r2,zero,80316a0 <___vfiprintf_internal_r+0x938>
 803141c:	da802217 	ldw	r10,136(sp)
 8031420:	d8001d85 	stb	zero,118(sp)
 8031424:	50800204 	addi	r2,r10,8
 8031428:	54800017 	ldw	r18,0(r10)
 803142c:	54c00117 	ldw	r19,4(r10)
 8031430:	4802b416 	blt	r9,zero,8031f04 <___vfiprintf_internal_r+0x119c>
 8031434:	013fdfc4 	movi	r4,-129
 8031438:	94c6b03a 	or	r3,r18,r19
 803143c:	d8802215 	stw	r2,136(sp)
 8031440:	a128703a 	and	r20,r20,r4
 8031444:	1800a226 	beq	r3,zero,80316d0 <___vfiprintf_internal_r+0x968>
 8031448:	0039883a 	mov	fp,zero
 803144c:	dd401a04 	addi	r21,sp,104
 8031450:	9006d0fa 	srli	r3,r18,3
 8031454:	9808977a 	slli	r4,r19,29
 8031458:	9826d0fa 	srli	r19,r19,3
 803145c:	948001cc 	andi	r18,r18,7
 8031460:	90800c04 	addi	r2,r18,48
 8031464:	ad7fffc4 	addi	r21,r21,-1
 8031468:	20e4b03a 	or	r18,r4,r3
 803146c:	a8800005 	stb	r2,0(r21)
 8031470:	94c6b03a 	or	r3,r18,r19
 8031474:	183ff61e 	bne	r3,zero,8031450 <_gp+0xfffefd44>
 8031478:	a0c0004c 	andi	r3,r20,1
 803147c:	18005926 	beq	r3,zero,80315e4 <___vfiprintf_internal_r+0x87c>
 8031480:	10803fcc 	andi	r2,r2,255
 8031484:	1080201c 	xori	r2,r2,128
 8031488:	10bfe004 	addi	r2,r2,-128
 803148c:	00c00c04 	movi	r3,48
 8031490:	10c05426 	beq	r2,r3,80315e4 <___vfiprintf_internal_r+0x87c>
 8031494:	da801e17 	ldw	r10,120(sp)
 8031498:	a8bfffc4 	addi	r2,r21,-1
 803149c:	a8ffffc5 	stb	r3,-1(r21)
 80314a0:	50a7c83a 	sub	r19,r10,r2
 80314a4:	102b883a 	mov	r21,r2
 80314a8:	003f2f06 	br	8031168 <_gp+0xfffefa5c>
 80314ac:	21003fcc 	andi	r4,r4,255
 80314b0:	2003421e 	bne	r4,zero,80321bc <___vfiprintf_internal_r+0x1454>
 80314b4:	008200f4 	movhi	r2,2051
 80314b8:	109e3404 	addi	r2,r2,30928
 80314bc:	d8802615 	stw	r2,152(sp)
 80314c0:	a080080c 	andi	r2,r20,32
 80314c4:	1000aa26 	beq	r2,zero,8031770 <___vfiprintf_internal_r+0xa08>
 80314c8:	da802217 	ldw	r10,136(sp)
 80314cc:	54800017 	ldw	r18,0(r10)
 80314d0:	54c00117 	ldw	r19,4(r10)
 80314d4:	52800204 	addi	r10,r10,8
 80314d8:	da802215 	stw	r10,136(sp)
 80314dc:	a080004c 	andi	r2,r20,1
 80314e0:	1001d226 	beq	r2,zero,8031c2c <___vfiprintf_internal_r+0xec4>
 80314e4:	94c4b03a 	or	r2,r18,r19
 80314e8:	1002351e 	bne	r2,zero,8031dc0 <___vfiprintf_internal_r+0x1058>
 80314ec:	d8001d85 	stb	zero,118(sp)
 80314f0:	48022216 	blt	r9,zero,8031d7c <___vfiprintf_internal_r+0x1014>
 80314f4:	00bfdfc4 	movi	r2,-129
 80314f8:	a0a8703a 	and	r20,r20,r2
 80314fc:	003f1506 	br	8031154 <_gp+0xfffefa48>
 8031500:	da802217 	ldw	r10,136(sp)
 8031504:	04800044 	movi	r18,1
 8031508:	d8001d85 	stb	zero,118(sp)
 803150c:	50800017 	ldw	r2,0(r10)
 8031510:	52800104 	addi	r10,r10,4
 8031514:	da802215 	stw	r10,136(sp)
 8031518:	d8801005 	stb	r2,64(sp)
 803151c:	9027883a 	mov	r19,r18
 8031520:	dd401004 	addi	r21,sp,64
 8031524:	0013883a 	mov	r9,zero
 8031528:	003f1706 	br	8031188 <_gp+0xfffefa7c>
 803152c:	21003fcc 	andi	r4,r4,255
 8031530:	2003201e 	bne	r4,zero,80321b4 <___vfiprintf_internal_r+0x144c>
 8031534:	a080080c 	andi	r2,r20,32
 8031538:	10004b26 	beq	r2,zero,8031668 <___vfiprintf_internal_r+0x900>
 803153c:	da802217 	ldw	r10,136(sp)
 8031540:	50800117 	ldw	r2,4(r10)
 8031544:	54800017 	ldw	r18,0(r10)
 8031548:	52800204 	addi	r10,r10,8
 803154c:	da802215 	stw	r10,136(sp)
 8031550:	1027883a 	mov	r19,r2
 8031554:	10022c16 	blt	r2,zero,8031e08 <___vfiprintf_internal_r+0x10a0>
 8031558:	df001d83 	ldbu	fp,118(sp)
 803155c:	48007216 	blt	r9,zero,8031728 <___vfiprintf_internal_r+0x9c0>
 8031560:	00ffdfc4 	movi	r3,-129
 8031564:	94c4b03a 	or	r2,r18,r19
 8031568:	a0e8703a 	and	r20,r20,r3
 803156c:	1000cc26 	beq	r2,zero,80318a0 <___vfiprintf_internal_r+0xb38>
 8031570:	98021026 	beq	r19,zero,8031db4 <___vfiprintf_internal_r+0x104c>
 8031574:	dc402415 	stw	r17,144(sp)
 8031578:	dc002515 	stw	r16,148(sp)
 803157c:	9823883a 	mov	r17,r19
 8031580:	9021883a 	mov	r16,r18
 8031584:	dd401a04 	addi	r21,sp,104
 8031588:	4825883a 	mov	r18,r9
 803158c:	4027883a 	mov	r19,r8
 8031590:	8009883a 	mov	r4,r16
 8031594:	880b883a 	mov	r5,r17
 8031598:	01800284 	movi	r6,10
 803159c:	000f883a 	mov	r7,zero
 80315a0:	80331480 	call	8033148 <__umoddi3>
 80315a4:	10800c04 	addi	r2,r2,48
 80315a8:	ad7fffc4 	addi	r21,r21,-1
 80315ac:	8009883a 	mov	r4,r16
 80315b0:	880b883a 	mov	r5,r17
 80315b4:	a8800005 	stb	r2,0(r21)
 80315b8:	01800284 	movi	r6,10
 80315bc:	000f883a 	mov	r7,zero
 80315c0:	8032bd00 	call	8032bd0 <__udivdi3>
 80315c4:	1021883a 	mov	r16,r2
 80315c8:	10c4b03a 	or	r2,r2,r3
 80315cc:	1823883a 	mov	r17,r3
 80315d0:	103fef1e 	bne	r2,zero,8031590 <_gp+0xfffefe84>
 80315d4:	dc402417 	ldw	r17,144(sp)
 80315d8:	dc002517 	ldw	r16,148(sp)
 80315dc:	9013883a 	mov	r9,r18
 80315e0:	9811883a 	mov	r8,r19
 80315e4:	da801e17 	ldw	r10,120(sp)
 80315e8:	5567c83a 	sub	r19,r10,r21
 80315ec:	003ede06 	br	8031168 <_gp+0xfffefa5c>
 80315f0:	38803fcc 	andi	r2,r7,255
 80315f4:	1080201c 	xori	r2,r2,128
 80315f8:	10bfe004 	addi	r2,r2,-128
 80315fc:	1002371e 	bne	r2,zero,8031edc <___vfiprintf_internal_r+0x1174>
 8031600:	01000044 	movi	r4,1
 8031604:	01c00804 	movi	r7,32
 8031608:	80c00007 	ldb	r3,0(r16)
 803160c:	003e3506 	br	8030ee4 <_gp+0xfffef7d8>
 8031610:	a5000054 	ori	r20,r20,1
 8031614:	80c00007 	ldb	r3,0(r16)
 8031618:	003e3206 	br	8030ee4 <_gp+0xfffef7d8>
 803161c:	a5002014 	ori	r20,r20,128
 8031620:	80c00007 	ldb	r3,0(r16)
 8031624:	003e2f06 	br	8030ee4 <_gp+0xfffef7d8>
 8031628:	8015883a 	mov	r10,r16
 803162c:	0023883a 	mov	r17,zero
 8031630:	18bff404 	addi	r2,r3,-48
 8031634:	50c00007 	ldb	r3,0(r10)
 8031638:	8c4002a4 	muli	r17,r17,10
 803163c:	84000044 	addi	r16,r16,1
 8031640:	8015883a 	mov	r10,r16
 8031644:	1463883a 	add	r17,r2,r17
 8031648:	18bff404 	addi	r2,r3,-48
 803164c:	30bff92e 	bgeu	r6,r2,8031634 <_gp+0xfffeff28>
 8031650:	003e2506 	br	8030ee8 <_gp+0xfffef7dc>
 8031654:	21003fcc 	andi	r4,r4,255
 8031658:	2002d41e 	bne	r4,zero,80321ac <___vfiprintf_internal_r+0x1444>
 803165c:	a5000414 	ori	r20,r20,16
 8031660:	a080080c 	andi	r2,r20,32
 8031664:	103fb51e 	bne	r2,zero,803153c <_gp+0xfffefe30>
 8031668:	a080040c 	andi	r2,r20,16
 803166c:	1001f826 	beq	r2,zero,8031e50 <___vfiprintf_internal_r+0x10e8>
 8031670:	da802217 	ldw	r10,136(sp)
 8031674:	54800017 	ldw	r18,0(r10)
 8031678:	52800104 	addi	r10,r10,4
 803167c:	da802215 	stw	r10,136(sp)
 8031680:	9027d7fa 	srai	r19,r18,31
 8031684:	9805883a 	mov	r2,r19
 8031688:	003fb206 	br	8031554 <_gp+0xfffefe48>
 803168c:	21003fcc 	andi	r4,r4,255
 8031690:	2002c41e 	bne	r4,zero,80321a4 <___vfiprintf_internal_r+0x143c>
 8031694:	a5000414 	ori	r20,r20,16
 8031698:	a080080c 	andi	r2,r20,32
 803169c:	103f5f1e 	bne	r2,zero,803141c <_gp+0xfffefd10>
 80316a0:	a080040c 	andi	r2,r20,16
 80316a4:	10020f26 	beq	r2,zero,8031ee4 <___vfiprintf_internal_r+0x117c>
 80316a8:	da802217 	ldw	r10,136(sp)
 80316ac:	d8001d85 	stb	zero,118(sp)
 80316b0:	0027883a 	mov	r19,zero
 80316b4:	50800104 	addi	r2,r10,4
 80316b8:	54800017 	ldw	r18,0(r10)
 80316bc:	48021116 	blt	r9,zero,8031f04 <___vfiprintf_internal_r+0x119c>
 80316c0:	00ffdfc4 	movi	r3,-129
 80316c4:	d8802215 	stw	r2,136(sp)
 80316c8:	a0e8703a 	and	r20,r20,r3
 80316cc:	903f5e1e 	bne	r18,zero,8031448 <_gp+0xfffefd3c>
 80316d0:	0039883a 	mov	fp,zero
 80316d4:	4802a626 	beq	r9,zero,8032170 <___vfiprintf_internal_r+0x1408>
 80316d8:	0025883a 	mov	r18,zero
 80316dc:	0027883a 	mov	r19,zero
 80316e0:	003f5a06 	br	803144c <_gp+0xfffefd40>
 80316e4:	21003fcc 	andi	r4,r4,255
 80316e8:	20029f1e 	bne	r4,zero,8032168 <___vfiprintf_internal_r+0x1400>
 80316ec:	a5000414 	ori	r20,r20,16
 80316f0:	a080080c 	andi	r2,r20,32
 80316f4:	10005e1e 	bne	r2,zero,8031870 <___vfiprintf_internal_r+0xb08>
 80316f8:	a080040c 	andi	r2,r20,16
 80316fc:	1001a21e 	bne	r2,zero,8031d88 <___vfiprintf_internal_r+0x1020>
 8031700:	a080100c 	andi	r2,r20,64
 8031704:	d8001d85 	stb	zero,118(sp)
 8031708:	da802217 	ldw	r10,136(sp)
 803170c:	1002231e 	bne	r2,zero,8031f9c <___vfiprintf_internal_r+0x1234>
 8031710:	50800104 	addi	r2,r10,4
 8031714:	54800017 	ldw	r18,0(r10)
 8031718:	0027883a 	mov	r19,zero
 803171c:	4801a00e 	bge	r9,zero,8031da0 <___vfiprintf_internal_r+0x1038>
 8031720:	d8802215 	stw	r2,136(sp)
 8031724:	0039883a 	mov	fp,zero
 8031728:	94c4b03a 	or	r2,r18,r19
 803172c:	103f901e 	bne	r2,zero,8031570 <_gp+0xfffefe64>
 8031730:	00800044 	movi	r2,1
 8031734:	10803fcc 	andi	r2,r2,255
 8031738:	00c00044 	movi	r3,1
 803173c:	10c05926 	beq	r2,r3,80318a4 <___vfiprintf_internal_r+0xb3c>
 8031740:	00c00084 	movi	r3,2
 8031744:	10ffe41e 	bne	r2,r3,80316d8 <_gp+0xfffeffcc>
 8031748:	0025883a 	mov	r18,zero
 803174c:	0027883a 	mov	r19,zero
 8031750:	00013d06 	br	8031c48 <___vfiprintf_internal_r+0xee0>
 8031754:	21003fcc 	andi	r4,r4,255
 8031758:	2002811e 	bne	r4,zero,8032160 <___vfiprintf_internal_r+0x13f8>
 803175c:	008200f4 	movhi	r2,2051
 8031760:	109e2f04 	addi	r2,r2,30908
 8031764:	d8802615 	stw	r2,152(sp)
 8031768:	a080080c 	andi	r2,r20,32
 803176c:	103f561e 	bne	r2,zero,80314c8 <_gp+0xfffefdbc>
 8031770:	a080040c 	andi	r2,r20,16
 8031774:	1001d126 	beq	r2,zero,8031ebc <___vfiprintf_internal_r+0x1154>
 8031778:	da802217 	ldw	r10,136(sp)
 803177c:	0027883a 	mov	r19,zero
 8031780:	54800017 	ldw	r18,0(r10)
 8031784:	52800104 	addi	r10,r10,4
 8031788:	da802215 	stw	r10,136(sp)
 803178c:	003f5306 	br	80314dc <_gp+0xfffefdd0>
 8031790:	da802217 	ldw	r10,136(sp)
 8031794:	d8001d85 	stb	zero,118(sp)
 8031798:	55400017 	ldw	r21,0(r10)
 803179c:	50c00104 	addi	r3,r10,4
 80317a0:	a8024226 	beq	r21,zero,80320ac <___vfiprintf_internal_r+0x1344>
 80317a4:	48021816 	blt	r9,zero,8032008 <___vfiprintf_internal_r+0x12a0>
 80317a8:	480d883a 	mov	r6,r9
 80317ac:	000b883a 	mov	r5,zero
 80317b0:	a809883a 	mov	r4,r21
 80317b4:	d8c02a15 	stw	r3,168(sp)
 80317b8:	da002b15 	stw	r8,172(sp)
 80317bc:	da402c15 	stw	r9,176(sp)
 80317c0:	802f1740 	call	802f174 <memchr>
 80317c4:	d8c02a17 	ldw	r3,168(sp)
 80317c8:	da002b17 	ldw	r8,172(sp)
 80317cc:	da402c17 	ldw	r9,176(sp)
 80317d0:	10024826 	beq	r2,zero,80320f4 <___vfiprintf_internal_r+0x138c>
 80317d4:	1567c83a 	sub	r19,r2,r21
 80317d8:	df001d83 	ldbu	fp,118(sp)
 80317dc:	d8c02215 	stw	r3,136(sp)
 80317e0:	0013883a 	mov	r9,zero
 80317e4:	003e6006 	br	8031168 <_gp+0xfffefa5c>
 80317e8:	21003fcc 	andi	r4,r4,255
 80317ec:	203fc026 	beq	r4,zero,80316f0 <_gp+0xfffeffe4>
 80317f0:	d9c01d85 	stb	r7,118(sp)
 80317f4:	003fbe06 	br	80316f0 <_gp+0xfffeffe4>
 80317f8:	da802217 	ldw	r10,136(sp)
 80317fc:	54400017 	ldw	r17,0(r10)
 8031800:	50800104 	addi	r2,r10,4
 8031804:	883e3b16 	blt	r17,zero,80310f4 <_gp+0xfffef9e8>
 8031808:	d8802215 	stw	r2,136(sp)
 803180c:	80c00007 	ldb	r3,0(r16)
 8031810:	003db406 	br	8030ee4 <_gp+0xfffef7d8>
 8031814:	01000044 	movi	r4,1
 8031818:	01c00ac4 	movi	r7,43
 803181c:	80c00007 	ldb	r3,0(r16)
 8031820:	003db006 	br	8030ee4 <_gp+0xfffef7d8>
 8031824:	80c00007 	ldb	r3,0(r16)
 8031828:	82800044 	addi	r10,r16,1
 803182c:	1b423c26 	beq	r3,r13,8032120 <___vfiprintf_internal_r+0x13b8>
 8031830:	18bff404 	addi	r2,r3,-48
 8031834:	0013883a 	mov	r9,zero
 8031838:	30822b36 	bltu	r6,r2,80320e8 <___vfiprintf_internal_r+0x1380>
 803183c:	50c00007 	ldb	r3,0(r10)
 8031840:	4a4002a4 	muli	r9,r9,10
 8031844:	54000044 	addi	r16,r10,1
 8031848:	8015883a 	mov	r10,r16
 803184c:	4893883a 	add	r9,r9,r2
 8031850:	18bff404 	addi	r2,r3,-48
 8031854:	30bff92e 	bgeu	r6,r2,803183c <_gp+0xffff0130>
 8031858:	483da30e 	bge	r9,zero,8030ee8 <_gp+0xfffef7dc>
 803185c:	027fffc4 	movi	r9,-1
 8031860:	003da106 	br	8030ee8 <_gp+0xfffef7dc>
 8031864:	a5001014 	ori	r20,r20,64
 8031868:	80c00007 	ldb	r3,0(r16)
 803186c:	003d9d06 	br	8030ee4 <_gp+0xfffef7d8>
 8031870:	da802217 	ldw	r10,136(sp)
 8031874:	d8001d85 	stb	zero,118(sp)
 8031878:	50c00204 	addi	r3,r10,8
 803187c:	54800017 	ldw	r18,0(r10)
 8031880:	54c00117 	ldw	r19,4(r10)
 8031884:	4801ca16 	blt	r9,zero,8031fb0 <___vfiprintf_internal_r+0x1248>
 8031888:	013fdfc4 	movi	r4,-129
 803188c:	94c4b03a 	or	r2,r18,r19
 8031890:	d8c02215 	stw	r3,136(sp)
 8031894:	a128703a 	and	r20,r20,r4
 8031898:	0039883a 	mov	fp,zero
 803189c:	103f341e 	bne	r2,zero,8031570 <_gp+0xfffefe64>
 80318a0:	483e2e26 	beq	r9,zero,803115c <_gp+0xfffefa50>
 80318a4:	0025883a 	mov	r18,zero
 80318a8:	94800c04 	addi	r18,r18,48
 80318ac:	dc8019c5 	stb	r18,103(sp)
 80318b0:	dcc02717 	ldw	r19,156(sp)
 80318b4:	dd4019c4 	addi	r21,sp,103
 80318b8:	003e2b06 	br	8031168 <_gp+0xfffefa5c>
 80318bc:	21003fcc 	andi	r4,r4,255
 80318c0:	2002361e 	bne	r4,zero,803219c <___vfiprintf_internal_r+0x1434>
 80318c4:	1801c126 	beq	r3,zero,8031fcc <___vfiprintf_internal_r+0x1264>
 80318c8:	04800044 	movi	r18,1
 80318cc:	d8c01005 	stb	r3,64(sp)
 80318d0:	d8001d85 	stb	zero,118(sp)
 80318d4:	9027883a 	mov	r19,r18
 80318d8:	dd401004 	addi	r21,sp,64
 80318dc:	003f1106 	br	8031524 <_gp+0xfffefe18>
 80318e0:	d9402117 	ldw	r5,132(sp)
 80318e4:	d9002017 	ldw	r4,128(sp)
 80318e8:	d9801a04 	addi	r6,sp,104
 80318ec:	d9c02b15 	stw	r7,172(sp)
 80318f0:	dbc02a15 	stw	r15,168(sp)
 80318f4:	8030c540 	call	8030c54 <__sprint_r.part.0>
 80318f8:	d9c02b17 	ldw	r7,172(sp)
 80318fc:	dbc02a17 	ldw	r15,168(sp)
 8031900:	10006d1e 	bne	r2,zero,8031ab8 <___vfiprintf_internal_r+0xd50>
 8031904:	d9801b17 	ldw	r6,108(sp)
 8031908:	d8801c17 	ldw	r2,112(sp)
 803190c:	d811883a 	mov	r8,sp
 8031910:	31400044 	addi	r5,r6,1
 8031914:	003e3306 	br	80311e4 <_gp+0xfffefad8>
 8031918:	d9401b17 	ldw	r5,108(sp)
 803191c:	d8801c17 	ldw	r2,112(sp)
 8031920:	29000044 	addi	r4,r5,1
 8031924:	d8c01d87 	ldb	r3,118(sp)
 8031928:	183e4d26 	beq	r3,zero,8031260 <_gp+0xfffefb54>
 803192c:	00c00044 	movi	r3,1
 8031930:	d9401d84 	addi	r5,sp,118
 8031934:	10c5883a 	add	r2,r2,r3
 8031938:	41400015 	stw	r5,0(r8)
 803193c:	40c00115 	stw	r3,4(r8)
 8031940:	d8801c15 	stw	r2,112(sp)
 8031944:	d9001b15 	stw	r4,108(sp)
 8031948:	014001c4 	movi	r5,7
 803194c:	2900a90e 	bge	r5,r4,8031bf4 <___vfiprintf_internal_r+0xe8c>
 8031950:	1000da1e 	bne	r2,zero,8031cbc <___vfiprintf_internal_r+0xf54>
 8031954:	7000ab1e 	bne	r14,zero,8031c04 <___vfiprintf_internal_r+0xe9c>
 8031958:	000b883a 	mov	r5,zero
 803195c:	1809883a 	mov	r4,r3
 8031960:	d811883a 	mov	r8,sp
 8031964:	00c02004 	movi	r3,128
 8031968:	e0fe4d26 	beq	fp,r3,80312a0 <_gp+0xfffefb94>
 803196c:	4cf9c83a 	sub	fp,r9,r19
 8031970:	073e7b0e 	bge	zero,fp,8031360 <_gp+0xfffefc54>
 8031974:	01c00404 	movi	r7,16
 8031978:	3f01900e 	bge	r7,fp,8031fbc <___vfiprintf_internal_r+0x1254>
 803197c:	00c200f4 	movhi	r3,2051
 8031980:	18de9404 	addi	r3,r3,31312
 8031984:	d8c02415 	stw	r3,144(sp)
 8031988:	034001c4 	movi	r13,7
 803198c:	00000506 	br	80319a4 <___vfiprintf_internal_r+0xc3c>
 8031990:	29000084 	addi	r4,r5,2
 8031994:	42000204 	addi	r8,r8,8
 8031998:	180b883a 	mov	r5,r3
 803199c:	e73ffc04 	addi	fp,fp,-16
 80319a0:	3f000d0e 	bge	r7,fp,80319d8 <___vfiprintf_internal_r+0xc70>
 80319a4:	10800404 	addi	r2,r2,16
 80319a8:	28c00044 	addi	r3,r5,1
 80319ac:	45c00015 	stw	r23,0(r8)
 80319b0:	41c00115 	stw	r7,4(r8)
 80319b4:	d8801c15 	stw	r2,112(sp)
 80319b8:	d8c01b15 	stw	r3,108(sp)
 80319bc:	68fff40e 	bge	r13,r3,8031990 <_gp+0xffff0284>
 80319c0:	1000101e 	bne	r2,zero,8031a04 <___vfiprintf_internal_r+0xc9c>
 80319c4:	e73ffc04 	addi	fp,fp,-16
 80319c8:	01000044 	movi	r4,1
 80319cc:	000b883a 	mov	r5,zero
 80319d0:	d811883a 	mov	r8,sp
 80319d4:	3f3ff316 	blt	r7,fp,80319a4 <_gp+0xffff0298>
 80319d8:	da802417 	ldw	r10,144(sp)
 80319dc:	1705883a 	add	r2,r2,fp
 80319e0:	47000115 	stw	fp,4(r8)
 80319e4:	42800015 	stw	r10,0(r8)
 80319e8:	d8801c15 	stw	r2,112(sp)
 80319ec:	d9001b15 	stw	r4,108(sp)
 80319f0:	00c001c4 	movi	r3,7
 80319f4:	19003616 	blt	r3,r4,8031ad0 <___vfiprintf_internal_r+0xd68>
 80319f8:	42000204 	addi	r8,r8,8
 80319fc:	21000044 	addi	r4,r4,1
 8031a00:	003e5706 	br	8031360 <_gp+0xfffefc54>
 8031a04:	d9402117 	ldw	r5,132(sp)
 8031a08:	d9002017 	ldw	r4,128(sp)
 8031a0c:	d9801a04 	addi	r6,sp,104
 8031a10:	d9c02b15 	stw	r7,172(sp)
 8031a14:	db402a15 	stw	r13,168(sp)
 8031a18:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031a1c:	d9c02b17 	ldw	r7,172(sp)
 8031a20:	db402a17 	ldw	r13,168(sp)
 8031a24:	1000241e 	bne	r2,zero,8031ab8 <___vfiprintf_internal_r+0xd50>
 8031a28:	d9401b17 	ldw	r5,108(sp)
 8031a2c:	d8801c17 	ldw	r2,112(sp)
 8031a30:	d811883a 	mov	r8,sp
 8031a34:	29000044 	addi	r4,r5,1
 8031a38:	003fd806 	br	803199c <_gp+0xffff0290>
 8031a3c:	d9401b17 	ldw	r5,108(sp)
 8031a40:	00c200f4 	movhi	r3,2051
 8031a44:	18de9804 	addi	r3,r3,31328
 8031a48:	d8c02415 	stw	r3,144(sp)
 8031a4c:	29400044 	addi	r5,r5,1
 8031a50:	d8c02417 	ldw	r3,144(sp)
 8031a54:	14c5883a 	add	r2,r2,r19
 8031a58:	44c00115 	stw	r19,4(r8)
 8031a5c:	40c00015 	stw	r3,0(r8)
 8031a60:	d8801c15 	stw	r2,112(sp)
 8031a64:	d9401b15 	stw	r5,108(sp)
 8031a68:	00c001c4 	movi	r3,7
 8031a6c:	1940070e 	bge	r3,r5,8031a8c <___vfiprintf_internal_r+0xd24>
 8031a70:	103e4826 	beq	r2,zero,8031394 <_gp+0xfffefc88>
 8031a74:	d9402117 	ldw	r5,132(sp)
 8031a78:	d9002017 	ldw	r4,128(sp)
 8031a7c:	d9801a04 	addi	r6,sp,104
 8031a80:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031a84:	10000c1e 	bne	r2,zero,8031ab8 <___vfiprintf_internal_r+0xd50>
 8031a88:	d8801c17 	ldw	r2,112(sp)
 8031a8c:	8c80010e 	bge	r17,r18,8031a94 <___vfiprintf_internal_r+0xd2c>
 8031a90:	9023883a 	mov	r17,r18
 8031a94:	da802317 	ldw	r10,140(sp)
 8031a98:	5455883a 	add	r10,r10,r17
 8031a9c:	da802315 	stw	r10,140(sp)
 8031aa0:	103e4126 	beq	r2,zero,80313a8 <_gp+0xfffefc9c>
 8031aa4:	d9402117 	ldw	r5,132(sp)
 8031aa8:	d9002017 	ldw	r4,128(sp)
 8031aac:	d9801a04 	addi	r6,sp,104
 8031ab0:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031ab4:	103e3c26 	beq	r2,zero,80313a8 <_gp+0xfffefc9c>
 8031ab8:	dd002117 	ldw	r20,132(sp)
 8031abc:	a080030b 	ldhu	r2,12(r20)
 8031ac0:	1080100c 	andi	r2,r2,64
 8031ac4:	1001231e 	bne	r2,zero,8031f54 <___vfiprintf_internal_r+0x11ec>
 8031ac8:	d8802317 	ldw	r2,140(sp)
 8031acc:	003d7b06 	br	80310bc <_gp+0xfffef9b0>
 8031ad0:	1000991e 	bne	r2,zero,8031d38 <___vfiprintf_internal_r+0xfd0>
 8031ad4:	00c00044 	movi	r3,1
 8031ad8:	9805883a 	mov	r2,r19
 8031adc:	dd400015 	stw	r21,0(sp)
 8031ae0:	dcc00115 	stw	r19,4(sp)
 8031ae4:	dcc01c15 	stw	r19,112(sp)
 8031ae8:	d8c01b15 	stw	r3,108(sp)
 8031aec:	d811883a 	mov	r8,sp
 8031af0:	42000204 	addi	r8,r8,8
 8031af4:	a2c0010c 	andi	r11,r20,4
 8031af8:	583fe426 	beq	r11,zero,8031a8c <_gp+0xffff0380>
 8031afc:	8ca7c83a 	sub	r19,r17,r18
 8031b00:	04ffe20e 	bge	zero,r19,8031a8c <_gp+0xffff0380>
 8031b04:	01c00404 	movi	r7,16
 8031b08:	3cffcc0e 	bge	r7,r19,8031a3c <_gp+0xffff0330>
 8031b0c:	028200f4 	movhi	r10,2051
 8031b10:	529e9804 	addi	r10,r10,31328
 8031b14:	d9001b17 	ldw	r4,108(sp)
 8031b18:	da802415 	stw	r10,144(sp)
 8031b1c:	382b883a 	mov	r21,r7
 8031b20:	050001c4 	movi	r20,7
 8031b24:	df002017 	ldw	fp,128(sp)
 8031b28:	00000506 	br	8031b40 <___vfiprintf_internal_r+0xdd8>
 8031b2c:	21400084 	addi	r5,r4,2
 8031b30:	42000204 	addi	r8,r8,8
 8031b34:	1809883a 	mov	r4,r3
 8031b38:	9cfffc04 	addi	r19,r19,-16
 8031b3c:	acffc40e 	bge	r21,r19,8031a50 <_gp+0xffff0344>
 8031b40:	10800404 	addi	r2,r2,16
 8031b44:	20c00044 	addi	r3,r4,1
 8031b48:	45800015 	stw	r22,0(r8)
 8031b4c:	45400115 	stw	r21,4(r8)
 8031b50:	d8801c15 	stw	r2,112(sp)
 8031b54:	d8c01b15 	stw	r3,108(sp)
 8031b58:	a0fff40e 	bge	r20,r3,8031b2c <_gp+0xffff0420>
 8031b5c:	1000041e 	bne	r2,zero,8031b70 <___vfiprintf_internal_r+0xe08>
 8031b60:	01400044 	movi	r5,1
 8031b64:	0009883a 	mov	r4,zero
 8031b68:	d811883a 	mov	r8,sp
 8031b6c:	003ff206 	br	8031b38 <_gp+0xffff042c>
 8031b70:	d9402117 	ldw	r5,132(sp)
 8031b74:	d9801a04 	addi	r6,sp,104
 8031b78:	e009883a 	mov	r4,fp
 8031b7c:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031b80:	103fcd1e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031b84:	d9001b17 	ldw	r4,108(sp)
 8031b88:	d8801c17 	ldw	r2,112(sp)
 8031b8c:	d811883a 	mov	r8,sp
 8031b90:	21400044 	addi	r5,r4,1
 8031b94:	003fe806 	br	8031b38 <_gp+0xffff042c>
 8031b98:	d9402117 	ldw	r5,132(sp)
 8031b9c:	d9002017 	ldw	r4,128(sp)
 8031ba0:	d9801a04 	addi	r6,sp,104
 8031ba4:	d9c02b15 	stw	r7,172(sp)
 8031ba8:	db402a15 	stw	r13,168(sp)
 8031bac:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031bb0:	d9c02b17 	ldw	r7,172(sp)
 8031bb4:	db402a17 	ldw	r13,168(sp)
 8031bb8:	103fbf1e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031bbc:	d9401b17 	ldw	r5,108(sp)
 8031bc0:	d8801c17 	ldw	r2,112(sp)
 8031bc4:	d811883a 	mov	r8,sp
 8031bc8:	29800044 	addi	r6,r5,1
 8031bcc:	003dc406 	br	80312e0 <_gp+0xfffefbd4>
 8031bd0:	1000d21e 	bne	r2,zero,8031f1c <___vfiprintf_internal_r+0x11b4>
 8031bd4:	d8c01d87 	ldb	r3,118(sp)
 8031bd8:	18009526 	beq	r3,zero,8031e30 <___vfiprintf_internal_r+0x10c8>
 8031bdc:	00800044 	movi	r2,1
 8031be0:	d8c01d84 	addi	r3,sp,118
 8031be4:	1009883a 	mov	r4,r2
 8031be8:	d8c00015 	stw	r3,0(sp)
 8031bec:	d8800115 	stw	r2,4(sp)
 8031bf0:	d811883a 	mov	r8,sp
 8031bf4:	200b883a 	mov	r5,r4
 8031bf8:	42000204 	addi	r8,r8,8
 8031bfc:	21000044 	addi	r4,r4,1
 8031c00:	003d9706 	br	8031260 <_gp+0xfffefb54>
 8031c04:	d9001d04 	addi	r4,sp,116
 8031c08:	00800084 	movi	r2,2
 8031c0c:	d9000015 	stw	r4,0(sp)
 8031c10:	d8800115 	stw	r2,4(sp)
 8031c14:	1809883a 	mov	r4,r3
 8031c18:	d811883a 	mov	r8,sp
 8031c1c:	200b883a 	mov	r5,r4
 8031c20:	42000204 	addi	r8,r8,8
 8031c24:	21000044 	addi	r4,r4,1
 8031c28:	003f4e06 	br	8031964 <_gp+0xffff0258>
 8031c2c:	d8001d85 	stb	zero,118(sp)
 8031c30:	48005016 	blt	r9,zero,8031d74 <___vfiprintf_internal_r+0x100c>
 8031c34:	00ffdfc4 	movi	r3,-129
 8031c38:	94c4b03a 	or	r2,r18,r19
 8031c3c:	a0e8703a 	and	r20,r20,r3
 8031c40:	103d4426 	beq	r2,zero,8031154 <_gp+0xfffefa48>
 8031c44:	0039883a 	mov	fp,zero
 8031c48:	d9002617 	ldw	r4,152(sp)
 8031c4c:	dd401a04 	addi	r21,sp,104
 8031c50:	908003cc 	andi	r2,r18,15
 8031c54:	9806973a 	slli	r3,r19,28
 8031c58:	2085883a 	add	r2,r4,r2
 8031c5c:	9024d13a 	srli	r18,r18,4
 8031c60:	10800003 	ldbu	r2,0(r2)
 8031c64:	9826d13a 	srli	r19,r19,4
 8031c68:	ad7fffc4 	addi	r21,r21,-1
 8031c6c:	1ca4b03a 	or	r18,r3,r18
 8031c70:	a8800005 	stb	r2,0(r21)
 8031c74:	94c4b03a 	or	r2,r18,r19
 8031c78:	103ff51e 	bne	r2,zero,8031c50 <_gp+0xffff0544>
 8031c7c:	003e5906 	br	80315e4 <_gp+0xfffefed8>
 8031c80:	d9402117 	ldw	r5,132(sp)
 8031c84:	d9002017 	ldw	r4,128(sp)
 8031c88:	d9801a04 	addi	r6,sp,104
 8031c8c:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031c90:	103f891e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031c94:	d8801c17 	ldw	r2,112(sp)
 8031c98:	d811883a 	mov	r8,sp
 8031c9c:	003f9506 	br	8031af4 <_gp+0xffff03e8>
 8031ca0:	d9402117 	ldw	r5,132(sp)
 8031ca4:	d9002017 	ldw	r4,128(sp)
 8031ca8:	d9801a04 	addi	r6,sp,104
 8031cac:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031cb0:	103f811e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031cb4:	d811883a 	mov	r8,sp
 8031cb8:	003ced06 	br	8031070 <_gp+0xfffef964>
 8031cbc:	d9402117 	ldw	r5,132(sp)
 8031cc0:	d9002017 	ldw	r4,128(sp)
 8031cc4:	d9801a04 	addi	r6,sp,104
 8031cc8:	da402c15 	stw	r9,176(sp)
 8031ccc:	db802a15 	stw	r14,168(sp)
 8031cd0:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031cd4:	da402c17 	ldw	r9,176(sp)
 8031cd8:	db802a17 	ldw	r14,168(sp)
 8031cdc:	103f761e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031ce0:	d9401b17 	ldw	r5,108(sp)
 8031ce4:	d8801c17 	ldw	r2,112(sp)
 8031ce8:	d811883a 	mov	r8,sp
 8031cec:	29000044 	addi	r4,r5,1
 8031cf0:	003d5b06 	br	8031260 <_gp+0xfffefb54>
 8031cf4:	d9402117 	ldw	r5,132(sp)
 8031cf8:	d9002017 	ldw	r4,128(sp)
 8031cfc:	d9801a04 	addi	r6,sp,104
 8031d00:	da402c15 	stw	r9,176(sp)
 8031d04:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031d08:	da402c17 	ldw	r9,176(sp)
 8031d0c:	103f6a1e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031d10:	d9401b17 	ldw	r5,108(sp)
 8031d14:	d8801c17 	ldw	r2,112(sp)
 8031d18:	d811883a 	mov	r8,sp
 8031d1c:	29000044 	addi	r4,r5,1
 8031d20:	003f1006 	br	8031964 <_gp+0xffff0258>
 8031d24:	1000c31e 	bne	r2,zero,8032034 <___vfiprintf_internal_r+0x12cc>
 8031d28:	01000044 	movi	r4,1
 8031d2c:	000b883a 	mov	r5,zero
 8031d30:	d811883a 	mov	r8,sp
 8031d34:	003f0d06 	br	803196c <_gp+0xffff0260>
 8031d38:	d9402117 	ldw	r5,132(sp)
 8031d3c:	d9002017 	ldw	r4,128(sp)
 8031d40:	d9801a04 	addi	r6,sp,104
 8031d44:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031d48:	103f5b1e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031d4c:	d9001b17 	ldw	r4,108(sp)
 8031d50:	d8801c17 	ldw	r2,112(sp)
 8031d54:	d811883a 	mov	r8,sp
 8031d58:	21000044 	addi	r4,r4,1
 8031d5c:	003d8006 	br	8031360 <_gp+0xfffefc54>
 8031d60:	010200f4 	movhi	r4,2051
 8031d64:	211e3404 	addi	r4,r4,30928
 8031d68:	d9002615 	stw	r4,152(sp)
 8031d6c:	d8c02215 	stw	r3,136(sp)
 8031d70:	1029883a 	mov	r20,r2
 8031d74:	94c4b03a 	or	r2,r18,r19
 8031d78:	103fb21e 	bne	r2,zero,8031c44 <_gp+0xffff0538>
 8031d7c:	0039883a 	mov	fp,zero
 8031d80:	00800084 	movi	r2,2
 8031d84:	003e6b06 	br	8031734 <_gp+0xffff0028>
 8031d88:	da802217 	ldw	r10,136(sp)
 8031d8c:	d8001d85 	stb	zero,118(sp)
 8031d90:	0027883a 	mov	r19,zero
 8031d94:	50800104 	addi	r2,r10,4
 8031d98:	54800017 	ldw	r18,0(r10)
 8031d9c:	483e6016 	blt	r9,zero,8031720 <_gp+0xffff0014>
 8031da0:	00ffdfc4 	movi	r3,-129
 8031da4:	d8802215 	stw	r2,136(sp)
 8031da8:	a0e8703a 	and	r20,r20,r3
 8031dac:	0039883a 	mov	fp,zero
 8031db0:	903ebb26 	beq	r18,zero,80318a0 <_gp+0xffff0194>
 8031db4:	00800244 	movi	r2,9
 8031db8:	14bdee36 	bltu	r2,r18,8031574 <_gp+0xfffefe68>
 8031dbc:	003eba06 	br	80318a8 <_gp+0xffff019c>
 8031dc0:	00800c04 	movi	r2,48
 8031dc4:	d8c01d45 	stb	r3,117(sp)
 8031dc8:	d8801d05 	stb	r2,116(sp)
 8031dcc:	d8001d85 	stb	zero,118(sp)
 8031dd0:	a0c00094 	ori	r3,r20,2
 8031dd4:	4800a916 	blt	r9,zero,803207c <___vfiprintf_internal_r+0x1314>
 8031dd8:	00bfdfc4 	movi	r2,-129
 8031ddc:	a096703a 	and	r11,r20,r2
 8031de0:	5d000094 	ori	r20,r11,2
 8031de4:	0039883a 	mov	fp,zero
 8031de8:	003f9706 	br	8031c48 <_gp+0xffff053c>
 8031dec:	8025883a 	mov	r18,r16
 8031df0:	003c2e06 	br	8030eac <_gp+0xfffef7a0>
 8031df4:	008200f4 	movhi	r2,2051
 8031df8:	109e3404 	addi	r2,r2,30928
 8031dfc:	0039883a 	mov	fp,zero
 8031e00:	d8802615 	stw	r2,152(sp)
 8031e04:	003f9006 	br	8031c48 <_gp+0xffff053c>
 8031e08:	04a5c83a 	sub	r18,zero,r18
 8031e0c:	07000b44 	movi	fp,45
 8031e10:	9004c03a 	cmpne	r2,r18,zero
 8031e14:	04e7c83a 	sub	r19,zero,r19
 8031e18:	df001d85 	stb	fp,118(sp)
 8031e1c:	98a7c83a 	sub	r19,r19,r2
 8031e20:	48009f16 	blt	r9,zero,80320a0 <___vfiprintf_internal_r+0x1338>
 8031e24:	00bfdfc4 	movi	r2,-129
 8031e28:	a0a8703a 	and	r20,r20,r2
 8031e2c:	003dd006 	br	8031570 <_gp+0xfffefe64>
 8031e30:	70004c26 	beq	r14,zero,8031f64 <___vfiprintf_internal_r+0x11fc>
 8031e34:	00800084 	movi	r2,2
 8031e38:	d8c01d04 	addi	r3,sp,116
 8031e3c:	d8c00015 	stw	r3,0(sp)
 8031e40:	d8800115 	stw	r2,4(sp)
 8031e44:	01000044 	movi	r4,1
 8031e48:	d811883a 	mov	r8,sp
 8031e4c:	003f7306 	br	8031c1c <_gp+0xffff0510>
 8031e50:	a080100c 	andi	r2,r20,64
 8031e54:	da802217 	ldw	r10,136(sp)
 8031e58:	103e0626 	beq	r2,zero,8031674 <_gp+0xfffeff68>
 8031e5c:	5480000f 	ldh	r18,0(r10)
 8031e60:	52800104 	addi	r10,r10,4
 8031e64:	da802215 	stw	r10,136(sp)
 8031e68:	9027d7fa 	srai	r19,r18,31
 8031e6c:	9805883a 	mov	r2,r19
 8031e70:	003db806 	br	8031554 <_gp+0xfffefe48>
 8031e74:	a080040c 	andi	r2,r20,16
 8031e78:	1000091e 	bne	r2,zero,8031ea0 <___vfiprintf_internal_r+0x1138>
 8031e7c:	a2c0100c 	andi	r11,r20,64
 8031e80:	58000726 	beq	r11,zero,8031ea0 <___vfiprintf_internal_r+0x1138>
 8031e84:	da802217 	ldw	r10,136(sp)
 8031e88:	50800017 	ldw	r2,0(r10)
 8031e8c:	52800104 	addi	r10,r10,4
 8031e90:	da802215 	stw	r10,136(sp)
 8031e94:	da802317 	ldw	r10,140(sp)
 8031e98:	1280000d 	sth	r10,0(r2)
 8031e9c:	003be706 	br	8030e3c <_gp+0xfffef730>
 8031ea0:	da802217 	ldw	r10,136(sp)
 8031ea4:	50800017 	ldw	r2,0(r10)
 8031ea8:	52800104 	addi	r10,r10,4
 8031eac:	da802215 	stw	r10,136(sp)
 8031eb0:	da802317 	ldw	r10,140(sp)
 8031eb4:	12800015 	stw	r10,0(r2)
 8031eb8:	003be006 	br	8030e3c <_gp+0xfffef730>
 8031ebc:	a080100c 	andi	r2,r20,64
 8031ec0:	da802217 	ldw	r10,136(sp)
 8031ec4:	10003026 	beq	r2,zero,8031f88 <___vfiprintf_internal_r+0x1220>
 8031ec8:	5480000b 	ldhu	r18,0(r10)
 8031ecc:	52800104 	addi	r10,r10,4
 8031ed0:	0027883a 	mov	r19,zero
 8031ed4:	da802215 	stw	r10,136(sp)
 8031ed8:	003d8006 	br	80314dc <_gp+0xfffefdd0>
 8031edc:	80c00007 	ldb	r3,0(r16)
 8031ee0:	003c0006 	br	8030ee4 <_gp+0xfffef7d8>
 8031ee4:	a080100c 	andi	r2,r20,64
 8031ee8:	d8001d85 	stb	zero,118(sp)
 8031eec:	da802217 	ldw	r10,136(sp)
 8031ef0:	1000201e 	bne	r2,zero,8031f74 <___vfiprintf_internal_r+0x120c>
 8031ef4:	50800104 	addi	r2,r10,4
 8031ef8:	54800017 	ldw	r18,0(r10)
 8031efc:	0027883a 	mov	r19,zero
 8031f00:	483def0e 	bge	r9,zero,80316c0 <_gp+0xfffeffb4>
 8031f04:	94c6b03a 	or	r3,r18,r19
 8031f08:	d8802215 	stw	r2,136(sp)
 8031f0c:	183d4e1e 	bne	r3,zero,8031448 <_gp+0xfffefd3c>
 8031f10:	0039883a 	mov	fp,zero
 8031f14:	0005883a 	mov	r2,zero
 8031f18:	003e0606 	br	8031734 <_gp+0xffff0028>
 8031f1c:	d9402117 	ldw	r5,132(sp)
 8031f20:	d9002017 	ldw	r4,128(sp)
 8031f24:	d9801a04 	addi	r6,sp,104
 8031f28:	da402c15 	stw	r9,176(sp)
 8031f2c:	db802a15 	stw	r14,168(sp)
 8031f30:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031f34:	da402c17 	ldw	r9,176(sp)
 8031f38:	db802a17 	ldw	r14,168(sp)
 8031f3c:	103ede1e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8031f40:	d9401b17 	ldw	r5,108(sp)
 8031f44:	d8801c17 	ldw	r2,112(sp)
 8031f48:	d811883a 	mov	r8,sp
 8031f4c:	29000044 	addi	r4,r5,1
 8031f50:	003e7406 	br	8031924 <_gp+0xffff0218>
 8031f54:	00bfffc4 	movi	r2,-1
 8031f58:	003c5806 	br	80310bc <_gp+0xfffef9b0>
 8031f5c:	d811883a 	mov	r8,sp
 8031f60:	003ee806 	br	8031b04 <_gp+0xffff03f8>
 8031f64:	000b883a 	mov	r5,zero
 8031f68:	01000044 	movi	r4,1
 8031f6c:	d811883a 	mov	r8,sp
 8031f70:	003e7c06 	br	8031964 <_gp+0xffff0258>
 8031f74:	50800104 	addi	r2,r10,4
 8031f78:	5480000b 	ldhu	r18,0(r10)
 8031f7c:	0027883a 	mov	r19,zero
 8031f80:	483dcf0e 	bge	r9,zero,80316c0 <_gp+0xfffeffb4>
 8031f84:	003fdf06 	br	8031f04 <_gp+0xffff07f8>
 8031f88:	54800017 	ldw	r18,0(r10)
 8031f8c:	52800104 	addi	r10,r10,4
 8031f90:	0027883a 	mov	r19,zero
 8031f94:	da802215 	stw	r10,136(sp)
 8031f98:	003d5006 	br	80314dc <_gp+0xfffefdd0>
 8031f9c:	50800104 	addi	r2,r10,4
 8031fa0:	5480000b 	ldhu	r18,0(r10)
 8031fa4:	0027883a 	mov	r19,zero
 8031fa8:	483f7d0e 	bge	r9,zero,8031da0 <_gp+0xffff0694>
 8031fac:	003ddc06 	br	8031720 <_gp+0xffff0014>
 8031fb0:	d8c02215 	stw	r3,136(sp)
 8031fb4:	0039883a 	mov	fp,zero
 8031fb8:	003ddb06 	br	8031728 <_gp+0xffff001c>
 8031fbc:	028200f4 	movhi	r10,2051
 8031fc0:	529e9404 	addi	r10,r10,31312
 8031fc4:	da802415 	stw	r10,144(sp)
 8031fc8:	003e8306 	br	80319d8 <_gp+0xffff02cc>
 8031fcc:	d8801c17 	ldw	r2,112(sp)
 8031fd0:	dd002117 	ldw	r20,132(sp)
 8031fd4:	103eb926 	beq	r2,zero,8031abc <_gp+0xffff03b0>
 8031fd8:	d9002017 	ldw	r4,128(sp)
 8031fdc:	d9801a04 	addi	r6,sp,104
 8031fe0:	a00b883a 	mov	r5,r20
 8031fe4:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8031fe8:	003eb406 	br	8031abc <_gp+0xffff03b0>
 8031fec:	80c00043 	ldbu	r3,1(r16)
 8031ff0:	a5000814 	ori	r20,r20,32
 8031ff4:	84000044 	addi	r16,r16,1
 8031ff8:	18c03fcc 	andi	r3,r3,255
 8031ffc:	18c0201c 	xori	r3,r3,128
 8032000:	18ffe004 	addi	r3,r3,-128
 8032004:	003bb706 	br	8030ee4 <_gp+0xfffef7d8>
 8032008:	a809883a 	mov	r4,r21
 803200c:	d8c02a15 	stw	r3,168(sp)
 8032010:	da002b15 	stw	r8,172(sp)
 8032014:	8029f580 	call	8029f58 <strlen>
 8032018:	d8c02a17 	ldw	r3,168(sp)
 803201c:	1027883a 	mov	r19,r2
 8032020:	df001d83 	ldbu	fp,118(sp)
 8032024:	d8c02215 	stw	r3,136(sp)
 8032028:	0013883a 	mov	r9,zero
 803202c:	da002b17 	ldw	r8,172(sp)
 8032030:	003c4d06 	br	8031168 <_gp+0xfffefa5c>
 8032034:	d9402117 	ldw	r5,132(sp)
 8032038:	d9002017 	ldw	r4,128(sp)
 803203c:	d9801a04 	addi	r6,sp,104
 8032040:	da402c15 	stw	r9,176(sp)
 8032044:	8030c540 	call	8030c54 <__sprint_r.part.0>
 8032048:	da402c17 	ldw	r9,176(sp)
 803204c:	103e9a1e 	bne	r2,zero,8031ab8 <_gp+0xffff03ac>
 8032050:	d9401b17 	ldw	r5,108(sp)
 8032054:	d8801c17 	ldw	r2,112(sp)
 8032058:	d811883a 	mov	r8,sp
 803205c:	29000044 	addi	r4,r5,1
 8032060:	003e4206 	br	803196c <_gp+0xffff0260>
 8032064:	d9401b17 	ldw	r5,108(sp)
 8032068:	010200f4 	movhi	r4,2051
 803206c:	211e9804 	addi	r4,r4,31328
 8032070:	d9002415 	stw	r4,144(sp)
 8032074:	29400044 	addi	r5,r5,1
 8032078:	003c6d06 	br	8031230 <_gp+0xfffefb24>
 803207c:	0039883a 	mov	fp,zero
 8032080:	00800084 	movi	r2,2
 8032084:	10803fcc 	andi	r2,r2,255
 8032088:	01000044 	movi	r4,1
 803208c:	11001e26 	beq	r2,r4,8032108 <___vfiprintf_internal_r+0x13a0>
 8032090:	01000084 	movi	r4,2
 8032094:	11001e1e 	bne	r2,r4,8032110 <___vfiprintf_internal_r+0x13a8>
 8032098:	1829883a 	mov	r20,r3
 803209c:	003eea06 	br	8031c48 <_gp+0xffff053c>
 80320a0:	a007883a 	mov	r3,r20
 80320a4:	00800044 	movi	r2,1
 80320a8:	003ff606 	br	8032084 <_gp+0xffff0978>
 80320ac:	00800184 	movi	r2,6
 80320b0:	1240012e 	bgeu	r2,r9,80320b8 <___vfiprintf_internal_r+0x1350>
 80320b4:	1013883a 	mov	r9,r2
 80320b8:	4827883a 	mov	r19,r9
 80320bc:	4825883a 	mov	r18,r9
 80320c0:	48001516 	blt	r9,zero,8032118 <___vfiprintf_internal_r+0x13b0>
 80320c4:	054200f4 	movhi	r21,2051
 80320c8:	d8c02215 	stw	r3,136(sp)
 80320cc:	ad5e3904 	addi	r21,r21,30948
 80320d0:	003d1406 	br	8031524 <_gp+0xfffefe18>
 80320d4:	028200f4 	movhi	r10,2051
 80320d8:	529e9404 	addi	r10,r10,31312
 80320dc:	da802415 	stw	r10,144(sp)
 80320e0:	200d883a 	mov	r6,r4
 80320e4:	003c9106 	br	803132c <_gp+0xfffefc20>
 80320e8:	5021883a 	mov	r16,r10
 80320ec:	0013883a 	mov	r9,zero
 80320f0:	003b7d06 	br	8030ee8 <_gp+0xfffef7dc>
 80320f4:	4827883a 	mov	r19,r9
 80320f8:	df001d83 	ldbu	fp,118(sp)
 80320fc:	d8c02215 	stw	r3,136(sp)
 8032100:	0013883a 	mov	r9,zero
 8032104:	003c1806 	br	8031168 <_gp+0xfffefa5c>
 8032108:	1829883a 	mov	r20,r3
 803210c:	003d1806 	br	8031570 <_gp+0xfffefe64>
 8032110:	1829883a 	mov	r20,r3
 8032114:	003ccd06 	br	803144c <_gp+0xfffefd40>
 8032118:	0025883a 	mov	r18,zero
 803211c:	003fe906 	br	80320c4 <_gp+0xffff09b8>
 8032120:	d8802217 	ldw	r2,136(sp)
 8032124:	80c00043 	ldbu	r3,1(r16)
 8032128:	5021883a 	mov	r16,r10
 803212c:	12400017 	ldw	r9,0(r2)
 8032130:	10800104 	addi	r2,r2,4
 8032134:	d8802215 	stw	r2,136(sp)
 8032138:	483faf0e 	bge	r9,zero,8031ff8 <_gp+0xffff08ec>
 803213c:	18c03fcc 	andi	r3,r3,255
 8032140:	18c0201c 	xori	r3,r3,128
 8032144:	027fffc4 	movi	r9,-1
 8032148:	18ffe004 	addi	r3,r3,-128
 803214c:	003b6506 	br	8030ee4 <_gp+0xfffef7d8>
 8032150:	d9c01d85 	stb	r7,118(sp)
 8032154:	003ca006 	br	80313d8 <_gp+0xfffefccc>
 8032158:	d9c01d85 	stb	r7,118(sp)
 803215c:	003cad06 	br	8031414 <_gp+0xfffefd08>
 8032160:	d9c01d85 	stb	r7,118(sp)
 8032164:	003d7d06 	br	803175c <_gp+0xffff0050>
 8032168:	d9c01d85 	stb	r7,118(sp)
 803216c:	003d5f06 	br	80316ec <_gp+0xfffeffe0>
 8032170:	a080004c 	andi	r2,r20,1
 8032174:	0039883a 	mov	fp,zero
 8032178:	10000526 	beq	r2,zero,8032190 <___vfiprintf_internal_r+0x1428>
 803217c:	00800c04 	movi	r2,48
 8032180:	d88019c5 	stb	r2,103(sp)
 8032184:	dcc02717 	ldw	r19,156(sp)
 8032188:	dd4019c4 	addi	r21,sp,103
 803218c:	003bf606 	br	8031168 <_gp+0xfffefa5c>
 8032190:	0027883a 	mov	r19,zero
 8032194:	dd401a04 	addi	r21,sp,104
 8032198:	003bf306 	br	8031168 <_gp+0xfffefa5c>
 803219c:	d9c01d85 	stb	r7,118(sp)
 80321a0:	003dc806 	br	80318c4 <_gp+0xffff01b8>
 80321a4:	d9c01d85 	stb	r7,118(sp)
 80321a8:	003d3a06 	br	8031694 <_gp+0xfffeff88>
 80321ac:	d9c01d85 	stb	r7,118(sp)
 80321b0:	003d2a06 	br	803165c <_gp+0xfffeff50>
 80321b4:	d9c01d85 	stb	r7,118(sp)
 80321b8:	003cde06 	br	8031534 <_gp+0xfffefe28>
 80321bc:	d9c01d85 	stb	r7,118(sp)
 80321c0:	003cbc06 	br	80314b4 <_gp+0xfffefda8>

080321c4 <__vfiprintf_internal>:
 80321c4:	00820134 	movhi	r2,2052
 80321c8:	10a5c504 	addi	r2,r2,-26860
 80321cc:	300f883a 	mov	r7,r6
 80321d0:	280d883a 	mov	r6,r5
 80321d4:	200b883a 	mov	r5,r4
 80321d8:	11000017 	ldw	r4,0(r2)
 80321dc:	8030d681 	jmpi	8030d68 <___vfiprintf_internal_r>

080321e0 <__sbprintf>:
 80321e0:	2880030b 	ldhu	r2,12(r5)
 80321e4:	2ac01917 	ldw	r11,100(r5)
 80321e8:	2a80038b 	ldhu	r10,14(r5)
 80321ec:	2a400717 	ldw	r9,28(r5)
 80321f0:	2a000917 	ldw	r8,36(r5)
 80321f4:	defee204 	addi	sp,sp,-1144
 80321f8:	00c10004 	movi	r3,1024
 80321fc:	dc011a15 	stw	r16,1128(sp)
 8032200:	10bfff4c 	andi	r2,r2,65533
 8032204:	2821883a 	mov	r16,r5
 8032208:	d8cb883a 	add	r5,sp,r3
 803220c:	dc811c15 	stw	r18,1136(sp)
 8032210:	dc411b15 	stw	r17,1132(sp)
 8032214:	dfc11d15 	stw	ra,1140(sp)
 8032218:	2025883a 	mov	r18,r4
 803221c:	d881030d 	sth	r2,1036(sp)
 8032220:	dac11915 	stw	r11,1124(sp)
 8032224:	da81038d 	sth	r10,1038(sp)
 8032228:	da410715 	stw	r9,1052(sp)
 803222c:	da010915 	stw	r8,1060(sp)
 8032230:	dec10015 	stw	sp,1024(sp)
 8032234:	dec10415 	stw	sp,1040(sp)
 8032238:	d8c10215 	stw	r3,1032(sp)
 803223c:	d8c10515 	stw	r3,1044(sp)
 8032240:	d8010615 	stw	zero,1048(sp)
 8032244:	8030d680 	call	8030d68 <___vfiprintf_internal_r>
 8032248:	1023883a 	mov	r17,r2
 803224c:	10000416 	blt	r2,zero,8032260 <__sbprintf+0x80>
 8032250:	d9410004 	addi	r5,sp,1024
 8032254:	9009883a 	mov	r4,r18
 8032258:	802e0380 	call	802e038 <_fflush_r>
 803225c:	10000d1e 	bne	r2,zero,8032294 <__sbprintf+0xb4>
 8032260:	d881030b 	ldhu	r2,1036(sp)
 8032264:	1080100c 	andi	r2,r2,64
 8032268:	10000326 	beq	r2,zero,8032278 <__sbprintf+0x98>
 803226c:	8080030b 	ldhu	r2,12(r16)
 8032270:	10801014 	ori	r2,r2,64
 8032274:	8080030d 	sth	r2,12(r16)
 8032278:	8805883a 	mov	r2,r17
 803227c:	dfc11d17 	ldw	ra,1140(sp)
 8032280:	dc811c17 	ldw	r18,1136(sp)
 8032284:	dc411b17 	ldw	r17,1132(sp)
 8032288:	dc011a17 	ldw	r16,1128(sp)
 803228c:	dec11e04 	addi	sp,sp,1144
 8032290:	f800283a 	ret
 8032294:	047fffc4 	movi	r17,-1
 8032298:	003ff106 	br	8032260 <_gp+0xffff0b54>

0803229c <_write_r>:
 803229c:	defffd04 	addi	sp,sp,-12
 80322a0:	2805883a 	mov	r2,r5
 80322a4:	dc000015 	stw	r16,0(sp)
 80322a8:	04020134 	movhi	r16,2052
 80322ac:	dc400115 	stw	r17,4(sp)
 80322b0:	300b883a 	mov	r5,r6
 80322b4:	842cf704 	addi	r16,r16,-19492
 80322b8:	2023883a 	mov	r17,r4
 80322bc:	380d883a 	mov	r6,r7
 80322c0:	1009883a 	mov	r4,r2
 80322c4:	dfc00215 	stw	ra,8(sp)
 80322c8:	80000015 	stw	zero,0(r16)
 80322cc:	8033f000 	call	8033f00 <write>
 80322d0:	00ffffc4 	movi	r3,-1
 80322d4:	10c00526 	beq	r2,r3,80322ec <_write_r+0x50>
 80322d8:	dfc00217 	ldw	ra,8(sp)
 80322dc:	dc400117 	ldw	r17,4(sp)
 80322e0:	dc000017 	ldw	r16,0(sp)
 80322e4:	dec00304 	addi	sp,sp,12
 80322e8:	f800283a 	ret
 80322ec:	80c00017 	ldw	r3,0(r16)
 80322f0:	183ff926 	beq	r3,zero,80322d8 <_gp+0xffff0bcc>
 80322f4:	88c00015 	stw	r3,0(r17)
 80322f8:	003ff706 	br	80322d8 <_gp+0xffff0bcc>

080322fc <_close_r>:
 80322fc:	defffd04 	addi	sp,sp,-12
 8032300:	dc000015 	stw	r16,0(sp)
 8032304:	04020134 	movhi	r16,2052
 8032308:	dc400115 	stw	r17,4(sp)
 803230c:	842cf704 	addi	r16,r16,-19492
 8032310:	2023883a 	mov	r17,r4
 8032314:	2809883a 	mov	r4,r5
 8032318:	dfc00215 	stw	ra,8(sp)
 803231c:	80000015 	stw	zero,0(r16)
 8032320:	80336bc0 	call	80336bc <close>
 8032324:	00ffffc4 	movi	r3,-1
 8032328:	10c00526 	beq	r2,r3,8032340 <_close_r+0x44>
 803232c:	dfc00217 	ldw	ra,8(sp)
 8032330:	dc400117 	ldw	r17,4(sp)
 8032334:	dc000017 	ldw	r16,0(sp)
 8032338:	dec00304 	addi	sp,sp,12
 803233c:	f800283a 	ret
 8032340:	80c00017 	ldw	r3,0(r16)
 8032344:	183ff926 	beq	r3,zero,803232c <_gp+0xffff0c20>
 8032348:	88c00015 	stw	r3,0(r17)
 803234c:	003ff706 	br	803232c <_gp+0xffff0c20>

08032350 <_calloc_r>:
 8032350:	298b383a 	mul	r5,r5,r6
 8032354:	defffe04 	addi	sp,sp,-8
 8032358:	dfc00115 	stw	ra,4(sp)
 803235c:	dc000015 	stw	r16,0(sp)
 8032360:	80294700 	call	8029470 <_malloc_r>
 8032364:	10002926 	beq	r2,zero,803240c <_calloc_r+0xbc>
 8032368:	11bfff17 	ldw	r6,-4(r2)
 803236c:	1021883a 	mov	r16,r2
 8032370:	00bfff04 	movi	r2,-4
 8032374:	308c703a 	and	r6,r6,r2
 8032378:	00c00904 	movi	r3,36
 803237c:	308d883a 	add	r6,r6,r2
 8032380:	19801636 	bltu	r3,r6,80323dc <_calloc_r+0x8c>
 8032384:	008004c4 	movi	r2,19
 8032388:	11800b2e 	bgeu	r2,r6,80323b8 <_calloc_r+0x68>
 803238c:	80000015 	stw	zero,0(r16)
 8032390:	80000115 	stw	zero,4(r16)
 8032394:	008006c4 	movi	r2,27
 8032398:	11801a2e 	bgeu	r2,r6,8032404 <_calloc_r+0xb4>
 803239c:	80000215 	stw	zero,8(r16)
 80323a0:	80000315 	stw	zero,12(r16)
 80323a4:	30c0151e 	bne	r6,r3,80323fc <_calloc_r+0xac>
 80323a8:	80000415 	stw	zero,16(r16)
 80323ac:	80800604 	addi	r2,r16,24
 80323b0:	80000515 	stw	zero,20(r16)
 80323b4:	00000106 	br	80323bc <_calloc_r+0x6c>
 80323b8:	8005883a 	mov	r2,r16
 80323bc:	10000015 	stw	zero,0(r2)
 80323c0:	10000115 	stw	zero,4(r2)
 80323c4:	10000215 	stw	zero,8(r2)
 80323c8:	8005883a 	mov	r2,r16
 80323cc:	dfc00117 	ldw	ra,4(sp)
 80323d0:	dc000017 	ldw	r16,0(sp)
 80323d4:	dec00204 	addi	sp,sp,8
 80323d8:	f800283a 	ret
 80323dc:	000b883a 	mov	r5,zero
 80323e0:	8009883a 	mov	r4,r16
 80323e4:	802f3b40 	call	802f3b4 <memset>
 80323e8:	8005883a 	mov	r2,r16
 80323ec:	dfc00117 	ldw	ra,4(sp)
 80323f0:	dc000017 	ldw	r16,0(sp)
 80323f4:	dec00204 	addi	sp,sp,8
 80323f8:	f800283a 	ret
 80323fc:	80800404 	addi	r2,r16,16
 8032400:	003fee06 	br	80323bc <_gp+0xffff0cb0>
 8032404:	80800204 	addi	r2,r16,8
 8032408:	003fec06 	br	80323bc <_gp+0xffff0cb0>
 803240c:	0005883a 	mov	r2,zero
 8032410:	003fee06 	br	80323cc <_gp+0xffff0cc0>

08032414 <_fclose_r>:
 8032414:	28003926 	beq	r5,zero,80324fc <_fclose_r+0xe8>
 8032418:	defffc04 	addi	sp,sp,-16
 803241c:	dc400115 	stw	r17,4(sp)
 8032420:	dc000015 	stw	r16,0(sp)
 8032424:	dfc00315 	stw	ra,12(sp)
 8032428:	dc800215 	stw	r18,8(sp)
 803242c:	2023883a 	mov	r17,r4
 8032430:	2821883a 	mov	r16,r5
 8032434:	20000226 	beq	r4,zero,8032440 <_fclose_r+0x2c>
 8032438:	20800e17 	ldw	r2,56(r4)
 803243c:	10002726 	beq	r2,zero,80324dc <_fclose_r+0xc8>
 8032440:	8080030f 	ldh	r2,12(r16)
 8032444:	1000071e 	bne	r2,zero,8032464 <_fclose_r+0x50>
 8032448:	0005883a 	mov	r2,zero
 803244c:	dfc00317 	ldw	ra,12(sp)
 8032450:	dc800217 	ldw	r18,8(sp)
 8032454:	dc400117 	ldw	r17,4(sp)
 8032458:	dc000017 	ldw	r16,0(sp)
 803245c:	dec00404 	addi	sp,sp,16
 8032460:	f800283a 	ret
 8032464:	800b883a 	mov	r5,r16
 8032468:	8809883a 	mov	r4,r17
 803246c:	802de1c0 	call	802de1c <__sflush_r>
 8032470:	1025883a 	mov	r18,r2
 8032474:	80800b17 	ldw	r2,44(r16)
 8032478:	10000426 	beq	r2,zero,803248c <_fclose_r+0x78>
 803247c:	81400717 	ldw	r5,28(r16)
 8032480:	8809883a 	mov	r4,r17
 8032484:	103ee83a 	callr	r2
 8032488:	10001616 	blt	r2,zero,80324e4 <_fclose_r+0xd0>
 803248c:	8080030b 	ldhu	r2,12(r16)
 8032490:	1080200c 	andi	r2,r2,128
 8032494:	1000151e 	bne	r2,zero,80324ec <_fclose_r+0xd8>
 8032498:	81400c17 	ldw	r5,48(r16)
 803249c:	28000526 	beq	r5,zero,80324b4 <_fclose_r+0xa0>
 80324a0:	80801004 	addi	r2,r16,64
 80324a4:	28800226 	beq	r5,r2,80324b0 <_fclose_r+0x9c>
 80324a8:	8809883a 	mov	r4,r17
 80324ac:	802e5880 	call	802e588 <_free_r>
 80324b0:	80000c15 	stw	zero,48(r16)
 80324b4:	81401117 	ldw	r5,68(r16)
 80324b8:	28000326 	beq	r5,zero,80324c8 <_fclose_r+0xb4>
 80324bc:	8809883a 	mov	r4,r17
 80324c0:	802e5880 	call	802e588 <_free_r>
 80324c4:	80001115 	stw	zero,68(r16)
 80324c8:	802e4240 	call	802e424 <__sfp_lock_acquire>
 80324cc:	8000030d 	sth	zero,12(r16)
 80324d0:	802e4280 	call	802e428 <__sfp_lock_release>
 80324d4:	9005883a 	mov	r2,r18
 80324d8:	003fdc06 	br	803244c <_gp+0xffff0d40>
 80324dc:	802e4140 	call	802e414 <__sinit>
 80324e0:	003fd706 	br	8032440 <_gp+0xffff0d34>
 80324e4:	04bfffc4 	movi	r18,-1
 80324e8:	003fe806 	br	803248c <_gp+0xffff0d80>
 80324ec:	81400417 	ldw	r5,16(r16)
 80324f0:	8809883a 	mov	r4,r17
 80324f4:	802e5880 	call	802e588 <_free_r>
 80324f8:	003fe706 	br	8032498 <_gp+0xffff0d8c>
 80324fc:	0005883a 	mov	r2,zero
 8032500:	f800283a 	ret

08032504 <fclose>:
 8032504:	00820134 	movhi	r2,2052
 8032508:	10a5c504 	addi	r2,r2,-26860
 803250c:	200b883a 	mov	r5,r4
 8032510:	11000017 	ldw	r4,0(r2)
 8032514:	80324141 	jmpi	8032414 <_fclose_r>

08032518 <__fputwc>:
 8032518:	defff804 	addi	sp,sp,-32
 803251c:	dcc00415 	stw	r19,16(sp)
 8032520:	dc800315 	stw	r18,12(sp)
 8032524:	dc000115 	stw	r16,4(sp)
 8032528:	dfc00715 	stw	ra,28(sp)
 803252c:	dd400615 	stw	r21,24(sp)
 8032530:	dd000515 	stw	r20,20(sp)
 8032534:	dc400215 	stw	r17,8(sp)
 8032538:	2027883a 	mov	r19,r4
 803253c:	2825883a 	mov	r18,r5
 8032540:	3021883a 	mov	r16,r6
 8032544:	802ef640 	call	802ef64 <__locale_mb_cur_max>
 8032548:	00c00044 	movi	r3,1
 803254c:	10c03e26 	beq	r2,r3,8032648 <__fputwc+0x130>
 8032550:	81c01704 	addi	r7,r16,92
 8032554:	900d883a 	mov	r6,r18
 8032558:	d80b883a 	mov	r5,sp
 803255c:	9809883a 	mov	r4,r19
 8032560:	80329e80 	call	80329e8 <_wcrtomb_r>
 8032564:	1029883a 	mov	r20,r2
 8032568:	00bfffc4 	movi	r2,-1
 803256c:	a0802026 	beq	r20,r2,80325f0 <__fputwc+0xd8>
 8032570:	d9400003 	ldbu	r5,0(sp)
 8032574:	a0001c26 	beq	r20,zero,80325e8 <__fputwc+0xd0>
 8032578:	0023883a 	mov	r17,zero
 803257c:	05400284 	movi	r21,10
 8032580:	00000906 	br	80325a8 <__fputwc+0x90>
 8032584:	80800017 	ldw	r2,0(r16)
 8032588:	11400005 	stb	r5,0(r2)
 803258c:	80c00017 	ldw	r3,0(r16)
 8032590:	18c00044 	addi	r3,r3,1
 8032594:	80c00015 	stw	r3,0(r16)
 8032598:	8c400044 	addi	r17,r17,1
 803259c:	dc45883a 	add	r2,sp,r17
 80325a0:	8d00112e 	bgeu	r17,r20,80325e8 <__fputwc+0xd0>
 80325a4:	11400003 	ldbu	r5,0(r2)
 80325a8:	80c00217 	ldw	r3,8(r16)
 80325ac:	18ffffc4 	addi	r3,r3,-1
 80325b0:	80c00215 	stw	r3,8(r16)
 80325b4:	183ff30e 	bge	r3,zero,8032584 <_gp+0xffff0e78>
 80325b8:	80800617 	ldw	r2,24(r16)
 80325bc:	18801916 	blt	r3,r2,8032624 <__fputwc+0x10c>
 80325c0:	80800017 	ldw	r2,0(r16)
 80325c4:	11400005 	stb	r5,0(r2)
 80325c8:	80800017 	ldw	r2,0(r16)
 80325cc:	10c00003 	ldbu	r3,0(r2)
 80325d0:	10800044 	addi	r2,r2,1
 80325d4:	1d402326 	beq	r3,r21,8032664 <__fputwc+0x14c>
 80325d8:	80800015 	stw	r2,0(r16)
 80325dc:	8c400044 	addi	r17,r17,1
 80325e0:	dc45883a 	add	r2,sp,r17
 80325e4:	8d3fef36 	bltu	r17,r20,80325a4 <_gp+0xffff0e98>
 80325e8:	9005883a 	mov	r2,r18
 80325ec:	00000406 	br	8032600 <__fputwc+0xe8>
 80325f0:	80c0030b 	ldhu	r3,12(r16)
 80325f4:	a005883a 	mov	r2,r20
 80325f8:	18c01014 	ori	r3,r3,64
 80325fc:	80c0030d 	sth	r3,12(r16)
 8032600:	dfc00717 	ldw	ra,28(sp)
 8032604:	dd400617 	ldw	r21,24(sp)
 8032608:	dd000517 	ldw	r20,20(sp)
 803260c:	dcc00417 	ldw	r19,16(sp)
 8032610:	dc800317 	ldw	r18,12(sp)
 8032614:	dc400217 	ldw	r17,8(sp)
 8032618:	dc000117 	ldw	r16,4(sp)
 803261c:	dec00804 	addi	sp,sp,32
 8032620:	f800283a 	ret
 8032624:	800d883a 	mov	r6,r16
 8032628:	29403fcc 	andi	r5,r5,255
 803262c:	9809883a 	mov	r4,r19
 8032630:	80328900 	call	8032890 <__swbuf_r>
 8032634:	10bfffe0 	cmpeqi	r2,r2,-1
 8032638:	10803fcc 	andi	r2,r2,255
 803263c:	103fd626 	beq	r2,zero,8032598 <_gp+0xffff0e8c>
 8032640:	00bfffc4 	movi	r2,-1
 8032644:	003fee06 	br	8032600 <_gp+0xffff0ef4>
 8032648:	90ffffc4 	addi	r3,r18,-1
 803264c:	01003f84 	movi	r4,254
 8032650:	20ffbf36 	bltu	r4,r3,8032550 <_gp+0xffff0e44>
 8032654:	900b883a 	mov	r5,r18
 8032658:	dc800005 	stb	r18,0(sp)
 803265c:	1029883a 	mov	r20,r2
 8032660:	003fc506 	br	8032578 <_gp+0xffff0e6c>
 8032664:	800d883a 	mov	r6,r16
 8032668:	a80b883a 	mov	r5,r21
 803266c:	9809883a 	mov	r4,r19
 8032670:	80328900 	call	8032890 <__swbuf_r>
 8032674:	10bfffe0 	cmpeqi	r2,r2,-1
 8032678:	003fef06 	br	8032638 <_gp+0xffff0f2c>

0803267c <_fputwc_r>:
 803267c:	3080030b 	ldhu	r2,12(r6)
 8032680:	10c8000c 	andi	r3,r2,8192
 8032684:	1800051e 	bne	r3,zero,803269c <_fputwc_r+0x20>
 8032688:	30c01917 	ldw	r3,100(r6)
 803268c:	10880014 	ori	r2,r2,8192
 8032690:	3080030d 	sth	r2,12(r6)
 8032694:	18880014 	ori	r2,r3,8192
 8032698:	30801915 	stw	r2,100(r6)
 803269c:	80325181 	jmpi	8032518 <__fputwc>

080326a0 <fputwc>:
 80326a0:	00820134 	movhi	r2,2052
 80326a4:	defffc04 	addi	sp,sp,-16
 80326a8:	10a5c504 	addi	r2,r2,-26860
 80326ac:	dc000115 	stw	r16,4(sp)
 80326b0:	14000017 	ldw	r16,0(r2)
 80326b4:	dc400215 	stw	r17,8(sp)
 80326b8:	dfc00315 	stw	ra,12(sp)
 80326bc:	2023883a 	mov	r17,r4
 80326c0:	80000226 	beq	r16,zero,80326cc <fputwc+0x2c>
 80326c4:	80800e17 	ldw	r2,56(r16)
 80326c8:	10001026 	beq	r2,zero,803270c <fputwc+0x6c>
 80326cc:	2880030b 	ldhu	r2,12(r5)
 80326d0:	10c8000c 	andi	r3,r2,8192
 80326d4:	1800051e 	bne	r3,zero,80326ec <fputwc+0x4c>
 80326d8:	28c01917 	ldw	r3,100(r5)
 80326dc:	10880014 	ori	r2,r2,8192
 80326e0:	2880030d 	sth	r2,12(r5)
 80326e4:	18880014 	ori	r2,r3,8192
 80326e8:	28801915 	stw	r2,100(r5)
 80326ec:	280d883a 	mov	r6,r5
 80326f0:	8009883a 	mov	r4,r16
 80326f4:	880b883a 	mov	r5,r17
 80326f8:	dfc00317 	ldw	ra,12(sp)
 80326fc:	dc400217 	ldw	r17,8(sp)
 8032700:	dc000117 	ldw	r16,4(sp)
 8032704:	dec00404 	addi	sp,sp,16
 8032708:	80325181 	jmpi	8032518 <__fputwc>
 803270c:	8009883a 	mov	r4,r16
 8032710:	d9400015 	stw	r5,0(sp)
 8032714:	802e4140 	call	802e414 <__sinit>
 8032718:	d9400017 	ldw	r5,0(sp)
 803271c:	003feb06 	br	80326cc <_gp+0xffff0fc0>

08032720 <_fstat_r>:
 8032720:	defffd04 	addi	sp,sp,-12
 8032724:	2805883a 	mov	r2,r5
 8032728:	dc000015 	stw	r16,0(sp)
 803272c:	04020134 	movhi	r16,2052
 8032730:	dc400115 	stw	r17,4(sp)
 8032734:	842cf704 	addi	r16,r16,-19492
 8032738:	2023883a 	mov	r17,r4
 803273c:	300b883a 	mov	r5,r6
 8032740:	1009883a 	mov	r4,r2
 8032744:	dfc00215 	stw	ra,8(sp)
 8032748:	80000015 	stw	zero,0(r16)
 803274c:	80338280 	call	8033828 <fstat>
 8032750:	00ffffc4 	movi	r3,-1
 8032754:	10c00526 	beq	r2,r3,803276c <_fstat_r+0x4c>
 8032758:	dfc00217 	ldw	ra,8(sp)
 803275c:	dc400117 	ldw	r17,4(sp)
 8032760:	dc000017 	ldw	r16,0(sp)
 8032764:	dec00304 	addi	sp,sp,12
 8032768:	f800283a 	ret
 803276c:	80c00017 	ldw	r3,0(r16)
 8032770:	183ff926 	beq	r3,zero,8032758 <_gp+0xffff104c>
 8032774:	88c00015 	stw	r3,0(r17)
 8032778:	003ff706 	br	8032758 <_gp+0xffff104c>

0803277c <_isatty_r>:
 803277c:	defffd04 	addi	sp,sp,-12
 8032780:	dc000015 	stw	r16,0(sp)
 8032784:	04020134 	movhi	r16,2052
 8032788:	dc400115 	stw	r17,4(sp)
 803278c:	842cf704 	addi	r16,r16,-19492
 8032790:	2023883a 	mov	r17,r4
 8032794:	2809883a 	mov	r4,r5
 8032798:	dfc00215 	stw	ra,8(sp)
 803279c:	80000015 	stw	zero,0(r16)
 80327a0:	80339140 	call	8033914 <isatty>
 80327a4:	00ffffc4 	movi	r3,-1
 80327a8:	10c00526 	beq	r2,r3,80327c0 <_isatty_r+0x44>
 80327ac:	dfc00217 	ldw	ra,8(sp)
 80327b0:	dc400117 	ldw	r17,4(sp)
 80327b4:	dc000017 	ldw	r16,0(sp)
 80327b8:	dec00304 	addi	sp,sp,12
 80327bc:	f800283a 	ret
 80327c0:	80c00017 	ldw	r3,0(r16)
 80327c4:	183ff926 	beq	r3,zero,80327ac <_gp+0xffff10a0>
 80327c8:	88c00015 	stw	r3,0(r17)
 80327cc:	003ff706 	br	80327ac <_gp+0xffff10a0>

080327d0 <_lseek_r>:
 80327d0:	defffd04 	addi	sp,sp,-12
 80327d4:	2805883a 	mov	r2,r5
 80327d8:	dc000015 	stw	r16,0(sp)
 80327dc:	04020134 	movhi	r16,2052
 80327e0:	dc400115 	stw	r17,4(sp)
 80327e4:	300b883a 	mov	r5,r6
 80327e8:	842cf704 	addi	r16,r16,-19492
 80327ec:	2023883a 	mov	r17,r4
 80327f0:	380d883a 	mov	r6,r7
 80327f4:	1009883a 	mov	r4,r2
 80327f8:	dfc00215 	stw	ra,8(sp)
 80327fc:	80000015 	stw	zero,0(r16)
 8032800:	8033ae00 	call	8033ae0 <lseek>
 8032804:	00ffffc4 	movi	r3,-1
 8032808:	10c00526 	beq	r2,r3,8032820 <_lseek_r+0x50>
 803280c:	dfc00217 	ldw	ra,8(sp)
 8032810:	dc400117 	ldw	r17,4(sp)
 8032814:	dc000017 	ldw	r16,0(sp)
 8032818:	dec00304 	addi	sp,sp,12
 803281c:	f800283a 	ret
 8032820:	80c00017 	ldw	r3,0(r16)
 8032824:	183ff926 	beq	r3,zero,803280c <_gp+0xffff1100>
 8032828:	88c00015 	stw	r3,0(r17)
 803282c:	003ff706 	br	803280c <_gp+0xffff1100>

08032830 <_read_r>:
 8032830:	defffd04 	addi	sp,sp,-12
 8032834:	2805883a 	mov	r2,r5
 8032838:	dc000015 	stw	r16,0(sp)
 803283c:	04020134 	movhi	r16,2052
 8032840:	dc400115 	stw	r17,4(sp)
 8032844:	300b883a 	mov	r5,r6
 8032848:	842cf704 	addi	r16,r16,-19492
 803284c:	2023883a 	mov	r17,r4
 8032850:	380d883a 	mov	r6,r7
 8032854:	1009883a 	mov	r4,r2
 8032858:	dfc00215 	stw	ra,8(sp)
 803285c:	80000015 	stw	zero,0(r16)
 8032860:	8033cb40 	call	8033cb4 <read>
 8032864:	00ffffc4 	movi	r3,-1
 8032868:	10c00526 	beq	r2,r3,8032880 <_read_r+0x50>
 803286c:	dfc00217 	ldw	ra,8(sp)
 8032870:	dc400117 	ldw	r17,4(sp)
 8032874:	dc000017 	ldw	r16,0(sp)
 8032878:	dec00304 	addi	sp,sp,12
 803287c:	f800283a 	ret
 8032880:	80c00017 	ldw	r3,0(r16)
 8032884:	183ff926 	beq	r3,zero,803286c <_gp+0xffff1160>
 8032888:	88c00015 	stw	r3,0(r17)
 803288c:	003ff706 	br	803286c <_gp+0xffff1160>

08032890 <__swbuf_r>:
 8032890:	defffb04 	addi	sp,sp,-20
 8032894:	dcc00315 	stw	r19,12(sp)
 8032898:	dc800215 	stw	r18,8(sp)
 803289c:	dc000015 	stw	r16,0(sp)
 80328a0:	dfc00415 	stw	ra,16(sp)
 80328a4:	dc400115 	stw	r17,4(sp)
 80328a8:	2025883a 	mov	r18,r4
 80328ac:	2827883a 	mov	r19,r5
 80328b0:	3021883a 	mov	r16,r6
 80328b4:	20000226 	beq	r4,zero,80328c0 <__swbuf_r+0x30>
 80328b8:	20800e17 	ldw	r2,56(r4)
 80328bc:	10004226 	beq	r2,zero,80329c8 <__swbuf_r+0x138>
 80328c0:	80800617 	ldw	r2,24(r16)
 80328c4:	8100030b 	ldhu	r4,12(r16)
 80328c8:	80800215 	stw	r2,8(r16)
 80328cc:	2080020c 	andi	r2,r4,8
 80328d0:	10003626 	beq	r2,zero,80329ac <__swbuf_r+0x11c>
 80328d4:	80c00417 	ldw	r3,16(r16)
 80328d8:	18003426 	beq	r3,zero,80329ac <__swbuf_r+0x11c>
 80328dc:	2088000c 	andi	r2,r4,8192
 80328e0:	9c403fcc 	andi	r17,r19,255
 80328e4:	10001a26 	beq	r2,zero,8032950 <__swbuf_r+0xc0>
 80328e8:	80800017 	ldw	r2,0(r16)
 80328ec:	81000517 	ldw	r4,20(r16)
 80328f0:	10c7c83a 	sub	r3,r2,r3
 80328f4:	1900200e 	bge	r3,r4,8032978 <__swbuf_r+0xe8>
 80328f8:	18c00044 	addi	r3,r3,1
 80328fc:	81000217 	ldw	r4,8(r16)
 8032900:	11400044 	addi	r5,r2,1
 8032904:	81400015 	stw	r5,0(r16)
 8032908:	213fffc4 	addi	r4,r4,-1
 803290c:	81000215 	stw	r4,8(r16)
 8032910:	14c00005 	stb	r19,0(r2)
 8032914:	80800517 	ldw	r2,20(r16)
 8032918:	10c01e26 	beq	r2,r3,8032994 <__swbuf_r+0x104>
 803291c:	8080030b 	ldhu	r2,12(r16)
 8032920:	1080004c 	andi	r2,r2,1
 8032924:	10000226 	beq	r2,zero,8032930 <__swbuf_r+0xa0>
 8032928:	00800284 	movi	r2,10
 803292c:	88801926 	beq	r17,r2,8032994 <__swbuf_r+0x104>
 8032930:	8805883a 	mov	r2,r17
 8032934:	dfc00417 	ldw	ra,16(sp)
 8032938:	dcc00317 	ldw	r19,12(sp)
 803293c:	dc800217 	ldw	r18,8(sp)
 8032940:	dc400117 	ldw	r17,4(sp)
 8032944:	dc000017 	ldw	r16,0(sp)
 8032948:	dec00504 	addi	sp,sp,20
 803294c:	f800283a 	ret
 8032950:	81401917 	ldw	r5,100(r16)
 8032954:	00b7ffc4 	movi	r2,-8193
 8032958:	21080014 	ori	r4,r4,8192
 803295c:	2884703a 	and	r2,r5,r2
 8032960:	80801915 	stw	r2,100(r16)
 8032964:	80800017 	ldw	r2,0(r16)
 8032968:	8100030d 	sth	r4,12(r16)
 803296c:	81000517 	ldw	r4,20(r16)
 8032970:	10c7c83a 	sub	r3,r2,r3
 8032974:	193fe016 	blt	r3,r4,80328f8 <_gp+0xffff11ec>
 8032978:	800b883a 	mov	r5,r16
 803297c:	9009883a 	mov	r4,r18
 8032980:	802e0380 	call	802e038 <_fflush_r>
 8032984:	1000071e 	bne	r2,zero,80329a4 <__swbuf_r+0x114>
 8032988:	80800017 	ldw	r2,0(r16)
 803298c:	00c00044 	movi	r3,1
 8032990:	003fda06 	br	80328fc <_gp+0xffff11f0>
 8032994:	800b883a 	mov	r5,r16
 8032998:	9009883a 	mov	r4,r18
 803299c:	802e0380 	call	802e038 <_fflush_r>
 80329a0:	103fe326 	beq	r2,zero,8032930 <_gp+0xffff1224>
 80329a4:	00bfffc4 	movi	r2,-1
 80329a8:	003fe206 	br	8032934 <_gp+0xffff1228>
 80329ac:	800b883a 	mov	r5,r16
 80329b0:	9009883a 	mov	r4,r18
 80329b4:	802c2c00 	call	802c2c0 <__swsetup_r>
 80329b8:	103ffa1e 	bne	r2,zero,80329a4 <_gp+0xffff1298>
 80329bc:	8100030b 	ldhu	r4,12(r16)
 80329c0:	80c00417 	ldw	r3,16(r16)
 80329c4:	003fc506 	br	80328dc <_gp+0xffff11d0>
 80329c8:	802e4140 	call	802e414 <__sinit>
 80329cc:	003fbc06 	br	80328c0 <_gp+0xffff11b4>

080329d0 <__swbuf>:
 80329d0:	00820134 	movhi	r2,2052
 80329d4:	10a5c504 	addi	r2,r2,-26860
 80329d8:	280d883a 	mov	r6,r5
 80329dc:	200b883a 	mov	r5,r4
 80329e0:	11000017 	ldw	r4,0(r2)
 80329e4:	80328901 	jmpi	8032890 <__swbuf_r>

080329e8 <_wcrtomb_r>:
 80329e8:	defff604 	addi	sp,sp,-40
 80329ec:	00820134 	movhi	r2,2052
 80329f0:	dc800815 	stw	r18,32(sp)
 80329f4:	dc400715 	stw	r17,28(sp)
 80329f8:	dc000615 	stw	r16,24(sp)
 80329fc:	10a5c904 	addi	r2,r2,-26844
 8032a00:	dfc00915 	stw	ra,36(sp)
 8032a04:	2021883a 	mov	r16,r4
 8032a08:	3823883a 	mov	r17,r7
 8032a0c:	14800017 	ldw	r18,0(r2)
 8032a10:	28001426 	beq	r5,zero,8032a64 <_wcrtomb_r+0x7c>
 8032a14:	d9400415 	stw	r5,16(sp)
 8032a18:	d9800515 	stw	r6,20(sp)
 8032a1c:	802ef580 	call	802ef58 <__locale_charset>
 8032a20:	d9800517 	ldw	r6,20(sp)
 8032a24:	d9400417 	ldw	r5,16(sp)
 8032a28:	100f883a 	mov	r7,r2
 8032a2c:	dc400015 	stw	r17,0(sp)
 8032a30:	8009883a 	mov	r4,r16
 8032a34:	903ee83a 	callr	r18
 8032a38:	00ffffc4 	movi	r3,-1
 8032a3c:	10c0031e 	bne	r2,r3,8032a4c <_wcrtomb_r+0x64>
 8032a40:	88000015 	stw	zero,0(r17)
 8032a44:	00c02284 	movi	r3,138
 8032a48:	80c00015 	stw	r3,0(r16)
 8032a4c:	dfc00917 	ldw	ra,36(sp)
 8032a50:	dc800817 	ldw	r18,32(sp)
 8032a54:	dc400717 	ldw	r17,28(sp)
 8032a58:	dc000617 	ldw	r16,24(sp)
 8032a5c:	dec00a04 	addi	sp,sp,40
 8032a60:	f800283a 	ret
 8032a64:	802ef580 	call	802ef58 <__locale_charset>
 8032a68:	100f883a 	mov	r7,r2
 8032a6c:	dc400015 	stw	r17,0(sp)
 8032a70:	000d883a 	mov	r6,zero
 8032a74:	d9400104 	addi	r5,sp,4
 8032a78:	8009883a 	mov	r4,r16
 8032a7c:	903ee83a 	callr	r18
 8032a80:	003fed06 	br	8032a38 <_gp+0xffff132c>

08032a84 <wcrtomb>:
 8032a84:	defff604 	addi	sp,sp,-40
 8032a88:	00820134 	movhi	r2,2052
 8032a8c:	dc800615 	stw	r18,24(sp)
 8032a90:	dc400515 	stw	r17,20(sp)
 8032a94:	10a5c504 	addi	r2,r2,-26860
 8032a98:	dfc00915 	stw	ra,36(sp)
 8032a9c:	dd000815 	stw	r20,32(sp)
 8032aa0:	dcc00715 	stw	r19,28(sp)
 8032aa4:	dc000415 	stw	r16,16(sp)
 8032aa8:	3025883a 	mov	r18,r6
 8032aac:	14400017 	ldw	r17,0(r2)
 8032ab0:	20001926 	beq	r4,zero,8032b18 <wcrtomb+0x94>
 8032ab4:	00820134 	movhi	r2,2052
 8032ab8:	10a5c904 	addi	r2,r2,-26844
 8032abc:	15000017 	ldw	r20,0(r2)
 8032ac0:	2021883a 	mov	r16,r4
 8032ac4:	2827883a 	mov	r19,r5
 8032ac8:	802ef580 	call	802ef58 <__locale_charset>
 8032acc:	100f883a 	mov	r7,r2
 8032ad0:	dc800015 	stw	r18,0(sp)
 8032ad4:	980d883a 	mov	r6,r19
 8032ad8:	800b883a 	mov	r5,r16
 8032adc:	8809883a 	mov	r4,r17
 8032ae0:	a03ee83a 	callr	r20
 8032ae4:	00ffffc4 	movi	r3,-1
 8032ae8:	10c0031e 	bne	r2,r3,8032af8 <wcrtomb+0x74>
 8032aec:	90000015 	stw	zero,0(r18)
 8032af0:	00c02284 	movi	r3,138
 8032af4:	88c00015 	stw	r3,0(r17)
 8032af8:	dfc00917 	ldw	ra,36(sp)
 8032afc:	dd000817 	ldw	r20,32(sp)
 8032b00:	dcc00717 	ldw	r19,28(sp)
 8032b04:	dc800617 	ldw	r18,24(sp)
 8032b08:	dc400517 	ldw	r17,20(sp)
 8032b0c:	dc000417 	ldw	r16,16(sp)
 8032b10:	dec00a04 	addi	sp,sp,40
 8032b14:	f800283a 	ret
 8032b18:	00820134 	movhi	r2,2052
 8032b1c:	10a5c904 	addi	r2,r2,-26844
 8032b20:	14000017 	ldw	r16,0(r2)
 8032b24:	802ef580 	call	802ef58 <__locale_charset>
 8032b28:	100f883a 	mov	r7,r2
 8032b2c:	dc800015 	stw	r18,0(sp)
 8032b30:	000d883a 	mov	r6,zero
 8032b34:	d9400104 	addi	r5,sp,4
 8032b38:	8809883a 	mov	r4,r17
 8032b3c:	803ee83a 	callr	r16
 8032b40:	003fe806 	br	8032ae4 <_gp+0xffff13d8>

08032b44 <__ascii_wctomb>:
 8032b44:	28000526 	beq	r5,zero,8032b5c <__ascii_wctomb+0x18>
 8032b48:	00803fc4 	movi	r2,255
 8032b4c:	11800536 	bltu	r2,r6,8032b64 <__ascii_wctomb+0x20>
 8032b50:	29800005 	stb	r6,0(r5)
 8032b54:	00800044 	movi	r2,1
 8032b58:	f800283a 	ret
 8032b5c:	0005883a 	mov	r2,zero
 8032b60:	f800283a 	ret
 8032b64:	00802284 	movi	r2,138
 8032b68:	20800015 	stw	r2,0(r4)
 8032b6c:	00bfffc4 	movi	r2,-1
 8032b70:	f800283a 	ret

08032b74 <_wctomb_r>:
 8032b74:	00820134 	movhi	r2,2052
 8032b78:	defff904 	addi	sp,sp,-28
 8032b7c:	10a5c904 	addi	r2,r2,-26844
 8032b80:	dfc00615 	stw	ra,24(sp)
 8032b84:	dc400515 	stw	r17,20(sp)
 8032b88:	dc000415 	stw	r16,16(sp)
 8032b8c:	3823883a 	mov	r17,r7
 8032b90:	14000017 	ldw	r16,0(r2)
 8032b94:	d9000115 	stw	r4,4(sp)
 8032b98:	d9400215 	stw	r5,8(sp)
 8032b9c:	d9800315 	stw	r6,12(sp)
 8032ba0:	802ef580 	call	802ef58 <__locale_charset>
 8032ba4:	d9800317 	ldw	r6,12(sp)
 8032ba8:	d9400217 	ldw	r5,8(sp)
 8032bac:	d9000117 	ldw	r4,4(sp)
 8032bb0:	100f883a 	mov	r7,r2
 8032bb4:	dc400015 	stw	r17,0(sp)
 8032bb8:	803ee83a 	callr	r16
 8032bbc:	dfc00617 	ldw	ra,24(sp)
 8032bc0:	dc400517 	ldw	r17,20(sp)
 8032bc4:	dc000417 	ldw	r16,16(sp)
 8032bc8:	dec00704 	addi	sp,sp,28
 8032bcc:	f800283a 	ret

08032bd0 <__udivdi3>:
 8032bd0:	defff504 	addi	sp,sp,-44
 8032bd4:	dcc00415 	stw	r19,16(sp)
 8032bd8:	dc000115 	stw	r16,4(sp)
 8032bdc:	dfc00a15 	stw	ra,40(sp)
 8032be0:	df000915 	stw	fp,36(sp)
 8032be4:	ddc00815 	stw	r23,32(sp)
 8032be8:	dd800715 	stw	r22,28(sp)
 8032bec:	dd400615 	stw	r21,24(sp)
 8032bf0:	dd000515 	stw	r20,20(sp)
 8032bf4:	dc800315 	stw	r18,12(sp)
 8032bf8:	dc400215 	stw	r17,8(sp)
 8032bfc:	2027883a 	mov	r19,r4
 8032c00:	2821883a 	mov	r16,r5
 8032c04:	3800411e 	bne	r7,zero,8032d0c <__udivdi3+0x13c>
 8032c08:	3023883a 	mov	r17,r6
 8032c0c:	2025883a 	mov	r18,r4
 8032c10:	2980522e 	bgeu	r5,r6,8032d5c <__udivdi3+0x18c>
 8032c14:	00bfffd4 	movui	r2,65535
 8032c18:	282d883a 	mov	r22,r5
 8032c1c:	1180a836 	bltu	r2,r6,8032ec0 <__udivdi3+0x2f0>
 8032c20:	00803fc4 	movi	r2,255
 8032c24:	1185803a 	cmpltu	r2,r2,r6
 8032c28:	100490fa 	slli	r2,r2,3
 8032c2c:	3086d83a 	srl	r3,r6,r2
 8032c30:	010200f4 	movhi	r4,2051
 8032c34:	211de904 	addi	r4,r4,30628
 8032c38:	20c7883a 	add	r3,r4,r3
 8032c3c:	18c00003 	ldbu	r3,0(r3)
 8032c40:	1885883a 	add	r2,r3,r2
 8032c44:	00c00804 	movi	r3,32
 8032c48:	1887c83a 	sub	r3,r3,r2
 8032c4c:	18000526 	beq	r3,zero,8032c64 <__udivdi3+0x94>
 8032c50:	80e0983a 	sll	r16,r16,r3
 8032c54:	9884d83a 	srl	r2,r19,r2
 8032c58:	30e2983a 	sll	r17,r6,r3
 8032c5c:	98e4983a 	sll	r18,r19,r3
 8032c60:	142cb03a 	or	r22,r2,r16
 8032c64:	882ad43a 	srli	r21,r17,16
 8032c68:	b009883a 	mov	r4,r22
 8032c6c:	8d3fffcc 	andi	r20,r17,65535
 8032c70:	a80b883a 	mov	r5,r21
 8032c74:	8025b4c0 	call	8025b4c <__umodsi3>
 8032c78:	b009883a 	mov	r4,r22
 8032c7c:	a80b883a 	mov	r5,r21
 8032c80:	1027883a 	mov	r19,r2
 8032c84:	8025ae80 	call	8025ae8 <__udivsi3>
 8032c88:	102d883a 	mov	r22,r2
 8032c8c:	9826943a 	slli	r19,r19,16
 8032c90:	9004d43a 	srli	r2,r18,16
 8032c94:	a5a1383a 	mul	r16,r20,r22
 8032c98:	14c4b03a 	or	r2,r2,r19
 8032c9c:	1400052e 	bgeu	r2,r16,8032cb4 <__udivdi3+0xe4>
 8032ca0:	1445883a 	add	r2,r2,r17
 8032ca4:	b0ffffc4 	addi	r3,r22,-1
 8032ca8:	14400136 	bltu	r2,r17,8032cb0 <__udivdi3+0xe0>
 8032cac:	14012336 	bltu	r2,r16,803313c <__udivdi3+0x56c>
 8032cb0:	182d883a 	mov	r22,r3
 8032cb4:	1421c83a 	sub	r16,r2,r16
 8032cb8:	a80b883a 	mov	r5,r21
 8032cbc:	8009883a 	mov	r4,r16
 8032cc0:	8025b4c0 	call	8025b4c <__umodsi3>
 8032cc4:	1027883a 	mov	r19,r2
 8032cc8:	a80b883a 	mov	r5,r21
 8032ccc:	8009883a 	mov	r4,r16
 8032cd0:	8025ae80 	call	8025ae8 <__udivsi3>
 8032cd4:	9826943a 	slli	r19,r19,16
 8032cd8:	a0a9383a 	mul	r20,r20,r2
 8032cdc:	94bfffcc 	andi	r18,r18,65535
 8032ce0:	94e4b03a 	or	r18,r18,r19
 8032ce4:	9500052e 	bgeu	r18,r20,8032cfc <__udivdi3+0x12c>
 8032ce8:	8ca5883a 	add	r18,r17,r18
 8032cec:	10ffffc4 	addi	r3,r2,-1
 8032cf0:	9440f136 	bltu	r18,r17,80330b8 <__udivdi3+0x4e8>
 8032cf4:	9500f02e 	bgeu	r18,r20,80330b8 <__udivdi3+0x4e8>
 8032cf8:	10bfff84 	addi	r2,r2,-2
 8032cfc:	b00c943a 	slli	r6,r22,16
 8032d00:	0007883a 	mov	r3,zero
 8032d04:	3084b03a 	or	r2,r6,r2
 8032d08:	00005906 	br	8032e70 <__udivdi3+0x2a0>
 8032d0c:	29c05636 	bltu	r5,r7,8032e68 <__udivdi3+0x298>
 8032d10:	00bfffd4 	movui	r2,65535
 8032d14:	11c0622e 	bgeu	r2,r7,8032ea0 <__udivdi3+0x2d0>
 8032d18:	00804034 	movhi	r2,256
 8032d1c:	10bfffc4 	addi	r2,r2,-1
 8032d20:	11c0ee36 	bltu	r2,r7,80330dc <__udivdi3+0x50c>
 8032d24:	00800404 	movi	r2,16
 8032d28:	3886d83a 	srl	r3,r7,r2
 8032d2c:	010200f4 	movhi	r4,2051
 8032d30:	211de904 	addi	r4,r4,30628
 8032d34:	20c7883a 	add	r3,r4,r3
 8032d38:	18c00003 	ldbu	r3,0(r3)
 8032d3c:	05400804 	movi	r21,32
 8032d40:	1885883a 	add	r2,r3,r2
 8032d44:	a8abc83a 	sub	r21,r21,r2
 8032d48:	a800621e 	bne	r21,zero,8032ed4 <__udivdi3+0x304>
 8032d4c:	3c00e936 	bltu	r7,r16,80330f4 <__udivdi3+0x524>
 8032d50:	9985403a 	cmpgeu	r2,r19,r6
 8032d54:	0007883a 	mov	r3,zero
 8032d58:	00004506 	br	8032e70 <__udivdi3+0x2a0>
 8032d5c:	3000041e 	bne	r6,zero,8032d70 <__udivdi3+0x1a0>
 8032d60:	000b883a 	mov	r5,zero
 8032d64:	01000044 	movi	r4,1
 8032d68:	8025ae80 	call	8025ae8 <__udivsi3>
 8032d6c:	1023883a 	mov	r17,r2
 8032d70:	00bfffd4 	movui	r2,65535
 8032d74:	14404e2e 	bgeu	r2,r17,8032eb0 <__udivdi3+0x2e0>
 8032d78:	00804034 	movhi	r2,256
 8032d7c:	10bfffc4 	addi	r2,r2,-1
 8032d80:	1440d836 	bltu	r2,r17,80330e4 <__udivdi3+0x514>
 8032d84:	00800404 	movi	r2,16
 8032d88:	8886d83a 	srl	r3,r17,r2
 8032d8c:	010200f4 	movhi	r4,2051
 8032d90:	211de904 	addi	r4,r4,30628
 8032d94:	20c7883a 	add	r3,r4,r3
 8032d98:	18c00003 	ldbu	r3,0(r3)
 8032d9c:	1885883a 	add	r2,r3,r2
 8032da0:	00c00804 	movi	r3,32
 8032da4:	1887c83a 	sub	r3,r3,r2
 8032da8:	18008f1e 	bne	r3,zero,8032fe8 <__udivdi3+0x418>
 8032dac:	882ad43a 	srli	r21,r17,16
 8032db0:	8461c83a 	sub	r16,r16,r17
 8032db4:	8d3fffcc 	andi	r20,r17,65535
 8032db8:	00c00044 	movi	r3,1
 8032dbc:	8009883a 	mov	r4,r16
 8032dc0:	a80b883a 	mov	r5,r21
 8032dc4:	d8c00015 	stw	r3,0(sp)
 8032dc8:	8025b4c0 	call	8025b4c <__umodsi3>
 8032dcc:	8009883a 	mov	r4,r16
 8032dd0:	a80b883a 	mov	r5,r21
 8032dd4:	1027883a 	mov	r19,r2
 8032dd8:	8025ae80 	call	8025ae8 <__udivsi3>
 8032ddc:	9826943a 	slli	r19,r19,16
 8032de0:	9008d43a 	srli	r4,r18,16
 8032de4:	1521383a 	mul	r16,r2,r20
 8032de8:	102d883a 	mov	r22,r2
 8032dec:	24c8b03a 	or	r4,r4,r19
 8032df0:	d8c00017 	ldw	r3,0(sp)
 8032df4:	2400052e 	bgeu	r4,r16,8032e0c <__udivdi3+0x23c>
 8032df8:	2449883a 	add	r4,r4,r17
 8032dfc:	b0bfffc4 	addi	r2,r22,-1
 8032e00:	24400136 	bltu	r4,r17,8032e08 <__udivdi3+0x238>
 8032e04:	2400ca36 	bltu	r4,r16,8033130 <__udivdi3+0x560>
 8032e08:	102d883a 	mov	r22,r2
 8032e0c:	2421c83a 	sub	r16,r4,r16
 8032e10:	a80b883a 	mov	r5,r21
 8032e14:	8009883a 	mov	r4,r16
 8032e18:	d8c00015 	stw	r3,0(sp)
 8032e1c:	8025b4c0 	call	8025b4c <__umodsi3>
 8032e20:	1027883a 	mov	r19,r2
 8032e24:	a80b883a 	mov	r5,r21
 8032e28:	8009883a 	mov	r4,r16
 8032e2c:	8025ae80 	call	8025ae8 <__udivsi3>
 8032e30:	9826943a 	slli	r19,r19,16
 8032e34:	1529383a 	mul	r20,r2,r20
 8032e38:	94bfffcc 	andi	r18,r18,65535
 8032e3c:	94e4b03a 	or	r18,r18,r19
 8032e40:	d8c00017 	ldw	r3,0(sp)
 8032e44:	9500052e 	bgeu	r18,r20,8032e5c <__udivdi3+0x28c>
 8032e48:	8ca5883a 	add	r18,r17,r18
 8032e4c:	113fffc4 	addi	r4,r2,-1
 8032e50:	94409736 	bltu	r18,r17,80330b0 <__udivdi3+0x4e0>
 8032e54:	9500962e 	bgeu	r18,r20,80330b0 <__udivdi3+0x4e0>
 8032e58:	10bfff84 	addi	r2,r2,-2
 8032e5c:	b00c943a 	slli	r6,r22,16
 8032e60:	3084b03a 	or	r2,r6,r2
 8032e64:	00000206 	br	8032e70 <__udivdi3+0x2a0>
 8032e68:	0007883a 	mov	r3,zero
 8032e6c:	0005883a 	mov	r2,zero
 8032e70:	dfc00a17 	ldw	ra,40(sp)
 8032e74:	df000917 	ldw	fp,36(sp)
 8032e78:	ddc00817 	ldw	r23,32(sp)
 8032e7c:	dd800717 	ldw	r22,28(sp)
 8032e80:	dd400617 	ldw	r21,24(sp)
 8032e84:	dd000517 	ldw	r20,20(sp)
 8032e88:	dcc00417 	ldw	r19,16(sp)
 8032e8c:	dc800317 	ldw	r18,12(sp)
 8032e90:	dc400217 	ldw	r17,8(sp)
 8032e94:	dc000117 	ldw	r16,4(sp)
 8032e98:	dec00b04 	addi	sp,sp,44
 8032e9c:	f800283a 	ret
 8032ea0:	00803fc4 	movi	r2,255
 8032ea4:	11c5803a 	cmpltu	r2,r2,r7
 8032ea8:	100490fa 	slli	r2,r2,3
 8032eac:	003f9e06 	br	8032d28 <_gp+0xffff161c>
 8032eb0:	00803fc4 	movi	r2,255
 8032eb4:	1445803a 	cmpltu	r2,r2,r17
 8032eb8:	100490fa 	slli	r2,r2,3
 8032ebc:	003fb206 	br	8032d88 <_gp+0xffff167c>
 8032ec0:	00804034 	movhi	r2,256
 8032ec4:	10bfffc4 	addi	r2,r2,-1
 8032ec8:	11808836 	bltu	r2,r6,80330ec <__udivdi3+0x51c>
 8032ecc:	00800404 	movi	r2,16
 8032ed0:	003f5606 	br	8032c2c <_gp+0xffff1520>
 8032ed4:	30aed83a 	srl	r23,r6,r2
 8032ed8:	3d4e983a 	sll	r7,r7,r21
 8032edc:	80acd83a 	srl	r22,r16,r2
 8032ee0:	9884d83a 	srl	r2,r19,r2
 8032ee4:	3deeb03a 	or	r23,r7,r23
 8032ee8:	b824d43a 	srli	r18,r23,16
 8032eec:	8560983a 	sll	r16,r16,r21
 8032ef0:	b009883a 	mov	r4,r22
 8032ef4:	900b883a 	mov	r5,r18
 8032ef8:	3568983a 	sll	r20,r6,r21
 8032efc:	1420b03a 	or	r16,r2,r16
 8032f00:	8025b4c0 	call	8025b4c <__umodsi3>
 8032f04:	b009883a 	mov	r4,r22
 8032f08:	900b883a 	mov	r5,r18
 8032f0c:	1023883a 	mov	r17,r2
 8032f10:	8025ae80 	call	8025ae8 <__udivsi3>
 8032f14:	8808943a 	slli	r4,r17,16
 8032f18:	bf3fffcc 	andi	fp,r23,65535
 8032f1c:	8006d43a 	srli	r3,r16,16
 8032f20:	e0a3383a 	mul	r17,fp,r2
 8032f24:	100d883a 	mov	r6,r2
 8032f28:	1906b03a 	or	r3,r3,r4
 8032f2c:	1c40042e 	bgeu	r3,r17,8032f40 <__udivdi3+0x370>
 8032f30:	1dc7883a 	add	r3,r3,r23
 8032f34:	10bfffc4 	addi	r2,r2,-1
 8032f38:	1dc0752e 	bgeu	r3,r23,8033110 <__udivdi3+0x540>
 8032f3c:	100d883a 	mov	r6,r2
 8032f40:	1c63c83a 	sub	r17,r3,r17
 8032f44:	900b883a 	mov	r5,r18
 8032f48:	8809883a 	mov	r4,r17
 8032f4c:	d9800015 	stw	r6,0(sp)
 8032f50:	8025b4c0 	call	8025b4c <__umodsi3>
 8032f54:	102d883a 	mov	r22,r2
 8032f58:	8809883a 	mov	r4,r17
 8032f5c:	900b883a 	mov	r5,r18
 8032f60:	8025ae80 	call	8025ae8 <__udivsi3>
 8032f64:	b02c943a 	slli	r22,r22,16
 8032f68:	e089383a 	mul	r4,fp,r2
 8032f6c:	843fffcc 	andi	r16,r16,65535
 8032f70:	85a0b03a 	or	r16,r16,r22
 8032f74:	d9800017 	ldw	r6,0(sp)
 8032f78:	8100042e 	bgeu	r16,r4,8032f8c <__udivdi3+0x3bc>
 8032f7c:	85e1883a 	add	r16,r16,r23
 8032f80:	10ffffc4 	addi	r3,r2,-1
 8032f84:	85c05e2e 	bgeu	r16,r23,8033100 <__udivdi3+0x530>
 8032f88:	1805883a 	mov	r2,r3
 8032f8c:	300c943a 	slli	r6,r6,16
 8032f90:	a17fffcc 	andi	r5,r20,65535
 8032f94:	a028d43a 	srli	r20,r20,16
 8032f98:	3084b03a 	or	r2,r6,r2
 8032f9c:	10ffffcc 	andi	r3,r2,65535
 8032fa0:	100cd43a 	srli	r6,r2,16
 8032fa4:	194f383a 	mul	r7,r3,r5
 8032fa8:	1d07383a 	mul	r3,r3,r20
 8032fac:	314b383a 	mul	r5,r6,r5
 8032fb0:	3810d43a 	srli	r8,r7,16
 8032fb4:	8121c83a 	sub	r16,r16,r4
 8032fb8:	1947883a 	add	r3,r3,r5
 8032fbc:	40c7883a 	add	r3,r8,r3
 8032fc0:	350d383a 	mul	r6,r6,r20
 8032fc4:	1940022e 	bgeu	r3,r5,8032fd0 <__udivdi3+0x400>
 8032fc8:	01000074 	movhi	r4,1
 8032fcc:	310d883a 	add	r6,r6,r4
 8032fd0:	1828d43a 	srli	r20,r3,16
 8032fd4:	a18d883a 	add	r6,r20,r6
 8032fd8:	81803e36 	bltu	r16,r6,80330d4 <__udivdi3+0x504>
 8032fdc:	81803826 	beq	r16,r6,80330c0 <__udivdi3+0x4f0>
 8032fe0:	0007883a 	mov	r3,zero
 8032fe4:	003fa206 	br	8032e70 <_gp+0xffff1764>
 8032fe8:	88e2983a 	sll	r17,r17,r3
 8032fec:	80a8d83a 	srl	r20,r16,r2
 8032ff0:	80e0983a 	sll	r16,r16,r3
 8032ff4:	882ad43a 	srli	r21,r17,16
 8032ff8:	9884d83a 	srl	r2,r19,r2
 8032ffc:	a009883a 	mov	r4,r20
 8033000:	a80b883a 	mov	r5,r21
 8033004:	142eb03a 	or	r23,r2,r16
 8033008:	98e4983a 	sll	r18,r19,r3
 803300c:	8025b4c0 	call	8025b4c <__umodsi3>
 8033010:	a009883a 	mov	r4,r20
 8033014:	a80b883a 	mov	r5,r21
 8033018:	1021883a 	mov	r16,r2
 803301c:	8025ae80 	call	8025ae8 <__udivsi3>
 8033020:	1039883a 	mov	fp,r2
 8033024:	8d3fffcc 	andi	r20,r17,65535
 8033028:	8020943a 	slli	r16,r16,16
 803302c:	b804d43a 	srli	r2,r23,16
 8033030:	a72d383a 	mul	r22,r20,fp
 8033034:	1404b03a 	or	r2,r2,r16
 8033038:	1580062e 	bgeu	r2,r22,8033054 <__udivdi3+0x484>
 803303c:	1445883a 	add	r2,r2,r17
 8033040:	e0ffffc4 	addi	r3,fp,-1
 8033044:	14403836 	bltu	r2,r17,8033128 <__udivdi3+0x558>
 8033048:	1580372e 	bgeu	r2,r22,8033128 <__udivdi3+0x558>
 803304c:	e73fff84 	addi	fp,fp,-2
 8033050:	1445883a 	add	r2,r2,r17
 8033054:	15adc83a 	sub	r22,r2,r22
 8033058:	a80b883a 	mov	r5,r21
 803305c:	b009883a 	mov	r4,r22
 8033060:	8025b4c0 	call	8025b4c <__umodsi3>
 8033064:	1027883a 	mov	r19,r2
 8033068:	b009883a 	mov	r4,r22
 803306c:	a80b883a 	mov	r5,r21
 8033070:	8025ae80 	call	8025ae8 <__udivsi3>
 8033074:	9826943a 	slli	r19,r19,16
 8033078:	a0a1383a 	mul	r16,r20,r2
 803307c:	b93fffcc 	andi	r4,r23,65535
 8033080:	24c8b03a 	or	r4,r4,r19
 8033084:	2400062e 	bgeu	r4,r16,80330a0 <__udivdi3+0x4d0>
 8033088:	2449883a 	add	r4,r4,r17
 803308c:	10ffffc4 	addi	r3,r2,-1
 8033090:	24402336 	bltu	r4,r17,8033120 <__udivdi3+0x550>
 8033094:	2400222e 	bgeu	r4,r16,8033120 <__udivdi3+0x550>
 8033098:	10bfff84 	addi	r2,r2,-2
 803309c:	2449883a 	add	r4,r4,r17
 80330a0:	e038943a 	slli	fp,fp,16
 80330a4:	2421c83a 	sub	r16,r4,r16
 80330a8:	e086b03a 	or	r3,fp,r2
 80330ac:	003f4306 	br	8032dbc <_gp+0xffff16b0>
 80330b0:	2005883a 	mov	r2,r4
 80330b4:	003f6906 	br	8032e5c <_gp+0xffff1750>
 80330b8:	1805883a 	mov	r2,r3
 80330bc:	003f0f06 	br	8032cfc <_gp+0xffff15f0>
 80330c0:	1806943a 	slli	r3,r3,16
 80330c4:	9d66983a 	sll	r19,r19,r21
 80330c8:	39ffffcc 	andi	r7,r7,65535
 80330cc:	19c7883a 	add	r3,r3,r7
 80330d0:	98ffc32e 	bgeu	r19,r3,8032fe0 <_gp+0xffff18d4>
 80330d4:	10bfffc4 	addi	r2,r2,-1
 80330d8:	003fc106 	br	8032fe0 <_gp+0xffff18d4>
 80330dc:	00800604 	movi	r2,24
 80330e0:	003f1106 	br	8032d28 <_gp+0xffff161c>
 80330e4:	00800604 	movi	r2,24
 80330e8:	003f2706 	br	8032d88 <_gp+0xffff167c>
 80330ec:	00800604 	movi	r2,24
 80330f0:	003ece06 	br	8032c2c <_gp+0xffff1520>
 80330f4:	0007883a 	mov	r3,zero
 80330f8:	00800044 	movi	r2,1
 80330fc:	003f5c06 	br	8032e70 <_gp+0xffff1764>
 8033100:	813fa12e 	bgeu	r16,r4,8032f88 <_gp+0xffff187c>
 8033104:	10bfff84 	addi	r2,r2,-2
 8033108:	85e1883a 	add	r16,r16,r23
 803310c:	003f9f06 	br	8032f8c <_gp+0xffff1880>
 8033110:	1c7f8a2e 	bgeu	r3,r17,8032f3c <_gp+0xffff1830>
 8033114:	31bfff84 	addi	r6,r6,-2
 8033118:	1dc7883a 	add	r3,r3,r23
 803311c:	003f8806 	br	8032f40 <_gp+0xffff1834>
 8033120:	1805883a 	mov	r2,r3
 8033124:	003fde06 	br	80330a0 <_gp+0xffff1994>
 8033128:	1839883a 	mov	fp,r3
 803312c:	003fc906 	br	8033054 <_gp+0xffff1948>
 8033130:	b5bfff84 	addi	r22,r22,-2
 8033134:	2449883a 	add	r4,r4,r17
 8033138:	003f3406 	br	8032e0c <_gp+0xffff1700>
 803313c:	b5bfff84 	addi	r22,r22,-2
 8033140:	1445883a 	add	r2,r2,r17
 8033144:	003edb06 	br	8032cb4 <_gp+0xffff15a8>

08033148 <__umoddi3>:
 8033148:	defff404 	addi	sp,sp,-48
 803314c:	df000a15 	stw	fp,40(sp)
 8033150:	dc400315 	stw	r17,12(sp)
 8033154:	dc000215 	stw	r16,8(sp)
 8033158:	dfc00b15 	stw	ra,44(sp)
 803315c:	ddc00915 	stw	r23,36(sp)
 8033160:	dd800815 	stw	r22,32(sp)
 8033164:	dd400715 	stw	r21,28(sp)
 8033168:	dd000615 	stw	r20,24(sp)
 803316c:	dcc00515 	stw	r19,20(sp)
 8033170:	dc800415 	stw	r18,16(sp)
 8033174:	2021883a 	mov	r16,r4
 8033178:	2823883a 	mov	r17,r5
 803317c:	2839883a 	mov	fp,r5
 8033180:	38003c1e 	bne	r7,zero,8033274 <__umoddi3+0x12c>
 8033184:	3027883a 	mov	r19,r6
 8033188:	2029883a 	mov	r20,r4
 803318c:	2980512e 	bgeu	r5,r6,80332d4 <__umoddi3+0x18c>
 8033190:	00bfffd4 	movui	r2,65535
 8033194:	11809a36 	bltu	r2,r6,8033400 <__umoddi3+0x2b8>
 8033198:	01003fc4 	movi	r4,255
 803319c:	2189803a 	cmpltu	r4,r4,r6
 80331a0:	200890fa 	slli	r4,r4,3
 80331a4:	3104d83a 	srl	r2,r6,r4
 80331a8:	00c200f4 	movhi	r3,2051
 80331ac:	18dde904 	addi	r3,r3,30628
 80331b0:	1885883a 	add	r2,r3,r2
 80331b4:	10c00003 	ldbu	r3,0(r2)
 80331b8:	00800804 	movi	r2,32
 80331bc:	1909883a 	add	r4,r3,r4
 80331c0:	1125c83a 	sub	r18,r2,r4
 80331c4:	90000526 	beq	r18,zero,80331dc <__umoddi3+0x94>
 80331c8:	8ca2983a 	sll	r17,r17,r18
 80331cc:	8108d83a 	srl	r4,r16,r4
 80331d0:	34a6983a 	sll	r19,r6,r18
 80331d4:	84a8983a 	sll	r20,r16,r18
 80331d8:	2478b03a 	or	fp,r4,r17
 80331dc:	982ed43a 	srli	r23,r19,16
 80331e0:	e009883a 	mov	r4,fp
 80331e4:	9dbfffcc 	andi	r22,r19,65535
 80331e8:	b80b883a 	mov	r5,r23
 80331ec:	8025b4c0 	call	8025b4c <__umodsi3>
 80331f0:	e009883a 	mov	r4,fp
 80331f4:	b80b883a 	mov	r5,r23
 80331f8:	102b883a 	mov	r21,r2
 80331fc:	8025ae80 	call	8025ae8 <__udivsi3>
 8033200:	a806943a 	slli	r3,r21,16
 8033204:	a008d43a 	srli	r4,r20,16
 8033208:	b085383a 	mul	r2,r22,r2
 803320c:	20c8b03a 	or	r4,r4,r3
 8033210:	2080032e 	bgeu	r4,r2,8033220 <__umoddi3+0xd8>
 8033214:	24c9883a 	add	r4,r4,r19
 8033218:	24c00136 	bltu	r4,r19,8033220 <__umoddi3+0xd8>
 803321c:	20811036 	bltu	r4,r2,8033660 <__umoddi3+0x518>
 8033220:	20abc83a 	sub	r21,r4,r2
 8033224:	b80b883a 	mov	r5,r23
 8033228:	a809883a 	mov	r4,r21
 803322c:	8025b4c0 	call	8025b4c <__umodsi3>
 8033230:	1023883a 	mov	r17,r2
 8033234:	b80b883a 	mov	r5,r23
 8033238:	a809883a 	mov	r4,r21
 803323c:	8025ae80 	call	8025ae8 <__udivsi3>
 8033240:	8822943a 	slli	r17,r17,16
 8033244:	b085383a 	mul	r2,r22,r2
 8033248:	a0ffffcc 	andi	r3,r20,65535
 803324c:	1c46b03a 	or	r3,r3,r17
 8033250:	1880042e 	bgeu	r3,r2,8033264 <__umoddi3+0x11c>
 8033254:	1cc7883a 	add	r3,r3,r19
 8033258:	1cc00236 	bltu	r3,r19,8033264 <__umoddi3+0x11c>
 803325c:	1880012e 	bgeu	r3,r2,8033264 <__umoddi3+0x11c>
 8033260:	1cc7883a 	add	r3,r3,r19
 8033264:	1885c83a 	sub	r2,r3,r2
 8033268:	1484d83a 	srl	r2,r2,r18
 803326c:	0007883a 	mov	r3,zero
 8033270:	00004f06 	br	80333b0 <__umoddi3+0x268>
 8033274:	29c04c36 	bltu	r5,r7,80333a8 <__umoddi3+0x260>
 8033278:	00bfffd4 	movui	r2,65535
 803327c:	11c0582e 	bgeu	r2,r7,80333e0 <__umoddi3+0x298>
 8033280:	00804034 	movhi	r2,256
 8033284:	10bfffc4 	addi	r2,r2,-1
 8033288:	11c0e736 	bltu	r2,r7,8033628 <__umoddi3+0x4e0>
 803328c:	01000404 	movi	r4,16
 8033290:	3904d83a 	srl	r2,r7,r4
 8033294:	00c200f4 	movhi	r3,2051
 8033298:	18dde904 	addi	r3,r3,30628
 803329c:	1885883a 	add	r2,r3,r2
 80332a0:	14c00003 	ldbu	r19,0(r2)
 80332a4:	00c00804 	movi	r3,32
 80332a8:	9927883a 	add	r19,r19,r4
 80332ac:	1ce9c83a 	sub	r20,r3,r19
 80332b0:	a000581e 	bne	r20,zero,8033414 <__umoddi3+0x2cc>
 80332b4:	3c400136 	bltu	r7,r17,80332bc <__umoddi3+0x174>
 80332b8:	8180eb36 	bltu	r16,r6,8033668 <__umoddi3+0x520>
 80332bc:	8185c83a 	sub	r2,r16,r6
 80332c0:	89e3c83a 	sub	r17,r17,r7
 80332c4:	8089803a 	cmpltu	r4,r16,r2
 80332c8:	8939c83a 	sub	fp,r17,r4
 80332cc:	e007883a 	mov	r3,fp
 80332d0:	00003706 	br	80333b0 <__umoddi3+0x268>
 80332d4:	3000041e 	bne	r6,zero,80332e8 <__umoddi3+0x1a0>
 80332d8:	000b883a 	mov	r5,zero
 80332dc:	01000044 	movi	r4,1
 80332e0:	8025ae80 	call	8025ae8 <__udivsi3>
 80332e4:	1027883a 	mov	r19,r2
 80332e8:	00bfffd4 	movui	r2,65535
 80332ec:	14c0402e 	bgeu	r2,r19,80333f0 <__umoddi3+0x2a8>
 80332f0:	00804034 	movhi	r2,256
 80332f4:	10bfffc4 	addi	r2,r2,-1
 80332f8:	14c0cd36 	bltu	r2,r19,8033630 <__umoddi3+0x4e8>
 80332fc:	00800404 	movi	r2,16
 8033300:	9886d83a 	srl	r3,r19,r2
 8033304:	010200f4 	movhi	r4,2051
 8033308:	211de904 	addi	r4,r4,30628
 803330c:	20c7883a 	add	r3,r4,r3
 8033310:	18c00003 	ldbu	r3,0(r3)
 8033314:	1887883a 	add	r3,r3,r2
 8033318:	00800804 	movi	r2,32
 803331c:	10e5c83a 	sub	r18,r2,r3
 8033320:	9000901e 	bne	r18,zero,8033564 <__umoddi3+0x41c>
 8033324:	982cd43a 	srli	r22,r19,16
 8033328:	8ce3c83a 	sub	r17,r17,r19
 803332c:	9d7fffcc 	andi	r21,r19,65535
 8033330:	b00b883a 	mov	r5,r22
 8033334:	8809883a 	mov	r4,r17
 8033338:	8025b4c0 	call	8025b4c <__umodsi3>
 803333c:	8809883a 	mov	r4,r17
 8033340:	b00b883a 	mov	r5,r22
 8033344:	1021883a 	mov	r16,r2
 8033348:	8025ae80 	call	8025ae8 <__udivsi3>
 803334c:	8006943a 	slli	r3,r16,16
 8033350:	a008d43a 	srli	r4,r20,16
 8033354:	1545383a 	mul	r2,r2,r21
 8033358:	20c8b03a 	or	r4,r4,r3
 803335c:	2080042e 	bgeu	r4,r2,8033370 <__umoddi3+0x228>
 8033360:	24c9883a 	add	r4,r4,r19
 8033364:	24c00236 	bltu	r4,r19,8033370 <__umoddi3+0x228>
 8033368:	2080012e 	bgeu	r4,r2,8033370 <__umoddi3+0x228>
 803336c:	24c9883a 	add	r4,r4,r19
 8033370:	20a1c83a 	sub	r16,r4,r2
 8033374:	b00b883a 	mov	r5,r22
 8033378:	8009883a 	mov	r4,r16
 803337c:	8025b4c0 	call	8025b4c <__umodsi3>
 8033380:	1023883a 	mov	r17,r2
 8033384:	b00b883a 	mov	r5,r22
 8033388:	8009883a 	mov	r4,r16
 803338c:	8025ae80 	call	8025ae8 <__udivsi3>
 8033390:	8822943a 	slli	r17,r17,16
 8033394:	1545383a 	mul	r2,r2,r21
 8033398:	a53fffcc 	andi	r20,r20,65535
 803339c:	a446b03a 	or	r3,r20,r17
 80333a0:	18bfb02e 	bgeu	r3,r2,8033264 <_gp+0xffff1b58>
 80333a4:	003fab06 	br	8033254 <_gp+0xffff1b48>
 80333a8:	2005883a 	mov	r2,r4
 80333ac:	2807883a 	mov	r3,r5
 80333b0:	dfc00b17 	ldw	ra,44(sp)
 80333b4:	df000a17 	ldw	fp,40(sp)
 80333b8:	ddc00917 	ldw	r23,36(sp)
 80333bc:	dd800817 	ldw	r22,32(sp)
 80333c0:	dd400717 	ldw	r21,28(sp)
 80333c4:	dd000617 	ldw	r20,24(sp)
 80333c8:	dcc00517 	ldw	r19,20(sp)
 80333cc:	dc800417 	ldw	r18,16(sp)
 80333d0:	dc400317 	ldw	r17,12(sp)
 80333d4:	dc000217 	ldw	r16,8(sp)
 80333d8:	dec00c04 	addi	sp,sp,48
 80333dc:	f800283a 	ret
 80333e0:	04c03fc4 	movi	r19,255
 80333e4:	99c9803a 	cmpltu	r4,r19,r7
 80333e8:	200890fa 	slli	r4,r4,3
 80333ec:	003fa806 	br	8033290 <_gp+0xffff1b84>
 80333f0:	00803fc4 	movi	r2,255
 80333f4:	14c5803a 	cmpltu	r2,r2,r19
 80333f8:	100490fa 	slli	r2,r2,3
 80333fc:	003fc006 	br	8033300 <_gp+0xffff1bf4>
 8033400:	00804034 	movhi	r2,256
 8033404:	10bfffc4 	addi	r2,r2,-1
 8033408:	11808b36 	bltu	r2,r6,8033638 <__umoddi3+0x4f0>
 803340c:	01000404 	movi	r4,16
 8033410:	003f6406 	br	80331a4 <_gp+0xffff1a98>
 8033414:	34c4d83a 	srl	r2,r6,r19
 8033418:	3d0e983a 	sll	r7,r7,r20
 803341c:	8cf8d83a 	srl	fp,r17,r19
 8033420:	8d10983a 	sll	r8,r17,r20
 8033424:	38aab03a 	or	r21,r7,r2
 8033428:	a82cd43a 	srli	r22,r21,16
 803342c:	84e2d83a 	srl	r17,r16,r19
 8033430:	e009883a 	mov	r4,fp
 8033434:	b00b883a 	mov	r5,r22
 8033438:	8a22b03a 	or	r17,r17,r8
 803343c:	3524983a 	sll	r18,r6,r20
 8033440:	8025b4c0 	call	8025b4c <__umodsi3>
 8033444:	e009883a 	mov	r4,fp
 8033448:	b00b883a 	mov	r5,r22
 803344c:	102f883a 	mov	r23,r2
 8033450:	8025ae80 	call	8025ae8 <__udivsi3>
 8033454:	100d883a 	mov	r6,r2
 8033458:	b808943a 	slli	r4,r23,16
 803345c:	aa3fffcc 	andi	r8,r21,65535
 8033460:	8804d43a 	srli	r2,r17,16
 8033464:	41af383a 	mul	r23,r8,r6
 8033468:	8520983a 	sll	r16,r16,r20
 803346c:	1104b03a 	or	r2,r2,r4
 8033470:	15c0042e 	bgeu	r2,r23,8033484 <__umoddi3+0x33c>
 8033474:	1545883a 	add	r2,r2,r21
 8033478:	30ffffc4 	addi	r3,r6,-1
 803347c:	1540742e 	bgeu	r2,r21,8033650 <__umoddi3+0x508>
 8033480:	180d883a 	mov	r6,r3
 8033484:	15efc83a 	sub	r23,r2,r23
 8033488:	b00b883a 	mov	r5,r22
 803348c:	b809883a 	mov	r4,r23
 8033490:	d9800115 	stw	r6,4(sp)
 8033494:	da000015 	stw	r8,0(sp)
 8033498:	8025b4c0 	call	8025b4c <__umodsi3>
 803349c:	b00b883a 	mov	r5,r22
 80334a0:	b809883a 	mov	r4,r23
 80334a4:	1039883a 	mov	fp,r2
 80334a8:	8025ae80 	call	8025ae8 <__udivsi3>
 80334ac:	da000017 	ldw	r8,0(sp)
 80334b0:	e038943a 	slli	fp,fp,16
 80334b4:	100b883a 	mov	r5,r2
 80334b8:	4089383a 	mul	r4,r8,r2
 80334bc:	8a3fffcc 	andi	r8,r17,65535
 80334c0:	4710b03a 	or	r8,r8,fp
 80334c4:	d9800117 	ldw	r6,4(sp)
 80334c8:	4100042e 	bgeu	r8,r4,80334dc <__umoddi3+0x394>
 80334cc:	4551883a 	add	r8,r8,r21
 80334d0:	10bfffc4 	addi	r2,r2,-1
 80334d4:	45405a2e 	bgeu	r8,r21,8033640 <__umoddi3+0x4f8>
 80334d8:	100b883a 	mov	r5,r2
 80334dc:	300c943a 	slli	r6,r6,16
 80334e0:	91ffffcc 	andi	r7,r18,65535
 80334e4:	9004d43a 	srli	r2,r18,16
 80334e8:	314cb03a 	or	r6,r6,r5
 80334ec:	317fffcc 	andi	r5,r6,65535
 80334f0:	300cd43a 	srli	r6,r6,16
 80334f4:	29d3383a 	mul	r9,r5,r7
 80334f8:	288b383a 	mul	r5,r5,r2
 80334fc:	31cf383a 	mul	r7,r6,r7
 8033500:	4806d43a 	srli	r3,r9,16
 8033504:	4111c83a 	sub	r8,r8,r4
 8033508:	29cb883a 	add	r5,r5,r7
 803350c:	194b883a 	add	r5,r3,r5
 8033510:	3085383a 	mul	r2,r6,r2
 8033514:	29c0022e 	bgeu	r5,r7,8033520 <__umoddi3+0x3d8>
 8033518:	00c00074 	movhi	r3,1
 803351c:	10c5883a 	add	r2,r2,r3
 8033520:	2808d43a 	srli	r4,r5,16
 8033524:	280a943a 	slli	r5,r5,16
 8033528:	4a7fffcc 	andi	r9,r9,65535
 803352c:	2085883a 	add	r2,r4,r2
 8033530:	2a4b883a 	add	r5,r5,r9
 8033534:	40803636 	bltu	r8,r2,8033610 <__umoddi3+0x4c8>
 8033538:	40804d26 	beq	r8,r2,8033670 <__umoddi3+0x528>
 803353c:	4089c83a 	sub	r4,r8,r2
 8033540:	280f883a 	mov	r7,r5
 8033544:	81cfc83a 	sub	r7,r16,r7
 8033548:	81c7803a 	cmpltu	r3,r16,r7
 803354c:	20c7c83a 	sub	r3,r4,r3
 8033550:	1cc4983a 	sll	r2,r3,r19
 8033554:	3d0ed83a 	srl	r7,r7,r20
 8033558:	1d06d83a 	srl	r3,r3,r20
 803355c:	11c4b03a 	or	r2,r2,r7
 8033560:	003f9306 	br	80333b0 <_gp+0xffff1ca4>
 8033564:	9ca6983a 	sll	r19,r19,r18
 8033568:	88e8d83a 	srl	r20,r17,r3
 803356c:	80c4d83a 	srl	r2,r16,r3
 8033570:	982cd43a 	srli	r22,r19,16
 8033574:	8ca2983a 	sll	r17,r17,r18
 8033578:	a009883a 	mov	r4,r20
 803357c:	b00b883a 	mov	r5,r22
 8033580:	1478b03a 	or	fp,r2,r17
 8033584:	8025b4c0 	call	8025b4c <__umodsi3>
 8033588:	a009883a 	mov	r4,r20
 803358c:	b00b883a 	mov	r5,r22
 8033590:	1023883a 	mov	r17,r2
 8033594:	8025ae80 	call	8025ae8 <__udivsi3>
 8033598:	9d7fffcc 	andi	r21,r19,65535
 803359c:	880a943a 	slli	r5,r17,16
 80335a0:	e008d43a 	srli	r4,fp,16
 80335a4:	a885383a 	mul	r2,r21,r2
 80335a8:	84a8983a 	sll	r20,r16,r18
 80335ac:	2148b03a 	or	r4,r4,r5
 80335b0:	2080042e 	bgeu	r4,r2,80335c4 <__umoddi3+0x47c>
 80335b4:	24c9883a 	add	r4,r4,r19
 80335b8:	24c00236 	bltu	r4,r19,80335c4 <__umoddi3+0x47c>
 80335bc:	2080012e 	bgeu	r4,r2,80335c4 <__umoddi3+0x47c>
 80335c0:	24c9883a 	add	r4,r4,r19
 80335c4:	20a3c83a 	sub	r17,r4,r2
 80335c8:	b00b883a 	mov	r5,r22
 80335cc:	8809883a 	mov	r4,r17
 80335d0:	8025b4c0 	call	8025b4c <__umodsi3>
 80335d4:	102f883a 	mov	r23,r2
 80335d8:	8809883a 	mov	r4,r17
 80335dc:	b00b883a 	mov	r5,r22
 80335e0:	8025ae80 	call	8025ae8 <__udivsi3>
 80335e4:	b82e943a 	slli	r23,r23,16
 80335e8:	a885383a 	mul	r2,r21,r2
 80335ec:	e13fffcc 	andi	r4,fp,65535
 80335f0:	25c8b03a 	or	r4,r4,r23
 80335f4:	2080042e 	bgeu	r4,r2,8033608 <__umoddi3+0x4c0>
 80335f8:	24c9883a 	add	r4,r4,r19
 80335fc:	24c00236 	bltu	r4,r19,8033608 <__umoddi3+0x4c0>
 8033600:	2080012e 	bgeu	r4,r2,8033608 <__umoddi3+0x4c0>
 8033604:	24c9883a 	add	r4,r4,r19
 8033608:	20a3c83a 	sub	r17,r4,r2
 803360c:	003f4806 	br	8033330 <_gp+0xffff1c24>
 8033610:	2c8fc83a 	sub	r7,r5,r18
 8033614:	1545c83a 	sub	r2,r2,r21
 8033618:	29cb803a 	cmpltu	r5,r5,r7
 803361c:	1145c83a 	sub	r2,r2,r5
 8033620:	4089c83a 	sub	r4,r8,r2
 8033624:	003fc706 	br	8033544 <_gp+0xffff1e38>
 8033628:	01000604 	movi	r4,24
 803362c:	003f1806 	br	8033290 <_gp+0xffff1b84>
 8033630:	00800604 	movi	r2,24
 8033634:	003f3206 	br	8033300 <_gp+0xffff1bf4>
 8033638:	01000604 	movi	r4,24
 803363c:	003ed906 	br	80331a4 <_gp+0xffff1a98>
 8033640:	413fa52e 	bgeu	r8,r4,80334d8 <_gp+0xffff1dcc>
 8033644:	297fff84 	addi	r5,r5,-2
 8033648:	4551883a 	add	r8,r8,r21
 803364c:	003fa306 	br	80334dc <_gp+0xffff1dd0>
 8033650:	15ff8b2e 	bgeu	r2,r23,8033480 <_gp+0xffff1d74>
 8033654:	31bfff84 	addi	r6,r6,-2
 8033658:	1545883a 	add	r2,r2,r21
 803365c:	003f8906 	br	8033484 <_gp+0xffff1d78>
 8033660:	24c9883a 	add	r4,r4,r19
 8033664:	003eee06 	br	8033220 <_gp+0xffff1b14>
 8033668:	8005883a 	mov	r2,r16
 803366c:	003f1706 	br	80332cc <_gp+0xffff1bc0>
 8033670:	817fe736 	bltu	r16,r5,8033610 <_gp+0xffff1f04>
 8033674:	280f883a 	mov	r7,r5
 8033678:	0009883a 	mov	r4,zero
 803367c:	003fb106 	br	8033544 <_gp+0xffff1e38>

08033680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8033680:	defffe04 	addi	sp,sp,-8
 8033684:	dfc00115 	stw	ra,4(sp)
 8033688:	df000015 	stw	fp,0(sp)
 803368c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8033690:	d0a00c17 	ldw	r2,-32720(gp)
 8033694:	10000326 	beq	r2,zero,80336a4 <alt_get_errno+0x24>
 8033698:	d0a00c17 	ldw	r2,-32720(gp)
 803369c:	103ee83a 	callr	r2
 80336a0:	00000106 	br	80336a8 <alt_get_errno+0x28>
 80336a4:	d0a73404 	addi	r2,gp,-25392
}
 80336a8:	e037883a 	mov	sp,fp
 80336ac:	dfc00117 	ldw	ra,4(sp)
 80336b0:	df000017 	ldw	fp,0(sp)
 80336b4:	dec00204 	addi	sp,sp,8
 80336b8:	f800283a 	ret

080336bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80336bc:	defffb04 	addi	sp,sp,-20
 80336c0:	dfc00415 	stw	ra,16(sp)
 80336c4:	df000315 	stw	fp,12(sp)
 80336c8:	df000304 	addi	fp,sp,12
 80336cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80336d0:	e0bfff17 	ldw	r2,-4(fp)
 80336d4:	10000616 	blt	r2,zero,80336f0 <close+0x34>
 80336d8:	e0bfff17 	ldw	r2,-4(fp)
 80336dc:	10c00324 	muli	r3,r2,12
 80336e0:	00820134 	movhi	r2,2052
 80336e4:	10a0f204 	addi	r2,r2,-31800
 80336e8:	1885883a 	add	r2,r3,r2
 80336ec:	00000106 	br	80336f4 <close+0x38>
 80336f0:	0005883a 	mov	r2,zero
 80336f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80336f8:	e0bffd17 	ldw	r2,-12(fp)
 80336fc:	10001926 	beq	r2,zero,8033764 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8033700:	e0bffd17 	ldw	r2,-12(fp)
 8033704:	10800017 	ldw	r2,0(r2)
 8033708:	10800417 	ldw	r2,16(r2)
 803370c:	10000626 	beq	r2,zero,8033728 <close+0x6c>
 8033710:	e0bffd17 	ldw	r2,-12(fp)
 8033714:	10800017 	ldw	r2,0(r2)
 8033718:	10800417 	ldw	r2,16(r2)
 803371c:	e13ffd17 	ldw	r4,-12(fp)
 8033720:	103ee83a 	callr	r2
 8033724:	00000106 	br	803372c <close+0x70>
 8033728:	0005883a 	mov	r2,zero
 803372c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8033730:	e13fff17 	ldw	r4,-4(fp)
 8033734:	8033db00 	call	8033db0 <alt_release_fd>
    if (rval < 0)
 8033738:	e0bffe17 	ldw	r2,-8(fp)
 803373c:	1000070e 	bge	r2,zero,803375c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8033740:	80336800 	call	8033680 <alt_get_errno>
 8033744:	1007883a 	mov	r3,r2
 8033748:	e0bffe17 	ldw	r2,-8(fp)
 803374c:	0085c83a 	sub	r2,zero,r2
 8033750:	18800015 	stw	r2,0(r3)
      return -1;
 8033754:	00bfffc4 	movi	r2,-1
 8033758:	00000706 	br	8033778 <close+0xbc>
    }
    return 0;
 803375c:	0005883a 	mov	r2,zero
 8033760:	00000506 	br	8033778 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8033764:	80336800 	call	8033680 <alt_get_errno>
 8033768:	1007883a 	mov	r3,r2
 803376c:	00801444 	movi	r2,81
 8033770:	18800015 	stw	r2,0(r3)
    return -1;
 8033774:	00bfffc4 	movi	r2,-1
  }
}
 8033778:	e037883a 	mov	sp,fp
 803377c:	dfc00117 	ldw	ra,4(sp)
 8033780:	df000017 	ldw	fp,0(sp)
 8033784:	dec00204 	addi	sp,sp,8
 8033788:	f800283a 	ret

0803378c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 803378c:	defffc04 	addi	sp,sp,-16
 8033790:	df000315 	stw	fp,12(sp)
 8033794:	df000304 	addi	fp,sp,12
 8033798:	e13ffd15 	stw	r4,-12(fp)
 803379c:	e17ffe15 	stw	r5,-8(fp)
 80337a0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80337a4:	e0bfff17 	ldw	r2,-4(fp)
}
 80337a8:	e037883a 	mov	sp,fp
 80337ac:	df000017 	ldw	fp,0(sp)
 80337b0:	dec00104 	addi	sp,sp,4
 80337b4:	f800283a 	ret

080337b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80337b8:	defffd04 	addi	sp,sp,-12
 80337bc:	df000215 	stw	fp,8(sp)
 80337c0:	df000204 	addi	fp,sp,8
 80337c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80337c8:	0001883a 	nop
 80337cc:	e0bfff17 	ldw	r2,-4(fp)
 80337d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80337d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80337d8:	10000226 	beq	r2,zero,80337e4 <_exit+0x2c>
    ALT_SIM_FAIL();
 80337dc:	002af070 	cmpltui	zero,zero,43969
 80337e0:	00000106 	br	80337e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80337e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80337e8:	003fff06 	br	80337e8 <_gp+0xffff20dc>

080337ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80337ec:	defffe04 	addi	sp,sp,-8
 80337f0:	dfc00115 	stw	ra,4(sp)
 80337f4:	df000015 	stw	fp,0(sp)
 80337f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80337fc:	d0a00c17 	ldw	r2,-32720(gp)
 8033800:	10000326 	beq	r2,zero,8033810 <alt_get_errno+0x24>
 8033804:	d0a00c17 	ldw	r2,-32720(gp)
 8033808:	103ee83a 	callr	r2
 803380c:	00000106 	br	8033814 <alt_get_errno+0x28>
 8033810:	d0a73404 	addi	r2,gp,-25392
}
 8033814:	e037883a 	mov	sp,fp
 8033818:	dfc00117 	ldw	ra,4(sp)
 803381c:	df000017 	ldw	fp,0(sp)
 8033820:	dec00204 	addi	sp,sp,8
 8033824:	f800283a 	ret

08033828 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8033828:	defffb04 	addi	sp,sp,-20
 803382c:	dfc00415 	stw	ra,16(sp)
 8033830:	df000315 	stw	fp,12(sp)
 8033834:	df000304 	addi	fp,sp,12
 8033838:	e13ffe15 	stw	r4,-8(fp)
 803383c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8033840:	e0bffe17 	ldw	r2,-8(fp)
 8033844:	10000616 	blt	r2,zero,8033860 <fstat+0x38>
 8033848:	e0bffe17 	ldw	r2,-8(fp)
 803384c:	10c00324 	muli	r3,r2,12
 8033850:	00820134 	movhi	r2,2052
 8033854:	10a0f204 	addi	r2,r2,-31800
 8033858:	1885883a 	add	r2,r3,r2
 803385c:	00000106 	br	8033864 <fstat+0x3c>
 8033860:	0005883a 	mov	r2,zero
 8033864:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8033868:	e0bffd17 	ldw	r2,-12(fp)
 803386c:	10001026 	beq	r2,zero,80338b0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8033870:	e0bffd17 	ldw	r2,-12(fp)
 8033874:	10800017 	ldw	r2,0(r2)
 8033878:	10800817 	ldw	r2,32(r2)
 803387c:	10000726 	beq	r2,zero,803389c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8033880:	e0bffd17 	ldw	r2,-12(fp)
 8033884:	10800017 	ldw	r2,0(r2)
 8033888:	10800817 	ldw	r2,32(r2)
 803388c:	e17fff17 	ldw	r5,-4(fp)
 8033890:	e13ffd17 	ldw	r4,-12(fp)
 8033894:	103ee83a 	callr	r2
 8033898:	00000a06 	br	80338c4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 803389c:	e0bfff17 	ldw	r2,-4(fp)
 80338a0:	00c80004 	movi	r3,8192
 80338a4:	10c00115 	stw	r3,4(r2)
      return 0;
 80338a8:	0005883a 	mov	r2,zero
 80338ac:	00000506 	br	80338c4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80338b0:	80337ec0 	call	80337ec <alt_get_errno>
 80338b4:	1007883a 	mov	r3,r2
 80338b8:	00801444 	movi	r2,81
 80338bc:	18800015 	stw	r2,0(r3)
    return -1;
 80338c0:	00bfffc4 	movi	r2,-1
  }
}
 80338c4:	e037883a 	mov	sp,fp
 80338c8:	dfc00117 	ldw	ra,4(sp)
 80338cc:	df000017 	ldw	fp,0(sp)
 80338d0:	dec00204 	addi	sp,sp,8
 80338d4:	f800283a 	ret

080338d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80338d8:	defffe04 	addi	sp,sp,-8
 80338dc:	dfc00115 	stw	ra,4(sp)
 80338e0:	df000015 	stw	fp,0(sp)
 80338e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80338e8:	d0a00c17 	ldw	r2,-32720(gp)
 80338ec:	10000326 	beq	r2,zero,80338fc <alt_get_errno+0x24>
 80338f0:	d0a00c17 	ldw	r2,-32720(gp)
 80338f4:	103ee83a 	callr	r2
 80338f8:	00000106 	br	8033900 <alt_get_errno+0x28>
 80338fc:	d0a73404 	addi	r2,gp,-25392
}
 8033900:	e037883a 	mov	sp,fp
 8033904:	dfc00117 	ldw	ra,4(sp)
 8033908:	df000017 	ldw	fp,0(sp)
 803390c:	dec00204 	addi	sp,sp,8
 8033910:	f800283a 	ret

08033914 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8033914:	deffed04 	addi	sp,sp,-76
 8033918:	dfc01215 	stw	ra,72(sp)
 803391c:	df001115 	stw	fp,68(sp)
 8033920:	df001104 	addi	fp,sp,68
 8033924:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8033928:	e0bfff17 	ldw	r2,-4(fp)
 803392c:	10000616 	blt	r2,zero,8033948 <isatty+0x34>
 8033930:	e0bfff17 	ldw	r2,-4(fp)
 8033934:	10c00324 	muli	r3,r2,12
 8033938:	00820134 	movhi	r2,2052
 803393c:	10a0f204 	addi	r2,r2,-31800
 8033940:	1885883a 	add	r2,r3,r2
 8033944:	00000106 	br	803394c <isatty+0x38>
 8033948:	0005883a 	mov	r2,zero
 803394c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8033950:	e0bfef17 	ldw	r2,-68(fp)
 8033954:	10000e26 	beq	r2,zero,8033990 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8033958:	e0bfef17 	ldw	r2,-68(fp)
 803395c:	10800017 	ldw	r2,0(r2)
 8033960:	10800817 	ldw	r2,32(r2)
 8033964:	1000021e 	bne	r2,zero,8033970 <isatty+0x5c>
    {
      return 1;
 8033968:	00800044 	movi	r2,1
 803396c:	00000d06 	br	80339a4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8033970:	e0bff004 	addi	r2,fp,-64
 8033974:	100b883a 	mov	r5,r2
 8033978:	e13fff17 	ldw	r4,-4(fp)
 803397c:	80338280 	call	8033828 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8033980:	e0bff117 	ldw	r2,-60(fp)
 8033984:	10880020 	cmpeqi	r2,r2,8192
 8033988:	10803fcc 	andi	r2,r2,255
 803398c:	00000506 	br	80339a4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8033990:	80338d80 	call	80338d8 <alt_get_errno>
 8033994:	1007883a 	mov	r3,r2
 8033998:	00801444 	movi	r2,81
 803399c:	18800015 	stw	r2,0(r3)
    return 0;
 80339a0:	0005883a 	mov	r2,zero
  }
}
 80339a4:	e037883a 	mov	sp,fp
 80339a8:	dfc00117 	ldw	ra,4(sp)
 80339ac:	df000017 	ldw	fp,0(sp)
 80339b0:	dec00204 	addi	sp,sp,8
 80339b4:	f800283a 	ret

080339b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80339b8:	defffc04 	addi	sp,sp,-16
 80339bc:	df000315 	stw	fp,12(sp)
 80339c0:	df000304 	addi	fp,sp,12
 80339c4:	e13ffd15 	stw	r4,-12(fp)
 80339c8:	e17ffe15 	stw	r5,-8(fp)
 80339cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80339d0:	e0fffe17 	ldw	r3,-8(fp)
 80339d4:	e0bffd17 	ldw	r2,-12(fp)
 80339d8:	18800c26 	beq	r3,r2,8033a0c <alt_load_section+0x54>
  {
    while( to != end )
 80339dc:	00000806 	br	8033a00 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80339e0:	e0bffe17 	ldw	r2,-8(fp)
 80339e4:	10c00104 	addi	r3,r2,4
 80339e8:	e0fffe15 	stw	r3,-8(fp)
 80339ec:	e0fffd17 	ldw	r3,-12(fp)
 80339f0:	19000104 	addi	r4,r3,4
 80339f4:	e13ffd15 	stw	r4,-12(fp)
 80339f8:	18c00017 	ldw	r3,0(r3)
 80339fc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8033a00:	e0fffe17 	ldw	r3,-8(fp)
 8033a04:	e0bfff17 	ldw	r2,-4(fp)
 8033a08:	18bff51e 	bne	r3,r2,80339e0 <_gp+0xffff22d4>
    {
      *to++ = *from++;
    }
  }
}
 8033a0c:	0001883a 	nop
 8033a10:	e037883a 	mov	sp,fp
 8033a14:	df000017 	ldw	fp,0(sp)
 8033a18:	dec00104 	addi	sp,sp,4
 8033a1c:	f800283a 	ret

08033a20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8033a20:	defffe04 	addi	sp,sp,-8
 8033a24:	dfc00115 	stw	ra,4(sp)
 8033a28:	df000015 	stw	fp,0(sp)
 8033a2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8033a30:	01820134 	movhi	r6,2052
 8033a34:	31a5d804 	addi	r6,r6,-26784
 8033a38:	014200f4 	movhi	r5,2051
 8033a3c:	295ebf04 	addi	r5,r5,31484
 8033a40:	01020134 	movhi	r4,2052
 8033a44:	2125d804 	addi	r4,r4,-26784
 8033a48:	80339b80 	call	80339b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8033a4c:	018200b4 	movhi	r6,2050
 8033a50:	31809104 	addi	r6,r6,580
 8033a54:	014200b4 	movhi	r5,2050
 8033a58:	29400804 	addi	r5,r5,32
 8033a5c:	010200b4 	movhi	r4,2050
 8033a60:	21000804 	addi	r4,r4,32
 8033a64:	80339b80 	call	80339b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8033a68:	018200f4 	movhi	r6,2051
 8033a6c:	319ebf04 	addi	r6,r6,31484
 8033a70:	014200f4 	movhi	r5,2051
 8033a74:	295c9d04 	addi	r5,r5,29300
 8033a78:	010200f4 	movhi	r4,2051
 8033a7c:	211c9d04 	addi	r4,r4,29300
 8033a80:	80339b80 	call	80339b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8033a84:	803634c0 	call	803634c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8033a88:	80365c40 	call	80365c4 <alt_icache_flush_all>
}
 8033a8c:	0001883a 	nop
 8033a90:	e037883a 	mov	sp,fp
 8033a94:	dfc00117 	ldw	ra,4(sp)
 8033a98:	df000017 	ldw	fp,0(sp)
 8033a9c:	dec00204 	addi	sp,sp,8
 8033aa0:	f800283a 	ret

08033aa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8033aa4:	defffe04 	addi	sp,sp,-8
 8033aa8:	dfc00115 	stw	ra,4(sp)
 8033aac:	df000015 	stw	fp,0(sp)
 8033ab0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8033ab4:	d0a00c17 	ldw	r2,-32720(gp)
 8033ab8:	10000326 	beq	r2,zero,8033ac8 <alt_get_errno+0x24>
 8033abc:	d0a00c17 	ldw	r2,-32720(gp)
 8033ac0:	103ee83a 	callr	r2
 8033ac4:	00000106 	br	8033acc <alt_get_errno+0x28>
 8033ac8:	d0a73404 	addi	r2,gp,-25392
}
 8033acc:	e037883a 	mov	sp,fp
 8033ad0:	dfc00117 	ldw	ra,4(sp)
 8033ad4:	df000017 	ldw	fp,0(sp)
 8033ad8:	dec00204 	addi	sp,sp,8
 8033adc:	f800283a 	ret

08033ae0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8033ae0:	defff904 	addi	sp,sp,-28
 8033ae4:	dfc00615 	stw	ra,24(sp)
 8033ae8:	df000515 	stw	fp,20(sp)
 8033aec:	df000504 	addi	fp,sp,20
 8033af0:	e13ffd15 	stw	r4,-12(fp)
 8033af4:	e17ffe15 	stw	r5,-8(fp)
 8033af8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8033afc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8033b00:	e0bffd17 	ldw	r2,-12(fp)
 8033b04:	10000616 	blt	r2,zero,8033b20 <lseek+0x40>
 8033b08:	e0bffd17 	ldw	r2,-12(fp)
 8033b0c:	10c00324 	muli	r3,r2,12
 8033b10:	00820134 	movhi	r2,2052
 8033b14:	10a0f204 	addi	r2,r2,-31800
 8033b18:	1885883a 	add	r2,r3,r2
 8033b1c:	00000106 	br	8033b24 <lseek+0x44>
 8033b20:	0005883a 	mov	r2,zero
 8033b24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8033b28:	e0bffc17 	ldw	r2,-16(fp)
 8033b2c:	10001026 	beq	r2,zero,8033b70 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8033b30:	e0bffc17 	ldw	r2,-16(fp)
 8033b34:	10800017 	ldw	r2,0(r2)
 8033b38:	10800717 	ldw	r2,28(r2)
 8033b3c:	10000926 	beq	r2,zero,8033b64 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8033b40:	e0bffc17 	ldw	r2,-16(fp)
 8033b44:	10800017 	ldw	r2,0(r2)
 8033b48:	10800717 	ldw	r2,28(r2)
 8033b4c:	e1bfff17 	ldw	r6,-4(fp)
 8033b50:	e17ffe17 	ldw	r5,-8(fp)
 8033b54:	e13ffc17 	ldw	r4,-16(fp)
 8033b58:	103ee83a 	callr	r2
 8033b5c:	e0bffb15 	stw	r2,-20(fp)
 8033b60:	00000506 	br	8033b78 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8033b64:	00bfde84 	movi	r2,-134
 8033b68:	e0bffb15 	stw	r2,-20(fp)
 8033b6c:	00000206 	br	8033b78 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8033b70:	00bfebc4 	movi	r2,-81
 8033b74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8033b78:	e0bffb17 	ldw	r2,-20(fp)
 8033b7c:	1000070e 	bge	r2,zero,8033b9c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8033b80:	8033aa40 	call	8033aa4 <alt_get_errno>
 8033b84:	1007883a 	mov	r3,r2
 8033b88:	e0bffb17 	ldw	r2,-20(fp)
 8033b8c:	0085c83a 	sub	r2,zero,r2
 8033b90:	18800015 	stw	r2,0(r3)
    rc = -1;
 8033b94:	00bfffc4 	movi	r2,-1
 8033b98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8033b9c:	e0bffb17 	ldw	r2,-20(fp)
}
 8033ba0:	e037883a 	mov	sp,fp
 8033ba4:	dfc00117 	ldw	ra,4(sp)
 8033ba8:	df000017 	ldw	fp,0(sp)
 8033bac:	dec00204 	addi	sp,sp,8
 8033bb0:	f800283a 	ret

08033bb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8033bb4:	defffd04 	addi	sp,sp,-12
 8033bb8:	dfc00215 	stw	ra,8(sp)
 8033bbc:	df000115 	stw	fp,4(sp)
 8033bc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8033bc4:	0009883a 	mov	r4,zero
 8033bc8:	80340d00 	call	80340d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8033bcc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8033bd0:	80341080 	call	8034108 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8033bd4:	018200f4 	movhi	r6,2051
 8033bd8:	319e9f04 	addi	r6,r6,31356
 8033bdc:	014200f4 	movhi	r5,2051
 8033be0:	295e9f04 	addi	r5,r5,31356
 8033be4:	010200f4 	movhi	r4,2051
 8033be8:	211e9f04 	addi	r4,r4,31356
 8033bec:	803695c0 	call	803695c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8033bf0:	80364740 	call	8036474 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8033bf4:	010200f4 	movhi	r4,2051
 8033bf8:	21193504 	addi	r4,r4,25812
 8033bfc:	80370cc0 	call	80370cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8033c00:	d0a73817 	ldw	r2,-25376(gp)
 8033c04:	d0e73917 	ldw	r3,-25372(gp)
 8033c08:	d1273a17 	ldw	r4,-25368(gp)
 8033c0c:	200d883a 	mov	r6,r4
 8033c10:	180b883a 	mov	r5,r3
 8033c14:	1009883a 	mov	r4,r2
 8033c18:	80202900 	call	8020290 <main>
 8033c1c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8033c20:	01000044 	movi	r4,1
 8033c24:	80336bc0 	call	80336bc <close>
  exit (result);
 8033c28:	e13fff17 	ldw	r4,-4(fp)
 8033c2c:	80294100 	call	8029410 <exit>

08033c30 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8033c30:	defffe04 	addi	sp,sp,-8
 8033c34:	df000115 	stw	fp,4(sp)
 8033c38:	df000104 	addi	fp,sp,4
 8033c3c:	e13fff15 	stw	r4,-4(fp)
}
 8033c40:	0001883a 	nop
 8033c44:	e037883a 	mov	sp,fp
 8033c48:	df000017 	ldw	fp,0(sp)
 8033c4c:	dec00104 	addi	sp,sp,4
 8033c50:	f800283a 	ret

08033c54 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8033c54:	defffe04 	addi	sp,sp,-8
 8033c58:	df000115 	stw	fp,4(sp)
 8033c5c:	df000104 	addi	fp,sp,4
 8033c60:	e13fff15 	stw	r4,-4(fp)
}
 8033c64:	0001883a 	nop
 8033c68:	e037883a 	mov	sp,fp
 8033c6c:	df000017 	ldw	fp,0(sp)
 8033c70:	dec00104 	addi	sp,sp,4
 8033c74:	f800283a 	ret

08033c78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8033c78:	defffe04 	addi	sp,sp,-8
 8033c7c:	dfc00115 	stw	ra,4(sp)
 8033c80:	df000015 	stw	fp,0(sp)
 8033c84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8033c88:	d0a00c17 	ldw	r2,-32720(gp)
 8033c8c:	10000326 	beq	r2,zero,8033c9c <alt_get_errno+0x24>
 8033c90:	d0a00c17 	ldw	r2,-32720(gp)
 8033c94:	103ee83a 	callr	r2
 8033c98:	00000106 	br	8033ca0 <alt_get_errno+0x28>
 8033c9c:	d0a73404 	addi	r2,gp,-25392
}
 8033ca0:	e037883a 	mov	sp,fp
 8033ca4:	dfc00117 	ldw	ra,4(sp)
 8033ca8:	df000017 	ldw	fp,0(sp)
 8033cac:	dec00204 	addi	sp,sp,8
 8033cb0:	f800283a 	ret

08033cb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8033cb4:	defff904 	addi	sp,sp,-28
 8033cb8:	dfc00615 	stw	ra,24(sp)
 8033cbc:	df000515 	stw	fp,20(sp)
 8033cc0:	df000504 	addi	fp,sp,20
 8033cc4:	e13ffd15 	stw	r4,-12(fp)
 8033cc8:	e17ffe15 	stw	r5,-8(fp)
 8033ccc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8033cd0:	e0bffd17 	ldw	r2,-12(fp)
 8033cd4:	10000616 	blt	r2,zero,8033cf0 <read+0x3c>
 8033cd8:	e0bffd17 	ldw	r2,-12(fp)
 8033cdc:	10c00324 	muli	r3,r2,12
 8033ce0:	00820134 	movhi	r2,2052
 8033ce4:	10a0f204 	addi	r2,r2,-31800
 8033ce8:	1885883a 	add	r2,r3,r2
 8033cec:	00000106 	br	8033cf4 <read+0x40>
 8033cf0:	0005883a 	mov	r2,zero
 8033cf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8033cf8:	e0bffb17 	ldw	r2,-20(fp)
 8033cfc:	10002226 	beq	r2,zero,8033d88 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8033d00:	e0bffb17 	ldw	r2,-20(fp)
 8033d04:	10800217 	ldw	r2,8(r2)
 8033d08:	108000cc 	andi	r2,r2,3
 8033d0c:	10800060 	cmpeqi	r2,r2,1
 8033d10:	1000181e 	bne	r2,zero,8033d74 <read+0xc0>
        (fd->dev->read))
 8033d14:	e0bffb17 	ldw	r2,-20(fp)
 8033d18:	10800017 	ldw	r2,0(r2)
 8033d1c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8033d20:	10001426 	beq	r2,zero,8033d74 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8033d24:	e0bffb17 	ldw	r2,-20(fp)
 8033d28:	10800017 	ldw	r2,0(r2)
 8033d2c:	10800517 	ldw	r2,20(r2)
 8033d30:	e0ffff17 	ldw	r3,-4(fp)
 8033d34:	180d883a 	mov	r6,r3
 8033d38:	e17ffe17 	ldw	r5,-8(fp)
 8033d3c:	e13ffb17 	ldw	r4,-20(fp)
 8033d40:	103ee83a 	callr	r2
 8033d44:	e0bffc15 	stw	r2,-16(fp)
 8033d48:	e0bffc17 	ldw	r2,-16(fp)
 8033d4c:	1000070e 	bge	r2,zero,8033d6c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8033d50:	8033c780 	call	8033c78 <alt_get_errno>
 8033d54:	1007883a 	mov	r3,r2
 8033d58:	e0bffc17 	ldw	r2,-16(fp)
 8033d5c:	0085c83a 	sub	r2,zero,r2
 8033d60:	18800015 	stw	r2,0(r3)
          return -1;
 8033d64:	00bfffc4 	movi	r2,-1
 8033d68:	00000c06 	br	8033d9c <read+0xe8>
        }
        return rval;
 8033d6c:	e0bffc17 	ldw	r2,-16(fp)
 8033d70:	00000a06 	br	8033d9c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8033d74:	8033c780 	call	8033c78 <alt_get_errno>
 8033d78:	1007883a 	mov	r3,r2
 8033d7c:	00800344 	movi	r2,13
 8033d80:	18800015 	stw	r2,0(r3)
 8033d84:	00000406 	br	8033d98 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8033d88:	8033c780 	call	8033c78 <alt_get_errno>
 8033d8c:	1007883a 	mov	r3,r2
 8033d90:	00801444 	movi	r2,81
 8033d94:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8033d98:	00bfffc4 	movi	r2,-1
}
 8033d9c:	e037883a 	mov	sp,fp
 8033da0:	dfc00117 	ldw	ra,4(sp)
 8033da4:	df000017 	ldw	fp,0(sp)
 8033da8:	dec00204 	addi	sp,sp,8
 8033dac:	f800283a 	ret

08033db0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8033db0:	defffe04 	addi	sp,sp,-8
 8033db4:	df000115 	stw	fp,4(sp)
 8033db8:	df000104 	addi	fp,sp,4
 8033dbc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8033dc0:	e0bfff17 	ldw	r2,-4(fp)
 8033dc4:	108000d0 	cmplti	r2,r2,3
 8033dc8:	10000d1e 	bne	r2,zero,8033e00 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8033dcc:	00820134 	movhi	r2,2052
 8033dd0:	10a0f204 	addi	r2,r2,-31800
 8033dd4:	e0ffff17 	ldw	r3,-4(fp)
 8033dd8:	18c00324 	muli	r3,r3,12
 8033ddc:	10c5883a 	add	r2,r2,r3
 8033de0:	10800204 	addi	r2,r2,8
 8033de4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8033de8:	00820134 	movhi	r2,2052
 8033dec:	10a0f204 	addi	r2,r2,-31800
 8033df0:	e0ffff17 	ldw	r3,-4(fp)
 8033df4:	18c00324 	muli	r3,r3,12
 8033df8:	10c5883a 	add	r2,r2,r3
 8033dfc:	10000015 	stw	zero,0(r2)
  }
}
 8033e00:	0001883a 	nop
 8033e04:	e037883a 	mov	sp,fp
 8033e08:	df000017 	ldw	fp,0(sp)
 8033e0c:	dec00104 	addi	sp,sp,4
 8033e10:	f800283a 	ret

08033e14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8033e14:	defff904 	addi	sp,sp,-28
 8033e18:	df000615 	stw	fp,24(sp)
 8033e1c:	df000604 	addi	fp,sp,24
 8033e20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8033e24:	0005303a 	rdctl	r2,status
 8033e28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8033e2c:	e0fffe17 	ldw	r3,-8(fp)
 8033e30:	00bfff84 	movi	r2,-2
 8033e34:	1884703a 	and	r2,r3,r2
 8033e38:	1001703a 	wrctl	status,r2
  
  return context;
 8033e3c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8033e40:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8033e44:	d0a00d17 	ldw	r2,-32716(gp)
 8033e48:	10c000c4 	addi	r3,r2,3
 8033e4c:	00bfff04 	movi	r2,-4
 8033e50:	1884703a 	and	r2,r3,r2
 8033e54:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8033e58:	d0e00d17 	ldw	r3,-32716(gp)
 8033e5c:	e0bfff17 	ldw	r2,-4(fp)
 8033e60:	1887883a 	add	r3,r3,r2
 8033e64:	00820134 	movhi	r2,2052
 8033e68:	10800004 	addi	r2,r2,0
 8033e6c:	10c0062e 	bgeu	r2,r3,8033e88 <sbrk+0x74>
 8033e70:	e0bffb17 	ldw	r2,-20(fp)
 8033e74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8033e78:	e0bffa17 	ldw	r2,-24(fp)
 8033e7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8033e80:	00bfffc4 	movi	r2,-1
 8033e84:	00000b06 	br	8033eb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8033e88:	d0a00d17 	ldw	r2,-32716(gp)
 8033e8c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8033e90:	d0e00d17 	ldw	r3,-32716(gp)
 8033e94:	e0bfff17 	ldw	r2,-4(fp)
 8033e98:	1885883a 	add	r2,r3,r2
 8033e9c:	d0a00d15 	stw	r2,-32716(gp)
 8033ea0:	e0bffb17 	ldw	r2,-20(fp)
 8033ea4:	e0bffc15 	stw	r2,-16(fp)
 8033ea8:	e0bffc17 	ldw	r2,-16(fp)
 8033eac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8033eb0:	e0bffd17 	ldw	r2,-12(fp)
} 
 8033eb4:	e037883a 	mov	sp,fp
 8033eb8:	df000017 	ldw	fp,0(sp)
 8033ebc:	dec00104 	addi	sp,sp,4
 8033ec0:	f800283a 	ret

08033ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8033ec4:	defffe04 	addi	sp,sp,-8
 8033ec8:	dfc00115 	stw	ra,4(sp)
 8033ecc:	df000015 	stw	fp,0(sp)
 8033ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8033ed4:	d0a00c17 	ldw	r2,-32720(gp)
 8033ed8:	10000326 	beq	r2,zero,8033ee8 <alt_get_errno+0x24>
 8033edc:	d0a00c17 	ldw	r2,-32720(gp)
 8033ee0:	103ee83a 	callr	r2
 8033ee4:	00000106 	br	8033eec <alt_get_errno+0x28>
 8033ee8:	d0a73404 	addi	r2,gp,-25392
}
 8033eec:	e037883a 	mov	sp,fp
 8033ef0:	dfc00117 	ldw	ra,4(sp)
 8033ef4:	df000017 	ldw	fp,0(sp)
 8033ef8:	dec00204 	addi	sp,sp,8
 8033efc:	f800283a 	ret

08033f00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8033f00:	defff904 	addi	sp,sp,-28
 8033f04:	dfc00615 	stw	ra,24(sp)
 8033f08:	df000515 	stw	fp,20(sp)
 8033f0c:	df000504 	addi	fp,sp,20
 8033f10:	e13ffd15 	stw	r4,-12(fp)
 8033f14:	e17ffe15 	stw	r5,-8(fp)
 8033f18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8033f1c:	e0bffd17 	ldw	r2,-12(fp)
 8033f20:	10000616 	blt	r2,zero,8033f3c <write+0x3c>
 8033f24:	e0bffd17 	ldw	r2,-12(fp)
 8033f28:	10c00324 	muli	r3,r2,12
 8033f2c:	00820134 	movhi	r2,2052
 8033f30:	10a0f204 	addi	r2,r2,-31800
 8033f34:	1885883a 	add	r2,r3,r2
 8033f38:	00000106 	br	8033f40 <write+0x40>
 8033f3c:	0005883a 	mov	r2,zero
 8033f40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8033f44:	e0bffb17 	ldw	r2,-20(fp)
 8033f48:	10002126 	beq	r2,zero,8033fd0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8033f4c:	e0bffb17 	ldw	r2,-20(fp)
 8033f50:	10800217 	ldw	r2,8(r2)
 8033f54:	108000cc 	andi	r2,r2,3
 8033f58:	10001826 	beq	r2,zero,8033fbc <write+0xbc>
 8033f5c:	e0bffb17 	ldw	r2,-20(fp)
 8033f60:	10800017 	ldw	r2,0(r2)
 8033f64:	10800617 	ldw	r2,24(r2)
 8033f68:	10001426 	beq	r2,zero,8033fbc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8033f6c:	e0bffb17 	ldw	r2,-20(fp)
 8033f70:	10800017 	ldw	r2,0(r2)
 8033f74:	10800617 	ldw	r2,24(r2)
 8033f78:	e0ffff17 	ldw	r3,-4(fp)
 8033f7c:	180d883a 	mov	r6,r3
 8033f80:	e17ffe17 	ldw	r5,-8(fp)
 8033f84:	e13ffb17 	ldw	r4,-20(fp)
 8033f88:	103ee83a 	callr	r2
 8033f8c:	e0bffc15 	stw	r2,-16(fp)
 8033f90:	e0bffc17 	ldw	r2,-16(fp)
 8033f94:	1000070e 	bge	r2,zero,8033fb4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8033f98:	8033ec40 	call	8033ec4 <alt_get_errno>
 8033f9c:	1007883a 	mov	r3,r2
 8033fa0:	e0bffc17 	ldw	r2,-16(fp)
 8033fa4:	0085c83a 	sub	r2,zero,r2
 8033fa8:	18800015 	stw	r2,0(r3)
        return -1;
 8033fac:	00bfffc4 	movi	r2,-1
 8033fb0:	00000c06 	br	8033fe4 <write+0xe4>
      }
      return rval;
 8033fb4:	e0bffc17 	ldw	r2,-16(fp)
 8033fb8:	00000a06 	br	8033fe4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8033fbc:	8033ec40 	call	8033ec4 <alt_get_errno>
 8033fc0:	1007883a 	mov	r3,r2
 8033fc4:	00800344 	movi	r2,13
 8033fc8:	18800015 	stw	r2,0(r3)
 8033fcc:	00000406 	br	8033fe0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8033fd0:	8033ec40 	call	8033ec4 <alt_get_errno>
 8033fd4:	1007883a 	mov	r3,r2
 8033fd8:	00801444 	movi	r2,81
 8033fdc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8033fe0:	00bfffc4 	movi	r2,-1
}
 8033fe4:	e037883a 	mov	sp,fp
 8033fe8:	dfc00117 	ldw	ra,4(sp)
 8033fec:	df000017 	ldw	fp,0(sp)
 8033ff0:	dec00204 	addi	sp,sp,8
 8033ff4:	f800283a 	ret

08033ff8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8033ff8:	defffd04 	addi	sp,sp,-12
 8033ffc:	dfc00215 	stw	ra,8(sp)
 8034000:	df000115 	stw	fp,4(sp)
 8034004:	df000104 	addi	fp,sp,4
 8034008:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 803400c:	d1600904 	addi	r5,gp,-32732
 8034010:	e13fff17 	ldw	r4,-4(fp)
 8034014:	80363d00 	call	80363d0 <alt_dev_llist_insert>
}
 8034018:	e037883a 	mov	sp,fp
 803401c:	dfc00117 	ldw	ra,4(sp)
 8034020:	df000017 	ldw	fp,0(sp)
 8034024:	dec00204 	addi	sp,sp,8
 8034028:	f800283a 	ret

0803402c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803402c:	defffe04 	addi	sp,sp,-8
 8034030:	dfc00115 	stw	ra,4(sp)
 8034034:	df000015 	stw	fp,0(sp)
 8034038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803403c:	d0a00c17 	ldw	r2,-32720(gp)
 8034040:	10000326 	beq	r2,zero,8034050 <alt_get_errno+0x24>
 8034044:	d0a00c17 	ldw	r2,-32720(gp)
 8034048:	103ee83a 	callr	r2
 803404c:	00000106 	br	8034054 <alt_get_errno+0x28>
 8034050:	d0a73404 	addi	r2,gp,-25392
}
 8034054:	e037883a 	mov	sp,fp
 8034058:	dfc00117 	ldw	ra,4(sp)
 803405c:	df000017 	ldw	fp,0(sp)
 8034060:	dec00204 	addi	sp,sp,8
 8034064:	f800283a 	ret

08034068 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 8034068:	defffc04 	addi	sp,sp,-16
 803406c:	dfc00315 	stw	ra,12(sp)
 8034070:	df000215 	stw	fp,8(sp)
 8034074:	df000204 	addi	fp,sp,8
 8034078:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 803407c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 8034080:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 8034084:	e0bffe17 	ldw	r2,-8(fp)
 8034088:	1000051e 	bne	r2,zero,80340a0 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 803408c:	d1601004 	addi	r5,gp,-32704
 8034090:	e13fff17 	ldw	r4,-4(fp)
 8034094:	80363d00 	call	80363d0 <alt_dev_llist_insert>
 8034098:	e0bffe15 	stw	r2,-8(fp)
 803409c:	00000606 	br	80340b8 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 80340a0:	803402c0 	call	803402c <alt_get_errno>
 80340a4:	1007883a 	mov	r3,r2
 80340a8:	00800304 	movi	r2,12
 80340ac:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 80340b0:	00bffd04 	movi	r2,-12
 80340b4:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 80340b8:	e0bffe17 	ldw	r2,-8(fp)
}
 80340bc:	e037883a 	mov	sp,fp
 80340c0:	dfc00117 	ldw	ra,4(sp)
 80340c4:	df000017 	ldw	fp,0(sp)
 80340c8:	dec00204 	addi	sp,sp,8
 80340cc:	f800283a 	ret

080340d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80340d0:	defffd04 	addi	sp,sp,-12
 80340d4:	dfc00215 	stw	ra,8(sp)
 80340d8:	df000115 	stw	fp,4(sp)
 80340dc:	df000104 	addi	fp,sp,4
 80340e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_FFT, nios2_FFT);
 80340e4:	8036dd00 	call	8036dd0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80340e8:	00800044 	movi	r2,1
 80340ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80340f0:	0001883a 	nop
 80340f4:	e037883a 	mov	sp,fp
 80340f8:	dfc00117 	ldw	ra,4(sp)
 80340fc:	df000017 	ldw	fp,0(sp)
 8034100:	dec00204 	addi	sp,sp,8
 8034104:	f800283a 	ret

08034108 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8034108:	defffe04 	addi	sp,sp,-8
 803410c:	dfc00115 	stw	ra,4(sp)
 8034110:	df000015 	stw	fp,0(sp)
 8034114:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8034118:	01c0fa04 	movi	r7,1000
 803411c:	01800144 	movi	r6,5
 8034120:	000b883a 	mov	r5,zero
 8034124:	01020134 	movhi	r4,2052
 8034128:	21040004 	addi	r4,r4,4096
 803412c:	80358cc0 	call	80358cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_FFT, jtag_uart_FFT);
 8034130:	018000c4 	movi	r6,3
 8034134:	000b883a 	mov	r5,zero
 8034138:	01020134 	movhi	r4,2052
 803413c:	21215c04 	addi	r4,r4,-31376
 8034140:	80343240 	call	8034324 <altera_avalon_jtag_uart_init>
 8034144:	01020134 	movhi	r4,2052
 8034148:	21215204 	addi	r4,r4,-31416
 803414c:	8033ff80 	call	8033ff8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_FFT, mailbox_to_FFT);
 8034150:	01800044 	movi	r6,1
 8034154:	000b883a 	mov	r5,zero
 8034158:	01020134 	movhi	r4,2052
 803415c:	21256a04 	addi	r4,r4,-27224
 8034160:	8034f100 	call	8034f10 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_SOUND_ACQUISITION, mailbox_to_Sound_Acquisition);
 8034164:	000d883a 	mov	r6,zero
 8034168:	000b883a 	mov	r5,zero
 803416c:	01020134 	movhi	r4,2052
 8034170:	21257c04 	addi	r4,r4,-27152
 8034174:	8034f100 	call	8034f10 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
 8034178:	01020134 	movhi	r4,2052
 803417c:	21258e04 	addi	r4,r4,-27080
 8034180:	80340680 	call	8034068 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8034184:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 8034188:	01800084 	movi	r6,2
 803418c:	000b883a 	mov	r5,zero
 8034190:	01020134 	movhi	r4,2052
 8034194:	21259c04 	addi	r4,r4,-27024
 8034198:	8035a580 	call	8035a58 <altera_avalon_uart_init>
 803419c:	01020134 	movhi	r4,2052
 80341a0:	21259204 	addi	r4,r4,-27064
 80341a4:	8033ff80 	call	8033ff8 <alt_dev_reg>
}
 80341a8:	0001883a 	nop
 80341ac:	e037883a 	mov	sp,fp
 80341b0:	dfc00117 	ldw	ra,4(sp)
 80341b4:	df000017 	ldw	fp,0(sp)
 80341b8:	dec00204 	addi	sp,sp,8
 80341bc:	f800283a 	ret

080341c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80341c0:	defffa04 	addi	sp,sp,-24
 80341c4:	dfc00515 	stw	ra,20(sp)
 80341c8:	df000415 	stw	fp,16(sp)
 80341cc:	df000404 	addi	fp,sp,16
 80341d0:	e13ffd15 	stw	r4,-12(fp)
 80341d4:	e17ffe15 	stw	r5,-8(fp)
 80341d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80341dc:	e0bffd17 	ldw	r2,-12(fp)
 80341e0:	10800017 	ldw	r2,0(r2)
 80341e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80341e8:	e0bffc17 	ldw	r2,-16(fp)
 80341ec:	10c00a04 	addi	r3,r2,40
 80341f0:	e0bffd17 	ldw	r2,-12(fp)
 80341f4:	10800217 	ldw	r2,8(r2)
 80341f8:	100f883a 	mov	r7,r2
 80341fc:	e1bfff17 	ldw	r6,-4(fp)
 8034200:	e17ffe17 	ldw	r5,-8(fp)
 8034204:	1809883a 	mov	r4,r3
 8034208:	80347e80 	call	80347e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 803420c:	e037883a 	mov	sp,fp
 8034210:	dfc00117 	ldw	ra,4(sp)
 8034214:	df000017 	ldw	fp,0(sp)
 8034218:	dec00204 	addi	sp,sp,8
 803421c:	f800283a 	ret

08034220 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8034220:	defffa04 	addi	sp,sp,-24
 8034224:	dfc00515 	stw	ra,20(sp)
 8034228:	df000415 	stw	fp,16(sp)
 803422c:	df000404 	addi	fp,sp,16
 8034230:	e13ffd15 	stw	r4,-12(fp)
 8034234:	e17ffe15 	stw	r5,-8(fp)
 8034238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 803423c:	e0bffd17 	ldw	r2,-12(fp)
 8034240:	10800017 	ldw	r2,0(r2)
 8034244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8034248:	e0bffc17 	ldw	r2,-16(fp)
 803424c:	10c00a04 	addi	r3,r2,40
 8034250:	e0bffd17 	ldw	r2,-12(fp)
 8034254:	10800217 	ldw	r2,8(r2)
 8034258:	100f883a 	mov	r7,r2
 803425c:	e1bfff17 	ldw	r6,-4(fp)
 8034260:	e17ffe17 	ldw	r5,-8(fp)
 8034264:	1809883a 	mov	r4,r3
 8034268:	8034a040 	call	8034a04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 803426c:	e037883a 	mov	sp,fp
 8034270:	dfc00117 	ldw	ra,4(sp)
 8034274:	df000017 	ldw	fp,0(sp)
 8034278:	dec00204 	addi	sp,sp,8
 803427c:	f800283a 	ret

08034280 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8034280:	defffc04 	addi	sp,sp,-16
 8034284:	dfc00315 	stw	ra,12(sp)
 8034288:	df000215 	stw	fp,8(sp)
 803428c:	df000204 	addi	fp,sp,8
 8034290:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8034294:	e0bfff17 	ldw	r2,-4(fp)
 8034298:	10800017 	ldw	r2,0(r2)
 803429c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80342a0:	e0bffe17 	ldw	r2,-8(fp)
 80342a4:	10c00a04 	addi	r3,r2,40
 80342a8:	e0bfff17 	ldw	r2,-4(fp)
 80342ac:	10800217 	ldw	r2,8(r2)
 80342b0:	100b883a 	mov	r5,r2
 80342b4:	1809883a 	mov	r4,r3
 80342b8:	80346900 	call	8034690 <altera_avalon_jtag_uart_close>
}
 80342bc:	e037883a 	mov	sp,fp
 80342c0:	dfc00117 	ldw	ra,4(sp)
 80342c4:	df000017 	ldw	fp,0(sp)
 80342c8:	dec00204 	addi	sp,sp,8
 80342cc:	f800283a 	ret

080342d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80342d0:	defffa04 	addi	sp,sp,-24
 80342d4:	dfc00515 	stw	ra,20(sp)
 80342d8:	df000415 	stw	fp,16(sp)
 80342dc:	df000404 	addi	fp,sp,16
 80342e0:	e13ffd15 	stw	r4,-12(fp)
 80342e4:	e17ffe15 	stw	r5,-8(fp)
 80342e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80342ec:	e0bffd17 	ldw	r2,-12(fp)
 80342f0:	10800017 	ldw	r2,0(r2)
 80342f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80342f8:	e0bffc17 	ldw	r2,-16(fp)
 80342fc:	10800a04 	addi	r2,r2,40
 8034300:	e1bfff17 	ldw	r6,-4(fp)
 8034304:	e17ffe17 	ldw	r5,-8(fp)
 8034308:	1009883a 	mov	r4,r2
 803430c:	80346f80 	call	80346f8 <altera_avalon_jtag_uart_ioctl>
}
 8034310:	e037883a 	mov	sp,fp
 8034314:	dfc00117 	ldw	ra,4(sp)
 8034318:	df000017 	ldw	fp,0(sp)
 803431c:	dec00204 	addi	sp,sp,8
 8034320:	f800283a 	ret

08034324 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8034324:	defffa04 	addi	sp,sp,-24
 8034328:	dfc00515 	stw	ra,20(sp)
 803432c:	df000415 	stw	fp,16(sp)
 8034330:	df000404 	addi	fp,sp,16
 8034334:	e13ffd15 	stw	r4,-12(fp)
 8034338:	e17ffe15 	stw	r5,-8(fp)
 803433c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8034340:	e0bffd17 	ldw	r2,-12(fp)
 8034344:	00c00044 	movi	r3,1
 8034348:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 803434c:	e0bffd17 	ldw	r2,-12(fp)
 8034350:	10800017 	ldw	r2,0(r2)
 8034354:	10800104 	addi	r2,r2,4
 8034358:	1007883a 	mov	r3,r2
 803435c:	e0bffd17 	ldw	r2,-12(fp)
 8034360:	10800817 	ldw	r2,32(r2)
 8034364:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8034368:	e0bffe17 	ldw	r2,-8(fp)
 803436c:	e0ffff17 	ldw	r3,-4(fp)
 8034370:	d8000015 	stw	zero,0(sp)
 8034374:	e1fffd17 	ldw	r7,-12(fp)
 8034378:	018200f4 	movhi	r6,2051
 803437c:	3190f904 	addi	r6,r6,17380
 8034380:	180b883a 	mov	r5,r3
 8034384:	1009883a 	mov	r4,r2
 8034388:	80365f80 	call	80365f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 803438c:	e0bffd17 	ldw	r2,-12(fp)
 8034390:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8034394:	e0bffd17 	ldw	r2,-12(fp)
 8034398:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 803439c:	d0e73c17 	ldw	r3,-25360(gp)
 80343a0:	e1fffd17 	ldw	r7,-12(fp)
 80343a4:	018200f4 	movhi	r6,2051
 80343a8:	31917c04 	addi	r6,r6,17904
 80343ac:	180b883a 	mov	r5,r3
 80343b0:	1009883a 	mov	r4,r2
 80343b4:	80362200 	call	8036220 <alt_alarm_start>
 80343b8:	1000040e 	bge	r2,zero,80343cc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80343bc:	e0fffd17 	ldw	r3,-12(fp)
 80343c0:	00a00034 	movhi	r2,32768
 80343c4:	10bfffc4 	addi	r2,r2,-1
 80343c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80343cc:	0001883a 	nop
 80343d0:	e037883a 	mov	sp,fp
 80343d4:	dfc00117 	ldw	ra,4(sp)
 80343d8:	df000017 	ldw	fp,0(sp)
 80343dc:	dec00204 	addi	sp,sp,8
 80343e0:	f800283a 	ret

080343e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80343e4:	defff804 	addi	sp,sp,-32
 80343e8:	df000715 	stw	fp,28(sp)
 80343ec:	df000704 	addi	fp,sp,28
 80343f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80343f4:	e0bfff17 	ldw	r2,-4(fp)
 80343f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80343fc:	e0bffb17 	ldw	r2,-20(fp)
 8034400:	10800017 	ldw	r2,0(r2)
 8034404:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8034408:	e0bffc17 	ldw	r2,-16(fp)
 803440c:	10800104 	addi	r2,r2,4
 8034410:	10800037 	ldwio	r2,0(r2)
 8034414:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8034418:	e0bffd17 	ldw	r2,-12(fp)
 803441c:	1080c00c 	andi	r2,r2,768
 8034420:	10006d26 	beq	r2,zero,80345d8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8034424:	e0bffd17 	ldw	r2,-12(fp)
 8034428:	1080400c 	andi	r2,r2,256
 803442c:	10003526 	beq	r2,zero,8034504 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8034430:	00800074 	movhi	r2,1
 8034434:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8034438:	e0bffb17 	ldw	r2,-20(fp)
 803443c:	10800a17 	ldw	r2,40(r2)
 8034440:	10800044 	addi	r2,r2,1
 8034444:	1081ffcc 	andi	r2,r2,2047
 8034448:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 803444c:	e0bffb17 	ldw	r2,-20(fp)
 8034450:	10c00b17 	ldw	r3,44(r2)
 8034454:	e0bffe17 	ldw	r2,-8(fp)
 8034458:	18801526 	beq	r3,r2,80344b0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 803445c:	e0bffc17 	ldw	r2,-16(fp)
 8034460:	10800037 	ldwio	r2,0(r2)
 8034464:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8034468:	e0bff917 	ldw	r2,-28(fp)
 803446c:	10a0000c 	andi	r2,r2,32768
 8034470:	10001126 	beq	r2,zero,80344b8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8034474:	e0bffb17 	ldw	r2,-20(fp)
 8034478:	10800a17 	ldw	r2,40(r2)
 803447c:	e0fff917 	ldw	r3,-28(fp)
 8034480:	1809883a 	mov	r4,r3
 8034484:	e0fffb17 	ldw	r3,-20(fp)
 8034488:	1885883a 	add	r2,r3,r2
 803448c:	10800e04 	addi	r2,r2,56
 8034490:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8034494:	e0bffb17 	ldw	r2,-20(fp)
 8034498:	10800a17 	ldw	r2,40(r2)
 803449c:	10800044 	addi	r2,r2,1
 80344a0:	10c1ffcc 	andi	r3,r2,2047
 80344a4:	e0bffb17 	ldw	r2,-20(fp)
 80344a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80344ac:	003fe206 	br	8034438 <_gp+0xffff2d2c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80344b0:	0001883a 	nop
 80344b4:	00000106 	br	80344bc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80344b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80344bc:	e0bff917 	ldw	r2,-28(fp)
 80344c0:	10bfffec 	andhi	r2,r2,65535
 80344c4:	10000f26 	beq	r2,zero,8034504 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80344c8:	e0bffb17 	ldw	r2,-20(fp)
 80344cc:	10c00817 	ldw	r3,32(r2)
 80344d0:	00bfff84 	movi	r2,-2
 80344d4:	1886703a 	and	r3,r3,r2
 80344d8:	e0bffb17 	ldw	r2,-20(fp)
 80344dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80344e0:	e0bffc17 	ldw	r2,-16(fp)
 80344e4:	10800104 	addi	r2,r2,4
 80344e8:	1007883a 	mov	r3,r2
 80344ec:	e0bffb17 	ldw	r2,-20(fp)
 80344f0:	10800817 	ldw	r2,32(r2)
 80344f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80344f8:	e0bffc17 	ldw	r2,-16(fp)
 80344fc:	10800104 	addi	r2,r2,4
 8034500:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8034504:	e0bffd17 	ldw	r2,-12(fp)
 8034508:	1080800c 	andi	r2,r2,512
 803450c:	103fbe26 	beq	r2,zero,8034408 <_gp+0xffff2cfc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8034510:	e0bffd17 	ldw	r2,-12(fp)
 8034514:	1004d43a 	srli	r2,r2,16
 8034518:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 803451c:	00001406 	br	8034570 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8034520:	e0bffc17 	ldw	r2,-16(fp)
 8034524:	e0fffb17 	ldw	r3,-20(fp)
 8034528:	18c00d17 	ldw	r3,52(r3)
 803452c:	e13ffb17 	ldw	r4,-20(fp)
 8034530:	20c7883a 	add	r3,r4,r3
 8034534:	18c20e04 	addi	r3,r3,2104
 8034538:	18c00003 	ldbu	r3,0(r3)
 803453c:	18c03fcc 	andi	r3,r3,255
 8034540:	18c0201c 	xori	r3,r3,128
 8034544:	18ffe004 	addi	r3,r3,-128
 8034548:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 803454c:	e0bffb17 	ldw	r2,-20(fp)
 8034550:	10800d17 	ldw	r2,52(r2)
 8034554:	10800044 	addi	r2,r2,1
 8034558:	10c1ffcc 	andi	r3,r2,2047
 803455c:	e0bffb17 	ldw	r2,-20(fp)
 8034560:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8034564:	e0bffa17 	ldw	r2,-24(fp)
 8034568:	10bfffc4 	addi	r2,r2,-1
 803456c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8034570:	e0bffa17 	ldw	r2,-24(fp)
 8034574:	10000526 	beq	r2,zero,803458c <altera_avalon_jtag_uart_irq+0x1a8>
 8034578:	e0bffb17 	ldw	r2,-20(fp)
 803457c:	10c00d17 	ldw	r3,52(r2)
 8034580:	e0bffb17 	ldw	r2,-20(fp)
 8034584:	10800c17 	ldw	r2,48(r2)
 8034588:	18bfe51e 	bne	r3,r2,8034520 <_gp+0xffff2e14>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 803458c:	e0bffa17 	ldw	r2,-24(fp)
 8034590:	103f9d26 	beq	r2,zero,8034408 <_gp+0xffff2cfc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8034594:	e0bffb17 	ldw	r2,-20(fp)
 8034598:	10c00817 	ldw	r3,32(r2)
 803459c:	00bfff44 	movi	r2,-3
 80345a0:	1886703a 	and	r3,r3,r2
 80345a4:	e0bffb17 	ldw	r2,-20(fp)
 80345a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80345ac:	e0bffb17 	ldw	r2,-20(fp)
 80345b0:	10800017 	ldw	r2,0(r2)
 80345b4:	10800104 	addi	r2,r2,4
 80345b8:	1007883a 	mov	r3,r2
 80345bc:	e0bffb17 	ldw	r2,-20(fp)
 80345c0:	10800817 	ldw	r2,32(r2)
 80345c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80345c8:	e0bffc17 	ldw	r2,-16(fp)
 80345cc:	10800104 	addi	r2,r2,4
 80345d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80345d4:	003f8c06 	br	8034408 <_gp+0xffff2cfc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80345d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80345dc:	0001883a 	nop
 80345e0:	e037883a 	mov	sp,fp
 80345e4:	df000017 	ldw	fp,0(sp)
 80345e8:	dec00104 	addi	sp,sp,4
 80345ec:	f800283a 	ret

080345f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80345f0:	defff804 	addi	sp,sp,-32
 80345f4:	df000715 	stw	fp,28(sp)
 80345f8:	df000704 	addi	fp,sp,28
 80345fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8034600:	e0bffb17 	ldw	r2,-20(fp)
 8034604:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8034608:	e0bff917 	ldw	r2,-28(fp)
 803460c:	10800017 	ldw	r2,0(r2)
 8034610:	10800104 	addi	r2,r2,4
 8034614:	10800037 	ldwio	r2,0(r2)
 8034618:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 803461c:	e0bffa17 	ldw	r2,-24(fp)
 8034620:	1081000c 	andi	r2,r2,1024
 8034624:	10000b26 	beq	r2,zero,8034654 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8034628:	e0bff917 	ldw	r2,-28(fp)
 803462c:	10800017 	ldw	r2,0(r2)
 8034630:	10800104 	addi	r2,r2,4
 8034634:	1007883a 	mov	r3,r2
 8034638:	e0bff917 	ldw	r2,-28(fp)
 803463c:	10800817 	ldw	r2,32(r2)
 8034640:	10810014 	ori	r2,r2,1024
 8034644:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8034648:	e0bff917 	ldw	r2,-28(fp)
 803464c:	10000915 	stw	zero,36(r2)
 8034650:	00000a06 	br	803467c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8034654:	e0bff917 	ldw	r2,-28(fp)
 8034658:	10c00917 	ldw	r3,36(r2)
 803465c:	00a00034 	movhi	r2,32768
 8034660:	10bfff04 	addi	r2,r2,-4
 8034664:	10c00536 	bltu	r2,r3,803467c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8034668:	e0bff917 	ldw	r2,-28(fp)
 803466c:	10800917 	ldw	r2,36(r2)
 8034670:	10c00044 	addi	r3,r2,1
 8034674:	e0bff917 	ldw	r2,-28(fp)
 8034678:	10c00915 	stw	r3,36(r2)
 803467c:	d0a73c17 	ldw	r2,-25360(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8034680:	e037883a 	mov	sp,fp
 8034684:	df000017 	ldw	fp,0(sp)
 8034688:	dec00104 	addi	sp,sp,4
 803468c:	f800283a 	ret

08034690 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8034690:	defffd04 	addi	sp,sp,-12
 8034694:	df000215 	stw	fp,8(sp)
 8034698:	df000204 	addi	fp,sp,8
 803469c:	e13ffe15 	stw	r4,-8(fp)
 80346a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80346a4:	00000506 	br	80346bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80346a8:	e0bfff17 	ldw	r2,-4(fp)
 80346ac:	1090000c 	andi	r2,r2,16384
 80346b0:	10000226 	beq	r2,zero,80346bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80346b4:	00bffd44 	movi	r2,-11
 80346b8:	00000b06 	br	80346e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80346bc:	e0bffe17 	ldw	r2,-8(fp)
 80346c0:	10c00d17 	ldw	r3,52(r2)
 80346c4:	e0bffe17 	ldw	r2,-8(fp)
 80346c8:	10800c17 	ldw	r2,48(r2)
 80346cc:	18800526 	beq	r3,r2,80346e4 <altera_avalon_jtag_uart_close+0x54>
 80346d0:	e0bffe17 	ldw	r2,-8(fp)
 80346d4:	10c00917 	ldw	r3,36(r2)
 80346d8:	e0bffe17 	ldw	r2,-8(fp)
 80346dc:	10800117 	ldw	r2,4(r2)
 80346e0:	18bff136 	bltu	r3,r2,80346a8 <_gp+0xffff2f9c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80346e4:	0005883a 	mov	r2,zero
}
 80346e8:	e037883a 	mov	sp,fp
 80346ec:	df000017 	ldw	fp,0(sp)
 80346f0:	dec00104 	addi	sp,sp,4
 80346f4:	f800283a 	ret

080346f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80346f8:	defffa04 	addi	sp,sp,-24
 80346fc:	df000515 	stw	fp,20(sp)
 8034700:	df000504 	addi	fp,sp,20
 8034704:	e13ffd15 	stw	r4,-12(fp)
 8034708:	e17ffe15 	stw	r5,-8(fp)
 803470c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8034710:	00bff9c4 	movi	r2,-25
 8034714:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8034718:	e0bffe17 	ldw	r2,-8(fp)
 803471c:	10da8060 	cmpeqi	r3,r2,27137
 8034720:	1800031e 	bne	r3,zero,8034730 <altera_avalon_jtag_uart_ioctl+0x38>
 8034724:	109a80a0 	cmpeqi	r2,r2,27138
 8034728:	1000181e 	bne	r2,zero,803478c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 803472c:	00002906 	br	80347d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8034730:	e0bffd17 	ldw	r2,-12(fp)
 8034734:	10c00117 	ldw	r3,4(r2)
 8034738:	00a00034 	movhi	r2,32768
 803473c:	10bfffc4 	addi	r2,r2,-1
 8034740:	18802126 	beq	r3,r2,80347c8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8034744:	e0bfff17 	ldw	r2,-4(fp)
 8034748:	10800017 	ldw	r2,0(r2)
 803474c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8034750:	e0bffc17 	ldw	r2,-16(fp)
 8034754:	10800090 	cmplti	r2,r2,2
 8034758:	1000061e 	bne	r2,zero,8034774 <altera_avalon_jtag_uart_ioctl+0x7c>
 803475c:	e0fffc17 	ldw	r3,-16(fp)
 8034760:	00a00034 	movhi	r2,32768
 8034764:	10bfffc4 	addi	r2,r2,-1
 8034768:	18800226 	beq	r3,r2,8034774 <altera_avalon_jtag_uart_ioctl+0x7c>
 803476c:	e0bffc17 	ldw	r2,-16(fp)
 8034770:	00000206 	br	803477c <altera_avalon_jtag_uart_ioctl+0x84>
 8034774:	00a00034 	movhi	r2,32768
 8034778:	10bfff84 	addi	r2,r2,-2
 803477c:	e0fffd17 	ldw	r3,-12(fp)
 8034780:	18800115 	stw	r2,4(r3)
      rc = 0;
 8034784:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8034788:	00000f06 	br	80347c8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 803478c:	e0bffd17 	ldw	r2,-12(fp)
 8034790:	10c00117 	ldw	r3,4(r2)
 8034794:	00a00034 	movhi	r2,32768
 8034798:	10bfffc4 	addi	r2,r2,-1
 803479c:	18800c26 	beq	r3,r2,80347d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80347a0:	e0bffd17 	ldw	r2,-12(fp)
 80347a4:	10c00917 	ldw	r3,36(r2)
 80347a8:	e0bffd17 	ldw	r2,-12(fp)
 80347ac:	10800117 	ldw	r2,4(r2)
 80347b0:	1885803a 	cmpltu	r2,r3,r2
 80347b4:	10c03fcc 	andi	r3,r2,255
 80347b8:	e0bfff17 	ldw	r2,-4(fp)
 80347bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80347c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80347c4:	00000206 	br	80347d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80347c8:	0001883a 	nop
 80347cc:	00000106 	br	80347d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80347d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80347d4:	e0bffb17 	ldw	r2,-20(fp)
}
 80347d8:	e037883a 	mov	sp,fp
 80347dc:	df000017 	ldw	fp,0(sp)
 80347e0:	dec00104 	addi	sp,sp,4
 80347e4:	f800283a 	ret

080347e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80347e8:	defff304 	addi	sp,sp,-52
 80347ec:	dfc00c15 	stw	ra,48(sp)
 80347f0:	df000b15 	stw	fp,44(sp)
 80347f4:	df000b04 	addi	fp,sp,44
 80347f8:	e13ffc15 	stw	r4,-16(fp)
 80347fc:	e17ffd15 	stw	r5,-12(fp)
 8034800:	e1bffe15 	stw	r6,-8(fp)
 8034804:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8034808:	e0bffd17 	ldw	r2,-12(fp)
 803480c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8034810:	00004706 	br	8034930 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8034814:	e0bffc17 	ldw	r2,-16(fp)
 8034818:	10800a17 	ldw	r2,40(r2)
 803481c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8034820:	e0bffc17 	ldw	r2,-16(fp)
 8034824:	10800b17 	ldw	r2,44(r2)
 8034828:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 803482c:	e0fff717 	ldw	r3,-36(fp)
 8034830:	e0bff817 	ldw	r2,-32(fp)
 8034834:	18800536 	bltu	r3,r2,803484c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8034838:	e0fff717 	ldw	r3,-36(fp)
 803483c:	e0bff817 	ldw	r2,-32(fp)
 8034840:	1885c83a 	sub	r2,r3,r2
 8034844:	e0bff615 	stw	r2,-40(fp)
 8034848:	00000406 	br	803485c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 803484c:	00c20004 	movi	r3,2048
 8034850:	e0bff817 	ldw	r2,-32(fp)
 8034854:	1885c83a 	sub	r2,r3,r2
 8034858:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 803485c:	e0bff617 	ldw	r2,-40(fp)
 8034860:	10001e26 	beq	r2,zero,80348dc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8034864:	e0fffe17 	ldw	r3,-8(fp)
 8034868:	e0bff617 	ldw	r2,-40(fp)
 803486c:	1880022e 	bgeu	r3,r2,8034878 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8034870:	e0bffe17 	ldw	r2,-8(fp)
 8034874:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8034878:	e0bffc17 	ldw	r2,-16(fp)
 803487c:	10c00e04 	addi	r3,r2,56
 8034880:	e0bff817 	ldw	r2,-32(fp)
 8034884:	1885883a 	add	r2,r3,r2
 8034888:	e1bff617 	ldw	r6,-40(fp)
 803488c:	100b883a 	mov	r5,r2
 8034890:	e13ff517 	ldw	r4,-44(fp)
 8034894:	8029c7c0 	call	8029c7c <memcpy>
      ptr   += n;
 8034898:	e0fff517 	ldw	r3,-44(fp)
 803489c:	e0bff617 	ldw	r2,-40(fp)
 80348a0:	1885883a 	add	r2,r3,r2
 80348a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80348a8:	e0fffe17 	ldw	r3,-8(fp)
 80348ac:	e0bff617 	ldw	r2,-40(fp)
 80348b0:	1885c83a 	sub	r2,r3,r2
 80348b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80348b8:	e0fff817 	ldw	r3,-32(fp)
 80348bc:	e0bff617 	ldw	r2,-40(fp)
 80348c0:	1885883a 	add	r2,r3,r2
 80348c4:	10c1ffcc 	andi	r3,r2,2047
 80348c8:	e0bffc17 	ldw	r2,-16(fp)
 80348cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80348d0:	e0bffe17 	ldw	r2,-8(fp)
 80348d4:	00bfcf16 	blt	zero,r2,8034814 <_gp+0xffff3108>
 80348d8:	00000106 	br	80348e0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80348dc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80348e0:	e0fff517 	ldw	r3,-44(fp)
 80348e4:	e0bffd17 	ldw	r2,-12(fp)
 80348e8:	1880141e 	bne	r3,r2,803493c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80348ec:	e0bfff17 	ldw	r2,-4(fp)
 80348f0:	1090000c 	andi	r2,r2,16384
 80348f4:	1000131e 	bne	r2,zero,8034944 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80348f8:	0001883a 	nop
 80348fc:	e0bffc17 	ldw	r2,-16(fp)
 8034900:	10c00a17 	ldw	r3,40(r2)
 8034904:	e0bff717 	ldw	r2,-36(fp)
 8034908:	1880051e 	bne	r3,r2,8034920 <altera_avalon_jtag_uart_read+0x138>
 803490c:	e0bffc17 	ldw	r2,-16(fp)
 8034910:	10c00917 	ldw	r3,36(r2)
 8034914:	e0bffc17 	ldw	r2,-16(fp)
 8034918:	10800117 	ldw	r2,4(r2)
 803491c:	18bff736 	bltu	r3,r2,80348fc <_gp+0xffff31f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8034920:	e0bffc17 	ldw	r2,-16(fp)
 8034924:	10c00a17 	ldw	r3,40(r2)
 8034928:	e0bff717 	ldw	r2,-36(fp)
 803492c:	18800726 	beq	r3,r2,803494c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8034930:	e0bffe17 	ldw	r2,-8(fp)
 8034934:	00bfb716 	blt	zero,r2,8034814 <_gp+0xffff3108>
 8034938:	00000506 	br	8034950 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 803493c:	0001883a 	nop
 8034940:	00000306 	br	8034950 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8034944:	0001883a 	nop
 8034948:	00000106 	br	8034950 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 803494c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8034950:	e0fff517 	ldw	r3,-44(fp)
 8034954:	e0bffd17 	ldw	r2,-12(fp)
 8034958:	18801826 	beq	r3,r2,80349bc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803495c:	0005303a 	rdctl	r2,status
 8034960:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8034964:	e0fffb17 	ldw	r3,-20(fp)
 8034968:	00bfff84 	movi	r2,-2
 803496c:	1884703a 	and	r2,r3,r2
 8034970:	1001703a 	wrctl	status,r2
  
  return context;
 8034974:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8034978:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 803497c:	e0bffc17 	ldw	r2,-16(fp)
 8034980:	10800817 	ldw	r2,32(r2)
 8034984:	10c00054 	ori	r3,r2,1
 8034988:	e0bffc17 	ldw	r2,-16(fp)
 803498c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8034990:	e0bffc17 	ldw	r2,-16(fp)
 8034994:	10800017 	ldw	r2,0(r2)
 8034998:	10800104 	addi	r2,r2,4
 803499c:	1007883a 	mov	r3,r2
 80349a0:	e0bffc17 	ldw	r2,-16(fp)
 80349a4:	10800817 	ldw	r2,32(r2)
 80349a8:	18800035 	stwio	r2,0(r3)
 80349ac:	e0bffa17 	ldw	r2,-24(fp)
 80349b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80349b4:	e0bff917 	ldw	r2,-28(fp)
 80349b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80349bc:	e0fff517 	ldw	r3,-44(fp)
 80349c0:	e0bffd17 	ldw	r2,-12(fp)
 80349c4:	18800426 	beq	r3,r2,80349d8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80349c8:	e0fff517 	ldw	r3,-44(fp)
 80349cc:	e0bffd17 	ldw	r2,-12(fp)
 80349d0:	1885c83a 	sub	r2,r3,r2
 80349d4:	00000606 	br	80349f0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80349d8:	e0bfff17 	ldw	r2,-4(fp)
 80349dc:	1090000c 	andi	r2,r2,16384
 80349e0:	10000226 	beq	r2,zero,80349ec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80349e4:	00bffd44 	movi	r2,-11
 80349e8:	00000106 	br	80349f0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80349ec:	00bffec4 	movi	r2,-5
}
 80349f0:	e037883a 	mov	sp,fp
 80349f4:	dfc00117 	ldw	ra,4(sp)
 80349f8:	df000017 	ldw	fp,0(sp)
 80349fc:	dec00204 	addi	sp,sp,8
 8034a00:	f800283a 	ret

08034a04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8034a04:	defff304 	addi	sp,sp,-52
 8034a08:	dfc00c15 	stw	ra,48(sp)
 8034a0c:	df000b15 	stw	fp,44(sp)
 8034a10:	df000b04 	addi	fp,sp,44
 8034a14:	e13ffc15 	stw	r4,-16(fp)
 8034a18:	e17ffd15 	stw	r5,-12(fp)
 8034a1c:	e1bffe15 	stw	r6,-8(fp)
 8034a20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8034a24:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8034a28:	e0bffd17 	ldw	r2,-12(fp)
 8034a2c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8034a30:	00003706 	br	8034b10 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8034a34:	e0bffc17 	ldw	r2,-16(fp)
 8034a38:	10800c17 	ldw	r2,48(r2)
 8034a3c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8034a40:	e0bffc17 	ldw	r2,-16(fp)
 8034a44:	10800d17 	ldw	r2,52(r2)
 8034a48:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8034a4c:	e0fff917 	ldw	r3,-28(fp)
 8034a50:	e0bff517 	ldw	r2,-44(fp)
 8034a54:	1880062e 	bgeu	r3,r2,8034a70 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8034a58:	e0fff517 	ldw	r3,-44(fp)
 8034a5c:	e0bff917 	ldw	r2,-28(fp)
 8034a60:	1885c83a 	sub	r2,r3,r2
 8034a64:	10bfffc4 	addi	r2,r2,-1
 8034a68:	e0bff615 	stw	r2,-40(fp)
 8034a6c:	00000b06 	br	8034a9c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8034a70:	e0bff517 	ldw	r2,-44(fp)
 8034a74:	10000526 	beq	r2,zero,8034a8c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8034a78:	00c20004 	movi	r3,2048
 8034a7c:	e0bff917 	ldw	r2,-28(fp)
 8034a80:	1885c83a 	sub	r2,r3,r2
 8034a84:	e0bff615 	stw	r2,-40(fp)
 8034a88:	00000406 	br	8034a9c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8034a8c:	00c1ffc4 	movi	r3,2047
 8034a90:	e0bff917 	ldw	r2,-28(fp)
 8034a94:	1885c83a 	sub	r2,r3,r2
 8034a98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8034a9c:	e0bff617 	ldw	r2,-40(fp)
 8034aa0:	10001e26 	beq	r2,zero,8034b1c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8034aa4:	e0fffe17 	ldw	r3,-8(fp)
 8034aa8:	e0bff617 	ldw	r2,-40(fp)
 8034aac:	1880022e 	bgeu	r3,r2,8034ab8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8034ab0:	e0bffe17 	ldw	r2,-8(fp)
 8034ab4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8034ab8:	e0bffc17 	ldw	r2,-16(fp)
 8034abc:	10c20e04 	addi	r3,r2,2104
 8034ac0:	e0bff917 	ldw	r2,-28(fp)
 8034ac4:	1885883a 	add	r2,r3,r2
 8034ac8:	e1bff617 	ldw	r6,-40(fp)
 8034acc:	e17ffd17 	ldw	r5,-12(fp)
 8034ad0:	1009883a 	mov	r4,r2
 8034ad4:	8029c7c0 	call	8029c7c <memcpy>
      ptr   += n;
 8034ad8:	e0fffd17 	ldw	r3,-12(fp)
 8034adc:	e0bff617 	ldw	r2,-40(fp)
 8034ae0:	1885883a 	add	r2,r3,r2
 8034ae4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8034ae8:	e0fffe17 	ldw	r3,-8(fp)
 8034aec:	e0bff617 	ldw	r2,-40(fp)
 8034af0:	1885c83a 	sub	r2,r3,r2
 8034af4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8034af8:	e0fff917 	ldw	r3,-28(fp)
 8034afc:	e0bff617 	ldw	r2,-40(fp)
 8034b00:	1885883a 	add	r2,r3,r2
 8034b04:	10c1ffcc 	andi	r3,r2,2047
 8034b08:	e0bffc17 	ldw	r2,-16(fp)
 8034b0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8034b10:	e0bffe17 	ldw	r2,-8(fp)
 8034b14:	00bfc716 	blt	zero,r2,8034a34 <_gp+0xffff3328>
 8034b18:	00000106 	br	8034b20 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8034b1c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8034b20:	0005303a 	rdctl	r2,status
 8034b24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8034b28:	e0fffb17 	ldw	r3,-20(fp)
 8034b2c:	00bfff84 	movi	r2,-2
 8034b30:	1884703a 	and	r2,r3,r2
 8034b34:	1001703a 	wrctl	status,r2
  
  return context;
 8034b38:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8034b3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8034b40:	e0bffc17 	ldw	r2,-16(fp)
 8034b44:	10800817 	ldw	r2,32(r2)
 8034b48:	10c00094 	ori	r3,r2,2
 8034b4c:	e0bffc17 	ldw	r2,-16(fp)
 8034b50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8034b54:	e0bffc17 	ldw	r2,-16(fp)
 8034b58:	10800017 	ldw	r2,0(r2)
 8034b5c:	10800104 	addi	r2,r2,4
 8034b60:	1007883a 	mov	r3,r2
 8034b64:	e0bffc17 	ldw	r2,-16(fp)
 8034b68:	10800817 	ldw	r2,32(r2)
 8034b6c:	18800035 	stwio	r2,0(r3)
 8034b70:	e0bffa17 	ldw	r2,-24(fp)
 8034b74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8034b78:	e0bff817 	ldw	r2,-32(fp)
 8034b7c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8034b80:	e0bffe17 	ldw	r2,-8(fp)
 8034b84:	0080100e 	bge	zero,r2,8034bc8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8034b88:	e0bfff17 	ldw	r2,-4(fp)
 8034b8c:	1090000c 	andi	r2,r2,16384
 8034b90:	1000101e 	bne	r2,zero,8034bd4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8034b94:	0001883a 	nop
 8034b98:	e0bffc17 	ldw	r2,-16(fp)
 8034b9c:	10c00d17 	ldw	r3,52(r2)
 8034ba0:	e0bff517 	ldw	r2,-44(fp)
 8034ba4:	1880051e 	bne	r3,r2,8034bbc <altera_avalon_jtag_uart_write+0x1b8>
 8034ba8:	e0bffc17 	ldw	r2,-16(fp)
 8034bac:	10c00917 	ldw	r3,36(r2)
 8034bb0:	e0bffc17 	ldw	r2,-16(fp)
 8034bb4:	10800117 	ldw	r2,4(r2)
 8034bb8:	18bff736 	bltu	r3,r2,8034b98 <_gp+0xffff348c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8034bbc:	e0bffc17 	ldw	r2,-16(fp)
 8034bc0:	10800917 	ldw	r2,36(r2)
 8034bc4:	1000051e 	bne	r2,zero,8034bdc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8034bc8:	e0bffe17 	ldw	r2,-8(fp)
 8034bcc:	00bfd016 	blt	zero,r2,8034b10 <_gp+0xffff3404>
 8034bd0:	00000306 	br	8034be0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8034bd4:	0001883a 	nop
 8034bd8:	00000106 	br	8034be0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8034bdc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8034be0:	e0fffd17 	ldw	r3,-12(fp)
 8034be4:	e0bff717 	ldw	r2,-36(fp)
 8034be8:	18800426 	beq	r3,r2,8034bfc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8034bec:	e0fffd17 	ldw	r3,-12(fp)
 8034bf0:	e0bff717 	ldw	r2,-36(fp)
 8034bf4:	1885c83a 	sub	r2,r3,r2
 8034bf8:	00000606 	br	8034c14 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8034bfc:	e0bfff17 	ldw	r2,-4(fp)
 8034c00:	1090000c 	andi	r2,r2,16384
 8034c04:	10000226 	beq	r2,zero,8034c10 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8034c08:	00bffd44 	movi	r2,-11
 8034c0c:	00000106 	br	8034c14 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8034c10:	00bffec4 	movi	r2,-5
}
 8034c14:	e037883a 	mov	sp,fp
 8034c18:	dfc00117 	ldw	ra,4(sp)
 8034c1c:	df000017 	ldw	fp,0(sp)
 8034c20:	dec00204 	addi	sp,sp,8
 8034c24:	f800283a 	ret

08034c28 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 8034c28:	defffd04 	addi	sp,sp,-12
 8034c2c:	df000215 	stw	fp,8(sp)
 8034c30:	df000204 	addi	fp,sp,8
 8034c34:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 8034c38:	008e84b4 	movhi	r2,14866
 8034c3c:	10ac1144 	addi	r2,r2,-20411
 8034c40:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 8034c44:	e0bfff17 	ldw	r2,-4(fp)
 8034c48:	10800a17 	ldw	r2,40(r2)
 8034c4c:	10800104 	addi	r2,r2,4
 8034c50:	1007883a 	mov	r3,r2
 8034c54:	e0bffe17 	ldw	r2,-8(fp)
 8034c58:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 8034c5c:	e0bfff17 	ldw	r2,-4(fp)
 8034c60:	10800a17 	ldw	r2,40(r2)
 8034c64:	10800104 	addi	r2,r2,4
 8034c68:	10800037 	ldwio	r2,0(r2)
 8034c6c:	1007883a 	mov	r3,r2
 8034c70:	e0bffe17 	ldw	r2,-8(fp)
 8034c74:	1880081e 	bne	r3,r2,8034c98 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 8034c78:	e0bfff17 	ldw	r2,-4(fp)
 8034c7c:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 8034c80:	e0bfff17 	ldw	r2,-4(fp)
 8034c84:	10800a17 	ldw	r2,40(r2)
 8034c88:	10800104 	addi	r2,r2,4
 8034c8c:	0007883a 	mov	r3,zero
 8034c90:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 8034c94:	00000306 	br	8034ca4 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 8034c98:	e0bfff17 	ldw	r2,-4(fp)
 8034c9c:	00c00044 	movi	r3,1
 8034ca0:	10c00f15 	stw	r3,60(r2)
    }
}
 8034ca4:	0001883a 	nop
 8034ca8:	e037883a 	mov	sp,fp
 8034cac:	df000017 	ldw	fp,0(sp)
 8034cb0:	dec00104 	addi	sp,sp,4
 8034cb4:	f800283a 	ret

08034cb8 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 8034cb8:	defffc04 	addi	sp,sp,-16
 8034cbc:	df000315 	stw	fp,12(sp)
 8034cc0:	df000304 	addi	fp,sp,12
 8034cc4:	e13ffe15 	stw	r4,-8(fp)
 8034cc8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 8034ccc:	e0bfff17 	ldw	r2,-4(fp)
 8034cd0:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 8034cd4:	e0bffd17 	ldw	r2,-12(fp)
 8034cd8:	10001026 	beq	r2,zero,8034d1c <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 8034cdc:	e0bffe17 	ldw	r2,-8(fp)
 8034ce0:	10800a17 	ldw	r2,40(r2)
 8034ce4:	10800104 	addi	r2,r2,4
 8034ce8:	1007883a 	mov	r3,r2
 8034cec:	e0bffd17 	ldw	r2,-12(fp)
 8034cf0:	10800104 	addi	r2,r2,4
 8034cf4:	10800017 	ldw	r2,0(r2)
 8034cf8:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 8034cfc:	e0bffe17 	ldw	r2,-8(fp)
 8034d00:	10800a17 	ldw	r2,40(r2)
 8034d04:	1007883a 	mov	r3,r2
 8034d08:	e0bffd17 	ldw	r2,-12(fp)
 8034d0c:	10800017 	ldw	r2,0(r2)
 8034d10:	18800035 	stwio	r2,0(r3)
        return 0;
 8034d14:	0005883a 	mov	r2,zero
 8034d18:	00000106 	br	8034d20 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 8034d1c:	00bffa84 	movi	r2,-22
}
 8034d20:	e037883a 	mov	sp,fp
 8034d24:	df000017 	ldw	fp,0(sp)
 8034d28:	dec00104 	addi	sp,sp,4
 8034d2c:	f800283a 	ret

08034d30 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 8034d30:	defff604 	addi	sp,sp,-40
 8034d34:	dfc00915 	stw	ra,36(sp)
 8034d38:	df000815 	stw	fp,32(sp)
 8034d3c:	df000804 	addi	fp,sp,32
 8034d40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8034d44:	e0bfff17 	ldw	r2,-4(fp)
 8034d48:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 8034d4c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 8034d50:	e0bff817 	ldw	r2,-32(fp)
 8034d54:	10801017 	ldw	r2,64(r2)
 8034d58:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8034d5c:	e0bff817 	ldw	r2,-32(fp)
 8034d60:	10800a17 	ldw	r2,40(r2)
 8034d64:	10800304 	addi	r2,r2,12
 8034d68:	10800037 	ldwio	r2,0(r2)
 8034d6c:	1007883a 	mov	r3,r2
 8034d70:	00bfff44 	movi	r2,-3
 8034d74:	1884703a 	and	r2,r3,r2
 8034d78:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8034d7c:	e0bff817 	ldw	r2,-32(fp)
 8034d80:	10800a17 	ldw	r2,40(r2)
 8034d84:	10800304 	addi	r2,r2,12
 8034d88:	1007883a 	mov	r3,r2
 8034d8c:	e0bffb17 	ldw	r2,-20(fp)
 8034d90:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 8034d94:	e0bffa17 	ldw	r2,-24(fp)
 8034d98:	10002d26 	beq	r2,zero,8034e50 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 8034d9c:	e0bff817 	ldw	r2,-32(fp)
 8034da0:	10800a17 	ldw	r2,40(r2)
 8034da4:	10800104 	addi	r2,r2,4
 8034da8:	1007883a 	mov	r3,r2
 8034dac:	e0bffa17 	ldw	r2,-24(fp)
 8034db0:	10800104 	addi	r2,r2,4
 8034db4:	10800017 	ldw	r2,0(r2)
 8034db8:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 8034dbc:	e0bff817 	ldw	r2,-32(fp)
 8034dc0:	10800a17 	ldw	r2,40(r2)
 8034dc4:	1007883a 	mov	r3,r2
 8034dc8:	e0bffa17 	ldw	r2,-24(fp)
 8034dcc:	10800017 	ldw	r2,0(r2)
 8034dd0:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8034dd4:	e0bff817 	ldw	r2,-32(fp)
 8034dd8:	10800a17 	ldw	r2,40(r2)
 8034ddc:	10800204 	addi	r2,r2,8
 8034de0:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8034de4:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8034de8:	1005d07a 	srai	r2,r2,1
 8034dec:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 8034df0:	e0bff817 	ldw	r2,-32(fp)
 8034df4:	10800d17 	ldw	r2,52(r2)
 8034df8:	10001126 	beq	r2,zero,8034e40 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8034dfc:	0005303a 	rdctl	r2,status
 8034e00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8034e04:	e0fffd17 	ldw	r3,-12(fp)
 8034e08:	00bfff84 	movi	r2,-2
 8034e0c:	1884703a 	and	r2,r3,r2
 8034e10:	1001703a 	wrctl	status,r2
  
  return context;
 8034e14:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 8034e18:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 8034e1c:	e0bff817 	ldw	r2,-32(fp)
 8034e20:	10800d17 	ldw	r2,52(r2)
 8034e24:	e17ff917 	ldw	r5,-28(fp)
 8034e28:	e13ffa17 	ldw	r4,-24(fp)
 8034e2c:	103ee83a 	callr	r2
 8034e30:	e0bffc17 	ldw	r2,-16(fp)
 8034e34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8034e38:	e0bffe17 	ldw	r2,-8(fp)
 8034e3c:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8034e40:	e0bff817 	ldw	r2,-32(fp)
 8034e44:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 8034e48:	e0bff817 	ldw	r2,-32(fp)
 8034e4c:	10001105 	stb	zero,68(r2)
    }
}
 8034e50:	0001883a 	nop
 8034e54:	e037883a 	mov	sp,fp
 8034e58:	dfc00117 	ldw	ra,4(sp)
 8034e5c:	df000017 	ldw	fp,0(sp)
 8034e60:	dec00204 	addi	sp,sp,8
 8034e64:	f800283a 	ret

08034e68 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 8034e68:	defff704 	addi	sp,sp,-36
 8034e6c:	dfc00815 	stw	ra,32(sp)
 8034e70:	df000715 	stw	fp,28(sp)
 8034e74:	df000704 	addi	fp,sp,28
 8034e78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8034e7c:	e0bfff17 	ldw	r2,-4(fp)
 8034e80:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8034e84:	e0bff917 	ldw	r2,-28(fp)
 8034e88:	10800a17 	ldw	r2,40(r2)
 8034e8c:	10800104 	addi	r2,r2,4
 8034e90:	10800037 	ldwio	r2,0(r2)
 8034e94:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8034e98:	e0bff917 	ldw	r2,-28(fp)
 8034e9c:	10800a17 	ldw	r2,40(r2)
 8034ea0:	10800037 	ldwio	r2,0(r2)
 8034ea4:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 8034ea8:	e0bff917 	ldw	r2,-28(fp)
 8034eac:	10800e17 	ldw	r2,56(r2)
 8034eb0:	10001126 	beq	r2,zero,8034ef8 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8034eb4:	0005303a 	rdctl	r2,status
 8034eb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8034ebc:	e0fffb17 	ldw	r3,-20(fp)
 8034ec0:	00bfff84 	movi	r2,-2
 8034ec4:	1884703a 	and	r2,r3,r2
 8034ec8:	1001703a 	wrctl	status,r2
  
  return context;
 8034ecc:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8034ed0:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 8034ed4:	e0bff917 	ldw	r2,-28(fp)
 8034ed8:	10800e17 	ldw	r2,56(r2)
 8034edc:	e0fffd04 	addi	r3,fp,-12
 8034ee0:	1809883a 	mov	r4,r3
 8034ee4:	103ee83a 	callr	r2
 8034ee8:	e0bffa17 	ldw	r2,-24(fp)
 8034eec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8034ef0:	e0bffc17 	ldw	r2,-16(fp)
 8034ef4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 8034ef8:	0001883a 	nop
 8034efc:	e037883a 	mov	sp,fp
 8034f00:	dfc00117 	ldw	ra,4(sp)
 8034f04:	df000017 	ldw	fp,0(sp)
 8034f08:	dec00204 	addi	sp,sp,8
 8034f0c:	f800283a 	ret

08034f10 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 8034f10:	defffb04 	addi	sp,sp,-20
 8034f14:	dfc00415 	stw	ra,16(sp)
 8034f18:	df000315 	stw	fp,12(sp)
 8034f1c:	df000304 	addi	fp,sp,12
 8034f20:	e13ffd15 	stw	r4,-12(fp)
 8034f24:	e17ffe15 	stw	r5,-8(fp)
 8034f28:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 8034f2c:	d1600e04 	addi	r5,gp,-32712
 8034f30:	e13ffd17 	ldw	r4,-12(fp)
 8034f34:	80363d00 	call	80363d0 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 8034f38:	e0ffff17 	ldw	r3,-4(fp)
 8034f3c:	e0bffd17 	ldw	r2,-12(fp)
 8034f40:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 8034f44:	e0fffe17 	ldw	r3,-8(fp)
 8034f48:	e0bffd17 	ldw	r2,-12(fp)
 8034f4c:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 8034f50:	e0bffd17 	ldw	r2,-12(fp)
 8034f54:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 8034f58:	e0bffd17 	ldw	r2,-12(fp)
 8034f5c:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 8034f60:	e0bffd17 	ldw	r2,-12(fp)
 8034f64:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 8034f68:	e13ffd17 	ldw	r4,-12(fp)
 8034f6c:	8034c280 	call	8034c28 <altera_avalon_mailbox_identify>
}
 8034f70:	0001883a 	nop
 8034f74:	e037883a 	mov	sp,fp
 8034f78:	dfc00117 	ldw	ra,4(sp)
 8034f7c:	df000017 	ldw	fp,0(sp)
 8034f80:	dec00204 	addi	sp,sp,8
 8034f84:	f800283a 	ret

08034f88 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 8034f88:	defff804 	addi	sp,sp,-32
 8034f8c:	dfc00715 	stw	ra,28(sp)
 8034f90:	df000615 	stw	fp,24(sp)
 8034f94:	df000604 	addi	fp,sp,24
 8034f98:	e13ffd15 	stw	r4,-12(fp)
 8034f9c:	e17ffe15 	stw	r5,-8(fp)
 8034fa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 8034fa4:	d1600e04 	addi	r5,gp,-32712
 8034fa8:	e13ffd17 	ldw	r4,-12(fp)
 8034fac:	80365340 	call	8036534 <alt_find_dev>
 8034fb0:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 8034fb4:	e0bffb17 	ldw	r2,-20(fp)
 8034fb8:	1000021e 	bne	r2,zero,8034fc4 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 8034fbc:	0005883a 	mov	r2,zero
 8034fc0:	00006506 	br	8035158 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8034fc4:	e0bffb17 	ldw	r2,-20(fp)
 8034fc8:	10800a17 	ldw	r2,40(r2)
 8034fcc:	10800304 	addi	r2,r2,12
 8034fd0:	10800037 	ldwio	r2,0(r2)
 8034fd4:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 8034fd8:	e0bffb17 	ldw	r2,-20(fp)
 8034fdc:	10800f17 	ldw	r2,60(r2)
 8034fe0:	1000081e 	bne	r2,zero,8035004 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8034fe4:	e0bffb17 	ldw	r2,-20(fp)
 8034fe8:	10800a17 	ldw	r2,40(r2)
 8034fec:	10800304 	addi	r2,r2,12
 8034ff0:	1009883a 	mov	r4,r2
 8034ff4:	e0fffc17 	ldw	r3,-16(fp)
 8034ff8:	00bfff44 	movi	r2,-3
 8034ffc:	1884703a 	and	r2,r3,r2
 8035000:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 8035004:	e0bffb17 	ldw	r2,-20(fp)
 8035008:	10800f17 	ldw	r2,60(r2)
 803500c:	10800058 	cmpnei	r2,r2,1
 8035010:	1000081e 	bne	r2,zero,8035034 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8035014:	e0bffb17 	ldw	r2,-20(fp)
 8035018:	10800a17 	ldw	r2,40(r2)
 803501c:	10800304 	addi	r2,r2,12
 8035020:	1009883a 	mov	r4,r2
 8035024:	e0fffc17 	ldw	r3,-16(fp)
 8035028:	00bfff84 	movi	r2,-2
 803502c:	1884703a 	and	r2,r3,r2
 8035030:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 8035034:	e0bffb17 	ldw	r2,-20(fp)
 8035038:	10800b17 	ldw	r2,44(r2)
 803503c:	10bfffd8 	cmpnei	r2,r2,-1
 8035040:	1000021e 	bne	r2,zero,803504c <altera_avalon_mailbox_open+0xc4>
        return dev;
 8035044:	e0bffb17 	ldw	r2,-20(fp)
 8035048:	00004306 	br	8035158 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 803504c:	e0bffe17 	ldw	r2,-8(fp)
 8035050:	1000041e 	bne	r2,zero,8035064 <altera_avalon_mailbox_open+0xdc>
 8035054:	e0bfff17 	ldw	r2,-4(fp)
 8035058:	1000021e 	bne	r2,zero,8035064 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 803505c:	e0bffb17 	ldw	r2,-20(fp)
 8035060:	00003d06 	br	8035158 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8035064:	e0bffb17 	ldw	r2,-20(fp)
 8035068:	10800f17 	ldw	r2,60(r2)
 803506c:	1000021e 	bne	r2,zero,8035078 <altera_avalon_mailbox_open+0xf0>
 8035070:	e0bfff17 	ldw	r2,-4(fp)
 8035074:	1000061e 	bne	r2,zero,8035090 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8035078:	e0bffb17 	ldw	r2,-20(fp)
 803507c:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8035080:	10800058 	cmpnei	r2,r2,1
 8035084:	1000041e 	bne	r2,zero,8035098 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8035088:	e0bffe17 	ldw	r2,-8(fp)
 803508c:	10000226 	beq	r2,zero,8035098 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 8035090:	0005883a 	mov	r2,zero
 8035094:	00003006 	br	8035158 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 8035098:	e0bffb17 	ldw	r2,-20(fp)
 803509c:	e0fffe17 	ldw	r3,-8(fp)
 80350a0:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 80350a4:	e0bffb17 	ldw	r2,-20(fp)
 80350a8:	e0ffff17 	ldw	r3,-4(fp)
 80350ac:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 80350b0:	e0bffb17 	ldw	r2,-20(fp)
 80350b4:	10800f17 	ldw	r2,60(r2)
 80350b8:	10000b1e 	bne	r2,zero,80350e8 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 80350bc:	e0bffb17 	ldw	r2,-20(fp)
 80350c0:	10c00c17 	ldw	r3,48(r2)
 80350c4:	e0bffb17 	ldw	r2,-20(fp)
 80350c8:	10800b17 	ldw	r2,44(r2)
 80350cc:	d8000015 	stw	zero,0(sp)
 80350d0:	e1fffb17 	ldw	r7,-20(fp)
 80350d4:	018200f4 	movhi	r6,2051
 80350d8:	31934c04 	addi	r6,r6,19760
 80350dc:	100b883a 	mov	r5,r2
 80350e0:	1809883a 	mov	r4,r3
 80350e4:	80365f80 	call	80365f8 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 80350e8:	e0bffb17 	ldw	r2,-20(fp)
 80350ec:	10800f17 	ldw	r2,60(r2)
 80350f0:	10800058 	cmpnei	r2,r2,1
 80350f4:	1000171e 	bne	r2,zero,8035154 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 80350f8:	e0bffb17 	ldw	r2,-20(fp)
 80350fc:	10c00c17 	ldw	r3,48(r2)
 8035100:	e0bffb17 	ldw	r2,-20(fp)
 8035104:	10800b17 	ldw	r2,44(r2)
 8035108:	d8000015 	stw	zero,0(sp)
 803510c:	e1fffb17 	ldw	r7,-20(fp)
 8035110:	018200f4 	movhi	r6,2051
 8035114:	31939a04 	addi	r6,r6,20072
 8035118:	100b883a 	mov	r5,r2
 803511c:	1809883a 	mov	r4,r3
 8035120:	80365f80 	call	80365f8 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8035124:	e0bffb17 	ldw	r2,-20(fp)
 8035128:	10800a17 	ldw	r2,40(r2)
 803512c:	10800304 	addi	r2,r2,12
 8035130:	10800037 	ldwio	r2,0(r2)
 8035134:	10800054 	ori	r2,r2,1
 8035138:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 803513c:	e0bffb17 	ldw	r2,-20(fp)
 8035140:	10800a17 	ldw	r2,40(r2)
 8035144:	10800304 	addi	r2,r2,12
 8035148:	1007883a 	mov	r3,r2
 803514c:	e0bffc17 	ldw	r2,-16(fp)
 8035150:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 8035154:	e0bffb17 	ldw	r2,-20(fp)
}
 8035158:	e037883a 	mov	sp,fp
 803515c:	dfc00117 	ldw	ra,4(sp)
 8035160:	df000017 	ldw	fp,0(sp)
 8035164:	dec00204 	addi	sp,sp,8
 8035168:	f800283a 	ret

0803516c <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 803516c:	defffb04 	addi	sp,sp,-20
 8035170:	dfc00415 	stw	ra,16(sp)
 8035174:	df000315 	stw	fp,12(sp)
 8035178:	df000304 	addi	fp,sp,12
 803517c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 8035180:	e0bfff17 	ldw	r2,-4(fp)
 8035184:	10003926 	beq	r2,zero,803526c <altera_avalon_mailbox_close+0x100>
 8035188:	e0bfff17 	ldw	r2,-4(fp)
 803518c:	10800b17 	ldw	r2,44(r2)
 8035190:	10bfffe0 	cmpeqi	r2,r2,-1
 8035194:	1000351e 	bne	r2,zero,803526c <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 8035198:	e0bfff17 	ldw	r2,-4(fp)
 803519c:	10800f17 	ldw	r2,60(r2)
 80351a0:	10000e1e 	bne	r2,zero,80351dc <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 80351a4:	e0bfff17 	ldw	r2,-4(fp)
 80351a8:	10800a17 	ldw	r2,40(r2)
 80351ac:	10800304 	addi	r2,r2,12
 80351b0:	10800037 	ldwio	r2,0(r2)
 80351b4:	1007883a 	mov	r3,r2
 80351b8:	00bfff44 	movi	r2,-3
 80351bc:	1884703a 	and	r2,r3,r2
 80351c0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 80351c4:	e0bfff17 	ldw	r2,-4(fp)
 80351c8:	10800a17 	ldw	r2,40(r2)
 80351cc:	10800304 	addi	r2,r2,12
 80351d0:	1007883a 	mov	r3,r2
 80351d4:	e0bffe17 	ldw	r2,-8(fp)
 80351d8:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 80351dc:	e0bfff17 	ldw	r2,-4(fp)
 80351e0:	10800f17 	ldw	r2,60(r2)
 80351e4:	10800058 	cmpnei	r2,r2,1
 80351e8:	10000e1e 	bne	r2,zero,8035224 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 80351ec:	e0bfff17 	ldw	r2,-4(fp)
 80351f0:	10800a17 	ldw	r2,40(r2)
 80351f4:	10800304 	addi	r2,r2,12
 80351f8:	10800037 	ldwio	r2,0(r2)
 80351fc:	1007883a 	mov	r3,r2
 8035200:	00bfff84 	movi	r2,-2
 8035204:	1884703a 	and	r2,r3,r2
 8035208:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 803520c:	e0bfff17 	ldw	r2,-4(fp)
 8035210:	10800a17 	ldw	r2,40(r2)
 8035214:	10800304 	addi	r2,r2,12
 8035218:	1007883a 	mov	r3,r2
 803521c:	e0bffe17 	ldw	r2,-8(fp)
 8035220:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 8035224:	e0bfff17 	ldw	r2,-4(fp)
 8035228:	10800b17 	ldw	r2,44(r2)
 803522c:	10bfffe0 	cmpeqi	r2,r2,-1
 8035230:	10000a1e 	bne	r2,zero,803525c <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 8035234:	e0bfff17 	ldw	r2,-4(fp)
 8035238:	10c00c17 	ldw	r3,48(r2)
 803523c:	e0bfff17 	ldw	r2,-4(fp)
 8035240:	10800b17 	ldw	r2,44(r2)
 8035244:	d8000015 	stw	zero,0(sp)
 8035248:	e1ffff17 	ldw	r7,-4(fp)
 803524c:	000d883a 	mov	r6,zero
 8035250:	100b883a 	mov	r5,r2
 8035254:	1809883a 	mov	r4,r3
 8035258:	80365f80 	call	80365f8 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 803525c:	e0bfff17 	ldw	r2,-4(fp)
 8035260:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 8035264:	e0bfff17 	ldw	r2,-4(fp)
 8035268:	10000e15 	stw	zero,56(r2)
    }
}
 803526c:	0001883a 	nop
 8035270:	e037883a 	mov	sp,fp
 8035274:	dfc00117 	ldw	ra,4(sp)
 8035278:	df000017 	ldw	fp,0(sp)
 803527c:	dec00204 	addi	sp,sp,8
 8035280:	f800283a 	ret

08035284 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 8035284:	defffd04 	addi	sp,sp,-12
 8035288:	df000215 	stw	fp,8(sp)
 803528c:	df000204 	addi	fp,sp,8
 8035290:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 8035294:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 8035298:	e0bfff17 	ldw	r2,-4(fp)
 803529c:	10800a17 	ldw	r2,40(r2)
 80352a0:	10800204 	addi	r2,r2,8
 80352a4:	10800037 	ldwio	r2,0(r2)
 80352a8:	108000cc 	andi	r2,r2,3
 80352ac:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 80352b0:	e0bfff17 	ldw	r2,-4(fp)
 80352b4:	10800f17 	ldw	r2,60(r2)
 80352b8:	1000041e 	bne	r2,zero,80352cc <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 80352bc:	e0bffe17 	ldw	r2,-8(fp)
 80352c0:	1080008c 	andi	r2,r2,2
 80352c4:	1004d07a 	srli	r2,r2,1
 80352c8:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 80352cc:	e0bfff17 	ldw	r2,-4(fp)
 80352d0:	10800f17 	ldw	r2,60(r2)
 80352d4:	10800058 	cmpnei	r2,r2,1
 80352d8:	1000031e 	bne	r2,zero,80352e8 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 80352dc:	e0bffe17 	ldw	r2,-8(fp)
 80352e0:	1080004c 	andi	r2,r2,1
 80352e4:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 80352e8:	e0bffe17 	ldw	r2,-8(fp)
}
 80352ec:	e037883a 	mov	sp,fp
 80352f0:	df000017 	ldw	fp,0(sp)
 80352f4:	dec00104 	addi	sp,sp,4
 80352f8:	f800283a 	ret

080352fc <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 80352fc:	defff704 	addi	sp,sp,-36
 8035300:	dfc00815 	stw	ra,32(sp)
 8035304:	df000715 	stw	fp,28(sp)
 8035308:	df000704 	addi	fp,sp,28
 803530c:	e13ffc15 	stw	r4,-16(fp)
 8035310:	e17ffd15 	stw	r5,-12(fp)
 8035314:	e1bffe15 	stw	r6,-8(fp)
 8035318:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 803531c:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8035320:	e0bffc17 	ldw	r2,-16(fp)
 8035324:	10801103 	ldbu	r2,68(r2)
 8035328:	10803fcc 	andi	r2,r2,255
 803532c:	1000061e 	bne	r2,zero,8035348 <altera_avalon_mailbox_send+0x4c>
 8035330:	e0bffc17 	ldw	r2,-16(fp)
 8035334:	10800a17 	ldw	r2,40(r2)
 8035338:	10800204 	addi	r2,r2,8
 803533c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 8035340:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8035344:	10000226 	beq	r2,zero,8035350 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 8035348:	00bfffc4 	movi	r2,-1
 803534c:	00003a06 	br	8035438 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 8035350:	e0bffc17 	ldw	r2,-16(fp)
 8035354:	e0fffd17 	ldw	r3,-12(fp)
 8035358:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 803535c:	e0bffc17 	ldw	r2,-16(fp)
 8035360:	00c00044 	movi	r3,1
 8035364:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 8035368:	e0bffc17 	ldw	r2,-16(fp)
 803536c:	10800b17 	ldw	r2,44(r2)
 8035370:	10bfffe0 	cmpeqi	r2,r2,-1
 8035374:	1000031e 	bne	r2,zero,8035384 <altera_avalon_mailbox_send+0x88>
 8035378:	e0bfff17 	ldw	r2,-4(fp)
 803537c:	10800058 	cmpnei	r2,r2,1
 8035380:	1000201e 	bne	r2,zero,8035404 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 8035384:	e0bffe17 	ldw	r2,-8(fp)
 8035388:	1000061e 	bne	r2,zero,80353a4 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 803538c:	e13ffc17 	ldw	r4,-16(fp)
 8035390:	80352840 	call	8035284 <altera_avalon_mailbox_status>
 8035394:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 8035398:	e0bffb17 	ldw	r2,-20(fp)
 803539c:	103ffb1e 	bne	r2,zero,803538c <_gp+0xffff3c80>
 80353a0:	00000e06 	br	80353dc <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 80353a4:	e13ffc17 	ldw	r4,-16(fp)
 80353a8:	80352840 	call	8035284 <altera_avalon_mailbox_status>
 80353ac:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 80353b0:	e0bffe17 	ldw	r2,-8(fp)
 80353b4:	10bfffc4 	addi	r2,r2,-1
 80353b8:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 80353bc:	e0bffb17 	ldw	r2,-20(fp)
 80353c0:	10000226 	beq	r2,zero,80353cc <altera_avalon_mailbox_send+0xd0>
 80353c4:	e0bffe17 	ldw	r2,-8(fp)
 80353c8:	103ff61e 	bne	r2,zero,80353a4 <_gp+0xffff3c98>
            if (timeout == 0)
 80353cc:	e0bffe17 	ldw	r2,-8(fp)
 80353d0:	1000021e 	bne	r2,zero,80353dc <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 80353d4:	00bff084 	movi	r2,-62
 80353d8:	00001706 	br	8035438 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 80353dc:	e17ffd17 	ldw	r5,-12(fp)
 80353e0:	e13ffc17 	ldw	r4,-16(fp)
 80353e4:	8034cb80 	call	8034cb8 <altera_avalon_mailbox_post>
 80353e8:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 80353ec:	e0bffc17 	ldw	r2,-16(fp)
 80353f0:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 80353f4:	e0bffc17 	ldw	r2,-16(fp)
 80353f8:	10001105 	stb	zero,68(r2)
        return status;
 80353fc:	e0bff917 	ldw	r2,-28(fp)
 8035400:	00000d06 	br	8035438 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8035404:	e0bffc17 	ldw	r2,-16(fp)
 8035408:	10800a17 	ldw	r2,40(r2)
 803540c:	10800304 	addi	r2,r2,12
 8035410:	10800037 	ldwio	r2,0(r2)
 8035414:	10800094 	ori	r2,r2,2
 8035418:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 803541c:	e0bffc17 	ldw	r2,-16(fp)
 8035420:	10800a17 	ldw	r2,40(r2)
 8035424:	10800304 	addi	r2,r2,12
 8035428:	1007883a 	mov	r3,r2
 803542c:	e0bffa17 	ldw	r2,-24(fp)
 8035430:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 8035434:	0005883a 	mov	r2,zero
}
 8035438:	e037883a 	mov	sp,fp
 803543c:	dfc00117 	ldw	ra,4(sp)
 8035440:	df000017 	ldw	fp,0(sp)
 8035444:	dec00204 	addi	sp,sp,8
 8035448:	f800283a 	ret

0803544c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 803544c:	defff904 	addi	sp,sp,-28
 8035450:	dfc00615 	stw	ra,24(sp)
 8035454:	df000515 	stw	fp,20(sp)
 8035458:	df000504 	addi	fp,sp,20
 803545c:	e13ffd15 	stw	r4,-12(fp)
 8035460:	e17ffe15 	stw	r5,-8(fp)
 8035464:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 8035468:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 803546c:	e0bffd17 	ldw	r2,-12(fp)
 8035470:	10003a26 	beq	r2,zero,803555c <altera_avalon_mailbox_retrieve_poll+0x110>
 8035474:	e0bffe17 	ldw	r2,-8(fp)
 8035478:	10003826 	beq	r2,zero,803555c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 803547c:	e0bffd17 	ldw	r2,-12(fp)
 8035480:	10800a17 	ldw	r2,40(r2)
 8035484:	10800304 	addi	r2,r2,12
 8035488:	10800037 	ldwio	r2,0(r2)
 803548c:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 8035490:	e0bffd17 	ldw	r2,-12(fp)
 8035494:	10800a17 	ldw	r2,40(r2)
 8035498:	10800304 	addi	r2,r2,12
 803549c:	1009883a 	mov	r4,r2
 80354a0:	e0fffc17 	ldw	r3,-16(fp)
 80354a4:	00bfff84 	movi	r2,-2
 80354a8:	1884703a 	and	r2,r3,r2
 80354ac:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 80354b0:	e0bfff17 	ldw	r2,-4(fp)
 80354b4:	1000061e 	bne	r2,zero,80354d0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 80354b8:	e13ffd17 	ldw	r4,-12(fp)
 80354bc:	80352840 	call	8035284 <altera_avalon_mailbox_status>
 80354c0:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 80354c4:	e0bffb17 	ldw	r2,-20(fp)
 80354c8:	103ffb26 	beq	r2,zero,80354b8 <_gp+0xffff3dac>
 80354cc:	00000a06 	br	80354f8 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 80354d0:	e13ffd17 	ldw	r4,-12(fp)
 80354d4:	80352840 	call	8035284 <altera_avalon_mailbox_status>
 80354d8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 80354dc:	e0bfff17 	ldw	r2,-4(fp)
 80354e0:	10bfffc4 	addi	r2,r2,-1
 80354e4:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 80354e8:	e0bffb17 	ldw	r2,-20(fp)
 80354ec:	1000021e 	bne	r2,zero,80354f8 <altera_avalon_mailbox_retrieve_poll+0xac>
 80354f0:	e0bfff17 	ldw	r2,-4(fp)
 80354f4:	103ff61e 	bne	r2,zero,80354d0 <_gp+0xffff3dc4>
        }

        /* if timeout, status remain 0 */
        if (status)
 80354f8:	e0bffb17 	ldw	r2,-20(fp)
 80354fc:	10000d26 	beq	r2,zero,8035534 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8035500:	e0bffe17 	ldw	r2,-8(fp)
 8035504:	10800104 	addi	r2,r2,4
 8035508:	e0fffd17 	ldw	r3,-12(fp)
 803550c:	18c00a17 	ldw	r3,40(r3)
 8035510:	18c00104 	addi	r3,r3,4
 8035514:	18c00037 	ldwio	r3,0(r3)
 8035518:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 803551c:	e0bffd17 	ldw	r2,-12(fp)
 8035520:	10800a17 	ldw	r2,40(r2)
 8035524:	10800037 	ldwio	r2,0(r2)
 8035528:	1007883a 	mov	r3,r2
 803552c:	e0bffe17 	ldw	r2,-8(fp)
 8035530:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8035534:	e0bffd17 	ldw	r2,-12(fp)
 8035538:	10800a17 	ldw	r2,40(r2)
 803553c:	10800304 	addi	r2,r2,12
 8035540:	1007883a 	mov	r3,r2
 8035544:	e0bffc17 	ldw	r2,-16(fp)
 8035548:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 803554c:	e0bffb17 	ldw	r2,-20(fp)
 8035550:	10000226 	beq	r2,zero,803555c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 8035554:	0005883a 	mov	r2,zero
 8035558:	00000606 	br	8035574 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 803555c:	e0bffe17 	ldw	r2,-8(fp)
 8035560:	10800104 	addi	r2,r2,4
 8035564:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 8035568:	e0bffe17 	ldw	r2,-8(fp)
 803556c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 8035570:	00bffa84 	movi	r2,-22
}
 8035574:	e037883a 	mov	sp,fp
 8035578:	dfc00117 	ldw	ra,4(sp)
 803557c:	df000017 	ldw	fp,0(sp)
 8035580:	dec00204 	addi	sp,sp,8
 8035584:	f800283a 	ret

08035588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8035588:	defffe04 	addi	sp,sp,-8
 803558c:	dfc00115 	stw	ra,4(sp)
 8035590:	df000015 	stw	fp,0(sp)
 8035594:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8035598:	d0a00c17 	ldw	r2,-32720(gp)
 803559c:	10000326 	beq	r2,zero,80355ac <alt_get_errno+0x24>
 80355a0:	d0a00c17 	ldw	r2,-32720(gp)
 80355a4:	103ee83a 	callr	r2
 80355a8:	00000106 	br	80355b0 <alt_get_errno+0x28>
 80355ac:	d0a73404 	addi	r2,gp,-25392
}
 80355b0:	e037883a 	mov	sp,fp
 80355b4:	dfc00117 	ldw	ra,4(sp)
 80355b8:	df000017 	ldw	fp,0(sp)
 80355bc:	dec00204 	addi	sp,sp,8
 80355c0:	f800283a 	ret

080355c4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 80355c4:	defff904 	addi	sp,sp,-28
 80355c8:	df000615 	stw	fp,24(sp)
 80355cc:	df000604 	addi	fp,sp,24
 80355d0:	e13ffe15 	stw	r4,-8(fp)
 80355d4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 80355d8:	00bfffc4 	movi	r2,-1
 80355dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 80355e0:	0005317a 	rdctl	r2,cpuid
 80355e4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 80355e8:	e0bffb17 	ldw	r2,-20(fp)
 80355ec:	1006943a 	slli	r3,r2,16
 80355f0:	e0bfff17 	ldw	r2,-4(fp)
 80355f4:	1884b03a 	or	r2,r3,r2
 80355f8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 80355fc:	e0bffe17 	ldw	r2,-8(fp)
 8035600:	10800317 	ldw	r2,12(r2)
 8035604:	e0fffc17 	ldw	r3,-16(fp)
 8035608:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 803560c:	e0bffe17 	ldw	r2,-8(fp)
 8035610:	10800317 	ldw	r2,12(r2)
 8035614:	10800037 	ldwio	r2,0(r2)
 8035618:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 803561c:	e0fffd17 	ldw	r3,-12(fp)
 8035620:	e0bffc17 	ldw	r2,-16(fp)
 8035624:	1880011e 	bne	r3,r2,803562c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 8035628:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 803562c:	e0bffa17 	ldw	r2,-24(fp)
}
 8035630:	e037883a 	mov	sp,fp
 8035634:	df000017 	ldw	fp,0(sp)
 8035638:	dec00104 	addi	sp,sp,4
 803563c:	f800283a 	ret

08035640 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 8035640:	defffc04 	addi	sp,sp,-16
 8035644:	dfc00315 	stw	ra,12(sp)
 8035648:	df000215 	stw	fp,8(sp)
 803564c:	df000204 	addi	fp,sp,8
 8035650:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8035654:	d1601004 	addi	r5,gp,-32704
 8035658:	e13fff17 	ldw	r4,-4(fp)
 803565c:	80365340 	call	8036534 <alt_find_dev>
 8035660:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 8035664:	e0bffe17 	ldw	r2,-8(fp)
 8035668:	1000041e 	bne	r2,zero,803567c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 803566c:	80355880 	call	8035588 <alt_get_errno>
 8035670:	1007883a 	mov	r3,r2
 8035674:	008004c4 	movi	r2,19
 8035678:	18800015 	stw	r2,0(r3)
  }

  return dev;
 803567c:	e0bffe17 	ldw	r2,-8(fp)
}
 8035680:	e037883a 	mov	sp,fp
 8035684:	dfc00117 	ldw	ra,4(sp)
 8035688:	df000017 	ldw	fp,0(sp)
 803568c:	dec00204 	addi	sp,sp,8
 8035690:	f800283a 	ret

08035694 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8035694:	defffe04 	addi	sp,sp,-8
 8035698:	df000115 	stw	fp,4(sp)
 803569c:	df000104 	addi	fp,sp,4
 80356a0:	e13fff15 	stw	r4,-4(fp)
  return;
 80356a4:	0001883a 	nop
}
 80356a8:	e037883a 	mov	sp,fp
 80356ac:	df000017 	ldw	fp,0(sp)
 80356b0:	dec00104 	addi	sp,sp,4
 80356b4:	f800283a 	ret

080356b8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 80356b8:	defffc04 	addi	sp,sp,-16
 80356bc:	dfc00315 	stw	ra,12(sp)
 80356c0:	df000215 	stw	fp,8(sp)
 80356c4:	df000204 	addi	fp,sp,8
 80356c8:	e13ffe15 	stw	r4,-8(fp)
 80356cc:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 80356d0:	0001883a 	nop
 80356d4:	e17fff17 	ldw	r5,-4(fp)
 80356d8:	e13ffe17 	ldw	r4,-8(fp)
 80356dc:	80355c40 	call	80355c4 <alt_mutex_trylock>
 80356e0:	103ffc1e 	bne	r2,zero,80356d4 <_gp+0xffff3fc8>
}
 80356e4:	0001883a 	nop
 80356e8:	e037883a 	mov	sp,fp
 80356ec:	dfc00117 	ldw	ra,4(sp)
 80356f0:	df000017 	ldw	fp,0(sp)
 80356f4:	dec00204 	addi	sp,sp,8
 80356f8:	f800283a 	ret

080356fc <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 80356fc:	defffa04 	addi	sp,sp,-24
 8035700:	dfc00515 	stw	ra,20(sp)
 8035704:	df000415 	stw	fp,16(sp)
 8035708:	df000404 	addi	fp,sp,16
 803570c:	e13ffd15 	stw	r4,-12(fp)
 8035710:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 8035714:	e17ffe17 	ldw	r5,-8(fp)
 8035718:	e13ffd17 	ldw	r4,-12(fp)
 803571c:	80355c40 	call	80355c4 <alt_mutex_trylock>
 8035720:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 8035724:	e0bffc17 	ldw	r2,-16(fp)
}
 8035728:	e037883a 	mov	sp,fp
 803572c:	dfc00117 	ldw	ra,4(sp)
 8035730:	df000017 	ldw	fp,0(sp)
 8035734:	dec00204 	addi	sp,sp,8
 8035738:	f800283a 	ret

0803573c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 803573c:	defffd04 	addi	sp,sp,-12
 8035740:	df000215 	stw	fp,8(sp)
 8035744:	df000204 	addi	fp,sp,8
 8035748:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 803574c:	0005317a 	rdctl	r2,cpuid
 8035750:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8035754:	e0bfff17 	ldw	r2,-4(fp)
 8035758:	10800317 	ldw	r2,12(r2)
 803575c:	10800104 	addi	r2,r2,4
 8035760:	00c00044 	movi	r3,1
 8035764:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 8035768:	e0bfff17 	ldw	r2,-4(fp)
 803576c:	10800317 	ldw	r2,12(r2)
 8035770:	e0fffe17 	ldw	r3,-8(fp)
 8035774:	1806943a 	slli	r3,r3,16
 8035778:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 803577c:	0001883a 	nop
 8035780:	e037883a 	mov	sp,fp
 8035784:	df000017 	ldw	fp,0(sp)
 8035788:	dec00104 	addi	sp,sp,4
 803578c:	f800283a 	ret

08035790 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8035790:	defff904 	addi	sp,sp,-28
 8035794:	df000615 	stw	fp,24(sp)
 8035798:	df000604 	addi	fp,sp,24
 803579c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 80357a0:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 80357a4:	0005317a 	rdctl	r2,cpuid
 80357a8:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 80357ac:	e0bfff17 	ldw	r2,-4(fp)
 80357b0:	10800317 	ldw	r2,12(r2)
 80357b4:	10800037 	ldwio	r2,0(r2)
 80357b8:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 80357bc:	e0bffc17 	ldw	r2,-16(fp)
 80357c0:	1004d43a 	srli	r2,r2,16
 80357c4:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 80357c8:	e0fffd17 	ldw	r3,-12(fp)
 80357cc:	e0bffb17 	ldw	r2,-20(fp)
 80357d0:	1880071e 	bne	r3,r2,80357f0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 80357d4:	e0bffc17 	ldw	r2,-16(fp)
 80357d8:	10bfffcc 	andi	r2,r2,65535
 80357dc:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 80357e0:	e0bffe17 	ldw	r2,-8(fp)
 80357e4:	10000226 	beq	r2,zero,80357f0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 80357e8:	00800044 	movi	r2,1
 80357ec:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 80357f0:	e0bffa17 	ldw	r2,-24(fp)
}
 80357f4:	e037883a 	mov	sp,fp
 80357f8:	df000017 	ldw	fp,0(sp)
 80357fc:	dec00104 	addi	sp,sp,4
 8035800:	f800283a 	ret

08035804 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 8035804:	defffc04 	addi	sp,sp,-16
 8035808:	df000315 	stw	fp,12(sp)
 803580c:	df000304 	addi	fp,sp,12
 8035810:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 8035814:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 8035818:	e0bfff17 	ldw	r2,-4(fp)
 803581c:	10800317 	ldw	r2,12(r2)
 8035820:	10800104 	addi	r2,r2,4
 8035824:	10800037 	ldwio	r2,0(r2)
 8035828:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 803582c:	e0bffe17 	ldw	r2,-8(fp)
 8035830:	1080004c 	andi	r2,r2,1
 8035834:	10000226 	beq	r2,zero,8035840 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 8035838:	00800044 	movi	r2,1
 803583c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 8035840:	e0bffd17 	ldw	r2,-12(fp)
}
 8035844:	e037883a 	mov	sp,fp
 8035848:	df000017 	ldw	fp,0(sp)
 803584c:	dec00104 	addi	sp,sp,4
 8035850:	f800283a 	ret

08035854 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8035854:	defffa04 	addi	sp,sp,-24
 8035858:	dfc00515 	stw	ra,20(sp)
 803585c:	df000415 	stw	fp,16(sp)
 8035860:	df000404 	addi	fp,sp,16
 8035864:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8035868:	0007883a 	mov	r3,zero
 803586c:	e0bfff17 	ldw	r2,-4(fp)
 8035870:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8035874:	e0bfff17 	ldw	r2,-4(fp)
 8035878:	10800104 	addi	r2,r2,4
 803587c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8035880:	0005303a 	rdctl	r2,status
 8035884:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8035888:	e0fffd17 	ldw	r3,-12(fp)
 803588c:	00bfff84 	movi	r2,-2
 8035890:	1884703a 	and	r2,r3,r2
 8035894:	1001703a 	wrctl	status,r2
  
  return context;
 8035898:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 803589c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80358a0:	8036cc80 	call	8036cc8 <alt_tick>
 80358a4:	e0bffc17 	ldw	r2,-16(fp)
 80358a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80358ac:	e0bffe17 	ldw	r2,-8(fp)
 80358b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80358b4:	0001883a 	nop
 80358b8:	e037883a 	mov	sp,fp
 80358bc:	dfc00117 	ldw	ra,4(sp)
 80358c0:	df000017 	ldw	fp,0(sp)
 80358c4:	dec00204 	addi	sp,sp,8
 80358c8:	f800283a 	ret

080358cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80358cc:	defff804 	addi	sp,sp,-32
 80358d0:	dfc00715 	stw	ra,28(sp)
 80358d4:	df000615 	stw	fp,24(sp)
 80358d8:	df000604 	addi	fp,sp,24
 80358dc:	e13ffc15 	stw	r4,-16(fp)
 80358e0:	e17ffd15 	stw	r5,-12(fp)
 80358e4:	e1bffe15 	stw	r6,-8(fp)
 80358e8:	e1ffff15 	stw	r7,-4(fp)
 80358ec:	e0bfff17 	ldw	r2,-4(fp)
 80358f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80358f4:	d0a73c17 	ldw	r2,-25360(gp)
 80358f8:	1000021e 	bne	r2,zero,8035904 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80358fc:	e0bffb17 	ldw	r2,-20(fp)
 8035900:	d0a73c15 	stw	r2,-25360(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8035904:	e0bffc17 	ldw	r2,-16(fp)
 8035908:	10800104 	addi	r2,r2,4
 803590c:	00c001c4 	movi	r3,7
 8035910:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8035914:	d8000015 	stw	zero,0(sp)
 8035918:	e1fffc17 	ldw	r7,-16(fp)
 803591c:	018200f4 	movhi	r6,2051
 8035920:	31961504 	addi	r6,r6,22612
 8035924:	e17ffe17 	ldw	r5,-8(fp)
 8035928:	e13ffd17 	ldw	r4,-12(fp)
 803592c:	80365f80 	call	80365f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8035930:	0001883a 	nop
 8035934:	e037883a 	mov	sp,fp
 8035938:	dfc00117 	ldw	ra,4(sp)
 803593c:	df000017 	ldw	fp,0(sp)
 8035940:	dec00204 	addi	sp,sp,8
 8035944:	f800283a 	ret

08035948 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8035948:	defffa04 	addi	sp,sp,-24
 803594c:	dfc00515 	stw	ra,20(sp)
 8035950:	df000415 	stw	fp,16(sp)
 8035954:	df000404 	addi	fp,sp,16
 8035958:	e13ffd15 	stw	r4,-12(fp)
 803595c:	e17ffe15 	stw	r5,-8(fp)
 8035960:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8035964:	e0bffd17 	ldw	r2,-12(fp)
 8035968:	10800017 	ldw	r2,0(r2)
 803596c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 8035970:	e0bffc17 	ldw	r2,-16(fp)
 8035974:	10c00a04 	addi	r3,r2,40
 8035978:	e0bffd17 	ldw	r2,-12(fp)
 803597c:	10800217 	ldw	r2,8(r2)
 8035980:	100f883a 	mov	r7,r2
 8035984:	e1bfff17 	ldw	r6,-4(fp)
 8035988:	e17ffe17 	ldw	r5,-8(fp)
 803598c:	1809883a 	mov	r4,r3
 8035990:	8035e5c0 	call	8035e5c <altera_avalon_uart_read>
      fd->fd_flags);
}
 8035994:	e037883a 	mov	sp,fp
 8035998:	dfc00117 	ldw	ra,4(sp)
 803599c:	df000017 	ldw	fp,0(sp)
 80359a0:	dec00204 	addi	sp,sp,8
 80359a4:	f800283a 	ret

080359a8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80359a8:	defffa04 	addi	sp,sp,-24
 80359ac:	dfc00515 	stw	ra,20(sp)
 80359b0:	df000415 	stw	fp,16(sp)
 80359b4:	df000404 	addi	fp,sp,16
 80359b8:	e13ffd15 	stw	r4,-12(fp)
 80359bc:	e17ffe15 	stw	r5,-8(fp)
 80359c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 80359c4:	e0bffd17 	ldw	r2,-12(fp)
 80359c8:	10800017 	ldw	r2,0(r2)
 80359cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 80359d0:	e0bffc17 	ldw	r2,-16(fp)
 80359d4:	10c00a04 	addi	r3,r2,40
 80359d8:	e0bffd17 	ldw	r2,-12(fp)
 80359dc:	10800217 	ldw	r2,8(r2)
 80359e0:	100f883a 	mov	r7,r2
 80359e4:	e1bfff17 	ldw	r6,-4(fp)
 80359e8:	e17ffe17 	ldw	r5,-8(fp)
 80359ec:	1809883a 	mov	r4,r3
 80359f0:	80360740 	call	8036074 <altera_avalon_uart_write>
      fd->fd_flags);
}
 80359f4:	e037883a 	mov	sp,fp
 80359f8:	dfc00117 	ldw	ra,4(sp)
 80359fc:	df000017 	ldw	fp,0(sp)
 8035a00:	dec00204 	addi	sp,sp,8
 8035a04:	f800283a 	ret

08035a08 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 8035a08:	defffc04 	addi	sp,sp,-16
 8035a0c:	dfc00315 	stw	ra,12(sp)
 8035a10:	df000215 	stw	fp,8(sp)
 8035a14:	df000204 	addi	fp,sp,8
 8035a18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8035a1c:	e0bfff17 	ldw	r2,-4(fp)
 8035a20:	10800017 	ldw	r2,0(r2)
 8035a24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 8035a28:	e0bffe17 	ldw	r2,-8(fp)
 8035a2c:	10c00a04 	addi	r3,r2,40
 8035a30:	e0bfff17 	ldw	r2,-4(fp)
 8035a34:	10800217 	ldw	r2,8(r2)
 8035a38:	100b883a 	mov	r5,r2
 8035a3c:	1809883a 	mov	r4,r3
 8035a40:	8035dcc0 	call	8035dcc <altera_avalon_uart_close>
}
 8035a44:	e037883a 	mov	sp,fp
 8035a48:	dfc00117 	ldw	ra,4(sp)
 8035a4c:	df000017 	ldw	fp,0(sp)
 8035a50:	dec00204 	addi	sp,sp,8
 8035a54:	f800283a 	ret

08035a58 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 8035a58:	defff804 	addi	sp,sp,-32
 8035a5c:	dfc00715 	stw	ra,28(sp)
 8035a60:	df000615 	stw	fp,24(sp)
 8035a64:	df000604 	addi	fp,sp,24
 8035a68:	e13ffd15 	stw	r4,-12(fp)
 8035a6c:	e17ffe15 	stw	r5,-8(fp)
 8035a70:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 8035a74:	e0bffd17 	ldw	r2,-12(fp)
 8035a78:	10800017 	ldw	r2,0(r2)
 8035a7c:	e0bffb15 	stw	r2,-20(fp)
 8035a80:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8035a84:	1000041e 	bne	r2,zero,8035a98 <altera_avalon_uart_init+0x40>
 8035a88:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8035a8c:	1000021e 	bne	r2,zero,8035a98 <altera_avalon_uart_init+0x40>
 8035a90:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8035a94:	10000226 	beq	r2,zero,8035aa0 <altera_avalon_uart_init+0x48>
 8035a98:	00800044 	movi	r2,1
 8035a9c:	00000106 	br	8035aa4 <altera_avalon_uart_init+0x4c>
 8035aa0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8035aa4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 8035aa8:	e0bffc17 	ldw	r2,-16(fp)
 8035aac:	10000f1e 	bne	r2,zero,8035aec <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 8035ab0:	e0bffd17 	ldw	r2,-12(fp)
 8035ab4:	00c32004 	movi	r3,3200
 8035ab8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 8035abc:	e0bffb17 	ldw	r2,-20(fp)
 8035ac0:	10800304 	addi	r2,r2,12
 8035ac4:	e0fffd17 	ldw	r3,-12(fp)
 8035ac8:	18c00117 	ldw	r3,4(r3)
 8035acc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 8035ad0:	d8000015 	stw	zero,0(sp)
 8035ad4:	e1fffd17 	ldw	r7,-12(fp)
 8035ad8:	018200f4 	movhi	r6,2051
 8035adc:	3196c104 	addi	r6,r6,23300
 8035ae0:	e17fff17 	ldw	r5,-4(fp)
 8035ae4:	e13ffe17 	ldw	r4,-8(fp)
 8035ae8:	80365f80 	call	80365f8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 8035aec:	0001883a 	nop
 8035af0:	e037883a 	mov	sp,fp
 8035af4:	dfc00117 	ldw	ra,4(sp)
 8035af8:	df000017 	ldw	fp,0(sp)
 8035afc:	dec00204 	addi	sp,sp,8
 8035b00:	f800283a 	ret

08035b04 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 8035b04:	defffa04 	addi	sp,sp,-24
 8035b08:	dfc00515 	stw	ra,20(sp)
 8035b0c:	df000415 	stw	fp,16(sp)
 8035b10:	df000404 	addi	fp,sp,16
 8035b14:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 8035b18:	e0bfff17 	ldw	r2,-4(fp)
 8035b1c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 8035b20:	e0bffc17 	ldw	r2,-16(fp)
 8035b24:	10800017 	ldw	r2,0(r2)
 8035b28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 8035b2c:	e0bffd17 	ldw	r2,-12(fp)
 8035b30:	10800204 	addi	r2,r2,8
 8035b34:	10800037 	ldwio	r2,0(r2)
 8035b38:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 8035b3c:	e0bffd17 	ldw	r2,-12(fp)
 8035b40:	10800204 	addi	r2,r2,8
 8035b44:	0007883a 	mov	r3,zero
 8035b48:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 8035b4c:	e0bffd17 	ldw	r2,-12(fp)
 8035b50:	10800204 	addi	r2,r2,8
 8035b54:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 8035b58:	e0bffe17 	ldw	r2,-8(fp)
 8035b5c:	1080200c 	andi	r2,r2,128
 8035b60:	10000326 	beq	r2,zero,8035b70 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 8035b64:	e17ffe17 	ldw	r5,-8(fp)
 8035b68:	e13ffc17 	ldw	r4,-16(fp)
 8035b6c:	8035ba00 	call	8035ba0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 8035b70:	e0bffe17 	ldw	r2,-8(fp)
 8035b74:	1081100c 	andi	r2,r2,1088
 8035b78:	10000326 	beq	r2,zero,8035b88 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 8035b7c:	e17ffe17 	ldw	r5,-8(fp)
 8035b80:	e13ffc17 	ldw	r4,-16(fp)
 8035b84:	8035c840 	call	8035c84 <altera_avalon_uart_txirq>
  }
  

}
 8035b88:	0001883a 	nop
 8035b8c:	e037883a 	mov	sp,fp
 8035b90:	dfc00117 	ldw	ra,4(sp)
 8035b94:	df000017 	ldw	fp,0(sp)
 8035b98:	dec00204 	addi	sp,sp,8
 8035b9c:	f800283a 	ret

08035ba0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8035ba0:	defffc04 	addi	sp,sp,-16
 8035ba4:	df000315 	stw	fp,12(sp)
 8035ba8:	df000304 	addi	fp,sp,12
 8035bac:	e13ffe15 	stw	r4,-8(fp)
 8035bb0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 8035bb4:	e0bfff17 	ldw	r2,-4(fp)
 8035bb8:	108000cc 	andi	r2,r2,3
 8035bbc:	10002c1e 	bne	r2,zero,8035c70 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 8035bc0:	e0bffe17 	ldw	r2,-8(fp)
 8035bc4:	10800317 	ldw	r2,12(r2)
 8035bc8:	e0bffe17 	ldw	r2,-8(fp)
 8035bcc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8035bd0:	e0bffe17 	ldw	r2,-8(fp)
 8035bd4:	10800317 	ldw	r2,12(r2)
 8035bd8:	10800044 	addi	r2,r2,1
 8035bdc:	10800fcc 	andi	r2,r2,63
 8035be0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 8035be4:	e0bffe17 	ldw	r2,-8(fp)
 8035be8:	10800317 	ldw	r2,12(r2)
 8035bec:	e0fffe17 	ldw	r3,-8(fp)
 8035bf0:	18c00017 	ldw	r3,0(r3)
 8035bf4:	18c00037 	ldwio	r3,0(r3)
 8035bf8:	1809883a 	mov	r4,r3
 8035bfc:	e0fffe17 	ldw	r3,-8(fp)
 8035c00:	1885883a 	add	r2,r3,r2
 8035c04:	10800704 	addi	r2,r2,28
 8035c08:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 8035c0c:	e0bffe17 	ldw	r2,-8(fp)
 8035c10:	e0fffd17 	ldw	r3,-12(fp)
 8035c14:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8035c18:	e0bffe17 	ldw	r2,-8(fp)
 8035c1c:	10800317 	ldw	r2,12(r2)
 8035c20:	10800044 	addi	r2,r2,1
 8035c24:	10800fcc 	andi	r2,r2,63
 8035c28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 8035c2c:	e0bffe17 	ldw	r2,-8(fp)
 8035c30:	10c00217 	ldw	r3,8(r2)
 8035c34:	e0bffd17 	ldw	r2,-12(fp)
 8035c38:	18800e1e 	bne	r3,r2,8035c74 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8035c3c:	e0bffe17 	ldw	r2,-8(fp)
 8035c40:	10c00117 	ldw	r3,4(r2)
 8035c44:	00bfdfc4 	movi	r2,-129
 8035c48:	1886703a 	and	r3,r3,r2
 8035c4c:	e0bffe17 	ldw	r2,-8(fp)
 8035c50:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 8035c54:	e0bffe17 	ldw	r2,-8(fp)
 8035c58:	10800017 	ldw	r2,0(r2)
 8035c5c:	10800304 	addi	r2,r2,12
 8035c60:	e0fffe17 	ldw	r3,-8(fp)
 8035c64:	18c00117 	ldw	r3,4(r3)
 8035c68:	10c00035 	stwio	r3,0(r2)
 8035c6c:	00000106 	br	8035c74 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 8035c70:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 8035c74:	e037883a 	mov	sp,fp
 8035c78:	df000017 	ldw	fp,0(sp)
 8035c7c:	dec00104 	addi	sp,sp,4
 8035c80:	f800283a 	ret

08035c84 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8035c84:	defffb04 	addi	sp,sp,-20
 8035c88:	df000415 	stw	fp,16(sp)
 8035c8c:	df000404 	addi	fp,sp,16
 8035c90:	e13ffc15 	stw	r4,-16(fp)
 8035c94:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 8035c98:	e0bffc17 	ldw	r2,-16(fp)
 8035c9c:	10c00417 	ldw	r3,16(r2)
 8035ca0:	e0bffc17 	ldw	r2,-16(fp)
 8035ca4:	10800517 	ldw	r2,20(r2)
 8035ca8:	18803226 	beq	r3,r2,8035d74 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 8035cac:	e0bffc17 	ldw	r2,-16(fp)
 8035cb0:	10800617 	ldw	r2,24(r2)
 8035cb4:	1080008c 	andi	r2,r2,2
 8035cb8:	10000326 	beq	r2,zero,8035cc8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8035cbc:	e0bffd17 	ldw	r2,-12(fp)
 8035cc0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 8035cc4:	10001d26 	beq	r2,zero,8035d3c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 8035cc8:	e0bffc17 	ldw	r2,-16(fp)
 8035ccc:	10800417 	ldw	r2,16(r2)
 8035cd0:	e0bffc17 	ldw	r2,-16(fp)
 8035cd4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 8035cd8:	e0bffc17 	ldw	r2,-16(fp)
 8035cdc:	10800017 	ldw	r2,0(r2)
 8035ce0:	10800104 	addi	r2,r2,4
 8035ce4:	e0fffc17 	ldw	r3,-16(fp)
 8035ce8:	18c00417 	ldw	r3,16(r3)
 8035cec:	e13ffc17 	ldw	r4,-16(fp)
 8035cf0:	20c7883a 	add	r3,r4,r3
 8035cf4:	18c01704 	addi	r3,r3,92
 8035cf8:	18c00003 	ldbu	r3,0(r3)
 8035cfc:	18c03fcc 	andi	r3,r3,255
 8035d00:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 8035d04:	e0bffc17 	ldw	r2,-16(fp)
 8035d08:	10800417 	ldw	r2,16(r2)
 8035d0c:	10800044 	addi	r2,r2,1
 8035d10:	e0fffc17 	ldw	r3,-16(fp)
 8035d14:	18800415 	stw	r2,16(r3)
 8035d18:	10c00fcc 	andi	r3,r2,63
 8035d1c:	e0bffc17 	ldw	r2,-16(fp)
 8035d20:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8035d24:	e0bffc17 	ldw	r2,-16(fp)
 8035d28:	10800117 	ldw	r2,4(r2)
 8035d2c:	10c01014 	ori	r3,r2,64
 8035d30:	e0bffc17 	ldw	r2,-16(fp)
 8035d34:	10c00115 	stw	r3,4(r2)
 8035d38:	00000e06 	br	8035d74 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 8035d3c:	e0bffc17 	ldw	r2,-16(fp)
 8035d40:	10800017 	ldw	r2,0(r2)
 8035d44:	10800204 	addi	r2,r2,8
 8035d48:	10800037 	ldwio	r2,0(r2)
 8035d4c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8035d50:	e0bffd17 	ldw	r2,-12(fp)
 8035d54:	1082000c 	andi	r2,r2,2048
 8035d58:	1000061e 	bne	r2,zero,8035d74 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8035d5c:	e0bffc17 	ldw	r2,-16(fp)
 8035d60:	10c00117 	ldw	r3,4(r2)
 8035d64:	00bfefc4 	movi	r2,-65
 8035d68:	1886703a 	and	r3,r3,r2
 8035d6c:	e0bffc17 	ldw	r2,-16(fp)
 8035d70:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 8035d74:	e0bffc17 	ldw	r2,-16(fp)
 8035d78:	10c00417 	ldw	r3,16(r2)
 8035d7c:	e0bffc17 	ldw	r2,-16(fp)
 8035d80:	10800517 	ldw	r2,20(r2)
 8035d84:	1880061e 	bne	r3,r2,8035da0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8035d88:	e0bffc17 	ldw	r2,-16(fp)
 8035d8c:	10c00117 	ldw	r3,4(r2)
 8035d90:	00beefc4 	movi	r2,-1089
 8035d94:	1886703a 	and	r3,r3,r2
 8035d98:	e0bffc17 	ldw	r2,-16(fp)
 8035d9c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8035da0:	e0bffc17 	ldw	r2,-16(fp)
 8035da4:	10800017 	ldw	r2,0(r2)
 8035da8:	10800304 	addi	r2,r2,12
 8035dac:	e0fffc17 	ldw	r3,-16(fp)
 8035db0:	18c00117 	ldw	r3,4(r3)
 8035db4:	10c00035 	stwio	r3,0(r2)
}
 8035db8:	0001883a 	nop
 8035dbc:	e037883a 	mov	sp,fp
 8035dc0:	df000017 	ldw	fp,0(sp)
 8035dc4:	dec00104 	addi	sp,sp,4
 8035dc8:	f800283a 	ret

08035dcc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 8035dcc:	defffd04 	addi	sp,sp,-12
 8035dd0:	df000215 	stw	fp,8(sp)
 8035dd4:	df000204 	addi	fp,sp,8
 8035dd8:	e13ffe15 	stw	r4,-8(fp)
 8035ddc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8035de0:	00000506 	br	8035df8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8035de4:	e0bfff17 	ldw	r2,-4(fp)
 8035de8:	1090000c 	andi	r2,r2,16384
 8035dec:	10000226 	beq	r2,zero,8035df8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8035df0:	00bffd44 	movi	r2,-11
 8035df4:	00000606 	br	8035e10 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8035df8:	e0bffe17 	ldw	r2,-8(fp)
 8035dfc:	10c00417 	ldw	r3,16(r2)
 8035e00:	e0bffe17 	ldw	r2,-8(fp)
 8035e04:	10800517 	ldw	r2,20(r2)
 8035e08:	18bff61e 	bne	r3,r2,8035de4 <_gp+0xffff46d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8035e0c:	0005883a 	mov	r2,zero
}
 8035e10:	e037883a 	mov	sp,fp
 8035e14:	df000017 	ldw	fp,0(sp)
 8035e18:	dec00104 	addi	sp,sp,4
 8035e1c:	f800283a 	ret

08035e20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8035e20:	defffe04 	addi	sp,sp,-8
 8035e24:	dfc00115 	stw	ra,4(sp)
 8035e28:	df000015 	stw	fp,0(sp)
 8035e2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8035e30:	d0a00c17 	ldw	r2,-32720(gp)
 8035e34:	10000326 	beq	r2,zero,8035e44 <alt_get_errno+0x24>
 8035e38:	d0a00c17 	ldw	r2,-32720(gp)
 8035e3c:	103ee83a 	callr	r2
 8035e40:	00000106 	br	8035e48 <alt_get_errno+0x28>
 8035e44:	d0a73404 	addi	r2,gp,-25392
}
 8035e48:	e037883a 	mov	sp,fp
 8035e4c:	dfc00117 	ldw	ra,4(sp)
 8035e50:	df000017 	ldw	fp,0(sp)
 8035e54:	dec00204 	addi	sp,sp,8
 8035e58:	f800283a 	ret

08035e5c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 8035e5c:	defff204 	addi	sp,sp,-56
 8035e60:	dfc00d15 	stw	ra,52(sp)
 8035e64:	df000c15 	stw	fp,48(sp)
 8035e68:	df000c04 	addi	fp,sp,48
 8035e6c:	e13ffc15 	stw	r4,-16(fp)
 8035e70:	e17ffd15 	stw	r5,-12(fp)
 8035e74:	e1bffe15 	stw	r6,-8(fp)
 8035e78:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 8035e7c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 8035e80:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 8035e84:	e0bfff17 	ldw	r2,-4(fp)
 8035e88:	1090000c 	andi	r2,r2,16384
 8035e8c:	1005003a 	cmpeq	r2,r2,zero
 8035e90:	10803fcc 	andi	r2,r2,255
 8035e94:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8035e98:	00001306 	br	8035ee8 <altera_avalon_uart_read+0x8c>
    {
      count++;
 8035e9c:	e0bff517 	ldw	r2,-44(fp)
 8035ea0:	10800044 	addi	r2,r2,1
 8035ea4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 8035ea8:	e0bffd17 	ldw	r2,-12(fp)
 8035eac:	10c00044 	addi	r3,r2,1
 8035eb0:	e0fffd15 	stw	r3,-12(fp)
 8035eb4:	e0fffc17 	ldw	r3,-16(fp)
 8035eb8:	18c00217 	ldw	r3,8(r3)
 8035ebc:	e13ffc17 	ldw	r4,-16(fp)
 8035ec0:	20c7883a 	add	r3,r4,r3
 8035ec4:	18c00704 	addi	r3,r3,28
 8035ec8:	18c00003 	ldbu	r3,0(r3)
 8035ecc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 8035ed0:	e0bffc17 	ldw	r2,-16(fp)
 8035ed4:	10800217 	ldw	r2,8(r2)
 8035ed8:	10800044 	addi	r2,r2,1
 8035edc:	10c00fcc 	andi	r3,r2,63
 8035ee0:	e0bffc17 	ldw	r2,-16(fp)
 8035ee4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8035ee8:	e0fff517 	ldw	r3,-44(fp)
 8035eec:	e0bffe17 	ldw	r2,-8(fp)
 8035ef0:	1880050e 	bge	r3,r2,8035f08 <altera_avalon_uart_read+0xac>
 8035ef4:	e0bffc17 	ldw	r2,-16(fp)
 8035ef8:	10c00217 	ldw	r3,8(r2)
 8035efc:	e0bffc17 	ldw	r2,-16(fp)
 8035f00:	10800317 	ldw	r2,12(r2)
 8035f04:	18bfe51e 	bne	r3,r2,8035e9c <_gp+0xffff4790>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 8035f08:	e0bff517 	ldw	r2,-44(fp)
 8035f0c:	1000251e 	bne	r2,zero,8035fa4 <altera_avalon_uart_read+0x148>
 8035f10:	e0bffc17 	ldw	r2,-16(fp)
 8035f14:	10c00217 	ldw	r3,8(r2)
 8035f18:	e0bffc17 	ldw	r2,-16(fp)
 8035f1c:	10800317 	ldw	r2,12(r2)
 8035f20:	1880201e 	bne	r3,r2,8035fa4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 8035f24:	e0bff617 	ldw	r2,-40(fp)
 8035f28:	1000071e 	bne	r2,zero,8035f48 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 8035f2c:	8035e200 	call	8035e20 <alt_get_errno>
 8035f30:	1007883a 	mov	r3,r2
 8035f34:	008002c4 	movi	r2,11
 8035f38:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 8035f3c:	00800044 	movi	r2,1
 8035f40:	e0bff405 	stb	r2,-48(fp)
        break;
 8035f44:	00001b06 	br	8035fb4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8035f48:	0005303a 	rdctl	r2,status
 8035f4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8035f50:	e0fff917 	ldw	r3,-28(fp)
 8035f54:	00bfff84 	movi	r2,-2
 8035f58:	1884703a 	and	r2,r3,r2
 8035f5c:	1001703a 	wrctl	status,r2
  
  return context;
 8035f60:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 8035f64:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8035f68:	e0bffc17 	ldw	r2,-16(fp)
 8035f6c:	10800117 	ldw	r2,4(r2)
 8035f70:	10c02014 	ori	r3,r2,128
 8035f74:	e0bffc17 	ldw	r2,-16(fp)
 8035f78:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8035f7c:	e0bffc17 	ldw	r2,-16(fp)
 8035f80:	10800017 	ldw	r2,0(r2)
 8035f84:	10800304 	addi	r2,r2,12
 8035f88:	e0fffc17 	ldw	r3,-16(fp)
 8035f8c:	18c00117 	ldw	r3,4(r3)
 8035f90:	10c00035 	stwio	r3,0(r2)
 8035f94:	e0bff817 	ldw	r2,-32(fp)
 8035f98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8035f9c:	e0bffa17 	ldw	r2,-24(fp)
 8035fa0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 8035fa4:	e0bff517 	ldw	r2,-44(fp)
 8035fa8:	1000021e 	bne	r2,zero,8035fb4 <altera_avalon_uart_read+0x158>
 8035fac:	e0bffe17 	ldw	r2,-8(fp)
 8035fb0:	103fcd1e 	bne	r2,zero,8035ee8 <_gp+0xffff47dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8035fb4:	0005303a 	rdctl	r2,status
 8035fb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8035fbc:	e0fffb17 	ldw	r3,-20(fp)
 8035fc0:	00bfff84 	movi	r2,-2
 8035fc4:	1884703a 	and	r2,r3,r2
 8035fc8:	1001703a 	wrctl	status,r2
  
  return context;
 8035fcc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 8035fd0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8035fd4:	e0bffc17 	ldw	r2,-16(fp)
 8035fd8:	10800117 	ldw	r2,4(r2)
 8035fdc:	10c02014 	ori	r3,r2,128
 8035fe0:	e0bffc17 	ldw	r2,-16(fp)
 8035fe4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8035fe8:	e0bffc17 	ldw	r2,-16(fp)
 8035fec:	10800017 	ldw	r2,0(r2)
 8035ff0:	10800304 	addi	r2,r2,12
 8035ff4:	e0fffc17 	ldw	r3,-16(fp)
 8035ff8:	18c00117 	ldw	r3,4(r3)
 8035ffc:	10c00035 	stwio	r3,0(r2)
 8036000:	e0bff817 	ldw	r2,-32(fp)
 8036004:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8036008:	e0bff717 	ldw	r2,-36(fp)
 803600c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 8036010:	e0bff403 	ldbu	r2,-48(fp)
 8036014:	10000226 	beq	r2,zero,8036020 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 8036018:	00bffd44 	movi	r2,-11
 803601c:	00000106 	br	8036024 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 8036020:	e0bff517 	ldw	r2,-44(fp)
  }
}
 8036024:	e037883a 	mov	sp,fp
 8036028:	dfc00117 	ldw	ra,4(sp)
 803602c:	df000017 	ldw	fp,0(sp)
 8036030:	dec00204 	addi	sp,sp,8
 8036034:	f800283a 	ret

08036038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8036038:	defffe04 	addi	sp,sp,-8
 803603c:	dfc00115 	stw	ra,4(sp)
 8036040:	df000015 	stw	fp,0(sp)
 8036044:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8036048:	d0a00c17 	ldw	r2,-32720(gp)
 803604c:	10000326 	beq	r2,zero,803605c <alt_get_errno+0x24>
 8036050:	d0a00c17 	ldw	r2,-32720(gp)
 8036054:	103ee83a 	callr	r2
 8036058:	00000106 	br	8036060 <alt_get_errno+0x28>
 803605c:	d0a73404 	addi	r2,gp,-25392
}
 8036060:	e037883a 	mov	sp,fp
 8036064:	dfc00117 	ldw	ra,4(sp)
 8036068:	df000017 	ldw	fp,0(sp)
 803606c:	dec00204 	addi	sp,sp,8
 8036070:	f800283a 	ret

08036074 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 8036074:	defff204 	addi	sp,sp,-56
 8036078:	dfc00d15 	stw	ra,52(sp)
 803607c:	df000c15 	stw	fp,48(sp)
 8036080:	df000c04 	addi	fp,sp,48
 8036084:	e13ffc15 	stw	r4,-16(fp)
 8036088:	e17ffd15 	stw	r5,-12(fp)
 803608c:	e1bffe15 	stw	r6,-8(fp)
 8036090:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 8036094:	e0bffe17 	ldw	r2,-8(fp)
 8036098:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 803609c:	e0bfff17 	ldw	r2,-4(fp)
 80360a0:	1090000c 	andi	r2,r2,16384
 80360a4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 80360a8:	00003c06 	br	803619c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 80360ac:	e0bffc17 	ldw	r2,-16(fp)
 80360b0:	10800517 	ldw	r2,20(r2)
 80360b4:	10800044 	addi	r2,r2,1
 80360b8:	10800fcc 	andi	r2,r2,63
 80360bc:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 80360c0:	e0bffc17 	ldw	r2,-16(fp)
 80360c4:	10c00417 	ldw	r3,16(r2)
 80360c8:	e0bff717 	ldw	r2,-36(fp)
 80360cc:	1880221e 	bne	r3,r2,8036158 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 80360d0:	e0bff517 	ldw	r2,-44(fp)
 80360d4:	10000526 	beq	r2,zero,80360ec <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 80360d8:	80360380 	call	8036038 <alt_get_errno>
 80360dc:	1007883a 	mov	r3,r2
 80360e0:	008002c4 	movi	r2,11
 80360e4:	18800015 	stw	r2,0(r3)
        break;
 80360e8:	00002e06 	br	80361a4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80360ec:	0005303a 	rdctl	r2,status
 80360f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80360f4:	e0fff917 	ldw	r3,-28(fp)
 80360f8:	00bfff84 	movi	r2,-2
 80360fc:	1884703a 	and	r2,r3,r2
 8036100:	1001703a 	wrctl	status,r2
  
  return context;
 8036104:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 8036108:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 803610c:	e0bffc17 	ldw	r2,-16(fp)
 8036110:	10800117 	ldw	r2,4(r2)
 8036114:	10c11014 	ori	r3,r2,1088
 8036118:	e0bffc17 	ldw	r2,-16(fp)
 803611c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8036120:	e0bffc17 	ldw	r2,-16(fp)
 8036124:	10800017 	ldw	r2,0(r2)
 8036128:	10800304 	addi	r2,r2,12
 803612c:	e0fffc17 	ldw	r3,-16(fp)
 8036130:	18c00117 	ldw	r3,4(r3)
 8036134:	10c00035 	stwio	r3,0(r2)
 8036138:	e0bff817 	ldw	r2,-32(fp)
 803613c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8036140:	e0bff617 	ldw	r2,-40(fp)
 8036144:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 8036148:	e0bffc17 	ldw	r2,-16(fp)
 803614c:	10c00417 	ldw	r3,16(r2)
 8036150:	e0bff717 	ldw	r2,-36(fp)
 8036154:	18bffc26 	beq	r3,r2,8036148 <_gp+0xffff4a3c>
      }
    }

    count--;
 8036158:	e0bff417 	ldw	r2,-48(fp)
 803615c:	10bfffc4 	addi	r2,r2,-1
 8036160:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 8036164:	e0bffc17 	ldw	r2,-16(fp)
 8036168:	10c00517 	ldw	r3,20(r2)
 803616c:	e0bffd17 	ldw	r2,-12(fp)
 8036170:	11000044 	addi	r4,r2,1
 8036174:	e13ffd15 	stw	r4,-12(fp)
 8036178:	10800003 	ldbu	r2,0(r2)
 803617c:	1009883a 	mov	r4,r2
 8036180:	e0bffc17 	ldw	r2,-16(fp)
 8036184:	10c5883a 	add	r2,r2,r3
 8036188:	10801704 	addi	r2,r2,92
 803618c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 8036190:	e0bffc17 	ldw	r2,-16(fp)
 8036194:	e0fff717 	ldw	r3,-36(fp)
 8036198:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 803619c:	e0bff417 	ldw	r2,-48(fp)
 80361a0:	103fc21e 	bne	r2,zero,80360ac <_gp+0xffff49a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80361a4:	0005303a 	rdctl	r2,status
 80361a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80361ac:	e0fffb17 	ldw	r3,-20(fp)
 80361b0:	00bfff84 	movi	r2,-2
 80361b4:	1884703a 	and	r2,r3,r2
 80361b8:	1001703a 	wrctl	status,r2
  
  return context;
 80361bc:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 80361c0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 80361c4:	e0bffc17 	ldw	r2,-16(fp)
 80361c8:	10800117 	ldw	r2,4(r2)
 80361cc:	10c11014 	ori	r3,r2,1088
 80361d0:	e0bffc17 	ldw	r2,-16(fp)
 80361d4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 80361d8:	e0bffc17 	ldw	r2,-16(fp)
 80361dc:	10800017 	ldw	r2,0(r2)
 80361e0:	10800304 	addi	r2,r2,12
 80361e4:	e0fffc17 	ldw	r3,-16(fp)
 80361e8:	18c00117 	ldw	r3,4(r3)
 80361ec:	10c00035 	stwio	r3,0(r2)
 80361f0:	e0bff817 	ldw	r2,-32(fp)
 80361f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80361f8:	e0bffa17 	ldw	r2,-24(fp)
 80361fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 8036200:	e0fffe17 	ldw	r3,-8(fp)
 8036204:	e0bff417 	ldw	r2,-48(fp)
 8036208:	1885c83a 	sub	r2,r3,r2
}
 803620c:	e037883a 	mov	sp,fp
 8036210:	dfc00117 	ldw	ra,4(sp)
 8036214:	df000017 	ldw	fp,0(sp)
 8036218:	dec00204 	addi	sp,sp,8
 803621c:	f800283a 	ret

08036220 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8036220:	defff504 	addi	sp,sp,-44
 8036224:	df000a15 	stw	fp,40(sp)
 8036228:	df000a04 	addi	fp,sp,40
 803622c:	e13ffc15 	stw	r4,-16(fp)
 8036230:	e17ffd15 	stw	r5,-12(fp)
 8036234:	e1bffe15 	stw	r6,-8(fp)
 8036238:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 803623c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8036240:	d0a73c17 	ldw	r2,-25360(gp)
  
  if (alt_ticks_per_second ())
 8036244:	10003c26 	beq	r2,zero,8036338 <alt_alarm_start+0x118>
  {
    if (alarm)
 8036248:	e0bffc17 	ldw	r2,-16(fp)
 803624c:	10003826 	beq	r2,zero,8036330 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8036250:	e0bffc17 	ldw	r2,-16(fp)
 8036254:	e0fffe17 	ldw	r3,-8(fp)
 8036258:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 803625c:	e0bffc17 	ldw	r2,-16(fp)
 8036260:	e0ffff17 	ldw	r3,-4(fp)
 8036264:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8036268:	0005303a 	rdctl	r2,status
 803626c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8036270:	e0fff917 	ldw	r3,-28(fp)
 8036274:	00bfff84 	movi	r2,-2
 8036278:	1884703a 	and	r2,r3,r2
 803627c:	1001703a 	wrctl	status,r2
  
  return context;
 8036280:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8036284:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8036288:	d0a73d17 	ldw	r2,-25356(gp)
      
      current_nticks = alt_nticks();
 803628c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8036290:	e0fffd17 	ldw	r3,-12(fp)
 8036294:	e0bff617 	ldw	r2,-40(fp)
 8036298:	1885883a 	add	r2,r3,r2
 803629c:	10c00044 	addi	r3,r2,1
 80362a0:	e0bffc17 	ldw	r2,-16(fp)
 80362a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80362a8:	e0bffc17 	ldw	r2,-16(fp)
 80362ac:	10c00217 	ldw	r3,8(r2)
 80362b0:	e0bff617 	ldw	r2,-40(fp)
 80362b4:	1880042e 	bgeu	r3,r2,80362c8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80362b8:	e0bffc17 	ldw	r2,-16(fp)
 80362bc:	00c00044 	movi	r3,1
 80362c0:	10c00405 	stb	r3,16(r2)
 80362c4:	00000206 	br	80362d0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80362c8:	e0bffc17 	ldw	r2,-16(fp)
 80362cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80362d0:	e0bffc17 	ldw	r2,-16(fp)
 80362d4:	d0e01304 	addi	r3,gp,-32692
 80362d8:	e0fffa15 	stw	r3,-24(fp)
 80362dc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80362e0:	e0bffb17 	ldw	r2,-20(fp)
 80362e4:	e0fffa17 	ldw	r3,-24(fp)
 80362e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80362ec:	e0bffa17 	ldw	r2,-24(fp)
 80362f0:	10c00017 	ldw	r3,0(r2)
 80362f4:	e0bffb17 	ldw	r2,-20(fp)
 80362f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80362fc:	e0bffa17 	ldw	r2,-24(fp)
 8036300:	10800017 	ldw	r2,0(r2)
 8036304:	e0fffb17 	ldw	r3,-20(fp)
 8036308:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803630c:	e0bffa17 	ldw	r2,-24(fp)
 8036310:	e0fffb17 	ldw	r3,-20(fp)
 8036314:	10c00015 	stw	r3,0(r2)
 8036318:	e0bff817 	ldw	r2,-32(fp)
 803631c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8036320:	e0bff717 	ldw	r2,-36(fp)
 8036324:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8036328:	0005883a 	mov	r2,zero
 803632c:	00000306 	br	803633c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8036330:	00bffa84 	movi	r2,-22
 8036334:	00000106 	br	803633c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8036338:	00bfde84 	movi	r2,-134
  }
}
 803633c:	e037883a 	mov	sp,fp
 8036340:	df000017 	ldw	fp,0(sp)
 8036344:	dec00104 	addi	sp,sp,4
 8036348:	f800283a 	ret

0803634c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 803634c:	defffe04 	addi	sp,sp,-8
 8036350:	df000115 	stw	fp,4(sp)
 8036354:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8036358:	e03fff15 	stw	zero,-4(fp)
 803635c:	00000506 	br	8036374 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8036360:	e0bfff17 	ldw	r2,-4(fp)
 8036364:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8036368:	e0bfff17 	ldw	r2,-4(fp)
 803636c:	10800804 	addi	r2,r2,32
 8036370:	e0bfff15 	stw	r2,-4(fp)
 8036374:	e0bfff17 	ldw	r2,-4(fp)
 8036378:	10820030 	cmpltui	r2,r2,2048
 803637c:	103ff81e 	bne	r2,zero,8036360 <_gp+0xffff4c54>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8036380:	0001883a 	nop
 8036384:	e037883a 	mov	sp,fp
 8036388:	df000017 	ldw	fp,0(sp)
 803638c:	dec00104 	addi	sp,sp,4
 8036390:	f800283a 	ret

08036394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8036394:	defffe04 	addi	sp,sp,-8
 8036398:	dfc00115 	stw	ra,4(sp)
 803639c:	df000015 	stw	fp,0(sp)
 80363a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80363a4:	d0a00c17 	ldw	r2,-32720(gp)
 80363a8:	10000326 	beq	r2,zero,80363b8 <alt_get_errno+0x24>
 80363ac:	d0a00c17 	ldw	r2,-32720(gp)
 80363b0:	103ee83a 	callr	r2
 80363b4:	00000106 	br	80363bc <alt_get_errno+0x28>
 80363b8:	d0a73404 	addi	r2,gp,-25392
}
 80363bc:	e037883a 	mov	sp,fp
 80363c0:	dfc00117 	ldw	ra,4(sp)
 80363c4:	df000017 	ldw	fp,0(sp)
 80363c8:	dec00204 	addi	sp,sp,8
 80363cc:	f800283a 	ret

080363d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80363d0:	defffa04 	addi	sp,sp,-24
 80363d4:	dfc00515 	stw	ra,20(sp)
 80363d8:	df000415 	stw	fp,16(sp)
 80363dc:	df000404 	addi	fp,sp,16
 80363e0:	e13ffe15 	stw	r4,-8(fp)
 80363e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80363e8:	e0bffe17 	ldw	r2,-8(fp)
 80363ec:	10000326 	beq	r2,zero,80363fc <alt_dev_llist_insert+0x2c>
 80363f0:	e0bffe17 	ldw	r2,-8(fp)
 80363f4:	10800217 	ldw	r2,8(r2)
 80363f8:	1000061e 	bne	r2,zero,8036414 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80363fc:	80363940 	call	8036394 <alt_get_errno>
 8036400:	1007883a 	mov	r3,r2
 8036404:	00800584 	movi	r2,22
 8036408:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 803640c:	00bffa84 	movi	r2,-22
 8036410:	00001306 	br	8036460 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8036414:	e0bffe17 	ldw	r2,-8(fp)
 8036418:	e0ffff17 	ldw	r3,-4(fp)
 803641c:	e0fffc15 	stw	r3,-16(fp)
 8036420:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8036424:	e0bffd17 	ldw	r2,-12(fp)
 8036428:	e0fffc17 	ldw	r3,-16(fp)
 803642c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8036430:	e0bffc17 	ldw	r2,-16(fp)
 8036434:	10c00017 	ldw	r3,0(r2)
 8036438:	e0bffd17 	ldw	r2,-12(fp)
 803643c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8036440:	e0bffc17 	ldw	r2,-16(fp)
 8036444:	10800017 	ldw	r2,0(r2)
 8036448:	e0fffd17 	ldw	r3,-12(fp)
 803644c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8036450:	e0bffc17 	ldw	r2,-16(fp)
 8036454:	e0fffd17 	ldw	r3,-12(fp)
 8036458:	10c00015 	stw	r3,0(r2)

  return 0;  
 803645c:	0005883a 	mov	r2,zero
}
 8036460:	e037883a 	mov	sp,fp
 8036464:	dfc00117 	ldw	ra,4(sp)
 8036468:	df000017 	ldw	fp,0(sp)
 803646c:	dec00204 	addi	sp,sp,8
 8036470:	f800283a 	ret

08036474 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8036474:	defffd04 	addi	sp,sp,-12
 8036478:	dfc00215 	stw	ra,8(sp)
 803647c:	df000115 	stw	fp,4(sp)
 8036480:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8036484:	008200f4 	movhi	r2,2051
 8036488:	109c9c04 	addi	r2,r2,29296
 803648c:	e0bfff15 	stw	r2,-4(fp)
 8036490:	00000606 	br	80364ac <_do_ctors+0x38>
        (*ctor) (); 
 8036494:	e0bfff17 	ldw	r2,-4(fp)
 8036498:	10800017 	ldw	r2,0(r2)
 803649c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80364a0:	e0bfff17 	ldw	r2,-4(fp)
 80364a4:	10bfff04 	addi	r2,r2,-4
 80364a8:	e0bfff15 	stw	r2,-4(fp)
 80364ac:	e0ffff17 	ldw	r3,-4(fp)
 80364b0:	008200f4 	movhi	r2,2051
 80364b4:	109c9d04 	addi	r2,r2,29300
 80364b8:	18bff62e 	bgeu	r3,r2,8036494 <_gp+0xffff4d88>
        (*ctor) (); 
}
 80364bc:	0001883a 	nop
 80364c0:	e037883a 	mov	sp,fp
 80364c4:	dfc00117 	ldw	ra,4(sp)
 80364c8:	df000017 	ldw	fp,0(sp)
 80364cc:	dec00204 	addi	sp,sp,8
 80364d0:	f800283a 	ret

080364d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80364d4:	defffd04 	addi	sp,sp,-12
 80364d8:	dfc00215 	stw	ra,8(sp)
 80364dc:	df000115 	stw	fp,4(sp)
 80364e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80364e4:	008200f4 	movhi	r2,2051
 80364e8:	109c9c04 	addi	r2,r2,29296
 80364ec:	e0bfff15 	stw	r2,-4(fp)
 80364f0:	00000606 	br	803650c <_do_dtors+0x38>
        (*dtor) (); 
 80364f4:	e0bfff17 	ldw	r2,-4(fp)
 80364f8:	10800017 	ldw	r2,0(r2)
 80364fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8036500:	e0bfff17 	ldw	r2,-4(fp)
 8036504:	10bfff04 	addi	r2,r2,-4
 8036508:	e0bfff15 	stw	r2,-4(fp)
 803650c:	e0ffff17 	ldw	r3,-4(fp)
 8036510:	008200f4 	movhi	r2,2051
 8036514:	109c9d04 	addi	r2,r2,29300
 8036518:	18bff62e 	bgeu	r3,r2,80364f4 <_gp+0xffff4de8>
        (*dtor) (); 
}
 803651c:	0001883a 	nop
 8036520:	e037883a 	mov	sp,fp
 8036524:	dfc00117 	ldw	ra,4(sp)
 8036528:	df000017 	ldw	fp,0(sp)
 803652c:	dec00204 	addi	sp,sp,8
 8036530:	f800283a 	ret

08036534 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8036534:	defffa04 	addi	sp,sp,-24
 8036538:	dfc00515 	stw	ra,20(sp)
 803653c:	df000415 	stw	fp,16(sp)
 8036540:	df000404 	addi	fp,sp,16
 8036544:	e13ffe15 	stw	r4,-8(fp)
 8036548:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 803654c:	e0bfff17 	ldw	r2,-4(fp)
 8036550:	10800017 	ldw	r2,0(r2)
 8036554:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8036558:	e13ffe17 	ldw	r4,-8(fp)
 803655c:	8029f580 	call	8029f58 <strlen>
 8036560:	10800044 	addi	r2,r2,1
 8036564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8036568:	00000d06 	br	80365a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 803656c:	e0bffc17 	ldw	r2,-16(fp)
 8036570:	10800217 	ldw	r2,8(r2)
 8036574:	e0fffd17 	ldw	r3,-12(fp)
 8036578:	180d883a 	mov	r6,r3
 803657c:	e17ffe17 	ldw	r5,-8(fp)
 8036580:	1009883a 	mov	r4,r2
 8036584:	80370e00 	call	80370e0 <memcmp>
 8036588:	1000021e 	bne	r2,zero,8036594 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 803658c:	e0bffc17 	ldw	r2,-16(fp)
 8036590:	00000706 	br	80365b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8036594:	e0bffc17 	ldw	r2,-16(fp)
 8036598:	10800017 	ldw	r2,0(r2)
 803659c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80365a0:	e0fffc17 	ldw	r3,-16(fp)
 80365a4:	e0bfff17 	ldw	r2,-4(fp)
 80365a8:	18bff01e 	bne	r3,r2,803656c <_gp+0xffff4e60>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80365ac:	0005883a 	mov	r2,zero
}
 80365b0:	e037883a 	mov	sp,fp
 80365b4:	dfc00117 	ldw	ra,4(sp)
 80365b8:	df000017 	ldw	fp,0(sp)
 80365bc:	dec00204 	addi	sp,sp,8
 80365c0:	f800283a 	ret

080365c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80365c4:	defffe04 	addi	sp,sp,-8
 80365c8:	dfc00115 	stw	ra,4(sp)
 80365cc:	df000015 	stw	fp,0(sp)
 80365d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80365d4:	01440004 	movi	r5,4096
 80365d8:	0009883a 	mov	r4,zero
 80365dc:	8036fa00 	call	8036fa0 <alt_icache_flush>
#endif
}
 80365e0:	0001883a 	nop
 80365e4:	e037883a 	mov	sp,fp
 80365e8:	dfc00117 	ldw	ra,4(sp)
 80365ec:	df000017 	ldw	fp,0(sp)
 80365f0:	dec00204 	addi	sp,sp,8
 80365f4:	f800283a 	ret

080365f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80365f8:	defff904 	addi	sp,sp,-28
 80365fc:	dfc00615 	stw	ra,24(sp)
 8036600:	df000515 	stw	fp,20(sp)
 8036604:	df000504 	addi	fp,sp,20
 8036608:	e13ffc15 	stw	r4,-16(fp)
 803660c:	e17ffd15 	stw	r5,-12(fp)
 8036610:	e1bffe15 	stw	r6,-8(fp)
 8036614:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8036618:	e0800217 	ldw	r2,8(fp)
 803661c:	d8800015 	stw	r2,0(sp)
 8036620:	e1ffff17 	ldw	r7,-4(fp)
 8036624:	e1bffe17 	ldw	r6,-8(fp)
 8036628:	e17ffd17 	ldw	r5,-12(fp)
 803662c:	e13ffc17 	ldw	r4,-16(fp)
 8036630:	80367a80 	call	80367a8 <alt_iic_isr_register>
}  
 8036634:	e037883a 	mov	sp,fp
 8036638:	dfc00117 	ldw	ra,4(sp)
 803663c:	df000017 	ldw	fp,0(sp)
 8036640:	dec00204 	addi	sp,sp,8
 8036644:	f800283a 	ret

08036648 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8036648:	defff904 	addi	sp,sp,-28
 803664c:	df000615 	stw	fp,24(sp)
 8036650:	df000604 	addi	fp,sp,24
 8036654:	e13ffe15 	stw	r4,-8(fp)
 8036658:	e17fff15 	stw	r5,-4(fp)
 803665c:	e0bfff17 	ldw	r2,-4(fp)
 8036660:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8036664:	0005303a 	rdctl	r2,status
 8036668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803666c:	e0fffb17 	ldw	r3,-20(fp)
 8036670:	00bfff84 	movi	r2,-2
 8036674:	1884703a 	and	r2,r3,r2
 8036678:	1001703a 	wrctl	status,r2
  
  return context;
 803667c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8036680:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8036684:	00c00044 	movi	r3,1
 8036688:	e0bffa17 	ldw	r2,-24(fp)
 803668c:	1884983a 	sll	r2,r3,r2
 8036690:	1007883a 	mov	r3,r2
 8036694:	d0a73b17 	ldw	r2,-25364(gp)
 8036698:	1884b03a 	or	r2,r3,r2
 803669c:	d0a73b15 	stw	r2,-25364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80366a0:	d0a73b17 	ldw	r2,-25364(gp)
 80366a4:	100170fa 	wrctl	ienable,r2
 80366a8:	e0bffc17 	ldw	r2,-16(fp)
 80366ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80366b0:	e0bffd17 	ldw	r2,-12(fp)
 80366b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80366b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80366bc:	0001883a 	nop
}
 80366c0:	e037883a 	mov	sp,fp
 80366c4:	df000017 	ldw	fp,0(sp)
 80366c8:	dec00104 	addi	sp,sp,4
 80366cc:	f800283a 	ret

080366d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80366d0:	defff904 	addi	sp,sp,-28
 80366d4:	df000615 	stw	fp,24(sp)
 80366d8:	df000604 	addi	fp,sp,24
 80366dc:	e13ffe15 	stw	r4,-8(fp)
 80366e0:	e17fff15 	stw	r5,-4(fp)
 80366e4:	e0bfff17 	ldw	r2,-4(fp)
 80366e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80366ec:	0005303a 	rdctl	r2,status
 80366f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80366f4:	e0fffb17 	ldw	r3,-20(fp)
 80366f8:	00bfff84 	movi	r2,-2
 80366fc:	1884703a 	and	r2,r3,r2
 8036700:	1001703a 	wrctl	status,r2
  
  return context;
 8036704:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8036708:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 803670c:	00c00044 	movi	r3,1
 8036710:	e0bffa17 	ldw	r2,-24(fp)
 8036714:	1884983a 	sll	r2,r3,r2
 8036718:	0084303a 	nor	r2,zero,r2
 803671c:	1007883a 	mov	r3,r2
 8036720:	d0a73b17 	ldw	r2,-25364(gp)
 8036724:	1884703a 	and	r2,r3,r2
 8036728:	d0a73b15 	stw	r2,-25364(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 803672c:	d0a73b17 	ldw	r2,-25364(gp)
 8036730:	100170fa 	wrctl	ienable,r2
 8036734:	e0bffc17 	ldw	r2,-16(fp)
 8036738:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803673c:	e0bffd17 	ldw	r2,-12(fp)
 8036740:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8036744:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8036748:	0001883a 	nop
}
 803674c:	e037883a 	mov	sp,fp
 8036750:	df000017 	ldw	fp,0(sp)
 8036754:	dec00104 	addi	sp,sp,4
 8036758:	f800283a 	ret

0803675c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 803675c:	defffc04 	addi	sp,sp,-16
 8036760:	df000315 	stw	fp,12(sp)
 8036764:	df000304 	addi	fp,sp,12
 8036768:	e13ffe15 	stw	r4,-8(fp)
 803676c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8036770:	000530fa 	rdctl	r2,ienable
 8036774:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8036778:	00c00044 	movi	r3,1
 803677c:	e0bfff17 	ldw	r2,-4(fp)
 8036780:	1884983a 	sll	r2,r3,r2
 8036784:	1007883a 	mov	r3,r2
 8036788:	e0bffd17 	ldw	r2,-12(fp)
 803678c:	1884703a 	and	r2,r3,r2
 8036790:	1004c03a 	cmpne	r2,r2,zero
 8036794:	10803fcc 	andi	r2,r2,255
}
 8036798:	e037883a 	mov	sp,fp
 803679c:	df000017 	ldw	fp,0(sp)
 80367a0:	dec00104 	addi	sp,sp,4
 80367a4:	f800283a 	ret

080367a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80367a8:	defff504 	addi	sp,sp,-44
 80367ac:	dfc00a15 	stw	ra,40(sp)
 80367b0:	df000915 	stw	fp,36(sp)
 80367b4:	df000904 	addi	fp,sp,36
 80367b8:	e13ffc15 	stw	r4,-16(fp)
 80367bc:	e17ffd15 	stw	r5,-12(fp)
 80367c0:	e1bffe15 	stw	r6,-8(fp)
 80367c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80367c8:	00bffa84 	movi	r2,-22
 80367cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80367d0:	e0bffd17 	ldw	r2,-12(fp)
 80367d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80367d8:	e0bff817 	ldw	r2,-32(fp)
 80367dc:	10800808 	cmpgei	r2,r2,32
 80367e0:	1000271e 	bne	r2,zero,8036880 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80367e4:	0005303a 	rdctl	r2,status
 80367e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80367ec:	e0fffb17 	ldw	r3,-20(fp)
 80367f0:	00bfff84 	movi	r2,-2
 80367f4:	1884703a 	and	r2,r3,r2
 80367f8:	1001703a 	wrctl	status,r2
  
  return context;
 80367fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8036800:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8036804:	00820134 	movhi	r2,2052
 8036808:	10ad6004 	addi	r2,r2,-19072
 803680c:	e0fff817 	ldw	r3,-32(fp)
 8036810:	180690fa 	slli	r3,r3,3
 8036814:	10c5883a 	add	r2,r2,r3
 8036818:	e0fffe17 	ldw	r3,-8(fp)
 803681c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8036820:	00820134 	movhi	r2,2052
 8036824:	10ad6004 	addi	r2,r2,-19072
 8036828:	e0fff817 	ldw	r3,-32(fp)
 803682c:	180690fa 	slli	r3,r3,3
 8036830:	10c5883a 	add	r2,r2,r3
 8036834:	10800104 	addi	r2,r2,4
 8036838:	e0ffff17 	ldw	r3,-4(fp)
 803683c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8036840:	e0bffe17 	ldw	r2,-8(fp)
 8036844:	10000526 	beq	r2,zero,803685c <alt_iic_isr_register+0xb4>
 8036848:	e0bff817 	ldw	r2,-32(fp)
 803684c:	100b883a 	mov	r5,r2
 8036850:	e13ffc17 	ldw	r4,-16(fp)
 8036854:	80366480 	call	8036648 <alt_ic_irq_enable>
 8036858:	00000406 	br	803686c <alt_iic_isr_register+0xc4>
 803685c:	e0bff817 	ldw	r2,-32(fp)
 8036860:	100b883a 	mov	r5,r2
 8036864:	e13ffc17 	ldw	r4,-16(fp)
 8036868:	80366d00 	call	80366d0 <alt_ic_irq_disable>
 803686c:	e0bff715 	stw	r2,-36(fp)
 8036870:	e0bffa17 	ldw	r2,-24(fp)
 8036874:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8036878:	e0bff917 	ldw	r2,-28(fp)
 803687c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8036880:	e0bff717 	ldw	r2,-36(fp)
}
 8036884:	e037883a 	mov	sp,fp
 8036888:	dfc00117 	ldw	ra,4(sp)
 803688c:	df000017 	ldw	fp,0(sp)
 8036890:	dec00204 	addi	sp,sp,8
 8036894:	f800283a 	ret

08036898 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8036898:	defff904 	addi	sp,sp,-28
 803689c:	dfc00615 	stw	ra,24(sp)
 80368a0:	df000515 	stw	fp,20(sp)
 80368a4:	df000504 	addi	fp,sp,20
 80368a8:	e13ffc15 	stw	r4,-16(fp)
 80368ac:	e17ffd15 	stw	r5,-12(fp)
 80368b0:	e1bffe15 	stw	r6,-8(fp)
 80368b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80368b8:	e1bfff17 	ldw	r6,-4(fp)
 80368bc:	e17ffe17 	ldw	r5,-8(fp)
 80368c0:	e13ffd17 	ldw	r4,-12(fp)
 80368c4:	8036ad80 	call	8036ad8 <open>
 80368c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 80368cc:	e0bffb17 	ldw	r2,-20(fp)
 80368d0:	10001c16 	blt	r2,zero,8036944 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 80368d4:	00820134 	movhi	r2,2052
 80368d8:	10a0f204 	addi	r2,r2,-31800
 80368dc:	e0fffb17 	ldw	r3,-20(fp)
 80368e0:	18c00324 	muli	r3,r3,12
 80368e4:	10c5883a 	add	r2,r2,r3
 80368e8:	10c00017 	ldw	r3,0(r2)
 80368ec:	e0bffc17 	ldw	r2,-16(fp)
 80368f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80368f4:	00820134 	movhi	r2,2052
 80368f8:	10a0f204 	addi	r2,r2,-31800
 80368fc:	e0fffb17 	ldw	r3,-20(fp)
 8036900:	18c00324 	muli	r3,r3,12
 8036904:	10c5883a 	add	r2,r2,r3
 8036908:	10800104 	addi	r2,r2,4
 803690c:	10c00017 	ldw	r3,0(r2)
 8036910:	e0bffc17 	ldw	r2,-16(fp)
 8036914:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8036918:	00820134 	movhi	r2,2052
 803691c:	10a0f204 	addi	r2,r2,-31800
 8036920:	e0fffb17 	ldw	r3,-20(fp)
 8036924:	18c00324 	muli	r3,r3,12
 8036928:	10c5883a 	add	r2,r2,r3
 803692c:	10800204 	addi	r2,r2,8
 8036930:	10c00017 	ldw	r3,0(r2)
 8036934:	e0bffc17 	ldw	r2,-16(fp)
 8036938:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 803693c:	e13ffb17 	ldw	r4,-20(fp)
 8036940:	8033db00 	call	8033db0 <alt_release_fd>
  }
} 
 8036944:	0001883a 	nop
 8036948:	e037883a 	mov	sp,fp
 803694c:	dfc00117 	ldw	ra,4(sp)
 8036950:	df000017 	ldw	fp,0(sp)
 8036954:	dec00204 	addi	sp,sp,8
 8036958:	f800283a 	ret

0803695c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 803695c:	defffb04 	addi	sp,sp,-20
 8036960:	dfc00415 	stw	ra,16(sp)
 8036964:	df000315 	stw	fp,12(sp)
 8036968:	df000304 	addi	fp,sp,12
 803696c:	e13ffd15 	stw	r4,-12(fp)
 8036970:	e17ffe15 	stw	r5,-8(fp)
 8036974:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8036978:	01c07fc4 	movi	r7,511
 803697c:	01800044 	movi	r6,1
 8036980:	e17ffd17 	ldw	r5,-12(fp)
 8036984:	01020134 	movhi	r4,2052
 8036988:	2120f504 	addi	r4,r4,-31788
 803698c:	80368980 	call	8036898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8036990:	01c07fc4 	movi	r7,511
 8036994:	000d883a 	mov	r6,zero
 8036998:	e17ffe17 	ldw	r5,-8(fp)
 803699c:	01020134 	movhi	r4,2052
 80369a0:	2120f204 	addi	r4,r4,-31800
 80369a4:	80368980 	call	8036898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80369a8:	01c07fc4 	movi	r7,511
 80369ac:	01800044 	movi	r6,1
 80369b0:	e17fff17 	ldw	r5,-4(fp)
 80369b4:	01020134 	movhi	r4,2052
 80369b8:	2120f804 	addi	r4,r4,-31776
 80369bc:	80368980 	call	8036898 <alt_open_fd>
}  
 80369c0:	0001883a 	nop
 80369c4:	e037883a 	mov	sp,fp
 80369c8:	dfc00117 	ldw	ra,4(sp)
 80369cc:	df000017 	ldw	fp,0(sp)
 80369d0:	dec00204 	addi	sp,sp,8
 80369d4:	f800283a 	ret

080369d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80369d8:	defffe04 	addi	sp,sp,-8
 80369dc:	dfc00115 	stw	ra,4(sp)
 80369e0:	df000015 	stw	fp,0(sp)
 80369e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80369e8:	d0a00c17 	ldw	r2,-32720(gp)
 80369ec:	10000326 	beq	r2,zero,80369fc <alt_get_errno+0x24>
 80369f0:	d0a00c17 	ldw	r2,-32720(gp)
 80369f4:	103ee83a 	callr	r2
 80369f8:	00000106 	br	8036a00 <alt_get_errno+0x28>
 80369fc:	d0a73404 	addi	r2,gp,-25392
}
 8036a00:	e037883a 	mov	sp,fp
 8036a04:	dfc00117 	ldw	ra,4(sp)
 8036a08:	df000017 	ldw	fp,0(sp)
 8036a0c:	dec00204 	addi	sp,sp,8
 8036a10:	f800283a 	ret

08036a14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8036a14:	defffd04 	addi	sp,sp,-12
 8036a18:	df000215 	stw	fp,8(sp)
 8036a1c:	df000204 	addi	fp,sp,8
 8036a20:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8036a24:	e0bfff17 	ldw	r2,-4(fp)
 8036a28:	10800217 	ldw	r2,8(r2)
 8036a2c:	10d00034 	orhi	r3,r2,16384
 8036a30:	e0bfff17 	ldw	r2,-4(fp)
 8036a34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8036a38:	e03ffe15 	stw	zero,-8(fp)
 8036a3c:	00001d06 	br	8036ab4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8036a40:	00820134 	movhi	r2,2052
 8036a44:	10a0f204 	addi	r2,r2,-31800
 8036a48:	e0fffe17 	ldw	r3,-8(fp)
 8036a4c:	18c00324 	muli	r3,r3,12
 8036a50:	10c5883a 	add	r2,r2,r3
 8036a54:	10c00017 	ldw	r3,0(r2)
 8036a58:	e0bfff17 	ldw	r2,-4(fp)
 8036a5c:	10800017 	ldw	r2,0(r2)
 8036a60:	1880111e 	bne	r3,r2,8036aa8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8036a64:	00820134 	movhi	r2,2052
 8036a68:	10a0f204 	addi	r2,r2,-31800
 8036a6c:	e0fffe17 	ldw	r3,-8(fp)
 8036a70:	18c00324 	muli	r3,r3,12
 8036a74:	10c5883a 	add	r2,r2,r3
 8036a78:	10800204 	addi	r2,r2,8
 8036a7c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8036a80:	1000090e 	bge	r2,zero,8036aa8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8036a84:	e0bffe17 	ldw	r2,-8(fp)
 8036a88:	10c00324 	muli	r3,r2,12
 8036a8c:	00820134 	movhi	r2,2052
 8036a90:	10a0f204 	addi	r2,r2,-31800
 8036a94:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8036a98:	e0bfff17 	ldw	r2,-4(fp)
 8036a9c:	18800226 	beq	r3,r2,8036aa8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8036aa0:	00bffcc4 	movi	r2,-13
 8036aa4:	00000806 	br	8036ac8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8036aa8:	e0bffe17 	ldw	r2,-8(fp)
 8036aac:	10800044 	addi	r2,r2,1
 8036ab0:	e0bffe15 	stw	r2,-8(fp)
 8036ab4:	d0a00b17 	ldw	r2,-32724(gp)
 8036ab8:	1007883a 	mov	r3,r2
 8036abc:	e0bffe17 	ldw	r2,-8(fp)
 8036ac0:	18bfdf2e 	bgeu	r3,r2,8036a40 <_gp+0xffff5334>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8036ac4:	0005883a 	mov	r2,zero
}
 8036ac8:	e037883a 	mov	sp,fp
 8036acc:	df000017 	ldw	fp,0(sp)
 8036ad0:	dec00104 	addi	sp,sp,4
 8036ad4:	f800283a 	ret

08036ad8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8036ad8:	defff604 	addi	sp,sp,-40
 8036adc:	dfc00915 	stw	ra,36(sp)
 8036ae0:	df000815 	stw	fp,32(sp)
 8036ae4:	df000804 	addi	fp,sp,32
 8036ae8:	e13ffd15 	stw	r4,-12(fp)
 8036aec:	e17ffe15 	stw	r5,-8(fp)
 8036af0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8036af4:	00bfffc4 	movi	r2,-1
 8036af8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8036afc:	00bffb44 	movi	r2,-19
 8036b00:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8036b04:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8036b08:	d1600904 	addi	r5,gp,-32732
 8036b0c:	e13ffd17 	ldw	r4,-12(fp)
 8036b10:	80365340 	call	8036534 <alt_find_dev>
 8036b14:	e0bff815 	stw	r2,-32(fp)
 8036b18:	e0bff817 	ldw	r2,-32(fp)
 8036b1c:	1000051e 	bne	r2,zero,8036b34 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8036b20:	e13ffd17 	ldw	r4,-12(fp)
 8036b24:	8036df40 	call	8036df4 <alt_find_file>
 8036b28:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8036b2c:	00800044 	movi	r2,1
 8036b30:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8036b34:	e0bff817 	ldw	r2,-32(fp)
 8036b38:	10002926 	beq	r2,zero,8036be0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8036b3c:	e13ff817 	ldw	r4,-32(fp)
 8036b40:	8036efc0 	call	8036efc <alt_get_fd>
 8036b44:	e0bff915 	stw	r2,-28(fp)
 8036b48:	e0bff917 	ldw	r2,-28(fp)
 8036b4c:	1000030e 	bge	r2,zero,8036b5c <open+0x84>
    {
      status = index;
 8036b50:	e0bff917 	ldw	r2,-28(fp)
 8036b54:	e0bffa15 	stw	r2,-24(fp)
 8036b58:	00002306 	br	8036be8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8036b5c:	e0bff917 	ldw	r2,-28(fp)
 8036b60:	10c00324 	muli	r3,r2,12
 8036b64:	00820134 	movhi	r2,2052
 8036b68:	10a0f204 	addi	r2,r2,-31800
 8036b6c:	1885883a 	add	r2,r3,r2
 8036b70:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8036b74:	e0fffe17 	ldw	r3,-8(fp)
 8036b78:	00900034 	movhi	r2,16384
 8036b7c:	10bfffc4 	addi	r2,r2,-1
 8036b80:	1886703a 	and	r3,r3,r2
 8036b84:	e0bffc17 	ldw	r2,-16(fp)
 8036b88:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8036b8c:	e0bffb17 	ldw	r2,-20(fp)
 8036b90:	1000051e 	bne	r2,zero,8036ba8 <open+0xd0>
 8036b94:	e13ffc17 	ldw	r4,-16(fp)
 8036b98:	8036a140 	call	8036a14 <alt_file_locked>
 8036b9c:	e0bffa15 	stw	r2,-24(fp)
 8036ba0:	e0bffa17 	ldw	r2,-24(fp)
 8036ba4:	10001016 	blt	r2,zero,8036be8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8036ba8:	e0bff817 	ldw	r2,-32(fp)
 8036bac:	10800317 	ldw	r2,12(r2)
 8036bb0:	10000826 	beq	r2,zero,8036bd4 <open+0xfc>
 8036bb4:	e0bff817 	ldw	r2,-32(fp)
 8036bb8:	10800317 	ldw	r2,12(r2)
 8036bbc:	e1ffff17 	ldw	r7,-4(fp)
 8036bc0:	e1bffe17 	ldw	r6,-8(fp)
 8036bc4:	e17ffd17 	ldw	r5,-12(fp)
 8036bc8:	e13ffc17 	ldw	r4,-16(fp)
 8036bcc:	103ee83a 	callr	r2
 8036bd0:	00000106 	br	8036bd8 <open+0x100>
 8036bd4:	0005883a 	mov	r2,zero
 8036bd8:	e0bffa15 	stw	r2,-24(fp)
 8036bdc:	00000206 	br	8036be8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8036be0:	00bffb44 	movi	r2,-19
 8036be4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8036be8:	e0bffa17 	ldw	r2,-24(fp)
 8036bec:	1000090e 	bge	r2,zero,8036c14 <open+0x13c>
  {
    alt_release_fd (index);  
 8036bf0:	e13ff917 	ldw	r4,-28(fp)
 8036bf4:	8033db00 	call	8033db0 <alt_release_fd>
    ALT_ERRNO = -status;
 8036bf8:	80369d80 	call	80369d8 <alt_get_errno>
 8036bfc:	1007883a 	mov	r3,r2
 8036c00:	e0bffa17 	ldw	r2,-24(fp)
 8036c04:	0085c83a 	sub	r2,zero,r2
 8036c08:	18800015 	stw	r2,0(r3)
    return -1;
 8036c0c:	00bfffc4 	movi	r2,-1
 8036c10:	00000106 	br	8036c18 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8036c14:	e0bff917 	ldw	r2,-28(fp)
}
 8036c18:	e037883a 	mov	sp,fp
 8036c1c:	dfc00117 	ldw	ra,4(sp)
 8036c20:	df000017 	ldw	fp,0(sp)
 8036c24:	dec00204 	addi	sp,sp,8
 8036c28:	f800283a 	ret

08036c2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8036c2c:	defffa04 	addi	sp,sp,-24
 8036c30:	df000515 	stw	fp,20(sp)
 8036c34:	df000504 	addi	fp,sp,20
 8036c38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8036c3c:	0005303a 	rdctl	r2,status
 8036c40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8036c44:	e0fffc17 	ldw	r3,-16(fp)
 8036c48:	00bfff84 	movi	r2,-2
 8036c4c:	1884703a 	and	r2,r3,r2
 8036c50:	1001703a 	wrctl	status,r2
  
  return context;
 8036c54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8036c58:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8036c5c:	e0bfff17 	ldw	r2,-4(fp)
 8036c60:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8036c64:	e0bffd17 	ldw	r2,-12(fp)
 8036c68:	10800017 	ldw	r2,0(r2)
 8036c6c:	e0fffd17 	ldw	r3,-12(fp)
 8036c70:	18c00117 	ldw	r3,4(r3)
 8036c74:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8036c78:	e0bffd17 	ldw	r2,-12(fp)
 8036c7c:	10800117 	ldw	r2,4(r2)
 8036c80:	e0fffd17 	ldw	r3,-12(fp)
 8036c84:	18c00017 	ldw	r3,0(r3)
 8036c88:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8036c8c:	e0bffd17 	ldw	r2,-12(fp)
 8036c90:	e0fffd17 	ldw	r3,-12(fp)
 8036c94:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8036c98:	e0bffd17 	ldw	r2,-12(fp)
 8036c9c:	e0fffd17 	ldw	r3,-12(fp)
 8036ca0:	10c00015 	stw	r3,0(r2)
 8036ca4:	e0bffb17 	ldw	r2,-20(fp)
 8036ca8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8036cac:	e0bffe17 	ldw	r2,-8(fp)
 8036cb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8036cb4:	0001883a 	nop
 8036cb8:	e037883a 	mov	sp,fp
 8036cbc:	df000017 	ldw	fp,0(sp)
 8036cc0:	dec00104 	addi	sp,sp,4
 8036cc4:	f800283a 	ret

08036cc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8036cc8:	defffb04 	addi	sp,sp,-20
 8036ccc:	dfc00415 	stw	ra,16(sp)
 8036cd0:	df000315 	stw	fp,12(sp)
 8036cd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8036cd8:	d0a01317 	ldw	r2,-32692(gp)
 8036cdc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8036ce0:	d0a73d17 	ldw	r2,-25356(gp)
 8036ce4:	10800044 	addi	r2,r2,1
 8036ce8:	d0a73d15 	stw	r2,-25356(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8036cec:	00002e06 	br	8036da8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8036cf0:	e0bffd17 	ldw	r2,-12(fp)
 8036cf4:	10800017 	ldw	r2,0(r2)
 8036cf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8036cfc:	e0bffd17 	ldw	r2,-12(fp)
 8036d00:	10800403 	ldbu	r2,16(r2)
 8036d04:	10803fcc 	andi	r2,r2,255
 8036d08:	10000426 	beq	r2,zero,8036d1c <alt_tick+0x54>
 8036d0c:	d0a73d17 	ldw	r2,-25356(gp)
 8036d10:	1000021e 	bne	r2,zero,8036d1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8036d14:	e0bffd17 	ldw	r2,-12(fp)
 8036d18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8036d1c:	e0bffd17 	ldw	r2,-12(fp)
 8036d20:	10800217 	ldw	r2,8(r2)
 8036d24:	d0e73d17 	ldw	r3,-25356(gp)
 8036d28:	18801d36 	bltu	r3,r2,8036da0 <alt_tick+0xd8>
 8036d2c:	e0bffd17 	ldw	r2,-12(fp)
 8036d30:	10800403 	ldbu	r2,16(r2)
 8036d34:	10803fcc 	andi	r2,r2,255
 8036d38:	1000191e 	bne	r2,zero,8036da0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8036d3c:	e0bffd17 	ldw	r2,-12(fp)
 8036d40:	10800317 	ldw	r2,12(r2)
 8036d44:	e0fffd17 	ldw	r3,-12(fp)
 8036d48:	18c00517 	ldw	r3,20(r3)
 8036d4c:	1809883a 	mov	r4,r3
 8036d50:	103ee83a 	callr	r2
 8036d54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8036d58:	e0bfff17 	ldw	r2,-4(fp)
 8036d5c:	1000031e 	bne	r2,zero,8036d6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8036d60:	e13ffd17 	ldw	r4,-12(fp)
 8036d64:	8036c2c0 	call	8036c2c <alt_alarm_stop>
 8036d68:	00000d06 	br	8036da0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8036d6c:	e0bffd17 	ldw	r2,-12(fp)
 8036d70:	10c00217 	ldw	r3,8(r2)
 8036d74:	e0bfff17 	ldw	r2,-4(fp)
 8036d78:	1887883a 	add	r3,r3,r2
 8036d7c:	e0bffd17 	ldw	r2,-12(fp)
 8036d80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8036d84:	e0bffd17 	ldw	r2,-12(fp)
 8036d88:	10c00217 	ldw	r3,8(r2)
 8036d8c:	d0a73d17 	ldw	r2,-25356(gp)
 8036d90:	1880032e 	bgeu	r3,r2,8036da0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8036d94:	e0bffd17 	ldw	r2,-12(fp)
 8036d98:	00c00044 	movi	r3,1
 8036d9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8036da0:	e0bffe17 	ldw	r2,-8(fp)
 8036da4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8036da8:	e0fffd17 	ldw	r3,-12(fp)
 8036dac:	d0a01304 	addi	r2,gp,-32692
 8036db0:	18bfcf1e 	bne	r3,r2,8036cf0 <_gp+0xffff55e4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8036db4:	0001883a 	nop
}
 8036db8:	0001883a 	nop
 8036dbc:	e037883a 	mov	sp,fp
 8036dc0:	dfc00117 	ldw	ra,4(sp)
 8036dc4:	df000017 	ldw	fp,0(sp)
 8036dc8:	dec00204 	addi	sp,sp,8
 8036dcc:	f800283a 	ret

08036dd0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8036dd0:	deffff04 	addi	sp,sp,-4
 8036dd4:	df000015 	stw	fp,0(sp)
 8036dd8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8036ddc:	000170fa 	wrctl	ienable,zero
}
 8036de0:	0001883a 	nop
 8036de4:	e037883a 	mov	sp,fp
 8036de8:	df000017 	ldw	fp,0(sp)
 8036dec:	dec00104 	addi	sp,sp,4
 8036df0:	f800283a 	ret

08036df4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8036df4:	defffb04 	addi	sp,sp,-20
 8036df8:	dfc00415 	stw	ra,16(sp)
 8036dfc:	df000315 	stw	fp,12(sp)
 8036e00:	df000304 	addi	fp,sp,12
 8036e04:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8036e08:	d0a00717 	ldw	r2,-32740(gp)
 8036e0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8036e10:	00003106 	br	8036ed8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8036e14:	e0bffd17 	ldw	r2,-12(fp)
 8036e18:	10800217 	ldw	r2,8(r2)
 8036e1c:	1009883a 	mov	r4,r2
 8036e20:	8029f580 	call	8029f58 <strlen>
 8036e24:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8036e28:	e0bffd17 	ldw	r2,-12(fp)
 8036e2c:	10c00217 	ldw	r3,8(r2)
 8036e30:	e0bffe17 	ldw	r2,-8(fp)
 8036e34:	10bfffc4 	addi	r2,r2,-1
 8036e38:	1885883a 	add	r2,r3,r2
 8036e3c:	10800003 	ldbu	r2,0(r2)
 8036e40:	10803fcc 	andi	r2,r2,255
 8036e44:	1080201c 	xori	r2,r2,128
 8036e48:	10bfe004 	addi	r2,r2,-128
 8036e4c:	10800bd8 	cmpnei	r2,r2,47
 8036e50:	1000031e 	bne	r2,zero,8036e60 <alt_find_file+0x6c>
    {
      len -= 1;
 8036e54:	e0bffe17 	ldw	r2,-8(fp)
 8036e58:	10bfffc4 	addi	r2,r2,-1
 8036e5c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8036e60:	e0bffe17 	ldw	r2,-8(fp)
 8036e64:	e0ffff17 	ldw	r3,-4(fp)
 8036e68:	1885883a 	add	r2,r3,r2
 8036e6c:	10800003 	ldbu	r2,0(r2)
 8036e70:	10803fcc 	andi	r2,r2,255
 8036e74:	1080201c 	xori	r2,r2,128
 8036e78:	10bfe004 	addi	r2,r2,-128
 8036e7c:	10800be0 	cmpeqi	r2,r2,47
 8036e80:	1000081e 	bne	r2,zero,8036ea4 <alt_find_file+0xb0>
 8036e84:	e0bffe17 	ldw	r2,-8(fp)
 8036e88:	e0ffff17 	ldw	r3,-4(fp)
 8036e8c:	1885883a 	add	r2,r3,r2
 8036e90:	10800003 	ldbu	r2,0(r2)
 8036e94:	10803fcc 	andi	r2,r2,255
 8036e98:	1080201c 	xori	r2,r2,128
 8036e9c:	10bfe004 	addi	r2,r2,-128
 8036ea0:	10000a1e 	bne	r2,zero,8036ecc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8036ea4:	e0bffd17 	ldw	r2,-12(fp)
 8036ea8:	10800217 	ldw	r2,8(r2)
 8036eac:	e0fffe17 	ldw	r3,-8(fp)
 8036eb0:	180d883a 	mov	r6,r3
 8036eb4:	e17fff17 	ldw	r5,-4(fp)
 8036eb8:	1009883a 	mov	r4,r2
 8036ebc:	80370e00 	call	80370e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8036ec0:	1000021e 	bne	r2,zero,8036ecc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8036ec4:	e0bffd17 	ldw	r2,-12(fp)
 8036ec8:	00000706 	br	8036ee8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8036ecc:	e0bffd17 	ldw	r2,-12(fp)
 8036ed0:	10800017 	ldw	r2,0(r2)
 8036ed4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8036ed8:	e0fffd17 	ldw	r3,-12(fp)
 8036edc:	d0a00704 	addi	r2,gp,-32740
 8036ee0:	18bfcc1e 	bne	r3,r2,8036e14 <_gp+0xffff5708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8036ee4:	0005883a 	mov	r2,zero
}
 8036ee8:	e037883a 	mov	sp,fp
 8036eec:	dfc00117 	ldw	ra,4(sp)
 8036ef0:	df000017 	ldw	fp,0(sp)
 8036ef4:	dec00204 	addi	sp,sp,8
 8036ef8:	f800283a 	ret

08036efc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8036efc:	defffc04 	addi	sp,sp,-16
 8036f00:	df000315 	stw	fp,12(sp)
 8036f04:	df000304 	addi	fp,sp,12
 8036f08:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8036f0c:	00bffa04 	movi	r2,-24
 8036f10:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8036f14:	e03ffd15 	stw	zero,-12(fp)
 8036f18:	00001906 	br	8036f80 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8036f1c:	00820134 	movhi	r2,2052
 8036f20:	10a0f204 	addi	r2,r2,-31800
 8036f24:	e0fffd17 	ldw	r3,-12(fp)
 8036f28:	18c00324 	muli	r3,r3,12
 8036f2c:	10c5883a 	add	r2,r2,r3
 8036f30:	10800017 	ldw	r2,0(r2)
 8036f34:	10000f1e 	bne	r2,zero,8036f74 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8036f38:	00820134 	movhi	r2,2052
 8036f3c:	10a0f204 	addi	r2,r2,-31800
 8036f40:	e0fffd17 	ldw	r3,-12(fp)
 8036f44:	18c00324 	muli	r3,r3,12
 8036f48:	10c5883a 	add	r2,r2,r3
 8036f4c:	e0ffff17 	ldw	r3,-4(fp)
 8036f50:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8036f54:	d0e00b17 	ldw	r3,-32724(gp)
 8036f58:	e0bffd17 	ldw	r2,-12(fp)
 8036f5c:	1880020e 	bge	r3,r2,8036f68 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8036f60:	e0bffd17 	ldw	r2,-12(fp)
 8036f64:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 8036f68:	e0bffd17 	ldw	r2,-12(fp)
 8036f6c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8036f70:	00000606 	br	8036f8c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8036f74:	e0bffd17 	ldw	r2,-12(fp)
 8036f78:	10800044 	addi	r2,r2,1
 8036f7c:	e0bffd15 	stw	r2,-12(fp)
 8036f80:	e0bffd17 	ldw	r2,-12(fp)
 8036f84:	10800810 	cmplti	r2,r2,32
 8036f88:	103fe41e 	bne	r2,zero,8036f1c <_gp+0xffff5810>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8036f8c:	e0bffe17 	ldw	r2,-8(fp)
}
 8036f90:	e037883a 	mov	sp,fp
 8036f94:	df000017 	ldw	fp,0(sp)
 8036f98:	dec00104 	addi	sp,sp,4
 8036f9c:	f800283a 	ret

08036fa0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8036fa0:	defffb04 	addi	sp,sp,-20
 8036fa4:	df000415 	stw	fp,16(sp)
 8036fa8:	df000404 	addi	fp,sp,16
 8036fac:	e13ffe15 	stw	r4,-8(fp)
 8036fb0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8036fb4:	e0bfff17 	ldw	r2,-4(fp)
 8036fb8:	10840070 	cmpltui	r2,r2,4097
 8036fbc:	1000021e 	bne	r2,zero,8036fc8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8036fc0:	00840004 	movi	r2,4096
 8036fc4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8036fc8:	e0fffe17 	ldw	r3,-8(fp)
 8036fcc:	e0bfff17 	ldw	r2,-4(fp)
 8036fd0:	1885883a 	add	r2,r3,r2
 8036fd4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8036fd8:	e0bffe17 	ldw	r2,-8(fp)
 8036fdc:	e0bffc15 	stw	r2,-16(fp)
 8036fe0:	00000506 	br	8036ff8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8036fe4:	e0bffc17 	ldw	r2,-16(fp)
 8036fe8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8036fec:	e0bffc17 	ldw	r2,-16(fp)
 8036ff0:	10800804 	addi	r2,r2,32
 8036ff4:	e0bffc15 	stw	r2,-16(fp)
 8036ff8:	e0fffc17 	ldw	r3,-16(fp)
 8036ffc:	e0bffd17 	ldw	r2,-12(fp)
 8037000:	18bff836 	bltu	r3,r2,8036fe4 <_gp+0xffff58d8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8037004:	e0bffe17 	ldw	r2,-8(fp)
 8037008:	108007cc 	andi	r2,r2,31
 803700c:	10000226 	beq	r2,zero,8037018 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8037010:	e0bffc17 	ldw	r2,-16(fp)
 8037014:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8037018:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 803701c:	0001883a 	nop
 8037020:	e037883a 	mov	sp,fp
 8037024:	df000017 	ldw	fp,0(sp)
 8037028:	dec00104 	addi	sp,sp,4
 803702c:	f800283a 	ret

08037030 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8037030:	defffe04 	addi	sp,sp,-8
 8037034:	df000115 	stw	fp,4(sp)
 8037038:	df000104 	addi	fp,sp,4
 803703c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8037040:	e0bfff17 	ldw	r2,-4(fp)
 8037044:	10bffe84 	addi	r2,r2,-6
 8037048:	10c00428 	cmpgeui	r3,r2,16
 803704c:	18001a1e 	bne	r3,zero,80370b8 <alt_exception_cause_generated_bad_addr+0x88>
 8037050:	100690ba 	slli	r3,r2,2
 8037054:	008200f4 	movhi	r2,2051
 8037058:	109c1a04 	addi	r2,r2,28776
 803705c:	1885883a 	add	r2,r3,r2
 8037060:	10800017 	ldw	r2,0(r2)
 8037064:	1000683a 	jmp	r2
 8037068:	080370a8 	cmpgeui	zero,at,3522
 803706c:	080370a8 	cmpgeui	zero,at,3522
 8037070:	080370b8 	rdprs	zero,at,3522
 8037074:	080370b8 	rdprs	zero,at,3522
 8037078:	080370b8 	rdprs	zero,at,3522
 803707c:	080370a8 	cmpgeui	zero,at,3522
 8037080:	080370b0 	cmpltui	zero,at,3522
 8037084:	080370b8 	rdprs	zero,at,3522
 8037088:	080370a8 	cmpgeui	zero,at,3522
 803708c:	080370a8 	cmpgeui	zero,at,3522
 8037090:	080370b8 	rdprs	zero,at,3522
 8037094:	080370a8 	cmpgeui	zero,at,3522
 8037098:	080370b0 	cmpltui	zero,at,3522
 803709c:	080370b8 	rdprs	zero,at,3522
 80370a0:	080370b8 	rdprs	zero,at,3522
 80370a4:	080370a8 	cmpgeui	zero,at,3522
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80370a8:	00800044 	movi	r2,1
 80370ac:	00000306 	br	80370bc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80370b0:	0005883a 	mov	r2,zero
 80370b4:	00000106 	br	80370bc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80370b8:	0005883a 	mov	r2,zero
  }
}
 80370bc:	e037883a 	mov	sp,fp
 80370c0:	df000017 	ldw	fp,0(sp)
 80370c4:	dec00104 	addi	sp,sp,4
 80370c8:	f800283a 	ret

080370cc <atexit>:
 80370cc:	200b883a 	mov	r5,r4
 80370d0:	000f883a 	mov	r7,zero
 80370d4:	000d883a 	mov	r6,zero
 80370d8:	0009883a 	mov	r4,zero
 80370dc:	803715c1 	jmpi	803715c <__register_exitproc>

080370e0 <memcmp>:
 80370e0:	01c000c4 	movi	r7,3
 80370e4:	3980192e 	bgeu	r7,r6,803714c <memcmp+0x6c>
 80370e8:	2144b03a 	or	r2,r4,r5
 80370ec:	11c4703a 	and	r2,r2,r7
 80370f0:	10000f26 	beq	r2,zero,8037130 <memcmp+0x50>
 80370f4:	20800003 	ldbu	r2,0(r4)
 80370f8:	28c00003 	ldbu	r3,0(r5)
 80370fc:	10c0151e 	bne	r2,r3,8037154 <memcmp+0x74>
 8037100:	31bfff84 	addi	r6,r6,-2
 8037104:	01ffffc4 	movi	r7,-1
 8037108:	00000406 	br	803711c <memcmp+0x3c>
 803710c:	20800003 	ldbu	r2,0(r4)
 8037110:	28c00003 	ldbu	r3,0(r5)
 8037114:	31bfffc4 	addi	r6,r6,-1
 8037118:	10c00e1e 	bne	r2,r3,8037154 <memcmp+0x74>
 803711c:	21000044 	addi	r4,r4,1
 8037120:	29400044 	addi	r5,r5,1
 8037124:	31fff91e 	bne	r6,r7,803710c <_gp+0xffff5a00>
 8037128:	0005883a 	mov	r2,zero
 803712c:	f800283a 	ret
 8037130:	20c00017 	ldw	r3,0(r4)
 8037134:	28800017 	ldw	r2,0(r5)
 8037138:	18bfee1e 	bne	r3,r2,80370f4 <_gp+0xffff59e8>
 803713c:	31bfff04 	addi	r6,r6,-4
 8037140:	21000104 	addi	r4,r4,4
 8037144:	29400104 	addi	r5,r5,4
 8037148:	39bff936 	bltu	r7,r6,8037130 <_gp+0xffff5a24>
 803714c:	303fe91e 	bne	r6,zero,80370f4 <_gp+0xffff59e8>
 8037150:	003ff506 	br	8037128 <_gp+0xffff5a1c>
 8037154:	10c5c83a 	sub	r2,r2,r3
 8037158:	f800283a 	ret

0803715c <__register_exitproc>:
 803715c:	defffa04 	addi	sp,sp,-24
 8037160:	dc000315 	stw	r16,12(sp)
 8037164:	04020134 	movhi	r16,2052
 8037168:	8425c404 	addi	r16,r16,-26864
 803716c:	80c00017 	ldw	r3,0(r16)
 8037170:	dc400415 	stw	r17,16(sp)
 8037174:	dfc00515 	stw	ra,20(sp)
 8037178:	18805217 	ldw	r2,328(r3)
 803717c:	2023883a 	mov	r17,r4
 8037180:	10003726 	beq	r2,zero,8037260 <__register_exitproc+0x104>
 8037184:	10c00117 	ldw	r3,4(r2)
 8037188:	010007c4 	movi	r4,31
 803718c:	20c00e16 	blt	r4,r3,80371c8 <__register_exitproc+0x6c>
 8037190:	1a000044 	addi	r8,r3,1
 8037194:	8800221e 	bne	r17,zero,8037220 <__register_exitproc+0xc4>
 8037198:	18c00084 	addi	r3,r3,2
 803719c:	18c7883a 	add	r3,r3,r3
 80371a0:	18c7883a 	add	r3,r3,r3
 80371a4:	12000115 	stw	r8,4(r2)
 80371a8:	10c7883a 	add	r3,r2,r3
 80371ac:	19400015 	stw	r5,0(r3)
 80371b0:	0005883a 	mov	r2,zero
 80371b4:	dfc00517 	ldw	ra,20(sp)
 80371b8:	dc400417 	ldw	r17,16(sp)
 80371bc:	dc000317 	ldw	r16,12(sp)
 80371c0:	dec00604 	addi	sp,sp,24
 80371c4:	f800283a 	ret
 80371c8:	008200f4 	movhi	r2,2051
 80371cc:	10a51204 	addi	r2,r2,-27576
 80371d0:	10002626 	beq	r2,zero,803726c <__register_exitproc+0x110>
 80371d4:	01006404 	movi	r4,400
 80371d8:	d9400015 	stw	r5,0(sp)
 80371dc:	d9800115 	stw	r6,4(sp)
 80371e0:	d9c00215 	stw	r7,8(sp)
 80371e4:	80294480 	call	8029448 <malloc>
 80371e8:	d9400017 	ldw	r5,0(sp)
 80371ec:	d9800117 	ldw	r6,4(sp)
 80371f0:	d9c00217 	ldw	r7,8(sp)
 80371f4:	10001d26 	beq	r2,zero,803726c <__register_exitproc+0x110>
 80371f8:	81000017 	ldw	r4,0(r16)
 80371fc:	10000115 	stw	zero,4(r2)
 8037200:	02000044 	movi	r8,1
 8037204:	22405217 	ldw	r9,328(r4)
 8037208:	0007883a 	mov	r3,zero
 803720c:	12400015 	stw	r9,0(r2)
 8037210:	20805215 	stw	r2,328(r4)
 8037214:	10006215 	stw	zero,392(r2)
 8037218:	10006315 	stw	zero,396(r2)
 803721c:	883fde26 	beq	r17,zero,8037198 <_gp+0xffff5a8c>
 8037220:	18c9883a 	add	r4,r3,r3
 8037224:	2109883a 	add	r4,r4,r4
 8037228:	1109883a 	add	r4,r2,r4
 803722c:	21802215 	stw	r6,136(r4)
 8037230:	01800044 	movi	r6,1
 8037234:	12406217 	ldw	r9,392(r2)
 8037238:	30cc983a 	sll	r6,r6,r3
 803723c:	4992b03a 	or	r9,r9,r6
 8037240:	12406215 	stw	r9,392(r2)
 8037244:	21c04215 	stw	r7,264(r4)
 8037248:	01000084 	movi	r4,2
 803724c:	893fd21e 	bne	r17,r4,8037198 <_gp+0xffff5a8c>
 8037250:	11006317 	ldw	r4,396(r2)
 8037254:	218cb03a 	or	r6,r4,r6
 8037258:	11806315 	stw	r6,396(r2)
 803725c:	003fce06 	br	8037198 <_gp+0xffff5a8c>
 8037260:	18805304 	addi	r2,r3,332
 8037264:	18805215 	stw	r2,328(r3)
 8037268:	003fc606 	br	8037184 <_gp+0xffff5a78>
 803726c:	00bfffc4 	movi	r2,-1
 8037270:	003fd006 	br	80371b4 <_gp+0xffff5aa8>
