
Lab4_4_FFT.elf:     file format elf32-littlenios2
Lab4_4_FFT.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00011bf8 memsz 0x00011bf8 flags r-x
    LOAD off    0x00012c18 vaddr 0x00031c18 paddr 0x00033878 align 2**12
         filesz 0x00001c60 memsz 0x00001c60 flags rw-
    LOAD off    0x000154d8 vaddr 0x000354d8 paddr 0x000354d8 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011438  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000059c  0003167c  0003167c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c60  00031c18  00033878  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  000354d8  000354d8  000154d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory_nios2_FFT 00000000  00035644  00035644  00014878  2**0
                  CONTENTS
  7 .SDRAM_controller 00000000  08000000  08000000  00014878  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014878  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fd8  00000000  00000000  000148a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025cd8  00000000  00000000  00015878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009ef7  00000000  00000000  0003b550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c2e4  00000000  00000000  00045447  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026d8  00000000  00000000  0005172c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003f68  00000000  00000000  00053e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018cd2  00000000  00000000  00057d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00070a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b18  00000000  00000000  00070a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00075eee  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  00075ef1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00075efa  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00075efb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00075efc  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00075f00  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00075f04  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000d  00000000  00000000  00075f08  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000d  00000000  00000000  00075f15  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000d  00000000  00000000  00075f22  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00075f2f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00075f3a  2**0
                  CONTENTS, READONLY
 30 .jdi          0000baf4  00000000  00000000  00075f79  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000c1ee0  00000000  00000000  00081a6d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
0003167c l    d  .rodata	00000000 .rodata
00031c18 l    d  .rwdata	00000000 .rwdata
000354d8 l    d  .bss	00000000 .bss
00035644 l    d  .onchip_memory_nios2_FFT	00000000 .onchip_memory_nios2_FFT
08000000 l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_4_FFT_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 FFT_main.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00031a06 l     O .rodata	00000010 zeroes.4404
0002350c l     F .text	000000bc __sbprintf
00031a16 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0002371c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002524c l     F .text	00000008 __fp_unlock
00025260 l     F .text	0000019c __sinit.part.1
000253fc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00031c18 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0003205c l     O .rwdata	00000020 lc_ctype_charset
0003203c l     O .rwdata	00000020 lc_message_charset
0003207c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00031a48 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000287f8 l     F .text	000000fc __sprint_r.part.0
00031b7c l     O .rodata	00000010 blanks.4348
00031b6c l     O .rodata	00000010 zeroes.4349
00029d84 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d9dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002dae8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002db14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002dc00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002dce0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002ddcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002dfa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00033858 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002e1ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e320 l     F .text	00000034 alt_dev_reg
0002e354 l     F .text	0000003c alt_get_errno
0002e390 l     F .text	00000068 alt_avalon_mutex_reg
00032664 l     O .rwdata	00001060 jtag_uart_FFT
000336c4 l     O .rwdata	00000048 mailbox_to_FFT
0003370c l     O .rwdata	00000048 mailbox_to_Sound_Acquisition
00033754 l     O .rwdata	00000010 mutex_SDRAM
00033764 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e6f4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002e900 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0002ef38 l     F .text	00000090 altera_avalon_mailbox_identify
0002efc8 l     F .text	00000078 altera_avalon_mailbox_post
0002f040 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0002f178 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0002f898 l     F .text	0000003c alt_get_errno
0002f8d4 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002fd20 l     F .text	0000009c altera_avalon_uart_irq
0002fdbc l     F .text	000000e4 altera_avalon_uart_rxirq
0002fea0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0003003c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00030254 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000305b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00030ab4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00030bf4 l     F .text	0000003c alt_get_errno
00030c30 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00035518 g     O .bss	00000004 alt_instruction_exception_handler
00027e3c g     F .text	00000074 _mprec_log10
0002f60c g     F .text	00000150 altera_avalon_mailbox_send
00027f28 g     F .text	0000008c __any_on
0002a320 g     F .text	00000054 _isatty_r
00031a54 g     O .rodata	00000028 __mprec_tinytens
0002dedc g     F .text	0000007c alt_main
0002118c g     F .text	000000c0 _puts_r
00035544 g     O .bss	00000100 alt_irq
0002a374 g     F .text	00000060 _lseek_r
00033878 g       *ABS*	00000000 __flash_rwdata_start
0002c56c g     F .text	00000088 .hidden __eqdf2
08000000 g       *ABS*	00000000 __alt_heap_start
00021150 g     F .text	0000003c printf
0002a58c g     F .text	0000009c _wcrtomb_r
000286b8 g     F .text	0000005c __sseek
0002559c g     F .text	00000010 __sinit
0002a434 g     F .text	00000140 __swbuf_r
00026064 g     F .text	0000007c _setlocale_r
00025404 g     F .text	00000068 __sfmoreglue
000354d8 g     O .bss	00000001 flag_data_ready
0002df7c g     F .text	00000024 __malloc_unlock
00026d34 g     F .text	0000015c memmove
00025584 g     F .text	00000018 _cleanup
0002fa0c g     F .text	00000040 altera_avalon_mutex_trylock
00026fb8 g     F .text	000000a8 _Balloc
00020f28 g     F .text	00000070 .hidden __fixsfsi
0002c5f4 g     F .text	000000dc .hidden __gtdf2
00030fec g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
0002faa0 g     F .text	00000074 altera_avalon_mutex_is_mine
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002a2c4 g     F .text	0000005c _fstat_r
000354fc g     O .bss	00000004 errno
00028634 g     F .text	00000008 __seofread
00035504 g     O .bss	00000004 alt_argv
0003b828 g       *ABS*	00000000 _gp
0002f75c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
00020544 g     F .text	00000120 add_echo
000324e4 g     O .rwdata	00000180 alt_fd_list
00030750 g     F .text	00000090 alt_find_dev
00026bec g     F .text	00000148 memcpy
00025254 g     F .text	0000000c _cleanup_r
0002d858 g     F .text	000000dc .hidden __floatsidf
00030b78 g     F .text	0000007c alt_io_redirect
0002c6d0 g     F .text	000000f4 .hidden __ltdf2
0003167c g       *ABS*	00000000 __DTOR_END__
0002124c g     F .text	00000014 puts
0003124c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002f220 g     F .text	00000078 altera_avalon_mailbox_simple_init
00028518 g     F .text	00000074 __fpclassifyd
00027d98 g     F .text	000000a4 __ratio
00029d68 g     F .text	0000001c __vfiprintf_internal
0002eaf8 g     F .text	0000021c altera_avalon_jtag_uart_read
00021120 g     F .text	00000030 _printf_r
0002b31c g     F .text	00000064 .hidden __udivsi3
0002dc3c g     F .text	000000a4 isatty
00031aa4 g     O .rodata	000000c8 __mprec_tens
0002f594 g     F .text	00000078 altera_avalon_mailbox_status
0002f47c g     F .text	00000118 altera_avalon_mailbox_close
000260e0 g     F .text	0000000c __locale_charset
000311bc g     F .text	00000090 alt_icache_flush
000354f8 g     O .bss	00000004 __malloc_top_pad
00033830 g     O .rwdata	00000004 __mb_cur_max
00026110 g     F .text	0000000c _localeconv_r
000273c4 g     F .text	0000003c __i2b
00025a20 g     F .text	000004bc __sfvwrite_r
0002858c g     F .text	00000054 _sbrk_r
0002a3d4 g     F .text	00000060 _read_r
00033850 g     O .rwdata	00000004 alt_max_fd
00029fb8 g     F .text	000000f0 _fclose_r
0002521c g     F .text	00000030 fflush
000354f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0002b3d8 g     F .text	000008ac .hidden __adddf3
00027b40 g     F .text	0000010c __b2d
0002acec g     F .text	00000538 .hidden __umoddi3
0002de08 g     F .text	000000d4 lseek
0002fb14 g     F .text	00000050 altera_avalon_mutex_first_lock
00033828 g     O .rwdata	00000004 _global_impure_ptr
00027fb4 g     F .text	00000564 _realloc_r
00035644 g       *ABS*	00000000 __bss_end
000309c4 g     F .text	000000f0 alt_iic_isr_register
00030ee4 g     F .text	00000108 alt_tick
0002a774 g     F .text	00000578 .hidden __udivdi3
0002a220 g     F .text	00000024 _fputwc_r
00031a7c g     O .rodata	00000028 __mprec_bigtens
000271a8 g     F .text	00000104 __s2b
0002d934 g     F .text	000000a8 .hidden __floatunsidf
00027880 g     F .text	00000060 __mcmp
0002fc74 g     F .text	000000ac altera_avalon_uart_init
000255bc g     F .text	00000018 __fp_lock_all
00030978 g     F .text	0000004c alt_ic_irq_enabled
00030e48 g     F .text	0000009c alt_alarm_stop
00020458 g     F .text	00000098 receiver_mailbox_callback
0003550c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000324bc g     O .rwdata	00000028 alt_dev_null
0002f950 g     F .text	00000054 altera_avalon_mutex_open
00030568 g     F .text	00000048 alt_dcache_flush_all
000272ac g     F .text	00000068 __hi0bits
0002d7d8 g     F .text	00000080 .hidden __fixdfsi
00033878 g       *ABS*	00000000 __ram_rwdata_end
00033848 g     O .rwdata	00000008 alt_dev_list
0002e228 g     F .text	000000f8 write
00033864 g     O .rwdata	00000008 alt_mutex_list
00031c18 g       *ABS*	00000000 __ram_rodata_end
0002db50 g     F .text	000000b0 fstat
0002c6d0 g     F .text	000000f4 .hidden __ledf2
000275f8 g     F .text	00000140 __pow5mult
0002890c g     F .text	0000145c ___vfiprintf_internal_r
000354ec g     O .bss	00000004 __nlocale_changed
0002b380 g     F .text	00000058 .hidden __umodsi3
08000000 g       *ABS*	00000000 end
00030290 g     F .text	000001ac altera_avalon_uart_write
0002e634 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0003167c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0002fbc4 g     F .text	00000060 altera_avalon_uart_write_fd
000210bc g     F .text	00000064 .hidden __clzsi2
0002fc24 g     F .text	00000050 altera_avalon_uart_close_fd
0002ed14 g     F .text	00000224 altera_avalon_jtag_uart_write
000255ac g     F .text	00000004 __sfp_lock_acquire
00026b08 g     F .text	000000e4 memchr
000212f8 g     F .text	000021f8 ___vfprintf_internal_r
00025710 g     F .text	00000310 _free_r
000260ec g     F .text	00000010 __locale_mb_cur_max
000314c8 g     F .text	00000180 __call_exitprocs
000354e8 g     O .bss	00000004 __mlocale_changed
00033834 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
00035510 g     O .bss	00000004 _alt_tick_rate
00027738 g     F .text	00000148 __lshift
00035514 g     O .bss	00000004 _alt_nticks
0002dfdc g     F .text	000000fc read
0002e430 g     F .text	000000a0 alt_sys_init
00020f98 g     F .text	00000124 .hidden __floatsisf
000313b0 g     F .text	00000118 __register_exitproc
0002fa4c g     F .text	00000054 altera_avalon_mutex_unlock
00027400 g     F .text	000001f8 __multiply
0002e9a0 g     F .text	00000068 altera_avalon_jtag_uart_close
00031c18 g       *ABS*	00000000 __ram_rwdata_start
0003167c g       *ABS*	00000000 __ram_rodata_start
0003551c g     O .bss	00000028 __malloc_current_mallinfo
00027c4c g     F .text	0000014c __d2b
0002e4d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00031118 g     F .text	000000a4 alt_get_fd
00029ea0 g     F .text	00000054 _close_r
00031334 g     F .text	0000007c memcmp
0002e590 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08000000 g       *ABS*	00000000 __alt_stack_base
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios2_FFT
0002e5e0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000235c8 g     F .text	00000154 __swsetup_r
0002bc84 g     F .text	000008e8 .hidden __divdf3
0002546c g     F .text	00000118 __sfp
00027eb0 g     F .text	00000078 __copybits
000320b4 g     O .rwdata	00000408 __malloc_av_
000255b8 g     F .text	00000004 __sinit_lock_release
0002c7c4 g     F .text	00000718 .hidden __muldf3
000285e0 g     F .text	00000054 __sread
00031010 g     F .text	00000108 alt_find_file
000305ec g     F .text	000000a4 alt_dev_llist_insert
0002df58 g     F .text	00000024 __malloc_lock
0002e13c g     F .text	000000b0 sbrk
000251c0 g     F .text	0000005c _fflush_r
00029ef4 g     F .text	000000c4 _calloc_r
000354d8 g       *ABS*	00000000 __bss_start
00026e90 g     F .text	00000128 memset
00020290 g     F .text	000001c8 main
00035508 g     O .bss	00000004 alt_envp
000354f0 g     O .bss	00000004 __malloc_max_total_mem
0002e530 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a574 g     F .text	00000018 __swbuf
00028714 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0002a0a8 g     F .text	00000014 fclose
0002f9c8 g     F .text	00000044 altera_avalon_mutex_lock
0002391c g     F .text	00001688 _dtoa_r
000262fc g     F .text	0000080c _malloc_r
0002a6e8 g     F .text	00000030 __ascii_wctomb
00033854 g     O .rwdata	00000004 alt_errno
00025edc g     F .text	000000c4 _fwalk
0002b224 g     F .text	00000084 .hidden __divsi3
000255ec g     F .text	00000124 _malloc_trim_r
0003167c g       *ABS*	00000000 __CTOR_END__
00020b2c g     F .text	000003fc .hidden __mulsf3
0002871c g     F .text	000000dc strcmp
0003167c g       *ABS*	00000000 __flash_rodata_start
0003167c g       *ABS*	00000000 __DTOR_LIST__
0002c56c g     F .text	00000088 .hidden __nedf2
08000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0002e3f8 g     F .text	00000038 alt_irq_init
0002e0d8 g     F .text	00000064 alt_release_fd
000318bd g     O .rodata	00000100 .hidden __clz_tab
000354e4 g     O .bss	00000004 _PathLocale
000312e8 g     F .text	00000014 atexit
00029e40 g     F .text	00000060 _write_r
0002611c g     F .text	00000018 setlocale
000354dc g     O .bss	00000004 file_length
000354e0 g     O .bss	00000004 file_address
0003382c g     O .rwdata	00000004 _impure_ptr
00035500 g     O .bss	00000004 alt_argc
00024fa4 g     F .text	0000021c __sflush_r
000306f0 g     F .text	00000060 _do_dtors
00026108 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
00027adc g     F .text	00000064 __ulp
000255d4 g     F .text	00000018 __fp_unlock_all
00033840 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00026134 g     F .text	0000000c localeconv
00030814 g     F .text	00000050 alt_ic_isr_register
00033878 g       *ABS*	00000000 _edata
0002fb64 g     F .text	00000060 altera_avalon_uart_read_fd
08000000 g       *ABS*	00000000 _end
0002a0bc g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
0002ea08 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000308ec g     F .text	0000008c alt_ic_irq_disable
0003385c g     O .rwdata	00000008 alt_mailbox_simple_list
0002863c g     F .text	0000007c __swrite
00033838 g     O .rwdata	00000004 __malloc_trim_threshold
000260fc g     F .text	0000000c __locale_msgcharset
000312fc g     F .text	00000038 exit
00025fa0 g     F .text	000000c4 _fwalk_reent
000278e0 g     F .text	000001fc __mdiff
0002b2a8 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000255b0 g     F .text	00000004 __sfp_lock_release
0002ffe8 g     F .text	00000054 altera_avalon_uart_close
0002f298 g     F .text	000001e4 altera_avalon_mailbox_open
00031648 g     F .text	00000034 _exit
0003043c g     F .text	0000012c alt_alarm_start
00026140 g     F .text	000001bc __smakebuf_r
00021260 g     F .text	00000098 strlen
00030cf4 g     F .text	00000154 open
0002c5f4 g     F .text	000000dc .hidden __gedf2
0003383c g     O .rwdata	00000004 __wctomb
000204f0 g     F .text	00000054 sender_mailbox_callback
000288f4 g     F .text	00000018 __sprint_r
000307e0 g     F .text	00000034 alt_icache_flush_all
0003386c g     O .rwdata	00000004 alt_priority_mask
00030864 g     F .text	00000088 alt_ic_irq_enable
000234f0 g     F .text	0000001c __vfprintf_internal
0002f9a4 g     F .text	00000024 altera_avalon_mutex_close
00030078 g     F .text	000001dc altera_avalon_uart_read
0002a718 g     F .text	0000005c _wctomb_r
0002cedc g     F .text	000008fc .hidden __subdf3
00027314 g     F .text	000000b0 __lo0bits
00033870 g     O .rwdata	00000008 alt_alarm_list
00030690 g     F .text	00000060 _do_ctors
0002a628 g     F .text	000000c0 wcrtomb
0002da18 g     F .text	000000d0 close
00020664 g     F .text	000004c8 .hidden __addsf3
0002dd48 g     F .text	00000084 alt_load
0002a244 g     F .text	00000080 fputwc
000255b4 g     F .text	00000004 __sinit_lock_acquire
00027088 g     F .text	00000120 __multadd
00027060 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf4020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10955104 	addi	r2,r2,21828
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10955104 	addi	r2,r2,21828
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xf402012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xf4020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a73c17 	ldw	r2,-25360(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a73c17 	ldw	r2,-25360(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xf4020248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6ae0a14 	ori	gp,gp,47144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	10953614 	ori	r2,r2,21720

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18d59114 	ori	r3,r3,22084

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xf4020278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	002dd480 	call	2dd48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002dedc0 	call	2dedc <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xf402028c>

00020290 <main>:
#define ECHO_AMPLITUDE		0.5		// in range from 0 to 1



int main()
{
   20290:	defff504 	addi	sp,sp,-44
   20294:	dfc00a15 	stw	ra,40(sp)
   20298:	df000915 	stw	fp,36(sp)
   2029c:	df000904 	addi	fp,sp,36
	alt_u32 message[2];
	altera_avalon_mailbox_dev *sender_mailbox, *receiver_mailbox;	// handle to the Mailbox
	int activated_audio_effects = 0, i=0;	// each bit of this variable represents an effect which can be activated by toggling the switches
   202a0:	e03ff715 	stw	zero,-36(fp)
   202a4:	e03ff815 	stw	zero,-32(fp)

	// initialize the LEDS parallel port
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_SWITCHES_BASE, 0x00000000);	// sets all pins as input
   202a8:	0007883a 	mov	r3,zero
   202ac:	00800134 	movhi	r2,4
   202b0:	10840d04 	addi	r2,r2,4148
   202b4:	10c00035 	stwio	r3,0(r2)

	// Open mailbox
	receiver_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_FFT", NULL, receiver_mailbox_callback);
   202b8:	018000b4 	movhi	r6,2
   202bc:	31811604 	addi	r6,r6,1112
   202c0:	000b883a 	mov	r5,zero
   202c4:	010000f4 	movhi	r4,3
   202c8:	21059f04 	addi	r4,r4,5756
   202cc:	002f2980 	call	2f298 <altera_avalon_mailbox_open>
   202d0:	e0bff915 	stw	r2,-28(fp)
	if (!receiver_mailbox) {
   202d4:	e0bff917 	ldw	r2,-28(fp)
   202d8:	1000051e 	bne	r2,zero,202f0 <main+0x60>
		printf("FAIL: Unable to open mailbox from other processor\n");
   202dc:	010000f4 	movhi	r4,3
   202e0:	2105a404 	addi	r4,r4,5776
   202e4:	002124c0 	call	2124c <puts>
		return 1;
   202e8:	00800044 	movi	r2,1
   202ec:	00005506 	br	20444 <main+0x1b4>
	}
	sender_mailbox = altera_avalon_mailbox_open("/dev/mailbox_to_Sound_Acquisition", sender_mailbox_callback, NULL);
   202f0:	000d883a 	mov	r6,zero
   202f4:	014000b4 	movhi	r5,2
   202f8:	29413c04 	addi	r5,r5,1264
   202fc:	010000f4 	movhi	r4,3
   20300:	2105b104 	addi	r4,r4,5828
   20304:	002f2980 	call	2f298 <altera_avalon_mailbox_open>
   20308:	e0bffa15 	stw	r2,-24(fp)
	if (!sender_mailbox) {
   2030c:	e0bffa17 	ldw	r2,-24(fp)
   20310:	1000051e 	bne	r2,zero,20328 <main+0x98>
		printf("FAIL: Unable to open mailbox to other processor\n");
   20314:	010000f4 	movhi	r4,3
   20318:	2105ba04 	addi	r4,r4,5864
   2031c:	002124c0 	call	2124c <puts>
		return 1;
   20320:	00800044 	movi	r2,1
   20324:	00004706 	br	20444 <main+0x1b4>
	}

	printf("Hello, this is FFT processor\n");
   20328:	010000f4 	movhi	r4,3
   2032c:	2105c604 	addi	r4,r4,5912
   20330:	002124c0 	call	2124c <puts>
	while(1)
	{
		if (flag_data_ready)
   20334:	d0a72c03 	ldbu	r2,-25424(gp)
   20338:	10803fcc 	andi	r2,r2,255
   2033c:	1080201c 	xori	r2,r2,128
   20340:	10bfe004 	addi	r2,r2,-128
   20344:	103ffb26 	beq	r2,zero,20334 <__alt_data_end+0xf4020334>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20348:	0005303a 	rdctl	r2,status
   2034c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20350:	e0fffd17 	ldw	r3,-12(fp)
   20354:	00bfff84 	movi	r2,-2
   20358:	1884703a 	and	r2,r3,r2
   2035c:	1001703a 	wrctl	status,r2
  
  return context;
   20360:	e0bffd17 	ldw	r2,-12(fp)
		{
			alt_irq_context context;
			context = alt_irq_disable_all();
   20364:	e0bffc15 	stw	r2,-16(fp)

			printf("\n\nProcessing file at address: 0x%x with length: %u \n\n", file_address, file_length);
   20368:	d0a72e17 	ldw	r2,-25416(gp)
   2036c:	d0e72d17 	ldw	r3,-25420(gp)
   20370:	180d883a 	mov	r6,r3
   20374:	100b883a 	mov	r5,r2
   20378:	010000f4 	movhi	r4,3
   2037c:	2105ce04 	addi	r4,r4,5944
   20380:	00211500 	call	21150 <printf>
			// read the switches to see which effects are active
			activated_audio_effects = IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCHES_BASE);
   20384:	00800134 	movhi	r2,4
   20388:	10840c04 	addi	r2,r2,4144
   2038c:	10800037 	ldwio	r2,0(r2)
   20390:	e0bff715 	stw	r2,-36(fp)

			// TO DO:    FFT

			// check which effects are active and apply them
			printf("LIST OF AUDIO EFFECTS APPLIED:\n");
   20394:	010000f4 	movhi	r4,3
   20398:	2105dc04 	addi	r4,r4,6000
   2039c:	002124c0 	call	2124c <puts>
			if (activated_audio_effects & EFFECT_REVERSE)	// if this effect is active
   203a0:	e0bff717 	ldw	r2,-36(fp)
   203a4:	1080004c 	andi	r2,r2,1
   203a8:	10000326 	beq	r2,zero,203b8 <main+0x128>
			{
				printf("\tReversing audio...\n");
   203ac:	010000f4 	movhi	r4,3
   203b0:	2105e404 	addi	r4,r4,6032
   203b4:	002124c0 	call	2124c <puts>
			}
			if (activated_audio_effects & EFFECT_ECHO)
   203b8:	e0bff717 	ldw	r2,-36(fp)
   203bc:	1080008c 	andi	r2,r2,2
   203c0:	10000a26 	beq	r2,zero,203ec <main+0x15c>
			{
				printf("\tApplying echo...\n");
   203c4:	010000f4 	movhi	r4,3
   203c8:	2105e904 	addi	r4,r4,6052
   203cc:	002124c0 	call	2124c <puts>
				add_echo(file_address, file_length, ECHO_DELAY_MS, ECHO_AMPLITUDE);
   203d0:	d0a72e17 	ldw	r2,-25416(gp)
   203d4:	d0e72d17 	ldw	r3,-25420(gp)
   203d8:	01cfc034 	movhi	r7,16128
   203dc:	0180fa04 	movi	r6,1000
   203e0:	180b883a 	mov	r5,r3
   203e4:	1009883a 	mov	r4,r2
   203e8:	00205440 	call	20544 <add_echo>
			}
			printf("----------------------------------\n");
   203ec:	010000f4 	movhi	r4,3
   203f0:	2105ee04 	addi	r4,r4,6072
   203f4:	002124c0 	call	2124c <puts>
			// sends to the other processor the address and the length of the processed file
			printf("Sending processed file info to the other processor...\n");
   203f8:	010000f4 	movhi	r4,3
   203fc:	2105f704 	addi	r4,r4,6108
   20400:	002124c0 	call	2124c <puts>
			message[0] = file_address;
   20404:	d0a72e17 	ldw	r2,-25416(gp)
   20408:	e0bffe15 	stw	r2,-8(fp)
			message[1] = file_length;
   2040c:	d0a72d17 	ldw	r2,-25420(gp)
   20410:	e0bfff15 	stw	r2,-4(fp)
			altera_avalon_mailbox_send (sender_mailbox, message, 0, ISR);	// sends the info through the mailbox
   20414:	e0bffe04 	addi	r2,fp,-8
   20418:	000f883a 	mov	r7,zero
   2041c:	000d883a 	mov	r6,zero
   20420:	100b883a 	mov	r5,r2
   20424:	e13ffa17 	ldw	r4,-24(fp)
   20428:	002f60c0 	call	2f60c <altera_avalon_mailbox_send>

			flag_data_ready = 0;
   2042c:	d0272c05 	stb	zero,-25424(gp)
   20430:	e0bffc17 	ldw	r2,-16(fp)
   20434:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20438:	e0bffb17 	ldw	r2,-20(fp)
   2043c:	1001703a 	wrctl	status,r2
			alt_irq_enable_all(context);
		}


	}
   20440:	003fbc06 	br	20334 <__alt_data_end+0xf4020334>

	altera_avalon_mailbox_close(receiver_mailbox);
	altera_avalon_mailbox_close(sender_mailbox);
	return 0;
}
   20444:	e037883a 	mov	sp,fp
   20448:	dfc00117 	ldw	ra,4(sp)
   2044c:	df000017 	ldw	fp,0(sp)
   20450:	dec00204 	addi	sp,sp,8
   20454:	f800283a 	ret

00020458 <receiver_mailbox_callback>:




/* Get message read from mailbox */
void receiver_mailbox_callback(void* message) {
   20458:	defffc04 	addi	sp,sp,-16
   2045c:	dfc00315 	stw	ra,12(sp)
   20460:	df000215 	stw	fp,8(sp)
   20464:	df000204 	addi	fp,sp,8
   20468:	e13fff15 	stw	r4,-4(fp)

	alt_u32* data = (alt_u32*)message;	// cast from void* to alt_u32*
   2046c:	e0bfff17 	ldw	r2,-4(fp)
   20470:	e0bffe15 	stw	r2,-8(fp)

	if (message != NULL) {
   20474:	e0bfff17 	ldw	r2,-4(fp)
   20478:	10001426 	beq	r2,zero,204cc <receiver_mailbox_callback+0x74>
		printf("Message received from sound acquisition CPU: msg[0]: %lx   msg[1]: %lx\n", data[0], data[1]);
   2047c:	e0bffe17 	ldw	r2,-8(fp)
   20480:	10c00017 	ldw	r3,0(r2)
   20484:	e0bffe17 	ldw	r2,-8(fp)
   20488:	10800104 	addi	r2,r2,4
   2048c:	10800017 	ldw	r2,0(r2)
   20490:	100d883a 	mov	r6,r2
   20494:	180b883a 	mov	r5,r3
   20498:	010000f4 	movhi	r4,3
   2049c:	21060504 	addi	r4,r4,6164
   204a0:	00211500 	call	21150 <printf>
		file_address = (unsigned int*)data[0];
   204a4:	e0bffe17 	ldw	r2,-8(fp)
   204a8:	10800017 	ldw	r2,0(r2)
   204ac:	d0a72e15 	stw	r2,-25416(gp)
		file_length = (unsigned int) data[1];
   204b0:	e0bffe17 	ldw	r2,-8(fp)
   204b4:	10800104 	addi	r2,r2,4
   204b8:	10800017 	ldw	r2,0(r2)
   204bc:	d0a72d15 	stw	r2,-25420(gp)
		flag_data_ready = 1;	// raises a flag to start processing the data
   204c0:	00800044 	movi	r2,1
   204c4:	d0a72c05 	stb	r2,-25424(gp)
	} else {
		printf("[FFT]Incomplete receive\n");
	}
}
   204c8:	00000306 	br	204d8 <receiver_mailbox_callback+0x80>
		printf("Message received from sound acquisition CPU: msg[0]: %lx   msg[1]: %lx\n", data[0], data[1]);
		file_address = (unsigned int*)data[0];
		file_length = (unsigned int) data[1];
		flag_data_ready = 1;	// raises a flag to start processing the data
	} else {
		printf("[FFT]Incomplete receive\n");
   204cc:	010000f4 	movhi	r4,3
   204d0:	21061704 	addi	r4,r4,6236
   204d4:	002124c0 	call	2124c <puts>
	}
}
   204d8:	0001883a 	nop
   204dc:	e037883a 	mov	sp,fp
   204e0:	dfc00117 	ldw	ra,4(sp)
   204e4:	df000017 	ldw	fp,0(sp)
   204e8:	dec00204 	addi	sp,sp,8
   204ec:	f800283a 	ret

000204f0 <sender_mailbox_callback>:





void sender_mailbox_callback(void* report, int status) {
   204f0:	defffc04 	addi	sp,sp,-16
   204f4:	dfc00315 	stw	ra,12(sp)
   204f8:	df000215 	stw	fp,8(sp)
   204fc:	df000204 	addi	fp,sp,8
   20500:	e13ffe15 	stw	r4,-8(fp)
   20504:	e17fff15 	stw	r5,-4(fp)
	if (status) {
   20508:	e0bfff17 	ldw	r2,-4(fp)
   2050c:	10000426 	beq	r2,zero,20520 <sender_mailbox_callback+0x30>
		printf("Processed file info sent with success.\n");
   20510:	010000f4 	movhi	r4,3
   20514:	21061d04 	addi	r4,r4,6260
   20518:	002124c0 	call	2124c <puts>
	} else {
		printf("Error in transfer\n");
	}
}
   2051c:	00000306 	br	2052c <sender_mailbox_callback+0x3c>

void sender_mailbox_callback(void* report, int status) {
	if (status) {
		printf("Processed file info sent with success.\n");
	} else {
		printf("Error in transfer\n");
   20520:	010000f4 	movhi	r4,3
   20524:	21062704 	addi	r4,r4,6300
   20528:	002124c0 	call	2124c <puts>
	}
}
   2052c:	0001883a 	nop
   20530:	e037883a 	mov	sp,fp
   20534:	dfc00117 	ldw	ra,4(sp)
   20538:	df000017 	ldw	fp,0(sp)
   2053c:	dec00204 	addi	sp,sp,8
   20540:	f800283a 	ret

00020544 <add_echo>:




void add_echo(unsigned int *file_address, unsigned int file_length, unsigned int delay_ms, float amplitude)
{
   20544:	defff604 	addi	sp,sp,-40
   20548:	dfc00915 	stw	ra,36(sp)
   2054c:	df000815 	stw	fp,32(sp)
   20550:	dc000715 	stw	r16,28(sp)
   20554:	df000804 	addi	fp,sp,32
   20558:	e13ffb15 	stw	r4,-20(fp)
   2055c:	e17ffc15 	stw	r5,-16(fp)
   20560:	e1bffd15 	stw	r6,-12(fp)
   20564:	e1fffe15 	stw	r7,-8(fp)
	unsigned int i, samples_delay;
	float sample_amplitude;

	samples_delay = delay_ms*SAMPLING_FREQ_kHz;
   20568:	e0bffd17 	ldw	r2,-12(fp)
   2056c:	10800c24 	muli	r2,r2,48
   20570:	e0bff915 	stw	r2,-28(fp)
	for (i=samples_delay; i<file_length; i++)
   20574:	e0bff917 	ldw	r2,-28(fp)
   20578:	e0bff815 	stw	r2,-32(fp)
   2057c:	00002c06 	br	20630 <add_echo+0xec>
	{
		sample_amplitude = IORD_32DIRECT(file_address, (i-samples_delay)*4) * amplitude;
   20580:	e0fff817 	ldw	r3,-32(fp)
   20584:	e0bff917 	ldw	r2,-28(fp)
   20588:	1885c83a 	sub	r2,r3,r2
   2058c:	1085883a 	add	r2,r2,r2
   20590:	1085883a 	add	r2,r2,r2
   20594:	1007883a 	mov	r3,r2
   20598:	e0bffb17 	ldw	r2,-20(fp)
   2059c:	10c5883a 	add	r2,r2,r3
   205a0:	10800037 	ldwio	r2,0(r2)
   205a4:	1009883a 	mov	r4,r2
   205a8:	0020f980 	call	20f98 <__floatsisf>
   205ac:	1007883a 	mov	r3,r2
   205b0:	e17ffe17 	ldw	r5,-8(fp)
   205b4:	1809883a 	mov	r4,r3
   205b8:	0020b2c0 	call	20b2c <__mulsf3>
   205bc:	1007883a 	mov	r3,r2
   205c0:	e0fffa15 	stw	r3,-24(fp)
		sample_amplitude += IORD_32DIRECT(file_address, i*4);
   205c4:	e0bff817 	ldw	r2,-32(fp)
   205c8:	1085883a 	add	r2,r2,r2
   205cc:	1085883a 	add	r2,r2,r2
   205d0:	1007883a 	mov	r3,r2
   205d4:	e0bffb17 	ldw	r2,-20(fp)
   205d8:	10c5883a 	add	r2,r2,r3
   205dc:	10800037 	ldwio	r2,0(r2)
   205e0:	1009883a 	mov	r4,r2
   205e4:	0020f980 	call	20f98 <__floatsisf>
   205e8:	1007883a 	mov	r3,r2
   205ec:	180b883a 	mov	r5,r3
   205f0:	e13ffa17 	ldw	r4,-24(fp)
   205f4:	00206640 	call	20664 <__addsf3>
   205f8:	1007883a 	mov	r3,r2
   205fc:	e0fffa15 	stw	r3,-24(fp)
		IOWR_32DIRECT(file_address, i*4, sample_amplitude);
   20600:	e0bff817 	ldw	r2,-32(fp)
   20604:	1085883a 	add	r2,r2,r2
   20608:	1085883a 	add	r2,r2,r2
   2060c:	1007883a 	mov	r3,r2
   20610:	e0bffb17 	ldw	r2,-20(fp)
   20614:	10e1883a 	add	r16,r2,r3
   20618:	e13ffa17 	ldw	r4,-24(fp)
   2061c:	0020f280 	call	20f28 <__fixsfsi>
   20620:	80800035 	stwio	r2,0(r16)
{
	unsigned int i, samples_delay;
	float sample_amplitude;

	samples_delay = delay_ms*SAMPLING_FREQ_kHz;
	for (i=samples_delay; i<file_length; i++)
   20624:	e0bff817 	ldw	r2,-32(fp)
   20628:	10800044 	addi	r2,r2,1
   2062c:	e0bff815 	stw	r2,-32(fp)
   20630:	e0fff817 	ldw	r3,-32(fp)
   20634:	e0bffc17 	ldw	r2,-16(fp)
   20638:	18bfd136 	bltu	r3,r2,20580 <__alt_data_end+0xf4020580>
	{
		sample_amplitude = IORD_32DIRECT(file_address, (i-samples_delay)*4) * amplitude;
		sample_amplitude += IORD_32DIRECT(file_address, i*4);
		IOWR_32DIRECT(file_address, i*4, sample_amplitude);
	}
	printf("Echo applied\n");
   2063c:	010000f4 	movhi	r4,3
   20640:	21062c04 	addi	r4,r4,6320
   20644:	002124c0 	call	2124c <puts>
}
   20648:	0001883a 	nop
   2064c:	e6ffff04 	addi	sp,fp,-4
   20650:	dfc00217 	ldw	ra,8(sp)
   20654:	df000117 	ldw	fp,4(sp)
   20658:	dc000017 	ldw	r16,0(sp)
   2065c:	dec00304 	addi	sp,sp,12
   20660:	f800283a 	ret

00020664 <__addsf3>:
   20664:	defffc04 	addi	sp,sp,-16
   20668:	2004d7fa 	srli	r2,r4,31
   2066c:	280cd5fa 	srli	r6,r5,23
   20670:	dc000015 	stw	r16,0(sp)
   20674:	00c02034 	movhi	r3,128
   20678:	2020d5fa 	srli	r16,r4,23
   2067c:	280ed7fa 	srli	r7,r5,31
   20680:	18ffffc4 	addi	r3,r3,-1
   20684:	dc400115 	stw	r17,4(sp)
   20688:	1908703a 	and	r4,r3,r4
   2068c:	194a703a 	and	r5,r3,r5
   20690:	dfc00315 	stw	ra,12(sp)
   20694:	dc800215 	stw	r18,8(sp)
   20698:	14403fcc 	andi	r17,r2,255
   2069c:	84003fcc 	andi	r16,r16,255
   206a0:	200890fa 	slli	r4,r4,3
   206a4:	31803fcc 	andi	r6,r6,255
   206a8:	280a90fa 	slli	r5,r5,3
   206ac:	89c05026 	beq	r17,r7,207f0 <__addsf3+0x18c>
   206b0:	8185c83a 	sub	r2,r16,r6
   206b4:	00807a0e 	bge	zero,r2,208a0 <__addsf3+0x23c>
   206b8:	30001e1e 	bne	r6,zero,20734 <__addsf3+0xd0>
   206bc:	28006d1e 	bne	r5,zero,20874 <__addsf3+0x210>
   206c0:	208001cc 	andi	r2,r4,7
   206c4:	10000426 	beq	r2,zero,206d8 <__addsf3+0x74>
   206c8:	208003cc 	andi	r2,r4,15
   206cc:	00c00104 	movi	r3,4
   206d0:	10c00126 	beq	r2,r3,206d8 <__addsf3+0x74>
   206d4:	20c9883a 	add	r4,r4,r3
   206d8:	2081002c 	andhi	r2,r4,1024
   206dc:	10003926 	beq	r2,zero,207c4 <__addsf3+0x160>
   206e0:	84000044 	addi	r16,r16,1
   206e4:	00803fc4 	movi	r2,255
   206e8:	80807826 	beq	r16,r2,208cc <__addsf3+0x268>
   206ec:	200891ba 	slli	r4,r4,6
   206f0:	8805883a 	mov	r2,r17
   206f4:	2008d27a 	srli	r4,r4,9
   206f8:	84003fcc 	andi	r16,r16,255
   206fc:	800695fa 	slli	r3,r16,23
   20700:	10803fcc 	andi	r2,r2,255
   20704:	04002034 	movhi	r16,128
   20708:	843fffc4 	addi	r16,r16,-1
   2070c:	100497fa 	slli	r2,r2,31
   20710:	2408703a 	and	r4,r4,r16
   20714:	20e0b03a 	or	r16,r4,r3
   20718:	8084b03a 	or	r2,r16,r2
   2071c:	dfc00317 	ldw	ra,12(sp)
   20720:	dc800217 	ldw	r18,8(sp)
   20724:	dc400117 	ldw	r17,4(sp)
   20728:	dc000017 	ldw	r16,0(sp)
   2072c:	dec00404 	addi	sp,sp,16
   20730:	f800283a 	ret
   20734:	00c03fc4 	movi	r3,255
   20738:	80ffe126 	beq	r16,r3,206c0 <__alt_data_end+0xf40206c0>
   2073c:	29410034 	orhi	r5,r5,1024
   20740:	00c006c4 	movi	r3,27
   20744:	18807516 	blt	r3,r2,2091c <__addsf3+0x2b8>
   20748:	00c00804 	movi	r3,32
   2074c:	1887c83a 	sub	r3,r3,r2
   20750:	28c6983a 	sll	r3,r5,r3
   20754:	288ad83a 	srl	r5,r5,r2
   20758:	1804c03a 	cmpne	r2,r3,zero
   2075c:	288ab03a 	or	r5,r5,r2
   20760:	2149c83a 	sub	r4,r4,r5
   20764:	2081002c 	andhi	r2,r4,1024
   20768:	10001426 	beq	r2,zero,207bc <__addsf3+0x158>
   2076c:	04810034 	movhi	r18,1024
   20770:	94bfffc4 	addi	r18,r18,-1
   20774:	24a4703a 	and	r18,r4,r18
   20778:	9009883a 	mov	r4,r18
   2077c:	00210bc0 	call	210bc <__clzsi2>
   20780:	10bffec4 	addi	r2,r2,-5
   20784:	90a4983a 	sll	r18,r18,r2
   20788:	14005416 	blt	r2,r16,208dc <__addsf3+0x278>
   2078c:	1405c83a 	sub	r2,r2,r16
   20790:	11000044 	addi	r4,r2,1
   20794:	00800804 	movi	r2,32
   20798:	1105c83a 	sub	r2,r2,r4
   2079c:	9084983a 	sll	r2,r18,r2
   207a0:	9124d83a 	srl	r18,r18,r4
   207a4:	0021883a 	mov	r16,zero
   207a8:	1008c03a 	cmpne	r4,r2,zero
   207ac:	9108b03a 	or	r4,r18,r4
   207b0:	003fc306 	br	206c0 <__alt_data_end+0xf40206c0>
   207b4:	1000db26 	beq	r2,zero,20b24 <__addsf3+0x4c0>
   207b8:	1009883a 	mov	r4,r2
   207bc:	208001cc 	andi	r2,r4,7
   207c0:	103fc11e 	bne	r2,zero,206c8 <__alt_data_end+0xf40206c8>
   207c4:	2006d0fa 	srli	r3,r4,3
   207c8:	01003fc4 	movi	r4,255
   207cc:	8805883a 	mov	r2,r17
   207d0:	8100241e 	bne	r16,r4,20864 <__addsf3+0x200>
   207d4:	18006e26 	beq	r3,zero,20990 <__addsf3+0x32c>
   207d8:	19001034 	orhi	r4,r3,64
   207dc:	00c02034 	movhi	r3,128
   207e0:	18ffffc4 	addi	r3,r3,-1
   207e4:	043fffc4 	movi	r16,-1
   207e8:	20c8703a 	and	r4,r4,r3
   207ec:	003fc206 	br	206f8 <__alt_data_end+0xf40206f8>
   207f0:	8187c83a 	sub	r3,r16,r6
   207f4:	00c03e0e 	bge	zero,r3,208f0 <__addsf3+0x28c>
   207f8:	30002326 	beq	r6,zero,20888 <__addsf3+0x224>
   207fc:	01803fc4 	movi	r6,255
   20800:	81bfaf26 	beq	r16,r6,206c0 <__alt_data_end+0xf40206c0>
   20804:	29410034 	orhi	r5,r5,1024
   20808:	018006c4 	movi	r6,27
   2080c:	30c07416 	blt	r6,r3,209e0 <__addsf3+0x37c>
   20810:	01800804 	movi	r6,32
   20814:	30cdc83a 	sub	r6,r6,r3
   20818:	298c983a 	sll	r6,r5,r6
   2081c:	28cad83a 	srl	r5,r5,r3
   20820:	3006c03a 	cmpne	r3,r6,zero
   20824:	28cab03a 	or	r5,r5,r3
   20828:	2149883a 	add	r4,r4,r5
   2082c:	20c1002c 	andhi	r3,r4,1024
   20830:	183fe226 	beq	r3,zero,207bc <__alt_data_end+0xf40207bc>
   20834:	84000044 	addi	r16,r16,1
   20838:	00c03fc4 	movi	r3,255
   2083c:	80c05426 	beq	r16,r3,20990 <__addsf3+0x32c>
   20840:	00bf0034 	movhi	r2,64512
   20844:	10bfffc4 	addi	r2,r2,-1
   20848:	20c0004c 	andi	r3,r4,1
   2084c:	2088703a 	and	r4,r4,r2
   20850:	2008d07a 	srli	r4,r4,1
   20854:	20c8b03a 	or	r4,r4,r3
   20858:	003f9906 	br	206c0 <__alt_data_end+0xf40206c0>
   2085c:	0007883a 	mov	r3,zero
   20860:	0005883a 	mov	r2,zero
   20864:	01002034 	movhi	r4,128
   20868:	213fffc4 	addi	r4,r4,-1
   2086c:	1908703a 	and	r4,r3,r4
   20870:	003fa106 	br	206f8 <__alt_data_end+0xf40206f8>
   20874:	10bfffc4 	addi	r2,r2,-1
   20878:	103fb926 	beq	r2,zero,20760 <__alt_data_end+0xf4020760>
   2087c:	00c03fc4 	movi	r3,255
   20880:	80ffaf1e 	bne	r16,r3,20740 <__alt_data_end+0xf4020740>
   20884:	003f8e06 	br	206c0 <__alt_data_end+0xf40206c0>
   20888:	283f8d26 	beq	r5,zero,206c0 <__alt_data_end+0xf40206c0>
   2088c:	18ffffc4 	addi	r3,r3,-1
   20890:	183fe526 	beq	r3,zero,20828 <__alt_data_end+0xf4020828>
   20894:	01803fc4 	movi	r6,255
   20898:	81bfdb1e 	bne	r16,r6,20808 <__alt_data_end+0xf4020808>
   2089c:	003f8806 	br	206c0 <__alt_data_end+0xf40206c0>
   208a0:	1000201e 	bne	r2,zero,20924 <__addsf3+0x2c0>
   208a4:	80800044 	addi	r2,r16,1
   208a8:	10803fcc 	andi	r2,r2,255
   208ac:	01800044 	movi	r6,1
   208b0:	3080450e 	bge	r6,r2,209c8 <__addsf3+0x364>
   208b4:	2165c83a 	sub	r18,r4,r5
   208b8:	90c1002c 	andhi	r3,r18,1024
   208bc:	18002b26 	beq	r3,zero,2096c <__addsf3+0x308>
   208c0:	2925c83a 	sub	r18,r5,r4
   208c4:	3823883a 	mov	r17,r7
   208c8:	003fab06 	br	20778 <__alt_data_end+0xf4020778>
   208cc:	8805883a 	mov	r2,r17
   208d0:	043fffc4 	movi	r16,-1
   208d4:	0009883a 	mov	r4,zero
   208d8:	003f8706 	br	206f8 <__alt_data_end+0xf40206f8>
   208dc:	013f0034 	movhi	r4,64512
   208e0:	213fffc4 	addi	r4,r4,-1
   208e4:	80a1c83a 	sub	r16,r16,r2
   208e8:	9108703a 	and	r4,r18,r4
   208ec:	003f7406 	br	206c0 <__alt_data_end+0xf40206c0>
   208f0:	1800411e 	bne	r3,zero,209f8 <__addsf3+0x394>
   208f4:	80c00044 	addi	r3,r16,1
   208f8:	19c03fcc 	andi	r7,r3,255
   208fc:	01800044 	movi	r6,1
   20900:	31c0260e 	bge	r6,r7,2099c <__addsf3+0x338>
   20904:	01803fc4 	movi	r6,255
   20908:	19802126 	beq	r3,r6,20990 <__addsf3+0x32c>
   2090c:	2149883a 	add	r4,r4,r5
   20910:	2008d07a 	srli	r4,r4,1
   20914:	1821883a 	mov	r16,r3
   20918:	003f6906 	br	206c0 <__alt_data_end+0xf40206c0>
   2091c:	01400044 	movi	r5,1
   20920:	003f8f06 	br	20760 <__alt_data_end+0xf4020760>
   20924:	8000151e 	bne	r16,zero,2097c <__addsf3+0x318>
   20928:	20002f26 	beq	r4,zero,209e8 <__addsf3+0x384>
   2092c:	0084303a 	nor	r2,zero,r2
   20930:	10000a26 	beq	r2,zero,2095c <__addsf3+0x2f8>
   20934:	00c03fc4 	movi	r3,255
   20938:	30c02b26 	beq	r6,r3,209e8 <__addsf3+0x384>
   2093c:	00c006c4 	movi	r3,27
   20940:	18806d16 	blt	r3,r2,20af8 <__addsf3+0x494>
   20944:	00c00804 	movi	r3,32
   20948:	1887c83a 	sub	r3,r3,r2
   2094c:	20c6983a 	sll	r3,r4,r3
   20950:	2084d83a 	srl	r2,r4,r2
   20954:	1808c03a 	cmpne	r4,r3,zero
   20958:	1108b03a 	or	r4,r2,r4
   2095c:	2909c83a 	sub	r4,r5,r4
   20960:	3021883a 	mov	r16,r6
   20964:	3823883a 	mov	r17,r7
   20968:	003f7e06 	br	20764 <__alt_data_end+0xf4020764>
   2096c:	903f821e 	bne	r18,zero,20778 <__alt_data_end+0xf4020778>
   20970:	0005883a 	mov	r2,zero
   20974:	0021883a 	mov	r16,zero
   20978:	003fba06 	br	20864 <__alt_data_end+0xf4020864>
   2097c:	00c03fc4 	movi	r3,255
   20980:	30c01926 	beq	r6,r3,209e8 <__addsf3+0x384>
   20984:	0085c83a 	sub	r2,zero,r2
   20988:	21010034 	orhi	r4,r4,1024
   2098c:	003feb06 	br	2093c <__alt_data_end+0xf402093c>
   20990:	043fffc4 	movi	r16,-1
   20994:	0009883a 	mov	r4,zero
   20998:	003f5706 	br	206f8 <__alt_data_end+0xf40206f8>
   2099c:	80004a1e 	bne	r16,zero,20ac8 <__addsf3+0x464>
   209a0:	20005926 	beq	r4,zero,20b08 <__addsf3+0x4a4>
   209a4:	283f4626 	beq	r5,zero,206c0 <__alt_data_end+0xf40206c0>
   209a8:	2149883a 	add	r4,r4,r5
   209ac:	2081002c 	andhi	r2,r4,1024
   209b0:	103f8226 	beq	r2,zero,207bc <__alt_data_end+0xf40207bc>
   209b4:	00bf0034 	movhi	r2,64512
   209b8:	10bfffc4 	addi	r2,r2,-1
   209bc:	3021883a 	mov	r16,r6
   209c0:	2088703a 	and	r4,r4,r2
   209c4:	003f3e06 	br	206c0 <__alt_data_end+0xf40206c0>
   209c8:	8000121e 	bne	r16,zero,20a14 <__addsf3+0x3b0>
   209cc:	2000261e 	bne	r4,zero,20a68 <__addsf3+0x404>
   209d0:	283fa226 	beq	r5,zero,2085c <__alt_data_end+0xf402085c>
   209d4:	2809883a 	mov	r4,r5
   209d8:	3823883a 	mov	r17,r7
   209dc:	003f3806 	br	206c0 <__alt_data_end+0xf40206c0>
   209e0:	01400044 	movi	r5,1
   209e4:	003f9006 	br	20828 <__alt_data_end+0xf4020828>
   209e8:	2809883a 	mov	r4,r5
   209ec:	3021883a 	mov	r16,r6
   209f0:	3823883a 	mov	r17,r7
   209f4:	003f3206 	br	206c0 <__alt_data_end+0xf40206c0>
   209f8:	80000c1e 	bne	r16,zero,20a2c <__addsf3+0x3c8>
   209fc:	20002f26 	beq	r4,zero,20abc <__addsf3+0x458>
   20a00:	00c6303a 	nor	r3,zero,r3
   20a04:	18002b1e 	bne	r3,zero,20ab4 <__addsf3+0x450>
   20a08:	2149883a 	add	r4,r4,r5
   20a0c:	3021883a 	mov	r16,r6
   20a10:	003f8606 	br	2082c <__alt_data_end+0xf402082c>
   20a14:	20001b1e 	bne	r4,zero,20a84 <__addsf3+0x420>
   20a18:	28003926 	beq	r5,zero,20b00 <__addsf3+0x49c>
   20a1c:	2809883a 	mov	r4,r5
   20a20:	3823883a 	mov	r17,r7
   20a24:	04003fc4 	movi	r16,255
   20a28:	003f2506 	br	206c0 <__alt_data_end+0xf40206c0>
   20a2c:	01c03fc4 	movi	r7,255
   20a30:	31c02226 	beq	r6,r7,20abc <__addsf3+0x458>
   20a34:	00c7c83a 	sub	r3,zero,r3
   20a38:	21010034 	orhi	r4,r4,1024
   20a3c:	01c006c4 	movi	r7,27
   20a40:	38c03616 	blt	r7,r3,20b1c <__addsf3+0x4b8>
   20a44:	01c00804 	movi	r7,32
   20a48:	38cfc83a 	sub	r7,r7,r3
   20a4c:	21ce983a 	sll	r7,r4,r7
   20a50:	20c6d83a 	srl	r3,r4,r3
   20a54:	3808c03a 	cmpne	r4,r7,zero
   20a58:	1906b03a 	or	r3,r3,r4
   20a5c:	1949883a 	add	r4,r3,r5
   20a60:	3021883a 	mov	r16,r6
   20a64:	003f7106 	br	2082c <__alt_data_end+0xf402082c>
   20a68:	283f1526 	beq	r5,zero,206c0 <__alt_data_end+0xf40206c0>
   20a6c:	2145c83a 	sub	r2,r4,r5
   20a70:	10c1002c 	andhi	r3,r2,1024
   20a74:	183f4f26 	beq	r3,zero,207b4 <__alt_data_end+0xf40207b4>
   20a78:	2909c83a 	sub	r4,r5,r4
   20a7c:	3823883a 	mov	r17,r7
   20a80:	003f0f06 	br	206c0 <__alt_data_end+0xf40206c0>
   20a84:	28001a26 	beq	r5,zero,20af0 <__addsf3+0x48c>
   20a88:	2008d0fa 	srli	r4,r4,3
   20a8c:	2080102c 	andhi	r2,r4,64
   20a90:	10000526 	beq	r2,zero,20aa8 <__addsf3+0x444>
   20a94:	280ad0fa 	srli	r5,r5,3
   20a98:	2880102c 	andhi	r2,r5,64
   20a9c:	1000021e 	bne	r2,zero,20aa8 <__addsf3+0x444>
   20aa0:	2809883a 	mov	r4,r5
   20aa4:	3823883a 	mov	r17,r7
   20aa8:	200890fa 	slli	r4,r4,3
   20aac:	04003fc4 	movi	r16,255
   20ab0:	003f0306 	br	206c0 <__alt_data_end+0xf40206c0>
   20ab4:	01c03fc4 	movi	r7,255
   20ab8:	31ffe01e 	bne	r6,r7,20a3c <__alt_data_end+0xf4020a3c>
   20abc:	2809883a 	mov	r4,r5
   20ac0:	3021883a 	mov	r16,r6
   20ac4:	003efe06 	br	206c0 <__alt_data_end+0xf40206c0>
   20ac8:	20001126 	beq	r4,zero,20b10 <__addsf3+0x4ac>
   20acc:	28000826 	beq	r5,zero,20af0 <__addsf3+0x48c>
   20ad0:	2008d0fa 	srli	r4,r4,3
   20ad4:	2080102c 	andhi	r2,r4,64
   20ad8:	103ff326 	beq	r2,zero,20aa8 <__alt_data_end+0xf4020aa8>
   20adc:	280ad0fa 	srli	r5,r5,3
   20ae0:	2880102c 	andhi	r2,r5,64
   20ae4:	103ff01e 	bne	r2,zero,20aa8 <__alt_data_end+0xf4020aa8>
   20ae8:	2809883a 	mov	r4,r5
   20aec:	003fee06 	br	20aa8 <__alt_data_end+0xf4020aa8>
   20af0:	04003fc4 	movi	r16,255
   20af4:	003ef206 	br	206c0 <__alt_data_end+0xf40206c0>
   20af8:	01000044 	movi	r4,1
   20afc:	003f9706 	br	2095c <__alt_data_end+0xf402095c>
   20b00:	0005883a 	mov	r2,zero
   20b04:	003f3406 	br	207d8 <__alt_data_end+0xf40207d8>
   20b08:	2809883a 	mov	r4,r5
   20b0c:	003eec06 	br	206c0 <__alt_data_end+0xf40206c0>
   20b10:	2809883a 	mov	r4,r5
   20b14:	04003fc4 	movi	r16,255
   20b18:	003ee906 	br	206c0 <__alt_data_end+0xf40206c0>
   20b1c:	00c00044 	movi	r3,1
   20b20:	003fce06 	br	20a5c <__alt_data_end+0xf4020a5c>
   20b24:	0005883a 	mov	r2,zero
   20b28:	003f4e06 	br	20864 <__alt_data_end+0xf4020864>

00020b2c <__mulsf3>:
   20b2c:	defff504 	addi	sp,sp,-44
   20b30:	dc000115 	stw	r16,4(sp)
   20b34:	2020d5fa 	srli	r16,r4,23
   20b38:	dd400615 	stw	r21,24(sp)
   20b3c:	202ad7fa 	srli	r21,r4,31
   20b40:	dc800315 	stw	r18,12(sp)
   20b44:	04802034 	movhi	r18,128
   20b48:	df000915 	stw	fp,36(sp)
   20b4c:	dd000515 	stw	r20,20(sp)
   20b50:	94bfffc4 	addi	r18,r18,-1
   20b54:	dfc00a15 	stw	ra,40(sp)
   20b58:	ddc00815 	stw	r23,32(sp)
   20b5c:	dd800715 	stw	r22,28(sp)
   20b60:	dcc00415 	stw	r19,16(sp)
   20b64:	dc400215 	stw	r17,8(sp)
   20b68:	84003fcc 	andi	r16,r16,255
   20b6c:	9124703a 	and	r18,r18,r4
   20b70:	a829883a 	mov	r20,r21
   20b74:	af003fcc 	andi	fp,r21,255
   20b78:	80005426 	beq	r16,zero,20ccc <__mulsf3+0x1a0>
   20b7c:	00803fc4 	movi	r2,255
   20b80:	80802f26 	beq	r16,r2,20c40 <__mulsf3+0x114>
   20b84:	91002034 	orhi	r4,r18,128
   20b88:	202490fa 	slli	r18,r4,3
   20b8c:	843fe044 	addi	r16,r16,-127
   20b90:	0023883a 	mov	r17,zero
   20b94:	002f883a 	mov	r23,zero
   20b98:	2804d5fa 	srli	r2,r5,23
   20b9c:	282cd7fa 	srli	r22,r5,31
   20ba0:	01002034 	movhi	r4,128
   20ba4:	213fffc4 	addi	r4,r4,-1
   20ba8:	10803fcc 	andi	r2,r2,255
   20bac:	2166703a 	and	r19,r4,r5
   20bb0:	b1803fcc 	andi	r6,r22,255
   20bb4:	10004c26 	beq	r2,zero,20ce8 <__mulsf3+0x1bc>
   20bb8:	00c03fc4 	movi	r3,255
   20bbc:	10c04726 	beq	r2,r3,20cdc <__mulsf3+0x1b0>
   20bc0:	99002034 	orhi	r4,r19,128
   20bc4:	202690fa 	slli	r19,r4,3
   20bc8:	10bfe044 	addi	r2,r2,-127
   20bcc:	0007883a 	mov	r3,zero
   20bd0:	80a1883a 	add	r16,r16,r2
   20bd4:	010003c4 	movi	r4,15
   20bd8:	1c44b03a 	or	r2,r3,r17
   20bdc:	b56af03a 	xor	r21,r22,r21
   20be0:	81c00044 	addi	r7,r16,1
   20be4:	20806b36 	bltu	r4,r2,20d94 <__mulsf3+0x268>
   20be8:	100490ba 	slli	r2,r2,2
   20bec:	010000b4 	movhi	r4,2
   20bf0:	21030004 	addi	r4,r4,3072
   20bf4:	1105883a 	add	r2,r2,r4
   20bf8:	10800017 	ldw	r2,0(r2)
   20bfc:	1000683a 	jmp	r2
   20c00:	00020d94 	movui	zero,2102
   20c04:	00020c54 	movui	zero,2097
   20c08:	00020c54 	movui	zero,2097
   20c0c:	00020c50 	cmplti	zero,zero,2097
   20c10:	00020d78 	rdprs	zero,zero,2101
   20c14:	00020d78 	rdprs	zero,zero,2101
   20c18:	00020d64 	muli	zero,zero,2101
   20c1c:	00020c50 	cmplti	zero,zero,2097
   20c20:	00020d78 	rdprs	zero,zero,2101
   20c24:	00020d64 	muli	zero,zero,2101
   20c28:	00020d78 	rdprs	zero,zero,2101
   20c2c:	00020c50 	cmplti	zero,zero,2097
   20c30:	00020d84 	movi	zero,2102
   20c34:	00020d84 	movi	zero,2102
   20c38:	00020d84 	movi	zero,2102
   20c3c:	00020e60 	cmpeqi	zero,zero,2105
   20c40:	90003b1e 	bne	r18,zero,20d30 <__mulsf3+0x204>
   20c44:	04400204 	movi	r17,8
   20c48:	05c00084 	movi	r23,2
   20c4c:	003fd206 	br	20b98 <__alt_data_end+0xf4020b98>
   20c50:	302b883a 	mov	r21,r6
   20c54:	00800084 	movi	r2,2
   20c58:	18802626 	beq	r3,r2,20cf4 <__mulsf3+0x1c8>
   20c5c:	008000c4 	movi	r2,3
   20c60:	1880ab26 	beq	r3,r2,20f10 <__mulsf3+0x3e4>
   20c64:	00800044 	movi	r2,1
   20c68:	1880a21e 	bne	r3,r2,20ef4 <__mulsf3+0x3c8>
   20c6c:	a829883a 	mov	r20,r21
   20c70:	0007883a 	mov	r3,zero
   20c74:	0009883a 	mov	r4,zero
   20c78:	18803fcc 	andi	r2,r3,255
   20c7c:	100695fa 	slli	r3,r2,23
   20c80:	a0803fcc 	andi	r2,r20,255
   20c84:	100a97fa 	slli	r5,r2,31
   20c88:	00802034 	movhi	r2,128
   20c8c:	10bfffc4 	addi	r2,r2,-1
   20c90:	2084703a 	and	r2,r4,r2
   20c94:	10c4b03a 	or	r2,r2,r3
   20c98:	1144b03a 	or	r2,r2,r5
   20c9c:	dfc00a17 	ldw	ra,40(sp)
   20ca0:	df000917 	ldw	fp,36(sp)
   20ca4:	ddc00817 	ldw	r23,32(sp)
   20ca8:	dd800717 	ldw	r22,28(sp)
   20cac:	dd400617 	ldw	r21,24(sp)
   20cb0:	dd000517 	ldw	r20,20(sp)
   20cb4:	dcc00417 	ldw	r19,16(sp)
   20cb8:	dc800317 	ldw	r18,12(sp)
   20cbc:	dc400217 	ldw	r17,8(sp)
   20cc0:	dc000117 	ldw	r16,4(sp)
   20cc4:	dec00b04 	addi	sp,sp,44
   20cc8:	f800283a 	ret
   20ccc:	90000d1e 	bne	r18,zero,20d04 <__mulsf3+0x1d8>
   20cd0:	04400104 	movi	r17,4
   20cd4:	05c00044 	movi	r23,1
   20cd8:	003faf06 	br	20b98 <__alt_data_end+0xf4020b98>
   20cdc:	9806c03a 	cmpne	r3,r19,zero
   20ce0:	18c00084 	addi	r3,r3,2
   20ce4:	003fba06 	br	20bd0 <__alt_data_end+0xf4020bd0>
   20ce8:	9800141e 	bne	r19,zero,20d3c <__mulsf3+0x210>
   20cec:	00c00044 	movi	r3,1
   20cf0:	003fb706 	br	20bd0 <__alt_data_end+0xf4020bd0>
   20cf4:	a829883a 	mov	r20,r21
   20cf8:	00ffffc4 	movi	r3,-1
   20cfc:	0009883a 	mov	r4,zero
   20d00:	003fdd06 	br	20c78 <__alt_data_end+0xf4020c78>
   20d04:	9009883a 	mov	r4,r18
   20d08:	d9400015 	stw	r5,0(sp)
   20d0c:	00210bc0 	call	210bc <__clzsi2>
   20d10:	10fffec4 	addi	r3,r2,-5
   20d14:	10801d84 	addi	r2,r2,118
   20d18:	90e4983a 	sll	r18,r18,r3
   20d1c:	00a1c83a 	sub	r16,zero,r2
   20d20:	0023883a 	mov	r17,zero
   20d24:	002f883a 	mov	r23,zero
   20d28:	d9400017 	ldw	r5,0(sp)
   20d2c:	003f9a06 	br	20b98 <__alt_data_end+0xf4020b98>
   20d30:	04400304 	movi	r17,12
   20d34:	05c000c4 	movi	r23,3
   20d38:	003f9706 	br	20b98 <__alt_data_end+0xf4020b98>
   20d3c:	9809883a 	mov	r4,r19
   20d40:	d9800015 	stw	r6,0(sp)
   20d44:	00210bc0 	call	210bc <__clzsi2>
   20d48:	10fffec4 	addi	r3,r2,-5
   20d4c:	10801d84 	addi	r2,r2,118
   20d50:	98e6983a 	sll	r19,r19,r3
   20d54:	0085c83a 	sub	r2,zero,r2
   20d58:	0007883a 	mov	r3,zero
   20d5c:	d9800017 	ldw	r6,0(sp)
   20d60:	003f9b06 	br	20bd0 <__alt_data_end+0xf4020bd0>
   20d64:	01002034 	movhi	r4,128
   20d68:	0029883a 	mov	r20,zero
   20d6c:	213fffc4 	addi	r4,r4,-1
   20d70:	00ffffc4 	movi	r3,-1
   20d74:	003fc006 	br	20c78 <__alt_data_end+0xf4020c78>
   20d78:	9027883a 	mov	r19,r18
   20d7c:	b807883a 	mov	r3,r23
   20d80:	003fb406 	br	20c54 <__alt_data_end+0xf4020c54>
   20d84:	9027883a 	mov	r19,r18
   20d88:	e02b883a 	mov	r21,fp
   20d8c:	b807883a 	mov	r3,r23
   20d90:	003fb006 	br	20c54 <__alt_data_end+0xf4020c54>
   20d94:	9004d43a 	srli	r2,r18,16
   20d98:	9810d43a 	srli	r8,r19,16
   20d9c:	94bfffcc 	andi	r18,r18,65535
   20da0:	993fffcc 	andi	r4,r19,65535
   20da4:	910d383a 	mul	r6,r18,r4
   20da8:	20a7383a 	mul	r19,r4,r2
   20dac:	9225383a 	mul	r18,r18,r8
   20db0:	3006d43a 	srli	r3,r6,16
   20db4:	1211383a 	mul	r8,r2,r8
   20db8:	94e5883a 	add	r18,r18,r19
   20dbc:	1c87883a 	add	r3,r3,r18
   20dc0:	1cc0022e 	bgeu	r3,r19,20dcc <__mulsf3+0x2a0>
   20dc4:	00800074 	movhi	r2,1
   20dc8:	4091883a 	add	r8,r8,r2
   20dcc:	1804943a 	slli	r2,r3,16
   20dd0:	31bfffcc 	andi	r6,r6,65535
   20dd4:	1806d43a 	srli	r3,r3,16
   20dd8:	1185883a 	add	r2,r2,r6
   20ddc:	102691ba 	slli	r19,r2,6
   20de0:	1a07883a 	add	r3,r3,r8
   20de4:	1004d6ba 	srli	r2,r2,26
   20de8:	180891ba 	slli	r4,r3,6
   20dec:	9826c03a 	cmpne	r19,r19,zero
   20df0:	9884b03a 	or	r2,r19,r2
   20df4:	1126b03a 	or	r19,r2,r4
   20df8:	9882002c 	andhi	r2,r19,2048
   20dfc:	10000426 	beq	r2,zero,20e10 <__mulsf3+0x2e4>
   20e00:	9804d07a 	srli	r2,r19,1
   20e04:	9900004c 	andi	r4,r19,1
   20e08:	3821883a 	mov	r16,r7
   20e0c:	1126b03a 	or	r19,r2,r4
   20e10:	80c01fc4 	addi	r3,r16,127
   20e14:	00c0210e 	bge	zero,r3,20e9c <__mulsf3+0x370>
   20e18:	988001cc 	andi	r2,r19,7
   20e1c:	10000426 	beq	r2,zero,20e30 <__mulsf3+0x304>
   20e20:	988003cc 	andi	r2,r19,15
   20e24:	01000104 	movi	r4,4
   20e28:	11000126 	beq	r2,r4,20e30 <__mulsf3+0x304>
   20e2c:	9927883a 	add	r19,r19,r4
   20e30:	9882002c 	andhi	r2,r19,2048
   20e34:	10000426 	beq	r2,zero,20e48 <__mulsf3+0x31c>
   20e38:	00be0034 	movhi	r2,63488
   20e3c:	10bfffc4 	addi	r2,r2,-1
   20e40:	80c02004 	addi	r3,r16,128
   20e44:	98a6703a 	and	r19,r19,r2
   20e48:	00803f84 	movi	r2,254
   20e4c:	10ffa916 	blt	r2,r3,20cf4 <__alt_data_end+0xf4020cf4>
   20e50:	980891ba 	slli	r4,r19,6
   20e54:	a829883a 	mov	r20,r21
   20e58:	2008d27a 	srli	r4,r4,9
   20e5c:	003f8606 	br	20c78 <__alt_data_end+0xf4020c78>
   20e60:	9080102c 	andhi	r2,r18,64
   20e64:	10000826 	beq	r2,zero,20e88 <__mulsf3+0x35c>
   20e68:	9880102c 	andhi	r2,r19,64
   20e6c:	1000061e 	bne	r2,zero,20e88 <__mulsf3+0x35c>
   20e70:	00802034 	movhi	r2,128
   20e74:	99001034 	orhi	r4,r19,64
   20e78:	10bfffc4 	addi	r2,r2,-1
   20e7c:	b029883a 	mov	r20,r22
   20e80:	2088703a 	and	r4,r4,r2
   20e84:	003fba06 	br	20d70 <__alt_data_end+0xf4020d70>
   20e88:	00802034 	movhi	r2,128
   20e8c:	91001034 	orhi	r4,r18,64
   20e90:	10bfffc4 	addi	r2,r2,-1
   20e94:	2088703a 	and	r4,r4,r2
   20e98:	003fb506 	br	20d70 <__alt_data_end+0xf4020d70>
   20e9c:	00800044 	movi	r2,1
   20ea0:	10c7c83a 	sub	r3,r2,r3
   20ea4:	008006c4 	movi	r2,27
   20ea8:	10ff7016 	blt	r2,r3,20c6c <__alt_data_end+0xf4020c6c>
   20eac:	00800804 	movi	r2,32
   20eb0:	10c5c83a 	sub	r2,r2,r3
   20eb4:	9884983a 	sll	r2,r19,r2
   20eb8:	98c6d83a 	srl	r3,r19,r3
   20ebc:	1004c03a 	cmpne	r2,r2,zero
   20ec0:	1884b03a 	or	r2,r3,r2
   20ec4:	10c001cc 	andi	r3,r2,7
   20ec8:	18000426 	beq	r3,zero,20edc <__mulsf3+0x3b0>
   20ecc:	10c003cc 	andi	r3,r2,15
   20ed0:	01000104 	movi	r4,4
   20ed4:	19000126 	beq	r3,r4,20edc <__mulsf3+0x3b0>
   20ed8:	1105883a 	add	r2,r2,r4
   20edc:	10c1002c 	andhi	r3,r2,1024
   20ee0:	18000626 	beq	r3,zero,20efc <__mulsf3+0x3d0>
   20ee4:	a829883a 	mov	r20,r21
   20ee8:	00c00044 	movi	r3,1
   20eec:	0009883a 	mov	r4,zero
   20ef0:	003f6106 	br	20c78 <__alt_data_end+0xf4020c78>
   20ef4:	3821883a 	mov	r16,r7
   20ef8:	003fc506 	br	20e10 <__alt_data_end+0xf4020e10>
   20efc:	100491ba 	slli	r2,r2,6
   20f00:	a829883a 	mov	r20,r21
   20f04:	0007883a 	mov	r3,zero
   20f08:	1008d27a 	srli	r4,r2,9
   20f0c:	003f5a06 	br	20c78 <__alt_data_end+0xf4020c78>
   20f10:	00802034 	movhi	r2,128
   20f14:	99001034 	orhi	r4,r19,64
   20f18:	10bfffc4 	addi	r2,r2,-1
   20f1c:	a829883a 	mov	r20,r21
   20f20:	2088703a 	and	r4,r4,r2
   20f24:	003f9206 	br	20d70 <__alt_data_end+0xf4020d70>

00020f28 <__fixsfsi>:
   20f28:	200ad5fa 	srli	r5,r4,23
   20f2c:	00c02034 	movhi	r3,128
   20f30:	18ffffc4 	addi	r3,r3,-1
   20f34:	29403fcc 	andi	r5,r5,255
   20f38:	00801f84 	movi	r2,126
   20f3c:	1906703a 	and	r3,r3,r4
   20f40:	2008d7fa 	srli	r4,r4,31
   20f44:	11400e0e 	bge	r2,r5,20f80 <__fixsfsi+0x58>
   20f48:	00802744 	movi	r2,157
   20f4c:	11400816 	blt	r2,r5,20f70 <__fixsfsi+0x48>
   20f50:	00802544 	movi	r2,149
   20f54:	18c02034 	orhi	r3,r3,128
   20f58:	11400b0e 	bge	r2,r5,20f88 <__fixsfsi+0x60>
   20f5c:	28bfda84 	addi	r2,r5,-150
   20f60:	1884983a 	sll	r2,r3,r2
   20f64:	20000726 	beq	r4,zero,20f84 <__fixsfsi+0x5c>
   20f68:	0085c83a 	sub	r2,zero,r2
   20f6c:	f800283a 	ret
   20f70:	00a00034 	movhi	r2,32768
   20f74:	10bfffc4 	addi	r2,r2,-1
   20f78:	2085883a 	add	r2,r4,r2
   20f7c:	f800283a 	ret
   20f80:	0005883a 	mov	r2,zero
   20f84:	f800283a 	ret
   20f88:	00802584 	movi	r2,150
   20f8c:	1145c83a 	sub	r2,r2,r5
   20f90:	1884d83a 	srl	r2,r3,r2
   20f94:	003ff306 	br	20f64 <__alt_data_end+0xf4020f64>

00020f98 <__floatsisf>:
   20f98:	defffd04 	addi	sp,sp,-12
   20f9c:	dfc00215 	stw	ra,8(sp)
   20fa0:	dc400115 	stw	r17,4(sp)
   20fa4:	dc000015 	stw	r16,0(sp)
   20fa8:	20003526 	beq	r4,zero,21080 <__floatsisf+0xe8>
   20fac:	2021883a 	mov	r16,r4
   20fb0:	2022d7fa 	srli	r17,r4,31
   20fb4:	20003616 	blt	r4,zero,21090 <__floatsisf+0xf8>
   20fb8:	8009883a 	mov	r4,r16
   20fbc:	00210bc0 	call	210bc <__clzsi2>
   20fc0:	00c02784 	movi	r3,158
   20fc4:	1887c83a 	sub	r3,r3,r2
   20fc8:	01002584 	movi	r4,150
   20fcc:	20c01416 	blt	r4,r3,21020 <__floatsisf+0x88>
   20fd0:	20c9c83a 	sub	r4,r4,r3
   20fd4:	8120983a 	sll	r16,r16,r4
   20fd8:	00802034 	movhi	r2,128
   20fdc:	10bfffc4 	addi	r2,r2,-1
   20fe0:	8809883a 	mov	r4,r17
   20fe4:	80a0703a 	and	r16,r16,r2
   20fe8:	18803fcc 	andi	r2,r3,255
   20fec:	100695fa 	slli	r3,r2,23
   20ff0:	20803fcc 	andi	r2,r4,255
   20ff4:	100897fa 	slli	r4,r2,31
   20ff8:	00802034 	movhi	r2,128
   20ffc:	10bfffc4 	addi	r2,r2,-1
   21000:	8084703a 	and	r2,r16,r2
   21004:	10c4b03a 	or	r2,r2,r3
   21008:	1104b03a 	or	r2,r2,r4
   2100c:	dfc00217 	ldw	ra,8(sp)
   21010:	dc400117 	ldw	r17,4(sp)
   21014:	dc000017 	ldw	r16,0(sp)
   21018:	dec00304 	addi	sp,sp,12
   2101c:	f800283a 	ret
   21020:	01002644 	movi	r4,153
   21024:	20c01c16 	blt	r4,r3,21098 <__floatsisf+0x100>
   21028:	20c9c83a 	sub	r4,r4,r3
   2102c:	8120983a 	sll	r16,r16,r4
   21030:	013f0034 	movhi	r4,64512
   21034:	213fffc4 	addi	r4,r4,-1
   21038:	814001cc 	andi	r5,r16,7
   2103c:	8108703a 	and	r4,r16,r4
   21040:	28000426 	beq	r5,zero,21054 <__floatsisf+0xbc>
   21044:	840003cc 	andi	r16,r16,15
   21048:	01400104 	movi	r5,4
   2104c:	81400126 	beq	r16,r5,21054 <__floatsisf+0xbc>
   21050:	2149883a 	add	r4,r4,r5
   21054:	2141002c 	andhi	r5,r4,1024
   21058:	28000526 	beq	r5,zero,21070 <__floatsisf+0xd8>
   2105c:	00c027c4 	movi	r3,159
   21060:	1887c83a 	sub	r3,r3,r2
   21064:	00bf0034 	movhi	r2,64512
   21068:	10bfffc4 	addi	r2,r2,-1
   2106c:	2088703a 	and	r4,r4,r2
   21070:	202091ba 	slli	r16,r4,6
   21074:	8809883a 	mov	r4,r17
   21078:	8020d27a 	srli	r16,r16,9
   2107c:	003fda06 	br	20fe8 <__alt_data_end+0xf4020fe8>
   21080:	0009883a 	mov	r4,zero
   21084:	0007883a 	mov	r3,zero
   21088:	0021883a 	mov	r16,zero
   2108c:	003fd606 	br	20fe8 <__alt_data_end+0xf4020fe8>
   21090:	0121c83a 	sub	r16,zero,r4
   21094:	003fc806 	br	20fb8 <__alt_data_end+0xf4020fb8>
   21098:	01002e44 	movi	r4,185
   2109c:	20c9c83a 	sub	r4,r4,r3
   210a0:	01400144 	movi	r5,5
   210a4:	8108983a 	sll	r4,r16,r4
   210a8:	288bc83a 	sub	r5,r5,r2
   210ac:	8160d83a 	srl	r16,r16,r5
   210b0:	2008c03a 	cmpne	r4,r4,zero
   210b4:	8120b03a 	or	r16,r16,r4
   210b8:	003fdd06 	br	21030 <__alt_data_end+0xf4021030>

000210bc <__clzsi2>:
   210bc:	00bfffd4 	movui	r2,65535
   210c0:	11000536 	bltu	r2,r4,210d8 <__clzsi2+0x1c>
   210c4:	00803fc4 	movi	r2,255
   210c8:	11000f36 	bltu	r2,r4,21108 <__clzsi2+0x4c>
   210cc:	00800804 	movi	r2,32
   210d0:	0007883a 	mov	r3,zero
   210d4:	00000506 	br	210ec <__clzsi2+0x30>
   210d8:	00804034 	movhi	r2,256
   210dc:	10bfffc4 	addi	r2,r2,-1
   210e0:	11000c2e 	bgeu	r2,r4,21114 <__clzsi2+0x58>
   210e4:	00800204 	movi	r2,8
   210e8:	00c00604 	movi	r3,24
   210ec:	20c8d83a 	srl	r4,r4,r3
   210f0:	00c000f4 	movhi	r3,3
   210f4:	18c62f44 	addi	r3,r3,6333
   210f8:	1909883a 	add	r4,r3,r4
   210fc:	20c00003 	ldbu	r3,0(r4)
   21100:	10c5c83a 	sub	r2,r2,r3
   21104:	f800283a 	ret
   21108:	00800604 	movi	r2,24
   2110c:	00c00204 	movi	r3,8
   21110:	003ff606 	br	210ec <__alt_data_end+0xf40210ec>
   21114:	00800404 	movi	r2,16
   21118:	1007883a 	mov	r3,r2
   2111c:	003ff306 	br	210ec <__alt_data_end+0xf40210ec>

00021120 <_printf_r>:
   21120:	defffd04 	addi	sp,sp,-12
   21124:	2805883a 	mov	r2,r5
   21128:	dfc00015 	stw	ra,0(sp)
   2112c:	d9800115 	stw	r6,4(sp)
   21130:	d9c00215 	stw	r7,8(sp)
   21134:	21400217 	ldw	r5,8(r4)
   21138:	d9c00104 	addi	r7,sp,4
   2113c:	100d883a 	mov	r6,r2
   21140:	00212f80 	call	212f8 <___vfprintf_internal_r>
   21144:	dfc00017 	ldw	ra,0(sp)
   21148:	dec00304 	addi	sp,sp,12
   2114c:	f800283a 	ret

00021150 <printf>:
   21150:	defffc04 	addi	sp,sp,-16
   21154:	dfc00015 	stw	ra,0(sp)
   21158:	d9400115 	stw	r5,4(sp)
   2115c:	d9800215 	stw	r6,8(sp)
   21160:	d9c00315 	stw	r7,12(sp)
   21164:	008000f4 	movhi	r2,3
   21168:	108e0b04 	addi	r2,r2,14380
   2116c:	10800017 	ldw	r2,0(r2)
   21170:	200b883a 	mov	r5,r4
   21174:	d9800104 	addi	r6,sp,4
   21178:	11000217 	ldw	r4,8(r2)
   2117c:	00234f00 	call	234f0 <__vfprintf_internal>
   21180:	dfc00017 	ldw	ra,0(sp)
   21184:	dec00404 	addi	sp,sp,16
   21188:	f800283a 	ret

0002118c <_puts_r>:
   2118c:	defff604 	addi	sp,sp,-40
   21190:	dc000715 	stw	r16,28(sp)
   21194:	2021883a 	mov	r16,r4
   21198:	2809883a 	mov	r4,r5
   2119c:	dc400815 	stw	r17,32(sp)
   211a0:	dfc00915 	stw	ra,36(sp)
   211a4:	2823883a 	mov	r17,r5
   211a8:	00212600 	call	21260 <strlen>
   211ac:	10c00044 	addi	r3,r2,1
   211b0:	d8800115 	stw	r2,4(sp)
   211b4:	008000f4 	movhi	r2,3
   211b8:	10867004 	addi	r2,r2,6592
   211bc:	d8800215 	stw	r2,8(sp)
   211c0:	00800044 	movi	r2,1
   211c4:	d8800315 	stw	r2,12(sp)
   211c8:	00800084 	movi	r2,2
   211cc:	dc400015 	stw	r17,0(sp)
   211d0:	d8c00615 	stw	r3,24(sp)
   211d4:	dec00415 	stw	sp,16(sp)
   211d8:	d8800515 	stw	r2,20(sp)
   211dc:	80000226 	beq	r16,zero,211e8 <_puts_r+0x5c>
   211e0:	80800e17 	ldw	r2,56(r16)
   211e4:	10001426 	beq	r2,zero,21238 <_puts_r+0xac>
   211e8:	81400217 	ldw	r5,8(r16)
   211ec:	2880030b 	ldhu	r2,12(r5)
   211f0:	10c8000c 	andi	r3,r2,8192
   211f4:	1800061e 	bne	r3,zero,21210 <_puts_r+0x84>
   211f8:	29001917 	ldw	r4,100(r5)
   211fc:	00f7ffc4 	movi	r3,-8193
   21200:	10880014 	ori	r2,r2,8192
   21204:	20c6703a 	and	r3,r4,r3
   21208:	2880030d 	sth	r2,12(r5)
   2120c:	28c01915 	stw	r3,100(r5)
   21210:	d9800404 	addi	r6,sp,16
   21214:	8009883a 	mov	r4,r16
   21218:	0025a200 	call	25a20 <__sfvwrite_r>
   2121c:	1000091e 	bne	r2,zero,21244 <_puts_r+0xb8>
   21220:	00800284 	movi	r2,10
   21224:	dfc00917 	ldw	ra,36(sp)
   21228:	dc400817 	ldw	r17,32(sp)
   2122c:	dc000717 	ldw	r16,28(sp)
   21230:	dec00a04 	addi	sp,sp,40
   21234:	f800283a 	ret
   21238:	8009883a 	mov	r4,r16
   2123c:	002559c0 	call	2559c <__sinit>
   21240:	003fe906 	br	211e8 <__alt_data_end+0xf40211e8>
   21244:	00bfffc4 	movi	r2,-1
   21248:	003ff606 	br	21224 <__alt_data_end+0xf4021224>

0002124c <puts>:
   2124c:	008000f4 	movhi	r2,3
   21250:	108e0b04 	addi	r2,r2,14380
   21254:	200b883a 	mov	r5,r4
   21258:	11000017 	ldw	r4,0(r2)
   2125c:	002118c1 	jmpi	2118c <_puts_r>

00021260 <strlen>:
   21260:	208000cc 	andi	r2,r4,3
   21264:	10002026 	beq	r2,zero,212e8 <strlen+0x88>
   21268:	20800007 	ldb	r2,0(r4)
   2126c:	10002026 	beq	r2,zero,212f0 <strlen+0x90>
   21270:	2005883a 	mov	r2,r4
   21274:	00000206 	br	21280 <strlen+0x20>
   21278:	10c00007 	ldb	r3,0(r2)
   2127c:	18001826 	beq	r3,zero,212e0 <strlen+0x80>
   21280:	10800044 	addi	r2,r2,1
   21284:	10c000cc 	andi	r3,r2,3
   21288:	183ffb1e 	bne	r3,zero,21278 <__alt_data_end+0xf4021278>
   2128c:	10c00017 	ldw	r3,0(r2)
   21290:	01ffbff4 	movhi	r7,65279
   21294:	39ffbfc4 	addi	r7,r7,-257
   21298:	00ca303a 	nor	r5,zero,r3
   2129c:	01a02074 	movhi	r6,32897
   212a0:	19c7883a 	add	r3,r3,r7
   212a4:	31a02004 	addi	r6,r6,-32640
   212a8:	1946703a 	and	r3,r3,r5
   212ac:	1986703a 	and	r3,r3,r6
   212b0:	1800091e 	bne	r3,zero,212d8 <strlen+0x78>
   212b4:	10800104 	addi	r2,r2,4
   212b8:	10c00017 	ldw	r3,0(r2)
   212bc:	19cb883a 	add	r5,r3,r7
   212c0:	00c6303a 	nor	r3,zero,r3
   212c4:	28c6703a 	and	r3,r5,r3
   212c8:	1986703a 	and	r3,r3,r6
   212cc:	183ff926 	beq	r3,zero,212b4 <__alt_data_end+0xf40212b4>
   212d0:	00000106 	br	212d8 <strlen+0x78>
   212d4:	10800044 	addi	r2,r2,1
   212d8:	10c00007 	ldb	r3,0(r2)
   212dc:	183ffd1e 	bne	r3,zero,212d4 <__alt_data_end+0xf40212d4>
   212e0:	1105c83a 	sub	r2,r2,r4
   212e4:	f800283a 	ret
   212e8:	2005883a 	mov	r2,r4
   212ec:	003fe706 	br	2128c <__alt_data_end+0xf402128c>
   212f0:	0005883a 	mov	r2,zero
   212f4:	f800283a 	ret

000212f8 <___vfprintf_internal_r>:
   212f8:	deffb804 	addi	sp,sp,-288
   212fc:	dfc04715 	stw	ra,284(sp)
   21300:	ddc04515 	stw	r23,276(sp)
   21304:	dd404315 	stw	r21,268(sp)
   21308:	d9002c15 	stw	r4,176(sp)
   2130c:	282f883a 	mov	r23,r5
   21310:	302b883a 	mov	r21,r6
   21314:	d9c02d15 	stw	r7,180(sp)
   21318:	df004615 	stw	fp,280(sp)
   2131c:	dd804415 	stw	r22,272(sp)
   21320:	dd004215 	stw	r20,264(sp)
   21324:	dcc04115 	stw	r19,260(sp)
   21328:	dc804015 	stw	r18,256(sp)
   2132c:	dc403f15 	stw	r17,252(sp)
   21330:	dc003e15 	stw	r16,248(sp)
   21334:	00261100 	call	26110 <_localeconv_r>
   21338:	10800017 	ldw	r2,0(r2)
   2133c:	1009883a 	mov	r4,r2
   21340:	d8803415 	stw	r2,208(sp)
   21344:	00212600 	call	21260 <strlen>
   21348:	d8803715 	stw	r2,220(sp)
   2134c:	d8802c17 	ldw	r2,176(sp)
   21350:	10000226 	beq	r2,zero,2135c <___vfprintf_internal_r+0x64>
   21354:	10800e17 	ldw	r2,56(r2)
   21358:	1000f926 	beq	r2,zero,21740 <___vfprintf_internal_r+0x448>
   2135c:	b880030b 	ldhu	r2,12(r23)
   21360:	10c8000c 	andi	r3,r2,8192
   21364:	1800061e 	bne	r3,zero,21380 <___vfprintf_internal_r+0x88>
   21368:	b9001917 	ldw	r4,100(r23)
   2136c:	00f7ffc4 	movi	r3,-8193
   21370:	10880014 	ori	r2,r2,8192
   21374:	20c6703a 	and	r3,r4,r3
   21378:	b880030d 	sth	r2,12(r23)
   2137c:	b8c01915 	stw	r3,100(r23)
   21380:	10c0020c 	andi	r3,r2,8
   21384:	1800c126 	beq	r3,zero,2168c <___vfprintf_internal_r+0x394>
   21388:	b8c00417 	ldw	r3,16(r23)
   2138c:	1800bf26 	beq	r3,zero,2168c <___vfprintf_internal_r+0x394>
   21390:	1080068c 	andi	r2,r2,26
   21394:	00c00284 	movi	r3,10
   21398:	10c0c426 	beq	r2,r3,216ac <___vfprintf_internal_r+0x3b4>
   2139c:	d8c00404 	addi	r3,sp,16
   213a0:	050000f4 	movhi	r20,3
   213a4:	d9001e04 	addi	r4,sp,120
   213a8:	a5068184 	addi	r20,r20,6662
   213ac:	d8c01e15 	stw	r3,120(sp)
   213b0:	d8002015 	stw	zero,128(sp)
   213b4:	d8001f15 	stw	zero,124(sp)
   213b8:	d8003315 	stw	zero,204(sp)
   213bc:	d8003615 	stw	zero,216(sp)
   213c0:	d8003815 	stw	zero,224(sp)
   213c4:	1811883a 	mov	r8,r3
   213c8:	d8003915 	stw	zero,228(sp)
   213cc:	d8003a15 	stw	zero,232(sp)
   213d0:	d8002f15 	stw	zero,188(sp)
   213d4:	d9002815 	stw	r4,160(sp)
   213d8:	a8800007 	ldb	r2,0(r21)
   213dc:	10027b26 	beq	r2,zero,21dcc <___vfprintf_internal_r+0xad4>
   213e0:	00c00944 	movi	r3,37
   213e4:	a821883a 	mov	r16,r21
   213e8:	10c0021e 	bne	r2,r3,213f4 <___vfprintf_internal_r+0xfc>
   213ec:	00001406 	br	21440 <___vfprintf_internal_r+0x148>
   213f0:	10c00326 	beq	r2,r3,21400 <___vfprintf_internal_r+0x108>
   213f4:	84000044 	addi	r16,r16,1
   213f8:	80800007 	ldb	r2,0(r16)
   213fc:	103ffc1e 	bne	r2,zero,213f0 <__alt_data_end+0xf40213f0>
   21400:	8563c83a 	sub	r17,r16,r21
   21404:	88000e26 	beq	r17,zero,21440 <___vfprintf_internal_r+0x148>
   21408:	d8c02017 	ldw	r3,128(sp)
   2140c:	d8801f17 	ldw	r2,124(sp)
   21410:	45400015 	stw	r21,0(r8)
   21414:	1c47883a 	add	r3,r3,r17
   21418:	10800044 	addi	r2,r2,1
   2141c:	d8c02015 	stw	r3,128(sp)
   21420:	44400115 	stw	r17,4(r8)
   21424:	d8801f15 	stw	r2,124(sp)
   21428:	00c001c4 	movi	r3,7
   2142c:	1880a716 	blt	r3,r2,216cc <___vfprintf_internal_r+0x3d4>
   21430:	42000204 	addi	r8,r8,8
   21434:	d9402f17 	ldw	r5,188(sp)
   21438:	2c4b883a 	add	r5,r5,r17
   2143c:	d9402f15 	stw	r5,188(sp)
   21440:	80800007 	ldb	r2,0(r16)
   21444:	1000a826 	beq	r2,zero,216e8 <___vfprintf_internal_r+0x3f0>
   21448:	84400047 	ldb	r17,1(r16)
   2144c:	00bfffc4 	movi	r2,-1
   21450:	85400044 	addi	r21,r16,1
   21454:	d8002785 	stb	zero,158(sp)
   21458:	0007883a 	mov	r3,zero
   2145c:	000f883a 	mov	r7,zero
   21460:	d8802915 	stw	r2,164(sp)
   21464:	d8003115 	stw	zero,196(sp)
   21468:	0025883a 	mov	r18,zero
   2146c:	01401604 	movi	r5,88
   21470:	01800244 	movi	r6,9
   21474:	02800a84 	movi	r10,42
   21478:	02401b04 	movi	r9,108
   2147c:	ad400044 	addi	r21,r21,1
   21480:	88bff804 	addi	r2,r17,-32
   21484:	28830436 	bltu	r5,r2,22098 <___vfprintf_internal_r+0xda0>
   21488:	100490ba 	slli	r2,r2,2
   2148c:	010000b4 	movhi	r4,2
   21490:	21052804 	addi	r4,r4,5280
   21494:	1105883a 	add	r2,r2,r4
   21498:	10800017 	ldw	r2,0(r2)
   2149c:	1000683a 	jmp	r2
   214a0:	00021fb8 	rdprs	zero,zero,2174
   214a4:	00022098 	cmpnei	zero,zero,2178
   214a8:	00022098 	cmpnei	zero,zero,2178
   214ac:	00021fd8 	cmpnei	zero,zero,2175
   214b0:	00022098 	cmpnei	zero,zero,2178
   214b4:	00022098 	cmpnei	zero,zero,2178
   214b8:	00022098 	cmpnei	zero,zero,2178
   214bc:	00022098 	cmpnei	zero,zero,2178
   214c0:	00022098 	cmpnei	zero,zero,2178
   214c4:	00022098 	cmpnei	zero,zero,2178
   214c8:	0002174c 	andi	zero,zero,2141
   214cc:	00021ef4 	movhi	zero,2171
   214d0:	00022098 	cmpnei	zero,zero,2178
   214d4:	00021614 	movui	zero,2136
   214d8:	00021774 	movhi	zero,2141
   214dc:	00022098 	cmpnei	zero,zero,2178
   214e0:	000217b4 	movhi	zero,2142
   214e4:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   214e8:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   214ec:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   214f0:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   214f4:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   214f8:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   214fc:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   21500:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   21504:	000217c0 	call	217c <__alt_mem_onchip_memory_nios2_FFT-0x1de84>
   21508:	00022098 	cmpnei	zero,zero,2178
   2150c:	00022098 	cmpnei	zero,zero,2178
   21510:	00022098 	cmpnei	zero,zero,2178
   21514:	00022098 	cmpnei	zero,zero,2178
   21518:	00022098 	cmpnei	zero,zero,2178
   2151c:	00022098 	cmpnei	zero,zero,2178
   21520:	00022098 	cmpnei	zero,zero,2178
   21524:	00022098 	cmpnei	zero,zero,2178
   21528:	00022098 	cmpnei	zero,zero,2178
   2152c:	00022098 	cmpnei	zero,zero,2178
   21530:	000217f4 	movhi	zero,2143
   21534:	000218b0 	cmpltui	zero,zero,2146
   21538:	00022098 	cmpnei	zero,zero,2178
   2153c:	000218b0 	cmpltui	zero,zero,2146
   21540:	00022098 	cmpnei	zero,zero,2178
   21544:	00022098 	cmpnei	zero,zero,2178
   21548:	00022098 	cmpnei	zero,zero,2178
   2154c:	00022098 	cmpnei	zero,zero,2178
   21550:	00021950 	cmplti	zero,zero,2149
   21554:	00022098 	cmpnei	zero,zero,2178
   21558:	00022098 	cmpnei	zero,zero,2178
   2155c:	0002195c 	xori	zero,zero,2149
   21560:	00022098 	cmpnei	zero,zero,2178
   21564:	00022098 	cmpnei	zero,zero,2178
   21568:	00022098 	cmpnei	zero,zero,2178
   2156c:	00022098 	cmpnei	zero,zero,2178
   21570:	00022098 	cmpnei	zero,zero,2178
   21574:	00021dd4 	movui	zero,2167
   21578:	00022098 	cmpnei	zero,zero,2178
   2157c:	00022098 	cmpnei	zero,zero,2178
   21580:	00021e34 	movhi	zero,2168
   21584:	00022098 	cmpnei	zero,zero,2178
   21588:	00022098 	cmpnei	zero,zero,2178
   2158c:	00022098 	cmpnei	zero,zero,2178
   21590:	00022098 	cmpnei	zero,zero,2178
   21594:	00022098 	cmpnei	zero,zero,2178
   21598:	00022098 	cmpnei	zero,zero,2178
   2159c:	00022098 	cmpnei	zero,zero,2178
   215a0:	00022098 	cmpnei	zero,zero,2178
   215a4:	00022098 	cmpnei	zero,zero,2178
   215a8:	00022098 	cmpnei	zero,zero,2178
   215ac:	00022044 	movi	zero,2177
   215b0:	00021fe4 	muli	zero,zero,2175
   215b4:	000218b0 	cmpltui	zero,zero,2146
   215b8:	000218b0 	cmpltui	zero,zero,2146
   215bc:	000218b0 	cmpltui	zero,zero,2146
   215c0:	00021ff4 	movhi	zero,2175
   215c4:	00021fe4 	muli	zero,zero,2175
   215c8:	00022098 	cmpnei	zero,zero,2178
   215cc:	00022098 	cmpnei	zero,zero,2178
   215d0:	00022000 	call	2200 <__alt_mem_onchip_memory_nios2_FFT-0x1de00>
   215d4:	00022098 	cmpnei	zero,zero,2178
   215d8:	00022010 	cmplti	zero,zero,2176
   215dc:	00021ee4 	muli	zero,zero,2171
   215e0:	00021620 	cmpeqi	zero,zero,2136
   215e4:	00021f04 	movi	zero,2172
   215e8:	00022098 	cmpnei	zero,zero,2178
   215ec:	00021f10 	cmplti	zero,zero,2172
   215f0:	00022098 	cmpnei	zero,zero,2178
   215f4:	00021f6c 	andhi	zero,zero,2173
   215f8:	00022098 	cmpnei	zero,zero,2178
   215fc:	00022098 	cmpnei	zero,zero,2178
   21600:	00021f7c 	xorhi	zero,zero,2173
   21604:	d9003117 	ldw	r4,196(sp)
   21608:	d8802d15 	stw	r2,180(sp)
   2160c:	0109c83a 	sub	r4,zero,r4
   21610:	d9003115 	stw	r4,196(sp)
   21614:	94800114 	ori	r18,r18,4
   21618:	ac400007 	ldb	r17,0(r21)
   2161c:	003f9706 	br	2147c <__alt_data_end+0xf402147c>
   21620:	00800c04 	movi	r2,48
   21624:	d9002d17 	ldw	r4,180(sp)
   21628:	d9402917 	ldw	r5,164(sp)
   2162c:	d8802705 	stb	r2,156(sp)
   21630:	00801e04 	movi	r2,120
   21634:	d8802745 	stb	r2,157(sp)
   21638:	d8002785 	stb	zero,158(sp)
   2163c:	20c00104 	addi	r3,r4,4
   21640:	24c00017 	ldw	r19,0(r4)
   21644:	002d883a 	mov	r22,zero
   21648:	90800094 	ori	r2,r18,2
   2164c:	28029a16 	blt	r5,zero,220b8 <___vfprintf_internal_r+0xdc0>
   21650:	00bfdfc4 	movi	r2,-129
   21654:	90a4703a 	and	r18,r18,r2
   21658:	d8c02d15 	stw	r3,180(sp)
   2165c:	94800094 	ori	r18,r18,2
   21660:	9802871e 	bne	r19,zero,22080 <___vfprintf_internal_r+0xd88>
   21664:	008000f4 	movhi	r2,3
   21668:	10867a04 	addi	r2,r2,6632
   2166c:	d8803915 	stw	r2,228(sp)
   21670:	04401e04 	movi	r17,120
   21674:	d8802917 	ldw	r2,164(sp)
   21678:	0039883a 	mov	fp,zero
   2167c:	1001e926 	beq	r2,zero,21e24 <___vfprintf_internal_r+0xb2c>
   21680:	0027883a 	mov	r19,zero
   21684:	002d883a 	mov	r22,zero
   21688:	00020506 	br	21ea0 <___vfprintf_internal_r+0xba8>
   2168c:	d9002c17 	ldw	r4,176(sp)
   21690:	b80b883a 	mov	r5,r23
   21694:	00235c80 	call	235c8 <__swsetup_r>
   21698:	1005ac1e 	bne	r2,zero,22d4c <___vfprintf_internal_r+0x1a54>
   2169c:	b880030b 	ldhu	r2,12(r23)
   216a0:	00c00284 	movi	r3,10
   216a4:	1080068c 	andi	r2,r2,26
   216a8:	10ff3c1e 	bne	r2,r3,2139c <__alt_data_end+0xf402139c>
   216ac:	b880038f 	ldh	r2,14(r23)
   216b0:	103f3a16 	blt	r2,zero,2139c <__alt_data_end+0xf402139c>
   216b4:	d9c02d17 	ldw	r7,180(sp)
   216b8:	d9002c17 	ldw	r4,176(sp)
   216bc:	a80d883a 	mov	r6,r21
   216c0:	b80b883a 	mov	r5,r23
   216c4:	002350c0 	call	2350c <__sbprintf>
   216c8:	00001106 	br	21710 <___vfprintf_internal_r+0x418>
   216cc:	d9002c17 	ldw	r4,176(sp)
   216d0:	d9801e04 	addi	r6,sp,120
   216d4:	b80b883a 	mov	r5,r23
   216d8:	00288f40 	call	288f4 <__sprint_r>
   216dc:	1000081e 	bne	r2,zero,21700 <___vfprintf_internal_r+0x408>
   216e0:	da000404 	addi	r8,sp,16
   216e4:	003f5306 	br	21434 <__alt_data_end+0xf4021434>
   216e8:	d8802017 	ldw	r2,128(sp)
   216ec:	10000426 	beq	r2,zero,21700 <___vfprintf_internal_r+0x408>
   216f0:	d9002c17 	ldw	r4,176(sp)
   216f4:	d9801e04 	addi	r6,sp,120
   216f8:	b80b883a 	mov	r5,r23
   216fc:	00288f40 	call	288f4 <__sprint_r>
   21700:	b880030b 	ldhu	r2,12(r23)
   21704:	1080100c 	andi	r2,r2,64
   21708:	1005901e 	bne	r2,zero,22d4c <___vfprintf_internal_r+0x1a54>
   2170c:	d8802f17 	ldw	r2,188(sp)
   21710:	dfc04717 	ldw	ra,284(sp)
   21714:	df004617 	ldw	fp,280(sp)
   21718:	ddc04517 	ldw	r23,276(sp)
   2171c:	dd804417 	ldw	r22,272(sp)
   21720:	dd404317 	ldw	r21,268(sp)
   21724:	dd004217 	ldw	r20,264(sp)
   21728:	dcc04117 	ldw	r19,260(sp)
   2172c:	dc804017 	ldw	r18,256(sp)
   21730:	dc403f17 	ldw	r17,252(sp)
   21734:	dc003e17 	ldw	r16,248(sp)
   21738:	dec04804 	addi	sp,sp,288
   2173c:	f800283a 	ret
   21740:	d9002c17 	ldw	r4,176(sp)
   21744:	002559c0 	call	2559c <__sinit>
   21748:	003f0406 	br	2135c <__alt_data_end+0xf402135c>
   2174c:	d8802d17 	ldw	r2,180(sp)
   21750:	d9002d17 	ldw	r4,180(sp)
   21754:	10800017 	ldw	r2,0(r2)
   21758:	d8803115 	stw	r2,196(sp)
   2175c:	20800104 	addi	r2,r4,4
   21760:	d9003117 	ldw	r4,196(sp)
   21764:	203fa716 	blt	r4,zero,21604 <__alt_data_end+0xf4021604>
   21768:	d8802d15 	stw	r2,180(sp)
   2176c:	ac400007 	ldb	r17,0(r21)
   21770:	003f4206 	br	2147c <__alt_data_end+0xf402147c>
   21774:	ac400007 	ldb	r17,0(r21)
   21778:	aac00044 	addi	r11,r21,1
   2177c:	8a872826 	beq	r17,r10,23420 <___vfprintf_internal_r+0x2128>
   21780:	88bff404 	addi	r2,r17,-48
   21784:	0009883a 	mov	r4,zero
   21788:	30867d36 	bltu	r6,r2,23180 <___vfprintf_internal_r+0x1e88>
   2178c:	5c400007 	ldb	r17,0(r11)
   21790:	210002a4 	muli	r4,r4,10
   21794:	5d400044 	addi	r21,r11,1
   21798:	a817883a 	mov	r11,r21
   2179c:	2089883a 	add	r4,r4,r2
   217a0:	88bff404 	addi	r2,r17,-48
   217a4:	30bff92e 	bgeu	r6,r2,2178c <__alt_data_end+0xf402178c>
   217a8:	2005c916 	blt	r4,zero,22ed0 <___vfprintf_internal_r+0x1bd8>
   217ac:	d9002915 	stw	r4,164(sp)
   217b0:	003f3306 	br	21480 <__alt_data_end+0xf4021480>
   217b4:	94802014 	ori	r18,r18,128
   217b8:	ac400007 	ldb	r17,0(r21)
   217bc:	003f2f06 	br	2147c <__alt_data_end+0xf402147c>
   217c0:	a809883a 	mov	r4,r21
   217c4:	d8003115 	stw	zero,196(sp)
   217c8:	88bff404 	addi	r2,r17,-48
   217cc:	0017883a 	mov	r11,zero
   217d0:	24400007 	ldb	r17,0(r4)
   217d4:	5ac002a4 	muli	r11,r11,10
   217d8:	ad400044 	addi	r21,r21,1
   217dc:	a809883a 	mov	r4,r21
   217e0:	12d7883a 	add	r11,r2,r11
   217e4:	88bff404 	addi	r2,r17,-48
   217e8:	30bff92e 	bgeu	r6,r2,217d0 <__alt_data_end+0xf40217d0>
   217ec:	dac03115 	stw	r11,196(sp)
   217f0:	003f2306 	br	21480 <__alt_data_end+0xf4021480>
   217f4:	18c03fcc 	andi	r3,r3,255
   217f8:	18072b1e 	bne	r3,zero,234a8 <___vfprintf_internal_r+0x21b0>
   217fc:	94800414 	ori	r18,r18,16
   21800:	9080080c 	andi	r2,r18,32
   21804:	10037b26 	beq	r2,zero,225f4 <___vfprintf_internal_r+0x12fc>
   21808:	d9402d17 	ldw	r5,180(sp)
   2180c:	28800117 	ldw	r2,4(r5)
   21810:	2cc00017 	ldw	r19,0(r5)
   21814:	29400204 	addi	r5,r5,8
   21818:	d9402d15 	stw	r5,180(sp)
   2181c:	102d883a 	mov	r22,r2
   21820:	10044b16 	blt	r2,zero,22950 <___vfprintf_internal_r+0x1658>
   21824:	d9402917 	ldw	r5,164(sp)
   21828:	df002783 	ldbu	fp,158(sp)
   2182c:	2803bc16 	blt	r5,zero,22720 <___vfprintf_internal_r+0x1428>
   21830:	00ffdfc4 	movi	r3,-129
   21834:	9d84b03a 	or	r2,r19,r22
   21838:	90e4703a 	and	r18,r18,r3
   2183c:	10017726 	beq	r2,zero,21e1c <___vfprintf_internal_r+0xb24>
   21840:	b0038326 	beq	r22,zero,22650 <___vfprintf_internal_r+0x1358>
   21844:	dc402a15 	stw	r17,168(sp)
   21848:	dc001e04 	addi	r16,sp,120
   2184c:	b023883a 	mov	r17,r22
   21850:	402d883a 	mov	r22,r8
   21854:	9809883a 	mov	r4,r19
   21858:	880b883a 	mov	r5,r17
   2185c:	01800284 	movi	r6,10
   21860:	000f883a 	mov	r7,zero
   21864:	002acec0 	call	2acec <__umoddi3>
   21868:	10800c04 	addi	r2,r2,48
   2186c:	843fffc4 	addi	r16,r16,-1
   21870:	9809883a 	mov	r4,r19
   21874:	880b883a 	mov	r5,r17
   21878:	80800005 	stb	r2,0(r16)
   2187c:	01800284 	movi	r6,10
   21880:	000f883a 	mov	r7,zero
   21884:	002a7740 	call	2a774 <__udivdi3>
   21888:	1027883a 	mov	r19,r2
   2188c:	10c4b03a 	or	r2,r2,r3
   21890:	1823883a 	mov	r17,r3
   21894:	103fef1e 	bne	r2,zero,21854 <__alt_data_end+0xf4021854>
   21898:	d8c02817 	ldw	r3,160(sp)
   2189c:	dc402a17 	ldw	r17,168(sp)
   218a0:	b011883a 	mov	r8,r22
   218a4:	1c07c83a 	sub	r3,r3,r16
   218a8:	d8c02e15 	stw	r3,184(sp)
   218ac:	00005906 	br	21a14 <___vfprintf_internal_r+0x71c>
   218b0:	18c03fcc 	andi	r3,r3,255
   218b4:	1806fa1e 	bne	r3,zero,234a0 <___vfprintf_internal_r+0x21a8>
   218b8:	9080020c 	andi	r2,r18,8
   218bc:	10048a26 	beq	r2,zero,22ae8 <___vfprintf_internal_r+0x17f0>
   218c0:	d8c02d17 	ldw	r3,180(sp)
   218c4:	d9002d17 	ldw	r4,180(sp)
   218c8:	d9402d17 	ldw	r5,180(sp)
   218cc:	18c00017 	ldw	r3,0(r3)
   218d0:	21000117 	ldw	r4,4(r4)
   218d4:	29400204 	addi	r5,r5,8
   218d8:	d8c03615 	stw	r3,216(sp)
   218dc:	d9003815 	stw	r4,224(sp)
   218e0:	d9402d15 	stw	r5,180(sp)
   218e4:	d9003617 	ldw	r4,216(sp)
   218e8:	d9403817 	ldw	r5,224(sp)
   218ec:	da003d15 	stw	r8,244(sp)
   218f0:	04000044 	movi	r16,1
   218f4:	00285180 	call	28518 <__fpclassifyd>
   218f8:	da003d17 	ldw	r8,244(sp)
   218fc:	14041f1e 	bne	r2,r16,2297c <___vfprintf_internal_r+0x1684>
   21900:	d9003617 	ldw	r4,216(sp)
   21904:	d9403817 	ldw	r5,224(sp)
   21908:	000d883a 	mov	r6,zero
   2190c:	000f883a 	mov	r7,zero
   21910:	002c6d00 	call	2c6d0 <__ledf2>
   21914:	da003d17 	ldw	r8,244(sp)
   21918:	1005be16 	blt	r2,zero,23014 <___vfprintf_internal_r+0x1d1c>
   2191c:	df002783 	ldbu	fp,158(sp)
   21920:	008011c4 	movi	r2,71
   21924:	1445330e 	bge	r2,r17,22df4 <___vfprintf_internal_r+0x1afc>
   21928:	040000f4 	movhi	r16,3
   2192c:	84067204 	addi	r16,r16,6600
   21930:	00c000c4 	movi	r3,3
   21934:	00bfdfc4 	movi	r2,-129
   21938:	d8c02a15 	stw	r3,168(sp)
   2193c:	90a4703a 	and	r18,r18,r2
   21940:	d8c02e15 	stw	r3,184(sp)
   21944:	d8002915 	stw	zero,164(sp)
   21948:	d8003215 	stw	zero,200(sp)
   2194c:	00003706 	br	21a2c <___vfprintf_internal_r+0x734>
   21950:	94800214 	ori	r18,r18,8
   21954:	ac400007 	ldb	r17,0(r21)
   21958:	003ec806 	br	2147c <__alt_data_end+0xf402147c>
   2195c:	18c03fcc 	andi	r3,r3,255
   21960:	1806db1e 	bne	r3,zero,234d0 <___vfprintf_internal_r+0x21d8>
   21964:	94800414 	ori	r18,r18,16
   21968:	9080080c 	andi	r2,r18,32
   2196c:	1002d826 	beq	r2,zero,224d0 <___vfprintf_internal_r+0x11d8>
   21970:	d9402d17 	ldw	r5,180(sp)
   21974:	d8c02917 	ldw	r3,164(sp)
   21978:	d8002785 	stb	zero,158(sp)
   2197c:	28800204 	addi	r2,r5,8
   21980:	2cc00017 	ldw	r19,0(r5)
   21984:	2d800117 	ldw	r22,4(r5)
   21988:	18048f16 	blt	r3,zero,22bc8 <___vfprintf_internal_r+0x18d0>
   2198c:	013fdfc4 	movi	r4,-129
   21990:	9d86b03a 	or	r3,r19,r22
   21994:	d8802d15 	stw	r2,180(sp)
   21998:	9124703a 	and	r18,r18,r4
   2199c:	1802d91e 	bne	r3,zero,22504 <___vfprintf_internal_r+0x120c>
   219a0:	d8c02917 	ldw	r3,164(sp)
   219a4:	0039883a 	mov	fp,zero
   219a8:	1805c326 	beq	r3,zero,230b8 <___vfprintf_internal_r+0x1dc0>
   219ac:	0027883a 	mov	r19,zero
   219b0:	002d883a 	mov	r22,zero
   219b4:	dc001e04 	addi	r16,sp,120
   219b8:	9806d0fa 	srli	r3,r19,3
   219bc:	b008977a 	slli	r4,r22,29
   219c0:	b02cd0fa 	srli	r22,r22,3
   219c4:	9cc001cc 	andi	r19,r19,7
   219c8:	98800c04 	addi	r2,r19,48
   219cc:	843fffc4 	addi	r16,r16,-1
   219d0:	20e6b03a 	or	r19,r4,r3
   219d4:	80800005 	stb	r2,0(r16)
   219d8:	9d86b03a 	or	r3,r19,r22
   219dc:	183ff61e 	bne	r3,zero,219b8 <__alt_data_end+0xf40219b8>
   219e0:	90c0004c 	andi	r3,r18,1
   219e4:	18013b26 	beq	r3,zero,21ed4 <___vfprintf_internal_r+0xbdc>
   219e8:	10803fcc 	andi	r2,r2,255
   219ec:	1080201c 	xori	r2,r2,128
   219f0:	10bfe004 	addi	r2,r2,-128
   219f4:	00c00c04 	movi	r3,48
   219f8:	10c13626 	beq	r2,r3,21ed4 <___vfprintf_internal_r+0xbdc>
   219fc:	80ffffc5 	stb	r3,-1(r16)
   21a00:	d8c02817 	ldw	r3,160(sp)
   21a04:	80bfffc4 	addi	r2,r16,-1
   21a08:	1021883a 	mov	r16,r2
   21a0c:	1887c83a 	sub	r3,r3,r2
   21a10:	d8c02e15 	stw	r3,184(sp)
   21a14:	d8802e17 	ldw	r2,184(sp)
   21a18:	d9002917 	ldw	r4,164(sp)
   21a1c:	1100010e 	bge	r2,r4,21a24 <___vfprintf_internal_r+0x72c>
   21a20:	2005883a 	mov	r2,r4
   21a24:	d8802a15 	stw	r2,168(sp)
   21a28:	d8003215 	stw	zero,200(sp)
   21a2c:	e7003fcc 	andi	fp,fp,255
   21a30:	e700201c 	xori	fp,fp,128
   21a34:	e73fe004 	addi	fp,fp,-128
   21a38:	e0000326 	beq	fp,zero,21a48 <___vfprintf_internal_r+0x750>
   21a3c:	d8c02a17 	ldw	r3,168(sp)
   21a40:	18c00044 	addi	r3,r3,1
   21a44:	d8c02a15 	stw	r3,168(sp)
   21a48:	90c0008c 	andi	r3,r18,2
   21a4c:	d8c02b15 	stw	r3,172(sp)
   21a50:	18000326 	beq	r3,zero,21a60 <___vfprintf_internal_r+0x768>
   21a54:	d8c02a17 	ldw	r3,168(sp)
   21a58:	18c00084 	addi	r3,r3,2
   21a5c:	d8c02a15 	stw	r3,168(sp)
   21a60:	90c0210c 	andi	r3,r18,132
   21a64:	d8c03015 	stw	r3,192(sp)
   21a68:	1801a31e 	bne	r3,zero,220f8 <___vfprintf_internal_r+0xe00>
   21a6c:	d9003117 	ldw	r4,196(sp)
   21a70:	d8c02a17 	ldw	r3,168(sp)
   21a74:	20e7c83a 	sub	r19,r4,r3
   21a78:	04c19f0e 	bge	zero,r19,220f8 <___vfprintf_internal_r+0xe00>
   21a7c:	02400404 	movi	r9,16
   21a80:	d8c02017 	ldw	r3,128(sp)
   21a84:	d8801f17 	ldw	r2,124(sp)
   21a88:	4cc50d0e 	bge	r9,r19,22ec0 <___vfprintf_internal_r+0x1bc8>
   21a8c:	014000f4 	movhi	r5,3
   21a90:	29468584 	addi	r5,r5,6678
   21a94:	dc403b15 	stw	r17,236(sp)
   21a98:	d9403515 	stw	r5,212(sp)
   21a9c:	9823883a 	mov	r17,r19
   21aa0:	482d883a 	mov	r22,r9
   21aa4:	9027883a 	mov	r19,r18
   21aa8:	070001c4 	movi	fp,7
   21aac:	8025883a 	mov	r18,r16
   21ab0:	dc002c17 	ldw	r16,176(sp)
   21ab4:	00000306 	br	21ac4 <___vfprintf_internal_r+0x7cc>
   21ab8:	8c7ffc04 	addi	r17,r17,-16
   21abc:	42000204 	addi	r8,r8,8
   21ac0:	b440130e 	bge	r22,r17,21b10 <___vfprintf_internal_r+0x818>
   21ac4:	010000f4 	movhi	r4,3
   21ac8:	18c00404 	addi	r3,r3,16
   21acc:	10800044 	addi	r2,r2,1
   21ad0:	21068584 	addi	r4,r4,6678
   21ad4:	41000015 	stw	r4,0(r8)
   21ad8:	45800115 	stw	r22,4(r8)
   21adc:	d8c02015 	stw	r3,128(sp)
   21ae0:	d8801f15 	stw	r2,124(sp)
   21ae4:	e0bff40e 	bge	fp,r2,21ab8 <__alt_data_end+0xf4021ab8>
   21ae8:	d9801e04 	addi	r6,sp,120
   21aec:	b80b883a 	mov	r5,r23
   21af0:	8009883a 	mov	r4,r16
   21af4:	00288f40 	call	288f4 <__sprint_r>
   21af8:	103f011e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   21afc:	8c7ffc04 	addi	r17,r17,-16
   21b00:	d8c02017 	ldw	r3,128(sp)
   21b04:	d8801f17 	ldw	r2,124(sp)
   21b08:	da000404 	addi	r8,sp,16
   21b0c:	b47fed16 	blt	r22,r17,21ac4 <__alt_data_end+0xf4021ac4>
   21b10:	9021883a 	mov	r16,r18
   21b14:	9825883a 	mov	r18,r19
   21b18:	8827883a 	mov	r19,r17
   21b1c:	dc403b17 	ldw	r17,236(sp)
   21b20:	d9403517 	ldw	r5,212(sp)
   21b24:	98c7883a 	add	r3,r19,r3
   21b28:	10800044 	addi	r2,r2,1
   21b2c:	41400015 	stw	r5,0(r8)
   21b30:	44c00115 	stw	r19,4(r8)
   21b34:	d8c02015 	stw	r3,128(sp)
   21b38:	d8801f15 	stw	r2,124(sp)
   21b3c:	010001c4 	movi	r4,7
   21b40:	2082a316 	blt	r4,r2,225d0 <___vfprintf_internal_r+0x12d8>
   21b44:	df002787 	ldb	fp,158(sp)
   21b48:	42000204 	addi	r8,r8,8
   21b4c:	e0000c26 	beq	fp,zero,21b80 <___vfprintf_internal_r+0x888>
   21b50:	d8801f17 	ldw	r2,124(sp)
   21b54:	d9002784 	addi	r4,sp,158
   21b58:	18c00044 	addi	r3,r3,1
   21b5c:	10800044 	addi	r2,r2,1
   21b60:	41000015 	stw	r4,0(r8)
   21b64:	01000044 	movi	r4,1
   21b68:	41000115 	stw	r4,4(r8)
   21b6c:	d8c02015 	stw	r3,128(sp)
   21b70:	d8801f15 	stw	r2,124(sp)
   21b74:	010001c4 	movi	r4,7
   21b78:	20823c16 	blt	r4,r2,2246c <___vfprintf_internal_r+0x1174>
   21b7c:	42000204 	addi	r8,r8,8
   21b80:	d8802b17 	ldw	r2,172(sp)
   21b84:	10000c26 	beq	r2,zero,21bb8 <___vfprintf_internal_r+0x8c0>
   21b88:	d8801f17 	ldw	r2,124(sp)
   21b8c:	d9002704 	addi	r4,sp,156
   21b90:	18c00084 	addi	r3,r3,2
   21b94:	10800044 	addi	r2,r2,1
   21b98:	41000015 	stw	r4,0(r8)
   21b9c:	01000084 	movi	r4,2
   21ba0:	41000115 	stw	r4,4(r8)
   21ba4:	d8c02015 	stw	r3,128(sp)
   21ba8:	d8801f15 	stw	r2,124(sp)
   21bac:	010001c4 	movi	r4,7
   21bb0:	20823616 	blt	r4,r2,2248c <___vfprintf_internal_r+0x1194>
   21bb4:	42000204 	addi	r8,r8,8
   21bb8:	d9003017 	ldw	r4,192(sp)
   21bbc:	00802004 	movi	r2,128
   21bc0:	20819926 	beq	r4,r2,22228 <___vfprintf_internal_r+0xf30>
   21bc4:	d9402917 	ldw	r5,164(sp)
   21bc8:	d8802e17 	ldw	r2,184(sp)
   21bcc:	28adc83a 	sub	r22,r5,r2
   21bd0:	0580310e 	bge	zero,r22,21c98 <___vfprintf_internal_r+0x9a0>
   21bd4:	07000404 	movi	fp,16
   21bd8:	d8801f17 	ldw	r2,124(sp)
   21bdc:	e584140e 	bge	fp,r22,22c30 <___vfprintf_internal_r+0x1938>
   21be0:	014000f4 	movhi	r5,3
   21be4:	29468184 	addi	r5,r5,6662
   21be8:	dc402915 	stw	r17,164(sp)
   21bec:	d9402b15 	stw	r5,172(sp)
   21bf0:	b023883a 	mov	r17,r22
   21bf4:	04c001c4 	movi	r19,7
   21bf8:	a82d883a 	mov	r22,r21
   21bfc:	902b883a 	mov	r21,r18
   21c00:	8025883a 	mov	r18,r16
   21c04:	dc002c17 	ldw	r16,176(sp)
   21c08:	00000306 	br	21c18 <___vfprintf_internal_r+0x920>
   21c0c:	8c7ffc04 	addi	r17,r17,-16
   21c10:	42000204 	addi	r8,r8,8
   21c14:	e440110e 	bge	fp,r17,21c5c <___vfprintf_internal_r+0x964>
   21c18:	18c00404 	addi	r3,r3,16
   21c1c:	10800044 	addi	r2,r2,1
   21c20:	45000015 	stw	r20,0(r8)
   21c24:	47000115 	stw	fp,4(r8)
   21c28:	d8c02015 	stw	r3,128(sp)
   21c2c:	d8801f15 	stw	r2,124(sp)
   21c30:	98bff60e 	bge	r19,r2,21c0c <__alt_data_end+0xf4021c0c>
   21c34:	d9801e04 	addi	r6,sp,120
   21c38:	b80b883a 	mov	r5,r23
   21c3c:	8009883a 	mov	r4,r16
   21c40:	00288f40 	call	288f4 <__sprint_r>
   21c44:	103eae1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   21c48:	8c7ffc04 	addi	r17,r17,-16
   21c4c:	d8c02017 	ldw	r3,128(sp)
   21c50:	d8801f17 	ldw	r2,124(sp)
   21c54:	da000404 	addi	r8,sp,16
   21c58:	e47fef16 	blt	fp,r17,21c18 <__alt_data_end+0xf4021c18>
   21c5c:	9021883a 	mov	r16,r18
   21c60:	a825883a 	mov	r18,r21
   21c64:	b02b883a 	mov	r21,r22
   21c68:	882d883a 	mov	r22,r17
   21c6c:	dc402917 	ldw	r17,164(sp)
   21c70:	d9002b17 	ldw	r4,172(sp)
   21c74:	1d87883a 	add	r3,r3,r22
   21c78:	10800044 	addi	r2,r2,1
   21c7c:	41000015 	stw	r4,0(r8)
   21c80:	45800115 	stw	r22,4(r8)
   21c84:	d8c02015 	stw	r3,128(sp)
   21c88:	d8801f15 	stw	r2,124(sp)
   21c8c:	010001c4 	movi	r4,7
   21c90:	2081ee16 	blt	r4,r2,2244c <___vfprintf_internal_r+0x1154>
   21c94:	42000204 	addi	r8,r8,8
   21c98:	9080400c 	andi	r2,r18,256
   21c9c:	1001181e 	bne	r2,zero,22100 <___vfprintf_internal_r+0xe08>
   21ca0:	d9402e17 	ldw	r5,184(sp)
   21ca4:	d8801f17 	ldw	r2,124(sp)
   21ca8:	44000015 	stw	r16,0(r8)
   21cac:	1947883a 	add	r3,r3,r5
   21cb0:	10800044 	addi	r2,r2,1
   21cb4:	41400115 	stw	r5,4(r8)
   21cb8:	d8c02015 	stw	r3,128(sp)
   21cbc:	d8801f15 	stw	r2,124(sp)
   21cc0:	010001c4 	movi	r4,7
   21cc4:	2081d316 	blt	r4,r2,22414 <___vfprintf_internal_r+0x111c>
   21cc8:	42000204 	addi	r8,r8,8
   21ccc:	9480010c 	andi	r18,r18,4
   21cd0:	90003226 	beq	r18,zero,21d9c <___vfprintf_internal_r+0xaa4>
   21cd4:	d9403117 	ldw	r5,196(sp)
   21cd8:	d8802a17 	ldw	r2,168(sp)
   21cdc:	28a1c83a 	sub	r16,r5,r2
   21ce0:	04002e0e 	bge	zero,r16,21d9c <___vfprintf_internal_r+0xaa4>
   21ce4:	04400404 	movi	r17,16
   21ce8:	d8801f17 	ldw	r2,124(sp)
   21cec:	8c04a20e 	bge	r17,r16,22f78 <___vfprintf_internal_r+0x1c80>
   21cf0:	014000f4 	movhi	r5,3
   21cf4:	29468584 	addi	r5,r5,6678
   21cf8:	d9403515 	stw	r5,212(sp)
   21cfc:	048001c4 	movi	r18,7
   21d00:	dcc02c17 	ldw	r19,176(sp)
   21d04:	00000306 	br	21d14 <___vfprintf_internal_r+0xa1c>
   21d08:	843ffc04 	addi	r16,r16,-16
   21d0c:	42000204 	addi	r8,r8,8
   21d10:	8c00130e 	bge	r17,r16,21d60 <___vfprintf_internal_r+0xa68>
   21d14:	010000f4 	movhi	r4,3
   21d18:	18c00404 	addi	r3,r3,16
   21d1c:	10800044 	addi	r2,r2,1
   21d20:	21068584 	addi	r4,r4,6678
   21d24:	41000015 	stw	r4,0(r8)
   21d28:	44400115 	stw	r17,4(r8)
   21d2c:	d8c02015 	stw	r3,128(sp)
   21d30:	d8801f15 	stw	r2,124(sp)
   21d34:	90bff40e 	bge	r18,r2,21d08 <__alt_data_end+0xf4021d08>
   21d38:	d9801e04 	addi	r6,sp,120
   21d3c:	b80b883a 	mov	r5,r23
   21d40:	9809883a 	mov	r4,r19
   21d44:	00288f40 	call	288f4 <__sprint_r>
   21d48:	103e6d1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   21d4c:	843ffc04 	addi	r16,r16,-16
   21d50:	d8c02017 	ldw	r3,128(sp)
   21d54:	d8801f17 	ldw	r2,124(sp)
   21d58:	da000404 	addi	r8,sp,16
   21d5c:	8c3fed16 	blt	r17,r16,21d14 <__alt_data_end+0xf4021d14>
   21d60:	d9403517 	ldw	r5,212(sp)
   21d64:	1c07883a 	add	r3,r3,r16
   21d68:	10800044 	addi	r2,r2,1
   21d6c:	41400015 	stw	r5,0(r8)
   21d70:	44000115 	stw	r16,4(r8)
   21d74:	d8c02015 	stw	r3,128(sp)
   21d78:	d8801f15 	stw	r2,124(sp)
   21d7c:	010001c4 	movi	r4,7
   21d80:	2080060e 	bge	r4,r2,21d9c <___vfprintf_internal_r+0xaa4>
   21d84:	d9002c17 	ldw	r4,176(sp)
   21d88:	d9801e04 	addi	r6,sp,120
   21d8c:	b80b883a 	mov	r5,r23
   21d90:	00288f40 	call	288f4 <__sprint_r>
   21d94:	103e5a1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   21d98:	d8c02017 	ldw	r3,128(sp)
   21d9c:	d8803117 	ldw	r2,196(sp)
   21da0:	d9002a17 	ldw	r4,168(sp)
   21da4:	1100010e 	bge	r2,r4,21dac <___vfprintf_internal_r+0xab4>
   21da8:	2005883a 	mov	r2,r4
   21dac:	d9402f17 	ldw	r5,188(sp)
   21db0:	288b883a 	add	r5,r5,r2
   21db4:	d9402f15 	stw	r5,188(sp)
   21db8:	18019e1e 	bne	r3,zero,22434 <___vfprintf_internal_r+0x113c>
   21dbc:	a8800007 	ldb	r2,0(r21)
   21dc0:	d8001f15 	stw	zero,124(sp)
   21dc4:	da000404 	addi	r8,sp,16
   21dc8:	103d851e 	bne	r2,zero,213e0 <__alt_data_end+0xf40213e0>
   21dcc:	a821883a 	mov	r16,r21
   21dd0:	003d9b06 	br	21440 <__alt_data_end+0xf4021440>
   21dd4:	18c03fcc 	andi	r3,r3,255
   21dd8:	1805c11e 	bne	r3,zero,234e0 <___vfprintf_internal_r+0x21e8>
   21ddc:	94800414 	ori	r18,r18,16
   21de0:	9080080c 	andi	r2,r18,32
   21de4:	10020c26 	beq	r2,zero,22618 <___vfprintf_internal_r+0x1320>
   21de8:	d8802d17 	ldw	r2,180(sp)
   21dec:	d9002917 	ldw	r4,164(sp)
   21df0:	d8002785 	stb	zero,158(sp)
   21df4:	10c00204 	addi	r3,r2,8
   21df8:	14c00017 	ldw	r19,0(r2)
   21dfc:	15800117 	ldw	r22,4(r2)
   21e00:	20040f16 	blt	r4,zero,22e40 <___vfprintf_internal_r+0x1b48>
   21e04:	013fdfc4 	movi	r4,-129
   21e08:	9d84b03a 	or	r2,r19,r22
   21e0c:	d8c02d15 	stw	r3,180(sp)
   21e10:	9124703a 	and	r18,r18,r4
   21e14:	0039883a 	mov	fp,zero
   21e18:	103e891e 	bne	r2,zero,21840 <__alt_data_end+0xf4021840>
   21e1c:	d9002917 	ldw	r4,164(sp)
   21e20:	2002c11e 	bne	r4,zero,22928 <___vfprintf_internal_r+0x1630>
   21e24:	d8002915 	stw	zero,164(sp)
   21e28:	d8002e15 	stw	zero,184(sp)
   21e2c:	dc001e04 	addi	r16,sp,120
   21e30:	003ef806 	br	21a14 <__alt_data_end+0xf4021a14>
   21e34:	18c03fcc 	andi	r3,r3,255
   21e38:	18059d1e 	bne	r3,zero,234b0 <___vfprintf_internal_r+0x21b8>
   21e3c:	014000f4 	movhi	r5,3
   21e40:	29467504 	addi	r5,r5,6612
   21e44:	d9403915 	stw	r5,228(sp)
   21e48:	9080080c 	andi	r2,r18,32
   21e4c:	10005226 	beq	r2,zero,21f98 <___vfprintf_internal_r+0xca0>
   21e50:	d8802d17 	ldw	r2,180(sp)
   21e54:	14c00017 	ldw	r19,0(r2)
   21e58:	15800117 	ldw	r22,4(r2)
   21e5c:	10800204 	addi	r2,r2,8
   21e60:	d8802d15 	stw	r2,180(sp)
   21e64:	9080004c 	andi	r2,r18,1
   21e68:	10019026 	beq	r2,zero,224ac <___vfprintf_internal_r+0x11b4>
   21e6c:	9d84b03a 	or	r2,r19,r22
   21e70:	10036926 	beq	r2,zero,22c18 <___vfprintf_internal_r+0x1920>
   21e74:	d8c02917 	ldw	r3,164(sp)
   21e78:	00800c04 	movi	r2,48
   21e7c:	d8802705 	stb	r2,156(sp)
   21e80:	dc402745 	stb	r17,157(sp)
   21e84:	d8002785 	stb	zero,158(sp)
   21e88:	90800094 	ori	r2,r18,2
   21e8c:	18045d16 	blt	r3,zero,23004 <___vfprintf_internal_r+0x1d0c>
   21e90:	00bfdfc4 	movi	r2,-129
   21e94:	90a4703a 	and	r18,r18,r2
   21e98:	94800094 	ori	r18,r18,2
   21e9c:	0039883a 	mov	fp,zero
   21ea0:	d9003917 	ldw	r4,228(sp)
   21ea4:	dc001e04 	addi	r16,sp,120
   21ea8:	988003cc 	andi	r2,r19,15
   21eac:	b006973a 	slli	r3,r22,28
   21eb0:	2085883a 	add	r2,r4,r2
   21eb4:	9826d13a 	srli	r19,r19,4
   21eb8:	10800003 	ldbu	r2,0(r2)
   21ebc:	b02cd13a 	srli	r22,r22,4
   21ec0:	843fffc4 	addi	r16,r16,-1
   21ec4:	1ce6b03a 	or	r19,r3,r19
   21ec8:	80800005 	stb	r2,0(r16)
   21ecc:	9d84b03a 	or	r2,r19,r22
   21ed0:	103ff51e 	bne	r2,zero,21ea8 <__alt_data_end+0xf4021ea8>
   21ed4:	d8c02817 	ldw	r3,160(sp)
   21ed8:	1c07c83a 	sub	r3,r3,r16
   21edc:	d8c02e15 	stw	r3,184(sp)
   21ee0:	003ecc06 	br	21a14 <__alt_data_end+0xf4021a14>
   21ee4:	18c03fcc 	andi	r3,r3,255
   21ee8:	183e9f26 	beq	r3,zero,21968 <__alt_data_end+0xf4021968>
   21eec:	d9c02785 	stb	r7,158(sp)
   21ef0:	003e9d06 	br	21968 <__alt_data_end+0xf4021968>
   21ef4:	00c00044 	movi	r3,1
   21ef8:	01c00ac4 	movi	r7,43
   21efc:	ac400007 	ldb	r17,0(r21)
   21f00:	003d5e06 	br	2147c <__alt_data_end+0xf402147c>
   21f04:	94800814 	ori	r18,r18,32
   21f08:	ac400007 	ldb	r17,0(r21)
   21f0c:	003d5b06 	br	2147c <__alt_data_end+0xf402147c>
   21f10:	d8c02d17 	ldw	r3,180(sp)
   21f14:	d8002785 	stb	zero,158(sp)
   21f18:	1c000017 	ldw	r16,0(r3)
   21f1c:	1cc00104 	addi	r19,r3,4
   21f20:	80041926 	beq	r16,zero,22f88 <___vfprintf_internal_r+0x1c90>
   21f24:	d9002917 	ldw	r4,164(sp)
   21f28:	2003d016 	blt	r4,zero,22e6c <___vfprintf_internal_r+0x1b74>
   21f2c:	200d883a 	mov	r6,r4
   21f30:	000b883a 	mov	r5,zero
   21f34:	8009883a 	mov	r4,r16
   21f38:	da003d15 	stw	r8,244(sp)
   21f3c:	0026b080 	call	26b08 <memchr>
   21f40:	da003d17 	ldw	r8,244(sp)
   21f44:	10045426 	beq	r2,zero,23098 <___vfprintf_internal_r+0x1da0>
   21f48:	1405c83a 	sub	r2,r2,r16
   21f4c:	d8802e15 	stw	r2,184(sp)
   21f50:	1003cc16 	blt	r2,zero,22e84 <___vfprintf_internal_r+0x1b8c>
   21f54:	df002783 	ldbu	fp,158(sp)
   21f58:	d8802a15 	stw	r2,168(sp)
   21f5c:	dcc02d15 	stw	r19,180(sp)
   21f60:	d8002915 	stw	zero,164(sp)
   21f64:	d8003215 	stw	zero,200(sp)
   21f68:	003eb006 	br	21a2c <__alt_data_end+0xf4021a2c>
   21f6c:	18c03fcc 	andi	r3,r3,255
   21f70:	183f9b26 	beq	r3,zero,21de0 <__alt_data_end+0xf4021de0>
   21f74:	d9c02785 	stb	r7,158(sp)
   21f78:	003f9906 	br	21de0 <__alt_data_end+0xf4021de0>
   21f7c:	18c03fcc 	andi	r3,r3,255
   21f80:	1805551e 	bne	r3,zero,234d8 <___vfprintf_internal_r+0x21e0>
   21f84:	014000f4 	movhi	r5,3
   21f88:	29467a04 	addi	r5,r5,6632
   21f8c:	d9403915 	stw	r5,228(sp)
   21f90:	9080080c 	andi	r2,r18,32
   21f94:	103fae1e 	bne	r2,zero,21e50 <__alt_data_end+0xf4021e50>
   21f98:	9080040c 	andi	r2,r18,16
   21f9c:	1002de26 	beq	r2,zero,22b18 <___vfprintf_internal_r+0x1820>
   21fa0:	d8c02d17 	ldw	r3,180(sp)
   21fa4:	002d883a 	mov	r22,zero
   21fa8:	1cc00017 	ldw	r19,0(r3)
   21fac:	18c00104 	addi	r3,r3,4
   21fb0:	d8c02d15 	stw	r3,180(sp)
   21fb4:	003fab06 	br	21e64 <__alt_data_end+0xf4021e64>
   21fb8:	38803fcc 	andi	r2,r7,255
   21fbc:	1080201c 	xori	r2,r2,128
   21fc0:	10bfe004 	addi	r2,r2,-128
   21fc4:	1002d21e 	bne	r2,zero,22b10 <___vfprintf_internal_r+0x1818>
   21fc8:	00c00044 	movi	r3,1
   21fcc:	01c00804 	movi	r7,32
   21fd0:	ac400007 	ldb	r17,0(r21)
   21fd4:	003d2906 	br	2147c <__alt_data_end+0xf402147c>
   21fd8:	94800054 	ori	r18,r18,1
   21fdc:	ac400007 	ldb	r17,0(r21)
   21fe0:	003d2606 	br	2147c <__alt_data_end+0xf402147c>
   21fe4:	18c03fcc 	andi	r3,r3,255
   21fe8:	183e0526 	beq	r3,zero,21800 <__alt_data_end+0xf4021800>
   21fec:	d9c02785 	stb	r7,158(sp)
   21ff0:	003e0306 	br	21800 <__alt_data_end+0xf4021800>
   21ff4:	94801014 	ori	r18,r18,64
   21ff8:	ac400007 	ldb	r17,0(r21)
   21ffc:	003d1f06 	br	2147c <__alt_data_end+0xf402147c>
   22000:	ac400007 	ldb	r17,0(r21)
   22004:	8a438726 	beq	r17,r9,22e24 <___vfprintf_internal_r+0x1b2c>
   22008:	94800414 	ori	r18,r18,16
   2200c:	003d1b06 	br	2147c <__alt_data_end+0xf402147c>
   22010:	18c03fcc 	andi	r3,r3,255
   22014:	1805341e 	bne	r3,zero,234e8 <___vfprintf_internal_r+0x21f0>
   22018:	9080080c 	andi	r2,r18,32
   2201c:	1002cd26 	beq	r2,zero,22b54 <___vfprintf_internal_r+0x185c>
   22020:	d9402d17 	ldw	r5,180(sp)
   22024:	d9002f17 	ldw	r4,188(sp)
   22028:	28800017 	ldw	r2,0(r5)
   2202c:	2007d7fa 	srai	r3,r4,31
   22030:	29400104 	addi	r5,r5,4
   22034:	d9402d15 	stw	r5,180(sp)
   22038:	11000015 	stw	r4,0(r2)
   2203c:	10c00115 	stw	r3,4(r2)
   22040:	003ce506 	br	213d8 <__alt_data_end+0xf40213d8>
   22044:	d8c02d17 	ldw	r3,180(sp)
   22048:	d9002d17 	ldw	r4,180(sp)
   2204c:	d8002785 	stb	zero,158(sp)
   22050:	18800017 	ldw	r2,0(r3)
   22054:	21000104 	addi	r4,r4,4
   22058:	00c00044 	movi	r3,1
   2205c:	d8c02a15 	stw	r3,168(sp)
   22060:	d8801405 	stb	r2,80(sp)
   22064:	d9002d15 	stw	r4,180(sp)
   22068:	d8c02e15 	stw	r3,184(sp)
   2206c:	d8002915 	stw	zero,164(sp)
   22070:	d8003215 	stw	zero,200(sp)
   22074:	dc001404 	addi	r16,sp,80
   22078:	0039883a 	mov	fp,zero
   2207c:	003e7206 	br	21a48 <__alt_data_end+0xf4021a48>
   22080:	010000f4 	movhi	r4,3
   22084:	21067a04 	addi	r4,r4,6632
   22088:	0039883a 	mov	fp,zero
   2208c:	d9003915 	stw	r4,228(sp)
   22090:	04401e04 	movi	r17,120
   22094:	003f8206 	br	21ea0 <__alt_data_end+0xf4021ea0>
   22098:	18c03fcc 	andi	r3,r3,255
   2209c:	1805061e 	bne	r3,zero,234b8 <___vfprintf_internal_r+0x21c0>
   220a0:	883d9126 	beq	r17,zero,216e8 <__alt_data_end+0xf40216e8>
   220a4:	00c00044 	movi	r3,1
   220a8:	d8c02a15 	stw	r3,168(sp)
   220ac:	dc401405 	stb	r17,80(sp)
   220b0:	d8002785 	stb	zero,158(sp)
   220b4:	003fec06 	br	22068 <__alt_data_end+0xf4022068>
   220b8:	014000f4 	movhi	r5,3
   220bc:	29467a04 	addi	r5,r5,6632
   220c0:	d9403915 	stw	r5,228(sp)
   220c4:	d8c02d15 	stw	r3,180(sp)
   220c8:	1025883a 	mov	r18,r2
   220cc:	04401e04 	movi	r17,120
   220d0:	9d84b03a 	or	r2,r19,r22
   220d4:	1000fc1e 	bne	r2,zero,224c8 <___vfprintf_internal_r+0x11d0>
   220d8:	0039883a 	mov	fp,zero
   220dc:	00800084 	movi	r2,2
   220e0:	10803fcc 	andi	r2,r2,255
   220e4:	00c00044 	movi	r3,1
   220e8:	10c20f26 	beq	r2,r3,22928 <___vfprintf_internal_r+0x1630>
   220ec:	00c00084 	movi	r3,2
   220f0:	10fd6326 	beq	r2,r3,21680 <__alt_data_end+0xf4021680>
   220f4:	003e2d06 	br	219ac <__alt_data_end+0xf40219ac>
   220f8:	d8c02017 	ldw	r3,128(sp)
   220fc:	003e9306 	br	21b4c <__alt_data_end+0xf4021b4c>
   22100:	00801944 	movi	r2,101
   22104:	14407e0e 	bge	r2,r17,22300 <___vfprintf_internal_r+0x1008>
   22108:	d9003617 	ldw	r4,216(sp)
   2210c:	d9403817 	ldw	r5,224(sp)
   22110:	000d883a 	mov	r6,zero
   22114:	000f883a 	mov	r7,zero
   22118:	d8c03c15 	stw	r3,240(sp)
   2211c:	da003d15 	stw	r8,244(sp)
   22120:	002c56c0 	call	2c56c <__eqdf2>
   22124:	d8c03c17 	ldw	r3,240(sp)
   22128:	da003d17 	ldw	r8,244(sp)
   2212c:	1000f71e 	bne	r2,zero,2250c <___vfprintf_internal_r+0x1214>
   22130:	d8801f17 	ldw	r2,124(sp)
   22134:	010000f4 	movhi	r4,3
   22138:	21068104 	addi	r4,r4,6660
   2213c:	18c00044 	addi	r3,r3,1
   22140:	10800044 	addi	r2,r2,1
   22144:	41000015 	stw	r4,0(r8)
   22148:	01000044 	movi	r4,1
   2214c:	41000115 	stw	r4,4(r8)
   22150:	d8c02015 	stw	r3,128(sp)
   22154:	d8801f15 	stw	r2,124(sp)
   22158:	010001c4 	movi	r4,7
   2215c:	2082b816 	blt	r4,r2,22c40 <___vfprintf_internal_r+0x1948>
   22160:	42000204 	addi	r8,r8,8
   22164:	d8802617 	ldw	r2,152(sp)
   22168:	d9403317 	ldw	r5,204(sp)
   2216c:	11400216 	blt	r2,r5,22178 <___vfprintf_internal_r+0xe80>
   22170:	9080004c 	andi	r2,r18,1
   22174:	103ed526 	beq	r2,zero,21ccc <__alt_data_end+0xf4021ccc>
   22178:	d8803717 	ldw	r2,220(sp)
   2217c:	d9003417 	ldw	r4,208(sp)
   22180:	d9403717 	ldw	r5,220(sp)
   22184:	1887883a 	add	r3,r3,r2
   22188:	d8801f17 	ldw	r2,124(sp)
   2218c:	41000015 	stw	r4,0(r8)
   22190:	41400115 	stw	r5,4(r8)
   22194:	10800044 	addi	r2,r2,1
   22198:	d8c02015 	stw	r3,128(sp)
   2219c:	d8801f15 	stw	r2,124(sp)
   221a0:	010001c4 	movi	r4,7
   221a4:	20832916 	blt	r4,r2,22e4c <___vfprintf_internal_r+0x1b54>
   221a8:	42000204 	addi	r8,r8,8
   221ac:	d8803317 	ldw	r2,204(sp)
   221b0:	143fffc4 	addi	r16,r2,-1
   221b4:	043ec50e 	bge	zero,r16,21ccc <__alt_data_end+0xf4021ccc>
   221b8:	04400404 	movi	r17,16
   221bc:	d8801f17 	ldw	r2,124(sp)
   221c0:	8c00880e 	bge	r17,r16,223e4 <___vfprintf_internal_r+0x10ec>
   221c4:	014000f4 	movhi	r5,3
   221c8:	29468184 	addi	r5,r5,6662
   221cc:	d9402b15 	stw	r5,172(sp)
   221d0:	058001c4 	movi	r22,7
   221d4:	dcc02c17 	ldw	r19,176(sp)
   221d8:	00000306 	br	221e8 <___vfprintf_internal_r+0xef0>
   221dc:	42000204 	addi	r8,r8,8
   221e0:	843ffc04 	addi	r16,r16,-16
   221e4:	8c00820e 	bge	r17,r16,223f0 <___vfprintf_internal_r+0x10f8>
   221e8:	18c00404 	addi	r3,r3,16
   221ec:	10800044 	addi	r2,r2,1
   221f0:	45000015 	stw	r20,0(r8)
   221f4:	44400115 	stw	r17,4(r8)
   221f8:	d8c02015 	stw	r3,128(sp)
   221fc:	d8801f15 	stw	r2,124(sp)
   22200:	b0bff60e 	bge	r22,r2,221dc <__alt_data_end+0xf40221dc>
   22204:	d9801e04 	addi	r6,sp,120
   22208:	b80b883a 	mov	r5,r23
   2220c:	9809883a 	mov	r4,r19
   22210:	00288f40 	call	288f4 <__sprint_r>
   22214:	103d3a1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22218:	d8c02017 	ldw	r3,128(sp)
   2221c:	d8801f17 	ldw	r2,124(sp)
   22220:	da000404 	addi	r8,sp,16
   22224:	003fee06 	br	221e0 <__alt_data_end+0xf40221e0>
   22228:	d9403117 	ldw	r5,196(sp)
   2222c:	d8802a17 	ldw	r2,168(sp)
   22230:	28adc83a 	sub	r22,r5,r2
   22234:	05be630e 	bge	zero,r22,21bc4 <__alt_data_end+0xf4021bc4>
   22238:	07000404 	movi	fp,16
   2223c:	d8801f17 	ldw	r2,124(sp)
   22240:	e5838f0e 	bge	fp,r22,23080 <___vfprintf_internal_r+0x1d88>
   22244:	014000f4 	movhi	r5,3
   22248:	29468184 	addi	r5,r5,6662
   2224c:	dc403015 	stw	r17,192(sp)
   22250:	d9402b15 	stw	r5,172(sp)
   22254:	b023883a 	mov	r17,r22
   22258:	04c001c4 	movi	r19,7
   2225c:	a82d883a 	mov	r22,r21
   22260:	902b883a 	mov	r21,r18
   22264:	8025883a 	mov	r18,r16
   22268:	dc002c17 	ldw	r16,176(sp)
   2226c:	00000306 	br	2227c <___vfprintf_internal_r+0xf84>
   22270:	8c7ffc04 	addi	r17,r17,-16
   22274:	42000204 	addi	r8,r8,8
   22278:	e440110e 	bge	fp,r17,222c0 <___vfprintf_internal_r+0xfc8>
   2227c:	18c00404 	addi	r3,r3,16
   22280:	10800044 	addi	r2,r2,1
   22284:	45000015 	stw	r20,0(r8)
   22288:	47000115 	stw	fp,4(r8)
   2228c:	d8c02015 	stw	r3,128(sp)
   22290:	d8801f15 	stw	r2,124(sp)
   22294:	98bff60e 	bge	r19,r2,22270 <__alt_data_end+0xf4022270>
   22298:	d9801e04 	addi	r6,sp,120
   2229c:	b80b883a 	mov	r5,r23
   222a0:	8009883a 	mov	r4,r16
   222a4:	00288f40 	call	288f4 <__sprint_r>
   222a8:	103d151e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   222ac:	8c7ffc04 	addi	r17,r17,-16
   222b0:	d8c02017 	ldw	r3,128(sp)
   222b4:	d8801f17 	ldw	r2,124(sp)
   222b8:	da000404 	addi	r8,sp,16
   222bc:	e47fef16 	blt	fp,r17,2227c <__alt_data_end+0xf402227c>
   222c0:	9021883a 	mov	r16,r18
   222c4:	a825883a 	mov	r18,r21
   222c8:	b02b883a 	mov	r21,r22
   222cc:	882d883a 	mov	r22,r17
   222d0:	dc403017 	ldw	r17,192(sp)
   222d4:	d9002b17 	ldw	r4,172(sp)
   222d8:	1d87883a 	add	r3,r3,r22
   222dc:	10800044 	addi	r2,r2,1
   222e0:	41000015 	stw	r4,0(r8)
   222e4:	45800115 	stw	r22,4(r8)
   222e8:	d8c02015 	stw	r3,128(sp)
   222ec:	d8801f15 	stw	r2,124(sp)
   222f0:	010001c4 	movi	r4,7
   222f4:	20818e16 	blt	r4,r2,22930 <___vfprintf_internal_r+0x1638>
   222f8:	42000204 	addi	r8,r8,8
   222fc:	003e3106 	br	21bc4 <__alt_data_end+0xf4021bc4>
   22300:	d9403317 	ldw	r5,204(sp)
   22304:	00800044 	movi	r2,1
   22308:	18c00044 	addi	r3,r3,1
   2230c:	1141530e 	bge	r2,r5,2285c <___vfprintf_internal_r+0x1564>
   22310:	dc401f17 	ldw	r17,124(sp)
   22314:	00800044 	movi	r2,1
   22318:	40800115 	stw	r2,4(r8)
   2231c:	8c400044 	addi	r17,r17,1
   22320:	44000015 	stw	r16,0(r8)
   22324:	d8c02015 	stw	r3,128(sp)
   22328:	dc401f15 	stw	r17,124(sp)
   2232c:	008001c4 	movi	r2,7
   22330:	14416b16 	blt	r2,r17,228e0 <___vfprintf_internal_r+0x15e8>
   22334:	42000204 	addi	r8,r8,8
   22338:	d8803717 	ldw	r2,220(sp)
   2233c:	d9003417 	ldw	r4,208(sp)
   22340:	8c400044 	addi	r17,r17,1
   22344:	10c7883a 	add	r3,r2,r3
   22348:	40800115 	stw	r2,4(r8)
   2234c:	41000015 	stw	r4,0(r8)
   22350:	d8c02015 	stw	r3,128(sp)
   22354:	dc401f15 	stw	r17,124(sp)
   22358:	008001c4 	movi	r2,7
   2235c:	14416916 	blt	r2,r17,22904 <___vfprintf_internal_r+0x160c>
   22360:	45800204 	addi	r22,r8,8
   22364:	d9003617 	ldw	r4,216(sp)
   22368:	d9403817 	ldw	r5,224(sp)
   2236c:	000d883a 	mov	r6,zero
   22370:	000f883a 	mov	r7,zero
   22374:	d8c03c15 	stw	r3,240(sp)
   22378:	002c56c0 	call	2c56c <__eqdf2>
   2237c:	d8c03c17 	ldw	r3,240(sp)
   22380:	1000bc26 	beq	r2,zero,22674 <___vfprintf_internal_r+0x137c>
   22384:	d9403317 	ldw	r5,204(sp)
   22388:	84000044 	addi	r16,r16,1
   2238c:	8c400044 	addi	r17,r17,1
   22390:	28bfffc4 	addi	r2,r5,-1
   22394:	1887883a 	add	r3,r3,r2
   22398:	b0800115 	stw	r2,4(r22)
   2239c:	b4000015 	stw	r16,0(r22)
   223a0:	d8c02015 	stw	r3,128(sp)
   223a4:	dc401f15 	stw	r17,124(sp)
   223a8:	008001c4 	movi	r2,7
   223ac:	14414316 	blt	r2,r17,228bc <___vfprintf_internal_r+0x15c4>
   223b0:	b5800204 	addi	r22,r22,8
   223b4:	d9003a17 	ldw	r4,232(sp)
   223b8:	df0022c4 	addi	fp,sp,139
   223bc:	8c400044 	addi	r17,r17,1
   223c0:	20c7883a 	add	r3,r4,r3
   223c4:	b7000015 	stw	fp,0(r22)
   223c8:	b1000115 	stw	r4,4(r22)
   223cc:	d8c02015 	stw	r3,128(sp)
   223d0:	dc401f15 	stw	r17,124(sp)
   223d4:	008001c4 	movi	r2,7
   223d8:	14400e16 	blt	r2,r17,22414 <___vfprintf_internal_r+0x111c>
   223dc:	b2000204 	addi	r8,r22,8
   223e0:	003e3a06 	br	21ccc <__alt_data_end+0xf4021ccc>
   223e4:	010000f4 	movhi	r4,3
   223e8:	21068184 	addi	r4,r4,6662
   223ec:	d9002b15 	stw	r4,172(sp)
   223f0:	d9002b17 	ldw	r4,172(sp)
   223f4:	1c07883a 	add	r3,r3,r16
   223f8:	44000115 	stw	r16,4(r8)
   223fc:	41000015 	stw	r4,0(r8)
   22400:	10800044 	addi	r2,r2,1
   22404:	d8c02015 	stw	r3,128(sp)
   22408:	d8801f15 	stw	r2,124(sp)
   2240c:	010001c4 	movi	r4,7
   22410:	20be2d0e 	bge	r4,r2,21cc8 <__alt_data_end+0xf4021cc8>
   22414:	d9002c17 	ldw	r4,176(sp)
   22418:	d9801e04 	addi	r6,sp,120
   2241c:	b80b883a 	mov	r5,r23
   22420:	00288f40 	call	288f4 <__sprint_r>
   22424:	103cb61e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22428:	d8c02017 	ldw	r3,128(sp)
   2242c:	da000404 	addi	r8,sp,16
   22430:	003e2606 	br	21ccc <__alt_data_end+0xf4021ccc>
   22434:	d9002c17 	ldw	r4,176(sp)
   22438:	d9801e04 	addi	r6,sp,120
   2243c:	b80b883a 	mov	r5,r23
   22440:	00288f40 	call	288f4 <__sprint_r>
   22444:	103e5d26 	beq	r2,zero,21dbc <__alt_data_end+0xf4021dbc>
   22448:	003cad06 	br	21700 <__alt_data_end+0xf4021700>
   2244c:	d9002c17 	ldw	r4,176(sp)
   22450:	d9801e04 	addi	r6,sp,120
   22454:	b80b883a 	mov	r5,r23
   22458:	00288f40 	call	288f4 <__sprint_r>
   2245c:	103ca81e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22460:	d8c02017 	ldw	r3,128(sp)
   22464:	da000404 	addi	r8,sp,16
   22468:	003e0b06 	br	21c98 <__alt_data_end+0xf4021c98>
   2246c:	d9002c17 	ldw	r4,176(sp)
   22470:	d9801e04 	addi	r6,sp,120
   22474:	b80b883a 	mov	r5,r23
   22478:	00288f40 	call	288f4 <__sprint_r>
   2247c:	103ca01e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22480:	d8c02017 	ldw	r3,128(sp)
   22484:	da000404 	addi	r8,sp,16
   22488:	003dbd06 	br	21b80 <__alt_data_end+0xf4021b80>
   2248c:	d9002c17 	ldw	r4,176(sp)
   22490:	d9801e04 	addi	r6,sp,120
   22494:	b80b883a 	mov	r5,r23
   22498:	00288f40 	call	288f4 <__sprint_r>
   2249c:	103c981e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   224a0:	d8c02017 	ldw	r3,128(sp)
   224a4:	da000404 	addi	r8,sp,16
   224a8:	003dc306 	br	21bb8 <__alt_data_end+0xf4021bb8>
   224ac:	d8802917 	ldw	r2,164(sp)
   224b0:	d8002785 	stb	zero,158(sp)
   224b4:	103f0616 	blt	r2,zero,220d0 <__alt_data_end+0xf40220d0>
   224b8:	00ffdfc4 	movi	r3,-129
   224bc:	9d84b03a 	or	r2,r19,r22
   224c0:	90e4703a 	and	r18,r18,r3
   224c4:	103c6b26 	beq	r2,zero,21674 <__alt_data_end+0xf4021674>
   224c8:	0039883a 	mov	fp,zero
   224cc:	003e7406 	br	21ea0 <__alt_data_end+0xf4021ea0>
   224d0:	9080040c 	andi	r2,r18,16
   224d4:	1001b326 	beq	r2,zero,22ba4 <___vfprintf_internal_r+0x18ac>
   224d8:	d9002d17 	ldw	r4,180(sp)
   224dc:	d9402917 	ldw	r5,164(sp)
   224e0:	d8002785 	stb	zero,158(sp)
   224e4:	20800104 	addi	r2,r4,4
   224e8:	24c00017 	ldw	r19,0(r4)
   224ec:	002d883a 	mov	r22,zero
   224f0:	2801b516 	blt	r5,zero,22bc8 <___vfprintf_internal_r+0x18d0>
   224f4:	00ffdfc4 	movi	r3,-129
   224f8:	d8802d15 	stw	r2,180(sp)
   224fc:	90e4703a 	and	r18,r18,r3
   22500:	983d2726 	beq	r19,zero,219a0 <__alt_data_end+0xf40219a0>
   22504:	0039883a 	mov	fp,zero
   22508:	003d2a06 	br	219b4 <__alt_data_end+0xf40219b4>
   2250c:	dc402617 	ldw	r17,152(sp)
   22510:	0441d30e 	bge	zero,r17,22c60 <___vfprintf_internal_r+0x1968>
   22514:	dc403217 	ldw	r17,200(sp)
   22518:	d8803317 	ldw	r2,204(sp)
   2251c:	1440010e 	bge	r2,r17,22524 <___vfprintf_internal_r+0x122c>
   22520:	1023883a 	mov	r17,r2
   22524:	04400a0e 	bge	zero,r17,22550 <___vfprintf_internal_r+0x1258>
   22528:	d8801f17 	ldw	r2,124(sp)
   2252c:	1c47883a 	add	r3,r3,r17
   22530:	44000015 	stw	r16,0(r8)
   22534:	10800044 	addi	r2,r2,1
   22538:	44400115 	stw	r17,4(r8)
   2253c:	d8c02015 	stw	r3,128(sp)
   22540:	d8801f15 	stw	r2,124(sp)
   22544:	010001c4 	movi	r4,7
   22548:	20826516 	blt	r4,r2,22ee0 <___vfprintf_internal_r+0x1be8>
   2254c:	42000204 	addi	r8,r8,8
   22550:	88026116 	blt	r17,zero,22ed8 <___vfprintf_internal_r+0x1be0>
   22554:	d9003217 	ldw	r4,200(sp)
   22558:	2463c83a 	sub	r17,r4,r17
   2255c:	04407b0e 	bge	zero,r17,2274c <___vfprintf_internal_r+0x1454>
   22560:	05800404 	movi	r22,16
   22564:	d8801f17 	ldw	r2,124(sp)
   22568:	b4419d0e 	bge	r22,r17,22be0 <___vfprintf_internal_r+0x18e8>
   2256c:	010000f4 	movhi	r4,3
   22570:	21068184 	addi	r4,r4,6662
   22574:	d9002b15 	stw	r4,172(sp)
   22578:	070001c4 	movi	fp,7
   2257c:	dcc02c17 	ldw	r19,176(sp)
   22580:	00000306 	br	22590 <___vfprintf_internal_r+0x1298>
   22584:	42000204 	addi	r8,r8,8
   22588:	8c7ffc04 	addi	r17,r17,-16
   2258c:	b441970e 	bge	r22,r17,22bec <___vfprintf_internal_r+0x18f4>
   22590:	18c00404 	addi	r3,r3,16
   22594:	10800044 	addi	r2,r2,1
   22598:	45000015 	stw	r20,0(r8)
   2259c:	45800115 	stw	r22,4(r8)
   225a0:	d8c02015 	stw	r3,128(sp)
   225a4:	d8801f15 	stw	r2,124(sp)
   225a8:	e0bff60e 	bge	fp,r2,22584 <__alt_data_end+0xf4022584>
   225ac:	d9801e04 	addi	r6,sp,120
   225b0:	b80b883a 	mov	r5,r23
   225b4:	9809883a 	mov	r4,r19
   225b8:	00288f40 	call	288f4 <__sprint_r>
   225bc:	103c501e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   225c0:	d8c02017 	ldw	r3,128(sp)
   225c4:	d8801f17 	ldw	r2,124(sp)
   225c8:	da000404 	addi	r8,sp,16
   225cc:	003fee06 	br	22588 <__alt_data_end+0xf4022588>
   225d0:	d9002c17 	ldw	r4,176(sp)
   225d4:	d9801e04 	addi	r6,sp,120
   225d8:	b80b883a 	mov	r5,r23
   225dc:	00288f40 	call	288f4 <__sprint_r>
   225e0:	103c471e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   225e4:	d8c02017 	ldw	r3,128(sp)
   225e8:	df002787 	ldb	fp,158(sp)
   225ec:	da000404 	addi	r8,sp,16
   225f0:	003d5606 	br	21b4c <__alt_data_end+0xf4021b4c>
   225f4:	9080040c 	andi	r2,r18,16
   225f8:	10016126 	beq	r2,zero,22b80 <___vfprintf_internal_r+0x1888>
   225fc:	d8802d17 	ldw	r2,180(sp)
   22600:	14c00017 	ldw	r19,0(r2)
   22604:	10800104 	addi	r2,r2,4
   22608:	d8802d15 	stw	r2,180(sp)
   2260c:	982dd7fa 	srai	r22,r19,31
   22610:	b005883a 	mov	r2,r22
   22614:	003c8206 	br	21820 <__alt_data_end+0xf4021820>
   22618:	9080040c 	andi	r2,r18,16
   2261c:	10003526 	beq	r2,zero,226f4 <___vfprintf_internal_r+0x13fc>
   22620:	d9402d17 	ldw	r5,180(sp)
   22624:	d8c02917 	ldw	r3,164(sp)
   22628:	d8002785 	stb	zero,158(sp)
   2262c:	28800104 	addi	r2,r5,4
   22630:	2cc00017 	ldw	r19,0(r5)
   22634:	002d883a 	mov	r22,zero
   22638:	18003716 	blt	r3,zero,22718 <___vfprintf_internal_r+0x1420>
   2263c:	00ffdfc4 	movi	r3,-129
   22640:	d8802d15 	stw	r2,180(sp)
   22644:	90e4703a 	and	r18,r18,r3
   22648:	0039883a 	mov	fp,zero
   2264c:	983df326 	beq	r19,zero,21e1c <__alt_data_end+0xf4021e1c>
   22650:	00800244 	movi	r2,9
   22654:	14fc7b36 	bltu	r2,r19,21844 <__alt_data_end+0xf4021844>
   22658:	d8c02817 	ldw	r3,160(sp)
   2265c:	dc001dc4 	addi	r16,sp,119
   22660:	9cc00c04 	addi	r19,r19,48
   22664:	1c07c83a 	sub	r3,r3,r16
   22668:	dcc01dc5 	stb	r19,119(sp)
   2266c:	d8c02e15 	stw	r3,184(sp)
   22670:	003ce806 	br	21a14 <__alt_data_end+0xf4021a14>
   22674:	d8803317 	ldw	r2,204(sp)
   22678:	143fffc4 	addi	r16,r2,-1
   2267c:	043f4d0e 	bge	zero,r16,223b4 <__alt_data_end+0xf40223b4>
   22680:	07000404 	movi	fp,16
   22684:	e400810e 	bge	fp,r16,2288c <___vfprintf_internal_r+0x1594>
   22688:	014000f4 	movhi	r5,3
   2268c:	29468184 	addi	r5,r5,6662
   22690:	d9402b15 	stw	r5,172(sp)
   22694:	01c001c4 	movi	r7,7
   22698:	dcc02c17 	ldw	r19,176(sp)
   2269c:	00000306 	br	226ac <___vfprintf_internal_r+0x13b4>
   226a0:	b5800204 	addi	r22,r22,8
   226a4:	843ffc04 	addi	r16,r16,-16
   226a8:	e4007b0e 	bge	fp,r16,22898 <___vfprintf_internal_r+0x15a0>
   226ac:	18c00404 	addi	r3,r3,16
   226b0:	8c400044 	addi	r17,r17,1
   226b4:	b5000015 	stw	r20,0(r22)
   226b8:	b7000115 	stw	fp,4(r22)
   226bc:	d8c02015 	stw	r3,128(sp)
   226c0:	dc401f15 	stw	r17,124(sp)
   226c4:	3c7ff60e 	bge	r7,r17,226a0 <__alt_data_end+0xf40226a0>
   226c8:	d9801e04 	addi	r6,sp,120
   226cc:	b80b883a 	mov	r5,r23
   226d0:	9809883a 	mov	r4,r19
   226d4:	d9c03c15 	stw	r7,240(sp)
   226d8:	00288f40 	call	288f4 <__sprint_r>
   226dc:	d9c03c17 	ldw	r7,240(sp)
   226e0:	103c071e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   226e4:	d8c02017 	ldw	r3,128(sp)
   226e8:	dc401f17 	ldw	r17,124(sp)
   226ec:	dd800404 	addi	r22,sp,16
   226f0:	003fec06 	br	226a4 <__alt_data_end+0xf40226a4>
   226f4:	9080100c 	andi	r2,r18,64
   226f8:	d8002785 	stb	zero,158(sp)
   226fc:	10010e26 	beq	r2,zero,22b38 <___vfprintf_internal_r+0x1840>
   22700:	d9002d17 	ldw	r4,180(sp)
   22704:	d9402917 	ldw	r5,164(sp)
   22708:	002d883a 	mov	r22,zero
   2270c:	20800104 	addi	r2,r4,4
   22710:	24c0000b 	ldhu	r19,0(r4)
   22714:	283fc90e 	bge	r5,zero,2263c <__alt_data_end+0xf402263c>
   22718:	d8802d15 	stw	r2,180(sp)
   2271c:	0039883a 	mov	fp,zero
   22720:	9d84b03a 	or	r2,r19,r22
   22724:	103c461e 	bne	r2,zero,21840 <__alt_data_end+0xf4021840>
   22728:	00800044 	movi	r2,1
   2272c:	003e6c06 	br	220e0 <__alt_data_end+0xf40220e0>
   22730:	d9002c17 	ldw	r4,176(sp)
   22734:	d9801e04 	addi	r6,sp,120
   22738:	b80b883a 	mov	r5,r23
   2273c:	00288f40 	call	288f4 <__sprint_r>
   22740:	103bef1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22744:	d8c02017 	ldw	r3,128(sp)
   22748:	da000404 	addi	r8,sp,16
   2274c:	d9003217 	ldw	r4,200(sp)
   22750:	d8802617 	ldw	r2,152(sp)
   22754:	d9403317 	ldw	r5,204(sp)
   22758:	8123883a 	add	r17,r16,r4
   2275c:	11400216 	blt	r2,r5,22768 <___vfprintf_internal_r+0x1470>
   22760:	9100004c 	andi	r4,r18,1
   22764:	20000d26 	beq	r4,zero,2279c <___vfprintf_internal_r+0x14a4>
   22768:	d9003717 	ldw	r4,220(sp)
   2276c:	d9403417 	ldw	r5,208(sp)
   22770:	1907883a 	add	r3,r3,r4
   22774:	d9001f17 	ldw	r4,124(sp)
   22778:	41400015 	stw	r5,0(r8)
   2277c:	d9403717 	ldw	r5,220(sp)
   22780:	21000044 	addi	r4,r4,1
   22784:	d8c02015 	stw	r3,128(sp)
   22788:	41400115 	stw	r5,4(r8)
   2278c:	d9001f15 	stw	r4,124(sp)
   22790:	014001c4 	movi	r5,7
   22794:	2901e816 	blt	r5,r4,22f38 <___vfprintf_internal_r+0x1c40>
   22798:	42000204 	addi	r8,r8,8
   2279c:	d9003317 	ldw	r4,204(sp)
   227a0:	8121883a 	add	r16,r16,r4
   227a4:	2085c83a 	sub	r2,r4,r2
   227a8:	8461c83a 	sub	r16,r16,r17
   227ac:	1400010e 	bge	r2,r16,227b4 <___vfprintf_internal_r+0x14bc>
   227b0:	1021883a 	mov	r16,r2
   227b4:	04000a0e 	bge	zero,r16,227e0 <___vfprintf_internal_r+0x14e8>
   227b8:	d9001f17 	ldw	r4,124(sp)
   227bc:	1c07883a 	add	r3,r3,r16
   227c0:	44400015 	stw	r17,0(r8)
   227c4:	21000044 	addi	r4,r4,1
   227c8:	44000115 	stw	r16,4(r8)
   227cc:	d8c02015 	stw	r3,128(sp)
   227d0:	d9001f15 	stw	r4,124(sp)
   227d4:	014001c4 	movi	r5,7
   227d8:	2901fb16 	blt	r5,r4,22fc8 <___vfprintf_internal_r+0x1cd0>
   227dc:	42000204 	addi	r8,r8,8
   227e0:	8001f716 	blt	r16,zero,22fc0 <___vfprintf_internal_r+0x1cc8>
   227e4:	1421c83a 	sub	r16,r2,r16
   227e8:	043d380e 	bge	zero,r16,21ccc <__alt_data_end+0xf4021ccc>
   227ec:	04400404 	movi	r17,16
   227f0:	d8801f17 	ldw	r2,124(sp)
   227f4:	8c3efb0e 	bge	r17,r16,223e4 <__alt_data_end+0xf40223e4>
   227f8:	014000f4 	movhi	r5,3
   227fc:	29468184 	addi	r5,r5,6662
   22800:	d9402b15 	stw	r5,172(sp)
   22804:	058001c4 	movi	r22,7
   22808:	dcc02c17 	ldw	r19,176(sp)
   2280c:	00000306 	br	2281c <___vfprintf_internal_r+0x1524>
   22810:	42000204 	addi	r8,r8,8
   22814:	843ffc04 	addi	r16,r16,-16
   22818:	8c3ef50e 	bge	r17,r16,223f0 <__alt_data_end+0xf40223f0>
   2281c:	18c00404 	addi	r3,r3,16
   22820:	10800044 	addi	r2,r2,1
   22824:	45000015 	stw	r20,0(r8)
   22828:	44400115 	stw	r17,4(r8)
   2282c:	d8c02015 	stw	r3,128(sp)
   22830:	d8801f15 	stw	r2,124(sp)
   22834:	b0bff60e 	bge	r22,r2,22810 <__alt_data_end+0xf4022810>
   22838:	d9801e04 	addi	r6,sp,120
   2283c:	b80b883a 	mov	r5,r23
   22840:	9809883a 	mov	r4,r19
   22844:	00288f40 	call	288f4 <__sprint_r>
   22848:	103bad1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   2284c:	d8c02017 	ldw	r3,128(sp)
   22850:	d8801f17 	ldw	r2,124(sp)
   22854:	da000404 	addi	r8,sp,16
   22858:	003fee06 	br	22814 <__alt_data_end+0xf4022814>
   2285c:	9088703a 	and	r4,r18,r2
   22860:	203eab1e 	bne	r4,zero,22310 <__alt_data_end+0xf4022310>
   22864:	dc401f17 	ldw	r17,124(sp)
   22868:	40800115 	stw	r2,4(r8)
   2286c:	44000015 	stw	r16,0(r8)
   22870:	8c400044 	addi	r17,r17,1
   22874:	d8c02015 	stw	r3,128(sp)
   22878:	dc401f15 	stw	r17,124(sp)
   2287c:	008001c4 	movi	r2,7
   22880:	14400e16 	blt	r2,r17,228bc <___vfprintf_internal_r+0x15c4>
   22884:	45800204 	addi	r22,r8,8
   22888:	003eca06 	br	223b4 <__alt_data_end+0xf40223b4>
   2288c:	010000f4 	movhi	r4,3
   22890:	21068184 	addi	r4,r4,6662
   22894:	d9002b15 	stw	r4,172(sp)
   22898:	d8802b17 	ldw	r2,172(sp)
   2289c:	1c07883a 	add	r3,r3,r16
   228a0:	8c400044 	addi	r17,r17,1
   228a4:	b0800015 	stw	r2,0(r22)
   228a8:	b4000115 	stw	r16,4(r22)
   228ac:	d8c02015 	stw	r3,128(sp)
   228b0:	dc401f15 	stw	r17,124(sp)
   228b4:	008001c4 	movi	r2,7
   228b8:	147ebd0e 	bge	r2,r17,223b0 <__alt_data_end+0xf40223b0>
   228bc:	d9002c17 	ldw	r4,176(sp)
   228c0:	d9801e04 	addi	r6,sp,120
   228c4:	b80b883a 	mov	r5,r23
   228c8:	00288f40 	call	288f4 <__sprint_r>
   228cc:	103b8c1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   228d0:	d8c02017 	ldw	r3,128(sp)
   228d4:	dc401f17 	ldw	r17,124(sp)
   228d8:	dd800404 	addi	r22,sp,16
   228dc:	003eb506 	br	223b4 <__alt_data_end+0xf40223b4>
   228e0:	d9002c17 	ldw	r4,176(sp)
   228e4:	d9801e04 	addi	r6,sp,120
   228e8:	b80b883a 	mov	r5,r23
   228ec:	00288f40 	call	288f4 <__sprint_r>
   228f0:	103b831e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   228f4:	d8c02017 	ldw	r3,128(sp)
   228f8:	dc401f17 	ldw	r17,124(sp)
   228fc:	da000404 	addi	r8,sp,16
   22900:	003e8d06 	br	22338 <__alt_data_end+0xf4022338>
   22904:	d9002c17 	ldw	r4,176(sp)
   22908:	d9801e04 	addi	r6,sp,120
   2290c:	b80b883a 	mov	r5,r23
   22910:	00288f40 	call	288f4 <__sprint_r>
   22914:	103b7a1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22918:	d8c02017 	ldw	r3,128(sp)
   2291c:	dc401f17 	ldw	r17,124(sp)
   22920:	dd800404 	addi	r22,sp,16
   22924:	003e8f06 	br	22364 <__alt_data_end+0xf4022364>
   22928:	0027883a 	mov	r19,zero
   2292c:	003f4a06 	br	22658 <__alt_data_end+0xf4022658>
   22930:	d9002c17 	ldw	r4,176(sp)
   22934:	d9801e04 	addi	r6,sp,120
   22938:	b80b883a 	mov	r5,r23
   2293c:	00288f40 	call	288f4 <__sprint_r>
   22940:	103b6f1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22944:	d8c02017 	ldw	r3,128(sp)
   22948:	da000404 	addi	r8,sp,16
   2294c:	003c9d06 	br	21bc4 <__alt_data_end+0xf4021bc4>
   22950:	04e7c83a 	sub	r19,zero,r19
   22954:	9804c03a 	cmpne	r2,r19,zero
   22958:	05adc83a 	sub	r22,zero,r22
   2295c:	b0adc83a 	sub	r22,r22,r2
   22960:	d8802917 	ldw	r2,164(sp)
   22964:	07000b44 	movi	fp,45
   22968:	df002785 	stb	fp,158(sp)
   2296c:	10017b16 	blt	r2,zero,22f5c <___vfprintf_internal_r+0x1c64>
   22970:	00bfdfc4 	movi	r2,-129
   22974:	90a4703a 	and	r18,r18,r2
   22978:	003bb106 	br	21840 <__alt_data_end+0xf4021840>
   2297c:	d9003617 	ldw	r4,216(sp)
   22980:	d9403817 	ldw	r5,224(sp)
   22984:	da003d15 	stw	r8,244(sp)
   22988:	00285180 	call	28518 <__fpclassifyd>
   2298c:	da003d17 	ldw	r8,244(sp)
   22990:	1000f026 	beq	r2,zero,22d54 <___vfprintf_internal_r+0x1a5c>
   22994:	d9002917 	ldw	r4,164(sp)
   22998:	05bff7c4 	movi	r22,-33
   2299c:	00bfffc4 	movi	r2,-1
   229a0:	8dac703a 	and	r22,r17,r22
   229a4:	20820026 	beq	r4,r2,231a8 <___vfprintf_internal_r+0x1eb0>
   229a8:	008011c4 	movi	r2,71
   229ac:	b081f726 	beq	r22,r2,2318c <___vfprintf_internal_r+0x1e94>
   229b0:	d9003817 	ldw	r4,224(sp)
   229b4:	90c04014 	ori	r3,r18,256
   229b8:	d8c02b15 	stw	r3,172(sp)
   229bc:	20021516 	blt	r4,zero,23214 <___vfprintf_internal_r+0x1f1c>
   229c0:	dcc03817 	ldw	r19,224(sp)
   229c4:	d8002a05 	stb	zero,168(sp)
   229c8:	00801984 	movi	r2,102
   229cc:	8881f926 	beq	r17,r2,231b4 <___vfprintf_internal_r+0x1ebc>
   229d0:	00801184 	movi	r2,70
   229d4:	88821c26 	beq	r17,r2,23248 <___vfprintf_internal_r+0x1f50>
   229d8:	00801144 	movi	r2,69
   229dc:	b081ef26 	beq	r22,r2,2319c <___vfprintf_internal_r+0x1ea4>
   229e0:	d8c02917 	ldw	r3,164(sp)
   229e4:	d8802104 	addi	r2,sp,132
   229e8:	d8800315 	stw	r2,12(sp)
   229ec:	d9403617 	ldw	r5,216(sp)
   229f0:	d8802504 	addi	r2,sp,148
   229f4:	d9002c17 	ldw	r4,176(sp)
   229f8:	d8800215 	stw	r2,8(sp)
   229fc:	d8802604 	addi	r2,sp,152
   22a00:	d8c00015 	stw	r3,0(sp)
   22a04:	d8800115 	stw	r2,4(sp)
   22a08:	01c00084 	movi	r7,2
   22a0c:	980d883a 	mov	r6,r19
   22a10:	d8c03c15 	stw	r3,240(sp)
   22a14:	da003d15 	stw	r8,244(sp)
   22a18:	002391c0 	call	2391c <_dtoa_r>
   22a1c:	1021883a 	mov	r16,r2
   22a20:	008019c4 	movi	r2,103
   22a24:	d8c03c17 	ldw	r3,240(sp)
   22a28:	da003d17 	ldw	r8,244(sp)
   22a2c:	88817126 	beq	r17,r2,22ff4 <___vfprintf_internal_r+0x1cfc>
   22a30:	008011c4 	movi	r2,71
   22a34:	88829226 	beq	r17,r2,23480 <___vfprintf_internal_r+0x2188>
   22a38:	80f9883a 	add	fp,r16,r3
   22a3c:	d9003617 	ldw	r4,216(sp)
   22a40:	000d883a 	mov	r6,zero
   22a44:	000f883a 	mov	r7,zero
   22a48:	980b883a 	mov	r5,r19
   22a4c:	da003d15 	stw	r8,244(sp)
   22a50:	002c56c0 	call	2c56c <__eqdf2>
   22a54:	da003d17 	ldw	r8,244(sp)
   22a58:	10018d26 	beq	r2,zero,23090 <___vfprintf_internal_r+0x1d98>
   22a5c:	d8802117 	ldw	r2,132(sp)
   22a60:	1700062e 	bgeu	r2,fp,22a7c <___vfprintf_internal_r+0x1784>
   22a64:	01000c04 	movi	r4,48
   22a68:	10c00044 	addi	r3,r2,1
   22a6c:	d8c02115 	stw	r3,132(sp)
   22a70:	11000005 	stb	r4,0(r2)
   22a74:	d8802117 	ldw	r2,132(sp)
   22a78:	173ffb36 	bltu	r2,fp,22a68 <__alt_data_end+0xf4022a68>
   22a7c:	1405c83a 	sub	r2,r2,r16
   22a80:	d8803315 	stw	r2,204(sp)
   22a84:	008011c4 	movi	r2,71
   22a88:	b0817626 	beq	r22,r2,23064 <___vfprintf_internal_r+0x1d6c>
   22a8c:	00801944 	movi	r2,101
   22a90:	1442810e 	bge	r2,r17,23498 <___vfprintf_internal_r+0x21a0>
   22a94:	d8c02617 	ldw	r3,152(sp)
   22a98:	00801984 	movi	r2,102
   22a9c:	d8c03215 	stw	r3,200(sp)
   22aa0:	8881fe26 	beq	r17,r2,2329c <___vfprintf_internal_r+0x1fa4>
   22aa4:	d8c03217 	ldw	r3,200(sp)
   22aa8:	d9003317 	ldw	r4,204(sp)
   22aac:	1901dd16 	blt	r3,r4,23224 <___vfprintf_internal_r+0x1f2c>
   22ab0:	9480004c 	andi	r18,r18,1
   22ab4:	90022b1e 	bne	r18,zero,23364 <___vfprintf_internal_r+0x206c>
   22ab8:	1805883a 	mov	r2,r3
   22abc:	18028016 	blt	r3,zero,234c0 <___vfprintf_internal_r+0x21c8>
   22ac0:	d8c03217 	ldw	r3,200(sp)
   22ac4:	044019c4 	movi	r17,103
   22ac8:	d8c02e15 	stw	r3,184(sp)
   22acc:	df002a07 	ldb	fp,168(sp)
   22ad0:	e001531e 	bne	fp,zero,23020 <___vfprintf_internal_r+0x1d28>
   22ad4:	df002783 	ldbu	fp,158(sp)
   22ad8:	d8802a15 	stw	r2,168(sp)
   22adc:	dc802b17 	ldw	r18,172(sp)
   22ae0:	d8002915 	stw	zero,164(sp)
   22ae4:	003bd106 	br	21a2c <__alt_data_end+0xf4021a2c>
   22ae8:	d8802d17 	ldw	r2,180(sp)
   22aec:	d8c02d17 	ldw	r3,180(sp)
   22af0:	d9002d17 	ldw	r4,180(sp)
   22af4:	10800017 	ldw	r2,0(r2)
   22af8:	18c00117 	ldw	r3,4(r3)
   22afc:	21000204 	addi	r4,r4,8
   22b00:	d8803615 	stw	r2,216(sp)
   22b04:	d8c03815 	stw	r3,224(sp)
   22b08:	d9002d15 	stw	r4,180(sp)
   22b0c:	003b7506 	br	218e4 <__alt_data_end+0xf40218e4>
   22b10:	ac400007 	ldb	r17,0(r21)
   22b14:	003a5906 	br	2147c <__alt_data_end+0xf402147c>
   22b18:	9080100c 	andi	r2,r18,64
   22b1c:	1000a826 	beq	r2,zero,22dc0 <___vfprintf_internal_r+0x1ac8>
   22b20:	d9002d17 	ldw	r4,180(sp)
   22b24:	002d883a 	mov	r22,zero
   22b28:	24c0000b 	ldhu	r19,0(r4)
   22b2c:	21000104 	addi	r4,r4,4
   22b30:	d9002d15 	stw	r4,180(sp)
   22b34:	003ccb06 	br	21e64 <__alt_data_end+0xf4021e64>
   22b38:	d8c02d17 	ldw	r3,180(sp)
   22b3c:	d9002917 	ldw	r4,164(sp)
   22b40:	002d883a 	mov	r22,zero
   22b44:	18800104 	addi	r2,r3,4
   22b48:	1cc00017 	ldw	r19,0(r3)
   22b4c:	203ebb0e 	bge	r4,zero,2263c <__alt_data_end+0xf402263c>
   22b50:	003ef106 	br	22718 <__alt_data_end+0xf4022718>
   22b54:	9080040c 	andi	r2,r18,16
   22b58:	1000921e 	bne	r2,zero,22da4 <___vfprintf_internal_r+0x1aac>
   22b5c:	9480100c 	andi	r18,r18,64
   22b60:	90013926 	beq	r18,zero,23048 <___vfprintf_internal_r+0x1d50>
   22b64:	d9002d17 	ldw	r4,180(sp)
   22b68:	d9402f17 	ldw	r5,188(sp)
   22b6c:	20800017 	ldw	r2,0(r4)
   22b70:	21000104 	addi	r4,r4,4
   22b74:	d9002d15 	stw	r4,180(sp)
   22b78:	1140000d 	sth	r5,0(r2)
   22b7c:	003a1606 	br	213d8 <__alt_data_end+0xf40213d8>
   22b80:	9080100c 	andi	r2,r18,64
   22b84:	10008026 	beq	r2,zero,22d88 <___vfprintf_internal_r+0x1a90>
   22b88:	d8c02d17 	ldw	r3,180(sp)
   22b8c:	1cc0000f 	ldh	r19,0(r3)
   22b90:	18c00104 	addi	r3,r3,4
   22b94:	d8c02d15 	stw	r3,180(sp)
   22b98:	982dd7fa 	srai	r22,r19,31
   22b9c:	b005883a 	mov	r2,r22
   22ba0:	003b1f06 	br	21820 <__alt_data_end+0xf4021820>
   22ba4:	9080100c 	andi	r2,r18,64
   22ba8:	d8002785 	stb	zero,158(sp)
   22bac:	10008a1e 	bne	r2,zero,22dd8 <___vfprintf_internal_r+0x1ae0>
   22bb0:	d9402d17 	ldw	r5,180(sp)
   22bb4:	d8c02917 	ldw	r3,164(sp)
   22bb8:	002d883a 	mov	r22,zero
   22bbc:	28800104 	addi	r2,r5,4
   22bc0:	2cc00017 	ldw	r19,0(r5)
   22bc4:	183e4b0e 	bge	r3,zero,224f4 <__alt_data_end+0xf40224f4>
   22bc8:	9d86b03a 	or	r3,r19,r22
   22bcc:	d8802d15 	stw	r2,180(sp)
   22bd0:	183e4c1e 	bne	r3,zero,22504 <__alt_data_end+0xf4022504>
   22bd4:	0039883a 	mov	fp,zero
   22bd8:	0005883a 	mov	r2,zero
   22bdc:	003d4006 	br	220e0 <__alt_data_end+0xf40220e0>
   22be0:	014000f4 	movhi	r5,3
   22be4:	29468184 	addi	r5,r5,6662
   22be8:	d9402b15 	stw	r5,172(sp)
   22bec:	d9402b17 	ldw	r5,172(sp)
   22bf0:	1c47883a 	add	r3,r3,r17
   22bf4:	10800044 	addi	r2,r2,1
   22bf8:	41400015 	stw	r5,0(r8)
   22bfc:	44400115 	stw	r17,4(r8)
   22c00:	d8c02015 	stw	r3,128(sp)
   22c04:	d8801f15 	stw	r2,124(sp)
   22c08:	010001c4 	movi	r4,7
   22c0c:	20bec816 	blt	r4,r2,22730 <__alt_data_end+0xf4022730>
   22c10:	42000204 	addi	r8,r8,8
   22c14:	003ecd06 	br	2274c <__alt_data_end+0xf402274c>
   22c18:	d9002917 	ldw	r4,164(sp)
   22c1c:	d8002785 	stb	zero,158(sp)
   22c20:	203d2d16 	blt	r4,zero,220d8 <__alt_data_end+0xf40220d8>
   22c24:	00bfdfc4 	movi	r2,-129
   22c28:	90a4703a 	and	r18,r18,r2
   22c2c:	003a9106 	br	21674 <__alt_data_end+0xf4021674>
   22c30:	010000f4 	movhi	r4,3
   22c34:	21068184 	addi	r4,r4,6662
   22c38:	d9002b15 	stw	r4,172(sp)
   22c3c:	003c0c06 	br	21c70 <__alt_data_end+0xf4021c70>
   22c40:	d9002c17 	ldw	r4,176(sp)
   22c44:	d9801e04 	addi	r6,sp,120
   22c48:	b80b883a 	mov	r5,r23
   22c4c:	00288f40 	call	288f4 <__sprint_r>
   22c50:	103aab1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22c54:	d8c02017 	ldw	r3,128(sp)
   22c58:	da000404 	addi	r8,sp,16
   22c5c:	003d4106 	br	22164 <__alt_data_end+0xf4022164>
   22c60:	d8801f17 	ldw	r2,124(sp)
   22c64:	014000f4 	movhi	r5,3
   22c68:	01000044 	movi	r4,1
   22c6c:	18c00044 	addi	r3,r3,1
   22c70:	10800044 	addi	r2,r2,1
   22c74:	29468104 	addi	r5,r5,6660
   22c78:	41000115 	stw	r4,4(r8)
   22c7c:	41400015 	stw	r5,0(r8)
   22c80:	d8c02015 	stw	r3,128(sp)
   22c84:	d8801f15 	stw	r2,124(sp)
   22c88:	010001c4 	movi	r4,7
   22c8c:	20805c16 	blt	r4,r2,22e00 <___vfprintf_internal_r+0x1b08>
   22c90:	42000204 	addi	r8,r8,8
   22c94:	8800041e 	bne	r17,zero,22ca8 <___vfprintf_internal_r+0x19b0>
   22c98:	d8803317 	ldw	r2,204(sp)
   22c9c:	1000021e 	bne	r2,zero,22ca8 <___vfprintf_internal_r+0x19b0>
   22ca0:	9080004c 	andi	r2,r18,1
   22ca4:	103c0926 	beq	r2,zero,21ccc <__alt_data_end+0xf4021ccc>
   22ca8:	d9003717 	ldw	r4,220(sp)
   22cac:	d8801f17 	ldw	r2,124(sp)
   22cb0:	d9403417 	ldw	r5,208(sp)
   22cb4:	20c7883a 	add	r3,r4,r3
   22cb8:	10800044 	addi	r2,r2,1
   22cbc:	41000115 	stw	r4,4(r8)
   22cc0:	41400015 	stw	r5,0(r8)
   22cc4:	d8c02015 	stw	r3,128(sp)
   22cc8:	d8801f15 	stw	r2,124(sp)
   22ccc:	010001c4 	movi	r4,7
   22cd0:	20812116 	blt	r4,r2,23158 <___vfprintf_internal_r+0x1e60>
   22cd4:	42000204 	addi	r8,r8,8
   22cd8:	0463c83a 	sub	r17,zero,r17
   22cdc:	0440730e 	bge	zero,r17,22eac <___vfprintf_internal_r+0x1bb4>
   22ce0:	05800404 	movi	r22,16
   22ce4:	b440860e 	bge	r22,r17,22f00 <___vfprintf_internal_r+0x1c08>
   22ce8:	014000f4 	movhi	r5,3
   22cec:	29468184 	addi	r5,r5,6662
   22cf0:	d9402b15 	stw	r5,172(sp)
   22cf4:	070001c4 	movi	fp,7
   22cf8:	dcc02c17 	ldw	r19,176(sp)
   22cfc:	00000306 	br	22d0c <___vfprintf_internal_r+0x1a14>
   22d00:	42000204 	addi	r8,r8,8
   22d04:	8c7ffc04 	addi	r17,r17,-16
   22d08:	b440800e 	bge	r22,r17,22f0c <___vfprintf_internal_r+0x1c14>
   22d0c:	18c00404 	addi	r3,r3,16
   22d10:	10800044 	addi	r2,r2,1
   22d14:	45000015 	stw	r20,0(r8)
   22d18:	45800115 	stw	r22,4(r8)
   22d1c:	d8c02015 	stw	r3,128(sp)
   22d20:	d8801f15 	stw	r2,124(sp)
   22d24:	e0bff60e 	bge	fp,r2,22d00 <__alt_data_end+0xf4022d00>
   22d28:	d9801e04 	addi	r6,sp,120
   22d2c:	b80b883a 	mov	r5,r23
   22d30:	9809883a 	mov	r4,r19
   22d34:	00288f40 	call	288f4 <__sprint_r>
   22d38:	103a711e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22d3c:	d8c02017 	ldw	r3,128(sp)
   22d40:	d8801f17 	ldw	r2,124(sp)
   22d44:	da000404 	addi	r8,sp,16
   22d48:	003fee06 	br	22d04 <__alt_data_end+0xf4022d04>
   22d4c:	00bfffc4 	movi	r2,-1
   22d50:	003a6f06 	br	21710 <__alt_data_end+0xf4021710>
   22d54:	008011c4 	movi	r2,71
   22d58:	1440b816 	blt	r2,r17,2303c <___vfprintf_internal_r+0x1d44>
   22d5c:	040000f4 	movhi	r16,3
   22d60:	84067304 	addi	r16,r16,6604
   22d64:	00c000c4 	movi	r3,3
   22d68:	00bfdfc4 	movi	r2,-129
   22d6c:	d8c02a15 	stw	r3,168(sp)
   22d70:	90a4703a 	and	r18,r18,r2
   22d74:	df002783 	ldbu	fp,158(sp)
   22d78:	d8c02e15 	stw	r3,184(sp)
   22d7c:	d8002915 	stw	zero,164(sp)
   22d80:	d8003215 	stw	zero,200(sp)
   22d84:	003b2906 	br	21a2c <__alt_data_end+0xf4021a2c>
   22d88:	d9002d17 	ldw	r4,180(sp)
   22d8c:	24c00017 	ldw	r19,0(r4)
   22d90:	21000104 	addi	r4,r4,4
   22d94:	d9002d15 	stw	r4,180(sp)
   22d98:	982dd7fa 	srai	r22,r19,31
   22d9c:	b005883a 	mov	r2,r22
   22da0:	003a9f06 	br	21820 <__alt_data_end+0xf4021820>
   22da4:	d9402d17 	ldw	r5,180(sp)
   22da8:	d8c02f17 	ldw	r3,188(sp)
   22dac:	28800017 	ldw	r2,0(r5)
   22db0:	29400104 	addi	r5,r5,4
   22db4:	d9402d15 	stw	r5,180(sp)
   22db8:	10c00015 	stw	r3,0(r2)
   22dbc:	00398606 	br	213d8 <__alt_data_end+0xf40213d8>
   22dc0:	d9402d17 	ldw	r5,180(sp)
   22dc4:	002d883a 	mov	r22,zero
   22dc8:	2cc00017 	ldw	r19,0(r5)
   22dcc:	29400104 	addi	r5,r5,4
   22dd0:	d9402d15 	stw	r5,180(sp)
   22dd4:	003c2306 	br	21e64 <__alt_data_end+0xf4021e64>
   22dd8:	d8c02d17 	ldw	r3,180(sp)
   22ddc:	d9002917 	ldw	r4,164(sp)
   22de0:	002d883a 	mov	r22,zero
   22de4:	18800104 	addi	r2,r3,4
   22de8:	1cc0000b 	ldhu	r19,0(r3)
   22dec:	203dc10e 	bge	r4,zero,224f4 <__alt_data_end+0xf40224f4>
   22df0:	003f7506 	br	22bc8 <__alt_data_end+0xf4022bc8>
   22df4:	040000f4 	movhi	r16,3
   22df8:	84067104 	addi	r16,r16,6596
   22dfc:	003acc06 	br	21930 <__alt_data_end+0xf4021930>
   22e00:	d9002c17 	ldw	r4,176(sp)
   22e04:	d9801e04 	addi	r6,sp,120
   22e08:	b80b883a 	mov	r5,r23
   22e0c:	00288f40 	call	288f4 <__sprint_r>
   22e10:	103a3b1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22e14:	dc402617 	ldw	r17,152(sp)
   22e18:	d8c02017 	ldw	r3,128(sp)
   22e1c:	da000404 	addi	r8,sp,16
   22e20:	003f9c06 	br	22c94 <__alt_data_end+0xf4022c94>
   22e24:	ac400043 	ldbu	r17,1(r21)
   22e28:	94800814 	ori	r18,r18,32
   22e2c:	ad400044 	addi	r21,r21,1
   22e30:	8c403fcc 	andi	r17,r17,255
   22e34:	8c40201c 	xori	r17,r17,128
   22e38:	8c7fe004 	addi	r17,r17,-128
   22e3c:	00398f06 	br	2147c <__alt_data_end+0xf402147c>
   22e40:	d8c02d15 	stw	r3,180(sp)
   22e44:	0039883a 	mov	fp,zero
   22e48:	003e3506 	br	22720 <__alt_data_end+0xf4022720>
   22e4c:	d9002c17 	ldw	r4,176(sp)
   22e50:	d9801e04 	addi	r6,sp,120
   22e54:	b80b883a 	mov	r5,r23
   22e58:	00288f40 	call	288f4 <__sprint_r>
   22e5c:	103a281e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22e60:	d8c02017 	ldw	r3,128(sp)
   22e64:	da000404 	addi	r8,sp,16
   22e68:	003cd006 	br	221ac <__alt_data_end+0xf40221ac>
   22e6c:	8009883a 	mov	r4,r16
   22e70:	da003d15 	stw	r8,244(sp)
   22e74:	00212600 	call	21260 <strlen>
   22e78:	d8802e15 	stw	r2,184(sp)
   22e7c:	da003d17 	ldw	r8,244(sp)
   22e80:	103c340e 	bge	r2,zero,21f54 <__alt_data_end+0xf4021f54>
   22e84:	0005883a 	mov	r2,zero
   22e88:	003c3206 	br	21f54 <__alt_data_end+0xf4021f54>
   22e8c:	d9002c17 	ldw	r4,176(sp)
   22e90:	d9801e04 	addi	r6,sp,120
   22e94:	b80b883a 	mov	r5,r23
   22e98:	00288f40 	call	288f4 <__sprint_r>
   22e9c:	103a181e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22ea0:	d8c02017 	ldw	r3,128(sp)
   22ea4:	d8801f17 	ldw	r2,124(sp)
   22ea8:	da000404 	addi	r8,sp,16
   22eac:	d9403317 	ldw	r5,204(sp)
   22eb0:	10800044 	addi	r2,r2,1
   22eb4:	44000015 	stw	r16,0(r8)
   22eb8:	28c7883a 	add	r3,r5,r3
   22ebc:	003b7d06 	br	21cb4 <__alt_data_end+0xf4021cb4>
   22ec0:	010000f4 	movhi	r4,3
   22ec4:	21068584 	addi	r4,r4,6678
   22ec8:	d9003515 	stw	r4,212(sp)
   22ecc:	003b1406 	br	21b20 <__alt_data_end+0xf4021b20>
   22ed0:	013fffc4 	movi	r4,-1
   22ed4:	003a3506 	br	217ac <__alt_data_end+0xf40217ac>
   22ed8:	0023883a 	mov	r17,zero
   22edc:	003d9d06 	br	22554 <__alt_data_end+0xf4022554>
   22ee0:	d9002c17 	ldw	r4,176(sp)
   22ee4:	d9801e04 	addi	r6,sp,120
   22ee8:	b80b883a 	mov	r5,r23
   22eec:	00288f40 	call	288f4 <__sprint_r>
   22ef0:	103a031e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22ef4:	d8c02017 	ldw	r3,128(sp)
   22ef8:	da000404 	addi	r8,sp,16
   22efc:	003d9406 	br	22550 <__alt_data_end+0xf4022550>
   22f00:	010000f4 	movhi	r4,3
   22f04:	21068184 	addi	r4,r4,6662
   22f08:	d9002b15 	stw	r4,172(sp)
   22f0c:	d9002b17 	ldw	r4,172(sp)
   22f10:	1c47883a 	add	r3,r3,r17
   22f14:	10800044 	addi	r2,r2,1
   22f18:	41000015 	stw	r4,0(r8)
   22f1c:	44400115 	stw	r17,4(r8)
   22f20:	d8c02015 	stw	r3,128(sp)
   22f24:	d8801f15 	stw	r2,124(sp)
   22f28:	010001c4 	movi	r4,7
   22f2c:	20bfd716 	blt	r4,r2,22e8c <__alt_data_end+0xf4022e8c>
   22f30:	42000204 	addi	r8,r8,8
   22f34:	003fdd06 	br	22eac <__alt_data_end+0xf4022eac>
   22f38:	d9002c17 	ldw	r4,176(sp)
   22f3c:	d9801e04 	addi	r6,sp,120
   22f40:	b80b883a 	mov	r5,r23
   22f44:	00288f40 	call	288f4 <__sprint_r>
   22f48:	1039ed1e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22f4c:	d8802617 	ldw	r2,152(sp)
   22f50:	d8c02017 	ldw	r3,128(sp)
   22f54:	da000404 	addi	r8,sp,16
   22f58:	003e1006 	br	2279c <__alt_data_end+0xf402279c>
   22f5c:	00800044 	movi	r2,1
   22f60:	10803fcc 	andi	r2,r2,255
   22f64:	00c00044 	movi	r3,1
   22f68:	10fa3526 	beq	r2,r3,21840 <__alt_data_end+0xf4021840>
   22f6c:	00c00084 	movi	r3,2
   22f70:	10fbcb26 	beq	r2,r3,21ea0 <__alt_data_end+0xf4021ea0>
   22f74:	003a8f06 	br	219b4 <__alt_data_end+0xf40219b4>
   22f78:	010000f4 	movhi	r4,3
   22f7c:	21068584 	addi	r4,r4,6678
   22f80:	d9003515 	stw	r4,212(sp)
   22f84:	003b7606 	br	21d60 <__alt_data_end+0xf4021d60>
   22f88:	d8802917 	ldw	r2,164(sp)
   22f8c:	00c00184 	movi	r3,6
   22f90:	1880012e 	bgeu	r3,r2,22f98 <___vfprintf_internal_r+0x1ca0>
   22f94:	1805883a 	mov	r2,r3
   22f98:	d8802e15 	stw	r2,184(sp)
   22f9c:	1000ef16 	blt	r2,zero,2335c <___vfprintf_internal_r+0x2064>
   22fa0:	040000f4 	movhi	r16,3
   22fa4:	d8802a15 	stw	r2,168(sp)
   22fa8:	dcc02d15 	stw	r19,180(sp)
   22fac:	d8002915 	stw	zero,164(sp)
   22fb0:	d8003215 	stw	zero,200(sp)
   22fb4:	84067f04 	addi	r16,r16,6652
   22fb8:	0039883a 	mov	fp,zero
   22fbc:	003aa206 	br	21a48 <__alt_data_end+0xf4021a48>
   22fc0:	0021883a 	mov	r16,zero
   22fc4:	003e0706 	br	227e4 <__alt_data_end+0xf40227e4>
   22fc8:	d9002c17 	ldw	r4,176(sp)
   22fcc:	d9801e04 	addi	r6,sp,120
   22fd0:	b80b883a 	mov	r5,r23
   22fd4:	00288f40 	call	288f4 <__sprint_r>
   22fd8:	1039c91e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   22fdc:	d8802617 	ldw	r2,152(sp)
   22fe0:	d9403317 	ldw	r5,204(sp)
   22fe4:	d8c02017 	ldw	r3,128(sp)
   22fe8:	da000404 	addi	r8,sp,16
   22fec:	2885c83a 	sub	r2,r5,r2
   22ff0:	003dfb06 	br	227e0 <__alt_data_end+0xf40227e0>
   22ff4:	9080004c 	andi	r2,r18,1
   22ff8:	103e8f1e 	bne	r2,zero,22a38 <__alt_data_end+0xf4022a38>
   22ffc:	d8802117 	ldw	r2,132(sp)
   23000:	003e9e06 	br	22a7c <__alt_data_end+0xf4022a7c>
   23004:	1025883a 	mov	r18,r2
   23008:	0039883a 	mov	fp,zero
   2300c:	00800084 	movi	r2,2
   23010:	003fd306 	br	22f60 <__alt_data_end+0xf4022f60>
   23014:	07000b44 	movi	fp,45
   23018:	df002785 	stb	fp,158(sp)
   2301c:	003a4006 	br	21920 <__alt_data_end+0xf4021920>
   23020:	00c00b44 	movi	r3,45
   23024:	d8c02785 	stb	r3,158(sp)
   23028:	d8802a15 	stw	r2,168(sp)
   2302c:	dc802b17 	ldw	r18,172(sp)
   23030:	d8002915 	stw	zero,164(sp)
   23034:	07000b44 	movi	fp,45
   23038:	003a8006 	br	21a3c <__alt_data_end+0xf4021a3c>
   2303c:	040000f4 	movhi	r16,3
   23040:	84067404 	addi	r16,r16,6608
   23044:	003f4706 	br	22d64 <__alt_data_end+0xf4022d64>
   23048:	d8c02d17 	ldw	r3,180(sp)
   2304c:	d9002f17 	ldw	r4,188(sp)
   23050:	18800017 	ldw	r2,0(r3)
   23054:	18c00104 	addi	r3,r3,4
   23058:	d8c02d15 	stw	r3,180(sp)
   2305c:	11000015 	stw	r4,0(r2)
   23060:	0038dd06 	br	213d8 <__alt_data_end+0xf40213d8>
   23064:	dd802617 	ldw	r22,152(sp)
   23068:	00bfff44 	movi	r2,-3
   2306c:	b0801c16 	blt	r22,r2,230e0 <___vfprintf_internal_r+0x1de8>
   23070:	d9402917 	ldw	r5,164(sp)
   23074:	2d801a16 	blt	r5,r22,230e0 <___vfprintf_internal_r+0x1de8>
   23078:	dd803215 	stw	r22,200(sp)
   2307c:	003e8906 	br	22aa4 <__alt_data_end+0xf4022aa4>
   23080:	010000f4 	movhi	r4,3
   23084:	21068184 	addi	r4,r4,6662
   23088:	d9002b15 	stw	r4,172(sp)
   2308c:	003c9106 	br	222d4 <__alt_data_end+0xf40222d4>
   23090:	e005883a 	mov	r2,fp
   23094:	003e7906 	br	22a7c <__alt_data_end+0xf4022a7c>
   23098:	d9402917 	ldw	r5,164(sp)
   2309c:	df002783 	ldbu	fp,158(sp)
   230a0:	dcc02d15 	stw	r19,180(sp)
   230a4:	d9402a15 	stw	r5,168(sp)
   230a8:	d9402e15 	stw	r5,184(sp)
   230ac:	d8002915 	stw	zero,164(sp)
   230b0:	d8003215 	stw	zero,200(sp)
   230b4:	003a5d06 	br	21a2c <__alt_data_end+0xf4021a2c>
   230b8:	9080004c 	andi	r2,r18,1
   230bc:	0039883a 	mov	fp,zero
   230c0:	10000426 	beq	r2,zero,230d4 <___vfprintf_internal_r+0x1ddc>
   230c4:	00800c04 	movi	r2,48
   230c8:	dc001dc4 	addi	r16,sp,119
   230cc:	d8801dc5 	stb	r2,119(sp)
   230d0:	003b8006 	br	21ed4 <__alt_data_end+0xf4021ed4>
   230d4:	d8002e15 	stw	zero,184(sp)
   230d8:	dc001e04 	addi	r16,sp,120
   230dc:	003a4d06 	br	21a14 <__alt_data_end+0xf4021a14>
   230e0:	8c7fff84 	addi	r17,r17,-2
   230e4:	b5bfffc4 	addi	r22,r22,-1
   230e8:	dd802615 	stw	r22,152(sp)
   230ec:	dc4022c5 	stb	r17,139(sp)
   230f0:	b000bf16 	blt	r22,zero,233f0 <___vfprintf_internal_r+0x20f8>
   230f4:	00800ac4 	movi	r2,43
   230f8:	d8802305 	stb	r2,140(sp)
   230fc:	00800244 	movi	r2,9
   23100:	15807016 	blt	r2,r22,232c4 <___vfprintf_internal_r+0x1fcc>
   23104:	00800c04 	movi	r2,48
   23108:	b5800c04 	addi	r22,r22,48
   2310c:	d8802345 	stb	r2,141(sp)
   23110:	dd802385 	stb	r22,142(sp)
   23114:	d88023c4 	addi	r2,sp,143
   23118:	df0022c4 	addi	fp,sp,139
   2311c:	d8c03317 	ldw	r3,204(sp)
   23120:	1739c83a 	sub	fp,r2,fp
   23124:	d9003317 	ldw	r4,204(sp)
   23128:	e0c7883a 	add	r3,fp,r3
   2312c:	df003a15 	stw	fp,232(sp)
   23130:	d8c02e15 	stw	r3,184(sp)
   23134:	00800044 	movi	r2,1
   23138:	1100b30e 	bge	r2,r4,23408 <___vfprintf_internal_r+0x2110>
   2313c:	d8c02e17 	ldw	r3,184(sp)
   23140:	18c00044 	addi	r3,r3,1
   23144:	d8c02e15 	stw	r3,184(sp)
   23148:	1805883a 	mov	r2,r3
   2314c:	1800ac16 	blt	r3,zero,23400 <___vfprintf_internal_r+0x2108>
   23150:	d8003215 	stw	zero,200(sp)
   23154:	003e5d06 	br	22acc <__alt_data_end+0xf4022acc>
   23158:	d9002c17 	ldw	r4,176(sp)
   2315c:	d9801e04 	addi	r6,sp,120
   23160:	b80b883a 	mov	r5,r23
   23164:	00288f40 	call	288f4 <__sprint_r>
   23168:	1039651e 	bne	r2,zero,21700 <__alt_data_end+0xf4021700>
   2316c:	dc402617 	ldw	r17,152(sp)
   23170:	d8c02017 	ldw	r3,128(sp)
   23174:	d8801f17 	ldw	r2,124(sp)
   23178:	da000404 	addi	r8,sp,16
   2317c:	003ed606 	br	22cd8 <__alt_data_end+0xf4022cd8>
   23180:	582b883a 	mov	r21,r11
   23184:	d8002915 	stw	zero,164(sp)
   23188:	0038bd06 	br	21480 <__alt_data_end+0xf4021480>
   2318c:	d8802917 	ldw	r2,164(sp)
   23190:	103e071e 	bne	r2,zero,229b0 <__alt_data_end+0xf40229b0>
   23194:	dc002915 	stw	r16,164(sp)
   23198:	003e0506 	br	229b0 <__alt_data_end+0xf40229b0>
   2319c:	d9002917 	ldw	r4,164(sp)
   231a0:	20c00044 	addi	r3,r4,1
   231a4:	003e0f06 	br	229e4 <__alt_data_end+0xf40229e4>
   231a8:	01400184 	movi	r5,6
   231ac:	d9402915 	stw	r5,164(sp)
   231b0:	003dff06 	br	229b0 <__alt_data_end+0xf40229b0>
   231b4:	d8802104 	addi	r2,sp,132
   231b8:	d8800315 	stw	r2,12(sp)
   231bc:	d8802504 	addi	r2,sp,148
   231c0:	d8800215 	stw	r2,8(sp)
   231c4:	d8802604 	addi	r2,sp,152
   231c8:	d8800115 	stw	r2,4(sp)
   231cc:	d8802917 	ldw	r2,164(sp)
   231d0:	d9403617 	ldw	r5,216(sp)
   231d4:	d9002c17 	ldw	r4,176(sp)
   231d8:	d8800015 	stw	r2,0(sp)
   231dc:	01c000c4 	movi	r7,3
   231e0:	980d883a 	mov	r6,r19
   231e4:	da003d15 	stw	r8,244(sp)
   231e8:	002391c0 	call	2391c <_dtoa_r>
   231ec:	d8c02917 	ldw	r3,164(sp)
   231f0:	da003d17 	ldw	r8,244(sp)
   231f4:	1021883a 	mov	r16,r2
   231f8:	10f9883a 	add	fp,r2,r3
   231fc:	81000007 	ldb	r4,0(r16)
   23200:	00800c04 	movi	r2,48
   23204:	20805e26 	beq	r4,r2,23380 <___vfprintf_internal_r+0x2088>
   23208:	d8c02617 	ldw	r3,152(sp)
   2320c:	e0f9883a 	add	fp,fp,r3
   23210:	003e0a06 	br	22a3c <__alt_data_end+0xf4022a3c>
   23214:	00c00b44 	movi	r3,45
   23218:	24e0003c 	xorhi	r19,r4,32768
   2321c:	d8c02a05 	stb	r3,168(sp)
   23220:	003de906 	br	229c8 <__alt_data_end+0xf40229c8>
   23224:	d8c03217 	ldw	r3,200(sp)
   23228:	00c07a0e 	bge	zero,r3,23414 <___vfprintf_internal_r+0x211c>
   2322c:	00800044 	movi	r2,1
   23230:	d9003317 	ldw	r4,204(sp)
   23234:	1105883a 	add	r2,r2,r4
   23238:	d8802e15 	stw	r2,184(sp)
   2323c:	10004e16 	blt	r2,zero,23378 <___vfprintf_internal_r+0x2080>
   23240:	044019c4 	movi	r17,103
   23244:	003e2106 	br	22acc <__alt_data_end+0xf4022acc>
   23248:	d9002917 	ldw	r4,164(sp)
   2324c:	d8802104 	addi	r2,sp,132
   23250:	d8800315 	stw	r2,12(sp)
   23254:	d9000015 	stw	r4,0(sp)
   23258:	d8802504 	addi	r2,sp,148
   2325c:	d9403617 	ldw	r5,216(sp)
   23260:	d9002c17 	ldw	r4,176(sp)
   23264:	d8800215 	stw	r2,8(sp)
   23268:	d8802604 	addi	r2,sp,152
   2326c:	d8800115 	stw	r2,4(sp)
   23270:	01c000c4 	movi	r7,3
   23274:	980d883a 	mov	r6,r19
   23278:	da003d15 	stw	r8,244(sp)
   2327c:	002391c0 	call	2391c <_dtoa_r>
   23280:	d8c02917 	ldw	r3,164(sp)
   23284:	da003d17 	ldw	r8,244(sp)
   23288:	1021883a 	mov	r16,r2
   2328c:	00801184 	movi	r2,70
   23290:	80f9883a 	add	fp,r16,r3
   23294:	88bfd926 	beq	r17,r2,231fc <__alt_data_end+0xf40231fc>
   23298:	003de806 	br	22a3c <__alt_data_end+0xf4022a3c>
   2329c:	d9002917 	ldw	r4,164(sp)
   232a0:	00c04d0e 	bge	zero,r3,233d8 <___vfprintf_internal_r+0x20e0>
   232a4:	2000441e 	bne	r4,zero,233b8 <___vfprintf_internal_r+0x20c0>
   232a8:	9480004c 	andi	r18,r18,1
   232ac:	9000421e 	bne	r18,zero,233b8 <___vfprintf_internal_r+0x20c0>
   232b0:	1805883a 	mov	r2,r3
   232b4:	18007016 	blt	r3,zero,23478 <___vfprintf_internal_r+0x2180>
   232b8:	d8c03217 	ldw	r3,200(sp)
   232bc:	d8c02e15 	stw	r3,184(sp)
   232c0:	003e0206 	br	22acc <__alt_data_end+0xf4022acc>
   232c4:	df0022c4 	addi	fp,sp,139
   232c8:	dc002915 	stw	r16,164(sp)
   232cc:	4027883a 	mov	r19,r8
   232d0:	e021883a 	mov	r16,fp
   232d4:	b009883a 	mov	r4,r22
   232d8:	01400284 	movi	r5,10
   232dc:	002b2a80 	call	2b2a8 <__modsi3>
   232e0:	10800c04 	addi	r2,r2,48
   232e4:	843fffc4 	addi	r16,r16,-1
   232e8:	b009883a 	mov	r4,r22
   232ec:	01400284 	movi	r5,10
   232f0:	80800005 	stb	r2,0(r16)
   232f4:	002b2240 	call	2b224 <__divsi3>
   232f8:	102d883a 	mov	r22,r2
   232fc:	00800244 	movi	r2,9
   23300:	15bff416 	blt	r2,r22,232d4 <__alt_data_end+0xf40232d4>
   23304:	9811883a 	mov	r8,r19
   23308:	b0800c04 	addi	r2,r22,48
   2330c:	8027883a 	mov	r19,r16
   23310:	997fffc4 	addi	r5,r19,-1
   23314:	98bfffc5 	stb	r2,-1(r19)
   23318:	dc002917 	ldw	r16,164(sp)
   2331c:	2f006a2e 	bgeu	r5,fp,234c8 <___vfprintf_internal_r+0x21d0>
   23320:	d9c02384 	addi	r7,sp,142
   23324:	3ccfc83a 	sub	r7,r7,r19
   23328:	d9002344 	addi	r4,sp,141
   2332c:	e1cf883a 	add	r7,fp,r7
   23330:	00000106 	br	23338 <___vfprintf_internal_r+0x2040>
   23334:	28800003 	ldbu	r2,0(r5)
   23338:	20800005 	stb	r2,0(r4)
   2333c:	21000044 	addi	r4,r4,1
   23340:	29400044 	addi	r5,r5,1
   23344:	393ffb1e 	bne	r7,r4,23334 <__alt_data_end+0xf4023334>
   23348:	d8802304 	addi	r2,sp,140
   2334c:	14c5c83a 	sub	r2,r2,r19
   23350:	d8c02344 	addi	r3,sp,141
   23354:	1885883a 	add	r2,r3,r2
   23358:	003f7006 	br	2311c <__alt_data_end+0xf402311c>
   2335c:	0005883a 	mov	r2,zero
   23360:	003f0f06 	br	22fa0 <__alt_data_end+0xf4022fa0>
   23364:	d8c03217 	ldw	r3,200(sp)
   23368:	18c00044 	addi	r3,r3,1
   2336c:	d8c02e15 	stw	r3,184(sp)
   23370:	1805883a 	mov	r2,r3
   23374:	183fb20e 	bge	r3,zero,23240 <__alt_data_end+0xf4023240>
   23378:	0005883a 	mov	r2,zero
   2337c:	003fb006 	br	23240 <__alt_data_end+0xf4023240>
   23380:	d9003617 	ldw	r4,216(sp)
   23384:	000d883a 	mov	r6,zero
   23388:	000f883a 	mov	r7,zero
   2338c:	980b883a 	mov	r5,r19
   23390:	d8c03c15 	stw	r3,240(sp)
   23394:	da003d15 	stw	r8,244(sp)
   23398:	002c56c0 	call	2c56c <__eqdf2>
   2339c:	d8c03c17 	ldw	r3,240(sp)
   233a0:	da003d17 	ldw	r8,244(sp)
   233a4:	103f9826 	beq	r2,zero,23208 <__alt_data_end+0xf4023208>
   233a8:	00800044 	movi	r2,1
   233ac:	10c7c83a 	sub	r3,r2,r3
   233b0:	d8c02615 	stw	r3,152(sp)
   233b4:	003f9506 	br	2320c <__alt_data_end+0xf402320c>
   233b8:	d9002917 	ldw	r4,164(sp)
   233bc:	d8c03217 	ldw	r3,200(sp)
   233c0:	20800044 	addi	r2,r4,1
   233c4:	1885883a 	add	r2,r3,r2
   233c8:	d8802e15 	stw	r2,184(sp)
   233cc:	103dbf0e 	bge	r2,zero,22acc <__alt_data_end+0xf4022acc>
   233d0:	0005883a 	mov	r2,zero
   233d4:	003dbd06 	br	22acc <__alt_data_end+0xf4022acc>
   233d8:	2000211e 	bne	r4,zero,23460 <___vfprintf_internal_r+0x2168>
   233dc:	9480004c 	andi	r18,r18,1
   233e0:	90001f1e 	bne	r18,zero,23460 <___vfprintf_internal_r+0x2168>
   233e4:	00800044 	movi	r2,1
   233e8:	d8802e15 	stw	r2,184(sp)
   233ec:	003db706 	br	22acc <__alt_data_end+0xf4022acc>
   233f0:	00800b44 	movi	r2,45
   233f4:	05adc83a 	sub	r22,zero,r22
   233f8:	d8802305 	stb	r2,140(sp)
   233fc:	003f3f06 	br	230fc <__alt_data_end+0xf40230fc>
   23400:	0005883a 	mov	r2,zero
   23404:	003f5206 	br	23150 <__alt_data_end+0xf4023150>
   23408:	90a4703a 	and	r18,r18,r2
   2340c:	903f4e26 	beq	r18,zero,23148 <__alt_data_end+0xf4023148>
   23410:	003f4a06 	br	2313c <__alt_data_end+0xf402313c>
   23414:	00800084 	movi	r2,2
   23418:	10c5c83a 	sub	r2,r2,r3
   2341c:	003f8406 	br	23230 <__alt_data_end+0xf4023230>
   23420:	d8802d17 	ldw	r2,180(sp)
   23424:	d9002d17 	ldw	r4,180(sp)
   23428:	ac400043 	ldbu	r17,1(r21)
   2342c:	10800017 	ldw	r2,0(r2)
   23430:	582b883a 	mov	r21,r11
   23434:	d8802915 	stw	r2,164(sp)
   23438:	20800104 	addi	r2,r4,4
   2343c:	d9002917 	ldw	r4,164(sp)
   23440:	d8802d15 	stw	r2,180(sp)
   23444:	203e7a0e 	bge	r4,zero,22e30 <__alt_data_end+0xf4022e30>
   23448:	8c403fcc 	andi	r17,r17,255
   2344c:	00bfffc4 	movi	r2,-1
   23450:	8c40201c 	xori	r17,r17,128
   23454:	d8802915 	stw	r2,164(sp)
   23458:	8c7fe004 	addi	r17,r17,-128
   2345c:	00380706 	br	2147c <__alt_data_end+0xf402147c>
   23460:	d8c02917 	ldw	r3,164(sp)
   23464:	18c00084 	addi	r3,r3,2
   23468:	d8c02e15 	stw	r3,184(sp)
   2346c:	1805883a 	mov	r2,r3
   23470:	183d960e 	bge	r3,zero,22acc <__alt_data_end+0xf4022acc>
   23474:	003fd606 	br	233d0 <__alt_data_end+0xf40233d0>
   23478:	0005883a 	mov	r2,zero
   2347c:	003f8e06 	br	232b8 <__alt_data_end+0xf40232b8>
   23480:	9080004c 	andi	r2,r18,1
   23484:	103f811e 	bne	r2,zero,2328c <__alt_data_end+0xf402328c>
   23488:	d8802117 	ldw	r2,132(sp)
   2348c:	1405c83a 	sub	r2,r2,r16
   23490:	d8803315 	stw	r2,204(sp)
   23494:	b47ef326 	beq	r22,r17,23064 <__alt_data_end+0xf4023064>
   23498:	dd802617 	ldw	r22,152(sp)
   2349c:	003f1106 	br	230e4 <__alt_data_end+0xf40230e4>
   234a0:	d9c02785 	stb	r7,158(sp)
   234a4:	00390406 	br	218b8 <__alt_data_end+0xf40218b8>
   234a8:	d9c02785 	stb	r7,158(sp)
   234ac:	0038d306 	br	217fc <__alt_data_end+0xf40217fc>
   234b0:	d9c02785 	stb	r7,158(sp)
   234b4:	003a6106 	br	21e3c <__alt_data_end+0xf4021e3c>
   234b8:	d9c02785 	stb	r7,158(sp)
   234bc:	003af806 	br	220a0 <__alt_data_end+0xf40220a0>
   234c0:	0005883a 	mov	r2,zero
   234c4:	003d7e06 	br	22ac0 <__alt_data_end+0xf4022ac0>
   234c8:	d8802344 	addi	r2,sp,141
   234cc:	003f1306 	br	2311c <__alt_data_end+0xf402311c>
   234d0:	d9c02785 	stb	r7,158(sp)
   234d4:	00392306 	br	21964 <__alt_data_end+0xf4021964>
   234d8:	d9c02785 	stb	r7,158(sp)
   234dc:	003aa906 	br	21f84 <__alt_data_end+0xf4021f84>
   234e0:	d9c02785 	stb	r7,158(sp)
   234e4:	003a3d06 	br	21ddc <__alt_data_end+0xf4021ddc>
   234e8:	d9c02785 	stb	r7,158(sp)
   234ec:	003aca06 	br	22018 <__alt_data_end+0xf4022018>

000234f0 <__vfprintf_internal>:
   234f0:	008000f4 	movhi	r2,3
   234f4:	108e0b04 	addi	r2,r2,14380
   234f8:	300f883a 	mov	r7,r6
   234fc:	280d883a 	mov	r6,r5
   23500:	200b883a 	mov	r5,r4
   23504:	11000017 	ldw	r4,0(r2)
   23508:	00212f81 	jmpi	212f8 <___vfprintf_internal_r>

0002350c <__sbprintf>:
   2350c:	2880030b 	ldhu	r2,12(r5)
   23510:	2ac01917 	ldw	r11,100(r5)
   23514:	2a80038b 	ldhu	r10,14(r5)
   23518:	2a400717 	ldw	r9,28(r5)
   2351c:	2a000917 	ldw	r8,36(r5)
   23520:	defee204 	addi	sp,sp,-1144
   23524:	00c10004 	movi	r3,1024
   23528:	dc011a15 	stw	r16,1128(sp)
   2352c:	10bfff4c 	andi	r2,r2,65533
   23530:	2821883a 	mov	r16,r5
   23534:	d8cb883a 	add	r5,sp,r3
   23538:	dc811c15 	stw	r18,1136(sp)
   2353c:	dc411b15 	stw	r17,1132(sp)
   23540:	dfc11d15 	stw	ra,1140(sp)
   23544:	2025883a 	mov	r18,r4
   23548:	d881030d 	sth	r2,1036(sp)
   2354c:	dac11915 	stw	r11,1124(sp)
   23550:	da81038d 	sth	r10,1038(sp)
   23554:	da410715 	stw	r9,1052(sp)
   23558:	da010915 	stw	r8,1060(sp)
   2355c:	dec10015 	stw	sp,1024(sp)
   23560:	dec10415 	stw	sp,1040(sp)
   23564:	d8c10215 	stw	r3,1032(sp)
   23568:	d8c10515 	stw	r3,1044(sp)
   2356c:	d8010615 	stw	zero,1048(sp)
   23570:	00212f80 	call	212f8 <___vfprintf_internal_r>
   23574:	1023883a 	mov	r17,r2
   23578:	10000416 	blt	r2,zero,2358c <__sbprintf+0x80>
   2357c:	d9410004 	addi	r5,sp,1024
   23580:	9009883a 	mov	r4,r18
   23584:	00251c00 	call	251c0 <_fflush_r>
   23588:	10000d1e 	bne	r2,zero,235c0 <__sbprintf+0xb4>
   2358c:	d881030b 	ldhu	r2,1036(sp)
   23590:	1080100c 	andi	r2,r2,64
   23594:	10000326 	beq	r2,zero,235a4 <__sbprintf+0x98>
   23598:	8080030b 	ldhu	r2,12(r16)
   2359c:	10801014 	ori	r2,r2,64
   235a0:	8080030d 	sth	r2,12(r16)
   235a4:	8805883a 	mov	r2,r17
   235a8:	dfc11d17 	ldw	ra,1140(sp)
   235ac:	dc811c17 	ldw	r18,1136(sp)
   235b0:	dc411b17 	ldw	r17,1132(sp)
   235b4:	dc011a17 	ldw	r16,1128(sp)
   235b8:	dec11e04 	addi	sp,sp,1144
   235bc:	f800283a 	ret
   235c0:	047fffc4 	movi	r17,-1
   235c4:	003ff106 	br	2358c <__alt_data_end+0xf402358c>

000235c8 <__swsetup_r>:
   235c8:	008000f4 	movhi	r2,3
   235cc:	defffd04 	addi	sp,sp,-12
   235d0:	108e0b04 	addi	r2,r2,14380
   235d4:	dc400115 	stw	r17,4(sp)
   235d8:	2023883a 	mov	r17,r4
   235dc:	11000017 	ldw	r4,0(r2)
   235e0:	dc000015 	stw	r16,0(sp)
   235e4:	dfc00215 	stw	ra,8(sp)
   235e8:	2821883a 	mov	r16,r5
   235ec:	20000226 	beq	r4,zero,235f8 <__swsetup_r+0x30>
   235f0:	20800e17 	ldw	r2,56(r4)
   235f4:	10003126 	beq	r2,zero,236bc <__swsetup_r+0xf4>
   235f8:	8080030b 	ldhu	r2,12(r16)
   235fc:	10c0020c 	andi	r3,r2,8
   23600:	1009883a 	mov	r4,r2
   23604:	18000f26 	beq	r3,zero,23644 <__swsetup_r+0x7c>
   23608:	80c00417 	ldw	r3,16(r16)
   2360c:	18001526 	beq	r3,zero,23664 <__swsetup_r+0x9c>
   23610:	1100004c 	andi	r4,r2,1
   23614:	20001c1e 	bne	r4,zero,23688 <__swsetup_r+0xc0>
   23618:	1080008c 	andi	r2,r2,2
   2361c:	1000291e 	bne	r2,zero,236c4 <__swsetup_r+0xfc>
   23620:	80800517 	ldw	r2,20(r16)
   23624:	80800215 	stw	r2,8(r16)
   23628:	18001c26 	beq	r3,zero,2369c <__swsetup_r+0xd4>
   2362c:	0005883a 	mov	r2,zero
   23630:	dfc00217 	ldw	ra,8(sp)
   23634:	dc400117 	ldw	r17,4(sp)
   23638:	dc000017 	ldw	r16,0(sp)
   2363c:	dec00304 	addi	sp,sp,12
   23640:	f800283a 	ret
   23644:	2080040c 	andi	r2,r4,16
   23648:	10002e26 	beq	r2,zero,23704 <__swsetup_r+0x13c>
   2364c:	2080010c 	andi	r2,r4,4
   23650:	10001e1e 	bne	r2,zero,236cc <__swsetup_r+0x104>
   23654:	80c00417 	ldw	r3,16(r16)
   23658:	20800214 	ori	r2,r4,8
   2365c:	8080030d 	sth	r2,12(r16)
   23660:	183feb1e 	bne	r3,zero,23610 <__alt_data_end+0xf4023610>
   23664:	1100a00c 	andi	r4,r2,640
   23668:	01408004 	movi	r5,512
   2366c:	217fe826 	beq	r4,r5,23610 <__alt_data_end+0xf4023610>
   23670:	800b883a 	mov	r5,r16
   23674:	8809883a 	mov	r4,r17
   23678:	00261400 	call	26140 <__smakebuf_r>
   2367c:	8080030b 	ldhu	r2,12(r16)
   23680:	80c00417 	ldw	r3,16(r16)
   23684:	003fe206 	br	23610 <__alt_data_end+0xf4023610>
   23688:	80800517 	ldw	r2,20(r16)
   2368c:	80000215 	stw	zero,8(r16)
   23690:	0085c83a 	sub	r2,zero,r2
   23694:	80800615 	stw	r2,24(r16)
   23698:	183fe41e 	bne	r3,zero,2362c <__alt_data_end+0xf402362c>
   2369c:	80c0030b 	ldhu	r3,12(r16)
   236a0:	0005883a 	mov	r2,zero
   236a4:	1900200c 	andi	r4,r3,128
   236a8:	203fe126 	beq	r4,zero,23630 <__alt_data_end+0xf4023630>
   236ac:	18c01014 	ori	r3,r3,64
   236b0:	80c0030d 	sth	r3,12(r16)
   236b4:	00bfffc4 	movi	r2,-1
   236b8:	003fdd06 	br	23630 <__alt_data_end+0xf4023630>
   236bc:	002559c0 	call	2559c <__sinit>
   236c0:	003fcd06 	br	235f8 <__alt_data_end+0xf40235f8>
   236c4:	0005883a 	mov	r2,zero
   236c8:	003fd606 	br	23624 <__alt_data_end+0xf4023624>
   236cc:	81400c17 	ldw	r5,48(r16)
   236d0:	28000626 	beq	r5,zero,236ec <__swsetup_r+0x124>
   236d4:	80801004 	addi	r2,r16,64
   236d8:	28800326 	beq	r5,r2,236e8 <__swsetup_r+0x120>
   236dc:	8809883a 	mov	r4,r17
   236e0:	00257100 	call	25710 <_free_r>
   236e4:	8100030b 	ldhu	r4,12(r16)
   236e8:	80000c15 	stw	zero,48(r16)
   236ec:	80c00417 	ldw	r3,16(r16)
   236f0:	00bff6c4 	movi	r2,-37
   236f4:	1108703a 	and	r4,r2,r4
   236f8:	80000115 	stw	zero,4(r16)
   236fc:	80c00015 	stw	r3,0(r16)
   23700:	003fd506 	br	23658 <__alt_data_end+0xf4023658>
   23704:	00800244 	movi	r2,9
   23708:	88800015 	stw	r2,0(r17)
   2370c:	20801014 	ori	r2,r4,64
   23710:	8080030d 	sth	r2,12(r16)
   23714:	00bfffc4 	movi	r2,-1
   23718:	003fc506 	br	23630 <__alt_data_end+0xf4023630>

0002371c <quorem>:
   2371c:	defff704 	addi	sp,sp,-36
   23720:	dc800215 	stw	r18,8(sp)
   23724:	20800417 	ldw	r2,16(r4)
   23728:	2c800417 	ldw	r18,16(r5)
   2372c:	dfc00815 	stw	ra,32(sp)
   23730:	ddc00715 	stw	r23,28(sp)
   23734:	dd800615 	stw	r22,24(sp)
   23738:	dd400515 	stw	r21,20(sp)
   2373c:	dd000415 	stw	r20,16(sp)
   23740:	dcc00315 	stw	r19,12(sp)
   23744:	dc400115 	stw	r17,4(sp)
   23748:	dc000015 	stw	r16,0(sp)
   2374c:	14807116 	blt	r2,r18,23914 <quorem+0x1f8>
   23750:	94bfffc4 	addi	r18,r18,-1
   23754:	94ad883a 	add	r22,r18,r18
   23758:	b5ad883a 	add	r22,r22,r22
   2375c:	2c400504 	addi	r17,r5,20
   23760:	8da9883a 	add	r20,r17,r22
   23764:	25400504 	addi	r21,r4,20
   23768:	282f883a 	mov	r23,r5
   2376c:	adad883a 	add	r22,r21,r22
   23770:	a1400017 	ldw	r5,0(r20)
   23774:	2021883a 	mov	r16,r4
   23778:	b1000017 	ldw	r4,0(r22)
   2377c:	29400044 	addi	r5,r5,1
   23780:	002b31c0 	call	2b31c <__udivsi3>
   23784:	1027883a 	mov	r19,r2
   23788:	10002c26 	beq	r2,zero,2383c <quorem+0x120>
   2378c:	a813883a 	mov	r9,r21
   23790:	880b883a 	mov	r5,r17
   23794:	0009883a 	mov	r4,zero
   23798:	000d883a 	mov	r6,zero
   2379c:	2a000017 	ldw	r8,0(r5)
   237a0:	49c00017 	ldw	r7,0(r9)
   237a4:	29400104 	addi	r5,r5,4
   237a8:	40bfffcc 	andi	r2,r8,65535
   237ac:	14c5383a 	mul	r2,r2,r19
   237b0:	4010d43a 	srli	r8,r8,16
   237b4:	38ffffcc 	andi	r3,r7,65535
   237b8:	1105883a 	add	r2,r2,r4
   237bc:	1008d43a 	srli	r4,r2,16
   237c0:	44d1383a 	mul	r8,r8,r19
   237c4:	198d883a 	add	r6,r3,r6
   237c8:	10ffffcc 	andi	r3,r2,65535
   237cc:	30c7c83a 	sub	r3,r6,r3
   237d0:	380ed43a 	srli	r7,r7,16
   237d4:	4105883a 	add	r2,r8,r4
   237d8:	180dd43a 	srai	r6,r3,16
   237dc:	113fffcc 	andi	r4,r2,65535
   237e0:	390fc83a 	sub	r7,r7,r4
   237e4:	398d883a 	add	r6,r7,r6
   237e8:	300e943a 	slli	r7,r6,16
   237ec:	18ffffcc 	andi	r3,r3,65535
   237f0:	1008d43a 	srli	r4,r2,16
   237f4:	38ceb03a 	or	r7,r7,r3
   237f8:	49c00015 	stw	r7,0(r9)
   237fc:	300dd43a 	srai	r6,r6,16
   23800:	4a400104 	addi	r9,r9,4
   23804:	a17fe52e 	bgeu	r20,r5,2379c <__alt_data_end+0xf402379c>
   23808:	b0800017 	ldw	r2,0(r22)
   2380c:	10000b1e 	bne	r2,zero,2383c <quorem+0x120>
   23810:	b0bfff04 	addi	r2,r22,-4
   23814:	a880082e 	bgeu	r21,r2,23838 <quorem+0x11c>
   23818:	b0ffff17 	ldw	r3,-4(r22)
   2381c:	18000326 	beq	r3,zero,2382c <quorem+0x110>
   23820:	00000506 	br	23838 <quorem+0x11c>
   23824:	10c00017 	ldw	r3,0(r2)
   23828:	1800031e 	bne	r3,zero,23838 <quorem+0x11c>
   2382c:	10bfff04 	addi	r2,r2,-4
   23830:	94bfffc4 	addi	r18,r18,-1
   23834:	a8bffb36 	bltu	r21,r2,23824 <__alt_data_end+0xf4023824>
   23838:	84800415 	stw	r18,16(r16)
   2383c:	b80b883a 	mov	r5,r23
   23840:	8009883a 	mov	r4,r16
   23844:	00278800 	call	27880 <__mcmp>
   23848:	10002616 	blt	r2,zero,238e4 <quorem+0x1c8>
   2384c:	9cc00044 	addi	r19,r19,1
   23850:	a805883a 	mov	r2,r21
   23854:	000b883a 	mov	r5,zero
   23858:	11000017 	ldw	r4,0(r2)
   2385c:	89800017 	ldw	r6,0(r17)
   23860:	10800104 	addi	r2,r2,4
   23864:	20ffffcc 	andi	r3,r4,65535
   23868:	194b883a 	add	r5,r3,r5
   2386c:	30ffffcc 	andi	r3,r6,65535
   23870:	28c7c83a 	sub	r3,r5,r3
   23874:	300cd43a 	srli	r6,r6,16
   23878:	2008d43a 	srli	r4,r4,16
   2387c:	180bd43a 	srai	r5,r3,16
   23880:	18ffffcc 	andi	r3,r3,65535
   23884:	2189c83a 	sub	r4,r4,r6
   23888:	2149883a 	add	r4,r4,r5
   2388c:	200c943a 	slli	r6,r4,16
   23890:	8c400104 	addi	r17,r17,4
   23894:	200bd43a 	srai	r5,r4,16
   23898:	30c6b03a 	or	r3,r6,r3
   2389c:	10ffff15 	stw	r3,-4(r2)
   238a0:	a47fed2e 	bgeu	r20,r17,23858 <__alt_data_end+0xf4023858>
   238a4:	9485883a 	add	r2,r18,r18
   238a8:	1085883a 	add	r2,r2,r2
   238ac:	a887883a 	add	r3,r21,r2
   238b0:	18800017 	ldw	r2,0(r3)
   238b4:	10000b1e 	bne	r2,zero,238e4 <quorem+0x1c8>
   238b8:	18bfff04 	addi	r2,r3,-4
   238bc:	a880082e 	bgeu	r21,r2,238e0 <quorem+0x1c4>
   238c0:	18ffff17 	ldw	r3,-4(r3)
   238c4:	18000326 	beq	r3,zero,238d4 <quorem+0x1b8>
   238c8:	00000506 	br	238e0 <quorem+0x1c4>
   238cc:	10c00017 	ldw	r3,0(r2)
   238d0:	1800031e 	bne	r3,zero,238e0 <quorem+0x1c4>
   238d4:	10bfff04 	addi	r2,r2,-4
   238d8:	94bfffc4 	addi	r18,r18,-1
   238dc:	a8bffb36 	bltu	r21,r2,238cc <__alt_data_end+0xf40238cc>
   238e0:	84800415 	stw	r18,16(r16)
   238e4:	9805883a 	mov	r2,r19
   238e8:	dfc00817 	ldw	ra,32(sp)
   238ec:	ddc00717 	ldw	r23,28(sp)
   238f0:	dd800617 	ldw	r22,24(sp)
   238f4:	dd400517 	ldw	r21,20(sp)
   238f8:	dd000417 	ldw	r20,16(sp)
   238fc:	dcc00317 	ldw	r19,12(sp)
   23900:	dc800217 	ldw	r18,8(sp)
   23904:	dc400117 	ldw	r17,4(sp)
   23908:	dc000017 	ldw	r16,0(sp)
   2390c:	dec00904 	addi	sp,sp,36
   23910:	f800283a 	ret
   23914:	0005883a 	mov	r2,zero
   23918:	003ff306 	br	238e8 <__alt_data_end+0xf40238e8>

0002391c <_dtoa_r>:
   2391c:	20801017 	ldw	r2,64(r4)
   23920:	deffde04 	addi	sp,sp,-136
   23924:	df002015 	stw	fp,128(sp)
   23928:	dcc01b15 	stw	r19,108(sp)
   2392c:	dc801a15 	stw	r18,104(sp)
   23930:	dc401915 	stw	r17,100(sp)
   23934:	dc001815 	stw	r16,96(sp)
   23938:	dfc02115 	stw	ra,132(sp)
   2393c:	ddc01f15 	stw	r23,124(sp)
   23940:	dd801e15 	stw	r22,120(sp)
   23944:	dd401d15 	stw	r21,116(sp)
   23948:	dd001c15 	stw	r20,112(sp)
   2394c:	d9c00315 	stw	r7,12(sp)
   23950:	2039883a 	mov	fp,r4
   23954:	3023883a 	mov	r17,r6
   23958:	2825883a 	mov	r18,r5
   2395c:	dc002417 	ldw	r16,144(sp)
   23960:	3027883a 	mov	r19,r6
   23964:	10000826 	beq	r2,zero,23988 <_dtoa_r+0x6c>
   23968:	21801117 	ldw	r6,68(r4)
   2396c:	00c00044 	movi	r3,1
   23970:	100b883a 	mov	r5,r2
   23974:	1986983a 	sll	r3,r3,r6
   23978:	11800115 	stw	r6,4(r2)
   2397c:	10c00215 	stw	r3,8(r2)
   23980:	00270600 	call	27060 <_Bfree>
   23984:	e0001015 	stw	zero,64(fp)
   23988:	88002e16 	blt	r17,zero,23a44 <_dtoa_r+0x128>
   2398c:	80000015 	stw	zero,0(r16)
   23990:	889ffc2c 	andhi	r2,r17,32752
   23994:	00dffc34 	movhi	r3,32752
   23998:	10c01c26 	beq	r2,r3,23a0c <_dtoa_r+0xf0>
   2399c:	000d883a 	mov	r6,zero
   239a0:	000f883a 	mov	r7,zero
   239a4:	9009883a 	mov	r4,r18
   239a8:	980b883a 	mov	r5,r19
   239ac:	002c56c0 	call	2c56c <__eqdf2>
   239b0:	10002b1e 	bne	r2,zero,23a60 <_dtoa_r+0x144>
   239b4:	d9c02317 	ldw	r7,140(sp)
   239b8:	00800044 	movi	r2,1
   239bc:	38800015 	stw	r2,0(r7)
   239c0:	d8802517 	ldw	r2,148(sp)
   239c4:	10019e26 	beq	r2,zero,24040 <_dtoa_r+0x724>
   239c8:	d8c02517 	ldw	r3,148(sp)
   239cc:	008000f4 	movhi	r2,3
   239d0:	10868144 	addi	r2,r2,6661
   239d4:	18800015 	stw	r2,0(r3)
   239d8:	10bfffc4 	addi	r2,r2,-1
   239dc:	dfc02117 	ldw	ra,132(sp)
   239e0:	df002017 	ldw	fp,128(sp)
   239e4:	ddc01f17 	ldw	r23,124(sp)
   239e8:	dd801e17 	ldw	r22,120(sp)
   239ec:	dd401d17 	ldw	r21,116(sp)
   239f0:	dd001c17 	ldw	r20,112(sp)
   239f4:	dcc01b17 	ldw	r19,108(sp)
   239f8:	dc801a17 	ldw	r18,104(sp)
   239fc:	dc401917 	ldw	r17,100(sp)
   23a00:	dc001817 	ldw	r16,96(sp)
   23a04:	dec02204 	addi	sp,sp,136
   23a08:	f800283a 	ret
   23a0c:	d8c02317 	ldw	r3,140(sp)
   23a10:	0089c3c4 	movi	r2,9999
   23a14:	18800015 	stw	r2,0(r3)
   23a18:	90017726 	beq	r18,zero,23ff8 <_dtoa_r+0x6dc>
   23a1c:	008000f4 	movhi	r2,3
   23a20:	10868d04 	addi	r2,r2,6708
   23a24:	d9002517 	ldw	r4,148(sp)
   23a28:	203fec26 	beq	r4,zero,239dc <__alt_data_end+0xf40239dc>
   23a2c:	10c000c7 	ldb	r3,3(r2)
   23a30:	1801781e 	bne	r3,zero,24014 <_dtoa_r+0x6f8>
   23a34:	10c000c4 	addi	r3,r2,3
   23a38:	d9802517 	ldw	r6,148(sp)
   23a3c:	30c00015 	stw	r3,0(r6)
   23a40:	003fe606 	br	239dc <__alt_data_end+0xf40239dc>
   23a44:	04e00034 	movhi	r19,32768
   23a48:	9cffffc4 	addi	r19,r19,-1
   23a4c:	00800044 	movi	r2,1
   23a50:	8ce6703a 	and	r19,r17,r19
   23a54:	80800015 	stw	r2,0(r16)
   23a58:	9823883a 	mov	r17,r19
   23a5c:	003fcc06 	br	23990 <__alt_data_end+0xf4023990>
   23a60:	d8800204 	addi	r2,sp,8
   23a64:	d8800015 	stw	r2,0(sp)
   23a68:	d9c00104 	addi	r7,sp,4
   23a6c:	900b883a 	mov	r5,r18
   23a70:	980d883a 	mov	r6,r19
   23a74:	e009883a 	mov	r4,fp
   23a78:	8820d53a 	srli	r16,r17,20
   23a7c:	0027c4c0 	call	27c4c <__d2b>
   23a80:	d8800915 	stw	r2,36(sp)
   23a84:	8001651e 	bne	r16,zero,2401c <_dtoa_r+0x700>
   23a88:	dd800217 	ldw	r22,8(sp)
   23a8c:	dc000117 	ldw	r16,4(sp)
   23a90:	00800804 	movi	r2,32
   23a94:	b421883a 	add	r16,r22,r16
   23a98:	80c10c84 	addi	r3,r16,1074
   23a9c:	10c2d10e 	bge	r2,r3,245e4 <_dtoa_r+0xcc8>
   23aa0:	00801004 	movi	r2,64
   23aa4:	81010484 	addi	r4,r16,1042
   23aa8:	10c7c83a 	sub	r3,r2,r3
   23aac:	9108d83a 	srl	r4,r18,r4
   23ab0:	88e2983a 	sll	r17,r17,r3
   23ab4:	2448b03a 	or	r4,r4,r17
   23ab8:	002d9340 	call	2d934 <__floatunsidf>
   23abc:	017f8434 	movhi	r5,65040
   23ac0:	01800044 	movi	r6,1
   23ac4:	1009883a 	mov	r4,r2
   23ac8:	194b883a 	add	r5,r3,r5
   23acc:	843fffc4 	addi	r16,r16,-1
   23ad0:	d9801115 	stw	r6,68(sp)
   23ad4:	000d883a 	mov	r6,zero
   23ad8:	01cffe34 	movhi	r7,16376
   23adc:	002cedc0 	call	2cedc <__subdf3>
   23ae0:	0198dbf4 	movhi	r6,25455
   23ae4:	01cff4f4 	movhi	r7,16339
   23ae8:	3190d844 	addi	r6,r6,17249
   23aec:	39e1e9c4 	addi	r7,r7,-30809
   23af0:	1009883a 	mov	r4,r2
   23af4:	180b883a 	mov	r5,r3
   23af8:	002c7c40 	call	2c7c4 <__muldf3>
   23afc:	01a2d874 	movhi	r6,35681
   23b00:	01cff1f4 	movhi	r7,16327
   23b04:	31b22cc4 	addi	r6,r6,-14157
   23b08:	39e28a04 	addi	r7,r7,-30168
   23b0c:	180b883a 	mov	r5,r3
   23b10:	1009883a 	mov	r4,r2
   23b14:	002b3d80 	call	2b3d8 <__adddf3>
   23b18:	8009883a 	mov	r4,r16
   23b1c:	1029883a 	mov	r20,r2
   23b20:	1823883a 	mov	r17,r3
   23b24:	002d8580 	call	2d858 <__floatsidf>
   23b28:	019427f4 	movhi	r6,20639
   23b2c:	01cff4f4 	movhi	r7,16339
   23b30:	319e7ec4 	addi	r6,r6,31227
   23b34:	39d104c4 	addi	r7,r7,17427
   23b38:	1009883a 	mov	r4,r2
   23b3c:	180b883a 	mov	r5,r3
   23b40:	002c7c40 	call	2c7c4 <__muldf3>
   23b44:	100d883a 	mov	r6,r2
   23b48:	180f883a 	mov	r7,r3
   23b4c:	a009883a 	mov	r4,r20
   23b50:	880b883a 	mov	r5,r17
   23b54:	002b3d80 	call	2b3d8 <__adddf3>
   23b58:	1009883a 	mov	r4,r2
   23b5c:	180b883a 	mov	r5,r3
   23b60:	1029883a 	mov	r20,r2
   23b64:	1823883a 	mov	r17,r3
   23b68:	002d7d80 	call	2d7d8 <__fixdfsi>
   23b6c:	000d883a 	mov	r6,zero
   23b70:	000f883a 	mov	r7,zero
   23b74:	a009883a 	mov	r4,r20
   23b78:	880b883a 	mov	r5,r17
   23b7c:	d8800515 	stw	r2,20(sp)
   23b80:	002c6d00 	call	2c6d0 <__ledf2>
   23b84:	10028716 	blt	r2,zero,245a4 <_dtoa_r+0xc88>
   23b88:	d8c00517 	ldw	r3,20(sp)
   23b8c:	00800584 	movi	r2,22
   23b90:	10c27536 	bltu	r2,r3,24568 <_dtoa_r+0xc4c>
   23b94:	180490fa 	slli	r2,r3,3
   23b98:	00c000f4 	movhi	r3,3
   23b9c:	18c6a904 	addi	r3,r3,6820
   23ba0:	1885883a 	add	r2,r3,r2
   23ba4:	11000017 	ldw	r4,0(r2)
   23ba8:	11400117 	ldw	r5,4(r2)
   23bac:	900d883a 	mov	r6,r18
   23bb0:	980f883a 	mov	r7,r19
   23bb4:	002c5f40 	call	2c5f4 <__gedf2>
   23bb8:	00828d0e 	bge	zero,r2,245f0 <_dtoa_r+0xcd4>
   23bbc:	d9000517 	ldw	r4,20(sp)
   23bc0:	d8000e15 	stw	zero,56(sp)
   23bc4:	213fffc4 	addi	r4,r4,-1
   23bc8:	d9000515 	stw	r4,20(sp)
   23bcc:	b42dc83a 	sub	r22,r22,r16
   23bd0:	b5bfffc4 	addi	r22,r22,-1
   23bd4:	b0026f16 	blt	r22,zero,24594 <_dtoa_r+0xc78>
   23bd8:	d8000815 	stw	zero,32(sp)
   23bdc:	d9c00517 	ldw	r7,20(sp)
   23be0:	38026416 	blt	r7,zero,24574 <_dtoa_r+0xc58>
   23be4:	b1ed883a 	add	r22,r22,r7
   23be8:	d9c00d15 	stw	r7,52(sp)
   23bec:	d8000a15 	stw	zero,40(sp)
   23bf0:	d9800317 	ldw	r6,12(sp)
   23bf4:	00800244 	movi	r2,9
   23bf8:	11811436 	bltu	r2,r6,2404c <_dtoa_r+0x730>
   23bfc:	00800144 	movi	r2,5
   23c00:	1184e10e 	bge	r2,r6,24f88 <_dtoa_r+0x166c>
   23c04:	31bfff04 	addi	r6,r6,-4
   23c08:	d9800315 	stw	r6,12(sp)
   23c0c:	0023883a 	mov	r17,zero
   23c10:	d9800317 	ldw	r6,12(sp)
   23c14:	008000c4 	movi	r2,3
   23c18:	30836726 	beq	r6,r2,249b8 <_dtoa_r+0x109c>
   23c1c:	1183410e 	bge	r2,r6,24924 <_dtoa_r+0x1008>
   23c20:	d9c00317 	ldw	r7,12(sp)
   23c24:	00800104 	movi	r2,4
   23c28:	38827c26 	beq	r7,r2,2461c <_dtoa_r+0xd00>
   23c2c:	00800144 	movi	r2,5
   23c30:	3884c41e 	bne	r7,r2,24f44 <_dtoa_r+0x1628>
   23c34:	00800044 	movi	r2,1
   23c38:	d8800b15 	stw	r2,44(sp)
   23c3c:	d8c00517 	ldw	r3,20(sp)
   23c40:	d9002217 	ldw	r4,136(sp)
   23c44:	1907883a 	add	r3,r3,r4
   23c48:	19800044 	addi	r6,r3,1
   23c4c:	d8c00c15 	stw	r3,48(sp)
   23c50:	d9800615 	stw	r6,24(sp)
   23c54:	0183a40e 	bge	zero,r6,24ae8 <_dtoa_r+0x11cc>
   23c58:	d9800617 	ldw	r6,24(sp)
   23c5c:	3021883a 	mov	r16,r6
   23c60:	e0001115 	stw	zero,68(fp)
   23c64:	008005c4 	movi	r2,23
   23c68:	1184c92e 	bgeu	r2,r6,24f90 <_dtoa_r+0x1674>
   23c6c:	00c00044 	movi	r3,1
   23c70:	00800104 	movi	r2,4
   23c74:	1085883a 	add	r2,r2,r2
   23c78:	11000504 	addi	r4,r2,20
   23c7c:	180b883a 	mov	r5,r3
   23c80:	18c00044 	addi	r3,r3,1
   23c84:	313ffb2e 	bgeu	r6,r4,23c74 <__alt_data_end+0xf4023c74>
   23c88:	e1401115 	stw	r5,68(fp)
   23c8c:	e009883a 	mov	r4,fp
   23c90:	0026fb80 	call	26fb8 <_Balloc>
   23c94:	d8800715 	stw	r2,28(sp)
   23c98:	e0801015 	stw	r2,64(fp)
   23c9c:	00800384 	movi	r2,14
   23ca0:	1400f736 	bltu	r2,r16,24080 <_dtoa_r+0x764>
   23ca4:	8800f626 	beq	r17,zero,24080 <_dtoa_r+0x764>
   23ca8:	d9c00517 	ldw	r7,20(sp)
   23cac:	01c39a0e 	bge	zero,r7,24b18 <_dtoa_r+0x11fc>
   23cb0:	388003cc 	andi	r2,r7,15
   23cb4:	100490fa 	slli	r2,r2,3
   23cb8:	382bd13a 	srai	r21,r7,4
   23cbc:	00c000f4 	movhi	r3,3
   23cc0:	18c6a904 	addi	r3,r3,6820
   23cc4:	1885883a 	add	r2,r3,r2
   23cc8:	a8c0040c 	andi	r3,r21,16
   23ccc:	12400017 	ldw	r9,0(r2)
   23cd0:	12000117 	ldw	r8,4(r2)
   23cd4:	18037926 	beq	r3,zero,24abc <_dtoa_r+0x11a0>
   23cd8:	008000f4 	movhi	r2,3
   23cdc:	10869f04 	addi	r2,r2,6780
   23ce0:	11800817 	ldw	r6,32(r2)
   23ce4:	11c00917 	ldw	r7,36(r2)
   23ce8:	9009883a 	mov	r4,r18
   23cec:	980b883a 	mov	r5,r19
   23cf0:	da001715 	stw	r8,92(sp)
   23cf4:	da401615 	stw	r9,88(sp)
   23cf8:	002bc840 	call	2bc84 <__divdf3>
   23cfc:	da001717 	ldw	r8,92(sp)
   23d00:	da401617 	ldw	r9,88(sp)
   23d04:	ad4003cc 	andi	r21,r21,15
   23d08:	040000c4 	movi	r16,3
   23d0c:	1023883a 	mov	r17,r2
   23d10:	1829883a 	mov	r20,r3
   23d14:	a8001126 	beq	r21,zero,23d5c <_dtoa_r+0x440>
   23d18:	05c000f4 	movhi	r23,3
   23d1c:	bdc69f04 	addi	r23,r23,6780
   23d20:	4805883a 	mov	r2,r9
   23d24:	4007883a 	mov	r3,r8
   23d28:	a980004c 	andi	r6,r21,1
   23d2c:	1009883a 	mov	r4,r2
   23d30:	a82bd07a 	srai	r21,r21,1
   23d34:	180b883a 	mov	r5,r3
   23d38:	30000426 	beq	r6,zero,23d4c <_dtoa_r+0x430>
   23d3c:	b9800017 	ldw	r6,0(r23)
   23d40:	b9c00117 	ldw	r7,4(r23)
   23d44:	84000044 	addi	r16,r16,1
   23d48:	002c7c40 	call	2c7c4 <__muldf3>
   23d4c:	bdc00204 	addi	r23,r23,8
   23d50:	a83ff51e 	bne	r21,zero,23d28 <__alt_data_end+0xf4023d28>
   23d54:	1013883a 	mov	r9,r2
   23d58:	1811883a 	mov	r8,r3
   23d5c:	480d883a 	mov	r6,r9
   23d60:	400f883a 	mov	r7,r8
   23d64:	8809883a 	mov	r4,r17
   23d68:	a00b883a 	mov	r5,r20
   23d6c:	002bc840 	call	2bc84 <__divdf3>
   23d70:	d8800f15 	stw	r2,60(sp)
   23d74:	d8c01015 	stw	r3,64(sp)
   23d78:	d8c00e17 	ldw	r3,56(sp)
   23d7c:	18000626 	beq	r3,zero,23d98 <_dtoa_r+0x47c>
   23d80:	d9000f17 	ldw	r4,60(sp)
   23d84:	d9401017 	ldw	r5,64(sp)
   23d88:	000d883a 	mov	r6,zero
   23d8c:	01cffc34 	movhi	r7,16368
   23d90:	002c6d00 	call	2c6d0 <__ledf2>
   23d94:	10040b16 	blt	r2,zero,24dc4 <_dtoa_r+0x14a8>
   23d98:	8009883a 	mov	r4,r16
   23d9c:	002d8580 	call	2d858 <__floatsidf>
   23da0:	d9800f17 	ldw	r6,60(sp)
   23da4:	d9c01017 	ldw	r7,64(sp)
   23da8:	1009883a 	mov	r4,r2
   23dac:	180b883a 	mov	r5,r3
   23db0:	002c7c40 	call	2c7c4 <__muldf3>
   23db4:	000d883a 	mov	r6,zero
   23db8:	01d00734 	movhi	r7,16412
   23dbc:	1009883a 	mov	r4,r2
   23dc0:	180b883a 	mov	r5,r3
   23dc4:	002b3d80 	call	2b3d8 <__adddf3>
   23dc8:	1021883a 	mov	r16,r2
   23dcc:	d8800617 	ldw	r2,24(sp)
   23dd0:	047f3034 	movhi	r17,64704
   23dd4:	1c63883a 	add	r17,r3,r17
   23dd8:	10031826 	beq	r2,zero,24a3c <_dtoa_r+0x1120>
   23ddc:	d8c00517 	ldw	r3,20(sp)
   23de0:	db000617 	ldw	r12,24(sp)
   23de4:	d8c01315 	stw	r3,76(sp)
   23de8:	d9000b17 	ldw	r4,44(sp)
   23dec:	20038f26 	beq	r4,zero,24c2c <_dtoa_r+0x1310>
   23df0:	60bfffc4 	addi	r2,r12,-1
   23df4:	100490fa 	slli	r2,r2,3
   23df8:	00c000f4 	movhi	r3,3
   23dfc:	18c6a904 	addi	r3,r3,6820
   23e00:	1885883a 	add	r2,r3,r2
   23e04:	11800017 	ldw	r6,0(r2)
   23e08:	11c00117 	ldw	r7,4(r2)
   23e0c:	d8800717 	ldw	r2,28(sp)
   23e10:	0009883a 	mov	r4,zero
   23e14:	014ff834 	movhi	r5,16352
   23e18:	db001615 	stw	r12,88(sp)
   23e1c:	15c00044 	addi	r23,r2,1
   23e20:	002bc840 	call	2bc84 <__divdf3>
   23e24:	800d883a 	mov	r6,r16
   23e28:	880f883a 	mov	r7,r17
   23e2c:	1009883a 	mov	r4,r2
   23e30:	180b883a 	mov	r5,r3
   23e34:	002cedc0 	call	2cedc <__subdf3>
   23e38:	d9401017 	ldw	r5,64(sp)
   23e3c:	d9000f17 	ldw	r4,60(sp)
   23e40:	102b883a 	mov	r21,r2
   23e44:	d8c01215 	stw	r3,72(sp)
   23e48:	002d7d80 	call	2d7d8 <__fixdfsi>
   23e4c:	1009883a 	mov	r4,r2
   23e50:	1029883a 	mov	r20,r2
   23e54:	002d8580 	call	2d858 <__floatsidf>
   23e58:	d9000f17 	ldw	r4,60(sp)
   23e5c:	d9401017 	ldw	r5,64(sp)
   23e60:	100d883a 	mov	r6,r2
   23e64:	180f883a 	mov	r7,r3
   23e68:	002cedc0 	call	2cedc <__subdf3>
   23e6c:	1823883a 	mov	r17,r3
   23e70:	d8c00717 	ldw	r3,28(sp)
   23e74:	d9401217 	ldw	r5,72(sp)
   23e78:	a2000c04 	addi	r8,r20,48
   23e7c:	1021883a 	mov	r16,r2
   23e80:	1a000005 	stb	r8,0(r3)
   23e84:	800d883a 	mov	r6,r16
   23e88:	880f883a 	mov	r7,r17
   23e8c:	a809883a 	mov	r4,r21
   23e90:	4029883a 	mov	r20,r8
   23e94:	002c5f40 	call	2c5f4 <__gedf2>
   23e98:	00841d16 	blt	zero,r2,24f10 <_dtoa_r+0x15f4>
   23e9c:	800d883a 	mov	r6,r16
   23ea0:	880f883a 	mov	r7,r17
   23ea4:	0009883a 	mov	r4,zero
   23ea8:	014ffc34 	movhi	r5,16368
   23eac:	002cedc0 	call	2cedc <__subdf3>
   23eb0:	d9401217 	ldw	r5,72(sp)
   23eb4:	100d883a 	mov	r6,r2
   23eb8:	180f883a 	mov	r7,r3
   23ebc:	a809883a 	mov	r4,r21
   23ec0:	002c5f40 	call	2c5f4 <__gedf2>
   23ec4:	db001617 	ldw	r12,88(sp)
   23ec8:	00840e16 	blt	zero,r2,24f04 <_dtoa_r+0x15e8>
   23ecc:	00800044 	movi	r2,1
   23ed0:	13006b0e 	bge	r2,r12,24080 <_dtoa_r+0x764>
   23ed4:	d9000717 	ldw	r4,28(sp)
   23ed8:	dd800f15 	stw	r22,60(sp)
   23edc:	dcc01015 	stw	r19,64(sp)
   23ee0:	2319883a 	add	r12,r4,r12
   23ee4:	dcc01217 	ldw	r19,72(sp)
   23ee8:	602d883a 	mov	r22,r12
   23eec:	dc801215 	stw	r18,72(sp)
   23ef0:	b825883a 	mov	r18,r23
   23ef4:	00000906 	br	23f1c <_dtoa_r+0x600>
   23ef8:	002cedc0 	call	2cedc <__subdf3>
   23efc:	a80d883a 	mov	r6,r21
   23f00:	980f883a 	mov	r7,r19
   23f04:	1009883a 	mov	r4,r2
   23f08:	180b883a 	mov	r5,r3
   23f0c:	002c6d00 	call	2c6d0 <__ledf2>
   23f10:	1003e816 	blt	r2,zero,24eb4 <_dtoa_r+0x1598>
   23f14:	b825883a 	mov	r18,r23
   23f18:	bd83e926 	beq	r23,r22,24ec0 <_dtoa_r+0x15a4>
   23f1c:	a809883a 	mov	r4,r21
   23f20:	980b883a 	mov	r5,r19
   23f24:	000d883a 	mov	r6,zero
   23f28:	01d00934 	movhi	r7,16420
   23f2c:	002c7c40 	call	2c7c4 <__muldf3>
   23f30:	000d883a 	mov	r6,zero
   23f34:	01d00934 	movhi	r7,16420
   23f38:	8009883a 	mov	r4,r16
   23f3c:	880b883a 	mov	r5,r17
   23f40:	102b883a 	mov	r21,r2
   23f44:	1827883a 	mov	r19,r3
   23f48:	002c7c40 	call	2c7c4 <__muldf3>
   23f4c:	180b883a 	mov	r5,r3
   23f50:	1009883a 	mov	r4,r2
   23f54:	1821883a 	mov	r16,r3
   23f58:	1023883a 	mov	r17,r2
   23f5c:	002d7d80 	call	2d7d8 <__fixdfsi>
   23f60:	1009883a 	mov	r4,r2
   23f64:	1029883a 	mov	r20,r2
   23f68:	002d8580 	call	2d858 <__floatsidf>
   23f6c:	8809883a 	mov	r4,r17
   23f70:	800b883a 	mov	r5,r16
   23f74:	100d883a 	mov	r6,r2
   23f78:	180f883a 	mov	r7,r3
   23f7c:	002cedc0 	call	2cedc <__subdf3>
   23f80:	a5000c04 	addi	r20,r20,48
   23f84:	a80d883a 	mov	r6,r21
   23f88:	980f883a 	mov	r7,r19
   23f8c:	1009883a 	mov	r4,r2
   23f90:	180b883a 	mov	r5,r3
   23f94:	95000005 	stb	r20,0(r18)
   23f98:	1021883a 	mov	r16,r2
   23f9c:	1823883a 	mov	r17,r3
   23fa0:	002c6d00 	call	2c6d0 <__ledf2>
   23fa4:	bdc00044 	addi	r23,r23,1
   23fa8:	800d883a 	mov	r6,r16
   23fac:	880f883a 	mov	r7,r17
   23fb0:	0009883a 	mov	r4,zero
   23fb4:	014ffc34 	movhi	r5,16368
   23fb8:	103fcf0e 	bge	r2,zero,23ef8 <__alt_data_end+0xf4023ef8>
   23fbc:	d8c01317 	ldw	r3,76(sp)
   23fc0:	d8c00515 	stw	r3,20(sp)
   23fc4:	d9400917 	ldw	r5,36(sp)
   23fc8:	e009883a 	mov	r4,fp
   23fcc:	00270600 	call	27060 <_Bfree>
   23fd0:	d9000517 	ldw	r4,20(sp)
   23fd4:	d9802317 	ldw	r6,140(sp)
   23fd8:	d9c02517 	ldw	r7,148(sp)
   23fdc:	b8000005 	stb	zero,0(r23)
   23fe0:	20800044 	addi	r2,r4,1
   23fe4:	30800015 	stw	r2,0(r6)
   23fe8:	3802aa26 	beq	r7,zero,24a94 <_dtoa_r+0x1178>
   23fec:	3dc00015 	stw	r23,0(r7)
   23ff0:	d8800717 	ldw	r2,28(sp)
   23ff4:	003e7906 	br	239dc <__alt_data_end+0xf40239dc>
   23ff8:	00800434 	movhi	r2,16
   23ffc:	10bfffc4 	addi	r2,r2,-1
   24000:	88a2703a 	and	r17,r17,r2
   24004:	883e851e 	bne	r17,zero,23a1c <__alt_data_end+0xf4023a1c>
   24008:	008000f4 	movhi	r2,3
   2400c:	10868a04 	addi	r2,r2,6696
   24010:	003e8406 	br	23a24 <__alt_data_end+0xf4023a24>
   24014:	10c00204 	addi	r3,r2,8
   24018:	003e8706 	br	23a38 <__alt_data_end+0xf4023a38>
   2401c:	01400434 	movhi	r5,16
   24020:	297fffc4 	addi	r5,r5,-1
   24024:	994a703a 	and	r5,r19,r5
   24028:	9009883a 	mov	r4,r18
   2402c:	843f0044 	addi	r16,r16,-1023
   24030:	294ffc34 	orhi	r5,r5,16368
   24034:	dd800217 	ldw	r22,8(sp)
   24038:	d8001115 	stw	zero,68(sp)
   2403c:	003ea506 	br	23ad4 <__alt_data_end+0xf4023ad4>
   24040:	008000f4 	movhi	r2,3
   24044:	10868104 	addi	r2,r2,6660
   24048:	003e6406 	br	239dc <__alt_data_end+0xf40239dc>
   2404c:	e0001115 	stw	zero,68(fp)
   24050:	000b883a 	mov	r5,zero
   24054:	e009883a 	mov	r4,fp
   24058:	0026fb80 	call	26fb8 <_Balloc>
   2405c:	01bfffc4 	movi	r6,-1
   24060:	01c00044 	movi	r7,1
   24064:	d8800715 	stw	r2,28(sp)
   24068:	d9800c15 	stw	r6,48(sp)
   2406c:	e0801015 	stw	r2,64(fp)
   24070:	d8000315 	stw	zero,12(sp)
   24074:	d9c00b15 	stw	r7,44(sp)
   24078:	d9800615 	stw	r6,24(sp)
   2407c:	d8002215 	stw	zero,136(sp)
   24080:	d8800117 	ldw	r2,4(sp)
   24084:	10008916 	blt	r2,zero,242ac <_dtoa_r+0x990>
   24088:	d9000517 	ldw	r4,20(sp)
   2408c:	00c00384 	movi	r3,14
   24090:	19008616 	blt	r3,r4,242ac <_dtoa_r+0x990>
   24094:	200490fa 	slli	r2,r4,3
   24098:	00c000f4 	movhi	r3,3
   2409c:	d9802217 	ldw	r6,136(sp)
   240a0:	18c6a904 	addi	r3,r3,6820
   240a4:	1885883a 	add	r2,r3,r2
   240a8:	14000017 	ldw	r16,0(r2)
   240ac:	14400117 	ldw	r17,4(r2)
   240b0:	30016316 	blt	r6,zero,24640 <_dtoa_r+0xd24>
   240b4:	800d883a 	mov	r6,r16
   240b8:	880f883a 	mov	r7,r17
   240bc:	9009883a 	mov	r4,r18
   240c0:	980b883a 	mov	r5,r19
   240c4:	002bc840 	call	2bc84 <__divdf3>
   240c8:	180b883a 	mov	r5,r3
   240cc:	1009883a 	mov	r4,r2
   240d0:	002d7d80 	call	2d7d8 <__fixdfsi>
   240d4:	1009883a 	mov	r4,r2
   240d8:	102b883a 	mov	r21,r2
   240dc:	002d8580 	call	2d858 <__floatsidf>
   240e0:	800d883a 	mov	r6,r16
   240e4:	880f883a 	mov	r7,r17
   240e8:	1009883a 	mov	r4,r2
   240ec:	180b883a 	mov	r5,r3
   240f0:	002c7c40 	call	2c7c4 <__muldf3>
   240f4:	100d883a 	mov	r6,r2
   240f8:	180f883a 	mov	r7,r3
   240fc:	9009883a 	mov	r4,r18
   24100:	980b883a 	mov	r5,r19
   24104:	002cedc0 	call	2cedc <__subdf3>
   24108:	d9c00717 	ldw	r7,28(sp)
   2410c:	1009883a 	mov	r4,r2
   24110:	a8800c04 	addi	r2,r21,48
   24114:	38800005 	stb	r2,0(r7)
   24118:	3dc00044 	addi	r23,r7,1
   2411c:	d9c00617 	ldw	r7,24(sp)
   24120:	01800044 	movi	r6,1
   24124:	180b883a 	mov	r5,r3
   24128:	2005883a 	mov	r2,r4
   2412c:	39803826 	beq	r7,r6,24210 <_dtoa_r+0x8f4>
   24130:	000d883a 	mov	r6,zero
   24134:	01d00934 	movhi	r7,16420
   24138:	002c7c40 	call	2c7c4 <__muldf3>
   2413c:	000d883a 	mov	r6,zero
   24140:	000f883a 	mov	r7,zero
   24144:	1009883a 	mov	r4,r2
   24148:	180b883a 	mov	r5,r3
   2414c:	1025883a 	mov	r18,r2
   24150:	1827883a 	mov	r19,r3
   24154:	002c56c0 	call	2c56c <__eqdf2>
   24158:	103f9a26 	beq	r2,zero,23fc4 <__alt_data_end+0xf4023fc4>
   2415c:	d9c00617 	ldw	r7,24(sp)
   24160:	d8c00717 	ldw	r3,28(sp)
   24164:	b829883a 	mov	r20,r23
   24168:	38bfffc4 	addi	r2,r7,-1
   2416c:	18ad883a 	add	r22,r3,r2
   24170:	00000a06 	br	2419c <_dtoa_r+0x880>
   24174:	002c7c40 	call	2c7c4 <__muldf3>
   24178:	000d883a 	mov	r6,zero
   2417c:	000f883a 	mov	r7,zero
   24180:	1009883a 	mov	r4,r2
   24184:	180b883a 	mov	r5,r3
   24188:	1025883a 	mov	r18,r2
   2418c:	1827883a 	mov	r19,r3
   24190:	b829883a 	mov	r20,r23
   24194:	002c56c0 	call	2c56c <__eqdf2>
   24198:	103f8a26 	beq	r2,zero,23fc4 <__alt_data_end+0xf4023fc4>
   2419c:	800d883a 	mov	r6,r16
   241a0:	880f883a 	mov	r7,r17
   241a4:	9009883a 	mov	r4,r18
   241a8:	980b883a 	mov	r5,r19
   241ac:	002bc840 	call	2bc84 <__divdf3>
   241b0:	180b883a 	mov	r5,r3
   241b4:	1009883a 	mov	r4,r2
   241b8:	002d7d80 	call	2d7d8 <__fixdfsi>
   241bc:	1009883a 	mov	r4,r2
   241c0:	102b883a 	mov	r21,r2
   241c4:	002d8580 	call	2d858 <__floatsidf>
   241c8:	800d883a 	mov	r6,r16
   241cc:	880f883a 	mov	r7,r17
   241d0:	1009883a 	mov	r4,r2
   241d4:	180b883a 	mov	r5,r3
   241d8:	002c7c40 	call	2c7c4 <__muldf3>
   241dc:	100d883a 	mov	r6,r2
   241e0:	180f883a 	mov	r7,r3
   241e4:	9009883a 	mov	r4,r18
   241e8:	980b883a 	mov	r5,r19
   241ec:	002cedc0 	call	2cedc <__subdf3>
   241f0:	aa000c04 	addi	r8,r21,48
   241f4:	a2000005 	stb	r8,0(r20)
   241f8:	000d883a 	mov	r6,zero
   241fc:	01d00934 	movhi	r7,16420
   24200:	1009883a 	mov	r4,r2
   24204:	180b883a 	mov	r5,r3
   24208:	a5c00044 	addi	r23,r20,1
   2420c:	b53fd91e 	bne	r22,r20,24174 <__alt_data_end+0xf4024174>
   24210:	100d883a 	mov	r6,r2
   24214:	180f883a 	mov	r7,r3
   24218:	1009883a 	mov	r4,r2
   2421c:	180b883a 	mov	r5,r3
   24220:	002b3d80 	call	2b3d8 <__adddf3>
   24224:	100d883a 	mov	r6,r2
   24228:	180f883a 	mov	r7,r3
   2422c:	8009883a 	mov	r4,r16
   24230:	880b883a 	mov	r5,r17
   24234:	1027883a 	mov	r19,r2
   24238:	1825883a 	mov	r18,r3
   2423c:	002c6d00 	call	2c6d0 <__ledf2>
   24240:	10000816 	blt	r2,zero,24264 <_dtoa_r+0x948>
   24244:	980d883a 	mov	r6,r19
   24248:	900f883a 	mov	r7,r18
   2424c:	8009883a 	mov	r4,r16
   24250:	880b883a 	mov	r5,r17
   24254:	002c56c0 	call	2c56c <__eqdf2>
   24258:	103f5a1e 	bne	r2,zero,23fc4 <__alt_data_end+0xf4023fc4>
   2425c:	ad40004c 	andi	r21,r21,1
   24260:	a83f5826 	beq	r21,zero,23fc4 <__alt_data_end+0xf4023fc4>
   24264:	bd3fffc3 	ldbu	r20,-1(r23)
   24268:	b8bfffc4 	addi	r2,r23,-1
   2426c:	1007883a 	mov	r3,r2
   24270:	01400e44 	movi	r5,57
   24274:	d9800717 	ldw	r6,28(sp)
   24278:	00000506 	br	24290 <_dtoa_r+0x974>
   2427c:	18ffffc4 	addi	r3,r3,-1
   24280:	11824726 	beq	r2,r6,24ba0 <_dtoa_r+0x1284>
   24284:	1d000003 	ldbu	r20,0(r3)
   24288:	102f883a 	mov	r23,r2
   2428c:	10bfffc4 	addi	r2,r2,-1
   24290:	a1003fcc 	andi	r4,r20,255
   24294:	2100201c 	xori	r4,r4,128
   24298:	213fe004 	addi	r4,r4,-128
   2429c:	217ff726 	beq	r4,r5,2427c <__alt_data_end+0xf402427c>
   242a0:	a2000044 	addi	r8,r20,1
   242a4:	12000005 	stb	r8,0(r2)
   242a8:	003f4606 	br	23fc4 <__alt_data_end+0xf4023fc4>
   242ac:	d9000b17 	ldw	r4,44(sp)
   242b0:	2000c826 	beq	r4,zero,245d4 <_dtoa_r+0xcb8>
   242b4:	d9800317 	ldw	r6,12(sp)
   242b8:	00c00044 	movi	r3,1
   242bc:	1980f90e 	bge	r3,r6,246a4 <_dtoa_r+0xd88>
   242c0:	d8800617 	ldw	r2,24(sp)
   242c4:	d8c00a17 	ldw	r3,40(sp)
   242c8:	157fffc4 	addi	r21,r2,-1
   242cc:	1d41f316 	blt	r3,r21,24a9c <_dtoa_r+0x1180>
   242d0:	1d6bc83a 	sub	r21,r3,r21
   242d4:	d9c00617 	ldw	r7,24(sp)
   242d8:	3802aa16 	blt	r7,zero,24d84 <_dtoa_r+0x1468>
   242dc:	dd000817 	ldw	r20,32(sp)
   242e0:	d8800617 	ldw	r2,24(sp)
   242e4:	d8c00817 	ldw	r3,32(sp)
   242e8:	01400044 	movi	r5,1
   242ec:	e009883a 	mov	r4,fp
   242f0:	1887883a 	add	r3,r3,r2
   242f4:	d8c00815 	stw	r3,32(sp)
   242f8:	b0ad883a 	add	r22,r22,r2
   242fc:	00273c40 	call	273c4 <__i2b>
   24300:	1023883a 	mov	r17,r2
   24304:	a0000826 	beq	r20,zero,24328 <_dtoa_r+0xa0c>
   24308:	0580070e 	bge	zero,r22,24328 <_dtoa_r+0xa0c>
   2430c:	a005883a 	mov	r2,r20
   24310:	b500b916 	blt	r22,r20,245f8 <_dtoa_r+0xcdc>
   24314:	d9000817 	ldw	r4,32(sp)
   24318:	a0a9c83a 	sub	r20,r20,r2
   2431c:	b0adc83a 	sub	r22,r22,r2
   24320:	2089c83a 	sub	r4,r4,r2
   24324:	d9000815 	stw	r4,32(sp)
   24328:	d9800a17 	ldw	r6,40(sp)
   2432c:	0181810e 	bge	zero,r6,24934 <_dtoa_r+0x1018>
   24330:	d9c00b17 	ldw	r7,44(sp)
   24334:	3800b326 	beq	r7,zero,24604 <_dtoa_r+0xce8>
   24338:	a800b226 	beq	r21,zero,24604 <_dtoa_r+0xce8>
   2433c:	880b883a 	mov	r5,r17
   24340:	a80d883a 	mov	r6,r21
   24344:	e009883a 	mov	r4,fp
   24348:	00275f80 	call	275f8 <__pow5mult>
   2434c:	d9800917 	ldw	r6,36(sp)
   24350:	100b883a 	mov	r5,r2
   24354:	e009883a 	mov	r4,fp
   24358:	1023883a 	mov	r17,r2
   2435c:	00274000 	call	27400 <__multiply>
   24360:	1021883a 	mov	r16,r2
   24364:	d8800a17 	ldw	r2,40(sp)
   24368:	d9400917 	ldw	r5,36(sp)
   2436c:	e009883a 	mov	r4,fp
   24370:	1545c83a 	sub	r2,r2,r21
   24374:	d8800a15 	stw	r2,40(sp)
   24378:	00270600 	call	27060 <_Bfree>
   2437c:	d8c00a17 	ldw	r3,40(sp)
   24380:	18009f1e 	bne	r3,zero,24600 <_dtoa_r+0xce4>
   24384:	05c00044 	movi	r23,1
   24388:	e009883a 	mov	r4,fp
   2438c:	b80b883a 	mov	r5,r23
   24390:	00273c40 	call	273c4 <__i2b>
   24394:	d9000d17 	ldw	r4,52(sp)
   24398:	102b883a 	mov	r21,r2
   2439c:	2000ce26 	beq	r4,zero,246d8 <_dtoa_r+0xdbc>
   243a0:	200d883a 	mov	r6,r4
   243a4:	100b883a 	mov	r5,r2
   243a8:	e009883a 	mov	r4,fp
   243ac:	00275f80 	call	275f8 <__pow5mult>
   243b0:	d9800317 	ldw	r6,12(sp)
   243b4:	102b883a 	mov	r21,r2
   243b8:	b981810e 	bge	r23,r6,249c0 <_dtoa_r+0x10a4>
   243bc:	0027883a 	mov	r19,zero
   243c0:	a8800417 	ldw	r2,16(r21)
   243c4:	05c00804 	movi	r23,32
   243c8:	10800104 	addi	r2,r2,4
   243cc:	1085883a 	add	r2,r2,r2
   243d0:	1085883a 	add	r2,r2,r2
   243d4:	a885883a 	add	r2,r21,r2
   243d8:	11000017 	ldw	r4,0(r2)
   243dc:	00272ac0 	call	272ac <__hi0bits>
   243e0:	b885c83a 	sub	r2,r23,r2
   243e4:	1585883a 	add	r2,r2,r22
   243e8:	108007cc 	andi	r2,r2,31
   243ec:	1000b326 	beq	r2,zero,246bc <_dtoa_r+0xda0>
   243f0:	00c00804 	movi	r3,32
   243f4:	1887c83a 	sub	r3,r3,r2
   243f8:	01000104 	movi	r4,4
   243fc:	20c2cd0e 	bge	r4,r3,24f34 <_dtoa_r+0x1618>
   24400:	00c00704 	movi	r3,28
   24404:	1885c83a 	sub	r2,r3,r2
   24408:	d8c00817 	ldw	r3,32(sp)
   2440c:	a0a9883a 	add	r20,r20,r2
   24410:	b0ad883a 	add	r22,r22,r2
   24414:	1887883a 	add	r3,r3,r2
   24418:	d8c00815 	stw	r3,32(sp)
   2441c:	d9800817 	ldw	r6,32(sp)
   24420:	0180040e 	bge	zero,r6,24434 <_dtoa_r+0xb18>
   24424:	800b883a 	mov	r5,r16
   24428:	e009883a 	mov	r4,fp
   2442c:	00277380 	call	27738 <__lshift>
   24430:	1021883a 	mov	r16,r2
   24434:	0580050e 	bge	zero,r22,2444c <_dtoa_r+0xb30>
   24438:	a80b883a 	mov	r5,r21
   2443c:	b00d883a 	mov	r6,r22
   24440:	e009883a 	mov	r4,fp
   24444:	00277380 	call	27738 <__lshift>
   24448:	102b883a 	mov	r21,r2
   2444c:	d9c00e17 	ldw	r7,56(sp)
   24450:	3801211e 	bne	r7,zero,248d8 <_dtoa_r+0xfbc>
   24454:	d9800617 	ldw	r6,24(sp)
   24458:	0181380e 	bge	zero,r6,2493c <_dtoa_r+0x1020>
   2445c:	d8c00b17 	ldw	r3,44(sp)
   24460:	1800ab1e 	bne	r3,zero,24710 <_dtoa_r+0xdf4>
   24464:	dc800717 	ldw	r18,28(sp)
   24468:	dcc00617 	ldw	r19,24(sp)
   2446c:	9029883a 	mov	r20,r18
   24470:	00000206 	br	2447c <_dtoa_r+0xb60>
   24474:	00270880 	call	27088 <__multadd>
   24478:	1021883a 	mov	r16,r2
   2447c:	a80b883a 	mov	r5,r21
   24480:	8009883a 	mov	r4,r16
   24484:	002371c0 	call	2371c <quorem>
   24488:	10800c04 	addi	r2,r2,48
   2448c:	90800005 	stb	r2,0(r18)
   24490:	94800044 	addi	r18,r18,1
   24494:	9507c83a 	sub	r3,r18,r20
   24498:	000f883a 	mov	r7,zero
   2449c:	01800284 	movi	r6,10
   244a0:	800b883a 	mov	r5,r16
   244a4:	e009883a 	mov	r4,fp
   244a8:	1cfff216 	blt	r3,r19,24474 <__alt_data_end+0xf4024474>
   244ac:	1011883a 	mov	r8,r2
   244b0:	d8800617 	ldw	r2,24(sp)
   244b4:	0082370e 	bge	zero,r2,24d94 <_dtoa_r+0x1478>
   244b8:	d9000717 	ldw	r4,28(sp)
   244bc:	0025883a 	mov	r18,zero
   244c0:	20af883a 	add	r23,r4,r2
   244c4:	01800044 	movi	r6,1
   244c8:	800b883a 	mov	r5,r16
   244cc:	e009883a 	mov	r4,fp
   244d0:	da001715 	stw	r8,92(sp)
   244d4:	00277380 	call	27738 <__lshift>
   244d8:	a80b883a 	mov	r5,r21
   244dc:	1009883a 	mov	r4,r2
   244e0:	d8800915 	stw	r2,36(sp)
   244e4:	00278800 	call	27880 <__mcmp>
   244e8:	da001717 	ldw	r8,92(sp)
   244ec:	0081800e 	bge	zero,r2,24af0 <_dtoa_r+0x11d4>
   244f0:	b93fffc3 	ldbu	r4,-1(r23)
   244f4:	b8bfffc4 	addi	r2,r23,-1
   244f8:	1007883a 	mov	r3,r2
   244fc:	01800e44 	movi	r6,57
   24500:	d9c00717 	ldw	r7,28(sp)
   24504:	00000506 	br	2451c <_dtoa_r+0xc00>
   24508:	18ffffc4 	addi	r3,r3,-1
   2450c:	11c12326 	beq	r2,r7,2499c <_dtoa_r+0x1080>
   24510:	19000003 	ldbu	r4,0(r3)
   24514:	102f883a 	mov	r23,r2
   24518:	10bfffc4 	addi	r2,r2,-1
   2451c:	21403fcc 	andi	r5,r4,255
   24520:	2940201c 	xori	r5,r5,128
   24524:	297fe004 	addi	r5,r5,-128
   24528:	29bff726 	beq	r5,r6,24508 <__alt_data_end+0xf4024508>
   2452c:	21000044 	addi	r4,r4,1
   24530:	11000005 	stb	r4,0(r2)
   24534:	a80b883a 	mov	r5,r21
   24538:	e009883a 	mov	r4,fp
   2453c:	00270600 	call	27060 <_Bfree>
   24540:	883ea026 	beq	r17,zero,23fc4 <__alt_data_end+0xf4023fc4>
   24544:	90000426 	beq	r18,zero,24558 <_dtoa_r+0xc3c>
   24548:	94400326 	beq	r18,r17,24558 <_dtoa_r+0xc3c>
   2454c:	900b883a 	mov	r5,r18
   24550:	e009883a 	mov	r4,fp
   24554:	00270600 	call	27060 <_Bfree>
   24558:	880b883a 	mov	r5,r17
   2455c:	e009883a 	mov	r4,fp
   24560:	00270600 	call	27060 <_Bfree>
   24564:	003e9706 	br	23fc4 <__alt_data_end+0xf4023fc4>
   24568:	01800044 	movi	r6,1
   2456c:	d9800e15 	stw	r6,56(sp)
   24570:	003d9606 	br	23bcc <__alt_data_end+0xf4023bcc>
   24574:	d8800817 	ldw	r2,32(sp)
   24578:	d8c00517 	ldw	r3,20(sp)
   2457c:	d8000d15 	stw	zero,52(sp)
   24580:	10c5c83a 	sub	r2,r2,r3
   24584:	00c9c83a 	sub	r4,zero,r3
   24588:	d8800815 	stw	r2,32(sp)
   2458c:	d9000a15 	stw	r4,40(sp)
   24590:	003d9706 	br	23bf0 <__alt_data_end+0xf4023bf0>
   24594:	05adc83a 	sub	r22,zero,r22
   24598:	dd800815 	stw	r22,32(sp)
   2459c:	002d883a 	mov	r22,zero
   245a0:	003d8e06 	br	23bdc <__alt_data_end+0xf4023bdc>
   245a4:	d9000517 	ldw	r4,20(sp)
   245a8:	002d8580 	call	2d858 <__floatsidf>
   245ac:	100d883a 	mov	r6,r2
   245b0:	180f883a 	mov	r7,r3
   245b4:	a009883a 	mov	r4,r20
   245b8:	880b883a 	mov	r5,r17
   245bc:	002c56c0 	call	2c56c <__eqdf2>
   245c0:	103d7126 	beq	r2,zero,23b88 <__alt_data_end+0xf4023b88>
   245c4:	d9c00517 	ldw	r7,20(sp)
   245c8:	39ffffc4 	addi	r7,r7,-1
   245cc:	d9c00515 	stw	r7,20(sp)
   245d0:	003d6d06 	br	23b88 <__alt_data_end+0xf4023b88>
   245d4:	dd400a17 	ldw	r21,40(sp)
   245d8:	dd000817 	ldw	r20,32(sp)
   245dc:	0023883a 	mov	r17,zero
   245e0:	003f4806 	br	24304 <__alt_data_end+0xf4024304>
   245e4:	10e3c83a 	sub	r17,r2,r3
   245e8:	9448983a 	sll	r4,r18,r17
   245ec:	003d3206 	br	23ab8 <__alt_data_end+0xf4023ab8>
   245f0:	d8000e15 	stw	zero,56(sp)
   245f4:	003d7506 	br	23bcc <__alt_data_end+0xf4023bcc>
   245f8:	b005883a 	mov	r2,r22
   245fc:	003f4506 	br	24314 <__alt_data_end+0xf4024314>
   24600:	dc000915 	stw	r16,36(sp)
   24604:	d9800a17 	ldw	r6,40(sp)
   24608:	d9400917 	ldw	r5,36(sp)
   2460c:	e009883a 	mov	r4,fp
   24610:	00275f80 	call	275f8 <__pow5mult>
   24614:	1021883a 	mov	r16,r2
   24618:	003f5a06 	br	24384 <__alt_data_end+0xf4024384>
   2461c:	01c00044 	movi	r7,1
   24620:	d9c00b15 	stw	r7,44(sp)
   24624:	d8802217 	ldw	r2,136(sp)
   24628:	0081280e 	bge	zero,r2,24acc <_dtoa_r+0x11b0>
   2462c:	100d883a 	mov	r6,r2
   24630:	1021883a 	mov	r16,r2
   24634:	d8800c15 	stw	r2,48(sp)
   24638:	d8800615 	stw	r2,24(sp)
   2463c:	003d8806 	br	23c60 <__alt_data_end+0xf4023c60>
   24640:	d8800617 	ldw	r2,24(sp)
   24644:	00be9b16 	blt	zero,r2,240b4 <__alt_data_end+0xf40240b4>
   24648:	10010f1e 	bne	r2,zero,24a88 <_dtoa_r+0x116c>
   2464c:	880b883a 	mov	r5,r17
   24650:	000d883a 	mov	r6,zero
   24654:	01d00534 	movhi	r7,16404
   24658:	8009883a 	mov	r4,r16
   2465c:	002c7c40 	call	2c7c4 <__muldf3>
   24660:	900d883a 	mov	r6,r18
   24664:	980f883a 	mov	r7,r19
   24668:	1009883a 	mov	r4,r2
   2466c:	180b883a 	mov	r5,r3
   24670:	002c5f40 	call	2c5f4 <__gedf2>
   24674:	002b883a 	mov	r21,zero
   24678:	0023883a 	mov	r17,zero
   2467c:	1000bf16 	blt	r2,zero,2497c <_dtoa_r+0x1060>
   24680:	d9802217 	ldw	r6,136(sp)
   24684:	ddc00717 	ldw	r23,28(sp)
   24688:	018c303a 	nor	r6,zero,r6
   2468c:	d9800515 	stw	r6,20(sp)
   24690:	a80b883a 	mov	r5,r21
   24694:	e009883a 	mov	r4,fp
   24698:	00270600 	call	27060 <_Bfree>
   2469c:	883e4926 	beq	r17,zero,23fc4 <__alt_data_end+0xf4023fc4>
   246a0:	003fad06 	br	24558 <__alt_data_end+0xf4024558>
   246a4:	d9c01117 	ldw	r7,68(sp)
   246a8:	3801bc26 	beq	r7,zero,24d9c <_dtoa_r+0x1480>
   246ac:	10810cc4 	addi	r2,r2,1075
   246b0:	dd400a17 	ldw	r21,40(sp)
   246b4:	dd000817 	ldw	r20,32(sp)
   246b8:	003f0a06 	br	242e4 <__alt_data_end+0xf40242e4>
   246bc:	00800704 	movi	r2,28
   246c0:	d9000817 	ldw	r4,32(sp)
   246c4:	a0a9883a 	add	r20,r20,r2
   246c8:	b0ad883a 	add	r22,r22,r2
   246cc:	2089883a 	add	r4,r4,r2
   246d0:	d9000815 	stw	r4,32(sp)
   246d4:	003f5106 	br	2441c <__alt_data_end+0xf402441c>
   246d8:	d8c00317 	ldw	r3,12(sp)
   246dc:	b8c1fc0e 	bge	r23,r3,24ed0 <_dtoa_r+0x15b4>
   246e0:	0027883a 	mov	r19,zero
   246e4:	b805883a 	mov	r2,r23
   246e8:	003f3e06 	br	243e4 <__alt_data_end+0xf40243e4>
   246ec:	880b883a 	mov	r5,r17
   246f0:	e009883a 	mov	r4,fp
   246f4:	000f883a 	mov	r7,zero
   246f8:	01800284 	movi	r6,10
   246fc:	00270880 	call	27088 <__multadd>
   24700:	d9000c17 	ldw	r4,48(sp)
   24704:	1023883a 	mov	r17,r2
   24708:	0102040e 	bge	zero,r4,24f1c <_dtoa_r+0x1600>
   2470c:	d9000615 	stw	r4,24(sp)
   24710:	0500050e 	bge	zero,r20,24728 <_dtoa_r+0xe0c>
   24714:	880b883a 	mov	r5,r17
   24718:	a00d883a 	mov	r6,r20
   2471c:	e009883a 	mov	r4,fp
   24720:	00277380 	call	27738 <__lshift>
   24724:	1023883a 	mov	r17,r2
   24728:	9801241e 	bne	r19,zero,24bbc <_dtoa_r+0x12a0>
   2472c:	8829883a 	mov	r20,r17
   24730:	d9000617 	ldw	r4,24(sp)
   24734:	dcc00717 	ldw	r19,28(sp)
   24738:	9480004c 	andi	r18,r18,1
   2473c:	20bfffc4 	addi	r2,r4,-1
   24740:	9885883a 	add	r2,r19,r2
   24744:	d8800415 	stw	r2,16(sp)
   24748:	dc800615 	stw	r18,24(sp)
   2474c:	a80b883a 	mov	r5,r21
   24750:	8009883a 	mov	r4,r16
   24754:	002371c0 	call	2371c <quorem>
   24758:	880b883a 	mov	r5,r17
   2475c:	8009883a 	mov	r4,r16
   24760:	102f883a 	mov	r23,r2
   24764:	00278800 	call	27880 <__mcmp>
   24768:	a80b883a 	mov	r5,r21
   2476c:	a00d883a 	mov	r6,r20
   24770:	e009883a 	mov	r4,fp
   24774:	102d883a 	mov	r22,r2
   24778:	00278e00 	call	278e0 <__mdiff>
   2477c:	1007883a 	mov	r3,r2
   24780:	10800317 	ldw	r2,12(r2)
   24784:	bc800c04 	addi	r18,r23,48
   24788:	180b883a 	mov	r5,r3
   2478c:	10004e1e 	bne	r2,zero,248c8 <_dtoa_r+0xfac>
   24790:	8009883a 	mov	r4,r16
   24794:	d8c01615 	stw	r3,88(sp)
   24798:	00278800 	call	27880 <__mcmp>
   2479c:	d8c01617 	ldw	r3,88(sp)
   247a0:	e009883a 	mov	r4,fp
   247a4:	d8801615 	stw	r2,88(sp)
   247a8:	180b883a 	mov	r5,r3
   247ac:	00270600 	call	27060 <_Bfree>
   247b0:	d8801617 	ldw	r2,88(sp)
   247b4:	1000041e 	bne	r2,zero,247c8 <_dtoa_r+0xeac>
   247b8:	d9800317 	ldw	r6,12(sp)
   247bc:	3000021e 	bne	r6,zero,247c8 <_dtoa_r+0xeac>
   247c0:	d8c00617 	ldw	r3,24(sp)
   247c4:	18003726 	beq	r3,zero,248a4 <_dtoa_r+0xf88>
   247c8:	b0002016 	blt	r22,zero,2484c <_dtoa_r+0xf30>
   247cc:	b000041e 	bne	r22,zero,247e0 <_dtoa_r+0xec4>
   247d0:	d9000317 	ldw	r4,12(sp)
   247d4:	2000021e 	bne	r4,zero,247e0 <_dtoa_r+0xec4>
   247d8:	d8c00617 	ldw	r3,24(sp)
   247dc:	18001b26 	beq	r3,zero,2484c <_dtoa_r+0xf30>
   247e0:	00810716 	blt	zero,r2,24c00 <_dtoa_r+0x12e4>
   247e4:	d8c00417 	ldw	r3,16(sp)
   247e8:	9d800044 	addi	r22,r19,1
   247ec:	9c800005 	stb	r18,0(r19)
   247f0:	b02f883a 	mov	r23,r22
   247f4:	98c10626 	beq	r19,r3,24c10 <_dtoa_r+0x12f4>
   247f8:	800b883a 	mov	r5,r16
   247fc:	000f883a 	mov	r7,zero
   24800:	01800284 	movi	r6,10
   24804:	e009883a 	mov	r4,fp
   24808:	00270880 	call	27088 <__multadd>
   2480c:	1021883a 	mov	r16,r2
   24810:	000f883a 	mov	r7,zero
   24814:	01800284 	movi	r6,10
   24818:	880b883a 	mov	r5,r17
   2481c:	e009883a 	mov	r4,fp
   24820:	8d002526 	beq	r17,r20,248b8 <_dtoa_r+0xf9c>
   24824:	00270880 	call	27088 <__multadd>
   24828:	a00b883a 	mov	r5,r20
   2482c:	000f883a 	mov	r7,zero
   24830:	01800284 	movi	r6,10
   24834:	e009883a 	mov	r4,fp
   24838:	1023883a 	mov	r17,r2
   2483c:	00270880 	call	27088 <__multadd>
   24840:	1029883a 	mov	r20,r2
   24844:	b027883a 	mov	r19,r22
   24848:	003fc006 	br	2474c <__alt_data_end+0xf402474c>
   2484c:	9011883a 	mov	r8,r18
   24850:	00800e0e 	bge	zero,r2,2488c <_dtoa_r+0xf70>
   24854:	800b883a 	mov	r5,r16
   24858:	01800044 	movi	r6,1
   2485c:	e009883a 	mov	r4,fp
   24860:	da001715 	stw	r8,92(sp)
   24864:	00277380 	call	27738 <__lshift>
   24868:	a80b883a 	mov	r5,r21
   2486c:	1009883a 	mov	r4,r2
   24870:	1021883a 	mov	r16,r2
   24874:	00278800 	call	27880 <__mcmp>
   24878:	da001717 	ldw	r8,92(sp)
   2487c:	0081960e 	bge	zero,r2,24ed8 <_dtoa_r+0x15bc>
   24880:	00800e44 	movi	r2,57
   24884:	40817026 	beq	r8,r2,24e48 <_dtoa_r+0x152c>
   24888:	ba000c44 	addi	r8,r23,49
   2488c:	8825883a 	mov	r18,r17
   24890:	9dc00044 	addi	r23,r19,1
   24894:	9a000005 	stb	r8,0(r19)
   24898:	a023883a 	mov	r17,r20
   2489c:	dc000915 	stw	r16,36(sp)
   248a0:	003f2406 	br	24534 <__alt_data_end+0xf4024534>
   248a4:	00800e44 	movi	r2,57
   248a8:	9011883a 	mov	r8,r18
   248ac:	90816626 	beq	r18,r2,24e48 <_dtoa_r+0x152c>
   248b0:	05bff516 	blt	zero,r22,24888 <__alt_data_end+0xf4024888>
   248b4:	003ff506 	br	2488c <__alt_data_end+0xf402488c>
   248b8:	00270880 	call	27088 <__multadd>
   248bc:	1023883a 	mov	r17,r2
   248c0:	1029883a 	mov	r20,r2
   248c4:	003fdf06 	br	24844 <__alt_data_end+0xf4024844>
   248c8:	e009883a 	mov	r4,fp
   248cc:	00270600 	call	27060 <_Bfree>
   248d0:	00800044 	movi	r2,1
   248d4:	003fbc06 	br	247c8 <__alt_data_end+0xf40247c8>
   248d8:	a80b883a 	mov	r5,r21
   248dc:	8009883a 	mov	r4,r16
   248e0:	00278800 	call	27880 <__mcmp>
   248e4:	103edb0e 	bge	r2,zero,24454 <__alt_data_end+0xf4024454>
   248e8:	800b883a 	mov	r5,r16
   248ec:	000f883a 	mov	r7,zero
   248f0:	01800284 	movi	r6,10
   248f4:	e009883a 	mov	r4,fp
   248f8:	00270880 	call	27088 <__multadd>
   248fc:	1021883a 	mov	r16,r2
   24900:	d8800517 	ldw	r2,20(sp)
   24904:	d8c00b17 	ldw	r3,44(sp)
   24908:	10bfffc4 	addi	r2,r2,-1
   2490c:	d8800515 	stw	r2,20(sp)
   24910:	183f761e 	bne	r3,zero,246ec <__alt_data_end+0xf40246ec>
   24914:	d9000c17 	ldw	r4,48(sp)
   24918:	0101730e 	bge	zero,r4,24ee8 <_dtoa_r+0x15cc>
   2491c:	d9000615 	stw	r4,24(sp)
   24920:	003ed006 	br	24464 <__alt_data_end+0xf4024464>
   24924:	00800084 	movi	r2,2
   24928:	3081861e 	bne	r6,r2,24f44 <_dtoa_r+0x1628>
   2492c:	d8000b15 	stw	zero,44(sp)
   24930:	003f3c06 	br	24624 <__alt_data_end+0xf4024624>
   24934:	dc000917 	ldw	r16,36(sp)
   24938:	003e9206 	br	24384 <__alt_data_end+0xf4024384>
   2493c:	d9c00317 	ldw	r7,12(sp)
   24940:	00800084 	movi	r2,2
   24944:	11fec50e 	bge	r2,r7,2445c <__alt_data_end+0xf402445c>
   24948:	d9000617 	ldw	r4,24(sp)
   2494c:	20013c1e 	bne	r4,zero,24e40 <_dtoa_r+0x1524>
   24950:	a80b883a 	mov	r5,r21
   24954:	000f883a 	mov	r7,zero
   24958:	01800144 	movi	r6,5
   2495c:	e009883a 	mov	r4,fp
   24960:	00270880 	call	27088 <__multadd>
   24964:	100b883a 	mov	r5,r2
   24968:	8009883a 	mov	r4,r16
   2496c:	102b883a 	mov	r21,r2
   24970:	00278800 	call	27880 <__mcmp>
   24974:	dc000915 	stw	r16,36(sp)
   24978:	00bf410e 	bge	zero,r2,24680 <__alt_data_end+0xf4024680>
   2497c:	d9c00717 	ldw	r7,28(sp)
   24980:	00800c44 	movi	r2,49
   24984:	38800005 	stb	r2,0(r7)
   24988:	d8800517 	ldw	r2,20(sp)
   2498c:	3dc00044 	addi	r23,r7,1
   24990:	10800044 	addi	r2,r2,1
   24994:	d8800515 	stw	r2,20(sp)
   24998:	003f3d06 	br	24690 <__alt_data_end+0xf4024690>
   2499c:	d9800517 	ldw	r6,20(sp)
   249a0:	d9c00717 	ldw	r7,28(sp)
   249a4:	00800c44 	movi	r2,49
   249a8:	31800044 	addi	r6,r6,1
   249ac:	d9800515 	stw	r6,20(sp)
   249b0:	38800005 	stb	r2,0(r7)
   249b4:	003edf06 	br	24534 <__alt_data_end+0xf4024534>
   249b8:	d8000b15 	stw	zero,44(sp)
   249bc:	003c9f06 	br	23c3c <__alt_data_end+0xf4023c3c>
   249c0:	903e7e1e 	bne	r18,zero,243bc <__alt_data_end+0xf40243bc>
   249c4:	00800434 	movhi	r2,16
   249c8:	10bfffc4 	addi	r2,r2,-1
   249cc:	9884703a 	and	r2,r19,r2
   249d0:	1000ea1e 	bne	r2,zero,24d7c <_dtoa_r+0x1460>
   249d4:	9cdffc2c 	andhi	r19,r19,32752
   249d8:	9800e826 	beq	r19,zero,24d7c <_dtoa_r+0x1460>
   249dc:	d9c00817 	ldw	r7,32(sp)
   249e0:	b5800044 	addi	r22,r22,1
   249e4:	04c00044 	movi	r19,1
   249e8:	39c00044 	addi	r7,r7,1
   249ec:	d9c00815 	stw	r7,32(sp)
   249f0:	d8800d17 	ldw	r2,52(sp)
   249f4:	103e721e 	bne	r2,zero,243c0 <__alt_data_end+0xf40243c0>
   249f8:	00800044 	movi	r2,1
   249fc:	003e7906 	br	243e4 <__alt_data_end+0xf40243e4>
   24a00:	8009883a 	mov	r4,r16
   24a04:	002d8580 	call	2d858 <__floatsidf>
   24a08:	d9800f17 	ldw	r6,60(sp)
   24a0c:	d9c01017 	ldw	r7,64(sp)
   24a10:	1009883a 	mov	r4,r2
   24a14:	180b883a 	mov	r5,r3
   24a18:	002c7c40 	call	2c7c4 <__muldf3>
   24a1c:	000d883a 	mov	r6,zero
   24a20:	01d00734 	movhi	r7,16412
   24a24:	1009883a 	mov	r4,r2
   24a28:	180b883a 	mov	r5,r3
   24a2c:	002b3d80 	call	2b3d8 <__adddf3>
   24a30:	047f3034 	movhi	r17,64704
   24a34:	1021883a 	mov	r16,r2
   24a38:	1c63883a 	add	r17,r3,r17
   24a3c:	d9000f17 	ldw	r4,60(sp)
   24a40:	d9401017 	ldw	r5,64(sp)
   24a44:	000d883a 	mov	r6,zero
   24a48:	01d00534 	movhi	r7,16404
   24a4c:	002cedc0 	call	2cedc <__subdf3>
   24a50:	800d883a 	mov	r6,r16
   24a54:	880f883a 	mov	r7,r17
   24a58:	1009883a 	mov	r4,r2
   24a5c:	180b883a 	mov	r5,r3
   24a60:	102b883a 	mov	r21,r2
   24a64:	1829883a 	mov	r20,r3
   24a68:	002c5f40 	call	2c5f4 <__gedf2>
   24a6c:	00806c16 	blt	zero,r2,24c20 <_dtoa_r+0x1304>
   24a70:	89e0003c 	xorhi	r7,r17,32768
   24a74:	800d883a 	mov	r6,r16
   24a78:	a809883a 	mov	r4,r21
   24a7c:	a00b883a 	mov	r5,r20
   24a80:	002c6d00 	call	2c6d0 <__ledf2>
   24a84:	103d7e0e 	bge	r2,zero,24080 <__alt_data_end+0xf4024080>
   24a88:	002b883a 	mov	r21,zero
   24a8c:	0023883a 	mov	r17,zero
   24a90:	003efb06 	br	24680 <__alt_data_end+0xf4024680>
   24a94:	d8800717 	ldw	r2,28(sp)
   24a98:	003bd006 	br	239dc <__alt_data_end+0xf40239dc>
   24a9c:	d9000a17 	ldw	r4,40(sp)
   24aa0:	d9800d17 	ldw	r6,52(sp)
   24aa4:	dd400a15 	stw	r21,40(sp)
   24aa8:	a905c83a 	sub	r2,r21,r4
   24aac:	308d883a 	add	r6,r6,r2
   24ab0:	d9800d15 	stw	r6,52(sp)
   24ab4:	002b883a 	mov	r21,zero
   24ab8:	003e0606 	br	242d4 <__alt_data_end+0xf40242d4>
   24abc:	9023883a 	mov	r17,r18
   24ac0:	9829883a 	mov	r20,r19
   24ac4:	04000084 	movi	r16,2
   24ac8:	003c9206 	br	23d14 <__alt_data_end+0xf4023d14>
   24acc:	04000044 	movi	r16,1
   24ad0:	dc000c15 	stw	r16,48(sp)
   24ad4:	dc000615 	stw	r16,24(sp)
   24ad8:	dc002215 	stw	r16,136(sp)
   24adc:	e0001115 	stw	zero,68(fp)
   24ae0:	000b883a 	mov	r5,zero
   24ae4:	003c6906 	br	23c8c <__alt_data_end+0xf4023c8c>
   24ae8:	3021883a 	mov	r16,r6
   24aec:	003ffb06 	br	24adc <__alt_data_end+0xf4024adc>
   24af0:	1000021e 	bne	r2,zero,24afc <_dtoa_r+0x11e0>
   24af4:	4200004c 	andi	r8,r8,1
   24af8:	403e7d1e 	bne	r8,zero,244f0 <__alt_data_end+0xf40244f0>
   24afc:	01000c04 	movi	r4,48
   24b00:	00000106 	br	24b08 <_dtoa_r+0x11ec>
   24b04:	102f883a 	mov	r23,r2
   24b08:	b8bfffc4 	addi	r2,r23,-1
   24b0c:	10c00007 	ldb	r3,0(r2)
   24b10:	193ffc26 	beq	r3,r4,24b04 <__alt_data_end+0xf4024b04>
   24b14:	003e8706 	br	24534 <__alt_data_end+0xf4024534>
   24b18:	d8800517 	ldw	r2,20(sp)
   24b1c:	00a3c83a 	sub	r17,zero,r2
   24b20:	8800a426 	beq	r17,zero,24db4 <_dtoa_r+0x1498>
   24b24:	888003cc 	andi	r2,r17,15
   24b28:	100490fa 	slli	r2,r2,3
   24b2c:	00c000f4 	movhi	r3,3
   24b30:	18c6a904 	addi	r3,r3,6820
   24b34:	1885883a 	add	r2,r3,r2
   24b38:	11800017 	ldw	r6,0(r2)
   24b3c:	11c00117 	ldw	r7,4(r2)
   24b40:	9009883a 	mov	r4,r18
   24b44:	980b883a 	mov	r5,r19
   24b48:	8823d13a 	srai	r17,r17,4
   24b4c:	002c7c40 	call	2c7c4 <__muldf3>
   24b50:	d8800f15 	stw	r2,60(sp)
   24b54:	d8c01015 	stw	r3,64(sp)
   24b58:	8800e826 	beq	r17,zero,24efc <_dtoa_r+0x15e0>
   24b5c:	050000f4 	movhi	r20,3
   24b60:	a5069f04 	addi	r20,r20,6780
   24b64:	04000084 	movi	r16,2
   24b68:	8980004c 	andi	r6,r17,1
   24b6c:	1009883a 	mov	r4,r2
   24b70:	8823d07a 	srai	r17,r17,1
   24b74:	180b883a 	mov	r5,r3
   24b78:	30000426 	beq	r6,zero,24b8c <_dtoa_r+0x1270>
   24b7c:	a1800017 	ldw	r6,0(r20)
   24b80:	a1c00117 	ldw	r7,4(r20)
   24b84:	84000044 	addi	r16,r16,1
   24b88:	002c7c40 	call	2c7c4 <__muldf3>
   24b8c:	a5000204 	addi	r20,r20,8
   24b90:	883ff51e 	bne	r17,zero,24b68 <__alt_data_end+0xf4024b68>
   24b94:	d8800f15 	stw	r2,60(sp)
   24b98:	d8c01015 	stw	r3,64(sp)
   24b9c:	003c7606 	br	23d78 <__alt_data_end+0xf4023d78>
   24ba0:	00c00c04 	movi	r3,48
   24ba4:	10c00005 	stb	r3,0(r2)
   24ba8:	d8c00517 	ldw	r3,20(sp)
   24bac:	bd3fffc3 	ldbu	r20,-1(r23)
   24bb0:	18c00044 	addi	r3,r3,1
   24bb4:	d8c00515 	stw	r3,20(sp)
   24bb8:	003db906 	br	242a0 <__alt_data_end+0xf40242a0>
   24bbc:	89400117 	ldw	r5,4(r17)
   24bc0:	e009883a 	mov	r4,fp
   24bc4:	0026fb80 	call	26fb8 <_Balloc>
   24bc8:	89800417 	ldw	r6,16(r17)
   24bcc:	89400304 	addi	r5,r17,12
   24bd0:	11000304 	addi	r4,r2,12
   24bd4:	31800084 	addi	r6,r6,2
   24bd8:	318d883a 	add	r6,r6,r6
   24bdc:	318d883a 	add	r6,r6,r6
   24be0:	1027883a 	mov	r19,r2
   24be4:	0026bec0 	call	26bec <memcpy>
   24be8:	01800044 	movi	r6,1
   24bec:	980b883a 	mov	r5,r19
   24bf0:	e009883a 	mov	r4,fp
   24bf4:	00277380 	call	27738 <__lshift>
   24bf8:	1029883a 	mov	r20,r2
   24bfc:	003ecc06 	br	24730 <__alt_data_end+0xf4024730>
   24c00:	00800e44 	movi	r2,57
   24c04:	90809026 	beq	r18,r2,24e48 <_dtoa_r+0x152c>
   24c08:	92000044 	addi	r8,r18,1
   24c0c:	003f1f06 	br	2488c <__alt_data_end+0xf402488c>
   24c10:	9011883a 	mov	r8,r18
   24c14:	8825883a 	mov	r18,r17
   24c18:	a023883a 	mov	r17,r20
   24c1c:	003e2906 	br	244c4 <__alt_data_end+0xf40244c4>
   24c20:	002b883a 	mov	r21,zero
   24c24:	0023883a 	mov	r17,zero
   24c28:	003f5406 	br	2497c <__alt_data_end+0xf402497c>
   24c2c:	61bfffc4 	addi	r6,r12,-1
   24c30:	300490fa 	slli	r2,r6,3
   24c34:	00c000f4 	movhi	r3,3
   24c38:	18c6a904 	addi	r3,r3,6820
   24c3c:	1885883a 	add	r2,r3,r2
   24c40:	11000017 	ldw	r4,0(r2)
   24c44:	11400117 	ldw	r5,4(r2)
   24c48:	d8800717 	ldw	r2,28(sp)
   24c4c:	880f883a 	mov	r7,r17
   24c50:	d9801215 	stw	r6,72(sp)
   24c54:	800d883a 	mov	r6,r16
   24c58:	db001615 	stw	r12,88(sp)
   24c5c:	15c00044 	addi	r23,r2,1
   24c60:	002c7c40 	call	2c7c4 <__muldf3>
   24c64:	d9401017 	ldw	r5,64(sp)
   24c68:	d9000f17 	ldw	r4,60(sp)
   24c6c:	d8c01515 	stw	r3,84(sp)
   24c70:	d8801415 	stw	r2,80(sp)
   24c74:	002d7d80 	call	2d7d8 <__fixdfsi>
   24c78:	1009883a 	mov	r4,r2
   24c7c:	1021883a 	mov	r16,r2
   24c80:	002d8580 	call	2d858 <__floatsidf>
   24c84:	d9000f17 	ldw	r4,60(sp)
   24c88:	d9401017 	ldw	r5,64(sp)
   24c8c:	100d883a 	mov	r6,r2
   24c90:	180f883a 	mov	r7,r3
   24c94:	002cedc0 	call	2cedc <__subdf3>
   24c98:	1829883a 	mov	r20,r3
   24c9c:	d8c00717 	ldw	r3,28(sp)
   24ca0:	84000c04 	addi	r16,r16,48
   24ca4:	1023883a 	mov	r17,r2
   24ca8:	1c000005 	stb	r16,0(r3)
   24cac:	db001617 	ldw	r12,88(sp)
   24cb0:	00800044 	movi	r2,1
   24cb4:	60802226 	beq	r12,r2,24d40 <_dtoa_r+0x1424>
   24cb8:	d9c00717 	ldw	r7,28(sp)
   24cbc:	8805883a 	mov	r2,r17
   24cc0:	b82b883a 	mov	r21,r23
   24cc4:	3b19883a 	add	r12,r7,r12
   24cc8:	6023883a 	mov	r17,r12
   24ccc:	a007883a 	mov	r3,r20
   24cd0:	dc800f15 	stw	r18,60(sp)
   24cd4:	000d883a 	mov	r6,zero
   24cd8:	01d00934 	movhi	r7,16420
   24cdc:	1009883a 	mov	r4,r2
   24ce0:	180b883a 	mov	r5,r3
   24ce4:	002c7c40 	call	2c7c4 <__muldf3>
   24ce8:	180b883a 	mov	r5,r3
   24cec:	1009883a 	mov	r4,r2
   24cf0:	1829883a 	mov	r20,r3
   24cf4:	1025883a 	mov	r18,r2
   24cf8:	002d7d80 	call	2d7d8 <__fixdfsi>
   24cfc:	1009883a 	mov	r4,r2
   24d00:	1021883a 	mov	r16,r2
   24d04:	002d8580 	call	2d858 <__floatsidf>
   24d08:	100d883a 	mov	r6,r2
   24d0c:	180f883a 	mov	r7,r3
   24d10:	9009883a 	mov	r4,r18
   24d14:	a00b883a 	mov	r5,r20
   24d18:	84000c04 	addi	r16,r16,48
   24d1c:	002cedc0 	call	2cedc <__subdf3>
   24d20:	ad400044 	addi	r21,r21,1
   24d24:	ac3fffc5 	stb	r16,-1(r21)
   24d28:	ac7fea1e 	bne	r21,r17,24cd4 <__alt_data_end+0xf4024cd4>
   24d2c:	1023883a 	mov	r17,r2
   24d30:	d8801217 	ldw	r2,72(sp)
   24d34:	dc800f17 	ldw	r18,60(sp)
   24d38:	1829883a 	mov	r20,r3
   24d3c:	b8af883a 	add	r23,r23,r2
   24d40:	d9001417 	ldw	r4,80(sp)
   24d44:	d9401517 	ldw	r5,84(sp)
   24d48:	000d883a 	mov	r6,zero
   24d4c:	01cff834 	movhi	r7,16352
   24d50:	002b3d80 	call	2b3d8 <__adddf3>
   24d54:	880d883a 	mov	r6,r17
   24d58:	a00f883a 	mov	r7,r20
   24d5c:	1009883a 	mov	r4,r2
   24d60:	180b883a 	mov	r5,r3
   24d64:	002c6d00 	call	2c6d0 <__ledf2>
   24d68:	10003e0e 	bge	r2,zero,24e64 <_dtoa_r+0x1548>
   24d6c:	d9001317 	ldw	r4,76(sp)
   24d70:	bd3fffc3 	ldbu	r20,-1(r23)
   24d74:	d9000515 	stw	r4,20(sp)
   24d78:	003d3b06 	br	24268 <__alt_data_end+0xf4024268>
   24d7c:	0027883a 	mov	r19,zero
   24d80:	003f1b06 	br	249f0 <__alt_data_end+0xf40249f0>
   24d84:	d8800817 	ldw	r2,32(sp)
   24d88:	11e9c83a 	sub	r20,r2,r7
   24d8c:	0005883a 	mov	r2,zero
   24d90:	003d5406 	br	242e4 <__alt_data_end+0xf40242e4>
   24d94:	00800044 	movi	r2,1
   24d98:	003dc706 	br	244b8 <__alt_data_end+0xf40244b8>
   24d9c:	d8c00217 	ldw	r3,8(sp)
   24da0:	00800d84 	movi	r2,54
   24da4:	dd400a17 	ldw	r21,40(sp)
   24da8:	10c5c83a 	sub	r2,r2,r3
   24dac:	dd000817 	ldw	r20,32(sp)
   24db0:	003d4c06 	br	242e4 <__alt_data_end+0xf40242e4>
   24db4:	dc800f15 	stw	r18,60(sp)
   24db8:	dcc01015 	stw	r19,64(sp)
   24dbc:	04000084 	movi	r16,2
   24dc0:	003bed06 	br	23d78 <__alt_data_end+0xf4023d78>
   24dc4:	d9000617 	ldw	r4,24(sp)
   24dc8:	203f0d26 	beq	r4,zero,24a00 <__alt_data_end+0xf4024a00>
   24dcc:	d9800c17 	ldw	r6,48(sp)
   24dd0:	01bcab0e 	bge	zero,r6,24080 <__alt_data_end+0xf4024080>
   24dd4:	d9401017 	ldw	r5,64(sp)
   24dd8:	d9000f17 	ldw	r4,60(sp)
   24ddc:	000d883a 	mov	r6,zero
   24de0:	01d00934 	movhi	r7,16420
   24de4:	002c7c40 	call	2c7c4 <__muldf3>
   24de8:	81000044 	addi	r4,r16,1
   24dec:	d8800f15 	stw	r2,60(sp)
   24df0:	d8c01015 	stw	r3,64(sp)
   24df4:	002d8580 	call	2d858 <__floatsidf>
   24df8:	d9800f17 	ldw	r6,60(sp)
   24dfc:	d9c01017 	ldw	r7,64(sp)
   24e00:	1009883a 	mov	r4,r2
   24e04:	180b883a 	mov	r5,r3
   24e08:	002c7c40 	call	2c7c4 <__muldf3>
   24e0c:	01d00734 	movhi	r7,16412
   24e10:	000d883a 	mov	r6,zero
   24e14:	1009883a 	mov	r4,r2
   24e18:	180b883a 	mov	r5,r3
   24e1c:	002b3d80 	call	2b3d8 <__adddf3>
   24e20:	d9c00517 	ldw	r7,20(sp)
   24e24:	047f3034 	movhi	r17,64704
   24e28:	1021883a 	mov	r16,r2
   24e2c:	39ffffc4 	addi	r7,r7,-1
   24e30:	d9c01315 	stw	r7,76(sp)
   24e34:	1c63883a 	add	r17,r3,r17
   24e38:	db000c17 	ldw	r12,48(sp)
   24e3c:	003bea06 	br	23de8 <__alt_data_end+0xf4023de8>
   24e40:	dc000915 	stw	r16,36(sp)
   24e44:	003e0e06 	br	24680 <__alt_data_end+0xf4024680>
   24e48:	01000e44 	movi	r4,57
   24e4c:	8825883a 	mov	r18,r17
   24e50:	9dc00044 	addi	r23,r19,1
   24e54:	99000005 	stb	r4,0(r19)
   24e58:	a023883a 	mov	r17,r20
   24e5c:	dc000915 	stw	r16,36(sp)
   24e60:	003da406 	br	244f4 <__alt_data_end+0xf40244f4>
   24e64:	d9801417 	ldw	r6,80(sp)
   24e68:	d9c01517 	ldw	r7,84(sp)
   24e6c:	0009883a 	mov	r4,zero
   24e70:	014ff834 	movhi	r5,16352
   24e74:	002cedc0 	call	2cedc <__subdf3>
   24e78:	880d883a 	mov	r6,r17
   24e7c:	a00f883a 	mov	r7,r20
   24e80:	1009883a 	mov	r4,r2
   24e84:	180b883a 	mov	r5,r3
   24e88:	002c5f40 	call	2c5f4 <__gedf2>
   24e8c:	00bc7c0e 	bge	zero,r2,24080 <__alt_data_end+0xf4024080>
   24e90:	01000c04 	movi	r4,48
   24e94:	00000106 	br	24e9c <_dtoa_r+0x1580>
   24e98:	102f883a 	mov	r23,r2
   24e9c:	b8bfffc4 	addi	r2,r23,-1
   24ea0:	10c00007 	ldb	r3,0(r2)
   24ea4:	193ffc26 	beq	r3,r4,24e98 <__alt_data_end+0xf4024e98>
   24ea8:	d9801317 	ldw	r6,76(sp)
   24eac:	d9800515 	stw	r6,20(sp)
   24eb0:	003c4406 	br	23fc4 <__alt_data_end+0xf4023fc4>
   24eb4:	d9801317 	ldw	r6,76(sp)
   24eb8:	d9800515 	stw	r6,20(sp)
   24ebc:	003cea06 	br	24268 <__alt_data_end+0xf4024268>
   24ec0:	dd800f17 	ldw	r22,60(sp)
   24ec4:	dcc01017 	ldw	r19,64(sp)
   24ec8:	dc801217 	ldw	r18,72(sp)
   24ecc:	003c6c06 	br	24080 <__alt_data_end+0xf4024080>
   24ed0:	903e031e 	bne	r18,zero,246e0 <__alt_data_end+0xf40246e0>
   24ed4:	003ebb06 	br	249c4 <__alt_data_end+0xf40249c4>
   24ed8:	103e6c1e 	bne	r2,zero,2488c <__alt_data_end+0xf402488c>
   24edc:	4080004c 	andi	r2,r8,1
   24ee0:	103e6a26 	beq	r2,zero,2488c <__alt_data_end+0xf402488c>
   24ee4:	003e6606 	br	24880 <__alt_data_end+0xf4024880>
   24ee8:	d8c00317 	ldw	r3,12(sp)
   24eec:	00800084 	movi	r2,2
   24ef0:	10c02916 	blt	r2,r3,24f98 <_dtoa_r+0x167c>
   24ef4:	d9000c17 	ldw	r4,48(sp)
   24ef8:	003e8806 	br	2491c <__alt_data_end+0xf402491c>
   24efc:	04000084 	movi	r16,2
   24f00:	003b9d06 	br	23d78 <__alt_data_end+0xf4023d78>
   24f04:	d9001317 	ldw	r4,76(sp)
   24f08:	d9000515 	stw	r4,20(sp)
   24f0c:	003cd606 	br	24268 <__alt_data_end+0xf4024268>
   24f10:	d8801317 	ldw	r2,76(sp)
   24f14:	d8800515 	stw	r2,20(sp)
   24f18:	003c2a06 	br	23fc4 <__alt_data_end+0xf4023fc4>
   24f1c:	d9800317 	ldw	r6,12(sp)
   24f20:	00800084 	movi	r2,2
   24f24:	11801516 	blt	r2,r6,24f7c <_dtoa_r+0x1660>
   24f28:	d9c00c17 	ldw	r7,48(sp)
   24f2c:	d9c00615 	stw	r7,24(sp)
   24f30:	003df706 	br	24710 <__alt_data_end+0xf4024710>
   24f34:	193d3926 	beq	r3,r4,2441c <__alt_data_end+0xf402441c>
   24f38:	00c00f04 	movi	r3,60
   24f3c:	1885c83a 	sub	r2,r3,r2
   24f40:	003ddf06 	br	246c0 <__alt_data_end+0xf40246c0>
   24f44:	e009883a 	mov	r4,fp
   24f48:	e0001115 	stw	zero,68(fp)
   24f4c:	000b883a 	mov	r5,zero
   24f50:	0026fb80 	call	26fb8 <_Balloc>
   24f54:	d8800715 	stw	r2,28(sp)
   24f58:	d8c00717 	ldw	r3,28(sp)
   24f5c:	00bfffc4 	movi	r2,-1
   24f60:	01000044 	movi	r4,1
   24f64:	d8800c15 	stw	r2,48(sp)
   24f68:	e0c01015 	stw	r3,64(fp)
   24f6c:	d9000b15 	stw	r4,44(sp)
   24f70:	d8800615 	stw	r2,24(sp)
   24f74:	d8002215 	stw	zero,136(sp)
   24f78:	003c4106 	br	24080 <__alt_data_end+0xf4024080>
   24f7c:	d8c00c17 	ldw	r3,48(sp)
   24f80:	d8c00615 	stw	r3,24(sp)
   24f84:	003e7006 	br	24948 <__alt_data_end+0xf4024948>
   24f88:	04400044 	movi	r17,1
   24f8c:	003b2006 	br	23c10 <__alt_data_end+0xf4023c10>
   24f90:	000b883a 	mov	r5,zero
   24f94:	003b3d06 	br	23c8c <__alt_data_end+0xf4023c8c>
   24f98:	d8800c17 	ldw	r2,48(sp)
   24f9c:	d8800615 	stw	r2,24(sp)
   24fa0:	003e6906 	br	24948 <__alt_data_end+0xf4024948>

00024fa4 <__sflush_r>:
   24fa4:	2880030b 	ldhu	r2,12(r5)
   24fa8:	defffb04 	addi	sp,sp,-20
   24fac:	dcc00315 	stw	r19,12(sp)
   24fb0:	dc400115 	stw	r17,4(sp)
   24fb4:	dfc00415 	stw	ra,16(sp)
   24fb8:	dc800215 	stw	r18,8(sp)
   24fbc:	dc000015 	stw	r16,0(sp)
   24fc0:	10c0020c 	andi	r3,r2,8
   24fc4:	2823883a 	mov	r17,r5
   24fc8:	2027883a 	mov	r19,r4
   24fcc:	1800311e 	bne	r3,zero,25094 <__sflush_r+0xf0>
   24fd0:	28c00117 	ldw	r3,4(r5)
   24fd4:	10820014 	ori	r2,r2,2048
   24fd8:	2880030d 	sth	r2,12(r5)
   24fdc:	00c04b0e 	bge	zero,r3,2510c <__sflush_r+0x168>
   24fe0:	8a000a17 	ldw	r8,40(r17)
   24fe4:	40002326 	beq	r8,zero,25074 <__sflush_r+0xd0>
   24fe8:	9c000017 	ldw	r16,0(r19)
   24fec:	10c4000c 	andi	r3,r2,4096
   24ff0:	98000015 	stw	zero,0(r19)
   24ff4:	18004826 	beq	r3,zero,25118 <__sflush_r+0x174>
   24ff8:	89801417 	ldw	r6,80(r17)
   24ffc:	10c0010c 	andi	r3,r2,4
   25000:	18000626 	beq	r3,zero,2501c <__sflush_r+0x78>
   25004:	88c00117 	ldw	r3,4(r17)
   25008:	88800c17 	ldw	r2,48(r17)
   2500c:	30cdc83a 	sub	r6,r6,r3
   25010:	10000226 	beq	r2,zero,2501c <__sflush_r+0x78>
   25014:	88800f17 	ldw	r2,60(r17)
   25018:	308dc83a 	sub	r6,r6,r2
   2501c:	89400717 	ldw	r5,28(r17)
   25020:	000f883a 	mov	r7,zero
   25024:	9809883a 	mov	r4,r19
   25028:	403ee83a 	callr	r8
   2502c:	00ffffc4 	movi	r3,-1
   25030:	10c04426 	beq	r2,r3,25144 <__sflush_r+0x1a0>
   25034:	88c0030b 	ldhu	r3,12(r17)
   25038:	89000417 	ldw	r4,16(r17)
   2503c:	88000115 	stw	zero,4(r17)
   25040:	197dffcc 	andi	r5,r3,63487
   25044:	8940030d 	sth	r5,12(r17)
   25048:	89000015 	stw	r4,0(r17)
   2504c:	18c4000c 	andi	r3,r3,4096
   25050:	18002c1e 	bne	r3,zero,25104 <__sflush_r+0x160>
   25054:	89400c17 	ldw	r5,48(r17)
   25058:	9c000015 	stw	r16,0(r19)
   2505c:	28000526 	beq	r5,zero,25074 <__sflush_r+0xd0>
   25060:	88801004 	addi	r2,r17,64
   25064:	28800226 	beq	r5,r2,25070 <__sflush_r+0xcc>
   25068:	9809883a 	mov	r4,r19
   2506c:	00257100 	call	25710 <_free_r>
   25070:	88000c15 	stw	zero,48(r17)
   25074:	0005883a 	mov	r2,zero
   25078:	dfc00417 	ldw	ra,16(sp)
   2507c:	dcc00317 	ldw	r19,12(sp)
   25080:	dc800217 	ldw	r18,8(sp)
   25084:	dc400117 	ldw	r17,4(sp)
   25088:	dc000017 	ldw	r16,0(sp)
   2508c:	dec00504 	addi	sp,sp,20
   25090:	f800283a 	ret
   25094:	2c800417 	ldw	r18,16(r5)
   25098:	903ff626 	beq	r18,zero,25074 <__alt_data_end+0xf4025074>
   2509c:	2c000017 	ldw	r16,0(r5)
   250a0:	108000cc 	andi	r2,r2,3
   250a4:	2c800015 	stw	r18,0(r5)
   250a8:	84a1c83a 	sub	r16,r16,r18
   250ac:	1000131e 	bne	r2,zero,250fc <__sflush_r+0x158>
   250b0:	28800517 	ldw	r2,20(r5)
   250b4:	88800215 	stw	r2,8(r17)
   250b8:	04000316 	blt	zero,r16,250c8 <__sflush_r+0x124>
   250bc:	003fed06 	br	25074 <__alt_data_end+0xf4025074>
   250c0:	90a5883a 	add	r18,r18,r2
   250c4:	043feb0e 	bge	zero,r16,25074 <__alt_data_end+0xf4025074>
   250c8:	88800917 	ldw	r2,36(r17)
   250cc:	89400717 	ldw	r5,28(r17)
   250d0:	800f883a 	mov	r7,r16
   250d4:	900d883a 	mov	r6,r18
   250d8:	9809883a 	mov	r4,r19
   250dc:	103ee83a 	callr	r2
   250e0:	80a1c83a 	sub	r16,r16,r2
   250e4:	00bff616 	blt	zero,r2,250c0 <__alt_data_end+0xf40250c0>
   250e8:	88c0030b 	ldhu	r3,12(r17)
   250ec:	00bfffc4 	movi	r2,-1
   250f0:	18c01014 	ori	r3,r3,64
   250f4:	88c0030d 	sth	r3,12(r17)
   250f8:	003fdf06 	br	25078 <__alt_data_end+0xf4025078>
   250fc:	0005883a 	mov	r2,zero
   25100:	003fec06 	br	250b4 <__alt_data_end+0xf40250b4>
   25104:	88801415 	stw	r2,80(r17)
   25108:	003fd206 	br	25054 <__alt_data_end+0xf4025054>
   2510c:	28c00f17 	ldw	r3,60(r5)
   25110:	00ffb316 	blt	zero,r3,24fe0 <__alt_data_end+0xf4024fe0>
   25114:	003fd706 	br	25074 <__alt_data_end+0xf4025074>
   25118:	89400717 	ldw	r5,28(r17)
   2511c:	000d883a 	mov	r6,zero
   25120:	01c00044 	movi	r7,1
   25124:	9809883a 	mov	r4,r19
   25128:	403ee83a 	callr	r8
   2512c:	100d883a 	mov	r6,r2
   25130:	00bfffc4 	movi	r2,-1
   25134:	30801426 	beq	r6,r2,25188 <__sflush_r+0x1e4>
   25138:	8880030b 	ldhu	r2,12(r17)
   2513c:	8a000a17 	ldw	r8,40(r17)
   25140:	003fae06 	br	24ffc <__alt_data_end+0xf4024ffc>
   25144:	98c00017 	ldw	r3,0(r19)
   25148:	183fba26 	beq	r3,zero,25034 <__alt_data_end+0xf4025034>
   2514c:	01000744 	movi	r4,29
   25150:	19000626 	beq	r3,r4,2516c <__sflush_r+0x1c8>
   25154:	01000584 	movi	r4,22
   25158:	19000426 	beq	r3,r4,2516c <__sflush_r+0x1c8>
   2515c:	88c0030b 	ldhu	r3,12(r17)
   25160:	18c01014 	ori	r3,r3,64
   25164:	88c0030d 	sth	r3,12(r17)
   25168:	003fc306 	br	25078 <__alt_data_end+0xf4025078>
   2516c:	8880030b 	ldhu	r2,12(r17)
   25170:	88c00417 	ldw	r3,16(r17)
   25174:	88000115 	stw	zero,4(r17)
   25178:	10bdffcc 	andi	r2,r2,63487
   2517c:	8880030d 	sth	r2,12(r17)
   25180:	88c00015 	stw	r3,0(r17)
   25184:	003fb306 	br	25054 <__alt_data_end+0xf4025054>
   25188:	98800017 	ldw	r2,0(r19)
   2518c:	103fea26 	beq	r2,zero,25138 <__alt_data_end+0xf4025138>
   25190:	00c00744 	movi	r3,29
   25194:	10c00226 	beq	r2,r3,251a0 <__sflush_r+0x1fc>
   25198:	00c00584 	movi	r3,22
   2519c:	10c0031e 	bne	r2,r3,251ac <__sflush_r+0x208>
   251a0:	9c000015 	stw	r16,0(r19)
   251a4:	0005883a 	mov	r2,zero
   251a8:	003fb306 	br	25078 <__alt_data_end+0xf4025078>
   251ac:	88c0030b 	ldhu	r3,12(r17)
   251b0:	3005883a 	mov	r2,r6
   251b4:	18c01014 	ori	r3,r3,64
   251b8:	88c0030d 	sth	r3,12(r17)
   251bc:	003fae06 	br	25078 <__alt_data_end+0xf4025078>

000251c0 <_fflush_r>:
   251c0:	defffd04 	addi	sp,sp,-12
   251c4:	dc000115 	stw	r16,4(sp)
   251c8:	dfc00215 	stw	ra,8(sp)
   251cc:	2021883a 	mov	r16,r4
   251d0:	20000226 	beq	r4,zero,251dc <_fflush_r+0x1c>
   251d4:	20800e17 	ldw	r2,56(r4)
   251d8:	10000c26 	beq	r2,zero,2520c <_fflush_r+0x4c>
   251dc:	2880030f 	ldh	r2,12(r5)
   251e0:	1000051e 	bne	r2,zero,251f8 <_fflush_r+0x38>
   251e4:	0005883a 	mov	r2,zero
   251e8:	dfc00217 	ldw	ra,8(sp)
   251ec:	dc000117 	ldw	r16,4(sp)
   251f0:	dec00304 	addi	sp,sp,12
   251f4:	f800283a 	ret
   251f8:	8009883a 	mov	r4,r16
   251fc:	dfc00217 	ldw	ra,8(sp)
   25200:	dc000117 	ldw	r16,4(sp)
   25204:	dec00304 	addi	sp,sp,12
   25208:	0024fa41 	jmpi	24fa4 <__sflush_r>
   2520c:	d9400015 	stw	r5,0(sp)
   25210:	002559c0 	call	2559c <__sinit>
   25214:	d9400017 	ldw	r5,0(sp)
   25218:	003ff006 	br	251dc <__alt_data_end+0xf40251dc>

0002521c <fflush>:
   2521c:	20000526 	beq	r4,zero,25234 <fflush+0x18>
   25220:	008000f4 	movhi	r2,3
   25224:	108e0b04 	addi	r2,r2,14380
   25228:	200b883a 	mov	r5,r4
   2522c:	11000017 	ldw	r4,0(r2)
   25230:	00251c01 	jmpi	251c0 <_fflush_r>
   25234:	008000f4 	movhi	r2,3
   25238:	108e0a04 	addi	r2,r2,14376
   2523c:	11000017 	ldw	r4,0(r2)
   25240:	014000b4 	movhi	r5,2
   25244:	29547004 	addi	r5,r5,20928
   25248:	0025fa01 	jmpi	25fa0 <_fwalk_reent>

0002524c <__fp_unlock>:
   2524c:	0005883a 	mov	r2,zero
   25250:	f800283a 	ret

00025254 <_cleanup_r>:
   25254:	014000f4 	movhi	r5,3
   25258:	2967ee04 	addi	r5,r5,-24648
   2525c:	0025fa01 	jmpi	25fa0 <_fwalk_reent>

00025260 <__sinit.part.1>:
   25260:	defff704 	addi	sp,sp,-36
   25264:	00c000b4 	movhi	r3,2
   25268:	dfc00815 	stw	ra,32(sp)
   2526c:	ddc00715 	stw	r23,28(sp)
   25270:	dd800615 	stw	r22,24(sp)
   25274:	dd400515 	stw	r21,20(sp)
   25278:	dd000415 	stw	r20,16(sp)
   2527c:	dcc00315 	stw	r19,12(sp)
   25280:	dc800215 	stw	r18,8(sp)
   25284:	dc400115 	stw	r17,4(sp)
   25288:	dc000015 	stw	r16,0(sp)
   2528c:	18d49504 	addi	r3,r3,21076
   25290:	24000117 	ldw	r16,4(r4)
   25294:	20c00f15 	stw	r3,60(r4)
   25298:	2080bb04 	addi	r2,r4,748
   2529c:	00c000c4 	movi	r3,3
   252a0:	20c0b915 	stw	r3,740(r4)
   252a4:	2080ba15 	stw	r2,744(r4)
   252a8:	2000b815 	stw	zero,736(r4)
   252ac:	05c00204 	movi	r23,8
   252b0:	00800104 	movi	r2,4
   252b4:	2025883a 	mov	r18,r4
   252b8:	b80d883a 	mov	r6,r23
   252bc:	81001704 	addi	r4,r16,92
   252c0:	000b883a 	mov	r5,zero
   252c4:	80000015 	stw	zero,0(r16)
   252c8:	80000115 	stw	zero,4(r16)
   252cc:	80000215 	stw	zero,8(r16)
   252d0:	8080030d 	sth	r2,12(r16)
   252d4:	80001915 	stw	zero,100(r16)
   252d8:	8000038d 	sth	zero,14(r16)
   252dc:	80000415 	stw	zero,16(r16)
   252e0:	80000515 	stw	zero,20(r16)
   252e4:	80000615 	stw	zero,24(r16)
   252e8:	0026e900 	call	26e90 <memset>
   252ec:	058000f4 	movhi	r22,3
   252f0:	94400217 	ldw	r17,8(r18)
   252f4:	054000f4 	movhi	r21,3
   252f8:	050000f4 	movhi	r20,3
   252fc:	04c000f4 	movhi	r19,3
   25300:	b5a17804 	addi	r22,r22,-31264
   25304:	ad618f04 	addi	r21,r21,-31172
   25308:	a521ae04 	addi	r20,r20,-31048
   2530c:	9ce1c504 	addi	r19,r19,-30956
   25310:	85800815 	stw	r22,32(r16)
   25314:	85400915 	stw	r21,36(r16)
   25318:	85000a15 	stw	r20,40(r16)
   2531c:	84c00b15 	stw	r19,44(r16)
   25320:	84000715 	stw	r16,28(r16)
   25324:	00800284 	movi	r2,10
   25328:	8880030d 	sth	r2,12(r17)
   2532c:	00800044 	movi	r2,1
   25330:	b80d883a 	mov	r6,r23
   25334:	89001704 	addi	r4,r17,92
   25338:	000b883a 	mov	r5,zero
   2533c:	88000015 	stw	zero,0(r17)
   25340:	88000115 	stw	zero,4(r17)
   25344:	88000215 	stw	zero,8(r17)
   25348:	88001915 	stw	zero,100(r17)
   2534c:	8880038d 	sth	r2,14(r17)
   25350:	88000415 	stw	zero,16(r17)
   25354:	88000515 	stw	zero,20(r17)
   25358:	88000615 	stw	zero,24(r17)
   2535c:	0026e900 	call	26e90 <memset>
   25360:	94000317 	ldw	r16,12(r18)
   25364:	00800484 	movi	r2,18
   25368:	8c400715 	stw	r17,28(r17)
   2536c:	8d800815 	stw	r22,32(r17)
   25370:	8d400915 	stw	r21,36(r17)
   25374:	8d000a15 	stw	r20,40(r17)
   25378:	8cc00b15 	stw	r19,44(r17)
   2537c:	8080030d 	sth	r2,12(r16)
   25380:	00800084 	movi	r2,2
   25384:	80000015 	stw	zero,0(r16)
   25388:	80000115 	stw	zero,4(r16)
   2538c:	80000215 	stw	zero,8(r16)
   25390:	80001915 	stw	zero,100(r16)
   25394:	8080038d 	sth	r2,14(r16)
   25398:	80000415 	stw	zero,16(r16)
   2539c:	80000515 	stw	zero,20(r16)
   253a0:	80000615 	stw	zero,24(r16)
   253a4:	b80d883a 	mov	r6,r23
   253a8:	000b883a 	mov	r5,zero
   253ac:	81001704 	addi	r4,r16,92
   253b0:	0026e900 	call	26e90 <memset>
   253b4:	00800044 	movi	r2,1
   253b8:	84000715 	stw	r16,28(r16)
   253bc:	85800815 	stw	r22,32(r16)
   253c0:	85400915 	stw	r21,36(r16)
   253c4:	85000a15 	stw	r20,40(r16)
   253c8:	84c00b15 	stw	r19,44(r16)
   253cc:	90800e15 	stw	r2,56(r18)
   253d0:	dfc00817 	ldw	ra,32(sp)
   253d4:	ddc00717 	ldw	r23,28(sp)
   253d8:	dd800617 	ldw	r22,24(sp)
   253dc:	dd400517 	ldw	r21,20(sp)
   253e0:	dd000417 	ldw	r20,16(sp)
   253e4:	dcc00317 	ldw	r19,12(sp)
   253e8:	dc800217 	ldw	r18,8(sp)
   253ec:	dc400117 	ldw	r17,4(sp)
   253f0:	dc000017 	ldw	r16,0(sp)
   253f4:	dec00904 	addi	sp,sp,36
   253f8:	f800283a 	ret

000253fc <__fp_lock>:
   253fc:	0005883a 	mov	r2,zero
   25400:	f800283a 	ret

00025404 <__sfmoreglue>:
   25404:	defffc04 	addi	sp,sp,-16
   25408:	dc400115 	stw	r17,4(sp)
   2540c:	2c7fffc4 	addi	r17,r5,-1
   25410:	8c401a24 	muli	r17,r17,104
   25414:	dc800215 	stw	r18,8(sp)
   25418:	2825883a 	mov	r18,r5
   2541c:	89401d04 	addi	r5,r17,116
   25420:	dc000015 	stw	r16,0(sp)
   25424:	dfc00315 	stw	ra,12(sp)
   25428:	00262fc0 	call	262fc <_malloc_r>
   2542c:	1021883a 	mov	r16,r2
   25430:	10000726 	beq	r2,zero,25450 <__sfmoreglue+0x4c>
   25434:	11000304 	addi	r4,r2,12
   25438:	10000015 	stw	zero,0(r2)
   2543c:	14800115 	stw	r18,4(r2)
   25440:	11000215 	stw	r4,8(r2)
   25444:	89801a04 	addi	r6,r17,104
   25448:	000b883a 	mov	r5,zero
   2544c:	0026e900 	call	26e90 <memset>
   25450:	8005883a 	mov	r2,r16
   25454:	dfc00317 	ldw	ra,12(sp)
   25458:	dc800217 	ldw	r18,8(sp)
   2545c:	dc400117 	ldw	r17,4(sp)
   25460:	dc000017 	ldw	r16,0(sp)
   25464:	dec00404 	addi	sp,sp,16
   25468:	f800283a 	ret

0002546c <__sfp>:
   2546c:	defffb04 	addi	sp,sp,-20
   25470:	dc000015 	stw	r16,0(sp)
   25474:	040000f4 	movhi	r16,3
   25478:	840e0a04 	addi	r16,r16,14376
   2547c:	dcc00315 	stw	r19,12(sp)
   25480:	2027883a 	mov	r19,r4
   25484:	81000017 	ldw	r4,0(r16)
   25488:	dfc00415 	stw	ra,16(sp)
   2548c:	dc800215 	stw	r18,8(sp)
   25490:	20800e17 	ldw	r2,56(r4)
   25494:	dc400115 	stw	r17,4(sp)
   25498:	1000021e 	bne	r2,zero,254a4 <__sfp+0x38>
   2549c:	00252600 	call	25260 <__sinit.part.1>
   254a0:	81000017 	ldw	r4,0(r16)
   254a4:	2480b804 	addi	r18,r4,736
   254a8:	047fffc4 	movi	r17,-1
   254ac:	91000117 	ldw	r4,4(r18)
   254b0:	94000217 	ldw	r16,8(r18)
   254b4:	213fffc4 	addi	r4,r4,-1
   254b8:	20000a16 	blt	r4,zero,254e4 <__sfp+0x78>
   254bc:	8080030f 	ldh	r2,12(r16)
   254c0:	10000c26 	beq	r2,zero,254f4 <__sfp+0x88>
   254c4:	80c01d04 	addi	r3,r16,116
   254c8:	00000206 	br	254d4 <__sfp+0x68>
   254cc:	18bfe60f 	ldh	r2,-104(r3)
   254d0:	10000826 	beq	r2,zero,254f4 <__sfp+0x88>
   254d4:	213fffc4 	addi	r4,r4,-1
   254d8:	1c3ffd04 	addi	r16,r3,-12
   254dc:	18c01a04 	addi	r3,r3,104
   254e0:	247ffa1e 	bne	r4,r17,254cc <__alt_data_end+0xf40254cc>
   254e4:	90800017 	ldw	r2,0(r18)
   254e8:	10001d26 	beq	r2,zero,25560 <__sfp+0xf4>
   254ec:	1025883a 	mov	r18,r2
   254f0:	003fee06 	br	254ac <__alt_data_end+0xf40254ac>
   254f4:	00bfffc4 	movi	r2,-1
   254f8:	8080038d 	sth	r2,14(r16)
   254fc:	00800044 	movi	r2,1
   25500:	8080030d 	sth	r2,12(r16)
   25504:	80001915 	stw	zero,100(r16)
   25508:	80000015 	stw	zero,0(r16)
   2550c:	80000215 	stw	zero,8(r16)
   25510:	80000115 	stw	zero,4(r16)
   25514:	80000415 	stw	zero,16(r16)
   25518:	80000515 	stw	zero,20(r16)
   2551c:	80000615 	stw	zero,24(r16)
   25520:	01800204 	movi	r6,8
   25524:	000b883a 	mov	r5,zero
   25528:	81001704 	addi	r4,r16,92
   2552c:	0026e900 	call	26e90 <memset>
   25530:	8005883a 	mov	r2,r16
   25534:	80000c15 	stw	zero,48(r16)
   25538:	80000d15 	stw	zero,52(r16)
   2553c:	80001115 	stw	zero,68(r16)
   25540:	80001215 	stw	zero,72(r16)
   25544:	dfc00417 	ldw	ra,16(sp)
   25548:	dcc00317 	ldw	r19,12(sp)
   2554c:	dc800217 	ldw	r18,8(sp)
   25550:	dc400117 	ldw	r17,4(sp)
   25554:	dc000017 	ldw	r16,0(sp)
   25558:	dec00504 	addi	sp,sp,20
   2555c:	f800283a 	ret
   25560:	01400104 	movi	r5,4
   25564:	9809883a 	mov	r4,r19
   25568:	00254040 	call	25404 <__sfmoreglue>
   2556c:	90800015 	stw	r2,0(r18)
   25570:	103fde1e 	bne	r2,zero,254ec <__alt_data_end+0xf40254ec>
   25574:	00800304 	movi	r2,12
   25578:	98800015 	stw	r2,0(r19)
   2557c:	0005883a 	mov	r2,zero
   25580:	003ff006 	br	25544 <__alt_data_end+0xf4025544>

00025584 <_cleanup>:
   25584:	008000f4 	movhi	r2,3
   25588:	108e0a04 	addi	r2,r2,14376
   2558c:	11000017 	ldw	r4,0(r2)
   25590:	014000f4 	movhi	r5,3
   25594:	2967ee04 	addi	r5,r5,-24648
   25598:	0025fa01 	jmpi	25fa0 <_fwalk_reent>

0002559c <__sinit>:
   2559c:	20800e17 	ldw	r2,56(r4)
   255a0:	10000126 	beq	r2,zero,255a8 <__sinit+0xc>
   255a4:	f800283a 	ret
   255a8:	00252601 	jmpi	25260 <__sinit.part.1>

000255ac <__sfp_lock_acquire>:
   255ac:	f800283a 	ret

000255b0 <__sfp_lock_release>:
   255b0:	f800283a 	ret

000255b4 <__sinit_lock_acquire>:
   255b4:	f800283a 	ret

000255b8 <__sinit_lock_release>:
   255b8:	f800283a 	ret

000255bc <__fp_lock_all>:
   255bc:	008000f4 	movhi	r2,3
   255c0:	108e0b04 	addi	r2,r2,14380
   255c4:	11000017 	ldw	r4,0(r2)
   255c8:	014000b4 	movhi	r5,2
   255cc:	2954ff04 	addi	r5,r5,21500
   255d0:	0025edc1 	jmpi	25edc <_fwalk>

000255d4 <__fp_unlock_all>:
   255d4:	008000f4 	movhi	r2,3
   255d8:	108e0b04 	addi	r2,r2,14380
   255dc:	11000017 	ldw	r4,0(r2)
   255e0:	014000b4 	movhi	r5,2
   255e4:	29549304 	addi	r5,r5,21068
   255e8:	0025edc1 	jmpi	25edc <_fwalk>

000255ec <_malloc_trim_r>:
   255ec:	defffb04 	addi	sp,sp,-20
   255f0:	dcc00315 	stw	r19,12(sp)
   255f4:	04c000f4 	movhi	r19,3
   255f8:	dc800215 	stw	r18,8(sp)
   255fc:	dc400115 	stw	r17,4(sp)
   25600:	dc000015 	stw	r16,0(sp)
   25604:	dfc00415 	stw	ra,16(sp)
   25608:	2821883a 	mov	r16,r5
   2560c:	9cc82d04 	addi	r19,r19,8372
   25610:	2025883a 	mov	r18,r4
   25614:	002df580 	call	2df58 <__malloc_lock>
   25618:	98800217 	ldw	r2,8(r19)
   2561c:	14400117 	ldw	r17,4(r2)
   25620:	00bfff04 	movi	r2,-4
   25624:	88a2703a 	and	r17,r17,r2
   25628:	8c21c83a 	sub	r16,r17,r16
   2562c:	8403fbc4 	addi	r16,r16,4079
   25630:	8020d33a 	srli	r16,r16,12
   25634:	0083ffc4 	movi	r2,4095
   25638:	843fffc4 	addi	r16,r16,-1
   2563c:	8020933a 	slli	r16,r16,12
   25640:	1400060e 	bge	r2,r16,2565c <_malloc_trim_r+0x70>
   25644:	000b883a 	mov	r5,zero
   25648:	9009883a 	mov	r4,r18
   2564c:	002858c0 	call	2858c <_sbrk_r>
   25650:	98c00217 	ldw	r3,8(r19)
   25654:	1c47883a 	add	r3,r3,r17
   25658:	10c00a26 	beq	r2,r3,25684 <_malloc_trim_r+0x98>
   2565c:	9009883a 	mov	r4,r18
   25660:	002df7c0 	call	2df7c <__malloc_unlock>
   25664:	0005883a 	mov	r2,zero
   25668:	dfc00417 	ldw	ra,16(sp)
   2566c:	dcc00317 	ldw	r19,12(sp)
   25670:	dc800217 	ldw	r18,8(sp)
   25674:	dc400117 	ldw	r17,4(sp)
   25678:	dc000017 	ldw	r16,0(sp)
   2567c:	dec00504 	addi	sp,sp,20
   25680:	f800283a 	ret
   25684:	040bc83a 	sub	r5,zero,r16
   25688:	9009883a 	mov	r4,r18
   2568c:	002858c0 	call	2858c <_sbrk_r>
   25690:	00ffffc4 	movi	r3,-1
   25694:	10c00d26 	beq	r2,r3,256cc <_malloc_trim_r+0xe0>
   25698:	00c000f4 	movhi	r3,3
   2569c:	18d54704 	addi	r3,r3,21788
   256a0:	18800017 	ldw	r2,0(r3)
   256a4:	99000217 	ldw	r4,8(r19)
   256a8:	8c23c83a 	sub	r17,r17,r16
   256ac:	8c400054 	ori	r17,r17,1
   256b0:	1421c83a 	sub	r16,r2,r16
   256b4:	24400115 	stw	r17,4(r4)
   256b8:	9009883a 	mov	r4,r18
   256bc:	1c000015 	stw	r16,0(r3)
   256c0:	002df7c0 	call	2df7c <__malloc_unlock>
   256c4:	00800044 	movi	r2,1
   256c8:	003fe706 	br	25668 <__alt_data_end+0xf4025668>
   256cc:	000b883a 	mov	r5,zero
   256d0:	9009883a 	mov	r4,r18
   256d4:	002858c0 	call	2858c <_sbrk_r>
   256d8:	99000217 	ldw	r4,8(r19)
   256dc:	014003c4 	movi	r5,15
   256e0:	1107c83a 	sub	r3,r2,r4
   256e4:	28ffdd0e 	bge	r5,r3,2565c <__alt_data_end+0xf402565c>
   256e8:	014000f4 	movhi	r5,3
   256ec:	294e0d04 	addi	r5,r5,14388
   256f0:	29400017 	ldw	r5,0(r5)
   256f4:	18c00054 	ori	r3,r3,1
   256f8:	20c00115 	stw	r3,4(r4)
   256fc:	00c000f4 	movhi	r3,3
   25700:	1145c83a 	sub	r2,r2,r5
   25704:	18d54704 	addi	r3,r3,21788
   25708:	18800015 	stw	r2,0(r3)
   2570c:	003fd306 	br	2565c <__alt_data_end+0xf402565c>

00025710 <_free_r>:
   25710:	28004126 	beq	r5,zero,25818 <_free_r+0x108>
   25714:	defffd04 	addi	sp,sp,-12
   25718:	dc400115 	stw	r17,4(sp)
   2571c:	dc000015 	stw	r16,0(sp)
   25720:	2023883a 	mov	r17,r4
   25724:	2821883a 	mov	r16,r5
   25728:	dfc00215 	stw	ra,8(sp)
   2572c:	002df580 	call	2df58 <__malloc_lock>
   25730:	81ffff17 	ldw	r7,-4(r16)
   25734:	00bfff84 	movi	r2,-2
   25738:	010000f4 	movhi	r4,3
   2573c:	81bffe04 	addi	r6,r16,-8
   25740:	3884703a 	and	r2,r7,r2
   25744:	21082d04 	addi	r4,r4,8372
   25748:	308b883a 	add	r5,r6,r2
   2574c:	2a400117 	ldw	r9,4(r5)
   25750:	22000217 	ldw	r8,8(r4)
   25754:	00ffff04 	movi	r3,-4
   25758:	48c6703a 	and	r3,r9,r3
   2575c:	2a005726 	beq	r5,r8,258bc <_free_r+0x1ac>
   25760:	28c00115 	stw	r3,4(r5)
   25764:	39c0004c 	andi	r7,r7,1
   25768:	3800091e 	bne	r7,zero,25790 <_free_r+0x80>
   2576c:	823ffe17 	ldw	r8,-8(r16)
   25770:	22400204 	addi	r9,r4,8
   25774:	320dc83a 	sub	r6,r6,r8
   25778:	31c00217 	ldw	r7,8(r6)
   2577c:	1205883a 	add	r2,r2,r8
   25780:	3a406526 	beq	r7,r9,25918 <_free_r+0x208>
   25784:	32000317 	ldw	r8,12(r6)
   25788:	3a000315 	stw	r8,12(r7)
   2578c:	41c00215 	stw	r7,8(r8)
   25790:	28cf883a 	add	r7,r5,r3
   25794:	39c00117 	ldw	r7,4(r7)
   25798:	39c0004c 	andi	r7,r7,1
   2579c:	38003a26 	beq	r7,zero,25888 <_free_r+0x178>
   257a0:	10c00054 	ori	r3,r2,1
   257a4:	30c00115 	stw	r3,4(r6)
   257a8:	3087883a 	add	r3,r6,r2
   257ac:	18800015 	stw	r2,0(r3)
   257b0:	00c07fc4 	movi	r3,511
   257b4:	18801936 	bltu	r3,r2,2581c <_free_r+0x10c>
   257b8:	1004d0fa 	srli	r2,r2,3
   257bc:	01c00044 	movi	r7,1
   257c0:	21400117 	ldw	r5,4(r4)
   257c4:	10c00044 	addi	r3,r2,1
   257c8:	18c7883a 	add	r3,r3,r3
   257cc:	1005d0ba 	srai	r2,r2,2
   257d0:	18c7883a 	add	r3,r3,r3
   257d4:	18c7883a 	add	r3,r3,r3
   257d8:	1907883a 	add	r3,r3,r4
   257dc:	3884983a 	sll	r2,r7,r2
   257e0:	19c00017 	ldw	r7,0(r3)
   257e4:	1a3ffe04 	addi	r8,r3,-8
   257e8:	1144b03a 	or	r2,r2,r5
   257ec:	32000315 	stw	r8,12(r6)
   257f0:	31c00215 	stw	r7,8(r6)
   257f4:	20800115 	stw	r2,4(r4)
   257f8:	19800015 	stw	r6,0(r3)
   257fc:	39800315 	stw	r6,12(r7)
   25800:	8809883a 	mov	r4,r17
   25804:	dfc00217 	ldw	ra,8(sp)
   25808:	dc400117 	ldw	r17,4(sp)
   2580c:	dc000017 	ldw	r16,0(sp)
   25810:	dec00304 	addi	sp,sp,12
   25814:	002df7c1 	jmpi	2df7c <__malloc_unlock>
   25818:	f800283a 	ret
   2581c:	100ad27a 	srli	r5,r2,9
   25820:	00c00104 	movi	r3,4
   25824:	19404a36 	bltu	r3,r5,25950 <_free_r+0x240>
   25828:	100ad1ba 	srli	r5,r2,6
   2582c:	28c00e44 	addi	r3,r5,57
   25830:	18c7883a 	add	r3,r3,r3
   25834:	29400e04 	addi	r5,r5,56
   25838:	18c7883a 	add	r3,r3,r3
   2583c:	18c7883a 	add	r3,r3,r3
   25840:	1909883a 	add	r4,r3,r4
   25844:	20c00017 	ldw	r3,0(r4)
   25848:	01c000f4 	movhi	r7,3
   2584c:	213ffe04 	addi	r4,r4,-8
   25850:	39c82d04 	addi	r7,r7,8372
   25854:	20c04426 	beq	r4,r3,25968 <_free_r+0x258>
   25858:	01ffff04 	movi	r7,-4
   2585c:	19400117 	ldw	r5,4(r3)
   25860:	29ca703a 	and	r5,r5,r7
   25864:	1140022e 	bgeu	r2,r5,25870 <_free_r+0x160>
   25868:	18c00217 	ldw	r3,8(r3)
   2586c:	20fffb1e 	bne	r4,r3,2585c <__alt_data_end+0xf402585c>
   25870:	19000317 	ldw	r4,12(r3)
   25874:	31000315 	stw	r4,12(r6)
   25878:	30c00215 	stw	r3,8(r6)
   2587c:	21800215 	stw	r6,8(r4)
   25880:	19800315 	stw	r6,12(r3)
   25884:	003fde06 	br	25800 <__alt_data_end+0xf4025800>
   25888:	29c00217 	ldw	r7,8(r5)
   2588c:	10c5883a 	add	r2,r2,r3
   25890:	00c000f4 	movhi	r3,3
   25894:	18c82f04 	addi	r3,r3,8380
   25898:	38c03b26 	beq	r7,r3,25988 <_free_r+0x278>
   2589c:	2a000317 	ldw	r8,12(r5)
   258a0:	11400054 	ori	r5,r2,1
   258a4:	3087883a 	add	r3,r6,r2
   258a8:	3a000315 	stw	r8,12(r7)
   258ac:	41c00215 	stw	r7,8(r8)
   258b0:	31400115 	stw	r5,4(r6)
   258b4:	18800015 	stw	r2,0(r3)
   258b8:	003fbd06 	br	257b0 <__alt_data_end+0xf40257b0>
   258bc:	39c0004c 	andi	r7,r7,1
   258c0:	10c5883a 	add	r2,r2,r3
   258c4:	3800071e 	bne	r7,zero,258e4 <_free_r+0x1d4>
   258c8:	81fffe17 	ldw	r7,-8(r16)
   258cc:	31cdc83a 	sub	r6,r6,r7
   258d0:	30c00317 	ldw	r3,12(r6)
   258d4:	31400217 	ldw	r5,8(r6)
   258d8:	11c5883a 	add	r2,r2,r7
   258dc:	28c00315 	stw	r3,12(r5)
   258e0:	19400215 	stw	r5,8(r3)
   258e4:	10c00054 	ori	r3,r2,1
   258e8:	30c00115 	stw	r3,4(r6)
   258ec:	00c000f4 	movhi	r3,3
   258f0:	18ce0e04 	addi	r3,r3,14392
   258f4:	18c00017 	ldw	r3,0(r3)
   258f8:	21800215 	stw	r6,8(r4)
   258fc:	10ffc036 	bltu	r2,r3,25800 <__alt_data_end+0xf4025800>
   25900:	008000f4 	movhi	r2,3
   25904:	10953e04 	addi	r2,r2,21752
   25908:	11400017 	ldw	r5,0(r2)
   2590c:	8809883a 	mov	r4,r17
   25910:	00255ec0 	call	255ec <_malloc_trim_r>
   25914:	003fba06 	br	25800 <__alt_data_end+0xf4025800>
   25918:	28c9883a 	add	r4,r5,r3
   2591c:	21000117 	ldw	r4,4(r4)
   25920:	2100004c 	andi	r4,r4,1
   25924:	2000391e 	bne	r4,zero,25a0c <_free_r+0x2fc>
   25928:	29c00217 	ldw	r7,8(r5)
   2592c:	29000317 	ldw	r4,12(r5)
   25930:	1885883a 	add	r2,r3,r2
   25934:	10c00054 	ori	r3,r2,1
   25938:	39000315 	stw	r4,12(r7)
   2593c:	21c00215 	stw	r7,8(r4)
   25940:	30c00115 	stw	r3,4(r6)
   25944:	308d883a 	add	r6,r6,r2
   25948:	30800015 	stw	r2,0(r6)
   2594c:	003fac06 	br	25800 <__alt_data_end+0xf4025800>
   25950:	00c00504 	movi	r3,20
   25954:	19401536 	bltu	r3,r5,259ac <_free_r+0x29c>
   25958:	28c01704 	addi	r3,r5,92
   2595c:	18c7883a 	add	r3,r3,r3
   25960:	294016c4 	addi	r5,r5,91
   25964:	003fb406 	br	25838 <__alt_data_end+0xf4025838>
   25968:	280bd0ba 	srai	r5,r5,2
   2596c:	00c00044 	movi	r3,1
   25970:	38800117 	ldw	r2,4(r7)
   25974:	194a983a 	sll	r5,r3,r5
   25978:	2007883a 	mov	r3,r4
   2597c:	2884b03a 	or	r2,r5,r2
   25980:	38800115 	stw	r2,4(r7)
   25984:	003fbb06 	br	25874 <__alt_data_end+0xf4025874>
   25988:	21800515 	stw	r6,20(r4)
   2598c:	21800415 	stw	r6,16(r4)
   25990:	10c00054 	ori	r3,r2,1
   25994:	31c00315 	stw	r7,12(r6)
   25998:	31c00215 	stw	r7,8(r6)
   2599c:	30c00115 	stw	r3,4(r6)
   259a0:	308d883a 	add	r6,r6,r2
   259a4:	30800015 	stw	r2,0(r6)
   259a8:	003f9506 	br	25800 <__alt_data_end+0xf4025800>
   259ac:	00c01504 	movi	r3,84
   259b0:	19400536 	bltu	r3,r5,259c8 <_free_r+0x2b8>
   259b4:	100ad33a 	srli	r5,r2,12
   259b8:	28c01bc4 	addi	r3,r5,111
   259bc:	18c7883a 	add	r3,r3,r3
   259c0:	29401b84 	addi	r5,r5,110
   259c4:	003f9c06 	br	25838 <__alt_data_end+0xf4025838>
   259c8:	00c05504 	movi	r3,340
   259cc:	19400536 	bltu	r3,r5,259e4 <_free_r+0x2d4>
   259d0:	100ad3fa 	srli	r5,r2,15
   259d4:	28c01e04 	addi	r3,r5,120
   259d8:	18c7883a 	add	r3,r3,r3
   259dc:	29401dc4 	addi	r5,r5,119
   259e0:	003f9506 	br	25838 <__alt_data_end+0xf4025838>
   259e4:	00c15504 	movi	r3,1364
   259e8:	19400536 	bltu	r3,r5,25a00 <_free_r+0x2f0>
   259ec:	100ad4ba 	srli	r5,r2,18
   259f0:	28c01f44 	addi	r3,r5,125
   259f4:	18c7883a 	add	r3,r3,r3
   259f8:	29401f04 	addi	r5,r5,124
   259fc:	003f8e06 	br	25838 <__alt_data_end+0xf4025838>
   25a00:	00c03f84 	movi	r3,254
   25a04:	01401f84 	movi	r5,126
   25a08:	003f8b06 	br	25838 <__alt_data_end+0xf4025838>
   25a0c:	10c00054 	ori	r3,r2,1
   25a10:	30c00115 	stw	r3,4(r6)
   25a14:	308d883a 	add	r6,r6,r2
   25a18:	30800015 	stw	r2,0(r6)
   25a1c:	003f7806 	br	25800 <__alt_data_end+0xf4025800>

00025a20 <__sfvwrite_r>:
   25a20:	30800217 	ldw	r2,8(r6)
   25a24:	10006726 	beq	r2,zero,25bc4 <__sfvwrite_r+0x1a4>
   25a28:	28c0030b 	ldhu	r3,12(r5)
   25a2c:	defff404 	addi	sp,sp,-48
   25a30:	dd400715 	stw	r21,28(sp)
   25a34:	dd000615 	stw	r20,24(sp)
   25a38:	dc000215 	stw	r16,8(sp)
   25a3c:	dfc00b15 	stw	ra,44(sp)
   25a40:	df000a15 	stw	fp,40(sp)
   25a44:	ddc00915 	stw	r23,36(sp)
   25a48:	dd800815 	stw	r22,32(sp)
   25a4c:	dcc00515 	stw	r19,20(sp)
   25a50:	dc800415 	stw	r18,16(sp)
   25a54:	dc400315 	stw	r17,12(sp)
   25a58:	1880020c 	andi	r2,r3,8
   25a5c:	2821883a 	mov	r16,r5
   25a60:	202b883a 	mov	r21,r4
   25a64:	3029883a 	mov	r20,r6
   25a68:	10002726 	beq	r2,zero,25b08 <__sfvwrite_r+0xe8>
   25a6c:	28800417 	ldw	r2,16(r5)
   25a70:	10002526 	beq	r2,zero,25b08 <__sfvwrite_r+0xe8>
   25a74:	1880008c 	andi	r2,r3,2
   25a78:	a4400017 	ldw	r17,0(r20)
   25a7c:	10002a26 	beq	r2,zero,25b28 <__sfvwrite_r+0x108>
   25a80:	05a00034 	movhi	r22,32768
   25a84:	0027883a 	mov	r19,zero
   25a88:	0025883a 	mov	r18,zero
   25a8c:	b5bf0004 	addi	r22,r22,-1024
   25a90:	980d883a 	mov	r6,r19
   25a94:	a809883a 	mov	r4,r21
   25a98:	90004626 	beq	r18,zero,25bb4 <__sfvwrite_r+0x194>
   25a9c:	900f883a 	mov	r7,r18
   25aa0:	b480022e 	bgeu	r22,r18,25aac <__sfvwrite_r+0x8c>
   25aa4:	01e00034 	movhi	r7,32768
   25aa8:	39ff0004 	addi	r7,r7,-1024
   25aac:	80800917 	ldw	r2,36(r16)
   25ab0:	81400717 	ldw	r5,28(r16)
   25ab4:	103ee83a 	callr	r2
   25ab8:	0080570e 	bge	zero,r2,25c18 <__sfvwrite_r+0x1f8>
   25abc:	a0c00217 	ldw	r3,8(r20)
   25ac0:	98a7883a 	add	r19,r19,r2
   25ac4:	90a5c83a 	sub	r18,r18,r2
   25ac8:	1885c83a 	sub	r2,r3,r2
   25acc:	a0800215 	stw	r2,8(r20)
   25ad0:	103fef1e 	bne	r2,zero,25a90 <__alt_data_end+0xf4025a90>
   25ad4:	0005883a 	mov	r2,zero
   25ad8:	dfc00b17 	ldw	ra,44(sp)
   25adc:	df000a17 	ldw	fp,40(sp)
   25ae0:	ddc00917 	ldw	r23,36(sp)
   25ae4:	dd800817 	ldw	r22,32(sp)
   25ae8:	dd400717 	ldw	r21,28(sp)
   25aec:	dd000617 	ldw	r20,24(sp)
   25af0:	dcc00517 	ldw	r19,20(sp)
   25af4:	dc800417 	ldw	r18,16(sp)
   25af8:	dc400317 	ldw	r17,12(sp)
   25afc:	dc000217 	ldw	r16,8(sp)
   25b00:	dec00c04 	addi	sp,sp,48
   25b04:	f800283a 	ret
   25b08:	800b883a 	mov	r5,r16
   25b0c:	a809883a 	mov	r4,r21
   25b10:	00235c80 	call	235c8 <__swsetup_r>
   25b14:	1000eb1e 	bne	r2,zero,25ec4 <__sfvwrite_r+0x4a4>
   25b18:	80c0030b 	ldhu	r3,12(r16)
   25b1c:	a4400017 	ldw	r17,0(r20)
   25b20:	1880008c 	andi	r2,r3,2
   25b24:	103fd61e 	bne	r2,zero,25a80 <__alt_data_end+0xf4025a80>
   25b28:	1880004c 	andi	r2,r3,1
   25b2c:	10003f1e 	bne	r2,zero,25c2c <__sfvwrite_r+0x20c>
   25b30:	0039883a 	mov	fp,zero
   25b34:	0025883a 	mov	r18,zero
   25b38:	90001a26 	beq	r18,zero,25ba4 <__sfvwrite_r+0x184>
   25b3c:	1880800c 	andi	r2,r3,512
   25b40:	84c00217 	ldw	r19,8(r16)
   25b44:	10002126 	beq	r2,zero,25bcc <__sfvwrite_r+0x1ac>
   25b48:	982f883a 	mov	r23,r19
   25b4c:	94c09336 	bltu	r18,r19,25d9c <__sfvwrite_r+0x37c>
   25b50:	1881200c 	andi	r2,r3,1152
   25b54:	10009e1e 	bne	r2,zero,25dd0 <__sfvwrite_r+0x3b0>
   25b58:	81000017 	ldw	r4,0(r16)
   25b5c:	b80d883a 	mov	r6,r23
   25b60:	e00b883a 	mov	r5,fp
   25b64:	0026d340 	call	26d34 <memmove>
   25b68:	80c00217 	ldw	r3,8(r16)
   25b6c:	81000017 	ldw	r4,0(r16)
   25b70:	9005883a 	mov	r2,r18
   25b74:	1ce7c83a 	sub	r19,r3,r19
   25b78:	25cf883a 	add	r7,r4,r23
   25b7c:	84c00215 	stw	r19,8(r16)
   25b80:	81c00015 	stw	r7,0(r16)
   25b84:	a0c00217 	ldw	r3,8(r20)
   25b88:	e0b9883a 	add	fp,fp,r2
   25b8c:	90a5c83a 	sub	r18,r18,r2
   25b90:	18a7c83a 	sub	r19,r3,r2
   25b94:	a4c00215 	stw	r19,8(r20)
   25b98:	983fce26 	beq	r19,zero,25ad4 <__alt_data_end+0xf4025ad4>
   25b9c:	80c0030b 	ldhu	r3,12(r16)
   25ba0:	903fe61e 	bne	r18,zero,25b3c <__alt_data_end+0xf4025b3c>
   25ba4:	8f000017 	ldw	fp,0(r17)
   25ba8:	8c800117 	ldw	r18,4(r17)
   25bac:	8c400204 	addi	r17,r17,8
   25bb0:	003fe106 	br	25b38 <__alt_data_end+0xf4025b38>
   25bb4:	8cc00017 	ldw	r19,0(r17)
   25bb8:	8c800117 	ldw	r18,4(r17)
   25bbc:	8c400204 	addi	r17,r17,8
   25bc0:	003fb306 	br	25a90 <__alt_data_end+0xf4025a90>
   25bc4:	0005883a 	mov	r2,zero
   25bc8:	f800283a 	ret
   25bcc:	81000017 	ldw	r4,0(r16)
   25bd0:	80800417 	ldw	r2,16(r16)
   25bd4:	11005736 	bltu	r2,r4,25d34 <__sfvwrite_r+0x314>
   25bd8:	85c00517 	ldw	r23,20(r16)
   25bdc:	95c05536 	bltu	r18,r23,25d34 <__sfvwrite_r+0x314>
   25be0:	00a00034 	movhi	r2,32768
   25be4:	10bfffc4 	addi	r2,r2,-1
   25be8:	9009883a 	mov	r4,r18
   25bec:	1480012e 	bgeu	r2,r18,25bf4 <__sfvwrite_r+0x1d4>
   25bf0:	1009883a 	mov	r4,r2
   25bf4:	b80b883a 	mov	r5,r23
   25bf8:	002b2240 	call	2b224 <__divsi3>
   25bfc:	15cf383a 	mul	r7,r2,r23
   25c00:	81400717 	ldw	r5,28(r16)
   25c04:	80800917 	ldw	r2,36(r16)
   25c08:	e00d883a 	mov	r6,fp
   25c0c:	a809883a 	mov	r4,r21
   25c10:	103ee83a 	callr	r2
   25c14:	00bfdb16 	blt	zero,r2,25b84 <__alt_data_end+0xf4025b84>
   25c18:	8080030b 	ldhu	r2,12(r16)
   25c1c:	10801014 	ori	r2,r2,64
   25c20:	8080030d 	sth	r2,12(r16)
   25c24:	00bfffc4 	movi	r2,-1
   25c28:	003fab06 	br	25ad8 <__alt_data_end+0xf4025ad8>
   25c2c:	0027883a 	mov	r19,zero
   25c30:	0011883a 	mov	r8,zero
   25c34:	0039883a 	mov	fp,zero
   25c38:	0025883a 	mov	r18,zero
   25c3c:	90001f26 	beq	r18,zero,25cbc <__sfvwrite_r+0x29c>
   25c40:	40005a26 	beq	r8,zero,25dac <__sfvwrite_r+0x38c>
   25c44:	982d883a 	mov	r22,r19
   25c48:	94c0012e 	bgeu	r18,r19,25c50 <__sfvwrite_r+0x230>
   25c4c:	902d883a 	mov	r22,r18
   25c50:	81000017 	ldw	r4,0(r16)
   25c54:	80800417 	ldw	r2,16(r16)
   25c58:	b02f883a 	mov	r23,r22
   25c5c:	81c00517 	ldw	r7,20(r16)
   25c60:	1100032e 	bgeu	r2,r4,25c70 <__sfvwrite_r+0x250>
   25c64:	80c00217 	ldw	r3,8(r16)
   25c68:	38c7883a 	add	r3,r7,r3
   25c6c:	1d801816 	blt	r3,r22,25cd0 <__sfvwrite_r+0x2b0>
   25c70:	b1c03e16 	blt	r22,r7,25d6c <__sfvwrite_r+0x34c>
   25c74:	80800917 	ldw	r2,36(r16)
   25c78:	81400717 	ldw	r5,28(r16)
   25c7c:	e00d883a 	mov	r6,fp
   25c80:	da000115 	stw	r8,4(sp)
   25c84:	a809883a 	mov	r4,r21
   25c88:	103ee83a 	callr	r2
   25c8c:	102f883a 	mov	r23,r2
   25c90:	da000117 	ldw	r8,4(sp)
   25c94:	00bfe00e 	bge	zero,r2,25c18 <__alt_data_end+0xf4025c18>
   25c98:	9de7c83a 	sub	r19,r19,r23
   25c9c:	98001f26 	beq	r19,zero,25d1c <__sfvwrite_r+0x2fc>
   25ca0:	a0800217 	ldw	r2,8(r20)
   25ca4:	e5f9883a 	add	fp,fp,r23
   25ca8:	95e5c83a 	sub	r18,r18,r23
   25cac:	15efc83a 	sub	r23,r2,r23
   25cb0:	a5c00215 	stw	r23,8(r20)
   25cb4:	b83f8726 	beq	r23,zero,25ad4 <__alt_data_end+0xf4025ad4>
   25cb8:	903fe11e 	bne	r18,zero,25c40 <__alt_data_end+0xf4025c40>
   25cbc:	8f000017 	ldw	fp,0(r17)
   25cc0:	8c800117 	ldw	r18,4(r17)
   25cc4:	0011883a 	mov	r8,zero
   25cc8:	8c400204 	addi	r17,r17,8
   25ccc:	003fdb06 	br	25c3c <__alt_data_end+0xf4025c3c>
   25cd0:	180d883a 	mov	r6,r3
   25cd4:	e00b883a 	mov	r5,fp
   25cd8:	da000115 	stw	r8,4(sp)
   25cdc:	d8c00015 	stw	r3,0(sp)
   25ce0:	0026d340 	call	26d34 <memmove>
   25ce4:	d8c00017 	ldw	r3,0(sp)
   25ce8:	80800017 	ldw	r2,0(r16)
   25cec:	800b883a 	mov	r5,r16
   25cf0:	a809883a 	mov	r4,r21
   25cf4:	10c5883a 	add	r2,r2,r3
   25cf8:	80800015 	stw	r2,0(r16)
   25cfc:	d8c00015 	stw	r3,0(sp)
   25d00:	00251c00 	call	251c0 <_fflush_r>
   25d04:	d8c00017 	ldw	r3,0(sp)
   25d08:	da000117 	ldw	r8,4(sp)
   25d0c:	103fc21e 	bne	r2,zero,25c18 <__alt_data_end+0xf4025c18>
   25d10:	182f883a 	mov	r23,r3
   25d14:	9de7c83a 	sub	r19,r19,r23
   25d18:	983fe11e 	bne	r19,zero,25ca0 <__alt_data_end+0xf4025ca0>
   25d1c:	800b883a 	mov	r5,r16
   25d20:	a809883a 	mov	r4,r21
   25d24:	00251c00 	call	251c0 <_fflush_r>
   25d28:	103fbb1e 	bne	r2,zero,25c18 <__alt_data_end+0xf4025c18>
   25d2c:	0011883a 	mov	r8,zero
   25d30:	003fdb06 	br	25ca0 <__alt_data_end+0xf4025ca0>
   25d34:	94c0012e 	bgeu	r18,r19,25d3c <__sfvwrite_r+0x31c>
   25d38:	9027883a 	mov	r19,r18
   25d3c:	980d883a 	mov	r6,r19
   25d40:	e00b883a 	mov	r5,fp
   25d44:	0026d340 	call	26d34 <memmove>
   25d48:	80800217 	ldw	r2,8(r16)
   25d4c:	80c00017 	ldw	r3,0(r16)
   25d50:	14c5c83a 	sub	r2,r2,r19
   25d54:	1cc7883a 	add	r3,r3,r19
   25d58:	80800215 	stw	r2,8(r16)
   25d5c:	80c00015 	stw	r3,0(r16)
   25d60:	10004326 	beq	r2,zero,25e70 <__sfvwrite_r+0x450>
   25d64:	9805883a 	mov	r2,r19
   25d68:	003f8606 	br	25b84 <__alt_data_end+0xf4025b84>
   25d6c:	b00d883a 	mov	r6,r22
   25d70:	e00b883a 	mov	r5,fp
   25d74:	da000115 	stw	r8,4(sp)
   25d78:	0026d340 	call	26d34 <memmove>
   25d7c:	80800217 	ldw	r2,8(r16)
   25d80:	80c00017 	ldw	r3,0(r16)
   25d84:	da000117 	ldw	r8,4(sp)
   25d88:	1585c83a 	sub	r2,r2,r22
   25d8c:	1dad883a 	add	r22,r3,r22
   25d90:	80800215 	stw	r2,8(r16)
   25d94:	85800015 	stw	r22,0(r16)
   25d98:	003fbf06 	br	25c98 <__alt_data_end+0xf4025c98>
   25d9c:	81000017 	ldw	r4,0(r16)
   25da0:	9027883a 	mov	r19,r18
   25da4:	902f883a 	mov	r23,r18
   25da8:	003f6c06 	br	25b5c <__alt_data_end+0xf4025b5c>
   25dac:	900d883a 	mov	r6,r18
   25db0:	01400284 	movi	r5,10
   25db4:	e009883a 	mov	r4,fp
   25db8:	0026b080 	call	26b08 <memchr>
   25dbc:	10003e26 	beq	r2,zero,25eb8 <__sfvwrite_r+0x498>
   25dc0:	10800044 	addi	r2,r2,1
   25dc4:	1727c83a 	sub	r19,r2,fp
   25dc8:	02000044 	movi	r8,1
   25dcc:	003f9d06 	br	25c44 <__alt_data_end+0xf4025c44>
   25dd0:	80800517 	ldw	r2,20(r16)
   25dd4:	81400417 	ldw	r5,16(r16)
   25dd8:	81c00017 	ldw	r7,0(r16)
   25ddc:	10a7883a 	add	r19,r2,r2
   25de0:	9885883a 	add	r2,r19,r2
   25de4:	1026d7fa 	srli	r19,r2,31
   25de8:	396dc83a 	sub	r22,r7,r5
   25dec:	b1000044 	addi	r4,r22,1
   25df0:	9885883a 	add	r2,r19,r2
   25df4:	1027d07a 	srai	r19,r2,1
   25df8:	2485883a 	add	r2,r4,r18
   25dfc:	980d883a 	mov	r6,r19
   25e00:	9880022e 	bgeu	r19,r2,25e0c <__sfvwrite_r+0x3ec>
   25e04:	1027883a 	mov	r19,r2
   25e08:	100d883a 	mov	r6,r2
   25e0c:	18c1000c 	andi	r3,r3,1024
   25e10:	18001c26 	beq	r3,zero,25e84 <__sfvwrite_r+0x464>
   25e14:	300b883a 	mov	r5,r6
   25e18:	a809883a 	mov	r4,r21
   25e1c:	00262fc0 	call	262fc <_malloc_r>
   25e20:	102f883a 	mov	r23,r2
   25e24:	10002926 	beq	r2,zero,25ecc <__sfvwrite_r+0x4ac>
   25e28:	81400417 	ldw	r5,16(r16)
   25e2c:	b00d883a 	mov	r6,r22
   25e30:	1009883a 	mov	r4,r2
   25e34:	0026bec0 	call	26bec <memcpy>
   25e38:	8080030b 	ldhu	r2,12(r16)
   25e3c:	00fedfc4 	movi	r3,-1153
   25e40:	10c4703a 	and	r2,r2,r3
   25e44:	10802014 	ori	r2,r2,128
   25e48:	8080030d 	sth	r2,12(r16)
   25e4c:	bd89883a 	add	r4,r23,r22
   25e50:	9d8fc83a 	sub	r7,r19,r22
   25e54:	85c00415 	stw	r23,16(r16)
   25e58:	84c00515 	stw	r19,20(r16)
   25e5c:	81000015 	stw	r4,0(r16)
   25e60:	9027883a 	mov	r19,r18
   25e64:	81c00215 	stw	r7,8(r16)
   25e68:	902f883a 	mov	r23,r18
   25e6c:	003f3b06 	br	25b5c <__alt_data_end+0xf4025b5c>
   25e70:	800b883a 	mov	r5,r16
   25e74:	a809883a 	mov	r4,r21
   25e78:	00251c00 	call	251c0 <_fflush_r>
   25e7c:	103fb926 	beq	r2,zero,25d64 <__alt_data_end+0xf4025d64>
   25e80:	003f6506 	br	25c18 <__alt_data_end+0xf4025c18>
   25e84:	a809883a 	mov	r4,r21
   25e88:	0027fb40 	call	27fb4 <_realloc_r>
   25e8c:	102f883a 	mov	r23,r2
   25e90:	103fee1e 	bne	r2,zero,25e4c <__alt_data_end+0xf4025e4c>
   25e94:	81400417 	ldw	r5,16(r16)
   25e98:	a809883a 	mov	r4,r21
   25e9c:	00257100 	call	25710 <_free_r>
   25ea0:	8080030b 	ldhu	r2,12(r16)
   25ea4:	00ffdfc4 	movi	r3,-129
   25ea8:	1884703a 	and	r2,r3,r2
   25eac:	00c00304 	movi	r3,12
   25eb0:	a8c00015 	stw	r3,0(r21)
   25eb4:	003f5906 	br	25c1c <__alt_data_end+0xf4025c1c>
   25eb8:	94c00044 	addi	r19,r18,1
   25ebc:	02000044 	movi	r8,1
   25ec0:	003f6006 	br	25c44 <__alt_data_end+0xf4025c44>
   25ec4:	00bfffc4 	movi	r2,-1
   25ec8:	003f0306 	br	25ad8 <__alt_data_end+0xf4025ad8>
   25ecc:	00800304 	movi	r2,12
   25ed0:	a8800015 	stw	r2,0(r21)
   25ed4:	8080030b 	ldhu	r2,12(r16)
   25ed8:	003f5006 	br	25c1c <__alt_data_end+0xf4025c1c>

00025edc <_fwalk>:
   25edc:	defff704 	addi	sp,sp,-36
   25ee0:	dd000415 	stw	r20,16(sp)
   25ee4:	dfc00815 	stw	ra,32(sp)
   25ee8:	ddc00715 	stw	r23,28(sp)
   25eec:	dd800615 	stw	r22,24(sp)
   25ef0:	dd400515 	stw	r21,20(sp)
   25ef4:	dcc00315 	stw	r19,12(sp)
   25ef8:	dc800215 	stw	r18,8(sp)
   25efc:	dc400115 	stw	r17,4(sp)
   25f00:	dc000015 	stw	r16,0(sp)
   25f04:	2500b804 	addi	r20,r4,736
   25f08:	a0002326 	beq	r20,zero,25f98 <_fwalk+0xbc>
   25f0c:	282b883a 	mov	r21,r5
   25f10:	002f883a 	mov	r23,zero
   25f14:	05800044 	movi	r22,1
   25f18:	04ffffc4 	movi	r19,-1
   25f1c:	a4400117 	ldw	r17,4(r20)
   25f20:	a4800217 	ldw	r18,8(r20)
   25f24:	8c7fffc4 	addi	r17,r17,-1
   25f28:	88000d16 	blt	r17,zero,25f60 <_fwalk+0x84>
   25f2c:	94000304 	addi	r16,r18,12
   25f30:	94800384 	addi	r18,r18,14
   25f34:	8080000b 	ldhu	r2,0(r16)
   25f38:	8c7fffc4 	addi	r17,r17,-1
   25f3c:	813ffd04 	addi	r4,r16,-12
   25f40:	b080042e 	bgeu	r22,r2,25f54 <_fwalk+0x78>
   25f44:	9080000f 	ldh	r2,0(r18)
   25f48:	14c00226 	beq	r2,r19,25f54 <_fwalk+0x78>
   25f4c:	a83ee83a 	callr	r21
   25f50:	b8aeb03a 	or	r23,r23,r2
   25f54:	84001a04 	addi	r16,r16,104
   25f58:	94801a04 	addi	r18,r18,104
   25f5c:	8cfff51e 	bne	r17,r19,25f34 <__alt_data_end+0xf4025f34>
   25f60:	a5000017 	ldw	r20,0(r20)
   25f64:	a03fed1e 	bne	r20,zero,25f1c <__alt_data_end+0xf4025f1c>
   25f68:	b805883a 	mov	r2,r23
   25f6c:	dfc00817 	ldw	ra,32(sp)
   25f70:	ddc00717 	ldw	r23,28(sp)
   25f74:	dd800617 	ldw	r22,24(sp)
   25f78:	dd400517 	ldw	r21,20(sp)
   25f7c:	dd000417 	ldw	r20,16(sp)
   25f80:	dcc00317 	ldw	r19,12(sp)
   25f84:	dc800217 	ldw	r18,8(sp)
   25f88:	dc400117 	ldw	r17,4(sp)
   25f8c:	dc000017 	ldw	r16,0(sp)
   25f90:	dec00904 	addi	sp,sp,36
   25f94:	f800283a 	ret
   25f98:	002f883a 	mov	r23,zero
   25f9c:	003ff206 	br	25f68 <__alt_data_end+0xf4025f68>

00025fa0 <_fwalk_reent>:
   25fa0:	defff704 	addi	sp,sp,-36
   25fa4:	dd000415 	stw	r20,16(sp)
   25fa8:	dfc00815 	stw	ra,32(sp)
   25fac:	ddc00715 	stw	r23,28(sp)
   25fb0:	dd800615 	stw	r22,24(sp)
   25fb4:	dd400515 	stw	r21,20(sp)
   25fb8:	dcc00315 	stw	r19,12(sp)
   25fbc:	dc800215 	stw	r18,8(sp)
   25fc0:	dc400115 	stw	r17,4(sp)
   25fc4:	dc000015 	stw	r16,0(sp)
   25fc8:	2500b804 	addi	r20,r4,736
   25fcc:	a0002326 	beq	r20,zero,2605c <_fwalk_reent+0xbc>
   25fd0:	282b883a 	mov	r21,r5
   25fd4:	2027883a 	mov	r19,r4
   25fd8:	002f883a 	mov	r23,zero
   25fdc:	05800044 	movi	r22,1
   25fe0:	04bfffc4 	movi	r18,-1
   25fe4:	a4400117 	ldw	r17,4(r20)
   25fe8:	a4000217 	ldw	r16,8(r20)
   25fec:	8c7fffc4 	addi	r17,r17,-1
   25ff0:	88000c16 	blt	r17,zero,26024 <_fwalk_reent+0x84>
   25ff4:	84000304 	addi	r16,r16,12
   25ff8:	8080000b 	ldhu	r2,0(r16)
   25ffc:	8c7fffc4 	addi	r17,r17,-1
   26000:	817ffd04 	addi	r5,r16,-12
   26004:	b080052e 	bgeu	r22,r2,2601c <_fwalk_reent+0x7c>
   26008:	8080008f 	ldh	r2,2(r16)
   2600c:	9809883a 	mov	r4,r19
   26010:	14800226 	beq	r2,r18,2601c <_fwalk_reent+0x7c>
   26014:	a83ee83a 	callr	r21
   26018:	b8aeb03a 	or	r23,r23,r2
   2601c:	84001a04 	addi	r16,r16,104
   26020:	8cbff51e 	bne	r17,r18,25ff8 <__alt_data_end+0xf4025ff8>
   26024:	a5000017 	ldw	r20,0(r20)
   26028:	a03fee1e 	bne	r20,zero,25fe4 <__alt_data_end+0xf4025fe4>
   2602c:	b805883a 	mov	r2,r23
   26030:	dfc00817 	ldw	ra,32(sp)
   26034:	ddc00717 	ldw	r23,28(sp)
   26038:	dd800617 	ldw	r22,24(sp)
   2603c:	dd400517 	ldw	r21,20(sp)
   26040:	dd000417 	ldw	r20,16(sp)
   26044:	dcc00317 	ldw	r19,12(sp)
   26048:	dc800217 	ldw	r18,8(sp)
   2604c:	dc400117 	ldw	r17,4(sp)
   26050:	dc000017 	ldw	r16,0(sp)
   26054:	dec00904 	addi	sp,sp,36
   26058:	f800283a 	ret
   2605c:	002f883a 	mov	r23,zero
   26060:	003ff206 	br	2602c <__alt_data_end+0xf402602c>

00026064 <_setlocale_r>:
   26064:	30001b26 	beq	r6,zero,260d4 <_setlocale_r+0x70>
   26068:	014000f4 	movhi	r5,3
   2606c:	defffe04 	addi	sp,sp,-8
   26070:	29468f04 	addi	r5,r5,6716
   26074:	3009883a 	mov	r4,r6
   26078:	dc000015 	stw	r16,0(sp)
   2607c:	dfc00115 	stw	ra,4(sp)
   26080:	3021883a 	mov	r16,r6
   26084:	002871c0 	call	2871c <strcmp>
   26088:	1000061e 	bne	r2,zero,260a4 <_setlocale_r+0x40>
   2608c:	008000f4 	movhi	r2,3
   26090:	10868e04 	addi	r2,r2,6712
   26094:	dfc00117 	ldw	ra,4(sp)
   26098:	dc000017 	ldw	r16,0(sp)
   2609c:	dec00204 	addi	sp,sp,8
   260a0:	f800283a 	ret
   260a4:	014000f4 	movhi	r5,3
   260a8:	29468e04 	addi	r5,r5,6712
   260ac:	8009883a 	mov	r4,r16
   260b0:	002871c0 	call	2871c <strcmp>
   260b4:	103ff526 	beq	r2,zero,2608c <__alt_data_end+0xf402608c>
   260b8:	014000f4 	movhi	r5,3
   260bc:	29467904 	addi	r5,r5,6628
   260c0:	8009883a 	mov	r4,r16
   260c4:	002871c0 	call	2871c <strcmp>
   260c8:	103ff026 	beq	r2,zero,2608c <__alt_data_end+0xf402608c>
   260cc:	0005883a 	mov	r2,zero
   260d0:	003ff006 	br	26094 <__alt_data_end+0xf4026094>
   260d4:	008000f4 	movhi	r2,3
   260d8:	10868e04 	addi	r2,r2,6712
   260dc:	f800283a 	ret

000260e0 <__locale_charset>:
   260e0:	008000f4 	movhi	r2,3
   260e4:	10881704 	addi	r2,r2,8284
   260e8:	f800283a 	ret

000260ec <__locale_mb_cur_max>:
   260ec:	008000f4 	movhi	r2,3
   260f0:	108e0c04 	addi	r2,r2,14384
   260f4:	10800017 	ldw	r2,0(r2)
   260f8:	f800283a 	ret

000260fc <__locale_msgcharset>:
   260fc:	008000f4 	movhi	r2,3
   26100:	10880f04 	addi	r2,r2,8252
   26104:	f800283a 	ret

00026108 <__locale_cjk_lang>:
   26108:	0005883a 	mov	r2,zero
   2610c:	f800283a 	ret

00026110 <_localeconv_r>:
   26110:	008000f4 	movhi	r2,3
   26114:	10881f04 	addi	r2,r2,8316
   26118:	f800283a 	ret

0002611c <setlocale>:
   2611c:	008000f4 	movhi	r2,3
   26120:	108e0b04 	addi	r2,r2,14380
   26124:	280d883a 	mov	r6,r5
   26128:	200b883a 	mov	r5,r4
   2612c:	11000017 	ldw	r4,0(r2)
   26130:	00260641 	jmpi	26064 <_setlocale_r>

00026134 <localeconv>:
   26134:	008000f4 	movhi	r2,3
   26138:	10881f04 	addi	r2,r2,8316
   2613c:	f800283a 	ret

00026140 <__smakebuf_r>:
   26140:	2880030b 	ldhu	r2,12(r5)
   26144:	10c0008c 	andi	r3,r2,2
   26148:	1800411e 	bne	r3,zero,26250 <__smakebuf_r+0x110>
   2614c:	deffec04 	addi	sp,sp,-80
   26150:	dc000f15 	stw	r16,60(sp)
   26154:	2821883a 	mov	r16,r5
   26158:	2940038f 	ldh	r5,14(r5)
   2615c:	dc401015 	stw	r17,64(sp)
   26160:	dfc01315 	stw	ra,76(sp)
   26164:	dcc01215 	stw	r19,72(sp)
   26168:	dc801115 	stw	r18,68(sp)
   2616c:	2023883a 	mov	r17,r4
   26170:	28001c16 	blt	r5,zero,261e4 <__smakebuf_r+0xa4>
   26174:	d80d883a 	mov	r6,sp
   26178:	002a2c40 	call	2a2c4 <_fstat_r>
   2617c:	10001816 	blt	r2,zero,261e0 <__smakebuf_r+0xa0>
   26180:	d8800117 	ldw	r2,4(sp)
   26184:	00e00014 	movui	r3,32768
   26188:	10bc000c 	andi	r2,r2,61440
   2618c:	14c80020 	cmpeqi	r19,r2,8192
   26190:	10c03726 	beq	r2,r3,26270 <__smakebuf_r+0x130>
   26194:	80c0030b 	ldhu	r3,12(r16)
   26198:	18c20014 	ori	r3,r3,2048
   2619c:	80c0030d 	sth	r3,12(r16)
   261a0:	00c80004 	movi	r3,8192
   261a4:	10c0521e 	bne	r2,r3,262f0 <__smakebuf_r+0x1b0>
   261a8:	8140038f 	ldh	r5,14(r16)
   261ac:	8809883a 	mov	r4,r17
   261b0:	002a3200 	call	2a320 <_isatty_r>
   261b4:	10004c26 	beq	r2,zero,262e8 <__smakebuf_r+0x1a8>
   261b8:	8080030b 	ldhu	r2,12(r16)
   261bc:	80c010c4 	addi	r3,r16,67
   261c0:	80c00015 	stw	r3,0(r16)
   261c4:	10800054 	ori	r2,r2,1
   261c8:	8080030d 	sth	r2,12(r16)
   261cc:	00800044 	movi	r2,1
   261d0:	80c00415 	stw	r3,16(r16)
   261d4:	80800515 	stw	r2,20(r16)
   261d8:	04810004 	movi	r18,1024
   261dc:	00000706 	br	261fc <__smakebuf_r+0xbc>
   261e0:	8080030b 	ldhu	r2,12(r16)
   261e4:	10c0200c 	andi	r3,r2,128
   261e8:	18001f1e 	bne	r3,zero,26268 <__smakebuf_r+0x128>
   261ec:	04810004 	movi	r18,1024
   261f0:	10820014 	ori	r2,r2,2048
   261f4:	8080030d 	sth	r2,12(r16)
   261f8:	0027883a 	mov	r19,zero
   261fc:	900b883a 	mov	r5,r18
   26200:	8809883a 	mov	r4,r17
   26204:	00262fc0 	call	262fc <_malloc_r>
   26208:	10002c26 	beq	r2,zero,262bc <__smakebuf_r+0x17c>
   2620c:	80c0030b 	ldhu	r3,12(r16)
   26210:	010000b4 	movhi	r4,2
   26214:	21149504 	addi	r4,r4,21076
   26218:	89000f15 	stw	r4,60(r17)
   2621c:	18c02014 	ori	r3,r3,128
   26220:	80c0030d 	sth	r3,12(r16)
   26224:	80800015 	stw	r2,0(r16)
   26228:	80800415 	stw	r2,16(r16)
   2622c:	84800515 	stw	r18,20(r16)
   26230:	98001a1e 	bne	r19,zero,2629c <__smakebuf_r+0x15c>
   26234:	dfc01317 	ldw	ra,76(sp)
   26238:	dcc01217 	ldw	r19,72(sp)
   2623c:	dc801117 	ldw	r18,68(sp)
   26240:	dc401017 	ldw	r17,64(sp)
   26244:	dc000f17 	ldw	r16,60(sp)
   26248:	dec01404 	addi	sp,sp,80
   2624c:	f800283a 	ret
   26250:	288010c4 	addi	r2,r5,67
   26254:	28800015 	stw	r2,0(r5)
   26258:	28800415 	stw	r2,16(r5)
   2625c:	00800044 	movi	r2,1
   26260:	28800515 	stw	r2,20(r5)
   26264:	f800283a 	ret
   26268:	04801004 	movi	r18,64
   2626c:	003fe006 	br	261f0 <__alt_data_end+0xf40261f0>
   26270:	81000a17 	ldw	r4,40(r16)
   26274:	00c000f4 	movhi	r3,3
   26278:	18e1ae04 	addi	r3,r3,-31048
   2627c:	20ffc51e 	bne	r4,r3,26194 <__alt_data_end+0xf4026194>
   26280:	8080030b 	ldhu	r2,12(r16)
   26284:	04810004 	movi	r18,1024
   26288:	84801315 	stw	r18,76(r16)
   2628c:	1484b03a 	or	r2,r2,r18
   26290:	8080030d 	sth	r2,12(r16)
   26294:	0027883a 	mov	r19,zero
   26298:	003fd806 	br	261fc <__alt_data_end+0xf40261fc>
   2629c:	8140038f 	ldh	r5,14(r16)
   262a0:	8809883a 	mov	r4,r17
   262a4:	002a3200 	call	2a320 <_isatty_r>
   262a8:	103fe226 	beq	r2,zero,26234 <__alt_data_end+0xf4026234>
   262ac:	8080030b 	ldhu	r2,12(r16)
   262b0:	10800054 	ori	r2,r2,1
   262b4:	8080030d 	sth	r2,12(r16)
   262b8:	003fde06 	br	26234 <__alt_data_end+0xf4026234>
   262bc:	8080030b 	ldhu	r2,12(r16)
   262c0:	10c0800c 	andi	r3,r2,512
   262c4:	183fdb1e 	bne	r3,zero,26234 <__alt_data_end+0xf4026234>
   262c8:	10800094 	ori	r2,r2,2
   262cc:	80c010c4 	addi	r3,r16,67
   262d0:	8080030d 	sth	r2,12(r16)
   262d4:	00800044 	movi	r2,1
   262d8:	80c00015 	stw	r3,0(r16)
   262dc:	80c00415 	stw	r3,16(r16)
   262e0:	80800515 	stw	r2,20(r16)
   262e4:	003fd306 	br	26234 <__alt_data_end+0xf4026234>
   262e8:	04810004 	movi	r18,1024
   262ec:	003fc306 	br	261fc <__alt_data_end+0xf40261fc>
   262f0:	0027883a 	mov	r19,zero
   262f4:	04810004 	movi	r18,1024
   262f8:	003fc006 	br	261fc <__alt_data_end+0xf40261fc>

000262fc <_malloc_r>:
   262fc:	defff504 	addi	sp,sp,-44
   26300:	dc800315 	stw	r18,12(sp)
   26304:	dfc00a15 	stw	ra,40(sp)
   26308:	df000915 	stw	fp,36(sp)
   2630c:	ddc00815 	stw	r23,32(sp)
   26310:	dd800715 	stw	r22,28(sp)
   26314:	dd400615 	stw	r21,24(sp)
   26318:	dd000515 	stw	r20,20(sp)
   2631c:	dcc00415 	stw	r19,16(sp)
   26320:	dc400215 	stw	r17,8(sp)
   26324:	dc000115 	stw	r16,4(sp)
   26328:	288002c4 	addi	r2,r5,11
   2632c:	00c00584 	movi	r3,22
   26330:	2025883a 	mov	r18,r4
   26334:	18807f2e 	bgeu	r3,r2,26534 <_malloc_r+0x238>
   26338:	047ffe04 	movi	r17,-8
   2633c:	1462703a 	and	r17,r2,r17
   26340:	8800a316 	blt	r17,zero,265d0 <_malloc_r+0x2d4>
   26344:	8940a236 	bltu	r17,r5,265d0 <_malloc_r+0x2d4>
   26348:	002df580 	call	2df58 <__malloc_lock>
   2634c:	00807dc4 	movi	r2,503
   26350:	1441e92e 	bgeu	r2,r17,26af8 <_malloc_r+0x7fc>
   26354:	8804d27a 	srli	r2,r17,9
   26358:	1000a126 	beq	r2,zero,265e0 <_malloc_r+0x2e4>
   2635c:	00c00104 	movi	r3,4
   26360:	18811e36 	bltu	r3,r2,267dc <_malloc_r+0x4e0>
   26364:	8804d1ba 	srli	r2,r17,6
   26368:	12000e44 	addi	r8,r2,57
   2636c:	11c00e04 	addi	r7,r2,56
   26370:	4209883a 	add	r4,r8,r8
   26374:	04c000f4 	movhi	r19,3
   26378:	2109883a 	add	r4,r4,r4
   2637c:	9cc82d04 	addi	r19,r19,8372
   26380:	2109883a 	add	r4,r4,r4
   26384:	9909883a 	add	r4,r19,r4
   26388:	24000117 	ldw	r16,4(r4)
   2638c:	213ffe04 	addi	r4,r4,-8
   26390:	24009726 	beq	r4,r16,265f0 <_malloc_r+0x2f4>
   26394:	80800117 	ldw	r2,4(r16)
   26398:	01bfff04 	movi	r6,-4
   2639c:	014003c4 	movi	r5,15
   263a0:	1184703a 	and	r2,r2,r6
   263a4:	1447c83a 	sub	r3,r2,r17
   263a8:	28c00716 	blt	r5,r3,263c8 <_malloc_r+0xcc>
   263ac:	1800920e 	bge	r3,zero,265f8 <_malloc_r+0x2fc>
   263b0:	84000317 	ldw	r16,12(r16)
   263b4:	24008e26 	beq	r4,r16,265f0 <_malloc_r+0x2f4>
   263b8:	80800117 	ldw	r2,4(r16)
   263bc:	1184703a 	and	r2,r2,r6
   263c0:	1447c83a 	sub	r3,r2,r17
   263c4:	28fff90e 	bge	r5,r3,263ac <__alt_data_end+0xf40263ac>
   263c8:	3809883a 	mov	r4,r7
   263cc:	018000f4 	movhi	r6,3
   263d0:	9c000417 	ldw	r16,16(r19)
   263d4:	31882d04 	addi	r6,r6,8372
   263d8:	32000204 	addi	r8,r6,8
   263dc:	82013426 	beq	r16,r8,268b0 <_malloc_r+0x5b4>
   263e0:	80c00117 	ldw	r3,4(r16)
   263e4:	00bfff04 	movi	r2,-4
   263e8:	188e703a 	and	r7,r3,r2
   263ec:	3c45c83a 	sub	r2,r7,r17
   263f0:	00c003c4 	movi	r3,15
   263f4:	18811f16 	blt	r3,r2,26874 <_malloc_r+0x578>
   263f8:	32000515 	stw	r8,20(r6)
   263fc:	32000415 	stw	r8,16(r6)
   26400:	10007f0e 	bge	r2,zero,26600 <_malloc_r+0x304>
   26404:	00807fc4 	movi	r2,511
   26408:	11c0fd36 	bltu	r2,r7,26800 <_malloc_r+0x504>
   2640c:	3806d0fa 	srli	r3,r7,3
   26410:	01c00044 	movi	r7,1
   26414:	30800117 	ldw	r2,4(r6)
   26418:	19400044 	addi	r5,r3,1
   2641c:	294b883a 	add	r5,r5,r5
   26420:	1807d0ba 	srai	r3,r3,2
   26424:	294b883a 	add	r5,r5,r5
   26428:	294b883a 	add	r5,r5,r5
   2642c:	298b883a 	add	r5,r5,r6
   26430:	38c6983a 	sll	r3,r7,r3
   26434:	29c00017 	ldw	r7,0(r5)
   26438:	2a7ffe04 	addi	r9,r5,-8
   2643c:	1886b03a 	or	r3,r3,r2
   26440:	82400315 	stw	r9,12(r16)
   26444:	81c00215 	stw	r7,8(r16)
   26448:	30c00115 	stw	r3,4(r6)
   2644c:	2c000015 	stw	r16,0(r5)
   26450:	3c000315 	stw	r16,12(r7)
   26454:	2005d0ba 	srai	r2,r4,2
   26458:	01400044 	movi	r5,1
   2645c:	288a983a 	sll	r5,r5,r2
   26460:	19406f36 	bltu	r3,r5,26620 <_malloc_r+0x324>
   26464:	28c4703a 	and	r2,r5,r3
   26468:	10000a1e 	bne	r2,zero,26494 <_malloc_r+0x198>
   2646c:	00bfff04 	movi	r2,-4
   26470:	294b883a 	add	r5,r5,r5
   26474:	2088703a 	and	r4,r4,r2
   26478:	28c4703a 	and	r2,r5,r3
   2647c:	21000104 	addi	r4,r4,4
   26480:	1000041e 	bne	r2,zero,26494 <_malloc_r+0x198>
   26484:	294b883a 	add	r5,r5,r5
   26488:	28c4703a 	and	r2,r5,r3
   2648c:	21000104 	addi	r4,r4,4
   26490:	103ffc26 	beq	r2,zero,26484 <__alt_data_end+0xf4026484>
   26494:	02bfff04 	movi	r10,-4
   26498:	024003c4 	movi	r9,15
   2649c:	21800044 	addi	r6,r4,1
   264a0:	318d883a 	add	r6,r6,r6
   264a4:	318d883a 	add	r6,r6,r6
   264a8:	318d883a 	add	r6,r6,r6
   264ac:	998d883a 	add	r6,r19,r6
   264b0:	333ffe04 	addi	r12,r6,-8
   264b4:	2017883a 	mov	r11,r4
   264b8:	31800104 	addi	r6,r6,4
   264bc:	34000017 	ldw	r16,0(r6)
   264c0:	31fffd04 	addi	r7,r6,-12
   264c4:	81c0041e 	bne	r16,r7,264d8 <_malloc_r+0x1dc>
   264c8:	0000fb06 	br	268b8 <_malloc_r+0x5bc>
   264cc:	1801030e 	bge	r3,zero,268dc <_malloc_r+0x5e0>
   264d0:	84000317 	ldw	r16,12(r16)
   264d4:	81c0f826 	beq	r16,r7,268b8 <_malloc_r+0x5bc>
   264d8:	80800117 	ldw	r2,4(r16)
   264dc:	1284703a 	and	r2,r2,r10
   264e0:	1447c83a 	sub	r3,r2,r17
   264e4:	48fff90e 	bge	r9,r3,264cc <__alt_data_end+0xf40264cc>
   264e8:	80800317 	ldw	r2,12(r16)
   264ec:	81000217 	ldw	r4,8(r16)
   264f0:	89400054 	ori	r5,r17,1
   264f4:	81400115 	stw	r5,4(r16)
   264f8:	20800315 	stw	r2,12(r4)
   264fc:	11000215 	stw	r4,8(r2)
   26500:	8463883a 	add	r17,r16,r17
   26504:	9c400515 	stw	r17,20(r19)
   26508:	9c400415 	stw	r17,16(r19)
   2650c:	18800054 	ori	r2,r3,1
   26510:	88800115 	stw	r2,4(r17)
   26514:	8a000315 	stw	r8,12(r17)
   26518:	8a000215 	stw	r8,8(r17)
   2651c:	88e3883a 	add	r17,r17,r3
   26520:	88c00015 	stw	r3,0(r17)
   26524:	9009883a 	mov	r4,r18
   26528:	002df7c0 	call	2df7c <__malloc_unlock>
   2652c:	80800204 	addi	r2,r16,8
   26530:	00001b06 	br	265a0 <_malloc_r+0x2a4>
   26534:	04400404 	movi	r17,16
   26538:	89402536 	bltu	r17,r5,265d0 <_malloc_r+0x2d4>
   2653c:	002df580 	call	2df58 <__malloc_lock>
   26540:	00800184 	movi	r2,6
   26544:	01000084 	movi	r4,2
   26548:	04c000f4 	movhi	r19,3
   2654c:	1085883a 	add	r2,r2,r2
   26550:	9cc82d04 	addi	r19,r19,8372
   26554:	1085883a 	add	r2,r2,r2
   26558:	9885883a 	add	r2,r19,r2
   2655c:	14000117 	ldw	r16,4(r2)
   26560:	10fffe04 	addi	r3,r2,-8
   26564:	80c0d926 	beq	r16,r3,268cc <_malloc_r+0x5d0>
   26568:	80c00117 	ldw	r3,4(r16)
   2656c:	81000317 	ldw	r4,12(r16)
   26570:	00bfff04 	movi	r2,-4
   26574:	1884703a 	and	r2,r3,r2
   26578:	81400217 	ldw	r5,8(r16)
   2657c:	8085883a 	add	r2,r16,r2
   26580:	10c00117 	ldw	r3,4(r2)
   26584:	29000315 	stw	r4,12(r5)
   26588:	21400215 	stw	r5,8(r4)
   2658c:	18c00054 	ori	r3,r3,1
   26590:	10c00115 	stw	r3,4(r2)
   26594:	9009883a 	mov	r4,r18
   26598:	002df7c0 	call	2df7c <__malloc_unlock>
   2659c:	80800204 	addi	r2,r16,8
   265a0:	dfc00a17 	ldw	ra,40(sp)
   265a4:	df000917 	ldw	fp,36(sp)
   265a8:	ddc00817 	ldw	r23,32(sp)
   265ac:	dd800717 	ldw	r22,28(sp)
   265b0:	dd400617 	ldw	r21,24(sp)
   265b4:	dd000517 	ldw	r20,20(sp)
   265b8:	dcc00417 	ldw	r19,16(sp)
   265bc:	dc800317 	ldw	r18,12(sp)
   265c0:	dc400217 	ldw	r17,8(sp)
   265c4:	dc000117 	ldw	r16,4(sp)
   265c8:	dec00b04 	addi	sp,sp,44
   265cc:	f800283a 	ret
   265d0:	00800304 	movi	r2,12
   265d4:	90800015 	stw	r2,0(r18)
   265d8:	0005883a 	mov	r2,zero
   265dc:	003ff006 	br	265a0 <__alt_data_end+0xf40265a0>
   265e0:	01002004 	movi	r4,128
   265e4:	02001004 	movi	r8,64
   265e8:	01c00fc4 	movi	r7,63
   265ec:	003f6106 	br	26374 <__alt_data_end+0xf4026374>
   265f0:	4009883a 	mov	r4,r8
   265f4:	003f7506 	br	263cc <__alt_data_end+0xf40263cc>
   265f8:	81000317 	ldw	r4,12(r16)
   265fc:	003fde06 	br	26578 <__alt_data_end+0xf4026578>
   26600:	81c5883a 	add	r2,r16,r7
   26604:	11400117 	ldw	r5,4(r2)
   26608:	9009883a 	mov	r4,r18
   2660c:	29400054 	ori	r5,r5,1
   26610:	11400115 	stw	r5,4(r2)
   26614:	002df7c0 	call	2df7c <__malloc_unlock>
   26618:	80800204 	addi	r2,r16,8
   2661c:	003fe006 	br	265a0 <__alt_data_end+0xf40265a0>
   26620:	9c000217 	ldw	r16,8(r19)
   26624:	00bfff04 	movi	r2,-4
   26628:	85800117 	ldw	r22,4(r16)
   2662c:	b0ac703a 	and	r22,r22,r2
   26630:	b4400336 	bltu	r22,r17,26640 <_malloc_r+0x344>
   26634:	b445c83a 	sub	r2,r22,r17
   26638:	00c003c4 	movi	r3,15
   2663c:	18805d16 	blt	r3,r2,267b4 <_malloc_r+0x4b8>
   26640:	05c000f4 	movhi	r23,3
   26644:	008000f4 	movhi	r2,3
   26648:	10953e04 	addi	r2,r2,21752
   2664c:	bdce0d04 	addi	r23,r23,14388
   26650:	15400017 	ldw	r21,0(r2)
   26654:	b8c00017 	ldw	r3,0(r23)
   26658:	00bfffc4 	movi	r2,-1
   2665c:	858d883a 	add	r6,r16,r22
   26660:	8d6b883a 	add	r21,r17,r21
   26664:	1880ea26 	beq	r3,r2,26a10 <_malloc_r+0x714>
   26668:	ad4403c4 	addi	r21,r21,4111
   2666c:	00bc0004 	movi	r2,-4096
   26670:	a8aa703a 	and	r21,r21,r2
   26674:	a80b883a 	mov	r5,r21
   26678:	9009883a 	mov	r4,r18
   2667c:	d9800015 	stw	r6,0(sp)
   26680:	002858c0 	call	2858c <_sbrk_r>
   26684:	1029883a 	mov	r20,r2
   26688:	00bfffc4 	movi	r2,-1
   2668c:	d9800017 	ldw	r6,0(sp)
   26690:	a080e826 	beq	r20,r2,26a34 <_malloc_r+0x738>
   26694:	a180a636 	bltu	r20,r6,26930 <_malloc_r+0x634>
   26698:	070000f4 	movhi	fp,3
   2669c:	e7154704 	addi	fp,fp,21788
   266a0:	e0800017 	ldw	r2,0(fp)
   266a4:	a887883a 	add	r3,r21,r2
   266a8:	e0c00015 	stw	r3,0(fp)
   266ac:	3500e626 	beq	r6,r20,26a48 <_malloc_r+0x74c>
   266b0:	b9000017 	ldw	r4,0(r23)
   266b4:	00bfffc4 	movi	r2,-1
   266b8:	2080ee26 	beq	r4,r2,26a74 <_malloc_r+0x778>
   266bc:	a185c83a 	sub	r2,r20,r6
   266c0:	10c5883a 	add	r2,r2,r3
   266c4:	e0800015 	stw	r2,0(fp)
   266c8:	a0c001cc 	andi	r3,r20,7
   266cc:	1800bc26 	beq	r3,zero,269c0 <_malloc_r+0x6c4>
   266d0:	a0e9c83a 	sub	r20,r20,r3
   266d4:	00840204 	movi	r2,4104
   266d8:	a5000204 	addi	r20,r20,8
   266dc:	10c7c83a 	sub	r3,r2,r3
   266e0:	a545883a 	add	r2,r20,r21
   266e4:	1083ffcc 	andi	r2,r2,4095
   266e8:	18abc83a 	sub	r21,r3,r2
   266ec:	a80b883a 	mov	r5,r21
   266f0:	9009883a 	mov	r4,r18
   266f4:	002858c0 	call	2858c <_sbrk_r>
   266f8:	00ffffc4 	movi	r3,-1
   266fc:	10c0e126 	beq	r2,r3,26a84 <_malloc_r+0x788>
   26700:	1505c83a 	sub	r2,r2,r20
   26704:	1545883a 	add	r2,r2,r21
   26708:	10800054 	ori	r2,r2,1
   2670c:	e0c00017 	ldw	r3,0(fp)
   26710:	9d000215 	stw	r20,8(r19)
   26714:	a0800115 	stw	r2,4(r20)
   26718:	a8c7883a 	add	r3,r21,r3
   2671c:	e0c00015 	stw	r3,0(fp)
   26720:	84c00e26 	beq	r16,r19,2675c <_malloc_r+0x460>
   26724:	018003c4 	movi	r6,15
   26728:	3580a72e 	bgeu	r6,r22,269c8 <_malloc_r+0x6cc>
   2672c:	81400117 	ldw	r5,4(r16)
   26730:	013ffe04 	movi	r4,-8
   26734:	b0bffd04 	addi	r2,r22,-12
   26738:	1104703a 	and	r2,r2,r4
   2673c:	2900004c 	andi	r4,r5,1
   26740:	2088b03a 	or	r4,r4,r2
   26744:	81000115 	stw	r4,4(r16)
   26748:	01400144 	movi	r5,5
   2674c:	8089883a 	add	r4,r16,r2
   26750:	21400115 	stw	r5,4(r4)
   26754:	21400215 	stw	r5,8(r4)
   26758:	3080cd36 	bltu	r6,r2,26a90 <_malloc_r+0x794>
   2675c:	008000f4 	movhi	r2,3
   26760:	10953d04 	addi	r2,r2,21748
   26764:	11000017 	ldw	r4,0(r2)
   26768:	20c0012e 	bgeu	r4,r3,26770 <_malloc_r+0x474>
   2676c:	10c00015 	stw	r3,0(r2)
   26770:	008000f4 	movhi	r2,3
   26774:	10953c04 	addi	r2,r2,21744
   26778:	11000017 	ldw	r4,0(r2)
   2677c:	9c000217 	ldw	r16,8(r19)
   26780:	20c0012e 	bgeu	r4,r3,26788 <_malloc_r+0x48c>
   26784:	10c00015 	stw	r3,0(r2)
   26788:	80c00117 	ldw	r3,4(r16)
   2678c:	00bfff04 	movi	r2,-4
   26790:	1886703a 	and	r3,r3,r2
   26794:	1c45c83a 	sub	r2,r3,r17
   26798:	1c400236 	bltu	r3,r17,267a4 <_malloc_r+0x4a8>
   2679c:	00c003c4 	movi	r3,15
   267a0:	18800416 	blt	r3,r2,267b4 <_malloc_r+0x4b8>
   267a4:	9009883a 	mov	r4,r18
   267a8:	002df7c0 	call	2df7c <__malloc_unlock>
   267ac:	0005883a 	mov	r2,zero
   267b0:	003f7b06 	br	265a0 <__alt_data_end+0xf40265a0>
   267b4:	88c00054 	ori	r3,r17,1
   267b8:	80c00115 	stw	r3,4(r16)
   267bc:	8463883a 	add	r17,r16,r17
   267c0:	10800054 	ori	r2,r2,1
   267c4:	9c400215 	stw	r17,8(r19)
   267c8:	88800115 	stw	r2,4(r17)
   267cc:	9009883a 	mov	r4,r18
   267d0:	002df7c0 	call	2df7c <__malloc_unlock>
   267d4:	80800204 	addi	r2,r16,8
   267d8:	003f7106 	br	265a0 <__alt_data_end+0xf40265a0>
   267dc:	00c00504 	movi	r3,20
   267e0:	18804a2e 	bgeu	r3,r2,2690c <_malloc_r+0x610>
   267e4:	00c01504 	movi	r3,84
   267e8:	18806e36 	bltu	r3,r2,269a4 <_malloc_r+0x6a8>
   267ec:	8804d33a 	srli	r2,r17,12
   267f0:	12001bc4 	addi	r8,r2,111
   267f4:	11c01b84 	addi	r7,r2,110
   267f8:	4209883a 	add	r4,r8,r8
   267fc:	003edd06 	br	26374 <__alt_data_end+0xf4026374>
   26800:	3804d27a 	srli	r2,r7,9
   26804:	00c00104 	movi	r3,4
   26808:	1880442e 	bgeu	r3,r2,2691c <_malloc_r+0x620>
   2680c:	00c00504 	movi	r3,20
   26810:	18808136 	bltu	r3,r2,26a18 <_malloc_r+0x71c>
   26814:	11401704 	addi	r5,r2,92
   26818:	10c016c4 	addi	r3,r2,91
   2681c:	294b883a 	add	r5,r5,r5
   26820:	294b883a 	add	r5,r5,r5
   26824:	294b883a 	add	r5,r5,r5
   26828:	994b883a 	add	r5,r19,r5
   2682c:	28800017 	ldw	r2,0(r5)
   26830:	018000f4 	movhi	r6,3
   26834:	297ffe04 	addi	r5,r5,-8
   26838:	31882d04 	addi	r6,r6,8372
   2683c:	28806526 	beq	r5,r2,269d4 <_malloc_r+0x6d8>
   26840:	01bfff04 	movi	r6,-4
   26844:	10c00117 	ldw	r3,4(r2)
   26848:	1986703a 	and	r3,r3,r6
   2684c:	38c0022e 	bgeu	r7,r3,26858 <_malloc_r+0x55c>
   26850:	10800217 	ldw	r2,8(r2)
   26854:	28bffb1e 	bne	r5,r2,26844 <__alt_data_end+0xf4026844>
   26858:	11400317 	ldw	r5,12(r2)
   2685c:	98c00117 	ldw	r3,4(r19)
   26860:	81400315 	stw	r5,12(r16)
   26864:	80800215 	stw	r2,8(r16)
   26868:	2c000215 	stw	r16,8(r5)
   2686c:	14000315 	stw	r16,12(r2)
   26870:	003ef806 	br	26454 <__alt_data_end+0xf4026454>
   26874:	88c00054 	ori	r3,r17,1
   26878:	80c00115 	stw	r3,4(r16)
   2687c:	8463883a 	add	r17,r16,r17
   26880:	34400515 	stw	r17,20(r6)
   26884:	34400415 	stw	r17,16(r6)
   26888:	10c00054 	ori	r3,r2,1
   2688c:	8a000315 	stw	r8,12(r17)
   26890:	8a000215 	stw	r8,8(r17)
   26894:	88c00115 	stw	r3,4(r17)
   26898:	88a3883a 	add	r17,r17,r2
   2689c:	88800015 	stw	r2,0(r17)
   268a0:	9009883a 	mov	r4,r18
   268a4:	002df7c0 	call	2df7c <__malloc_unlock>
   268a8:	80800204 	addi	r2,r16,8
   268ac:	003f3c06 	br	265a0 <__alt_data_end+0xf40265a0>
   268b0:	30c00117 	ldw	r3,4(r6)
   268b4:	003ee706 	br	26454 <__alt_data_end+0xf4026454>
   268b8:	5ac00044 	addi	r11,r11,1
   268bc:	588000cc 	andi	r2,r11,3
   268c0:	31800204 	addi	r6,r6,8
   268c4:	103efd1e 	bne	r2,zero,264bc <__alt_data_end+0xf40264bc>
   268c8:	00002406 	br	2695c <_malloc_r+0x660>
   268cc:	14000317 	ldw	r16,12(r2)
   268d0:	143f251e 	bne	r2,r16,26568 <__alt_data_end+0xf4026568>
   268d4:	21000084 	addi	r4,r4,2
   268d8:	003ebc06 	br	263cc <__alt_data_end+0xf40263cc>
   268dc:	8085883a 	add	r2,r16,r2
   268e0:	10c00117 	ldw	r3,4(r2)
   268e4:	81000317 	ldw	r4,12(r16)
   268e8:	81400217 	ldw	r5,8(r16)
   268ec:	18c00054 	ori	r3,r3,1
   268f0:	10c00115 	stw	r3,4(r2)
   268f4:	29000315 	stw	r4,12(r5)
   268f8:	21400215 	stw	r5,8(r4)
   268fc:	9009883a 	mov	r4,r18
   26900:	002df7c0 	call	2df7c <__malloc_unlock>
   26904:	80800204 	addi	r2,r16,8
   26908:	003f2506 	br	265a0 <__alt_data_end+0xf40265a0>
   2690c:	12001704 	addi	r8,r2,92
   26910:	11c016c4 	addi	r7,r2,91
   26914:	4209883a 	add	r4,r8,r8
   26918:	003e9606 	br	26374 <__alt_data_end+0xf4026374>
   2691c:	3804d1ba 	srli	r2,r7,6
   26920:	11400e44 	addi	r5,r2,57
   26924:	10c00e04 	addi	r3,r2,56
   26928:	294b883a 	add	r5,r5,r5
   2692c:	003fbc06 	br	26820 <__alt_data_end+0xf4026820>
   26930:	84ff5926 	beq	r16,r19,26698 <__alt_data_end+0xf4026698>
   26934:	008000f4 	movhi	r2,3
   26938:	10882d04 	addi	r2,r2,8372
   2693c:	14000217 	ldw	r16,8(r2)
   26940:	00bfff04 	movi	r2,-4
   26944:	80c00117 	ldw	r3,4(r16)
   26948:	1886703a 	and	r3,r3,r2
   2694c:	003f9106 	br	26794 <__alt_data_end+0xf4026794>
   26950:	60800217 	ldw	r2,8(r12)
   26954:	213fffc4 	addi	r4,r4,-1
   26958:	1300651e 	bne	r2,r12,26af0 <_malloc_r+0x7f4>
   2695c:	208000cc 	andi	r2,r4,3
   26960:	633ffe04 	addi	r12,r12,-8
   26964:	103ffa1e 	bne	r2,zero,26950 <__alt_data_end+0xf4026950>
   26968:	98800117 	ldw	r2,4(r19)
   2696c:	0146303a 	nor	r3,zero,r5
   26970:	1884703a 	and	r2,r3,r2
   26974:	98800115 	stw	r2,4(r19)
   26978:	294b883a 	add	r5,r5,r5
   2697c:	117f2836 	bltu	r2,r5,26620 <__alt_data_end+0xf4026620>
   26980:	283f2726 	beq	r5,zero,26620 <__alt_data_end+0xf4026620>
   26984:	2886703a 	and	r3,r5,r2
   26988:	5809883a 	mov	r4,r11
   2698c:	183ec31e 	bne	r3,zero,2649c <__alt_data_end+0xf402649c>
   26990:	294b883a 	add	r5,r5,r5
   26994:	2886703a 	and	r3,r5,r2
   26998:	21000104 	addi	r4,r4,4
   2699c:	183ffc26 	beq	r3,zero,26990 <__alt_data_end+0xf4026990>
   269a0:	003ebe06 	br	2649c <__alt_data_end+0xf402649c>
   269a4:	00c05504 	movi	r3,340
   269a8:	18801236 	bltu	r3,r2,269f4 <_malloc_r+0x6f8>
   269ac:	8804d3fa 	srli	r2,r17,15
   269b0:	12001e04 	addi	r8,r2,120
   269b4:	11c01dc4 	addi	r7,r2,119
   269b8:	4209883a 	add	r4,r8,r8
   269bc:	003e6d06 	br	26374 <__alt_data_end+0xf4026374>
   269c0:	00c40004 	movi	r3,4096
   269c4:	003f4606 	br	266e0 <__alt_data_end+0xf40266e0>
   269c8:	00800044 	movi	r2,1
   269cc:	a0800115 	stw	r2,4(r20)
   269d0:	003f7406 	br	267a4 <__alt_data_end+0xf40267a4>
   269d4:	1805d0ba 	srai	r2,r3,2
   269d8:	01c00044 	movi	r7,1
   269dc:	30c00117 	ldw	r3,4(r6)
   269e0:	388e983a 	sll	r7,r7,r2
   269e4:	2805883a 	mov	r2,r5
   269e8:	38c6b03a 	or	r3,r7,r3
   269ec:	30c00115 	stw	r3,4(r6)
   269f0:	003f9b06 	br	26860 <__alt_data_end+0xf4026860>
   269f4:	00c15504 	movi	r3,1364
   269f8:	18801a36 	bltu	r3,r2,26a64 <_malloc_r+0x768>
   269fc:	8804d4ba 	srli	r2,r17,18
   26a00:	12001f44 	addi	r8,r2,125
   26a04:	11c01f04 	addi	r7,r2,124
   26a08:	4209883a 	add	r4,r8,r8
   26a0c:	003e5906 	br	26374 <__alt_data_end+0xf4026374>
   26a10:	ad400404 	addi	r21,r21,16
   26a14:	003f1706 	br	26674 <__alt_data_end+0xf4026674>
   26a18:	00c01504 	movi	r3,84
   26a1c:	18802336 	bltu	r3,r2,26aac <_malloc_r+0x7b0>
   26a20:	3804d33a 	srli	r2,r7,12
   26a24:	11401bc4 	addi	r5,r2,111
   26a28:	10c01b84 	addi	r3,r2,110
   26a2c:	294b883a 	add	r5,r5,r5
   26a30:	003f7b06 	br	26820 <__alt_data_end+0xf4026820>
   26a34:	9c000217 	ldw	r16,8(r19)
   26a38:	00bfff04 	movi	r2,-4
   26a3c:	80c00117 	ldw	r3,4(r16)
   26a40:	1886703a 	and	r3,r3,r2
   26a44:	003f5306 	br	26794 <__alt_data_end+0xf4026794>
   26a48:	3083ffcc 	andi	r2,r6,4095
   26a4c:	103f181e 	bne	r2,zero,266b0 <__alt_data_end+0xf40266b0>
   26a50:	99000217 	ldw	r4,8(r19)
   26a54:	b545883a 	add	r2,r22,r21
   26a58:	10800054 	ori	r2,r2,1
   26a5c:	20800115 	stw	r2,4(r4)
   26a60:	003f3e06 	br	2675c <__alt_data_end+0xf402675c>
   26a64:	01003f84 	movi	r4,254
   26a68:	02001fc4 	movi	r8,127
   26a6c:	01c01f84 	movi	r7,126
   26a70:	003e4006 	br	26374 <__alt_data_end+0xf4026374>
   26a74:	008000f4 	movhi	r2,3
   26a78:	108e0d04 	addi	r2,r2,14388
   26a7c:	15000015 	stw	r20,0(r2)
   26a80:	003f1106 	br	266c8 <__alt_data_end+0xf40266c8>
   26a84:	00800044 	movi	r2,1
   26a88:	002b883a 	mov	r21,zero
   26a8c:	003f1f06 	br	2670c <__alt_data_end+0xf402670c>
   26a90:	81400204 	addi	r5,r16,8
   26a94:	9009883a 	mov	r4,r18
   26a98:	00257100 	call	25710 <_free_r>
   26a9c:	008000f4 	movhi	r2,3
   26aa0:	10954704 	addi	r2,r2,21788
   26aa4:	10c00017 	ldw	r3,0(r2)
   26aa8:	003f2c06 	br	2675c <__alt_data_end+0xf402675c>
   26aac:	00c05504 	movi	r3,340
   26ab0:	18800536 	bltu	r3,r2,26ac8 <_malloc_r+0x7cc>
   26ab4:	3804d3fa 	srli	r2,r7,15
   26ab8:	11401e04 	addi	r5,r2,120
   26abc:	10c01dc4 	addi	r3,r2,119
   26ac0:	294b883a 	add	r5,r5,r5
   26ac4:	003f5606 	br	26820 <__alt_data_end+0xf4026820>
   26ac8:	00c15504 	movi	r3,1364
   26acc:	18800536 	bltu	r3,r2,26ae4 <_malloc_r+0x7e8>
   26ad0:	3804d4ba 	srli	r2,r7,18
   26ad4:	11401f44 	addi	r5,r2,125
   26ad8:	10c01f04 	addi	r3,r2,124
   26adc:	294b883a 	add	r5,r5,r5
   26ae0:	003f4f06 	br	26820 <__alt_data_end+0xf4026820>
   26ae4:	01403f84 	movi	r5,254
   26ae8:	00c01f84 	movi	r3,126
   26aec:	003f4c06 	br	26820 <__alt_data_end+0xf4026820>
   26af0:	98800117 	ldw	r2,4(r19)
   26af4:	003fa006 	br	26978 <__alt_data_end+0xf4026978>
   26af8:	8808d0fa 	srli	r4,r17,3
   26afc:	20800044 	addi	r2,r4,1
   26b00:	1085883a 	add	r2,r2,r2
   26b04:	003e9006 	br	26548 <__alt_data_end+0xf4026548>

00026b08 <memchr>:
   26b08:	208000cc 	andi	r2,r4,3
   26b0c:	280f883a 	mov	r7,r5
   26b10:	10003426 	beq	r2,zero,26be4 <memchr+0xdc>
   26b14:	30bfffc4 	addi	r2,r6,-1
   26b18:	30001a26 	beq	r6,zero,26b84 <memchr+0x7c>
   26b1c:	20c00003 	ldbu	r3,0(r4)
   26b20:	29803fcc 	andi	r6,r5,255
   26b24:	30c0051e 	bne	r6,r3,26b3c <memchr+0x34>
   26b28:	00001806 	br	26b8c <memchr+0x84>
   26b2c:	10001526 	beq	r2,zero,26b84 <memchr+0x7c>
   26b30:	20c00003 	ldbu	r3,0(r4)
   26b34:	10bfffc4 	addi	r2,r2,-1
   26b38:	30c01426 	beq	r6,r3,26b8c <memchr+0x84>
   26b3c:	21000044 	addi	r4,r4,1
   26b40:	20c000cc 	andi	r3,r4,3
   26b44:	183ff91e 	bne	r3,zero,26b2c <__alt_data_end+0xf4026b2c>
   26b48:	020000c4 	movi	r8,3
   26b4c:	40801136 	bltu	r8,r2,26b94 <memchr+0x8c>
   26b50:	10000c26 	beq	r2,zero,26b84 <memchr+0x7c>
   26b54:	20c00003 	ldbu	r3,0(r4)
   26b58:	29403fcc 	andi	r5,r5,255
   26b5c:	28c00b26 	beq	r5,r3,26b8c <memchr+0x84>
   26b60:	20c00044 	addi	r3,r4,1
   26b64:	39803fcc 	andi	r6,r7,255
   26b68:	2089883a 	add	r4,r4,r2
   26b6c:	00000306 	br	26b7c <memchr+0x74>
   26b70:	18c00044 	addi	r3,r3,1
   26b74:	197fffc3 	ldbu	r5,-1(r3)
   26b78:	31400526 	beq	r6,r5,26b90 <memchr+0x88>
   26b7c:	1805883a 	mov	r2,r3
   26b80:	20fffb1e 	bne	r4,r3,26b70 <__alt_data_end+0xf4026b70>
   26b84:	0005883a 	mov	r2,zero
   26b88:	f800283a 	ret
   26b8c:	2005883a 	mov	r2,r4
   26b90:	f800283a 	ret
   26b94:	28c03fcc 	andi	r3,r5,255
   26b98:	1812923a 	slli	r9,r3,8
   26b9c:	02ffbff4 	movhi	r11,65279
   26ba0:	02a02074 	movhi	r10,32897
   26ba4:	48d2b03a 	or	r9,r9,r3
   26ba8:	4806943a 	slli	r3,r9,16
   26bac:	5affbfc4 	addi	r11,r11,-257
   26bb0:	52a02004 	addi	r10,r10,-32640
   26bb4:	48d2b03a 	or	r9,r9,r3
   26bb8:	20c00017 	ldw	r3,0(r4)
   26bbc:	48c6f03a 	xor	r3,r9,r3
   26bc0:	1acd883a 	add	r6,r3,r11
   26bc4:	00c6303a 	nor	r3,zero,r3
   26bc8:	30c6703a 	and	r3,r6,r3
   26bcc:	1a86703a 	and	r3,r3,r10
   26bd0:	183fe01e 	bne	r3,zero,26b54 <__alt_data_end+0xf4026b54>
   26bd4:	10bfff04 	addi	r2,r2,-4
   26bd8:	21000104 	addi	r4,r4,4
   26bdc:	40bff636 	bltu	r8,r2,26bb8 <__alt_data_end+0xf4026bb8>
   26be0:	003fdb06 	br	26b50 <__alt_data_end+0xf4026b50>
   26be4:	3005883a 	mov	r2,r6
   26be8:	003fd706 	br	26b48 <__alt_data_end+0xf4026b48>

00026bec <memcpy>:
   26bec:	defffd04 	addi	sp,sp,-12
   26bf0:	dfc00215 	stw	ra,8(sp)
   26bf4:	dc400115 	stw	r17,4(sp)
   26bf8:	dc000015 	stw	r16,0(sp)
   26bfc:	00c003c4 	movi	r3,15
   26c00:	2005883a 	mov	r2,r4
   26c04:	1980452e 	bgeu	r3,r6,26d1c <memcpy+0x130>
   26c08:	2906b03a 	or	r3,r5,r4
   26c0c:	18c000cc 	andi	r3,r3,3
   26c10:	1800441e 	bne	r3,zero,26d24 <memcpy+0x138>
   26c14:	347ffc04 	addi	r17,r6,-16
   26c18:	8822d13a 	srli	r17,r17,4
   26c1c:	28c00104 	addi	r3,r5,4
   26c20:	23400104 	addi	r13,r4,4
   26c24:	8820913a 	slli	r16,r17,4
   26c28:	2b000204 	addi	r12,r5,8
   26c2c:	22c00204 	addi	r11,r4,8
   26c30:	84000504 	addi	r16,r16,20
   26c34:	2a800304 	addi	r10,r5,12
   26c38:	22400304 	addi	r9,r4,12
   26c3c:	2c21883a 	add	r16,r5,r16
   26c40:	2811883a 	mov	r8,r5
   26c44:	200f883a 	mov	r7,r4
   26c48:	41000017 	ldw	r4,0(r8)
   26c4c:	1fc00017 	ldw	ra,0(r3)
   26c50:	63c00017 	ldw	r15,0(r12)
   26c54:	39000015 	stw	r4,0(r7)
   26c58:	53800017 	ldw	r14,0(r10)
   26c5c:	6fc00015 	stw	ra,0(r13)
   26c60:	5bc00015 	stw	r15,0(r11)
   26c64:	4b800015 	stw	r14,0(r9)
   26c68:	18c00404 	addi	r3,r3,16
   26c6c:	39c00404 	addi	r7,r7,16
   26c70:	42000404 	addi	r8,r8,16
   26c74:	6b400404 	addi	r13,r13,16
   26c78:	63000404 	addi	r12,r12,16
   26c7c:	5ac00404 	addi	r11,r11,16
   26c80:	52800404 	addi	r10,r10,16
   26c84:	4a400404 	addi	r9,r9,16
   26c88:	1c3fef1e 	bne	r3,r16,26c48 <__alt_data_end+0xf4026c48>
   26c8c:	89c00044 	addi	r7,r17,1
   26c90:	380e913a 	slli	r7,r7,4
   26c94:	310003cc 	andi	r4,r6,15
   26c98:	02c000c4 	movi	r11,3
   26c9c:	11c7883a 	add	r3,r2,r7
   26ca0:	29cb883a 	add	r5,r5,r7
   26ca4:	5900212e 	bgeu	r11,r4,26d2c <memcpy+0x140>
   26ca8:	1813883a 	mov	r9,r3
   26cac:	2811883a 	mov	r8,r5
   26cb0:	200f883a 	mov	r7,r4
   26cb4:	42800017 	ldw	r10,0(r8)
   26cb8:	4a400104 	addi	r9,r9,4
   26cbc:	39ffff04 	addi	r7,r7,-4
   26cc0:	4abfff15 	stw	r10,-4(r9)
   26cc4:	42000104 	addi	r8,r8,4
   26cc8:	59fffa36 	bltu	r11,r7,26cb4 <__alt_data_end+0xf4026cb4>
   26ccc:	213fff04 	addi	r4,r4,-4
   26cd0:	2008d0ba 	srli	r4,r4,2
   26cd4:	318000cc 	andi	r6,r6,3
   26cd8:	21000044 	addi	r4,r4,1
   26cdc:	2109883a 	add	r4,r4,r4
   26ce0:	2109883a 	add	r4,r4,r4
   26ce4:	1907883a 	add	r3,r3,r4
   26ce8:	290b883a 	add	r5,r5,r4
   26cec:	30000626 	beq	r6,zero,26d08 <memcpy+0x11c>
   26cf0:	198d883a 	add	r6,r3,r6
   26cf4:	29c00003 	ldbu	r7,0(r5)
   26cf8:	18c00044 	addi	r3,r3,1
   26cfc:	29400044 	addi	r5,r5,1
   26d00:	19ffffc5 	stb	r7,-1(r3)
   26d04:	19bffb1e 	bne	r3,r6,26cf4 <__alt_data_end+0xf4026cf4>
   26d08:	dfc00217 	ldw	ra,8(sp)
   26d0c:	dc400117 	ldw	r17,4(sp)
   26d10:	dc000017 	ldw	r16,0(sp)
   26d14:	dec00304 	addi	sp,sp,12
   26d18:	f800283a 	ret
   26d1c:	2007883a 	mov	r3,r4
   26d20:	003ff206 	br	26cec <__alt_data_end+0xf4026cec>
   26d24:	2007883a 	mov	r3,r4
   26d28:	003ff106 	br	26cf0 <__alt_data_end+0xf4026cf0>
   26d2c:	200d883a 	mov	r6,r4
   26d30:	003fee06 	br	26cec <__alt_data_end+0xf4026cec>

00026d34 <memmove>:
   26d34:	2005883a 	mov	r2,r4
   26d38:	29000b2e 	bgeu	r5,r4,26d68 <memmove+0x34>
   26d3c:	298f883a 	add	r7,r5,r6
   26d40:	21c0092e 	bgeu	r4,r7,26d68 <memmove+0x34>
   26d44:	2187883a 	add	r3,r4,r6
   26d48:	198bc83a 	sub	r5,r3,r6
   26d4c:	30004826 	beq	r6,zero,26e70 <memmove+0x13c>
   26d50:	39ffffc4 	addi	r7,r7,-1
   26d54:	39000003 	ldbu	r4,0(r7)
   26d58:	18ffffc4 	addi	r3,r3,-1
   26d5c:	19000005 	stb	r4,0(r3)
   26d60:	28fffb1e 	bne	r5,r3,26d50 <__alt_data_end+0xf4026d50>
   26d64:	f800283a 	ret
   26d68:	00c003c4 	movi	r3,15
   26d6c:	1980412e 	bgeu	r3,r6,26e74 <memmove+0x140>
   26d70:	2886b03a 	or	r3,r5,r2
   26d74:	18c000cc 	andi	r3,r3,3
   26d78:	1800401e 	bne	r3,zero,26e7c <memmove+0x148>
   26d7c:	33fffc04 	addi	r15,r6,-16
   26d80:	781ed13a 	srli	r15,r15,4
   26d84:	28c00104 	addi	r3,r5,4
   26d88:	13400104 	addi	r13,r2,4
   26d8c:	781c913a 	slli	r14,r15,4
   26d90:	2b000204 	addi	r12,r5,8
   26d94:	12c00204 	addi	r11,r2,8
   26d98:	73800504 	addi	r14,r14,20
   26d9c:	2a800304 	addi	r10,r5,12
   26da0:	12400304 	addi	r9,r2,12
   26da4:	2b9d883a 	add	r14,r5,r14
   26da8:	2811883a 	mov	r8,r5
   26dac:	100f883a 	mov	r7,r2
   26db0:	41000017 	ldw	r4,0(r8)
   26db4:	39c00404 	addi	r7,r7,16
   26db8:	18c00404 	addi	r3,r3,16
   26dbc:	393ffc15 	stw	r4,-16(r7)
   26dc0:	193ffc17 	ldw	r4,-16(r3)
   26dc4:	6b400404 	addi	r13,r13,16
   26dc8:	5ac00404 	addi	r11,r11,16
   26dcc:	693ffc15 	stw	r4,-16(r13)
   26dd0:	61000017 	ldw	r4,0(r12)
   26dd4:	4a400404 	addi	r9,r9,16
   26dd8:	42000404 	addi	r8,r8,16
   26ddc:	593ffc15 	stw	r4,-16(r11)
   26de0:	51000017 	ldw	r4,0(r10)
   26de4:	63000404 	addi	r12,r12,16
   26de8:	52800404 	addi	r10,r10,16
   26dec:	493ffc15 	stw	r4,-16(r9)
   26df0:	1bbfef1e 	bne	r3,r14,26db0 <__alt_data_end+0xf4026db0>
   26df4:	79000044 	addi	r4,r15,1
   26df8:	2008913a 	slli	r4,r4,4
   26dfc:	328003cc 	andi	r10,r6,15
   26e00:	02c000c4 	movi	r11,3
   26e04:	1107883a 	add	r3,r2,r4
   26e08:	290b883a 	add	r5,r5,r4
   26e0c:	5a801e2e 	bgeu	r11,r10,26e88 <memmove+0x154>
   26e10:	1813883a 	mov	r9,r3
   26e14:	2811883a 	mov	r8,r5
   26e18:	500f883a 	mov	r7,r10
   26e1c:	41000017 	ldw	r4,0(r8)
   26e20:	4a400104 	addi	r9,r9,4
   26e24:	39ffff04 	addi	r7,r7,-4
   26e28:	493fff15 	stw	r4,-4(r9)
   26e2c:	42000104 	addi	r8,r8,4
   26e30:	59fffa36 	bltu	r11,r7,26e1c <__alt_data_end+0xf4026e1c>
   26e34:	513fff04 	addi	r4,r10,-4
   26e38:	2008d0ba 	srli	r4,r4,2
   26e3c:	318000cc 	andi	r6,r6,3
   26e40:	21000044 	addi	r4,r4,1
   26e44:	2109883a 	add	r4,r4,r4
   26e48:	2109883a 	add	r4,r4,r4
   26e4c:	1907883a 	add	r3,r3,r4
   26e50:	290b883a 	add	r5,r5,r4
   26e54:	30000b26 	beq	r6,zero,26e84 <memmove+0x150>
   26e58:	198d883a 	add	r6,r3,r6
   26e5c:	29c00003 	ldbu	r7,0(r5)
   26e60:	18c00044 	addi	r3,r3,1
   26e64:	29400044 	addi	r5,r5,1
   26e68:	19ffffc5 	stb	r7,-1(r3)
   26e6c:	19bffb1e 	bne	r3,r6,26e5c <__alt_data_end+0xf4026e5c>
   26e70:	f800283a 	ret
   26e74:	1007883a 	mov	r3,r2
   26e78:	003ff606 	br	26e54 <__alt_data_end+0xf4026e54>
   26e7c:	1007883a 	mov	r3,r2
   26e80:	003ff506 	br	26e58 <__alt_data_end+0xf4026e58>
   26e84:	f800283a 	ret
   26e88:	500d883a 	mov	r6,r10
   26e8c:	003ff106 	br	26e54 <__alt_data_end+0xf4026e54>

00026e90 <memset>:
   26e90:	20c000cc 	andi	r3,r4,3
   26e94:	2005883a 	mov	r2,r4
   26e98:	18004426 	beq	r3,zero,26fac <memset+0x11c>
   26e9c:	31ffffc4 	addi	r7,r6,-1
   26ea0:	30004026 	beq	r6,zero,26fa4 <memset+0x114>
   26ea4:	2813883a 	mov	r9,r5
   26ea8:	200d883a 	mov	r6,r4
   26eac:	2007883a 	mov	r3,r4
   26eb0:	00000406 	br	26ec4 <memset+0x34>
   26eb4:	3a3fffc4 	addi	r8,r7,-1
   26eb8:	31800044 	addi	r6,r6,1
   26ebc:	38003926 	beq	r7,zero,26fa4 <memset+0x114>
   26ec0:	400f883a 	mov	r7,r8
   26ec4:	18c00044 	addi	r3,r3,1
   26ec8:	32400005 	stb	r9,0(r6)
   26ecc:	1a0000cc 	andi	r8,r3,3
   26ed0:	403ff81e 	bne	r8,zero,26eb4 <__alt_data_end+0xf4026eb4>
   26ed4:	010000c4 	movi	r4,3
   26ed8:	21c02d2e 	bgeu	r4,r7,26f90 <memset+0x100>
   26edc:	29003fcc 	andi	r4,r5,255
   26ee0:	200c923a 	slli	r6,r4,8
   26ee4:	3108b03a 	or	r4,r6,r4
   26ee8:	200c943a 	slli	r6,r4,16
   26eec:	218cb03a 	or	r6,r4,r6
   26ef0:	010003c4 	movi	r4,15
   26ef4:	21c0182e 	bgeu	r4,r7,26f58 <memset+0xc8>
   26ef8:	3b3ffc04 	addi	r12,r7,-16
   26efc:	6018d13a 	srli	r12,r12,4
   26f00:	1a000104 	addi	r8,r3,4
   26f04:	1ac00204 	addi	r11,r3,8
   26f08:	6008913a 	slli	r4,r12,4
   26f0c:	1a800304 	addi	r10,r3,12
   26f10:	1813883a 	mov	r9,r3
   26f14:	21000504 	addi	r4,r4,20
   26f18:	1909883a 	add	r4,r3,r4
   26f1c:	49800015 	stw	r6,0(r9)
   26f20:	41800015 	stw	r6,0(r8)
   26f24:	59800015 	stw	r6,0(r11)
   26f28:	51800015 	stw	r6,0(r10)
   26f2c:	42000404 	addi	r8,r8,16
   26f30:	4a400404 	addi	r9,r9,16
   26f34:	5ac00404 	addi	r11,r11,16
   26f38:	52800404 	addi	r10,r10,16
   26f3c:	413ff71e 	bne	r8,r4,26f1c <__alt_data_end+0xf4026f1c>
   26f40:	63000044 	addi	r12,r12,1
   26f44:	6018913a 	slli	r12,r12,4
   26f48:	39c003cc 	andi	r7,r7,15
   26f4c:	010000c4 	movi	r4,3
   26f50:	1b07883a 	add	r3,r3,r12
   26f54:	21c00e2e 	bgeu	r4,r7,26f90 <memset+0x100>
   26f58:	1813883a 	mov	r9,r3
   26f5c:	3811883a 	mov	r8,r7
   26f60:	010000c4 	movi	r4,3
   26f64:	49800015 	stw	r6,0(r9)
   26f68:	423fff04 	addi	r8,r8,-4
   26f6c:	4a400104 	addi	r9,r9,4
   26f70:	223ffc36 	bltu	r4,r8,26f64 <__alt_data_end+0xf4026f64>
   26f74:	393fff04 	addi	r4,r7,-4
   26f78:	2008d0ba 	srli	r4,r4,2
   26f7c:	39c000cc 	andi	r7,r7,3
   26f80:	21000044 	addi	r4,r4,1
   26f84:	2109883a 	add	r4,r4,r4
   26f88:	2109883a 	add	r4,r4,r4
   26f8c:	1907883a 	add	r3,r3,r4
   26f90:	38000526 	beq	r7,zero,26fa8 <memset+0x118>
   26f94:	19cf883a 	add	r7,r3,r7
   26f98:	19400005 	stb	r5,0(r3)
   26f9c:	18c00044 	addi	r3,r3,1
   26fa0:	38fffd1e 	bne	r7,r3,26f98 <__alt_data_end+0xf4026f98>
   26fa4:	f800283a 	ret
   26fa8:	f800283a 	ret
   26fac:	2007883a 	mov	r3,r4
   26fb0:	300f883a 	mov	r7,r6
   26fb4:	003fc706 	br	26ed4 <__alt_data_end+0xf4026ed4>

00026fb8 <_Balloc>:
   26fb8:	20801317 	ldw	r2,76(r4)
   26fbc:	defffc04 	addi	sp,sp,-16
   26fc0:	dc400115 	stw	r17,4(sp)
   26fc4:	dc000015 	stw	r16,0(sp)
   26fc8:	dfc00315 	stw	ra,12(sp)
   26fcc:	dc800215 	stw	r18,8(sp)
   26fd0:	2023883a 	mov	r17,r4
   26fd4:	2821883a 	mov	r16,r5
   26fd8:	10000f26 	beq	r2,zero,27018 <_Balloc+0x60>
   26fdc:	8407883a 	add	r3,r16,r16
   26fe0:	18c7883a 	add	r3,r3,r3
   26fe4:	10c7883a 	add	r3,r2,r3
   26fe8:	18800017 	ldw	r2,0(r3)
   26fec:	10001126 	beq	r2,zero,27034 <_Balloc+0x7c>
   26ff0:	11000017 	ldw	r4,0(r2)
   26ff4:	19000015 	stw	r4,0(r3)
   26ff8:	10000415 	stw	zero,16(r2)
   26ffc:	10000315 	stw	zero,12(r2)
   27000:	dfc00317 	ldw	ra,12(sp)
   27004:	dc800217 	ldw	r18,8(sp)
   27008:	dc400117 	ldw	r17,4(sp)
   2700c:	dc000017 	ldw	r16,0(sp)
   27010:	dec00404 	addi	sp,sp,16
   27014:	f800283a 	ret
   27018:	01800844 	movi	r6,33
   2701c:	01400104 	movi	r5,4
   27020:	0029ef40 	call	29ef4 <_calloc_r>
   27024:	88801315 	stw	r2,76(r17)
   27028:	103fec1e 	bne	r2,zero,26fdc <__alt_data_end+0xf4026fdc>
   2702c:	0005883a 	mov	r2,zero
   27030:	003ff306 	br	27000 <__alt_data_end+0xf4027000>
   27034:	01400044 	movi	r5,1
   27038:	2c24983a 	sll	r18,r5,r16
   2703c:	8809883a 	mov	r4,r17
   27040:	91800144 	addi	r6,r18,5
   27044:	318d883a 	add	r6,r6,r6
   27048:	318d883a 	add	r6,r6,r6
   2704c:	0029ef40 	call	29ef4 <_calloc_r>
   27050:	103ff626 	beq	r2,zero,2702c <__alt_data_end+0xf402702c>
   27054:	14000115 	stw	r16,4(r2)
   27058:	14800215 	stw	r18,8(r2)
   2705c:	003fe606 	br	26ff8 <__alt_data_end+0xf4026ff8>

00027060 <_Bfree>:
   27060:	28000826 	beq	r5,zero,27084 <_Bfree+0x24>
   27064:	28c00117 	ldw	r3,4(r5)
   27068:	20801317 	ldw	r2,76(r4)
   2706c:	18c7883a 	add	r3,r3,r3
   27070:	18c7883a 	add	r3,r3,r3
   27074:	10c5883a 	add	r2,r2,r3
   27078:	10c00017 	ldw	r3,0(r2)
   2707c:	28c00015 	stw	r3,0(r5)
   27080:	11400015 	stw	r5,0(r2)
   27084:	f800283a 	ret

00027088 <__multadd>:
   27088:	defffa04 	addi	sp,sp,-24
   2708c:	dc800315 	stw	r18,12(sp)
   27090:	dc400215 	stw	r17,8(sp)
   27094:	dc000115 	stw	r16,4(sp)
   27098:	2823883a 	mov	r17,r5
   2709c:	2c000417 	ldw	r16,16(r5)
   270a0:	dfc00515 	stw	ra,20(sp)
   270a4:	dcc00415 	stw	r19,16(sp)
   270a8:	2025883a 	mov	r18,r4
   270ac:	29400504 	addi	r5,r5,20
   270b0:	0011883a 	mov	r8,zero
   270b4:	28c00017 	ldw	r3,0(r5)
   270b8:	29400104 	addi	r5,r5,4
   270bc:	42000044 	addi	r8,r8,1
   270c0:	18bfffcc 	andi	r2,r3,65535
   270c4:	1185383a 	mul	r2,r2,r6
   270c8:	1806d43a 	srli	r3,r3,16
   270cc:	11cf883a 	add	r7,r2,r7
   270d0:	3808d43a 	srli	r4,r7,16
   270d4:	1987383a 	mul	r3,r3,r6
   270d8:	38bfffcc 	andi	r2,r7,65535
   270dc:	1907883a 	add	r3,r3,r4
   270e0:	1808943a 	slli	r4,r3,16
   270e4:	180ed43a 	srli	r7,r3,16
   270e8:	2085883a 	add	r2,r4,r2
   270ec:	28bfff15 	stw	r2,-4(r5)
   270f0:	443ff016 	blt	r8,r16,270b4 <__alt_data_end+0xf40270b4>
   270f4:	38000926 	beq	r7,zero,2711c <__multadd+0x94>
   270f8:	88800217 	ldw	r2,8(r17)
   270fc:	80800f0e 	bge	r16,r2,2713c <__multadd+0xb4>
   27100:	80800144 	addi	r2,r16,5
   27104:	1085883a 	add	r2,r2,r2
   27108:	1085883a 	add	r2,r2,r2
   2710c:	8885883a 	add	r2,r17,r2
   27110:	11c00015 	stw	r7,0(r2)
   27114:	84000044 	addi	r16,r16,1
   27118:	8c000415 	stw	r16,16(r17)
   2711c:	8805883a 	mov	r2,r17
   27120:	dfc00517 	ldw	ra,20(sp)
   27124:	dcc00417 	ldw	r19,16(sp)
   27128:	dc800317 	ldw	r18,12(sp)
   2712c:	dc400217 	ldw	r17,8(sp)
   27130:	dc000117 	ldw	r16,4(sp)
   27134:	dec00604 	addi	sp,sp,24
   27138:	f800283a 	ret
   2713c:	89400117 	ldw	r5,4(r17)
   27140:	9009883a 	mov	r4,r18
   27144:	d9c00015 	stw	r7,0(sp)
   27148:	29400044 	addi	r5,r5,1
   2714c:	0026fb80 	call	26fb8 <_Balloc>
   27150:	89800417 	ldw	r6,16(r17)
   27154:	89400304 	addi	r5,r17,12
   27158:	11000304 	addi	r4,r2,12
   2715c:	31800084 	addi	r6,r6,2
   27160:	318d883a 	add	r6,r6,r6
   27164:	318d883a 	add	r6,r6,r6
   27168:	1027883a 	mov	r19,r2
   2716c:	0026bec0 	call	26bec <memcpy>
   27170:	d9c00017 	ldw	r7,0(sp)
   27174:	88000a26 	beq	r17,zero,271a0 <__multadd+0x118>
   27178:	88c00117 	ldw	r3,4(r17)
   2717c:	90801317 	ldw	r2,76(r18)
   27180:	18c7883a 	add	r3,r3,r3
   27184:	18c7883a 	add	r3,r3,r3
   27188:	10c5883a 	add	r2,r2,r3
   2718c:	10c00017 	ldw	r3,0(r2)
   27190:	88c00015 	stw	r3,0(r17)
   27194:	14400015 	stw	r17,0(r2)
   27198:	9823883a 	mov	r17,r19
   2719c:	003fd806 	br	27100 <__alt_data_end+0xf4027100>
   271a0:	9823883a 	mov	r17,r19
   271a4:	003fd606 	br	27100 <__alt_data_end+0xf4027100>

000271a8 <__s2b>:
   271a8:	defff904 	addi	sp,sp,-28
   271ac:	dc400115 	stw	r17,4(sp)
   271b0:	dc000015 	stw	r16,0(sp)
   271b4:	2023883a 	mov	r17,r4
   271b8:	2821883a 	mov	r16,r5
   271bc:	39000204 	addi	r4,r7,8
   271c0:	01400244 	movi	r5,9
   271c4:	dcc00315 	stw	r19,12(sp)
   271c8:	dc800215 	stw	r18,8(sp)
   271cc:	dfc00615 	stw	ra,24(sp)
   271d0:	dd400515 	stw	r21,20(sp)
   271d4:	dd000415 	stw	r20,16(sp)
   271d8:	3825883a 	mov	r18,r7
   271dc:	3027883a 	mov	r19,r6
   271e0:	002b2240 	call	2b224 <__divsi3>
   271e4:	00c00044 	movi	r3,1
   271e8:	000b883a 	mov	r5,zero
   271ec:	1880030e 	bge	r3,r2,271fc <__s2b+0x54>
   271f0:	18c7883a 	add	r3,r3,r3
   271f4:	29400044 	addi	r5,r5,1
   271f8:	18bffd16 	blt	r3,r2,271f0 <__alt_data_end+0xf40271f0>
   271fc:	8809883a 	mov	r4,r17
   27200:	0026fb80 	call	26fb8 <_Balloc>
   27204:	d8c00717 	ldw	r3,28(sp)
   27208:	10c00515 	stw	r3,20(r2)
   2720c:	00c00044 	movi	r3,1
   27210:	10c00415 	stw	r3,16(r2)
   27214:	00c00244 	movi	r3,9
   27218:	1cc0210e 	bge	r3,r19,272a0 <__s2b+0xf8>
   2721c:	80eb883a 	add	r21,r16,r3
   27220:	a829883a 	mov	r20,r21
   27224:	84e1883a 	add	r16,r16,r19
   27228:	a1c00007 	ldb	r7,0(r20)
   2722c:	01800284 	movi	r6,10
   27230:	a5000044 	addi	r20,r20,1
   27234:	100b883a 	mov	r5,r2
   27238:	39fff404 	addi	r7,r7,-48
   2723c:	8809883a 	mov	r4,r17
   27240:	00270880 	call	27088 <__multadd>
   27244:	a43ff81e 	bne	r20,r16,27228 <__alt_data_end+0xf4027228>
   27248:	ace1883a 	add	r16,r21,r19
   2724c:	843ffe04 	addi	r16,r16,-8
   27250:	9c800a0e 	bge	r19,r18,2727c <__s2b+0xd4>
   27254:	94e5c83a 	sub	r18,r18,r19
   27258:	84a5883a 	add	r18,r16,r18
   2725c:	81c00007 	ldb	r7,0(r16)
   27260:	01800284 	movi	r6,10
   27264:	84000044 	addi	r16,r16,1
   27268:	100b883a 	mov	r5,r2
   2726c:	39fff404 	addi	r7,r7,-48
   27270:	8809883a 	mov	r4,r17
   27274:	00270880 	call	27088 <__multadd>
   27278:	84bff81e 	bne	r16,r18,2725c <__alt_data_end+0xf402725c>
   2727c:	dfc00617 	ldw	ra,24(sp)
   27280:	dd400517 	ldw	r21,20(sp)
   27284:	dd000417 	ldw	r20,16(sp)
   27288:	dcc00317 	ldw	r19,12(sp)
   2728c:	dc800217 	ldw	r18,8(sp)
   27290:	dc400117 	ldw	r17,4(sp)
   27294:	dc000017 	ldw	r16,0(sp)
   27298:	dec00704 	addi	sp,sp,28
   2729c:	f800283a 	ret
   272a0:	84000284 	addi	r16,r16,10
   272a4:	1827883a 	mov	r19,r3
   272a8:	003fe906 	br	27250 <__alt_data_end+0xf4027250>

000272ac <__hi0bits>:
   272ac:	20bfffec 	andhi	r2,r4,65535
   272b0:	1000141e 	bne	r2,zero,27304 <__hi0bits+0x58>
   272b4:	2008943a 	slli	r4,r4,16
   272b8:	00800404 	movi	r2,16
   272bc:	20ffc02c 	andhi	r3,r4,65280
   272c0:	1800021e 	bne	r3,zero,272cc <__hi0bits+0x20>
   272c4:	2008923a 	slli	r4,r4,8
   272c8:	10800204 	addi	r2,r2,8
   272cc:	20fc002c 	andhi	r3,r4,61440
   272d0:	1800021e 	bne	r3,zero,272dc <__hi0bits+0x30>
   272d4:	2008913a 	slli	r4,r4,4
   272d8:	10800104 	addi	r2,r2,4
   272dc:	20f0002c 	andhi	r3,r4,49152
   272e0:	1800031e 	bne	r3,zero,272f0 <__hi0bits+0x44>
   272e4:	2109883a 	add	r4,r4,r4
   272e8:	10800084 	addi	r2,r2,2
   272ec:	2109883a 	add	r4,r4,r4
   272f0:	20000316 	blt	r4,zero,27300 <__hi0bits+0x54>
   272f4:	2110002c 	andhi	r4,r4,16384
   272f8:	2000041e 	bne	r4,zero,2730c <__hi0bits+0x60>
   272fc:	00800804 	movi	r2,32
   27300:	f800283a 	ret
   27304:	0005883a 	mov	r2,zero
   27308:	003fec06 	br	272bc <__alt_data_end+0xf40272bc>
   2730c:	10800044 	addi	r2,r2,1
   27310:	f800283a 	ret

00027314 <__lo0bits>:
   27314:	20c00017 	ldw	r3,0(r4)
   27318:	188001cc 	andi	r2,r3,7
   2731c:	10000826 	beq	r2,zero,27340 <__lo0bits+0x2c>
   27320:	1880004c 	andi	r2,r3,1
   27324:	1000211e 	bne	r2,zero,273ac <__lo0bits+0x98>
   27328:	1880008c 	andi	r2,r3,2
   2732c:	1000211e 	bne	r2,zero,273b4 <__lo0bits+0xa0>
   27330:	1806d0ba 	srli	r3,r3,2
   27334:	00800084 	movi	r2,2
   27338:	20c00015 	stw	r3,0(r4)
   2733c:	f800283a 	ret
   27340:	18bfffcc 	andi	r2,r3,65535
   27344:	10001326 	beq	r2,zero,27394 <__lo0bits+0x80>
   27348:	0005883a 	mov	r2,zero
   2734c:	19403fcc 	andi	r5,r3,255
   27350:	2800021e 	bne	r5,zero,2735c <__lo0bits+0x48>
   27354:	1806d23a 	srli	r3,r3,8
   27358:	10800204 	addi	r2,r2,8
   2735c:	194003cc 	andi	r5,r3,15
   27360:	2800021e 	bne	r5,zero,2736c <__lo0bits+0x58>
   27364:	1806d13a 	srli	r3,r3,4
   27368:	10800104 	addi	r2,r2,4
   2736c:	194000cc 	andi	r5,r3,3
   27370:	2800021e 	bne	r5,zero,2737c <__lo0bits+0x68>
   27374:	1806d0ba 	srli	r3,r3,2
   27378:	10800084 	addi	r2,r2,2
   2737c:	1940004c 	andi	r5,r3,1
   27380:	2800081e 	bne	r5,zero,273a4 <__lo0bits+0x90>
   27384:	1806d07a 	srli	r3,r3,1
   27388:	1800051e 	bne	r3,zero,273a0 <__lo0bits+0x8c>
   2738c:	00800804 	movi	r2,32
   27390:	f800283a 	ret
   27394:	1806d43a 	srli	r3,r3,16
   27398:	00800404 	movi	r2,16
   2739c:	003feb06 	br	2734c <__alt_data_end+0xf402734c>
   273a0:	10800044 	addi	r2,r2,1
   273a4:	20c00015 	stw	r3,0(r4)
   273a8:	f800283a 	ret
   273ac:	0005883a 	mov	r2,zero
   273b0:	f800283a 	ret
   273b4:	1806d07a 	srli	r3,r3,1
   273b8:	00800044 	movi	r2,1
   273bc:	20c00015 	stw	r3,0(r4)
   273c0:	f800283a 	ret

000273c4 <__i2b>:
   273c4:	defffd04 	addi	sp,sp,-12
   273c8:	dc000015 	stw	r16,0(sp)
   273cc:	04000044 	movi	r16,1
   273d0:	dc400115 	stw	r17,4(sp)
   273d4:	2823883a 	mov	r17,r5
   273d8:	800b883a 	mov	r5,r16
   273dc:	dfc00215 	stw	ra,8(sp)
   273e0:	0026fb80 	call	26fb8 <_Balloc>
   273e4:	14400515 	stw	r17,20(r2)
   273e8:	14000415 	stw	r16,16(r2)
   273ec:	dfc00217 	ldw	ra,8(sp)
   273f0:	dc400117 	ldw	r17,4(sp)
   273f4:	dc000017 	ldw	r16,0(sp)
   273f8:	dec00304 	addi	sp,sp,12
   273fc:	f800283a 	ret

00027400 <__multiply>:
   27400:	defffa04 	addi	sp,sp,-24
   27404:	dcc00315 	stw	r19,12(sp)
   27408:	dc800215 	stw	r18,8(sp)
   2740c:	34c00417 	ldw	r19,16(r6)
   27410:	2c800417 	ldw	r18,16(r5)
   27414:	dd000415 	stw	r20,16(sp)
   27418:	dc400115 	stw	r17,4(sp)
   2741c:	dfc00515 	stw	ra,20(sp)
   27420:	dc000015 	stw	r16,0(sp)
   27424:	2829883a 	mov	r20,r5
   27428:	3023883a 	mov	r17,r6
   2742c:	94c0050e 	bge	r18,r19,27444 <__multiply+0x44>
   27430:	9007883a 	mov	r3,r18
   27434:	3029883a 	mov	r20,r6
   27438:	9825883a 	mov	r18,r19
   2743c:	2823883a 	mov	r17,r5
   27440:	1827883a 	mov	r19,r3
   27444:	a0800217 	ldw	r2,8(r20)
   27448:	94e1883a 	add	r16,r18,r19
   2744c:	a1400117 	ldw	r5,4(r20)
   27450:	1400010e 	bge	r2,r16,27458 <__multiply+0x58>
   27454:	29400044 	addi	r5,r5,1
   27458:	0026fb80 	call	26fb8 <_Balloc>
   2745c:	8415883a 	add	r10,r16,r16
   27460:	12c00504 	addi	r11,r2,20
   27464:	5295883a 	add	r10,r10,r10
   27468:	5a95883a 	add	r10,r11,r10
   2746c:	5807883a 	mov	r3,r11
   27470:	5a80032e 	bgeu	r11,r10,27480 <__multiply+0x80>
   27474:	18000015 	stw	zero,0(r3)
   27478:	18c00104 	addi	r3,r3,4
   2747c:	1abffd36 	bltu	r3,r10,27474 <__alt_data_end+0xf4027474>
   27480:	9ce7883a 	add	r19,r19,r19
   27484:	94a5883a 	add	r18,r18,r18
   27488:	89800504 	addi	r6,r17,20
   2748c:	9ce7883a 	add	r19,r19,r19
   27490:	a3400504 	addi	r13,r20,20
   27494:	94a5883a 	add	r18,r18,r18
   27498:	34d9883a 	add	r12,r6,r19
   2749c:	6c93883a 	add	r9,r13,r18
   274a0:	3300422e 	bgeu	r6,r12,275ac <__multiply+0x1ac>
   274a4:	37c00017 	ldw	ra,0(r6)
   274a8:	fbffffcc 	andi	r15,ra,65535
   274ac:	78001b26 	beq	r15,zero,2751c <__multiply+0x11c>
   274b0:	5811883a 	mov	r8,r11
   274b4:	681d883a 	mov	r14,r13
   274b8:	000f883a 	mov	r7,zero
   274bc:	71000017 	ldw	r4,0(r14)
   274c0:	40c00017 	ldw	r3,0(r8)
   274c4:	73800104 	addi	r14,r14,4
   274c8:	217fffcc 	andi	r5,r4,65535
   274cc:	2bcb383a 	mul	r5,r5,r15
   274d0:	2008d43a 	srli	r4,r4,16
   274d4:	1c7fffcc 	andi	r17,r3,65535
   274d8:	2c4b883a 	add	r5,r5,r17
   274dc:	29cb883a 	add	r5,r5,r7
   274e0:	23c9383a 	mul	r4,r4,r15
   274e4:	1806d43a 	srli	r3,r3,16
   274e8:	280ed43a 	srli	r7,r5,16
   274ec:	297fffcc 	andi	r5,r5,65535
   274f0:	20c7883a 	add	r3,r4,r3
   274f4:	19c7883a 	add	r3,r3,r7
   274f8:	1808943a 	slli	r4,r3,16
   274fc:	4023883a 	mov	r17,r8
   27500:	180ed43a 	srli	r7,r3,16
   27504:	214ab03a 	or	r5,r4,r5
   27508:	41400015 	stw	r5,0(r8)
   2750c:	42000104 	addi	r8,r8,4
   27510:	727fea36 	bltu	r14,r9,274bc <__alt_data_end+0xf40274bc>
   27514:	89c00115 	stw	r7,4(r17)
   27518:	37c00017 	ldw	ra,0(r6)
   2751c:	f83ed43a 	srli	ra,ra,16
   27520:	f8001f26 	beq	ra,zero,275a0 <__multiply+0x1a0>
   27524:	58c00017 	ldw	r3,0(r11)
   27528:	681d883a 	mov	r14,r13
   2752c:	581f883a 	mov	r15,r11
   27530:	1811883a 	mov	r8,r3
   27534:	5825883a 	mov	r18,r11
   27538:	000f883a 	mov	r7,zero
   2753c:	00000106 	br	27544 <__multiply+0x144>
   27540:	8825883a 	mov	r18,r17
   27544:	7140000b 	ldhu	r5,0(r14)
   27548:	4010d43a 	srli	r8,r8,16
   2754c:	193fffcc 	andi	r4,r3,65535
   27550:	2fcb383a 	mul	r5,r5,ra
   27554:	7bc00104 	addi	r15,r15,4
   27558:	73800104 	addi	r14,r14,4
   2755c:	2a0b883a 	add	r5,r5,r8
   27560:	29cb883a 	add	r5,r5,r7
   27564:	2806943a 	slli	r3,r5,16
   27568:	94400104 	addi	r17,r18,4
   2756c:	280ad43a 	srli	r5,r5,16
   27570:	1908b03a 	or	r4,r3,r4
   27574:	793fff15 	stw	r4,-4(r15)
   27578:	70ffff17 	ldw	r3,-4(r14)
   2757c:	8a000017 	ldw	r8,0(r17)
   27580:	1806d43a 	srli	r3,r3,16
   27584:	413fffcc 	andi	r4,r8,65535
   27588:	1fc7383a 	mul	r3,r3,ra
   2758c:	1907883a 	add	r3,r3,r4
   27590:	1947883a 	add	r3,r3,r5
   27594:	180ed43a 	srli	r7,r3,16
   27598:	727fe936 	bltu	r14,r9,27540 <__alt_data_end+0xf4027540>
   2759c:	90c00115 	stw	r3,4(r18)
   275a0:	31800104 	addi	r6,r6,4
   275a4:	5ac00104 	addi	r11,r11,4
   275a8:	333fbe36 	bltu	r6,r12,274a4 <__alt_data_end+0xf40274a4>
   275ac:	0400090e 	bge	zero,r16,275d4 <__multiply+0x1d4>
   275b0:	50ffff17 	ldw	r3,-4(r10)
   275b4:	52bfff04 	addi	r10,r10,-4
   275b8:	18000326 	beq	r3,zero,275c8 <__multiply+0x1c8>
   275bc:	00000506 	br	275d4 <__multiply+0x1d4>
   275c0:	50c00017 	ldw	r3,0(r10)
   275c4:	1800031e 	bne	r3,zero,275d4 <__multiply+0x1d4>
   275c8:	843fffc4 	addi	r16,r16,-1
   275cc:	52bfff04 	addi	r10,r10,-4
   275d0:	803ffb1e 	bne	r16,zero,275c0 <__alt_data_end+0xf40275c0>
   275d4:	14000415 	stw	r16,16(r2)
   275d8:	dfc00517 	ldw	ra,20(sp)
   275dc:	dd000417 	ldw	r20,16(sp)
   275e0:	dcc00317 	ldw	r19,12(sp)
   275e4:	dc800217 	ldw	r18,8(sp)
   275e8:	dc400117 	ldw	r17,4(sp)
   275ec:	dc000017 	ldw	r16,0(sp)
   275f0:	dec00604 	addi	sp,sp,24
   275f4:	f800283a 	ret

000275f8 <__pow5mult>:
   275f8:	defffa04 	addi	sp,sp,-24
   275fc:	dcc00315 	stw	r19,12(sp)
   27600:	dc000015 	stw	r16,0(sp)
   27604:	dfc00515 	stw	ra,20(sp)
   27608:	dd000415 	stw	r20,16(sp)
   2760c:	dc800215 	stw	r18,8(sp)
   27610:	dc400115 	stw	r17,4(sp)
   27614:	308000cc 	andi	r2,r6,3
   27618:	3021883a 	mov	r16,r6
   2761c:	2027883a 	mov	r19,r4
   27620:	10002f1e 	bne	r2,zero,276e0 <__pow5mult+0xe8>
   27624:	2825883a 	mov	r18,r5
   27628:	8021d0ba 	srai	r16,r16,2
   2762c:	80001a26 	beq	r16,zero,27698 <__pow5mult+0xa0>
   27630:	9c401217 	ldw	r17,72(r19)
   27634:	8800061e 	bne	r17,zero,27650 <__pow5mult+0x58>
   27638:	00003406 	br	2770c <__pow5mult+0x114>
   2763c:	8021d07a 	srai	r16,r16,1
   27640:	80001526 	beq	r16,zero,27698 <__pow5mult+0xa0>
   27644:	88800017 	ldw	r2,0(r17)
   27648:	10001c26 	beq	r2,zero,276bc <__pow5mult+0xc4>
   2764c:	1023883a 	mov	r17,r2
   27650:	8080004c 	andi	r2,r16,1
   27654:	103ff926 	beq	r2,zero,2763c <__alt_data_end+0xf402763c>
   27658:	880d883a 	mov	r6,r17
   2765c:	900b883a 	mov	r5,r18
   27660:	9809883a 	mov	r4,r19
   27664:	00274000 	call	27400 <__multiply>
   27668:	90001b26 	beq	r18,zero,276d8 <__pow5mult+0xe0>
   2766c:	91000117 	ldw	r4,4(r18)
   27670:	98c01317 	ldw	r3,76(r19)
   27674:	8021d07a 	srai	r16,r16,1
   27678:	2109883a 	add	r4,r4,r4
   2767c:	2109883a 	add	r4,r4,r4
   27680:	1907883a 	add	r3,r3,r4
   27684:	19000017 	ldw	r4,0(r3)
   27688:	91000015 	stw	r4,0(r18)
   2768c:	1c800015 	stw	r18,0(r3)
   27690:	1025883a 	mov	r18,r2
   27694:	803feb1e 	bne	r16,zero,27644 <__alt_data_end+0xf4027644>
   27698:	9005883a 	mov	r2,r18
   2769c:	dfc00517 	ldw	ra,20(sp)
   276a0:	dd000417 	ldw	r20,16(sp)
   276a4:	dcc00317 	ldw	r19,12(sp)
   276a8:	dc800217 	ldw	r18,8(sp)
   276ac:	dc400117 	ldw	r17,4(sp)
   276b0:	dc000017 	ldw	r16,0(sp)
   276b4:	dec00604 	addi	sp,sp,24
   276b8:	f800283a 	ret
   276bc:	880d883a 	mov	r6,r17
   276c0:	880b883a 	mov	r5,r17
   276c4:	9809883a 	mov	r4,r19
   276c8:	00274000 	call	27400 <__multiply>
   276cc:	88800015 	stw	r2,0(r17)
   276d0:	10000015 	stw	zero,0(r2)
   276d4:	003fdd06 	br	2764c <__alt_data_end+0xf402764c>
   276d8:	1025883a 	mov	r18,r2
   276dc:	003fd706 	br	2763c <__alt_data_end+0xf402763c>
   276e0:	10bfffc4 	addi	r2,r2,-1
   276e4:	1085883a 	add	r2,r2,r2
   276e8:	00c000f4 	movhi	r3,3
   276ec:	18c69204 	addi	r3,r3,6728
   276f0:	1085883a 	add	r2,r2,r2
   276f4:	1885883a 	add	r2,r3,r2
   276f8:	11800017 	ldw	r6,0(r2)
   276fc:	000f883a 	mov	r7,zero
   27700:	00270880 	call	27088 <__multadd>
   27704:	1025883a 	mov	r18,r2
   27708:	003fc706 	br	27628 <__alt_data_end+0xf4027628>
   2770c:	05000044 	movi	r20,1
   27710:	a00b883a 	mov	r5,r20
   27714:	9809883a 	mov	r4,r19
   27718:	0026fb80 	call	26fb8 <_Balloc>
   2771c:	1023883a 	mov	r17,r2
   27720:	00809c44 	movi	r2,625
   27724:	88800515 	stw	r2,20(r17)
   27728:	8d000415 	stw	r20,16(r17)
   2772c:	9c401215 	stw	r17,72(r19)
   27730:	88000015 	stw	zero,0(r17)
   27734:	003fc606 	br	27650 <__alt_data_end+0xf4027650>

00027738 <__lshift>:
   27738:	defff904 	addi	sp,sp,-28
   2773c:	dd400515 	stw	r21,20(sp)
   27740:	dcc00315 	stw	r19,12(sp)
   27744:	302bd17a 	srai	r21,r6,5
   27748:	2cc00417 	ldw	r19,16(r5)
   2774c:	28800217 	ldw	r2,8(r5)
   27750:	dd000415 	stw	r20,16(sp)
   27754:	ace7883a 	add	r19,r21,r19
   27758:	dc800215 	stw	r18,8(sp)
   2775c:	dc400115 	stw	r17,4(sp)
   27760:	dc000015 	stw	r16,0(sp)
   27764:	dfc00615 	stw	ra,24(sp)
   27768:	9c000044 	addi	r16,r19,1
   2776c:	2823883a 	mov	r17,r5
   27770:	3029883a 	mov	r20,r6
   27774:	2025883a 	mov	r18,r4
   27778:	29400117 	ldw	r5,4(r5)
   2777c:	1400030e 	bge	r2,r16,2778c <__lshift+0x54>
   27780:	1085883a 	add	r2,r2,r2
   27784:	29400044 	addi	r5,r5,1
   27788:	143ffd16 	blt	r2,r16,27780 <__alt_data_end+0xf4027780>
   2778c:	9009883a 	mov	r4,r18
   27790:	0026fb80 	call	26fb8 <_Balloc>
   27794:	10c00504 	addi	r3,r2,20
   27798:	0540070e 	bge	zero,r21,277b8 <__lshift+0x80>
   2779c:	ad6b883a 	add	r21,r21,r21
   277a0:	ad6b883a 	add	r21,r21,r21
   277a4:	1809883a 	mov	r4,r3
   277a8:	1d47883a 	add	r3,r3,r21
   277ac:	20000015 	stw	zero,0(r4)
   277b0:	21000104 	addi	r4,r4,4
   277b4:	193ffd1e 	bne	r3,r4,277ac <__alt_data_end+0xf40277ac>
   277b8:	8a000417 	ldw	r8,16(r17)
   277bc:	89000504 	addi	r4,r17,20
   277c0:	a18007cc 	andi	r6,r20,31
   277c4:	4211883a 	add	r8,r8,r8
   277c8:	4211883a 	add	r8,r8,r8
   277cc:	2211883a 	add	r8,r4,r8
   277d0:	30002326 	beq	r6,zero,27860 <__lshift+0x128>
   277d4:	02400804 	movi	r9,32
   277d8:	4993c83a 	sub	r9,r9,r6
   277dc:	000b883a 	mov	r5,zero
   277e0:	21c00017 	ldw	r7,0(r4)
   277e4:	1815883a 	mov	r10,r3
   277e8:	18c00104 	addi	r3,r3,4
   277ec:	398e983a 	sll	r7,r7,r6
   277f0:	21000104 	addi	r4,r4,4
   277f4:	394ab03a 	or	r5,r7,r5
   277f8:	197fff15 	stw	r5,-4(r3)
   277fc:	217fff17 	ldw	r5,-4(r4)
   27800:	2a4ad83a 	srl	r5,r5,r9
   27804:	223ff636 	bltu	r4,r8,277e0 <__alt_data_end+0xf40277e0>
   27808:	51400115 	stw	r5,4(r10)
   2780c:	28001a1e 	bne	r5,zero,27878 <__lshift+0x140>
   27810:	843fffc4 	addi	r16,r16,-1
   27814:	14000415 	stw	r16,16(r2)
   27818:	88000826 	beq	r17,zero,2783c <__lshift+0x104>
   2781c:	89000117 	ldw	r4,4(r17)
   27820:	90c01317 	ldw	r3,76(r18)
   27824:	2109883a 	add	r4,r4,r4
   27828:	2109883a 	add	r4,r4,r4
   2782c:	1907883a 	add	r3,r3,r4
   27830:	19000017 	ldw	r4,0(r3)
   27834:	89000015 	stw	r4,0(r17)
   27838:	1c400015 	stw	r17,0(r3)
   2783c:	dfc00617 	ldw	ra,24(sp)
   27840:	dd400517 	ldw	r21,20(sp)
   27844:	dd000417 	ldw	r20,16(sp)
   27848:	dcc00317 	ldw	r19,12(sp)
   2784c:	dc800217 	ldw	r18,8(sp)
   27850:	dc400117 	ldw	r17,4(sp)
   27854:	dc000017 	ldw	r16,0(sp)
   27858:	dec00704 	addi	sp,sp,28
   2785c:	f800283a 	ret
   27860:	21400017 	ldw	r5,0(r4)
   27864:	18c00104 	addi	r3,r3,4
   27868:	21000104 	addi	r4,r4,4
   2786c:	197fff15 	stw	r5,-4(r3)
   27870:	223ffb36 	bltu	r4,r8,27860 <__alt_data_end+0xf4027860>
   27874:	003fe606 	br	27810 <__alt_data_end+0xf4027810>
   27878:	9c000084 	addi	r16,r19,2
   2787c:	003fe406 	br	27810 <__alt_data_end+0xf4027810>

00027880 <__mcmp>:
   27880:	20800417 	ldw	r2,16(r4)
   27884:	28c00417 	ldw	r3,16(r5)
   27888:	10c5c83a 	sub	r2,r2,r3
   2788c:	1000111e 	bne	r2,zero,278d4 <__mcmp+0x54>
   27890:	18c7883a 	add	r3,r3,r3
   27894:	18c7883a 	add	r3,r3,r3
   27898:	21000504 	addi	r4,r4,20
   2789c:	29400504 	addi	r5,r5,20
   278a0:	20c5883a 	add	r2,r4,r3
   278a4:	28cb883a 	add	r5,r5,r3
   278a8:	00000106 	br	278b0 <__mcmp+0x30>
   278ac:	20800a2e 	bgeu	r4,r2,278d8 <__mcmp+0x58>
   278b0:	10bfff04 	addi	r2,r2,-4
   278b4:	297fff04 	addi	r5,r5,-4
   278b8:	11800017 	ldw	r6,0(r2)
   278bc:	28c00017 	ldw	r3,0(r5)
   278c0:	30fffa26 	beq	r6,r3,278ac <__alt_data_end+0xf40278ac>
   278c4:	30c00236 	bltu	r6,r3,278d0 <__mcmp+0x50>
   278c8:	00800044 	movi	r2,1
   278cc:	f800283a 	ret
   278d0:	00bfffc4 	movi	r2,-1
   278d4:	f800283a 	ret
   278d8:	0005883a 	mov	r2,zero
   278dc:	f800283a 	ret

000278e0 <__mdiff>:
   278e0:	28c00417 	ldw	r3,16(r5)
   278e4:	30800417 	ldw	r2,16(r6)
   278e8:	defffa04 	addi	sp,sp,-24
   278ec:	dcc00315 	stw	r19,12(sp)
   278f0:	dc800215 	stw	r18,8(sp)
   278f4:	dfc00515 	stw	ra,20(sp)
   278f8:	dd000415 	stw	r20,16(sp)
   278fc:	dc400115 	stw	r17,4(sp)
   27900:	dc000015 	stw	r16,0(sp)
   27904:	1887c83a 	sub	r3,r3,r2
   27908:	2825883a 	mov	r18,r5
   2790c:	3027883a 	mov	r19,r6
   27910:	1800141e 	bne	r3,zero,27964 <__mdiff+0x84>
   27914:	1085883a 	add	r2,r2,r2
   27918:	1085883a 	add	r2,r2,r2
   2791c:	2a000504 	addi	r8,r5,20
   27920:	34000504 	addi	r16,r6,20
   27924:	4087883a 	add	r3,r8,r2
   27928:	8085883a 	add	r2,r16,r2
   2792c:	00000106 	br	27934 <__mdiff+0x54>
   27930:	40c0592e 	bgeu	r8,r3,27a98 <__mdiff+0x1b8>
   27934:	18ffff04 	addi	r3,r3,-4
   27938:	10bfff04 	addi	r2,r2,-4
   2793c:	19c00017 	ldw	r7,0(r3)
   27940:	11400017 	ldw	r5,0(r2)
   27944:	397ffa26 	beq	r7,r5,27930 <__alt_data_end+0xf4027930>
   27948:	3940592e 	bgeu	r7,r5,27ab0 <__mdiff+0x1d0>
   2794c:	9005883a 	mov	r2,r18
   27950:	4023883a 	mov	r17,r8
   27954:	9825883a 	mov	r18,r19
   27958:	05000044 	movi	r20,1
   2795c:	1027883a 	mov	r19,r2
   27960:	00000406 	br	27974 <__mdiff+0x94>
   27964:	18005616 	blt	r3,zero,27ac0 <__mdiff+0x1e0>
   27968:	34400504 	addi	r17,r6,20
   2796c:	2c000504 	addi	r16,r5,20
   27970:	0029883a 	mov	r20,zero
   27974:	91400117 	ldw	r5,4(r18)
   27978:	0026fb80 	call	26fb8 <_Balloc>
   2797c:	92400417 	ldw	r9,16(r18)
   27980:	9b000417 	ldw	r12,16(r19)
   27984:	12c00504 	addi	r11,r2,20
   27988:	4a51883a 	add	r8,r9,r9
   2798c:	6319883a 	add	r12,r12,r12
   27990:	4211883a 	add	r8,r8,r8
   27994:	6319883a 	add	r12,r12,r12
   27998:	15000315 	stw	r20,12(r2)
   2799c:	8211883a 	add	r8,r16,r8
   279a0:	8b19883a 	add	r12,r17,r12
   279a4:	0007883a 	mov	r3,zero
   279a8:	81400017 	ldw	r5,0(r16)
   279ac:	89c00017 	ldw	r7,0(r17)
   279b0:	59800104 	addi	r6,r11,4
   279b4:	293fffcc 	andi	r4,r5,65535
   279b8:	20c7883a 	add	r3,r4,r3
   279bc:	393fffcc 	andi	r4,r7,65535
   279c0:	1909c83a 	sub	r4,r3,r4
   279c4:	280ad43a 	srli	r5,r5,16
   279c8:	380ed43a 	srli	r7,r7,16
   279cc:	2007d43a 	srai	r3,r4,16
   279d0:	213fffcc 	andi	r4,r4,65535
   279d4:	29cbc83a 	sub	r5,r5,r7
   279d8:	28c7883a 	add	r3,r5,r3
   279dc:	180a943a 	slli	r5,r3,16
   279e0:	8c400104 	addi	r17,r17,4
   279e4:	84000104 	addi	r16,r16,4
   279e8:	2908b03a 	or	r4,r5,r4
   279ec:	59000015 	stw	r4,0(r11)
   279f0:	1807d43a 	srai	r3,r3,16
   279f4:	3015883a 	mov	r10,r6
   279f8:	3017883a 	mov	r11,r6
   279fc:	8b3fea36 	bltu	r17,r12,279a8 <__alt_data_end+0xf40279a8>
   27a00:	8200162e 	bgeu	r16,r8,27a5c <__mdiff+0x17c>
   27a04:	8017883a 	mov	r11,r16
   27a08:	59400017 	ldw	r5,0(r11)
   27a0c:	31800104 	addi	r6,r6,4
   27a10:	5ac00104 	addi	r11,r11,4
   27a14:	293fffcc 	andi	r4,r5,65535
   27a18:	20c7883a 	add	r3,r4,r3
   27a1c:	280ed43a 	srli	r7,r5,16
   27a20:	180bd43a 	srai	r5,r3,16
   27a24:	193fffcc 	andi	r4,r3,65535
   27a28:	3947883a 	add	r3,r7,r5
   27a2c:	180a943a 	slli	r5,r3,16
   27a30:	1807d43a 	srai	r3,r3,16
   27a34:	2908b03a 	or	r4,r5,r4
   27a38:	313fff15 	stw	r4,-4(r6)
   27a3c:	5a3ff236 	bltu	r11,r8,27a08 <__alt_data_end+0xf4027a08>
   27a40:	0406303a 	nor	r3,zero,r16
   27a44:	1a07883a 	add	r3,r3,r8
   27a48:	1806d0ba 	srli	r3,r3,2
   27a4c:	18c00044 	addi	r3,r3,1
   27a50:	18c7883a 	add	r3,r3,r3
   27a54:	18c7883a 	add	r3,r3,r3
   27a58:	50d5883a 	add	r10,r10,r3
   27a5c:	50ffff04 	addi	r3,r10,-4
   27a60:	2000041e 	bne	r4,zero,27a74 <__mdiff+0x194>
   27a64:	18ffff04 	addi	r3,r3,-4
   27a68:	19000017 	ldw	r4,0(r3)
   27a6c:	4a7fffc4 	addi	r9,r9,-1
   27a70:	203ffc26 	beq	r4,zero,27a64 <__alt_data_end+0xf4027a64>
   27a74:	12400415 	stw	r9,16(r2)
   27a78:	dfc00517 	ldw	ra,20(sp)
   27a7c:	dd000417 	ldw	r20,16(sp)
   27a80:	dcc00317 	ldw	r19,12(sp)
   27a84:	dc800217 	ldw	r18,8(sp)
   27a88:	dc400117 	ldw	r17,4(sp)
   27a8c:	dc000017 	ldw	r16,0(sp)
   27a90:	dec00604 	addi	sp,sp,24
   27a94:	f800283a 	ret
   27a98:	000b883a 	mov	r5,zero
   27a9c:	0026fb80 	call	26fb8 <_Balloc>
   27aa0:	00c00044 	movi	r3,1
   27aa4:	10c00415 	stw	r3,16(r2)
   27aa8:	10000515 	stw	zero,20(r2)
   27aac:	003ff206 	br	27a78 <__alt_data_end+0xf4027a78>
   27ab0:	8023883a 	mov	r17,r16
   27ab4:	0029883a 	mov	r20,zero
   27ab8:	4021883a 	mov	r16,r8
   27abc:	003fad06 	br	27974 <__alt_data_end+0xf4027974>
   27ac0:	9005883a 	mov	r2,r18
   27ac4:	94400504 	addi	r17,r18,20
   27ac8:	9c000504 	addi	r16,r19,20
   27acc:	9825883a 	mov	r18,r19
   27ad0:	05000044 	movi	r20,1
   27ad4:	1027883a 	mov	r19,r2
   27ad8:	003fa606 	br	27974 <__alt_data_end+0xf4027974>

00027adc <__ulp>:
   27adc:	295ffc2c 	andhi	r5,r5,32752
   27ae0:	00bf3034 	movhi	r2,64704
   27ae4:	2887883a 	add	r3,r5,r2
   27ae8:	00c0020e 	bge	zero,r3,27af4 <__ulp+0x18>
   27aec:	0005883a 	mov	r2,zero
   27af0:	f800283a 	ret
   27af4:	00c7c83a 	sub	r3,zero,r3
   27af8:	1807d53a 	srai	r3,r3,20
   27afc:	008004c4 	movi	r2,19
   27b00:	10c00b0e 	bge	r2,r3,27b30 <__ulp+0x54>
   27b04:	18bffb04 	addi	r2,r3,-20
   27b08:	01000784 	movi	r4,30
   27b0c:	0007883a 	mov	r3,zero
   27b10:	20800516 	blt	r4,r2,27b28 <__ulp+0x4c>
   27b14:	010007c4 	movi	r4,31
   27b18:	2089c83a 	sub	r4,r4,r2
   27b1c:	00800044 	movi	r2,1
   27b20:	1104983a 	sll	r2,r2,r4
   27b24:	f800283a 	ret
   27b28:	00800044 	movi	r2,1
   27b2c:	f800283a 	ret
   27b30:	01400234 	movhi	r5,8
   27b34:	28c7d83a 	sra	r3,r5,r3
   27b38:	0005883a 	mov	r2,zero
   27b3c:	f800283a 	ret

00027b40 <__b2d>:
   27b40:	defffa04 	addi	sp,sp,-24
   27b44:	dc000015 	stw	r16,0(sp)
   27b48:	24000417 	ldw	r16,16(r4)
   27b4c:	dc400115 	stw	r17,4(sp)
   27b50:	24400504 	addi	r17,r4,20
   27b54:	8421883a 	add	r16,r16,r16
   27b58:	8421883a 	add	r16,r16,r16
   27b5c:	8c21883a 	add	r16,r17,r16
   27b60:	dc800215 	stw	r18,8(sp)
   27b64:	84bfff17 	ldw	r18,-4(r16)
   27b68:	dd000415 	stw	r20,16(sp)
   27b6c:	dcc00315 	stw	r19,12(sp)
   27b70:	9009883a 	mov	r4,r18
   27b74:	2829883a 	mov	r20,r5
   27b78:	dfc00515 	stw	ra,20(sp)
   27b7c:	00272ac0 	call	272ac <__hi0bits>
   27b80:	00c00804 	movi	r3,32
   27b84:	1889c83a 	sub	r4,r3,r2
   27b88:	a1000015 	stw	r4,0(r20)
   27b8c:	01000284 	movi	r4,10
   27b90:	84ffff04 	addi	r19,r16,-4
   27b94:	20801216 	blt	r4,r2,27be0 <__b2d+0xa0>
   27b98:	018002c4 	movi	r6,11
   27b9c:	308dc83a 	sub	r6,r6,r2
   27ba0:	9186d83a 	srl	r3,r18,r6
   27ba4:	18cffc34 	orhi	r3,r3,16368
   27ba8:	8cc0212e 	bgeu	r17,r19,27c30 <__b2d+0xf0>
   27bac:	813ffe17 	ldw	r4,-8(r16)
   27bb0:	218cd83a 	srl	r6,r4,r6
   27bb4:	10800544 	addi	r2,r2,21
   27bb8:	9084983a 	sll	r2,r18,r2
   27bbc:	1184b03a 	or	r2,r2,r6
   27bc0:	dfc00517 	ldw	ra,20(sp)
   27bc4:	dd000417 	ldw	r20,16(sp)
   27bc8:	dcc00317 	ldw	r19,12(sp)
   27bcc:	dc800217 	ldw	r18,8(sp)
   27bd0:	dc400117 	ldw	r17,4(sp)
   27bd4:	dc000017 	ldw	r16,0(sp)
   27bd8:	dec00604 	addi	sp,sp,24
   27bdc:	f800283a 	ret
   27be0:	8cc00f2e 	bgeu	r17,r19,27c20 <__b2d+0xe0>
   27be4:	117ffd44 	addi	r5,r2,-11
   27be8:	80bffe17 	ldw	r2,-8(r16)
   27bec:	28000e26 	beq	r5,zero,27c28 <__b2d+0xe8>
   27bf0:	1949c83a 	sub	r4,r3,r5
   27bf4:	9164983a 	sll	r18,r18,r5
   27bf8:	1106d83a 	srl	r3,r2,r4
   27bfc:	81bffe04 	addi	r6,r16,-8
   27c00:	948ffc34 	orhi	r18,r18,16368
   27c04:	90c6b03a 	or	r3,r18,r3
   27c08:	89800e2e 	bgeu	r17,r6,27c44 <__b2d+0x104>
   27c0c:	81bffd17 	ldw	r6,-12(r16)
   27c10:	1144983a 	sll	r2,r2,r5
   27c14:	310ad83a 	srl	r5,r6,r4
   27c18:	2884b03a 	or	r2,r5,r2
   27c1c:	003fe806 	br	27bc0 <__alt_data_end+0xf4027bc0>
   27c20:	10bffd44 	addi	r2,r2,-11
   27c24:	1000041e 	bne	r2,zero,27c38 <__b2d+0xf8>
   27c28:	90cffc34 	orhi	r3,r18,16368
   27c2c:	003fe406 	br	27bc0 <__alt_data_end+0xf4027bc0>
   27c30:	000d883a 	mov	r6,zero
   27c34:	003fdf06 	br	27bb4 <__alt_data_end+0xf4027bb4>
   27c38:	90a4983a 	sll	r18,r18,r2
   27c3c:	0005883a 	mov	r2,zero
   27c40:	003ff906 	br	27c28 <__alt_data_end+0xf4027c28>
   27c44:	1144983a 	sll	r2,r2,r5
   27c48:	003fdd06 	br	27bc0 <__alt_data_end+0xf4027bc0>

00027c4c <__d2b>:
   27c4c:	defff804 	addi	sp,sp,-32
   27c50:	dc000215 	stw	r16,8(sp)
   27c54:	3021883a 	mov	r16,r6
   27c58:	dc400315 	stw	r17,12(sp)
   27c5c:	8022907a 	slli	r17,r16,1
   27c60:	dd000615 	stw	r20,24(sp)
   27c64:	2829883a 	mov	r20,r5
   27c68:	01400044 	movi	r5,1
   27c6c:	dcc00515 	stw	r19,20(sp)
   27c70:	dc800415 	stw	r18,16(sp)
   27c74:	dfc00715 	stw	ra,28(sp)
   27c78:	3825883a 	mov	r18,r7
   27c7c:	8822d57a 	srli	r17,r17,21
   27c80:	0026fb80 	call	26fb8 <_Balloc>
   27c84:	1027883a 	mov	r19,r2
   27c88:	00800434 	movhi	r2,16
   27c8c:	10bfffc4 	addi	r2,r2,-1
   27c90:	808c703a 	and	r6,r16,r2
   27c94:	88000126 	beq	r17,zero,27c9c <__d2b+0x50>
   27c98:	31800434 	orhi	r6,r6,16
   27c9c:	d9800015 	stw	r6,0(sp)
   27ca0:	a0002426 	beq	r20,zero,27d34 <__d2b+0xe8>
   27ca4:	d9000104 	addi	r4,sp,4
   27ca8:	dd000115 	stw	r20,4(sp)
   27cac:	00273140 	call	27314 <__lo0bits>
   27cb0:	d8c00017 	ldw	r3,0(sp)
   27cb4:	10002f1e 	bne	r2,zero,27d74 <__d2b+0x128>
   27cb8:	d9000117 	ldw	r4,4(sp)
   27cbc:	99000515 	stw	r4,20(r19)
   27cc0:	1821003a 	cmpeq	r16,r3,zero
   27cc4:	01000084 	movi	r4,2
   27cc8:	2421c83a 	sub	r16,r4,r16
   27ccc:	98c00615 	stw	r3,24(r19)
   27cd0:	9c000415 	stw	r16,16(r19)
   27cd4:	88001f1e 	bne	r17,zero,27d54 <__d2b+0x108>
   27cd8:	10bef384 	addi	r2,r2,-1074
   27cdc:	90800015 	stw	r2,0(r18)
   27ce0:	00900034 	movhi	r2,16384
   27ce4:	10bfffc4 	addi	r2,r2,-1
   27ce8:	8085883a 	add	r2,r16,r2
   27cec:	1085883a 	add	r2,r2,r2
   27cf0:	1085883a 	add	r2,r2,r2
   27cf4:	9885883a 	add	r2,r19,r2
   27cf8:	11000517 	ldw	r4,20(r2)
   27cfc:	8020917a 	slli	r16,r16,5
   27d00:	00272ac0 	call	272ac <__hi0bits>
   27d04:	d8c00817 	ldw	r3,32(sp)
   27d08:	8085c83a 	sub	r2,r16,r2
   27d0c:	18800015 	stw	r2,0(r3)
   27d10:	9805883a 	mov	r2,r19
   27d14:	dfc00717 	ldw	ra,28(sp)
   27d18:	dd000617 	ldw	r20,24(sp)
   27d1c:	dcc00517 	ldw	r19,20(sp)
   27d20:	dc800417 	ldw	r18,16(sp)
   27d24:	dc400317 	ldw	r17,12(sp)
   27d28:	dc000217 	ldw	r16,8(sp)
   27d2c:	dec00804 	addi	sp,sp,32
   27d30:	f800283a 	ret
   27d34:	d809883a 	mov	r4,sp
   27d38:	00273140 	call	27314 <__lo0bits>
   27d3c:	d8c00017 	ldw	r3,0(sp)
   27d40:	04000044 	movi	r16,1
   27d44:	9c000415 	stw	r16,16(r19)
   27d48:	98c00515 	stw	r3,20(r19)
   27d4c:	10800804 	addi	r2,r2,32
   27d50:	883fe126 	beq	r17,zero,27cd8 <__alt_data_end+0xf4027cd8>
   27d54:	00c00d44 	movi	r3,53
   27d58:	8c7ef344 	addi	r17,r17,-1075
   27d5c:	88a3883a 	add	r17,r17,r2
   27d60:	1885c83a 	sub	r2,r3,r2
   27d64:	d8c00817 	ldw	r3,32(sp)
   27d68:	94400015 	stw	r17,0(r18)
   27d6c:	18800015 	stw	r2,0(r3)
   27d70:	003fe706 	br	27d10 <__alt_data_end+0xf4027d10>
   27d74:	01000804 	movi	r4,32
   27d78:	2089c83a 	sub	r4,r4,r2
   27d7c:	1908983a 	sll	r4,r3,r4
   27d80:	d9400117 	ldw	r5,4(sp)
   27d84:	1886d83a 	srl	r3,r3,r2
   27d88:	2148b03a 	or	r4,r4,r5
   27d8c:	99000515 	stw	r4,20(r19)
   27d90:	d8c00015 	stw	r3,0(sp)
   27d94:	003fca06 	br	27cc0 <__alt_data_end+0xf4027cc0>

00027d98 <__ratio>:
   27d98:	defff904 	addi	sp,sp,-28
   27d9c:	dc400315 	stw	r17,12(sp)
   27da0:	2823883a 	mov	r17,r5
   27da4:	d9400104 	addi	r5,sp,4
   27da8:	dfc00615 	stw	ra,24(sp)
   27dac:	dcc00515 	stw	r19,20(sp)
   27db0:	dc800415 	stw	r18,16(sp)
   27db4:	2027883a 	mov	r19,r4
   27db8:	dc000215 	stw	r16,8(sp)
   27dbc:	0027b400 	call	27b40 <__b2d>
   27dc0:	d80b883a 	mov	r5,sp
   27dc4:	8809883a 	mov	r4,r17
   27dc8:	1025883a 	mov	r18,r2
   27dcc:	1821883a 	mov	r16,r3
   27dd0:	0027b400 	call	27b40 <__b2d>
   27dd4:	8a000417 	ldw	r8,16(r17)
   27dd8:	99000417 	ldw	r4,16(r19)
   27ddc:	d9400117 	ldw	r5,4(sp)
   27de0:	2209c83a 	sub	r4,r4,r8
   27de4:	2010917a 	slli	r8,r4,5
   27de8:	d9000017 	ldw	r4,0(sp)
   27dec:	2909c83a 	sub	r4,r5,r4
   27df0:	4109883a 	add	r4,r8,r4
   27df4:	01000e0e 	bge	zero,r4,27e30 <__ratio+0x98>
   27df8:	2008953a 	slli	r4,r4,20
   27dfc:	2421883a 	add	r16,r4,r16
   27e00:	100d883a 	mov	r6,r2
   27e04:	180f883a 	mov	r7,r3
   27e08:	9009883a 	mov	r4,r18
   27e0c:	800b883a 	mov	r5,r16
   27e10:	002bc840 	call	2bc84 <__divdf3>
   27e14:	dfc00617 	ldw	ra,24(sp)
   27e18:	dcc00517 	ldw	r19,20(sp)
   27e1c:	dc800417 	ldw	r18,16(sp)
   27e20:	dc400317 	ldw	r17,12(sp)
   27e24:	dc000217 	ldw	r16,8(sp)
   27e28:	dec00704 	addi	sp,sp,28
   27e2c:	f800283a 	ret
   27e30:	2008953a 	slli	r4,r4,20
   27e34:	1907c83a 	sub	r3,r3,r4
   27e38:	003ff106 	br	27e00 <__alt_data_end+0xf4027e00>

00027e3c <_mprec_log10>:
   27e3c:	defffe04 	addi	sp,sp,-8
   27e40:	dc000015 	stw	r16,0(sp)
   27e44:	dfc00115 	stw	ra,4(sp)
   27e48:	008005c4 	movi	r2,23
   27e4c:	2021883a 	mov	r16,r4
   27e50:	11000d0e 	bge	r2,r4,27e88 <_mprec_log10+0x4c>
   27e54:	0005883a 	mov	r2,zero
   27e58:	00cffc34 	movhi	r3,16368
   27e5c:	843fffc4 	addi	r16,r16,-1
   27e60:	000d883a 	mov	r6,zero
   27e64:	01d00934 	movhi	r7,16420
   27e68:	1009883a 	mov	r4,r2
   27e6c:	180b883a 	mov	r5,r3
   27e70:	002c7c40 	call	2c7c4 <__muldf3>
   27e74:	803ff91e 	bne	r16,zero,27e5c <__alt_data_end+0xf4027e5c>
   27e78:	dfc00117 	ldw	ra,4(sp)
   27e7c:	dc000017 	ldw	r16,0(sp)
   27e80:	dec00204 	addi	sp,sp,8
   27e84:	f800283a 	ret
   27e88:	202090fa 	slli	r16,r4,3
   27e8c:	008000f4 	movhi	r2,3
   27e90:	1086a904 	addi	r2,r2,6820
   27e94:	1421883a 	add	r16,r2,r16
   27e98:	80800017 	ldw	r2,0(r16)
   27e9c:	80c00117 	ldw	r3,4(r16)
   27ea0:	dfc00117 	ldw	ra,4(sp)
   27ea4:	dc000017 	ldw	r16,0(sp)
   27ea8:	dec00204 	addi	sp,sp,8
   27eac:	f800283a 	ret

00027eb0 <__copybits>:
   27eb0:	297fffc4 	addi	r5,r5,-1
   27eb4:	280fd17a 	srai	r7,r5,5
   27eb8:	30c00417 	ldw	r3,16(r6)
   27ebc:	30800504 	addi	r2,r6,20
   27ec0:	39c00044 	addi	r7,r7,1
   27ec4:	18c7883a 	add	r3,r3,r3
   27ec8:	39cf883a 	add	r7,r7,r7
   27ecc:	18c7883a 	add	r3,r3,r3
   27ed0:	39cf883a 	add	r7,r7,r7
   27ed4:	10c7883a 	add	r3,r2,r3
   27ed8:	21cf883a 	add	r7,r4,r7
   27edc:	10c00d2e 	bgeu	r2,r3,27f14 <__copybits+0x64>
   27ee0:	200b883a 	mov	r5,r4
   27ee4:	12000017 	ldw	r8,0(r2)
   27ee8:	29400104 	addi	r5,r5,4
   27eec:	10800104 	addi	r2,r2,4
   27ef0:	2a3fff15 	stw	r8,-4(r5)
   27ef4:	10fffb36 	bltu	r2,r3,27ee4 <__alt_data_end+0xf4027ee4>
   27ef8:	1985c83a 	sub	r2,r3,r6
   27efc:	10bffac4 	addi	r2,r2,-21
   27f00:	1004d0ba 	srli	r2,r2,2
   27f04:	10800044 	addi	r2,r2,1
   27f08:	1085883a 	add	r2,r2,r2
   27f0c:	1085883a 	add	r2,r2,r2
   27f10:	2089883a 	add	r4,r4,r2
   27f14:	21c0032e 	bgeu	r4,r7,27f24 <__copybits+0x74>
   27f18:	20000015 	stw	zero,0(r4)
   27f1c:	21000104 	addi	r4,r4,4
   27f20:	21fffd36 	bltu	r4,r7,27f18 <__alt_data_end+0xf4027f18>
   27f24:	f800283a 	ret

00027f28 <__any_on>:
   27f28:	20c00417 	ldw	r3,16(r4)
   27f2c:	2805d17a 	srai	r2,r5,5
   27f30:	21000504 	addi	r4,r4,20
   27f34:	18800d0e 	bge	r3,r2,27f6c <__any_on+0x44>
   27f38:	18c7883a 	add	r3,r3,r3
   27f3c:	18c7883a 	add	r3,r3,r3
   27f40:	20c7883a 	add	r3,r4,r3
   27f44:	20c0192e 	bgeu	r4,r3,27fac <__any_on+0x84>
   27f48:	18bfff17 	ldw	r2,-4(r3)
   27f4c:	18ffff04 	addi	r3,r3,-4
   27f50:	1000041e 	bne	r2,zero,27f64 <__any_on+0x3c>
   27f54:	20c0142e 	bgeu	r4,r3,27fa8 <__any_on+0x80>
   27f58:	18ffff04 	addi	r3,r3,-4
   27f5c:	19400017 	ldw	r5,0(r3)
   27f60:	283ffc26 	beq	r5,zero,27f54 <__alt_data_end+0xf4027f54>
   27f64:	00800044 	movi	r2,1
   27f68:	f800283a 	ret
   27f6c:	10c00a0e 	bge	r2,r3,27f98 <__any_on+0x70>
   27f70:	1085883a 	add	r2,r2,r2
   27f74:	1085883a 	add	r2,r2,r2
   27f78:	294007cc 	andi	r5,r5,31
   27f7c:	2087883a 	add	r3,r4,r2
   27f80:	283ff026 	beq	r5,zero,27f44 <__alt_data_end+0xf4027f44>
   27f84:	19800017 	ldw	r6,0(r3)
   27f88:	3144d83a 	srl	r2,r6,r5
   27f8c:	114a983a 	sll	r5,r2,r5
   27f90:	317ff41e 	bne	r6,r5,27f64 <__alt_data_end+0xf4027f64>
   27f94:	003feb06 	br	27f44 <__alt_data_end+0xf4027f44>
   27f98:	1085883a 	add	r2,r2,r2
   27f9c:	1085883a 	add	r2,r2,r2
   27fa0:	2087883a 	add	r3,r4,r2
   27fa4:	003fe706 	br	27f44 <__alt_data_end+0xf4027f44>
   27fa8:	f800283a 	ret
   27fac:	0005883a 	mov	r2,zero
   27fb0:	f800283a 	ret

00027fb4 <_realloc_r>:
   27fb4:	defff604 	addi	sp,sp,-40
   27fb8:	dc800215 	stw	r18,8(sp)
   27fbc:	dfc00915 	stw	ra,36(sp)
   27fc0:	df000815 	stw	fp,32(sp)
   27fc4:	ddc00715 	stw	r23,28(sp)
   27fc8:	dd800615 	stw	r22,24(sp)
   27fcc:	dd400515 	stw	r21,20(sp)
   27fd0:	dd000415 	stw	r20,16(sp)
   27fd4:	dcc00315 	stw	r19,12(sp)
   27fd8:	dc400115 	stw	r17,4(sp)
   27fdc:	dc000015 	stw	r16,0(sp)
   27fe0:	3025883a 	mov	r18,r6
   27fe4:	2800b726 	beq	r5,zero,282c4 <_realloc_r+0x310>
   27fe8:	282b883a 	mov	r21,r5
   27fec:	2029883a 	mov	r20,r4
   27ff0:	002df580 	call	2df58 <__malloc_lock>
   27ff4:	a8bfff17 	ldw	r2,-4(r21)
   27ff8:	043fff04 	movi	r16,-4
   27ffc:	90c002c4 	addi	r3,r18,11
   28000:	01000584 	movi	r4,22
   28004:	acfffe04 	addi	r19,r21,-8
   28008:	1420703a 	and	r16,r2,r16
   2800c:	20c0332e 	bgeu	r4,r3,280dc <_realloc_r+0x128>
   28010:	047ffe04 	movi	r17,-8
   28014:	1c62703a 	and	r17,r3,r17
   28018:	8807883a 	mov	r3,r17
   2801c:	88005816 	blt	r17,zero,28180 <_realloc_r+0x1cc>
   28020:	8c805736 	bltu	r17,r18,28180 <_realloc_r+0x1cc>
   28024:	80c0300e 	bge	r16,r3,280e8 <_realloc_r+0x134>
   28028:	070000f4 	movhi	fp,3
   2802c:	e7082d04 	addi	fp,fp,8372
   28030:	e1c00217 	ldw	r7,8(fp)
   28034:	9c09883a 	add	r4,r19,r16
   28038:	22000117 	ldw	r8,4(r4)
   2803c:	21c06326 	beq	r4,r7,281cc <_realloc_r+0x218>
   28040:	017fff84 	movi	r5,-2
   28044:	414a703a 	and	r5,r8,r5
   28048:	214b883a 	add	r5,r4,r5
   2804c:	29800117 	ldw	r6,4(r5)
   28050:	3180004c 	andi	r6,r6,1
   28054:	30003f26 	beq	r6,zero,28154 <_realloc_r+0x1a0>
   28058:	1080004c 	andi	r2,r2,1
   2805c:	10008326 	beq	r2,zero,2826c <_realloc_r+0x2b8>
   28060:	900b883a 	mov	r5,r18
   28064:	a009883a 	mov	r4,r20
   28068:	00262fc0 	call	262fc <_malloc_r>
   2806c:	1025883a 	mov	r18,r2
   28070:	10011e26 	beq	r2,zero,284ec <_realloc_r+0x538>
   28074:	a93fff17 	ldw	r4,-4(r21)
   28078:	10fffe04 	addi	r3,r2,-8
   2807c:	00bfff84 	movi	r2,-2
   28080:	2084703a 	and	r2,r4,r2
   28084:	9885883a 	add	r2,r19,r2
   28088:	1880ee26 	beq	r3,r2,28444 <_realloc_r+0x490>
   2808c:	81bfff04 	addi	r6,r16,-4
   28090:	00800904 	movi	r2,36
   28094:	1180b836 	bltu	r2,r6,28378 <_realloc_r+0x3c4>
   28098:	00c004c4 	movi	r3,19
   2809c:	19809636 	bltu	r3,r6,282f8 <_realloc_r+0x344>
   280a0:	9005883a 	mov	r2,r18
   280a4:	a807883a 	mov	r3,r21
   280a8:	19000017 	ldw	r4,0(r3)
   280ac:	11000015 	stw	r4,0(r2)
   280b0:	19000117 	ldw	r4,4(r3)
   280b4:	11000115 	stw	r4,4(r2)
   280b8:	18c00217 	ldw	r3,8(r3)
   280bc:	10c00215 	stw	r3,8(r2)
   280c0:	a80b883a 	mov	r5,r21
   280c4:	a009883a 	mov	r4,r20
   280c8:	00257100 	call	25710 <_free_r>
   280cc:	a009883a 	mov	r4,r20
   280d0:	002df7c0 	call	2df7c <__malloc_unlock>
   280d4:	9005883a 	mov	r2,r18
   280d8:	00001206 	br	28124 <_realloc_r+0x170>
   280dc:	00c00404 	movi	r3,16
   280e0:	1823883a 	mov	r17,r3
   280e4:	003fce06 	br	28020 <__alt_data_end+0xf4028020>
   280e8:	a825883a 	mov	r18,r21
   280ec:	8445c83a 	sub	r2,r16,r17
   280f0:	00c003c4 	movi	r3,15
   280f4:	18802636 	bltu	r3,r2,28190 <_realloc_r+0x1dc>
   280f8:	99800117 	ldw	r6,4(r19)
   280fc:	9c07883a 	add	r3,r19,r16
   28100:	3180004c 	andi	r6,r6,1
   28104:	3420b03a 	or	r16,r6,r16
   28108:	9c000115 	stw	r16,4(r19)
   2810c:	18800117 	ldw	r2,4(r3)
   28110:	10800054 	ori	r2,r2,1
   28114:	18800115 	stw	r2,4(r3)
   28118:	a009883a 	mov	r4,r20
   2811c:	002df7c0 	call	2df7c <__malloc_unlock>
   28120:	9005883a 	mov	r2,r18
   28124:	dfc00917 	ldw	ra,36(sp)
   28128:	df000817 	ldw	fp,32(sp)
   2812c:	ddc00717 	ldw	r23,28(sp)
   28130:	dd800617 	ldw	r22,24(sp)
   28134:	dd400517 	ldw	r21,20(sp)
   28138:	dd000417 	ldw	r20,16(sp)
   2813c:	dcc00317 	ldw	r19,12(sp)
   28140:	dc800217 	ldw	r18,8(sp)
   28144:	dc400117 	ldw	r17,4(sp)
   28148:	dc000017 	ldw	r16,0(sp)
   2814c:	dec00a04 	addi	sp,sp,40
   28150:	f800283a 	ret
   28154:	017fff04 	movi	r5,-4
   28158:	414a703a 	and	r5,r8,r5
   2815c:	814d883a 	add	r6,r16,r5
   28160:	30c01f16 	blt	r6,r3,281e0 <_realloc_r+0x22c>
   28164:	20800317 	ldw	r2,12(r4)
   28168:	20c00217 	ldw	r3,8(r4)
   2816c:	a825883a 	mov	r18,r21
   28170:	3021883a 	mov	r16,r6
   28174:	18800315 	stw	r2,12(r3)
   28178:	10c00215 	stw	r3,8(r2)
   2817c:	003fdb06 	br	280ec <__alt_data_end+0xf40280ec>
   28180:	00800304 	movi	r2,12
   28184:	a0800015 	stw	r2,0(r20)
   28188:	0005883a 	mov	r2,zero
   2818c:	003fe506 	br	28124 <__alt_data_end+0xf4028124>
   28190:	98c00117 	ldw	r3,4(r19)
   28194:	9c4b883a 	add	r5,r19,r17
   28198:	11000054 	ori	r4,r2,1
   2819c:	18c0004c 	andi	r3,r3,1
   281a0:	1c62b03a 	or	r17,r3,r17
   281a4:	9c400115 	stw	r17,4(r19)
   281a8:	29000115 	stw	r4,4(r5)
   281ac:	2885883a 	add	r2,r5,r2
   281b0:	10c00117 	ldw	r3,4(r2)
   281b4:	29400204 	addi	r5,r5,8
   281b8:	a009883a 	mov	r4,r20
   281bc:	18c00054 	ori	r3,r3,1
   281c0:	10c00115 	stw	r3,4(r2)
   281c4:	00257100 	call	25710 <_free_r>
   281c8:	003fd306 	br	28118 <__alt_data_end+0xf4028118>
   281cc:	017fff04 	movi	r5,-4
   281d0:	414a703a 	and	r5,r8,r5
   281d4:	89800404 	addi	r6,r17,16
   281d8:	8151883a 	add	r8,r16,r5
   281dc:	4180590e 	bge	r8,r6,28344 <_realloc_r+0x390>
   281e0:	1080004c 	andi	r2,r2,1
   281e4:	103f9e1e 	bne	r2,zero,28060 <__alt_data_end+0xf4028060>
   281e8:	adbffe17 	ldw	r22,-8(r21)
   281ec:	00bfff04 	movi	r2,-4
   281f0:	9dadc83a 	sub	r22,r19,r22
   281f4:	b1800117 	ldw	r6,4(r22)
   281f8:	3084703a 	and	r2,r6,r2
   281fc:	20002026 	beq	r4,zero,28280 <_realloc_r+0x2cc>
   28200:	80af883a 	add	r23,r16,r2
   28204:	b96f883a 	add	r23,r23,r5
   28208:	21c05f26 	beq	r4,r7,28388 <_realloc_r+0x3d4>
   2820c:	b8c01c16 	blt	r23,r3,28280 <_realloc_r+0x2cc>
   28210:	20800317 	ldw	r2,12(r4)
   28214:	20c00217 	ldw	r3,8(r4)
   28218:	81bfff04 	addi	r6,r16,-4
   2821c:	01000904 	movi	r4,36
   28220:	18800315 	stw	r2,12(r3)
   28224:	10c00215 	stw	r3,8(r2)
   28228:	b0c00217 	ldw	r3,8(r22)
   2822c:	b0800317 	ldw	r2,12(r22)
   28230:	b4800204 	addi	r18,r22,8
   28234:	18800315 	stw	r2,12(r3)
   28238:	10c00215 	stw	r3,8(r2)
   2823c:	21801b36 	bltu	r4,r6,282ac <_realloc_r+0x2f8>
   28240:	008004c4 	movi	r2,19
   28244:	1180352e 	bgeu	r2,r6,2831c <_realloc_r+0x368>
   28248:	a8800017 	ldw	r2,0(r21)
   2824c:	b0800215 	stw	r2,8(r22)
   28250:	a8800117 	ldw	r2,4(r21)
   28254:	b0800315 	stw	r2,12(r22)
   28258:	008006c4 	movi	r2,27
   2825c:	11807f36 	bltu	r2,r6,2845c <_realloc_r+0x4a8>
   28260:	b0800404 	addi	r2,r22,16
   28264:	ad400204 	addi	r21,r21,8
   28268:	00002d06 	br	28320 <_realloc_r+0x36c>
   2826c:	adbffe17 	ldw	r22,-8(r21)
   28270:	00bfff04 	movi	r2,-4
   28274:	9dadc83a 	sub	r22,r19,r22
   28278:	b1000117 	ldw	r4,4(r22)
   2827c:	2084703a 	and	r2,r4,r2
   28280:	b03f7726 	beq	r22,zero,28060 <__alt_data_end+0xf4028060>
   28284:	80af883a 	add	r23,r16,r2
   28288:	b8ff7516 	blt	r23,r3,28060 <__alt_data_end+0xf4028060>
   2828c:	b0800317 	ldw	r2,12(r22)
   28290:	b0c00217 	ldw	r3,8(r22)
   28294:	81bfff04 	addi	r6,r16,-4
   28298:	01000904 	movi	r4,36
   2829c:	18800315 	stw	r2,12(r3)
   282a0:	10c00215 	stw	r3,8(r2)
   282a4:	b4800204 	addi	r18,r22,8
   282a8:	21bfe52e 	bgeu	r4,r6,28240 <__alt_data_end+0xf4028240>
   282ac:	a80b883a 	mov	r5,r21
   282b0:	9009883a 	mov	r4,r18
   282b4:	0026d340 	call	26d34 <memmove>
   282b8:	b821883a 	mov	r16,r23
   282bc:	b027883a 	mov	r19,r22
   282c0:	003f8a06 	br	280ec <__alt_data_end+0xf40280ec>
   282c4:	300b883a 	mov	r5,r6
   282c8:	dfc00917 	ldw	ra,36(sp)
   282cc:	df000817 	ldw	fp,32(sp)
   282d0:	ddc00717 	ldw	r23,28(sp)
   282d4:	dd800617 	ldw	r22,24(sp)
   282d8:	dd400517 	ldw	r21,20(sp)
   282dc:	dd000417 	ldw	r20,16(sp)
   282e0:	dcc00317 	ldw	r19,12(sp)
   282e4:	dc800217 	ldw	r18,8(sp)
   282e8:	dc400117 	ldw	r17,4(sp)
   282ec:	dc000017 	ldw	r16,0(sp)
   282f0:	dec00a04 	addi	sp,sp,40
   282f4:	00262fc1 	jmpi	262fc <_malloc_r>
   282f8:	a8c00017 	ldw	r3,0(r21)
   282fc:	90c00015 	stw	r3,0(r18)
   28300:	a8c00117 	ldw	r3,4(r21)
   28304:	90c00115 	stw	r3,4(r18)
   28308:	00c006c4 	movi	r3,27
   2830c:	19804536 	bltu	r3,r6,28424 <_realloc_r+0x470>
   28310:	90800204 	addi	r2,r18,8
   28314:	a8c00204 	addi	r3,r21,8
   28318:	003f6306 	br	280a8 <__alt_data_end+0xf40280a8>
   2831c:	9005883a 	mov	r2,r18
   28320:	a8c00017 	ldw	r3,0(r21)
   28324:	b821883a 	mov	r16,r23
   28328:	b027883a 	mov	r19,r22
   2832c:	10c00015 	stw	r3,0(r2)
   28330:	a8c00117 	ldw	r3,4(r21)
   28334:	10c00115 	stw	r3,4(r2)
   28338:	a8c00217 	ldw	r3,8(r21)
   2833c:	10c00215 	stw	r3,8(r2)
   28340:	003f6a06 	br	280ec <__alt_data_end+0xf40280ec>
   28344:	9c67883a 	add	r19,r19,r17
   28348:	4445c83a 	sub	r2,r8,r17
   2834c:	e4c00215 	stw	r19,8(fp)
   28350:	10800054 	ori	r2,r2,1
   28354:	98800115 	stw	r2,4(r19)
   28358:	a8bfff17 	ldw	r2,-4(r21)
   2835c:	a009883a 	mov	r4,r20
   28360:	1080004c 	andi	r2,r2,1
   28364:	1462b03a 	or	r17,r2,r17
   28368:	ac7fff15 	stw	r17,-4(r21)
   2836c:	002df7c0 	call	2df7c <__malloc_unlock>
   28370:	a805883a 	mov	r2,r21
   28374:	003f6b06 	br	28124 <__alt_data_end+0xf4028124>
   28378:	a80b883a 	mov	r5,r21
   2837c:	9009883a 	mov	r4,r18
   28380:	0026d340 	call	26d34 <memmove>
   28384:	003f4e06 	br	280c0 <__alt_data_end+0xf40280c0>
   28388:	89000404 	addi	r4,r17,16
   2838c:	b93fbc16 	blt	r23,r4,28280 <__alt_data_end+0xf4028280>
   28390:	b0800317 	ldw	r2,12(r22)
   28394:	b0c00217 	ldw	r3,8(r22)
   28398:	81bfff04 	addi	r6,r16,-4
   2839c:	01000904 	movi	r4,36
   283a0:	18800315 	stw	r2,12(r3)
   283a4:	10c00215 	stw	r3,8(r2)
   283a8:	b4800204 	addi	r18,r22,8
   283ac:	21804336 	bltu	r4,r6,284bc <_realloc_r+0x508>
   283b0:	008004c4 	movi	r2,19
   283b4:	11803f2e 	bgeu	r2,r6,284b4 <_realloc_r+0x500>
   283b8:	a8800017 	ldw	r2,0(r21)
   283bc:	b0800215 	stw	r2,8(r22)
   283c0:	a8800117 	ldw	r2,4(r21)
   283c4:	b0800315 	stw	r2,12(r22)
   283c8:	008006c4 	movi	r2,27
   283cc:	11803f36 	bltu	r2,r6,284cc <_realloc_r+0x518>
   283d0:	b0800404 	addi	r2,r22,16
   283d4:	ad400204 	addi	r21,r21,8
   283d8:	a8c00017 	ldw	r3,0(r21)
   283dc:	10c00015 	stw	r3,0(r2)
   283e0:	a8c00117 	ldw	r3,4(r21)
   283e4:	10c00115 	stw	r3,4(r2)
   283e8:	a8c00217 	ldw	r3,8(r21)
   283ec:	10c00215 	stw	r3,8(r2)
   283f0:	b447883a 	add	r3,r22,r17
   283f4:	bc45c83a 	sub	r2,r23,r17
   283f8:	e0c00215 	stw	r3,8(fp)
   283fc:	10800054 	ori	r2,r2,1
   28400:	18800115 	stw	r2,4(r3)
   28404:	b0800117 	ldw	r2,4(r22)
   28408:	a009883a 	mov	r4,r20
   2840c:	1080004c 	andi	r2,r2,1
   28410:	1462b03a 	or	r17,r2,r17
   28414:	b4400115 	stw	r17,4(r22)
   28418:	002df7c0 	call	2df7c <__malloc_unlock>
   2841c:	9005883a 	mov	r2,r18
   28420:	003f4006 	br	28124 <__alt_data_end+0xf4028124>
   28424:	a8c00217 	ldw	r3,8(r21)
   28428:	90c00215 	stw	r3,8(r18)
   2842c:	a8c00317 	ldw	r3,12(r21)
   28430:	90c00315 	stw	r3,12(r18)
   28434:	30801126 	beq	r6,r2,2847c <_realloc_r+0x4c8>
   28438:	90800404 	addi	r2,r18,16
   2843c:	a8c00404 	addi	r3,r21,16
   28440:	003f1906 	br	280a8 <__alt_data_end+0xf40280a8>
   28444:	90ffff17 	ldw	r3,-4(r18)
   28448:	00bfff04 	movi	r2,-4
   2844c:	a825883a 	mov	r18,r21
   28450:	1884703a 	and	r2,r3,r2
   28454:	80a1883a 	add	r16,r16,r2
   28458:	003f2406 	br	280ec <__alt_data_end+0xf40280ec>
   2845c:	a8800217 	ldw	r2,8(r21)
   28460:	b0800415 	stw	r2,16(r22)
   28464:	a8800317 	ldw	r2,12(r21)
   28468:	b0800515 	stw	r2,20(r22)
   2846c:	31000a26 	beq	r6,r4,28498 <_realloc_r+0x4e4>
   28470:	b0800604 	addi	r2,r22,24
   28474:	ad400404 	addi	r21,r21,16
   28478:	003fa906 	br	28320 <__alt_data_end+0xf4028320>
   2847c:	a9000417 	ldw	r4,16(r21)
   28480:	90800604 	addi	r2,r18,24
   28484:	a8c00604 	addi	r3,r21,24
   28488:	91000415 	stw	r4,16(r18)
   2848c:	a9000517 	ldw	r4,20(r21)
   28490:	91000515 	stw	r4,20(r18)
   28494:	003f0406 	br	280a8 <__alt_data_end+0xf40280a8>
   28498:	a8c00417 	ldw	r3,16(r21)
   2849c:	ad400604 	addi	r21,r21,24
   284a0:	b0800804 	addi	r2,r22,32
   284a4:	b0c00615 	stw	r3,24(r22)
   284a8:	a8ffff17 	ldw	r3,-4(r21)
   284ac:	b0c00715 	stw	r3,28(r22)
   284b0:	003f9b06 	br	28320 <__alt_data_end+0xf4028320>
   284b4:	9005883a 	mov	r2,r18
   284b8:	003fc706 	br	283d8 <__alt_data_end+0xf40283d8>
   284bc:	a80b883a 	mov	r5,r21
   284c0:	9009883a 	mov	r4,r18
   284c4:	0026d340 	call	26d34 <memmove>
   284c8:	003fc906 	br	283f0 <__alt_data_end+0xf40283f0>
   284cc:	a8800217 	ldw	r2,8(r21)
   284d0:	b0800415 	stw	r2,16(r22)
   284d4:	a8800317 	ldw	r2,12(r21)
   284d8:	b0800515 	stw	r2,20(r22)
   284dc:	31000726 	beq	r6,r4,284fc <_realloc_r+0x548>
   284e0:	b0800604 	addi	r2,r22,24
   284e4:	ad400404 	addi	r21,r21,16
   284e8:	003fbb06 	br	283d8 <__alt_data_end+0xf40283d8>
   284ec:	a009883a 	mov	r4,r20
   284f0:	002df7c0 	call	2df7c <__malloc_unlock>
   284f4:	0005883a 	mov	r2,zero
   284f8:	003f0a06 	br	28124 <__alt_data_end+0xf4028124>
   284fc:	a8c00417 	ldw	r3,16(r21)
   28500:	ad400604 	addi	r21,r21,24
   28504:	b0800804 	addi	r2,r22,32
   28508:	b0c00615 	stw	r3,24(r22)
   2850c:	a8ffff17 	ldw	r3,-4(r21)
   28510:	b0c00715 	stw	r3,28(r22)
   28514:	003fb006 	br	283d8 <__alt_data_end+0xf40283d8>

00028518 <__fpclassifyd>:
   28518:	00a00034 	movhi	r2,32768
   2851c:	10bfffc4 	addi	r2,r2,-1
   28520:	2884703a 	and	r2,r5,r2
   28524:	10000726 	beq	r2,zero,28544 <__fpclassifyd+0x2c>
   28528:	00fffc34 	movhi	r3,65520
   2852c:	019ff834 	movhi	r6,32736
   28530:	28c7883a 	add	r3,r5,r3
   28534:	31bfffc4 	addi	r6,r6,-1
   28538:	30c00536 	bltu	r6,r3,28550 <__fpclassifyd+0x38>
   2853c:	00800104 	movi	r2,4
   28540:	f800283a 	ret
   28544:	2000021e 	bne	r4,zero,28550 <__fpclassifyd+0x38>
   28548:	00800084 	movi	r2,2
   2854c:	f800283a 	ret
   28550:	00dffc34 	movhi	r3,32752
   28554:	019ff834 	movhi	r6,32736
   28558:	28cb883a 	add	r5,r5,r3
   2855c:	31bfffc4 	addi	r6,r6,-1
   28560:	317ff62e 	bgeu	r6,r5,2853c <__alt_data_end+0xf402853c>
   28564:	01400434 	movhi	r5,16
   28568:	297fffc4 	addi	r5,r5,-1
   2856c:	28800236 	bltu	r5,r2,28578 <__fpclassifyd+0x60>
   28570:	008000c4 	movi	r2,3
   28574:	f800283a 	ret
   28578:	10c00226 	beq	r2,r3,28584 <__fpclassifyd+0x6c>
   2857c:	0005883a 	mov	r2,zero
   28580:	f800283a 	ret
   28584:	2005003a 	cmpeq	r2,r4,zero
   28588:	f800283a 	ret

0002858c <_sbrk_r>:
   2858c:	defffd04 	addi	sp,sp,-12
   28590:	dc000015 	stw	r16,0(sp)
   28594:	040000f4 	movhi	r16,3
   28598:	dc400115 	stw	r17,4(sp)
   2859c:	84153f04 	addi	r16,r16,21756
   285a0:	2023883a 	mov	r17,r4
   285a4:	2809883a 	mov	r4,r5
   285a8:	dfc00215 	stw	ra,8(sp)
   285ac:	80000015 	stw	zero,0(r16)
   285b0:	002e13c0 	call	2e13c <sbrk>
   285b4:	00ffffc4 	movi	r3,-1
   285b8:	10c00526 	beq	r2,r3,285d0 <_sbrk_r+0x44>
   285bc:	dfc00217 	ldw	ra,8(sp)
   285c0:	dc400117 	ldw	r17,4(sp)
   285c4:	dc000017 	ldw	r16,0(sp)
   285c8:	dec00304 	addi	sp,sp,12
   285cc:	f800283a 	ret
   285d0:	80c00017 	ldw	r3,0(r16)
   285d4:	183ff926 	beq	r3,zero,285bc <__alt_data_end+0xf40285bc>
   285d8:	88c00015 	stw	r3,0(r17)
   285dc:	003ff706 	br	285bc <__alt_data_end+0xf40285bc>

000285e0 <__sread>:
   285e0:	defffe04 	addi	sp,sp,-8
   285e4:	dc000015 	stw	r16,0(sp)
   285e8:	2821883a 	mov	r16,r5
   285ec:	2940038f 	ldh	r5,14(r5)
   285f0:	dfc00115 	stw	ra,4(sp)
   285f4:	002a3d40 	call	2a3d4 <_read_r>
   285f8:	10000716 	blt	r2,zero,28618 <__sread+0x38>
   285fc:	80c01417 	ldw	r3,80(r16)
   28600:	1887883a 	add	r3,r3,r2
   28604:	80c01415 	stw	r3,80(r16)
   28608:	dfc00117 	ldw	ra,4(sp)
   2860c:	dc000017 	ldw	r16,0(sp)
   28610:	dec00204 	addi	sp,sp,8
   28614:	f800283a 	ret
   28618:	80c0030b 	ldhu	r3,12(r16)
   2861c:	18fbffcc 	andi	r3,r3,61439
   28620:	80c0030d 	sth	r3,12(r16)
   28624:	dfc00117 	ldw	ra,4(sp)
   28628:	dc000017 	ldw	r16,0(sp)
   2862c:	dec00204 	addi	sp,sp,8
   28630:	f800283a 	ret

00028634 <__seofread>:
   28634:	0005883a 	mov	r2,zero
   28638:	f800283a 	ret

0002863c <__swrite>:
   2863c:	2880030b 	ldhu	r2,12(r5)
   28640:	defffb04 	addi	sp,sp,-20
   28644:	dcc00315 	stw	r19,12(sp)
   28648:	dc800215 	stw	r18,8(sp)
   2864c:	dc400115 	stw	r17,4(sp)
   28650:	dc000015 	stw	r16,0(sp)
   28654:	dfc00415 	stw	ra,16(sp)
   28658:	10c0400c 	andi	r3,r2,256
   2865c:	2821883a 	mov	r16,r5
   28660:	2023883a 	mov	r17,r4
   28664:	3025883a 	mov	r18,r6
   28668:	3827883a 	mov	r19,r7
   2866c:	18000526 	beq	r3,zero,28684 <__swrite+0x48>
   28670:	2940038f 	ldh	r5,14(r5)
   28674:	01c00084 	movi	r7,2
   28678:	000d883a 	mov	r6,zero
   2867c:	002a3740 	call	2a374 <_lseek_r>
   28680:	8080030b 	ldhu	r2,12(r16)
   28684:	8140038f 	ldh	r5,14(r16)
   28688:	10bbffcc 	andi	r2,r2,61439
   2868c:	980f883a 	mov	r7,r19
   28690:	900d883a 	mov	r6,r18
   28694:	8809883a 	mov	r4,r17
   28698:	8080030d 	sth	r2,12(r16)
   2869c:	dfc00417 	ldw	ra,16(sp)
   286a0:	dcc00317 	ldw	r19,12(sp)
   286a4:	dc800217 	ldw	r18,8(sp)
   286a8:	dc400117 	ldw	r17,4(sp)
   286ac:	dc000017 	ldw	r16,0(sp)
   286b0:	dec00504 	addi	sp,sp,20
   286b4:	0029e401 	jmpi	29e40 <_write_r>

000286b8 <__sseek>:
   286b8:	defffe04 	addi	sp,sp,-8
   286bc:	dc000015 	stw	r16,0(sp)
   286c0:	2821883a 	mov	r16,r5
   286c4:	2940038f 	ldh	r5,14(r5)
   286c8:	dfc00115 	stw	ra,4(sp)
   286cc:	002a3740 	call	2a374 <_lseek_r>
   286d0:	00ffffc4 	movi	r3,-1
   286d4:	10c00826 	beq	r2,r3,286f8 <__sseek+0x40>
   286d8:	80c0030b 	ldhu	r3,12(r16)
   286dc:	80801415 	stw	r2,80(r16)
   286e0:	18c40014 	ori	r3,r3,4096
   286e4:	80c0030d 	sth	r3,12(r16)
   286e8:	dfc00117 	ldw	ra,4(sp)
   286ec:	dc000017 	ldw	r16,0(sp)
   286f0:	dec00204 	addi	sp,sp,8
   286f4:	f800283a 	ret
   286f8:	80c0030b 	ldhu	r3,12(r16)
   286fc:	18fbffcc 	andi	r3,r3,61439
   28700:	80c0030d 	sth	r3,12(r16)
   28704:	dfc00117 	ldw	ra,4(sp)
   28708:	dc000017 	ldw	r16,0(sp)
   2870c:	dec00204 	addi	sp,sp,8
   28710:	f800283a 	ret

00028714 <__sclose>:
   28714:	2940038f 	ldh	r5,14(r5)
   28718:	0029ea01 	jmpi	29ea0 <_close_r>

0002871c <strcmp>:
   2871c:	2144b03a 	or	r2,r4,r5
   28720:	108000cc 	andi	r2,r2,3
   28724:	1000171e 	bne	r2,zero,28784 <strcmp+0x68>
   28728:	20800017 	ldw	r2,0(r4)
   2872c:	28c00017 	ldw	r3,0(r5)
   28730:	10c0141e 	bne	r2,r3,28784 <strcmp+0x68>
   28734:	027fbff4 	movhi	r9,65279
   28738:	4a7fbfc4 	addi	r9,r9,-257
   2873c:	0086303a 	nor	r3,zero,r2
   28740:	02202074 	movhi	r8,32897
   28744:	1245883a 	add	r2,r2,r9
   28748:	42202004 	addi	r8,r8,-32640
   2874c:	10c4703a 	and	r2,r2,r3
   28750:	1204703a 	and	r2,r2,r8
   28754:	10000226 	beq	r2,zero,28760 <strcmp+0x44>
   28758:	00002306 	br	287e8 <strcmp+0xcc>
   2875c:	1000221e 	bne	r2,zero,287e8 <strcmp+0xcc>
   28760:	21000104 	addi	r4,r4,4
   28764:	20c00017 	ldw	r3,0(r4)
   28768:	29400104 	addi	r5,r5,4
   2876c:	29800017 	ldw	r6,0(r5)
   28770:	1a4f883a 	add	r7,r3,r9
   28774:	00c4303a 	nor	r2,zero,r3
   28778:	3884703a 	and	r2,r7,r2
   2877c:	1204703a 	and	r2,r2,r8
   28780:	19bff626 	beq	r3,r6,2875c <__alt_data_end+0xf402875c>
   28784:	20800003 	ldbu	r2,0(r4)
   28788:	10c03fcc 	andi	r3,r2,255
   2878c:	18c0201c 	xori	r3,r3,128
   28790:	18ffe004 	addi	r3,r3,-128
   28794:	18000c26 	beq	r3,zero,287c8 <strcmp+0xac>
   28798:	29800007 	ldb	r6,0(r5)
   2879c:	19800326 	beq	r3,r6,287ac <strcmp+0x90>
   287a0:	00001306 	br	287f0 <strcmp+0xd4>
   287a4:	29800007 	ldb	r6,0(r5)
   287a8:	11800b1e 	bne	r2,r6,287d8 <strcmp+0xbc>
   287ac:	21000044 	addi	r4,r4,1
   287b0:	20c00003 	ldbu	r3,0(r4)
   287b4:	29400044 	addi	r5,r5,1
   287b8:	18803fcc 	andi	r2,r3,255
   287bc:	1080201c 	xori	r2,r2,128
   287c0:	10bfe004 	addi	r2,r2,-128
   287c4:	103ff71e 	bne	r2,zero,287a4 <__alt_data_end+0xf40287a4>
   287c8:	0007883a 	mov	r3,zero
   287cc:	28800003 	ldbu	r2,0(r5)
   287d0:	1885c83a 	sub	r2,r3,r2
   287d4:	f800283a 	ret
   287d8:	28800003 	ldbu	r2,0(r5)
   287dc:	18c03fcc 	andi	r3,r3,255
   287e0:	1885c83a 	sub	r2,r3,r2
   287e4:	f800283a 	ret
   287e8:	0005883a 	mov	r2,zero
   287ec:	f800283a 	ret
   287f0:	10c03fcc 	andi	r3,r2,255
   287f4:	003ff506 	br	287cc <__alt_data_end+0xf40287cc>

000287f8 <__sprint_r.part.0>:
   287f8:	28801917 	ldw	r2,100(r5)
   287fc:	defff604 	addi	sp,sp,-40
   28800:	dd400515 	stw	r21,20(sp)
   28804:	dfc00915 	stw	ra,36(sp)
   28808:	df000815 	stw	fp,32(sp)
   2880c:	ddc00715 	stw	r23,28(sp)
   28810:	dd800615 	stw	r22,24(sp)
   28814:	dd000415 	stw	r20,16(sp)
   28818:	dcc00315 	stw	r19,12(sp)
   2881c:	dc800215 	stw	r18,8(sp)
   28820:	dc400115 	stw	r17,4(sp)
   28824:	dc000015 	stw	r16,0(sp)
   28828:	1088000c 	andi	r2,r2,8192
   2882c:	302b883a 	mov	r21,r6
   28830:	10002e26 	beq	r2,zero,288ec <__sprint_r.part.0+0xf4>
   28834:	30800217 	ldw	r2,8(r6)
   28838:	35800017 	ldw	r22,0(r6)
   2883c:	10002926 	beq	r2,zero,288e4 <__sprint_r.part.0+0xec>
   28840:	2827883a 	mov	r19,r5
   28844:	2029883a 	mov	r20,r4
   28848:	b5c00104 	addi	r23,r22,4
   2884c:	04bfffc4 	movi	r18,-1
   28850:	bc400017 	ldw	r17,0(r23)
   28854:	b4000017 	ldw	r16,0(r22)
   28858:	0039883a 	mov	fp,zero
   2885c:	8822d0ba 	srli	r17,r17,2
   28860:	8800031e 	bne	r17,zero,28870 <__sprint_r.part.0+0x78>
   28864:	00001806 	br	288c8 <__sprint_r.part.0+0xd0>
   28868:	84000104 	addi	r16,r16,4
   2886c:	8f001526 	beq	r17,fp,288c4 <__sprint_r.part.0+0xcc>
   28870:	81400017 	ldw	r5,0(r16)
   28874:	980d883a 	mov	r6,r19
   28878:	a009883a 	mov	r4,r20
   2887c:	002a2200 	call	2a220 <_fputwc_r>
   28880:	e7000044 	addi	fp,fp,1
   28884:	14bff81e 	bne	r2,r18,28868 <__alt_data_end+0xf4028868>
   28888:	9005883a 	mov	r2,r18
   2888c:	a8000215 	stw	zero,8(r21)
   28890:	a8000115 	stw	zero,4(r21)
   28894:	dfc00917 	ldw	ra,36(sp)
   28898:	df000817 	ldw	fp,32(sp)
   2889c:	ddc00717 	ldw	r23,28(sp)
   288a0:	dd800617 	ldw	r22,24(sp)
   288a4:	dd400517 	ldw	r21,20(sp)
   288a8:	dd000417 	ldw	r20,16(sp)
   288ac:	dcc00317 	ldw	r19,12(sp)
   288b0:	dc800217 	ldw	r18,8(sp)
   288b4:	dc400117 	ldw	r17,4(sp)
   288b8:	dc000017 	ldw	r16,0(sp)
   288bc:	dec00a04 	addi	sp,sp,40
   288c0:	f800283a 	ret
   288c4:	a8800217 	ldw	r2,8(r21)
   288c8:	8c63883a 	add	r17,r17,r17
   288cc:	8c63883a 	add	r17,r17,r17
   288d0:	1445c83a 	sub	r2,r2,r17
   288d4:	a8800215 	stw	r2,8(r21)
   288d8:	b5800204 	addi	r22,r22,8
   288dc:	bdc00204 	addi	r23,r23,8
   288e0:	103fdb1e 	bne	r2,zero,28850 <__alt_data_end+0xf4028850>
   288e4:	0005883a 	mov	r2,zero
   288e8:	003fe806 	br	2888c <__alt_data_end+0xf402888c>
   288ec:	0025a200 	call	25a20 <__sfvwrite_r>
   288f0:	003fe606 	br	2888c <__alt_data_end+0xf402888c>

000288f4 <__sprint_r>:
   288f4:	30c00217 	ldw	r3,8(r6)
   288f8:	18000126 	beq	r3,zero,28900 <__sprint_r+0xc>
   288fc:	00287f81 	jmpi	287f8 <__sprint_r.part.0>
   28900:	30000115 	stw	zero,4(r6)
   28904:	0005883a 	mov	r2,zero
   28908:	f800283a 	ret

0002890c <___vfiprintf_internal_r>:
   2890c:	deffc904 	addi	sp,sp,-220
   28910:	df003515 	stw	fp,212(sp)
   28914:	dd003115 	stw	r20,196(sp)
   28918:	dfc03615 	stw	ra,216(sp)
   2891c:	ddc03415 	stw	r23,208(sp)
   28920:	dd803315 	stw	r22,204(sp)
   28924:	dd403215 	stw	r21,200(sp)
   28928:	dcc03015 	stw	r19,192(sp)
   2892c:	dc802f15 	stw	r18,188(sp)
   28930:	dc402e15 	stw	r17,184(sp)
   28934:	dc002d15 	stw	r16,180(sp)
   28938:	d9002015 	stw	r4,128(sp)
   2893c:	d9c02215 	stw	r7,136(sp)
   28940:	2829883a 	mov	r20,r5
   28944:	3039883a 	mov	fp,r6
   28948:	20000226 	beq	r4,zero,28954 <___vfiprintf_internal_r+0x48>
   2894c:	20800e17 	ldw	r2,56(r4)
   28950:	1000cf26 	beq	r2,zero,28c90 <___vfiprintf_internal_r+0x384>
   28954:	a080030b 	ldhu	r2,12(r20)
   28958:	10c8000c 	andi	r3,r2,8192
   2895c:	1800061e 	bne	r3,zero,28978 <___vfiprintf_internal_r+0x6c>
   28960:	a1001917 	ldw	r4,100(r20)
   28964:	00f7ffc4 	movi	r3,-8193
   28968:	10880014 	ori	r2,r2,8192
   2896c:	20c6703a 	and	r3,r4,r3
   28970:	a080030d 	sth	r2,12(r20)
   28974:	a0c01915 	stw	r3,100(r20)
   28978:	10c0020c 	andi	r3,r2,8
   2897c:	1800a926 	beq	r3,zero,28c24 <___vfiprintf_internal_r+0x318>
   28980:	a0c00417 	ldw	r3,16(r20)
   28984:	1800a726 	beq	r3,zero,28c24 <___vfiprintf_internal_r+0x318>
   28988:	1080068c 	andi	r2,r2,26
   2898c:	00c00284 	movi	r3,10
   28990:	10c0ac26 	beq	r2,r3,28c44 <___vfiprintf_internal_r+0x338>
   28994:	da801a04 	addi	r10,sp,104
   28998:	da801e15 	stw	r10,120(sp)
   2899c:	d8801e17 	ldw	r2,120(sp)
   289a0:	da8019c4 	addi	r10,sp,103
   289a4:	058000f4 	movhi	r22,3
   289a8:	05c000f4 	movhi	r23,3
   289ac:	da801f15 	stw	r10,124(sp)
   289b0:	1295c83a 	sub	r10,r2,r10
   289b4:	b586df04 	addi	r22,r22,7036
   289b8:	bdc6db04 	addi	r23,r23,7020
   289bc:	dec01a15 	stw	sp,104(sp)
   289c0:	d8001c15 	stw	zero,112(sp)
   289c4:	d8001b15 	stw	zero,108(sp)
   289c8:	d8002615 	stw	zero,152(sp)
   289cc:	d8002315 	stw	zero,140(sp)
   289d0:	da802715 	stw	r10,156(sp)
   289d4:	d811883a 	mov	r8,sp
   289d8:	dd002115 	stw	r20,132(sp)
   289dc:	e021883a 	mov	r16,fp
   289e0:	80800007 	ldb	r2,0(r16)
   289e4:	1003ea26 	beq	r2,zero,29990 <___vfiprintf_internal_r+0x1084>
   289e8:	00c00944 	movi	r3,37
   289ec:	8025883a 	mov	r18,r16
   289f0:	10c0021e 	bne	r2,r3,289fc <___vfiprintf_internal_r+0xf0>
   289f4:	00001606 	br	28a50 <___vfiprintf_internal_r+0x144>
   289f8:	10c00326 	beq	r2,r3,28a08 <___vfiprintf_internal_r+0xfc>
   289fc:	94800044 	addi	r18,r18,1
   28a00:	90800007 	ldb	r2,0(r18)
   28a04:	103ffc1e 	bne	r2,zero,289f8 <__alt_data_end+0xf40289f8>
   28a08:	9423c83a 	sub	r17,r18,r16
   28a0c:	88001026 	beq	r17,zero,28a50 <___vfiprintf_internal_r+0x144>
   28a10:	d8c01c17 	ldw	r3,112(sp)
   28a14:	d8801b17 	ldw	r2,108(sp)
   28a18:	44000015 	stw	r16,0(r8)
   28a1c:	88c7883a 	add	r3,r17,r3
   28a20:	10800044 	addi	r2,r2,1
   28a24:	44400115 	stw	r17,4(r8)
   28a28:	d8c01c15 	stw	r3,112(sp)
   28a2c:	d8801b15 	stw	r2,108(sp)
   28a30:	010001c4 	movi	r4,7
   28a34:	2080760e 	bge	r4,r2,28c10 <___vfiprintf_internal_r+0x304>
   28a38:	1803821e 	bne	r3,zero,29844 <___vfiprintf_internal_r+0xf38>
   28a3c:	da802317 	ldw	r10,140(sp)
   28a40:	d8001b15 	stw	zero,108(sp)
   28a44:	d811883a 	mov	r8,sp
   28a48:	5455883a 	add	r10,r10,r17
   28a4c:	da802315 	stw	r10,140(sp)
   28a50:	90800007 	ldb	r2,0(r18)
   28a54:	10044626 	beq	r2,zero,29b70 <___vfiprintf_internal_r+0x1264>
   28a58:	90c00047 	ldb	r3,1(r18)
   28a5c:	94000044 	addi	r16,r18,1
   28a60:	d8001d85 	stb	zero,118(sp)
   28a64:	0009883a 	mov	r4,zero
   28a68:	000f883a 	mov	r7,zero
   28a6c:	027fffc4 	movi	r9,-1
   28a70:	0023883a 	mov	r17,zero
   28a74:	0029883a 	mov	r20,zero
   28a78:	01401604 	movi	r5,88
   28a7c:	01800244 	movi	r6,9
   28a80:	03400a84 	movi	r13,42
   28a84:	03001b04 	movi	r12,108
   28a88:	84000044 	addi	r16,r16,1
   28a8c:	18bff804 	addi	r2,r3,-32
   28a90:	28827336 	bltu	r5,r2,29460 <___vfiprintf_internal_r+0xb54>
   28a94:	100490ba 	slli	r2,r2,2
   28a98:	028000f4 	movhi	r10,3
   28a9c:	52a2ab04 	addi	r10,r10,-30036
   28aa0:	1285883a 	add	r2,r2,r10
   28aa4:	10800017 	ldw	r2,0(r2)
   28aa8:	1000683a 	jmp	r2
   28aac:	00029194 	movui	zero,2630
   28ab0:	00029460 	cmpeqi	zero,zero,2641
   28ab4:	00029460 	cmpeqi	zero,zero,2641
   28ab8:	000291b4 	movhi	zero,2630
   28abc:	00029460 	cmpeqi	zero,zero,2641
   28ac0:	00029460 	cmpeqi	zero,zero,2641
   28ac4:	00029460 	cmpeqi	zero,zero,2641
   28ac8:	00029460 	cmpeqi	zero,zero,2641
   28acc:	00029460 	cmpeqi	zero,zero,2641
   28ad0:	00029460 	cmpeqi	zero,zero,2641
   28ad4:	0002939c 	xori	zero,zero,2638
   28ad8:	000293b8 	rdprs	zero,zero,2638
   28adc:	00029460 	cmpeqi	zero,zero,2641
   28ae0:	00028ca0 	cmpeqi	zero,zero,2610
   28ae4:	000293c8 	cmpgei	zero,zero,2639
   28ae8:	00029460 	cmpeqi	zero,zero,2641
   28aec:	000291c0 	call	291c <__alt_mem_onchip_memory_nios2_FFT-0x1d6e4>
   28af0:	000291cc 	andi	zero,zero,2631
   28af4:	000291cc 	andi	zero,zero,2631
   28af8:	000291cc 	andi	zero,zero,2631
   28afc:	000291cc 	andi	zero,zero,2631
   28b00:	000291cc 	andi	zero,zero,2631
   28b04:	000291cc 	andi	zero,zero,2631
   28b08:	000291cc 	andi	zero,zero,2631
   28b0c:	000291cc 	andi	zero,zero,2631
   28b10:	000291cc 	andi	zero,zero,2631
   28b14:	00029460 	cmpeqi	zero,zero,2641
   28b18:	00029460 	cmpeqi	zero,zero,2641
   28b1c:	00029460 	cmpeqi	zero,zero,2641
   28b20:	00029460 	cmpeqi	zero,zero,2641
   28b24:	00029460 	cmpeqi	zero,zero,2641
   28b28:	00029460 	cmpeqi	zero,zero,2641
   28b2c:	00029460 	cmpeqi	zero,zero,2641
   28b30:	00029460 	cmpeqi	zero,zero,2641
   28b34:	00029460 	cmpeqi	zero,zero,2641
   28b38:	00029460 	cmpeqi	zero,zero,2641
   28b3c:	000291f8 	rdprs	zero,zero,2631
   28b40:	00029460 	cmpeqi	zero,zero,2641
   28b44:	00029460 	cmpeqi	zero,zero,2641
   28b48:	00029460 	cmpeqi	zero,zero,2641
   28b4c:	00029460 	cmpeqi	zero,zero,2641
   28b50:	00029460 	cmpeqi	zero,zero,2641
   28b54:	00029460 	cmpeqi	zero,zero,2641
   28b58:	00029460 	cmpeqi	zero,zero,2641
   28b5c:	00029460 	cmpeqi	zero,zero,2641
   28b60:	00029460 	cmpeqi	zero,zero,2641
   28b64:	00029460 	cmpeqi	zero,zero,2641
   28b68:	00029230 	cmpltui	zero,zero,2632
   28b6c:	00029460 	cmpeqi	zero,zero,2641
   28b70:	00029460 	cmpeqi	zero,zero,2641
   28b74:	00029460 	cmpeqi	zero,zero,2641
   28b78:	00029460 	cmpeqi	zero,zero,2641
   28b7c:	00029460 	cmpeqi	zero,zero,2641
   28b80:	00029288 	cmpgei	zero,zero,2634
   28b84:	00029460 	cmpeqi	zero,zero,2641
   28b88:	00029460 	cmpeqi	zero,zero,2641
   28b8c:	000292f8 	rdprs	zero,zero,2635
   28b90:	00029460 	cmpeqi	zero,zero,2641
   28b94:	00029460 	cmpeqi	zero,zero,2641
   28b98:	00029460 	cmpeqi	zero,zero,2641
   28b9c:	00029460 	cmpeqi	zero,zero,2641
   28ba0:	00029460 	cmpeqi	zero,zero,2641
   28ba4:	00029460 	cmpeqi	zero,zero,2641
   28ba8:	00029460 	cmpeqi	zero,zero,2641
   28bac:	00029460 	cmpeqi	zero,zero,2641
   28bb0:	00029460 	cmpeqi	zero,zero,2641
   28bb4:	00029460 	cmpeqi	zero,zero,2641
   28bb8:	000290a4 	muli	zero,zero,2626
   28bbc:	000290d0 	cmplti	zero,zero,2627
   28bc0:	00029460 	cmpeqi	zero,zero,2641
   28bc4:	00029460 	cmpeqi	zero,zero,2641
   28bc8:	00029460 	cmpeqi	zero,zero,2641
   28bcc:	00029408 	cmpgei	zero,zero,2640
   28bd0:	000290d0 	cmplti	zero,zero,2627
   28bd4:	00029460 	cmpeqi	zero,zero,2641
   28bd8:	00029460 	cmpeqi	zero,zero,2641
   28bdc:	00028f64 	muli	zero,zero,2621
   28be0:	00029460 	cmpeqi	zero,zero,2641
   28be4:	00028f74 	movhi	zero,2621
   28be8:	00028fb0 	cmpltui	zero,zero,2622
   28bec:	00028cac 	andhi	zero,zero,2610
   28bf0:	00028f58 	cmpnei	zero,zero,2621
   28bf4:	00029460 	cmpeqi	zero,zero,2641
   28bf8:	00029334 	movhi	zero,2636
   28bfc:	00029460 	cmpeqi	zero,zero,2641
   28c00:	0002938c 	andi	zero,zero,2638
   28c04:	00029460 	cmpeqi	zero,zero,2641
   28c08:	00029460 	cmpeqi	zero,zero,2641
   28c0c:	00029050 	cmplti	zero,zero,2625
   28c10:	42000204 	addi	r8,r8,8
   28c14:	da802317 	ldw	r10,140(sp)
   28c18:	5455883a 	add	r10,r10,r17
   28c1c:	da802315 	stw	r10,140(sp)
   28c20:	003f8b06 	br	28a50 <__alt_data_end+0xf4028a50>
   28c24:	d9002017 	ldw	r4,128(sp)
   28c28:	a00b883a 	mov	r5,r20
   28c2c:	00235c80 	call	235c8 <__swsetup_r>
   28c30:	1003b11e 	bne	r2,zero,29af8 <___vfiprintf_internal_r+0x11ec>
   28c34:	a080030b 	ldhu	r2,12(r20)
   28c38:	00c00284 	movi	r3,10
   28c3c:	1080068c 	andi	r2,r2,26
   28c40:	10ff541e 	bne	r2,r3,28994 <__alt_data_end+0xf4028994>
   28c44:	a080038f 	ldh	r2,14(r20)
   28c48:	103f5216 	blt	r2,zero,28994 <__alt_data_end+0xf4028994>
   28c4c:	d9c02217 	ldw	r7,136(sp)
   28c50:	d9002017 	ldw	r4,128(sp)
   28c54:	e00d883a 	mov	r6,fp
   28c58:	a00b883a 	mov	r5,r20
   28c5c:	0029d840 	call	29d84 <__sbprintf>
   28c60:	dfc03617 	ldw	ra,216(sp)
   28c64:	df003517 	ldw	fp,212(sp)
   28c68:	ddc03417 	ldw	r23,208(sp)
   28c6c:	dd803317 	ldw	r22,204(sp)
   28c70:	dd403217 	ldw	r21,200(sp)
   28c74:	dd003117 	ldw	r20,196(sp)
   28c78:	dcc03017 	ldw	r19,192(sp)
   28c7c:	dc802f17 	ldw	r18,188(sp)
   28c80:	dc402e17 	ldw	r17,184(sp)
   28c84:	dc002d17 	ldw	r16,180(sp)
   28c88:	dec03704 	addi	sp,sp,220
   28c8c:	f800283a 	ret
   28c90:	002559c0 	call	2559c <__sinit>
   28c94:	003f2f06 	br	28954 <__alt_data_end+0xf4028954>
   28c98:	0463c83a 	sub	r17,zero,r17
   28c9c:	d8802215 	stw	r2,136(sp)
   28ca0:	a5000114 	ori	r20,r20,4
   28ca4:	80c00007 	ldb	r3,0(r16)
   28ca8:	003f7706 	br	28a88 <__alt_data_end+0xf4028a88>
   28cac:	00800c04 	movi	r2,48
   28cb0:	da802217 	ldw	r10,136(sp)
   28cb4:	d8801d05 	stb	r2,116(sp)
   28cb8:	00801e04 	movi	r2,120
   28cbc:	d8801d45 	stb	r2,117(sp)
   28cc0:	d8001d85 	stb	zero,118(sp)
   28cc4:	50c00104 	addi	r3,r10,4
   28cc8:	54800017 	ldw	r18,0(r10)
   28ccc:	0027883a 	mov	r19,zero
   28cd0:	a0800094 	ori	r2,r20,2
   28cd4:	48030b16 	blt	r9,zero,29904 <___vfiprintf_internal_r+0xff8>
   28cd8:	00bfdfc4 	movi	r2,-129
   28cdc:	a096703a 	and	r11,r20,r2
   28ce0:	d8c02215 	stw	r3,136(sp)
   28ce4:	5d000094 	ori	r20,r11,2
   28ce8:	90032b1e 	bne	r18,zero,29998 <___vfiprintf_internal_r+0x108c>
   28cec:	008000f4 	movhi	r2,3
   28cf0:	10867a04 	addi	r2,r2,6632
   28cf4:	d8802615 	stw	r2,152(sp)
   28cf8:	0039883a 	mov	fp,zero
   28cfc:	48017b1e 	bne	r9,zero,292ec <___vfiprintf_internal_r+0x9e0>
   28d00:	0013883a 	mov	r9,zero
   28d04:	0027883a 	mov	r19,zero
   28d08:	dd401a04 	addi	r21,sp,104
   28d0c:	4825883a 	mov	r18,r9
   28d10:	4cc0010e 	bge	r9,r19,28d18 <___vfiprintf_internal_r+0x40c>
   28d14:	9825883a 	mov	r18,r19
   28d18:	e7003fcc 	andi	fp,fp,255
   28d1c:	e700201c 	xori	fp,fp,128
   28d20:	e73fe004 	addi	fp,fp,-128
   28d24:	e0000126 	beq	fp,zero,28d2c <___vfiprintf_internal_r+0x420>
   28d28:	94800044 	addi	r18,r18,1
   28d2c:	a380008c 	andi	r14,r20,2
   28d30:	70000126 	beq	r14,zero,28d38 <___vfiprintf_internal_r+0x42c>
   28d34:	94800084 	addi	r18,r18,2
   28d38:	a700210c 	andi	fp,r20,132
   28d3c:	e001df1e 	bne	fp,zero,294bc <___vfiprintf_internal_r+0xbb0>
   28d40:	8c87c83a 	sub	r3,r17,r18
   28d44:	00c1dd0e 	bge	zero,r3,294bc <___vfiprintf_internal_r+0xbb0>
   28d48:	01c00404 	movi	r7,16
   28d4c:	d8801c17 	ldw	r2,112(sp)
   28d50:	38c3ad0e 	bge	r7,r3,29c08 <___vfiprintf_internal_r+0x12fc>
   28d54:	028000f4 	movhi	r10,3
   28d58:	5286df04 	addi	r10,r10,7036
   28d5c:	dc002915 	stw	r16,164(sp)
   28d60:	d9801b17 	ldw	r6,108(sp)
   28d64:	da802415 	stw	r10,144(sp)
   28d68:	03c001c4 	movi	r15,7
   28d6c:	da402515 	stw	r9,148(sp)
   28d70:	db802815 	stw	r14,160(sp)
   28d74:	1821883a 	mov	r16,r3
   28d78:	00000506 	br	28d90 <___vfiprintf_internal_r+0x484>
   28d7c:	31400084 	addi	r5,r6,2
   28d80:	42000204 	addi	r8,r8,8
   28d84:	200d883a 	mov	r6,r4
   28d88:	843ffc04 	addi	r16,r16,-16
   28d8c:	3c000d0e 	bge	r7,r16,28dc4 <___vfiprintf_internal_r+0x4b8>
   28d90:	10800404 	addi	r2,r2,16
   28d94:	31000044 	addi	r4,r6,1
   28d98:	45800015 	stw	r22,0(r8)
   28d9c:	41c00115 	stw	r7,4(r8)
   28da0:	d8801c15 	stw	r2,112(sp)
   28da4:	d9001b15 	stw	r4,108(sp)
   28da8:	793ff40e 	bge	r15,r4,28d7c <__alt_data_end+0xf4028d7c>
   28dac:	1001b51e 	bne	r2,zero,29484 <___vfiprintf_internal_r+0xb78>
   28db0:	843ffc04 	addi	r16,r16,-16
   28db4:	000d883a 	mov	r6,zero
   28db8:	01400044 	movi	r5,1
   28dbc:	d811883a 	mov	r8,sp
   28dc0:	3c3ff316 	blt	r7,r16,28d90 <__alt_data_end+0xf4028d90>
   28dc4:	8007883a 	mov	r3,r16
   28dc8:	da402517 	ldw	r9,148(sp)
   28dcc:	db802817 	ldw	r14,160(sp)
   28dd0:	dc002917 	ldw	r16,164(sp)
   28dd4:	da802417 	ldw	r10,144(sp)
   28dd8:	1885883a 	add	r2,r3,r2
   28ddc:	40c00115 	stw	r3,4(r8)
   28de0:	42800015 	stw	r10,0(r8)
   28de4:	d8801c15 	stw	r2,112(sp)
   28de8:	d9401b15 	stw	r5,108(sp)
   28dec:	00c001c4 	movi	r3,7
   28df0:	19426016 	blt	r3,r5,29774 <___vfiprintf_internal_r+0xe68>
   28df4:	d8c01d87 	ldb	r3,118(sp)
   28df8:	42000204 	addi	r8,r8,8
   28dfc:	29000044 	addi	r4,r5,1
   28e00:	1801b31e 	bne	r3,zero,294d0 <___vfiprintf_internal_r+0xbc4>
   28e04:	7001c026 	beq	r14,zero,29508 <___vfiprintf_internal_r+0xbfc>
   28e08:	d8c01d04 	addi	r3,sp,116
   28e0c:	10800084 	addi	r2,r2,2
   28e10:	40c00015 	stw	r3,0(r8)
   28e14:	00c00084 	movi	r3,2
   28e18:	40c00115 	stw	r3,4(r8)
   28e1c:	d8801c15 	stw	r2,112(sp)
   28e20:	d9001b15 	stw	r4,108(sp)
   28e24:	00c001c4 	movi	r3,7
   28e28:	1902650e 	bge	r3,r4,297c0 <___vfiprintf_internal_r+0xeb4>
   28e2c:	10029a1e 	bne	r2,zero,29898 <___vfiprintf_internal_r+0xf8c>
   28e30:	00c02004 	movi	r3,128
   28e34:	01000044 	movi	r4,1
   28e38:	000b883a 	mov	r5,zero
   28e3c:	d811883a 	mov	r8,sp
   28e40:	e0c1b31e 	bne	fp,r3,29510 <___vfiprintf_internal_r+0xc04>
   28e44:	8cb9c83a 	sub	fp,r17,r18
   28e48:	0701b10e 	bge	zero,fp,29510 <___vfiprintf_internal_r+0xc04>
   28e4c:	01c00404 	movi	r7,16
   28e50:	3f03890e 	bge	r7,fp,29c78 <___vfiprintf_internal_r+0x136c>
   28e54:	00c000f4 	movhi	r3,3
   28e58:	18c6db04 	addi	r3,r3,7020
   28e5c:	d8c02415 	stw	r3,144(sp)
   28e60:	8007883a 	mov	r3,r16
   28e64:	034001c4 	movi	r13,7
   28e68:	e021883a 	mov	r16,fp
   28e6c:	da402515 	stw	r9,148(sp)
   28e70:	1839883a 	mov	fp,r3
   28e74:	00000506 	br	28e8c <___vfiprintf_internal_r+0x580>
   28e78:	29800084 	addi	r6,r5,2
   28e7c:	42000204 	addi	r8,r8,8
   28e80:	180b883a 	mov	r5,r3
   28e84:	843ffc04 	addi	r16,r16,-16
   28e88:	3c000d0e 	bge	r7,r16,28ec0 <___vfiprintf_internal_r+0x5b4>
   28e8c:	10800404 	addi	r2,r2,16
   28e90:	28c00044 	addi	r3,r5,1
   28e94:	45c00015 	stw	r23,0(r8)
   28e98:	41c00115 	stw	r7,4(r8)
   28e9c:	d8801c15 	stw	r2,112(sp)
   28ea0:	d8c01b15 	stw	r3,108(sp)
   28ea4:	68fff40e 	bge	r13,r3,28e78 <__alt_data_end+0xf4028e78>
   28ea8:	1002241e 	bne	r2,zero,2973c <___vfiprintf_internal_r+0xe30>
   28eac:	843ffc04 	addi	r16,r16,-16
   28eb0:	01800044 	movi	r6,1
   28eb4:	000b883a 	mov	r5,zero
   28eb8:	d811883a 	mov	r8,sp
   28ebc:	3c3ff316 	blt	r7,r16,28e8c <__alt_data_end+0xf4028e8c>
   28ec0:	da402517 	ldw	r9,148(sp)
   28ec4:	e007883a 	mov	r3,fp
   28ec8:	8039883a 	mov	fp,r16
   28ecc:	1821883a 	mov	r16,r3
   28ed0:	d8c02417 	ldw	r3,144(sp)
   28ed4:	1705883a 	add	r2,r2,fp
   28ed8:	47000115 	stw	fp,4(r8)
   28edc:	40c00015 	stw	r3,0(r8)
   28ee0:	d8801c15 	stw	r2,112(sp)
   28ee4:	d9801b15 	stw	r6,108(sp)
   28ee8:	00c001c4 	movi	r3,7
   28eec:	19827616 	blt	r3,r6,298c8 <___vfiprintf_internal_r+0xfbc>
   28ef0:	4cf9c83a 	sub	fp,r9,r19
   28ef4:	42000204 	addi	r8,r8,8
   28ef8:	31000044 	addi	r4,r6,1
   28efc:	300b883a 	mov	r5,r6
   28f00:	07018516 	blt	zero,fp,29518 <___vfiprintf_internal_r+0xc0c>
   28f04:	9885883a 	add	r2,r19,r2
   28f08:	45400015 	stw	r21,0(r8)
   28f0c:	44c00115 	stw	r19,4(r8)
   28f10:	d8801c15 	stw	r2,112(sp)
   28f14:	d9001b15 	stw	r4,108(sp)
   28f18:	00c001c4 	movi	r3,7
   28f1c:	1901dd0e 	bge	r3,r4,29694 <___vfiprintf_internal_r+0xd88>
   28f20:	1002401e 	bne	r2,zero,29824 <___vfiprintf_internal_r+0xf18>
   28f24:	d8001b15 	stw	zero,108(sp)
   28f28:	a2c0010c 	andi	r11,r20,4
   28f2c:	58000226 	beq	r11,zero,28f38 <___vfiprintf_internal_r+0x62c>
   28f30:	8ca7c83a 	sub	r19,r17,r18
   28f34:	04c2f216 	blt	zero,r19,29b00 <___vfiprintf_internal_r+0x11f4>
   28f38:	8c80010e 	bge	r17,r18,28f40 <___vfiprintf_internal_r+0x634>
   28f3c:	9023883a 	mov	r17,r18
   28f40:	da802317 	ldw	r10,140(sp)
   28f44:	5455883a 	add	r10,r10,r17
   28f48:	da802315 	stw	r10,140(sp)
   28f4c:	d8001b15 	stw	zero,108(sp)
   28f50:	d811883a 	mov	r8,sp
   28f54:	003ea206 	br	289e0 <__alt_data_end+0xf40289e0>
   28f58:	a5000814 	ori	r20,r20,32
   28f5c:	80c00007 	ldb	r3,0(r16)
   28f60:	003ec906 	br	28a88 <__alt_data_end+0xf4028a88>
   28f64:	80c00007 	ldb	r3,0(r16)
   28f68:	1b030926 	beq	r3,r12,29b90 <___vfiprintf_internal_r+0x1284>
   28f6c:	a5000414 	ori	r20,r20,16
   28f70:	003ec506 	br	28a88 <__alt_data_end+0xf4028a88>
   28f74:	21003fcc 	andi	r4,r4,255
   28f78:	20035e1e 	bne	r4,zero,29cf4 <___vfiprintf_internal_r+0x13e8>
   28f7c:	a080080c 	andi	r2,r20,32
   28f80:	1002a526 	beq	r2,zero,29a18 <___vfiprintf_internal_r+0x110c>
   28f84:	da802217 	ldw	r10,136(sp)
   28f88:	50800017 	ldw	r2,0(r10)
   28f8c:	da802317 	ldw	r10,140(sp)
   28f90:	5007d7fa 	srai	r3,r10,31
   28f94:	da802217 	ldw	r10,136(sp)
   28f98:	10c00115 	stw	r3,4(r2)
   28f9c:	52800104 	addi	r10,r10,4
   28fa0:	da802215 	stw	r10,136(sp)
   28fa4:	da802317 	ldw	r10,140(sp)
   28fa8:	12800015 	stw	r10,0(r2)
   28fac:	003e8c06 	br	289e0 <__alt_data_end+0xf40289e0>
   28fb0:	21003fcc 	andi	r4,r4,255
   28fb4:	2003511e 	bne	r4,zero,29cfc <___vfiprintf_internal_r+0x13f0>
   28fb8:	a080080c 	andi	r2,r20,32
   28fbc:	1000a126 	beq	r2,zero,29244 <___vfiprintf_internal_r+0x938>
   28fc0:	da802217 	ldw	r10,136(sp)
   28fc4:	d8001d85 	stb	zero,118(sp)
   28fc8:	50800204 	addi	r2,r10,8
   28fcc:	54800017 	ldw	r18,0(r10)
   28fd0:	54c00117 	ldw	r19,4(r10)
   28fd4:	4802b416 	blt	r9,zero,29aa8 <___vfiprintf_internal_r+0x119c>
   28fd8:	013fdfc4 	movi	r4,-129
   28fdc:	94c6b03a 	or	r3,r18,r19
   28fe0:	d8802215 	stw	r2,136(sp)
   28fe4:	a128703a 	and	r20,r20,r4
   28fe8:	1800a226 	beq	r3,zero,29274 <___vfiprintf_internal_r+0x968>
   28fec:	0039883a 	mov	fp,zero
   28ff0:	dd401a04 	addi	r21,sp,104
   28ff4:	9006d0fa 	srli	r3,r18,3
   28ff8:	9808977a 	slli	r4,r19,29
   28ffc:	9826d0fa 	srli	r19,r19,3
   29000:	948001cc 	andi	r18,r18,7
   29004:	90800c04 	addi	r2,r18,48
   29008:	ad7fffc4 	addi	r21,r21,-1
   2900c:	20e4b03a 	or	r18,r4,r3
   29010:	a8800005 	stb	r2,0(r21)
   29014:	94c6b03a 	or	r3,r18,r19
   29018:	183ff61e 	bne	r3,zero,28ff4 <__alt_data_end+0xf4028ff4>
   2901c:	a0c0004c 	andi	r3,r20,1
   29020:	18005926 	beq	r3,zero,29188 <___vfiprintf_internal_r+0x87c>
   29024:	10803fcc 	andi	r2,r2,255
   29028:	1080201c 	xori	r2,r2,128
   2902c:	10bfe004 	addi	r2,r2,-128
   29030:	00c00c04 	movi	r3,48
   29034:	10c05426 	beq	r2,r3,29188 <___vfiprintf_internal_r+0x87c>
   29038:	da801e17 	ldw	r10,120(sp)
   2903c:	a8bfffc4 	addi	r2,r21,-1
   29040:	a8ffffc5 	stb	r3,-1(r21)
   29044:	50a7c83a 	sub	r19,r10,r2
   29048:	102b883a 	mov	r21,r2
   2904c:	003f2f06 	br	28d0c <__alt_data_end+0xf4028d0c>
   29050:	21003fcc 	andi	r4,r4,255
   29054:	2003421e 	bne	r4,zero,29d60 <___vfiprintf_internal_r+0x1454>
   29058:	008000f4 	movhi	r2,3
   2905c:	10867a04 	addi	r2,r2,6632
   29060:	d8802615 	stw	r2,152(sp)
   29064:	a080080c 	andi	r2,r20,32
   29068:	1000aa26 	beq	r2,zero,29314 <___vfiprintf_internal_r+0xa08>
   2906c:	da802217 	ldw	r10,136(sp)
   29070:	54800017 	ldw	r18,0(r10)
   29074:	54c00117 	ldw	r19,4(r10)
   29078:	52800204 	addi	r10,r10,8
   2907c:	da802215 	stw	r10,136(sp)
   29080:	a080004c 	andi	r2,r20,1
   29084:	1001d226 	beq	r2,zero,297d0 <___vfiprintf_internal_r+0xec4>
   29088:	94c4b03a 	or	r2,r18,r19
   2908c:	1002351e 	bne	r2,zero,29964 <___vfiprintf_internal_r+0x1058>
   29090:	d8001d85 	stb	zero,118(sp)
   29094:	48022216 	blt	r9,zero,29920 <___vfiprintf_internal_r+0x1014>
   29098:	00bfdfc4 	movi	r2,-129
   2909c:	a0a8703a 	and	r20,r20,r2
   290a0:	003f1506 	br	28cf8 <__alt_data_end+0xf4028cf8>
   290a4:	da802217 	ldw	r10,136(sp)
   290a8:	04800044 	movi	r18,1
   290ac:	d8001d85 	stb	zero,118(sp)
   290b0:	50800017 	ldw	r2,0(r10)
   290b4:	52800104 	addi	r10,r10,4
   290b8:	da802215 	stw	r10,136(sp)
   290bc:	d8801005 	stb	r2,64(sp)
   290c0:	9027883a 	mov	r19,r18
   290c4:	dd401004 	addi	r21,sp,64
   290c8:	0013883a 	mov	r9,zero
   290cc:	003f1706 	br	28d2c <__alt_data_end+0xf4028d2c>
   290d0:	21003fcc 	andi	r4,r4,255
   290d4:	2003201e 	bne	r4,zero,29d58 <___vfiprintf_internal_r+0x144c>
   290d8:	a080080c 	andi	r2,r20,32
   290dc:	10004b26 	beq	r2,zero,2920c <___vfiprintf_internal_r+0x900>
   290e0:	da802217 	ldw	r10,136(sp)
   290e4:	50800117 	ldw	r2,4(r10)
   290e8:	54800017 	ldw	r18,0(r10)
   290ec:	52800204 	addi	r10,r10,8
   290f0:	da802215 	stw	r10,136(sp)
   290f4:	1027883a 	mov	r19,r2
   290f8:	10022c16 	blt	r2,zero,299ac <___vfiprintf_internal_r+0x10a0>
   290fc:	df001d83 	ldbu	fp,118(sp)
   29100:	48007216 	blt	r9,zero,292cc <___vfiprintf_internal_r+0x9c0>
   29104:	00ffdfc4 	movi	r3,-129
   29108:	94c4b03a 	or	r2,r18,r19
   2910c:	a0e8703a 	and	r20,r20,r3
   29110:	1000cc26 	beq	r2,zero,29444 <___vfiprintf_internal_r+0xb38>
   29114:	98021026 	beq	r19,zero,29958 <___vfiprintf_internal_r+0x104c>
   29118:	dc402415 	stw	r17,144(sp)
   2911c:	dc002515 	stw	r16,148(sp)
   29120:	9823883a 	mov	r17,r19
   29124:	9021883a 	mov	r16,r18
   29128:	dd401a04 	addi	r21,sp,104
   2912c:	4825883a 	mov	r18,r9
   29130:	4027883a 	mov	r19,r8
   29134:	8009883a 	mov	r4,r16
   29138:	880b883a 	mov	r5,r17
   2913c:	01800284 	movi	r6,10
   29140:	000f883a 	mov	r7,zero
   29144:	002acec0 	call	2acec <__umoddi3>
   29148:	10800c04 	addi	r2,r2,48
   2914c:	ad7fffc4 	addi	r21,r21,-1
   29150:	8009883a 	mov	r4,r16
   29154:	880b883a 	mov	r5,r17
   29158:	a8800005 	stb	r2,0(r21)
   2915c:	01800284 	movi	r6,10
   29160:	000f883a 	mov	r7,zero
   29164:	002a7740 	call	2a774 <__udivdi3>
   29168:	1021883a 	mov	r16,r2
   2916c:	10c4b03a 	or	r2,r2,r3
   29170:	1823883a 	mov	r17,r3
   29174:	103fef1e 	bne	r2,zero,29134 <__alt_data_end+0xf4029134>
   29178:	dc402417 	ldw	r17,144(sp)
   2917c:	dc002517 	ldw	r16,148(sp)
   29180:	9013883a 	mov	r9,r18
   29184:	9811883a 	mov	r8,r19
   29188:	da801e17 	ldw	r10,120(sp)
   2918c:	5567c83a 	sub	r19,r10,r21
   29190:	003ede06 	br	28d0c <__alt_data_end+0xf4028d0c>
   29194:	38803fcc 	andi	r2,r7,255
   29198:	1080201c 	xori	r2,r2,128
   2919c:	10bfe004 	addi	r2,r2,-128
   291a0:	1002371e 	bne	r2,zero,29a80 <___vfiprintf_internal_r+0x1174>
   291a4:	01000044 	movi	r4,1
   291a8:	01c00804 	movi	r7,32
   291ac:	80c00007 	ldb	r3,0(r16)
   291b0:	003e3506 	br	28a88 <__alt_data_end+0xf4028a88>
   291b4:	a5000054 	ori	r20,r20,1
   291b8:	80c00007 	ldb	r3,0(r16)
   291bc:	003e3206 	br	28a88 <__alt_data_end+0xf4028a88>
   291c0:	a5002014 	ori	r20,r20,128
   291c4:	80c00007 	ldb	r3,0(r16)
   291c8:	003e2f06 	br	28a88 <__alt_data_end+0xf4028a88>
   291cc:	8015883a 	mov	r10,r16
   291d0:	0023883a 	mov	r17,zero
   291d4:	18bff404 	addi	r2,r3,-48
   291d8:	50c00007 	ldb	r3,0(r10)
   291dc:	8c4002a4 	muli	r17,r17,10
   291e0:	84000044 	addi	r16,r16,1
   291e4:	8015883a 	mov	r10,r16
   291e8:	1463883a 	add	r17,r2,r17
   291ec:	18bff404 	addi	r2,r3,-48
   291f0:	30bff92e 	bgeu	r6,r2,291d8 <__alt_data_end+0xf40291d8>
   291f4:	003e2506 	br	28a8c <__alt_data_end+0xf4028a8c>
   291f8:	21003fcc 	andi	r4,r4,255
   291fc:	2002d41e 	bne	r4,zero,29d50 <___vfiprintf_internal_r+0x1444>
   29200:	a5000414 	ori	r20,r20,16
   29204:	a080080c 	andi	r2,r20,32
   29208:	103fb51e 	bne	r2,zero,290e0 <__alt_data_end+0xf40290e0>
   2920c:	a080040c 	andi	r2,r20,16
   29210:	1001f826 	beq	r2,zero,299f4 <___vfiprintf_internal_r+0x10e8>
   29214:	da802217 	ldw	r10,136(sp)
   29218:	54800017 	ldw	r18,0(r10)
   2921c:	52800104 	addi	r10,r10,4
   29220:	da802215 	stw	r10,136(sp)
   29224:	9027d7fa 	srai	r19,r18,31
   29228:	9805883a 	mov	r2,r19
   2922c:	003fb206 	br	290f8 <__alt_data_end+0xf40290f8>
   29230:	21003fcc 	andi	r4,r4,255
   29234:	2002c41e 	bne	r4,zero,29d48 <___vfiprintf_internal_r+0x143c>
   29238:	a5000414 	ori	r20,r20,16
   2923c:	a080080c 	andi	r2,r20,32
   29240:	103f5f1e 	bne	r2,zero,28fc0 <__alt_data_end+0xf4028fc0>
   29244:	a080040c 	andi	r2,r20,16
   29248:	10020f26 	beq	r2,zero,29a88 <___vfiprintf_internal_r+0x117c>
   2924c:	da802217 	ldw	r10,136(sp)
   29250:	d8001d85 	stb	zero,118(sp)
   29254:	0027883a 	mov	r19,zero
   29258:	50800104 	addi	r2,r10,4
   2925c:	54800017 	ldw	r18,0(r10)
   29260:	48021116 	blt	r9,zero,29aa8 <___vfiprintf_internal_r+0x119c>
   29264:	00ffdfc4 	movi	r3,-129
   29268:	d8802215 	stw	r2,136(sp)
   2926c:	a0e8703a 	and	r20,r20,r3
   29270:	903f5e1e 	bne	r18,zero,28fec <__alt_data_end+0xf4028fec>
   29274:	0039883a 	mov	fp,zero
   29278:	4802a626 	beq	r9,zero,29d14 <___vfiprintf_internal_r+0x1408>
   2927c:	0025883a 	mov	r18,zero
   29280:	0027883a 	mov	r19,zero
   29284:	003f5a06 	br	28ff0 <__alt_data_end+0xf4028ff0>
   29288:	21003fcc 	andi	r4,r4,255
   2928c:	20029f1e 	bne	r4,zero,29d0c <___vfiprintf_internal_r+0x1400>
   29290:	a5000414 	ori	r20,r20,16
   29294:	a080080c 	andi	r2,r20,32
   29298:	10005e1e 	bne	r2,zero,29414 <___vfiprintf_internal_r+0xb08>
   2929c:	a080040c 	andi	r2,r20,16
   292a0:	1001a21e 	bne	r2,zero,2992c <___vfiprintf_internal_r+0x1020>
   292a4:	a080100c 	andi	r2,r20,64
   292a8:	d8001d85 	stb	zero,118(sp)
   292ac:	da802217 	ldw	r10,136(sp)
   292b0:	1002231e 	bne	r2,zero,29b40 <___vfiprintf_internal_r+0x1234>
   292b4:	50800104 	addi	r2,r10,4
   292b8:	54800017 	ldw	r18,0(r10)
   292bc:	0027883a 	mov	r19,zero
   292c0:	4801a00e 	bge	r9,zero,29944 <___vfiprintf_internal_r+0x1038>
   292c4:	d8802215 	stw	r2,136(sp)
   292c8:	0039883a 	mov	fp,zero
   292cc:	94c4b03a 	or	r2,r18,r19
   292d0:	103f901e 	bne	r2,zero,29114 <__alt_data_end+0xf4029114>
   292d4:	00800044 	movi	r2,1
   292d8:	10803fcc 	andi	r2,r2,255
   292dc:	00c00044 	movi	r3,1
   292e0:	10c05926 	beq	r2,r3,29448 <___vfiprintf_internal_r+0xb3c>
   292e4:	00c00084 	movi	r3,2
   292e8:	10ffe41e 	bne	r2,r3,2927c <__alt_data_end+0xf402927c>
   292ec:	0025883a 	mov	r18,zero
   292f0:	0027883a 	mov	r19,zero
   292f4:	00013d06 	br	297ec <___vfiprintf_internal_r+0xee0>
   292f8:	21003fcc 	andi	r4,r4,255
   292fc:	2002811e 	bne	r4,zero,29d04 <___vfiprintf_internal_r+0x13f8>
   29300:	008000f4 	movhi	r2,3
   29304:	10867504 	addi	r2,r2,6612
   29308:	d8802615 	stw	r2,152(sp)
   2930c:	a080080c 	andi	r2,r20,32
   29310:	103f561e 	bne	r2,zero,2906c <__alt_data_end+0xf402906c>
   29314:	a080040c 	andi	r2,r20,16
   29318:	1001d126 	beq	r2,zero,29a60 <___vfiprintf_internal_r+0x1154>
   2931c:	da802217 	ldw	r10,136(sp)
   29320:	0027883a 	mov	r19,zero
   29324:	54800017 	ldw	r18,0(r10)
   29328:	52800104 	addi	r10,r10,4
   2932c:	da802215 	stw	r10,136(sp)
   29330:	003f5306 	br	29080 <__alt_data_end+0xf4029080>
   29334:	da802217 	ldw	r10,136(sp)
   29338:	d8001d85 	stb	zero,118(sp)
   2933c:	55400017 	ldw	r21,0(r10)
   29340:	50c00104 	addi	r3,r10,4
   29344:	a8024226 	beq	r21,zero,29c50 <___vfiprintf_internal_r+0x1344>
   29348:	48021816 	blt	r9,zero,29bac <___vfiprintf_internal_r+0x12a0>
   2934c:	480d883a 	mov	r6,r9
   29350:	000b883a 	mov	r5,zero
   29354:	a809883a 	mov	r4,r21
   29358:	d8c02a15 	stw	r3,168(sp)
   2935c:	da002b15 	stw	r8,172(sp)
   29360:	da402c15 	stw	r9,176(sp)
   29364:	0026b080 	call	26b08 <memchr>
   29368:	d8c02a17 	ldw	r3,168(sp)
   2936c:	da002b17 	ldw	r8,172(sp)
   29370:	da402c17 	ldw	r9,176(sp)
   29374:	10024826 	beq	r2,zero,29c98 <___vfiprintf_internal_r+0x138c>
   29378:	1567c83a 	sub	r19,r2,r21
   2937c:	df001d83 	ldbu	fp,118(sp)
   29380:	d8c02215 	stw	r3,136(sp)
   29384:	0013883a 	mov	r9,zero
   29388:	003e6006 	br	28d0c <__alt_data_end+0xf4028d0c>
   2938c:	21003fcc 	andi	r4,r4,255
   29390:	203fc026 	beq	r4,zero,29294 <__alt_data_end+0xf4029294>
   29394:	d9c01d85 	stb	r7,118(sp)
   29398:	003fbe06 	br	29294 <__alt_data_end+0xf4029294>
   2939c:	da802217 	ldw	r10,136(sp)
   293a0:	54400017 	ldw	r17,0(r10)
   293a4:	50800104 	addi	r2,r10,4
   293a8:	883e3b16 	blt	r17,zero,28c98 <__alt_data_end+0xf4028c98>
   293ac:	d8802215 	stw	r2,136(sp)
   293b0:	80c00007 	ldb	r3,0(r16)
   293b4:	003db406 	br	28a88 <__alt_data_end+0xf4028a88>
   293b8:	01000044 	movi	r4,1
   293bc:	01c00ac4 	movi	r7,43
   293c0:	80c00007 	ldb	r3,0(r16)
   293c4:	003db006 	br	28a88 <__alt_data_end+0xf4028a88>
   293c8:	80c00007 	ldb	r3,0(r16)
   293cc:	82800044 	addi	r10,r16,1
   293d0:	1b423c26 	beq	r3,r13,29cc4 <___vfiprintf_internal_r+0x13b8>
   293d4:	18bff404 	addi	r2,r3,-48
   293d8:	0013883a 	mov	r9,zero
   293dc:	30822b36 	bltu	r6,r2,29c8c <___vfiprintf_internal_r+0x1380>
   293e0:	50c00007 	ldb	r3,0(r10)
   293e4:	4a4002a4 	muli	r9,r9,10
   293e8:	54000044 	addi	r16,r10,1
   293ec:	8015883a 	mov	r10,r16
   293f0:	4893883a 	add	r9,r9,r2
   293f4:	18bff404 	addi	r2,r3,-48
   293f8:	30bff92e 	bgeu	r6,r2,293e0 <__alt_data_end+0xf40293e0>
   293fc:	483da30e 	bge	r9,zero,28a8c <__alt_data_end+0xf4028a8c>
   29400:	027fffc4 	movi	r9,-1
   29404:	003da106 	br	28a8c <__alt_data_end+0xf4028a8c>
   29408:	a5001014 	ori	r20,r20,64
   2940c:	80c00007 	ldb	r3,0(r16)
   29410:	003d9d06 	br	28a88 <__alt_data_end+0xf4028a88>
   29414:	da802217 	ldw	r10,136(sp)
   29418:	d8001d85 	stb	zero,118(sp)
   2941c:	50c00204 	addi	r3,r10,8
   29420:	54800017 	ldw	r18,0(r10)
   29424:	54c00117 	ldw	r19,4(r10)
   29428:	4801ca16 	blt	r9,zero,29b54 <___vfiprintf_internal_r+0x1248>
   2942c:	013fdfc4 	movi	r4,-129
   29430:	94c4b03a 	or	r2,r18,r19
   29434:	d8c02215 	stw	r3,136(sp)
   29438:	a128703a 	and	r20,r20,r4
   2943c:	0039883a 	mov	fp,zero
   29440:	103f341e 	bne	r2,zero,29114 <__alt_data_end+0xf4029114>
   29444:	483e2e26 	beq	r9,zero,28d00 <__alt_data_end+0xf4028d00>
   29448:	0025883a 	mov	r18,zero
   2944c:	94800c04 	addi	r18,r18,48
   29450:	dc8019c5 	stb	r18,103(sp)
   29454:	dcc02717 	ldw	r19,156(sp)
   29458:	dd4019c4 	addi	r21,sp,103
   2945c:	003e2b06 	br	28d0c <__alt_data_end+0xf4028d0c>
   29460:	21003fcc 	andi	r4,r4,255
   29464:	2002361e 	bne	r4,zero,29d40 <___vfiprintf_internal_r+0x1434>
   29468:	1801c126 	beq	r3,zero,29b70 <___vfiprintf_internal_r+0x1264>
   2946c:	04800044 	movi	r18,1
   29470:	d8c01005 	stb	r3,64(sp)
   29474:	d8001d85 	stb	zero,118(sp)
   29478:	9027883a 	mov	r19,r18
   2947c:	dd401004 	addi	r21,sp,64
   29480:	003f1106 	br	290c8 <__alt_data_end+0xf40290c8>
   29484:	d9402117 	ldw	r5,132(sp)
   29488:	d9002017 	ldw	r4,128(sp)
   2948c:	d9801a04 	addi	r6,sp,104
   29490:	d9c02b15 	stw	r7,172(sp)
   29494:	dbc02a15 	stw	r15,168(sp)
   29498:	00287f80 	call	287f8 <__sprint_r.part.0>
   2949c:	d9c02b17 	ldw	r7,172(sp)
   294a0:	dbc02a17 	ldw	r15,168(sp)
   294a4:	10006d1e 	bne	r2,zero,2965c <___vfiprintf_internal_r+0xd50>
   294a8:	d9801b17 	ldw	r6,108(sp)
   294ac:	d8801c17 	ldw	r2,112(sp)
   294b0:	d811883a 	mov	r8,sp
   294b4:	31400044 	addi	r5,r6,1
   294b8:	003e3306 	br	28d88 <__alt_data_end+0xf4028d88>
   294bc:	d9401b17 	ldw	r5,108(sp)
   294c0:	d8801c17 	ldw	r2,112(sp)
   294c4:	29000044 	addi	r4,r5,1
   294c8:	d8c01d87 	ldb	r3,118(sp)
   294cc:	183e4d26 	beq	r3,zero,28e04 <__alt_data_end+0xf4028e04>
   294d0:	00c00044 	movi	r3,1
   294d4:	d9401d84 	addi	r5,sp,118
   294d8:	10c5883a 	add	r2,r2,r3
   294dc:	41400015 	stw	r5,0(r8)
   294e0:	40c00115 	stw	r3,4(r8)
   294e4:	d8801c15 	stw	r2,112(sp)
   294e8:	d9001b15 	stw	r4,108(sp)
   294ec:	014001c4 	movi	r5,7
   294f0:	2900a90e 	bge	r5,r4,29798 <___vfiprintf_internal_r+0xe8c>
   294f4:	1000da1e 	bne	r2,zero,29860 <___vfiprintf_internal_r+0xf54>
   294f8:	7000ab1e 	bne	r14,zero,297a8 <___vfiprintf_internal_r+0xe9c>
   294fc:	000b883a 	mov	r5,zero
   29500:	1809883a 	mov	r4,r3
   29504:	d811883a 	mov	r8,sp
   29508:	00c02004 	movi	r3,128
   2950c:	e0fe4d26 	beq	fp,r3,28e44 <__alt_data_end+0xf4028e44>
   29510:	4cf9c83a 	sub	fp,r9,r19
   29514:	073e7b0e 	bge	zero,fp,28f04 <__alt_data_end+0xf4028f04>
   29518:	01c00404 	movi	r7,16
   2951c:	3f01900e 	bge	r7,fp,29b60 <___vfiprintf_internal_r+0x1254>
   29520:	00c000f4 	movhi	r3,3
   29524:	18c6db04 	addi	r3,r3,7020
   29528:	d8c02415 	stw	r3,144(sp)
   2952c:	034001c4 	movi	r13,7
   29530:	00000506 	br	29548 <___vfiprintf_internal_r+0xc3c>
   29534:	29000084 	addi	r4,r5,2
   29538:	42000204 	addi	r8,r8,8
   2953c:	180b883a 	mov	r5,r3
   29540:	e73ffc04 	addi	fp,fp,-16
   29544:	3f000d0e 	bge	r7,fp,2957c <___vfiprintf_internal_r+0xc70>
   29548:	10800404 	addi	r2,r2,16
   2954c:	28c00044 	addi	r3,r5,1
   29550:	45c00015 	stw	r23,0(r8)
   29554:	41c00115 	stw	r7,4(r8)
   29558:	d8801c15 	stw	r2,112(sp)
   2955c:	d8c01b15 	stw	r3,108(sp)
   29560:	68fff40e 	bge	r13,r3,29534 <__alt_data_end+0xf4029534>
   29564:	1000101e 	bne	r2,zero,295a8 <___vfiprintf_internal_r+0xc9c>
   29568:	e73ffc04 	addi	fp,fp,-16
   2956c:	01000044 	movi	r4,1
   29570:	000b883a 	mov	r5,zero
   29574:	d811883a 	mov	r8,sp
   29578:	3f3ff316 	blt	r7,fp,29548 <__alt_data_end+0xf4029548>
   2957c:	da802417 	ldw	r10,144(sp)
   29580:	1705883a 	add	r2,r2,fp
   29584:	47000115 	stw	fp,4(r8)
   29588:	42800015 	stw	r10,0(r8)
   2958c:	d8801c15 	stw	r2,112(sp)
   29590:	d9001b15 	stw	r4,108(sp)
   29594:	00c001c4 	movi	r3,7
   29598:	19003616 	blt	r3,r4,29674 <___vfiprintf_internal_r+0xd68>
   2959c:	42000204 	addi	r8,r8,8
   295a0:	21000044 	addi	r4,r4,1
   295a4:	003e5706 	br	28f04 <__alt_data_end+0xf4028f04>
   295a8:	d9402117 	ldw	r5,132(sp)
   295ac:	d9002017 	ldw	r4,128(sp)
   295b0:	d9801a04 	addi	r6,sp,104
   295b4:	d9c02b15 	stw	r7,172(sp)
   295b8:	db402a15 	stw	r13,168(sp)
   295bc:	00287f80 	call	287f8 <__sprint_r.part.0>
   295c0:	d9c02b17 	ldw	r7,172(sp)
   295c4:	db402a17 	ldw	r13,168(sp)
   295c8:	1000241e 	bne	r2,zero,2965c <___vfiprintf_internal_r+0xd50>
   295cc:	d9401b17 	ldw	r5,108(sp)
   295d0:	d8801c17 	ldw	r2,112(sp)
   295d4:	d811883a 	mov	r8,sp
   295d8:	29000044 	addi	r4,r5,1
   295dc:	003fd806 	br	29540 <__alt_data_end+0xf4029540>
   295e0:	d9401b17 	ldw	r5,108(sp)
   295e4:	00c000f4 	movhi	r3,3
   295e8:	18c6df04 	addi	r3,r3,7036
   295ec:	d8c02415 	stw	r3,144(sp)
   295f0:	29400044 	addi	r5,r5,1
   295f4:	d8c02417 	ldw	r3,144(sp)
   295f8:	14c5883a 	add	r2,r2,r19
   295fc:	44c00115 	stw	r19,4(r8)
   29600:	40c00015 	stw	r3,0(r8)
   29604:	d8801c15 	stw	r2,112(sp)
   29608:	d9401b15 	stw	r5,108(sp)
   2960c:	00c001c4 	movi	r3,7
   29610:	1940070e 	bge	r3,r5,29630 <___vfiprintf_internal_r+0xd24>
   29614:	103e4826 	beq	r2,zero,28f38 <__alt_data_end+0xf4028f38>
   29618:	d9402117 	ldw	r5,132(sp)
   2961c:	d9002017 	ldw	r4,128(sp)
   29620:	d9801a04 	addi	r6,sp,104
   29624:	00287f80 	call	287f8 <__sprint_r.part.0>
   29628:	10000c1e 	bne	r2,zero,2965c <___vfiprintf_internal_r+0xd50>
   2962c:	d8801c17 	ldw	r2,112(sp)
   29630:	8c80010e 	bge	r17,r18,29638 <___vfiprintf_internal_r+0xd2c>
   29634:	9023883a 	mov	r17,r18
   29638:	da802317 	ldw	r10,140(sp)
   2963c:	5455883a 	add	r10,r10,r17
   29640:	da802315 	stw	r10,140(sp)
   29644:	103e4126 	beq	r2,zero,28f4c <__alt_data_end+0xf4028f4c>
   29648:	d9402117 	ldw	r5,132(sp)
   2964c:	d9002017 	ldw	r4,128(sp)
   29650:	d9801a04 	addi	r6,sp,104
   29654:	00287f80 	call	287f8 <__sprint_r.part.0>
   29658:	103e3c26 	beq	r2,zero,28f4c <__alt_data_end+0xf4028f4c>
   2965c:	dd002117 	ldw	r20,132(sp)
   29660:	a080030b 	ldhu	r2,12(r20)
   29664:	1080100c 	andi	r2,r2,64
   29668:	1001231e 	bne	r2,zero,29af8 <___vfiprintf_internal_r+0x11ec>
   2966c:	d8802317 	ldw	r2,140(sp)
   29670:	003d7b06 	br	28c60 <__alt_data_end+0xf4028c60>
   29674:	1000991e 	bne	r2,zero,298dc <___vfiprintf_internal_r+0xfd0>
   29678:	00c00044 	movi	r3,1
   2967c:	9805883a 	mov	r2,r19
   29680:	dd400015 	stw	r21,0(sp)
   29684:	dcc00115 	stw	r19,4(sp)
   29688:	dcc01c15 	stw	r19,112(sp)
   2968c:	d8c01b15 	stw	r3,108(sp)
   29690:	d811883a 	mov	r8,sp
   29694:	42000204 	addi	r8,r8,8
   29698:	a2c0010c 	andi	r11,r20,4
   2969c:	583fe426 	beq	r11,zero,29630 <__alt_data_end+0xf4029630>
   296a0:	8ca7c83a 	sub	r19,r17,r18
   296a4:	04ffe20e 	bge	zero,r19,29630 <__alt_data_end+0xf4029630>
   296a8:	01c00404 	movi	r7,16
   296ac:	3cffcc0e 	bge	r7,r19,295e0 <__alt_data_end+0xf40295e0>
   296b0:	028000f4 	movhi	r10,3
   296b4:	5286df04 	addi	r10,r10,7036
   296b8:	d9001b17 	ldw	r4,108(sp)
   296bc:	da802415 	stw	r10,144(sp)
   296c0:	382b883a 	mov	r21,r7
   296c4:	050001c4 	movi	r20,7
   296c8:	df002017 	ldw	fp,128(sp)
   296cc:	00000506 	br	296e4 <___vfiprintf_internal_r+0xdd8>
   296d0:	21400084 	addi	r5,r4,2
   296d4:	42000204 	addi	r8,r8,8
   296d8:	1809883a 	mov	r4,r3
   296dc:	9cfffc04 	addi	r19,r19,-16
   296e0:	acffc40e 	bge	r21,r19,295f4 <__alt_data_end+0xf40295f4>
   296e4:	10800404 	addi	r2,r2,16
   296e8:	20c00044 	addi	r3,r4,1
   296ec:	45800015 	stw	r22,0(r8)
   296f0:	45400115 	stw	r21,4(r8)
   296f4:	d8801c15 	stw	r2,112(sp)
   296f8:	d8c01b15 	stw	r3,108(sp)
   296fc:	a0fff40e 	bge	r20,r3,296d0 <__alt_data_end+0xf40296d0>
   29700:	1000041e 	bne	r2,zero,29714 <___vfiprintf_internal_r+0xe08>
   29704:	01400044 	movi	r5,1
   29708:	0009883a 	mov	r4,zero
   2970c:	d811883a 	mov	r8,sp
   29710:	003ff206 	br	296dc <__alt_data_end+0xf40296dc>
   29714:	d9402117 	ldw	r5,132(sp)
   29718:	d9801a04 	addi	r6,sp,104
   2971c:	e009883a 	mov	r4,fp
   29720:	00287f80 	call	287f8 <__sprint_r.part.0>
   29724:	103fcd1e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   29728:	d9001b17 	ldw	r4,108(sp)
   2972c:	d8801c17 	ldw	r2,112(sp)
   29730:	d811883a 	mov	r8,sp
   29734:	21400044 	addi	r5,r4,1
   29738:	003fe806 	br	296dc <__alt_data_end+0xf40296dc>
   2973c:	d9402117 	ldw	r5,132(sp)
   29740:	d9002017 	ldw	r4,128(sp)
   29744:	d9801a04 	addi	r6,sp,104
   29748:	d9c02b15 	stw	r7,172(sp)
   2974c:	db402a15 	stw	r13,168(sp)
   29750:	00287f80 	call	287f8 <__sprint_r.part.0>
   29754:	d9c02b17 	ldw	r7,172(sp)
   29758:	db402a17 	ldw	r13,168(sp)
   2975c:	103fbf1e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   29760:	d9401b17 	ldw	r5,108(sp)
   29764:	d8801c17 	ldw	r2,112(sp)
   29768:	d811883a 	mov	r8,sp
   2976c:	29800044 	addi	r6,r5,1
   29770:	003dc406 	br	28e84 <__alt_data_end+0xf4028e84>
   29774:	1000d21e 	bne	r2,zero,29ac0 <___vfiprintf_internal_r+0x11b4>
   29778:	d8c01d87 	ldb	r3,118(sp)
   2977c:	18009526 	beq	r3,zero,299d4 <___vfiprintf_internal_r+0x10c8>
   29780:	00800044 	movi	r2,1
   29784:	d8c01d84 	addi	r3,sp,118
   29788:	1009883a 	mov	r4,r2
   2978c:	d8c00015 	stw	r3,0(sp)
   29790:	d8800115 	stw	r2,4(sp)
   29794:	d811883a 	mov	r8,sp
   29798:	200b883a 	mov	r5,r4
   2979c:	42000204 	addi	r8,r8,8
   297a0:	21000044 	addi	r4,r4,1
   297a4:	003d9706 	br	28e04 <__alt_data_end+0xf4028e04>
   297a8:	d9001d04 	addi	r4,sp,116
   297ac:	00800084 	movi	r2,2
   297b0:	d9000015 	stw	r4,0(sp)
   297b4:	d8800115 	stw	r2,4(sp)
   297b8:	1809883a 	mov	r4,r3
   297bc:	d811883a 	mov	r8,sp
   297c0:	200b883a 	mov	r5,r4
   297c4:	42000204 	addi	r8,r8,8
   297c8:	21000044 	addi	r4,r4,1
   297cc:	003f4e06 	br	29508 <__alt_data_end+0xf4029508>
   297d0:	d8001d85 	stb	zero,118(sp)
   297d4:	48005016 	blt	r9,zero,29918 <___vfiprintf_internal_r+0x100c>
   297d8:	00ffdfc4 	movi	r3,-129
   297dc:	94c4b03a 	or	r2,r18,r19
   297e0:	a0e8703a 	and	r20,r20,r3
   297e4:	103d4426 	beq	r2,zero,28cf8 <__alt_data_end+0xf4028cf8>
   297e8:	0039883a 	mov	fp,zero
   297ec:	d9002617 	ldw	r4,152(sp)
   297f0:	dd401a04 	addi	r21,sp,104
   297f4:	908003cc 	andi	r2,r18,15
   297f8:	9806973a 	slli	r3,r19,28
   297fc:	2085883a 	add	r2,r4,r2
   29800:	9024d13a 	srli	r18,r18,4
   29804:	10800003 	ldbu	r2,0(r2)
   29808:	9826d13a 	srli	r19,r19,4
   2980c:	ad7fffc4 	addi	r21,r21,-1
   29810:	1ca4b03a 	or	r18,r3,r18
   29814:	a8800005 	stb	r2,0(r21)
   29818:	94c4b03a 	or	r2,r18,r19
   2981c:	103ff51e 	bne	r2,zero,297f4 <__alt_data_end+0xf40297f4>
   29820:	003e5906 	br	29188 <__alt_data_end+0xf4029188>
   29824:	d9402117 	ldw	r5,132(sp)
   29828:	d9002017 	ldw	r4,128(sp)
   2982c:	d9801a04 	addi	r6,sp,104
   29830:	00287f80 	call	287f8 <__sprint_r.part.0>
   29834:	103f891e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   29838:	d8801c17 	ldw	r2,112(sp)
   2983c:	d811883a 	mov	r8,sp
   29840:	003f9506 	br	29698 <__alt_data_end+0xf4029698>
   29844:	d9402117 	ldw	r5,132(sp)
   29848:	d9002017 	ldw	r4,128(sp)
   2984c:	d9801a04 	addi	r6,sp,104
   29850:	00287f80 	call	287f8 <__sprint_r.part.0>
   29854:	103f811e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   29858:	d811883a 	mov	r8,sp
   2985c:	003ced06 	br	28c14 <__alt_data_end+0xf4028c14>
   29860:	d9402117 	ldw	r5,132(sp)
   29864:	d9002017 	ldw	r4,128(sp)
   29868:	d9801a04 	addi	r6,sp,104
   2986c:	da402c15 	stw	r9,176(sp)
   29870:	db802a15 	stw	r14,168(sp)
   29874:	00287f80 	call	287f8 <__sprint_r.part.0>
   29878:	da402c17 	ldw	r9,176(sp)
   2987c:	db802a17 	ldw	r14,168(sp)
   29880:	103f761e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   29884:	d9401b17 	ldw	r5,108(sp)
   29888:	d8801c17 	ldw	r2,112(sp)
   2988c:	d811883a 	mov	r8,sp
   29890:	29000044 	addi	r4,r5,1
   29894:	003d5b06 	br	28e04 <__alt_data_end+0xf4028e04>
   29898:	d9402117 	ldw	r5,132(sp)
   2989c:	d9002017 	ldw	r4,128(sp)
   298a0:	d9801a04 	addi	r6,sp,104
   298a4:	da402c15 	stw	r9,176(sp)
   298a8:	00287f80 	call	287f8 <__sprint_r.part.0>
   298ac:	da402c17 	ldw	r9,176(sp)
   298b0:	103f6a1e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   298b4:	d9401b17 	ldw	r5,108(sp)
   298b8:	d8801c17 	ldw	r2,112(sp)
   298bc:	d811883a 	mov	r8,sp
   298c0:	29000044 	addi	r4,r5,1
   298c4:	003f1006 	br	29508 <__alt_data_end+0xf4029508>
   298c8:	1000c31e 	bne	r2,zero,29bd8 <___vfiprintf_internal_r+0x12cc>
   298cc:	01000044 	movi	r4,1
   298d0:	000b883a 	mov	r5,zero
   298d4:	d811883a 	mov	r8,sp
   298d8:	003f0d06 	br	29510 <__alt_data_end+0xf4029510>
   298dc:	d9402117 	ldw	r5,132(sp)
   298e0:	d9002017 	ldw	r4,128(sp)
   298e4:	d9801a04 	addi	r6,sp,104
   298e8:	00287f80 	call	287f8 <__sprint_r.part.0>
   298ec:	103f5b1e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   298f0:	d9001b17 	ldw	r4,108(sp)
   298f4:	d8801c17 	ldw	r2,112(sp)
   298f8:	d811883a 	mov	r8,sp
   298fc:	21000044 	addi	r4,r4,1
   29900:	003d8006 	br	28f04 <__alt_data_end+0xf4028f04>
   29904:	010000f4 	movhi	r4,3
   29908:	21067a04 	addi	r4,r4,6632
   2990c:	d9002615 	stw	r4,152(sp)
   29910:	d8c02215 	stw	r3,136(sp)
   29914:	1029883a 	mov	r20,r2
   29918:	94c4b03a 	or	r2,r18,r19
   2991c:	103fb21e 	bne	r2,zero,297e8 <__alt_data_end+0xf40297e8>
   29920:	0039883a 	mov	fp,zero
   29924:	00800084 	movi	r2,2
   29928:	003e6b06 	br	292d8 <__alt_data_end+0xf40292d8>
   2992c:	da802217 	ldw	r10,136(sp)
   29930:	d8001d85 	stb	zero,118(sp)
   29934:	0027883a 	mov	r19,zero
   29938:	50800104 	addi	r2,r10,4
   2993c:	54800017 	ldw	r18,0(r10)
   29940:	483e6016 	blt	r9,zero,292c4 <__alt_data_end+0xf40292c4>
   29944:	00ffdfc4 	movi	r3,-129
   29948:	d8802215 	stw	r2,136(sp)
   2994c:	a0e8703a 	and	r20,r20,r3
   29950:	0039883a 	mov	fp,zero
   29954:	903ebb26 	beq	r18,zero,29444 <__alt_data_end+0xf4029444>
   29958:	00800244 	movi	r2,9
   2995c:	14bdee36 	bltu	r2,r18,29118 <__alt_data_end+0xf4029118>
   29960:	003eba06 	br	2944c <__alt_data_end+0xf402944c>
   29964:	00800c04 	movi	r2,48
   29968:	d8c01d45 	stb	r3,117(sp)
   2996c:	d8801d05 	stb	r2,116(sp)
   29970:	d8001d85 	stb	zero,118(sp)
   29974:	a0c00094 	ori	r3,r20,2
   29978:	4800a916 	blt	r9,zero,29c20 <___vfiprintf_internal_r+0x1314>
   2997c:	00bfdfc4 	movi	r2,-129
   29980:	a096703a 	and	r11,r20,r2
   29984:	5d000094 	ori	r20,r11,2
   29988:	0039883a 	mov	fp,zero
   2998c:	003f9706 	br	297ec <__alt_data_end+0xf40297ec>
   29990:	8025883a 	mov	r18,r16
   29994:	003c2e06 	br	28a50 <__alt_data_end+0xf4028a50>
   29998:	008000f4 	movhi	r2,3
   2999c:	10867a04 	addi	r2,r2,6632
   299a0:	0039883a 	mov	fp,zero
   299a4:	d8802615 	stw	r2,152(sp)
   299a8:	003f9006 	br	297ec <__alt_data_end+0xf40297ec>
   299ac:	04a5c83a 	sub	r18,zero,r18
   299b0:	07000b44 	movi	fp,45
   299b4:	9004c03a 	cmpne	r2,r18,zero
   299b8:	04e7c83a 	sub	r19,zero,r19
   299bc:	df001d85 	stb	fp,118(sp)
   299c0:	98a7c83a 	sub	r19,r19,r2
   299c4:	48009f16 	blt	r9,zero,29c44 <___vfiprintf_internal_r+0x1338>
   299c8:	00bfdfc4 	movi	r2,-129
   299cc:	a0a8703a 	and	r20,r20,r2
   299d0:	003dd006 	br	29114 <__alt_data_end+0xf4029114>
   299d4:	70004c26 	beq	r14,zero,29b08 <___vfiprintf_internal_r+0x11fc>
   299d8:	00800084 	movi	r2,2
   299dc:	d8c01d04 	addi	r3,sp,116
   299e0:	d8c00015 	stw	r3,0(sp)
   299e4:	d8800115 	stw	r2,4(sp)
   299e8:	01000044 	movi	r4,1
   299ec:	d811883a 	mov	r8,sp
   299f0:	003f7306 	br	297c0 <__alt_data_end+0xf40297c0>
   299f4:	a080100c 	andi	r2,r20,64
   299f8:	da802217 	ldw	r10,136(sp)
   299fc:	103e0626 	beq	r2,zero,29218 <__alt_data_end+0xf4029218>
   29a00:	5480000f 	ldh	r18,0(r10)
   29a04:	52800104 	addi	r10,r10,4
   29a08:	da802215 	stw	r10,136(sp)
   29a0c:	9027d7fa 	srai	r19,r18,31
   29a10:	9805883a 	mov	r2,r19
   29a14:	003db806 	br	290f8 <__alt_data_end+0xf40290f8>
   29a18:	a080040c 	andi	r2,r20,16
   29a1c:	1000091e 	bne	r2,zero,29a44 <___vfiprintf_internal_r+0x1138>
   29a20:	a2c0100c 	andi	r11,r20,64
   29a24:	58000726 	beq	r11,zero,29a44 <___vfiprintf_internal_r+0x1138>
   29a28:	da802217 	ldw	r10,136(sp)
   29a2c:	50800017 	ldw	r2,0(r10)
   29a30:	52800104 	addi	r10,r10,4
   29a34:	da802215 	stw	r10,136(sp)
   29a38:	da802317 	ldw	r10,140(sp)
   29a3c:	1280000d 	sth	r10,0(r2)
   29a40:	003be706 	br	289e0 <__alt_data_end+0xf40289e0>
   29a44:	da802217 	ldw	r10,136(sp)
   29a48:	50800017 	ldw	r2,0(r10)
   29a4c:	52800104 	addi	r10,r10,4
   29a50:	da802215 	stw	r10,136(sp)
   29a54:	da802317 	ldw	r10,140(sp)
   29a58:	12800015 	stw	r10,0(r2)
   29a5c:	003be006 	br	289e0 <__alt_data_end+0xf40289e0>
   29a60:	a080100c 	andi	r2,r20,64
   29a64:	da802217 	ldw	r10,136(sp)
   29a68:	10003026 	beq	r2,zero,29b2c <___vfiprintf_internal_r+0x1220>
   29a6c:	5480000b 	ldhu	r18,0(r10)
   29a70:	52800104 	addi	r10,r10,4
   29a74:	0027883a 	mov	r19,zero
   29a78:	da802215 	stw	r10,136(sp)
   29a7c:	003d8006 	br	29080 <__alt_data_end+0xf4029080>
   29a80:	80c00007 	ldb	r3,0(r16)
   29a84:	003c0006 	br	28a88 <__alt_data_end+0xf4028a88>
   29a88:	a080100c 	andi	r2,r20,64
   29a8c:	d8001d85 	stb	zero,118(sp)
   29a90:	da802217 	ldw	r10,136(sp)
   29a94:	1000201e 	bne	r2,zero,29b18 <___vfiprintf_internal_r+0x120c>
   29a98:	50800104 	addi	r2,r10,4
   29a9c:	54800017 	ldw	r18,0(r10)
   29aa0:	0027883a 	mov	r19,zero
   29aa4:	483def0e 	bge	r9,zero,29264 <__alt_data_end+0xf4029264>
   29aa8:	94c6b03a 	or	r3,r18,r19
   29aac:	d8802215 	stw	r2,136(sp)
   29ab0:	183d4e1e 	bne	r3,zero,28fec <__alt_data_end+0xf4028fec>
   29ab4:	0039883a 	mov	fp,zero
   29ab8:	0005883a 	mov	r2,zero
   29abc:	003e0606 	br	292d8 <__alt_data_end+0xf40292d8>
   29ac0:	d9402117 	ldw	r5,132(sp)
   29ac4:	d9002017 	ldw	r4,128(sp)
   29ac8:	d9801a04 	addi	r6,sp,104
   29acc:	da402c15 	stw	r9,176(sp)
   29ad0:	db802a15 	stw	r14,168(sp)
   29ad4:	00287f80 	call	287f8 <__sprint_r.part.0>
   29ad8:	da402c17 	ldw	r9,176(sp)
   29adc:	db802a17 	ldw	r14,168(sp)
   29ae0:	103ede1e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   29ae4:	d9401b17 	ldw	r5,108(sp)
   29ae8:	d8801c17 	ldw	r2,112(sp)
   29aec:	d811883a 	mov	r8,sp
   29af0:	29000044 	addi	r4,r5,1
   29af4:	003e7406 	br	294c8 <__alt_data_end+0xf40294c8>
   29af8:	00bfffc4 	movi	r2,-1
   29afc:	003c5806 	br	28c60 <__alt_data_end+0xf4028c60>
   29b00:	d811883a 	mov	r8,sp
   29b04:	003ee806 	br	296a8 <__alt_data_end+0xf40296a8>
   29b08:	000b883a 	mov	r5,zero
   29b0c:	01000044 	movi	r4,1
   29b10:	d811883a 	mov	r8,sp
   29b14:	003e7c06 	br	29508 <__alt_data_end+0xf4029508>
   29b18:	50800104 	addi	r2,r10,4
   29b1c:	5480000b 	ldhu	r18,0(r10)
   29b20:	0027883a 	mov	r19,zero
   29b24:	483dcf0e 	bge	r9,zero,29264 <__alt_data_end+0xf4029264>
   29b28:	003fdf06 	br	29aa8 <__alt_data_end+0xf4029aa8>
   29b2c:	54800017 	ldw	r18,0(r10)
   29b30:	52800104 	addi	r10,r10,4
   29b34:	0027883a 	mov	r19,zero
   29b38:	da802215 	stw	r10,136(sp)
   29b3c:	003d5006 	br	29080 <__alt_data_end+0xf4029080>
   29b40:	50800104 	addi	r2,r10,4
   29b44:	5480000b 	ldhu	r18,0(r10)
   29b48:	0027883a 	mov	r19,zero
   29b4c:	483f7d0e 	bge	r9,zero,29944 <__alt_data_end+0xf4029944>
   29b50:	003ddc06 	br	292c4 <__alt_data_end+0xf40292c4>
   29b54:	d8c02215 	stw	r3,136(sp)
   29b58:	0039883a 	mov	fp,zero
   29b5c:	003ddb06 	br	292cc <__alt_data_end+0xf40292cc>
   29b60:	028000f4 	movhi	r10,3
   29b64:	5286db04 	addi	r10,r10,7020
   29b68:	da802415 	stw	r10,144(sp)
   29b6c:	003e8306 	br	2957c <__alt_data_end+0xf402957c>
   29b70:	d8801c17 	ldw	r2,112(sp)
   29b74:	dd002117 	ldw	r20,132(sp)
   29b78:	103eb926 	beq	r2,zero,29660 <__alt_data_end+0xf4029660>
   29b7c:	d9002017 	ldw	r4,128(sp)
   29b80:	d9801a04 	addi	r6,sp,104
   29b84:	a00b883a 	mov	r5,r20
   29b88:	00287f80 	call	287f8 <__sprint_r.part.0>
   29b8c:	003eb406 	br	29660 <__alt_data_end+0xf4029660>
   29b90:	80c00043 	ldbu	r3,1(r16)
   29b94:	a5000814 	ori	r20,r20,32
   29b98:	84000044 	addi	r16,r16,1
   29b9c:	18c03fcc 	andi	r3,r3,255
   29ba0:	18c0201c 	xori	r3,r3,128
   29ba4:	18ffe004 	addi	r3,r3,-128
   29ba8:	003bb706 	br	28a88 <__alt_data_end+0xf4028a88>
   29bac:	a809883a 	mov	r4,r21
   29bb0:	d8c02a15 	stw	r3,168(sp)
   29bb4:	da002b15 	stw	r8,172(sp)
   29bb8:	00212600 	call	21260 <strlen>
   29bbc:	d8c02a17 	ldw	r3,168(sp)
   29bc0:	1027883a 	mov	r19,r2
   29bc4:	df001d83 	ldbu	fp,118(sp)
   29bc8:	d8c02215 	stw	r3,136(sp)
   29bcc:	0013883a 	mov	r9,zero
   29bd0:	da002b17 	ldw	r8,172(sp)
   29bd4:	003c4d06 	br	28d0c <__alt_data_end+0xf4028d0c>
   29bd8:	d9402117 	ldw	r5,132(sp)
   29bdc:	d9002017 	ldw	r4,128(sp)
   29be0:	d9801a04 	addi	r6,sp,104
   29be4:	da402c15 	stw	r9,176(sp)
   29be8:	00287f80 	call	287f8 <__sprint_r.part.0>
   29bec:	da402c17 	ldw	r9,176(sp)
   29bf0:	103e9a1e 	bne	r2,zero,2965c <__alt_data_end+0xf402965c>
   29bf4:	d9401b17 	ldw	r5,108(sp)
   29bf8:	d8801c17 	ldw	r2,112(sp)
   29bfc:	d811883a 	mov	r8,sp
   29c00:	29000044 	addi	r4,r5,1
   29c04:	003e4206 	br	29510 <__alt_data_end+0xf4029510>
   29c08:	d9401b17 	ldw	r5,108(sp)
   29c0c:	010000f4 	movhi	r4,3
   29c10:	2106df04 	addi	r4,r4,7036
   29c14:	d9002415 	stw	r4,144(sp)
   29c18:	29400044 	addi	r5,r5,1
   29c1c:	003c6d06 	br	28dd4 <__alt_data_end+0xf4028dd4>
   29c20:	0039883a 	mov	fp,zero
   29c24:	00800084 	movi	r2,2
   29c28:	10803fcc 	andi	r2,r2,255
   29c2c:	01000044 	movi	r4,1
   29c30:	11001e26 	beq	r2,r4,29cac <___vfiprintf_internal_r+0x13a0>
   29c34:	01000084 	movi	r4,2
   29c38:	11001e1e 	bne	r2,r4,29cb4 <___vfiprintf_internal_r+0x13a8>
   29c3c:	1829883a 	mov	r20,r3
   29c40:	003eea06 	br	297ec <__alt_data_end+0xf40297ec>
   29c44:	a007883a 	mov	r3,r20
   29c48:	00800044 	movi	r2,1
   29c4c:	003ff606 	br	29c28 <__alt_data_end+0xf4029c28>
   29c50:	00800184 	movi	r2,6
   29c54:	1240012e 	bgeu	r2,r9,29c5c <___vfiprintf_internal_r+0x1350>
   29c58:	1013883a 	mov	r9,r2
   29c5c:	4827883a 	mov	r19,r9
   29c60:	4825883a 	mov	r18,r9
   29c64:	48001516 	blt	r9,zero,29cbc <___vfiprintf_internal_r+0x13b0>
   29c68:	054000f4 	movhi	r21,3
   29c6c:	d8c02215 	stw	r3,136(sp)
   29c70:	ad467f04 	addi	r21,r21,6652
   29c74:	003d1406 	br	290c8 <__alt_data_end+0xf40290c8>
   29c78:	028000f4 	movhi	r10,3
   29c7c:	5286db04 	addi	r10,r10,7020
   29c80:	da802415 	stw	r10,144(sp)
   29c84:	200d883a 	mov	r6,r4
   29c88:	003c9106 	br	28ed0 <__alt_data_end+0xf4028ed0>
   29c8c:	5021883a 	mov	r16,r10
   29c90:	0013883a 	mov	r9,zero
   29c94:	003b7d06 	br	28a8c <__alt_data_end+0xf4028a8c>
   29c98:	4827883a 	mov	r19,r9
   29c9c:	df001d83 	ldbu	fp,118(sp)
   29ca0:	d8c02215 	stw	r3,136(sp)
   29ca4:	0013883a 	mov	r9,zero
   29ca8:	003c1806 	br	28d0c <__alt_data_end+0xf4028d0c>
   29cac:	1829883a 	mov	r20,r3
   29cb0:	003d1806 	br	29114 <__alt_data_end+0xf4029114>
   29cb4:	1829883a 	mov	r20,r3
   29cb8:	003ccd06 	br	28ff0 <__alt_data_end+0xf4028ff0>
   29cbc:	0025883a 	mov	r18,zero
   29cc0:	003fe906 	br	29c68 <__alt_data_end+0xf4029c68>
   29cc4:	d8802217 	ldw	r2,136(sp)
   29cc8:	80c00043 	ldbu	r3,1(r16)
   29ccc:	5021883a 	mov	r16,r10
   29cd0:	12400017 	ldw	r9,0(r2)
   29cd4:	10800104 	addi	r2,r2,4
   29cd8:	d8802215 	stw	r2,136(sp)
   29cdc:	483faf0e 	bge	r9,zero,29b9c <__alt_data_end+0xf4029b9c>
   29ce0:	18c03fcc 	andi	r3,r3,255
   29ce4:	18c0201c 	xori	r3,r3,128
   29ce8:	027fffc4 	movi	r9,-1
   29cec:	18ffe004 	addi	r3,r3,-128
   29cf0:	003b6506 	br	28a88 <__alt_data_end+0xf4028a88>
   29cf4:	d9c01d85 	stb	r7,118(sp)
   29cf8:	003ca006 	br	28f7c <__alt_data_end+0xf4028f7c>
   29cfc:	d9c01d85 	stb	r7,118(sp)
   29d00:	003cad06 	br	28fb8 <__alt_data_end+0xf4028fb8>
   29d04:	d9c01d85 	stb	r7,118(sp)
   29d08:	003d7d06 	br	29300 <__alt_data_end+0xf4029300>
   29d0c:	d9c01d85 	stb	r7,118(sp)
   29d10:	003d5f06 	br	29290 <__alt_data_end+0xf4029290>
   29d14:	a080004c 	andi	r2,r20,1
   29d18:	0039883a 	mov	fp,zero
   29d1c:	10000526 	beq	r2,zero,29d34 <___vfiprintf_internal_r+0x1428>
   29d20:	00800c04 	movi	r2,48
   29d24:	d88019c5 	stb	r2,103(sp)
   29d28:	dcc02717 	ldw	r19,156(sp)
   29d2c:	dd4019c4 	addi	r21,sp,103
   29d30:	003bf606 	br	28d0c <__alt_data_end+0xf4028d0c>
   29d34:	0027883a 	mov	r19,zero
   29d38:	dd401a04 	addi	r21,sp,104
   29d3c:	003bf306 	br	28d0c <__alt_data_end+0xf4028d0c>
   29d40:	d9c01d85 	stb	r7,118(sp)
   29d44:	003dc806 	br	29468 <__alt_data_end+0xf4029468>
   29d48:	d9c01d85 	stb	r7,118(sp)
   29d4c:	003d3a06 	br	29238 <__alt_data_end+0xf4029238>
   29d50:	d9c01d85 	stb	r7,118(sp)
   29d54:	003d2a06 	br	29200 <__alt_data_end+0xf4029200>
   29d58:	d9c01d85 	stb	r7,118(sp)
   29d5c:	003cde06 	br	290d8 <__alt_data_end+0xf40290d8>
   29d60:	d9c01d85 	stb	r7,118(sp)
   29d64:	003cbc06 	br	29058 <__alt_data_end+0xf4029058>

00029d68 <__vfiprintf_internal>:
   29d68:	008000f4 	movhi	r2,3
   29d6c:	108e0b04 	addi	r2,r2,14380
   29d70:	300f883a 	mov	r7,r6
   29d74:	280d883a 	mov	r6,r5
   29d78:	200b883a 	mov	r5,r4
   29d7c:	11000017 	ldw	r4,0(r2)
   29d80:	002890c1 	jmpi	2890c <___vfiprintf_internal_r>

00029d84 <__sbprintf>:
   29d84:	2880030b 	ldhu	r2,12(r5)
   29d88:	2ac01917 	ldw	r11,100(r5)
   29d8c:	2a80038b 	ldhu	r10,14(r5)
   29d90:	2a400717 	ldw	r9,28(r5)
   29d94:	2a000917 	ldw	r8,36(r5)
   29d98:	defee204 	addi	sp,sp,-1144
   29d9c:	00c10004 	movi	r3,1024
   29da0:	dc011a15 	stw	r16,1128(sp)
   29da4:	10bfff4c 	andi	r2,r2,65533
   29da8:	2821883a 	mov	r16,r5
   29dac:	d8cb883a 	add	r5,sp,r3
   29db0:	dc811c15 	stw	r18,1136(sp)
   29db4:	dc411b15 	stw	r17,1132(sp)
   29db8:	dfc11d15 	stw	ra,1140(sp)
   29dbc:	2025883a 	mov	r18,r4
   29dc0:	d881030d 	sth	r2,1036(sp)
   29dc4:	dac11915 	stw	r11,1124(sp)
   29dc8:	da81038d 	sth	r10,1038(sp)
   29dcc:	da410715 	stw	r9,1052(sp)
   29dd0:	da010915 	stw	r8,1060(sp)
   29dd4:	dec10015 	stw	sp,1024(sp)
   29dd8:	dec10415 	stw	sp,1040(sp)
   29ddc:	d8c10215 	stw	r3,1032(sp)
   29de0:	d8c10515 	stw	r3,1044(sp)
   29de4:	d8010615 	stw	zero,1048(sp)
   29de8:	002890c0 	call	2890c <___vfiprintf_internal_r>
   29dec:	1023883a 	mov	r17,r2
   29df0:	10000416 	blt	r2,zero,29e04 <__sbprintf+0x80>
   29df4:	d9410004 	addi	r5,sp,1024
   29df8:	9009883a 	mov	r4,r18
   29dfc:	00251c00 	call	251c0 <_fflush_r>
   29e00:	10000d1e 	bne	r2,zero,29e38 <__sbprintf+0xb4>
   29e04:	d881030b 	ldhu	r2,1036(sp)
   29e08:	1080100c 	andi	r2,r2,64
   29e0c:	10000326 	beq	r2,zero,29e1c <__sbprintf+0x98>
   29e10:	8080030b 	ldhu	r2,12(r16)
   29e14:	10801014 	ori	r2,r2,64
   29e18:	8080030d 	sth	r2,12(r16)
   29e1c:	8805883a 	mov	r2,r17
   29e20:	dfc11d17 	ldw	ra,1140(sp)
   29e24:	dc811c17 	ldw	r18,1136(sp)
   29e28:	dc411b17 	ldw	r17,1132(sp)
   29e2c:	dc011a17 	ldw	r16,1128(sp)
   29e30:	dec11e04 	addi	sp,sp,1144
   29e34:	f800283a 	ret
   29e38:	047fffc4 	movi	r17,-1
   29e3c:	003ff106 	br	29e04 <__alt_data_end+0xf4029e04>

00029e40 <_write_r>:
   29e40:	defffd04 	addi	sp,sp,-12
   29e44:	2805883a 	mov	r2,r5
   29e48:	dc000015 	stw	r16,0(sp)
   29e4c:	040000f4 	movhi	r16,3
   29e50:	dc400115 	stw	r17,4(sp)
   29e54:	300b883a 	mov	r5,r6
   29e58:	84153f04 	addi	r16,r16,21756
   29e5c:	2023883a 	mov	r17,r4
   29e60:	380d883a 	mov	r6,r7
   29e64:	1009883a 	mov	r4,r2
   29e68:	dfc00215 	stw	ra,8(sp)
   29e6c:	80000015 	stw	zero,0(r16)
   29e70:	002e2280 	call	2e228 <write>
   29e74:	00ffffc4 	movi	r3,-1
   29e78:	10c00526 	beq	r2,r3,29e90 <_write_r+0x50>
   29e7c:	dfc00217 	ldw	ra,8(sp)
   29e80:	dc400117 	ldw	r17,4(sp)
   29e84:	dc000017 	ldw	r16,0(sp)
   29e88:	dec00304 	addi	sp,sp,12
   29e8c:	f800283a 	ret
   29e90:	80c00017 	ldw	r3,0(r16)
   29e94:	183ff926 	beq	r3,zero,29e7c <__alt_data_end+0xf4029e7c>
   29e98:	88c00015 	stw	r3,0(r17)
   29e9c:	003ff706 	br	29e7c <__alt_data_end+0xf4029e7c>

00029ea0 <_close_r>:
   29ea0:	defffd04 	addi	sp,sp,-12
   29ea4:	dc000015 	stw	r16,0(sp)
   29ea8:	040000f4 	movhi	r16,3
   29eac:	dc400115 	stw	r17,4(sp)
   29eb0:	84153f04 	addi	r16,r16,21756
   29eb4:	2023883a 	mov	r17,r4
   29eb8:	2809883a 	mov	r4,r5
   29ebc:	dfc00215 	stw	ra,8(sp)
   29ec0:	80000015 	stw	zero,0(r16)
   29ec4:	002da180 	call	2da18 <close>
   29ec8:	00ffffc4 	movi	r3,-1
   29ecc:	10c00526 	beq	r2,r3,29ee4 <_close_r+0x44>
   29ed0:	dfc00217 	ldw	ra,8(sp)
   29ed4:	dc400117 	ldw	r17,4(sp)
   29ed8:	dc000017 	ldw	r16,0(sp)
   29edc:	dec00304 	addi	sp,sp,12
   29ee0:	f800283a 	ret
   29ee4:	80c00017 	ldw	r3,0(r16)
   29ee8:	183ff926 	beq	r3,zero,29ed0 <__alt_data_end+0xf4029ed0>
   29eec:	88c00015 	stw	r3,0(r17)
   29ef0:	003ff706 	br	29ed0 <__alt_data_end+0xf4029ed0>

00029ef4 <_calloc_r>:
   29ef4:	298b383a 	mul	r5,r5,r6
   29ef8:	defffe04 	addi	sp,sp,-8
   29efc:	dfc00115 	stw	ra,4(sp)
   29f00:	dc000015 	stw	r16,0(sp)
   29f04:	00262fc0 	call	262fc <_malloc_r>
   29f08:	10002926 	beq	r2,zero,29fb0 <_calloc_r+0xbc>
   29f0c:	11bfff17 	ldw	r6,-4(r2)
   29f10:	1021883a 	mov	r16,r2
   29f14:	00bfff04 	movi	r2,-4
   29f18:	308c703a 	and	r6,r6,r2
   29f1c:	00c00904 	movi	r3,36
   29f20:	308d883a 	add	r6,r6,r2
   29f24:	19801636 	bltu	r3,r6,29f80 <_calloc_r+0x8c>
   29f28:	008004c4 	movi	r2,19
   29f2c:	11800b2e 	bgeu	r2,r6,29f5c <_calloc_r+0x68>
   29f30:	80000015 	stw	zero,0(r16)
   29f34:	80000115 	stw	zero,4(r16)
   29f38:	008006c4 	movi	r2,27
   29f3c:	11801a2e 	bgeu	r2,r6,29fa8 <_calloc_r+0xb4>
   29f40:	80000215 	stw	zero,8(r16)
   29f44:	80000315 	stw	zero,12(r16)
   29f48:	30c0151e 	bne	r6,r3,29fa0 <_calloc_r+0xac>
   29f4c:	80000415 	stw	zero,16(r16)
   29f50:	80800604 	addi	r2,r16,24
   29f54:	80000515 	stw	zero,20(r16)
   29f58:	00000106 	br	29f60 <_calloc_r+0x6c>
   29f5c:	8005883a 	mov	r2,r16
   29f60:	10000015 	stw	zero,0(r2)
   29f64:	10000115 	stw	zero,4(r2)
   29f68:	10000215 	stw	zero,8(r2)
   29f6c:	8005883a 	mov	r2,r16
   29f70:	dfc00117 	ldw	ra,4(sp)
   29f74:	dc000017 	ldw	r16,0(sp)
   29f78:	dec00204 	addi	sp,sp,8
   29f7c:	f800283a 	ret
   29f80:	000b883a 	mov	r5,zero
   29f84:	8009883a 	mov	r4,r16
   29f88:	0026e900 	call	26e90 <memset>
   29f8c:	8005883a 	mov	r2,r16
   29f90:	dfc00117 	ldw	ra,4(sp)
   29f94:	dc000017 	ldw	r16,0(sp)
   29f98:	dec00204 	addi	sp,sp,8
   29f9c:	f800283a 	ret
   29fa0:	80800404 	addi	r2,r16,16
   29fa4:	003fee06 	br	29f60 <__alt_data_end+0xf4029f60>
   29fa8:	80800204 	addi	r2,r16,8
   29fac:	003fec06 	br	29f60 <__alt_data_end+0xf4029f60>
   29fb0:	0005883a 	mov	r2,zero
   29fb4:	003fee06 	br	29f70 <__alt_data_end+0xf4029f70>

00029fb8 <_fclose_r>:
   29fb8:	28003926 	beq	r5,zero,2a0a0 <_fclose_r+0xe8>
   29fbc:	defffc04 	addi	sp,sp,-16
   29fc0:	dc400115 	stw	r17,4(sp)
   29fc4:	dc000015 	stw	r16,0(sp)
   29fc8:	dfc00315 	stw	ra,12(sp)
   29fcc:	dc800215 	stw	r18,8(sp)
   29fd0:	2023883a 	mov	r17,r4
   29fd4:	2821883a 	mov	r16,r5
   29fd8:	20000226 	beq	r4,zero,29fe4 <_fclose_r+0x2c>
   29fdc:	20800e17 	ldw	r2,56(r4)
   29fe0:	10002726 	beq	r2,zero,2a080 <_fclose_r+0xc8>
   29fe4:	8080030f 	ldh	r2,12(r16)
   29fe8:	1000071e 	bne	r2,zero,2a008 <_fclose_r+0x50>
   29fec:	0005883a 	mov	r2,zero
   29ff0:	dfc00317 	ldw	ra,12(sp)
   29ff4:	dc800217 	ldw	r18,8(sp)
   29ff8:	dc400117 	ldw	r17,4(sp)
   29ffc:	dc000017 	ldw	r16,0(sp)
   2a000:	dec00404 	addi	sp,sp,16
   2a004:	f800283a 	ret
   2a008:	800b883a 	mov	r5,r16
   2a00c:	8809883a 	mov	r4,r17
   2a010:	0024fa40 	call	24fa4 <__sflush_r>
   2a014:	1025883a 	mov	r18,r2
   2a018:	80800b17 	ldw	r2,44(r16)
   2a01c:	10000426 	beq	r2,zero,2a030 <_fclose_r+0x78>
   2a020:	81400717 	ldw	r5,28(r16)
   2a024:	8809883a 	mov	r4,r17
   2a028:	103ee83a 	callr	r2
   2a02c:	10001616 	blt	r2,zero,2a088 <_fclose_r+0xd0>
   2a030:	8080030b 	ldhu	r2,12(r16)
   2a034:	1080200c 	andi	r2,r2,128
   2a038:	1000151e 	bne	r2,zero,2a090 <_fclose_r+0xd8>
   2a03c:	81400c17 	ldw	r5,48(r16)
   2a040:	28000526 	beq	r5,zero,2a058 <_fclose_r+0xa0>
   2a044:	80801004 	addi	r2,r16,64
   2a048:	28800226 	beq	r5,r2,2a054 <_fclose_r+0x9c>
   2a04c:	8809883a 	mov	r4,r17
   2a050:	00257100 	call	25710 <_free_r>
   2a054:	80000c15 	stw	zero,48(r16)
   2a058:	81401117 	ldw	r5,68(r16)
   2a05c:	28000326 	beq	r5,zero,2a06c <_fclose_r+0xb4>
   2a060:	8809883a 	mov	r4,r17
   2a064:	00257100 	call	25710 <_free_r>
   2a068:	80001115 	stw	zero,68(r16)
   2a06c:	00255ac0 	call	255ac <__sfp_lock_acquire>
   2a070:	8000030d 	sth	zero,12(r16)
   2a074:	00255b00 	call	255b0 <__sfp_lock_release>
   2a078:	9005883a 	mov	r2,r18
   2a07c:	003fdc06 	br	29ff0 <__alt_data_end+0xf4029ff0>
   2a080:	002559c0 	call	2559c <__sinit>
   2a084:	003fd706 	br	29fe4 <__alt_data_end+0xf4029fe4>
   2a088:	04bfffc4 	movi	r18,-1
   2a08c:	003fe806 	br	2a030 <__alt_data_end+0xf402a030>
   2a090:	81400417 	ldw	r5,16(r16)
   2a094:	8809883a 	mov	r4,r17
   2a098:	00257100 	call	25710 <_free_r>
   2a09c:	003fe706 	br	2a03c <__alt_data_end+0xf402a03c>
   2a0a0:	0005883a 	mov	r2,zero
   2a0a4:	f800283a 	ret

0002a0a8 <fclose>:
   2a0a8:	008000f4 	movhi	r2,3
   2a0ac:	108e0b04 	addi	r2,r2,14380
   2a0b0:	200b883a 	mov	r5,r4
   2a0b4:	11000017 	ldw	r4,0(r2)
   2a0b8:	0029fb81 	jmpi	29fb8 <_fclose_r>

0002a0bc <__fputwc>:
   2a0bc:	defff804 	addi	sp,sp,-32
   2a0c0:	dcc00415 	stw	r19,16(sp)
   2a0c4:	dc800315 	stw	r18,12(sp)
   2a0c8:	dc000115 	stw	r16,4(sp)
   2a0cc:	dfc00715 	stw	ra,28(sp)
   2a0d0:	dd400615 	stw	r21,24(sp)
   2a0d4:	dd000515 	stw	r20,20(sp)
   2a0d8:	dc400215 	stw	r17,8(sp)
   2a0dc:	2027883a 	mov	r19,r4
   2a0e0:	2825883a 	mov	r18,r5
   2a0e4:	3021883a 	mov	r16,r6
   2a0e8:	00260ec0 	call	260ec <__locale_mb_cur_max>
   2a0ec:	00c00044 	movi	r3,1
   2a0f0:	10c03e26 	beq	r2,r3,2a1ec <__fputwc+0x130>
   2a0f4:	81c01704 	addi	r7,r16,92
   2a0f8:	900d883a 	mov	r6,r18
   2a0fc:	d80b883a 	mov	r5,sp
   2a100:	9809883a 	mov	r4,r19
   2a104:	002a58c0 	call	2a58c <_wcrtomb_r>
   2a108:	1029883a 	mov	r20,r2
   2a10c:	00bfffc4 	movi	r2,-1
   2a110:	a0802026 	beq	r20,r2,2a194 <__fputwc+0xd8>
   2a114:	d9400003 	ldbu	r5,0(sp)
   2a118:	a0001c26 	beq	r20,zero,2a18c <__fputwc+0xd0>
   2a11c:	0023883a 	mov	r17,zero
   2a120:	05400284 	movi	r21,10
   2a124:	00000906 	br	2a14c <__fputwc+0x90>
   2a128:	80800017 	ldw	r2,0(r16)
   2a12c:	11400005 	stb	r5,0(r2)
   2a130:	80c00017 	ldw	r3,0(r16)
   2a134:	18c00044 	addi	r3,r3,1
   2a138:	80c00015 	stw	r3,0(r16)
   2a13c:	8c400044 	addi	r17,r17,1
   2a140:	dc45883a 	add	r2,sp,r17
   2a144:	8d00112e 	bgeu	r17,r20,2a18c <__fputwc+0xd0>
   2a148:	11400003 	ldbu	r5,0(r2)
   2a14c:	80c00217 	ldw	r3,8(r16)
   2a150:	18ffffc4 	addi	r3,r3,-1
   2a154:	80c00215 	stw	r3,8(r16)
   2a158:	183ff30e 	bge	r3,zero,2a128 <__alt_data_end+0xf402a128>
   2a15c:	80800617 	ldw	r2,24(r16)
   2a160:	18801916 	blt	r3,r2,2a1c8 <__fputwc+0x10c>
   2a164:	80800017 	ldw	r2,0(r16)
   2a168:	11400005 	stb	r5,0(r2)
   2a16c:	80800017 	ldw	r2,0(r16)
   2a170:	10c00003 	ldbu	r3,0(r2)
   2a174:	10800044 	addi	r2,r2,1
   2a178:	1d402326 	beq	r3,r21,2a208 <__fputwc+0x14c>
   2a17c:	80800015 	stw	r2,0(r16)
   2a180:	8c400044 	addi	r17,r17,1
   2a184:	dc45883a 	add	r2,sp,r17
   2a188:	8d3fef36 	bltu	r17,r20,2a148 <__alt_data_end+0xf402a148>
   2a18c:	9005883a 	mov	r2,r18
   2a190:	00000406 	br	2a1a4 <__fputwc+0xe8>
   2a194:	80c0030b 	ldhu	r3,12(r16)
   2a198:	a005883a 	mov	r2,r20
   2a19c:	18c01014 	ori	r3,r3,64
   2a1a0:	80c0030d 	sth	r3,12(r16)
   2a1a4:	dfc00717 	ldw	ra,28(sp)
   2a1a8:	dd400617 	ldw	r21,24(sp)
   2a1ac:	dd000517 	ldw	r20,20(sp)
   2a1b0:	dcc00417 	ldw	r19,16(sp)
   2a1b4:	dc800317 	ldw	r18,12(sp)
   2a1b8:	dc400217 	ldw	r17,8(sp)
   2a1bc:	dc000117 	ldw	r16,4(sp)
   2a1c0:	dec00804 	addi	sp,sp,32
   2a1c4:	f800283a 	ret
   2a1c8:	800d883a 	mov	r6,r16
   2a1cc:	29403fcc 	andi	r5,r5,255
   2a1d0:	9809883a 	mov	r4,r19
   2a1d4:	002a4340 	call	2a434 <__swbuf_r>
   2a1d8:	10bfffe0 	cmpeqi	r2,r2,-1
   2a1dc:	10803fcc 	andi	r2,r2,255
   2a1e0:	103fd626 	beq	r2,zero,2a13c <__alt_data_end+0xf402a13c>
   2a1e4:	00bfffc4 	movi	r2,-1
   2a1e8:	003fee06 	br	2a1a4 <__alt_data_end+0xf402a1a4>
   2a1ec:	90ffffc4 	addi	r3,r18,-1
   2a1f0:	01003f84 	movi	r4,254
   2a1f4:	20ffbf36 	bltu	r4,r3,2a0f4 <__alt_data_end+0xf402a0f4>
   2a1f8:	900b883a 	mov	r5,r18
   2a1fc:	dc800005 	stb	r18,0(sp)
   2a200:	1029883a 	mov	r20,r2
   2a204:	003fc506 	br	2a11c <__alt_data_end+0xf402a11c>
   2a208:	800d883a 	mov	r6,r16
   2a20c:	a80b883a 	mov	r5,r21
   2a210:	9809883a 	mov	r4,r19
   2a214:	002a4340 	call	2a434 <__swbuf_r>
   2a218:	10bfffe0 	cmpeqi	r2,r2,-1
   2a21c:	003fef06 	br	2a1dc <__alt_data_end+0xf402a1dc>

0002a220 <_fputwc_r>:
   2a220:	3080030b 	ldhu	r2,12(r6)
   2a224:	10c8000c 	andi	r3,r2,8192
   2a228:	1800051e 	bne	r3,zero,2a240 <_fputwc_r+0x20>
   2a22c:	30c01917 	ldw	r3,100(r6)
   2a230:	10880014 	ori	r2,r2,8192
   2a234:	3080030d 	sth	r2,12(r6)
   2a238:	18880014 	ori	r2,r3,8192
   2a23c:	30801915 	stw	r2,100(r6)
   2a240:	002a0bc1 	jmpi	2a0bc <__fputwc>

0002a244 <fputwc>:
   2a244:	008000f4 	movhi	r2,3
   2a248:	defffc04 	addi	sp,sp,-16
   2a24c:	108e0b04 	addi	r2,r2,14380
   2a250:	dc000115 	stw	r16,4(sp)
   2a254:	14000017 	ldw	r16,0(r2)
   2a258:	dc400215 	stw	r17,8(sp)
   2a25c:	dfc00315 	stw	ra,12(sp)
   2a260:	2023883a 	mov	r17,r4
   2a264:	80000226 	beq	r16,zero,2a270 <fputwc+0x2c>
   2a268:	80800e17 	ldw	r2,56(r16)
   2a26c:	10001026 	beq	r2,zero,2a2b0 <fputwc+0x6c>
   2a270:	2880030b 	ldhu	r2,12(r5)
   2a274:	10c8000c 	andi	r3,r2,8192
   2a278:	1800051e 	bne	r3,zero,2a290 <fputwc+0x4c>
   2a27c:	28c01917 	ldw	r3,100(r5)
   2a280:	10880014 	ori	r2,r2,8192
   2a284:	2880030d 	sth	r2,12(r5)
   2a288:	18880014 	ori	r2,r3,8192
   2a28c:	28801915 	stw	r2,100(r5)
   2a290:	280d883a 	mov	r6,r5
   2a294:	8009883a 	mov	r4,r16
   2a298:	880b883a 	mov	r5,r17
   2a29c:	dfc00317 	ldw	ra,12(sp)
   2a2a0:	dc400217 	ldw	r17,8(sp)
   2a2a4:	dc000117 	ldw	r16,4(sp)
   2a2a8:	dec00404 	addi	sp,sp,16
   2a2ac:	002a0bc1 	jmpi	2a0bc <__fputwc>
   2a2b0:	8009883a 	mov	r4,r16
   2a2b4:	d9400015 	stw	r5,0(sp)
   2a2b8:	002559c0 	call	2559c <__sinit>
   2a2bc:	d9400017 	ldw	r5,0(sp)
   2a2c0:	003feb06 	br	2a270 <__alt_data_end+0xf402a270>

0002a2c4 <_fstat_r>:
   2a2c4:	defffd04 	addi	sp,sp,-12
   2a2c8:	2805883a 	mov	r2,r5
   2a2cc:	dc000015 	stw	r16,0(sp)
   2a2d0:	040000f4 	movhi	r16,3
   2a2d4:	dc400115 	stw	r17,4(sp)
   2a2d8:	84153f04 	addi	r16,r16,21756
   2a2dc:	2023883a 	mov	r17,r4
   2a2e0:	300b883a 	mov	r5,r6
   2a2e4:	1009883a 	mov	r4,r2
   2a2e8:	dfc00215 	stw	ra,8(sp)
   2a2ec:	80000015 	stw	zero,0(r16)
   2a2f0:	002db500 	call	2db50 <fstat>
   2a2f4:	00ffffc4 	movi	r3,-1
   2a2f8:	10c00526 	beq	r2,r3,2a310 <_fstat_r+0x4c>
   2a2fc:	dfc00217 	ldw	ra,8(sp)
   2a300:	dc400117 	ldw	r17,4(sp)
   2a304:	dc000017 	ldw	r16,0(sp)
   2a308:	dec00304 	addi	sp,sp,12
   2a30c:	f800283a 	ret
   2a310:	80c00017 	ldw	r3,0(r16)
   2a314:	183ff926 	beq	r3,zero,2a2fc <__alt_data_end+0xf402a2fc>
   2a318:	88c00015 	stw	r3,0(r17)
   2a31c:	003ff706 	br	2a2fc <__alt_data_end+0xf402a2fc>

0002a320 <_isatty_r>:
   2a320:	defffd04 	addi	sp,sp,-12
   2a324:	dc000015 	stw	r16,0(sp)
   2a328:	040000f4 	movhi	r16,3
   2a32c:	dc400115 	stw	r17,4(sp)
   2a330:	84153f04 	addi	r16,r16,21756
   2a334:	2023883a 	mov	r17,r4
   2a338:	2809883a 	mov	r4,r5
   2a33c:	dfc00215 	stw	ra,8(sp)
   2a340:	80000015 	stw	zero,0(r16)
   2a344:	002dc3c0 	call	2dc3c <isatty>
   2a348:	00ffffc4 	movi	r3,-1
   2a34c:	10c00526 	beq	r2,r3,2a364 <_isatty_r+0x44>
   2a350:	dfc00217 	ldw	ra,8(sp)
   2a354:	dc400117 	ldw	r17,4(sp)
   2a358:	dc000017 	ldw	r16,0(sp)
   2a35c:	dec00304 	addi	sp,sp,12
   2a360:	f800283a 	ret
   2a364:	80c00017 	ldw	r3,0(r16)
   2a368:	183ff926 	beq	r3,zero,2a350 <__alt_data_end+0xf402a350>
   2a36c:	88c00015 	stw	r3,0(r17)
   2a370:	003ff706 	br	2a350 <__alt_data_end+0xf402a350>

0002a374 <_lseek_r>:
   2a374:	defffd04 	addi	sp,sp,-12
   2a378:	2805883a 	mov	r2,r5
   2a37c:	dc000015 	stw	r16,0(sp)
   2a380:	040000f4 	movhi	r16,3
   2a384:	dc400115 	stw	r17,4(sp)
   2a388:	300b883a 	mov	r5,r6
   2a38c:	84153f04 	addi	r16,r16,21756
   2a390:	2023883a 	mov	r17,r4
   2a394:	380d883a 	mov	r6,r7
   2a398:	1009883a 	mov	r4,r2
   2a39c:	dfc00215 	stw	ra,8(sp)
   2a3a0:	80000015 	stw	zero,0(r16)
   2a3a4:	002de080 	call	2de08 <lseek>
   2a3a8:	00ffffc4 	movi	r3,-1
   2a3ac:	10c00526 	beq	r2,r3,2a3c4 <_lseek_r+0x50>
   2a3b0:	dfc00217 	ldw	ra,8(sp)
   2a3b4:	dc400117 	ldw	r17,4(sp)
   2a3b8:	dc000017 	ldw	r16,0(sp)
   2a3bc:	dec00304 	addi	sp,sp,12
   2a3c0:	f800283a 	ret
   2a3c4:	80c00017 	ldw	r3,0(r16)
   2a3c8:	183ff926 	beq	r3,zero,2a3b0 <__alt_data_end+0xf402a3b0>
   2a3cc:	88c00015 	stw	r3,0(r17)
   2a3d0:	003ff706 	br	2a3b0 <__alt_data_end+0xf402a3b0>

0002a3d4 <_read_r>:
   2a3d4:	defffd04 	addi	sp,sp,-12
   2a3d8:	2805883a 	mov	r2,r5
   2a3dc:	dc000015 	stw	r16,0(sp)
   2a3e0:	040000f4 	movhi	r16,3
   2a3e4:	dc400115 	stw	r17,4(sp)
   2a3e8:	300b883a 	mov	r5,r6
   2a3ec:	84153f04 	addi	r16,r16,21756
   2a3f0:	2023883a 	mov	r17,r4
   2a3f4:	380d883a 	mov	r6,r7
   2a3f8:	1009883a 	mov	r4,r2
   2a3fc:	dfc00215 	stw	ra,8(sp)
   2a400:	80000015 	stw	zero,0(r16)
   2a404:	002dfdc0 	call	2dfdc <read>
   2a408:	00ffffc4 	movi	r3,-1
   2a40c:	10c00526 	beq	r2,r3,2a424 <_read_r+0x50>
   2a410:	dfc00217 	ldw	ra,8(sp)
   2a414:	dc400117 	ldw	r17,4(sp)
   2a418:	dc000017 	ldw	r16,0(sp)
   2a41c:	dec00304 	addi	sp,sp,12
   2a420:	f800283a 	ret
   2a424:	80c00017 	ldw	r3,0(r16)
   2a428:	183ff926 	beq	r3,zero,2a410 <__alt_data_end+0xf402a410>
   2a42c:	88c00015 	stw	r3,0(r17)
   2a430:	003ff706 	br	2a410 <__alt_data_end+0xf402a410>

0002a434 <__swbuf_r>:
   2a434:	defffb04 	addi	sp,sp,-20
   2a438:	dcc00315 	stw	r19,12(sp)
   2a43c:	dc800215 	stw	r18,8(sp)
   2a440:	dc000015 	stw	r16,0(sp)
   2a444:	dfc00415 	stw	ra,16(sp)
   2a448:	dc400115 	stw	r17,4(sp)
   2a44c:	2025883a 	mov	r18,r4
   2a450:	2827883a 	mov	r19,r5
   2a454:	3021883a 	mov	r16,r6
   2a458:	20000226 	beq	r4,zero,2a464 <__swbuf_r+0x30>
   2a45c:	20800e17 	ldw	r2,56(r4)
   2a460:	10004226 	beq	r2,zero,2a56c <__swbuf_r+0x138>
   2a464:	80800617 	ldw	r2,24(r16)
   2a468:	8100030b 	ldhu	r4,12(r16)
   2a46c:	80800215 	stw	r2,8(r16)
   2a470:	2080020c 	andi	r2,r4,8
   2a474:	10003626 	beq	r2,zero,2a550 <__swbuf_r+0x11c>
   2a478:	80c00417 	ldw	r3,16(r16)
   2a47c:	18003426 	beq	r3,zero,2a550 <__swbuf_r+0x11c>
   2a480:	2088000c 	andi	r2,r4,8192
   2a484:	9c403fcc 	andi	r17,r19,255
   2a488:	10001a26 	beq	r2,zero,2a4f4 <__swbuf_r+0xc0>
   2a48c:	80800017 	ldw	r2,0(r16)
   2a490:	81000517 	ldw	r4,20(r16)
   2a494:	10c7c83a 	sub	r3,r2,r3
   2a498:	1900200e 	bge	r3,r4,2a51c <__swbuf_r+0xe8>
   2a49c:	18c00044 	addi	r3,r3,1
   2a4a0:	81000217 	ldw	r4,8(r16)
   2a4a4:	11400044 	addi	r5,r2,1
   2a4a8:	81400015 	stw	r5,0(r16)
   2a4ac:	213fffc4 	addi	r4,r4,-1
   2a4b0:	81000215 	stw	r4,8(r16)
   2a4b4:	14c00005 	stb	r19,0(r2)
   2a4b8:	80800517 	ldw	r2,20(r16)
   2a4bc:	10c01e26 	beq	r2,r3,2a538 <__swbuf_r+0x104>
   2a4c0:	8080030b 	ldhu	r2,12(r16)
   2a4c4:	1080004c 	andi	r2,r2,1
   2a4c8:	10000226 	beq	r2,zero,2a4d4 <__swbuf_r+0xa0>
   2a4cc:	00800284 	movi	r2,10
   2a4d0:	88801926 	beq	r17,r2,2a538 <__swbuf_r+0x104>
   2a4d4:	8805883a 	mov	r2,r17
   2a4d8:	dfc00417 	ldw	ra,16(sp)
   2a4dc:	dcc00317 	ldw	r19,12(sp)
   2a4e0:	dc800217 	ldw	r18,8(sp)
   2a4e4:	dc400117 	ldw	r17,4(sp)
   2a4e8:	dc000017 	ldw	r16,0(sp)
   2a4ec:	dec00504 	addi	sp,sp,20
   2a4f0:	f800283a 	ret
   2a4f4:	81401917 	ldw	r5,100(r16)
   2a4f8:	00b7ffc4 	movi	r2,-8193
   2a4fc:	21080014 	ori	r4,r4,8192
   2a500:	2884703a 	and	r2,r5,r2
   2a504:	80801915 	stw	r2,100(r16)
   2a508:	80800017 	ldw	r2,0(r16)
   2a50c:	8100030d 	sth	r4,12(r16)
   2a510:	81000517 	ldw	r4,20(r16)
   2a514:	10c7c83a 	sub	r3,r2,r3
   2a518:	193fe016 	blt	r3,r4,2a49c <__alt_data_end+0xf402a49c>
   2a51c:	800b883a 	mov	r5,r16
   2a520:	9009883a 	mov	r4,r18
   2a524:	00251c00 	call	251c0 <_fflush_r>
   2a528:	1000071e 	bne	r2,zero,2a548 <__swbuf_r+0x114>
   2a52c:	80800017 	ldw	r2,0(r16)
   2a530:	00c00044 	movi	r3,1
   2a534:	003fda06 	br	2a4a0 <__alt_data_end+0xf402a4a0>
   2a538:	800b883a 	mov	r5,r16
   2a53c:	9009883a 	mov	r4,r18
   2a540:	00251c00 	call	251c0 <_fflush_r>
   2a544:	103fe326 	beq	r2,zero,2a4d4 <__alt_data_end+0xf402a4d4>
   2a548:	00bfffc4 	movi	r2,-1
   2a54c:	003fe206 	br	2a4d8 <__alt_data_end+0xf402a4d8>
   2a550:	800b883a 	mov	r5,r16
   2a554:	9009883a 	mov	r4,r18
   2a558:	00235c80 	call	235c8 <__swsetup_r>
   2a55c:	103ffa1e 	bne	r2,zero,2a548 <__alt_data_end+0xf402a548>
   2a560:	8100030b 	ldhu	r4,12(r16)
   2a564:	80c00417 	ldw	r3,16(r16)
   2a568:	003fc506 	br	2a480 <__alt_data_end+0xf402a480>
   2a56c:	002559c0 	call	2559c <__sinit>
   2a570:	003fbc06 	br	2a464 <__alt_data_end+0xf402a464>

0002a574 <__swbuf>:
   2a574:	008000f4 	movhi	r2,3
   2a578:	108e0b04 	addi	r2,r2,14380
   2a57c:	280d883a 	mov	r6,r5
   2a580:	200b883a 	mov	r5,r4
   2a584:	11000017 	ldw	r4,0(r2)
   2a588:	002a4341 	jmpi	2a434 <__swbuf_r>

0002a58c <_wcrtomb_r>:
   2a58c:	defff604 	addi	sp,sp,-40
   2a590:	008000f4 	movhi	r2,3
   2a594:	dc800815 	stw	r18,32(sp)
   2a598:	dc400715 	stw	r17,28(sp)
   2a59c:	dc000615 	stw	r16,24(sp)
   2a5a0:	108e0f04 	addi	r2,r2,14396
   2a5a4:	dfc00915 	stw	ra,36(sp)
   2a5a8:	2021883a 	mov	r16,r4
   2a5ac:	3823883a 	mov	r17,r7
   2a5b0:	14800017 	ldw	r18,0(r2)
   2a5b4:	28001426 	beq	r5,zero,2a608 <_wcrtomb_r+0x7c>
   2a5b8:	d9400415 	stw	r5,16(sp)
   2a5bc:	d9800515 	stw	r6,20(sp)
   2a5c0:	00260e00 	call	260e0 <__locale_charset>
   2a5c4:	d9800517 	ldw	r6,20(sp)
   2a5c8:	d9400417 	ldw	r5,16(sp)
   2a5cc:	100f883a 	mov	r7,r2
   2a5d0:	dc400015 	stw	r17,0(sp)
   2a5d4:	8009883a 	mov	r4,r16
   2a5d8:	903ee83a 	callr	r18
   2a5dc:	00ffffc4 	movi	r3,-1
   2a5e0:	10c0031e 	bne	r2,r3,2a5f0 <_wcrtomb_r+0x64>
   2a5e4:	88000015 	stw	zero,0(r17)
   2a5e8:	00c02284 	movi	r3,138
   2a5ec:	80c00015 	stw	r3,0(r16)
   2a5f0:	dfc00917 	ldw	ra,36(sp)
   2a5f4:	dc800817 	ldw	r18,32(sp)
   2a5f8:	dc400717 	ldw	r17,28(sp)
   2a5fc:	dc000617 	ldw	r16,24(sp)
   2a600:	dec00a04 	addi	sp,sp,40
   2a604:	f800283a 	ret
   2a608:	00260e00 	call	260e0 <__locale_charset>
   2a60c:	100f883a 	mov	r7,r2
   2a610:	dc400015 	stw	r17,0(sp)
   2a614:	000d883a 	mov	r6,zero
   2a618:	d9400104 	addi	r5,sp,4
   2a61c:	8009883a 	mov	r4,r16
   2a620:	903ee83a 	callr	r18
   2a624:	003fed06 	br	2a5dc <__alt_data_end+0xf402a5dc>

0002a628 <wcrtomb>:
   2a628:	defff604 	addi	sp,sp,-40
   2a62c:	008000f4 	movhi	r2,3
   2a630:	dc800615 	stw	r18,24(sp)
   2a634:	dc400515 	stw	r17,20(sp)
   2a638:	108e0b04 	addi	r2,r2,14380
   2a63c:	dfc00915 	stw	ra,36(sp)
   2a640:	dd000815 	stw	r20,32(sp)
   2a644:	dcc00715 	stw	r19,28(sp)
   2a648:	dc000415 	stw	r16,16(sp)
   2a64c:	3025883a 	mov	r18,r6
   2a650:	14400017 	ldw	r17,0(r2)
   2a654:	20001926 	beq	r4,zero,2a6bc <wcrtomb+0x94>
   2a658:	008000f4 	movhi	r2,3
   2a65c:	108e0f04 	addi	r2,r2,14396
   2a660:	15000017 	ldw	r20,0(r2)
   2a664:	2021883a 	mov	r16,r4
   2a668:	2827883a 	mov	r19,r5
   2a66c:	00260e00 	call	260e0 <__locale_charset>
   2a670:	100f883a 	mov	r7,r2
   2a674:	dc800015 	stw	r18,0(sp)
   2a678:	980d883a 	mov	r6,r19
   2a67c:	800b883a 	mov	r5,r16
   2a680:	8809883a 	mov	r4,r17
   2a684:	a03ee83a 	callr	r20
   2a688:	00ffffc4 	movi	r3,-1
   2a68c:	10c0031e 	bne	r2,r3,2a69c <wcrtomb+0x74>
   2a690:	90000015 	stw	zero,0(r18)
   2a694:	00c02284 	movi	r3,138
   2a698:	88c00015 	stw	r3,0(r17)
   2a69c:	dfc00917 	ldw	ra,36(sp)
   2a6a0:	dd000817 	ldw	r20,32(sp)
   2a6a4:	dcc00717 	ldw	r19,28(sp)
   2a6a8:	dc800617 	ldw	r18,24(sp)
   2a6ac:	dc400517 	ldw	r17,20(sp)
   2a6b0:	dc000417 	ldw	r16,16(sp)
   2a6b4:	dec00a04 	addi	sp,sp,40
   2a6b8:	f800283a 	ret
   2a6bc:	008000f4 	movhi	r2,3
   2a6c0:	108e0f04 	addi	r2,r2,14396
   2a6c4:	14000017 	ldw	r16,0(r2)
   2a6c8:	00260e00 	call	260e0 <__locale_charset>
   2a6cc:	100f883a 	mov	r7,r2
   2a6d0:	dc800015 	stw	r18,0(sp)
   2a6d4:	000d883a 	mov	r6,zero
   2a6d8:	d9400104 	addi	r5,sp,4
   2a6dc:	8809883a 	mov	r4,r17
   2a6e0:	803ee83a 	callr	r16
   2a6e4:	003fe806 	br	2a688 <__alt_data_end+0xf402a688>

0002a6e8 <__ascii_wctomb>:
   2a6e8:	28000526 	beq	r5,zero,2a700 <__ascii_wctomb+0x18>
   2a6ec:	00803fc4 	movi	r2,255
   2a6f0:	11800536 	bltu	r2,r6,2a708 <__ascii_wctomb+0x20>
   2a6f4:	29800005 	stb	r6,0(r5)
   2a6f8:	00800044 	movi	r2,1
   2a6fc:	f800283a 	ret
   2a700:	0005883a 	mov	r2,zero
   2a704:	f800283a 	ret
   2a708:	00802284 	movi	r2,138
   2a70c:	20800015 	stw	r2,0(r4)
   2a710:	00bfffc4 	movi	r2,-1
   2a714:	f800283a 	ret

0002a718 <_wctomb_r>:
   2a718:	008000f4 	movhi	r2,3
   2a71c:	defff904 	addi	sp,sp,-28
   2a720:	108e0f04 	addi	r2,r2,14396
   2a724:	dfc00615 	stw	ra,24(sp)
   2a728:	dc400515 	stw	r17,20(sp)
   2a72c:	dc000415 	stw	r16,16(sp)
   2a730:	3823883a 	mov	r17,r7
   2a734:	14000017 	ldw	r16,0(r2)
   2a738:	d9000115 	stw	r4,4(sp)
   2a73c:	d9400215 	stw	r5,8(sp)
   2a740:	d9800315 	stw	r6,12(sp)
   2a744:	00260e00 	call	260e0 <__locale_charset>
   2a748:	d9800317 	ldw	r6,12(sp)
   2a74c:	d9400217 	ldw	r5,8(sp)
   2a750:	d9000117 	ldw	r4,4(sp)
   2a754:	100f883a 	mov	r7,r2
   2a758:	dc400015 	stw	r17,0(sp)
   2a75c:	803ee83a 	callr	r16
   2a760:	dfc00617 	ldw	ra,24(sp)
   2a764:	dc400517 	ldw	r17,20(sp)
   2a768:	dc000417 	ldw	r16,16(sp)
   2a76c:	dec00704 	addi	sp,sp,28
   2a770:	f800283a 	ret

0002a774 <__udivdi3>:
   2a774:	defff504 	addi	sp,sp,-44
   2a778:	dcc00415 	stw	r19,16(sp)
   2a77c:	dc000115 	stw	r16,4(sp)
   2a780:	dfc00a15 	stw	ra,40(sp)
   2a784:	df000915 	stw	fp,36(sp)
   2a788:	ddc00815 	stw	r23,32(sp)
   2a78c:	dd800715 	stw	r22,28(sp)
   2a790:	dd400615 	stw	r21,24(sp)
   2a794:	dd000515 	stw	r20,20(sp)
   2a798:	dc800315 	stw	r18,12(sp)
   2a79c:	dc400215 	stw	r17,8(sp)
   2a7a0:	2027883a 	mov	r19,r4
   2a7a4:	2821883a 	mov	r16,r5
   2a7a8:	3800411e 	bne	r7,zero,2a8b0 <__udivdi3+0x13c>
   2a7ac:	3023883a 	mov	r17,r6
   2a7b0:	2025883a 	mov	r18,r4
   2a7b4:	2980522e 	bgeu	r5,r6,2a900 <__udivdi3+0x18c>
   2a7b8:	00bfffd4 	movui	r2,65535
   2a7bc:	282d883a 	mov	r22,r5
   2a7c0:	1180a836 	bltu	r2,r6,2aa64 <__udivdi3+0x2f0>
   2a7c4:	00803fc4 	movi	r2,255
   2a7c8:	1185803a 	cmpltu	r2,r2,r6
   2a7cc:	100490fa 	slli	r2,r2,3
   2a7d0:	3086d83a 	srl	r3,r6,r2
   2a7d4:	010000f4 	movhi	r4,3
   2a7d8:	21062f44 	addi	r4,r4,6333
   2a7dc:	20c7883a 	add	r3,r4,r3
   2a7e0:	18c00003 	ldbu	r3,0(r3)
   2a7e4:	1885883a 	add	r2,r3,r2
   2a7e8:	00c00804 	movi	r3,32
   2a7ec:	1887c83a 	sub	r3,r3,r2
   2a7f0:	18000526 	beq	r3,zero,2a808 <__udivdi3+0x94>
   2a7f4:	80e0983a 	sll	r16,r16,r3
   2a7f8:	9884d83a 	srl	r2,r19,r2
   2a7fc:	30e2983a 	sll	r17,r6,r3
   2a800:	98e4983a 	sll	r18,r19,r3
   2a804:	142cb03a 	or	r22,r2,r16
   2a808:	882ad43a 	srli	r21,r17,16
   2a80c:	b009883a 	mov	r4,r22
   2a810:	8d3fffcc 	andi	r20,r17,65535
   2a814:	a80b883a 	mov	r5,r21
   2a818:	002b3800 	call	2b380 <__umodsi3>
   2a81c:	b009883a 	mov	r4,r22
   2a820:	a80b883a 	mov	r5,r21
   2a824:	1027883a 	mov	r19,r2
   2a828:	002b31c0 	call	2b31c <__udivsi3>
   2a82c:	102d883a 	mov	r22,r2
   2a830:	9826943a 	slli	r19,r19,16
   2a834:	9004d43a 	srli	r2,r18,16
   2a838:	a5a1383a 	mul	r16,r20,r22
   2a83c:	14c4b03a 	or	r2,r2,r19
   2a840:	1400052e 	bgeu	r2,r16,2a858 <__udivdi3+0xe4>
   2a844:	1445883a 	add	r2,r2,r17
   2a848:	b0ffffc4 	addi	r3,r22,-1
   2a84c:	14400136 	bltu	r2,r17,2a854 <__udivdi3+0xe0>
   2a850:	14012336 	bltu	r2,r16,2ace0 <__udivdi3+0x56c>
   2a854:	182d883a 	mov	r22,r3
   2a858:	1421c83a 	sub	r16,r2,r16
   2a85c:	a80b883a 	mov	r5,r21
   2a860:	8009883a 	mov	r4,r16
   2a864:	002b3800 	call	2b380 <__umodsi3>
   2a868:	1027883a 	mov	r19,r2
   2a86c:	a80b883a 	mov	r5,r21
   2a870:	8009883a 	mov	r4,r16
   2a874:	002b31c0 	call	2b31c <__udivsi3>
   2a878:	9826943a 	slli	r19,r19,16
   2a87c:	a0a9383a 	mul	r20,r20,r2
   2a880:	94bfffcc 	andi	r18,r18,65535
   2a884:	94e4b03a 	or	r18,r18,r19
   2a888:	9500052e 	bgeu	r18,r20,2a8a0 <__udivdi3+0x12c>
   2a88c:	8ca5883a 	add	r18,r17,r18
   2a890:	10ffffc4 	addi	r3,r2,-1
   2a894:	9440f136 	bltu	r18,r17,2ac5c <__udivdi3+0x4e8>
   2a898:	9500f02e 	bgeu	r18,r20,2ac5c <__udivdi3+0x4e8>
   2a89c:	10bfff84 	addi	r2,r2,-2
   2a8a0:	b00c943a 	slli	r6,r22,16
   2a8a4:	0007883a 	mov	r3,zero
   2a8a8:	3084b03a 	or	r2,r6,r2
   2a8ac:	00005906 	br	2aa14 <__udivdi3+0x2a0>
   2a8b0:	29c05636 	bltu	r5,r7,2aa0c <__udivdi3+0x298>
   2a8b4:	00bfffd4 	movui	r2,65535
   2a8b8:	11c0622e 	bgeu	r2,r7,2aa44 <__udivdi3+0x2d0>
   2a8bc:	00804034 	movhi	r2,256
   2a8c0:	10bfffc4 	addi	r2,r2,-1
   2a8c4:	11c0ee36 	bltu	r2,r7,2ac80 <__udivdi3+0x50c>
   2a8c8:	00800404 	movi	r2,16
   2a8cc:	3886d83a 	srl	r3,r7,r2
   2a8d0:	010000f4 	movhi	r4,3
   2a8d4:	21062f44 	addi	r4,r4,6333
   2a8d8:	20c7883a 	add	r3,r4,r3
   2a8dc:	18c00003 	ldbu	r3,0(r3)
   2a8e0:	05400804 	movi	r21,32
   2a8e4:	1885883a 	add	r2,r3,r2
   2a8e8:	a8abc83a 	sub	r21,r21,r2
   2a8ec:	a800621e 	bne	r21,zero,2aa78 <__udivdi3+0x304>
   2a8f0:	3c00e936 	bltu	r7,r16,2ac98 <__udivdi3+0x524>
   2a8f4:	9985403a 	cmpgeu	r2,r19,r6
   2a8f8:	0007883a 	mov	r3,zero
   2a8fc:	00004506 	br	2aa14 <__udivdi3+0x2a0>
   2a900:	3000041e 	bne	r6,zero,2a914 <__udivdi3+0x1a0>
   2a904:	000b883a 	mov	r5,zero
   2a908:	01000044 	movi	r4,1
   2a90c:	002b31c0 	call	2b31c <__udivsi3>
   2a910:	1023883a 	mov	r17,r2
   2a914:	00bfffd4 	movui	r2,65535
   2a918:	14404e2e 	bgeu	r2,r17,2aa54 <__udivdi3+0x2e0>
   2a91c:	00804034 	movhi	r2,256
   2a920:	10bfffc4 	addi	r2,r2,-1
   2a924:	1440d836 	bltu	r2,r17,2ac88 <__udivdi3+0x514>
   2a928:	00800404 	movi	r2,16
   2a92c:	8886d83a 	srl	r3,r17,r2
   2a930:	010000f4 	movhi	r4,3
   2a934:	21062f44 	addi	r4,r4,6333
   2a938:	20c7883a 	add	r3,r4,r3
   2a93c:	18c00003 	ldbu	r3,0(r3)
   2a940:	1885883a 	add	r2,r3,r2
   2a944:	00c00804 	movi	r3,32
   2a948:	1887c83a 	sub	r3,r3,r2
   2a94c:	18008f1e 	bne	r3,zero,2ab8c <__udivdi3+0x418>
   2a950:	882ad43a 	srli	r21,r17,16
   2a954:	8461c83a 	sub	r16,r16,r17
   2a958:	8d3fffcc 	andi	r20,r17,65535
   2a95c:	00c00044 	movi	r3,1
   2a960:	8009883a 	mov	r4,r16
   2a964:	a80b883a 	mov	r5,r21
   2a968:	d8c00015 	stw	r3,0(sp)
   2a96c:	002b3800 	call	2b380 <__umodsi3>
   2a970:	8009883a 	mov	r4,r16
   2a974:	a80b883a 	mov	r5,r21
   2a978:	1027883a 	mov	r19,r2
   2a97c:	002b31c0 	call	2b31c <__udivsi3>
   2a980:	9826943a 	slli	r19,r19,16
   2a984:	9008d43a 	srli	r4,r18,16
   2a988:	1521383a 	mul	r16,r2,r20
   2a98c:	102d883a 	mov	r22,r2
   2a990:	24c8b03a 	or	r4,r4,r19
   2a994:	d8c00017 	ldw	r3,0(sp)
   2a998:	2400052e 	bgeu	r4,r16,2a9b0 <__udivdi3+0x23c>
   2a99c:	2449883a 	add	r4,r4,r17
   2a9a0:	b0bfffc4 	addi	r2,r22,-1
   2a9a4:	24400136 	bltu	r4,r17,2a9ac <__udivdi3+0x238>
   2a9a8:	2400ca36 	bltu	r4,r16,2acd4 <__udivdi3+0x560>
   2a9ac:	102d883a 	mov	r22,r2
   2a9b0:	2421c83a 	sub	r16,r4,r16
   2a9b4:	a80b883a 	mov	r5,r21
   2a9b8:	8009883a 	mov	r4,r16
   2a9bc:	d8c00015 	stw	r3,0(sp)
   2a9c0:	002b3800 	call	2b380 <__umodsi3>
   2a9c4:	1027883a 	mov	r19,r2
   2a9c8:	a80b883a 	mov	r5,r21
   2a9cc:	8009883a 	mov	r4,r16
   2a9d0:	002b31c0 	call	2b31c <__udivsi3>
   2a9d4:	9826943a 	slli	r19,r19,16
   2a9d8:	1529383a 	mul	r20,r2,r20
   2a9dc:	94bfffcc 	andi	r18,r18,65535
   2a9e0:	94e4b03a 	or	r18,r18,r19
   2a9e4:	d8c00017 	ldw	r3,0(sp)
   2a9e8:	9500052e 	bgeu	r18,r20,2aa00 <__udivdi3+0x28c>
   2a9ec:	8ca5883a 	add	r18,r17,r18
   2a9f0:	113fffc4 	addi	r4,r2,-1
   2a9f4:	94409736 	bltu	r18,r17,2ac54 <__udivdi3+0x4e0>
   2a9f8:	9500962e 	bgeu	r18,r20,2ac54 <__udivdi3+0x4e0>
   2a9fc:	10bfff84 	addi	r2,r2,-2
   2aa00:	b00c943a 	slli	r6,r22,16
   2aa04:	3084b03a 	or	r2,r6,r2
   2aa08:	00000206 	br	2aa14 <__udivdi3+0x2a0>
   2aa0c:	0007883a 	mov	r3,zero
   2aa10:	0005883a 	mov	r2,zero
   2aa14:	dfc00a17 	ldw	ra,40(sp)
   2aa18:	df000917 	ldw	fp,36(sp)
   2aa1c:	ddc00817 	ldw	r23,32(sp)
   2aa20:	dd800717 	ldw	r22,28(sp)
   2aa24:	dd400617 	ldw	r21,24(sp)
   2aa28:	dd000517 	ldw	r20,20(sp)
   2aa2c:	dcc00417 	ldw	r19,16(sp)
   2aa30:	dc800317 	ldw	r18,12(sp)
   2aa34:	dc400217 	ldw	r17,8(sp)
   2aa38:	dc000117 	ldw	r16,4(sp)
   2aa3c:	dec00b04 	addi	sp,sp,44
   2aa40:	f800283a 	ret
   2aa44:	00803fc4 	movi	r2,255
   2aa48:	11c5803a 	cmpltu	r2,r2,r7
   2aa4c:	100490fa 	slli	r2,r2,3
   2aa50:	003f9e06 	br	2a8cc <__alt_data_end+0xf402a8cc>
   2aa54:	00803fc4 	movi	r2,255
   2aa58:	1445803a 	cmpltu	r2,r2,r17
   2aa5c:	100490fa 	slli	r2,r2,3
   2aa60:	003fb206 	br	2a92c <__alt_data_end+0xf402a92c>
   2aa64:	00804034 	movhi	r2,256
   2aa68:	10bfffc4 	addi	r2,r2,-1
   2aa6c:	11808836 	bltu	r2,r6,2ac90 <__udivdi3+0x51c>
   2aa70:	00800404 	movi	r2,16
   2aa74:	003f5606 	br	2a7d0 <__alt_data_end+0xf402a7d0>
   2aa78:	30aed83a 	srl	r23,r6,r2
   2aa7c:	3d4e983a 	sll	r7,r7,r21
   2aa80:	80acd83a 	srl	r22,r16,r2
   2aa84:	9884d83a 	srl	r2,r19,r2
   2aa88:	3deeb03a 	or	r23,r7,r23
   2aa8c:	b824d43a 	srli	r18,r23,16
   2aa90:	8560983a 	sll	r16,r16,r21
   2aa94:	b009883a 	mov	r4,r22
   2aa98:	900b883a 	mov	r5,r18
   2aa9c:	3568983a 	sll	r20,r6,r21
   2aaa0:	1420b03a 	or	r16,r2,r16
   2aaa4:	002b3800 	call	2b380 <__umodsi3>
   2aaa8:	b009883a 	mov	r4,r22
   2aaac:	900b883a 	mov	r5,r18
   2aab0:	1023883a 	mov	r17,r2
   2aab4:	002b31c0 	call	2b31c <__udivsi3>
   2aab8:	8808943a 	slli	r4,r17,16
   2aabc:	bf3fffcc 	andi	fp,r23,65535
   2aac0:	8006d43a 	srli	r3,r16,16
   2aac4:	e0a3383a 	mul	r17,fp,r2
   2aac8:	100d883a 	mov	r6,r2
   2aacc:	1906b03a 	or	r3,r3,r4
   2aad0:	1c40042e 	bgeu	r3,r17,2aae4 <__udivdi3+0x370>
   2aad4:	1dc7883a 	add	r3,r3,r23
   2aad8:	10bfffc4 	addi	r2,r2,-1
   2aadc:	1dc0752e 	bgeu	r3,r23,2acb4 <__udivdi3+0x540>
   2aae0:	100d883a 	mov	r6,r2
   2aae4:	1c63c83a 	sub	r17,r3,r17
   2aae8:	900b883a 	mov	r5,r18
   2aaec:	8809883a 	mov	r4,r17
   2aaf0:	d9800015 	stw	r6,0(sp)
   2aaf4:	002b3800 	call	2b380 <__umodsi3>
   2aaf8:	102d883a 	mov	r22,r2
   2aafc:	8809883a 	mov	r4,r17
   2ab00:	900b883a 	mov	r5,r18
   2ab04:	002b31c0 	call	2b31c <__udivsi3>
   2ab08:	b02c943a 	slli	r22,r22,16
   2ab0c:	e089383a 	mul	r4,fp,r2
   2ab10:	843fffcc 	andi	r16,r16,65535
   2ab14:	85a0b03a 	or	r16,r16,r22
   2ab18:	d9800017 	ldw	r6,0(sp)
   2ab1c:	8100042e 	bgeu	r16,r4,2ab30 <__udivdi3+0x3bc>
   2ab20:	85e1883a 	add	r16,r16,r23
   2ab24:	10ffffc4 	addi	r3,r2,-1
   2ab28:	85c05e2e 	bgeu	r16,r23,2aca4 <__udivdi3+0x530>
   2ab2c:	1805883a 	mov	r2,r3
   2ab30:	300c943a 	slli	r6,r6,16
   2ab34:	a17fffcc 	andi	r5,r20,65535
   2ab38:	a028d43a 	srli	r20,r20,16
   2ab3c:	3084b03a 	or	r2,r6,r2
   2ab40:	10ffffcc 	andi	r3,r2,65535
   2ab44:	100cd43a 	srli	r6,r2,16
   2ab48:	194f383a 	mul	r7,r3,r5
   2ab4c:	1d07383a 	mul	r3,r3,r20
   2ab50:	314b383a 	mul	r5,r6,r5
   2ab54:	3810d43a 	srli	r8,r7,16
   2ab58:	8121c83a 	sub	r16,r16,r4
   2ab5c:	1947883a 	add	r3,r3,r5
   2ab60:	40c7883a 	add	r3,r8,r3
   2ab64:	350d383a 	mul	r6,r6,r20
   2ab68:	1940022e 	bgeu	r3,r5,2ab74 <__udivdi3+0x400>
   2ab6c:	01000074 	movhi	r4,1
   2ab70:	310d883a 	add	r6,r6,r4
   2ab74:	1828d43a 	srli	r20,r3,16
   2ab78:	a18d883a 	add	r6,r20,r6
   2ab7c:	81803e36 	bltu	r16,r6,2ac78 <__udivdi3+0x504>
   2ab80:	81803826 	beq	r16,r6,2ac64 <__udivdi3+0x4f0>
   2ab84:	0007883a 	mov	r3,zero
   2ab88:	003fa206 	br	2aa14 <__alt_data_end+0xf402aa14>
   2ab8c:	88e2983a 	sll	r17,r17,r3
   2ab90:	80a8d83a 	srl	r20,r16,r2
   2ab94:	80e0983a 	sll	r16,r16,r3
   2ab98:	882ad43a 	srli	r21,r17,16
   2ab9c:	9884d83a 	srl	r2,r19,r2
   2aba0:	a009883a 	mov	r4,r20
   2aba4:	a80b883a 	mov	r5,r21
   2aba8:	142eb03a 	or	r23,r2,r16
   2abac:	98e4983a 	sll	r18,r19,r3
   2abb0:	002b3800 	call	2b380 <__umodsi3>
   2abb4:	a009883a 	mov	r4,r20
   2abb8:	a80b883a 	mov	r5,r21
   2abbc:	1021883a 	mov	r16,r2
   2abc0:	002b31c0 	call	2b31c <__udivsi3>
   2abc4:	1039883a 	mov	fp,r2
   2abc8:	8d3fffcc 	andi	r20,r17,65535
   2abcc:	8020943a 	slli	r16,r16,16
   2abd0:	b804d43a 	srli	r2,r23,16
   2abd4:	a72d383a 	mul	r22,r20,fp
   2abd8:	1404b03a 	or	r2,r2,r16
   2abdc:	1580062e 	bgeu	r2,r22,2abf8 <__udivdi3+0x484>
   2abe0:	1445883a 	add	r2,r2,r17
   2abe4:	e0ffffc4 	addi	r3,fp,-1
   2abe8:	14403836 	bltu	r2,r17,2accc <__udivdi3+0x558>
   2abec:	1580372e 	bgeu	r2,r22,2accc <__udivdi3+0x558>
   2abf0:	e73fff84 	addi	fp,fp,-2
   2abf4:	1445883a 	add	r2,r2,r17
   2abf8:	15adc83a 	sub	r22,r2,r22
   2abfc:	a80b883a 	mov	r5,r21
   2ac00:	b009883a 	mov	r4,r22
   2ac04:	002b3800 	call	2b380 <__umodsi3>
   2ac08:	1027883a 	mov	r19,r2
   2ac0c:	b009883a 	mov	r4,r22
   2ac10:	a80b883a 	mov	r5,r21
   2ac14:	002b31c0 	call	2b31c <__udivsi3>
   2ac18:	9826943a 	slli	r19,r19,16
   2ac1c:	a0a1383a 	mul	r16,r20,r2
   2ac20:	b93fffcc 	andi	r4,r23,65535
   2ac24:	24c8b03a 	or	r4,r4,r19
   2ac28:	2400062e 	bgeu	r4,r16,2ac44 <__udivdi3+0x4d0>
   2ac2c:	2449883a 	add	r4,r4,r17
   2ac30:	10ffffc4 	addi	r3,r2,-1
   2ac34:	24402336 	bltu	r4,r17,2acc4 <__udivdi3+0x550>
   2ac38:	2400222e 	bgeu	r4,r16,2acc4 <__udivdi3+0x550>
   2ac3c:	10bfff84 	addi	r2,r2,-2
   2ac40:	2449883a 	add	r4,r4,r17
   2ac44:	e038943a 	slli	fp,fp,16
   2ac48:	2421c83a 	sub	r16,r4,r16
   2ac4c:	e086b03a 	or	r3,fp,r2
   2ac50:	003f4306 	br	2a960 <__alt_data_end+0xf402a960>
   2ac54:	2005883a 	mov	r2,r4
   2ac58:	003f6906 	br	2aa00 <__alt_data_end+0xf402aa00>
   2ac5c:	1805883a 	mov	r2,r3
   2ac60:	003f0f06 	br	2a8a0 <__alt_data_end+0xf402a8a0>
   2ac64:	1806943a 	slli	r3,r3,16
   2ac68:	9d66983a 	sll	r19,r19,r21
   2ac6c:	39ffffcc 	andi	r7,r7,65535
   2ac70:	19c7883a 	add	r3,r3,r7
   2ac74:	98ffc32e 	bgeu	r19,r3,2ab84 <__alt_data_end+0xf402ab84>
   2ac78:	10bfffc4 	addi	r2,r2,-1
   2ac7c:	003fc106 	br	2ab84 <__alt_data_end+0xf402ab84>
   2ac80:	00800604 	movi	r2,24
   2ac84:	003f1106 	br	2a8cc <__alt_data_end+0xf402a8cc>
   2ac88:	00800604 	movi	r2,24
   2ac8c:	003f2706 	br	2a92c <__alt_data_end+0xf402a92c>
   2ac90:	00800604 	movi	r2,24
   2ac94:	003ece06 	br	2a7d0 <__alt_data_end+0xf402a7d0>
   2ac98:	0007883a 	mov	r3,zero
   2ac9c:	00800044 	movi	r2,1
   2aca0:	003f5c06 	br	2aa14 <__alt_data_end+0xf402aa14>
   2aca4:	813fa12e 	bgeu	r16,r4,2ab2c <__alt_data_end+0xf402ab2c>
   2aca8:	10bfff84 	addi	r2,r2,-2
   2acac:	85e1883a 	add	r16,r16,r23
   2acb0:	003f9f06 	br	2ab30 <__alt_data_end+0xf402ab30>
   2acb4:	1c7f8a2e 	bgeu	r3,r17,2aae0 <__alt_data_end+0xf402aae0>
   2acb8:	31bfff84 	addi	r6,r6,-2
   2acbc:	1dc7883a 	add	r3,r3,r23
   2acc0:	003f8806 	br	2aae4 <__alt_data_end+0xf402aae4>
   2acc4:	1805883a 	mov	r2,r3
   2acc8:	003fde06 	br	2ac44 <__alt_data_end+0xf402ac44>
   2accc:	1839883a 	mov	fp,r3
   2acd0:	003fc906 	br	2abf8 <__alt_data_end+0xf402abf8>
   2acd4:	b5bfff84 	addi	r22,r22,-2
   2acd8:	2449883a 	add	r4,r4,r17
   2acdc:	003f3406 	br	2a9b0 <__alt_data_end+0xf402a9b0>
   2ace0:	b5bfff84 	addi	r22,r22,-2
   2ace4:	1445883a 	add	r2,r2,r17
   2ace8:	003edb06 	br	2a858 <__alt_data_end+0xf402a858>

0002acec <__umoddi3>:
   2acec:	defff404 	addi	sp,sp,-48
   2acf0:	df000a15 	stw	fp,40(sp)
   2acf4:	dc400315 	stw	r17,12(sp)
   2acf8:	dc000215 	stw	r16,8(sp)
   2acfc:	dfc00b15 	stw	ra,44(sp)
   2ad00:	ddc00915 	stw	r23,36(sp)
   2ad04:	dd800815 	stw	r22,32(sp)
   2ad08:	dd400715 	stw	r21,28(sp)
   2ad0c:	dd000615 	stw	r20,24(sp)
   2ad10:	dcc00515 	stw	r19,20(sp)
   2ad14:	dc800415 	stw	r18,16(sp)
   2ad18:	2021883a 	mov	r16,r4
   2ad1c:	2823883a 	mov	r17,r5
   2ad20:	2839883a 	mov	fp,r5
   2ad24:	38003c1e 	bne	r7,zero,2ae18 <__umoddi3+0x12c>
   2ad28:	3027883a 	mov	r19,r6
   2ad2c:	2029883a 	mov	r20,r4
   2ad30:	2980512e 	bgeu	r5,r6,2ae78 <__umoddi3+0x18c>
   2ad34:	00bfffd4 	movui	r2,65535
   2ad38:	11809a36 	bltu	r2,r6,2afa4 <__umoddi3+0x2b8>
   2ad3c:	01003fc4 	movi	r4,255
   2ad40:	2189803a 	cmpltu	r4,r4,r6
   2ad44:	200890fa 	slli	r4,r4,3
   2ad48:	3104d83a 	srl	r2,r6,r4
   2ad4c:	00c000f4 	movhi	r3,3
   2ad50:	18c62f44 	addi	r3,r3,6333
   2ad54:	1885883a 	add	r2,r3,r2
   2ad58:	10c00003 	ldbu	r3,0(r2)
   2ad5c:	00800804 	movi	r2,32
   2ad60:	1909883a 	add	r4,r3,r4
   2ad64:	1125c83a 	sub	r18,r2,r4
   2ad68:	90000526 	beq	r18,zero,2ad80 <__umoddi3+0x94>
   2ad6c:	8ca2983a 	sll	r17,r17,r18
   2ad70:	8108d83a 	srl	r4,r16,r4
   2ad74:	34a6983a 	sll	r19,r6,r18
   2ad78:	84a8983a 	sll	r20,r16,r18
   2ad7c:	2478b03a 	or	fp,r4,r17
   2ad80:	982ed43a 	srli	r23,r19,16
   2ad84:	e009883a 	mov	r4,fp
   2ad88:	9dbfffcc 	andi	r22,r19,65535
   2ad8c:	b80b883a 	mov	r5,r23
   2ad90:	002b3800 	call	2b380 <__umodsi3>
   2ad94:	e009883a 	mov	r4,fp
   2ad98:	b80b883a 	mov	r5,r23
   2ad9c:	102b883a 	mov	r21,r2
   2ada0:	002b31c0 	call	2b31c <__udivsi3>
   2ada4:	a806943a 	slli	r3,r21,16
   2ada8:	a008d43a 	srli	r4,r20,16
   2adac:	b085383a 	mul	r2,r22,r2
   2adb0:	20c8b03a 	or	r4,r4,r3
   2adb4:	2080032e 	bgeu	r4,r2,2adc4 <__umoddi3+0xd8>
   2adb8:	24c9883a 	add	r4,r4,r19
   2adbc:	24c00136 	bltu	r4,r19,2adc4 <__umoddi3+0xd8>
   2adc0:	20811036 	bltu	r4,r2,2b204 <__umoddi3+0x518>
   2adc4:	20abc83a 	sub	r21,r4,r2
   2adc8:	b80b883a 	mov	r5,r23
   2adcc:	a809883a 	mov	r4,r21
   2add0:	002b3800 	call	2b380 <__umodsi3>
   2add4:	1023883a 	mov	r17,r2
   2add8:	b80b883a 	mov	r5,r23
   2addc:	a809883a 	mov	r4,r21
   2ade0:	002b31c0 	call	2b31c <__udivsi3>
   2ade4:	8822943a 	slli	r17,r17,16
   2ade8:	b085383a 	mul	r2,r22,r2
   2adec:	a0ffffcc 	andi	r3,r20,65535
   2adf0:	1c46b03a 	or	r3,r3,r17
   2adf4:	1880042e 	bgeu	r3,r2,2ae08 <__umoddi3+0x11c>
   2adf8:	1cc7883a 	add	r3,r3,r19
   2adfc:	1cc00236 	bltu	r3,r19,2ae08 <__umoddi3+0x11c>
   2ae00:	1880012e 	bgeu	r3,r2,2ae08 <__umoddi3+0x11c>
   2ae04:	1cc7883a 	add	r3,r3,r19
   2ae08:	1885c83a 	sub	r2,r3,r2
   2ae0c:	1484d83a 	srl	r2,r2,r18
   2ae10:	0007883a 	mov	r3,zero
   2ae14:	00004f06 	br	2af54 <__umoddi3+0x268>
   2ae18:	29c04c36 	bltu	r5,r7,2af4c <__umoddi3+0x260>
   2ae1c:	00bfffd4 	movui	r2,65535
   2ae20:	11c0582e 	bgeu	r2,r7,2af84 <__umoddi3+0x298>
   2ae24:	00804034 	movhi	r2,256
   2ae28:	10bfffc4 	addi	r2,r2,-1
   2ae2c:	11c0e736 	bltu	r2,r7,2b1cc <__umoddi3+0x4e0>
   2ae30:	01000404 	movi	r4,16
   2ae34:	3904d83a 	srl	r2,r7,r4
   2ae38:	00c000f4 	movhi	r3,3
   2ae3c:	18c62f44 	addi	r3,r3,6333
   2ae40:	1885883a 	add	r2,r3,r2
   2ae44:	14c00003 	ldbu	r19,0(r2)
   2ae48:	00c00804 	movi	r3,32
   2ae4c:	9927883a 	add	r19,r19,r4
   2ae50:	1ce9c83a 	sub	r20,r3,r19
   2ae54:	a000581e 	bne	r20,zero,2afb8 <__umoddi3+0x2cc>
   2ae58:	3c400136 	bltu	r7,r17,2ae60 <__umoddi3+0x174>
   2ae5c:	8180eb36 	bltu	r16,r6,2b20c <__umoddi3+0x520>
   2ae60:	8185c83a 	sub	r2,r16,r6
   2ae64:	89e3c83a 	sub	r17,r17,r7
   2ae68:	8089803a 	cmpltu	r4,r16,r2
   2ae6c:	8939c83a 	sub	fp,r17,r4
   2ae70:	e007883a 	mov	r3,fp
   2ae74:	00003706 	br	2af54 <__umoddi3+0x268>
   2ae78:	3000041e 	bne	r6,zero,2ae8c <__umoddi3+0x1a0>
   2ae7c:	000b883a 	mov	r5,zero
   2ae80:	01000044 	movi	r4,1
   2ae84:	002b31c0 	call	2b31c <__udivsi3>
   2ae88:	1027883a 	mov	r19,r2
   2ae8c:	00bfffd4 	movui	r2,65535
   2ae90:	14c0402e 	bgeu	r2,r19,2af94 <__umoddi3+0x2a8>
   2ae94:	00804034 	movhi	r2,256
   2ae98:	10bfffc4 	addi	r2,r2,-1
   2ae9c:	14c0cd36 	bltu	r2,r19,2b1d4 <__umoddi3+0x4e8>
   2aea0:	00800404 	movi	r2,16
   2aea4:	9886d83a 	srl	r3,r19,r2
   2aea8:	010000f4 	movhi	r4,3
   2aeac:	21062f44 	addi	r4,r4,6333
   2aeb0:	20c7883a 	add	r3,r4,r3
   2aeb4:	18c00003 	ldbu	r3,0(r3)
   2aeb8:	1887883a 	add	r3,r3,r2
   2aebc:	00800804 	movi	r2,32
   2aec0:	10e5c83a 	sub	r18,r2,r3
   2aec4:	9000901e 	bne	r18,zero,2b108 <__umoddi3+0x41c>
   2aec8:	982cd43a 	srli	r22,r19,16
   2aecc:	8ce3c83a 	sub	r17,r17,r19
   2aed0:	9d7fffcc 	andi	r21,r19,65535
   2aed4:	b00b883a 	mov	r5,r22
   2aed8:	8809883a 	mov	r4,r17
   2aedc:	002b3800 	call	2b380 <__umodsi3>
   2aee0:	8809883a 	mov	r4,r17
   2aee4:	b00b883a 	mov	r5,r22
   2aee8:	1021883a 	mov	r16,r2
   2aeec:	002b31c0 	call	2b31c <__udivsi3>
   2aef0:	8006943a 	slli	r3,r16,16
   2aef4:	a008d43a 	srli	r4,r20,16
   2aef8:	1545383a 	mul	r2,r2,r21
   2aefc:	20c8b03a 	or	r4,r4,r3
   2af00:	2080042e 	bgeu	r4,r2,2af14 <__umoddi3+0x228>
   2af04:	24c9883a 	add	r4,r4,r19
   2af08:	24c00236 	bltu	r4,r19,2af14 <__umoddi3+0x228>
   2af0c:	2080012e 	bgeu	r4,r2,2af14 <__umoddi3+0x228>
   2af10:	24c9883a 	add	r4,r4,r19
   2af14:	20a1c83a 	sub	r16,r4,r2
   2af18:	b00b883a 	mov	r5,r22
   2af1c:	8009883a 	mov	r4,r16
   2af20:	002b3800 	call	2b380 <__umodsi3>
   2af24:	1023883a 	mov	r17,r2
   2af28:	b00b883a 	mov	r5,r22
   2af2c:	8009883a 	mov	r4,r16
   2af30:	002b31c0 	call	2b31c <__udivsi3>
   2af34:	8822943a 	slli	r17,r17,16
   2af38:	1545383a 	mul	r2,r2,r21
   2af3c:	a53fffcc 	andi	r20,r20,65535
   2af40:	a446b03a 	or	r3,r20,r17
   2af44:	18bfb02e 	bgeu	r3,r2,2ae08 <__alt_data_end+0xf402ae08>
   2af48:	003fab06 	br	2adf8 <__alt_data_end+0xf402adf8>
   2af4c:	2005883a 	mov	r2,r4
   2af50:	2807883a 	mov	r3,r5
   2af54:	dfc00b17 	ldw	ra,44(sp)
   2af58:	df000a17 	ldw	fp,40(sp)
   2af5c:	ddc00917 	ldw	r23,36(sp)
   2af60:	dd800817 	ldw	r22,32(sp)
   2af64:	dd400717 	ldw	r21,28(sp)
   2af68:	dd000617 	ldw	r20,24(sp)
   2af6c:	dcc00517 	ldw	r19,20(sp)
   2af70:	dc800417 	ldw	r18,16(sp)
   2af74:	dc400317 	ldw	r17,12(sp)
   2af78:	dc000217 	ldw	r16,8(sp)
   2af7c:	dec00c04 	addi	sp,sp,48
   2af80:	f800283a 	ret
   2af84:	04c03fc4 	movi	r19,255
   2af88:	99c9803a 	cmpltu	r4,r19,r7
   2af8c:	200890fa 	slli	r4,r4,3
   2af90:	003fa806 	br	2ae34 <__alt_data_end+0xf402ae34>
   2af94:	00803fc4 	movi	r2,255
   2af98:	14c5803a 	cmpltu	r2,r2,r19
   2af9c:	100490fa 	slli	r2,r2,3
   2afa0:	003fc006 	br	2aea4 <__alt_data_end+0xf402aea4>
   2afa4:	00804034 	movhi	r2,256
   2afa8:	10bfffc4 	addi	r2,r2,-1
   2afac:	11808b36 	bltu	r2,r6,2b1dc <__umoddi3+0x4f0>
   2afb0:	01000404 	movi	r4,16
   2afb4:	003f6406 	br	2ad48 <__alt_data_end+0xf402ad48>
   2afb8:	34c4d83a 	srl	r2,r6,r19
   2afbc:	3d0e983a 	sll	r7,r7,r20
   2afc0:	8cf8d83a 	srl	fp,r17,r19
   2afc4:	8d10983a 	sll	r8,r17,r20
   2afc8:	38aab03a 	or	r21,r7,r2
   2afcc:	a82cd43a 	srli	r22,r21,16
   2afd0:	84e2d83a 	srl	r17,r16,r19
   2afd4:	e009883a 	mov	r4,fp
   2afd8:	b00b883a 	mov	r5,r22
   2afdc:	8a22b03a 	or	r17,r17,r8
   2afe0:	3524983a 	sll	r18,r6,r20
   2afe4:	002b3800 	call	2b380 <__umodsi3>
   2afe8:	e009883a 	mov	r4,fp
   2afec:	b00b883a 	mov	r5,r22
   2aff0:	102f883a 	mov	r23,r2
   2aff4:	002b31c0 	call	2b31c <__udivsi3>
   2aff8:	100d883a 	mov	r6,r2
   2affc:	b808943a 	slli	r4,r23,16
   2b000:	aa3fffcc 	andi	r8,r21,65535
   2b004:	8804d43a 	srli	r2,r17,16
   2b008:	41af383a 	mul	r23,r8,r6
   2b00c:	8520983a 	sll	r16,r16,r20
   2b010:	1104b03a 	or	r2,r2,r4
   2b014:	15c0042e 	bgeu	r2,r23,2b028 <__umoddi3+0x33c>
   2b018:	1545883a 	add	r2,r2,r21
   2b01c:	30ffffc4 	addi	r3,r6,-1
   2b020:	1540742e 	bgeu	r2,r21,2b1f4 <__umoddi3+0x508>
   2b024:	180d883a 	mov	r6,r3
   2b028:	15efc83a 	sub	r23,r2,r23
   2b02c:	b00b883a 	mov	r5,r22
   2b030:	b809883a 	mov	r4,r23
   2b034:	d9800115 	stw	r6,4(sp)
   2b038:	da000015 	stw	r8,0(sp)
   2b03c:	002b3800 	call	2b380 <__umodsi3>
   2b040:	b00b883a 	mov	r5,r22
   2b044:	b809883a 	mov	r4,r23
   2b048:	1039883a 	mov	fp,r2
   2b04c:	002b31c0 	call	2b31c <__udivsi3>
   2b050:	da000017 	ldw	r8,0(sp)
   2b054:	e038943a 	slli	fp,fp,16
   2b058:	100b883a 	mov	r5,r2
   2b05c:	4089383a 	mul	r4,r8,r2
   2b060:	8a3fffcc 	andi	r8,r17,65535
   2b064:	4710b03a 	or	r8,r8,fp
   2b068:	d9800117 	ldw	r6,4(sp)
   2b06c:	4100042e 	bgeu	r8,r4,2b080 <__umoddi3+0x394>
   2b070:	4551883a 	add	r8,r8,r21
   2b074:	10bfffc4 	addi	r2,r2,-1
   2b078:	45405a2e 	bgeu	r8,r21,2b1e4 <__umoddi3+0x4f8>
   2b07c:	100b883a 	mov	r5,r2
   2b080:	300c943a 	slli	r6,r6,16
   2b084:	91ffffcc 	andi	r7,r18,65535
   2b088:	9004d43a 	srli	r2,r18,16
   2b08c:	314cb03a 	or	r6,r6,r5
   2b090:	317fffcc 	andi	r5,r6,65535
   2b094:	300cd43a 	srli	r6,r6,16
   2b098:	29d3383a 	mul	r9,r5,r7
   2b09c:	288b383a 	mul	r5,r5,r2
   2b0a0:	31cf383a 	mul	r7,r6,r7
   2b0a4:	4806d43a 	srli	r3,r9,16
   2b0a8:	4111c83a 	sub	r8,r8,r4
   2b0ac:	29cb883a 	add	r5,r5,r7
   2b0b0:	194b883a 	add	r5,r3,r5
   2b0b4:	3085383a 	mul	r2,r6,r2
   2b0b8:	29c0022e 	bgeu	r5,r7,2b0c4 <__umoddi3+0x3d8>
   2b0bc:	00c00074 	movhi	r3,1
   2b0c0:	10c5883a 	add	r2,r2,r3
   2b0c4:	2808d43a 	srli	r4,r5,16
   2b0c8:	280a943a 	slli	r5,r5,16
   2b0cc:	4a7fffcc 	andi	r9,r9,65535
   2b0d0:	2085883a 	add	r2,r4,r2
   2b0d4:	2a4b883a 	add	r5,r5,r9
   2b0d8:	40803636 	bltu	r8,r2,2b1b4 <__umoddi3+0x4c8>
   2b0dc:	40804d26 	beq	r8,r2,2b214 <__umoddi3+0x528>
   2b0e0:	4089c83a 	sub	r4,r8,r2
   2b0e4:	280f883a 	mov	r7,r5
   2b0e8:	81cfc83a 	sub	r7,r16,r7
   2b0ec:	81c7803a 	cmpltu	r3,r16,r7
   2b0f0:	20c7c83a 	sub	r3,r4,r3
   2b0f4:	1cc4983a 	sll	r2,r3,r19
   2b0f8:	3d0ed83a 	srl	r7,r7,r20
   2b0fc:	1d06d83a 	srl	r3,r3,r20
   2b100:	11c4b03a 	or	r2,r2,r7
   2b104:	003f9306 	br	2af54 <__alt_data_end+0xf402af54>
   2b108:	9ca6983a 	sll	r19,r19,r18
   2b10c:	88e8d83a 	srl	r20,r17,r3
   2b110:	80c4d83a 	srl	r2,r16,r3
   2b114:	982cd43a 	srli	r22,r19,16
   2b118:	8ca2983a 	sll	r17,r17,r18
   2b11c:	a009883a 	mov	r4,r20
   2b120:	b00b883a 	mov	r5,r22
   2b124:	1478b03a 	or	fp,r2,r17
   2b128:	002b3800 	call	2b380 <__umodsi3>
   2b12c:	a009883a 	mov	r4,r20
   2b130:	b00b883a 	mov	r5,r22
   2b134:	1023883a 	mov	r17,r2
   2b138:	002b31c0 	call	2b31c <__udivsi3>
   2b13c:	9d7fffcc 	andi	r21,r19,65535
   2b140:	880a943a 	slli	r5,r17,16
   2b144:	e008d43a 	srli	r4,fp,16
   2b148:	a885383a 	mul	r2,r21,r2
   2b14c:	84a8983a 	sll	r20,r16,r18
   2b150:	2148b03a 	or	r4,r4,r5
   2b154:	2080042e 	bgeu	r4,r2,2b168 <__umoddi3+0x47c>
   2b158:	24c9883a 	add	r4,r4,r19
   2b15c:	24c00236 	bltu	r4,r19,2b168 <__umoddi3+0x47c>
   2b160:	2080012e 	bgeu	r4,r2,2b168 <__umoddi3+0x47c>
   2b164:	24c9883a 	add	r4,r4,r19
   2b168:	20a3c83a 	sub	r17,r4,r2
   2b16c:	b00b883a 	mov	r5,r22
   2b170:	8809883a 	mov	r4,r17
   2b174:	002b3800 	call	2b380 <__umodsi3>
   2b178:	102f883a 	mov	r23,r2
   2b17c:	8809883a 	mov	r4,r17
   2b180:	b00b883a 	mov	r5,r22
   2b184:	002b31c0 	call	2b31c <__udivsi3>
   2b188:	b82e943a 	slli	r23,r23,16
   2b18c:	a885383a 	mul	r2,r21,r2
   2b190:	e13fffcc 	andi	r4,fp,65535
   2b194:	25c8b03a 	or	r4,r4,r23
   2b198:	2080042e 	bgeu	r4,r2,2b1ac <__umoddi3+0x4c0>
   2b19c:	24c9883a 	add	r4,r4,r19
   2b1a0:	24c00236 	bltu	r4,r19,2b1ac <__umoddi3+0x4c0>
   2b1a4:	2080012e 	bgeu	r4,r2,2b1ac <__umoddi3+0x4c0>
   2b1a8:	24c9883a 	add	r4,r4,r19
   2b1ac:	20a3c83a 	sub	r17,r4,r2
   2b1b0:	003f4806 	br	2aed4 <__alt_data_end+0xf402aed4>
   2b1b4:	2c8fc83a 	sub	r7,r5,r18
   2b1b8:	1545c83a 	sub	r2,r2,r21
   2b1bc:	29cb803a 	cmpltu	r5,r5,r7
   2b1c0:	1145c83a 	sub	r2,r2,r5
   2b1c4:	4089c83a 	sub	r4,r8,r2
   2b1c8:	003fc706 	br	2b0e8 <__alt_data_end+0xf402b0e8>
   2b1cc:	01000604 	movi	r4,24
   2b1d0:	003f1806 	br	2ae34 <__alt_data_end+0xf402ae34>
   2b1d4:	00800604 	movi	r2,24
   2b1d8:	003f3206 	br	2aea4 <__alt_data_end+0xf402aea4>
   2b1dc:	01000604 	movi	r4,24
   2b1e0:	003ed906 	br	2ad48 <__alt_data_end+0xf402ad48>
   2b1e4:	413fa52e 	bgeu	r8,r4,2b07c <__alt_data_end+0xf402b07c>
   2b1e8:	297fff84 	addi	r5,r5,-2
   2b1ec:	4551883a 	add	r8,r8,r21
   2b1f0:	003fa306 	br	2b080 <__alt_data_end+0xf402b080>
   2b1f4:	15ff8b2e 	bgeu	r2,r23,2b024 <__alt_data_end+0xf402b024>
   2b1f8:	31bfff84 	addi	r6,r6,-2
   2b1fc:	1545883a 	add	r2,r2,r21
   2b200:	003f8906 	br	2b028 <__alt_data_end+0xf402b028>
   2b204:	24c9883a 	add	r4,r4,r19
   2b208:	003eee06 	br	2adc4 <__alt_data_end+0xf402adc4>
   2b20c:	8005883a 	mov	r2,r16
   2b210:	003f1706 	br	2ae70 <__alt_data_end+0xf402ae70>
   2b214:	817fe736 	bltu	r16,r5,2b1b4 <__alt_data_end+0xf402b1b4>
   2b218:	280f883a 	mov	r7,r5
   2b21c:	0009883a 	mov	r4,zero
   2b220:	003fb106 	br	2b0e8 <__alt_data_end+0xf402b0e8>

0002b224 <__divsi3>:
   2b224:	20001b16 	blt	r4,zero,2b294 <__divsi3+0x70>
   2b228:	000f883a 	mov	r7,zero
   2b22c:	28001616 	blt	r5,zero,2b288 <__divsi3+0x64>
   2b230:	200d883a 	mov	r6,r4
   2b234:	29001a2e 	bgeu	r5,r4,2b2a0 <__divsi3+0x7c>
   2b238:	00800804 	movi	r2,32
   2b23c:	00c00044 	movi	r3,1
   2b240:	00000106 	br	2b248 <__divsi3+0x24>
   2b244:	10000d26 	beq	r2,zero,2b27c <__divsi3+0x58>
   2b248:	294b883a 	add	r5,r5,r5
   2b24c:	10bfffc4 	addi	r2,r2,-1
   2b250:	18c7883a 	add	r3,r3,r3
   2b254:	293ffb36 	bltu	r5,r4,2b244 <__alt_data_end+0xf402b244>
   2b258:	0005883a 	mov	r2,zero
   2b25c:	18000726 	beq	r3,zero,2b27c <__divsi3+0x58>
   2b260:	0005883a 	mov	r2,zero
   2b264:	31400236 	bltu	r6,r5,2b270 <__divsi3+0x4c>
   2b268:	314dc83a 	sub	r6,r6,r5
   2b26c:	10c4b03a 	or	r2,r2,r3
   2b270:	1806d07a 	srli	r3,r3,1
   2b274:	280ad07a 	srli	r5,r5,1
   2b278:	183ffa1e 	bne	r3,zero,2b264 <__alt_data_end+0xf402b264>
   2b27c:	38000126 	beq	r7,zero,2b284 <__divsi3+0x60>
   2b280:	0085c83a 	sub	r2,zero,r2
   2b284:	f800283a 	ret
   2b288:	014bc83a 	sub	r5,zero,r5
   2b28c:	39c0005c 	xori	r7,r7,1
   2b290:	003fe706 	br	2b230 <__alt_data_end+0xf402b230>
   2b294:	0109c83a 	sub	r4,zero,r4
   2b298:	01c00044 	movi	r7,1
   2b29c:	003fe306 	br	2b22c <__alt_data_end+0xf402b22c>
   2b2a0:	00c00044 	movi	r3,1
   2b2a4:	003fee06 	br	2b260 <__alt_data_end+0xf402b260>

0002b2a8 <__modsi3>:
   2b2a8:	20001716 	blt	r4,zero,2b308 <__modsi3+0x60>
   2b2ac:	000f883a 	mov	r7,zero
   2b2b0:	2005883a 	mov	r2,r4
   2b2b4:	28001216 	blt	r5,zero,2b300 <__modsi3+0x58>
   2b2b8:	2900162e 	bgeu	r5,r4,2b314 <__modsi3+0x6c>
   2b2bc:	01800804 	movi	r6,32
   2b2c0:	00c00044 	movi	r3,1
   2b2c4:	00000106 	br	2b2cc <__modsi3+0x24>
   2b2c8:	30000a26 	beq	r6,zero,2b2f4 <__modsi3+0x4c>
   2b2cc:	294b883a 	add	r5,r5,r5
   2b2d0:	31bfffc4 	addi	r6,r6,-1
   2b2d4:	18c7883a 	add	r3,r3,r3
   2b2d8:	293ffb36 	bltu	r5,r4,2b2c8 <__alt_data_end+0xf402b2c8>
   2b2dc:	18000526 	beq	r3,zero,2b2f4 <__modsi3+0x4c>
   2b2e0:	1806d07a 	srli	r3,r3,1
   2b2e4:	11400136 	bltu	r2,r5,2b2ec <__modsi3+0x44>
   2b2e8:	1145c83a 	sub	r2,r2,r5
   2b2ec:	280ad07a 	srli	r5,r5,1
   2b2f0:	183ffb1e 	bne	r3,zero,2b2e0 <__alt_data_end+0xf402b2e0>
   2b2f4:	38000126 	beq	r7,zero,2b2fc <__modsi3+0x54>
   2b2f8:	0085c83a 	sub	r2,zero,r2
   2b2fc:	f800283a 	ret
   2b300:	014bc83a 	sub	r5,zero,r5
   2b304:	003fec06 	br	2b2b8 <__alt_data_end+0xf402b2b8>
   2b308:	0109c83a 	sub	r4,zero,r4
   2b30c:	01c00044 	movi	r7,1
   2b310:	003fe706 	br	2b2b0 <__alt_data_end+0xf402b2b0>
   2b314:	00c00044 	movi	r3,1
   2b318:	003ff106 	br	2b2e0 <__alt_data_end+0xf402b2e0>

0002b31c <__udivsi3>:
   2b31c:	200d883a 	mov	r6,r4
   2b320:	2900152e 	bgeu	r5,r4,2b378 <__udivsi3+0x5c>
   2b324:	28001416 	blt	r5,zero,2b378 <__udivsi3+0x5c>
   2b328:	00800804 	movi	r2,32
   2b32c:	00c00044 	movi	r3,1
   2b330:	00000206 	br	2b33c <__udivsi3+0x20>
   2b334:	10000e26 	beq	r2,zero,2b370 <__udivsi3+0x54>
   2b338:	28000516 	blt	r5,zero,2b350 <__udivsi3+0x34>
   2b33c:	294b883a 	add	r5,r5,r5
   2b340:	10bfffc4 	addi	r2,r2,-1
   2b344:	18c7883a 	add	r3,r3,r3
   2b348:	293ffa36 	bltu	r5,r4,2b334 <__alt_data_end+0xf402b334>
   2b34c:	18000826 	beq	r3,zero,2b370 <__udivsi3+0x54>
   2b350:	0005883a 	mov	r2,zero
   2b354:	31400236 	bltu	r6,r5,2b360 <__udivsi3+0x44>
   2b358:	314dc83a 	sub	r6,r6,r5
   2b35c:	10c4b03a 	or	r2,r2,r3
   2b360:	1806d07a 	srli	r3,r3,1
   2b364:	280ad07a 	srli	r5,r5,1
   2b368:	183ffa1e 	bne	r3,zero,2b354 <__alt_data_end+0xf402b354>
   2b36c:	f800283a 	ret
   2b370:	0005883a 	mov	r2,zero
   2b374:	f800283a 	ret
   2b378:	00c00044 	movi	r3,1
   2b37c:	003ff406 	br	2b350 <__alt_data_end+0xf402b350>

0002b380 <__umodsi3>:
   2b380:	2005883a 	mov	r2,r4
   2b384:	2900122e 	bgeu	r5,r4,2b3d0 <__umodsi3+0x50>
   2b388:	28001116 	blt	r5,zero,2b3d0 <__umodsi3+0x50>
   2b38c:	01800804 	movi	r6,32
   2b390:	00c00044 	movi	r3,1
   2b394:	00000206 	br	2b3a0 <__umodsi3+0x20>
   2b398:	30000c26 	beq	r6,zero,2b3cc <__umodsi3+0x4c>
   2b39c:	28000516 	blt	r5,zero,2b3b4 <__umodsi3+0x34>
   2b3a0:	294b883a 	add	r5,r5,r5
   2b3a4:	31bfffc4 	addi	r6,r6,-1
   2b3a8:	18c7883a 	add	r3,r3,r3
   2b3ac:	293ffa36 	bltu	r5,r4,2b398 <__alt_data_end+0xf402b398>
   2b3b0:	18000626 	beq	r3,zero,2b3cc <__umodsi3+0x4c>
   2b3b4:	1806d07a 	srli	r3,r3,1
   2b3b8:	11400136 	bltu	r2,r5,2b3c0 <__umodsi3+0x40>
   2b3bc:	1145c83a 	sub	r2,r2,r5
   2b3c0:	280ad07a 	srli	r5,r5,1
   2b3c4:	183ffb1e 	bne	r3,zero,2b3b4 <__alt_data_end+0xf402b3b4>
   2b3c8:	f800283a 	ret
   2b3cc:	f800283a 	ret
   2b3d0:	00c00044 	movi	r3,1
   2b3d4:	003ff706 	br	2b3b4 <__alt_data_end+0xf402b3b4>

0002b3d8 <__adddf3>:
   2b3d8:	02c00434 	movhi	r11,16
   2b3dc:	5affffc4 	addi	r11,r11,-1
   2b3e0:	2806d7fa 	srli	r3,r5,31
   2b3e4:	2ad4703a 	and	r10,r5,r11
   2b3e8:	3ad2703a 	and	r9,r7,r11
   2b3ec:	3804d53a 	srli	r2,r7,20
   2b3f0:	3018d77a 	srli	r12,r6,29
   2b3f4:	280ad53a 	srli	r5,r5,20
   2b3f8:	501490fa 	slli	r10,r10,3
   2b3fc:	2010d77a 	srli	r8,r4,29
   2b400:	481290fa 	slli	r9,r9,3
   2b404:	380ed7fa 	srli	r7,r7,31
   2b408:	defffb04 	addi	sp,sp,-20
   2b40c:	dc800215 	stw	r18,8(sp)
   2b410:	dc400115 	stw	r17,4(sp)
   2b414:	dc000015 	stw	r16,0(sp)
   2b418:	dfc00415 	stw	ra,16(sp)
   2b41c:	dcc00315 	stw	r19,12(sp)
   2b420:	1c803fcc 	andi	r18,r3,255
   2b424:	2c01ffcc 	andi	r16,r5,2047
   2b428:	5210b03a 	or	r8,r10,r8
   2b42c:	202290fa 	slli	r17,r4,3
   2b430:	1081ffcc 	andi	r2,r2,2047
   2b434:	4b12b03a 	or	r9,r9,r12
   2b438:	300c90fa 	slli	r6,r6,3
   2b43c:	91c07526 	beq	r18,r7,2b614 <__adddf3+0x23c>
   2b440:	8087c83a 	sub	r3,r16,r2
   2b444:	00c0ab0e 	bge	zero,r3,2b6f4 <__adddf3+0x31c>
   2b448:	10002a1e 	bne	r2,zero,2b4f4 <__adddf3+0x11c>
   2b44c:	4984b03a 	or	r2,r9,r6
   2b450:	1000961e 	bne	r2,zero,2b6ac <__adddf3+0x2d4>
   2b454:	888001cc 	andi	r2,r17,7
   2b458:	10000726 	beq	r2,zero,2b478 <__adddf3+0xa0>
   2b45c:	888003cc 	andi	r2,r17,15
   2b460:	00c00104 	movi	r3,4
   2b464:	10c00426 	beq	r2,r3,2b478 <__adddf3+0xa0>
   2b468:	88c7883a 	add	r3,r17,r3
   2b46c:	1c63803a 	cmpltu	r17,r3,r17
   2b470:	4451883a 	add	r8,r8,r17
   2b474:	1823883a 	mov	r17,r3
   2b478:	4080202c 	andhi	r2,r8,128
   2b47c:	10005926 	beq	r2,zero,2b5e4 <__adddf3+0x20c>
   2b480:	84000044 	addi	r16,r16,1
   2b484:	0081ffc4 	movi	r2,2047
   2b488:	8080ba26 	beq	r16,r2,2b774 <__adddf3+0x39c>
   2b48c:	00bfe034 	movhi	r2,65408
   2b490:	10bfffc4 	addi	r2,r2,-1
   2b494:	4090703a 	and	r8,r8,r2
   2b498:	4004977a 	slli	r2,r8,29
   2b49c:	4010927a 	slli	r8,r8,9
   2b4a0:	8822d0fa 	srli	r17,r17,3
   2b4a4:	8401ffcc 	andi	r16,r16,2047
   2b4a8:	4010d33a 	srli	r8,r8,12
   2b4ac:	9007883a 	mov	r3,r18
   2b4b0:	1444b03a 	or	r2,r2,r17
   2b4b4:	8401ffcc 	andi	r16,r16,2047
   2b4b8:	8020953a 	slli	r16,r16,20
   2b4bc:	18c03fcc 	andi	r3,r3,255
   2b4c0:	01000434 	movhi	r4,16
   2b4c4:	213fffc4 	addi	r4,r4,-1
   2b4c8:	180697fa 	slli	r3,r3,31
   2b4cc:	4110703a 	and	r8,r8,r4
   2b4d0:	4410b03a 	or	r8,r8,r16
   2b4d4:	40c6b03a 	or	r3,r8,r3
   2b4d8:	dfc00417 	ldw	ra,16(sp)
   2b4dc:	dcc00317 	ldw	r19,12(sp)
   2b4e0:	dc800217 	ldw	r18,8(sp)
   2b4e4:	dc400117 	ldw	r17,4(sp)
   2b4e8:	dc000017 	ldw	r16,0(sp)
   2b4ec:	dec00504 	addi	sp,sp,20
   2b4f0:	f800283a 	ret
   2b4f4:	0081ffc4 	movi	r2,2047
   2b4f8:	80bfd626 	beq	r16,r2,2b454 <__alt_data_end+0xf402b454>
   2b4fc:	4a402034 	orhi	r9,r9,128
   2b500:	00800e04 	movi	r2,56
   2b504:	10c09f16 	blt	r2,r3,2b784 <__adddf3+0x3ac>
   2b508:	008007c4 	movi	r2,31
   2b50c:	10c0c216 	blt	r2,r3,2b818 <__adddf3+0x440>
   2b510:	00800804 	movi	r2,32
   2b514:	10c5c83a 	sub	r2,r2,r3
   2b518:	488a983a 	sll	r5,r9,r2
   2b51c:	30c8d83a 	srl	r4,r6,r3
   2b520:	3084983a 	sll	r2,r6,r2
   2b524:	48c6d83a 	srl	r3,r9,r3
   2b528:	290cb03a 	or	r6,r5,r4
   2b52c:	1004c03a 	cmpne	r2,r2,zero
   2b530:	308cb03a 	or	r6,r6,r2
   2b534:	898dc83a 	sub	r6,r17,r6
   2b538:	89a3803a 	cmpltu	r17,r17,r6
   2b53c:	40d1c83a 	sub	r8,r8,r3
   2b540:	4451c83a 	sub	r8,r8,r17
   2b544:	3023883a 	mov	r17,r6
   2b548:	4080202c 	andhi	r2,r8,128
   2b54c:	10002326 	beq	r2,zero,2b5dc <__adddf3+0x204>
   2b550:	04c02034 	movhi	r19,128
   2b554:	9cffffc4 	addi	r19,r19,-1
   2b558:	44e6703a 	and	r19,r8,r19
   2b55c:	98007626 	beq	r19,zero,2b738 <__adddf3+0x360>
   2b560:	9809883a 	mov	r4,r19
   2b564:	00210bc0 	call	210bc <__clzsi2>
   2b568:	10fffe04 	addi	r3,r2,-8
   2b56c:	010007c4 	movi	r4,31
   2b570:	20c07716 	blt	r4,r3,2b750 <__adddf3+0x378>
   2b574:	00800804 	movi	r2,32
   2b578:	10c5c83a 	sub	r2,r2,r3
   2b57c:	8884d83a 	srl	r2,r17,r2
   2b580:	98d0983a 	sll	r8,r19,r3
   2b584:	88e2983a 	sll	r17,r17,r3
   2b588:	1204b03a 	or	r2,r2,r8
   2b58c:	1c007416 	blt	r3,r16,2b760 <__adddf3+0x388>
   2b590:	1c21c83a 	sub	r16,r3,r16
   2b594:	82000044 	addi	r8,r16,1
   2b598:	00c007c4 	movi	r3,31
   2b59c:	1a009116 	blt	r3,r8,2b7e4 <__adddf3+0x40c>
   2b5a0:	00c00804 	movi	r3,32
   2b5a4:	1a07c83a 	sub	r3,r3,r8
   2b5a8:	8a08d83a 	srl	r4,r17,r8
   2b5ac:	88e2983a 	sll	r17,r17,r3
   2b5b0:	10c6983a 	sll	r3,r2,r3
   2b5b4:	1210d83a 	srl	r8,r2,r8
   2b5b8:	8804c03a 	cmpne	r2,r17,zero
   2b5bc:	1906b03a 	or	r3,r3,r4
   2b5c0:	18a2b03a 	or	r17,r3,r2
   2b5c4:	0021883a 	mov	r16,zero
   2b5c8:	003fa206 	br	2b454 <__alt_data_end+0xf402b454>
   2b5cc:	1890b03a 	or	r8,r3,r2
   2b5d0:	40017d26 	beq	r8,zero,2bbc8 <__adddf3+0x7f0>
   2b5d4:	1011883a 	mov	r8,r2
   2b5d8:	1823883a 	mov	r17,r3
   2b5dc:	888001cc 	andi	r2,r17,7
   2b5e0:	103f9e1e 	bne	r2,zero,2b45c <__alt_data_end+0xf402b45c>
   2b5e4:	4004977a 	slli	r2,r8,29
   2b5e8:	8822d0fa 	srli	r17,r17,3
   2b5ec:	4010d0fa 	srli	r8,r8,3
   2b5f0:	9007883a 	mov	r3,r18
   2b5f4:	1444b03a 	or	r2,r2,r17
   2b5f8:	0101ffc4 	movi	r4,2047
   2b5fc:	81002426 	beq	r16,r4,2b690 <__adddf3+0x2b8>
   2b600:	8120703a 	and	r16,r16,r4
   2b604:	01000434 	movhi	r4,16
   2b608:	213fffc4 	addi	r4,r4,-1
   2b60c:	4110703a 	and	r8,r8,r4
   2b610:	003fa806 	br	2b4b4 <__alt_data_end+0xf402b4b4>
   2b614:	8089c83a 	sub	r4,r16,r2
   2b618:	01005e0e 	bge	zero,r4,2b794 <__adddf3+0x3bc>
   2b61c:	10002b26 	beq	r2,zero,2b6cc <__adddf3+0x2f4>
   2b620:	0081ffc4 	movi	r2,2047
   2b624:	80bf8b26 	beq	r16,r2,2b454 <__alt_data_end+0xf402b454>
   2b628:	4a402034 	orhi	r9,r9,128
   2b62c:	00800e04 	movi	r2,56
   2b630:	1100a40e 	bge	r2,r4,2b8c4 <__adddf3+0x4ec>
   2b634:	498cb03a 	or	r6,r9,r6
   2b638:	300ac03a 	cmpne	r5,r6,zero
   2b63c:	0013883a 	mov	r9,zero
   2b640:	2c4b883a 	add	r5,r5,r17
   2b644:	2c63803a 	cmpltu	r17,r5,r17
   2b648:	4a11883a 	add	r8,r9,r8
   2b64c:	8a11883a 	add	r8,r17,r8
   2b650:	2823883a 	mov	r17,r5
   2b654:	4080202c 	andhi	r2,r8,128
   2b658:	103fe026 	beq	r2,zero,2b5dc <__alt_data_end+0xf402b5dc>
   2b65c:	84000044 	addi	r16,r16,1
   2b660:	0081ffc4 	movi	r2,2047
   2b664:	8080d226 	beq	r16,r2,2b9b0 <__adddf3+0x5d8>
   2b668:	00bfe034 	movhi	r2,65408
   2b66c:	10bfffc4 	addi	r2,r2,-1
   2b670:	4090703a 	and	r8,r8,r2
   2b674:	880ad07a 	srli	r5,r17,1
   2b678:	400897fa 	slli	r4,r8,31
   2b67c:	88c0004c 	andi	r3,r17,1
   2b680:	28e2b03a 	or	r17,r5,r3
   2b684:	4010d07a 	srli	r8,r8,1
   2b688:	2462b03a 	or	r17,r4,r17
   2b68c:	003f7106 	br	2b454 <__alt_data_end+0xf402b454>
   2b690:	4088b03a 	or	r4,r8,r2
   2b694:	20014526 	beq	r4,zero,2bbac <__adddf3+0x7d4>
   2b698:	01000434 	movhi	r4,16
   2b69c:	42000234 	orhi	r8,r8,8
   2b6a0:	213fffc4 	addi	r4,r4,-1
   2b6a4:	4110703a 	and	r8,r8,r4
   2b6a8:	003f8206 	br	2b4b4 <__alt_data_end+0xf402b4b4>
   2b6ac:	18ffffc4 	addi	r3,r3,-1
   2b6b0:	1800491e 	bne	r3,zero,2b7d8 <__adddf3+0x400>
   2b6b4:	898bc83a 	sub	r5,r17,r6
   2b6b8:	8963803a 	cmpltu	r17,r17,r5
   2b6bc:	4251c83a 	sub	r8,r8,r9
   2b6c0:	4451c83a 	sub	r8,r8,r17
   2b6c4:	2823883a 	mov	r17,r5
   2b6c8:	003f9f06 	br	2b548 <__alt_data_end+0xf402b548>
   2b6cc:	4984b03a 	or	r2,r9,r6
   2b6d0:	103f6026 	beq	r2,zero,2b454 <__alt_data_end+0xf402b454>
   2b6d4:	213fffc4 	addi	r4,r4,-1
   2b6d8:	2000931e 	bne	r4,zero,2b928 <__adddf3+0x550>
   2b6dc:	898d883a 	add	r6,r17,r6
   2b6e0:	3463803a 	cmpltu	r17,r6,r17
   2b6e4:	4251883a 	add	r8,r8,r9
   2b6e8:	8a11883a 	add	r8,r17,r8
   2b6ec:	3023883a 	mov	r17,r6
   2b6f0:	003fd806 	br	2b654 <__alt_data_end+0xf402b654>
   2b6f4:	1800541e 	bne	r3,zero,2b848 <__adddf3+0x470>
   2b6f8:	80800044 	addi	r2,r16,1
   2b6fc:	1081ffcc 	andi	r2,r2,2047
   2b700:	00c00044 	movi	r3,1
   2b704:	1880a00e 	bge	r3,r2,2b988 <__adddf3+0x5b0>
   2b708:	8989c83a 	sub	r4,r17,r6
   2b70c:	8905803a 	cmpltu	r2,r17,r4
   2b710:	4267c83a 	sub	r19,r8,r9
   2b714:	98a7c83a 	sub	r19,r19,r2
   2b718:	9880202c 	andhi	r2,r19,128
   2b71c:	10006326 	beq	r2,zero,2b8ac <__adddf3+0x4d4>
   2b720:	3463c83a 	sub	r17,r6,r17
   2b724:	4a07c83a 	sub	r3,r9,r8
   2b728:	344d803a 	cmpltu	r6,r6,r17
   2b72c:	19a7c83a 	sub	r19,r3,r6
   2b730:	3825883a 	mov	r18,r7
   2b734:	983f8a1e 	bne	r19,zero,2b560 <__alt_data_end+0xf402b560>
   2b738:	8809883a 	mov	r4,r17
   2b73c:	00210bc0 	call	210bc <__clzsi2>
   2b740:	10800804 	addi	r2,r2,32
   2b744:	10fffe04 	addi	r3,r2,-8
   2b748:	010007c4 	movi	r4,31
   2b74c:	20ff890e 	bge	r4,r3,2b574 <__alt_data_end+0xf402b574>
   2b750:	10bff604 	addi	r2,r2,-40
   2b754:	8884983a 	sll	r2,r17,r2
   2b758:	0023883a 	mov	r17,zero
   2b75c:	1c3f8c0e 	bge	r3,r16,2b590 <__alt_data_end+0xf402b590>
   2b760:	023fe034 	movhi	r8,65408
   2b764:	423fffc4 	addi	r8,r8,-1
   2b768:	80e1c83a 	sub	r16,r16,r3
   2b76c:	1210703a 	and	r8,r2,r8
   2b770:	003f3806 	br	2b454 <__alt_data_end+0xf402b454>
   2b774:	9007883a 	mov	r3,r18
   2b778:	0011883a 	mov	r8,zero
   2b77c:	0005883a 	mov	r2,zero
   2b780:	003f4c06 	br	2b4b4 <__alt_data_end+0xf402b4b4>
   2b784:	498cb03a 	or	r6,r9,r6
   2b788:	300cc03a 	cmpne	r6,r6,zero
   2b78c:	0007883a 	mov	r3,zero
   2b790:	003f6806 	br	2b534 <__alt_data_end+0xf402b534>
   2b794:	20009c1e 	bne	r4,zero,2ba08 <__adddf3+0x630>
   2b798:	80800044 	addi	r2,r16,1
   2b79c:	1141ffcc 	andi	r5,r2,2047
   2b7a0:	01000044 	movi	r4,1
   2b7a4:	2140670e 	bge	r4,r5,2b944 <__adddf3+0x56c>
   2b7a8:	0101ffc4 	movi	r4,2047
   2b7ac:	11007f26 	beq	r2,r4,2b9ac <__adddf3+0x5d4>
   2b7b0:	898d883a 	add	r6,r17,r6
   2b7b4:	4247883a 	add	r3,r8,r9
   2b7b8:	3451803a 	cmpltu	r8,r6,r17
   2b7bc:	40d1883a 	add	r8,r8,r3
   2b7c0:	402297fa 	slli	r17,r8,31
   2b7c4:	300cd07a 	srli	r6,r6,1
   2b7c8:	4010d07a 	srli	r8,r8,1
   2b7cc:	1021883a 	mov	r16,r2
   2b7d0:	89a2b03a 	or	r17,r17,r6
   2b7d4:	003f1f06 	br	2b454 <__alt_data_end+0xf402b454>
   2b7d8:	0081ffc4 	movi	r2,2047
   2b7dc:	80bf481e 	bne	r16,r2,2b500 <__alt_data_end+0xf402b500>
   2b7e0:	003f1c06 	br	2b454 <__alt_data_end+0xf402b454>
   2b7e4:	843ff844 	addi	r16,r16,-31
   2b7e8:	01000804 	movi	r4,32
   2b7ec:	1406d83a 	srl	r3,r2,r16
   2b7f0:	41005026 	beq	r8,r4,2b934 <__adddf3+0x55c>
   2b7f4:	01001004 	movi	r4,64
   2b7f8:	2211c83a 	sub	r8,r4,r8
   2b7fc:	1204983a 	sll	r2,r2,r8
   2b800:	88a2b03a 	or	r17,r17,r2
   2b804:	8822c03a 	cmpne	r17,r17,zero
   2b808:	1c62b03a 	or	r17,r3,r17
   2b80c:	0011883a 	mov	r8,zero
   2b810:	0021883a 	mov	r16,zero
   2b814:	003f7106 	br	2b5dc <__alt_data_end+0xf402b5dc>
   2b818:	193ff804 	addi	r4,r3,-32
   2b81c:	00800804 	movi	r2,32
   2b820:	4908d83a 	srl	r4,r9,r4
   2b824:	18804526 	beq	r3,r2,2b93c <__adddf3+0x564>
   2b828:	00801004 	movi	r2,64
   2b82c:	10c5c83a 	sub	r2,r2,r3
   2b830:	4886983a 	sll	r3,r9,r2
   2b834:	198cb03a 	or	r6,r3,r6
   2b838:	300cc03a 	cmpne	r6,r6,zero
   2b83c:	218cb03a 	or	r6,r4,r6
   2b840:	0007883a 	mov	r3,zero
   2b844:	003f3b06 	br	2b534 <__alt_data_end+0xf402b534>
   2b848:	80002a26 	beq	r16,zero,2b8f4 <__adddf3+0x51c>
   2b84c:	0101ffc4 	movi	r4,2047
   2b850:	11006826 	beq	r2,r4,2b9f4 <__adddf3+0x61c>
   2b854:	00c7c83a 	sub	r3,zero,r3
   2b858:	42002034 	orhi	r8,r8,128
   2b85c:	01000e04 	movi	r4,56
   2b860:	20c07c16 	blt	r4,r3,2ba54 <__adddf3+0x67c>
   2b864:	010007c4 	movi	r4,31
   2b868:	20c0da16 	blt	r4,r3,2bbd4 <__adddf3+0x7fc>
   2b86c:	01000804 	movi	r4,32
   2b870:	20c9c83a 	sub	r4,r4,r3
   2b874:	4114983a 	sll	r10,r8,r4
   2b878:	88cad83a 	srl	r5,r17,r3
   2b87c:	8908983a 	sll	r4,r17,r4
   2b880:	40c6d83a 	srl	r3,r8,r3
   2b884:	5162b03a 	or	r17,r10,r5
   2b888:	2008c03a 	cmpne	r4,r4,zero
   2b88c:	8922b03a 	or	r17,r17,r4
   2b890:	3463c83a 	sub	r17,r6,r17
   2b894:	48c7c83a 	sub	r3,r9,r3
   2b898:	344d803a 	cmpltu	r6,r6,r17
   2b89c:	1991c83a 	sub	r8,r3,r6
   2b8a0:	1021883a 	mov	r16,r2
   2b8a4:	3825883a 	mov	r18,r7
   2b8a8:	003f2706 	br	2b548 <__alt_data_end+0xf402b548>
   2b8ac:	24d0b03a 	or	r8,r4,r19
   2b8b0:	40001b1e 	bne	r8,zero,2b920 <__adddf3+0x548>
   2b8b4:	0005883a 	mov	r2,zero
   2b8b8:	0007883a 	mov	r3,zero
   2b8bc:	0021883a 	mov	r16,zero
   2b8c0:	003f4d06 	br	2b5f8 <__alt_data_end+0xf402b5f8>
   2b8c4:	008007c4 	movi	r2,31
   2b8c8:	11003c16 	blt	r2,r4,2b9bc <__adddf3+0x5e4>
   2b8cc:	00800804 	movi	r2,32
   2b8d0:	1105c83a 	sub	r2,r2,r4
   2b8d4:	488e983a 	sll	r7,r9,r2
   2b8d8:	310ad83a 	srl	r5,r6,r4
   2b8dc:	3084983a 	sll	r2,r6,r2
   2b8e0:	4912d83a 	srl	r9,r9,r4
   2b8e4:	394ab03a 	or	r5,r7,r5
   2b8e8:	1004c03a 	cmpne	r2,r2,zero
   2b8ec:	288ab03a 	or	r5,r5,r2
   2b8f0:	003f5306 	br	2b640 <__alt_data_end+0xf402b640>
   2b8f4:	4448b03a 	or	r4,r8,r17
   2b8f8:	20003e26 	beq	r4,zero,2b9f4 <__adddf3+0x61c>
   2b8fc:	00c6303a 	nor	r3,zero,r3
   2b900:	18003a1e 	bne	r3,zero,2b9ec <__adddf3+0x614>
   2b904:	3463c83a 	sub	r17,r6,r17
   2b908:	4a07c83a 	sub	r3,r9,r8
   2b90c:	344d803a 	cmpltu	r6,r6,r17
   2b910:	1991c83a 	sub	r8,r3,r6
   2b914:	1021883a 	mov	r16,r2
   2b918:	3825883a 	mov	r18,r7
   2b91c:	003f0a06 	br	2b548 <__alt_data_end+0xf402b548>
   2b920:	2023883a 	mov	r17,r4
   2b924:	003f0d06 	br	2b55c <__alt_data_end+0xf402b55c>
   2b928:	0081ffc4 	movi	r2,2047
   2b92c:	80bf3f1e 	bne	r16,r2,2b62c <__alt_data_end+0xf402b62c>
   2b930:	003ec806 	br	2b454 <__alt_data_end+0xf402b454>
   2b934:	0005883a 	mov	r2,zero
   2b938:	003fb106 	br	2b800 <__alt_data_end+0xf402b800>
   2b93c:	0007883a 	mov	r3,zero
   2b940:	003fbc06 	br	2b834 <__alt_data_end+0xf402b834>
   2b944:	4444b03a 	or	r2,r8,r17
   2b948:	8000871e 	bne	r16,zero,2bb68 <__adddf3+0x790>
   2b94c:	1000ba26 	beq	r2,zero,2bc38 <__adddf3+0x860>
   2b950:	4984b03a 	or	r2,r9,r6
   2b954:	103ebf26 	beq	r2,zero,2b454 <__alt_data_end+0xf402b454>
   2b958:	8985883a 	add	r2,r17,r6
   2b95c:	4247883a 	add	r3,r8,r9
   2b960:	1451803a 	cmpltu	r8,r2,r17
   2b964:	40d1883a 	add	r8,r8,r3
   2b968:	40c0202c 	andhi	r3,r8,128
   2b96c:	1023883a 	mov	r17,r2
   2b970:	183f1a26 	beq	r3,zero,2b5dc <__alt_data_end+0xf402b5dc>
   2b974:	00bfe034 	movhi	r2,65408
   2b978:	10bfffc4 	addi	r2,r2,-1
   2b97c:	2021883a 	mov	r16,r4
   2b980:	4090703a 	and	r8,r8,r2
   2b984:	003eb306 	br	2b454 <__alt_data_end+0xf402b454>
   2b988:	4444b03a 	or	r2,r8,r17
   2b98c:	8000291e 	bne	r16,zero,2ba34 <__adddf3+0x65c>
   2b990:	10004b1e 	bne	r2,zero,2bac0 <__adddf3+0x6e8>
   2b994:	4990b03a 	or	r8,r9,r6
   2b998:	40008b26 	beq	r8,zero,2bbc8 <__adddf3+0x7f0>
   2b99c:	4811883a 	mov	r8,r9
   2b9a0:	3023883a 	mov	r17,r6
   2b9a4:	3825883a 	mov	r18,r7
   2b9a8:	003eaa06 	br	2b454 <__alt_data_end+0xf402b454>
   2b9ac:	1021883a 	mov	r16,r2
   2b9b0:	0011883a 	mov	r8,zero
   2b9b4:	0005883a 	mov	r2,zero
   2b9b8:	003f0f06 	br	2b5f8 <__alt_data_end+0xf402b5f8>
   2b9bc:	217ff804 	addi	r5,r4,-32
   2b9c0:	00800804 	movi	r2,32
   2b9c4:	494ad83a 	srl	r5,r9,r5
   2b9c8:	20807d26 	beq	r4,r2,2bbc0 <__adddf3+0x7e8>
   2b9cc:	00801004 	movi	r2,64
   2b9d0:	1109c83a 	sub	r4,r2,r4
   2b9d4:	4912983a 	sll	r9,r9,r4
   2b9d8:	498cb03a 	or	r6,r9,r6
   2b9dc:	300cc03a 	cmpne	r6,r6,zero
   2b9e0:	298ab03a 	or	r5,r5,r6
   2b9e4:	0013883a 	mov	r9,zero
   2b9e8:	003f1506 	br	2b640 <__alt_data_end+0xf402b640>
   2b9ec:	0101ffc4 	movi	r4,2047
   2b9f0:	113f9a1e 	bne	r2,r4,2b85c <__alt_data_end+0xf402b85c>
   2b9f4:	4811883a 	mov	r8,r9
   2b9f8:	3023883a 	mov	r17,r6
   2b9fc:	1021883a 	mov	r16,r2
   2ba00:	3825883a 	mov	r18,r7
   2ba04:	003e9306 	br	2b454 <__alt_data_end+0xf402b454>
   2ba08:	8000161e 	bne	r16,zero,2ba64 <__adddf3+0x68c>
   2ba0c:	444ab03a 	or	r5,r8,r17
   2ba10:	28005126 	beq	r5,zero,2bb58 <__adddf3+0x780>
   2ba14:	0108303a 	nor	r4,zero,r4
   2ba18:	20004d1e 	bne	r4,zero,2bb50 <__adddf3+0x778>
   2ba1c:	89a3883a 	add	r17,r17,r6
   2ba20:	4253883a 	add	r9,r8,r9
   2ba24:	898d803a 	cmpltu	r6,r17,r6
   2ba28:	3251883a 	add	r8,r6,r9
   2ba2c:	1021883a 	mov	r16,r2
   2ba30:	003f0806 	br	2b654 <__alt_data_end+0xf402b654>
   2ba34:	1000301e 	bne	r2,zero,2baf8 <__adddf3+0x720>
   2ba38:	4984b03a 	or	r2,r9,r6
   2ba3c:	10007126 	beq	r2,zero,2bc04 <__adddf3+0x82c>
   2ba40:	4811883a 	mov	r8,r9
   2ba44:	3023883a 	mov	r17,r6
   2ba48:	3825883a 	mov	r18,r7
   2ba4c:	0401ffc4 	movi	r16,2047
   2ba50:	003e8006 	br	2b454 <__alt_data_end+0xf402b454>
   2ba54:	4462b03a 	or	r17,r8,r17
   2ba58:	8822c03a 	cmpne	r17,r17,zero
   2ba5c:	0007883a 	mov	r3,zero
   2ba60:	003f8b06 	br	2b890 <__alt_data_end+0xf402b890>
   2ba64:	0141ffc4 	movi	r5,2047
   2ba68:	11403b26 	beq	r2,r5,2bb58 <__adddf3+0x780>
   2ba6c:	0109c83a 	sub	r4,zero,r4
   2ba70:	42002034 	orhi	r8,r8,128
   2ba74:	01400e04 	movi	r5,56
   2ba78:	29006716 	blt	r5,r4,2bc18 <__adddf3+0x840>
   2ba7c:	014007c4 	movi	r5,31
   2ba80:	29007016 	blt	r5,r4,2bc44 <__adddf3+0x86c>
   2ba84:	01400804 	movi	r5,32
   2ba88:	290bc83a 	sub	r5,r5,r4
   2ba8c:	4154983a 	sll	r10,r8,r5
   2ba90:	890ed83a 	srl	r7,r17,r4
   2ba94:	894a983a 	sll	r5,r17,r5
   2ba98:	4108d83a 	srl	r4,r8,r4
   2ba9c:	51e2b03a 	or	r17,r10,r7
   2baa0:	280ac03a 	cmpne	r5,r5,zero
   2baa4:	8962b03a 	or	r17,r17,r5
   2baa8:	89a3883a 	add	r17,r17,r6
   2baac:	2253883a 	add	r9,r4,r9
   2bab0:	898d803a 	cmpltu	r6,r17,r6
   2bab4:	3251883a 	add	r8,r6,r9
   2bab8:	1021883a 	mov	r16,r2
   2babc:	003ee506 	br	2b654 <__alt_data_end+0xf402b654>
   2bac0:	4984b03a 	or	r2,r9,r6
   2bac4:	103e6326 	beq	r2,zero,2b454 <__alt_data_end+0xf402b454>
   2bac8:	8987c83a 	sub	r3,r17,r6
   2bacc:	88c9803a 	cmpltu	r4,r17,r3
   2bad0:	4245c83a 	sub	r2,r8,r9
   2bad4:	1105c83a 	sub	r2,r2,r4
   2bad8:	1100202c 	andhi	r4,r2,128
   2badc:	203ebb26 	beq	r4,zero,2b5cc <__alt_data_end+0xf402b5cc>
   2bae0:	3463c83a 	sub	r17,r6,r17
   2bae4:	4a07c83a 	sub	r3,r9,r8
   2bae8:	344d803a 	cmpltu	r6,r6,r17
   2baec:	1991c83a 	sub	r8,r3,r6
   2baf0:	3825883a 	mov	r18,r7
   2baf4:	003e5706 	br	2b454 <__alt_data_end+0xf402b454>
   2baf8:	4984b03a 	or	r2,r9,r6
   2bafc:	10002e26 	beq	r2,zero,2bbb8 <__adddf3+0x7e0>
   2bb00:	4004d0fa 	srli	r2,r8,3
   2bb04:	8822d0fa 	srli	r17,r17,3
   2bb08:	4010977a 	slli	r8,r8,29
   2bb0c:	10c0022c 	andhi	r3,r2,8
   2bb10:	4462b03a 	or	r17,r8,r17
   2bb14:	18000826 	beq	r3,zero,2bb38 <__adddf3+0x760>
   2bb18:	4808d0fa 	srli	r4,r9,3
   2bb1c:	20c0022c 	andhi	r3,r4,8
   2bb20:	1800051e 	bne	r3,zero,2bb38 <__adddf3+0x760>
   2bb24:	300cd0fa 	srli	r6,r6,3
   2bb28:	4806977a 	slli	r3,r9,29
   2bb2c:	2005883a 	mov	r2,r4
   2bb30:	3825883a 	mov	r18,r7
   2bb34:	19a2b03a 	or	r17,r3,r6
   2bb38:	8810d77a 	srli	r8,r17,29
   2bb3c:	100490fa 	slli	r2,r2,3
   2bb40:	882290fa 	slli	r17,r17,3
   2bb44:	0401ffc4 	movi	r16,2047
   2bb48:	4090b03a 	or	r8,r8,r2
   2bb4c:	003e4106 	br	2b454 <__alt_data_end+0xf402b454>
   2bb50:	0141ffc4 	movi	r5,2047
   2bb54:	117fc71e 	bne	r2,r5,2ba74 <__alt_data_end+0xf402ba74>
   2bb58:	4811883a 	mov	r8,r9
   2bb5c:	3023883a 	mov	r17,r6
   2bb60:	1021883a 	mov	r16,r2
   2bb64:	003e3b06 	br	2b454 <__alt_data_end+0xf402b454>
   2bb68:	10002f26 	beq	r2,zero,2bc28 <__adddf3+0x850>
   2bb6c:	4984b03a 	or	r2,r9,r6
   2bb70:	10001126 	beq	r2,zero,2bbb8 <__adddf3+0x7e0>
   2bb74:	4004d0fa 	srli	r2,r8,3
   2bb78:	8822d0fa 	srli	r17,r17,3
   2bb7c:	4010977a 	slli	r8,r8,29
   2bb80:	10c0022c 	andhi	r3,r2,8
   2bb84:	4462b03a 	or	r17,r8,r17
   2bb88:	183feb26 	beq	r3,zero,2bb38 <__alt_data_end+0xf402bb38>
   2bb8c:	4808d0fa 	srli	r4,r9,3
   2bb90:	20c0022c 	andhi	r3,r4,8
   2bb94:	183fe81e 	bne	r3,zero,2bb38 <__alt_data_end+0xf402bb38>
   2bb98:	300cd0fa 	srli	r6,r6,3
   2bb9c:	4806977a 	slli	r3,r9,29
   2bba0:	2005883a 	mov	r2,r4
   2bba4:	19a2b03a 	or	r17,r3,r6
   2bba8:	003fe306 	br	2bb38 <__alt_data_end+0xf402bb38>
   2bbac:	0011883a 	mov	r8,zero
   2bbb0:	0005883a 	mov	r2,zero
   2bbb4:	003e3f06 	br	2b4b4 <__alt_data_end+0xf402b4b4>
   2bbb8:	0401ffc4 	movi	r16,2047
   2bbbc:	003e2506 	br	2b454 <__alt_data_end+0xf402b454>
   2bbc0:	0013883a 	mov	r9,zero
   2bbc4:	003f8406 	br	2b9d8 <__alt_data_end+0xf402b9d8>
   2bbc8:	0005883a 	mov	r2,zero
   2bbcc:	0007883a 	mov	r3,zero
   2bbd0:	003e8906 	br	2b5f8 <__alt_data_end+0xf402b5f8>
   2bbd4:	197ff804 	addi	r5,r3,-32
   2bbd8:	01000804 	movi	r4,32
   2bbdc:	414ad83a 	srl	r5,r8,r5
   2bbe0:	19002426 	beq	r3,r4,2bc74 <__adddf3+0x89c>
   2bbe4:	01001004 	movi	r4,64
   2bbe8:	20c7c83a 	sub	r3,r4,r3
   2bbec:	40c6983a 	sll	r3,r8,r3
   2bbf0:	1c46b03a 	or	r3,r3,r17
   2bbf4:	1806c03a 	cmpne	r3,r3,zero
   2bbf8:	28e2b03a 	or	r17,r5,r3
   2bbfc:	0007883a 	mov	r3,zero
   2bc00:	003f2306 	br	2b890 <__alt_data_end+0xf402b890>
   2bc04:	0007883a 	mov	r3,zero
   2bc08:	5811883a 	mov	r8,r11
   2bc0c:	00bfffc4 	movi	r2,-1
   2bc10:	0401ffc4 	movi	r16,2047
   2bc14:	003e7806 	br	2b5f8 <__alt_data_end+0xf402b5f8>
   2bc18:	4462b03a 	or	r17,r8,r17
   2bc1c:	8822c03a 	cmpne	r17,r17,zero
   2bc20:	0009883a 	mov	r4,zero
   2bc24:	003fa006 	br	2baa8 <__alt_data_end+0xf402baa8>
   2bc28:	4811883a 	mov	r8,r9
   2bc2c:	3023883a 	mov	r17,r6
   2bc30:	0401ffc4 	movi	r16,2047
   2bc34:	003e0706 	br	2b454 <__alt_data_end+0xf402b454>
   2bc38:	4811883a 	mov	r8,r9
   2bc3c:	3023883a 	mov	r17,r6
   2bc40:	003e0406 	br	2b454 <__alt_data_end+0xf402b454>
   2bc44:	21fff804 	addi	r7,r4,-32
   2bc48:	01400804 	movi	r5,32
   2bc4c:	41ced83a 	srl	r7,r8,r7
   2bc50:	21400a26 	beq	r4,r5,2bc7c <__adddf3+0x8a4>
   2bc54:	01401004 	movi	r5,64
   2bc58:	2909c83a 	sub	r4,r5,r4
   2bc5c:	4108983a 	sll	r4,r8,r4
   2bc60:	2448b03a 	or	r4,r4,r17
   2bc64:	2008c03a 	cmpne	r4,r4,zero
   2bc68:	3922b03a 	or	r17,r7,r4
   2bc6c:	0009883a 	mov	r4,zero
   2bc70:	003f8d06 	br	2baa8 <__alt_data_end+0xf402baa8>
   2bc74:	0007883a 	mov	r3,zero
   2bc78:	003fdd06 	br	2bbf0 <__alt_data_end+0xf402bbf0>
   2bc7c:	0009883a 	mov	r4,zero
   2bc80:	003ff706 	br	2bc60 <__alt_data_end+0xf402bc60>

0002bc84 <__divdf3>:
   2bc84:	defff204 	addi	sp,sp,-56
   2bc88:	dd400915 	stw	r21,36(sp)
   2bc8c:	282ad53a 	srli	r21,r5,20
   2bc90:	dd000815 	stw	r20,32(sp)
   2bc94:	2828d7fa 	srli	r20,r5,31
   2bc98:	dc000415 	stw	r16,16(sp)
   2bc9c:	04000434 	movhi	r16,16
   2bca0:	df000c15 	stw	fp,48(sp)
   2bca4:	843fffc4 	addi	r16,r16,-1
   2bca8:	dfc00d15 	stw	ra,52(sp)
   2bcac:	ddc00b15 	stw	r23,44(sp)
   2bcb0:	dd800a15 	stw	r22,40(sp)
   2bcb4:	dcc00715 	stw	r19,28(sp)
   2bcb8:	dc800615 	stw	r18,24(sp)
   2bcbc:	dc400515 	stw	r17,20(sp)
   2bcc0:	ad41ffcc 	andi	r21,r21,2047
   2bcc4:	2c20703a 	and	r16,r5,r16
   2bcc8:	a7003fcc 	andi	fp,r20,255
   2bccc:	a8006126 	beq	r21,zero,2be54 <__divdf3+0x1d0>
   2bcd0:	0081ffc4 	movi	r2,2047
   2bcd4:	2025883a 	mov	r18,r4
   2bcd8:	a8803726 	beq	r21,r2,2bdb8 <__divdf3+0x134>
   2bcdc:	80800434 	orhi	r2,r16,16
   2bce0:	100490fa 	slli	r2,r2,3
   2bce4:	2020d77a 	srli	r16,r4,29
   2bce8:	202490fa 	slli	r18,r4,3
   2bcec:	ad7f0044 	addi	r21,r21,-1023
   2bcf0:	80a0b03a 	or	r16,r16,r2
   2bcf4:	0027883a 	mov	r19,zero
   2bcf8:	0013883a 	mov	r9,zero
   2bcfc:	3804d53a 	srli	r2,r7,20
   2bd00:	382cd7fa 	srli	r22,r7,31
   2bd04:	04400434 	movhi	r17,16
   2bd08:	8c7fffc4 	addi	r17,r17,-1
   2bd0c:	1081ffcc 	andi	r2,r2,2047
   2bd10:	3011883a 	mov	r8,r6
   2bd14:	3c62703a 	and	r17,r7,r17
   2bd18:	b5c03fcc 	andi	r23,r22,255
   2bd1c:	10006c26 	beq	r2,zero,2bed0 <__divdf3+0x24c>
   2bd20:	00c1ffc4 	movi	r3,2047
   2bd24:	10c06426 	beq	r2,r3,2beb8 <__divdf3+0x234>
   2bd28:	88c00434 	orhi	r3,r17,16
   2bd2c:	180690fa 	slli	r3,r3,3
   2bd30:	3022d77a 	srli	r17,r6,29
   2bd34:	301090fa 	slli	r8,r6,3
   2bd38:	10bf0044 	addi	r2,r2,-1023
   2bd3c:	88e2b03a 	or	r17,r17,r3
   2bd40:	000f883a 	mov	r7,zero
   2bd44:	a58cf03a 	xor	r6,r20,r22
   2bd48:	3cc8b03a 	or	r4,r7,r19
   2bd4c:	a8abc83a 	sub	r21,r21,r2
   2bd50:	008003c4 	movi	r2,15
   2bd54:	3007883a 	mov	r3,r6
   2bd58:	34c03fcc 	andi	r19,r6,255
   2bd5c:	11009036 	bltu	r2,r4,2bfa0 <__divdf3+0x31c>
   2bd60:	200890ba 	slli	r4,r4,2
   2bd64:	008000f4 	movhi	r2,3
   2bd68:	10af5e04 	addi	r2,r2,-17032
   2bd6c:	2089883a 	add	r4,r4,r2
   2bd70:	20800017 	ldw	r2,0(r4)
   2bd74:	1000683a 	jmp	r2
   2bd78:	0002bfa0 	cmpeqi	zero,zero,2814
   2bd7c:	0002bdf0 	cmpltui	zero,zero,2807
   2bd80:	0002bf90 	cmplti	zero,zero,2814
   2bd84:	0002bde4 	muli	zero,zero,2807
   2bd88:	0002bf90 	cmplti	zero,zero,2814
   2bd8c:	0002bf64 	muli	zero,zero,2813
   2bd90:	0002bf90 	cmplti	zero,zero,2814
   2bd94:	0002bde4 	muli	zero,zero,2807
   2bd98:	0002bdf0 	cmpltui	zero,zero,2807
   2bd9c:	0002bdf0 	cmpltui	zero,zero,2807
   2bda0:	0002bf64 	muli	zero,zero,2813
   2bda4:	0002bde4 	muli	zero,zero,2807
   2bda8:	0002bdd4 	movui	zero,2807
   2bdac:	0002bdd4 	movui	zero,2807
   2bdb0:	0002bdd4 	movui	zero,2807
   2bdb4:	0002c284 	movi	zero,2826
   2bdb8:	2404b03a 	or	r2,r4,r16
   2bdbc:	1000661e 	bne	r2,zero,2bf58 <__divdf3+0x2d4>
   2bdc0:	04c00204 	movi	r19,8
   2bdc4:	0021883a 	mov	r16,zero
   2bdc8:	0025883a 	mov	r18,zero
   2bdcc:	02400084 	movi	r9,2
   2bdd0:	003fca06 	br	2bcfc <__alt_data_end+0xf402bcfc>
   2bdd4:	8023883a 	mov	r17,r16
   2bdd8:	9011883a 	mov	r8,r18
   2bddc:	e02f883a 	mov	r23,fp
   2bde0:	480f883a 	mov	r7,r9
   2bde4:	00800084 	movi	r2,2
   2bde8:	3881311e 	bne	r7,r2,2c2b0 <__divdf3+0x62c>
   2bdec:	b827883a 	mov	r19,r23
   2bdf0:	98c0004c 	andi	r3,r19,1
   2bdf4:	0081ffc4 	movi	r2,2047
   2bdf8:	000b883a 	mov	r5,zero
   2bdfc:	0025883a 	mov	r18,zero
   2be00:	1004953a 	slli	r2,r2,20
   2be04:	18c03fcc 	andi	r3,r3,255
   2be08:	04400434 	movhi	r17,16
   2be0c:	8c7fffc4 	addi	r17,r17,-1
   2be10:	180697fa 	slli	r3,r3,31
   2be14:	2c4a703a 	and	r5,r5,r17
   2be18:	288ab03a 	or	r5,r5,r2
   2be1c:	28c6b03a 	or	r3,r5,r3
   2be20:	9005883a 	mov	r2,r18
   2be24:	dfc00d17 	ldw	ra,52(sp)
   2be28:	df000c17 	ldw	fp,48(sp)
   2be2c:	ddc00b17 	ldw	r23,44(sp)
   2be30:	dd800a17 	ldw	r22,40(sp)
   2be34:	dd400917 	ldw	r21,36(sp)
   2be38:	dd000817 	ldw	r20,32(sp)
   2be3c:	dcc00717 	ldw	r19,28(sp)
   2be40:	dc800617 	ldw	r18,24(sp)
   2be44:	dc400517 	ldw	r17,20(sp)
   2be48:	dc000417 	ldw	r16,16(sp)
   2be4c:	dec00e04 	addi	sp,sp,56
   2be50:	f800283a 	ret
   2be54:	2404b03a 	or	r2,r4,r16
   2be58:	2027883a 	mov	r19,r4
   2be5c:	10003926 	beq	r2,zero,2bf44 <__divdf3+0x2c0>
   2be60:	80012e26 	beq	r16,zero,2c31c <__divdf3+0x698>
   2be64:	8009883a 	mov	r4,r16
   2be68:	d9800315 	stw	r6,12(sp)
   2be6c:	d9c00215 	stw	r7,8(sp)
   2be70:	00210bc0 	call	210bc <__clzsi2>
   2be74:	d9800317 	ldw	r6,12(sp)
   2be78:	d9c00217 	ldw	r7,8(sp)
   2be7c:	113ffd44 	addi	r4,r2,-11
   2be80:	00c00704 	movi	r3,28
   2be84:	19012116 	blt	r3,r4,2c30c <__divdf3+0x688>
   2be88:	00c00744 	movi	r3,29
   2be8c:	147ffe04 	addi	r17,r2,-8
   2be90:	1907c83a 	sub	r3,r3,r4
   2be94:	8460983a 	sll	r16,r16,r17
   2be98:	98c6d83a 	srl	r3,r19,r3
   2be9c:	9c64983a 	sll	r18,r19,r17
   2bea0:	1c20b03a 	or	r16,r3,r16
   2bea4:	1080fcc4 	addi	r2,r2,1011
   2bea8:	00abc83a 	sub	r21,zero,r2
   2beac:	0027883a 	mov	r19,zero
   2beb0:	0013883a 	mov	r9,zero
   2beb4:	003f9106 	br	2bcfc <__alt_data_end+0xf402bcfc>
   2beb8:	3446b03a 	or	r3,r6,r17
   2bebc:	18001f1e 	bne	r3,zero,2bf3c <__divdf3+0x2b8>
   2bec0:	0023883a 	mov	r17,zero
   2bec4:	0011883a 	mov	r8,zero
   2bec8:	01c00084 	movi	r7,2
   2becc:	003f9d06 	br	2bd44 <__alt_data_end+0xf402bd44>
   2bed0:	3446b03a 	or	r3,r6,r17
   2bed4:	18001526 	beq	r3,zero,2bf2c <__divdf3+0x2a8>
   2bed8:	88011b26 	beq	r17,zero,2c348 <__divdf3+0x6c4>
   2bedc:	8809883a 	mov	r4,r17
   2bee0:	d9800315 	stw	r6,12(sp)
   2bee4:	da400115 	stw	r9,4(sp)
   2bee8:	00210bc0 	call	210bc <__clzsi2>
   2beec:	d9800317 	ldw	r6,12(sp)
   2bef0:	da400117 	ldw	r9,4(sp)
   2bef4:	113ffd44 	addi	r4,r2,-11
   2bef8:	00c00704 	movi	r3,28
   2befc:	19010e16 	blt	r3,r4,2c338 <__divdf3+0x6b4>
   2bf00:	00c00744 	movi	r3,29
   2bf04:	123ffe04 	addi	r8,r2,-8
   2bf08:	1907c83a 	sub	r3,r3,r4
   2bf0c:	8a22983a 	sll	r17,r17,r8
   2bf10:	30c6d83a 	srl	r3,r6,r3
   2bf14:	3210983a 	sll	r8,r6,r8
   2bf18:	1c62b03a 	or	r17,r3,r17
   2bf1c:	1080fcc4 	addi	r2,r2,1011
   2bf20:	0085c83a 	sub	r2,zero,r2
   2bf24:	000f883a 	mov	r7,zero
   2bf28:	003f8606 	br	2bd44 <__alt_data_end+0xf402bd44>
   2bf2c:	0023883a 	mov	r17,zero
   2bf30:	0011883a 	mov	r8,zero
   2bf34:	01c00044 	movi	r7,1
   2bf38:	003f8206 	br	2bd44 <__alt_data_end+0xf402bd44>
   2bf3c:	01c000c4 	movi	r7,3
   2bf40:	003f8006 	br	2bd44 <__alt_data_end+0xf402bd44>
   2bf44:	04c00104 	movi	r19,4
   2bf48:	0021883a 	mov	r16,zero
   2bf4c:	0025883a 	mov	r18,zero
   2bf50:	02400044 	movi	r9,1
   2bf54:	003f6906 	br	2bcfc <__alt_data_end+0xf402bcfc>
   2bf58:	04c00304 	movi	r19,12
   2bf5c:	024000c4 	movi	r9,3
   2bf60:	003f6606 	br	2bcfc <__alt_data_end+0xf402bcfc>
   2bf64:	01400434 	movhi	r5,16
   2bf68:	0007883a 	mov	r3,zero
   2bf6c:	297fffc4 	addi	r5,r5,-1
   2bf70:	04bfffc4 	movi	r18,-1
   2bf74:	0081ffc4 	movi	r2,2047
   2bf78:	003fa106 	br	2be00 <__alt_data_end+0xf402be00>
   2bf7c:	00c00044 	movi	r3,1
   2bf80:	1887c83a 	sub	r3,r3,r2
   2bf84:	01000e04 	movi	r4,56
   2bf88:	20c1210e 	bge	r4,r3,2c410 <__divdf3+0x78c>
   2bf8c:	98c0004c 	andi	r3,r19,1
   2bf90:	0005883a 	mov	r2,zero
   2bf94:	000b883a 	mov	r5,zero
   2bf98:	0025883a 	mov	r18,zero
   2bf9c:	003f9806 	br	2be00 <__alt_data_end+0xf402be00>
   2bfa0:	8c00fd36 	bltu	r17,r16,2c398 <__divdf3+0x714>
   2bfa4:	8440fb26 	beq	r16,r17,2c394 <__divdf3+0x710>
   2bfa8:	8007883a 	mov	r3,r16
   2bfac:	ad7fffc4 	addi	r21,r21,-1
   2bfb0:	0021883a 	mov	r16,zero
   2bfb4:	4004d63a 	srli	r2,r8,24
   2bfb8:	8822923a 	slli	r17,r17,8
   2bfbc:	1809883a 	mov	r4,r3
   2bfc0:	402c923a 	slli	r22,r8,8
   2bfc4:	88b8b03a 	or	fp,r17,r2
   2bfc8:	e028d43a 	srli	r20,fp,16
   2bfcc:	d8c00015 	stw	r3,0(sp)
   2bfd0:	e5ffffcc 	andi	r23,fp,65535
   2bfd4:	a00b883a 	mov	r5,r20
   2bfd8:	002b31c0 	call	2b31c <__udivsi3>
   2bfdc:	d8c00017 	ldw	r3,0(sp)
   2bfe0:	a00b883a 	mov	r5,r20
   2bfe4:	d8800315 	stw	r2,12(sp)
   2bfe8:	1809883a 	mov	r4,r3
   2bfec:	002b3800 	call	2b380 <__umodsi3>
   2bff0:	d9800317 	ldw	r6,12(sp)
   2bff4:	1006943a 	slli	r3,r2,16
   2bff8:	9004d43a 	srli	r2,r18,16
   2bffc:	b9a3383a 	mul	r17,r23,r6
   2c000:	10c4b03a 	or	r2,r2,r3
   2c004:	1440062e 	bgeu	r2,r17,2c020 <__divdf3+0x39c>
   2c008:	1705883a 	add	r2,r2,fp
   2c00c:	30ffffc4 	addi	r3,r6,-1
   2c010:	1700ee36 	bltu	r2,fp,2c3cc <__divdf3+0x748>
   2c014:	1440ed2e 	bgeu	r2,r17,2c3cc <__divdf3+0x748>
   2c018:	31bfff84 	addi	r6,r6,-2
   2c01c:	1705883a 	add	r2,r2,fp
   2c020:	1463c83a 	sub	r17,r2,r17
   2c024:	a00b883a 	mov	r5,r20
   2c028:	8809883a 	mov	r4,r17
   2c02c:	d9800315 	stw	r6,12(sp)
   2c030:	002b31c0 	call	2b31c <__udivsi3>
   2c034:	a00b883a 	mov	r5,r20
   2c038:	8809883a 	mov	r4,r17
   2c03c:	d8800215 	stw	r2,8(sp)
   2c040:	002b3800 	call	2b380 <__umodsi3>
   2c044:	d9c00217 	ldw	r7,8(sp)
   2c048:	1004943a 	slli	r2,r2,16
   2c04c:	94bfffcc 	andi	r18,r18,65535
   2c050:	b9d1383a 	mul	r8,r23,r7
   2c054:	90a4b03a 	or	r18,r18,r2
   2c058:	d9800317 	ldw	r6,12(sp)
   2c05c:	9200062e 	bgeu	r18,r8,2c078 <__divdf3+0x3f4>
   2c060:	9725883a 	add	r18,r18,fp
   2c064:	38bfffc4 	addi	r2,r7,-1
   2c068:	9700d636 	bltu	r18,fp,2c3c4 <__divdf3+0x740>
   2c06c:	9200d52e 	bgeu	r18,r8,2c3c4 <__divdf3+0x740>
   2c070:	39ffff84 	addi	r7,r7,-2
   2c074:	9725883a 	add	r18,r18,fp
   2c078:	3004943a 	slli	r2,r6,16
   2c07c:	b012d43a 	srli	r9,r22,16
   2c080:	b1bfffcc 	andi	r6,r22,65535
   2c084:	11e2b03a 	or	r17,r2,r7
   2c088:	8806d43a 	srli	r3,r17,16
   2c08c:	893fffcc 	andi	r4,r17,65535
   2c090:	218b383a 	mul	r5,r4,r6
   2c094:	30c5383a 	mul	r2,r6,r3
   2c098:	2249383a 	mul	r4,r4,r9
   2c09c:	280ed43a 	srli	r7,r5,16
   2c0a0:	9225c83a 	sub	r18,r18,r8
   2c0a4:	2089883a 	add	r4,r4,r2
   2c0a8:	3909883a 	add	r4,r7,r4
   2c0ac:	1a47383a 	mul	r3,r3,r9
   2c0b0:	2080022e 	bgeu	r4,r2,2c0bc <__divdf3+0x438>
   2c0b4:	00800074 	movhi	r2,1
   2c0b8:	1887883a 	add	r3,r3,r2
   2c0bc:	2004d43a 	srli	r2,r4,16
   2c0c0:	2008943a 	slli	r4,r4,16
   2c0c4:	297fffcc 	andi	r5,r5,65535
   2c0c8:	10c7883a 	add	r3,r2,r3
   2c0cc:	2149883a 	add	r4,r4,r5
   2c0d0:	90c0a536 	bltu	r18,r3,2c368 <__divdf3+0x6e4>
   2c0d4:	90c0bf26 	beq	r18,r3,2c3d4 <__divdf3+0x750>
   2c0d8:	90c7c83a 	sub	r3,r18,r3
   2c0dc:	810fc83a 	sub	r7,r16,r4
   2c0e0:	81e5803a 	cmpltu	r18,r16,r7
   2c0e4:	1ca5c83a 	sub	r18,r3,r18
   2c0e8:	e480c126 	beq	fp,r18,2c3f0 <__divdf3+0x76c>
   2c0ec:	a00b883a 	mov	r5,r20
   2c0f0:	9009883a 	mov	r4,r18
   2c0f4:	d9800315 	stw	r6,12(sp)
   2c0f8:	d9c00215 	stw	r7,8(sp)
   2c0fc:	da400115 	stw	r9,4(sp)
   2c100:	002b31c0 	call	2b31c <__udivsi3>
   2c104:	a00b883a 	mov	r5,r20
   2c108:	9009883a 	mov	r4,r18
   2c10c:	d8800015 	stw	r2,0(sp)
   2c110:	002b3800 	call	2b380 <__umodsi3>
   2c114:	d9c00217 	ldw	r7,8(sp)
   2c118:	da000017 	ldw	r8,0(sp)
   2c11c:	1006943a 	slli	r3,r2,16
   2c120:	3804d43a 	srli	r2,r7,16
   2c124:	ba21383a 	mul	r16,r23,r8
   2c128:	d9800317 	ldw	r6,12(sp)
   2c12c:	10c4b03a 	or	r2,r2,r3
   2c130:	da400117 	ldw	r9,4(sp)
   2c134:	1400062e 	bgeu	r2,r16,2c150 <__divdf3+0x4cc>
   2c138:	1705883a 	add	r2,r2,fp
   2c13c:	40ffffc4 	addi	r3,r8,-1
   2c140:	1700ad36 	bltu	r2,fp,2c3f8 <__divdf3+0x774>
   2c144:	1400ac2e 	bgeu	r2,r16,2c3f8 <__divdf3+0x774>
   2c148:	423fff84 	addi	r8,r8,-2
   2c14c:	1705883a 	add	r2,r2,fp
   2c150:	1421c83a 	sub	r16,r2,r16
   2c154:	a00b883a 	mov	r5,r20
   2c158:	8009883a 	mov	r4,r16
   2c15c:	d9800315 	stw	r6,12(sp)
   2c160:	d9c00215 	stw	r7,8(sp)
   2c164:	da000015 	stw	r8,0(sp)
   2c168:	da400115 	stw	r9,4(sp)
   2c16c:	002b31c0 	call	2b31c <__udivsi3>
   2c170:	8009883a 	mov	r4,r16
   2c174:	a00b883a 	mov	r5,r20
   2c178:	1025883a 	mov	r18,r2
   2c17c:	002b3800 	call	2b380 <__umodsi3>
   2c180:	d9c00217 	ldw	r7,8(sp)
   2c184:	1004943a 	slli	r2,r2,16
   2c188:	bcaf383a 	mul	r23,r23,r18
   2c18c:	393fffcc 	andi	r4,r7,65535
   2c190:	2088b03a 	or	r4,r4,r2
   2c194:	d9800317 	ldw	r6,12(sp)
   2c198:	da000017 	ldw	r8,0(sp)
   2c19c:	da400117 	ldw	r9,4(sp)
   2c1a0:	25c0062e 	bgeu	r4,r23,2c1bc <__divdf3+0x538>
   2c1a4:	2709883a 	add	r4,r4,fp
   2c1a8:	90bfffc4 	addi	r2,r18,-1
   2c1ac:	27009436 	bltu	r4,fp,2c400 <__divdf3+0x77c>
   2c1b0:	25c0932e 	bgeu	r4,r23,2c400 <__divdf3+0x77c>
   2c1b4:	94bfff84 	addi	r18,r18,-2
   2c1b8:	2709883a 	add	r4,r4,fp
   2c1bc:	4004943a 	slli	r2,r8,16
   2c1c0:	25efc83a 	sub	r23,r4,r23
   2c1c4:	1490b03a 	or	r8,r2,r18
   2c1c8:	4008d43a 	srli	r4,r8,16
   2c1cc:	40ffffcc 	andi	r3,r8,65535
   2c1d0:	30c5383a 	mul	r2,r6,r3
   2c1d4:	1a47383a 	mul	r3,r3,r9
   2c1d8:	310d383a 	mul	r6,r6,r4
   2c1dc:	100ad43a 	srli	r5,r2,16
   2c1e0:	4913383a 	mul	r9,r9,r4
   2c1e4:	1987883a 	add	r3,r3,r6
   2c1e8:	28c7883a 	add	r3,r5,r3
   2c1ec:	1980022e 	bgeu	r3,r6,2c1f8 <__divdf3+0x574>
   2c1f0:	01000074 	movhi	r4,1
   2c1f4:	4913883a 	add	r9,r9,r4
   2c1f8:	1808d43a 	srli	r4,r3,16
   2c1fc:	1806943a 	slli	r3,r3,16
   2c200:	10bfffcc 	andi	r2,r2,65535
   2c204:	2253883a 	add	r9,r4,r9
   2c208:	1887883a 	add	r3,r3,r2
   2c20c:	ba403836 	bltu	r23,r9,2c2f0 <__divdf3+0x66c>
   2c210:	ba403626 	beq	r23,r9,2c2ec <__divdf3+0x668>
   2c214:	42000054 	ori	r8,r8,1
   2c218:	a880ffc4 	addi	r2,r21,1023
   2c21c:	00bf570e 	bge	zero,r2,2bf7c <__alt_data_end+0xf402bf7c>
   2c220:	40c001cc 	andi	r3,r8,7
   2c224:	18000726 	beq	r3,zero,2c244 <__divdf3+0x5c0>
   2c228:	40c003cc 	andi	r3,r8,15
   2c22c:	01000104 	movi	r4,4
   2c230:	19000426 	beq	r3,r4,2c244 <__divdf3+0x5c0>
   2c234:	4107883a 	add	r3,r8,r4
   2c238:	1a11803a 	cmpltu	r8,r3,r8
   2c23c:	8a23883a 	add	r17,r17,r8
   2c240:	1811883a 	mov	r8,r3
   2c244:	88c0402c 	andhi	r3,r17,256
   2c248:	18000426 	beq	r3,zero,2c25c <__divdf3+0x5d8>
   2c24c:	00ffc034 	movhi	r3,65280
   2c250:	18ffffc4 	addi	r3,r3,-1
   2c254:	a8810004 	addi	r2,r21,1024
   2c258:	88e2703a 	and	r17,r17,r3
   2c25c:	00c1ff84 	movi	r3,2046
   2c260:	18bee316 	blt	r3,r2,2bdf0 <__alt_data_end+0xf402bdf0>
   2c264:	8824977a 	slli	r18,r17,29
   2c268:	4010d0fa 	srli	r8,r8,3
   2c26c:	8822927a 	slli	r17,r17,9
   2c270:	1081ffcc 	andi	r2,r2,2047
   2c274:	9224b03a 	or	r18,r18,r8
   2c278:	880ad33a 	srli	r5,r17,12
   2c27c:	98c0004c 	andi	r3,r19,1
   2c280:	003edf06 	br	2be00 <__alt_data_end+0xf402be00>
   2c284:	8080022c 	andhi	r2,r16,8
   2c288:	10001226 	beq	r2,zero,2c2d4 <__divdf3+0x650>
   2c28c:	8880022c 	andhi	r2,r17,8
   2c290:	1000101e 	bne	r2,zero,2c2d4 <__divdf3+0x650>
   2c294:	00800434 	movhi	r2,16
   2c298:	89400234 	orhi	r5,r17,8
   2c29c:	10bfffc4 	addi	r2,r2,-1
   2c2a0:	b007883a 	mov	r3,r22
   2c2a4:	288a703a 	and	r5,r5,r2
   2c2a8:	4025883a 	mov	r18,r8
   2c2ac:	003f3106 	br	2bf74 <__alt_data_end+0xf402bf74>
   2c2b0:	008000c4 	movi	r2,3
   2c2b4:	3880a626 	beq	r7,r2,2c550 <__divdf3+0x8cc>
   2c2b8:	00800044 	movi	r2,1
   2c2bc:	3880521e 	bne	r7,r2,2c408 <__divdf3+0x784>
   2c2c0:	b807883a 	mov	r3,r23
   2c2c4:	0005883a 	mov	r2,zero
   2c2c8:	000b883a 	mov	r5,zero
   2c2cc:	0025883a 	mov	r18,zero
   2c2d0:	003ecb06 	br	2be00 <__alt_data_end+0xf402be00>
   2c2d4:	00800434 	movhi	r2,16
   2c2d8:	81400234 	orhi	r5,r16,8
   2c2dc:	10bfffc4 	addi	r2,r2,-1
   2c2e0:	a007883a 	mov	r3,r20
   2c2e4:	288a703a 	and	r5,r5,r2
   2c2e8:	003f2206 	br	2bf74 <__alt_data_end+0xf402bf74>
   2c2ec:	183fca26 	beq	r3,zero,2c218 <__alt_data_end+0xf402c218>
   2c2f0:	e5ef883a 	add	r23,fp,r23
   2c2f4:	40bfffc4 	addi	r2,r8,-1
   2c2f8:	bf00392e 	bgeu	r23,fp,2c3e0 <__divdf3+0x75c>
   2c2fc:	1011883a 	mov	r8,r2
   2c300:	ba7fc41e 	bne	r23,r9,2c214 <__alt_data_end+0xf402c214>
   2c304:	b0ffc31e 	bne	r22,r3,2c214 <__alt_data_end+0xf402c214>
   2c308:	003fc306 	br	2c218 <__alt_data_end+0xf402c218>
   2c30c:	143ff604 	addi	r16,r2,-40
   2c310:	9c20983a 	sll	r16,r19,r16
   2c314:	0025883a 	mov	r18,zero
   2c318:	003ee206 	br	2bea4 <__alt_data_end+0xf402bea4>
   2c31c:	d9800315 	stw	r6,12(sp)
   2c320:	d9c00215 	stw	r7,8(sp)
   2c324:	00210bc0 	call	210bc <__clzsi2>
   2c328:	10800804 	addi	r2,r2,32
   2c32c:	d9c00217 	ldw	r7,8(sp)
   2c330:	d9800317 	ldw	r6,12(sp)
   2c334:	003ed106 	br	2be7c <__alt_data_end+0xf402be7c>
   2c338:	147ff604 	addi	r17,r2,-40
   2c33c:	3462983a 	sll	r17,r6,r17
   2c340:	0011883a 	mov	r8,zero
   2c344:	003ef506 	br	2bf1c <__alt_data_end+0xf402bf1c>
   2c348:	3009883a 	mov	r4,r6
   2c34c:	d9800315 	stw	r6,12(sp)
   2c350:	da400115 	stw	r9,4(sp)
   2c354:	00210bc0 	call	210bc <__clzsi2>
   2c358:	10800804 	addi	r2,r2,32
   2c35c:	da400117 	ldw	r9,4(sp)
   2c360:	d9800317 	ldw	r6,12(sp)
   2c364:	003ee306 	br	2bef4 <__alt_data_end+0xf402bef4>
   2c368:	85a1883a 	add	r16,r16,r22
   2c36c:	8585803a 	cmpltu	r2,r16,r22
   2c370:	1705883a 	add	r2,r2,fp
   2c374:	14a5883a 	add	r18,r2,r18
   2c378:	88bfffc4 	addi	r2,r17,-1
   2c37c:	e4800c2e 	bgeu	fp,r18,2c3b0 <__divdf3+0x72c>
   2c380:	90c03e36 	bltu	r18,r3,2c47c <__divdf3+0x7f8>
   2c384:	1c806926 	beq	r3,r18,2c52c <__divdf3+0x8a8>
   2c388:	90c7c83a 	sub	r3,r18,r3
   2c38c:	1023883a 	mov	r17,r2
   2c390:	003f5206 	br	2c0dc <__alt_data_end+0xf402c0dc>
   2c394:	923f0436 	bltu	r18,r8,2bfa8 <__alt_data_end+0xf402bfa8>
   2c398:	800897fa 	slli	r4,r16,31
   2c39c:	9004d07a 	srli	r2,r18,1
   2c3a0:	8006d07a 	srli	r3,r16,1
   2c3a4:	902097fa 	slli	r16,r18,31
   2c3a8:	20a4b03a 	or	r18,r4,r2
   2c3ac:	003f0106 	br	2bfb4 <__alt_data_end+0xf402bfb4>
   2c3b0:	e4bff51e 	bne	fp,r18,2c388 <__alt_data_end+0xf402c388>
   2c3b4:	85bff22e 	bgeu	r16,r22,2c380 <__alt_data_end+0xf402c380>
   2c3b8:	e0c7c83a 	sub	r3,fp,r3
   2c3bc:	1023883a 	mov	r17,r2
   2c3c0:	003f4606 	br	2c0dc <__alt_data_end+0xf402c0dc>
   2c3c4:	100f883a 	mov	r7,r2
   2c3c8:	003f2b06 	br	2c078 <__alt_data_end+0xf402c078>
   2c3cc:	180d883a 	mov	r6,r3
   2c3d0:	003f1306 	br	2c020 <__alt_data_end+0xf402c020>
   2c3d4:	813fe436 	bltu	r16,r4,2c368 <__alt_data_end+0xf402c368>
   2c3d8:	0007883a 	mov	r3,zero
   2c3dc:	003f3f06 	br	2c0dc <__alt_data_end+0xf402c0dc>
   2c3e0:	ba402c36 	bltu	r23,r9,2c494 <__divdf3+0x810>
   2c3e4:	4dc05426 	beq	r9,r23,2c538 <__divdf3+0x8b4>
   2c3e8:	1011883a 	mov	r8,r2
   2c3ec:	003f8906 	br	2c214 <__alt_data_end+0xf402c214>
   2c3f0:	023fffc4 	movi	r8,-1
   2c3f4:	003f8806 	br	2c218 <__alt_data_end+0xf402c218>
   2c3f8:	1811883a 	mov	r8,r3
   2c3fc:	003f5406 	br	2c150 <__alt_data_end+0xf402c150>
   2c400:	1025883a 	mov	r18,r2
   2c404:	003f6d06 	br	2c1bc <__alt_data_end+0xf402c1bc>
   2c408:	b827883a 	mov	r19,r23
   2c40c:	003f8206 	br	2c218 <__alt_data_end+0xf402c218>
   2c410:	010007c4 	movi	r4,31
   2c414:	20c02616 	blt	r4,r3,2c4b0 <__divdf3+0x82c>
   2c418:	00800804 	movi	r2,32
   2c41c:	10c5c83a 	sub	r2,r2,r3
   2c420:	888a983a 	sll	r5,r17,r2
   2c424:	40c8d83a 	srl	r4,r8,r3
   2c428:	4084983a 	sll	r2,r8,r2
   2c42c:	88e2d83a 	srl	r17,r17,r3
   2c430:	2906b03a 	or	r3,r5,r4
   2c434:	1004c03a 	cmpne	r2,r2,zero
   2c438:	1886b03a 	or	r3,r3,r2
   2c43c:	188001cc 	andi	r2,r3,7
   2c440:	10000726 	beq	r2,zero,2c460 <__divdf3+0x7dc>
   2c444:	188003cc 	andi	r2,r3,15
   2c448:	01000104 	movi	r4,4
   2c44c:	11000426 	beq	r2,r4,2c460 <__divdf3+0x7dc>
   2c450:	1805883a 	mov	r2,r3
   2c454:	10c00104 	addi	r3,r2,4
   2c458:	1885803a 	cmpltu	r2,r3,r2
   2c45c:	88a3883a 	add	r17,r17,r2
   2c460:	8880202c 	andhi	r2,r17,128
   2c464:	10002726 	beq	r2,zero,2c504 <__divdf3+0x880>
   2c468:	98c0004c 	andi	r3,r19,1
   2c46c:	00800044 	movi	r2,1
   2c470:	000b883a 	mov	r5,zero
   2c474:	0025883a 	mov	r18,zero
   2c478:	003e6106 	br	2be00 <__alt_data_end+0xf402be00>
   2c47c:	85a1883a 	add	r16,r16,r22
   2c480:	8585803a 	cmpltu	r2,r16,r22
   2c484:	1705883a 	add	r2,r2,fp
   2c488:	14a5883a 	add	r18,r2,r18
   2c48c:	8c7fff84 	addi	r17,r17,-2
   2c490:	003f1106 	br	2c0d8 <__alt_data_end+0xf402c0d8>
   2c494:	b589883a 	add	r4,r22,r22
   2c498:	25ad803a 	cmpltu	r22,r4,r22
   2c49c:	b739883a 	add	fp,r22,fp
   2c4a0:	40bfff84 	addi	r2,r8,-2
   2c4a4:	bf2f883a 	add	r23,r23,fp
   2c4a8:	202d883a 	mov	r22,r4
   2c4ac:	003f9306 	br	2c2fc <__alt_data_end+0xf402c2fc>
   2c4b0:	013ff844 	movi	r4,-31
   2c4b4:	2085c83a 	sub	r2,r4,r2
   2c4b8:	8888d83a 	srl	r4,r17,r2
   2c4bc:	00800804 	movi	r2,32
   2c4c0:	18802126 	beq	r3,r2,2c548 <__divdf3+0x8c4>
   2c4c4:	00801004 	movi	r2,64
   2c4c8:	10c5c83a 	sub	r2,r2,r3
   2c4cc:	8884983a 	sll	r2,r17,r2
   2c4d0:	1204b03a 	or	r2,r2,r8
   2c4d4:	1004c03a 	cmpne	r2,r2,zero
   2c4d8:	2084b03a 	or	r2,r4,r2
   2c4dc:	144001cc 	andi	r17,r2,7
   2c4e0:	88000d1e 	bne	r17,zero,2c518 <__divdf3+0x894>
   2c4e4:	000b883a 	mov	r5,zero
   2c4e8:	1024d0fa 	srli	r18,r2,3
   2c4ec:	98c0004c 	andi	r3,r19,1
   2c4f0:	0005883a 	mov	r2,zero
   2c4f4:	9464b03a 	or	r18,r18,r17
   2c4f8:	003e4106 	br	2be00 <__alt_data_end+0xf402be00>
   2c4fc:	1007883a 	mov	r3,r2
   2c500:	0023883a 	mov	r17,zero
   2c504:	880a927a 	slli	r5,r17,9
   2c508:	1805883a 	mov	r2,r3
   2c50c:	8822977a 	slli	r17,r17,29
   2c510:	280ad33a 	srli	r5,r5,12
   2c514:	003ff406 	br	2c4e8 <__alt_data_end+0xf402c4e8>
   2c518:	10c003cc 	andi	r3,r2,15
   2c51c:	01000104 	movi	r4,4
   2c520:	193ff626 	beq	r3,r4,2c4fc <__alt_data_end+0xf402c4fc>
   2c524:	0023883a 	mov	r17,zero
   2c528:	003fca06 	br	2c454 <__alt_data_end+0xf402c454>
   2c52c:	813fd336 	bltu	r16,r4,2c47c <__alt_data_end+0xf402c47c>
   2c530:	1023883a 	mov	r17,r2
   2c534:	003fa806 	br	2c3d8 <__alt_data_end+0xf402c3d8>
   2c538:	b0ffd636 	bltu	r22,r3,2c494 <__alt_data_end+0xf402c494>
   2c53c:	1011883a 	mov	r8,r2
   2c540:	b0ff341e 	bne	r22,r3,2c214 <__alt_data_end+0xf402c214>
   2c544:	003f3406 	br	2c218 <__alt_data_end+0xf402c218>
   2c548:	0005883a 	mov	r2,zero
   2c54c:	003fe006 	br	2c4d0 <__alt_data_end+0xf402c4d0>
   2c550:	00800434 	movhi	r2,16
   2c554:	89400234 	orhi	r5,r17,8
   2c558:	10bfffc4 	addi	r2,r2,-1
   2c55c:	b807883a 	mov	r3,r23
   2c560:	288a703a 	and	r5,r5,r2
   2c564:	4025883a 	mov	r18,r8
   2c568:	003e8206 	br	2bf74 <__alt_data_end+0xf402bf74>

0002c56c <__eqdf2>:
   2c56c:	2804d53a 	srli	r2,r5,20
   2c570:	3806d53a 	srli	r3,r7,20
   2c574:	02000434 	movhi	r8,16
   2c578:	423fffc4 	addi	r8,r8,-1
   2c57c:	1081ffcc 	andi	r2,r2,2047
   2c580:	0281ffc4 	movi	r10,2047
   2c584:	2a12703a 	and	r9,r5,r8
   2c588:	18c1ffcc 	andi	r3,r3,2047
   2c58c:	3a10703a 	and	r8,r7,r8
   2c590:	280ad7fa 	srli	r5,r5,31
   2c594:	380ed7fa 	srli	r7,r7,31
   2c598:	12801026 	beq	r2,r10,2c5dc <__eqdf2+0x70>
   2c59c:	0281ffc4 	movi	r10,2047
   2c5a0:	1a800a26 	beq	r3,r10,2c5cc <__eqdf2+0x60>
   2c5a4:	10c00226 	beq	r2,r3,2c5b0 <__eqdf2+0x44>
   2c5a8:	00800044 	movi	r2,1
   2c5ac:	f800283a 	ret
   2c5b0:	4a3ffd1e 	bne	r9,r8,2c5a8 <__alt_data_end+0xf402c5a8>
   2c5b4:	21bffc1e 	bne	r4,r6,2c5a8 <__alt_data_end+0xf402c5a8>
   2c5b8:	29c00c26 	beq	r5,r7,2c5ec <__eqdf2+0x80>
   2c5bc:	103ffa1e 	bne	r2,zero,2c5a8 <__alt_data_end+0xf402c5a8>
   2c5c0:	2244b03a 	or	r2,r4,r9
   2c5c4:	1004c03a 	cmpne	r2,r2,zero
   2c5c8:	f800283a 	ret
   2c5cc:	3214b03a 	or	r10,r6,r8
   2c5d0:	503ff426 	beq	r10,zero,2c5a4 <__alt_data_end+0xf402c5a4>
   2c5d4:	00800044 	movi	r2,1
   2c5d8:	f800283a 	ret
   2c5dc:	2254b03a 	or	r10,r4,r9
   2c5e0:	503fee26 	beq	r10,zero,2c59c <__alt_data_end+0xf402c59c>
   2c5e4:	00800044 	movi	r2,1
   2c5e8:	f800283a 	ret
   2c5ec:	0005883a 	mov	r2,zero
   2c5f0:	f800283a 	ret

0002c5f4 <__gedf2>:
   2c5f4:	2804d53a 	srli	r2,r5,20
   2c5f8:	3806d53a 	srli	r3,r7,20
   2c5fc:	02000434 	movhi	r8,16
   2c600:	423fffc4 	addi	r8,r8,-1
   2c604:	1081ffcc 	andi	r2,r2,2047
   2c608:	0241ffc4 	movi	r9,2047
   2c60c:	2a14703a 	and	r10,r5,r8
   2c610:	18c1ffcc 	andi	r3,r3,2047
   2c614:	3a10703a 	and	r8,r7,r8
   2c618:	280ad7fa 	srli	r5,r5,31
   2c61c:	380ed7fa 	srli	r7,r7,31
   2c620:	12401d26 	beq	r2,r9,2c698 <__gedf2+0xa4>
   2c624:	0241ffc4 	movi	r9,2047
   2c628:	1a401226 	beq	r3,r9,2c674 <__gedf2+0x80>
   2c62c:	1000081e 	bne	r2,zero,2c650 <__gedf2+0x5c>
   2c630:	2296b03a 	or	r11,r4,r10
   2c634:	5813003a 	cmpeq	r9,r11,zero
   2c638:	1800091e 	bne	r3,zero,2c660 <__gedf2+0x6c>
   2c63c:	3218b03a 	or	r12,r6,r8
   2c640:	6000071e 	bne	r12,zero,2c660 <__gedf2+0x6c>
   2c644:	0005883a 	mov	r2,zero
   2c648:	5800101e 	bne	r11,zero,2c68c <__gedf2+0x98>
   2c64c:	f800283a 	ret
   2c650:	18000c1e 	bne	r3,zero,2c684 <__gedf2+0x90>
   2c654:	3212b03a 	or	r9,r6,r8
   2c658:	48000c26 	beq	r9,zero,2c68c <__gedf2+0x98>
   2c65c:	0013883a 	mov	r9,zero
   2c660:	39c03fcc 	andi	r7,r7,255
   2c664:	48000826 	beq	r9,zero,2c688 <__gedf2+0x94>
   2c668:	38000926 	beq	r7,zero,2c690 <__gedf2+0x9c>
   2c66c:	00800044 	movi	r2,1
   2c670:	f800283a 	ret
   2c674:	3212b03a 	or	r9,r6,r8
   2c678:	483fec26 	beq	r9,zero,2c62c <__alt_data_end+0xf402c62c>
   2c67c:	00bfff84 	movi	r2,-2
   2c680:	f800283a 	ret
   2c684:	39c03fcc 	andi	r7,r7,255
   2c688:	29c00626 	beq	r5,r7,2c6a4 <__gedf2+0xb0>
   2c68c:	283ff726 	beq	r5,zero,2c66c <__alt_data_end+0xf402c66c>
   2c690:	00bfffc4 	movi	r2,-1
   2c694:	f800283a 	ret
   2c698:	2292b03a 	or	r9,r4,r10
   2c69c:	483fe126 	beq	r9,zero,2c624 <__alt_data_end+0xf402c624>
   2c6a0:	003ff606 	br	2c67c <__alt_data_end+0xf402c67c>
   2c6a4:	18bff916 	blt	r3,r2,2c68c <__alt_data_end+0xf402c68c>
   2c6a8:	10c00316 	blt	r2,r3,2c6b8 <__gedf2+0xc4>
   2c6ac:	42bff736 	bltu	r8,r10,2c68c <__alt_data_end+0xf402c68c>
   2c6b0:	52000326 	beq	r10,r8,2c6c0 <__gedf2+0xcc>
   2c6b4:	5200042e 	bgeu	r10,r8,2c6c8 <__gedf2+0xd4>
   2c6b8:	283fec1e 	bne	r5,zero,2c66c <__alt_data_end+0xf402c66c>
   2c6bc:	003ff406 	br	2c690 <__alt_data_end+0xf402c690>
   2c6c0:	313ff236 	bltu	r6,r4,2c68c <__alt_data_end+0xf402c68c>
   2c6c4:	21bffc36 	bltu	r4,r6,2c6b8 <__alt_data_end+0xf402c6b8>
   2c6c8:	0005883a 	mov	r2,zero
   2c6cc:	f800283a 	ret

0002c6d0 <__ledf2>:
   2c6d0:	2804d53a 	srli	r2,r5,20
   2c6d4:	3810d53a 	srli	r8,r7,20
   2c6d8:	00c00434 	movhi	r3,16
   2c6dc:	18ffffc4 	addi	r3,r3,-1
   2c6e0:	1081ffcc 	andi	r2,r2,2047
   2c6e4:	0241ffc4 	movi	r9,2047
   2c6e8:	28d4703a 	and	r10,r5,r3
   2c6ec:	4201ffcc 	andi	r8,r8,2047
   2c6f0:	38c6703a 	and	r3,r7,r3
   2c6f4:	280ad7fa 	srli	r5,r5,31
   2c6f8:	380ed7fa 	srli	r7,r7,31
   2c6fc:	12401f26 	beq	r2,r9,2c77c <__ledf2+0xac>
   2c700:	0241ffc4 	movi	r9,2047
   2c704:	42401426 	beq	r8,r9,2c758 <__ledf2+0x88>
   2c708:	1000091e 	bne	r2,zero,2c730 <__ledf2+0x60>
   2c70c:	2296b03a 	or	r11,r4,r10
   2c710:	5813003a 	cmpeq	r9,r11,zero
   2c714:	29403fcc 	andi	r5,r5,255
   2c718:	40000a1e 	bne	r8,zero,2c744 <__ledf2+0x74>
   2c71c:	30d8b03a 	or	r12,r6,r3
   2c720:	6000081e 	bne	r12,zero,2c744 <__ledf2+0x74>
   2c724:	0005883a 	mov	r2,zero
   2c728:	5800111e 	bne	r11,zero,2c770 <__ledf2+0xa0>
   2c72c:	f800283a 	ret
   2c730:	29403fcc 	andi	r5,r5,255
   2c734:	40000c1e 	bne	r8,zero,2c768 <__ledf2+0x98>
   2c738:	30d2b03a 	or	r9,r6,r3
   2c73c:	48000c26 	beq	r9,zero,2c770 <__ledf2+0xa0>
   2c740:	0013883a 	mov	r9,zero
   2c744:	39c03fcc 	andi	r7,r7,255
   2c748:	48000826 	beq	r9,zero,2c76c <__ledf2+0x9c>
   2c74c:	38001126 	beq	r7,zero,2c794 <__ledf2+0xc4>
   2c750:	00800044 	movi	r2,1
   2c754:	f800283a 	ret
   2c758:	30d2b03a 	or	r9,r6,r3
   2c75c:	483fea26 	beq	r9,zero,2c708 <__alt_data_end+0xf402c708>
   2c760:	00800084 	movi	r2,2
   2c764:	f800283a 	ret
   2c768:	39c03fcc 	andi	r7,r7,255
   2c76c:	39400726 	beq	r7,r5,2c78c <__ledf2+0xbc>
   2c770:	2800081e 	bne	r5,zero,2c794 <__ledf2+0xc4>
   2c774:	00800044 	movi	r2,1
   2c778:	f800283a 	ret
   2c77c:	2292b03a 	or	r9,r4,r10
   2c780:	483fdf26 	beq	r9,zero,2c700 <__alt_data_end+0xf402c700>
   2c784:	00800084 	movi	r2,2
   2c788:	f800283a 	ret
   2c78c:	4080030e 	bge	r8,r2,2c79c <__ledf2+0xcc>
   2c790:	383fef26 	beq	r7,zero,2c750 <__alt_data_end+0xf402c750>
   2c794:	00bfffc4 	movi	r2,-1
   2c798:	f800283a 	ret
   2c79c:	123feb16 	blt	r2,r8,2c74c <__alt_data_end+0xf402c74c>
   2c7a0:	1abff336 	bltu	r3,r10,2c770 <__alt_data_end+0xf402c770>
   2c7a4:	50c00326 	beq	r10,r3,2c7b4 <__ledf2+0xe4>
   2c7a8:	50c0042e 	bgeu	r10,r3,2c7bc <__ledf2+0xec>
   2c7ac:	283fe81e 	bne	r5,zero,2c750 <__alt_data_end+0xf402c750>
   2c7b0:	003ff806 	br	2c794 <__alt_data_end+0xf402c794>
   2c7b4:	313fee36 	bltu	r6,r4,2c770 <__alt_data_end+0xf402c770>
   2c7b8:	21bffc36 	bltu	r4,r6,2c7ac <__alt_data_end+0xf402c7ac>
   2c7bc:	0005883a 	mov	r2,zero
   2c7c0:	f800283a 	ret

0002c7c4 <__muldf3>:
   2c7c4:	defff304 	addi	sp,sp,-52
   2c7c8:	2804d53a 	srli	r2,r5,20
   2c7cc:	dd800915 	stw	r22,36(sp)
   2c7d0:	282cd7fa 	srli	r22,r5,31
   2c7d4:	dc000315 	stw	r16,12(sp)
   2c7d8:	04000434 	movhi	r16,16
   2c7dc:	dd400815 	stw	r21,32(sp)
   2c7e0:	dc800515 	stw	r18,20(sp)
   2c7e4:	843fffc4 	addi	r16,r16,-1
   2c7e8:	dfc00c15 	stw	ra,48(sp)
   2c7ec:	df000b15 	stw	fp,44(sp)
   2c7f0:	ddc00a15 	stw	r23,40(sp)
   2c7f4:	dd000715 	stw	r20,28(sp)
   2c7f8:	dcc00615 	stw	r19,24(sp)
   2c7fc:	dc400415 	stw	r17,16(sp)
   2c800:	1481ffcc 	andi	r18,r2,2047
   2c804:	2c20703a 	and	r16,r5,r16
   2c808:	b02b883a 	mov	r21,r22
   2c80c:	b2403fcc 	andi	r9,r22,255
   2c810:	90006026 	beq	r18,zero,2c994 <__muldf3+0x1d0>
   2c814:	0081ffc4 	movi	r2,2047
   2c818:	2029883a 	mov	r20,r4
   2c81c:	90803626 	beq	r18,r2,2c8f8 <__muldf3+0x134>
   2c820:	80800434 	orhi	r2,r16,16
   2c824:	100490fa 	slli	r2,r2,3
   2c828:	2020d77a 	srli	r16,r4,29
   2c82c:	202890fa 	slli	r20,r4,3
   2c830:	94bf0044 	addi	r18,r18,-1023
   2c834:	80a0b03a 	or	r16,r16,r2
   2c838:	0027883a 	mov	r19,zero
   2c83c:	0039883a 	mov	fp,zero
   2c840:	3804d53a 	srli	r2,r7,20
   2c844:	382ed7fa 	srli	r23,r7,31
   2c848:	04400434 	movhi	r17,16
   2c84c:	8c7fffc4 	addi	r17,r17,-1
   2c850:	1081ffcc 	andi	r2,r2,2047
   2c854:	3011883a 	mov	r8,r6
   2c858:	3c62703a 	and	r17,r7,r17
   2c85c:	ba803fcc 	andi	r10,r23,255
   2c860:	10006d26 	beq	r2,zero,2ca18 <__muldf3+0x254>
   2c864:	00c1ffc4 	movi	r3,2047
   2c868:	10c06526 	beq	r2,r3,2ca00 <__muldf3+0x23c>
   2c86c:	88c00434 	orhi	r3,r17,16
   2c870:	180690fa 	slli	r3,r3,3
   2c874:	3022d77a 	srli	r17,r6,29
   2c878:	301090fa 	slli	r8,r6,3
   2c87c:	10bf0044 	addi	r2,r2,-1023
   2c880:	88e2b03a 	or	r17,r17,r3
   2c884:	000b883a 	mov	r5,zero
   2c888:	9085883a 	add	r2,r18,r2
   2c88c:	2cc8b03a 	or	r4,r5,r19
   2c890:	00c003c4 	movi	r3,15
   2c894:	bdacf03a 	xor	r22,r23,r22
   2c898:	12c00044 	addi	r11,r2,1
   2c89c:	19009936 	bltu	r3,r4,2cb04 <__muldf3+0x340>
   2c8a0:	200890ba 	slli	r4,r4,2
   2c8a4:	00c000f4 	movhi	r3,3
   2c8a8:	18f22e04 	addi	r3,r3,-14152
   2c8ac:	20c9883a 	add	r4,r4,r3
   2c8b0:	20c00017 	ldw	r3,0(r4)
   2c8b4:	1800683a 	jmp	r3
   2c8b8:	0002cb04 	movi	zero,2860
   2c8bc:	0002c918 	cmpnei	zero,zero,2852
   2c8c0:	0002c918 	cmpnei	zero,zero,2852
   2c8c4:	0002c914 	movui	zero,2852
   2c8c8:	0002cae0 	cmpeqi	zero,zero,2859
   2c8cc:	0002cae0 	cmpeqi	zero,zero,2859
   2c8d0:	0002cac8 	cmpgei	zero,zero,2859
   2c8d4:	0002c914 	movui	zero,2852
   2c8d8:	0002cae0 	cmpeqi	zero,zero,2859
   2c8dc:	0002cac8 	cmpgei	zero,zero,2859
   2c8e0:	0002cae0 	cmpeqi	zero,zero,2859
   2c8e4:	0002c914 	movui	zero,2852
   2c8e8:	0002caf0 	cmpltui	zero,zero,2859
   2c8ec:	0002caf0 	cmpltui	zero,zero,2859
   2c8f0:	0002caf0 	cmpltui	zero,zero,2859
   2c8f4:	0002cd0c 	andi	zero,zero,2868
   2c8f8:	2404b03a 	or	r2,r4,r16
   2c8fc:	10006f1e 	bne	r2,zero,2cabc <__muldf3+0x2f8>
   2c900:	04c00204 	movi	r19,8
   2c904:	0021883a 	mov	r16,zero
   2c908:	0029883a 	mov	r20,zero
   2c90c:	07000084 	movi	fp,2
   2c910:	003fcb06 	br	2c840 <__alt_data_end+0xf402c840>
   2c914:	502d883a 	mov	r22,r10
   2c918:	00800084 	movi	r2,2
   2c91c:	28805726 	beq	r5,r2,2ca7c <__muldf3+0x2b8>
   2c920:	008000c4 	movi	r2,3
   2c924:	28816626 	beq	r5,r2,2cec0 <__muldf3+0x6fc>
   2c928:	00800044 	movi	r2,1
   2c92c:	2881411e 	bne	r5,r2,2ce34 <__muldf3+0x670>
   2c930:	b02b883a 	mov	r21,r22
   2c934:	0005883a 	mov	r2,zero
   2c938:	000b883a 	mov	r5,zero
   2c93c:	0029883a 	mov	r20,zero
   2c940:	1004953a 	slli	r2,r2,20
   2c944:	a8c03fcc 	andi	r3,r21,255
   2c948:	04400434 	movhi	r17,16
   2c94c:	8c7fffc4 	addi	r17,r17,-1
   2c950:	180697fa 	slli	r3,r3,31
   2c954:	2c4a703a 	and	r5,r5,r17
   2c958:	288ab03a 	or	r5,r5,r2
   2c95c:	28c6b03a 	or	r3,r5,r3
   2c960:	a005883a 	mov	r2,r20
   2c964:	dfc00c17 	ldw	ra,48(sp)
   2c968:	df000b17 	ldw	fp,44(sp)
   2c96c:	ddc00a17 	ldw	r23,40(sp)
   2c970:	dd800917 	ldw	r22,36(sp)
   2c974:	dd400817 	ldw	r21,32(sp)
   2c978:	dd000717 	ldw	r20,28(sp)
   2c97c:	dcc00617 	ldw	r19,24(sp)
   2c980:	dc800517 	ldw	r18,20(sp)
   2c984:	dc400417 	ldw	r17,16(sp)
   2c988:	dc000317 	ldw	r16,12(sp)
   2c98c:	dec00d04 	addi	sp,sp,52
   2c990:	f800283a 	ret
   2c994:	2404b03a 	or	r2,r4,r16
   2c998:	2027883a 	mov	r19,r4
   2c99c:	10004226 	beq	r2,zero,2caa8 <__muldf3+0x2e4>
   2c9a0:	8000fc26 	beq	r16,zero,2cd94 <__muldf3+0x5d0>
   2c9a4:	8009883a 	mov	r4,r16
   2c9a8:	d9800215 	stw	r6,8(sp)
   2c9ac:	d9c00015 	stw	r7,0(sp)
   2c9b0:	da400115 	stw	r9,4(sp)
   2c9b4:	00210bc0 	call	210bc <__clzsi2>
   2c9b8:	d9800217 	ldw	r6,8(sp)
   2c9bc:	d9c00017 	ldw	r7,0(sp)
   2c9c0:	da400117 	ldw	r9,4(sp)
   2c9c4:	113ffd44 	addi	r4,r2,-11
   2c9c8:	00c00704 	movi	r3,28
   2c9cc:	1900ed16 	blt	r3,r4,2cd84 <__muldf3+0x5c0>
   2c9d0:	00c00744 	movi	r3,29
   2c9d4:	147ffe04 	addi	r17,r2,-8
   2c9d8:	1907c83a 	sub	r3,r3,r4
   2c9dc:	8460983a 	sll	r16,r16,r17
   2c9e0:	98c6d83a 	srl	r3,r19,r3
   2c9e4:	9c68983a 	sll	r20,r19,r17
   2c9e8:	1c20b03a 	or	r16,r3,r16
   2c9ec:	1080fcc4 	addi	r2,r2,1011
   2c9f0:	00a5c83a 	sub	r18,zero,r2
   2c9f4:	0027883a 	mov	r19,zero
   2c9f8:	0039883a 	mov	fp,zero
   2c9fc:	003f9006 	br	2c840 <__alt_data_end+0xf402c840>
   2ca00:	3446b03a 	or	r3,r6,r17
   2ca04:	1800261e 	bne	r3,zero,2caa0 <__muldf3+0x2dc>
   2ca08:	0023883a 	mov	r17,zero
   2ca0c:	0011883a 	mov	r8,zero
   2ca10:	01400084 	movi	r5,2
   2ca14:	003f9c06 	br	2c888 <__alt_data_end+0xf402c888>
   2ca18:	3446b03a 	or	r3,r6,r17
   2ca1c:	18001c26 	beq	r3,zero,2ca90 <__muldf3+0x2cc>
   2ca20:	8800ce26 	beq	r17,zero,2cd5c <__muldf3+0x598>
   2ca24:	8809883a 	mov	r4,r17
   2ca28:	d9800215 	stw	r6,8(sp)
   2ca2c:	da400115 	stw	r9,4(sp)
   2ca30:	da800015 	stw	r10,0(sp)
   2ca34:	00210bc0 	call	210bc <__clzsi2>
   2ca38:	d9800217 	ldw	r6,8(sp)
   2ca3c:	da400117 	ldw	r9,4(sp)
   2ca40:	da800017 	ldw	r10,0(sp)
   2ca44:	113ffd44 	addi	r4,r2,-11
   2ca48:	00c00704 	movi	r3,28
   2ca4c:	1900bf16 	blt	r3,r4,2cd4c <__muldf3+0x588>
   2ca50:	00c00744 	movi	r3,29
   2ca54:	123ffe04 	addi	r8,r2,-8
   2ca58:	1907c83a 	sub	r3,r3,r4
   2ca5c:	8a22983a 	sll	r17,r17,r8
   2ca60:	30c6d83a 	srl	r3,r6,r3
   2ca64:	3210983a 	sll	r8,r6,r8
   2ca68:	1c62b03a 	or	r17,r3,r17
   2ca6c:	1080fcc4 	addi	r2,r2,1011
   2ca70:	0085c83a 	sub	r2,zero,r2
   2ca74:	000b883a 	mov	r5,zero
   2ca78:	003f8306 	br	2c888 <__alt_data_end+0xf402c888>
   2ca7c:	b02b883a 	mov	r21,r22
   2ca80:	0081ffc4 	movi	r2,2047
   2ca84:	000b883a 	mov	r5,zero
   2ca88:	0029883a 	mov	r20,zero
   2ca8c:	003fac06 	br	2c940 <__alt_data_end+0xf402c940>
   2ca90:	0023883a 	mov	r17,zero
   2ca94:	0011883a 	mov	r8,zero
   2ca98:	01400044 	movi	r5,1
   2ca9c:	003f7a06 	br	2c888 <__alt_data_end+0xf402c888>
   2caa0:	014000c4 	movi	r5,3
   2caa4:	003f7806 	br	2c888 <__alt_data_end+0xf402c888>
   2caa8:	04c00104 	movi	r19,4
   2caac:	0021883a 	mov	r16,zero
   2cab0:	0029883a 	mov	r20,zero
   2cab4:	07000044 	movi	fp,1
   2cab8:	003f6106 	br	2c840 <__alt_data_end+0xf402c840>
   2cabc:	04c00304 	movi	r19,12
   2cac0:	070000c4 	movi	fp,3
   2cac4:	003f5e06 	br	2c840 <__alt_data_end+0xf402c840>
   2cac8:	01400434 	movhi	r5,16
   2cacc:	002b883a 	mov	r21,zero
   2cad0:	297fffc4 	addi	r5,r5,-1
   2cad4:	053fffc4 	movi	r20,-1
   2cad8:	0081ffc4 	movi	r2,2047
   2cadc:	003f9806 	br	2c940 <__alt_data_end+0xf402c940>
   2cae0:	8023883a 	mov	r17,r16
   2cae4:	a011883a 	mov	r8,r20
   2cae8:	e00b883a 	mov	r5,fp
   2caec:	003f8a06 	br	2c918 <__alt_data_end+0xf402c918>
   2caf0:	8023883a 	mov	r17,r16
   2caf4:	a011883a 	mov	r8,r20
   2caf8:	482d883a 	mov	r22,r9
   2cafc:	e00b883a 	mov	r5,fp
   2cb00:	003f8506 	br	2c918 <__alt_data_end+0xf402c918>
   2cb04:	a00ad43a 	srli	r5,r20,16
   2cb08:	401ad43a 	srli	r13,r8,16
   2cb0c:	a53fffcc 	andi	r20,r20,65535
   2cb10:	423fffcc 	andi	r8,r8,65535
   2cb14:	4519383a 	mul	r12,r8,r20
   2cb18:	4147383a 	mul	r3,r8,r5
   2cb1c:	6d09383a 	mul	r4,r13,r20
   2cb20:	600cd43a 	srli	r6,r12,16
   2cb24:	2b5d383a 	mul	r14,r5,r13
   2cb28:	20c9883a 	add	r4,r4,r3
   2cb2c:	310d883a 	add	r6,r6,r4
   2cb30:	30c0022e 	bgeu	r6,r3,2cb3c <__muldf3+0x378>
   2cb34:	00c00074 	movhi	r3,1
   2cb38:	70dd883a 	add	r14,r14,r3
   2cb3c:	8826d43a 	srli	r19,r17,16
   2cb40:	8bffffcc 	andi	r15,r17,65535
   2cb44:	7d23383a 	mul	r17,r15,r20
   2cb48:	7949383a 	mul	r4,r15,r5
   2cb4c:	9d29383a 	mul	r20,r19,r20
   2cb50:	8814d43a 	srli	r10,r17,16
   2cb54:	3012943a 	slli	r9,r6,16
   2cb58:	a129883a 	add	r20,r20,r4
   2cb5c:	633fffcc 	andi	r12,r12,65535
   2cb60:	5515883a 	add	r10,r10,r20
   2cb64:	3006d43a 	srli	r3,r6,16
   2cb68:	4b13883a 	add	r9,r9,r12
   2cb6c:	2ccb383a 	mul	r5,r5,r19
   2cb70:	5100022e 	bgeu	r10,r4,2cb7c <__muldf3+0x3b8>
   2cb74:	01000074 	movhi	r4,1
   2cb78:	290b883a 	add	r5,r5,r4
   2cb7c:	802ad43a 	srli	r21,r16,16
   2cb80:	843fffcc 	andi	r16,r16,65535
   2cb84:	440d383a 	mul	r6,r8,r16
   2cb88:	4565383a 	mul	r18,r8,r21
   2cb8c:	8349383a 	mul	r4,r16,r13
   2cb90:	500e943a 	slli	r7,r10,16
   2cb94:	3010d43a 	srli	r8,r6,16
   2cb98:	5028d43a 	srli	r20,r10,16
   2cb9c:	2489883a 	add	r4,r4,r18
   2cba0:	8abfffcc 	andi	r10,r17,65535
   2cba4:	3a95883a 	add	r10,r7,r10
   2cba8:	4119883a 	add	r12,r8,r4
   2cbac:	a169883a 	add	r20,r20,r5
   2cbb0:	1a87883a 	add	r3,r3,r10
   2cbb4:	6d5b383a 	mul	r13,r13,r21
   2cbb8:	6480022e 	bgeu	r12,r18,2cbc4 <__muldf3+0x400>
   2cbbc:	01000074 	movhi	r4,1
   2cbc0:	691b883a 	add	r13,r13,r4
   2cbc4:	7c25383a 	mul	r18,r15,r16
   2cbc8:	7d4b383a 	mul	r5,r15,r21
   2cbcc:	84cf383a 	mul	r7,r16,r19
   2cbd0:	901ed43a 	srli	r15,r18,16
   2cbd4:	6008d43a 	srli	r4,r12,16
   2cbd8:	6010943a 	slli	r8,r12,16
   2cbdc:	394f883a 	add	r7,r7,r5
   2cbe0:	333fffcc 	andi	r12,r6,65535
   2cbe4:	79df883a 	add	r15,r15,r7
   2cbe8:	235b883a 	add	r13,r4,r13
   2cbec:	9d63383a 	mul	r17,r19,r21
   2cbf0:	4309883a 	add	r4,r8,r12
   2cbf4:	7940022e 	bgeu	r15,r5,2cc00 <__muldf3+0x43c>
   2cbf8:	01400074 	movhi	r5,1
   2cbfc:	8963883a 	add	r17,r17,r5
   2cc00:	780a943a 	slli	r5,r15,16
   2cc04:	91bfffcc 	andi	r6,r18,65535
   2cc08:	70c7883a 	add	r3,r14,r3
   2cc0c:	298d883a 	add	r6,r5,r6
   2cc10:	1a8f803a 	cmpltu	r7,r3,r10
   2cc14:	350b883a 	add	r5,r6,r20
   2cc18:	20c7883a 	add	r3,r4,r3
   2cc1c:	3955883a 	add	r10,r7,r5
   2cc20:	1909803a 	cmpltu	r4,r3,r4
   2cc24:	6a91883a 	add	r8,r13,r10
   2cc28:	780cd43a 	srli	r6,r15,16
   2cc2c:	2219883a 	add	r12,r4,r8
   2cc30:	2d0b803a 	cmpltu	r5,r5,r20
   2cc34:	51cf803a 	cmpltu	r7,r10,r7
   2cc38:	29ceb03a 	or	r7,r5,r7
   2cc3c:	4351803a 	cmpltu	r8,r8,r13
   2cc40:	610b803a 	cmpltu	r5,r12,r4
   2cc44:	4148b03a 	or	r4,r8,r5
   2cc48:	398f883a 	add	r7,r7,r6
   2cc4c:	3909883a 	add	r4,r7,r4
   2cc50:	1810927a 	slli	r8,r3,9
   2cc54:	2449883a 	add	r4,r4,r17
   2cc58:	2008927a 	slli	r4,r4,9
   2cc5c:	6022d5fa 	srli	r17,r12,23
   2cc60:	1806d5fa 	srli	r3,r3,23
   2cc64:	4252b03a 	or	r9,r8,r9
   2cc68:	600a927a 	slli	r5,r12,9
   2cc6c:	4810c03a 	cmpne	r8,r9,zero
   2cc70:	2462b03a 	or	r17,r4,r17
   2cc74:	40c6b03a 	or	r3,r8,r3
   2cc78:	8900402c 	andhi	r4,r17,256
   2cc7c:	1950b03a 	or	r8,r3,r5
   2cc80:	20000726 	beq	r4,zero,2cca0 <__muldf3+0x4dc>
   2cc84:	4006d07a 	srli	r3,r8,1
   2cc88:	880497fa 	slli	r2,r17,31
   2cc8c:	4200004c 	andi	r8,r8,1
   2cc90:	8822d07a 	srli	r17,r17,1
   2cc94:	1a10b03a 	or	r8,r3,r8
   2cc98:	1210b03a 	or	r8,r2,r8
   2cc9c:	5805883a 	mov	r2,r11
   2cca0:	1140ffc4 	addi	r5,r2,1023
   2cca4:	0140440e 	bge	zero,r5,2cdb8 <__muldf3+0x5f4>
   2cca8:	40c001cc 	andi	r3,r8,7
   2ccac:	18000726 	beq	r3,zero,2cccc <__muldf3+0x508>
   2ccb0:	40c003cc 	andi	r3,r8,15
   2ccb4:	01000104 	movi	r4,4
   2ccb8:	19000426 	beq	r3,r4,2cccc <__muldf3+0x508>
   2ccbc:	4107883a 	add	r3,r8,r4
   2ccc0:	1a11803a 	cmpltu	r8,r3,r8
   2ccc4:	8a23883a 	add	r17,r17,r8
   2ccc8:	1811883a 	mov	r8,r3
   2cccc:	88c0402c 	andhi	r3,r17,256
   2ccd0:	18000426 	beq	r3,zero,2cce4 <__muldf3+0x520>
   2ccd4:	11410004 	addi	r5,r2,1024
   2ccd8:	00bfc034 	movhi	r2,65280
   2ccdc:	10bfffc4 	addi	r2,r2,-1
   2cce0:	88a2703a 	and	r17,r17,r2
   2cce4:	0081ff84 	movi	r2,2046
   2cce8:	117f6416 	blt	r2,r5,2ca7c <__alt_data_end+0xf402ca7c>
   2ccec:	8828977a 	slli	r20,r17,29
   2ccf0:	4010d0fa 	srli	r8,r8,3
   2ccf4:	8822927a 	slli	r17,r17,9
   2ccf8:	2881ffcc 	andi	r2,r5,2047
   2ccfc:	a228b03a 	or	r20,r20,r8
   2cd00:	880ad33a 	srli	r5,r17,12
   2cd04:	b02b883a 	mov	r21,r22
   2cd08:	003f0d06 	br	2c940 <__alt_data_end+0xf402c940>
   2cd0c:	8080022c 	andhi	r2,r16,8
   2cd10:	10000926 	beq	r2,zero,2cd38 <__muldf3+0x574>
   2cd14:	8880022c 	andhi	r2,r17,8
   2cd18:	1000071e 	bne	r2,zero,2cd38 <__muldf3+0x574>
   2cd1c:	00800434 	movhi	r2,16
   2cd20:	89400234 	orhi	r5,r17,8
   2cd24:	10bfffc4 	addi	r2,r2,-1
   2cd28:	b82b883a 	mov	r21,r23
   2cd2c:	288a703a 	and	r5,r5,r2
   2cd30:	4029883a 	mov	r20,r8
   2cd34:	003f6806 	br	2cad8 <__alt_data_end+0xf402cad8>
   2cd38:	00800434 	movhi	r2,16
   2cd3c:	81400234 	orhi	r5,r16,8
   2cd40:	10bfffc4 	addi	r2,r2,-1
   2cd44:	288a703a 	and	r5,r5,r2
   2cd48:	003f6306 	br	2cad8 <__alt_data_end+0xf402cad8>
   2cd4c:	147ff604 	addi	r17,r2,-40
   2cd50:	3462983a 	sll	r17,r6,r17
   2cd54:	0011883a 	mov	r8,zero
   2cd58:	003f4406 	br	2ca6c <__alt_data_end+0xf402ca6c>
   2cd5c:	3009883a 	mov	r4,r6
   2cd60:	d9800215 	stw	r6,8(sp)
   2cd64:	da400115 	stw	r9,4(sp)
   2cd68:	da800015 	stw	r10,0(sp)
   2cd6c:	00210bc0 	call	210bc <__clzsi2>
   2cd70:	10800804 	addi	r2,r2,32
   2cd74:	da800017 	ldw	r10,0(sp)
   2cd78:	da400117 	ldw	r9,4(sp)
   2cd7c:	d9800217 	ldw	r6,8(sp)
   2cd80:	003f3006 	br	2ca44 <__alt_data_end+0xf402ca44>
   2cd84:	143ff604 	addi	r16,r2,-40
   2cd88:	9c20983a 	sll	r16,r19,r16
   2cd8c:	0029883a 	mov	r20,zero
   2cd90:	003f1606 	br	2c9ec <__alt_data_end+0xf402c9ec>
   2cd94:	d9800215 	stw	r6,8(sp)
   2cd98:	d9c00015 	stw	r7,0(sp)
   2cd9c:	da400115 	stw	r9,4(sp)
   2cda0:	00210bc0 	call	210bc <__clzsi2>
   2cda4:	10800804 	addi	r2,r2,32
   2cda8:	da400117 	ldw	r9,4(sp)
   2cdac:	d9c00017 	ldw	r7,0(sp)
   2cdb0:	d9800217 	ldw	r6,8(sp)
   2cdb4:	003f0306 	br	2c9c4 <__alt_data_end+0xf402c9c4>
   2cdb8:	00c00044 	movi	r3,1
   2cdbc:	1947c83a 	sub	r3,r3,r5
   2cdc0:	00800e04 	movi	r2,56
   2cdc4:	10feda16 	blt	r2,r3,2c930 <__alt_data_end+0xf402c930>
   2cdc8:	008007c4 	movi	r2,31
   2cdcc:	10c01b16 	blt	r2,r3,2ce3c <__muldf3+0x678>
   2cdd0:	00800804 	movi	r2,32
   2cdd4:	10c5c83a 	sub	r2,r2,r3
   2cdd8:	888a983a 	sll	r5,r17,r2
   2cddc:	40c8d83a 	srl	r4,r8,r3
   2cde0:	4084983a 	sll	r2,r8,r2
   2cde4:	88e2d83a 	srl	r17,r17,r3
   2cde8:	2906b03a 	or	r3,r5,r4
   2cdec:	1004c03a 	cmpne	r2,r2,zero
   2cdf0:	1886b03a 	or	r3,r3,r2
   2cdf4:	188001cc 	andi	r2,r3,7
   2cdf8:	10000726 	beq	r2,zero,2ce18 <__muldf3+0x654>
   2cdfc:	188003cc 	andi	r2,r3,15
   2ce00:	01000104 	movi	r4,4
   2ce04:	11000426 	beq	r2,r4,2ce18 <__muldf3+0x654>
   2ce08:	1805883a 	mov	r2,r3
   2ce0c:	10c00104 	addi	r3,r2,4
   2ce10:	1885803a 	cmpltu	r2,r3,r2
   2ce14:	88a3883a 	add	r17,r17,r2
   2ce18:	8880202c 	andhi	r2,r17,128
   2ce1c:	10001c26 	beq	r2,zero,2ce90 <__muldf3+0x6cc>
   2ce20:	b02b883a 	mov	r21,r22
   2ce24:	00800044 	movi	r2,1
   2ce28:	000b883a 	mov	r5,zero
   2ce2c:	0029883a 	mov	r20,zero
   2ce30:	003ec306 	br	2c940 <__alt_data_end+0xf402c940>
   2ce34:	5805883a 	mov	r2,r11
   2ce38:	003f9906 	br	2cca0 <__alt_data_end+0xf402cca0>
   2ce3c:	00bff844 	movi	r2,-31
   2ce40:	1145c83a 	sub	r2,r2,r5
   2ce44:	8888d83a 	srl	r4,r17,r2
   2ce48:	00800804 	movi	r2,32
   2ce4c:	18801a26 	beq	r3,r2,2ceb8 <__muldf3+0x6f4>
   2ce50:	00801004 	movi	r2,64
   2ce54:	10c5c83a 	sub	r2,r2,r3
   2ce58:	8884983a 	sll	r2,r17,r2
   2ce5c:	1204b03a 	or	r2,r2,r8
   2ce60:	1004c03a 	cmpne	r2,r2,zero
   2ce64:	2084b03a 	or	r2,r4,r2
   2ce68:	144001cc 	andi	r17,r2,7
   2ce6c:	88000d1e 	bne	r17,zero,2cea4 <__muldf3+0x6e0>
   2ce70:	000b883a 	mov	r5,zero
   2ce74:	1028d0fa 	srli	r20,r2,3
   2ce78:	b02b883a 	mov	r21,r22
   2ce7c:	0005883a 	mov	r2,zero
   2ce80:	a468b03a 	or	r20,r20,r17
   2ce84:	003eae06 	br	2c940 <__alt_data_end+0xf402c940>
   2ce88:	1007883a 	mov	r3,r2
   2ce8c:	0023883a 	mov	r17,zero
   2ce90:	880a927a 	slli	r5,r17,9
   2ce94:	1805883a 	mov	r2,r3
   2ce98:	8822977a 	slli	r17,r17,29
   2ce9c:	280ad33a 	srli	r5,r5,12
   2cea0:	003ff406 	br	2ce74 <__alt_data_end+0xf402ce74>
   2cea4:	10c003cc 	andi	r3,r2,15
   2cea8:	01000104 	movi	r4,4
   2ceac:	193ff626 	beq	r3,r4,2ce88 <__alt_data_end+0xf402ce88>
   2ceb0:	0023883a 	mov	r17,zero
   2ceb4:	003fd506 	br	2ce0c <__alt_data_end+0xf402ce0c>
   2ceb8:	0005883a 	mov	r2,zero
   2cebc:	003fe706 	br	2ce5c <__alt_data_end+0xf402ce5c>
   2cec0:	00800434 	movhi	r2,16
   2cec4:	89400234 	orhi	r5,r17,8
   2cec8:	10bfffc4 	addi	r2,r2,-1
   2cecc:	b02b883a 	mov	r21,r22
   2ced0:	288a703a 	and	r5,r5,r2
   2ced4:	4029883a 	mov	r20,r8
   2ced8:	003eff06 	br	2cad8 <__alt_data_end+0xf402cad8>

0002cedc <__subdf3>:
   2cedc:	02000434 	movhi	r8,16
   2cee0:	423fffc4 	addi	r8,r8,-1
   2cee4:	defffb04 	addi	sp,sp,-20
   2cee8:	2a14703a 	and	r10,r5,r8
   2ceec:	3812d53a 	srli	r9,r7,20
   2cef0:	3a10703a 	and	r8,r7,r8
   2cef4:	2006d77a 	srli	r3,r4,29
   2cef8:	3004d77a 	srli	r2,r6,29
   2cefc:	dc000015 	stw	r16,0(sp)
   2cf00:	501490fa 	slli	r10,r10,3
   2cf04:	2820d53a 	srli	r16,r5,20
   2cf08:	401090fa 	slli	r8,r8,3
   2cf0c:	dc800215 	stw	r18,8(sp)
   2cf10:	dc400115 	stw	r17,4(sp)
   2cf14:	dfc00415 	stw	ra,16(sp)
   2cf18:	202290fa 	slli	r17,r4,3
   2cf1c:	dcc00315 	stw	r19,12(sp)
   2cf20:	4a41ffcc 	andi	r9,r9,2047
   2cf24:	0101ffc4 	movi	r4,2047
   2cf28:	2824d7fa 	srli	r18,r5,31
   2cf2c:	8401ffcc 	andi	r16,r16,2047
   2cf30:	50c6b03a 	or	r3,r10,r3
   2cf34:	380ed7fa 	srli	r7,r7,31
   2cf38:	408ab03a 	or	r5,r8,r2
   2cf3c:	300c90fa 	slli	r6,r6,3
   2cf40:	49009626 	beq	r9,r4,2d19c <__subdf3+0x2c0>
   2cf44:	39c0005c 	xori	r7,r7,1
   2cf48:	8245c83a 	sub	r2,r16,r9
   2cf4c:	3c807426 	beq	r7,r18,2d120 <__subdf3+0x244>
   2cf50:	0080af0e 	bge	zero,r2,2d210 <__subdf3+0x334>
   2cf54:	48002a1e 	bne	r9,zero,2d000 <__subdf3+0x124>
   2cf58:	2988b03a 	or	r4,r5,r6
   2cf5c:	20009a1e 	bne	r4,zero,2d1c8 <__subdf3+0x2ec>
   2cf60:	888001cc 	andi	r2,r17,7
   2cf64:	10000726 	beq	r2,zero,2cf84 <__subdf3+0xa8>
   2cf68:	888003cc 	andi	r2,r17,15
   2cf6c:	01000104 	movi	r4,4
   2cf70:	11000426 	beq	r2,r4,2cf84 <__subdf3+0xa8>
   2cf74:	890b883a 	add	r5,r17,r4
   2cf78:	2c63803a 	cmpltu	r17,r5,r17
   2cf7c:	1c47883a 	add	r3,r3,r17
   2cf80:	2823883a 	mov	r17,r5
   2cf84:	1880202c 	andhi	r2,r3,128
   2cf88:	10005926 	beq	r2,zero,2d0f0 <__subdf3+0x214>
   2cf8c:	84000044 	addi	r16,r16,1
   2cf90:	0081ffc4 	movi	r2,2047
   2cf94:	8080be26 	beq	r16,r2,2d290 <__subdf3+0x3b4>
   2cf98:	017fe034 	movhi	r5,65408
   2cf9c:	297fffc4 	addi	r5,r5,-1
   2cfa0:	1946703a 	and	r3,r3,r5
   2cfa4:	1804977a 	slli	r2,r3,29
   2cfa8:	1806927a 	slli	r3,r3,9
   2cfac:	8822d0fa 	srli	r17,r17,3
   2cfb0:	8401ffcc 	andi	r16,r16,2047
   2cfb4:	180ad33a 	srli	r5,r3,12
   2cfb8:	9100004c 	andi	r4,r18,1
   2cfbc:	1444b03a 	or	r2,r2,r17
   2cfc0:	80c1ffcc 	andi	r3,r16,2047
   2cfc4:	1820953a 	slli	r16,r3,20
   2cfc8:	20c03fcc 	andi	r3,r4,255
   2cfcc:	180897fa 	slli	r4,r3,31
   2cfd0:	00c00434 	movhi	r3,16
   2cfd4:	18ffffc4 	addi	r3,r3,-1
   2cfd8:	28c6703a 	and	r3,r5,r3
   2cfdc:	1c06b03a 	or	r3,r3,r16
   2cfe0:	1906b03a 	or	r3,r3,r4
   2cfe4:	dfc00417 	ldw	ra,16(sp)
   2cfe8:	dcc00317 	ldw	r19,12(sp)
   2cfec:	dc800217 	ldw	r18,8(sp)
   2cff0:	dc400117 	ldw	r17,4(sp)
   2cff4:	dc000017 	ldw	r16,0(sp)
   2cff8:	dec00504 	addi	sp,sp,20
   2cffc:	f800283a 	ret
   2d000:	0101ffc4 	movi	r4,2047
   2d004:	813fd626 	beq	r16,r4,2cf60 <__alt_data_end+0xf402cf60>
   2d008:	29402034 	orhi	r5,r5,128
   2d00c:	01000e04 	movi	r4,56
   2d010:	2080a316 	blt	r4,r2,2d2a0 <__subdf3+0x3c4>
   2d014:	010007c4 	movi	r4,31
   2d018:	2080c616 	blt	r4,r2,2d334 <__subdf3+0x458>
   2d01c:	01000804 	movi	r4,32
   2d020:	2089c83a 	sub	r4,r4,r2
   2d024:	2910983a 	sll	r8,r5,r4
   2d028:	308ed83a 	srl	r7,r6,r2
   2d02c:	3108983a 	sll	r4,r6,r4
   2d030:	2884d83a 	srl	r2,r5,r2
   2d034:	41ccb03a 	or	r6,r8,r7
   2d038:	2008c03a 	cmpne	r4,r4,zero
   2d03c:	310cb03a 	or	r6,r6,r4
   2d040:	898dc83a 	sub	r6,r17,r6
   2d044:	89a3803a 	cmpltu	r17,r17,r6
   2d048:	1887c83a 	sub	r3,r3,r2
   2d04c:	1c47c83a 	sub	r3,r3,r17
   2d050:	3023883a 	mov	r17,r6
   2d054:	1880202c 	andhi	r2,r3,128
   2d058:	10002326 	beq	r2,zero,2d0e8 <__subdf3+0x20c>
   2d05c:	04c02034 	movhi	r19,128
   2d060:	9cffffc4 	addi	r19,r19,-1
   2d064:	1ce6703a 	and	r19,r3,r19
   2d068:	98007a26 	beq	r19,zero,2d254 <__subdf3+0x378>
   2d06c:	9809883a 	mov	r4,r19
   2d070:	00210bc0 	call	210bc <__clzsi2>
   2d074:	113ffe04 	addi	r4,r2,-8
   2d078:	00c007c4 	movi	r3,31
   2d07c:	19007b16 	blt	r3,r4,2d26c <__subdf3+0x390>
   2d080:	00800804 	movi	r2,32
   2d084:	1105c83a 	sub	r2,r2,r4
   2d088:	8884d83a 	srl	r2,r17,r2
   2d08c:	9906983a 	sll	r3,r19,r4
   2d090:	8922983a 	sll	r17,r17,r4
   2d094:	10c4b03a 	or	r2,r2,r3
   2d098:	24007816 	blt	r4,r16,2d27c <__subdf3+0x3a0>
   2d09c:	2421c83a 	sub	r16,r4,r16
   2d0a0:	80c00044 	addi	r3,r16,1
   2d0a4:	010007c4 	movi	r4,31
   2d0a8:	20c09516 	blt	r4,r3,2d300 <__subdf3+0x424>
   2d0ac:	01400804 	movi	r5,32
   2d0b0:	28cbc83a 	sub	r5,r5,r3
   2d0b4:	88c8d83a 	srl	r4,r17,r3
   2d0b8:	8962983a 	sll	r17,r17,r5
   2d0bc:	114a983a 	sll	r5,r2,r5
   2d0c0:	10c6d83a 	srl	r3,r2,r3
   2d0c4:	8804c03a 	cmpne	r2,r17,zero
   2d0c8:	290ab03a 	or	r5,r5,r4
   2d0cc:	28a2b03a 	or	r17,r5,r2
   2d0d0:	0021883a 	mov	r16,zero
   2d0d4:	003fa206 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d0d8:	2090b03a 	or	r8,r4,r2
   2d0dc:	40018e26 	beq	r8,zero,2d718 <__subdf3+0x83c>
   2d0e0:	1007883a 	mov	r3,r2
   2d0e4:	2023883a 	mov	r17,r4
   2d0e8:	888001cc 	andi	r2,r17,7
   2d0ec:	103f9e1e 	bne	r2,zero,2cf68 <__alt_data_end+0xf402cf68>
   2d0f0:	1804977a 	slli	r2,r3,29
   2d0f4:	8822d0fa 	srli	r17,r17,3
   2d0f8:	1810d0fa 	srli	r8,r3,3
   2d0fc:	9100004c 	andi	r4,r18,1
   2d100:	1444b03a 	or	r2,r2,r17
   2d104:	00c1ffc4 	movi	r3,2047
   2d108:	80c02826 	beq	r16,r3,2d1ac <__subdf3+0x2d0>
   2d10c:	01400434 	movhi	r5,16
   2d110:	297fffc4 	addi	r5,r5,-1
   2d114:	80e0703a 	and	r16,r16,r3
   2d118:	414a703a 	and	r5,r8,r5
   2d11c:	003fa806 	br	2cfc0 <__alt_data_end+0xf402cfc0>
   2d120:	0080630e 	bge	zero,r2,2d2b0 <__subdf3+0x3d4>
   2d124:	48003026 	beq	r9,zero,2d1e8 <__subdf3+0x30c>
   2d128:	0101ffc4 	movi	r4,2047
   2d12c:	813f8c26 	beq	r16,r4,2cf60 <__alt_data_end+0xf402cf60>
   2d130:	29402034 	orhi	r5,r5,128
   2d134:	01000e04 	movi	r4,56
   2d138:	2080a90e 	bge	r4,r2,2d3e0 <__subdf3+0x504>
   2d13c:	298cb03a 	or	r6,r5,r6
   2d140:	3012c03a 	cmpne	r9,r6,zero
   2d144:	0005883a 	mov	r2,zero
   2d148:	4c53883a 	add	r9,r9,r17
   2d14c:	4c63803a 	cmpltu	r17,r9,r17
   2d150:	10c7883a 	add	r3,r2,r3
   2d154:	88c7883a 	add	r3,r17,r3
   2d158:	4823883a 	mov	r17,r9
   2d15c:	1880202c 	andhi	r2,r3,128
   2d160:	1000d026 	beq	r2,zero,2d4a4 <__subdf3+0x5c8>
   2d164:	84000044 	addi	r16,r16,1
   2d168:	0081ffc4 	movi	r2,2047
   2d16c:	8080fe26 	beq	r16,r2,2d568 <__subdf3+0x68c>
   2d170:	00bfe034 	movhi	r2,65408
   2d174:	10bfffc4 	addi	r2,r2,-1
   2d178:	1886703a 	and	r3,r3,r2
   2d17c:	880ad07a 	srli	r5,r17,1
   2d180:	180497fa 	slli	r2,r3,31
   2d184:	8900004c 	andi	r4,r17,1
   2d188:	2922b03a 	or	r17,r5,r4
   2d18c:	1806d07a 	srli	r3,r3,1
   2d190:	1462b03a 	or	r17,r2,r17
   2d194:	3825883a 	mov	r18,r7
   2d198:	003f7106 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d19c:	2984b03a 	or	r2,r5,r6
   2d1a0:	103f6826 	beq	r2,zero,2cf44 <__alt_data_end+0xf402cf44>
   2d1a4:	39c03fcc 	andi	r7,r7,255
   2d1a8:	003f6706 	br	2cf48 <__alt_data_end+0xf402cf48>
   2d1ac:	4086b03a 	or	r3,r8,r2
   2d1b0:	18015226 	beq	r3,zero,2d6fc <__subdf3+0x820>
   2d1b4:	00c00434 	movhi	r3,16
   2d1b8:	41400234 	orhi	r5,r8,8
   2d1bc:	18ffffc4 	addi	r3,r3,-1
   2d1c0:	28ca703a 	and	r5,r5,r3
   2d1c4:	003f7e06 	br	2cfc0 <__alt_data_end+0xf402cfc0>
   2d1c8:	10bfffc4 	addi	r2,r2,-1
   2d1cc:	1000491e 	bne	r2,zero,2d2f4 <__subdf3+0x418>
   2d1d0:	898fc83a 	sub	r7,r17,r6
   2d1d4:	89e3803a 	cmpltu	r17,r17,r7
   2d1d8:	1947c83a 	sub	r3,r3,r5
   2d1dc:	1c47c83a 	sub	r3,r3,r17
   2d1e0:	3823883a 	mov	r17,r7
   2d1e4:	003f9b06 	br	2d054 <__alt_data_end+0xf402d054>
   2d1e8:	2988b03a 	or	r4,r5,r6
   2d1ec:	203f5c26 	beq	r4,zero,2cf60 <__alt_data_end+0xf402cf60>
   2d1f0:	10bfffc4 	addi	r2,r2,-1
   2d1f4:	1000931e 	bne	r2,zero,2d444 <__subdf3+0x568>
   2d1f8:	898d883a 	add	r6,r17,r6
   2d1fc:	3463803a 	cmpltu	r17,r6,r17
   2d200:	1947883a 	add	r3,r3,r5
   2d204:	88c7883a 	add	r3,r17,r3
   2d208:	3023883a 	mov	r17,r6
   2d20c:	003fd306 	br	2d15c <__alt_data_end+0xf402d15c>
   2d210:	1000541e 	bne	r2,zero,2d364 <__subdf3+0x488>
   2d214:	80800044 	addi	r2,r16,1
   2d218:	1081ffcc 	andi	r2,r2,2047
   2d21c:	01000044 	movi	r4,1
   2d220:	2080a20e 	bge	r4,r2,2d4ac <__subdf3+0x5d0>
   2d224:	8989c83a 	sub	r4,r17,r6
   2d228:	8905803a 	cmpltu	r2,r17,r4
   2d22c:	1967c83a 	sub	r19,r3,r5
   2d230:	98a7c83a 	sub	r19,r19,r2
   2d234:	9880202c 	andhi	r2,r19,128
   2d238:	10006326 	beq	r2,zero,2d3c8 <__subdf3+0x4ec>
   2d23c:	3463c83a 	sub	r17,r6,r17
   2d240:	28c7c83a 	sub	r3,r5,r3
   2d244:	344d803a 	cmpltu	r6,r6,r17
   2d248:	19a7c83a 	sub	r19,r3,r6
   2d24c:	3825883a 	mov	r18,r7
   2d250:	983f861e 	bne	r19,zero,2d06c <__alt_data_end+0xf402d06c>
   2d254:	8809883a 	mov	r4,r17
   2d258:	00210bc0 	call	210bc <__clzsi2>
   2d25c:	10800804 	addi	r2,r2,32
   2d260:	113ffe04 	addi	r4,r2,-8
   2d264:	00c007c4 	movi	r3,31
   2d268:	193f850e 	bge	r3,r4,2d080 <__alt_data_end+0xf402d080>
   2d26c:	10bff604 	addi	r2,r2,-40
   2d270:	8884983a 	sll	r2,r17,r2
   2d274:	0023883a 	mov	r17,zero
   2d278:	243f880e 	bge	r4,r16,2d09c <__alt_data_end+0xf402d09c>
   2d27c:	00ffe034 	movhi	r3,65408
   2d280:	18ffffc4 	addi	r3,r3,-1
   2d284:	8121c83a 	sub	r16,r16,r4
   2d288:	10c6703a 	and	r3,r2,r3
   2d28c:	003f3406 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d290:	9100004c 	andi	r4,r18,1
   2d294:	000b883a 	mov	r5,zero
   2d298:	0005883a 	mov	r2,zero
   2d29c:	003f4806 	br	2cfc0 <__alt_data_end+0xf402cfc0>
   2d2a0:	298cb03a 	or	r6,r5,r6
   2d2a4:	300cc03a 	cmpne	r6,r6,zero
   2d2a8:	0005883a 	mov	r2,zero
   2d2ac:	003f6406 	br	2d040 <__alt_data_end+0xf402d040>
   2d2b0:	10009a1e 	bne	r2,zero,2d51c <__subdf3+0x640>
   2d2b4:	82400044 	addi	r9,r16,1
   2d2b8:	4881ffcc 	andi	r2,r9,2047
   2d2bc:	02800044 	movi	r10,1
   2d2c0:	5080670e 	bge	r10,r2,2d460 <__subdf3+0x584>
   2d2c4:	0081ffc4 	movi	r2,2047
   2d2c8:	4880af26 	beq	r9,r2,2d588 <__subdf3+0x6ac>
   2d2cc:	898d883a 	add	r6,r17,r6
   2d2d0:	1945883a 	add	r2,r3,r5
   2d2d4:	3447803a 	cmpltu	r3,r6,r17
   2d2d8:	1887883a 	add	r3,r3,r2
   2d2dc:	182297fa 	slli	r17,r3,31
   2d2e0:	300cd07a 	srli	r6,r6,1
   2d2e4:	1806d07a 	srli	r3,r3,1
   2d2e8:	4821883a 	mov	r16,r9
   2d2ec:	89a2b03a 	or	r17,r17,r6
   2d2f0:	003f1b06 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d2f4:	0101ffc4 	movi	r4,2047
   2d2f8:	813f441e 	bne	r16,r4,2d00c <__alt_data_end+0xf402d00c>
   2d2fc:	003f1806 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d300:	843ff844 	addi	r16,r16,-31
   2d304:	01400804 	movi	r5,32
   2d308:	1408d83a 	srl	r4,r2,r16
   2d30c:	19405026 	beq	r3,r5,2d450 <__subdf3+0x574>
   2d310:	01401004 	movi	r5,64
   2d314:	28c7c83a 	sub	r3,r5,r3
   2d318:	10c4983a 	sll	r2,r2,r3
   2d31c:	88a2b03a 	or	r17,r17,r2
   2d320:	8822c03a 	cmpne	r17,r17,zero
   2d324:	2462b03a 	or	r17,r4,r17
   2d328:	0007883a 	mov	r3,zero
   2d32c:	0021883a 	mov	r16,zero
   2d330:	003f6d06 	br	2d0e8 <__alt_data_end+0xf402d0e8>
   2d334:	11fff804 	addi	r7,r2,-32
   2d338:	01000804 	movi	r4,32
   2d33c:	29ced83a 	srl	r7,r5,r7
   2d340:	11004526 	beq	r2,r4,2d458 <__subdf3+0x57c>
   2d344:	01001004 	movi	r4,64
   2d348:	2089c83a 	sub	r4,r4,r2
   2d34c:	2904983a 	sll	r2,r5,r4
   2d350:	118cb03a 	or	r6,r2,r6
   2d354:	300cc03a 	cmpne	r6,r6,zero
   2d358:	398cb03a 	or	r6,r7,r6
   2d35c:	0005883a 	mov	r2,zero
   2d360:	003f3706 	br	2d040 <__alt_data_end+0xf402d040>
   2d364:	80002a26 	beq	r16,zero,2d410 <__subdf3+0x534>
   2d368:	0101ffc4 	movi	r4,2047
   2d36c:	49006626 	beq	r9,r4,2d508 <__subdf3+0x62c>
   2d370:	0085c83a 	sub	r2,zero,r2
   2d374:	18c02034 	orhi	r3,r3,128
   2d378:	01000e04 	movi	r4,56
   2d37c:	20807e16 	blt	r4,r2,2d578 <__subdf3+0x69c>
   2d380:	010007c4 	movi	r4,31
   2d384:	2080e716 	blt	r4,r2,2d724 <__subdf3+0x848>
   2d388:	01000804 	movi	r4,32
   2d38c:	2089c83a 	sub	r4,r4,r2
   2d390:	1914983a 	sll	r10,r3,r4
   2d394:	8890d83a 	srl	r8,r17,r2
   2d398:	8908983a 	sll	r4,r17,r4
   2d39c:	1884d83a 	srl	r2,r3,r2
   2d3a0:	5222b03a 	or	r17,r10,r8
   2d3a4:	2006c03a 	cmpne	r3,r4,zero
   2d3a8:	88e2b03a 	or	r17,r17,r3
   2d3ac:	3463c83a 	sub	r17,r6,r17
   2d3b0:	2885c83a 	sub	r2,r5,r2
   2d3b4:	344d803a 	cmpltu	r6,r6,r17
   2d3b8:	1187c83a 	sub	r3,r2,r6
   2d3bc:	4821883a 	mov	r16,r9
   2d3c0:	3825883a 	mov	r18,r7
   2d3c4:	003f2306 	br	2d054 <__alt_data_end+0xf402d054>
   2d3c8:	24d0b03a 	or	r8,r4,r19
   2d3cc:	40001b1e 	bne	r8,zero,2d43c <__subdf3+0x560>
   2d3d0:	0005883a 	mov	r2,zero
   2d3d4:	0009883a 	mov	r4,zero
   2d3d8:	0021883a 	mov	r16,zero
   2d3dc:	003f4906 	br	2d104 <__alt_data_end+0xf402d104>
   2d3e0:	010007c4 	movi	r4,31
   2d3e4:	20803a16 	blt	r4,r2,2d4d0 <__subdf3+0x5f4>
   2d3e8:	01000804 	movi	r4,32
   2d3ec:	2089c83a 	sub	r4,r4,r2
   2d3f0:	2912983a 	sll	r9,r5,r4
   2d3f4:	3090d83a 	srl	r8,r6,r2
   2d3f8:	3108983a 	sll	r4,r6,r4
   2d3fc:	2884d83a 	srl	r2,r5,r2
   2d400:	4a12b03a 	or	r9,r9,r8
   2d404:	2008c03a 	cmpne	r4,r4,zero
   2d408:	4912b03a 	or	r9,r9,r4
   2d40c:	003f4e06 	br	2d148 <__alt_data_end+0xf402d148>
   2d410:	1c48b03a 	or	r4,r3,r17
   2d414:	20003c26 	beq	r4,zero,2d508 <__subdf3+0x62c>
   2d418:	0084303a 	nor	r2,zero,r2
   2d41c:	1000381e 	bne	r2,zero,2d500 <__subdf3+0x624>
   2d420:	3463c83a 	sub	r17,r6,r17
   2d424:	28c5c83a 	sub	r2,r5,r3
   2d428:	344d803a 	cmpltu	r6,r6,r17
   2d42c:	1187c83a 	sub	r3,r2,r6
   2d430:	4821883a 	mov	r16,r9
   2d434:	3825883a 	mov	r18,r7
   2d438:	003f0606 	br	2d054 <__alt_data_end+0xf402d054>
   2d43c:	2023883a 	mov	r17,r4
   2d440:	003f0906 	br	2d068 <__alt_data_end+0xf402d068>
   2d444:	0101ffc4 	movi	r4,2047
   2d448:	813f3a1e 	bne	r16,r4,2d134 <__alt_data_end+0xf402d134>
   2d44c:	003ec406 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d450:	0005883a 	mov	r2,zero
   2d454:	003fb106 	br	2d31c <__alt_data_end+0xf402d31c>
   2d458:	0005883a 	mov	r2,zero
   2d45c:	003fbc06 	br	2d350 <__alt_data_end+0xf402d350>
   2d460:	1c44b03a 	or	r2,r3,r17
   2d464:	80008e1e 	bne	r16,zero,2d6a0 <__subdf3+0x7c4>
   2d468:	1000c826 	beq	r2,zero,2d78c <__subdf3+0x8b0>
   2d46c:	2984b03a 	or	r2,r5,r6
   2d470:	103ebb26 	beq	r2,zero,2cf60 <__alt_data_end+0xf402cf60>
   2d474:	8989883a 	add	r4,r17,r6
   2d478:	1945883a 	add	r2,r3,r5
   2d47c:	2447803a 	cmpltu	r3,r4,r17
   2d480:	1887883a 	add	r3,r3,r2
   2d484:	1880202c 	andhi	r2,r3,128
   2d488:	2023883a 	mov	r17,r4
   2d48c:	103f1626 	beq	r2,zero,2d0e8 <__alt_data_end+0xf402d0e8>
   2d490:	00bfe034 	movhi	r2,65408
   2d494:	10bfffc4 	addi	r2,r2,-1
   2d498:	5021883a 	mov	r16,r10
   2d49c:	1886703a 	and	r3,r3,r2
   2d4a0:	003eaf06 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d4a4:	3825883a 	mov	r18,r7
   2d4a8:	003f0f06 	br	2d0e8 <__alt_data_end+0xf402d0e8>
   2d4ac:	1c44b03a 	or	r2,r3,r17
   2d4b0:	8000251e 	bne	r16,zero,2d548 <__subdf3+0x66c>
   2d4b4:	1000661e 	bne	r2,zero,2d650 <__subdf3+0x774>
   2d4b8:	2990b03a 	or	r8,r5,r6
   2d4bc:	40009626 	beq	r8,zero,2d718 <__subdf3+0x83c>
   2d4c0:	2807883a 	mov	r3,r5
   2d4c4:	3023883a 	mov	r17,r6
   2d4c8:	3825883a 	mov	r18,r7
   2d4cc:	003ea406 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d4d0:	127ff804 	addi	r9,r2,-32
   2d4d4:	01000804 	movi	r4,32
   2d4d8:	2a52d83a 	srl	r9,r5,r9
   2d4dc:	11008c26 	beq	r2,r4,2d710 <__subdf3+0x834>
   2d4e0:	01001004 	movi	r4,64
   2d4e4:	2085c83a 	sub	r2,r4,r2
   2d4e8:	2884983a 	sll	r2,r5,r2
   2d4ec:	118cb03a 	or	r6,r2,r6
   2d4f0:	300cc03a 	cmpne	r6,r6,zero
   2d4f4:	4992b03a 	or	r9,r9,r6
   2d4f8:	0005883a 	mov	r2,zero
   2d4fc:	003f1206 	br	2d148 <__alt_data_end+0xf402d148>
   2d500:	0101ffc4 	movi	r4,2047
   2d504:	493f9c1e 	bne	r9,r4,2d378 <__alt_data_end+0xf402d378>
   2d508:	2807883a 	mov	r3,r5
   2d50c:	3023883a 	mov	r17,r6
   2d510:	4821883a 	mov	r16,r9
   2d514:	3825883a 	mov	r18,r7
   2d518:	003e9106 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d51c:	80001f1e 	bne	r16,zero,2d59c <__subdf3+0x6c0>
   2d520:	1c48b03a 	or	r4,r3,r17
   2d524:	20005a26 	beq	r4,zero,2d690 <__subdf3+0x7b4>
   2d528:	0084303a 	nor	r2,zero,r2
   2d52c:	1000561e 	bne	r2,zero,2d688 <__subdf3+0x7ac>
   2d530:	89a3883a 	add	r17,r17,r6
   2d534:	1945883a 	add	r2,r3,r5
   2d538:	898d803a 	cmpltu	r6,r17,r6
   2d53c:	3087883a 	add	r3,r6,r2
   2d540:	4821883a 	mov	r16,r9
   2d544:	003f0506 	br	2d15c <__alt_data_end+0xf402d15c>
   2d548:	10002b1e 	bne	r2,zero,2d5f8 <__subdf3+0x71c>
   2d54c:	2984b03a 	or	r2,r5,r6
   2d550:	10008026 	beq	r2,zero,2d754 <__subdf3+0x878>
   2d554:	2807883a 	mov	r3,r5
   2d558:	3023883a 	mov	r17,r6
   2d55c:	3825883a 	mov	r18,r7
   2d560:	0401ffc4 	movi	r16,2047
   2d564:	003e7e06 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d568:	3809883a 	mov	r4,r7
   2d56c:	0011883a 	mov	r8,zero
   2d570:	0005883a 	mov	r2,zero
   2d574:	003ee306 	br	2d104 <__alt_data_end+0xf402d104>
   2d578:	1c62b03a 	or	r17,r3,r17
   2d57c:	8822c03a 	cmpne	r17,r17,zero
   2d580:	0005883a 	mov	r2,zero
   2d584:	003f8906 	br	2d3ac <__alt_data_end+0xf402d3ac>
   2d588:	3809883a 	mov	r4,r7
   2d58c:	4821883a 	mov	r16,r9
   2d590:	0011883a 	mov	r8,zero
   2d594:	0005883a 	mov	r2,zero
   2d598:	003eda06 	br	2d104 <__alt_data_end+0xf402d104>
   2d59c:	0101ffc4 	movi	r4,2047
   2d5a0:	49003b26 	beq	r9,r4,2d690 <__subdf3+0x7b4>
   2d5a4:	0085c83a 	sub	r2,zero,r2
   2d5a8:	18c02034 	orhi	r3,r3,128
   2d5ac:	01000e04 	movi	r4,56
   2d5b0:	20806e16 	blt	r4,r2,2d76c <__subdf3+0x890>
   2d5b4:	010007c4 	movi	r4,31
   2d5b8:	20807716 	blt	r4,r2,2d798 <__subdf3+0x8bc>
   2d5bc:	01000804 	movi	r4,32
   2d5c0:	2089c83a 	sub	r4,r4,r2
   2d5c4:	1914983a 	sll	r10,r3,r4
   2d5c8:	8890d83a 	srl	r8,r17,r2
   2d5cc:	8908983a 	sll	r4,r17,r4
   2d5d0:	1884d83a 	srl	r2,r3,r2
   2d5d4:	5222b03a 	or	r17,r10,r8
   2d5d8:	2006c03a 	cmpne	r3,r4,zero
   2d5dc:	88e2b03a 	or	r17,r17,r3
   2d5e0:	89a3883a 	add	r17,r17,r6
   2d5e4:	1145883a 	add	r2,r2,r5
   2d5e8:	898d803a 	cmpltu	r6,r17,r6
   2d5ec:	3087883a 	add	r3,r6,r2
   2d5f0:	4821883a 	mov	r16,r9
   2d5f4:	003ed906 	br	2d15c <__alt_data_end+0xf402d15c>
   2d5f8:	2984b03a 	or	r2,r5,r6
   2d5fc:	10004226 	beq	r2,zero,2d708 <__subdf3+0x82c>
   2d600:	1808d0fa 	srli	r4,r3,3
   2d604:	8822d0fa 	srli	r17,r17,3
   2d608:	1806977a 	slli	r3,r3,29
   2d60c:	2080022c 	andhi	r2,r4,8
   2d610:	1c62b03a 	or	r17,r3,r17
   2d614:	10000826 	beq	r2,zero,2d638 <__subdf3+0x75c>
   2d618:	2812d0fa 	srli	r9,r5,3
   2d61c:	4880022c 	andhi	r2,r9,8
   2d620:	1000051e 	bne	r2,zero,2d638 <__subdf3+0x75c>
   2d624:	300cd0fa 	srli	r6,r6,3
   2d628:	2804977a 	slli	r2,r5,29
   2d62c:	4809883a 	mov	r4,r9
   2d630:	3825883a 	mov	r18,r7
   2d634:	11a2b03a 	or	r17,r2,r6
   2d638:	8806d77a 	srli	r3,r17,29
   2d63c:	200890fa 	slli	r4,r4,3
   2d640:	882290fa 	slli	r17,r17,3
   2d644:	0401ffc4 	movi	r16,2047
   2d648:	1906b03a 	or	r3,r3,r4
   2d64c:	003e4406 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d650:	2984b03a 	or	r2,r5,r6
   2d654:	103e4226 	beq	r2,zero,2cf60 <__alt_data_end+0xf402cf60>
   2d658:	8989c83a 	sub	r4,r17,r6
   2d65c:	8911803a 	cmpltu	r8,r17,r4
   2d660:	1945c83a 	sub	r2,r3,r5
   2d664:	1205c83a 	sub	r2,r2,r8
   2d668:	1200202c 	andhi	r8,r2,128
   2d66c:	403e9a26 	beq	r8,zero,2d0d8 <__alt_data_end+0xf402d0d8>
   2d670:	3463c83a 	sub	r17,r6,r17
   2d674:	28c5c83a 	sub	r2,r5,r3
   2d678:	344d803a 	cmpltu	r6,r6,r17
   2d67c:	1187c83a 	sub	r3,r2,r6
   2d680:	3825883a 	mov	r18,r7
   2d684:	003e3606 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d688:	0101ffc4 	movi	r4,2047
   2d68c:	493fc71e 	bne	r9,r4,2d5ac <__alt_data_end+0xf402d5ac>
   2d690:	2807883a 	mov	r3,r5
   2d694:	3023883a 	mov	r17,r6
   2d698:	4821883a 	mov	r16,r9
   2d69c:	003e3006 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d6a0:	10003626 	beq	r2,zero,2d77c <__subdf3+0x8a0>
   2d6a4:	2984b03a 	or	r2,r5,r6
   2d6a8:	10001726 	beq	r2,zero,2d708 <__subdf3+0x82c>
   2d6ac:	1808d0fa 	srli	r4,r3,3
   2d6b0:	8822d0fa 	srli	r17,r17,3
   2d6b4:	1806977a 	slli	r3,r3,29
   2d6b8:	2080022c 	andhi	r2,r4,8
   2d6bc:	1c62b03a 	or	r17,r3,r17
   2d6c0:	10000726 	beq	r2,zero,2d6e0 <__subdf3+0x804>
   2d6c4:	2812d0fa 	srli	r9,r5,3
   2d6c8:	4880022c 	andhi	r2,r9,8
   2d6cc:	1000041e 	bne	r2,zero,2d6e0 <__subdf3+0x804>
   2d6d0:	300cd0fa 	srli	r6,r6,3
   2d6d4:	2804977a 	slli	r2,r5,29
   2d6d8:	4809883a 	mov	r4,r9
   2d6dc:	11a2b03a 	or	r17,r2,r6
   2d6e0:	8806d77a 	srli	r3,r17,29
   2d6e4:	200890fa 	slli	r4,r4,3
   2d6e8:	882290fa 	slli	r17,r17,3
   2d6ec:	3825883a 	mov	r18,r7
   2d6f0:	1906b03a 	or	r3,r3,r4
   2d6f4:	0401ffc4 	movi	r16,2047
   2d6f8:	003e1906 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d6fc:	000b883a 	mov	r5,zero
   2d700:	0005883a 	mov	r2,zero
   2d704:	003e2e06 	br	2cfc0 <__alt_data_end+0xf402cfc0>
   2d708:	0401ffc4 	movi	r16,2047
   2d70c:	003e1406 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d710:	0005883a 	mov	r2,zero
   2d714:	003f7506 	br	2d4ec <__alt_data_end+0xf402d4ec>
   2d718:	0005883a 	mov	r2,zero
   2d71c:	0009883a 	mov	r4,zero
   2d720:	003e7806 	br	2d104 <__alt_data_end+0xf402d104>
   2d724:	123ff804 	addi	r8,r2,-32
   2d728:	01000804 	movi	r4,32
   2d72c:	1a10d83a 	srl	r8,r3,r8
   2d730:	11002526 	beq	r2,r4,2d7c8 <__subdf3+0x8ec>
   2d734:	01001004 	movi	r4,64
   2d738:	2085c83a 	sub	r2,r4,r2
   2d73c:	1884983a 	sll	r2,r3,r2
   2d740:	1444b03a 	or	r2,r2,r17
   2d744:	1004c03a 	cmpne	r2,r2,zero
   2d748:	40a2b03a 	or	r17,r8,r2
   2d74c:	0005883a 	mov	r2,zero
   2d750:	003f1606 	br	2d3ac <__alt_data_end+0xf402d3ac>
   2d754:	02000434 	movhi	r8,16
   2d758:	0009883a 	mov	r4,zero
   2d75c:	423fffc4 	addi	r8,r8,-1
   2d760:	00bfffc4 	movi	r2,-1
   2d764:	0401ffc4 	movi	r16,2047
   2d768:	003e6606 	br	2d104 <__alt_data_end+0xf402d104>
   2d76c:	1c62b03a 	or	r17,r3,r17
   2d770:	8822c03a 	cmpne	r17,r17,zero
   2d774:	0005883a 	mov	r2,zero
   2d778:	003f9906 	br	2d5e0 <__alt_data_end+0xf402d5e0>
   2d77c:	2807883a 	mov	r3,r5
   2d780:	3023883a 	mov	r17,r6
   2d784:	0401ffc4 	movi	r16,2047
   2d788:	003df506 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d78c:	2807883a 	mov	r3,r5
   2d790:	3023883a 	mov	r17,r6
   2d794:	003df206 	br	2cf60 <__alt_data_end+0xf402cf60>
   2d798:	123ff804 	addi	r8,r2,-32
   2d79c:	01000804 	movi	r4,32
   2d7a0:	1a10d83a 	srl	r8,r3,r8
   2d7a4:	11000a26 	beq	r2,r4,2d7d0 <__subdf3+0x8f4>
   2d7a8:	01001004 	movi	r4,64
   2d7ac:	2085c83a 	sub	r2,r4,r2
   2d7b0:	1884983a 	sll	r2,r3,r2
   2d7b4:	1444b03a 	or	r2,r2,r17
   2d7b8:	1004c03a 	cmpne	r2,r2,zero
   2d7bc:	40a2b03a 	or	r17,r8,r2
   2d7c0:	0005883a 	mov	r2,zero
   2d7c4:	003f8606 	br	2d5e0 <__alt_data_end+0xf402d5e0>
   2d7c8:	0005883a 	mov	r2,zero
   2d7cc:	003fdc06 	br	2d740 <__alt_data_end+0xf402d740>
   2d7d0:	0005883a 	mov	r2,zero
   2d7d4:	003ff706 	br	2d7b4 <__alt_data_end+0xf402d7b4>

0002d7d8 <__fixdfsi>:
   2d7d8:	280cd53a 	srli	r6,r5,20
   2d7dc:	00c00434 	movhi	r3,16
   2d7e0:	18ffffc4 	addi	r3,r3,-1
   2d7e4:	3181ffcc 	andi	r6,r6,2047
   2d7e8:	01c0ff84 	movi	r7,1022
   2d7ec:	28c6703a 	and	r3,r5,r3
   2d7f0:	280ad7fa 	srli	r5,r5,31
   2d7f4:	3980120e 	bge	r7,r6,2d840 <__fixdfsi+0x68>
   2d7f8:	00810744 	movi	r2,1053
   2d7fc:	11800c16 	blt	r2,r6,2d830 <__fixdfsi+0x58>
   2d800:	00810cc4 	movi	r2,1075
   2d804:	1185c83a 	sub	r2,r2,r6
   2d808:	01c007c4 	movi	r7,31
   2d80c:	18c00434 	orhi	r3,r3,16
   2d810:	38800d16 	blt	r7,r2,2d848 <__fixdfsi+0x70>
   2d814:	31befb44 	addi	r6,r6,-1043
   2d818:	2084d83a 	srl	r2,r4,r2
   2d81c:	1986983a 	sll	r3,r3,r6
   2d820:	1884b03a 	or	r2,r3,r2
   2d824:	28000726 	beq	r5,zero,2d844 <__fixdfsi+0x6c>
   2d828:	0085c83a 	sub	r2,zero,r2
   2d82c:	f800283a 	ret
   2d830:	00a00034 	movhi	r2,32768
   2d834:	10bfffc4 	addi	r2,r2,-1
   2d838:	2885883a 	add	r2,r5,r2
   2d83c:	f800283a 	ret
   2d840:	0005883a 	mov	r2,zero
   2d844:	f800283a 	ret
   2d848:	008104c4 	movi	r2,1043
   2d84c:	1185c83a 	sub	r2,r2,r6
   2d850:	1884d83a 	srl	r2,r3,r2
   2d854:	003ff306 	br	2d824 <__alt_data_end+0xf402d824>

0002d858 <__floatsidf>:
   2d858:	defffd04 	addi	sp,sp,-12
   2d85c:	dfc00215 	stw	ra,8(sp)
   2d860:	dc400115 	stw	r17,4(sp)
   2d864:	dc000015 	stw	r16,0(sp)
   2d868:	20002b26 	beq	r4,zero,2d918 <__floatsidf+0xc0>
   2d86c:	2023883a 	mov	r17,r4
   2d870:	2020d7fa 	srli	r16,r4,31
   2d874:	20002d16 	blt	r4,zero,2d92c <__floatsidf+0xd4>
   2d878:	8809883a 	mov	r4,r17
   2d87c:	00210bc0 	call	210bc <__clzsi2>
   2d880:	01410784 	movi	r5,1054
   2d884:	288bc83a 	sub	r5,r5,r2
   2d888:	01010cc4 	movi	r4,1075
   2d88c:	2149c83a 	sub	r4,r4,r5
   2d890:	00c007c4 	movi	r3,31
   2d894:	1900160e 	bge	r3,r4,2d8f0 <__floatsidf+0x98>
   2d898:	00c104c4 	movi	r3,1043
   2d89c:	1947c83a 	sub	r3,r3,r5
   2d8a0:	88c6983a 	sll	r3,r17,r3
   2d8a4:	00800434 	movhi	r2,16
   2d8a8:	10bfffc4 	addi	r2,r2,-1
   2d8ac:	1886703a 	and	r3,r3,r2
   2d8b0:	2941ffcc 	andi	r5,r5,2047
   2d8b4:	800d883a 	mov	r6,r16
   2d8b8:	0005883a 	mov	r2,zero
   2d8bc:	280a953a 	slli	r5,r5,20
   2d8c0:	31803fcc 	andi	r6,r6,255
   2d8c4:	01000434 	movhi	r4,16
   2d8c8:	300c97fa 	slli	r6,r6,31
   2d8cc:	213fffc4 	addi	r4,r4,-1
   2d8d0:	1906703a 	and	r3,r3,r4
   2d8d4:	1946b03a 	or	r3,r3,r5
   2d8d8:	1986b03a 	or	r3,r3,r6
   2d8dc:	dfc00217 	ldw	ra,8(sp)
   2d8e0:	dc400117 	ldw	r17,4(sp)
   2d8e4:	dc000017 	ldw	r16,0(sp)
   2d8e8:	dec00304 	addi	sp,sp,12
   2d8ec:	f800283a 	ret
   2d8f0:	00c002c4 	movi	r3,11
   2d8f4:	1887c83a 	sub	r3,r3,r2
   2d8f8:	88c6d83a 	srl	r3,r17,r3
   2d8fc:	8904983a 	sll	r2,r17,r4
   2d900:	01000434 	movhi	r4,16
   2d904:	213fffc4 	addi	r4,r4,-1
   2d908:	2941ffcc 	andi	r5,r5,2047
   2d90c:	1906703a 	and	r3,r3,r4
   2d910:	800d883a 	mov	r6,r16
   2d914:	003fe906 	br	2d8bc <__alt_data_end+0xf402d8bc>
   2d918:	000d883a 	mov	r6,zero
   2d91c:	000b883a 	mov	r5,zero
   2d920:	0007883a 	mov	r3,zero
   2d924:	0005883a 	mov	r2,zero
   2d928:	003fe406 	br	2d8bc <__alt_data_end+0xf402d8bc>
   2d92c:	0123c83a 	sub	r17,zero,r4
   2d930:	003fd106 	br	2d878 <__alt_data_end+0xf402d878>

0002d934 <__floatunsidf>:
   2d934:	defffe04 	addi	sp,sp,-8
   2d938:	dc000015 	stw	r16,0(sp)
   2d93c:	dfc00115 	stw	ra,4(sp)
   2d940:	2021883a 	mov	r16,r4
   2d944:	20002226 	beq	r4,zero,2d9d0 <__floatunsidf+0x9c>
   2d948:	00210bc0 	call	210bc <__clzsi2>
   2d94c:	01010784 	movi	r4,1054
   2d950:	2089c83a 	sub	r4,r4,r2
   2d954:	01810cc4 	movi	r6,1075
   2d958:	310dc83a 	sub	r6,r6,r4
   2d95c:	00c007c4 	movi	r3,31
   2d960:	1980120e 	bge	r3,r6,2d9ac <__floatunsidf+0x78>
   2d964:	00c104c4 	movi	r3,1043
   2d968:	1907c83a 	sub	r3,r3,r4
   2d96c:	80ca983a 	sll	r5,r16,r3
   2d970:	00800434 	movhi	r2,16
   2d974:	10bfffc4 	addi	r2,r2,-1
   2d978:	2101ffcc 	andi	r4,r4,2047
   2d97c:	0021883a 	mov	r16,zero
   2d980:	288a703a 	and	r5,r5,r2
   2d984:	2008953a 	slli	r4,r4,20
   2d988:	00c00434 	movhi	r3,16
   2d98c:	18ffffc4 	addi	r3,r3,-1
   2d990:	28c6703a 	and	r3,r5,r3
   2d994:	8005883a 	mov	r2,r16
   2d998:	1906b03a 	or	r3,r3,r4
   2d99c:	dfc00117 	ldw	ra,4(sp)
   2d9a0:	dc000017 	ldw	r16,0(sp)
   2d9a4:	dec00204 	addi	sp,sp,8
   2d9a8:	f800283a 	ret
   2d9ac:	00c002c4 	movi	r3,11
   2d9b0:	188bc83a 	sub	r5,r3,r2
   2d9b4:	814ad83a 	srl	r5,r16,r5
   2d9b8:	00c00434 	movhi	r3,16
   2d9bc:	18ffffc4 	addi	r3,r3,-1
   2d9c0:	81a0983a 	sll	r16,r16,r6
   2d9c4:	2101ffcc 	andi	r4,r4,2047
   2d9c8:	28ca703a 	and	r5,r5,r3
   2d9cc:	003fed06 	br	2d984 <__alt_data_end+0xf402d984>
   2d9d0:	0009883a 	mov	r4,zero
   2d9d4:	000b883a 	mov	r5,zero
   2d9d8:	003fea06 	br	2d984 <__alt_data_end+0xf402d984>

0002d9dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d9dc:	defffe04 	addi	sp,sp,-8
   2d9e0:	dfc00115 	stw	ra,4(sp)
   2d9e4:	df000015 	stw	fp,0(sp)
   2d9e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d9ec:	d0a00b17 	ldw	r2,-32724(gp)
   2d9f0:	10000326 	beq	r2,zero,2da00 <alt_get_errno+0x24>
   2d9f4:	d0a00b17 	ldw	r2,-32724(gp)
   2d9f8:	103ee83a 	callr	r2
   2d9fc:	00000106 	br	2da04 <alt_get_errno+0x28>
   2da00:	d0a73504 	addi	r2,gp,-25388
}
   2da04:	e037883a 	mov	sp,fp
   2da08:	dfc00117 	ldw	ra,4(sp)
   2da0c:	df000017 	ldw	fp,0(sp)
   2da10:	dec00204 	addi	sp,sp,8
   2da14:	f800283a 	ret

0002da18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2da18:	defffb04 	addi	sp,sp,-20
   2da1c:	dfc00415 	stw	ra,16(sp)
   2da20:	df000315 	stw	fp,12(sp)
   2da24:	df000304 	addi	fp,sp,12
   2da28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2da2c:	e0bfff17 	ldw	r2,-4(fp)
   2da30:	10000616 	blt	r2,zero,2da4c <close+0x34>
   2da34:	e0bfff17 	ldw	r2,-4(fp)
   2da38:	10c00324 	muli	r3,r2,12
   2da3c:	008000f4 	movhi	r2,3
   2da40:	10893904 	addi	r2,r2,9444
   2da44:	1885883a 	add	r2,r3,r2
   2da48:	00000106 	br	2da50 <close+0x38>
   2da4c:	0005883a 	mov	r2,zero
   2da50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2da54:	e0bffd17 	ldw	r2,-12(fp)
   2da58:	10001926 	beq	r2,zero,2dac0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2da5c:	e0bffd17 	ldw	r2,-12(fp)
   2da60:	10800017 	ldw	r2,0(r2)
   2da64:	10800417 	ldw	r2,16(r2)
   2da68:	10000626 	beq	r2,zero,2da84 <close+0x6c>
   2da6c:	e0bffd17 	ldw	r2,-12(fp)
   2da70:	10800017 	ldw	r2,0(r2)
   2da74:	10800417 	ldw	r2,16(r2)
   2da78:	e13ffd17 	ldw	r4,-12(fp)
   2da7c:	103ee83a 	callr	r2
   2da80:	00000106 	br	2da88 <close+0x70>
   2da84:	0005883a 	mov	r2,zero
   2da88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2da8c:	e13fff17 	ldw	r4,-4(fp)
   2da90:	002e0d80 	call	2e0d8 <alt_release_fd>
    if (rval < 0)
   2da94:	e0bffe17 	ldw	r2,-8(fp)
   2da98:	1000070e 	bge	r2,zero,2dab8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2da9c:	002d9dc0 	call	2d9dc <alt_get_errno>
   2daa0:	1007883a 	mov	r3,r2
   2daa4:	e0bffe17 	ldw	r2,-8(fp)
   2daa8:	0085c83a 	sub	r2,zero,r2
   2daac:	18800015 	stw	r2,0(r3)
      return -1;
   2dab0:	00bfffc4 	movi	r2,-1
   2dab4:	00000706 	br	2dad4 <close+0xbc>
    }
    return 0;
   2dab8:	0005883a 	mov	r2,zero
   2dabc:	00000506 	br	2dad4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2dac0:	002d9dc0 	call	2d9dc <alt_get_errno>
   2dac4:	1007883a 	mov	r3,r2
   2dac8:	00801444 	movi	r2,81
   2dacc:	18800015 	stw	r2,0(r3)
    return -1;
   2dad0:	00bfffc4 	movi	r2,-1
  }
}
   2dad4:	e037883a 	mov	sp,fp
   2dad8:	dfc00117 	ldw	ra,4(sp)
   2dadc:	df000017 	ldw	fp,0(sp)
   2dae0:	dec00204 	addi	sp,sp,8
   2dae4:	f800283a 	ret

0002dae8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2dae8:	defffc04 	addi	sp,sp,-16
   2daec:	df000315 	stw	fp,12(sp)
   2daf0:	df000304 	addi	fp,sp,12
   2daf4:	e13ffd15 	stw	r4,-12(fp)
   2daf8:	e17ffe15 	stw	r5,-8(fp)
   2dafc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2db00:	e0bfff17 	ldw	r2,-4(fp)
}
   2db04:	e037883a 	mov	sp,fp
   2db08:	df000017 	ldw	fp,0(sp)
   2db0c:	dec00104 	addi	sp,sp,4
   2db10:	f800283a 	ret

0002db14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2db14:	defffe04 	addi	sp,sp,-8
   2db18:	dfc00115 	stw	ra,4(sp)
   2db1c:	df000015 	stw	fp,0(sp)
   2db20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2db24:	d0a00b17 	ldw	r2,-32724(gp)
   2db28:	10000326 	beq	r2,zero,2db38 <alt_get_errno+0x24>
   2db2c:	d0a00b17 	ldw	r2,-32724(gp)
   2db30:	103ee83a 	callr	r2
   2db34:	00000106 	br	2db3c <alt_get_errno+0x28>
   2db38:	d0a73504 	addi	r2,gp,-25388
}
   2db3c:	e037883a 	mov	sp,fp
   2db40:	dfc00117 	ldw	ra,4(sp)
   2db44:	df000017 	ldw	fp,0(sp)
   2db48:	dec00204 	addi	sp,sp,8
   2db4c:	f800283a 	ret

0002db50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2db50:	defffb04 	addi	sp,sp,-20
   2db54:	dfc00415 	stw	ra,16(sp)
   2db58:	df000315 	stw	fp,12(sp)
   2db5c:	df000304 	addi	fp,sp,12
   2db60:	e13ffe15 	stw	r4,-8(fp)
   2db64:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2db68:	e0bffe17 	ldw	r2,-8(fp)
   2db6c:	10000616 	blt	r2,zero,2db88 <fstat+0x38>
   2db70:	e0bffe17 	ldw	r2,-8(fp)
   2db74:	10c00324 	muli	r3,r2,12
   2db78:	008000f4 	movhi	r2,3
   2db7c:	10893904 	addi	r2,r2,9444
   2db80:	1885883a 	add	r2,r3,r2
   2db84:	00000106 	br	2db8c <fstat+0x3c>
   2db88:	0005883a 	mov	r2,zero
   2db8c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2db90:	e0bffd17 	ldw	r2,-12(fp)
   2db94:	10001026 	beq	r2,zero,2dbd8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2db98:	e0bffd17 	ldw	r2,-12(fp)
   2db9c:	10800017 	ldw	r2,0(r2)
   2dba0:	10800817 	ldw	r2,32(r2)
   2dba4:	10000726 	beq	r2,zero,2dbc4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2dba8:	e0bffd17 	ldw	r2,-12(fp)
   2dbac:	10800017 	ldw	r2,0(r2)
   2dbb0:	10800817 	ldw	r2,32(r2)
   2dbb4:	e17fff17 	ldw	r5,-4(fp)
   2dbb8:	e13ffd17 	ldw	r4,-12(fp)
   2dbbc:	103ee83a 	callr	r2
   2dbc0:	00000a06 	br	2dbec <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2dbc4:	e0bfff17 	ldw	r2,-4(fp)
   2dbc8:	00c80004 	movi	r3,8192
   2dbcc:	10c00115 	stw	r3,4(r2)
      return 0;
   2dbd0:	0005883a 	mov	r2,zero
   2dbd4:	00000506 	br	2dbec <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2dbd8:	002db140 	call	2db14 <alt_get_errno>
   2dbdc:	1007883a 	mov	r3,r2
   2dbe0:	00801444 	movi	r2,81
   2dbe4:	18800015 	stw	r2,0(r3)
    return -1;
   2dbe8:	00bfffc4 	movi	r2,-1
  }
}
   2dbec:	e037883a 	mov	sp,fp
   2dbf0:	dfc00117 	ldw	ra,4(sp)
   2dbf4:	df000017 	ldw	fp,0(sp)
   2dbf8:	dec00204 	addi	sp,sp,8
   2dbfc:	f800283a 	ret

0002dc00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dc00:	defffe04 	addi	sp,sp,-8
   2dc04:	dfc00115 	stw	ra,4(sp)
   2dc08:	df000015 	stw	fp,0(sp)
   2dc0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dc10:	d0a00b17 	ldw	r2,-32724(gp)
   2dc14:	10000326 	beq	r2,zero,2dc24 <alt_get_errno+0x24>
   2dc18:	d0a00b17 	ldw	r2,-32724(gp)
   2dc1c:	103ee83a 	callr	r2
   2dc20:	00000106 	br	2dc28 <alt_get_errno+0x28>
   2dc24:	d0a73504 	addi	r2,gp,-25388
}
   2dc28:	e037883a 	mov	sp,fp
   2dc2c:	dfc00117 	ldw	ra,4(sp)
   2dc30:	df000017 	ldw	fp,0(sp)
   2dc34:	dec00204 	addi	sp,sp,8
   2dc38:	f800283a 	ret

0002dc3c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2dc3c:	deffed04 	addi	sp,sp,-76
   2dc40:	dfc01215 	stw	ra,72(sp)
   2dc44:	df001115 	stw	fp,68(sp)
   2dc48:	df001104 	addi	fp,sp,68
   2dc4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dc50:	e0bfff17 	ldw	r2,-4(fp)
   2dc54:	10000616 	blt	r2,zero,2dc70 <isatty+0x34>
   2dc58:	e0bfff17 	ldw	r2,-4(fp)
   2dc5c:	10c00324 	muli	r3,r2,12
   2dc60:	008000f4 	movhi	r2,3
   2dc64:	10893904 	addi	r2,r2,9444
   2dc68:	1885883a 	add	r2,r3,r2
   2dc6c:	00000106 	br	2dc74 <isatty+0x38>
   2dc70:	0005883a 	mov	r2,zero
   2dc74:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2dc78:	e0bfef17 	ldw	r2,-68(fp)
   2dc7c:	10000e26 	beq	r2,zero,2dcb8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2dc80:	e0bfef17 	ldw	r2,-68(fp)
   2dc84:	10800017 	ldw	r2,0(r2)
   2dc88:	10800817 	ldw	r2,32(r2)
   2dc8c:	1000021e 	bne	r2,zero,2dc98 <isatty+0x5c>
    {
      return 1;
   2dc90:	00800044 	movi	r2,1
   2dc94:	00000d06 	br	2dccc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2dc98:	e0bff004 	addi	r2,fp,-64
   2dc9c:	100b883a 	mov	r5,r2
   2dca0:	e13fff17 	ldw	r4,-4(fp)
   2dca4:	002db500 	call	2db50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2dca8:	e0bff117 	ldw	r2,-60(fp)
   2dcac:	10880020 	cmpeqi	r2,r2,8192
   2dcb0:	10803fcc 	andi	r2,r2,255
   2dcb4:	00000506 	br	2dccc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2dcb8:	002dc000 	call	2dc00 <alt_get_errno>
   2dcbc:	1007883a 	mov	r3,r2
   2dcc0:	00801444 	movi	r2,81
   2dcc4:	18800015 	stw	r2,0(r3)
    return 0;
   2dcc8:	0005883a 	mov	r2,zero
  }
}
   2dccc:	e037883a 	mov	sp,fp
   2dcd0:	dfc00117 	ldw	ra,4(sp)
   2dcd4:	df000017 	ldw	fp,0(sp)
   2dcd8:	dec00204 	addi	sp,sp,8
   2dcdc:	f800283a 	ret

0002dce0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2dce0:	defffc04 	addi	sp,sp,-16
   2dce4:	df000315 	stw	fp,12(sp)
   2dce8:	df000304 	addi	fp,sp,12
   2dcec:	e13ffd15 	stw	r4,-12(fp)
   2dcf0:	e17ffe15 	stw	r5,-8(fp)
   2dcf4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2dcf8:	e0fffe17 	ldw	r3,-8(fp)
   2dcfc:	e0bffd17 	ldw	r2,-12(fp)
   2dd00:	18800c26 	beq	r3,r2,2dd34 <alt_load_section+0x54>
  {
    while( to != end )
   2dd04:	00000806 	br	2dd28 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2dd08:	e0bffe17 	ldw	r2,-8(fp)
   2dd0c:	10c00104 	addi	r3,r2,4
   2dd10:	e0fffe15 	stw	r3,-8(fp)
   2dd14:	e0fffd17 	ldw	r3,-12(fp)
   2dd18:	19000104 	addi	r4,r3,4
   2dd1c:	e13ffd15 	stw	r4,-12(fp)
   2dd20:	18c00017 	ldw	r3,0(r3)
   2dd24:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2dd28:	e0fffe17 	ldw	r3,-8(fp)
   2dd2c:	e0bfff17 	ldw	r2,-4(fp)
   2dd30:	18bff51e 	bne	r3,r2,2dd08 <__alt_data_end+0xf402dd08>
    {
      *to++ = *from++;
    }
  }
}
   2dd34:	0001883a 	nop
   2dd38:	e037883a 	mov	sp,fp
   2dd3c:	df000017 	ldw	fp,0(sp)
   2dd40:	dec00104 	addi	sp,sp,4
   2dd44:	f800283a 	ret

0002dd48 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2dd48:	defffe04 	addi	sp,sp,-8
   2dd4c:	dfc00115 	stw	ra,4(sp)
   2dd50:	df000015 	stw	fp,0(sp)
   2dd54:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2dd58:	018000f4 	movhi	r6,3
   2dd5c:	318e1e04 	addi	r6,r6,14456
   2dd60:	014000f4 	movhi	r5,3
   2dd64:	29470604 	addi	r5,r5,7192
   2dd68:	010000f4 	movhi	r4,3
   2dd6c:	210e1e04 	addi	r4,r4,14456
   2dd70:	002dce00 	call	2dce0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2dd74:	018000b4 	movhi	r6,2
   2dd78:	31809104 	addi	r6,r6,580
   2dd7c:	014000b4 	movhi	r5,2
   2dd80:	29400804 	addi	r5,r5,32
   2dd84:	010000b4 	movhi	r4,2
   2dd88:	21000804 	addi	r4,r4,32
   2dd8c:	002dce00 	call	2dce0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2dd90:	018000f4 	movhi	r6,3
   2dd94:	31870604 	addi	r6,r6,7192
   2dd98:	014000f4 	movhi	r5,3
   2dd9c:	29459f04 	addi	r5,r5,5756
   2dda0:	010000f4 	movhi	r4,3
   2dda4:	21059f04 	addi	r4,r4,5756
   2dda8:	002dce00 	call	2dce0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2ddac:	00305680 	call	30568 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2ddb0:	00307e00 	call	307e0 <alt_icache_flush_all>
}
   2ddb4:	0001883a 	nop
   2ddb8:	e037883a 	mov	sp,fp
   2ddbc:	dfc00117 	ldw	ra,4(sp)
   2ddc0:	df000017 	ldw	fp,0(sp)
   2ddc4:	dec00204 	addi	sp,sp,8
   2ddc8:	f800283a 	ret

0002ddcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ddcc:	defffe04 	addi	sp,sp,-8
   2ddd0:	dfc00115 	stw	ra,4(sp)
   2ddd4:	df000015 	stw	fp,0(sp)
   2ddd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dddc:	d0a00b17 	ldw	r2,-32724(gp)
   2dde0:	10000326 	beq	r2,zero,2ddf0 <alt_get_errno+0x24>
   2dde4:	d0a00b17 	ldw	r2,-32724(gp)
   2dde8:	103ee83a 	callr	r2
   2ddec:	00000106 	br	2ddf4 <alt_get_errno+0x28>
   2ddf0:	d0a73504 	addi	r2,gp,-25388
}
   2ddf4:	e037883a 	mov	sp,fp
   2ddf8:	dfc00117 	ldw	ra,4(sp)
   2ddfc:	df000017 	ldw	fp,0(sp)
   2de00:	dec00204 	addi	sp,sp,8
   2de04:	f800283a 	ret

0002de08 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2de08:	defff904 	addi	sp,sp,-28
   2de0c:	dfc00615 	stw	ra,24(sp)
   2de10:	df000515 	stw	fp,20(sp)
   2de14:	df000504 	addi	fp,sp,20
   2de18:	e13ffd15 	stw	r4,-12(fp)
   2de1c:	e17ffe15 	stw	r5,-8(fp)
   2de20:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2de24:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2de28:	e0bffd17 	ldw	r2,-12(fp)
   2de2c:	10000616 	blt	r2,zero,2de48 <lseek+0x40>
   2de30:	e0bffd17 	ldw	r2,-12(fp)
   2de34:	10c00324 	muli	r3,r2,12
   2de38:	008000f4 	movhi	r2,3
   2de3c:	10893904 	addi	r2,r2,9444
   2de40:	1885883a 	add	r2,r3,r2
   2de44:	00000106 	br	2de4c <lseek+0x44>
   2de48:	0005883a 	mov	r2,zero
   2de4c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2de50:	e0bffc17 	ldw	r2,-16(fp)
   2de54:	10001026 	beq	r2,zero,2de98 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2de58:	e0bffc17 	ldw	r2,-16(fp)
   2de5c:	10800017 	ldw	r2,0(r2)
   2de60:	10800717 	ldw	r2,28(r2)
   2de64:	10000926 	beq	r2,zero,2de8c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2de68:	e0bffc17 	ldw	r2,-16(fp)
   2de6c:	10800017 	ldw	r2,0(r2)
   2de70:	10800717 	ldw	r2,28(r2)
   2de74:	e1bfff17 	ldw	r6,-4(fp)
   2de78:	e17ffe17 	ldw	r5,-8(fp)
   2de7c:	e13ffc17 	ldw	r4,-16(fp)
   2de80:	103ee83a 	callr	r2
   2de84:	e0bffb15 	stw	r2,-20(fp)
   2de88:	00000506 	br	2dea0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2de8c:	00bfde84 	movi	r2,-134
   2de90:	e0bffb15 	stw	r2,-20(fp)
   2de94:	00000206 	br	2dea0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2de98:	00bfebc4 	movi	r2,-81
   2de9c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2dea0:	e0bffb17 	ldw	r2,-20(fp)
   2dea4:	1000070e 	bge	r2,zero,2dec4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2dea8:	002ddcc0 	call	2ddcc <alt_get_errno>
   2deac:	1007883a 	mov	r3,r2
   2deb0:	e0bffb17 	ldw	r2,-20(fp)
   2deb4:	0085c83a 	sub	r2,zero,r2
   2deb8:	18800015 	stw	r2,0(r3)
    rc = -1;
   2debc:	00bfffc4 	movi	r2,-1
   2dec0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2dec4:	e0bffb17 	ldw	r2,-20(fp)
}
   2dec8:	e037883a 	mov	sp,fp
   2decc:	dfc00117 	ldw	ra,4(sp)
   2ded0:	df000017 	ldw	fp,0(sp)
   2ded4:	dec00204 	addi	sp,sp,8
   2ded8:	f800283a 	ret

0002dedc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2dedc:	defffd04 	addi	sp,sp,-12
   2dee0:	dfc00215 	stw	ra,8(sp)
   2dee4:	df000115 	stw	fp,4(sp)
   2dee8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2deec:	0009883a 	mov	r4,zero
   2def0:	002e3f80 	call	2e3f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2def4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2def8:	002e4300 	call	2e430 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2defc:	018000f4 	movhi	r6,3
   2df00:	3186e604 	addi	r6,r6,7064
   2df04:	014000f4 	movhi	r5,3
   2df08:	2946e604 	addi	r5,r5,7064
   2df0c:	010000f4 	movhi	r4,3
   2df10:	2106e604 	addi	r4,r4,7064
   2df14:	0030b780 	call	30b78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2df18:	00306900 	call	30690 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2df1c:	010000f4 	movhi	r4,3
   2df20:	2101bc04 	addi	r4,r4,1776
   2df24:	00312e80 	call	312e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2df28:	d0a73617 	ldw	r2,-25384(gp)
   2df2c:	d0e73717 	ldw	r3,-25380(gp)
   2df30:	d1273817 	ldw	r4,-25376(gp)
   2df34:	200d883a 	mov	r6,r4
   2df38:	180b883a 	mov	r5,r3
   2df3c:	1009883a 	mov	r4,r2
   2df40:	00202900 	call	20290 <main>
   2df44:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2df48:	01000044 	movi	r4,1
   2df4c:	002da180 	call	2da18 <close>
  exit (result);
   2df50:	e13fff17 	ldw	r4,-4(fp)
   2df54:	00312fc0 	call	312fc <exit>

0002df58 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2df58:	defffe04 	addi	sp,sp,-8
   2df5c:	df000115 	stw	fp,4(sp)
   2df60:	df000104 	addi	fp,sp,4
   2df64:	e13fff15 	stw	r4,-4(fp)
}
   2df68:	0001883a 	nop
   2df6c:	e037883a 	mov	sp,fp
   2df70:	df000017 	ldw	fp,0(sp)
   2df74:	dec00104 	addi	sp,sp,4
   2df78:	f800283a 	ret

0002df7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2df7c:	defffe04 	addi	sp,sp,-8
   2df80:	df000115 	stw	fp,4(sp)
   2df84:	df000104 	addi	fp,sp,4
   2df88:	e13fff15 	stw	r4,-4(fp)
}
   2df8c:	0001883a 	nop
   2df90:	e037883a 	mov	sp,fp
   2df94:	df000017 	ldw	fp,0(sp)
   2df98:	dec00104 	addi	sp,sp,4
   2df9c:	f800283a 	ret

0002dfa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dfa0:	defffe04 	addi	sp,sp,-8
   2dfa4:	dfc00115 	stw	ra,4(sp)
   2dfa8:	df000015 	stw	fp,0(sp)
   2dfac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dfb0:	d0a00b17 	ldw	r2,-32724(gp)
   2dfb4:	10000326 	beq	r2,zero,2dfc4 <alt_get_errno+0x24>
   2dfb8:	d0a00b17 	ldw	r2,-32724(gp)
   2dfbc:	103ee83a 	callr	r2
   2dfc0:	00000106 	br	2dfc8 <alt_get_errno+0x28>
   2dfc4:	d0a73504 	addi	r2,gp,-25388
}
   2dfc8:	e037883a 	mov	sp,fp
   2dfcc:	dfc00117 	ldw	ra,4(sp)
   2dfd0:	df000017 	ldw	fp,0(sp)
   2dfd4:	dec00204 	addi	sp,sp,8
   2dfd8:	f800283a 	ret

0002dfdc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2dfdc:	defff904 	addi	sp,sp,-28
   2dfe0:	dfc00615 	stw	ra,24(sp)
   2dfe4:	df000515 	stw	fp,20(sp)
   2dfe8:	df000504 	addi	fp,sp,20
   2dfec:	e13ffd15 	stw	r4,-12(fp)
   2dff0:	e17ffe15 	stw	r5,-8(fp)
   2dff4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dff8:	e0bffd17 	ldw	r2,-12(fp)
   2dffc:	10000616 	blt	r2,zero,2e018 <read+0x3c>
   2e000:	e0bffd17 	ldw	r2,-12(fp)
   2e004:	10c00324 	muli	r3,r2,12
   2e008:	008000f4 	movhi	r2,3
   2e00c:	10893904 	addi	r2,r2,9444
   2e010:	1885883a 	add	r2,r3,r2
   2e014:	00000106 	br	2e01c <read+0x40>
   2e018:	0005883a 	mov	r2,zero
   2e01c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e020:	e0bffb17 	ldw	r2,-20(fp)
   2e024:	10002226 	beq	r2,zero,2e0b0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2e028:	e0bffb17 	ldw	r2,-20(fp)
   2e02c:	10800217 	ldw	r2,8(r2)
   2e030:	108000cc 	andi	r2,r2,3
   2e034:	10800060 	cmpeqi	r2,r2,1
   2e038:	1000181e 	bne	r2,zero,2e09c <read+0xc0>
        (fd->dev->read))
   2e03c:	e0bffb17 	ldw	r2,-20(fp)
   2e040:	10800017 	ldw	r2,0(r2)
   2e044:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2e048:	10001426 	beq	r2,zero,2e09c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2e04c:	e0bffb17 	ldw	r2,-20(fp)
   2e050:	10800017 	ldw	r2,0(r2)
   2e054:	10800517 	ldw	r2,20(r2)
   2e058:	e0ffff17 	ldw	r3,-4(fp)
   2e05c:	180d883a 	mov	r6,r3
   2e060:	e17ffe17 	ldw	r5,-8(fp)
   2e064:	e13ffb17 	ldw	r4,-20(fp)
   2e068:	103ee83a 	callr	r2
   2e06c:	e0bffc15 	stw	r2,-16(fp)
   2e070:	e0bffc17 	ldw	r2,-16(fp)
   2e074:	1000070e 	bge	r2,zero,2e094 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2e078:	002dfa00 	call	2dfa0 <alt_get_errno>
   2e07c:	1007883a 	mov	r3,r2
   2e080:	e0bffc17 	ldw	r2,-16(fp)
   2e084:	0085c83a 	sub	r2,zero,r2
   2e088:	18800015 	stw	r2,0(r3)
          return -1;
   2e08c:	00bfffc4 	movi	r2,-1
   2e090:	00000c06 	br	2e0c4 <read+0xe8>
        }
        return rval;
   2e094:	e0bffc17 	ldw	r2,-16(fp)
   2e098:	00000a06 	br	2e0c4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2e09c:	002dfa00 	call	2dfa0 <alt_get_errno>
   2e0a0:	1007883a 	mov	r3,r2
   2e0a4:	00800344 	movi	r2,13
   2e0a8:	18800015 	stw	r2,0(r3)
   2e0ac:	00000406 	br	2e0c0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2e0b0:	002dfa00 	call	2dfa0 <alt_get_errno>
   2e0b4:	1007883a 	mov	r3,r2
   2e0b8:	00801444 	movi	r2,81
   2e0bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e0c0:	00bfffc4 	movi	r2,-1
}
   2e0c4:	e037883a 	mov	sp,fp
   2e0c8:	dfc00117 	ldw	ra,4(sp)
   2e0cc:	df000017 	ldw	fp,0(sp)
   2e0d0:	dec00204 	addi	sp,sp,8
   2e0d4:	f800283a 	ret

0002e0d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2e0d8:	defffe04 	addi	sp,sp,-8
   2e0dc:	df000115 	stw	fp,4(sp)
   2e0e0:	df000104 	addi	fp,sp,4
   2e0e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2e0e8:	e0bfff17 	ldw	r2,-4(fp)
   2e0ec:	108000d0 	cmplti	r2,r2,3
   2e0f0:	10000d1e 	bne	r2,zero,2e128 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2e0f4:	008000f4 	movhi	r2,3
   2e0f8:	10893904 	addi	r2,r2,9444
   2e0fc:	e0ffff17 	ldw	r3,-4(fp)
   2e100:	18c00324 	muli	r3,r3,12
   2e104:	10c5883a 	add	r2,r2,r3
   2e108:	10800204 	addi	r2,r2,8
   2e10c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2e110:	008000f4 	movhi	r2,3
   2e114:	10893904 	addi	r2,r2,9444
   2e118:	e0ffff17 	ldw	r3,-4(fp)
   2e11c:	18c00324 	muli	r3,r3,12
   2e120:	10c5883a 	add	r2,r2,r3
   2e124:	10000015 	stw	zero,0(r2)
  }
}
   2e128:	0001883a 	nop
   2e12c:	e037883a 	mov	sp,fp
   2e130:	df000017 	ldw	fp,0(sp)
   2e134:	dec00104 	addi	sp,sp,4
   2e138:	f800283a 	ret

0002e13c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2e13c:	defff904 	addi	sp,sp,-28
   2e140:	df000615 	stw	fp,24(sp)
   2e144:	df000604 	addi	fp,sp,24
   2e148:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e14c:	0005303a 	rdctl	r2,status
   2e150:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e154:	e0fffe17 	ldw	r3,-8(fp)
   2e158:	00bfff84 	movi	r2,-2
   2e15c:	1884703a 	and	r2,r3,r2
   2e160:	1001703a 	wrctl	status,r2
  
  return context;
   2e164:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2e168:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2e16c:	d0a00c17 	ldw	r2,-32720(gp)
   2e170:	10c000c4 	addi	r3,r2,3
   2e174:	00bfff04 	movi	r2,-4
   2e178:	1884703a 	and	r2,r3,r2
   2e17c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2e180:	d0e00c17 	ldw	r3,-32720(gp)
   2e184:	e0bfff17 	ldw	r2,-4(fp)
   2e188:	1887883a 	add	r3,r3,r2
   2e18c:	00830034 	movhi	r2,3072
   2e190:	10800004 	addi	r2,r2,0
   2e194:	10c0062e 	bgeu	r2,r3,2e1b0 <sbrk+0x74>
   2e198:	e0bffb17 	ldw	r2,-20(fp)
   2e19c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e1a0:	e0bffa17 	ldw	r2,-24(fp)
   2e1a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2e1a8:	00bfffc4 	movi	r2,-1
   2e1ac:	00000b06 	br	2e1dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2e1b0:	d0a00c17 	ldw	r2,-32720(gp)
   2e1b4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2e1b8:	d0e00c17 	ldw	r3,-32720(gp)
   2e1bc:	e0bfff17 	ldw	r2,-4(fp)
   2e1c0:	1885883a 	add	r2,r3,r2
   2e1c4:	d0a00c15 	stw	r2,-32720(gp)
   2e1c8:	e0bffb17 	ldw	r2,-20(fp)
   2e1cc:	e0bffc15 	stw	r2,-16(fp)
   2e1d0:	e0bffc17 	ldw	r2,-16(fp)
   2e1d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2e1d8:	e0bffd17 	ldw	r2,-12(fp)
} 
   2e1dc:	e037883a 	mov	sp,fp
   2e1e0:	df000017 	ldw	fp,0(sp)
   2e1e4:	dec00104 	addi	sp,sp,4
   2e1e8:	f800283a 	ret

0002e1ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e1ec:	defffe04 	addi	sp,sp,-8
   2e1f0:	dfc00115 	stw	ra,4(sp)
   2e1f4:	df000015 	stw	fp,0(sp)
   2e1f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e1fc:	d0a00b17 	ldw	r2,-32724(gp)
   2e200:	10000326 	beq	r2,zero,2e210 <alt_get_errno+0x24>
   2e204:	d0a00b17 	ldw	r2,-32724(gp)
   2e208:	103ee83a 	callr	r2
   2e20c:	00000106 	br	2e214 <alt_get_errno+0x28>
   2e210:	d0a73504 	addi	r2,gp,-25388
}
   2e214:	e037883a 	mov	sp,fp
   2e218:	dfc00117 	ldw	ra,4(sp)
   2e21c:	df000017 	ldw	fp,0(sp)
   2e220:	dec00204 	addi	sp,sp,8
   2e224:	f800283a 	ret

0002e228 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2e228:	defff904 	addi	sp,sp,-28
   2e22c:	dfc00615 	stw	ra,24(sp)
   2e230:	df000515 	stw	fp,20(sp)
   2e234:	df000504 	addi	fp,sp,20
   2e238:	e13ffd15 	stw	r4,-12(fp)
   2e23c:	e17ffe15 	stw	r5,-8(fp)
   2e240:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e244:	e0bffd17 	ldw	r2,-12(fp)
   2e248:	10000616 	blt	r2,zero,2e264 <write+0x3c>
   2e24c:	e0bffd17 	ldw	r2,-12(fp)
   2e250:	10c00324 	muli	r3,r2,12
   2e254:	008000f4 	movhi	r2,3
   2e258:	10893904 	addi	r2,r2,9444
   2e25c:	1885883a 	add	r2,r3,r2
   2e260:	00000106 	br	2e268 <write+0x40>
   2e264:	0005883a 	mov	r2,zero
   2e268:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e26c:	e0bffb17 	ldw	r2,-20(fp)
   2e270:	10002126 	beq	r2,zero,2e2f8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2e274:	e0bffb17 	ldw	r2,-20(fp)
   2e278:	10800217 	ldw	r2,8(r2)
   2e27c:	108000cc 	andi	r2,r2,3
   2e280:	10001826 	beq	r2,zero,2e2e4 <write+0xbc>
   2e284:	e0bffb17 	ldw	r2,-20(fp)
   2e288:	10800017 	ldw	r2,0(r2)
   2e28c:	10800617 	ldw	r2,24(r2)
   2e290:	10001426 	beq	r2,zero,2e2e4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2e294:	e0bffb17 	ldw	r2,-20(fp)
   2e298:	10800017 	ldw	r2,0(r2)
   2e29c:	10800617 	ldw	r2,24(r2)
   2e2a0:	e0ffff17 	ldw	r3,-4(fp)
   2e2a4:	180d883a 	mov	r6,r3
   2e2a8:	e17ffe17 	ldw	r5,-8(fp)
   2e2ac:	e13ffb17 	ldw	r4,-20(fp)
   2e2b0:	103ee83a 	callr	r2
   2e2b4:	e0bffc15 	stw	r2,-16(fp)
   2e2b8:	e0bffc17 	ldw	r2,-16(fp)
   2e2bc:	1000070e 	bge	r2,zero,2e2dc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2e2c0:	002e1ec0 	call	2e1ec <alt_get_errno>
   2e2c4:	1007883a 	mov	r3,r2
   2e2c8:	e0bffc17 	ldw	r2,-16(fp)
   2e2cc:	0085c83a 	sub	r2,zero,r2
   2e2d0:	18800015 	stw	r2,0(r3)
        return -1;
   2e2d4:	00bfffc4 	movi	r2,-1
   2e2d8:	00000c06 	br	2e30c <write+0xe4>
      }
      return rval;
   2e2dc:	e0bffc17 	ldw	r2,-16(fp)
   2e2e0:	00000a06 	br	2e30c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e2e4:	002e1ec0 	call	2e1ec <alt_get_errno>
   2e2e8:	1007883a 	mov	r3,r2
   2e2ec:	00800344 	movi	r2,13
   2e2f0:	18800015 	stw	r2,0(r3)
   2e2f4:	00000406 	br	2e308 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e2f8:	002e1ec0 	call	2e1ec <alt_get_errno>
   2e2fc:	1007883a 	mov	r3,r2
   2e300:	00801444 	movi	r2,81
   2e304:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e308:	00bfffc4 	movi	r2,-1
}
   2e30c:	e037883a 	mov	sp,fp
   2e310:	dfc00117 	ldw	ra,4(sp)
   2e314:	df000017 	ldw	fp,0(sp)
   2e318:	dec00204 	addi	sp,sp,8
   2e31c:	f800283a 	ret

0002e320 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e320:	defffd04 	addi	sp,sp,-12
   2e324:	dfc00215 	stw	ra,8(sp)
   2e328:	df000115 	stw	fp,4(sp)
   2e32c:	df000104 	addi	fp,sp,4
   2e330:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e334:	d1600804 	addi	r5,gp,-32736
   2e338:	e13fff17 	ldw	r4,-4(fp)
   2e33c:	00305ec0 	call	305ec <alt_dev_llist_insert>
}
   2e340:	e037883a 	mov	sp,fp
   2e344:	dfc00117 	ldw	ra,4(sp)
   2e348:	df000017 	ldw	fp,0(sp)
   2e34c:	dec00204 	addi	sp,sp,8
   2e350:	f800283a 	ret

0002e354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e354:	defffe04 	addi	sp,sp,-8
   2e358:	dfc00115 	stw	ra,4(sp)
   2e35c:	df000015 	stw	fp,0(sp)
   2e360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e364:	d0a00b17 	ldw	r2,-32724(gp)
   2e368:	10000326 	beq	r2,zero,2e378 <alt_get_errno+0x24>
   2e36c:	d0a00b17 	ldw	r2,-32724(gp)
   2e370:	103ee83a 	callr	r2
   2e374:	00000106 	br	2e37c <alt_get_errno+0x28>
   2e378:	d0a73504 	addi	r2,gp,-25388
}
   2e37c:	e037883a 	mov	sp,fp
   2e380:	dfc00117 	ldw	ra,4(sp)
   2e384:	df000017 	ldw	fp,0(sp)
   2e388:	dec00204 	addi	sp,sp,8
   2e38c:	f800283a 	ret

0002e390 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
   2e390:	defffc04 	addi	sp,sp,-16
   2e394:	dfc00315 	stw	ra,12(sp)
   2e398:	df000215 	stw	fp,8(sp)
   2e39c:	df000204 	addi	fp,sp,8
   2e3a0:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2e3a4:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
   2e3a8:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
   2e3ac:	e0bffe17 	ldw	r2,-8(fp)
   2e3b0:	1000051e 	bne	r2,zero,2e3c8 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   2e3b4:	d1600f04 	addi	r5,gp,-32708
   2e3b8:	e13fff17 	ldw	r4,-4(fp)
   2e3bc:	00305ec0 	call	305ec <alt_dev_llist_insert>
   2e3c0:	e0bffe15 	stw	r2,-8(fp)
   2e3c4:	00000606 	br	2e3e0 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
   2e3c8:	002e3540 	call	2e354 <alt_get_errno>
   2e3cc:	1007883a 	mov	r3,r2
   2e3d0:	00800304 	movi	r2,12
   2e3d4:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
   2e3d8:	00bffd04 	movi	r2,-12
   2e3dc:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
   2e3e0:	e0bffe17 	ldw	r2,-8(fp)
}
   2e3e4:	e037883a 	mov	sp,fp
   2e3e8:	dfc00117 	ldw	ra,4(sp)
   2e3ec:	df000017 	ldw	fp,0(sp)
   2e3f0:	dec00204 	addi	sp,sp,8
   2e3f4:	f800283a 	ret

0002e3f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e3f8:	defffd04 	addi	sp,sp,-12
   2e3fc:	dfc00215 	stw	ra,8(sp)
   2e400:	df000115 	stw	fp,4(sp)
   2e404:	df000104 	addi	fp,sp,4
   2e408:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_FFT, nios2_FFT);
   2e40c:	0030fec0 	call	30fec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e410:	00800044 	movi	r2,1
   2e414:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e418:	0001883a 	nop
   2e41c:	e037883a 	mov	sp,fp
   2e420:	dfc00117 	ldw	ra,4(sp)
   2e424:	df000017 	ldw	fp,0(sp)
   2e428:	dec00204 	addi	sp,sp,8
   2e42c:	f800283a 	ret

0002e430 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e430:	defffe04 	addi	sp,sp,-8
   2e434:	dfc00115 	stw	ra,4(sp)
   2e438:	df000015 	stw	fp,0(sp)
   2e43c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_FFT, jtag_uart_FFT);
   2e440:	01800084 	movi	r6,2
   2e444:	000b883a 	mov	r5,zero
   2e448:	010000f4 	movhi	r4,3
   2e44c:	2109a304 	addi	r4,r4,9868
   2e450:	002e6340 	call	2e634 <altera_avalon_jtag_uart_init>
   2e454:	010000f4 	movhi	r4,3
   2e458:	21099904 	addi	r4,r4,9828
   2e45c:	002e3200 	call	2e320 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_FFT, mailbox_to_FFT);
   2e460:	000d883a 	mov	r6,zero
   2e464:	000b883a 	mov	r5,zero
   2e468:	010000f4 	movhi	r4,3
   2e46c:	210db104 	addi	r4,r4,14020
   2e470:	002f2200 	call	2f220 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_TO_SOUND_ACQUISITION, mailbox_to_Sound_Acquisition);
   2e474:	01800104 	movi	r6,4
   2e478:	000b883a 	mov	r5,zero
   2e47c:	010000f4 	movhi	r4,3
   2e480:	210dc304 	addi	r4,r4,14092
   2e484:	002f2200 	call	2f220 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
   2e488:	010000f4 	movhi	r4,3
   2e48c:	210dd504 	addi	r4,r4,14164
   2e490:	002e3900 	call	2e390 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   2e494:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   2e498:	01800044 	movi	r6,1
   2e49c:	000b883a 	mov	r5,zero
   2e4a0:	010000f4 	movhi	r4,3
   2e4a4:	210de304 	addi	r4,r4,14220
   2e4a8:	002fc740 	call	2fc74 <altera_avalon_uart_init>
   2e4ac:	010000f4 	movhi	r4,3
   2e4b0:	210dd904 	addi	r4,r4,14180
   2e4b4:	002e3200 	call	2e320 <alt_dev_reg>
}
   2e4b8:	0001883a 	nop
   2e4bc:	e037883a 	mov	sp,fp
   2e4c0:	dfc00117 	ldw	ra,4(sp)
   2e4c4:	df000017 	ldw	fp,0(sp)
   2e4c8:	dec00204 	addi	sp,sp,8
   2e4cc:	f800283a 	ret

0002e4d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e4d0:	defffa04 	addi	sp,sp,-24
   2e4d4:	dfc00515 	stw	ra,20(sp)
   2e4d8:	df000415 	stw	fp,16(sp)
   2e4dc:	df000404 	addi	fp,sp,16
   2e4e0:	e13ffd15 	stw	r4,-12(fp)
   2e4e4:	e17ffe15 	stw	r5,-8(fp)
   2e4e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e4ec:	e0bffd17 	ldw	r2,-12(fp)
   2e4f0:	10800017 	ldw	r2,0(r2)
   2e4f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e4f8:	e0bffc17 	ldw	r2,-16(fp)
   2e4fc:	10c00a04 	addi	r3,r2,40
   2e500:	e0bffd17 	ldw	r2,-12(fp)
   2e504:	10800217 	ldw	r2,8(r2)
   2e508:	100f883a 	mov	r7,r2
   2e50c:	e1bfff17 	ldw	r6,-4(fp)
   2e510:	e17ffe17 	ldw	r5,-8(fp)
   2e514:	1809883a 	mov	r4,r3
   2e518:	002eaf80 	call	2eaf8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e51c:	e037883a 	mov	sp,fp
   2e520:	dfc00117 	ldw	ra,4(sp)
   2e524:	df000017 	ldw	fp,0(sp)
   2e528:	dec00204 	addi	sp,sp,8
   2e52c:	f800283a 	ret

0002e530 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e530:	defffa04 	addi	sp,sp,-24
   2e534:	dfc00515 	stw	ra,20(sp)
   2e538:	df000415 	stw	fp,16(sp)
   2e53c:	df000404 	addi	fp,sp,16
   2e540:	e13ffd15 	stw	r4,-12(fp)
   2e544:	e17ffe15 	stw	r5,-8(fp)
   2e548:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e54c:	e0bffd17 	ldw	r2,-12(fp)
   2e550:	10800017 	ldw	r2,0(r2)
   2e554:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e558:	e0bffc17 	ldw	r2,-16(fp)
   2e55c:	10c00a04 	addi	r3,r2,40
   2e560:	e0bffd17 	ldw	r2,-12(fp)
   2e564:	10800217 	ldw	r2,8(r2)
   2e568:	100f883a 	mov	r7,r2
   2e56c:	e1bfff17 	ldw	r6,-4(fp)
   2e570:	e17ffe17 	ldw	r5,-8(fp)
   2e574:	1809883a 	mov	r4,r3
   2e578:	002ed140 	call	2ed14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e57c:	e037883a 	mov	sp,fp
   2e580:	dfc00117 	ldw	ra,4(sp)
   2e584:	df000017 	ldw	fp,0(sp)
   2e588:	dec00204 	addi	sp,sp,8
   2e58c:	f800283a 	ret

0002e590 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e590:	defffc04 	addi	sp,sp,-16
   2e594:	dfc00315 	stw	ra,12(sp)
   2e598:	df000215 	stw	fp,8(sp)
   2e59c:	df000204 	addi	fp,sp,8
   2e5a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e5a4:	e0bfff17 	ldw	r2,-4(fp)
   2e5a8:	10800017 	ldw	r2,0(r2)
   2e5ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e5b0:	e0bffe17 	ldw	r2,-8(fp)
   2e5b4:	10c00a04 	addi	r3,r2,40
   2e5b8:	e0bfff17 	ldw	r2,-4(fp)
   2e5bc:	10800217 	ldw	r2,8(r2)
   2e5c0:	100b883a 	mov	r5,r2
   2e5c4:	1809883a 	mov	r4,r3
   2e5c8:	002e9a00 	call	2e9a0 <altera_avalon_jtag_uart_close>
}
   2e5cc:	e037883a 	mov	sp,fp
   2e5d0:	dfc00117 	ldw	ra,4(sp)
   2e5d4:	df000017 	ldw	fp,0(sp)
   2e5d8:	dec00204 	addi	sp,sp,8
   2e5dc:	f800283a 	ret

0002e5e0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e5e0:	defffa04 	addi	sp,sp,-24
   2e5e4:	dfc00515 	stw	ra,20(sp)
   2e5e8:	df000415 	stw	fp,16(sp)
   2e5ec:	df000404 	addi	fp,sp,16
   2e5f0:	e13ffd15 	stw	r4,-12(fp)
   2e5f4:	e17ffe15 	stw	r5,-8(fp)
   2e5f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e5fc:	e0bffd17 	ldw	r2,-12(fp)
   2e600:	10800017 	ldw	r2,0(r2)
   2e604:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e608:	e0bffc17 	ldw	r2,-16(fp)
   2e60c:	10800a04 	addi	r2,r2,40
   2e610:	e1bfff17 	ldw	r6,-4(fp)
   2e614:	e17ffe17 	ldw	r5,-8(fp)
   2e618:	1009883a 	mov	r4,r2
   2e61c:	002ea080 	call	2ea08 <altera_avalon_jtag_uart_ioctl>
}
   2e620:	e037883a 	mov	sp,fp
   2e624:	dfc00117 	ldw	ra,4(sp)
   2e628:	df000017 	ldw	fp,0(sp)
   2e62c:	dec00204 	addi	sp,sp,8
   2e630:	f800283a 	ret

0002e634 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e634:	defffa04 	addi	sp,sp,-24
   2e638:	dfc00515 	stw	ra,20(sp)
   2e63c:	df000415 	stw	fp,16(sp)
   2e640:	df000404 	addi	fp,sp,16
   2e644:	e13ffd15 	stw	r4,-12(fp)
   2e648:	e17ffe15 	stw	r5,-8(fp)
   2e64c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e650:	e0bffd17 	ldw	r2,-12(fp)
   2e654:	00c00044 	movi	r3,1
   2e658:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e65c:	e0bffd17 	ldw	r2,-12(fp)
   2e660:	10800017 	ldw	r2,0(r2)
   2e664:	10800104 	addi	r2,r2,4
   2e668:	1007883a 	mov	r3,r2
   2e66c:	e0bffd17 	ldw	r2,-12(fp)
   2e670:	10800817 	ldw	r2,32(r2)
   2e674:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e678:	e0bffe17 	ldw	r2,-8(fp)
   2e67c:	e0ffff17 	ldw	r3,-4(fp)
   2e680:	d8000015 	stw	zero,0(sp)
   2e684:	e1fffd17 	ldw	r7,-12(fp)
   2e688:	018000f4 	movhi	r6,3
   2e68c:	31b9bd04 	addi	r6,r6,-6412
   2e690:	180b883a 	mov	r5,r3
   2e694:	1009883a 	mov	r4,r2
   2e698:	00308140 	call	30814 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e69c:	e0bffd17 	ldw	r2,-12(fp)
   2e6a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e6a4:	e0bffd17 	ldw	r2,-12(fp)
   2e6a8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e6ac:	d0e73a17 	ldw	r3,-25368(gp)
   2e6b0:	e1fffd17 	ldw	r7,-12(fp)
   2e6b4:	018000f4 	movhi	r6,3
   2e6b8:	31ba4004 	addi	r6,r6,-5888
   2e6bc:	180b883a 	mov	r5,r3
   2e6c0:	1009883a 	mov	r4,r2
   2e6c4:	003043c0 	call	3043c <alt_alarm_start>
   2e6c8:	1000040e 	bge	r2,zero,2e6dc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e6cc:	e0fffd17 	ldw	r3,-12(fp)
   2e6d0:	00a00034 	movhi	r2,32768
   2e6d4:	10bfffc4 	addi	r2,r2,-1
   2e6d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e6dc:	0001883a 	nop
   2e6e0:	e037883a 	mov	sp,fp
   2e6e4:	dfc00117 	ldw	ra,4(sp)
   2e6e8:	df000017 	ldw	fp,0(sp)
   2e6ec:	dec00204 	addi	sp,sp,8
   2e6f0:	f800283a 	ret

0002e6f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e6f4:	defff804 	addi	sp,sp,-32
   2e6f8:	df000715 	stw	fp,28(sp)
   2e6fc:	df000704 	addi	fp,sp,28
   2e700:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e704:	e0bfff17 	ldw	r2,-4(fp)
   2e708:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e70c:	e0bffb17 	ldw	r2,-20(fp)
   2e710:	10800017 	ldw	r2,0(r2)
   2e714:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e718:	e0bffc17 	ldw	r2,-16(fp)
   2e71c:	10800104 	addi	r2,r2,4
   2e720:	10800037 	ldwio	r2,0(r2)
   2e724:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e728:	e0bffd17 	ldw	r2,-12(fp)
   2e72c:	1080c00c 	andi	r2,r2,768
   2e730:	10006d26 	beq	r2,zero,2e8e8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e734:	e0bffd17 	ldw	r2,-12(fp)
   2e738:	1080400c 	andi	r2,r2,256
   2e73c:	10003526 	beq	r2,zero,2e814 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e740:	00800074 	movhi	r2,1
   2e744:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e748:	e0bffb17 	ldw	r2,-20(fp)
   2e74c:	10800a17 	ldw	r2,40(r2)
   2e750:	10800044 	addi	r2,r2,1
   2e754:	1081ffcc 	andi	r2,r2,2047
   2e758:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e75c:	e0bffb17 	ldw	r2,-20(fp)
   2e760:	10c00b17 	ldw	r3,44(r2)
   2e764:	e0bffe17 	ldw	r2,-8(fp)
   2e768:	18801526 	beq	r3,r2,2e7c0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e76c:	e0bffc17 	ldw	r2,-16(fp)
   2e770:	10800037 	ldwio	r2,0(r2)
   2e774:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e778:	e0bff917 	ldw	r2,-28(fp)
   2e77c:	10a0000c 	andi	r2,r2,32768
   2e780:	10001126 	beq	r2,zero,2e7c8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e784:	e0bffb17 	ldw	r2,-20(fp)
   2e788:	10800a17 	ldw	r2,40(r2)
   2e78c:	e0fff917 	ldw	r3,-28(fp)
   2e790:	1809883a 	mov	r4,r3
   2e794:	e0fffb17 	ldw	r3,-20(fp)
   2e798:	1885883a 	add	r2,r3,r2
   2e79c:	10800e04 	addi	r2,r2,56
   2e7a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e7a4:	e0bffb17 	ldw	r2,-20(fp)
   2e7a8:	10800a17 	ldw	r2,40(r2)
   2e7ac:	10800044 	addi	r2,r2,1
   2e7b0:	10c1ffcc 	andi	r3,r2,2047
   2e7b4:	e0bffb17 	ldw	r2,-20(fp)
   2e7b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e7bc:	003fe206 	br	2e748 <__alt_data_end+0xf402e748>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e7c0:	0001883a 	nop
   2e7c4:	00000106 	br	2e7cc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e7c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e7cc:	e0bff917 	ldw	r2,-28(fp)
   2e7d0:	10bfffec 	andhi	r2,r2,65535
   2e7d4:	10000f26 	beq	r2,zero,2e814 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e7d8:	e0bffb17 	ldw	r2,-20(fp)
   2e7dc:	10c00817 	ldw	r3,32(r2)
   2e7e0:	00bfff84 	movi	r2,-2
   2e7e4:	1886703a 	and	r3,r3,r2
   2e7e8:	e0bffb17 	ldw	r2,-20(fp)
   2e7ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e7f0:	e0bffc17 	ldw	r2,-16(fp)
   2e7f4:	10800104 	addi	r2,r2,4
   2e7f8:	1007883a 	mov	r3,r2
   2e7fc:	e0bffb17 	ldw	r2,-20(fp)
   2e800:	10800817 	ldw	r2,32(r2)
   2e804:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e808:	e0bffc17 	ldw	r2,-16(fp)
   2e80c:	10800104 	addi	r2,r2,4
   2e810:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2e814:	e0bffd17 	ldw	r2,-12(fp)
   2e818:	1080800c 	andi	r2,r2,512
   2e81c:	103fbe26 	beq	r2,zero,2e718 <__alt_data_end+0xf402e718>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2e820:	e0bffd17 	ldw	r2,-12(fp)
   2e824:	1004d43a 	srli	r2,r2,16
   2e828:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e82c:	00001406 	br	2e880 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2e830:	e0bffc17 	ldw	r2,-16(fp)
   2e834:	e0fffb17 	ldw	r3,-20(fp)
   2e838:	18c00d17 	ldw	r3,52(r3)
   2e83c:	e13ffb17 	ldw	r4,-20(fp)
   2e840:	20c7883a 	add	r3,r4,r3
   2e844:	18c20e04 	addi	r3,r3,2104
   2e848:	18c00003 	ldbu	r3,0(r3)
   2e84c:	18c03fcc 	andi	r3,r3,255
   2e850:	18c0201c 	xori	r3,r3,128
   2e854:	18ffe004 	addi	r3,r3,-128
   2e858:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e85c:	e0bffb17 	ldw	r2,-20(fp)
   2e860:	10800d17 	ldw	r2,52(r2)
   2e864:	10800044 	addi	r2,r2,1
   2e868:	10c1ffcc 	andi	r3,r2,2047
   2e86c:	e0bffb17 	ldw	r2,-20(fp)
   2e870:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2e874:	e0bffa17 	ldw	r2,-24(fp)
   2e878:	10bfffc4 	addi	r2,r2,-1
   2e87c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e880:	e0bffa17 	ldw	r2,-24(fp)
   2e884:	10000526 	beq	r2,zero,2e89c <altera_avalon_jtag_uart_irq+0x1a8>
   2e888:	e0bffb17 	ldw	r2,-20(fp)
   2e88c:	10c00d17 	ldw	r3,52(r2)
   2e890:	e0bffb17 	ldw	r2,-20(fp)
   2e894:	10800c17 	ldw	r2,48(r2)
   2e898:	18bfe51e 	bne	r3,r2,2e830 <__alt_data_end+0xf402e830>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2e89c:	e0bffa17 	ldw	r2,-24(fp)
   2e8a0:	103f9d26 	beq	r2,zero,2e718 <__alt_data_end+0xf402e718>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e8a4:	e0bffb17 	ldw	r2,-20(fp)
   2e8a8:	10c00817 	ldw	r3,32(r2)
   2e8ac:	00bfff44 	movi	r2,-3
   2e8b0:	1886703a 	and	r3,r3,r2
   2e8b4:	e0bffb17 	ldw	r2,-20(fp)
   2e8b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e8bc:	e0bffb17 	ldw	r2,-20(fp)
   2e8c0:	10800017 	ldw	r2,0(r2)
   2e8c4:	10800104 	addi	r2,r2,4
   2e8c8:	1007883a 	mov	r3,r2
   2e8cc:	e0bffb17 	ldw	r2,-20(fp)
   2e8d0:	10800817 	ldw	r2,32(r2)
   2e8d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e8d8:	e0bffc17 	ldw	r2,-16(fp)
   2e8dc:	10800104 	addi	r2,r2,4
   2e8e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2e8e4:	003f8c06 	br	2e718 <__alt_data_end+0xf402e718>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2e8e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2e8ec:	0001883a 	nop
   2e8f0:	e037883a 	mov	sp,fp
   2e8f4:	df000017 	ldw	fp,0(sp)
   2e8f8:	dec00104 	addi	sp,sp,4
   2e8fc:	f800283a 	ret

0002e900 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2e900:	defff804 	addi	sp,sp,-32
   2e904:	df000715 	stw	fp,28(sp)
   2e908:	df000704 	addi	fp,sp,28
   2e90c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2e910:	e0bffb17 	ldw	r2,-20(fp)
   2e914:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2e918:	e0bff917 	ldw	r2,-28(fp)
   2e91c:	10800017 	ldw	r2,0(r2)
   2e920:	10800104 	addi	r2,r2,4
   2e924:	10800037 	ldwio	r2,0(r2)
   2e928:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2e92c:	e0bffa17 	ldw	r2,-24(fp)
   2e930:	1081000c 	andi	r2,r2,1024
   2e934:	10000b26 	beq	r2,zero,2e964 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2e938:	e0bff917 	ldw	r2,-28(fp)
   2e93c:	10800017 	ldw	r2,0(r2)
   2e940:	10800104 	addi	r2,r2,4
   2e944:	1007883a 	mov	r3,r2
   2e948:	e0bff917 	ldw	r2,-28(fp)
   2e94c:	10800817 	ldw	r2,32(r2)
   2e950:	10810014 	ori	r2,r2,1024
   2e954:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2e958:	e0bff917 	ldw	r2,-28(fp)
   2e95c:	10000915 	stw	zero,36(r2)
   2e960:	00000a06 	br	2e98c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2e964:	e0bff917 	ldw	r2,-28(fp)
   2e968:	10c00917 	ldw	r3,36(r2)
   2e96c:	00a00034 	movhi	r2,32768
   2e970:	10bfff04 	addi	r2,r2,-4
   2e974:	10c00536 	bltu	r2,r3,2e98c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2e978:	e0bff917 	ldw	r2,-28(fp)
   2e97c:	10800917 	ldw	r2,36(r2)
   2e980:	10c00044 	addi	r3,r2,1
   2e984:	e0bff917 	ldw	r2,-28(fp)
   2e988:	10c00915 	stw	r3,36(r2)
   2e98c:	d0a73a17 	ldw	r2,-25368(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2e990:	e037883a 	mov	sp,fp
   2e994:	df000017 	ldw	fp,0(sp)
   2e998:	dec00104 	addi	sp,sp,4
   2e99c:	f800283a 	ret

0002e9a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2e9a0:	defffd04 	addi	sp,sp,-12
   2e9a4:	df000215 	stw	fp,8(sp)
   2e9a8:	df000204 	addi	fp,sp,8
   2e9ac:	e13ffe15 	stw	r4,-8(fp)
   2e9b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e9b4:	00000506 	br	2e9cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e9b8:	e0bfff17 	ldw	r2,-4(fp)
   2e9bc:	1090000c 	andi	r2,r2,16384
   2e9c0:	10000226 	beq	r2,zero,2e9cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e9c4:	00bffd44 	movi	r2,-11
   2e9c8:	00000b06 	br	2e9f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e9cc:	e0bffe17 	ldw	r2,-8(fp)
   2e9d0:	10c00d17 	ldw	r3,52(r2)
   2e9d4:	e0bffe17 	ldw	r2,-8(fp)
   2e9d8:	10800c17 	ldw	r2,48(r2)
   2e9dc:	18800526 	beq	r3,r2,2e9f4 <altera_avalon_jtag_uart_close+0x54>
   2e9e0:	e0bffe17 	ldw	r2,-8(fp)
   2e9e4:	10c00917 	ldw	r3,36(r2)
   2e9e8:	e0bffe17 	ldw	r2,-8(fp)
   2e9ec:	10800117 	ldw	r2,4(r2)
   2e9f0:	18bff136 	bltu	r3,r2,2e9b8 <__alt_data_end+0xf402e9b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e9f4:	0005883a 	mov	r2,zero
}
   2e9f8:	e037883a 	mov	sp,fp
   2e9fc:	df000017 	ldw	fp,0(sp)
   2ea00:	dec00104 	addi	sp,sp,4
   2ea04:	f800283a 	ret

0002ea08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2ea08:	defffa04 	addi	sp,sp,-24
   2ea0c:	df000515 	stw	fp,20(sp)
   2ea10:	df000504 	addi	fp,sp,20
   2ea14:	e13ffd15 	stw	r4,-12(fp)
   2ea18:	e17ffe15 	stw	r5,-8(fp)
   2ea1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2ea20:	00bff9c4 	movi	r2,-25
   2ea24:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2ea28:	e0bffe17 	ldw	r2,-8(fp)
   2ea2c:	10da8060 	cmpeqi	r3,r2,27137
   2ea30:	1800031e 	bne	r3,zero,2ea40 <altera_avalon_jtag_uart_ioctl+0x38>
   2ea34:	109a80a0 	cmpeqi	r2,r2,27138
   2ea38:	1000181e 	bne	r2,zero,2ea9c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2ea3c:	00002906 	br	2eae4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2ea40:	e0bffd17 	ldw	r2,-12(fp)
   2ea44:	10c00117 	ldw	r3,4(r2)
   2ea48:	00a00034 	movhi	r2,32768
   2ea4c:	10bfffc4 	addi	r2,r2,-1
   2ea50:	18802126 	beq	r3,r2,2ead8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2ea54:	e0bfff17 	ldw	r2,-4(fp)
   2ea58:	10800017 	ldw	r2,0(r2)
   2ea5c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2ea60:	e0bffc17 	ldw	r2,-16(fp)
   2ea64:	10800090 	cmplti	r2,r2,2
   2ea68:	1000061e 	bne	r2,zero,2ea84 <altera_avalon_jtag_uart_ioctl+0x7c>
   2ea6c:	e0fffc17 	ldw	r3,-16(fp)
   2ea70:	00a00034 	movhi	r2,32768
   2ea74:	10bfffc4 	addi	r2,r2,-1
   2ea78:	18800226 	beq	r3,r2,2ea84 <altera_avalon_jtag_uart_ioctl+0x7c>
   2ea7c:	e0bffc17 	ldw	r2,-16(fp)
   2ea80:	00000206 	br	2ea8c <altera_avalon_jtag_uart_ioctl+0x84>
   2ea84:	00a00034 	movhi	r2,32768
   2ea88:	10bfff84 	addi	r2,r2,-2
   2ea8c:	e0fffd17 	ldw	r3,-12(fp)
   2ea90:	18800115 	stw	r2,4(r3)
      rc = 0;
   2ea94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ea98:	00000f06 	br	2ead8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2ea9c:	e0bffd17 	ldw	r2,-12(fp)
   2eaa0:	10c00117 	ldw	r3,4(r2)
   2eaa4:	00a00034 	movhi	r2,32768
   2eaa8:	10bfffc4 	addi	r2,r2,-1
   2eaac:	18800c26 	beq	r3,r2,2eae0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2eab0:	e0bffd17 	ldw	r2,-12(fp)
   2eab4:	10c00917 	ldw	r3,36(r2)
   2eab8:	e0bffd17 	ldw	r2,-12(fp)
   2eabc:	10800117 	ldw	r2,4(r2)
   2eac0:	1885803a 	cmpltu	r2,r3,r2
   2eac4:	10c03fcc 	andi	r3,r2,255
   2eac8:	e0bfff17 	ldw	r2,-4(fp)
   2eacc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2ead0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ead4:	00000206 	br	2eae0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2ead8:	0001883a 	nop
   2eadc:	00000106 	br	2eae4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2eae0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2eae4:	e0bffb17 	ldw	r2,-20(fp)
}
   2eae8:	e037883a 	mov	sp,fp
   2eaec:	df000017 	ldw	fp,0(sp)
   2eaf0:	dec00104 	addi	sp,sp,4
   2eaf4:	f800283a 	ret

0002eaf8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2eaf8:	defff304 	addi	sp,sp,-52
   2eafc:	dfc00c15 	stw	ra,48(sp)
   2eb00:	df000b15 	stw	fp,44(sp)
   2eb04:	df000b04 	addi	fp,sp,44
   2eb08:	e13ffc15 	stw	r4,-16(fp)
   2eb0c:	e17ffd15 	stw	r5,-12(fp)
   2eb10:	e1bffe15 	stw	r6,-8(fp)
   2eb14:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2eb18:	e0bffd17 	ldw	r2,-12(fp)
   2eb1c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2eb20:	00004706 	br	2ec40 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2eb24:	e0bffc17 	ldw	r2,-16(fp)
   2eb28:	10800a17 	ldw	r2,40(r2)
   2eb2c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2eb30:	e0bffc17 	ldw	r2,-16(fp)
   2eb34:	10800b17 	ldw	r2,44(r2)
   2eb38:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2eb3c:	e0fff717 	ldw	r3,-36(fp)
   2eb40:	e0bff817 	ldw	r2,-32(fp)
   2eb44:	18800536 	bltu	r3,r2,2eb5c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2eb48:	e0fff717 	ldw	r3,-36(fp)
   2eb4c:	e0bff817 	ldw	r2,-32(fp)
   2eb50:	1885c83a 	sub	r2,r3,r2
   2eb54:	e0bff615 	stw	r2,-40(fp)
   2eb58:	00000406 	br	2eb6c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2eb5c:	00c20004 	movi	r3,2048
   2eb60:	e0bff817 	ldw	r2,-32(fp)
   2eb64:	1885c83a 	sub	r2,r3,r2
   2eb68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2eb6c:	e0bff617 	ldw	r2,-40(fp)
   2eb70:	10001e26 	beq	r2,zero,2ebec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2eb74:	e0fffe17 	ldw	r3,-8(fp)
   2eb78:	e0bff617 	ldw	r2,-40(fp)
   2eb7c:	1880022e 	bgeu	r3,r2,2eb88 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2eb80:	e0bffe17 	ldw	r2,-8(fp)
   2eb84:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2eb88:	e0bffc17 	ldw	r2,-16(fp)
   2eb8c:	10c00e04 	addi	r3,r2,56
   2eb90:	e0bff817 	ldw	r2,-32(fp)
   2eb94:	1885883a 	add	r2,r3,r2
   2eb98:	e1bff617 	ldw	r6,-40(fp)
   2eb9c:	100b883a 	mov	r5,r2
   2eba0:	e13ff517 	ldw	r4,-44(fp)
   2eba4:	0026bec0 	call	26bec <memcpy>
      ptr   += n;
   2eba8:	e0fff517 	ldw	r3,-44(fp)
   2ebac:	e0bff617 	ldw	r2,-40(fp)
   2ebb0:	1885883a 	add	r2,r3,r2
   2ebb4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2ebb8:	e0fffe17 	ldw	r3,-8(fp)
   2ebbc:	e0bff617 	ldw	r2,-40(fp)
   2ebc0:	1885c83a 	sub	r2,r3,r2
   2ebc4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ebc8:	e0fff817 	ldw	r3,-32(fp)
   2ebcc:	e0bff617 	ldw	r2,-40(fp)
   2ebd0:	1885883a 	add	r2,r3,r2
   2ebd4:	10c1ffcc 	andi	r3,r2,2047
   2ebd8:	e0bffc17 	ldw	r2,-16(fp)
   2ebdc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2ebe0:	e0bffe17 	ldw	r2,-8(fp)
   2ebe4:	00bfcf16 	blt	zero,r2,2eb24 <__alt_data_end+0xf402eb24>
   2ebe8:	00000106 	br	2ebf0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2ebec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2ebf0:	e0fff517 	ldw	r3,-44(fp)
   2ebf4:	e0bffd17 	ldw	r2,-12(fp)
   2ebf8:	1880141e 	bne	r3,r2,2ec4c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2ebfc:	e0bfff17 	ldw	r2,-4(fp)
   2ec00:	1090000c 	andi	r2,r2,16384
   2ec04:	1000131e 	bne	r2,zero,2ec54 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2ec08:	0001883a 	nop
   2ec0c:	e0bffc17 	ldw	r2,-16(fp)
   2ec10:	10c00a17 	ldw	r3,40(r2)
   2ec14:	e0bff717 	ldw	r2,-36(fp)
   2ec18:	1880051e 	bne	r3,r2,2ec30 <altera_avalon_jtag_uart_read+0x138>
   2ec1c:	e0bffc17 	ldw	r2,-16(fp)
   2ec20:	10c00917 	ldw	r3,36(r2)
   2ec24:	e0bffc17 	ldw	r2,-16(fp)
   2ec28:	10800117 	ldw	r2,4(r2)
   2ec2c:	18bff736 	bltu	r3,r2,2ec0c <__alt_data_end+0xf402ec0c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2ec30:	e0bffc17 	ldw	r2,-16(fp)
   2ec34:	10c00a17 	ldw	r3,40(r2)
   2ec38:	e0bff717 	ldw	r2,-36(fp)
   2ec3c:	18800726 	beq	r3,r2,2ec5c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ec40:	e0bffe17 	ldw	r2,-8(fp)
   2ec44:	00bfb716 	blt	zero,r2,2eb24 <__alt_data_end+0xf402eb24>
   2ec48:	00000506 	br	2ec60 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2ec4c:	0001883a 	nop
   2ec50:	00000306 	br	2ec60 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2ec54:	0001883a 	nop
   2ec58:	00000106 	br	2ec60 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2ec5c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2ec60:	e0fff517 	ldw	r3,-44(fp)
   2ec64:	e0bffd17 	ldw	r2,-12(fp)
   2ec68:	18801826 	beq	r3,r2,2eccc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ec6c:	0005303a 	rdctl	r2,status
   2ec70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ec74:	e0fffb17 	ldw	r3,-20(fp)
   2ec78:	00bfff84 	movi	r2,-2
   2ec7c:	1884703a 	and	r2,r3,r2
   2ec80:	1001703a 	wrctl	status,r2
  
  return context;
   2ec84:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2ec88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ec8c:	e0bffc17 	ldw	r2,-16(fp)
   2ec90:	10800817 	ldw	r2,32(r2)
   2ec94:	10c00054 	ori	r3,r2,1
   2ec98:	e0bffc17 	ldw	r2,-16(fp)
   2ec9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2eca0:	e0bffc17 	ldw	r2,-16(fp)
   2eca4:	10800017 	ldw	r2,0(r2)
   2eca8:	10800104 	addi	r2,r2,4
   2ecac:	1007883a 	mov	r3,r2
   2ecb0:	e0bffc17 	ldw	r2,-16(fp)
   2ecb4:	10800817 	ldw	r2,32(r2)
   2ecb8:	18800035 	stwio	r2,0(r3)
   2ecbc:	e0bffa17 	ldw	r2,-24(fp)
   2ecc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ecc4:	e0bff917 	ldw	r2,-28(fp)
   2ecc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2eccc:	e0fff517 	ldw	r3,-44(fp)
   2ecd0:	e0bffd17 	ldw	r2,-12(fp)
   2ecd4:	18800426 	beq	r3,r2,2ece8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2ecd8:	e0fff517 	ldw	r3,-44(fp)
   2ecdc:	e0bffd17 	ldw	r2,-12(fp)
   2ece0:	1885c83a 	sub	r2,r3,r2
   2ece4:	00000606 	br	2ed00 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2ece8:	e0bfff17 	ldw	r2,-4(fp)
   2ecec:	1090000c 	andi	r2,r2,16384
   2ecf0:	10000226 	beq	r2,zero,2ecfc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2ecf4:	00bffd44 	movi	r2,-11
   2ecf8:	00000106 	br	2ed00 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2ecfc:	00bffec4 	movi	r2,-5
}
   2ed00:	e037883a 	mov	sp,fp
   2ed04:	dfc00117 	ldw	ra,4(sp)
   2ed08:	df000017 	ldw	fp,0(sp)
   2ed0c:	dec00204 	addi	sp,sp,8
   2ed10:	f800283a 	ret

0002ed14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2ed14:	defff304 	addi	sp,sp,-52
   2ed18:	dfc00c15 	stw	ra,48(sp)
   2ed1c:	df000b15 	stw	fp,44(sp)
   2ed20:	df000b04 	addi	fp,sp,44
   2ed24:	e13ffc15 	stw	r4,-16(fp)
   2ed28:	e17ffd15 	stw	r5,-12(fp)
   2ed2c:	e1bffe15 	stw	r6,-8(fp)
   2ed30:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2ed34:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2ed38:	e0bffd17 	ldw	r2,-12(fp)
   2ed3c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ed40:	00003706 	br	2ee20 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2ed44:	e0bffc17 	ldw	r2,-16(fp)
   2ed48:	10800c17 	ldw	r2,48(r2)
   2ed4c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2ed50:	e0bffc17 	ldw	r2,-16(fp)
   2ed54:	10800d17 	ldw	r2,52(r2)
   2ed58:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2ed5c:	e0fff917 	ldw	r3,-28(fp)
   2ed60:	e0bff517 	ldw	r2,-44(fp)
   2ed64:	1880062e 	bgeu	r3,r2,2ed80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2ed68:	e0fff517 	ldw	r3,-44(fp)
   2ed6c:	e0bff917 	ldw	r2,-28(fp)
   2ed70:	1885c83a 	sub	r2,r3,r2
   2ed74:	10bfffc4 	addi	r2,r2,-1
   2ed78:	e0bff615 	stw	r2,-40(fp)
   2ed7c:	00000b06 	br	2edac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2ed80:	e0bff517 	ldw	r2,-44(fp)
   2ed84:	10000526 	beq	r2,zero,2ed9c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2ed88:	00c20004 	movi	r3,2048
   2ed8c:	e0bff917 	ldw	r2,-28(fp)
   2ed90:	1885c83a 	sub	r2,r3,r2
   2ed94:	e0bff615 	stw	r2,-40(fp)
   2ed98:	00000406 	br	2edac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2ed9c:	00c1ffc4 	movi	r3,2047
   2eda0:	e0bff917 	ldw	r2,-28(fp)
   2eda4:	1885c83a 	sub	r2,r3,r2
   2eda8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2edac:	e0bff617 	ldw	r2,-40(fp)
   2edb0:	10001e26 	beq	r2,zero,2ee2c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2edb4:	e0fffe17 	ldw	r3,-8(fp)
   2edb8:	e0bff617 	ldw	r2,-40(fp)
   2edbc:	1880022e 	bgeu	r3,r2,2edc8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2edc0:	e0bffe17 	ldw	r2,-8(fp)
   2edc4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2edc8:	e0bffc17 	ldw	r2,-16(fp)
   2edcc:	10c20e04 	addi	r3,r2,2104
   2edd0:	e0bff917 	ldw	r2,-28(fp)
   2edd4:	1885883a 	add	r2,r3,r2
   2edd8:	e1bff617 	ldw	r6,-40(fp)
   2eddc:	e17ffd17 	ldw	r5,-12(fp)
   2ede0:	1009883a 	mov	r4,r2
   2ede4:	0026bec0 	call	26bec <memcpy>
      ptr   += n;
   2ede8:	e0fffd17 	ldw	r3,-12(fp)
   2edec:	e0bff617 	ldw	r2,-40(fp)
   2edf0:	1885883a 	add	r2,r3,r2
   2edf4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2edf8:	e0fffe17 	ldw	r3,-8(fp)
   2edfc:	e0bff617 	ldw	r2,-40(fp)
   2ee00:	1885c83a 	sub	r2,r3,r2
   2ee04:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ee08:	e0fff917 	ldw	r3,-28(fp)
   2ee0c:	e0bff617 	ldw	r2,-40(fp)
   2ee10:	1885883a 	add	r2,r3,r2
   2ee14:	10c1ffcc 	andi	r3,r2,2047
   2ee18:	e0bffc17 	ldw	r2,-16(fp)
   2ee1c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ee20:	e0bffe17 	ldw	r2,-8(fp)
   2ee24:	00bfc716 	blt	zero,r2,2ed44 <__alt_data_end+0xf402ed44>
   2ee28:	00000106 	br	2ee30 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2ee2c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ee30:	0005303a 	rdctl	r2,status
   2ee34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ee38:	e0fffb17 	ldw	r3,-20(fp)
   2ee3c:	00bfff84 	movi	r2,-2
   2ee40:	1884703a 	and	r2,r3,r2
   2ee44:	1001703a 	wrctl	status,r2
  
  return context;
   2ee48:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2ee4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ee50:	e0bffc17 	ldw	r2,-16(fp)
   2ee54:	10800817 	ldw	r2,32(r2)
   2ee58:	10c00094 	ori	r3,r2,2
   2ee5c:	e0bffc17 	ldw	r2,-16(fp)
   2ee60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ee64:	e0bffc17 	ldw	r2,-16(fp)
   2ee68:	10800017 	ldw	r2,0(r2)
   2ee6c:	10800104 	addi	r2,r2,4
   2ee70:	1007883a 	mov	r3,r2
   2ee74:	e0bffc17 	ldw	r2,-16(fp)
   2ee78:	10800817 	ldw	r2,32(r2)
   2ee7c:	18800035 	stwio	r2,0(r3)
   2ee80:	e0bffa17 	ldw	r2,-24(fp)
   2ee84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ee88:	e0bff817 	ldw	r2,-32(fp)
   2ee8c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2ee90:	e0bffe17 	ldw	r2,-8(fp)
   2ee94:	0080100e 	bge	zero,r2,2eed8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2ee98:	e0bfff17 	ldw	r2,-4(fp)
   2ee9c:	1090000c 	andi	r2,r2,16384
   2eea0:	1000101e 	bne	r2,zero,2eee4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2eea4:	0001883a 	nop
   2eea8:	e0bffc17 	ldw	r2,-16(fp)
   2eeac:	10c00d17 	ldw	r3,52(r2)
   2eeb0:	e0bff517 	ldw	r2,-44(fp)
   2eeb4:	1880051e 	bne	r3,r2,2eecc <altera_avalon_jtag_uart_write+0x1b8>
   2eeb8:	e0bffc17 	ldw	r2,-16(fp)
   2eebc:	10c00917 	ldw	r3,36(r2)
   2eec0:	e0bffc17 	ldw	r2,-16(fp)
   2eec4:	10800117 	ldw	r2,4(r2)
   2eec8:	18bff736 	bltu	r3,r2,2eea8 <__alt_data_end+0xf402eea8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2eecc:	e0bffc17 	ldw	r2,-16(fp)
   2eed0:	10800917 	ldw	r2,36(r2)
   2eed4:	1000051e 	bne	r2,zero,2eeec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2eed8:	e0bffe17 	ldw	r2,-8(fp)
   2eedc:	00bfd016 	blt	zero,r2,2ee20 <__alt_data_end+0xf402ee20>
   2eee0:	00000306 	br	2eef0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2eee4:	0001883a 	nop
   2eee8:	00000106 	br	2eef0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2eeec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2eef0:	e0fffd17 	ldw	r3,-12(fp)
   2eef4:	e0bff717 	ldw	r2,-36(fp)
   2eef8:	18800426 	beq	r3,r2,2ef0c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2eefc:	e0fffd17 	ldw	r3,-12(fp)
   2ef00:	e0bff717 	ldw	r2,-36(fp)
   2ef04:	1885c83a 	sub	r2,r3,r2
   2ef08:	00000606 	br	2ef24 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2ef0c:	e0bfff17 	ldw	r2,-4(fp)
   2ef10:	1090000c 	andi	r2,r2,16384
   2ef14:	10000226 	beq	r2,zero,2ef20 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2ef18:	00bffd44 	movi	r2,-11
   2ef1c:	00000106 	br	2ef24 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2ef20:	00bffec4 	movi	r2,-5
}
   2ef24:	e037883a 	mov	sp,fp
   2ef28:	dfc00117 	ldw	ra,4(sp)
   2ef2c:	df000017 	ldw	fp,0(sp)
   2ef30:	dec00204 	addi	sp,sp,8
   2ef34:	f800283a 	ret

0002ef38 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
   2ef38:	defffd04 	addi	sp,sp,-12
   2ef3c:	df000215 	stw	fp,8(sp)
   2ef40:	df000204 	addi	fp,sp,8
   2ef44:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
   2ef48:	008e84b4 	movhi	r2,14866
   2ef4c:	10ac1144 	addi	r2,r2,-20411
   2ef50:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
   2ef54:	e0bfff17 	ldw	r2,-4(fp)
   2ef58:	10800a17 	ldw	r2,40(r2)
   2ef5c:	10800104 	addi	r2,r2,4
   2ef60:	1007883a 	mov	r3,r2
   2ef64:	e0bffe17 	ldw	r2,-8(fp)
   2ef68:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
   2ef6c:	e0bfff17 	ldw	r2,-4(fp)
   2ef70:	10800a17 	ldw	r2,40(r2)
   2ef74:	10800104 	addi	r2,r2,4
   2ef78:	10800037 	ldwio	r2,0(r2)
   2ef7c:	1007883a 	mov	r3,r2
   2ef80:	e0bffe17 	ldw	r2,-8(fp)
   2ef84:	1880081e 	bne	r3,r2,2efa8 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
   2ef88:	e0bfff17 	ldw	r2,-4(fp)
   2ef8c:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
   2ef90:	e0bfff17 	ldw	r2,-4(fp)
   2ef94:	10800a17 	ldw	r2,40(r2)
   2ef98:	10800104 	addi	r2,r2,4
   2ef9c:	0007883a 	mov	r3,zero
   2efa0:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
   2efa4:	00000306 	br	2efb4 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
   2efa8:	e0bfff17 	ldw	r2,-4(fp)
   2efac:	00c00044 	movi	r3,1
   2efb0:	10c00f15 	stw	r3,60(r2)
    }
}
   2efb4:	0001883a 	nop
   2efb8:	e037883a 	mov	sp,fp
   2efbc:	df000017 	ldw	fp,0(sp)
   2efc0:	dec00104 	addi	sp,sp,4
   2efc4:	f800283a 	ret

0002efc8 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
   2efc8:	defffc04 	addi	sp,sp,-16
   2efcc:	df000315 	stw	fp,12(sp)
   2efd0:	df000304 	addi	fp,sp,12
   2efd4:	e13ffe15 	stw	r4,-8(fp)
   2efd8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
   2efdc:	e0bfff17 	ldw	r2,-4(fp)
   2efe0:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
   2efe4:	e0bffd17 	ldw	r2,-12(fp)
   2efe8:	10001026 	beq	r2,zero,2f02c <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
   2efec:	e0bffe17 	ldw	r2,-8(fp)
   2eff0:	10800a17 	ldw	r2,40(r2)
   2eff4:	10800104 	addi	r2,r2,4
   2eff8:	1007883a 	mov	r3,r2
   2effc:	e0bffd17 	ldw	r2,-12(fp)
   2f000:	10800104 	addi	r2,r2,4
   2f004:	10800017 	ldw	r2,0(r2)
   2f008:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
   2f00c:	e0bffe17 	ldw	r2,-8(fp)
   2f010:	10800a17 	ldw	r2,40(r2)
   2f014:	1007883a 	mov	r3,r2
   2f018:	e0bffd17 	ldw	r2,-12(fp)
   2f01c:	10800017 	ldw	r2,0(r2)
   2f020:	18800035 	stwio	r2,0(r3)
        return 0;
   2f024:	0005883a 	mov	r2,zero
   2f028:	00000106 	br	2f030 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
   2f02c:	00bffa84 	movi	r2,-22
}
   2f030:	e037883a 	mov	sp,fp
   2f034:	df000017 	ldw	fp,0(sp)
   2f038:	dec00104 	addi	sp,sp,4
   2f03c:	f800283a 	ret

0002f040 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
   2f040:	defff604 	addi	sp,sp,-40
   2f044:	dfc00915 	stw	ra,36(sp)
   2f048:	df000815 	stw	fp,32(sp)
   2f04c:	df000804 	addi	fp,sp,32
   2f050:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   2f054:	e0bfff17 	ldw	r2,-4(fp)
   2f058:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
   2f05c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
   2f060:	e0bff817 	ldw	r2,-32(fp)
   2f064:	10801017 	ldw	r2,64(r2)
   2f068:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   2f06c:	e0bff817 	ldw	r2,-32(fp)
   2f070:	10800a17 	ldw	r2,40(r2)
   2f074:	10800304 	addi	r2,r2,12
   2f078:	10800037 	ldwio	r2,0(r2)
   2f07c:	1007883a 	mov	r3,r2
   2f080:	00bfff44 	movi	r2,-3
   2f084:	1884703a 	and	r2,r3,r2
   2f088:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2f08c:	e0bff817 	ldw	r2,-32(fp)
   2f090:	10800a17 	ldw	r2,40(r2)
   2f094:	10800304 	addi	r2,r2,12
   2f098:	1007883a 	mov	r3,r2
   2f09c:	e0bffb17 	ldw	r2,-20(fp)
   2f0a0:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
   2f0a4:	e0bffa17 	ldw	r2,-24(fp)
   2f0a8:	10002d26 	beq	r2,zero,2f160 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
   2f0ac:	e0bff817 	ldw	r2,-32(fp)
   2f0b0:	10800a17 	ldw	r2,40(r2)
   2f0b4:	10800104 	addi	r2,r2,4
   2f0b8:	1007883a 	mov	r3,r2
   2f0bc:	e0bffa17 	ldw	r2,-24(fp)
   2f0c0:	10800104 	addi	r2,r2,4
   2f0c4:	10800017 	ldw	r2,0(r2)
   2f0c8:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
   2f0cc:	e0bff817 	ldw	r2,-32(fp)
   2f0d0:	10800a17 	ldw	r2,40(r2)
   2f0d4:	1007883a 	mov	r3,r2
   2f0d8:	e0bffa17 	ldw	r2,-24(fp)
   2f0dc:	10800017 	ldw	r2,0(r2)
   2f0e0:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2f0e4:	e0bff817 	ldw	r2,-32(fp)
   2f0e8:	10800a17 	ldw	r2,40(r2)
   2f0ec:	10800204 	addi	r2,r2,8
   2f0f0:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   2f0f4:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2f0f8:	1005d07a 	srai	r2,r2,1
   2f0fc:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
   2f100:	e0bff817 	ldw	r2,-32(fp)
   2f104:	10800d17 	ldw	r2,52(r2)
   2f108:	10001126 	beq	r2,zero,2f150 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f10c:	0005303a 	rdctl	r2,status
   2f110:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f114:	e0fffd17 	ldw	r3,-12(fp)
   2f118:	00bfff84 	movi	r2,-2
   2f11c:	1884703a 	and	r2,r3,r2
   2f120:	1001703a 	wrctl	status,r2
  
  return context;
   2f124:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
   2f128:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
   2f12c:	e0bff817 	ldw	r2,-32(fp)
   2f130:	10800d17 	ldw	r2,52(r2)
   2f134:	e17ff917 	ldw	r5,-28(fp)
   2f138:	e13ffa17 	ldw	r4,-24(fp)
   2f13c:	103ee83a 	callr	r2
   2f140:	e0bffc17 	ldw	r2,-16(fp)
   2f144:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f148:	e0bffe17 	ldw	r2,-8(fp)
   2f14c:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   2f150:	e0bff817 	ldw	r2,-32(fp)
   2f154:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
   2f158:	e0bff817 	ldw	r2,-32(fp)
   2f15c:	10001105 	stb	zero,68(r2)
    }
}
   2f160:	0001883a 	nop
   2f164:	e037883a 	mov	sp,fp
   2f168:	dfc00117 	ldw	ra,4(sp)
   2f16c:	df000017 	ldw	fp,0(sp)
   2f170:	dec00204 	addi	sp,sp,8
   2f174:	f800283a 	ret

0002f178 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
   2f178:	defff704 	addi	sp,sp,-36
   2f17c:	dfc00815 	stw	ra,32(sp)
   2f180:	df000715 	stw	fp,28(sp)
   2f184:	df000704 	addi	fp,sp,28
   2f188:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   2f18c:	e0bfff17 	ldw	r2,-4(fp)
   2f190:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   2f194:	e0bff917 	ldw	r2,-28(fp)
   2f198:	10800a17 	ldw	r2,40(r2)
   2f19c:	10800104 	addi	r2,r2,4
   2f1a0:	10800037 	ldwio	r2,0(r2)
   2f1a4:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   2f1a8:	e0bff917 	ldw	r2,-28(fp)
   2f1ac:	10800a17 	ldw	r2,40(r2)
   2f1b0:	10800037 	ldwio	r2,0(r2)
   2f1b4:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
   2f1b8:	e0bff917 	ldw	r2,-28(fp)
   2f1bc:	10800e17 	ldw	r2,56(r2)
   2f1c0:	10001126 	beq	r2,zero,2f208 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f1c4:	0005303a 	rdctl	r2,status
   2f1c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f1cc:	e0fffb17 	ldw	r3,-20(fp)
   2f1d0:	00bfff84 	movi	r2,-2
   2f1d4:	1884703a 	and	r2,r3,r2
   2f1d8:	1001703a 	wrctl	status,r2
  
  return context;
   2f1dc:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2f1e0:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
   2f1e4:	e0bff917 	ldw	r2,-28(fp)
   2f1e8:	10800e17 	ldw	r2,56(r2)
   2f1ec:	e0fffd04 	addi	r3,fp,-12
   2f1f0:	1809883a 	mov	r4,r3
   2f1f4:	103ee83a 	callr	r2
   2f1f8:	e0bffa17 	ldw	r2,-24(fp)
   2f1fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f200:	e0bffc17 	ldw	r2,-16(fp)
   2f204:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
   2f208:	0001883a 	nop
   2f20c:	e037883a 	mov	sp,fp
   2f210:	dfc00117 	ldw	ra,4(sp)
   2f214:	df000017 	ldw	fp,0(sp)
   2f218:	dec00204 	addi	sp,sp,8
   2f21c:	f800283a 	ret

0002f220 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
   2f220:	defffb04 	addi	sp,sp,-20
   2f224:	dfc00415 	stw	ra,16(sp)
   2f228:	df000315 	stw	fp,12(sp)
   2f22c:	df000304 	addi	fp,sp,12
   2f230:	e13ffd15 	stw	r4,-12(fp)
   2f234:	e17ffe15 	stw	r5,-8(fp)
   2f238:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
   2f23c:	d1600d04 	addi	r5,gp,-32716
   2f240:	e13ffd17 	ldw	r4,-12(fp)
   2f244:	00305ec0 	call	305ec <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
   2f248:	e0ffff17 	ldw	r3,-4(fp)
   2f24c:	e0bffd17 	ldw	r2,-12(fp)
   2f250:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
   2f254:	e0fffe17 	ldw	r3,-8(fp)
   2f258:	e0bffd17 	ldw	r2,-12(fp)
   2f25c:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
   2f260:	e0bffd17 	ldw	r2,-12(fp)
   2f264:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
   2f268:	e0bffd17 	ldw	r2,-12(fp)
   2f26c:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
   2f270:	e0bffd17 	ldw	r2,-12(fp)
   2f274:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
   2f278:	e13ffd17 	ldw	r4,-12(fp)
   2f27c:	002ef380 	call	2ef38 <altera_avalon_mailbox_identify>
}
   2f280:	0001883a 	nop
   2f284:	e037883a 	mov	sp,fp
   2f288:	dfc00117 	ldw	ra,4(sp)
   2f28c:	df000017 	ldw	fp,0(sp)
   2f290:	dec00204 	addi	sp,sp,8
   2f294:	f800283a 	ret

0002f298 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
   2f298:	defff804 	addi	sp,sp,-32
   2f29c:	dfc00715 	stw	ra,28(sp)
   2f2a0:	df000615 	stw	fp,24(sp)
   2f2a4:	df000604 	addi	fp,sp,24
   2f2a8:	e13ffd15 	stw	r4,-12(fp)
   2f2ac:	e17ffe15 	stw	r5,-8(fp)
   2f2b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
   2f2b4:	d1600d04 	addi	r5,gp,-32716
   2f2b8:	e13ffd17 	ldw	r4,-12(fp)
   2f2bc:	00307500 	call	30750 <alt_find_dev>
   2f2c0:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
   2f2c4:	e0bffb17 	ldw	r2,-20(fp)
   2f2c8:	1000021e 	bne	r2,zero,2f2d4 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
   2f2cc:	0005883a 	mov	r2,zero
   2f2d0:	00006506 	br	2f468 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   2f2d4:	e0bffb17 	ldw	r2,-20(fp)
   2f2d8:	10800a17 	ldw	r2,40(r2)
   2f2dc:	10800304 	addi	r2,r2,12
   2f2e0:	10800037 	ldwio	r2,0(r2)
   2f2e4:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
   2f2e8:	e0bffb17 	ldw	r2,-20(fp)
   2f2ec:	10800f17 	ldw	r2,60(r2)
   2f2f0:	1000081e 	bne	r2,zero,2f314 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   2f2f4:	e0bffb17 	ldw	r2,-20(fp)
   2f2f8:	10800a17 	ldw	r2,40(r2)
   2f2fc:	10800304 	addi	r2,r2,12
   2f300:	1009883a 	mov	r4,r2
   2f304:	e0fffc17 	ldw	r3,-16(fp)
   2f308:	00bfff44 	movi	r2,-3
   2f30c:	1884703a 	and	r2,r3,r2
   2f310:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
   2f314:	e0bffb17 	ldw	r2,-20(fp)
   2f318:	10800f17 	ldw	r2,60(r2)
   2f31c:	10800058 	cmpnei	r2,r2,1
   2f320:	1000081e 	bne	r2,zero,2f344 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   2f324:	e0bffb17 	ldw	r2,-20(fp)
   2f328:	10800a17 	ldw	r2,40(r2)
   2f32c:	10800304 	addi	r2,r2,12
   2f330:	1009883a 	mov	r4,r2
   2f334:	e0fffc17 	ldw	r3,-16(fp)
   2f338:	00bfff84 	movi	r2,-2
   2f33c:	1884703a 	and	r2,r3,r2
   2f340:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
   2f344:	e0bffb17 	ldw	r2,-20(fp)
   2f348:	10800b17 	ldw	r2,44(r2)
   2f34c:	10bfffd8 	cmpnei	r2,r2,-1
   2f350:	1000021e 	bne	r2,zero,2f35c <altera_avalon_mailbox_open+0xc4>
        return dev;
   2f354:	e0bffb17 	ldw	r2,-20(fp)
   2f358:	00004306 	br	2f468 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
   2f35c:	e0bffe17 	ldw	r2,-8(fp)
   2f360:	1000041e 	bne	r2,zero,2f374 <altera_avalon_mailbox_open+0xdc>
   2f364:	e0bfff17 	ldw	r2,-4(fp)
   2f368:	1000021e 	bne	r2,zero,2f374 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
   2f36c:	e0bffb17 	ldw	r2,-20(fp)
   2f370:	00003d06 	br	2f468 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   2f374:	e0bffb17 	ldw	r2,-20(fp)
   2f378:	10800f17 	ldw	r2,60(r2)
   2f37c:	1000021e 	bne	r2,zero,2f388 <altera_avalon_mailbox_open+0xf0>
   2f380:	e0bfff17 	ldw	r2,-4(fp)
   2f384:	1000061e 	bne	r2,zero,2f3a0 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   2f388:	e0bffb17 	ldw	r2,-20(fp)
   2f38c:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   2f390:	10800058 	cmpnei	r2,r2,1
   2f394:	1000041e 	bne	r2,zero,2f3a8 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   2f398:	e0bffe17 	ldw	r2,-8(fp)
   2f39c:	10000226 	beq	r2,zero,2f3a8 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
   2f3a0:	0005883a 	mov	r2,zero
   2f3a4:	00003006 	br	2f468 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
   2f3a8:	e0bffb17 	ldw	r2,-20(fp)
   2f3ac:	e0fffe17 	ldw	r3,-8(fp)
   2f3b0:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
   2f3b4:	e0bffb17 	ldw	r2,-20(fp)
   2f3b8:	e0ffff17 	ldw	r3,-4(fp)
   2f3bc:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
   2f3c0:	e0bffb17 	ldw	r2,-20(fp)
   2f3c4:	10800f17 	ldw	r2,60(r2)
   2f3c8:	10000b1e 	bne	r2,zero,2f3f8 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
   2f3cc:	e0bffb17 	ldw	r2,-20(fp)
   2f3d0:	10c00c17 	ldw	r3,48(r2)
   2f3d4:	e0bffb17 	ldw	r2,-20(fp)
   2f3d8:	10800b17 	ldw	r2,44(r2)
   2f3dc:	d8000015 	stw	zero,0(sp)
   2f3e0:	e1fffb17 	ldw	r7,-20(fp)
   2f3e4:	018000f4 	movhi	r6,3
   2f3e8:	31bc1004 	addi	r6,r6,-4032
   2f3ec:	100b883a 	mov	r5,r2
   2f3f0:	1809883a 	mov	r4,r3
   2f3f4:	00308140 	call	30814 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
   2f3f8:	e0bffb17 	ldw	r2,-20(fp)
   2f3fc:	10800f17 	ldw	r2,60(r2)
   2f400:	10800058 	cmpnei	r2,r2,1
   2f404:	1000171e 	bne	r2,zero,2f464 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
   2f408:	e0bffb17 	ldw	r2,-20(fp)
   2f40c:	10c00c17 	ldw	r3,48(r2)
   2f410:	e0bffb17 	ldw	r2,-20(fp)
   2f414:	10800b17 	ldw	r2,44(r2)
   2f418:	d8000015 	stw	zero,0(sp)
   2f41c:	e1fffb17 	ldw	r7,-20(fp)
   2f420:	018000f4 	movhi	r6,3
   2f424:	31bc5e04 	addi	r6,r6,-3720
   2f428:	100b883a 	mov	r5,r2
   2f42c:	1809883a 	mov	r4,r3
   2f430:	00308140 	call	30814 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   2f434:	e0bffb17 	ldw	r2,-20(fp)
   2f438:	10800a17 	ldw	r2,40(r2)
   2f43c:	10800304 	addi	r2,r2,12
   2f440:	10800037 	ldwio	r2,0(r2)
   2f444:	10800054 	ori	r2,r2,1
   2f448:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2f44c:	e0bffb17 	ldw	r2,-20(fp)
   2f450:	10800a17 	ldw	r2,40(r2)
   2f454:	10800304 	addi	r2,r2,12
   2f458:	1007883a 	mov	r3,r2
   2f45c:	e0bffc17 	ldw	r2,-16(fp)
   2f460:	18800035 	stwio	r2,0(r3)
    }
    return dev;
   2f464:	e0bffb17 	ldw	r2,-20(fp)
}
   2f468:	e037883a 	mov	sp,fp
   2f46c:	dfc00117 	ldw	ra,4(sp)
   2f470:	df000017 	ldw	fp,0(sp)
   2f474:	dec00204 	addi	sp,sp,8
   2f478:	f800283a 	ret

0002f47c <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
   2f47c:	defffb04 	addi	sp,sp,-20
   2f480:	dfc00415 	stw	ra,16(sp)
   2f484:	df000315 	stw	fp,12(sp)
   2f488:	df000304 	addi	fp,sp,12
   2f48c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
   2f490:	e0bfff17 	ldw	r2,-4(fp)
   2f494:	10003926 	beq	r2,zero,2f57c <altera_avalon_mailbox_close+0x100>
   2f498:	e0bfff17 	ldw	r2,-4(fp)
   2f49c:	10800b17 	ldw	r2,44(r2)
   2f4a0:	10bfffe0 	cmpeqi	r2,r2,-1
   2f4a4:	1000351e 	bne	r2,zero,2f57c <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
   2f4a8:	e0bfff17 	ldw	r2,-4(fp)
   2f4ac:	10800f17 	ldw	r2,60(r2)
   2f4b0:	10000e1e 	bne	r2,zero,2f4ec <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   2f4b4:	e0bfff17 	ldw	r2,-4(fp)
   2f4b8:	10800a17 	ldw	r2,40(r2)
   2f4bc:	10800304 	addi	r2,r2,12
   2f4c0:	10800037 	ldwio	r2,0(r2)
   2f4c4:	1007883a 	mov	r3,r2
   2f4c8:	00bfff44 	movi	r2,-3
   2f4cc:	1884703a 	and	r2,r3,r2
   2f4d0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2f4d4:	e0bfff17 	ldw	r2,-4(fp)
   2f4d8:	10800a17 	ldw	r2,40(r2)
   2f4dc:	10800304 	addi	r2,r2,12
   2f4e0:	1007883a 	mov	r3,r2
   2f4e4:	e0bffe17 	ldw	r2,-8(fp)
   2f4e8:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
   2f4ec:	e0bfff17 	ldw	r2,-4(fp)
   2f4f0:	10800f17 	ldw	r2,60(r2)
   2f4f4:	10800058 	cmpnei	r2,r2,1
   2f4f8:	10000e1e 	bne	r2,zero,2f534 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   2f4fc:	e0bfff17 	ldw	r2,-4(fp)
   2f500:	10800a17 	ldw	r2,40(r2)
   2f504:	10800304 	addi	r2,r2,12
   2f508:	10800037 	ldwio	r2,0(r2)
   2f50c:	1007883a 	mov	r3,r2
   2f510:	00bfff84 	movi	r2,-2
   2f514:	1884703a 	and	r2,r3,r2
   2f518:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2f51c:	e0bfff17 	ldw	r2,-4(fp)
   2f520:	10800a17 	ldw	r2,40(r2)
   2f524:	10800304 	addi	r2,r2,12
   2f528:	1007883a 	mov	r3,r2
   2f52c:	e0bffe17 	ldw	r2,-8(fp)
   2f530:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
   2f534:	e0bfff17 	ldw	r2,-4(fp)
   2f538:	10800b17 	ldw	r2,44(r2)
   2f53c:	10bfffe0 	cmpeqi	r2,r2,-1
   2f540:	10000a1e 	bne	r2,zero,2f56c <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
   2f544:	e0bfff17 	ldw	r2,-4(fp)
   2f548:	10c00c17 	ldw	r3,48(r2)
   2f54c:	e0bfff17 	ldw	r2,-4(fp)
   2f550:	10800b17 	ldw	r2,44(r2)
   2f554:	d8000015 	stw	zero,0(sp)
   2f558:	e1ffff17 	ldw	r7,-4(fp)
   2f55c:	000d883a 	mov	r6,zero
   2f560:	100b883a 	mov	r5,r2
   2f564:	1809883a 	mov	r4,r3
   2f568:	00308140 	call	30814 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
   2f56c:	e0bfff17 	ldw	r2,-4(fp)
   2f570:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
   2f574:	e0bfff17 	ldw	r2,-4(fp)
   2f578:	10000e15 	stw	zero,56(r2)
    }
}
   2f57c:	0001883a 	nop
   2f580:	e037883a 	mov	sp,fp
   2f584:	dfc00117 	ldw	ra,4(sp)
   2f588:	df000017 	ldw	fp,0(sp)
   2f58c:	dec00204 	addi	sp,sp,8
   2f590:	f800283a 	ret

0002f594 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
   2f594:	defffd04 	addi	sp,sp,-12
   2f598:	df000215 	stw	fp,8(sp)
   2f59c:	df000204 	addi	fp,sp,8
   2f5a0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
   2f5a4:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
   2f5a8:	e0bfff17 	ldw	r2,-4(fp)
   2f5ac:	10800a17 	ldw	r2,40(r2)
   2f5b0:	10800204 	addi	r2,r2,8
   2f5b4:	10800037 	ldwio	r2,0(r2)
   2f5b8:	108000cc 	andi	r2,r2,3
   2f5bc:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
   2f5c0:	e0bfff17 	ldw	r2,-4(fp)
   2f5c4:	10800f17 	ldw	r2,60(r2)
   2f5c8:	1000041e 	bne	r2,zero,2f5dc <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   2f5cc:	e0bffe17 	ldw	r2,-8(fp)
   2f5d0:	1080008c 	andi	r2,r2,2
   2f5d4:	1004d07a 	srli	r2,r2,1
   2f5d8:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
   2f5dc:	e0bfff17 	ldw	r2,-4(fp)
   2f5e0:	10800f17 	ldw	r2,60(r2)
   2f5e4:	10800058 	cmpnei	r2,r2,1
   2f5e8:	1000031e 	bne	r2,zero,2f5f8 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
   2f5ec:	e0bffe17 	ldw	r2,-8(fp)
   2f5f0:	1080004c 	andi	r2,r2,1
   2f5f4:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
   2f5f8:	e0bffe17 	ldw	r2,-8(fp)
}
   2f5fc:	e037883a 	mov	sp,fp
   2f600:	df000017 	ldw	fp,0(sp)
   2f604:	dec00104 	addi	sp,sp,4
   2f608:	f800283a 	ret

0002f60c <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
   2f60c:	defff704 	addi	sp,sp,-36
   2f610:	dfc00815 	stw	ra,32(sp)
   2f614:	df000715 	stw	fp,28(sp)
   2f618:	df000704 	addi	fp,sp,28
   2f61c:	e13ffc15 	stw	r4,-16(fp)
   2f620:	e17ffd15 	stw	r5,-12(fp)
   2f624:	e1bffe15 	stw	r6,-8(fp)
   2f628:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
   2f62c:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2f630:	e0bffc17 	ldw	r2,-16(fp)
   2f634:	10801103 	ldbu	r2,68(r2)
   2f638:	10803fcc 	andi	r2,r2,255
   2f63c:	1000061e 	bne	r2,zero,2f658 <altera_avalon_mailbox_send+0x4c>
   2f640:	e0bffc17 	ldw	r2,-16(fp)
   2f644:	10800a17 	ldw	r2,40(r2)
   2f648:	10800204 	addi	r2,r2,8
   2f64c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
   2f650:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2f654:	10000226 	beq	r2,zero,2f660 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
   2f658:	00bfffc4 	movi	r2,-1
   2f65c:	00003a06 	br	2f748 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
   2f660:	e0bffc17 	ldw	r2,-16(fp)
   2f664:	e0fffd17 	ldw	r3,-12(fp)
   2f668:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
   2f66c:	e0bffc17 	ldw	r2,-16(fp)
   2f670:	00c00044 	movi	r3,1
   2f674:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
   2f678:	e0bffc17 	ldw	r2,-16(fp)
   2f67c:	10800b17 	ldw	r2,44(r2)
   2f680:	10bfffe0 	cmpeqi	r2,r2,-1
   2f684:	1000031e 	bne	r2,zero,2f694 <altera_avalon_mailbox_send+0x88>
   2f688:	e0bfff17 	ldw	r2,-4(fp)
   2f68c:	10800058 	cmpnei	r2,r2,1
   2f690:	1000201e 	bne	r2,zero,2f714 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout == 0)
   2f694:	e0bffe17 	ldw	r2,-8(fp)
   2f698:	1000061e 	bne	r2,zero,2f6b4 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   2f69c:	e13ffc17 	ldw	r4,-16(fp)
   2f6a0:	002f5940 	call	2f594 <altera_avalon_mailbox_status>
   2f6a4:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
   2f6a8:	e0bffb17 	ldw	r2,-20(fp)
   2f6ac:	103ffb1e 	bne	r2,zero,2f69c <__alt_data_end+0xf402f69c>
   2f6b0:	00000e06 	br	2f6ec <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   2f6b4:	e13ffc17 	ldw	r4,-16(fp)
   2f6b8:	002f5940 	call	2f594 <altera_avalon_mailbox_status>
   2f6bc:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
   2f6c0:	e0bffe17 	ldw	r2,-8(fp)
   2f6c4:	10bfffc4 	addi	r2,r2,-1
   2f6c8:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
   2f6cc:	e0bffb17 	ldw	r2,-20(fp)
   2f6d0:	10000226 	beq	r2,zero,2f6dc <altera_avalon_mailbox_send+0xd0>
   2f6d4:	e0bffe17 	ldw	r2,-8(fp)
   2f6d8:	103ff61e 	bne	r2,zero,2f6b4 <__alt_data_end+0xf402f6b4>
            if (timeout == 0)
   2f6dc:	e0bffe17 	ldw	r2,-8(fp)
   2f6e0:	1000021e 	bne	r2,zero,2f6ec <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
   2f6e4:	00bff084 	movi	r2,-62
   2f6e8:	00001706 	br	2f748 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
   2f6ec:	e17ffd17 	ldw	r5,-12(fp)
   2f6f0:	e13ffc17 	ldw	r4,-16(fp)
   2f6f4:	002efc80 	call	2efc8 <altera_avalon_mailbox_post>
   2f6f8:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   2f6fc:	e0bffc17 	ldw	r2,-16(fp)
   2f700:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
   2f704:	e0bffc17 	ldw	r2,-16(fp)
   2f708:	10001105 	stb	zero,68(r2)
        return status;
   2f70c:	e0bff917 	ldw	r2,-28(fp)
   2f710:	00000d06 	br	2f748 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   2f714:	e0bffc17 	ldw	r2,-16(fp)
   2f718:	10800a17 	ldw	r2,40(r2)
   2f71c:	10800304 	addi	r2,r2,12
   2f720:	10800037 	ldwio	r2,0(r2)
   2f724:	10800094 	ori	r2,r2,2
   2f728:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2f72c:	e0bffc17 	ldw	r2,-16(fp)
   2f730:	10800a17 	ldw	r2,40(r2)
   2f734:	10800304 	addi	r2,r2,12
   2f738:	1007883a 	mov	r3,r2
   2f73c:	e0bffa17 	ldw	r2,-24(fp)
   2f740:	18800035 	stwio	r2,0(r3)
    }
  return 0;
   2f744:	0005883a 	mov	r2,zero
}
   2f748:	e037883a 	mov	sp,fp
   2f74c:	dfc00117 	ldw	ra,4(sp)
   2f750:	df000017 	ldw	fp,0(sp)
   2f754:	dec00204 	addi	sp,sp,8
   2f758:	f800283a 	ret

0002f75c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
   2f75c:	defff904 	addi	sp,sp,-28
   2f760:	dfc00615 	stw	ra,24(sp)
   2f764:	df000515 	stw	fp,20(sp)
   2f768:	df000504 	addi	fp,sp,20
   2f76c:	e13ffd15 	stw	r4,-12(fp)
   2f770:	e17ffe15 	stw	r5,-8(fp)
   2f774:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
   2f778:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
   2f77c:	e0bffd17 	ldw	r2,-12(fp)
   2f780:	10003a26 	beq	r2,zero,2f86c <altera_avalon_mailbox_retrieve_poll+0x110>
   2f784:	e0bffe17 	ldw	r2,-8(fp)
   2f788:	10003826 	beq	r2,zero,2f86c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   2f78c:	e0bffd17 	ldw	r2,-12(fp)
   2f790:	10800a17 	ldw	r2,40(r2)
   2f794:	10800304 	addi	r2,r2,12
   2f798:	10800037 	ldwio	r2,0(r2)
   2f79c:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
   2f7a0:	e0bffd17 	ldw	r2,-12(fp)
   2f7a4:	10800a17 	ldw	r2,40(r2)
   2f7a8:	10800304 	addi	r2,r2,12
   2f7ac:	1009883a 	mov	r4,r2
   2f7b0:	e0fffc17 	ldw	r3,-16(fp)
   2f7b4:	00bfff84 	movi	r2,-2
   2f7b8:	1884703a 	and	r2,r3,r2
   2f7bc:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
   2f7c0:	e0bfff17 	ldw	r2,-4(fp)
   2f7c4:	1000061e 	bne	r2,zero,2f7e0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
   2f7c8:	e13ffd17 	ldw	r4,-12(fp)
   2f7cc:	002f5940 	call	2f594 <altera_avalon_mailbox_status>
   2f7d0:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
   2f7d4:	e0bffb17 	ldw	r2,-20(fp)
   2f7d8:	103ffb26 	beq	r2,zero,2f7c8 <__alt_data_end+0xf402f7c8>
   2f7dc:	00000a06 	br	2f808 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
   2f7e0:	e13ffd17 	ldw	r4,-12(fp)
   2f7e4:	002f5940 	call	2f594 <altera_avalon_mailbox_status>
   2f7e8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
   2f7ec:	e0bfff17 	ldw	r2,-4(fp)
   2f7f0:	10bfffc4 	addi	r2,r2,-1
   2f7f4:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
   2f7f8:	e0bffb17 	ldw	r2,-20(fp)
   2f7fc:	1000021e 	bne	r2,zero,2f808 <altera_avalon_mailbox_retrieve_poll+0xac>
   2f800:	e0bfff17 	ldw	r2,-4(fp)
   2f804:	103ff61e 	bne	r2,zero,2f7e0 <__alt_data_end+0xf402f7e0>
        }

        /* if timeout, status remain 0 */
        if (status)
   2f808:	e0bffb17 	ldw	r2,-20(fp)
   2f80c:	10000d26 	beq	r2,zero,2f844 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   2f810:	e0bffe17 	ldw	r2,-8(fp)
   2f814:	10800104 	addi	r2,r2,4
   2f818:	e0fffd17 	ldw	r3,-12(fp)
   2f81c:	18c00a17 	ldw	r3,40(r3)
   2f820:	18c00104 	addi	r3,r3,4
   2f824:	18c00037 	ldwio	r3,0(r3)
   2f828:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   2f82c:	e0bffd17 	ldw	r2,-12(fp)
   2f830:	10800a17 	ldw	r2,40(r2)
   2f834:	10800037 	ldwio	r2,0(r2)
   2f838:	1007883a 	mov	r3,r2
   2f83c:	e0bffe17 	ldw	r2,-8(fp)
   2f840:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2f844:	e0bffd17 	ldw	r2,-12(fp)
   2f848:	10800a17 	ldw	r2,40(r2)
   2f84c:	10800304 	addi	r2,r2,12
   2f850:	1007883a 	mov	r3,r2
   2f854:	e0bffc17 	ldw	r2,-16(fp)
   2f858:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
   2f85c:	e0bffb17 	ldw	r2,-20(fp)
   2f860:	10000226 	beq	r2,zero,2f86c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
   2f864:	0005883a 	mov	r2,zero
   2f868:	00000606 	br	2f884 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
   2f86c:	e0bffe17 	ldw	r2,-8(fp)
   2f870:	10800104 	addi	r2,r2,4
   2f874:	10000015 	stw	zero,0(r2)
      message[0] = 0;
   2f878:	e0bffe17 	ldw	r2,-8(fp)
   2f87c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
   2f880:	00bffa84 	movi	r2,-22
}
   2f884:	e037883a 	mov	sp,fp
   2f888:	dfc00117 	ldw	ra,4(sp)
   2f88c:	df000017 	ldw	fp,0(sp)
   2f890:	dec00204 	addi	sp,sp,8
   2f894:	f800283a 	ret

0002f898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f898:	defffe04 	addi	sp,sp,-8
   2f89c:	dfc00115 	stw	ra,4(sp)
   2f8a0:	df000015 	stw	fp,0(sp)
   2f8a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f8a8:	d0a00b17 	ldw	r2,-32724(gp)
   2f8ac:	10000326 	beq	r2,zero,2f8bc <alt_get_errno+0x24>
   2f8b0:	d0a00b17 	ldw	r2,-32724(gp)
   2f8b4:	103ee83a 	callr	r2
   2f8b8:	00000106 	br	2f8c0 <alt_get_errno+0x28>
   2f8bc:	d0a73504 	addi	r2,gp,-25388
}
   2f8c0:	e037883a 	mov	sp,fp
   2f8c4:	dfc00117 	ldw	ra,4(sp)
   2f8c8:	df000017 	ldw	fp,0(sp)
   2f8cc:	dec00204 	addi	sp,sp,8
   2f8d0:	f800283a 	ret

0002f8d4 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   2f8d4:	defff904 	addi	sp,sp,-28
   2f8d8:	df000615 	stw	fp,24(sp)
   2f8dc:	df000604 	addi	fp,sp,24
   2f8e0:	e13ffe15 	stw	r4,-8(fp)
   2f8e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
   2f8e8:	00bfffc4 	movi	r2,-1
   2f8ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
   2f8f0:	0005317a 	rdctl	r2,cpuid
   2f8f4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   2f8f8:	e0bffb17 	ldw	r2,-20(fp)
   2f8fc:	1006943a 	slli	r3,r2,16
   2f900:	e0bfff17 	ldw	r2,-4(fp)
   2f904:	1884b03a 	or	r2,r3,r2
   2f908:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   2f90c:	e0bffe17 	ldw	r2,-8(fp)
   2f910:	10800317 	ldw	r2,12(r2)
   2f914:	e0fffc17 	ldw	r3,-16(fp)
   2f918:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   2f91c:	e0bffe17 	ldw	r2,-8(fp)
   2f920:	10800317 	ldw	r2,12(r2)
   2f924:	10800037 	ldwio	r2,0(r2)
   2f928:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
   2f92c:	e0fffd17 	ldw	r3,-12(fp)
   2f930:	e0bffc17 	ldw	r2,-16(fp)
   2f934:	1880011e 	bne	r3,r2,2f93c <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
   2f938:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
   2f93c:	e0bffa17 	ldw	r2,-24(fp)
}
   2f940:	e037883a 	mov	sp,fp
   2f944:	df000017 	ldw	fp,0(sp)
   2f948:	dec00104 	addi	sp,sp,4
   2f94c:	f800283a 	ret

0002f950 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   2f950:	defffc04 	addi	sp,sp,-16
   2f954:	dfc00315 	stw	ra,12(sp)
   2f958:	df000215 	stw	fp,8(sp)
   2f95c:	df000204 	addi	fp,sp,8
   2f960:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   2f964:	d1600f04 	addi	r5,gp,-32708
   2f968:	e13fff17 	ldw	r4,-4(fp)
   2f96c:	00307500 	call	30750 <alt_find_dev>
   2f970:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
   2f974:	e0bffe17 	ldw	r2,-8(fp)
   2f978:	1000041e 	bne	r2,zero,2f98c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   2f97c:	002f8980 	call	2f898 <alt_get_errno>
   2f980:	1007883a 	mov	r3,r2
   2f984:	008004c4 	movi	r2,19
   2f988:	18800015 	stw	r2,0(r3)
  }

  return dev;
   2f98c:	e0bffe17 	ldw	r2,-8(fp)
}
   2f990:	e037883a 	mov	sp,fp
   2f994:	dfc00117 	ldw	ra,4(sp)
   2f998:	df000017 	ldw	fp,0(sp)
   2f99c:	dec00204 	addi	sp,sp,8
   2f9a0:	f800283a 	ret

0002f9a4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
   2f9a4:	defffe04 	addi	sp,sp,-8
   2f9a8:	df000115 	stw	fp,4(sp)
   2f9ac:	df000104 	addi	fp,sp,4
   2f9b0:	e13fff15 	stw	r4,-4(fp)
  return;
   2f9b4:	0001883a 	nop
}
   2f9b8:	e037883a 	mov	sp,fp
   2f9bc:	df000017 	ldw	fp,0(sp)
   2f9c0:	dec00104 	addi	sp,sp,4
   2f9c4:	f800283a 	ret

0002f9c8 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   2f9c8:	defffc04 	addi	sp,sp,-16
   2f9cc:	dfc00315 	stw	ra,12(sp)
   2f9d0:	df000215 	stw	fp,8(sp)
   2f9d4:	df000204 	addi	fp,sp,8
   2f9d8:	e13ffe15 	stw	r4,-8(fp)
   2f9dc:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   2f9e0:	0001883a 	nop
   2f9e4:	e17fff17 	ldw	r5,-4(fp)
   2f9e8:	e13ffe17 	ldw	r4,-8(fp)
   2f9ec:	002f8d40 	call	2f8d4 <alt_mutex_trylock>
   2f9f0:	103ffc1e 	bne	r2,zero,2f9e4 <__alt_data_end+0xf402f9e4>
}
   2f9f4:	0001883a 	nop
   2f9f8:	e037883a 	mov	sp,fp
   2f9fc:	dfc00117 	ldw	ra,4(sp)
   2fa00:	df000017 	ldw	fp,0(sp)
   2fa04:	dec00204 	addi	sp,sp,8
   2fa08:	f800283a 	ret

0002fa0c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   2fa0c:	defffa04 	addi	sp,sp,-24
   2fa10:	dfc00515 	stw	ra,20(sp)
   2fa14:	df000415 	stw	fp,16(sp)
   2fa18:	df000404 	addi	fp,sp,16
   2fa1c:	e13ffd15 	stw	r4,-12(fp)
   2fa20:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   2fa24:	e17ffe17 	ldw	r5,-8(fp)
   2fa28:	e13ffd17 	ldw	r4,-12(fp)
   2fa2c:	002f8d40 	call	2f8d4 <alt_mutex_trylock>
   2fa30:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
   2fa34:	e0bffc17 	ldw	r2,-16(fp)
}
   2fa38:	e037883a 	mov	sp,fp
   2fa3c:	dfc00117 	ldw	ra,4(sp)
   2fa40:	df000017 	ldw	fp,0(sp)
   2fa44:	dec00204 	addi	sp,sp,8
   2fa48:	f800283a 	ret

0002fa4c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
   2fa4c:	defffd04 	addi	sp,sp,-12
   2fa50:	df000215 	stw	fp,8(sp)
   2fa54:	df000204 	addi	fp,sp,8
   2fa58:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   2fa5c:	0005317a 	rdctl	r2,cpuid
   2fa60:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   2fa64:	e0bfff17 	ldw	r2,-4(fp)
   2fa68:	10800317 	ldw	r2,12(r2)
   2fa6c:	10800104 	addi	r2,r2,4
   2fa70:	00c00044 	movi	r3,1
   2fa74:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   2fa78:	e0bfff17 	ldw	r2,-4(fp)
   2fa7c:	10800317 	ldw	r2,12(r2)
   2fa80:	e0fffe17 	ldw	r3,-8(fp)
   2fa84:	1806943a 	slli	r3,r3,16
   2fa88:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   2fa8c:	0001883a 	nop
   2fa90:	e037883a 	mov	sp,fp
   2fa94:	df000017 	ldw	fp,0(sp)
   2fa98:	dec00104 	addi	sp,sp,4
   2fa9c:	f800283a 	ret

0002faa0 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
   2faa0:	defff904 	addi	sp,sp,-28
   2faa4:	df000615 	stw	fp,24(sp)
   2faa8:	df000604 	addi	fp,sp,24
   2faac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
   2fab0:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
   2fab4:	0005317a 	rdctl	r2,cpuid
   2fab8:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   2fabc:	e0bfff17 	ldw	r2,-4(fp)
   2fac0:	10800317 	ldw	r2,12(r2)
   2fac4:	10800037 	ldwio	r2,0(r2)
   2fac8:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
   2facc:	e0bffc17 	ldw	r2,-16(fp)
   2fad0:	1004d43a 	srli	r2,r2,16
   2fad4:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   2fad8:	e0fffd17 	ldw	r3,-12(fp)
   2fadc:	e0bffb17 	ldw	r2,-20(fp)
   2fae0:	1880071e 	bne	r3,r2,2fb00 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
   2fae4:	e0bffc17 	ldw	r2,-16(fp)
   2fae8:	10bfffcc 	andi	r2,r2,65535
   2faec:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
   2faf0:	e0bffe17 	ldw	r2,-8(fp)
   2faf4:	10000226 	beq	r2,zero,2fb00 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
   2faf8:	00800044 	movi	r2,1
   2fafc:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
   2fb00:	e0bffa17 	ldw	r2,-24(fp)
}
   2fb04:	e037883a 	mov	sp,fp
   2fb08:	df000017 	ldw	fp,0(sp)
   2fb0c:	dec00104 	addi	sp,sp,4
   2fb10:	f800283a 	ret

0002fb14 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
   2fb14:	defffc04 	addi	sp,sp,-16
   2fb18:	df000315 	stw	fp,12(sp)
   2fb1c:	df000304 	addi	fp,sp,12
   2fb20:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
   2fb24:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   2fb28:	e0bfff17 	ldw	r2,-4(fp)
   2fb2c:	10800317 	ldw	r2,12(r2)
   2fb30:	10800104 	addi	r2,r2,4
   2fb34:	10800037 	ldwio	r2,0(r2)
   2fb38:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
   2fb3c:	e0bffe17 	ldw	r2,-8(fp)
   2fb40:	1080004c 	andi	r2,r2,1
   2fb44:	10000226 	beq	r2,zero,2fb50 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
   2fb48:	00800044 	movi	r2,1
   2fb4c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
   2fb50:	e0bffd17 	ldw	r2,-12(fp)
}
   2fb54:	e037883a 	mov	sp,fp
   2fb58:	df000017 	ldw	fp,0(sp)
   2fb5c:	dec00104 	addi	sp,sp,4
   2fb60:	f800283a 	ret

0002fb64 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2fb64:	defffa04 	addi	sp,sp,-24
   2fb68:	dfc00515 	stw	ra,20(sp)
   2fb6c:	df000415 	stw	fp,16(sp)
   2fb70:	df000404 	addi	fp,sp,16
   2fb74:	e13ffd15 	stw	r4,-12(fp)
   2fb78:	e17ffe15 	stw	r5,-8(fp)
   2fb7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2fb80:	e0bffd17 	ldw	r2,-12(fp)
   2fb84:	10800017 	ldw	r2,0(r2)
   2fb88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2fb8c:	e0bffc17 	ldw	r2,-16(fp)
   2fb90:	10c00a04 	addi	r3,r2,40
   2fb94:	e0bffd17 	ldw	r2,-12(fp)
   2fb98:	10800217 	ldw	r2,8(r2)
   2fb9c:	100f883a 	mov	r7,r2
   2fba0:	e1bfff17 	ldw	r6,-4(fp)
   2fba4:	e17ffe17 	ldw	r5,-8(fp)
   2fba8:	1809883a 	mov	r4,r3
   2fbac:	00300780 	call	30078 <altera_avalon_uart_read>
      fd->fd_flags);
}
   2fbb0:	e037883a 	mov	sp,fp
   2fbb4:	dfc00117 	ldw	ra,4(sp)
   2fbb8:	df000017 	ldw	fp,0(sp)
   2fbbc:	dec00204 	addi	sp,sp,8
   2fbc0:	f800283a 	ret

0002fbc4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2fbc4:	defffa04 	addi	sp,sp,-24
   2fbc8:	dfc00515 	stw	ra,20(sp)
   2fbcc:	df000415 	stw	fp,16(sp)
   2fbd0:	df000404 	addi	fp,sp,16
   2fbd4:	e13ffd15 	stw	r4,-12(fp)
   2fbd8:	e17ffe15 	stw	r5,-8(fp)
   2fbdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2fbe0:	e0bffd17 	ldw	r2,-12(fp)
   2fbe4:	10800017 	ldw	r2,0(r2)
   2fbe8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2fbec:	e0bffc17 	ldw	r2,-16(fp)
   2fbf0:	10c00a04 	addi	r3,r2,40
   2fbf4:	e0bffd17 	ldw	r2,-12(fp)
   2fbf8:	10800217 	ldw	r2,8(r2)
   2fbfc:	100f883a 	mov	r7,r2
   2fc00:	e1bfff17 	ldw	r6,-4(fp)
   2fc04:	e17ffe17 	ldw	r5,-8(fp)
   2fc08:	1809883a 	mov	r4,r3
   2fc0c:	00302900 	call	30290 <altera_avalon_uart_write>
      fd->fd_flags);
}
   2fc10:	e037883a 	mov	sp,fp
   2fc14:	dfc00117 	ldw	ra,4(sp)
   2fc18:	df000017 	ldw	fp,0(sp)
   2fc1c:	dec00204 	addi	sp,sp,8
   2fc20:	f800283a 	ret

0002fc24 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2fc24:	defffc04 	addi	sp,sp,-16
   2fc28:	dfc00315 	stw	ra,12(sp)
   2fc2c:	df000215 	stw	fp,8(sp)
   2fc30:	df000204 	addi	fp,sp,8
   2fc34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2fc38:	e0bfff17 	ldw	r2,-4(fp)
   2fc3c:	10800017 	ldw	r2,0(r2)
   2fc40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2fc44:	e0bffe17 	ldw	r2,-8(fp)
   2fc48:	10c00a04 	addi	r3,r2,40
   2fc4c:	e0bfff17 	ldw	r2,-4(fp)
   2fc50:	10800217 	ldw	r2,8(r2)
   2fc54:	100b883a 	mov	r5,r2
   2fc58:	1809883a 	mov	r4,r3
   2fc5c:	002ffe80 	call	2ffe8 <altera_avalon_uart_close>
}
   2fc60:	e037883a 	mov	sp,fp
   2fc64:	dfc00117 	ldw	ra,4(sp)
   2fc68:	df000017 	ldw	fp,0(sp)
   2fc6c:	dec00204 	addi	sp,sp,8
   2fc70:	f800283a 	ret

0002fc74 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2fc74:	defff804 	addi	sp,sp,-32
   2fc78:	dfc00715 	stw	ra,28(sp)
   2fc7c:	df000615 	stw	fp,24(sp)
   2fc80:	df000604 	addi	fp,sp,24
   2fc84:	e13ffd15 	stw	r4,-12(fp)
   2fc88:	e17ffe15 	stw	r5,-8(fp)
   2fc8c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   2fc90:	e0bffd17 	ldw	r2,-12(fp)
   2fc94:	10800017 	ldw	r2,0(r2)
   2fc98:	e0bffb15 	stw	r2,-20(fp)
   2fc9c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2fca0:	1000041e 	bne	r2,zero,2fcb4 <altera_avalon_uart_init+0x40>
   2fca4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2fca8:	1000021e 	bne	r2,zero,2fcb4 <altera_avalon_uart_init+0x40>
   2fcac:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2fcb0:	10000226 	beq	r2,zero,2fcbc <altera_avalon_uart_init+0x48>
   2fcb4:	00800044 	movi	r2,1
   2fcb8:	00000106 	br	2fcc0 <altera_avalon_uart_init+0x4c>
   2fcbc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2fcc0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2fcc4:	e0bffc17 	ldw	r2,-16(fp)
   2fcc8:	10000f1e 	bne	r2,zero,2fd08 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2fccc:	e0bffd17 	ldw	r2,-12(fp)
   2fcd0:	00c32004 	movi	r3,3200
   2fcd4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2fcd8:	e0bffb17 	ldw	r2,-20(fp)
   2fcdc:	10800304 	addi	r2,r2,12
   2fce0:	e0fffd17 	ldw	r3,-12(fp)
   2fce4:	18c00117 	ldw	r3,4(r3)
   2fce8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2fcec:	d8000015 	stw	zero,0(sp)
   2fcf0:	e1fffd17 	ldw	r7,-12(fp)
   2fcf4:	018000f4 	movhi	r6,3
   2fcf8:	31bf4804 	addi	r6,r6,-736
   2fcfc:	e17fff17 	ldw	r5,-4(fp)
   2fd00:	e13ffe17 	ldw	r4,-8(fp)
   2fd04:	00308140 	call	30814 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2fd08:	0001883a 	nop
   2fd0c:	e037883a 	mov	sp,fp
   2fd10:	dfc00117 	ldw	ra,4(sp)
   2fd14:	df000017 	ldw	fp,0(sp)
   2fd18:	dec00204 	addi	sp,sp,8
   2fd1c:	f800283a 	ret

0002fd20 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2fd20:	defffa04 	addi	sp,sp,-24
   2fd24:	dfc00515 	stw	ra,20(sp)
   2fd28:	df000415 	stw	fp,16(sp)
   2fd2c:	df000404 	addi	fp,sp,16
   2fd30:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2fd34:	e0bfff17 	ldw	r2,-4(fp)
   2fd38:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2fd3c:	e0bffc17 	ldw	r2,-16(fp)
   2fd40:	10800017 	ldw	r2,0(r2)
   2fd44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2fd48:	e0bffd17 	ldw	r2,-12(fp)
   2fd4c:	10800204 	addi	r2,r2,8
   2fd50:	10800037 	ldwio	r2,0(r2)
   2fd54:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2fd58:	e0bffd17 	ldw	r2,-12(fp)
   2fd5c:	10800204 	addi	r2,r2,8
   2fd60:	0007883a 	mov	r3,zero
   2fd64:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2fd68:	e0bffd17 	ldw	r2,-12(fp)
   2fd6c:	10800204 	addi	r2,r2,8
   2fd70:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2fd74:	e0bffe17 	ldw	r2,-8(fp)
   2fd78:	1080200c 	andi	r2,r2,128
   2fd7c:	10000326 	beq	r2,zero,2fd8c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2fd80:	e17ffe17 	ldw	r5,-8(fp)
   2fd84:	e13ffc17 	ldw	r4,-16(fp)
   2fd88:	002fdbc0 	call	2fdbc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2fd8c:	e0bffe17 	ldw	r2,-8(fp)
   2fd90:	1081100c 	andi	r2,r2,1088
   2fd94:	10000326 	beq	r2,zero,2fda4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2fd98:	e17ffe17 	ldw	r5,-8(fp)
   2fd9c:	e13ffc17 	ldw	r4,-16(fp)
   2fda0:	002fea00 	call	2fea0 <altera_avalon_uart_txirq>
  }
  

}
   2fda4:	0001883a 	nop
   2fda8:	e037883a 	mov	sp,fp
   2fdac:	dfc00117 	ldw	ra,4(sp)
   2fdb0:	df000017 	ldw	fp,0(sp)
   2fdb4:	dec00204 	addi	sp,sp,8
   2fdb8:	f800283a 	ret

0002fdbc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2fdbc:	defffc04 	addi	sp,sp,-16
   2fdc0:	df000315 	stw	fp,12(sp)
   2fdc4:	df000304 	addi	fp,sp,12
   2fdc8:	e13ffe15 	stw	r4,-8(fp)
   2fdcc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2fdd0:	e0bfff17 	ldw	r2,-4(fp)
   2fdd4:	108000cc 	andi	r2,r2,3
   2fdd8:	10002c1e 	bne	r2,zero,2fe8c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2fddc:	e0bffe17 	ldw	r2,-8(fp)
   2fde0:	10800317 	ldw	r2,12(r2)
   2fde4:	e0bffe17 	ldw	r2,-8(fp)
   2fde8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2fdec:	e0bffe17 	ldw	r2,-8(fp)
   2fdf0:	10800317 	ldw	r2,12(r2)
   2fdf4:	10800044 	addi	r2,r2,1
   2fdf8:	10800fcc 	andi	r2,r2,63
   2fdfc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2fe00:	e0bffe17 	ldw	r2,-8(fp)
   2fe04:	10800317 	ldw	r2,12(r2)
   2fe08:	e0fffe17 	ldw	r3,-8(fp)
   2fe0c:	18c00017 	ldw	r3,0(r3)
   2fe10:	18c00037 	ldwio	r3,0(r3)
   2fe14:	1809883a 	mov	r4,r3
   2fe18:	e0fffe17 	ldw	r3,-8(fp)
   2fe1c:	1885883a 	add	r2,r3,r2
   2fe20:	10800704 	addi	r2,r2,28
   2fe24:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   2fe28:	e0bffe17 	ldw	r2,-8(fp)
   2fe2c:	e0fffd17 	ldw	r3,-12(fp)
   2fe30:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2fe34:	e0bffe17 	ldw	r2,-8(fp)
   2fe38:	10800317 	ldw	r2,12(r2)
   2fe3c:	10800044 	addi	r2,r2,1
   2fe40:	10800fcc 	andi	r2,r2,63
   2fe44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2fe48:	e0bffe17 	ldw	r2,-8(fp)
   2fe4c:	10c00217 	ldw	r3,8(r2)
   2fe50:	e0bffd17 	ldw	r2,-12(fp)
   2fe54:	18800e1e 	bne	r3,r2,2fe90 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2fe58:	e0bffe17 	ldw	r2,-8(fp)
   2fe5c:	10c00117 	ldw	r3,4(r2)
   2fe60:	00bfdfc4 	movi	r2,-129
   2fe64:	1886703a 	and	r3,r3,r2
   2fe68:	e0bffe17 	ldw	r2,-8(fp)
   2fe6c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2fe70:	e0bffe17 	ldw	r2,-8(fp)
   2fe74:	10800017 	ldw	r2,0(r2)
   2fe78:	10800304 	addi	r2,r2,12
   2fe7c:	e0fffe17 	ldw	r3,-8(fp)
   2fe80:	18c00117 	ldw	r3,4(r3)
   2fe84:	10c00035 	stwio	r3,0(r2)
   2fe88:	00000106 	br	2fe90 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   2fe8c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   2fe90:	e037883a 	mov	sp,fp
   2fe94:	df000017 	ldw	fp,0(sp)
   2fe98:	dec00104 	addi	sp,sp,4
   2fe9c:	f800283a 	ret

0002fea0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2fea0:	defffb04 	addi	sp,sp,-20
   2fea4:	df000415 	stw	fp,16(sp)
   2fea8:	df000404 	addi	fp,sp,16
   2feac:	e13ffc15 	stw	r4,-16(fp)
   2feb0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2feb4:	e0bffc17 	ldw	r2,-16(fp)
   2feb8:	10c00417 	ldw	r3,16(r2)
   2febc:	e0bffc17 	ldw	r2,-16(fp)
   2fec0:	10800517 	ldw	r2,20(r2)
   2fec4:	18803226 	beq	r3,r2,2ff90 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2fec8:	e0bffc17 	ldw	r2,-16(fp)
   2fecc:	10800617 	ldw	r2,24(r2)
   2fed0:	1080008c 	andi	r2,r2,2
   2fed4:	10000326 	beq	r2,zero,2fee4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2fed8:	e0bffd17 	ldw	r2,-12(fp)
   2fedc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2fee0:	10001d26 	beq	r2,zero,2ff58 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2fee4:	e0bffc17 	ldw	r2,-16(fp)
   2fee8:	10800417 	ldw	r2,16(r2)
   2feec:	e0bffc17 	ldw	r2,-16(fp)
   2fef0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2fef4:	e0bffc17 	ldw	r2,-16(fp)
   2fef8:	10800017 	ldw	r2,0(r2)
   2fefc:	10800104 	addi	r2,r2,4
   2ff00:	e0fffc17 	ldw	r3,-16(fp)
   2ff04:	18c00417 	ldw	r3,16(r3)
   2ff08:	e13ffc17 	ldw	r4,-16(fp)
   2ff0c:	20c7883a 	add	r3,r4,r3
   2ff10:	18c01704 	addi	r3,r3,92
   2ff14:	18c00003 	ldbu	r3,0(r3)
   2ff18:	18c03fcc 	andi	r3,r3,255
   2ff1c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2ff20:	e0bffc17 	ldw	r2,-16(fp)
   2ff24:	10800417 	ldw	r2,16(r2)
   2ff28:	10800044 	addi	r2,r2,1
   2ff2c:	e0fffc17 	ldw	r3,-16(fp)
   2ff30:	18800415 	stw	r2,16(r3)
   2ff34:	10c00fcc 	andi	r3,r2,63
   2ff38:	e0bffc17 	ldw	r2,-16(fp)
   2ff3c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2ff40:	e0bffc17 	ldw	r2,-16(fp)
   2ff44:	10800117 	ldw	r2,4(r2)
   2ff48:	10c01014 	ori	r3,r2,64
   2ff4c:	e0bffc17 	ldw	r2,-16(fp)
   2ff50:	10c00115 	stw	r3,4(r2)
   2ff54:	00000e06 	br	2ff90 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2ff58:	e0bffc17 	ldw	r2,-16(fp)
   2ff5c:	10800017 	ldw	r2,0(r2)
   2ff60:	10800204 	addi	r2,r2,8
   2ff64:	10800037 	ldwio	r2,0(r2)
   2ff68:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2ff6c:	e0bffd17 	ldw	r2,-12(fp)
   2ff70:	1082000c 	andi	r2,r2,2048
   2ff74:	1000061e 	bne	r2,zero,2ff90 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2ff78:	e0bffc17 	ldw	r2,-16(fp)
   2ff7c:	10c00117 	ldw	r3,4(r2)
   2ff80:	00bfefc4 	movi	r2,-65
   2ff84:	1886703a 	and	r3,r3,r2
   2ff88:	e0bffc17 	ldw	r2,-16(fp)
   2ff8c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2ff90:	e0bffc17 	ldw	r2,-16(fp)
   2ff94:	10c00417 	ldw	r3,16(r2)
   2ff98:	e0bffc17 	ldw	r2,-16(fp)
   2ff9c:	10800517 	ldw	r2,20(r2)
   2ffa0:	1880061e 	bne	r3,r2,2ffbc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2ffa4:	e0bffc17 	ldw	r2,-16(fp)
   2ffa8:	10c00117 	ldw	r3,4(r2)
   2ffac:	00beefc4 	movi	r2,-1089
   2ffb0:	1886703a 	and	r3,r3,r2
   2ffb4:	e0bffc17 	ldw	r2,-16(fp)
   2ffb8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2ffbc:	e0bffc17 	ldw	r2,-16(fp)
   2ffc0:	10800017 	ldw	r2,0(r2)
   2ffc4:	10800304 	addi	r2,r2,12
   2ffc8:	e0fffc17 	ldw	r3,-16(fp)
   2ffcc:	18c00117 	ldw	r3,4(r3)
   2ffd0:	10c00035 	stwio	r3,0(r2)
}
   2ffd4:	0001883a 	nop
   2ffd8:	e037883a 	mov	sp,fp
   2ffdc:	df000017 	ldw	fp,0(sp)
   2ffe0:	dec00104 	addi	sp,sp,4
   2ffe4:	f800283a 	ret

0002ffe8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2ffe8:	defffd04 	addi	sp,sp,-12
   2ffec:	df000215 	stw	fp,8(sp)
   2fff0:	df000204 	addi	fp,sp,8
   2fff4:	e13ffe15 	stw	r4,-8(fp)
   2fff8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2fffc:	00000506 	br	30014 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   30000:	e0bfff17 	ldw	r2,-4(fp)
   30004:	1090000c 	andi	r2,r2,16384
   30008:	10000226 	beq	r2,zero,30014 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3000c:	00bffd44 	movi	r2,-11
   30010:	00000606 	br	3002c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30014:	e0bffe17 	ldw	r2,-8(fp)
   30018:	10c00417 	ldw	r3,16(r2)
   3001c:	e0bffe17 	ldw	r2,-8(fp)
   30020:	10800517 	ldw	r2,20(r2)
   30024:	18bff61e 	bne	r3,r2,30000 <__alt_data_end+0xf4030000>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30028:	0005883a 	mov	r2,zero
}
   3002c:	e037883a 	mov	sp,fp
   30030:	df000017 	ldw	fp,0(sp)
   30034:	dec00104 	addi	sp,sp,4
   30038:	f800283a 	ret

0003003c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3003c:	defffe04 	addi	sp,sp,-8
   30040:	dfc00115 	stw	ra,4(sp)
   30044:	df000015 	stw	fp,0(sp)
   30048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3004c:	d0a00b17 	ldw	r2,-32724(gp)
   30050:	10000326 	beq	r2,zero,30060 <alt_get_errno+0x24>
   30054:	d0a00b17 	ldw	r2,-32724(gp)
   30058:	103ee83a 	callr	r2
   3005c:	00000106 	br	30064 <alt_get_errno+0x28>
   30060:	d0a73504 	addi	r2,gp,-25388
}
   30064:	e037883a 	mov	sp,fp
   30068:	dfc00117 	ldw	ra,4(sp)
   3006c:	df000017 	ldw	fp,0(sp)
   30070:	dec00204 	addi	sp,sp,8
   30074:	f800283a 	ret

00030078 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   30078:	defff204 	addi	sp,sp,-56
   3007c:	dfc00d15 	stw	ra,52(sp)
   30080:	df000c15 	stw	fp,48(sp)
   30084:	df000c04 	addi	fp,sp,48
   30088:	e13ffc15 	stw	r4,-16(fp)
   3008c:	e17ffd15 	stw	r5,-12(fp)
   30090:	e1bffe15 	stw	r6,-8(fp)
   30094:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   30098:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   3009c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   300a0:	e0bfff17 	ldw	r2,-4(fp)
   300a4:	1090000c 	andi	r2,r2,16384
   300a8:	1005003a 	cmpeq	r2,r2,zero
   300ac:	10803fcc 	andi	r2,r2,255
   300b0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   300b4:	00001306 	br	30104 <altera_avalon_uart_read+0x8c>
    {
      count++;
   300b8:	e0bff517 	ldw	r2,-44(fp)
   300bc:	10800044 	addi	r2,r2,1
   300c0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   300c4:	e0bffd17 	ldw	r2,-12(fp)
   300c8:	10c00044 	addi	r3,r2,1
   300cc:	e0fffd15 	stw	r3,-12(fp)
   300d0:	e0fffc17 	ldw	r3,-16(fp)
   300d4:	18c00217 	ldw	r3,8(r3)
   300d8:	e13ffc17 	ldw	r4,-16(fp)
   300dc:	20c7883a 	add	r3,r4,r3
   300e0:	18c00704 	addi	r3,r3,28
   300e4:	18c00003 	ldbu	r3,0(r3)
   300e8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   300ec:	e0bffc17 	ldw	r2,-16(fp)
   300f0:	10800217 	ldw	r2,8(r2)
   300f4:	10800044 	addi	r2,r2,1
   300f8:	10c00fcc 	andi	r3,r2,63
   300fc:	e0bffc17 	ldw	r2,-16(fp)
   30100:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30104:	e0fff517 	ldw	r3,-44(fp)
   30108:	e0bffe17 	ldw	r2,-8(fp)
   3010c:	1880050e 	bge	r3,r2,30124 <altera_avalon_uart_read+0xac>
   30110:	e0bffc17 	ldw	r2,-16(fp)
   30114:	10c00217 	ldw	r3,8(r2)
   30118:	e0bffc17 	ldw	r2,-16(fp)
   3011c:	10800317 	ldw	r2,12(r2)
   30120:	18bfe51e 	bne	r3,r2,300b8 <__alt_data_end+0xf40300b8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30124:	e0bff517 	ldw	r2,-44(fp)
   30128:	1000251e 	bne	r2,zero,301c0 <altera_avalon_uart_read+0x148>
   3012c:	e0bffc17 	ldw	r2,-16(fp)
   30130:	10c00217 	ldw	r3,8(r2)
   30134:	e0bffc17 	ldw	r2,-16(fp)
   30138:	10800317 	ldw	r2,12(r2)
   3013c:	1880201e 	bne	r3,r2,301c0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   30140:	e0bff617 	ldw	r2,-40(fp)
   30144:	1000071e 	bne	r2,zero,30164 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   30148:	003003c0 	call	3003c <alt_get_errno>
   3014c:	1007883a 	mov	r3,r2
   30150:	008002c4 	movi	r2,11
   30154:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   30158:	00800044 	movi	r2,1
   3015c:	e0bff405 	stb	r2,-48(fp)
        break;
   30160:	00001b06 	br	301d0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30164:	0005303a 	rdctl	r2,status
   30168:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3016c:	e0fff917 	ldw	r3,-28(fp)
   30170:	00bfff84 	movi	r2,-2
   30174:	1884703a 	and	r2,r3,r2
   30178:	1001703a 	wrctl	status,r2
  
  return context;
   3017c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   30180:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30184:	e0bffc17 	ldw	r2,-16(fp)
   30188:	10800117 	ldw	r2,4(r2)
   3018c:	10c02014 	ori	r3,r2,128
   30190:	e0bffc17 	ldw	r2,-16(fp)
   30194:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30198:	e0bffc17 	ldw	r2,-16(fp)
   3019c:	10800017 	ldw	r2,0(r2)
   301a0:	10800304 	addi	r2,r2,12
   301a4:	e0fffc17 	ldw	r3,-16(fp)
   301a8:	18c00117 	ldw	r3,4(r3)
   301ac:	10c00035 	stwio	r3,0(r2)
   301b0:	e0bff817 	ldw	r2,-32(fp)
   301b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   301b8:	e0bffa17 	ldw	r2,-24(fp)
   301bc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   301c0:	e0bff517 	ldw	r2,-44(fp)
   301c4:	1000021e 	bne	r2,zero,301d0 <altera_avalon_uart_read+0x158>
   301c8:	e0bffe17 	ldw	r2,-8(fp)
   301cc:	103fcd1e 	bne	r2,zero,30104 <__alt_data_end+0xf4030104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   301d0:	0005303a 	rdctl	r2,status
   301d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   301d8:	e0fffb17 	ldw	r3,-20(fp)
   301dc:	00bfff84 	movi	r2,-2
   301e0:	1884703a 	and	r2,r3,r2
   301e4:	1001703a 	wrctl	status,r2
  
  return context;
   301e8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   301ec:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   301f0:	e0bffc17 	ldw	r2,-16(fp)
   301f4:	10800117 	ldw	r2,4(r2)
   301f8:	10c02014 	ori	r3,r2,128
   301fc:	e0bffc17 	ldw	r2,-16(fp)
   30200:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30204:	e0bffc17 	ldw	r2,-16(fp)
   30208:	10800017 	ldw	r2,0(r2)
   3020c:	10800304 	addi	r2,r2,12
   30210:	e0fffc17 	ldw	r3,-16(fp)
   30214:	18c00117 	ldw	r3,4(r3)
   30218:	10c00035 	stwio	r3,0(r2)
   3021c:	e0bff817 	ldw	r2,-32(fp)
   30220:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30224:	e0bff717 	ldw	r2,-36(fp)
   30228:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   3022c:	e0bff403 	ldbu	r2,-48(fp)
   30230:	10000226 	beq	r2,zero,3023c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   30234:	00bffd44 	movi	r2,-11
   30238:	00000106 	br	30240 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   3023c:	e0bff517 	ldw	r2,-44(fp)
  }
}
   30240:	e037883a 	mov	sp,fp
   30244:	dfc00117 	ldw	ra,4(sp)
   30248:	df000017 	ldw	fp,0(sp)
   3024c:	dec00204 	addi	sp,sp,8
   30250:	f800283a 	ret

00030254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30254:	defffe04 	addi	sp,sp,-8
   30258:	dfc00115 	stw	ra,4(sp)
   3025c:	df000015 	stw	fp,0(sp)
   30260:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30264:	d0a00b17 	ldw	r2,-32724(gp)
   30268:	10000326 	beq	r2,zero,30278 <alt_get_errno+0x24>
   3026c:	d0a00b17 	ldw	r2,-32724(gp)
   30270:	103ee83a 	callr	r2
   30274:	00000106 	br	3027c <alt_get_errno+0x28>
   30278:	d0a73504 	addi	r2,gp,-25388
}
   3027c:	e037883a 	mov	sp,fp
   30280:	dfc00117 	ldw	ra,4(sp)
   30284:	df000017 	ldw	fp,0(sp)
   30288:	dec00204 	addi	sp,sp,8
   3028c:	f800283a 	ret

00030290 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   30290:	defff204 	addi	sp,sp,-56
   30294:	dfc00d15 	stw	ra,52(sp)
   30298:	df000c15 	stw	fp,48(sp)
   3029c:	df000c04 	addi	fp,sp,48
   302a0:	e13ffc15 	stw	r4,-16(fp)
   302a4:	e17ffd15 	stw	r5,-12(fp)
   302a8:	e1bffe15 	stw	r6,-8(fp)
   302ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   302b0:	e0bffe17 	ldw	r2,-8(fp)
   302b4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   302b8:	e0bfff17 	ldw	r2,-4(fp)
   302bc:	1090000c 	andi	r2,r2,16384
   302c0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   302c4:	00003c06 	br	303b8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   302c8:	e0bffc17 	ldw	r2,-16(fp)
   302cc:	10800517 	ldw	r2,20(r2)
   302d0:	10800044 	addi	r2,r2,1
   302d4:	10800fcc 	andi	r2,r2,63
   302d8:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   302dc:	e0bffc17 	ldw	r2,-16(fp)
   302e0:	10c00417 	ldw	r3,16(r2)
   302e4:	e0bff717 	ldw	r2,-36(fp)
   302e8:	1880221e 	bne	r3,r2,30374 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   302ec:	e0bff517 	ldw	r2,-44(fp)
   302f0:	10000526 	beq	r2,zero,30308 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   302f4:	00302540 	call	30254 <alt_get_errno>
   302f8:	1007883a 	mov	r3,r2
   302fc:	008002c4 	movi	r2,11
   30300:	18800015 	stw	r2,0(r3)
        break;
   30304:	00002e06 	br	303c0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30308:	0005303a 	rdctl	r2,status
   3030c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30310:	e0fff917 	ldw	r3,-28(fp)
   30314:	00bfff84 	movi	r2,-2
   30318:	1884703a 	and	r2,r3,r2
   3031c:	1001703a 	wrctl	status,r2
  
  return context;
   30320:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   30324:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30328:	e0bffc17 	ldw	r2,-16(fp)
   3032c:	10800117 	ldw	r2,4(r2)
   30330:	10c11014 	ori	r3,r2,1088
   30334:	e0bffc17 	ldw	r2,-16(fp)
   30338:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   3033c:	e0bffc17 	ldw	r2,-16(fp)
   30340:	10800017 	ldw	r2,0(r2)
   30344:	10800304 	addi	r2,r2,12
   30348:	e0fffc17 	ldw	r3,-16(fp)
   3034c:	18c00117 	ldw	r3,4(r3)
   30350:	10c00035 	stwio	r3,0(r2)
   30354:	e0bff817 	ldw	r2,-32(fp)
   30358:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3035c:	e0bff617 	ldw	r2,-40(fp)
   30360:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   30364:	e0bffc17 	ldw	r2,-16(fp)
   30368:	10c00417 	ldw	r3,16(r2)
   3036c:	e0bff717 	ldw	r2,-36(fp)
   30370:	18bffc26 	beq	r3,r2,30364 <__alt_data_end+0xf4030364>
      }
    }

    count--;
   30374:	e0bff417 	ldw	r2,-48(fp)
   30378:	10bfffc4 	addi	r2,r2,-1
   3037c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   30380:	e0bffc17 	ldw	r2,-16(fp)
   30384:	10c00517 	ldw	r3,20(r2)
   30388:	e0bffd17 	ldw	r2,-12(fp)
   3038c:	11000044 	addi	r4,r2,1
   30390:	e13ffd15 	stw	r4,-12(fp)
   30394:	10800003 	ldbu	r2,0(r2)
   30398:	1009883a 	mov	r4,r2
   3039c:	e0bffc17 	ldw	r2,-16(fp)
   303a0:	10c5883a 	add	r2,r2,r3
   303a4:	10801704 	addi	r2,r2,92
   303a8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   303ac:	e0bffc17 	ldw	r2,-16(fp)
   303b0:	e0fff717 	ldw	r3,-36(fp)
   303b4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   303b8:	e0bff417 	ldw	r2,-48(fp)
   303bc:	103fc21e 	bne	r2,zero,302c8 <__alt_data_end+0xf40302c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   303c0:	0005303a 	rdctl	r2,status
   303c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   303c8:	e0fffb17 	ldw	r3,-20(fp)
   303cc:	00bfff84 	movi	r2,-2
   303d0:	1884703a 	and	r2,r3,r2
   303d4:	1001703a 	wrctl	status,r2
  
  return context;
   303d8:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   303dc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   303e0:	e0bffc17 	ldw	r2,-16(fp)
   303e4:	10800117 	ldw	r2,4(r2)
   303e8:	10c11014 	ori	r3,r2,1088
   303ec:	e0bffc17 	ldw	r2,-16(fp)
   303f0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   303f4:	e0bffc17 	ldw	r2,-16(fp)
   303f8:	10800017 	ldw	r2,0(r2)
   303fc:	10800304 	addi	r2,r2,12
   30400:	e0fffc17 	ldw	r3,-16(fp)
   30404:	18c00117 	ldw	r3,4(r3)
   30408:	10c00035 	stwio	r3,0(r2)
   3040c:	e0bff817 	ldw	r2,-32(fp)
   30410:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30414:	e0bffa17 	ldw	r2,-24(fp)
   30418:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   3041c:	e0fffe17 	ldw	r3,-8(fp)
   30420:	e0bff417 	ldw	r2,-48(fp)
   30424:	1885c83a 	sub	r2,r3,r2
}
   30428:	e037883a 	mov	sp,fp
   3042c:	dfc00117 	ldw	ra,4(sp)
   30430:	df000017 	ldw	fp,0(sp)
   30434:	dec00204 	addi	sp,sp,8
   30438:	f800283a 	ret

0003043c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3043c:	defff504 	addi	sp,sp,-44
   30440:	df000a15 	stw	fp,40(sp)
   30444:	df000a04 	addi	fp,sp,40
   30448:	e13ffc15 	stw	r4,-16(fp)
   3044c:	e17ffd15 	stw	r5,-12(fp)
   30450:	e1bffe15 	stw	r6,-8(fp)
   30454:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   30458:	e03ff615 	stw	zero,-40(fp)
   3045c:	d0a73a17 	ldw	r2,-25368(gp)
  
  if (alt_ticks_per_second ())
   30460:	10003c26 	beq	r2,zero,30554 <alt_alarm_start+0x118>
  {
    if (alarm)
   30464:	e0bffc17 	ldw	r2,-16(fp)
   30468:	10003826 	beq	r2,zero,3054c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   3046c:	e0bffc17 	ldw	r2,-16(fp)
   30470:	e0fffe17 	ldw	r3,-8(fp)
   30474:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   30478:	e0bffc17 	ldw	r2,-16(fp)
   3047c:	e0ffff17 	ldw	r3,-4(fp)
   30480:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30484:	0005303a 	rdctl	r2,status
   30488:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3048c:	e0fff917 	ldw	r3,-28(fp)
   30490:	00bfff84 	movi	r2,-2
   30494:	1884703a 	and	r2,r3,r2
   30498:	1001703a 	wrctl	status,r2
  
  return context;
   3049c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   304a0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   304a4:	d0a73b17 	ldw	r2,-25364(gp)
      
      current_nticks = alt_nticks();
   304a8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   304ac:	e0fffd17 	ldw	r3,-12(fp)
   304b0:	e0bff617 	ldw	r2,-40(fp)
   304b4:	1885883a 	add	r2,r3,r2
   304b8:	10c00044 	addi	r3,r2,1
   304bc:	e0bffc17 	ldw	r2,-16(fp)
   304c0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   304c4:	e0bffc17 	ldw	r2,-16(fp)
   304c8:	10c00217 	ldw	r3,8(r2)
   304cc:	e0bff617 	ldw	r2,-40(fp)
   304d0:	1880042e 	bgeu	r3,r2,304e4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   304d4:	e0bffc17 	ldw	r2,-16(fp)
   304d8:	00c00044 	movi	r3,1
   304dc:	10c00405 	stb	r3,16(r2)
   304e0:	00000206 	br	304ec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   304e4:	e0bffc17 	ldw	r2,-16(fp)
   304e8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   304ec:	e0bffc17 	ldw	r2,-16(fp)
   304f0:	d0e01204 	addi	r3,gp,-32696
   304f4:	e0fffa15 	stw	r3,-24(fp)
   304f8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   304fc:	e0bffb17 	ldw	r2,-20(fp)
   30500:	e0fffa17 	ldw	r3,-24(fp)
   30504:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   30508:	e0bffa17 	ldw	r2,-24(fp)
   3050c:	10c00017 	ldw	r3,0(r2)
   30510:	e0bffb17 	ldw	r2,-20(fp)
   30514:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   30518:	e0bffa17 	ldw	r2,-24(fp)
   3051c:	10800017 	ldw	r2,0(r2)
   30520:	e0fffb17 	ldw	r3,-20(fp)
   30524:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   30528:	e0bffa17 	ldw	r2,-24(fp)
   3052c:	e0fffb17 	ldw	r3,-20(fp)
   30530:	10c00015 	stw	r3,0(r2)
   30534:	e0bff817 	ldw	r2,-32(fp)
   30538:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3053c:	e0bff717 	ldw	r2,-36(fp)
   30540:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   30544:	0005883a 	mov	r2,zero
   30548:	00000306 	br	30558 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   3054c:	00bffa84 	movi	r2,-22
   30550:	00000106 	br	30558 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   30554:	00bfde84 	movi	r2,-134
  }
}
   30558:	e037883a 	mov	sp,fp
   3055c:	df000017 	ldw	fp,0(sp)
   30560:	dec00104 	addi	sp,sp,4
   30564:	f800283a 	ret

00030568 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   30568:	defffe04 	addi	sp,sp,-8
   3056c:	df000115 	stw	fp,4(sp)
   30570:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   30574:	e03fff15 	stw	zero,-4(fp)
   30578:	00000506 	br	30590 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   3057c:	e0bfff17 	ldw	r2,-4(fp)
   30580:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   30584:	e0bfff17 	ldw	r2,-4(fp)
   30588:	10800804 	addi	r2,r2,32
   3058c:	e0bfff15 	stw	r2,-4(fp)
   30590:	e0bfff17 	ldw	r2,-4(fp)
   30594:	10820030 	cmpltui	r2,r2,2048
   30598:	103ff81e 	bne	r2,zero,3057c <__alt_data_end+0xf403057c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3059c:	0001883a 	nop
   305a0:	e037883a 	mov	sp,fp
   305a4:	df000017 	ldw	fp,0(sp)
   305a8:	dec00104 	addi	sp,sp,4
   305ac:	f800283a 	ret

000305b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   305b0:	defffe04 	addi	sp,sp,-8
   305b4:	dfc00115 	stw	ra,4(sp)
   305b8:	df000015 	stw	fp,0(sp)
   305bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   305c0:	d0a00b17 	ldw	r2,-32724(gp)
   305c4:	10000326 	beq	r2,zero,305d4 <alt_get_errno+0x24>
   305c8:	d0a00b17 	ldw	r2,-32724(gp)
   305cc:	103ee83a 	callr	r2
   305d0:	00000106 	br	305d8 <alt_get_errno+0x28>
   305d4:	d0a73504 	addi	r2,gp,-25388
}
   305d8:	e037883a 	mov	sp,fp
   305dc:	dfc00117 	ldw	ra,4(sp)
   305e0:	df000017 	ldw	fp,0(sp)
   305e4:	dec00204 	addi	sp,sp,8
   305e8:	f800283a 	ret

000305ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   305ec:	defffa04 	addi	sp,sp,-24
   305f0:	dfc00515 	stw	ra,20(sp)
   305f4:	df000415 	stw	fp,16(sp)
   305f8:	df000404 	addi	fp,sp,16
   305fc:	e13ffe15 	stw	r4,-8(fp)
   30600:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   30604:	e0bffe17 	ldw	r2,-8(fp)
   30608:	10000326 	beq	r2,zero,30618 <alt_dev_llist_insert+0x2c>
   3060c:	e0bffe17 	ldw	r2,-8(fp)
   30610:	10800217 	ldw	r2,8(r2)
   30614:	1000061e 	bne	r2,zero,30630 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   30618:	00305b00 	call	305b0 <alt_get_errno>
   3061c:	1007883a 	mov	r3,r2
   30620:	00800584 	movi	r2,22
   30624:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   30628:	00bffa84 	movi	r2,-22
   3062c:	00001306 	br	3067c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   30630:	e0bffe17 	ldw	r2,-8(fp)
   30634:	e0ffff17 	ldw	r3,-4(fp)
   30638:	e0fffc15 	stw	r3,-16(fp)
   3063c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   30640:	e0bffd17 	ldw	r2,-12(fp)
   30644:	e0fffc17 	ldw	r3,-16(fp)
   30648:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3064c:	e0bffc17 	ldw	r2,-16(fp)
   30650:	10c00017 	ldw	r3,0(r2)
   30654:	e0bffd17 	ldw	r2,-12(fp)
   30658:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3065c:	e0bffc17 	ldw	r2,-16(fp)
   30660:	10800017 	ldw	r2,0(r2)
   30664:	e0fffd17 	ldw	r3,-12(fp)
   30668:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3066c:	e0bffc17 	ldw	r2,-16(fp)
   30670:	e0fffd17 	ldw	r3,-12(fp)
   30674:	10c00015 	stw	r3,0(r2)

  return 0;  
   30678:	0005883a 	mov	r2,zero
}
   3067c:	e037883a 	mov	sp,fp
   30680:	dfc00117 	ldw	ra,4(sp)
   30684:	df000017 	ldw	fp,0(sp)
   30688:	dec00204 	addi	sp,sp,8
   3068c:	f800283a 	ret

00030690 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   30690:	defffd04 	addi	sp,sp,-12
   30694:	dfc00215 	stw	ra,8(sp)
   30698:	df000115 	stw	fp,4(sp)
   3069c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   306a0:	008000f4 	movhi	r2,3
   306a4:	10859e04 	addi	r2,r2,5752
   306a8:	e0bfff15 	stw	r2,-4(fp)
   306ac:	00000606 	br	306c8 <_do_ctors+0x38>
        (*ctor) (); 
   306b0:	e0bfff17 	ldw	r2,-4(fp)
   306b4:	10800017 	ldw	r2,0(r2)
   306b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   306bc:	e0bfff17 	ldw	r2,-4(fp)
   306c0:	10bfff04 	addi	r2,r2,-4
   306c4:	e0bfff15 	stw	r2,-4(fp)
   306c8:	e0ffff17 	ldw	r3,-4(fp)
   306cc:	008000f4 	movhi	r2,3
   306d0:	10859f04 	addi	r2,r2,5756
   306d4:	18bff62e 	bgeu	r3,r2,306b0 <__alt_data_end+0xf40306b0>
        (*ctor) (); 
}
   306d8:	0001883a 	nop
   306dc:	e037883a 	mov	sp,fp
   306e0:	dfc00117 	ldw	ra,4(sp)
   306e4:	df000017 	ldw	fp,0(sp)
   306e8:	dec00204 	addi	sp,sp,8
   306ec:	f800283a 	ret

000306f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   306f0:	defffd04 	addi	sp,sp,-12
   306f4:	dfc00215 	stw	ra,8(sp)
   306f8:	df000115 	stw	fp,4(sp)
   306fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   30700:	008000f4 	movhi	r2,3
   30704:	10859e04 	addi	r2,r2,5752
   30708:	e0bfff15 	stw	r2,-4(fp)
   3070c:	00000606 	br	30728 <_do_dtors+0x38>
        (*dtor) (); 
   30710:	e0bfff17 	ldw	r2,-4(fp)
   30714:	10800017 	ldw	r2,0(r2)
   30718:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3071c:	e0bfff17 	ldw	r2,-4(fp)
   30720:	10bfff04 	addi	r2,r2,-4
   30724:	e0bfff15 	stw	r2,-4(fp)
   30728:	e0ffff17 	ldw	r3,-4(fp)
   3072c:	008000f4 	movhi	r2,3
   30730:	10859f04 	addi	r2,r2,5756
   30734:	18bff62e 	bgeu	r3,r2,30710 <__alt_data_end+0xf4030710>
        (*dtor) (); 
}
   30738:	0001883a 	nop
   3073c:	e037883a 	mov	sp,fp
   30740:	dfc00117 	ldw	ra,4(sp)
   30744:	df000017 	ldw	fp,0(sp)
   30748:	dec00204 	addi	sp,sp,8
   3074c:	f800283a 	ret

00030750 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   30750:	defffa04 	addi	sp,sp,-24
   30754:	dfc00515 	stw	ra,20(sp)
   30758:	df000415 	stw	fp,16(sp)
   3075c:	df000404 	addi	fp,sp,16
   30760:	e13ffe15 	stw	r4,-8(fp)
   30764:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   30768:	e0bfff17 	ldw	r2,-4(fp)
   3076c:	10800017 	ldw	r2,0(r2)
   30770:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   30774:	e13ffe17 	ldw	r4,-8(fp)
   30778:	00212600 	call	21260 <strlen>
   3077c:	10800044 	addi	r2,r2,1
   30780:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   30784:	00000d06 	br	307bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   30788:	e0bffc17 	ldw	r2,-16(fp)
   3078c:	10800217 	ldw	r2,8(r2)
   30790:	e0fffd17 	ldw	r3,-12(fp)
   30794:	180d883a 	mov	r6,r3
   30798:	e17ffe17 	ldw	r5,-8(fp)
   3079c:	1009883a 	mov	r4,r2
   307a0:	00313340 	call	31334 <memcmp>
   307a4:	1000021e 	bne	r2,zero,307b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   307a8:	e0bffc17 	ldw	r2,-16(fp)
   307ac:	00000706 	br	307cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   307b0:	e0bffc17 	ldw	r2,-16(fp)
   307b4:	10800017 	ldw	r2,0(r2)
   307b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   307bc:	e0fffc17 	ldw	r3,-16(fp)
   307c0:	e0bfff17 	ldw	r2,-4(fp)
   307c4:	18bff01e 	bne	r3,r2,30788 <__alt_data_end+0xf4030788>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   307c8:	0005883a 	mov	r2,zero
}
   307cc:	e037883a 	mov	sp,fp
   307d0:	dfc00117 	ldw	ra,4(sp)
   307d4:	df000017 	ldw	fp,0(sp)
   307d8:	dec00204 	addi	sp,sp,8
   307dc:	f800283a 	ret

000307e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   307e0:	defffe04 	addi	sp,sp,-8
   307e4:	dfc00115 	stw	ra,4(sp)
   307e8:	df000015 	stw	fp,0(sp)
   307ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   307f0:	01440004 	movi	r5,4096
   307f4:	0009883a 	mov	r4,zero
   307f8:	00311bc0 	call	311bc <alt_icache_flush>
#endif
}
   307fc:	0001883a 	nop
   30800:	e037883a 	mov	sp,fp
   30804:	dfc00117 	ldw	ra,4(sp)
   30808:	df000017 	ldw	fp,0(sp)
   3080c:	dec00204 	addi	sp,sp,8
   30810:	f800283a 	ret

00030814 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   30814:	defff904 	addi	sp,sp,-28
   30818:	dfc00615 	stw	ra,24(sp)
   3081c:	df000515 	stw	fp,20(sp)
   30820:	df000504 	addi	fp,sp,20
   30824:	e13ffc15 	stw	r4,-16(fp)
   30828:	e17ffd15 	stw	r5,-12(fp)
   3082c:	e1bffe15 	stw	r6,-8(fp)
   30830:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   30834:	e0800217 	ldw	r2,8(fp)
   30838:	d8800015 	stw	r2,0(sp)
   3083c:	e1ffff17 	ldw	r7,-4(fp)
   30840:	e1bffe17 	ldw	r6,-8(fp)
   30844:	e17ffd17 	ldw	r5,-12(fp)
   30848:	e13ffc17 	ldw	r4,-16(fp)
   3084c:	00309c40 	call	309c4 <alt_iic_isr_register>
}  
   30850:	e037883a 	mov	sp,fp
   30854:	dfc00117 	ldw	ra,4(sp)
   30858:	df000017 	ldw	fp,0(sp)
   3085c:	dec00204 	addi	sp,sp,8
   30860:	f800283a 	ret

00030864 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   30864:	defff904 	addi	sp,sp,-28
   30868:	df000615 	stw	fp,24(sp)
   3086c:	df000604 	addi	fp,sp,24
   30870:	e13ffe15 	stw	r4,-8(fp)
   30874:	e17fff15 	stw	r5,-4(fp)
   30878:	e0bfff17 	ldw	r2,-4(fp)
   3087c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30880:	0005303a 	rdctl	r2,status
   30884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30888:	e0fffb17 	ldw	r3,-20(fp)
   3088c:	00bfff84 	movi	r2,-2
   30890:	1884703a 	and	r2,r3,r2
   30894:	1001703a 	wrctl	status,r2
  
  return context;
   30898:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3089c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   308a0:	00c00044 	movi	r3,1
   308a4:	e0bffa17 	ldw	r2,-24(fp)
   308a8:	1884983a 	sll	r2,r3,r2
   308ac:	1007883a 	mov	r3,r2
   308b0:	d0a73917 	ldw	r2,-25372(gp)
   308b4:	1884b03a 	or	r2,r3,r2
   308b8:	d0a73915 	stw	r2,-25372(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   308bc:	d0a73917 	ldw	r2,-25372(gp)
   308c0:	100170fa 	wrctl	ienable,r2
   308c4:	e0bffc17 	ldw	r2,-16(fp)
   308c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   308cc:	e0bffd17 	ldw	r2,-12(fp)
   308d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   308d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   308d8:	0001883a 	nop
}
   308dc:	e037883a 	mov	sp,fp
   308e0:	df000017 	ldw	fp,0(sp)
   308e4:	dec00104 	addi	sp,sp,4
   308e8:	f800283a 	ret

000308ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   308ec:	defff904 	addi	sp,sp,-28
   308f0:	df000615 	stw	fp,24(sp)
   308f4:	df000604 	addi	fp,sp,24
   308f8:	e13ffe15 	stw	r4,-8(fp)
   308fc:	e17fff15 	stw	r5,-4(fp)
   30900:	e0bfff17 	ldw	r2,-4(fp)
   30904:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30908:	0005303a 	rdctl	r2,status
   3090c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30910:	e0fffb17 	ldw	r3,-20(fp)
   30914:	00bfff84 	movi	r2,-2
   30918:	1884703a 	and	r2,r3,r2
   3091c:	1001703a 	wrctl	status,r2
  
  return context;
   30920:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   30924:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   30928:	00c00044 	movi	r3,1
   3092c:	e0bffa17 	ldw	r2,-24(fp)
   30930:	1884983a 	sll	r2,r3,r2
   30934:	0084303a 	nor	r2,zero,r2
   30938:	1007883a 	mov	r3,r2
   3093c:	d0a73917 	ldw	r2,-25372(gp)
   30940:	1884703a 	and	r2,r3,r2
   30944:	d0a73915 	stw	r2,-25372(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   30948:	d0a73917 	ldw	r2,-25372(gp)
   3094c:	100170fa 	wrctl	ienable,r2
   30950:	e0bffc17 	ldw	r2,-16(fp)
   30954:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30958:	e0bffd17 	ldw	r2,-12(fp)
   3095c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   30960:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   30964:	0001883a 	nop
}
   30968:	e037883a 	mov	sp,fp
   3096c:	df000017 	ldw	fp,0(sp)
   30970:	dec00104 	addi	sp,sp,4
   30974:	f800283a 	ret

00030978 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   30978:	defffc04 	addi	sp,sp,-16
   3097c:	df000315 	stw	fp,12(sp)
   30980:	df000304 	addi	fp,sp,12
   30984:	e13ffe15 	stw	r4,-8(fp)
   30988:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3098c:	000530fa 	rdctl	r2,ienable
   30990:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   30994:	00c00044 	movi	r3,1
   30998:	e0bfff17 	ldw	r2,-4(fp)
   3099c:	1884983a 	sll	r2,r3,r2
   309a0:	1007883a 	mov	r3,r2
   309a4:	e0bffd17 	ldw	r2,-12(fp)
   309a8:	1884703a 	and	r2,r3,r2
   309ac:	1004c03a 	cmpne	r2,r2,zero
   309b0:	10803fcc 	andi	r2,r2,255
}
   309b4:	e037883a 	mov	sp,fp
   309b8:	df000017 	ldw	fp,0(sp)
   309bc:	dec00104 	addi	sp,sp,4
   309c0:	f800283a 	ret

000309c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   309c4:	defff504 	addi	sp,sp,-44
   309c8:	dfc00a15 	stw	ra,40(sp)
   309cc:	df000915 	stw	fp,36(sp)
   309d0:	df000904 	addi	fp,sp,36
   309d4:	e13ffc15 	stw	r4,-16(fp)
   309d8:	e17ffd15 	stw	r5,-12(fp)
   309dc:	e1bffe15 	stw	r6,-8(fp)
   309e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   309e4:	00bffa84 	movi	r2,-22
   309e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   309ec:	e0bffd17 	ldw	r2,-12(fp)
   309f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   309f4:	e0bff817 	ldw	r2,-32(fp)
   309f8:	10800808 	cmpgei	r2,r2,32
   309fc:	1000271e 	bne	r2,zero,30a9c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30a00:	0005303a 	rdctl	r2,status
   30a04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30a08:	e0fffb17 	ldw	r3,-20(fp)
   30a0c:	00bfff84 	movi	r2,-2
   30a10:	1884703a 	and	r2,r3,r2
   30a14:	1001703a 	wrctl	status,r2
  
  return context;
   30a18:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   30a1c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   30a20:	008000f4 	movhi	r2,3
   30a24:	10955104 	addi	r2,r2,21828
   30a28:	e0fff817 	ldw	r3,-32(fp)
   30a2c:	180690fa 	slli	r3,r3,3
   30a30:	10c5883a 	add	r2,r2,r3
   30a34:	e0fffe17 	ldw	r3,-8(fp)
   30a38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   30a3c:	008000f4 	movhi	r2,3
   30a40:	10955104 	addi	r2,r2,21828
   30a44:	e0fff817 	ldw	r3,-32(fp)
   30a48:	180690fa 	slli	r3,r3,3
   30a4c:	10c5883a 	add	r2,r2,r3
   30a50:	10800104 	addi	r2,r2,4
   30a54:	e0ffff17 	ldw	r3,-4(fp)
   30a58:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   30a5c:	e0bffe17 	ldw	r2,-8(fp)
   30a60:	10000526 	beq	r2,zero,30a78 <alt_iic_isr_register+0xb4>
   30a64:	e0bff817 	ldw	r2,-32(fp)
   30a68:	100b883a 	mov	r5,r2
   30a6c:	e13ffc17 	ldw	r4,-16(fp)
   30a70:	00308640 	call	30864 <alt_ic_irq_enable>
   30a74:	00000406 	br	30a88 <alt_iic_isr_register+0xc4>
   30a78:	e0bff817 	ldw	r2,-32(fp)
   30a7c:	100b883a 	mov	r5,r2
   30a80:	e13ffc17 	ldw	r4,-16(fp)
   30a84:	00308ec0 	call	308ec <alt_ic_irq_disable>
   30a88:	e0bff715 	stw	r2,-36(fp)
   30a8c:	e0bffa17 	ldw	r2,-24(fp)
   30a90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30a94:	e0bff917 	ldw	r2,-28(fp)
   30a98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   30a9c:	e0bff717 	ldw	r2,-36(fp)
}
   30aa0:	e037883a 	mov	sp,fp
   30aa4:	dfc00117 	ldw	ra,4(sp)
   30aa8:	df000017 	ldw	fp,0(sp)
   30aac:	dec00204 	addi	sp,sp,8
   30ab0:	f800283a 	ret

00030ab4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   30ab4:	defff904 	addi	sp,sp,-28
   30ab8:	dfc00615 	stw	ra,24(sp)
   30abc:	df000515 	stw	fp,20(sp)
   30ac0:	df000504 	addi	fp,sp,20
   30ac4:	e13ffc15 	stw	r4,-16(fp)
   30ac8:	e17ffd15 	stw	r5,-12(fp)
   30acc:	e1bffe15 	stw	r6,-8(fp)
   30ad0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   30ad4:	e1bfff17 	ldw	r6,-4(fp)
   30ad8:	e17ffe17 	ldw	r5,-8(fp)
   30adc:	e13ffd17 	ldw	r4,-12(fp)
   30ae0:	0030cf40 	call	30cf4 <open>
   30ae4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   30ae8:	e0bffb17 	ldw	r2,-20(fp)
   30aec:	10001c16 	blt	r2,zero,30b60 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   30af0:	008000f4 	movhi	r2,3
   30af4:	10893904 	addi	r2,r2,9444
   30af8:	e0fffb17 	ldw	r3,-20(fp)
   30afc:	18c00324 	muli	r3,r3,12
   30b00:	10c5883a 	add	r2,r2,r3
   30b04:	10c00017 	ldw	r3,0(r2)
   30b08:	e0bffc17 	ldw	r2,-16(fp)
   30b0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   30b10:	008000f4 	movhi	r2,3
   30b14:	10893904 	addi	r2,r2,9444
   30b18:	e0fffb17 	ldw	r3,-20(fp)
   30b1c:	18c00324 	muli	r3,r3,12
   30b20:	10c5883a 	add	r2,r2,r3
   30b24:	10800104 	addi	r2,r2,4
   30b28:	10c00017 	ldw	r3,0(r2)
   30b2c:	e0bffc17 	ldw	r2,-16(fp)
   30b30:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   30b34:	008000f4 	movhi	r2,3
   30b38:	10893904 	addi	r2,r2,9444
   30b3c:	e0fffb17 	ldw	r3,-20(fp)
   30b40:	18c00324 	muli	r3,r3,12
   30b44:	10c5883a 	add	r2,r2,r3
   30b48:	10800204 	addi	r2,r2,8
   30b4c:	10c00017 	ldw	r3,0(r2)
   30b50:	e0bffc17 	ldw	r2,-16(fp)
   30b54:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   30b58:	e13ffb17 	ldw	r4,-20(fp)
   30b5c:	002e0d80 	call	2e0d8 <alt_release_fd>
  }
} 
   30b60:	0001883a 	nop
   30b64:	e037883a 	mov	sp,fp
   30b68:	dfc00117 	ldw	ra,4(sp)
   30b6c:	df000017 	ldw	fp,0(sp)
   30b70:	dec00204 	addi	sp,sp,8
   30b74:	f800283a 	ret

00030b78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   30b78:	defffb04 	addi	sp,sp,-20
   30b7c:	dfc00415 	stw	ra,16(sp)
   30b80:	df000315 	stw	fp,12(sp)
   30b84:	df000304 	addi	fp,sp,12
   30b88:	e13ffd15 	stw	r4,-12(fp)
   30b8c:	e17ffe15 	stw	r5,-8(fp)
   30b90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   30b94:	01c07fc4 	movi	r7,511
   30b98:	01800044 	movi	r6,1
   30b9c:	e17ffd17 	ldw	r5,-12(fp)
   30ba0:	010000f4 	movhi	r4,3
   30ba4:	21093c04 	addi	r4,r4,9456
   30ba8:	0030ab40 	call	30ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   30bac:	01c07fc4 	movi	r7,511
   30bb0:	000d883a 	mov	r6,zero
   30bb4:	e17ffe17 	ldw	r5,-8(fp)
   30bb8:	010000f4 	movhi	r4,3
   30bbc:	21093904 	addi	r4,r4,9444
   30bc0:	0030ab40 	call	30ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   30bc4:	01c07fc4 	movi	r7,511
   30bc8:	01800044 	movi	r6,1
   30bcc:	e17fff17 	ldw	r5,-4(fp)
   30bd0:	010000f4 	movhi	r4,3
   30bd4:	21093f04 	addi	r4,r4,9468
   30bd8:	0030ab40 	call	30ab4 <alt_open_fd>
}  
   30bdc:	0001883a 	nop
   30be0:	e037883a 	mov	sp,fp
   30be4:	dfc00117 	ldw	ra,4(sp)
   30be8:	df000017 	ldw	fp,0(sp)
   30bec:	dec00204 	addi	sp,sp,8
   30bf0:	f800283a 	ret

00030bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30bf4:	defffe04 	addi	sp,sp,-8
   30bf8:	dfc00115 	stw	ra,4(sp)
   30bfc:	df000015 	stw	fp,0(sp)
   30c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30c04:	d0a00b17 	ldw	r2,-32724(gp)
   30c08:	10000326 	beq	r2,zero,30c18 <alt_get_errno+0x24>
   30c0c:	d0a00b17 	ldw	r2,-32724(gp)
   30c10:	103ee83a 	callr	r2
   30c14:	00000106 	br	30c1c <alt_get_errno+0x28>
   30c18:	d0a73504 	addi	r2,gp,-25388
}
   30c1c:	e037883a 	mov	sp,fp
   30c20:	dfc00117 	ldw	ra,4(sp)
   30c24:	df000017 	ldw	fp,0(sp)
   30c28:	dec00204 	addi	sp,sp,8
   30c2c:	f800283a 	ret

00030c30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   30c30:	defffd04 	addi	sp,sp,-12
   30c34:	df000215 	stw	fp,8(sp)
   30c38:	df000204 	addi	fp,sp,8
   30c3c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   30c40:	e0bfff17 	ldw	r2,-4(fp)
   30c44:	10800217 	ldw	r2,8(r2)
   30c48:	10d00034 	orhi	r3,r2,16384
   30c4c:	e0bfff17 	ldw	r2,-4(fp)
   30c50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   30c54:	e03ffe15 	stw	zero,-8(fp)
   30c58:	00001d06 	br	30cd0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   30c5c:	008000f4 	movhi	r2,3
   30c60:	10893904 	addi	r2,r2,9444
   30c64:	e0fffe17 	ldw	r3,-8(fp)
   30c68:	18c00324 	muli	r3,r3,12
   30c6c:	10c5883a 	add	r2,r2,r3
   30c70:	10c00017 	ldw	r3,0(r2)
   30c74:	e0bfff17 	ldw	r2,-4(fp)
   30c78:	10800017 	ldw	r2,0(r2)
   30c7c:	1880111e 	bne	r3,r2,30cc4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30c80:	008000f4 	movhi	r2,3
   30c84:	10893904 	addi	r2,r2,9444
   30c88:	e0fffe17 	ldw	r3,-8(fp)
   30c8c:	18c00324 	muli	r3,r3,12
   30c90:	10c5883a 	add	r2,r2,r3
   30c94:	10800204 	addi	r2,r2,8
   30c98:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   30c9c:	1000090e 	bge	r2,zero,30cc4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   30ca0:	e0bffe17 	ldw	r2,-8(fp)
   30ca4:	10c00324 	muli	r3,r2,12
   30ca8:	008000f4 	movhi	r2,3
   30cac:	10893904 	addi	r2,r2,9444
   30cb0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30cb4:	e0bfff17 	ldw	r2,-4(fp)
   30cb8:	18800226 	beq	r3,r2,30cc4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   30cbc:	00bffcc4 	movi	r2,-13
   30cc0:	00000806 	br	30ce4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   30cc4:	e0bffe17 	ldw	r2,-8(fp)
   30cc8:	10800044 	addi	r2,r2,1
   30ccc:	e0bffe15 	stw	r2,-8(fp)
   30cd0:	d0a00a17 	ldw	r2,-32728(gp)
   30cd4:	1007883a 	mov	r3,r2
   30cd8:	e0bffe17 	ldw	r2,-8(fp)
   30cdc:	18bfdf2e 	bgeu	r3,r2,30c5c <__alt_data_end+0xf4030c5c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   30ce0:	0005883a 	mov	r2,zero
}
   30ce4:	e037883a 	mov	sp,fp
   30ce8:	df000017 	ldw	fp,0(sp)
   30cec:	dec00104 	addi	sp,sp,4
   30cf0:	f800283a 	ret

00030cf4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   30cf4:	defff604 	addi	sp,sp,-40
   30cf8:	dfc00915 	stw	ra,36(sp)
   30cfc:	df000815 	stw	fp,32(sp)
   30d00:	df000804 	addi	fp,sp,32
   30d04:	e13ffd15 	stw	r4,-12(fp)
   30d08:	e17ffe15 	stw	r5,-8(fp)
   30d0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   30d10:	00bfffc4 	movi	r2,-1
   30d14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   30d18:	00bffb44 	movi	r2,-19
   30d1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   30d20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   30d24:	d1600804 	addi	r5,gp,-32736
   30d28:	e13ffd17 	ldw	r4,-12(fp)
   30d2c:	00307500 	call	30750 <alt_find_dev>
   30d30:	e0bff815 	stw	r2,-32(fp)
   30d34:	e0bff817 	ldw	r2,-32(fp)
   30d38:	1000051e 	bne	r2,zero,30d50 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   30d3c:	e13ffd17 	ldw	r4,-12(fp)
   30d40:	00310100 	call	31010 <alt_find_file>
   30d44:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   30d48:	00800044 	movi	r2,1
   30d4c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   30d50:	e0bff817 	ldw	r2,-32(fp)
   30d54:	10002926 	beq	r2,zero,30dfc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   30d58:	e13ff817 	ldw	r4,-32(fp)
   30d5c:	00311180 	call	31118 <alt_get_fd>
   30d60:	e0bff915 	stw	r2,-28(fp)
   30d64:	e0bff917 	ldw	r2,-28(fp)
   30d68:	1000030e 	bge	r2,zero,30d78 <open+0x84>
    {
      status = index;
   30d6c:	e0bff917 	ldw	r2,-28(fp)
   30d70:	e0bffa15 	stw	r2,-24(fp)
   30d74:	00002306 	br	30e04 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   30d78:	e0bff917 	ldw	r2,-28(fp)
   30d7c:	10c00324 	muli	r3,r2,12
   30d80:	008000f4 	movhi	r2,3
   30d84:	10893904 	addi	r2,r2,9444
   30d88:	1885883a 	add	r2,r3,r2
   30d8c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   30d90:	e0fffe17 	ldw	r3,-8(fp)
   30d94:	00900034 	movhi	r2,16384
   30d98:	10bfffc4 	addi	r2,r2,-1
   30d9c:	1886703a 	and	r3,r3,r2
   30da0:	e0bffc17 	ldw	r2,-16(fp)
   30da4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   30da8:	e0bffb17 	ldw	r2,-20(fp)
   30dac:	1000051e 	bne	r2,zero,30dc4 <open+0xd0>
   30db0:	e13ffc17 	ldw	r4,-16(fp)
   30db4:	0030c300 	call	30c30 <alt_file_locked>
   30db8:	e0bffa15 	stw	r2,-24(fp)
   30dbc:	e0bffa17 	ldw	r2,-24(fp)
   30dc0:	10001016 	blt	r2,zero,30e04 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   30dc4:	e0bff817 	ldw	r2,-32(fp)
   30dc8:	10800317 	ldw	r2,12(r2)
   30dcc:	10000826 	beq	r2,zero,30df0 <open+0xfc>
   30dd0:	e0bff817 	ldw	r2,-32(fp)
   30dd4:	10800317 	ldw	r2,12(r2)
   30dd8:	e1ffff17 	ldw	r7,-4(fp)
   30ddc:	e1bffe17 	ldw	r6,-8(fp)
   30de0:	e17ffd17 	ldw	r5,-12(fp)
   30de4:	e13ffc17 	ldw	r4,-16(fp)
   30de8:	103ee83a 	callr	r2
   30dec:	00000106 	br	30df4 <open+0x100>
   30df0:	0005883a 	mov	r2,zero
   30df4:	e0bffa15 	stw	r2,-24(fp)
   30df8:	00000206 	br	30e04 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   30dfc:	00bffb44 	movi	r2,-19
   30e00:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   30e04:	e0bffa17 	ldw	r2,-24(fp)
   30e08:	1000090e 	bge	r2,zero,30e30 <open+0x13c>
  {
    alt_release_fd (index);  
   30e0c:	e13ff917 	ldw	r4,-28(fp)
   30e10:	002e0d80 	call	2e0d8 <alt_release_fd>
    ALT_ERRNO = -status;
   30e14:	0030bf40 	call	30bf4 <alt_get_errno>
   30e18:	1007883a 	mov	r3,r2
   30e1c:	e0bffa17 	ldw	r2,-24(fp)
   30e20:	0085c83a 	sub	r2,zero,r2
   30e24:	18800015 	stw	r2,0(r3)
    return -1;
   30e28:	00bfffc4 	movi	r2,-1
   30e2c:	00000106 	br	30e34 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   30e30:	e0bff917 	ldw	r2,-28(fp)
}
   30e34:	e037883a 	mov	sp,fp
   30e38:	dfc00117 	ldw	ra,4(sp)
   30e3c:	df000017 	ldw	fp,0(sp)
   30e40:	dec00204 	addi	sp,sp,8
   30e44:	f800283a 	ret

00030e48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   30e48:	defffa04 	addi	sp,sp,-24
   30e4c:	df000515 	stw	fp,20(sp)
   30e50:	df000504 	addi	fp,sp,20
   30e54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30e58:	0005303a 	rdctl	r2,status
   30e5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30e60:	e0fffc17 	ldw	r3,-16(fp)
   30e64:	00bfff84 	movi	r2,-2
   30e68:	1884703a 	and	r2,r3,r2
   30e6c:	1001703a 	wrctl	status,r2
  
  return context;
   30e70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   30e74:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   30e78:	e0bfff17 	ldw	r2,-4(fp)
   30e7c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   30e80:	e0bffd17 	ldw	r2,-12(fp)
   30e84:	10800017 	ldw	r2,0(r2)
   30e88:	e0fffd17 	ldw	r3,-12(fp)
   30e8c:	18c00117 	ldw	r3,4(r3)
   30e90:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   30e94:	e0bffd17 	ldw	r2,-12(fp)
   30e98:	10800117 	ldw	r2,4(r2)
   30e9c:	e0fffd17 	ldw	r3,-12(fp)
   30ea0:	18c00017 	ldw	r3,0(r3)
   30ea4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   30ea8:	e0bffd17 	ldw	r2,-12(fp)
   30eac:	e0fffd17 	ldw	r3,-12(fp)
   30eb0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   30eb4:	e0bffd17 	ldw	r2,-12(fp)
   30eb8:	e0fffd17 	ldw	r3,-12(fp)
   30ebc:	10c00015 	stw	r3,0(r2)
   30ec0:	e0bffb17 	ldw	r2,-20(fp)
   30ec4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30ec8:	e0bffe17 	ldw	r2,-8(fp)
   30ecc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   30ed0:	0001883a 	nop
   30ed4:	e037883a 	mov	sp,fp
   30ed8:	df000017 	ldw	fp,0(sp)
   30edc:	dec00104 	addi	sp,sp,4
   30ee0:	f800283a 	ret

00030ee4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   30ee4:	defffb04 	addi	sp,sp,-20
   30ee8:	dfc00415 	stw	ra,16(sp)
   30eec:	df000315 	stw	fp,12(sp)
   30ef0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   30ef4:	d0a01217 	ldw	r2,-32696(gp)
   30ef8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   30efc:	d0a73b17 	ldw	r2,-25364(gp)
   30f00:	10800044 	addi	r2,r2,1
   30f04:	d0a73b15 	stw	r2,-25364(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30f08:	00002e06 	br	30fc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   30f0c:	e0bffd17 	ldw	r2,-12(fp)
   30f10:	10800017 	ldw	r2,0(r2)
   30f14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   30f18:	e0bffd17 	ldw	r2,-12(fp)
   30f1c:	10800403 	ldbu	r2,16(r2)
   30f20:	10803fcc 	andi	r2,r2,255
   30f24:	10000426 	beq	r2,zero,30f38 <alt_tick+0x54>
   30f28:	d0a73b17 	ldw	r2,-25364(gp)
   30f2c:	1000021e 	bne	r2,zero,30f38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   30f30:	e0bffd17 	ldw	r2,-12(fp)
   30f34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   30f38:	e0bffd17 	ldw	r2,-12(fp)
   30f3c:	10800217 	ldw	r2,8(r2)
   30f40:	d0e73b17 	ldw	r3,-25364(gp)
   30f44:	18801d36 	bltu	r3,r2,30fbc <alt_tick+0xd8>
   30f48:	e0bffd17 	ldw	r2,-12(fp)
   30f4c:	10800403 	ldbu	r2,16(r2)
   30f50:	10803fcc 	andi	r2,r2,255
   30f54:	1000191e 	bne	r2,zero,30fbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   30f58:	e0bffd17 	ldw	r2,-12(fp)
   30f5c:	10800317 	ldw	r2,12(r2)
   30f60:	e0fffd17 	ldw	r3,-12(fp)
   30f64:	18c00517 	ldw	r3,20(r3)
   30f68:	1809883a 	mov	r4,r3
   30f6c:	103ee83a 	callr	r2
   30f70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   30f74:	e0bfff17 	ldw	r2,-4(fp)
   30f78:	1000031e 	bne	r2,zero,30f88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   30f7c:	e13ffd17 	ldw	r4,-12(fp)
   30f80:	0030e480 	call	30e48 <alt_alarm_stop>
   30f84:	00000d06 	br	30fbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   30f88:	e0bffd17 	ldw	r2,-12(fp)
   30f8c:	10c00217 	ldw	r3,8(r2)
   30f90:	e0bfff17 	ldw	r2,-4(fp)
   30f94:	1887883a 	add	r3,r3,r2
   30f98:	e0bffd17 	ldw	r2,-12(fp)
   30f9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   30fa0:	e0bffd17 	ldw	r2,-12(fp)
   30fa4:	10c00217 	ldw	r3,8(r2)
   30fa8:	d0a73b17 	ldw	r2,-25364(gp)
   30fac:	1880032e 	bgeu	r3,r2,30fbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   30fb0:	e0bffd17 	ldw	r2,-12(fp)
   30fb4:	00c00044 	movi	r3,1
   30fb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   30fbc:	e0bffe17 	ldw	r2,-8(fp)
   30fc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30fc4:	e0fffd17 	ldw	r3,-12(fp)
   30fc8:	d0a01204 	addi	r2,gp,-32696
   30fcc:	18bfcf1e 	bne	r3,r2,30f0c <__alt_data_end+0xf4030f0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   30fd0:	0001883a 	nop
}
   30fd4:	0001883a 	nop
   30fd8:	e037883a 	mov	sp,fp
   30fdc:	dfc00117 	ldw	ra,4(sp)
   30fe0:	df000017 	ldw	fp,0(sp)
   30fe4:	dec00204 	addi	sp,sp,8
   30fe8:	f800283a 	ret

00030fec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   30fec:	deffff04 	addi	sp,sp,-4
   30ff0:	df000015 	stw	fp,0(sp)
   30ff4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   30ff8:	000170fa 	wrctl	ienable,zero
}
   30ffc:	0001883a 	nop
   31000:	e037883a 	mov	sp,fp
   31004:	df000017 	ldw	fp,0(sp)
   31008:	dec00104 	addi	sp,sp,4
   3100c:	f800283a 	ret

00031010 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   31010:	defffb04 	addi	sp,sp,-20
   31014:	dfc00415 	stw	ra,16(sp)
   31018:	df000315 	stw	fp,12(sp)
   3101c:	df000304 	addi	fp,sp,12
   31020:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   31024:	d0a00617 	ldw	r2,-32744(gp)
   31028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3102c:	00003106 	br	310f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   31030:	e0bffd17 	ldw	r2,-12(fp)
   31034:	10800217 	ldw	r2,8(r2)
   31038:	1009883a 	mov	r4,r2
   3103c:	00212600 	call	21260 <strlen>
   31040:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   31044:	e0bffd17 	ldw	r2,-12(fp)
   31048:	10c00217 	ldw	r3,8(r2)
   3104c:	e0bffe17 	ldw	r2,-8(fp)
   31050:	10bfffc4 	addi	r2,r2,-1
   31054:	1885883a 	add	r2,r3,r2
   31058:	10800003 	ldbu	r2,0(r2)
   3105c:	10803fcc 	andi	r2,r2,255
   31060:	1080201c 	xori	r2,r2,128
   31064:	10bfe004 	addi	r2,r2,-128
   31068:	10800bd8 	cmpnei	r2,r2,47
   3106c:	1000031e 	bne	r2,zero,3107c <alt_find_file+0x6c>
    {
      len -= 1;
   31070:	e0bffe17 	ldw	r2,-8(fp)
   31074:	10bfffc4 	addi	r2,r2,-1
   31078:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3107c:	e0bffe17 	ldw	r2,-8(fp)
   31080:	e0ffff17 	ldw	r3,-4(fp)
   31084:	1885883a 	add	r2,r3,r2
   31088:	10800003 	ldbu	r2,0(r2)
   3108c:	10803fcc 	andi	r2,r2,255
   31090:	1080201c 	xori	r2,r2,128
   31094:	10bfe004 	addi	r2,r2,-128
   31098:	10800be0 	cmpeqi	r2,r2,47
   3109c:	1000081e 	bne	r2,zero,310c0 <alt_find_file+0xb0>
   310a0:	e0bffe17 	ldw	r2,-8(fp)
   310a4:	e0ffff17 	ldw	r3,-4(fp)
   310a8:	1885883a 	add	r2,r3,r2
   310ac:	10800003 	ldbu	r2,0(r2)
   310b0:	10803fcc 	andi	r2,r2,255
   310b4:	1080201c 	xori	r2,r2,128
   310b8:	10bfe004 	addi	r2,r2,-128
   310bc:	10000a1e 	bne	r2,zero,310e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   310c0:	e0bffd17 	ldw	r2,-12(fp)
   310c4:	10800217 	ldw	r2,8(r2)
   310c8:	e0fffe17 	ldw	r3,-8(fp)
   310cc:	180d883a 	mov	r6,r3
   310d0:	e17fff17 	ldw	r5,-4(fp)
   310d4:	1009883a 	mov	r4,r2
   310d8:	00313340 	call	31334 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   310dc:	1000021e 	bne	r2,zero,310e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   310e0:	e0bffd17 	ldw	r2,-12(fp)
   310e4:	00000706 	br	31104 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   310e8:	e0bffd17 	ldw	r2,-12(fp)
   310ec:	10800017 	ldw	r2,0(r2)
   310f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   310f4:	e0fffd17 	ldw	r3,-12(fp)
   310f8:	d0a00604 	addi	r2,gp,-32744
   310fc:	18bfcc1e 	bne	r3,r2,31030 <__alt_data_end+0xf4031030>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   31100:	0005883a 	mov	r2,zero
}
   31104:	e037883a 	mov	sp,fp
   31108:	dfc00117 	ldw	ra,4(sp)
   3110c:	df000017 	ldw	fp,0(sp)
   31110:	dec00204 	addi	sp,sp,8
   31114:	f800283a 	ret

00031118 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   31118:	defffc04 	addi	sp,sp,-16
   3111c:	df000315 	stw	fp,12(sp)
   31120:	df000304 	addi	fp,sp,12
   31124:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   31128:	00bffa04 	movi	r2,-24
   3112c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   31130:	e03ffd15 	stw	zero,-12(fp)
   31134:	00001906 	br	3119c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   31138:	008000f4 	movhi	r2,3
   3113c:	10893904 	addi	r2,r2,9444
   31140:	e0fffd17 	ldw	r3,-12(fp)
   31144:	18c00324 	muli	r3,r3,12
   31148:	10c5883a 	add	r2,r2,r3
   3114c:	10800017 	ldw	r2,0(r2)
   31150:	10000f1e 	bne	r2,zero,31190 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   31154:	008000f4 	movhi	r2,3
   31158:	10893904 	addi	r2,r2,9444
   3115c:	e0fffd17 	ldw	r3,-12(fp)
   31160:	18c00324 	muli	r3,r3,12
   31164:	10c5883a 	add	r2,r2,r3
   31168:	e0ffff17 	ldw	r3,-4(fp)
   3116c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   31170:	d0e00a17 	ldw	r3,-32728(gp)
   31174:	e0bffd17 	ldw	r2,-12(fp)
   31178:	1880020e 	bge	r3,r2,31184 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   3117c:	e0bffd17 	ldw	r2,-12(fp)
   31180:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   31184:	e0bffd17 	ldw	r2,-12(fp)
   31188:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   3118c:	00000606 	br	311a8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   31190:	e0bffd17 	ldw	r2,-12(fp)
   31194:	10800044 	addi	r2,r2,1
   31198:	e0bffd15 	stw	r2,-12(fp)
   3119c:	e0bffd17 	ldw	r2,-12(fp)
   311a0:	10800810 	cmplti	r2,r2,32
   311a4:	103fe41e 	bne	r2,zero,31138 <__alt_data_end+0xf4031138>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   311a8:	e0bffe17 	ldw	r2,-8(fp)
}
   311ac:	e037883a 	mov	sp,fp
   311b0:	df000017 	ldw	fp,0(sp)
   311b4:	dec00104 	addi	sp,sp,4
   311b8:	f800283a 	ret

000311bc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   311bc:	defffb04 	addi	sp,sp,-20
   311c0:	df000415 	stw	fp,16(sp)
   311c4:	df000404 	addi	fp,sp,16
   311c8:	e13ffe15 	stw	r4,-8(fp)
   311cc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   311d0:	e0bfff17 	ldw	r2,-4(fp)
   311d4:	10840070 	cmpltui	r2,r2,4097
   311d8:	1000021e 	bne	r2,zero,311e4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   311dc:	00840004 	movi	r2,4096
   311e0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   311e4:	e0fffe17 	ldw	r3,-8(fp)
   311e8:	e0bfff17 	ldw	r2,-4(fp)
   311ec:	1885883a 	add	r2,r3,r2
   311f0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   311f4:	e0bffe17 	ldw	r2,-8(fp)
   311f8:	e0bffc15 	stw	r2,-16(fp)
   311fc:	00000506 	br	31214 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   31200:	e0bffc17 	ldw	r2,-16(fp)
   31204:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   31208:	e0bffc17 	ldw	r2,-16(fp)
   3120c:	10800804 	addi	r2,r2,32
   31210:	e0bffc15 	stw	r2,-16(fp)
   31214:	e0fffc17 	ldw	r3,-16(fp)
   31218:	e0bffd17 	ldw	r2,-12(fp)
   3121c:	18bff836 	bltu	r3,r2,31200 <__alt_data_end+0xf4031200>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   31220:	e0bffe17 	ldw	r2,-8(fp)
   31224:	108007cc 	andi	r2,r2,31
   31228:	10000226 	beq	r2,zero,31234 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   3122c:	e0bffc17 	ldw	r2,-16(fp)
   31230:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   31234:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   31238:	0001883a 	nop
   3123c:	e037883a 	mov	sp,fp
   31240:	df000017 	ldw	fp,0(sp)
   31244:	dec00104 	addi	sp,sp,4
   31248:	f800283a 	ret

0003124c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   3124c:	defffe04 	addi	sp,sp,-8
   31250:	df000115 	stw	fp,4(sp)
   31254:	df000104 	addi	fp,sp,4
   31258:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   3125c:	e0bfff17 	ldw	r2,-4(fp)
   31260:	10bffe84 	addi	r2,r2,-6
   31264:	10c00428 	cmpgeui	r3,r2,16
   31268:	18001a1e 	bne	r3,zero,312d4 <alt_exception_cause_generated_bad_addr+0x88>
   3126c:	100690ba 	slli	r3,r2,2
   31270:	008000f4 	movhi	r2,3
   31274:	1084a104 	addi	r2,r2,4740
   31278:	1885883a 	add	r2,r3,r2
   3127c:	10800017 	ldw	r2,0(r2)
   31280:	1000683a 	jmp	r2
   31284:	000312c4 	movi	zero,3147
   31288:	000312c4 	movi	zero,3147
   3128c:	000312d4 	movui	zero,3147
   31290:	000312d4 	movui	zero,3147
   31294:	000312d4 	movui	zero,3147
   31298:	000312c4 	movi	zero,3147
   3129c:	000312cc 	andi	zero,zero,3147
   312a0:	000312d4 	movui	zero,3147
   312a4:	000312c4 	movi	zero,3147
   312a8:	000312c4 	movi	zero,3147
   312ac:	000312d4 	movui	zero,3147
   312b0:	000312c4 	movi	zero,3147
   312b4:	000312cc 	andi	zero,zero,3147
   312b8:	000312d4 	movui	zero,3147
   312bc:	000312d4 	movui	zero,3147
   312c0:	000312c4 	movi	zero,3147
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   312c4:	00800044 	movi	r2,1
   312c8:	00000306 	br	312d8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   312cc:	0005883a 	mov	r2,zero
   312d0:	00000106 	br	312d8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   312d4:	0005883a 	mov	r2,zero
  }
}
   312d8:	e037883a 	mov	sp,fp
   312dc:	df000017 	ldw	fp,0(sp)
   312e0:	dec00104 	addi	sp,sp,4
   312e4:	f800283a 	ret

000312e8 <atexit>:
   312e8:	200b883a 	mov	r5,r4
   312ec:	000f883a 	mov	r7,zero
   312f0:	000d883a 	mov	r6,zero
   312f4:	0009883a 	mov	r4,zero
   312f8:	00313b01 	jmpi	313b0 <__register_exitproc>

000312fc <exit>:
   312fc:	defffe04 	addi	sp,sp,-8
   31300:	000b883a 	mov	r5,zero
   31304:	dc000015 	stw	r16,0(sp)
   31308:	dfc00115 	stw	ra,4(sp)
   3130c:	2021883a 	mov	r16,r4
   31310:	00314c80 	call	314c8 <__call_exitprocs>
   31314:	008000f4 	movhi	r2,3
   31318:	108e0a04 	addi	r2,r2,14376
   3131c:	11000017 	ldw	r4,0(r2)
   31320:	20800f17 	ldw	r2,60(r4)
   31324:	10000126 	beq	r2,zero,3132c <exit+0x30>
   31328:	103ee83a 	callr	r2
   3132c:	8009883a 	mov	r4,r16
   31330:	00316480 	call	31648 <_exit>

00031334 <memcmp>:
   31334:	01c000c4 	movi	r7,3
   31338:	3980192e 	bgeu	r7,r6,313a0 <memcmp+0x6c>
   3133c:	2144b03a 	or	r2,r4,r5
   31340:	11c4703a 	and	r2,r2,r7
   31344:	10000f26 	beq	r2,zero,31384 <memcmp+0x50>
   31348:	20800003 	ldbu	r2,0(r4)
   3134c:	28c00003 	ldbu	r3,0(r5)
   31350:	10c0151e 	bne	r2,r3,313a8 <memcmp+0x74>
   31354:	31bfff84 	addi	r6,r6,-2
   31358:	01ffffc4 	movi	r7,-1
   3135c:	00000406 	br	31370 <memcmp+0x3c>
   31360:	20800003 	ldbu	r2,0(r4)
   31364:	28c00003 	ldbu	r3,0(r5)
   31368:	31bfffc4 	addi	r6,r6,-1
   3136c:	10c00e1e 	bne	r2,r3,313a8 <memcmp+0x74>
   31370:	21000044 	addi	r4,r4,1
   31374:	29400044 	addi	r5,r5,1
   31378:	31fff91e 	bne	r6,r7,31360 <__alt_data_end+0xf4031360>
   3137c:	0005883a 	mov	r2,zero
   31380:	f800283a 	ret
   31384:	20c00017 	ldw	r3,0(r4)
   31388:	28800017 	ldw	r2,0(r5)
   3138c:	18bfee1e 	bne	r3,r2,31348 <__alt_data_end+0xf4031348>
   31390:	31bfff04 	addi	r6,r6,-4
   31394:	21000104 	addi	r4,r4,4
   31398:	29400104 	addi	r5,r5,4
   3139c:	39bff936 	bltu	r7,r6,31384 <__alt_data_end+0xf4031384>
   313a0:	303fe91e 	bne	r6,zero,31348 <__alt_data_end+0xf4031348>
   313a4:	003ff506 	br	3137c <__alt_data_end+0xf403137c>
   313a8:	10c5c83a 	sub	r2,r2,r3
   313ac:	f800283a 	ret

000313b0 <__register_exitproc>:
   313b0:	defffa04 	addi	sp,sp,-24
   313b4:	dc000315 	stw	r16,12(sp)
   313b8:	040000f4 	movhi	r16,3
   313bc:	840e0a04 	addi	r16,r16,14376
   313c0:	80c00017 	ldw	r3,0(r16)
   313c4:	dc400415 	stw	r17,16(sp)
   313c8:	dfc00515 	stw	ra,20(sp)
   313cc:	18805217 	ldw	r2,328(r3)
   313d0:	2023883a 	mov	r17,r4
   313d4:	10003726 	beq	r2,zero,314b4 <__register_exitproc+0x104>
   313d8:	10c00117 	ldw	r3,4(r2)
   313dc:	010007c4 	movi	r4,31
   313e0:	20c00e16 	blt	r4,r3,3141c <__register_exitproc+0x6c>
   313e4:	1a000044 	addi	r8,r3,1
   313e8:	8800221e 	bne	r17,zero,31474 <__register_exitproc+0xc4>
   313ec:	18c00084 	addi	r3,r3,2
   313f0:	18c7883a 	add	r3,r3,r3
   313f4:	18c7883a 	add	r3,r3,r3
   313f8:	12000115 	stw	r8,4(r2)
   313fc:	10c7883a 	add	r3,r2,r3
   31400:	19400015 	stw	r5,0(r3)
   31404:	0005883a 	mov	r2,zero
   31408:	dfc00517 	ldw	ra,20(sp)
   3140c:	dc400417 	ldw	r17,16(sp)
   31410:	dc000317 	ldw	r16,12(sp)
   31414:	dec00604 	addi	sp,sp,24
   31418:	f800283a 	ret
   3141c:	00800034 	movhi	r2,0
   31420:	10800004 	addi	r2,r2,0
   31424:	10002626 	beq	r2,zero,314c0 <__register_exitproc+0x110>
   31428:	01006404 	movi	r4,400
   3142c:	d9400015 	stw	r5,0(sp)
   31430:	d9800115 	stw	r6,4(sp)
   31434:	d9c00215 	stw	r7,8(sp)
   31438:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>
   3143c:	d9400017 	ldw	r5,0(sp)
   31440:	d9800117 	ldw	r6,4(sp)
   31444:	d9c00217 	ldw	r7,8(sp)
   31448:	10001d26 	beq	r2,zero,314c0 <__register_exitproc+0x110>
   3144c:	81000017 	ldw	r4,0(r16)
   31450:	10000115 	stw	zero,4(r2)
   31454:	02000044 	movi	r8,1
   31458:	22405217 	ldw	r9,328(r4)
   3145c:	0007883a 	mov	r3,zero
   31460:	12400015 	stw	r9,0(r2)
   31464:	20805215 	stw	r2,328(r4)
   31468:	10006215 	stw	zero,392(r2)
   3146c:	10006315 	stw	zero,396(r2)
   31470:	883fde26 	beq	r17,zero,313ec <__alt_data_end+0xf40313ec>
   31474:	18c9883a 	add	r4,r3,r3
   31478:	2109883a 	add	r4,r4,r4
   3147c:	1109883a 	add	r4,r2,r4
   31480:	21802215 	stw	r6,136(r4)
   31484:	01800044 	movi	r6,1
   31488:	12406217 	ldw	r9,392(r2)
   3148c:	30cc983a 	sll	r6,r6,r3
   31490:	4992b03a 	or	r9,r9,r6
   31494:	12406215 	stw	r9,392(r2)
   31498:	21c04215 	stw	r7,264(r4)
   3149c:	01000084 	movi	r4,2
   314a0:	893fd21e 	bne	r17,r4,313ec <__alt_data_end+0xf40313ec>
   314a4:	11006317 	ldw	r4,396(r2)
   314a8:	218cb03a 	or	r6,r4,r6
   314ac:	11806315 	stw	r6,396(r2)
   314b0:	003fce06 	br	313ec <__alt_data_end+0xf40313ec>
   314b4:	18805304 	addi	r2,r3,332
   314b8:	18805215 	stw	r2,328(r3)
   314bc:	003fc606 	br	313d8 <__alt_data_end+0xf40313d8>
   314c0:	00bfffc4 	movi	r2,-1
   314c4:	003fd006 	br	31408 <__alt_data_end+0xf4031408>

000314c8 <__call_exitprocs>:
   314c8:	defff504 	addi	sp,sp,-44
   314cc:	df000915 	stw	fp,36(sp)
   314d0:	dd400615 	stw	r21,24(sp)
   314d4:	dc800315 	stw	r18,12(sp)
   314d8:	dfc00a15 	stw	ra,40(sp)
   314dc:	ddc00815 	stw	r23,32(sp)
   314e0:	dd800715 	stw	r22,28(sp)
   314e4:	dd000515 	stw	r20,20(sp)
   314e8:	dcc00415 	stw	r19,16(sp)
   314ec:	dc400215 	stw	r17,8(sp)
   314f0:	dc000115 	stw	r16,4(sp)
   314f4:	d9000015 	stw	r4,0(sp)
   314f8:	2839883a 	mov	fp,r5
   314fc:	04800044 	movi	r18,1
   31500:	057fffc4 	movi	r21,-1
   31504:	008000f4 	movhi	r2,3
   31508:	108e0a04 	addi	r2,r2,14376
   3150c:	12000017 	ldw	r8,0(r2)
   31510:	45005217 	ldw	r20,328(r8)
   31514:	44c05204 	addi	r19,r8,328
   31518:	a0001c26 	beq	r20,zero,3158c <__call_exitprocs+0xc4>
   3151c:	a0800117 	ldw	r2,4(r20)
   31520:	15ffffc4 	addi	r23,r2,-1
   31524:	b8000d16 	blt	r23,zero,3155c <__call_exitprocs+0x94>
   31528:	14000044 	addi	r16,r2,1
   3152c:	8421883a 	add	r16,r16,r16
   31530:	8421883a 	add	r16,r16,r16
   31534:	84402004 	addi	r17,r16,128
   31538:	a463883a 	add	r17,r20,r17
   3153c:	a421883a 	add	r16,r20,r16
   31540:	e0001e26 	beq	fp,zero,315bc <__call_exitprocs+0xf4>
   31544:	80804017 	ldw	r2,256(r16)
   31548:	e0801c26 	beq	fp,r2,315bc <__call_exitprocs+0xf4>
   3154c:	bdffffc4 	addi	r23,r23,-1
   31550:	843fff04 	addi	r16,r16,-4
   31554:	8c7fff04 	addi	r17,r17,-4
   31558:	bd7ff91e 	bne	r23,r21,31540 <__alt_data_end+0xf4031540>
   3155c:	00800034 	movhi	r2,0
   31560:	10800004 	addi	r2,r2,0
   31564:	10000926 	beq	r2,zero,3158c <__call_exitprocs+0xc4>
   31568:	a0800117 	ldw	r2,4(r20)
   3156c:	1000301e 	bne	r2,zero,31630 <__call_exitprocs+0x168>
   31570:	a0800017 	ldw	r2,0(r20)
   31574:	10003226 	beq	r2,zero,31640 <__call_exitprocs+0x178>
   31578:	a009883a 	mov	r4,r20
   3157c:	98800015 	stw	r2,0(r19)
   31580:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>
   31584:	9d000017 	ldw	r20,0(r19)
   31588:	a03fe41e 	bne	r20,zero,3151c <__alt_data_end+0xf403151c>
   3158c:	dfc00a17 	ldw	ra,40(sp)
   31590:	df000917 	ldw	fp,36(sp)
   31594:	ddc00817 	ldw	r23,32(sp)
   31598:	dd800717 	ldw	r22,28(sp)
   3159c:	dd400617 	ldw	r21,24(sp)
   315a0:	dd000517 	ldw	r20,20(sp)
   315a4:	dcc00417 	ldw	r19,16(sp)
   315a8:	dc800317 	ldw	r18,12(sp)
   315ac:	dc400217 	ldw	r17,8(sp)
   315b0:	dc000117 	ldw	r16,4(sp)
   315b4:	dec00b04 	addi	sp,sp,44
   315b8:	f800283a 	ret
   315bc:	a0800117 	ldw	r2,4(r20)
   315c0:	80c00017 	ldw	r3,0(r16)
   315c4:	10bfffc4 	addi	r2,r2,-1
   315c8:	15c01426 	beq	r2,r23,3161c <__call_exitprocs+0x154>
   315cc:	80000015 	stw	zero,0(r16)
   315d0:	183fde26 	beq	r3,zero,3154c <__alt_data_end+0xf403154c>
   315d4:	95c8983a 	sll	r4,r18,r23
   315d8:	a0806217 	ldw	r2,392(r20)
   315dc:	a5800117 	ldw	r22,4(r20)
   315e0:	2084703a 	and	r2,r4,r2
   315e4:	10000b26 	beq	r2,zero,31614 <__call_exitprocs+0x14c>
   315e8:	a0806317 	ldw	r2,396(r20)
   315ec:	2088703a 	and	r4,r4,r2
   315f0:	20000c1e 	bne	r4,zero,31624 <__call_exitprocs+0x15c>
   315f4:	89400017 	ldw	r5,0(r17)
   315f8:	d9000017 	ldw	r4,0(sp)
   315fc:	183ee83a 	callr	r3
   31600:	a0800117 	ldw	r2,4(r20)
   31604:	15bfbf1e 	bne	r2,r22,31504 <__alt_data_end+0xf4031504>
   31608:	98800017 	ldw	r2,0(r19)
   3160c:	153fcf26 	beq	r2,r20,3154c <__alt_data_end+0xf403154c>
   31610:	003fbc06 	br	31504 <__alt_data_end+0xf4031504>
   31614:	183ee83a 	callr	r3
   31618:	003ff906 	br	31600 <__alt_data_end+0xf4031600>
   3161c:	a5c00115 	stw	r23,4(r20)
   31620:	003feb06 	br	315d0 <__alt_data_end+0xf40315d0>
   31624:	89000017 	ldw	r4,0(r17)
   31628:	183ee83a 	callr	r3
   3162c:	003ff406 	br	31600 <__alt_data_end+0xf4031600>
   31630:	a0800017 	ldw	r2,0(r20)
   31634:	a027883a 	mov	r19,r20
   31638:	1029883a 	mov	r20,r2
   3163c:	003fb606 	br	31518 <__alt_data_end+0xf4031518>
   31640:	0005883a 	mov	r2,zero
   31644:	003ffb06 	br	31634 <__alt_data_end+0xf4031634>

00031648 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   31648:	defffd04 	addi	sp,sp,-12
   3164c:	df000215 	stw	fp,8(sp)
   31650:	df000204 	addi	fp,sp,8
   31654:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   31658:	0001883a 	nop
   3165c:	e0bfff17 	ldw	r2,-4(fp)
   31660:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   31664:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   31668:	10000226 	beq	r2,zero,31674 <_exit+0x2c>
    ALT_SIM_FAIL();
   3166c:	002af070 	cmpltui	zero,zero,43969
   31670:	00000106 	br	31678 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   31674:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   31678:	003fff06 	br	31678 <__alt_data_end+0xf4031678>
