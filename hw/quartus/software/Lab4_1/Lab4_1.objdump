
Lab4_1.elf:     file format elf32-littlenios2
Lab4_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000228

Program Header:
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x04000000 align 2**12
         filesz 0x00000228 memsz 0x00000228 flags r-x
    LOAD off    0x00002228 vaddr 0x04000228 paddr 0x04000228 align 2**12
         filesz 0x0000be44 memsz 0x0000be44 flags r-x
    LOAD off    0x0000e06c vaddr 0x0400c06c paddr 0x0400db38 align 2**12
         filesz 0x00001acc memsz 0x00001acc flags rw-
    LOAD off    0x00010604 vaddr 0x0400f604 paddr 0x0400f604 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-
    LOAD off    0x00010000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00010000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  08020020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ba5c  04000228  04000228  00002228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e8  0400bc84  0400bc84  0000dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001acc  0400c06c  0400db38  0000e06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0400f604  0400f604  00010604  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_controller 00000000  0400f758  0400f758  00010020  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08020248  08020248  00010020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d68  00000000  00000000  00010048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001b3c3  00000000  00000000  00010db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007bae  00000000  00000000  0002c173  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000948f  00000000  00000000  00033d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002044  00000000  00000000  0003d1b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039a6  00000000  00000000  0003f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000de2c  00000000  00000000  00042b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000509c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000011a8  00000000  00000000  00050a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00054de2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00054de5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00054dea  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00054deb  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00054dec  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00054df0  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00054df4  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00054df8  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00054e03  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00054e0e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00054e19  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00054e24  2**0
                  CONTENTS, READONLY
 30 .jdi          0000522e  00000000  00000000  00054e63  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00060ce8  00000000  00000000  0005a091  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
04000228 l    d  .text	00000000 .text
0400bc84 l    d  .rodata	00000000 .rodata
0400c06c l    d  .rwdata	00000000 .rwdata
0400f604 l    d  .bss	00000000 .bss
0400f758 l    d  .SDRAM_controller	00000000 .SDRAM_controller
08020248 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_1_bsp//obj/HAL/src/crt0.o
04000270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0400bda8 l     O .rodata	00000108 two_over_pi
0400bd28 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0400bef0 l     O .rodata	00000010 init_jk
0400beb0 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
04005c1c l     F .text	00000008 __fp_unlock
04005c30 l     F .text	0000019c __sinit.part.1
04005dcc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0400c06c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
040086c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
040087d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040087fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
040088e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040089c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04008ab4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04008c88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400db28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04008f04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04009038 l     F .text	00000034 alt_dev_reg
0400ca40 l     O .rwdata	00001060 jtag_uart_0
0400daa0 l     O .rwdata	00000030 audio_and_video_config_0
0400dad0 l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04009320 l     F .text	00000210 altera_avalon_jtag_uart_irq
04009530 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400acd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400af3c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400b1fc l     F .text	0000003c alt_get_errno
0400b238 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400f62c g     O .bss	00000004 alt_instruction_exception_handler
0400a454 g     F .text	00000038 alt_up_av_config_reset
0400a8ac g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
04008670 g     F .text	00000054 _isatty_r
0400a4c4 g     F .text	00000034 alt_up_av_config_disable_interrupt
04008bc4 g     F .text	0000007c alt_main
04005ab0 g     F .text	000000c0 _puts_r
0400f658 g     O .bss	00000100 alt_irq
04002598 g     F .text	00000014 fabs
04008398 g     F .text	00000060 _lseek_r
0400db38 g       *ABS*	00000000 __flash_rwdata_start
04004668 g     F .text	00000088 .hidden __eqdf2
04009e10 g     F .text	00000060 alt_up_audio_read_fifo_avail
0400a588 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
0400f758 g       *ABS*	00000000 __alt_heap_start
04009e70 g     F .text	00000068 alt_up_audio_record_r
0400794c g     F .text	0000005c __sseek
04005f6c g     F .text	00000010 __sinit
04005dd4 g     F .text	00000068 __sfmoreglue
04008c64 g     F .text	00000024 __malloc_unlock
04002b04 g     F .text	00000440 .hidden __divsf3
04009d7c g     F .text	00000094 alt_up_audio_reset_audio_core
04007038 g     F .text	0000015c memmove
04005f54 g     F .text	00000018 _cleanup
04003340 g     F .text	00000070 .hidden __fixsfsi
040046f0 g     F .text	000000dc .hidden __gtdf2
0400b5f4 g     F .text	00000024 altera_nios2_gen2_irq_init
08020000 g     F .entry	0000001c __reset
04000000 g       *ABS*	00000000 __flash_exceptions_start
04008614 g     F .text	0000005c _fstat_r
0400f610 g     O .bss	00000004 errno
040025ac g     F .text	000001ec floor
040078c8 g     F .text	00000008 __seofread
04009d3c g     F .text	00000040 alt_up_audio_write_interrupt_pending
0400f618 g     O .bss	00000004 alt_argv
04015b00 g       *ABS*	00000000 _gp
04008ed4 g     F .text	00000030 usleep
0400c8c0 g     O .rwdata	00000180 alt_fd_list
0400092c g     F .text	0000076c __ieee754_rem_pio2
0400ae78 g     F .text	00000090 alt_find_dev
04006ef0 g     F .text	00000148 memcpy
04005c24 g     F .text	0000000c _cleanup_r
04005860 g     F .text	000000dc .hidden __floatsidf
0400b000 g     F .text	0000007c alt_io_redirect
0400bc84 g       *ABS*	00000000 __DTOR_END__
04005b70 g     F .text	00000014 puts
0400b854 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400a258 g     F .text	00000050 alt_up_audio_read_fifo_head
04009728 g     F .text	0000021c altera_avalon_jtag_uart_read
04002a48 g     F .text	00000064 .hidden __udivsi3
04008924 g     F .text	000000a4 isatty
04001098 g     F .text	000004a4 __kernel_cos
0400b7c4 g     F .text	00000090 alt_icache_flush
0400f60c g     O .bss	00000004 __malloc_top_pad
0400a3d4 g     F .text	00000080 alt_up_av_config_read_data
04005fbc g     F .text	000004bc __sfvwrite_r
04007820 g     F .text	00000054 _sbrk_r
040085b4 g     F .text	00000060 _read_r
0400db20 g     O .rwdata	00000004 alt_max_fd
0400a2a8 g     F .text	00000068 alt_up_audio_write_fifo_head
04007bb8 g     F .text	000000f0 _fclose_r
04007f34 g     F .text	00000030 fflush
0400f608 g     O .bss	00000004 __malloc_max_sbrked_mem
0400b07c g     F .text	00000180 alt_irq_register
040022cc g     F .text	000002cc __kernel_sin
0400593c g     F .text	00000110 .hidden __extendsfdf2
040034d4 g     F .text	000008ac .hidden __adddf3
04008af0 g     F .text	000000d4 lseek
0400db00 g     O .rwdata	00000004 _global_impure_ptr
040072bc g     F .text	00000564 _realloc_r
0400f758 g       *ABS*	00000000 __bss_end
0400b4ec g     F .text	00000108 alt_tick
04009b68 g     F .text	0000003c alt_up_audio_open_dev
04005f8c g     F .text	00000018 __fp_lock_all
04009fa0 g     F .text	00000068 alt_up_audio_play_r
0400b450 g     F .text	0000009c alt_alarm_stop
0400f620 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d8 alt_irq_handler
0400c898 g     O .rwdata	00000028 alt_dev_null
0400153c g     F .text	00000d90 __kernel_rem_pio2
0400ac90 g     F .text	00000048 alt_dcache_flush_all
040057e0 g     F .text	00000080 .hidden __fixdfsi
0400db38 g       *ABS*	00000000 __ram_rwdata_end
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory
0400db18 g     O .rwdata	00000008 alt_dev_list
04008f40 g     F .text	000000f8 write
0400c06c g       *ABS*	00000000 __ram_rodata_end
04008838 g     F .text	000000b0 fstat
04002aac g     F .text	00000058 .hidden __umodsi3
0400f758 g       *ABS*	00000000 end
0400926c g     F .text	000000b4 altera_avalon_jtag_uart_init
080201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0400bc84 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04005a4c g     F .text	00000064 .hidden __clzsi2
04009944 g     F .text	00000224 altera_avalon_jtag_uart_write
04005f7c g     F .text	00000004 __sfp_lock_acquire
04006e0c g     F .text	000000e4 memchr
04008088 g     F .text	00000310 _free_r
0400bad0 g     F .text	00000180 __call_exitprocs
0400db08 g     O .rwdata	00000004 __malloc_sbrk_base
04000228 g     F .text	0000004c _start
0400f624 g     O .bss	00000004 _alt_tick_rate
04000534 g     F .text	000000f8 play_file
0400083c g     F .text	000000f0 sin
0400a150 g     F .text	00000108 alt_up_audio_write_fifo
0400a370 g     F .text	00000064 alt_up_av_config_write_data
0400f628 g     O .bss	00000004 _alt_nticks
04008cc4 g     F .text	000000fc read
040090a4 g     F .text	00000064 alt_sys_init
040033b0 g     F .text	00000124 .hidden __floatsisf
0400a070 g     F .text	000000e0 alt_up_audio_read_fifo
0400b9b8 g     F .text	00000118 __register_exitproc
0400a9b4 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
04009ca4 g     F .text	00000058 alt_up_audio_disable_write_interrupt
040095d0 g     F .text	00000068 altera_avalon_jtag_uart_close
0400c06c g       *ABS*	00000000 __ram_rwdata_start
0400bc84 g       *ABS*	00000000 __ram_rodata_start
0400f630 g     O .bss	00000028 __malloc_current_mallinfo
04009108 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400b720 g     F .text	000000a4 alt_get_fd
0400ab38 g     F .text	00000158 alt_busy_sleep
04007b64 g     F .text	00000054 _close_r
04009c50 g     F .text	00000054 alt_up_audio_enable_write_interrupt
0400b93c g     F .text	0000007c memcmp
040091c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0400f758 g       *ABS*	00000000 __alt_stack_base
04009218 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04007a10 g     F .text	00000154 __swsetup_r
04003d80 g     F .text	000008e8 .hidden __divdf3
04009bf8 g     F .text	00000058 alt_up_audio_disable_read_interrupt
04005e3c g     F .text	00000118 __sfp
0400c490 g     O .rwdata	00000408 __malloc_av_
04005f88 g     F .text	00000004 __sinit_lock_release
040047cc g     F .text	00000718 .hidden __muldf3
04007874 g     F .text	00000054 __sread
0400b618 g     F .text	00000108 alt_find_file
0400ad14 g     F .text	000000a4 alt_dev_llist_insert
04008c40 g     F .text	00000024 __malloc_lock
04008e24 g     F .text	000000b0 sbrk
04007ed8 g     F .text	0000005c _fflush_r
0400f604 g       *ABS*	00000000 __bss_start
04007194 g     F .text	00000128 memset
04000274 g     F .text	000002c0 main
04009f40 g     F .text	00000060 alt_up_audio_write_fifo_space
0400f61c g     O .bss	00000004 alt_envp
0400f604 g     O .bss	00000004 __malloc_max_total_mem
04009168 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040079a8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04007ca8 g     F .text	00000014 fclose
04006600 g     F .text	0000080c _malloc_r
0400db24 g     O .rwdata	00000004 alt_errno
04006478 g     F .text	000000c4 _fwalk
04002950 g     F .text	00000084 .hidden __divsi3
04007f64 g     F .text	00000124 _malloc_trim_r
0400bc84 g       *ABS*	00000000 __CTOR_END__
04002f44 g     F .text	000003fc .hidden __mulsf3
0400bc84 g       *ABS*	00000000 __flash_rodata_start
0400bc84 g       *ABS*	00000000 __DTOR_LIST__
04002934 g     F .text	0000001c copysign
04004668 g     F .text	00000088 .hidden __nedf2
04000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
0400a310 g     F .text	00000060 alt_up_av_config_open_dev
0400906c g     F .text	00000038 alt_irq_init
04008dc0 g     F .text	00000064 alt_release_fd
0400bf00 g     O .rodata	00000100 .hidden __clz_tab
0400062c g     F .text	00000210 generate_sinusoid
0400b8f0 g     F .text	00000014 atexit
040079b0 g     F .text	00000060 _write_r
0400a550 g     F .text	00000038 alt_up_av_config_read_ready
0400db04 g     O .rwdata	00000004 _impure_ptr
0400f614 g     O .bss	00000004 alt_argc
04007cbc g     F .text	0000021c __sflush_r
04002798 g     F .text	0000019c scalbn
0400ae18 g     F .text	00000060 _do_dtors
08020020 g       .exceptions	00000000 alt_irq_entry
04005fa4 g     F .text	00000018 __fp_unlock_all
0400db10 g     O .rwdata	00000008 alt_fs_list
04009ed8 g     F .text	00000068 alt_up_audio_record_l
08020020 g       *ABS*	00000000 __ram_exceptions_start
0400a48c g     F .text	00000038 alt_up_av_config_enable_interrupt
0400a4f8 g     F .text	00000058 alt_up_av_config_read_acknowledge
0400a854 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
0400db38 g       *ABS*	00000000 _edata
0400f758 g       *ABS*	00000000 _end
08020248 g       *ABS*	00000000 __ram_exceptions_end
04009638 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400a008 g     F .text	00000068 alt_up_audio_play_l
040078d0 g     F .text	0000007c __swrite
0400db0c g     O .rwdata	00000004 __malloc_trim_threshold
0400b904 g     F .text	00000038 exit
0400653c g     F .text	000000c4 _fwalk_reent
0400a95c g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
040029d4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
04005f80 g     F .text	00000004 __sfp_lock_release
0400bc50 g     F .text	00000034 _exit
0400aa0c g     F .text	0000012c alt_alarm_start
040083f8 g     F .text	000001bc __smakebuf_r
04005b84 g     F .text	00000098 strlen
0400b2fc g     F .text	00000154 open
040046f0 g     F .text	000000dc .hidden __gedf2
0400a62c g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
0400af08 g     F .text	00000034 alt_icache_flush_all
0400db2c g     O .rwdata	00000004 alt_priority_mask
0400a904 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
04004ee4 g     F .text	000008fc .hidden __subdf3
0400db30 g     O .rwdata	00000008 alt_alarm_list
0400adb8 g     F .text	00000060 _do_ctors
04008700 g     F .text	000000d0 close
04008a30 g     F .text	00000084 alt_load
04009ba4 g     F .text	00000054 alt_up_audio_enable_read_interrupt
0400a714 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
04005f84 g     F .text	00000004 __sinit_lock_acquire
0400a7fc g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
04009cfc g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

08020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 802000c:	00bffd16 	blt	zero,r2,8020004 <__ram_exceptions_end+0xfffffdbc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8020014:	08408a14 	ori	at,at,552
    jmp r1
 8020018:	0800683a 	jmp	at
 802001c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x4000000>

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d40 	call	80201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001526 	beq	r2,zero,8020190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 802013c:	00810074 	movhi	r2,1025
 8020140:	10bd9604 	addi	r2,r2,-2472
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	00810074 	movhi	r2,1025
 8020158:	10bd9604 	addi	r2,r2,-2472
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	e17ffd17 	ldw	r5,-12(fp)
 8020174:	1009883a 	mov	r4,r2
 8020178:	183ee83a 	callr	r3
#endif
        break;
 802017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020180:	0005313a 	rdctl	r2,ipending
 8020184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020188:	e0bfff17 	ldw	r2,-4(fp)
 802018c:	00000706 	br	80201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 8020190:	e0bffc17 	ldw	r2,-16(fp)
 8020194:	1085883a 	add	r2,r2,r2
 8020198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 802019c:	e0bffd17 	ldw	r2,-12(fp)
 80201a0:	10800044 	addi	r2,r2,1
 80201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a8:	003fe006 	br	802012c <__ram_exceptions_end+0xfffffee4>

    active = alt_irq_pending ();
 80201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201b0:	e0bffb17 	ldw	r2,-20(fp)
 80201b4:	103fda1e 	bne	r2,zero,8020120 <__ram_exceptions_end+0xfffffed8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b8:	0001883a 	nop
}
 80201bc:	0001883a 	nop
 80201c0:	e037883a 	mov	sp,fp
 80201c4:	dfc00117 	ldw	ra,4(sp)
 80201c8:	df000017 	ldw	fp,0(sp)
 80201cc:	dec00204 	addi	sp,sp,8
 80201d0:	f800283a 	ret

080201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d4:	defffb04 	addi	sp,sp,-20
 80201d8:	dfc00415 	stw	ra,16(sp)
 80201dc:	df000315 	stw	fp,12(sp)
 80201e0:	df000304 	addi	fp,sp,12
 80201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80201e8:	000531fa 	rdctl	r2,exception
 80201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80201f0:	e0bffd17 	ldw	r2,-12(fp)
 80201f4:	10801f0c 	andi	r2,r2,124
 80201f8:	1004d0ba 	srli	r2,r2,2
 80201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 8020200:	0005333a 	rdctl	r2,badaddr
 8020204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8020208:	d0a6cb17 	ldw	r2,-25812(gp)
 802020c:	10000726 	beq	r2,zero,802022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8020210:	d0a6cb17 	ldw	r2,-25812(gp)
 8020214:	e0fffd17 	ldw	r3,-12(fp)
 8020218:	e1bffe17 	ldw	r6,-8(fp)
 802021c:	e17fff17 	ldw	r5,-4(fp)
 8020220:	1809883a 	mov	r4,r3
 8020224:	103ee83a 	callr	r2
 8020228:	00000206 	br	8020234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 802022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8020230:	0005883a 	mov	r2,zero
}
 8020234:	e037883a 	mov	sp,fp
 8020238:	dfc00117 	ldw	ra,4(sp)
 802023c:	df000017 	ldw	fp,0(sp)
 8020240:	dec00204 	addi	sp,sp,8
 8020244:	f800283a 	ret

Disassembly of section .text:

04000228 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000228:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 400022c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000230:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000234:	00bffd16 	blt	zero,r2,400022c <__ram_exceptions_end+0xfbfdffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000238:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 400023c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000240:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000244:	d696c014 	ori	gp,gp,23296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000248:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 400024c:	10bd8114 	ori	r2,r2,62980

    movhi r3, %hi(__bss_end)
 4000250:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000254:	18fdd614 	ori	r3,r3,63320

    beq r2, r3, 1f
 4000258:	10c00326 	beq	r2,r3,4000268 <_start+0x40>

0:
    stw zero, (r2)
 400025c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000264:	10fffd36 	bltu	r2,r3,400025c <__ram_exceptions_end+0xfbfe0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000268:	4008a300 	call	4008a30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 400026c:	4008bc40 	call	4008bc4 <alt_main>

04000270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000270:	003fff06 	br	4000270 <__ram_exceptions_end+0xfbfe0028>

04000274 <main>:

void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int* buffer);
void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device);

int main()
{
 4000274:	defffe04 	addi	sp,sp,-8
 4000278:	dfc00115 	stw	ra,4(sp)
 400027c:	df000015 	stw	fp,0(sp)
 4000280:	d839883a 	mov	fp,sp
 4000284:	023ffc74 	movhi	r8,65521
 4000288:	422ee604 	addi	r8,r8,-17512
 400028c:	da37883a 	add	sp,sp,r8
	int i = 0;
 4000290:	00bffc74 	movhi	r2,65521
 4000294:	10aee704 	addi	r2,r2,-17508
 4000298:	1705883a 	add	r2,r2,fp
 400029c:	10000015 	stw	zero,0(r2)
	unsigned int *audio_file_pointer, *end_of_recording;
	unsigned int audio_file[AUDIO_FILE_SIZE], recording[RECORDING_SIZE];
	int microphone_buffer[MICROPHONE_BUFFER_SIZE];
	unsigned int fifospace = 0, leftdata = 0, rightdata = 0;
 40002a0:	00fffc74 	movhi	r3,65521
 40002a4:	18eee804 	addi	r3,r3,-17504
 40002a8:	1f07883a 	add	r3,r3,fp
 40002ac:	18000015 	stw	zero,0(r3)
 40002b0:	013ffc74 	movhi	r4,65521
 40002b4:	212ee904 	addi	r4,r4,-17500
 40002b8:	2709883a 	add	r4,r4,fp
 40002bc:	20000015 	stw	zero,0(r4)
 40002c0:	00bffc74 	movhi	r2,65521
 40002c4:	10aeea04 	addi	r2,r2,-17496
 40002c8:	1705883a 	add	r2,r2,fp
 40002cc:	10000015 	stw	zero,0(r2)
	int incoming_right = 0, incoming_left = 0, n_in_FIFO;
 40002d0:	00fffc74 	movhi	r3,65521
 40002d4:	18eeeb04 	addi	r3,r3,-17492
 40002d8:	1f07883a 	add	r3,r3,fp
 40002dc:	18000015 	stw	zero,0(r3)
 40002e0:	013ffc74 	movhi	r4,65521
 40002e4:	212eec04 	addi	r4,r4,-17488
 40002e8:	2709883a 	add	r4,r4,fp
 40002ec:	20000015 	stw	zero,0(r4)
	alt_up_audio_dev *audio_device;
	alt_up_av_config_dev *audio_config;

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);
 40002f0:	01010074 	movhi	r4,1025
 40002f4:	212f2104 	addi	r4,r4,-17276
 40002f8:	4009b680 	call	4009b68 <alt_up_audio_open_dev>
 40002fc:	00fffc74 	movhi	r3,65521
 4000300:	18eeed04 	addi	r3,r3,-17484
 4000304:	1f07883a 	add	r3,r3,fp
 4000308:	18800015 	stw	r2,0(r3)
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
 400030c:	01010074 	movhi	r4,1025
 4000310:	212f2504 	addi	r4,r4,-17260
 4000314:	400a3100 	call	400a310 <alt_up_av_config_open_dev>
 4000318:	013ffc74 	movhi	r4,65521
 400031c:	212eee04 	addi	r4,r4,-17480
 4000320:	2709883a 	add	r4,r4,fp
 4000324:	20800015 	stw	r2,0(r4)


	while(!alt_up_av_config_read_ready(audio_config)){
 4000328:	00000306 	br	4000338 <main+0xc4>
		printf("Audio CODEC not ready\n");
 400032c:	01010074 	movhi	r4,1025
 4000330:	212f2d04 	addi	r4,r4,-17228
 4000334:	4005b700 	call	4005b70 <puts>

	audio_device = alt_up_audio_open_dev(AUDIO_0_NAME);
	audio_config = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);


	while(!alt_up_av_config_read_ready(audio_config)){
 4000338:	00bffc74 	movhi	r2,65521
 400033c:	10aeee04 	addi	r2,r2,-17480
 4000340:	1705883a 	add	r2,r2,fp
 4000344:	11000017 	ldw	r4,0(r2)
 4000348:	400a5500 	call	400a550 <alt_up_av_config_read_ready>
 400034c:	103ff726 	beq	r2,zero,400032c <__ram_exceptions_end+0xfbfe00e4>
		printf("Audio CODEC not ready\n");
	}

	if (alt_up_av_config_reset(audio_config))	// reset the audio CODEC
 4000350:	00fffc74 	movhi	r3,65521
 4000354:	18eeee04 	addi	r3,r3,-17480
 4000358:	1f07883a 	add	r3,r3,fp
 400035c:	19000017 	ldw	r4,0(r3)
 4000360:	400a4540 	call	400a454 <alt_up_av_config_reset>
 4000364:	10000326 	beq	r2,zero,4000374 <main+0x100>
		printf("Error resetting the audio CODEC\n");
 4000368:	01010074 	movhi	r4,1025
 400036c:	212f3304 	addi	r4,r4,-17204
 4000370:	4005b700 	call	4005b70 <puts>





	generate_sinusoid(SAMPLING_FREQ, FREQUENCY, AMPLITUDE, audio_file);
 4000374:	013ffc74 	movhi	r4,65521
 4000378:	212ef004 	addi	r4,r4,-17472
 400037c:	e105883a 	add	r2,fp,r4
 4000380:	100f883a 	mov	r7,r2
 4000384:	01800044 	movi	r6,1
 4000388:	0150d234 	movhi	r5,17224
 400038c:	012ee014 	movui	r4,48000
 4000390:	400062c0 	call	400062c <generate_sinusoid>

	while(1)
	{
		play_file(audio_file, AUDIO_FILE_SIZE, audio_device);
 4000394:	00fffc74 	movhi	r3,65521
 4000398:	18eef004 	addi	r3,r3,-17472
 400039c:	e0c5883a 	add	r2,fp,r3
 40003a0:	013ffc74 	movhi	r4,65521
 40003a4:	212eed04 	addi	r4,r4,-17484
 40003a8:	2709883a 	add	r4,r4,fp
 40003ac:	21800017 	ldw	r6,0(r4)
 40003b0:	0149c404 	movi	r5,10000
 40003b4:	1009883a 	mov	r4,r2
 40003b8:	40005340 	call	4000534 <play_file>

		usleep(1000000);
 40003bc:	010003f4 	movhi	r4,15
 40003c0:	21109004 	addi	r4,r4,16960
 40003c4:	4008ed40 	call	4008ed4 <usleep>

		audio_file_pointer = recording;
 40003c8:	00a71a14 	movui	r2,40040
 40003cc:	00fffc74 	movhi	r3,65521
 40003d0:	18eee604 	addi	r3,r3,-17512
 40003d4:	1f07883a 	add	r3,r3,fp
 40003d8:	1885883a 	add	r2,r3,r2
 40003dc:	013ffc74 	movhi	r4,65521
 40003e0:	212ee604 	addi	r4,r4,-17512
 40003e4:	2709883a 	add	r4,r4,fp
 40003e8:	20800015 	stw	r2,0(r4)
		end_of_recording = &(recording[RECORDING_SIZE]);
 40003ec:	00a71a14 	movui	r2,40040
 40003f0:	013ffc74 	movhi	r4,65521
 40003f4:	212ee604 	addi	r4,r4,-17512
 40003f8:	2709883a 	add	r4,r4,fp
 40003fc:	2087883a 	add	r3,r4,r2
 4000400:	008003f4 	movhi	r2,15
 4000404:	10a98004 	addi	r2,r2,-23040
 4000408:	1885883a 	add	r2,r3,r2
 400040c:	00fffc74 	movhi	r3,65521
 4000410:	18eeef04 	addi	r3,r3,-17476
 4000414:	1f07883a 	add	r3,r3,fp
 4000418:	18800015 	stw	r2,0(r3)

		printf("Recording...\n");
 400041c:	01010074 	movhi	r4,1025
 4000420:	212f3b04 	addi	r4,r4,-17172
 4000424:	4005b700 	call	4005b70 <puts>
		while(audio_file_pointer < end_of_recording )
 4000428:	00002806 	br	40004cc <main+0x258>
		{
			incoming_left = alt_up_audio_read_fifo_avail(audio_device, 0);
 400042c:	000b883a 	mov	r5,zero
 4000430:	00bffc74 	movhi	r2,65521
 4000434:	10aeed04 	addi	r2,r2,-17484
 4000438:	1705883a 	add	r2,r2,fp
 400043c:	11000017 	ldw	r4,0(r2)
 4000440:	4009e100 	call	4009e10 <alt_up_audio_read_fifo_avail>
 4000444:	00fffc74 	movhi	r3,65521
 4000448:	18eeec04 	addi	r3,r3,-17488
 400044c:	1f07883a 	add	r3,r3,fp
 4000450:	18800015 	stw	r2,0(r3)
			alt_up_audio_read_fifo(audio_device, audio_file_pointer, incoming_left, 0);
 4000454:	000f883a 	mov	r7,zero
 4000458:	013ffc74 	movhi	r4,65521
 400045c:	212eec04 	addi	r4,r4,-17488
 4000460:	2709883a 	add	r4,r4,fp
 4000464:	21800017 	ldw	r6,0(r4)
 4000468:	00bffc74 	movhi	r2,65521
 400046c:	10aee604 	addi	r2,r2,-17512
 4000470:	1705883a 	add	r2,r2,fp
 4000474:	11400017 	ldw	r5,0(r2)
 4000478:	00fffc74 	movhi	r3,65521
 400047c:	18eeed04 	addi	r3,r3,-17484
 4000480:	1f07883a 	add	r3,r3,fp
 4000484:	19000017 	ldw	r4,0(r3)
 4000488:	400a0700 	call	400a070 <alt_up_audio_read_fifo>

			//play_file(audio_file_pointer, incoming_left, audio_device);

			audio_file_pointer += incoming_left;
 400048c:	013ffc74 	movhi	r4,65521
 4000490:	212eec04 	addi	r4,r4,-17488
 4000494:	2709883a 	add	r4,r4,fp
 4000498:	20800017 	ldw	r2,0(r4)
 400049c:	1085883a 	add	r2,r2,r2
 40004a0:	1085883a 	add	r2,r2,r2
 40004a4:	1007883a 	mov	r3,r2
 40004a8:	013ffc74 	movhi	r4,65521
 40004ac:	212ee604 	addi	r4,r4,-17512
 40004b0:	2709883a 	add	r4,r4,fp
 40004b4:	20800017 	ldw	r2,0(r4)
 40004b8:	10c5883a 	add	r2,r2,r3
 40004bc:	00fffc74 	movhi	r3,65521
 40004c0:	18eee604 	addi	r3,r3,-17512
 40004c4:	1f07883a 	add	r3,r3,fp
 40004c8:	18800015 	stw	r2,0(r3)

		audio_file_pointer = recording;
		end_of_recording = &(recording[RECORDING_SIZE]);

		printf("Recording...\n");
		while(audio_file_pointer < end_of_recording )
 40004cc:	013ffc74 	movhi	r4,65521
 40004d0:	212ee604 	addi	r4,r4,-17512
 40004d4:	2709883a 	add	r4,r4,fp
 40004d8:	20c00017 	ldw	r3,0(r4)
 40004dc:	013ffc74 	movhi	r4,65521
 40004e0:	212eef04 	addi	r4,r4,-17476
 40004e4:	2709883a 	add	r4,r4,fp
 40004e8:	20800017 	ldw	r2,0(r4)
 40004ec:	18bfcf36 	bltu	r3,r2,400042c <__ram_exceptions_end+0xfbfe01e4>

			//play_file(audio_file_pointer, incoming_left, audio_device);

			audio_file_pointer += incoming_left;
		}
		printf("Finished recording...\n");
 40004f0:	01010074 	movhi	r4,1025
 40004f4:	212f3f04 	addi	r4,r4,-17156
 40004f8:	4005b700 	call	4005b70 <puts>

		play_file(recording, RECORDING_SIZE, audio_device);
 40004fc:	00a71a14 	movui	r2,40040
 4000500:	00fffc74 	movhi	r3,65521
 4000504:	18eee604 	addi	r3,r3,-17512
 4000508:	1f07883a 	add	r3,r3,fp
 400050c:	1885883a 	add	r2,r3,r2
 4000510:	013ffc74 	movhi	r4,65521
 4000514:	212eed04 	addi	r4,r4,-17484
 4000518:	2709883a 	add	r4,r4,fp
 400051c:	21800017 	ldw	r6,0(r4)
 4000520:	01400134 	movhi	r5,4
 4000524:	296a6004 	addi	r5,r5,-22144
 4000528:	1009883a 	mov	r4,r2
 400052c:	40005340 	call	4000534 <play_file>


	}
 4000530:	003f9806 	br	4000394 <__ram_exceptions_end+0xfbfe014c>

04000534 <play_file>:
	return 0;
}


void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device)
{
 4000534:	defff904 	addi	sp,sp,-28
 4000538:	dfc00615 	stw	ra,24(sp)
 400053c:	df000515 	stw	fp,20(sp)
 4000540:	df000504 	addi	fp,sp,20
 4000544:	e13ffd15 	stw	r4,-12(fp)
 4000548:	e17ffe15 	stw	r5,-8(fp)
 400054c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int *file_pointer, i;
	for (i=0; i<file_size; i+=BUFFER_SIZE)
 4000550:	e03ffb15 	stw	zero,-20(fp)
 4000554:	00002c06 	br	4000608 <play_file+0xd4>
	{
		file_pointer = file + i;
 4000558:	e0bffb17 	ldw	r2,-20(fp)
 400055c:	1085883a 	add	r2,r2,r2
 4000560:	1085883a 	add	r2,r2,r2
 4000564:	1007883a 	mov	r3,r2
 4000568:	e0bffd17 	ldw	r2,-12(fp)
 400056c:	10c5883a 	add	r2,r2,r3
 4000570:	e0bffc15 	stw	r2,-16(fp)
		if (file_size - i > BUFFER_SIZE) {
 4000574:	e0fffe17 	ldw	r3,-8(fp)
 4000578:	e0bffb17 	ldw	r2,-20(fp)
 400057c:	1885c83a 	sub	r2,r3,r2
 4000580:	10801970 	cmpltui	r2,r2,101
 4000584:	1000091e 	bne	r2,zero,40005ac <play_file+0x78>
			alt_up_audio_play_r(audio_device, file_pointer, BUFFER_SIZE);
 4000588:	01801904 	movi	r6,100
 400058c:	e17ffc17 	ldw	r5,-16(fp)
 4000590:	e13fff17 	ldw	r4,-4(fp)
 4000594:	4009fa00 	call	4009fa0 <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, BUFFER_SIZE);
 4000598:	01801904 	movi	r6,100
 400059c:	e17ffc17 	ldw	r5,-16(fp)
 40005a0:	e13fff17 	ldw	r4,-4(fp)
 40005a4:	400a0080 	call	400a008 <alt_up_audio_play_l>
 40005a8:	00000e06 	br	40005e4 <play_file+0xb0>
		} else {
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
 40005ac:	e0fffe17 	ldw	r3,-8(fp)
 40005b0:	e0bffb17 	ldw	r2,-20(fp)
 40005b4:	1885c83a 	sub	r2,r3,r2
 40005b8:	100d883a 	mov	r6,r2
 40005bc:	e17ffc17 	ldw	r5,-16(fp)
 40005c0:	e13fff17 	ldw	r4,-4(fp)
 40005c4:	4009fa00 	call	4009fa0 <alt_up_audio_play_r>
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
 40005c8:	e0fffe17 	ldw	r3,-8(fp)
 40005cc:	e0bffb17 	ldw	r2,-20(fp)
 40005d0:	1885c83a 	sub	r2,r3,r2
 40005d4:	100d883a 	mov	r6,r2
 40005d8:	e17ffc17 	ldw	r5,-16(fp)
 40005dc:	e13fff17 	ldw	r4,-4(fp)
 40005e0:	400a0080 	call	400a008 <alt_up_audio_play_l>
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BUFFER_SIZE);
 40005e4:	0001883a 	nop
 40005e8:	000b883a 	mov	r5,zero
 40005ec:	e13fff17 	ldw	r4,-4(fp)
 40005f0:	4009f400 	call	4009f40 <alt_up_audio_write_fifo_space>
 40005f4:	10801930 	cmpltui	r2,r2,100
 40005f8:	103ffb1e 	bne	r2,zero,40005e8 <__ram_exceptions_end+0xfbfe03a0>


void play_file(unsigned int *file, int file_size, alt_up_audio_dev *audio_device)
{
	unsigned int *file_pointer, i;
	for (i=0; i<file_size; i+=BUFFER_SIZE)
 40005fc:	e0bffb17 	ldw	r2,-20(fp)
 4000600:	10801904 	addi	r2,r2,100
 4000604:	e0bffb15 	stw	r2,-20(fp)
 4000608:	e0bffe17 	ldw	r2,-8(fp)
 400060c:	e0fffb17 	ldw	r3,-20(fp)
 4000610:	18bfd136 	bltu	r3,r2,4000558 <__ram_exceptions_end+0xfbfe0310>
			alt_up_audio_play_r(audio_device, file_pointer, file_size - i);
			alt_up_audio_play_l(audio_device, file_pointer, file_size - i);
		}
		while(alt_up_audio_write_fifo_space(audio_device, 0)<BUFFER_SIZE);
	}
}
 4000614:	0001883a 	nop
 4000618:	e037883a 	mov	sp,fp
 400061c:	dfc00117 	ldw	ra,4(sp)
 4000620:	df000017 	ldw	fp,0(sp)
 4000624:	dec00204 	addi	sp,sp,8
 4000628:	f800283a 	ret

0400062c <generate_sinusoid>:

void generate_sinusoid(int sampling_freq, float freq, char amplitude, unsigned int* buffer)
{
 400062c:	defff204 	addi	sp,sp,-56
 4000630:	dfc00d15 	stw	ra,52(sp)
 4000634:	df000c15 	stw	fp,48(sp)
 4000638:	dcc00b15 	stw	r19,44(sp)
 400063c:	dc800a15 	stw	r18,40(sp)
 4000640:	dc400915 	stw	r17,36(sp)
 4000644:	dc000815 	stw	r16,32(sp)
 4000648:	df000c04 	addi	fp,sp,48
 400064c:	e13ff815 	stw	r4,-32(fp)
 4000650:	e17ff915 	stw	r5,-28(fp)
 4000654:	3005883a 	mov	r2,r6
 4000658:	e1fffb15 	stw	r7,-20(fp)
 400065c:	e0bffa05 	stb	r2,-24(fp)
	int i, n_samples, sample, amplitude_factor;

	n_samples = sampling_freq/freq;
 4000660:	e13ff817 	ldw	r4,-32(fp)
 4000664:	40033b00 	call	40033b0 <__floatsisf>
 4000668:	1007883a 	mov	r3,r2
 400066c:	e17ff917 	ldw	r5,-28(fp)
 4000670:	1809883a 	mov	r4,r3
 4000674:	4002b040 	call	4002b04 <__divsf3>
 4000678:	1007883a 	mov	r3,r2
 400067c:	1805883a 	mov	r2,r3
 4000680:	1009883a 	mov	r4,r2
 4000684:	40033400 	call	4003340 <__fixsfsi>
 4000688:	e0bff515 	stw	r2,-44(fp)
	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
 400068c:	e0bffa07 	ldb	r2,-24(fp)
 4000690:	1009883a 	mov	r4,r2
 4000694:	40033b00 	call	40033b0 <__floatsisf>
 4000698:	1007883a 	mov	r3,r2
 400069c:	0153e034 	movhi	r5,20352
 40006a0:	1809883a 	mov	r4,r3
 40006a4:	4002f440 	call	4002f44 <__mulsf3>
 40006a8:	1007883a 	mov	r3,r2
 40006ac:	1805883a 	mov	r2,r3
 40006b0:	1009883a 	mov	r4,r2
 40006b4:	400593c0 	call	400593c <__extendsfdf2>
 40006b8:	1011883a 	mov	r8,r2
 40006bc:	1813883a 	mov	r9,r3
 40006c0:	000d883a 	mov	r6,zero
 40006c4:	01d01674 	movhi	r7,16473
 40006c8:	4009883a 	mov	r4,r8
 40006cc:	480b883a 	mov	r5,r9
 40006d0:	4003d800 	call	4003d80 <__divdf3>
 40006d4:	1009883a 	mov	r4,r2
 40006d8:	180b883a 	mov	r5,r3
 40006dc:	2005883a 	mov	r2,r4
 40006e0:	2807883a 	mov	r3,r5
 40006e4:	1009883a 	mov	r4,r2
 40006e8:	180b883a 	mov	r5,r3
 40006ec:	40057e00 	call	40057e0 <__fixdfsi>
 40006f0:	e0bff615 	stw	r2,-40(fp)
	for(i=0; i<AUDIO_FILE_SIZE; i++)
 40006f4:	e03ff415 	stw	zero,-48(fp)
 40006f8:	00004006 	br	40007fc <generate_sinusoid+0x1d0>
	{
		sample = amplitude_factor *  sin(2 * M_PI * (float)i / n_samples);
 40006fc:	e13ff617 	ldw	r4,-40(fp)
 4000700:	40058600 	call	4005860 <__floatsidf>
 4000704:	1021883a 	mov	r16,r2
 4000708:	1823883a 	mov	r17,r3
 400070c:	e13ff417 	ldw	r4,-48(fp)
 4000710:	40033b00 	call	40033b0 <__floatsisf>
 4000714:	1007883a 	mov	r3,r2
 4000718:	1809883a 	mov	r4,r3
 400071c:	400593c0 	call	400593c <__extendsfdf2>
 4000720:	1011883a 	mov	r8,r2
 4000724:	1813883a 	mov	r9,r3
 4000728:	01951134 	movhi	r6,21572
 400072c:	318b4604 	addi	r6,r6,11544
 4000730:	01d00674 	movhi	r7,16409
 4000734:	39c87ec4 	addi	r7,r7,8699
 4000738:	4009883a 	mov	r4,r8
 400073c:	480b883a 	mov	r5,r9
 4000740:	40047cc0 	call	40047cc <__muldf3>
 4000744:	1009883a 	mov	r4,r2
 4000748:	180b883a 	mov	r5,r3
 400074c:	2025883a 	mov	r18,r4
 4000750:	2827883a 	mov	r19,r5
 4000754:	e13ff517 	ldw	r4,-44(fp)
 4000758:	40058600 	call	4005860 <__floatsidf>
 400075c:	1009883a 	mov	r4,r2
 4000760:	180b883a 	mov	r5,r3
 4000764:	200d883a 	mov	r6,r4
 4000768:	280f883a 	mov	r7,r5
 400076c:	9009883a 	mov	r4,r18
 4000770:	980b883a 	mov	r5,r19
 4000774:	4003d800 	call	4003d80 <__divdf3>
 4000778:	1009883a 	mov	r4,r2
 400077c:	180b883a 	mov	r5,r3
 4000780:	2005883a 	mov	r2,r4
 4000784:	2807883a 	mov	r3,r5
 4000788:	1009883a 	mov	r4,r2
 400078c:	180b883a 	mov	r5,r3
 4000790:	400083c0 	call	400083c <sin>
 4000794:	1009883a 	mov	r4,r2
 4000798:	180b883a 	mov	r5,r3
 400079c:	200d883a 	mov	r6,r4
 40007a0:	280f883a 	mov	r7,r5
 40007a4:	8009883a 	mov	r4,r16
 40007a8:	880b883a 	mov	r5,r17
 40007ac:	40047cc0 	call	40047cc <__muldf3>
 40007b0:	1009883a 	mov	r4,r2
 40007b4:	180b883a 	mov	r5,r3
 40007b8:	2005883a 	mov	r2,r4
 40007bc:	2807883a 	mov	r3,r5
 40007c0:	1009883a 	mov	r4,r2
 40007c4:	180b883a 	mov	r5,r3
 40007c8:	40057e00 	call	40057e0 <__fixdfsi>
 40007cc:	e0bff715 	stw	r2,-36(fp)
		//buffer[i] = sample;
		IOWR_32DIRECT(buffer, i*4, sample);
 40007d0:	e0bff417 	ldw	r2,-48(fp)
 40007d4:	1085883a 	add	r2,r2,r2
 40007d8:	1085883a 	add	r2,r2,r2
 40007dc:	1007883a 	mov	r3,r2
 40007e0:	e0bffb17 	ldw	r2,-20(fp)
 40007e4:	10c5883a 	add	r2,r2,r3
 40007e8:	e0fff717 	ldw	r3,-36(fp)
 40007ec:	10c00035 	stwio	r3,0(r2)
{
	int i, n_samples, sample, amplitude_factor;

	n_samples = sampling_freq/freq;
	amplitude_factor = UINT_MAX*(float)amplitude/100.0;
	for(i=0; i<AUDIO_FILE_SIZE; i++)
 40007f0:	e0bff417 	ldw	r2,-48(fp)
 40007f4:	10800044 	addi	r2,r2,1
 40007f8:	e0bff415 	stw	r2,-48(fp)
 40007fc:	e0bff417 	ldw	r2,-48(fp)
 4000800:	1089c410 	cmplti	r2,r2,10000
 4000804:	103fbd1e 	bne	r2,zero,40006fc <__ram_exceptions_end+0xfbfe04b4>
	{
		sample = amplitude_factor *  sin(2 * M_PI * (float)i / n_samples);
		//buffer[i] = sample;
		IOWR_32DIRECT(buffer, i*4, sample);
	}
	printf("Sinusoid created\n");
 4000808:	01010074 	movhi	r4,1025
 400080c:	212f4504 	addi	r4,r4,-17132
 4000810:	4005b700 	call	4005b70 <puts>
}
 4000814:	0001883a 	nop
 4000818:	e6fffc04 	addi	sp,fp,-16
 400081c:	dfc00517 	ldw	ra,20(sp)
 4000820:	df000417 	ldw	fp,16(sp)
 4000824:	dcc00317 	ldw	r19,12(sp)
 4000828:	dc800217 	ldw	r18,8(sp)
 400082c:	dc400117 	ldw	r17,4(sp)
 4000830:	dc000017 	ldw	r16,0(sp)
 4000834:	dec00604 	addi	sp,sp,24
 4000838:	f800283a 	ret

0400083c <sin>:
 400083c:	00a00034 	movhi	r2,32768
 4000840:	defffa04 	addi	sp,sp,-24
 4000844:	10bfffc4 	addi	r2,r2,-1
 4000848:	00cffa74 	movhi	r3,16361
 400084c:	dfc00515 	stw	ra,20(sp)
 4000850:	2884703a 	and	r2,r5,r2
 4000854:	18c87ec4 	addi	r3,r3,8699
 4000858:	1880180e 	bge	r3,r2,40008bc <sin+0x80>
 400085c:	00dffc34 	movhi	r3,32752
 4000860:	18ffffc4 	addi	r3,r3,-1
 4000864:	1880060e 	bge	r3,r2,4000880 <sin+0x44>
 4000868:	280f883a 	mov	r7,r5
 400086c:	200d883a 	mov	r6,r4
 4000870:	4004ee40 	call	4004ee4 <__subdf3>
 4000874:	dfc00517 	ldw	ra,20(sp)
 4000878:	dec00604 	addi	sp,sp,24
 400087c:	f800283a 	ret
 4000880:	d9800104 	addi	r6,sp,4
 4000884:	400092c0 	call	400092c <__ieee754_rem_pio2>
 4000888:	108000cc 	andi	r2,r2,3
 400088c:	00c00044 	movi	r3,1
 4000890:	10c01926 	beq	r2,r3,40008f8 <sin+0xbc>
 4000894:	01000084 	movi	r4,2
 4000898:	11000f26 	beq	r2,r4,40008d8 <sin+0x9c>
 400089c:	10001c26 	beq	r2,zero,4000910 <sin+0xd4>
 40008a0:	d9800317 	ldw	r6,12(sp)
 40008a4:	d9c00417 	ldw	r7,16(sp)
 40008a8:	d9000117 	ldw	r4,4(sp)
 40008ac:	d9400217 	ldw	r5,8(sp)
 40008b0:	40010980 	call	4001098 <__kernel_cos>
 40008b4:	18e0003c 	xorhi	r3,r3,32768
 40008b8:	003fee06 	br	4000874 <__ram_exceptions_end+0xfbfe062c>
 40008bc:	d8000015 	stw	zero,0(sp)
 40008c0:	000d883a 	mov	r6,zero
 40008c4:	000f883a 	mov	r7,zero
 40008c8:	40022cc0 	call	40022cc <__kernel_sin>
 40008cc:	dfc00517 	ldw	ra,20(sp)
 40008d0:	dec00604 	addi	sp,sp,24
 40008d4:	f800283a 	ret
 40008d8:	d9800317 	ldw	r6,12(sp)
 40008dc:	d9c00417 	ldw	r7,16(sp)
 40008e0:	d9000117 	ldw	r4,4(sp)
 40008e4:	d9400217 	ldw	r5,8(sp)
 40008e8:	d8c00015 	stw	r3,0(sp)
 40008ec:	40022cc0 	call	40022cc <__kernel_sin>
 40008f0:	18e0003c 	xorhi	r3,r3,32768
 40008f4:	003fdf06 	br	4000874 <__ram_exceptions_end+0xfbfe062c>
 40008f8:	d9800317 	ldw	r6,12(sp)
 40008fc:	d9c00417 	ldw	r7,16(sp)
 4000900:	d9000117 	ldw	r4,4(sp)
 4000904:	d9400217 	ldw	r5,8(sp)
 4000908:	40010980 	call	4001098 <__kernel_cos>
 400090c:	003fd906 	br	4000874 <__ram_exceptions_end+0xfbfe062c>
 4000910:	d9800317 	ldw	r6,12(sp)
 4000914:	d9c00417 	ldw	r7,16(sp)
 4000918:	d9000117 	ldw	r4,4(sp)
 400091c:	d9400217 	ldw	r5,8(sp)
 4000920:	d8c00015 	stw	r3,0(sp)
 4000924:	40022cc0 	call	40022cc <__kernel_sin>
 4000928:	003fd206 	br	4000874 <__ram_exceptions_end+0xfbfe062c>

0400092c <__ieee754_rem_pio2>:
 400092c:	02200034 	movhi	r8,32768
 4000930:	deffea04 	addi	sp,sp,-88
 4000934:	423fffc4 	addi	r8,r8,-1
 4000938:	00cffa74 	movhi	r3,16361
 400093c:	ddc01315 	stw	r23,76(sp)
 4000940:	dc400d15 	stw	r17,52(sp)
 4000944:	dfc01515 	stw	ra,84(sp)
 4000948:	df001415 	stw	fp,80(sp)
 400094c:	dd801215 	stw	r22,72(sp)
 4000950:	dd401115 	stw	r21,68(sp)
 4000954:	dd001015 	stw	r20,64(sp)
 4000958:	dcc00f15 	stw	r19,60(sp)
 400095c:	dc800e15 	stw	r18,56(sp)
 4000960:	dc000c15 	stw	r16,48(sp)
 4000964:	2a2e703a 	and	r23,r5,r8
 4000968:	18c87ec4 	addi	r3,r3,8699
 400096c:	2823883a 	mov	r17,r5
 4000970:	1dc0790e 	bge	r3,r23,4000b58 <__ieee754_rem_pio2+0x22c>
 4000974:	009000f4 	movhi	r2,16387
 4000978:	10b65ec4 	addi	r2,r2,-9861
 400097c:	3021883a 	mov	r16,r6
 4000980:	2027883a 	mov	r19,r4
 4000984:	15c02316 	blt	r2,r23,4000a14 <__ieee754_rem_pio2+0xe8>
 4000988:	01cffe74 	movhi	r7,16377
 400098c:	39c87ec4 	addi	r7,r7,8699
 4000990:	01951034 	movhi	r6,21568
 4000994:	01417a0e 	bge	zero,r5,4000f80 <__ieee754_rem_pio2+0x654>
 4000998:	4004ee40 	call	4004ee4 <__subdf3>
 400099c:	1025883a 	mov	r18,r2
 40009a0:	008ffe74 	movhi	r2,16377
 40009a4:	10887ec4 	addi	r2,r2,8699
 40009a8:	1823883a 	mov	r17,r3
 40009ac:	b8808426 	beq	r23,r2,4000bc0 <__ieee754_rem_pio2+0x294>
 40009b0:	018698b4 	movhi	r6,6754
 40009b4:	01cf7474 	movhi	r7,15825
 40009b8:	3198cc44 	addi	r6,r6,25393
 40009bc:	39ed1844 	addi	r7,r7,-19359
 40009c0:	9009883a 	mov	r4,r18
 40009c4:	180b883a 	mov	r5,r3
 40009c8:	4004ee40 	call	4004ee4 <__subdf3>
 40009cc:	100d883a 	mov	r6,r2
 40009d0:	180f883a 	mov	r7,r3
 40009d4:	9009883a 	mov	r4,r18
 40009d8:	880b883a 	mov	r5,r17
 40009dc:	80800015 	stw	r2,0(r16)
 40009e0:	80c00115 	stw	r3,4(r16)
 40009e4:	4004ee40 	call	4004ee4 <__subdf3>
 40009e8:	018698b4 	movhi	r6,6754
 40009ec:	01cf7474 	movhi	r7,15825
 40009f0:	3198cc44 	addi	r6,r6,25393
 40009f4:	39ed1844 	addi	r7,r7,-19359
 40009f8:	1009883a 	mov	r4,r2
 40009fc:	180b883a 	mov	r5,r3
 4000a00:	4004ee40 	call	4004ee4 <__subdf3>
 4000a04:	80800215 	stw	r2,8(r16)
 4000a08:	80c00315 	stw	r3,12(r16)
 4000a0c:	00800044 	movi	r2,1
 4000a10:	00005606 	br	4000b6c <__ieee754_rem_pio2+0x240>
 4000a14:	00904e74 	movhi	r2,16697
 4000a18:	10887ec4 	addi	r2,r2,8699
 4000a1c:	15c0830e 	bge	r2,r23,4000c2c <__ieee754_rem_pio2+0x300>
 4000a20:	009ffc34 	movhi	r2,32752
 4000a24:	10bfffc4 	addi	r2,r2,-1
 4000a28:	15c05c16 	blt	r2,r23,4000b9c <__ieee754_rem_pio2+0x270>
 4000a2c:	b829d53a 	srai	r20,r23,20
 4000a30:	a53efa84 	addi	r20,r20,-1046
 4000a34:	a024953a 	slli	r18,r20,20
 4000a38:	bca5c83a 	sub	r18,r23,r18
 4000a3c:	900b883a 	mov	r5,r18
 4000a40:	40057e00 	call	40057e0 <__fixdfsi>
 4000a44:	1009883a 	mov	r4,r2
 4000a48:	40058600 	call	4005860 <__floatsidf>
 4000a4c:	9809883a 	mov	r4,r19
 4000a50:	900b883a 	mov	r5,r18
 4000a54:	100d883a 	mov	r6,r2
 4000a58:	180f883a 	mov	r7,r3
 4000a5c:	d8800215 	stw	r2,8(sp)
 4000a60:	d8c00315 	stw	r3,12(sp)
 4000a64:	4004ee40 	call	4004ee4 <__subdf3>
 4000a68:	000d883a 	mov	r6,zero
 4000a6c:	01d05c34 	movhi	r7,16752
 4000a70:	1009883a 	mov	r4,r2
 4000a74:	180b883a 	mov	r5,r3
 4000a78:	40047cc0 	call	40047cc <__muldf3>
 4000a7c:	180b883a 	mov	r5,r3
 4000a80:	1009883a 	mov	r4,r2
 4000a84:	182b883a 	mov	r21,r3
 4000a88:	102d883a 	mov	r22,r2
 4000a8c:	40057e00 	call	40057e0 <__fixdfsi>
 4000a90:	1009883a 	mov	r4,r2
 4000a94:	40058600 	call	4005860 <__floatsidf>
 4000a98:	100d883a 	mov	r6,r2
 4000a9c:	180f883a 	mov	r7,r3
 4000aa0:	b009883a 	mov	r4,r22
 4000aa4:	a80b883a 	mov	r5,r21
 4000aa8:	1027883a 	mov	r19,r2
 4000aac:	1825883a 	mov	r18,r3
 4000ab0:	d8800415 	stw	r2,16(sp)
 4000ab4:	d8c00515 	stw	r3,20(sp)
 4000ab8:	4004ee40 	call	4004ee4 <__subdf3>
 4000abc:	000d883a 	mov	r6,zero
 4000ac0:	01d05c34 	movhi	r7,16752
 4000ac4:	1009883a 	mov	r4,r2
 4000ac8:	180b883a 	mov	r5,r3
 4000acc:	40047cc0 	call	40047cc <__muldf3>
 4000ad0:	000d883a 	mov	r6,zero
 4000ad4:	000f883a 	mov	r7,zero
 4000ad8:	1009883a 	mov	r4,r2
 4000adc:	180b883a 	mov	r5,r3
 4000ae0:	d8800615 	stw	r2,24(sp)
 4000ae4:	d8c00715 	stw	r3,28(sp)
 4000ae8:	40046680 	call	4004668 <__eqdf2>
 4000aec:	1001431e 	bne	r2,zero,4000ffc <__ieee754_rem_pio2+0x6d0>
 4000af0:	000f883a 	mov	r7,zero
 4000af4:	000d883a 	mov	r6,zero
 4000af8:	9809883a 	mov	r4,r19
 4000afc:	900b883a 	mov	r5,r18
 4000b00:	40046680 	call	4004668 <__eqdf2>
 4000b04:	100f003a 	cmpeq	r7,r2,zero
 4000b08:	00800084 	movi	r2,2
 4000b0c:	11cfc83a 	sub	r7,r2,r7
 4000b10:	00800084 	movi	r2,2
 4000b14:	d8800015 	stw	r2,0(sp)
 4000b18:	00810074 	movhi	r2,1025
 4000b1c:	10af6a04 	addi	r2,r2,-16984
 4000b20:	d8800115 	stw	r2,4(sp)
 4000b24:	a00d883a 	mov	r6,r20
 4000b28:	800b883a 	mov	r5,r16
 4000b2c:	d9000204 	addi	r4,sp,8
 4000b30:	400153c0 	call	400153c <__kernel_rem_pio2>
 4000b34:	88000d0e 	bge	r17,zero,4000b6c <__ieee754_rem_pio2+0x240>
 4000b38:	81000117 	ldw	r4,4(r16)
 4000b3c:	80c00317 	ldw	r3,12(r16)
 4000b40:	0085c83a 	sub	r2,zero,r2
 4000b44:	2120003c 	xorhi	r4,r4,32768
 4000b48:	18e0003c 	xorhi	r3,r3,32768
 4000b4c:	81000115 	stw	r4,4(r16)
 4000b50:	80c00315 	stw	r3,12(r16)
 4000b54:	00000506 	br	4000b6c <__ieee754_rem_pio2+0x240>
 4000b58:	31000015 	stw	r4,0(r6)
 4000b5c:	31400115 	stw	r5,4(r6)
 4000b60:	30000215 	stw	zero,8(r6)
 4000b64:	30000315 	stw	zero,12(r6)
 4000b68:	0005883a 	mov	r2,zero
 4000b6c:	dfc01517 	ldw	ra,84(sp)
 4000b70:	df001417 	ldw	fp,80(sp)
 4000b74:	ddc01317 	ldw	r23,76(sp)
 4000b78:	dd801217 	ldw	r22,72(sp)
 4000b7c:	dd401117 	ldw	r21,68(sp)
 4000b80:	dd001017 	ldw	r20,64(sp)
 4000b84:	dcc00f17 	ldw	r19,60(sp)
 4000b88:	dc800e17 	ldw	r18,56(sp)
 4000b8c:	dc400d17 	ldw	r17,52(sp)
 4000b90:	dc000c17 	ldw	r16,48(sp)
 4000b94:	dec01604 	addi	sp,sp,88
 4000b98:	f800283a 	ret
 4000b9c:	200d883a 	mov	r6,r4
 4000ba0:	280f883a 	mov	r7,r5
 4000ba4:	4004ee40 	call	4004ee4 <__subdf3>
 4000ba8:	80800215 	stw	r2,8(r16)
 4000bac:	80800015 	stw	r2,0(r16)
 4000bb0:	80c00315 	stw	r3,12(r16)
 4000bb4:	80c00115 	stw	r3,4(r16)
 4000bb8:	0005883a 	mov	r2,zero
 4000bbc:	003feb06 	br	4000b6c <__ram_exceptions_end+0xfbfe0924>
 4000bc0:	01cf7474 	movhi	r7,15825
 4000bc4:	9009883a 	mov	r4,r18
 4000bc8:	39ed1844 	addi	r7,r7,-19359
 4000bcc:	01869834 	movhi	r6,6752
 4000bd0:	180b883a 	mov	r5,r3
 4000bd4:	4004ee40 	call	4004ee4 <__subdf3>
 4000bd8:	018b80f4 	movhi	r6,11779
 4000bdc:	01cee8f4 	movhi	r7,15267
 4000be0:	319c1cc4 	addi	r6,r6,28787
 4000be4:	39c66284 	addi	r7,r7,6538
 4000be8:	1009883a 	mov	r4,r2
 4000bec:	180b883a 	mov	r5,r3
 4000bf0:	1025883a 	mov	r18,r2
 4000bf4:	1823883a 	mov	r17,r3
 4000bf8:	4004ee40 	call	4004ee4 <__subdf3>
 4000bfc:	100d883a 	mov	r6,r2
 4000c00:	180f883a 	mov	r7,r3
 4000c04:	9009883a 	mov	r4,r18
 4000c08:	880b883a 	mov	r5,r17
 4000c0c:	80800015 	stw	r2,0(r16)
 4000c10:	80c00115 	stw	r3,4(r16)
 4000c14:	4004ee40 	call	4004ee4 <__subdf3>
 4000c18:	018b80f4 	movhi	r6,11779
 4000c1c:	01cee8f4 	movhi	r7,15267
 4000c20:	319c1cc4 	addi	r6,r6,28787
 4000c24:	39c66284 	addi	r7,r7,6538
 4000c28:	003f7306 	br	40009f8 <__ram_exceptions_end+0xfbfe07b0>
 4000c2c:	40025980 	call	4002598 <fabs>
 4000c30:	019b72b4 	movhi	r6,28106
 4000c34:	01cff934 	movhi	r7,16356
 4000c38:	31b220c4 	addi	r6,r6,-14205
 4000c3c:	39d7cc04 	addi	r7,r7,24368
 4000c40:	1009883a 	mov	r4,r2
 4000c44:	180b883a 	mov	r5,r3
 4000c48:	102d883a 	mov	r22,r2
 4000c4c:	182b883a 	mov	r21,r3
 4000c50:	40047cc0 	call	40047cc <__muldf3>
 4000c54:	000d883a 	mov	r6,zero
 4000c58:	01cff834 	movhi	r7,16352
 4000c5c:	1009883a 	mov	r4,r2
 4000c60:	180b883a 	mov	r5,r3
 4000c64:	40034d40 	call	40034d4 <__adddf3>
 4000c68:	180b883a 	mov	r5,r3
 4000c6c:	1009883a 	mov	r4,r2
 4000c70:	40057e00 	call	40057e0 <__fixdfsi>
 4000c74:	1009883a 	mov	r4,r2
 4000c78:	1025883a 	mov	r18,r2
 4000c7c:	40058600 	call	4005860 <__floatsidf>
 4000c80:	01cffe74 	movhi	r7,16377
 4000c84:	39c87ec4 	addi	r7,r7,8699
 4000c88:	01951034 	movhi	r6,21568
 4000c8c:	1009883a 	mov	r4,r2
 4000c90:	180b883a 	mov	r5,r3
 4000c94:	1029883a 	mov	r20,r2
 4000c98:	1827883a 	mov	r19,r3
 4000c9c:	40047cc0 	call	40047cc <__muldf3>
 4000ca0:	b009883a 	mov	r4,r22
 4000ca4:	a80b883a 	mov	r5,r21
 4000ca8:	100d883a 	mov	r6,r2
 4000cac:	180f883a 	mov	r7,r3
 4000cb0:	4004ee40 	call	4004ee4 <__subdf3>
 4000cb4:	018698b4 	movhi	r6,6754
 4000cb8:	01cf7474 	movhi	r7,15825
 4000cbc:	a009883a 	mov	r4,r20
 4000cc0:	3198cc44 	addi	r6,r6,25393
 4000cc4:	39ed1844 	addi	r7,r7,-19359
 4000cc8:	980b883a 	mov	r5,r19
 4000ccc:	1039883a 	mov	fp,r2
 4000cd0:	d8c00815 	stw	r3,32(sp)
 4000cd4:	40047cc0 	call	40047cc <__muldf3>
 4000cd8:	010007c4 	movi	r4,31
 4000cdc:	e017883a 	mov	r11,fp
 4000ce0:	da800817 	ldw	r10,32(sp)
 4000ce4:	102d883a 	mov	r22,r2
 4000ce8:	182b883a 	mov	r21,r3
 4000cec:	24802816 	blt	r4,r18,4000d90 <__ieee754_rem_pio2+0x464>
 4000cf0:	913fffc4 	addi	r4,r18,-1
 4000cf4:	2109883a 	add	r4,r4,r4
 4000cf8:	01410074 	movhi	r5,1025
 4000cfc:	2109883a 	add	r4,r4,r4
 4000d00:	296f4a04 	addi	r5,r5,-17112
 4000d04:	2909883a 	add	r4,r5,r4
 4000d08:	21000017 	ldw	r4,0(r4)
 4000d0c:	b9002026 	beq	r23,r4,4000d90 <__ieee754_rem_pio2+0x464>
 4000d10:	100d883a 	mov	r6,r2
 4000d14:	180f883a 	mov	r7,r3
 4000d18:	e009883a 	mov	r4,fp
 4000d1c:	500b883a 	mov	r5,r10
 4000d20:	da800b15 	stw	r10,44(sp)
 4000d24:	df000a15 	stw	fp,40(sp)
 4000d28:	4004ee40 	call	4004ee4 <__subdf3>
 4000d2c:	da800b17 	ldw	r10,44(sp)
 4000d30:	dac00a17 	ldw	r11,40(sp)
 4000d34:	1019883a 	mov	r12,r2
 4000d38:	1813883a 	mov	r9,r3
 4000d3c:	80800015 	stw	r2,0(r16)
 4000d40:	80c00115 	stw	r3,4(r16)
 4000d44:	600d883a 	mov	r6,r12
 4000d48:	480f883a 	mov	r7,r9
 4000d4c:	5809883a 	mov	r4,r11
 4000d50:	500b883a 	mov	r5,r10
 4000d54:	da400b15 	stw	r9,44(sp)
 4000d58:	db000a15 	stw	r12,40(sp)
 4000d5c:	4004ee40 	call	4004ee4 <__subdf3>
 4000d60:	b00d883a 	mov	r6,r22
 4000d64:	a80f883a 	mov	r7,r21
 4000d68:	1009883a 	mov	r4,r2
 4000d6c:	180b883a 	mov	r5,r3
 4000d70:	4004ee40 	call	4004ee4 <__subdf3>
 4000d74:	80800215 	stw	r2,8(r16)
 4000d78:	80c00315 	stw	r3,12(r16)
 4000d7c:	da400b17 	ldw	r9,44(sp)
 4000d80:	db000a17 	ldw	r12,40(sp)
 4000d84:	88009f16 	blt	r17,zero,4001004 <__ieee754_rem_pio2+0x6d8>
 4000d88:	9005883a 	mov	r2,r18
 4000d8c:	003f7706 	br	4000b6c <__ram_exceptions_end+0xfbfe0924>
 4000d90:	d9400817 	ldw	r5,32(sp)
 4000d94:	100d883a 	mov	r6,r2
 4000d98:	180f883a 	mov	r7,r3
 4000d9c:	e009883a 	mov	r4,fp
 4000da0:	da800b15 	stw	r10,44(sp)
 4000da4:	dac00a15 	stw	r11,40(sp)
 4000da8:	4004ee40 	call	4004ee4 <__subdf3>
 4000dac:	1019883a 	mov	r12,r2
 4000db0:	1804d53a 	srli	r2,r3,20
 4000db4:	b811d53a 	srai	r8,r23,20
 4000db8:	1813883a 	mov	r9,r3
 4000dbc:	1081ffcc 	andi	r2,r2,2047
 4000dc0:	80c00115 	stw	r3,4(r16)
 4000dc4:	83000015 	stw	r12,0(r16)
 4000dc8:	4085c83a 	sub	r2,r8,r2
 4000dcc:	00c00404 	movi	r3,16
 4000dd0:	da800b17 	ldw	r10,44(sp)
 4000dd4:	dac00a17 	ldw	r11,40(sp)
 4000dd8:	18bfda0e 	bge	r3,r2,4000d44 <__ram_exceptions_end+0xfbfe0afc>
 4000ddc:	01cf7474 	movhi	r7,15825
 4000de0:	39ed1844 	addi	r7,r7,-19359
 4000de4:	01869834 	movhi	r6,6752
 4000de8:	a009883a 	mov	r4,r20
 4000dec:	980b883a 	mov	r5,r19
 4000df0:	da000a15 	stw	r8,40(sp)
 4000df4:	40047cc0 	call	40047cc <__muldf3>
 4000df8:	d9400817 	ldw	r5,32(sp)
 4000dfc:	100d883a 	mov	r6,r2
 4000e00:	180f883a 	mov	r7,r3
 4000e04:	e009883a 	mov	r4,fp
 4000e08:	102d883a 	mov	r22,r2
 4000e0c:	182b883a 	mov	r21,r3
 4000e10:	4004ee40 	call	4004ee4 <__subdf3>
 4000e14:	d9400817 	ldw	r5,32(sp)
 4000e18:	100d883a 	mov	r6,r2
 4000e1c:	180f883a 	mov	r7,r3
 4000e20:	e009883a 	mov	r4,fp
 4000e24:	182f883a 	mov	r23,r3
 4000e28:	d8800915 	stw	r2,36(sp)
 4000e2c:	4004ee40 	call	4004ee4 <__subdf3>
 4000e30:	b00d883a 	mov	r6,r22
 4000e34:	a80f883a 	mov	r7,r21
 4000e38:	1009883a 	mov	r4,r2
 4000e3c:	180b883a 	mov	r5,r3
 4000e40:	4004ee40 	call	4004ee4 <__subdf3>
 4000e44:	018b80f4 	movhi	r6,11779
 4000e48:	01cee8f4 	movhi	r7,15267
 4000e4c:	319c1cc4 	addi	r6,r6,28787
 4000e50:	39c66284 	addi	r7,r7,6538
 4000e54:	a009883a 	mov	r4,r20
 4000e58:	980b883a 	mov	r5,r19
 4000e5c:	102d883a 	mov	r22,r2
 4000e60:	182b883a 	mov	r21,r3
 4000e64:	40047cc0 	call	40047cc <__muldf3>
 4000e68:	b00d883a 	mov	r6,r22
 4000e6c:	a80f883a 	mov	r7,r21
 4000e70:	1009883a 	mov	r4,r2
 4000e74:	180b883a 	mov	r5,r3
 4000e78:	4004ee40 	call	4004ee4 <__subdf3>
 4000e7c:	d9000917 	ldw	r4,36(sp)
 4000e80:	100d883a 	mov	r6,r2
 4000e84:	180f883a 	mov	r7,r3
 4000e88:	b80b883a 	mov	r5,r23
 4000e8c:	102d883a 	mov	r22,r2
 4000e90:	182b883a 	mov	r21,r3
 4000e94:	4004ee40 	call	4004ee4 <__subdf3>
 4000e98:	1019883a 	mov	r12,r2
 4000e9c:	1804d53a 	srli	r2,r3,20
 4000ea0:	da000a17 	ldw	r8,40(sp)
 4000ea4:	83000015 	stw	r12,0(r16)
 4000ea8:	1081ffcc 	andi	r2,r2,2047
 4000eac:	4091c83a 	sub	r8,r8,r2
 4000eb0:	80c00115 	stw	r3,4(r16)
 4000eb4:	00800c44 	movi	r2,49
 4000eb8:	1813883a 	mov	r9,r3
 4000ebc:	1200730e 	bge	r2,r8,400108c <__ieee754_rem_pio2+0x760>
 4000ec0:	01cee8f4 	movhi	r7,15267
 4000ec4:	39c66284 	addi	r7,r7,6538
 4000ec8:	018b8034 	movhi	r6,11776
 4000ecc:	a009883a 	mov	r4,r20
 4000ed0:	980b883a 	mov	r5,r19
 4000ed4:	40047cc0 	call	40047cc <__muldf3>
 4000ed8:	d9000917 	ldw	r4,36(sp)
 4000edc:	100d883a 	mov	r6,r2
 4000ee0:	180f883a 	mov	r7,r3
 4000ee4:	b80b883a 	mov	r5,r23
 4000ee8:	102d883a 	mov	r22,r2
 4000eec:	182b883a 	mov	r21,r3
 4000ef0:	4004ee40 	call	4004ee4 <__subdf3>
 4000ef4:	d9000917 	ldw	r4,36(sp)
 4000ef8:	100d883a 	mov	r6,r2
 4000efc:	180f883a 	mov	r7,r3
 4000f00:	b80b883a 	mov	r5,r23
 4000f04:	d8c00b15 	stw	r3,44(sp)
 4000f08:	d8800a15 	stw	r2,40(sp)
 4000f0c:	4004ee40 	call	4004ee4 <__subdf3>
 4000f10:	b00d883a 	mov	r6,r22
 4000f14:	a80f883a 	mov	r7,r21
 4000f18:	1009883a 	mov	r4,r2
 4000f1c:	180b883a 	mov	r5,r3
 4000f20:	4004ee40 	call	4004ee4 <__subdf3>
 4000f24:	01894834 	movhi	r6,9504
 4000f28:	01ce5f34 	movhi	r7,14716
 4000f2c:	31927044 	addi	r6,r6,18881
 4000f30:	39e0e684 	addi	r7,r7,-31846
 4000f34:	a009883a 	mov	r4,r20
 4000f38:	980b883a 	mov	r5,r19
 4000f3c:	102d883a 	mov	r22,r2
 4000f40:	182b883a 	mov	r21,r3
 4000f44:	40047cc0 	call	40047cc <__muldf3>
 4000f48:	b00d883a 	mov	r6,r22
 4000f4c:	a80f883a 	mov	r7,r21
 4000f50:	1009883a 	mov	r4,r2
 4000f54:	180b883a 	mov	r5,r3
 4000f58:	4004ee40 	call	4004ee4 <__subdf3>
 4000f5c:	dac00a17 	ldw	r11,40(sp)
 4000f60:	da800b17 	ldw	r10,44(sp)
 4000f64:	102d883a 	mov	r22,r2
 4000f68:	182b883a 	mov	r21,r3
 4000f6c:	100d883a 	mov	r6,r2
 4000f70:	180f883a 	mov	r7,r3
 4000f74:	5809883a 	mov	r4,r11
 4000f78:	500b883a 	mov	r5,r10
 4000f7c:	003f6a06 	br	4000d28 <__ram_exceptions_end+0xfbfe0ae0>
 4000f80:	40034d40 	call	40034d4 <__adddf3>
 4000f84:	1025883a 	mov	r18,r2
 4000f88:	008ffe74 	movhi	r2,16377
 4000f8c:	10887ec4 	addi	r2,r2,8699
 4000f90:	1823883a 	mov	r17,r3
 4000f94:	b8802226 	beq	r23,r2,4001020 <__ieee754_rem_pio2+0x6f4>
 4000f98:	018698b4 	movhi	r6,6754
 4000f9c:	01cf7474 	movhi	r7,15825
 4000fa0:	3198cc44 	addi	r6,r6,25393
 4000fa4:	39ed1844 	addi	r7,r7,-19359
 4000fa8:	9009883a 	mov	r4,r18
 4000fac:	180b883a 	mov	r5,r3
 4000fb0:	40034d40 	call	40034d4 <__adddf3>
 4000fb4:	100d883a 	mov	r6,r2
 4000fb8:	180f883a 	mov	r7,r3
 4000fbc:	9009883a 	mov	r4,r18
 4000fc0:	880b883a 	mov	r5,r17
 4000fc4:	80800015 	stw	r2,0(r16)
 4000fc8:	80c00115 	stw	r3,4(r16)
 4000fcc:	4004ee40 	call	4004ee4 <__subdf3>
 4000fd0:	018698b4 	movhi	r6,6754
 4000fd4:	01cf7474 	movhi	r7,15825
 4000fd8:	3198cc44 	addi	r6,r6,25393
 4000fdc:	39ed1844 	addi	r7,r7,-19359
 4000fe0:	1009883a 	mov	r4,r2
 4000fe4:	180b883a 	mov	r5,r3
 4000fe8:	40034d40 	call	40034d4 <__adddf3>
 4000fec:	80800215 	stw	r2,8(r16)
 4000ff0:	80c00315 	stw	r3,12(r16)
 4000ff4:	00bfffc4 	movi	r2,-1
 4000ff8:	003edc06 	br	4000b6c <__ram_exceptions_end+0xfbfe0924>
 4000ffc:	01c000c4 	movi	r7,3
 4001000:	003ec306 	br	4000b10 <__ram_exceptions_end+0xfbfe08c8>
 4001004:	4a60003c 	xorhi	r9,r9,32768
 4001008:	18e0003c 	xorhi	r3,r3,32768
 400100c:	83000015 	stw	r12,0(r16)
 4001010:	82400115 	stw	r9,4(r16)
 4001014:	80c00315 	stw	r3,12(r16)
 4001018:	0485c83a 	sub	r2,zero,r18
 400101c:	003ed306 	br	4000b6c <__ram_exceptions_end+0xfbfe0924>
 4001020:	01cf7474 	movhi	r7,15825
 4001024:	9009883a 	mov	r4,r18
 4001028:	39ed1844 	addi	r7,r7,-19359
 400102c:	01869834 	movhi	r6,6752
 4001030:	180b883a 	mov	r5,r3
 4001034:	40034d40 	call	40034d4 <__adddf3>
 4001038:	018b80f4 	movhi	r6,11779
 400103c:	01cee8f4 	movhi	r7,15267
 4001040:	319c1cc4 	addi	r6,r6,28787
 4001044:	39c66284 	addi	r7,r7,6538
 4001048:	1009883a 	mov	r4,r2
 400104c:	180b883a 	mov	r5,r3
 4001050:	1025883a 	mov	r18,r2
 4001054:	1823883a 	mov	r17,r3
 4001058:	40034d40 	call	40034d4 <__adddf3>
 400105c:	100d883a 	mov	r6,r2
 4001060:	180f883a 	mov	r7,r3
 4001064:	9009883a 	mov	r4,r18
 4001068:	880b883a 	mov	r5,r17
 400106c:	80800015 	stw	r2,0(r16)
 4001070:	80c00115 	stw	r3,4(r16)
 4001074:	4004ee40 	call	4004ee4 <__subdf3>
 4001078:	018b80f4 	movhi	r6,11779
 400107c:	01cee8f4 	movhi	r7,15267
 4001080:	319c1cc4 	addi	r6,r6,28787
 4001084:	39c66284 	addi	r7,r7,6538
 4001088:	003fd506 	br	4000fe0 <__ram_exceptions_end+0xfbfe0d98>
 400108c:	dac00917 	ldw	r11,36(sp)
 4001090:	b815883a 	mov	r10,r23
 4001094:	003f2b06 	br	4000d44 <__ram_exceptions_end+0xfbfe0afc>

04001098 <__kernel_cos>:
 4001098:	defff304 	addi	sp,sp,-52
 400109c:	dc000315 	stw	r16,12(sp)
 40010a0:	04200034 	movhi	r16,32768
 40010a4:	843fffc4 	addi	r16,r16,-1
 40010a8:	008f9034 	movhi	r2,15936
 40010ac:	df000b15 	stw	fp,44(sp)
 40010b0:	ddc00a15 	stw	r23,40(sp)
 40010b4:	dd800915 	stw	r22,36(sp)
 40010b8:	dcc00615 	stw	r19,24(sp)
 40010bc:	dfc00c15 	stw	ra,48(sp)
 40010c0:	dd400815 	stw	r21,32(sp)
 40010c4:	dd000715 	stw	r20,28(sp)
 40010c8:	dc800515 	stw	r18,20(sp)
 40010cc:	dc400415 	stw	r17,16(sp)
 40010d0:	2c20703a 	and	r16,r5,r16
 40010d4:	10bfffc4 	addi	r2,r2,-1
 40010d8:	2827883a 	mov	r19,r5
 40010dc:	202d883a 	mov	r22,r4
 40010e0:	302f883a 	mov	r23,r6
 40010e4:	3839883a 	mov	fp,r7
 40010e8:	14007516 	blt	r2,r16,40012c0 <__kernel_cos+0x228>
 40010ec:	40057e00 	call	40057e0 <__fixdfsi>
 40010f0:	10010f26 	beq	r2,zero,4001530 <__kernel_cos+0x498>
 40010f4:	b00d883a 	mov	r6,r22
 40010f8:	980f883a 	mov	r7,r19
 40010fc:	b009883a 	mov	r4,r22
 4001100:	980b883a 	mov	r5,r19
 4001104:	40047cc0 	call	40047cc <__muldf3>
 4001108:	01afa234 	movhi	r6,48776
 400110c:	01ef6a74 	movhi	r7,48553
 4001110:	318e3504 	addi	r6,r6,14548
 4001114:	39feba44 	addi	r7,r7,-1303
 4001118:	1009883a 	mov	r4,r2
 400111c:	180b883a 	mov	r5,r3
 4001120:	102b883a 	mov	r21,r2
 4001124:	1829883a 	mov	r20,r3
 4001128:	40047cc0 	call	40047cc <__muldf3>
 400112c:	01af6d74 	movhi	r6,48565
 4001130:	01cf88b4 	movhi	r7,15906
 4001134:	31ac7104 	addi	r6,r6,-20028
 4001138:	39fba784 	addi	r7,r7,-4450
 400113c:	1009883a 	mov	r4,r2
 4001140:	180b883a 	mov	r5,r3
 4001144:	40034d40 	call	40034d4 <__adddf3>
 4001148:	a80d883a 	mov	r6,r21
 400114c:	a00f883a 	mov	r7,r20
 4001150:	1009883a 	mov	r4,r2
 4001154:	180b883a 	mov	r5,r3
 4001158:	40047cc0 	call	40047cc <__muldf3>
 400115c:	01a02734 	movhi	r6,32924
 4001160:	01cfa4b4 	movhi	r7,16018
 4001164:	3194ab44 	addi	r6,r6,21165
 4001168:	39df93c4 	addi	r7,r7,32335
 400116c:	1009883a 	mov	r4,r2
 4001170:	180b883a 	mov	r5,r3
 4001174:	4004ee40 	call	4004ee4 <__subdf3>
 4001178:	a80d883a 	mov	r6,r21
 400117c:	a00f883a 	mov	r7,r20
 4001180:	1009883a 	mov	r4,r2
 4001184:	180b883a 	mov	r5,r3
 4001188:	40047cc0 	call	40047cc <__muldf3>
 400118c:	018672f4 	movhi	r6,6603
 4001190:	01cfbeb4 	movhi	r7,16122
 4001194:	31856404 	addi	r6,r6,5520
 4001198:	39c06804 	addi	r7,r7,416
 400119c:	1009883a 	mov	r4,r2
 40011a0:	180b883a 	mov	r5,r3
 40011a4:	40034d40 	call	40034d4 <__adddf3>
 40011a8:	a80d883a 	mov	r6,r21
 40011ac:	a00f883a 	mov	r7,r20
 40011b0:	1009883a 	mov	r4,r2
 40011b4:	180b883a 	mov	r5,r3
 40011b8:	40047cc0 	call	40047cc <__muldf3>
 40011bc:	0185b074 	movhi	r6,5825
 40011c0:	01cfd5f4 	movhi	r7,16215
 40011c4:	31945dc4 	addi	r6,r6,20855
 40011c8:	39f05b04 	addi	r7,r7,-16020
 40011cc:	1009883a 	mov	r4,r2
 40011d0:	180b883a 	mov	r5,r3
 40011d4:	4004ee40 	call	4004ee4 <__subdf3>
 40011d8:	a80d883a 	mov	r6,r21
 40011dc:	a00f883a 	mov	r7,r20
 40011e0:	1009883a 	mov	r4,r2
 40011e4:	180b883a 	mov	r5,r3
 40011e8:	40047cc0 	call	40047cc <__muldf3>
 40011ec:	01955574 	movhi	r6,21845
 40011f0:	01cfe974 	movhi	r7,16293
 40011f4:	31955304 	addi	r6,r6,21836
 40011f8:	39d55544 	addi	r7,r7,21845
 40011fc:	1009883a 	mov	r4,r2
 4001200:	180b883a 	mov	r5,r3
 4001204:	40034d40 	call	40034d4 <__adddf3>
 4001208:	a80d883a 	mov	r6,r21
 400120c:	a00f883a 	mov	r7,r20
 4001210:	1009883a 	mov	r4,r2
 4001214:	180b883a 	mov	r5,r3
 4001218:	40047cc0 	call	40047cc <__muldf3>
 400121c:	1017883a 	mov	r11,r2
 4001220:	1815883a 	mov	r10,r3
 4001224:	a809883a 	mov	r4,r21
 4001228:	a00b883a 	mov	r5,r20
 400122c:	000d883a 	mov	r6,zero
 4001230:	01cff834 	movhi	r7,16352
 4001234:	da800215 	stw	r10,8(sp)
 4001238:	dac00115 	stw	r11,4(sp)
 400123c:	40047cc0 	call	40047cc <__muldf3>
 4001240:	dac00117 	ldw	r11,4(sp)
 4001244:	da800217 	ldw	r10,8(sp)
 4001248:	a809883a 	mov	r4,r21
 400124c:	580d883a 	mov	r6,r11
 4001250:	500f883a 	mov	r7,r10
 4001254:	a00b883a 	mov	r5,r20
 4001258:	1023883a 	mov	r17,r2
 400125c:	1821883a 	mov	r16,r3
 4001260:	40047cc0 	call	40047cc <__muldf3>
 4001264:	b80d883a 	mov	r6,r23
 4001268:	e00f883a 	mov	r7,fp
 400126c:	b009883a 	mov	r4,r22
 4001270:	980b883a 	mov	r5,r19
 4001274:	1029883a 	mov	r20,r2
 4001278:	1825883a 	mov	r18,r3
 400127c:	40047cc0 	call	40047cc <__muldf3>
 4001280:	a009883a 	mov	r4,r20
 4001284:	900b883a 	mov	r5,r18
 4001288:	100d883a 	mov	r6,r2
 400128c:	180f883a 	mov	r7,r3
 4001290:	4004ee40 	call	4004ee4 <__subdf3>
 4001294:	8809883a 	mov	r4,r17
 4001298:	800b883a 	mov	r5,r16
 400129c:	100d883a 	mov	r6,r2
 40012a0:	180f883a 	mov	r7,r3
 40012a4:	4004ee40 	call	4004ee4 <__subdf3>
 40012a8:	100d883a 	mov	r6,r2
 40012ac:	180f883a 	mov	r7,r3
 40012b0:	0009883a 	mov	r4,zero
 40012b4:	014ffc34 	movhi	r5,16368
 40012b8:	4004ee40 	call	4004ee4 <__subdf3>
 40012bc:	00008b06 	br	40014ec <__kernel_cos+0x454>
 40012c0:	200d883a 	mov	r6,r4
 40012c4:	280f883a 	mov	r7,r5
 40012c8:	40047cc0 	call	40047cc <__muldf3>
 40012cc:	01afa234 	movhi	r6,48776
 40012d0:	01ef6a74 	movhi	r7,48553
 40012d4:	318e3504 	addi	r6,r6,14548
 40012d8:	39feba44 	addi	r7,r7,-1303
 40012dc:	1009883a 	mov	r4,r2
 40012e0:	180b883a 	mov	r5,r3
 40012e4:	1025883a 	mov	r18,r2
 40012e8:	1823883a 	mov	r17,r3
 40012ec:	40047cc0 	call	40047cc <__muldf3>
 40012f0:	01af6d74 	movhi	r6,48565
 40012f4:	01cf88b4 	movhi	r7,15906
 40012f8:	31ac7104 	addi	r6,r6,-20028
 40012fc:	39fba784 	addi	r7,r7,-4450
 4001300:	1009883a 	mov	r4,r2
 4001304:	180b883a 	mov	r5,r3
 4001308:	40034d40 	call	40034d4 <__adddf3>
 400130c:	900d883a 	mov	r6,r18
 4001310:	880f883a 	mov	r7,r17
 4001314:	1009883a 	mov	r4,r2
 4001318:	180b883a 	mov	r5,r3
 400131c:	40047cc0 	call	40047cc <__muldf3>
 4001320:	01a02734 	movhi	r6,32924
 4001324:	01cfa4b4 	movhi	r7,16018
 4001328:	3194ab44 	addi	r6,r6,21165
 400132c:	39df93c4 	addi	r7,r7,32335
 4001330:	1009883a 	mov	r4,r2
 4001334:	180b883a 	mov	r5,r3
 4001338:	4004ee40 	call	4004ee4 <__subdf3>
 400133c:	900d883a 	mov	r6,r18
 4001340:	880f883a 	mov	r7,r17
 4001344:	1009883a 	mov	r4,r2
 4001348:	180b883a 	mov	r5,r3
 400134c:	40047cc0 	call	40047cc <__muldf3>
 4001350:	018672f4 	movhi	r6,6603
 4001354:	01cfbeb4 	movhi	r7,16122
 4001358:	31856404 	addi	r6,r6,5520
 400135c:	39c06804 	addi	r7,r7,416
 4001360:	1009883a 	mov	r4,r2
 4001364:	180b883a 	mov	r5,r3
 4001368:	40034d40 	call	40034d4 <__adddf3>
 400136c:	900d883a 	mov	r6,r18
 4001370:	880f883a 	mov	r7,r17
 4001374:	1009883a 	mov	r4,r2
 4001378:	180b883a 	mov	r5,r3
 400137c:	40047cc0 	call	40047cc <__muldf3>
 4001380:	0185b074 	movhi	r6,5825
 4001384:	01cfd5f4 	movhi	r7,16215
 4001388:	31945dc4 	addi	r6,r6,20855
 400138c:	39f05b04 	addi	r7,r7,-16020
 4001390:	1009883a 	mov	r4,r2
 4001394:	180b883a 	mov	r5,r3
 4001398:	4004ee40 	call	4004ee4 <__subdf3>
 400139c:	900d883a 	mov	r6,r18
 40013a0:	880f883a 	mov	r7,r17
 40013a4:	1009883a 	mov	r4,r2
 40013a8:	180b883a 	mov	r5,r3
 40013ac:	40047cc0 	call	40047cc <__muldf3>
 40013b0:	01955574 	movhi	r6,21845
 40013b4:	01cfe974 	movhi	r7,16293
 40013b8:	31955304 	addi	r6,r6,21836
 40013bc:	39d55544 	addi	r7,r7,21845
 40013c0:	1009883a 	mov	r4,r2
 40013c4:	180b883a 	mov	r5,r3
 40013c8:	40034d40 	call	40034d4 <__adddf3>
 40013cc:	900d883a 	mov	r6,r18
 40013d0:	880f883a 	mov	r7,r17
 40013d4:	1009883a 	mov	r4,r2
 40013d8:	180b883a 	mov	r5,r3
 40013dc:	40047cc0 	call	40047cc <__muldf3>
 40013e0:	1013883a 	mov	r9,r2
 40013e4:	1017883a 	mov	r11,r2
 40013e8:	008ff4f4 	movhi	r2,16339
 40013ec:	108ccc84 	addi	r2,r2,13106
 40013f0:	1811883a 	mov	r8,r3
 40013f4:	902b883a 	mov	r21,r18
 40013f8:	8829883a 	mov	r20,r17
 40013fc:	1815883a 	mov	r10,r3
 4001400:	143f880e 	bge	r2,r16,4001224 <__ram_exceptions_end+0xfbfe0fdc>
 4001404:	008ffa74 	movhi	r2,16361
 4001408:	14004416 	blt	r2,r16,400151c <__kernel_cos+0x484>
 400140c:	00bff834 	movhi	r2,65504
 4001410:	80a1883a 	add	r16,r16,r2
 4001414:	000d883a 	mov	r6,zero
 4001418:	800f883a 	mov	r7,r16
 400141c:	0009883a 	mov	r4,zero
 4001420:	014ffc34 	movhi	r5,16368
 4001424:	da400115 	stw	r9,4(sp)
 4001428:	d8c00215 	stw	r3,8(sp)
 400142c:	4004ee40 	call	4004ee4 <__subdf3>
 4001430:	da000217 	ldw	r8,8(sp)
 4001434:	da400117 	ldw	r9,4(sp)
 4001438:	102b883a 	mov	r21,r2
 400143c:	d8c00015 	stw	r3,0(sp)
 4001440:	9009883a 	mov	r4,r18
 4001444:	880b883a 	mov	r5,r17
 4001448:	000d883a 	mov	r6,zero
 400144c:	01cff834 	movhi	r7,16352
 4001450:	da000215 	stw	r8,8(sp)
 4001454:	da400115 	stw	r9,4(sp)
 4001458:	40047cc0 	call	40047cc <__muldf3>
 400145c:	800f883a 	mov	r7,r16
 4001460:	000d883a 	mov	r6,zero
 4001464:	1009883a 	mov	r4,r2
 4001468:	180b883a 	mov	r5,r3
 400146c:	4004ee40 	call	4004ee4 <__subdf3>
 4001470:	da400117 	ldw	r9,4(sp)
 4001474:	da000217 	ldw	r8,8(sp)
 4001478:	9009883a 	mov	r4,r18
 400147c:	480d883a 	mov	r6,r9
 4001480:	400f883a 	mov	r7,r8
 4001484:	880b883a 	mov	r5,r17
 4001488:	1029883a 	mov	r20,r2
 400148c:	1821883a 	mov	r16,r3
 4001490:	40047cc0 	call	40047cc <__muldf3>
 4001494:	b80d883a 	mov	r6,r23
 4001498:	e00f883a 	mov	r7,fp
 400149c:	b009883a 	mov	r4,r22
 40014a0:	980b883a 	mov	r5,r19
 40014a4:	1025883a 	mov	r18,r2
 40014a8:	1823883a 	mov	r17,r3
 40014ac:	40047cc0 	call	40047cc <__muldf3>
 40014b0:	100d883a 	mov	r6,r2
 40014b4:	180f883a 	mov	r7,r3
 40014b8:	9009883a 	mov	r4,r18
 40014bc:	880b883a 	mov	r5,r17
 40014c0:	4004ee40 	call	4004ee4 <__subdf3>
 40014c4:	100d883a 	mov	r6,r2
 40014c8:	180f883a 	mov	r7,r3
 40014cc:	a009883a 	mov	r4,r20
 40014d0:	800b883a 	mov	r5,r16
 40014d4:	4004ee40 	call	4004ee4 <__subdf3>
 40014d8:	d9400017 	ldw	r5,0(sp)
 40014dc:	100d883a 	mov	r6,r2
 40014e0:	180f883a 	mov	r7,r3
 40014e4:	a809883a 	mov	r4,r21
 40014e8:	4004ee40 	call	4004ee4 <__subdf3>
 40014ec:	dfc00c17 	ldw	ra,48(sp)
 40014f0:	df000b17 	ldw	fp,44(sp)
 40014f4:	ddc00a17 	ldw	r23,40(sp)
 40014f8:	dd800917 	ldw	r22,36(sp)
 40014fc:	dd400817 	ldw	r21,32(sp)
 4001500:	dd000717 	ldw	r20,28(sp)
 4001504:	dcc00617 	ldw	r19,24(sp)
 4001508:	dc800517 	ldw	r18,20(sp)
 400150c:	dc400417 	ldw	r17,16(sp)
 4001510:	dc000317 	ldw	r16,12(sp)
 4001514:	dec00d04 	addi	sp,sp,52
 4001518:	f800283a 	ret
 400151c:	008ff9f4 	movhi	r2,16359
 4001520:	002b883a 	mov	r21,zero
 4001524:	d8800015 	stw	r2,0(sp)
 4001528:	040ff4b4 	movhi	r16,16338
 400152c:	003fc406 	br	4001440 <__ram_exceptions_end+0xfbfe11f8>
 4001530:	0005883a 	mov	r2,zero
 4001534:	00cffc34 	movhi	r3,16368
 4001538:	003fec06 	br	40014ec <__ram_exceptions_end+0xfbfe12a4>

0400153c <__kernel_rem_pio2>:
 400153c:	deff5a04 	addi	sp,sp,-664
 4001540:	da00a617 	ldw	r8,664(sp)
 4001544:	00c10074 	movhi	r3,1025
 4001548:	18efbc04 	addi	r3,r3,-16656
 400154c:	4205883a 	add	r2,r8,r8
 4001550:	1085883a 	add	r2,r2,r2
 4001554:	1885883a 	add	r2,r3,r2
 4001558:	d9008e15 	stw	r4,568(sp)
 400155c:	d9408f15 	stw	r5,572(sp)
 4001560:	313fff44 	addi	r4,r6,-3
 4001564:	01400604 	movi	r5,24
 4001568:	dd80a215 	stw	r22,648(sp)
 400156c:	dc009c15 	stw	r16,624(sp)
 4001570:	dfc0a515 	stw	ra,660(sp)
 4001574:	df00a415 	stw	fp,656(sp)
 4001578:	ddc0a315 	stw	r23,652(sp)
 400157c:	dd40a115 	stw	r21,644(sp)
 4001580:	dd00a015 	stw	r20,640(sp)
 4001584:	dcc09f15 	stw	r19,636(sp)
 4001588:	dc809e15 	stw	r18,632(sp)
 400158c:	dc409d15 	stw	r17,628(sp)
 4001590:	3021883a 	mov	r16,r6
 4001594:	d9c09315 	stw	r7,588(sp)
 4001598:	15800017 	ldw	r22,0(r2)
 400159c:	40029500 	call	4002950 <__divsi3>
 40015a0:	da009317 	ldw	r8,588(sp)
 40015a4:	d8809215 	stw	r2,584(sp)
 40015a8:	423fffc4 	addi	r8,r8,-1
 40015ac:	da008d15 	stw	r8,564(sp)
 40015b0:	10033b16 	blt	r2,zero,40022a0 <__kernel_rem_pio2+0xd64>
 40015b4:	da009217 	ldw	r8,584(sp)
 40015b8:	d9009217 	ldw	r4,584(sp)
 40015bc:	42000044 	addi	r8,r8,1
 40015c0:	40fffa24 	muli	r3,r8,-24
 40015c4:	da009515 	stw	r8,596(sp)
 40015c8:	da008d17 	ldw	r8,564(sp)
 40015cc:	1c07883a 	add	r3,r3,r16
 40015d0:	d8c09015 	stw	r3,576(sp)
 40015d4:	b205883a 	add	r2,r22,r8
 40015d8:	2223c83a 	sub	r17,r4,r8
 40015dc:	10001016 	blt	r2,zero,4001620 <__kernel_rem_pio2+0xe4>
 40015e0:	da00a717 	ldw	r8,668(sp)
 40015e4:	8c65883a 	add	r18,r17,r17
 40015e8:	94a5883a 	add	r18,r18,r18
 40015ec:	1445883a 	add	r2,r2,r17
 40015f0:	dcc05004 	addi	r19,sp,320
 40015f4:	44a5883a 	add	r18,r8,r18
 40015f8:	14000044 	addi	r16,r2,1
 40015fc:	88015316 	blt	r17,zero,4001b4c <__kernel_rem_pio2+0x610>
 4001600:	91000017 	ldw	r4,0(r18)
 4001604:	40058600 	call	4005860 <__floatsidf>
 4001608:	98800015 	stw	r2,0(r19)
 400160c:	98c00115 	stw	r3,4(r19)
 4001610:	8c400044 	addi	r17,r17,1
 4001614:	9cc00204 	addi	r19,r19,8
 4001618:	94800104 	addi	r18,r18,4
 400161c:	8c3ff71e 	bne	r17,r16,40015fc <__ram_exceptions_end+0xfbfe13b4>
 4001620:	b0002816 	blt	r22,zero,40016c4 <__kernel_rem_pio2+0x188>
 4001624:	da008d17 	ldw	r8,564(sp)
 4001628:	b4c00044 	addi	r19,r22,1
 400162c:	982690fa 	slli	r19,r19,3
 4001630:	402490fa 	slli	r18,r8,3
 4001634:	da008e17 	ldw	r8,568(sp)
 4001638:	d8805004 	addi	r2,sp,320
 400163c:	94000204 	addi	r16,r18,8
 4001640:	d823883a 	mov	r17,sp
 4001644:	14a5883a 	add	r18,r2,r18
 4001648:	dcef883a 	add	r23,sp,r19
 400164c:	4421883a 	add	r16,r8,r16
 4001650:	dd809115 	stw	r22,580(sp)
 4001654:	4039883a 	mov	fp,r8
 4001658:	da008d17 	ldw	r8,564(sp)
 400165c:	40016016 	blt	r8,zero,4001be0 <__kernel_rem_pio2+0x6a4>
 4001660:	e027883a 	mov	r19,fp
 4001664:	9029883a 	mov	r20,r18
 4001668:	002d883a 	mov	r22,zero
 400166c:	002b883a 	mov	r21,zero
 4001670:	a1800017 	ldw	r6,0(r20)
 4001674:	a1c00117 	ldw	r7,4(r20)
 4001678:	99000017 	ldw	r4,0(r19)
 400167c:	99400117 	ldw	r5,4(r19)
 4001680:	9cc00204 	addi	r19,r19,8
 4001684:	a53ffe04 	addi	r20,r20,-8
 4001688:	40047cc0 	call	40047cc <__muldf3>
 400168c:	b009883a 	mov	r4,r22
 4001690:	a80b883a 	mov	r5,r21
 4001694:	100d883a 	mov	r6,r2
 4001698:	180f883a 	mov	r7,r3
 400169c:	40034d40 	call	40034d4 <__adddf3>
 40016a0:	102d883a 	mov	r22,r2
 40016a4:	182b883a 	mov	r21,r3
 40016a8:	9c3ff11e 	bne	r19,r16,4001670 <__ram_exceptions_end+0xfbfe1428>
 40016ac:	8d800015 	stw	r22,0(r17)
 40016b0:	8d400115 	stw	r21,4(r17)
 40016b4:	8c400204 	addi	r17,r17,8
 40016b8:	94800204 	addi	r18,r18,8
 40016bc:	8dffe61e 	bne	r17,r23,4001658 <__ram_exceptions_end+0xfbfe1410>
 40016c0:	dd809117 	ldw	r22,580(sp)
 40016c4:	00d00034 	movhi	r3,16384
 40016c8:	da009317 	ldw	r8,588(sp)
 40016cc:	18ffff84 	addi	r3,r3,-2
 40016d0:	b0c7883a 	add	r3,r22,r3
 40016d4:	18c7883a 	add	r3,r3,r3
 40016d8:	402090fa 	slli	r16,r8,3
 40016dc:	18c7883a 	add	r3,r3,r3
 40016e0:	da007804 	addi	r8,sp,480
 40016e4:	40d1883a 	add	r8,r8,r3
 40016e8:	b0bfffc4 	addi	r2,r22,-1
 40016ec:	da009615 	stw	r8,600(sp)
 40016f0:	da008e17 	ldw	r8,568(sp)
 40016f4:	1085883a 	add	r2,r2,r2
 40016f8:	1085883a 	add	r2,r2,r2
 40016fc:	19000104 	addi	r4,r3,4
 4001700:	d885883a 	add	r2,sp,r2
 4001704:	4421883a 	add	r16,r8,r16
 4001708:	da007804 	addi	r8,sp,480
 400170c:	4111883a 	add	r8,r8,r4
 4001710:	10807804 	addi	r2,r2,480
 4001714:	da009715 	stw	r8,604(sp)
 4001718:	b025883a 	mov	r18,r22
 400171c:	d8809815 	stw	r2,608(sp)
 4001720:	dd809415 	stw	r22,592(sp)
 4001724:	900490fa 	slli	r2,r18,3
 4001728:	d885883a 	add	r2,sp,r2
 400172c:	17000017 	ldw	fp,0(r2)
 4001730:	15400117 	ldw	r21,4(r2)
 4001734:	04802b0e 	bge	zero,r18,40017e4 <__kernel_rem_pio2+0x2a8>
 4001738:	00880034 	movhi	r2,8192
 400173c:	10bfffc4 	addi	r2,r2,-1
 4001740:	90a9883a 	add	r20,r18,r2
 4001744:	a02890fa 	slli	r20,r20,3
 4001748:	dc407804 	addi	r17,sp,480
 400174c:	dcfffe04 	addi	r19,sp,-8
 4001750:	dd29883a 	add	r20,sp,r20
 4001754:	000d883a 	mov	r6,zero
 4001758:	01cf9c34 	movhi	r7,15984
 400175c:	e009883a 	mov	r4,fp
 4001760:	a80b883a 	mov	r5,r21
 4001764:	40047cc0 	call	40047cc <__muldf3>
 4001768:	180b883a 	mov	r5,r3
 400176c:	1009883a 	mov	r4,r2
 4001770:	40057e00 	call	40057e0 <__fixdfsi>
 4001774:	1009883a 	mov	r4,r2
 4001778:	40058600 	call	4005860 <__floatsidf>
 400177c:	000d883a 	mov	r6,zero
 4001780:	01d05c34 	movhi	r7,16752
 4001784:	1009883a 	mov	r4,r2
 4001788:	180b883a 	mov	r5,r3
 400178c:	102f883a 	mov	r23,r2
 4001790:	182d883a 	mov	r22,r3
 4001794:	40047cc0 	call	40047cc <__muldf3>
 4001798:	100d883a 	mov	r6,r2
 400179c:	180f883a 	mov	r7,r3
 40017a0:	e009883a 	mov	r4,fp
 40017a4:	a80b883a 	mov	r5,r21
 40017a8:	4004ee40 	call	4004ee4 <__subdf3>
 40017ac:	180b883a 	mov	r5,r3
 40017b0:	1009883a 	mov	r4,r2
 40017b4:	40057e00 	call	40057e0 <__fixdfsi>
 40017b8:	a1800017 	ldw	r6,0(r20)
 40017bc:	a1c00117 	ldw	r7,4(r20)
 40017c0:	88800015 	stw	r2,0(r17)
 40017c4:	b809883a 	mov	r4,r23
 40017c8:	b00b883a 	mov	r5,r22
 40017cc:	40034d40 	call	40034d4 <__adddf3>
 40017d0:	a53ffe04 	addi	r20,r20,-8
 40017d4:	1039883a 	mov	fp,r2
 40017d8:	182b883a 	mov	r21,r3
 40017dc:	8c400104 	addi	r17,r17,4
 40017e0:	a4ffdc1e 	bne	r20,r19,4001754 <__ram_exceptions_end+0xfbfe150c>
 40017e4:	d9809017 	ldw	r6,576(sp)
 40017e8:	a80b883a 	mov	r5,r21
 40017ec:	e009883a 	mov	r4,fp
 40017f0:	40027980 	call	4002798 <scalbn>
 40017f4:	000d883a 	mov	r6,zero
 40017f8:	01cff034 	movhi	r7,16320
 40017fc:	1009883a 	mov	r4,r2
 4001800:	180b883a 	mov	r5,r3
 4001804:	1027883a 	mov	r19,r2
 4001808:	1823883a 	mov	r17,r3
 400180c:	40047cc0 	call	40047cc <__muldf3>
 4001810:	1009883a 	mov	r4,r2
 4001814:	180b883a 	mov	r5,r3
 4001818:	40025ac0 	call	40025ac <floor>
 400181c:	000d883a 	mov	r6,zero
 4001820:	01d00834 	movhi	r7,16416
 4001824:	1009883a 	mov	r4,r2
 4001828:	180b883a 	mov	r5,r3
 400182c:	40047cc0 	call	40047cc <__muldf3>
 4001830:	100d883a 	mov	r6,r2
 4001834:	180f883a 	mov	r7,r3
 4001838:	9809883a 	mov	r4,r19
 400183c:	880b883a 	mov	r5,r17
 4001840:	4004ee40 	call	4004ee4 <__subdf3>
 4001844:	180b883a 	mov	r5,r3
 4001848:	1009883a 	mov	r4,r2
 400184c:	1827883a 	mov	r19,r3
 4001850:	1029883a 	mov	r20,r2
 4001854:	40057e00 	call	40057e0 <__fixdfsi>
 4001858:	1009883a 	mov	r4,r2
 400185c:	1023883a 	mov	r17,r2
 4001860:	40058600 	call	4005860 <__floatsidf>
 4001864:	a009883a 	mov	r4,r20
 4001868:	100d883a 	mov	r6,r2
 400186c:	180f883a 	mov	r7,r3
 4001870:	980b883a 	mov	r5,r19
 4001874:	4004ee40 	call	4004ee4 <__subdf3>
 4001878:	d9009017 	ldw	r4,576(sp)
 400187c:	1013883a 	mov	r9,r2
 4001880:	102b883a 	mov	r21,r2
 4001884:	1811883a 	mov	r8,r3
 4001888:	0100b30e 	bge	zero,r4,4001b58 <__kernel_rem_pio2+0x61c>
 400188c:	90bfffc4 	addi	r2,r18,-1
 4001890:	1085883a 	add	r2,r2,r2
 4001894:	1085883a 	add	r2,r2,r2
 4001898:	d885883a 	add	r2,sp,r2
 400189c:	10807804 	addi	r2,r2,480
 40018a0:	d9809017 	ldw	r6,576(sp)
 40018a4:	11400017 	ldw	r5,0(r2)
 40018a8:	01000604 	movi	r4,24
 40018ac:	2189c83a 	sub	r4,r4,r6
 40018b0:	290dd83a 	sra	r6,r5,r4
 40018b4:	d9c09017 	ldw	r7,576(sp)
 40018b8:	04c005c4 	movi	r19,23
 40018bc:	3108983a 	sll	r4,r6,r4
 40018c0:	99e7c83a 	sub	r19,r19,r7
 40018c4:	89a3883a 	add	r17,r17,r6
 40018c8:	2909c83a 	sub	r4,r5,r4
 40018cc:	24e7d83a 	sra	r19,r4,r19
 40018d0:	11000015 	stw	r4,0(r2)
 40018d4:	04c02a0e 	bge	zero,r19,4001980 <__kernel_rem_pio2+0x444>
 40018d8:	8c400044 	addi	r17,r17,1
 40018dc:	0481570e 	bge	zero,r18,4001e3c <__kernel_rem_pio2+0x900>
 40018e0:	02804034 	movhi	r10,256
 40018e4:	52bfffc4 	addi	r10,r10,-1
 40018e8:	d8807804 	addi	r2,sp,480
 40018ec:	000b883a 	mov	r5,zero
 40018f0:	0029883a 	mov	r20,zero
 40018f4:	01c04034 	movhi	r7,256
 40018f8:	00000706 	br	4001918 <__kernel_rem_pio2+0x3dc>
 40018fc:	390dc83a 	sub	r6,r7,r4
 4001900:	20000226 	beq	r4,zero,400190c <__kernel_rem_pio2+0x3d0>
 4001904:	11800015 	stw	r6,0(r2)
 4001908:	05000044 	movi	r20,1
 400190c:	29400044 	addi	r5,r5,1
 4001910:	10800104 	addi	r2,r2,4
 4001914:	2c80080e 	bge	r5,r18,4001938 <__kernel_rem_pio2+0x3fc>
 4001918:	11000017 	ldw	r4,0(r2)
 400191c:	a03ff726 	beq	r20,zero,40018fc <__ram_exceptions_end+0xfbfe16b4>
 4001920:	5109c83a 	sub	r4,r10,r4
 4001924:	11000015 	stw	r4,0(r2)
 4001928:	29400044 	addi	r5,r5,1
 400192c:	05000044 	movi	r20,1
 4001930:	10800104 	addi	r2,r2,4
 4001934:	2cbff816 	blt	r5,r18,4001918 <__ram_exceptions_end+0xfbfe16d0>
 4001938:	d9009017 	ldw	r4,576(sp)
 400193c:	01000e0e 	bge	zero,r4,4001978 <__kernel_rem_pio2+0x43c>
 4001940:	00800044 	movi	r2,1
 4001944:	20808d26 	beq	r4,r2,4001b7c <__kernel_rem_pio2+0x640>
 4001948:	00800084 	movi	r2,2
 400194c:	20800a1e 	bne	r4,r2,4001978 <__kernel_rem_pio2+0x43c>
 4001950:	90bfffc4 	addi	r2,r18,-1
 4001954:	1085883a 	add	r2,r2,r2
 4001958:	1085883a 	add	r2,r2,r2
 400195c:	d885883a 	add	r2,sp,r2
 4001960:	10807804 	addi	r2,r2,480
 4001964:	11400017 	ldw	r5,0(r2)
 4001968:	01001034 	movhi	r4,64
 400196c:	213fffc4 	addi	r4,r4,-1
 4001970:	2908703a 	and	r4,r5,r4
 4001974:	11000015 	stw	r4,0(r2)
 4001978:	00800084 	movi	r2,2
 400197c:	98805d26 	beq	r19,r2,4001af4 <__kernel_rem_pio2+0x5b8>
 4001980:	400b883a 	mov	r5,r8
 4001984:	000d883a 	mov	r6,zero
 4001988:	000f883a 	mov	r7,zero
 400198c:	a809883a 	mov	r4,r21
 4001990:	da009b15 	stw	r8,620(sp)
 4001994:	40046680 	call	4004668 <__eqdf2>
 4001998:	da009b17 	ldw	r8,620(sp)
 400199c:	10012b1e 	bne	r2,zero,4001e4c <__kernel_rem_pio2+0x910>
 40019a0:	da009417 	ldw	r8,592(sp)
 40019a4:	917fffc4 	addi	r5,r18,-1
 40019a8:	2a000e16 	blt	r5,r8,40019e4 <__kernel_rem_pio2+0x4a8>
 40019ac:	00900034 	movhi	r2,16384
 40019b0:	10bfffc4 	addi	r2,r2,-1
 40019b4:	9085883a 	add	r2,r18,r2
 40019b8:	1085883a 	add	r2,r2,r2
 40019bc:	d9809717 	ldw	r6,604(sp)
 40019c0:	1085883a 	add	r2,r2,r2
 40019c4:	d9007804 	addi	r4,sp,480
 40019c8:	0007883a 	mov	r3,zero
 40019cc:	2085883a 	add	r2,r4,r2
 40019d0:	11000017 	ldw	r4,0(r2)
 40019d4:	10bfff04 	addi	r2,r2,-4
 40019d8:	1906b03a 	or	r3,r3,r4
 40019dc:	11bffc1e 	bne	r2,r6,40019d0 <__ram_exceptions_end+0xfbfe1788>
 40019e0:	1800821e 	bne	r3,zero,4001bec <__kernel_rem_pio2+0x6b0>
 40019e4:	da009817 	ldw	r8,608(sp)
 40019e8:	40800017 	ldw	r2,0(r8)
 40019ec:	1001151e 	bne	r2,zero,4001e44 <__kernel_rem_pio2+0x908>
 40019f0:	d8809617 	ldw	r2,600(sp)
 40019f4:	05000044 	movi	r20,1
 40019f8:	10bfff04 	addi	r2,r2,-4
 40019fc:	10c00117 	ldw	r3,4(r2)
 4001a00:	a5000044 	addi	r20,r20,1
 4001a04:	183ffc26 	beq	r3,zero,40019f8 <__ram_exceptions_end+0xfbfe17b0>
 4001a08:	9529883a 	add	r20,r18,r20
 4001a0c:	90800044 	addi	r2,r18,1
 4001a10:	dd009115 	stw	r20,580(sp)
 4001a14:	a0803216 	blt	r20,r2,4001ae0 <__kernel_rem_pio2+0x5a4>
 4001a18:	da009317 	ldw	r8,588(sp)
 4001a1c:	d8c09117 	ldw	r3,580(sp)
 4001a20:	44a3883a 	add	r17,r8,r18
 4001a24:	da009217 	ldw	r8,584(sp)
 4001a28:	882290fa 	slli	r17,r17,3
 4001a2c:	40a5883a 	add	r18,r8,r2
 4001a30:	da009517 	ldw	r8,596(sp)
 4001a34:	100490fa 	slli	r2,r2,3
 4001a38:	94a5883a 	add	r18,r18,r18
 4001a3c:	40eb883a 	add	r21,r8,r3
 4001a40:	da00a717 	ldw	r8,668(sp)
 4001a44:	ad6b883a 	add	r21,r21,r21
 4001a48:	94a5883a 	add	r18,r18,r18
 4001a4c:	ad6b883a 	add	r21,r21,r21
 4001a50:	d8c05004 	addi	r3,sp,320
 4001a54:	44a5883a 	add	r18,r8,r18
 4001a58:	1c63883a 	add	r17,r3,r17
 4001a5c:	d8a7883a 	add	r19,sp,r2
 4001a60:	456b883a 	add	r21,r8,r21
 4001a64:	91000017 	ldw	r4,0(r18)
 4001a68:	40058600 	call	4005860 <__floatsidf>
 4001a6c:	da008d17 	ldw	r8,564(sp)
 4001a70:	88800015 	stw	r2,0(r17)
 4001a74:	88c00115 	stw	r3,4(r17)
 4001a78:	40001b16 	blt	r8,zero,4001ae8 <__kernel_rem_pio2+0x5ac>
 4001a7c:	dd008e17 	ldw	r20,568(sp)
 4001a80:	882d883a 	mov	r22,r17
 4001a84:	002f883a 	mov	r23,zero
 4001a88:	0039883a 	mov	fp,zero
 4001a8c:	b1800017 	ldw	r6,0(r22)
 4001a90:	b1c00117 	ldw	r7,4(r22)
 4001a94:	a1000017 	ldw	r4,0(r20)
 4001a98:	a1400117 	ldw	r5,4(r20)
 4001a9c:	a5000204 	addi	r20,r20,8
 4001aa0:	b5bffe04 	addi	r22,r22,-8
 4001aa4:	40047cc0 	call	40047cc <__muldf3>
 4001aa8:	b809883a 	mov	r4,r23
 4001aac:	e00b883a 	mov	r5,fp
 4001ab0:	100d883a 	mov	r6,r2
 4001ab4:	180f883a 	mov	r7,r3
 4001ab8:	40034d40 	call	40034d4 <__adddf3>
 4001abc:	102f883a 	mov	r23,r2
 4001ac0:	1839883a 	mov	fp,r3
 4001ac4:	a43ff11e 	bne	r20,r16,4001a8c <__ram_exceptions_end+0xfbfe1844>
 4001ac8:	9dc00015 	stw	r23,0(r19)
 4001acc:	9f000115 	stw	fp,4(r19)
 4001ad0:	94800104 	addi	r18,r18,4
 4001ad4:	8c400204 	addi	r17,r17,8
 4001ad8:	9cc00204 	addi	r19,r19,8
 4001adc:	957fe11e 	bne	r18,r21,4001a64 <__ram_exceptions_end+0xfbfe181c>
 4001ae0:	dc809117 	ldw	r18,580(sp)
 4001ae4:	003f0f06 	br	4001724 <__ram_exceptions_end+0xfbfe14dc>
 4001ae8:	002f883a 	mov	r23,zero
 4001aec:	0039883a 	mov	fp,zero
 4001af0:	003ff506 	br	4001ac8 <__ram_exceptions_end+0xfbfe1880>
 4001af4:	480d883a 	mov	r6,r9
 4001af8:	180f883a 	mov	r7,r3
 4001afc:	0009883a 	mov	r4,zero
 4001b00:	014ffc34 	movhi	r5,16368
 4001b04:	4004ee40 	call	4004ee4 <__subdf3>
 4001b08:	102b883a 	mov	r21,r2
 4001b0c:	1811883a 	mov	r8,r3
 4001b10:	a03f9b26 	beq	r20,zero,4001980 <__ram_exceptions_end+0xfbfe1738>
 4001b14:	d9809017 	ldw	r6,576(sp)
 4001b18:	0009883a 	mov	r4,zero
 4001b1c:	014ffc34 	movhi	r5,16368
 4001b20:	d8c09b15 	stw	r3,620(sp)
 4001b24:	40027980 	call	4002798 <scalbn>
 4001b28:	da009b17 	ldw	r8,620(sp)
 4001b2c:	a809883a 	mov	r4,r21
 4001b30:	100d883a 	mov	r6,r2
 4001b34:	400b883a 	mov	r5,r8
 4001b38:	180f883a 	mov	r7,r3
 4001b3c:	4004ee40 	call	4004ee4 <__subdf3>
 4001b40:	102b883a 	mov	r21,r2
 4001b44:	1811883a 	mov	r8,r3
 4001b48:	003f8d06 	br	4001980 <__ram_exceptions_end+0xfbfe1738>
 4001b4c:	0005883a 	mov	r2,zero
 4001b50:	0007883a 	mov	r3,zero
 4001b54:	003eac06 	br	4001608 <__ram_exceptions_end+0xfbfe13c0>
 4001b58:	d8809017 	ldw	r2,576(sp)
 4001b5c:	1000121e 	bne	r2,zero,4001ba8 <__kernel_rem_pio2+0x66c>
 4001b60:	90bfffc4 	addi	r2,r18,-1
 4001b64:	1085883a 	add	r2,r2,r2
 4001b68:	1085883a 	add	r2,r2,r2
 4001b6c:	d885883a 	add	r2,sp,r2
 4001b70:	14c07817 	ldw	r19,480(r2)
 4001b74:	9827d5fa 	srai	r19,r19,23
 4001b78:	003f5606 	br	40018d4 <__ram_exceptions_end+0xfbfe168c>
 4001b7c:	90bfffc4 	addi	r2,r18,-1
 4001b80:	1085883a 	add	r2,r2,r2
 4001b84:	1085883a 	add	r2,r2,r2
 4001b88:	d885883a 	add	r2,sp,r2
 4001b8c:	10807804 	addi	r2,r2,480
 4001b90:	11000017 	ldw	r4,0(r2)
 4001b94:	01402034 	movhi	r5,128
 4001b98:	297fffc4 	addi	r5,r5,-1
 4001b9c:	2148703a 	and	r4,r4,r5
 4001ba0:	11000015 	stw	r4,0(r2)
 4001ba4:	003f7406 	br	4001978 <__ram_exceptions_end+0xfbfe1730>
 4001ba8:	4809883a 	mov	r4,r9
 4001bac:	180b883a 	mov	r5,r3
 4001bb0:	000d883a 	mov	r6,zero
 4001bb4:	01cff834 	movhi	r7,16352
 4001bb8:	d8c09a15 	stw	r3,616(sp)
 4001bbc:	d8c09b15 	stw	r3,620(sp)
 4001bc0:	da409915 	stw	r9,612(sp)
 4001bc4:	40046f00 	call	40046f0 <__gedf2>
 4001bc8:	d8c09a17 	ldw	r3,616(sp)
 4001bcc:	da009b17 	ldw	r8,620(sp)
 4001bd0:	da409917 	ldw	r9,612(sp)
 4001bd4:	1000920e 	bge	r2,zero,4001e20 <__kernel_rem_pio2+0x8e4>
 4001bd8:	0027883a 	mov	r19,zero
 4001bdc:	003f6806 	br	4001980 <__ram_exceptions_end+0xfbfe1738>
 4001be0:	002d883a 	mov	r22,zero
 4001be4:	002b883a 	mov	r21,zero
 4001be8:	003eb006 	br	40016ac <__ram_exceptions_end+0xfbfe1464>
 4001bec:	2945883a 	add	r2,r5,r5
 4001bf0:	da009017 	ldw	r8,576(sp)
 4001bf4:	1085883a 	add	r2,r2,r2
 4001bf8:	d885883a 	add	r2,sp,r2
 4001bfc:	10807817 	ldw	r2,480(r2)
 4001c00:	423ffa04 	addi	r8,r8,-24
 4001c04:	dc409115 	stw	r17,580(sp)
 4001c08:	dcc08d15 	stw	r19,564(sp)
 4001c0c:	da009015 	stw	r8,576(sp)
 4001c10:	dd809417 	ldw	r22,592(sp)
 4001c14:	2823883a 	mov	r17,r5
 4001c18:	10000e1e 	bne	r2,zero,4001c54 <__kernel_rem_pio2+0x718>
 4001c1c:	00900034 	movhi	r2,16384
 4001c20:	10bfffc4 	addi	r2,r2,-1
 4001c24:	2885883a 	add	r2,r5,r2
 4001c28:	1085883a 	add	r2,r2,r2
 4001c2c:	d8c07804 	addi	r3,sp,480
 4001c30:	1085883a 	add	r2,r2,r2
 4001c34:	1885883a 	add	r2,r3,r2
 4001c38:	4007883a 	mov	r3,r8
 4001c3c:	10bfff04 	addi	r2,r2,-4
 4001c40:	11000117 	ldw	r4,4(r2)
 4001c44:	8c7fffc4 	addi	r17,r17,-1
 4001c48:	18fffa04 	addi	r3,r3,-24
 4001c4c:	203ffb26 	beq	r4,zero,4001c3c <__ram_exceptions_end+0xfbfe19f4>
 4001c50:	d8c09015 	stw	r3,576(sp)
 4001c54:	d9809017 	ldw	r6,576(sp)
 4001c58:	0009883a 	mov	r4,zero
 4001c5c:	014ffc34 	movhi	r5,16368
 4001c60:	40027980 	call	4002798 <scalbn>
 4001c64:	1029883a 	mov	r20,r2
 4001c68:	182b883a 	mov	r21,r3
 4001c6c:	88018416 	blt	r17,zero,4002280 <__kernel_rem_pio2+0xd44>
 4001c70:	881090fa 	slli	r8,r17,3
 4001c74:	d8c07804 	addi	r3,sp,480
 4001c78:	da008e15 	stw	r8,568(sp)
 4001c7c:	d8808e17 	ldw	r2,568(sp)
 4001c80:	8c51883a 	add	r8,r17,r17
 4001c84:	4211883a 	add	r8,r8,r8
 4001c88:	d8a1883a 	add	r16,sp,r2
 4001c8c:	1a25883a 	add	r18,r3,r8
 4001c90:	da3ffe04 	addi	r8,sp,-8
 4001c94:	da008c15 	stw	r8,560(sp)
 4001c98:	8039883a 	mov	fp,r16
 4001c9c:	91000017 	ldw	r4,0(r18)
 4001ca0:	e73ffe04 	addi	fp,fp,-8
 4001ca4:	94bfff04 	addi	r18,r18,-4
 4001ca8:	40058600 	call	4005860 <__floatsidf>
 4001cac:	a00d883a 	mov	r6,r20
 4001cb0:	a80f883a 	mov	r7,r21
 4001cb4:	1009883a 	mov	r4,r2
 4001cb8:	180b883a 	mov	r5,r3
 4001cbc:	40047cc0 	call	40047cc <__muldf3>
 4001cc0:	a009883a 	mov	r4,r20
 4001cc4:	a80b883a 	mov	r5,r21
 4001cc8:	e0800215 	stw	r2,8(fp)
 4001ccc:	e0c00315 	stw	r3,12(fp)
 4001cd0:	000d883a 	mov	r6,zero
 4001cd4:	01cf9c34 	movhi	r7,15984
 4001cd8:	40047cc0 	call	40047cc <__muldf3>
 4001cdc:	da008c17 	ldw	r8,560(sp)
 4001ce0:	1029883a 	mov	r20,r2
 4001ce4:	182b883a 	mov	r21,r3
 4001ce8:	e23fec1e 	bne	fp,r8,4001c9c <__ram_exceptions_end+0xfbfe1a54>
 4001cec:	0029883a 	mov	r20,zero
 4001cf0:	b0004f16 	blt	r22,zero,4001e30 <__kernel_rem_pio2+0x8f4>
 4001cf4:	05410074 	movhi	r21,1025
 4001cf8:	014ffe74 	movhi	r5,16377
 4001cfc:	ad6fae04 	addi	r21,r21,-16712
 4001d00:	8027883a 	mov	r19,r16
 4001d04:	01100034 	movhi	r4,16384
 4001d08:	29487ec4 	addi	r5,r5,8699
 4001d0c:	0039883a 	mov	fp,zero
 4001d10:	002f883a 	mov	r23,zero
 4001d14:	0025883a 	mov	r18,zero
 4001d18:	00000506 	br	4001d30 <__kernel_rem_pio2+0x7f4>
 4001d1c:	9cc00204 	addi	r19,r19,8
 4001d20:	a4800f16 	blt	r20,r18,4001d60 <__kernel_rem_pio2+0x824>
 4001d24:	a9000017 	ldw	r4,0(r21)
 4001d28:	a9400117 	ldw	r5,4(r21)
 4001d2c:	ad400204 	addi	r21,r21,8
 4001d30:	99800017 	ldw	r6,0(r19)
 4001d34:	99c00117 	ldw	r7,4(r19)
 4001d38:	94800044 	addi	r18,r18,1
 4001d3c:	40047cc0 	call	40047cc <__muldf3>
 4001d40:	e009883a 	mov	r4,fp
 4001d44:	b80b883a 	mov	r5,r23
 4001d48:	100d883a 	mov	r6,r2
 4001d4c:	180f883a 	mov	r7,r3
 4001d50:	40034d40 	call	40034d4 <__adddf3>
 4001d54:	1039883a 	mov	fp,r2
 4001d58:	182f883a 	mov	r23,r3
 4001d5c:	b4bfef0e 	bge	r22,r18,4001d1c <__ram_exceptions_end+0xfbfe1ad4>
 4001d60:	a00490fa 	slli	r2,r20,3
 4001d64:	da008c17 	ldw	r8,560(sp)
 4001d68:	843ffe04 	addi	r16,r16,-8
 4001d6c:	d885883a 	add	r2,sp,r2
 4001d70:	10802804 	addi	r2,r2,160
 4001d74:	17000015 	stw	fp,0(r2)
 4001d78:	15c00115 	stw	r23,4(r2)
 4001d7c:	a5000044 	addi	r20,r20,1
 4001d80:	823fdb1e 	bne	r16,r8,4001cf0 <__ram_exceptions_end+0xfbfe1aa8>
 4001d84:	da00a617 	ldw	r8,664(sp)
 4001d88:	00800084 	movi	r2,2
 4001d8c:	12006616 	blt	r2,r8,4001f28 <__kernel_rem_pio2+0x9ec>
 4001d90:	0200de16 	blt	zero,r8,400210c <__kernel_rem_pio2+0xbd0>
 4001d94:	4000141e 	bne	r8,zero,4001de8 <__kernel_rem_pio2+0x8ac>
 4001d98:	da008e17 	ldw	r8,568(sp)
 4001d9c:	d8802804 	addi	r2,sp,160
 4001da0:	0007883a 	mov	r3,zero
 4001da4:	1225883a 	add	r18,r2,r8
 4001da8:	043fffc4 	movi	r16,-1
 4001dac:	0005883a 	mov	r2,zero
 4001db0:	91800017 	ldw	r6,0(r18)
 4001db4:	91c00117 	ldw	r7,4(r18)
 4001db8:	1009883a 	mov	r4,r2
 4001dbc:	180b883a 	mov	r5,r3
 4001dc0:	8c7fffc4 	addi	r17,r17,-1
 4001dc4:	40034d40 	call	40034d4 <__adddf3>
 4001dc8:	94bffe04 	addi	r18,r18,-8
 4001dcc:	8c3ff81e 	bne	r17,r16,4001db0 <__ram_exceptions_end+0xfbfe1b68>
 4001dd0:	da008d17 	ldw	r8,564(sp)
 4001dd4:	40000126 	beq	r8,zero,4001ddc <__kernel_rem_pio2+0x8a0>
 4001dd8:	18e0003c 	xorhi	r3,r3,32768
 4001ddc:	da008f17 	ldw	r8,572(sp)
 4001de0:	40800015 	stw	r2,0(r8)
 4001de4:	40c00115 	stw	r3,4(r8)
 4001de8:	da009117 	ldw	r8,580(sp)
 4001dec:	408001cc 	andi	r2,r8,7
 4001df0:	dfc0a517 	ldw	ra,660(sp)
 4001df4:	df00a417 	ldw	fp,656(sp)
 4001df8:	ddc0a317 	ldw	r23,652(sp)
 4001dfc:	dd80a217 	ldw	r22,648(sp)
 4001e00:	dd40a117 	ldw	r21,644(sp)
 4001e04:	dd00a017 	ldw	r20,640(sp)
 4001e08:	dcc09f17 	ldw	r19,636(sp)
 4001e0c:	dc809e17 	ldw	r18,632(sp)
 4001e10:	dc409d17 	ldw	r17,628(sp)
 4001e14:	dc009c17 	ldw	r16,624(sp)
 4001e18:	dec0a604 	addi	sp,sp,664
 4001e1c:	f800283a 	ret
 4001e20:	8c400044 	addi	r17,r17,1
 4001e24:	04810d0e 	bge	zero,r18,400225c <__kernel_rem_pio2+0xd20>
 4001e28:	04c00084 	movi	r19,2
 4001e2c:	003eac06 	br	40018e0 <__ram_exceptions_end+0xfbfe1698>
 4001e30:	0039883a 	mov	fp,zero
 4001e34:	002f883a 	mov	r23,zero
 4001e38:	003fc906 	br	4001d60 <__ram_exceptions_end+0xfbfe1b18>
 4001e3c:	0029883a 	mov	r20,zero
 4001e40:	003ebd06 	br	4001938 <__ram_exceptions_end+0xfbfe16f0>
 4001e44:	05000044 	movi	r20,1
 4001e48:	003eef06 	br	4001a08 <__ram_exceptions_end+0xfbfe17c0>
 4001e4c:	4029883a 	mov	r20,r8
 4001e50:	da009017 	ldw	r8,576(sp)
 4001e54:	a809883a 	mov	r4,r21
 4001e58:	a00b883a 	mov	r5,r20
 4001e5c:	020dc83a 	sub	r6,zero,r8
 4001e60:	dc409115 	stw	r17,580(sp)
 4001e64:	dd809417 	ldw	r22,592(sp)
 4001e68:	dcc08d15 	stw	r19,564(sp)
 4001e6c:	40027980 	call	4002798 <scalbn>
 4001e70:	000d883a 	mov	r6,zero
 4001e74:	01d05c34 	movhi	r7,16752
 4001e78:	1009883a 	mov	r4,r2
 4001e7c:	180b883a 	mov	r5,r3
 4001e80:	102b883a 	mov	r21,r2
 4001e84:	1823883a 	mov	r17,r3
 4001e88:	40046f00 	call	40046f0 <__gedf2>
 4001e8c:	1000e916 	blt	r2,zero,4002234 <__kernel_rem_pio2+0xcf8>
 4001e90:	000d883a 	mov	r6,zero
 4001e94:	01cf9c34 	movhi	r7,15984
 4001e98:	880b883a 	mov	r5,r17
 4001e9c:	a809883a 	mov	r4,r21
 4001ea0:	40047cc0 	call	40047cc <__muldf3>
 4001ea4:	180b883a 	mov	r5,r3
 4001ea8:	1009883a 	mov	r4,r2
 4001eac:	40057e00 	call	40057e0 <__fixdfsi>
 4001eb0:	1029883a 	mov	r20,r2
 4001eb4:	9485883a 	add	r2,r18,r18
 4001eb8:	1085883a 	add	r2,r2,r2
 4001ebc:	a009883a 	mov	r4,r20
 4001ec0:	d8a1883a 	add	r16,sp,r2
 4001ec4:	40058600 	call	4005860 <__floatsidf>
 4001ec8:	000d883a 	mov	r6,zero
 4001ecc:	01d05c34 	movhi	r7,16752
 4001ed0:	1009883a 	mov	r4,r2
 4001ed4:	180b883a 	mov	r5,r3
 4001ed8:	40047cc0 	call	40047cc <__muldf3>
 4001edc:	880b883a 	mov	r5,r17
 4001ee0:	100d883a 	mov	r6,r2
 4001ee4:	180f883a 	mov	r7,r3
 4001ee8:	a809883a 	mov	r4,r21
 4001eec:	4004ee40 	call	4004ee4 <__subdf3>
 4001ef0:	180b883a 	mov	r5,r3
 4001ef4:	1009883a 	mov	r4,r2
 4001ef8:	40057e00 	call	40057e0 <__fixdfsi>
 4001efc:	da009017 	ldw	r8,576(sp)
 4001f00:	94400044 	addi	r17,r18,1
 4001f04:	8c47883a 	add	r3,r17,r17
 4001f08:	84007804 	addi	r16,r16,480
 4001f0c:	18c7883a 	add	r3,r3,r3
 4001f10:	80800015 	stw	r2,0(r16)
 4001f14:	d8c7883a 	add	r3,sp,r3
 4001f18:	42000604 	addi	r8,r8,24
 4001f1c:	da009015 	stw	r8,576(sp)
 4001f20:	1d007815 	stw	r20,480(r3)
 4001f24:	003f4b06 	br	4001c54 <__ram_exceptions_end+0xfbfe1a0c>
 4001f28:	da00a617 	ldw	r8,664(sp)
 4001f2c:	008000c4 	movi	r2,3
 4001f30:	40bfad1e 	bne	r8,r2,4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 4001f34:	0440bc0e 	bge	zero,r17,4002228 <__kernel_rem_pio2+0xcec>
 4001f38:	da008e17 	ldw	r8,568(sp)
 4001f3c:	882090fa 	slli	r16,r17,3
 4001f40:	dd402804 	addi	r21,sp,160
 4001f44:	da05883a 	add	r2,sp,r8
 4001f48:	10802804 	addi	r2,r2,160
 4001f4c:	15c00017 	ldw	r23,0(r2)
 4001f50:	15800117 	ldw	r22,4(r2)
 4001f54:	8029883a 	mov	r20,r16
 4001f58:	843ffe04 	addi	r16,r16,-8
 4001f5c:	ac21883a 	add	r16,r21,r16
 4001f60:	ad29883a 	add	r20,r21,r20
 4001f64:	dac02604 	addi	r11,sp,152
 4001f68:	8811883a 	mov	r8,r17
 4001f6c:	84400017 	ldw	r17,0(r16)
 4001f70:	87000117 	ldw	fp,4(r16)
 4001f74:	b80d883a 	mov	r6,r23
 4001f78:	b00f883a 	mov	r7,r22
 4001f7c:	8809883a 	mov	r4,r17
 4001f80:	e00b883a 	mov	r5,fp
 4001f84:	da009b15 	stw	r8,620(sp)
 4001f88:	dac09915 	stw	r11,612(sp)
 4001f8c:	40034d40 	call	40034d4 <__adddf3>
 4001f90:	100d883a 	mov	r6,r2
 4001f94:	180f883a 	mov	r7,r3
 4001f98:	8809883a 	mov	r4,r17
 4001f9c:	e00b883a 	mov	r5,fp
 4001fa0:	1027883a 	mov	r19,r2
 4001fa4:	1825883a 	mov	r18,r3
 4001fa8:	4004ee40 	call	4004ee4 <__subdf3>
 4001fac:	b80d883a 	mov	r6,r23
 4001fb0:	b00f883a 	mov	r7,r22
 4001fb4:	1009883a 	mov	r4,r2
 4001fb8:	180b883a 	mov	r5,r3
 4001fbc:	40034d40 	call	40034d4 <__adddf3>
 4001fc0:	dac09917 	ldw	r11,612(sp)
 4001fc4:	a0800015 	stw	r2,0(r20)
 4001fc8:	a0c00115 	stw	r3,4(r20)
 4001fcc:	84c00015 	stw	r19,0(r16)
 4001fd0:	84800115 	stw	r18,4(r16)
 4001fd4:	843ffe04 	addi	r16,r16,-8
 4001fd8:	a53ffe04 	addi	r20,r20,-8
 4001fdc:	982f883a 	mov	r23,r19
 4001fe0:	902d883a 	mov	r22,r18
 4001fe4:	da009b17 	ldw	r8,620(sp)
 4001fe8:	5c3fe01e 	bne	r11,r16,4001f6c <__ram_exceptions_end+0xfbfe1d24>
 4001fec:	00800044 	movi	r2,1
 4001ff0:	12008d0e 	bge	r2,r8,4002228 <__kernel_rem_pio2+0xcec>
 4001ff4:	402090fa 	slli	r16,r8,3
 4001ff8:	da008e17 	ldw	r8,568(sp)
 4001ffc:	8023883a 	mov	r17,r16
 4002000:	da05883a 	add	r2,sp,r8
 4002004:	10802804 	addi	r2,r2,160
 4002008:	15800017 	ldw	r22,0(r2)
 400200c:	15000117 	ldw	r20,4(r2)
 4002010:	ac63883a 	add	r17,r21,r17
 4002014:	843ffe04 	addi	r16,r16,-8
 4002018:	ac21883a 	add	r16,r21,r16
 400201c:	8825883a 	mov	r18,r17
 4002020:	8811883a 	mov	r8,r17
 4002024:	84400017 	ldw	r17,0(r16)
 4002028:	87000117 	ldw	fp,4(r16)
 400202c:	b009883a 	mov	r4,r22
 4002030:	a00b883a 	mov	r5,r20
 4002034:	880d883a 	mov	r6,r17
 4002038:	e00f883a 	mov	r7,fp
 400203c:	da009b15 	stw	r8,620(sp)
 4002040:	40034d40 	call	40034d4 <__adddf3>
 4002044:	100d883a 	mov	r6,r2
 4002048:	180f883a 	mov	r7,r3
 400204c:	8809883a 	mov	r4,r17
 4002050:	e00b883a 	mov	r5,fp
 4002054:	102f883a 	mov	r23,r2
 4002058:	1827883a 	mov	r19,r3
 400205c:	4004ee40 	call	4004ee4 <__subdf3>
 4002060:	b00d883a 	mov	r6,r22
 4002064:	a00f883a 	mov	r7,r20
 4002068:	1009883a 	mov	r4,r2
 400206c:	180b883a 	mov	r5,r3
 4002070:	40034d40 	call	40034d4 <__adddf3>
 4002074:	90800015 	stw	r2,0(r18)
 4002078:	90c00115 	stw	r3,4(r18)
 400207c:	85c00015 	stw	r23,0(r16)
 4002080:	84c00115 	stw	r19,4(r16)
 4002084:	843ffe04 	addi	r16,r16,-8
 4002088:	94bffe04 	addi	r18,r18,-8
 400208c:	b82d883a 	mov	r22,r23
 4002090:	9829883a 	mov	r20,r19
 4002094:	da009b17 	ldw	r8,620(sp)
 4002098:	ac3fe21e 	bne	r21,r16,4002024 <__ram_exceptions_end+0xfbfe1ddc>
 400209c:	4023883a 	mov	r17,r8
 40020a0:	dc002a04 	addi	r16,sp,168
 40020a4:	0005883a 	mov	r2,zero
 40020a8:	0007883a 	mov	r3,zero
 40020ac:	89800017 	ldw	r6,0(r17)
 40020b0:	89c00117 	ldw	r7,4(r17)
 40020b4:	1009883a 	mov	r4,r2
 40020b8:	8c7ffe04 	addi	r17,r17,-8
 40020bc:	180b883a 	mov	r5,r3
 40020c0:	40034d40 	call	40034d4 <__adddf3>
 40020c4:	847ff91e 	bne	r16,r17,40020ac <__ram_exceptions_end+0xfbfe1e64>
 40020c8:	da008d17 	ldw	r8,564(sp)
 40020cc:	40004726 	beq	r8,zero,40021ec <__kernel_rem_pio2+0xcb0>
 40020d0:	d9002b17 	ldw	r4,172(sp)
 40020d4:	d9402917 	ldw	r5,164(sp)
 40020d8:	d9802a17 	ldw	r6,168(sp)
 40020dc:	da008f17 	ldw	r8,572(sp)
 40020e0:	d9c02817 	ldw	r7,160(sp)
 40020e4:	2960003c 	xorhi	r5,r5,32768
 40020e8:	2120003c 	xorhi	r4,r4,32768
 40020ec:	18e0003c 	xorhi	r3,r3,32768
 40020f0:	41c00015 	stw	r7,0(r8)
 40020f4:	41400115 	stw	r5,4(r8)
 40020f8:	41800215 	stw	r6,8(r8)
 40020fc:	41000315 	stw	r4,12(r8)
 4002100:	40800415 	stw	r2,16(r8)
 4002104:	40c00515 	stw	r3,20(r8)
 4002108:	003f3706 	br	4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 400210c:	da008e17 	ldw	r8,568(sp)
 4002110:	d8802804 	addi	r2,sp,160
 4002114:	dc002604 	addi	r16,sp,152
 4002118:	1225883a 	add	r18,r2,r8
 400211c:	0007883a 	mov	r3,zero
 4002120:	0005883a 	mov	r2,zero
 4002124:	91800017 	ldw	r6,0(r18)
 4002128:	91c00117 	ldw	r7,4(r18)
 400212c:	1009883a 	mov	r4,r2
 4002130:	94bffe04 	addi	r18,r18,-8
 4002134:	180b883a 	mov	r5,r3
 4002138:	40034d40 	call	40034d4 <__adddf3>
 400213c:	943ff91e 	bne	r18,r16,4002124 <__ram_exceptions_end+0xfbfe1edc>
 4002140:	da008d17 	ldw	r8,564(sp)
 4002144:	d9002817 	ldw	r4,160(sp)
 4002148:	d9402917 	ldw	r5,164(sp)
 400214c:	40001a26 	beq	r8,zero,40021b8 <__kernel_rem_pio2+0xc7c>
 4002150:	da008f17 	ldw	r8,572(sp)
 4002154:	19a0003c 	xorhi	r6,r3,32768
 4002158:	180f883a 	mov	r7,r3
 400215c:	41800115 	stw	r6,4(r8)
 4002160:	40800015 	stw	r2,0(r8)
 4002164:	100d883a 	mov	r6,r2
 4002168:	4004ee40 	call	4004ee4 <__subdf3>
 400216c:	04400c0e 	bge	zero,r17,40021a0 <__kernel_rem_pio2+0xc64>
 4002170:	dc002a04 	addi	r16,sp,168
 4002174:	04800044 	movi	r18,1
 4002178:	81800017 	ldw	r6,0(r16)
 400217c:	81c00117 	ldw	r7,4(r16)
 4002180:	1009883a 	mov	r4,r2
 4002184:	180b883a 	mov	r5,r3
 4002188:	94800044 	addi	r18,r18,1
 400218c:	40034d40 	call	40034d4 <__adddf3>
 4002190:	84000204 	addi	r16,r16,8
 4002194:	8cbff80e 	bge	r17,r18,4002178 <__ram_exceptions_end+0xfbfe1f30>
 4002198:	da008d17 	ldw	r8,564(sp)
 400219c:	40004226 	beq	r8,zero,40022a8 <__kernel_rem_pio2+0xd6c>
 40021a0:	da008f17 	ldw	r8,572(sp)
 40021a4:	1009883a 	mov	r4,r2
 40021a8:	18a0003c 	xorhi	r2,r3,32768
 40021ac:	41000215 	stw	r4,8(r8)
 40021b0:	40800315 	stw	r2,12(r8)
 40021b4:	003f0c06 	br	4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 40021b8:	da008f17 	ldw	r8,572(sp)
 40021bc:	100d883a 	mov	r6,r2
 40021c0:	180f883a 	mov	r7,r3
 40021c4:	40800015 	stw	r2,0(r8)
 40021c8:	40c00115 	stw	r3,4(r8)
 40021cc:	4004ee40 	call	4004ee4 <__subdf3>
 40021d0:	047fe716 	blt	zero,r17,4002170 <__ram_exceptions_end+0xfbfe1f28>
 40021d4:	da008f17 	ldw	r8,572(sp)
 40021d8:	1009883a 	mov	r4,r2
 40021dc:	1805883a 	mov	r2,r3
 40021e0:	41000215 	stw	r4,8(r8)
 40021e4:	40800315 	stw	r2,12(r8)
 40021e8:	003eff06 	br	4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 40021ec:	da008f17 	ldw	r8,572(sp)
 40021f0:	d9802817 	ldw	r6,160(sp)
 40021f4:	d9402a17 	ldw	r5,168(sp)
 40021f8:	d9002b17 	ldw	r4,172(sp)
 40021fc:	41800015 	stw	r6,0(r8)
 4002200:	d9802917 	ldw	r6,164(sp)
 4002204:	41400215 	stw	r5,8(r8)
 4002208:	41000315 	stw	r4,12(r8)
 400220c:	41800115 	stw	r6,4(r8)
 4002210:	40800415 	stw	r2,16(r8)
 4002214:	40c00515 	stw	r3,20(r8)
 4002218:	003ef306 	br	4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 400221c:	da00a617 	ldw	r8,664(sp)
 4002220:	008000c4 	movi	r2,3
 4002224:	40bef01e 	bne	r8,r2,4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 4002228:	0005883a 	mov	r2,zero
 400222c:	0007883a 	mov	r3,zero
 4002230:	003fa506 	br	40020c8 <__ram_exceptions_end+0xfbfe1e80>
 4002234:	9485883a 	add	r2,r18,r18
 4002238:	1085883a 	add	r2,r2,r2
 400223c:	d8a1883a 	add	r16,sp,r2
 4002240:	880b883a 	mov	r5,r17
 4002244:	a809883a 	mov	r4,r21
 4002248:	84007804 	addi	r16,r16,480
 400224c:	40057e00 	call	40057e0 <__fixdfsi>
 4002250:	80800015 	stw	r2,0(r16)
 4002254:	9023883a 	mov	r17,r18
 4002258:	003e7e06 	br	4001c54 <__ram_exceptions_end+0xfbfe1a0c>
 400225c:	a80d883a 	mov	r6,r21
 4002260:	400f883a 	mov	r7,r8
 4002264:	0009883a 	mov	r4,zero
 4002268:	014ffc34 	movhi	r5,16368
 400226c:	4004ee40 	call	4004ee4 <__subdf3>
 4002270:	102b883a 	mov	r21,r2
 4002274:	1811883a 	mov	r8,r3
 4002278:	04c00084 	movi	r19,2
 400227c:	003dc006 	br	4001980 <__ram_exceptions_end+0xfbfe1738>
 4002280:	da00a617 	ldw	r8,664(sp)
 4002284:	00800084 	movi	r2,2
 4002288:	123fe416 	blt	r2,r8,400221c <__ram_exceptions_end+0xfbfe1fd4>
 400228c:	02000c16 	blt	zero,r8,40022c0 <__kernel_rem_pio2+0xd84>
 4002290:	403ed51e 	bne	r8,zero,4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 4002294:	0005883a 	mov	r2,zero
 4002298:	0007883a 	mov	r3,zero
 400229c:	003ecc06 	br	4001dd0 <__ram_exceptions_end+0xfbfe1b88>
 40022a0:	d8009215 	stw	zero,584(sp)
 40022a4:	003cc306 	br	40015b4 <__ram_exceptions_end+0xfbfe136c>
 40022a8:	da008f17 	ldw	r8,572(sp)
 40022ac:	1009883a 	mov	r4,r2
 40022b0:	1805883a 	mov	r2,r3
 40022b4:	41000215 	stw	r4,8(r8)
 40022b8:	40800315 	stw	r2,12(r8)
 40022bc:	003eca06 	br	4001de8 <__ram_exceptions_end+0xfbfe1ba0>
 40022c0:	0005883a 	mov	r2,zero
 40022c4:	0007883a 	mov	r3,zero
 40022c8:	003f9d06 	br	4002140 <__ram_exceptions_end+0xfbfe1ef8>

040022cc <__kernel_sin>:
 40022cc:	00a00034 	movhi	r2,32768
 40022d0:	defff404 	addi	sp,sp,-48
 40022d4:	10bfffc4 	addi	r2,r2,-1
 40022d8:	00cf9034 	movhi	r3,15936
 40022dc:	ddc00915 	stw	r23,36(sp)
 40022e0:	dd800815 	stw	r22,32(sp)
 40022e4:	dc400315 	stw	r17,12(sp)
 40022e8:	dc000215 	stw	r16,8(sp)
 40022ec:	dfc00b15 	stw	ra,44(sp)
 40022f0:	df000a15 	stw	fp,40(sp)
 40022f4:	dd400715 	stw	r21,28(sp)
 40022f8:	dd000615 	stw	r20,24(sp)
 40022fc:	dcc00515 	stw	r19,20(sp)
 4002300:	dc800415 	stw	r18,16(sp)
 4002304:	2884703a 	and	r2,r5,r2
 4002308:	18ffffc4 	addi	r3,r3,-1
 400230c:	2821883a 	mov	r16,r5
 4002310:	2023883a 	mov	r17,r4
 4002314:	302f883a 	mov	r23,r6
 4002318:	382d883a 	mov	r22,r7
 400231c:	18800216 	blt	r3,r2,4002328 <__kernel_sin+0x5c>
 4002320:	40057e00 	call	40057e0 <__fixdfsi>
 4002324:	10009926 	beq	r2,zero,400258c <__kernel_sin+0x2c0>
 4002328:	880d883a 	mov	r6,r17
 400232c:	800f883a 	mov	r7,r16
 4002330:	8809883a 	mov	r4,r17
 4002334:	800b883a 	mov	r5,r16
 4002338:	40047cc0 	call	40047cc <__muldf3>
 400233c:	100d883a 	mov	r6,r2
 4002340:	180f883a 	mov	r7,r3
 4002344:	8809883a 	mov	r4,r17
 4002348:	800b883a 	mov	r5,r16
 400234c:	1027883a 	mov	r19,r2
 4002350:	1825883a 	mov	r18,r3
 4002354:	40047cc0 	call	40047cc <__muldf3>
 4002358:	0196b434 	movhi	r6,23248
 400235c:	01cf79b4 	movhi	r7,15846
 4002360:	31b55f04 	addi	r6,r6,-10884
 4002364:	39f64e84 	addi	r7,r7,-9926
 4002368:	9809883a 	mov	r4,r19
 400236c:	900b883a 	mov	r5,r18
 4002370:	102b883a 	mov	r21,r2
 4002374:	1829883a 	mov	r20,r3
 4002378:	40047cc0 	call	40047cc <__muldf3>
 400237c:	01a28b34 	movhi	r6,35372
 4002380:	01cf96f4 	movhi	r7,15963
 4002384:	31a73ac4 	addi	r6,r6,-25365
 4002388:	39f97984 	addi	r7,r7,-6682
 400238c:	1009883a 	mov	r4,r2
 4002390:	180b883a 	mov	r5,r3
 4002394:	4004ee40 	call	4004ee4 <__subdf3>
 4002398:	980d883a 	mov	r6,r19
 400239c:	900f883a 	mov	r7,r18
 40023a0:	1009883a 	mov	r4,r2
 40023a4:	180b883a 	mov	r5,r3
 40023a8:	40047cc0 	call	40047cc <__muldf3>
 40023ac:	0195ecb4 	movhi	r6,22450
 40023b0:	01cfb1f4 	movhi	r7,16071
 40023b4:	31bf9f44 	addi	r6,r6,-387
 40023b8:	39c778c4 	addi	r7,r7,7651
 40023bc:	1009883a 	mov	r4,r2
 40023c0:	180b883a 	mov	r5,r3
 40023c4:	40034d40 	call	40034d4 <__adddf3>
 40023c8:	980d883a 	mov	r6,r19
 40023cc:	900f883a 	mov	r7,r18
 40023d0:	1009883a 	mov	r4,r2
 40023d4:	180b883a 	mov	r5,r3
 40023d8:	40047cc0 	call	40047cc <__muldf3>
 40023dc:	01867074 	movhi	r6,6593
 40023e0:	01cfcab4 	movhi	r7,16170
 40023e4:	31987544 	addi	r6,r6,25045
 40023e8:	39c06804 	addi	r7,r7,416
 40023ec:	1009883a 	mov	r4,r2
 40023f0:	180b883a 	mov	r5,r3
 40023f4:	4004ee40 	call	4004ee4 <__subdf3>
 40023f8:	980d883a 	mov	r6,r19
 40023fc:	900f883a 	mov	r7,r18
 4002400:	1009883a 	mov	r4,r2
 4002404:	180b883a 	mov	r5,r3
 4002408:	40047cc0 	call	40047cc <__muldf3>
 400240c:	01844474 	movhi	r6,4369
 4002410:	01cfe074 	movhi	r7,16257
 4002414:	31be2984 	addi	r6,r6,-1882
 4002418:	39c44444 	addi	r7,r7,4369
 400241c:	1009883a 	mov	r4,r2
 4002420:	180b883a 	mov	r5,r3
 4002424:	40034d40 	call	40034d4 <__adddf3>
 4002428:	1011883a 	mov	r8,r2
 400242c:	d8800c17 	ldw	r2,48(sp)
 4002430:	1839883a 	mov	fp,r3
 4002434:	10003e26 	beq	r2,zero,4002530 <__kernel_sin+0x264>
 4002438:	000d883a 	mov	r6,zero
 400243c:	01cff834 	movhi	r7,16352
 4002440:	b809883a 	mov	r4,r23
 4002444:	b00b883a 	mov	r5,r22
 4002448:	da000015 	stw	r8,0(sp)
 400244c:	40047cc0 	call	40047cc <__muldf3>
 4002450:	da000017 	ldw	r8,0(sp)
 4002454:	e00f883a 	mov	r7,fp
 4002458:	a809883a 	mov	r4,r21
 400245c:	400d883a 	mov	r6,r8
 4002460:	a00b883a 	mov	r5,r20
 4002464:	d8c00115 	stw	r3,4(sp)
 4002468:	d8800015 	stw	r2,0(sp)
 400246c:	40047cc0 	call	40047cc <__muldf3>
 4002470:	da800017 	ldw	r10,0(sp)
 4002474:	da400117 	ldw	r9,4(sp)
 4002478:	100d883a 	mov	r6,r2
 400247c:	5009883a 	mov	r4,r10
 4002480:	480b883a 	mov	r5,r9
 4002484:	180f883a 	mov	r7,r3
 4002488:	4004ee40 	call	4004ee4 <__subdf3>
 400248c:	980d883a 	mov	r6,r19
 4002490:	900f883a 	mov	r7,r18
 4002494:	1009883a 	mov	r4,r2
 4002498:	180b883a 	mov	r5,r3
 400249c:	40047cc0 	call	40047cc <__muldf3>
 40024a0:	b80d883a 	mov	r6,r23
 40024a4:	b00f883a 	mov	r7,r22
 40024a8:	1009883a 	mov	r4,r2
 40024ac:	180b883a 	mov	r5,r3
 40024b0:	4004ee40 	call	4004ee4 <__subdf3>
 40024b4:	01955574 	movhi	r6,21845
 40024b8:	01cff174 	movhi	r7,16325
 40024bc:	31955244 	addi	r6,r6,21833
 40024c0:	39d55544 	addi	r7,r7,21845
 40024c4:	a809883a 	mov	r4,r21
 40024c8:	a00b883a 	mov	r5,r20
 40024cc:	1027883a 	mov	r19,r2
 40024d0:	1825883a 	mov	r18,r3
 40024d4:	40047cc0 	call	40047cc <__muldf3>
 40024d8:	100d883a 	mov	r6,r2
 40024dc:	180f883a 	mov	r7,r3
 40024e0:	9809883a 	mov	r4,r19
 40024e4:	900b883a 	mov	r5,r18
 40024e8:	40034d40 	call	40034d4 <__adddf3>
 40024ec:	100d883a 	mov	r6,r2
 40024f0:	180f883a 	mov	r7,r3
 40024f4:	8809883a 	mov	r4,r17
 40024f8:	800b883a 	mov	r5,r16
 40024fc:	4004ee40 	call	4004ee4 <__subdf3>
 4002500:	dfc00b17 	ldw	ra,44(sp)
 4002504:	df000a17 	ldw	fp,40(sp)
 4002508:	ddc00917 	ldw	r23,36(sp)
 400250c:	dd800817 	ldw	r22,32(sp)
 4002510:	dd400717 	ldw	r21,28(sp)
 4002514:	dd000617 	ldw	r20,24(sp)
 4002518:	dcc00517 	ldw	r19,20(sp)
 400251c:	dc800417 	ldw	r18,16(sp)
 4002520:	dc400317 	ldw	r17,12(sp)
 4002524:	dc000217 	ldw	r16,8(sp)
 4002528:	dec00c04 	addi	sp,sp,48
 400252c:	f800283a 	ret
 4002530:	400d883a 	mov	r6,r8
 4002534:	9809883a 	mov	r4,r19
 4002538:	900b883a 	mov	r5,r18
 400253c:	180f883a 	mov	r7,r3
 4002540:	40047cc0 	call	40047cc <__muldf3>
 4002544:	01955574 	movhi	r6,21845
 4002548:	01cff174 	movhi	r7,16325
 400254c:	31955244 	addi	r6,r6,21833
 4002550:	39d55544 	addi	r7,r7,21845
 4002554:	1009883a 	mov	r4,r2
 4002558:	180b883a 	mov	r5,r3
 400255c:	4004ee40 	call	4004ee4 <__subdf3>
 4002560:	a80d883a 	mov	r6,r21
 4002564:	a00f883a 	mov	r7,r20
 4002568:	1009883a 	mov	r4,r2
 400256c:	180b883a 	mov	r5,r3
 4002570:	40047cc0 	call	40047cc <__muldf3>
 4002574:	880d883a 	mov	r6,r17
 4002578:	800f883a 	mov	r7,r16
 400257c:	1009883a 	mov	r4,r2
 4002580:	180b883a 	mov	r5,r3
 4002584:	40034d40 	call	40034d4 <__adddf3>
 4002588:	003fdd06 	br	4002500 <__ram_exceptions_end+0xfbfe22b8>
 400258c:	8805883a 	mov	r2,r17
 4002590:	8007883a 	mov	r3,r16
 4002594:	003fda06 	br	4002500 <__ram_exceptions_end+0xfbfe22b8>

04002598 <fabs>:
 4002598:	00e00034 	movhi	r3,32768
 400259c:	18ffffc4 	addi	r3,r3,-1
 40025a0:	2005883a 	mov	r2,r4
 40025a4:	28c6703a 	and	r3,r5,r3
 40025a8:	f800283a 	ret

040025ac <floor>:
 40025ac:	2811d53a 	srai	r8,r5,20
 40025b0:	defffa04 	addi	sp,sp,-24
 40025b4:	dcc00315 	stw	r19,12(sp)
 40025b8:	4201ffcc 	andi	r8,r8,2047
 40025bc:	dc800215 	stw	r18,8(sp)
 40025c0:	dc400115 	stw	r17,4(sp)
 40025c4:	dc000015 	stw	r16,0(sp)
 40025c8:	dfc00515 	stw	ra,20(sp)
 40025cc:	dd000415 	stw	r20,16(sp)
 40025d0:	44bf0044 	addi	r18,r8,-1023
 40025d4:	018004c4 	movi	r6,19
 40025d8:	2821883a 	mov	r16,r5
 40025dc:	2005883a 	mov	r2,r4
 40025e0:	280f883a 	mov	r7,r5
 40025e4:	2827883a 	mov	r19,r5
 40025e8:	2023883a 	mov	r17,r4
 40025ec:	34801916 	blt	r6,r18,4002654 <floor+0xa8>
 40025f0:	90003c16 	blt	r18,zero,40026e4 <floor+0x138>
 40025f4:	05000434 	movhi	r20,16
 40025f8:	a53fffc4 	addi	r20,r20,-1
 40025fc:	a4a9d83a 	sra	r20,r20,r18
 4002600:	2d0c703a 	and	r6,r5,r20
 4002604:	310cb03a 	or	r6,r6,r4
 4002608:	30001626 	beq	r6,zero,4002664 <floor+0xb8>
 400260c:	01a20034 	movhi	r6,34816
 4002610:	01df8e34 	movhi	r7,32312
 4002614:	319d6704 	addi	r6,r6,30108
 4002618:	39f90f04 	addi	r7,r7,-7108
 400261c:	40034d40 	call	40034d4 <__adddf3>
 4002620:	000d883a 	mov	r6,zero
 4002624:	000f883a 	mov	r7,zero
 4002628:	1009883a 	mov	r4,r2
 400262c:	180b883a 	mov	r5,r3
 4002630:	40046f00 	call	40046f0 <__gedf2>
 4002634:	0080040e 	bge	zero,r2,4002648 <floor+0x9c>
 4002638:	80003c16 	blt	r16,zero,400272c <floor+0x180>
 400263c:	0520303a 	nor	r16,zero,r20
 4002640:	84e0703a 	and	r16,r16,r19
 4002644:	0023883a 	mov	r17,zero
 4002648:	8805883a 	mov	r2,r17
 400264c:	8007883a 	mov	r3,r16
 4002650:	00000506 	br	4002668 <floor+0xbc>
 4002654:	01800cc4 	movi	r6,51
 4002658:	34800b0e 	bge	r6,r18,4002688 <floor+0xdc>
 400265c:	01810004 	movi	r6,1024
 4002660:	91802f26 	beq	r18,r6,4002720 <floor+0x174>
 4002664:	3807883a 	mov	r3,r7
 4002668:	dfc00517 	ldw	ra,20(sp)
 400266c:	dd000417 	ldw	r20,16(sp)
 4002670:	dcc00317 	ldw	r19,12(sp)
 4002674:	dc800217 	ldw	r18,8(sp)
 4002678:	dc400117 	ldw	r17,4(sp)
 400267c:	dc000017 	ldw	r16,0(sp)
 4002680:	dec00604 	addi	sp,sp,24
 4002684:	f800283a 	ret
 4002688:	423efb44 	addi	r8,r8,-1043
 400268c:	053fffc4 	movi	r20,-1
 4002690:	a228d83a 	srl	r20,r20,r8
 4002694:	250c703a 	and	r6,r4,r20
 4002698:	303ff226 	beq	r6,zero,4002664 <__ram_exceptions_end+0xfbfe241c>
 400269c:	01a20034 	movhi	r6,34816
 40026a0:	01df8e34 	movhi	r7,32312
 40026a4:	319d6704 	addi	r6,r6,30108
 40026a8:	39f90f04 	addi	r7,r7,-7108
 40026ac:	40034d40 	call	40034d4 <__adddf3>
 40026b0:	000d883a 	mov	r6,zero
 40026b4:	000f883a 	mov	r7,zero
 40026b8:	1009883a 	mov	r4,r2
 40026bc:	180b883a 	mov	r5,r3
 40026c0:	40046f00 	call	40046f0 <__gedf2>
 40026c4:	00bfe00e 	bge	zero,r2,4002648 <__ram_exceptions_end+0xfbfe2400>
 40026c8:	80001c16 	blt	r16,zero,400273c <floor+0x190>
 40026cc:	0510303a 	nor	r8,zero,r20
 40026d0:	9821883a 	mov	r16,r19
 40026d4:	8a22703a 	and	r17,r17,r8
 40026d8:	8805883a 	mov	r2,r17
 40026dc:	8007883a 	mov	r3,r16
 40026e0:	003fe106 	br	4002668 <__ram_exceptions_end+0xfbfe2420>
 40026e4:	01a20034 	movhi	r6,34816
 40026e8:	01df8e34 	movhi	r7,32312
 40026ec:	319d6704 	addi	r6,r6,30108
 40026f0:	39f90f04 	addi	r7,r7,-7108
 40026f4:	40034d40 	call	40034d4 <__adddf3>
 40026f8:	000d883a 	mov	r6,zero
 40026fc:	000f883a 	mov	r7,zero
 4002700:	1009883a 	mov	r4,r2
 4002704:	180b883a 	mov	r5,r3
 4002708:	40046f00 	call	40046f0 <__gedf2>
 400270c:	00bfce0e 	bge	zero,r2,4002648 <__ram_exceptions_end+0xfbfe2400>
 4002710:	80001516 	blt	r16,zero,4002768 <floor+0x1bc>
 4002714:	0023883a 	mov	r17,zero
 4002718:	0021883a 	mov	r16,zero
 400271c:	003fca06 	br	4002648 <__ram_exceptions_end+0xfbfe2400>
 4002720:	200d883a 	mov	r6,r4
 4002724:	40034d40 	call	40034d4 <__adddf3>
 4002728:	003fcf06 	br	4002668 <__ram_exceptions_end+0xfbfe2420>
 400272c:	00800434 	movhi	r2,16
 4002730:	14a5d83a 	sra	r18,r2,r18
 4002734:	84a7883a 	add	r19,r16,r18
 4002738:	003fc006 	br	400263c <__ram_exceptions_end+0xfbfe23f4>
 400273c:	00800504 	movi	r2,20
 4002740:	90801326 	beq	r18,r2,4002790 <floor+0x1e4>
 4002744:	00800d04 	movi	r2,52
 4002748:	14a5c83a 	sub	r18,r2,r18
 400274c:	00800044 	movi	r2,1
 4002750:	1484983a 	sll	r2,r2,r18
 4002754:	1445883a 	add	r2,r2,r17
 4002758:	14400b2e 	bgeu	r2,r17,4002788 <floor+0x1dc>
 400275c:	84c00044 	addi	r19,r16,1
 4002760:	1023883a 	mov	r17,r2
 4002764:	003fd906 	br	40026cc <__ram_exceptions_end+0xfbfe2484>
 4002768:	00a00034 	movhi	r2,32768
 400276c:	10bfffc4 	addi	r2,r2,-1
 4002770:	8084703a 	and	r2,r16,r2
 4002774:	1462b03a 	or	r17,r2,r17
 4002778:	883fb326 	beq	r17,zero,4002648 <__ram_exceptions_end+0xfbfe2400>
 400277c:	0023883a 	mov	r17,zero
 4002780:	042ffc34 	movhi	r16,49136
 4002784:	003fb006 	br	4002648 <__ram_exceptions_end+0xfbfe2400>
 4002788:	1023883a 	mov	r17,r2
 400278c:	003fcf06 	br	40026cc <__ram_exceptions_end+0xfbfe2484>
 4002790:	84c00044 	addi	r19,r16,1
 4002794:	003fcd06 	br	40026cc <__ram_exceptions_end+0xfbfe2484>

04002798 <scalbn>:
 4002798:	2a1ffc2c 	andhi	r8,r5,32752
 400279c:	4011d53a 	srai	r8,r8,20
 40027a0:	defffe04 	addi	sp,sp,-8
 40027a4:	dc000015 	stw	r16,0(sp)
 40027a8:	dfc00115 	stw	ra,4(sp)
 40027ac:	280f883a 	mov	r7,r5
 40027b0:	2015883a 	mov	r10,r4
 40027b4:	3021883a 	mov	r16,r6
 40027b8:	40001e1e 	bne	r8,zero,4002834 <scalbn+0x9c>
 40027bc:	00a00034 	movhi	r2,32768
 40027c0:	10bfffc4 	addi	r2,r2,-1
 40027c4:	2884703a 	and	r2,r5,r2
 40027c8:	1104b03a 	or	r2,r2,r4
 40027cc:	10002226 	beq	r2,zero,4002858 <scalbn+0xc0>
 40027d0:	01d0d434 	movhi	r7,17232
 40027d4:	000d883a 	mov	r6,zero
 40027d8:	40047cc0 	call	40047cc <__muldf3>
 40027dc:	013ffff4 	movhi	r4,65535
 40027e0:	210f2c04 	addi	r4,r4,15536
 40027e4:	1015883a 	mov	r10,r2
 40027e8:	180f883a 	mov	r7,r3
 40027ec:	81002a16 	blt	r16,r4,4002898 <scalbn+0x100>
 40027f0:	191ffc2c 	andhi	r4,r3,32752
 40027f4:	2009d53a 	srai	r4,r4,20
 40027f8:	223ff284 	addi	r8,r4,-54
 40027fc:	8211883a 	add	r8,r16,r8
 4002800:	0081ff84 	movi	r2,2046
 4002804:	12002f16 	blt	r2,r8,40028c4 <scalbn+0x12c>
 4002808:	0200190e 	bge	zero,r8,4002870 <scalbn+0xd8>
 400280c:	4010953a 	slli	r8,r8,20
 4002810:	01600434 	movhi	r5,32784
 4002814:	297fffc4 	addi	r5,r5,-1
 4002818:	194e703a 	and	r7,r3,r5
 400281c:	5005883a 	mov	r2,r10
 4002820:	3a06b03a 	or	r3,r7,r8
 4002824:	dfc00117 	ldw	ra,4(sp)
 4002828:	dc000017 	ldw	r16,0(sp)
 400282c:	dec00204 	addi	sp,sp,8
 4002830:	f800283a 	ret
 4002834:	0081ffc4 	movi	r2,2047
 4002838:	2807883a 	mov	r3,r5
 400283c:	40bfef1e 	bne	r8,r2,40027fc <__ram_exceptions_end+0xfbfe25b4>
 4002840:	200d883a 	mov	r6,r4
 4002844:	40034d40 	call	40034d4 <__adddf3>
 4002848:	dfc00117 	ldw	ra,4(sp)
 400284c:	dc000017 	ldw	r16,0(sp)
 4002850:	dec00204 	addi	sp,sp,8
 4002854:	f800283a 	ret
 4002858:	2005883a 	mov	r2,r4
 400285c:	2807883a 	mov	r3,r5
 4002860:	dfc00117 	ldw	ra,4(sp)
 4002864:	dc000017 	ldw	r16,0(sp)
 4002868:	dec00204 	addi	sp,sp,8
 400286c:	f800283a 	ret
 4002870:	00bff2c4 	movi	r2,-53
 4002874:	4080240e 	bge	r8,r2,4002908 <scalbn+0x170>
 4002878:	00b0d414 	movui	r2,50000
 400287c:	14001116 	blt	r2,r16,40028c4 <scalbn+0x12c>
 4002880:	0130be74 	movhi	r4,49913
 4002884:	01406974 	movhi	r5,421
 4002888:	213cd644 	addi	r4,r4,-3239
 400288c:	295b87c4 	addi	r5,r5,28191
 4002890:	500d883a 	mov	r6,r10
 4002894:	40029340 	call	4002934 <copysign>
 4002898:	01b0be74 	movhi	r6,49913
 400289c:	01c06974 	movhi	r7,421
 40028a0:	31bcd644 	addi	r6,r6,-3239
 40028a4:	39db87c4 	addi	r7,r7,28191
 40028a8:	1009883a 	mov	r4,r2
 40028ac:	180b883a 	mov	r5,r3
 40028b0:	40047cc0 	call	40047cc <__muldf3>
 40028b4:	dfc00117 	ldw	ra,4(sp)
 40028b8:	dc000017 	ldw	r16,0(sp)
 40028bc:	dec00204 	addi	sp,sp,8
 40028c0:	f800283a 	ret
 40028c4:	01220034 	movhi	r4,34816
 40028c8:	015f8e34 	movhi	r5,32312
 40028cc:	500d883a 	mov	r6,r10
 40028d0:	211d6704 	addi	r4,r4,30108
 40028d4:	29790f04 	addi	r5,r5,-7108
 40028d8:	40029340 	call	4002934 <copysign>
 40028dc:	01a20034 	movhi	r6,34816
 40028e0:	01df8e34 	movhi	r7,32312
 40028e4:	319d6704 	addi	r6,r6,30108
 40028e8:	39f90f04 	addi	r7,r7,-7108
 40028ec:	1009883a 	mov	r4,r2
 40028f0:	180b883a 	mov	r5,r3
 40028f4:	40047cc0 	call	40047cc <__muldf3>
 40028f8:	dfc00117 	ldw	ra,4(sp)
 40028fc:	dc000017 	ldw	r16,0(sp)
 4002900:	dec00204 	addi	sp,sp,8
 4002904:	f800283a 	ret
 4002908:	42000d84 	addi	r8,r8,54
 400290c:	4012953a 	slli	r9,r8,20
 4002910:	01e00434 	movhi	r7,32784
 4002914:	39ffffc4 	addi	r7,r7,-1
 4002918:	19ca703a 	and	r5,r3,r7
 400291c:	000d883a 	mov	r6,zero
 4002920:	01cf2434 	movhi	r7,15504
 4002924:	5009883a 	mov	r4,r10
 4002928:	494ab03a 	or	r5,r9,r5
 400292c:	40047cc0 	call	40047cc <__muldf3>
 4002930:	003fbc06 	br	4002824 <__ram_exceptions_end+0xfbfe25dc>

04002934 <copysign>:
 4002934:	2005883a 	mov	r2,r4
 4002938:	01200034 	movhi	r4,32768
 400293c:	213fffc4 	addi	r4,r4,-1
 4002940:	38e0002c 	andhi	r3,r7,32768
 4002944:	290a703a 	and	r5,r5,r4
 4002948:	28c6b03a 	or	r3,r5,r3
 400294c:	f800283a 	ret

04002950 <__divsi3>:
 4002950:	20001b16 	blt	r4,zero,40029c0 <__divsi3+0x70>
 4002954:	000f883a 	mov	r7,zero
 4002958:	28001616 	blt	r5,zero,40029b4 <__divsi3+0x64>
 400295c:	200d883a 	mov	r6,r4
 4002960:	29001a2e 	bgeu	r5,r4,40029cc <__divsi3+0x7c>
 4002964:	00800804 	movi	r2,32
 4002968:	00c00044 	movi	r3,1
 400296c:	00000106 	br	4002974 <__divsi3+0x24>
 4002970:	10000d26 	beq	r2,zero,40029a8 <__divsi3+0x58>
 4002974:	294b883a 	add	r5,r5,r5
 4002978:	10bfffc4 	addi	r2,r2,-1
 400297c:	18c7883a 	add	r3,r3,r3
 4002980:	293ffb36 	bltu	r5,r4,4002970 <__ram_exceptions_end+0xfbfe2728>
 4002984:	0005883a 	mov	r2,zero
 4002988:	18000726 	beq	r3,zero,40029a8 <__divsi3+0x58>
 400298c:	0005883a 	mov	r2,zero
 4002990:	31400236 	bltu	r6,r5,400299c <__divsi3+0x4c>
 4002994:	314dc83a 	sub	r6,r6,r5
 4002998:	10c4b03a 	or	r2,r2,r3
 400299c:	1806d07a 	srli	r3,r3,1
 40029a0:	280ad07a 	srli	r5,r5,1
 40029a4:	183ffa1e 	bne	r3,zero,4002990 <__ram_exceptions_end+0xfbfe2748>
 40029a8:	38000126 	beq	r7,zero,40029b0 <__divsi3+0x60>
 40029ac:	0085c83a 	sub	r2,zero,r2
 40029b0:	f800283a 	ret
 40029b4:	014bc83a 	sub	r5,zero,r5
 40029b8:	39c0005c 	xori	r7,r7,1
 40029bc:	003fe706 	br	400295c <__ram_exceptions_end+0xfbfe2714>
 40029c0:	0109c83a 	sub	r4,zero,r4
 40029c4:	01c00044 	movi	r7,1
 40029c8:	003fe306 	br	4002958 <__ram_exceptions_end+0xfbfe2710>
 40029cc:	00c00044 	movi	r3,1
 40029d0:	003fee06 	br	400298c <__ram_exceptions_end+0xfbfe2744>

040029d4 <__modsi3>:
 40029d4:	20001716 	blt	r4,zero,4002a34 <__modsi3+0x60>
 40029d8:	000f883a 	mov	r7,zero
 40029dc:	2005883a 	mov	r2,r4
 40029e0:	28001216 	blt	r5,zero,4002a2c <__modsi3+0x58>
 40029e4:	2900162e 	bgeu	r5,r4,4002a40 <__modsi3+0x6c>
 40029e8:	01800804 	movi	r6,32
 40029ec:	00c00044 	movi	r3,1
 40029f0:	00000106 	br	40029f8 <__modsi3+0x24>
 40029f4:	30000a26 	beq	r6,zero,4002a20 <__modsi3+0x4c>
 40029f8:	294b883a 	add	r5,r5,r5
 40029fc:	31bfffc4 	addi	r6,r6,-1
 4002a00:	18c7883a 	add	r3,r3,r3
 4002a04:	293ffb36 	bltu	r5,r4,40029f4 <__ram_exceptions_end+0xfbfe27ac>
 4002a08:	18000526 	beq	r3,zero,4002a20 <__modsi3+0x4c>
 4002a0c:	1806d07a 	srli	r3,r3,1
 4002a10:	11400136 	bltu	r2,r5,4002a18 <__modsi3+0x44>
 4002a14:	1145c83a 	sub	r2,r2,r5
 4002a18:	280ad07a 	srli	r5,r5,1
 4002a1c:	183ffb1e 	bne	r3,zero,4002a0c <__ram_exceptions_end+0xfbfe27c4>
 4002a20:	38000126 	beq	r7,zero,4002a28 <__modsi3+0x54>
 4002a24:	0085c83a 	sub	r2,zero,r2
 4002a28:	f800283a 	ret
 4002a2c:	014bc83a 	sub	r5,zero,r5
 4002a30:	003fec06 	br	40029e4 <__ram_exceptions_end+0xfbfe279c>
 4002a34:	0109c83a 	sub	r4,zero,r4
 4002a38:	01c00044 	movi	r7,1
 4002a3c:	003fe706 	br	40029dc <__ram_exceptions_end+0xfbfe2794>
 4002a40:	00c00044 	movi	r3,1
 4002a44:	003ff106 	br	4002a0c <__ram_exceptions_end+0xfbfe27c4>

04002a48 <__udivsi3>:
 4002a48:	200d883a 	mov	r6,r4
 4002a4c:	2900152e 	bgeu	r5,r4,4002aa4 <__udivsi3+0x5c>
 4002a50:	28001416 	blt	r5,zero,4002aa4 <__udivsi3+0x5c>
 4002a54:	00800804 	movi	r2,32
 4002a58:	00c00044 	movi	r3,1
 4002a5c:	00000206 	br	4002a68 <__udivsi3+0x20>
 4002a60:	10000e26 	beq	r2,zero,4002a9c <__udivsi3+0x54>
 4002a64:	28000516 	blt	r5,zero,4002a7c <__udivsi3+0x34>
 4002a68:	294b883a 	add	r5,r5,r5
 4002a6c:	10bfffc4 	addi	r2,r2,-1
 4002a70:	18c7883a 	add	r3,r3,r3
 4002a74:	293ffa36 	bltu	r5,r4,4002a60 <__ram_exceptions_end+0xfbfe2818>
 4002a78:	18000826 	beq	r3,zero,4002a9c <__udivsi3+0x54>
 4002a7c:	0005883a 	mov	r2,zero
 4002a80:	31400236 	bltu	r6,r5,4002a8c <__udivsi3+0x44>
 4002a84:	314dc83a 	sub	r6,r6,r5
 4002a88:	10c4b03a 	or	r2,r2,r3
 4002a8c:	1806d07a 	srli	r3,r3,1
 4002a90:	280ad07a 	srli	r5,r5,1
 4002a94:	183ffa1e 	bne	r3,zero,4002a80 <__ram_exceptions_end+0xfbfe2838>
 4002a98:	f800283a 	ret
 4002a9c:	0005883a 	mov	r2,zero
 4002aa0:	f800283a 	ret
 4002aa4:	00c00044 	movi	r3,1
 4002aa8:	003ff406 	br	4002a7c <__ram_exceptions_end+0xfbfe2834>

04002aac <__umodsi3>:
 4002aac:	2005883a 	mov	r2,r4
 4002ab0:	2900122e 	bgeu	r5,r4,4002afc <__umodsi3+0x50>
 4002ab4:	28001116 	blt	r5,zero,4002afc <__umodsi3+0x50>
 4002ab8:	01800804 	movi	r6,32
 4002abc:	00c00044 	movi	r3,1
 4002ac0:	00000206 	br	4002acc <__umodsi3+0x20>
 4002ac4:	30000c26 	beq	r6,zero,4002af8 <__umodsi3+0x4c>
 4002ac8:	28000516 	blt	r5,zero,4002ae0 <__umodsi3+0x34>
 4002acc:	294b883a 	add	r5,r5,r5
 4002ad0:	31bfffc4 	addi	r6,r6,-1
 4002ad4:	18c7883a 	add	r3,r3,r3
 4002ad8:	293ffa36 	bltu	r5,r4,4002ac4 <__ram_exceptions_end+0xfbfe287c>
 4002adc:	18000626 	beq	r3,zero,4002af8 <__umodsi3+0x4c>
 4002ae0:	1806d07a 	srli	r3,r3,1
 4002ae4:	11400136 	bltu	r2,r5,4002aec <__umodsi3+0x40>
 4002ae8:	1145c83a 	sub	r2,r2,r5
 4002aec:	280ad07a 	srli	r5,r5,1
 4002af0:	183ffb1e 	bne	r3,zero,4002ae0 <__ram_exceptions_end+0xfbfe2898>
 4002af4:	f800283a 	ret
 4002af8:	f800283a 	ret
 4002afc:	00c00044 	movi	r3,1
 4002b00:	003ff706 	br	4002ae0 <__ram_exceptions_end+0xfbfe2898>

04002b04 <__divsf3>:
 4002b04:	defff504 	addi	sp,sp,-44
 4002b08:	200cd5fa 	srli	r6,r4,23
 4002b0c:	dcc00415 	stw	r19,16(sp)
 4002b10:	2026d7fa 	srli	r19,r4,31
 4002b14:	00c02034 	movhi	r3,128
 4002b18:	dd800715 	stw	r22,28(sp)
 4002b1c:	dd000515 	stw	r20,20(sp)
 4002b20:	dc800315 	stw	r18,12(sp)
 4002b24:	18ffffc4 	addi	r3,r3,-1
 4002b28:	dfc00a15 	stw	ra,40(sp)
 4002b2c:	df000915 	stw	fp,36(sp)
 4002b30:	ddc00815 	stw	r23,32(sp)
 4002b34:	dd400615 	stw	r21,24(sp)
 4002b38:	dc400215 	stw	r17,8(sp)
 4002b3c:	dc000115 	stw	r16,4(sp)
 4002b40:	35003fcc 	andi	r20,r6,255
 4002b44:	1924703a 	and	r18,r3,r4
 4002b48:	9d803fcc 	andi	r22,r19,255
 4002b4c:	a0005226 	beq	r20,zero,4002c98 <__divsf3+0x194>
 4002b50:	00803fc4 	movi	r2,255
 4002b54:	a0802e26 	beq	r20,r2,4002c10 <__divsf3+0x10c>
 4002b58:	91002034 	orhi	r4,r18,128
 4002b5c:	202490fa 	slli	r18,r4,3
 4002b60:	a53fe044 	addi	r20,r20,-127
 4002b64:	0021883a 	mov	r16,zero
 4002b68:	002f883a 	mov	r23,zero
 4002b6c:	280cd5fa 	srli	r6,r5,23
 4002b70:	282ad7fa 	srli	r21,r5,31
 4002b74:	00c02034 	movhi	r3,128
 4002b78:	18ffffc4 	addi	r3,r3,-1
 4002b7c:	31803fcc 	andi	r6,r6,255
 4002b80:	1962703a 	and	r17,r3,r5
 4002b84:	af003fcc 	andi	fp,r21,255
 4002b88:	30004a26 	beq	r6,zero,4002cb4 <__divsf3+0x1b0>
 4002b8c:	00803fc4 	movi	r2,255
 4002b90:	30804526 	beq	r6,r2,4002ca8 <__divsf3+0x1a4>
 4002b94:	89402034 	orhi	r5,r17,128
 4002b98:	282290fa 	slli	r17,r5,3
 4002b9c:	31bfe044 	addi	r6,r6,-127
 4002ba0:	000b883a 	mov	r5,zero
 4002ba4:	2c20b03a 	or	r16,r5,r16
 4002ba8:	802090ba 	slli	r16,r16,2
 4002bac:	00810034 	movhi	r2,1024
 4002bb0:	108af404 	addi	r2,r2,11216
 4002bb4:	80a1883a 	add	r16,r16,r2
 4002bb8:	81000017 	ldw	r4,0(r16)
 4002bbc:	9d46f03a 	xor	r3,r19,r21
 4002bc0:	180f883a 	mov	r7,r3
 4002bc4:	18803fcc 	andi	r2,r3,255
 4002bc8:	a18dc83a 	sub	r6,r20,r6
 4002bcc:	2000683a 	jmp	r4
 4002bd0:	04002db4 	movhi	r16,182
 4002bd4:	04002c38 	rdprs	r16,zero,176
 4002bd8:	04002da8 	cmpgeui	r16,zero,182
 4002bdc:	04002c24 	muli	r16,zero,176
 4002be0:	04002da8 	cmpgeui	r16,zero,182
 4002be4:	04002d80 	call	4002d8 <__alt_mem_SDRAM_controller-0x3bffd28>
 4002be8:	04002da8 	cmpgeui	r16,zero,182
 4002bec:	04002c24 	muli	r16,zero,176
 4002bf0:	04002c38 	rdprs	r16,zero,176
 4002bf4:	04002c38 	rdprs	r16,zero,176
 4002bf8:	04002d80 	call	4002d8 <__alt_mem_SDRAM_controller-0x3bffd28>
 4002bfc:	04002c24 	muli	r16,zero,176
 4002c00:	04002e94 	movui	r16,186
 4002c04:	04002e94 	movui	r16,186
 4002c08:	04002e94 	movui	r16,186
 4002c0c:	04002e48 	cmpgei	r16,zero,185
 4002c10:	9000581e 	bne	r18,zero,4002d74 <__divsf3+0x270>
 4002c14:	04000204 	movi	r16,8
 4002c18:	05c00084 	movi	r23,2
 4002c1c:	003fd306 	br	4002b6c <__ram_exceptions_end+0xfbfe2924>
 4002c20:	0023883a 	mov	r17,zero
 4002c24:	e02d883a 	mov	r22,fp
 4002c28:	282f883a 	mov	r23,r5
 4002c2c:	00800084 	movi	r2,2
 4002c30:	b8808f1e 	bne	r23,r2,4002e70 <__divsf3+0x36c>
 4002c34:	b005883a 	mov	r2,r22
 4002c38:	11c0004c 	andi	r7,r2,1
 4002c3c:	013fffc4 	movi	r4,-1
 4002c40:	000d883a 	mov	r6,zero
 4002c44:	21003fcc 	andi	r4,r4,255
 4002c48:	200895fa 	slli	r4,r4,23
 4002c4c:	38803fcc 	andi	r2,r7,255
 4002c50:	00c02034 	movhi	r3,128
 4002c54:	100497fa 	slli	r2,r2,31
 4002c58:	18ffffc4 	addi	r3,r3,-1
 4002c5c:	30c6703a 	and	r3,r6,r3
 4002c60:	1906b03a 	or	r3,r3,r4
 4002c64:	1884b03a 	or	r2,r3,r2
 4002c68:	dfc00a17 	ldw	ra,40(sp)
 4002c6c:	df000917 	ldw	fp,36(sp)
 4002c70:	ddc00817 	ldw	r23,32(sp)
 4002c74:	dd800717 	ldw	r22,28(sp)
 4002c78:	dd400617 	ldw	r21,24(sp)
 4002c7c:	dd000517 	ldw	r20,20(sp)
 4002c80:	dcc00417 	ldw	r19,16(sp)
 4002c84:	dc800317 	ldw	r18,12(sp)
 4002c88:	dc400217 	ldw	r17,8(sp)
 4002c8c:	dc000117 	ldw	r16,4(sp)
 4002c90:	dec00b04 	addi	sp,sp,44
 4002c94:	f800283a 	ret
 4002c98:	90002b1e 	bne	r18,zero,4002d48 <__divsf3+0x244>
 4002c9c:	04000104 	movi	r16,4
 4002ca0:	05c00044 	movi	r23,1
 4002ca4:	003fb106 	br	4002b6c <__ram_exceptions_end+0xfbfe2924>
 4002ca8:	8800251e 	bne	r17,zero,4002d40 <__divsf3+0x23c>
 4002cac:	01400084 	movi	r5,2
 4002cb0:	00000206 	br	4002cbc <__divsf3+0x1b8>
 4002cb4:	88001a1e 	bne	r17,zero,4002d20 <__divsf3+0x21c>
 4002cb8:	01400044 	movi	r5,1
 4002cbc:	8160b03a 	or	r16,r16,r5
 4002cc0:	802090ba 	slli	r16,r16,2
 4002cc4:	00c10034 	movhi	r3,1024
 4002cc8:	18cb3804 	addi	r3,r3,11488
 4002ccc:	80e1883a 	add	r16,r16,r3
 4002cd0:	80c00017 	ldw	r3,0(r16)
 4002cd4:	9d44f03a 	xor	r2,r19,r21
 4002cd8:	a18dc83a 	sub	r6,r20,r6
 4002cdc:	1800683a 	jmp	r3
 4002ce0:	04002c38 	rdprs	r16,zero,176
 4002ce4:	04002c38 	rdprs	r16,zero,176
 4002ce8:	04002e84 	movi	r16,186
 4002cec:	04002c20 	cmpeqi	r16,zero,176
 4002cf0:	04002e84 	movi	r16,186
 4002cf4:	04002d80 	call	4002d8 <__alt_mem_SDRAM_controller-0x3bffd28>
 4002cf8:	04002e84 	movi	r16,186
 4002cfc:	04002c20 	cmpeqi	r16,zero,176
 4002d00:	04002c38 	rdprs	r16,zero,176
 4002d04:	04002c38 	rdprs	r16,zero,176
 4002d08:	04002d80 	call	4002d8 <__alt_mem_SDRAM_controller-0x3bffd28>
 4002d0c:	04002c20 	cmpeqi	r16,zero,176
 4002d10:	04002e94 	movui	r16,186
 4002d14:	04002e94 	movui	r16,186
 4002d18:	04002e94 	movui	r16,186
 4002d1c:	04002eac 	andhi	r16,zero,186
 4002d20:	8809883a 	mov	r4,r17
 4002d24:	4005a4c0 	call	4005a4c <__clzsi2>
 4002d28:	10fffec4 	addi	r3,r2,-5
 4002d2c:	10801d84 	addi	r2,r2,118
 4002d30:	88e2983a 	sll	r17,r17,r3
 4002d34:	008dc83a 	sub	r6,zero,r2
 4002d38:	000b883a 	mov	r5,zero
 4002d3c:	003f9906 	br	4002ba4 <__ram_exceptions_end+0xfbfe295c>
 4002d40:	014000c4 	movi	r5,3
 4002d44:	003f9706 	br	4002ba4 <__ram_exceptions_end+0xfbfe295c>
 4002d48:	9009883a 	mov	r4,r18
 4002d4c:	d9400015 	stw	r5,0(sp)
 4002d50:	4005a4c0 	call	4005a4c <__clzsi2>
 4002d54:	10fffec4 	addi	r3,r2,-5
 4002d58:	11801d84 	addi	r6,r2,118
 4002d5c:	90e4983a 	sll	r18,r18,r3
 4002d60:	01a9c83a 	sub	r20,zero,r6
 4002d64:	0021883a 	mov	r16,zero
 4002d68:	002f883a 	mov	r23,zero
 4002d6c:	d9400017 	ldw	r5,0(sp)
 4002d70:	003f7e06 	br	4002b6c <__ram_exceptions_end+0xfbfe2924>
 4002d74:	04000304 	movi	r16,12
 4002d78:	05c000c4 	movi	r23,3
 4002d7c:	003f7b06 	br	4002b6c <__ram_exceptions_end+0xfbfe2924>
 4002d80:	01802034 	movhi	r6,128
 4002d84:	000f883a 	mov	r7,zero
 4002d88:	31bfffc4 	addi	r6,r6,-1
 4002d8c:	013fffc4 	movi	r4,-1
 4002d90:	003fac06 	br	4002c44 <__ram_exceptions_end+0xfbfe29fc>
 4002d94:	01400044 	movi	r5,1
 4002d98:	2909c83a 	sub	r4,r5,r4
 4002d9c:	00c006c4 	movi	r3,27
 4002da0:	19004b0e 	bge	r3,r4,4002ed0 <__divsf3+0x3cc>
 4002da4:	114e703a 	and	r7,r2,r5
 4002da8:	0009883a 	mov	r4,zero
 4002dac:	000d883a 	mov	r6,zero
 4002db0:	003fa406 	br	4002c44 <__ram_exceptions_end+0xfbfe29fc>
 4002db4:	9006917a 	slli	r3,r18,5
 4002db8:	8822917a 	slli	r17,r17,5
 4002dbc:	1c40372e 	bgeu	r3,r17,4002e9c <__divsf3+0x398>
 4002dc0:	31bfffc4 	addi	r6,r6,-1
 4002dc4:	010006c4 	movi	r4,27
 4002dc8:	000b883a 	mov	r5,zero
 4002dcc:	180f883a 	mov	r7,r3
 4002dd0:	294b883a 	add	r5,r5,r5
 4002dd4:	18c7883a 	add	r3,r3,r3
 4002dd8:	38000116 	blt	r7,zero,4002de0 <__divsf3+0x2dc>
 4002ddc:	1c400236 	bltu	r3,r17,4002de8 <__divsf3+0x2e4>
 4002de0:	1c47c83a 	sub	r3,r3,r17
 4002de4:	29400054 	ori	r5,r5,1
 4002de8:	213fffc4 	addi	r4,r4,-1
 4002dec:	203ff71e 	bne	r4,zero,4002dcc <__ram_exceptions_end+0xfbfe2b84>
 4002df0:	1806c03a 	cmpne	r3,r3,zero
 4002df4:	1962b03a 	or	r17,r3,r5
 4002df8:	31001fc4 	addi	r4,r6,127
 4002dfc:	013fe50e 	bge	zero,r4,4002d94 <__ram_exceptions_end+0xfbfe2b4c>
 4002e00:	88c001cc 	andi	r3,r17,7
 4002e04:	18000426 	beq	r3,zero,4002e18 <__divsf3+0x314>
 4002e08:	88c003cc 	andi	r3,r17,15
 4002e0c:	01400104 	movi	r5,4
 4002e10:	19400126 	beq	r3,r5,4002e18 <__divsf3+0x314>
 4002e14:	8963883a 	add	r17,r17,r5
 4002e18:	88c2002c 	andhi	r3,r17,2048
 4002e1c:	18000426 	beq	r3,zero,4002e30 <__divsf3+0x32c>
 4002e20:	00fe0034 	movhi	r3,63488
 4002e24:	18ffffc4 	addi	r3,r3,-1
 4002e28:	31002004 	addi	r4,r6,128
 4002e2c:	88e2703a 	and	r17,r17,r3
 4002e30:	00c03f84 	movi	r3,254
 4002e34:	193f8016 	blt	r3,r4,4002c38 <__ram_exceptions_end+0xfbfe29f0>
 4002e38:	880c91ba 	slli	r6,r17,6
 4002e3c:	11c0004c 	andi	r7,r2,1
 4002e40:	300cd27a 	srli	r6,r6,9
 4002e44:	003f7f06 	br	4002c44 <__ram_exceptions_end+0xfbfe29fc>
 4002e48:	9080102c 	andhi	r2,r18,64
 4002e4c:	10000226 	beq	r2,zero,4002e58 <__divsf3+0x354>
 4002e50:	8880102c 	andhi	r2,r17,64
 4002e54:	10001826 	beq	r2,zero,4002eb8 <__divsf3+0x3b4>
 4002e58:	00802034 	movhi	r2,128
 4002e5c:	91801034 	orhi	r6,r18,64
 4002e60:	10bfffc4 	addi	r2,r2,-1
 4002e64:	980f883a 	mov	r7,r19
 4002e68:	308c703a 	and	r6,r6,r2
 4002e6c:	003fc706 	br	4002d8c <__ram_exceptions_end+0xfbfe2b44>
 4002e70:	008000c4 	movi	r2,3
 4002e74:	b8802d26 	beq	r23,r2,4002f2c <__divsf3+0x428>
 4002e78:	00c00044 	movi	r3,1
 4002e7c:	b005883a 	mov	r2,r22
 4002e80:	b8ffdd1e 	bne	r23,r3,4002df8 <__ram_exceptions_end+0xfbfe2bb0>
 4002e84:	11c0004c 	andi	r7,r2,1
 4002e88:	0009883a 	mov	r4,zero
 4002e8c:	000d883a 	mov	r6,zero
 4002e90:	003f6c06 	br	4002c44 <__ram_exceptions_end+0xfbfe29fc>
 4002e94:	9023883a 	mov	r17,r18
 4002e98:	003f6406 	br	4002c2c <__ram_exceptions_end+0xfbfe29e4>
 4002e9c:	1c47c83a 	sub	r3,r3,r17
 4002ea0:	01000684 	movi	r4,26
 4002ea4:	01400044 	movi	r5,1
 4002ea8:	003fc806 	br	4002dcc <__ram_exceptions_end+0xfbfe2b84>
 4002eac:	9080102c 	andhi	r2,r18,64
 4002eb0:	103fe926 	beq	r2,zero,4002e58 <__ram_exceptions_end+0xfbfe2c10>
 4002eb4:	0023883a 	mov	r17,zero
 4002eb8:	00802034 	movhi	r2,128
 4002ebc:	89801034 	orhi	r6,r17,64
 4002ec0:	10bfffc4 	addi	r2,r2,-1
 4002ec4:	a80f883a 	mov	r7,r21
 4002ec8:	308c703a 	and	r6,r6,r2
 4002ecc:	003faf06 	br	4002d8c <__ram_exceptions_end+0xfbfe2b44>
 4002ed0:	01c00804 	movi	r7,32
 4002ed4:	390fc83a 	sub	r7,r7,r4
 4002ed8:	89ce983a 	sll	r7,r17,r7
 4002edc:	890ad83a 	srl	r5,r17,r4
 4002ee0:	380ec03a 	cmpne	r7,r7,zero
 4002ee4:	29cab03a 	or	r5,r5,r7
 4002ee8:	28c001cc 	andi	r3,r5,7
 4002eec:	18000426 	beq	r3,zero,4002f00 <__divsf3+0x3fc>
 4002ef0:	28c003cc 	andi	r3,r5,15
 4002ef4:	01000104 	movi	r4,4
 4002ef8:	19000126 	beq	r3,r4,4002f00 <__divsf3+0x3fc>
 4002efc:	290b883a 	add	r5,r5,r4
 4002f00:	28c1002c 	andhi	r3,r5,1024
 4002f04:	18000426 	beq	r3,zero,4002f18 <__divsf3+0x414>
 4002f08:	11c0004c 	andi	r7,r2,1
 4002f0c:	01000044 	movi	r4,1
 4002f10:	000d883a 	mov	r6,zero
 4002f14:	003f4b06 	br	4002c44 <__ram_exceptions_end+0xfbfe29fc>
 4002f18:	280a91ba 	slli	r5,r5,6
 4002f1c:	11c0004c 	andi	r7,r2,1
 4002f20:	0009883a 	mov	r4,zero
 4002f24:	280cd27a 	srli	r6,r5,9
 4002f28:	003f4606 	br	4002c44 <__ram_exceptions_end+0xfbfe29fc>
 4002f2c:	00802034 	movhi	r2,128
 4002f30:	89801034 	orhi	r6,r17,64
 4002f34:	10bfffc4 	addi	r2,r2,-1
 4002f38:	b00f883a 	mov	r7,r22
 4002f3c:	308c703a 	and	r6,r6,r2
 4002f40:	003f9206 	br	4002d8c <__ram_exceptions_end+0xfbfe2b44>

04002f44 <__mulsf3>:
 4002f44:	defff504 	addi	sp,sp,-44
 4002f48:	dc000115 	stw	r16,4(sp)
 4002f4c:	2020d5fa 	srli	r16,r4,23
 4002f50:	dd400615 	stw	r21,24(sp)
 4002f54:	202ad7fa 	srli	r21,r4,31
 4002f58:	dc800315 	stw	r18,12(sp)
 4002f5c:	04802034 	movhi	r18,128
 4002f60:	df000915 	stw	fp,36(sp)
 4002f64:	dd000515 	stw	r20,20(sp)
 4002f68:	94bfffc4 	addi	r18,r18,-1
 4002f6c:	dfc00a15 	stw	ra,40(sp)
 4002f70:	ddc00815 	stw	r23,32(sp)
 4002f74:	dd800715 	stw	r22,28(sp)
 4002f78:	dcc00415 	stw	r19,16(sp)
 4002f7c:	dc400215 	stw	r17,8(sp)
 4002f80:	84003fcc 	andi	r16,r16,255
 4002f84:	9124703a 	and	r18,r18,r4
 4002f88:	a829883a 	mov	r20,r21
 4002f8c:	af003fcc 	andi	fp,r21,255
 4002f90:	80005426 	beq	r16,zero,40030e4 <__mulsf3+0x1a0>
 4002f94:	00803fc4 	movi	r2,255
 4002f98:	80802f26 	beq	r16,r2,4003058 <__mulsf3+0x114>
 4002f9c:	91002034 	orhi	r4,r18,128
 4002fa0:	202490fa 	slli	r18,r4,3
 4002fa4:	843fe044 	addi	r16,r16,-127
 4002fa8:	0023883a 	mov	r17,zero
 4002fac:	002f883a 	mov	r23,zero
 4002fb0:	2804d5fa 	srli	r2,r5,23
 4002fb4:	282cd7fa 	srli	r22,r5,31
 4002fb8:	01002034 	movhi	r4,128
 4002fbc:	213fffc4 	addi	r4,r4,-1
 4002fc0:	10803fcc 	andi	r2,r2,255
 4002fc4:	2166703a 	and	r19,r4,r5
 4002fc8:	b1803fcc 	andi	r6,r22,255
 4002fcc:	10004c26 	beq	r2,zero,4003100 <__mulsf3+0x1bc>
 4002fd0:	00c03fc4 	movi	r3,255
 4002fd4:	10c04726 	beq	r2,r3,40030f4 <__mulsf3+0x1b0>
 4002fd8:	99002034 	orhi	r4,r19,128
 4002fdc:	202690fa 	slli	r19,r4,3
 4002fe0:	10bfe044 	addi	r2,r2,-127
 4002fe4:	0007883a 	mov	r3,zero
 4002fe8:	80a1883a 	add	r16,r16,r2
 4002fec:	010003c4 	movi	r4,15
 4002ff0:	1c44b03a 	or	r2,r3,r17
 4002ff4:	b56af03a 	xor	r21,r22,r21
 4002ff8:	81c00044 	addi	r7,r16,1
 4002ffc:	20806b36 	bltu	r4,r2,40031ac <__mulsf3+0x268>
 4003000:	100490ba 	slli	r2,r2,2
 4003004:	01010034 	movhi	r4,1024
 4003008:	210c0604 	addi	r4,r4,12312
 400300c:	1105883a 	add	r2,r2,r4
 4003010:	10800017 	ldw	r2,0(r2)
 4003014:	1000683a 	jmp	r2
 4003018:	040031ac 	andhi	r16,zero,198
 400301c:	0400306c 	andhi	r16,zero,193
 4003020:	0400306c 	andhi	r16,zero,193
 4003024:	04003068 	cmpgeui	r16,zero,193
 4003028:	04003190 	cmplti	r16,zero,198
 400302c:	04003190 	cmplti	r16,zero,198
 4003030:	0400317c 	xorhi	r16,zero,197
 4003034:	04003068 	cmpgeui	r16,zero,193
 4003038:	04003190 	cmplti	r16,zero,198
 400303c:	0400317c 	xorhi	r16,zero,197
 4003040:	04003190 	cmplti	r16,zero,198
 4003044:	04003068 	cmpgeui	r16,zero,193
 4003048:	0400319c 	xori	r16,zero,198
 400304c:	0400319c 	xori	r16,zero,198
 4003050:	0400319c 	xori	r16,zero,198
 4003054:	04003278 	rdprs	r16,zero,201
 4003058:	90003b1e 	bne	r18,zero,4003148 <__mulsf3+0x204>
 400305c:	04400204 	movi	r17,8
 4003060:	05c00084 	movi	r23,2
 4003064:	003fd206 	br	4002fb0 <__ram_exceptions_end+0xfbfe2d68>
 4003068:	302b883a 	mov	r21,r6
 400306c:	00800084 	movi	r2,2
 4003070:	18802626 	beq	r3,r2,400310c <__mulsf3+0x1c8>
 4003074:	008000c4 	movi	r2,3
 4003078:	1880ab26 	beq	r3,r2,4003328 <__mulsf3+0x3e4>
 400307c:	00800044 	movi	r2,1
 4003080:	1880a21e 	bne	r3,r2,400330c <__mulsf3+0x3c8>
 4003084:	a829883a 	mov	r20,r21
 4003088:	0007883a 	mov	r3,zero
 400308c:	0009883a 	mov	r4,zero
 4003090:	18803fcc 	andi	r2,r3,255
 4003094:	100695fa 	slli	r3,r2,23
 4003098:	a0803fcc 	andi	r2,r20,255
 400309c:	100a97fa 	slli	r5,r2,31
 40030a0:	00802034 	movhi	r2,128
 40030a4:	10bfffc4 	addi	r2,r2,-1
 40030a8:	2084703a 	and	r2,r4,r2
 40030ac:	10c4b03a 	or	r2,r2,r3
 40030b0:	1144b03a 	or	r2,r2,r5
 40030b4:	dfc00a17 	ldw	ra,40(sp)
 40030b8:	df000917 	ldw	fp,36(sp)
 40030bc:	ddc00817 	ldw	r23,32(sp)
 40030c0:	dd800717 	ldw	r22,28(sp)
 40030c4:	dd400617 	ldw	r21,24(sp)
 40030c8:	dd000517 	ldw	r20,20(sp)
 40030cc:	dcc00417 	ldw	r19,16(sp)
 40030d0:	dc800317 	ldw	r18,12(sp)
 40030d4:	dc400217 	ldw	r17,8(sp)
 40030d8:	dc000117 	ldw	r16,4(sp)
 40030dc:	dec00b04 	addi	sp,sp,44
 40030e0:	f800283a 	ret
 40030e4:	90000d1e 	bne	r18,zero,400311c <__mulsf3+0x1d8>
 40030e8:	04400104 	movi	r17,4
 40030ec:	05c00044 	movi	r23,1
 40030f0:	003faf06 	br	4002fb0 <__ram_exceptions_end+0xfbfe2d68>
 40030f4:	9806c03a 	cmpne	r3,r19,zero
 40030f8:	18c00084 	addi	r3,r3,2
 40030fc:	003fba06 	br	4002fe8 <__ram_exceptions_end+0xfbfe2da0>
 4003100:	9800141e 	bne	r19,zero,4003154 <__mulsf3+0x210>
 4003104:	00c00044 	movi	r3,1
 4003108:	003fb706 	br	4002fe8 <__ram_exceptions_end+0xfbfe2da0>
 400310c:	a829883a 	mov	r20,r21
 4003110:	00ffffc4 	movi	r3,-1
 4003114:	0009883a 	mov	r4,zero
 4003118:	003fdd06 	br	4003090 <__ram_exceptions_end+0xfbfe2e48>
 400311c:	9009883a 	mov	r4,r18
 4003120:	d9400015 	stw	r5,0(sp)
 4003124:	4005a4c0 	call	4005a4c <__clzsi2>
 4003128:	10fffec4 	addi	r3,r2,-5
 400312c:	10801d84 	addi	r2,r2,118
 4003130:	90e4983a 	sll	r18,r18,r3
 4003134:	00a1c83a 	sub	r16,zero,r2
 4003138:	0023883a 	mov	r17,zero
 400313c:	002f883a 	mov	r23,zero
 4003140:	d9400017 	ldw	r5,0(sp)
 4003144:	003f9a06 	br	4002fb0 <__ram_exceptions_end+0xfbfe2d68>
 4003148:	04400304 	movi	r17,12
 400314c:	05c000c4 	movi	r23,3
 4003150:	003f9706 	br	4002fb0 <__ram_exceptions_end+0xfbfe2d68>
 4003154:	9809883a 	mov	r4,r19
 4003158:	d9800015 	stw	r6,0(sp)
 400315c:	4005a4c0 	call	4005a4c <__clzsi2>
 4003160:	10fffec4 	addi	r3,r2,-5
 4003164:	10801d84 	addi	r2,r2,118
 4003168:	98e6983a 	sll	r19,r19,r3
 400316c:	0085c83a 	sub	r2,zero,r2
 4003170:	0007883a 	mov	r3,zero
 4003174:	d9800017 	ldw	r6,0(sp)
 4003178:	003f9b06 	br	4002fe8 <__ram_exceptions_end+0xfbfe2da0>
 400317c:	01002034 	movhi	r4,128
 4003180:	0029883a 	mov	r20,zero
 4003184:	213fffc4 	addi	r4,r4,-1
 4003188:	00ffffc4 	movi	r3,-1
 400318c:	003fc006 	br	4003090 <__ram_exceptions_end+0xfbfe2e48>
 4003190:	9027883a 	mov	r19,r18
 4003194:	b807883a 	mov	r3,r23
 4003198:	003fb406 	br	400306c <__ram_exceptions_end+0xfbfe2e24>
 400319c:	9027883a 	mov	r19,r18
 40031a0:	e02b883a 	mov	r21,fp
 40031a4:	b807883a 	mov	r3,r23
 40031a8:	003fb006 	br	400306c <__ram_exceptions_end+0xfbfe2e24>
 40031ac:	9004d43a 	srli	r2,r18,16
 40031b0:	9810d43a 	srli	r8,r19,16
 40031b4:	94bfffcc 	andi	r18,r18,65535
 40031b8:	993fffcc 	andi	r4,r19,65535
 40031bc:	910d383a 	mul	r6,r18,r4
 40031c0:	20a7383a 	mul	r19,r4,r2
 40031c4:	9225383a 	mul	r18,r18,r8
 40031c8:	3006d43a 	srli	r3,r6,16
 40031cc:	1211383a 	mul	r8,r2,r8
 40031d0:	94e5883a 	add	r18,r18,r19
 40031d4:	1c87883a 	add	r3,r3,r18
 40031d8:	1cc0022e 	bgeu	r3,r19,40031e4 <__mulsf3+0x2a0>
 40031dc:	00800074 	movhi	r2,1
 40031e0:	4091883a 	add	r8,r8,r2
 40031e4:	1804943a 	slli	r2,r3,16
 40031e8:	31bfffcc 	andi	r6,r6,65535
 40031ec:	1806d43a 	srli	r3,r3,16
 40031f0:	1185883a 	add	r2,r2,r6
 40031f4:	102691ba 	slli	r19,r2,6
 40031f8:	1a07883a 	add	r3,r3,r8
 40031fc:	1004d6ba 	srli	r2,r2,26
 4003200:	180891ba 	slli	r4,r3,6
 4003204:	9826c03a 	cmpne	r19,r19,zero
 4003208:	9884b03a 	or	r2,r19,r2
 400320c:	1126b03a 	or	r19,r2,r4
 4003210:	9882002c 	andhi	r2,r19,2048
 4003214:	10000426 	beq	r2,zero,4003228 <__mulsf3+0x2e4>
 4003218:	9804d07a 	srli	r2,r19,1
 400321c:	9900004c 	andi	r4,r19,1
 4003220:	3821883a 	mov	r16,r7
 4003224:	1126b03a 	or	r19,r2,r4
 4003228:	80c01fc4 	addi	r3,r16,127
 400322c:	00c0210e 	bge	zero,r3,40032b4 <__mulsf3+0x370>
 4003230:	988001cc 	andi	r2,r19,7
 4003234:	10000426 	beq	r2,zero,4003248 <__mulsf3+0x304>
 4003238:	988003cc 	andi	r2,r19,15
 400323c:	01000104 	movi	r4,4
 4003240:	11000126 	beq	r2,r4,4003248 <__mulsf3+0x304>
 4003244:	9927883a 	add	r19,r19,r4
 4003248:	9882002c 	andhi	r2,r19,2048
 400324c:	10000426 	beq	r2,zero,4003260 <__mulsf3+0x31c>
 4003250:	00be0034 	movhi	r2,63488
 4003254:	10bfffc4 	addi	r2,r2,-1
 4003258:	80c02004 	addi	r3,r16,128
 400325c:	98a6703a 	and	r19,r19,r2
 4003260:	00803f84 	movi	r2,254
 4003264:	10ffa916 	blt	r2,r3,400310c <__ram_exceptions_end+0xfbfe2ec4>
 4003268:	980891ba 	slli	r4,r19,6
 400326c:	a829883a 	mov	r20,r21
 4003270:	2008d27a 	srli	r4,r4,9
 4003274:	003f8606 	br	4003090 <__ram_exceptions_end+0xfbfe2e48>
 4003278:	9080102c 	andhi	r2,r18,64
 400327c:	10000826 	beq	r2,zero,40032a0 <__mulsf3+0x35c>
 4003280:	9880102c 	andhi	r2,r19,64
 4003284:	1000061e 	bne	r2,zero,40032a0 <__mulsf3+0x35c>
 4003288:	00802034 	movhi	r2,128
 400328c:	99001034 	orhi	r4,r19,64
 4003290:	10bfffc4 	addi	r2,r2,-1
 4003294:	b029883a 	mov	r20,r22
 4003298:	2088703a 	and	r4,r4,r2
 400329c:	003fba06 	br	4003188 <__ram_exceptions_end+0xfbfe2f40>
 40032a0:	00802034 	movhi	r2,128
 40032a4:	91001034 	orhi	r4,r18,64
 40032a8:	10bfffc4 	addi	r2,r2,-1
 40032ac:	2088703a 	and	r4,r4,r2
 40032b0:	003fb506 	br	4003188 <__ram_exceptions_end+0xfbfe2f40>
 40032b4:	00800044 	movi	r2,1
 40032b8:	10c7c83a 	sub	r3,r2,r3
 40032bc:	008006c4 	movi	r2,27
 40032c0:	10ff7016 	blt	r2,r3,4003084 <__ram_exceptions_end+0xfbfe2e3c>
 40032c4:	00800804 	movi	r2,32
 40032c8:	10c5c83a 	sub	r2,r2,r3
 40032cc:	9884983a 	sll	r2,r19,r2
 40032d0:	98c6d83a 	srl	r3,r19,r3
 40032d4:	1004c03a 	cmpne	r2,r2,zero
 40032d8:	1884b03a 	or	r2,r3,r2
 40032dc:	10c001cc 	andi	r3,r2,7
 40032e0:	18000426 	beq	r3,zero,40032f4 <__mulsf3+0x3b0>
 40032e4:	10c003cc 	andi	r3,r2,15
 40032e8:	01000104 	movi	r4,4
 40032ec:	19000126 	beq	r3,r4,40032f4 <__mulsf3+0x3b0>
 40032f0:	1105883a 	add	r2,r2,r4
 40032f4:	10c1002c 	andhi	r3,r2,1024
 40032f8:	18000626 	beq	r3,zero,4003314 <__mulsf3+0x3d0>
 40032fc:	a829883a 	mov	r20,r21
 4003300:	00c00044 	movi	r3,1
 4003304:	0009883a 	mov	r4,zero
 4003308:	003f6106 	br	4003090 <__ram_exceptions_end+0xfbfe2e48>
 400330c:	3821883a 	mov	r16,r7
 4003310:	003fc506 	br	4003228 <__ram_exceptions_end+0xfbfe2fe0>
 4003314:	100491ba 	slli	r2,r2,6
 4003318:	a829883a 	mov	r20,r21
 400331c:	0007883a 	mov	r3,zero
 4003320:	1008d27a 	srli	r4,r2,9
 4003324:	003f5a06 	br	4003090 <__ram_exceptions_end+0xfbfe2e48>
 4003328:	00802034 	movhi	r2,128
 400332c:	99001034 	orhi	r4,r19,64
 4003330:	10bfffc4 	addi	r2,r2,-1
 4003334:	a829883a 	mov	r20,r21
 4003338:	2088703a 	and	r4,r4,r2
 400333c:	003f9206 	br	4003188 <__ram_exceptions_end+0xfbfe2f40>

04003340 <__fixsfsi>:
 4003340:	200ad5fa 	srli	r5,r4,23
 4003344:	00c02034 	movhi	r3,128
 4003348:	18ffffc4 	addi	r3,r3,-1
 400334c:	29403fcc 	andi	r5,r5,255
 4003350:	00801f84 	movi	r2,126
 4003354:	1906703a 	and	r3,r3,r4
 4003358:	2008d7fa 	srli	r4,r4,31
 400335c:	11400e0e 	bge	r2,r5,4003398 <__fixsfsi+0x58>
 4003360:	00802744 	movi	r2,157
 4003364:	11400816 	blt	r2,r5,4003388 <__fixsfsi+0x48>
 4003368:	00802544 	movi	r2,149
 400336c:	18c02034 	orhi	r3,r3,128
 4003370:	11400b0e 	bge	r2,r5,40033a0 <__fixsfsi+0x60>
 4003374:	28bfda84 	addi	r2,r5,-150
 4003378:	1884983a 	sll	r2,r3,r2
 400337c:	20000726 	beq	r4,zero,400339c <__fixsfsi+0x5c>
 4003380:	0085c83a 	sub	r2,zero,r2
 4003384:	f800283a 	ret
 4003388:	00a00034 	movhi	r2,32768
 400338c:	10bfffc4 	addi	r2,r2,-1
 4003390:	2085883a 	add	r2,r4,r2
 4003394:	f800283a 	ret
 4003398:	0005883a 	mov	r2,zero
 400339c:	f800283a 	ret
 40033a0:	00802584 	movi	r2,150
 40033a4:	1145c83a 	sub	r2,r2,r5
 40033a8:	1884d83a 	srl	r2,r3,r2
 40033ac:	003ff306 	br	400337c <__ram_exceptions_end+0xfbfe3134>

040033b0 <__floatsisf>:
 40033b0:	defffd04 	addi	sp,sp,-12
 40033b4:	dfc00215 	stw	ra,8(sp)
 40033b8:	dc400115 	stw	r17,4(sp)
 40033bc:	dc000015 	stw	r16,0(sp)
 40033c0:	20003526 	beq	r4,zero,4003498 <__floatsisf+0xe8>
 40033c4:	2021883a 	mov	r16,r4
 40033c8:	2022d7fa 	srli	r17,r4,31
 40033cc:	20003616 	blt	r4,zero,40034a8 <__floatsisf+0xf8>
 40033d0:	8009883a 	mov	r4,r16
 40033d4:	4005a4c0 	call	4005a4c <__clzsi2>
 40033d8:	00c02784 	movi	r3,158
 40033dc:	1887c83a 	sub	r3,r3,r2
 40033e0:	01002584 	movi	r4,150
 40033e4:	20c01416 	blt	r4,r3,4003438 <__floatsisf+0x88>
 40033e8:	20c9c83a 	sub	r4,r4,r3
 40033ec:	8120983a 	sll	r16,r16,r4
 40033f0:	00802034 	movhi	r2,128
 40033f4:	10bfffc4 	addi	r2,r2,-1
 40033f8:	8809883a 	mov	r4,r17
 40033fc:	80a0703a 	and	r16,r16,r2
 4003400:	18803fcc 	andi	r2,r3,255
 4003404:	100695fa 	slli	r3,r2,23
 4003408:	20803fcc 	andi	r2,r4,255
 400340c:	100897fa 	slli	r4,r2,31
 4003410:	00802034 	movhi	r2,128
 4003414:	10bfffc4 	addi	r2,r2,-1
 4003418:	8084703a 	and	r2,r16,r2
 400341c:	10c4b03a 	or	r2,r2,r3
 4003420:	1104b03a 	or	r2,r2,r4
 4003424:	dfc00217 	ldw	ra,8(sp)
 4003428:	dc400117 	ldw	r17,4(sp)
 400342c:	dc000017 	ldw	r16,0(sp)
 4003430:	dec00304 	addi	sp,sp,12
 4003434:	f800283a 	ret
 4003438:	01002644 	movi	r4,153
 400343c:	20c01c16 	blt	r4,r3,40034b0 <__floatsisf+0x100>
 4003440:	20c9c83a 	sub	r4,r4,r3
 4003444:	8120983a 	sll	r16,r16,r4
 4003448:	013f0034 	movhi	r4,64512
 400344c:	213fffc4 	addi	r4,r4,-1
 4003450:	814001cc 	andi	r5,r16,7
 4003454:	8108703a 	and	r4,r16,r4
 4003458:	28000426 	beq	r5,zero,400346c <__floatsisf+0xbc>
 400345c:	840003cc 	andi	r16,r16,15
 4003460:	01400104 	movi	r5,4
 4003464:	81400126 	beq	r16,r5,400346c <__floatsisf+0xbc>
 4003468:	2149883a 	add	r4,r4,r5
 400346c:	2141002c 	andhi	r5,r4,1024
 4003470:	28000526 	beq	r5,zero,4003488 <__floatsisf+0xd8>
 4003474:	00c027c4 	movi	r3,159
 4003478:	1887c83a 	sub	r3,r3,r2
 400347c:	00bf0034 	movhi	r2,64512
 4003480:	10bfffc4 	addi	r2,r2,-1
 4003484:	2088703a 	and	r4,r4,r2
 4003488:	202091ba 	slli	r16,r4,6
 400348c:	8809883a 	mov	r4,r17
 4003490:	8020d27a 	srli	r16,r16,9
 4003494:	003fda06 	br	4003400 <__ram_exceptions_end+0xfbfe31b8>
 4003498:	0009883a 	mov	r4,zero
 400349c:	0007883a 	mov	r3,zero
 40034a0:	0021883a 	mov	r16,zero
 40034a4:	003fd606 	br	4003400 <__ram_exceptions_end+0xfbfe31b8>
 40034a8:	0121c83a 	sub	r16,zero,r4
 40034ac:	003fc806 	br	40033d0 <__ram_exceptions_end+0xfbfe3188>
 40034b0:	01002e44 	movi	r4,185
 40034b4:	20c9c83a 	sub	r4,r4,r3
 40034b8:	01400144 	movi	r5,5
 40034bc:	8108983a 	sll	r4,r16,r4
 40034c0:	288bc83a 	sub	r5,r5,r2
 40034c4:	8160d83a 	srl	r16,r16,r5
 40034c8:	2008c03a 	cmpne	r4,r4,zero
 40034cc:	8120b03a 	or	r16,r16,r4
 40034d0:	003fdd06 	br	4003448 <__ram_exceptions_end+0xfbfe3200>

040034d4 <__adddf3>:
 40034d4:	02c00434 	movhi	r11,16
 40034d8:	5affffc4 	addi	r11,r11,-1
 40034dc:	2806d7fa 	srli	r3,r5,31
 40034e0:	2ad4703a 	and	r10,r5,r11
 40034e4:	3ad2703a 	and	r9,r7,r11
 40034e8:	3804d53a 	srli	r2,r7,20
 40034ec:	3018d77a 	srli	r12,r6,29
 40034f0:	280ad53a 	srli	r5,r5,20
 40034f4:	501490fa 	slli	r10,r10,3
 40034f8:	2010d77a 	srli	r8,r4,29
 40034fc:	481290fa 	slli	r9,r9,3
 4003500:	380ed7fa 	srli	r7,r7,31
 4003504:	defffb04 	addi	sp,sp,-20
 4003508:	dc800215 	stw	r18,8(sp)
 400350c:	dc400115 	stw	r17,4(sp)
 4003510:	dc000015 	stw	r16,0(sp)
 4003514:	dfc00415 	stw	ra,16(sp)
 4003518:	dcc00315 	stw	r19,12(sp)
 400351c:	1c803fcc 	andi	r18,r3,255
 4003520:	2c01ffcc 	andi	r16,r5,2047
 4003524:	5210b03a 	or	r8,r10,r8
 4003528:	202290fa 	slli	r17,r4,3
 400352c:	1081ffcc 	andi	r2,r2,2047
 4003530:	4b12b03a 	or	r9,r9,r12
 4003534:	300c90fa 	slli	r6,r6,3
 4003538:	91c07526 	beq	r18,r7,4003710 <__adddf3+0x23c>
 400353c:	8087c83a 	sub	r3,r16,r2
 4003540:	00c0ab0e 	bge	zero,r3,40037f0 <__adddf3+0x31c>
 4003544:	10002a1e 	bne	r2,zero,40035f0 <__adddf3+0x11c>
 4003548:	4984b03a 	or	r2,r9,r6
 400354c:	1000961e 	bne	r2,zero,40037a8 <__adddf3+0x2d4>
 4003550:	888001cc 	andi	r2,r17,7
 4003554:	10000726 	beq	r2,zero,4003574 <__adddf3+0xa0>
 4003558:	888003cc 	andi	r2,r17,15
 400355c:	00c00104 	movi	r3,4
 4003560:	10c00426 	beq	r2,r3,4003574 <__adddf3+0xa0>
 4003564:	88c7883a 	add	r3,r17,r3
 4003568:	1c63803a 	cmpltu	r17,r3,r17
 400356c:	4451883a 	add	r8,r8,r17
 4003570:	1823883a 	mov	r17,r3
 4003574:	4080202c 	andhi	r2,r8,128
 4003578:	10005926 	beq	r2,zero,40036e0 <__adddf3+0x20c>
 400357c:	84000044 	addi	r16,r16,1
 4003580:	0081ffc4 	movi	r2,2047
 4003584:	8080ba26 	beq	r16,r2,4003870 <__adddf3+0x39c>
 4003588:	00bfe034 	movhi	r2,65408
 400358c:	10bfffc4 	addi	r2,r2,-1
 4003590:	4090703a 	and	r8,r8,r2
 4003594:	4004977a 	slli	r2,r8,29
 4003598:	4010927a 	slli	r8,r8,9
 400359c:	8822d0fa 	srli	r17,r17,3
 40035a0:	8401ffcc 	andi	r16,r16,2047
 40035a4:	4010d33a 	srli	r8,r8,12
 40035a8:	9007883a 	mov	r3,r18
 40035ac:	1444b03a 	or	r2,r2,r17
 40035b0:	8401ffcc 	andi	r16,r16,2047
 40035b4:	8020953a 	slli	r16,r16,20
 40035b8:	18c03fcc 	andi	r3,r3,255
 40035bc:	01000434 	movhi	r4,16
 40035c0:	213fffc4 	addi	r4,r4,-1
 40035c4:	180697fa 	slli	r3,r3,31
 40035c8:	4110703a 	and	r8,r8,r4
 40035cc:	4410b03a 	or	r8,r8,r16
 40035d0:	40c6b03a 	or	r3,r8,r3
 40035d4:	dfc00417 	ldw	ra,16(sp)
 40035d8:	dcc00317 	ldw	r19,12(sp)
 40035dc:	dc800217 	ldw	r18,8(sp)
 40035e0:	dc400117 	ldw	r17,4(sp)
 40035e4:	dc000017 	ldw	r16,0(sp)
 40035e8:	dec00504 	addi	sp,sp,20
 40035ec:	f800283a 	ret
 40035f0:	0081ffc4 	movi	r2,2047
 40035f4:	80bfd626 	beq	r16,r2,4003550 <__ram_exceptions_end+0xfbfe3308>
 40035f8:	4a402034 	orhi	r9,r9,128
 40035fc:	00800e04 	movi	r2,56
 4003600:	10c09f16 	blt	r2,r3,4003880 <__adddf3+0x3ac>
 4003604:	008007c4 	movi	r2,31
 4003608:	10c0c216 	blt	r2,r3,4003914 <__adddf3+0x440>
 400360c:	00800804 	movi	r2,32
 4003610:	10c5c83a 	sub	r2,r2,r3
 4003614:	488a983a 	sll	r5,r9,r2
 4003618:	30c8d83a 	srl	r4,r6,r3
 400361c:	3084983a 	sll	r2,r6,r2
 4003620:	48c6d83a 	srl	r3,r9,r3
 4003624:	290cb03a 	or	r6,r5,r4
 4003628:	1004c03a 	cmpne	r2,r2,zero
 400362c:	308cb03a 	or	r6,r6,r2
 4003630:	898dc83a 	sub	r6,r17,r6
 4003634:	89a3803a 	cmpltu	r17,r17,r6
 4003638:	40d1c83a 	sub	r8,r8,r3
 400363c:	4451c83a 	sub	r8,r8,r17
 4003640:	3023883a 	mov	r17,r6
 4003644:	4080202c 	andhi	r2,r8,128
 4003648:	10002326 	beq	r2,zero,40036d8 <__adddf3+0x204>
 400364c:	04c02034 	movhi	r19,128
 4003650:	9cffffc4 	addi	r19,r19,-1
 4003654:	44e6703a 	and	r19,r8,r19
 4003658:	98007626 	beq	r19,zero,4003834 <__adddf3+0x360>
 400365c:	9809883a 	mov	r4,r19
 4003660:	4005a4c0 	call	4005a4c <__clzsi2>
 4003664:	10fffe04 	addi	r3,r2,-8
 4003668:	010007c4 	movi	r4,31
 400366c:	20c07716 	blt	r4,r3,400384c <__adddf3+0x378>
 4003670:	00800804 	movi	r2,32
 4003674:	10c5c83a 	sub	r2,r2,r3
 4003678:	8884d83a 	srl	r2,r17,r2
 400367c:	98d0983a 	sll	r8,r19,r3
 4003680:	88e2983a 	sll	r17,r17,r3
 4003684:	1204b03a 	or	r2,r2,r8
 4003688:	1c007416 	blt	r3,r16,400385c <__adddf3+0x388>
 400368c:	1c21c83a 	sub	r16,r3,r16
 4003690:	82000044 	addi	r8,r16,1
 4003694:	00c007c4 	movi	r3,31
 4003698:	1a009116 	blt	r3,r8,40038e0 <__adddf3+0x40c>
 400369c:	00c00804 	movi	r3,32
 40036a0:	1a07c83a 	sub	r3,r3,r8
 40036a4:	8a08d83a 	srl	r4,r17,r8
 40036a8:	88e2983a 	sll	r17,r17,r3
 40036ac:	10c6983a 	sll	r3,r2,r3
 40036b0:	1210d83a 	srl	r8,r2,r8
 40036b4:	8804c03a 	cmpne	r2,r17,zero
 40036b8:	1906b03a 	or	r3,r3,r4
 40036bc:	18a2b03a 	or	r17,r3,r2
 40036c0:	0021883a 	mov	r16,zero
 40036c4:	003fa206 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 40036c8:	1890b03a 	or	r8,r3,r2
 40036cc:	40017d26 	beq	r8,zero,4003cc4 <__adddf3+0x7f0>
 40036d0:	1011883a 	mov	r8,r2
 40036d4:	1823883a 	mov	r17,r3
 40036d8:	888001cc 	andi	r2,r17,7
 40036dc:	103f9e1e 	bne	r2,zero,4003558 <__ram_exceptions_end+0xfbfe3310>
 40036e0:	4004977a 	slli	r2,r8,29
 40036e4:	8822d0fa 	srli	r17,r17,3
 40036e8:	4010d0fa 	srli	r8,r8,3
 40036ec:	9007883a 	mov	r3,r18
 40036f0:	1444b03a 	or	r2,r2,r17
 40036f4:	0101ffc4 	movi	r4,2047
 40036f8:	81002426 	beq	r16,r4,400378c <__adddf3+0x2b8>
 40036fc:	8120703a 	and	r16,r16,r4
 4003700:	01000434 	movhi	r4,16
 4003704:	213fffc4 	addi	r4,r4,-1
 4003708:	4110703a 	and	r8,r8,r4
 400370c:	003fa806 	br	40035b0 <__ram_exceptions_end+0xfbfe3368>
 4003710:	8089c83a 	sub	r4,r16,r2
 4003714:	01005e0e 	bge	zero,r4,4003890 <__adddf3+0x3bc>
 4003718:	10002b26 	beq	r2,zero,40037c8 <__adddf3+0x2f4>
 400371c:	0081ffc4 	movi	r2,2047
 4003720:	80bf8b26 	beq	r16,r2,4003550 <__ram_exceptions_end+0xfbfe3308>
 4003724:	4a402034 	orhi	r9,r9,128
 4003728:	00800e04 	movi	r2,56
 400372c:	1100a40e 	bge	r2,r4,40039c0 <__adddf3+0x4ec>
 4003730:	498cb03a 	or	r6,r9,r6
 4003734:	300ac03a 	cmpne	r5,r6,zero
 4003738:	0013883a 	mov	r9,zero
 400373c:	2c4b883a 	add	r5,r5,r17
 4003740:	2c63803a 	cmpltu	r17,r5,r17
 4003744:	4a11883a 	add	r8,r9,r8
 4003748:	8a11883a 	add	r8,r17,r8
 400374c:	2823883a 	mov	r17,r5
 4003750:	4080202c 	andhi	r2,r8,128
 4003754:	103fe026 	beq	r2,zero,40036d8 <__ram_exceptions_end+0xfbfe3490>
 4003758:	84000044 	addi	r16,r16,1
 400375c:	0081ffc4 	movi	r2,2047
 4003760:	8080d226 	beq	r16,r2,4003aac <__adddf3+0x5d8>
 4003764:	00bfe034 	movhi	r2,65408
 4003768:	10bfffc4 	addi	r2,r2,-1
 400376c:	4090703a 	and	r8,r8,r2
 4003770:	880ad07a 	srli	r5,r17,1
 4003774:	400897fa 	slli	r4,r8,31
 4003778:	88c0004c 	andi	r3,r17,1
 400377c:	28e2b03a 	or	r17,r5,r3
 4003780:	4010d07a 	srli	r8,r8,1
 4003784:	2462b03a 	or	r17,r4,r17
 4003788:	003f7106 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 400378c:	4088b03a 	or	r4,r8,r2
 4003790:	20014526 	beq	r4,zero,4003ca8 <__adddf3+0x7d4>
 4003794:	01000434 	movhi	r4,16
 4003798:	42000234 	orhi	r8,r8,8
 400379c:	213fffc4 	addi	r4,r4,-1
 40037a0:	4110703a 	and	r8,r8,r4
 40037a4:	003f8206 	br	40035b0 <__ram_exceptions_end+0xfbfe3368>
 40037a8:	18ffffc4 	addi	r3,r3,-1
 40037ac:	1800491e 	bne	r3,zero,40038d4 <__adddf3+0x400>
 40037b0:	898bc83a 	sub	r5,r17,r6
 40037b4:	8963803a 	cmpltu	r17,r17,r5
 40037b8:	4251c83a 	sub	r8,r8,r9
 40037bc:	4451c83a 	sub	r8,r8,r17
 40037c0:	2823883a 	mov	r17,r5
 40037c4:	003f9f06 	br	4003644 <__ram_exceptions_end+0xfbfe33fc>
 40037c8:	4984b03a 	or	r2,r9,r6
 40037cc:	103f6026 	beq	r2,zero,4003550 <__ram_exceptions_end+0xfbfe3308>
 40037d0:	213fffc4 	addi	r4,r4,-1
 40037d4:	2000931e 	bne	r4,zero,4003a24 <__adddf3+0x550>
 40037d8:	898d883a 	add	r6,r17,r6
 40037dc:	3463803a 	cmpltu	r17,r6,r17
 40037e0:	4251883a 	add	r8,r8,r9
 40037e4:	8a11883a 	add	r8,r17,r8
 40037e8:	3023883a 	mov	r17,r6
 40037ec:	003fd806 	br	4003750 <__ram_exceptions_end+0xfbfe3508>
 40037f0:	1800541e 	bne	r3,zero,4003944 <__adddf3+0x470>
 40037f4:	80800044 	addi	r2,r16,1
 40037f8:	1081ffcc 	andi	r2,r2,2047
 40037fc:	00c00044 	movi	r3,1
 4003800:	1880a00e 	bge	r3,r2,4003a84 <__adddf3+0x5b0>
 4003804:	8989c83a 	sub	r4,r17,r6
 4003808:	8905803a 	cmpltu	r2,r17,r4
 400380c:	4267c83a 	sub	r19,r8,r9
 4003810:	98a7c83a 	sub	r19,r19,r2
 4003814:	9880202c 	andhi	r2,r19,128
 4003818:	10006326 	beq	r2,zero,40039a8 <__adddf3+0x4d4>
 400381c:	3463c83a 	sub	r17,r6,r17
 4003820:	4a07c83a 	sub	r3,r9,r8
 4003824:	344d803a 	cmpltu	r6,r6,r17
 4003828:	19a7c83a 	sub	r19,r3,r6
 400382c:	3825883a 	mov	r18,r7
 4003830:	983f8a1e 	bne	r19,zero,400365c <__ram_exceptions_end+0xfbfe3414>
 4003834:	8809883a 	mov	r4,r17
 4003838:	4005a4c0 	call	4005a4c <__clzsi2>
 400383c:	10800804 	addi	r2,r2,32
 4003840:	10fffe04 	addi	r3,r2,-8
 4003844:	010007c4 	movi	r4,31
 4003848:	20ff890e 	bge	r4,r3,4003670 <__ram_exceptions_end+0xfbfe3428>
 400384c:	10bff604 	addi	r2,r2,-40
 4003850:	8884983a 	sll	r2,r17,r2
 4003854:	0023883a 	mov	r17,zero
 4003858:	1c3f8c0e 	bge	r3,r16,400368c <__ram_exceptions_end+0xfbfe3444>
 400385c:	023fe034 	movhi	r8,65408
 4003860:	423fffc4 	addi	r8,r8,-1
 4003864:	80e1c83a 	sub	r16,r16,r3
 4003868:	1210703a 	and	r8,r2,r8
 400386c:	003f3806 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003870:	9007883a 	mov	r3,r18
 4003874:	0011883a 	mov	r8,zero
 4003878:	0005883a 	mov	r2,zero
 400387c:	003f4c06 	br	40035b0 <__ram_exceptions_end+0xfbfe3368>
 4003880:	498cb03a 	or	r6,r9,r6
 4003884:	300cc03a 	cmpne	r6,r6,zero
 4003888:	0007883a 	mov	r3,zero
 400388c:	003f6806 	br	4003630 <__ram_exceptions_end+0xfbfe33e8>
 4003890:	20009c1e 	bne	r4,zero,4003b04 <__adddf3+0x630>
 4003894:	80800044 	addi	r2,r16,1
 4003898:	1141ffcc 	andi	r5,r2,2047
 400389c:	01000044 	movi	r4,1
 40038a0:	2140670e 	bge	r4,r5,4003a40 <__adddf3+0x56c>
 40038a4:	0101ffc4 	movi	r4,2047
 40038a8:	11007f26 	beq	r2,r4,4003aa8 <__adddf3+0x5d4>
 40038ac:	898d883a 	add	r6,r17,r6
 40038b0:	4247883a 	add	r3,r8,r9
 40038b4:	3451803a 	cmpltu	r8,r6,r17
 40038b8:	40d1883a 	add	r8,r8,r3
 40038bc:	402297fa 	slli	r17,r8,31
 40038c0:	300cd07a 	srli	r6,r6,1
 40038c4:	4010d07a 	srli	r8,r8,1
 40038c8:	1021883a 	mov	r16,r2
 40038cc:	89a2b03a 	or	r17,r17,r6
 40038d0:	003f1f06 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 40038d4:	0081ffc4 	movi	r2,2047
 40038d8:	80bf481e 	bne	r16,r2,40035fc <__ram_exceptions_end+0xfbfe33b4>
 40038dc:	003f1c06 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 40038e0:	843ff844 	addi	r16,r16,-31
 40038e4:	01000804 	movi	r4,32
 40038e8:	1406d83a 	srl	r3,r2,r16
 40038ec:	41005026 	beq	r8,r4,4003a30 <__adddf3+0x55c>
 40038f0:	01001004 	movi	r4,64
 40038f4:	2211c83a 	sub	r8,r4,r8
 40038f8:	1204983a 	sll	r2,r2,r8
 40038fc:	88a2b03a 	or	r17,r17,r2
 4003900:	8822c03a 	cmpne	r17,r17,zero
 4003904:	1c62b03a 	or	r17,r3,r17
 4003908:	0011883a 	mov	r8,zero
 400390c:	0021883a 	mov	r16,zero
 4003910:	003f7106 	br	40036d8 <__ram_exceptions_end+0xfbfe3490>
 4003914:	193ff804 	addi	r4,r3,-32
 4003918:	00800804 	movi	r2,32
 400391c:	4908d83a 	srl	r4,r9,r4
 4003920:	18804526 	beq	r3,r2,4003a38 <__adddf3+0x564>
 4003924:	00801004 	movi	r2,64
 4003928:	10c5c83a 	sub	r2,r2,r3
 400392c:	4886983a 	sll	r3,r9,r2
 4003930:	198cb03a 	or	r6,r3,r6
 4003934:	300cc03a 	cmpne	r6,r6,zero
 4003938:	218cb03a 	or	r6,r4,r6
 400393c:	0007883a 	mov	r3,zero
 4003940:	003f3b06 	br	4003630 <__ram_exceptions_end+0xfbfe33e8>
 4003944:	80002a26 	beq	r16,zero,40039f0 <__adddf3+0x51c>
 4003948:	0101ffc4 	movi	r4,2047
 400394c:	11006826 	beq	r2,r4,4003af0 <__adddf3+0x61c>
 4003950:	00c7c83a 	sub	r3,zero,r3
 4003954:	42002034 	orhi	r8,r8,128
 4003958:	01000e04 	movi	r4,56
 400395c:	20c07c16 	blt	r4,r3,4003b50 <__adddf3+0x67c>
 4003960:	010007c4 	movi	r4,31
 4003964:	20c0da16 	blt	r4,r3,4003cd0 <__adddf3+0x7fc>
 4003968:	01000804 	movi	r4,32
 400396c:	20c9c83a 	sub	r4,r4,r3
 4003970:	4114983a 	sll	r10,r8,r4
 4003974:	88cad83a 	srl	r5,r17,r3
 4003978:	8908983a 	sll	r4,r17,r4
 400397c:	40c6d83a 	srl	r3,r8,r3
 4003980:	5162b03a 	or	r17,r10,r5
 4003984:	2008c03a 	cmpne	r4,r4,zero
 4003988:	8922b03a 	or	r17,r17,r4
 400398c:	3463c83a 	sub	r17,r6,r17
 4003990:	48c7c83a 	sub	r3,r9,r3
 4003994:	344d803a 	cmpltu	r6,r6,r17
 4003998:	1991c83a 	sub	r8,r3,r6
 400399c:	1021883a 	mov	r16,r2
 40039a0:	3825883a 	mov	r18,r7
 40039a4:	003f2706 	br	4003644 <__ram_exceptions_end+0xfbfe33fc>
 40039a8:	24d0b03a 	or	r8,r4,r19
 40039ac:	40001b1e 	bne	r8,zero,4003a1c <__adddf3+0x548>
 40039b0:	0005883a 	mov	r2,zero
 40039b4:	0007883a 	mov	r3,zero
 40039b8:	0021883a 	mov	r16,zero
 40039bc:	003f4d06 	br	40036f4 <__ram_exceptions_end+0xfbfe34ac>
 40039c0:	008007c4 	movi	r2,31
 40039c4:	11003c16 	blt	r2,r4,4003ab8 <__adddf3+0x5e4>
 40039c8:	00800804 	movi	r2,32
 40039cc:	1105c83a 	sub	r2,r2,r4
 40039d0:	488e983a 	sll	r7,r9,r2
 40039d4:	310ad83a 	srl	r5,r6,r4
 40039d8:	3084983a 	sll	r2,r6,r2
 40039dc:	4912d83a 	srl	r9,r9,r4
 40039e0:	394ab03a 	or	r5,r7,r5
 40039e4:	1004c03a 	cmpne	r2,r2,zero
 40039e8:	288ab03a 	or	r5,r5,r2
 40039ec:	003f5306 	br	400373c <__ram_exceptions_end+0xfbfe34f4>
 40039f0:	4448b03a 	or	r4,r8,r17
 40039f4:	20003e26 	beq	r4,zero,4003af0 <__adddf3+0x61c>
 40039f8:	00c6303a 	nor	r3,zero,r3
 40039fc:	18003a1e 	bne	r3,zero,4003ae8 <__adddf3+0x614>
 4003a00:	3463c83a 	sub	r17,r6,r17
 4003a04:	4a07c83a 	sub	r3,r9,r8
 4003a08:	344d803a 	cmpltu	r6,r6,r17
 4003a0c:	1991c83a 	sub	r8,r3,r6
 4003a10:	1021883a 	mov	r16,r2
 4003a14:	3825883a 	mov	r18,r7
 4003a18:	003f0a06 	br	4003644 <__ram_exceptions_end+0xfbfe33fc>
 4003a1c:	2023883a 	mov	r17,r4
 4003a20:	003f0d06 	br	4003658 <__ram_exceptions_end+0xfbfe3410>
 4003a24:	0081ffc4 	movi	r2,2047
 4003a28:	80bf3f1e 	bne	r16,r2,4003728 <__ram_exceptions_end+0xfbfe34e0>
 4003a2c:	003ec806 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003a30:	0005883a 	mov	r2,zero
 4003a34:	003fb106 	br	40038fc <__ram_exceptions_end+0xfbfe36b4>
 4003a38:	0007883a 	mov	r3,zero
 4003a3c:	003fbc06 	br	4003930 <__ram_exceptions_end+0xfbfe36e8>
 4003a40:	4444b03a 	or	r2,r8,r17
 4003a44:	8000871e 	bne	r16,zero,4003c64 <__adddf3+0x790>
 4003a48:	1000ba26 	beq	r2,zero,4003d34 <__adddf3+0x860>
 4003a4c:	4984b03a 	or	r2,r9,r6
 4003a50:	103ebf26 	beq	r2,zero,4003550 <__ram_exceptions_end+0xfbfe3308>
 4003a54:	8985883a 	add	r2,r17,r6
 4003a58:	4247883a 	add	r3,r8,r9
 4003a5c:	1451803a 	cmpltu	r8,r2,r17
 4003a60:	40d1883a 	add	r8,r8,r3
 4003a64:	40c0202c 	andhi	r3,r8,128
 4003a68:	1023883a 	mov	r17,r2
 4003a6c:	183f1a26 	beq	r3,zero,40036d8 <__ram_exceptions_end+0xfbfe3490>
 4003a70:	00bfe034 	movhi	r2,65408
 4003a74:	10bfffc4 	addi	r2,r2,-1
 4003a78:	2021883a 	mov	r16,r4
 4003a7c:	4090703a 	and	r8,r8,r2
 4003a80:	003eb306 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003a84:	4444b03a 	or	r2,r8,r17
 4003a88:	8000291e 	bne	r16,zero,4003b30 <__adddf3+0x65c>
 4003a8c:	10004b1e 	bne	r2,zero,4003bbc <__adddf3+0x6e8>
 4003a90:	4990b03a 	or	r8,r9,r6
 4003a94:	40008b26 	beq	r8,zero,4003cc4 <__adddf3+0x7f0>
 4003a98:	4811883a 	mov	r8,r9
 4003a9c:	3023883a 	mov	r17,r6
 4003aa0:	3825883a 	mov	r18,r7
 4003aa4:	003eaa06 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003aa8:	1021883a 	mov	r16,r2
 4003aac:	0011883a 	mov	r8,zero
 4003ab0:	0005883a 	mov	r2,zero
 4003ab4:	003f0f06 	br	40036f4 <__ram_exceptions_end+0xfbfe34ac>
 4003ab8:	217ff804 	addi	r5,r4,-32
 4003abc:	00800804 	movi	r2,32
 4003ac0:	494ad83a 	srl	r5,r9,r5
 4003ac4:	20807d26 	beq	r4,r2,4003cbc <__adddf3+0x7e8>
 4003ac8:	00801004 	movi	r2,64
 4003acc:	1109c83a 	sub	r4,r2,r4
 4003ad0:	4912983a 	sll	r9,r9,r4
 4003ad4:	498cb03a 	or	r6,r9,r6
 4003ad8:	300cc03a 	cmpne	r6,r6,zero
 4003adc:	298ab03a 	or	r5,r5,r6
 4003ae0:	0013883a 	mov	r9,zero
 4003ae4:	003f1506 	br	400373c <__ram_exceptions_end+0xfbfe34f4>
 4003ae8:	0101ffc4 	movi	r4,2047
 4003aec:	113f9a1e 	bne	r2,r4,4003958 <__ram_exceptions_end+0xfbfe3710>
 4003af0:	4811883a 	mov	r8,r9
 4003af4:	3023883a 	mov	r17,r6
 4003af8:	1021883a 	mov	r16,r2
 4003afc:	3825883a 	mov	r18,r7
 4003b00:	003e9306 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003b04:	8000161e 	bne	r16,zero,4003b60 <__adddf3+0x68c>
 4003b08:	444ab03a 	or	r5,r8,r17
 4003b0c:	28005126 	beq	r5,zero,4003c54 <__adddf3+0x780>
 4003b10:	0108303a 	nor	r4,zero,r4
 4003b14:	20004d1e 	bne	r4,zero,4003c4c <__adddf3+0x778>
 4003b18:	89a3883a 	add	r17,r17,r6
 4003b1c:	4253883a 	add	r9,r8,r9
 4003b20:	898d803a 	cmpltu	r6,r17,r6
 4003b24:	3251883a 	add	r8,r6,r9
 4003b28:	1021883a 	mov	r16,r2
 4003b2c:	003f0806 	br	4003750 <__ram_exceptions_end+0xfbfe3508>
 4003b30:	1000301e 	bne	r2,zero,4003bf4 <__adddf3+0x720>
 4003b34:	4984b03a 	or	r2,r9,r6
 4003b38:	10007126 	beq	r2,zero,4003d00 <__adddf3+0x82c>
 4003b3c:	4811883a 	mov	r8,r9
 4003b40:	3023883a 	mov	r17,r6
 4003b44:	3825883a 	mov	r18,r7
 4003b48:	0401ffc4 	movi	r16,2047
 4003b4c:	003e8006 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003b50:	4462b03a 	or	r17,r8,r17
 4003b54:	8822c03a 	cmpne	r17,r17,zero
 4003b58:	0007883a 	mov	r3,zero
 4003b5c:	003f8b06 	br	400398c <__ram_exceptions_end+0xfbfe3744>
 4003b60:	0141ffc4 	movi	r5,2047
 4003b64:	11403b26 	beq	r2,r5,4003c54 <__adddf3+0x780>
 4003b68:	0109c83a 	sub	r4,zero,r4
 4003b6c:	42002034 	orhi	r8,r8,128
 4003b70:	01400e04 	movi	r5,56
 4003b74:	29006716 	blt	r5,r4,4003d14 <__adddf3+0x840>
 4003b78:	014007c4 	movi	r5,31
 4003b7c:	29007016 	blt	r5,r4,4003d40 <__adddf3+0x86c>
 4003b80:	01400804 	movi	r5,32
 4003b84:	290bc83a 	sub	r5,r5,r4
 4003b88:	4154983a 	sll	r10,r8,r5
 4003b8c:	890ed83a 	srl	r7,r17,r4
 4003b90:	894a983a 	sll	r5,r17,r5
 4003b94:	4108d83a 	srl	r4,r8,r4
 4003b98:	51e2b03a 	or	r17,r10,r7
 4003b9c:	280ac03a 	cmpne	r5,r5,zero
 4003ba0:	8962b03a 	or	r17,r17,r5
 4003ba4:	89a3883a 	add	r17,r17,r6
 4003ba8:	2253883a 	add	r9,r4,r9
 4003bac:	898d803a 	cmpltu	r6,r17,r6
 4003bb0:	3251883a 	add	r8,r6,r9
 4003bb4:	1021883a 	mov	r16,r2
 4003bb8:	003ee506 	br	4003750 <__ram_exceptions_end+0xfbfe3508>
 4003bbc:	4984b03a 	or	r2,r9,r6
 4003bc0:	103e6326 	beq	r2,zero,4003550 <__ram_exceptions_end+0xfbfe3308>
 4003bc4:	8987c83a 	sub	r3,r17,r6
 4003bc8:	88c9803a 	cmpltu	r4,r17,r3
 4003bcc:	4245c83a 	sub	r2,r8,r9
 4003bd0:	1105c83a 	sub	r2,r2,r4
 4003bd4:	1100202c 	andhi	r4,r2,128
 4003bd8:	203ebb26 	beq	r4,zero,40036c8 <__ram_exceptions_end+0xfbfe3480>
 4003bdc:	3463c83a 	sub	r17,r6,r17
 4003be0:	4a07c83a 	sub	r3,r9,r8
 4003be4:	344d803a 	cmpltu	r6,r6,r17
 4003be8:	1991c83a 	sub	r8,r3,r6
 4003bec:	3825883a 	mov	r18,r7
 4003bf0:	003e5706 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003bf4:	4984b03a 	or	r2,r9,r6
 4003bf8:	10002e26 	beq	r2,zero,4003cb4 <__adddf3+0x7e0>
 4003bfc:	4004d0fa 	srli	r2,r8,3
 4003c00:	8822d0fa 	srli	r17,r17,3
 4003c04:	4010977a 	slli	r8,r8,29
 4003c08:	10c0022c 	andhi	r3,r2,8
 4003c0c:	4462b03a 	or	r17,r8,r17
 4003c10:	18000826 	beq	r3,zero,4003c34 <__adddf3+0x760>
 4003c14:	4808d0fa 	srli	r4,r9,3
 4003c18:	20c0022c 	andhi	r3,r4,8
 4003c1c:	1800051e 	bne	r3,zero,4003c34 <__adddf3+0x760>
 4003c20:	300cd0fa 	srli	r6,r6,3
 4003c24:	4806977a 	slli	r3,r9,29
 4003c28:	2005883a 	mov	r2,r4
 4003c2c:	3825883a 	mov	r18,r7
 4003c30:	19a2b03a 	or	r17,r3,r6
 4003c34:	8810d77a 	srli	r8,r17,29
 4003c38:	100490fa 	slli	r2,r2,3
 4003c3c:	882290fa 	slli	r17,r17,3
 4003c40:	0401ffc4 	movi	r16,2047
 4003c44:	4090b03a 	or	r8,r8,r2
 4003c48:	003e4106 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003c4c:	0141ffc4 	movi	r5,2047
 4003c50:	117fc71e 	bne	r2,r5,4003b70 <__ram_exceptions_end+0xfbfe3928>
 4003c54:	4811883a 	mov	r8,r9
 4003c58:	3023883a 	mov	r17,r6
 4003c5c:	1021883a 	mov	r16,r2
 4003c60:	003e3b06 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003c64:	10002f26 	beq	r2,zero,4003d24 <__adddf3+0x850>
 4003c68:	4984b03a 	or	r2,r9,r6
 4003c6c:	10001126 	beq	r2,zero,4003cb4 <__adddf3+0x7e0>
 4003c70:	4004d0fa 	srli	r2,r8,3
 4003c74:	8822d0fa 	srli	r17,r17,3
 4003c78:	4010977a 	slli	r8,r8,29
 4003c7c:	10c0022c 	andhi	r3,r2,8
 4003c80:	4462b03a 	or	r17,r8,r17
 4003c84:	183feb26 	beq	r3,zero,4003c34 <__ram_exceptions_end+0xfbfe39ec>
 4003c88:	4808d0fa 	srli	r4,r9,3
 4003c8c:	20c0022c 	andhi	r3,r4,8
 4003c90:	183fe81e 	bne	r3,zero,4003c34 <__ram_exceptions_end+0xfbfe39ec>
 4003c94:	300cd0fa 	srli	r6,r6,3
 4003c98:	4806977a 	slli	r3,r9,29
 4003c9c:	2005883a 	mov	r2,r4
 4003ca0:	19a2b03a 	or	r17,r3,r6
 4003ca4:	003fe306 	br	4003c34 <__ram_exceptions_end+0xfbfe39ec>
 4003ca8:	0011883a 	mov	r8,zero
 4003cac:	0005883a 	mov	r2,zero
 4003cb0:	003e3f06 	br	40035b0 <__ram_exceptions_end+0xfbfe3368>
 4003cb4:	0401ffc4 	movi	r16,2047
 4003cb8:	003e2506 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003cbc:	0013883a 	mov	r9,zero
 4003cc0:	003f8406 	br	4003ad4 <__ram_exceptions_end+0xfbfe388c>
 4003cc4:	0005883a 	mov	r2,zero
 4003cc8:	0007883a 	mov	r3,zero
 4003ccc:	003e8906 	br	40036f4 <__ram_exceptions_end+0xfbfe34ac>
 4003cd0:	197ff804 	addi	r5,r3,-32
 4003cd4:	01000804 	movi	r4,32
 4003cd8:	414ad83a 	srl	r5,r8,r5
 4003cdc:	19002426 	beq	r3,r4,4003d70 <__adddf3+0x89c>
 4003ce0:	01001004 	movi	r4,64
 4003ce4:	20c7c83a 	sub	r3,r4,r3
 4003ce8:	40c6983a 	sll	r3,r8,r3
 4003cec:	1c46b03a 	or	r3,r3,r17
 4003cf0:	1806c03a 	cmpne	r3,r3,zero
 4003cf4:	28e2b03a 	or	r17,r5,r3
 4003cf8:	0007883a 	mov	r3,zero
 4003cfc:	003f2306 	br	400398c <__ram_exceptions_end+0xfbfe3744>
 4003d00:	0007883a 	mov	r3,zero
 4003d04:	5811883a 	mov	r8,r11
 4003d08:	00bfffc4 	movi	r2,-1
 4003d0c:	0401ffc4 	movi	r16,2047
 4003d10:	003e7806 	br	40036f4 <__ram_exceptions_end+0xfbfe34ac>
 4003d14:	4462b03a 	or	r17,r8,r17
 4003d18:	8822c03a 	cmpne	r17,r17,zero
 4003d1c:	0009883a 	mov	r4,zero
 4003d20:	003fa006 	br	4003ba4 <__ram_exceptions_end+0xfbfe395c>
 4003d24:	4811883a 	mov	r8,r9
 4003d28:	3023883a 	mov	r17,r6
 4003d2c:	0401ffc4 	movi	r16,2047
 4003d30:	003e0706 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003d34:	4811883a 	mov	r8,r9
 4003d38:	3023883a 	mov	r17,r6
 4003d3c:	003e0406 	br	4003550 <__ram_exceptions_end+0xfbfe3308>
 4003d40:	21fff804 	addi	r7,r4,-32
 4003d44:	01400804 	movi	r5,32
 4003d48:	41ced83a 	srl	r7,r8,r7
 4003d4c:	21400a26 	beq	r4,r5,4003d78 <__adddf3+0x8a4>
 4003d50:	01401004 	movi	r5,64
 4003d54:	2909c83a 	sub	r4,r5,r4
 4003d58:	4108983a 	sll	r4,r8,r4
 4003d5c:	2448b03a 	or	r4,r4,r17
 4003d60:	2008c03a 	cmpne	r4,r4,zero
 4003d64:	3922b03a 	or	r17,r7,r4
 4003d68:	0009883a 	mov	r4,zero
 4003d6c:	003f8d06 	br	4003ba4 <__ram_exceptions_end+0xfbfe395c>
 4003d70:	0007883a 	mov	r3,zero
 4003d74:	003fdd06 	br	4003cec <__ram_exceptions_end+0xfbfe3aa4>
 4003d78:	0009883a 	mov	r4,zero
 4003d7c:	003ff706 	br	4003d5c <__ram_exceptions_end+0xfbfe3b14>

04003d80 <__divdf3>:
 4003d80:	defff204 	addi	sp,sp,-56
 4003d84:	dd400915 	stw	r21,36(sp)
 4003d88:	282ad53a 	srli	r21,r5,20
 4003d8c:	dd000815 	stw	r20,32(sp)
 4003d90:	2828d7fa 	srli	r20,r5,31
 4003d94:	dc000415 	stw	r16,16(sp)
 4003d98:	04000434 	movhi	r16,16
 4003d9c:	df000c15 	stw	fp,48(sp)
 4003da0:	843fffc4 	addi	r16,r16,-1
 4003da4:	dfc00d15 	stw	ra,52(sp)
 4003da8:	ddc00b15 	stw	r23,44(sp)
 4003dac:	dd800a15 	stw	r22,40(sp)
 4003db0:	dcc00715 	stw	r19,28(sp)
 4003db4:	dc800615 	stw	r18,24(sp)
 4003db8:	dc400515 	stw	r17,20(sp)
 4003dbc:	ad41ffcc 	andi	r21,r21,2047
 4003dc0:	2c20703a 	and	r16,r5,r16
 4003dc4:	a7003fcc 	andi	fp,r20,255
 4003dc8:	a8006126 	beq	r21,zero,4003f50 <__divdf3+0x1d0>
 4003dcc:	0081ffc4 	movi	r2,2047
 4003dd0:	2025883a 	mov	r18,r4
 4003dd4:	a8803726 	beq	r21,r2,4003eb4 <__divdf3+0x134>
 4003dd8:	80800434 	orhi	r2,r16,16
 4003ddc:	100490fa 	slli	r2,r2,3
 4003de0:	2020d77a 	srli	r16,r4,29
 4003de4:	202490fa 	slli	r18,r4,3
 4003de8:	ad7f0044 	addi	r21,r21,-1023
 4003dec:	80a0b03a 	or	r16,r16,r2
 4003df0:	0027883a 	mov	r19,zero
 4003df4:	0013883a 	mov	r9,zero
 4003df8:	3804d53a 	srli	r2,r7,20
 4003dfc:	382cd7fa 	srli	r22,r7,31
 4003e00:	04400434 	movhi	r17,16
 4003e04:	8c7fffc4 	addi	r17,r17,-1
 4003e08:	1081ffcc 	andi	r2,r2,2047
 4003e0c:	3011883a 	mov	r8,r6
 4003e10:	3c62703a 	and	r17,r7,r17
 4003e14:	b5c03fcc 	andi	r23,r22,255
 4003e18:	10006c26 	beq	r2,zero,4003fcc <__divdf3+0x24c>
 4003e1c:	00c1ffc4 	movi	r3,2047
 4003e20:	10c06426 	beq	r2,r3,4003fb4 <__divdf3+0x234>
 4003e24:	88c00434 	orhi	r3,r17,16
 4003e28:	180690fa 	slli	r3,r3,3
 4003e2c:	3022d77a 	srli	r17,r6,29
 4003e30:	301090fa 	slli	r8,r6,3
 4003e34:	10bf0044 	addi	r2,r2,-1023
 4003e38:	88e2b03a 	or	r17,r17,r3
 4003e3c:	000f883a 	mov	r7,zero
 4003e40:	a58cf03a 	xor	r6,r20,r22
 4003e44:	3cc8b03a 	or	r4,r7,r19
 4003e48:	a8abc83a 	sub	r21,r21,r2
 4003e4c:	008003c4 	movi	r2,15
 4003e50:	3007883a 	mov	r3,r6
 4003e54:	34c03fcc 	andi	r19,r6,255
 4003e58:	11009036 	bltu	r2,r4,400409c <__divdf3+0x31c>
 4003e5c:	200890ba 	slli	r4,r4,2
 4003e60:	00810034 	movhi	r2,1024
 4003e64:	108f9d04 	addi	r2,r2,15988
 4003e68:	2089883a 	add	r4,r4,r2
 4003e6c:	20800017 	ldw	r2,0(r4)
 4003e70:	1000683a 	jmp	r2
 4003e74:	0400409c 	xori	r16,zero,258
 4003e78:	04003eec 	andhi	r16,zero,251
 4003e7c:	0400408c 	andi	r16,zero,258
 4003e80:	04003ee0 	cmpeqi	r16,zero,251
 4003e84:	0400408c 	andi	r16,zero,258
 4003e88:	04004060 	cmpeqi	r16,zero,257
 4003e8c:	0400408c 	andi	r16,zero,258
 4003e90:	04003ee0 	cmpeqi	r16,zero,251
 4003e94:	04003eec 	andhi	r16,zero,251
 4003e98:	04003eec 	andhi	r16,zero,251
 4003e9c:	04004060 	cmpeqi	r16,zero,257
 4003ea0:	04003ee0 	cmpeqi	r16,zero,251
 4003ea4:	04003ed0 	cmplti	r16,zero,251
 4003ea8:	04003ed0 	cmplti	r16,zero,251
 4003eac:	04003ed0 	cmplti	r16,zero,251
 4003eb0:	04004380 	call	400438 <__alt_mem_SDRAM_controller-0x3bffbc8>
 4003eb4:	2404b03a 	or	r2,r4,r16
 4003eb8:	1000661e 	bne	r2,zero,4004054 <__divdf3+0x2d4>
 4003ebc:	04c00204 	movi	r19,8
 4003ec0:	0021883a 	mov	r16,zero
 4003ec4:	0025883a 	mov	r18,zero
 4003ec8:	02400084 	movi	r9,2
 4003ecc:	003fca06 	br	4003df8 <__ram_exceptions_end+0xfbfe3bb0>
 4003ed0:	8023883a 	mov	r17,r16
 4003ed4:	9011883a 	mov	r8,r18
 4003ed8:	e02f883a 	mov	r23,fp
 4003edc:	480f883a 	mov	r7,r9
 4003ee0:	00800084 	movi	r2,2
 4003ee4:	3881311e 	bne	r7,r2,40043ac <__divdf3+0x62c>
 4003ee8:	b827883a 	mov	r19,r23
 4003eec:	98c0004c 	andi	r3,r19,1
 4003ef0:	0081ffc4 	movi	r2,2047
 4003ef4:	000b883a 	mov	r5,zero
 4003ef8:	0025883a 	mov	r18,zero
 4003efc:	1004953a 	slli	r2,r2,20
 4003f00:	18c03fcc 	andi	r3,r3,255
 4003f04:	04400434 	movhi	r17,16
 4003f08:	8c7fffc4 	addi	r17,r17,-1
 4003f0c:	180697fa 	slli	r3,r3,31
 4003f10:	2c4a703a 	and	r5,r5,r17
 4003f14:	288ab03a 	or	r5,r5,r2
 4003f18:	28c6b03a 	or	r3,r5,r3
 4003f1c:	9005883a 	mov	r2,r18
 4003f20:	dfc00d17 	ldw	ra,52(sp)
 4003f24:	df000c17 	ldw	fp,48(sp)
 4003f28:	ddc00b17 	ldw	r23,44(sp)
 4003f2c:	dd800a17 	ldw	r22,40(sp)
 4003f30:	dd400917 	ldw	r21,36(sp)
 4003f34:	dd000817 	ldw	r20,32(sp)
 4003f38:	dcc00717 	ldw	r19,28(sp)
 4003f3c:	dc800617 	ldw	r18,24(sp)
 4003f40:	dc400517 	ldw	r17,20(sp)
 4003f44:	dc000417 	ldw	r16,16(sp)
 4003f48:	dec00e04 	addi	sp,sp,56
 4003f4c:	f800283a 	ret
 4003f50:	2404b03a 	or	r2,r4,r16
 4003f54:	2027883a 	mov	r19,r4
 4003f58:	10003926 	beq	r2,zero,4004040 <__divdf3+0x2c0>
 4003f5c:	80012e26 	beq	r16,zero,4004418 <__divdf3+0x698>
 4003f60:	8009883a 	mov	r4,r16
 4003f64:	d9800315 	stw	r6,12(sp)
 4003f68:	d9c00215 	stw	r7,8(sp)
 4003f6c:	4005a4c0 	call	4005a4c <__clzsi2>
 4003f70:	d9800317 	ldw	r6,12(sp)
 4003f74:	d9c00217 	ldw	r7,8(sp)
 4003f78:	113ffd44 	addi	r4,r2,-11
 4003f7c:	00c00704 	movi	r3,28
 4003f80:	19012116 	blt	r3,r4,4004408 <__divdf3+0x688>
 4003f84:	00c00744 	movi	r3,29
 4003f88:	147ffe04 	addi	r17,r2,-8
 4003f8c:	1907c83a 	sub	r3,r3,r4
 4003f90:	8460983a 	sll	r16,r16,r17
 4003f94:	98c6d83a 	srl	r3,r19,r3
 4003f98:	9c64983a 	sll	r18,r19,r17
 4003f9c:	1c20b03a 	or	r16,r3,r16
 4003fa0:	1080fcc4 	addi	r2,r2,1011
 4003fa4:	00abc83a 	sub	r21,zero,r2
 4003fa8:	0027883a 	mov	r19,zero
 4003fac:	0013883a 	mov	r9,zero
 4003fb0:	003f9106 	br	4003df8 <__ram_exceptions_end+0xfbfe3bb0>
 4003fb4:	3446b03a 	or	r3,r6,r17
 4003fb8:	18001f1e 	bne	r3,zero,4004038 <__divdf3+0x2b8>
 4003fbc:	0023883a 	mov	r17,zero
 4003fc0:	0011883a 	mov	r8,zero
 4003fc4:	01c00084 	movi	r7,2
 4003fc8:	003f9d06 	br	4003e40 <__ram_exceptions_end+0xfbfe3bf8>
 4003fcc:	3446b03a 	or	r3,r6,r17
 4003fd0:	18001526 	beq	r3,zero,4004028 <__divdf3+0x2a8>
 4003fd4:	88011b26 	beq	r17,zero,4004444 <__divdf3+0x6c4>
 4003fd8:	8809883a 	mov	r4,r17
 4003fdc:	d9800315 	stw	r6,12(sp)
 4003fe0:	da400115 	stw	r9,4(sp)
 4003fe4:	4005a4c0 	call	4005a4c <__clzsi2>
 4003fe8:	d9800317 	ldw	r6,12(sp)
 4003fec:	da400117 	ldw	r9,4(sp)
 4003ff0:	113ffd44 	addi	r4,r2,-11
 4003ff4:	00c00704 	movi	r3,28
 4003ff8:	19010e16 	blt	r3,r4,4004434 <__divdf3+0x6b4>
 4003ffc:	00c00744 	movi	r3,29
 4004000:	123ffe04 	addi	r8,r2,-8
 4004004:	1907c83a 	sub	r3,r3,r4
 4004008:	8a22983a 	sll	r17,r17,r8
 400400c:	30c6d83a 	srl	r3,r6,r3
 4004010:	3210983a 	sll	r8,r6,r8
 4004014:	1c62b03a 	or	r17,r3,r17
 4004018:	1080fcc4 	addi	r2,r2,1011
 400401c:	0085c83a 	sub	r2,zero,r2
 4004020:	000f883a 	mov	r7,zero
 4004024:	003f8606 	br	4003e40 <__ram_exceptions_end+0xfbfe3bf8>
 4004028:	0023883a 	mov	r17,zero
 400402c:	0011883a 	mov	r8,zero
 4004030:	01c00044 	movi	r7,1
 4004034:	003f8206 	br	4003e40 <__ram_exceptions_end+0xfbfe3bf8>
 4004038:	01c000c4 	movi	r7,3
 400403c:	003f8006 	br	4003e40 <__ram_exceptions_end+0xfbfe3bf8>
 4004040:	04c00104 	movi	r19,4
 4004044:	0021883a 	mov	r16,zero
 4004048:	0025883a 	mov	r18,zero
 400404c:	02400044 	movi	r9,1
 4004050:	003f6906 	br	4003df8 <__ram_exceptions_end+0xfbfe3bb0>
 4004054:	04c00304 	movi	r19,12
 4004058:	024000c4 	movi	r9,3
 400405c:	003f6606 	br	4003df8 <__ram_exceptions_end+0xfbfe3bb0>
 4004060:	01400434 	movhi	r5,16
 4004064:	0007883a 	mov	r3,zero
 4004068:	297fffc4 	addi	r5,r5,-1
 400406c:	04bfffc4 	movi	r18,-1
 4004070:	0081ffc4 	movi	r2,2047
 4004074:	003fa106 	br	4003efc <__ram_exceptions_end+0xfbfe3cb4>
 4004078:	00c00044 	movi	r3,1
 400407c:	1887c83a 	sub	r3,r3,r2
 4004080:	01000e04 	movi	r4,56
 4004084:	20c1210e 	bge	r4,r3,400450c <__divdf3+0x78c>
 4004088:	98c0004c 	andi	r3,r19,1
 400408c:	0005883a 	mov	r2,zero
 4004090:	000b883a 	mov	r5,zero
 4004094:	0025883a 	mov	r18,zero
 4004098:	003f9806 	br	4003efc <__ram_exceptions_end+0xfbfe3cb4>
 400409c:	8c00fd36 	bltu	r17,r16,4004494 <__divdf3+0x714>
 40040a0:	8440fb26 	beq	r16,r17,4004490 <__divdf3+0x710>
 40040a4:	8007883a 	mov	r3,r16
 40040a8:	ad7fffc4 	addi	r21,r21,-1
 40040ac:	0021883a 	mov	r16,zero
 40040b0:	4004d63a 	srli	r2,r8,24
 40040b4:	8822923a 	slli	r17,r17,8
 40040b8:	1809883a 	mov	r4,r3
 40040bc:	402c923a 	slli	r22,r8,8
 40040c0:	88b8b03a 	or	fp,r17,r2
 40040c4:	e028d43a 	srli	r20,fp,16
 40040c8:	d8c00015 	stw	r3,0(sp)
 40040cc:	e5ffffcc 	andi	r23,fp,65535
 40040d0:	a00b883a 	mov	r5,r20
 40040d4:	4002a480 	call	4002a48 <__udivsi3>
 40040d8:	d8c00017 	ldw	r3,0(sp)
 40040dc:	a00b883a 	mov	r5,r20
 40040e0:	d8800315 	stw	r2,12(sp)
 40040e4:	1809883a 	mov	r4,r3
 40040e8:	4002aac0 	call	4002aac <__umodsi3>
 40040ec:	d9800317 	ldw	r6,12(sp)
 40040f0:	1006943a 	slli	r3,r2,16
 40040f4:	9004d43a 	srli	r2,r18,16
 40040f8:	b9a3383a 	mul	r17,r23,r6
 40040fc:	10c4b03a 	or	r2,r2,r3
 4004100:	1440062e 	bgeu	r2,r17,400411c <__divdf3+0x39c>
 4004104:	1705883a 	add	r2,r2,fp
 4004108:	30ffffc4 	addi	r3,r6,-1
 400410c:	1700ee36 	bltu	r2,fp,40044c8 <__divdf3+0x748>
 4004110:	1440ed2e 	bgeu	r2,r17,40044c8 <__divdf3+0x748>
 4004114:	31bfff84 	addi	r6,r6,-2
 4004118:	1705883a 	add	r2,r2,fp
 400411c:	1463c83a 	sub	r17,r2,r17
 4004120:	a00b883a 	mov	r5,r20
 4004124:	8809883a 	mov	r4,r17
 4004128:	d9800315 	stw	r6,12(sp)
 400412c:	4002a480 	call	4002a48 <__udivsi3>
 4004130:	a00b883a 	mov	r5,r20
 4004134:	8809883a 	mov	r4,r17
 4004138:	d8800215 	stw	r2,8(sp)
 400413c:	4002aac0 	call	4002aac <__umodsi3>
 4004140:	d9c00217 	ldw	r7,8(sp)
 4004144:	1004943a 	slli	r2,r2,16
 4004148:	94bfffcc 	andi	r18,r18,65535
 400414c:	b9d1383a 	mul	r8,r23,r7
 4004150:	90a4b03a 	or	r18,r18,r2
 4004154:	d9800317 	ldw	r6,12(sp)
 4004158:	9200062e 	bgeu	r18,r8,4004174 <__divdf3+0x3f4>
 400415c:	9725883a 	add	r18,r18,fp
 4004160:	38bfffc4 	addi	r2,r7,-1
 4004164:	9700d636 	bltu	r18,fp,40044c0 <__divdf3+0x740>
 4004168:	9200d52e 	bgeu	r18,r8,40044c0 <__divdf3+0x740>
 400416c:	39ffff84 	addi	r7,r7,-2
 4004170:	9725883a 	add	r18,r18,fp
 4004174:	3004943a 	slli	r2,r6,16
 4004178:	b012d43a 	srli	r9,r22,16
 400417c:	b1bfffcc 	andi	r6,r22,65535
 4004180:	11e2b03a 	or	r17,r2,r7
 4004184:	8806d43a 	srli	r3,r17,16
 4004188:	893fffcc 	andi	r4,r17,65535
 400418c:	218b383a 	mul	r5,r4,r6
 4004190:	30c5383a 	mul	r2,r6,r3
 4004194:	2249383a 	mul	r4,r4,r9
 4004198:	280ed43a 	srli	r7,r5,16
 400419c:	9225c83a 	sub	r18,r18,r8
 40041a0:	2089883a 	add	r4,r4,r2
 40041a4:	3909883a 	add	r4,r7,r4
 40041a8:	1a47383a 	mul	r3,r3,r9
 40041ac:	2080022e 	bgeu	r4,r2,40041b8 <__divdf3+0x438>
 40041b0:	00800074 	movhi	r2,1
 40041b4:	1887883a 	add	r3,r3,r2
 40041b8:	2004d43a 	srli	r2,r4,16
 40041bc:	2008943a 	slli	r4,r4,16
 40041c0:	297fffcc 	andi	r5,r5,65535
 40041c4:	10c7883a 	add	r3,r2,r3
 40041c8:	2149883a 	add	r4,r4,r5
 40041cc:	90c0a536 	bltu	r18,r3,4004464 <__divdf3+0x6e4>
 40041d0:	90c0bf26 	beq	r18,r3,40044d0 <__divdf3+0x750>
 40041d4:	90c7c83a 	sub	r3,r18,r3
 40041d8:	810fc83a 	sub	r7,r16,r4
 40041dc:	81e5803a 	cmpltu	r18,r16,r7
 40041e0:	1ca5c83a 	sub	r18,r3,r18
 40041e4:	e480c126 	beq	fp,r18,40044ec <__divdf3+0x76c>
 40041e8:	a00b883a 	mov	r5,r20
 40041ec:	9009883a 	mov	r4,r18
 40041f0:	d9800315 	stw	r6,12(sp)
 40041f4:	d9c00215 	stw	r7,8(sp)
 40041f8:	da400115 	stw	r9,4(sp)
 40041fc:	4002a480 	call	4002a48 <__udivsi3>
 4004200:	a00b883a 	mov	r5,r20
 4004204:	9009883a 	mov	r4,r18
 4004208:	d8800015 	stw	r2,0(sp)
 400420c:	4002aac0 	call	4002aac <__umodsi3>
 4004210:	d9c00217 	ldw	r7,8(sp)
 4004214:	da000017 	ldw	r8,0(sp)
 4004218:	1006943a 	slli	r3,r2,16
 400421c:	3804d43a 	srli	r2,r7,16
 4004220:	ba21383a 	mul	r16,r23,r8
 4004224:	d9800317 	ldw	r6,12(sp)
 4004228:	10c4b03a 	or	r2,r2,r3
 400422c:	da400117 	ldw	r9,4(sp)
 4004230:	1400062e 	bgeu	r2,r16,400424c <__divdf3+0x4cc>
 4004234:	1705883a 	add	r2,r2,fp
 4004238:	40ffffc4 	addi	r3,r8,-1
 400423c:	1700ad36 	bltu	r2,fp,40044f4 <__divdf3+0x774>
 4004240:	1400ac2e 	bgeu	r2,r16,40044f4 <__divdf3+0x774>
 4004244:	423fff84 	addi	r8,r8,-2
 4004248:	1705883a 	add	r2,r2,fp
 400424c:	1421c83a 	sub	r16,r2,r16
 4004250:	a00b883a 	mov	r5,r20
 4004254:	8009883a 	mov	r4,r16
 4004258:	d9800315 	stw	r6,12(sp)
 400425c:	d9c00215 	stw	r7,8(sp)
 4004260:	da000015 	stw	r8,0(sp)
 4004264:	da400115 	stw	r9,4(sp)
 4004268:	4002a480 	call	4002a48 <__udivsi3>
 400426c:	8009883a 	mov	r4,r16
 4004270:	a00b883a 	mov	r5,r20
 4004274:	1025883a 	mov	r18,r2
 4004278:	4002aac0 	call	4002aac <__umodsi3>
 400427c:	d9c00217 	ldw	r7,8(sp)
 4004280:	1004943a 	slli	r2,r2,16
 4004284:	bcaf383a 	mul	r23,r23,r18
 4004288:	393fffcc 	andi	r4,r7,65535
 400428c:	2088b03a 	or	r4,r4,r2
 4004290:	d9800317 	ldw	r6,12(sp)
 4004294:	da000017 	ldw	r8,0(sp)
 4004298:	da400117 	ldw	r9,4(sp)
 400429c:	25c0062e 	bgeu	r4,r23,40042b8 <__divdf3+0x538>
 40042a0:	2709883a 	add	r4,r4,fp
 40042a4:	90bfffc4 	addi	r2,r18,-1
 40042a8:	27009436 	bltu	r4,fp,40044fc <__divdf3+0x77c>
 40042ac:	25c0932e 	bgeu	r4,r23,40044fc <__divdf3+0x77c>
 40042b0:	94bfff84 	addi	r18,r18,-2
 40042b4:	2709883a 	add	r4,r4,fp
 40042b8:	4004943a 	slli	r2,r8,16
 40042bc:	25efc83a 	sub	r23,r4,r23
 40042c0:	1490b03a 	or	r8,r2,r18
 40042c4:	4008d43a 	srli	r4,r8,16
 40042c8:	40ffffcc 	andi	r3,r8,65535
 40042cc:	30c5383a 	mul	r2,r6,r3
 40042d0:	1a47383a 	mul	r3,r3,r9
 40042d4:	310d383a 	mul	r6,r6,r4
 40042d8:	100ad43a 	srli	r5,r2,16
 40042dc:	4913383a 	mul	r9,r9,r4
 40042e0:	1987883a 	add	r3,r3,r6
 40042e4:	28c7883a 	add	r3,r5,r3
 40042e8:	1980022e 	bgeu	r3,r6,40042f4 <__divdf3+0x574>
 40042ec:	01000074 	movhi	r4,1
 40042f0:	4913883a 	add	r9,r9,r4
 40042f4:	1808d43a 	srli	r4,r3,16
 40042f8:	1806943a 	slli	r3,r3,16
 40042fc:	10bfffcc 	andi	r2,r2,65535
 4004300:	2253883a 	add	r9,r4,r9
 4004304:	1887883a 	add	r3,r3,r2
 4004308:	ba403836 	bltu	r23,r9,40043ec <__divdf3+0x66c>
 400430c:	ba403626 	beq	r23,r9,40043e8 <__divdf3+0x668>
 4004310:	42000054 	ori	r8,r8,1
 4004314:	a880ffc4 	addi	r2,r21,1023
 4004318:	00bf570e 	bge	zero,r2,4004078 <__ram_exceptions_end+0xfbfe3e30>
 400431c:	40c001cc 	andi	r3,r8,7
 4004320:	18000726 	beq	r3,zero,4004340 <__divdf3+0x5c0>
 4004324:	40c003cc 	andi	r3,r8,15
 4004328:	01000104 	movi	r4,4
 400432c:	19000426 	beq	r3,r4,4004340 <__divdf3+0x5c0>
 4004330:	4107883a 	add	r3,r8,r4
 4004334:	1a11803a 	cmpltu	r8,r3,r8
 4004338:	8a23883a 	add	r17,r17,r8
 400433c:	1811883a 	mov	r8,r3
 4004340:	88c0402c 	andhi	r3,r17,256
 4004344:	18000426 	beq	r3,zero,4004358 <__divdf3+0x5d8>
 4004348:	00ffc034 	movhi	r3,65280
 400434c:	18ffffc4 	addi	r3,r3,-1
 4004350:	a8810004 	addi	r2,r21,1024
 4004354:	88e2703a 	and	r17,r17,r3
 4004358:	00c1ff84 	movi	r3,2046
 400435c:	18bee316 	blt	r3,r2,4003eec <__ram_exceptions_end+0xfbfe3ca4>
 4004360:	8824977a 	slli	r18,r17,29
 4004364:	4010d0fa 	srli	r8,r8,3
 4004368:	8822927a 	slli	r17,r17,9
 400436c:	1081ffcc 	andi	r2,r2,2047
 4004370:	9224b03a 	or	r18,r18,r8
 4004374:	880ad33a 	srli	r5,r17,12
 4004378:	98c0004c 	andi	r3,r19,1
 400437c:	003edf06 	br	4003efc <__ram_exceptions_end+0xfbfe3cb4>
 4004380:	8080022c 	andhi	r2,r16,8
 4004384:	10001226 	beq	r2,zero,40043d0 <__divdf3+0x650>
 4004388:	8880022c 	andhi	r2,r17,8
 400438c:	1000101e 	bne	r2,zero,40043d0 <__divdf3+0x650>
 4004390:	00800434 	movhi	r2,16
 4004394:	89400234 	orhi	r5,r17,8
 4004398:	10bfffc4 	addi	r2,r2,-1
 400439c:	b007883a 	mov	r3,r22
 40043a0:	288a703a 	and	r5,r5,r2
 40043a4:	4025883a 	mov	r18,r8
 40043a8:	003f3106 	br	4004070 <__ram_exceptions_end+0xfbfe3e28>
 40043ac:	008000c4 	movi	r2,3
 40043b0:	3880a626 	beq	r7,r2,400464c <__divdf3+0x8cc>
 40043b4:	00800044 	movi	r2,1
 40043b8:	3880521e 	bne	r7,r2,4004504 <__divdf3+0x784>
 40043bc:	b807883a 	mov	r3,r23
 40043c0:	0005883a 	mov	r2,zero
 40043c4:	000b883a 	mov	r5,zero
 40043c8:	0025883a 	mov	r18,zero
 40043cc:	003ecb06 	br	4003efc <__ram_exceptions_end+0xfbfe3cb4>
 40043d0:	00800434 	movhi	r2,16
 40043d4:	81400234 	orhi	r5,r16,8
 40043d8:	10bfffc4 	addi	r2,r2,-1
 40043dc:	a007883a 	mov	r3,r20
 40043e0:	288a703a 	and	r5,r5,r2
 40043e4:	003f2206 	br	4004070 <__ram_exceptions_end+0xfbfe3e28>
 40043e8:	183fca26 	beq	r3,zero,4004314 <__ram_exceptions_end+0xfbfe40cc>
 40043ec:	e5ef883a 	add	r23,fp,r23
 40043f0:	40bfffc4 	addi	r2,r8,-1
 40043f4:	bf00392e 	bgeu	r23,fp,40044dc <__divdf3+0x75c>
 40043f8:	1011883a 	mov	r8,r2
 40043fc:	ba7fc41e 	bne	r23,r9,4004310 <__ram_exceptions_end+0xfbfe40c8>
 4004400:	b0ffc31e 	bne	r22,r3,4004310 <__ram_exceptions_end+0xfbfe40c8>
 4004404:	003fc306 	br	4004314 <__ram_exceptions_end+0xfbfe40cc>
 4004408:	143ff604 	addi	r16,r2,-40
 400440c:	9c20983a 	sll	r16,r19,r16
 4004410:	0025883a 	mov	r18,zero
 4004414:	003ee206 	br	4003fa0 <__ram_exceptions_end+0xfbfe3d58>
 4004418:	d9800315 	stw	r6,12(sp)
 400441c:	d9c00215 	stw	r7,8(sp)
 4004420:	4005a4c0 	call	4005a4c <__clzsi2>
 4004424:	10800804 	addi	r2,r2,32
 4004428:	d9c00217 	ldw	r7,8(sp)
 400442c:	d9800317 	ldw	r6,12(sp)
 4004430:	003ed106 	br	4003f78 <__ram_exceptions_end+0xfbfe3d30>
 4004434:	147ff604 	addi	r17,r2,-40
 4004438:	3462983a 	sll	r17,r6,r17
 400443c:	0011883a 	mov	r8,zero
 4004440:	003ef506 	br	4004018 <__ram_exceptions_end+0xfbfe3dd0>
 4004444:	3009883a 	mov	r4,r6
 4004448:	d9800315 	stw	r6,12(sp)
 400444c:	da400115 	stw	r9,4(sp)
 4004450:	4005a4c0 	call	4005a4c <__clzsi2>
 4004454:	10800804 	addi	r2,r2,32
 4004458:	da400117 	ldw	r9,4(sp)
 400445c:	d9800317 	ldw	r6,12(sp)
 4004460:	003ee306 	br	4003ff0 <__ram_exceptions_end+0xfbfe3da8>
 4004464:	85a1883a 	add	r16,r16,r22
 4004468:	8585803a 	cmpltu	r2,r16,r22
 400446c:	1705883a 	add	r2,r2,fp
 4004470:	14a5883a 	add	r18,r2,r18
 4004474:	88bfffc4 	addi	r2,r17,-1
 4004478:	e4800c2e 	bgeu	fp,r18,40044ac <__divdf3+0x72c>
 400447c:	90c03e36 	bltu	r18,r3,4004578 <__divdf3+0x7f8>
 4004480:	1c806926 	beq	r3,r18,4004628 <__divdf3+0x8a8>
 4004484:	90c7c83a 	sub	r3,r18,r3
 4004488:	1023883a 	mov	r17,r2
 400448c:	003f5206 	br	40041d8 <__ram_exceptions_end+0xfbfe3f90>
 4004490:	923f0436 	bltu	r18,r8,40040a4 <__ram_exceptions_end+0xfbfe3e5c>
 4004494:	800897fa 	slli	r4,r16,31
 4004498:	9004d07a 	srli	r2,r18,1
 400449c:	8006d07a 	srli	r3,r16,1
 40044a0:	902097fa 	slli	r16,r18,31
 40044a4:	20a4b03a 	or	r18,r4,r2
 40044a8:	003f0106 	br	40040b0 <__ram_exceptions_end+0xfbfe3e68>
 40044ac:	e4bff51e 	bne	fp,r18,4004484 <__ram_exceptions_end+0xfbfe423c>
 40044b0:	85bff22e 	bgeu	r16,r22,400447c <__ram_exceptions_end+0xfbfe4234>
 40044b4:	e0c7c83a 	sub	r3,fp,r3
 40044b8:	1023883a 	mov	r17,r2
 40044bc:	003f4606 	br	40041d8 <__ram_exceptions_end+0xfbfe3f90>
 40044c0:	100f883a 	mov	r7,r2
 40044c4:	003f2b06 	br	4004174 <__ram_exceptions_end+0xfbfe3f2c>
 40044c8:	180d883a 	mov	r6,r3
 40044cc:	003f1306 	br	400411c <__ram_exceptions_end+0xfbfe3ed4>
 40044d0:	813fe436 	bltu	r16,r4,4004464 <__ram_exceptions_end+0xfbfe421c>
 40044d4:	0007883a 	mov	r3,zero
 40044d8:	003f3f06 	br	40041d8 <__ram_exceptions_end+0xfbfe3f90>
 40044dc:	ba402c36 	bltu	r23,r9,4004590 <__divdf3+0x810>
 40044e0:	4dc05426 	beq	r9,r23,4004634 <__divdf3+0x8b4>
 40044e4:	1011883a 	mov	r8,r2
 40044e8:	003f8906 	br	4004310 <__ram_exceptions_end+0xfbfe40c8>
 40044ec:	023fffc4 	movi	r8,-1
 40044f0:	003f8806 	br	4004314 <__ram_exceptions_end+0xfbfe40cc>
 40044f4:	1811883a 	mov	r8,r3
 40044f8:	003f5406 	br	400424c <__ram_exceptions_end+0xfbfe4004>
 40044fc:	1025883a 	mov	r18,r2
 4004500:	003f6d06 	br	40042b8 <__ram_exceptions_end+0xfbfe4070>
 4004504:	b827883a 	mov	r19,r23
 4004508:	003f8206 	br	4004314 <__ram_exceptions_end+0xfbfe40cc>
 400450c:	010007c4 	movi	r4,31
 4004510:	20c02616 	blt	r4,r3,40045ac <__divdf3+0x82c>
 4004514:	00800804 	movi	r2,32
 4004518:	10c5c83a 	sub	r2,r2,r3
 400451c:	888a983a 	sll	r5,r17,r2
 4004520:	40c8d83a 	srl	r4,r8,r3
 4004524:	4084983a 	sll	r2,r8,r2
 4004528:	88e2d83a 	srl	r17,r17,r3
 400452c:	2906b03a 	or	r3,r5,r4
 4004530:	1004c03a 	cmpne	r2,r2,zero
 4004534:	1886b03a 	or	r3,r3,r2
 4004538:	188001cc 	andi	r2,r3,7
 400453c:	10000726 	beq	r2,zero,400455c <__divdf3+0x7dc>
 4004540:	188003cc 	andi	r2,r3,15
 4004544:	01000104 	movi	r4,4
 4004548:	11000426 	beq	r2,r4,400455c <__divdf3+0x7dc>
 400454c:	1805883a 	mov	r2,r3
 4004550:	10c00104 	addi	r3,r2,4
 4004554:	1885803a 	cmpltu	r2,r3,r2
 4004558:	88a3883a 	add	r17,r17,r2
 400455c:	8880202c 	andhi	r2,r17,128
 4004560:	10002726 	beq	r2,zero,4004600 <__divdf3+0x880>
 4004564:	98c0004c 	andi	r3,r19,1
 4004568:	00800044 	movi	r2,1
 400456c:	000b883a 	mov	r5,zero
 4004570:	0025883a 	mov	r18,zero
 4004574:	003e6106 	br	4003efc <__ram_exceptions_end+0xfbfe3cb4>
 4004578:	85a1883a 	add	r16,r16,r22
 400457c:	8585803a 	cmpltu	r2,r16,r22
 4004580:	1705883a 	add	r2,r2,fp
 4004584:	14a5883a 	add	r18,r2,r18
 4004588:	8c7fff84 	addi	r17,r17,-2
 400458c:	003f1106 	br	40041d4 <__ram_exceptions_end+0xfbfe3f8c>
 4004590:	b589883a 	add	r4,r22,r22
 4004594:	25ad803a 	cmpltu	r22,r4,r22
 4004598:	b739883a 	add	fp,r22,fp
 400459c:	40bfff84 	addi	r2,r8,-2
 40045a0:	bf2f883a 	add	r23,r23,fp
 40045a4:	202d883a 	mov	r22,r4
 40045a8:	003f9306 	br	40043f8 <__ram_exceptions_end+0xfbfe41b0>
 40045ac:	013ff844 	movi	r4,-31
 40045b0:	2085c83a 	sub	r2,r4,r2
 40045b4:	8888d83a 	srl	r4,r17,r2
 40045b8:	00800804 	movi	r2,32
 40045bc:	18802126 	beq	r3,r2,4004644 <__divdf3+0x8c4>
 40045c0:	00801004 	movi	r2,64
 40045c4:	10c5c83a 	sub	r2,r2,r3
 40045c8:	8884983a 	sll	r2,r17,r2
 40045cc:	1204b03a 	or	r2,r2,r8
 40045d0:	1004c03a 	cmpne	r2,r2,zero
 40045d4:	2084b03a 	or	r2,r4,r2
 40045d8:	144001cc 	andi	r17,r2,7
 40045dc:	88000d1e 	bne	r17,zero,4004614 <__divdf3+0x894>
 40045e0:	000b883a 	mov	r5,zero
 40045e4:	1024d0fa 	srli	r18,r2,3
 40045e8:	98c0004c 	andi	r3,r19,1
 40045ec:	0005883a 	mov	r2,zero
 40045f0:	9464b03a 	or	r18,r18,r17
 40045f4:	003e4106 	br	4003efc <__ram_exceptions_end+0xfbfe3cb4>
 40045f8:	1007883a 	mov	r3,r2
 40045fc:	0023883a 	mov	r17,zero
 4004600:	880a927a 	slli	r5,r17,9
 4004604:	1805883a 	mov	r2,r3
 4004608:	8822977a 	slli	r17,r17,29
 400460c:	280ad33a 	srli	r5,r5,12
 4004610:	003ff406 	br	40045e4 <__ram_exceptions_end+0xfbfe439c>
 4004614:	10c003cc 	andi	r3,r2,15
 4004618:	01000104 	movi	r4,4
 400461c:	193ff626 	beq	r3,r4,40045f8 <__ram_exceptions_end+0xfbfe43b0>
 4004620:	0023883a 	mov	r17,zero
 4004624:	003fca06 	br	4004550 <__ram_exceptions_end+0xfbfe4308>
 4004628:	813fd336 	bltu	r16,r4,4004578 <__ram_exceptions_end+0xfbfe4330>
 400462c:	1023883a 	mov	r17,r2
 4004630:	003fa806 	br	40044d4 <__ram_exceptions_end+0xfbfe428c>
 4004634:	b0ffd636 	bltu	r22,r3,4004590 <__ram_exceptions_end+0xfbfe4348>
 4004638:	1011883a 	mov	r8,r2
 400463c:	b0ff341e 	bne	r22,r3,4004310 <__ram_exceptions_end+0xfbfe40c8>
 4004640:	003f3406 	br	4004314 <__ram_exceptions_end+0xfbfe40cc>
 4004644:	0005883a 	mov	r2,zero
 4004648:	003fe006 	br	40045cc <__ram_exceptions_end+0xfbfe4384>
 400464c:	00800434 	movhi	r2,16
 4004650:	89400234 	orhi	r5,r17,8
 4004654:	10bfffc4 	addi	r2,r2,-1
 4004658:	b807883a 	mov	r3,r23
 400465c:	288a703a 	and	r5,r5,r2
 4004660:	4025883a 	mov	r18,r8
 4004664:	003e8206 	br	4004070 <__ram_exceptions_end+0xfbfe3e28>

04004668 <__eqdf2>:
 4004668:	2804d53a 	srli	r2,r5,20
 400466c:	3806d53a 	srli	r3,r7,20
 4004670:	02000434 	movhi	r8,16
 4004674:	423fffc4 	addi	r8,r8,-1
 4004678:	1081ffcc 	andi	r2,r2,2047
 400467c:	0281ffc4 	movi	r10,2047
 4004680:	2a12703a 	and	r9,r5,r8
 4004684:	18c1ffcc 	andi	r3,r3,2047
 4004688:	3a10703a 	and	r8,r7,r8
 400468c:	280ad7fa 	srli	r5,r5,31
 4004690:	380ed7fa 	srli	r7,r7,31
 4004694:	12801026 	beq	r2,r10,40046d8 <__eqdf2+0x70>
 4004698:	0281ffc4 	movi	r10,2047
 400469c:	1a800a26 	beq	r3,r10,40046c8 <__eqdf2+0x60>
 40046a0:	10c00226 	beq	r2,r3,40046ac <__eqdf2+0x44>
 40046a4:	00800044 	movi	r2,1
 40046a8:	f800283a 	ret
 40046ac:	4a3ffd1e 	bne	r9,r8,40046a4 <__ram_exceptions_end+0xfbfe445c>
 40046b0:	21bffc1e 	bne	r4,r6,40046a4 <__ram_exceptions_end+0xfbfe445c>
 40046b4:	29c00c26 	beq	r5,r7,40046e8 <__eqdf2+0x80>
 40046b8:	103ffa1e 	bne	r2,zero,40046a4 <__ram_exceptions_end+0xfbfe445c>
 40046bc:	2244b03a 	or	r2,r4,r9
 40046c0:	1004c03a 	cmpne	r2,r2,zero
 40046c4:	f800283a 	ret
 40046c8:	3214b03a 	or	r10,r6,r8
 40046cc:	503ff426 	beq	r10,zero,40046a0 <__ram_exceptions_end+0xfbfe4458>
 40046d0:	00800044 	movi	r2,1
 40046d4:	f800283a 	ret
 40046d8:	2254b03a 	or	r10,r4,r9
 40046dc:	503fee26 	beq	r10,zero,4004698 <__ram_exceptions_end+0xfbfe4450>
 40046e0:	00800044 	movi	r2,1
 40046e4:	f800283a 	ret
 40046e8:	0005883a 	mov	r2,zero
 40046ec:	f800283a 	ret

040046f0 <__gedf2>:
 40046f0:	2804d53a 	srli	r2,r5,20
 40046f4:	3806d53a 	srli	r3,r7,20
 40046f8:	02000434 	movhi	r8,16
 40046fc:	423fffc4 	addi	r8,r8,-1
 4004700:	1081ffcc 	andi	r2,r2,2047
 4004704:	0241ffc4 	movi	r9,2047
 4004708:	2a14703a 	and	r10,r5,r8
 400470c:	18c1ffcc 	andi	r3,r3,2047
 4004710:	3a10703a 	and	r8,r7,r8
 4004714:	280ad7fa 	srli	r5,r5,31
 4004718:	380ed7fa 	srli	r7,r7,31
 400471c:	12401d26 	beq	r2,r9,4004794 <__gedf2+0xa4>
 4004720:	0241ffc4 	movi	r9,2047
 4004724:	1a401226 	beq	r3,r9,4004770 <__gedf2+0x80>
 4004728:	1000081e 	bne	r2,zero,400474c <__gedf2+0x5c>
 400472c:	2296b03a 	or	r11,r4,r10
 4004730:	5813003a 	cmpeq	r9,r11,zero
 4004734:	1800091e 	bne	r3,zero,400475c <__gedf2+0x6c>
 4004738:	3218b03a 	or	r12,r6,r8
 400473c:	6000071e 	bne	r12,zero,400475c <__gedf2+0x6c>
 4004740:	0005883a 	mov	r2,zero
 4004744:	5800101e 	bne	r11,zero,4004788 <__gedf2+0x98>
 4004748:	f800283a 	ret
 400474c:	18000c1e 	bne	r3,zero,4004780 <__gedf2+0x90>
 4004750:	3212b03a 	or	r9,r6,r8
 4004754:	48000c26 	beq	r9,zero,4004788 <__gedf2+0x98>
 4004758:	0013883a 	mov	r9,zero
 400475c:	39c03fcc 	andi	r7,r7,255
 4004760:	48000826 	beq	r9,zero,4004784 <__gedf2+0x94>
 4004764:	38000926 	beq	r7,zero,400478c <__gedf2+0x9c>
 4004768:	00800044 	movi	r2,1
 400476c:	f800283a 	ret
 4004770:	3212b03a 	or	r9,r6,r8
 4004774:	483fec26 	beq	r9,zero,4004728 <__ram_exceptions_end+0xfbfe44e0>
 4004778:	00bfff84 	movi	r2,-2
 400477c:	f800283a 	ret
 4004780:	39c03fcc 	andi	r7,r7,255
 4004784:	29c00626 	beq	r5,r7,40047a0 <__gedf2+0xb0>
 4004788:	283ff726 	beq	r5,zero,4004768 <__ram_exceptions_end+0xfbfe4520>
 400478c:	00bfffc4 	movi	r2,-1
 4004790:	f800283a 	ret
 4004794:	2292b03a 	or	r9,r4,r10
 4004798:	483fe126 	beq	r9,zero,4004720 <__ram_exceptions_end+0xfbfe44d8>
 400479c:	003ff606 	br	4004778 <__ram_exceptions_end+0xfbfe4530>
 40047a0:	18bff916 	blt	r3,r2,4004788 <__ram_exceptions_end+0xfbfe4540>
 40047a4:	10c00316 	blt	r2,r3,40047b4 <__gedf2+0xc4>
 40047a8:	42bff736 	bltu	r8,r10,4004788 <__ram_exceptions_end+0xfbfe4540>
 40047ac:	52000326 	beq	r10,r8,40047bc <__gedf2+0xcc>
 40047b0:	5200042e 	bgeu	r10,r8,40047c4 <__gedf2+0xd4>
 40047b4:	283fec1e 	bne	r5,zero,4004768 <__ram_exceptions_end+0xfbfe4520>
 40047b8:	003ff406 	br	400478c <__ram_exceptions_end+0xfbfe4544>
 40047bc:	313ff236 	bltu	r6,r4,4004788 <__ram_exceptions_end+0xfbfe4540>
 40047c0:	21bffc36 	bltu	r4,r6,40047b4 <__ram_exceptions_end+0xfbfe456c>
 40047c4:	0005883a 	mov	r2,zero
 40047c8:	f800283a 	ret

040047cc <__muldf3>:
 40047cc:	defff304 	addi	sp,sp,-52
 40047d0:	2804d53a 	srli	r2,r5,20
 40047d4:	dd800915 	stw	r22,36(sp)
 40047d8:	282cd7fa 	srli	r22,r5,31
 40047dc:	dc000315 	stw	r16,12(sp)
 40047e0:	04000434 	movhi	r16,16
 40047e4:	dd400815 	stw	r21,32(sp)
 40047e8:	dc800515 	stw	r18,20(sp)
 40047ec:	843fffc4 	addi	r16,r16,-1
 40047f0:	dfc00c15 	stw	ra,48(sp)
 40047f4:	df000b15 	stw	fp,44(sp)
 40047f8:	ddc00a15 	stw	r23,40(sp)
 40047fc:	dd000715 	stw	r20,28(sp)
 4004800:	dcc00615 	stw	r19,24(sp)
 4004804:	dc400415 	stw	r17,16(sp)
 4004808:	1481ffcc 	andi	r18,r2,2047
 400480c:	2c20703a 	and	r16,r5,r16
 4004810:	b02b883a 	mov	r21,r22
 4004814:	b2403fcc 	andi	r9,r22,255
 4004818:	90006026 	beq	r18,zero,400499c <__muldf3+0x1d0>
 400481c:	0081ffc4 	movi	r2,2047
 4004820:	2029883a 	mov	r20,r4
 4004824:	90803626 	beq	r18,r2,4004900 <__muldf3+0x134>
 4004828:	80800434 	orhi	r2,r16,16
 400482c:	100490fa 	slli	r2,r2,3
 4004830:	2020d77a 	srli	r16,r4,29
 4004834:	202890fa 	slli	r20,r4,3
 4004838:	94bf0044 	addi	r18,r18,-1023
 400483c:	80a0b03a 	or	r16,r16,r2
 4004840:	0027883a 	mov	r19,zero
 4004844:	0039883a 	mov	fp,zero
 4004848:	3804d53a 	srli	r2,r7,20
 400484c:	382ed7fa 	srli	r23,r7,31
 4004850:	04400434 	movhi	r17,16
 4004854:	8c7fffc4 	addi	r17,r17,-1
 4004858:	1081ffcc 	andi	r2,r2,2047
 400485c:	3011883a 	mov	r8,r6
 4004860:	3c62703a 	and	r17,r7,r17
 4004864:	ba803fcc 	andi	r10,r23,255
 4004868:	10006d26 	beq	r2,zero,4004a20 <__muldf3+0x254>
 400486c:	00c1ffc4 	movi	r3,2047
 4004870:	10c06526 	beq	r2,r3,4004a08 <__muldf3+0x23c>
 4004874:	88c00434 	orhi	r3,r17,16
 4004878:	180690fa 	slli	r3,r3,3
 400487c:	3022d77a 	srli	r17,r6,29
 4004880:	301090fa 	slli	r8,r6,3
 4004884:	10bf0044 	addi	r2,r2,-1023
 4004888:	88e2b03a 	or	r17,r17,r3
 400488c:	000b883a 	mov	r5,zero
 4004890:	9085883a 	add	r2,r18,r2
 4004894:	2cc8b03a 	or	r4,r5,r19
 4004898:	00c003c4 	movi	r3,15
 400489c:	bdacf03a 	xor	r22,r23,r22
 40048a0:	12c00044 	addi	r11,r2,1
 40048a4:	19009936 	bltu	r3,r4,4004b0c <__muldf3+0x340>
 40048a8:	200890ba 	slli	r4,r4,2
 40048ac:	00c10034 	movhi	r3,1024
 40048b0:	18d23004 	addi	r3,r3,18624
 40048b4:	20c9883a 	add	r4,r4,r3
 40048b8:	20c00017 	ldw	r3,0(r4)
 40048bc:	1800683a 	jmp	r3
 40048c0:	04004b0c 	andi	r16,zero,300
 40048c4:	04004920 	cmpeqi	r16,zero,292
 40048c8:	04004920 	cmpeqi	r16,zero,292
 40048cc:	0400491c 	xori	r16,zero,292
 40048d0:	04004ae8 	cmpgeui	r16,zero,299
 40048d4:	04004ae8 	cmpgeui	r16,zero,299
 40048d8:	04004ad0 	cmplti	r16,zero,299
 40048dc:	0400491c 	xori	r16,zero,292
 40048e0:	04004ae8 	cmpgeui	r16,zero,299
 40048e4:	04004ad0 	cmplti	r16,zero,299
 40048e8:	04004ae8 	cmpgeui	r16,zero,299
 40048ec:	0400491c 	xori	r16,zero,292
 40048f0:	04004af8 	rdprs	r16,zero,299
 40048f4:	04004af8 	rdprs	r16,zero,299
 40048f8:	04004af8 	rdprs	r16,zero,299
 40048fc:	04004d14 	movui	r16,308
 4004900:	2404b03a 	or	r2,r4,r16
 4004904:	10006f1e 	bne	r2,zero,4004ac4 <__muldf3+0x2f8>
 4004908:	04c00204 	movi	r19,8
 400490c:	0021883a 	mov	r16,zero
 4004910:	0029883a 	mov	r20,zero
 4004914:	07000084 	movi	fp,2
 4004918:	003fcb06 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 400491c:	502d883a 	mov	r22,r10
 4004920:	00800084 	movi	r2,2
 4004924:	28805726 	beq	r5,r2,4004a84 <__muldf3+0x2b8>
 4004928:	008000c4 	movi	r2,3
 400492c:	28816626 	beq	r5,r2,4004ec8 <__muldf3+0x6fc>
 4004930:	00800044 	movi	r2,1
 4004934:	2881411e 	bne	r5,r2,4004e3c <__muldf3+0x670>
 4004938:	b02b883a 	mov	r21,r22
 400493c:	0005883a 	mov	r2,zero
 4004940:	000b883a 	mov	r5,zero
 4004944:	0029883a 	mov	r20,zero
 4004948:	1004953a 	slli	r2,r2,20
 400494c:	a8c03fcc 	andi	r3,r21,255
 4004950:	04400434 	movhi	r17,16
 4004954:	8c7fffc4 	addi	r17,r17,-1
 4004958:	180697fa 	slli	r3,r3,31
 400495c:	2c4a703a 	and	r5,r5,r17
 4004960:	288ab03a 	or	r5,r5,r2
 4004964:	28c6b03a 	or	r3,r5,r3
 4004968:	a005883a 	mov	r2,r20
 400496c:	dfc00c17 	ldw	ra,48(sp)
 4004970:	df000b17 	ldw	fp,44(sp)
 4004974:	ddc00a17 	ldw	r23,40(sp)
 4004978:	dd800917 	ldw	r22,36(sp)
 400497c:	dd400817 	ldw	r21,32(sp)
 4004980:	dd000717 	ldw	r20,28(sp)
 4004984:	dcc00617 	ldw	r19,24(sp)
 4004988:	dc800517 	ldw	r18,20(sp)
 400498c:	dc400417 	ldw	r17,16(sp)
 4004990:	dc000317 	ldw	r16,12(sp)
 4004994:	dec00d04 	addi	sp,sp,52
 4004998:	f800283a 	ret
 400499c:	2404b03a 	or	r2,r4,r16
 40049a0:	2027883a 	mov	r19,r4
 40049a4:	10004226 	beq	r2,zero,4004ab0 <__muldf3+0x2e4>
 40049a8:	8000fc26 	beq	r16,zero,4004d9c <__muldf3+0x5d0>
 40049ac:	8009883a 	mov	r4,r16
 40049b0:	d9800215 	stw	r6,8(sp)
 40049b4:	d9c00015 	stw	r7,0(sp)
 40049b8:	da400115 	stw	r9,4(sp)
 40049bc:	4005a4c0 	call	4005a4c <__clzsi2>
 40049c0:	d9800217 	ldw	r6,8(sp)
 40049c4:	d9c00017 	ldw	r7,0(sp)
 40049c8:	da400117 	ldw	r9,4(sp)
 40049cc:	113ffd44 	addi	r4,r2,-11
 40049d0:	00c00704 	movi	r3,28
 40049d4:	1900ed16 	blt	r3,r4,4004d8c <__muldf3+0x5c0>
 40049d8:	00c00744 	movi	r3,29
 40049dc:	147ffe04 	addi	r17,r2,-8
 40049e0:	1907c83a 	sub	r3,r3,r4
 40049e4:	8460983a 	sll	r16,r16,r17
 40049e8:	98c6d83a 	srl	r3,r19,r3
 40049ec:	9c68983a 	sll	r20,r19,r17
 40049f0:	1c20b03a 	or	r16,r3,r16
 40049f4:	1080fcc4 	addi	r2,r2,1011
 40049f8:	00a5c83a 	sub	r18,zero,r2
 40049fc:	0027883a 	mov	r19,zero
 4004a00:	0039883a 	mov	fp,zero
 4004a04:	003f9006 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 4004a08:	3446b03a 	or	r3,r6,r17
 4004a0c:	1800261e 	bne	r3,zero,4004aa8 <__muldf3+0x2dc>
 4004a10:	0023883a 	mov	r17,zero
 4004a14:	0011883a 	mov	r8,zero
 4004a18:	01400084 	movi	r5,2
 4004a1c:	003f9c06 	br	4004890 <__ram_exceptions_end+0xfbfe4648>
 4004a20:	3446b03a 	or	r3,r6,r17
 4004a24:	18001c26 	beq	r3,zero,4004a98 <__muldf3+0x2cc>
 4004a28:	8800ce26 	beq	r17,zero,4004d64 <__muldf3+0x598>
 4004a2c:	8809883a 	mov	r4,r17
 4004a30:	d9800215 	stw	r6,8(sp)
 4004a34:	da400115 	stw	r9,4(sp)
 4004a38:	da800015 	stw	r10,0(sp)
 4004a3c:	4005a4c0 	call	4005a4c <__clzsi2>
 4004a40:	d9800217 	ldw	r6,8(sp)
 4004a44:	da400117 	ldw	r9,4(sp)
 4004a48:	da800017 	ldw	r10,0(sp)
 4004a4c:	113ffd44 	addi	r4,r2,-11
 4004a50:	00c00704 	movi	r3,28
 4004a54:	1900bf16 	blt	r3,r4,4004d54 <__muldf3+0x588>
 4004a58:	00c00744 	movi	r3,29
 4004a5c:	123ffe04 	addi	r8,r2,-8
 4004a60:	1907c83a 	sub	r3,r3,r4
 4004a64:	8a22983a 	sll	r17,r17,r8
 4004a68:	30c6d83a 	srl	r3,r6,r3
 4004a6c:	3210983a 	sll	r8,r6,r8
 4004a70:	1c62b03a 	or	r17,r3,r17
 4004a74:	1080fcc4 	addi	r2,r2,1011
 4004a78:	0085c83a 	sub	r2,zero,r2
 4004a7c:	000b883a 	mov	r5,zero
 4004a80:	003f8306 	br	4004890 <__ram_exceptions_end+0xfbfe4648>
 4004a84:	b02b883a 	mov	r21,r22
 4004a88:	0081ffc4 	movi	r2,2047
 4004a8c:	000b883a 	mov	r5,zero
 4004a90:	0029883a 	mov	r20,zero
 4004a94:	003fac06 	br	4004948 <__ram_exceptions_end+0xfbfe4700>
 4004a98:	0023883a 	mov	r17,zero
 4004a9c:	0011883a 	mov	r8,zero
 4004aa0:	01400044 	movi	r5,1
 4004aa4:	003f7a06 	br	4004890 <__ram_exceptions_end+0xfbfe4648>
 4004aa8:	014000c4 	movi	r5,3
 4004aac:	003f7806 	br	4004890 <__ram_exceptions_end+0xfbfe4648>
 4004ab0:	04c00104 	movi	r19,4
 4004ab4:	0021883a 	mov	r16,zero
 4004ab8:	0029883a 	mov	r20,zero
 4004abc:	07000044 	movi	fp,1
 4004ac0:	003f6106 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 4004ac4:	04c00304 	movi	r19,12
 4004ac8:	070000c4 	movi	fp,3
 4004acc:	003f5e06 	br	4004848 <__ram_exceptions_end+0xfbfe4600>
 4004ad0:	01400434 	movhi	r5,16
 4004ad4:	002b883a 	mov	r21,zero
 4004ad8:	297fffc4 	addi	r5,r5,-1
 4004adc:	053fffc4 	movi	r20,-1
 4004ae0:	0081ffc4 	movi	r2,2047
 4004ae4:	003f9806 	br	4004948 <__ram_exceptions_end+0xfbfe4700>
 4004ae8:	8023883a 	mov	r17,r16
 4004aec:	a011883a 	mov	r8,r20
 4004af0:	e00b883a 	mov	r5,fp
 4004af4:	003f8a06 	br	4004920 <__ram_exceptions_end+0xfbfe46d8>
 4004af8:	8023883a 	mov	r17,r16
 4004afc:	a011883a 	mov	r8,r20
 4004b00:	482d883a 	mov	r22,r9
 4004b04:	e00b883a 	mov	r5,fp
 4004b08:	003f8506 	br	4004920 <__ram_exceptions_end+0xfbfe46d8>
 4004b0c:	a00ad43a 	srli	r5,r20,16
 4004b10:	401ad43a 	srli	r13,r8,16
 4004b14:	a53fffcc 	andi	r20,r20,65535
 4004b18:	423fffcc 	andi	r8,r8,65535
 4004b1c:	4519383a 	mul	r12,r8,r20
 4004b20:	4147383a 	mul	r3,r8,r5
 4004b24:	6d09383a 	mul	r4,r13,r20
 4004b28:	600cd43a 	srli	r6,r12,16
 4004b2c:	2b5d383a 	mul	r14,r5,r13
 4004b30:	20c9883a 	add	r4,r4,r3
 4004b34:	310d883a 	add	r6,r6,r4
 4004b38:	30c0022e 	bgeu	r6,r3,4004b44 <__muldf3+0x378>
 4004b3c:	00c00074 	movhi	r3,1
 4004b40:	70dd883a 	add	r14,r14,r3
 4004b44:	8826d43a 	srli	r19,r17,16
 4004b48:	8bffffcc 	andi	r15,r17,65535
 4004b4c:	7d23383a 	mul	r17,r15,r20
 4004b50:	7949383a 	mul	r4,r15,r5
 4004b54:	9d29383a 	mul	r20,r19,r20
 4004b58:	8814d43a 	srli	r10,r17,16
 4004b5c:	3012943a 	slli	r9,r6,16
 4004b60:	a129883a 	add	r20,r20,r4
 4004b64:	633fffcc 	andi	r12,r12,65535
 4004b68:	5515883a 	add	r10,r10,r20
 4004b6c:	3006d43a 	srli	r3,r6,16
 4004b70:	4b13883a 	add	r9,r9,r12
 4004b74:	2ccb383a 	mul	r5,r5,r19
 4004b78:	5100022e 	bgeu	r10,r4,4004b84 <__muldf3+0x3b8>
 4004b7c:	01000074 	movhi	r4,1
 4004b80:	290b883a 	add	r5,r5,r4
 4004b84:	802ad43a 	srli	r21,r16,16
 4004b88:	843fffcc 	andi	r16,r16,65535
 4004b8c:	440d383a 	mul	r6,r8,r16
 4004b90:	4565383a 	mul	r18,r8,r21
 4004b94:	8349383a 	mul	r4,r16,r13
 4004b98:	500e943a 	slli	r7,r10,16
 4004b9c:	3010d43a 	srli	r8,r6,16
 4004ba0:	5028d43a 	srli	r20,r10,16
 4004ba4:	2489883a 	add	r4,r4,r18
 4004ba8:	8abfffcc 	andi	r10,r17,65535
 4004bac:	3a95883a 	add	r10,r7,r10
 4004bb0:	4119883a 	add	r12,r8,r4
 4004bb4:	a169883a 	add	r20,r20,r5
 4004bb8:	1a87883a 	add	r3,r3,r10
 4004bbc:	6d5b383a 	mul	r13,r13,r21
 4004bc0:	6480022e 	bgeu	r12,r18,4004bcc <__muldf3+0x400>
 4004bc4:	01000074 	movhi	r4,1
 4004bc8:	691b883a 	add	r13,r13,r4
 4004bcc:	7c25383a 	mul	r18,r15,r16
 4004bd0:	7d4b383a 	mul	r5,r15,r21
 4004bd4:	84cf383a 	mul	r7,r16,r19
 4004bd8:	901ed43a 	srli	r15,r18,16
 4004bdc:	6008d43a 	srli	r4,r12,16
 4004be0:	6010943a 	slli	r8,r12,16
 4004be4:	394f883a 	add	r7,r7,r5
 4004be8:	333fffcc 	andi	r12,r6,65535
 4004bec:	79df883a 	add	r15,r15,r7
 4004bf0:	235b883a 	add	r13,r4,r13
 4004bf4:	9d63383a 	mul	r17,r19,r21
 4004bf8:	4309883a 	add	r4,r8,r12
 4004bfc:	7940022e 	bgeu	r15,r5,4004c08 <__muldf3+0x43c>
 4004c00:	01400074 	movhi	r5,1
 4004c04:	8963883a 	add	r17,r17,r5
 4004c08:	780a943a 	slli	r5,r15,16
 4004c0c:	91bfffcc 	andi	r6,r18,65535
 4004c10:	70c7883a 	add	r3,r14,r3
 4004c14:	298d883a 	add	r6,r5,r6
 4004c18:	1a8f803a 	cmpltu	r7,r3,r10
 4004c1c:	350b883a 	add	r5,r6,r20
 4004c20:	20c7883a 	add	r3,r4,r3
 4004c24:	3955883a 	add	r10,r7,r5
 4004c28:	1909803a 	cmpltu	r4,r3,r4
 4004c2c:	6a91883a 	add	r8,r13,r10
 4004c30:	780cd43a 	srli	r6,r15,16
 4004c34:	2219883a 	add	r12,r4,r8
 4004c38:	2d0b803a 	cmpltu	r5,r5,r20
 4004c3c:	51cf803a 	cmpltu	r7,r10,r7
 4004c40:	29ceb03a 	or	r7,r5,r7
 4004c44:	4351803a 	cmpltu	r8,r8,r13
 4004c48:	610b803a 	cmpltu	r5,r12,r4
 4004c4c:	4148b03a 	or	r4,r8,r5
 4004c50:	398f883a 	add	r7,r7,r6
 4004c54:	3909883a 	add	r4,r7,r4
 4004c58:	1810927a 	slli	r8,r3,9
 4004c5c:	2449883a 	add	r4,r4,r17
 4004c60:	2008927a 	slli	r4,r4,9
 4004c64:	6022d5fa 	srli	r17,r12,23
 4004c68:	1806d5fa 	srli	r3,r3,23
 4004c6c:	4252b03a 	or	r9,r8,r9
 4004c70:	600a927a 	slli	r5,r12,9
 4004c74:	4810c03a 	cmpne	r8,r9,zero
 4004c78:	2462b03a 	or	r17,r4,r17
 4004c7c:	40c6b03a 	or	r3,r8,r3
 4004c80:	8900402c 	andhi	r4,r17,256
 4004c84:	1950b03a 	or	r8,r3,r5
 4004c88:	20000726 	beq	r4,zero,4004ca8 <__muldf3+0x4dc>
 4004c8c:	4006d07a 	srli	r3,r8,1
 4004c90:	880497fa 	slli	r2,r17,31
 4004c94:	4200004c 	andi	r8,r8,1
 4004c98:	8822d07a 	srli	r17,r17,1
 4004c9c:	1a10b03a 	or	r8,r3,r8
 4004ca0:	1210b03a 	or	r8,r2,r8
 4004ca4:	5805883a 	mov	r2,r11
 4004ca8:	1140ffc4 	addi	r5,r2,1023
 4004cac:	0140440e 	bge	zero,r5,4004dc0 <__muldf3+0x5f4>
 4004cb0:	40c001cc 	andi	r3,r8,7
 4004cb4:	18000726 	beq	r3,zero,4004cd4 <__muldf3+0x508>
 4004cb8:	40c003cc 	andi	r3,r8,15
 4004cbc:	01000104 	movi	r4,4
 4004cc0:	19000426 	beq	r3,r4,4004cd4 <__muldf3+0x508>
 4004cc4:	4107883a 	add	r3,r8,r4
 4004cc8:	1a11803a 	cmpltu	r8,r3,r8
 4004ccc:	8a23883a 	add	r17,r17,r8
 4004cd0:	1811883a 	mov	r8,r3
 4004cd4:	88c0402c 	andhi	r3,r17,256
 4004cd8:	18000426 	beq	r3,zero,4004cec <__muldf3+0x520>
 4004cdc:	11410004 	addi	r5,r2,1024
 4004ce0:	00bfc034 	movhi	r2,65280
 4004ce4:	10bfffc4 	addi	r2,r2,-1
 4004ce8:	88a2703a 	and	r17,r17,r2
 4004cec:	0081ff84 	movi	r2,2046
 4004cf0:	117f6416 	blt	r2,r5,4004a84 <__ram_exceptions_end+0xfbfe483c>
 4004cf4:	8828977a 	slli	r20,r17,29
 4004cf8:	4010d0fa 	srli	r8,r8,3
 4004cfc:	8822927a 	slli	r17,r17,9
 4004d00:	2881ffcc 	andi	r2,r5,2047
 4004d04:	a228b03a 	or	r20,r20,r8
 4004d08:	880ad33a 	srli	r5,r17,12
 4004d0c:	b02b883a 	mov	r21,r22
 4004d10:	003f0d06 	br	4004948 <__ram_exceptions_end+0xfbfe4700>
 4004d14:	8080022c 	andhi	r2,r16,8
 4004d18:	10000926 	beq	r2,zero,4004d40 <__muldf3+0x574>
 4004d1c:	8880022c 	andhi	r2,r17,8
 4004d20:	1000071e 	bne	r2,zero,4004d40 <__muldf3+0x574>
 4004d24:	00800434 	movhi	r2,16
 4004d28:	89400234 	orhi	r5,r17,8
 4004d2c:	10bfffc4 	addi	r2,r2,-1
 4004d30:	b82b883a 	mov	r21,r23
 4004d34:	288a703a 	and	r5,r5,r2
 4004d38:	4029883a 	mov	r20,r8
 4004d3c:	003f6806 	br	4004ae0 <__ram_exceptions_end+0xfbfe4898>
 4004d40:	00800434 	movhi	r2,16
 4004d44:	81400234 	orhi	r5,r16,8
 4004d48:	10bfffc4 	addi	r2,r2,-1
 4004d4c:	288a703a 	and	r5,r5,r2
 4004d50:	003f6306 	br	4004ae0 <__ram_exceptions_end+0xfbfe4898>
 4004d54:	147ff604 	addi	r17,r2,-40
 4004d58:	3462983a 	sll	r17,r6,r17
 4004d5c:	0011883a 	mov	r8,zero
 4004d60:	003f4406 	br	4004a74 <__ram_exceptions_end+0xfbfe482c>
 4004d64:	3009883a 	mov	r4,r6
 4004d68:	d9800215 	stw	r6,8(sp)
 4004d6c:	da400115 	stw	r9,4(sp)
 4004d70:	da800015 	stw	r10,0(sp)
 4004d74:	4005a4c0 	call	4005a4c <__clzsi2>
 4004d78:	10800804 	addi	r2,r2,32
 4004d7c:	da800017 	ldw	r10,0(sp)
 4004d80:	da400117 	ldw	r9,4(sp)
 4004d84:	d9800217 	ldw	r6,8(sp)
 4004d88:	003f3006 	br	4004a4c <__ram_exceptions_end+0xfbfe4804>
 4004d8c:	143ff604 	addi	r16,r2,-40
 4004d90:	9c20983a 	sll	r16,r19,r16
 4004d94:	0029883a 	mov	r20,zero
 4004d98:	003f1606 	br	40049f4 <__ram_exceptions_end+0xfbfe47ac>
 4004d9c:	d9800215 	stw	r6,8(sp)
 4004da0:	d9c00015 	stw	r7,0(sp)
 4004da4:	da400115 	stw	r9,4(sp)
 4004da8:	4005a4c0 	call	4005a4c <__clzsi2>
 4004dac:	10800804 	addi	r2,r2,32
 4004db0:	da400117 	ldw	r9,4(sp)
 4004db4:	d9c00017 	ldw	r7,0(sp)
 4004db8:	d9800217 	ldw	r6,8(sp)
 4004dbc:	003f0306 	br	40049cc <__ram_exceptions_end+0xfbfe4784>
 4004dc0:	00c00044 	movi	r3,1
 4004dc4:	1947c83a 	sub	r3,r3,r5
 4004dc8:	00800e04 	movi	r2,56
 4004dcc:	10feda16 	blt	r2,r3,4004938 <__ram_exceptions_end+0xfbfe46f0>
 4004dd0:	008007c4 	movi	r2,31
 4004dd4:	10c01b16 	blt	r2,r3,4004e44 <__muldf3+0x678>
 4004dd8:	00800804 	movi	r2,32
 4004ddc:	10c5c83a 	sub	r2,r2,r3
 4004de0:	888a983a 	sll	r5,r17,r2
 4004de4:	40c8d83a 	srl	r4,r8,r3
 4004de8:	4084983a 	sll	r2,r8,r2
 4004dec:	88e2d83a 	srl	r17,r17,r3
 4004df0:	2906b03a 	or	r3,r5,r4
 4004df4:	1004c03a 	cmpne	r2,r2,zero
 4004df8:	1886b03a 	or	r3,r3,r2
 4004dfc:	188001cc 	andi	r2,r3,7
 4004e00:	10000726 	beq	r2,zero,4004e20 <__muldf3+0x654>
 4004e04:	188003cc 	andi	r2,r3,15
 4004e08:	01000104 	movi	r4,4
 4004e0c:	11000426 	beq	r2,r4,4004e20 <__muldf3+0x654>
 4004e10:	1805883a 	mov	r2,r3
 4004e14:	10c00104 	addi	r3,r2,4
 4004e18:	1885803a 	cmpltu	r2,r3,r2
 4004e1c:	88a3883a 	add	r17,r17,r2
 4004e20:	8880202c 	andhi	r2,r17,128
 4004e24:	10001c26 	beq	r2,zero,4004e98 <__muldf3+0x6cc>
 4004e28:	b02b883a 	mov	r21,r22
 4004e2c:	00800044 	movi	r2,1
 4004e30:	000b883a 	mov	r5,zero
 4004e34:	0029883a 	mov	r20,zero
 4004e38:	003ec306 	br	4004948 <__ram_exceptions_end+0xfbfe4700>
 4004e3c:	5805883a 	mov	r2,r11
 4004e40:	003f9906 	br	4004ca8 <__ram_exceptions_end+0xfbfe4a60>
 4004e44:	00bff844 	movi	r2,-31
 4004e48:	1145c83a 	sub	r2,r2,r5
 4004e4c:	8888d83a 	srl	r4,r17,r2
 4004e50:	00800804 	movi	r2,32
 4004e54:	18801a26 	beq	r3,r2,4004ec0 <__muldf3+0x6f4>
 4004e58:	00801004 	movi	r2,64
 4004e5c:	10c5c83a 	sub	r2,r2,r3
 4004e60:	8884983a 	sll	r2,r17,r2
 4004e64:	1204b03a 	or	r2,r2,r8
 4004e68:	1004c03a 	cmpne	r2,r2,zero
 4004e6c:	2084b03a 	or	r2,r4,r2
 4004e70:	144001cc 	andi	r17,r2,7
 4004e74:	88000d1e 	bne	r17,zero,4004eac <__muldf3+0x6e0>
 4004e78:	000b883a 	mov	r5,zero
 4004e7c:	1028d0fa 	srli	r20,r2,3
 4004e80:	b02b883a 	mov	r21,r22
 4004e84:	0005883a 	mov	r2,zero
 4004e88:	a468b03a 	or	r20,r20,r17
 4004e8c:	003eae06 	br	4004948 <__ram_exceptions_end+0xfbfe4700>
 4004e90:	1007883a 	mov	r3,r2
 4004e94:	0023883a 	mov	r17,zero
 4004e98:	880a927a 	slli	r5,r17,9
 4004e9c:	1805883a 	mov	r2,r3
 4004ea0:	8822977a 	slli	r17,r17,29
 4004ea4:	280ad33a 	srli	r5,r5,12
 4004ea8:	003ff406 	br	4004e7c <__ram_exceptions_end+0xfbfe4c34>
 4004eac:	10c003cc 	andi	r3,r2,15
 4004eb0:	01000104 	movi	r4,4
 4004eb4:	193ff626 	beq	r3,r4,4004e90 <__ram_exceptions_end+0xfbfe4c48>
 4004eb8:	0023883a 	mov	r17,zero
 4004ebc:	003fd506 	br	4004e14 <__ram_exceptions_end+0xfbfe4bcc>
 4004ec0:	0005883a 	mov	r2,zero
 4004ec4:	003fe706 	br	4004e64 <__ram_exceptions_end+0xfbfe4c1c>
 4004ec8:	00800434 	movhi	r2,16
 4004ecc:	89400234 	orhi	r5,r17,8
 4004ed0:	10bfffc4 	addi	r2,r2,-1
 4004ed4:	b02b883a 	mov	r21,r22
 4004ed8:	288a703a 	and	r5,r5,r2
 4004edc:	4029883a 	mov	r20,r8
 4004ee0:	003eff06 	br	4004ae0 <__ram_exceptions_end+0xfbfe4898>

04004ee4 <__subdf3>:
 4004ee4:	02000434 	movhi	r8,16
 4004ee8:	423fffc4 	addi	r8,r8,-1
 4004eec:	defffb04 	addi	sp,sp,-20
 4004ef0:	2a14703a 	and	r10,r5,r8
 4004ef4:	3812d53a 	srli	r9,r7,20
 4004ef8:	3a10703a 	and	r8,r7,r8
 4004efc:	2006d77a 	srli	r3,r4,29
 4004f00:	3004d77a 	srli	r2,r6,29
 4004f04:	dc000015 	stw	r16,0(sp)
 4004f08:	501490fa 	slli	r10,r10,3
 4004f0c:	2820d53a 	srli	r16,r5,20
 4004f10:	401090fa 	slli	r8,r8,3
 4004f14:	dc800215 	stw	r18,8(sp)
 4004f18:	dc400115 	stw	r17,4(sp)
 4004f1c:	dfc00415 	stw	ra,16(sp)
 4004f20:	202290fa 	slli	r17,r4,3
 4004f24:	dcc00315 	stw	r19,12(sp)
 4004f28:	4a41ffcc 	andi	r9,r9,2047
 4004f2c:	0101ffc4 	movi	r4,2047
 4004f30:	2824d7fa 	srli	r18,r5,31
 4004f34:	8401ffcc 	andi	r16,r16,2047
 4004f38:	50c6b03a 	or	r3,r10,r3
 4004f3c:	380ed7fa 	srli	r7,r7,31
 4004f40:	408ab03a 	or	r5,r8,r2
 4004f44:	300c90fa 	slli	r6,r6,3
 4004f48:	49009626 	beq	r9,r4,40051a4 <__subdf3+0x2c0>
 4004f4c:	39c0005c 	xori	r7,r7,1
 4004f50:	8245c83a 	sub	r2,r16,r9
 4004f54:	3c807426 	beq	r7,r18,4005128 <__subdf3+0x244>
 4004f58:	0080af0e 	bge	zero,r2,4005218 <__subdf3+0x334>
 4004f5c:	48002a1e 	bne	r9,zero,4005008 <__subdf3+0x124>
 4004f60:	2988b03a 	or	r4,r5,r6
 4004f64:	20009a1e 	bne	r4,zero,40051d0 <__subdf3+0x2ec>
 4004f68:	888001cc 	andi	r2,r17,7
 4004f6c:	10000726 	beq	r2,zero,4004f8c <__subdf3+0xa8>
 4004f70:	888003cc 	andi	r2,r17,15
 4004f74:	01000104 	movi	r4,4
 4004f78:	11000426 	beq	r2,r4,4004f8c <__subdf3+0xa8>
 4004f7c:	890b883a 	add	r5,r17,r4
 4004f80:	2c63803a 	cmpltu	r17,r5,r17
 4004f84:	1c47883a 	add	r3,r3,r17
 4004f88:	2823883a 	mov	r17,r5
 4004f8c:	1880202c 	andhi	r2,r3,128
 4004f90:	10005926 	beq	r2,zero,40050f8 <__subdf3+0x214>
 4004f94:	84000044 	addi	r16,r16,1
 4004f98:	0081ffc4 	movi	r2,2047
 4004f9c:	8080be26 	beq	r16,r2,4005298 <__subdf3+0x3b4>
 4004fa0:	017fe034 	movhi	r5,65408
 4004fa4:	297fffc4 	addi	r5,r5,-1
 4004fa8:	1946703a 	and	r3,r3,r5
 4004fac:	1804977a 	slli	r2,r3,29
 4004fb0:	1806927a 	slli	r3,r3,9
 4004fb4:	8822d0fa 	srli	r17,r17,3
 4004fb8:	8401ffcc 	andi	r16,r16,2047
 4004fbc:	180ad33a 	srli	r5,r3,12
 4004fc0:	9100004c 	andi	r4,r18,1
 4004fc4:	1444b03a 	or	r2,r2,r17
 4004fc8:	80c1ffcc 	andi	r3,r16,2047
 4004fcc:	1820953a 	slli	r16,r3,20
 4004fd0:	20c03fcc 	andi	r3,r4,255
 4004fd4:	180897fa 	slli	r4,r3,31
 4004fd8:	00c00434 	movhi	r3,16
 4004fdc:	18ffffc4 	addi	r3,r3,-1
 4004fe0:	28c6703a 	and	r3,r5,r3
 4004fe4:	1c06b03a 	or	r3,r3,r16
 4004fe8:	1906b03a 	or	r3,r3,r4
 4004fec:	dfc00417 	ldw	ra,16(sp)
 4004ff0:	dcc00317 	ldw	r19,12(sp)
 4004ff4:	dc800217 	ldw	r18,8(sp)
 4004ff8:	dc400117 	ldw	r17,4(sp)
 4004ffc:	dc000017 	ldw	r16,0(sp)
 4005000:	dec00504 	addi	sp,sp,20
 4005004:	f800283a 	ret
 4005008:	0101ffc4 	movi	r4,2047
 400500c:	813fd626 	beq	r16,r4,4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005010:	29402034 	orhi	r5,r5,128
 4005014:	01000e04 	movi	r4,56
 4005018:	2080a316 	blt	r4,r2,40052a8 <__subdf3+0x3c4>
 400501c:	010007c4 	movi	r4,31
 4005020:	2080c616 	blt	r4,r2,400533c <__subdf3+0x458>
 4005024:	01000804 	movi	r4,32
 4005028:	2089c83a 	sub	r4,r4,r2
 400502c:	2910983a 	sll	r8,r5,r4
 4005030:	308ed83a 	srl	r7,r6,r2
 4005034:	3108983a 	sll	r4,r6,r4
 4005038:	2884d83a 	srl	r2,r5,r2
 400503c:	41ccb03a 	or	r6,r8,r7
 4005040:	2008c03a 	cmpne	r4,r4,zero
 4005044:	310cb03a 	or	r6,r6,r4
 4005048:	898dc83a 	sub	r6,r17,r6
 400504c:	89a3803a 	cmpltu	r17,r17,r6
 4005050:	1887c83a 	sub	r3,r3,r2
 4005054:	1c47c83a 	sub	r3,r3,r17
 4005058:	3023883a 	mov	r17,r6
 400505c:	1880202c 	andhi	r2,r3,128
 4005060:	10002326 	beq	r2,zero,40050f0 <__subdf3+0x20c>
 4005064:	04c02034 	movhi	r19,128
 4005068:	9cffffc4 	addi	r19,r19,-1
 400506c:	1ce6703a 	and	r19,r3,r19
 4005070:	98007a26 	beq	r19,zero,400525c <__subdf3+0x378>
 4005074:	9809883a 	mov	r4,r19
 4005078:	4005a4c0 	call	4005a4c <__clzsi2>
 400507c:	113ffe04 	addi	r4,r2,-8
 4005080:	00c007c4 	movi	r3,31
 4005084:	19007b16 	blt	r3,r4,4005274 <__subdf3+0x390>
 4005088:	00800804 	movi	r2,32
 400508c:	1105c83a 	sub	r2,r2,r4
 4005090:	8884d83a 	srl	r2,r17,r2
 4005094:	9906983a 	sll	r3,r19,r4
 4005098:	8922983a 	sll	r17,r17,r4
 400509c:	10c4b03a 	or	r2,r2,r3
 40050a0:	24007816 	blt	r4,r16,4005284 <__subdf3+0x3a0>
 40050a4:	2421c83a 	sub	r16,r4,r16
 40050a8:	80c00044 	addi	r3,r16,1
 40050ac:	010007c4 	movi	r4,31
 40050b0:	20c09516 	blt	r4,r3,4005308 <__subdf3+0x424>
 40050b4:	01400804 	movi	r5,32
 40050b8:	28cbc83a 	sub	r5,r5,r3
 40050bc:	88c8d83a 	srl	r4,r17,r3
 40050c0:	8962983a 	sll	r17,r17,r5
 40050c4:	114a983a 	sll	r5,r2,r5
 40050c8:	10c6d83a 	srl	r3,r2,r3
 40050cc:	8804c03a 	cmpne	r2,r17,zero
 40050d0:	290ab03a 	or	r5,r5,r4
 40050d4:	28a2b03a 	or	r17,r5,r2
 40050d8:	0021883a 	mov	r16,zero
 40050dc:	003fa206 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40050e0:	2090b03a 	or	r8,r4,r2
 40050e4:	40018e26 	beq	r8,zero,4005720 <__subdf3+0x83c>
 40050e8:	1007883a 	mov	r3,r2
 40050ec:	2023883a 	mov	r17,r4
 40050f0:	888001cc 	andi	r2,r17,7
 40050f4:	103f9e1e 	bne	r2,zero,4004f70 <__ram_exceptions_end+0xfbfe4d28>
 40050f8:	1804977a 	slli	r2,r3,29
 40050fc:	8822d0fa 	srli	r17,r17,3
 4005100:	1810d0fa 	srli	r8,r3,3
 4005104:	9100004c 	andi	r4,r18,1
 4005108:	1444b03a 	or	r2,r2,r17
 400510c:	00c1ffc4 	movi	r3,2047
 4005110:	80c02826 	beq	r16,r3,40051b4 <__subdf3+0x2d0>
 4005114:	01400434 	movhi	r5,16
 4005118:	297fffc4 	addi	r5,r5,-1
 400511c:	80e0703a 	and	r16,r16,r3
 4005120:	414a703a 	and	r5,r8,r5
 4005124:	003fa806 	br	4004fc8 <__ram_exceptions_end+0xfbfe4d80>
 4005128:	0080630e 	bge	zero,r2,40052b8 <__subdf3+0x3d4>
 400512c:	48003026 	beq	r9,zero,40051f0 <__subdf3+0x30c>
 4005130:	0101ffc4 	movi	r4,2047
 4005134:	813f8c26 	beq	r16,r4,4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005138:	29402034 	orhi	r5,r5,128
 400513c:	01000e04 	movi	r4,56
 4005140:	2080a90e 	bge	r4,r2,40053e8 <__subdf3+0x504>
 4005144:	298cb03a 	or	r6,r5,r6
 4005148:	3012c03a 	cmpne	r9,r6,zero
 400514c:	0005883a 	mov	r2,zero
 4005150:	4c53883a 	add	r9,r9,r17
 4005154:	4c63803a 	cmpltu	r17,r9,r17
 4005158:	10c7883a 	add	r3,r2,r3
 400515c:	88c7883a 	add	r3,r17,r3
 4005160:	4823883a 	mov	r17,r9
 4005164:	1880202c 	andhi	r2,r3,128
 4005168:	1000d026 	beq	r2,zero,40054ac <__subdf3+0x5c8>
 400516c:	84000044 	addi	r16,r16,1
 4005170:	0081ffc4 	movi	r2,2047
 4005174:	8080fe26 	beq	r16,r2,4005570 <__subdf3+0x68c>
 4005178:	00bfe034 	movhi	r2,65408
 400517c:	10bfffc4 	addi	r2,r2,-1
 4005180:	1886703a 	and	r3,r3,r2
 4005184:	880ad07a 	srli	r5,r17,1
 4005188:	180497fa 	slli	r2,r3,31
 400518c:	8900004c 	andi	r4,r17,1
 4005190:	2922b03a 	or	r17,r5,r4
 4005194:	1806d07a 	srli	r3,r3,1
 4005198:	1462b03a 	or	r17,r2,r17
 400519c:	3825883a 	mov	r18,r7
 40051a0:	003f7106 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40051a4:	2984b03a 	or	r2,r5,r6
 40051a8:	103f6826 	beq	r2,zero,4004f4c <__ram_exceptions_end+0xfbfe4d04>
 40051ac:	39c03fcc 	andi	r7,r7,255
 40051b0:	003f6706 	br	4004f50 <__ram_exceptions_end+0xfbfe4d08>
 40051b4:	4086b03a 	or	r3,r8,r2
 40051b8:	18015226 	beq	r3,zero,4005704 <__subdf3+0x820>
 40051bc:	00c00434 	movhi	r3,16
 40051c0:	41400234 	orhi	r5,r8,8
 40051c4:	18ffffc4 	addi	r3,r3,-1
 40051c8:	28ca703a 	and	r5,r5,r3
 40051cc:	003f7e06 	br	4004fc8 <__ram_exceptions_end+0xfbfe4d80>
 40051d0:	10bfffc4 	addi	r2,r2,-1
 40051d4:	1000491e 	bne	r2,zero,40052fc <__subdf3+0x418>
 40051d8:	898fc83a 	sub	r7,r17,r6
 40051dc:	89e3803a 	cmpltu	r17,r17,r7
 40051e0:	1947c83a 	sub	r3,r3,r5
 40051e4:	1c47c83a 	sub	r3,r3,r17
 40051e8:	3823883a 	mov	r17,r7
 40051ec:	003f9b06 	br	400505c <__ram_exceptions_end+0xfbfe4e14>
 40051f0:	2988b03a 	or	r4,r5,r6
 40051f4:	203f5c26 	beq	r4,zero,4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40051f8:	10bfffc4 	addi	r2,r2,-1
 40051fc:	1000931e 	bne	r2,zero,400544c <__subdf3+0x568>
 4005200:	898d883a 	add	r6,r17,r6
 4005204:	3463803a 	cmpltu	r17,r6,r17
 4005208:	1947883a 	add	r3,r3,r5
 400520c:	88c7883a 	add	r3,r17,r3
 4005210:	3023883a 	mov	r17,r6
 4005214:	003fd306 	br	4005164 <__ram_exceptions_end+0xfbfe4f1c>
 4005218:	1000541e 	bne	r2,zero,400536c <__subdf3+0x488>
 400521c:	80800044 	addi	r2,r16,1
 4005220:	1081ffcc 	andi	r2,r2,2047
 4005224:	01000044 	movi	r4,1
 4005228:	2080a20e 	bge	r4,r2,40054b4 <__subdf3+0x5d0>
 400522c:	8989c83a 	sub	r4,r17,r6
 4005230:	8905803a 	cmpltu	r2,r17,r4
 4005234:	1967c83a 	sub	r19,r3,r5
 4005238:	98a7c83a 	sub	r19,r19,r2
 400523c:	9880202c 	andhi	r2,r19,128
 4005240:	10006326 	beq	r2,zero,40053d0 <__subdf3+0x4ec>
 4005244:	3463c83a 	sub	r17,r6,r17
 4005248:	28c7c83a 	sub	r3,r5,r3
 400524c:	344d803a 	cmpltu	r6,r6,r17
 4005250:	19a7c83a 	sub	r19,r3,r6
 4005254:	3825883a 	mov	r18,r7
 4005258:	983f861e 	bne	r19,zero,4005074 <__ram_exceptions_end+0xfbfe4e2c>
 400525c:	8809883a 	mov	r4,r17
 4005260:	4005a4c0 	call	4005a4c <__clzsi2>
 4005264:	10800804 	addi	r2,r2,32
 4005268:	113ffe04 	addi	r4,r2,-8
 400526c:	00c007c4 	movi	r3,31
 4005270:	193f850e 	bge	r3,r4,4005088 <__ram_exceptions_end+0xfbfe4e40>
 4005274:	10bff604 	addi	r2,r2,-40
 4005278:	8884983a 	sll	r2,r17,r2
 400527c:	0023883a 	mov	r17,zero
 4005280:	243f880e 	bge	r4,r16,40050a4 <__ram_exceptions_end+0xfbfe4e5c>
 4005284:	00ffe034 	movhi	r3,65408
 4005288:	18ffffc4 	addi	r3,r3,-1
 400528c:	8121c83a 	sub	r16,r16,r4
 4005290:	10c6703a 	and	r3,r2,r3
 4005294:	003f3406 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005298:	9100004c 	andi	r4,r18,1
 400529c:	000b883a 	mov	r5,zero
 40052a0:	0005883a 	mov	r2,zero
 40052a4:	003f4806 	br	4004fc8 <__ram_exceptions_end+0xfbfe4d80>
 40052a8:	298cb03a 	or	r6,r5,r6
 40052ac:	300cc03a 	cmpne	r6,r6,zero
 40052b0:	0005883a 	mov	r2,zero
 40052b4:	003f6406 	br	4005048 <__ram_exceptions_end+0xfbfe4e00>
 40052b8:	10009a1e 	bne	r2,zero,4005524 <__subdf3+0x640>
 40052bc:	82400044 	addi	r9,r16,1
 40052c0:	4881ffcc 	andi	r2,r9,2047
 40052c4:	02800044 	movi	r10,1
 40052c8:	5080670e 	bge	r10,r2,4005468 <__subdf3+0x584>
 40052cc:	0081ffc4 	movi	r2,2047
 40052d0:	4880af26 	beq	r9,r2,4005590 <__subdf3+0x6ac>
 40052d4:	898d883a 	add	r6,r17,r6
 40052d8:	1945883a 	add	r2,r3,r5
 40052dc:	3447803a 	cmpltu	r3,r6,r17
 40052e0:	1887883a 	add	r3,r3,r2
 40052e4:	182297fa 	slli	r17,r3,31
 40052e8:	300cd07a 	srli	r6,r6,1
 40052ec:	1806d07a 	srli	r3,r3,1
 40052f0:	4821883a 	mov	r16,r9
 40052f4:	89a2b03a 	or	r17,r17,r6
 40052f8:	003f1b06 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40052fc:	0101ffc4 	movi	r4,2047
 4005300:	813f441e 	bne	r16,r4,4005014 <__ram_exceptions_end+0xfbfe4dcc>
 4005304:	003f1806 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005308:	843ff844 	addi	r16,r16,-31
 400530c:	01400804 	movi	r5,32
 4005310:	1408d83a 	srl	r4,r2,r16
 4005314:	19405026 	beq	r3,r5,4005458 <__subdf3+0x574>
 4005318:	01401004 	movi	r5,64
 400531c:	28c7c83a 	sub	r3,r5,r3
 4005320:	10c4983a 	sll	r2,r2,r3
 4005324:	88a2b03a 	or	r17,r17,r2
 4005328:	8822c03a 	cmpne	r17,r17,zero
 400532c:	2462b03a 	or	r17,r4,r17
 4005330:	0007883a 	mov	r3,zero
 4005334:	0021883a 	mov	r16,zero
 4005338:	003f6d06 	br	40050f0 <__ram_exceptions_end+0xfbfe4ea8>
 400533c:	11fff804 	addi	r7,r2,-32
 4005340:	01000804 	movi	r4,32
 4005344:	29ced83a 	srl	r7,r5,r7
 4005348:	11004526 	beq	r2,r4,4005460 <__subdf3+0x57c>
 400534c:	01001004 	movi	r4,64
 4005350:	2089c83a 	sub	r4,r4,r2
 4005354:	2904983a 	sll	r2,r5,r4
 4005358:	118cb03a 	or	r6,r2,r6
 400535c:	300cc03a 	cmpne	r6,r6,zero
 4005360:	398cb03a 	or	r6,r7,r6
 4005364:	0005883a 	mov	r2,zero
 4005368:	003f3706 	br	4005048 <__ram_exceptions_end+0xfbfe4e00>
 400536c:	80002a26 	beq	r16,zero,4005418 <__subdf3+0x534>
 4005370:	0101ffc4 	movi	r4,2047
 4005374:	49006626 	beq	r9,r4,4005510 <__subdf3+0x62c>
 4005378:	0085c83a 	sub	r2,zero,r2
 400537c:	18c02034 	orhi	r3,r3,128
 4005380:	01000e04 	movi	r4,56
 4005384:	20807e16 	blt	r4,r2,4005580 <__subdf3+0x69c>
 4005388:	010007c4 	movi	r4,31
 400538c:	2080e716 	blt	r4,r2,400572c <__subdf3+0x848>
 4005390:	01000804 	movi	r4,32
 4005394:	2089c83a 	sub	r4,r4,r2
 4005398:	1914983a 	sll	r10,r3,r4
 400539c:	8890d83a 	srl	r8,r17,r2
 40053a0:	8908983a 	sll	r4,r17,r4
 40053a4:	1884d83a 	srl	r2,r3,r2
 40053a8:	5222b03a 	or	r17,r10,r8
 40053ac:	2006c03a 	cmpne	r3,r4,zero
 40053b0:	88e2b03a 	or	r17,r17,r3
 40053b4:	3463c83a 	sub	r17,r6,r17
 40053b8:	2885c83a 	sub	r2,r5,r2
 40053bc:	344d803a 	cmpltu	r6,r6,r17
 40053c0:	1187c83a 	sub	r3,r2,r6
 40053c4:	4821883a 	mov	r16,r9
 40053c8:	3825883a 	mov	r18,r7
 40053cc:	003f2306 	br	400505c <__ram_exceptions_end+0xfbfe4e14>
 40053d0:	24d0b03a 	or	r8,r4,r19
 40053d4:	40001b1e 	bne	r8,zero,4005444 <__subdf3+0x560>
 40053d8:	0005883a 	mov	r2,zero
 40053dc:	0009883a 	mov	r4,zero
 40053e0:	0021883a 	mov	r16,zero
 40053e4:	003f4906 	br	400510c <__ram_exceptions_end+0xfbfe4ec4>
 40053e8:	010007c4 	movi	r4,31
 40053ec:	20803a16 	blt	r4,r2,40054d8 <__subdf3+0x5f4>
 40053f0:	01000804 	movi	r4,32
 40053f4:	2089c83a 	sub	r4,r4,r2
 40053f8:	2912983a 	sll	r9,r5,r4
 40053fc:	3090d83a 	srl	r8,r6,r2
 4005400:	3108983a 	sll	r4,r6,r4
 4005404:	2884d83a 	srl	r2,r5,r2
 4005408:	4a12b03a 	or	r9,r9,r8
 400540c:	2008c03a 	cmpne	r4,r4,zero
 4005410:	4912b03a 	or	r9,r9,r4
 4005414:	003f4e06 	br	4005150 <__ram_exceptions_end+0xfbfe4f08>
 4005418:	1c48b03a 	or	r4,r3,r17
 400541c:	20003c26 	beq	r4,zero,4005510 <__subdf3+0x62c>
 4005420:	0084303a 	nor	r2,zero,r2
 4005424:	1000381e 	bne	r2,zero,4005508 <__subdf3+0x624>
 4005428:	3463c83a 	sub	r17,r6,r17
 400542c:	28c5c83a 	sub	r2,r5,r3
 4005430:	344d803a 	cmpltu	r6,r6,r17
 4005434:	1187c83a 	sub	r3,r2,r6
 4005438:	4821883a 	mov	r16,r9
 400543c:	3825883a 	mov	r18,r7
 4005440:	003f0606 	br	400505c <__ram_exceptions_end+0xfbfe4e14>
 4005444:	2023883a 	mov	r17,r4
 4005448:	003f0906 	br	4005070 <__ram_exceptions_end+0xfbfe4e28>
 400544c:	0101ffc4 	movi	r4,2047
 4005450:	813f3a1e 	bne	r16,r4,400513c <__ram_exceptions_end+0xfbfe4ef4>
 4005454:	003ec406 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005458:	0005883a 	mov	r2,zero
 400545c:	003fb106 	br	4005324 <__ram_exceptions_end+0xfbfe50dc>
 4005460:	0005883a 	mov	r2,zero
 4005464:	003fbc06 	br	4005358 <__ram_exceptions_end+0xfbfe5110>
 4005468:	1c44b03a 	or	r2,r3,r17
 400546c:	80008e1e 	bne	r16,zero,40056a8 <__subdf3+0x7c4>
 4005470:	1000c826 	beq	r2,zero,4005794 <__subdf3+0x8b0>
 4005474:	2984b03a 	or	r2,r5,r6
 4005478:	103ebb26 	beq	r2,zero,4004f68 <__ram_exceptions_end+0xfbfe4d20>
 400547c:	8989883a 	add	r4,r17,r6
 4005480:	1945883a 	add	r2,r3,r5
 4005484:	2447803a 	cmpltu	r3,r4,r17
 4005488:	1887883a 	add	r3,r3,r2
 400548c:	1880202c 	andhi	r2,r3,128
 4005490:	2023883a 	mov	r17,r4
 4005494:	103f1626 	beq	r2,zero,40050f0 <__ram_exceptions_end+0xfbfe4ea8>
 4005498:	00bfe034 	movhi	r2,65408
 400549c:	10bfffc4 	addi	r2,r2,-1
 40054a0:	5021883a 	mov	r16,r10
 40054a4:	1886703a 	and	r3,r3,r2
 40054a8:	003eaf06 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40054ac:	3825883a 	mov	r18,r7
 40054b0:	003f0f06 	br	40050f0 <__ram_exceptions_end+0xfbfe4ea8>
 40054b4:	1c44b03a 	or	r2,r3,r17
 40054b8:	8000251e 	bne	r16,zero,4005550 <__subdf3+0x66c>
 40054bc:	1000661e 	bne	r2,zero,4005658 <__subdf3+0x774>
 40054c0:	2990b03a 	or	r8,r5,r6
 40054c4:	40009626 	beq	r8,zero,4005720 <__subdf3+0x83c>
 40054c8:	2807883a 	mov	r3,r5
 40054cc:	3023883a 	mov	r17,r6
 40054d0:	3825883a 	mov	r18,r7
 40054d4:	003ea406 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40054d8:	127ff804 	addi	r9,r2,-32
 40054dc:	01000804 	movi	r4,32
 40054e0:	2a52d83a 	srl	r9,r5,r9
 40054e4:	11008c26 	beq	r2,r4,4005718 <__subdf3+0x834>
 40054e8:	01001004 	movi	r4,64
 40054ec:	2085c83a 	sub	r2,r4,r2
 40054f0:	2884983a 	sll	r2,r5,r2
 40054f4:	118cb03a 	or	r6,r2,r6
 40054f8:	300cc03a 	cmpne	r6,r6,zero
 40054fc:	4992b03a 	or	r9,r9,r6
 4005500:	0005883a 	mov	r2,zero
 4005504:	003f1206 	br	4005150 <__ram_exceptions_end+0xfbfe4f08>
 4005508:	0101ffc4 	movi	r4,2047
 400550c:	493f9c1e 	bne	r9,r4,4005380 <__ram_exceptions_end+0xfbfe5138>
 4005510:	2807883a 	mov	r3,r5
 4005514:	3023883a 	mov	r17,r6
 4005518:	4821883a 	mov	r16,r9
 400551c:	3825883a 	mov	r18,r7
 4005520:	003e9106 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005524:	80001f1e 	bne	r16,zero,40055a4 <__subdf3+0x6c0>
 4005528:	1c48b03a 	or	r4,r3,r17
 400552c:	20005a26 	beq	r4,zero,4005698 <__subdf3+0x7b4>
 4005530:	0084303a 	nor	r2,zero,r2
 4005534:	1000561e 	bne	r2,zero,4005690 <__subdf3+0x7ac>
 4005538:	89a3883a 	add	r17,r17,r6
 400553c:	1945883a 	add	r2,r3,r5
 4005540:	898d803a 	cmpltu	r6,r17,r6
 4005544:	3087883a 	add	r3,r6,r2
 4005548:	4821883a 	mov	r16,r9
 400554c:	003f0506 	br	4005164 <__ram_exceptions_end+0xfbfe4f1c>
 4005550:	10002b1e 	bne	r2,zero,4005600 <__subdf3+0x71c>
 4005554:	2984b03a 	or	r2,r5,r6
 4005558:	10008026 	beq	r2,zero,400575c <__subdf3+0x878>
 400555c:	2807883a 	mov	r3,r5
 4005560:	3023883a 	mov	r17,r6
 4005564:	3825883a 	mov	r18,r7
 4005568:	0401ffc4 	movi	r16,2047
 400556c:	003e7e06 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005570:	3809883a 	mov	r4,r7
 4005574:	0011883a 	mov	r8,zero
 4005578:	0005883a 	mov	r2,zero
 400557c:	003ee306 	br	400510c <__ram_exceptions_end+0xfbfe4ec4>
 4005580:	1c62b03a 	or	r17,r3,r17
 4005584:	8822c03a 	cmpne	r17,r17,zero
 4005588:	0005883a 	mov	r2,zero
 400558c:	003f8906 	br	40053b4 <__ram_exceptions_end+0xfbfe516c>
 4005590:	3809883a 	mov	r4,r7
 4005594:	4821883a 	mov	r16,r9
 4005598:	0011883a 	mov	r8,zero
 400559c:	0005883a 	mov	r2,zero
 40055a0:	003eda06 	br	400510c <__ram_exceptions_end+0xfbfe4ec4>
 40055a4:	0101ffc4 	movi	r4,2047
 40055a8:	49003b26 	beq	r9,r4,4005698 <__subdf3+0x7b4>
 40055ac:	0085c83a 	sub	r2,zero,r2
 40055b0:	18c02034 	orhi	r3,r3,128
 40055b4:	01000e04 	movi	r4,56
 40055b8:	20806e16 	blt	r4,r2,4005774 <__subdf3+0x890>
 40055bc:	010007c4 	movi	r4,31
 40055c0:	20807716 	blt	r4,r2,40057a0 <__subdf3+0x8bc>
 40055c4:	01000804 	movi	r4,32
 40055c8:	2089c83a 	sub	r4,r4,r2
 40055cc:	1914983a 	sll	r10,r3,r4
 40055d0:	8890d83a 	srl	r8,r17,r2
 40055d4:	8908983a 	sll	r4,r17,r4
 40055d8:	1884d83a 	srl	r2,r3,r2
 40055dc:	5222b03a 	or	r17,r10,r8
 40055e0:	2006c03a 	cmpne	r3,r4,zero
 40055e4:	88e2b03a 	or	r17,r17,r3
 40055e8:	89a3883a 	add	r17,r17,r6
 40055ec:	1145883a 	add	r2,r2,r5
 40055f0:	898d803a 	cmpltu	r6,r17,r6
 40055f4:	3087883a 	add	r3,r6,r2
 40055f8:	4821883a 	mov	r16,r9
 40055fc:	003ed906 	br	4005164 <__ram_exceptions_end+0xfbfe4f1c>
 4005600:	2984b03a 	or	r2,r5,r6
 4005604:	10004226 	beq	r2,zero,4005710 <__subdf3+0x82c>
 4005608:	1808d0fa 	srli	r4,r3,3
 400560c:	8822d0fa 	srli	r17,r17,3
 4005610:	1806977a 	slli	r3,r3,29
 4005614:	2080022c 	andhi	r2,r4,8
 4005618:	1c62b03a 	or	r17,r3,r17
 400561c:	10000826 	beq	r2,zero,4005640 <__subdf3+0x75c>
 4005620:	2812d0fa 	srli	r9,r5,3
 4005624:	4880022c 	andhi	r2,r9,8
 4005628:	1000051e 	bne	r2,zero,4005640 <__subdf3+0x75c>
 400562c:	300cd0fa 	srli	r6,r6,3
 4005630:	2804977a 	slli	r2,r5,29
 4005634:	4809883a 	mov	r4,r9
 4005638:	3825883a 	mov	r18,r7
 400563c:	11a2b03a 	or	r17,r2,r6
 4005640:	8806d77a 	srli	r3,r17,29
 4005644:	200890fa 	slli	r4,r4,3
 4005648:	882290fa 	slli	r17,r17,3
 400564c:	0401ffc4 	movi	r16,2047
 4005650:	1906b03a 	or	r3,r3,r4
 4005654:	003e4406 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005658:	2984b03a 	or	r2,r5,r6
 400565c:	103e4226 	beq	r2,zero,4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005660:	8989c83a 	sub	r4,r17,r6
 4005664:	8911803a 	cmpltu	r8,r17,r4
 4005668:	1945c83a 	sub	r2,r3,r5
 400566c:	1205c83a 	sub	r2,r2,r8
 4005670:	1200202c 	andhi	r8,r2,128
 4005674:	403e9a26 	beq	r8,zero,40050e0 <__ram_exceptions_end+0xfbfe4e98>
 4005678:	3463c83a 	sub	r17,r6,r17
 400567c:	28c5c83a 	sub	r2,r5,r3
 4005680:	344d803a 	cmpltu	r6,r6,r17
 4005684:	1187c83a 	sub	r3,r2,r6
 4005688:	3825883a 	mov	r18,r7
 400568c:	003e3606 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005690:	0101ffc4 	movi	r4,2047
 4005694:	493fc71e 	bne	r9,r4,40055b4 <__ram_exceptions_end+0xfbfe536c>
 4005698:	2807883a 	mov	r3,r5
 400569c:	3023883a 	mov	r17,r6
 40056a0:	4821883a 	mov	r16,r9
 40056a4:	003e3006 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40056a8:	10003626 	beq	r2,zero,4005784 <__subdf3+0x8a0>
 40056ac:	2984b03a 	or	r2,r5,r6
 40056b0:	10001726 	beq	r2,zero,4005710 <__subdf3+0x82c>
 40056b4:	1808d0fa 	srli	r4,r3,3
 40056b8:	8822d0fa 	srli	r17,r17,3
 40056bc:	1806977a 	slli	r3,r3,29
 40056c0:	2080022c 	andhi	r2,r4,8
 40056c4:	1c62b03a 	or	r17,r3,r17
 40056c8:	10000726 	beq	r2,zero,40056e8 <__subdf3+0x804>
 40056cc:	2812d0fa 	srli	r9,r5,3
 40056d0:	4880022c 	andhi	r2,r9,8
 40056d4:	1000041e 	bne	r2,zero,40056e8 <__subdf3+0x804>
 40056d8:	300cd0fa 	srli	r6,r6,3
 40056dc:	2804977a 	slli	r2,r5,29
 40056e0:	4809883a 	mov	r4,r9
 40056e4:	11a2b03a 	or	r17,r2,r6
 40056e8:	8806d77a 	srli	r3,r17,29
 40056ec:	200890fa 	slli	r4,r4,3
 40056f0:	882290fa 	slli	r17,r17,3
 40056f4:	3825883a 	mov	r18,r7
 40056f8:	1906b03a 	or	r3,r3,r4
 40056fc:	0401ffc4 	movi	r16,2047
 4005700:	003e1906 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005704:	000b883a 	mov	r5,zero
 4005708:	0005883a 	mov	r2,zero
 400570c:	003e2e06 	br	4004fc8 <__ram_exceptions_end+0xfbfe4d80>
 4005710:	0401ffc4 	movi	r16,2047
 4005714:	003e1406 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005718:	0005883a 	mov	r2,zero
 400571c:	003f7506 	br	40054f4 <__ram_exceptions_end+0xfbfe52ac>
 4005720:	0005883a 	mov	r2,zero
 4005724:	0009883a 	mov	r4,zero
 4005728:	003e7806 	br	400510c <__ram_exceptions_end+0xfbfe4ec4>
 400572c:	123ff804 	addi	r8,r2,-32
 4005730:	01000804 	movi	r4,32
 4005734:	1a10d83a 	srl	r8,r3,r8
 4005738:	11002526 	beq	r2,r4,40057d0 <__subdf3+0x8ec>
 400573c:	01001004 	movi	r4,64
 4005740:	2085c83a 	sub	r2,r4,r2
 4005744:	1884983a 	sll	r2,r3,r2
 4005748:	1444b03a 	or	r2,r2,r17
 400574c:	1004c03a 	cmpne	r2,r2,zero
 4005750:	40a2b03a 	or	r17,r8,r2
 4005754:	0005883a 	mov	r2,zero
 4005758:	003f1606 	br	40053b4 <__ram_exceptions_end+0xfbfe516c>
 400575c:	02000434 	movhi	r8,16
 4005760:	0009883a 	mov	r4,zero
 4005764:	423fffc4 	addi	r8,r8,-1
 4005768:	00bfffc4 	movi	r2,-1
 400576c:	0401ffc4 	movi	r16,2047
 4005770:	003e6606 	br	400510c <__ram_exceptions_end+0xfbfe4ec4>
 4005774:	1c62b03a 	or	r17,r3,r17
 4005778:	8822c03a 	cmpne	r17,r17,zero
 400577c:	0005883a 	mov	r2,zero
 4005780:	003f9906 	br	40055e8 <__ram_exceptions_end+0xfbfe53a0>
 4005784:	2807883a 	mov	r3,r5
 4005788:	3023883a 	mov	r17,r6
 400578c:	0401ffc4 	movi	r16,2047
 4005790:	003df506 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 4005794:	2807883a 	mov	r3,r5
 4005798:	3023883a 	mov	r17,r6
 400579c:	003df206 	br	4004f68 <__ram_exceptions_end+0xfbfe4d20>
 40057a0:	123ff804 	addi	r8,r2,-32
 40057a4:	01000804 	movi	r4,32
 40057a8:	1a10d83a 	srl	r8,r3,r8
 40057ac:	11000a26 	beq	r2,r4,40057d8 <__subdf3+0x8f4>
 40057b0:	01001004 	movi	r4,64
 40057b4:	2085c83a 	sub	r2,r4,r2
 40057b8:	1884983a 	sll	r2,r3,r2
 40057bc:	1444b03a 	or	r2,r2,r17
 40057c0:	1004c03a 	cmpne	r2,r2,zero
 40057c4:	40a2b03a 	or	r17,r8,r2
 40057c8:	0005883a 	mov	r2,zero
 40057cc:	003f8606 	br	40055e8 <__ram_exceptions_end+0xfbfe53a0>
 40057d0:	0005883a 	mov	r2,zero
 40057d4:	003fdc06 	br	4005748 <__ram_exceptions_end+0xfbfe5500>
 40057d8:	0005883a 	mov	r2,zero
 40057dc:	003ff706 	br	40057bc <__ram_exceptions_end+0xfbfe5574>

040057e0 <__fixdfsi>:
 40057e0:	280cd53a 	srli	r6,r5,20
 40057e4:	00c00434 	movhi	r3,16
 40057e8:	18ffffc4 	addi	r3,r3,-1
 40057ec:	3181ffcc 	andi	r6,r6,2047
 40057f0:	01c0ff84 	movi	r7,1022
 40057f4:	28c6703a 	and	r3,r5,r3
 40057f8:	280ad7fa 	srli	r5,r5,31
 40057fc:	3980120e 	bge	r7,r6,4005848 <__fixdfsi+0x68>
 4005800:	00810744 	movi	r2,1053
 4005804:	11800c16 	blt	r2,r6,4005838 <__fixdfsi+0x58>
 4005808:	00810cc4 	movi	r2,1075
 400580c:	1185c83a 	sub	r2,r2,r6
 4005810:	01c007c4 	movi	r7,31
 4005814:	18c00434 	orhi	r3,r3,16
 4005818:	38800d16 	blt	r7,r2,4005850 <__fixdfsi+0x70>
 400581c:	31befb44 	addi	r6,r6,-1043
 4005820:	2084d83a 	srl	r2,r4,r2
 4005824:	1986983a 	sll	r3,r3,r6
 4005828:	1884b03a 	or	r2,r3,r2
 400582c:	28000726 	beq	r5,zero,400584c <__fixdfsi+0x6c>
 4005830:	0085c83a 	sub	r2,zero,r2
 4005834:	f800283a 	ret
 4005838:	00a00034 	movhi	r2,32768
 400583c:	10bfffc4 	addi	r2,r2,-1
 4005840:	2885883a 	add	r2,r5,r2
 4005844:	f800283a 	ret
 4005848:	0005883a 	mov	r2,zero
 400584c:	f800283a 	ret
 4005850:	008104c4 	movi	r2,1043
 4005854:	1185c83a 	sub	r2,r2,r6
 4005858:	1884d83a 	srl	r2,r3,r2
 400585c:	003ff306 	br	400582c <__ram_exceptions_end+0xfbfe55e4>

04005860 <__floatsidf>:
 4005860:	defffd04 	addi	sp,sp,-12
 4005864:	dfc00215 	stw	ra,8(sp)
 4005868:	dc400115 	stw	r17,4(sp)
 400586c:	dc000015 	stw	r16,0(sp)
 4005870:	20002b26 	beq	r4,zero,4005920 <__floatsidf+0xc0>
 4005874:	2023883a 	mov	r17,r4
 4005878:	2020d7fa 	srli	r16,r4,31
 400587c:	20002d16 	blt	r4,zero,4005934 <__floatsidf+0xd4>
 4005880:	8809883a 	mov	r4,r17
 4005884:	4005a4c0 	call	4005a4c <__clzsi2>
 4005888:	01410784 	movi	r5,1054
 400588c:	288bc83a 	sub	r5,r5,r2
 4005890:	01010cc4 	movi	r4,1075
 4005894:	2149c83a 	sub	r4,r4,r5
 4005898:	00c007c4 	movi	r3,31
 400589c:	1900160e 	bge	r3,r4,40058f8 <__floatsidf+0x98>
 40058a0:	00c104c4 	movi	r3,1043
 40058a4:	1947c83a 	sub	r3,r3,r5
 40058a8:	88c6983a 	sll	r3,r17,r3
 40058ac:	00800434 	movhi	r2,16
 40058b0:	10bfffc4 	addi	r2,r2,-1
 40058b4:	1886703a 	and	r3,r3,r2
 40058b8:	2941ffcc 	andi	r5,r5,2047
 40058bc:	800d883a 	mov	r6,r16
 40058c0:	0005883a 	mov	r2,zero
 40058c4:	280a953a 	slli	r5,r5,20
 40058c8:	31803fcc 	andi	r6,r6,255
 40058cc:	01000434 	movhi	r4,16
 40058d0:	300c97fa 	slli	r6,r6,31
 40058d4:	213fffc4 	addi	r4,r4,-1
 40058d8:	1906703a 	and	r3,r3,r4
 40058dc:	1946b03a 	or	r3,r3,r5
 40058e0:	1986b03a 	or	r3,r3,r6
 40058e4:	dfc00217 	ldw	ra,8(sp)
 40058e8:	dc400117 	ldw	r17,4(sp)
 40058ec:	dc000017 	ldw	r16,0(sp)
 40058f0:	dec00304 	addi	sp,sp,12
 40058f4:	f800283a 	ret
 40058f8:	00c002c4 	movi	r3,11
 40058fc:	1887c83a 	sub	r3,r3,r2
 4005900:	88c6d83a 	srl	r3,r17,r3
 4005904:	8904983a 	sll	r2,r17,r4
 4005908:	01000434 	movhi	r4,16
 400590c:	213fffc4 	addi	r4,r4,-1
 4005910:	2941ffcc 	andi	r5,r5,2047
 4005914:	1906703a 	and	r3,r3,r4
 4005918:	800d883a 	mov	r6,r16
 400591c:	003fe906 	br	40058c4 <__ram_exceptions_end+0xfbfe567c>
 4005920:	000d883a 	mov	r6,zero
 4005924:	000b883a 	mov	r5,zero
 4005928:	0007883a 	mov	r3,zero
 400592c:	0005883a 	mov	r2,zero
 4005930:	003fe406 	br	40058c4 <__ram_exceptions_end+0xfbfe567c>
 4005934:	0123c83a 	sub	r17,zero,r4
 4005938:	003fd106 	br	4005880 <__ram_exceptions_end+0xfbfe5638>

0400593c <__extendsfdf2>:
 400593c:	200ad5fa 	srli	r5,r4,23
 4005940:	defffd04 	addi	sp,sp,-12
 4005944:	dc400115 	stw	r17,4(sp)
 4005948:	29403fcc 	andi	r5,r5,255
 400594c:	29800044 	addi	r6,r5,1
 4005950:	04402034 	movhi	r17,128
 4005954:	dc000015 	stw	r16,0(sp)
 4005958:	8c7fffc4 	addi	r17,r17,-1
 400595c:	dfc00215 	stw	ra,8(sp)
 4005960:	31803fcc 	andi	r6,r6,255
 4005964:	00800044 	movi	r2,1
 4005968:	8922703a 	and	r17,r17,r4
 400596c:	2020d7fa 	srli	r16,r4,31
 4005970:	1180110e 	bge	r2,r6,40059b8 <__extendsfdf2+0x7c>
 4005974:	880cd0fa 	srli	r6,r17,3
 4005978:	8822977a 	slli	r17,r17,29
 400597c:	2940e004 	addi	r5,r5,896
 4005980:	2941ffcc 	andi	r5,r5,2047
 4005984:	2804953a 	slli	r2,r5,20
 4005988:	01400434 	movhi	r5,16
 400598c:	800697fa 	slli	r3,r16,31
 4005990:	297fffc4 	addi	r5,r5,-1
 4005994:	314a703a 	and	r5,r6,r5
 4005998:	288ab03a 	or	r5,r5,r2
 400599c:	28c6b03a 	or	r3,r5,r3
 40059a0:	8805883a 	mov	r2,r17
 40059a4:	dfc00217 	ldw	ra,8(sp)
 40059a8:	dc400117 	ldw	r17,4(sp)
 40059ac:	dc000017 	ldw	r16,0(sp)
 40059b0:	dec00304 	addi	sp,sp,12
 40059b4:	f800283a 	ret
 40059b8:	2800111e 	bne	r5,zero,4005a00 <__extendsfdf2+0xc4>
 40059bc:	88001c26 	beq	r17,zero,4005a30 <__extendsfdf2+0xf4>
 40059c0:	8809883a 	mov	r4,r17
 40059c4:	4005a4c0 	call	4005a4c <__clzsi2>
 40059c8:	00c00284 	movi	r3,10
 40059cc:	18801b16 	blt	r3,r2,4005a3c <__extendsfdf2+0x100>
 40059d0:	018002c4 	movi	r6,11
 40059d4:	308dc83a 	sub	r6,r6,r2
 40059d8:	11000544 	addi	r4,r2,21
 40059dc:	8986d83a 	srl	r3,r17,r6
 40059e0:	8922983a 	sll	r17,r17,r4
 40059e4:	0180e244 	movi	r6,905
 40059e8:	01400434 	movhi	r5,16
 40059ec:	3085c83a 	sub	r2,r6,r2
 40059f0:	297fffc4 	addi	r5,r5,-1
 40059f4:	194c703a 	and	r6,r3,r5
 40059f8:	1141ffcc 	andi	r5,r2,2047
 40059fc:	003fe006 	br	4005980 <__ram_exceptions_end+0xfbfe5738>
 4005a00:	88000826 	beq	r17,zero,4005a24 <__extendsfdf2+0xe8>
 4005a04:	880cd0fa 	srli	r6,r17,3
 4005a08:	00800434 	movhi	r2,16
 4005a0c:	10bfffc4 	addi	r2,r2,-1
 4005a10:	31800234 	orhi	r6,r6,8
 4005a14:	8822977a 	slli	r17,r17,29
 4005a18:	308c703a 	and	r6,r6,r2
 4005a1c:	0141ffc4 	movi	r5,2047
 4005a20:	003fd706 	br	4005980 <__ram_exceptions_end+0xfbfe5738>
 4005a24:	0141ffc4 	movi	r5,2047
 4005a28:	000d883a 	mov	r6,zero
 4005a2c:	003fd406 	br	4005980 <__ram_exceptions_end+0xfbfe5738>
 4005a30:	000b883a 	mov	r5,zero
 4005a34:	000d883a 	mov	r6,zero
 4005a38:	003fd106 	br	4005980 <__ram_exceptions_end+0xfbfe5738>
 4005a3c:	11bffd44 	addi	r6,r2,-11
 4005a40:	8986983a 	sll	r3,r17,r6
 4005a44:	0023883a 	mov	r17,zero
 4005a48:	003fe606 	br	40059e4 <__ram_exceptions_end+0xfbfe579c>

04005a4c <__clzsi2>:
 4005a4c:	00bfffd4 	movui	r2,65535
 4005a50:	11000536 	bltu	r2,r4,4005a68 <__clzsi2+0x1c>
 4005a54:	00803fc4 	movi	r2,255
 4005a58:	11000f36 	bltu	r2,r4,4005a98 <__clzsi2+0x4c>
 4005a5c:	00800804 	movi	r2,32
 4005a60:	0007883a 	mov	r3,zero
 4005a64:	00000506 	br	4005a7c <__clzsi2+0x30>
 4005a68:	00804034 	movhi	r2,256
 4005a6c:	10bfffc4 	addi	r2,r2,-1
 4005a70:	11000c2e 	bgeu	r2,r4,4005aa4 <__clzsi2+0x58>
 4005a74:	00800204 	movi	r2,8
 4005a78:	00c00604 	movi	r3,24
 4005a7c:	20c8d83a 	srl	r4,r4,r3
 4005a80:	00c10074 	movhi	r3,1025
 4005a84:	18efc004 	addi	r3,r3,-16640
 4005a88:	1909883a 	add	r4,r3,r4
 4005a8c:	20c00003 	ldbu	r3,0(r4)
 4005a90:	10c5c83a 	sub	r2,r2,r3
 4005a94:	f800283a 	ret
 4005a98:	00800604 	movi	r2,24
 4005a9c:	00c00204 	movi	r3,8
 4005aa0:	003ff606 	br	4005a7c <__ram_exceptions_end+0xfbfe5834>
 4005aa4:	00800404 	movi	r2,16
 4005aa8:	1007883a 	mov	r3,r2
 4005aac:	003ff306 	br	4005a7c <__ram_exceptions_end+0xfbfe5834>

04005ab0 <_puts_r>:
 4005ab0:	defff604 	addi	sp,sp,-40
 4005ab4:	dc000715 	stw	r16,28(sp)
 4005ab8:	2021883a 	mov	r16,r4
 4005abc:	2809883a 	mov	r4,r5
 4005ac0:	dc400815 	stw	r17,32(sp)
 4005ac4:	dfc00915 	stw	ra,36(sp)
 4005ac8:	2823883a 	mov	r17,r5
 4005acc:	4005b840 	call	4005b84 <strlen>
 4005ad0:	10c00044 	addi	r3,r2,1
 4005ad4:	d8800115 	stw	r2,4(sp)
 4005ad8:	00810074 	movhi	r2,1025
 4005adc:	10b00004 	addi	r2,r2,-16384
 4005ae0:	d8800215 	stw	r2,8(sp)
 4005ae4:	00800044 	movi	r2,1
 4005ae8:	d8800315 	stw	r2,12(sp)
 4005aec:	00800084 	movi	r2,2
 4005af0:	dc400015 	stw	r17,0(sp)
 4005af4:	d8c00615 	stw	r3,24(sp)
 4005af8:	dec00415 	stw	sp,16(sp)
 4005afc:	d8800515 	stw	r2,20(sp)
 4005b00:	80000226 	beq	r16,zero,4005b0c <_puts_r+0x5c>
 4005b04:	80800e17 	ldw	r2,56(r16)
 4005b08:	10001426 	beq	r2,zero,4005b5c <_puts_r+0xac>
 4005b0c:	81400217 	ldw	r5,8(r16)
 4005b10:	2880030b 	ldhu	r2,12(r5)
 4005b14:	10c8000c 	andi	r3,r2,8192
 4005b18:	1800061e 	bne	r3,zero,4005b34 <_puts_r+0x84>
 4005b1c:	29001917 	ldw	r4,100(r5)
 4005b20:	00f7ffc4 	movi	r3,-8193
 4005b24:	10880014 	ori	r2,r2,8192
 4005b28:	20c6703a 	and	r3,r4,r3
 4005b2c:	2880030d 	sth	r2,12(r5)
 4005b30:	28c01915 	stw	r3,100(r5)
 4005b34:	d9800404 	addi	r6,sp,16
 4005b38:	8009883a 	mov	r4,r16
 4005b3c:	4005fbc0 	call	4005fbc <__sfvwrite_r>
 4005b40:	1000091e 	bne	r2,zero,4005b68 <_puts_r+0xb8>
 4005b44:	00800284 	movi	r2,10
 4005b48:	dfc00917 	ldw	ra,36(sp)
 4005b4c:	dc400817 	ldw	r17,32(sp)
 4005b50:	dc000717 	ldw	r16,28(sp)
 4005b54:	dec00a04 	addi	sp,sp,40
 4005b58:	f800283a 	ret
 4005b5c:	8009883a 	mov	r4,r16
 4005b60:	4005f6c0 	call	4005f6c <__sinit>
 4005b64:	003fe906 	br	4005b0c <__ram_exceptions_end+0xfbfe58c4>
 4005b68:	00bfffc4 	movi	r2,-1
 4005b6c:	003ff606 	br	4005b48 <__ram_exceptions_end+0xfbfe5900>

04005b70 <puts>:
 4005b70:	00810074 	movhi	r2,1025
 4005b74:	10b6c104 	addi	r2,r2,-9468
 4005b78:	200b883a 	mov	r5,r4
 4005b7c:	11000017 	ldw	r4,0(r2)
 4005b80:	4005ab01 	jmpi	4005ab0 <_puts_r>

04005b84 <strlen>:
 4005b84:	208000cc 	andi	r2,r4,3
 4005b88:	10002026 	beq	r2,zero,4005c0c <strlen+0x88>
 4005b8c:	20800007 	ldb	r2,0(r4)
 4005b90:	10002026 	beq	r2,zero,4005c14 <strlen+0x90>
 4005b94:	2005883a 	mov	r2,r4
 4005b98:	00000206 	br	4005ba4 <strlen+0x20>
 4005b9c:	10c00007 	ldb	r3,0(r2)
 4005ba0:	18001826 	beq	r3,zero,4005c04 <strlen+0x80>
 4005ba4:	10800044 	addi	r2,r2,1
 4005ba8:	10c000cc 	andi	r3,r2,3
 4005bac:	183ffb1e 	bne	r3,zero,4005b9c <__ram_exceptions_end+0xfbfe5954>
 4005bb0:	10c00017 	ldw	r3,0(r2)
 4005bb4:	01ffbff4 	movhi	r7,65279
 4005bb8:	39ffbfc4 	addi	r7,r7,-257
 4005bbc:	00ca303a 	nor	r5,zero,r3
 4005bc0:	01a02074 	movhi	r6,32897
 4005bc4:	19c7883a 	add	r3,r3,r7
 4005bc8:	31a02004 	addi	r6,r6,-32640
 4005bcc:	1946703a 	and	r3,r3,r5
 4005bd0:	1986703a 	and	r3,r3,r6
 4005bd4:	1800091e 	bne	r3,zero,4005bfc <strlen+0x78>
 4005bd8:	10800104 	addi	r2,r2,4
 4005bdc:	10c00017 	ldw	r3,0(r2)
 4005be0:	19cb883a 	add	r5,r3,r7
 4005be4:	00c6303a 	nor	r3,zero,r3
 4005be8:	28c6703a 	and	r3,r5,r3
 4005bec:	1986703a 	and	r3,r3,r6
 4005bf0:	183ff926 	beq	r3,zero,4005bd8 <__ram_exceptions_end+0xfbfe5990>
 4005bf4:	00000106 	br	4005bfc <strlen+0x78>
 4005bf8:	10800044 	addi	r2,r2,1
 4005bfc:	10c00007 	ldb	r3,0(r2)
 4005c00:	183ffd1e 	bne	r3,zero,4005bf8 <__ram_exceptions_end+0xfbfe59b0>
 4005c04:	1105c83a 	sub	r2,r2,r4
 4005c08:	f800283a 	ret
 4005c0c:	2005883a 	mov	r2,r4
 4005c10:	003fe706 	br	4005bb0 <__ram_exceptions_end+0xfbfe5968>
 4005c14:	0005883a 	mov	r2,zero
 4005c18:	f800283a 	ret

04005c1c <__fp_unlock>:
 4005c1c:	0005883a 	mov	r2,zero
 4005c20:	f800283a 	ret

04005c24 <_cleanup_r>:
 4005c24:	01410034 	movhi	r5,1024
 4005c28:	295eee04 	addi	r5,r5,31672
 4005c2c:	400653c1 	jmpi	400653c <_fwalk_reent>

04005c30 <__sinit.part.1>:
 4005c30:	defff704 	addi	sp,sp,-36
 4005c34:	00c10034 	movhi	r3,1024
 4005c38:	dfc00815 	stw	ra,32(sp)
 4005c3c:	ddc00715 	stw	r23,28(sp)
 4005c40:	dd800615 	stw	r22,24(sp)
 4005c44:	dd400515 	stw	r21,20(sp)
 4005c48:	dd000415 	stw	r20,16(sp)
 4005c4c:	dcc00315 	stw	r19,12(sp)
 4005c50:	dc800215 	stw	r18,8(sp)
 4005c54:	dc400115 	stw	r17,4(sp)
 4005c58:	dc000015 	stw	r16,0(sp)
 4005c5c:	18d70904 	addi	r3,r3,23588
 4005c60:	24000117 	ldw	r16,4(r4)
 4005c64:	20c00f15 	stw	r3,60(r4)
 4005c68:	2080bb04 	addi	r2,r4,748
 4005c6c:	00c000c4 	movi	r3,3
 4005c70:	20c0b915 	stw	r3,740(r4)
 4005c74:	2080ba15 	stw	r2,744(r4)
 4005c78:	2000b815 	stw	zero,736(r4)
 4005c7c:	05c00204 	movi	r23,8
 4005c80:	00800104 	movi	r2,4
 4005c84:	2025883a 	mov	r18,r4
 4005c88:	b80d883a 	mov	r6,r23
 4005c8c:	81001704 	addi	r4,r16,92
 4005c90:	000b883a 	mov	r5,zero
 4005c94:	80000015 	stw	zero,0(r16)
 4005c98:	80000115 	stw	zero,4(r16)
 4005c9c:	80000215 	stw	zero,8(r16)
 4005ca0:	8080030d 	sth	r2,12(r16)
 4005ca4:	80001915 	stw	zero,100(r16)
 4005ca8:	8000038d 	sth	zero,14(r16)
 4005cac:	80000415 	stw	zero,16(r16)
 4005cb0:	80000515 	stw	zero,20(r16)
 4005cb4:	80000615 	stw	zero,24(r16)
 4005cb8:	40071940 	call	4007194 <memset>
 4005cbc:	05810034 	movhi	r22,1024
 4005cc0:	94400217 	ldw	r17,8(r18)
 4005cc4:	05410034 	movhi	r21,1024
 4005cc8:	05010034 	movhi	r20,1024
 4005ccc:	04c10034 	movhi	r19,1024
 4005cd0:	b59e1d04 	addi	r22,r22,30836
 4005cd4:	ad5e3404 	addi	r21,r21,30928
 4005cd8:	a51e5304 	addi	r20,r20,31052
 4005cdc:	9cde6a04 	addi	r19,r19,31144
 4005ce0:	85800815 	stw	r22,32(r16)
 4005ce4:	85400915 	stw	r21,36(r16)
 4005ce8:	85000a15 	stw	r20,40(r16)
 4005cec:	84c00b15 	stw	r19,44(r16)
 4005cf0:	84000715 	stw	r16,28(r16)
 4005cf4:	00800284 	movi	r2,10
 4005cf8:	8880030d 	sth	r2,12(r17)
 4005cfc:	00800044 	movi	r2,1
 4005d00:	b80d883a 	mov	r6,r23
 4005d04:	89001704 	addi	r4,r17,92
 4005d08:	000b883a 	mov	r5,zero
 4005d0c:	88000015 	stw	zero,0(r17)
 4005d10:	88000115 	stw	zero,4(r17)
 4005d14:	88000215 	stw	zero,8(r17)
 4005d18:	88001915 	stw	zero,100(r17)
 4005d1c:	8880038d 	sth	r2,14(r17)
 4005d20:	88000415 	stw	zero,16(r17)
 4005d24:	88000515 	stw	zero,20(r17)
 4005d28:	88000615 	stw	zero,24(r17)
 4005d2c:	40071940 	call	4007194 <memset>
 4005d30:	94000317 	ldw	r16,12(r18)
 4005d34:	00800484 	movi	r2,18
 4005d38:	8c400715 	stw	r17,28(r17)
 4005d3c:	8d800815 	stw	r22,32(r17)
 4005d40:	8d400915 	stw	r21,36(r17)
 4005d44:	8d000a15 	stw	r20,40(r17)
 4005d48:	8cc00b15 	stw	r19,44(r17)
 4005d4c:	8080030d 	sth	r2,12(r16)
 4005d50:	00800084 	movi	r2,2
 4005d54:	80000015 	stw	zero,0(r16)
 4005d58:	80000115 	stw	zero,4(r16)
 4005d5c:	80000215 	stw	zero,8(r16)
 4005d60:	80001915 	stw	zero,100(r16)
 4005d64:	8080038d 	sth	r2,14(r16)
 4005d68:	80000415 	stw	zero,16(r16)
 4005d6c:	80000515 	stw	zero,20(r16)
 4005d70:	80000615 	stw	zero,24(r16)
 4005d74:	b80d883a 	mov	r6,r23
 4005d78:	000b883a 	mov	r5,zero
 4005d7c:	81001704 	addi	r4,r16,92
 4005d80:	40071940 	call	4007194 <memset>
 4005d84:	00800044 	movi	r2,1
 4005d88:	84000715 	stw	r16,28(r16)
 4005d8c:	85800815 	stw	r22,32(r16)
 4005d90:	85400915 	stw	r21,36(r16)
 4005d94:	85000a15 	stw	r20,40(r16)
 4005d98:	84c00b15 	stw	r19,44(r16)
 4005d9c:	90800e15 	stw	r2,56(r18)
 4005da0:	dfc00817 	ldw	ra,32(sp)
 4005da4:	ddc00717 	ldw	r23,28(sp)
 4005da8:	dd800617 	ldw	r22,24(sp)
 4005dac:	dd400517 	ldw	r21,20(sp)
 4005db0:	dd000417 	ldw	r20,16(sp)
 4005db4:	dcc00317 	ldw	r19,12(sp)
 4005db8:	dc800217 	ldw	r18,8(sp)
 4005dbc:	dc400117 	ldw	r17,4(sp)
 4005dc0:	dc000017 	ldw	r16,0(sp)
 4005dc4:	dec00904 	addi	sp,sp,36
 4005dc8:	f800283a 	ret

04005dcc <__fp_lock>:
 4005dcc:	0005883a 	mov	r2,zero
 4005dd0:	f800283a 	ret

04005dd4 <__sfmoreglue>:
 4005dd4:	defffc04 	addi	sp,sp,-16
 4005dd8:	dc400115 	stw	r17,4(sp)
 4005ddc:	2c7fffc4 	addi	r17,r5,-1
 4005de0:	8c401a24 	muli	r17,r17,104
 4005de4:	dc800215 	stw	r18,8(sp)
 4005de8:	2825883a 	mov	r18,r5
 4005dec:	89401d04 	addi	r5,r17,116
 4005df0:	dc000015 	stw	r16,0(sp)
 4005df4:	dfc00315 	stw	ra,12(sp)
 4005df8:	40066000 	call	4006600 <_malloc_r>
 4005dfc:	1021883a 	mov	r16,r2
 4005e00:	10000726 	beq	r2,zero,4005e20 <__sfmoreglue+0x4c>
 4005e04:	11000304 	addi	r4,r2,12
 4005e08:	10000015 	stw	zero,0(r2)
 4005e0c:	14800115 	stw	r18,4(r2)
 4005e10:	11000215 	stw	r4,8(r2)
 4005e14:	89801a04 	addi	r6,r17,104
 4005e18:	000b883a 	mov	r5,zero
 4005e1c:	40071940 	call	4007194 <memset>
 4005e20:	8005883a 	mov	r2,r16
 4005e24:	dfc00317 	ldw	ra,12(sp)
 4005e28:	dc800217 	ldw	r18,8(sp)
 4005e2c:	dc400117 	ldw	r17,4(sp)
 4005e30:	dc000017 	ldw	r16,0(sp)
 4005e34:	dec00404 	addi	sp,sp,16
 4005e38:	f800283a 	ret

04005e3c <__sfp>:
 4005e3c:	defffb04 	addi	sp,sp,-20
 4005e40:	dc000015 	stw	r16,0(sp)
 4005e44:	04010074 	movhi	r16,1025
 4005e48:	8436c004 	addi	r16,r16,-9472
 4005e4c:	dcc00315 	stw	r19,12(sp)
 4005e50:	2027883a 	mov	r19,r4
 4005e54:	81000017 	ldw	r4,0(r16)
 4005e58:	dfc00415 	stw	ra,16(sp)
 4005e5c:	dc800215 	stw	r18,8(sp)
 4005e60:	20800e17 	ldw	r2,56(r4)
 4005e64:	dc400115 	stw	r17,4(sp)
 4005e68:	1000021e 	bne	r2,zero,4005e74 <__sfp+0x38>
 4005e6c:	4005c300 	call	4005c30 <__sinit.part.1>
 4005e70:	81000017 	ldw	r4,0(r16)
 4005e74:	2480b804 	addi	r18,r4,736
 4005e78:	047fffc4 	movi	r17,-1
 4005e7c:	91000117 	ldw	r4,4(r18)
 4005e80:	94000217 	ldw	r16,8(r18)
 4005e84:	213fffc4 	addi	r4,r4,-1
 4005e88:	20000a16 	blt	r4,zero,4005eb4 <__sfp+0x78>
 4005e8c:	8080030f 	ldh	r2,12(r16)
 4005e90:	10000c26 	beq	r2,zero,4005ec4 <__sfp+0x88>
 4005e94:	80c01d04 	addi	r3,r16,116
 4005e98:	00000206 	br	4005ea4 <__sfp+0x68>
 4005e9c:	18bfe60f 	ldh	r2,-104(r3)
 4005ea0:	10000826 	beq	r2,zero,4005ec4 <__sfp+0x88>
 4005ea4:	213fffc4 	addi	r4,r4,-1
 4005ea8:	1c3ffd04 	addi	r16,r3,-12
 4005eac:	18c01a04 	addi	r3,r3,104
 4005eb0:	247ffa1e 	bne	r4,r17,4005e9c <__ram_exceptions_end+0xfbfe5c54>
 4005eb4:	90800017 	ldw	r2,0(r18)
 4005eb8:	10001d26 	beq	r2,zero,4005f30 <__sfp+0xf4>
 4005ebc:	1025883a 	mov	r18,r2
 4005ec0:	003fee06 	br	4005e7c <__ram_exceptions_end+0xfbfe5c34>
 4005ec4:	00bfffc4 	movi	r2,-1
 4005ec8:	8080038d 	sth	r2,14(r16)
 4005ecc:	00800044 	movi	r2,1
 4005ed0:	8080030d 	sth	r2,12(r16)
 4005ed4:	80001915 	stw	zero,100(r16)
 4005ed8:	80000015 	stw	zero,0(r16)
 4005edc:	80000215 	stw	zero,8(r16)
 4005ee0:	80000115 	stw	zero,4(r16)
 4005ee4:	80000415 	stw	zero,16(r16)
 4005ee8:	80000515 	stw	zero,20(r16)
 4005eec:	80000615 	stw	zero,24(r16)
 4005ef0:	01800204 	movi	r6,8
 4005ef4:	000b883a 	mov	r5,zero
 4005ef8:	81001704 	addi	r4,r16,92
 4005efc:	40071940 	call	4007194 <memset>
 4005f00:	8005883a 	mov	r2,r16
 4005f04:	80000c15 	stw	zero,48(r16)
 4005f08:	80000d15 	stw	zero,52(r16)
 4005f0c:	80001115 	stw	zero,68(r16)
 4005f10:	80001215 	stw	zero,72(r16)
 4005f14:	dfc00417 	ldw	ra,16(sp)
 4005f18:	dcc00317 	ldw	r19,12(sp)
 4005f1c:	dc800217 	ldw	r18,8(sp)
 4005f20:	dc400117 	ldw	r17,4(sp)
 4005f24:	dc000017 	ldw	r16,0(sp)
 4005f28:	dec00504 	addi	sp,sp,20
 4005f2c:	f800283a 	ret
 4005f30:	01400104 	movi	r5,4
 4005f34:	9809883a 	mov	r4,r19
 4005f38:	4005dd40 	call	4005dd4 <__sfmoreglue>
 4005f3c:	90800015 	stw	r2,0(r18)
 4005f40:	103fde1e 	bne	r2,zero,4005ebc <__ram_exceptions_end+0xfbfe5c74>
 4005f44:	00800304 	movi	r2,12
 4005f48:	98800015 	stw	r2,0(r19)
 4005f4c:	0005883a 	mov	r2,zero
 4005f50:	003ff006 	br	4005f14 <__ram_exceptions_end+0xfbfe5ccc>

04005f54 <_cleanup>:
 4005f54:	00810074 	movhi	r2,1025
 4005f58:	10b6c004 	addi	r2,r2,-9472
 4005f5c:	11000017 	ldw	r4,0(r2)
 4005f60:	01410034 	movhi	r5,1024
 4005f64:	295eee04 	addi	r5,r5,31672
 4005f68:	400653c1 	jmpi	400653c <_fwalk_reent>

04005f6c <__sinit>:
 4005f6c:	20800e17 	ldw	r2,56(r4)
 4005f70:	10000126 	beq	r2,zero,4005f78 <__sinit+0xc>
 4005f74:	f800283a 	ret
 4005f78:	4005c301 	jmpi	4005c30 <__sinit.part.1>

04005f7c <__sfp_lock_acquire>:
 4005f7c:	f800283a 	ret

04005f80 <__sfp_lock_release>:
 4005f80:	f800283a 	ret

04005f84 <__sinit_lock_acquire>:
 4005f84:	f800283a 	ret

04005f88 <__sinit_lock_release>:
 4005f88:	f800283a 	ret

04005f8c <__fp_lock_all>:
 4005f8c:	00810074 	movhi	r2,1025
 4005f90:	10b6c104 	addi	r2,r2,-9468
 4005f94:	11000017 	ldw	r4,0(r2)
 4005f98:	01410034 	movhi	r5,1024
 4005f9c:	29577304 	addi	r5,r5,24012
 4005fa0:	40064781 	jmpi	4006478 <_fwalk>

04005fa4 <__fp_unlock_all>:
 4005fa4:	00810074 	movhi	r2,1025
 4005fa8:	10b6c104 	addi	r2,r2,-9468
 4005fac:	11000017 	ldw	r4,0(r2)
 4005fb0:	01410034 	movhi	r5,1024
 4005fb4:	29570704 	addi	r5,r5,23580
 4005fb8:	40064781 	jmpi	4006478 <_fwalk>

04005fbc <__sfvwrite_r>:
 4005fbc:	30800217 	ldw	r2,8(r6)
 4005fc0:	10006726 	beq	r2,zero,4006160 <__sfvwrite_r+0x1a4>
 4005fc4:	28c0030b 	ldhu	r3,12(r5)
 4005fc8:	defff404 	addi	sp,sp,-48
 4005fcc:	dd400715 	stw	r21,28(sp)
 4005fd0:	dd000615 	stw	r20,24(sp)
 4005fd4:	dc000215 	stw	r16,8(sp)
 4005fd8:	dfc00b15 	stw	ra,44(sp)
 4005fdc:	df000a15 	stw	fp,40(sp)
 4005fe0:	ddc00915 	stw	r23,36(sp)
 4005fe4:	dd800815 	stw	r22,32(sp)
 4005fe8:	dcc00515 	stw	r19,20(sp)
 4005fec:	dc800415 	stw	r18,16(sp)
 4005ff0:	dc400315 	stw	r17,12(sp)
 4005ff4:	1880020c 	andi	r2,r3,8
 4005ff8:	2821883a 	mov	r16,r5
 4005ffc:	202b883a 	mov	r21,r4
 4006000:	3029883a 	mov	r20,r6
 4006004:	10002726 	beq	r2,zero,40060a4 <__sfvwrite_r+0xe8>
 4006008:	28800417 	ldw	r2,16(r5)
 400600c:	10002526 	beq	r2,zero,40060a4 <__sfvwrite_r+0xe8>
 4006010:	1880008c 	andi	r2,r3,2
 4006014:	a4400017 	ldw	r17,0(r20)
 4006018:	10002a26 	beq	r2,zero,40060c4 <__sfvwrite_r+0x108>
 400601c:	05a00034 	movhi	r22,32768
 4006020:	0027883a 	mov	r19,zero
 4006024:	0025883a 	mov	r18,zero
 4006028:	b5bf0004 	addi	r22,r22,-1024
 400602c:	980d883a 	mov	r6,r19
 4006030:	a809883a 	mov	r4,r21
 4006034:	90004626 	beq	r18,zero,4006150 <__sfvwrite_r+0x194>
 4006038:	900f883a 	mov	r7,r18
 400603c:	b480022e 	bgeu	r22,r18,4006048 <__sfvwrite_r+0x8c>
 4006040:	01e00034 	movhi	r7,32768
 4006044:	39ff0004 	addi	r7,r7,-1024
 4006048:	80800917 	ldw	r2,36(r16)
 400604c:	81400717 	ldw	r5,28(r16)
 4006050:	103ee83a 	callr	r2
 4006054:	0080570e 	bge	zero,r2,40061b4 <__sfvwrite_r+0x1f8>
 4006058:	a0c00217 	ldw	r3,8(r20)
 400605c:	98a7883a 	add	r19,r19,r2
 4006060:	90a5c83a 	sub	r18,r18,r2
 4006064:	1885c83a 	sub	r2,r3,r2
 4006068:	a0800215 	stw	r2,8(r20)
 400606c:	103fef1e 	bne	r2,zero,400602c <__ram_exceptions_end+0xfbfe5de4>
 4006070:	0005883a 	mov	r2,zero
 4006074:	dfc00b17 	ldw	ra,44(sp)
 4006078:	df000a17 	ldw	fp,40(sp)
 400607c:	ddc00917 	ldw	r23,36(sp)
 4006080:	dd800817 	ldw	r22,32(sp)
 4006084:	dd400717 	ldw	r21,28(sp)
 4006088:	dd000617 	ldw	r20,24(sp)
 400608c:	dcc00517 	ldw	r19,20(sp)
 4006090:	dc800417 	ldw	r18,16(sp)
 4006094:	dc400317 	ldw	r17,12(sp)
 4006098:	dc000217 	ldw	r16,8(sp)
 400609c:	dec00c04 	addi	sp,sp,48
 40060a0:	f800283a 	ret
 40060a4:	800b883a 	mov	r5,r16
 40060a8:	a809883a 	mov	r4,r21
 40060ac:	4007a100 	call	4007a10 <__swsetup_r>
 40060b0:	1000eb1e 	bne	r2,zero,4006460 <__sfvwrite_r+0x4a4>
 40060b4:	80c0030b 	ldhu	r3,12(r16)
 40060b8:	a4400017 	ldw	r17,0(r20)
 40060bc:	1880008c 	andi	r2,r3,2
 40060c0:	103fd61e 	bne	r2,zero,400601c <__ram_exceptions_end+0xfbfe5dd4>
 40060c4:	1880004c 	andi	r2,r3,1
 40060c8:	10003f1e 	bne	r2,zero,40061c8 <__sfvwrite_r+0x20c>
 40060cc:	0039883a 	mov	fp,zero
 40060d0:	0025883a 	mov	r18,zero
 40060d4:	90001a26 	beq	r18,zero,4006140 <__sfvwrite_r+0x184>
 40060d8:	1880800c 	andi	r2,r3,512
 40060dc:	84c00217 	ldw	r19,8(r16)
 40060e0:	10002126 	beq	r2,zero,4006168 <__sfvwrite_r+0x1ac>
 40060e4:	982f883a 	mov	r23,r19
 40060e8:	94c09336 	bltu	r18,r19,4006338 <__sfvwrite_r+0x37c>
 40060ec:	1881200c 	andi	r2,r3,1152
 40060f0:	10009e1e 	bne	r2,zero,400636c <__sfvwrite_r+0x3b0>
 40060f4:	81000017 	ldw	r4,0(r16)
 40060f8:	b80d883a 	mov	r6,r23
 40060fc:	e00b883a 	mov	r5,fp
 4006100:	40070380 	call	4007038 <memmove>
 4006104:	80c00217 	ldw	r3,8(r16)
 4006108:	81000017 	ldw	r4,0(r16)
 400610c:	9005883a 	mov	r2,r18
 4006110:	1ce7c83a 	sub	r19,r3,r19
 4006114:	25cf883a 	add	r7,r4,r23
 4006118:	84c00215 	stw	r19,8(r16)
 400611c:	81c00015 	stw	r7,0(r16)
 4006120:	a0c00217 	ldw	r3,8(r20)
 4006124:	e0b9883a 	add	fp,fp,r2
 4006128:	90a5c83a 	sub	r18,r18,r2
 400612c:	18a7c83a 	sub	r19,r3,r2
 4006130:	a4c00215 	stw	r19,8(r20)
 4006134:	983fce26 	beq	r19,zero,4006070 <__ram_exceptions_end+0xfbfe5e28>
 4006138:	80c0030b 	ldhu	r3,12(r16)
 400613c:	903fe61e 	bne	r18,zero,40060d8 <__ram_exceptions_end+0xfbfe5e90>
 4006140:	8f000017 	ldw	fp,0(r17)
 4006144:	8c800117 	ldw	r18,4(r17)
 4006148:	8c400204 	addi	r17,r17,8
 400614c:	003fe106 	br	40060d4 <__ram_exceptions_end+0xfbfe5e8c>
 4006150:	8cc00017 	ldw	r19,0(r17)
 4006154:	8c800117 	ldw	r18,4(r17)
 4006158:	8c400204 	addi	r17,r17,8
 400615c:	003fb306 	br	400602c <__ram_exceptions_end+0xfbfe5de4>
 4006160:	0005883a 	mov	r2,zero
 4006164:	f800283a 	ret
 4006168:	81000017 	ldw	r4,0(r16)
 400616c:	80800417 	ldw	r2,16(r16)
 4006170:	11005736 	bltu	r2,r4,40062d0 <__sfvwrite_r+0x314>
 4006174:	85c00517 	ldw	r23,20(r16)
 4006178:	95c05536 	bltu	r18,r23,40062d0 <__sfvwrite_r+0x314>
 400617c:	00a00034 	movhi	r2,32768
 4006180:	10bfffc4 	addi	r2,r2,-1
 4006184:	9009883a 	mov	r4,r18
 4006188:	1480012e 	bgeu	r2,r18,4006190 <__sfvwrite_r+0x1d4>
 400618c:	1009883a 	mov	r4,r2
 4006190:	b80b883a 	mov	r5,r23
 4006194:	40029500 	call	4002950 <__divsi3>
 4006198:	15cf383a 	mul	r7,r2,r23
 400619c:	81400717 	ldw	r5,28(r16)
 40061a0:	80800917 	ldw	r2,36(r16)
 40061a4:	e00d883a 	mov	r6,fp
 40061a8:	a809883a 	mov	r4,r21
 40061ac:	103ee83a 	callr	r2
 40061b0:	00bfdb16 	blt	zero,r2,4006120 <__ram_exceptions_end+0xfbfe5ed8>
 40061b4:	8080030b 	ldhu	r2,12(r16)
 40061b8:	10801014 	ori	r2,r2,64
 40061bc:	8080030d 	sth	r2,12(r16)
 40061c0:	00bfffc4 	movi	r2,-1
 40061c4:	003fab06 	br	4006074 <__ram_exceptions_end+0xfbfe5e2c>
 40061c8:	0027883a 	mov	r19,zero
 40061cc:	0011883a 	mov	r8,zero
 40061d0:	0039883a 	mov	fp,zero
 40061d4:	0025883a 	mov	r18,zero
 40061d8:	90001f26 	beq	r18,zero,4006258 <__sfvwrite_r+0x29c>
 40061dc:	40005a26 	beq	r8,zero,4006348 <__sfvwrite_r+0x38c>
 40061e0:	982d883a 	mov	r22,r19
 40061e4:	94c0012e 	bgeu	r18,r19,40061ec <__sfvwrite_r+0x230>
 40061e8:	902d883a 	mov	r22,r18
 40061ec:	81000017 	ldw	r4,0(r16)
 40061f0:	80800417 	ldw	r2,16(r16)
 40061f4:	b02f883a 	mov	r23,r22
 40061f8:	81c00517 	ldw	r7,20(r16)
 40061fc:	1100032e 	bgeu	r2,r4,400620c <__sfvwrite_r+0x250>
 4006200:	80c00217 	ldw	r3,8(r16)
 4006204:	38c7883a 	add	r3,r7,r3
 4006208:	1d801816 	blt	r3,r22,400626c <__sfvwrite_r+0x2b0>
 400620c:	b1c03e16 	blt	r22,r7,4006308 <__sfvwrite_r+0x34c>
 4006210:	80800917 	ldw	r2,36(r16)
 4006214:	81400717 	ldw	r5,28(r16)
 4006218:	e00d883a 	mov	r6,fp
 400621c:	da000115 	stw	r8,4(sp)
 4006220:	a809883a 	mov	r4,r21
 4006224:	103ee83a 	callr	r2
 4006228:	102f883a 	mov	r23,r2
 400622c:	da000117 	ldw	r8,4(sp)
 4006230:	00bfe00e 	bge	zero,r2,40061b4 <__ram_exceptions_end+0xfbfe5f6c>
 4006234:	9de7c83a 	sub	r19,r19,r23
 4006238:	98001f26 	beq	r19,zero,40062b8 <__sfvwrite_r+0x2fc>
 400623c:	a0800217 	ldw	r2,8(r20)
 4006240:	e5f9883a 	add	fp,fp,r23
 4006244:	95e5c83a 	sub	r18,r18,r23
 4006248:	15efc83a 	sub	r23,r2,r23
 400624c:	a5c00215 	stw	r23,8(r20)
 4006250:	b83f8726 	beq	r23,zero,4006070 <__ram_exceptions_end+0xfbfe5e28>
 4006254:	903fe11e 	bne	r18,zero,40061dc <__ram_exceptions_end+0xfbfe5f94>
 4006258:	8f000017 	ldw	fp,0(r17)
 400625c:	8c800117 	ldw	r18,4(r17)
 4006260:	0011883a 	mov	r8,zero
 4006264:	8c400204 	addi	r17,r17,8
 4006268:	003fdb06 	br	40061d8 <__ram_exceptions_end+0xfbfe5f90>
 400626c:	180d883a 	mov	r6,r3
 4006270:	e00b883a 	mov	r5,fp
 4006274:	da000115 	stw	r8,4(sp)
 4006278:	d8c00015 	stw	r3,0(sp)
 400627c:	40070380 	call	4007038 <memmove>
 4006280:	d8c00017 	ldw	r3,0(sp)
 4006284:	80800017 	ldw	r2,0(r16)
 4006288:	800b883a 	mov	r5,r16
 400628c:	a809883a 	mov	r4,r21
 4006290:	10c5883a 	add	r2,r2,r3
 4006294:	80800015 	stw	r2,0(r16)
 4006298:	d8c00015 	stw	r3,0(sp)
 400629c:	4007ed80 	call	4007ed8 <_fflush_r>
 40062a0:	d8c00017 	ldw	r3,0(sp)
 40062a4:	da000117 	ldw	r8,4(sp)
 40062a8:	103fc21e 	bne	r2,zero,40061b4 <__ram_exceptions_end+0xfbfe5f6c>
 40062ac:	182f883a 	mov	r23,r3
 40062b0:	9de7c83a 	sub	r19,r19,r23
 40062b4:	983fe11e 	bne	r19,zero,400623c <__ram_exceptions_end+0xfbfe5ff4>
 40062b8:	800b883a 	mov	r5,r16
 40062bc:	a809883a 	mov	r4,r21
 40062c0:	4007ed80 	call	4007ed8 <_fflush_r>
 40062c4:	103fbb1e 	bne	r2,zero,40061b4 <__ram_exceptions_end+0xfbfe5f6c>
 40062c8:	0011883a 	mov	r8,zero
 40062cc:	003fdb06 	br	400623c <__ram_exceptions_end+0xfbfe5ff4>
 40062d0:	94c0012e 	bgeu	r18,r19,40062d8 <__sfvwrite_r+0x31c>
 40062d4:	9027883a 	mov	r19,r18
 40062d8:	980d883a 	mov	r6,r19
 40062dc:	e00b883a 	mov	r5,fp
 40062e0:	40070380 	call	4007038 <memmove>
 40062e4:	80800217 	ldw	r2,8(r16)
 40062e8:	80c00017 	ldw	r3,0(r16)
 40062ec:	14c5c83a 	sub	r2,r2,r19
 40062f0:	1cc7883a 	add	r3,r3,r19
 40062f4:	80800215 	stw	r2,8(r16)
 40062f8:	80c00015 	stw	r3,0(r16)
 40062fc:	10004326 	beq	r2,zero,400640c <__sfvwrite_r+0x450>
 4006300:	9805883a 	mov	r2,r19
 4006304:	003f8606 	br	4006120 <__ram_exceptions_end+0xfbfe5ed8>
 4006308:	b00d883a 	mov	r6,r22
 400630c:	e00b883a 	mov	r5,fp
 4006310:	da000115 	stw	r8,4(sp)
 4006314:	40070380 	call	4007038 <memmove>
 4006318:	80800217 	ldw	r2,8(r16)
 400631c:	80c00017 	ldw	r3,0(r16)
 4006320:	da000117 	ldw	r8,4(sp)
 4006324:	1585c83a 	sub	r2,r2,r22
 4006328:	1dad883a 	add	r22,r3,r22
 400632c:	80800215 	stw	r2,8(r16)
 4006330:	85800015 	stw	r22,0(r16)
 4006334:	003fbf06 	br	4006234 <__ram_exceptions_end+0xfbfe5fec>
 4006338:	81000017 	ldw	r4,0(r16)
 400633c:	9027883a 	mov	r19,r18
 4006340:	902f883a 	mov	r23,r18
 4006344:	003f6c06 	br	40060f8 <__ram_exceptions_end+0xfbfe5eb0>
 4006348:	900d883a 	mov	r6,r18
 400634c:	01400284 	movi	r5,10
 4006350:	e009883a 	mov	r4,fp
 4006354:	4006e0c0 	call	4006e0c <memchr>
 4006358:	10003e26 	beq	r2,zero,4006454 <__sfvwrite_r+0x498>
 400635c:	10800044 	addi	r2,r2,1
 4006360:	1727c83a 	sub	r19,r2,fp
 4006364:	02000044 	movi	r8,1
 4006368:	003f9d06 	br	40061e0 <__ram_exceptions_end+0xfbfe5f98>
 400636c:	80800517 	ldw	r2,20(r16)
 4006370:	81400417 	ldw	r5,16(r16)
 4006374:	81c00017 	ldw	r7,0(r16)
 4006378:	10a7883a 	add	r19,r2,r2
 400637c:	9885883a 	add	r2,r19,r2
 4006380:	1026d7fa 	srli	r19,r2,31
 4006384:	396dc83a 	sub	r22,r7,r5
 4006388:	b1000044 	addi	r4,r22,1
 400638c:	9885883a 	add	r2,r19,r2
 4006390:	1027d07a 	srai	r19,r2,1
 4006394:	2485883a 	add	r2,r4,r18
 4006398:	980d883a 	mov	r6,r19
 400639c:	9880022e 	bgeu	r19,r2,40063a8 <__sfvwrite_r+0x3ec>
 40063a0:	1027883a 	mov	r19,r2
 40063a4:	100d883a 	mov	r6,r2
 40063a8:	18c1000c 	andi	r3,r3,1024
 40063ac:	18001c26 	beq	r3,zero,4006420 <__sfvwrite_r+0x464>
 40063b0:	300b883a 	mov	r5,r6
 40063b4:	a809883a 	mov	r4,r21
 40063b8:	40066000 	call	4006600 <_malloc_r>
 40063bc:	102f883a 	mov	r23,r2
 40063c0:	10002926 	beq	r2,zero,4006468 <__sfvwrite_r+0x4ac>
 40063c4:	81400417 	ldw	r5,16(r16)
 40063c8:	b00d883a 	mov	r6,r22
 40063cc:	1009883a 	mov	r4,r2
 40063d0:	4006ef00 	call	4006ef0 <memcpy>
 40063d4:	8080030b 	ldhu	r2,12(r16)
 40063d8:	00fedfc4 	movi	r3,-1153
 40063dc:	10c4703a 	and	r2,r2,r3
 40063e0:	10802014 	ori	r2,r2,128
 40063e4:	8080030d 	sth	r2,12(r16)
 40063e8:	bd89883a 	add	r4,r23,r22
 40063ec:	9d8fc83a 	sub	r7,r19,r22
 40063f0:	85c00415 	stw	r23,16(r16)
 40063f4:	84c00515 	stw	r19,20(r16)
 40063f8:	81000015 	stw	r4,0(r16)
 40063fc:	9027883a 	mov	r19,r18
 4006400:	81c00215 	stw	r7,8(r16)
 4006404:	902f883a 	mov	r23,r18
 4006408:	003f3b06 	br	40060f8 <__ram_exceptions_end+0xfbfe5eb0>
 400640c:	800b883a 	mov	r5,r16
 4006410:	a809883a 	mov	r4,r21
 4006414:	4007ed80 	call	4007ed8 <_fflush_r>
 4006418:	103fb926 	beq	r2,zero,4006300 <__ram_exceptions_end+0xfbfe60b8>
 400641c:	003f6506 	br	40061b4 <__ram_exceptions_end+0xfbfe5f6c>
 4006420:	a809883a 	mov	r4,r21
 4006424:	40072bc0 	call	40072bc <_realloc_r>
 4006428:	102f883a 	mov	r23,r2
 400642c:	103fee1e 	bne	r2,zero,40063e8 <__ram_exceptions_end+0xfbfe61a0>
 4006430:	81400417 	ldw	r5,16(r16)
 4006434:	a809883a 	mov	r4,r21
 4006438:	40080880 	call	4008088 <_free_r>
 400643c:	8080030b 	ldhu	r2,12(r16)
 4006440:	00ffdfc4 	movi	r3,-129
 4006444:	1884703a 	and	r2,r3,r2
 4006448:	00c00304 	movi	r3,12
 400644c:	a8c00015 	stw	r3,0(r21)
 4006450:	003f5906 	br	40061b8 <__ram_exceptions_end+0xfbfe5f70>
 4006454:	94c00044 	addi	r19,r18,1
 4006458:	02000044 	movi	r8,1
 400645c:	003f6006 	br	40061e0 <__ram_exceptions_end+0xfbfe5f98>
 4006460:	00bfffc4 	movi	r2,-1
 4006464:	003f0306 	br	4006074 <__ram_exceptions_end+0xfbfe5e2c>
 4006468:	00800304 	movi	r2,12
 400646c:	a8800015 	stw	r2,0(r21)
 4006470:	8080030b 	ldhu	r2,12(r16)
 4006474:	003f5006 	br	40061b8 <__ram_exceptions_end+0xfbfe5f70>

04006478 <_fwalk>:
 4006478:	defff704 	addi	sp,sp,-36
 400647c:	dd000415 	stw	r20,16(sp)
 4006480:	dfc00815 	stw	ra,32(sp)
 4006484:	ddc00715 	stw	r23,28(sp)
 4006488:	dd800615 	stw	r22,24(sp)
 400648c:	dd400515 	stw	r21,20(sp)
 4006490:	dcc00315 	stw	r19,12(sp)
 4006494:	dc800215 	stw	r18,8(sp)
 4006498:	dc400115 	stw	r17,4(sp)
 400649c:	dc000015 	stw	r16,0(sp)
 40064a0:	2500b804 	addi	r20,r4,736
 40064a4:	a0002326 	beq	r20,zero,4006534 <_fwalk+0xbc>
 40064a8:	282b883a 	mov	r21,r5
 40064ac:	002f883a 	mov	r23,zero
 40064b0:	05800044 	movi	r22,1
 40064b4:	04ffffc4 	movi	r19,-1
 40064b8:	a4400117 	ldw	r17,4(r20)
 40064bc:	a4800217 	ldw	r18,8(r20)
 40064c0:	8c7fffc4 	addi	r17,r17,-1
 40064c4:	88000d16 	blt	r17,zero,40064fc <_fwalk+0x84>
 40064c8:	94000304 	addi	r16,r18,12
 40064cc:	94800384 	addi	r18,r18,14
 40064d0:	8080000b 	ldhu	r2,0(r16)
 40064d4:	8c7fffc4 	addi	r17,r17,-1
 40064d8:	813ffd04 	addi	r4,r16,-12
 40064dc:	b080042e 	bgeu	r22,r2,40064f0 <_fwalk+0x78>
 40064e0:	9080000f 	ldh	r2,0(r18)
 40064e4:	14c00226 	beq	r2,r19,40064f0 <_fwalk+0x78>
 40064e8:	a83ee83a 	callr	r21
 40064ec:	b8aeb03a 	or	r23,r23,r2
 40064f0:	84001a04 	addi	r16,r16,104
 40064f4:	94801a04 	addi	r18,r18,104
 40064f8:	8cfff51e 	bne	r17,r19,40064d0 <__ram_exceptions_end+0xfbfe6288>
 40064fc:	a5000017 	ldw	r20,0(r20)
 4006500:	a03fed1e 	bne	r20,zero,40064b8 <__ram_exceptions_end+0xfbfe6270>
 4006504:	b805883a 	mov	r2,r23
 4006508:	dfc00817 	ldw	ra,32(sp)
 400650c:	ddc00717 	ldw	r23,28(sp)
 4006510:	dd800617 	ldw	r22,24(sp)
 4006514:	dd400517 	ldw	r21,20(sp)
 4006518:	dd000417 	ldw	r20,16(sp)
 400651c:	dcc00317 	ldw	r19,12(sp)
 4006520:	dc800217 	ldw	r18,8(sp)
 4006524:	dc400117 	ldw	r17,4(sp)
 4006528:	dc000017 	ldw	r16,0(sp)
 400652c:	dec00904 	addi	sp,sp,36
 4006530:	f800283a 	ret
 4006534:	002f883a 	mov	r23,zero
 4006538:	003ff206 	br	4006504 <__ram_exceptions_end+0xfbfe62bc>

0400653c <_fwalk_reent>:
 400653c:	defff704 	addi	sp,sp,-36
 4006540:	dd000415 	stw	r20,16(sp)
 4006544:	dfc00815 	stw	ra,32(sp)
 4006548:	ddc00715 	stw	r23,28(sp)
 400654c:	dd800615 	stw	r22,24(sp)
 4006550:	dd400515 	stw	r21,20(sp)
 4006554:	dcc00315 	stw	r19,12(sp)
 4006558:	dc800215 	stw	r18,8(sp)
 400655c:	dc400115 	stw	r17,4(sp)
 4006560:	dc000015 	stw	r16,0(sp)
 4006564:	2500b804 	addi	r20,r4,736
 4006568:	a0002326 	beq	r20,zero,40065f8 <_fwalk_reent+0xbc>
 400656c:	282b883a 	mov	r21,r5
 4006570:	2027883a 	mov	r19,r4
 4006574:	002f883a 	mov	r23,zero
 4006578:	05800044 	movi	r22,1
 400657c:	04bfffc4 	movi	r18,-1
 4006580:	a4400117 	ldw	r17,4(r20)
 4006584:	a4000217 	ldw	r16,8(r20)
 4006588:	8c7fffc4 	addi	r17,r17,-1
 400658c:	88000c16 	blt	r17,zero,40065c0 <_fwalk_reent+0x84>
 4006590:	84000304 	addi	r16,r16,12
 4006594:	8080000b 	ldhu	r2,0(r16)
 4006598:	8c7fffc4 	addi	r17,r17,-1
 400659c:	817ffd04 	addi	r5,r16,-12
 40065a0:	b080052e 	bgeu	r22,r2,40065b8 <_fwalk_reent+0x7c>
 40065a4:	8080008f 	ldh	r2,2(r16)
 40065a8:	9809883a 	mov	r4,r19
 40065ac:	14800226 	beq	r2,r18,40065b8 <_fwalk_reent+0x7c>
 40065b0:	a83ee83a 	callr	r21
 40065b4:	b8aeb03a 	or	r23,r23,r2
 40065b8:	84001a04 	addi	r16,r16,104
 40065bc:	8cbff51e 	bne	r17,r18,4006594 <__ram_exceptions_end+0xfbfe634c>
 40065c0:	a5000017 	ldw	r20,0(r20)
 40065c4:	a03fee1e 	bne	r20,zero,4006580 <__ram_exceptions_end+0xfbfe6338>
 40065c8:	b805883a 	mov	r2,r23
 40065cc:	dfc00817 	ldw	ra,32(sp)
 40065d0:	ddc00717 	ldw	r23,28(sp)
 40065d4:	dd800617 	ldw	r22,24(sp)
 40065d8:	dd400517 	ldw	r21,20(sp)
 40065dc:	dd000417 	ldw	r20,16(sp)
 40065e0:	dcc00317 	ldw	r19,12(sp)
 40065e4:	dc800217 	ldw	r18,8(sp)
 40065e8:	dc400117 	ldw	r17,4(sp)
 40065ec:	dc000017 	ldw	r16,0(sp)
 40065f0:	dec00904 	addi	sp,sp,36
 40065f4:	f800283a 	ret
 40065f8:	002f883a 	mov	r23,zero
 40065fc:	003ff206 	br	40065c8 <__ram_exceptions_end+0xfbfe6380>

04006600 <_malloc_r>:
 4006600:	defff504 	addi	sp,sp,-44
 4006604:	dc800315 	stw	r18,12(sp)
 4006608:	dfc00a15 	stw	ra,40(sp)
 400660c:	df000915 	stw	fp,36(sp)
 4006610:	ddc00815 	stw	r23,32(sp)
 4006614:	dd800715 	stw	r22,28(sp)
 4006618:	dd400615 	stw	r21,24(sp)
 400661c:	dd000515 	stw	r20,20(sp)
 4006620:	dcc00415 	stw	r19,16(sp)
 4006624:	dc400215 	stw	r17,8(sp)
 4006628:	dc000115 	stw	r16,4(sp)
 400662c:	288002c4 	addi	r2,r5,11
 4006630:	00c00584 	movi	r3,22
 4006634:	2025883a 	mov	r18,r4
 4006638:	18807f2e 	bgeu	r3,r2,4006838 <_malloc_r+0x238>
 400663c:	047ffe04 	movi	r17,-8
 4006640:	1462703a 	and	r17,r2,r17
 4006644:	8800a316 	blt	r17,zero,40068d4 <_malloc_r+0x2d4>
 4006648:	8940a236 	bltu	r17,r5,40068d4 <_malloc_r+0x2d4>
 400664c:	4008c400 	call	4008c40 <__malloc_lock>
 4006650:	00807dc4 	movi	r2,503
 4006654:	1441e92e 	bgeu	r2,r17,4006dfc <_malloc_r+0x7fc>
 4006658:	8804d27a 	srli	r2,r17,9
 400665c:	1000a126 	beq	r2,zero,40068e4 <_malloc_r+0x2e4>
 4006660:	00c00104 	movi	r3,4
 4006664:	18811e36 	bltu	r3,r2,4006ae0 <_malloc_r+0x4e0>
 4006668:	8804d1ba 	srli	r2,r17,6
 400666c:	12000e44 	addi	r8,r2,57
 4006670:	11c00e04 	addi	r7,r2,56
 4006674:	4209883a 	add	r4,r8,r8
 4006678:	04c10074 	movhi	r19,1025
 400667c:	2109883a 	add	r4,r4,r4
 4006680:	9cf12404 	addi	r19,r19,-15216
 4006684:	2109883a 	add	r4,r4,r4
 4006688:	9909883a 	add	r4,r19,r4
 400668c:	24000117 	ldw	r16,4(r4)
 4006690:	213ffe04 	addi	r4,r4,-8
 4006694:	24009726 	beq	r4,r16,40068f4 <_malloc_r+0x2f4>
 4006698:	80800117 	ldw	r2,4(r16)
 400669c:	01bfff04 	movi	r6,-4
 40066a0:	014003c4 	movi	r5,15
 40066a4:	1184703a 	and	r2,r2,r6
 40066a8:	1447c83a 	sub	r3,r2,r17
 40066ac:	28c00716 	blt	r5,r3,40066cc <_malloc_r+0xcc>
 40066b0:	1800920e 	bge	r3,zero,40068fc <_malloc_r+0x2fc>
 40066b4:	84000317 	ldw	r16,12(r16)
 40066b8:	24008e26 	beq	r4,r16,40068f4 <_malloc_r+0x2f4>
 40066bc:	80800117 	ldw	r2,4(r16)
 40066c0:	1184703a 	and	r2,r2,r6
 40066c4:	1447c83a 	sub	r3,r2,r17
 40066c8:	28fff90e 	bge	r5,r3,40066b0 <__ram_exceptions_end+0xfbfe6468>
 40066cc:	3809883a 	mov	r4,r7
 40066d0:	01810074 	movhi	r6,1025
 40066d4:	9c000417 	ldw	r16,16(r19)
 40066d8:	31b12404 	addi	r6,r6,-15216
 40066dc:	32000204 	addi	r8,r6,8
 40066e0:	82013426 	beq	r16,r8,4006bb4 <_malloc_r+0x5b4>
 40066e4:	80c00117 	ldw	r3,4(r16)
 40066e8:	00bfff04 	movi	r2,-4
 40066ec:	188e703a 	and	r7,r3,r2
 40066f0:	3c45c83a 	sub	r2,r7,r17
 40066f4:	00c003c4 	movi	r3,15
 40066f8:	18811f16 	blt	r3,r2,4006b78 <_malloc_r+0x578>
 40066fc:	32000515 	stw	r8,20(r6)
 4006700:	32000415 	stw	r8,16(r6)
 4006704:	10007f0e 	bge	r2,zero,4006904 <_malloc_r+0x304>
 4006708:	00807fc4 	movi	r2,511
 400670c:	11c0fd36 	bltu	r2,r7,4006b04 <_malloc_r+0x504>
 4006710:	3806d0fa 	srli	r3,r7,3
 4006714:	01c00044 	movi	r7,1
 4006718:	30800117 	ldw	r2,4(r6)
 400671c:	19400044 	addi	r5,r3,1
 4006720:	294b883a 	add	r5,r5,r5
 4006724:	1807d0ba 	srai	r3,r3,2
 4006728:	294b883a 	add	r5,r5,r5
 400672c:	294b883a 	add	r5,r5,r5
 4006730:	298b883a 	add	r5,r5,r6
 4006734:	38c6983a 	sll	r3,r7,r3
 4006738:	29c00017 	ldw	r7,0(r5)
 400673c:	2a7ffe04 	addi	r9,r5,-8
 4006740:	1886b03a 	or	r3,r3,r2
 4006744:	82400315 	stw	r9,12(r16)
 4006748:	81c00215 	stw	r7,8(r16)
 400674c:	30c00115 	stw	r3,4(r6)
 4006750:	2c000015 	stw	r16,0(r5)
 4006754:	3c000315 	stw	r16,12(r7)
 4006758:	2005d0ba 	srai	r2,r4,2
 400675c:	01400044 	movi	r5,1
 4006760:	288a983a 	sll	r5,r5,r2
 4006764:	19406f36 	bltu	r3,r5,4006924 <_malloc_r+0x324>
 4006768:	28c4703a 	and	r2,r5,r3
 400676c:	10000a1e 	bne	r2,zero,4006798 <_malloc_r+0x198>
 4006770:	00bfff04 	movi	r2,-4
 4006774:	294b883a 	add	r5,r5,r5
 4006778:	2088703a 	and	r4,r4,r2
 400677c:	28c4703a 	and	r2,r5,r3
 4006780:	21000104 	addi	r4,r4,4
 4006784:	1000041e 	bne	r2,zero,4006798 <_malloc_r+0x198>
 4006788:	294b883a 	add	r5,r5,r5
 400678c:	28c4703a 	and	r2,r5,r3
 4006790:	21000104 	addi	r4,r4,4
 4006794:	103ffc26 	beq	r2,zero,4006788 <__ram_exceptions_end+0xfbfe6540>
 4006798:	02bfff04 	movi	r10,-4
 400679c:	024003c4 	movi	r9,15
 40067a0:	21800044 	addi	r6,r4,1
 40067a4:	318d883a 	add	r6,r6,r6
 40067a8:	318d883a 	add	r6,r6,r6
 40067ac:	318d883a 	add	r6,r6,r6
 40067b0:	998d883a 	add	r6,r19,r6
 40067b4:	333ffe04 	addi	r12,r6,-8
 40067b8:	2017883a 	mov	r11,r4
 40067bc:	31800104 	addi	r6,r6,4
 40067c0:	34000017 	ldw	r16,0(r6)
 40067c4:	31fffd04 	addi	r7,r6,-12
 40067c8:	81c0041e 	bne	r16,r7,40067dc <_malloc_r+0x1dc>
 40067cc:	0000fb06 	br	4006bbc <_malloc_r+0x5bc>
 40067d0:	1801030e 	bge	r3,zero,4006be0 <_malloc_r+0x5e0>
 40067d4:	84000317 	ldw	r16,12(r16)
 40067d8:	81c0f826 	beq	r16,r7,4006bbc <_malloc_r+0x5bc>
 40067dc:	80800117 	ldw	r2,4(r16)
 40067e0:	1284703a 	and	r2,r2,r10
 40067e4:	1447c83a 	sub	r3,r2,r17
 40067e8:	48fff90e 	bge	r9,r3,40067d0 <__ram_exceptions_end+0xfbfe6588>
 40067ec:	80800317 	ldw	r2,12(r16)
 40067f0:	81000217 	ldw	r4,8(r16)
 40067f4:	89400054 	ori	r5,r17,1
 40067f8:	81400115 	stw	r5,4(r16)
 40067fc:	20800315 	stw	r2,12(r4)
 4006800:	11000215 	stw	r4,8(r2)
 4006804:	8463883a 	add	r17,r16,r17
 4006808:	9c400515 	stw	r17,20(r19)
 400680c:	9c400415 	stw	r17,16(r19)
 4006810:	18800054 	ori	r2,r3,1
 4006814:	88800115 	stw	r2,4(r17)
 4006818:	8a000315 	stw	r8,12(r17)
 400681c:	8a000215 	stw	r8,8(r17)
 4006820:	88e3883a 	add	r17,r17,r3
 4006824:	88c00015 	stw	r3,0(r17)
 4006828:	9009883a 	mov	r4,r18
 400682c:	4008c640 	call	4008c64 <__malloc_unlock>
 4006830:	80800204 	addi	r2,r16,8
 4006834:	00001b06 	br	40068a4 <_malloc_r+0x2a4>
 4006838:	04400404 	movi	r17,16
 400683c:	89402536 	bltu	r17,r5,40068d4 <_malloc_r+0x2d4>
 4006840:	4008c400 	call	4008c40 <__malloc_lock>
 4006844:	00800184 	movi	r2,6
 4006848:	01000084 	movi	r4,2
 400684c:	04c10074 	movhi	r19,1025
 4006850:	1085883a 	add	r2,r2,r2
 4006854:	9cf12404 	addi	r19,r19,-15216
 4006858:	1085883a 	add	r2,r2,r2
 400685c:	9885883a 	add	r2,r19,r2
 4006860:	14000117 	ldw	r16,4(r2)
 4006864:	10fffe04 	addi	r3,r2,-8
 4006868:	80c0d926 	beq	r16,r3,4006bd0 <_malloc_r+0x5d0>
 400686c:	80c00117 	ldw	r3,4(r16)
 4006870:	81000317 	ldw	r4,12(r16)
 4006874:	00bfff04 	movi	r2,-4
 4006878:	1884703a 	and	r2,r3,r2
 400687c:	81400217 	ldw	r5,8(r16)
 4006880:	8085883a 	add	r2,r16,r2
 4006884:	10c00117 	ldw	r3,4(r2)
 4006888:	29000315 	stw	r4,12(r5)
 400688c:	21400215 	stw	r5,8(r4)
 4006890:	18c00054 	ori	r3,r3,1
 4006894:	10c00115 	stw	r3,4(r2)
 4006898:	9009883a 	mov	r4,r18
 400689c:	4008c640 	call	4008c64 <__malloc_unlock>
 40068a0:	80800204 	addi	r2,r16,8
 40068a4:	dfc00a17 	ldw	ra,40(sp)
 40068a8:	df000917 	ldw	fp,36(sp)
 40068ac:	ddc00817 	ldw	r23,32(sp)
 40068b0:	dd800717 	ldw	r22,28(sp)
 40068b4:	dd400617 	ldw	r21,24(sp)
 40068b8:	dd000517 	ldw	r20,20(sp)
 40068bc:	dcc00417 	ldw	r19,16(sp)
 40068c0:	dc800317 	ldw	r18,12(sp)
 40068c4:	dc400217 	ldw	r17,8(sp)
 40068c8:	dc000117 	ldw	r16,4(sp)
 40068cc:	dec00b04 	addi	sp,sp,44
 40068d0:	f800283a 	ret
 40068d4:	00800304 	movi	r2,12
 40068d8:	90800015 	stw	r2,0(r18)
 40068dc:	0005883a 	mov	r2,zero
 40068e0:	003ff006 	br	40068a4 <__ram_exceptions_end+0xfbfe665c>
 40068e4:	01002004 	movi	r4,128
 40068e8:	02001004 	movi	r8,64
 40068ec:	01c00fc4 	movi	r7,63
 40068f0:	003f6106 	br	4006678 <__ram_exceptions_end+0xfbfe6430>
 40068f4:	4009883a 	mov	r4,r8
 40068f8:	003f7506 	br	40066d0 <__ram_exceptions_end+0xfbfe6488>
 40068fc:	81000317 	ldw	r4,12(r16)
 4006900:	003fde06 	br	400687c <__ram_exceptions_end+0xfbfe6634>
 4006904:	81c5883a 	add	r2,r16,r7
 4006908:	11400117 	ldw	r5,4(r2)
 400690c:	9009883a 	mov	r4,r18
 4006910:	29400054 	ori	r5,r5,1
 4006914:	11400115 	stw	r5,4(r2)
 4006918:	4008c640 	call	4008c64 <__malloc_unlock>
 400691c:	80800204 	addi	r2,r16,8
 4006920:	003fe006 	br	40068a4 <__ram_exceptions_end+0xfbfe665c>
 4006924:	9c000217 	ldw	r16,8(r19)
 4006928:	00bfff04 	movi	r2,-4
 400692c:	85800117 	ldw	r22,4(r16)
 4006930:	b0ac703a 	and	r22,r22,r2
 4006934:	b4400336 	bltu	r22,r17,4006944 <_malloc_r+0x344>
 4006938:	b445c83a 	sub	r2,r22,r17
 400693c:	00c003c4 	movi	r3,15
 4006940:	18805d16 	blt	r3,r2,4006ab8 <_malloc_r+0x4b8>
 4006944:	05c10074 	movhi	r23,1025
 4006948:	00810074 	movhi	r2,1025
 400694c:	10bd8304 	addi	r2,r2,-2548
 4006950:	bdf6c204 	addi	r23,r23,-9464
 4006954:	15400017 	ldw	r21,0(r2)
 4006958:	b8c00017 	ldw	r3,0(r23)
 400695c:	00bfffc4 	movi	r2,-1
 4006960:	858d883a 	add	r6,r16,r22
 4006964:	8d6b883a 	add	r21,r17,r21
 4006968:	1880ea26 	beq	r3,r2,4006d14 <_malloc_r+0x714>
 400696c:	ad4403c4 	addi	r21,r21,4111
 4006970:	00bc0004 	movi	r2,-4096
 4006974:	a8aa703a 	and	r21,r21,r2
 4006978:	a80b883a 	mov	r5,r21
 400697c:	9009883a 	mov	r4,r18
 4006980:	d9800015 	stw	r6,0(sp)
 4006984:	40078200 	call	4007820 <_sbrk_r>
 4006988:	1029883a 	mov	r20,r2
 400698c:	00bfffc4 	movi	r2,-1
 4006990:	d9800017 	ldw	r6,0(sp)
 4006994:	a080e826 	beq	r20,r2,4006d38 <_malloc_r+0x738>
 4006998:	a180a636 	bltu	r20,r6,4006c34 <_malloc_r+0x634>
 400699c:	07010074 	movhi	fp,1025
 40069a0:	e73d8c04 	addi	fp,fp,-2512
 40069a4:	e0800017 	ldw	r2,0(fp)
 40069a8:	a887883a 	add	r3,r21,r2
 40069ac:	e0c00015 	stw	r3,0(fp)
 40069b0:	3500e626 	beq	r6,r20,4006d4c <_malloc_r+0x74c>
 40069b4:	b9000017 	ldw	r4,0(r23)
 40069b8:	00bfffc4 	movi	r2,-1
 40069bc:	2080ee26 	beq	r4,r2,4006d78 <_malloc_r+0x778>
 40069c0:	a185c83a 	sub	r2,r20,r6
 40069c4:	10c5883a 	add	r2,r2,r3
 40069c8:	e0800015 	stw	r2,0(fp)
 40069cc:	a0c001cc 	andi	r3,r20,7
 40069d0:	1800bc26 	beq	r3,zero,4006cc4 <_malloc_r+0x6c4>
 40069d4:	a0e9c83a 	sub	r20,r20,r3
 40069d8:	00840204 	movi	r2,4104
 40069dc:	a5000204 	addi	r20,r20,8
 40069e0:	10c7c83a 	sub	r3,r2,r3
 40069e4:	a545883a 	add	r2,r20,r21
 40069e8:	1083ffcc 	andi	r2,r2,4095
 40069ec:	18abc83a 	sub	r21,r3,r2
 40069f0:	a80b883a 	mov	r5,r21
 40069f4:	9009883a 	mov	r4,r18
 40069f8:	40078200 	call	4007820 <_sbrk_r>
 40069fc:	00ffffc4 	movi	r3,-1
 4006a00:	10c0e126 	beq	r2,r3,4006d88 <_malloc_r+0x788>
 4006a04:	1505c83a 	sub	r2,r2,r20
 4006a08:	1545883a 	add	r2,r2,r21
 4006a0c:	10800054 	ori	r2,r2,1
 4006a10:	e0c00017 	ldw	r3,0(fp)
 4006a14:	9d000215 	stw	r20,8(r19)
 4006a18:	a0800115 	stw	r2,4(r20)
 4006a1c:	a8c7883a 	add	r3,r21,r3
 4006a20:	e0c00015 	stw	r3,0(fp)
 4006a24:	84c00e26 	beq	r16,r19,4006a60 <_malloc_r+0x460>
 4006a28:	018003c4 	movi	r6,15
 4006a2c:	3580a72e 	bgeu	r6,r22,4006ccc <_malloc_r+0x6cc>
 4006a30:	81400117 	ldw	r5,4(r16)
 4006a34:	013ffe04 	movi	r4,-8
 4006a38:	b0bffd04 	addi	r2,r22,-12
 4006a3c:	1104703a 	and	r2,r2,r4
 4006a40:	2900004c 	andi	r4,r5,1
 4006a44:	2088b03a 	or	r4,r4,r2
 4006a48:	81000115 	stw	r4,4(r16)
 4006a4c:	01400144 	movi	r5,5
 4006a50:	8089883a 	add	r4,r16,r2
 4006a54:	21400115 	stw	r5,4(r4)
 4006a58:	21400215 	stw	r5,8(r4)
 4006a5c:	3080cd36 	bltu	r6,r2,4006d94 <_malloc_r+0x794>
 4006a60:	00810074 	movhi	r2,1025
 4006a64:	10bd8204 	addi	r2,r2,-2552
 4006a68:	11000017 	ldw	r4,0(r2)
 4006a6c:	20c0012e 	bgeu	r4,r3,4006a74 <_malloc_r+0x474>
 4006a70:	10c00015 	stw	r3,0(r2)
 4006a74:	00810074 	movhi	r2,1025
 4006a78:	10bd8104 	addi	r2,r2,-2556
 4006a7c:	11000017 	ldw	r4,0(r2)
 4006a80:	9c000217 	ldw	r16,8(r19)
 4006a84:	20c0012e 	bgeu	r4,r3,4006a8c <_malloc_r+0x48c>
 4006a88:	10c00015 	stw	r3,0(r2)
 4006a8c:	80c00117 	ldw	r3,4(r16)
 4006a90:	00bfff04 	movi	r2,-4
 4006a94:	1886703a 	and	r3,r3,r2
 4006a98:	1c45c83a 	sub	r2,r3,r17
 4006a9c:	1c400236 	bltu	r3,r17,4006aa8 <_malloc_r+0x4a8>
 4006aa0:	00c003c4 	movi	r3,15
 4006aa4:	18800416 	blt	r3,r2,4006ab8 <_malloc_r+0x4b8>
 4006aa8:	9009883a 	mov	r4,r18
 4006aac:	4008c640 	call	4008c64 <__malloc_unlock>
 4006ab0:	0005883a 	mov	r2,zero
 4006ab4:	003f7b06 	br	40068a4 <__ram_exceptions_end+0xfbfe665c>
 4006ab8:	88c00054 	ori	r3,r17,1
 4006abc:	80c00115 	stw	r3,4(r16)
 4006ac0:	8463883a 	add	r17,r16,r17
 4006ac4:	10800054 	ori	r2,r2,1
 4006ac8:	9c400215 	stw	r17,8(r19)
 4006acc:	88800115 	stw	r2,4(r17)
 4006ad0:	9009883a 	mov	r4,r18
 4006ad4:	4008c640 	call	4008c64 <__malloc_unlock>
 4006ad8:	80800204 	addi	r2,r16,8
 4006adc:	003f7106 	br	40068a4 <__ram_exceptions_end+0xfbfe665c>
 4006ae0:	00c00504 	movi	r3,20
 4006ae4:	18804a2e 	bgeu	r3,r2,4006c10 <_malloc_r+0x610>
 4006ae8:	00c01504 	movi	r3,84
 4006aec:	18806e36 	bltu	r3,r2,4006ca8 <_malloc_r+0x6a8>
 4006af0:	8804d33a 	srli	r2,r17,12
 4006af4:	12001bc4 	addi	r8,r2,111
 4006af8:	11c01b84 	addi	r7,r2,110
 4006afc:	4209883a 	add	r4,r8,r8
 4006b00:	003edd06 	br	4006678 <__ram_exceptions_end+0xfbfe6430>
 4006b04:	3804d27a 	srli	r2,r7,9
 4006b08:	00c00104 	movi	r3,4
 4006b0c:	1880442e 	bgeu	r3,r2,4006c20 <_malloc_r+0x620>
 4006b10:	00c00504 	movi	r3,20
 4006b14:	18808136 	bltu	r3,r2,4006d1c <_malloc_r+0x71c>
 4006b18:	11401704 	addi	r5,r2,92
 4006b1c:	10c016c4 	addi	r3,r2,91
 4006b20:	294b883a 	add	r5,r5,r5
 4006b24:	294b883a 	add	r5,r5,r5
 4006b28:	294b883a 	add	r5,r5,r5
 4006b2c:	994b883a 	add	r5,r19,r5
 4006b30:	28800017 	ldw	r2,0(r5)
 4006b34:	01810074 	movhi	r6,1025
 4006b38:	297ffe04 	addi	r5,r5,-8
 4006b3c:	31b12404 	addi	r6,r6,-15216
 4006b40:	28806526 	beq	r5,r2,4006cd8 <_malloc_r+0x6d8>
 4006b44:	01bfff04 	movi	r6,-4
 4006b48:	10c00117 	ldw	r3,4(r2)
 4006b4c:	1986703a 	and	r3,r3,r6
 4006b50:	38c0022e 	bgeu	r7,r3,4006b5c <_malloc_r+0x55c>
 4006b54:	10800217 	ldw	r2,8(r2)
 4006b58:	28bffb1e 	bne	r5,r2,4006b48 <__ram_exceptions_end+0xfbfe6900>
 4006b5c:	11400317 	ldw	r5,12(r2)
 4006b60:	98c00117 	ldw	r3,4(r19)
 4006b64:	81400315 	stw	r5,12(r16)
 4006b68:	80800215 	stw	r2,8(r16)
 4006b6c:	2c000215 	stw	r16,8(r5)
 4006b70:	14000315 	stw	r16,12(r2)
 4006b74:	003ef806 	br	4006758 <__ram_exceptions_end+0xfbfe6510>
 4006b78:	88c00054 	ori	r3,r17,1
 4006b7c:	80c00115 	stw	r3,4(r16)
 4006b80:	8463883a 	add	r17,r16,r17
 4006b84:	34400515 	stw	r17,20(r6)
 4006b88:	34400415 	stw	r17,16(r6)
 4006b8c:	10c00054 	ori	r3,r2,1
 4006b90:	8a000315 	stw	r8,12(r17)
 4006b94:	8a000215 	stw	r8,8(r17)
 4006b98:	88c00115 	stw	r3,4(r17)
 4006b9c:	88a3883a 	add	r17,r17,r2
 4006ba0:	88800015 	stw	r2,0(r17)
 4006ba4:	9009883a 	mov	r4,r18
 4006ba8:	4008c640 	call	4008c64 <__malloc_unlock>
 4006bac:	80800204 	addi	r2,r16,8
 4006bb0:	003f3c06 	br	40068a4 <__ram_exceptions_end+0xfbfe665c>
 4006bb4:	30c00117 	ldw	r3,4(r6)
 4006bb8:	003ee706 	br	4006758 <__ram_exceptions_end+0xfbfe6510>
 4006bbc:	5ac00044 	addi	r11,r11,1
 4006bc0:	588000cc 	andi	r2,r11,3
 4006bc4:	31800204 	addi	r6,r6,8
 4006bc8:	103efd1e 	bne	r2,zero,40067c0 <__ram_exceptions_end+0xfbfe6578>
 4006bcc:	00002406 	br	4006c60 <_malloc_r+0x660>
 4006bd0:	14000317 	ldw	r16,12(r2)
 4006bd4:	143f251e 	bne	r2,r16,400686c <__ram_exceptions_end+0xfbfe6624>
 4006bd8:	21000084 	addi	r4,r4,2
 4006bdc:	003ebc06 	br	40066d0 <__ram_exceptions_end+0xfbfe6488>
 4006be0:	8085883a 	add	r2,r16,r2
 4006be4:	10c00117 	ldw	r3,4(r2)
 4006be8:	81000317 	ldw	r4,12(r16)
 4006bec:	81400217 	ldw	r5,8(r16)
 4006bf0:	18c00054 	ori	r3,r3,1
 4006bf4:	10c00115 	stw	r3,4(r2)
 4006bf8:	29000315 	stw	r4,12(r5)
 4006bfc:	21400215 	stw	r5,8(r4)
 4006c00:	9009883a 	mov	r4,r18
 4006c04:	4008c640 	call	4008c64 <__malloc_unlock>
 4006c08:	80800204 	addi	r2,r16,8
 4006c0c:	003f2506 	br	40068a4 <__ram_exceptions_end+0xfbfe665c>
 4006c10:	12001704 	addi	r8,r2,92
 4006c14:	11c016c4 	addi	r7,r2,91
 4006c18:	4209883a 	add	r4,r8,r8
 4006c1c:	003e9606 	br	4006678 <__ram_exceptions_end+0xfbfe6430>
 4006c20:	3804d1ba 	srli	r2,r7,6
 4006c24:	11400e44 	addi	r5,r2,57
 4006c28:	10c00e04 	addi	r3,r2,56
 4006c2c:	294b883a 	add	r5,r5,r5
 4006c30:	003fbc06 	br	4006b24 <__ram_exceptions_end+0xfbfe68dc>
 4006c34:	84ff5926 	beq	r16,r19,400699c <__ram_exceptions_end+0xfbfe6754>
 4006c38:	00810074 	movhi	r2,1025
 4006c3c:	10b12404 	addi	r2,r2,-15216
 4006c40:	14000217 	ldw	r16,8(r2)
 4006c44:	00bfff04 	movi	r2,-4
 4006c48:	80c00117 	ldw	r3,4(r16)
 4006c4c:	1886703a 	and	r3,r3,r2
 4006c50:	003f9106 	br	4006a98 <__ram_exceptions_end+0xfbfe6850>
 4006c54:	60800217 	ldw	r2,8(r12)
 4006c58:	213fffc4 	addi	r4,r4,-1
 4006c5c:	1300651e 	bne	r2,r12,4006df4 <_malloc_r+0x7f4>
 4006c60:	208000cc 	andi	r2,r4,3
 4006c64:	633ffe04 	addi	r12,r12,-8
 4006c68:	103ffa1e 	bne	r2,zero,4006c54 <__ram_exceptions_end+0xfbfe6a0c>
 4006c6c:	98800117 	ldw	r2,4(r19)
 4006c70:	0146303a 	nor	r3,zero,r5
 4006c74:	1884703a 	and	r2,r3,r2
 4006c78:	98800115 	stw	r2,4(r19)
 4006c7c:	294b883a 	add	r5,r5,r5
 4006c80:	117f2836 	bltu	r2,r5,4006924 <__ram_exceptions_end+0xfbfe66dc>
 4006c84:	283f2726 	beq	r5,zero,4006924 <__ram_exceptions_end+0xfbfe66dc>
 4006c88:	2886703a 	and	r3,r5,r2
 4006c8c:	5809883a 	mov	r4,r11
 4006c90:	183ec31e 	bne	r3,zero,40067a0 <__ram_exceptions_end+0xfbfe6558>
 4006c94:	294b883a 	add	r5,r5,r5
 4006c98:	2886703a 	and	r3,r5,r2
 4006c9c:	21000104 	addi	r4,r4,4
 4006ca0:	183ffc26 	beq	r3,zero,4006c94 <__ram_exceptions_end+0xfbfe6a4c>
 4006ca4:	003ebe06 	br	40067a0 <__ram_exceptions_end+0xfbfe6558>
 4006ca8:	00c05504 	movi	r3,340
 4006cac:	18801236 	bltu	r3,r2,4006cf8 <_malloc_r+0x6f8>
 4006cb0:	8804d3fa 	srli	r2,r17,15
 4006cb4:	12001e04 	addi	r8,r2,120
 4006cb8:	11c01dc4 	addi	r7,r2,119
 4006cbc:	4209883a 	add	r4,r8,r8
 4006cc0:	003e6d06 	br	4006678 <__ram_exceptions_end+0xfbfe6430>
 4006cc4:	00c40004 	movi	r3,4096
 4006cc8:	003f4606 	br	40069e4 <__ram_exceptions_end+0xfbfe679c>
 4006ccc:	00800044 	movi	r2,1
 4006cd0:	a0800115 	stw	r2,4(r20)
 4006cd4:	003f7406 	br	4006aa8 <__ram_exceptions_end+0xfbfe6860>
 4006cd8:	1805d0ba 	srai	r2,r3,2
 4006cdc:	01c00044 	movi	r7,1
 4006ce0:	30c00117 	ldw	r3,4(r6)
 4006ce4:	388e983a 	sll	r7,r7,r2
 4006ce8:	2805883a 	mov	r2,r5
 4006cec:	38c6b03a 	or	r3,r7,r3
 4006cf0:	30c00115 	stw	r3,4(r6)
 4006cf4:	003f9b06 	br	4006b64 <__ram_exceptions_end+0xfbfe691c>
 4006cf8:	00c15504 	movi	r3,1364
 4006cfc:	18801a36 	bltu	r3,r2,4006d68 <_malloc_r+0x768>
 4006d00:	8804d4ba 	srli	r2,r17,18
 4006d04:	12001f44 	addi	r8,r2,125
 4006d08:	11c01f04 	addi	r7,r2,124
 4006d0c:	4209883a 	add	r4,r8,r8
 4006d10:	003e5906 	br	4006678 <__ram_exceptions_end+0xfbfe6430>
 4006d14:	ad400404 	addi	r21,r21,16
 4006d18:	003f1706 	br	4006978 <__ram_exceptions_end+0xfbfe6730>
 4006d1c:	00c01504 	movi	r3,84
 4006d20:	18802336 	bltu	r3,r2,4006db0 <_malloc_r+0x7b0>
 4006d24:	3804d33a 	srli	r2,r7,12
 4006d28:	11401bc4 	addi	r5,r2,111
 4006d2c:	10c01b84 	addi	r3,r2,110
 4006d30:	294b883a 	add	r5,r5,r5
 4006d34:	003f7b06 	br	4006b24 <__ram_exceptions_end+0xfbfe68dc>
 4006d38:	9c000217 	ldw	r16,8(r19)
 4006d3c:	00bfff04 	movi	r2,-4
 4006d40:	80c00117 	ldw	r3,4(r16)
 4006d44:	1886703a 	and	r3,r3,r2
 4006d48:	003f5306 	br	4006a98 <__ram_exceptions_end+0xfbfe6850>
 4006d4c:	3083ffcc 	andi	r2,r6,4095
 4006d50:	103f181e 	bne	r2,zero,40069b4 <__ram_exceptions_end+0xfbfe676c>
 4006d54:	99000217 	ldw	r4,8(r19)
 4006d58:	b545883a 	add	r2,r22,r21
 4006d5c:	10800054 	ori	r2,r2,1
 4006d60:	20800115 	stw	r2,4(r4)
 4006d64:	003f3e06 	br	4006a60 <__ram_exceptions_end+0xfbfe6818>
 4006d68:	01003f84 	movi	r4,254
 4006d6c:	02001fc4 	movi	r8,127
 4006d70:	01c01f84 	movi	r7,126
 4006d74:	003e4006 	br	4006678 <__ram_exceptions_end+0xfbfe6430>
 4006d78:	00810074 	movhi	r2,1025
 4006d7c:	10b6c204 	addi	r2,r2,-9464
 4006d80:	15000015 	stw	r20,0(r2)
 4006d84:	003f1106 	br	40069cc <__ram_exceptions_end+0xfbfe6784>
 4006d88:	00800044 	movi	r2,1
 4006d8c:	002b883a 	mov	r21,zero
 4006d90:	003f1f06 	br	4006a10 <__ram_exceptions_end+0xfbfe67c8>
 4006d94:	81400204 	addi	r5,r16,8
 4006d98:	9009883a 	mov	r4,r18
 4006d9c:	40080880 	call	4008088 <_free_r>
 4006da0:	00810074 	movhi	r2,1025
 4006da4:	10bd8c04 	addi	r2,r2,-2512
 4006da8:	10c00017 	ldw	r3,0(r2)
 4006dac:	003f2c06 	br	4006a60 <__ram_exceptions_end+0xfbfe6818>
 4006db0:	00c05504 	movi	r3,340
 4006db4:	18800536 	bltu	r3,r2,4006dcc <_malloc_r+0x7cc>
 4006db8:	3804d3fa 	srli	r2,r7,15
 4006dbc:	11401e04 	addi	r5,r2,120
 4006dc0:	10c01dc4 	addi	r3,r2,119
 4006dc4:	294b883a 	add	r5,r5,r5
 4006dc8:	003f5606 	br	4006b24 <__ram_exceptions_end+0xfbfe68dc>
 4006dcc:	00c15504 	movi	r3,1364
 4006dd0:	18800536 	bltu	r3,r2,4006de8 <_malloc_r+0x7e8>
 4006dd4:	3804d4ba 	srli	r2,r7,18
 4006dd8:	11401f44 	addi	r5,r2,125
 4006ddc:	10c01f04 	addi	r3,r2,124
 4006de0:	294b883a 	add	r5,r5,r5
 4006de4:	003f4f06 	br	4006b24 <__ram_exceptions_end+0xfbfe68dc>
 4006de8:	01403f84 	movi	r5,254
 4006dec:	00c01f84 	movi	r3,126
 4006df0:	003f4c06 	br	4006b24 <__ram_exceptions_end+0xfbfe68dc>
 4006df4:	98800117 	ldw	r2,4(r19)
 4006df8:	003fa006 	br	4006c7c <__ram_exceptions_end+0xfbfe6a34>
 4006dfc:	8808d0fa 	srli	r4,r17,3
 4006e00:	20800044 	addi	r2,r4,1
 4006e04:	1085883a 	add	r2,r2,r2
 4006e08:	003e9006 	br	400684c <__ram_exceptions_end+0xfbfe6604>

04006e0c <memchr>:
 4006e0c:	208000cc 	andi	r2,r4,3
 4006e10:	280f883a 	mov	r7,r5
 4006e14:	10003426 	beq	r2,zero,4006ee8 <memchr+0xdc>
 4006e18:	30bfffc4 	addi	r2,r6,-1
 4006e1c:	30001a26 	beq	r6,zero,4006e88 <memchr+0x7c>
 4006e20:	20c00003 	ldbu	r3,0(r4)
 4006e24:	29803fcc 	andi	r6,r5,255
 4006e28:	30c0051e 	bne	r6,r3,4006e40 <memchr+0x34>
 4006e2c:	00001806 	br	4006e90 <memchr+0x84>
 4006e30:	10001526 	beq	r2,zero,4006e88 <memchr+0x7c>
 4006e34:	20c00003 	ldbu	r3,0(r4)
 4006e38:	10bfffc4 	addi	r2,r2,-1
 4006e3c:	30c01426 	beq	r6,r3,4006e90 <memchr+0x84>
 4006e40:	21000044 	addi	r4,r4,1
 4006e44:	20c000cc 	andi	r3,r4,3
 4006e48:	183ff91e 	bne	r3,zero,4006e30 <__ram_exceptions_end+0xfbfe6be8>
 4006e4c:	020000c4 	movi	r8,3
 4006e50:	40801136 	bltu	r8,r2,4006e98 <memchr+0x8c>
 4006e54:	10000c26 	beq	r2,zero,4006e88 <memchr+0x7c>
 4006e58:	20c00003 	ldbu	r3,0(r4)
 4006e5c:	29403fcc 	andi	r5,r5,255
 4006e60:	28c00b26 	beq	r5,r3,4006e90 <memchr+0x84>
 4006e64:	20c00044 	addi	r3,r4,1
 4006e68:	39803fcc 	andi	r6,r7,255
 4006e6c:	2089883a 	add	r4,r4,r2
 4006e70:	00000306 	br	4006e80 <memchr+0x74>
 4006e74:	18c00044 	addi	r3,r3,1
 4006e78:	197fffc3 	ldbu	r5,-1(r3)
 4006e7c:	31400526 	beq	r6,r5,4006e94 <memchr+0x88>
 4006e80:	1805883a 	mov	r2,r3
 4006e84:	20fffb1e 	bne	r4,r3,4006e74 <__ram_exceptions_end+0xfbfe6c2c>
 4006e88:	0005883a 	mov	r2,zero
 4006e8c:	f800283a 	ret
 4006e90:	2005883a 	mov	r2,r4
 4006e94:	f800283a 	ret
 4006e98:	28c03fcc 	andi	r3,r5,255
 4006e9c:	1812923a 	slli	r9,r3,8
 4006ea0:	02ffbff4 	movhi	r11,65279
 4006ea4:	02a02074 	movhi	r10,32897
 4006ea8:	48d2b03a 	or	r9,r9,r3
 4006eac:	4806943a 	slli	r3,r9,16
 4006eb0:	5affbfc4 	addi	r11,r11,-257
 4006eb4:	52a02004 	addi	r10,r10,-32640
 4006eb8:	48d2b03a 	or	r9,r9,r3
 4006ebc:	20c00017 	ldw	r3,0(r4)
 4006ec0:	48c6f03a 	xor	r3,r9,r3
 4006ec4:	1acd883a 	add	r6,r3,r11
 4006ec8:	00c6303a 	nor	r3,zero,r3
 4006ecc:	30c6703a 	and	r3,r6,r3
 4006ed0:	1a86703a 	and	r3,r3,r10
 4006ed4:	183fe01e 	bne	r3,zero,4006e58 <__ram_exceptions_end+0xfbfe6c10>
 4006ed8:	10bfff04 	addi	r2,r2,-4
 4006edc:	21000104 	addi	r4,r4,4
 4006ee0:	40bff636 	bltu	r8,r2,4006ebc <__ram_exceptions_end+0xfbfe6c74>
 4006ee4:	003fdb06 	br	4006e54 <__ram_exceptions_end+0xfbfe6c0c>
 4006ee8:	3005883a 	mov	r2,r6
 4006eec:	003fd706 	br	4006e4c <__ram_exceptions_end+0xfbfe6c04>

04006ef0 <memcpy>:
 4006ef0:	defffd04 	addi	sp,sp,-12
 4006ef4:	dfc00215 	stw	ra,8(sp)
 4006ef8:	dc400115 	stw	r17,4(sp)
 4006efc:	dc000015 	stw	r16,0(sp)
 4006f00:	00c003c4 	movi	r3,15
 4006f04:	2005883a 	mov	r2,r4
 4006f08:	1980452e 	bgeu	r3,r6,4007020 <memcpy+0x130>
 4006f0c:	2906b03a 	or	r3,r5,r4
 4006f10:	18c000cc 	andi	r3,r3,3
 4006f14:	1800441e 	bne	r3,zero,4007028 <memcpy+0x138>
 4006f18:	347ffc04 	addi	r17,r6,-16
 4006f1c:	8822d13a 	srli	r17,r17,4
 4006f20:	28c00104 	addi	r3,r5,4
 4006f24:	23400104 	addi	r13,r4,4
 4006f28:	8820913a 	slli	r16,r17,4
 4006f2c:	2b000204 	addi	r12,r5,8
 4006f30:	22c00204 	addi	r11,r4,8
 4006f34:	84000504 	addi	r16,r16,20
 4006f38:	2a800304 	addi	r10,r5,12
 4006f3c:	22400304 	addi	r9,r4,12
 4006f40:	2c21883a 	add	r16,r5,r16
 4006f44:	2811883a 	mov	r8,r5
 4006f48:	200f883a 	mov	r7,r4
 4006f4c:	41000017 	ldw	r4,0(r8)
 4006f50:	1fc00017 	ldw	ra,0(r3)
 4006f54:	63c00017 	ldw	r15,0(r12)
 4006f58:	39000015 	stw	r4,0(r7)
 4006f5c:	53800017 	ldw	r14,0(r10)
 4006f60:	6fc00015 	stw	ra,0(r13)
 4006f64:	5bc00015 	stw	r15,0(r11)
 4006f68:	4b800015 	stw	r14,0(r9)
 4006f6c:	18c00404 	addi	r3,r3,16
 4006f70:	39c00404 	addi	r7,r7,16
 4006f74:	42000404 	addi	r8,r8,16
 4006f78:	6b400404 	addi	r13,r13,16
 4006f7c:	63000404 	addi	r12,r12,16
 4006f80:	5ac00404 	addi	r11,r11,16
 4006f84:	52800404 	addi	r10,r10,16
 4006f88:	4a400404 	addi	r9,r9,16
 4006f8c:	1c3fef1e 	bne	r3,r16,4006f4c <__ram_exceptions_end+0xfbfe6d04>
 4006f90:	89c00044 	addi	r7,r17,1
 4006f94:	380e913a 	slli	r7,r7,4
 4006f98:	310003cc 	andi	r4,r6,15
 4006f9c:	02c000c4 	movi	r11,3
 4006fa0:	11c7883a 	add	r3,r2,r7
 4006fa4:	29cb883a 	add	r5,r5,r7
 4006fa8:	5900212e 	bgeu	r11,r4,4007030 <memcpy+0x140>
 4006fac:	1813883a 	mov	r9,r3
 4006fb0:	2811883a 	mov	r8,r5
 4006fb4:	200f883a 	mov	r7,r4
 4006fb8:	42800017 	ldw	r10,0(r8)
 4006fbc:	4a400104 	addi	r9,r9,4
 4006fc0:	39ffff04 	addi	r7,r7,-4
 4006fc4:	4abfff15 	stw	r10,-4(r9)
 4006fc8:	42000104 	addi	r8,r8,4
 4006fcc:	59fffa36 	bltu	r11,r7,4006fb8 <__ram_exceptions_end+0xfbfe6d70>
 4006fd0:	213fff04 	addi	r4,r4,-4
 4006fd4:	2008d0ba 	srli	r4,r4,2
 4006fd8:	318000cc 	andi	r6,r6,3
 4006fdc:	21000044 	addi	r4,r4,1
 4006fe0:	2109883a 	add	r4,r4,r4
 4006fe4:	2109883a 	add	r4,r4,r4
 4006fe8:	1907883a 	add	r3,r3,r4
 4006fec:	290b883a 	add	r5,r5,r4
 4006ff0:	30000626 	beq	r6,zero,400700c <memcpy+0x11c>
 4006ff4:	198d883a 	add	r6,r3,r6
 4006ff8:	29c00003 	ldbu	r7,0(r5)
 4006ffc:	18c00044 	addi	r3,r3,1
 4007000:	29400044 	addi	r5,r5,1
 4007004:	19ffffc5 	stb	r7,-1(r3)
 4007008:	19bffb1e 	bne	r3,r6,4006ff8 <__ram_exceptions_end+0xfbfe6db0>
 400700c:	dfc00217 	ldw	ra,8(sp)
 4007010:	dc400117 	ldw	r17,4(sp)
 4007014:	dc000017 	ldw	r16,0(sp)
 4007018:	dec00304 	addi	sp,sp,12
 400701c:	f800283a 	ret
 4007020:	2007883a 	mov	r3,r4
 4007024:	003ff206 	br	4006ff0 <__ram_exceptions_end+0xfbfe6da8>
 4007028:	2007883a 	mov	r3,r4
 400702c:	003ff106 	br	4006ff4 <__ram_exceptions_end+0xfbfe6dac>
 4007030:	200d883a 	mov	r6,r4
 4007034:	003fee06 	br	4006ff0 <__ram_exceptions_end+0xfbfe6da8>

04007038 <memmove>:
 4007038:	2005883a 	mov	r2,r4
 400703c:	29000b2e 	bgeu	r5,r4,400706c <memmove+0x34>
 4007040:	298f883a 	add	r7,r5,r6
 4007044:	21c0092e 	bgeu	r4,r7,400706c <memmove+0x34>
 4007048:	2187883a 	add	r3,r4,r6
 400704c:	198bc83a 	sub	r5,r3,r6
 4007050:	30004826 	beq	r6,zero,4007174 <memmove+0x13c>
 4007054:	39ffffc4 	addi	r7,r7,-1
 4007058:	39000003 	ldbu	r4,0(r7)
 400705c:	18ffffc4 	addi	r3,r3,-1
 4007060:	19000005 	stb	r4,0(r3)
 4007064:	28fffb1e 	bne	r5,r3,4007054 <__ram_exceptions_end+0xfbfe6e0c>
 4007068:	f800283a 	ret
 400706c:	00c003c4 	movi	r3,15
 4007070:	1980412e 	bgeu	r3,r6,4007178 <memmove+0x140>
 4007074:	2886b03a 	or	r3,r5,r2
 4007078:	18c000cc 	andi	r3,r3,3
 400707c:	1800401e 	bne	r3,zero,4007180 <memmove+0x148>
 4007080:	33fffc04 	addi	r15,r6,-16
 4007084:	781ed13a 	srli	r15,r15,4
 4007088:	28c00104 	addi	r3,r5,4
 400708c:	13400104 	addi	r13,r2,4
 4007090:	781c913a 	slli	r14,r15,4
 4007094:	2b000204 	addi	r12,r5,8
 4007098:	12c00204 	addi	r11,r2,8
 400709c:	73800504 	addi	r14,r14,20
 40070a0:	2a800304 	addi	r10,r5,12
 40070a4:	12400304 	addi	r9,r2,12
 40070a8:	2b9d883a 	add	r14,r5,r14
 40070ac:	2811883a 	mov	r8,r5
 40070b0:	100f883a 	mov	r7,r2
 40070b4:	41000017 	ldw	r4,0(r8)
 40070b8:	39c00404 	addi	r7,r7,16
 40070bc:	18c00404 	addi	r3,r3,16
 40070c0:	393ffc15 	stw	r4,-16(r7)
 40070c4:	193ffc17 	ldw	r4,-16(r3)
 40070c8:	6b400404 	addi	r13,r13,16
 40070cc:	5ac00404 	addi	r11,r11,16
 40070d0:	693ffc15 	stw	r4,-16(r13)
 40070d4:	61000017 	ldw	r4,0(r12)
 40070d8:	4a400404 	addi	r9,r9,16
 40070dc:	42000404 	addi	r8,r8,16
 40070e0:	593ffc15 	stw	r4,-16(r11)
 40070e4:	51000017 	ldw	r4,0(r10)
 40070e8:	63000404 	addi	r12,r12,16
 40070ec:	52800404 	addi	r10,r10,16
 40070f0:	493ffc15 	stw	r4,-16(r9)
 40070f4:	1bbfef1e 	bne	r3,r14,40070b4 <__ram_exceptions_end+0xfbfe6e6c>
 40070f8:	79000044 	addi	r4,r15,1
 40070fc:	2008913a 	slli	r4,r4,4
 4007100:	328003cc 	andi	r10,r6,15
 4007104:	02c000c4 	movi	r11,3
 4007108:	1107883a 	add	r3,r2,r4
 400710c:	290b883a 	add	r5,r5,r4
 4007110:	5a801e2e 	bgeu	r11,r10,400718c <memmove+0x154>
 4007114:	1813883a 	mov	r9,r3
 4007118:	2811883a 	mov	r8,r5
 400711c:	500f883a 	mov	r7,r10
 4007120:	41000017 	ldw	r4,0(r8)
 4007124:	4a400104 	addi	r9,r9,4
 4007128:	39ffff04 	addi	r7,r7,-4
 400712c:	493fff15 	stw	r4,-4(r9)
 4007130:	42000104 	addi	r8,r8,4
 4007134:	59fffa36 	bltu	r11,r7,4007120 <__ram_exceptions_end+0xfbfe6ed8>
 4007138:	513fff04 	addi	r4,r10,-4
 400713c:	2008d0ba 	srli	r4,r4,2
 4007140:	318000cc 	andi	r6,r6,3
 4007144:	21000044 	addi	r4,r4,1
 4007148:	2109883a 	add	r4,r4,r4
 400714c:	2109883a 	add	r4,r4,r4
 4007150:	1907883a 	add	r3,r3,r4
 4007154:	290b883a 	add	r5,r5,r4
 4007158:	30000b26 	beq	r6,zero,4007188 <memmove+0x150>
 400715c:	198d883a 	add	r6,r3,r6
 4007160:	29c00003 	ldbu	r7,0(r5)
 4007164:	18c00044 	addi	r3,r3,1
 4007168:	29400044 	addi	r5,r5,1
 400716c:	19ffffc5 	stb	r7,-1(r3)
 4007170:	19bffb1e 	bne	r3,r6,4007160 <__ram_exceptions_end+0xfbfe6f18>
 4007174:	f800283a 	ret
 4007178:	1007883a 	mov	r3,r2
 400717c:	003ff606 	br	4007158 <__ram_exceptions_end+0xfbfe6f10>
 4007180:	1007883a 	mov	r3,r2
 4007184:	003ff506 	br	400715c <__ram_exceptions_end+0xfbfe6f14>
 4007188:	f800283a 	ret
 400718c:	500d883a 	mov	r6,r10
 4007190:	003ff106 	br	4007158 <__ram_exceptions_end+0xfbfe6f10>

04007194 <memset>:
 4007194:	20c000cc 	andi	r3,r4,3
 4007198:	2005883a 	mov	r2,r4
 400719c:	18004426 	beq	r3,zero,40072b0 <memset+0x11c>
 40071a0:	31ffffc4 	addi	r7,r6,-1
 40071a4:	30004026 	beq	r6,zero,40072a8 <memset+0x114>
 40071a8:	2813883a 	mov	r9,r5
 40071ac:	200d883a 	mov	r6,r4
 40071b0:	2007883a 	mov	r3,r4
 40071b4:	00000406 	br	40071c8 <memset+0x34>
 40071b8:	3a3fffc4 	addi	r8,r7,-1
 40071bc:	31800044 	addi	r6,r6,1
 40071c0:	38003926 	beq	r7,zero,40072a8 <memset+0x114>
 40071c4:	400f883a 	mov	r7,r8
 40071c8:	18c00044 	addi	r3,r3,1
 40071cc:	32400005 	stb	r9,0(r6)
 40071d0:	1a0000cc 	andi	r8,r3,3
 40071d4:	403ff81e 	bne	r8,zero,40071b8 <__ram_exceptions_end+0xfbfe6f70>
 40071d8:	010000c4 	movi	r4,3
 40071dc:	21c02d2e 	bgeu	r4,r7,4007294 <memset+0x100>
 40071e0:	29003fcc 	andi	r4,r5,255
 40071e4:	200c923a 	slli	r6,r4,8
 40071e8:	3108b03a 	or	r4,r6,r4
 40071ec:	200c943a 	slli	r6,r4,16
 40071f0:	218cb03a 	or	r6,r4,r6
 40071f4:	010003c4 	movi	r4,15
 40071f8:	21c0182e 	bgeu	r4,r7,400725c <memset+0xc8>
 40071fc:	3b3ffc04 	addi	r12,r7,-16
 4007200:	6018d13a 	srli	r12,r12,4
 4007204:	1a000104 	addi	r8,r3,4
 4007208:	1ac00204 	addi	r11,r3,8
 400720c:	6008913a 	slli	r4,r12,4
 4007210:	1a800304 	addi	r10,r3,12
 4007214:	1813883a 	mov	r9,r3
 4007218:	21000504 	addi	r4,r4,20
 400721c:	1909883a 	add	r4,r3,r4
 4007220:	49800015 	stw	r6,0(r9)
 4007224:	41800015 	stw	r6,0(r8)
 4007228:	59800015 	stw	r6,0(r11)
 400722c:	51800015 	stw	r6,0(r10)
 4007230:	42000404 	addi	r8,r8,16
 4007234:	4a400404 	addi	r9,r9,16
 4007238:	5ac00404 	addi	r11,r11,16
 400723c:	52800404 	addi	r10,r10,16
 4007240:	413ff71e 	bne	r8,r4,4007220 <__ram_exceptions_end+0xfbfe6fd8>
 4007244:	63000044 	addi	r12,r12,1
 4007248:	6018913a 	slli	r12,r12,4
 400724c:	39c003cc 	andi	r7,r7,15
 4007250:	010000c4 	movi	r4,3
 4007254:	1b07883a 	add	r3,r3,r12
 4007258:	21c00e2e 	bgeu	r4,r7,4007294 <memset+0x100>
 400725c:	1813883a 	mov	r9,r3
 4007260:	3811883a 	mov	r8,r7
 4007264:	010000c4 	movi	r4,3
 4007268:	49800015 	stw	r6,0(r9)
 400726c:	423fff04 	addi	r8,r8,-4
 4007270:	4a400104 	addi	r9,r9,4
 4007274:	223ffc36 	bltu	r4,r8,4007268 <__ram_exceptions_end+0xfbfe7020>
 4007278:	393fff04 	addi	r4,r7,-4
 400727c:	2008d0ba 	srli	r4,r4,2
 4007280:	39c000cc 	andi	r7,r7,3
 4007284:	21000044 	addi	r4,r4,1
 4007288:	2109883a 	add	r4,r4,r4
 400728c:	2109883a 	add	r4,r4,r4
 4007290:	1907883a 	add	r3,r3,r4
 4007294:	38000526 	beq	r7,zero,40072ac <memset+0x118>
 4007298:	19cf883a 	add	r7,r3,r7
 400729c:	19400005 	stb	r5,0(r3)
 40072a0:	18c00044 	addi	r3,r3,1
 40072a4:	38fffd1e 	bne	r7,r3,400729c <__ram_exceptions_end+0xfbfe7054>
 40072a8:	f800283a 	ret
 40072ac:	f800283a 	ret
 40072b0:	2007883a 	mov	r3,r4
 40072b4:	300f883a 	mov	r7,r6
 40072b8:	003fc706 	br	40071d8 <__ram_exceptions_end+0xfbfe6f90>

040072bc <_realloc_r>:
 40072bc:	defff604 	addi	sp,sp,-40
 40072c0:	dc800215 	stw	r18,8(sp)
 40072c4:	dfc00915 	stw	ra,36(sp)
 40072c8:	df000815 	stw	fp,32(sp)
 40072cc:	ddc00715 	stw	r23,28(sp)
 40072d0:	dd800615 	stw	r22,24(sp)
 40072d4:	dd400515 	stw	r21,20(sp)
 40072d8:	dd000415 	stw	r20,16(sp)
 40072dc:	dcc00315 	stw	r19,12(sp)
 40072e0:	dc400115 	stw	r17,4(sp)
 40072e4:	dc000015 	stw	r16,0(sp)
 40072e8:	3025883a 	mov	r18,r6
 40072ec:	2800b726 	beq	r5,zero,40075cc <_realloc_r+0x310>
 40072f0:	282b883a 	mov	r21,r5
 40072f4:	2029883a 	mov	r20,r4
 40072f8:	4008c400 	call	4008c40 <__malloc_lock>
 40072fc:	a8bfff17 	ldw	r2,-4(r21)
 4007300:	043fff04 	movi	r16,-4
 4007304:	90c002c4 	addi	r3,r18,11
 4007308:	01000584 	movi	r4,22
 400730c:	acfffe04 	addi	r19,r21,-8
 4007310:	1420703a 	and	r16,r2,r16
 4007314:	20c0332e 	bgeu	r4,r3,40073e4 <_realloc_r+0x128>
 4007318:	047ffe04 	movi	r17,-8
 400731c:	1c62703a 	and	r17,r3,r17
 4007320:	8807883a 	mov	r3,r17
 4007324:	88005816 	blt	r17,zero,4007488 <_realloc_r+0x1cc>
 4007328:	8c805736 	bltu	r17,r18,4007488 <_realloc_r+0x1cc>
 400732c:	80c0300e 	bge	r16,r3,40073f0 <_realloc_r+0x134>
 4007330:	07010074 	movhi	fp,1025
 4007334:	e7312404 	addi	fp,fp,-15216
 4007338:	e1c00217 	ldw	r7,8(fp)
 400733c:	9c09883a 	add	r4,r19,r16
 4007340:	22000117 	ldw	r8,4(r4)
 4007344:	21c06326 	beq	r4,r7,40074d4 <_realloc_r+0x218>
 4007348:	017fff84 	movi	r5,-2
 400734c:	414a703a 	and	r5,r8,r5
 4007350:	214b883a 	add	r5,r4,r5
 4007354:	29800117 	ldw	r6,4(r5)
 4007358:	3180004c 	andi	r6,r6,1
 400735c:	30003f26 	beq	r6,zero,400745c <_realloc_r+0x1a0>
 4007360:	1080004c 	andi	r2,r2,1
 4007364:	10008326 	beq	r2,zero,4007574 <_realloc_r+0x2b8>
 4007368:	900b883a 	mov	r5,r18
 400736c:	a009883a 	mov	r4,r20
 4007370:	40066000 	call	4006600 <_malloc_r>
 4007374:	1025883a 	mov	r18,r2
 4007378:	10011e26 	beq	r2,zero,40077f4 <_realloc_r+0x538>
 400737c:	a93fff17 	ldw	r4,-4(r21)
 4007380:	10fffe04 	addi	r3,r2,-8
 4007384:	00bfff84 	movi	r2,-2
 4007388:	2084703a 	and	r2,r4,r2
 400738c:	9885883a 	add	r2,r19,r2
 4007390:	1880ee26 	beq	r3,r2,400774c <_realloc_r+0x490>
 4007394:	81bfff04 	addi	r6,r16,-4
 4007398:	00800904 	movi	r2,36
 400739c:	1180b836 	bltu	r2,r6,4007680 <_realloc_r+0x3c4>
 40073a0:	00c004c4 	movi	r3,19
 40073a4:	19809636 	bltu	r3,r6,4007600 <_realloc_r+0x344>
 40073a8:	9005883a 	mov	r2,r18
 40073ac:	a807883a 	mov	r3,r21
 40073b0:	19000017 	ldw	r4,0(r3)
 40073b4:	11000015 	stw	r4,0(r2)
 40073b8:	19000117 	ldw	r4,4(r3)
 40073bc:	11000115 	stw	r4,4(r2)
 40073c0:	18c00217 	ldw	r3,8(r3)
 40073c4:	10c00215 	stw	r3,8(r2)
 40073c8:	a80b883a 	mov	r5,r21
 40073cc:	a009883a 	mov	r4,r20
 40073d0:	40080880 	call	4008088 <_free_r>
 40073d4:	a009883a 	mov	r4,r20
 40073d8:	4008c640 	call	4008c64 <__malloc_unlock>
 40073dc:	9005883a 	mov	r2,r18
 40073e0:	00001206 	br	400742c <_realloc_r+0x170>
 40073e4:	00c00404 	movi	r3,16
 40073e8:	1823883a 	mov	r17,r3
 40073ec:	003fce06 	br	4007328 <__ram_exceptions_end+0xfbfe70e0>
 40073f0:	a825883a 	mov	r18,r21
 40073f4:	8445c83a 	sub	r2,r16,r17
 40073f8:	00c003c4 	movi	r3,15
 40073fc:	18802636 	bltu	r3,r2,4007498 <_realloc_r+0x1dc>
 4007400:	99800117 	ldw	r6,4(r19)
 4007404:	9c07883a 	add	r3,r19,r16
 4007408:	3180004c 	andi	r6,r6,1
 400740c:	3420b03a 	or	r16,r6,r16
 4007410:	9c000115 	stw	r16,4(r19)
 4007414:	18800117 	ldw	r2,4(r3)
 4007418:	10800054 	ori	r2,r2,1
 400741c:	18800115 	stw	r2,4(r3)
 4007420:	a009883a 	mov	r4,r20
 4007424:	4008c640 	call	4008c64 <__malloc_unlock>
 4007428:	9005883a 	mov	r2,r18
 400742c:	dfc00917 	ldw	ra,36(sp)
 4007430:	df000817 	ldw	fp,32(sp)
 4007434:	ddc00717 	ldw	r23,28(sp)
 4007438:	dd800617 	ldw	r22,24(sp)
 400743c:	dd400517 	ldw	r21,20(sp)
 4007440:	dd000417 	ldw	r20,16(sp)
 4007444:	dcc00317 	ldw	r19,12(sp)
 4007448:	dc800217 	ldw	r18,8(sp)
 400744c:	dc400117 	ldw	r17,4(sp)
 4007450:	dc000017 	ldw	r16,0(sp)
 4007454:	dec00a04 	addi	sp,sp,40
 4007458:	f800283a 	ret
 400745c:	017fff04 	movi	r5,-4
 4007460:	414a703a 	and	r5,r8,r5
 4007464:	814d883a 	add	r6,r16,r5
 4007468:	30c01f16 	blt	r6,r3,40074e8 <_realloc_r+0x22c>
 400746c:	20800317 	ldw	r2,12(r4)
 4007470:	20c00217 	ldw	r3,8(r4)
 4007474:	a825883a 	mov	r18,r21
 4007478:	3021883a 	mov	r16,r6
 400747c:	18800315 	stw	r2,12(r3)
 4007480:	10c00215 	stw	r3,8(r2)
 4007484:	003fdb06 	br	40073f4 <__ram_exceptions_end+0xfbfe71ac>
 4007488:	00800304 	movi	r2,12
 400748c:	a0800015 	stw	r2,0(r20)
 4007490:	0005883a 	mov	r2,zero
 4007494:	003fe506 	br	400742c <__ram_exceptions_end+0xfbfe71e4>
 4007498:	98c00117 	ldw	r3,4(r19)
 400749c:	9c4b883a 	add	r5,r19,r17
 40074a0:	11000054 	ori	r4,r2,1
 40074a4:	18c0004c 	andi	r3,r3,1
 40074a8:	1c62b03a 	or	r17,r3,r17
 40074ac:	9c400115 	stw	r17,4(r19)
 40074b0:	29000115 	stw	r4,4(r5)
 40074b4:	2885883a 	add	r2,r5,r2
 40074b8:	10c00117 	ldw	r3,4(r2)
 40074bc:	29400204 	addi	r5,r5,8
 40074c0:	a009883a 	mov	r4,r20
 40074c4:	18c00054 	ori	r3,r3,1
 40074c8:	10c00115 	stw	r3,4(r2)
 40074cc:	40080880 	call	4008088 <_free_r>
 40074d0:	003fd306 	br	4007420 <__ram_exceptions_end+0xfbfe71d8>
 40074d4:	017fff04 	movi	r5,-4
 40074d8:	414a703a 	and	r5,r8,r5
 40074dc:	89800404 	addi	r6,r17,16
 40074e0:	8151883a 	add	r8,r16,r5
 40074e4:	4180590e 	bge	r8,r6,400764c <_realloc_r+0x390>
 40074e8:	1080004c 	andi	r2,r2,1
 40074ec:	103f9e1e 	bne	r2,zero,4007368 <__ram_exceptions_end+0xfbfe7120>
 40074f0:	adbffe17 	ldw	r22,-8(r21)
 40074f4:	00bfff04 	movi	r2,-4
 40074f8:	9dadc83a 	sub	r22,r19,r22
 40074fc:	b1800117 	ldw	r6,4(r22)
 4007500:	3084703a 	and	r2,r6,r2
 4007504:	20002026 	beq	r4,zero,4007588 <_realloc_r+0x2cc>
 4007508:	80af883a 	add	r23,r16,r2
 400750c:	b96f883a 	add	r23,r23,r5
 4007510:	21c05f26 	beq	r4,r7,4007690 <_realloc_r+0x3d4>
 4007514:	b8c01c16 	blt	r23,r3,4007588 <_realloc_r+0x2cc>
 4007518:	20800317 	ldw	r2,12(r4)
 400751c:	20c00217 	ldw	r3,8(r4)
 4007520:	81bfff04 	addi	r6,r16,-4
 4007524:	01000904 	movi	r4,36
 4007528:	18800315 	stw	r2,12(r3)
 400752c:	10c00215 	stw	r3,8(r2)
 4007530:	b0c00217 	ldw	r3,8(r22)
 4007534:	b0800317 	ldw	r2,12(r22)
 4007538:	b4800204 	addi	r18,r22,8
 400753c:	18800315 	stw	r2,12(r3)
 4007540:	10c00215 	stw	r3,8(r2)
 4007544:	21801b36 	bltu	r4,r6,40075b4 <_realloc_r+0x2f8>
 4007548:	008004c4 	movi	r2,19
 400754c:	1180352e 	bgeu	r2,r6,4007624 <_realloc_r+0x368>
 4007550:	a8800017 	ldw	r2,0(r21)
 4007554:	b0800215 	stw	r2,8(r22)
 4007558:	a8800117 	ldw	r2,4(r21)
 400755c:	b0800315 	stw	r2,12(r22)
 4007560:	008006c4 	movi	r2,27
 4007564:	11807f36 	bltu	r2,r6,4007764 <_realloc_r+0x4a8>
 4007568:	b0800404 	addi	r2,r22,16
 400756c:	ad400204 	addi	r21,r21,8
 4007570:	00002d06 	br	4007628 <_realloc_r+0x36c>
 4007574:	adbffe17 	ldw	r22,-8(r21)
 4007578:	00bfff04 	movi	r2,-4
 400757c:	9dadc83a 	sub	r22,r19,r22
 4007580:	b1000117 	ldw	r4,4(r22)
 4007584:	2084703a 	and	r2,r4,r2
 4007588:	b03f7726 	beq	r22,zero,4007368 <__ram_exceptions_end+0xfbfe7120>
 400758c:	80af883a 	add	r23,r16,r2
 4007590:	b8ff7516 	blt	r23,r3,4007368 <__ram_exceptions_end+0xfbfe7120>
 4007594:	b0800317 	ldw	r2,12(r22)
 4007598:	b0c00217 	ldw	r3,8(r22)
 400759c:	81bfff04 	addi	r6,r16,-4
 40075a0:	01000904 	movi	r4,36
 40075a4:	18800315 	stw	r2,12(r3)
 40075a8:	10c00215 	stw	r3,8(r2)
 40075ac:	b4800204 	addi	r18,r22,8
 40075b0:	21bfe52e 	bgeu	r4,r6,4007548 <__ram_exceptions_end+0xfbfe7300>
 40075b4:	a80b883a 	mov	r5,r21
 40075b8:	9009883a 	mov	r4,r18
 40075bc:	40070380 	call	4007038 <memmove>
 40075c0:	b821883a 	mov	r16,r23
 40075c4:	b027883a 	mov	r19,r22
 40075c8:	003f8a06 	br	40073f4 <__ram_exceptions_end+0xfbfe71ac>
 40075cc:	300b883a 	mov	r5,r6
 40075d0:	dfc00917 	ldw	ra,36(sp)
 40075d4:	df000817 	ldw	fp,32(sp)
 40075d8:	ddc00717 	ldw	r23,28(sp)
 40075dc:	dd800617 	ldw	r22,24(sp)
 40075e0:	dd400517 	ldw	r21,20(sp)
 40075e4:	dd000417 	ldw	r20,16(sp)
 40075e8:	dcc00317 	ldw	r19,12(sp)
 40075ec:	dc800217 	ldw	r18,8(sp)
 40075f0:	dc400117 	ldw	r17,4(sp)
 40075f4:	dc000017 	ldw	r16,0(sp)
 40075f8:	dec00a04 	addi	sp,sp,40
 40075fc:	40066001 	jmpi	4006600 <_malloc_r>
 4007600:	a8c00017 	ldw	r3,0(r21)
 4007604:	90c00015 	stw	r3,0(r18)
 4007608:	a8c00117 	ldw	r3,4(r21)
 400760c:	90c00115 	stw	r3,4(r18)
 4007610:	00c006c4 	movi	r3,27
 4007614:	19804536 	bltu	r3,r6,400772c <_realloc_r+0x470>
 4007618:	90800204 	addi	r2,r18,8
 400761c:	a8c00204 	addi	r3,r21,8
 4007620:	003f6306 	br	40073b0 <__ram_exceptions_end+0xfbfe7168>
 4007624:	9005883a 	mov	r2,r18
 4007628:	a8c00017 	ldw	r3,0(r21)
 400762c:	b821883a 	mov	r16,r23
 4007630:	b027883a 	mov	r19,r22
 4007634:	10c00015 	stw	r3,0(r2)
 4007638:	a8c00117 	ldw	r3,4(r21)
 400763c:	10c00115 	stw	r3,4(r2)
 4007640:	a8c00217 	ldw	r3,8(r21)
 4007644:	10c00215 	stw	r3,8(r2)
 4007648:	003f6a06 	br	40073f4 <__ram_exceptions_end+0xfbfe71ac>
 400764c:	9c67883a 	add	r19,r19,r17
 4007650:	4445c83a 	sub	r2,r8,r17
 4007654:	e4c00215 	stw	r19,8(fp)
 4007658:	10800054 	ori	r2,r2,1
 400765c:	98800115 	stw	r2,4(r19)
 4007660:	a8bfff17 	ldw	r2,-4(r21)
 4007664:	a009883a 	mov	r4,r20
 4007668:	1080004c 	andi	r2,r2,1
 400766c:	1462b03a 	or	r17,r2,r17
 4007670:	ac7fff15 	stw	r17,-4(r21)
 4007674:	4008c640 	call	4008c64 <__malloc_unlock>
 4007678:	a805883a 	mov	r2,r21
 400767c:	003f6b06 	br	400742c <__ram_exceptions_end+0xfbfe71e4>
 4007680:	a80b883a 	mov	r5,r21
 4007684:	9009883a 	mov	r4,r18
 4007688:	40070380 	call	4007038 <memmove>
 400768c:	003f4e06 	br	40073c8 <__ram_exceptions_end+0xfbfe7180>
 4007690:	89000404 	addi	r4,r17,16
 4007694:	b93fbc16 	blt	r23,r4,4007588 <__ram_exceptions_end+0xfbfe7340>
 4007698:	b0800317 	ldw	r2,12(r22)
 400769c:	b0c00217 	ldw	r3,8(r22)
 40076a0:	81bfff04 	addi	r6,r16,-4
 40076a4:	01000904 	movi	r4,36
 40076a8:	18800315 	stw	r2,12(r3)
 40076ac:	10c00215 	stw	r3,8(r2)
 40076b0:	b4800204 	addi	r18,r22,8
 40076b4:	21804336 	bltu	r4,r6,40077c4 <_realloc_r+0x508>
 40076b8:	008004c4 	movi	r2,19
 40076bc:	11803f2e 	bgeu	r2,r6,40077bc <_realloc_r+0x500>
 40076c0:	a8800017 	ldw	r2,0(r21)
 40076c4:	b0800215 	stw	r2,8(r22)
 40076c8:	a8800117 	ldw	r2,4(r21)
 40076cc:	b0800315 	stw	r2,12(r22)
 40076d0:	008006c4 	movi	r2,27
 40076d4:	11803f36 	bltu	r2,r6,40077d4 <_realloc_r+0x518>
 40076d8:	b0800404 	addi	r2,r22,16
 40076dc:	ad400204 	addi	r21,r21,8
 40076e0:	a8c00017 	ldw	r3,0(r21)
 40076e4:	10c00015 	stw	r3,0(r2)
 40076e8:	a8c00117 	ldw	r3,4(r21)
 40076ec:	10c00115 	stw	r3,4(r2)
 40076f0:	a8c00217 	ldw	r3,8(r21)
 40076f4:	10c00215 	stw	r3,8(r2)
 40076f8:	b447883a 	add	r3,r22,r17
 40076fc:	bc45c83a 	sub	r2,r23,r17
 4007700:	e0c00215 	stw	r3,8(fp)
 4007704:	10800054 	ori	r2,r2,1
 4007708:	18800115 	stw	r2,4(r3)
 400770c:	b0800117 	ldw	r2,4(r22)
 4007710:	a009883a 	mov	r4,r20
 4007714:	1080004c 	andi	r2,r2,1
 4007718:	1462b03a 	or	r17,r2,r17
 400771c:	b4400115 	stw	r17,4(r22)
 4007720:	4008c640 	call	4008c64 <__malloc_unlock>
 4007724:	9005883a 	mov	r2,r18
 4007728:	003f4006 	br	400742c <__ram_exceptions_end+0xfbfe71e4>
 400772c:	a8c00217 	ldw	r3,8(r21)
 4007730:	90c00215 	stw	r3,8(r18)
 4007734:	a8c00317 	ldw	r3,12(r21)
 4007738:	90c00315 	stw	r3,12(r18)
 400773c:	30801126 	beq	r6,r2,4007784 <_realloc_r+0x4c8>
 4007740:	90800404 	addi	r2,r18,16
 4007744:	a8c00404 	addi	r3,r21,16
 4007748:	003f1906 	br	40073b0 <__ram_exceptions_end+0xfbfe7168>
 400774c:	90ffff17 	ldw	r3,-4(r18)
 4007750:	00bfff04 	movi	r2,-4
 4007754:	a825883a 	mov	r18,r21
 4007758:	1884703a 	and	r2,r3,r2
 400775c:	80a1883a 	add	r16,r16,r2
 4007760:	003f2406 	br	40073f4 <__ram_exceptions_end+0xfbfe71ac>
 4007764:	a8800217 	ldw	r2,8(r21)
 4007768:	b0800415 	stw	r2,16(r22)
 400776c:	a8800317 	ldw	r2,12(r21)
 4007770:	b0800515 	stw	r2,20(r22)
 4007774:	31000a26 	beq	r6,r4,40077a0 <_realloc_r+0x4e4>
 4007778:	b0800604 	addi	r2,r22,24
 400777c:	ad400404 	addi	r21,r21,16
 4007780:	003fa906 	br	4007628 <__ram_exceptions_end+0xfbfe73e0>
 4007784:	a9000417 	ldw	r4,16(r21)
 4007788:	90800604 	addi	r2,r18,24
 400778c:	a8c00604 	addi	r3,r21,24
 4007790:	91000415 	stw	r4,16(r18)
 4007794:	a9000517 	ldw	r4,20(r21)
 4007798:	91000515 	stw	r4,20(r18)
 400779c:	003f0406 	br	40073b0 <__ram_exceptions_end+0xfbfe7168>
 40077a0:	a8c00417 	ldw	r3,16(r21)
 40077a4:	ad400604 	addi	r21,r21,24
 40077a8:	b0800804 	addi	r2,r22,32
 40077ac:	b0c00615 	stw	r3,24(r22)
 40077b0:	a8ffff17 	ldw	r3,-4(r21)
 40077b4:	b0c00715 	stw	r3,28(r22)
 40077b8:	003f9b06 	br	4007628 <__ram_exceptions_end+0xfbfe73e0>
 40077bc:	9005883a 	mov	r2,r18
 40077c0:	003fc706 	br	40076e0 <__ram_exceptions_end+0xfbfe7498>
 40077c4:	a80b883a 	mov	r5,r21
 40077c8:	9009883a 	mov	r4,r18
 40077cc:	40070380 	call	4007038 <memmove>
 40077d0:	003fc906 	br	40076f8 <__ram_exceptions_end+0xfbfe74b0>
 40077d4:	a8800217 	ldw	r2,8(r21)
 40077d8:	b0800415 	stw	r2,16(r22)
 40077dc:	a8800317 	ldw	r2,12(r21)
 40077e0:	b0800515 	stw	r2,20(r22)
 40077e4:	31000726 	beq	r6,r4,4007804 <_realloc_r+0x548>
 40077e8:	b0800604 	addi	r2,r22,24
 40077ec:	ad400404 	addi	r21,r21,16
 40077f0:	003fbb06 	br	40076e0 <__ram_exceptions_end+0xfbfe7498>
 40077f4:	a009883a 	mov	r4,r20
 40077f8:	4008c640 	call	4008c64 <__malloc_unlock>
 40077fc:	0005883a 	mov	r2,zero
 4007800:	003f0a06 	br	400742c <__ram_exceptions_end+0xfbfe71e4>
 4007804:	a8c00417 	ldw	r3,16(r21)
 4007808:	ad400604 	addi	r21,r21,24
 400780c:	b0800804 	addi	r2,r22,32
 4007810:	b0c00615 	stw	r3,24(r22)
 4007814:	a8ffff17 	ldw	r3,-4(r21)
 4007818:	b0c00715 	stw	r3,28(r22)
 400781c:	003fb006 	br	40076e0 <__ram_exceptions_end+0xfbfe7498>

04007820 <_sbrk_r>:
 4007820:	defffd04 	addi	sp,sp,-12
 4007824:	dc000015 	stw	r16,0(sp)
 4007828:	04010074 	movhi	r16,1025
 400782c:	dc400115 	stw	r17,4(sp)
 4007830:	843d8404 	addi	r16,r16,-2544
 4007834:	2023883a 	mov	r17,r4
 4007838:	2809883a 	mov	r4,r5
 400783c:	dfc00215 	stw	ra,8(sp)
 4007840:	80000015 	stw	zero,0(r16)
 4007844:	4008e240 	call	4008e24 <sbrk>
 4007848:	00ffffc4 	movi	r3,-1
 400784c:	10c00526 	beq	r2,r3,4007864 <_sbrk_r+0x44>
 4007850:	dfc00217 	ldw	ra,8(sp)
 4007854:	dc400117 	ldw	r17,4(sp)
 4007858:	dc000017 	ldw	r16,0(sp)
 400785c:	dec00304 	addi	sp,sp,12
 4007860:	f800283a 	ret
 4007864:	80c00017 	ldw	r3,0(r16)
 4007868:	183ff926 	beq	r3,zero,4007850 <__ram_exceptions_end+0xfbfe7608>
 400786c:	88c00015 	stw	r3,0(r17)
 4007870:	003ff706 	br	4007850 <__ram_exceptions_end+0xfbfe7608>

04007874 <__sread>:
 4007874:	defffe04 	addi	sp,sp,-8
 4007878:	dc000015 	stw	r16,0(sp)
 400787c:	2821883a 	mov	r16,r5
 4007880:	2940038f 	ldh	r5,14(r5)
 4007884:	dfc00115 	stw	ra,4(sp)
 4007888:	40085b40 	call	40085b4 <_read_r>
 400788c:	10000716 	blt	r2,zero,40078ac <__sread+0x38>
 4007890:	80c01417 	ldw	r3,80(r16)
 4007894:	1887883a 	add	r3,r3,r2
 4007898:	80c01415 	stw	r3,80(r16)
 400789c:	dfc00117 	ldw	ra,4(sp)
 40078a0:	dc000017 	ldw	r16,0(sp)
 40078a4:	dec00204 	addi	sp,sp,8
 40078a8:	f800283a 	ret
 40078ac:	80c0030b 	ldhu	r3,12(r16)
 40078b0:	18fbffcc 	andi	r3,r3,61439
 40078b4:	80c0030d 	sth	r3,12(r16)
 40078b8:	dfc00117 	ldw	ra,4(sp)
 40078bc:	dc000017 	ldw	r16,0(sp)
 40078c0:	dec00204 	addi	sp,sp,8
 40078c4:	f800283a 	ret

040078c8 <__seofread>:
 40078c8:	0005883a 	mov	r2,zero
 40078cc:	f800283a 	ret

040078d0 <__swrite>:
 40078d0:	2880030b 	ldhu	r2,12(r5)
 40078d4:	defffb04 	addi	sp,sp,-20
 40078d8:	dcc00315 	stw	r19,12(sp)
 40078dc:	dc800215 	stw	r18,8(sp)
 40078e0:	dc400115 	stw	r17,4(sp)
 40078e4:	dc000015 	stw	r16,0(sp)
 40078e8:	dfc00415 	stw	ra,16(sp)
 40078ec:	10c0400c 	andi	r3,r2,256
 40078f0:	2821883a 	mov	r16,r5
 40078f4:	2023883a 	mov	r17,r4
 40078f8:	3025883a 	mov	r18,r6
 40078fc:	3827883a 	mov	r19,r7
 4007900:	18000526 	beq	r3,zero,4007918 <__swrite+0x48>
 4007904:	2940038f 	ldh	r5,14(r5)
 4007908:	01c00084 	movi	r7,2
 400790c:	000d883a 	mov	r6,zero
 4007910:	40083980 	call	4008398 <_lseek_r>
 4007914:	8080030b 	ldhu	r2,12(r16)
 4007918:	8140038f 	ldh	r5,14(r16)
 400791c:	10bbffcc 	andi	r2,r2,61439
 4007920:	980f883a 	mov	r7,r19
 4007924:	900d883a 	mov	r6,r18
 4007928:	8809883a 	mov	r4,r17
 400792c:	8080030d 	sth	r2,12(r16)
 4007930:	dfc00417 	ldw	ra,16(sp)
 4007934:	dcc00317 	ldw	r19,12(sp)
 4007938:	dc800217 	ldw	r18,8(sp)
 400793c:	dc400117 	ldw	r17,4(sp)
 4007940:	dc000017 	ldw	r16,0(sp)
 4007944:	dec00504 	addi	sp,sp,20
 4007948:	40079b01 	jmpi	40079b0 <_write_r>

0400794c <__sseek>:
 400794c:	defffe04 	addi	sp,sp,-8
 4007950:	dc000015 	stw	r16,0(sp)
 4007954:	2821883a 	mov	r16,r5
 4007958:	2940038f 	ldh	r5,14(r5)
 400795c:	dfc00115 	stw	ra,4(sp)
 4007960:	40083980 	call	4008398 <_lseek_r>
 4007964:	00ffffc4 	movi	r3,-1
 4007968:	10c00826 	beq	r2,r3,400798c <__sseek+0x40>
 400796c:	80c0030b 	ldhu	r3,12(r16)
 4007970:	80801415 	stw	r2,80(r16)
 4007974:	18c40014 	ori	r3,r3,4096
 4007978:	80c0030d 	sth	r3,12(r16)
 400797c:	dfc00117 	ldw	ra,4(sp)
 4007980:	dc000017 	ldw	r16,0(sp)
 4007984:	dec00204 	addi	sp,sp,8
 4007988:	f800283a 	ret
 400798c:	80c0030b 	ldhu	r3,12(r16)
 4007990:	18fbffcc 	andi	r3,r3,61439
 4007994:	80c0030d 	sth	r3,12(r16)
 4007998:	dfc00117 	ldw	ra,4(sp)
 400799c:	dc000017 	ldw	r16,0(sp)
 40079a0:	dec00204 	addi	sp,sp,8
 40079a4:	f800283a 	ret

040079a8 <__sclose>:
 40079a8:	2940038f 	ldh	r5,14(r5)
 40079ac:	4007b641 	jmpi	4007b64 <_close_r>

040079b0 <_write_r>:
 40079b0:	defffd04 	addi	sp,sp,-12
 40079b4:	2805883a 	mov	r2,r5
 40079b8:	dc000015 	stw	r16,0(sp)
 40079bc:	04010074 	movhi	r16,1025
 40079c0:	dc400115 	stw	r17,4(sp)
 40079c4:	300b883a 	mov	r5,r6
 40079c8:	843d8404 	addi	r16,r16,-2544
 40079cc:	2023883a 	mov	r17,r4
 40079d0:	380d883a 	mov	r6,r7
 40079d4:	1009883a 	mov	r4,r2
 40079d8:	dfc00215 	stw	ra,8(sp)
 40079dc:	80000015 	stw	zero,0(r16)
 40079e0:	4008f400 	call	4008f40 <write>
 40079e4:	00ffffc4 	movi	r3,-1
 40079e8:	10c00526 	beq	r2,r3,4007a00 <_write_r+0x50>
 40079ec:	dfc00217 	ldw	ra,8(sp)
 40079f0:	dc400117 	ldw	r17,4(sp)
 40079f4:	dc000017 	ldw	r16,0(sp)
 40079f8:	dec00304 	addi	sp,sp,12
 40079fc:	f800283a 	ret
 4007a00:	80c00017 	ldw	r3,0(r16)
 4007a04:	183ff926 	beq	r3,zero,40079ec <__ram_exceptions_end+0xfbfe77a4>
 4007a08:	88c00015 	stw	r3,0(r17)
 4007a0c:	003ff706 	br	40079ec <__ram_exceptions_end+0xfbfe77a4>

04007a10 <__swsetup_r>:
 4007a10:	00810074 	movhi	r2,1025
 4007a14:	defffd04 	addi	sp,sp,-12
 4007a18:	10b6c104 	addi	r2,r2,-9468
 4007a1c:	dc400115 	stw	r17,4(sp)
 4007a20:	2023883a 	mov	r17,r4
 4007a24:	11000017 	ldw	r4,0(r2)
 4007a28:	dc000015 	stw	r16,0(sp)
 4007a2c:	dfc00215 	stw	ra,8(sp)
 4007a30:	2821883a 	mov	r16,r5
 4007a34:	20000226 	beq	r4,zero,4007a40 <__swsetup_r+0x30>
 4007a38:	20800e17 	ldw	r2,56(r4)
 4007a3c:	10003126 	beq	r2,zero,4007b04 <__swsetup_r+0xf4>
 4007a40:	8080030b 	ldhu	r2,12(r16)
 4007a44:	10c0020c 	andi	r3,r2,8
 4007a48:	1009883a 	mov	r4,r2
 4007a4c:	18000f26 	beq	r3,zero,4007a8c <__swsetup_r+0x7c>
 4007a50:	80c00417 	ldw	r3,16(r16)
 4007a54:	18001526 	beq	r3,zero,4007aac <__swsetup_r+0x9c>
 4007a58:	1100004c 	andi	r4,r2,1
 4007a5c:	20001c1e 	bne	r4,zero,4007ad0 <__swsetup_r+0xc0>
 4007a60:	1080008c 	andi	r2,r2,2
 4007a64:	1000291e 	bne	r2,zero,4007b0c <__swsetup_r+0xfc>
 4007a68:	80800517 	ldw	r2,20(r16)
 4007a6c:	80800215 	stw	r2,8(r16)
 4007a70:	18001c26 	beq	r3,zero,4007ae4 <__swsetup_r+0xd4>
 4007a74:	0005883a 	mov	r2,zero
 4007a78:	dfc00217 	ldw	ra,8(sp)
 4007a7c:	dc400117 	ldw	r17,4(sp)
 4007a80:	dc000017 	ldw	r16,0(sp)
 4007a84:	dec00304 	addi	sp,sp,12
 4007a88:	f800283a 	ret
 4007a8c:	2080040c 	andi	r2,r4,16
 4007a90:	10002e26 	beq	r2,zero,4007b4c <__swsetup_r+0x13c>
 4007a94:	2080010c 	andi	r2,r4,4
 4007a98:	10001e1e 	bne	r2,zero,4007b14 <__swsetup_r+0x104>
 4007a9c:	80c00417 	ldw	r3,16(r16)
 4007aa0:	20800214 	ori	r2,r4,8
 4007aa4:	8080030d 	sth	r2,12(r16)
 4007aa8:	183feb1e 	bne	r3,zero,4007a58 <__ram_exceptions_end+0xfbfe7810>
 4007aac:	1100a00c 	andi	r4,r2,640
 4007ab0:	01408004 	movi	r5,512
 4007ab4:	217fe826 	beq	r4,r5,4007a58 <__ram_exceptions_end+0xfbfe7810>
 4007ab8:	800b883a 	mov	r5,r16
 4007abc:	8809883a 	mov	r4,r17
 4007ac0:	40083f80 	call	40083f8 <__smakebuf_r>
 4007ac4:	8080030b 	ldhu	r2,12(r16)
 4007ac8:	80c00417 	ldw	r3,16(r16)
 4007acc:	003fe206 	br	4007a58 <__ram_exceptions_end+0xfbfe7810>
 4007ad0:	80800517 	ldw	r2,20(r16)
 4007ad4:	80000215 	stw	zero,8(r16)
 4007ad8:	0085c83a 	sub	r2,zero,r2
 4007adc:	80800615 	stw	r2,24(r16)
 4007ae0:	183fe41e 	bne	r3,zero,4007a74 <__ram_exceptions_end+0xfbfe782c>
 4007ae4:	80c0030b 	ldhu	r3,12(r16)
 4007ae8:	0005883a 	mov	r2,zero
 4007aec:	1900200c 	andi	r4,r3,128
 4007af0:	203fe126 	beq	r4,zero,4007a78 <__ram_exceptions_end+0xfbfe7830>
 4007af4:	18c01014 	ori	r3,r3,64
 4007af8:	80c0030d 	sth	r3,12(r16)
 4007afc:	00bfffc4 	movi	r2,-1
 4007b00:	003fdd06 	br	4007a78 <__ram_exceptions_end+0xfbfe7830>
 4007b04:	4005f6c0 	call	4005f6c <__sinit>
 4007b08:	003fcd06 	br	4007a40 <__ram_exceptions_end+0xfbfe77f8>
 4007b0c:	0005883a 	mov	r2,zero
 4007b10:	003fd606 	br	4007a6c <__ram_exceptions_end+0xfbfe7824>
 4007b14:	81400c17 	ldw	r5,48(r16)
 4007b18:	28000626 	beq	r5,zero,4007b34 <__swsetup_r+0x124>
 4007b1c:	80801004 	addi	r2,r16,64
 4007b20:	28800326 	beq	r5,r2,4007b30 <__swsetup_r+0x120>
 4007b24:	8809883a 	mov	r4,r17
 4007b28:	40080880 	call	4008088 <_free_r>
 4007b2c:	8100030b 	ldhu	r4,12(r16)
 4007b30:	80000c15 	stw	zero,48(r16)
 4007b34:	80c00417 	ldw	r3,16(r16)
 4007b38:	00bff6c4 	movi	r2,-37
 4007b3c:	1108703a 	and	r4,r2,r4
 4007b40:	80000115 	stw	zero,4(r16)
 4007b44:	80c00015 	stw	r3,0(r16)
 4007b48:	003fd506 	br	4007aa0 <__ram_exceptions_end+0xfbfe7858>
 4007b4c:	00800244 	movi	r2,9
 4007b50:	88800015 	stw	r2,0(r17)
 4007b54:	20801014 	ori	r2,r4,64
 4007b58:	8080030d 	sth	r2,12(r16)
 4007b5c:	00bfffc4 	movi	r2,-1
 4007b60:	003fc506 	br	4007a78 <__ram_exceptions_end+0xfbfe7830>

04007b64 <_close_r>:
 4007b64:	defffd04 	addi	sp,sp,-12
 4007b68:	dc000015 	stw	r16,0(sp)
 4007b6c:	04010074 	movhi	r16,1025
 4007b70:	dc400115 	stw	r17,4(sp)
 4007b74:	843d8404 	addi	r16,r16,-2544
 4007b78:	2023883a 	mov	r17,r4
 4007b7c:	2809883a 	mov	r4,r5
 4007b80:	dfc00215 	stw	ra,8(sp)
 4007b84:	80000015 	stw	zero,0(r16)
 4007b88:	40087000 	call	4008700 <close>
 4007b8c:	00ffffc4 	movi	r3,-1
 4007b90:	10c00526 	beq	r2,r3,4007ba8 <_close_r+0x44>
 4007b94:	dfc00217 	ldw	ra,8(sp)
 4007b98:	dc400117 	ldw	r17,4(sp)
 4007b9c:	dc000017 	ldw	r16,0(sp)
 4007ba0:	dec00304 	addi	sp,sp,12
 4007ba4:	f800283a 	ret
 4007ba8:	80c00017 	ldw	r3,0(r16)
 4007bac:	183ff926 	beq	r3,zero,4007b94 <__ram_exceptions_end+0xfbfe794c>
 4007bb0:	88c00015 	stw	r3,0(r17)
 4007bb4:	003ff706 	br	4007b94 <__ram_exceptions_end+0xfbfe794c>

04007bb8 <_fclose_r>:
 4007bb8:	28003926 	beq	r5,zero,4007ca0 <_fclose_r+0xe8>
 4007bbc:	defffc04 	addi	sp,sp,-16
 4007bc0:	dc400115 	stw	r17,4(sp)
 4007bc4:	dc000015 	stw	r16,0(sp)
 4007bc8:	dfc00315 	stw	ra,12(sp)
 4007bcc:	dc800215 	stw	r18,8(sp)
 4007bd0:	2023883a 	mov	r17,r4
 4007bd4:	2821883a 	mov	r16,r5
 4007bd8:	20000226 	beq	r4,zero,4007be4 <_fclose_r+0x2c>
 4007bdc:	20800e17 	ldw	r2,56(r4)
 4007be0:	10002726 	beq	r2,zero,4007c80 <_fclose_r+0xc8>
 4007be4:	8080030f 	ldh	r2,12(r16)
 4007be8:	1000071e 	bne	r2,zero,4007c08 <_fclose_r+0x50>
 4007bec:	0005883a 	mov	r2,zero
 4007bf0:	dfc00317 	ldw	ra,12(sp)
 4007bf4:	dc800217 	ldw	r18,8(sp)
 4007bf8:	dc400117 	ldw	r17,4(sp)
 4007bfc:	dc000017 	ldw	r16,0(sp)
 4007c00:	dec00404 	addi	sp,sp,16
 4007c04:	f800283a 	ret
 4007c08:	800b883a 	mov	r5,r16
 4007c0c:	8809883a 	mov	r4,r17
 4007c10:	4007cbc0 	call	4007cbc <__sflush_r>
 4007c14:	1025883a 	mov	r18,r2
 4007c18:	80800b17 	ldw	r2,44(r16)
 4007c1c:	10000426 	beq	r2,zero,4007c30 <_fclose_r+0x78>
 4007c20:	81400717 	ldw	r5,28(r16)
 4007c24:	8809883a 	mov	r4,r17
 4007c28:	103ee83a 	callr	r2
 4007c2c:	10001616 	blt	r2,zero,4007c88 <_fclose_r+0xd0>
 4007c30:	8080030b 	ldhu	r2,12(r16)
 4007c34:	1080200c 	andi	r2,r2,128
 4007c38:	1000151e 	bne	r2,zero,4007c90 <_fclose_r+0xd8>
 4007c3c:	81400c17 	ldw	r5,48(r16)
 4007c40:	28000526 	beq	r5,zero,4007c58 <_fclose_r+0xa0>
 4007c44:	80801004 	addi	r2,r16,64
 4007c48:	28800226 	beq	r5,r2,4007c54 <_fclose_r+0x9c>
 4007c4c:	8809883a 	mov	r4,r17
 4007c50:	40080880 	call	4008088 <_free_r>
 4007c54:	80000c15 	stw	zero,48(r16)
 4007c58:	81401117 	ldw	r5,68(r16)
 4007c5c:	28000326 	beq	r5,zero,4007c6c <_fclose_r+0xb4>
 4007c60:	8809883a 	mov	r4,r17
 4007c64:	40080880 	call	4008088 <_free_r>
 4007c68:	80001115 	stw	zero,68(r16)
 4007c6c:	4005f7c0 	call	4005f7c <__sfp_lock_acquire>
 4007c70:	8000030d 	sth	zero,12(r16)
 4007c74:	4005f800 	call	4005f80 <__sfp_lock_release>
 4007c78:	9005883a 	mov	r2,r18
 4007c7c:	003fdc06 	br	4007bf0 <__ram_exceptions_end+0xfbfe79a8>
 4007c80:	4005f6c0 	call	4005f6c <__sinit>
 4007c84:	003fd706 	br	4007be4 <__ram_exceptions_end+0xfbfe799c>
 4007c88:	04bfffc4 	movi	r18,-1
 4007c8c:	003fe806 	br	4007c30 <__ram_exceptions_end+0xfbfe79e8>
 4007c90:	81400417 	ldw	r5,16(r16)
 4007c94:	8809883a 	mov	r4,r17
 4007c98:	40080880 	call	4008088 <_free_r>
 4007c9c:	003fe706 	br	4007c3c <__ram_exceptions_end+0xfbfe79f4>
 4007ca0:	0005883a 	mov	r2,zero
 4007ca4:	f800283a 	ret

04007ca8 <fclose>:
 4007ca8:	00810074 	movhi	r2,1025
 4007cac:	10b6c104 	addi	r2,r2,-9468
 4007cb0:	200b883a 	mov	r5,r4
 4007cb4:	11000017 	ldw	r4,0(r2)
 4007cb8:	4007bb81 	jmpi	4007bb8 <_fclose_r>

04007cbc <__sflush_r>:
 4007cbc:	2880030b 	ldhu	r2,12(r5)
 4007cc0:	defffb04 	addi	sp,sp,-20
 4007cc4:	dcc00315 	stw	r19,12(sp)
 4007cc8:	dc400115 	stw	r17,4(sp)
 4007ccc:	dfc00415 	stw	ra,16(sp)
 4007cd0:	dc800215 	stw	r18,8(sp)
 4007cd4:	dc000015 	stw	r16,0(sp)
 4007cd8:	10c0020c 	andi	r3,r2,8
 4007cdc:	2823883a 	mov	r17,r5
 4007ce0:	2027883a 	mov	r19,r4
 4007ce4:	1800311e 	bne	r3,zero,4007dac <__sflush_r+0xf0>
 4007ce8:	28c00117 	ldw	r3,4(r5)
 4007cec:	10820014 	ori	r2,r2,2048
 4007cf0:	2880030d 	sth	r2,12(r5)
 4007cf4:	00c04b0e 	bge	zero,r3,4007e24 <__sflush_r+0x168>
 4007cf8:	8a000a17 	ldw	r8,40(r17)
 4007cfc:	40002326 	beq	r8,zero,4007d8c <__sflush_r+0xd0>
 4007d00:	9c000017 	ldw	r16,0(r19)
 4007d04:	10c4000c 	andi	r3,r2,4096
 4007d08:	98000015 	stw	zero,0(r19)
 4007d0c:	18004826 	beq	r3,zero,4007e30 <__sflush_r+0x174>
 4007d10:	89801417 	ldw	r6,80(r17)
 4007d14:	10c0010c 	andi	r3,r2,4
 4007d18:	18000626 	beq	r3,zero,4007d34 <__sflush_r+0x78>
 4007d1c:	88c00117 	ldw	r3,4(r17)
 4007d20:	88800c17 	ldw	r2,48(r17)
 4007d24:	30cdc83a 	sub	r6,r6,r3
 4007d28:	10000226 	beq	r2,zero,4007d34 <__sflush_r+0x78>
 4007d2c:	88800f17 	ldw	r2,60(r17)
 4007d30:	308dc83a 	sub	r6,r6,r2
 4007d34:	89400717 	ldw	r5,28(r17)
 4007d38:	000f883a 	mov	r7,zero
 4007d3c:	9809883a 	mov	r4,r19
 4007d40:	403ee83a 	callr	r8
 4007d44:	00ffffc4 	movi	r3,-1
 4007d48:	10c04426 	beq	r2,r3,4007e5c <__sflush_r+0x1a0>
 4007d4c:	88c0030b 	ldhu	r3,12(r17)
 4007d50:	89000417 	ldw	r4,16(r17)
 4007d54:	88000115 	stw	zero,4(r17)
 4007d58:	197dffcc 	andi	r5,r3,63487
 4007d5c:	8940030d 	sth	r5,12(r17)
 4007d60:	89000015 	stw	r4,0(r17)
 4007d64:	18c4000c 	andi	r3,r3,4096
 4007d68:	18002c1e 	bne	r3,zero,4007e1c <__sflush_r+0x160>
 4007d6c:	89400c17 	ldw	r5,48(r17)
 4007d70:	9c000015 	stw	r16,0(r19)
 4007d74:	28000526 	beq	r5,zero,4007d8c <__sflush_r+0xd0>
 4007d78:	88801004 	addi	r2,r17,64
 4007d7c:	28800226 	beq	r5,r2,4007d88 <__sflush_r+0xcc>
 4007d80:	9809883a 	mov	r4,r19
 4007d84:	40080880 	call	4008088 <_free_r>
 4007d88:	88000c15 	stw	zero,48(r17)
 4007d8c:	0005883a 	mov	r2,zero
 4007d90:	dfc00417 	ldw	ra,16(sp)
 4007d94:	dcc00317 	ldw	r19,12(sp)
 4007d98:	dc800217 	ldw	r18,8(sp)
 4007d9c:	dc400117 	ldw	r17,4(sp)
 4007da0:	dc000017 	ldw	r16,0(sp)
 4007da4:	dec00504 	addi	sp,sp,20
 4007da8:	f800283a 	ret
 4007dac:	2c800417 	ldw	r18,16(r5)
 4007db0:	903ff626 	beq	r18,zero,4007d8c <__ram_exceptions_end+0xfbfe7b44>
 4007db4:	2c000017 	ldw	r16,0(r5)
 4007db8:	108000cc 	andi	r2,r2,3
 4007dbc:	2c800015 	stw	r18,0(r5)
 4007dc0:	84a1c83a 	sub	r16,r16,r18
 4007dc4:	1000131e 	bne	r2,zero,4007e14 <__sflush_r+0x158>
 4007dc8:	28800517 	ldw	r2,20(r5)
 4007dcc:	88800215 	stw	r2,8(r17)
 4007dd0:	04000316 	blt	zero,r16,4007de0 <__sflush_r+0x124>
 4007dd4:	003fed06 	br	4007d8c <__ram_exceptions_end+0xfbfe7b44>
 4007dd8:	90a5883a 	add	r18,r18,r2
 4007ddc:	043feb0e 	bge	zero,r16,4007d8c <__ram_exceptions_end+0xfbfe7b44>
 4007de0:	88800917 	ldw	r2,36(r17)
 4007de4:	89400717 	ldw	r5,28(r17)
 4007de8:	800f883a 	mov	r7,r16
 4007dec:	900d883a 	mov	r6,r18
 4007df0:	9809883a 	mov	r4,r19
 4007df4:	103ee83a 	callr	r2
 4007df8:	80a1c83a 	sub	r16,r16,r2
 4007dfc:	00bff616 	blt	zero,r2,4007dd8 <__ram_exceptions_end+0xfbfe7b90>
 4007e00:	88c0030b 	ldhu	r3,12(r17)
 4007e04:	00bfffc4 	movi	r2,-1
 4007e08:	18c01014 	ori	r3,r3,64
 4007e0c:	88c0030d 	sth	r3,12(r17)
 4007e10:	003fdf06 	br	4007d90 <__ram_exceptions_end+0xfbfe7b48>
 4007e14:	0005883a 	mov	r2,zero
 4007e18:	003fec06 	br	4007dcc <__ram_exceptions_end+0xfbfe7b84>
 4007e1c:	88801415 	stw	r2,80(r17)
 4007e20:	003fd206 	br	4007d6c <__ram_exceptions_end+0xfbfe7b24>
 4007e24:	28c00f17 	ldw	r3,60(r5)
 4007e28:	00ffb316 	blt	zero,r3,4007cf8 <__ram_exceptions_end+0xfbfe7ab0>
 4007e2c:	003fd706 	br	4007d8c <__ram_exceptions_end+0xfbfe7b44>
 4007e30:	89400717 	ldw	r5,28(r17)
 4007e34:	000d883a 	mov	r6,zero
 4007e38:	01c00044 	movi	r7,1
 4007e3c:	9809883a 	mov	r4,r19
 4007e40:	403ee83a 	callr	r8
 4007e44:	100d883a 	mov	r6,r2
 4007e48:	00bfffc4 	movi	r2,-1
 4007e4c:	30801426 	beq	r6,r2,4007ea0 <__sflush_r+0x1e4>
 4007e50:	8880030b 	ldhu	r2,12(r17)
 4007e54:	8a000a17 	ldw	r8,40(r17)
 4007e58:	003fae06 	br	4007d14 <__ram_exceptions_end+0xfbfe7acc>
 4007e5c:	98c00017 	ldw	r3,0(r19)
 4007e60:	183fba26 	beq	r3,zero,4007d4c <__ram_exceptions_end+0xfbfe7b04>
 4007e64:	01000744 	movi	r4,29
 4007e68:	19000626 	beq	r3,r4,4007e84 <__sflush_r+0x1c8>
 4007e6c:	01000584 	movi	r4,22
 4007e70:	19000426 	beq	r3,r4,4007e84 <__sflush_r+0x1c8>
 4007e74:	88c0030b 	ldhu	r3,12(r17)
 4007e78:	18c01014 	ori	r3,r3,64
 4007e7c:	88c0030d 	sth	r3,12(r17)
 4007e80:	003fc306 	br	4007d90 <__ram_exceptions_end+0xfbfe7b48>
 4007e84:	8880030b 	ldhu	r2,12(r17)
 4007e88:	88c00417 	ldw	r3,16(r17)
 4007e8c:	88000115 	stw	zero,4(r17)
 4007e90:	10bdffcc 	andi	r2,r2,63487
 4007e94:	8880030d 	sth	r2,12(r17)
 4007e98:	88c00015 	stw	r3,0(r17)
 4007e9c:	003fb306 	br	4007d6c <__ram_exceptions_end+0xfbfe7b24>
 4007ea0:	98800017 	ldw	r2,0(r19)
 4007ea4:	103fea26 	beq	r2,zero,4007e50 <__ram_exceptions_end+0xfbfe7c08>
 4007ea8:	00c00744 	movi	r3,29
 4007eac:	10c00226 	beq	r2,r3,4007eb8 <__sflush_r+0x1fc>
 4007eb0:	00c00584 	movi	r3,22
 4007eb4:	10c0031e 	bne	r2,r3,4007ec4 <__sflush_r+0x208>
 4007eb8:	9c000015 	stw	r16,0(r19)
 4007ebc:	0005883a 	mov	r2,zero
 4007ec0:	003fb306 	br	4007d90 <__ram_exceptions_end+0xfbfe7b48>
 4007ec4:	88c0030b 	ldhu	r3,12(r17)
 4007ec8:	3005883a 	mov	r2,r6
 4007ecc:	18c01014 	ori	r3,r3,64
 4007ed0:	88c0030d 	sth	r3,12(r17)
 4007ed4:	003fae06 	br	4007d90 <__ram_exceptions_end+0xfbfe7b48>

04007ed8 <_fflush_r>:
 4007ed8:	defffd04 	addi	sp,sp,-12
 4007edc:	dc000115 	stw	r16,4(sp)
 4007ee0:	dfc00215 	stw	ra,8(sp)
 4007ee4:	2021883a 	mov	r16,r4
 4007ee8:	20000226 	beq	r4,zero,4007ef4 <_fflush_r+0x1c>
 4007eec:	20800e17 	ldw	r2,56(r4)
 4007ef0:	10000c26 	beq	r2,zero,4007f24 <_fflush_r+0x4c>
 4007ef4:	2880030f 	ldh	r2,12(r5)
 4007ef8:	1000051e 	bne	r2,zero,4007f10 <_fflush_r+0x38>
 4007efc:	0005883a 	mov	r2,zero
 4007f00:	dfc00217 	ldw	ra,8(sp)
 4007f04:	dc000117 	ldw	r16,4(sp)
 4007f08:	dec00304 	addi	sp,sp,12
 4007f0c:	f800283a 	ret
 4007f10:	8009883a 	mov	r4,r16
 4007f14:	dfc00217 	ldw	ra,8(sp)
 4007f18:	dc000117 	ldw	r16,4(sp)
 4007f1c:	dec00304 	addi	sp,sp,12
 4007f20:	4007cbc1 	jmpi	4007cbc <__sflush_r>
 4007f24:	d9400015 	stw	r5,0(sp)
 4007f28:	4005f6c0 	call	4005f6c <__sinit>
 4007f2c:	d9400017 	ldw	r5,0(sp)
 4007f30:	003ff006 	br	4007ef4 <__ram_exceptions_end+0xfbfe7cac>

04007f34 <fflush>:
 4007f34:	20000526 	beq	r4,zero,4007f4c <fflush+0x18>
 4007f38:	00810074 	movhi	r2,1025
 4007f3c:	10b6c104 	addi	r2,r2,-9468
 4007f40:	200b883a 	mov	r5,r4
 4007f44:	11000017 	ldw	r4,0(r2)
 4007f48:	4007ed81 	jmpi	4007ed8 <_fflush_r>
 4007f4c:	00810074 	movhi	r2,1025
 4007f50:	10b6c004 	addi	r2,r2,-9472
 4007f54:	11000017 	ldw	r4,0(r2)
 4007f58:	01410034 	movhi	r5,1024
 4007f5c:	295fb604 	addi	r5,r5,32472
 4007f60:	400653c1 	jmpi	400653c <_fwalk_reent>

04007f64 <_malloc_trim_r>:
 4007f64:	defffb04 	addi	sp,sp,-20
 4007f68:	dcc00315 	stw	r19,12(sp)
 4007f6c:	04c10074 	movhi	r19,1025
 4007f70:	dc800215 	stw	r18,8(sp)
 4007f74:	dc400115 	stw	r17,4(sp)
 4007f78:	dc000015 	stw	r16,0(sp)
 4007f7c:	dfc00415 	stw	ra,16(sp)
 4007f80:	2821883a 	mov	r16,r5
 4007f84:	9cf12404 	addi	r19,r19,-15216
 4007f88:	2025883a 	mov	r18,r4
 4007f8c:	4008c400 	call	4008c40 <__malloc_lock>
 4007f90:	98800217 	ldw	r2,8(r19)
 4007f94:	14400117 	ldw	r17,4(r2)
 4007f98:	00bfff04 	movi	r2,-4
 4007f9c:	88a2703a 	and	r17,r17,r2
 4007fa0:	8c21c83a 	sub	r16,r17,r16
 4007fa4:	8403fbc4 	addi	r16,r16,4079
 4007fa8:	8020d33a 	srli	r16,r16,12
 4007fac:	0083ffc4 	movi	r2,4095
 4007fb0:	843fffc4 	addi	r16,r16,-1
 4007fb4:	8020933a 	slli	r16,r16,12
 4007fb8:	1400060e 	bge	r2,r16,4007fd4 <_malloc_trim_r+0x70>
 4007fbc:	000b883a 	mov	r5,zero
 4007fc0:	9009883a 	mov	r4,r18
 4007fc4:	40078200 	call	4007820 <_sbrk_r>
 4007fc8:	98c00217 	ldw	r3,8(r19)
 4007fcc:	1c47883a 	add	r3,r3,r17
 4007fd0:	10c00a26 	beq	r2,r3,4007ffc <_malloc_trim_r+0x98>
 4007fd4:	9009883a 	mov	r4,r18
 4007fd8:	4008c640 	call	4008c64 <__malloc_unlock>
 4007fdc:	0005883a 	mov	r2,zero
 4007fe0:	dfc00417 	ldw	ra,16(sp)
 4007fe4:	dcc00317 	ldw	r19,12(sp)
 4007fe8:	dc800217 	ldw	r18,8(sp)
 4007fec:	dc400117 	ldw	r17,4(sp)
 4007ff0:	dc000017 	ldw	r16,0(sp)
 4007ff4:	dec00504 	addi	sp,sp,20
 4007ff8:	f800283a 	ret
 4007ffc:	040bc83a 	sub	r5,zero,r16
 4008000:	9009883a 	mov	r4,r18
 4008004:	40078200 	call	4007820 <_sbrk_r>
 4008008:	00ffffc4 	movi	r3,-1
 400800c:	10c00d26 	beq	r2,r3,4008044 <_malloc_trim_r+0xe0>
 4008010:	00c10074 	movhi	r3,1025
 4008014:	18fd8c04 	addi	r3,r3,-2512
 4008018:	18800017 	ldw	r2,0(r3)
 400801c:	99000217 	ldw	r4,8(r19)
 4008020:	8c23c83a 	sub	r17,r17,r16
 4008024:	8c400054 	ori	r17,r17,1
 4008028:	1421c83a 	sub	r16,r2,r16
 400802c:	24400115 	stw	r17,4(r4)
 4008030:	9009883a 	mov	r4,r18
 4008034:	1c000015 	stw	r16,0(r3)
 4008038:	4008c640 	call	4008c64 <__malloc_unlock>
 400803c:	00800044 	movi	r2,1
 4008040:	003fe706 	br	4007fe0 <__ram_exceptions_end+0xfbfe7d98>
 4008044:	000b883a 	mov	r5,zero
 4008048:	9009883a 	mov	r4,r18
 400804c:	40078200 	call	4007820 <_sbrk_r>
 4008050:	99000217 	ldw	r4,8(r19)
 4008054:	014003c4 	movi	r5,15
 4008058:	1107c83a 	sub	r3,r2,r4
 400805c:	28ffdd0e 	bge	r5,r3,4007fd4 <__ram_exceptions_end+0xfbfe7d8c>
 4008060:	01410074 	movhi	r5,1025
 4008064:	2976c204 	addi	r5,r5,-9464
 4008068:	29400017 	ldw	r5,0(r5)
 400806c:	18c00054 	ori	r3,r3,1
 4008070:	20c00115 	stw	r3,4(r4)
 4008074:	00c10074 	movhi	r3,1025
 4008078:	1145c83a 	sub	r2,r2,r5
 400807c:	18fd8c04 	addi	r3,r3,-2512
 4008080:	18800015 	stw	r2,0(r3)
 4008084:	003fd306 	br	4007fd4 <__ram_exceptions_end+0xfbfe7d8c>

04008088 <_free_r>:
 4008088:	28004126 	beq	r5,zero,4008190 <_free_r+0x108>
 400808c:	defffd04 	addi	sp,sp,-12
 4008090:	dc400115 	stw	r17,4(sp)
 4008094:	dc000015 	stw	r16,0(sp)
 4008098:	2023883a 	mov	r17,r4
 400809c:	2821883a 	mov	r16,r5
 40080a0:	dfc00215 	stw	ra,8(sp)
 40080a4:	4008c400 	call	4008c40 <__malloc_lock>
 40080a8:	81ffff17 	ldw	r7,-4(r16)
 40080ac:	00bfff84 	movi	r2,-2
 40080b0:	01010074 	movhi	r4,1025
 40080b4:	81bffe04 	addi	r6,r16,-8
 40080b8:	3884703a 	and	r2,r7,r2
 40080bc:	21312404 	addi	r4,r4,-15216
 40080c0:	308b883a 	add	r5,r6,r2
 40080c4:	2a400117 	ldw	r9,4(r5)
 40080c8:	22000217 	ldw	r8,8(r4)
 40080cc:	00ffff04 	movi	r3,-4
 40080d0:	48c6703a 	and	r3,r9,r3
 40080d4:	2a005726 	beq	r5,r8,4008234 <_free_r+0x1ac>
 40080d8:	28c00115 	stw	r3,4(r5)
 40080dc:	39c0004c 	andi	r7,r7,1
 40080e0:	3800091e 	bne	r7,zero,4008108 <_free_r+0x80>
 40080e4:	823ffe17 	ldw	r8,-8(r16)
 40080e8:	22400204 	addi	r9,r4,8
 40080ec:	320dc83a 	sub	r6,r6,r8
 40080f0:	31c00217 	ldw	r7,8(r6)
 40080f4:	1205883a 	add	r2,r2,r8
 40080f8:	3a406526 	beq	r7,r9,4008290 <_free_r+0x208>
 40080fc:	32000317 	ldw	r8,12(r6)
 4008100:	3a000315 	stw	r8,12(r7)
 4008104:	41c00215 	stw	r7,8(r8)
 4008108:	28cf883a 	add	r7,r5,r3
 400810c:	39c00117 	ldw	r7,4(r7)
 4008110:	39c0004c 	andi	r7,r7,1
 4008114:	38003a26 	beq	r7,zero,4008200 <_free_r+0x178>
 4008118:	10c00054 	ori	r3,r2,1
 400811c:	30c00115 	stw	r3,4(r6)
 4008120:	3087883a 	add	r3,r6,r2
 4008124:	18800015 	stw	r2,0(r3)
 4008128:	00c07fc4 	movi	r3,511
 400812c:	18801936 	bltu	r3,r2,4008194 <_free_r+0x10c>
 4008130:	1004d0fa 	srli	r2,r2,3
 4008134:	01c00044 	movi	r7,1
 4008138:	21400117 	ldw	r5,4(r4)
 400813c:	10c00044 	addi	r3,r2,1
 4008140:	18c7883a 	add	r3,r3,r3
 4008144:	1005d0ba 	srai	r2,r2,2
 4008148:	18c7883a 	add	r3,r3,r3
 400814c:	18c7883a 	add	r3,r3,r3
 4008150:	1907883a 	add	r3,r3,r4
 4008154:	3884983a 	sll	r2,r7,r2
 4008158:	19c00017 	ldw	r7,0(r3)
 400815c:	1a3ffe04 	addi	r8,r3,-8
 4008160:	1144b03a 	or	r2,r2,r5
 4008164:	32000315 	stw	r8,12(r6)
 4008168:	31c00215 	stw	r7,8(r6)
 400816c:	20800115 	stw	r2,4(r4)
 4008170:	19800015 	stw	r6,0(r3)
 4008174:	39800315 	stw	r6,12(r7)
 4008178:	8809883a 	mov	r4,r17
 400817c:	dfc00217 	ldw	ra,8(sp)
 4008180:	dc400117 	ldw	r17,4(sp)
 4008184:	dc000017 	ldw	r16,0(sp)
 4008188:	dec00304 	addi	sp,sp,12
 400818c:	4008c641 	jmpi	4008c64 <__malloc_unlock>
 4008190:	f800283a 	ret
 4008194:	100ad27a 	srli	r5,r2,9
 4008198:	00c00104 	movi	r3,4
 400819c:	19404a36 	bltu	r3,r5,40082c8 <_free_r+0x240>
 40081a0:	100ad1ba 	srli	r5,r2,6
 40081a4:	28c00e44 	addi	r3,r5,57
 40081a8:	18c7883a 	add	r3,r3,r3
 40081ac:	29400e04 	addi	r5,r5,56
 40081b0:	18c7883a 	add	r3,r3,r3
 40081b4:	18c7883a 	add	r3,r3,r3
 40081b8:	1909883a 	add	r4,r3,r4
 40081bc:	20c00017 	ldw	r3,0(r4)
 40081c0:	01c10074 	movhi	r7,1025
 40081c4:	213ffe04 	addi	r4,r4,-8
 40081c8:	39f12404 	addi	r7,r7,-15216
 40081cc:	20c04426 	beq	r4,r3,40082e0 <_free_r+0x258>
 40081d0:	01ffff04 	movi	r7,-4
 40081d4:	19400117 	ldw	r5,4(r3)
 40081d8:	29ca703a 	and	r5,r5,r7
 40081dc:	1140022e 	bgeu	r2,r5,40081e8 <_free_r+0x160>
 40081e0:	18c00217 	ldw	r3,8(r3)
 40081e4:	20fffb1e 	bne	r4,r3,40081d4 <__ram_exceptions_end+0xfbfe7f8c>
 40081e8:	19000317 	ldw	r4,12(r3)
 40081ec:	31000315 	stw	r4,12(r6)
 40081f0:	30c00215 	stw	r3,8(r6)
 40081f4:	21800215 	stw	r6,8(r4)
 40081f8:	19800315 	stw	r6,12(r3)
 40081fc:	003fde06 	br	4008178 <__ram_exceptions_end+0xfbfe7f30>
 4008200:	29c00217 	ldw	r7,8(r5)
 4008204:	10c5883a 	add	r2,r2,r3
 4008208:	00c10074 	movhi	r3,1025
 400820c:	18f12604 	addi	r3,r3,-15208
 4008210:	38c03b26 	beq	r7,r3,4008300 <_free_r+0x278>
 4008214:	2a000317 	ldw	r8,12(r5)
 4008218:	11400054 	ori	r5,r2,1
 400821c:	3087883a 	add	r3,r6,r2
 4008220:	3a000315 	stw	r8,12(r7)
 4008224:	41c00215 	stw	r7,8(r8)
 4008228:	31400115 	stw	r5,4(r6)
 400822c:	18800015 	stw	r2,0(r3)
 4008230:	003fbd06 	br	4008128 <__ram_exceptions_end+0xfbfe7ee0>
 4008234:	39c0004c 	andi	r7,r7,1
 4008238:	10c5883a 	add	r2,r2,r3
 400823c:	3800071e 	bne	r7,zero,400825c <_free_r+0x1d4>
 4008240:	81fffe17 	ldw	r7,-8(r16)
 4008244:	31cdc83a 	sub	r6,r6,r7
 4008248:	30c00317 	ldw	r3,12(r6)
 400824c:	31400217 	ldw	r5,8(r6)
 4008250:	11c5883a 	add	r2,r2,r7
 4008254:	28c00315 	stw	r3,12(r5)
 4008258:	19400215 	stw	r5,8(r3)
 400825c:	10c00054 	ori	r3,r2,1
 4008260:	30c00115 	stw	r3,4(r6)
 4008264:	00c10074 	movhi	r3,1025
 4008268:	18f6c304 	addi	r3,r3,-9460
 400826c:	18c00017 	ldw	r3,0(r3)
 4008270:	21800215 	stw	r6,8(r4)
 4008274:	10ffc036 	bltu	r2,r3,4008178 <__ram_exceptions_end+0xfbfe7f30>
 4008278:	00810074 	movhi	r2,1025
 400827c:	10bd8304 	addi	r2,r2,-2548
 4008280:	11400017 	ldw	r5,0(r2)
 4008284:	8809883a 	mov	r4,r17
 4008288:	4007f640 	call	4007f64 <_malloc_trim_r>
 400828c:	003fba06 	br	4008178 <__ram_exceptions_end+0xfbfe7f30>
 4008290:	28c9883a 	add	r4,r5,r3
 4008294:	21000117 	ldw	r4,4(r4)
 4008298:	2100004c 	andi	r4,r4,1
 400829c:	2000391e 	bne	r4,zero,4008384 <_free_r+0x2fc>
 40082a0:	29c00217 	ldw	r7,8(r5)
 40082a4:	29000317 	ldw	r4,12(r5)
 40082a8:	1885883a 	add	r2,r3,r2
 40082ac:	10c00054 	ori	r3,r2,1
 40082b0:	39000315 	stw	r4,12(r7)
 40082b4:	21c00215 	stw	r7,8(r4)
 40082b8:	30c00115 	stw	r3,4(r6)
 40082bc:	308d883a 	add	r6,r6,r2
 40082c0:	30800015 	stw	r2,0(r6)
 40082c4:	003fac06 	br	4008178 <__ram_exceptions_end+0xfbfe7f30>
 40082c8:	00c00504 	movi	r3,20
 40082cc:	19401536 	bltu	r3,r5,4008324 <_free_r+0x29c>
 40082d0:	28c01704 	addi	r3,r5,92
 40082d4:	18c7883a 	add	r3,r3,r3
 40082d8:	294016c4 	addi	r5,r5,91
 40082dc:	003fb406 	br	40081b0 <__ram_exceptions_end+0xfbfe7f68>
 40082e0:	280bd0ba 	srai	r5,r5,2
 40082e4:	00c00044 	movi	r3,1
 40082e8:	38800117 	ldw	r2,4(r7)
 40082ec:	194a983a 	sll	r5,r3,r5
 40082f0:	2007883a 	mov	r3,r4
 40082f4:	2884b03a 	or	r2,r5,r2
 40082f8:	38800115 	stw	r2,4(r7)
 40082fc:	003fbb06 	br	40081ec <__ram_exceptions_end+0xfbfe7fa4>
 4008300:	21800515 	stw	r6,20(r4)
 4008304:	21800415 	stw	r6,16(r4)
 4008308:	10c00054 	ori	r3,r2,1
 400830c:	31c00315 	stw	r7,12(r6)
 4008310:	31c00215 	stw	r7,8(r6)
 4008314:	30c00115 	stw	r3,4(r6)
 4008318:	308d883a 	add	r6,r6,r2
 400831c:	30800015 	stw	r2,0(r6)
 4008320:	003f9506 	br	4008178 <__ram_exceptions_end+0xfbfe7f30>
 4008324:	00c01504 	movi	r3,84
 4008328:	19400536 	bltu	r3,r5,4008340 <_free_r+0x2b8>
 400832c:	100ad33a 	srli	r5,r2,12
 4008330:	28c01bc4 	addi	r3,r5,111
 4008334:	18c7883a 	add	r3,r3,r3
 4008338:	29401b84 	addi	r5,r5,110
 400833c:	003f9c06 	br	40081b0 <__ram_exceptions_end+0xfbfe7f68>
 4008340:	00c05504 	movi	r3,340
 4008344:	19400536 	bltu	r3,r5,400835c <_free_r+0x2d4>
 4008348:	100ad3fa 	srli	r5,r2,15
 400834c:	28c01e04 	addi	r3,r5,120
 4008350:	18c7883a 	add	r3,r3,r3
 4008354:	29401dc4 	addi	r5,r5,119
 4008358:	003f9506 	br	40081b0 <__ram_exceptions_end+0xfbfe7f68>
 400835c:	00c15504 	movi	r3,1364
 4008360:	19400536 	bltu	r3,r5,4008378 <_free_r+0x2f0>
 4008364:	100ad4ba 	srli	r5,r2,18
 4008368:	28c01f44 	addi	r3,r5,125
 400836c:	18c7883a 	add	r3,r3,r3
 4008370:	29401f04 	addi	r5,r5,124
 4008374:	003f8e06 	br	40081b0 <__ram_exceptions_end+0xfbfe7f68>
 4008378:	00c03f84 	movi	r3,254
 400837c:	01401f84 	movi	r5,126
 4008380:	003f8b06 	br	40081b0 <__ram_exceptions_end+0xfbfe7f68>
 4008384:	10c00054 	ori	r3,r2,1
 4008388:	30c00115 	stw	r3,4(r6)
 400838c:	308d883a 	add	r6,r6,r2
 4008390:	30800015 	stw	r2,0(r6)
 4008394:	003f7806 	br	4008178 <__ram_exceptions_end+0xfbfe7f30>

04008398 <_lseek_r>:
 4008398:	defffd04 	addi	sp,sp,-12
 400839c:	2805883a 	mov	r2,r5
 40083a0:	dc000015 	stw	r16,0(sp)
 40083a4:	04010074 	movhi	r16,1025
 40083a8:	dc400115 	stw	r17,4(sp)
 40083ac:	300b883a 	mov	r5,r6
 40083b0:	843d8404 	addi	r16,r16,-2544
 40083b4:	2023883a 	mov	r17,r4
 40083b8:	380d883a 	mov	r6,r7
 40083bc:	1009883a 	mov	r4,r2
 40083c0:	dfc00215 	stw	ra,8(sp)
 40083c4:	80000015 	stw	zero,0(r16)
 40083c8:	4008af00 	call	4008af0 <lseek>
 40083cc:	00ffffc4 	movi	r3,-1
 40083d0:	10c00526 	beq	r2,r3,40083e8 <_lseek_r+0x50>
 40083d4:	dfc00217 	ldw	ra,8(sp)
 40083d8:	dc400117 	ldw	r17,4(sp)
 40083dc:	dc000017 	ldw	r16,0(sp)
 40083e0:	dec00304 	addi	sp,sp,12
 40083e4:	f800283a 	ret
 40083e8:	80c00017 	ldw	r3,0(r16)
 40083ec:	183ff926 	beq	r3,zero,40083d4 <__ram_exceptions_end+0xfbfe818c>
 40083f0:	88c00015 	stw	r3,0(r17)
 40083f4:	003ff706 	br	40083d4 <__ram_exceptions_end+0xfbfe818c>

040083f8 <__smakebuf_r>:
 40083f8:	2880030b 	ldhu	r2,12(r5)
 40083fc:	10c0008c 	andi	r3,r2,2
 4008400:	1800411e 	bne	r3,zero,4008508 <__smakebuf_r+0x110>
 4008404:	deffec04 	addi	sp,sp,-80
 4008408:	dc000f15 	stw	r16,60(sp)
 400840c:	2821883a 	mov	r16,r5
 4008410:	2940038f 	ldh	r5,14(r5)
 4008414:	dc401015 	stw	r17,64(sp)
 4008418:	dfc01315 	stw	ra,76(sp)
 400841c:	dcc01215 	stw	r19,72(sp)
 4008420:	dc801115 	stw	r18,68(sp)
 4008424:	2023883a 	mov	r17,r4
 4008428:	28001c16 	blt	r5,zero,400849c <__smakebuf_r+0xa4>
 400842c:	d80d883a 	mov	r6,sp
 4008430:	40086140 	call	4008614 <_fstat_r>
 4008434:	10001816 	blt	r2,zero,4008498 <__smakebuf_r+0xa0>
 4008438:	d8800117 	ldw	r2,4(sp)
 400843c:	00e00014 	movui	r3,32768
 4008440:	10bc000c 	andi	r2,r2,61440
 4008444:	14c80020 	cmpeqi	r19,r2,8192
 4008448:	10c03726 	beq	r2,r3,4008528 <__smakebuf_r+0x130>
 400844c:	80c0030b 	ldhu	r3,12(r16)
 4008450:	18c20014 	ori	r3,r3,2048
 4008454:	80c0030d 	sth	r3,12(r16)
 4008458:	00c80004 	movi	r3,8192
 400845c:	10c0521e 	bne	r2,r3,40085a8 <__smakebuf_r+0x1b0>
 4008460:	8140038f 	ldh	r5,14(r16)
 4008464:	8809883a 	mov	r4,r17
 4008468:	40086700 	call	4008670 <_isatty_r>
 400846c:	10004c26 	beq	r2,zero,40085a0 <__smakebuf_r+0x1a8>
 4008470:	8080030b 	ldhu	r2,12(r16)
 4008474:	80c010c4 	addi	r3,r16,67
 4008478:	80c00015 	stw	r3,0(r16)
 400847c:	10800054 	ori	r2,r2,1
 4008480:	8080030d 	sth	r2,12(r16)
 4008484:	00800044 	movi	r2,1
 4008488:	80c00415 	stw	r3,16(r16)
 400848c:	80800515 	stw	r2,20(r16)
 4008490:	04810004 	movi	r18,1024
 4008494:	00000706 	br	40084b4 <__smakebuf_r+0xbc>
 4008498:	8080030b 	ldhu	r2,12(r16)
 400849c:	10c0200c 	andi	r3,r2,128
 40084a0:	18001f1e 	bne	r3,zero,4008520 <__smakebuf_r+0x128>
 40084a4:	04810004 	movi	r18,1024
 40084a8:	10820014 	ori	r2,r2,2048
 40084ac:	8080030d 	sth	r2,12(r16)
 40084b0:	0027883a 	mov	r19,zero
 40084b4:	900b883a 	mov	r5,r18
 40084b8:	8809883a 	mov	r4,r17
 40084bc:	40066000 	call	4006600 <_malloc_r>
 40084c0:	10002c26 	beq	r2,zero,4008574 <__smakebuf_r+0x17c>
 40084c4:	80c0030b 	ldhu	r3,12(r16)
 40084c8:	01010034 	movhi	r4,1024
 40084cc:	21170904 	addi	r4,r4,23588
 40084d0:	89000f15 	stw	r4,60(r17)
 40084d4:	18c02014 	ori	r3,r3,128
 40084d8:	80c0030d 	sth	r3,12(r16)
 40084dc:	80800015 	stw	r2,0(r16)
 40084e0:	80800415 	stw	r2,16(r16)
 40084e4:	84800515 	stw	r18,20(r16)
 40084e8:	98001a1e 	bne	r19,zero,4008554 <__smakebuf_r+0x15c>
 40084ec:	dfc01317 	ldw	ra,76(sp)
 40084f0:	dcc01217 	ldw	r19,72(sp)
 40084f4:	dc801117 	ldw	r18,68(sp)
 40084f8:	dc401017 	ldw	r17,64(sp)
 40084fc:	dc000f17 	ldw	r16,60(sp)
 4008500:	dec01404 	addi	sp,sp,80
 4008504:	f800283a 	ret
 4008508:	288010c4 	addi	r2,r5,67
 400850c:	28800015 	stw	r2,0(r5)
 4008510:	28800415 	stw	r2,16(r5)
 4008514:	00800044 	movi	r2,1
 4008518:	28800515 	stw	r2,20(r5)
 400851c:	f800283a 	ret
 4008520:	04801004 	movi	r18,64
 4008524:	003fe006 	br	40084a8 <__ram_exceptions_end+0xfbfe8260>
 4008528:	81000a17 	ldw	r4,40(r16)
 400852c:	00c10034 	movhi	r3,1024
 4008530:	18de5304 	addi	r3,r3,31052
 4008534:	20ffc51e 	bne	r4,r3,400844c <__ram_exceptions_end+0xfbfe8204>
 4008538:	8080030b 	ldhu	r2,12(r16)
 400853c:	04810004 	movi	r18,1024
 4008540:	84801315 	stw	r18,76(r16)
 4008544:	1484b03a 	or	r2,r2,r18
 4008548:	8080030d 	sth	r2,12(r16)
 400854c:	0027883a 	mov	r19,zero
 4008550:	003fd806 	br	40084b4 <__ram_exceptions_end+0xfbfe826c>
 4008554:	8140038f 	ldh	r5,14(r16)
 4008558:	8809883a 	mov	r4,r17
 400855c:	40086700 	call	4008670 <_isatty_r>
 4008560:	103fe226 	beq	r2,zero,40084ec <__ram_exceptions_end+0xfbfe82a4>
 4008564:	8080030b 	ldhu	r2,12(r16)
 4008568:	10800054 	ori	r2,r2,1
 400856c:	8080030d 	sth	r2,12(r16)
 4008570:	003fde06 	br	40084ec <__ram_exceptions_end+0xfbfe82a4>
 4008574:	8080030b 	ldhu	r2,12(r16)
 4008578:	10c0800c 	andi	r3,r2,512
 400857c:	183fdb1e 	bne	r3,zero,40084ec <__ram_exceptions_end+0xfbfe82a4>
 4008580:	10800094 	ori	r2,r2,2
 4008584:	80c010c4 	addi	r3,r16,67
 4008588:	8080030d 	sth	r2,12(r16)
 400858c:	00800044 	movi	r2,1
 4008590:	80c00015 	stw	r3,0(r16)
 4008594:	80c00415 	stw	r3,16(r16)
 4008598:	80800515 	stw	r2,20(r16)
 400859c:	003fd306 	br	40084ec <__ram_exceptions_end+0xfbfe82a4>
 40085a0:	04810004 	movi	r18,1024
 40085a4:	003fc306 	br	40084b4 <__ram_exceptions_end+0xfbfe826c>
 40085a8:	0027883a 	mov	r19,zero
 40085ac:	04810004 	movi	r18,1024
 40085b0:	003fc006 	br	40084b4 <__ram_exceptions_end+0xfbfe826c>

040085b4 <_read_r>:
 40085b4:	defffd04 	addi	sp,sp,-12
 40085b8:	2805883a 	mov	r2,r5
 40085bc:	dc000015 	stw	r16,0(sp)
 40085c0:	04010074 	movhi	r16,1025
 40085c4:	dc400115 	stw	r17,4(sp)
 40085c8:	300b883a 	mov	r5,r6
 40085cc:	843d8404 	addi	r16,r16,-2544
 40085d0:	2023883a 	mov	r17,r4
 40085d4:	380d883a 	mov	r6,r7
 40085d8:	1009883a 	mov	r4,r2
 40085dc:	dfc00215 	stw	ra,8(sp)
 40085e0:	80000015 	stw	zero,0(r16)
 40085e4:	4008cc40 	call	4008cc4 <read>
 40085e8:	00ffffc4 	movi	r3,-1
 40085ec:	10c00526 	beq	r2,r3,4008604 <_read_r+0x50>
 40085f0:	dfc00217 	ldw	ra,8(sp)
 40085f4:	dc400117 	ldw	r17,4(sp)
 40085f8:	dc000017 	ldw	r16,0(sp)
 40085fc:	dec00304 	addi	sp,sp,12
 4008600:	f800283a 	ret
 4008604:	80c00017 	ldw	r3,0(r16)
 4008608:	183ff926 	beq	r3,zero,40085f0 <__ram_exceptions_end+0xfbfe83a8>
 400860c:	88c00015 	stw	r3,0(r17)
 4008610:	003ff706 	br	40085f0 <__ram_exceptions_end+0xfbfe83a8>

04008614 <_fstat_r>:
 4008614:	defffd04 	addi	sp,sp,-12
 4008618:	2805883a 	mov	r2,r5
 400861c:	dc000015 	stw	r16,0(sp)
 4008620:	04010074 	movhi	r16,1025
 4008624:	dc400115 	stw	r17,4(sp)
 4008628:	843d8404 	addi	r16,r16,-2544
 400862c:	2023883a 	mov	r17,r4
 4008630:	300b883a 	mov	r5,r6
 4008634:	1009883a 	mov	r4,r2
 4008638:	dfc00215 	stw	ra,8(sp)
 400863c:	80000015 	stw	zero,0(r16)
 4008640:	40088380 	call	4008838 <fstat>
 4008644:	00ffffc4 	movi	r3,-1
 4008648:	10c00526 	beq	r2,r3,4008660 <_fstat_r+0x4c>
 400864c:	dfc00217 	ldw	ra,8(sp)
 4008650:	dc400117 	ldw	r17,4(sp)
 4008654:	dc000017 	ldw	r16,0(sp)
 4008658:	dec00304 	addi	sp,sp,12
 400865c:	f800283a 	ret
 4008660:	80c00017 	ldw	r3,0(r16)
 4008664:	183ff926 	beq	r3,zero,400864c <__ram_exceptions_end+0xfbfe8404>
 4008668:	88c00015 	stw	r3,0(r17)
 400866c:	003ff706 	br	400864c <__ram_exceptions_end+0xfbfe8404>

04008670 <_isatty_r>:
 4008670:	defffd04 	addi	sp,sp,-12
 4008674:	dc000015 	stw	r16,0(sp)
 4008678:	04010074 	movhi	r16,1025
 400867c:	dc400115 	stw	r17,4(sp)
 4008680:	843d8404 	addi	r16,r16,-2544
 4008684:	2023883a 	mov	r17,r4
 4008688:	2809883a 	mov	r4,r5
 400868c:	dfc00215 	stw	ra,8(sp)
 4008690:	80000015 	stw	zero,0(r16)
 4008694:	40089240 	call	4008924 <isatty>
 4008698:	00ffffc4 	movi	r3,-1
 400869c:	10c00526 	beq	r2,r3,40086b4 <_isatty_r+0x44>
 40086a0:	dfc00217 	ldw	ra,8(sp)
 40086a4:	dc400117 	ldw	r17,4(sp)
 40086a8:	dc000017 	ldw	r16,0(sp)
 40086ac:	dec00304 	addi	sp,sp,12
 40086b0:	f800283a 	ret
 40086b4:	80c00017 	ldw	r3,0(r16)
 40086b8:	183ff926 	beq	r3,zero,40086a0 <__ram_exceptions_end+0xfbfe8458>
 40086bc:	88c00015 	stw	r3,0(r17)
 40086c0:	003ff706 	br	40086a0 <__ram_exceptions_end+0xfbfe8458>

040086c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40086c4:	defffe04 	addi	sp,sp,-8
 40086c8:	dfc00115 	stw	ra,4(sp)
 40086cc:	df000015 	stw	fp,0(sp)
 40086d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40086d4:	d0a00917 	ldw	r2,-32732(gp)
 40086d8:	10000326 	beq	r2,zero,40086e8 <alt_get_errno+0x24>
 40086dc:	d0a00917 	ldw	r2,-32732(gp)
 40086e0:	103ee83a 	callr	r2
 40086e4:	00000106 	br	40086ec <alt_get_errno+0x28>
 40086e8:	d0a6c404 	addi	r2,gp,-25840
}
 40086ec:	e037883a 	mov	sp,fp
 40086f0:	dfc00117 	ldw	ra,4(sp)
 40086f4:	df000017 	ldw	fp,0(sp)
 40086f8:	dec00204 	addi	sp,sp,8
 40086fc:	f800283a 	ret

04008700 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4008700:	defffb04 	addi	sp,sp,-20
 4008704:	dfc00415 	stw	ra,16(sp)
 4008708:	df000315 	stw	fp,12(sp)
 400870c:	df000304 	addi	fp,sp,12
 4008710:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4008714:	e0bfff17 	ldw	r2,-4(fp)
 4008718:	10000616 	blt	r2,zero,4008734 <close+0x34>
 400871c:	e0bfff17 	ldw	r2,-4(fp)
 4008720:	10c00324 	muli	r3,r2,12
 4008724:	00810074 	movhi	r2,1025
 4008728:	10b23004 	addi	r2,r2,-14144
 400872c:	1885883a 	add	r2,r3,r2
 4008730:	00000106 	br	4008738 <close+0x38>
 4008734:	0005883a 	mov	r2,zero
 4008738:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400873c:	e0bffd17 	ldw	r2,-12(fp)
 4008740:	10001926 	beq	r2,zero,40087a8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4008744:	e0bffd17 	ldw	r2,-12(fp)
 4008748:	10800017 	ldw	r2,0(r2)
 400874c:	10800417 	ldw	r2,16(r2)
 4008750:	10000626 	beq	r2,zero,400876c <close+0x6c>
 4008754:	e0bffd17 	ldw	r2,-12(fp)
 4008758:	10800017 	ldw	r2,0(r2)
 400875c:	10800417 	ldw	r2,16(r2)
 4008760:	e13ffd17 	ldw	r4,-12(fp)
 4008764:	103ee83a 	callr	r2
 4008768:	00000106 	br	4008770 <close+0x70>
 400876c:	0005883a 	mov	r2,zero
 4008770:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4008774:	e13fff17 	ldw	r4,-4(fp)
 4008778:	4008dc00 	call	4008dc0 <alt_release_fd>
    if (rval < 0)
 400877c:	e0bffe17 	ldw	r2,-8(fp)
 4008780:	1000070e 	bge	r2,zero,40087a0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4008784:	40086c40 	call	40086c4 <alt_get_errno>
 4008788:	1007883a 	mov	r3,r2
 400878c:	e0bffe17 	ldw	r2,-8(fp)
 4008790:	0085c83a 	sub	r2,zero,r2
 4008794:	18800015 	stw	r2,0(r3)
      return -1;
 4008798:	00bfffc4 	movi	r2,-1
 400879c:	00000706 	br	40087bc <close+0xbc>
    }
    return 0;
 40087a0:	0005883a 	mov	r2,zero
 40087a4:	00000506 	br	40087bc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40087a8:	40086c40 	call	40086c4 <alt_get_errno>
 40087ac:	1007883a 	mov	r3,r2
 40087b0:	00801444 	movi	r2,81
 40087b4:	18800015 	stw	r2,0(r3)
    return -1;
 40087b8:	00bfffc4 	movi	r2,-1
  }
}
 40087bc:	e037883a 	mov	sp,fp
 40087c0:	dfc00117 	ldw	ra,4(sp)
 40087c4:	df000017 	ldw	fp,0(sp)
 40087c8:	dec00204 	addi	sp,sp,8
 40087cc:	f800283a 	ret

040087d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40087d0:	defffc04 	addi	sp,sp,-16
 40087d4:	df000315 	stw	fp,12(sp)
 40087d8:	df000304 	addi	fp,sp,12
 40087dc:	e13ffd15 	stw	r4,-12(fp)
 40087e0:	e17ffe15 	stw	r5,-8(fp)
 40087e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40087e8:	e0bfff17 	ldw	r2,-4(fp)
}
 40087ec:	e037883a 	mov	sp,fp
 40087f0:	df000017 	ldw	fp,0(sp)
 40087f4:	dec00104 	addi	sp,sp,4
 40087f8:	f800283a 	ret

040087fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40087fc:	defffe04 	addi	sp,sp,-8
 4008800:	dfc00115 	stw	ra,4(sp)
 4008804:	df000015 	stw	fp,0(sp)
 4008808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400880c:	d0a00917 	ldw	r2,-32732(gp)
 4008810:	10000326 	beq	r2,zero,4008820 <alt_get_errno+0x24>
 4008814:	d0a00917 	ldw	r2,-32732(gp)
 4008818:	103ee83a 	callr	r2
 400881c:	00000106 	br	4008824 <alt_get_errno+0x28>
 4008820:	d0a6c404 	addi	r2,gp,-25840
}
 4008824:	e037883a 	mov	sp,fp
 4008828:	dfc00117 	ldw	ra,4(sp)
 400882c:	df000017 	ldw	fp,0(sp)
 4008830:	dec00204 	addi	sp,sp,8
 4008834:	f800283a 	ret

04008838 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4008838:	defffb04 	addi	sp,sp,-20
 400883c:	dfc00415 	stw	ra,16(sp)
 4008840:	df000315 	stw	fp,12(sp)
 4008844:	df000304 	addi	fp,sp,12
 4008848:	e13ffe15 	stw	r4,-8(fp)
 400884c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4008850:	e0bffe17 	ldw	r2,-8(fp)
 4008854:	10000616 	blt	r2,zero,4008870 <fstat+0x38>
 4008858:	e0bffe17 	ldw	r2,-8(fp)
 400885c:	10c00324 	muli	r3,r2,12
 4008860:	00810074 	movhi	r2,1025
 4008864:	10b23004 	addi	r2,r2,-14144
 4008868:	1885883a 	add	r2,r3,r2
 400886c:	00000106 	br	4008874 <fstat+0x3c>
 4008870:	0005883a 	mov	r2,zero
 4008874:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4008878:	e0bffd17 	ldw	r2,-12(fp)
 400887c:	10001026 	beq	r2,zero,40088c0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4008880:	e0bffd17 	ldw	r2,-12(fp)
 4008884:	10800017 	ldw	r2,0(r2)
 4008888:	10800817 	ldw	r2,32(r2)
 400888c:	10000726 	beq	r2,zero,40088ac <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4008890:	e0bffd17 	ldw	r2,-12(fp)
 4008894:	10800017 	ldw	r2,0(r2)
 4008898:	10800817 	ldw	r2,32(r2)
 400889c:	e17fff17 	ldw	r5,-4(fp)
 40088a0:	e13ffd17 	ldw	r4,-12(fp)
 40088a4:	103ee83a 	callr	r2
 40088a8:	00000a06 	br	40088d4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 40088ac:	e0bfff17 	ldw	r2,-4(fp)
 40088b0:	00c80004 	movi	r3,8192
 40088b4:	10c00115 	stw	r3,4(r2)
      return 0;
 40088b8:	0005883a 	mov	r2,zero
 40088bc:	00000506 	br	40088d4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40088c0:	40087fc0 	call	40087fc <alt_get_errno>
 40088c4:	1007883a 	mov	r3,r2
 40088c8:	00801444 	movi	r2,81
 40088cc:	18800015 	stw	r2,0(r3)
    return -1;
 40088d0:	00bfffc4 	movi	r2,-1
  }
}
 40088d4:	e037883a 	mov	sp,fp
 40088d8:	dfc00117 	ldw	ra,4(sp)
 40088dc:	df000017 	ldw	fp,0(sp)
 40088e0:	dec00204 	addi	sp,sp,8
 40088e4:	f800283a 	ret

040088e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40088e8:	defffe04 	addi	sp,sp,-8
 40088ec:	dfc00115 	stw	ra,4(sp)
 40088f0:	df000015 	stw	fp,0(sp)
 40088f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40088f8:	d0a00917 	ldw	r2,-32732(gp)
 40088fc:	10000326 	beq	r2,zero,400890c <alt_get_errno+0x24>
 4008900:	d0a00917 	ldw	r2,-32732(gp)
 4008904:	103ee83a 	callr	r2
 4008908:	00000106 	br	4008910 <alt_get_errno+0x28>
 400890c:	d0a6c404 	addi	r2,gp,-25840
}
 4008910:	e037883a 	mov	sp,fp
 4008914:	dfc00117 	ldw	ra,4(sp)
 4008918:	df000017 	ldw	fp,0(sp)
 400891c:	dec00204 	addi	sp,sp,8
 4008920:	f800283a 	ret

04008924 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4008924:	deffed04 	addi	sp,sp,-76
 4008928:	dfc01215 	stw	ra,72(sp)
 400892c:	df001115 	stw	fp,68(sp)
 4008930:	df001104 	addi	fp,sp,68
 4008934:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4008938:	e0bfff17 	ldw	r2,-4(fp)
 400893c:	10000616 	blt	r2,zero,4008958 <isatty+0x34>
 4008940:	e0bfff17 	ldw	r2,-4(fp)
 4008944:	10c00324 	muli	r3,r2,12
 4008948:	00810074 	movhi	r2,1025
 400894c:	10b23004 	addi	r2,r2,-14144
 4008950:	1885883a 	add	r2,r3,r2
 4008954:	00000106 	br	400895c <isatty+0x38>
 4008958:	0005883a 	mov	r2,zero
 400895c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4008960:	e0bfef17 	ldw	r2,-68(fp)
 4008964:	10000e26 	beq	r2,zero,40089a0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4008968:	e0bfef17 	ldw	r2,-68(fp)
 400896c:	10800017 	ldw	r2,0(r2)
 4008970:	10800817 	ldw	r2,32(r2)
 4008974:	1000021e 	bne	r2,zero,4008980 <isatty+0x5c>
    {
      return 1;
 4008978:	00800044 	movi	r2,1
 400897c:	00000d06 	br	40089b4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4008980:	e0bff004 	addi	r2,fp,-64
 4008984:	100b883a 	mov	r5,r2
 4008988:	e13fff17 	ldw	r4,-4(fp)
 400898c:	40088380 	call	4008838 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4008990:	e0bff117 	ldw	r2,-60(fp)
 4008994:	10880020 	cmpeqi	r2,r2,8192
 4008998:	10803fcc 	andi	r2,r2,255
 400899c:	00000506 	br	40089b4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40089a0:	40088e80 	call	40088e8 <alt_get_errno>
 40089a4:	1007883a 	mov	r3,r2
 40089a8:	00801444 	movi	r2,81
 40089ac:	18800015 	stw	r2,0(r3)
    return 0;
 40089b0:	0005883a 	mov	r2,zero
  }
}
 40089b4:	e037883a 	mov	sp,fp
 40089b8:	dfc00117 	ldw	ra,4(sp)
 40089bc:	df000017 	ldw	fp,0(sp)
 40089c0:	dec00204 	addi	sp,sp,8
 40089c4:	f800283a 	ret

040089c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40089c8:	defffc04 	addi	sp,sp,-16
 40089cc:	df000315 	stw	fp,12(sp)
 40089d0:	df000304 	addi	fp,sp,12
 40089d4:	e13ffd15 	stw	r4,-12(fp)
 40089d8:	e17ffe15 	stw	r5,-8(fp)
 40089dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40089e0:	e0fffe17 	ldw	r3,-8(fp)
 40089e4:	e0bffd17 	ldw	r2,-12(fp)
 40089e8:	18800c26 	beq	r3,r2,4008a1c <alt_load_section+0x54>
  {
    while( to != end )
 40089ec:	00000806 	br	4008a10 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40089f0:	e0bffe17 	ldw	r2,-8(fp)
 40089f4:	10c00104 	addi	r3,r2,4
 40089f8:	e0fffe15 	stw	r3,-8(fp)
 40089fc:	e0fffd17 	ldw	r3,-12(fp)
 4008a00:	19000104 	addi	r4,r3,4
 4008a04:	e13ffd15 	stw	r4,-12(fp)
 4008a08:	18c00017 	ldw	r3,0(r3)
 4008a0c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4008a10:	e0fffe17 	ldw	r3,-8(fp)
 4008a14:	e0bfff17 	ldw	r2,-4(fp)
 4008a18:	18bff51e 	bne	r3,r2,40089f0 <__ram_exceptions_end+0xfbfe87a8>
    {
      *to++ = *from++;
    }
  }
}
 4008a1c:	0001883a 	nop
 4008a20:	e037883a 	mov	sp,fp
 4008a24:	df000017 	ldw	fp,0(sp)
 4008a28:	dec00104 	addi	sp,sp,4
 4008a2c:	f800283a 	ret

04008a30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4008a30:	defffe04 	addi	sp,sp,-8
 4008a34:	dfc00115 	stw	ra,4(sp)
 4008a38:	df000015 	stw	fp,0(sp)
 4008a3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4008a40:	01810074 	movhi	r6,1025
 4008a44:	31b6ce04 	addi	r6,r6,-9416
 4008a48:	01410074 	movhi	r5,1025
 4008a4c:	29701b04 	addi	r5,r5,-16276
 4008a50:	01010074 	movhi	r4,1025
 4008a54:	2136ce04 	addi	r4,r4,-9416
 4008a58:	40089c80 	call	40089c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4008a5c:	018200b4 	movhi	r6,2050
 4008a60:	31809204 	addi	r6,r6,584
 4008a64:	014200b4 	movhi	r5,2050
 4008a68:	29400804 	addi	r5,r5,32
 4008a6c:	01010034 	movhi	r4,1024
 4008a70:	21000004 	addi	r4,r4,0
 4008a74:	40089c80 	call	40089c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4008a78:	01810074 	movhi	r6,1025
 4008a7c:	31b01b04 	addi	r6,r6,-16276
 4008a80:	01410074 	movhi	r5,1025
 4008a84:	296f2104 	addi	r5,r5,-17276
 4008a88:	01010074 	movhi	r4,1025
 4008a8c:	212f2104 	addi	r4,r4,-17276
 4008a90:	40089c80 	call	40089c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4008a94:	400ac900 	call	400ac90 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4008a98:	400af080 	call	400af08 <alt_icache_flush_all>
}
 4008a9c:	0001883a 	nop
 4008aa0:	e037883a 	mov	sp,fp
 4008aa4:	dfc00117 	ldw	ra,4(sp)
 4008aa8:	df000017 	ldw	fp,0(sp)
 4008aac:	dec00204 	addi	sp,sp,8
 4008ab0:	f800283a 	ret

04008ab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008ab4:	defffe04 	addi	sp,sp,-8
 4008ab8:	dfc00115 	stw	ra,4(sp)
 4008abc:	df000015 	stw	fp,0(sp)
 4008ac0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4008ac4:	d0a00917 	ldw	r2,-32732(gp)
 4008ac8:	10000326 	beq	r2,zero,4008ad8 <alt_get_errno+0x24>
 4008acc:	d0a00917 	ldw	r2,-32732(gp)
 4008ad0:	103ee83a 	callr	r2
 4008ad4:	00000106 	br	4008adc <alt_get_errno+0x28>
 4008ad8:	d0a6c404 	addi	r2,gp,-25840
}
 4008adc:	e037883a 	mov	sp,fp
 4008ae0:	dfc00117 	ldw	ra,4(sp)
 4008ae4:	df000017 	ldw	fp,0(sp)
 4008ae8:	dec00204 	addi	sp,sp,8
 4008aec:	f800283a 	ret

04008af0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4008af0:	defff904 	addi	sp,sp,-28
 4008af4:	dfc00615 	stw	ra,24(sp)
 4008af8:	df000515 	stw	fp,20(sp)
 4008afc:	df000504 	addi	fp,sp,20
 4008b00:	e13ffd15 	stw	r4,-12(fp)
 4008b04:	e17ffe15 	stw	r5,-8(fp)
 4008b08:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4008b0c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4008b10:	e0bffd17 	ldw	r2,-12(fp)
 4008b14:	10000616 	blt	r2,zero,4008b30 <lseek+0x40>
 4008b18:	e0bffd17 	ldw	r2,-12(fp)
 4008b1c:	10c00324 	muli	r3,r2,12
 4008b20:	00810074 	movhi	r2,1025
 4008b24:	10b23004 	addi	r2,r2,-14144
 4008b28:	1885883a 	add	r2,r3,r2
 4008b2c:	00000106 	br	4008b34 <lseek+0x44>
 4008b30:	0005883a 	mov	r2,zero
 4008b34:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4008b38:	e0bffc17 	ldw	r2,-16(fp)
 4008b3c:	10001026 	beq	r2,zero,4008b80 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4008b40:	e0bffc17 	ldw	r2,-16(fp)
 4008b44:	10800017 	ldw	r2,0(r2)
 4008b48:	10800717 	ldw	r2,28(r2)
 4008b4c:	10000926 	beq	r2,zero,4008b74 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4008b50:	e0bffc17 	ldw	r2,-16(fp)
 4008b54:	10800017 	ldw	r2,0(r2)
 4008b58:	10800717 	ldw	r2,28(r2)
 4008b5c:	e1bfff17 	ldw	r6,-4(fp)
 4008b60:	e17ffe17 	ldw	r5,-8(fp)
 4008b64:	e13ffc17 	ldw	r4,-16(fp)
 4008b68:	103ee83a 	callr	r2
 4008b6c:	e0bffb15 	stw	r2,-20(fp)
 4008b70:	00000506 	br	4008b88 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4008b74:	00bfde84 	movi	r2,-134
 4008b78:	e0bffb15 	stw	r2,-20(fp)
 4008b7c:	00000206 	br	4008b88 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4008b80:	00bfebc4 	movi	r2,-81
 4008b84:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4008b88:	e0bffb17 	ldw	r2,-20(fp)
 4008b8c:	1000070e 	bge	r2,zero,4008bac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4008b90:	4008ab40 	call	4008ab4 <alt_get_errno>
 4008b94:	1007883a 	mov	r3,r2
 4008b98:	e0bffb17 	ldw	r2,-20(fp)
 4008b9c:	0085c83a 	sub	r2,zero,r2
 4008ba0:	18800015 	stw	r2,0(r3)
    rc = -1;
 4008ba4:	00bfffc4 	movi	r2,-1
 4008ba8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4008bac:	e0bffb17 	ldw	r2,-20(fp)
}
 4008bb0:	e037883a 	mov	sp,fp
 4008bb4:	dfc00117 	ldw	ra,4(sp)
 4008bb8:	df000017 	ldw	fp,0(sp)
 4008bbc:	dec00204 	addi	sp,sp,8
 4008bc0:	f800283a 	ret

04008bc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4008bc4:	defffd04 	addi	sp,sp,-12
 4008bc8:	dfc00215 	stw	ra,8(sp)
 4008bcc:	df000115 	stw	fp,4(sp)
 4008bd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4008bd4:	0009883a 	mov	r4,zero
 4008bd8:	400906c0 	call	400906c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4008bdc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4008be0:	40090a40 	call	40090a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4008be4:	01810074 	movhi	r6,1025
 4008be8:	31b00504 	addi	r6,r6,-16364
 4008bec:	01410074 	movhi	r5,1025
 4008bf0:	29700504 	addi	r5,r5,-16364
 4008bf4:	01010074 	movhi	r4,1025
 4008bf8:	21300504 	addi	r4,r4,-16364
 4008bfc:	400b0000 	call	400b000 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4008c00:	400adb80 	call	400adb8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4008c04:	01010074 	movhi	r4,1025
 4008c08:	212b8604 	addi	r4,r4,-20968
 4008c0c:	400b8f00 	call	400b8f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4008c10:	d0a6c517 	ldw	r2,-25836(gp)
 4008c14:	d0e6c617 	ldw	r3,-25832(gp)
 4008c18:	d126c717 	ldw	r4,-25828(gp)
 4008c1c:	200d883a 	mov	r6,r4
 4008c20:	180b883a 	mov	r5,r3
 4008c24:	1009883a 	mov	r4,r2
 4008c28:	40002740 	call	4000274 <main>
 4008c2c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4008c30:	01000044 	movi	r4,1
 4008c34:	40087000 	call	4008700 <close>
  exit (result);
 4008c38:	e13fff17 	ldw	r4,-4(fp)
 4008c3c:	400b9040 	call	400b904 <exit>

04008c40 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4008c40:	defffe04 	addi	sp,sp,-8
 4008c44:	df000115 	stw	fp,4(sp)
 4008c48:	df000104 	addi	fp,sp,4
 4008c4c:	e13fff15 	stw	r4,-4(fp)
}
 4008c50:	0001883a 	nop
 4008c54:	e037883a 	mov	sp,fp
 4008c58:	df000017 	ldw	fp,0(sp)
 4008c5c:	dec00104 	addi	sp,sp,4
 4008c60:	f800283a 	ret

04008c64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4008c64:	defffe04 	addi	sp,sp,-8
 4008c68:	df000115 	stw	fp,4(sp)
 4008c6c:	df000104 	addi	fp,sp,4
 4008c70:	e13fff15 	stw	r4,-4(fp)
}
 4008c74:	0001883a 	nop
 4008c78:	e037883a 	mov	sp,fp
 4008c7c:	df000017 	ldw	fp,0(sp)
 4008c80:	dec00104 	addi	sp,sp,4
 4008c84:	f800283a 	ret

04008c88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008c88:	defffe04 	addi	sp,sp,-8
 4008c8c:	dfc00115 	stw	ra,4(sp)
 4008c90:	df000015 	stw	fp,0(sp)
 4008c94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4008c98:	d0a00917 	ldw	r2,-32732(gp)
 4008c9c:	10000326 	beq	r2,zero,4008cac <alt_get_errno+0x24>
 4008ca0:	d0a00917 	ldw	r2,-32732(gp)
 4008ca4:	103ee83a 	callr	r2
 4008ca8:	00000106 	br	4008cb0 <alt_get_errno+0x28>
 4008cac:	d0a6c404 	addi	r2,gp,-25840
}
 4008cb0:	e037883a 	mov	sp,fp
 4008cb4:	dfc00117 	ldw	ra,4(sp)
 4008cb8:	df000017 	ldw	fp,0(sp)
 4008cbc:	dec00204 	addi	sp,sp,8
 4008cc0:	f800283a 	ret

04008cc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4008cc4:	defff904 	addi	sp,sp,-28
 4008cc8:	dfc00615 	stw	ra,24(sp)
 4008ccc:	df000515 	stw	fp,20(sp)
 4008cd0:	df000504 	addi	fp,sp,20
 4008cd4:	e13ffd15 	stw	r4,-12(fp)
 4008cd8:	e17ffe15 	stw	r5,-8(fp)
 4008cdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4008ce0:	e0bffd17 	ldw	r2,-12(fp)
 4008ce4:	10000616 	blt	r2,zero,4008d00 <read+0x3c>
 4008ce8:	e0bffd17 	ldw	r2,-12(fp)
 4008cec:	10c00324 	muli	r3,r2,12
 4008cf0:	00810074 	movhi	r2,1025
 4008cf4:	10b23004 	addi	r2,r2,-14144
 4008cf8:	1885883a 	add	r2,r3,r2
 4008cfc:	00000106 	br	4008d04 <read+0x40>
 4008d00:	0005883a 	mov	r2,zero
 4008d04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4008d08:	e0bffb17 	ldw	r2,-20(fp)
 4008d0c:	10002226 	beq	r2,zero,4008d98 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4008d10:	e0bffb17 	ldw	r2,-20(fp)
 4008d14:	10800217 	ldw	r2,8(r2)
 4008d18:	108000cc 	andi	r2,r2,3
 4008d1c:	10800060 	cmpeqi	r2,r2,1
 4008d20:	1000181e 	bne	r2,zero,4008d84 <read+0xc0>
        (fd->dev->read))
 4008d24:	e0bffb17 	ldw	r2,-20(fp)
 4008d28:	10800017 	ldw	r2,0(r2)
 4008d2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4008d30:	10001426 	beq	r2,zero,4008d84 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4008d34:	e0bffb17 	ldw	r2,-20(fp)
 4008d38:	10800017 	ldw	r2,0(r2)
 4008d3c:	10800517 	ldw	r2,20(r2)
 4008d40:	e0ffff17 	ldw	r3,-4(fp)
 4008d44:	180d883a 	mov	r6,r3
 4008d48:	e17ffe17 	ldw	r5,-8(fp)
 4008d4c:	e13ffb17 	ldw	r4,-20(fp)
 4008d50:	103ee83a 	callr	r2
 4008d54:	e0bffc15 	stw	r2,-16(fp)
 4008d58:	e0bffc17 	ldw	r2,-16(fp)
 4008d5c:	1000070e 	bge	r2,zero,4008d7c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4008d60:	4008c880 	call	4008c88 <alt_get_errno>
 4008d64:	1007883a 	mov	r3,r2
 4008d68:	e0bffc17 	ldw	r2,-16(fp)
 4008d6c:	0085c83a 	sub	r2,zero,r2
 4008d70:	18800015 	stw	r2,0(r3)
          return -1;
 4008d74:	00bfffc4 	movi	r2,-1
 4008d78:	00000c06 	br	4008dac <read+0xe8>
        }
        return rval;
 4008d7c:	e0bffc17 	ldw	r2,-16(fp)
 4008d80:	00000a06 	br	4008dac <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4008d84:	4008c880 	call	4008c88 <alt_get_errno>
 4008d88:	1007883a 	mov	r3,r2
 4008d8c:	00800344 	movi	r2,13
 4008d90:	18800015 	stw	r2,0(r3)
 4008d94:	00000406 	br	4008da8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4008d98:	4008c880 	call	4008c88 <alt_get_errno>
 4008d9c:	1007883a 	mov	r3,r2
 4008da0:	00801444 	movi	r2,81
 4008da4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4008da8:	00bfffc4 	movi	r2,-1
}
 4008dac:	e037883a 	mov	sp,fp
 4008db0:	dfc00117 	ldw	ra,4(sp)
 4008db4:	df000017 	ldw	fp,0(sp)
 4008db8:	dec00204 	addi	sp,sp,8
 4008dbc:	f800283a 	ret

04008dc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4008dc0:	defffe04 	addi	sp,sp,-8
 4008dc4:	df000115 	stw	fp,4(sp)
 4008dc8:	df000104 	addi	fp,sp,4
 4008dcc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4008dd0:	e0bfff17 	ldw	r2,-4(fp)
 4008dd4:	108000d0 	cmplti	r2,r2,3
 4008dd8:	10000d1e 	bne	r2,zero,4008e10 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4008ddc:	00810074 	movhi	r2,1025
 4008de0:	10b23004 	addi	r2,r2,-14144
 4008de4:	e0ffff17 	ldw	r3,-4(fp)
 4008de8:	18c00324 	muli	r3,r3,12
 4008dec:	10c5883a 	add	r2,r2,r3
 4008df0:	10800204 	addi	r2,r2,8
 4008df4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4008df8:	00810074 	movhi	r2,1025
 4008dfc:	10b23004 	addi	r2,r2,-14144
 4008e00:	e0ffff17 	ldw	r3,-4(fp)
 4008e04:	18c00324 	muli	r3,r3,12
 4008e08:	10c5883a 	add	r2,r2,r3
 4008e0c:	10000015 	stw	zero,0(r2)
  }
}
 4008e10:	0001883a 	nop
 4008e14:	e037883a 	mov	sp,fp
 4008e18:	df000017 	ldw	fp,0(sp)
 4008e1c:	dec00104 	addi	sp,sp,4
 4008e20:	f800283a 	ret

04008e24 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4008e24:	defff904 	addi	sp,sp,-28
 4008e28:	df000615 	stw	fp,24(sp)
 4008e2c:	df000604 	addi	fp,sp,24
 4008e30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008e34:	0005303a 	rdctl	r2,status
 4008e38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4008e3c:	e0fffe17 	ldw	r3,-8(fp)
 4008e40:	00bfff84 	movi	r2,-2
 4008e44:	1884703a 	and	r2,r3,r2
 4008e48:	1001703a 	wrctl	status,r2
  
  return context;
 4008e4c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4008e50:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4008e54:	d0a00a17 	ldw	r2,-32728(gp)
 4008e58:	10c000c4 	addi	r3,r2,3
 4008e5c:	00bfff04 	movi	r2,-4
 4008e60:	1884703a 	and	r2,r3,r2
 4008e64:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4008e68:	d0e00a17 	ldw	r3,-32728(gp)
 4008e6c:	e0bfff17 	ldw	r2,-4(fp)
 4008e70:	1887883a 	add	r3,r3,r2
 4008e74:	00820034 	movhi	r2,2048
 4008e78:	10800004 	addi	r2,r2,0
 4008e7c:	10c0062e 	bgeu	r2,r3,4008e98 <sbrk+0x74>
 4008e80:	e0bffb17 	ldw	r2,-20(fp)
 4008e84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008e88:	e0bffa17 	ldw	r2,-24(fp)
 4008e8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4008e90:	00bfffc4 	movi	r2,-1
 4008e94:	00000b06 	br	4008ec4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4008e98:	d0a00a17 	ldw	r2,-32728(gp)
 4008e9c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4008ea0:	d0e00a17 	ldw	r3,-32728(gp)
 4008ea4:	e0bfff17 	ldw	r2,-4(fp)
 4008ea8:	1885883a 	add	r2,r3,r2
 4008eac:	d0a00a15 	stw	r2,-32728(gp)
 4008eb0:	e0bffb17 	ldw	r2,-20(fp)
 4008eb4:	e0bffc15 	stw	r2,-16(fp)
 4008eb8:	e0bffc17 	ldw	r2,-16(fp)
 4008ebc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4008ec0:	e0bffd17 	ldw	r2,-12(fp)
} 
 4008ec4:	e037883a 	mov	sp,fp
 4008ec8:	df000017 	ldw	fp,0(sp)
 4008ecc:	dec00104 	addi	sp,sp,4
 4008ed0:	f800283a 	ret

04008ed4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4008ed4:	defffd04 	addi	sp,sp,-12
 4008ed8:	dfc00215 	stw	ra,8(sp)
 4008edc:	df000115 	stw	fp,4(sp)
 4008ee0:	df000104 	addi	fp,sp,4
 4008ee4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4008ee8:	e13fff17 	ldw	r4,-4(fp)
 4008eec:	400ab380 	call	400ab38 <alt_busy_sleep>
}
 4008ef0:	e037883a 	mov	sp,fp
 4008ef4:	dfc00117 	ldw	ra,4(sp)
 4008ef8:	df000017 	ldw	fp,0(sp)
 4008efc:	dec00204 	addi	sp,sp,8
 4008f00:	f800283a 	ret

04008f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008f04:	defffe04 	addi	sp,sp,-8
 4008f08:	dfc00115 	stw	ra,4(sp)
 4008f0c:	df000015 	stw	fp,0(sp)
 4008f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4008f14:	d0a00917 	ldw	r2,-32732(gp)
 4008f18:	10000326 	beq	r2,zero,4008f28 <alt_get_errno+0x24>
 4008f1c:	d0a00917 	ldw	r2,-32732(gp)
 4008f20:	103ee83a 	callr	r2
 4008f24:	00000106 	br	4008f2c <alt_get_errno+0x28>
 4008f28:	d0a6c404 	addi	r2,gp,-25840
}
 4008f2c:	e037883a 	mov	sp,fp
 4008f30:	dfc00117 	ldw	ra,4(sp)
 4008f34:	df000017 	ldw	fp,0(sp)
 4008f38:	dec00204 	addi	sp,sp,8
 4008f3c:	f800283a 	ret

04008f40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4008f40:	defff904 	addi	sp,sp,-28
 4008f44:	dfc00615 	stw	ra,24(sp)
 4008f48:	df000515 	stw	fp,20(sp)
 4008f4c:	df000504 	addi	fp,sp,20
 4008f50:	e13ffd15 	stw	r4,-12(fp)
 4008f54:	e17ffe15 	stw	r5,-8(fp)
 4008f58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4008f5c:	e0bffd17 	ldw	r2,-12(fp)
 4008f60:	10000616 	blt	r2,zero,4008f7c <write+0x3c>
 4008f64:	e0bffd17 	ldw	r2,-12(fp)
 4008f68:	10c00324 	muli	r3,r2,12
 4008f6c:	00810074 	movhi	r2,1025
 4008f70:	10b23004 	addi	r2,r2,-14144
 4008f74:	1885883a 	add	r2,r3,r2
 4008f78:	00000106 	br	4008f80 <write+0x40>
 4008f7c:	0005883a 	mov	r2,zero
 4008f80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4008f84:	e0bffb17 	ldw	r2,-20(fp)
 4008f88:	10002126 	beq	r2,zero,4009010 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4008f8c:	e0bffb17 	ldw	r2,-20(fp)
 4008f90:	10800217 	ldw	r2,8(r2)
 4008f94:	108000cc 	andi	r2,r2,3
 4008f98:	10001826 	beq	r2,zero,4008ffc <write+0xbc>
 4008f9c:	e0bffb17 	ldw	r2,-20(fp)
 4008fa0:	10800017 	ldw	r2,0(r2)
 4008fa4:	10800617 	ldw	r2,24(r2)
 4008fa8:	10001426 	beq	r2,zero,4008ffc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4008fac:	e0bffb17 	ldw	r2,-20(fp)
 4008fb0:	10800017 	ldw	r2,0(r2)
 4008fb4:	10800617 	ldw	r2,24(r2)
 4008fb8:	e0ffff17 	ldw	r3,-4(fp)
 4008fbc:	180d883a 	mov	r6,r3
 4008fc0:	e17ffe17 	ldw	r5,-8(fp)
 4008fc4:	e13ffb17 	ldw	r4,-20(fp)
 4008fc8:	103ee83a 	callr	r2
 4008fcc:	e0bffc15 	stw	r2,-16(fp)
 4008fd0:	e0bffc17 	ldw	r2,-16(fp)
 4008fd4:	1000070e 	bge	r2,zero,4008ff4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4008fd8:	4008f040 	call	4008f04 <alt_get_errno>
 4008fdc:	1007883a 	mov	r3,r2
 4008fe0:	e0bffc17 	ldw	r2,-16(fp)
 4008fe4:	0085c83a 	sub	r2,zero,r2
 4008fe8:	18800015 	stw	r2,0(r3)
        return -1;
 4008fec:	00bfffc4 	movi	r2,-1
 4008ff0:	00000c06 	br	4009024 <write+0xe4>
      }
      return rval;
 4008ff4:	e0bffc17 	ldw	r2,-16(fp)
 4008ff8:	00000a06 	br	4009024 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4008ffc:	4008f040 	call	4008f04 <alt_get_errno>
 4009000:	1007883a 	mov	r3,r2
 4009004:	00800344 	movi	r2,13
 4009008:	18800015 	stw	r2,0(r3)
 400900c:	00000406 	br	4009020 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4009010:	4008f040 	call	4008f04 <alt_get_errno>
 4009014:	1007883a 	mov	r3,r2
 4009018:	00801444 	movi	r2,81
 400901c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4009020:	00bfffc4 	movi	r2,-1
}
 4009024:	e037883a 	mov	sp,fp
 4009028:	dfc00117 	ldw	ra,4(sp)
 400902c:	df000017 	ldw	fp,0(sp)
 4009030:	dec00204 	addi	sp,sp,8
 4009034:	f800283a 	ret

04009038 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4009038:	defffd04 	addi	sp,sp,-12
 400903c:	dfc00215 	stw	ra,8(sp)
 4009040:	df000115 	stw	fp,4(sp)
 4009044:	df000104 	addi	fp,sp,4
 4009048:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400904c:	d1600604 	addi	r5,gp,-32744
 4009050:	e13fff17 	ldw	r4,-4(fp)
 4009054:	400ad140 	call	400ad14 <alt_dev_llist_insert>
}
 4009058:	e037883a 	mov	sp,fp
 400905c:	dfc00117 	ldw	ra,4(sp)
 4009060:	df000017 	ldw	fp,0(sp)
 4009064:	dec00204 	addi	sp,sp,8
 4009068:	f800283a 	ret

0400906c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400906c:	defffd04 	addi	sp,sp,-12
 4009070:	dfc00215 	stw	ra,8(sp)
 4009074:	df000115 	stw	fp,4(sp)
 4009078:	df000104 	addi	fp,sp,4
 400907c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 4009080:	400b5f40 	call	400b5f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4009084:	00800044 	movi	r2,1
 4009088:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400908c:	0001883a 	nop
 4009090:	e037883a 	mov	sp,fp
 4009094:	dfc00117 	ldw	ra,4(sp)
 4009098:	df000017 	ldw	fp,0(sp)
 400909c:	dec00204 	addi	sp,sp,8
 40090a0:	f800283a 	ret

040090a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40090a4:	defffe04 	addi	sp,sp,-8
 40090a8:	dfc00115 	stw	ra,4(sp)
 40090ac:	df000015 	stw	fp,0(sp)
 40090b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40090b4:	000d883a 	mov	r6,zero
 40090b8:	000b883a 	mov	r5,zero
 40090bc:	01010074 	movhi	r4,1025
 40090c0:	21329a04 	addi	r4,r4,-13720
 40090c4:	400926c0 	call	400926c <altera_avalon_jtag_uart_init>
 40090c8:	01010074 	movhi	r4,1025
 40090cc:	21329004 	addi	r4,r4,-13760
 40090d0:	40090380 	call	4009038 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 40090d4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 40090d8:	01010074 	movhi	r4,1025
 40090dc:	2136a804 	addi	r4,r4,-9568
 40090e0:	40090380 	call	4009038 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 40090e4:	01010074 	movhi	r4,1025
 40090e8:	2136b404 	addi	r4,r4,-9520
 40090ec:	40090380 	call	4009038 <alt_dev_reg>
}
 40090f0:	0001883a 	nop
 40090f4:	e037883a 	mov	sp,fp
 40090f8:	dfc00117 	ldw	ra,4(sp)
 40090fc:	df000017 	ldw	fp,0(sp)
 4009100:	dec00204 	addi	sp,sp,8
 4009104:	f800283a 	ret

04009108 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4009108:	defffa04 	addi	sp,sp,-24
 400910c:	dfc00515 	stw	ra,20(sp)
 4009110:	df000415 	stw	fp,16(sp)
 4009114:	df000404 	addi	fp,sp,16
 4009118:	e13ffd15 	stw	r4,-12(fp)
 400911c:	e17ffe15 	stw	r5,-8(fp)
 4009120:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4009124:	e0bffd17 	ldw	r2,-12(fp)
 4009128:	10800017 	ldw	r2,0(r2)
 400912c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4009130:	e0bffc17 	ldw	r2,-16(fp)
 4009134:	10c00a04 	addi	r3,r2,40
 4009138:	e0bffd17 	ldw	r2,-12(fp)
 400913c:	10800217 	ldw	r2,8(r2)
 4009140:	100f883a 	mov	r7,r2
 4009144:	e1bfff17 	ldw	r6,-4(fp)
 4009148:	e17ffe17 	ldw	r5,-8(fp)
 400914c:	1809883a 	mov	r4,r3
 4009150:	40097280 	call	4009728 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4009154:	e037883a 	mov	sp,fp
 4009158:	dfc00117 	ldw	ra,4(sp)
 400915c:	df000017 	ldw	fp,0(sp)
 4009160:	dec00204 	addi	sp,sp,8
 4009164:	f800283a 	ret

04009168 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4009168:	defffa04 	addi	sp,sp,-24
 400916c:	dfc00515 	stw	ra,20(sp)
 4009170:	df000415 	stw	fp,16(sp)
 4009174:	df000404 	addi	fp,sp,16
 4009178:	e13ffd15 	stw	r4,-12(fp)
 400917c:	e17ffe15 	stw	r5,-8(fp)
 4009180:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4009184:	e0bffd17 	ldw	r2,-12(fp)
 4009188:	10800017 	ldw	r2,0(r2)
 400918c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4009190:	e0bffc17 	ldw	r2,-16(fp)
 4009194:	10c00a04 	addi	r3,r2,40
 4009198:	e0bffd17 	ldw	r2,-12(fp)
 400919c:	10800217 	ldw	r2,8(r2)
 40091a0:	100f883a 	mov	r7,r2
 40091a4:	e1bfff17 	ldw	r6,-4(fp)
 40091a8:	e17ffe17 	ldw	r5,-8(fp)
 40091ac:	1809883a 	mov	r4,r3
 40091b0:	40099440 	call	4009944 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40091b4:	e037883a 	mov	sp,fp
 40091b8:	dfc00117 	ldw	ra,4(sp)
 40091bc:	df000017 	ldw	fp,0(sp)
 40091c0:	dec00204 	addi	sp,sp,8
 40091c4:	f800283a 	ret

040091c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40091c8:	defffc04 	addi	sp,sp,-16
 40091cc:	dfc00315 	stw	ra,12(sp)
 40091d0:	df000215 	stw	fp,8(sp)
 40091d4:	df000204 	addi	fp,sp,8
 40091d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40091dc:	e0bfff17 	ldw	r2,-4(fp)
 40091e0:	10800017 	ldw	r2,0(r2)
 40091e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40091e8:	e0bffe17 	ldw	r2,-8(fp)
 40091ec:	10c00a04 	addi	r3,r2,40
 40091f0:	e0bfff17 	ldw	r2,-4(fp)
 40091f4:	10800217 	ldw	r2,8(r2)
 40091f8:	100b883a 	mov	r5,r2
 40091fc:	1809883a 	mov	r4,r3
 4009200:	40095d00 	call	40095d0 <altera_avalon_jtag_uart_close>
}
 4009204:	e037883a 	mov	sp,fp
 4009208:	dfc00117 	ldw	ra,4(sp)
 400920c:	df000017 	ldw	fp,0(sp)
 4009210:	dec00204 	addi	sp,sp,8
 4009214:	f800283a 	ret

04009218 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4009218:	defffa04 	addi	sp,sp,-24
 400921c:	dfc00515 	stw	ra,20(sp)
 4009220:	df000415 	stw	fp,16(sp)
 4009224:	df000404 	addi	fp,sp,16
 4009228:	e13ffd15 	stw	r4,-12(fp)
 400922c:	e17ffe15 	stw	r5,-8(fp)
 4009230:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4009234:	e0bffd17 	ldw	r2,-12(fp)
 4009238:	10800017 	ldw	r2,0(r2)
 400923c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4009240:	e0bffc17 	ldw	r2,-16(fp)
 4009244:	10800a04 	addi	r2,r2,40
 4009248:	e1bfff17 	ldw	r6,-4(fp)
 400924c:	e17ffe17 	ldw	r5,-8(fp)
 4009250:	1009883a 	mov	r4,r2
 4009254:	40096380 	call	4009638 <altera_avalon_jtag_uart_ioctl>
}
 4009258:	e037883a 	mov	sp,fp
 400925c:	dfc00117 	ldw	ra,4(sp)
 4009260:	df000017 	ldw	fp,0(sp)
 4009264:	dec00204 	addi	sp,sp,8
 4009268:	f800283a 	ret

0400926c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400926c:	defffb04 	addi	sp,sp,-20
 4009270:	dfc00415 	stw	ra,16(sp)
 4009274:	df000315 	stw	fp,12(sp)
 4009278:	df000304 	addi	fp,sp,12
 400927c:	e13ffd15 	stw	r4,-12(fp)
 4009280:	e17ffe15 	stw	r5,-8(fp)
 4009284:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4009288:	e0bffd17 	ldw	r2,-12(fp)
 400928c:	00c00044 	movi	r3,1
 4009290:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4009294:	e0bffd17 	ldw	r2,-12(fp)
 4009298:	10800017 	ldw	r2,0(r2)
 400929c:	10800104 	addi	r2,r2,4
 40092a0:	1007883a 	mov	r3,r2
 40092a4:	e0bffd17 	ldw	r2,-12(fp)
 40092a8:	10800817 	ldw	r2,32(r2)
 40092ac:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 40092b0:	e0bfff17 	ldw	r2,-4(fp)
 40092b4:	01810074 	movhi	r6,1025
 40092b8:	31a4c804 	addi	r6,r6,-27872
 40092bc:	e17ffd17 	ldw	r5,-12(fp)
 40092c0:	1009883a 	mov	r4,r2
 40092c4:	400b07c0 	call	400b07c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40092c8:	e0bffd17 	ldw	r2,-12(fp)
 40092cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40092d0:	e0bffd17 	ldw	r2,-12(fp)
 40092d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40092d8:	d0e6c917 	ldw	r3,-25820(gp)
 40092dc:	e1fffd17 	ldw	r7,-12(fp)
 40092e0:	01810074 	movhi	r6,1025
 40092e4:	31a54c04 	addi	r6,r6,-27344
 40092e8:	180b883a 	mov	r5,r3
 40092ec:	1009883a 	mov	r4,r2
 40092f0:	400aa0c0 	call	400aa0c <alt_alarm_start>
 40092f4:	1000040e 	bge	r2,zero,4009308 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40092f8:	e0fffd17 	ldw	r3,-12(fp)
 40092fc:	00a00034 	movhi	r2,32768
 4009300:	10bfffc4 	addi	r2,r2,-1
 4009304:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4009308:	0001883a 	nop
 400930c:	e037883a 	mov	sp,fp
 4009310:	dfc00117 	ldw	ra,4(sp)
 4009314:	df000017 	ldw	fp,0(sp)
 4009318:	dec00204 	addi	sp,sp,8
 400931c:	f800283a 	ret

04009320 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4009320:	defff704 	addi	sp,sp,-36
 4009324:	df000815 	stw	fp,32(sp)
 4009328:	df000804 	addi	fp,sp,32
 400932c:	e13ffe15 	stw	r4,-8(fp)
 4009330:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4009334:	e0bffe17 	ldw	r2,-8(fp)
 4009338:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 400933c:	e0bffa17 	ldw	r2,-24(fp)
 4009340:	10800017 	ldw	r2,0(r2)
 4009344:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4009348:	e0bffb17 	ldw	r2,-20(fp)
 400934c:	10800104 	addi	r2,r2,4
 4009350:	10800037 	ldwio	r2,0(r2)
 4009354:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4009358:	e0bffc17 	ldw	r2,-16(fp)
 400935c:	1080c00c 	andi	r2,r2,768
 4009360:	10006d26 	beq	r2,zero,4009518 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4009364:	e0bffc17 	ldw	r2,-16(fp)
 4009368:	1080400c 	andi	r2,r2,256
 400936c:	10003526 	beq	r2,zero,4009444 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4009370:	00800074 	movhi	r2,1
 4009374:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4009378:	e0bffa17 	ldw	r2,-24(fp)
 400937c:	10800a17 	ldw	r2,40(r2)
 4009380:	10800044 	addi	r2,r2,1
 4009384:	1081ffcc 	andi	r2,r2,2047
 4009388:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 400938c:	e0bffa17 	ldw	r2,-24(fp)
 4009390:	10c00b17 	ldw	r3,44(r2)
 4009394:	e0bffd17 	ldw	r2,-12(fp)
 4009398:	18801526 	beq	r3,r2,40093f0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400939c:	e0bffb17 	ldw	r2,-20(fp)
 40093a0:	10800037 	ldwio	r2,0(r2)
 40093a4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40093a8:	e0bff817 	ldw	r2,-32(fp)
 40093ac:	10a0000c 	andi	r2,r2,32768
 40093b0:	10001126 	beq	r2,zero,40093f8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40093b4:	e0bffa17 	ldw	r2,-24(fp)
 40093b8:	10800a17 	ldw	r2,40(r2)
 40093bc:	e0fff817 	ldw	r3,-32(fp)
 40093c0:	1809883a 	mov	r4,r3
 40093c4:	e0fffa17 	ldw	r3,-24(fp)
 40093c8:	1885883a 	add	r2,r3,r2
 40093cc:	10800e04 	addi	r2,r2,56
 40093d0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40093d4:	e0bffa17 	ldw	r2,-24(fp)
 40093d8:	10800a17 	ldw	r2,40(r2)
 40093dc:	10800044 	addi	r2,r2,1
 40093e0:	10c1ffcc 	andi	r3,r2,2047
 40093e4:	e0bffa17 	ldw	r2,-24(fp)
 40093e8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40093ec:	003fe206 	br	4009378 <__ram_exceptions_end+0xfbfe9130>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40093f0:	0001883a 	nop
 40093f4:	00000106 	br	40093fc <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40093f8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40093fc:	e0bff817 	ldw	r2,-32(fp)
 4009400:	10bfffec 	andhi	r2,r2,65535
 4009404:	10000f26 	beq	r2,zero,4009444 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4009408:	e0bffa17 	ldw	r2,-24(fp)
 400940c:	10c00817 	ldw	r3,32(r2)
 4009410:	00bfff84 	movi	r2,-2
 4009414:	1886703a 	and	r3,r3,r2
 4009418:	e0bffa17 	ldw	r2,-24(fp)
 400941c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4009420:	e0bffb17 	ldw	r2,-20(fp)
 4009424:	10800104 	addi	r2,r2,4
 4009428:	1007883a 	mov	r3,r2
 400942c:	e0bffa17 	ldw	r2,-24(fp)
 4009430:	10800817 	ldw	r2,32(r2)
 4009434:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4009438:	e0bffb17 	ldw	r2,-20(fp)
 400943c:	10800104 	addi	r2,r2,4
 4009440:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4009444:	e0bffc17 	ldw	r2,-16(fp)
 4009448:	1080800c 	andi	r2,r2,512
 400944c:	103fbe26 	beq	r2,zero,4009348 <__ram_exceptions_end+0xfbfe9100>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4009450:	e0bffc17 	ldw	r2,-16(fp)
 4009454:	1004d43a 	srli	r2,r2,16
 4009458:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400945c:	00001406 	br	40094b0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4009460:	e0bffb17 	ldw	r2,-20(fp)
 4009464:	e0fffa17 	ldw	r3,-24(fp)
 4009468:	18c00d17 	ldw	r3,52(r3)
 400946c:	e13ffa17 	ldw	r4,-24(fp)
 4009470:	20c7883a 	add	r3,r4,r3
 4009474:	18c20e04 	addi	r3,r3,2104
 4009478:	18c00003 	ldbu	r3,0(r3)
 400947c:	18c03fcc 	andi	r3,r3,255
 4009480:	18c0201c 	xori	r3,r3,128
 4009484:	18ffe004 	addi	r3,r3,-128
 4009488:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400948c:	e0bffa17 	ldw	r2,-24(fp)
 4009490:	10800d17 	ldw	r2,52(r2)
 4009494:	10800044 	addi	r2,r2,1
 4009498:	10c1ffcc 	andi	r3,r2,2047
 400949c:	e0bffa17 	ldw	r2,-24(fp)
 40094a0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40094a4:	e0bff917 	ldw	r2,-28(fp)
 40094a8:	10bfffc4 	addi	r2,r2,-1
 40094ac:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40094b0:	e0bff917 	ldw	r2,-28(fp)
 40094b4:	10000526 	beq	r2,zero,40094cc <altera_avalon_jtag_uart_irq+0x1ac>
 40094b8:	e0bffa17 	ldw	r2,-24(fp)
 40094bc:	10c00d17 	ldw	r3,52(r2)
 40094c0:	e0bffa17 	ldw	r2,-24(fp)
 40094c4:	10800c17 	ldw	r2,48(r2)
 40094c8:	18bfe51e 	bne	r3,r2,4009460 <__ram_exceptions_end+0xfbfe9218>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40094cc:	e0bff917 	ldw	r2,-28(fp)
 40094d0:	103f9d26 	beq	r2,zero,4009348 <__ram_exceptions_end+0xfbfe9100>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40094d4:	e0bffa17 	ldw	r2,-24(fp)
 40094d8:	10c00817 	ldw	r3,32(r2)
 40094dc:	00bfff44 	movi	r2,-3
 40094e0:	1886703a 	and	r3,r3,r2
 40094e4:	e0bffa17 	ldw	r2,-24(fp)
 40094e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40094ec:	e0bffa17 	ldw	r2,-24(fp)
 40094f0:	10800017 	ldw	r2,0(r2)
 40094f4:	10800104 	addi	r2,r2,4
 40094f8:	1007883a 	mov	r3,r2
 40094fc:	e0bffa17 	ldw	r2,-24(fp)
 4009500:	10800817 	ldw	r2,32(r2)
 4009504:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4009508:	e0bffb17 	ldw	r2,-20(fp)
 400950c:	10800104 	addi	r2,r2,4
 4009510:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4009514:	003f8c06 	br	4009348 <__ram_exceptions_end+0xfbfe9100>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4009518:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400951c:	0001883a 	nop
 4009520:	e037883a 	mov	sp,fp
 4009524:	df000017 	ldw	fp,0(sp)
 4009528:	dec00104 	addi	sp,sp,4
 400952c:	f800283a 	ret

04009530 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4009530:	defff804 	addi	sp,sp,-32
 4009534:	df000715 	stw	fp,28(sp)
 4009538:	df000704 	addi	fp,sp,28
 400953c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4009540:	e0bffb17 	ldw	r2,-20(fp)
 4009544:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4009548:	e0bff917 	ldw	r2,-28(fp)
 400954c:	10800017 	ldw	r2,0(r2)
 4009550:	10800104 	addi	r2,r2,4
 4009554:	10800037 	ldwio	r2,0(r2)
 4009558:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400955c:	e0bffa17 	ldw	r2,-24(fp)
 4009560:	1081000c 	andi	r2,r2,1024
 4009564:	10000b26 	beq	r2,zero,4009594 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4009568:	e0bff917 	ldw	r2,-28(fp)
 400956c:	10800017 	ldw	r2,0(r2)
 4009570:	10800104 	addi	r2,r2,4
 4009574:	1007883a 	mov	r3,r2
 4009578:	e0bff917 	ldw	r2,-28(fp)
 400957c:	10800817 	ldw	r2,32(r2)
 4009580:	10810014 	ori	r2,r2,1024
 4009584:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4009588:	e0bff917 	ldw	r2,-28(fp)
 400958c:	10000915 	stw	zero,36(r2)
 4009590:	00000a06 	br	40095bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4009594:	e0bff917 	ldw	r2,-28(fp)
 4009598:	10c00917 	ldw	r3,36(r2)
 400959c:	00a00034 	movhi	r2,32768
 40095a0:	10bfff04 	addi	r2,r2,-4
 40095a4:	10c00536 	bltu	r2,r3,40095bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40095a8:	e0bff917 	ldw	r2,-28(fp)
 40095ac:	10800917 	ldw	r2,36(r2)
 40095b0:	10c00044 	addi	r3,r2,1
 40095b4:	e0bff917 	ldw	r2,-28(fp)
 40095b8:	10c00915 	stw	r3,36(r2)
 40095bc:	d0a6c917 	ldw	r2,-25820(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40095c0:	e037883a 	mov	sp,fp
 40095c4:	df000017 	ldw	fp,0(sp)
 40095c8:	dec00104 	addi	sp,sp,4
 40095cc:	f800283a 	ret

040095d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40095d0:	defffd04 	addi	sp,sp,-12
 40095d4:	df000215 	stw	fp,8(sp)
 40095d8:	df000204 	addi	fp,sp,8
 40095dc:	e13ffe15 	stw	r4,-8(fp)
 40095e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40095e4:	00000506 	br	40095fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40095e8:	e0bfff17 	ldw	r2,-4(fp)
 40095ec:	1090000c 	andi	r2,r2,16384
 40095f0:	10000226 	beq	r2,zero,40095fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40095f4:	00bffd44 	movi	r2,-11
 40095f8:	00000b06 	br	4009628 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40095fc:	e0bffe17 	ldw	r2,-8(fp)
 4009600:	10c00d17 	ldw	r3,52(r2)
 4009604:	e0bffe17 	ldw	r2,-8(fp)
 4009608:	10800c17 	ldw	r2,48(r2)
 400960c:	18800526 	beq	r3,r2,4009624 <altera_avalon_jtag_uart_close+0x54>
 4009610:	e0bffe17 	ldw	r2,-8(fp)
 4009614:	10c00917 	ldw	r3,36(r2)
 4009618:	e0bffe17 	ldw	r2,-8(fp)
 400961c:	10800117 	ldw	r2,4(r2)
 4009620:	18bff136 	bltu	r3,r2,40095e8 <__ram_exceptions_end+0xfbfe93a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4009624:	0005883a 	mov	r2,zero
}
 4009628:	e037883a 	mov	sp,fp
 400962c:	df000017 	ldw	fp,0(sp)
 4009630:	dec00104 	addi	sp,sp,4
 4009634:	f800283a 	ret

04009638 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4009638:	defffa04 	addi	sp,sp,-24
 400963c:	df000515 	stw	fp,20(sp)
 4009640:	df000504 	addi	fp,sp,20
 4009644:	e13ffd15 	stw	r4,-12(fp)
 4009648:	e17ffe15 	stw	r5,-8(fp)
 400964c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4009650:	00bff9c4 	movi	r2,-25
 4009654:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4009658:	e0bffe17 	ldw	r2,-8(fp)
 400965c:	10da8060 	cmpeqi	r3,r2,27137
 4009660:	1800031e 	bne	r3,zero,4009670 <altera_avalon_jtag_uart_ioctl+0x38>
 4009664:	109a80a0 	cmpeqi	r2,r2,27138
 4009668:	1000181e 	bne	r2,zero,40096cc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400966c:	00002906 	br	4009714 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4009670:	e0bffd17 	ldw	r2,-12(fp)
 4009674:	10c00117 	ldw	r3,4(r2)
 4009678:	00a00034 	movhi	r2,32768
 400967c:	10bfffc4 	addi	r2,r2,-1
 4009680:	18802126 	beq	r3,r2,4009708 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4009684:	e0bfff17 	ldw	r2,-4(fp)
 4009688:	10800017 	ldw	r2,0(r2)
 400968c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4009690:	e0bffc17 	ldw	r2,-16(fp)
 4009694:	10800090 	cmplti	r2,r2,2
 4009698:	1000061e 	bne	r2,zero,40096b4 <altera_avalon_jtag_uart_ioctl+0x7c>
 400969c:	e0fffc17 	ldw	r3,-16(fp)
 40096a0:	00a00034 	movhi	r2,32768
 40096a4:	10bfffc4 	addi	r2,r2,-1
 40096a8:	18800226 	beq	r3,r2,40096b4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40096ac:	e0bffc17 	ldw	r2,-16(fp)
 40096b0:	00000206 	br	40096bc <altera_avalon_jtag_uart_ioctl+0x84>
 40096b4:	00a00034 	movhi	r2,32768
 40096b8:	10bfff84 	addi	r2,r2,-2
 40096bc:	e0fffd17 	ldw	r3,-12(fp)
 40096c0:	18800115 	stw	r2,4(r3)
      rc = 0;
 40096c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40096c8:	00000f06 	br	4009708 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40096cc:	e0bffd17 	ldw	r2,-12(fp)
 40096d0:	10c00117 	ldw	r3,4(r2)
 40096d4:	00a00034 	movhi	r2,32768
 40096d8:	10bfffc4 	addi	r2,r2,-1
 40096dc:	18800c26 	beq	r3,r2,4009710 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40096e0:	e0bffd17 	ldw	r2,-12(fp)
 40096e4:	10c00917 	ldw	r3,36(r2)
 40096e8:	e0bffd17 	ldw	r2,-12(fp)
 40096ec:	10800117 	ldw	r2,4(r2)
 40096f0:	1885803a 	cmpltu	r2,r3,r2
 40096f4:	10c03fcc 	andi	r3,r2,255
 40096f8:	e0bfff17 	ldw	r2,-4(fp)
 40096fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4009700:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4009704:	00000206 	br	4009710 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4009708:	0001883a 	nop
 400970c:	00000106 	br	4009714 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4009710:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4009714:	e0bffb17 	ldw	r2,-20(fp)
}
 4009718:	e037883a 	mov	sp,fp
 400971c:	df000017 	ldw	fp,0(sp)
 4009720:	dec00104 	addi	sp,sp,4
 4009724:	f800283a 	ret

04009728 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4009728:	defff304 	addi	sp,sp,-52
 400972c:	dfc00c15 	stw	ra,48(sp)
 4009730:	df000b15 	stw	fp,44(sp)
 4009734:	df000b04 	addi	fp,sp,44
 4009738:	e13ffc15 	stw	r4,-16(fp)
 400973c:	e17ffd15 	stw	r5,-12(fp)
 4009740:	e1bffe15 	stw	r6,-8(fp)
 4009744:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4009748:	e0bffd17 	ldw	r2,-12(fp)
 400974c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4009750:	00004706 	br	4009870 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4009754:	e0bffc17 	ldw	r2,-16(fp)
 4009758:	10800a17 	ldw	r2,40(r2)
 400975c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4009760:	e0bffc17 	ldw	r2,-16(fp)
 4009764:	10800b17 	ldw	r2,44(r2)
 4009768:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400976c:	e0fff717 	ldw	r3,-36(fp)
 4009770:	e0bff817 	ldw	r2,-32(fp)
 4009774:	18800536 	bltu	r3,r2,400978c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4009778:	e0fff717 	ldw	r3,-36(fp)
 400977c:	e0bff817 	ldw	r2,-32(fp)
 4009780:	1885c83a 	sub	r2,r3,r2
 4009784:	e0bff615 	stw	r2,-40(fp)
 4009788:	00000406 	br	400979c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400978c:	00c20004 	movi	r3,2048
 4009790:	e0bff817 	ldw	r2,-32(fp)
 4009794:	1885c83a 	sub	r2,r3,r2
 4009798:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400979c:	e0bff617 	ldw	r2,-40(fp)
 40097a0:	10001e26 	beq	r2,zero,400981c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40097a4:	e0fffe17 	ldw	r3,-8(fp)
 40097a8:	e0bff617 	ldw	r2,-40(fp)
 40097ac:	1880022e 	bgeu	r3,r2,40097b8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40097b0:	e0bffe17 	ldw	r2,-8(fp)
 40097b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40097b8:	e0bffc17 	ldw	r2,-16(fp)
 40097bc:	10c00e04 	addi	r3,r2,56
 40097c0:	e0bff817 	ldw	r2,-32(fp)
 40097c4:	1885883a 	add	r2,r3,r2
 40097c8:	e1bff617 	ldw	r6,-40(fp)
 40097cc:	100b883a 	mov	r5,r2
 40097d0:	e13ff517 	ldw	r4,-44(fp)
 40097d4:	4006ef00 	call	4006ef0 <memcpy>
      ptr   += n;
 40097d8:	e0fff517 	ldw	r3,-44(fp)
 40097dc:	e0bff617 	ldw	r2,-40(fp)
 40097e0:	1885883a 	add	r2,r3,r2
 40097e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40097e8:	e0fffe17 	ldw	r3,-8(fp)
 40097ec:	e0bff617 	ldw	r2,-40(fp)
 40097f0:	1885c83a 	sub	r2,r3,r2
 40097f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40097f8:	e0fff817 	ldw	r3,-32(fp)
 40097fc:	e0bff617 	ldw	r2,-40(fp)
 4009800:	1885883a 	add	r2,r3,r2
 4009804:	10c1ffcc 	andi	r3,r2,2047
 4009808:	e0bffc17 	ldw	r2,-16(fp)
 400980c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4009810:	e0bffe17 	ldw	r2,-8(fp)
 4009814:	00bfcf16 	blt	zero,r2,4009754 <__ram_exceptions_end+0xfbfe950c>
 4009818:	00000106 	br	4009820 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400981c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4009820:	e0fff517 	ldw	r3,-44(fp)
 4009824:	e0bffd17 	ldw	r2,-12(fp)
 4009828:	1880141e 	bne	r3,r2,400987c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400982c:	e0bfff17 	ldw	r2,-4(fp)
 4009830:	1090000c 	andi	r2,r2,16384
 4009834:	1000131e 	bne	r2,zero,4009884 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4009838:	0001883a 	nop
 400983c:	e0bffc17 	ldw	r2,-16(fp)
 4009840:	10c00a17 	ldw	r3,40(r2)
 4009844:	e0bff717 	ldw	r2,-36(fp)
 4009848:	1880051e 	bne	r3,r2,4009860 <altera_avalon_jtag_uart_read+0x138>
 400984c:	e0bffc17 	ldw	r2,-16(fp)
 4009850:	10c00917 	ldw	r3,36(r2)
 4009854:	e0bffc17 	ldw	r2,-16(fp)
 4009858:	10800117 	ldw	r2,4(r2)
 400985c:	18bff736 	bltu	r3,r2,400983c <__ram_exceptions_end+0xfbfe95f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4009860:	e0bffc17 	ldw	r2,-16(fp)
 4009864:	10c00a17 	ldw	r3,40(r2)
 4009868:	e0bff717 	ldw	r2,-36(fp)
 400986c:	18800726 	beq	r3,r2,400988c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4009870:	e0bffe17 	ldw	r2,-8(fp)
 4009874:	00bfb716 	blt	zero,r2,4009754 <__ram_exceptions_end+0xfbfe950c>
 4009878:	00000506 	br	4009890 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400987c:	0001883a 	nop
 4009880:	00000306 	br	4009890 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4009884:	0001883a 	nop
 4009888:	00000106 	br	4009890 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400988c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4009890:	e0fff517 	ldw	r3,-44(fp)
 4009894:	e0bffd17 	ldw	r2,-12(fp)
 4009898:	18801826 	beq	r3,r2,40098fc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400989c:	0005303a 	rdctl	r2,status
 40098a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40098a4:	e0fffb17 	ldw	r3,-20(fp)
 40098a8:	00bfff84 	movi	r2,-2
 40098ac:	1884703a 	and	r2,r3,r2
 40098b0:	1001703a 	wrctl	status,r2
  
  return context;
 40098b4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40098b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40098bc:	e0bffc17 	ldw	r2,-16(fp)
 40098c0:	10800817 	ldw	r2,32(r2)
 40098c4:	10c00054 	ori	r3,r2,1
 40098c8:	e0bffc17 	ldw	r2,-16(fp)
 40098cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40098d0:	e0bffc17 	ldw	r2,-16(fp)
 40098d4:	10800017 	ldw	r2,0(r2)
 40098d8:	10800104 	addi	r2,r2,4
 40098dc:	1007883a 	mov	r3,r2
 40098e0:	e0bffc17 	ldw	r2,-16(fp)
 40098e4:	10800817 	ldw	r2,32(r2)
 40098e8:	18800035 	stwio	r2,0(r3)
 40098ec:	e0bffa17 	ldw	r2,-24(fp)
 40098f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40098f4:	e0bff917 	ldw	r2,-28(fp)
 40098f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40098fc:	e0fff517 	ldw	r3,-44(fp)
 4009900:	e0bffd17 	ldw	r2,-12(fp)
 4009904:	18800426 	beq	r3,r2,4009918 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4009908:	e0fff517 	ldw	r3,-44(fp)
 400990c:	e0bffd17 	ldw	r2,-12(fp)
 4009910:	1885c83a 	sub	r2,r3,r2
 4009914:	00000606 	br	4009930 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4009918:	e0bfff17 	ldw	r2,-4(fp)
 400991c:	1090000c 	andi	r2,r2,16384
 4009920:	10000226 	beq	r2,zero,400992c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4009924:	00bffd44 	movi	r2,-11
 4009928:	00000106 	br	4009930 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400992c:	00bffec4 	movi	r2,-5
}
 4009930:	e037883a 	mov	sp,fp
 4009934:	dfc00117 	ldw	ra,4(sp)
 4009938:	df000017 	ldw	fp,0(sp)
 400993c:	dec00204 	addi	sp,sp,8
 4009940:	f800283a 	ret

04009944 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4009944:	defff304 	addi	sp,sp,-52
 4009948:	dfc00c15 	stw	ra,48(sp)
 400994c:	df000b15 	stw	fp,44(sp)
 4009950:	df000b04 	addi	fp,sp,44
 4009954:	e13ffc15 	stw	r4,-16(fp)
 4009958:	e17ffd15 	stw	r5,-12(fp)
 400995c:	e1bffe15 	stw	r6,-8(fp)
 4009960:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4009964:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4009968:	e0bffd17 	ldw	r2,-12(fp)
 400996c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4009970:	00003706 	br	4009a50 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4009974:	e0bffc17 	ldw	r2,-16(fp)
 4009978:	10800c17 	ldw	r2,48(r2)
 400997c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4009980:	e0bffc17 	ldw	r2,-16(fp)
 4009984:	10800d17 	ldw	r2,52(r2)
 4009988:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400998c:	e0fff917 	ldw	r3,-28(fp)
 4009990:	e0bff517 	ldw	r2,-44(fp)
 4009994:	1880062e 	bgeu	r3,r2,40099b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4009998:	e0fff517 	ldw	r3,-44(fp)
 400999c:	e0bff917 	ldw	r2,-28(fp)
 40099a0:	1885c83a 	sub	r2,r3,r2
 40099a4:	10bfffc4 	addi	r2,r2,-1
 40099a8:	e0bff615 	stw	r2,-40(fp)
 40099ac:	00000b06 	br	40099dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40099b0:	e0bff517 	ldw	r2,-44(fp)
 40099b4:	10000526 	beq	r2,zero,40099cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40099b8:	00c20004 	movi	r3,2048
 40099bc:	e0bff917 	ldw	r2,-28(fp)
 40099c0:	1885c83a 	sub	r2,r3,r2
 40099c4:	e0bff615 	stw	r2,-40(fp)
 40099c8:	00000406 	br	40099dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40099cc:	00c1ffc4 	movi	r3,2047
 40099d0:	e0bff917 	ldw	r2,-28(fp)
 40099d4:	1885c83a 	sub	r2,r3,r2
 40099d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40099dc:	e0bff617 	ldw	r2,-40(fp)
 40099e0:	10001e26 	beq	r2,zero,4009a5c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40099e4:	e0fffe17 	ldw	r3,-8(fp)
 40099e8:	e0bff617 	ldw	r2,-40(fp)
 40099ec:	1880022e 	bgeu	r3,r2,40099f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40099f0:	e0bffe17 	ldw	r2,-8(fp)
 40099f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40099f8:	e0bffc17 	ldw	r2,-16(fp)
 40099fc:	10c20e04 	addi	r3,r2,2104
 4009a00:	e0bff917 	ldw	r2,-28(fp)
 4009a04:	1885883a 	add	r2,r3,r2
 4009a08:	e1bff617 	ldw	r6,-40(fp)
 4009a0c:	e17ffd17 	ldw	r5,-12(fp)
 4009a10:	1009883a 	mov	r4,r2
 4009a14:	4006ef00 	call	4006ef0 <memcpy>
      ptr   += n;
 4009a18:	e0fffd17 	ldw	r3,-12(fp)
 4009a1c:	e0bff617 	ldw	r2,-40(fp)
 4009a20:	1885883a 	add	r2,r3,r2
 4009a24:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4009a28:	e0fffe17 	ldw	r3,-8(fp)
 4009a2c:	e0bff617 	ldw	r2,-40(fp)
 4009a30:	1885c83a 	sub	r2,r3,r2
 4009a34:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4009a38:	e0fff917 	ldw	r3,-28(fp)
 4009a3c:	e0bff617 	ldw	r2,-40(fp)
 4009a40:	1885883a 	add	r2,r3,r2
 4009a44:	10c1ffcc 	andi	r3,r2,2047
 4009a48:	e0bffc17 	ldw	r2,-16(fp)
 4009a4c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4009a50:	e0bffe17 	ldw	r2,-8(fp)
 4009a54:	00bfc716 	blt	zero,r2,4009974 <__ram_exceptions_end+0xfbfe972c>
 4009a58:	00000106 	br	4009a60 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4009a5c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009a60:	0005303a 	rdctl	r2,status
 4009a64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4009a68:	e0fffb17 	ldw	r3,-20(fp)
 4009a6c:	00bfff84 	movi	r2,-2
 4009a70:	1884703a 	and	r2,r3,r2
 4009a74:	1001703a 	wrctl	status,r2
  
  return context;
 4009a78:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4009a7c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4009a80:	e0bffc17 	ldw	r2,-16(fp)
 4009a84:	10800817 	ldw	r2,32(r2)
 4009a88:	10c00094 	ori	r3,r2,2
 4009a8c:	e0bffc17 	ldw	r2,-16(fp)
 4009a90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4009a94:	e0bffc17 	ldw	r2,-16(fp)
 4009a98:	10800017 	ldw	r2,0(r2)
 4009a9c:	10800104 	addi	r2,r2,4
 4009aa0:	1007883a 	mov	r3,r2
 4009aa4:	e0bffc17 	ldw	r2,-16(fp)
 4009aa8:	10800817 	ldw	r2,32(r2)
 4009aac:	18800035 	stwio	r2,0(r3)
 4009ab0:	e0bffa17 	ldw	r2,-24(fp)
 4009ab4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009ab8:	e0bff817 	ldw	r2,-32(fp)
 4009abc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4009ac0:	e0bffe17 	ldw	r2,-8(fp)
 4009ac4:	0080100e 	bge	zero,r2,4009b08 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4009ac8:	e0bfff17 	ldw	r2,-4(fp)
 4009acc:	1090000c 	andi	r2,r2,16384
 4009ad0:	1000101e 	bne	r2,zero,4009b14 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4009ad4:	0001883a 	nop
 4009ad8:	e0bffc17 	ldw	r2,-16(fp)
 4009adc:	10c00d17 	ldw	r3,52(r2)
 4009ae0:	e0bff517 	ldw	r2,-44(fp)
 4009ae4:	1880051e 	bne	r3,r2,4009afc <altera_avalon_jtag_uart_write+0x1b8>
 4009ae8:	e0bffc17 	ldw	r2,-16(fp)
 4009aec:	10c00917 	ldw	r3,36(r2)
 4009af0:	e0bffc17 	ldw	r2,-16(fp)
 4009af4:	10800117 	ldw	r2,4(r2)
 4009af8:	18bff736 	bltu	r3,r2,4009ad8 <__ram_exceptions_end+0xfbfe9890>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4009afc:	e0bffc17 	ldw	r2,-16(fp)
 4009b00:	10800917 	ldw	r2,36(r2)
 4009b04:	1000051e 	bne	r2,zero,4009b1c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4009b08:	e0bffe17 	ldw	r2,-8(fp)
 4009b0c:	00bfd016 	blt	zero,r2,4009a50 <__ram_exceptions_end+0xfbfe9808>
 4009b10:	00000306 	br	4009b20 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4009b14:	0001883a 	nop
 4009b18:	00000106 	br	4009b20 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4009b1c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4009b20:	e0fffd17 	ldw	r3,-12(fp)
 4009b24:	e0bff717 	ldw	r2,-36(fp)
 4009b28:	18800426 	beq	r3,r2,4009b3c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4009b2c:	e0fffd17 	ldw	r3,-12(fp)
 4009b30:	e0bff717 	ldw	r2,-36(fp)
 4009b34:	1885c83a 	sub	r2,r3,r2
 4009b38:	00000606 	br	4009b54 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4009b3c:	e0bfff17 	ldw	r2,-4(fp)
 4009b40:	1090000c 	andi	r2,r2,16384
 4009b44:	10000226 	beq	r2,zero,4009b50 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4009b48:	00bffd44 	movi	r2,-11
 4009b4c:	00000106 	br	4009b54 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4009b50:	00bffec4 	movi	r2,-5
}
 4009b54:	e037883a 	mov	sp,fp
 4009b58:	dfc00117 	ldw	ra,4(sp)
 4009b5c:	df000017 	ldw	fp,0(sp)
 4009b60:	dec00204 	addi	sp,sp,8
 4009b64:	f800283a 	ret

04009b68 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 4009b68:	defffc04 	addi	sp,sp,-16
 4009b6c:	dfc00315 	stw	ra,12(sp)
 4009b70:	df000215 	stw	fp,8(sp)
 4009b74:	df000204 	addi	fp,sp,8
 4009b78:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 4009b7c:	d1600604 	addi	r5,gp,-32744
 4009b80:	e13fff17 	ldw	r4,-4(fp)
 4009b84:	400ae780 	call	400ae78 <alt_find_dev>
 4009b88:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 4009b8c:	e0bffe17 	ldw	r2,-8(fp)
}
 4009b90:	e037883a 	mov	sp,fp
 4009b94:	dfc00117 	ldw	ra,4(sp)
 4009b98:	df000017 	ldw	fp,0(sp)
 4009b9c:	dec00204 	addi	sp,sp,8
 4009ba0:	f800283a 	ret

04009ba4 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 4009ba4:	defffd04 	addi	sp,sp,-12
 4009ba8:	df000215 	stw	fp,8(sp)
 4009bac:	df000204 	addi	fp,sp,8
 4009bb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4009bb4:	e0bfff17 	ldw	r2,-4(fp)
 4009bb8:	10800a17 	ldw	r2,40(r2)
 4009bbc:	10800037 	ldwio	r2,0(r2)
 4009bc0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 4009bc4:	e0bffe17 	ldw	r2,-8(fp)
 4009bc8:	10800054 	ori	r2,r2,1
 4009bcc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4009bd0:	e0bfff17 	ldw	r2,-4(fp)
 4009bd4:	10800a17 	ldw	r2,40(r2)
 4009bd8:	1007883a 	mov	r3,r2
 4009bdc:	e0bffe17 	ldw	r2,-8(fp)
 4009be0:	18800035 	stwio	r2,0(r3)
}
 4009be4:	0001883a 	nop
 4009be8:	e037883a 	mov	sp,fp
 4009bec:	df000017 	ldw	fp,0(sp)
 4009bf0:	dec00104 	addi	sp,sp,4
 4009bf4:	f800283a 	ret

04009bf8 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 4009bf8:	defffd04 	addi	sp,sp,-12
 4009bfc:	df000215 	stw	fp,8(sp)
 4009c00:	df000204 	addi	fp,sp,8
 4009c04:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4009c08:	e0bfff17 	ldw	r2,-4(fp)
 4009c0c:	10800a17 	ldw	r2,40(r2)
 4009c10:	10800037 	ldwio	r2,0(r2)
 4009c14:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 4009c18:	e0fffe17 	ldw	r3,-8(fp)
 4009c1c:	00bfff84 	movi	r2,-2
 4009c20:	1884703a 	and	r2,r3,r2
 4009c24:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4009c28:	e0bfff17 	ldw	r2,-4(fp)
 4009c2c:	10800a17 	ldw	r2,40(r2)
 4009c30:	1007883a 	mov	r3,r2
 4009c34:	e0bffe17 	ldw	r2,-8(fp)
 4009c38:	18800035 	stwio	r2,0(r3)
}
 4009c3c:	0001883a 	nop
 4009c40:	e037883a 	mov	sp,fp
 4009c44:	df000017 	ldw	fp,0(sp)
 4009c48:	dec00104 	addi	sp,sp,4
 4009c4c:	f800283a 	ret

04009c50 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 4009c50:	defffd04 	addi	sp,sp,-12
 4009c54:	df000215 	stw	fp,8(sp)
 4009c58:	df000204 	addi	fp,sp,8
 4009c5c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4009c60:	e0bfff17 	ldw	r2,-4(fp)
 4009c64:	10800a17 	ldw	r2,40(r2)
 4009c68:	10800037 	ldwio	r2,0(r2)
 4009c6c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 4009c70:	e0bffe17 	ldw	r2,-8(fp)
 4009c74:	10800094 	ori	r2,r2,2
 4009c78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4009c7c:	e0bfff17 	ldw	r2,-4(fp)
 4009c80:	10800a17 	ldw	r2,40(r2)
 4009c84:	1007883a 	mov	r3,r2
 4009c88:	e0bffe17 	ldw	r2,-8(fp)
 4009c8c:	18800035 	stwio	r2,0(r3)
}
 4009c90:	0001883a 	nop
 4009c94:	e037883a 	mov	sp,fp
 4009c98:	df000017 	ldw	fp,0(sp)
 4009c9c:	dec00104 	addi	sp,sp,4
 4009ca0:	f800283a 	ret

04009ca4 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 4009ca4:	defffd04 	addi	sp,sp,-12
 4009ca8:	df000215 	stw	fp,8(sp)
 4009cac:	df000204 	addi	fp,sp,8
 4009cb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4009cb4:	e0bfff17 	ldw	r2,-4(fp)
 4009cb8:	10800a17 	ldw	r2,40(r2)
 4009cbc:	10800037 	ldwio	r2,0(r2)
 4009cc0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 4009cc4:	e0fffe17 	ldw	r3,-8(fp)
 4009cc8:	00bfff44 	movi	r2,-3
 4009ccc:	1884703a 	and	r2,r3,r2
 4009cd0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4009cd4:	e0bfff17 	ldw	r2,-4(fp)
 4009cd8:	10800a17 	ldw	r2,40(r2)
 4009cdc:	1007883a 	mov	r3,r2
 4009ce0:	e0bffe17 	ldw	r2,-8(fp)
 4009ce4:	18800035 	stwio	r2,0(r3)
}
 4009ce8:	0001883a 	nop
 4009cec:	e037883a 	mov	sp,fp
 4009cf0:	df000017 	ldw	fp,0(sp)
 4009cf4:	dec00104 	addi	sp,sp,4
 4009cf8:	f800283a 	ret

04009cfc <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 4009cfc:	defffd04 	addi	sp,sp,-12
 4009d00:	df000215 	stw	fp,8(sp)
 4009d04:	df000204 	addi	fp,sp,8
 4009d08:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4009d0c:	e0bfff17 	ldw	r2,-4(fp)
 4009d10:	10800a17 	ldw	r2,40(r2)
 4009d14:	10800037 	ldwio	r2,0(r2)
 4009d18:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 4009d1c:	e0bffe17 	ldw	r2,-8(fp)
 4009d20:	1080400c 	andi	r2,r2,256
 4009d24:	1004c03a 	cmpne	r2,r2,zero
 4009d28:	10803fcc 	andi	r2,r2,255
}
 4009d2c:	e037883a 	mov	sp,fp
 4009d30:	df000017 	ldw	fp,0(sp)
 4009d34:	dec00104 	addi	sp,sp,4
 4009d38:	f800283a 	ret

04009d3c <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 4009d3c:	defffd04 	addi	sp,sp,-12
 4009d40:	df000215 	stw	fp,8(sp)
 4009d44:	df000204 	addi	fp,sp,8
 4009d48:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4009d4c:	e0bfff17 	ldw	r2,-4(fp)
 4009d50:	10800a17 	ldw	r2,40(r2)
 4009d54:	10800037 	ldwio	r2,0(r2)
 4009d58:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 4009d5c:	e0bffe17 	ldw	r2,-8(fp)
 4009d60:	1080800c 	andi	r2,r2,512
 4009d64:	1004c03a 	cmpne	r2,r2,zero
 4009d68:	10803fcc 	andi	r2,r2,255
}
 4009d6c:	e037883a 	mov	sp,fp
 4009d70:	df000017 	ldw	fp,0(sp)
 4009d74:	dec00104 	addi	sp,sp,4
 4009d78:	f800283a 	ret

04009d7c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 4009d7c:	defffd04 	addi	sp,sp,-12
 4009d80:	df000215 	stw	fp,8(sp)
 4009d84:	df000204 	addi	fp,sp,8
 4009d88:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4009d8c:	e0bfff17 	ldw	r2,-4(fp)
 4009d90:	10800a17 	ldw	r2,40(r2)
 4009d94:	10800037 	ldwio	r2,0(r2)
 4009d98:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 4009d9c:	e0bffe17 	ldw	r2,-8(fp)
 4009da0:	10800114 	ori	r2,r2,4
 4009da4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 4009da8:	e0bffe17 	ldw	r2,-8(fp)
 4009dac:	10800214 	ori	r2,r2,8
 4009db0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4009db4:	e0bfff17 	ldw	r2,-4(fp)
 4009db8:	10800a17 	ldw	r2,40(r2)
 4009dbc:	1007883a 	mov	r3,r2
 4009dc0:	e0bffe17 	ldw	r2,-8(fp)
 4009dc4:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 4009dc8:	e0fffe17 	ldw	r3,-8(fp)
 4009dcc:	00bffec4 	movi	r2,-5
 4009dd0:	1884703a 	and	r2,r3,r2
 4009dd4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 4009dd8:	e0fffe17 	ldw	r3,-8(fp)
 4009ddc:	00bffdc4 	movi	r2,-9
 4009de0:	1884703a 	and	r2,r3,r2
 4009de4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4009de8:	e0bfff17 	ldw	r2,-4(fp)
 4009dec:	10800a17 	ldw	r2,40(r2)
 4009df0:	1007883a 	mov	r3,r2
 4009df4:	e0bffe17 	ldw	r2,-8(fp)
 4009df8:	18800035 	stwio	r2,0(r3)
}
 4009dfc:	0001883a 	nop
 4009e00:	e037883a 	mov	sp,fp
 4009e04:	df000017 	ldw	fp,0(sp)
 4009e08:	dec00104 	addi	sp,sp,4
 4009e0c:	f800283a 	ret

04009e10 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 4009e10:	defffc04 	addi	sp,sp,-16
 4009e14:	df000315 	stw	fp,12(sp)
 4009e18:	df000304 	addi	fp,sp,12
 4009e1c:	e13ffe15 	stw	r4,-8(fp)
 4009e20:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4009e24:	e0bffe17 	ldw	r2,-8(fp)
 4009e28:	10800a17 	ldw	r2,40(r2)
 4009e2c:	10800104 	addi	r2,r2,4
 4009e30:	10800037 	ldwio	r2,0(r2)
 4009e34:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 4009e38:	e0bfff17 	ldw	r2,-4(fp)
 4009e3c:	1000041e 	bne	r2,zero,4009e50 <alt_up_audio_read_fifo_avail+0x40>
 4009e40:	e0bffd17 	ldw	r2,-12(fp)
 4009e44:	10bfc00c 	andi	r2,r2,65280
 4009e48:	1004d23a 	srli	r2,r2,8
 4009e4c:	00000206 	br	4009e58 <alt_up_audio_read_fifo_avail+0x48>
 4009e50:	e0bffd17 	ldw	r2,-12(fp)
 4009e54:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4009e58:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 4009e5c:	e0bffd17 	ldw	r2,-12(fp)
}
 4009e60:	e037883a 	mov	sp,fp
 4009e64:	df000017 	ldw	fp,0(sp)
 4009e68:	dec00104 	addi	sp,sp,4
 4009e6c:	f800283a 	ret

04009e70 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4009e70:	defffa04 	addi	sp,sp,-24
 4009e74:	dfc00515 	stw	ra,20(sp)
 4009e78:	df000415 	stw	fp,16(sp)
 4009e7c:	df000404 	addi	fp,sp,16
 4009e80:	e13ffd15 	stw	r4,-12(fp)
 4009e84:	e17ffe15 	stw	r5,-8(fp)
 4009e88:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 4009e8c:	01400044 	movi	r5,1
 4009e90:	e13ffd17 	ldw	r4,-12(fp)
 4009e94:	4009e100 	call	4009e10 <alt_up_audio_read_fifo_avail>
 4009e98:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 4009e9c:	e0bffc17 	ldw	r2,-16(fp)
 4009ea0:	10801868 	cmpgeui	r2,r2,97
 4009ea4:	1000021e 	bne	r2,zero,4009eb0 <alt_up_audio_record_r+0x40>
		return 0;
 4009ea8:	0005883a 	mov	r2,zero
 4009eac:	00000506 	br	4009ec4 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 4009eb0:	01c00044 	movi	r7,1
 4009eb4:	e1bfff17 	ldw	r6,-4(fp)
 4009eb8:	e17ffe17 	ldw	r5,-8(fp)
 4009ebc:	e13ffd17 	ldw	r4,-12(fp)
 4009ec0:	400a0700 	call	400a070 <alt_up_audio_read_fifo>
}
 4009ec4:	e037883a 	mov	sp,fp
 4009ec8:	dfc00117 	ldw	ra,4(sp)
 4009ecc:	df000017 	ldw	fp,0(sp)
 4009ed0:	dec00204 	addi	sp,sp,8
 4009ed4:	f800283a 	ret

04009ed8 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4009ed8:	defffa04 	addi	sp,sp,-24
 4009edc:	dfc00515 	stw	ra,20(sp)
 4009ee0:	df000415 	stw	fp,16(sp)
 4009ee4:	df000404 	addi	fp,sp,16
 4009ee8:	e13ffd15 	stw	r4,-12(fp)
 4009eec:	e17ffe15 	stw	r5,-8(fp)
 4009ef0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 4009ef4:	000b883a 	mov	r5,zero
 4009ef8:	e13ffd17 	ldw	r4,-12(fp)
 4009efc:	4009e100 	call	4009e10 <alt_up_audio_read_fifo_avail>
 4009f00:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 4009f04:	e0bffc17 	ldw	r2,-16(fp)
 4009f08:	10801868 	cmpgeui	r2,r2,97
 4009f0c:	1000021e 	bne	r2,zero,4009f18 <alt_up_audio_record_l+0x40>
		return 0;
 4009f10:	0005883a 	mov	r2,zero
 4009f14:	00000506 	br	4009f2c <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 4009f18:	000f883a 	mov	r7,zero
 4009f1c:	e1bfff17 	ldw	r6,-4(fp)
 4009f20:	e17ffe17 	ldw	r5,-8(fp)
 4009f24:	e13ffd17 	ldw	r4,-12(fp)
 4009f28:	400a0700 	call	400a070 <alt_up_audio_read_fifo>
}
 4009f2c:	e037883a 	mov	sp,fp
 4009f30:	dfc00117 	ldw	ra,4(sp)
 4009f34:	df000017 	ldw	fp,0(sp)
 4009f38:	dec00204 	addi	sp,sp,8
 4009f3c:	f800283a 	ret

04009f40 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 4009f40:	defffc04 	addi	sp,sp,-16
 4009f44:	df000315 	stw	fp,12(sp)
 4009f48:	df000304 	addi	fp,sp,12
 4009f4c:	e13ffe15 	stw	r4,-8(fp)
 4009f50:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4009f54:	e0bffe17 	ldw	r2,-8(fp)
 4009f58:	10800a17 	ldw	r2,40(r2)
 4009f5c:	10800104 	addi	r2,r2,4
 4009f60:	10800037 	ldwio	r2,0(r2)
 4009f64:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4009f68:	e0bfff17 	ldw	r2,-4(fp)
 4009f6c:	1000031e 	bne	r2,zero,4009f7c <alt_up_audio_write_fifo_space+0x3c>
 4009f70:	e0bffd17 	ldw	r2,-12(fp)
 4009f74:	1004d63a 	srli	r2,r2,24
 4009f78:	00000306 	br	4009f88 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 4009f7c:	e0bffd17 	ldw	r2,-12(fp)
 4009f80:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4009f84:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4009f88:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 4009f8c:	e0bffd17 	ldw	r2,-12(fp)
}
 4009f90:	e037883a 	mov	sp,fp
 4009f94:	df000017 	ldw	fp,0(sp)
 4009f98:	dec00104 	addi	sp,sp,4
 4009f9c:	f800283a 	ret

04009fa0 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4009fa0:	defffa04 	addi	sp,sp,-24
 4009fa4:	dfc00515 	stw	ra,20(sp)
 4009fa8:	df000415 	stw	fp,16(sp)
 4009fac:	df000404 	addi	fp,sp,16
 4009fb0:	e13ffd15 	stw	r4,-12(fp)
 4009fb4:	e17ffe15 	stw	r5,-8(fp)
 4009fb8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 4009fbc:	01400044 	movi	r5,1
 4009fc0:	e13ffd17 	ldw	r4,-12(fp)
 4009fc4:	4009f400 	call	4009f40 <alt_up_audio_write_fifo_space>
 4009fc8:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 4009fcc:	e0bffc17 	ldw	r2,-16(fp)
 4009fd0:	10801868 	cmpgeui	r2,r2,97
 4009fd4:	1000021e 	bne	r2,zero,4009fe0 <alt_up_audio_play_r+0x40>
		return 0;
 4009fd8:	0005883a 	mov	r2,zero
 4009fdc:	00000506 	br	4009ff4 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 4009fe0:	01c00044 	movi	r7,1
 4009fe4:	e1bfff17 	ldw	r6,-4(fp)
 4009fe8:	e17ffe17 	ldw	r5,-8(fp)
 4009fec:	e13ffd17 	ldw	r4,-12(fp)
 4009ff0:	400a1500 	call	400a150 <alt_up_audio_write_fifo>
}
 4009ff4:	e037883a 	mov	sp,fp
 4009ff8:	dfc00117 	ldw	ra,4(sp)
 4009ffc:	df000017 	ldw	fp,0(sp)
 400a000:	dec00204 	addi	sp,sp,8
 400a004:	f800283a 	ret

0400a008 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 400a008:	defffa04 	addi	sp,sp,-24
 400a00c:	dfc00515 	stw	ra,20(sp)
 400a010:	df000415 	stw	fp,16(sp)
 400a014:	df000404 	addi	fp,sp,16
 400a018:	e13ffd15 	stw	r4,-12(fp)
 400a01c:	e17ffe15 	stw	r5,-8(fp)
 400a020:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 400a024:	000b883a 	mov	r5,zero
 400a028:	e13ffd17 	ldw	r4,-12(fp)
 400a02c:	4009f400 	call	4009f40 <alt_up_audio_write_fifo_space>
 400a030:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 400a034:	e0bffc17 	ldw	r2,-16(fp)
 400a038:	10801868 	cmpgeui	r2,r2,97
 400a03c:	1000021e 	bne	r2,zero,400a048 <alt_up_audio_play_l+0x40>
		return 0;
 400a040:	0005883a 	mov	r2,zero
 400a044:	00000506 	br	400a05c <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 400a048:	000f883a 	mov	r7,zero
 400a04c:	e1bfff17 	ldw	r6,-4(fp)
 400a050:	e17ffe17 	ldw	r5,-8(fp)
 400a054:	e13ffd17 	ldw	r4,-12(fp)
 400a058:	400a1500 	call	400a150 <alt_up_audio_write_fifo>
}
 400a05c:	e037883a 	mov	sp,fp
 400a060:	dfc00117 	ldw	ra,4(sp)
 400a064:	df000017 	ldw	fp,0(sp)
 400a068:	dec00204 	addi	sp,sp,8
 400a06c:	f800283a 	ret

0400a070 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 400a070:	defff904 	addi	sp,sp,-28
 400a074:	df000615 	stw	fp,24(sp)
 400a078:	df000604 	addi	fp,sp,24
 400a07c:	e13ffc15 	stw	r4,-16(fp)
 400a080:	e17ffd15 	stw	r5,-12(fp)
 400a084:	e1bffe15 	stw	r6,-8(fp)
 400a088:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 400a08c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 400a090:	00002506 	br	400a128 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 400a094:	e0bffc17 	ldw	r2,-16(fp)
 400a098:	10800a17 	ldw	r2,40(r2)
 400a09c:	10800104 	addi	r2,r2,4
 400a0a0:	10800037 	ldwio	r2,0(r2)
 400a0a4:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 400a0a8:	e0bfff17 	ldw	r2,-4(fp)
 400a0ac:	1000041e 	bne	r2,zero,400a0c0 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 400a0b0:	e0bffb17 	ldw	r2,-20(fp)
 400a0b4:	10bfc00c 	andi	r2,r2,65280
			:
 400a0b8:	1004d23a 	srli	r2,r2,8
 400a0bc:	00000206 	br	400a0c8 <alt_up_audio_read_fifo+0x58>
 400a0c0:	e0bffb17 	ldw	r2,-20(fp)
 400a0c4:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 400a0c8:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 400a0cc:	e0bffb17 	ldw	r2,-20(fp)
 400a0d0:	10001926 	beq	r2,zero,400a138 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 400a0d4:	e0bffa17 	ldw	r2,-24(fp)
 400a0d8:	1085883a 	add	r2,r2,r2
 400a0dc:	1085883a 	add	r2,r2,r2
 400a0e0:	1007883a 	mov	r3,r2
 400a0e4:	e0bffd17 	ldw	r2,-12(fp)
 400a0e8:	10c5883a 	add	r2,r2,r3
 400a0ec:	e0ffff17 	ldw	r3,-4(fp)
 400a0f0:	1800051e 	bne	r3,zero,400a108 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 400a0f4:	e0fffc17 	ldw	r3,-16(fp)
 400a0f8:	18c00a17 	ldw	r3,40(r3)
 400a0fc:	18c00204 	addi	r3,r3,8
 400a100:	18c00037 	ldwio	r3,0(r3)
 400a104:	00000406 	br	400a118 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 400a108:	e0fffc17 	ldw	r3,-16(fp)
 400a10c:	18c00a17 	ldw	r3,40(r3)
 400a110:	18c00304 	addi	r3,r3,12
 400a114:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 400a118:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 400a11c:	e0bffa17 	ldw	r2,-24(fp)
 400a120:	10800044 	addi	r2,r2,1
 400a124:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 400a128:	e0fffa17 	ldw	r3,-24(fp)
 400a12c:	e0bffe17 	ldw	r2,-8(fp)
 400a130:	18bfd816 	blt	r3,r2,400a094 <__ram_exceptions_end+0xfbfe9e4c>
 400a134:	00000106 	br	400a13c <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 400a138:	0001883a 	nop
		}
	}
	return count;
 400a13c:	e0bffa17 	ldw	r2,-24(fp)
}
 400a140:	e037883a 	mov	sp,fp
 400a144:	df000017 	ldw	fp,0(sp)
 400a148:	dec00104 	addi	sp,sp,4
 400a14c:	f800283a 	ret

0400a150 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 400a150:	defff904 	addi	sp,sp,-28
 400a154:	df000615 	stw	fp,24(sp)
 400a158:	df000604 	addi	fp,sp,24
 400a15c:	e13ffc15 	stw	r4,-16(fp)
 400a160:	e17ffd15 	stw	r5,-12(fp)
 400a164:	e1bffe15 	stw	r6,-8(fp)
 400a168:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 400a16c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 400a170:	00002f06 	br	400a230 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 400a174:	e0bffc17 	ldw	r2,-16(fp)
 400a178:	10800a17 	ldw	r2,40(r2)
 400a17c:	10800104 	addi	r2,r2,4
 400a180:	10800037 	ldwio	r2,0(r2)
 400a184:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 400a188:	e0bfff17 	ldw	r2,-4(fp)
 400a18c:	1000031e 	bne	r2,zero,400a19c <alt_up_audio_write_fifo+0x4c>
 400a190:	e0bffb17 	ldw	r2,-20(fp)
 400a194:	1004d63a 	srli	r2,r2,24
 400a198:	00000306 	br	400a1a8 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 400a19c:	e0bffb17 	ldw	r2,-20(fp)
 400a1a0:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 400a1a4:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 400a1a8:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 400a1ac:	e0bffb17 	ldw	r2,-20(fp)
 400a1b0:	10002326 	beq	r2,zero,400a240 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 400a1b4:	e0bfff17 	ldw	r2,-4(fp)
 400a1b8:	10000f1e 	bne	r2,zero,400a1f8 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 400a1bc:	e0bffc17 	ldw	r2,-16(fp)
 400a1c0:	10800a17 	ldw	r2,40(r2)
 400a1c4:	10800204 	addi	r2,r2,8
 400a1c8:	1009883a 	mov	r4,r2
 400a1cc:	e0bffa17 	ldw	r2,-24(fp)
 400a1d0:	10c00044 	addi	r3,r2,1
 400a1d4:	e0fffa15 	stw	r3,-24(fp)
 400a1d8:	1085883a 	add	r2,r2,r2
 400a1dc:	1085883a 	add	r2,r2,r2
 400a1e0:	1007883a 	mov	r3,r2
 400a1e4:	e0bffd17 	ldw	r2,-12(fp)
 400a1e8:	10c5883a 	add	r2,r2,r3
 400a1ec:	10800017 	ldw	r2,0(r2)
 400a1f0:	20800035 	stwio	r2,0(r4)
 400a1f4:	00000e06 	br	400a230 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 400a1f8:	e0bffc17 	ldw	r2,-16(fp)
 400a1fc:	10800a17 	ldw	r2,40(r2)
 400a200:	10800304 	addi	r2,r2,12
 400a204:	1009883a 	mov	r4,r2
 400a208:	e0bffa17 	ldw	r2,-24(fp)
 400a20c:	10c00044 	addi	r3,r2,1
 400a210:	e0fffa15 	stw	r3,-24(fp)
 400a214:	1085883a 	add	r2,r2,r2
 400a218:	1085883a 	add	r2,r2,r2
 400a21c:	1007883a 	mov	r3,r2
 400a220:	e0bffd17 	ldw	r2,-12(fp)
 400a224:	10c5883a 	add	r2,r2,r3
 400a228:	10800017 	ldw	r2,0(r2)
 400a22c:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 400a230:	e0fffa17 	ldw	r3,-24(fp)
 400a234:	e0bffe17 	ldw	r2,-8(fp)
 400a238:	18bfce16 	blt	r3,r2,400a174 <__ram_exceptions_end+0xfbfe9f2c>
 400a23c:	00000106 	br	400a244 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 400a240:	0001883a 	nop
		}
	}
	return count;
 400a244:	e0bffa17 	ldw	r2,-24(fp)
}
 400a248:	e037883a 	mov	sp,fp
 400a24c:	df000017 	ldw	fp,0(sp)
 400a250:	dec00104 	addi	sp,sp,4
 400a254:	f800283a 	ret

0400a258 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 400a258:	defffd04 	addi	sp,sp,-12
 400a25c:	df000215 	stw	fp,8(sp)
 400a260:	df000204 	addi	fp,sp,8
 400a264:	e13ffe15 	stw	r4,-8(fp)
 400a268:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 400a26c:	e0bfff17 	ldw	r2,-4(fp)
 400a270:	1000051e 	bne	r2,zero,400a288 <alt_up_audio_read_fifo_head+0x30>
 400a274:	e0bffe17 	ldw	r2,-8(fp)
 400a278:	10800a17 	ldw	r2,40(r2)
 400a27c:	10800204 	addi	r2,r2,8
 400a280:	10800037 	ldwio	r2,0(r2)
 400a284:	00000406 	br	400a298 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 400a288:	e0bffe17 	ldw	r2,-8(fp)
 400a28c:	10800a17 	ldw	r2,40(r2)
 400a290:	10800304 	addi	r2,r2,12
 400a294:	10800037 	ldwio	r2,0(r2)
}
 400a298:	e037883a 	mov	sp,fp
 400a29c:	df000017 	ldw	fp,0(sp)
 400a2a0:	dec00104 	addi	sp,sp,4
 400a2a4:	f800283a 	ret

0400a2a8 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 400a2a8:	defffc04 	addi	sp,sp,-16
 400a2ac:	df000315 	stw	fp,12(sp)
 400a2b0:	df000304 	addi	fp,sp,12
 400a2b4:	e13ffd15 	stw	r4,-12(fp)
 400a2b8:	e17ffe15 	stw	r5,-8(fp)
 400a2bc:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 400a2c0:	e0bfff17 	ldw	r2,-4(fp)
 400a2c4:	1000071e 	bne	r2,zero,400a2e4 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 400a2c8:	e0bffd17 	ldw	r2,-12(fp)
 400a2cc:	10800a17 	ldw	r2,40(r2)
 400a2d0:	10800204 	addi	r2,r2,8
 400a2d4:	1007883a 	mov	r3,r2
 400a2d8:	e0bffe17 	ldw	r2,-8(fp)
 400a2dc:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 400a2e0:	00000606 	br	400a2fc <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 400a2e4:	e0bffd17 	ldw	r2,-12(fp)
 400a2e8:	10800a17 	ldw	r2,40(r2)
 400a2ec:	10800304 	addi	r2,r2,12
 400a2f0:	1007883a 	mov	r3,r2
 400a2f4:	e0bffe17 	ldw	r2,-8(fp)
 400a2f8:	18800035 	stwio	r2,0(r3)
}
 400a2fc:	0001883a 	nop
 400a300:	e037883a 	mov	sp,fp
 400a304:	df000017 	ldw	fp,0(sp)
 400a308:	dec00104 	addi	sp,sp,4
 400a30c:	f800283a 	ret

0400a310 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 400a310:	defffc04 	addi	sp,sp,-16
 400a314:	dfc00315 	stw	ra,12(sp)
 400a318:	df000215 	stw	fp,8(sp)
 400a31c:	df000204 	addi	fp,sp,8
 400a320:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 400a324:	d1600604 	addi	r5,gp,-32744
 400a328:	e13fff17 	ldw	r4,-4(fp)
 400a32c:	400ae780 	call	400ae78 <alt_find_dev>
 400a330:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 400a334:	e0bffe17 	ldw	r2,-8(fp)
 400a338:	10800a17 	ldw	r2,40(r2)
 400a33c:	10800104 	addi	r2,r2,4
 400a340:	10800037 	ldwio	r2,0(r2)
 400a344:	10803fec 	andhi	r2,r2,255
 400a348:	1005d43a 	srai	r2,r2,16
 400a34c:	1007883a 	mov	r3,r2
 400a350:	e0bffe17 	ldw	r2,-8(fp)
 400a354:	10c00b15 	stw	r3,44(r2)

  return dev;
 400a358:	e0bffe17 	ldw	r2,-8(fp)
}
 400a35c:	e037883a 	mov	sp,fp
 400a360:	dfc00117 	ldw	ra,4(sp)
 400a364:	df000017 	ldw	fp,0(sp)
 400a368:	dec00204 	addi	sp,sp,8
 400a36c:	f800283a 	ret

0400a370 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400a370:	defffc04 	addi	sp,sp,-16
 400a374:	df000315 	stw	fp,12(sp)
 400a378:	df000304 	addi	fp,sp,12
 400a37c:	e13ffd15 	stw	r4,-12(fp)
 400a380:	e17ffe15 	stw	r5,-8(fp)
 400a384:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 400a388:	e0bffd17 	ldw	r2,-12(fp)
 400a38c:	10800a17 	ldw	r2,40(r2)
 400a390:	10800204 	addi	r2,r2,8
 400a394:	1007883a 	mov	r3,r2
 400a398:	e0bffe17 	ldw	r2,-8(fp)
 400a39c:	10803fcc 	andi	r2,r2,255
 400a3a0:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 400a3a4:	e0bffd17 	ldw	r2,-12(fp)
 400a3a8:	10800a17 	ldw	r2,40(r2)
 400a3ac:	10800304 	addi	r2,r2,12
 400a3b0:	1007883a 	mov	r3,r2
 400a3b4:	e0bfff17 	ldw	r2,-4(fp)
 400a3b8:	10bfffcc 	andi	r2,r2,65535
 400a3bc:	18800035 	stwio	r2,0(r3)

	return 0;
 400a3c0:	0005883a 	mov	r2,zero
}
 400a3c4:	e037883a 	mov	sp,fp
 400a3c8:	df000017 	ldw	fp,0(sp)
 400a3cc:	dec00104 	addi	sp,sp,4
 400a3d0:	f800283a 	ret

0400a3d4 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 400a3d4:	defffb04 	addi	sp,sp,-20
 400a3d8:	dfc00415 	stw	ra,16(sp)
 400a3dc:	df000315 	stw	fp,12(sp)
 400a3e0:	df000304 	addi	fp,sp,12
 400a3e4:	e13ffd15 	stw	r4,-12(fp)
 400a3e8:	e17ffe15 	stw	r5,-8(fp)
 400a3ec:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 400a3f0:	e0bffd17 	ldw	r2,-12(fp)
 400a3f4:	10800a17 	ldw	r2,40(r2)
 400a3f8:	10800204 	addi	r2,r2,8
 400a3fc:	1007883a 	mov	r3,r2
 400a400:	e0bffe17 	ldw	r2,-8(fp)
 400a404:	10803fcc 	andi	r2,r2,255
 400a408:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 400a40c:	e0bffd17 	ldw	r2,-12(fp)
 400a410:	10800a17 	ldw	r2,40(r2)
 400a414:	10800304 	addi	r2,r2,12
 400a418:	10800037 	ldwio	r2,0(r2)
 400a41c:	1007883a 	mov	r3,r2
 400a420:	e0bfff17 	ldw	r2,-4(fp)
 400a424:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 400a428:	e13ffd17 	ldw	r4,-12(fp)
 400a42c:	400a4f80 	call	400a4f8 <alt_up_av_config_read_acknowledge>
 400a430:	10000226 	beq	r2,zero,400a43c <alt_up_av_config_read_data+0x68>
		return -1;
 400a434:	00bfffc4 	movi	r2,-1
 400a438:	00000106 	br	400a440 <alt_up_av_config_read_data+0x6c>

	return 0;
 400a43c:	0005883a 	mov	r2,zero
}
 400a440:	e037883a 	mov	sp,fp
 400a444:	dfc00117 	ldw	ra,4(sp)
 400a448:	df000017 	ldw	fp,0(sp)
 400a44c:	dec00204 	addi	sp,sp,8
 400a450:	f800283a 	ret

0400a454 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 400a454:	defffe04 	addi	sp,sp,-8
 400a458:	df000115 	stw	fp,4(sp)
 400a45c:	df000104 	addi	fp,sp,4
 400a460:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 400a464:	e0bfff17 	ldw	r2,-4(fp)
 400a468:	10800a17 	ldw	r2,40(r2)
 400a46c:	1007883a 	mov	r3,r2
 400a470:	00800044 	movi	r2,1
 400a474:	18800025 	stbio	r2,0(r3)
	return 0;
 400a478:	0005883a 	mov	r2,zero
}
 400a47c:	e037883a 	mov	sp,fp
 400a480:	df000017 	ldw	fp,0(sp)
 400a484:	dec00104 	addi	sp,sp,4
 400a488:	f800283a 	ret

0400a48c <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 400a48c:	defffe04 	addi	sp,sp,-8
 400a490:	df000115 	stw	fp,4(sp)
 400a494:	df000104 	addi	fp,sp,4
 400a498:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 400a49c:	e0bfff17 	ldw	r2,-4(fp)
 400a4a0:	10800a17 	ldw	r2,40(r2)
 400a4a4:	1007883a 	mov	r3,r2
 400a4a8:	00800084 	movi	r2,2
 400a4ac:	18800025 	stbio	r2,0(r3)
	return 0;
 400a4b0:	0005883a 	mov	r2,zero
}
 400a4b4:	e037883a 	mov	sp,fp
 400a4b8:	df000017 	ldw	fp,0(sp)
 400a4bc:	dec00104 	addi	sp,sp,4
 400a4c0:	f800283a 	ret

0400a4c4 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 400a4c4:	defffe04 	addi	sp,sp,-8
 400a4c8:	df000115 	stw	fp,4(sp)
 400a4cc:	df000104 	addi	fp,sp,4
 400a4d0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 400a4d4:	e0bfff17 	ldw	r2,-4(fp)
 400a4d8:	10800a17 	ldw	r2,40(r2)
 400a4dc:	0007883a 	mov	r3,zero
 400a4e0:	10c00025 	stbio	r3,0(r2)
	return 0;
 400a4e4:	0005883a 	mov	r2,zero
}
 400a4e8:	e037883a 	mov	sp,fp
 400a4ec:	df000017 	ldw	fp,0(sp)
 400a4f0:	dec00104 	addi	sp,sp,4
 400a4f4:	f800283a 	ret

0400a4f8 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 400a4f8:	defffe04 	addi	sp,sp,-8
 400a4fc:	df000115 	stw	fp,4(sp)
 400a500:	df000104 	addi	fp,sp,4
 400a504:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 400a508:	e0bfff17 	ldw	r2,-4(fp)
 400a50c:	10800a17 	ldw	r2,40(r2)
 400a510:	10800104 	addi	r2,r2,4
 400a514:	10800037 	ldwio	r2,0(r2)
 400a518:	1080008c 	andi	r2,r2,2
 400a51c:	1005d07a 	srai	r2,r2,1
 400a520:	10000626 	beq	r2,zero,400a53c <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 400a524:	e0bfff17 	ldw	r2,-4(fp)
 400a528:	10800a17 	ldw	r2,40(r2)
 400a52c:	10800104 	addi	r2,r2,4
 400a530:	10800037 	ldwio	r2,0(r2)
 400a534:	1080004c 	andi	r2,r2,1
 400a538:	00000106 	br	400a540 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 400a53c:	00bfffc4 	movi	r2,-1
}
 400a540:	e037883a 	mov	sp,fp
 400a544:	df000017 	ldw	fp,0(sp)
 400a548:	dec00104 	addi	sp,sp,4
 400a54c:	f800283a 	ret

0400a550 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 400a550:	defffe04 	addi	sp,sp,-8
 400a554:	df000115 	stw	fp,4(sp)
 400a558:	df000104 	addi	fp,sp,4
 400a55c:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 400a560:	e0bfff17 	ldw	r2,-4(fp)
 400a564:	10800a17 	ldw	r2,40(r2)
 400a568:	10800104 	addi	r2,r2,4
 400a56c:	10800037 	ldwio	r2,0(r2)
 400a570:	1080008c 	andi	r2,r2,2
 400a574:	1005d07a 	srai	r2,r2,1
}
 400a578:	e037883a 	mov	sp,fp
 400a57c:	df000017 	ldw	fp,0(sp)
 400a580:	dec00104 	addi	sp,sp,4
 400a584:	f800283a 	ret

0400a588 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400a588:	defffa04 	addi	sp,sp,-24
 400a58c:	dfc00515 	stw	ra,20(sp)
 400a590:	df000415 	stw	fp,16(sp)
 400a594:	df000404 	addi	fp,sp,16
 400a598:	e13ffd15 	stw	r4,-12(fp)
 400a59c:	e17ffe15 	stw	r5,-8(fp)
 400a5a0:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 400a5a4:	e0bffd17 	ldw	r2,-12(fp)
 400a5a8:	10800b17 	ldw	r2,44(r2)
 400a5ac:	10800060 	cmpeqi	r2,r2,1
 400a5b0:	10000e1e 	bne	r2,zero,400a5ec <alt_up_av_config_write_audio_cfg_register+0x64>
 400a5b4:	e0bffd17 	ldw	r2,-12(fp)
 400a5b8:	10800b17 	ldw	r2,44(r2)
 400a5bc:	108000a0 	cmpeqi	r2,r2,2
 400a5c0:	10000a1e 	bne	r2,zero,400a5ec <alt_up_av_config_write_audio_cfg_register+0x64>
 400a5c4:	e0bffd17 	ldw	r2,-12(fp)
 400a5c8:	10800b17 	ldw	r2,44(r2)
 400a5cc:	108000e0 	cmpeqi	r2,r2,3
 400a5d0:	1000061e 	bne	r2,zero,400a5ec <alt_up_av_config_write_audio_cfg_register+0x64>
 400a5d4:	e0bffd17 	ldw	r2,-12(fp)
 400a5d8:	10800b17 	ldw	r2,44(r2)
 400a5dc:	10800120 	cmpeqi	r2,r2,4
 400a5e0:	1000021e 	bne	r2,zero,400a5ec <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 400a5e4:	00bffa84 	movi	r2,-22
 400a5e8:	00000b06 	br	400a618 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 400a5ec:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 400a5f0:	e0bffd17 	ldw	r2,-12(fp)
 400a5f4:	10800a17 	ldw	r2,40(r2)
 400a5f8:	10800084 	addi	r2,r2,2
 400a5fc:	1007883a 	mov	r3,r2
 400a600:	e0bffc17 	ldw	r2,-16(fp)
 400a604:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 400a608:	e1bfff17 	ldw	r6,-4(fp)
 400a60c:	e17ffe17 	ldw	r5,-8(fp)
 400a610:	e13ffd17 	ldw	r4,-12(fp)
 400a614:	400a3700 	call	400a370 <alt_up_av_config_write_data>
}
 400a618:	e037883a 	mov	sp,fp
 400a61c:	dfc00117 	ldw	ra,4(sp)
 400a620:	df000017 	ldw	fp,0(sp)
 400a624:	dec00204 	addi	sp,sp,8
 400a628:	f800283a 	ret

0400a62c <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 400a62c:	defffa04 	addi	sp,sp,-24
 400a630:	dfc00515 	stw	ra,20(sp)
 400a634:	df000415 	stw	fp,16(sp)
 400a638:	df000404 	addi	fp,sp,16
 400a63c:	e13ffc15 	stw	r4,-16(fp)
 400a640:	e17ffd15 	stw	r5,-12(fp)
 400a644:	e1bffe15 	stw	r6,-8(fp)
 400a648:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 400a64c:	e0bffc17 	ldw	r2,-16(fp)
 400a650:	10800b17 	ldw	r2,44(r2)
 400a654:	108000a0 	cmpeqi	r2,r2,2
 400a658:	10000a1e 	bne	r2,zero,400a684 <alt_up_av_config_read_video_cfg_register+0x58>
 400a65c:	e0bffc17 	ldw	r2,-16(fp)
 400a660:	10800b17 	ldw	r2,44(r2)
 400a664:	108000e0 	cmpeqi	r2,r2,3
 400a668:	1000061e 	bne	r2,zero,400a684 <alt_up_av_config_read_video_cfg_register+0x58>
 400a66c:	e0bffc17 	ldw	r2,-16(fp)
 400a670:	10800b17 	ldw	r2,44(r2)
 400a674:	10800120 	cmpeqi	r2,r2,4
 400a678:	1000021e 	bne	r2,zero,400a684 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 400a67c:	00bffa84 	movi	r2,-22
 400a680:	00001f06 	br	400a700 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 400a684:	e0bffc17 	ldw	r2,-16(fp)
 400a688:	10800b17 	ldw	r2,44(r2)
 400a68c:	108000a0 	cmpeqi	r2,r2,2
 400a690:	1000041e 	bne	r2,zero,400a6a4 <alt_up_av_config_read_video_cfg_register+0x78>
 400a694:	e0bffc17 	ldw	r2,-16(fp)
 400a698:	10800b17 	ldw	r2,44(r2)
 400a69c:	10800118 	cmpnei	r2,r2,4
 400a6a0:	1000051e 	bne	r2,zero,400a6b8 <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 400a6a4:	e0bfff17 	ldw	r2,-4(fp)
 400a6a8:	10800060 	cmpeqi	r2,r2,1
 400a6ac:	10000a1e 	bne	r2,zero,400a6d8 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 400a6b0:	00bffa84 	movi	r2,-22
 400a6b4:	00001206 	br	400a700 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 400a6b8:	e0bfff17 	ldw	r2,-4(fp)
 400a6bc:	10800060 	cmpeqi	r2,r2,1
 400a6c0:	1000051e 	bne	r2,zero,400a6d8 <alt_up_av_config_read_video_cfg_register+0xac>
 400a6c4:	e0bfff17 	ldw	r2,-4(fp)
 400a6c8:	108000a0 	cmpeqi	r2,r2,2
 400a6cc:	1000021e 	bne	r2,zero,400a6d8 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 400a6d0:	00bffa84 	movi	r2,-22
 400a6d4:	00000a06 	br	400a700 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 400a6d8:	e0bffc17 	ldw	r2,-16(fp)
 400a6dc:	10800a17 	ldw	r2,40(r2)
 400a6e0:	10800084 	addi	r2,r2,2
 400a6e4:	1007883a 	mov	r3,r2
 400a6e8:	e0bfff17 	ldw	r2,-4(fp)
 400a6ec:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 400a6f0:	e1bffe17 	ldw	r6,-8(fp)
 400a6f4:	e17ffd17 	ldw	r5,-12(fp)
 400a6f8:	e13ffc17 	ldw	r4,-16(fp)
 400a6fc:	400a3d40 	call	400a3d4 <alt_up_av_config_read_data>
}
 400a700:	e037883a 	mov	sp,fp
 400a704:	dfc00117 	ldw	ra,4(sp)
 400a708:	df000017 	ldw	fp,0(sp)
 400a70c:	dec00204 	addi	sp,sp,8
 400a710:	f800283a 	ret

0400a714 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 400a714:	defffa04 	addi	sp,sp,-24
 400a718:	dfc00515 	stw	ra,20(sp)
 400a71c:	df000415 	stw	fp,16(sp)
 400a720:	df000404 	addi	fp,sp,16
 400a724:	e13ffc15 	stw	r4,-16(fp)
 400a728:	e17ffd15 	stw	r5,-12(fp)
 400a72c:	e1bffe15 	stw	r6,-8(fp)
 400a730:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 400a734:	e0bffc17 	ldw	r2,-16(fp)
 400a738:	10800b17 	ldw	r2,44(r2)
 400a73c:	108000a0 	cmpeqi	r2,r2,2
 400a740:	10000a1e 	bne	r2,zero,400a76c <alt_up_av_config_write_video_cfg_register+0x58>
 400a744:	e0bffc17 	ldw	r2,-16(fp)
 400a748:	10800b17 	ldw	r2,44(r2)
 400a74c:	108000e0 	cmpeqi	r2,r2,3
 400a750:	1000061e 	bne	r2,zero,400a76c <alt_up_av_config_write_video_cfg_register+0x58>
 400a754:	e0bffc17 	ldw	r2,-16(fp)
 400a758:	10800b17 	ldw	r2,44(r2)
 400a75c:	10800120 	cmpeqi	r2,r2,4
 400a760:	1000021e 	bne	r2,zero,400a76c <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 400a764:	00bffa84 	movi	r2,-22
 400a768:	00001f06 	br	400a7e8 <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 400a76c:	e0bffc17 	ldw	r2,-16(fp)
 400a770:	10800b17 	ldw	r2,44(r2)
 400a774:	108000a0 	cmpeqi	r2,r2,2
 400a778:	1000041e 	bne	r2,zero,400a78c <alt_up_av_config_write_video_cfg_register+0x78>
 400a77c:	e0bffc17 	ldw	r2,-16(fp)
 400a780:	10800b17 	ldw	r2,44(r2)
 400a784:	10800118 	cmpnei	r2,r2,4
 400a788:	1000051e 	bne	r2,zero,400a7a0 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 400a78c:	e0bfff17 	ldw	r2,-4(fp)
 400a790:	10800060 	cmpeqi	r2,r2,1
 400a794:	10000a1e 	bne	r2,zero,400a7c0 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 400a798:	00bffa84 	movi	r2,-22
 400a79c:	00001206 	br	400a7e8 <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 400a7a0:	e0bfff17 	ldw	r2,-4(fp)
 400a7a4:	10800060 	cmpeqi	r2,r2,1
 400a7a8:	1000051e 	bne	r2,zero,400a7c0 <alt_up_av_config_write_video_cfg_register+0xac>
 400a7ac:	e0bfff17 	ldw	r2,-4(fp)
 400a7b0:	108000a0 	cmpeqi	r2,r2,2
 400a7b4:	1000021e 	bne	r2,zero,400a7c0 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 400a7b8:	00bffa84 	movi	r2,-22
 400a7bc:	00000a06 	br	400a7e8 <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 400a7c0:	e0bffc17 	ldw	r2,-16(fp)
 400a7c4:	10800a17 	ldw	r2,40(r2)
 400a7c8:	10800084 	addi	r2,r2,2
 400a7cc:	1007883a 	mov	r3,r2
 400a7d0:	e0bfff17 	ldw	r2,-4(fp)
 400a7d4:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 400a7d8:	e1bffe17 	ldw	r6,-8(fp)
 400a7dc:	e17ffd17 	ldw	r5,-12(fp)
 400a7e0:	e13ffc17 	ldw	r4,-16(fp)
 400a7e4:	400a3700 	call	400a370 <alt_up_av_config_write_data>
}
 400a7e8:	e037883a 	mov	sp,fp
 400a7ec:	dfc00117 	ldw	ra,4(sp)
 400a7f0:	df000017 	ldw	fp,0(sp)
 400a7f4:	dec00204 	addi	sp,sp,8
 400a7f8:	f800283a 	ret

0400a7fc <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 400a7fc:	defffb04 	addi	sp,sp,-20
 400a800:	dfc00415 	stw	ra,16(sp)
 400a804:	df000315 	stw	fp,12(sp)
 400a808:	df000304 	addi	fp,sp,12
 400a80c:	e13ffd15 	stw	r4,-12(fp)
 400a810:	e17ffe15 	stw	r5,-8(fp)
 400a814:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 400a818:	e0bffd17 	ldw	r2,-12(fp)
 400a81c:	10800b17 	ldw	r2,44(r2)
 400a820:	10800220 	cmpeqi	r2,r2,8
 400a824:	1000021e 	bne	r2,zero,400a830 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 400a828:	00bffa84 	movi	r2,-22
 400a82c:	00000406 	br	400a840 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 400a830:	e1bfff17 	ldw	r6,-4(fp)
 400a834:	e17ffe17 	ldw	r5,-8(fp)
 400a838:	e13ffd17 	ldw	r4,-12(fp)
 400a83c:	400a3d40 	call	400a3d4 <alt_up_av_config_read_data>
}
 400a840:	e037883a 	mov	sp,fp
 400a844:	dfc00117 	ldw	ra,4(sp)
 400a848:	df000017 	ldw	fp,0(sp)
 400a84c:	dec00204 	addi	sp,sp,8
 400a850:	f800283a 	ret

0400a854 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400a854:	defffb04 	addi	sp,sp,-20
 400a858:	dfc00415 	stw	ra,16(sp)
 400a85c:	df000315 	stw	fp,12(sp)
 400a860:	df000304 	addi	fp,sp,12
 400a864:	e13ffd15 	stw	r4,-12(fp)
 400a868:	e17ffe15 	stw	r5,-8(fp)
 400a86c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 400a870:	e0bffd17 	ldw	r2,-12(fp)
 400a874:	10800b17 	ldw	r2,44(r2)
 400a878:	10800220 	cmpeqi	r2,r2,8
 400a87c:	1000021e 	bne	r2,zero,400a888 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 400a880:	00bffa84 	movi	r2,-22
 400a884:	00000406 	br	400a898 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 400a888:	e1bfff17 	ldw	r6,-4(fp)
 400a88c:	e17ffe17 	ldw	r5,-8(fp)
 400a890:	e13ffd17 	ldw	r4,-12(fp)
 400a894:	400a3700 	call	400a370 <alt_up_av_config_write_data>
}
 400a898:	e037883a 	mov	sp,fp
 400a89c:	dfc00117 	ldw	ra,4(sp)
 400a8a0:	df000017 	ldw	fp,0(sp)
 400a8a4:	dec00204 	addi	sp,sp,8
 400a8a8:	f800283a 	ret

0400a8ac <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 400a8ac:	defffb04 	addi	sp,sp,-20
 400a8b0:	dfc00415 	stw	ra,16(sp)
 400a8b4:	df000315 	stw	fp,12(sp)
 400a8b8:	df000304 	addi	fp,sp,12
 400a8bc:	e13ffd15 	stw	r4,-12(fp)
 400a8c0:	e17ffe15 	stw	r5,-8(fp)
 400a8c4:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 400a8c8:	e0bffd17 	ldw	r2,-12(fp)
 400a8cc:	10800b17 	ldw	r2,44(r2)
 400a8d0:	10800260 	cmpeqi	r2,r2,9
 400a8d4:	1000021e 	bne	r2,zero,400a8e0 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 400a8d8:	00bffa84 	movi	r2,-22
 400a8dc:	00000406 	br	400a8f0 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 400a8e0:	e1bfff17 	ldw	r6,-4(fp)
 400a8e4:	e17ffe17 	ldw	r5,-8(fp)
 400a8e8:	e13ffd17 	ldw	r4,-12(fp)
 400a8ec:	400a3d40 	call	400a3d4 <alt_up_av_config_read_data>
}
 400a8f0:	e037883a 	mov	sp,fp
 400a8f4:	dfc00117 	ldw	ra,4(sp)
 400a8f8:	df000017 	ldw	fp,0(sp)
 400a8fc:	dec00204 	addi	sp,sp,8
 400a900:	f800283a 	ret

0400a904 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400a904:	defffb04 	addi	sp,sp,-20
 400a908:	dfc00415 	stw	ra,16(sp)
 400a90c:	df000315 	stw	fp,12(sp)
 400a910:	df000304 	addi	fp,sp,12
 400a914:	e13ffd15 	stw	r4,-12(fp)
 400a918:	e17ffe15 	stw	r5,-8(fp)
 400a91c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 400a920:	e0bffd17 	ldw	r2,-12(fp)
 400a924:	10800b17 	ldw	r2,44(r2)
 400a928:	10800260 	cmpeqi	r2,r2,9
 400a92c:	1000021e 	bne	r2,zero,400a938 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 400a930:	00bffa84 	movi	r2,-22
 400a934:	00000406 	br	400a948 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 400a938:	e1bfff17 	ldw	r6,-4(fp)
 400a93c:	e17ffe17 	ldw	r5,-8(fp)
 400a940:	e13ffd17 	ldw	r4,-12(fp)
 400a944:	400a3700 	call	400a370 <alt_up_av_config_write_data>
}
 400a948:	e037883a 	mov	sp,fp
 400a94c:	dfc00117 	ldw	ra,4(sp)
 400a950:	df000017 	ldw	fp,0(sp)
 400a954:	dec00204 	addi	sp,sp,8
 400a958:	f800283a 	ret

0400a95c <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 400a95c:	defffb04 	addi	sp,sp,-20
 400a960:	dfc00415 	stw	ra,16(sp)
 400a964:	df000315 	stw	fp,12(sp)
 400a968:	df000304 	addi	fp,sp,12
 400a96c:	e13ffd15 	stw	r4,-12(fp)
 400a970:	e17ffe15 	stw	r5,-8(fp)
 400a974:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 400a978:	e0bffd17 	ldw	r2,-12(fp)
 400a97c:	10800b17 	ldw	r2,44(r2)
 400a980:	108002a0 	cmpeqi	r2,r2,10
 400a984:	1000021e 	bne	r2,zero,400a990 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 400a988:	00bffa84 	movi	r2,-22
 400a98c:	00000406 	br	400a9a0 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 400a990:	e1bfff17 	ldw	r6,-4(fp)
 400a994:	e17ffe17 	ldw	r5,-8(fp)
 400a998:	e13ffd17 	ldw	r4,-12(fp)
 400a99c:	400a3d40 	call	400a3d4 <alt_up_av_config_read_data>
}
 400a9a0:	e037883a 	mov	sp,fp
 400a9a4:	dfc00117 	ldw	ra,4(sp)
 400a9a8:	df000017 	ldw	fp,0(sp)
 400a9ac:	dec00204 	addi	sp,sp,8
 400a9b0:	f800283a 	ret

0400a9b4 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 400a9b4:	defffb04 	addi	sp,sp,-20
 400a9b8:	dfc00415 	stw	ra,16(sp)
 400a9bc:	df000315 	stw	fp,12(sp)
 400a9c0:	df000304 	addi	fp,sp,12
 400a9c4:	e13ffd15 	stw	r4,-12(fp)
 400a9c8:	e17ffe15 	stw	r5,-8(fp)
 400a9cc:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 400a9d0:	e0bffd17 	ldw	r2,-12(fp)
 400a9d4:	10800b17 	ldw	r2,44(r2)
 400a9d8:	108002a0 	cmpeqi	r2,r2,10
 400a9dc:	1000021e 	bne	r2,zero,400a9e8 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 400a9e0:	00bffa84 	movi	r2,-22
 400a9e4:	00000406 	br	400a9f8 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 400a9e8:	e1bfff17 	ldw	r6,-4(fp)
 400a9ec:	e17ffe17 	ldw	r5,-8(fp)
 400a9f0:	e13ffd17 	ldw	r4,-12(fp)
 400a9f4:	400a3700 	call	400a370 <alt_up_av_config_write_data>
}
 400a9f8:	e037883a 	mov	sp,fp
 400a9fc:	dfc00117 	ldw	ra,4(sp)
 400aa00:	df000017 	ldw	fp,0(sp)
 400aa04:	dec00204 	addi	sp,sp,8
 400aa08:	f800283a 	ret

0400aa0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400aa0c:	defff504 	addi	sp,sp,-44
 400aa10:	df000a15 	stw	fp,40(sp)
 400aa14:	df000a04 	addi	fp,sp,40
 400aa18:	e13ffc15 	stw	r4,-16(fp)
 400aa1c:	e17ffd15 	stw	r5,-12(fp)
 400aa20:	e1bffe15 	stw	r6,-8(fp)
 400aa24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400aa28:	e03ff615 	stw	zero,-40(fp)
 400aa2c:	d0a6c917 	ldw	r2,-25820(gp)
  
  if (alt_ticks_per_second ())
 400aa30:	10003c26 	beq	r2,zero,400ab24 <alt_alarm_start+0x118>
  {
    if (alarm)
 400aa34:	e0bffc17 	ldw	r2,-16(fp)
 400aa38:	10003826 	beq	r2,zero,400ab1c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400aa3c:	e0bffc17 	ldw	r2,-16(fp)
 400aa40:	e0fffe17 	ldw	r3,-8(fp)
 400aa44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400aa48:	e0bffc17 	ldw	r2,-16(fp)
 400aa4c:	e0ffff17 	ldw	r3,-4(fp)
 400aa50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400aa54:	0005303a 	rdctl	r2,status
 400aa58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400aa5c:	e0fff917 	ldw	r3,-28(fp)
 400aa60:	00bfff84 	movi	r2,-2
 400aa64:	1884703a 	and	r2,r3,r2
 400aa68:	1001703a 	wrctl	status,r2
  
  return context;
 400aa6c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400aa70:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400aa74:	d0a6ca17 	ldw	r2,-25816(gp)
      
      current_nticks = alt_nticks();
 400aa78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400aa7c:	e0fffd17 	ldw	r3,-12(fp)
 400aa80:	e0bff617 	ldw	r2,-40(fp)
 400aa84:	1885883a 	add	r2,r3,r2
 400aa88:	10c00044 	addi	r3,r2,1
 400aa8c:	e0bffc17 	ldw	r2,-16(fp)
 400aa90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400aa94:	e0bffc17 	ldw	r2,-16(fp)
 400aa98:	10c00217 	ldw	r3,8(r2)
 400aa9c:	e0bff617 	ldw	r2,-40(fp)
 400aaa0:	1880042e 	bgeu	r3,r2,400aab4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400aaa4:	e0bffc17 	ldw	r2,-16(fp)
 400aaa8:	00c00044 	movi	r3,1
 400aaac:	10c00405 	stb	r3,16(r2)
 400aab0:	00000206 	br	400aabc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400aab4:	e0bffc17 	ldw	r2,-16(fp)
 400aab8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400aabc:	e0bffc17 	ldw	r2,-16(fp)
 400aac0:	d0e00c04 	addi	r3,gp,-32720
 400aac4:	e0fffa15 	stw	r3,-24(fp)
 400aac8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400aacc:	e0bffb17 	ldw	r2,-20(fp)
 400aad0:	e0fffa17 	ldw	r3,-24(fp)
 400aad4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400aad8:	e0bffa17 	ldw	r2,-24(fp)
 400aadc:	10c00017 	ldw	r3,0(r2)
 400aae0:	e0bffb17 	ldw	r2,-20(fp)
 400aae4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400aae8:	e0bffa17 	ldw	r2,-24(fp)
 400aaec:	10800017 	ldw	r2,0(r2)
 400aaf0:	e0fffb17 	ldw	r3,-20(fp)
 400aaf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400aaf8:	e0bffa17 	ldw	r2,-24(fp)
 400aafc:	e0fffb17 	ldw	r3,-20(fp)
 400ab00:	10c00015 	stw	r3,0(r2)
 400ab04:	e0bff817 	ldw	r2,-32(fp)
 400ab08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ab0c:	e0bff717 	ldw	r2,-36(fp)
 400ab10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400ab14:	0005883a 	mov	r2,zero
 400ab18:	00000306 	br	400ab28 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400ab1c:	00bffa84 	movi	r2,-22
 400ab20:	00000106 	br	400ab28 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400ab24:	00bfde84 	movi	r2,-134
  }
}
 400ab28:	e037883a 	mov	sp,fp
 400ab2c:	df000017 	ldw	fp,0(sp)
 400ab30:	dec00104 	addi	sp,sp,4
 400ab34:	f800283a 	ret

0400ab38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400ab38:	defffa04 	addi	sp,sp,-24
 400ab3c:	dfc00515 	stw	ra,20(sp)
 400ab40:	df000415 	stw	fp,16(sp)
 400ab44:	df000404 	addi	fp,sp,16
 400ab48:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 400ab4c:	008000c4 	movi	r2,3
 400ab50:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 400ab54:	e0fffd17 	ldw	r3,-12(fp)
 400ab58:	008003f4 	movhi	r2,15
 400ab5c:	10909004 	addi	r2,r2,16960
 400ab60:	1885383a 	mul	r2,r3,r2
 400ab64:	100b883a 	mov	r5,r2
 400ab68:	0100bef4 	movhi	r4,763
 400ab6c:	213c2004 	addi	r4,r4,-3968
 400ab70:	4002a480 	call	4002a48 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400ab74:	100b883a 	mov	r5,r2
 400ab78:	01200034 	movhi	r4,32768
 400ab7c:	213fffc4 	addi	r4,r4,-1
 400ab80:	4002a480 	call	4002a48 <__udivsi3>
 400ab84:	100b883a 	mov	r5,r2
 400ab88:	e13fff17 	ldw	r4,-4(fp)
 400ab8c:	4002a480 	call	4002a48 <__udivsi3>
 400ab90:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400ab94:	e0bffe17 	ldw	r2,-8(fp)
 400ab98:	10002a26 	beq	r2,zero,400ac44 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 400ab9c:	e03ffc15 	stw	zero,-16(fp)
 400aba0:	00001706 	br	400ac00 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400aba4:	00a00034 	movhi	r2,32768
 400aba8:	10bfffc4 	addi	r2,r2,-1
 400abac:	10bfffc4 	addi	r2,r2,-1
 400abb0:	103ffe1e 	bne	r2,zero,400abac <__ram_exceptions_end+0xfbfea964>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 400abb4:	e0fffd17 	ldw	r3,-12(fp)
 400abb8:	008003f4 	movhi	r2,15
 400abbc:	10909004 	addi	r2,r2,16960
 400abc0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400abc4:	100b883a 	mov	r5,r2
 400abc8:	0100bef4 	movhi	r4,763
 400abcc:	213c2004 	addi	r4,r4,-3968
 400abd0:	4002a480 	call	4002a48 <__udivsi3>
 400abd4:	100b883a 	mov	r5,r2
 400abd8:	01200034 	movhi	r4,32768
 400abdc:	213fffc4 	addi	r4,r4,-1
 400abe0:	4002a480 	call	4002a48 <__udivsi3>
 400abe4:	1007883a 	mov	r3,r2
 400abe8:	e0bfff17 	ldw	r2,-4(fp)
 400abec:	10c5c83a 	sub	r2,r2,r3
 400abf0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400abf4:	e0bffc17 	ldw	r2,-16(fp)
 400abf8:	10800044 	addi	r2,r2,1
 400abfc:	e0bffc15 	stw	r2,-16(fp)
 400ac00:	e0fffc17 	ldw	r3,-16(fp)
 400ac04:	e0bffe17 	ldw	r2,-8(fp)
 400ac08:	18bfe616 	blt	r3,r2,400aba4 <__ram_exceptions_end+0xfbfea95c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400ac0c:	e0fffd17 	ldw	r3,-12(fp)
 400ac10:	008003f4 	movhi	r2,15
 400ac14:	10909004 	addi	r2,r2,16960
 400ac18:	1885383a 	mul	r2,r3,r2
 400ac1c:	100b883a 	mov	r5,r2
 400ac20:	0100bef4 	movhi	r4,763
 400ac24:	213c2004 	addi	r4,r4,-3968
 400ac28:	4002a480 	call	4002a48 <__udivsi3>
 400ac2c:	1007883a 	mov	r3,r2
 400ac30:	e0bfff17 	ldw	r2,-4(fp)
 400ac34:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400ac38:	10bfffc4 	addi	r2,r2,-1
 400ac3c:	103ffe1e 	bne	r2,zero,400ac38 <__ram_exceptions_end+0xfbfea9f0>
 400ac40:	00000d06 	br	400ac78 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400ac44:	e0fffd17 	ldw	r3,-12(fp)
 400ac48:	008003f4 	movhi	r2,15
 400ac4c:	10909004 	addi	r2,r2,16960
 400ac50:	1885383a 	mul	r2,r3,r2
 400ac54:	100b883a 	mov	r5,r2
 400ac58:	0100bef4 	movhi	r4,763
 400ac5c:	213c2004 	addi	r4,r4,-3968
 400ac60:	4002a480 	call	4002a48 <__udivsi3>
 400ac64:	1007883a 	mov	r3,r2
 400ac68:	e0bfff17 	ldw	r2,-4(fp)
 400ac6c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400ac70:	10bfffc4 	addi	r2,r2,-1
 400ac74:	00bffe16 	blt	zero,r2,400ac70 <__ram_exceptions_end+0xfbfeaa28>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400ac78:	0005883a 	mov	r2,zero
}
 400ac7c:	e037883a 	mov	sp,fp
 400ac80:	dfc00117 	ldw	ra,4(sp)
 400ac84:	df000017 	ldw	fp,0(sp)
 400ac88:	dec00204 	addi	sp,sp,8
 400ac8c:	f800283a 	ret

0400ac90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400ac90:	defffe04 	addi	sp,sp,-8
 400ac94:	df000115 	stw	fp,4(sp)
 400ac98:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400ac9c:	e03fff15 	stw	zero,-4(fp)
 400aca0:	00000506 	br	400acb8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400aca4:	e0bfff17 	ldw	r2,-4(fp)
 400aca8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400acac:	e0bfff17 	ldw	r2,-4(fp)
 400acb0:	10800804 	addi	r2,r2,32
 400acb4:	e0bfff15 	stw	r2,-4(fp)
 400acb8:	e0bfff17 	ldw	r2,-4(fp)
 400acbc:	10820030 	cmpltui	r2,r2,2048
 400acc0:	103ff81e 	bne	r2,zero,400aca4 <__ram_exceptions_end+0xfbfeaa5c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400acc4:	0001883a 	nop
 400acc8:	e037883a 	mov	sp,fp
 400accc:	df000017 	ldw	fp,0(sp)
 400acd0:	dec00104 	addi	sp,sp,4
 400acd4:	f800283a 	ret

0400acd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400acd8:	defffe04 	addi	sp,sp,-8
 400acdc:	dfc00115 	stw	ra,4(sp)
 400ace0:	df000015 	stw	fp,0(sp)
 400ace4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ace8:	d0a00917 	ldw	r2,-32732(gp)
 400acec:	10000326 	beq	r2,zero,400acfc <alt_get_errno+0x24>
 400acf0:	d0a00917 	ldw	r2,-32732(gp)
 400acf4:	103ee83a 	callr	r2
 400acf8:	00000106 	br	400ad00 <alt_get_errno+0x28>
 400acfc:	d0a6c404 	addi	r2,gp,-25840
}
 400ad00:	e037883a 	mov	sp,fp
 400ad04:	dfc00117 	ldw	ra,4(sp)
 400ad08:	df000017 	ldw	fp,0(sp)
 400ad0c:	dec00204 	addi	sp,sp,8
 400ad10:	f800283a 	ret

0400ad14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400ad14:	defffa04 	addi	sp,sp,-24
 400ad18:	dfc00515 	stw	ra,20(sp)
 400ad1c:	df000415 	stw	fp,16(sp)
 400ad20:	df000404 	addi	fp,sp,16
 400ad24:	e13ffe15 	stw	r4,-8(fp)
 400ad28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400ad2c:	e0bffe17 	ldw	r2,-8(fp)
 400ad30:	10000326 	beq	r2,zero,400ad40 <alt_dev_llist_insert+0x2c>
 400ad34:	e0bffe17 	ldw	r2,-8(fp)
 400ad38:	10800217 	ldw	r2,8(r2)
 400ad3c:	1000061e 	bne	r2,zero,400ad58 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400ad40:	400acd80 	call	400acd8 <alt_get_errno>
 400ad44:	1007883a 	mov	r3,r2
 400ad48:	00800584 	movi	r2,22
 400ad4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400ad50:	00bffa84 	movi	r2,-22
 400ad54:	00001306 	br	400ada4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400ad58:	e0bffe17 	ldw	r2,-8(fp)
 400ad5c:	e0ffff17 	ldw	r3,-4(fp)
 400ad60:	e0fffc15 	stw	r3,-16(fp)
 400ad64:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400ad68:	e0bffd17 	ldw	r2,-12(fp)
 400ad6c:	e0fffc17 	ldw	r3,-16(fp)
 400ad70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400ad74:	e0bffc17 	ldw	r2,-16(fp)
 400ad78:	10c00017 	ldw	r3,0(r2)
 400ad7c:	e0bffd17 	ldw	r2,-12(fp)
 400ad80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400ad84:	e0bffc17 	ldw	r2,-16(fp)
 400ad88:	10800017 	ldw	r2,0(r2)
 400ad8c:	e0fffd17 	ldw	r3,-12(fp)
 400ad90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400ad94:	e0bffc17 	ldw	r2,-16(fp)
 400ad98:	e0fffd17 	ldw	r3,-12(fp)
 400ad9c:	10c00015 	stw	r3,0(r2)

  return 0;  
 400ada0:	0005883a 	mov	r2,zero
}
 400ada4:	e037883a 	mov	sp,fp
 400ada8:	dfc00117 	ldw	ra,4(sp)
 400adac:	df000017 	ldw	fp,0(sp)
 400adb0:	dec00204 	addi	sp,sp,8
 400adb4:	f800283a 	ret

0400adb8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400adb8:	defffd04 	addi	sp,sp,-12
 400adbc:	dfc00215 	stw	ra,8(sp)
 400adc0:	df000115 	stw	fp,4(sp)
 400adc4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400adc8:	00810074 	movhi	r2,1025
 400adcc:	10af2004 	addi	r2,r2,-17280
 400add0:	e0bfff15 	stw	r2,-4(fp)
 400add4:	00000606 	br	400adf0 <_do_ctors+0x38>
        (*ctor) (); 
 400add8:	e0bfff17 	ldw	r2,-4(fp)
 400addc:	10800017 	ldw	r2,0(r2)
 400ade0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400ade4:	e0bfff17 	ldw	r2,-4(fp)
 400ade8:	10bfff04 	addi	r2,r2,-4
 400adec:	e0bfff15 	stw	r2,-4(fp)
 400adf0:	e0ffff17 	ldw	r3,-4(fp)
 400adf4:	00810074 	movhi	r2,1025
 400adf8:	10af2104 	addi	r2,r2,-17276
 400adfc:	18bff62e 	bgeu	r3,r2,400add8 <__ram_exceptions_end+0xfbfeab90>
        (*ctor) (); 
}
 400ae00:	0001883a 	nop
 400ae04:	e037883a 	mov	sp,fp
 400ae08:	dfc00117 	ldw	ra,4(sp)
 400ae0c:	df000017 	ldw	fp,0(sp)
 400ae10:	dec00204 	addi	sp,sp,8
 400ae14:	f800283a 	ret

0400ae18 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400ae18:	defffd04 	addi	sp,sp,-12
 400ae1c:	dfc00215 	stw	ra,8(sp)
 400ae20:	df000115 	stw	fp,4(sp)
 400ae24:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400ae28:	00810074 	movhi	r2,1025
 400ae2c:	10af2004 	addi	r2,r2,-17280
 400ae30:	e0bfff15 	stw	r2,-4(fp)
 400ae34:	00000606 	br	400ae50 <_do_dtors+0x38>
        (*dtor) (); 
 400ae38:	e0bfff17 	ldw	r2,-4(fp)
 400ae3c:	10800017 	ldw	r2,0(r2)
 400ae40:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400ae44:	e0bfff17 	ldw	r2,-4(fp)
 400ae48:	10bfff04 	addi	r2,r2,-4
 400ae4c:	e0bfff15 	stw	r2,-4(fp)
 400ae50:	e0ffff17 	ldw	r3,-4(fp)
 400ae54:	00810074 	movhi	r2,1025
 400ae58:	10af2104 	addi	r2,r2,-17276
 400ae5c:	18bff62e 	bgeu	r3,r2,400ae38 <__ram_exceptions_end+0xfbfeabf0>
        (*dtor) (); 
}
 400ae60:	0001883a 	nop
 400ae64:	e037883a 	mov	sp,fp
 400ae68:	dfc00117 	ldw	ra,4(sp)
 400ae6c:	df000017 	ldw	fp,0(sp)
 400ae70:	dec00204 	addi	sp,sp,8
 400ae74:	f800283a 	ret

0400ae78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400ae78:	defffa04 	addi	sp,sp,-24
 400ae7c:	dfc00515 	stw	ra,20(sp)
 400ae80:	df000415 	stw	fp,16(sp)
 400ae84:	df000404 	addi	fp,sp,16
 400ae88:	e13ffe15 	stw	r4,-8(fp)
 400ae8c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400ae90:	e0bfff17 	ldw	r2,-4(fp)
 400ae94:	10800017 	ldw	r2,0(r2)
 400ae98:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400ae9c:	e13ffe17 	ldw	r4,-8(fp)
 400aea0:	4005b840 	call	4005b84 <strlen>
 400aea4:	10800044 	addi	r2,r2,1
 400aea8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400aeac:	00000d06 	br	400aee4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400aeb0:	e0bffc17 	ldw	r2,-16(fp)
 400aeb4:	10800217 	ldw	r2,8(r2)
 400aeb8:	e0fffd17 	ldw	r3,-12(fp)
 400aebc:	180d883a 	mov	r6,r3
 400aec0:	e17ffe17 	ldw	r5,-8(fp)
 400aec4:	1009883a 	mov	r4,r2
 400aec8:	400b93c0 	call	400b93c <memcmp>
 400aecc:	1000021e 	bne	r2,zero,400aed8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400aed0:	e0bffc17 	ldw	r2,-16(fp)
 400aed4:	00000706 	br	400aef4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400aed8:	e0bffc17 	ldw	r2,-16(fp)
 400aedc:	10800017 	ldw	r2,0(r2)
 400aee0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400aee4:	e0fffc17 	ldw	r3,-16(fp)
 400aee8:	e0bfff17 	ldw	r2,-4(fp)
 400aeec:	18bff01e 	bne	r3,r2,400aeb0 <__ram_exceptions_end+0xfbfeac68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400aef0:	0005883a 	mov	r2,zero
}
 400aef4:	e037883a 	mov	sp,fp
 400aef8:	dfc00117 	ldw	ra,4(sp)
 400aefc:	df000017 	ldw	fp,0(sp)
 400af00:	dec00204 	addi	sp,sp,8
 400af04:	f800283a 	ret

0400af08 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400af08:	defffe04 	addi	sp,sp,-8
 400af0c:	dfc00115 	stw	ra,4(sp)
 400af10:	df000015 	stw	fp,0(sp)
 400af14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400af18:	01440004 	movi	r5,4096
 400af1c:	0009883a 	mov	r4,zero
 400af20:	400b7c40 	call	400b7c4 <alt_icache_flush>
#endif
}
 400af24:	0001883a 	nop
 400af28:	e037883a 	mov	sp,fp
 400af2c:	dfc00117 	ldw	ra,4(sp)
 400af30:	df000017 	ldw	fp,0(sp)
 400af34:	dec00204 	addi	sp,sp,8
 400af38:	f800283a 	ret

0400af3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400af3c:	defff904 	addi	sp,sp,-28
 400af40:	dfc00615 	stw	ra,24(sp)
 400af44:	df000515 	stw	fp,20(sp)
 400af48:	df000504 	addi	fp,sp,20
 400af4c:	e13ffc15 	stw	r4,-16(fp)
 400af50:	e17ffd15 	stw	r5,-12(fp)
 400af54:	e1bffe15 	stw	r6,-8(fp)
 400af58:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400af5c:	e1bfff17 	ldw	r6,-4(fp)
 400af60:	e17ffe17 	ldw	r5,-8(fp)
 400af64:	e13ffd17 	ldw	r4,-12(fp)
 400af68:	400b2fc0 	call	400b2fc <open>
 400af6c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400af70:	e0bffb17 	ldw	r2,-20(fp)
 400af74:	10001c16 	blt	r2,zero,400afe8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 400af78:	00810074 	movhi	r2,1025
 400af7c:	10b23004 	addi	r2,r2,-14144
 400af80:	e0fffb17 	ldw	r3,-20(fp)
 400af84:	18c00324 	muli	r3,r3,12
 400af88:	10c5883a 	add	r2,r2,r3
 400af8c:	10c00017 	ldw	r3,0(r2)
 400af90:	e0bffc17 	ldw	r2,-16(fp)
 400af94:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400af98:	00810074 	movhi	r2,1025
 400af9c:	10b23004 	addi	r2,r2,-14144
 400afa0:	e0fffb17 	ldw	r3,-20(fp)
 400afa4:	18c00324 	muli	r3,r3,12
 400afa8:	10c5883a 	add	r2,r2,r3
 400afac:	10800104 	addi	r2,r2,4
 400afb0:	10c00017 	ldw	r3,0(r2)
 400afb4:	e0bffc17 	ldw	r2,-16(fp)
 400afb8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400afbc:	00810074 	movhi	r2,1025
 400afc0:	10b23004 	addi	r2,r2,-14144
 400afc4:	e0fffb17 	ldw	r3,-20(fp)
 400afc8:	18c00324 	muli	r3,r3,12
 400afcc:	10c5883a 	add	r2,r2,r3
 400afd0:	10800204 	addi	r2,r2,8
 400afd4:	10c00017 	ldw	r3,0(r2)
 400afd8:	e0bffc17 	ldw	r2,-16(fp)
 400afdc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400afe0:	e13ffb17 	ldw	r4,-20(fp)
 400afe4:	4008dc00 	call	4008dc0 <alt_release_fd>
  }
} 
 400afe8:	0001883a 	nop
 400afec:	e037883a 	mov	sp,fp
 400aff0:	dfc00117 	ldw	ra,4(sp)
 400aff4:	df000017 	ldw	fp,0(sp)
 400aff8:	dec00204 	addi	sp,sp,8
 400affc:	f800283a 	ret

0400b000 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400b000:	defffb04 	addi	sp,sp,-20
 400b004:	dfc00415 	stw	ra,16(sp)
 400b008:	df000315 	stw	fp,12(sp)
 400b00c:	df000304 	addi	fp,sp,12
 400b010:	e13ffd15 	stw	r4,-12(fp)
 400b014:	e17ffe15 	stw	r5,-8(fp)
 400b018:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400b01c:	01c07fc4 	movi	r7,511
 400b020:	01800044 	movi	r6,1
 400b024:	e17ffd17 	ldw	r5,-12(fp)
 400b028:	01010074 	movhi	r4,1025
 400b02c:	21323304 	addi	r4,r4,-14132
 400b030:	400af3c0 	call	400af3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400b034:	01c07fc4 	movi	r7,511
 400b038:	000d883a 	mov	r6,zero
 400b03c:	e17ffe17 	ldw	r5,-8(fp)
 400b040:	01010074 	movhi	r4,1025
 400b044:	21323004 	addi	r4,r4,-14144
 400b048:	400af3c0 	call	400af3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400b04c:	01c07fc4 	movi	r7,511
 400b050:	01800044 	movi	r6,1
 400b054:	e17fff17 	ldw	r5,-4(fp)
 400b058:	01010074 	movhi	r4,1025
 400b05c:	21323604 	addi	r4,r4,-14120
 400b060:	400af3c0 	call	400af3c <alt_open_fd>
}  
 400b064:	0001883a 	nop
 400b068:	e037883a 	mov	sp,fp
 400b06c:	dfc00117 	ldw	ra,4(sp)
 400b070:	df000017 	ldw	fp,0(sp)
 400b074:	dec00204 	addi	sp,sp,8
 400b078:	f800283a 	ret

0400b07c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 400b07c:	defff004 	addi	sp,sp,-64
 400b080:	df000f15 	stw	fp,60(sp)
 400b084:	df000f04 	addi	fp,sp,60
 400b088:	e13ffd15 	stw	r4,-12(fp)
 400b08c:	e17ffe15 	stw	r5,-8(fp)
 400b090:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 400b094:	00bffa84 	movi	r2,-22
 400b098:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400b09c:	e0bffd17 	ldw	r2,-12(fp)
 400b0a0:	10800828 	cmpgeui	r2,r2,32
 400b0a4:	1000501e 	bne	r2,zero,400b1e8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b0a8:	0005303a 	rdctl	r2,status
 400b0ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b0b0:	e0fff617 	ldw	r3,-40(fp)
 400b0b4:	00bfff84 	movi	r2,-2
 400b0b8:	1884703a 	and	r2,r3,r2
 400b0bc:	1001703a 	wrctl	status,r2
  
  return context;
 400b0c0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 400b0c4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 400b0c8:	00810074 	movhi	r2,1025
 400b0cc:	10bd9604 	addi	r2,r2,-2472
 400b0d0:	e0fffd17 	ldw	r3,-12(fp)
 400b0d4:	180690fa 	slli	r3,r3,3
 400b0d8:	10c5883a 	add	r2,r2,r3
 400b0dc:	e0ffff17 	ldw	r3,-4(fp)
 400b0e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 400b0e4:	00810074 	movhi	r2,1025
 400b0e8:	10bd9604 	addi	r2,r2,-2472
 400b0ec:	e0fffd17 	ldw	r3,-12(fp)
 400b0f0:	180690fa 	slli	r3,r3,3
 400b0f4:	10c5883a 	add	r2,r2,r3
 400b0f8:	10800104 	addi	r2,r2,4
 400b0fc:	e0fffe17 	ldw	r3,-8(fp)
 400b100:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 400b104:	e0bfff17 	ldw	r2,-4(fp)
 400b108:	10001926 	beq	r2,zero,400b170 <alt_irq_register+0xf4>
 400b10c:	e0bffd17 	ldw	r2,-12(fp)
 400b110:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b114:	0005303a 	rdctl	r2,status
 400b118:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b11c:	e0fff717 	ldw	r3,-36(fp)
 400b120:	00bfff84 	movi	r2,-2
 400b124:	1884703a 	and	r2,r3,r2
 400b128:	1001703a 	wrctl	status,r2
  
  return context;
 400b12c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400b130:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 400b134:	00c00044 	movi	r3,1
 400b138:	e0bff217 	ldw	r2,-56(fp)
 400b13c:	1884983a 	sll	r2,r3,r2
 400b140:	1007883a 	mov	r3,r2
 400b144:	d0a6c817 	ldw	r2,-25824(gp)
 400b148:	1884b03a 	or	r2,r3,r2
 400b14c:	d0a6c815 	stw	r2,-25824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400b150:	d0a6c817 	ldw	r2,-25824(gp)
 400b154:	100170fa 	wrctl	ienable,r2
 400b158:	e0bff817 	ldw	r2,-32(fp)
 400b15c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b160:	e0bff917 	ldw	r2,-28(fp)
 400b164:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400b168:	0005883a 	mov	r2,zero
 400b16c:	00001906 	br	400b1d4 <alt_irq_register+0x158>
 400b170:	e0bffd17 	ldw	r2,-12(fp)
 400b174:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b178:	0005303a 	rdctl	r2,status
 400b17c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b180:	e0fffa17 	ldw	r3,-24(fp)
 400b184:	00bfff84 	movi	r2,-2
 400b188:	1884703a 	and	r2,r3,r2
 400b18c:	1001703a 	wrctl	status,r2
  
  return context;
 400b190:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400b194:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 400b198:	00c00044 	movi	r3,1
 400b19c:	e0bff417 	ldw	r2,-48(fp)
 400b1a0:	1884983a 	sll	r2,r3,r2
 400b1a4:	0084303a 	nor	r2,zero,r2
 400b1a8:	1007883a 	mov	r3,r2
 400b1ac:	d0a6c817 	ldw	r2,-25824(gp)
 400b1b0:	1884703a 	and	r2,r3,r2
 400b1b4:	d0a6c815 	stw	r2,-25824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400b1b8:	d0a6c817 	ldw	r2,-25824(gp)
 400b1bc:	100170fa 	wrctl	ienable,r2
 400b1c0:	e0bffb17 	ldw	r2,-20(fp)
 400b1c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b1c8:	e0bffc17 	ldw	r2,-16(fp)
 400b1cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400b1d0:	0005883a 	mov	r2,zero
 400b1d4:	e0bff115 	stw	r2,-60(fp)
 400b1d8:	e0bff317 	ldw	r2,-52(fp)
 400b1dc:	e0bff515 	stw	r2,-44(fp)
 400b1e0:	e0bff517 	ldw	r2,-44(fp)
 400b1e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 400b1e8:	e0bff117 	ldw	r2,-60(fp)
}
 400b1ec:	e037883a 	mov	sp,fp
 400b1f0:	df000017 	ldw	fp,0(sp)
 400b1f4:	dec00104 	addi	sp,sp,4
 400b1f8:	f800283a 	ret

0400b1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b1fc:	defffe04 	addi	sp,sp,-8
 400b200:	dfc00115 	stw	ra,4(sp)
 400b204:	df000015 	stw	fp,0(sp)
 400b208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b20c:	d0a00917 	ldw	r2,-32732(gp)
 400b210:	10000326 	beq	r2,zero,400b220 <alt_get_errno+0x24>
 400b214:	d0a00917 	ldw	r2,-32732(gp)
 400b218:	103ee83a 	callr	r2
 400b21c:	00000106 	br	400b224 <alt_get_errno+0x28>
 400b220:	d0a6c404 	addi	r2,gp,-25840
}
 400b224:	e037883a 	mov	sp,fp
 400b228:	dfc00117 	ldw	ra,4(sp)
 400b22c:	df000017 	ldw	fp,0(sp)
 400b230:	dec00204 	addi	sp,sp,8
 400b234:	f800283a 	ret

0400b238 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400b238:	defffd04 	addi	sp,sp,-12
 400b23c:	df000215 	stw	fp,8(sp)
 400b240:	df000204 	addi	fp,sp,8
 400b244:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400b248:	e0bfff17 	ldw	r2,-4(fp)
 400b24c:	10800217 	ldw	r2,8(r2)
 400b250:	10d00034 	orhi	r3,r2,16384
 400b254:	e0bfff17 	ldw	r2,-4(fp)
 400b258:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400b25c:	e03ffe15 	stw	zero,-8(fp)
 400b260:	00001d06 	br	400b2d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400b264:	00810074 	movhi	r2,1025
 400b268:	10b23004 	addi	r2,r2,-14144
 400b26c:	e0fffe17 	ldw	r3,-8(fp)
 400b270:	18c00324 	muli	r3,r3,12
 400b274:	10c5883a 	add	r2,r2,r3
 400b278:	10c00017 	ldw	r3,0(r2)
 400b27c:	e0bfff17 	ldw	r2,-4(fp)
 400b280:	10800017 	ldw	r2,0(r2)
 400b284:	1880111e 	bne	r3,r2,400b2cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400b288:	00810074 	movhi	r2,1025
 400b28c:	10b23004 	addi	r2,r2,-14144
 400b290:	e0fffe17 	ldw	r3,-8(fp)
 400b294:	18c00324 	muli	r3,r3,12
 400b298:	10c5883a 	add	r2,r2,r3
 400b29c:	10800204 	addi	r2,r2,8
 400b2a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400b2a4:	1000090e 	bge	r2,zero,400b2cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400b2a8:	e0bffe17 	ldw	r2,-8(fp)
 400b2ac:	10c00324 	muli	r3,r2,12
 400b2b0:	00810074 	movhi	r2,1025
 400b2b4:	10b23004 	addi	r2,r2,-14144
 400b2b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400b2bc:	e0bfff17 	ldw	r2,-4(fp)
 400b2c0:	18800226 	beq	r3,r2,400b2cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400b2c4:	00bffcc4 	movi	r2,-13
 400b2c8:	00000806 	br	400b2ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400b2cc:	e0bffe17 	ldw	r2,-8(fp)
 400b2d0:	10800044 	addi	r2,r2,1
 400b2d4:	e0bffe15 	stw	r2,-8(fp)
 400b2d8:	d0a00817 	ldw	r2,-32736(gp)
 400b2dc:	1007883a 	mov	r3,r2
 400b2e0:	e0bffe17 	ldw	r2,-8(fp)
 400b2e4:	18bfdf2e 	bgeu	r3,r2,400b264 <__ram_exceptions_end+0xfbfeb01c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400b2e8:	0005883a 	mov	r2,zero
}
 400b2ec:	e037883a 	mov	sp,fp
 400b2f0:	df000017 	ldw	fp,0(sp)
 400b2f4:	dec00104 	addi	sp,sp,4
 400b2f8:	f800283a 	ret

0400b2fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400b2fc:	defff604 	addi	sp,sp,-40
 400b300:	dfc00915 	stw	ra,36(sp)
 400b304:	df000815 	stw	fp,32(sp)
 400b308:	df000804 	addi	fp,sp,32
 400b30c:	e13ffd15 	stw	r4,-12(fp)
 400b310:	e17ffe15 	stw	r5,-8(fp)
 400b314:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400b318:	00bfffc4 	movi	r2,-1
 400b31c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400b320:	00bffb44 	movi	r2,-19
 400b324:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400b328:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400b32c:	d1600604 	addi	r5,gp,-32744
 400b330:	e13ffd17 	ldw	r4,-12(fp)
 400b334:	400ae780 	call	400ae78 <alt_find_dev>
 400b338:	e0bff815 	stw	r2,-32(fp)
 400b33c:	e0bff817 	ldw	r2,-32(fp)
 400b340:	1000051e 	bne	r2,zero,400b358 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400b344:	e13ffd17 	ldw	r4,-12(fp)
 400b348:	400b6180 	call	400b618 <alt_find_file>
 400b34c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400b350:	00800044 	movi	r2,1
 400b354:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400b358:	e0bff817 	ldw	r2,-32(fp)
 400b35c:	10002926 	beq	r2,zero,400b404 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400b360:	e13ff817 	ldw	r4,-32(fp)
 400b364:	400b7200 	call	400b720 <alt_get_fd>
 400b368:	e0bff915 	stw	r2,-28(fp)
 400b36c:	e0bff917 	ldw	r2,-28(fp)
 400b370:	1000030e 	bge	r2,zero,400b380 <open+0x84>
    {
      status = index;
 400b374:	e0bff917 	ldw	r2,-28(fp)
 400b378:	e0bffa15 	stw	r2,-24(fp)
 400b37c:	00002306 	br	400b40c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 400b380:	e0bff917 	ldw	r2,-28(fp)
 400b384:	10c00324 	muli	r3,r2,12
 400b388:	00810074 	movhi	r2,1025
 400b38c:	10b23004 	addi	r2,r2,-14144
 400b390:	1885883a 	add	r2,r3,r2
 400b394:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400b398:	e0fffe17 	ldw	r3,-8(fp)
 400b39c:	00900034 	movhi	r2,16384
 400b3a0:	10bfffc4 	addi	r2,r2,-1
 400b3a4:	1886703a 	and	r3,r3,r2
 400b3a8:	e0bffc17 	ldw	r2,-16(fp)
 400b3ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400b3b0:	e0bffb17 	ldw	r2,-20(fp)
 400b3b4:	1000051e 	bne	r2,zero,400b3cc <open+0xd0>
 400b3b8:	e13ffc17 	ldw	r4,-16(fp)
 400b3bc:	400b2380 	call	400b238 <alt_file_locked>
 400b3c0:	e0bffa15 	stw	r2,-24(fp)
 400b3c4:	e0bffa17 	ldw	r2,-24(fp)
 400b3c8:	10001016 	blt	r2,zero,400b40c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400b3cc:	e0bff817 	ldw	r2,-32(fp)
 400b3d0:	10800317 	ldw	r2,12(r2)
 400b3d4:	10000826 	beq	r2,zero,400b3f8 <open+0xfc>
 400b3d8:	e0bff817 	ldw	r2,-32(fp)
 400b3dc:	10800317 	ldw	r2,12(r2)
 400b3e0:	e1ffff17 	ldw	r7,-4(fp)
 400b3e4:	e1bffe17 	ldw	r6,-8(fp)
 400b3e8:	e17ffd17 	ldw	r5,-12(fp)
 400b3ec:	e13ffc17 	ldw	r4,-16(fp)
 400b3f0:	103ee83a 	callr	r2
 400b3f4:	00000106 	br	400b3fc <open+0x100>
 400b3f8:	0005883a 	mov	r2,zero
 400b3fc:	e0bffa15 	stw	r2,-24(fp)
 400b400:	00000206 	br	400b40c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400b404:	00bffb44 	movi	r2,-19
 400b408:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400b40c:	e0bffa17 	ldw	r2,-24(fp)
 400b410:	1000090e 	bge	r2,zero,400b438 <open+0x13c>
  {
    alt_release_fd (index);  
 400b414:	e13ff917 	ldw	r4,-28(fp)
 400b418:	4008dc00 	call	4008dc0 <alt_release_fd>
    ALT_ERRNO = -status;
 400b41c:	400b1fc0 	call	400b1fc <alt_get_errno>
 400b420:	1007883a 	mov	r3,r2
 400b424:	e0bffa17 	ldw	r2,-24(fp)
 400b428:	0085c83a 	sub	r2,zero,r2
 400b42c:	18800015 	stw	r2,0(r3)
    return -1;
 400b430:	00bfffc4 	movi	r2,-1
 400b434:	00000106 	br	400b43c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 400b438:	e0bff917 	ldw	r2,-28(fp)
}
 400b43c:	e037883a 	mov	sp,fp
 400b440:	dfc00117 	ldw	ra,4(sp)
 400b444:	df000017 	ldw	fp,0(sp)
 400b448:	dec00204 	addi	sp,sp,8
 400b44c:	f800283a 	ret

0400b450 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400b450:	defffa04 	addi	sp,sp,-24
 400b454:	df000515 	stw	fp,20(sp)
 400b458:	df000504 	addi	fp,sp,20
 400b45c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b460:	0005303a 	rdctl	r2,status
 400b464:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b468:	e0fffc17 	ldw	r3,-16(fp)
 400b46c:	00bfff84 	movi	r2,-2
 400b470:	1884703a 	and	r2,r3,r2
 400b474:	1001703a 	wrctl	status,r2
  
  return context;
 400b478:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400b47c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400b480:	e0bfff17 	ldw	r2,-4(fp)
 400b484:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400b488:	e0bffd17 	ldw	r2,-12(fp)
 400b48c:	10800017 	ldw	r2,0(r2)
 400b490:	e0fffd17 	ldw	r3,-12(fp)
 400b494:	18c00117 	ldw	r3,4(r3)
 400b498:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400b49c:	e0bffd17 	ldw	r2,-12(fp)
 400b4a0:	10800117 	ldw	r2,4(r2)
 400b4a4:	e0fffd17 	ldw	r3,-12(fp)
 400b4a8:	18c00017 	ldw	r3,0(r3)
 400b4ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400b4b0:	e0bffd17 	ldw	r2,-12(fp)
 400b4b4:	e0fffd17 	ldw	r3,-12(fp)
 400b4b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400b4bc:	e0bffd17 	ldw	r2,-12(fp)
 400b4c0:	e0fffd17 	ldw	r3,-12(fp)
 400b4c4:	10c00015 	stw	r3,0(r2)
 400b4c8:	e0bffb17 	ldw	r2,-20(fp)
 400b4cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b4d0:	e0bffe17 	ldw	r2,-8(fp)
 400b4d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400b4d8:	0001883a 	nop
 400b4dc:	e037883a 	mov	sp,fp
 400b4e0:	df000017 	ldw	fp,0(sp)
 400b4e4:	dec00104 	addi	sp,sp,4
 400b4e8:	f800283a 	ret

0400b4ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400b4ec:	defffb04 	addi	sp,sp,-20
 400b4f0:	dfc00415 	stw	ra,16(sp)
 400b4f4:	df000315 	stw	fp,12(sp)
 400b4f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400b4fc:	d0a00c17 	ldw	r2,-32720(gp)
 400b500:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400b504:	d0a6ca17 	ldw	r2,-25816(gp)
 400b508:	10800044 	addi	r2,r2,1
 400b50c:	d0a6ca15 	stw	r2,-25816(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400b510:	00002e06 	br	400b5cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400b514:	e0bffd17 	ldw	r2,-12(fp)
 400b518:	10800017 	ldw	r2,0(r2)
 400b51c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400b520:	e0bffd17 	ldw	r2,-12(fp)
 400b524:	10800403 	ldbu	r2,16(r2)
 400b528:	10803fcc 	andi	r2,r2,255
 400b52c:	10000426 	beq	r2,zero,400b540 <alt_tick+0x54>
 400b530:	d0a6ca17 	ldw	r2,-25816(gp)
 400b534:	1000021e 	bne	r2,zero,400b540 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400b538:	e0bffd17 	ldw	r2,-12(fp)
 400b53c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400b540:	e0bffd17 	ldw	r2,-12(fp)
 400b544:	10800217 	ldw	r2,8(r2)
 400b548:	d0e6ca17 	ldw	r3,-25816(gp)
 400b54c:	18801d36 	bltu	r3,r2,400b5c4 <alt_tick+0xd8>
 400b550:	e0bffd17 	ldw	r2,-12(fp)
 400b554:	10800403 	ldbu	r2,16(r2)
 400b558:	10803fcc 	andi	r2,r2,255
 400b55c:	1000191e 	bne	r2,zero,400b5c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400b560:	e0bffd17 	ldw	r2,-12(fp)
 400b564:	10800317 	ldw	r2,12(r2)
 400b568:	e0fffd17 	ldw	r3,-12(fp)
 400b56c:	18c00517 	ldw	r3,20(r3)
 400b570:	1809883a 	mov	r4,r3
 400b574:	103ee83a 	callr	r2
 400b578:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400b57c:	e0bfff17 	ldw	r2,-4(fp)
 400b580:	1000031e 	bne	r2,zero,400b590 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400b584:	e13ffd17 	ldw	r4,-12(fp)
 400b588:	400b4500 	call	400b450 <alt_alarm_stop>
 400b58c:	00000d06 	br	400b5c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400b590:	e0bffd17 	ldw	r2,-12(fp)
 400b594:	10c00217 	ldw	r3,8(r2)
 400b598:	e0bfff17 	ldw	r2,-4(fp)
 400b59c:	1887883a 	add	r3,r3,r2
 400b5a0:	e0bffd17 	ldw	r2,-12(fp)
 400b5a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400b5a8:	e0bffd17 	ldw	r2,-12(fp)
 400b5ac:	10c00217 	ldw	r3,8(r2)
 400b5b0:	d0a6ca17 	ldw	r2,-25816(gp)
 400b5b4:	1880032e 	bgeu	r3,r2,400b5c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400b5b8:	e0bffd17 	ldw	r2,-12(fp)
 400b5bc:	00c00044 	movi	r3,1
 400b5c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400b5c4:	e0bffe17 	ldw	r2,-8(fp)
 400b5c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400b5cc:	e0fffd17 	ldw	r3,-12(fp)
 400b5d0:	d0a00c04 	addi	r2,gp,-32720
 400b5d4:	18bfcf1e 	bne	r3,r2,400b514 <__ram_exceptions_end+0xfbfeb2cc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400b5d8:	0001883a 	nop
}
 400b5dc:	0001883a 	nop
 400b5e0:	e037883a 	mov	sp,fp
 400b5e4:	dfc00117 	ldw	ra,4(sp)
 400b5e8:	df000017 	ldw	fp,0(sp)
 400b5ec:	dec00204 	addi	sp,sp,8
 400b5f0:	f800283a 	ret

0400b5f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400b5f4:	deffff04 	addi	sp,sp,-4
 400b5f8:	df000015 	stw	fp,0(sp)
 400b5fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400b600:	000170fa 	wrctl	ienable,zero
}
 400b604:	0001883a 	nop
 400b608:	e037883a 	mov	sp,fp
 400b60c:	df000017 	ldw	fp,0(sp)
 400b610:	dec00104 	addi	sp,sp,4
 400b614:	f800283a 	ret

0400b618 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400b618:	defffb04 	addi	sp,sp,-20
 400b61c:	dfc00415 	stw	ra,16(sp)
 400b620:	df000315 	stw	fp,12(sp)
 400b624:	df000304 	addi	fp,sp,12
 400b628:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400b62c:	d0a00417 	ldw	r2,-32752(gp)
 400b630:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400b634:	00003106 	br	400b6fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400b638:	e0bffd17 	ldw	r2,-12(fp)
 400b63c:	10800217 	ldw	r2,8(r2)
 400b640:	1009883a 	mov	r4,r2
 400b644:	4005b840 	call	4005b84 <strlen>
 400b648:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400b64c:	e0bffd17 	ldw	r2,-12(fp)
 400b650:	10c00217 	ldw	r3,8(r2)
 400b654:	e0bffe17 	ldw	r2,-8(fp)
 400b658:	10bfffc4 	addi	r2,r2,-1
 400b65c:	1885883a 	add	r2,r3,r2
 400b660:	10800003 	ldbu	r2,0(r2)
 400b664:	10803fcc 	andi	r2,r2,255
 400b668:	1080201c 	xori	r2,r2,128
 400b66c:	10bfe004 	addi	r2,r2,-128
 400b670:	10800bd8 	cmpnei	r2,r2,47
 400b674:	1000031e 	bne	r2,zero,400b684 <alt_find_file+0x6c>
    {
      len -= 1;
 400b678:	e0bffe17 	ldw	r2,-8(fp)
 400b67c:	10bfffc4 	addi	r2,r2,-1
 400b680:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400b684:	e0bffe17 	ldw	r2,-8(fp)
 400b688:	e0ffff17 	ldw	r3,-4(fp)
 400b68c:	1885883a 	add	r2,r3,r2
 400b690:	10800003 	ldbu	r2,0(r2)
 400b694:	10803fcc 	andi	r2,r2,255
 400b698:	1080201c 	xori	r2,r2,128
 400b69c:	10bfe004 	addi	r2,r2,-128
 400b6a0:	10800be0 	cmpeqi	r2,r2,47
 400b6a4:	1000081e 	bne	r2,zero,400b6c8 <alt_find_file+0xb0>
 400b6a8:	e0bffe17 	ldw	r2,-8(fp)
 400b6ac:	e0ffff17 	ldw	r3,-4(fp)
 400b6b0:	1885883a 	add	r2,r3,r2
 400b6b4:	10800003 	ldbu	r2,0(r2)
 400b6b8:	10803fcc 	andi	r2,r2,255
 400b6bc:	1080201c 	xori	r2,r2,128
 400b6c0:	10bfe004 	addi	r2,r2,-128
 400b6c4:	10000a1e 	bne	r2,zero,400b6f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400b6c8:	e0bffd17 	ldw	r2,-12(fp)
 400b6cc:	10800217 	ldw	r2,8(r2)
 400b6d0:	e0fffe17 	ldw	r3,-8(fp)
 400b6d4:	180d883a 	mov	r6,r3
 400b6d8:	e17fff17 	ldw	r5,-4(fp)
 400b6dc:	1009883a 	mov	r4,r2
 400b6e0:	400b93c0 	call	400b93c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400b6e4:	1000021e 	bne	r2,zero,400b6f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400b6e8:	e0bffd17 	ldw	r2,-12(fp)
 400b6ec:	00000706 	br	400b70c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400b6f0:	e0bffd17 	ldw	r2,-12(fp)
 400b6f4:	10800017 	ldw	r2,0(r2)
 400b6f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400b6fc:	e0fffd17 	ldw	r3,-12(fp)
 400b700:	d0a00404 	addi	r2,gp,-32752
 400b704:	18bfcc1e 	bne	r3,r2,400b638 <__ram_exceptions_end+0xfbfeb3f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400b708:	0005883a 	mov	r2,zero
}
 400b70c:	e037883a 	mov	sp,fp
 400b710:	dfc00117 	ldw	ra,4(sp)
 400b714:	df000017 	ldw	fp,0(sp)
 400b718:	dec00204 	addi	sp,sp,8
 400b71c:	f800283a 	ret

0400b720 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400b720:	defffc04 	addi	sp,sp,-16
 400b724:	df000315 	stw	fp,12(sp)
 400b728:	df000304 	addi	fp,sp,12
 400b72c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400b730:	00bffa04 	movi	r2,-24
 400b734:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400b738:	e03ffd15 	stw	zero,-12(fp)
 400b73c:	00001906 	br	400b7a4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 400b740:	00810074 	movhi	r2,1025
 400b744:	10b23004 	addi	r2,r2,-14144
 400b748:	e0fffd17 	ldw	r3,-12(fp)
 400b74c:	18c00324 	muli	r3,r3,12
 400b750:	10c5883a 	add	r2,r2,r3
 400b754:	10800017 	ldw	r2,0(r2)
 400b758:	10000f1e 	bne	r2,zero,400b798 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 400b75c:	00810074 	movhi	r2,1025
 400b760:	10b23004 	addi	r2,r2,-14144
 400b764:	e0fffd17 	ldw	r3,-12(fp)
 400b768:	18c00324 	muli	r3,r3,12
 400b76c:	10c5883a 	add	r2,r2,r3
 400b770:	e0ffff17 	ldw	r3,-4(fp)
 400b774:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400b778:	d0e00817 	ldw	r3,-32736(gp)
 400b77c:	e0bffd17 	ldw	r2,-12(fp)
 400b780:	1880020e 	bge	r3,r2,400b78c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 400b784:	e0bffd17 	ldw	r2,-12(fp)
 400b788:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 400b78c:	e0bffd17 	ldw	r2,-12(fp)
 400b790:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400b794:	00000606 	br	400b7b0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400b798:	e0bffd17 	ldw	r2,-12(fp)
 400b79c:	10800044 	addi	r2,r2,1
 400b7a0:	e0bffd15 	stw	r2,-12(fp)
 400b7a4:	e0bffd17 	ldw	r2,-12(fp)
 400b7a8:	10800810 	cmplti	r2,r2,32
 400b7ac:	103fe41e 	bne	r2,zero,400b740 <__ram_exceptions_end+0xfbfeb4f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400b7b0:	e0bffe17 	ldw	r2,-8(fp)
}
 400b7b4:	e037883a 	mov	sp,fp
 400b7b8:	df000017 	ldw	fp,0(sp)
 400b7bc:	dec00104 	addi	sp,sp,4
 400b7c0:	f800283a 	ret

0400b7c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400b7c4:	defffb04 	addi	sp,sp,-20
 400b7c8:	df000415 	stw	fp,16(sp)
 400b7cc:	df000404 	addi	fp,sp,16
 400b7d0:	e13ffe15 	stw	r4,-8(fp)
 400b7d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400b7d8:	e0bfff17 	ldw	r2,-4(fp)
 400b7dc:	10840070 	cmpltui	r2,r2,4097
 400b7e0:	1000021e 	bne	r2,zero,400b7ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400b7e4:	00840004 	movi	r2,4096
 400b7e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400b7ec:	e0fffe17 	ldw	r3,-8(fp)
 400b7f0:	e0bfff17 	ldw	r2,-4(fp)
 400b7f4:	1885883a 	add	r2,r3,r2
 400b7f8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400b7fc:	e0bffe17 	ldw	r2,-8(fp)
 400b800:	e0bffc15 	stw	r2,-16(fp)
 400b804:	00000506 	br	400b81c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400b808:	e0bffc17 	ldw	r2,-16(fp)
 400b80c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400b810:	e0bffc17 	ldw	r2,-16(fp)
 400b814:	10800804 	addi	r2,r2,32
 400b818:	e0bffc15 	stw	r2,-16(fp)
 400b81c:	e0fffc17 	ldw	r3,-16(fp)
 400b820:	e0bffd17 	ldw	r2,-12(fp)
 400b824:	18bff836 	bltu	r3,r2,400b808 <__ram_exceptions_end+0xfbfeb5c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400b828:	e0bffe17 	ldw	r2,-8(fp)
 400b82c:	108007cc 	andi	r2,r2,31
 400b830:	10000226 	beq	r2,zero,400b83c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400b834:	e0bffc17 	ldw	r2,-16(fp)
 400b838:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400b83c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400b840:	0001883a 	nop
 400b844:	e037883a 	mov	sp,fp
 400b848:	df000017 	ldw	fp,0(sp)
 400b84c:	dec00104 	addi	sp,sp,4
 400b850:	f800283a 	ret

0400b854 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400b854:	defffe04 	addi	sp,sp,-8
 400b858:	df000115 	stw	fp,4(sp)
 400b85c:	df000104 	addi	fp,sp,4
 400b860:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400b864:	e0bfff17 	ldw	r2,-4(fp)
 400b868:	10bffe84 	addi	r2,r2,-6
 400b86c:	10c00428 	cmpgeui	r3,r2,16
 400b870:	18001a1e 	bne	r3,zero,400b8dc <alt_exception_cause_generated_bad_addr+0x88>
 400b874:	100690ba 	slli	r3,r2,2
 400b878:	00810074 	movhi	r2,1025
 400b87c:	10ae2304 	addi	r2,r2,-18292
 400b880:	1885883a 	add	r2,r3,r2
 400b884:	10800017 	ldw	r2,0(r2)
 400b888:	1000683a 	jmp	r2
 400b88c:	0400b8cc 	andi	r16,zero,739
 400b890:	0400b8cc 	andi	r16,zero,739
 400b894:	0400b8dc 	xori	r16,zero,739
 400b898:	0400b8dc 	xori	r16,zero,739
 400b89c:	0400b8dc 	xori	r16,zero,739
 400b8a0:	0400b8cc 	andi	r16,zero,739
 400b8a4:	0400b8d4 	movui	r16,739
 400b8a8:	0400b8dc 	xori	r16,zero,739
 400b8ac:	0400b8cc 	andi	r16,zero,739
 400b8b0:	0400b8cc 	andi	r16,zero,739
 400b8b4:	0400b8dc 	xori	r16,zero,739
 400b8b8:	0400b8cc 	andi	r16,zero,739
 400b8bc:	0400b8d4 	movui	r16,739
 400b8c0:	0400b8dc 	xori	r16,zero,739
 400b8c4:	0400b8dc 	xori	r16,zero,739
 400b8c8:	0400b8cc 	andi	r16,zero,739
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400b8cc:	00800044 	movi	r2,1
 400b8d0:	00000306 	br	400b8e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400b8d4:	0005883a 	mov	r2,zero
 400b8d8:	00000106 	br	400b8e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400b8dc:	0005883a 	mov	r2,zero
  }
}
 400b8e0:	e037883a 	mov	sp,fp
 400b8e4:	df000017 	ldw	fp,0(sp)
 400b8e8:	dec00104 	addi	sp,sp,4
 400b8ec:	f800283a 	ret

0400b8f0 <atexit>:
 400b8f0:	200b883a 	mov	r5,r4
 400b8f4:	000f883a 	mov	r7,zero
 400b8f8:	000d883a 	mov	r6,zero
 400b8fc:	0009883a 	mov	r4,zero
 400b900:	400b9b81 	jmpi	400b9b8 <__register_exitproc>

0400b904 <exit>:
 400b904:	defffe04 	addi	sp,sp,-8
 400b908:	000b883a 	mov	r5,zero
 400b90c:	dc000015 	stw	r16,0(sp)
 400b910:	dfc00115 	stw	ra,4(sp)
 400b914:	2021883a 	mov	r16,r4
 400b918:	400bad00 	call	400bad0 <__call_exitprocs>
 400b91c:	00810074 	movhi	r2,1025
 400b920:	10b6c004 	addi	r2,r2,-9472
 400b924:	11000017 	ldw	r4,0(r2)
 400b928:	20800f17 	ldw	r2,60(r4)
 400b92c:	10000126 	beq	r2,zero,400b934 <exit+0x30>
 400b930:	103ee83a 	callr	r2
 400b934:	8009883a 	mov	r4,r16
 400b938:	400bc500 	call	400bc50 <_exit>

0400b93c <memcmp>:
 400b93c:	01c000c4 	movi	r7,3
 400b940:	3980192e 	bgeu	r7,r6,400b9a8 <memcmp+0x6c>
 400b944:	2144b03a 	or	r2,r4,r5
 400b948:	11c4703a 	and	r2,r2,r7
 400b94c:	10000f26 	beq	r2,zero,400b98c <memcmp+0x50>
 400b950:	20800003 	ldbu	r2,0(r4)
 400b954:	28c00003 	ldbu	r3,0(r5)
 400b958:	10c0151e 	bne	r2,r3,400b9b0 <memcmp+0x74>
 400b95c:	31bfff84 	addi	r6,r6,-2
 400b960:	01ffffc4 	movi	r7,-1
 400b964:	00000406 	br	400b978 <memcmp+0x3c>
 400b968:	20800003 	ldbu	r2,0(r4)
 400b96c:	28c00003 	ldbu	r3,0(r5)
 400b970:	31bfffc4 	addi	r6,r6,-1
 400b974:	10c00e1e 	bne	r2,r3,400b9b0 <memcmp+0x74>
 400b978:	21000044 	addi	r4,r4,1
 400b97c:	29400044 	addi	r5,r5,1
 400b980:	31fff91e 	bne	r6,r7,400b968 <__ram_exceptions_end+0xfbfeb720>
 400b984:	0005883a 	mov	r2,zero
 400b988:	f800283a 	ret
 400b98c:	20c00017 	ldw	r3,0(r4)
 400b990:	28800017 	ldw	r2,0(r5)
 400b994:	18bfee1e 	bne	r3,r2,400b950 <__ram_exceptions_end+0xfbfeb708>
 400b998:	31bfff04 	addi	r6,r6,-4
 400b99c:	21000104 	addi	r4,r4,4
 400b9a0:	29400104 	addi	r5,r5,4
 400b9a4:	39bff936 	bltu	r7,r6,400b98c <__ram_exceptions_end+0xfbfeb744>
 400b9a8:	303fe91e 	bne	r6,zero,400b950 <__ram_exceptions_end+0xfbfeb708>
 400b9ac:	003ff506 	br	400b984 <__ram_exceptions_end+0xfbfeb73c>
 400b9b0:	10c5c83a 	sub	r2,r2,r3
 400b9b4:	f800283a 	ret

0400b9b8 <__register_exitproc>:
 400b9b8:	defffa04 	addi	sp,sp,-24
 400b9bc:	dc000315 	stw	r16,12(sp)
 400b9c0:	04010074 	movhi	r16,1025
 400b9c4:	8436c004 	addi	r16,r16,-9472
 400b9c8:	80c00017 	ldw	r3,0(r16)
 400b9cc:	dc400415 	stw	r17,16(sp)
 400b9d0:	dfc00515 	stw	ra,20(sp)
 400b9d4:	18805217 	ldw	r2,328(r3)
 400b9d8:	2023883a 	mov	r17,r4
 400b9dc:	10003726 	beq	r2,zero,400babc <__register_exitproc+0x104>
 400b9e0:	10c00117 	ldw	r3,4(r2)
 400b9e4:	010007c4 	movi	r4,31
 400b9e8:	20c00e16 	blt	r4,r3,400ba24 <__register_exitproc+0x6c>
 400b9ec:	1a000044 	addi	r8,r3,1
 400b9f0:	8800221e 	bne	r17,zero,400ba7c <__register_exitproc+0xc4>
 400b9f4:	18c00084 	addi	r3,r3,2
 400b9f8:	18c7883a 	add	r3,r3,r3
 400b9fc:	18c7883a 	add	r3,r3,r3
 400ba00:	12000115 	stw	r8,4(r2)
 400ba04:	10c7883a 	add	r3,r2,r3
 400ba08:	19400015 	stw	r5,0(r3)
 400ba0c:	0005883a 	mov	r2,zero
 400ba10:	dfc00517 	ldw	ra,20(sp)
 400ba14:	dc400417 	ldw	r17,16(sp)
 400ba18:	dc000317 	ldw	r16,12(sp)
 400ba1c:	dec00604 	addi	sp,sp,24
 400ba20:	f800283a 	ret
 400ba24:	00800034 	movhi	r2,0
 400ba28:	10800004 	addi	r2,r2,0
 400ba2c:	10002626 	beq	r2,zero,400bac8 <__register_exitproc+0x110>
 400ba30:	01006404 	movi	r4,400
 400ba34:	d9400015 	stw	r5,0(sp)
 400ba38:	d9800115 	stw	r6,4(sp)
 400ba3c:	d9c00215 	stw	r7,8(sp)
 400ba40:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x4000000>
 400ba44:	d9400017 	ldw	r5,0(sp)
 400ba48:	d9800117 	ldw	r6,4(sp)
 400ba4c:	d9c00217 	ldw	r7,8(sp)
 400ba50:	10001d26 	beq	r2,zero,400bac8 <__register_exitproc+0x110>
 400ba54:	81000017 	ldw	r4,0(r16)
 400ba58:	10000115 	stw	zero,4(r2)
 400ba5c:	02000044 	movi	r8,1
 400ba60:	22405217 	ldw	r9,328(r4)
 400ba64:	0007883a 	mov	r3,zero
 400ba68:	12400015 	stw	r9,0(r2)
 400ba6c:	20805215 	stw	r2,328(r4)
 400ba70:	10006215 	stw	zero,392(r2)
 400ba74:	10006315 	stw	zero,396(r2)
 400ba78:	883fde26 	beq	r17,zero,400b9f4 <__ram_exceptions_end+0xfbfeb7ac>
 400ba7c:	18c9883a 	add	r4,r3,r3
 400ba80:	2109883a 	add	r4,r4,r4
 400ba84:	1109883a 	add	r4,r2,r4
 400ba88:	21802215 	stw	r6,136(r4)
 400ba8c:	01800044 	movi	r6,1
 400ba90:	12406217 	ldw	r9,392(r2)
 400ba94:	30cc983a 	sll	r6,r6,r3
 400ba98:	4992b03a 	or	r9,r9,r6
 400ba9c:	12406215 	stw	r9,392(r2)
 400baa0:	21c04215 	stw	r7,264(r4)
 400baa4:	01000084 	movi	r4,2
 400baa8:	893fd21e 	bne	r17,r4,400b9f4 <__ram_exceptions_end+0xfbfeb7ac>
 400baac:	11006317 	ldw	r4,396(r2)
 400bab0:	218cb03a 	or	r6,r4,r6
 400bab4:	11806315 	stw	r6,396(r2)
 400bab8:	003fce06 	br	400b9f4 <__ram_exceptions_end+0xfbfeb7ac>
 400babc:	18805304 	addi	r2,r3,332
 400bac0:	18805215 	stw	r2,328(r3)
 400bac4:	003fc606 	br	400b9e0 <__ram_exceptions_end+0xfbfeb798>
 400bac8:	00bfffc4 	movi	r2,-1
 400bacc:	003fd006 	br	400ba10 <__ram_exceptions_end+0xfbfeb7c8>

0400bad0 <__call_exitprocs>:
 400bad0:	defff504 	addi	sp,sp,-44
 400bad4:	df000915 	stw	fp,36(sp)
 400bad8:	dd400615 	stw	r21,24(sp)
 400badc:	dc800315 	stw	r18,12(sp)
 400bae0:	dfc00a15 	stw	ra,40(sp)
 400bae4:	ddc00815 	stw	r23,32(sp)
 400bae8:	dd800715 	stw	r22,28(sp)
 400baec:	dd000515 	stw	r20,20(sp)
 400baf0:	dcc00415 	stw	r19,16(sp)
 400baf4:	dc400215 	stw	r17,8(sp)
 400baf8:	dc000115 	stw	r16,4(sp)
 400bafc:	d9000015 	stw	r4,0(sp)
 400bb00:	2839883a 	mov	fp,r5
 400bb04:	04800044 	movi	r18,1
 400bb08:	057fffc4 	movi	r21,-1
 400bb0c:	00810074 	movhi	r2,1025
 400bb10:	10b6c004 	addi	r2,r2,-9472
 400bb14:	12000017 	ldw	r8,0(r2)
 400bb18:	45005217 	ldw	r20,328(r8)
 400bb1c:	44c05204 	addi	r19,r8,328
 400bb20:	a0001c26 	beq	r20,zero,400bb94 <__call_exitprocs+0xc4>
 400bb24:	a0800117 	ldw	r2,4(r20)
 400bb28:	15ffffc4 	addi	r23,r2,-1
 400bb2c:	b8000d16 	blt	r23,zero,400bb64 <__call_exitprocs+0x94>
 400bb30:	14000044 	addi	r16,r2,1
 400bb34:	8421883a 	add	r16,r16,r16
 400bb38:	8421883a 	add	r16,r16,r16
 400bb3c:	84402004 	addi	r17,r16,128
 400bb40:	a463883a 	add	r17,r20,r17
 400bb44:	a421883a 	add	r16,r20,r16
 400bb48:	e0001e26 	beq	fp,zero,400bbc4 <__call_exitprocs+0xf4>
 400bb4c:	80804017 	ldw	r2,256(r16)
 400bb50:	e0801c26 	beq	fp,r2,400bbc4 <__call_exitprocs+0xf4>
 400bb54:	bdffffc4 	addi	r23,r23,-1
 400bb58:	843fff04 	addi	r16,r16,-4
 400bb5c:	8c7fff04 	addi	r17,r17,-4
 400bb60:	bd7ff91e 	bne	r23,r21,400bb48 <__ram_exceptions_end+0xfbfeb900>
 400bb64:	00800034 	movhi	r2,0
 400bb68:	10800004 	addi	r2,r2,0
 400bb6c:	10000926 	beq	r2,zero,400bb94 <__call_exitprocs+0xc4>
 400bb70:	a0800117 	ldw	r2,4(r20)
 400bb74:	1000301e 	bne	r2,zero,400bc38 <__call_exitprocs+0x168>
 400bb78:	a0800017 	ldw	r2,0(r20)
 400bb7c:	10003226 	beq	r2,zero,400bc48 <__call_exitprocs+0x178>
 400bb80:	a009883a 	mov	r4,r20
 400bb84:	98800015 	stw	r2,0(r19)
 400bb88:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x4000000>
 400bb8c:	9d000017 	ldw	r20,0(r19)
 400bb90:	a03fe41e 	bne	r20,zero,400bb24 <__ram_exceptions_end+0xfbfeb8dc>
 400bb94:	dfc00a17 	ldw	ra,40(sp)
 400bb98:	df000917 	ldw	fp,36(sp)
 400bb9c:	ddc00817 	ldw	r23,32(sp)
 400bba0:	dd800717 	ldw	r22,28(sp)
 400bba4:	dd400617 	ldw	r21,24(sp)
 400bba8:	dd000517 	ldw	r20,20(sp)
 400bbac:	dcc00417 	ldw	r19,16(sp)
 400bbb0:	dc800317 	ldw	r18,12(sp)
 400bbb4:	dc400217 	ldw	r17,8(sp)
 400bbb8:	dc000117 	ldw	r16,4(sp)
 400bbbc:	dec00b04 	addi	sp,sp,44
 400bbc0:	f800283a 	ret
 400bbc4:	a0800117 	ldw	r2,4(r20)
 400bbc8:	80c00017 	ldw	r3,0(r16)
 400bbcc:	10bfffc4 	addi	r2,r2,-1
 400bbd0:	15c01426 	beq	r2,r23,400bc24 <__call_exitprocs+0x154>
 400bbd4:	80000015 	stw	zero,0(r16)
 400bbd8:	183fde26 	beq	r3,zero,400bb54 <__ram_exceptions_end+0xfbfeb90c>
 400bbdc:	95c8983a 	sll	r4,r18,r23
 400bbe0:	a0806217 	ldw	r2,392(r20)
 400bbe4:	a5800117 	ldw	r22,4(r20)
 400bbe8:	2084703a 	and	r2,r4,r2
 400bbec:	10000b26 	beq	r2,zero,400bc1c <__call_exitprocs+0x14c>
 400bbf0:	a0806317 	ldw	r2,396(r20)
 400bbf4:	2088703a 	and	r4,r4,r2
 400bbf8:	20000c1e 	bne	r4,zero,400bc2c <__call_exitprocs+0x15c>
 400bbfc:	89400017 	ldw	r5,0(r17)
 400bc00:	d9000017 	ldw	r4,0(sp)
 400bc04:	183ee83a 	callr	r3
 400bc08:	a0800117 	ldw	r2,4(r20)
 400bc0c:	15bfbf1e 	bne	r2,r22,400bb0c <__ram_exceptions_end+0xfbfeb8c4>
 400bc10:	98800017 	ldw	r2,0(r19)
 400bc14:	153fcf26 	beq	r2,r20,400bb54 <__ram_exceptions_end+0xfbfeb90c>
 400bc18:	003fbc06 	br	400bb0c <__ram_exceptions_end+0xfbfeb8c4>
 400bc1c:	183ee83a 	callr	r3
 400bc20:	003ff906 	br	400bc08 <__ram_exceptions_end+0xfbfeb9c0>
 400bc24:	a5c00115 	stw	r23,4(r20)
 400bc28:	003feb06 	br	400bbd8 <__ram_exceptions_end+0xfbfeb990>
 400bc2c:	89000017 	ldw	r4,0(r17)
 400bc30:	183ee83a 	callr	r3
 400bc34:	003ff406 	br	400bc08 <__ram_exceptions_end+0xfbfeb9c0>
 400bc38:	a0800017 	ldw	r2,0(r20)
 400bc3c:	a027883a 	mov	r19,r20
 400bc40:	1029883a 	mov	r20,r2
 400bc44:	003fb606 	br	400bb20 <__ram_exceptions_end+0xfbfeb8d8>
 400bc48:	0005883a 	mov	r2,zero
 400bc4c:	003ffb06 	br	400bc3c <__ram_exceptions_end+0xfbfeb9f4>

0400bc50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400bc50:	defffd04 	addi	sp,sp,-12
 400bc54:	df000215 	stw	fp,8(sp)
 400bc58:	df000204 	addi	fp,sp,8
 400bc5c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400bc60:	0001883a 	nop
 400bc64:	e0bfff17 	ldw	r2,-4(fp)
 400bc68:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400bc6c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400bc70:	10000226 	beq	r2,zero,400bc7c <_exit+0x2c>
    ALT_SIM_FAIL();
 400bc74:	002af070 	cmpltui	zero,zero,43969
 400bc78:	00000106 	br	400bc80 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400bc7c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400bc80:	003fff06 	br	400bc80 <__ram_exceptions_end+0xfbfeba38>
