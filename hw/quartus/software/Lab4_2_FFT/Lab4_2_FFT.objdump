
Lab4_2_FFT.elf:     file format elf32-littlenios2
Lab4_2_FFT.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00010d04 memsz 0x00010d04 flags r-x
    LOAD off    0x00011d24 vaddr 0x00030d24 paddr 0x0003293c align 2**12
         filesz 0x00001c18 memsz 0x00001c18 flags rw-
    LOAD off    0x00014554 vaddr 0x00034554 paddr 0x00034554 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010704  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003dc  00030948  00030948  00011948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c18  00030d24  0003293c  00011d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  00034554  00034554  00014554  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory_nios2_FFT 00000000  000346bc  000346bc  0001393c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001393c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f58  00000000  00000000  00013960  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025207  00000000  00000000  000148b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009981  00000000  00000000  00039abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bd52  00000000  00000000  00043440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002598  00000000  00000000  0004f194  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d63  00000000  00000000  0005172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  0005548f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006ccf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  0006cd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071d76  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00071d79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071d82  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071d83  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00071d84  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00071d88  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00071d8c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000d  00000000  00000000  00071d90  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000d  00000000  00000000  00071d9d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000d  00000000  00000000  00071daa  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00071db7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003f  00000000  00000000  00071dc2  2**0
                  CONTENTS, READONLY
 29 .jdi          0000baf4  00000000  00000000  00071e01  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000b7736  00000000  00000000  0007d8f5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00030948 l    d  .rodata	00000000 .rodata
00030d24 l    d  .rwdata	00000000 .rwdata
00034554 l    d  .bss	00000000 .bss
000346bc l    d  .onchip_memory_nios2_FFT	00000000 .onchip_memory_nios2_FFT
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4_2_FFT_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 FFT_main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00030a32 l     O .rodata	00000010 zeroes.4404
00022788 l     F .text	000000bc __sbprintf
00030a42 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022998 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000244c8 l     F .text	00000008 __fp_unlock
000244dc l     F .text	0000019c __sinit.part.1
00024678 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00030d24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00031168 l     O .rwdata	00000020 lc_ctype_charset
00031148 l     O .rwdata	00000020 lc_message_charset
00031188 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00030a74 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00027a74 l     F .text	000000fc __sprint_r.part.0
00030ba8 l     O .rodata	00000010 blanks.4348
00030b98 l     O .rodata	00000010 zeroes.4349
00029000 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002ccbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002cdc8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002cdf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002cee0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002cfc0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002d0ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002d280 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0003291c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002d4cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002d600 l     F .text	00000034 alt_dev_reg
0002d634 l     F .text	0000003c alt_get_errno
0002d670 l     F .text	00000068 alt_avalon_mutex_reg
00031770 l     O .rwdata	00001060 jtag_uart_FFT
000327d0 l     O .rwdata	00000048 mailbox_simple_0
00032818 l     O .rwdata	00000010 mutex_SDRAM
00032828 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002d9c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002dbcc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0002e204 l     F .text	00000090 altera_avalon_mailbox_identify
0002e294 l     F .text	00000078 altera_avalon_mailbox_post
0002e30c l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0002e444 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0002eb64 l     F .text	0000003c alt_get_errno
0002eba0 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002efec l     F .text	0000009c altera_avalon_uart_irq
0002f088 l     F .text	000000e4 altera_avalon_uart_rxirq
0002f16c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0002f308 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002f520 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002f87c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002fd80 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002fec0 l     F .text	0000003c alt_get_errno
0002fefc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00034590 g     O .bss	00000004 alt_instruction_exception_handler
000270b8 g     F .text	00000074 _mprec_log10
0002e8d8 g     F .text	00000150 altera_avalon_mailbox_send
000271a4 g     F .text	0000008c __any_on
0002959c g     F .text	00000054 _isatty_r
00030a80 g     O .rodata	00000028 __mprec_tinytens
0002d1bc g     F .text	0000007c alt_main
00020408 g     F .text	000000c0 _puts_r
000345bc g     O .bss	00000100 alt_irq
000295f0 g     F .text	00000060 _lseek_r
00034554 g     O .bss	00000004 file_pointer
0003293c g       *ABS*	00000000 __flash_rwdata_start
0002b7e8 g     F .text	00000088 .hidden __eqdf2
000346bc g       *ABS*	00000000 __alt_heap_start
000203cc g     F .text	0000003c printf
00029808 g     F .text	0000009c _wcrtomb_r
00027934 g     F .text	0000005c __sseek
00024818 g     F .text	00000010 __sinit
000296b0 g     F .text	00000140 __swbuf_r
000252e0 g     F .text	0000007c _setlocale_r
00024680 g     F .text	00000068 __sfmoreglue
0002d25c g     F .text	00000024 __malloc_unlock
000202f0 g     F .text	000000ac receiver_callback
00025fb0 g     F .text	0000015c memmove
00024800 g     F .text	00000018 _cleanup
0002ecd8 g     F .text	00000040 altera_avalon_mutex_trylock
00026234 g     F .text	000000a8 _Balloc
0002b870 g     F .text	000000dc .hidden __gtdf2
000302b8 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
0002ed6c g     F .text	00000074 altera_avalon_mutex_is_mine
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029540 g     F .text	0000005c _fstat_r
00034574 g     O .bss	00000004 errno
000278b0 g     F .text	00000008 __seofread
0003457c g     O .bss	00000004 alt_argv
0003a8ec g       *ABS*	00000000 _gp
0002ea28 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
000315f0 g     O .rwdata	00000180 alt_fd_list
0002fa1c g     F .text	00000090 alt_find_dev
00025e68 g     F .text	00000148 memcpy
000244d0 g     F .text	0000000c _cleanup_r
0002cad4 g     F .text	000000dc .hidden __floatsidf
0002fe44 g     F .text	0000007c alt_io_redirect
0002b94c g     F .text	000000f4 .hidden __ltdf2
00030948 g       *ABS*	00000000 __DTOR_END__
000204c8 g     F .text	00000014 puts
00030518 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002e4ec g     F .text	00000078 altera_avalon_mailbox_simple_init
00027794 g     F .text	00000074 __fpclassifyd
00027014 g     F .text	000000a4 __ratio
00028fe4 g     F .text	0000001c __vfiprintf_internal
0002ddc4 g     F .text	0000021c altera_avalon_jtag_uart_read
0002039c g     F .text	00000030 _printf_r
0002a598 g     F .text	00000064 .hidden __udivsi3
0002cf1c g     F .text	000000a4 isatty
00030ad0 g     O .rodata	000000c8 __mprec_tens
0002e860 g     F .text	00000078 altera_avalon_mailbox_status
0002e748 g     F .text	00000118 altera_avalon_mailbox_close
0002535c g     F .text	0000000c __locale_charset
00030488 g     F .text	00000090 alt_icache_flush
00034570 g     O .bss	00000004 __malloc_top_pad
000328f4 g     O .rwdata	00000004 __mb_cur_max
0002538c g     F .text	0000000c _localeconv_r
00026640 g     F .text	0000003c __i2b
00024c9c g     F .text	000004bc __sfvwrite_r
00027808 g     F .text	00000054 _sbrk_r
00029650 g     F .text	00000060 _read_r
00032914 g     O .rwdata	00000004 alt_max_fd
00029234 g     F .text	000000f0 _fclose_r
00024498 g     F .text	00000030 fflush
0003456c g     O .bss	00000004 __malloc_max_sbrked_mem
0002a654 g     F .text	000008ac .hidden __adddf3
00026dbc g     F .text	0000010c __b2d
00029f68 g     F .text	00000538 .hidden __umoddi3
0002d0e8 g     F .text	000000d4 lseek
0002ede0 g     F .text	00000050 altera_avalon_mutex_first_lock
000328ec g     O .rwdata	00000004 _global_impure_ptr
00027230 g     F .text	00000564 _realloc_r
000346bc g       *ABS*	00000000 __bss_end
0002fc90 g     F .text	000000f0 alt_iic_isr_register
000301b0 g     F .text	00000108 alt_tick
000299f0 g     F .text	00000578 .hidden __udivdi3
0002949c g     F .text	00000024 _fputwc_r
00030aa8 g     O .rodata	00000028 __mprec_bigtens
00026424 g     F .text	00000104 __s2b
0002cbb0 g     F .text	000000a8 .hidden __floatunsidf
00026afc g     F .text	00000060 __mcmp
0002ef40 g     F .text	000000ac altera_avalon_uart_init
00024838 g     F .text	00000018 __fp_lock_all
0002fc44 g     F .text	0000004c alt_ic_irq_enabled
00030114 g     F .text	0000009c alt_alarm_stop
00034584 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
000315c8 g     O .rwdata	00000028 alt_dev_null
0002ec1c g     F .text	00000054 altera_avalon_mutex_open
0002f834 g     F .text	00000048 alt_dcache_flush_all
00026528 g     F .text	00000068 __hi0bits
0002ca54 g     F .text	00000080 .hidden __fixdfsi
0003293c g       *ABS*	00000000 __ram_rwdata_end
0003290c g     O .rwdata	00000008 alt_dev_list
0002d508 g     F .text	000000f8 write
00032928 g     O .rwdata	00000008 alt_mutex_list
00030d24 g       *ABS*	00000000 __ram_rodata_end
0002ce30 g     F .text	000000b0 fstat
0002b94c g     F .text	000000f4 .hidden __ledf2
00026874 g     F .text	00000140 __pow5mult
00027b88 g     F .text	0000145c ___vfiprintf_internal_r
00034564 g     O .bss	00000004 __nlocale_changed
0002a5fc g     F .text	00000058 .hidden __umodsi3
000346bc g       *ABS*	00000000 end
0002f55c g     F .text	000001ac altera_avalon_uart_write
0002d900 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00030948 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002ee90 g     F .text	00000060 altera_avalon_uart_write_fd
0002cc58 g     F .text	00000064 .hidden __clzsi2
0002eef0 g     F .text	00000050 altera_avalon_uart_close_fd
0002dfe0 g     F .text	00000224 altera_avalon_jtag_uart_write
00024828 g     F .text	00000004 __sfp_lock_acquire
00025d84 g     F .text	000000e4 memchr
00020574 g     F .text	000021f8 ___vfprintf_internal_r
0002498c g     F .text	00000310 _free_r
00025368 g     F .text	00000010 __locale_mb_cur_max
00030794 g     F .text	00000180 __call_exitprocs
00034560 g     O .bss	00000004 __mlocale_changed
000328f8 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
00034588 g     O .bss	00000004 _alt_tick_rate
000269b4 g     F .text	00000148 __lshift
0003458c g     O .bss	00000004 _alt_nticks
0002d2bc g     F .text	000000fc read
0002d710 g     F .text	0000008c alt_sys_init
0003067c g     F .text	00000118 __register_exitproc
0002ed18 g     F .text	00000054 altera_avalon_mutex_unlock
0002667c g     F .text	000001f8 __multiply
0002dc6c g     F .text	00000068 altera_avalon_jtag_uart_close
00030d24 g       *ABS*	00000000 __ram_rwdata_start
00030948 g       *ABS*	00000000 __ram_rodata_start
00034594 g     O .bss	00000028 __malloc_current_mallinfo
00026ec8 g     F .text	0000014c __d2b
0002d79c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000303e4 g     F .text	000000a4 alt_get_fd
0002911c g     F .text	00000054 _close_r
00030600 g     F .text	0000007c memcmp
0002d85c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000346bc g       *ABS*	00000000 __alt_stack_base
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios2_FFT
0002d8ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022844 g     F .text	00000154 __swsetup_r
0002af00 g     F .text	000008e8 .hidden __divdf3
000246e8 g     F .text	00000118 __sfp
0002712c g     F .text	00000078 __copybits
000311c0 g     O .rwdata	00000408 __malloc_av_
00024834 g     F .text	00000004 __sinit_lock_release
0002ba40 g     F .text	00000718 .hidden __muldf3
0002785c g     F .text	00000054 __sread
000302dc g     F .text	00000108 alt_find_file
0002f8b8 g     F .text	000000a4 alt_dev_llist_insert
0002d238 g     F .text	00000024 __malloc_lock
0002d41c g     F .text	000000b0 sbrk
0002443c g     F .text	0000005c _fflush_r
00029170 g     F .text	000000c4 _calloc_r
00034554 g       *ABS*	00000000 __bss_start
0002610c g     F .text	00000128 memset
00020290 g     F .text	00000060 main
00034580 g     O .bss	00000004 alt_envp
00034568 g     O .bss	00000004 __malloc_max_total_mem
0002d7fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000297f0 g     F .text	00000018 __swbuf
00027990 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00029324 g     F .text	00000014 fclose
0002ec94 g     F .text	00000044 altera_avalon_mutex_lock
00022b98 g     F .text	00001688 _dtoa_r
00025578 g     F .text	0000080c _malloc_r
00029964 g     F .text	00000030 __ascii_wctomb
00032918 g     O .rwdata	00000004 alt_errno
00025158 g     F .text	000000c4 _fwalk
0002a4a0 g     F .text	00000084 .hidden __divsi3
00024868 g     F .text	00000124 _malloc_trim_r
00030948 g       *ABS*	00000000 __CTOR_END__
00027998 g     F .text	000000dc strcmp
00030948 g       *ABS*	00000000 __flash_rodata_start
00030948 g       *ABS*	00000000 __DTOR_LIST__
0002b7e8 g     F .text	00000088 .hidden __nedf2
0002d6d8 g     F .text	00000038 alt_irq_init
0002d3b8 g     F .text	00000064 alt_release_fd
00030bb8 g     O .rodata	00000100 .hidden __clz_tab
0003455c g     O .bss	00000004 _PathLocale
000305b4 g     F .text	00000014 atexit
000290bc g     F .text	00000060 _write_r
00025398 g     F .text	00000018 setlocale
00034558 g     O .bss	00000004 file_length
000328f0 g     O .rwdata	00000004 _impure_ptr
00034578 g     O .bss	00000004 alt_argc
00024220 g     F .text	0000021c __sflush_r
0002f9bc g     F .text	00000060 _do_dtors
00025384 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
00026d58 g     F .text	00000064 __ulp
00024850 g     F .text	00000018 __fp_unlock_all
00032904 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000253b0 g     F .text	0000000c localeconv
0002fae0 g     F .text	00000050 alt_ic_isr_register
0003293c g       *ABS*	00000000 _edata
0002ee30 g     F .text	00000060 altera_avalon_uart_read_fd
000346bc g       *ABS*	00000000 _end
00029338 g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
0002dcd4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002fbb8 g     F .text	0000008c alt_ic_irq_disable
00032920 g     O .rwdata	00000008 alt_mailbox_simple_list
000278b8 g     F .text	0000007c __swrite
000328fc g     O .rwdata	00000004 __malloc_trim_threshold
00025378 g     F .text	0000000c __locale_msgcharset
000305c8 g     F .text	00000038 exit
0002521c g     F .text	000000c4 _fwalk_reent
00026b5c g     F .text	000001fc __mdiff
0002a524 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002482c g     F .text	00000004 __sfp_lock_release
0002f2b4 g     F .text	00000054 altera_avalon_uart_close
0002e564 g     F .text	000001e4 altera_avalon_mailbox_open
00030914 g     F .text	00000034 _exit
0002f708 g     F .text	0000012c alt_alarm_start
000253bc g     F .text	000001bc __smakebuf_r
000204dc g     F .text	00000098 strlen
0002ffc0 g     F .text	00000154 open
0002b870 g     F .text	000000dc .hidden __gedf2
00032900 g     O .rwdata	00000004 __wctomb
00027b70 g     F .text	00000018 __sprint_r
0002faac g     F .text	00000034 alt_icache_flush_all
00032930 g     O .rwdata	00000004 alt_priority_mask
0002fb30 g     F .text	00000088 alt_ic_irq_enable
0002276c g     F .text	0000001c __vfprintf_internal
0002ec70 g     F .text	00000024 altera_avalon_mutex_close
0002f344 g     F .text	000001dc altera_avalon_uart_read
00029994 g     F .text	0000005c _wctomb_r
0002c158 g     F .text	000008fc .hidden __subdf3
00026590 g     F .text	000000b0 __lo0bits
00032934 g     O .rwdata	00000008 alt_alarm_list
0002f95c g     F .text	00000060 _do_ctors
000298a4 g     F .text	000000c0 wcrtomb
0002ccf8 g     F .text	000000d0 close
0002d028 g     F .text	00000084 alt_load
000294c0 g     F .text	00000080 fputwc
00024830 g     F .text	00000004 __sinit_lock_acquire
00026304 g     F .text	00000120 __multadd
000262dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10916f04 	addi	r2,r2,17852
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10916f04 	addi	r2,r2,17852
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a72917 	ldw	r2,-25436(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a72917 	ldw	r2,-25436(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6aa3b14 	ori	gp,gp,43244
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	10915514 	ori	r2,r2,17748

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18d1af14 	ori	r3,r3,18108

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	002d0280 	call	2d028 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002d1bc0 	call	2d1bc <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe028c>

00020290 <main>:
void receiver_callback(void* message);
unsigned int *file_pointer, file_length;


int main()
{
   20290:	defffb04 	addi	sp,sp,-20
   20294:	dfc00415 	stw	ra,16(sp)
   20298:	df000315 	stw	fp,12(sp)
   2029c:	df000304 	addi	fp,sp,12
	alt_u32 message[2];
	altera_avalon_mailbox_dev* mailbox;	// handle to the Mailbox


	// Open mailbox
	mailbox = altera_avalon_mailbox_open("/dev/mailbox_simple_0", NULL, receiver_callback);
   202a0:	018000b4 	movhi	r6,2
   202a4:	3180bc04 	addi	r6,r6,752
   202a8:	000b883a 	mov	r5,zero
   202ac:	010000f4 	movhi	r4,3
   202b0:	21025204 	addi	r4,r4,2376
   202b4:	002e5640 	call	2e564 <altera_avalon_mailbox_open>
   202b8:	e0bffd15 	stw	r2,-12(fp)
	if (!mailbox) {
   202bc:	e0bffd17 	ldw	r2,-12(fp)
   202c0:	1000051e 	bne	r2,zero,202d8 <main+0x48>
		printf("FAIL: Unable to open mailbox\n");
   202c4:	010000f4 	movhi	r4,3
   202c8:	21025804 	addi	r4,r4,2400
   202cc:	00204c80 	call	204c8 <puts>
		return 1;
   202d0:	00800044 	movi	r2,1
   202d4:	00000106 	br	202dc <main+0x4c>
	}

	while(1)
	{
		//printf("FFT is talking\n");
	}
   202d8:	003fff06 	br	202d8 <__alt_data_end+0xfffe02d8>

	altera_avalon_mailbox_close(mailbox);
	return 0;
}
   202dc:	e037883a 	mov	sp,fp
   202e0:	dfc00117 	ldw	ra,4(sp)
   202e4:	df000017 	ldw	fp,0(sp)
   202e8:	dec00204 	addi	sp,sp,8
   202ec:	f800283a 	ret

000202f0 <receiver_callback>:

/* Get message read from mailbox */
void receiver_callback(void* message) {
   202f0:	defffc04 	addi	sp,sp,-16
   202f4:	dfc00315 	stw	ra,12(sp)
   202f8:	df000215 	stw	fp,8(sp)
   202fc:	df000204 	addi	fp,sp,8
   20300:	e13fff15 	stw	r4,-4(fp)

	alt_u32* data = (alt_u32*)message;	// cast from void* to alt_u32*
   20304:	e0bfff17 	ldw	r2,-4(fp)
   20308:	e0bffe15 	stw	r2,-8(fp)

	if (message != NULL) {
   2030c:	e0bfff17 	ldw	r2,-4(fp)
   20310:	10001926 	beq	r2,zero,20378 <receiver_callback+0x88>
		printf("Message received: msg[0]: %lx   msg[1]: %lx\n", data[0], data[1]);
   20314:	e0bffe17 	ldw	r2,-8(fp)
   20318:	10c00017 	ldw	r3,0(r2)
   2031c:	e0bffe17 	ldw	r2,-8(fp)
   20320:	10800104 	addi	r2,r2,4
   20324:	10800017 	ldw	r2,0(r2)
   20328:	100d883a 	mov	r6,r2
   2032c:	180b883a 	mov	r5,r3
   20330:	010000f4 	movhi	r4,3
   20334:	21026004 	addi	r4,r4,2432
   20338:	00203cc0 	call	203cc <printf>
		file_pointer = (unsigned int*)data[0];
   2033c:	e0bffe17 	ldw	r2,-8(fp)
   20340:	10800017 	ldw	r2,0(r2)
   20344:	d0a71a15 	stw	r2,-25496(gp)
		file_length = (unsigned int) data[1];
   20348:	e0bffe17 	ldw	r2,-8(fp)
   2034c:	10800104 	addi	r2,r2,4
   20350:	10800017 	ldw	r2,0(r2)
   20354:	d0a71b15 	stw	r2,-25492(gp)
		printf("File Pointer: %x \n File Length: %u \n\n", file_pointer, file_length);
   20358:	d0a71a17 	ldw	r2,-25496(gp)
   2035c:	d0e71b17 	ldw	r3,-25492(gp)
   20360:	180d883a 	mov	r6,r3
   20364:	100b883a 	mov	r5,r2
   20368:	010000f4 	movhi	r4,3
   2036c:	21026c04 	addi	r4,r4,2480
   20370:	00203cc0 	call	203cc <printf>
	} else {
		printf("Incomplete receive");
	}
}
   20374:	00000306 	br	20384 <receiver_callback+0x94>
		printf("Message received: msg[0]: %lx   msg[1]: %lx\n", data[0], data[1]);
		file_pointer = (unsigned int*)data[0];
		file_length = (unsigned int) data[1];
		printf("File Pointer: %x \n File Length: %u \n\n", file_pointer, file_length);
	} else {
		printf("Incomplete receive");
   20378:	010000f4 	movhi	r4,3
   2037c:	21027604 	addi	r4,r4,2520
   20380:	00203cc0 	call	203cc <printf>
	}
}
   20384:	0001883a 	nop
   20388:	e037883a 	mov	sp,fp
   2038c:	dfc00117 	ldw	ra,4(sp)
   20390:	df000017 	ldw	fp,0(sp)
   20394:	dec00204 	addi	sp,sp,8
   20398:	f800283a 	ret

0002039c <_printf_r>:
   2039c:	defffd04 	addi	sp,sp,-12
   203a0:	2805883a 	mov	r2,r5
   203a4:	dfc00015 	stw	ra,0(sp)
   203a8:	d9800115 	stw	r6,4(sp)
   203ac:	d9c00215 	stw	r7,8(sp)
   203b0:	21400217 	ldw	r5,8(r4)
   203b4:	d9c00104 	addi	r7,sp,4
   203b8:	100d883a 	mov	r6,r2
   203bc:	00205740 	call	20574 <___vfprintf_internal_r>
   203c0:	dfc00017 	ldw	ra,0(sp)
   203c4:	dec00304 	addi	sp,sp,12
   203c8:	f800283a 	ret

000203cc <printf>:
   203cc:	defffc04 	addi	sp,sp,-16
   203d0:	dfc00015 	stw	ra,0(sp)
   203d4:	d9400115 	stw	r5,4(sp)
   203d8:	d9800215 	stw	r6,8(sp)
   203dc:	d9c00315 	stw	r7,12(sp)
   203e0:	008000f4 	movhi	r2,3
   203e4:	108a3c04 	addi	r2,r2,10480
   203e8:	10800017 	ldw	r2,0(r2)
   203ec:	200b883a 	mov	r5,r4
   203f0:	d9800104 	addi	r6,sp,4
   203f4:	11000217 	ldw	r4,8(r2)
   203f8:	002276c0 	call	2276c <__vfprintf_internal>
   203fc:	dfc00017 	ldw	ra,0(sp)
   20400:	dec00404 	addi	sp,sp,16
   20404:	f800283a 	ret

00020408 <_puts_r>:
   20408:	defff604 	addi	sp,sp,-40
   2040c:	dc000715 	stw	r16,28(sp)
   20410:	2021883a 	mov	r16,r4
   20414:	2809883a 	mov	r4,r5
   20418:	dc400815 	stw	r17,32(sp)
   2041c:	dfc00915 	stw	ra,36(sp)
   20420:	2823883a 	mov	r17,r5
   20424:	00204dc0 	call	204dc <strlen>
   20428:	10c00044 	addi	r3,r2,1
   2042c:	d8800115 	stw	r2,4(sp)
   20430:	008000f4 	movhi	r2,3
   20434:	10827b04 	addi	r2,r2,2540
   20438:	d8800215 	stw	r2,8(sp)
   2043c:	00800044 	movi	r2,1
   20440:	d8800315 	stw	r2,12(sp)
   20444:	00800084 	movi	r2,2
   20448:	dc400015 	stw	r17,0(sp)
   2044c:	d8c00615 	stw	r3,24(sp)
   20450:	dec00415 	stw	sp,16(sp)
   20454:	d8800515 	stw	r2,20(sp)
   20458:	80000226 	beq	r16,zero,20464 <_puts_r+0x5c>
   2045c:	80800e17 	ldw	r2,56(r16)
   20460:	10001426 	beq	r2,zero,204b4 <_puts_r+0xac>
   20464:	81400217 	ldw	r5,8(r16)
   20468:	2880030b 	ldhu	r2,12(r5)
   2046c:	10c8000c 	andi	r3,r2,8192
   20470:	1800061e 	bne	r3,zero,2048c <_puts_r+0x84>
   20474:	29001917 	ldw	r4,100(r5)
   20478:	00f7ffc4 	movi	r3,-8193
   2047c:	10880014 	ori	r2,r2,8192
   20480:	20c6703a 	and	r3,r4,r3
   20484:	2880030d 	sth	r2,12(r5)
   20488:	28c01915 	stw	r3,100(r5)
   2048c:	d9800404 	addi	r6,sp,16
   20490:	8009883a 	mov	r4,r16
   20494:	0024c9c0 	call	24c9c <__sfvwrite_r>
   20498:	1000091e 	bne	r2,zero,204c0 <_puts_r+0xb8>
   2049c:	00800284 	movi	r2,10
   204a0:	dfc00917 	ldw	ra,36(sp)
   204a4:	dc400817 	ldw	r17,32(sp)
   204a8:	dc000717 	ldw	r16,28(sp)
   204ac:	dec00a04 	addi	sp,sp,40
   204b0:	f800283a 	ret
   204b4:	8009883a 	mov	r4,r16
   204b8:	00248180 	call	24818 <__sinit>
   204bc:	003fe906 	br	20464 <__alt_data_end+0xfffe0464>
   204c0:	00bfffc4 	movi	r2,-1
   204c4:	003ff606 	br	204a0 <__alt_data_end+0xfffe04a0>

000204c8 <puts>:
   204c8:	008000f4 	movhi	r2,3
   204cc:	108a3c04 	addi	r2,r2,10480
   204d0:	200b883a 	mov	r5,r4
   204d4:	11000017 	ldw	r4,0(r2)
   204d8:	00204081 	jmpi	20408 <_puts_r>

000204dc <strlen>:
   204dc:	208000cc 	andi	r2,r4,3
   204e0:	10002026 	beq	r2,zero,20564 <strlen+0x88>
   204e4:	20800007 	ldb	r2,0(r4)
   204e8:	10002026 	beq	r2,zero,2056c <strlen+0x90>
   204ec:	2005883a 	mov	r2,r4
   204f0:	00000206 	br	204fc <strlen+0x20>
   204f4:	10c00007 	ldb	r3,0(r2)
   204f8:	18001826 	beq	r3,zero,2055c <strlen+0x80>
   204fc:	10800044 	addi	r2,r2,1
   20500:	10c000cc 	andi	r3,r2,3
   20504:	183ffb1e 	bne	r3,zero,204f4 <__alt_data_end+0xfffe04f4>
   20508:	10c00017 	ldw	r3,0(r2)
   2050c:	01ffbff4 	movhi	r7,65279
   20510:	39ffbfc4 	addi	r7,r7,-257
   20514:	00ca303a 	nor	r5,zero,r3
   20518:	01a02074 	movhi	r6,32897
   2051c:	19c7883a 	add	r3,r3,r7
   20520:	31a02004 	addi	r6,r6,-32640
   20524:	1946703a 	and	r3,r3,r5
   20528:	1986703a 	and	r3,r3,r6
   2052c:	1800091e 	bne	r3,zero,20554 <strlen+0x78>
   20530:	10800104 	addi	r2,r2,4
   20534:	10c00017 	ldw	r3,0(r2)
   20538:	19cb883a 	add	r5,r3,r7
   2053c:	00c6303a 	nor	r3,zero,r3
   20540:	28c6703a 	and	r3,r5,r3
   20544:	1986703a 	and	r3,r3,r6
   20548:	183ff926 	beq	r3,zero,20530 <__alt_data_end+0xfffe0530>
   2054c:	00000106 	br	20554 <strlen+0x78>
   20550:	10800044 	addi	r2,r2,1
   20554:	10c00007 	ldb	r3,0(r2)
   20558:	183ffd1e 	bne	r3,zero,20550 <__alt_data_end+0xfffe0550>
   2055c:	1105c83a 	sub	r2,r2,r4
   20560:	f800283a 	ret
   20564:	2005883a 	mov	r2,r4
   20568:	003fe706 	br	20508 <__alt_data_end+0xfffe0508>
   2056c:	0005883a 	mov	r2,zero
   20570:	f800283a 	ret

00020574 <___vfprintf_internal_r>:
   20574:	deffb804 	addi	sp,sp,-288
   20578:	dfc04715 	stw	ra,284(sp)
   2057c:	ddc04515 	stw	r23,276(sp)
   20580:	dd404315 	stw	r21,268(sp)
   20584:	d9002c15 	stw	r4,176(sp)
   20588:	282f883a 	mov	r23,r5
   2058c:	302b883a 	mov	r21,r6
   20590:	d9c02d15 	stw	r7,180(sp)
   20594:	df004615 	stw	fp,280(sp)
   20598:	dd804415 	stw	r22,272(sp)
   2059c:	dd004215 	stw	r20,264(sp)
   205a0:	dcc04115 	stw	r19,260(sp)
   205a4:	dc804015 	stw	r18,256(sp)
   205a8:	dc403f15 	stw	r17,252(sp)
   205ac:	dc003e15 	stw	r16,248(sp)
   205b0:	002538c0 	call	2538c <_localeconv_r>
   205b4:	10800017 	ldw	r2,0(r2)
   205b8:	1009883a 	mov	r4,r2
   205bc:	d8803415 	stw	r2,208(sp)
   205c0:	00204dc0 	call	204dc <strlen>
   205c4:	d8803715 	stw	r2,220(sp)
   205c8:	d8802c17 	ldw	r2,176(sp)
   205cc:	10000226 	beq	r2,zero,205d8 <___vfprintf_internal_r+0x64>
   205d0:	10800e17 	ldw	r2,56(r2)
   205d4:	1000f926 	beq	r2,zero,209bc <___vfprintf_internal_r+0x448>
   205d8:	b880030b 	ldhu	r2,12(r23)
   205dc:	10c8000c 	andi	r3,r2,8192
   205e0:	1800061e 	bne	r3,zero,205fc <___vfprintf_internal_r+0x88>
   205e4:	b9001917 	ldw	r4,100(r23)
   205e8:	00f7ffc4 	movi	r3,-8193
   205ec:	10880014 	ori	r2,r2,8192
   205f0:	20c6703a 	and	r3,r4,r3
   205f4:	b880030d 	sth	r2,12(r23)
   205f8:	b8c01915 	stw	r3,100(r23)
   205fc:	10c0020c 	andi	r3,r2,8
   20600:	1800c126 	beq	r3,zero,20908 <___vfprintf_internal_r+0x394>
   20604:	b8c00417 	ldw	r3,16(r23)
   20608:	1800bf26 	beq	r3,zero,20908 <___vfprintf_internal_r+0x394>
   2060c:	1080068c 	andi	r2,r2,26
   20610:	00c00284 	movi	r3,10
   20614:	10c0c426 	beq	r2,r3,20928 <___vfprintf_internal_r+0x3b4>
   20618:	d8c00404 	addi	r3,sp,16
   2061c:	050000f4 	movhi	r20,3
   20620:	d9001e04 	addi	r4,sp,120
   20624:	a5028c84 	addi	r20,r20,2610
   20628:	d8c01e15 	stw	r3,120(sp)
   2062c:	d8002015 	stw	zero,128(sp)
   20630:	d8001f15 	stw	zero,124(sp)
   20634:	d8003315 	stw	zero,204(sp)
   20638:	d8003615 	stw	zero,216(sp)
   2063c:	d8003815 	stw	zero,224(sp)
   20640:	1811883a 	mov	r8,r3
   20644:	d8003915 	stw	zero,228(sp)
   20648:	d8003a15 	stw	zero,232(sp)
   2064c:	d8002f15 	stw	zero,188(sp)
   20650:	d9002815 	stw	r4,160(sp)
   20654:	a8800007 	ldb	r2,0(r21)
   20658:	10027b26 	beq	r2,zero,21048 <___vfprintf_internal_r+0xad4>
   2065c:	00c00944 	movi	r3,37
   20660:	a821883a 	mov	r16,r21
   20664:	10c0021e 	bne	r2,r3,20670 <___vfprintf_internal_r+0xfc>
   20668:	00001406 	br	206bc <___vfprintf_internal_r+0x148>
   2066c:	10c00326 	beq	r2,r3,2067c <___vfprintf_internal_r+0x108>
   20670:	84000044 	addi	r16,r16,1
   20674:	80800007 	ldb	r2,0(r16)
   20678:	103ffc1e 	bne	r2,zero,2066c <__alt_data_end+0xfffe066c>
   2067c:	8563c83a 	sub	r17,r16,r21
   20680:	88000e26 	beq	r17,zero,206bc <___vfprintf_internal_r+0x148>
   20684:	d8c02017 	ldw	r3,128(sp)
   20688:	d8801f17 	ldw	r2,124(sp)
   2068c:	45400015 	stw	r21,0(r8)
   20690:	1c47883a 	add	r3,r3,r17
   20694:	10800044 	addi	r2,r2,1
   20698:	d8c02015 	stw	r3,128(sp)
   2069c:	44400115 	stw	r17,4(r8)
   206a0:	d8801f15 	stw	r2,124(sp)
   206a4:	00c001c4 	movi	r3,7
   206a8:	1880a716 	blt	r3,r2,20948 <___vfprintf_internal_r+0x3d4>
   206ac:	42000204 	addi	r8,r8,8
   206b0:	d9402f17 	ldw	r5,188(sp)
   206b4:	2c4b883a 	add	r5,r5,r17
   206b8:	d9402f15 	stw	r5,188(sp)
   206bc:	80800007 	ldb	r2,0(r16)
   206c0:	1000a826 	beq	r2,zero,20964 <___vfprintf_internal_r+0x3f0>
   206c4:	84400047 	ldb	r17,1(r16)
   206c8:	00bfffc4 	movi	r2,-1
   206cc:	85400044 	addi	r21,r16,1
   206d0:	d8002785 	stb	zero,158(sp)
   206d4:	0007883a 	mov	r3,zero
   206d8:	000f883a 	mov	r7,zero
   206dc:	d8802915 	stw	r2,164(sp)
   206e0:	d8003115 	stw	zero,196(sp)
   206e4:	0025883a 	mov	r18,zero
   206e8:	01401604 	movi	r5,88
   206ec:	01800244 	movi	r6,9
   206f0:	02800a84 	movi	r10,42
   206f4:	02401b04 	movi	r9,108
   206f8:	ad400044 	addi	r21,r21,1
   206fc:	88bff804 	addi	r2,r17,-32
   20700:	28830436 	bltu	r5,r2,21314 <___vfprintf_internal_r+0xda0>
   20704:	100490ba 	slli	r2,r2,2
   20708:	010000b4 	movhi	r4,2
   2070c:	2101c704 	addi	r4,r4,1820
   20710:	1105883a 	add	r2,r2,r4
   20714:	10800017 	ldw	r2,0(r2)
   20718:	1000683a 	jmp	r2
   2071c:	00021234 	movhi	zero,2120
   20720:	00021314 	movui	zero,2124
   20724:	00021314 	movui	zero,2124
   20728:	00021254 	movui	zero,2121
   2072c:	00021314 	movui	zero,2124
   20730:	00021314 	movui	zero,2124
   20734:	00021314 	movui	zero,2124
   20738:	00021314 	movui	zero,2124
   2073c:	00021314 	movui	zero,2124
   20740:	00021314 	movui	zero,2124
   20744:	000209c8 	cmpgei	zero,zero,2087
   20748:	00021170 	cmpltui	zero,zero,2117
   2074c:	00021314 	movui	zero,2124
   20750:	00020890 	cmplti	zero,zero,2082
   20754:	000209f0 	cmpltui	zero,zero,2087
   20758:	00021314 	movui	zero,2124
   2075c:	00020a30 	cmpltui	zero,zero,2088
   20760:	00020a3c 	xorhi	zero,zero,2088
   20764:	00020a3c 	xorhi	zero,zero,2088
   20768:	00020a3c 	xorhi	zero,zero,2088
   2076c:	00020a3c 	xorhi	zero,zero,2088
   20770:	00020a3c 	xorhi	zero,zero,2088
   20774:	00020a3c 	xorhi	zero,zero,2088
   20778:	00020a3c 	xorhi	zero,zero,2088
   2077c:	00020a3c 	xorhi	zero,zero,2088
   20780:	00020a3c 	xorhi	zero,zero,2088
   20784:	00021314 	movui	zero,2124
   20788:	00021314 	movui	zero,2124
   2078c:	00021314 	movui	zero,2124
   20790:	00021314 	movui	zero,2124
   20794:	00021314 	movui	zero,2124
   20798:	00021314 	movui	zero,2124
   2079c:	00021314 	movui	zero,2124
   207a0:	00021314 	movui	zero,2124
   207a4:	00021314 	movui	zero,2124
   207a8:	00021314 	movui	zero,2124
   207ac:	00020a70 	cmpltui	zero,zero,2089
   207b0:	00020b2c 	andhi	zero,zero,2092
   207b4:	00021314 	movui	zero,2124
   207b8:	00020b2c 	andhi	zero,zero,2092
   207bc:	00021314 	movui	zero,2124
   207c0:	00021314 	movui	zero,2124
   207c4:	00021314 	movui	zero,2124
   207c8:	00021314 	movui	zero,2124
   207cc:	00020bcc 	andi	zero,zero,2095
   207d0:	00021314 	movui	zero,2124
   207d4:	00021314 	movui	zero,2124
   207d8:	00020bd8 	cmpnei	zero,zero,2095
   207dc:	00021314 	movui	zero,2124
   207e0:	00021314 	movui	zero,2124
   207e4:	00021314 	movui	zero,2124
   207e8:	00021314 	movui	zero,2124
   207ec:	00021314 	movui	zero,2124
   207f0:	00021050 	cmplti	zero,zero,2113
   207f4:	00021314 	movui	zero,2124
   207f8:	00021314 	movui	zero,2124
   207fc:	000210b0 	cmpltui	zero,zero,2114
   20800:	00021314 	movui	zero,2124
   20804:	00021314 	movui	zero,2124
   20808:	00021314 	movui	zero,2124
   2080c:	00021314 	movui	zero,2124
   20810:	00021314 	movui	zero,2124
   20814:	00021314 	movui	zero,2124
   20818:	00021314 	movui	zero,2124
   2081c:	00021314 	movui	zero,2124
   20820:	00021314 	movui	zero,2124
   20824:	00021314 	movui	zero,2124
   20828:	000212c0 	call	212c <__alt_mem_onchip_memory_nios2_FFT-0x1ded4>
   2082c:	00021260 	cmpeqi	zero,zero,2121
   20830:	00020b2c 	andhi	zero,zero,2092
   20834:	00020b2c 	andhi	zero,zero,2092
   20838:	00020b2c 	andhi	zero,zero,2092
   2083c:	00021270 	cmpltui	zero,zero,2121
   20840:	00021260 	cmpeqi	zero,zero,2121
   20844:	00021314 	movui	zero,2124
   20848:	00021314 	movui	zero,2124
   2084c:	0002127c 	xorhi	zero,zero,2121
   20850:	00021314 	movui	zero,2124
   20854:	0002128c 	andi	zero,zero,2122
   20858:	00021160 	cmpeqi	zero,zero,2117
   2085c:	0002089c 	xori	zero,zero,2082
   20860:	00021180 	call	2118 <__alt_mem_onchip_memory_nios2_FFT-0x1dee8>
   20864:	00021314 	movui	zero,2124
   20868:	0002118c 	andi	zero,zero,2118
   2086c:	00021314 	movui	zero,2124
   20870:	000211e8 	cmpgeui	zero,zero,2119
   20874:	00021314 	movui	zero,2124
   20878:	00021314 	movui	zero,2124
   2087c:	000211f8 	rdprs	zero,zero,2119
   20880:	d9003117 	ldw	r4,196(sp)
   20884:	d8802d15 	stw	r2,180(sp)
   20888:	0109c83a 	sub	r4,zero,r4
   2088c:	d9003115 	stw	r4,196(sp)
   20890:	94800114 	ori	r18,r18,4
   20894:	ac400007 	ldb	r17,0(r21)
   20898:	003f9706 	br	206f8 <__alt_data_end+0xfffe06f8>
   2089c:	00800c04 	movi	r2,48
   208a0:	d9002d17 	ldw	r4,180(sp)
   208a4:	d9402917 	ldw	r5,164(sp)
   208a8:	d8802705 	stb	r2,156(sp)
   208ac:	00801e04 	movi	r2,120
   208b0:	d8802745 	stb	r2,157(sp)
   208b4:	d8002785 	stb	zero,158(sp)
   208b8:	20c00104 	addi	r3,r4,4
   208bc:	24c00017 	ldw	r19,0(r4)
   208c0:	002d883a 	mov	r22,zero
   208c4:	90800094 	ori	r2,r18,2
   208c8:	28029a16 	blt	r5,zero,21334 <___vfprintf_internal_r+0xdc0>
   208cc:	00bfdfc4 	movi	r2,-129
   208d0:	90a4703a 	and	r18,r18,r2
   208d4:	d8c02d15 	stw	r3,180(sp)
   208d8:	94800094 	ori	r18,r18,2
   208dc:	9802871e 	bne	r19,zero,212fc <___vfprintf_internal_r+0xd88>
   208e0:	008000f4 	movhi	r2,3
   208e4:	10828504 	addi	r2,r2,2580
   208e8:	d8803915 	stw	r2,228(sp)
   208ec:	04401e04 	movi	r17,120
   208f0:	d8802917 	ldw	r2,164(sp)
   208f4:	0039883a 	mov	fp,zero
   208f8:	1001e926 	beq	r2,zero,210a0 <___vfprintf_internal_r+0xb2c>
   208fc:	0027883a 	mov	r19,zero
   20900:	002d883a 	mov	r22,zero
   20904:	00020506 	br	2111c <___vfprintf_internal_r+0xba8>
   20908:	d9002c17 	ldw	r4,176(sp)
   2090c:	b80b883a 	mov	r5,r23
   20910:	00228440 	call	22844 <__swsetup_r>
   20914:	1005ac1e 	bne	r2,zero,21fc8 <___vfprintf_internal_r+0x1a54>
   20918:	b880030b 	ldhu	r2,12(r23)
   2091c:	00c00284 	movi	r3,10
   20920:	1080068c 	andi	r2,r2,26
   20924:	10ff3c1e 	bne	r2,r3,20618 <__alt_data_end+0xfffe0618>
   20928:	b880038f 	ldh	r2,14(r23)
   2092c:	103f3a16 	blt	r2,zero,20618 <__alt_data_end+0xfffe0618>
   20930:	d9c02d17 	ldw	r7,180(sp)
   20934:	d9002c17 	ldw	r4,176(sp)
   20938:	a80d883a 	mov	r6,r21
   2093c:	b80b883a 	mov	r5,r23
   20940:	00227880 	call	22788 <__sbprintf>
   20944:	00001106 	br	2098c <___vfprintf_internal_r+0x418>
   20948:	d9002c17 	ldw	r4,176(sp)
   2094c:	d9801e04 	addi	r6,sp,120
   20950:	b80b883a 	mov	r5,r23
   20954:	0027b700 	call	27b70 <__sprint_r>
   20958:	1000081e 	bne	r2,zero,2097c <___vfprintf_internal_r+0x408>
   2095c:	da000404 	addi	r8,sp,16
   20960:	003f5306 	br	206b0 <__alt_data_end+0xfffe06b0>
   20964:	d8802017 	ldw	r2,128(sp)
   20968:	10000426 	beq	r2,zero,2097c <___vfprintf_internal_r+0x408>
   2096c:	d9002c17 	ldw	r4,176(sp)
   20970:	d9801e04 	addi	r6,sp,120
   20974:	b80b883a 	mov	r5,r23
   20978:	0027b700 	call	27b70 <__sprint_r>
   2097c:	b880030b 	ldhu	r2,12(r23)
   20980:	1080100c 	andi	r2,r2,64
   20984:	1005901e 	bne	r2,zero,21fc8 <___vfprintf_internal_r+0x1a54>
   20988:	d8802f17 	ldw	r2,188(sp)
   2098c:	dfc04717 	ldw	ra,284(sp)
   20990:	df004617 	ldw	fp,280(sp)
   20994:	ddc04517 	ldw	r23,276(sp)
   20998:	dd804417 	ldw	r22,272(sp)
   2099c:	dd404317 	ldw	r21,268(sp)
   209a0:	dd004217 	ldw	r20,264(sp)
   209a4:	dcc04117 	ldw	r19,260(sp)
   209a8:	dc804017 	ldw	r18,256(sp)
   209ac:	dc403f17 	ldw	r17,252(sp)
   209b0:	dc003e17 	ldw	r16,248(sp)
   209b4:	dec04804 	addi	sp,sp,288
   209b8:	f800283a 	ret
   209bc:	d9002c17 	ldw	r4,176(sp)
   209c0:	00248180 	call	24818 <__sinit>
   209c4:	003f0406 	br	205d8 <__alt_data_end+0xfffe05d8>
   209c8:	d8802d17 	ldw	r2,180(sp)
   209cc:	d9002d17 	ldw	r4,180(sp)
   209d0:	10800017 	ldw	r2,0(r2)
   209d4:	d8803115 	stw	r2,196(sp)
   209d8:	20800104 	addi	r2,r4,4
   209dc:	d9003117 	ldw	r4,196(sp)
   209e0:	203fa716 	blt	r4,zero,20880 <__alt_data_end+0xfffe0880>
   209e4:	d8802d15 	stw	r2,180(sp)
   209e8:	ac400007 	ldb	r17,0(r21)
   209ec:	003f4206 	br	206f8 <__alt_data_end+0xfffe06f8>
   209f0:	ac400007 	ldb	r17,0(r21)
   209f4:	aac00044 	addi	r11,r21,1
   209f8:	8a872826 	beq	r17,r10,2269c <___vfprintf_internal_r+0x2128>
   209fc:	88bff404 	addi	r2,r17,-48
   20a00:	0009883a 	mov	r4,zero
   20a04:	30867d36 	bltu	r6,r2,223fc <___vfprintf_internal_r+0x1e88>
   20a08:	5c400007 	ldb	r17,0(r11)
   20a0c:	210002a4 	muli	r4,r4,10
   20a10:	5d400044 	addi	r21,r11,1
   20a14:	a817883a 	mov	r11,r21
   20a18:	2089883a 	add	r4,r4,r2
   20a1c:	88bff404 	addi	r2,r17,-48
   20a20:	30bff92e 	bgeu	r6,r2,20a08 <__alt_data_end+0xfffe0a08>
   20a24:	2005c916 	blt	r4,zero,2214c <___vfprintf_internal_r+0x1bd8>
   20a28:	d9002915 	stw	r4,164(sp)
   20a2c:	003f3306 	br	206fc <__alt_data_end+0xfffe06fc>
   20a30:	94802014 	ori	r18,r18,128
   20a34:	ac400007 	ldb	r17,0(r21)
   20a38:	003f2f06 	br	206f8 <__alt_data_end+0xfffe06f8>
   20a3c:	a809883a 	mov	r4,r21
   20a40:	d8003115 	stw	zero,196(sp)
   20a44:	88bff404 	addi	r2,r17,-48
   20a48:	0017883a 	mov	r11,zero
   20a4c:	24400007 	ldb	r17,0(r4)
   20a50:	5ac002a4 	muli	r11,r11,10
   20a54:	ad400044 	addi	r21,r21,1
   20a58:	a809883a 	mov	r4,r21
   20a5c:	12d7883a 	add	r11,r2,r11
   20a60:	88bff404 	addi	r2,r17,-48
   20a64:	30bff92e 	bgeu	r6,r2,20a4c <__alt_data_end+0xfffe0a4c>
   20a68:	dac03115 	stw	r11,196(sp)
   20a6c:	003f2306 	br	206fc <__alt_data_end+0xfffe06fc>
   20a70:	18c03fcc 	andi	r3,r3,255
   20a74:	18072b1e 	bne	r3,zero,22724 <___vfprintf_internal_r+0x21b0>
   20a78:	94800414 	ori	r18,r18,16
   20a7c:	9080080c 	andi	r2,r18,32
   20a80:	10037b26 	beq	r2,zero,21870 <___vfprintf_internal_r+0x12fc>
   20a84:	d9402d17 	ldw	r5,180(sp)
   20a88:	28800117 	ldw	r2,4(r5)
   20a8c:	2cc00017 	ldw	r19,0(r5)
   20a90:	29400204 	addi	r5,r5,8
   20a94:	d9402d15 	stw	r5,180(sp)
   20a98:	102d883a 	mov	r22,r2
   20a9c:	10044b16 	blt	r2,zero,21bcc <___vfprintf_internal_r+0x1658>
   20aa0:	d9402917 	ldw	r5,164(sp)
   20aa4:	df002783 	ldbu	fp,158(sp)
   20aa8:	2803bc16 	blt	r5,zero,2199c <___vfprintf_internal_r+0x1428>
   20aac:	00ffdfc4 	movi	r3,-129
   20ab0:	9d84b03a 	or	r2,r19,r22
   20ab4:	90e4703a 	and	r18,r18,r3
   20ab8:	10017726 	beq	r2,zero,21098 <___vfprintf_internal_r+0xb24>
   20abc:	b0038326 	beq	r22,zero,218cc <___vfprintf_internal_r+0x1358>
   20ac0:	dc402a15 	stw	r17,168(sp)
   20ac4:	dc001e04 	addi	r16,sp,120
   20ac8:	b023883a 	mov	r17,r22
   20acc:	402d883a 	mov	r22,r8
   20ad0:	9809883a 	mov	r4,r19
   20ad4:	880b883a 	mov	r5,r17
   20ad8:	01800284 	movi	r6,10
   20adc:	000f883a 	mov	r7,zero
   20ae0:	0029f680 	call	29f68 <__umoddi3>
   20ae4:	10800c04 	addi	r2,r2,48
   20ae8:	843fffc4 	addi	r16,r16,-1
   20aec:	9809883a 	mov	r4,r19
   20af0:	880b883a 	mov	r5,r17
   20af4:	80800005 	stb	r2,0(r16)
   20af8:	01800284 	movi	r6,10
   20afc:	000f883a 	mov	r7,zero
   20b00:	00299f00 	call	299f0 <__udivdi3>
   20b04:	1027883a 	mov	r19,r2
   20b08:	10c4b03a 	or	r2,r2,r3
   20b0c:	1823883a 	mov	r17,r3
   20b10:	103fef1e 	bne	r2,zero,20ad0 <__alt_data_end+0xfffe0ad0>
   20b14:	d8c02817 	ldw	r3,160(sp)
   20b18:	dc402a17 	ldw	r17,168(sp)
   20b1c:	b011883a 	mov	r8,r22
   20b20:	1c07c83a 	sub	r3,r3,r16
   20b24:	d8c02e15 	stw	r3,184(sp)
   20b28:	00005906 	br	20c90 <___vfprintf_internal_r+0x71c>
   20b2c:	18c03fcc 	andi	r3,r3,255
   20b30:	1806fa1e 	bne	r3,zero,2271c <___vfprintf_internal_r+0x21a8>
   20b34:	9080020c 	andi	r2,r18,8
   20b38:	10048a26 	beq	r2,zero,21d64 <___vfprintf_internal_r+0x17f0>
   20b3c:	d8c02d17 	ldw	r3,180(sp)
   20b40:	d9002d17 	ldw	r4,180(sp)
   20b44:	d9402d17 	ldw	r5,180(sp)
   20b48:	18c00017 	ldw	r3,0(r3)
   20b4c:	21000117 	ldw	r4,4(r4)
   20b50:	29400204 	addi	r5,r5,8
   20b54:	d8c03615 	stw	r3,216(sp)
   20b58:	d9003815 	stw	r4,224(sp)
   20b5c:	d9402d15 	stw	r5,180(sp)
   20b60:	d9003617 	ldw	r4,216(sp)
   20b64:	d9403817 	ldw	r5,224(sp)
   20b68:	da003d15 	stw	r8,244(sp)
   20b6c:	04000044 	movi	r16,1
   20b70:	00277940 	call	27794 <__fpclassifyd>
   20b74:	da003d17 	ldw	r8,244(sp)
   20b78:	14041f1e 	bne	r2,r16,21bf8 <___vfprintf_internal_r+0x1684>
   20b7c:	d9003617 	ldw	r4,216(sp)
   20b80:	d9403817 	ldw	r5,224(sp)
   20b84:	000d883a 	mov	r6,zero
   20b88:	000f883a 	mov	r7,zero
   20b8c:	002b94c0 	call	2b94c <__ledf2>
   20b90:	da003d17 	ldw	r8,244(sp)
   20b94:	1005be16 	blt	r2,zero,22290 <___vfprintf_internal_r+0x1d1c>
   20b98:	df002783 	ldbu	fp,158(sp)
   20b9c:	008011c4 	movi	r2,71
   20ba0:	1445330e 	bge	r2,r17,22070 <___vfprintf_internal_r+0x1afc>
   20ba4:	040000f4 	movhi	r16,3
   20ba8:	84027d04 	addi	r16,r16,2548
   20bac:	00c000c4 	movi	r3,3
   20bb0:	00bfdfc4 	movi	r2,-129
   20bb4:	d8c02a15 	stw	r3,168(sp)
   20bb8:	90a4703a 	and	r18,r18,r2
   20bbc:	d8c02e15 	stw	r3,184(sp)
   20bc0:	d8002915 	stw	zero,164(sp)
   20bc4:	d8003215 	stw	zero,200(sp)
   20bc8:	00003706 	br	20ca8 <___vfprintf_internal_r+0x734>
   20bcc:	94800214 	ori	r18,r18,8
   20bd0:	ac400007 	ldb	r17,0(r21)
   20bd4:	003ec806 	br	206f8 <__alt_data_end+0xfffe06f8>
   20bd8:	18c03fcc 	andi	r3,r3,255
   20bdc:	1806db1e 	bne	r3,zero,2274c <___vfprintf_internal_r+0x21d8>
   20be0:	94800414 	ori	r18,r18,16
   20be4:	9080080c 	andi	r2,r18,32
   20be8:	1002d826 	beq	r2,zero,2174c <___vfprintf_internal_r+0x11d8>
   20bec:	d9402d17 	ldw	r5,180(sp)
   20bf0:	d8c02917 	ldw	r3,164(sp)
   20bf4:	d8002785 	stb	zero,158(sp)
   20bf8:	28800204 	addi	r2,r5,8
   20bfc:	2cc00017 	ldw	r19,0(r5)
   20c00:	2d800117 	ldw	r22,4(r5)
   20c04:	18048f16 	blt	r3,zero,21e44 <___vfprintf_internal_r+0x18d0>
   20c08:	013fdfc4 	movi	r4,-129
   20c0c:	9d86b03a 	or	r3,r19,r22
   20c10:	d8802d15 	stw	r2,180(sp)
   20c14:	9124703a 	and	r18,r18,r4
   20c18:	1802d91e 	bne	r3,zero,21780 <___vfprintf_internal_r+0x120c>
   20c1c:	d8c02917 	ldw	r3,164(sp)
   20c20:	0039883a 	mov	fp,zero
   20c24:	1805c326 	beq	r3,zero,22334 <___vfprintf_internal_r+0x1dc0>
   20c28:	0027883a 	mov	r19,zero
   20c2c:	002d883a 	mov	r22,zero
   20c30:	dc001e04 	addi	r16,sp,120
   20c34:	9806d0fa 	srli	r3,r19,3
   20c38:	b008977a 	slli	r4,r22,29
   20c3c:	b02cd0fa 	srli	r22,r22,3
   20c40:	9cc001cc 	andi	r19,r19,7
   20c44:	98800c04 	addi	r2,r19,48
   20c48:	843fffc4 	addi	r16,r16,-1
   20c4c:	20e6b03a 	or	r19,r4,r3
   20c50:	80800005 	stb	r2,0(r16)
   20c54:	9d86b03a 	or	r3,r19,r22
   20c58:	183ff61e 	bne	r3,zero,20c34 <__alt_data_end+0xfffe0c34>
   20c5c:	90c0004c 	andi	r3,r18,1
   20c60:	18013b26 	beq	r3,zero,21150 <___vfprintf_internal_r+0xbdc>
   20c64:	10803fcc 	andi	r2,r2,255
   20c68:	1080201c 	xori	r2,r2,128
   20c6c:	10bfe004 	addi	r2,r2,-128
   20c70:	00c00c04 	movi	r3,48
   20c74:	10c13626 	beq	r2,r3,21150 <___vfprintf_internal_r+0xbdc>
   20c78:	80ffffc5 	stb	r3,-1(r16)
   20c7c:	d8c02817 	ldw	r3,160(sp)
   20c80:	80bfffc4 	addi	r2,r16,-1
   20c84:	1021883a 	mov	r16,r2
   20c88:	1887c83a 	sub	r3,r3,r2
   20c8c:	d8c02e15 	stw	r3,184(sp)
   20c90:	d8802e17 	ldw	r2,184(sp)
   20c94:	d9002917 	ldw	r4,164(sp)
   20c98:	1100010e 	bge	r2,r4,20ca0 <___vfprintf_internal_r+0x72c>
   20c9c:	2005883a 	mov	r2,r4
   20ca0:	d8802a15 	stw	r2,168(sp)
   20ca4:	d8003215 	stw	zero,200(sp)
   20ca8:	e7003fcc 	andi	fp,fp,255
   20cac:	e700201c 	xori	fp,fp,128
   20cb0:	e73fe004 	addi	fp,fp,-128
   20cb4:	e0000326 	beq	fp,zero,20cc4 <___vfprintf_internal_r+0x750>
   20cb8:	d8c02a17 	ldw	r3,168(sp)
   20cbc:	18c00044 	addi	r3,r3,1
   20cc0:	d8c02a15 	stw	r3,168(sp)
   20cc4:	90c0008c 	andi	r3,r18,2
   20cc8:	d8c02b15 	stw	r3,172(sp)
   20ccc:	18000326 	beq	r3,zero,20cdc <___vfprintf_internal_r+0x768>
   20cd0:	d8c02a17 	ldw	r3,168(sp)
   20cd4:	18c00084 	addi	r3,r3,2
   20cd8:	d8c02a15 	stw	r3,168(sp)
   20cdc:	90c0210c 	andi	r3,r18,132
   20ce0:	d8c03015 	stw	r3,192(sp)
   20ce4:	1801a31e 	bne	r3,zero,21374 <___vfprintf_internal_r+0xe00>
   20ce8:	d9003117 	ldw	r4,196(sp)
   20cec:	d8c02a17 	ldw	r3,168(sp)
   20cf0:	20e7c83a 	sub	r19,r4,r3
   20cf4:	04c19f0e 	bge	zero,r19,21374 <___vfprintf_internal_r+0xe00>
   20cf8:	02400404 	movi	r9,16
   20cfc:	d8c02017 	ldw	r3,128(sp)
   20d00:	d8801f17 	ldw	r2,124(sp)
   20d04:	4cc50d0e 	bge	r9,r19,2213c <___vfprintf_internal_r+0x1bc8>
   20d08:	014000f4 	movhi	r5,3
   20d0c:	29429084 	addi	r5,r5,2626
   20d10:	dc403b15 	stw	r17,236(sp)
   20d14:	d9403515 	stw	r5,212(sp)
   20d18:	9823883a 	mov	r17,r19
   20d1c:	482d883a 	mov	r22,r9
   20d20:	9027883a 	mov	r19,r18
   20d24:	070001c4 	movi	fp,7
   20d28:	8025883a 	mov	r18,r16
   20d2c:	dc002c17 	ldw	r16,176(sp)
   20d30:	00000306 	br	20d40 <___vfprintf_internal_r+0x7cc>
   20d34:	8c7ffc04 	addi	r17,r17,-16
   20d38:	42000204 	addi	r8,r8,8
   20d3c:	b440130e 	bge	r22,r17,20d8c <___vfprintf_internal_r+0x818>
   20d40:	010000f4 	movhi	r4,3
   20d44:	18c00404 	addi	r3,r3,16
   20d48:	10800044 	addi	r2,r2,1
   20d4c:	21029084 	addi	r4,r4,2626
   20d50:	41000015 	stw	r4,0(r8)
   20d54:	45800115 	stw	r22,4(r8)
   20d58:	d8c02015 	stw	r3,128(sp)
   20d5c:	d8801f15 	stw	r2,124(sp)
   20d60:	e0bff40e 	bge	fp,r2,20d34 <__alt_data_end+0xfffe0d34>
   20d64:	d9801e04 	addi	r6,sp,120
   20d68:	b80b883a 	mov	r5,r23
   20d6c:	8009883a 	mov	r4,r16
   20d70:	0027b700 	call	27b70 <__sprint_r>
   20d74:	103f011e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   20d78:	8c7ffc04 	addi	r17,r17,-16
   20d7c:	d8c02017 	ldw	r3,128(sp)
   20d80:	d8801f17 	ldw	r2,124(sp)
   20d84:	da000404 	addi	r8,sp,16
   20d88:	b47fed16 	blt	r22,r17,20d40 <__alt_data_end+0xfffe0d40>
   20d8c:	9021883a 	mov	r16,r18
   20d90:	9825883a 	mov	r18,r19
   20d94:	8827883a 	mov	r19,r17
   20d98:	dc403b17 	ldw	r17,236(sp)
   20d9c:	d9403517 	ldw	r5,212(sp)
   20da0:	98c7883a 	add	r3,r19,r3
   20da4:	10800044 	addi	r2,r2,1
   20da8:	41400015 	stw	r5,0(r8)
   20dac:	44c00115 	stw	r19,4(r8)
   20db0:	d8c02015 	stw	r3,128(sp)
   20db4:	d8801f15 	stw	r2,124(sp)
   20db8:	010001c4 	movi	r4,7
   20dbc:	2082a316 	blt	r4,r2,2184c <___vfprintf_internal_r+0x12d8>
   20dc0:	df002787 	ldb	fp,158(sp)
   20dc4:	42000204 	addi	r8,r8,8
   20dc8:	e0000c26 	beq	fp,zero,20dfc <___vfprintf_internal_r+0x888>
   20dcc:	d8801f17 	ldw	r2,124(sp)
   20dd0:	d9002784 	addi	r4,sp,158
   20dd4:	18c00044 	addi	r3,r3,1
   20dd8:	10800044 	addi	r2,r2,1
   20ddc:	41000015 	stw	r4,0(r8)
   20de0:	01000044 	movi	r4,1
   20de4:	41000115 	stw	r4,4(r8)
   20de8:	d8c02015 	stw	r3,128(sp)
   20dec:	d8801f15 	stw	r2,124(sp)
   20df0:	010001c4 	movi	r4,7
   20df4:	20823c16 	blt	r4,r2,216e8 <___vfprintf_internal_r+0x1174>
   20df8:	42000204 	addi	r8,r8,8
   20dfc:	d8802b17 	ldw	r2,172(sp)
   20e00:	10000c26 	beq	r2,zero,20e34 <___vfprintf_internal_r+0x8c0>
   20e04:	d8801f17 	ldw	r2,124(sp)
   20e08:	d9002704 	addi	r4,sp,156
   20e0c:	18c00084 	addi	r3,r3,2
   20e10:	10800044 	addi	r2,r2,1
   20e14:	41000015 	stw	r4,0(r8)
   20e18:	01000084 	movi	r4,2
   20e1c:	41000115 	stw	r4,4(r8)
   20e20:	d8c02015 	stw	r3,128(sp)
   20e24:	d8801f15 	stw	r2,124(sp)
   20e28:	010001c4 	movi	r4,7
   20e2c:	20823616 	blt	r4,r2,21708 <___vfprintf_internal_r+0x1194>
   20e30:	42000204 	addi	r8,r8,8
   20e34:	d9003017 	ldw	r4,192(sp)
   20e38:	00802004 	movi	r2,128
   20e3c:	20819926 	beq	r4,r2,214a4 <___vfprintf_internal_r+0xf30>
   20e40:	d9402917 	ldw	r5,164(sp)
   20e44:	d8802e17 	ldw	r2,184(sp)
   20e48:	28adc83a 	sub	r22,r5,r2
   20e4c:	0580310e 	bge	zero,r22,20f14 <___vfprintf_internal_r+0x9a0>
   20e50:	07000404 	movi	fp,16
   20e54:	d8801f17 	ldw	r2,124(sp)
   20e58:	e584140e 	bge	fp,r22,21eac <___vfprintf_internal_r+0x1938>
   20e5c:	014000f4 	movhi	r5,3
   20e60:	29428c84 	addi	r5,r5,2610
   20e64:	dc402915 	stw	r17,164(sp)
   20e68:	d9402b15 	stw	r5,172(sp)
   20e6c:	b023883a 	mov	r17,r22
   20e70:	04c001c4 	movi	r19,7
   20e74:	a82d883a 	mov	r22,r21
   20e78:	902b883a 	mov	r21,r18
   20e7c:	8025883a 	mov	r18,r16
   20e80:	dc002c17 	ldw	r16,176(sp)
   20e84:	00000306 	br	20e94 <___vfprintf_internal_r+0x920>
   20e88:	8c7ffc04 	addi	r17,r17,-16
   20e8c:	42000204 	addi	r8,r8,8
   20e90:	e440110e 	bge	fp,r17,20ed8 <___vfprintf_internal_r+0x964>
   20e94:	18c00404 	addi	r3,r3,16
   20e98:	10800044 	addi	r2,r2,1
   20e9c:	45000015 	stw	r20,0(r8)
   20ea0:	47000115 	stw	fp,4(r8)
   20ea4:	d8c02015 	stw	r3,128(sp)
   20ea8:	d8801f15 	stw	r2,124(sp)
   20eac:	98bff60e 	bge	r19,r2,20e88 <__alt_data_end+0xfffe0e88>
   20eb0:	d9801e04 	addi	r6,sp,120
   20eb4:	b80b883a 	mov	r5,r23
   20eb8:	8009883a 	mov	r4,r16
   20ebc:	0027b700 	call	27b70 <__sprint_r>
   20ec0:	103eae1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   20ec4:	8c7ffc04 	addi	r17,r17,-16
   20ec8:	d8c02017 	ldw	r3,128(sp)
   20ecc:	d8801f17 	ldw	r2,124(sp)
   20ed0:	da000404 	addi	r8,sp,16
   20ed4:	e47fef16 	blt	fp,r17,20e94 <__alt_data_end+0xfffe0e94>
   20ed8:	9021883a 	mov	r16,r18
   20edc:	a825883a 	mov	r18,r21
   20ee0:	b02b883a 	mov	r21,r22
   20ee4:	882d883a 	mov	r22,r17
   20ee8:	dc402917 	ldw	r17,164(sp)
   20eec:	d9002b17 	ldw	r4,172(sp)
   20ef0:	1d87883a 	add	r3,r3,r22
   20ef4:	10800044 	addi	r2,r2,1
   20ef8:	41000015 	stw	r4,0(r8)
   20efc:	45800115 	stw	r22,4(r8)
   20f00:	d8c02015 	stw	r3,128(sp)
   20f04:	d8801f15 	stw	r2,124(sp)
   20f08:	010001c4 	movi	r4,7
   20f0c:	2081ee16 	blt	r4,r2,216c8 <___vfprintf_internal_r+0x1154>
   20f10:	42000204 	addi	r8,r8,8
   20f14:	9080400c 	andi	r2,r18,256
   20f18:	1001181e 	bne	r2,zero,2137c <___vfprintf_internal_r+0xe08>
   20f1c:	d9402e17 	ldw	r5,184(sp)
   20f20:	d8801f17 	ldw	r2,124(sp)
   20f24:	44000015 	stw	r16,0(r8)
   20f28:	1947883a 	add	r3,r3,r5
   20f2c:	10800044 	addi	r2,r2,1
   20f30:	41400115 	stw	r5,4(r8)
   20f34:	d8c02015 	stw	r3,128(sp)
   20f38:	d8801f15 	stw	r2,124(sp)
   20f3c:	010001c4 	movi	r4,7
   20f40:	2081d316 	blt	r4,r2,21690 <___vfprintf_internal_r+0x111c>
   20f44:	42000204 	addi	r8,r8,8
   20f48:	9480010c 	andi	r18,r18,4
   20f4c:	90003226 	beq	r18,zero,21018 <___vfprintf_internal_r+0xaa4>
   20f50:	d9403117 	ldw	r5,196(sp)
   20f54:	d8802a17 	ldw	r2,168(sp)
   20f58:	28a1c83a 	sub	r16,r5,r2
   20f5c:	04002e0e 	bge	zero,r16,21018 <___vfprintf_internal_r+0xaa4>
   20f60:	04400404 	movi	r17,16
   20f64:	d8801f17 	ldw	r2,124(sp)
   20f68:	8c04a20e 	bge	r17,r16,221f4 <___vfprintf_internal_r+0x1c80>
   20f6c:	014000f4 	movhi	r5,3
   20f70:	29429084 	addi	r5,r5,2626
   20f74:	d9403515 	stw	r5,212(sp)
   20f78:	048001c4 	movi	r18,7
   20f7c:	dcc02c17 	ldw	r19,176(sp)
   20f80:	00000306 	br	20f90 <___vfprintf_internal_r+0xa1c>
   20f84:	843ffc04 	addi	r16,r16,-16
   20f88:	42000204 	addi	r8,r8,8
   20f8c:	8c00130e 	bge	r17,r16,20fdc <___vfprintf_internal_r+0xa68>
   20f90:	010000f4 	movhi	r4,3
   20f94:	18c00404 	addi	r3,r3,16
   20f98:	10800044 	addi	r2,r2,1
   20f9c:	21029084 	addi	r4,r4,2626
   20fa0:	41000015 	stw	r4,0(r8)
   20fa4:	44400115 	stw	r17,4(r8)
   20fa8:	d8c02015 	stw	r3,128(sp)
   20fac:	d8801f15 	stw	r2,124(sp)
   20fb0:	90bff40e 	bge	r18,r2,20f84 <__alt_data_end+0xfffe0f84>
   20fb4:	d9801e04 	addi	r6,sp,120
   20fb8:	b80b883a 	mov	r5,r23
   20fbc:	9809883a 	mov	r4,r19
   20fc0:	0027b700 	call	27b70 <__sprint_r>
   20fc4:	103e6d1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   20fc8:	843ffc04 	addi	r16,r16,-16
   20fcc:	d8c02017 	ldw	r3,128(sp)
   20fd0:	d8801f17 	ldw	r2,124(sp)
   20fd4:	da000404 	addi	r8,sp,16
   20fd8:	8c3fed16 	blt	r17,r16,20f90 <__alt_data_end+0xfffe0f90>
   20fdc:	d9403517 	ldw	r5,212(sp)
   20fe0:	1c07883a 	add	r3,r3,r16
   20fe4:	10800044 	addi	r2,r2,1
   20fe8:	41400015 	stw	r5,0(r8)
   20fec:	44000115 	stw	r16,4(r8)
   20ff0:	d8c02015 	stw	r3,128(sp)
   20ff4:	d8801f15 	stw	r2,124(sp)
   20ff8:	010001c4 	movi	r4,7
   20ffc:	2080060e 	bge	r4,r2,21018 <___vfprintf_internal_r+0xaa4>
   21000:	d9002c17 	ldw	r4,176(sp)
   21004:	d9801e04 	addi	r6,sp,120
   21008:	b80b883a 	mov	r5,r23
   2100c:	0027b700 	call	27b70 <__sprint_r>
   21010:	103e5a1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21014:	d8c02017 	ldw	r3,128(sp)
   21018:	d8803117 	ldw	r2,196(sp)
   2101c:	d9002a17 	ldw	r4,168(sp)
   21020:	1100010e 	bge	r2,r4,21028 <___vfprintf_internal_r+0xab4>
   21024:	2005883a 	mov	r2,r4
   21028:	d9402f17 	ldw	r5,188(sp)
   2102c:	288b883a 	add	r5,r5,r2
   21030:	d9402f15 	stw	r5,188(sp)
   21034:	18019e1e 	bne	r3,zero,216b0 <___vfprintf_internal_r+0x113c>
   21038:	a8800007 	ldb	r2,0(r21)
   2103c:	d8001f15 	stw	zero,124(sp)
   21040:	da000404 	addi	r8,sp,16
   21044:	103d851e 	bne	r2,zero,2065c <__alt_data_end+0xfffe065c>
   21048:	a821883a 	mov	r16,r21
   2104c:	003d9b06 	br	206bc <__alt_data_end+0xfffe06bc>
   21050:	18c03fcc 	andi	r3,r3,255
   21054:	1805c11e 	bne	r3,zero,2275c <___vfprintf_internal_r+0x21e8>
   21058:	94800414 	ori	r18,r18,16
   2105c:	9080080c 	andi	r2,r18,32
   21060:	10020c26 	beq	r2,zero,21894 <___vfprintf_internal_r+0x1320>
   21064:	d8802d17 	ldw	r2,180(sp)
   21068:	d9002917 	ldw	r4,164(sp)
   2106c:	d8002785 	stb	zero,158(sp)
   21070:	10c00204 	addi	r3,r2,8
   21074:	14c00017 	ldw	r19,0(r2)
   21078:	15800117 	ldw	r22,4(r2)
   2107c:	20040f16 	blt	r4,zero,220bc <___vfprintf_internal_r+0x1b48>
   21080:	013fdfc4 	movi	r4,-129
   21084:	9d84b03a 	or	r2,r19,r22
   21088:	d8c02d15 	stw	r3,180(sp)
   2108c:	9124703a 	and	r18,r18,r4
   21090:	0039883a 	mov	fp,zero
   21094:	103e891e 	bne	r2,zero,20abc <__alt_data_end+0xfffe0abc>
   21098:	d9002917 	ldw	r4,164(sp)
   2109c:	2002c11e 	bne	r4,zero,21ba4 <___vfprintf_internal_r+0x1630>
   210a0:	d8002915 	stw	zero,164(sp)
   210a4:	d8002e15 	stw	zero,184(sp)
   210a8:	dc001e04 	addi	r16,sp,120
   210ac:	003ef806 	br	20c90 <__alt_data_end+0xfffe0c90>
   210b0:	18c03fcc 	andi	r3,r3,255
   210b4:	18059d1e 	bne	r3,zero,2272c <___vfprintf_internal_r+0x21b8>
   210b8:	014000f4 	movhi	r5,3
   210bc:	29428004 	addi	r5,r5,2560
   210c0:	d9403915 	stw	r5,228(sp)
   210c4:	9080080c 	andi	r2,r18,32
   210c8:	10005226 	beq	r2,zero,21214 <___vfprintf_internal_r+0xca0>
   210cc:	d8802d17 	ldw	r2,180(sp)
   210d0:	14c00017 	ldw	r19,0(r2)
   210d4:	15800117 	ldw	r22,4(r2)
   210d8:	10800204 	addi	r2,r2,8
   210dc:	d8802d15 	stw	r2,180(sp)
   210e0:	9080004c 	andi	r2,r18,1
   210e4:	10019026 	beq	r2,zero,21728 <___vfprintf_internal_r+0x11b4>
   210e8:	9d84b03a 	or	r2,r19,r22
   210ec:	10036926 	beq	r2,zero,21e94 <___vfprintf_internal_r+0x1920>
   210f0:	d8c02917 	ldw	r3,164(sp)
   210f4:	00800c04 	movi	r2,48
   210f8:	d8802705 	stb	r2,156(sp)
   210fc:	dc402745 	stb	r17,157(sp)
   21100:	d8002785 	stb	zero,158(sp)
   21104:	90800094 	ori	r2,r18,2
   21108:	18045d16 	blt	r3,zero,22280 <___vfprintf_internal_r+0x1d0c>
   2110c:	00bfdfc4 	movi	r2,-129
   21110:	90a4703a 	and	r18,r18,r2
   21114:	94800094 	ori	r18,r18,2
   21118:	0039883a 	mov	fp,zero
   2111c:	d9003917 	ldw	r4,228(sp)
   21120:	dc001e04 	addi	r16,sp,120
   21124:	988003cc 	andi	r2,r19,15
   21128:	b006973a 	slli	r3,r22,28
   2112c:	2085883a 	add	r2,r4,r2
   21130:	9826d13a 	srli	r19,r19,4
   21134:	10800003 	ldbu	r2,0(r2)
   21138:	b02cd13a 	srli	r22,r22,4
   2113c:	843fffc4 	addi	r16,r16,-1
   21140:	1ce6b03a 	or	r19,r3,r19
   21144:	80800005 	stb	r2,0(r16)
   21148:	9d84b03a 	or	r2,r19,r22
   2114c:	103ff51e 	bne	r2,zero,21124 <__alt_data_end+0xfffe1124>
   21150:	d8c02817 	ldw	r3,160(sp)
   21154:	1c07c83a 	sub	r3,r3,r16
   21158:	d8c02e15 	stw	r3,184(sp)
   2115c:	003ecc06 	br	20c90 <__alt_data_end+0xfffe0c90>
   21160:	18c03fcc 	andi	r3,r3,255
   21164:	183e9f26 	beq	r3,zero,20be4 <__alt_data_end+0xfffe0be4>
   21168:	d9c02785 	stb	r7,158(sp)
   2116c:	003e9d06 	br	20be4 <__alt_data_end+0xfffe0be4>
   21170:	00c00044 	movi	r3,1
   21174:	01c00ac4 	movi	r7,43
   21178:	ac400007 	ldb	r17,0(r21)
   2117c:	003d5e06 	br	206f8 <__alt_data_end+0xfffe06f8>
   21180:	94800814 	ori	r18,r18,32
   21184:	ac400007 	ldb	r17,0(r21)
   21188:	003d5b06 	br	206f8 <__alt_data_end+0xfffe06f8>
   2118c:	d8c02d17 	ldw	r3,180(sp)
   21190:	d8002785 	stb	zero,158(sp)
   21194:	1c000017 	ldw	r16,0(r3)
   21198:	1cc00104 	addi	r19,r3,4
   2119c:	80041926 	beq	r16,zero,22204 <___vfprintf_internal_r+0x1c90>
   211a0:	d9002917 	ldw	r4,164(sp)
   211a4:	2003d016 	blt	r4,zero,220e8 <___vfprintf_internal_r+0x1b74>
   211a8:	200d883a 	mov	r6,r4
   211ac:	000b883a 	mov	r5,zero
   211b0:	8009883a 	mov	r4,r16
   211b4:	da003d15 	stw	r8,244(sp)
   211b8:	0025d840 	call	25d84 <memchr>
   211bc:	da003d17 	ldw	r8,244(sp)
   211c0:	10045426 	beq	r2,zero,22314 <___vfprintf_internal_r+0x1da0>
   211c4:	1405c83a 	sub	r2,r2,r16
   211c8:	d8802e15 	stw	r2,184(sp)
   211cc:	1003cc16 	blt	r2,zero,22100 <___vfprintf_internal_r+0x1b8c>
   211d0:	df002783 	ldbu	fp,158(sp)
   211d4:	d8802a15 	stw	r2,168(sp)
   211d8:	dcc02d15 	stw	r19,180(sp)
   211dc:	d8002915 	stw	zero,164(sp)
   211e0:	d8003215 	stw	zero,200(sp)
   211e4:	003eb006 	br	20ca8 <__alt_data_end+0xfffe0ca8>
   211e8:	18c03fcc 	andi	r3,r3,255
   211ec:	183f9b26 	beq	r3,zero,2105c <__alt_data_end+0xfffe105c>
   211f0:	d9c02785 	stb	r7,158(sp)
   211f4:	003f9906 	br	2105c <__alt_data_end+0xfffe105c>
   211f8:	18c03fcc 	andi	r3,r3,255
   211fc:	1805551e 	bne	r3,zero,22754 <___vfprintf_internal_r+0x21e0>
   21200:	014000f4 	movhi	r5,3
   21204:	29428504 	addi	r5,r5,2580
   21208:	d9403915 	stw	r5,228(sp)
   2120c:	9080080c 	andi	r2,r18,32
   21210:	103fae1e 	bne	r2,zero,210cc <__alt_data_end+0xfffe10cc>
   21214:	9080040c 	andi	r2,r18,16
   21218:	1002de26 	beq	r2,zero,21d94 <___vfprintf_internal_r+0x1820>
   2121c:	d8c02d17 	ldw	r3,180(sp)
   21220:	002d883a 	mov	r22,zero
   21224:	1cc00017 	ldw	r19,0(r3)
   21228:	18c00104 	addi	r3,r3,4
   2122c:	d8c02d15 	stw	r3,180(sp)
   21230:	003fab06 	br	210e0 <__alt_data_end+0xfffe10e0>
   21234:	38803fcc 	andi	r2,r7,255
   21238:	1080201c 	xori	r2,r2,128
   2123c:	10bfe004 	addi	r2,r2,-128
   21240:	1002d21e 	bne	r2,zero,21d8c <___vfprintf_internal_r+0x1818>
   21244:	00c00044 	movi	r3,1
   21248:	01c00804 	movi	r7,32
   2124c:	ac400007 	ldb	r17,0(r21)
   21250:	003d2906 	br	206f8 <__alt_data_end+0xfffe06f8>
   21254:	94800054 	ori	r18,r18,1
   21258:	ac400007 	ldb	r17,0(r21)
   2125c:	003d2606 	br	206f8 <__alt_data_end+0xfffe06f8>
   21260:	18c03fcc 	andi	r3,r3,255
   21264:	183e0526 	beq	r3,zero,20a7c <__alt_data_end+0xfffe0a7c>
   21268:	d9c02785 	stb	r7,158(sp)
   2126c:	003e0306 	br	20a7c <__alt_data_end+0xfffe0a7c>
   21270:	94801014 	ori	r18,r18,64
   21274:	ac400007 	ldb	r17,0(r21)
   21278:	003d1f06 	br	206f8 <__alt_data_end+0xfffe06f8>
   2127c:	ac400007 	ldb	r17,0(r21)
   21280:	8a438726 	beq	r17,r9,220a0 <___vfprintf_internal_r+0x1b2c>
   21284:	94800414 	ori	r18,r18,16
   21288:	003d1b06 	br	206f8 <__alt_data_end+0xfffe06f8>
   2128c:	18c03fcc 	andi	r3,r3,255
   21290:	1805341e 	bne	r3,zero,22764 <___vfprintf_internal_r+0x21f0>
   21294:	9080080c 	andi	r2,r18,32
   21298:	1002cd26 	beq	r2,zero,21dd0 <___vfprintf_internal_r+0x185c>
   2129c:	d9402d17 	ldw	r5,180(sp)
   212a0:	d9002f17 	ldw	r4,188(sp)
   212a4:	28800017 	ldw	r2,0(r5)
   212a8:	2007d7fa 	srai	r3,r4,31
   212ac:	29400104 	addi	r5,r5,4
   212b0:	d9402d15 	stw	r5,180(sp)
   212b4:	11000015 	stw	r4,0(r2)
   212b8:	10c00115 	stw	r3,4(r2)
   212bc:	003ce506 	br	20654 <__alt_data_end+0xfffe0654>
   212c0:	d8c02d17 	ldw	r3,180(sp)
   212c4:	d9002d17 	ldw	r4,180(sp)
   212c8:	d8002785 	stb	zero,158(sp)
   212cc:	18800017 	ldw	r2,0(r3)
   212d0:	21000104 	addi	r4,r4,4
   212d4:	00c00044 	movi	r3,1
   212d8:	d8c02a15 	stw	r3,168(sp)
   212dc:	d8801405 	stb	r2,80(sp)
   212e0:	d9002d15 	stw	r4,180(sp)
   212e4:	d8c02e15 	stw	r3,184(sp)
   212e8:	d8002915 	stw	zero,164(sp)
   212ec:	d8003215 	stw	zero,200(sp)
   212f0:	dc001404 	addi	r16,sp,80
   212f4:	0039883a 	mov	fp,zero
   212f8:	003e7206 	br	20cc4 <__alt_data_end+0xfffe0cc4>
   212fc:	010000f4 	movhi	r4,3
   21300:	21028504 	addi	r4,r4,2580
   21304:	0039883a 	mov	fp,zero
   21308:	d9003915 	stw	r4,228(sp)
   2130c:	04401e04 	movi	r17,120
   21310:	003f8206 	br	2111c <__alt_data_end+0xfffe111c>
   21314:	18c03fcc 	andi	r3,r3,255
   21318:	1805061e 	bne	r3,zero,22734 <___vfprintf_internal_r+0x21c0>
   2131c:	883d9126 	beq	r17,zero,20964 <__alt_data_end+0xfffe0964>
   21320:	00c00044 	movi	r3,1
   21324:	d8c02a15 	stw	r3,168(sp)
   21328:	dc401405 	stb	r17,80(sp)
   2132c:	d8002785 	stb	zero,158(sp)
   21330:	003fec06 	br	212e4 <__alt_data_end+0xfffe12e4>
   21334:	014000f4 	movhi	r5,3
   21338:	29428504 	addi	r5,r5,2580
   2133c:	d9403915 	stw	r5,228(sp)
   21340:	d8c02d15 	stw	r3,180(sp)
   21344:	1025883a 	mov	r18,r2
   21348:	04401e04 	movi	r17,120
   2134c:	9d84b03a 	or	r2,r19,r22
   21350:	1000fc1e 	bne	r2,zero,21744 <___vfprintf_internal_r+0x11d0>
   21354:	0039883a 	mov	fp,zero
   21358:	00800084 	movi	r2,2
   2135c:	10803fcc 	andi	r2,r2,255
   21360:	00c00044 	movi	r3,1
   21364:	10c20f26 	beq	r2,r3,21ba4 <___vfprintf_internal_r+0x1630>
   21368:	00c00084 	movi	r3,2
   2136c:	10fd6326 	beq	r2,r3,208fc <__alt_data_end+0xfffe08fc>
   21370:	003e2d06 	br	20c28 <__alt_data_end+0xfffe0c28>
   21374:	d8c02017 	ldw	r3,128(sp)
   21378:	003e9306 	br	20dc8 <__alt_data_end+0xfffe0dc8>
   2137c:	00801944 	movi	r2,101
   21380:	14407e0e 	bge	r2,r17,2157c <___vfprintf_internal_r+0x1008>
   21384:	d9003617 	ldw	r4,216(sp)
   21388:	d9403817 	ldw	r5,224(sp)
   2138c:	000d883a 	mov	r6,zero
   21390:	000f883a 	mov	r7,zero
   21394:	d8c03c15 	stw	r3,240(sp)
   21398:	da003d15 	stw	r8,244(sp)
   2139c:	002b7e80 	call	2b7e8 <__eqdf2>
   213a0:	d8c03c17 	ldw	r3,240(sp)
   213a4:	da003d17 	ldw	r8,244(sp)
   213a8:	1000f71e 	bne	r2,zero,21788 <___vfprintf_internal_r+0x1214>
   213ac:	d8801f17 	ldw	r2,124(sp)
   213b0:	010000f4 	movhi	r4,3
   213b4:	21028c04 	addi	r4,r4,2608
   213b8:	18c00044 	addi	r3,r3,1
   213bc:	10800044 	addi	r2,r2,1
   213c0:	41000015 	stw	r4,0(r8)
   213c4:	01000044 	movi	r4,1
   213c8:	41000115 	stw	r4,4(r8)
   213cc:	d8c02015 	stw	r3,128(sp)
   213d0:	d8801f15 	stw	r2,124(sp)
   213d4:	010001c4 	movi	r4,7
   213d8:	2082b816 	blt	r4,r2,21ebc <___vfprintf_internal_r+0x1948>
   213dc:	42000204 	addi	r8,r8,8
   213e0:	d8802617 	ldw	r2,152(sp)
   213e4:	d9403317 	ldw	r5,204(sp)
   213e8:	11400216 	blt	r2,r5,213f4 <___vfprintf_internal_r+0xe80>
   213ec:	9080004c 	andi	r2,r18,1
   213f0:	103ed526 	beq	r2,zero,20f48 <__alt_data_end+0xfffe0f48>
   213f4:	d8803717 	ldw	r2,220(sp)
   213f8:	d9003417 	ldw	r4,208(sp)
   213fc:	d9403717 	ldw	r5,220(sp)
   21400:	1887883a 	add	r3,r3,r2
   21404:	d8801f17 	ldw	r2,124(sp)
   21408:	41000015 	stw	r4,0(r8)
   2140c:	41400115 	stw	r5,4(r8)
   21410:	10800044 	addi	r2,r2,1
   21414:	d8c02015 	stw	r3,128(sp)
   21418:	d8801f15 	stw	r2,124(sp)
   2141c:	010001c4 	movi	r4,7
   21420:	20832916 	blt	r4,r2,220c8 <___vfprintf_internal_r+0x1b54>
   21424:	42000204 	addi	r8,r8,8
   21428:	d8803317 	ldw	r2,204(sp)
   2142c:	143fffc4 	addi	r16,r2,-1
   21430:	043ec50e 	bge	zero,r16,20f48 <__alt_data_end+0xfffe0f48>
   21434:	04400404 	movi	r17,16
   21438:	d8801f17 	ldw	r2,124(sp)
   2143c:	8c00880e 	bge	r17,r16,21660 <___vfprintf_internal_r+0x10ec>
   21440:	014000f4 	movhi	r5,3
   21444:	29428c84 	addi	r5,r5,2610
   21448:	d9402b15 	stw	r5,172(sp)
   2144c:	058001c4 	movi	r22,7
   21450:	dcc02c17 	ldw	r19,176(sp)
   21454:	00000306 	br	21464 <___vfprintf_internal_r+0xef0>
   21458:	42000204 	addi	r8,r8,8
   2145c:	843ffc04 	addi	r16,r16,-16
   21460:	8c00820e 	bge	r17,r16,2166c <___vfprintf_internal_r+0x10f8>
   21464:	18c00404 	addi	r3,r3,16
   21468:	10800044 	addi	r2,r2,1
   2146c:	45000015 	stw	r20,0(r8)
   21470:	44400115 	stw	r17,4(r8)
   21474:	d8c02015 	stw	r3,128(sp)
   21478:	d8801f15 	stw	r2,124(sp)
   2147c:	b0bff60e 	bge	r22,r2,21458 <__alt_data_end+0xfffe1458>
   21480:	d9801e04 	addi	r6,sp,120
   21484:	b80b883a 	mov	r5,r23
   21488:	9809883a 	mov	r4,r19
   2148c:	0027b700 	call	27b70 <__sprint_r>
   21490:	103d3a1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21494:	d8c02017 	ldw	r3,128(sp)
   21498:	d8801f17 	ldw	r2,124(sp)
   2149c:	da000404 	addi	r8,sp,16
   214a0:	003fee06 	br	2145c <__alt_data_end+0xfffe145c>
   214a4:	d9403117 	ldw	r5,196(sp)
   214a8:	d8802a17 	ldw	r2,168(sp)
   214ac:	28adc83a 	sub	r22,r5,r2
   214b0:	05be630e 	bge	zero,r22,20e40 <__alt_data_end+0xfffe0e40>
   214b4:	07000404 	movi	fp,16
   214b8:	d8801f17 	ldw	r2,124(sp)
   214bc:	e5838f0e 	bge	fp,r22,222fc <___vfprintf_internal_r+0x1d88>
   214c0:	014000f4 	movhi	r5,3
   214c4:	29428c84 	addi	r5,r5,2610
   214c8:	dc403015 	stw	r17,192(sp)
   214cc:	d9402b15 	stw	r5,172(sp)
   214d0:	b023883a 	mov	r17,r22
   214d4:	04c001c4 	movi	r19,7
   214d8:	a82d883a 	mov	r22,r21
   214dc:	902b883a 	mov	r21,r18
   214e0:	8025883a 	mov	r18,r16
   214e4:	dc002c17 	ldw	r16,176(sp)
   214e8:	00000306 	br	214f8 <___vfprintf_internal_r+0xf84>
   214ec:	8c7ffc04 	addi	r17,r17,-16
   214f0:	42000204 	addi	r8,r8,8
   214f4:	e440110e 	bge	fp,r17,2153c <___vfprintf_internal_r+0xfc8>
   214f8:	18c00404 	addi	r3,r3,16
   214fc:	10800044 	addi	r2,r2,1
   21500:	45000015 	stw	r20,0(r8)
   21504:	47000115 	stw	fp,4(r8)
   21508:	d8c02015 	stw	r3,128(sp)
   2150c:	d8801f15 	stw	r2,124(sp)
   21510:	98bff60e 	bge	r19,r2,214ec <__alt_data_end+0xfffe14ec>
   21514:	d9801e04 	addi	r6,sp,120
   21518:	b80b883a 	mov	r5,r23
   2151c:	8009883a 	mov	r4,r16
   21520:	0027b700 	call	27b70 <__sprint_r>
   21524:	103d151e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21528:	8c7ffc04 	addi	r17,r17,-16
   2152c:	d8c02017 	ldw	r3,128(sp)
   21530:	d8801f17 	ldw	r2,124(sp)
   21534:	da000404 	addi	r8,sp,16
   21538:	e47fef16 	blt	fp,r17,214f8 <__alt_data_end+0xfffe14f8>
   2153c:	9021883a 	mov	r16,r18
   21540:	a825883a 	mov	r18,r21
   21544:	b02b883a 	mov	r21,r22
   21548:	882d883a 	mov	r22,r17
   2154c:	dc403017 	ldw	r17,192(sp)
   21550:	d9002b17 	ldw	r4,172(sp)
   21554:	1d87883a 	add	r3,r3,r22
   21558:	10800044 	addi	r2,r2,1
   2155c:	41000015 	stw	r4,0(r8)
   21560:	45800115 	stw	r22,4(r8)
   21564:	d8c02015 	stw	r3,128(sp)
   21568:	d8801f15 	stw	r2,124(sp)
   2156c:	010001c4 	movi	r4,7
   21570:	20818e16 	blt	r4,r2,21bac <___vfprintf_internal_r+0x1638>
   21574:	42000204 	addi	r8,r8,8
   21578:	003e3106 	br	20e40 <__alt_data_end+0xfffe0e40>
   2157c:	d9403317 	ldw	r5,204(sp)
   21580:	00800044 	movi	r2,1
   21584:	18c00044 	addi	r3,r3,1
   21588:	1141530e 	bge	r2,r5,21ad8 <___vfprintf_internal_r+0x1564>
   2158c:	dc401f17 	ldw	r17,124(sp)
   21590:	00800044 	movi	r2,1
   21594:	40800115 	stw	r2,4(r8)
   21598:	8c400044 	addi	r17,r17,1
   2159c:	44000015 	stw	r16,0(r8)
   215a0:	d8c02015 	stw	r3,128(sp)
   215a4:	dc401f15 	stw	r17,124(sp)
   215a8:	008001c4 	movi	r2,7
   215ac:	14416b16 	blt	r2,r17,21b5c <___vfprintf_internal_r+0x15e8>
   215b0:	42000204 	addi	r8,r8,8
   215b4:	d8803717 	ldw	r2,220(sp)
   215b8:	d9003417 	ldw	r4,208(sp)
   215bc:	8c400044 	addi	r17,r17,1
   215c0:	10c7883a 	add	r3,r2,r3
   215c4:	40800115 	stw	r2,4(r8)
   215c8:	41000015 	stw	r4,0(r8)
   215cc:	d8c02015 	stw	r3,128(sp)
   215d0:	dc401f15 	stw	r17,124(sp)
   215d4:	008001c4 	movi	r2,7
   215d8:	14416916 	blt	r2,r17,21b80 <___vfprintf_internal_r+0x160c>
   215dc:	45800204 	addi	r22,r8,8
   215e0:	d9003617 	ldw	r4,216(sp)
   215e4:	d9403817 	ldw	r5,224(sp)
   215e8:	000d883a 	mov	r6,zero
   215ec:	000f883a 	mov	r7,zero
   215f0:	d8c03c15 	stw	r3,240(sp)
   215f4:	002b7e80 	call	2b7e8 <__eqdf2>
   215f8:	d8c03c17 	ldw	r3,240(sp)
   215fc:	1000bc26 	beq	r2,zero,218f0 <___vfprintf_internal_r+0x137c>
   21600:	d9403317 	ldw	r5,204(sp)
   21604:	84000044 	addi	r16,r16,1
   21608:	8c400044 	addi	r17,r17,1
   2160c:	28bfffc4 	addi	r2,r5,-1
   21610:	1887883a 	add	r3,r3,r2
   21614:	b0800115 	stw	r2,4(r22)
   21618:	b4000015 	stw	r16,0(r22)
   2161c:	d8c02015 	stw	r3,128(sp)
   21620:	dc401f15 	stw	r17,124(sp)
   21624:	008001c4 	movi	r2,7
   21628:	14414316 	blt	r2,r17,21b38 <___vfprintf_internal_r+0x15c4>
   2162c:	b5800204 	addi	r22,r22,8
   21630:	d9003a17 	ldw	r4,232(sp)
   21634:	df0022c4 	addi	fp,sp,139
   21638:	8c400044 	addi	r17,r17,1
   2163c:	20c7883a 	add	r3,r4,r3
   21640:	b7000015 	stw	fp,0(r22)
   21644:	b1000115 	stw	r4,4(r22)
   21648:	d8c02015 	stw	r3,128(sp)
   2164c:	dc401f15 	stw	r17,124(sp)
   21650:	008001c4 	movi	r2,7
   21654:	14400e16 	blt	r2,r17,21690 <___vfprintf_internal_r+0x111c>
   21658:	b2000204 	addi	r8,r22,8
   2165c:	003e3a06 	br	20f48 <__alt_data_end+0xfffe0f48>
   21660:	010000f4 	movhi	r4,3
   21664:	21028c84 	addi	r4,r4,2610
   21668:	d9002b15 	stw	r4,172(sp)
   2166c:	d9002b17 	ldw	r4,172(sp)
   21670:	1c07883a 	add	r3,r3,r16
   21674:	44000115 	stw	r16,4(r8)
   21678:	41000015 	stw	r4,0(r8)
   2167c:	10800044 	addi	r2,r2,1
   21680:	d8c02015 	stw	r3,128(sp)
   21684:	d8801f15 	stw	r2,124(sp)
   21688:	010001c4 	movi	r4,7
   2168c:	20be2d0e 	bge	r4,r2,20f44 <__alt_data_end+0xfffe0f44>
   21690:	d9002c17 	ldw	r4,176(sp)
   21694:	d9801e04 	addi	r6,sp,120
   21698:	b80b883a 	mov	r5,r23
   2169c:	0027b700 	call	27b70 <__sprint_r>
   216a0:	103cb61e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   216a4:	d8c02017 	ldw	r3,128(sp)
   216a8:	da000404 	addi	r8,sp,16
   216ac:	003e2606 	br	20f48 <__alt_data_end+0xfffe0f48>
   216b0:	d9002c17 	ldw	r4,176(sp)
   216b4:	d9801e04 	addi	r6,sp,120
   216b8:	b80b883a 	mov	r5,r23
   216bc:	0027b700 	call	27b70 <__sprint_r>
   216c0:	103e5d26 	beq	r2,zero,21038 <__alt_data_end+0xfffe1038>
   216c4:	003cad06 	br	2097c <__alt_data_end+0xfffe097c>
   216c8:	d9002c17 	ldw	r4,176(sp)
   216cc:	d9801e04 	addi	r6,sp,120
   216d0:	b80b883a 	mov	r5,r23
   216d4:	0027b700 	call	27b70 <__sprint_r>
   216d8:	103ca81e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   216dc:	d8c02017 	ldw	r3,128(sp)
   216e0:	da000404 	addi	r8,sp,16
   216e4:	003e0b06 	br	20f14 <__alt_data_end+0xfffe0f14>
   216e8:	d9002c17 	ldw	r4,176(sp)
   216ec:	d9801e04 	addi	r6,sp,120
   216f0:	b80b883a 	mov	r5,r23
   216f4:	0027b700 	call	27b70 <__sprint_r>
   216f8:	103ca01e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   216fc:	d8c02017 	ldw	r3,128(sp)
   21700:	da000404 	addi	r8,sp,16
   21704:	003dbd06 	br	20dfc <__alt_data_end+0xfffe0dfc>
   21708:	d9002c17 	ldw	r4,176(sp)
   2170c:	d9801e04 	addi	r6,sp,120
   21710:	b80b883a 	mov	r5,r23
   21714:	0027b700 	call	27b70 <__sprint_r>
   21718:	103c981e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   2171c:	d8c02017 	ldw	r3,128(sp)
   21720:	da000404 	addi	r8,sp,16
   21724:	003dc306 	br	20e34 <__alt_data_end+0xfffe0e34>
   21728:	d8802917 	ldw	r2,164(sp)
   2172c:	d8002785 	stb	zero,158(sp)
   21730:	103f0616 	blt	r2,zero,2134c <__alt_data_end+0xfffe134c>
   21734:	00ffdfc4 	movi	r3,-129
   21738:	9d84b03a 	or	r2,r19,r22
   2173c:	90e4703a 	and	r18,r18,r3
   21740:	103c6b26 	beq	r2,zero,208f0 <__alt_data_end+0xfffe08f0>
   21744:	0039883a 	mov	fp,zero
   21748:	003e7406 	br	2111c <__alt_data_end+0xfffe111c>
   2174c:	9080040c 	andi	r2,r18,16
   21750:	1001b326 	beq	r2,zero,21e20 <___vfprintf_internal_r+0x18ac>
   21754:	d9002d17 	ldw	r4,180(sp)
   21758:	d9402917 	ldw	r5,164(sp)
   2175c:	d8002785 	stb	zero,158(sp)
   21760:	20800104 	addi	r2,r4,4
   21764:	24c00017 	ldw	r19,0(r4)
   21768:	002d883a 	mov	r22,zero
   2176c:	2801b516 	blt	r5,zero,21e44 <___vfprintf_internal_r+0x18d0>
   21770:	00ffdfc4 	movi	r3,-129
   21774:	d8802d15 	stw	r2,180(sp)
   21778:	90e4703a 	and	r18,r18,r3
   2177c:	983d2726 	beq	r19,zero,20c1c <__alt_data_end+0xfffe0c1c>
   21780:	0039883a 	mov	fp,zero
   21784:	003d2a06 	br	20c30 <__alt_data_end+0xfffe0c30>
   21788:	dc402617 	ldw	r17,152(sp)
   2178c:	0441d30e 	bge	zero,r17,21edc <___vfprintf_internal_r+0x1968>
   21790:	dc403217 	ldw	r17,200(sp)
   21794:	d8803317 	ldw	r2,204(sp)
   21798:	1440010e 	bge	r2,r17,217a0 <___vfprintf_internal_r+0x122c>
   2179c:	1023883a 	mov	r17,r2
   217a0:	04400a0e 	bge	zero,r17,217cc <___vfprintf_internal_r+0x1258>
   217a4:	d8801f17 	ldw	r2,124(sp)
   217a8:	1c47883a 	add	r3,r3,r17
   217ac:	44000015 	stw	r16,0(r8)
   217b0:	10800044 	addi	r2,r2,1
   217b4:	44400115 	stw	r17,4(r8)
   217b8:	d8c02015 	stw	r3,128(sp)
   217bc:	d8801f15 	stw	r2,124(sp)
   217c0:	010001c4 	movi	r4,7
   217c4:	20826516 	blt	r4,r2,2215c <___vfprintf_internal_r+0x1be8>
   217c8:	42000204 	addi	r8,r8,8
   217cc:	88026116 	blt	r17,zero,22154 <___vfprintf_internal_r+0x1be0>
   217d0:	d9003217 	ldw	r4,200(sp)
   217d4:	2463c83a 	sub	r17,r4,r17
   217d8:	04407b0e 	bge	zero,r17,219c8 <___vfprintf_internal_r+0x1454>
   217dc:	05800404 	movi	r22,16
   217e0:	d8801f17 	ldw	r2,124(sp)
   217e4:	b4419d0e 	bge	r22,r17,21e5c <___vfprintf_internal_r+0x18e8>
   217e8:	010000f4 	movhi	r4,3
   217ec:	21028c84 	addi	r4,r4,2610
   217f0:	d9002b15 	stw	r4,172(sp)
   217f4:	070001c4 	movi	fp,7
   217f8:	dcc02c17 	ldw	r19,176(sp)
   217fc:	00000306 	br	2180c <___vfprintf_internal_r+0x1298>
   21800:	42000204 	addi	r8,r8,8
   21804:	8c7ffc04 	addi	r17,r17,-16
   21808:	b441970e 	bge	r22,r17,21e68 <___vfprintf_internal_r+0x18f4>
   2180c:	18c00404 	addi	r3,r3,16
   21810:	10800044 	addi	r2,r2,1
   21814:	45000015 	stw	r20,0(r8)
   21818:	45800115 	stw	r22,4(r8)
   2181c:	d8c02015 	stw	r3,128(sp)
   21820:	d8801f15 	stw	r2,124(sp)
   21824:	e0bff60e 	bge	fp,r2,21800 <__alt_data_end+0xfffe1800>
   21828:	d9801e04 	addi	r6,sp,120
   2182c:	b80b883a 	mov	r5,r23
   21830:	9809883a 	mov	r4,r19
   21834:	0027b700 	call	27b70 <__sprint_r>
   21838:	103c501e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   2183c:	d8c02017 	ldw	r3,128(sp)
   21840:	d8801f17 	ldw	r2,124(sp)
   21844:	da000404 	addi	r8,sp,16
   21848:	003fee06 	br	21804 <__alt_data_end+0xfffe1804>
   2184c:	d9002c17 	ldw	r4,176(sp)
   21850:	d9801e04 	addi	r6,sp,120
   21854:	b80b883a 	mov	r5,r23
   21858:	0027b700 	call	27b70 <__sprint_r>
   2185c:	103c471e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21860:	d8c02017 	ldw	r3,128(sp)
   21864:	df002787 	ldb	fp,158(sp)
   21868:	da000404 	addi	r8,sp,16
   2186c:	003d5606 	br	20dc8 <__alt_data_end+0xfffe0dc8>
   21870:	9080040c 	andi	r2,r18,16
   21874:	10016126 	beq	r2,zero,21dfc <___vfprintf_internal_r+0x1888>
   21878:	d8802d17 	ldw	r2,180(sp)
   2187c:	14c00017 	ldw	r19,0(r2)
   21880:	10800104 	addi	r2,r2,4
   21884:	d8802d15 	stw	r2,180(sp)
   21888:	982dd7fa 	srai	r22,r19,31
   2188c:	b005883a 	mov	r2,r22
   21890:	003c8206 	br	20a9c <__alt_data_end+0xfffe0a9c>
   21894:	9080040c 	andi	r2,r18,16
   21898:	10003526 	beq	r2,zero,21970 <___vfprintf_internal_r+0x13fc>
   2189c:	d9402d17 	ldw	r5,180(sp)
   218a0:	d8c02917 	ldw	r3,164(sp)
   218a4:	d8002785 	stb	zero,158(sp)
   218a8:	28800104 	addi	r2,r5,4
   218ac:	2cc00017 	ldw	r19,0(r5)
   218b0:	002d883a 	mov	r22,zero
   218b4:	18003716 	blt	r3,zero,21994 <___vfprintf_internal_r+0x1420>
   218b8:	00ffdfc4 	movi	r3,-129
   218bc:	d8802d15 	stw	r2,180(sp)
   218c0:	90e4703a 	and	r18,r18,r3
   218c4:	0039883a 	mov	fp,zero
   218c8:	983df326 	beq	r19,zero,21098 <__alt_data_end+0xfffe1098>
   218cc:	00800244 	movi	r2,9
   218d0:	14fc7b36 	bltu	r2,r19,20ac0 <__alt_data_end+0xfffe0ac0>
   218d4:	d8c02817 	ldw	r3,160(sp)
   218d8:	dc001dc4 	addi	r16,sp,119
   218dc:	9cc00c04 	addi	r19,r19,48
   218e0:	1c07c83a 	sub	r3,r3,r16
   218e4:	dcc01dc5 	stb	r19,119(sp)
   218e8:	d8c02e15 	stw	r3,184(sp)
   218ec:	003ce806 	br	20c90 <__alt_data_end+0xfffe0c90>
   218f0:	d8803317 	ldw	r2,204(sp)
   218f4:	143fffc4 	addi	r16,r2,-1
   218f8:	043f4d0e 	bge	zero,r16,21630 <__alt_data_end+0xfffe1630>
   218fc:	07000404 	movi	fp,16
   21900:	e400810e 	bge	fp,r16,21b08 <___vfprintf_internal_r+0x1594>
   21904:	014000f4 	movhi	r5,3
   21908:	29428c84 	addi	r5,r5,2610
   2190c:	d9402b15 	stw	r5,172(sp)
   21910:	01c001c4 	movi	r7,7
   21914:	dcc02c17 	ldw	r19,176(sp)
   21918:	00000306 	br	21928 <___vfprintf_internal_r+0x13b4>
   2191c:	b5800204 	addi	r22,r22,8
   21920:	843ffc04 	addi	r16,r16,-16
   21924:	e4007b0e 	bge	fp,r16,21b14 <___vfprintf_internal_r+0x15a0>
   21928:	18c00404 	addi	r3,r3,16
   2192c:	8c400044 	addi	r17,r17,1
   21930:	b5000015 	stw	r20,0(r22)
   21934:	b7000115 	stw	fp,4(r22)
   21938:	d8c02015 	stw	r3,128(sp)
   2193c:	dc401f15 	stw	r17,124(sp)
   21940:	3c7ff60e 	bge	r7,r17,2191c <__alt_data_end+0xfffe191c>
   21944:	d9801e04 	addi	r6,sp,120
   21948:	b80b883a 	mov	r5,r23
   2194c:	9809883a 	mov	r4,r19
   21950:	d9c03c15 	stw	r7,240(sp)
   21954:	0027b700 	call	27b70 <__sprint_r>
   21958:	d9c03c17 	ldw	r7,240(sp)
   2195c:	103c071e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21960:	d8c02017 	ldw	r3,128(sp)
   21964:	dc401f17 	ldw	r17,124(sp)
   21968:	dd800404 	addi	r22,sp,16
   2196c:	003fec06 	br	21920 <__alt_data_end+0xfffe1920>
   21970:	9080100c 	andi	r2,r18,64
   21974:	d8002785 	stb	zero,158(sp)
   21978:	10010e26 	beq	r2,zero,21db4 <___vfprintf_internal_r+0x1840>
   2197c:	d9002d17 	ldw	r4,180(sp)
   21980:	d9402917 	ldw	r5,164(sp)
   21984:	002d883a 	mov	r22,zero
   21988:	20800104 	addi	r2,r4,4
   2198c:	24c0000b 	ldhu	r19,0(r4)
   21990:	283fc90e 	bge	r5,zero,218b8 <__alt_data_end+0xfffe18b8>
   21994:	d8802d15 	stw	r2,180(sp)
   21998:	0039883a 	mov	fp,zero
   2199c:	9d84b03a 	or	r2,r19,r22
   219a0:	103c461e 	bne	r2,zero,20abc <__alt_data_end+0xfffe0abc>
   219a4:	00800044 	movi	r2,1
   219a8:	003e6c06 	br	2135c <__alt_data_end+0xfffe135c>
   219ac:	d9002c17 	ldw	r4,176(sp)
   219b0:	d9801e04 	addi	r6,sp,120
   219b4:	b80b883a 	mov	r5,r23
   219b8:	0027b700 	call	27b70 <__sprint_r>
   219bc:	103bef1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   219c0:	d8c02017 	ldw	r3,128(sp)
   219c4:	da000404 	addi	r8,sp,16
   219c8:	d9003217 	ldw	r4,200(sp)
   219cc:	d8802617 	ldw	r2,152(sp)
   219d0:	d9403317 	ldw	r5,204(sp)
   219d4:	8123883a 	add	r17,r16,r4
   219d8:	11400216 	blt	r2,r5,219e4 <___vfprintf_internal_r+0x1470>
   219dc:	9100004c 	andi	r4,r18,1
   219e0:	20000d26 	beq	r4,zero,21a18 <___vfprintf_internal_r+0x14a4>
   219e4:	d9003717 	ldw	r4,220(sp)
   219e8:	d9403417 	ldw	r5,208(sp)
   219ec:	1907883a 	add	r3,r3,r4
   219f0:	d9001f17 	ldw	r4,124(sp)
   219f4:	41400015 	stw	r5,0(r8)
   219f8:	d9403717 	ldw	r5,220(sp)
   219fc:	21000044 	addi	r4,r4,1
   21a00:	d8c02015 	stw	r3,128(sp)
   21a04:	41400115 	stw	r5,4(r8)
   21a08:	d9001f15 	stw	r4,124(sp)
   21a0c:	014001c4 	movi	r5,7
   21a10:	2901e816 	blt	r5,r4,221b4 <___vfprintf_internal_r+0x1c40>
   21a14:	42000204 	addi	r8,r8,8
   21a18:	d9003317 	ldw	r4,204(sp)
   21a1c:	8121883a 	add	r16,r16,r4
   21a20:	2085c83a 	sub	r2,r4,r2
   21a24:	8461c83a 	sub	r16,r16,r17
   21a28:	1400010e 	bge	r2,r16,21a30 <___vfprintf_internal_r+0x14bc>
   21a2c:	1021883a 	mov	r16,r2
   21a30:	04000a0e 	bge	zero,r16,21a5c <___vfprintf_internal_r+0x14e8>
   21a34:	d9001f17 	ldw	r4,124(sp)
   21a38:	1c07883a 	add	r3,r3,r16
   21a3c:	44400015 	stw	r17,0(r8)
   21a40:	21000044 	addi	r4,r4,1
   21a44:	44000115 	stw	r16,4(r8)
   21a48:	d8c02015 	stw	r3,128(sp)
   21a4c:	d9001f15 	stw	r4,124(sp)
   21a50:	014001c4 	movi	r5,7
   21a54:	2901fb16 	blt	r5,r4,22244 <___vfprintf_internal_r+0x1cd0>
   21a58:	42000204 	addi	r8,r8,8
   21a5c:	8001f716 	blt	r16,zero,2223c <___vfprintf_internal_r+0x1cc8>
   21a60:	1421c83a 	sub	r16,r2,r16
   21a64:	043d380e 	bge	zero,r16,20f48 <__alt_data_end+0xfffe0f48>
   21a68:	04400404 	movi	r17,16
   21a6c:	d8801f17 	ldw	r2,124(sp)
   21a70:	8c3efb0e 	bge	r17,r16,21660 <__alt_data_end+0xfffe1660>
   21a74:	014000f4 	movhi	r5,3
   21a78:	29428c84 	addi	r5,r5,2610
   21a7c:	d9402b15 	stw	r5,172(sp)
   21a80:	058001c4 	movi	r22,7
   21a84:	dcc02c17 	ldw	r19,176(sp)
   21a88:	00000306 	br	21a98 <___vfprintf_internal_r+0x1524>
   21a8c:	42000204 	addi	r8,r8,8
   21a90:	843ffc04 	addi	r16,r16,-16
   21a94:	8c3ef50e 	bge	r17,r16,2166c <__alt_data_end+0xfffe166c>
   21a98:	18c00404 	addi	r3,r3,16
   21a9c:	10800044 	addi	r2,r2,1
   21aa0:	45000015 	stw	r20,0(r8)
   21aa4:	44400115 	stw	r17,4(r8)
   21aa8:	d8c02015 	stw	r3,128(sp)
   21aac:	d8801f15 	stw	r2,124(sp)
   21ab0:	b0bff60e 	bge	r22,r2,21a8c <__alt_data_end+0xfffe1a8c>
   21ab4:	d9801e04 	addi	r6,sp,120
   21ab8:	b80b883a 	mov	r5,r23
   21abc:	9809883a 	mov	r4,r19
   21ac0:	0027b700 	call	27b70 <__sprint_r>
   21ac4:	103bad1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21ac8:	d8c02017 	ldw	r3,128(sp)
   21acc:	d8801f17 	ldw	r2,124(sp)
   21ad0:	da000404 	addi	r8,sp,16
   21ad4:	003fee06 	br	21a90 <__alt_data_end+0xfffe1a90>
   21ad8:	9088703a 	and	r4,r18,r2
   21adc:	203eab1e 	bne	r4,zero,2158c <__alt_data_end+0xfffe158c>
   21ae0:	dc401f17 	ldw	r17,124(sp)
   21ae4:	40800115 	stw	r2,4(r8)
   21ae8:	44000015 	stw	r16,0(r8)
   21aec:	8c400044 	addi	r17,r17,1
   21af0:	d8c02015 	stw	r3,128(sp)
   21af4:	dc401f15 	stw	r17,124(sp)
   21af8:	008001c4 	movi	r2,7
   21afc:	14400e16 	blt	r2,r17,21b38 <___vfprintf_internal_r+0x15c4>
   21b00:	45800204 	addi	r22,r8,8
   21b04:	003eca06 	br	21630 <__alt_data_end+0xfffe1630>
   21b08:	010000f4 	movhi	r4,3
   21b0c:	21028c84 	addi	r4,r4,2610
   21b10:	d9002b15 	stw	r4,172(sp)
   21b14:	d8802b17 	ldw	r2,172(sp)
   21b18:	1c07883a 	add	r3,r3,r16
   21b1c:	8c400044 	addi	r17,r17,1
   21b20:	b0800015 	stw	r2,0(r22)
   21b24:	b4000115 	stw	r16,4(r22)
   21b28:	d8c02015 	stw	r3,128(sp)
   21b2c:	dc401f15 	stw	r17,124(sp)
   21b30:	008001c4 	movi	r2,7
   21b34:	147ebd0e 	bge	r2,r17,2162c <__alt_data_end+0xfffe162c>
   21b38:	d9002c17 	ldw	r4,176(sp)
   21b3c:	d9801e04 	addi	r6,sp,120
   21b40:	b80b883a 	mov	r5,r23
   21b44:	0027b700 	call	27b70 <__sprint_r>
   21b48:	103b8c1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21b4c:	d8c02017 	ldw	r3,128(sp)
   21b50:	dc401f17 	ldw	r17,124(sp)
   21b54:	dd800404 	addi	r22,sp,16
   21b58:	003eb506 	br	21630 <__alt_data_end+0xfffe1630>
   21b5c:	d9002c17 	ldw	r4,176(sp)
   21b60:	d9801e04 	addi	r6,sp,120
   21b64:	b80b883a 	mov	r5,r23
   21b68:	0027b700 	call	27b70 <__sprint_r>
   21b6c:	103b831e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21b70:	d8c02017 	ldw	r3,128(sp)
   21b74:	dc401f17 	ldw	r17,124(sp)
   21b78:	da000404 	addi	r8,sp,16
   21b7c:	003e8d06 	br	215b4 <__alt_data_end+0xfffe15b4>
   21b80:	d9002c17 	ldw	r4,176(sp)
   21b84:	d9801e04 	addi	r6,sp,120
   21b88:	b80b883a 	mov	r5,r23
   21b8c:	0027b700 	call	27b70 <__sprint_r>
   21b90:	103b7a1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21b94:	d8c02017 	ldw	r3,128(sp)
   21b98:	dc401f17 	ldw	r17,124(sp)
   21b9c:	dd800404 	addi	r22,sp,16
   21ba0:	003e8f06 	br	215e0 <__alt_data_end+0xfffe15e0>
   21ba4:	0027883a 	mov	r19,zero
   21ba8:	003f4a06 	br	218d4 <__alt_data_end+0xfffe18d4>
   21bac:	d9002c17 	ldw	r4,176(sp)
   21bb0:	d9801e04 	addi	r6,sp,120
   21bb4:	b80b883a 	mov	r5,r23
   21bb8:	0027b700 	call	27b70 <__sprint_r>
   21bbc:	103b6f1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21bc0:	d8c02017 	ldw	r3,128(sp)
   21bc4:	da000404 	addi	r8,sp,16
   21bc8:	003c9d06 	br	20e40 <__alt_data_end+0xfffe0e40>
   21bcc:	04e7c83a 	sub	r19,zero,r19
   21bd0:	9804c03a 	cmpne	r2,r19,zero
   21bd4:	05adc83a 	sub	r22,zero,r22
   21bd8:	b0adc83a 	sub	r22,r22,r2
   21bdc:	d8802917 	ldw	r2,164(sp)
   21be0:	07000b44 	movi	fp,45
   21be4:	df002785 	stb	fp,158(sp)
   21be8:	10017b16 	blt	r2,zero,221d8 <___vfprintf_internal_r+0x1c64>
   21bec:	00bfdfc4 	movi	r2,-129
   21bf0:	90a4703a 	and	r18,r18,r2
   21bf4:	003bb106 	br	20abc <__alt_data_end+0xfffe0abc>
   21bf8:	d9003617 	ldw	r4,216(sp)
   21bfc:	d9403817 	ldw	r5,224(sp)
   21c00:	da003d15 	stw	r8,244(sp)
   21c04:	00277940 	call	27794 <__fpclassifyd>
   21c08:	da003d17 	ldw	r8,244(sp)
   21c0c:	1000f026 	beq	r2,zero,21fd0 <___vfprintf_internal_r+0x1a5c>
   21c10:	d9002917 	ldw	r4,164(sp)
   21c14:	05bff7c4 	movi	r22,-33
   21c18:	00bfffc4 	movi	r2,-1
   21c1c:	8dac703a 	and	r22,r17,r22
   21c20:	20820026 	beq	r4,r2,22424 <___vfprintf_internal_r+0x1eb0>
   21c24:	008011c4 	movi	r2,71
   21c28:	b081f726 	beq	r22,r2,22408 <___vfprintf_internal_r+0x1e94>
   21c2c:	d9003817 	ldw	r4,224(sp)
   21c30:	90c04014 	ori	r3,r18,256
   21c34:	d8c02b15 	stw	r3,172(sp)
   21c38:	20021516 	blt	r4,zero,22490 <___vfprintf_internal_r+0x1f1c>
   21c3c:	dcc03817 	ldw	r19,224(sp)
   21c40:	d8002a05 	stb	zero,168(sp)
   21c44:	00801984 	movi	r2,102
   21c48:	8881f926 	beq	r17,r2,22430 <___vfprintf_internal_r+0x1ebc>
   21c4c:	00801184 	movi	r2,70
   21c50:	88821c26 	beq	r17,r2,224c4 <___vfprintf_internal_r+0x1f50>
   21c54:	00801144 	movi	r2,69
   21c58:	b081ef26 	beq	r22,r2,22418 <___vfprintf_internal_r+0x1ea4>
   21c5c:	d8c02917 	ldw	r3,164(sp)
   21c60:	d8802104 	addi	r2,sp,132
   21c64:	d8800315 	stw	r2,12(sp)
   21c68:	d9403617 	ldw	r5,216(sp)
   21c6c:	d8802504 	addi	r2,sp,148
   21c70:	d9002c17 	ldw	r4,176(sp)
   21c74:	d8800215 	stw	r2,8(sp)
   21c78:	d8802604 	addi	r2,sp,152
   21c7c:	d8c00015 	stw	r3,0(sp)
   21c80:	d8800115 	stw	r2,4(sp)
   21c84:	01c00084 	movi	r7,2
   21c88:	980d883a 	mov	r6,r19
   21c8c:	d8c03c15 	stw	r3,240(sp)
   21c90:	da003d15 	stw	r8,244(sp)
   21c94:	0022b980 	call	22b98 <_dtoa_r>
   21c98:	1021883a 	mov	r16,r2
   21c9c:	008019c4 	movi	r2,103
   21ca0:	d8c03c17 	ldw	r3,240(sp)
   21ca4:	da003d17 	ldw	r8,244(sp)
   21ca8:	88817126 	beq	r17,r2,22270 <___vfprintf_internal_r+0x1cfc>
   21cac:	008011c4 	movi	r2,71
   21cb0:	88829226 	beq	r17,r2,226fc <___vfprintf_internal_r+0x2188>
   21cb4:	80f9883a 	add	fp,r16,r3
   21cb8:	d9003617 	ldw	r4,216(sp)
   21cbc:	000d883a 	mov	r6,zero
   21cc0:	000f883a 	mov	r7,zero
   21cc4:	980b883a 	mov	r5,r19
   21cc8:	da003d15 	stw	r8,244(sp)
   21ccc:	002b7e80 	call	2b7e8 <__eqdf2>
   21cd0:	da003d17 	ldw	r8,244(sp)
   21cd4:	10018d26 	beq	r2,zero,2230c <___vfprintf_internal_r+0x1d98>
   21cd8:	d8802117 	ldw	r2,132(sp)
   21cdc:	1700062e 	bgeu	r2,fp,21cf8 <___vfprintf_internal_r+0x1784>
   21ce0:	01000c04 	movi	r4,48
   21ce4:	10c00044 	addi	r3,r2,1
   21ce8:	d8c02115 	stw	r3,132(sp)
   21cec:	11000005 	stb	r4,0(r2)
   21cf0:	d8802117 	ldw	r2,132(sp)
   21cf4:	173ffb36 	bltu	r2,fp,21ce4 <__alt_data_end+0xfffe1ce4>
   21cf8:	1405c83a 	sub	r2,r2,r16
   21cfc:	d8803315 	stw	r2,204(sp)
   21d00:	008011c4 	movi	r2,71
   21d04:	b0817626 	beq	r22,r2,222e0 <___vfprintf_internal_r+0x1d6c>
   21d08:	00801944 	movi	r2,101
   21d0c:	1442810e 	bge	r2,r17,22714 <___vfprintf_internal_r+0x21a0>
   21d10:	d8c02617 	ldw	r3,152(sp)
   21d14:	00801984 	movi	r2,102
   21d18:	d8c03215 	stw	r3,200(sp)
   21d1c:	8881fe26 	beq	r17,r2,22518 <___vfprintf_internal_r+0x1fa4>
   21d20:	d8c03217 	ldw	r3,200(sp)
   21d24:	d9003317 	ldw	r4,204(sp)
   21d28:	1901dd16 	blt	r3,r4,224a0 <___vfprintf_internal_r+0x1f2c>
   21d2c:	9480004c 	andi	r18,r18,1
   21d30:	90022b1e 	bne	r18,zero,225e0 <___vfprintf_internal_r+0x206c>
   21d34:	1805883a 	mov	r2,r3
   21d38:	18028016 	blt	r3,zero,2273c <___vfprintf_internal_r+0x21c8>
   21d3c:	d8c03217 	ldw	r3,200(sp)
   21d40:	044019c4 	movi	r17,103
   21d44:	d8c02e15 	stw	r3,184(sp)
   21d48:	df002a07 	ldb	fp,168(sp)
   21d4c:	e001531e 	bne	fp,zero,2229c <___vfprintf_internal_r+0x1d28>
   21d50:	df002783 	ldbu	fp,158(sp)
   21d54:	d8802a15 	stw	r2,168(sp)
   21d58:	dc802b17 	ldw	r18,172(sp)
   21d5c:	d8002915 	stw	zero,164(sp)
   21d60:	003bd106 	br	20ca8 <__alt_data_end+0xfffe0ca8>
   21d64:	d8802d17 	ldw	r2,180(sp)
   21d68:	d8c02d17 	ldw	r3,180(sp)
   21d6c:	d9002d17 	ldw	r4,180(sp)
   21d70:	10800017 	ldw	r2,0(r2)
   21d74:	18c00117 	ldw	r3,4(r3)
   21d78:	21000204 	addi	r4,r4,8
   21d7c:	d8803615 	stw	r2,216(sp)
   21d80:	d8c03815 	stw	r3,224(sp)
   21d84:	d9002d15 	stw	r4,180(sp)
   21d88:	003b7506 	br	20b60 <__alt_data_end+0xfffe0b60>
   21d8c:	ac400007 	ldb	r17,0(r21)
   21d90:	003a5906 	br	206f8 <__alt_data_end+0xfffe06f8>
   21d94:	9080100c 	andi	r2,r18,64
   21d98:	1000a826 	beq	r2,zero,2203c <___vfprintf_internal_r+0x1ac8>
   21d9c:	d9002d17 	ldw	r4,180(sp)
   21da0:	002d883a 	mov	r22,zero
   21da4:	24c0000b 	ldhu	r19,0(r4)
   21da8:	21000104 	addi	r4,r4,4
   21dac:	d9002d15 	stw	r4,180(sp)
   21db0:	003ccb06 	br	210e0 <__alt_data_end+0xfffe10e0>
   21db4:	d8c02d17 	ldw	r3,180(sp)
   21db8:	d9002917 	ldw	r4,164(sp)
   21dbc:	002d883a 	mov	r22,zero
   21dc0:	18800104 	addi	r2,r3,4
   21dc4:	1cc00017 	ldw	r19,0(r3)
   21dc8:	203ebb0e 	bge	r4,zero,218b8 <__alt_data_end+0xfffe18b8>
   21dcc:	003ef106 	br	21994 <__alt_data_end+0xfffe1994>
   21dd0:	9080040c 	andi	r2,r18,16
   21dd4:	1000921e 	bne	r2,zero,22020 <___vfprintf_internal_r+0x1aac>
   21dd8:	9480100c 	andi	r18,r18,64
   21ddc:	90013926 	beq	r18,zero,222c4 <___vfprintf_internal_r+0x1d50>
   21de0:	d9002d17 	ldw	r4,180(sp)
   21de4:	d9402f17 	ldw	r5,188(sp)
   21de8:	20800017 	ldw	r2,0(r4)
   21dec:	21000104 	addi	r4,r4,4
   21df0:	d9002d15 	stw	r4,180(sp)
   21df4:	1140000d 	sth	r5,0(r2)
   21df8:	003a1606 	br	20654 <__alt_data_end+0xfffe0654>
   21dfc:	9080100c 	andi	r2,r18,64
   21e00:	10008026 	beq	r2,zero,22004 <___vfprintf_internal_r+0x1a90>
   21e04:	d8c02d17 	ldw	r3,180(sp)
   21e08:	1cc0000f 	ldh	r19,0(r3)
   21e0c:	18c00104 	addi	r3,r3,4
   21e10:	d8c02d15 	stw	r3,180(sp)
   21e14:	982dd7fa 	srai	r22,r19,31
   21e18:	b005883a 	mov	r2,r22
   21e1c:	003b1f06 	br	20a9c <__alt_data_end+0xfffe0a9c>
   21e20:	9080100c 	andi	r2,r18,64
   21e24:	d8002785 	stb	zero,158(sp)
   21e28:	10008a1e 	bne	r2,zero,22054 <___vfprintf_internal_r+0x1ae0>
   21e2c:	d9402d17 	ldw	r5,180(sp)
   21e30:	d8c02917 	ldw	r3,164(sp)
   21e34:	002d883a 	mov	r22,zero
   21e38:	28800104 	addi	r2,r5,4
   21e3c:	2cc00017 	ldw	r19,0(r5)
   21e40:	183e4b0e 	bge	r3,zero,21770 <__alt_data_end+0xfffe1770>
   21e44:	9d86b03a 	or	r3,r19,r22
   21e48:	d8802d15 	stw	r2,180(sp)
   21e4c:	183e4c1e 	bne	r3,zero,21780 <__alt_data_end+0xfffe1780>
   21e50:	0039883a 	mov	fp,zero
   21e54:	0005883a 	mov	r2,zero
   21e58:	003d4006 	br	2135c <__alt_data_end+0xfffe135c>
   21e5c:	014000f4 	movhi	r5,3
   21e60:	29428c84 	addi	r5,r5,2610
   21e64:	d9402b15 	stw	r5,172(sp)
   21e68:	d9402b17 	ldw	r5,172(sp)
   21e6c:	1c47883a 	add	r3,r3,r17
   21e70:	10800044 	addi	r2,r2,1
   21e74:	41400015 	stw	r5,0(r8)
   21e78:	44400115 	stw	r17,4(r8)
   21e7c:	d8c02015 	stw	r3,128(sp)
   21e80:	d8801f15 	stw	r2,124(sp)
   21e84:	010001c4 	movi	r4,7
   21e88:	20bec816 	blt	r4,r2,219ac <__alt_data_end+0xfffe19ac>
   21e8c:	42000204 	addi	r8,r8,8
   21e90:	003ecd06 	br	219c8 <__alt_data_end+0xfffe19c8>
   21e94:	d9002917 	ldw	r4,164(sp)
   21e98:	d8002785 	stb	zero,158(sp)
   21e9c:	203d2d16 	blt	r4,zero,21354 <__alt_data_end+0xfffe1354>
   21ea0:	00bfdfc4 	movi	r2,-129
   21ea4:	90a4703a 	and	r18,r18,r2
   21ea8:	003a9106 	br	208f0 <__alt_data_end+0xfffe08f0>
   21eac:	010000f4 	movhi	r4,3
   21eb0:	21028c84 	addi	r4,r4,2610
   21eb4:	d9002b15 	stw	r4,172(sp)
   21eb8:	003c0c06 	br	20eec <__alt_data_end+0xfffe0eec>
   21ebc:	d9002c17 	ldw	r4,176(sp)
   21ec0:	d9801e04 	addi	r6,sp,120
   21ec4:	b80b883a 	mov	r5,r23
   21ec8:	0027b700 	call	27b70 <__sprint_r>
   21ecc:	103aab1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21ed0:	d8c02017 	ldw	r3,128(sp)
   21ed4:	da000404 	addi	r8,sp,16
   21ed8:	003d4106 	br	213e0 <__alt_data_end+0xfffe13e0>
   21edc:	d8801f17 	ldw	r2,124(sp)
   21ee0:	014000f4 	movhi	r5,3
   21ee4:	01000044 	movi	r4,1
   21ee8:	18c00044 	addi	r3,r3,1
   21eec:	10800044 	addi	r2,r2,1
   21ef0:	29428c04 	addi	r5,r5,2608
   21ef4:	41000115 	stw	r4,4(r8)
   21ef8:	41400015 	stw	r5,0(r8)
   21efc:	d8c02015 	stw	r3,128(sp)
   21f00:	d8801f15 	stw	r2,124(sp)
   21f04:	010001c4 	movi	r4,7
   21f08:	20805c16 	blt	r4,r2,2207c <___vfprintf_internal_r+0x1b08>
   21f0c:	42000204 	addi	r8,r8,8
   21f10:	8800041e 	bne	r17,zero,21f24 <___vfprintf_internal_r+0x19b0>
   21f14:	d8803317 	ldw	r2,204(sp)
   21f18:	1000021e 	bne	r2,zero,21f24 <___vfprintf_internal_r+0x19b0>
   21f1c:	9080004c 	andi	r2,r18,1
   21f20:	103c0926 	beq	r2,zero,20f48 <__alt_data_end+0xfffe0f48>
   21f24:	d9003717 	ldw	r4,220(sp)
   21f28:	d8801f17 	ldw	r2,124(sp)
   21f2c:	d9403417 	ldw	r5,208(sp)
   21f30:	20c7883a 	add	r3,r4,r3
   21f34:	10800044 	addi	r2,r2,1
   21f38:	41000115 	stw	r4,4(r8)
   21f3c:	41400015 	stw	r5,0(r8)
   21f40:	d8c02015 	stw	r3,128(sp)
   21f44:	d8801f15 	stw	r2,124(sp)
   21f48:	010001c4 	movi	r4,7
   21f4c:	20812116 	blt	r4,r2,223d4 <___vfprintf_internal_r+0x1e60>
   21f50:	42000204 	addi	r8,r8,8
   21f54:	0463c83a 	sub	r17,zero,r17
   21f58:	0440730e 	bge	zero,r17,22128 <___vfprintf_internal_r+0x1bb4>
   21f5c:	05800404 	movi	r22,16
   21f60:	b440860e 	bge	r22,r17,2217c <___vfprintf_internal_r+0x1c08>
   21f64:	014000f4 	movhi	r5,3
   21f68:	29428c84 	addi	r5,r5,2610
   21f6c:	d9402b15 	stw	r5,172(sp)
   21f70:	070001c4 	movi	fp,7
   21f74:	dcc02c17 	ldw	r19,176(sp)
   21f78:	00000306 	br	21f88 <___vfprintf_internal_r+0x1a14>
   21f7c:	42000204 	addi	r8,r8,8
   21f80:	8c7ffc04 	addi	r17,r17,-16
   21f84:	b440800e 	bge	r22,r17,22188 <___vfprintf_internal_r+0x1c14>
   21f88:	18c00404 	addi	r3,r3,16
   21f8c:	10800044 	addi	r2,r2,1
   21f90:	45000015 	stw	r20,0(r8)
   21f94:	45800115 	stw	r22,4(r8)
   21f98:	d8c02015 	stw	r3,128(sp)
   21f9c:	d8801f15 	stw	r2,124(sp)
   21fa0:	e0bff60e 	bge	fp,r2,21f7c <__alt_data_end+0xfffe1f7c>
   21fa4:	d9801e04 	addi	r6,sp,120
   21fa8:	b80b883a 	mov	r5,r23
   21fac:	9809883a 	mov	r4,r19
   21fb0:	0027b700 	call	27b70 <__sprint_r>
   21fb4:	103a711e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   21fb8:	d8c02017 	ldw	r3,128(sp)
   21fbc:	d8801f17 	ldw	r2,124(sp)
   21fc0:	da000404 	addi	r8,sp,16
   21fc4:	003fee06 	br	21f80 <__alt_data_end+0xfffe1f80>
   21fc8:	00bfffc4 	movi	r2,-1
   21fcc:	003a6f06 	br	2098c <__alt_data_end+0xfffe098c>
   21fd0:	008011c4 	movi	r2,71
   21fd4:	1440b816 	blt	r2,r17,222b8 <___vfprintf_internal_r+0x1d44>
   21fd8:	040000f4 	movhi	r16,3
   21fdc:	84027e04 	addi	r16,r16,2552
   21fe0:	00c000c4 	movi	r3,3
   21fe4:	00bfdfc4 	movi	r2,-129
   21fe8:	d8c02a15 	stw	r3,168(sp)
   21fec:	90a4703a 	and	r18,r18,r2
   21ff0:	df002783 	ldbu	fp,158(sp)
   21ff4:	d8c02e15 	stw	r3,184(sp)
   21ff8:	d8002915 	stw	zero,164(sp)
   21ffc:	d8003215 	stw	zero,200(sp)
   22000:	003b2906 	br	20ca8 <__alt_data_end+0xfffe0ca8>
   22004:	d9002d17 	ldw	r4,180(sp)
   22008:	24c00017 	ldw	r19,0(r4)
   2200c:	21000104 	addi	r4,r4,4
   22010:	d9002d15 	stw	r4,180(sp)
   22014:	982dd7fa 	srai	r22,r19,31
   22018:	b005883a 	mov	r2,r22
   2201c:	003a9f06 	br	20a9c <__alt_data_end+0xfffe0a9c>
   22020:	d9402d17 	ldw	r5,180(sp)
   22024:	d8c02f17 	ldw	r3,188(sp)
   22028:	28800017 	ldw	r2,0(r5)
   2202c:	29400104 	addi	r5,r5,4
   22030:	d9402d15 	stw	r5,180(sp)
   22034:	10c00015 	stw	r3,0(r2)
   22038:	00398606 	br	20654 <__alt_data_end+0xfffe0654>
   2203c:	d9402d17 	ldw	r5,180(sp)
   22040:	002d883a 	mov	r22,zero
   22044:	2cc00017 	ldw	r19,0(r5)
   22048:	29400104 	addi	r5,r5,4
   2204c:	d9402d15 	stw	r5,180(sp)
   22050:	003c2306 	br	210e0 <__alt_data_end+0xfffe10e0>
   22054:	d8c02d17 	ldw	r3,180(sp)
   22058:	d9002917 	ldw	r4,164(sp)
   2205c:	002d883a 	mov	r22,zero
   22060:	18800104 	addi	r2,r3,4
   22064:	1cc0000b 	ldhu	r19,0(r3)
   22068:	203dc10e 	bge	r4,zero,21770 <__alt_data_end+0xfffe1770>
   2206c:	003f7506 	br	21e44 <__alt_data_end+0xfffe1e44>
   22070:	040000f4 	movhi	r16,3
   22074:	84027c04 	addi	r16,r16,2544
   22078:	003acc06 	br	20bac <__alt_data_end+0xfffe0bac>
   2207c:	d9002c17 	ldw	r4,176(sp)
   22080:	d9801e04 	addi	r6,sp,120
   22084:	b80b883a 	mov	r5,r23
   22088:	0027b700 	call	27b70 <__sprint_r>
   2208c:	103a3b1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   22090:	dc402617 	ldw	r17,152(sp)
   22094:	d8c02017 	ldw	r3,128(sp)
   22098:	da000404 	addi	r8,sp,16
   2209c:	003f9c06 	br	21f10 <__alt_data_end+0xfffe1f10>
   220a0:	ac400043 	ldbu	r17,1(r21)
   220a4:	94800814 	ori	r18,r18,32
   220a8:	ad400044 	addi	r21,r21,1
   220ac:	8c403fcc 	andi	r17,r17,255
   220b0:	8c40201c 	xori	r17,r17,128
   220b4:	8c7fe004 	addi	r17,r17,-128
   220b8:	00398f06 	br	206f8 <__alt_data_end+0xfffe06f8>
   220bc:	d8c02d15 	stw	r3,180(sp)
   220c0:	0039883a 	mov	fp,zero
   220c4:	003e3506 	br	2199c <__alt_data_end+0xfffe199c>
   220c8:	d9002c17 	ldw	r4,176(sp)
   220cc:	d9801e04 	addi	r6,sp,120
   220d0:	b80b883a 	mov	r5,r23
   220d4:	0027b700 	call	27b70 <__sprint_r>
   220d8:	103a281e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   220dc:	d8c02017 	ldw	r3,128(sp)
   220e0:	da000404 	addi	r8,sp,16
   220e4:	003cd006 	br	21428 <__alt_data_end+0xfffe1428>
   220e8:	8009883a 	mov	r4,r16
   220ec:	da003d15 	stw	r8,244(sp)
   220f0:	00204dc0 	call	204dc <strlen>
   220f4:	d8802e15 	stw	r2,184(sp)
   220f8:	da003d17 	ldw	r8,244(sp)
   220fc:	103c340e 	bge	r2,zero,211d0 <__alt_data_end+0xfffe11d0>
   22100:	0005883a 	mov	r2,zero
   22104:	003c3206 	br	211d0 <__alt_data_end+0xfffe11d0>
   22108:	d9002c17 	ldw	r4,176(sp)
   2210c:	d9801e04 	addi	r6,sp,120
   22110:	b80b883a 	mov	r5,r23
   22114:	0027b700 	call	27b70 <__sprint_r>
   22118:	103a181e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   2211c:	d8c02017 	ldw	r3,128(sp)
   22120:	d8801f17 	ldw	r2,124(sp)
   22124:	da000404 	addi	r8,sp,16
   22128:	d9403317 	ldw	r5,204(sp)
   2212c:	10800044 	addi	r2,r2,1
   22130:	44000015 	stw	r16,0(r8)
   22134:	28c7883a 	add	r3,r5,r3
   22138:	003b7d06 	br	20f30 <__alt_data_end+0xfffe0f30>
   2213c:	010000f4 	movhi	r4,3
   22140:	21029084 	addi	r4,r4,2626
   22144:	d9003515 	stw	r4,212(sp)
   22148:	003b1406 	br	20d9c <__alt_data_end+0xfffe0d9c>
   2214c:	013fffc4 	movi	r4,-1
   22150:	003a3506 	br	20a28 <__alt_data_end+0xfffe0a28>
   22154:	0023883a 	mov	r17,zero
   22158:	003d9d06 	br	217d0 <__alt_data_end+0xfffe17d0>
   2215c:	d9002c17 	ldw	r4,176(sp)
   22160:	d9801e04 	addi	r6,sp,120
   22164:	b80b883a 	mov	r5,r23
   22168:	0027b700 	call	27b70 <__sprint_r>
   2216c:	103a031e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   22170:	d8c02017 	ldw	r3,128(sp)
   22174:	da000404 	addi	r8,sp,16
   22178:	003d9406 	br	217cc <__alt_data_end+0xfffe17cc>
   2217c:	010000f4 	movhi	r4,3
   22180:	21028c84 	addi	r4,r4,2610
   22184:	d9002b15 	stw	r4,172(sp)
   22188:	d9002b17 	ldw	r4,172(sp)
   2218c:	1c47883a 	add	r3,r3,r17
   22190:	10800044 	addi	r2,r2,1
   22194:	41000015 	stw	r4,0(r8)
   22198:	44400115 	stw	r17,4(r8)
   2219c:	d8c02015 	stw	r3,128(sp)
   221a0:	d8801f15 	stw	r2,124(sp)
   221a4:	010001c4 	movi	r4,7
   221a8:	20bfd716 	blt	r4,r2,22108 <__alt_data_end+0xfffe2108>
   221ac:	42000204 	addi	r8,r8,8
   221b0:	003fdd06 	br	22128 <__alt_data_end+0xfffe2128>
   221b4:	d9002c17 	ldw	r4,176(sp)
   221b8:	d9801e04 	addi	r6,sp,120
   221bc:	b80b883a 	mov	r5,r23
   221c0:	0027b700 	call	27b70 <__sprint_r>
   221c4:	1039ed1e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   221c8:	d8802617 	ldw	r2,152(sp)
   221cc:	d8c02017 	ldw	r3,128(sp)
   221d0:	da000404 	addi	r8,sp,16
   221d4:	003e1006 	br	21a18 <__alt_data_end+0xfffe1a18>
   221d8:	00800044 	movi	r2,1
   221dc:	10803fcc 	andi	r2,r2,255
   221e0:	00c00044 	movi	r3,1
   221e4:	10fa3526 	beq	r2,r3,20abc <__alt_data_end+0xfffe0abc>
   221e8:	00c00084 	movi	r3,2
   221ec:	10fbcb26 	beq	r2,r3,2111c <__alt_data_end+0xfffe111c>
   221f0:	003a8f06 	br	20c30 <__alt_data_end+0xfffe0c30>
   221f4:	010000f4 	movhi	r4,3
   221f8:	21029084 	addi	r4,r4,2626
   221fc:	d9003515 	stw	r4,212(sp)
   22200:	003b7606 	br	20fdc <__alt_data_end+0xfffe0fdc>
   22204:	d8802917 	ldw	r2,164(sp)
   22208:	00c00184 	movi	r3,6
   2220c:	1880012e 	bgeu	r3,r2,22214 <___vfprintf_internal_r+0x1ca0>
   22210:	1805883a 	mov	r2,r3
   22214:	d8802e15 	stw	r2,184(sp)
   22218:	1000ef16 	blt	r2,zero,225d8 <___vfprintf_internal_r+0x2064>
   2221c:	040000f4 	movhi	r16,3
   22220:	d8802a15 	stw	r2,168(sp)
   22224:	dcc02d15 	stw	r19,180(sp)
   22228:	d8002915 	stw	zero,164(sp)
   2222c:	d8003215 	stw	zero,200(sp)
   22230:	84028a04 	addi	r16,r16,2600
   22234:	0039883a 	mov	fp,zero
   22238:	003aa206 	br	20cc4 <__alt_data_end+0xfffe0cc4>
   2223c:	0021883a 	mov	r16,zero
   22240:	003e0706 	br	21a60 <__alt_data_end+0xfffe1a60>
   22244:	d9002c17 	ldw	r4,176(sp)
   22248:	d9801e04 	addi	r6,sp,120
   2224c:	b80b883a 	mov	r5,r23
   22250:	0027b700 	call	27b70 <__sprint_r>
   22254:	1039c91e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   22258:	d8802617 	ldw	r2,152(sp)
   2225c:	d9403317 	ldw	r5,204(sp)
   22260:	d8c02017 	ldw	r3,128(sp)
   22264:	da000404 	addi	r8,sp,16
   22268:	2885c83a 	sub	r2,r5,r2
   2226c:	003dfb06 	br	21a5c <__alt_data_end+0xfffe1a5c>
   22270:	9080004c 	andi	r2,r18,1
   22274:	103e8f1e 	bne	r2,zero,21cb4 <__alt_data_end+0xfffe1cb4>
   22278:	d8802117 	ldw	r2,132(sp)
   2227c:	003e9e06 	br	21cf8 <__alt_data_end+0xfffe1cf8>
   22280:	1025883a 	mov	r18,r2
   22284:	0039883a 	mov	fp,zero
   22288:	00800084 	movi	r2,2
   2228c:	003fd306 	br	221dc <__alt_data_end+0xfffe21dc>
   22290:	07000b44 	movi	fp,45
   22294:	df002785 	stb	fp,158(sp)
   22298:	003a4006 	br	20b9c <__alt_data_end+0xfffe0b9c>
   2229c:	00c00b44 	movi	r3,45
   222a0:	d8c02785 	stb	r3,158(sp)
   222a4:	d8802a15 	stw	r2,168(sp)
   222a8:	dc802b17 	ldw	r18,172(sp)
   222ac:	d8002915 	stw	zero,164(sp)
   222b0:	07000b44 	movi	fp,45
   222b4:	003a8006 	br	20cb8 <__alt_data_end+0xfffe0cb8>
   222b8:	040000f4 	movhi	r16,3
   222bc:	84027f04 	addi	r16,r16,2556
   222c0:	003f4706 	br	21fe0 <__alt_data_end+0xfffe1fe0>
   222c4:	d8c02d17 	ldw	r3,180(sp)
   222c8:	d9002f17 	ldw	r4,188(sp)
   222cc:	18800017 	ldw	r2,0(r3)
   222d0:	18c00104 	addi	r3,r3,4
   222d4:	d8c02d15 	stw	r3,180(sp)
   222d8:	11000015 	stw	r4,0(r2)
   222dc:	0038dd06 	br	20654 <__alt_data_end+0xfffe0654>
   222e0:	dd802617 	ldw	r22,152(sp)
   222e4:	00bfff44 	movi	r2,-3
   222e8:	b0801c16 	blt	r22,r2,2235c <___vfprintf_internal_r+0x1de8>
   222ec:	d9402917 	ldw	r5,164(sp)
   222f0:	2d801a16 	blt	r5,r22,2235c <___vfprintf_internal_r+0x1de8>
   222f4:	dd803215 	stw	r22,200(sp)
   222f8:	003e8906 	br	21d20 <__alt_data_end+0xfffe1d20>
   222fc:	010000f4 	movhi	r4,3
   22300:	21028c84 	addi	r4,r4,2610
   22304:	d9002b15 	stw	r4,172(sp)
   22308:	003c9106 	br	21550 <__alt_data_end+0xfffe1550>
   2230c:	e005883a 	mov	r2,fp
   22310:	003e7906 	br	21cf8 <__alt_data_end+0xfffe1cf8>
   22314:	d9402917 	ldw	r5,164(sp)
   22318:	df002783 	ldbu	fp,158(sp)
   2231c:	dcc02d15 	stw	r19,180(sp)
   22320:	d9402a15 	stw	r5,168(sp)
   22324:	d9402e15 	stw	r5,184(sp)
   22328:	d8002915 	stw	zero,164(sp)
   2232c:	d8003215 	stw	zero,200(sp)
   22330:	003a5d06 	br	20ca8 <__alt_data_end+0xfffe0ca8>
   22334:	9080004c 	andi	r2,r18,1
   22338:	0039883a 	mov	fp,zero
   2233c:	10000426 	beq	r2,zero,22350 <___vfprintf_internal_r+0x1ddc>
   22340:	00800c04 	movi	r2,48
   22344:	dc001dc4 	addi	r16,sp,119
   22348:	d8801dc5 	stb	r2,119(sp)
   2234c:	003b8006 	br	21150 <__alt_data_end+0xfffe1150>
   22350:	d8002e15 	stw	zero,184(sp)
   22354:	dc001e04 	addi	r16,sp,120
   22358:	003a4d06 	br	20c90 <__alt_data_end+0xfffe0c90>
   2235c:	8c7fff84 	addi	r17,r17,-2
   22360:	b5bfffc4 	addi	r22,r22,-1
   22364:	dd802615 	stw	r22,152(sp)
   22368:	dc4022c5 	stb	r17,139(sp)
   2236c:	b000bf16 	blt	r22,zero,2266c <___vfprintf_internal_r+0x20f8>
   22370:	00800ac4 	movi	r2,43
   22374:	d8802305 	stb	r2,140(sp)
   22378:	00800244 	movi	r2,9
   2237c:	15807016 	blt	r2,r22,22540 <___vfprintf_internal_r+0x1fcc>
   22380:	00800c04 	movi	r2,48
   22384:	b5800c04 	addi	r22,r22,48
   22388:	d8802345 	stb	r2,141(sp)
   2238c:	dd802385 	stb	r22,142(sp)
   22390:	d88023c4 	addi	r2,sp,143
   22394:	df0022c4 	addi	fp,sp,139
   22398:	d8c03317 	ldw	r3,204(sp)
   2239c:	1739c83a 	sub	fp,r2,fp
   223a0:	d9003317 	ldw	r4,204(sp)
   223a4:	e0c7883a 	add	r3,fp,r3
   223a8:	df003a15 	stw	fp,232(sp)
   223ac:	d8c02e15 	stw	r3,184(sp)
   223b0:	00800044 	movi	r2,1
   223b4:	1100b30e 	bge	r2,r4,22684 <___vfprintf_internal_r+0x2110>
   223b8:	d8c02e17 	ldw	r3,184(sp)
   223bc:	18c00044 	addi	r3,r3,1
   223c0:	d8c02e15 	stw	r3,184(sp)
   223c4:	1805883a 	mov	r2,r3
   223c8:	1800ac16 	blt	r3,zero,2267c <___vfprintf_internal_r+0x2108>
   223cc:	d8003215 	stw	zero,200(sp)
   223d0:	003e5d06 	br	21d48 <__alt_data_end+0xfffe1d48>
   223d4:	d9002c17 	ldw	r4,176(sp)
   223d8:	d9801e04 	addi	r6,sp,120
   223dc:	b80b883a 	mov	r5,r23
   223e0:	0027b700 	call	27b70 <__sprint_r>
   223e4:	1039651e 	bne	r2,zero,2097c <__alt_data_end+0xfffe097c>
   223e8:	dc402617 	ldw	r17,152(sp)
   223ec:	d8c02017 	ldw	r3,128(sp)
   223f0:	d8801f17 	ldw	r2,124(sp)
   223f4:	da000404 	addi	r8,sp,16
   223f8:	003ed606 	br	21f54 <__alt_data_end+0xfffe1f54>
   223fc:	582b883a 	mov	r21,r11
   22400:	d8002915 	stw	zero,164(sp)
   22404:	0038bd06 	br	206fc <__alt_data_end+0xfffe06fc>
   22408:	d8802917 	ldw	r2,164(sp)
   2240c:	103e071e 	bne	r2,zero,21c2c <__alt_data_end+0xfffe1c2c>
   22410:	dc002915 	stw	r16,164(sp)
   22414:	003e0506 	br	21c2c <__alt_data_end+0xfffe1c2c>
   22418:	d9002917 	ldw	r4,164(sp)
   2241c:	20c00044 	addi	r3,r4,1
   22420:	003e0f06 	br	21c60 <__alt_data_end+0xfffe1c60>
   22424:	01400184 	movi	r5,6
   22428:	d9402915 	stw	r5,164(sp)
   2242c:	003dff06 	br	21c2c <__alt_data_end+0xfffe1c2c>
   22430:	d8802104 	addi	r2,sp,132
   22434:	d8800315 	stw	r2,12(sp)
   22438:	d8802504 	addi	r2,sp,148
   2243c:	d8800215 	stw	r2,8(sp)
   22440:	d8802604 	addi	r2,sp,152
   22444:	d8800115 	stw	r2,4(sp)
   22448:	d8802917 	ldw	r2,164(sp)
   2244c:	d9403617 	ldw	r5,216(sp)
   22450:	d9002c17 	ldw	r4,176(sp)
   22454:	d8800015 	stw	r2,0(sp)
   22458:	01c000c4 	movi	r7,3
   2245c:	980d883a 	mov	r6,r19
   22460:	da003d15 	stw	r8,244(sp)
   22464:	0022b980 	call	22b98 <_dtoa_r>
   22468:	d8c02917 	ldw	r3,164(sp)
   2246c:	da003d17 	ldw	r8,244(sp)
   22470:	1021883a 	mov	r16,r2
   22474:	10f9883a 	add	fp,r2,r3
   22478:	81000007 	ldb	r4,0(r16)
   2247c:	00800c04 	movi	r2,48
   22480:	20805e26 	beq	r4,r2,225fc <___vfprintf_internal_r+0x2088>
   22484:	d8c02617 	ldw	r3,152(sp)
   22488:	e0f9883a 	add	fp,fp,r3
   2248c:	003e0a06 	br	21cb8 <__alt_data_end+0xfffe1cb8>
   22490:	00c00b44 	movi	r3,45
   22494:	24e0003c 	xorhi	r19,r4,32768
   22498:	d8c02a05 	stb	r3,168(sp)
   2249c:	003de906 	br	21c44 <__alt_data_end+0xfffe1c44>
   224a0:	d8c03217 	ldw	r3,200(sp)
   224a4:	00c07a0e 	bge	zero,r3,22690 <___vfprintf_internal_r+0x211c>
   224a8:	00800044 	movi	r2,1
   224ac:	d9003317 	ldw	r4,204(sp)
   224b0:	1105883a 	add	r2,r2,r4
   224b4:	d8802e15 	stw	r2,184(sp)
   224b8:	10004e16 	blt	r2,zero,225f4 <___vfprintf_internal_r+0x2080>
   224bc:	044019c4 	movi	r17,103
   224c0:	003e2106 	br	21d48 <__alt_data_end+0xfffe1d48>
   224c4:	d9002917 	ldw	r4,164(sp)
   224c8:	d8802104 	addi	r2,sp,132
   224cc:	d8800315 	stw	r2,12(sp)
   224d0:	d9000015 	stw	r4,0(sp)
   224d4:	d8802504 	addi	r2,sp,148
   224d8:	d9403617 	ldw	r5,216(sp)
   224dc:	d9002c17 	ldw	r4,176(sp)
   224e0:	d8800215 	stw	r2,8(sp)
   224e4:	d8802604 	addi	r2,sp,152
   224e8:	d8800115 	stw	r2,4(sp)
   224ec:	01c000c4 	movi	r7,3
   224f0:	980d883a 	mov	r6,r19
   224f4:	da003d15 	stw	r8,244(sp)
   224f8:	0022b980 	call	22b98 <_dtoa_r>
   224fc:	d8c02917 	ldw	r3,164(sp)
   22500:	da003d17 	ldw	r8,244(sp)
   22504:	1021883a 	mov	r16,r2
   22508:	00801184 	movi	r2,70
   2250c:	80f9883a 	add	fp,r16,r3
   22510:	88bfd926 	beq	r17,r2,22478 <__alt_data_end+0xfffe2478>
   22514:	003de806 	br	21cb8 <__alt_data_end+0xfffe1cb8>
   22518:	d9002917 	ldw	r4,164(sp)
   2251c:	00c04d0e 	bge	zero,r3,22654 <___vfprintf_internal_r+0x20e0>
   22520:	2000441e 	bne	r4,zero,22634 <___vfprintf_internal_r+0x20c0>
   22524:	9480004c 	andi	r18,r18,1
   22528:	9000421e 	bne	r18,zero,22634 <___vfprintf_internal_r+0x20c0>
   2252c:	1805883a 	mov	r2,r3
   22530:	18007016 	blt	r3,zero,226f4 <___vfprintf_internal_r+0x2180>
   22534:	d8c03217 	ldw	r3,200(sp)
   22538:	d8c02e15 	stw	r3,184(sp)
   2253c:	003e0206 	br	21d48 <__alt_data_end+0xfffe1d48>
   22540:	df0022c4 	addi	fp,sp,139
   22544:	dc002915 	stw	r16,164(sp)
   22548:	4027883a 	mov	r19,r8
   2254c:	e021883a 	mov	r16,fp
   22550:	b009883a 	mov	r4,r22
   22554:	01400284 	movi	r5,10
   22558:	002a5240 	call	2a524 <__modsi3>
   2255c:	10800c04 	addi	r2,r2,48
   22560:	843fffc4 	addi	r16,r16,-1
   22564:	b009883a 	mov	r4,r22
   22568:	01400284 	movi	r5,10
   2256c:	80800005 	stb	r2,0(r16)
   22570:	002a4a00 	call	2a4a0 <__divsi3>
   22574:	102d883a 	mov	r22,r2
   22578:	00800244 	movi	r2,9
   2257c:	15bff416 	blt	r2,r22,22550 <__alt_data_end+0xfffe2550>
   22580:	9811883a 	mov	r8,r19
   22584:	b0800c04 	addi	r2,r22,48
   22588:	8027883a 	mov	r19,r16
   2258c:	997fffc4 	addi	r5,r19,-1
   22590:	98bfffc5 	stb	r2,-1(r19)
   22594:	dc002917 	ldw	r16,164(sp)
   22598:	2f006a2e 	bgeu	r5,fp,22744 <___vfprintf_internal_r+0x21d0>
   2259c:	d9c02384 	addi	r7,sp,142
   225a0:	3ccfc83a 	sub	r7,r7,r19
   225a4:	d9002344 	addi	r4,sp,141
   225a8:	e1cf883a 	add	r7,fp,r7
   225ac:	00000106 	br	225b4 <___vfprintf_internal_r+0x2040>
   225b0:	28800003 	ldbu	r2,0(r5)
   225b4:	20800005 	stb	r2,0(r4)
   225b8:	21000044 	addi	r4,r4,1
   225bc:	29400044 	addi	r5,r5,1
   225c0:	393ffb1e 	bne	r7,r4,225b0 <__alt_data_end+0xfffe25b0>
   225c4:	d8802304 	addi	r2,sp,140
   225c8:	14c5c83a 	sub	r2,r2,r19
   225cc:	d8c02344 	addi	r3,sp,141
   225d0:	1885883a 	add	r2,r3,r2
   225d4:	003f7006 	br	22398 <__alt_data_end+0xfffe2398>
   225d8:	0005883a 	mov	r2,zero
   225dc:	003f0f06 	br	2221c <__alt_data_end+0xfffe221c>
   225e0:	d8c03217 	ldw	r3,200(sp)
   225e4:	18c00044 	addi	r3,r3,1
   225e8:	d8c02e15 	stw	r3,184(sp)
   225ec:	1805883a 	mov	r2,r3
   225f0:	183fb20e 	bge	r3,zero,224bc <__alt_data_end+0xfffe24bc>
   225f4:	0005883a 	mov	r2,zero
   225f8:	003fb006 	br	224bc <__alt_data_end+0xfffe24bc>
   225fc:	d9003617 	ldw	r4,216(sp)
   22600:	000d883a 	mov	r6,zero
   22604:	000f883a 	mov	r7,zero
   22608:	980b883a 	mov	r5,r19
   2260c:	d8c03c15 	stw	r3,240(sp)
   22610:	da003d15 	stw	r8,244(sp)
   22614:	002b7e80 	call	2b7e8 <__eqdf2>
   22618:	d8c03c17 	ldw	r3,240(sp)
   2261c:	da003d17 	ldw	r8,244(sp)
   22620:	103f9826 	beq	r2,zero,22484 <__alt_data_end+0xfffe2484>
   22624:	00800044 	movi	r2,1
   22628:	10c7c83a 	sub	r3,r2,r3
   2262c:	d8c02615 	stw	r3,152(sp)
   22630:	003f9506 	br	22488 <__alt_data_end+0xfffe2488>
   22634:	d9002917 	ldw	r4,164(sp)
   22638:	d8c03217 	ldw	r3,200(sp)
   2263c:	20800044 	addi	r2,r4,1
   22640:	1885883a 	add	r2,r3,r2
   22644:	d8802e15 	stw	r2,184(sp)
   22648:	103dbf0e 	bge	r2,zero,21d48 <__alt_data_end+0xfffe1d48>
   2264c:	0005883a 	mov	r2,zero
   22650:	003dbd06 	br	21d48 <__alt_data_end+0xfffe1d48>
   22654:	2000211e 	bne	r4,zero,226dc <___vfprintf_internal_r+0x2168>
   22658:	9480004c 	andi	r18,r18,1
   2265c:	90001f1e 	bne	r18,zero,226dc <___vfprintf_internal_r+0x2168>
   22660:	00800044 	movi	r2,1
   22664:	d8802e15 	stw	r2,184(sp)
   22668:	003db706 	br	21d48 <__alt_data_end+0xfffe1d48>
   2266c:	00800b44 	movi	r2,45
   22670:	05adc83a 	sub	r22,zero,r22
   22674:	d8802305 	stb	r2,140(sp)
   22678:	003f3f06 	br	22378 <__alt_data_end+0xfffe2378>
   2267c:	0005883a 	mov	r2,zero
   22680:	003f5206 	br	223cc <__alt_data_end+0xfffe23cc>
   22684:	90a4703a 	and	r18,r18,r2
   22688:	903f4e26 	beq	r18,zero,223c4 <__alt_data_end+0xfffe23c4>
   2268c:	003f4a06 	br	223b8 <__alt_data_end+0xfffe23b8>
   22690:	00800084 	movi	r2,2
   22694:	10c5c83a 	sub	r2,r2,r3
   22698:	003f8406 	br	224ac <__alt_data_end+0xfffe24ac>
   2269c:	d8802d17 	ldw	r2,180(sp)
   226a0:	d9002d17 	ldw	r4,180(sp)
   226a4:	ac400043 	ldbu	r17,1(r21)
   226a8:	10800017 	ldw	r2,0(r2)
   226ac:	582b883a 	mov	r21,r11
   226b0:	d8802915 	stw	r2,164(sp)
   226b4:	20800104 	addi	r2,r4,4
   226b8:	d9002917 	ldw	r4,164(sp)
   226bc:	d8802d15 	stw	r2,180(sp)
   226c0:	203e7a0e 	bge	r4,zero,220ac <__alt_data_end+0xfffe20ac>
   226c4:	8c403fcc 	andi	r17,r17,255
   226c8:	00bfffc4 	movi	r2,-1
   226cc:	8c40201c 	xori	r17,r17,128
   226d0:	d8802915 	stw	r2,164(sp)
   226d4:	8c7fe004 	addi	r17,r17,-128
   226d8:	00380706 	br	206f8 <__alt_data_end+0xfffe06f8>
   226dc:	d8c02917 	ldw	r3,164(sp)
   226e0:	18c00084 	addi	r3,r3,2
   226e4:	d8c02e15 	stw	r3,184(sp)
   226e8:	1805883a 	mov	r2,r3
   226ec:	183d960e 	bge	r3,zero,21d48 <__alt_data_end+0xfffe1d48>
   226f0:	003fd606 	br	2264c <__alt_data_end+0xfffe264c>
   226f4:	0005883a 	mov	r2,zero
   226f8:	003f8e06 	br	22534 <__alt_data_end+0xfffe2534>
   226fc:	9080004c 	andi	r2,r18,1
   22700:	103f811e 	bne	r2,zero,22508 <__alt_data_end+0xfffe2508>
   22704:	d8802117 	ldw	r2,132(sp)
   22708:	1405c83a 	sub	r2,r2,r16
   2270c:	d8803315 	stw	r2,204(sp)
   22710:	b47ef326 	beq	r22,r17,222e0 <__alt_data_end+0xfffe22e0>
   22714:	dd802617 	ldw	r22,152(sp)
   22718:	003f1106 	br	22360 <__alt_data_end+0xfffe2360>
   2271c:	d9c02785 	stb	r7,158(sp)
   22720:	00390406 	br	20b34 <__alt_data_end+0xfffe0b34>
   22724:	d9c02785 	stb	r7,158(sp)
   22728:	0038d306 	br	20a78 <__alt_data_end+0xfffe0a78>
   2272c:	d9c02785 	stb	r7,158(sp)
   22730:	003a6106 	br	210b8 <__alt_data_end+0xfffe10b8>
   22734:	d9c02785 	stb	r7,158(sp)
   22738:	003af806 	br	2131c <__alt_data_end+0xfffe131c>
   2273c:	0005883a 	mov	r2,zero
   22740:	003d7e06 	br	21d3c <__alt_data_end+0xfffe1d3c>
   22744:	d8802344 	addi	r2,sp,141
   22748:	003f1306 	br	22398 <__alt_data_end+0xfffe2398>
   2274c:	d9c02785 	stb	r7,158(sp)
   22750:	00392306 	br	20be0 <__alt_data_end+0xfffe0be0>
   22754:	d9c02785 	stb	r7,158(sp)
   22758:	003aa906 	br	21200 <__alt_data_end+0xfffe1200>
   2275c:	d9c02785 	stb	r7,158(sp)
   22760:	003a3d06 	br	21058 <__alt_data_end+0xfffe1058>
   22764:	d9c02785 	stb	r7,158(sp)
   22768:	003aca06 	br	21294 <__alt_data_end+0xfffe1294>

0002276c <__vfprintf_internal>:
   2276c:	008000f4 	movhi	r2,3
   22770:	108a3c04 	addi	r2,r2,10480
   22774:	300f883a 	mov	r7,r6
   22778:	280d883a 	mov	r6,r5
   2277c:	200b883a 	mov	r5,r4
   22780:	11000017 	ldw	r4,0(r2)
   22784:	00205741 	jmpi	20574 <___vfprintf_internal_r>

00022788 <__sbprintf>:
   22788:	2880030b 	ldhu	r2,12(r5)
   2278c:	2ac01917 	ldw	r11,100(r5)
   22790:	2a80038b 	ldhu	r10,14(r5)
   22794:	2a400717 	ldw	r9,28(r5)
   22798:	2a000917 	ldw	r8,36(r5)
   2279c:	defee204 	addi	sp,sp,-1144
   227a0:	00c10004 	movi	r3,1024
   227a4:	dc011a15 	stw	r16,1128(sp)
   227a8:	10bfff4c 	andi	r2,r2,65533
   227ac:	2821883a 	mov	r16,r5
   227b0:	d8cb883a 	add	r5,sp,r3
   227b4:	dc811c15 	stw	r18,1136(sp)
   227b8:	dc411b15 	stw	r17,1132(sp)
   227bc:	dfc11d15 	stw	ra,1140(sp)
   227c0:	2025883a 	mov	r18,r4
   227c4:	d881030d 	sth	r2,1036(sp)
   227c8:	dac11915 	stw	r11,1124(sp)
   227cc:	da81038d 	sth	r10,1038(sp)
   227d0:	da410715 	stw	r9,1052(sp)
   227d4:	da010915 	stw	r8,1060(sp)
   227d8:	dec10015 	stw	sp,1024(sp)
   227dc:	dec10415 	stw	sp,1040(sp)
   227e0:	d8c10215 	stw	r3,1032(sp)
   227e4:	d8c10515 	stw	r3,1044(sp)
   227e8:	d8010615 	stw	zero,1048(sp)
   227ec:	00205740 	call	20574 <___vfprintf_internal_r>
   227f0:	1023883a 	mov	r17,r2
   227f4:	10000416 	blt	r2,zero,22808 <__sbprintf+0x80>
   227f8:	d9410004 	addi	r5,sp,1024
   227fc:	9009883a 	mov	r4,r18
   22800:	002443c0 	call	2443c <_fflush_r>
   22804:	10000d1e 	bne	r2,zero,2283c <__sbprintf+0xb4>
   22808:	d881030b 	ldhu	r2,1036(sp)
   2280c:	1080100c 	andi	r2,r2,64
   22810:	10000326 	beq	r2,zero,22820 <__sbprintf+0x98>
   22814:	8080030b 	ldhu	r2,12(r16)
   22818:	10801014 	ori	r2,r2,64
   2281c:	8080030d 	sth	r2,12(r16)
   22820:	8805883a 	mov	r2,r17
   22824:	dfc11d17 	ldw	ra,1140(sp)
   22828:	dc811c17 	ldw	r18,1136(sp)
   2282c:	dc411b17 	ldw	r17,1132(sp)
   22830:	dc011a17 	ldw	r16,1128(sp)
   22834:	dec11e04 	addi	sp,sp,1144
   22838:	f800283a 	ret
   2283c:	047fffc4 	movi	r17,-1
   22840:	003ff106 	br	22808 <__alt_data_end+0xfffe2808>

00022844 <__swsetup_r>:
   22844:	008000f4 	movhi	r2,3
   22848:	defffd04 	addi	sp,sp,-12
   2284c:	108a3c04 	addi	r2,r2,10480
   22850:	dc400115 	stw	r17,4(sp)
   22854:	2023883a 	mov	r17,r4
   22858:	11000017 	ldw	r4,0(r2)
   2285c:	dc000015 	stw	r16,0(sp)
   22860:	dfc00215 	stw	ra,8(sp)
   22864:	2821883a 	mov	r16,r5
   22868:	20000226 	beq	r4,zero,22874 <__swsetup_r+0x30>
   2286c:	20800e17 	ldw	r2,56(r4)
   22870:	10003126 	beq	r2,zero,22938 <__swsetup_r+0xf4>
   22874:	8080030b 	ldhu	r2,12(r16)
   22878:	10c0020c 	andi	r3,r2,8
   2287c:	1009883a 	mov	r4,r2
   22880:	18000f26 	beq	r3,zero,228c0 <__swsetup_r+0x7c>
   22884:	80c00417 	ldw	r3,16(r16)
   22888:	18001526 	beq	r3,zero,228e0 <__swsetup_r+0x9c>
   2288c:	1100004c 	andi	r4,r2,1
   22890:	20001c1e 	bne	r4,zero,22904 <__swsetup_r+0xc0>
   22894:	1080008c 	andi	r2,r2,2
   22898:	1000291e 	bne	r2,zero,22940 <__swsetup_r+0xfc>
   2289c:	80800517 	ldw	r2,20(r16)
   228a0:	80800215 	stw	r2,8(r16)
   228a4:	18001c26 	beq	r3,zero,22918 <__swsetup_r+0xd4>
   228a8:	0005883a 	mov	r2,zero
   228ac:	dfc00217 	ldw	ra,8(sp)
   228b0:	dc400117 	ldw	r17,4(sp)
   228b4:	dc000017 	ldw	r16,0(sp)
   228b8:	dec00304 	addi	sp,sp,12
   228bc:	f800283a 	ret
   228c0:	2080040c 	andi	r2,r4,16
   228c4:	10002e26 	beq	r2,zero,22980 <__swsetup_r+0x13c>
   228c8:	2080010c 	andi	r2,r4,4
   228cc:	10001e1e 	bne	r2,zero,22948 <__swsetup_r+0x104>
   228d0:	80c00417 	ldw	r3,16(r16)
   228d4:	20800214 	ori	r2,r4,8
   228d8:	8080030d 	sth	r2,12(r16)
   228dc:	183feb1e 	bne	r3,zero,2288c <__alt_data_end+0xfffe288c>
   228e0:	1100a00c 	andi	r4,r2,640
   228e4:	01408004 	movi	r5,512
   228e8:	217fe826 	beq	r4,r5,2288c <__alt_data_end+0xfffe288c>
   228ec:	800b883a 	mov	r5,r16
   228f0:	8809883a 	mov	r4,r17
   228f4:	00253bc0 	call	253bc <__smakebuf_r>
   228f8:	8080030b 	ldhu	r2,12(r16)
   228fc:	80c00417 	ldw	r3,16(r16)
   22900:	003fe206 	br	2288c <__alt_data_end+0xfffe288c>
   22904:	80800517 	ldw	r2,20(r16)
   22908:	80000215 	stw	zero,8(r16)
   2290c:	0085c83a 	sub	r2,zero,r2
   22910:	80800615 	stw	r2,24(r16)
   22914:	183fe41e 	bne	r3,zero,228a8 <__alt_data_end+0xfffe28a8>
   22918:	80c0030b 	ldhu	r3,12(r16)
   2291c:	0005883a 	mov	r2,zero
   22920:	1900200c 	andi	r4,r3,128
   22924:	203fe126 	beq	r4,zero,228ac <__alt_data_end+0xfffe28ac>
   22928:	18c01014 	ori	r3,r3,64
   2292c:	80c0030d 	sth	r3,12(r16)
   22930:	00bfffc4 	movi	r2,-1
   22934:	003fdd06 	br	228ac <__alt_data_end+0xfffe28ac>
   22938:	00248180 	call	24818 <__sinit>
   2293c:	003fcd06 	br	22874 <__alt_data_end+0xfffe2874>
   22940:	0005883a 	mov	r2,zero
   22944:	003fd606 	br	228a0 <__alt_data_end+0xfffe28a0>
   22948:	81400c17 	ldw	r5,48(r16)
   2294c:	28000626 	beq	r5,zero,22968 <__swsetup_r+0x124>
   22950:	80801004 	addi	r2,r16,64
   22954:	28800326 	beq	r5,r2,22964 <__swsetup_r+0x120>
   22958:	8809883a 	mov	r4,r17
   2295c:	002498c0 	call	2498c <_free_r>
   22960:	8100030b 	ldhu	r4,12(r16)
   22964:	80000c15 	stw	zero,48(r16)
   22968:	80c00417 	ldw	r3,16(r16)
   2296c:	00bff6c4 	movi	r2,-37
   22970:	1108703a 	and	r4,r2,r4
   22974:	80000115 	stw	zero,4(r16)
   22978:	80c00015 	stw	r3,0(r16)
   2297c:	003fd506 	br	228d4 <__alt_data_end+0xfffe28d4>
   22980:	00800244 	movi	r2,9
   22984:	88800015 	stw	r2,0(r17)
   22988:	20801014 	ori	r2,r4,64
   2298c:	8080030d 	sth	r2,12(r16)
   22990:	00bfffc4 	movi	r2,-1
   22994:	003fc506 	br	228ac <__alt_data_end+0xfffe28ac>

00022998 <quorem>:
   22998:	defff704 	addi	sp,sp,-36
   2299c:	dc800215 	stw	r18,8(sp)
   229a0:	20800417 	ldw	r2,16(r4)
   229a4:	2c800417 	ldw	r18,16(r5)
   229a8:	dfc00815 	stw	ra,32(sp)
   229ac:	ddc00715 	stw	r23,28(sp)
   229b0:	dd800615 	stw	r22,24(sp)
   229b4:	dd400515 	stw	r21,20(sp)
   229b8:	dd000415 	stw	r20,16(sp)
   229bc:	dcc00315 	stw	r19,12(sp)
   229c0:	dc400115 	stw	r17,4(sp)
   229c4:	dc000015 	stw	r16,0(sp)
   229c8:	14807116 	blt	r2,r18,22b90 <quorem+0x1f8>
   229cc:	94bfffc4 	addi	r18,r18,-1
   229d0:	94ad883a 	add	r22,r18,r18
   229d4:	b5ad883a 	add	r22,r22,r22
   229d8:	2c400504 	addi	r17,r5,20
   229dc:	8da9883a 	add	r20,r17,r22
   229e0:	25400504 	addi	r21,r4,20
   229e4:	282f883a 	mov	r23,r5
   229e8:	adad883a 	add	r22,r21,r22
   229ec:	a1400017 	ldw	r5,0(r20)
   229f0:	2021883a 	mov	r16,r4
   229f4:	b1000017 	ldw	r4,0(r22)
   229f8:	29400044 	addi	r5,r5,1
   229fc:	002a5980 	call	2a598 <__udivsi3>
   22a00:	1027883a 	mov	r19,r2
   22a04:	10002c26 	beq	r2,zero,22ab8 <quorem+0x120>
   22a08:	a813883a 	mov	r9,r21
   22a0c:	880b883a 	mov	r5,r17
   22a10:	0009883a 	mov	r4,zero
   22a14:	000d883a 	mov	r6,zero
   22a18:	2a000017 	ldw	r8,0(r5)
   22a1c:	49c00017 	ldw	r7,0(r9)
   22a20:	29400104 	addi	r5,r5,4
   22a24:	40bfffcc 	andi	r2,r8,65535
   22a28:	14c5383a 	mul	r2,r2,r19
   22a2c:	4010d43a 	srli	r8,r8,16
   22a30:	38ffffcc 	andi	r3,r7,65535
   22a34:	1105883a 	add	r2,r2,r4
   22a38:	1008d43a 	srli	r4,r2,16
   22a3c:	44d1383a 	mul	r8,r8,r19
   22a40:	198d883a 	add	r6,r3,r6
   22a44:	10ffffcc 	andi	r3,r2,65535
   22a48:	30c7c83a 	sub	r3,r6,r3
   22a4c:	380ed43a 	srli	r7,r7,16
   22a50:	4105883a 	add	r2,r8,r4
   22a54:	180dd43a 	srai	r6,r3,16
   22a58:	113fffcc 	andi	r4,r2,65535
   22a5c:	390fc83a 	sub	r7,r7,r4
   22a60:	398d883a 	add	r6,r7,r6
   22a64:	300e943a 	slli	r7,r6,16
   22a68:	18ffffcc 	andi	r3,r3,65535
   22a6c:	1008d43a 	srli	r4,r2,16
   22a70:	38ceb03a 	or	r7,r7,r3
   22a74:	49c00015 	stw	r7,0(r9)
   22a78:	300dd43a 	srai	r6,r6,16
   22a7c:	4a400104 	addi	r9,r9,4
   22a80:	a17fe52e 	bgeu	r20,r5,22a18 <__alt_data_end+0xfffe2a18>
   22a84:	b0800017 	ldw	r2,0(r22)
   22a88:	10000b1e 	bne	r2,zero,22ab8 <quorem+0x120>
   22a8c:	b0bfff04 	addi	r2,r22,-4
   22a90:	a880082e 	bgeu	r21,r2,22ab4 <quorem+0x11c>
   22a94:	b0ffff17 	ldw	r3,-4(r22)
   22a98:	18000326 	beq	r3,zero,22aa8 <quorem+0x110>
   22a9c:	00000506 	br	22ab4 <quorem+0x11c>
   22aa0:	10c00017 	ldw	r3,0(r2)
   22aa4:	1800031e 	bne	r3,zero,22ab4 <quorem+0x11c>
   22aa8:	10bfff04 	addi	r2,r2,-4
   22aac:	94bfffc4 	addi	r18,r18,-1
   22ab0:	a8bffb36 	bltu	r21,r2,22aa0 <__alt_data_end+0xfffe2aa0>
   22ab4:	84800415 	stw	r18,16(r16)
   22ab8:	b80b883a 	mov	r5,r23
   22abc:	8009883a 	mov	r4,r16
   22ac0:	0026afc0 	call	26afc <__mcmp>
   22ac4:	10002616 	blt	r2,zero,22b60 <quorem+0x1c8>
   22ac8:	9cc00044 	addi	r19,r19,1
   22acc:	a805883a 	mov	r2,r21
   22ad0:	000b883a 	mov	r5,zero
   22ad4:	11000017 	ldw	r4,0(r2)
   22ad8:	89800017 	ldw	r6,0(r17)
   22adc:	10800104 	addi	r2,r2,4
   22ae0:	20ffffcc 	andi	r3,r4,65535
   22ae4:	194b883a 	add	r5,r3,r5
   22ae8:	30ffffcc 	andi	r3,r6,65535
   22aec:	28c7c83a 	sub	r3,r5,r3
   22af0:	300cd43a 	srli	r6,r6,16
   22af4:	2008d43a 	srli	r4,r4,16
   22af8:	180bd43a 	srai	r5,r3,16
   22afc:	18ffffcc 	andi	r3,r3,65535
   22b00:	2189c83a 	sub	r4,r4,r6
   22b04:	2149883a 	add	r4,r4,r5
   22b08:	200c943a 	slli	r6,r4,16
   22b0c:	8c400104 	addi	r17,r17,4
   22b10:	200bd43a 	srai	r5,r4,16
   22b14:	30c6b03a 	or	r3,r6,r3
   22b18:	10ffff15 	stw	r3,-4(r2)
   22b1c:	a47fed2e 	bgeu	r20,r17,22ad4 <__alt_data_end+0xfffe2ad4>
   22b20:	9485883a 	add	r2,r18,r18
   22b24:	1085883a 	add	r2,r2,r2
   22b28:	a887883a 	add	r3,r21,r2
   22b2c:	18800017 	ldw	r2,0(r3)
   22b30:	10000b1e 	bne	r2,zero,22b60 <quorem+0x1c8>
   22b34:	18bfff04 	addi	r2,r3,-4
   22b38:	a880082e 	bgeu	r21,r2,22b5c <quorem+0x1c4>
   22b3c:	18ffff17 	ldw	r3,-4(r3)
   22b40:	18000326 	beq	r3,zero,22b50 <quorem+0x1b8>
   22b44:	00000506 	br	22b5c <quorem+0x1c4>
   22b48:	10c00017 	ldw	r3,0(r2)
   22b4c:	1800031e 	bne	r3,zero,22b5c <quorem+0x1c4>
   22b50:	10bfff04 	addi	r2,r2,-4
   22b54:	94bfffc4 	addi	r18,r18,-1
   22b58:	a8bffb36 	bltu	r21,r2,22b48 <__alt_data_end+0xfffe2b48>
   22b5c:	84800415 	stw	r18,16(r16)
   22b60:	9805883a 	mov	r2,r19
   22b64:	dfc00817 	ldw	ra,32(sp)
   22b68:	ddc00717 	ldw	r23,28(sp)
   22b6c:	dd800617 	ldw	r22,24(sp)
   22b70:	dd400517 	ldw	r21,20(sp)
   22b74:	dd000417 	ldw	r20,16(sp)
   22b78:	dcc00317 	ldw	r19,12(sp)
   22b7c:	dc800217 	ldw	r18,8(sp)
   22b80:	dc400117 	ldw	r17,4(sp)
   22b84:	dc000017 	ldw	r16,0(sp)
   22b88:	dec00904 	addi	sp,sp,36
   22b8c:	f800283a 	ret
   22b90:	0005883a 	mov	r2,zero
   22b94:	003ff306 	br	22b64 <__alt_data_end+0xfffe2b64>

00022b98 <_dtoa_r>:
   22b98:	20801017 	ldw	r2,64(r4)
   22b9c:	deffde04 	addi	sp,sp,-136
   22ba0:	df002015 	stw	fp,128(sp)
   22ba4:	dcc01b15 	stw	r19,108(sp)
   22ba8:	dc801a15 	stw	r18,104(sp)
   22bac:	dc401915 	stw	r17,100(sp)
   22bb0:	dc001815 	stw	r16,96(sp)
   22bb4:	dfc02115 	stw	ra,132(sp)
   22bb8:	ddc01f15 	stw	r23,124(sp)
   22bbc:	dd801e15 	stw	r22,120(sp)
   22bc0:	dd401d15 	stw	r21,116(sp)
   22bc4:	dd001c15 	stw	r20,112(sp)
   22bc8:	d9c00315 	stw	r7,12(sp)
   22bcc:	2039883a 	mov	fp,r4
   22bd0:	3023883a 	mov	r17,r6
   22bd4:	2825883a 	mov	r18,r5
   22bd8:	dc002417 	ldw	r16,144(sp)
   22bdc:	3027883a 	mov	r19,r6
   22be0:	10000826 	beq	r2,zero,22c04 <_dtoa_r+0x6c>
   22be4:	21801117 	ldw	r6,68(r4)
   22be8:	00c00044 	movi	r3,1
   22bec:	100b883a 	mov	r5,r2
   22bf0:	1986983a 	sll	r3,r3,r6
   22bf4:	11800115 	stw	r6,4(r2)
   22bf8:	10c00215 	stw	r3,8(r2)
   22bfc:	00262dc0 	call	262dc <_Bfree>
   22c00:	e0001015 	stw	zero,64(fp)
   22c04:	88002e16 	blt	r17,zero,22cc0 <_dtoa_r+0x128>
   22c08:	80000015 	stw	zero,0(r16)
   22c0c:	889ffc2c 	andhi	r2,r17,32752
   22c10:	00dffc34 	movhi	r3,32752
   22c14:	10c01c26 	beq	r2,r3,22c88 <_dtoa_r+0xf0>
   22c18:	000d883a 	mov	r6,zero
   22c1c:	000f883a 	mov	r7,zero
   22c20:	9009883a 	mov	r4,r18
   22c24:	980b883a 	mov	r5,r19
   22c28:	002b7e80 	call	2b7e8 <__eqdf2>
   22c2c:	10002b1e 	bne	r2,zero,22cdc <_dtoa_r+0x144>
   22c30:	d9c02317 	ldw	r7,140(sp)
   22c34:	00800044 	movi	r2,1
   22c38:	38800015 	stw	r2,0(r7)
   22c3c:	d8802517 	ldw	r2,148(sp)
   22c40:	10019e26 	beq	r2,zero,232bc <_dtoa_r+0x724>
   22c44:	d8c02517 	ldw	r3,148(sp)
   22c48:	008000f4 	movhi	r2,3
   22c4c:	10828c44 	addi	r2,r2,2609
   22c50:	18800015 	stw	r2,0(r3)
   22c54:	10bfffc4 	addi	r2,r2,-1
   22c58:	dfc02117 	ldw	ra,132(sp)
   22c5c:	df002017 	ldw	fp,128(sp)
   22c60:	ddc01f17 	ldw	r23,124(sp)
   22c64:	dd801e17 	ldw	r22,120(sp)
   22c68:	dd401d17 	ldw	r21,116(sp)
   22c6c:	dd001c17 	ldw	r20,112(sp)
   22c70:	dcc01b17 	ldw	r19,108(sp)
   22c74:	dc801a17 	ldw	r18,104(sp)
   22c78:	dc401917 	ldw	r17,100(sp)
   22c7c:	dc001817 	ldw	r16,96(sp)
   22c80:	dec02204 	addi	sp,sp,136
   22c84:	f800283a 	ret
   22c88:	d8c02317 	ldw	r3,140(sp)
   22c8c:	0089c3c4 	movi	r2,9999
   22c90:	18800015 	stw	r2,0(r3)
   22c94:	90017726 	beq	r18,zero,23274 <_dtoa_r+0x6dc>
   22c98:	008000f4 	movhi	r2,3
   22c9c:	10829804 	addi	r2,r2,2656
   22ca0:	d9002517 	ldw	r4,148(sp)
   22ca4:	203fec26 	beq	r4,zero,22c58 <__alt_data_end+0xfffe2c58>
   22ca8:	10c000c7 	ldb	r3,3(r2)
   22cac:	1801781e 	bne	r3,zero,23290 <_dtoa_r+0x6f8>
   22cb0:	10c000c4 	addi	r3,r2,3
   22cb4:	d9802517 	ldw	r6,148(sp)
   22cb8:	30c00015 	stw	r3,0(r6)
   22cbc:	003fe606 	br	22c58 <__alt_data_end+0xfffe2c58>
   22cc0:	04e00034 	movhi	r19,32768
   22cc4:	9cffffc4 	addi	r19,r19,-1
   22cc8:	00800044 	movi	r2,1
   22ccc:	8ce6703a 	and	r19,r17,r19
   22cd0:	80800015 	stw	r2,0(r16)
   22cd4:	9823883a 	mov	r17,r19
   22cd8:	003fcc06 	br	22c0c <__alt_data_end+0xfffe2c0c>
   22cdc:	d8800204 	addi	r2,sp,8
   22ce0:	d8800015 	stw	r2,0(sp)
   22ce4:	d9c00104 	addi	r7,sp,4
   22ce8:	900b883a 	mov	r5,r18
   22cec:	980d883a 	mov	r6,r19
   22cf0:	e009883a 	mov	r4,fp
   22cf4:	8820d53a 	srli	r16,r17,20
   22cf8:	0026ec80 	call	26ec8 <__d2b>
   22cfc:	d8800915 	stw	r2,36(sp)
   22d00:	8001651e 	bne	r16,zero,23298 <_dtoa_r+0x700>
   22d04:	dd800217 	ldw	r22,8(sp)
   22d08:	dc000117 	ldw	r16,4(sp)
   22d0c:	00800804 	movi	r2,32
   22d10:	b421883a 	add	r16,r22,r16
   22d14:	80c10c84 	addi	r3,r16,1074
   22d18:	10c2d10e 	bge	r2,r3,23860 <_dtoa_r+0xcc8>
   22d1c:	00801004 	movi	r2,64
   22d20:	81010484 	addi	r4,r16,1042
   22d24:	10c7c83a 	sub	r3,r2,r3
   22d28:	9108d83a 	srl	r4,r18,r4
   22d2c:	88e2983a 	sll	r17,r17,r3
   22d30:	2448b03a 	or	r4,r4,r17
   22d34:	002cbb00 	call	2cbb0 <__floatunsidf>
   22d38:	017f8434 	movhi	r5,65040
   22d3c:	01800044 	movi	r6,1
   22d40:	1009883a 	mov	r4,r2
   22d44:	194b883a 	add	r5,r3,r5
   22d48:	843fffc4 	addi	r16,r16,-1
   22d4c:	d9801115 	stw	r6,68(sp)
   22d50:	000d883a 	mov	r6,zero
   22d54:	01cffe34 	movhi	r7,16376
   22d58:	002c1580 	call	2c158 <__subdf3>
   22d5c:	0198dbf4 	movhi	r6,25455
   22d60:	01cff4f4 	movhi	r7,16339
   22d64:	3190d844 	addi	r6,r6,17249
   22d68:	39e1e9c4 	addi	r7,r7,-30809
   22d6c:	1009883a 	mov	r4,r2
   22d70:	180b883a 	mov	r5,r3
   22d74:	002ba400 	call	2ba40 <__muldf3>
   22d78:	01a2d874 	movhi	r6,35681
   22d7c:	01cff1f4 	movhi	r7,16327
   22d80:	31b22cc4 	addi	r6,r6,-14157
   22d84:	39e28a04 	addi	r7,r7,-30168
   22d88:	180b883a 	mov	r5,r3
   22d8c:	1009883a 	mov	r4,r2
   22d90:	002a6540 	call	2a654 <__adddf3>
   22d94:	8009883a 	mov	r4,r16
   22d98:	1029883a 	mov	r20,r2
   22d9c:	1823883a 	mov	r17,r3
   22da0:	002cad40 	call	2cad4 <__floatsidf>
   22da4:	019427f4 	movhi	r6,20639
   22da8:	01cff4f4 	movhi	r7,16339
   22dac:	319e7ec4 	addi	r6,r6,31227
   22db0:	39d104c4 	addi	r7,r7,17427
   22db4:	1009883a 	mov	r4,r2
   22db8:	180b883a 	mov	r5,r3
   22dbc:	002ba400 	call	2ba40 <__muldf3>
   22dc0:	100d883a 	mov	r6,r2
   22dc4:	180f883a 	mov	r7,r3
   22dc8:	a009883a 	mov	r4,r20
   22dcc:	880b883a 	mov	r5,r17
   22dd0:	002a6540 	call	2a654 <__adddf3>
   22dd4:	1009883a 	mov	r4,r2
   22dd8:	180b883a 	mov	r5,r3
   22ddc:	1029883a 	mov	r20,r2
   22de0:	1823883a 	mov	r17,r3
   22de4:	002ca540 	call	2ca54 <__fixdfsi>
   22de8:	000d883a 	mov	r6,zero
   22dec:	000f883a 	mov	r7,zero
   22df0:	a009883a 	mov	r4,r20
   22df4:	880b883a 	mov	r5,r17
   22df8:	d8800515 	stw	r2,20(sp)
   22dfc:	002b94c0 	call	2b94c <__ledf2>
   22e00:	10028716 	blt	r2,zero,23820 <_dtoa_r+0xc88>
   22e04:	d8c00517 	ldw	r3,20(sp)
   22e08:	00800584 	movi	r2,22
   22e0c:	10c27536 	bltu	r2,r3,237e4 <_dtoa_r+0xc4c>
   22e10:	180490fa 	slli	r2,r3,3
   22e14:	00c000f4 	movhi	r3,3
   22e18:	18c2b404 	addi	r3,r3,2768
   22e1c:	1885883a 	add	r2,r3,r2
   22e20:	11000017 	ldw	r4,0(r2)
   22e24:	11400117 	ldw	r5,4(r2)
   22e28:	900d883a 	mov	r6,r18
   22e2c:	980f883a 	mov	r7,r19
   22e30:	002b8700 	call	2b870 <__gedf2>
   22e34:	00828d0e 	bge	zero,r2,2386c <_dtoa_r+0xcd4>
   22e38:	d9000517 	ldw	r4,20(sp)
   22e3c:	d8000e15 	stw	zero,56(sp)
   22e40:	213fffc4 	addi	r4,r4,-1
   22e44:	d9000515 	stw	r4,20(sp)
   22e48:	b42dc83a 	sub	r22,r22,r16
   22e4c:	b5bfffc4 	addi	r22,r22,-1
   22e50:	b0026f16 	blt	r22,zero,23810 <_dtoa_r+0xc78>
   22e54:	d8000815 	stw	zero,32(sp)
   22e58:	d9c00517 	ldw	r7,20(sp)
   22e5c:	38026416 	blt	r7,zero,237f0 <_dtoa_r+0xc58>
   22e60:	b1ed883a 	add	r22,r22,r7
   22e64:	d9c00d15 	stw	r7,52(sp)
   22e68:	d8000a15 	stw	zero,40(sp)
   22e6c:	d9800317 	ldw	r6,12(sp)
   22e70:	00800244 	movi	r2,9
   22e74:	11811436 	bltu	r2,r6,232c8 <_dtoa_r+0x730>
   22e78:	00800144 	movi	r2,5
   22e7c:	1184e10e 	bge	r2,r6,24204 <_dtoa_r+0x166c>
   22e80:	31bfff04 	addi	r6,r6,-4
   22e84:	d9800315 	stw	r6,12(sp)
   22e88:	0023883a 	mov	r17,zero
   22e8c:	d9800317 	ldw	r6,12(sp)
   22e90:	008000c4 	movi	r2,3
   22e94:	30836726 	beq	r6,r2,23c34 <_dtoa_r+0x109c>
   22e98:	1183410e 	bge	r2,r6,23ba0 <_dtoa_r+0x1008>
   22e9c:	d9c00317 	ldw	r7,12(sp)
   22ea0:	00800104 	movi	r2,4
   22ea4:	38827c26 	beq	r7,r2,23898 <_dtoa_r+0xd00>
   22ea8:	00800144 	movi	r2,5
   22eac:	3884c41e 	bne	r7,r2,241c0 <_dtoa_r+0x1628>
   22eb0:	00800044 	movi	r2,1
   22eb4:	d8800b15 	stw	r2,44(sp)
   22eb8:	d8c00517 	ldw	r3,20(sp)
   22ebc:	d9002217 	ldw	r4,136(sp)
   22ec0:	1907883a 	add	r3,r3,r4
   22ec4:	19800044 	addi	r6,r3,1
   22ec8:	d8c00c15 	stw	r3,48(sp)
   22ecc:	d9800615 	stw	r6,24(sp)
   22ed0:	0183a40e 	bge	zero,r6,23d64 <_dtoa_r+0x11cc>
   22ed4:	d9800617 	ldw	r6,24(sp)
   22ed8:	3021883a 	mov	r16,r6
   22edc:	e0001115 	stw	zero,68(fp)
   22ee0:	008005c4 	movi	r2,23
   22ee4:	1184c92e 	bgeu	r2,r6,2420c <_dtoa_r+0x1674>
   22ee8:	00c00044 	movi	r3,1
   22eec:	00800104 	movi	r2,4
   22ef0:	1085883a 	add	r2,r2,r2
   22ef4:	11000504 	addi	r4,r2,20
   22ef8:	180b883a 	mov	r5,r3
   22efc:	18c00044 	addi	r3,r3,1
   22f00:	313ffb2e 	bgeu	r6,r4,22ef0 <__alt_data_end+0xfffe2ef0>
   22f04:	e1401115 	stw	r5,68(fp)
   22f08:	e009883a 	mov	r4,fp
   22f0c:	00262340 	call	26234 <_Balloc>
   22f10:	d8800715 	stw	r2,28(sp)
   22f14:	e0801015 	stw	r2,64(fp)
   22f18:	00800384 	movi	r2,14
   22f1c:	1400f736 	bltu	r2,r16,232fc <_dtoa_r+0x764>
   22f20:	8800f626 	beq	r17,zero,232fc <_dtoa_r+0x764>
   22f24:	d9c00517 	ldw	r7,20(sp)
   22f28:	01c39a0e 	bge	zero,r7,23d94 <_dtoa_r+0x11fc>
   22f2c:	388003cc 	andi	r2,r7,15
   22f30:	100490fa 	slli	r2,r2,3
   22f34:	382bd13a 	srai	r21,r7,4
   22f38:	00c000f4 	movhi	r3,3
   22f3c:	18c2b404 	addi	r3,r3,2768
   22f40:	1885883a 	add	r2,r3,r2
   22f44:	a8c0040c 	andi	r3,r21,16
   22f48:	12400017 	ldw	r9,0(r2)
   22f4c:	12000117 	ldw	r8,4(r2)
   22f50:	18037926 	beq	r3,zero,23d38 <_dtoa_r+0x11a0>
   22f54:	008000f4 	movhi	r2,3
   22f58:	1082aa04 	addi	r2,r2,2728
   22f5c:	11800817 	ldw	r6,32(r2)
   22f60:	11c00917 	ldw	r7,36(r2)
   22f64:	9009883a 	mov	r4,r18
   22f68:	980b883a 	mov	r5,r19
   22f6c:	da001715 	stw	r8,92(sp)
   22f70:	da401615 	stw	r9,88(sp)
   22f74:	002af000 	call	2af00 <__divdf3>
   22f78:	da001717 	ldw	r8,92(sp)
   22f7c:	da401617 	ldw	r9,88(sp)
   22f80:	ad4003cc 	andi	r21,r21,15
   22f84:	040000c4 	movi	r16,3
   22f88:	1023883a 	mov	r17,r2
   22f8c:	1829883a 	mov	r20,r3
   22f90:	a8001126 	beq	r21,zero,22fd8 <_dtoa_r+0x440>
   22f94:	05c000f4 	movhi	r23,3
   22f98:	bdc2aa04 	addi	r23,r23,2728
   22f9c:	4805883a 	mov	r2,r9
   22fa0:	4007883a 	mov	r3,r8
   22fa4:	a980004c 	andi	r6,r21,1
   22fa8:	1009883a 	mov	r4,r2
   22fac:	a82bd07a 	srai	r21,r21,1
   22fb0:	180b883a 	mov	r5,r3
   22fb4:	30000426 	beq	r6,zero,22fc8 <_dtoa_r+0x430>
   22fb8:	b9800017 	ldw	r6,0(r23)
   22fbc:	b9c00117 	ldw	r7,4(r23)
   22fc0:	84000044 	addi	r16,r16,1
   22fc4:	002ba400 	call	2ba40 <__muldf3>
   22fc8:	bdc00204 	addi	r23,r23,8
   22fcc:	a83ff51e 	bne	r21,zero,22fa4 <__alt_data_end+0xfffe2fa4>
   22fd0:	1013883a 	mov	r9,r2
   22fd4:	1811883a 	mov	r8,r3
   22fd8:	480d883a 	mov	r6,r9
   22fdc:	400f883a 	mov	r7,r8
   22fe0:	8809883a 	mov	r4,r17
   22fe4:	a00b883a 	mov	r5,r20
   22fe8:	002af000 	call	2af00 <__divdf3>
   22fec:	d8800f15 	stw	r2,60(sp)
   22ff0:	d8c01015 	stw	r3,64(sp)
   22ff4:	d8c00e17 	ldw	r3,56(sp)
   22ff8:	18000626 	beq	r3,zero,23014 <_dtoa_r+0x47c>
   22ffc:	d9000f17 	ldw	r4,60(sp)
   23000:	d9401017 	ldw	r5,64(sp)
   23004:	000d883a 	mov	r6,zero
   23008:	01cffc34 	movhi	r7,16368
   2300c:	002b94c0 	call	2b94c <__ledf2>
   23010:	10040b16 	blt	r2,zero,24040 <_dtoa_r+0x14a8>
   23014:	8009883a 	mov	r4,r16
   23018:	002cad40 	call	2cad4 <__floatsidf>
   2301c:	d9800f17 	ldw	r6,60(sp)
   23020:	d9c01017 	ldw	r7,64(sp)
   23024:	1009883a 	mov	r4,r2
   23028:	180b883a 	mov	r5,r3
   2302c:	002ba400 	call	2ba40 <__muldf3>
   23030:	000d883a 	mov	r6,zero
   23034:	01d00734 	movhi	r7,16412
   23038:	1009883a 	mov	r4,r2
   2303c:	180b883a 	mov	r5,r3
   23040:	002a6540 	call	2a654 <__adddf3>
   23044:	1021883a 	mov	r16,r2
   23048:	d8800617 	ldw	r2,24(sp)
   2304c:	047f3034 	movhi	r17,64704
   23050:	1c63883a 	add	r17,r3,r17
   23054:	10031826 	beq	r2,zero,23cb8 <_dtoa_r+0x1120>
   23058:	d8c00517 	ldw	r3,20(sp)
   2305c:	db000617 	ldw	r12,24(sp)
   23060:	d8c01315 	stw	r3,76(sp)
   23064:	d9000b17 	ldw	r4,44(sp)
   23068:	20038f26 	beq	r4,zero,23ea8 <_dtoa_r+0x1310>
   2306c:	60bfffc4 	addi	r2,r12,-1
   23070:	100490fa 	slli	r2,r2,3
   23074:	00c000f4 	movhi	r3,3
   23078:	18c2b404 	addi	r3,r3,2768
   2307c:	1885883a 	add	r2,r3,r2
   23080:	11800017 	ldw	r6,0(r2)
   23084:	11c00117 	ldw	r7,4(r2)
   23088:	d8800717 	ldw	r2,28(sp)
   2308c:	0009883a 	mov	r4,zero
   23090:	014ff834 	movhi	r5,16352
   23094:	db001615 	stw	r12,88(sp)
   23098:	15c00044 	addi	r23,r2,1
   2309c:	002af000 	call	2af00 <__divdf3>
   230a0:	800d883a 	mov	r6,r16
   230a4:	880f883a 	mov	r7,r17
   230a8:	1009883a 	mov	r4,r2
   230ac:	180b883a 	mov	r5,r3
   230b0:	002c1580 	call	2c158 <__subdf3>
   230b4:	d9401017 	ldw	r5,64(sp)
   230b8:	d9000f17 	ldw	r4,60(sp)
   230bc:	102b883a 	mov	r21,r2
   230c0:	d8c01215 	stw	r3,72(sp)
   230c4:	002ca540 	call	2ca54 <__fixdfsi>
   230c8:	1009883a 	mov	r4,r2
   230cc:	1029883a 	mov	r20,r2
   230d0:	002cad40 	call	2cad4 <__floatsidf>
   230d4:	d9000f17 	ldw	r4,60(sp)
   230d8:	d9401017 	ldw	r5,64(sp)
   230dc:	100d883a 	mov	r6,r2
   230e0:	180f883a 	mov	r7,r3
   230e4:	002c1580 	call	2c158 <__subdf3>
   230e8:	1823883a 	mov	r17,r3
   230ec:	d8c00717 	ldw	r3,28(sp)
   230f0:	d9401217 	ldw	r5,72(sp)
   230f4:	a2000c04 	addi	r8,r20,48
   230f8:	1021883a 	mov	r16,r2
   230fc:	1a000005 	stb	r8,0(r3)
   23100:	800d883a 	mov	r6,r16
   23104:	880f883a 	mov	r7,r17
   23108:	a809883a 	mov	r4,r21
   2310c:	4029883a 	mov	r20,r8
   23110:	002b8700 	call	2b870 <__gedf2>
   23114:	00841d16 	blt	zero,r2,2418c <_dtoa_r+0x15f4>
   23118:	800d883a 	mov	r6,r16
   2311c:	880f883a 	mov	r7,r17
   23120:	0009883a 	mov	r4,zero
   23124:	014ffc34 	movhi	r5,16368
   23128:	002c1580 	call	2c158 <__subdf3>
   2312c:	d9401217 	ldw	r5,72(sp)
   23130:	100d883a 	mov	r6,r2
   23134:	180f883a 	mov	r7,r3
   23138:	a809883a 	mov	r4,r21
   2313c:	002b8700 	call	2b870 <__gedf2>
   23140:	db001617 	ldw	r12,88(sp)
   23144:	00840e16 	blt	zero,r2,24180 <_dtoa_r+0x15e8>
   23148:	00800044 	movi	r2,1
   2314c:	13006b0e 	bge	r2,r12,232fc <_dtoa_r+0x764>
   23150:	d9000717 	ldw	r4,28(sp)
   23154:	dd800f15 	stw	r22,60(sp)
   23158:	dcc01015 	stw	r19,64(sp)
   2315c:	2319883a 	add	r12,r4,r12
   23160:	dcc01217 	ldw	r19,72(sp)
   23164:	602d883a 	mov	r22,r12
   23168:	dc801215 	stw	r18,72(sp)
   2316c:	b825883a 	mov	r18,r23
   23170:	00000906 	br	23198 <_dtoa_r+0x600>
   23174:	002c1580 	call	2c158 <__subdf3>
   23178:	a80d883a 	mov	r6,r21
   2317c:	980f883a 	mov	r7,r19
   23180:	1009883a 	mov	r4,r2
   23184:	180b883a 	mov	r5,r3
   23188:	002b94c0 	call	2b94c <__ledf2>
   2318c:	1003e816 	blt	r2,zero,24130 <_dtoa_r+0x1598>
   23190:	b825883a 	mov	r18,r23
   23194:	bd83e926 	beq	r23,r22,2413c <_dtoa_r+0x15a4>
   23198:	a809883a 	mov	r4,r21
   2319c:	980b883a 	mov	r5,r19
   231a0:	000d883a 	mov	r6,zero
   231a4:	01d00934 	movhi	r7,16420
   231a8:	002ba400 	call	2ba40 <__muldf3>
   231ac:	000d883a 	mov	r6,zero
   231b0:	01d00934 	movhi	r7,16420
   231b4:	8009883a 	mov	r4,r16
   231b8:	880b883a 	mov	r5,r17
   231bc:	102b883a 	mov	r21,r2
   231c0:	1827883a 	mov	r19,r3
   231c4:	002ba400 	call	2ba40 <__muldf3>
   231c8:	180b883a 	mov	r5,r3
   231cc:	1009883a 	mov	r4,r2
   231d0:	1821883a 	mov	r16,r3
   231d4:	1023883a 	mov	r17,r2
   231d8:	002ca540 	call	2ca54 <__fixdfsi>
   231dc:	1009883a 	mov	r4,r2
   231e0:	1029883a 	mov	r20,r2
   231e4:	002cad40 	call	2cad4 <__floatsidf>
   231e8:	8809883a 	mov	r4,r17
   231ec:	800b883a 	mov	r5,r16
   231f0:	100d883a 	mov	r6,r2
   231f4:	180f883a 	mov	r7,r3
   231f8:	002c1580 	call	2c158 <__subdf3>
   231fc:	a5000c04 	addi	r20,r20,48
   23200:	a80d883a 	mov	r6,r21
   23204:	980f883a 	mov	r7,r19
   23208:	1009883a 	mov	r4,r2
   2320c:	180b883a 	mov	r5,r3
   23210:	95000005 	stb	r20,0(r18)
   23214:	1021883a 	mov	r16,r2
   23218:	1823883a 	mov	r17,r3
   2321c:	002b94c0 	call	2b94c <__ledf2>
   23220:	bdc00044 	addi	r23,r23,1
   23224:	800d883a 	mov	r6,r16
   23228:	880f883a 	mov	r7,r17
   2322c:	0009883a 	mov	r4,zero
   23230:	014ffc34 	movhi	r5,16368
   23234:	103fcf0e 	bge	r2,zero,23174 <__alt_data_end+0xfffe3174>
   23238:	d8c01317 	ldw	r3,76(sp)
   2323c:	d8c00515 	stw	r3,20(sp)
   23240:	d9400917 	ldw	r5,36(sp)
   23244:	e009883a 	mov	r4,fp
   23248:	00262dc0 	call	262dc <_Bfree>
   2324c:	d9000517 	ldw	r4,20(sp)
   23250:	d9802317 	ldw	r6,140(sp)
   23254:	d9c02517 	ldw	r7,148(sp)
   23258:	b8000005 	stb	zero,0(r23)
   2325c:	20800044 	addi	r2,r4,1
   23260:	30800015 	stw	r2,0(r6)
   23264:	3802aa26 	beq	r7,zero,23d10 <_dtoa_r+0x1178>
   23268:	3dc00015 	stw	r23,0(r7)
   2326c:	d8800717 	ldw	r2,28(sp)
   23270:	003e7906 	br	22c58 <__alt_data_end+0xfffe2c58>
   23274:	00800434 	movhi	r2,16
   23278:	10bfffc4 	addi	r2,r2,-1
   2327c:	88a2703a 	and	r17,r17,r2
   23280:	883e851e 	bne	r17,zero,22c98 <__alt_data_end+0xfffe2c98>
   23284:	008000f4 	movhi	r2,3
   23288:	10829504 	addi	r2,r2,2644
   2328c:	003e8406 	br	22ca0 <__alt_data_end+0xfffe2ca0>
   23290:	10c00204 	addi	r3,r2,8
   23294:	003e8706 	br	22cb4 <__alt_data_end+0xfffe2cb4>
   23298:	01400434 	movhi	r5,16
   2329c:	297fffc4 	addi	r5,r5,-1
   232a0:	994a703a 	and	r5,r19,r5
   232a4:	9009883a 	mov	r4,r18
   232a8:	843f0044 	addi	r16,r16,-1023
   232ac:	294ffc34 	orhi	r5,r5,16368
   232b0:	dd800217 	ldw	r22,8(sp)
   232b4:	d8001115 	stw	zero,68(sp)
   232b8:	003ea506 	br	22d50 <__alt_data_end+0xfffe2d50>
   232bc:	008000f4 	movhi	r2,3
   232c0:	10828c04 	addi	r2,r2,2608
   232c4:	003e6406 	br	22c58 <__alt_data_end+0xfffe2c58>
   232c8:	e0001115 	stw	zero,68(fp)
   232cc:	000b883a 	mov	r5,zero
   232d0:	e009883a 	mov	r4,fp
   232d4:	00262340 	call	26234 <_Balloc>
   232d8:	01bfffc4 	movi	r6,-1
   232dc:	01c00044 	movi	r7,1
   232e0:	d8800715 	stw	r2,28(sp)
   232e4:	d9800c15 	stw	r6,48(sp)
   232e8:	e0801015 	stw	r2,64(fp)
   232ec:	d8000315 	stw	zero,12(sp)
   232f0:	d9c00b15 	stw	r7,44(sp)
   232f4:	d9800615 	stw	r6,24(sp)
   232f8:	d8002215 	stw	zero,136(sp)
   232fc:	d8800117 	ldw	r2,4(sp)
   23300:	10008916 	blt	r2,zero,23528 <_dtoa_r+0x990>
   23304:	d9000517 	ldw	r4,20(sp)
   23308:	00c00384 	movi	r3,14
   2330c:	19008616 	blt	r3,r4,23528 <_dtoa_r+0x990>
   23310:	200490fa 	slli	r2,r4,3
   23314:	00c000f4 	movhi	r3,3
   23318:	d9802217 	ldw	r6,136(sp)
   2331c:	18c2b404 	addi	r3,r3,2768
   23320:	1885883a 	add	r2,r3,r2
   23324:	14000017 	ldw	r16,0(r2)
   23328:	14400117 	ldw	r17,4(r2)
   2332c:	30016316 	blt	r6,zero,238bc <_dtoa_r+0xd24>
   23330:	800d883a 	mov	r6,r16
   23334:	880f883a 	mov	r7,r17
   23338:	9009883a 	mov	r4,r18
   2333c:	980b883a 	mov	r5,r19
   23340:	002af000 	call	2af00 <__divdf3>
   23344:	180b883a 	mov	r5,r3
   23348:	1009883a 	mov	r4,r2
   2334c:	002ca540 	call	2ca54 <__fixdfsi>
   23350:	1009883a 	mov	r4,r2
   23354:	102b883a 	mov	r21,r2
   23358:	002cad40 	call	2cad4 <__floatsidf>
   2335c:	800d883a 	mov	r6,r16
   23360:	880f883a 	mov	r7,r17
   23364:	1009883a 	mov	r4,r2
   23368:	180b883a 	mov	r5,r3
   2336c:	002ba400 	call	2ba40 <__muldf3>
   23370:	100d883a 	mov	r6,r2
   23374:	180f883a 	mov	r7,r3
   23378:	9009883a 	mov	r4,r18
   2337c:	980b883a 	mov	r5,r19
   23380:	002c1580 	call	2c158 <__subdf3>
   23384:	d9c00717 	ldw	r7,28(sp)
   23388:	1009883a 	mov	r4,r2
   2338c:	a8800c04 	addi	r2,r21,48
   23390:	38800005 	stb	r2,0(r7)
   23394:	3dc00044 	addi	r23,r7,1
   23398:	d9c00617 	ldw	r7,24(sp)
   2339c:	01800044 	movi	r6,1
   233a0:	180b883a 	mov	r5,r3
   233a4:	2005883a 	mov	r2,r4
   233a8:	39803826 	beq	r7,r6,2348c <_dtoa_r+0x8f4>
   233ac:	000d883a 	mov	r6,zero
   233b0:	01d00934 	movhi	r7,16420
   233b4:	002ba400 	call	2ba40 <__muldf3>
   233b8:	000d883a 	mov	r6,zero
   233bc:	000f883a 	mov	r7,zero
   233c0:	1009883a 	mov	r4,r2
   233c4:	180b883a 	mov	r5,r3
   233c8:	1025883a 	mov	r18,r2
   233cc:	1827883a 	mov	r19,r3
   233d0:	002b7e80 	call	2b7e8 <__eqdf2>
   233d4:	103f9a26 	beq	r2,zero,23240 <__alt_data_end+0xfffe3240>
   233d8:	d9c00617 	ldw	r7,24(sp)
   233dc:	d8c00717 	ldw	r3,28(sp)
   233e0:	b829883a 	mov	r20,r23
   233e4:	38bfffc4 	addi	r2,r7,-1
   233e8:	18ad883a 	add	r22,r3,r2
   233ec:	00000a06 	br	23418 <_dtoa_r+0x880>
   233f0:	002ba400 	call	2ba40 <__muldf3>
   233f4:	000d883a 	mov	r6,zero
   233f8:	000f883a 	mov	r7,zero
   233fc:	1009883a 	mov	r4,r2
   23400:	180b883a 	mov	r5,r3
   23404:	1025883a 	mov	r18,r2
   23408:	1827883a 	mov	r19,r3
   2340c:	b829883a 	mov	r20,r23
   23410:	002b7e80 	call	2b7e8 <__eqdf2>
   23414:	103f8a26 	beq	r2,zero,23240 <__alt_data_end+0xfffe3240>
   23418:	800d883a 	mov	r6,r16
   2341c:	880f883a 	mov	r7,r17
   23420:	9009883a 	mov	r4,r18
   23424:	980b883a 	mov	r5,r19
   23428:	002af000 	call	2af00 <__divdf3>
   2342c:	180b883a 	mov	r5,r3
   23430:	1009883a 	mov	r4,r2
   23434:	002ca540 	call	2ca54 <__fixdfsi>
   23438:	1009883a 	mov	r4,r2
   2343c:	102b883a 	mov	r21,r2
   23440:	002cad40 	call	2cad4 <__floatsidf>
   23444:	800d883a 	mov	r6,r16
   23448:	880f883a 	mov	r7,r17
   2344c:	1009883a 	mov	r4,r2
   23450:	180b883a 	mov	r5,r3
   23454:	002ba400 	call	2ba40 <__muldf3>
   23458:	100d883a 	mov	r6,r2
   2345c:	180f883a 	mov	r7,r3
   23460:	9009883a 	mov	r4,r18
   23464:	980b883a 	mov	r5,r19
   23468:	002c1580 	call	2c158 <__subdf3>
   2346c:	aa000c04 	addi	r8,r21,48
   23470:	a2000005 	stb	r8,0(r20)
   23474:	000d883a 	mov	r6,zero
   23478:	01d00934 	movhi	r7,16420
   2347c:	1009883a 	mov	r4,r2
   23480:	180b883a 	mov	r5,r3
   23484:	a5c00044 	addi	r23,r20,1
   23488:	b53fd91e 	bne	r22,r20,233f0 <__alt_data_end+0xfffe33f0>
   2348c:	100d883a 	mov	r6,r2
   23490:	180f883a 	mov	r7,r3
   23494:	1009883a 	mov	r4,r2
   23498:	180b883a 	mov	r5,r3
   2349c:	002a6540 	call	2a654 <__adddf3>
   234a0:	100d883a 	mov	r6,r2
   234a4:	180f883a 	mov	r7,r3
   234a8:	8009883a 	mov	r4,r16
   234ac:	880b883a 	mov	r5,r17
   234b0:	1027883a 	mov	r19,r2
   234b4:	1825883a 	mov	r18,r3
   234b8:	002b94c0 	call	2b94c <__ledf2>
   234bc:	10000816 	blt	r2,zero,234e0 <_dtoa_r+0x948>
   234c0:	980d883a 	mov	r6,r19
   234c4:	900f883a 	mov	r7,r18
   234c8:	8009883a 	mov	r4,r16
   234cc:	880b883a 	mov	r5,r17
   234d0:	002b7e80 	call	2b7e8 <__eqdf2>
   234d4:	103f5a1e 	bne	r2,zero,23240 <__alt_data_end+0xfffe3240>
   234d8:	ad40004c 	andi	r21,r21,1
   234dc:	a83f5826 	beq	r21,zero,23240 <__alt_data_end+0xfffe3240>
   234e0:	bd3fffc3 	ldbu	r20,-1(r23)
   234e4:	b8bfffc4 	addi	r2,r23,-1
   234e8:	1007883a 	mov	r3,r2
   234ec:	01400e44 	movi	r5,57
   234f0:	d9800717 	ldw	r6,28(sp)
   234f4:	00000506 	br	2350c <_dtoa_r+0x974>
   234f8:	18ffffc4 	addi	r3,r3,-1
   234fc:	11824726 	beq	r2,r6,23e1c <_dtoa_r+0x1284>
   23500:	1d000003 	ldbu	r20,0(r3)
   23504:	102f883a 	mov	r23,r2
   23508:	10bfffc4 	addi	r2,r2,-1
   2350c:	a1003fcc 	andi	r4,r20,255
   23510:	2100201c 	xori	r4,r4,128
   23514:	213fe004 	addi	r4,r4,-128
   23518:	217ff726 	beq	r4,r5,234f8 <__alt_data_end+0xfffe34f8>
   2351c:	a2000044 	addi	r8,r20,1
   23520:	12000005 	stb	r8,0(r2)
   23524:	003f4606 	br	23240 <__alt_data_end+0xfffe3240>
   23528:	d9000b17 	ldw	r4,44(sp)
   2352c:	2000c826 	beq	r4,zero,23850 <_dtoa_r+0xcb8>
   23530:	d9800317 	ldw	r6,12(sp)
   23534:	00c00044 	movi	r3,1
   23538:	1980f90e 	bge	r3,r6,23920 <_dtoa_r+0xd88>
   2353c:	d8800617 	ldw	r2,24(sp)
   23540:	d8c00a17 	ldw	r3,40(sp)
   23544:	157fffc4 	addi	r21,r2,-1
   23548:	1d41f316 	blt	r3,r21,23d18 <_dtoa_r+0x1180>
   2354c:	1d6bc83a 	sub	r21,r3,r21
   23550:	d9c00617 	ldw	r7,24(sp)
   23554:	3802aa16 	blt	r7,zero,24000 <_dtoa_r+0x1468>
   23558:	dd000817 	ldw	r20,32(sp)
   2355c:	d8800617 	ldw	r2,24(sp)
   23560:	d8c00817 	ldw	r3,32(sp)
   23564:	01400044 	movi	r5,1
   23568:	e009883a 	mov	r4,fp
   2356c:	1887883a 	add	r3,r3,r2
   23570:	d8c00815 	stw	r3,32(sp)
   23574:	b0ad883a 	add	r22,r22,r2
   23578:	00266400 	call	26640 <__i2b>
   2357c:	1023883a 	mov	r17,r2
   23580:	a0000826 	beq	r20,zero,235a4 <_dtoa_r+0xa0c>
   23584:	0580070e 	bge	zero,r22,235a4 <_dtoa_r+0xa0c>
   23588:	a005883a 	mov	r2,r20
   2358c:	b500b916 	blt	r22,r20,23874 <_dtoa_r+0xcdc>
   23590:	d9000817 	ldw	r4,32(sp)
   23594:	a0a9c83a 	sub	r20,r20,r2
   23598:	b0adc83a 	sub	r22,r22,r2
   2359c:	2089c83a 	sub	r4,r4,r2
   235a0:	d9000815 	stw	r4,32(sp)
   235a4:	d9800a17 	ldw	r6,40(sp)
   235a8:	0181810e 	bge	zero,r6,23bb0 <_dtoa_r+0x1018>
   235ac:	d9c00b17 	ldw	r7,44(sp)
   235b0:	3800b326 	beq	r7,zero,23880 <_dtoa_r+0xce8>
   235b4:	a800b226 	beq	r21,zero,23880 <_dtoa_r+0xce8>
   235b8:	880b883a 	mov	r5,r17
   235bc:	a80d883a 	mov	r6,r21
   235c0:	e009883a 	mov	r4,fp
   235c4:	00268740 	call	26874 <__pow5mult>
   235c8:	d9800917 	ldw	r6,36(sp)
   235cc:	100b883a 	mov	r5,r2
   235d0:	e009883a 	mov	r4,fp
   235d4:	1023883a 	mov	r17,r2
   235d8:	002667c0 	call	2667c <__multiply>
   235dc:	1021883a 	mov	r16,r2
   235e0:	d8800a17 	ldw	r2,40(sp)
   235e4:	d9400917 	ldw	r5,36(sp)
   235e8:	e009883a 	mov	r4,fp
   235ec:	1545c83a 	sub	r2,r2,r21
   235f0:	d8800a15 	stw	r2,40(sp)
   235f4:	00262dc0 	call	262dc <_Bfree>
   235f8:	d8c00a17 	ldw	r3,40(sp)
   235fc:	18009f1e 	bne	r3,zero,2387c <_dtoa_r+0xce4>
   23600:	05c00044 	movi	r23,1
   23604:	e009883a 	mov	r4,fp
   23608:	b80b883a 	mov	r5,r23
   2360c:	00266400 	call	26640 <__i2b>
   23610:	d9000d17 	ldw	r4,52(sp)
   23614:	102b883a 	mov	r21,r2
   23618:	2000ce26 	beq	r4,zero,23954 <_dtoa_r+0xdbc>
   2361c:	200d883a 	mov	r6,r4
   23620:	100b883a 	mov	r5,r2
   23624:	e009883a 	mov	r4,fp
   23628:	00268740 	call	26874 <__pow5mult>
   2362c:	d9800317 	ldw	r6,12(sp)
   23630:	102b883a 	mov	r21,r2
   23634:	b981810e 	bge	r23,r6,23c3c <_dtoa_r+0x10a4>
   23638:	0027883a 	mov	r19,zero
   2363c:	a8800417 	ldw	r2,16(r21)
   23640:	05c00804 	movi	r23,32
   23644:	10800104 	addi	r2,r2,4
   23648:	1085883a 	add	r2,r2,r2
   2364c:	1085883a 	add	r2,r2,r2
   23650:	a885883a 	add	r2,r21,r2
   23654:	11000017 	ldw	r4,0(r2)
   23658:	00265280 	call	26528 <__hi0bits>
   2365c:	b885c83a 	sub	r2,r23,r2
   23660:	1585883a 	add	r2,r2,r22
   23664:	108007cc 	andi	r2,r2,31
   23668:	1000b326 	beq	r2,zero,23938 <_dtoa_r+0xda0>
   2366c:	00c00804 	movi	r3,32
   23670:	1887c83a 	sub	r3,r3,r2
   23674:	01000104 	movi	r4,4
   23678:	20c2cd0e 	bge	r4,r3,241b0 <_dtoa_r+0x1618>
   2367c:	00c00704 	movi	r3,28
   23680:	1885c83a 	sub	r2,r3,r2
   23684:	d8c00817 	ldw	r3,32(sp)
   23688:	a0a9883a 	add	r20,r20,r2
   2368c:	b0ad883a 	add	r22,r22,r2
   23690:	1887883a 	add	r3,r3,r2
   23694:	d8c00815 	stw	r3,32(sp)
   23698:	d9800817 	ldw	r6,32(sp)
   2369c:	0180040e 	bge	zero,r6,236b0 <_dtoa_r+0xb18>
   236a0:	800b883a 	mov	r5,r16
   236a4:	e009883a 	mov	r4,fp
   236a8:	00269b40 	call	269b4 <__lshift>
   236ac:	1021883a 	mov	r16,r2
   236b0:	0580050e 	bge	zero,r22,236c8 <_dtoa_r+0xb30>
   236b4:	a80b883a 	mov	r5,r21
   236b8:	b00d883a 	mov	r6,r22
   236bc:	e009883a 	mov	r4,fp
   236c0:	00269b40 	call	269b4 <__lshift>
   236c4:	102b883a 	mov	r21,r2
   236c8:	d9c00e17 	ldw	r7,56(sp)
   236cc:	3801211e 	bne	r7,zero,23b54 <_dtoa_r+0xfbc>
   236d0:	d9800617 	ldw	r6,24(sp)
   236d4:	0181380e 	bge	zero,r6,23bb8 <_dtoa_r+0x1020>
   236d8:	d8c00b17 	ldw	r3,44(sp)
   236dc:	1800ab1e 	bne	r3,zero,2398c <_dtoa_r+0xdf4>
   236e0:	dc800717 	ldw	r18,28(sp)
   236e4:	dcc00617 	ldw	r19,24(sp)
   236e8:	9029883a 	mov	r20,r18
   236ec:	00000206 	br	236f8 <_dtoa_r+0xb60>
   236f0:	00263040 	call	26304 <__multadd>
   236f4:	1021883a 	mov	r16,r2
   236f8:	a80b883a 	mov	r5,r21
   236fc:	8009883a 	mov	r4,r16
   23700:	00229980 	call	22998 <quorem>
   23704:	10800c04 	addi	r2,r2,48
   23708:	90800005 	stb	r2,0(r18)
   2370c:	94800044 	addi	r18,r18,1
   23710:	9507c83a 	sub	r3,r18,r20
   23714:	000f883a 	mov	r7,zero
   23718:	01800284 	movi	r6,10
   2371c:	800b883a 	mov	r5,r16
   23720:	e009883a 	mov	r4,fp
   23724:	1cfff216 	blt	r3,r19,236f0 <__alt_data_end+0xfffe36f0>
   23728:	1011883a 	mov	r8,r2
   2372c:	d8800617 	ldw	r2,24(sp)
   23730:	0082370e 	bge	zero,r2,24010 <_dtoa_r+0x1478>
   23734:	d9000717 	ldw	r4,28(sp)
   23738:	0025883a 	mov	r18,zero
   2373c:	20af883a 	add	r23,r4,r2
   23740:	01800044 	movi	r6,1
   23744:	800b883a 	mov	r5,r16
   23748:	e009883a 	mov	r4,fp
   2374c:	da001715 	stw	r8,92(sp)
   23750:	00269b40 	call	269b4 <__lshift>
   23754:	a80b883a 	mov	r5,r21
   23758:	1009883a 	mov	r4,r2
   2375c:	d8800915 	stw	r2,36(sp)
   23760:	0026afc0 	call	26afc <__mcmp>
   23764:	da001717 	ldw	r8,92(sp)
   23768:	0081800e 	bge	zero,r2,23d6c <_dtoa_r+0x11d4>
   2376c:	b93fffc3 	ldbu	r4,-1(r23)
   23770:	b8bfffc4 	addi	r2,r23,-1
   23774:	1007883a 	mov	r3,r2
   23778:	01800e44 	movi	r6,57
   2377c:	d9c00717 	ldw	r7,28(sp)
   23780:	00000506 	br	23798 <_dtoa_r+0xc00>
   23784:	18ffffc4 	addi	r3,r3,-1
   23788:	11c12326 	beq	r2,r7,23c18 <_dtoa_r+0x1080>
   2378c:	19000003 	ldbu	r4,0(r3)
   23790:	102f883a 	mov	r23,r2
   23794:	10bfffc4 	addi	r2,r2,-1
   23798:	21403fcc 	andi	r5,r4,255
   2379c:	2940201c 	xori	r5,r5,128
   237a0:	297fe004 	addi	r5,r5,-128
   237a4:	29bff726 	beq	r5,r6,23784 <__alt_data_end+0xfffe3784>
   237a8:	21000044 	addi	r4,r4,1
   237ac:	11000005 	stb	r4,0(r2)
   237b0:	a80b883a 	mov	r5,r21
   237b4:	e009883a 	mov	r4,fp
   237b8:	00262dc0 	call	262dc <_Bfree>
   237bc:	883ea026 	beq	r17,zero,23240 <__alt_data_end+0xfffe3240>
   237c0:	90000426 	beq	r18,zero,237d4 <_dtoa_r+0xc3c>
   237c4:	94400326 	beq	r18,r17,237d4 <_dtoa_r+0xc3c>
   237c8:	900b883a 	mov	r5,r18
   237cc:	e009883a 	mov	r4,fp
   237d0:	00262dc0 	call	262dc <_Bfree>
   237d4:	880b883a 	mov	r5,r17
   237d8:	e009883a 	mov	r4,fp
   237dc:	00262dc0 	call	262dc <_Bfree>
   237e0:	003e9706 	br	23240 <__alt_data_end+0xfffe3240>
   237e4:	01800044 	movi	r6,1
   237e8:	d9800e15 	stw	r6,56(sp)
   237ec:	003d9606 	br	22e48 <__alt_data_end+0xfffe2e48>
   237f0:	d8800817 	ldw	r2,32(sp)
   237f4:	d8c00517 	ldw	r3,20(sp)
   237f8:	d8000d15 	stw	zero,52(sp)
   237fc:	10c5c83a 	sub	r2,r2,r3
   23800:	00c9c83a 	sub	r4,zero,r3
   23804:	d8800815 	stw	r2,32(sp)
   23808:	d9000a15 	stw	r4,40(sp)
   2380c:	003d9706 	br	22e6c <__alt_data_end+0xfffe2e6c>
   23810:	05adc83a 	sub	r22,zero,r22
   23814:	dd800815 	stw	r22,32(sp)
   23818:	002d883a 	mov	r22,zero
   2381c:	003d8e06 	br	22e58 <__alt_data_end+0xfffe2e58>
   23820:	d9000517 	ldw	r4,20(sp)
   23824:	002cad40 	call	2cad4 <__floatsidf>
   23828:	100d883a 	mov	r6,r2
   2382c:	180f883a 	mov	r7,r3
   23830:	a009883a 	mov	r4,r20
   23834:	880b883a 	mov	r5,r17
   23838:	002b7e80 	call	2b7e8 <__eqdf2>
   2383c:	103d7126 	beq	r2,zero,22e04 <__alt_data_end+0xfffe2e04>
   23840:	d9c00517 	ldw	r7,20(sp)
   23844:	39ffffc4 	addi	r7,r7,-1
   23848:	d9c00515 	stw	r7,20(sp)
   2384c:	003d6d06 	br	22e04 <__alt_data_end+0xfffe2e04>
   23850:	dd400a17 	ldw	r21,40(sp)
   23854:	dd000817 	ldw	r20,32(sp)
   23858:	0023883a 	mov	r17,zero
   2385c:	003f4806 	br	23580 <__alt_data_end+0xfffe3580>
   23860:	10e3c83a 	sub	r17,r2,r3
   23864:	9448983a 	sll	r4,r18,r17
   23868:	003d3206 	br	22d34 <__alt_data_end+0xfffe2d34>
   2386c:	d8000e15 	stw	zero,56(sp)
   23870:	003d7506 	br	22e48 <__alt_data_end+0xfffe2e48>
   23874:	b005883a 	mov	r2,r22
   23878:	003f4506 	br	23590 <__alt_data_end+0xfffe3590>
   2387c:	dc000915 	stw	r16,36(sp)
   23880:	d9800a17 	ldw	r6,40(sp)
   23884:	d9400917 	ldw	r5,36(sp)
   23888:	e009883a 	mov	r4,fp
   2388c:	00268740 	call	26874 <__pow5mult>
   23890:	1021883a 	mov	r16,r2
   23894:	003f5a06 	br	23600 <__alt_data_end+0xfffe3600>
   23898:	01c00044 	movi	r7,1
   2389c:	d9c00b15 	stw	r7,44(sp)
   238a0:	d8802217 	ldw	r2,136(sp)
   238a4:	0081280e 	bge	zero,r2,23d48 <_dtoa_r+0x11b0>
   238a8:	100d883a 	mov	r6,r2
   238ac:	1021883a 	mov	r16,r2
   238b0:	d8800c15 	stw	r2,48(sp)
   238b4:	d8800615 	stw	r2,24(sp)
   238b8:	003d8806 	br	22edc <__alt_data_end+0xfffe2edc>
   238bc:	d8800617 	ldw	r2,24(sp)
   238c0:	00be9b16 	blt	zero,r2,23330 <__alt_data_end+0xfffe3330>
   238c4:	10010f1e 	bne	r2,zero,23d04 <_dtoa_r+0x116c>
   238c8:	880b883a 	mov	r5,r17
   238cc:	000d883a 	mov	r6,zero
   238d0:	01d00534 	movhi	r7,16404
   238d4:	8009883a 	mov	r4,r16
   238d8:	002ba400 	call	2ba40 <__muldf3>
   238dc:	900d883a 	mov	r6,r18
   238e0:	980f883a 	mov	r7,r19
   238e4:	1009883a 	mov	r4,r2
   238e8:	180b883a 	mov	r5,r3
   238ec:	002b8700 	call	2b870 <__gedf2>
   238f0:	002b883a 	mov	r21,zero
   238f4:	0023883a 	mov	r17,zero
   238f8:	1000bf16 	blt	r2,zero,23bf8 <_dtoa_r+0x1060>
   238fc:	d9802217 	ldw	r6,136(sp)
   23900:	ddc00717 	ldw	r23,28(sp)
   23904:	018c303a 	nor	r6,zero,r6
   23908:	d9800515 	stw	r6,20(sp)
   2390c:	a80b883a 	mov	r5,r21
   23910:	e009883a 	mov	r4,fp
   23914:	00262dc0 	call	262dc <_Bfree>
   23918:	883e4926 	beq	r17,zero,23240 <__alt_data_end+0xfffe3240>
   2391c:	003fad06 	br	237d4 <__alt_data_end+0xfffe37d4>
   23920:	d9c01117 	ldw	r7,68(sp)
   23924:	3801bc26 	beq	r7,zero,24018 <_dtoa_r+0x1480>
   23928:	10810cc4 	addi	r2,r2,1075
   2392c:	dd400a17 	ldw	r21,40(sp)
   23930:	dd000817 	ldw	r20,32(sp)
   23934:	003f0a06 	br	23560 <__alt_data_end+0xfffe3560>
   23938:	00800704 	movi	r2,28
   2393c:	d9000817 	ldw	r4,32(sp)
   23940:	a0a9883a 	add	r20,r20,r2
   23944:	b0ad883a 	add	r22,r22,r2
   23948:	2089883a 	add	r4,r4,r2
   2394c:	d9000815 	stw	r4,32(sp)
   23950:	003f5106 	br	23698 <__alt_data_end+0xfffe3698>
   23954:	d8c00317 	ldw	r3,12(sp)
   23958:	b8c1fc0e 	bge	r23,r3,2414c <_dtoa_r+0x15b4>
   2395c:	0027883a 	mov	r19,zero
   23960:	b805883a 	mov	r2,r23
   23964:	003f3e06 	br	23660 <__alt_data_end+0xfffe3660>
   23968:	880b883a 	mov	r5,r17
   2396c:	e009883a 	mov	r4,fp
   23970:	000f883a 	mov	r7,zero
   23974:	01800284 	movi	r6,10
   23978:	00263040 	call	26304 <__multadd>
   2397c:	d9000c17 	ldw	r4,48(sp)
   23980:	1023883a 	mov	r17,r2
   23984:	0102040e 	bge	zero,r4,24198 <_dtoa_r+0x1600>
   23988:	d9000615 	stw	r4,24(sp)
   2398c:	0500050e 	bge	zero,r20,239a4 <_dtoa_r+0xe0c>
   23990:	880b883a 	mov	r5,r17
   23994:	a00d883a 	mov	r6,r20
   23998:	e009883a 	mov	r4,fp
   2399c:	00269b40 	call	269b4 <__lshift>
   239a0:	1023883a 	mov	r17,r2
   239a4:	9801241e 	bne	r19,zero,23e38 <_dtoa_r+0x12a0>
   239a8:	8829883a 	mov	r20,r17
   239ac:	d9000617 	ldw	r4,24(sp)
   239b0:	dcc00717 	ldw	r19,28(sp)
   239b4:	9480004c 	andi	r18,r18,1
   239b8:	20bfffc4 	addi	r2,r4,-1
   239bc:	9885883a 	add	r2,r19,r2
   239c0:	d8800415 	stw	r2,16(sp)
   239c4:	dc800615 	stw	r18,24(sp)
   239c8:	a80b883a 	mov	r5,r21
   239cc:	8009883a 	mov	r4,r16
   239d0:	00229980 	call	22998 <quorem>
   239d4:	880b883a 	mov	r5,r17
   239d8:	8009883a 	mov	r4,r16
   239dc:	102f883a 	mov	r23,r2
   239e0:	0026afc0 	call	26afc <__mcmp>
   239e4:	a80b883a 	mov	r5,r21
   239e8:	a00d883a 	mov	r6,r20
   239ec:	e009883a 	mov	r4,fp
   239f0:	102d883a 	mov	r22,r2
   239f4:	0026b5c0 	call	26b5c <__mdiff>
   239f8:	1007883a 	mov	r3,r2
   239fc:	10800317 	ldw	r2,12(r2)
   23a00:	bc800c04 	addi	r18,r23,48
   23a04:	180b883a 	mov	r5,r3
   23a08:	10004e1e 	bne	r2,zero,23b44 <_dtoa_r+0xfac>
   23a0c:	8009883a 	mov	r4,r16
   23a10:	d8c01615 	stw	r3,88(sp)
   23a14:	0026afc0 	call	26afc <__mcmp>
   23a18:	d8c01617 	ldw	r3,88(sp)
   23a1c:	e009883a 	mov	r4,fp
   23a20:	d8801615 	stw	r2,88(sp)
   23a24:	180b883a 	mov	r5,r3
   23a28:	00262dc0 	call	262dc <_Bfree>
   23a2c:	d8801617 	ldw	r2,88(sp)
   23a30:	1000041e 	bne	r2,zero,23a44 <_dtoa_r+0xeac>
   23a34:	d9800317 	ldw	r6,12(sp)
   23a38:	3000021e 	bne	r6,zero,23a44 <_dtoa_r+0xeac>
   23a3c:	d8c00617 	ldw	r3,24(sp)
   23a40:	18003726 	beq	r3,zero,23b20 <_dtoa_r+0xf88>
   23a44:	b0002016 	blt	r22,zero,23ac8 <_dtoa_r+0xf30>
   23a48:	b000041e 	bne	r22,zero,23a5c <_dtoa_r+0xec4>
   23a4c:	d9000317 	ldw	r4,12(sp)
   23a50:	2000021e 	bne	r4,zero,23a5c <_dtoa_r+0xec4>
   23a54:	d8c00617 	ldw	r3,24(sp)
   23a58:	18001b26 	beq	r3,zero,23ac8 <_dtoa_r+0xf30>
   23a5c:	00810716 	blt	zero,r2,23e7c <_dtoa_r+0x12e4>
   23a60:	d8c00417 	ldw	r3,16(sp)
   23a64:	9d800044 	addi	r22,r19,1
   23a68:	9c800005 	stb	r18,0(r19)
   23a6c:	b02f883a 	mov	r23,r22
   23a70:	98c10626 	beq	r19,r3,23e8c <_dtoa_r+0x12f4>
   23a74:	800b883a 	mov	r5,r16
   23a78:	000f883a 	mov	r7,zero
   23a7c:	01800284 	movi	r6,10
   23a80:	e009883a 	mov	r4,fp
   23a84:	00263040 	call	26304 <__multadd>
   23a88:	1021883a 	mov	r16,r2
   23a8c:	000f883a 	mov	r7,zero
   23a90:	01800284 	movi	r6,10
   23a94:	880b883a 	mov	r5,r17
   23a98:	e009883a 	mov	r4,fp
   23a9c:	8d002526 	beq	r17,r20,23b34 <_dtoa_r+0xf9c>
   23aa0:	00263040 	call	26304 <__multadd>
   23aa4:	a00b883a 	mov	r5,r20
   23aa8:	000f883a 	mov	r7,zero
   23aac:	01800284 	movi	r6,10
   23ab0:	e009883a 	mov	r4,fp
   23ab4:	1023883a 	mov	r17,r2
   23ab8:	00263040 	call	26304 <__multadd>
   23abc:	1029883a 	mov	r20,r2
   23ac0:	b027883a 	mov	r19,r22
   23ac4:	003fc006 	br	239c8 <__alt_data_end+0xfffe39c8>
   23ac8:	9011883a 	mov	r8,r18
   23acc:	00800e0e 	bge	zero,r2,23b08 <_dtoa_r+0xf70>
   23ad0:	800b883a 	mov	r5,r16
   23ad4:	01800044 	movi	r6,1
   23ad8:	e009883a 	mov	r4,fp
   23adc:	da001715 	stw	r8,92(sp)
   23ae0:	00269b40 	call	269b4 <__lshift>
   23ae4:	a80b883a 	mov	r5,r21
   23ae8:	1009883a 	mov	r4,r2
   23aec:	1021883a 	mov	r16,r2
   23af0:	0026afc0 	call	26afc <__mcmp>
   23af4:	da001717 	ldw	r8,92(sp)
   23af8:	0081960e 	bge	zero,r2,24154 <_dtoa_r+0x15bc>
   23afc:	00800e44 	movi	r2,57
   23b00:	40817026 	beq	r8,r2,240c4 <_dtoa_r+0x152c>
   23b04:	ba000c44 	addi	r8,r23,49
   23b08:	8825883a 	mov	r18,r17
   23b0c:	9dc00044 	addi	r23,r19,1
   23b10:	9a000005 	stb	r8,0(r19)
   23b14:	a023883a 	mov	r17,r20
   23b18:	dc000915 	stw	r16,36(sp)
   23b1c:	003f2406 	br	237b0 <__alt_data_end+0xfffe37b0>
   23b20:	00800e44 	movi	r2,57
   23b24:	9011883a 	mov	r8,r18
   23b28:	90816626 	beq	r18,r2,240c4 <_dtoa_r+0x152c>
   23b2c:	05bff516 	blt	zero,r22,23b04 <__alt_data_end+0xfffe3b04>
   23b30:	003ff506 	br	23b08 <__alt_data_end+0xfffe3b08>
   23b34:	00263040 	call	26304 <__multadd>
   23b38:	1023883a 	mov	r17,r2
   23b3c:	1029883a 	mov	r20,r2
   23b40:	003fdf06 	br	23ac0 <__alt_data_end+0xfffe3ac0>
   23b44:	e009883a 	mov	r4,fp
   23b48:	00262dc0 	call	262dc <_Bfree>
   23b4c:	00800044 	movi	r2,1
   23b50:	003fbc06 	br	23a44 <__alt_data_end+0xfffe3a44>
   23b54:	a80b883a 	mov	r5,r21
   23b58:	8009883a 	mov	r4,r16
   23b5c:	0026afc0 	call	26afc <__mcmp>
   23b60:	103edb0e 	bge	r2,zero,236d0 <__alt_data_end+0xfffe36d0>
   23b64:	800b883a 	mov	r5,r16
   23b68:	000f883a 	mov	r7,zero
   23b6c:	01800284 	movi	r6,10
   23b70:	e009883a 	mov	r4,fp
   23b74:	00263040 	call	26304 <__multadd>
   23b78:	1021883a 	mov	r16,r2
   23b7c:	d8800517 	ldw	r2,20(sp)
   23b80:	d8c00b17 	ldw	r3,44(sp)
   23b84:	10bfffc4 	addi	r2,r2,-1
   23b88:	d8800515 	stw	r2,20(sp)
   23b8c:	183f761e 	bne	r3,zero,23968 <__alt_data_end+0xfffe3968>
   23b90:	d9000c17 	ldw	r4,48(sp)
   23b94:	0101730e 	bge	zero,r4,24164 <_dtoa_r+0x15cc>
   23b98:	d9000615 	stw	r4,24(sp)
   23b9c:	003ed006 	br	236e0 <__alt_data_end+0xfffe36e0>
   23ba0:	00800084 	movi	r2,2
   23ba4:	3081861e 	bne	r6,r2,241c0 <_dtoa_r+0x1628>
   23ba8:	d8000b15 	stw	zero,44(sp)
   23bac:	003f3c06 	br	238a0 <__alt_data_end+0xfffe38a0>
   23bb0:	dc000917 	ldw	r16,36(sp)
   23bb4:	003e9206 	br	23600 <__alt_data_end+0xfffe3600>
   23bb8:	d9c00317 	ldw	r7,12(sp)
   23bbc:	00800084 	movi	r2,2
   23bc0:	11fec50e 	bge	r2,r7,236d8 <__alt_data_end+0xfffe36d8>
   23bc4:	d9000617 	ldw	r4,24(sp)
   23bc8:	20013c1e 	bne	r4,zero,240bc <_dtoa_r+0x1524>
   23bcc:	a80b883a 	mov	r5,r21
   23bd0:	000f883a 	mov	r7,zero
   23bd4:	01800144 	movi	r6,5
   23bd8:	e009883a 	mov	r4,fp
   23bdc:	00263040 	call	26304 <__multadd>
   23be0:	100b883a 	mov	r5,r2
   23be4:	8009883a 	mov	r4,r16
   23be8:	102b883a 	mov	r21,r2
   23bec:	0026afc0 	call	26afc <__mcmp>
   23bf0:	dc000915 	stw	r16,36(sp)
   23bf4:	00bf410e 	bge	zero,r2,238fc <__alt_data_end+0xfffe38fc>
   23bf8:	d9c00717 	ldw	r7,28(sp)
   23bfc:	00800c44 	movi	r2,49
   23c00:	38800005 	stb	r2,0(r7)
   23c04:	d8800517 	ldw	r2,20(sp)
   23c08:	3dc00044 	addi	r23,r7,1
   23c0c:	10800044 	addi	r2,r2,1
   23c10:	d8800515 	stw	r2,20(sp)
   23c14:	003f3d06 	br	2390c <__alt_data_end+0xfffe390c>
   23c18:	d9800517 	ldw	r6,20(sp)
   23c1c:	d9c00717 	ldw	r7,28(sp)
   23c20:	00800c44 	movi	r2,49
   23c24:	31800044 	addi	r6,r6,1
   23c28:	d9800515 	stw	r6,20(sp)
   23c2c:	38800005 	stb	r2,0(r7)
   23c30:	003edf06 	br	237b0 <__alt_data_end+0xfffe37b0>
   23c34:	d8000b15 	stw	zero,44(sp)
   23c38:	003c9f06 	br	22eb8 <__alt_data_end+0xfffe2eb8>
   23c3c:	903e7e1e 	bne	r18,zero,23638 <__alt_data_end+0xfffe3638>
   23c40:	00800434 	movhi	r2,16
   23c44:	10bfffc4 	addi	r2,r2,-1
   23c48:	9884703a 	and	r2,r19,r2
   23c4c:	1000ea1e 	bne	r2,zero,23ff8 <_dtoa_r+0x1460>
   23c50:	9cdffc2c 	andhi	r19,r19,32752
   23c54:	9800e826 	beq	r19,zero,23ff8 <_dtoa_r+0x1460>
   23c58:	d9c00817 	ldw	r7,32(sp)
   23c5c:	b5800044 	addi	r22,r22,1
   23c60:	04c00044 	movi	r19,1
   23c64:	39c00044 	addi	r7,r7,1
   23c68:	d9c00815 	stw	r7,32(sp)
   23c6c:	d8800d17 	ldw	r2,52(sp)
   23c70:	103e721e 	bne	r2,zero,2363c <__alt_data_end+0xfffe363c>
   23c74:	00800044 	movi	r2,1
   23c78:	003e7906 	br	23660 <__alt_data_end+0xfffe3660>
   23c7c:	8009883a 	mov	r4,r16
   23c80:	002cad40 	call	2cad4 <__floatsidf>
   23c84:	d9800f17 	ldw	r6,60(sp)
   23c88:	d9c01017 	ldw	r7,64(sp)
   23c8c:	1009883a 	mov	r4,r2
   23c90:	180b883a 	mov	r5,r3
   23c94:	002ba400 	call	2ba40 <__muldf3>
   23c98:	000d883a 	mov	r6,zero
   23c9c:	01d00734 	movhi	r7,16412
   23ca0:	1009883a 	mov	r4,r2
   23ca4:	180b883a 	mov	r5,r3
   23ca8:	002a6540 	call	2a654 <__adddf3>
   23cac:	047f3034 	movhi	r17,64704
   23cb0:	1021883a 	mov	r16,r2
   23cb4:	1c63883a 	add	r17,r3,r17
   23cb8:	d9000f17 	ldw	r4,60(sp)
   23cbc:	d9401017 	ldw	r5,64(sp)
   23cc0:	000d883a 	mov	r6,zero
   23cc4:	01d00534 	movhi	r7,16404
   23cc8:	002c1580 	call	2c158 <__subdf3>
   23ccc:	800d883a 	mov	r6,r16
   23cd0:	880f883a 	mov	r7,r17
   23cd4:	1009883a 	mov	r4,r2
   23cd8:	180b883a 	mov	r5,r3
   23cdc:	102b883a 	mov	r21,r2
   23ce0:	1829883a 	mov	r20,r3
   23ce4:	002b8700 	call	2b870 <__gedf2>
   23ce8:	00806c16 	blt	zero,r2,23e9c <_dtoa_r+0x1304>
   23cec:	89e0003c 	xorhi	r7,r17,32768
   23cf0:	800d883a 	mov	r6,r16
   23cf4:	a809883a 	mov	r4,r21
   23cf8:	a00b883a 	mov	r5,r20
   23cfc:	002b94c0 	call	2b94c <__ledf2>
   23d00:	103d7e0e 	bge	r2,zero,232fc <__alt_data_end+0xfffe32fc>
   23d04:	002b883a 	mov	r21,zero
   23d08:	0023883a 	mov	r17,zero
   23d0c:	003efb06 	br	238fc <__alt_data_end+0xfffe38fc>
   23d10:	d8800717 	ldw	r2,28(sp)
   23d14:	003bd006 	br	22c58 <__alt_data_end+0xfffe2c58>
   23d18:	d9000a17 	ldw	r4,40(sp)
   23d1c:	d9800d17 	ldw	r6,52(sp)
   23d20:	dd400a15 	stw	r21,40(sp)
   23d24:	a905c83a 	sub	r2,r21,r4
   23d28:	308d883a 	add	r6,r6,r2
   23d2c:	d9800d15 	stw	r6,52(sp)
   23d30:	002b883a 	mov	r21,zero
   23d34:	003e0606 	br	23550 <__alt_data_end+0xfffe3550>
   23d38:	9023883a 	mov	r17,r18
   23d3c:	9829883a 	mov	r20,r19
   23d40:	04000084 	movi	r16,2
   23d44:	003c9206 	br	22f90 <__alt_data_end+0xfffe2f90>
   23d48:	04000044 	movi	r16,1
   23d4c:	dc000c15 	stw	r16,48(sp)
   23d50:	dc000615 	stw	r16,24(sp)
   23d54:	dc002215 	stw	r16,136(sp)
   23d58:	e0001115 	stw	zero,68(fp)
   23d5c:	000b883a 	mov	r5,zero
   23d60:	003c6906 	br	22f08 <__alt_data_end+0xfffe2f08>
   23d64:	3021883a 	mov	r16,r6
   23d68:	003ffb06 	br	23d58 <__alt_data_end+0xfffe3d58>
   23d6c:	1000021e 	bne	r2,zero,23d78 <_dtoa_r+0x11e0>
   23d70:	4200004c 	andi	r8,r8,1
   23d74:	403e7d1e 	bne	r8,zero,2376c <__alt_data_end+0xfffe376c>
   23d78:	01000c04 	movi	r4,48
   23d7c:	00000106 	br	23d84 <_dtoa_r+0x11ec>
   23d80:	102f883a 	mov	r23,r2
   23d84:	b8bfffc4 	addi	r2,r23,-1
   23d88:	10c00007 	ldb	r3,0(r2)
   23d8c:	193ffc26 	beq	r3,r4,23d80 <__alt_data_end+0xfffe3d80>
   23d90:	003e8706 	br	237b0 <__alt_data_end+0xfffe37b0>
   23d94:	d8800517 	ldw	r2,20(sp)
   23d98:	00a3c83a 	sub	r17,zero,r2
   23d9c:	8800a426 	beq	r17,zero,24030 <_dtoa_r+0x1498>
   23da0:	888003cc 	andi	r2,r17,15
   23da4:	100490fa 	slli	r2,r2,3
   23da8:	00c000f4 	movhi	r3,3
   23dac:	18c2b404 	addi	r3,r3,2768
   23db0:	1885883a 	add	r2,r3,r2
   23db4:	11800017 	ldw	r6,0(r2)
   23db8:	11c00117 	ldw	r7,4(r2)
   23dbc:	9009883a 	mov	r4,r18
   23dc0:	980b883a 	mov	r5,r19
   23dc4:	8823d13a 	srai	r17,r17,4
   23dc8:	002ba400 	call	2ba40 <__muldf3>
   23dcc:	d8800f15 	stw	r2,60(sp)
   23dd0:	d8c01015 	stw	r3,64(sp)
   23dd4:	8800e826 	beq	r17,zero,24178 <_dtoa_r+0x15e0>
   23dd8:	050000f4 	movhi	r20,3
   23ddc:	a502aa04 	addi	r20,r20,2728
   23de0:	04000084 	movi	r16,2
   23de4:	8980004c 	andi	r6,r17,1
   23de8:	1009883a 	mov	r4,r2
   23dec:	8823d07a 	srai	r17,r17,1
   23df0:	180b883a 	mov	r5,r3
   23df4:	30000426 	beq	r6,zero,23e08 <_dtoa_r+0x1270>
   23df8:	a1800017 	ldw	r6,0(r20)
   23dfc:	a1c00117 	ldw	r7,4(r20)
   23e00:	84000044 	addi	r16,r16,1
   23e04:	002ba400 	call	2ba40 <__muldf3>
   23e08:	a5000204 	addi	r20,r20,8
   23e0c:	883ff51e 	bne	r17,zero,23de4 <__alt_data_end+0xfffe3de4>
   23e10:	d8800f15 	stw	r2,60(sp)
   23e14:	d8c01015 	stw	r3,64(sp)
   23e18:	003c7606 	br	22ff4 <__alt_data_end+0xfffe2ff4>
   23e1c:	00c00c04 	movi	r3,48
   23e20:	10c00005 	stb	r3,0(r2)
   23e24:	d8c00517 	ldw	r3,20(sp)
   23e28:	bd3fffc3 	ldbu	r20,-1(r23)
   23e2c:	18c00044 	addi	r3,r3,1
   23e30:	d8c00515 	stw	r3,20(sp)
   23e34:	003db906 	br	2351c <__alt_data_end+0xfffe351c>
   23e38:	89400117 	ldw	r5,4(r17)
   23e3c:	e009883a 	mov	r4,fp
   23e40:	00262340 	call	26234 <_Balloc>
   23e44:	89800417 	ldw	r6,16(r17)
   23e48:	89400304 	addi	r5,r17,12
   23e4c:	11000304 	addi	r4,r2,12
   23e50:	31800084 	addi	r6,r6,2
   23e54:	318d883a 	add	r6,r6,r6
   23e58:	318d883a 	add	r6,r6,r6
   23e5c:	1027883a 	mov	r19,r2
   23e60:	0025e680 	call	25e68 <memcpy>
   23e64:	01800044 	movi	r6,1
   23e68:	980b883a 	mov	r5,r19
   23e6c:	e009883a 	mov	r4,fp
   23e70:	00269b40 	call	269b4 <__lshift>
   23e74:	1029883a 	mov	r20,r2
   23e78:	003ecc06 	br	239ac <__alt_data_end+0xfffe39ac>
   23e7c:	00800e44 	movi	r2,57
   23e80:	90809026 	beq	r18,r2,240c4 <_dtoa_r+0x152c>
   23e84:	92000044 	addi	r8,r18,1
   23e88:	003f1f06 	br	23b08 <__alt_data_end+0xfffe3b08>
   23e8c:	9011883a 	mov	r8,r18
   23e90:	8825883a 	mov	r18,r17
   23e94:	a023883a 	mov	r17,r20
   23e98:	003e2906 	br	23740 <__alt_data_end+0xfffe3740>
   23e9c:	002b883a 	mov	r21,zero
   23ea0:	0023883a 	mov	r17,zero
   23ea4:	003f5406 	br	23bf8 <__alt_data_end+0xfffe3bf8>
   23ea8:	61bfffc4 	addi	r6,r12,-1
   23eac:	300490fa 	slli	r2,r6,3
   23eb0:	00c000f4 	movhi	r3,3
   23eb4:	18c2b404 	addi	r3,r3,2768
   23eb8:	1885883a 	add	r2,r3,r2
   23ebc:	11000017 	ldw	r4,0(r2)
   23ec0:	11400117 	ldw	r5,4(r2)
   23ec4:	d8800717 	ldw	r2,28(sp)
   23ec8:	880f883a 	mov	r7,r17
   23ecc:	d9801215 	stw	r6,72(sp)
   23ed0:	800d883a 	mov	r6,r16
   23ed4:	db001615 	stw	r12,88(sp)
   23ed8:	15c00044 	addi	r23,r2,1
   23edc:	002ba400 	call	2ba40 <__muldf3>
   23ee0:	d9401017 	ldw	r5,64(sp)
   23ee4:	d9000f17 	ldw	r4,60(sp)
   23ee8:	d8c01515 	stw	r3,84(sp)
   23eec:	d8801415 	stw	r2,80(sp)
   23ef0:	002ca540 	call	2ca54 <__fixdfsi>
   23ef4:	1009883a 	mov	r4,r2
   23ef8:	1021883a 	mov	r16,r2
   23efc:	002cad40 	call	2cad4 <__floatsidf>
   23f00:	d9000f17 	ldw	r4,60(sp)
   23f04:	d9401017 	ldw	r5,64(sp)
   23f08:	100d883a 	mov	r6,r2
   23f0c:	180f883a 	mov	r7,r3
   23f10:	002c1580 	call	2c158 <__subdf3>
   23f14:	1829883a 	mov	r20,r3
   23f18:	d8c00717 	ldw	r3,28(sp)
   23f1c:	84000c04 	addi	r16,r16,48
   23f20:	1023883a 	mov	r17,r2
   23f24:	1c000005 	stb	r16,0(r3)
   23f28:	db001617 	ldw	r12,88(sp)
   23f2c:	00800044 	movi	r2,1
   23f30:	60802226 	beq	r12,r2,23fbc <_dtoa_r+0x1424>
   23f34:	d9c00717 	ldw	r7,28(sp)
   23f38:	8805883a 	mov	r2,r17
   23f3c:	b82b883a 	mov	r21,r23
   23f40:	3b19883a 	add	r12,r7,r12
   23f44:	6023883a 	mov	r17,r12
   23f48:	a007883a 	mov	r3,r20
   23f4c:	dc800f15 	stw	r18,60(sp)
   23f50:	000d883a 	mov	r6,zero
   23f54:	01d00934 	movhi	r7,16420
   23f58:	1009883a 	mov	r4,r2
   23f5c:	180b883a 	mov	r5,r3
   23f60:	002ba400 	call	2ba40 <__muldf3>
   23f64:	180b883a 	mov	r5,r3
   23f68:	1009883a 	mov	r4,r2
   23f6c:	1829883a 	mov	r20,r3
   23f70:	1025883a 	mov	r18,r2
   23f74:	002ca540 	call	2ca54 <__fixdfsi>
   23f78:	1009883a 	mov	r4,r2
   23f7c:	1021883a 	mov	r16,r2
   23f80:	002cad40 	call	2cad4 <__floatsidf>
   23f84:	100d883a 	mov	r6,r2
   23f88:	180f883a 	mov	r7,r3
   23f8c:	9009883a 	mov	r4,r18
   23f90:	a00b883a 	mov	r5,r20
   23f94:	84000c04 	addi	r16,r16,48
   23f98:	002c1580 	call	2c158 <__subdf3>
   23f9c:	ad400044 	addi	r21,r21,1
   23fa0:	ac3fffc5 	stb	r16,-1(r21)
   23fa4:	ac7fea1e 	bne	r21,r17,23f50 <__alt_data_end+0xfffe3f50>
   23fa8:	1023883a 	mov	r17,r2
   23fac:	d8801217 	ldw	r2,72(sp)
   23fb0:	dc800f17 	ldw	r18,60(sp)
   23fb4:	1829883a 	mov	r20,r3
   23fb8:	b8af883a 	add	r23,r23,r2
   23fbc:	d9001417 	ldw	r4,80(sp)
   23fc0:	d9401517 	ldw	r5,84(sp)
   23fc4:	000d883a 	mov	r6,zero
   23fc8:	01cff834 	movhi	r7,16352
   23fcc:	002a6540 	call	2a654 <__adddf3>
   23fd0:	880d883a 	mov	r6,r17
   23fd4:	a00f883a 	mov	r7,r20
   23fd8:	1009883a 	mov	r4,r2
   23fdc:	180b883a 	mov	r5,r3
   23fe0:	002b94c0 	call	2b94c <__ledf2>
   23fe4:	10003e0e 	bge	r2,zero,240e0 <_dtoa_r+0x1548>
   23fe8:	d9001317 	ldw	r4,76(sp)
   23fec:	bd3fffc3 	ldbu	r20,-1(r23)
   23ff0:	d9000515 	stw	r4,20(sp)
   23ff4:	003d3b06 	br	234e4 <__alt_data_end+0xfffe34e4>
   23ff8:	0027883a 	mov	r19,zero
   23ffc:	003f1b06 	br	23c6c <__alt_data_end+0xfffe3c6c>
   24000:	d8800817 	ldw	r2,32(sp)
   24004:	11e9c83a 	sub	r20,r2,r7
   24008:	0005883a 	mov	r2,zero
   2400c:	003d5406 	br	23560 <__alt_data_end+0xfffe3560>
   24010:	00800044 	movi	r2,1
   24014:	003dc706 	br	23734 <__alt_data_end+0xfffe3734>
   24018:	d8c00217 	ldw	r3,8(sp)
   2401c:	00800d84 	movi	r2,54
   24020:	dd400a17 	ldw	r21,40(sp)
   24024:	10c5c83a 	sub	r2,r2,r3
   24028:	dd000817 	ldw	r20,32(sp)
   2402c:	003d4c06 	br	23560 <__alt_data_end+0xfffe3560>
   24030:	dc800f15 	stw	r18,60(sp)
   24034:	dcc01015 	stw	r19,64(sp)
   24038:	04000084 	movi	r16,2
   2403c:	003bed06 	br	22ff4 <__alt_data_end+0xfffe2ff4>
   24040:	d9000617 	ldw	r4,24(sp)
   24044:	203f0d26 	beq	r4,zero,23c7c <__alt_data_end+0xfffe3c7c>
   24048:	d9800c17 	ldw	r6,48(sp)
   2404c:	01bcab0e 	bge	zero,r6,232fc <__alt_data_end+0xfffe32fc>
   24050:	d9401017 	ldw	r5,64(sp)
   24054:	d9000f17 	ldw	r4,60(sp)
   24058:	000d883a 	mov	r6,zero
   2405c:	01d00934 	movhi	r7,16420
   24060:	002ba400 	call	2ba40 <__muldf3>
   24064:	81000044 	addi	r4,r16,1
   24068:	d8800f15 	stw	r2,60(sp)
   2406c:	d8c01015 	stw	r3,64(sp)
   24070:	002cad40 	call	2cad4 <__floatsidf>
   24074:	d9800f17 	ldw	r6,60(sp)
   24078:	d9c01017 	ldw	r7,64(sp)
   2407c:	1009883a 	mov	r4,r2
   24080:	180b883a 	mov	r5,r3
   24084:	002ba400 	call	2ba40 <__muldf3>
   24088:	01d00734 	movhi	r7,16412
   2408c:	000d883a 	mov	r6,zero
   24090:	1009883a 	mov	r4,r2
   24094:	180b883a 	mov	r5,r3
   24098:	002a6540 	call	2a654 <__adddf3>
   2409c:	d9c00517 	ldw	r7,20(sp)
   240a0:	047f3034 	movhi	r17,64704
   240a4:	1021883a 	mov	r16,r2
   240a8:	39ffffc4 	addi	r7,r7,-1
   240ac:	d9c01315 	stw	r7,76(sp)
   240b0:	1c63883a 	add	r17,r3,r17
   240b4:	db000c17 	ldw	r12,48(sp)
   240b8:	003bea06 	br	23064 <__alt_data_end+0xfffe3064>
   240bc:	dc000915 	stw	r16,36(sp)
   240c0:	003e0e06 	br	238fc <__alt_data_end+0xfffe38fc>
   240c4:	01000e44 	movi	r4,57
   240c8:	8825883a 	mov	r18,r17
   240cc:	9dc00044 	addi	r23,r19,1
   240d0:	99000005 	stb	r4,0(r19)
   240d4:	a023883a 	mov	r17,r20
   240d8:	dc000915 	stw	r16,36(sp)
   240dc:	003da406 	br	23770 <__alt_data_end+0xfffe3770>
   240e0:	d9801417 	ldw	r6,80(sp)
   240e4:	d9c01517 	ldw	r7,84(sp)
   240e8:	0009883a 	mov	r4,zero
   240ec:	014ff834 	movhi	r5,16352
   240f0:	002c1580 	call	2c158 <__subdf3>
   240f4:	880d883a 	mov	r6,r17
   240f8:	a00f883a 	mov	r7,r20
   240fc:	1009883a 	mov	r4,r2
   24100:	180b883a 	mov	r5,r3
   24104:	002b8700 	call	2b870 <__gedf2>
   24108:	00bc7c0e 	bge	zero,r2,232fc <__alt_data_end+0xfffe32fc>
   2410c:	01000c04 	movi	r4,48
   24110:	00000106 	br	24118 <_dtoa_r+0x1580>
   24114:	102f883a 	mov	r23,r2
   24118:	b8bfffc4 	addi	r2,r23,-1
   2411c:	10c00007 	ldb	r3,0(r2)
   24120:	193ffc26 	beq	r3,r4,24114 <__alt_data_end+0xfffe4114>
   24124:	d9801317 	ldw	r6,76(sp)
   24128:	d9800515 	stw	r6,20(sp)
   2412c:	003c4406 	br	23240 <__alt_data_end+0xfffe3240>
   24130:	d9801317 	ldw	r6,76(sp)
   24134:	d9800515 	stw	r6,20(sp)
   24138:	003cea06 	br	234e4 <__alt_data_end+0xfffe34e4>
   2413c:	dd800f17 	ldw	r22,60(sp)
   24140:	dcc01017 	ldw	r19,64(sp)
   24144:	dc801217 	ldw	r18,72(sp)
   24148:	003c6c06 	br	232fc <__alt_data_end+0xfffe32fc>
   2414c:	903e031e 	bne	r18,zero,2395c <__alt_data_end+0xfffe395c>
   24150:	003ebb06 	br	23c40 <__alt_data_end+0xfffe3c40>
   24154:	103e6c1e 	bne	r2,zero,23b08 <__alt_data_end+0xfffe3b08>
   24158:	4080004c 	andi	r2,r8,1
   2415c:	103e6a26 	beq	r2,zero,23b08 <__alt_data_end+0xfffe3b08>
   24160:	003e6606 	br	23afc <__alt_data_end+0xfffe3afc>
   24164:	d8c00317 	ldw	r3,12(sp)
   24168:	00800084 	movi	r2,2
   2416c:	10c02916 	blt	r2,r3,24214 <_dtoa_r+0x167c>
   24170:	d9000c17 	ldw	r4,48(sp)
   24174:	003e8806 	br	23b98 <__alt_data_end+0xfffe3b98>
   24178:	04000084 	movi	r16,2
   2417c:	003b9d06 	br	22ff4 <__alt_data_end+0xfffe2ff4>
   24180:	d9001317 	ldw	r4,76(sp)
   24184:	d9000515 	stw	r4,20(sp)
   24188:	003cd606 	br	234e4 <__alt_data_end+0xfffe34e4>
   2418c:	d8801317 	ldw	r2,76(sp)
   24190:	d8800515 	stw	r2,20(sp)
   24194:	003c2a06 	br	23240 <__alt_data_end+0xfffe3240>
   24198:	d9800317 	ldw	r6,12(sp)
   2419c:	00800084 	movi	r2,2
   241a0:	11801516 	blt	r2,r6,241f8 <_dtoa_r+0x1660>
   241a4:	d9c00c17 	ldw	r7,48(sp)
   241a8:	d9c00615 	stw	r7,24(sp)
   241ac:	003df706 	br	2398c <__alt_data_end+0xfffe398c>
   241b0:	193d3926 	beq	r3,r4,23698 <__alt_data_end+0xfffe3698>
   241b4:	00c00f04 	movi	r3,60
   241b8:	1885c83a 	sub	r2,r3,r2
   241bc:	003ddf06 	br	2393c <__alt_data_end+0xfffe393c>
   241c0:	e009883a 	mov	r4,fp
   241c4:	e0001115 	stw	zero,68(fp)
   241c8:	000b883a 	mov	r5,zero
   241cc:	00262340 	call	26234 <_Balloc>
   241d0:	d8800715 	stw	r2,28(sp)
   241d4:	d8c00717 	ldw	r3,28(sp)
   241d8:	00bfffc4 	movi	r2,-1
   241dc:	01000044 	movi	r4,1
   241e0:	d8800c15 	stw	r2,48(sp)
   241e4:	e0c01015 	stw	r3,64(fp)
   241e8:	d9000b15 	stw	r4,44(sp)
   241ec:	d8800615 	stw	r2,24(sp)
   241f0:	d8002215 	stw	zero,136(sp)
   241f4:	003c4106 	br	232fc <__alt_data_end+0xfffe32fc>
   241f8:	d8c00c17 	ldw	r3,48(sp)
   241fc:	d8c00615 	stw	r3,24(sp)
   24200:	003e7006 	br	23bc4 <__alt_data_end+0xfffe3bc4>
   24204:	04400044 	movi	r17,1
   24208:	003b2006 	br	22e8c <__alt_data_end+0xfffe2e8c>
   2420c:	000b883a 	mov	r5,zero
   24210:	003b3d06 	br	22f08 <__alt_data_end+0xfffe2f08>
   24214:	d8800c17 	ldw	r2,48(sp)
   24218:	d8800615 	stw	r2,24(sp)
   2421c:	003e6906 	br	23bc4 <__alt_data_end+0xfffe3bc4>

00024220 <__sflush_r>:
   24220:	2880030b 	ldhu	r2,12(r5)
   24224:	defffb04 	addi	sp,sp,-20
   24228:	dcc00315 	stw	r19,12(sp)
   2422c:	dc400115 	stw	r17,4(sp)
   24230:	dfc00415 	stw	ra,16(sp)
   24234:	dc800215 	stw	r18,8(sp)
   24238:	dc000015 	stw	r16,0(sp)
   2423c:	10c0020c 	andi	r3,r2,8
   24240:	2823883a 	mov	r17,r5
   24244:	2027883a 	mov	r19,r4
   24248:	1800311e 	bne	r3,zero,24310 <__sflush_r+0xf0>
   2424c:	28c00117 	ldw	r3,4(r5)
   24250:	10820014 	ori	r2,r2,2048
   24254:	2880030d 	sth	r2,12(r5)
   24258:	00c04b0e 	bge	zero,r3,24388 <__sflush_r+0x168>
   2425c:	8a000a17 	ldw	r8,40(r17)
   24260:	40002326 	beq	r8,zero,242f0 <__sflush_r+0xd0>
   24264:	9c000017 	ldw	r16,0(r19)
   24268:	10c4000c 	andi	r3,r2,4096
   2426c:	98000015 	stw	zero,0(r19)
   24270:	18004826 	beq	r3,zero,24394 <__sflush_r+0x174>
   24274:	89801417 	ldw	r6,80(r17)
   24278:	10c0010c 	andi	r3,r2,4
   2427c:	18000626 	beq	r3,zero,24298 <__sflush_r+0x78>
   24280:	88c00117 	ldw	r3,4(r17)
   24284:	88800c17 	ldw	r2,48(r17)
   24288:	30cdc83a 	sub	r6,r6,r3
   2428c:	10000226 	beq	r2,zero,24298 <__sflush_r+0x78>
   24290:	88800f17 	ldw	r2,60(r17)
   24294:	308dc83a 	sub	r6,r6,r2
   24298:	89400717 	ldw	r5,28(r17)
   2429c:	000f883a 	mov	r7,zero
   242a0:	9809883a 	mov	r4,r19
   242a4:	403ee83a 	callr	r8
   242a8:	00ffffc4 	movi	r3,-1
   242ac:	10c04426 	beq	r2,r3,243c0 <__sflush_r+0x1a0>
   242b0:	88c0030b 	ldhu	r3,12(r17)
   242b4:	89000417 	ldw	r4,16(r17)
   242b8:	88000115 	stw	zero,4(r17)
   242bc:	197dffcc 	andi	r5,r3,63487
   242c0:	8940030d 	sth	r5,12(r17)
   242c4:	89000015 	stw	r4,0(r17)
   242c8:	18c4000c 	andi	r3,r3,4096
   242cc:	18002c1e 	bne	r3,zero,24380 <__sflush_r+0x160>
   242d0:	89400c17 	ldw	r5,48(r17)
   242d4:	9c000015 	stw	r16,0(r19)
   242d8:	28000526 	beq	r5,zero,242f0 <__sflush_r+0xd0>
   242dc:	88801004 	addi	r2,r17,64
   242e0:	28800226 	beq	r5,r2,242ec <__sflush_r+0xcc>
   242e4:	9809883a 	mov	r4,r19
   242e8:	002498c0 	call	2498c <_free_r>
   242ec:	88000c15 	stw	zero,48(r17)
   242f0:	0005883a 	mov	r2,zero
   242f4:	dfc00417 	ldw	ra,16(sp)
   242f8:	dcc00317 	ldw	r19,12(sp)
   242fc:	dc800217 	ldw	r18,8(sp)
   24300:	dc400117 	ldw	r17,4(sp)
   24304:	dc000017 	ldw	r16,0(sp)
   24308:	dec00504 	addi	sp,sp,20
   2430c:	f800283a 	ret
   24310:	2c800417 	ldw	r18,16(r5)
   24314:	903ff626 	beq	r18,zero,242f0 <__alt_data_end+0xfffe42f0>
   24318:	2c000017 	ldw	r16,0(r5)
   2431c:	108000cc 	andi	r2,r2,3
   24320:	2c800015 	stw	r18,0(r5)
   24324:	84a1c83a 	sub	r16,r16,r18
   24328:	1000131e 	bne	r2,zero,24378 <__sflush_r+0x158>
   2432c:	28800517 	ldw	r2,20(r5)
   24330:	88800215 	stw	r2,8(r17)
   24334:	04000316 	blt	zero,r16,24344 <__sflush_r+0x124>
   24338:	003fed06 	br	242f0 <__alt_data_end+0xfffe42f0>
   2433c:	90a5883a 	add	r18,r18,r2
   24340:	043feb0e 	bge	zero,r16,242f0 <__alt_data_end+0xfffe42f0>
   24344:	88800917 	ldw	r2,36(r17)
   24348:	89400717 	ldw	r5,28(r17)
   2434c:	800f883a 	mov	r7,r16
   24350:	900d883a 	mov	r6,r18
   24354:	9809883a 	mov	r4,r19
   24358:	103ee83a 	callr	r2
   2435c:	80a1c83a 	sub	r16,r16,r2
   24360:	00bff616 	blt	zero,r2,2433c <__alt_data_end+0xfffe433c>
   24364:	88c0030b 	ldhu	r3,12(r17)
   24368:	00bfffc4 	movi	r2,-1
   2436c:	18c01014 	ori	r3,r3,64
   24370:	88c0030d 	sth	r3,12(r17)
   24374:	003fdf06 	br	242f4 <__alt_data_end+0xfffe42f4>
   24378:	0005883a 	mov	r2,zero
   2437c:	003fec06 	br	24330 <__alt_data_end+0xfffe4330>
   24380:	88801415 	stw	r2,80(r17)
   24384:	003fd206 	br	242d0 <__alt_data_end+0xfffe42d0>
   24388:	28c00f17 	ldw	r3,60(r5)
   2438c:	00ffb316 	blt	zero,r3,2425c <__alt_data_end+0xfffe425c>
   24390:	003fd706 	br	242f0 <__alt_data_end+0xfffe42f0>
   24394:	89400717 	ldw	r5,28(r17)
   24398:	000d883a 	mov	r6,zero
   2439c:	01c00044 	movi	r7,1
   243a0:	9809883a 	mov	r4,r19
   243a4:	403ee83a 	callr	r8
   243a8:	100d883a 	mov	r6,r2
   243ac:	00bfffc4 	movi	r2,-1
   243b0:	30801426 	beq	r6,r2,24404 <__sflush_r+0x1e4>
   243b4:	8880030b 	ldhu	r2,12(r17)
   243b8:	8a000a17 	ldw	r8,40(r17)
   243bc:	003fae06 	br	24278 <__alt_data_end+0xfffe4278>
   243c0:	98c00017 	ldw	r3,0(r19)
   243c4:	183fba26 	beq	r3,zero,242b0 <__alt_data_end+0xfffe42b0>
   243c8:	01000744 	movi	r4,29
   243cc:	19000626 	beq	r3,r4,243e8 <__sflush_r+0x1c8>
   243d0:	01000584 	movi	r4,22
   243d4:	19000426 	beq	r3,r4,243e8 <__sflush_r+0x1c8>
   243d8:	88c0030b 	ldhu	r3,12(r17)
   243dc:	18c01014 	ori	r3,r3,64
   243e0:	88c0030d 	sth	r3,12(r17)
   243e4:	003fc306 	br	242f4 <__alt_data_end+0xfffe42f4>
   243e8:	8880030b 	ldhu	r2,12(r17)
   243ec:	88c00417 	ldw	r3,16(r17)
   243f0:	88000115 	stw	zero,4(r17)
   243f4:	10bdffcc 	andi	r2,r2,63487
   243f8:	8880030d 	sth	r2,12(r17)
   243fc:	88c00015 	stw	r3,0(r17)
   24400:	003fb306 	br	242d0 <__alt_data_end+0xfffe42d0>
   24404:	98800017 	ldw	r2,0(r19)
   24408:	103fea26 	beq	r2,zero,243b4 <__alt_data_end+0xfffe43b4>
   2440c:	00c00744 	movi	r3,29
   24410:	10c00226 	beq	r2,r3,2441c <__sflush_r+0x1fc>
   24414:	00c00584 	movi	r3,22
   24418:	10c0031e 	bne	r2,r3,24428 <__sflush_r+0x208>
   2441c:	9c000015 	stw	r16,0(r19)
   24420:	0005883a 	mov	r2,zero
   24424:	003fb306 	br	242f4 <__alt_data_end+0xfffe42f4>
   24428:	88c0030b 	ldhu	r3,12(r17)
   2442c:	3005883a 	mov	r2,r6
   24430:	18c01014 	ori	r3,r3,64
   24434:	88c0030d 	sth	r3,12(r17)
   24438:	003fae06 	br	242f4 <__alt_data_end+0xfffe42f4>

0002443c <_fflush_r>:
   2443c:	defffd04 	addi	sp,sp,-12
   24440:	dc000115 	stw	r16,4(sp)
   24444:	dfc00215 	stw	ra,8(sp)
   24448:	2021883a 	mov	r16,r4
   2444c:	20000226 	beq	r4,zero,24458 <_fflush_r+0x1c>
   24450:	20800e17 	ldw	r2,56(r4)
   24454:	10000c26 	beq	r2,zero,24488 <_fflush_r+0x4c>
   24458:	2880030f 	ldh	r2,12(r5)
   2445c:	1000051e 	bne	r2,zero,24474 <_fflush_r+0x38>
   24460:	0005883a 	mov	r2,zero
   24464:	dfc00217 	ldw	ra,8(sp)
   24468:	dc000117 	ldw	r16,4(sp)
   2446c:	dec00304 	addi	sp,sp,12
   24470:	f800283a 	ret
   24474:	8009883a 	mov	r4,r16
   24478:	dfc00217 	ldw	ra,8(sp)
   2447c:	dc000117 	ldw	r16,4(sp)
   24480:	dec00304 	addi	sp,sp,12
   24484:	00242201 	jmpi	24220 <__sflush_r>
   24488:	d9400015 	stw	r5,0(sp)
   2448c:	00248180 	call	24818 <__sinit>
   24490:	d9400017 	ldw	r5,0(sp)
   24494:	003ff006 	br	24458 <__alt_data_end+0xfffe4458>

00024498 <fflush>:
   24498:	20000526 	beq	r4,zero,244b0 <fflush+0x18>
   2449c:	008000f4 	movhi	r2,3
   244a0:	108a3c04 	addi	r2,r2,10480
   244a4:	200b883a 	mov	r5,r4
   244a8:	11000017 	ldw	r4,0(r2)
   244ac:	002443c1 	jmpi	2443c <_fflush_r>
   244b0:	008000f4 	movhi	r2,3
   244b4:	108a3b04 	addi	r2,r2,10476
   244b8:	11000017 	ldw	r4,0(r2)
   244bc:	014000b4 	movhi	r5,2
   244c0:	29510f04 	addi	r5,r5,17468
   244c4:	002521c1 	jmpi	2521c <_fwalk_reent>

000244c8 <__fp_unlock>:
   244c8:	0005883a 	mov	r2,zero
   244cc:	f800283a 	ret

000244d0 <_cleanup_r>:
   244d0:	014000f4 	movhi	r5,3
   244d4:	29648d04 	addi	r5,r5,-28108
   244d8:	002521c1 	jmpi	2521c <_fwalk_reent>

000244dc <__sinit.part.1>:
   244dc:	defff704 	addi	sp,sp,-36
   244e0:	00c000b4 	movhi	r3,2
   244e4:	dfc00815 	stw	ra,32(sp)
   244e8:	ddc00715 	stw	r23,28(sp)
   244ec:	dd800615 	stw	r22,24(sp)
   244f0:	dd400515 	stw	r21,20(sp)
   244f4:	dd000415 	stw	r20,16(sp)
   244f8:	dcc00315 	stw	r19,12(sp)
   244fc:	dc800215 	stw	r18,8(sp)
   24500:	dc400115 	stw	r17,4(sp)
   24504:	dc000015 	stw	r16,0(sp)
   24508:	18d13404 	addi	r3,r3,17616
   2450c:	24000117 	ldw	r16,4(r4)
   24510:	20c00f15 	stw	r3,60(r4)
   24514:	2080bb04 	addi	r2,r4,748
   24518:	00c000c4 	movi	r3,3
   2451c:	20c0b915 	stw	r3,740(r4)
   24520:	2080ba15 	stw	r2,744(r4)
   24524:	2000b815 	stw	zero,736(r4)
   24528:	05c00204 	movi	r23,8
   2452c:	00800104 	movi	r2,4
   24530:	2025883a 	mov	r18,r4
   24534:	b80d883a 	mov	r6,r23
   24538:	81001704 	addi	r4,r16,92
   2453c:	000b883a 	mov	r5,zero
   24540:	80000015 	stw	zero,0(r16)
   24544:	80000115 	stw	zero,4(r16)
   24548:	80000215 	stw	zero,8(r16)
   2454c:	8080030d 	sth	r2,12(r16)
   24550:	80001915 	stw	zero,100(r16)
   24554:	8000038d 	sth	zero,14(r16)
   24558:	80000415 	stw	zero,16(r16)
   2455c:	80000515 	stw	zero,20(r16)
   24560:	80000615 	stw	zero,24(r16)
   24564:	002610c0 	call	2610c <memset>
   24568:	058000b4 	movhi	r22,2
   2456c:	94400217 	ldw	r17,8(r18)
   24570:	054000b4 	movhi	r21,2
   24574:	050000b4 	movhi	r20,2
   24578:	04c000b4 	movhi	r19,2
   2457c:	b59e1704 	addi	r22,r22,30812
   24580:	ad5e2e04 	addi	r21,r21,30904
   24584:	a51e4d04 	addi	r20,r20,31028
   24588:	9cde6404 	addi	r19,r19,31120
   2458c:	85800815 	stw	r22,32(r16)
   24590:	85400915 	stw	r21,36(r16)
   24594:	85000a15 	stw	r20,40(r16)
   24598:	84c00b15 	stw	r19,44(r16)
   2459c:	84000715 	stw	r16,28(r16)
   245a0:	00800284 	movi	r2,10
   245a4:	8880030d 	sth	r2,12(r17)
   245a8:	00800044 	movi	r2,1
   245ac:	b80d883a 	mov	r6,r23
   245b0:	89001704 	addi	r4,r17,92
   245b4:	000b883a 	mov	r5,zero
   245b8:	88000015 	stw	zero,0(r17)
   245bc:	88000115 	stw	zero,4(r17)
   245c0:	88000215 	stw	zero,8(r17)
   245c4:	88001915 	stw	zero,100(r17)
   245c8:	8880038d 	sth	r2,14(r17)
   245cc:	88000415 	stw	zero,16(r17)
   245d0:	88000515 	stw	zero,20(r17)
   245d4:	88000615 	stw	zero,24(r17)
   245d8:	002610c0 	call	2610c <memset>
   245dc:	94000317 	ldw	r16,12(r18)
   245e0:	00800484 	movi	r2,18
   245e4:	8c400715 	stw	r17,28(r17)
   245e8:	8d800815 	stw	r22,32(r17)
   245ec:	8d400915 	stw	r21,36(r17)
   245f0:	8d000a15 	stw	r20,40(r17)
   245f4:	8cc00b15 	stw	r19,44(r17)
   245f8:	8080030d 	sth	r2,12(r16)
   245fc:	00800084 	movi	r2,2
   24600:	80000015 	stw	zero,0(r16)
   24604:	80000115 	stw	zero,4(r16)
   24608:	80000215 	stw	zero,8(r16)
   2460c:	80001915 	stw	zero,100(r16)
   24610:	8080038d 	sth	r2,14(r16)
   24614:	80000415 	stw	zero,16(r16)
   24618:	80000515 	stw	zero,20(r16)
   2461c:	80000615 	stw	zero,24(r16)
   24620:	b80d883a 	mov	r6,r23
   24624:	000b883a 	mov	r5,zero
   24628:	81001704 	addi	r4,r16,92
   2462c:	002610c0 	call	2610c <memset>
   24630:	00800044 	movi	r2,1
   24634:	84000715 	stw	r16,28(r16)
   24638:	85800815 	stw	r22,32(r16)
   2463c:	85400915 	stw	r21,36(r16)
   24640:	85000a15 	stw	r20,40(r16)
   24644:	84c00b15 	stw	r19,44(r16)
   24648:	90800e15 	stw	r2,56(r18)
   2464c:	dfc00817 	ldw	ra,32(sp)
   24650:	ddc00717 	ldw	r23,28(sp)
   24654:	dd800617 	ldw	r22,24(sp)
   24658:	dd400517 	ldw	r21,20(sp)
   2465c:	dd000417 	ldw	r20,16(sp)
   24660:	dcc00317 	ldw	r19,12(sp)
   24664:	dc800217 	ldw	r18,8(sp)
   24668:	dc400117 	ldw	r17,4(sp)
   2466c:	dc000017 	ldw	r16,0(sp)
   24670:	dec00904 	addi	sp,sp,36
   24674:	f800283a 	ret

00024678 <__fp_lock>:
   24678:	0005883a 	mov	r2,zero
   2467c:	f800283a 	ret

00024680 <__sfmoreglue>:
   24680:	defffc04 	addi	sp,sp,-16
   24684:	dc400115 	stw	r17,4(sp)
   24688:	2c7fffc4 	addi	r17,r5,-1
   2468c:	8c401a24 	muli	r17,r17,104
   24690:	dc800215 	stw	r18,8(sp)
   24694:	2825883a 	mov	r18,r5
   24698:	89401d04 	addi	r5,r17,116
   2469c:	dc000015 	stw	r16,0(sp)
   246a0:	dfc00315 	stw	ra,12(sp)
   246a4:	00255780 	call	25578 <_malloc_r>
   246a8:	1021883a 	mov	r16,r2
   246ac:	10000726 	beq	r2,zero,246cc <__sfmoreglue+0x4c>
   246b0:	11000304 	addi	r4,r2,12
   246b4:	10000015 	stw	zero,0(r2)
   246b8:	14800115 	stw	r18,4(r2)
   246bc:	11000215 	stw	r4,8(r2)
   246c0:	89801a04 	addi	r6,r17,104
   246c4:	000b883a 	mov	r5,zero
   246c8:	002610c0 	call	2610c <memset>
   246cc:	8005883a 	mov	r2,r16
   246d0:	dfc00317 	ldw	ra,12(sp)
   246d4:	dc800217 	ldw	r18,8(sp)
   246d8:	dc400117 	ldw	r17,4(sp)
   246dc:	dc000017 	ldw	r16,0(sp)
   246e0:	dec00404 	addi	sp,sp,16
   246e4:	f800283a 	ret

000246e8 <__sfp>:
   246e8:	defffb04 	addi	sp,sp,-20
   246ec:	dc000015 	stw	r16,0(sp)
   246f0:	040000f4 	movhi	r16,3
   246f4:	840a3b04 	addi	r16,r16,10476
   246f8:	dcc00315 	stw	r19,12(sp)
   246fc:	2027883a 	mov	r19,r4
   24700:	81000017 	ldw	r4,0(r16)
   24704:	dfc00415 	stw	ra,16(sp)
   24708:	dc800215 	stw	r18,8(sp)
   2470c:	20800e17 	ldw	r2,56(r4)
   24710:	dc400115 	stw	r17,4(sp)
   24714:	1000021e 	bne	r2,zero,24720 <__sfp+0x38>
   24718:	00244dc0 	call	244dc <__sinit.part.1>
   2471c:	81000017 	ldw	r4,0(r16)
   24720:	2480b804 	addi	r18,r4,736
   24724:	047fffc4 	movi	r17,-1
   24728:	91000117 	ldw	r4,4(r18)
   2472c:	94000217 	ldw	r16,8(r18)
   24730:	213fffc4 	addi	r4,r4,-1
   24734:	20000a16 	blt	r4,zero,24760 <__sfp+0x78>
   24738:	8080030f 	ldh	r2,12(r16)
   2473c:	10000c26 	beq	r2,zero,24770 <__sfp+0x88>
   24740:	80c01d04 	addi	r3,r16,116
   24744:	00000206 	br	24750 <__sfp+0x68>
   24748:	18bfe60f 	ldh	r2,-104(r3)
   2474c:	10000826 	beq	r2,zero,24770 <__sfp+0x88>
   24750:	213fffc4 	addi	r4,r4,-1
   24754:	1c3ffd04 	addi	r16,r3,-12
   24758:	18c01a04 	addi	r3,r3,104
   2475c:	247ffa1e 	bne	r4,r17,24748 <__alt_data_end+0xfffe4748>
   24760:	90800017 	ldw	r2,0(r18)
   24764:	10001d26 	beq	r2,zero,247dc <__sfp+0xf4>
   24768:	1025883a 	mov	r18,r2
   2476c:	003fee06 	br	24728 <__alt_data_end+0xfffe4728>
   24770:	00bfffc4 	movi	r2,-1
   24774:	8080038d 	sth	r2,14(r16)
   24778:	00800044 	movi	r2,1
   2477c:	8080030d 	sth	r2,12(r16)
   24780:	80001915 	stw	zero,100(r16)
   24784:	80000015 	stw	zero,0(r16)
   24788:	80000215 	stw	zero,8(r16)
   2478c:	80000115 	stw	zero,4(r16)
   24790:	80000415 	stw	zero,16(r16)
   24794:	80000515 	stw	zero,20(r16)
   24798:	80000615 	stw	zero,24(r16)
   2479c:	01800204 	movi	r6,8
   247a0:	000b883a 	mov	r5,zero
   247a4:	81001704 	addi	r4,r16,92
   247a8:	002610c0 	call	2610c <memset>
   247ac:	8005883a 	mov	r2,r16
   247b0:	80000c15 	stw	zero,48(r16)
   247b4:	80000d15 	stw	zero,52(r16)
   247b8:	80001115 	stw	zero,68(r16)
   247bc:	80001215 	stw	zero,72(r16)
   247c0:	dfc00417 	ldw	ra,16(sp)
   247c4:	dcc00317 	ldw	r19,12(sp)
   247c8:	dc800217 	ldw	r18,8(sp)
   247cc:	dc400117 	ldw	r17,4(sp)
   247d0:	dc000017 	ldw	r16,0(sp)
   247d4:	dec00504 	addi	sp,sp,20
   247d8:	f800283a 	ret
   247dc:	01400104 	movi	r5,4
   247e0:	9809883a 	mov	r4,r19
   247e4:	00246800 	call	24680 <__sfmoreglue>
   247e8:	90800015 	stw	r2,0(r18)
   247ec:	103fde1e 	bne	r2,zero,24768 <__alt_data_end+0xfffe4768>
   247f0:	00800304 	movi	r2,12
   247f4:	98800015 	stw	r2,0(r19)
   247f8:	0005883a 	mov	r2,zero
   247fc:	003ff006 	br	247c0 <__alt_data_end+0xfffe47c0>

00024800 <_cleanup>:
   24800:	008000f4 	movhi	r2,3
   24804:	108a3b04 	addi	r2,r2,10476
   24808:	11000017 	ldw	r4,0(r2)
   2480c:	014000f4 	movhi	r5,3
   24810:	29648d04 	addi	r5,r5,-28108
   24814:	002521c1 	jmpi	2521c <_fwalk_reent>

00024818 <__sinit>:
   24818:	20800e17 	ldw	r2,56(r4)
   2481c:	10000126 	beq	r2,zero,24824 <__sinit+0xc>
   24820:	f800283a 	ret
   24824:	00244dc1 	jmpi	244dc <__sinit.part.1>

00024828 <__sfp_lock_acquire>:
   24828:	f800283a 	ret

0002482c <__sfp_lock_release>:
   2482c:	f800283a 	ret

00024830 <__sinit_lock_acquire>:
   24830:	f800283a 	ret

00024834 <__sinit_lock_release>:
   24834:	f800283a 	ret

00024838 <__fp_lock_all>:
   24838:	008000f4 	movhi	r2,3
   2483c:	108a3c04 	addi	r2,r2,10480
   24840:	11000017 	ldw	r4,0(r2)
   24844:	014000b4 	movhi	r5,2
   24848:	29519e04 	addi	r5,r5,18040
   2484c:	00251581 	jmpi	25158 <_fwalk>

00024850 <__fp_unlock_all>:
   24850:	008000f4 	movhi	r2,3
   24854:	108a3c04 	addi	r2,r2,10480
   24858:	11000017 	ldw	r4,0(r2)
   2485c:	014000b4 	movhi	r5,2
   24860:	29513204 	addi	r5,r5,17608
   24864:	00251581 	jmpi	25158 <_fwalk>

00024868 <_malloc_trim_r>:
   24868:	defffb04 	addi	sp,sp,-20
   2486c:	dcc00315 	stw	r19,12(sp)
   24870:	04c000f4 	movhi	r19,3
   24874:	dc800215 	stw	r18,8(sp)
   24878:	dc400115 	stw	r17,4(sp)
   2487c:	dc000015 	stw	r16,0(sp)
   24880:	dfc00415 	stw	ra,16(sp)
   24884:	2821883a 	mov	r16,r5
   24888:	9cc47004 	addi	r19,r19,4544
   2488c:	2025883a 	mov	r18,r4
   24890:	002d2380 	call	2d238 <__malloc_lock>
   24894:	98800217 	ldw	r2,8(r19)
   24898:	14400117 	ldw	r17,4(r2)
   2489c:	00bfff04 	movi	r2,-4
   248a0:	88a2703a 	and	r17,r17,r2
   248a4:	8c21c83a 	sub	r16,r17,r16
   248a8:	8403fbc4 	addi	r16,r16,4079
   248ac:	8020d33a 	srli	r16,r16,12
   248b0:	0083ffc4 	movi	r2,4095
   248b4:	843fffc4 	addi	r16,r16,-1
   248b8:	8020933a 	slli	r16,r16,12
   248bc:	1400060e 	bge	r2,r16,248d8 <_malloc_trim_r+0x70>
   248c0:	000b883a 	mov	r5,zero
   248c4:	9009883a 	mov	r4,r18
   248c8:	00278080 	call	27808 <_sbrk_r>
   248cc:	98c00217 	ldw	r3,8(r19)
   248d0:	1c47883a 	add	r3,r3,r17
   248d4:	10c00a26 	beq	r2,r3,24900 <_malloc_trim_r+0x98>
   248d8:	9009883a 	mov	r4,r18
   248dc:	002d25c0 	call	2d25c <__malloc_unlock>
   248e0:	0005883a 	mov	r2,zero
   248e4:	dfc00417 	ldw	ra,16(sp)
   248e8:	dcc00317 	ldw	r19,12(sp)
   248ec:	dc800217 	ldw	r18,8(sp)
   248f0:	dc400117 	ldw	r17,4(sp)
   248f4:	dc000017 	ldw	r16,0(sp)
   248f8:	dec00504 	addi	sp,sp,20
   248fc:	f800283a 	ret
   24900:	040bc83a 	sub	r5,zero,r16
   24904:	9009883a 	mov	r4,r18
   24908:	00278080 	call	27808 <_sbrk_r>
   2490c:	00ffffc4 	movi	r3,-1
   24910:	10c00d26 	beq	r2,r3,24948 <_malloc_trim_r+0xe0>
   24914:	00c000f4 	movhi	r3,3
   24918:	18d16504 	addi	r3,r3,17812
   2491c:	18800017 	ldw	r2,0(r3)
   24920:	99000217 	ldw	r4,8(r19)
   24924:	8c23c83a 	sub	r17,r17,r16
   24928:	8c400054 	ori	r17,r17,1
   2492c:	1421c83a 	sub	r16,r2,r16
   24930:	24400115 	stw	r17,4(r4)
   24934:	9009883a 	mov	r4,r18
   24938:	1c000015 	stw	r16,0(r3)
   2493c:	002d25c0 	call	2d25c <__malloc_unlock>
   24940:	00800044 	movi	r2,1
   24944:	003fe706 	br	248e4 <__alt_data_end+0xfffe48e4>
   24948:	000b883a 	mov	r5,zero
   2494c:	9009883a 	mov	r4,r18
   24950:	00278080 	call	27808 <_sbrk_r>
   24954:	99000217 	ldw	r4,8(r19)
   24958:	014003c4 	movi	r5,15
   2495c:	1107c83a 	sub	r3,r2,r4
   24960:	28ffdd0e 	bge	r5,r3,248d8 <__alt_data_end+0xfffe48d8>
   24964:	014000f4 	movhi	r5,3
   24968:	294a3e04 	addi	r5,r5,10488
   2496c:	29400017 	ldw	r5,0(r5)
   24970:	18c00054 	ori	r3,r3,1
   24974:	20c00115 	stw	r3,4(r4)
   24978:	00c000f4 	movhi	r3,3
   2497c:	1145c83a 	sub	r2,r2,r5
   24980:	18d16504 	addi	r3,r3,17812
   24984:	18800015 	stw	r2,0(r3)
   24988:	003fd306 	br	248d8 <__alt_data_end+0xfffe48d8>

0002498c <_free_r>:
   2498c:	28004126 	beq	r5,zero,24a94 <_free_r+0x108>
   24990:	defffd04 	addi	sp,sp,-12
   24994:	dc400115 	stw	r17,4(sp)
   24998:	dc000015 	stw	r16,0(sp)
   2499c:	2023883a 	mov	r17,r4
   249a0:	2821883a 	mov	r16,r5
   249a4:	dfc00215 	stw	ra,8(sp)
   249a8:	002d2380 	call	2d238 <__malloc_lock>
   249ac:	81ffff17 	ldw	r7,-4(r16)
   249b0:	00bfff84 	movi	r2,-2
   249b4:	010000f4 	movhi	r4,3
   249b8:	81bffe04 	addi	r6,r16,-8
   249bc:	3884703a 	and	r2,r7,r2
   249c0:	21047004 	addi	r4,r4,4544
   249c4:	308b883a 	add	r5,r6,r2
   249c8:	2a400117 	ldw	r9,4(r5)
   249cc:	22000217 	ldw	r8,8(r4)
   249d0:	00ffff04 	movi	r3,-4
   249d4:	48c6703a 	and	r3,r9,r3
   249d8:	2a005726 	beq	r5,r8,24b38 <_free_r+0x1ac>
   249dc:	28c00115 	stw	r3,4(r5)
   249e0:	39c0004c 	andi	r7,r7,1
   249e4:	3800091e 	bne	r7,zero,24a0c <_free_r+0x80>
   249e8:	823ffe17 	ldw	r8,-8(r16)
   249ec:	22400204 	addi	r9,r4,8
   249f0:	320dc83a 	sub	r6,r6,r8
   249f4:	31c00217 	ldw	r7,8(r6)
   249f8:	1205883a 	add	r2,r2,r8
   249fc:	3a406526 	beq	r7,r9,24b94 <_free_r+0x208>
   24a00:	32000317 	ldw	r8,12(r6)
   24a04:	3a000315 	stw	r8,12(r7)
   24a08:	41c00215 	stw	r7,8(r8)
   24a0c:	28cf883a 	add	r7,r5,r3
   24a10:	39c00117 	ldw	r7,4(r7)
   24a14:	39c0004c 	andi	r7,r7,1
   24a18:	38003a26 	beq	r7,zero,24b04 <_free_r+0x178>
   24a1c:	10c00054 	ori	r3,r2,1
   24a20:	30c00115 	stw	r3,4(r6)
   24a24:	3087883a 	add	r3,r6,r2
   24a28:	18800015 	stw	r2,0(r3)
   24a2c:	00c07fc4 	movi	r3,511
   24a30:	18801936 	bltu	r3,r2,24a98 <_free_r+0x10c>
   24a34:	1004d0fa 	srli	r2,r2,3
   24a38:	01c00044 	movi	r7,1
   24a3c:	21400117 	ldw	r5,4(r4)
   24a40:	10c00044 	addi	r3,r2,1
   24a44:	18c7883a 	add	r3,r3,r3
   24a48:	1005d0ba 	srai	r2,r2,2
   24a4c:	18c7883a 	add	r3,r3,r3
   24a50:	18c7883a 	add	r3,r3,r3
   24a54:	1907883a 	add	r3,r3,r4
   24a58:	3884983a 	sll	r2,r7,r2
   24a5c:	19c00017 	ldw	r7,0(r3)
   24a60:	1a3ffe04 	addi	r8,r3,-8
   24a64:	1144b03a 	or	r2,r2,r5
   24a68:	32000315 	stw	r8,12(r6)
   24a6c:	31c00215 	stw	r7,8(r6)
   24a70:	20800115 	stw	r2,4(r4)
   24a74:	19800015 	stw	r6,0(r3)
   24a78:	39800315 	stw	r6,12(r7)
   24a7c:	8809883a 	mov	r4,r17
   24a80:	dfc00217 	ldw	ra,8(sp)
   24a84:	dc400117 	ldw	r17,4(sp)
   24a88:	dc000017 	ldw	r16,0(sp)
   24a8c:	dec00304 	addi	sp,sp,12
   24a90:	002d25c1 	jmpi	2d25c <__malloc_unlock>
   24a94:	f800283a 	ret
   24a98:	100ad27a 	srli	r5,r2,9
   24a9c:	00c00104 	movi	r3,4
   24aa0:	19404a36 	bltu	r3,r5,24bcc <_free_r+0x240>
   24aa4:	100ad1ba 	srli	r5,r2,6
   24aa8:	28c00e44 	addi	r3,r5,57
   24aac:	18c7883a 	add	r3,r3,r3
   24ab0:	29400e04 	addi	r5,r5,56
   24ab4:	18c7883a 	add	r3,r3,r3
   24ab8:	18c7883a 	add	r3,r3,r3
   24abc:	1909883a 	add	r4,r3,r4
   24ac0:	20c00017 	ldw	r3,0(r4)
   24ac4:	01c000f4 	movhi	r7,3
   24ac8:	213ffe04 	addi	r4,r4,-8
   24acc:	39c47004 	addi	r7,r7,4544
   24ad0:	20c04426 	beq	r4,r3,24be4 <_free_r+0x258>
   24ad4:	01ffff04 	movi	r7,-4
   24ad8:	19400117 	ldw	r5,4(r3)
   24adc:	29ca703a 	and	r5,r5,r7
   24ae0:	1140022e 	bgeu	r2,r5,24aec <_free_r+0x160>
   24ae4:	18c00217 	ldw	r3,8(r3)
   24ae8:	20fffb1e 	bne	r4,r3,24ad8 <__alt_data_end+0xfffe4ad8>
   24aec:	19000317 	ldw	r4,12(r3)
   24af0:	31000315 	stw	r4,12(r6)
   24af4:	30c00215 	stw	r3,8(r6)
   24af8:	21800215 	stw	r6,8(r4)
   24afc:	19800315 	stw	r6,12(r3)
   24b00:	003fde06 	br	24a7c <__alt_data_end+0xfffe4a7c>
   24b04:	29c00217 	ldw	r7,8(r5)
   24b08:	10c5883a 	add	r2,r2,r3
   24b0c:	00c000f4 	movhi	r3,3
   24b10:	18c47204 	addi	r3,r3,4552
   24b14:	38c03b26 	beq	r7,r3,24c04 <_free_r+0x278>
   24b18:	2a000317 	ldw	r8,12(r5)
   24b1c:	11400054 	ori	r5,r2,1
   24b20:	3087883a 	add	r3,r6,r2
   24b24:	3a000315 	stw	r8,12(r7)
   24b28:	41c00215 	stw	r7,8(r8)
   24b2c:	31400115 	stw	r5,4(r6)
   24b30:	18800015 	stw	r2,0(r3)
   24b34:	003fbd06 	br	24a2c <__alt_data_end+0xfffe4a2c>
   24b38:	39c0004c 	andi	r7,r7,1
   24b3c:	10c5883a 	add	r2,r2,r3
   24b40:	3800071e 	bne	r7,zero,24b60 <_free_r+0x1d4>
   24b44:	81fffe17 	ldw	r7,-8(r16)
   24b48:	31cdc83a 	sub	r6,r6,r7
   24b4c:	30c00317 	ldw	r3,12(r6)
   24b50:	31400217 	ldw	r5,8(r6)
   24b54:	11c5883a 	add	r2,r2,r7
   24b58:	28c00315 	stw	r3,12(r5)
   24b5c:	19400215 	stw	r5,8(r3)
   24b60:	10c00054 	ori	r3,r2,1
   24b64:	30c00115 	stw	r3,4(r6)
   24b68:	00c000f4 	movhi	r3,3
   24b6c:	18ca3f04 	addi	r3,r3,10492
   24b70:	18c00017 	ldw	r3,0(r3)
   24b74:	21800215 	stw	r6,8(r4)
   24b78:	10ffc036 	bltu	r2,r3,24a7c <__alt_data_end+0xfffe4a7c>
   24b7c:	008000f4 	movhi	r2,3
   24b80:	10915c04 	addi	r2,r2,17776
   24b84:	11400017 	ldw	r5,0(r2)
   24b88:	8809883a 	mov	r4,r17
   24b8c:	00248680 	call	24868 <_malloc_trim_r>
   24b90:	003fba06 	br	24a7c <__alt_data_end+0xfffe4a7c>
   24b94:	28c9883a 	add	r4,r5,r3
   24b98:	21000117 	ldw	r4,4(r4)
   24b9c:	2100004c 	andi	r4,r4,1
   24ba0:	2000391e 	bne	r4,zero,24c88 <_free_r+0x2fc>
   24ba4:	29c00217 	ldw	r7,8(r5)
   24ba8:	29000317 	ldw	r4,12(r5)
   24bac:	1885883a 	add	r2,r3,r2
   24bb0:	10c00054 	ori	r3,r2,1
   24bb4:	39000315 	stw	r4,12(r7)
   24bb8:	21c00215 	stw	r7,8(r4)
   24bbc:	30c00115 	stw	r3,4(r6)
   24bc0:	308d883a 	add	r6,r6,r2
   24bc4:	30800015 	stw	r2,0(r6)
   24bc8:	003fac06 	br	24a7c <__alt_data_end+0xfffe4a7c>
   24bcc:	00c00504 	movi	r3,20
   24bd0:	19401536 	bltu	r3,r5,24c28 <_free_r+0x29c>
   24bd4:	28c01704 	addi	r3,r5,92
   24bd8:	18c7883a 	add	r3,r3,r3
   24bdc:	294016c4 	addi	r5,r5,91
   24be0:	003fb406 	br	24ab4 <__alt_data_end+0xfffe4ab4>
   24be4:	280bd0ba 	srai	r5,r5,2
   24be8:	00c00044 	movi	r3,1
   24bec:	38800117 	ldw	r2,4(r7)
   24bf0:	194a983a 	sll	r5,r3,r5
   24bf4:	2007883a 	mov	r3,r4
   24bf8:	2884b03a 	or	r2,r5,r2
   24bfc:	38800115 	stw	r2,4(r7)
   24c00:	003fbb06 	br	24af0 <__alt_data_end+0xfffe4af0>
   24c04:	21800515 	stw	r6,20(r4)
   24c08:	21800415 	stw	r6,16(r4)
   24c0c:	10c00054 	ori	r3,r2,1
   24c10:	31c00315 	stw	r7,12(r6)
   24c14:	31c00215 	stw	r7,8(r6)
   24c18:	30c00115 	stw	r3,4(r6)
   24c1c:	308d883a 	add	r6,r6,r2
   24c20:	30800015 	stw	r2,0(r6)
   24c24:	003f9506 	br	24a7c <__alt_data_end+0xfffe4a7c>
   24c28:	00c01504 	movi	r3,84
   24c2c:	19400536 	bltu	r3,r5,24c44 <_free_r+0x2b8>
   24c30:	100ad33a 	srli	r5,r2,12
   24c34:	28c01bc4 	addi	r3,r5,111
   24c38:	18c7883a 	add	r3,r3,r3
   24c3c:	29401b84 	addi	r5,r5,110
   24c40:	003f9c06 	br	24ab4 <__alt_data_end+0xfffe4ab4>
   24c44:	00c05504 	movi	r3,340
   24c48:	19400536 	bltu	r3,r5,24c60 <_free_r+0x2d4>
   24c4c:	100ad3fa 	srli	r5,r2,15
   24c50:	28c01e04 	addi	r3,r5,120
   24c54:	18c7883a 	add	r3,r3,r3
   24c58:	29401dc4 	addi	r5,r5,119
   24c5c:	003f9506 	br	24ab4 <__alt_data_end+0xfffe4ab4>
   24c60:	00c15504 	movi	r3,1364
   24c64:	19400536 	bltu	r3,r5,24c7c <_free_r+0x2f0>
   24c68:	100ad4ba 	srli	r5,r2,18
   24c6c:	28c01f44 	addi	r3,r5,125
   24c70:	18c7883a 	add	r3,r3,r3
   24c74:	29401f04 	addi	r5,r5,124
   24c78:	003f8e06 	br	24ab4 <__alt_data_end+0xfffe4ab4>
   24c7c:	00c03f84 	movi	r3,254
   24c80:	01401f84 	movi	r5,126
   24c84:	003f8b06 	br	24ab4 <__alt_data_end+0xfffe4ab4>
   24c88:	10c00054 	ori	r3,r2,1
   24c8c:	30c00115 	stw	r3,4(r6)
   24c90:	308d883a 	add	r6,r6,r2
   24c94:	30800015 	stw	r2,0(r6)
   24c98:	003f7806 	br	24a7c <__alt_data_end+0xfffe4a7c>

00024c9c <__sfvwrite_r>:
   24c9c:	30800217 	ldw	r2,8(r6)
   24ca0:	10006726 	beq	r2,zero,24e40 <__sfvwrite_r+0x1a4>
   24ca4:	28c0030b 	ldhu	r3,12(r5)
   24ca8:	defff404 	addi	sp,sp,-48
   24cac:	dd400715 	stw	r21,28(sp)
   24cb0:	dd000615 	stw	r20,24(sp)
   24cb4:	dc000215 	stw	r16,8(sp)
   24cb8:	dfc00b15 	stw	ra,44(sp)
   24cbc:	df000a15 	stw	fp,40(sp)
   24cc0:	ddc00915 	stw	r23,36(sp)
   24cc4:	dd800815 	stw	r22,32(sp)
   24cc8:	dcc00515 	stw	r19,20(sp)
   24ccc:	dc800415 	stw	r18,16(sp)
   24cd0:	dc400315 	stw	r17,12(sp)
   24cd4:	1880020c 	andi	r2,r3,8
   24cd8:	2821883a 	mov	r16,r5
   24cdc:	202b883a 	mov	r21,r4
   24ce0:	3029883a 	mov	r20,r6
   24ce4:	10002726 	beq	r2,zero,24d84 <__sfvwrite_r+0xe8>
   24ce8:	28800417 	ldw	r2,16(r5)
   24cec:	10002526 	beq	r2,zero,24d84 <__sfvwrite_r+0xe8>
   24cf0:	1880008c 	andi	r2,r3,2
   24cf4:	a4400017 	ldw	r17,0(r20)
   24cf8:	10002a26 	beq	r2,zero,24da4 <__sfvwrite_r+0x108>
   24cfc:	05a00034 	movhi	r22,32768
   24d00:	0027883a 	mov	r19,zero
   24d04:	0025883a 	mov	r18,zero
   24d08:	b5bf0004 	addi	r22,r22,-1024
   24d0c:	980d883a 	mov	r6,r19
   24d10:	a809883a 	mov	r4,r21
   24d14:	90004626 	beq	r18,zero,24e30 <__sfvwrite_r+0x194>
   24d18:	900f883a 	mov	r7,r18
   24d1c:	b480022e 	bgeu	r22,r18,24d28 <__sfvwrite_r+0x8c>
   24d20:	01e00034 	movhi	r7,32768
   24d24:	39ff0004 	addi	r7,r7,-1024
   24d28:	80800917 	ldw	r2,36(r16)
   24d2c:	81400717 	ldw	r5,28(r16)
   24d30:	103ee83a 	callr	r2
   24d34:	0080570e 	bge	zero,r2,24e94 <__sfvwrite_r+0x1f8>
   24d38:	a0c00217 	ldw	r3,8(r20)
   24d3c:	98a7883a 	add	r19,r19,r2
   24d40:	90a5c83a 	sub	r18,r18,r2
   24d44:	1885c83a 	sub	r2,r3,r2
   24d48:	a0800215 	stw	r2,8(r20)
   24d4c:	103fef1e 	bne	r2,zero,24d0c <__alt_data_end+0xfffe4d0c>
   24d50:	0005883a 	mov	r2,zero
   24d54:	dfc00b17 	ldw	ra,44(sp)
   24d58:	df000a17 	ldw	fp,40(sp)
   24d5c:	ddc00917 	ldw	r23,36(sp)
   24d60:	dd800817 	ldw	r22,32(sp)
   24d64:	dd400717 	ldw	r21,28(sp)
   24d68:	dd000617 	ldw	r20,24(sp)
   24d6c:	dcc00517 	ldw	r19,20(sp)
   24d70:	dc800417 	ldw	r18,16(sp)
   24d74:	dc400317 	ldw	r17,12(sp)
   24d78:	dc000217 	ldw	r16,8(sp)
   24d7c:	dec00c04 	addi	sp,sp,48
   24d80:	f800283a 	ret
   24d84:	800b883a 	mov	r5,r16
   24d88:	a809883a 	mov	r4,r21
   24d8c:	00228440 	call	22844 <__swsetup_r>
   24d90:	1000eb1e 	bne	r2,zero,25140 <__sfvwrite_r+0x4a4>
   24d94:	80c0030b 	ldhu	r3,12(r16)
   24d98:	a4400017 	ldw	r17,0(r20)
   24d9c:	1880008c 	andi	r2,r3,2
   24da0:	103fd61e 	bne	r2,zero,24cfc <__alt_data_end+0xfffe4cfc>
   24da4:	1880004c 	andi	r2,r3,1
   24da8:	10003f1e 	bne	r2,zero,24ea8 <__sfvwrite_r+0x20c>
   24dac:	0039883a 	mov	fp,zero
   24db0:	0025883a 	mov	r18,zero
   24db4:	90001a26 	beq	r18,zero,24e20 <__sfvwrite_r+0x184>
   24db8:	1880800c 	andi	r2,r3,512
   24dbc:	84c00217 	ldw	r19,8(r16)
   24dc0:	10002126 	beq	r2,zero,24e48 <__sfvwrite_r+0x1ac>
   24dc4:	982f883a 	mov	r23,r19
   24dc8:	94c09336 	bltu	r18,r19,25018 <__sfvwrite_r+0x37c>
   24dcc:	1881200c 	andi	r2,r3,1152
   24dd0:	10009e1e 	bne	r2,zero,2504c <__sfvwrite_r+0x3b0>
   24dd4:	81000017 	ldw	r4,0(r16)
   24dd8:	b80d883a 	mov	r6,r23
   24ddc:	e00b883a 	mov	r5,fp
   24de0:	0025fb00 	call	25fb0 <memmove>
   24de4:	80c00217 	ldw	r3,8(r16)
   24de8:	81000017 	ldw	r4,0(r16)
   24dec:	9005883a 	mov	r2,r18
   24df0:	1ce7c83a 	sub	r19,r3,r19
   24df4:	25cf883a 	add	r7,r4,r23
   24df8:	84c00215 	stw	r19,8(r16)
   24dfc:	81c00015 	stw	r7,0(r16)
   24e00:	a0c00217 	ldw	r3,8(r20)
   24e04:	e0b9883a 	add	fp,fp,r2
   24e08:	90a5c83a 	sub	r18,r18,r2
   24e0c:	18a7c83a 	sub	r19,r3,r2
   24e10:	a4c00215 	stw	r19,8(r20)
   24e14:	983fce26 	beq	r19,zero,24d50 <__alt_data_end+0xfffe4d50>
   24e18:	80c0030b 	ldhu	r3,12(r16)
   24e1c:	903fe61e 	bne	r18,zero,24db8 <__alt_data_end+0xfffe4db8>
   24e20:	8f000017 	ldw	fp,0(r17)
   24e24:	8c800117 	ldw	r18,4(r17)
   24e28:	8c400204 	addi	r17,r17,8
   24e2c:	003fe106 	br	24db4 <__alt_data_end+0xfffe4db4>
   24e30:	8cc00017 	ldw	r19,0(r17)
   24e34:	8c800117 	ldw	r18,4(r17)
   24e38:	8c400204 	addi	r17,r17,8
   24e3c:	003fb306 	br	24d0c <__alt_data_end+0xfffe4d0c>
   24e40:	0005883a 	mov	r2,zero
   24e44:	f800283a 	ret
   24e48:	81000017 	ldw	r4,0(r16)
   24e4c:	80800417 	ldw	r2,16(r16)
   24e50:	11005736 	bltu	r2,r4,24fb0 <__sfvwrite_r+0x314>
   24e54:	85c00517 	ldw	r23,20(r16)
   24e58:	95c05536 	bltu	r18,r23,24fb0 <__sfvwrite_r+0x314>
   24e5c:	00a00034 	movhi	r2,32768
   24e60:	10bfffc4 	addi	r2,r2,-1
   24e64:	9009883a 	mov	r4,r18
   24e68:	1480012e 	bgeu	r2,r18,24e70 <__sfvwrite_r+0x1d4>
   24e6c:	1009883a 	mov	r4,r2
   24e70:	b80b883a 	mov	r5,r23
   24e74:	002a4a00 	call	2a4a0 <__divsi3>
   24e78:	15cf383a 	mul	r7,r2,r23
   24e7c:	81400717 	ldw	r5,28(r16)
   24e80:	80800917 	ldw	r2,36(r16)
   24e84:	e00d883a 	mov	r6,fp
   24e88:	a809883a 	mov	r4,r21
   24e8c:	103ee83a 	callr	r2
   24e90:	00bfdb16 	blt	zero,r2,24e00 <__alt_data_end+0xfffe4e00>
   24e94:	8080030b 	ldhu	r2,12(r16)
   24e98:	10801014 	ori	r2,r2,64
   24e9c:	8080030d 	sth	r2,12(r16)
   24ea0:	00bfffc4 	movi	r2,-1
   24ea4:	003fab06 	br	24d54 <__alt_data_end+0xfffe4d54>
   24ea8:	0027883a 	mov	r19,zero
   24eac:	0011883a 	mov	r8,zero
   24eb0:	0039883a 	mov	fp,zero
   24eb4:	0025883a 	mov	r18,zero
   24eb8:	90001f26 	beq	r18,zero,24f38 <__sfvwrite_r+0x29c>
   24ebc:	40005a26 	beq	r8,zero,25028 <__sfvwrite_r+0x38c>
   24ec0:	982d883a 	mov	r22,r19
   24ec4:	94c0012e 	bgeu	r18,r19,24ecc <__sfvwrite_r+0x230>
   24ec8:	902d883a 	mov	r22,r18
   24ecc:	81000017 	ldw	r4,0(r16)
   24ed0:	80800417 	ldw	r2,16(r16)
   24ed4:	b02f883a 	mov	r23,r22
   24ed8:	81c00517 	ldw	r7,20(r16)
   24edc:	1100032e 	bgeu	r2,r4,24eec <__sfvwrite_r+0x250>
   24ee0:	80c00217 	ldw	r3,8(r16)
   24ee4:	38c7883a 	add	r3,r7,r3
   24ee8:	1d801816 	blt	r3,r22,24f4c <__sfvwrite_r+0x2b0>
   24eec:	b1c03e16 	blt	r22,r7,24fe8 <__sfvwrite_r+0x34c>
   24ef0:	80800917 	ldw	r2,36(r16)
   24ef4:	81400717 	ldw	r5,28(r16)
   24ef8:	e00d883a 	mov	r6,fp
   24efc:	da000115 	stw	r8,4(sp)
   24f00:	a809883a 	mov	r4,r21
   24f04:	103ee83a 	callr	r2
   24f08:	102f883a 	mov	r23,r2
   24f0c:	da000117 	ldw	r8,4(sp)
   24f10:	00bfe00e 	bge	zero,r2,24e94 <__alt_data_end+0xfffe4e94>
   24f14:	9de7c83a 	sub	r19,r19,r23
   24f18:	98001f26 	beq	r19,zero,24f98 <__sfvwrite_r+0x2fc>
   24f1c:	a0800217 	ldw	r2,8(r20)
   24f20:	e5f9883a 	add	fp,fp,r23
   24f24:	95e5c83a 	sub	r18,r18,r23
   24f28:	15efc83a 	sub	r23,r2,r23
   24f2c:	a5c00215 	stw	r23,8(r20)
   24f30:	b83f8726 	beq	r23,zero,24d50 <__alt_data_end+0xfffe4d50>
   24f34:	903fe11e 	bne	r18,zero,24ebc <__alt_data_end+0xfffe4ebc>
   24f38:	8f000017 	ldw	fp,0(r17)
   24f3c:	8c800117 	ldw	r18,4(r17)
   24f40:	0011883a 	mov	r8,zero
   24f44:	8c400204 	addi	r17,r17,8
   24f48:	003fdb06 	br	24eb8 <__alt_data_end+0xfffe4eb8>
   24f4c:	180d883a 	mov	r6,r3
   24f50:	e00b883a 	mov	r5,fp
   24f54:	da000115 	stw	r8,4(sp)
   24f58:	d8c00015 	stw	r3,0(sp)
   24f5c:	0025fb00 	call	25fb0 <memmove>
   24f60:	d8c00017 	ldw	r3,0(sp)
   24f64:	80800017 	ldw	r2,0(r16)
   24f68:	800b883a 	mov	r5,r16
   24f6c:	a809883a 	mov	r4,r21
   24f70:	10c5883a 	add	r2,r2,r3
   24f74:	80800015 	stw	r2,0(r16)
   24f78:	d8c00015 	stw	r3,0(sp)
   24f7c:	002443c0 	call	2443c <_fflush_r>
   24f80:	d8c00017 	ldw	r3,0(sp)
   24f84:	da000117 	ldw	r8,4(sp)
   24f88:	103fc21e 	bne	r2,zero,24e94 <__alt_data_end+0xfffe4e94>
   24f8c:	182f883a 	mov	r23,r3
   24f90:	9de7c83a 	sub	r19,r19,r23
   24f94:	983fe11e 	bne	r19,zero,24f1c <__alt_data_end+0xfffe4f1c>
   24f98:	800b883a 	mov	r5,r16
   24f9c:	a809883a 	mov	r4,r21
   24fa0:	002443c0 	call	2443c <_fflush_r>
   24fa4:	103fbb1e 	bne	r2,zero,24e94 <__alt_data_end+0xfffe4e94>
   24fa8:	0011883a 	mov	r8,zero
   24fac:	003fdb06 	br	24f1c <__alt_data_end+0xfffe4f1c>
   24fb0:	94c0012e 	bgeu	r18,r19,24fb8 <__sfvwrite_r+0x31c>
   24fb4:	9027883a 	mov	r19,r18
   24fb8:	980d883a 	mov	r6,r19
   24fbc:	e00b883a 	mov	r5,fp
   24fc0:	0025fb00 	call	25fb0 <memmove>
   24fc4:	80800217 	ldw	r2,8(r16)
   24fc8:	80c00017 	ldw	r3,0(r16)
   24fcc:	14c5c83a 	sub	r2,r2,r19
   24fd0:	1cc7883a 	add	r3,r3,r19
   24fd4:	80800215 	stw	r2,8(r16)
   24fd8:	80c00015 	stw	r3,0(r16)
   24fdc:	10004326 	beq	r2,zero,250ec <__sfvwrite_r+0x450>
   24fe0:	9805883a 	mov	r2,r19
   24fe4:	003f8606 	br	24e00 <__alt_data_end+0xfffe4e00>
   24fe8:	b00d883a 	mov	r6,r22
   24fec:	e00b883a 	mov	r5,fp
   24ff0:	da000115 	stw	r8,4(sp)
   24ff4:	0025fb00 	call	25fb0 <memmove>
   24ff8:	80800217 	ldw	r2,8(r16)
   24ffc:	80c00017 	ldw	r3,0(r16)
   25000:	da000117 	ldw	r8,4(sp)
   25004:	1585c83a 	sub	r2,r2,r22
   25008:	1dad883a 	add	r22,r3,r22
   2500c:	80800215 	stw	r2,8(r16)
   25010:	85800015 	stw	r22,0(r16)
   25014:	003fbf06 	br	24f14 <__alt_data_end+0xfffe4f14>
   25018:	81000017 	ldw	r4,0(r16)
   2501c:	9027883a 	mov	r19,r18
   25020:	902f883a 	mov	r23,r18
   25024:	003f6c06 	br	24dd8 <__alt_data_end+0xfffe4dd8>
   25028:	900d883a 	mov	r6,r18
   2502c:	01400284 	movi	r5,10
   25030:	e009883a 	mov	r4,fp
   25034:	0025d840 	call	25d84 <memchr>
   25038:	10003e26 	beq	r2,zero,25134 <__sfvwrite_r+0x498>
   2503c:	10800044 	addi	r2,r2,1
   25040:	1727c83a 	sub	r19,r2,fp
   25044:	02000044 	movi	r8,1
   25048:	003f9d06 	br	24ec0 <__alt_data_end+0xfffe4ec0>
   2504c:	80800517 	ldw	r2,20(r16)
   25050:	81400417 	ldw	r5,16(r16)
   25054:	81c00017 	ldw	r7,0(r16)
   25058:	10a7883a 	add	r19,r2,r2
   2505c:	9885883a 	add	r2,r19,r2
   25060:	1026d7fa 	srli	r19,r2,31
   25064:	396dc83a 	sub	r22,r7,r5
   25068:	b1000044 	addi	r4,r22,1
   2506c:	9885883a 	add	r2,r19,r2
   25070:	1027d07a 	srai	r19,r2,1
   25074:	2485883a 	add	r2,r4,r18
   25078:	980d883a 	mov	r6,r19
   2507c:	9880022e 	bgeu	r19,r2,25088 <__sfvwrite_r+0x3ec>
   25080:	1027883a 	mov	r19,r2
   25084:	100d883a 	mov	r6,r2
   25088:	18c1000c 	andi	r3,r3,1024
   2508c:	18001c26 	beq	r3,zero,25100 <__sfvwrite_r+0x464>
   25090:	300b883a 	mov	r5,r6
   25094:	a809883a 	mov	r4,r21
   25098:	00255780 	call	25578 <_malloc_r>
   2509c:	102f883a 	mov	r23,r2
   250a0:	10002926 	beq	r2,zero,25148 <__sfvwrite_r+0x4ac>
   250a4:	81400417 	ldw	r5,16(r16)
   250a8:	b00d883a 	mov	r6,r22
   250ac:	1009883a 	mov	r4,r2
   250b0:	0025e680 	call	25e68 <memcpy>
   250b4:	8080030b 	ldhu	r2,12(r16)
   250b8:	00fedfc4 	movi	r3,-1153
   250bc:	10c4703a 	and	r2,r2,r3
   250c0:	10802014 	ori	r2,r2,128
   250c4:	8080030d 	sth	r2,12(r16)
   250c8:	bd89883a 	add	r4,r23,r22
   250cc:	9d8fc83a 	sub	r7,r19,r22
   250d0:	85c00415 	stw	r23,16(r16)
   250d4:	84c00515 	stw	r19,20(r16)
   250d8:	81000015 	stw	r4,0(r16)
   250dc:	9027883a 	mov	r19,r18
   250e0:	81c00215 	stw	r7,8(r16)
   250e4:	902f883a 	mov	r23,r18
   250e8:	003f3b06 	br	24dd8 <__alt_data_end+0xfffe4dd8>
   250ec:	800b883a 	mov	r5,r16
   250f0:	a809883a 	mov	r4,r21
   250f4:	002443c0 	call	2443c <_fflush_r>
   250f8:	103fb926 	beq	r2,zero,24fe0 <__alt_data_end+0xfffe4fe0>
   250fc:	003f6506 	br	24e94 <__alt_data_end+0xfffe4e94>
   25100:	a809883a 	mov	r4,r21
   25104:	00272300 	call	27230 <_realloc_r>
   25108:	102f883a 	mov	r23,r2
   2510c:	103fee1e 	bne	r2,zero,250c8 <__alt_data_end+0xfffe50c8>
   25110:	81400417 	ldw	r5,16(r16)
   25114:	a809883a 	mov	r4,r21
   25118:	002498c0 	call	2498c <_free_r>
   2511c:	8080030b 	ldhu	r2,12(r16)
   25120:	00ffdfc4 	movi	r3,-129
   25124:	1884703a 	and	r2,r3,r2
   25128:	00c00304 	movi	r3,12
   2512c:	a8c00015 	stw	r3,0(r21)
   25130:	003f5906 	br	24e98 <__alt_data_end+0xfffe4e98>
   25134:	94c00044 	addi	r19,r18,1
   25138:	02000044 	movi	r8,1
   2513c:	003f6006 	br	24ec0 <__alt_data_end+0xfffe4ec0>
   25140:	00bfffc4 	movi	r2,-1
   25144:	003f0306 	br	24d54 <__alt_data_end+0xfffe4d54>
   25148:	00800304 	movi	r2,12
   2514c:	a8800015 	stw	r2,0(r21)
   25150:	8080030b 	ldhu	r2,12(r16)
   25154:	003f5006 	br	24e98 <__alt_data_end+0xfffe4e98>

00025158 <_fwalk>:
   25158:	defff704 	addi	sp,sp,-36
   2515c:	dd000415 	stw	r20,16(sp)
   25160:	dfc00815 	stw	ra,32(sp)
   25164:	ddc00715 	stw	r23,28(sp)
   25168:	dd800615 	stw	r22,24(sp)
   2516c:	dd400515 	stw	r21,20(sp)
   25170:	dcc00315 	stw	r19,12(sp)
   25174:	dc800215 	stw	r18,8(sp)
   25178:	dc400115 	stw	r17,4(sp)
   2517c:	dc000015 	stw	r16,0(sp)
   25180:	2500b804 	addi	r20,r4,736
   25184:	a0002326 	beq	r20,zero,25214 <_fwalk+0xbc>
   25188:	282b883a 	mov	r21,r5
   2518c:	002f883a 	mov	r23,zero
   25190:	05800044 	movi	r22,1
   25194:	04ffffc4 	movi	r19,-1
   25198:	a4400117 	ldw	r17,4(r20)
   2519c:	a4800217 	ldw	r18,8(r20)
   251a0:	8c7fffc4 	addi	r17,r17,-1
   251a4:	88000d16 	blt	r17,zero,251dc <_fwalk+0x84>
   251a8:	94000304 	addi	r16,r18,12
   251ac:	94800384 	addi	r18,r18,14
   251b0:	8080000b 	ldhu	r2,0(r16)
   251b4:	8c7fffc4 	addi	r17,r17,-1
   251b8:	813ffd04 	addi	r4,r16,-12
   251bc:	b080042e 	bgeu	r22,r2,251d0 <_fwalk+0x78>
   251c0:	9080000f 	ldh	r2,0(r18)
   251c4:	14c00226 	beq	r2,r19,251d0 <_fwalk+0x78>
   251c8:	a83ee83a 	callr	r21
   251cc:	b8aeb03a 	or	r23,r23,r2
   251d0:	84001a04 	addi	r16,r16,104
   251d4:	94801a04 	addi	r18,r18,104
   251d8:	8cfff51e 	bne	r17,r19,251b0 <__alt_data_end+0xfffe51b0>
   251dc:	a5000017 	ldw	r20,0(r20)
   251e0:	a03fed1e 	bne	r20,zero,25198 <__alt_data_end+0xfffe5198>
   251e4:	b805883a 	mov	r2,r23
   251e8:	dfc00817 	ldw	ra,32(sp)
   251ec:	ddc00717 	ldw	r23,28(sp)
   251f0:	dd800617 	ldw	r22,24(sp)
   251f4:	dd400517 	ldw	r21,20(sp)
   251f8:	dd000417 	ldw	r20,16(sp)
   251fc:	dcc00317 	ldw	r19,12(sp)
   25200:	dc800217 	ldw	r18,8(sp)
   25204:	dc400117 	ldw	r17,4(sp)
   25208:	dc000017 	ldw	r16,0(sp)
   2520c:	dec00904 	addi	sp,sp,36
   25210:	f800283a 	ret
   25214:	002f883a 	mov	r23,zero
   25218:	003ff206 	br	251e4 <__alt_data_end+0xfffe51e4>

0002521c <_fwalk_reent>:
   2521c:	defff704 	addi	sp,sp,-36
   25220:	dd000415 	stw	r20,16(sp)
   25224:	dfc00815 	stw	ra,32(sp)
   25228:	ddc00715 	stw	r23,28(sp)
   2522c:	dd800615 	stw	r22,24(sp)
   25230:	dd400515 	stw	r21,20(sp)
   25234:	dcc00315 	stw	r19,12(sp)
   25238:	dc800215 	stw	r18,8(sp)
   2523c:	dc400115 	stw	r17,4(sp)
   25240:	dc000015 	stw	r16,0(sp)
   25244:	2500b804 	addi	r20,r4,736
   25248:	a0002326 	beq	r20,zero,252d8 <_fwalk_reent+0xbc>
   2524c:	282b883a 	mov	r21,r5
   25250:	2027883a 	mov	r19,r4
   25254:	002f883a 	mov	r23,zero
   25258:	05800044 	movi	r22,1
   2525c:	04bfffc4 	movi	r18,-1
   25260:	a4400117 	ldw	r17,4(r20)
   25264:	a4000217 	ldw	r16,8(r20)
   25268:	8c7fffc4 	addi	r17,r17,-1
   2526c:	88000c16 	blt	r17,zero,252a0 <_fwalk_reent+0x84>
   25270:	84000304 	addi	r16,r16,12
   25274:	8080000b 	ldhu	r2,0(r16)
   25278:	8c7fffc4 	addi	r17,r17,-1
   2527c:	817ffd04 	addi	r5,r16,-12
   25280:	b080052e 	bgeu	r22,r2,25298 <_fwalk_reent+0x7c>
   25284:	8080008f 	ldh	r2,2(r16)
   25288:	9809883a 	mov	r4,r19
   2528c:	14800226 	beq	r2,r18,25298 <_fwalk_reent+0x7c>
   25290:	a83ee83a 	callr	r21
   25294:	b8aeb03a 	or	r23,r23,r2
   25298:	84001a04 	addi	r16,r16,104
   2529c:	8cbff51e 	bne	r17,r18,25274 <__alt_data_end+0xfffe5274>
   252a0:	a5000017 	ldw	r20,0(r20)
   252a4:	a03fee1e 	bne	r20,zero,25260 <__alt_data_end+0xfffe5260>
   252a8:	b805883a 	mov	r2,r23
   252ac:	dfc00817 	ldw	ra,32(sp)
   252b0:	ddc00717 	ldw	r23,28(sp)
   252b4:	dd800617 	ldw	r22,24(sp)
   252b8:	dd400517 	ldw	r21,20(sp)
   252bc:	dd000417 	ldw	r20,16(sp)
   252c0:	dcc00317 	ldw	r19,12(sp)
   252c4:	dc800217 	ldw	r18,8(sp)
   252c8:	dc400117 	ldw	r17,4(sp)
   252cc:	dc000017 	ldw	r16,0(sp)
   252d0:	dec00904 	addi	sp,sp,36
   252d4:	f800283a 	ret
   252d8:	002f883a 	mov	r23,zero
   252dc:	003ff206 	br	252a8 <__alt_data_end+0xfffe52a8>

000252e0 <_setlocale_r>:
   252e0:	30001b26 	beq	r6,zero,25350 <_setlocale_r+0x70>
   252e4:	014000f4 	movhi	r5,3
   252e8:	defffe04 	addi	sp,sp,-8
   252ec:	29429a04 	addi	r5,r5,2664
   252f0:	3009883a 	mov	r4,r6
   252f4:	dc000015 	stw	r16,0(sp)
   252f8:	dfc00115 	stw	ra,4(sp)
   252fc:	3021883a 	mov	r16,r6
   25300:	00279980 	call	27998 <strcmp>
   25304:	1000061e 	bne	r2,zero,25320 <_setlocale_r+0x40>
   25308:	008000f4 	movhi	r2,3
   2530c:	10829904 	addi	r2,r2,2660
   25310:	dfc00117 	ldw	ra,4(sp)
   25314:	dc000017 	ldw	r16,0(sp)
   25318:	dec00204 	addi	sp,sp,8
   2531c:	f800283a 	ret
   25320:	014000f4 	movhi	r5,3
   25324:	29429904 	addi	r5,r5,2660
   25328:	8009883a 	mov	r4,r16
   2532c:	00279980 	call	27998 <strcmp>
   25330:	103ff526 	beq	r2,zero,25308 <__alt_data_end+0xfffe5308>
   25334:	014000f4 	movhi	r5,3
   25338:	29428404 	addi	r5,r5,2576
   2533c:	8009883a 	mov	r4,r16
   25340:	00279980 	call	27998 <strcmp>
   25344:	103ff026 	beq	r2,zero,25308 <__alt_data_end+0xfffe5308>
   25348:	0005883a 	mov	r2,zero
   2534c:	003ff006 	br	25310 <__alt_data_end+0xfffe5310>
   25350:	008000f4 	movhi	r2,3
   25354:	10829904 	addi	r2,r2,2660
   25358:	f800283a 	ret

0002535c <__locale_charset>:
   2535c:	008000f4 	movhi	r2,3
   25360:	10845a04 	addi	r2,r2,4456
   25364:	f800283a 	ret

00025368 <__locale_mb_cur_max>:
   25368:	008000f4 	movhi	r2,3
   2536c:	108a3d04 	addi	r2,r2,10484
   25370:	10800017 	ldw	r2,0(r2)
   25374:	f800283a 	ret

00025378 <__locale_msgcharset>:
   25378:	008000f4 	movhi	r2,3
   2537c:	10845204 	addi	r2,r2,4424
   25380:	f800283a 	ret

00025384 <__locale_cjk_lang>:
   25384:	0005883a 	mov	r2,zero
   25388:	f800283a 	ret

0002538c <_localeconv_r>:
   2538c:	008000f4 	movhi	r2,3
   25390:	10846204 	addi	r2,r2,4488
   25394:	f800283a 	ret

00025398 <setlocale>:
   25398:	008000f4 	movhi	r2,3
   2539c:	108a3c04 	addi	r2,r2,10480
   253a0:	280d883a 	mov	r6,r5
   253a4:	200b883a 	mov	r5,r4
   253a8:	11000017 	ldw	r4,0(r2)
   253ac:	00252e01 	jmpi	252e0 <_setlocale_r>

000253b0 <localeconv>:
   253b0:	008000f4 	movhi	r2,3
   253b4:	10846204 	addi	r2,r2,4488
   253b8:	f800283a 	ret

000253bc <__smakebuf_r>:
   253bc:	2880030b 	ldhu	r2,12(r5)
   253c0:	10c0008c 	andi	r3,r2,2
   253c4:	1800411e 	bne	r3,zero,254cc <__smakebuf_r+0x110>
   253c8:	deffec04 	addi	sp,sp,-80
   253cc:	dc000f15 	stw	r16,60(sp)
   253d0:	2821883a 	mov	r16,r5
   253d4:	2940038f 	ldh	r5,14(r5)
   253d8:	dc401015 	stw	r17,64(sp)
   253dc:	dfc01315 	stw	ra,76(sp)
   253e0:	dcc01215 	stw	r19,72(sp)
   253e4:	dc801115 	stw	r18,68(sp)
   253e8:	2023883a 	mov	r17,r4
   253ec:	28001c16 	blt	r5,zero,25460 <__smakebuf_r+0xa4>
   253f0:	d80d883a 	mov	r6,sp
   253f4:	00295400 	call	29540 <_fstat_r>
   253f8:	10001816 	blt	r2,zero,2545c <__smakebuf_r+0xa0>
   253fc:	d8800117 	ldw	r2,4(sp)
   25400:	00e00014 	movui	r3,32768
   25404:	10bc000c 	andi	r2,r2,61440
   25408:	14c80020 	cmpeqi	r19,r2,8192
   2540c:	10c03726 	beq	r2,r3,254ec <__smakebuf_r+0x130>
   25410:	80c0030b 	ldhu	r3,12(r16)
   25414:	18c20014 	ori	r3,r3,2048
   25418:	80c0030d 	sth	r3,12(r16)
   2541c:	00c80004 	movi	r3,8192
   25420:	10c0521e 	bne	r2,r3,2556c <__smakebuf_r+0x1b0>
   25424:	8140038f 	ldh	r5,14(r16)
   25428:	8809883a 	mov	r4,r17
   2542c:	002959c0 	call	2959c <_isatty_r>
   25430:	10004c26 	beq	r2,zero,25564 <__smakebuf_r+0x1a8>
   25434:	8080030b 	ldhu	r2,12(r16)
   25438:	80c010c4 	addi	r3,r16,67
   2543c:	80c00015 	stw	r3,0(r16)
   25440:	10800054 	ori	r2,r2,1
   25444:	8080030d 	sth	r2,12(r16)
   25448:	00800044 	movi	r2,1
   2544c:	80c00415 	stw	r3,16(r16)
   25450:	80800515 	stw	r2,20(r16)
   25454:	04810004 	movi	r18,1024
   25458:	00000706 	br	25478 <__smakebuf_r+0xbc>
   2545c:	8080030b 	ldhu	r2,12(r16)
   25460:	10c0200c 	andi	r3,r2,128
   25464:	18001f1e 	bne	r3,zero,254e4 <__smakebuf_r+0x128>
   25468:	04810004 	movi	r18,1024
   2546c:	10820014 	ori	r2,r2,2048
   25470:	8080030d 	sth	r2,12(r16)
   25474:	0027883a 	mov	r19,zero
   25478:	900b883a 	mov	r5,r18
   2547c:	8809883a 	mov	r4,r17
   25480:	00255780 	call	25578 <_malloc_r>
   25484:	10002c26 	beq	r2,zero,25538 <__smakebuf_r+0x17c>
   25488:	80c0030b 	ldhu	r3,12(r16)
   2548c:	010000b4 	movhi	r4,2
   25490:	21113404 	addi	r4,r4,17616
   25494:	89000f15 	stw	r4,60(r17)
   25498:	18c02014 	ori	r3,r3,128
   2549c:	80c0030d 	sth	r3,12(r16)
   254a0:	80800015 	stw	r2,0(r16)
   254a4:	80800415 	stw	r2,16(r16)
   254a8:	84800515 	stw	r18,20(r16)
   254ac:	98001a1e 	bne	r19,zero,25518 <__smakebuf_r+0x15c>
   254b0:	dfc01317 	ldw	ra,76(sp)
   254b4:	dcc01217 	ldw	r19,72(sp)
   254b8:	dc801117 	ldw	r18,68(sp)
   254bc:	dc401017 	ldw	r17,64(sp)
   254c0:	dc000f17 	ldw	r16,60(sp)
   254c4:	dec01404 	addi	sp,sp,80
   254c8:	f800283a 	ret
   254cc:	288010c4 	addi	r2,r5,67
   254d0:	28800015 	stw	r2,0(r5)
   254d4:	28800415 	stw	r2,16(r5)
   254d8:	00800044 	movi	r2,1
   254dc:	28800515 	stw	r2,20(r5)
   254e0:	f800283a 	ret
   254e4:	04801004 	movi	r18,64
   254e8:	003fe006 	br	2546c <__alt_data_end+0xfffe546c>
   254ec:	81000a17 	ldw	r4,40(r16)
   254f0:	00c000b4 	movhi	r3,2
   254f4:	18de4d04 	addi	r3,r3,31028
   254f8:	20ffc51e 	bne	r4,r3,25410 <__alt_data_end+0xfffe5410>
   254fc:	8080030b 	ldhu	r2,12(r16)
   25500:	04810004 	movi	r18,1024
   25504:	84801315 	stw	r18,76(r16)
   25508:	1484b03a 	or	r2,r2,r18
   2550c:	8080030d 	sth	r2,12(r16)
   25510:	0027883a 	mov	r19,zero
   25514:	003fd806 	br	25478 <__alt_data_end+0xfffe5478>
   25518:	8140038f 	ldh	r5,14(r16)
   2551c:	8809883a 	mov	r4,r17
   25520:	002959c0 	call	2959c <_isatty_r>
   25524:	103fe226 	beq	r2,zero,254b0 <__alt_data_end+0xfffe54b0>
   25528:	8080030b 	ldhu	r2,12(r16)
   2552c:	10800054 	ori	r2,r2,1
   25530:	8080030d 	sth	r2,12(r16)
   25534:	003fde06 	br	254b0 <__alt_data_end+0xfffe54b0>
   25538:	8080030b 	ldhu	r2,12(r16)
   2553c:	10c0800c 	andi	r3,r2,512
   25540:	183fdb1e 	bne	r3,zero,254b0 <__alt_data_end+0xfffe54b0>
   25544:	10800094 	ori	r2,r2,2
   25548:	80c010c4 	addi	r3,r16,67
   2554c:	8080030d 	sth	r2,12(r16)
   25550:	00800044 	movi	r2,1
   25554:	80c00015 	stw	r3,0(r16)
   25558:	80c00415 	stw	r3,16(r16)
   2555c:	80800515 	stw	r2,20(r16)
   25560:	003fd306 	br	254b0 <__alt_data_end+0xfffe54b0>
   25564:	04810004 	movi	r18,1024
   25568:	003fc306 	br	25478 <__alt_data_end+0xfffe5478>
   2556c:	0027883a 	mov	r19,zero
   25570:	04810004 	movi	r18,1024
   25574:	003fc006 	br	25478 <__alt_data_end+0xfffe5478>

00025578 <_malloc_r>:
   25578:	defff504 	addi	sp,sp,-44
   2557c:	dc800315 	stw	r18,12(sp)
   25580:	dfc00a15 	stw	ra,40(sp)
   25584:	df000915 	stw	fp,36(sp)
   25588:	ddc00815 	stw	r23,32(sp)
   2558c:	dd800715 	stw	r22,28(sp)
   25590:	dd400615 	stw	r21,24(sp)
   25594:	dd000515 	stw	r20,20(sp)
   25598:	dcc00415 	stw	r19,16(sp)
   2559c:	dc400215 	stw	r17,8(sp)
   255a0:	dc000115 	stw	r16,4(sp)
   255a4:	288002c4 	addi	r2,r5,11
   255a8:	00c00584 	movi	r3,22
   255ac:	2025883a 	mov	r18,r4
   255b0:	18807f2e 	bgeu	r3,r2,257b0 <_malloc_r+0x238>
   255b4:	047ffe04 	movi	r17,-8
   255b8:	1462703a 	and	r17,r2,r17
   255bc:	8800a316 	blt	r17,zero,2584c <_malloc_r+0x2d4>
   255c0:	8940a236 	bltu	r17,r5,2584c <_malloc_r+0x2d4>
   255c4:	002d2380 	call	2d238 <__malloc_lock>
   255c8:	00807dc4 	movi	r2,503
   255cc:	1441e92e 	bgeu	r2,r17,25d74 <_malloc_r+0x7fc>
   255d0:	8804d27a 	srli	r2,r17,9
   255d4:	1000a126 	beq	r2,zero,2585c <_malloc_r+0x2e4>
   255d8:	00c00104 	movi	r3,4
   255dc:	18811e36 	bltu	r3,r2,25a58 <_malloc_r+0x4e0>
   255e0:	8804d1ba 	srli	r2,r17,6
   255e4:	12000e44 	addi	r8,r2,57
   255e8:	11c00e04 	addi	r7,r2,56
   255ec:	4209883a 	add	r4,r8,r8
   255f0:	04c000f4 	movhi	r19,3
   255f4:	2109883a 	add	r4,r4,r4
   255f8:	9cc47004 	addi	r19,r19,4544
   255fc:	2109883a 	add	r4,r4,r4
   25600:	9909883a 	add	r4,r19,r4
   25604:	24000117 	ldw	r16,4(r4)
   25608:	213ffe04 	addi	r4,r4,-8
   2560c:	24009726 	beq	r4,r16,2586c <_malloc_r+0x2f4>
   25610:	80800117 	ldw	r2,4(r16)
   25614:	01bfff04 	movi	r6,-4
   25618:	014003c4 	movi	r5,15
   2561c:	1184703a 	and	r2,r2,r6
   25620:	1447c83a 	sub	r3,r2,r17
   25624:	28c00716 	blt	r5,r3,25644 <_malloc_r+0xcc>
   25628:	1800920e 	bge	r3,zero,25874 <_malloc_r+0x2fc>
   2562c:	84000317 	ldw	r16,12(r16)
   25630:	24008e26 	beq	r4,r16,2586c <_malloc_r+0x2f4>
   25634:	80800117 	ldw	r2,4(r16)
   25638:	1184703a 	and	r2,r2,r6
   2563c:	1447c83a 	sub	r3,r2,r17
   25640:	28fff90e 	bge	r5,r3,25628 <__alt_data_end+0xfffe5628>
   25644:	3809883a 	mov	r4,r7
   25648:	018000f4 	movhi	r6,3
   2564c:	9c000417 	ldw	r16,16(r19)
   25650:	31847004 	addi	r6,r6,4544
   25654:	32000204 	addi	r8,r6,8
   25658:	82013426 	beq	r16,r8,25b2c <_malloc_r+0x5b4>
   2565c:	80c00117 	ldw	r3,4(r16)
   25660:	00bfff04 	movi	r2,-4
   25664:	188e703a 	and	r7,r3,r2
   25668:	3c45c83a 	sub	r2,r7,r17
   2566c:	00c003c4 	movi	r3,15
   25670:	18811f16 	blt	r3,r2,25af0 <_malloc_r+0x578>
   25674:	32000515 	stw	r8,20(r6)
   25678:	32000415 	stw	r8,16(r6)
   2567c:	10007f0e 	bge	r2,zero,2587c <_malloc_r+0x304>
   25680:	00807fc4 	movi	r2,511
   25684:	11c0fd36 	bltu	r2,r7,25a7c <_malloc_r+0x504>
   25688:	3806d0fa 	srli	r3,r7,3
   2568c:	01c00044 	movi	r7,1
   25690:	30800117 	ldw	r2,4(r6)
   25694:	19400044 	addi	r5,r3,1
   25698:	294b883a 	add	r5,r5,r5
   2569c:	1807d0ba 	srai	r3,r3,2
   256a0:	294b883a 	add	r5,r5,r5
   256a4:	294b883a 	add	r5,r5,r5
   256a8:	298b883a 	add	r5,r5,r6
   256ac:	38c6983a 	sll	r3,r7,r3
   256b0:	29c00017 	ldw	r7,0(r5)
   256b4:	2a7ffe04 	addi	r9,r5,-8
   256b8:	1886b03a 	or	r3,r3,r2
   256bc:	82400315 	stw	r9,12(r16)
   256c0:	81c00215 	stw	r7,8(r16)
   256c4:	30c00115 	stw	r3,4(r6)
   256c8:	2c000015 	stw	r16,0(r5)
   256cc:	3c000315 	stw	r16,12(r7)
   256d0:	2005d0ba 	srai	r2,r4,2
   256d4:	01400044 	movi	r5,1
   256d8:	288a983a 	sll	r5,r5,r2
   256dc:	19406f36 	bltu	r3,r5,2589c <_malloc_r+0x324>
   256e0:	28c4703a 	and	r2,r5,r3
   256e4:	10000a1e 	bne	r2,zero,25710 <_malloc_r+0x198>
   256e8:	00bfff04 	movi	r2,-4
   256ec:	294b883a 	add	r5,r5,r5
   256f0:	2088703a 	and	r4,r4,r2
   256f4:	28c4703a 	and	r2,r5,r3
   256f8:	21000104 	addi	r4,r4,4
   256fc:	1000041e 	bne	r2,zero,25710 <_malloc_r+0x198>
   25700:	294b883a 	add	r5,r5,r5
   25704:	28c4703a 	and	r2,r5,r3
   25708:	21000104 	addi	r4,r4,4
   2570c:	103ffc26 	beq	r2,zero,25700 <__alt_data_end+0xfffe5700>
   25710:	02bfff04 	movi	r10,-4
   25714:	024003c4 	movi	r9,15
   25718:	21800044 	addi	r6,r4,1
   2571c:	318d883a 	add	r6,r6,r6
   25720:	318d883a 	add	r6,r6,r6
   25724:	318d883a 	add	r6,r6,r6
   25728:	998d883a 	add	r6,r19,r6
   2572c:	333ffe04 	addi	r12,r6,-8
   25730:	2017883a 	mov	r11,r4
   25734:	31800104 	addi	r6,r6,4
   25738:	34000017 	ldw	r16,0(r6)
   2573c:	31fffd04 	addi	r7,r6,-12
   25740:	81c0041e 	bne	r16,r7,25754 <_malloc_r+0x1dc>
   25744:	0000fb06 	br	25b34 <_malloc_r+0x5bc>
   25748:	1801030e 	bge	r3,zero,25b58 <_malloc_r+0x5e0>
   2574c:	84000317 	ldw	r16,12(r16)
   25750:	81c0f826 	beq	r16,r7,25b34 <_malloc_r+0x5bc>
   25754:	80800117 	ldw	r2,4(r16)
   25758:	1284703a 	and	r2,r2,r10
   2575c:	1447c83a 	sub	r3,r2,r17
   25760:	48fff90e 	bge	r9,r3,25748 <__alt_data_end+0xfffe5748>
   25764:	80800317 	ldw	r2,12(r16)
   25768:	81000217 	ldw	r4,8(r16)
   2576c:	89400054 	ori	r5,r17,1
   25770:	81400115 	stw	r5,4(r16)
   25774:	20800315 	stw	r2,12(r4)
   25778:	11000215 	stw	r4,8(r2)
   2577c:	8463883a 	add	r17,r16,r17
   25780:	9c400515 	stw	r17,20(r19)
   25784:	9c400415 	stw	r17,16(r19)
   25788:	18800054 	ori	r2,r3,1
   2578c:	88800115 	stw	r2,4(r17)
   25790:	8a000315 	stw	r8,12(r17)
   25794:	8a000215 	stw	r8,8(r17)
   25798:	88e3883a 	add	r17,r17,r3
   2579c:	88c00015 	stw	r3,0(r17)
   257a0:	9009883a 	mov	r4,r18
   257a4:	002d25c0 	call	2d25c <__malloc_unlock>
   257a8:	80800204 	addi	r2,r16,8
   257ac:	00001b06 	br	2581c <_malloc_r+0x2a4>
   257b0:	04400404 	movi	r17,16
   257b4:	89402536 	bltu	r17,r5,2584c <_malloc_r+0x2d4>
   257b8:	002d2380 	call	2d238 <__malloc_lock>
   257bc:	00800184 	movi	r2,6
   257c0:	01000084 	movi	r4,2
   257c4:	04c000f4 	movhi	r19,3
   257c8:	1085883a 	add	r2,r2,r2
   257cc:	9cc47004 	addi	r19,r19,4544
   257d0:	1085883a 	add	r2,r2,r2
   257d4:	9885883a 	add	r2,r19,r2
   257d8:	14000117 	ldw	r16,4(r2)
   257dc:	10fffe04 	addi	r3,r2,-8
   257e0:	80c0d926 	beq	r16,r3,25b48 <_malloc_r+0x5d0>
   257e4:	80c00117 	ldw	r3,4(r16)
   257e8:	81000317 	ldw	r4,12(r16)
   257ec:	00bfff04 	movi	r2,-4
   257f0:	1884703a 	and	r2,r3,r2
   257f4:	81400217 	ldw	r5,8(r16)
   257f8:	8085883a 	add	r2,r16,r2
   257fc:	10c00117 	ldw	r3,4(r2)
   25800:	29000315 	stw	r4,12(r5)
   25804:	21400215 	stw	r5,8(r4)
   25808:	18c00054 	ori	r3,r3,1
   2580c:	10c00115 	stw	r3,4(r2)
   25810:	9009883a 	mov	r4,r18
   25814:	002d25c0 	call	2d25c <__malloc_unlock>
   25818:	80800204 	addi	r2,r16,8
   2581c:	dfc00a17 	ldw	ra,40(sp)
   25820:	df000917 	ldw	fp,36(sp)
   25824:	ddc00817 	ldw	r23,32(sp)
   25828:	dd800717 	ldw	r22,28(sp)
   2582c:	dd400617 	ldw	r21,24(sp)
   25830:	dd000517 	ldw	r20,20(sp)
   25834:	dcc00417 	ldw	r19,16(sp)
   25838:	dc800317 	ldw	r18,12(sp)
   2583c:	dc400217 	ldw	r17,8(sp)
   25840:	dc000117 	ldw	r16,4(sp)
   25844:	dec00b04 	addi	sp,sp,44
   25848:	f800283a 	ret
   2584c:	00800304 	movi	r2,12
   25850:	90800015 	stw	r2,0(r18)
   25854:	0005883a 	mov	r2,zero
   25858:	003ff006 	br	2581c <__alt_data_end+0xfffe581c>
   2585c:	01002004 	movi	r4,128
   25860:	02001004 	movi	r8,64
   25864:	01c00fc4 	movi	r7,63
   25868:	003f6106 	br	255f0 <__alt_data_end+0xfffe55f0>
   2586c:	4009883a 	mov	r4,r8
   25870:	003f7506 	br	25648 <__alt_data_end+0xfffe5648>
   25874:	81000317 	ldw	r4,12(r16)
   25878:	003fde06 	br	257f4 <__alt_data_end+0xfffe57f4>
   2587c:	81c5883a 	add	r2,r16,r7
   25880:	11400117 	ldw	r5,4(r2)
   25884:	9009883a 	mov	r4,r18
   25888:	29400054 	ori	r5,r5,1
   2588c:	11400115 	stw	r5,4(r2)
   25890:	002d25c0 	call	2d25c <__malloc_unlock>
   25894:	80800204 	addi	r2,r16,8
   25898:	003fe006 	br	2581c <__alt_data_end+0xfffe581c>
   2589c:	9c000217 	ldw	r16,8(r19)
   258a0:	00bfff04 	movi	r2,-4
   258a4:	85800117 	ldw	r22,4(r16)
   258a8:	b0ac703a 	and	r22,r22,r2
   258ac:	b4400336 	bltu	r22,r17,258bc <_malloc_r+0x344>
   258b0:	b445c83a 	sub	r2,r22,r17
   258b4:	00c003c4 	movi	r3,15
   258b8:	18805d16 	blt	r3,r2,25a30 <_malloc_r+0x4b8>
   258bc:	05c000f4 	movhi	r23,3
   258c0:	008000f4 	movhi	r2,3
   258c4:	10915c04 	addi	r2,r2,17776
   258c8:	bdca3e04 	addi	r23,r23,10488
   258cc:	15400017 	ldw	r21,0(r2)
   258d0:	b8c00017 	ldw	r3,0(r23)
   258d4:	00bfffc4 	movi	r2,-1
   258d8:	858d883a 	add	r6,r16,r22
   258dc:	8d6b883a 	add	r21,r17,r21
   258e0:	1880ea26 	beq	r3,r2,25c8c <_malloc_r+0x714>
   258e4:	ad4403c4 	addi	r21,r21,4111
   258e8:	00bc0004 	movi	r2,-4096
   258ec:	a8aa703a 	and	r21,r21,r2
   258f0:	a80b883a 	mov	r5,r21
   258f4:	9009883a 	mov	r4,r18
   258f8:	d9800015 	stw	r6,0(sp)
   258fc:	00278080 	call	27808 <_sbrk_r>
   25900:	1029883a 	mov	r20,r2
   25904:	00bfffc4 	movi	r2,-1
   25908:	d9800017 	ldw	r6,0(sp)
   2590c:	a080e826 	beq	r20,r2,25cb0 <_malloc_r+0x738>
   25910:	a180a636 	bltu	r20,r6,25bac <_malloc_r+0x634>
   25914:	070000f4 	movhi	fp,3
   25918:	e7116504 	addi	fp,fp,17812
   2591c:	e0800017 	ldw	r2,0(fp)
   25920:	a887883a 	add	r3,r21,r2
   25924:	e0c00015 	stw	r3,0(fp)
   25928:	3500e626 	beq	r6,r20,25cc4 <_malloc_r+0x74c>
   2592c:	b9000017 	ldw	r4,0(r23)
   25930:	00bfffc4 	movi	r2,-1
   25934:	2080ee26 	beq	r4,r2,25cf0 <_malloc_r+0x778>
   25938:	a185c83a 	sub	r2,r20,r6
   2593c:	10c5883a 	add	r2,r2,r3
   25940:	e0800015 	stw	r2,0(fp)
   25944:	a0c001cc 	andi	r3,r20,7
   25948:	1800bc26 	beq	r3,zero,25c3c <_malloc_r+0x6c4>
   2594c:	a0e9c83a 	sub	r20,r20,r3
   25950:	00840204 	movi	r2,4104
   25954:	a5000204 	addi	r20,r20,8
   25958:	10c7c83a 	sub	r3,r2,r3
   2595c:	a545883a 	add	r2,r20,r21
   25960:	1083ffcc 	andi	r2,r2,4095
   25964:	18abc83a 	sub	r21,r3,r2
   25968:	a80b883a 	mov	r5,r21
   2596c:	9009883a 	mov	r4,r18
   25970:	00278080 	call	27808 <_sbrk_r>
   25974:	00ffffc4 	movi	r3,-1
   25978:	10c0e126 	beq	r2,r3,25d00 <_malloc_r+0x788>
   2597c:	1505c83a 	sub	r2,r2,r20
   25980:	1545883a 	add	r2,r2,r21
   25984:	10800054 	ori	r2,r2,1
   25988:	e0c00017 	ldw	r3,0(fp)
   2598c:	9d000215 	stw	r20,8(r19)
   25990:	a0800115 	stw	r2,4(r20)
   25994:	a8c7883a 	add	r3,r21,r3
   25998:	e0c00015 	stw	r3,0(fp)
   2599c:	84c00e26 	beq	r16,r19,259d8 <_malloc_r+0x460>
   259a0:	018003c4 	movi	r6,15
   259a4:	3580a72e 	bgeu	r6,r22,25c44 <_malloc_r+0x6cc>
   259a8:	81400117 	ldw	r5,4(r16)
   259ac:	013ffe04 	movi	r4,-8
   259b0:	b0bffd04 	addi	r2,r22,-12
   259b4:	1104703a 	and	r2,r2,r4
   259b8:	2900004c 	andi	r4,r5,1
   259bc:	2088b03a 	or	r4,r4,r2
   259c0:	81000115 	stw	r4,4(r16)
   259c4:	01400144 	movi	r5,5
   259c8:	8089883a 	add	r4,r16,r2
   259cc:	21400115 	stw	r5,4(r4)
   259d0:	21400215 	stw	r5,8(r4)
   259d4:	3080cd36 	bltu	r6,r2,25d0c <_malloc_r+0x794>
   259d8:	008000f4 	movhi	r2,3
   259dc:	10915b04 	addi	r2,r2,17772
   259e0:	11000017 	ldw	r4,0(r2)
   259e4:	20c0012e 	bgeu	r4,r3,259ec <_malloc_r+0x474>
   259e8:	10c00015 	stw	r3,0(r2)
   259ec:	008000f4 	movhi	r2,3
   259f0:	10915a04 	addi	r2,r2,17768
   259f4:	11000017 	ldw	r4,0(r2)
   259f8:	9c000217 	ldw	r16,8(r19)
   259fc:	20c0012e 	bgeu	r4,r3,25a04 <_malloc_r+0x48c>
   25a00:	10c00015 	stw	r3,0(r2)
   25a04:	80c00117 	ldw	r3,4(r16)
   25a08:	00bfff04 	movi	r2,-4
   25a0c:	1886703a 	and	r3,r3,r2
   25a10:	1c45c83a 	sub	r2,r3,r17
   25a14:	1c400236 	bltu	r3,r17,25a20 <_malloc_r+0x4a8>
   25a18:	00c003c4 	movi	r3,15
   25a1c:	18800416 	blt	r3,r2,25a30 <_malloc_r+0x4b8>
   25a20:	9009883a 	mov	r4,r18
   25a24:	002d25c0 	call	2d25c <__malloc_unlock>
   25a28:	0005883a 	mov	r2,zero
   25a2c:	003f7b06 	br	2581c <__alt_data_end+0xfffe581c>
   25a30:	88c00054 	ori	r3,r17,1
   25a34:	80c00115 	stw	r3,4(r16)
   25a38:	8463883a 	add	r17,r16,r17
   25a3c:	10800054 	ori	r2,r2,1
   25a40:	9c400215 	stw	r17,8(r19)
   25a44:	88800115 	stw	r2,4(r17)
   25a48:	9009883a 	mov	r4,r18
   25a4c:	002d25c0 	call	2d25c <__malloc_unlock>
   25a50:	80800204 	addi	r2,r16,8
   25a54:	003f7106 	br	2581c <__alt_data_end+0xfffe581c>
   25a58:	00c00504 	movi	r3,20
   25a5c:	18804a2e 	bgeu	r3,r2,25b88 <_malloc_r+0x610>
   25a60:	00c01504 	movi	r3,84
   25a64:	18806e36 	bltu	r3,r2,25c20 <_malloc_r+0x6a8>
   25a68:	8804d33a 	srli	r2,r17,12
   25a6c:	12001bc4 	addi	r8,r2,111
   25a70:	11c01b84 	addi	r7,r2,110
   25a74:	4209883a 	add	r4,r8,r8
   25a78:	003edd06 	br	255f0 <__alt_data_end+0xfffe55f0>
   25a7c:	3804d27a 	srli	r2,r7,9
   25a80:	00c00104 	movi	r3,4
   25a84:	1880442e 	bgeu	r3,r2,25b98 <_malloc_r+0x620>
   25a88:	00c00504 	movi	r3,20
   25a8c:	18808136 	bltu	r3,r2,25c94 <_malloc_r+0x71c>
   25a90:	11401704 	addi	r5,r2,92
   25a94:	10c016c4 	addi	r3,r2,91
   25a98:	294b883a 	add	r5,r5,r5
   25a9c:	294b883a 	add	r5,r5,r5
   25aa0:	294b883a 	add	r5,r5,r5
   25aa4:	994b883a 	add	r5,r19,r5
   25aa8:	28800017 	ldw	r2,0(r5)
   25aac:	018000f4 	movhi	r6,3
   25ab0:	297ffe04 	addi	r5,r5,-8
   25ab4:	31847004 	addi	r6,r6,4544
   25ab8:	28806526 	beq	r5,r2,25c50 <_malloc_r+0x6d8>
   25abc:	01bfff04 	movi	r6,-4
   25ac0:	10c00117 	ldw	r3,4(r2)
   25ac4:	1986703a 	and	r3,r3,r6
   25ac8:	38c0022e 	bgeu	r7,r3,25ad4 <_malloc_r+0x55c>
   25acc:	10800217 	ldw	r2,8(r2)
   25ad0:	28bffb1e 	bne	r5,r2,25ac0 <__alt_data_end+0xfffe5ac0>
   25ad4:	11400317 	ldw	r5,12(r2)
   25ad8:	98c00117 	ldw	r3,4(r19)
   25adc:	81400315 	stw	r5,12(r16)
   25ae0:	80800215 	stw	r2,8(r16)
   25ae4:	2c000215 	stw	r16,8(r5)
   25ae8:	14000315 	stw	r16,12(r2)
   25aec:	003ef806 	br	256d0 <__alt_data_end+0xfffe56d0>
   25af0:	88c00054 	ori	r3,r17,1
   25af4:	80c00115 	stw	r3,4(r16)
   25af8:	8463883a 	add	r17,r16,r17
   25afc:	34400515 	stw	r17,20(r6)
   25b00:	34400415 	stw	r17,16(r6)
   25b04:	10c00054 	ori	r3,r2,1
   25b08:	8a000315 	stw	r8,12(r17)
   25b0c:	8a000215 	stw	r8,8(r17)
   25b10:	88c00115 	stw	r3,4(r17)
   25b14:	88a3883a 	add	r17,r17,r2
   25b18:	88800015 	stw	r2,0(r17)
   25b1c:	9009883a 	mov	r4,r18
   25b20:	002d25c0 	call	2d25c <__malloc_unlock>
   25b24:	80800204 	addi	r2,r16,8
   25b28:	003f3c06 	br	2581c <__alt_data_end+0xfffe581c>
   25b2c:	30c00117 	ldw	r3,4(r6)
   25b30:	003ee706 	br	256d0 <__alt_data_end+0xfffe56d0>
   25b34:	5ac00044 	addi	r11,r11,1
   25b38:	588000cc 	andi	r2,r11,3
   25b3c:	31800204 	addi	r6,r6,8
   25b40:	103efd1e 	bne	r2,zero,25738 <__alt_data_end+0xfffe5738>
   25b44:	00002406 	br	25bd8 <_malloc_r+0x660>
   25b48:	14000317 	ldw	r16,12(r2)
   25b4c:	143f251e 	bne	r2,r16,257e4 <__alt_data_end+0xfffe57e4>
   25b50:	21000084 	addi	r4,r4,2
   25b54:	003ebc06 	br	25648 <__alt_data_end+0xfffe5648>
   25b58:	8085883a 	add	r2,r16,r2
   25b5c:	10c00117 	ldw	r3,4(r2)
   25b60:	81000317 	ldw	r4,12(r16)
   25b64:	81400217 	ldw	r5,8(r16)
   25b68:	18c00054 	ori	r3,r3,1
   25b6c:	10c00115 	stw	r3,4(r2)
   25b70:	29000315 	stw	r4,12(r5)
   25b74:	21400215 	stw	r5,8(r4)
   25b78:	9009883a 	mov	r4,r18
   25b7c:	002d25c0 	call	2d25c <__malloc_unlock>
   25b80:	80800204 	addi	r2,r16,8
   25b84:	003f2506 	br	2581c <__alt_data_end+0xfffe581c>
   25b88:	12001704 	addi	r8,r2,92
   25b8c:	11c016c4 	addi	r7,r2,91
   25b90:	4209883a 	add	r4,r8,r8
   25b94:	003e9606 	br	255f0 <__alt_data_end+0xfffe55f0>
   25b98:	3804d1ba 	srli	r2,r7,6
   25b9c:	11400e44 	addi	r5,r2,57
   25ba0:	10c00e04 	addi	r3,r2,56
   25ba4:	294b883a 	add	r5,r5,r5
   25ba8:	003fbc06 	br	25a9c <__alt_data_end+0xfffe5a9c>
   25bac:	84ff5926 	beq	r16,r19,25914 <__alt_data_end+0xfffe5914>
   25bb0:	008000f4 	movhi	r2,3
   25bb4:	10847004 	addi	r2,r2,4544
   25bb8:	14000217 	ldw	r16,8(r2)
   25bbc:	00bfff04 	movi	r2,-4
   25bc0:	80c00117 	ldw	r3,4(r16)
   25bc4:	1886703a 	and	r3,r3,r2
   25bc8:	003f9106 	br	25a10 <__alt_data_end+0xfffe5a10>
   25bcc:	60800217 	ldw	r2,8(r12)
   25bd0:	213fffc4 	addi	r4,r4,-1
   25bd4:	1300651e 	bne	r2,r12,25d6c <_malloc_r+0x7f4>
   25bd8:	208000cc 	andi	r2,r4,3
   25bdc:	633ffe04 	addi	r12,r12,-8
   25be0:	103ffa1e 	bne	r2,zero,25bcc <__alt_data_end+0xfffe5bcc>
   25be4:	98800117 	ldw	r2,4(r19)
   25be8:	0146303a 	nor	r3,zero,r5
   25bec:	1884703a 	and	r2,r3,r2
   25bf0:	98800115 	stw	r2,4(r19)
   25bf4:	294b883a 	add	r5,r5,r5
   25bf8:	117f2836 	bltu	r2,r5,2589c <__alt_data_end+0xfffe589c>
   25bfc:	283f2726 	beq	r5,zero,2589c <__alt_data_end+0xfffe589c>
   25c00:	2886703a 	and	r3,r5,r2
   25c04:	5809883a 	mov	r4,r11
   25c08:	183ec31e 	bne	r3,zero,25718 <__alt_data_end+0xfffe5718>
   25c0c:	294b883a 	add	r5,r5,r5
   25c10:	2886703a 	and	r3,r5,r2
   25c14:	21000104 	addi	r4,r4,4
   25c18:	183ffc26 	beq	r3,zero,25c0c <__alt_data_end+0xfffe5c0c>
   25c1c:	003ebe06 	br	25718 <__alt_data_end+0xfffe5718>
   25c20:	00c05504 	movi	r3,340
   25c24:	18801236 	bltu	r3,r2,25c70 <_malloc_r+0x6f8>
   25c28:	8804d3fa 	srli	r2,r17,15
   25c2c:	12001e04 	addi	r8,r2,120
   25c30:	11c01dc4 	addi	r7,r2,119
   25c34:	4209883a 	add	r4,r8,r8
   25c38:	003e6d06 	br	255f0 <__alt_data_end+0xfffe55f0>
   25c3c:	00c40004 	movi	r3,4096
   25c40:	003f4606 	br	2595c <__alt_data_end+0xfffe595c>
   25c44:	00800044 	movi	r2,1
   25c48:	a0800115 	stw	r2,4(r20)
   25c4c:	003f7406 	br	25a20 <__alt_data_end+0xfffe5a20>
   25c50:	1805d0ba 	srai	r2,r3,2
   25c54:	01c00044 	movi	r7,1
   25c58:	30c00117 	ldw	r3,4(r6)
   25c5c:	388e983a 	sll	r7,r7,r2
   25c60:	2805883a 	mov	r2,r5
   25c64:	38c6b03a 	or	r3,r7,r3
   25c68:	30c00115 	stw	r3,4(r6)
   25c6c:	003f9b06 	br	25adc <__alt_data_end+0xfffe5adc>
   25c70:	00c15504 	movi	r3,1364
   25c74:	18801a36 	bltu	r3,r2,25ce0 <_malloc_r+0x768>
   25c78:	8804d4ba 	srli	r2,r17,18
   25c7c:	12001f44 	addi	r8,r2,125
   25c80:	11c01f04 	addi	r7,r2,124
   25c84:	4209883a 	add	r4,r8,r8
   25c88:	003e5906 	br	255f0 <__alt_data_end+0xfffe55f0>
   25c8c:	ad400404 	addi	r21,r21,16
   25c90:	003f1706 	br	258f0 <__alt_data_end+0xfffe58f0>
   25c94:	00c01504 	movi	r3,84
   25c98:	18802336 	bltu	r3,r2,25d28 <_malloc_r+0x7b0>
   25c9c:	3804d33a 	srli	r2,r7,12
   25ca0:	11401bc4 	addi	r5,r2,111
   25ca4:	10c01b84 	addi	r3,r2,110
   25ca8:	294b883a 	add	r5,r5,r5
   25cac:	003f7b06 	br	25a9c <__alt_data_end+0xfffe5a9c>
   25cb0:	9c000217 	ldw	r16,8(r19)
   25cb4:	00bfff04 	movi	r2,-4
   25cb8:	80c00117 	ldw	r3,4(r16)
   25cbc:	1886703a 	and	r3,r3,r2
   25cc0:	003f5306 	br	25a10 <__alt_data_end+0xfffe5a10>
   25cc4:	3083ffcc 	andi	r2,r6,4095
   25cc8:	103f181e 	bne	r2,zero,2592c <__alt_data_end+0xfffe592c>
   25ccc:	99000217 	ldw	r4,8(r19)
   25cd0:	b545883a 	add	r2,r22,r21
   25cd4:	10800054 	ori	r2,r2,1
   25cd8:	20800115 	stw	r2,4(r4)
   25cdc:	003f3e06 	br	259d8 <__alt_data_end+0xfffe59d8>
   25ce0:	01003f84 	movi	r4,254
   25ce4:	02001fc4 	movi	r8,127
   25ce8:	01c01f84 	movi	r7,126
   25cec:	003e4006 	br	255f0 <__alt_data_end+0xfffe55f0>
   25cf0:	008000f4 	movhi	r2,3
   25cf4:	108a3e04 	addi	r2,r2,10488
   25cf8:	15000015 	stw	r20,0(r2)
   25cfc:	003f1106 	br	25944 <__alt_data_end+0xfffe5944>
   25d00:	00800044 	movi	r2,1
   25d04:	002b883a 	mov	r21,zero
   25d08:	003f1f06 	br	25988 <__alt_data_end+0xfffe5988>
   25d0c:	81400204 	addi	r5,r16,8
   25d10:	9009883a 	mov	r4,r18
   25d14:	002498c0 	call	2498c <_free_r>
   25d18:	008000f4 	movhi	r2,3
   25d1c:	10916504 	addi	r2,r2,17812
   25d20:	10c00017 	ldw	r3,0(r2)
   25d24:	003f2c06 	br	259d8 <__alt_data_end+0xfffe59d8>
   25d28:	00c05504 	movi	r3,340
   25d2c:	18800536 	bltu	r3,r2,25d44 <_malloc_r+0x7cc>
   25d30:	3804d3fa 	srli	r2,r7,15
   25d34:	11401e04 	addi	r5,r2,120
   25d38:	10c01dc4 	addi	r3,r2,119
   25d3c:	294b883a 	add	r5,r5,r5
   25d40:	003f5606 	br	25a9c <__alt_data_end+0xfffe5a9c>
   25d44:	00c15504 	movi	r3,1364
   25d48:	18800536 	bltu	r3,r2,25d60 <_malloc_r+0x7e8>
   25d4c:	3804d4ba 	srli	r2,r7,18
   25d50:	11401f44 	addi	r5,r2,125
   25d54:	10c01f04 	addi	r3,r2,124
   25d58:	294b883a 	add	r5,r5,r5
   25d5c:	003f4f06 	br	25a9c <__alt_data_end+0xfffe5a9c>
   25d60:	01403f84 	movi	r5,254
   25d64:	00c01f84 	movi	r3,126
   25d68:	003f4c06 	br	25a9c <__alt_data_end+0xfffe5a9c>
   25d6c:	98800117 	ldw	r2,4(r19)
   25d70:	003fa006 	br	25bf4 <__alt_data_end+0xfffe5bf4>
   25d74:	8808d0fa 	srli	r4,r17,3
   25d78:	20800044 	addi	r2,r4,1
   25d7c:	1085883a 	add	r2,r2,r2
   25d80:	003e9006 	br	257c4 <__alt_data_end+0xfffe57c4>

00025d84 <memchr>:
   25d84:	208000cc 	andi	r2,r4,3
   25d88:	280f883a 	mov	r7,r5
   25d8c:	10003426 	beq	r2,zero,25e60 <memchr+0xdc>
   25d90:	30bfffc4 	addi	r2,r6,-1
   25d94:	30001a26 	beq	r6,zero,25e00 <memchr+0x7c>
   25d98:	20c00003 	ldbu	r3,0(r4)
   25d9c:	29803fcc 	andi	r6,r5,255
   25da0:	30c0051e 	bne	r6,r3,25db8 <memchr+0x34>
   25da4:	00001806 	br	25e08 <memchr+0x84>
   25da8:	10001526 	beq	r2,zero,25e00 <memchr+0x7c>
   25dac:	20c00003 	ldbu	r3,0(r4)
   25db0:	10bfffc4 	addi	r2,r2,-1
   25db4:	30c01426 	beq	r6,r3,25e08 <memchr+0x84>
   25db8:	21000044 	addi	r4,r4,1
   25dbc:	20c000cc 	andi	r3,r4,3
   25dc0:	183ff91e 	bne	r3,zero,25da8 <__alt_data_end+0xfffe5da8>
   25dc4:	020000c4 	movi	r8,3
   25dc8:	40801136 	bltu	r8,r2,25e10 <memchr+0x8c>
   25dcc:	10000c26 	beq	r2,zero,25e00 <memchr+0x7c>
   25dd0:	20c00003 	ldbu	r3,0(r4)
   25dd4:	29403fcc 	andi	r5,r5,255
   25dd8:	28c00b26 	beq	r5,r3,25e08 <memchr+0x84>
   25ddc:	20c00044 	addi	r3,r4,1
   25de0:	39803fcc 	andi	r6,r7,255
   25de4:	2089883a 	add	r4,r4,r2
   25de8:	00000306 	br	25df8 <memchr+0x74>
   25dec:	18c00044 	addi	r3,r3,1
   25df0:	197fffc3 	ldbu	r5,-1(r3)
   25df4:	31400526 	beq	r6,r5,25e0c <memchr+0x88>
   25df8:	1805883a 	mov	r2,r3
   25dfc:	20fffb1e 	bne	r4,r3,25dec <__alt_data_end+0xfffe5dec>
   25e00:	0005883a 	mov	r2,zero
   25e04:	f800283a 	ret
   25e08:	2005883a 	mov	r2,r4
   25e0c:	f800283a 	ret
   25e10:	28c03fcc 	andi	r3,r5,255
   25e14:	1812923a 	slli	r9,r3,8
   25e18:	02ffbff4 	movhi	r11,65279
   25e1c:	02a02074 	movhi	r10,32897
   25e20:	48d2b03a 	or	r9,r9,r3
   25e24:	4806943a 	slli	r3,r9,16
   25e28:	5affbfc4 	addi	r11,r11,-257
   25e2c:	52a02004 	addi	r10,r10,-32640
   25e30:	48d2b03a 	or	r9,r9,r3
   25e34:	20c00017 	ldw	r3,0(r4)
   25e38:	48c6f03a 	xor	r3,r9,r3
   25e3c:	1acd883a 	add	r6,r3,r11
   25e40:	00c6303a 	nor	r3,zero,r3
   25e44:	30c6703a 	and	r3,r6,r3
   25e48:	1a86703a 	and	r3,r3,r10
   25e4c:	183fe01e 	bne	r3,zero,25dd0 <__alt_data_end+0xfffe5dd0>
   25e50:	10bfff04 	addi	r2,r2,-4
   25e54:	21000104 	addi	r4,r4,4
   25e58:	40bff636 	bltu	r8,r2,25e34 <__alt_data_end+0xfffe5e34>
   25e5c:	003fdb06 	br	25dcc <__alt_data_end+0xfffe5dcc>
   25e60:	3005883a 	mov	r2,r6
   25e64:	003fd706 	br	25dc4 <__alt_data_end+0xfffe5dc4>

00025e68 <memcpy>:
   25e68:	defffd04 	addi	sp,sp,-12
   25e6c:	dfc00215 	stw	ra,8(sp)
   25e70:	dc400115 	stw	r17,4(sp)
   25e74:	dc000015 	stw	r16,0(sp)
   25e78:	00c003c4 	movi	r3,15
   25e7c:	2005883a 	mov	r2,r4
   25e80:	1980452e 	bgeu	r3,r6,25f98 <memcpy+0x130>
   25e84:	2906b03a 	or	r3,r5,r4
   25e88:	18c000cc 	andi	r3,r3,3
   25e8c:	1800441e 	bne	r3,zero,25fa0 <memcpy+0x138>
   25e90:	347ffc04 	addi	r17,r6,-16
   25e94:	8822d13a 	srli	r17,r17,4
   25e98:	28c00104 	addi	r3,r5,4
   25e9c:	23400104 	addi	r13,r4,4
   25ea0:	8820913a 	slli	r16,r17,4
   25ea4:	2b000204 	addi	r12,r5,8
   25ea8:	22c00204 	addi	r11,r4,8
   25eac:	84000504 	addi	r16,r16,20
   25eb0:	2a800304 	addi	r10,r5,12
   25eb4:	22400304 	addi	r9,r4,12
   25eb8:	2c21883a 	add	r16,r5,r16
   25ebc:	2811883a 	mov	r8,r5
   25ec0:	200f883a 	mov	r7,r4
   25ec4:	41000017 	ldw	r4,0(r8)
   25ec8:	1fc00017 	ldw	ra,0(r3)
   25ecc:	63c00017 	ldw	r15,0(r12)
   25ed0:	39000015 	stw	r4,0(r7)
   25ed4:	53800017 	ldw	r14,0(r10)
   25ed8:	6fc00015 	stw	ra,0(r13)
   25edc:	5bc00015 	stw	r15,0(r11)
   25ee0:	4b800015 	stw	r14,0(r9)
   25ee4:	18c00404 	addi	r3,r3,16
   25ee8:	39c00404 	addi	r7,r7,16
   25eec:	42000404 	addi	r8,r8,16
   25ef0:	6b400404 	addi	r13,r13,16
   25ef4:	63000404 	addi	r12,r12,16
   25ef8:	5ac00404 	addi	r11,r11,16
   25efc:	52800404 	addi	r10,r10,16
   25f00:	4a400404 	addi	r9,r9,16
   25f04:	1c3fef1e 	bne	r3,r16,25ec4 <__alt_data_end+0xfffe5ec4>
   25f08:	89c00044 	addi	r7,r17,1
   25f0c:	380e913a 	slli	r7,r7,4
   25f10:	310003cc 	andi	r4,r6,15
   25f14:	02c000c4 	movi	r11,3
   25f18:	11c7883a 	add	r3,r2,r7
   25f1c:	29cb883a 	add	r5,r5,r7
   25f20:	5900212e 	bgeu	r11,r4,25fa8 <memcpy+0x140>
   25f24:	1813883a 	mov	r9,r3
   25f28:	2811883a 	mov	r8,r5
   25f2c:	200f883a 	mov	r7,r4
   25f30:	42800017 	ldw	r10,0(r8)
   25f34:	4a400104 	addi	r9,r9,4
   25f38:	39ffff04 	addi	r7,r7,-4
   25f3c:	4abfff15 	stw	r10,-4(r9)
   25f40:	42000104 	addi	r8,r8,4
   25f44:	59fffa36 	bltu	r11,r7,25f30 <__alt_data_end+0xfffe5f30>
   25f48:	213fff04 	addi	r4,r4,-4
   25f4c:	2008d0ba 	srli	r4,r4,2
   25f50:	318000cc 	andi	r6,r6,3
   25f54:	21000044 	addi	r4,r4,1
   25f58:	2109883a 	add	r4,r4,r4
   25f5c:	2109883a 	add	r4,r4,r4
   25f60:	1907883a 	add	r3,r3,r4
   25f64:	290b883a 	add	r5,r5,r4
   25f68:	30000626 	beq	r6,zero,25f84 <memcpy+0x11c>
   25f6c:	198d883a 	add	r6,r3,r6
   25f70:	29c00003 	ldbu	r7,0(r5)
   25f74:	18c00044 	addi	r3,r3,1
   25f78:	29400044 	addi	r5,r5,1
   25f7c:	19ffffc5 	stb	r7,-1(r3)
   25f80:	19bffb1e 	bne	r3,r6,25f70 <__alt_data_end+0xfffe5f70>
   25f84:	dfc00217 	ldw	ra,8(sp)
   25f88:	dc400117 	ldw	r17,4(sp)
   25f8c:	dc000017 	ldw	r16,0(sp)
   25f90:	dec00304 	addi	sp,sp,12
   25f94:	f800283a 	ret
   25f98:	2007883a 	mov	r3,r4
   25f9c:	003ff206 	br	25f68 <__alt_data_end+0xfffe5f68>
   25fa0:	2007883a 	mov	r3,r4
   25fa4:	003ff106 	br	25f6c <__alt_data_end+0xfffe5f6c>
   25fa8:	200d883a 	mov	r6,r4
   25fac:	003fee06 	br	25f68 <__alt_data_end+0xfffe5f68>

00025fb0 <memmove>:
   25fb0:	2005883a 	mov	r2,r4
   25fb4:	29000b2e 	bgeu	r5,r4,25fe4 <memmove+0x34>
   25fb8:	298f883a 	add	r7,r5,r6
   25fbc:	21c0092e 	bgeu	r4,r7,25fe4 <memmove+0x34>
   25fc0:	2187883a 	add	r3,r4,r6
   25fc4:	198bc83a 	sub	r5,r3,r6
   25fc8:	30004826 	beq	r6,zero,260ec <memmove+0x13c>
   25fcc:	39ffffc4 	addi	r7,r7,-1
   25fd0:	39000003 	ldbu	r4,0(r7)
   25fd4:	18ffffc4 	addi	r3,r3,-1
   25fd8:	19000005 	stb	r4,0(r3)
   25fdc:	28fffb1e 	bne	r5,r3,25fcc <__alt_data_end+0xfffe5fcc>
   25fe0:	f800283a 	ret
   25fe4:	00c003c4 	movi	r3,15
   25fe8:	1980412e 	bgeu	r3,r6,260f0 <memmove+0x140>
   25fec:	2886b03a 	or	r3,r5,r2
   25ff0:	18c000cc 	andi	r3,r3,3
   25ff4:	1800401e 	bne	r3,zero,260f8 <memmove+0x148>
   25ff8:	33fffc04 	addi	r15,r6,-16
   25ffc:	781ed13a 	srli	r15,r15,4
   26000:	28c00104 	addi	r3,r5,4
   26004:	13400104 	addi	r13,r2,4
   26008:	781c913a 	slli	r14,r15,4
   2600c:	2b000204 	addi	r12,r5,8
   26010:	12c00204 	addi	r11,r2,8
   26014:	73800504 	addi	r14,r14,20
   26018:	2a800304 	addi	r10,r5,12
   2601c:	12400304 	addi	r9,r2,12
   26020:	2b9d883a 	add	r14,r5,r14
   26024:	2811883a 	mov	r8,r5
   26028:	100f883a 	mov	r7,r2
   2602c:	41000017 	ldw	r4,0(r8)
   26030:	39c00404 	addi	r7,r7,16
   26034:	18c00404 	addi	r3,r3,16
   26038:	393ffc15 	stw	r4,-16(r7)
   2603c:	193ffc17 	ldw	r4,-16(r3)
   26040:	6b400404 	addi	r13,r13,16
   26044:	5ac00404 	addi	r11,r11,16
   26048:	693ffc15 	stw	r4,-16(r13)
   2604c:	61000017 	ldw	r4,0(r12)
   26050:	4a400404 	addi	r9,r9,16
   26054:	42000404 	addi	r8,r8,16
   26058:	593ffc15 	stw	r4,-16(r11)
   2605c:	51000017 	ldw	r4,0(r10)
   26060:	63000404 	addi	r12,r12,16
   26064:	52800404 	addi	r10,r10,16
   26068:	493ffc15 	stw	r4,-16(r9)
   2606c:	1bbfef1e 	bne	r3,r14,2602c <__alt_data_end+0xfffe602c>
   26070:	79000044 	addi	r4,r15,1
   26074:	2008913a 	slli	r4,r4,4
   26078:	328003cc 	andi	r10,r6,15
   2607c:	02c000c4 	movi	r11,3
   26080:	1107883a 	add	r3,r2,r4
   26084:	290b883a 	add	r5,r5,r4
   26088:	5a801e2e 	bgeu	r11,r10,26104 <memmove+0x154>
   2608c:	1813883a 	mov	r9,r3
   26090:	2811883a 	mov	r8,r5
   26094:	500f883a 	mov	r7,r10
   26098:	41000017 	ldw	r4,0(r8)
   2609c:	4a400104 	addi	r9,r9,4
   260a0:	39ffff04 	addi	r7,r7,-4
   260a4:	493fff15 	stw	r4,-4(r9)
   260a8:	42000104 	addi	r8,r8,4
   260ac:	59fffa36 	bltu	r11,r7,26098 <__alt_data_end+0xfffe6098>
   260b0:	513fff04 	addi	r4,r10,-4
   260b4:	2008d0ba 	srli	r4,r4,2
   260b8:	318000cc 	andi	r6,r6,3
   260bc:	21000044 	addi	r4,r4,1
   260c0:	2109883a 	add	r4,r4,r4
   260c4:	2109883a 	add	r4,r4,r4
   260c8:	1907883a 	add	r3,r3,r4
   260cc:	290b883a 	add	r5,r5,r4
   260d0:	30000b26 	beq	r6,zero,26100 <memmove+0x150>
   260d4:	198d883a 	add	r6,r3,r6
   260d8:	29c00003 	ldbu	r7,0(r5)
   260dc:	18c00044 	addi	r3,r3,1
   260e0:	29400044 	addi	r5,r5,1
   260e4:	19ffffc5 	stb	r7,-1(r3)
   260e8:	19bffb1e 	bne	r3,r6,260d8 <__alt_data_end+0xfffe60d8>
   260ec:	f800283a 	ret
   260f0:	1007883a 	mov	r3,r2
   260f4:	003ff606 	br	260d0 <__alt_data_end+0xfffe60d0>
   260f8:	1007883a 	mov	r3,r2
   260fc:	003ff506 	br	260d4 <__alt_data_end+0xfffe60d4>
   26100:	f800283a 	ret
   26104:	500d883a 	mov	r6,r10
   26108:	003ff106 	br	260d0 <__alt_data_end+0xfffe60d0>

0002610c <memset>:
   2610c:	20c000cc 	andi	r3,r4,3
   26110:	2005883a 	mov	r2,r4
   26114:	18004426 	beq	r3,zero,26228 <memset+0x11c>
   26118:	31ffffc4 	addi	r7,r6,-1
   2611c:	30004026 	beq	r6,zero,26220 <memset+0x114>
   26120:	2813883a 	mov	r9,r5
   26124:	200d883a 	mov	r6,r4
   26128:	2007883a 	mov	r3,r4
   2612c:	00000406 	br	26140 <memset+0x34>
   26130:	3a3fffc4 	addi	r8,r7,-1
   26134:	31800044 	addi	r6,r6,1
   26138:	38003926 	beq	r7,zero,26220 <memset+0x114>
   2613c:	400f883a 	mov	r7,r8
   26140:	18c00044 	addi	r3,r3,1
   26144:	32400005 	stb	r9,0(r6)
   26148:	1a0000cc 	andi	r8,r3,3
   2614c:	403ff81e 	bne	r8,zero,26130 <__alt_data_end+0xfffe6130>
   26150:	010000c4 	movi	r4,3
   26154:	21c02d2e 	bgeu	r4,r7,2620c <memset+0x100>
   26158:	29003fcc 	andi	r4,r5,255
   2615c:	200c923a 	slli	r6,r4,8
   26160:	3108b03a 	or	r4,r6,r4
   26164:	200c943a 	slli	r6,r4,16
   26168:	218cb03a 	or	r6,r4,r6
   2616c:	010003c4 	movi	r4,15
   26170:	21c0182e 	bgeu	r4,r7,261d4 <memset+0xc8>
   26174:	3b3ffc04 	addi	r12,r7,-16
   26178:	6018d13a 	srli	r12,r12,4
   2617c:	1a000104 	addi	r8,r3,4
   26180:	1ac00204 	addi	r11,r3,8
   26184:	6008913a 	slli	r4,r12,4
   26188:	1a800304 	addi	r10,r3,12
   2618c:	1813883a 	mov	r9,r3
   26190:	21000504 	addi	r4,r4,20
   26194:	1909883a 	add	r4,r3,r4
   26198:	49800015 	stw	r6,0(r9)
   2619c:	41800015 	stw	r6,0(r8)
   261a0:	59800015 	stw	r6,0(r11)
   261a4:	51800015 	stw	r6,0(r10)
   261a8:	42000404 	addi	r8,r8,16
   261ac:	4a400404 	addi	r9,r9,16
   261b0:	5ac00404 	addi	r11,r11,16
   261b4:	52800404 	addi	r10,r10,16
   261b8:	413ff71e 	bne	r8,r4,26198 <__alt_data_end+0xfffe6198>
   261bc:	63000044 	addi	r12,r12,1
   261c0:	6018913a 	slli	r12,r12,4
   261c4:	39c003cc 	andi	r7,r7,15
   261c8:	010000c4 	movi	r4,3
   261cc:	1b07883a 	add	r3,r3,r12
   261d0:	21c00e2e 	bgeu	r4,r7,2620c <memset+0x100>
   261d4:	1813883a 	mov	r9,r3
   261d8:	3811883a 	mov	r8,r7
   261dc:	010000c4 	movi	r4,3
   261e0:	49800015 	stw	r6,0(r9)
   261e4:	423fff04 	addi	r8,r8,-4
   261e8:	4a400104 	addi	r9,r9,4
   261ec:	223ffc36 	bltu	r4,r8,261e0 <__alt_data_end+0xfffe61e0>
   261f0:	393fff04 	addi	r4,r7,-4
   261f4:	2008d0ba 	srli	r4,r4,2
   261f8:	39c000cc 	andi	r7,r7,3
   261fc:	21000044 	addi	r4,r4,1
   26200:	2109883a 	add	r4,r4,r4
   26204:	2109883a 	add	r4,r4,r4
   26208:	1907883a 	add	r3,r3,r4
   2620c:	38000526 	beq	r7,zero,26224 <memset+0x118>
   26210:	19cf883a 	add	r7,r3,r7
   26214:	19400005 	stb	r5,0(r3)
   26218:	18c00044 	addi	r3,r3,1
   2621c:	38fffd1e 	bne	r7,r3,26214 <__alt_data_end+0xfffe6214>
   26220:	f800283a 	ret
   26224:	f800283a 	ret
   26228:	2007883a 	mov	r3,r4
   2622c:	300f883a 	mov	r7,r6
   26230:	003fc706 	br	26150 <__alt_data_end+0xfffe6150>

00026234 <_Balloc>:
   26234:	20801317 	ldw	r2,76(r4)
   26238:	defffc04 	addi	sp,sp,-16
   2623c:	dc400115 	stw	r17,4(sp)
   26240:	dc000015 	stw	r16,0(sp)
   26244:	dfc00315 	stw	ra,12(sp)
   26248:	dc800215 	stw	r18,8(sp)
   2624c:	2023883a 	mov	r17,r4
   26250:	2821883a 	mov	r16,r5
   26254:	10000f26 	beq	r2,zero,26294 <_Balloc+0x60>
   26258:	8407883a 	add	r3,r16,r16
   2625c:	18c7883a 	add	r3,r3,r3
   26260:	10c7883a 	add	r3,r2,r3
   26264:	18800017 	ldw	r2,0(r3)
   26268:	10001126 	beq	r2,zero,262b0 <_Balloc+0x7c>
   2626c:	11000017 	ldw	r4,0(r2)
   26270:	19000015 	stw	r4,0(r3)
   26274:	10000415 	stw	zero,16(r2)
   26278:	10000315 	stw	zero,12(r2)
   2627c:	dfc00317 	ldw	ra,12(sp)
   26280:	dc800217 	ldw	r18,8(sp)
   26284:	dc400117 	ldw	r17,4(sp)
   26288:	dc000017 	ldw	r16,0(sp)
   2628c:	dec00404 	addi	sp,sp,16
   26290:	f800283a 	ret
   26294:	01800844 	movi	r6,33
   26298:	01400104 	movi	r5,4
   2629c:	00291700 	call	29170 <_calloc_r>
   262a0:	88801315 	stw	r2,76(r17)
   262a4:	103fec1e 	bne	r2,zero,26258 <__alt_data_end+0xfffe6258>
   262a8:	0005883a 	mov	r2,zero
   262ac:	003ff306 	br	2627c <__alt_data_end+0xfffe627c>
   262b0:	01400044 	movi	r5,1
   262b4:	2c24983a 	sll	r18,r5,r16
   262b8:	8809883a 	mov	r4,r17
   262bc:	91800144 	addi	r6,r18,5
   262c0:	318d883a 	add	r6,r6,r6
   262c4:	318d883a 	add	r6,r6,r6
   262c8:	00291700 	call	29170 <_calloc_r>
   262cc:	103ff626 	beq	r2,zero,262a8 <__alt_data_end+0xfffe62a8>
   262d0:	14000115 	stw	r16,4(r2)
   262d4:	14800215 	stw	r18,8(r2)
   262d8:	003fe606 	br	26274 <__alt_data_end+0xfffe6274>

000262dc <_Bfree>:
   262dc:	28000826 	beq	r5,zero,26300 <_Bfree+0x24>
   262e0:	28c00117 	ldw	r3,4(r5)
   262e4:	20801317 	ldw	r2,76(r4)
   262e8:	18c7883a 	add	r3,r3,r3
   262ec:	18c7883a 	add	r3,r3,r3
   262f0:	10c5883a 	add	r2,r2,r3
   262f4:	10c00017 	ldw	r3,0(r2)
   262f8:	28c00015 	stw	r3,0(r5)
   262fc:	11400015 	stw	r5,0(r2)
   26300:	f800283a 	ret

00026304 <__multadd>:
   26304:	defffa04 	addi	sp,sp,-24
   26308:	dc800315 	stw	r18,12(sp)
   2630c:	dc400215 	stw	r17,8(sp)
   26310:	dc000115 	stw	r16,4(sp)
   26314:	2823883a 	mov	r17,r5
   26318:	2c000417 	ldw	r16,16(r5)
   2631c:	dfc00515 	stw	ra,20(sp)
   26320:	dcc00415 	stw	r19,16(sp)
   26324:	2025883a 	mov	r18,r4
   26328:	29400504 	addi	r5,r5,20
   2632c:	0011883a 	mov	r8,zero
   26330:	28c00017 	ldw	r3,0(r5)
   26334:	29400104 	addi	r5,r5,4
   26338:	42000044 	addi	r8,r8,1
   2633c:	18bfffcc 	andi	r2,r3,65535
   26340:	1185383a 	mul	r2,r2,r6
   26344:	1806d43a 	srli	r3,r3,16
   26348:	11cf883a 	add	r7,r2,r7
   2634c:	3808d43a 	srli	r4,r7,16
   26350:	1987383a 	mul	r3,r3,r6
   26354:	38bfffcc 	andi	r2,r7,65535
   26358:	1907883a 	add	r3,r3,r4
   2635c:	1808943a 	slli	r4,r3,16
   26360:	180ed43a 	srli	r7,r3,16
   26364:	2085883a 	add	r2,r4,r2
   26368:	28bfff15 	stw	r2,-4(r5)
   2636c:	443ff016 	blt	r8,r16,26330 <__alt_data_end+0xfffe6330>
   26370:	38000926 	beq	r7,zero,26398 <__multadd+0x94>
   26374:	88800217 	ldw	r2,8(r17)
   26378:	80800f0e 	bge	r16,r2,263b8 <__multadd+0xb4>
   2637c:	80800144 	addi	r2,r16,5
   26380:	1085883a 	add	r2,r2,r2
   26384:	1085883a 	add	r2,r2,r2
   26388:	8885883a 	add	r2,r17,r2
   2638c:	11c00015 	stw	r7,0(r2)
   26390:	84000044 	addi	r16,r16,1
   26394:	8c000415 	stw	r16,16(r17)
   26398:	8805883a 	mov	r2,r17
   2639c:	dfc00517 	ldw	ra,20(sp)
   263a0:	dcc00417 	ldw	r19,16(sp)
   263a4:	dc800317 	ldw	r18,12(sp)
   263a8:	dc400217 	ldw	r17,8(sp)
   263ac:	dc000117 	ldw	r16,4(sp)
   263b0:	dec00604 	addi	sp,sp,24
   263b4:	f800283a 	ret
   263b8:	89400117 	ldw	r5,4(r17)
   263bc:	9009883a 	mov	r4,r18
   263c0:	d9c00015 	stw	r7,0(sp)
   263c4:	29400044 	addi	r5,r5,1
   263c8:	00262340 	call	26234 <_Balloc>
   263cc:	89800417 	ldw	r6,16(r17)
   263d0:	89400304 	addi	r5,r17,12
   263d4:	11000304 	addi	r4,r2,12
   263d8:	31800084 	addi	r6,r6,2
   263dc:	318d883a 	add	r6,r6,r6
   263e0:	318d883a 	add	r6,r6,r6
   263e4:	1027883a 	mov	r19,r2
   263e8:	0025e680 	call	25e68 <memcpy>
   263ec:	d9c00017 	ldw	r7,0(sp)
   263f0:	88000a26 	beq	r17,zero,2641c <__multadd+0x118>
   263f4:	88c00117 	ldw	r3,4(r17)
   263f8:	90801317 	ldw	r2,76(r18)
   263fc:	18c7883a 	add	r3,r3,r3
   26400:	18c7883a 	add	r3,r3,r3
   26404:	10c5883a 	add	r2,r2,r3
   26408:	10c00017 	ldw	r3,0(r2)
   2640c:	88c00015 	stw	r3,0(r17)
   26410:	14400015 	stw	r17,0(r2)
   26414:	9823883a 	mov	r17,r19
   26418:	003fd806 	br	2637c <__alt_data_end+0xfffe637c>
   2641c:	9823883a 	mov	r17,r19
   26420:	003fd606 	br	2637c <__alt_data_end+0xfffe637c>

00026424 <__s2b>:
   26424:	defff904 	addi	sp,sp,-28
   26428:	dc400115 	stw	r17,4(sp)
   2642c:	dc000015 	stw	r16,0(sp)
   26430:	2023883a 	mov	r17,r4
   26434:	2821883a 	mov	r16,r5
   26438:	39000204 	addi	r4,r7,8
   2643c:	01400244 	movi	r5,9
   26440:	dcc00315 	stw	r19,12(sp)
   26444:	dc800215 	stw	r18,8(sp)
   26448:	dfc00615 	stw	ra,24(sp)
   2644c:	dd400515 	stw	r21,20(sp)
   26450:	dd000415 	stw	r20,16(sp)
   26454:	3825883a 	mov	r18,r7
   26458:	3027883a 	mov	r19,r6
   2645c:	002a4a00 	call	2a4a0 <__divsi3>
   26460:	00c00044 	movi	r3,1
   26464:	000b883a 	mov	r5,zero
   26468:	1880030e 	bge	r3,r2,26478 <__s2b+0x54>
   2646c:	18c7883a 	add	r3,r3,r3
   26470:	29400044 	addi	r5,r5,1
   26474:	18bffd16 	blt	r3,r2,2646c <__alt_data_end+0xfffe646c>
   26478:	8809883a 	mov	r4,r17
   2647c:	00262340 	call	26234 <_Balloc>
   26480:	d8c00717 	ldw	r3,28(sp)
   26484:	10c00515 	stw	r3,20(r2)
   26488:	00c00044 	movi	r3,1
   2648c:	10c00415 	stw	r3,16(r2)
   26490:	00c00244 	movi	r3,9
   26494:	1cc0210e 	bge	r3,r19,2651c <__s2b+0xf8>
   26498:	80eb883a 	add	r21,r16,r3
   2649c:	a829883a 	mov	r20,r21
   264a0:	84e1883a 	add	r16,r16,r19
   264a4:	a1c00007 	ldb	r7,0(r20)
   264a8:	01800284 	movi	r6,10
   264ac:	a5000044 	addi	r20,r20,1
   264b0:	100b883a 	mov	r5,r2
   264b4:	39fff404 	addi	r7,r7,-48
   264b8:	8809883a 	mov	r4,r17
   264bc:	00263040 	call	26304 <__multadd>
   264c0:	a43ff81e 	bne	r20,r16,264a4 <__alt_data_end+0xfffe64a4>
   264c4:	ace1883a 	add	r16,r21,r19
   264c8:	843ffe04 	addi	r16,r16,-8
   264cc:	9c800a0e 	bge	r19,r18,264f8 <__s2b+0xd4>
   264d0:	94e5c83a 	sub	r18,r18,r19
   264d4:	84a5883a 	add	r18,r16,r18
   264d8:	81c00007 	ldb	r7,0(r16)
   264dc:	01800284 	movi	r6,10
   264e0:	84000044 	addi	r16,r16,1
   264e4:	100b883a 	mov	r5,r2
   264e8:	39fff404 	addi	r7,r7,-48
   264ec:	8809883a 	mov	r4,r17
   264f0:	00263040 	call	26304 <__multadd>
   264f4:	84bff81e 	bne	r16,r18,264d8 <__alt_data_end+0xfffe64d8>
   264f8:	dfc00617 	ldw	ra,24(sp)
   264fc:	dd400517 	ldw	r21,20(sp)
   26500:	dd000417 	ldw	r20,16(sp)
   26504:	dcc00317 	ldw	r19,12(sp)
   26508:	dc800217 	ldw	r18,8(sp)
   2650c:	dc400117 	ldw	r17,4(sp)
   26510:	dc000017 	ldw	r16,0(sp)
   26514:	dec00704 	addi	sp,sp,28
   26518:	f800283a 	ret
   2651c:	84000284 	addi	r16,r16,10
   26520:	1827883a 	mov	r19,r3
   26524:	003fe906 	br	264cc <__alt_data_end+0xfffe64cc>

00026528 <__hi0bits>:
   26528:	20bfffec 	andhi	r2,r4,65535
   2652c:	1000141e 	bne	r2,zero,26580 <__hi0bits+0x58>
   26530:	2008943a 	slli	r4,r4,16
   26534:	00800404 	movi	r2,16
   26538:	20ffc02c 	andhi	r3,r4,65280
   2653c:	1800021e 	bne	r3,zero,26548 <__hi0bits+0x20>
   26540:	2008923a 	slli	r4,r4,8
   26544:	10800204 	addi	r2,r2,8
   26548:	20fc002c 	andhi	r3,r4,61440
   2654c:	1800021e 	bne	r3,zero,26558 <__hi0bits+0x30>
   26550:	2008913a 	slli	r4,r4,4
   26554:	10800104 	addi	r2,r2,4
   26558:	20f0002c 	andhi	r3,r4,49152
   2655c:	1800031e 	bne	r3,zero,2656c <__hi0bits+0x44>
   26560:	2109883a 	add	r4,r4,r4
   26564:	10800084 	addi	r2,r2,2
   26568:	2109883a 	add	r4,r4,r4
   2656c:	20000316 	blt	r4,zero,2657c <__hi0bits+0x54>
   26570:	2110002c 	andhi	r4,r4,16384
   26574:	2000041e 	bne	r4,zero,26588 <__hi0bits+0x60>
   26578:	00800804 	movi	r2,32
   2657c:	f800283a 	ret
   26580:	0005883a 	mov	r2,zero
   26584:	003fec06 	br	26538 <__alt_data_end+0xfffe6538>
   26588:	10800044 	addi	r2,r2,1
   2658c:	f800283a 	ret

00026590 <__lo0bits>:
   26590:	20c00017 	ldw	r3,0(r4)
   26594:	188001cc 	andi	r2,r3,7
   26598:	10000826 	beq	r2,zero,265bc <__lo0bits+0x2c>
   2659c:	1880004c 	andi	r2,r3,1
   265a0:	1000211e 	bne	r2,zero,26628 <__lo0bits+0x98>
   265a4:	1880008c 	andi	r2,r3,2
   265a8:	1000211e 	bne	r2,zero,26630 <__lo0bits+0xa0>
   265ac:	1806d0ba 	srli	r3,r3,2
   265b0:	00800084 	movi	r2,2
   265b4:	20c00015 	stw	r3,0(r4)
   265b8:	f800283a 	ret
   265bc:	18bfffcc 	andi	r2,r3,65535
   265c0:	10001326 	beq	r2,zero,26610 <__lo0bits+0x80>
   265c4:	0005883a 	mov	r2,zero
   265c8:	19403fcc 	andi	r5,r3,255
   265cc:	2800021e 	bne	r5,zero,265d8 <__lo0bits+0x48>
   265d0:	1806d23a 	srli	r3,r3,8
   265d4:	10800204 	addi	r2,r2,8
   265d8:	194003cc 	andi	r5,r3,15
   265dc:	2800021e 	bne	r5,zero,265e8 <__lo0bits+0x58>
   265e0:	1806d13a 	srli	r3,r3,4
   265e4:	10800104 	addi	r2,r2,4
   265e8:	194000cc 	andi	r5,r3,3
   265ec:	2800021e 	bne	r5,zero,265f8 <__lo0bits+0x68>
   265f0:	1806d0ba 	srli	r3,r3,2
   265f4:	10800084 	addi	r2,r2,2
   265f8:	1940004c 	andi	r5,r3,1
   265fc:	2800081e 	bne	r5,zero,26620 <__lo0bits+0x90>
   26600:	1806d07a 	srli	r3,r3,1
   26604:	1800051e 	bne	r3,zero,2661c <__lo0bits+0x8c>
   26608:	00800804 	movi	r2,32
   2660c:	f800283a 	ret
   26610:	1806d43a 	srli	r3,r3,16
   26614:	00800404 	movi	r2,16
   26618:	003feb06 	br	265c8 <__alt_data_end+0xfffe65c8>
   2661c:	10800044 	addi	r2,r2,1
   26620:	20c00015 	stw	r3,0(r4)
   26624:	f800283a 	ret
   26628:	0005883a 	mov	r2,zero
   2662c:	f800283a 	ret
   26630:	1806d07a 	srli	r3,r3,1
   26634:	00800044 	movi	r2,1
   26638:	20c00015 	stw	r3,0(r4)
   2663c:	f800283a 	ret

00026640 <__i2b>:
   26640:	defffd04 	addi	sp,sp,-12
   26644:	dc000015 	stw	r16,0(sp)
   26648:	04000044 	movi	r16,1
   2664c:	dc400115 	stw	r17,4(sp)
   26650:	2823883a 	mov	r17,r5
   26654:	800b883a 	mov	r5,r16
   26658:	dfc00215 	stw	ra,8(sp)
   2665c:	00262340 	call	26234 <_Balloc>
   26660:	14400515 	stw	r17,20(r2)
   26664:	14000415 	stw	r16,16(r2)
   26668:	dfc00217 	ldw	ra,8(sp)
   2666c:	dc400117 	ldw	r17,4(sp)
   26670:	dc000017 	ldw	r16,0(sp)
   26674:	dec00304 	addi	sp,sp,12
   26678:	f800283a 	ret

0002667c <__multiply>:
   2667c:	defffa04 	addi	sp,sp,-24
   26680:	dcc00315 	stw	r19,12(sp)
   26684:	dc800215 	stw	r18,8(sp)
   26688:	34c00417 	ldw	r19,16(r6)
   2668c:	2c800417 	ldw	r18,16(r5)
   26690:	dd000415 	stw	r20,16(sp)
   26694:	dc400115 	stw	r17,4(sp)
   26698:	dfc00515 	stw	ra,20(sp)
   2669c:	dc000015 	stw	r16,0(sp)
   266a0:	2829883a 	mov	r20,r5
   266a4:	3023883a 	mov	r17,r6
   266a8:	94c0050e 	bge	r18,r19,266c0 <__multiply+0x44>
   266ac:	9007883a 	mov	r3,r18
   266b0:	3029883a 	mov	r20,r6
   266b4:	9825883a 	mov	r18,r19
   266b8:	2823883a 	mov	r17,r5
   266bc:	1827883a 	mov	r19,r3
   266c0:	a0800217 	ldw	r2,8(r20)
   266c4:	94e1883a 	add	r16,r18,r19
   266c8:	a1400117 	ldw	r5,4(r20)
   266cc:	1400010e 	bge	r2,r16,266d4 <__multiply+0x58>
   266d0:	29400044 	addi	r5,r5,1
   266d4:	00262340 	call	26234 <_Balloc>
   266d8:	8415883a 	add	r10,r16,r16
   266dc:	12c00504 	addi	r11,r2,20
   266e0:	5295883a 	add	r10,r10,r10
   266e4:	5a95883a 	add	r10,r11,r10
   266e8:	5807883a 	mov	r3,r11
   266ec:	5a80032e 	bgeu	r11,r10,266fc <__multiply+0x80>
   266f0:	18000015 	stw	zero,0(r3)
   266f4:	18c00104 	addi	r3,r3,4
   266f8:	1abffd36 	bltu	r3,r10,266f0 <__alt_data_end+0xfffe66f0>
   266fc:	9ce7883a 	add	r19,r19,r19
   26700:	94a5883a 	add	r18,r18,r18
   26704:	89800504 	addi	r6,r17,20
   26708:	9ce7883a 	add	r19,r19,r19
   2670c:	a3400504 	addi	r13,r20,20
   26710:	94a5883a 	add	r18,r18,r18
   26714:	34d9883a 	add	r12,r6,r19
   26718:	6c93883a 	add	r9,r13,r18
   2671c:	3300422e 	bgeu	r6,r12,26828 <__multiply+0x1ac>
   26720:	37c00017 	ldw	ra,0(r6)
   26724:	fbffffcc 	andi	r15,ra,65535
   26728:	78001b26 	beq	r15,zero,26798 <__multiply+0x11c>
   2672c:	5811883a 	mov	r8,r11
   26730:	681d883a 	mov	r14,r13
   26734:	000f883a 	mov	r7,zero
   26738:	71000017 	ldw	r4,0(r14)
   2673c:	40c00017 	ldw	r3,0(r8)
   26740:	73800104 	addi	r14,r14,4
   26744:	217fffcc 	andi	r5,r4,65535
   26748:	2bcb383a 	mul	r5,r5,r15
   2674c:	2008d43a 	srli	r4,r4,16
   26750:	1c7fffcc 	andi	r17,r3,65535
   26754:	2c4b883a 	add	r5,r5,r17
   26758:	29cb883a 	add	r5,r5,r7
   2675c:	23c9383a 	mul	r4,r4,r15
   26760:	1806d43a 	srli	r3,r3,16
   26764:	280ed43a 	srli	r7,r5,16
   26768:	297fffcc 	andi	r5,r5,65535
   2676c:	20c7883a 	add	r3,r4,r3
   26770:	19c7883a 	add	r3,r3,r7
   26774:	1808943a 	slli	r4,r3,16
   26778:	4023883a 	mov	r17,r8
   2677c:	180ed43a 	srli	r7,r3,16
   26780:	214ab03a 	or	r5,r4,r5
   26784:	41400015 	stw	r5,0(r8)
   26788:	42000104 	addi	r8,r8,4
   2678c:	727fea36 	bltu	r14,r9,26738 <__alt_data_end+0xfffe6738>
   26790:	89c00115 	stw	r7,4(r17)
   26794:	37c00017 	ldw	ra,0(r6)
   26798:	f83ed43a 	srli	ra,ra,16
   2679c:	f8001f26 	beq	ra,zero,2681c <__multiply+0x1a0>
   267a0:	58c00017 	ldw	r3,0(r11)
   267a4:	681d883a 	mov	r14,r13
   267a8:	581f883a 	mov	r15,r11
   267ac:	1811883a 	mov	r8,r3
   267b0:	5825883a 	mov	r18,r11
   267b4:	000f883a 	mov	r7,zero
   267b8:	00000106 	br	267c0 <__multiply+0x144>
   267bc:	8825883a 	mov	r18,r17
   267c0:	7140000b 	ldhu	r5,0(r14)
   267c4:	4010d43a 	srli	r8,r8,16
   267c8:	193fffcc 	andi	r4,r3,65535
   267cc:	2fcb383a 	mul	r5,r5,ra
   267d0:	7bc00104 	addi	r15,r15,4
   267d4:	73800104 	addi	r14,r14,4
   267d8:	2a0b883a 	add	r5,r5,r8
   267dc:	29cb883a 	add	r5,r5,r7
   267e0:	2806943a 	slli	r3,r5,16
   267e4:	94400104 	addi	r17,r18,4
   267e8:	280ad43a 	srli	r5,r5,16
   267ec:	1908b03a 	or	r4,r3,r4
   267f0:	793fff15 	stw	r4,-4(r15)
   267f4:	70ffff17 	ldw	r3,-4(r14)
   267f8:	8a000017 	ldw	r8,0(r17)
   267fc:	1806d43a 	srli	r3,r3,16
   26800:	413fffcc 	andi	r4,r8,65535
   26804:	1fc7383a 	mul	r3,r3,ra
   26808:	1907883a 	add	r3,r3,r4
   2680c:	1947883a 	add	r3,r3,r5
   26810:	180ed43a 	srli	r7,r3,16
   26814:	727fe936 	bltu	r14,r9,267bc <__alt_data_end+0xfffe67bc>
   26818:	90c00115 	stw	r3,4(r18)
   2681c:	31800104 	addi	r6,r6,4
   26820:	5ac00104 	addi	r11,r11,4
   26824:	333fbe36 	bltu	r6,r12,26720 <__alt_data_end+0xfffe6720>
   26828:	0400090e 	bge	zero,r16,26850 <__multiply+0x1d4>
   2682c:	50ffff17 	ldw	r3,-4(r10)
   26830:	52bfff04 	addi	r10,r10,-4
   26834:	18000326 	beq	r3,zero,26844 <__multiply+0x1c8>
   26838:	00000506 	br	26850 <__multiply+0x1d4>
   2683c:	50c00017 	ldw	r3,0(r10)
   26840:	1800031e 	bne	r3,zero,26850 <__multiply+0x1d4>
   26844:	843fffc4 	addi	r16,r16,-1
   26848:	52bfff04 	addi	r10,r10,-4
   2684c:	803ffb1e 	bne	r16,zero,2683c <__alt_data_end+0xfffe683c>
   26850:	14000415 	stw	r16,16(r2)
   26854:	dfc00517 	ldw	ra,20(sp)
   26858:	dd000417 	ldw	r20,16(sp)
   2685c:	dcc00317 	ldw	r19,12(sp)
   26860:	dc800217 	ldw	r18,8(sp)
   26864:	dc400117 	ldw	r17,4(sp)
   26868:	dc000017 	ldw	r16,0(sp)
   2686c:	dec00604 	addi	sp,sp,24
   26870:	f800283a 	ret

00026874 <__pow5mult>:
   26874:	defffa04 	addi	sp,sp,-24
   26878:	dcc00315 	stw	r19,12(sp)
   2687c:	dc000015 	stw	r16,0(sp)
   26880:	dfc00515 	stw	ra,20(sp)
   26884:	dd000415 	stw	r20,16(sp)
   26888:	dc800215 	stw	r18,8(sp)
   2688c:	dc400115 	stw	r17,4(sp)
   26890:	308000cc 	andi	r2,r6,3
   26894:	3021883a 	mov	r16,r6
   26898:	2027883a 	mov	r19,r4
   2689c:	10002f1e 	bne	r2,zero,2695c <__pow5mult+0xe8>
   268a0:	2825883a 	mov	r18,r5
   268a4:	8021d0ba 	srai	r16,r16,2
   268a8:	80001a26 	beq	r16,zero,26914 <__pow5mult+0xa0>
   268ac:	9c401217 	ldw	r17,72(r19)
   268b0:	8800061e 	bne	r17,zero,268cc <__pow5mult+0x58>
   268b4:	00003406 	br	26988 <__pow5mult+0x114>
   268b8:	8021d07a 	srai	r16,r16,1
   268bc:	80001526 	beq	r16,zero,26914 <__pow5mult+0xa0>
   268c0:	88800017 	ldw	r2,0(r17)
   268c4:	10001c26 	beq	r2,zero,26938 <__pow5mult+0xc4>
   268c8:	1023883a 	mov	r17,r2
   268cc:	8080004c 	andi	r2,r16,1
   268d0:	103ff926 	beq	r2,zero,268b8 <__alt_data_end+0xfffe68b8>
   268d4:	880d883a 	mov	r6,r17
   268d8:	900b883a 	mov	r5,r18
   268dc:	9809883a 	mov	r4,r19
   268e0:	002667c0 	call	2667c <__multiply>
   268e4:	90001b26 	beq	r18,zero,26954 <__pow5mult+0xe0>
   268e8:	91000117 	ldw	r4,4(r18)
   268ec:	98c01317 	ldw	r3,76(r19)
   268f0:	8021d07a 	srai	r16,r16,1
   268f4:	2109883a 	add	r4,r4,r4
   268f8:	2109883a 	add	r4,r4,r4
   268fc:	1907883a 	add	r3,r3,r4
   26900:	19000017 	ldw	r4,0(r3)
   26904:	91000015 	stw	r4,0(r18)
   26908:	1c800015 	stw	r18,0(r3)
   2690c:	1025883a 	mov	r18,r2
   26910:	803feb1e 	bne	r16,zero,268c0 <__alt_data_end+0xfffe68c0>
   26914:	9005883a 	mov	r2,r18
   26918:	dfc00517 	ldw	ra,20(sp)
   2691c:	dd000417 	ldw	r20,16(sp)
   26920:	dcc00317 	ldw	r19,12(sp)
   26924:	dc800217 	ldw	r18,8(sp)
   26928:	dc400117 	ldw	r17,4(sp)
   2692c:	dc000017 	ldw	r16,0(sp)
   26930:	dec00604 	addi	sp,sp,24
   26934:	f800283a 	ret
   26938:	880d883a 	mov	r6,r17
   2693c:	880b883a 	mov	r5,r17
   26940:	9809883a 	mov	r4,r19
   26944:	002667c0 	call	2667c <__multiply>
   26948:	88800015 	stw	r2,0(r17)
   2694c:	10000015 	stw	zero,0(r2)
   26950:	003fdd06 	br	268c8 <__alt_data_end+0xfffe68c8>
   26954:	1025883a 	mov	r18,r2
   26958:	003fd706 	br	268b8 <__alt_data_end+0xfffe68b8>
   2695c:	10bfffc4 	addi	r2,r2,-1
   26960:	1085883a 	add	r2,r2,r2
   26964:	00c000f4 	movhi	r3,3
   26968:	18c29d04 	addi	r3,r3,2676
   2696c:	1085883a 	add	r2,r2,r2
   26970:	1885883a 	add	r2,r3,r2
   26974:	11800017 	ldw	r6,0(r2)
   26978:	000f883a 	mov	r7,zero
   2697c:	00263040 	call	26304 <__multadd>
   26980:	1025883a 	mov	r18,r2
   26984:	003fc706 	br	268a4 <__alt_data_end+0xfffe68a4>
   26988:	05000044 	movi	r20,1
   2698c:	a00b883a 	mov	r5,r20
   26990:	9809883a 	mov	r4,r19
   26994:	00262340 	call	26234 <_Balloc>
   26998:	1023883a 	mov	r17,r2
   2699c:	00809c44 	movi	r2,625
   269a0:	88800515 	stw	r2,20(r17)
   269a4:	8d000415 	stw	r20,16(r17)
   269a8:	9c401215 	stw	r17,72(r19)
   269ac:	88000015 	stw	zero,0(r17)
   269b0:	003fc606 	br	268cc <__alt_data_end+0xfffe68cc>

000269b4 <__lshift>:
   269b4:	defff904 	addi	sp,sp,-28
   269b8:	dd400515 	stw	r21,20(sp)
   269bc:	dcc00315 	stw	r19,12(sp)
   269c0:	302bd17a 	srai	r21,r6,5
   269c4:	2cc00417 	ldw	r19,16(r5)
   269c8:	28800217 	ldw	r2,8(r5)
   269cc:	dd000415 	stw	r20,16(sp)
   269d0:	ace7883a 	add	r19,r21,r19
   269d4:	dc800215 	stw	r18,8(sp)
   269d8:	dc400115 	stw	r17,4(sp)
   269dc:	dc000015 	stw	r16,0(sp)
   269e0:	dfc00615 	stw	ra,24(sp)
   269e4:	9c000044 	addi	r16,r19,1
   269e8:	2823883a 	mov	r17,r5
   269ec:	3029883a 	mov	r20,r6
   269f0:	2025883a 	mov	r18,r4
   269f4:	29400117 	ldw	r5,4(r5)
   269f8:	1400030e 	bge	r2,r16,26a08 <__lshift+0x54>
   269fc:	1085883a 	add	r2,r2,r2
   26a00:	29400044 	addi	r5,r5,1
   26a04:	143ffd16 	blt	r2,r16,269fc <__alt_data_end+0xfffe69fc>
   26a08:	9009883a 	mov	r4,r18
   26a0c:	00262340 	call	26234 <_Balloc>
   26a10:	10c00504 	addi	r3,r2,20
   26a14:	0540070e 	bge	zero,r21,26a34 <__lshift+0x80>
   26a18:	ad6b883a 	add	r21,r21,r21
   26a1c:	ad6b883a 	add	r21,r21,r21
   26a20:	1809883a 	mov	r4,r3
   26a24:	1d47883a 	add	r3,r3,r21
   26a28:	20000015 	stw	zero,0(r4)
   26a2c:	21000104 	addi	r4,r4,4
   26a30:	193ffd1e 	bne	r3,r4,26a28 <__alt_data_end+0xfffe6a28>
   26a34:	8a000417 	ldw	r8,16(r17)
   26a38:	89000504 	addi	r4,r17,20
   26a3c:	a18007cc 	andi	r6,r20,31
   26a40:	4211883a 	add	r8,r8,r8
   26a44:	4211883a 	add	r8,r8,r8
   26a48:	2211883a 	add	r8,r4,r8
   26a4c:	30002326 	beq	r6,zero,26adc <__lshift+0x128>
   26a50:	02400804 	movi	r9,32
   26a54:	4993c83a 	sub	r9,r9,r6
   26a58:	000b883a 	mov	r5,zero
   26a5c:	21c00017 	ldw	r7,0(r4)
   26a60:	1815883a 	mov	r10,r3
   26a64:	18c00104 	addi	r3,r3,4
   26a68:	398e983a 	sll	r7,r7,r6
   26a6c:	21000104 	addi	r4,r4,4
   26a70:	394ab03a 	or	r5,r7,r5
   26a74:	197fff15 	stw	r5,-4(r3)
   26a78:	217fff17 	ldw	r5,-4(r4)
   26a7c:	2a4ad83a 	srl	r5,r5,r9
   26a80:	223ff636 	bltu	r4,r8,26a5c <__alt_data_end+0xfffe6a5c>
   26a84:	51400115 	stw	r5,4(r10)
   26a88:	28001a1e 	bne	r5,zero,26af4 <__lshift+0x140>
   26a8c:	843fffc4 	addi	r16,r16,-1
   26a90:	14000415 	stw	r16,16(r2)
   26a94:	88000826 	beq	r17,zero,26ab8 <__lshift+0x104>
   26a98:	89000117 	ldw	r4,4(r17)
   26a9c:	90c01317 	ldw	r3,76(r18)
   26aa0:	2109883a 	add	r4,r4,r4
   26aa4:	2109883a 	add	r4,r4,r4
   26aa8:	1907883a 	add	r3,r3,r4
   26aac:	19000017 	ldw	r4,0(r3)
   26ab0:	89000015 	stw	r4,0(r17)
   26ab4:	1c400015 	stw	r17,0(r3)
   26ab8:	dfc00617 	ldw	ra,24(sp)
   26abc:	dd400517 	ldw	r21,20(sp)
   26ac0:	dd000417 	ldw	r20,16(sp)
   26ac4:	dcc00317 	ldw	r19,12(sp)
   26ac8:	dc800217 	ldw	r18,8(sp)
   26acc:	dc400117 	ldw	r17,4(sp)
   26ad0:	dc000017 	ldw	r16,0(sp)
   26ad4:	dec00704 	addi	sp,sp,28
   26ad8:	f800283a 	ret
   26adc:	21400017 	ldw	r5,0(r4)
   26ae0:	18c00104 	addi	r3,r3,4
   26ae4:	21000104 	addi	r4,r4,4
   26ae8:	197fff15 	stw	r5,-4(r3)
   26aec:	223ffb36 	bltu	r4,r8,26adc <__alt_data_end+0xfffe6adc>
   26af0:	003fe606 	br	26a8c <__alt_data_end+0xfffe6a8c>
   26af4:	9c000084 	addi	r16,r19,2
   26af8:	003fe406 	br	26a8c <__alt_data_end+0xfffe6a8c>

00026afc <__mcmp>:
   26afc:	20800417 	ldw	r2,16(r4)
   26b00:	28c00417 	ldw	r3,16(r5)
   26b04:	10c5c83a 	sub	r2,r2,r3
   26b08:	1000111e 	bne	r2,zero,26b50 <__mcmp+0x54>
   26b0c:	18c7883a 	add	r3,r3,r3
   26b10:	18c7883a 	add	r3,r3,r3
   26b14:	21000504 	addi	r4,r4,20
   26b18:	29400504 	addi	r5,r5,20
   26b1c:	20c5883a 	add	r2,r4,r3
   26b20:	28cb883a 	add	r5,r5,r3
   26b24:	00000106 	br	26b2c <__mcmp+0x30>
   26b28:	20800a2e 	bgeu	r4,r2,26b54 <__mcmp+0x58>
   26b2c:	10bfff04 	addi	r2,r2,-4
   26b30:	297fff04 	addi	r5,r5,-4
   26b34:	11800017 	ldw	r6,0(r2)
   26b38:	28c00017 	ldw	r3,0(r5)
   26b3c:	30fffa26 	beq	r6,r3,26b28 <__alt_data_end+0xfffe6b28>
   26b40:	30c00236 	bltu	r6,r3,26b4c <__mcmp+0x50>
   26b44:	00800044 	movi	r2,1
   26b48:	f800283a 	ret
   26b4c:	00bfffc4 	movi	r2,-1
   26b50:	f800283a 	ret
   26b54:	0005883a 	mov	r2,zero
   26b58:	f800283a 	ret

00026b5c <__mdiff>:
   26b5c:	28c00417 	ldw	r3,16(r5)
   26b60:	30800417 	ldw	r2,16(r6)
   26b64:	defffa04 	addi	sp,sp,-24
   26b68:	dcc00315 	stw	r19,12(sp)
   26b6c:	dc800215 	stw	r18,8(sp)
   26b70:	dfc00515 	stw	ra,20(sp)
   26b74:	dd000415 	stw	r20,16(sp)
   26b78:	dc400115 	stw	r17,4(sp)
   26b7c:	dc000015 	stw	r16,0(sp)
   26b80:	1887c83a 	sub	r3,r3,r2
   26b84:	2825883a 	mov	r18,r5
   26b88:	3027883a 	mov	r19,r6
   26b8c:	1800141e 	bne	r3,zero,26be0 <__mdiff+0x84>
   26b90:	1085883a 	add	r2,r2,r2
   26b94:	1085883a 	add	r2,r2,r2
   26b98:	2a000504 	addi	r8,r5,20
   26b9c:	34000504 	addi	r16,r6,20
   26ba0:	4087883a 	add	r3,r8,r2
   26ba4:	8085883a 	add	r2,r16,r2
   26ba8:	00000106 	br	26bb0 <__mdiff+0x54>
   26bac:	40c0592e 	bgeu	r8,r3,26d14 <__mdiff+0x1b8>
   26bb0:	18ffff04 	addi	r3,r3,-4
   26bb4:	10bfff04 	addi	r2,r2,-4
   26bb8:	19c00017 	ldw	r7,0(r3)
   26bbc:	11400017 	ldw	r5,0(r2)
   26bc0:	397ffa26 	beq	r7,r5,26bac <__alt_data_end+0xfffe6bac>
   26bc4:	3940592e 	bgeu	r7,r5,26d2c <__mdiff+0x1d0>
   26bc8:	9005883a 	mov	r2,r18
   26bcc:	4023883a 	mov	r17,r8
   26bd0:	9825883a 	mov	r18,r19
   26bd4:	05000044 	movi	r20,1
   26bd8:	1027883a 	mov	r19,r2
   26bdc:	00000406 	br	26bf0 <__mdiff+0x94>
   26be0:	18005616 	blt	r3,zero,26d3c <__mdiff+0x1e0>
   26be4:	34400504 	addi	r17,r6,20
   26be8:	2c000504 	addi	r16,r5,20
   26bec:	0029883a 	mov	r20,zero
   26bf0:	91400117 	ldw	r5,4(r18)
   26bf4:	00262340 	call	26234 <_Balloc>
   26bf8:	92400417 	ldw	r9,16(r18)
   26bfc:	9b000417 	ldw	r12,16(r19)
   26c00:	12c00504 	addi	r11,r2,20
   26c04:	4a51883a 	add	r8,r9,r9
   26c08:	6319883a 	add	r12,r12,r12
   26c0c:	4211883a 	add	r8,r8,r8
   26c10:	6319883a 	add	r12,r12,r12
   26c14:	15000315 	stw	r20,12(r2)
   26c18:	8211883a 	add	r8,r16,r8
   26c1c:	8b19883a 	add	r12,r17,r12
   26c20:	0007883a 	mov	r3,zero
   26c24:	81400017 	ldw	r5,0(r16)
   26c28:	89c00017 	ldw	r7,0(r17)
   26c2c:	59800104 	addi	r6,r11,4
   26c30:	293fffcc 	andi	r4,r5,65535
   26c34:	20c7883a 	add	r3,r4,r3
   26c38:	393fffcc 	andi	r4,r7,65535
   26c3c:	1909c83a 	sub	r4,r3,r4
   26c40:	280ad43a 	srli	r5,r5,16
   26c44:	380ed43a 	srli	r7,r7,16
   26c48:	2007d43a 	srai	r3,r4,16
   26c4c:	213fffcc 	andi	r4,r4,65535
   26c50:	29cbc83a 	sub	r5,r5,r7
   26c54:	28c7883a 	add	r3,r5,r3
   26c58:	180a943a 	slli	r5,r3,16
   26c5c:	8c400104 	addi	r17,r17,4
   26c60:	84000104 	addi	r16,r16,4
   26c64:	2908b03a 	or	r4,r5,r4
   26c68:	59000015 	stw	r4,0(r11)
   26c6c:	1807d43a 	srai	r3,r3,16
   26c70:	3015883a 	mov	r10,r6
   26c74:	3017883a 	mov	r11,r6
   26c78:	8b3fea36 	bltu	r17,r12,26c24 <__alt_data_end+0xfffe6c24>
   26c7c:	8200162e 	bgeu	r16,r8,26cd8 <__mdiff+0x17c>
   26c80:	8017883a 	mov	r11,r16
   26c84:	59400017 	ldw	r5,0(r11)
   26c88:	31800104 	addi	r6,r6,4
   26c8c:	5ac00104 	addi	r11,r11,4
   26c90:	293fffcc 	andi	r4,r5,65535
   26c94:	20c7883a 	add	r3,r4,r3
   26c98:	280ed43a 	srli	r7,r5,16
   26c9c:	180bd43a 	srai	r5,r3,16
   26ca0:	193fffcc 	andi	r4,r3,65535
   26ca4:	3947883a 	add	r3,r7,r5
   26ca8:	180a943a 	slli	r5,r3,16
   26cac:	1807d43a 	srai	r3,r3,16
   26cb0:	2908b03a 	or	r4,r5,r4
   26cb4:	313fff15 	stw	r4,-4(r6)
   26cb8:	5a3ff236 	bltu	r11,r8,26c84 <__alt_data_end+0xfffe6c84>
   26cbc:	0406303a 	nor	r3,zero,r16
   26cc0:	1a07883a 	add	r3,r3,r8
   26cc4:	1806d0ba 	srli	r3,r3,2
   26cc8:	18c00044 	addi	r3,r3,1
   26ccc:	18c7883a 	add	r3,r3,r3
   26cd0:	18c7883a 	add	r3,r3,r3
   26cd4:	50d5883a 	add	r10,r10,r3
   26cd8:	50ffff04 	addi	r3,r10,-4
   26cdc:	2000041e 	bne	r4,zero,26cf0 <__mdiff+0x194>
   26ce0:	18ffff04 	addi	r3,r3,-4
   26ce4:	19000017 	ldw	r4,0(r3)
   26ce8:	4a7fffc4 	addi	r9,r9,-1
   26cec:	203ffc26 	beq	r4,zero,26ce0 <__alt_data_end+0xfffe6ce0>
   26cf0:	12400415 	stw	r9,16(r2)
   26cf4:	dfc00517 	ldw	ra,20(sp)
   26cf8:	dd000417 	ldw	r20,16(sp)
   26cfc:	dcc00317 	ldw	r19,12(sp)
   26d00:	dc800217 	ldw	r18,8(sp)
   26d04:	dc400117 	ldw	r17,4(sp)
   26d08:	dc000017 	ldw	r16,0(sp)
   26d0c:	dec00604 	addi	sp,sp,24
   26d10:	f800283a 	ret
   26d14:	000b883a 	mov	r5,zero
   26d18:	00262340 	call	26234 <_Balloc>
   26d1c:	00c00044 	movi	r3,1
   26d20:	10c00415 	stw	r3,16(r2)
   26d24:	10000515 	stw	zero,20(r2)
   26d28:	003ff206 	br	26cf4 <__alt_data_end+0xfffe6cf4>
   26d2c:	8023883a 	mov	r17,r16
   26d30:	0029883a 	mov	r20,zero
   26d34:	4021883a 	mov	r16,r8
   26d38:	003fad06 	br	26bf0 <__alt_data_end+0xfffe6bf0>
   26d3c:	9005883a 	mov	r2,r18
   26d40:	94400504 	addi	r17,r18,20
   26d44:	9c000504 	addi	r16,r19,20
   26d48:	9825883a 	mov	r18,r19
   26d4c:	05000044 	movi	r20,1
   26d50:	1027883a 	mov	r19,r2
   26d54:	003fa606 	br	26bf0 <__alt_data_end+0xfffe6bf0>

00026d58 <__ulp>:
   26d58:	295ffc2c 	andhi	r5,r5,32752
   26d5c:	00bf3034 	movhi	r2,64704
   26d60:	2887883a 	add	r3,r5,r2
   26d64:	00c0020e 	bge	zero,r3,26d70 <__ulp+0x18>
   26d68:	0005883a 	mov	r2,zero
   26d6c:	f800283a 	ret
   26d70:	00c7c83a 	sub	r3,zero,r3
   26d74:	1807d53a 	srai	r3,r3,20
   26d78:	008004c4 	movi	r2,19
   26d7c:	10c00b0e 	bge	r2,r3,26dac <__ulp+0x54>
   26d80:	18bffb04 	addi	r2,r3,-20
   26d84:	01000784 	movi	r4,30
   26d88:	0007883a 	mov	r3,zero
   26d8c:	20800516 	blt	r4,r2,26da4 <__ulp+0x4c>
   26d90:	010007c4 	movi	r4,31
   26d94:	2089c83a 	sub	r4,r4,r2
   26d98:	00800044 	movi	r2,1
   26d9c:	1104983a 	sll	r2,r2,r4
   26da0:	f800283a 	ret
   26da4:	00800044 	movi	r2,1
   26da8:	f800283a 	ret
   26dac:	01400234 	movhi	r5,8
   26db0:	28c7d83a 	sra	r3,r5,r3
   26db4:	0005883a 	mov	r2,zero
   26db8:	f800283a 	ret

00026dbc <__b2d>:
   26dbc:	defffa04 	addi	sp,sp,-24
   26dc0:	dc000015 	stw	r16,0(sp)
   26dc4:	24000417 	ldw	r16,16(r4)
   26dc8:	dc400115 	stw	r17,4(sp)
   26dcc:	24400504 	addi	r17,r4,20
   26dd0:	8421883a 	add	r16,r16,r16
   26dd4:	8421883a 	add	r16,r16,r16
   26dd8:	8c21883a 	add	r16,r17,r16
   26ddc:	dc800215 	stw	r18,8(sp)
   26de0:	84bfff17 	ldw	r18,-4(r16)
   26de4:	dd000415 	stw	r20,16(sp)
   26de8:	dcc00315 	stw	r19,12(sp)
   26dec:	9009883a 	mov	r4,r18
   26df0:	2829883a 	mov	r20,r5
   26df4:	dfc00515 	stw	ra,20(sp)
   26df8:	00265280 	call	26528 <__hi0bits>
   26dfc:	00c00804 	movi	r3,32
   26e00:	1889c83a 	sub	r4,r3,r2
   26e04:	a1000015 	stw	r4,0(r20)
   26e08:	01000284 	movi	r4,10
   26e0c:	84ffff04 	addi	r19,r16,-4
   26e10:	20801216 	blt	r4,r2,26e5c <__b2d+0xa0>
   26e14:	018002c4 	movi	r6,11
   26e18:	308dc83a 	sub	r6,r6,r2
   26e1c:	9186d83a 	srl	r3,r18,r6
   26e20:	18cffc34 	orhi	r3,r3,16368
   26e24:	8cc0212e 	bgeu	r17,r19,26eac <__b2d+0xf0>
   26e28:	813ffe17 	ldw	r4,-8(r16)
   26e2c:	218cd83a 	srl	r6,r4,r6
   26e30:	10800544 	addi	r2,r2,21
   26e34:	9084983a 	sll	r2,r18,r2
   26e38:	1184b03a 	or	r2,r2,r6
   26e3c:	dfc00517 	ldw	ra,20(sp)
   26e40:	dd000417 	ldw	r20,16(sp)
   26e44:	dcc00317 	ldw	r19,12(sp)
   26e48:	dc800217 	ldw	r18,8(sp)
   26e4c:	dc400117 	ldw	r17,4(sp)
   26e50:	dc000017 	ldw	r16,0(sp)
   26e54:	dec00604 	addi	sp,sp,24
   26e58:	f800283a 	ret
   26e5c:	8cc00f2e 	bgeu	r17,r19,26e9c <__b2d+0xe0>
   26e60:	117ffd44 	addi	r5,r2,-11
   26e64:	80bffe17 	ldw	r2,-8(r16)
   26e68:	28000e26 	beq	r5,zero,26ea4 <__b2d+0xe8>
   26e6c:	1949c83a 	sub	r4,r3,r5
   26e70:	9164983a 	sll	r18,r18,r5
   26e74:	1106d83a 	srl	r3,r2,r4
   26e78:	81bffe04 	addi	r6,r16,-8
   26e7c:	948ffc34 	orhi	r18,r18,16368
   26e80:	90c6b03a 	or	r3,r18,r3
   26e84:	89800e2e 	bgeu	r17,r6,26ec0 <__b2d+0x104>
   26e88:	81bffd17 	ldw	r6,-12(r16)
   26e8c:	1144983a 	sll	r2,r2,r5
   26e90:	310ad83a 	srl	r5,r6,r4
   26e94:	2884b03a 	or	r2,r5,r2
   26e98:	003fe806 	br	26e3c <__alt_data_end+0xfffe6e3c>
   26e9c:	10bffd44 	addi	r2,r2,-11
   26ea0:	1000041e 	bne	r2,zero,26eb4 <__b2d+0xf8>
   26ea4:	90cffc34 	orhi	r3,r18,16368
   26ea8:	003fe406 	br	26e3c <__alt_data_end+0xfffe6e3c>
   26eac:	000d883a 	mov	r6,zero
   26eb0:	003fdf06 	br	26e30 <__alt_data_end+0xfffe6e30>
   26eb4:	90a4983a 	sll	r18,r18,r2
   26eb8:	0005883a 	mov	r2,zero
   26ebc:	003ff906 	br	26ea4 <__alt_data_end+0xfffe6ea4>
   26ec0:	1144983a 	sll	r2,r2,r5
   26ec4:	003fdd06 	br	26e3c <__alt_data_end+0xfffe6e3c>

00026ec8 <__d2b>:
   26ec8:	defff804 	addi	sp,sp,-32
   26ecc:	dc000215 	stw	r16,8(sp)
   26ed0:	3021883a 	mov	r16,r6
   26ed4:	dc400315 	stw	r17,12(sp)
   26ed8:	8022907a 	slli	r17,r16,1
   26edc:	dd000615 	stw	r20,24(sp)
   26ee0:	2829883a 	mov	r20,r5
   26ee4:	01400044 	movi	r5,1
   26ee8:	dcc00515 	stw	r19,20(sp)
   26eec:	dc800415 	stw	r18,16(sp)
   26ef0:	dfc00715 	stw	ra,28(sp)
   26ef4:	3825883a 	mov	r18,r7
   26ef8:	8822d57a 	srli	r17,r17,21
   26efc:	00262340 	call	26234 <_Balloc>
   26f00:	1027883a 	mov	r19,r2
   26f04:	00800434 	movhi	r2,16
   26f08:	10bfffc4 	addi	r2,r2,-1
   26f0c:	808c703a 	and	r6,r16,r2
   26f10:	88000126 	beq	r17,zero,26f18 <__d2b+0x50>
   26f14:	31800434 	orhi	r6,r6,16
   26f18:	d9800015 	stw	r6,0(sp)
   26f1c:	a0002426 	beq	r20,zero,26fb0 <__d2b+0xe8>
   26f20:	d9000104 	addi	r4,sp,4
   26f24:	dd000115 	stw	r20,4(sp)
   26f28:	00265900 	call	26590 <__lo0bits>
   26f2c:	d8c00017 	ldw	r3,0(sp)
   26f30:	10002f1e 	bne	r2,zero,26ff0 <__d2b+0x128>
   26f34:	d9000117 	ldw	r4,4(sp)
   26f38:	99000515 	stw	r4,20(r19)
   26f3c:	1821003a 	cmpeq	r16,r3,zero
   26f40:	01000084 	movi	r4,2
   26f44:	2421c83a 	sub	r16,r4,r16
   26f48:	98c00615 	stw	r3,24(r19)
   26f4c:	9c000415 	stw	r16,16(r19)
   26f50:	88001f1e 	bne	r17,zero,26fd0 <__d2b+0x108>
   26f54:	10bef384 	addi	r2,r2,-1074
   26f58:	90800015 	stw	r2,0(r18)
   26f5c:	00900034 	movhi	r2,16384
   26f60:	10bfffc4 	addi	r2,r2,-1
   26f64:	8085883a 	add	r2,r16,r2
   26f68:	1085883a 	add	r2,r2,r2
   26f6c:	1085883a 	add	r2,r2,r2
   26f70:	9885883a 	add	r2,r19,r2
   26f74:	11000517 	ldw	r4,20(r2)
   26f78:	8020917a 	slli	r16,r16,5
   26f7c:	00265280 	call	26528 <__hi0bits>
   26f80:	d8c00817 	ldw	r3,32(sp)
   26f84:	8085c83a 	sub	r2,r16,r2
   26f88:	18800015 	stw	r2,0(r3)
   26f8c:	9805883a 	mov	r2,r19
   26f90:	dfc00717 	ldw	ra,28(sp)
   26f94:	dd000617 	ldw	r20,24(sp)
   26f98:	dcc00517 	ldw	r19,20(sp)
   26f9c:	dc800417 	ldw	r18,16(sp)
   26fa0:	dc400317 	ldw	r17,12(sp)
   26fa4:	dc000217 	ldw	r16,8(sp)
   26fa8:	dec00804 	addi	sp,sp,32
   26fac:	f800283a 	ret
   26fb0:	d809883a 	mov	r4,sp
   26fb4:	00265900 	call	26590 <__lo0bits>
   26fb8:	d8c00017 	ldw	r3,0(sp)
   26fbc:	04000044 	movi	r16,1
   26fc0:	9c000415 	stw	r16,16(r19)
   26fc4:	98c00515 	stw	r3,20(r19)
   26fc8:	10800804 	addi	r2,r2,32
   26fcc:	883fe126 	beq	r17,zero,26f54 <__alt_data_end+0xfffe6f54>
   26fd0:	00c00d44 	movi	r3,53
   26fd4:	8c7ef344 	addi	r17,r17,-1075
   26fd8:	88a3883a 	add	r17,r17,r2
   26fdc:	1885c83a 	sub	r2,r3,r2
   26fe0:	d8c00817 	ldw	r3,32(sp)
   26fe4:	94400015 	stw	r17,0(r18)
   26fe8:	18800015 	stw	r2,0(r3)
   26fec:	003fe706 	br	26f8c <__alt_data_end+0xfffe6f8c>
   26ff0:	01000804 	movi	r4,32
   26ff4:	2089c83a 	sub	r4,r4,r2
   26ff8:	1908983a 	sll	r4,r3,r4
   26ffc:	d9400117 	ldw	r5,4(sp)
   27000:	1886d83a 	srl	r3,r3,r2
   27004:	2148b03a 	or	r4,r4,r5
   27008:	99000515 	stw	r4,20(r19)
   2700c:	d8c00015 	stw	r3,0(sp)
   27010:	003fca06 	br	26f3c <__alt_data_end+0xfffe6f3c>

00027014 <__ratio>:
   27014:	defff904 	addi	sp,sp,-28
   27018:	dc400315 	stw	r17,12(sp)
   2701c:	2823883a 	mov	r17,r5
   27020:	d9400104 	addi	r5,sp,4
   27024:	dfc00615 	stw	ra,24(sp)
   27028:	dcc00515 	stw	r19,20(sp)
   2702c:	dc800415 	stw	r18,16(sp)
   27030:	2027883a 	mov	r19,r4
   27034:	dc000215 	stw	r16,8(sp)
   27038:	0026dbc0 	call	26dbc <__b2d>
   2703c:	d80b883a 	mov	r5,sp
   27040:	8809883a 	mov	r4,r17
   27044:	1025883a 	mov	r18,r2
   27048:	1821883a 	mov	r16,r3
   2704c:	0026dbc0 	call	26dbc <__b2d>
   27050:	8a000417 	ldw	r8,16(r17)
   27054:	99000417 	ldw	r4,16(r19)
   27058:	d9400117 	ldw	r5,4(sp)
   2705c:	2209c83a 	sub	r4,r4,r8
   27060:	2010917a 	slli	r8,r4,5
   27064:	d9000017 	ldw	r4,0(sp)
   27068:	2909c83a 	sub	r4,r5,r4
   2706c:	4109883a 	add	r4,r8,r4
   27070:	01000e0e 	bge	zero,r4,270ac <__ratio+0x98>
   27074:	2008953a 	slli	r4,r4,20
   27078:	2421883a 	add	r16,r4,r16
   2707c:	100d883a 	mov	r6,r2
   27080:	180f883a 	mov	r7,r3
   27084:	9009883a 	mov	r4,r18
   27088:	800b883a 	mov	r5,r16
   2708c:	002af000 	call	2af00 <__divdf3>
   27090:	dfc00617 	ldw	ra,24(sp)
   27094:	dcc00517 	ldw	r19,20(sp)
   27098:	dc800417 	ldw	r18,16(sp)
   2709c:	dc400317 	ldw	r17,12(sp)
   270a0:	dc000217 	ldw	r16,8(sp)
   270a4:	dec00704 	addi	sp,sp,28
   270a8:	f800283a 	ret
   270ac:	2008953a 	slli	r4,r4,20
   270b0:	1907c83a 	sub	r3,r3,r4
   270b4:	003ff106 	br	2707c <__alt_data_end+0xfffe707c>

000270b8 <_mprec_log10>:
   270b8:	defffe04 	addi	sp,sp,-8
   270bc:	dc000015 	stw	r16,0(sp)
   270c0:	dfc00115 	stw	ra,4(sp)
   270c4:	008005c4 	movi	r2,23
   270c8:	2021883a 	mov	r16,r4
   270cc:	11000d0e 	bge	r2,r4,27104 <_mprec_log10+0x4c>
   270d0:	0005883a 	mov	r2,zero
   270d4:	00cffc34 	movhi	r3,16368
   270d8:	843fffc4 	addi	r16,r16,-1
   270dc:	000d883a 	mov	r6,zero
   270e0:	01d00934 	movhi	r7,16420
   270e4:	1009883a 	mov	r4,r2
   270e8:	180b883a 	mov	r5,r3
   270ec:	002ba400 	call	2ba40 <__muldf3>
   270f0:	803ff91e 	bne	r16,zero,270d8 <__alt_data_end+0xfffe70d8>
   270f4:	dfc00117 	ldw	ra,4(sp)
   270f8:	dc000017 	ldw	r16,0(sp)
   270fc:	dec00204 	addi	sp,sp,8
   27100:	f800283a 	ret
   27104:	202090fa 	slli	r16,r4,3
   27108:	008000f4 	movhi	r2,3
   2710c:	1082b404 	addi	r2,r2,2768
   27110:	1421883a 	add	r16,r2,r16
   27114:	80800017 	ldw	r2,0(r16)
   27118:	80c00117 	ldw	r3,4(r16)
   2711c:	dfc00117 	ldw	ra,4(sp)
   27120:	dc000017 	ldw	r16,0(sp)
   27124:	dec00204 	addi	sp,sp,8
   27128:	f800283a 	ret

0002712c <__copybits>:
   2712c:	297fffc4 	addi	r5,r5,-1
   27130:	280fd17a 	srai	r7,r5,5
   27134:	30c00417 	ldw	r3,16(r6)
   27138:	30800504 	addi	r2,r6,20
   2713c:	39c00044 	addi	r7,r7,1
   27140:	18c7883a 	add	r3,r3,r3
   27144:	39cf883a 	add	r7,r7,r7
   27148:	18c7883a 	add	r3,r3,r3
   2714c:	39cf883a 	add	r7,r7,r7
   27150:	10c7883a 	add	r3,r2,r3
   27154:	21cf883a 	add	r7,r4,r7
   27158:	10c00d2e 	bgeu	r2,r3,27190 <__copybits+0x64>
   2715c:	200b883a 	mov	r5,r4
   27160:	12000017 	ldw	r8,0(r2)
   27164:	29400104 	addi	r5,r5,4
   27168:	10800104 	addi	r2,r2,4
   2716c:	2a3fff15 	stw	r8,-4(r5)
   27170:	10fffb36 	bltu	r2,r3,27160 <__alt_data_end+0xfffe7160>
   27174:	1985c83a 	sub	r2,r3,r6
   27178:	10bffac4 	addi	r2,r2,-21
   2717c:	1004d0ba 	srli	r2,r2,2
   27180:	10800044 	addi	r2,r2,1
   27184:	1085883a 	add	r2,r2,r2
   27188:	1085883a 	add	r2,r2,r2
   2718c:	2089883a 	add	r4,r4,r2
   27190:	21c0032e 	bgeu	r4,r7,271a0 <__copybits+0x74>
   27194:	20000015 	stw	zero,0(r4)
   27198:	21000104 	addi	r4,r4,4
   2719c:	21fffd36 	bltu	r4,r7,27194 <__alt_data_end+0xfffe7194>
   271a0:	f800283a 	ret

000271a4 <__any_on>:
   271a4:	20c00417 	ldw	r3,16(r4)
   271a8:	2805d17a 	srai	r2,r5,5
   271ac:	21000504 	addi	r4,r4,20
   271b0:	18800d0e 	bge	r3,r2,271e8 <__any_on+0x44>
   271b4:	18c7883a 	add	r3,r3,r3
   271b8:	18c7883a 	add	r3,r3,r3
   271bc:	20c7883a 	add	r3,r4,r3
   271c0:	20c0192e 	bgeu	r4,r3,27228 <__any_on+0x84>
   271c4:	18bfff17 	ldw	r2,-4(r3)
   271c8:	18ffff04 	addi	r3,r3,-4
   271cc:	1000041e 	bne	r2,zero,271e0 <__any_on+0x3c>
   271d0:	20c0142e 	bgeu	r4,r3,27224 <__any_on+0x80>
   271d4:	18ffff04 	addi	r3,r3,-4
   271d8:	19400017 	ldw	r5,0(r3)
   271dc:	283ffc26 	beq	r5,zero,271d0 <__alt_data_end+0xfffe71d0>
   271e0:	00800044 	movi	r2,1
   271e4:	f800283a 	ret
   271e8:	10c00a0e 	bge	r2,r3,27214 <__any_on+0x70>
   271ec:	1085883a 	add	r2,r2,r2
   271f0:	1085883a 	add	r2,r2,r2
   271f4:	294007cc 	andi	r5,r5,31
   271f8:	2087883a 	add	r3,r4,r2
   271fc:	283ff026 	beq	r5,zero,271c0 <__alt_data_end+0xfffe71c0>
   27200:	19800017 	ldw	r6,0(r3)
   27204:	3144d83a 	srl	r2,r6,r5
   27208:	114a983a 	sll	r5,r2,r5
   2720c:	317ff41e 	bne	r6,r5,271e0 <__alt_data_end+0xfffe71e0>
   27210:	003feb06 	br	271c0 <__alt_data_end+0xfffe71c0>
   27214:	1085883a 	add	r2,r2,r2
   27218:	1085883a 	add	r2,r2,r2
   2721c:	2087883a 	add	r3,r4,r2
   27220:	003fe706 	br	271c0 <__alt_data_end+0xfffe71c0>
   27224:	f800283a 	ret
   27228:	0005883a 	mov	r2,zero
   2722c:	f800283a 	ret

00027230 <_realloc_r>:
   27230:	defff604 	addi	sp,sp,-40
   27234:	dc800215 	stw	r18,8(sp)
   27238:	dfc00915 	stw	ra,36(sp)
   2723c:	df000815 	stw	fp,32(sp)
   27240:	ddc00715 	stw	r23,28(sp)
   27244:	dd800615 	stw	r22,24(sp)
   27248:	dd400515 	stw	r21,20(sp)
   2724c:	dd000415 	stw	r20,16(sp)
   27250:	dcc00315 	stw	r19,12(sp)
   27254:	dc400115 	stw	r17,4(sp)
   27258:	dc000015 	stw	r16,0(sp)
   2725c:	3025883a 	mov	r18,r6
   27260:	2800b726 	beq	r5,zero,27540 <_realloc_r+0x310>
   27264:	282b883a 	mov	r21,r5
   27268:	2029883a 	mov	r20,r4
   2726c:	002d2380 	call	2d238 <__malloc_lock>
   27270:	a8bfff17 	ldw	r2,-4(r21)
   27274:	043fff04 	movi	r16,-4
   27278:	90c002c4 	addi	r3,r18,11
   2727c:	01000584 	movi	r4,22
   27280:	acfffe04 	addi	r19,r21,-8
   27284:	1420703a 	and	r16,r2,r16
   27288:	20c0332e 	bgeu	r4,r3,27358 <_realloc_r+0x128>
   2728c:	047ffe04 	movi	r17,-8
   27290:	1c62703a 	and	r17,r3,r17
   27294:	8807883a 	mov	r3,r17
   27298:	88005816 	blt	r17,zero,273fc <_realloc_r+0x1cc>
   2729c:	8c805736 	bltu	r17,r18,273fc <_realloc_r+0x1cc>
   272a0:	80c0300e 	bge	r16,r3,27364 <_realloc_r+0x134>
   272a4:	070000f4 	movhi	fp,3
   272a8:	e7047004 	addi	fp,fp,4544
   272ac:	e1c00217 	ldw	r7,8(fp)
   272b0:	9c09883a 	add	r4,r19,r16
   272b4:	22000117 	ldw	r8,4(r4)
   272b8:	21c06326 	beq	r4,r7,27448 <_realloc_r+0x218>
   272bc:	017fff84 	movi	r5,-2
   272c0:	414a703a 	and	r5,r8,r5
   272c4:	214b883a 	add	r5,r4,r5
   272c8:	29800117 	ldw	r6,4(r5)
   272cc:	3180004c 	andi	r6,r6,1
   272d0:	30003f26 	beq	r6,zero,273d0 <_realloc_r+0x1a0>
   272d4:	1080004c 	andi	r2,r2,1
   272d8:	10008326 	beq	r2,zero,274e8 <_realloc_r+0x2b8>
   272dc:	900b883a 	mov	r5,r18
   272e0:	a009883a 	mov	r4,r20
   272e4:	00255780 	call	25578 <_malloc_r>
   272e8:	1025883a 	mov	r18,r2
   272ec:	10011e26 	beq	r2,zero,27768 <_realloc_r+0x538>
   272f0:	a93fff17 	ldw	r4,-4(r21)
   272f4:	10fffe04 	addi	r3,r2,-8
   272f8:	00bfff84 	movi	r2,-2
   272fc:	2084703a 	and	r2,r4,r2
   27300:	9885883a 	add	r2,r19,r2
   27304:	1880ee26 	beq	r3,r2,276c0 <_realloc_r+0x490>
   27308:	81bfff04 	addi	r6,r16,-4
   2730c:	00800904 	movi	r2,36
   27310:	1180b836 	bltu	r2,r6,275f4 <_realloc_r+0x3c4>
   27314:	00c004c4 	movi	r3,19
   27318:	19809636 	bltu	r3,r6,27574 <_realloc_r+0x344>
   2731c:	9005883a 	mov	r2,r18
   27320:	a807883a 	mov	r3,r21
   27324:	19000017 	ldw	r4,0(r3)
   27328:	11000015 	stw	r4,0(r2)
   2732c:	19000117 	ldw	r4,4(r3)
   27330:	11000115 	stw	r4,4(r2)
   27334:	18c00217 	ldw	r3,8(r3)
   27338:	10c00215 	stw	r3,8(r2)
   2733c:	a80b883a 	mov	r5,r21
   27340:	a009883a 	mov	r4,r20
   27344:	002498c0 	call	2498c <_free_r>
   27348:	a009883a 	mov	r4,r20
   2734c:	002d25c0 	call	2d25c <__malloc_unlock>
   27350:	9005883a 	mov	r2,r18
   27354:	00001206 	br	273a0 <_realloc_r+0x170>
   27358:	00c00404 	movi	r3,16
   2735c:	1823883a 	mov	r17,r3
   27360:	003fce06 	br	2729c <__alt_data_end+0xfffe729c>
   27364:	a825883a 	mov	r18,r21
   27368:	8445c83a 	sub	r2,r16,r17
   2736c:	00c003c4 	movi	r3,15
   27370:	18802636 	bltu	r3,r2,2740c <_realloc_r+0x1dc>
   27374:	99800117 	ldw	r6,4(r19)
   27378:	9c07883a 	add	r3,r19,r16
   2737c:	3180004c 	andi	r6,r6,1
   27380:	3420b03a 	or	r16,r6,r16
   27384:	9c000115 	stw	r16,4(r19)
   27388:	18800117 	ldw	r2,4(r3)
   2738c:	10800054 	ori	r2,r2,1
   27390:	18800115 	stw	r2,4(r3)
   27394:	a009883a 	mov	r4,r20
   27398:	002d25c0 	call	2d25c <__malloc_unlock>
   2739c:	9005883a 	mov	r2,r18
   273a0:	dfc00917 	ldw	ra,36(sp)
   273a4:	df000817 	ldw	fp,32(sp)
   273a8:	ddc00717 	ldw	r23,28(sp)
   273ac:	dd800617 	ldw	r22,24(sp)
   273b0:	dd400517 	ldw	r21,20(sp)
   273b4:	dd000417 	ldw	r20,16(sp)
   273b8:	dcc00317 	ldw	r19,12(sp)
   273bc:	dc800217 	ldw	r18,8(sp)
   273c0:	dc400117 	ldw	r17,4(sp)
   273c4:	dc000017 	ldw	r16,0(sp)
   273c8:	dec00a04 	addi	sp,sp,40
   273cc:	f800283a 	ret
   273d0:	017fff04 	movi	r5,-4
   273d4:	414a703a 	and	r5,r8,r5
   273d8:	814d883a 	add	r6,r16,r5
   273dc:	30c01f16 	blt	r6,r3,2745c <_realloc_r+0x22c>
   273e0:	20800317 	ldw	r2,12(r4)
   273e4:	20c00217 	ldw	r3,8(r4)
   273e8:	a825883a 	mov	r18,r21
   273ec:	3021883a 	mov	r16,r6
   273f0:	18800315 	stw	r2,12(r3)
   273f4:	10c00215 	stw	r3,8(r2)
   273f8:	003fdb06 	br	27368 <__alt_data_end+0xfffe7368>
   273fc:	00800304 	movi	r2,12
   27400:	a0800015 	stw	r2,0(r20)
   27404:	0005883a 	mov	r2,zero
   27408:	003fe506 	br	273a0 <__alt_data_end+0xfffe73a0>
   2740c:	98c00117 	ldw	r3,4(r19)
   27410:	9c4b883a 	add	r5,r19,r17
   27414:	11000054 	ori	r4,r2,1
   27418:	18c0004c 	andi	r3,r3,1
   2741c:	1c62b03a 	or	r17,r3,r17
   27420:	9c400115 	stw	r17,4(r19)
   27424:	29000115 	stw	r4,4(r5)
   27428:	2885883a 	add	r2,r5,r2
   2742c:	10c00117 	ldw	r3,4(r2)
   27430:	29400204 	addi	r5,r5,8
   27434:	a009883a 	mov	r4,r20
   27438:	18c00054 	ori	r3,r3,1
   2743c:	10c00115 	stw	r3,4(r2)
   27440:	002498c0 	call	2498c <_free_r>
   27444:	003fd306 	br	27394 <__alt_data_end+0xfffe7394>
   27448:	017fff04 	movi	r5,-4
   2744c:	414a703a 	and	r5,r8,r5
   27450:	89800404 	addi	r6,r17,16
   27454:	8151883a 	add	r8,r16,r5
   27458:	4180590e 	bge	r8,r6,275c0 <_realloc_r+0x390>
   2745c:	1080004c 	andi	r2,r2,1
   27460:	103f9e1e 	bne	r2,zero,272dc <__alt_data_end+0xfffe72dc>
   27464:	adbffe17 	ldw	r22,-8(r21)
   27468:	00bfff04 	movi	r2,-4
   2746c:	9dadc83a 	sub	r22,r19,r22
   27470:	b1800117 	ldw	r6,4(r22)
   27474:	3084703a 	and	r2,r6,r2
   27478:	20002026 	beq	r4,zero,274fc <_realloc_r+0x2cc>
   2747c:	80af883a 	add	r23,r16,r2
   27480:	b96f883a 	add	r23,r23,r5
   27484:	21c05f26 	beq	r4,r7,27604 <_realloc_r+0x3d4>
   27488:	b8c01c16 	blt	r23,r3,274fc <_realloc_r+0x2cc>
   2748c:	20800317 	ldw	r2,12(r4)
   27490:	20c00217 	ldw	r3,8(r4)
   27494:	81bfff04 	addi	r6,r16,-4
   27498:	01000904 	movi	r4,36
   2749c:	18800315 	stw	r2,12(r3)
   274a0:	10c00215 	stw	r3,8(r2)
   274a4:	b0c00217 	ldw	r3,8(r22)
   274a8:	b0800317 	ldw	r2,12(r22)
   274ac:	b4800204 	addi	r18,r22,8
   274b0:	18800315 	stw	r2,12(r3)
   274b4:	10c00215 	stw	r3,8(r2)
   274b8:	21801b36 	bltu	r4,r6,27528 <_realloc_r+0x2f8>
   274bc:	008004c4 	movi	r2,19
   274c0:	1180352e 	bgeu	r2,r6,27598 <_realloc_r+0x368>
   274c4:	a8800017 	ldw	r2,0(r21)
   274c8:	b0800215 	stw	r2,8(r22)
   274cc:	a8800117 	ldw	r2,4(r21)
   274d0:	b0800315 	stw	r2,12(r22)
   274d4:	008006c4 	movi	r2,27
   274d8:	11807f36 	bltu	r2,r6,276d8 <_realloc_r+0x4a8>
   274dc:	b0800404 	addi	r2,r22,16
   274e0:	ad400204 	addi	r21,r21,8
   274e4:	00002d06 	br	2759c <_realloc_r+0x36c>
   274e8:	adbffe17 	ldw	r22,-8(r21)
   274ec:	00bfff04 	movi	r2,-4
   274f0:	9dadc83a 	sub	r22,r19,r22
   274f4:	b1000117 	ldw	r4,4(r22)
   274f8:	2084703a 	and	r2,r4,r2
   274fc:	b03f7726 	beq	r22,zero,272dc <__alt_data_end+0xfffe72dc>
   27500:	80af883a 	add	r23,r16,r2
   27504:	b8ff7516 	blt	r23,r3,272dc <__alt_data_end+0xfffe72dc>
   27508:	b0800317 	ldw	r2,12(r22)
   2750c:	b0c00217 	ldw	r3,8(r22)
   27510:	81bfff04 	addi	r6,r16,-4
   27514:	01000904 	movi	r4,36
   27518:	18800315 	stw	r2,12(r3)
   2751c:	10c00215 	stw	r3,8(r2)
   27520:	b4800204 	addi	r18,r22,8
   27524:	21bfe52e 	bgeu	r4,r6,274bc <__alt_data_end+0xfffe74bc>
   27528:	a80b883a 	mov	r5,r21
   2752c:	9009883a 	mov	r4,r18
   27530:	0025fb00 	call	25fb0 <memmove>
   27534:	b821883a 	mov	r16,r23
   27538:	b027883a 	mov	r19,r22
   2753c:	003f8a06 	br	27368 <__alt_data_end+0xfffe7368>
   27540:	300b883a 	mov	r5,r6
   27544:	dfc00917 	ldw	ra,36(sp)
   27548:	df000817 	ldw	fp,32(sp)
   2754c:	ddc00717 	ldw	r23,28(sp)
   27550:	dd800617 	ldw	r22,24(sp)
   27554:	dd400517 	ldw	r21,20(sp)
   27558:	dd000417 	ldw	r20,16(sp)
   2755c:	dcc00317 	ldw	r19,12(sp)
   27560:	dc800217 	ldw	r18,8(sp)
   27564:	dc400117 	ldw	r17,4(sp)
   27568:	dc000017 	ldw	r16,0(sp)
   2756c:	dec00a04 	addi	sp,sp,40
   27570:	00255781 	jmpi	25578 <_malloc_r>
   27574:	a8c00017 	ldw	r3,0(r21)
   27578:	90c00015 	stw	r3,0(r18)
   2757c:	a8c00117 	ldw	r3,4(r21)
   27580:	90c00115 	stw	r3,4(r18)
   27584:	00c006c4 	movi	r3,27
   27588:	19804536 	bltu	r3,r6,276a0 <_realloc_r+0x470>
   2758c:	90800204 	addi	r2,r18,8
   27590:	a8c00204 	addi	r3,r21,8
   27594:	003f6306 	br	27324 <__alt_data_end+0xfffe7324>
   27598:	9005883a 	mov	r2,r18
   2759c:	a8c00017 	ldw	r3,0(r21)
   275a0:	b821883a 	mov	r16,r23
   275a4:	b027883a 	mov	r19,r22
   275a8:	10c00015 	stw	r3,0(r2)
   275ac:	a8c00117 	ldw	r3,4(r21)
   275b0:	10c00115 	stw	r3,4(r2)
   275b4:	a8c00217 	ldw	r3,8(r21)
   275b8:	10c00215 	stw	r3,8(r2)
   275bc:	003f6a06 	br	27368 <__alt_data_end+0xfffe7368>
   275c0:	9c67883a 	add	r19,r19,r17
   275c4:	4445c83a 	sub	r2,r8,r17
   275c8:	e4c00215 	stw	r19,8(fp)
   275cc:	10800054 	ori	r2,r2,1
   275d0:	98800115 	stw	r2,4(r19)
   275d4:	a8bfff17 	ldw	r2,-4(r21)
   275d8:	a009883a 	mov	r4,r20
   275dc:	1080004c 	andi	r2,r2,1
   275e0:	1462b03a 	or	r17,r2,r17
   275e4:	ac7fff15 	stw	r17,-4(r21)
   275e8:	002d25c0 	call	2d25c <__malloc_unlock>
   275ec:	a805883a 	mov	r2,r21
   275f0:	003f6b06 	br	273a0 <__alt_data_end+0xfffe73a0>
   275f4:	a80b883a 	mov	r5,r21
   275f8:	9009883a 	mov	r4,r18
   275fc:	0025fb00 	call	25fb0 <memmove>
   27600:	003f4e06 	br	2733c <__alt_data_end+0xfffe733c>
   27604:	89000404 	addi	r4,r17,16
   27608:	b93fbc16 	blt	r23,r4,274fc <__alt_data_end+0xfffe74fc>
   2760c:	b0800317 	ldw	r2,12(r22)
   27610:	b0c00217 	ldw	r3,8(r22)
   27614:	81bfff04 	addi	r6,r16,-4
   27618:	01000904 	movi	r4,36
   2761c:	18800315 	stw	r2,12(r3)
   27620:	10c00215 	stw	r3,8(r2)
   27624:	b4800204 	addi	r18,r22,8
   27628:	21804336 	bltu	r4,r6,27738 <_realloc_r+0x508>
   2762c:	008004c4 	movi	r2,19
   27630:	11803f2e 	bgeu	r2,r6,27730 <_realloc_r+0x500>
   27634:	a8800017 	ldw	r2,0(r21)
   27638:	b0800215 	stw	r2,8(r22)
   2763c:	a8800117 	ldw	r2,4(r21)
   27640:	b0800315 	stw	r2,12(r22)
   27644:	008006c4 	movi	r2,27
   27648:	11803f36 	bltu	r2,r6,27748 <_realloc_r+0x518>
   2764c:	b0800404 	addi	r2,r22,16
   27650:	ad400204 	addi	r21,r21,8
   27654:	a8c00017 	ldw	r3,0(r21)
   27658:	10c00015 	stw	r3,0(r2)
   2765c:	a8c00117 	ldw	r3,4(r21)
   27660:	10c00115 	stw	r3,4(r2)
   27664:	a8c00217 	ldw	r3,8(r21)
   27668:	10c00215 	stw	r3,8(r2)
   2766c:	b447883a 	add	r3,r22,r17
   27670:	bc45c83a 	sub	r2,r23,r17
   27674:	e0c00215 	stw	r3,8(fp)
   27678:	10800054 	ori	r2,r2,1
   2767c:	18800115 	stw	r2,4(r3)
   27680:	b0800117 	ldw	r2,4(r22)
   27684:	a009883a 	mov	r4,r20
   27688:	1080004c 	andi	r2,r2,1
   2768c:	1462b03a 	or	r17,r2,r17
   27690:	b4400115 	stw	r17,4(r22)
   27694:	002d25c0 	call	2d25c <__malloc_unlock>
   27698:	9005883a 	mov	r2,r18
   2769c:	003f4006 	br	273a0 <__alt_data_end+0xfffe73a0>
   276a0:	a8c00217 	ldw	r3,8(r21)
   276a4:	90c00215 	stw	r3,8(r18)
   276a8:	a8c00317 	ldw	r3,12(r21)
   276ac:	90c00315 	stw	r3,12(r18)
   276b0:	30801126 	beq	r6,r2,276f8 <_realloc_r+0x4c8>
   276b4:	90800404 	addi	r2,r18,16
   276b8:	a8c00404 	addi	r3,r21,16
   276bc:	003f1906 	br	27324 <__alt_data_end+0xfffe7324>
   276c0:	90ffff17 	ldw	r3,-4(r18)
   276c4:	00bfff04 	movi	r2,-4
   276c8:	a825883a 	mov	r18,r21
   276cc:	1884703a 	and	r2,r3,r2
   276d0:	80a1883a 	add	r16,r16,r2
   276d4:	003f2406 	br	27368 <__alt_data_end+0xfffe7368>
   276d8:	a8800217 	ldw	r2,8(r21)
   276dc:	b0800415 	stw	r2,16(r22)
   276e0:	a8800317 	ldw	r2,12(r21)
   276e4:	b0800515 	stw	r2,20(r22)
   276e8:	31000a26 	beq	r6,r4,27714 <_realloc_r+0x4e4>
   276ec:	b0800604 	addi	r2,r22,24
   276f0:	ad400404 	addi	r21,r21,16
   276f4:	003fa906 	br	2759c <__alt_data_end+0xfffe759c>
   276f8:	a9000417 	ldw	r4,16(r21)
   276fc:	90800604 	addi	r2,r18,24
   27700:	a8c00604 	addi	r3,r21,24
   27704:	91000415 	stw	r4,16(r18)
   27708:	a9000517 	ldw	r4,20(r21)
   2770c:	91000515 	stw	r4,20(r18)
   27710:	003f0406 	br	27324 <__alt_data_end+0xfffe7324>
   27714:	a8c00417 	ldw	r3,16(r21)
   27718:	ad400604 	addi	r21,r21,24
   2771c:	b0800804 	addi	r2,r22,32
   27720:	b0c00615 	stw	r3,24(r22)
   27724:	a8ffff17 	ldw	r3,-4(r21)
   27728:	b0c00715 	stw	r3,28(r22)
   2772c:	003f9b06 	br	2759c <__alt_data_end+0xfffe759c>
   27730:	9005883a 	mov	r2,r18
   27734:	003fc706 	br	27654 <__alt_data_end+0xfffe7654>
   27738:	a80b883a 	mov	r5,r21
   2773c:	9009883a 	mov	r4,r18
   27740:	0025fb00 	call	25fb0 <memmove>
   27744:	003fc906 	br	2766c <__alt_data_end+0xfffe766c>
   27748:	a8800217 	ldw	r2,8(r21)
   2774c:	b0800415 	stw	r2,16(r22)
   27750:	a8800317 	ldw	r2,12(r21)
   27754:	b0800515 	stw	r2,20(r22)
   27758:	31000726 	beq	r6,r4,27778 <_realloc_r+0x548>
   2775c:	b0800604 	addi	r2,r22,24
   27760:	ad400404 	addi	r21,r21,16
   27764:	003fbb06 	br	27654 <__alt_data_end+0xfffe7654>
   27768:	a009883a 	mov	r4,r20
   2776c:	002d25c0 	call	2d25c <__malloc_unlock>
   27770:	0005883a 	mov	r2,zero
   27774:	003f0a06 	br	273a0 <__alt_data_end+0xfffe73a0>
   27778:	a8c00417 	ldw	r3,16(r21)
   2777c:	ad400604 	addi	r21,r21,24
   27780:	b0800804 	addi	r2,r22,32
   27784:	b0c00615 	stw	r3,24(r22)
   27788:	a8ffff17 	ldw	r3,-4(r21)
   2778c:	b0c00715 	stw	r3,28(r22)
   27790:	003fb006 	br	27654 <__alt_data_end+0xfffe7654>

00027794 <__fpclassifyd>:
   27794:	00a00034 	movhi	r2,32768
   27798:	10bfffc4 	addi	r2,r2,-1
   2779c:	2884703a 	and	r2,r5,r2
   277a0:	10000726 	beq	r2,zero,277c0 <__fpclassifyd+0x2c>
   277a4:	00fffc34 	movhi	r3,65520
   277a8:	019ff834 	movhi	r6,32736
   277ac:	28c7883a 	add	r3,r5,r3
   277b0:	31bfffc4 	addi	r6,r6,-1
   277b4:	30c00536 	bltu	r6,r3,277cc <__fpclassifyd+0x38>
   277b8:	00800104 	movi	r2,4
   277bc:	f800283a 	ret
   277c0:	2000021e 	bne	r4,zero,277cc <__fpclassifyd+0x38>
   277c4:	00800084 	movi	r2,2
   277c8:	f800283a 	ret
   277cc:	00dffc34 	movhi	r3,32752
   277d0:	019ff834 	movhi	r6,32736
   277d4:	28cb883a 	add	r5,r5,r3
   277d8:	31bfffc4 	addi	r6,r6,-1
   277dc:	317ff62e 	bgeu	r6,r5,277b8 <__alt_data_end+0xfffe77b8>
   277e0:	01400434 	movhi	r5,16
   277e4:	297fffc4 	addi	r5,r5,-1
   277e8:	28800236 	bltu	r5,r2,277f4 <__fpclassifyd+0x60>
   277ec:	008000c4 	movi	r2,3
   277f0:	f800283a 	ret
   277f4:	10c00226 	beq	r2,r3,27800 <__fpclassifyd+0x6c>
   277f8:	0005883a 	mov	r2,zero
   277fc:	f800283a 	ret
   27800:	2005003a 	cmpeq	r2,r4,zero
   27804:	f800283a 	ret

00027808 <_sbrk_r>:
   27808:	defffd04 	addi	sp,sp,-12
   2780c:	dc000015 	stw	r16,0(sp)
   27810:	040000f4 	movhi	r16,3
   27814:	dc400115 	stw	r17,4(sp)
   27818:	84115d04 	addi	r16,r16,17780
   2781c:	2023883a 	mov	r17,r4
   27820:	2809883a 	mov	r4,r5
   27824:	dfc00215 	stw	ra,8(sp)
   27828:	80000015 	stw	zero,0(r16)
   2782c:	002d41c0 	call	2d41c <sbrk>
   27830:	00ffffc4 	movi	r3,-1
   27834:	10c00526 	beq	r2,r3,2784c <_sbrk_r+0x44>
   27838:	dfc00217 	ldw	ra,8(sp)
   2783c:	dc400117 	ldw	r17,4(sp)
   27840:	dc000017 	ldw	r16,0(sp)
   27844:	dec00304 	addi	sp,sp,12
   27848:	f800283a 	ret
   2784c:	80c00017 	ldw	r3,0(r16)
   27850:	183ff926 	beq	r3,zero,27838 <__alt_data_end+0xfffe7838>
   27854:	88c00015 	stw	r3,0(r17)
   27858:	003ff706 	br	27838 <__alt_data_end+0xfffe7838>

0002785c <__sread>:
   2785c:	defffe04 	addi	sp,sp,-8
   27860:	dc000015 	stw	r16,0(sp)
   27864:	2821883a 	mov	r16,r5
   27868:	2940038f 	ldh	r5,14(r5)
   2786c:	dfc00115 	stw	ra,4(sp)
   27870:	00296500 	call	29650 <_read_r>
   27874:	10000716 	blt	r2,zero,27894 <__sread+0x38>
   27878:	80c01417 	ldw	r3,80(r16)
   2787c:	1887883a 	add	r3,r3,r2
   27880:	80c01415 	stw	r3,80(r16)
   27884:	dfc00117 	ldw	ra,4(sp)
   27888:	dc000017 	ldw	r16,0(sp)
   2788c:	dec00204 	addi	sp,sp,8
   27890:	f800283a 	ret
   27894:	80c0030b 	ldhu	r3,12(r16)
   27898:	18fbffcc 	andi	r3,r3,61439
   2789c:	80c0030d 	sth	r3,12(r16)
   278a0:	dfc00117 	ldw	ra,4(sp)
   278a4:	dc000017 	ldw	r16,0(sp)
   278a8:	dec00204 	addi	sp,sp,8
   278ac:	f800283a 	ret

000278b0 <__seofread>:
   278b0:	0005883a 	mov	r2,zero
   278b4:	f800283a 	ret

000278b8 <__swrite>:
   278b8:	2880030b 	ldhu	r2,12(r5)
   278bc:	defffb04 	addi	sp,sp,-20
   278c0:	dcc00315 	stw	r19,12(sp)
   278c4:	dc800215 	stw	r18,8(sp)
   278c8:	dc400115 	stw	r17,4(sp)
   278cc:	dc000015 	stw	r16,0(sp)
   278d0:	dfc00415 	stw	ra,16(sp)
   278d4:	10c0400c 	andi	r3,r2,256
   278d8:	2821883a 	mov	r16,r5
   278dc:	2023883a 	mov	r17,r4
   278e0:	3025883a 	mov	r18,r6
   278e4:	3827883a 	mov	r19,r7
   278e8:	18000526 	beq	r3,zero,27900 <__swrite+0x48>
   278ec:	2940038f 	ldh	r5,14(r5)
   278f0:	01c00084 	movi	r7,2
   278f4:	000d883a 	mov	r6,zero
   278f8:	00295f00 	call	295f0 <_lseek_r>
   278fc:	8080030b 	ldhu	r2,12(r16)
   27900:	8140038f 	ldh	r5,14(r16)
   27904:	10bbffcc 	andi	r2,r2,61439
   27908:	980f883a 	mov	r7,r19
   2790c:	900d883a 	mov	r6,r18
   27910:	8809883a 	mov	r4,r17
   27914:	8080030d 	sth	r2,12(r16)
   27918:	dfc00417 	ldw	ra,16(sp)
   2791c:	dcc00317 	ldw	r19,12(sp)
   27920:	dc800217 	ldw	r18,8(sp)
   27924:	dc400117 	ldw	r17,4(sp)
   27928:	dc000017 	ldw	r16,0(sp)
   2792c:	dec00504 	addi	sp,sp,20
   27930:	00290bc1 	jmpi	290bc <_write_r>

00027934 <__sseek>:
   27934:	defffe04 	addi	sp,sp,-8
   27938:	dc000015 	stw	r16,0(sp)
   2793c:	2821883a 	mov	r16,r5
   27940:	2940038f 	ldh	r5,14(r5)
   27944:	dfc00115 	stw	ra,4(sp)
   27948:	00295f00 	call	295f0 <_lseek_r>
   2794c:	00ffffc4 	movi	r3,-1
   27950:	10c00826 	beq	r2,r3,27974 <__sseek+0x40>
   27954:	80c0030b 	ldhu	r3,12(r16)
   27958:	80801415 	stw	r2,80(r16)
   2795c:	18c40014 	ori	r3,r3,4096
   27960:	80c0030d 	sth	r3,12(r16)
   27964:	dfc00117 	ldw	ra,4(sp)
   27968:	dc000017 	ldw	r16,0(sp)
   2796c:	dec00204 	addi	sp,sp,8
   27970:	f800283a 	ret
   27974:	80c0030b 	ldhu	r3,12(r16)
   27978:	18fbffcc 	andi	r3,r3,61439
   2797c:	80c0030d 	sth	r3,12(r16)
   27980:	dfc00117 	ldw	ra,4(sp)
   27984:	dc000017 	ldw	r16,0(sp)
   27988:	dec00204 	addi	sp,sp,8
   2798c:	f800283a 	ret

00027990 <__sclose>:
   27990:	2940038f 	ldh	r5,14(r5)
   27994:	002911c1 	jmpi	2911c <_close_r>

00027998 <strcmp>:
   27998:	2144b03a 	or	r2,r4,r5
   2799c:	108000cc 	andi	r2,r2,3
   279a0:	1000171e 	bne	r2,zero,27a00 <strcmp+0x68>
   279a4:	20800017 	ldw	r2,0(r4)
   279a8:	28c00017 	ldw	r3,0(r5)
   279ac:	10c0141e 	bne	r2,r3,27a00 <strcmp+0x68>
   279b0:	027fbff4 	movhi	r9,65279
   279b4:	4a7fbfc4 	addi	r9,r9,-257
   279b8:	0086303a 	nor	r3,zero,r2
   279bc:	02202074 	movhi	r8,32897
   279c0:	1245883a 	add	r2,r2,r9
   279c4:	42202004 	addi	r8,r8,-32640
   279c8:	10c4703a 	and	r2,r2,r3
   279cc:	1204703a 	and	r2,r2,r8
   279d0:	10000226 	beq	r2,zero,279dc <strcmp+0x44>
   279d4:	00002306 	br	27a64 <strcmp+0xcc>
   279d8:	1000221e 	bne	r2,zero,27a64 <strcmp+0xcc>
   279dc:	21000104 	addi	r4,r4,4
   279e0:	20c00017 	ldw	r3,0(r4)
   279e4:	29400104 	addi	r5,r5,4
   279e8:	29800017 	ldw	r6,0(r5)
   279ec:	1a4f883a 	add	r7,r3,r9
   279f0:	00c4303a 	nor	r2,zero,r3
   279f4:	3884703a 	and	r2,r7,r2
   279f8:	1204703a 	and	r2,r2,r8
   279fc:	19bff626 	beq	r3,r6,279d8 <__alt_data_end+0xfffe79d8>
   27a00:	20800003 	ldbu	r2,0(r4)
   27a04:	10c03fcc 	andi	r3,r2,255
   27a08:	18c0201c 	xori	r3,r3,128
   27a0c:	18ffe004 	addi	r3,r3,-128
   27a10:	18000c26 	beq	r3,zero,27a44 <strcmp+0xac>
   27a14:	29800007 	ldb	r6,0(r5)
   27a18:	19800326 	beq	r3,r6,27a28 <strcmp+0x90>
   27a1c:	00001306 	br	27a6c <strcmp+0xd4>
   27a20:	29800007 	ldb	r6,0(r5)
   27a24:	11800b1e 	bne	r2,r6,27a54 <strcmp+0xbc>
   27a28:	21000044 	addi	r4,r4,1
   27a2c:	20c00003 	ldbu	r3,0(r4)
   27a30:	29400044 	addi	r5,r5,1
   27a34:	18803fcc 	andi	r2,r3,255
   27a38:	1080201c 	xori	r2,r2,128
   27a3c:	10bfe004 	addi	r2,r2,-128
   27a40:	103ff71e 	bne	r2,zero,27a20 <__alt_data_end+0xfffe7a20>
   27a44:	0007883a 	mov	r3,zero
   27a48:	28800003 	ldbu	r2,0(r5)
   27a4c:	1885c83a 	sub	r2,r3,r2
   27a50:	f800283a 	ret
   27a54:	28800003 	ldbu	r2,0(r5)
   27a58:	18c03fcc 	andi	r3,r3,255
   27a5c:	1885c83a 	sub	r2,r3,r2
   27a60:	f800283a 	ret
   27a64:	0005883a 	mov	r2,zero
   27a68:	f800283a 	ret
   27a6c:	10c03fcc 	andi	r3,r2,255
   27a70:	003ff506 	br	27a48 <__alt_data_end+0xfffe7a48>

00027a74 <__sprint_r.part.0>:
   27a74:	28801917 	ldw	r2,100(r5)
   27a78:	defff604 	addi	sp,sp,-40
   27a7c:	dd400515 	stw	r21,20(sp)
   27a80:	dfc00915 	stw	ra,36(sp)
   27a84:	df000815 	stw	fp,32(sp)
   27a88:	ddc00715 	stw	r23,28(sp)
   27a8c:	dd800615 	stw	r22,24(sp)
   27a90:	dd000415 	stw	r20,16(sp)
   27a94:	dcc00315 	stw	r19,12(sp)
   27a98:	dc800215 	stw	r18,8(sp)
   27a9c:	dc400115 	stw	r17,4(sp)
   27aa0:	dc000015 	stw	r16,0(sp)
   27aa4:	1088000c 	andi	r2,r2,8192
   27aa8:	302b883a 	mov	r21,r6
   27aac:	10002e26 	beq	r2,zero,27b68 <__sprint_r.part.0+0xf4>
   27ab0:	30800217 	ldw	r2,8(r6)
   27ab4:	35800017 	ldw	r22,0(r6)
   27ab8:	10002926 	beq	r2,zero,27b60 <__sprint_r.part.0+0xec>
   27abc:	2827883a 	mov	r19,r5
   27ac0:	2029883a 	mov	r20,r4
   27ac4:	b5c00104 	addi	r23,r22,4
   27ac8:	04bfffc4 	movi	r18,-1
   27acc:	bc400017 	ldw	r17,0(r23)
   27ad0:	b4000017 	ldw	r16,0(r22)
   27ad4:	0039883a 	mov	fp,zero
   27ad8:	8822d0ba 	srli	r17,r17,2
   27adc:	8800031e 	bne	r17,zero,27aec <__sprint_r.part.0+0x78>
   27ae0:	00001806 	br	27b44 <__sprint_r.part.0+0xd0>
   27ae4:	84000104 	addi	r16,r16,4
   27ae8:	8f001526 	beq	r17,fp,27b40 <__sprint_r.part.0+0xcc>
   27aec:	81400017 	ldw	r5,0(r16)
   27af0:	980d883a 	mov	r6,r19
   27af4:	a009883a 	mov	r4,r20
   27af8:	002949c0 	call	2949c <_fputwc_r>
   27afc:	e7000044 	addi	fp,fp,1
   27b00:	14bff81e 	bne	r2,r18,27ae4 <__alt_data_end+0xfffe7ae4>
   27b04:	9005883a 	mov	r2,r18
   27b08:	a8000215 	stw	zero,8(r21)
   27b0c:	a8000115 	stw	zero,4(r21)
   27b10:	dfc00917 	ldw	ra,36(sp)
   27b14:	df000817 	ldw	fp,32(sp)
   27b18:	ddc00717 	ldw	r23,28(sp)
   27b1c:	dd800617 	ldw	r22,24(sp)
   27b20:	dd400517 	ldw	r21,20(sp)
   27b24:	dd000417 	ldw	r20,16(sp)
   27b28:	dcc00317 	ldw	r19,12(sp)
   27b2c:	dc800217 	ldw	r18,8(sp)
   27b30:	dc400117 	ldw	r17,4(sp)
   27b34:	dc000017 	ldw	r16,0(sp)
   27b38:	dec00a04 	addi	sp,sp,40
   27b3c:	f800283a 	ret
   27b40:	a8800217 	ldw	r2,8(r21)
   27b44:	8c63883a 	add	r17,r17,r17
   27b48:	8c63883a 	add	r17,r17,r17
   27b4c:	1445c83a 	sub	r2,r2,r17
   27b50:	a8800215 	stw	r2,8(r21)
   27b54:	b5800204 	addi	r22,r22,8
   27b58:	bdc00204 	addi	r23,r23,8
   27b5c:	103fdb1e 	bne	r2,zero,27acc <__alt_data_end+0xfffe7acc>
   27b60:	0005883a 	mov	r2,zero
   27b64:	003fe806 	br	27b08 <__alt_data_end+0xfffe7b08>
   27b68:	0024c9c0 	call	24c9c <__sfvwrite_r>
   27b6c:	003fe606 	br	27b08 <__alt_data_end+0xfffe7b08>

00027b70 <__sprint_r>:
   27b70:	30c00217 	ldw	r3,8(r6)
   27b74:	18000126 	beq	r3,zero,27b7c <__sprint_r+0xc>
   27b78:	0027a741 	jmpi	27a74 <__sprint_r.part.0>
   27b7c:	30000115 	stw	zero,4(r6)
   27b80:	0005883a 	mov	r2,zero
   27b84:	f800283a 	ret

00027b88 <___vfiprintf_internal_r>:
   27b88:	deffc904 	addi	sp,sp,-220
   27b8c:	df003515 	stw	fp,212(sp)
   27b90:	dd003115 	stw	r20,196(sp)
   27b94:	dfc03615 	stw	ra,216(sp)
   27b98:	ddc03415 	stw	r23,208(sp)
   27b9c:	dd803315 	stw	r22,204(sp)
   27ba0:	dd403215 	stw	r21,200(sp)
   27ba4:	dcc03015 	stw	r19,192(sp)
   27ba8:	dc802f15 	stw	r18,188(sp)
   27bac:	dc402e15 	stw	r17,184(sp)
   27bb0:	dc002d15 	stw	r16,180(sp)
   27bb4:	d9002015 	stw	r4,128(sp)
   27bb8:	d9c02215 	stw	r7,136(sp)
   27bbc:	2829883a 	mov	r20,r5
   27bc0:	3039883a 	mov	fp,r6
   27bc4:	20000226 	beq	r4,zero,27bd0 <___vfiprintf_internal_r+0x48>
   27bc8:	20800e17 	ldw	r2,56(r4)
   27bcc:	1000cf26 	beq	r2,zero,27f0c <___vfiprintf_internal_r+0x384>
   27bd0:	a080030b 	ldhu	r2,12(r20)
   27bd4:	10c8000c 	andi	r3,r2,8192
   27bd8:	1800061e 	bne	r3,zero,27bf4 <___vfiprintf_internal_r+0x6c>
   27bdc:	a1001917 	ldw	r4,100(r20)
   27be0:	00f7ffc4 	movi	r3,-8193
   27be4:	10880014 	ori	r2,r2,8192
   27be8:	20c6703a 	and	r3,r4,r3
   27bec:	a080030d 	sth	r2,12(r20)
   27bf0:	a0c01915 	stw	r3,100(r20)
   27bf4:	10c0020c 	andi	r3,r2,8
   27bf8:	1800a926 	beq	r3,zero,27ea0 <___vfiprintf_internal_r+0x318>
   27bfc:	a0c00417 	ldw	r3,16(r20)
   27c00:	1800a726 	beq	r3,zero,27ea0 <___vfiprintf_internal_r+0x318>
   27c04:	1080068c 	andi	r2,r2,26
   27c08:	00c00284 	movi	r3,10
   27c0c:	10c0ac26 	beq	r2,r3,27ec0 <___vfiprintf_internal_r+0x338>
   27c10:	da801a04 	addi	r10,sp,104
   27c14:	da801e15 	stw	r10,120(sp)
   27c18:	d8801e17 	ldw	r2,120(sp)
   27c1c:	da8019c4 	addi	r10,sp,103
   27c20:	058000f4 	movhi	r22,3
   27c24:	05c000f4 	movhi	r23,3
   27c28:	da801f15 	stw	r10,124(sp)
   27c2c:	1295c83a 	sub	r10,r2,r10
   27c30:	b582ea04 	addi	r22,r22,2984
   27c34:	bdc2e604 	addi	r23,r23,2968
   27c38:	dec01a15 	stw	sp,104(sp)
   27c3c:	d8001c15 	stw	zero,112(sp)
   27c40:	d8001b15 	stw	zero,108(sp)
   27c44:	d8002615 	stw	zero,152(sp)
   27c48:	d8002315 	stw	zero,140(sp)
   27c4c:	da802715 	stw	r10,156(sp)
   27c50:	d811883a 	mov	r8,sp
   27c54:	dd002115 	stw	r20,132(sp)
   27c58:	e021883a 	mov	r16,fp
   27c5c:	80800007 	ldb	r2,0(r16)
   27c60:	1003ea26 	beq	r2,zero,28c0c <___vfiprintf_internal_r+0x1084>
   27c64:	00c00944 	movi	r3,37
   27c68:	8025883a 	mov	r18,r16
   27c6c:	10c0021e 	bne	r2,r3,27c78 <___vfiprintf_internal_r+0xf0>
   27c70:	00001606 	br	27ccc <___vfiprintf_internal_r+0x144>
   27c74:	10c00326 	beq	r2,r3,27c84 <___vfiprintf_internal_r+0xfc>
   27c78:	94800044 	addi	r18,r18,1
   27c7c:	90800007 	ldb	r2,0(r18)
   27c80:	103ffc1e 	bne	r2,zero,27c74 <__alt_data_end+0xfffe7c74>
   27c84:	9423c83a 	sub	r17,r18,r16
   27c88:	88001026 	beq	r17,zero,27ccc <___vfiprintf_internal_r+0x144>
   27c8c:	d8c01c17 	ldw	r3,112(sp)
   27c90:	d8801b17 	ldw	r2,108(sp)
   27c94:	44000015 	stw	r16,0(r8)
   27c98:	88c7883a 	add	r3,r17,r3
   27c9c:	10800044 	addi	r2,r2,1
   27ca0:	44400115 	stw	r17,4(r8)
   27ca4:	d8c01c15 	stw	r3,112(sp)
   27ca8:	d8801b15 	stw	r2,108(sp)
   27cac:	010001c4 	movi	r4,7
   27cb0:	2080760e 	bge	r4,r2,27e8c <___vfiprintf_internal_r+0x304>
   27cb4:	1803821e 	bne	r3,zero,28ac0 <___vfiprintf_internal_r+0xf38>
   27cb8:	da802317 	ldw	r10,140(sp)
   27cbc:	d8001b15 	stw	zero,108(sp)
   27cc0:	d811883a 	mov	r8,sp
   27cc4:	5455883a 	add	r10,r10,r17
   27cc8:	da802315 	stw	r10,140(sp)
   27ccc:	90800007 	ldb	r2,0(r18)
   27cd0:	10044626 	beq	r2,zero,28dec <___vfiprintf_internal_r+0x1264>
   27cd4:	90c00047 	ldb	r3,1(r18)
   27cd8:	94000044 	addi	r16,r18,1
   27cdc:	d8001d85 	stb	zero,118(sp)
   27ce0:	0009883a 	mov	r4,zero
   27ce4:	000f883a 	mov	r7,zero
   27ce8:	027fffc4 	movi	r9,-1
   27cec:	0023883a 	mov	r17,zero
   27cf0:	0029883a 	mov	r20,zero
   27cf4:	01401604 	movi	r5,88
   27cf8:	01800244 	movi	r6,9
   27cfc:	03400a84 	movi	r13,42
   27d00:	03001b04 	movi	r12,108
   27d04:	84000044 	addi	r16,r16,1
   27d08:	18bff804 	addi	r2,r3,-32
   27d0c:	28827336 	bltu	r5,r2,286dc <___vfiprintf_internal_r+0xb54>
   27d10:	100490ba 	slli	r2,r2,2
   27d14:	028000b4 	movhi	r10,2
   27d18:	529f4a04 	addi	r10,r10,32040
   27d1c:	1285883a 	add	r2,r2,r10
   27d20:	10800017 	ldw	r2,0(r2)
   27d24:	1000683a 	jmp	r2
   27d28:	00028410 	cmplti	zero,zero,2576
   27d2c:	000286dc 	xori	zero,zero,2587
   27d30:	000286dc 	xori	zero,zero,2587
   27d34:	00028430 	cmpltui	zero,zero,2576
   27d38:	000286dc 	xori	zero,zero,2587
   27d3c:	000286dc 	xori	zero,zero,2587
   27d40:	000286dc 	xori	zero,zero,2587
   27d44:	000286dc 	xori	zero,zero,2587
   27d48:	000286dc 	xori	zero,zero,2587
   27d4c:	000286dc 	xori	zero,zero,2587
   27d50:	00028618 	cmpnei	zero,zero,2584
   27d54:	00028634 	movhi	zero,2584
   27d58:	000286dc 	xori	zero,zero,2587
   27d5c:	00027f1c 	xori	zero,zero,2556
   27d60:	00028644 	movi	zero,2585
   27d64:	000286dc 	xori	zero,zero,2587
   27d68:	0002843c 	xorhi	zero,zero,2576
   27d6c:	00028448 	cmpgei	zero,zero,2577
   27d70:	00028448 	cmpgei	zero,zero,2577
   27d74:	00028448 	cmpgei	zero,zero,2577
   27d78:	00028448 	cmpgei	zero,zero,2577
   27d7c:	00028448 	cmpgei	zero,zero,2577
   27d80:	00028448 	cmpgei	zero,zero,2577
   27d84:	00028448 	cmpgei	zero,zero,2577
   27d88:	00028448 	cmpgei	zero,zero,2577
   27d8c:	00028448 	cmpgei	zero,zero,2577
   27d90:	000286dc 	xori	zero,zero,2587
   27d94:	000286dc 	xori	zero,zero,2587
   27d98:	000286dc 	xori	zero,zero,2587
   27d9c:	000286dc 	xori	zero,zero,2587
   27da0:	000286dc 	xori	zero,zero,2587
   27da4:	000286dc 	xori	zero,zero,2587
   27da8:	000286dc 	xori	zero,zero,2587
   27dac:	000286dc 	xori	zero,zero,2587
   27db0:	000286dc 	xori	zero,zero,2587
   27db4:	000286dc 	xori	zero,zero,2587
   27db8:	00028474 	movhi	zero,2577
   27dbc:	000286dc 	xori	zero,zero,2587
   27dc0:	000286dc 	xori	zero,zero,2587
   27dc4:	000286dc 	xori	zero,zero,2587
   27dc8:	000286dc 	xori	zero,zero,2587
   27dcc:	000286dc 	xori	zero,zero,2587
   27dd0:	000286dc 	xori	zero,zero,2587
   27dd4:	000286dc 	xori	zero,zero,2587
   27dd8:	000286dc 	xori	zero,zero,2587
   27ddc:	000286dc 	xori	zero,zero,2587
   27de0:	000286dc 	xori	zero,zero,2587
   27de4:	000284ac 	andhi	zero,zero,2578
   27de8:	000286dc 	xori	zero,zero,2587
   27dec:	000286dc 	xori	zero,zero,2587
   27df0:	000286dc 	xori	zero,zero,2587
   27df4:	000286dc 	xori	zero,zero,2587
   27df8:	000286dc 	xori	zero,zero,2587
   27dfc:	00028504 	movi	zero,2580
   27e00:	000286dc 	xori	zero,zero,2587
   27e04:	000286dc 	xori	zero,zero,2587
   27e08:	00028574 	movhi	zero,2581
   27e0c:	000286dc 	xori	zero,zero,2587
   27e10:	000286dc 	xori	zero,zero,2587
   27e14:	000286dc 	xori	zero,zero,2587
   27e18:	000286dc 	xori	zero,zero,2587
   27e1c:	000286dc 	xori	zero,zero,2587
   27e20:	000286dc 	xori	zero,zero,2587
   27e24:	000286dc 	xori	zero,zero,2587
   27e28:	000286dc 	xori	zero,zero,2587
   27e2c:	000286dc 	xori	zero,zero,2587
   27e30:	000286dc 	xori	zero,zero,2587
   27e34:	00028320 	cmpeqi	zero,zero,2572
   27e38:	0002834c 	andi	zero,zero,2573
   27e3c:	000286dc 	xori	zero,zero,2587
   27e40:	000286dc 	xori	zero,zero,2587
   27e44:	000286dc 	xori	zero,zero,2587
   27e48:	00028684 	movi	zero,2586
   27e4c:	0002834c 	andi	zero,zero,2573
   27e50:	000286dc 	xori	zero,zero,2587
   27e54:	000286dc 	xori	zero,zero,2587
   27e58:	000281e0 	cmpeqi	zero,zero,2567
   27e5c:	000286dc 	xori	zero,zero,2587
   27e60:	000281f0 	cmpltui	zero,zero,2567
   27e64:	0002822c 	andhi	zero,zero,2568
   27e68:	00027f28 	cmpgeui	zero,zero,2556
   27e6c:	000281d4 	movui	zero,2567
   27e70:	000286dc 	xori	zero,zero,2587
   27e74:	000285b0 	cmpltui	zero,zero,2582
   27e78:	000286dc 	xori	zero,zero,2587
   27e7c:	00028608 	cmpgei	zero,zero,2584
   27e80:	000286dc 	xori	zero,zero,2587
   27e84:	000286dc 	xori	zero,zero,2587
   27e88:	000282cc 	andi	zero,zero,2571
   27e8c:	42000204 	addi	r8,r8,8
   27e90:	da802317 	ldw	r10,140(sp)
   27e94:	5455883a 	add	r10,r10,r17
   27e98:	da802315 	stw	r10,140(sp)
   27e9c:	003f8b06 	br	27ccc <__alt_data_end+0xfffe7ccc>
   27ea0:	d9002017 	ldw	r4,128(sp)
   27ea4:	a00b883a 	mov	r5,r20
   27ea8:	00228440 	call	22844 <__swsetup_r>
   27eac:	1003b11e 	bne	r2,zero,28d74 <___vfiprintf_internal_r+0x11ec>
   27eb0:	a080030b 	ldhu	r2,12(r20)
   27eb4:	00c00284 	movi	r3,10
   27eb8:	1080068c 	andi	r2,r2,26
   27ebc:	10ff541e 	bne	r2,r3,27c10 <__alt_data_end+0xfffe7c10>
   27ec0:	a080038f 	ldh	r2,14(r20)
   27ec4:	103f5216 	blt	r2,zero,27c10 <__alt_data_end+0xfffe7c10>
   27ec8:	d9c02217 	ldw	r7,136(sp)
   27ecc:	d9002017 	ldw	r4,128(sp)
   27ed0:	e00d883a 	mov	r6,fp
   27ed4:	a00b883a 	mov	r5,r20
   27ed8:	00290000 	call	29000 <__sbprintf>
   27edc:	dfc03617 	ldw	ra,216(sp)
   27ee0:	df003517 	ldw	fp,212(sp)
   27ee4:	ddc03417 	ldw	r23,208(sp)
   27ee8:	dd803317 	ldw	r22,204(sp)
   27eec:	dd403217 	ldw	r21,200(sp)
   27ef0:	dd003117 	ldw	r20,196(sp)
   27ef4:	dcc03017 	ldw	r19,192(sp)
   27ef8:	dc802f17 	ldw	r18,188(sp)
   27efc:	dc402e17 	ldw	r17,184(sp)
   27f00:	dc002d17 	ldw	r16,180(sp)
   27f04:	dec03704 	addi	sp,sp,220
   27f08:	f800283a 	ret
   27f0c:	00248180 	call	24818 <__sinit>
   27f10:	003f2f06 	br	27bd0 <__alt_data_end+0xfffe7bd0>
   27f14:	0463c83a 	sub	r17,zero,r17
   27f18:	d8802215 	stw	r2,136(sp)
   27f1c:	a5000114 	ori	r20,r20,4
   27f20:	80c00007 	ldb	r3,0(r16)
   27f24:	003f7706 	br	27d04 <__alt_data_end+0xfffe7d04>
   27f28:	00800c04 	movi	r2,48
   27f2c:	da802217 	ldw	r10,136(sp)
   27f30:	d8801d05 	stb	r2,116(sp)
   27f34:	00801e04 	movi	r2,120
   27f38:	d8801d45 	stb	r2,117(sp)
   27f3c:	d8001d85 	stb	zero,118(sp)
   27f40:	50c00104 	addi	r3,r10,4
   27f44:	54800017 	ldw	r18,0(r10)
   27f48:	0027883a 	mov	r19,zero
   27f4c:	a0800094 	ori	r2,r20,2
   27f50:	48030b16 	blt	r9,zero,28b80 <___vfiprintf_internal_r+0xff8>
   27f54:	00bfdfc4 	movi	r2,-129
   27f58:	a096703a 	and	r11,r20,r2
   27f5c:	d8c02215 	stw	r3,136(sp)
   27f60:	5d000094 	ori	r20,r11,2
   27f64:	90032b1e 	bne	r18,zero,28c14 <___vfiprintf_internal_r+0x108c>
   27f68:	008000f4 	movhi	r2,3
   27f6c:	10828504 	addi	r2,r2,2580
   27f70:	d8802615 	stw	r2,152(sp)
   27f74:	0039883a 	mov	fp,zero
   27f78:	48017b1e 	bne	r9,zero,28568 <___vfiprintf_internal_r+0x9e0>
   27f7c:	0013883a 	mov	r9,zero
   27f80:	0027883a 	mov	r19,zero
   27f84:	dd401a04 	addi	r21,sp,104
   27f88:	4825883a 	mov	r18,r9
   27f8c:	4cc0010e 	bge	r9,r19,27f94 <___vfiprintf_internal_r+0x40c>
   27f90:	9825883a 	mov	r18,r19
   27f94:	e7003fcc 	andi	fp,fp,255
   27f98:	e700201c 	xori	fp,fp,128
   27f9c:	e73fe004 	addi	fp,fp,-128
   27fa0:	e0000126 	beq	fp,zero,27fa8 <___vfiprintf_internal_r+0x420>
   27fa4:	94800044 	addi	r18,r18,1
   27fa8:	a380008c 	andi	r14,r20,2
   27fac:	70000126 	beq	r14,zero,27fb4 <___vfiprintf_internal_r+0x42c>
   27fb0:	94800084 	addi	r18,r18,2
   27fb4:	a700210c 	andi	fp,r20,132
   27fb8:	e001df1e 	bne	fp,zero,28738 <___vfiprintf_internal_r+0xbb0>
   27fbc:	8c87c83a 	sub	r3,r17,r18
   27fc0:	00c1dd0e 	bge	zero,r3,28738 <___vfiprintf_internal_r+0xbb0>
   27fc4:	01c00404 	movi	r7,16
   27fc8:	d8801c17 	ldw	r2,112(sp)
   27fcc:	38c3ad0e 	bge	r7,r3,28e84 <___vfiprintf_internal_r+0x12fc>
   27fd0:	028000f4 	movhi	r10,3
   27fd4:	5282ea04 	addi	r10,r10,2984
   27fd8:	dc002915 	stw	r16,164(sp)
   27fdc:	d9801b17 	ldw	r6,108(sp)
   27fe0:	da802415 	stw	r10,144(sp)
   27fe4:	03c001c4 	movi	r15,7
   27fe8:	da402515 	stw	r9,148(sp)
   27fec:	db802815 	stw	r14,160(sp)
   27ff0:	1821883a 	mov	r16,r3
   27ff4:	00000506 	br	2800c <___vfiprintf_internal_r+0x484>
   27ff8:	31400084 	addi	r5,r6,2
   27ffc:	42000204 	addi	r8,r8,8
   28000:	200d883a 	mov	r6,r4
   28004:	843ffc04 	addi	r16,r16,-16
   28008:	3c000d0e 	bge	r7,r16,28040 <___vfiprintf_internal_r+0x4b8>
   2800c:	10800404 	addi	r2,r2,16
   28010:	31000044 	addi	r4,r6,1
   28014:	45800015 	stw	r22,0(r8)
   28018:	41c00115 	stw	r7,4(r8)
   2801c:	d8801c15 	stw	r2,112(sp)
   28020:	d9001b15 	stw	r4,108(sp)
   28024:	793ff40e 	bge	r15,r4,27ff8 <__alt_data_end+0xfffe7ff8>
   28028:	1001b51e 	bne	r2,zero,28700 <___vfiprintf_internal_r+0xb78>
   2802c:	843ffc04 	addi	r16,r16,-16
   28030:	000d883a 	mov	r6,zero
   28034:	01400044 	movi	r5,1
   28038:	d811883a 	mov	r8,sp
   2803c:	3c3ff316 	blt	r7,r16,2800c <__alt_data_end+0xfffe800c>
   28040:	8007883a 	mov	r3,r16
   28044:	da402517 	ldw	r9,148(sp)
   28048:	db802817 	ldw	r14,160(sp)
   2804c:	dc002917 	ldw	r16,164(sp)
   28050:	da802417 	ldw	r10,144(sp)
   28054:	1885883a 	add	r2,r3,r2
   28058:	40c00115 	stw	r3,4(r8)
   2805c:	42800015 	stw	r10,0(r8)
   28060:	d8801c15 	stw	r2,112(sp)
   28064:	d9401b15 	stw	r5,108(sp)
   28068:	00c001c4 	movi	r3,7
   2806c:	19426016 	blt	r3,r5,289f0 <___vfiprintf_internal_r+0xe68>
   28070:	d8c01d87 	ldb	r3,118(sp)
   28074:	42000204 	addi	r8,r8,8
   28078:	29000044 	addi	r4,r5,1
   2807c:	1801b31e 	bne	r3,zero,2874c <___vfiprintf_internal_r+0xbc4>
   28080:	7001c026 	beq	r14,zero,28784 <___vfiprintf_internal_r+0xbfc>
   28084:	d8c01d04 	addi	r3,sp,116
   28088:	10800084 	addi	r2,r2,2
   2808c:	40c00015 	stw	r3,0(r8)
   28090:	00c00084 	movi	r3,2
   28094:	40c00115 	stw	r3,4(r8)
   28098:	d8801c15 	stw	r2,112(sp)
   2809c:	d9001b15 	stw	r4,108(sp)
   280a0:	00c001c4 	movi	r3,7
   280a4:	1902650e 	bge	r3,r4,28a3c <___vfiprintf_internal_r+0xeb4>
   280a8:	10029a1e 	bne	r2,zero,28b14 <___vfiprintf_internal_r+0xf8c>
   280ac:	00c02004 	movi	r3,128
   280b0:	01000044 	movi	r4,1
   280b4:	000b883a 	mov	r5,zero
   280b8:	d811883a 	mov	r8,sp
   280bc:	e0c1b31e 	bne	fp,r3,2878c <___vfiprintf_internal_r+0xc04>
   280c0:	8cb9c83a 	sub	fp,r17,r18
   280c4:	0701b10e 	bge	zero,fp,2878c <___vfiprintf_internal_r+0xc04>
   280c8:	01c00404 	movi	r7,16
   280cc:	3f03890e 	bge	r7,fp,28ef4 <___vfiprintf_internal_r+0x136c>
   280d0:	00c000f4 	movhi	r3,3
   280d4:	18c2e604 	addi	r3,r3,2968
   280d8:	d8c02415 	stw	r3,144(sp)
   280dc:	8007883a 	mov	r3,r16
   280e0:	034001c4 	movi	r13,7
   280e4:	e021883a 	mov	r16,fp
   280e8:	da402515 	stw	r9,148(sp)
   280ec:	1839883a 	mov	fp,r3
   280f0:	00000506 	br	28108 <___vfiprintf_internal_r+0x580>
   280f4:	29800084 	addi	r6,r5,2
   280f8:	42000204 	addi	r8,r8,8
   280fc:	180b883a 	mov	r5,r3
   28100:	843ffc04 	addi	r16,r16,-16
   28104:	3c000d0e 	bge	r7,r16,2813c <___vfiprintf_internal_r+0x5b4>
   28108:	10800404 	addi	r2,r2,16
   2810c:	28c00044 	addi	r3,r5,1
   28110:	45c00015 	stw	r23,0(r8)
   28114:	41c00115 	stw	r7,4(r8)
   28118:	d8801c15 	stw	r2,112(sp)
   2811c:	d8c01b15 	stw	r3,108(sp)
   28120:	68fff40e 	bge	r13,r3,280f4 <__alt_data_end+0xfffe80f4>
   28124:	1002241e 	bne	r2,zero,289b8 <___vfiprintf_internal_r+0xe30>
   28128:	843ffc04 	addi	r16,r16,-16
   2812c:	01800044 	movi	r6,1
   28130:	000b883a 	mov	r5,zero
   28134:	d811883a 	mov	r8,sp
   28138:	3c3ff316 	blt	r7,r16,28108 <__alt_data_end+0xfffe8108>
   2813c:	da402517 	ldw	r9,148(sp)
   28140:	e007883a 	mov	r3,fp
   28144:	8039883a 	mov	fp,r16
   28148:	1821883a 	mov	r16,r3
   2814c:	d8c02417 	ldw	r3,144(sp)
   28150:	1705883a 	add	r2,r2,fp
   28154:	47000115 	stw	fp,4(r8)
   28158:	40c00015 	stw	r3,0(r8)
   2815c:	d8801c15 	stw	r2,112(sp)
   28160:	d9801b15 	stw	r6,108(sp)
   28164:	00c001c4 	movi	r3,7
   28168:	19827616 	blt	r3,r6,28b44 <___vfiprintf_internal_r+0xfbc>
   2816c:	4cf9c83a 	sub	fp,r9,r19
   28170:	42000204 	addi	r8,r8,8
   28174:	31000044 	addi	r4,r6,1
   28178:	300b883a 	mov	r5,r6
   2817c:	07018516 	blt	zero,fp,28794 <___vfiprintf_internal_r+0xc0c>
   28180:	9885883a 	add	r2,r19,r2
   28184:	45400015 	stw	r21,0(r8)
   28188:	44c00115 	stw	r19,4(r8)
   2818c:	d8801c15 	stw	r2,112(sp)
   28190:	d9001b15 	stw	r4,108(sp)
   28194:	00c001c4 	movi	r3,7
   28198:	1901dd0e 	bge	r3,r4,28910 <___vfiprintf_internal_r+0xd88>
   2819c:	1002401e 	bne	r2,zero,28aa0 <___vfiprintf_internal_r+0xf18>
   281a0:	d8001b15 	stw	zero,108(sp)
   281a4:	a2c0010c 	andi	r11,r20,4
   281a8:	58000226 	beq	r11,zero,281b4 <___vfiprintf_internal_r+0x62c>
   281ac:	8ca7c83a 	sub	r19,r17,r18
   281b0:	04c2f216 	blt	zero,r19,28d7c <___vfiprintf_internal_r+0x11f4>
   281b4:	8c80010e 	bge	r17,r18,281bc <___vfiprintf_internal_r+0x634>
   281b8:	9023883a 	mov	r17,r18
   281bc:	da802317 	ldw	r10,140(sp)
   281c0:	5455883a 	add	r10,r10,r17
   281c4:	da802315 	stw	r10,140(sp)
   281c8:	d8001b15 	stw	zero,108(sp)
   281cc:	d811883a 	mov	r8,sp
   281d0:	003ea206 	br	27c5c <__alt_data_end+0xfffe7c5c>
   281d4:	a5000814 	ori	r20,r20,32
   281d8:	80c00007 	ldb	r3,0(r16)
   281dc:	003ec906 	br	27d04 <__alt_data_end+0xfffe7d04>
   281e0:	80c00007 	ldb	r3,0(r16)
   281e4:	1b030926 	beq	r3,r12,28e0c <___vfiprintf_internal_r+0x1284>
   281e8:	a5000414 	ori	r20,r20,16
   281ec:	003ec506 	br	27d04 <__alt_data_end+0xfffe7d04>
   281f0:	21003fcc 	andi	r4,r4,255
   281f4:	20035e1e 	bne	r4,zero,28f70 <___vfiprintf_internal_r+0x13e8>
   281f8:	a080080c 	andi	r2,r20,32
   281fc:	1002a526 	beq	r2,zero,28c94 <___vfiprintf_internal_r+0x110c>
   28200:	da802217 	ldw	r10,136(sp)
   28204:	50800017 	ldw	r2,0(r10)
   28208:	da802317 	ldw	r10,140(sp)
   2820c:	5007d7fa 	srai	r3,r10,31
   28210:	da802217 	ldw	r10,136(sp)
   28214:	10c00115 	stw	r3,4(r2)
   28218:	52800104 	addi	r10,r10,4
   2821c:	da802215 	stw	r10,136(sp)
   28220:	da802317 	ldw	r10,140(sp)
   28224:	12800015 	stw	r10,0(r2)
   28228:	003e8c06 	br	27c5c <__alt_data_end+0xfffe7c5c>
   2822c:	21003fcc 	andi	r4,r4,255
   28230:	2003511e 	bne	r4,zero,28f78 <___vfiprintf_internal_r+0x13f0>
   28234:	a080080c 	andi	r2,r20,32
   28238:	1000a126 	beq	r2,zero,284c0 <___vfiprintf_internal_r+0x938>
   2823c:	da802217 	ldw	r10,136(sp)
   28240:	d8001d85 	stb	zero,118(sp)
   28244:	50800204 	addi	r2,r10,8
   28248:	54800017 	ldw	r18,0(r10)
   2824c:	54c00117 	ldw	r19,4(r10)
   28250:	4802b416 	blt	r9,zero,28d24 <___vfiprintf_internal_r+0x119c>
   28254:	013fdfc4 	movi	r4,-129
   28258:	94c6b03a 	or	r3,r18,r19
   2825c:	d8802215 	stw	r2,136(sp)
   28260:	a128703a 	and	r20,r20,r4
   28264:	1800a226 	beq	r3,zero,284f0 <___vfiprintf_internal_r+0x968>
   28268:	0039883a 	mov	fp,zero
   2826c:	dd401a04 	addi	r21,sp,104
   28270:	9006d0fa 	srli	r3,r18,3
   28274:	9808977a 	slli	r4,r19,29
   28278:	9826d0fa 	srli	r19,r19,3
   2827c:	948001cc 	andi	r18,r18,7
   28280:	90800c04 	addi	r2,r18,48
   28284:	ad7fffc4 	addi	r21,r21,-1
   28288:	20e4b03a 	or	r18,r4,r3
   2828c:	a8800005 	stb	r2,0(r21)
   28290:	94c6b03a 	or	r3,r18,r19
   28294:	183ff61e 	bne	r3,zero,28270 <__alt_data_end+0xfffe8270>
   28298:	a0c0004c 	andi	r3,r20,1
   2829c:	18005926 	beq	r3,zero,28404 <___vfiprintf_internal_r+0x87c>
   282a0:	10803fcc 	andi	r2,r2,255
   282a4:	1080201c 	xori	r2,r2,128
   282a8:	10bfe004 	addi	r2,r2,-128
   282ac:	00c00c04 	movi	r3,48
   282b0:	10c05426 	beq	r2,r3,28404 <___vfiprintf_internal_r+0x87c>
   282b4:	da801e17 	ldw	r10,120(sp)
   282b8:	a8bfffc4 	addi	r2,r21,-1
   282bc:	a8ffffc5 	stb	r3,-1(r21)
   282c0:	50a7c83a 	sub	r19,r10,r2
   282c4:	102b883a 	mov	r21,r2
   282c8:	003f2f06 	br	27f88 <__alt_data_end+0xfffe7f88>
   282cc:	21003fcc 	andi	r4,r4,255
   282d0:	2003421e 	bne	r4,zero,28fdc <___vfiprintf_internal_r+0x1454>
   282d4:	008000f4 	movhi	r2,3
   282d8:	10828504 	addi	r2,r2,2580
   282dc:	d8802615 	stw	r2,152(sp)
   282e0:	a080080c 	andi	r2,r20,32
   282e4:	1000aa26 	beq	r2,zero,28590 <___vfiprintf_internal_r+0xa08>
   282e8:	da802217 	ldw	r10,136(sp)
   282ec:	54800017 	ldw	r18,0(r10)
   282f0:	54c00117 	ldw	r19,4(r10)
   282f4:	52800204 	addi	r10,r10,8
   282f8:	da802215 	stw	r10,136(sp)
   282fc:	a080004c 	andi	r2,r20,1
   28300:	1001d226 	beq	r2,zero,28a4c <___vfiprintf_internal_r+0xec4>
   28304:	94c4b03a 	or	r2,r18,r19
   28308:	1002351e 	bne	r2,zero,28be0 <___vfiprintf_internal_r+0x1058>
   2830c:	d8001d85 	stb	zero,118(sp)
   28310:	48022216 	blt	r9,zero,28b9c <___vfiprintf_internal_r+0x1014>
   28314:	00bfdfc4 	movi	r2,-129
   28318:	a0a8703a 	and	r20,r20,r2
   2831c:	003f1506 	br	27f74 <__alt_data_end+0xfffe7f74>
   28320:	da802217 	ldw	r10,136(sp)
   28324:	04800044 	movi	r18,1
   28328:	d8001d85 	stb	zero,118(sp)
   2832c:	50800017 	ldw	r2,0(r10)
   28330:	52800104 	addi	r10,r10,4
   28334:	da802215 	stw	r10,136(sp)
   28338:	d8801005 	stb	r2,64(sp)
   2833c:	9027883a 	mov	r19,r18
   28340:	dd401004 	addi	r21,sp,64
   28344:	0013883a 	mov	r9,zero
   28348:	003f1706 	br	27fa8 <__alt_data_end+0xfffe7fa8>
   2834c:	21003fcc 	andi	r4,r4,255
   28350:	2003201e 	bne	r4,zero,28fd4 <___vfiprintf_internal_r+0x144c>
   28354:	a080080c 	andi	r2,r20,32
   28358:	10004b26 	beq	r2,zero,28488 <___vfiprintf_internal_r+0x900>
   2835c:	da802217 	ldw	r10,136(sp)
   28360:	50800117 	ldw	r2,4(r10)
   28364:	54800017 	ldw	r18,0(r10)
   28368:	52800204 	addi	r10,r10,8
   2836c:	da802215 	stw	r10,136(sp)
   28370:	1027883a 	mov	r19,r2
   28374:	10022c16 	blt	r2,zero,28c28 <___vfiprintf_internal_r+0x10a0>
   28378:	df001d83 	ldbu	fp,118(sp)
   2837c:	48007216 	blt	r9,zero,28548 <___vfiprintf_internal_r+0x9c0>
   28380:	00ffdfc4 	movi	r3,-129
   28384:	94c4b03a 	or	r2,r18,r19
   28388:	a0e8703a 	and	r20,r20,r3
   2838c:	1000cc26 	beq	r2,zero,286c0 <___vfiprintf_internal_r+0xb38>
   28390:	98021026 	beq	r19,zero,28bd4 <___vfiprintf_internal_r+0x104c>
   28394:	dc402415 	stw	r17,144(sp)
   28398:	dc002515 	stw	r16,148(sp)
   2839c:	9823883a 	mov	r17,r19
   283a0:	9021883a 	mov	r16,r18
   283a4:	dd401a04 	addi	r21,sp,104
   283a8:	4825883a 	mov	r18,r9
   283ac:	4027883a 	mov	r19,r8
   283b0:	8009883a 	mov	r4,r16
   283b4:	880b883a 	mov	r5,r17
   283b8:	01800284 	movi	r6,10
   283bc:	000f883a 	mov	r7,zero
   283c0:	0029f680 	call	29f68 <__umoddi3>
   283c4:	10800c04 	addi	r2,r2,48
   283c8:	ad7fffc4 	addi	r21,r21,-1
   283cc:	8009883a 	mov	r4,r16
   283d0:	880b883a 	mov	r5,r17
   283d4:	a8800005 	stb	r2,0(r21)
   283d8:	01800284 	movi	r6,10
   283dc:	000f883a 	mov	r7,zero
   283e0:	00299f00 	call	299f0 <__udivdi3>
   283e4:	1021883a 	mov	r16,r2
   283e8:	10c4b03a 	or	r2,r2,r3
   283ec:	1823883a 	mov	r17,r3
   283f0:	103fef1e 	bne	r2,zero,283b0 <__alt_data_end+0xfffe83b0>
   283f4:	dc402417 	ldw	r17,144(sp)
   283f8:	dc002517 	ldw	r16,148(sp)
   283fc:	9013883a 	mov	r9,r18
   28400:	9811883a 	mov	r8,r19
   28404:	da801e17 	ldw	r10,120(sp)
   28408:	5567c83a 	sub	r19,r10,r21
   2840c:	003ede06 	br	27f88 <__alt_data_end+0xfffe7f88>
   28410:	38803fcc 	andi	r2,r7,255
   28414:	1080201c 	xori	r2,r2,128
   28418:	10bfe004 	addi	r2,r2,-128
   2841c:	1002371e 	bne	r2,zero,28cfc <___vfiprintf_internal_r+0x1174>
   28420:	01000044 	movi	r4,1
   28424:	01c00804 	movi	r7,32
   28428:	80c00007 	ldb	r3,0(r16)
   2842c:	003e3506 	br	27d04 <__alt_data_end+0xfffe7d04>
   28430:	a5000054 	ori	r20,r20,1
   28434:	80c00007 	ldb	r3,0(r16)
   28438:	003e3206 	br	27d04 <__alt_data_end+0xfffe7d04>
   2843c:	a5002014 	ori	r20,r20,128
   28440:	80c00007 	ldb	r3,0(r16)
   28444:	003e2f06 	br	27d04 <__alt_data_end+0xfffe7d04>
   28448:	8015883a 	mov	r10,r16
   2844c:	0023883a 	mov	r17,zero
   28450:	18bff404 	addi	r2,r3,-48
   28454:	50c00007 	ldb	r3,0(r10)
   28458:	8c4002a4 	muli	r17,r17,10
   2845c:	84000044 	addi	r16,r16,1
   28460:	8015883a 	mov	r10,r16
   28464:	1463883a 	add	r17,r2,r17
   28468:	18bff404 	addi	r2,r3,-48
   2846c:	30bff92e 	bgeu	r6,r2,28454 <__alt_data_end+0xfffe8454>
   28470:	003e2506 	br	27d08 <__alt_data_end+0xfffe7d08>
   28474:	21003fcc 	andi	r4,r4,255
   28478:	2002d41e 	bne	r4,zero,28fcc <___vfiprintf_internal_r+0x1444>
   2847c:	a5000414 	ori	r20,r20,16
   28480:	a080080c 	andi	r2,r20,32
   28484:	103fb51e 	bne	r2,zero,2835c <__alt_data_end+0xfffe835c>
   28488:	a080040c 	andi	r2,r20,16
   2848c:	1001f826 	beq	r2,zero,28c70 <___vfiprintf_internal_r+0x10e8>
   28490:	da802217 	ldw	r10,136(sp)
   28494:	54800017 	ldw	r18,0(r10)
   28498:	52800104 	addi	r10,r10,4
   2849c:	da802215 	stw	r10,136(sp)
   284a0:	9027d7fa 	srai	r19,r18,31
   284a4:	9805883a 	mov	r2,r19
   284a8:	003fb206 	br	28374 <__alt_data_end+0xfffe8374>
   284ac:	21003fcc 	andi	r4,r4,255
   284b0:	2002c41e 	bne	r4,zero,28fc4 <___vfiprintf_internal_r+0x143c>
   284b4:	a5000414 	ori	r20,r20,16
   284b8:	a080080c 	andi	r2,r20,32
   284bc:	103f5f1e 	bne	r2,zero,2823c <__alt_data_end+0xfffe823c>
   284c0:	a080040c 	andi	r2,r20,16
   284c4:	10020f26 	beq	r2,zero,28d04 <___vfiprintf_internal_r+0x117c>
   284c8:	da802217 	ldw	r10,136(sp)
   284cc:	d8001d85 	stb	zero,118(sp)
   284d0:	0027883a 	mov	r19,zero
   284d4:	50800104 	addi	r2,r10,4
   284d8:	54800017 	ldw	r18,0(r10)
   284dc:	48021116 	blt	r9,zero,28d24 <___vfiprintf_internal_r+0x119c>
   284e0:	00ffdfc4 	movi	r3,-129
   284e4:	d8802215 	stw	r2,136(sp)
   284e8:	a0e8703a 	and	r20,r20,r3
   284ec:	903f5e1e 	bne	r18,zero,28268 <__alt_data_end+0xfffe8268>
   284f0:	0039883a 	mov	fp,zero
   284f4:	4802a626 	beq	r9,zero,28f90 <___vfiprintf_internal_r+0x1408>
   284f8:	0025883a 	mov	r18,zero
   284fc:	0027883a 	mov	r19,zero
   28500:	003f5a06 	br	2826c <__alt_data_end+0xfffe826c>
   28504:	21003fcc 	andi	r4,r4,255
   28508:	20029f1e 	bne	r4,zero,28f88 <___vfiprintf_internal_r+0x1400>
   2850c:	a5000414 	ori	r20,r20,16
   28510:	a080080c 	andi	r2,r20,32
   28514:	10005e1e 	bne	r2,zero,28690 <___vfiprintf_internal_r+0xb08>
   28518:	a080040c 	andi	r2,r20,16
   2851c:	1001a21e 	bne	r2,zero,28ba8 <___vfiprintf_internal_r+0x1020>
   28520:	a080100c 	andi	r2,r20,64
   28524:	d8001d85 	stb	zero,118(sp)
   28528:	da802217 	ldw	r10,136(sp)
   2852c:	1002231e 	bne	r2,zero,28dbc <___vfiprintf_internal_r+0x1234>
   28530:	50800104 	addi	r2,r10,4
   28534:	54800017 	ldw	r18,0(r10)
   28538:	0027883a 	mov	r19,zero
   2853c:	4801a00e 	bge	r9,zero,28bc0 <___vfiprintf_internal_r+0x1038>
   28540:	d8802215 	stw	r2,136(sp)
   28544:	0039883a 	mov	fp,zero
   28548:	94c4b03a 	or	r2,r18,r19
   2854c:	103f901e 	bne	r2,zero,28390 <__alt_data_end+0xfffe8390>
   28550:	00800044 	movi	r2,1
   28554:	10803fcc 	andi	r2,r2,255
   28558:	00c00044 	movi	r3,1
   2855c:	10c05926 	beq	r2,r3,286c4 <___vfiprintf_internal_r+0xb3c>
   28560:	00c00084 	movi	r3,2
   28564:	10ffe41e 	bne	r2,r3,284f8 <__alt_data_end+0xfffe84f8>
   28568:	0025883a 	mov	r18,zero
   2856c:	0027883a 	mov	r19,zero
   28570:	00013d06 	br	28a68 <___vfiprintf_internal_r+0xee0>
   28574:	21003fcc 	andi	r4,r4,255
   28578:	2002811e 	bne	r4,zero,28f80 <___vfiprintf_internal_r+0x13f8>
   2857c:	008000f4 	movhi	r2,3
   28580:	10828004 	addi	r2,r2,2560
   28584:	d8802615 	stw	r2,152(sp)
   28588:	a080080c 	andi	r2,r20,32
   2858c:	103f561e 	bne	r2,zero,282e8 <__alt_data_end+0xfffe82e8>
   28590:	a080040c 	andi	r2,r20,16
   28594:	1001d126 	beq	r2,zero,28cdc <___vfiprintf_internal_r+0x1154>
   28598:	da802217 	ldw	r10,136(sp)
   2859c:	0027883a 	mov	r19,zero
   285a0:	54800017 	ldw	r18,0(r10)
   285a4:	52800104 	addi	r10,r10,4
   285a8:	da802215 	stw	r10,136(sp)
   285ac:	003f5306 	br	282fc <__alt_data_end+0xfffe82fc>
   285b0:	da802217 	ldw	r10,136(sp)
   285b4:	d8001d85 	stb	zero,118(sp)
   285b8:	55400017 	ldw	r21,0(r10)
   285bc:	50c00104 	addi	r3,r10,4
   285c0:	a8024226 	beq	r21,zero,28ecc <___vfiprintf_internal_r+0x1344>
   285c4:	48021816 	blt	r9,zero,28e28 <___vfiprintf_internal_r+0x12a0>
   285c8:	480d883a 	mov	r6,r9
   285cc:	000b883a 	mov	r5,zero
   285d0:	a809883a 	mov	r4,r21
   285d4:	d8c02a15 	stw	r3,168(sp)
   285d8:	da002b15 	stw	r8,172(sp)
   285dc:	da402c15 	stw	r9,176(sp)
   285e0:	0025d840 	call	25d84 <memchr>
   285e4:	d8c02a17 	ldw	r3,168(sp)
   285e8:	da002b17 	ldw	r8,172(sp)
   285ec:	da402c17 	ldw	r9,176(sp)
   285f0:	10024826 	beq	r2,zero,28f14 <___vfiprintf_internal_r+0x138c>
   285f4:	1567c83a 	sub	r19,r2,r21
   285f8:	df001d83 	ldbu	fp,118(sp)
   285fc:	d8c02215 	stw	r3,136(sp)
   28600:	0013883a 	mov	r9,zero
   28604:	003e6006 	br	27f88 <__alt_data_end+0xfffe7f88>
   28608:	21003fcc 	andi	r4,r4,255
   2860c:	203fc026 	beq	r4,zero,28510 <__alt_data_end+0xfffe8510>
   28610:	d9c01d85 	stb	r7,118(sp)
   28614:	003fbe06 	br	28510 <__alt_data_end+0xfffe8510>
   28618:	da802217 	ldw	r10,136(sp)
   2861c:	54400017 	ldw	r17,0(r10)
   28620:	50800104 	addi	r2,r10,4
   28624:	883e3b16 	blt	r17,zero,27f14 <__alt_data_end+0xfffe7f14>
   28628:	d8802215 	stw	r2,136(sp)
   2862c:	80c00007 	ldb	r3,0(r16)
   28630:	003db406 	br	27d04 <__alt_data_end+0xfffe7d04>
   28634:	01000044 	movi	r4,1
   28638:	01c00ac4 	movi	r7,43
   2863c:	80c00007 	ldb	r3,0(r16)
   28640:	003db006 	br	27d04 <__alt_data_end+0xfffe7d04>
   28644:	80c00007 	ldb	r3,0(r16)
   28648:	82800044 	addi	r10,r16,1
   2864c:	1b423c26 	beq	r3,r13,28f40 <___vfiprintf_internal_r+0x13b8>
   28650:	18bff404 	addi	r2,r3,-48
   28654:	0013883a 	mov	r9,zero
   28658:	30822b36 	bltu	r6,r2,28f08 <___vfiprintf_internal_r+0x1380>
   2865c:	50c00007 	ldb	r3,0(r10)
   28660:	4a4002a4 	muli	r9,r9,10
   28664:	54000044 	addi	r16,r10,1
   28668:	8015883a 	mov	r10,r16
   2866c:	4893883a 	add	r9,r9,r2
   28670:	18bff404 	addi	r2,r3,-48
   28674:	30bff92e 	bgeu	r6,r2,2865c <__alt_data_end+0xfffe865c>
   28678:	483da30e 	bge	r9,zero,27d08 <__alt_data_end+0xfffe7d08>
   2867c:	027fffc4 	movi	r9,-1
   28680:	003da106 	br	27d08 <__alt_data_end+0xfffe7d08>
   28684:	a5001014 	ori	r20,r20,64
   28688:	80c00007 	ldb	r3,0(r16)
   2868c:	003d9d06 	br	27d04 <__alt_data_end+0xfffe7d04>
   28690:	da802217 	ldw	r10,136(sp)
   28694:	d8001d85 	stb	zero,118(sp)
   28698:	50c00204 	addi	r3,r10,8
   2869c:	54800017 	ldw	r18,0(r10)
   286a0:	54c00117 	ldw	r19,4(r10)
   286a4:	4801ca16 	blt	r9,zero,28dd0 <___vfiprintf_internal_r+0x1248>
   286a8:	013fdfc4 	movi	r4,-129
   286ac:	94c4b03a 	or	r2,r18,r19
   286b0:	d8c02215 	stw	r3,136(sp)
   286b4:	a128703a 	and	r20,r20,r4
   286b8:	0039883a 	mov	fp,zero
   286bc:	103f341e 	bne	r2,zero,28390 <__alt_data_end+0xfffe8390>
   286c0:	483e2e26 	beq	r9,zero,27f7c <__alt_data_end+0xfffe7f7c>
   286c4:	0025883a 	mov	r18,zero
   286c8:	94800c04 	addi	r18,r18,48
   286cc:	dc8019c5 	stb	r18,103(sp)
   286d0:	dcc02717 	ldw	r19,156(sp)
   286d4:	dd4019c4 	addi	r21,sp,103
   286d8:	003e2b06 	br	27f88 <__alt_data_end+0xfffe7f88>
   286dc:	21003fcc 	andi	r4,r4,255
   286e0:	2002361e 	bne	r4,zero,28fbc <___vfiprintf_internal_r+0x1434>
   286e4:	1801c126 	beq	r3,zero,28dec <___vfiprintf_internal_r+0x1264>
   286e8:	04800044 	movi	r18,1
   286ec:	d8c01005 	stb	r3,64(sp)
   286f0:	d8001d85 	stb	zero,118(sp)
   286f4:	9027883a 	mov	r19,r18
   286f8:	dd401004 	addi	r21,sp,64
   286fc:	003f1106 	br	28344 <__alt_data_end+0xfffe8344>
   28700:	d9402117 	ldw	r5,132(sp)
   28704:	d9002017 	ldw	r4,128(sp)
   28708:	d9801a04 	addi	r6,sp,104
   2870c:	d9c02b15 	stw	r7,172(sp)
   28710:	dbc02a15 	stw	r15,168(sp)
   28714:	0027a740 	call	27a74 <__sprint_r.part.0>
   28718:	d9c02b17 	ldw	r7,172(sp)
   2871c:	dbc02a17 	ldw	r15,168(sp)
   28720:	10006d1e 	bne	r2,zero,288d8 <___vfiprintf_internal_r+0xd50>
   28724:	d9801b17 	ldw	r6,108(sp)
   28728:	d8801c17 	ldw	r2,112(sp)
   2872c:	d811883a 	mov	r8,sp
   28730:	31400044 	addi	r5,r6,1
   28734:	003e3306 	br	28004 <__alt_data_end+0xfffe8004>
   28738:	d9401b17 	ldw	r5,108(sp)
   2873c:	d8801c17 	ldw	r2,112(sp)
   28740:	29000044 	addi	r4,r5,1
   28744:	d8c01d87 	ldb	r3,118(sp)
   28748:	183e4d26 	beq	r3,zero,28080 <__alt_data_end+0xfffe8080>
   2874c:	00c00044 	movi	r3,1
   28750:	d9401d84 	addi	r5,sp,118
   28754:	10c5883a 	add	r2,r2,r3
   28758:	41400015 	stw	r5,0(r8)
   2875c:	40c00115 	stw	r3,4(r8)
   28760:	d8801c15 	stw	r2,112(sp)
   28764:	d9001b15 	stw	r4,108(sp)
   28768:	014001c4 	movi	r5,7
   2876c:	2900a90e 	bge	r5,r4,28a14 <___vfiprintf_internal_r+0xe8c>
   28770:	1000da1e 	bne	r2,zero,28adc <___vfiprintf_internal_r+0xf54>
   28774:	7000ab1e 	bne	r14,zero,28a24 <___vfiprintf_internal_r+0xe9c>
   28778:	000b883a 	mov	r5,zero
   2877c:	1809883a 	mov	r4,r3
   28780:	d811883a 	mov	r8,sp
   28784:	00c02004 	movi	r3,128
   28788:	e0fe4d26 	beq	fp,r3,280c0 <__alt_data_end+0xfffe80c0>
   2878c:	4cf9c83a 	sub	fp,r9,r19
   28790:	073e7b0e 	bge	zero,fp,28180 <__alt_data_end+0xfffe8180>
   28794:	01c00404 	movi	r7,16
   28798:	3f01900e 	bge	r7,fp,28ddc <___vfiprintf_internal_r+0x1254>
   2879c:	00c000f4 	movhi	r3,3
   287a0:	18c2e604 	addi	r3,r3,2968
   287a4:	d8c02415 	stw	r3,144(sp)
   287a8:	034001c4 	movi	r13,7
   287ac:	00000506 	br	287c4 <___vfiprintf_internal_r+0xc3c>
   287b0:	29000084 	addi	r4,r5,2
   287b4:	42000204 	addi	r8,r8,8
   287b8:	180b883a 	mov	r5,r3
   287bc:	e73ffc04 	addi	fp,fp,-16
   287c0:	3f000d0e 	bge	r7,fp,287f8 <___vfiprintf_internal_r+0xc70>
   287c4:	10800404 	addi	r2,r2,16
   287c8:	28c00044 	addi	r3,r5,1
   287cc:	45c00015 	stw	r23,0(r8)
   287d0:	41c00115 	stw	r7,4(r8)
   287d4:	d8801c15 	stw	r2,112(sp)
   287d8:	d8c01b15 	stw	r3,108(sp)
   287dc:	68fff40e 	bge	r13,r3,287b0 <__alt_data_end+0xfffe87b0>
   287e0:	1000101e 	bne	r2,zero,28824 <___vfiprintf_internal_r+0xc9c>
   287e4:	e73ffc04 	addi	fp,fp,-16
   287e8:	01000044 	movi	r4,1
   287ec:	000b883a 	mov	r5,zero
   287f0:	d811883a 	mov	r8,sp
   287f4:	3f3ff316 	blt	r7,fp,287c4 <__alt_data_end+0xfffe87c4>
   287f8:	da802417 	ldw	r10,144(sp)
   287fc:	1705883a 	add	r2,r2,fp
   28800:	47000115 	stw	fp,4(r8)
   28804:	42800015 	stw	r10,0(r8)
   28808:	d8801c15 	stw	r2,112(sp)
   2880c:	d9001b15 	stw	r4,108(sp)
   28810:	00c001c4 	movi	r3,7
   28814:	19003616 	blt	r3,r4,288f0 <___vfiprintf_internal_r+0xd68>
   28818:	42000204 	addi	r8,r8,8
   2881c:	21000044 	addi	r4,r4,1
   28820:	003e5706 	br	28180 <__alt_data_end+0xfffe8180>
   28824:	d9402117 	ldw	r5,132(sp)
   28828:	d9002017 	ldw	r4,128(sp)
   2882c:	d9801a04 	addi	r6,sp,104
   28830:	d9c02b15 	stw	r7,172(sp)
   28834:	db402a15 	stw	r13,168(sp)
   28838:	0027a740 	call	27a74 <__sprint_r.part.0>
   2883c:	d9c02b17 	ldw	r7,172(sp)
   28840:	db402a17 	ldw	r13,168(sp)
   28844:	1000241e 	bne	r2,zero,288d8 <___vfiprintf_internal_r+0xd50>
   28848:	d9401b17 	ldw	r5,108(sp)
   2884c:	d8801c17 	ldw	r2,112(sp)
   28850:	d811883a 	mov	r8,sp
   28854:	29000044 	addi	r4,r5,1
   28858:	003fd806 	br	287bc <__alt_data_end+0xfffe87bc>
   2885c:	d9401b17 	ldw	r5,108(sp)
   28860:	00c000f4 	movhi	r3,3
   28864:	18c2ea04 	addi	r3,r3,2984
   28868:	d8c02415 	stw	r3,144(sp)
   2886c:	29400044 	addi	r5,r5,1
   28870:	d8c02417 	ldw	r3,144(sp)
   28874:	14c5883a 	add	r2,r2,r19
   28878:	44c00115 	stw	r19,4(r8)
   2887c:	40c00015 	stw	r3,0(r8)
   28880:	d8801c15 	stw	r2,112(sp)
   28884:	d9401b15 	stw	r5,108(sp)
   28888:	00c001c4 	movi	r3,7
   2888c:	1940070e 	bge	r3,r5,288ac <___vfiprintf_internal_r+0xd24>
   28890:	103e4826 	beq	r2,zero,281b4 <__alt_data_end+0xfffe81b4>
   28894:	d9402117 	ldw	r5,132(sp)
   28898:	d9002017 	ldw	r4,128(sp)
   2889c:	d9801a04 	addi	r6,sp,104
   288a0:	0027a740 	call	27a74 <__sprint_r.part.0>
   288a4:	10000c1e 	bne	r2,zero,288d8 <___vfiprintf_internal_r+0xd50>
   288a8:	d8801c17 	ldw	r2,112(sp)
   288ac:	8c80010e 	bge	r17,r18,288b4 <___vfiprintf_internal_r+0xd2c>
   288b0:	9023883a 	mov	r17,r18
   288b4:	da802317 	ldw	r10,140(sp)
   288b8:	5455883a 	add	r10,r10,r17
   288bc:	da802315 	stw	r10,140(sp)
   288c0:	103e4126 	beq	r2,zero,281c8 <__alt_data_end+0xfffe81c8>
   288c4:	d9402117 	ldw	r5,132(sp)
   288c8:	d9002017 	ldw	r4,128(sp)
   288cc:	d9801a04 	addi	r6,sp,104
   288d0:	0027a740 	call	27a74 <__sprint_r.part.0>
   288d4:	103e3c26 	beq	r2,zero,281c8 <__alt_data_end+0xfffe81c8>
   288d8:	dd002117 	ldw	r20,132(sp)
   288dc:	a080030b 	ldhu	r2,12(r20)
   288e0:	1080100c 	andi	r2,r2,64
   288e4:	1001231e 	bne	r2,zero,28d74 <___vfiprintf_internal_r+0x11ec>
   288e8:	d8802317 	ldw	r2,140(sp)
   288ec:	003d7b06 	br	27edc <__alt_data_end+0xfffe7edc>
   288f0:	1000991e 	bne	r2,zero,28b58 <___vfiprintf_internal_r+0xfd0>
   288f4:	00c00044 	movi	r3,1
   288f8:	9805883a 	mov	r2,r19
   288fc:	dd400015 	stw	r21,0(sp)
   28900:	dcc00115 	stw	r19,4(sp)
   28904:	dcc01c15 	stw	r19,112(sp)
   28908:	d8c01b15 	stw	r3,108(sp)
   2890c:	d811883a 	mov	r8,sp
   28910:	42000204 	addi	r8,r8,8
   28914:	a2c0010c 	andi	r11,r20,4
   28918:	583fe426 	beq	r11,zero,288ac <__alt_data_end+0xfffe88ac>
   2891c:	8ca7c83a 	sub	r19,r17,r18
   28920:	04ffe20e 	bge	zero,r19,288ac <__alt_data_end+0xfffe88ac>
   28924:	01c00404 	movi	r7,16
   28928:	3cffcc0e 	bge	r7,r19,2885c <__alt_data_end+0xfffe885c>
   2892c:	028000f4 	movhi	r10,3
   28930:	5282ea04 	addi	r10,r10,2984
   28934:	d9001b17 	ldw	r4,108(sp)
   28938:	da802415 	stw	r10,144(sp)
   2893c:	382b883a 	mov	r21,r7
   28940:	050001c4 	movi	r20,7
   28944:	df002017 	ldw	fp,128(sp)
   28948:	00000506 	br	28960 <___vfiprintf_internal_r+0xdd8>
   2894c:	21400084 	addi	r5,r4,2
   28950:	42000204 	addi	r8,r8,8
   28954:	1809883a 	mov	r4,r3
   28958:	9cfffc04 	addi	r19,r19,-16
   2895c:	acffc40e 	bge	r21,r19,28870 <__alt_data_end+0xfffe8870>
   28960:	10800404 	addi	r2,r2,16
   28964:	20c00044 	addi	r3,r4,1
   28968:	45800015 	stw	r22,0(r8)
   2896c:	45400115 	stw	r21,4(r8)
   28970:	d8801c15 	stw	r2,112(sp)
   28974:	d8c01b15 	stw	r3,108(sp)
   28978:	a0fff40e 	bge	r20,r3,2894c <__alt_data_end+0xfffe894c>
   2897c:	1000041e 	bne	r2,zero,28990 <___vfiprintf_internal_r+0xe08>
   28980:	01400044 	movi	r5,1
   28984:	0009883a 	mov	r4,zero
   28988:	d811883a 	mov	r8,sp
   2898c:	003ff206 	br	28958 <__alt_data_end+0xfffe8958>
   28990:	d9402117 	ldw	r5,132(sp)
   28994:	d9801a04 	addi	r6,sp,104
   28998:	e009883a 	mov	r4,fp
   2899c:	0027a740 	call	27a74 <__sprint_r.part.0>
   289a0:	103fcd1e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   289a4:	d9001b17 	ldw	r4,108(sp)
   289a8:	d8801c17 	ldw	r2,112(sp)
   289ac:	d811883a 	mov	r8,sp
   289b0:	21400044 	addi	r5,r4,1
   289b4:	003fe806 	br	28958 <__alt_data_end+0xfffe8958>
   289b8:	d9402117 	ldw	r5,132(sp)
   289bc:	d9002017 	ldw	r4,128(sp)
   289c0:	d9801a04 	addi	r6,sp,104
   289c4:	d9c02b15 	stw	r7,172(sp)
   289c8:	db402a15 	stw	r13,168(sp)
   289cc:	0027a740 	call	27a74 <__sprint_r.part.0>
   289d0:	d9c02b17 	ldw	r7,172(sp)
   289d4:	db402a17 	ldw	r13,168(sp)
   289d8:	103fbf1e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   289dc:	d9401b17 	ldw	r5,108(sp)
   289e0:	d8801c17 	ldw	r2,112(sp)
   289e4:	d811883a 	mov	r8,sp
   289e8:	29800044 	addi	r6,r5,1
   289ec:	003dc406 	br	28100 <__alt_data_end+0xfffe8100>
   289f0:	1000d21e 	bne	r2,zero,28d3c <___vfiprintf_internal_r+0x11b4>
   289f4:	d8c01d87 	ldb	r3,118(sp)
   289f8:	18009526 	beq	r3,zero,28c50 <___vfiprintf_internal_r+0x10c8>
   289fc:	00800044 	movi	r2,1
   28a00:	d8c01d84 	addi	r3,sp,118
   28a04:	1009883a 	mov	r4,r2
   28a08:	d8c00015 	stw	r3,0(sp)
   28a0c:	d8800115 	stw	r2,4(sp)
   28a10:	d811883a 	mov	r8,sp
   28a14:	200b883a 	mov	r5,r4
   28a18:	42000204 	addi	r8,r8,8
   28a1c:	21000044 	addi	r4,r4,1
   28a20:	003d9706 	br	28080 <__alt_data_end+0xfffe8080>
   28a24:	d9001d04 	addi	r4,sp,116
   28a28:	00800084 	movi	r2,2
   28a2c:	d9000015 	stw	r4,0(sp)
   28a30:	d8800115 	stw	r2,4(sp)
   28a34:	1809883a 	mov	r4,r3
   28a38:	d811883a 	mov	r8,sp
   28a3c:	200b883a 	mov	r5,r4
   28a40:	42000204 	addi	r8,r8,8
   28a44:	21000044 	addi	r4,r4,1
   28a48:	003f4e06 	br	28784 <__alt_data_end+0xfffe8784>
   28a4c:	d8001d85 	stb	zero,118(sp)
   28a50:	48005016 	blt	r9,zero,28b94 <___vfiprintf_internal_r+0x100c>
   28a54:	00ffdfc4 	movi	r3,-129
   28a58:	94c4b03a 	or	r2,r18,r19
   28a5c:	a0e8703a 	and	r20,r20,r3
   28a60:	103d4426 	beq	r2,zero,27f74 <__alt_data_end+0xfffe7f74>
   28a64:	0039883a 	mov	fp,zero
   28a68:	d9002617 	ldw	r4,152(sp)
   28a6c:	dd401a04 	addi	r21,sp,104
   28a70:	908003cc 	andi	r2,r18,15
   28a74:	9806973a 	slli	r3,r19,28
   28a78:	2085883a 	add	r2,r4,r2
   28a7c:	9024d13a 	srli	r18,r18,4
   28a80:	10800003 	ldbu	r2,0(r2)
   28a84:	9826d13a 	srli	r19,r19,4
   28a88:	ad7fffc4 	addi	r21,r21,-1
   28a8c:	1ca4b03a 	or	r18,r3,r18
   28a90:	a8800005 	stb	r2,0(r21)
   28a94:	94c4b03a 	or	r2,r18,r19
   28a98:	103ff51e 	bne	r2,zero,28a70 <__alt_data_end+0xfffe8a70>
   28a9c:	003e5906 	br	28404 <__alt_data_end+0xfffe8404>
   28aa0:	d9402117 	ldw	r5,132(sp)
   28aa4:	d9002017 	ldw	r4,128(sp)
   28aa8:	d9801a04 	addi	r6,sp,104
   28aac:	0027a740 	call	27a74 <__sprint_r.part.0>
   28ab0:	103f891e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   28ab4:	d8801c17 	ldw	r2,112(sp)
   28ab8:	d811883a 	mov	r8,sp
   28abc:	003f9506 	br	28914 <__alt_data_end+0xfffe8914>
   28ac0:	d9402117 	ldw	r5,132(sp)
   28ac4:	d9002017 	ldw	r4,128(sp)
   28ac8:	d9801a04 	addi	r6,sp,104
   28acc:	0027a740 	call	27a74 <__sprint_r.part.0>
   28ad0:	103f811e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   28ad4:	d811883a 	mov	r8,sp
   28ad8:	003ced06 	br	27e90 <__alt_data_end+0xfffe7e90>
   28adc:	d9402117 	ldw	r5,132(sp)
   28ae0:	d9002017 	ldw	r4,128(sp)
   28ae4:	d9801a04 	addi	r6,sp,104
   28ae8:	da402c15 	stw	r9,176(sp)
   28aec:	db802a15 	stw	r14,168(sp)
   28af0:	0027a740 	call	27a74 <__sprint_r.part.0>
   28af4:	da402c17 	ldw	r9,176(sp)
   28af8:	db802a17 	ldw	r14,168(sp)
   28afc:	103f761e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   28b00:	d9401b17 	ldw	r5,108(sp)
   28b04:	d8801c17 	ldw	r2,112(sp)
   28b08:	d811883a 	mov	r8,sp
   28b0c:	29000044 	addi	r4,r5,1
   28b10:	003d5b06 	br	28080 <__alt_data_end+0xfffe8080>
   28b14:	d9402117 	ldw	r5,132(sp)
   28b18:	d9002017 	ldw	r4,128(sp)
   28b1c:	d9801a04 	addi	r6,sp,104
   28b20:	da402c15 	stw	r9,176(sp)
   28b24:	0027a740 	call	27a74 <__sprint_r.part.0>
   28b28:	da402c17 	ldw	r9,176(sp)
   28b2c:	103f6a1e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   28b30:	d9401b17 	ldw	r5,108(sp)
   28b34:	d8801c17 	ldw	r2,112(sp)
   28b38:	d811883a 	mov	r8,sp
   28b3c:	29000044 	addi	r4,r5,1
   28b40:	003f1006 	br	28784 <__alt_data_end+0xfffe8784>
   28b44:	1000c31e 	bne	r2,zero,28e54 <___vfiprintf_internal_r+0x12cc>
   28b48:	01000044 	movi	r4,1
   28b4c:	000b883a 	mov	r5,zero
   28b50:	d811883a 	mov	r8,sp
   28b54:	003f0d06 	br	2878c <__alt_data_end+0xfffe878c>
   28b58:	d9402117 	ldw	r5,132(sp)
   28b5c:	d9002017 	ldw	r4,128(sp)
   28b60:	d9801a04 	addi	r6,sp,104
   28b64:	0027a740 	call	27a74 <__sprint_r.part.0>
   28b68:	103f5b1e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   28b6c:	d9001b17 	ldw	r4,108(sp)
   28b70:	d8801c17 	ldw	r2,112(sp)
   28b74:	d811883a 	mov	r8,sp
   28b78:	21000044 	addi	r4,r4,1
   28b7c:	003d8006 	br	28180 <__alt_data_end+0xfffe8180>
   28b80:	010000f4 	movhi	r4,3
   28b84:	21028504 	addi	r4,r4,2580
   28b88:	d9002615 	stw	r4,152(sp)
   28b8c:	d8c02215 	stw	r3,136(sp)
   28b90:	1029883a 	mov	r20,r2
   28b94:	94c4b03a 	or	r2,r18,r19
   28b98:	103fb21e 	bne	r2,zero,28a64 <__alt_data_end+0xfffe8a64>
   28b9c:	0039883a 	mov	fp,zero
   28ba0:	00800084 	movi	r2,2
   28ba4:	003e6b06 	br	28554 <__alt_data_end+0xfffe8554>
   28ba8:	da802217 	ldw	r10,136(sp)
   28bac:	d8001d85 	stb	zero,118(sp)
   28bb0:	0027883a 	mov	r19,zero
   28bb4:	50800104 	addi	r2,r10,4
   28bb8:	54800017 	ldw	r18,0(r10)
   28bbc:	483e6016 	blt	r9,zero,28540 <__alt_data_end+0xfffe8540>
   28bc0:	00ffdfc4 	movi	r3,-129
   28bc4:	d8802215 	stw	r2,136(sp)
   28bc8:	a0e8703a 	and	r20,r20,r3
   28bcc:	0039883a 	mov	fp,zero
   28bd0:	903ebb26 	beq	r18,zero,286c0 <__alt_data_end+0xfffe86c0>
   28bd4:	00800244 	movi	r2,9
   28bd8:	14bdee36 	bltu	r2,r18,28394 <__alt_data_end+0xfffe8394>
   28bdc:	003eba06 	br	286c8 <__alt_data_end+0xfffe86c8>
   28be0:	00800c04 	movi	r2,48
   28be4:	d8c01d45 	stb	r3,117(sp)
   28be8:	d8801d05 	stb	r2,116(sp)
   28bec:	d8001d85 	stb	zero,118(sp)
   28bf0:	a0c00094 	ori	r3,r20,2
   28bf4:	4800a916 	blt	r9,zero,28e9c <___vfiprintf_internal_r+0x1314>
   28bf8:	00bfdfc4 	movi	r2,-129
   28bfc:	a096703a 	and	r11,r20,r2
   28c00:	5d000094 	ori	r20,r11,2
   28c04:	0039883a 	mov	fp,zero
   28c08:	003f9706 	br	28a68 <__alt_data_end+0xfffe8a68>
   28c0c:	8025883a 	mov	r18,r16
   28c10:	003c2e06 	br	27ccc <__alt_data_end+0xfffe7ccc>
   28c14:	008000f4 	movhi	r2,3
   28c18:	10828504 	addi	r2,r2,2580
   28c1c:	0039883a 	mov	fp,zero
   28c20:	d8802615 	stw	r2,152(sp)
   28c24:	003f9006 	br	28a68 <__alt_data_end+0xfffe8a68>
   28c28:	04a5c83a 	sub	r18,zero,r18
   28c2c:	07000b44 	movi	fp,45
   28c30:	9004c03a 	cmpne	r2,r18,zero
   28c34:	04e7c83a 	sub	r19,zero,r19
   28c38:	df001d85 	stb	fp,118(sp)
   28c3c:	98a7c83a 	sub	r19,r19,r2
   28c40:	48009f16 	blt	r9,zero,28ec0 <___vfiprintf_internal_r+0x1338>
   28c44:	00bfdfc4 	movi	r2,-129
   28c48:	a0a8703a 	and	r20,r20,r2
   28c4c:	003dd006 	br	28390 <__alt_data_end+0xfffe8390>
   28c50:	70004c26 	beq	r14,zero,28d84 <___vfiprintf_internal_r+0x11fc>
   28c54:	00800084 	movi	r2,2
   28c58:	d8c01d04 	addi	r3,sp,116
   28c5c:	d8c00015 	stw	r3,0(sp)
   28c60:	d8800115 	stw	r2,4(sp)
   28c64:	01000044 	movi	r4,1
   28c68:	d811883a 	mov	r8,sp
   28c6c:	003f7306 	br	28a3c <__alt_data_end+0xfffe8a3c>
   28c70:	a080100c 	andi	r2,r20,64
   28c74:	da802217 	ldw	r10,136(sp)
   28c78:	103e0626 	beq	r2,zero,28494 <__alt_data_end+0xfffe8494>
   28c7c:	5480000f 	ldh	r18,0(r10)
   28c80:	52800104 	addi	r10,r10,4
   28c84:	da802215 	stw	r10,136(sp)
   28c88:	9027d7fa 	srai	r19,r18,31
   28c8c:	9805883a 	mov	r2,r19
   28c90:	003db806 	br	28374 <__alt_data_end+0xfffe8374>
   28c94:	a080040c 	andi	r2,r20,16
   28c98:	1000091e 	bne	r2,zero,28cc0 <___vfiprintf_internal_r+0x1138>
   28c9c:	a2c0100c 	andi	r11,r20,64
   28ca0:	58000726 	beq	r11,zero,28cc0 <___vfiprintf_internal_r+0x1138>
   28ca4:	da802217 	ldw	r10,136(sp)
   28ca8:	50800017 	ldw	r2,0(r10)
   28cac:	52800104 	addi	r10,r10,4
   28cb0:	da802215 	stw	r10,136(sp)
   28cb4:	da802317 	ldw	r10,140(sp)
   28cb8:	1280000d 	sth	r10,0(r2)
   28cbc:	003be706 	br	27c5c <__alt_data_end+0xfffe7c5c>
   28cc0:	da802217 	ldw	r10,136(sp)
   28cc4:	50800017 	ldw	r2,0(r10)
   28cc8:	52800104 	addi	r10,r10,4
   28ccc:	da802215 	stw	r10,136(sp)
   28cd0:	da802317 	ldw	r10,140(sp)
   28cd4:	12800015 	stw	r10,0(r2)
   28cd8:	003be006 	br	27c5c <__alt_data_end+0xfffe7c5c>
   28cdc:	a080100c 	andi	r2,r20,64
   28ce0:	da802217 	ldw	r10,136(sp)
   28ce4:	10003026 	beq	r2,zero,28da8 <___vfiprintf_internal_r+0x1220>
   28ce8:	5480000b 	ldhu	r18,0(r10)
   28cec:	52800104 	addi	r10,r10,4
   28cf0:	0027883a 	mov	r19,zero
   28cf4:	da802215 	stw	r10,136(sp)
   28cf8:	003d8006 	br	282fc <__alt_data_end+0xfffe82fc>
   28cfc:	80c00007 	ldb	r3,0(r16)
   28d00:	003c0006 	br	27d04 <__alt_data_end+0xfffe7d04>
   28d04:	a080100c 	andi	r2,r20,64
   28d08:	d8001d85 	stb	zero,118(sp)
   28d0c:	da802217 	ldw	r10,136(sp)
   28d10:	1000201e 	bne	r2,zero,28d94 <___vfiprintf_internal_r+0x120c>
   28d14:	50800104 	addi	r2,r10,4
   28d18:	54800017 	ldw	r18,0(r10)
   28d1c:	0027883a 	mov	r19,zero
   28d20:	483def0e 	bge	r9,zero,284e0 <__alt_data_end+0xfffe84e0>
   28d24:	94c6b03a 	or	r3,r18,r19
   28d28:	d8802215 	stw	r2,136(sp)
   28d2c:	183d4e1e 	bne	r3,zero,28268 <__alt_data_end+0xfffe8268>
   28d30:	0039883a 	mov	fp,zero
   28d34:	0005883a 	mov	r2,zero
   28d38:	003e0606 	br	28554 <__alt_data_end+0xfffe8554>
   28d3c:	d9402117 	ldw	r5,132(sp)
   28d40:	d9002017 	ldw	r4,128(sp)
   28d44:	d9801a04 	addi	r6,sp,104
   28d48:	da402c15 	stw	r9,176(sp)
   28d4c:	db802a15 	stw	r14,168(sp)
   28d50:	0027a740 	call	27a74 <__sprint_r.part.0>
   28d54:	da402c17 	ldw	r9,176(sp)
   28d58:	db802a17 	ldw	r14,168(sp)
   28d5c:	103ede1e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   28d60:	d9401b17 	ldw	r5,108(sp)
   28d64:	d8801c17 	ldw	r2,112(sp)
   28d68:	d811883a 	mov	r8,sp
   28d6c:	29000044 	addi	r4,r5,1
   28d70:	003e7406 	br	28744 <__alt_data_end+0xfffe8744>
   28d74:	00bfffc4 	movi	r2,-1
   28d78:	003c5806 	br	27edc <__alt_data_end+0xfffe7edc>
   28d7c:	d811883a 	mov	r8,sp
   28d80:	003ee806 	br	28924 <__alt_data_end+0xfffe8924>
   28d84:	000b883a 	mov	r5,zero
   28d88:	01000044 	movi	r4,1
   28d8c:	d811883a 	mov	r8,sp
   28d90:	003e7c06 	br	28784 <__alt_data_end+0xfffe8784>
   28d94:	50800104 	addi	r2,r10,4
   28d98:	5480000b 	ldhu	r18,0(r10)
   28d9c:	0027883a 	mov	r19,zero
   28da0:	483dcf0e 	bge	r9,zero,284e0 <__alt_data_end+0xfffe84e0>
   28da4:	003fdf06 	br	28d24 <__alt_data_end+0xfffe8d24>
   28da8:	54800017 	ldw	r18,0(r10)
   28dac:	52800104 	addi	r10,r10,4
   28db0:	0027883a 	mov	r19,zero
   28db4:	da802215 	stw	r10,136(sp)
   28db8:	003d5006 	br	282fc <__alt_data_end+0xfffe82fc>
   28dbc:	50800104 	addi	r2,r10,4
   28dc0:	5480000b 	ldhu	r18,0(r10)
   28dc4:	0027883a 	mov	r19,zero
   28dc8:	483f7d0e 	bge	r9,zero,28bc0 <__alt_data_end+0xfffe8bc0>
   28dcc:	003ddc06 	br	28540 <__alt_data_end+0xfffe8540>
   28dd0:	d8c02215 	stw	r3,136(sp)
   28dd4:	0039883a 	mov	fp,zero
   28dd8:	003ddb06 	br	28548 <__alt_data_end+0xfffe8548>
   28ddc:	028000f4 	movhi	r10,3
   28de0:	5282e604 	addi	r10,r10,2968
   28de4:	da802415 	stw	r10,144(sp)
   28de8:	003e8306 	br	287f8 <__alt_data_end+0xfffe87f8>
   28dec:	d8801c17 	ldw	r2,112(sp)
   28df0:	dd002117 	ldw	r20,132(sp)
   28df4:	103eb926 	beq	r2,zero,288dc <__alt_data_end+0xfffe88dc>
   28df8:	d9002017 	ldw	r4,128(sp)
   28dfc:	d9801a04 	addi	r6,sp,104
   28e00:	a00b883a 	mov	r5,r20
   28e04:	0027a740 	call	27a74 <__sprint_r.part.0>
   28e08:	003eb406 	br	288dc <__alt_data_end+0xfffe88dc>
   28e0c:	80c00043 	ldbu	r3,1(r16)
   28e10:	a5000814 	ori	r20,r20,32
   28e14:	84000044 	addi	r16,r16,1
   28e18:	18c03fcc 	andi	r3,r3,255
   28e1c:	18c0201c 	xori	r3,r3,128
   28e20:	18ffe004 	addi	r3,r3,-128
   28e24:	003bb706 	br	27d04 <__alt_data_end+0xfffe7d04>
   28e28:	a809883a 	mov	r4,r21
   28e2c:	d8c02a15 	stw	r3,168(sp)
   28e30:	da002b15 	stw	r8,172(sp)
   28e34:	00204dc0 	call	204dc <strlen>
   28e38:	d8c02a17 	ldw	r3,168(sp)
   28e3c:	1027883a 	mov	r19,r2
   28e40:	df001d83 	ldbu	fp,118(sp)
   28e44:	d8c02215 	stw	r3,136(sp)
   28e48:	0013883a 	mov	r9,zero
   28e4c:	da002b17 	ldw	r8,172(sp)
   28e50:	003c4d06 	br	27f88 <__alt_data_end+0xfffe7f88>
   28e54:	d9402117 	ldw	r5,132(sp)
   28e58:	d9002017 	ldw	r4,128(sp)
   28e5c:	d9801a04 	addi	r6,sp,104
   28e60:	da402c15 	stw	r9,176(sp)
   28e64:	0027a740 	call	27a74 <__sprint_r.part.0>
   28e68:	da402c17 	ldw	r9,176(sp)
   28e6c:	103e9a1e 	bne	r2,zero,288d8 <__alt_data_end+0xfffe88d8>
   28e70:	d9401b17 	ldw	r5,108(sp)
   28e74:	d8801c17 	ldw	r2,112(sp)
   28e78:	d811883a 	mov	r8,sp
   28e7c:	29000044 	addi	r4,r5,1
   28e80:	003e4206 	br	2878c <__alt_data_end+0xfffe878c>
   28e84:	d9401b17 	ldw	r5,108(sp)
   28e88:	010000f4 	movhi	r4,3
   28e8c:	2102ea04 	addi	r4,r4,2984
   28e90:	d9002415 	stw	r4,144(sp)
   28e94:	29400044 	addi	r5,r5,1
   28e98:	003c6d06 	br	28050 <__alt_data_end+0xfffe8050>
   28e9c:	0039883a 	mov	fp,zero
   28ea0:	00800084 	movi	r2,2
   28ea4:	10803fcc 	andi	r2,r2,255
   28ea8:	01000044 	movi	r4,1
   28eac:	11001e26 	beq	r2,r4,28f28 <___vfiprintf_internal_r+0x13a0>
   28eb0:	01000084 	movi	r4,2
   28eb4:	11001e1e 	bne	r2,r4,28f30 <___vfiprintf_internal_r+0x13a8>
   28eb8:	1829883a 	mov	r20,r3
   28ebc:	003eea06 	br	28a68 <__alt_data_end+0xfffe8a68>
   28ec0:	a007883a 	mov	r3,r20
   28ec4:	00800044 	movi	r2,1
   28ec8:	003ff606 	br	28ea4 <__alt_data_end+0xfffe8ea4>
   28ecc:	00800184 	movi	r2,6
   28ed0:	1240012e 	bgeu	r2,r9,28ed8 <___vfiprintf_internal_r+0x1350>
   28ed4:	1013883a 	mov	r9,r2
   28ed8:	4827883a 	mov	r19,r9
   28edc:	4825883a 	mov	r18,r9
   28ee0:	48001516 	blt	r9,zero,28f38 <___vfiprintf_internal_r+0x13b0>
   28ee4:	054000f4 	movhi	r21,3
   28ee8:	d8c02215 	stw	r3,136(sp)
   28eec:	ad428a04 	addi	r21,r21,2600
   28ef0:	003d1406 	br	28344 <__alt_data_end+0xfffe8344>
   28ef4:	028000f4 	movhi	r10,3
   28ef8:	5282e604 	addi	r10,r10,2968
   28efc:	da802415 	stw	r10,144(sp)
   28f00:	200d883a 	mov	r6,r4
   28f04:	003c9106 	br	2814c <__alt_data_end+0xfffe814c>
   28f08:	5021883a 	mov	r16,r10
   28f0c:	0013883a 	mov	r9,zero
   28f10:	003b7d06 	br	27d08 <__alt_data_end+0xfffe7d08>
   28f14:	4827883a 	mov	r19,r9
   28f18:	df001d83 	ldbu	fp,118(sp)
   28f1c:	d8c02215 	stw	r3,136(sp)
   28f20:	0013883a 	mov	r9,zero
   28f24:	003c1806 	br	27f88 <__alt_data_end+0xfffe7f88>
   28f28:	1829883a 	mov	r20,r3
   28f2c:	003d1806 	br	28390 <__alt_data_end+0xfffe8390>
   28f30:	1829883a 	mov	r20,r3
   28f34:	003ccd06 	br	2826c <__alt_data_end+0xfffe826c>
   28f38:	0025883a 	mov	r18,zero
   28f3c:	003fe906 	br	28ee4 <__alt_data_end+0xfffe8ee4>
   28f40:	d8802217 	ldw	r2,136(sp)
   28f44:	80c00043 	ldbu	r3,1(r16)
   28f48:	5021883a 	mov	r16,r10
   28f4c:	12400017 	ldw	r9,0(r2)
   28f50:	10800104 	addi	r2,r2,4
   28f54:	d8802215 	stw	r2,136(sp)
   28f58:	483faf0e 	bge	r9,zero,28e18 <__alt_data_end+0xfffe8e18>
   28f5c:	18c03fcc 	andi	r3,r3,255
   28f60:	18c0201c 	xori	r3,r3,128
   28f64:	027fffc4 	movi	r9,-1
   28f68:	18ffe004 	addi	r3,r3,-128
   28f6c:	003b6506 	br	27d04 <__alt_data_end+0xfffe7d04>
   28f70:	d9c01d85 	stb	r7,118(sp)
   28f74:	003ca006 	br	281f8 <__alt_data_end+0xfffe81f8>
   28f78:	d9c01d85 	stb	r7,118(sp)
   28f7c:	003cad06 	br	28234 <__alt_data_end+0xfffe8234>
   28f80:	d9c01d85 	stb	r7,118(sp)
   28f84:	003d7d06 	br	2857c <__alt_data_end+0xfffe857c>
   28f88:	d9c01d85 	stb	r7,118(sp)
   28f8c:	003d5f06 	br	2850c <__alt_data_end+0xfffe850c>
   28f90:	a080004c 	andi	r2,r20,1
   28f94:	0039883a 	mov	fp,zero
   28f98:	10000526 	beq	r2,zero,28fb0 <___vfiprintf_internal_r+0x1428>
   28f9c:	00800c04 	movi	r2,48
   28fa0:	d88019c5 	stb	r2,103(sp)
   28fa4:	dcc02717 	ldw	r19,156(sp)
   28fa8:	dd4019c4 	addi	r21,sp,103
   28fac:	003bf606 	br	27f88 <__alt_data_end+0xfffe7f88>
   28fb0:	0027883a 	mov	r19,zero
   28fb4:	dd401a04 	addi	r21,sp,104
   28fb8:	003bf306 	br	27f88 <__alt_data_end+0xfffe7f88>
   28fbc:	d9c01d85 	stb	r7,118(sp)
   28fc0:	003dc806 	br	286e4 <__alt_data_end+0xfffe86e4>
   28fc4:	d9c01d85 	stb	r7,118(sp)
   28fc8:	003d3a06 	br	284b4 <__alt_data_end+0xfffe84b4>
   28fcc:	d9c01d85 	stb	r7,118(sp)
   28fd0:	003d2a06 	br	2847c <__alt_data_end+0xfffe847c>
   28fd4:	d9c01d85 	stb	r7,118(sp)
   28fd8:	003cde06 	br	28354 <__alt_data_end+0xfffe8354>
   28fdc:	d9c01d85 	stb	r7,118(sp)
   28fe0:	003cbc06 	br	282d4 <__alt_data_end+0xfffe82d4>

00028fe4 <__vfiprintf_internal>:
   28fe4:	008000f4 	movhi	r2,3
   28fe8:	108a3c04 	addi	r2,r2,10480
   28fec:	300f883a 	mov	r7,r6
   28ff0:	280d883a 	mov	r6,r5
   28ff4:	200b883a 	mov	r5,r4
   28ff8:	11000017 	ldw	r4,0(r2)
   28ffc:	0027b881 	jmpi	27b88 <___vfiprintf_internal_r>

00029000 <__sbprintf>:
   29000:	2880030b 	ldhu	r2,12(r5)
   29004:	2ac01917 	ldw	r11,100(r5)
   29008:	2a80038b 	ldhu	r10,14(r5)
   2900c:	2a400717 	ldw	r9,28(r5)
   29010:	2a000917 	ldw	r8,36(r5)
   29014:	defee204 	addi	sp,sp,-1144
   29018:	00c10004 	movi	r3,1024
   2901c:	dc011a15 	stw	r16,1128(sp)
   29020:	10bfff4c 	andi	r2,r2,65533
   29024:	2821883a 	mov	r16,r5
   29028:	d8cb883a 	add	r5,sp,r3
   2902c:	dc811c15 	stw	r18,1136(sp)
   29030:	dc411b15 	stw	r17,1132(sp)
   29034:	dfc11d15 	stw	ra,1140(sp)
   29038:	2025883a 	mov	r18,r4
   2903c:	d881030d 	sth	r2,1036(sp)
   29040:	dac11915 	stw	r11,1124(sp)
   29044:	da81038d 	sth	r10,1038(sp)
   29048:	da410715 	stw	r9,1052(sp)
   2904c:	da010915 	stw	r8,1060(sp)
   29050:	dec10015 	stw	sp,1024(sp)
   29054:	dec10415 	stw	sp,1040(sp)
   29058:	d8c10215 	stw	r3,1032(sp)
   2905c:	d8c10515 	stw	r3,1044(sp)
   29060:	d8010615 	stw	zero,1048(sp)
   29064:	0027b880 	call	27b88 <___vfiprintf_internal_r>
   29068:	1023883a 	mov	r17,r2
   2906c:	10000416 	blt	r2,zero,29080 <__sbprintf+0x80>
   29070:	d9410004 	addi	r5,sp,1024
   29074:	9009883a 	mov	r4,r18
   29078:	002443c0 	call	2443c <_fflush_r>
   2907c:	10000d1e 	bne	r2,zero,290b4 <__sbprintf+0xb4>
   29080:	d881030b 	ldhu	r2,1036(sp)
   29084:	1080100c 	andi	r2,r2,64
   29088:	10000326 	beq	r2,zero,29098 <__sbprintf+0x98>
   2908c:	8080030b 	ldhu	r2,12(r16)
   29090:	10801014 	ori	r2,r2,64
   29094:	8080030d 	sth	r2,12(r16)
   29098:	8805883a 	mov	r2,r17
   2909c:	dfc11d17 	ldw	ra,1140(sp)
   290a0:	dc811c17 	ldw	r18,1136(sp)
   290a4:	dc411b17 	ldw	r17,1132(sp)
   290a8:	dc011a17 	ldw	r16,1128(sp)
   290ac:	dec11e04 	addi	sp,sp,1144
   290b0:	f800283a 	ret
   290b4:	047fffc4 	movi	r17,-1
   290b8:	003ff106 	br	29080 <__alt_data_end+0xfffe9080>

000290bc <_write_r>:
   290bc:	defffd04 	addi	sp,sp,-12
   290c0:	2805883a 	mov	r2,r5
   290c4:	dc000015 	stw	r16,0(sp)
   290c8:	040000f4 	movhi	r16,3
   290cc:	dc400115 	stw	r17,4(sp)
   290d0:	300b883a 	mov	r5,r6
   290d4:	84115d04 	addi	r16,r16,17780
   290d8:	2023883a 	mov	r17,r4
   290dc:	380d883a 	mov	r6,r7
   290e0:	1009883a 	mov	r4,r2
   290e4:	dfc00215 	stw	ra,8(sp)
   290e8:	80000015 	stw	zero,0(r16)
   290ec:	002d5080 	call	2d508 <write>
   290f0:	00ffffc4 	movi	r3,-1
   290f4:	10c00526 	beq	r2,r3,2910c <_write_r+0x50>
   290f8:	dfc00217 	ldw	ra,8(sp)
   290fc:	dc400117 	ldw	r17,4(sp)
   29100:	dc000017 	ldw	r16,0(sp)
   29104:	dec00304 	addi	sp,sp,12
   29108:	f800283a 	ret
   2910c:	80c00017 	ldw	r3,0(r16)
   29110:	183ff926 	beq	r3,zero,290f8 <__alt_data_end+0xfffe90f8>
   29114:	88c00015 	stw	r3,0(r17)
   29118:	003ff706 	br	290f8 <__alt_data_end+0xfffe90f8>

0002911c <_close_r>:
   2911c:	defffd04 	addi	sp,sp,-12
   29120:	dc000015 	stw	r16,0(sp)
   29124:	040000f4 	movhi	r16,3
   29128:	dc400115 	stw	r17,4(sp)
   2912c:	84115d04 	addi	r16,r16,17780
   29130:	2023883a 	mov	r17,r4
   29134:	2809883a 	mov	r4,r5
   29138:	dfc00215 	stw	ra,8(sp)
   2913c:	80000015 	stw	zero,0(r16)
   29140:	002ccf80 	call	2ccf8 <close>
   29144:	00ffffc4 	movi	r3,-1
   29148:	10c00526 	beq	r2,r3,29160 <_close_r+0x44>
   2914c:	dfc00217 	ldw	ra,8(sp)
   29150:	dc400117 	ldw	r17,4(sp)
   29154:	dc000017 	ldw	r16,0(sp)
   29158:	dec00304 	addi	sp,sp,12
   2915c:	f800283a 	ret
   29160:	80c00017 	ldw	r3,0(r16)
   29164:	183ff926 	beq	r3,zero,2914c <__alt_data_end+0xfffe914c>
   29168:	88c00015 	stw	r3,0(r17)
   2916c:	003ff706 	br	2914c <__alt_data_end+0xfffe914c>

00029170 <_calloc_r>:
   29170:	298b383a 	mul	r5,r5,r6
   29174:	defffe04 	addi	sp,sp,-8
   29178:	dfc00115 	stw	ra,4(sp)
   2917c:	dc000015 	stw	r16,0(sp)
   29180:	00255780 	call	25578 <_malloc_r>
   29184:	10002926 	beq	r2,zero,2922c <_calloc_r+0xbc>
   29188:	11bfff17 	ldw	r6,-4(r2)
   2918c:	1021883a 	mov	r16,r2
   29190:	00bfff04 	movi	r2,-4
   29194:	308c703a 	and	r6,r6,r2
   29198:	00c00904 	movi	r3,36
   2919c:	308d883a 	add	r6,r6,r2
   291a0:	19801636 	bltu	r3,r6,291fc <_calloc_r+0x8c>
   291a4:	008004c4 	movi	r2,19
   291a8:	11800b2e 	bgeu	r2,r6,291d8 <_calloc_r+0x68>
   291ac:	80000015 	stw	zero,0(r16)
   291b0:	80000115 	stw	zero,4(r16)
   291b4:	008006c4 	movi	r2,27
   291b8:	11801a2e 	bgeu	r2,r6,29224 <_calloc_r+0xb4>
   291bc:	80000215 	stw	zero,8(r16)
   291c0:	80000315 	stw	zero,12(r16)
   291c4:	30c0151e 	bne	r6,r3,2921c <_calloc_r+0xac>
   291c8:	80000415 	stw	zero,16(r16)
   291cc:	80800604 	addi	r2,r16,24
   291d0:	80000515 	stw	zero,20(r16)
   291d4:	00000106 	br	291dc <_calloc_r+0x6c>
   291d8:	8005883a 	mov	r2,r16
   291dc:	10000015 	stw	zero,0(r2)
   291e0:	10000115 	stw	zero,4(r2)
   291e4:	10000215 	stw	zero,8(r2)
   291e8:	8005883a 	mov	r2,r16
   291ec:	dfc00117 	ldw	ra,4(sp)
   291f0:	dc000017 	ldw	r16,0(sp)
   291f4:	dec00204 	addi	sp,sp,8
   291f8:	f800283a 	ret
   291fc:	000b883a 	mov	r5,zero
   29200:	8009883a 	mov	r4,r16
   29204:	002610c0 	call	2610c <memset>
   29208:	8005883a 	mov	r2,r16
   2920c:	dfc00117 	ldw	ra,4(sp)
   29210:	dc000017 	ldw	r16,0(sp)
   29214:	dec00204 	addi	sp,sp,8
   29218:	f800283a 	ret
   2921c:	80800404 	addi	r2,r16,16
   29220:	003fee06 	br	291dc <__alt_data_end+0xfffe91dc>
   29224:	80800204 	addi	r2,r16,8
   29228:	003fec06 	br	291dc <__alt_data_end+0xfffe91dc>
   2922c:	0005883a 	mov	r2,zero
   29230:	003fee06 	br	291ec <__alt_data_end+0xfffe91ec>

00029234 <_fclose_r>:
   29234:	28003926 	beq	r5,zero,2931c <_fclose_r+0xe8>
   29238:	defffc04 	addi	sp,sp,-16
   2923c:	dc400115 	stw	r17,4(sp)
   29240:	dc000015 	stw	r16,0(sp)
   29244:	dfc00315 	stw	ra,12(sp)
   29248:	dc800215 	stw	r18,8(sp)
   2924c:	2023883a 	mov	r17,r4
   29250:	2821883a 	mov	r16,r5
   29254:	20000226 	beq	r4,zero,29260 <_fclose_r+0x2c>
   29258:	20800e17 	ldw	r2,56(r4)
   2925c:	10002726 	beq	r2,zero,292fc <_fclose_r+0xc8>
   29260:	8080030f 	ldh	r2,12(r16)
   29264:	1000071e 	bne	r2,zero,29284 <_fclose_r+0x50>
   29268:	0005883a 	mov	r2,zero
   2926c:	dfc00317 	ldw	ra,12(sp)
   29270:	dc800217 	ldw	r18,8(sp)
   29274:	dc400117 	ldw	r17,4(sp)
   29278:	dc000017 	ldw	r16,0(sp)
   2927c:	dec00404 	addi	sp,sp,16
   29280:	f800283a 	ret
   29284:	800b883a 	mov	r5,r16
   29288:	8809883a 	mov	r4,r17
   2928c:	00242200 	call	24220 <__sflush_r>
   29290:	1025883a 	mov	r18,r2
   29294:	80800b17 	ldw	r2,44(r16)
   29298:	10000426 	beq	r2,zero,292ac <_fclose_r+0x78>
   2929c:	81400717 	ldw	r5,28(r16)
   292a0:	8809883a 	mov	r4,r17
   292a4:	103ee83a 	callr	r2
   292a8:	10001616 	blt	r2,zero,29304 <_fclose_r+0xd0>
   292ac:	8080030b 	ldhu	r2,12(r16)
   292b0:	1080200c 	andi	r2,r2,128
   292b4:	1000151e 	bne	r2,zero,2930c <_fclose_r+0xd8>
   292b8:	81400c17 	ldw	r5,48(r16)
   292bc:	28000526 	beq	r5,zero,292d4 <_fclose_r+0xa0>
   292c0:	80801004 	addi	r2,r16,64
   292c4:	28800226 	beq	r5,r2,292d0 <_fclose_r+0x9c>
   292c8:	8809883a 	mov	r4,r17
   292cc:	002498c0 	call	2498c <_free_r>
   292d0:	80000c15 	stw	zero,48(r16)
   292d4:	81401117 	ldw	r5,68(r16)
   292d8:	28000326 	beq	r5,zero,292e8 <_fclose_r+0xb4>
   292dc:	8809883a 	mov	r4,r17
   292e0:	002498c0 	call	2498c <_free_r>
   292e4:	80001115 	stw	zero,68(r16)
   292e8:	00248280 	call	24828 <__sfp_lock_acquire>
   292ec:	8000030d 	sth	zero,12(r16)
   292f0:	002482c0 	call	2482c <__sfp_lock_release>
   292f4:	9005883a 	mov	r2,r18
   292f8:	003fdc06 	br	2926c <__alt_data_end+0xfffe926c>
   292fc:	00248180 	call	24818 <__sinit>
   29300:	003fd706 	br	29260 <__alt_data_end+0xfffe9260>
   29304:	04bfffc4 	movi	r18,-1
   29308:	003fe806 	br	292ac <__alt_data_end+0xfffe92ac>
   2930c:	81400417 	ldw	r5,16(r16)
   29310:	8809883a 	mov	r4,r17
   29314:	002498c0 	call	2498c <_free_r>
   29318:	003fe706 	br	292b8 <__alt_data_end+0xfffe92b8>
   2931c:	0005883a 	mov	r2,zero
   29320:	f800283a 	ret

00029324 <fclose>:
   29324:	008000f4 	movhi	r2,3
   29328:	108a3c04 	addi	r2,r2,10480
   2932c:	200b883a 	mov	r5,r4
   29330:	11000017 	ldw	r4,0(r2)
   29334:	00292341 	jmpi	29234 <_fclose_r>

00029338 <__fputwc>:
   29338:	defff804 	addi	sp,sp,-32
   2933c:	dcc00415 	stw	r19,16(sp)
   29340:	dc800315 	stw	r18,12(sp)
   29344:	dc000115 	stw	r16,4(sp)
   29348:	dfc00715 	stw	ra,28(sp)
   2934c:	dd400615 	stw	r21,24(sp)
   29350:	dd000515 	stw	r20,20(sp)
   29354:	dc400215 	stw	r17,8(sp)
   29358:	2027883a 	mov	r19,r4
   2935c:	2825883a 	mov	r18,r5
   29360:	3021883a 	mov	r16,r6
   29364:	00253680 	call	25368 <__locale_mb_cur_max>
   29368:	00c00044 	movi	r3,1
   2936c:	10c03e26 	beq	r2,r3,29468 <__fputwc+0x130>
   29370:	81c01704 	addi	r7,r16,92
   29374:	900d883a 	mov	r6,r18
   29378:	d80b883a 	mov	r5,sp
   2937c:	9809883a 	mov	r4,r19
   29380:	00298080 	call	29808 <_wcrtomb_r>
   29384:	1029883a 	mov	r20,r2
   29388:	00bfffc4 	movi	r2,-1
   2938c:	a0802026 	beq	r20,r2,29410 <__fputwc+0xd8>
   29390:	d9400003 	ldbu	r5,0(sp)
   29394:	a0001c26 	beq	r20,zero,29408 <__fputwc+0xd0>
   29398:	0023883a 	mov	r17,zero
   2939c:	05400284 	movi	r21,10
   293a0:	00000906 	br	293c8 <__fputwc+0x90>
   293a4:	80800017 	ldw	r2,0(r16)
   293a8:	11400005 	stb	r5,0(r2)
   293ac:	80c00017 	ldw	r3,0(r16)
   293b0:	18c00044 	addi	r3,r3,1
   293b4:	80c00015 	stw	r3,0(r16)
   293b8:	8c400044 	addi	r17,r17,1
   293bc:	dc45883a 	add	r2,sp,r17
   293c0:	8d00112e 	bgeu	r17,r20,29408 <__fputwc+0xd0>
   293c4:	11400003 	ldbu	r5,0(r2)
   293c8:	80c00217 	ldw	r3,8(r16)
   293cc:	18ffffc4 	addi	r3,r3,-1
   293d0:	80c00215 	stw	r3,8(r16)
   293d4:	183ff30e 	bge	r3,zero,293a4 <__alt_data_end+0xfffe93a4>
   293d8:	80800617 	ldw	r2,24(r16)
   293dc:	18801916 	blt	r3,r2,29444 <__fputwc+0x10c>
   293e0:	80800017 	ldw	r2,0(r16)
   293e4:	11400005 	stb	r5,0(r2)
   293e8:	80800017 	ldw	r2,0(r16)
   293ec:	10c00003 	ldbu	r3,0(r2)
   293f0:	10800044 	addi	r2,r2,1
   293f4:	1d402326 	beq	r3,r21,29484 <__fputwc+0x14c>
   293f8:	80800015 	stw	r2,0(r16)
   293fc:	8c400044 	addi	r17,r17,1
   29400:	dc45883a 	add	r2,sp,r17
   29404:	8d3fef36 	bltu	r17,r20,293c4 <__alt_data_end+0xfffe93c4>
   29408:	9005883a 	mov	r2,r18
   2940c:	00000406 	br	29420 <__fputwc+0xe8>
   29410:	80c0030b 	ldhu	r3,12(r16)
   29414:	a005883a 	mov	r2,r20
   29418:	18c01014 	ori	r3,r3,64
   2941c:	80c0030d 	sth	r3,12(r16)
   29420:	dfc00717 	ldw	ra,28(sp)
   29424:	dd400617 	ldw	r21,24(sp)
   29428:	dd000517 	ldw	r20,20(sp)
   2942c:	dcc00417 	ldw	r19,16(sp)
   29430:	dc800317 	ldw	r18,12(sp)
   29434:	dc400217 	ldw	r17,8(sp)
   29438:	dc000117 	ldw	r16,4(sp)
   2943c:	dec00804 	addi	sp,sp,32
   29440:	f800283a 	ret
   29444:	800d883a 	mov	r6,r16
   29448:	29403fcc 	andi	r5,r5,255
   2944c:	9809883a 	mov	r4,r19
   29450:	00296b00 	call	296b0 <__swbuf_r>
   29454:	10bfffe0 	cmpeqi	r2,r2,-1
   29458:	10803fcc 	andi	r2,r2,255
   2945c:	103fd626 	beq	r2,zero,293b8 <__alt_data_end+0xfffe93b8>
   29460:	00bfffc4 	movi	r2,-1
   29464:	003fee06 	br	29420 <__alt_data_end+0xfffe9420>
   29468:	90ffffc4 	addi	r3,r18,-1
   2946c:	01003f84 	movi	r4,254
   29470:	20ffbf36 	bltu	r4,r3,29370 <__alt_data_end+0xfffe9370>
   29474:	900b883a 	mov	r5,r18
   29478:	dc800005 	stb	r18,0(sp)
   2947c:	1029883a 	mov	r20,r2
   29480:	003fc506 	br	29398 <__alt_data_end+0xfffe9398>
   29484:	800d883a 	mov	r6,r16
   29488:	a80b883a 	mov	r5,r21
   2948c:	9809883a 	mov	r4,r19
   29490:	00296b00 	call	296b0 <__swbuf_r>
   29494:	10bfffe0 	cmpeqi	r2,r2,-1
   29498:	003fef06 	br	29458 <__alt_data_end+0xfffe9458>

0002949c <_fputwc_r>:
   2949c:	3080030b 	ldhu	r2,12(r6)
   294a0:	10c8000c 	andi	r3,r2,8192
   294a4:	1800051e 	bne	r3,zero,294bc <_fputwc_r+0x20>
   294a8:	30c01917 	ldw	r3,100(r6)
   294ac:	10880014 	ori	r2,r2,8192
   294b0:	3080030d 	sth	r2,12(r6)
   294b4:	18880014 	ori	r2,r3,8192
   294b8:	30801915 	stw	r2,100(r6)
   294bc:	00293381 	jmpi	29338 <__fputwc>

000294c0 <fputwc>:
   294c0:	008000f4 	movhi	r2,3
   294c4:	defffc04 	addi	sp,sp,-16
   294c8:	108a3c04 	addi	r2,r2,10480
   294cc:	dc000115 	stw	r16,4(sp)
   294d0:	14000017 	ldw	r16,0(r2)
   294d4:	dc400215 	stw	r17,8(sp)
   294d8:	dfc00315 	stw	ra,12(sp)
   294dc:	2023883a 	mov	r17,r4
   294e0:	80000226 	beq	r16,zero,294ec <fputwc+0x2c>
   294e4:	80800e17 	ldw	r2,56(r16)
   294e8:	10001026 	beq	r2,zero,2952c <fputwc+0x6c>
   294ec:	2880030b 	ldhu	r2,12(r5)
   294f0:	10c8000c 	andi	r3,r2,8192
   294f4:	1800051e 	bne	r3,zero,2950c <fputwc+0x4c>
   294f8:	28c01917 	ldw	r3,100(r5)
   294fc:	10880014 	ori	r2,r2,8192
   29500:	2880030d 	sth	r2,12(r5)
   29504:	18880014 	ori	r2,r3,8192
   29508:	28801915 	stw	r2,100(r5)
   2950c:	280d883a 	mov	r6,r5
   29510:	8009883a 	mov	r4,r16
   29514:	880b883a 	mov	r5,r17
   29518:	dfc00317 	ldw	ra,12(sp)
   2951c:	dc400217 	ldw	r17,8(sp)
   29520:	dc000117 	ldw	r16,4(sp)
   29524:	dec00404 	addi	sp,sp,16
   29528:	00293381 	jmpi	29338 <__fputwc>
   2952c:	8009883a 	mov	r4,r16
   29530:	d9400015 	stw	r5,0(sp)
   29534:	00248180 	call	24818 <__sinit>
   29538:	d9400017 	ldw	r5,0(sp)
   2953c:	003feb06 	br	294ec <__alt_data_end+0xfffe94ec>

00029540 <_fstat_r>:
   29540:	defffd04 	addi	sp,sp,-12
   29544:	2805883a 	mov	r2,r5
   29548:	dc000015 	stw	r16,0(sp)
   2954c:	040000f4 	movhi	r16,3
   29550:	dc400115 	stw	r17,4(sp)
   29554:	84115d04 	addi	r16,r16,17780
   29558:	2023883a 	mov	r17,r4
   2955c:	300b883a 	mov	r5,r6
   29560:	1009883a 	mov	r4,r2
   29564:	dfc00215 	stw	ra,8(sp)
   29568:	80000015 	stw	zero,0(r16)
   2956c:	002ce300 	call	2ce30 <fstat>
   29570:	00ffffc4 	movi	r3,-1
   29574:	10c00526 	beq	r2,r3,2958c <_fstat_r+0x4c>
   29578:	dfc00217 	ldw	ra,8(sp)
   2957c:	dc400117 	ldw	r17,4(sp)
   29580:	dc000017 	ldw	r16,0(sp)
   29584:	dec00304 	addi	sp,sp,12
   29588:	f800283a 	ret
   2958c:	80c00017 	ldw	r3,0(r16)
   29590:	183ff926 	beq	r3,zero,29578 <__alt_data_end+0xfffe9578>
   29594:	88c00015 	stw	r3,0(r17)
   29598:	003ff706 	br	29578 <__alt_data_end+0xfffe9578>

0002959c <_isatty_r>:
   2959c:	defffd04 	addi	sp,sp,-12
   295a0:	dc000015 	stw	r16,0(sp)
   295a4:	040000f4 	movhi	r16,3
   295a8:	dc400115 	stw	r17,4(sp)
   295ac:	84115d04 	addi	r16,r16,17780
   295b0:	2023883a 	mov	r17,r4
   295b4:	2809883a 	mov	r4,r5
   295b8:	dfc00215 	stw	ra,8(sp)
   295bc:	80000015 	stw	zero,0(r16)
   295c0:	002cf1c0 	call	2cf1c <isatty>
   295c4:	00ffffc4 	movi	r3,-1
   295c8:	10c00526 	beq	r2,r3,295e0 <_isatty_r+0x44>
   295cc:	dfc00217 	ldw	ra,8(sp)
   295d0:	dc400117 	ldw	r17,4(sp)
   295d4:	dc000017 	ldw	r16,0(sp)
   295d8:	dec00304 	addi	sp,sp,12
   295dc:	f800283a 	ret
   295e0:	80c00017 	ldw	r3,0(r16)
   295e4:	183ff926 	beq	r3,zero,295cc <__alt_data_end+0xfffe95cc>
   295e8:	88c00015 	stw	r3,0(r17)
   295ec:	003ff706 	br	295cc <__alt_data_end+0xfffe95cc>

000295f0 <_lseek_r>:
   295f0:	defffd04 	addi	sp,sp,-12
   295f4:	2805883a 	mov	r2,r5
   295f8:	dc000015 	stw	r16,0(sp)
   295fc:	040000f4 	movhi	r16,3
   29600:	dc400115 	stw	r17,4(sp)
   29604:	300b883a 	mov	r5,r6
   29608:	84115d04 	addi	r16,r16,17780
   2960c:	2023883a 	mov	r17,r4
   29610:	380d883a 	mov	r6,r7
   29614:	1009883a 	mov	r4,r2
   29618:	dfc00215 	stw	ra,8(sp)
   2961c:	80000015 	stw	zero,0(r16)
   29620:	002d0e80 	call	2d0e8 <lseek>
   29624:	00ffffc4 	movi	r3,-1
   29628:	10c00526 	beq	r2,r3,29640 <_lseek_r+0x50>
   2962c:	dfc00217 	ldw	ra,8(sp)
   29630:	dc400117 	ldw	r17,4(sp)
   29634:	dc000017 	ldw	r16,0(sp)
   29638:	dec00304 	addi	sp,sp,12
   2963c:	f800283a 	ret
   29640:	80c00017 	ldw	r3,0(r16)
   29644:	183ff926 	beq	r3,zero,2962c <__alt_data_end+0xfffe962c>
   29648:	88c00015 	stw	r3,0(r17)
   2964c:	003ff706 	br	2962c <__alt_data_end+0xfffe962c>

00029650 <_read_r>:
   29650:	defffd04 	addi	sp,sp,-12
   29654:	2805883a 	mov	r2,r5
   29658:	dc000015 	stw	r16,0(sp)
   2965c:	040000f4 	movhi	r16,3
   29660:	dc400115 	stw	r17,4(sp)
   29664:	300b883a 	mov	r5,r6
   29668:	84115d04 	addi	r16,r16,17780
   2966c:	2023883a 	mov	r17,r4
   29670:	380d883a 	mov	r6,r7
   29674:	1009883a 	mov	r4,r2
   29678:	dfc00215 	stw	ra,8(sp)
   2967c:	80000015 	stw	zero,0(r16)
   29680:	002d2bc0 	call	2d2bc <read>
   29684:	00ffffc4 	movi	r3,-1
   29688:	10c00526 	beq	r2,r3,296a0 <_read_r+0x50>
   2968c:	dfc00217 	ldw	ra,8(sp)
   29690:	dc400117 	ldw	r17,4(sp)
   29694:	dc000017 	ldw	r16,0(sp)
   29698:	dec00304 	addi	sp,sp,12
   2969c:	f800283a 	ret
   296a0:	80c00017 	ldw	r3,0(r16)
   296a4:	183ff926 	beq	r3,zero,2968c <__alt_data_end+0xfffe968c>
   296a8:	88c00015 	stw	r3,0(r17)
   296ac:	003ff706 	br	2968c <__alt_data_end+0xfffe968c>

000296b0 <__swbuf_r>:
   296b0:	defffb04 	addi	sp,sp,-20
   296b4:	dcc00315 	stw	r19,12(sp)
   296b8:	dc800215 	stw	r18,8(sp)
   296bc:	dc000015 	stw	r16,0(sp)
   296c0:	dfc00415 	stw	ra,16(sp)
   296c4:	dc400115 	stw	r17,4(sp)
   296c8:	2025883a 	mov	r18,r4
   296cc:	2827883a 	mov	r19,r5
   296d0:	3021883a 	mov	r16,r6
   296d4:	20000226 	beq	r4,zero,296e0 <__swbuf_r+0x30>
   296d8:	20800e17 	ldw	r2,56(r4)
   296dc:	10004226 	beq	r2,zero,297e8 <__swbuf_r+0x138>
   296e0:	80800617 	ldw	r2,24(r16)
   296e4:	8100030b 	ldhu	r4,12(r16)
   296e8:	80800215 	stw	r2,8(r16)
   296ec:	2080020c 	andi	r2,r4,8
   296f0:	10003626 	beq	r2,zero,297cc <__swbuf_r+0x11c>
   296f4:	80c00417 	ldw	r3,16(r16)
   296f8:	18003426 	beq	r3,zero,297cc <__swbuf_r+0x11c>
   296fc:	2088000c 	andi	r2,r4,8192
   29700:	9c403fcc 	andi	r17,r19,255
   29704:	10001a26 	beq	r2,zero,29770 <__swbuf_r+0xc0>
   29708:	80800017 	ldw	r2,0(r16)
   2970c:	81000517 	ldw	r4,20(r16)
   29710:	10c7c83a 	sub	r3,r2,r3
   29714:	1900200e 	bge	r3,r4,29798 <__swbuf_r+0xe8>
   29718:	18c00044 	addi	r3,r3,1
   2971c:	81000217 	ldw	r4,8(r16)
   29720:	11400044 	addi	r5,r2,1
   29724:	81400015 	stw	r5,0(r16)
   29728:	213fffc4 	addi	r4,r4,-1
   2972c:	81000215 	stw	r4,8(r16)
   29730:	14c00005 	stb	r19,0(r2)
   29734:	80800517 	ldw	r2,20(r16)
   29738:	10c01e26 	beq	r2,r3,297b4 <__swbuf_r+0x104>
   2973c:	8080030b 	ldhu	r2,12(r16)
   29740:	1080004c 	andi	r2,r2,1
   29744:	10000226 	beq	r2,zero,29750 <__swbuf_r+0xa0>
   29748:	00800284 	movi	r2,10
   2974c:	88801926 	beq	r17,r2,297b4 <__swbuf_r+0x104>
   29750:	8805883a 	mov	r2,r17
   29754:	dfc00417 	ldw	ra,16(sp)
   29758:	dcc00317 	ldw	r19,12(sp)
   2975c:	dc800217 	ldw	r18,8(sp)
   29760:	dc400117 	ldw	r17,4(sp)
   29764:	dc000017 	ldw	r16,0(sp)
   29768:	dec00504 	addi	sp,sp,20
   2976c:	f800283a 	ret
   29770:	81401917 	ldw	r5,100(r16)
   29774:	00b7ffc4 	movi	r2,-8193
   29778:	21080014 	ori	r4,r4,8192
   2977c:	2884703a 	and	r2,r5,r2
   29780:	80801915 	stw	r2,100(r16)
   29784:	80800017 	ldw	r2,0(r16)
   29788:	8100030d 	sth	r4,12(r16)
   2978c:	81000517 	ldw	r4,20(r16)
   29790:	10c7c83a 	sub	r3,r2,r3
   29794:	193fe016 	blt	r3,r4,29718 <__alt_data_end+0xfffe9718>
   29798:	800b883a 	mov	r5,r16
   2979c:	9009883a 	mov	r4,r18
   297a0:	002443c0 	call	2443c <_fflush_r>
   297a4:	1000071e 	bne	r2,zero,297c4 <__swbuf_r+0x114>
   297a8:	80800017 	ldw	r2,0(r16)
   297ac:	00c00044 	movi	r3,1
   297b0:	003fda06 	br	2971c <__alt_data_end+0xfffe971c>
   297b4:	800b883a 	mov	r5,r16
   297b8:	9009883a 	mov	r4,r18
   297bc:	002443c0 	call	2443c <_fflush_r>
   297c0:	103fe326 	beq	r2,zero,29750 <__alt_data_end+0xfffe9750>
   297c4:	00bfffc4 	movi	r2,-1
   297c8:	003fe206 	br	29754 <__alt_data_end+0xfffe9754>
   297cc:	800b883a 	mov	r5,r16
   297d0:	9009883a 	mov	r4,r18
   297d4:	00228440 	call	22844 <__swsetup_r>
   297d8:	103ffa1e 	bne	r2,zero,297c4 <__alt_data_end+0xfffe97c4>
   297dc:	8100030b 	ldhu	r4,12(r16)
   297e0:	80c00417 	ldw	r3,16(r16)
   297e4:	003fc506 	br	296fc <__alt_data_end+0xfffe96fc>
   297e8:	00248180 	call	24818 <__sinit>
   297ec:	003fbc06 	br	296e0 <__alt_data_end+0xfffe96e0>

000297f0 <__swbuf>:
   297f0:	008000f4 	movhi	r2,3
   297f4:	108a3c04 	addi	r2,r2,10480
   297f8:	280d883a 	mov	r6,r5
   297fc:	200b883a 	mov	r5,r4
   29800:	11000017 	ldw	r4,0(r2)
   29804:	00296b01 	jmpi	296b0 <__swbuf_r>

00029808 <_wcrtomb_r>:
   29808:	defff604 	addi	sp,sp,-40
   2980c:	008000f4 	movhi	r2,3
   29810:	dc800815 	stw	r18,32(sp)
   29814:	dc400715 	stw	r17,28(sp)
   29818:	dc000615 	stw	r16,24(sp)
   2981c:	108a4004 	addi	r2,r2,10496
   29820:	dfc00915 	stw	ra,36(sp)
   29824:	2021883a 	mov	r16,r4
   29828:	3823883a 	mov	r17,r7
   2982c:	14800017 	ldw	r18,0(r2)
   29830:	28001426 	beq	r5,zero,29884 <_wcrtomb_r+0x7c>
   29834:	d9400415 	stw	r5,16(sp)
   29838:	d9800515 	stw	r6,20(sp)
   2983c:	002535c0 	call	2535c <__locale_charset>
   29840:	d9800517 	ldw	r6,20(sp)
   29844:	d9400417 	ldw	r5,16(sp)
   29848:	100f883a 	mov	r7,r2
   2984c:	dc400015 	stw	r17,0(sp)
   29850:	8009883a 	mov	r4,r16
   29854:	903ee83a 	callr	r18
   29858:	00ffffc4 	movi	r3,-1
   2985c:	10c0031e 	bne	r2,r3,2986c <_wcrtomb_r+0x64>
   29860:	88000015 	stw	zero,0(r17)
   29864:	00c02284 	movi	r3,138
   29868:	80c00015 	stw	r3,0(r16)
   2986c:	dfc00917 	ldw	ra,36(sp)
   29870:	dc800817 	ldw	r18,32(sp)
   29874:	dc400717 	ldw	r17,28(sp)
   29878:	dc000617 	ldw	r16,24(sp)
   2987c:	dec00a04 	addi	sp,sp,40
   29880:	f800283a 	ret
   29884:	002535c0 	call	2535c <__locale_charset>
   29888:	100f883a 	mov	r7,r2
   2988c:	dc400015 	stw	r17,0(sp)
   29890:	000d883a 	mov	r6,zero
   29894:	d9400104 	addi	r5,sp,4
   29898:	8009883a 	mov	r4,r16
   2989c:	903ee83a 	callr	r18
   298a0:	003fed06 	br	29858 <__alt_data_end+0xfffe9858>

000298a4 <wcrtomb>:
   298a4:	defff604 	addi	sp,sp,-40
   298a8:	008000f4 	movhi	r2,3
   298ac:	dc800615 	stw	r18,24(sp)
   298b0:	dc400515 	stw	r17,20(sp)
   298b4:	108a3c04 	addi	r2,r2,10480
   298b8:	dfc00915 	stw	ra,36(sp)
   298bc:	dd000815 	stw	r20,32(sp)
   298c0:	dcc00715 	stw	r19,28(sp)
   298c4:	dc000415 	stw	r16,16(sp)
   298c8:	3025883a 	mov	r18,r6
   298cc:	14400017 	ldw	r17,0(r2)
   298d0:	20001926 	beq	r4,zero,29938 <wcrtomb+0x94>
   298d4:	008000f4 	movhi	r2,3
   298d8:	108a4004 	addi	r2,r2,10496
   298dc:	15000017 	ldw	r20,0(r2)
   298e0:	2021883a 	mov	r16,r4
   298e4:	2827883a 	mov	r19,r5
   298e8:	002535c0 	call	2535c <__locale_charset>
   298ec:	100f883a 	mov	r7,r2
   298f0:	dc800015 	stw	r18,0(sp)
   298f4:	980d883a 	mov	r6,r19
   298f8:	800b883a 	mov	r5,r16
   298fc:	8809883a 	mov	r4,r17
   29900:	a03ee83a 	callr	r20
   29904:	00ffffc4 	movi	r3,-1
   29908:	10c0031e 	bne	r2,r3,29918 <wcrtomb+0x74>
   2990c:	90000015 	stw	zero,0(r18)
   29910:	00c02284 	movi	r3,138
   29914:	88c00015 	stw	r3,0(r17)
   29918:	dfc00917 	ldw	ra,36(sp)
   2991c:	dd000817 	ldw	r20,32(sp)
   29920:	dcc00717 	ldw	r19,28(sp)
   29924:	dc800617 	ldw	r18,24(sp)
   29928:	dc400517 	ldw	r17,20(sp)
   2992c:	dc000417 	ldw	r16,16(sp)
   29930:	dec00a04 	addi	sp,sp,40
   29934:	f800283a 	ret
   29938:	008000f4 	movhi	r2,3
   2993c:	108a4004 	addi	r2,r2,10496
   29940:	14000017 	ldw	r16,0(r2)
   29944:	002535c0 	call	2535c <__locale_charset>
   29948:	100f883a 	mov	r7,r2
   2994c:	dc800015 	stw	r18,0(sp)
   29950:	000d883a 	mov	r6,zero
   29954:	d9400104 	addi	r5,sp,4
   29958:	8809883a 	mov	r4,r17
   2995c:	803ee83a 	callr	r16
   29960:	003fe806 	br	29904 <__alt_data_end+0xfffe9904>

00029964 <__ascii_wctomb>:
   29964:	28000526 	beq	r5,zero,2997c <__ascii_wctomb+0x18>
   29968:	00803fc4 	movi	r2,255
   2996c:	11800536 	bltu	r2,r6,29984 <__ascii_wctomb+0x20>
   29970:	29800005 	stb	r6,0(r5)
   29974:	00800044 	movi	r2,1
   29978:	f800283a 	ret
   2997c:	0005883a 	mov	r2,zero
   29980:	f800283a 	ret
   29984:	00802284 	movi	r2,138
   29988:	20800015 	stw	r2,0(r4)
   2998c:	00bfffc4 	movi	r2,-1
   29990:	f800283a 	ret

00029994 <_wctomb_r>:
   29994:	008000f4 	movhi	r2,3
   29998:	defff904 	addi	sp,sp,-28
   2999c:	108a4004 	addi	r2,r2,10496
   299a0:	dfc00615 	stw	ra,24(sp)
   299a4:	dc400515 	stw	r17,20(sp)
   299a8:	dc000415 	stw	r16,16(sp)
   299ac:	3823883a 	mov	r17,r7
   299b0:	14000017 	ldw	r16,0(r2)
   299b4:	d9000115 	stw	r4,4(sp)
   299b8:	d9400215 	stw	r5,8(sp)
   299bc:	d9800315 	stw	r6,12(sp)
   299c0:	002535c0 	call	2535c <__locale_charset>
   299c4:	d9800317 	ldw	r6,12(sp)
   299c8:	d9400217 	ldw	r5,8(sp)
   299cc:	d9000117 	ldw	r4,4(sp)
   299d0:	100f883a 	mov	r7,r2
   299d4:	dc400015 	stw	r17,0(sp)
   299d8:	803ee83a 	callr	r16
   299dc:	dfc00617 	ldw	ra,24(sp)
   299e0:	dc400517 	ldw	r17,20(sp)
   299e4:	dc000417 	ldw	r16,16(sp)
   299e8:	dec00704 	addi	sp,sp,28
   299ec:	f800283a 	ret

000299f0 <__udivdi3>:
   299f0:	defff504 	addi	sp,sp,-44
   299f4:	dcc00415 	stw	r19,16(sp)
   299f8:	dc000115 	stw	r16,4(sp)
   299fc:	dfc00a15 	stw	ra,40(sp)
   29a00:	df000915 	stw	fp,36(sp)
   29a04:	ddc00815 	stw	r23,32(sp)
   29a08:	dd800715 	stw	r22,28(sp)
   29a0c:	dd400615 	stw	r21,24(sp)
   29a10:	dd000515 	stw	r20,20(sp)
   29a14:	dc800315 	stw	r18,12(sp)
   29a18:	dc400215 	stw	r17,8(sp)
   29a1c:	2027883a 	mov	r19,r4
   29a20:	2821883a 	mov	r16,r5
   29a24:	3800411e 	bne	r7,zero,29b2c <__udivdi3+0x13c>
   29a28:	3023883a 	mov	r17,r6
   29a2c:	2025883a 	mov	r18,r4
   29a30:	2980522e 	bgeu	r5,r6,29b7c <__udivdi3+0x18c>
   29a34:	00bfffd4 	movui	r2,65535
   29a38:	282d883a 	mov	r22,r5
   29a3c:	1180a836 	bltu	r2,r6,29ce0 <__udivdi3+0x2f0>
   29a40:	00803fc4 	movi	r2,255
   29a44:	1185803a 	cmpltu	r2,r2,r6
   29a48:	100490fa 	slli	r2,r2,3
   29a4c:	3086d83a 	srl	r3,r6,r2
   29a50:	010000f4 	movhi	r4,3
   29a54:	2102ee04 	addi	r4,r4,3000
   29a58:	20c7883a 	add	r3,r4,r3
   29a5c:	18c00003 	ldbu	r3,0(r3)
   29a60:	1885883a 	add	r2,r3,r2
   29a64:	00c00804 	movi	r3,32
   29a68:	1887c83a 	sub	r3,r3,r2
   29a6c:	18000526 	beq	r3,zero,29a84 <__udivdi3+0x94>
   29a70:	80e0983a 	sll	r16,r16,r3
   29a74:	9884d83a 	srl	r2,r19,r2
   29a78:	30e2983a 	sll	r17,r6,r3
   29a7c:	98e4983a 	sll	r18,r19,r3
   29a80:	142cb03a 	or	r22,r2,r16
   29a84:	882ad43a 	srli	r21,r17,16
   29a88:	b009883a 	mov	r4,r22
   29a8c:	8d3fffcc 	andi	r20,r17,65535
   29a90:	a80b883a 	mov	r5,r21
   29a94:	002a5fc0 	call	2a5fc <__umodsi3>
   29a98:	b009883a 	mov	r4,r22
   29a9c:	a80b883a 	mov	r5,r21
   29aa0:	1027883a 	mov	r19,r2
   29aa4:	002a5980 	call	2a598 <__udivsi3>
   29aa8:	102d883a 	mov	r22,r2
   29aac:	9826943a 	slli	r19,r19,16
   29ab0:	9004d43a 	srli	r2,r18,16
   29ab4:	a5a1383a 	mul	r16,r20,r22
   29ab8:	14c4b03a 	or	r2,r2,r19
   29abc:	1400052e 	bgeu	r2,r16,29ad4 <__udivdi3+0xe4>
   29ac0:	1445883a 	add	r2,r2,r17
   29ac4:	b0ffffc4 	addi	r3,r22,-1
   29ac8:	14400136 	bltu	r2,r17,29ad0 <__udivdi3+0xe0>
   29acc:	14012336 	bltu	r2,r16,29f5c <__udivdi3+0x56c>
   29ad0:	182d883a 	mov	r22,r3
   29ad4:	1421c83a 	sub	r16,r2,r16
   29ad8:	a80b883a 	mov	r5,r21
   29adc:	8009883a 	mov	r4,r16
   29ae0:	002a5fc0 	call	2a5fc <__umodsi3>
   29ae4:	1027883a 	mov	r19,r2
   29ae8:	a80b883a 	mov	r5,r21
   29aec:	8009883a 	mov	r4,r16
   29af0:	002a5980 	call	2a598 <__udivsi3>
   29af4:	9826943a 	slli	r19,r19,16
   29af8:	a0a9383a 	mul	r20,r20,r2
   29afc:	94bfffcc 	andi	r18,r18,65535
   29b00:	94e4b03a 	or	r18,r18,r19
   29b04:	9500052e 	bgeu	r18,r20,29b1c <__udivdi3+0x12c>
   29b08:	8ca5883a 	add	r18,r17,r18
   29b0c:	10ffffc4 	addi	r3,r2,-1
   29b10:	9440f136 	bltu	r18,r17,29ed8 <__udivdi3+0x4e8>
   29b14:	9500f02e 	bgeu	r18,r20,29ed8 <__udivdi3+0x4e8>
   29b18:	10bfff84 	addi	r2,r2,-2
   29b1c:	b00c943a 	slli	r6,r22,16
   29b20:	0007883a 	mov	r3,zero
   29b24:	3084b03a 	or	r2,r6,r2
   29b28:	00005906 	br	29c90 <__udivdi3+0x2a0>
   29b2c:	29c05636 	bltu	r5,r7,29c88 <__udivdi3+0x298>
   29b30:	00bfffd4 	movui	r2,65535
   29b34:	11c0622e 	bgeu	r2,r7,29cc0 <__udivdi3+0x2d0>
   29b38:	00804034 	movhi	r2,256
   29b3c:	10bfffc4 	addi	r2,r2,-1
   29b40:	11c0ee36 	bltu	r2,r7,29efc <__udivdi3+0x50c>
   29b44:	00800404 	movi	r2,16
   29b48:	3886d83a 	srl	r3,r7,r2
   29b4c:	010000f4 	movhi	r4,3
   29b50:	2102ee04 	addi	r4,r4,3000
   29b54:	20c7883a 	add	r3,r4,r3
   29b58:	18c00003 	ldbu	r3,0(r3)
   29b5c:	05400804 	movi	r21,32
   29b60:	1885883a 	add	r2,r3,r2
   29b64:	a8abc83a 	sub	r21,r21,r2
   29b68:	a800621e 	bne	r21,zero,29cf4 <__udivdi3+0x304>
   29b6c:	3c00e936 	bltu	r7,r16,29f14 <__udivdi3+0x524>
   29b70:	9985403a 	cmpgeu	r2,r19,r6
   29b74:	0007883a 	mov	r3,zero
   29b78:	00004506 	br	29c90 <__udivdi3+0x2a0>
   29b7c:	3000041e 	bne	r6,zero,29b90 <__udivdi3+0x1a0>
   29b80:	000b883a 	mov	r5,zero
   29b84:	01000044 	movi	r4,1
   29b88:	002a5980 	call	2a598 <__udivsi3>
   29b8c:	1023883a 	mov	r17,r2
   29b90:	00bfffd4 	movui	r2,65535
   29b94:	14404e2e 	bgeu	r2,r17,29cd0 <__udivdi3+0x2e0>
   29b98:	00804034 	movhi	r2,256
   29b9c:	10bfffc4 	addi	r2,r2,-1
   29ba0:	1440d836 	bltu	r2,r17,29f04 <__udivdi3+0x514>
   29ba4:	00800404 	movi	r2,16
   29ba8:	8886d83a 	srl	r3,r17,r2
   29bac:	010000f4 	movhi	r4,3
   29bb0:	2102ee04 	addi	r4,r4,3000
   29bb4:	20c7883a 	add	r3,r4,r3
   29bb8:	18c00003 	ldbu	r3,0(r3)
   29bbc:	1885883a 	add	r2,r3,r2
   29bc0:	00c00804 	movi	r3,32
   29bc4:	1887c83a 	sub	r3,r3,r2
   29bc8:	18008f1e 	bne	r3,zero,29e08 <__udivdi3+0x418>
   29bcc:	882ad43a 	srli	r21,r17,16
   29bd0:	8461c83a 	sub	r16,r16,r17
   29bd4:	8d3fffcc 	andi	r20,r17,65535
   29bd8:	00c00044 	movi	r3,1
   29bdc:	8009883a 	mov	r4,r16
   29be0:	a80b883a 	mov	r5,r21
   29be4:	d8c00015 	stw	r3,0(sp)
   29be8:	002a5fc0 	call	2a5fc <__umodsi3>
   29bec:	8009883a 	mov	r4,r16
   29bf0:	a80b883a 	mov	r5,r21
   29bf4:	1027883a 	mov	r19,r2
   29bf8:	002a5980 	call	2a598 <__udivsi3>
   29bfc:	9826943a 	slli	r19,r19,16
   29c00:	9008d43a 	srli	r4,r18,16
   29c04:	1521383a 	mul	r16,r2,r20
   29c08:	102d883a 	mov	r22,r2
   29c0c:	24c8b03a 	or	r4,r4,r19
   29c10:	d8c00017 	ldw	r3,0(sp)
   29c14:	2400052e 	bgeu	r4,r16,29c2c <__udivdi3+0x23c>
   29c18:	2449883a 	add	r4,r4,r17
   29c1c:	b0bfffc4 	addi	r2,r22,-1
   29c20:	24400136 	bltu	r4,r17,29c28 <__udivdi3+0x238>
   29c24:	2400ca36 	bltu	r4,r16,29f50 <__udivdi3+0x560>
   29c28:	102d883a 	mov	r22,r2
   29c2c:	2421c83a 	sub	r16,r4,r16
   29c30:	a80b883a 	mov	r5,r21
   29c34:	8009883a 	mov	r4,r16
   29c38:	d8c00015 	stw	r3,0(sp)
   29c3c:	002a5fc0 	call	2a5fc <__umodsi3>
   29c40:	1027883a 	mov	r19,r2
   29c44:	a80b883a 	mov	r5,r21
   29c48:	8009883a 	mov	r4,r16
   29c4c:	002a5980 	call	2a598 <__udivsi3>
   29c50:	9826943a 	slli	r19,r19,16
   29c54:	1529383a 	mul	r20,r2,r20
   29c58:	94bfffcc 	andi	r18,r18,65535
   29c5c:	94e4b03a 	or	r18,r18,r19
   29c60:	d8c00017 	ldw	r3,0(sp)
   29c64:	9500052e 	bgeu	r18,r20,29c7c <__udivdi3+0x28c>
   29c68:	8ca5883a 	add	r18,r17,r18
   29c6c:	113fffc4 	addi	r4,r2,-1
   29c70:	94409736 	bltu	r18,r17,29ed0 <__udivdi3+0x4e0>
   29c74:	9500962e 	bgeu	r18,r20,29ed0 <__udivdi3+0x4e0>
   29c78:	10bfff84 	addi	r2,r2,-2
   29c7c:	b00c943a 	slli	r6,r22,16
   29c80:	3084b03a 	or	r2,r6,r2
   29c84:	00000206 	br	29c90 <__udivdi3+0x2a0>
   29c88:	0007883a 	mov	r3,zero
   29c8c:	0005883a 	mov	r2,zero
   29c90:	dfc00a17 	ldw	ra,40(sp)
   29c94:	df000917 	ldw	fp,36(sp)
   29c98:	ddc00817 	ldw	r23,32(sp)
   29c9c:	dd800717 	ldw	r22,28(sp)
   29ca0:	dd400617 	ldw	r21,24(sp)
   29ca4:	dd000517 	ldw	r20,20(sp)
   29ca8:	dcc00417 	ldw	r19,16(sp)
   29cac:	dc800317 	ldw	r18,12(sp)
   29cb0:	dc400217 	ldw	r17,8(sp)
   29cb4:	dc000117 	ldw	r16,4(sp)
   29cb8:	dec00b04 	addi	sp,sp,44
   29cbc:	f800283a 	ret
   29cc0:	00803fc4 	movi	r2,255
   29cc4:	11c5803a 	cmpltu	r2,r2,r7
   29cc8:	100490fa 	slli	r2,r2,3
   29ccc:	003f9e06 	br	29b48 <__alt_data_end+0xfffe9b48>
   29cd0:	00803fc4 	movi	r2,255
   29cd4:	1445803a 	cmpltu	r2,r2,r17
   29cd8:	100490fa 	slli	r2,r2,3
   29cdc:	003fb206 	br	29ba8 <__alt_data_end+0xfffe9ba8>
   29ce0:	00804034 	movhi	r2,256
   29ce4:	10bfffc4 	addi	r2,r2,-1
   29ce8:	11808836 	bltu	r2,r6,29f0c <__udivdi3+0x51c>
   29cec:	00800404 	movi	r2,16
   29cf0:	003f5606 	br	29a4c <__alt_data_end+0xfffe9a4c>
   29cf4:	30aed83a 	srl	r23,r6,r2
   29cf8:	3d4e983a 	sll	r7,r7,r21
   29cfc:	80acd83a 	srl	r22,r16,r2
   29d00:	9884d83a 	srl	r2,r19,r2
   29d04:	3deeb03a 	or	r23,r7,r23
   29d08:	b824d43a 	srli	r18,r23,16
   29d0c:	8560983a 	sll	r16,r16,r21
   29d10:	b009883a 	mov	r4,r22
   29d14:	900b883a 	mov	r5,r18
   29d18:	3568983a 	sll	r20,r6,r21
   29d1c:	1420b03a 	or	r16,r2,r16
   29d20:	002a5fc0 	call	2a5fc <__umodsi3>
   29d24:	b009883a 	mov	r4,r22
   29d28:	900b883a 	mov	r5,r18
   29d2c:	1023883a 	mov	r17,r2
   29d30:	002a5980 	call	2a598 <__udivsi3>
   29d34:	8808943a 	slli	r4,r17,16
   29d38:	bf3fffcc 	andi	fp,r23,65535
   29d3c:	8006d43a 	srli	r3,r16,16
   29d40:	e0a3383a 	mul	r17,fp,r2
   29d44:	100d883a 	mov	r6,r2
   29d48:	1906b03a 	or	r3,r3,r4
   29d4c:	1c40042e 	bgeu	r3,r17,29d60 <__udivdi3+0x370>
   29d50:	1dc7883a 	add	r3,r3,r23
   29d54:	10bfffc4 	addi	r2,r2,-1
   29d58:	1dc0752e 	bgeu	r3,r23,29f30 <__udivdi3+0x540>
   29d5c:	100d883a 	mov	r6,r2
   29d60:	1c63c83a 	sub	r17,r3,r17
   29d64:	900b883a 	mov	r5,r18
   29d68:	8809883a 	mov	r4,r17
   29d6c:	d9800015 	stw	r6,0(sp)
   29d70:	002a5fc0 	call	2a5fc <__umodsi3>
   29d74:	102d883a 	mov	r22,r2
   29d78:	8809883a 	mov	r4,r17
   29d7c:	900b883a 	mov	r5,r18
   29d80:	002a5980 	call	2a598 <__udivsi3>
   29d84:	b02c943a 	slli	r22,r22,16
   29d88:	e089383a 	mul	r4,fp,r2
   29d8c:	843fffcc 	andi	r16,r16,65535
   29d90:	85a0b03a 	or	r16,r16,r22
   29d94:	d9800017 	ldw	r6,0(sp)
   29d98:	8100042e 	bgeu	r16,r4,29dac <__udivdi3+0x3bc>
   29d9c:	85e1883a 	add	r16,r16,r23
   29da0:	10ffffc4 	addi	r3,r2,-1
   29da4:	85c05e2e 	bgeu	r16,r23,29f20 <__udivdi3+0x530>
   29da8:	1805883a 	mov	r2,r3
   29dac:	300c943a 	slli	r6,r6,16
   29db0:	a17fffcc 	andi	r5,r20,65535
   29db4:	a028d43a 	srli	r20,r20,16
   29db8:	3084b03a 	or	r2,r6,r2
   29dbc:	10ffffcc 	andi	r3,r2,65535
   29dc0:	100cd43a 	srli	r6,r2,16
   29dc4:	194f383a 	mul	r7,r3,r5
   29dc8:	1d07383a 	mul	r3,r3,r20
   29dcc:	314b383a 	mul	r5,r6,r5
   29dd0:	3810d43a 	srli	r8,r7,16
   29dd4:	8121c83a 	sub	r16,r16,r4
   29dd8:	1947883a 	add	r3,r3,r5
   29ddc:	40c7883a 	add	r3,r8,r3
   29de0:	350d383a 	mul	r6,r6,r20
   29de4:	1940022e 	bgeu	r3,r5,29df0 <__udivdi3+0x400>
   29de8:	01000074 	movhi	r4,1
   29dec:	310d883a 	add	r6,r6,r4
   29df0:	1828d43a 	srli	r20,r3,16
   29df4:	a18d883a 	add	r6,r20,r6
   29df8:	81803e36 	bltu	r16,r6,29ef4 <__udivdi3+0x504>
   29dfc:	81803826 	beq	r16,r6,29ee0 <__udivdi3+0x4f0>
   29e00:	0007883a 	mov	r3,zero
   29e04:	003fa206 	br	29c90 <__alt_data_end+0xfffe9c90>
   29e08:	88e2983a 	sll	r17,r17,r3
   29e0c:	80a8d83a 	srl	r20,r16,r2
   29e10:	80e0983a 	sll	r16,r16,r3
   29e14:	882ad43a 	srli	r21,r17,16
   29e18:	9884d83a 	srl	r2,r19,r2
   29e1c:	a009883a 	mov	r4,r20
   29e20:	a80b883a 	mov	r5,r21
   29e24:	142eb03a 	or	r23,r2,r16
   29e28:	98e4983a 	sll	r18,r19,r3
   29e2c:	002a5fc0 	call	2a5fc <__umodsi3>
   29e30:	a009883a 	mov	r4,r20
   29e34:	a80b883a 	mov	r5,r21
   29e38:	1021883a 	mov	r16,r2
   29e3c:	002a5980 	call	2a598 <__udivsi3>
   29e40:	1039883a 	mov	fp,r2
   29e44:	8d3fffcc 	andi	r20,r17,65535
   29e48:	8020943a 	slli	r16,r16,16
   29e4c:	b804d43a 	srli	r2,r23,16
   29e50:	a72d383a 	mul	r22,r20,fp
   29e54:	1404b03a 	or	r2,r2,r16
   29e58:	1580062e 	bgeu	r2,r22,29e74 <__udivdi3+0x484>
   29e5c:	1445883a 	add	r2,r2,r17
   29e60:	e0ffffc4 	addi	r3,fp,-1
   29e64:	14403836 	bltu	r2,r17,29f48 <__udivdi3+0x558>
   29e68:	1580372e 	bgeu	r2,r22,29f48 <__udivdi3+0x558>
   29e6c:	e73fff84 	addi	fp,fp,-2
   29e70:	1445883a 	add	r2,r2,r17
   29e74:	15adc83a 	sub	r22,r2,r22
   29e78:	a80b883a 	mov	r5,r21
   29e7c:	b009883a 	mov	r4,r22
   29e80:	002a5fc0 	call	2a5fc <__umodsi3>
   29e84:	1027883a 	mov	r19,r2
   29e88:	b009883a 	mov	r4,r22
   29e8c:	a80b883a 	mov	r5,r21
   29e90:	002a5980 	call	2a598 <__udivsi3>
   29e94:	9826943a 	slli	r19,r19,16
   29e98:	a0a1383a 	mul	r16,r20,r2
   29e9c:	b93fffcc 	andi	r4,r23,65535
   29ea0:	24c8b03a 	or	r4,r4,r19
   29ea4:	2400062e 	bgeu	r4,r16,29ec0 <__udivdi3+0x4d0>
   29ea8:	2449883a 	add	r4,r4,r17
   29eac:	10ffffc4 	addi	r3,r2,-1
   29eb0:	24402336 	bltu	r4,r17,29f40 <__udivdi3+0x550>
   29eb4:	2400222e 	bgeu	r4,r16,29f40 <__udivdi3+0x550>
   29eb8:	10bfff84 	addi	r2,r2,-2
   29ebc:	2449883a 	add	r4,r4,r17
   29ec0:	e038943a 	slli	fp,fp,16
   29ec4:	2421c83a 	sub	r16,r4,r16
   29ec8:	e086b03a 	or	r3,fp,r2
   29ecc:	003f4306 	br	29bdc <__alt_data_end+0xfffe9bdc>
   29ed0:	2005883a 	mov	r2,r4
   29ed4:	003f6906 	br	29c7c <__alt_data_end+0xfffe9c7c>
   29ed8:	1805883a 	mov	r2,r3
   29edc:	003f0f06 	br	29b1c <__alt_data_end+0xfffe9b1c>
   29ee0:	1806943a 	slli	r3,r3,16
   29ee4:	9d66983a 	sll	r19,r19,r21
   29ee8:	39ffffcc 	andi	r7,r7,65535
   29eec:	19c7883a 	add	r3,r3,r7
   29ef0:	98ffc32e 	bgeu	r19,r3,29e00 <__alt_data_end+0xfffe9e00>
   29ef4:	10bfffc4 	addi	r2,r2,-1
   29ef8:	003fc106 	br	29e00 <__alt_data_end+0xfffe9e00>
   29efc:	00800604 	movi	r2,24
   29f00:	003f1106 	br	29b48 <__alt_data_end+0xfffe9b48>
   29f04:	00800604 	movi	r2,24
   29f08:	003f2706 	br	29ba8 <__alt_data_end+0xfffe9ba8>
   29f0c:	00800604 	movi	r2,24
   29f10:	003ece06 	br	29a4c <__alt_data_end+0xfffe9a4c>
   29f14:	0007883a 	mov	r3,zero
   29f18:	00800044 	movi	r2,1
   29f1c:	003f5c06 	br	29c90 <__alt_data_end+0xfffe9c90>
   29f20:	813fa12e 	bgeu	r16,r4,29da8 <__alt_data_end+0xfffe9da8>
   29f24:	10bfff84 	addi	r2,r2,-2
   29f28:	85e1883a 	add	r16,r16,r23
   29f2c:	003f9f06 	br	29dac <__alt_data_end+0xfffe9dac>
   29f30:	1c7f8a2e 	bgeu	r3,r17,29d5c <__alt_data_end+0xfffe9d5c>
   29f34:	31bfff84 	addi	r6,r6,-2
   29f38:	1dc7883a 	add	r3,r3,r23
   29f3c:	003f8806 	br	29d60 <__alt_data_end+0xfffe9d60>
   29f40:	1805883a 	mov	r2,r3
   29f44:	003fde06 	br	29ec0 <__alt_data_end+0xfffe9ec0>
   29f48:	1839883a 	mov	fp,r3
   29f4c:	003fc906 	br	29e74 <__alt_data_end+0xfffe9e74>
   29f50:	b5bfff84 	addi	r22,r22,-2
   29f54:	2449883a 	add	r4,r4,r17
   29f58:	003f3406 	br	29c2c <__alt_data_end+0xfffe9c2c>
   29f5c:	b5bfff84 	addi	r22,r22,-2
   29f60:	1445883a 	add	r2,r2,r17
   29f64:	003edb06 	br	29ad4 <__alt_data_end+0xfffe9ad4>

00029f68 <__umoddi3>:
   29f68:	defff404 	addi	sp,sp,-48
   29f6c:	df000a15 	stw	fp,40(sp)
   29f70:	dc400315 	stw	r17,12(sp)
   29f74:	dc000215 	stw	r16,8(sp)
   29f78:	dfc00b15 	stw	ra,44(sp)
   29f7c:	ddc00915 	stw	r23,36(sp)
   29f80:	dd800815 	stw	r22,32(sp)
   29f84:	dd400715 	stw	r21,28(sp)
   29f88:	dd000615 	stw	r20,24(sp)
   29f8c:	dcc00515 	stw	r19,20(sp)
   29f90:	dc800415 	stw	r18,16(sp)
   29f94:	2021883a 	mov	r16,r4
   29f98:	2823883a 	mov	r17,r5
   29f9c:	2839883a 	mov	fp,r5
   29fa0:	38003c1e 	bne	r7,zero,2a094 <__umoddi3+0x12c>
   29fa4:	3027883a 	mov	r19,r6
   29fa8:	2029883a 	mov	r20,r4
   29fac:	2980512e 	bgeu	r5,r6,2a0f4 <__umoddi3+0x18c>
   29fb0:	00bfffd4 	movui	r2,65535
   29fb4:	11809a36 	bltu	r2,r6,2a220 <__umoddi3+0x2b8>
   29fb8:	01003fc4 	movi	r4,255
   29fbc:	2189803a 	cmpltu	r4,r4,r6
   29fc0:	200890fa 	slli	r4,r4,3
   29fc4:	3104d83a 	srl	r2,r6,r4
   29fc8:	00c000f4 	movhi	r3,3
   29fcc:	18c2ee04 	addi	r3,r3,3000
   29fd0:	1885883a 	add	r2,r3,r2
   29fd4:	10c00003 	ldbu	r3,0(r2)
   29fd8:	00800804 	movi	r2,32
   29fdc:	1909883a 	add	r4,r3,r4
   29fe0:	1125c83a 	sub	r18,r2,r4
   29fe4:	90000526 	beq	r18,zero,29ffc <__umoddi3+0x94>
   29fe8:	8ca2983a 	sll	r17,r17,r18
   29fec:	8108d83a 	srl	r4,r16,r4
   29ff0:	34a6983a 	sll	r19,r6,r18
   29ff4:	84a8983a 	sll	r20,r16,r18
   29ff8:	2478b03a 	or	fp,r4,r17
   29ffc:	982ed43a 	srli	r23,r19,16
   2a000:	e009883a 	mov	r4,fp
   2a004:	9dbfffcc 	andi	r22,r19,65535
   2a008:	b80b883a 	mov	r5,r23
   2a00c:	002a5fc0 	call	2a5fc <__umodsi3>
   2a010:	e009883a 	mov	r4,fp
   2a014:	b80b883a 	mov	r5,r23
   2a018:	102b883a 	mov	r21,r2
   2a01c:	002a5980 	call	2a598 <__udivsi3>
   2a020:	a806943a 	slli	r3,r21,16
   2a024:	a008d43a 	srli	r4,r20,16
   2a028:	b085383a 	mul	r2,r22,r2
   2a02c:	20c8b03a 	or	r4,r4,r3
   2a030:	2080032e 	bgeu	r4,r2,2a040 <__umoddi3+0xd8>
   2a034:	24c9883a 	add	r4,r4,r19
   2a038:	24c00136 	bltu	r4,r19,2a040 <__umoddi3+0xd8>
   2a03c:	20811036 	bltu	r4,r2,2a480 <__umoddi3+0x518>
   2a040:	20abc83a 	sub	r21,r4,r2
   2a044:	b80b883a 	mov	r5,r23
   2a048:	a809883a 	mov	r4,r21
   2a04c:	002a5fc0 	call	2a5fc <__umodsi3>
   2a050:	1023883a 	mov	r17,r2
   2a054:	b80b883a 	mov	r5,r23
   2a058:	a809883a 	mov	r4,r21
   2a05c:	002a5980 	call	2a598 <__udivsi3>
   2a060:	8822943a 	slli	r17,r17,16
   2a064:	b085383a 	mul	r2,r22,r2
   2a068:	a0ffffcc 	andi	r3,r20,65535
   2a06c:	1c46b03a 	or	r3,r3,r17
   2a070:	1880042e 	bgeu	r3,r2,2a084 <__umoddi3+0x11c>
   2a074:	1cc7883a 	add	r3,r3,r19
   2a078:	1cc00236 	bltu	r3,r19,2a084 <__umoddi3+0x11c>
   2a07c:	1880012e 	bgeu	r3,r2,2a084 <__umoddi3+0x11c>
   2a080:	1cc7883a 	add	r3,r3,r19
   2a084:	1885c83a 	sub	r2,r3,r2
   2a088:	1484d83a 	srl	r2,r2,r18
   2a08c:	0007883a 	mov	r3,zero
   2a090:	00004f06 	br	2a1d0 <__umoddi3+0x268>
   2a094:	29c04c36 	bltu	r5,r7,2a1c8 <__umoddi3+0x260>
   2a098:	00bfffd4 	movui	r2,65535
   2a09c:	11c0582e 	bgeu	r2,r7,2a200 <__umoddi3+0x298>
   2a0a0:	00804034 	movhi	r2,256
   2a0a4:	10bfffc4 	addi	r2,r2,-1
   2a0a8:	11c0e736 	bltu	r2,r7,2a448 <__umoddi3+0x4e0>
   2a0ac:	01000404 	movi	r4,16
   2a0b0:	3904d83a 	srl	r2,r7,r4
   2a0b4:	00c000f4 	movhi	r3,3
   2a0b8:	18c2ee04 	addi	r3,r3,3000
   2a0bc:	1885883a 	add	r2,r3,r2
   2a0c0:	14c00003 	ldbu	r19,0(r2)
   2a0c4:	00c00804 	movi	r3,32
   2a0c8:	9927883a 	add	r19,r19,r4
   2a0cc:	1ce9c83a 	sub	r20,r3,r19
   2a0d0:	a000581e 	bne	r20,zero,2a234 <__umoddi3+0x2cc>
   2a0d4:	3c400136 	bltu	r7,r17,2a0dc <__umoddi3+0x174>
   2a0d8:	8180eb36 	bltu	r16,r6,2a488 <__umoddi3+0x520>
   2a0dc:	8185c83a 	sub	r2,r16,r6
   2a0e0:	89e3c83a 	sub	r17,r17,r7
   2a0e4:	8089803a 	cmpltu	r4,r16,r2
   2a0e8:	8939c83a 	sub	fp,r17,r4
   2a0ec:	e007883a 	mov	r3,fp
   2a0f0:	00003706 	br	2a1d0 <__umoddi3+0x268>
   2a0f4:	3000041e 	bne	r6,zero,2a108 <__umoddi3+0x1a0>
   2a0f8:	000b883a 	mov	r5,zero
   2a0fc:	01000044 	movi	r4,1
   2a100:	002a5980 	call	2a598 <__udivsi3>
   2a104:	1027883a 	mov	r19,r2
   2a108:	00bfffd4 	movui	r2,65535
   2a10c:	14c0402e 	bgeu	r2,r19,2a210 <__umoddi3+0x2a8>
   2a110:	00804034 	movhi	r2,256
   2a114:	10bfffc4 	addi	r2,r2,-1
   2a118:	14c0cd36 	bltu	r2,r19,2a450 <__umoddi3+0x4e8>
   2a11c:	00800404 	movi	r2,16
   2a120:	9886d83a 	srl	r3,r19,r2
   2a124:	010000f4 	movhi	r4,3
   2a128:	2102ee04 	addi	r4,r4,3000
   2a12c:	20c7883a 	add	r3,r4,r3
   2a130:	18c00003 	ldbu	r3,0(r3)
   2a134:	1887883a 	add	r3,r3,r2
   2a138:	00800804 	movi	r2,32
   2a13c:	10e5c83a 	sub	r18,r2,r3
   2a140:	9000901e 	bne	r18,zero,2a384 <__umoddi3+0x41c>
   2a144:	982cd43a 	srli	r22,r19,16
   2a148:	8ce3c83a 	sub	r17,r17,r19
   2a14c:	9d7fffcc 	andi	r21,r19,65535
   2a150:	b00b883a 	mov	r5,r22
   2a154:	8809883a 	mov	r4,r17
   2a158:	002a5fc0 	call	2a5fc <__umodsi3>
   2a15c:	8809883a 	mov	r4,r17
   2a160:	b00b883a 	mov	r5,r22
   2a164:	1021883a 	mov	r16,r2
   2a168:	002a5980 	call	2a598 <__udivsi3>
   2a16c:	8006943a 	slli	r3,r16,16
   2a170:	a008d43a 	srli	r4,r20,16
   2a174:	1545383a 	mul	r2,r2,r21
   2a178:	20c8b03a 	or	r4,r4,r3
   2a17c:	2080042e 	bgeu	r4,r2,2a190 <__umoddi3+0x228>
   2a180:	24c9883a 	add	r4,r4,r19
   2a184:	24c00236 	bltu	r4,r19,2a190 <__umoddi3+0x228>
   2a188:	2080012e 	bgeu	r4,r2,2a190 <__umoddi3+0x228>
   2a18c:	24c9883a 	add	r4,r4,r19
   2a190:	20a1c83a 	sub	r16,r4,r2
   2a194:	b00b883a 	mov	r5,r22
   2a198:	8009883a 	mov	r4,r16
   2a19c:	002a5fc0 	call	2a5fc <__umodsi3>
   2a1a0:	1023883a 	mov	r17,r2
   2a1a4:	b00b883a 	mov	r5,r22
   2a1a8:	8009883a 	mov	r4,r16
   2a1ac:	002a5980 	call	2a598 <__udivsi3>
   2a1b0:	8822943a 	slli	r17,r17,16
   2a1b4:	1545383a 	mul	r2,r2,r21
   2a1b8:	a53fffcc 	andi	r20,r20,65535
   2a1bc:	a446b03a 	or	r3,r20,r17
   2a1c0:	18bfb02e 	bgeu	r3,r2,2a084 <__alt_data_end+0xfffea084>
   2a1c4:	003fab06 	br	2a074 <__alt_data_end+0xfffea074>
   2a1c8:	2005883a 	mov	r2,r4
   2a1cc:	2807883a 	mov	r3,r5
   2a1d0:	dfc00b17 	ldw	ra,44(sp)
   2a1d4:	df000a17 	ldw	fp,40(sp)
   2a1d8:	ddc00917 	ldw	r23,36(sp)
   2a1dc:	dd800817 	ldw	r22,32(sp)
   2a1e0:	dd400717 	ldw	r21,28(sp)
   2a1e4:	dd000617 	ldw	r20,24(sp)
   2a1e8:	dcc00517 	ldw	r19,20(sp)
   2a1ec:	dc800417 	ldw	r18,16(sp)
   2a1f0:	dc400317 	ldw	r17,12(sp)
   2a1f4:	dc000217 	ldw	r16,8(sp)
   2a1f8:	dec00c04 	addi	sp,sp,48
   2a1fc:	f800283a 	ret
   2a200:	04c03fc4 	movi	r19,255
   2a204:	99c9803a 	cmpltu	r4,r19,r7
   2a208:	200890fa 	slli	r4,r4,3
   2a20c:	003fa806 	br	2a0b0 <__alt_data_end+0xfffea0b0>
   2a210:	00803fc4 	movi	r2,255
   2a214:	14c5803a 	cmpltu	r2,r2,r19
   2a218:	100490fa 	slli	r2,r2,3
   2a21c:	003fc006 	br	2a120 <__alt_data_end+0xfffea120>
   2a220:	00804034 	movhi	r2,256
   2a224:	10bfffc4 	addi	r2,r2,-1
   2a228:	11808b36 	bltu	r2,r6,2a458 <__umoddi3+0x4f0>
   2a22c:	01000404 	movi	r4,16
   2a230:	003f6406 	br	29fc4 <__alt_data_end+0xfffe9fc4>
   2a234:	34c4d83a 	srl	r2,r6,r19
   2a238:	3d0e983a 	sll	r7,r7,r20
   2a23c:	8cf8d83a 	srl	fp,r17,r19
   2a240:	8d10983a 	sll	r8,r17,r20
   2a244:	38aab03a 	or	r21,r7,r2
   2a248:	a82cd43a 	srli	r22,r21,16
   2a24c:	84e2d83a 	srl	r17,r16,r19
   2a250:	e009883a 	mov	r4,fp
   2a254:	b00b883a 	mov	r5,r22
   2a258:	8a22b03a 	or	r17,r17,r8
   2a25c:	3524983a 	sll	r18,r6,r20
   2a260:	002a5fc0 	call	2a5fc <__umodsi3>
   2a264:	e009883a 	mov	r4,fp
   2a268:	b00b883a 	mov	r5,r22
   2a26c:	102f883a 	mov	r23,r2
   2a270:	002a5980 	call	2a598 <__udivsi3>
   2a274:	100d883a 	mov	r6,r2
   2a278:	b808943a 	slli	r4,r23,16
   2a27c:	aa3fffcc 	andi	r8,r21,65535
   2a280:	8804d43a 	srli	r2,r17,16
   2a284:	41af383a 	mul	r23,r8,r6
   2a288:	8520983a 	sll	r16,r16,r20
   2a28c:	1104b03a 	or	r2,r2,r4
   2a290:	15c0042e 	bgeu	r2,r23,2a2a4 <__umoddi3+0x33c>
   2a294:	1545883a 	add	r2,r2,r21
   2a298:	30ffffc4 	addi	r3,r6,-1
   2a29c:	1540742e 	bgeu	r2,r21,2a470 <__umoddi3+0x508>
   2a2a0:	180d883a 	mov	r6,r3
   2a2a4:	15efc83a 	sub	r23,r2,r23
   2a2a8:	b00b883a 	mov	r5,r22
   2a2ac:	b809883a 	mov	r4,r23
   2a2b0:	d9800115 	stw	r6,4(sp)
   2a2b4:	da000015 	stw	r8,0(sp)
   2a2b8:	002a5fc0 	call	2a5fc <__umodsi3>
   2a2bc:	b00b883a 	mov	r5,r22
   2a2c0:	b809883a 	mov	r4,r23
   2a2c4:	1039883a 	mov	fp,r2
   2a2c8:	002a5980 	call	2a598 <__udivsi3>
   2a2cc:	da000017 	ldw	r8,0(sp)
   2a2d0:	e038943a 	slli	fp,fp,16
   2a2d4:	100b883a 	mov	r5,r2
   2a2d8:	4089383a 	mul	r4,r8,r2
   2a2dc:	8a3fffcc 	andi	r8,r17,65535
   2a2e0:	4710b03a 	or	r8,r8,fp
   2a2e4:	d9800117 	ldw	r6,4(sp)
   2a2e8:	4100042e 	bgeu	r8,r4,2a2fc <__umoddi3+0x394>
   2a2ec:	4551883a 	add	r8,r8,r21
   2a2f0:	10bfffc4 	addi	r2,r2,-1
   2a2f4:	45405a2e 	bgeu	r8,r21,2a460 <__umoddi3+0x4f8>
   2a2f8:	100b883a 	mov	r5,r2
   2a2fc:	300c943a 	slli	r6,r6,16
   2a300:	91ffffcc 	andi	r7,r18,65535
   2a304:	9004d43a 	srli	r2,r18,16
   2a308:	314cb03a 	or	r6,r6,r5
   2a30c:	317fffcc 	andi	r5,r6,65535
   2a310:	300cd43a 	srli	r6,r6,16
   2a314:	29d3383a 	mul	r9,r5,r7
   2a318:	288b383a 	mul	r5,r5,r2
   2a31c:	31cf383a 	mul	r7,r6,r7
   2a320:	4806d43a 	srli	r3,r9,16
   2a324:	4111c83a 	sub	r8,r8,r4
   2a328:	29cb883a 	add	r5,r5,r7
   2a32c:	194b883a 	add	r5,r3,r5
   2a330:	3085383a 	mul	r2,r6,r2
   2a334:	29c0022e 	bgeu	r5,r7,2a340 <__umoddi3+0x3d8>
   2a338:	00c00074 	movhi	r3,1
   2a33c:	10c5883a 	add	r2,r2,r3
   2a340:	2808d43a 	srli	r4,r5,16
   2a344:	280a943a 	slli	r5,r5,16
   2a348:	4a7fffcc 	andi	r9,r9,65535
   2a34c:	2085883a 	add	r2,r4,r2
   2a350:	2a4b883a 	add	r5,r5,r9
   2a354:	40803636 	bltu	r8,r2,2a430 <__umoddi3+0x4c8>
   2a358:	40804d26 	beq	r8,r2,2a490 <__umoddi3+0x528>
   2a35c:	4089c83a 	sub	r4,r8,r2
   2a360:	280f883a 	mov	r7,r5
   2a364:	81cfc83a 	sub	r7,r16,r7
   2a368:	81c7803a 	cmpltu	r3,r16,r7
   2a36c:	20c7c83a 	sub	r3,r4,r3
   2a370:	1cc4983a 	sll	r2,r3,r19
   2a374:	3d0ed83a 	srl	r7,r7,r20
   2a378:	1d06d83a 	srl	r3,r3,r20
   2a37c:	11c4b03a 	or	r2,r2,r7
   2a380:	003f9306 	br	2a1d0 <__alt_data_end+0xfffea1d0>
   2a384:	9ca6983a 	sll	r19,r19,r18
   2a388:	88e8d83a 	srl	r20,r17,r3
   2a38c:	80c4d83a 	srl	r2,r16,r3
   2a390:	982cd43a 	srli	r22,r19,16
   2a394:	8ca2983a 	sll	r17,r17,r18
   2a398:	a009883a 	mov	r4,r20
   2a39c:	b00b883a 	mov	r5,r22
   2a3a0:	1478b03a 	or	fp,r2,r17
   2a3a4:	002a5fc0 	call	2a5fc <__umodsi3>
   2a3a8:	a009883a 	mov	r4,r20
   2a3ac:	b00b883a 	mov	r5,r22
   2a3b0:	1023883a 	mov	r17,r2
   2a3b4:	002a5980 	call	2a598 <__udivsi3>
   2a3b8:	9d7fffcc 	andi	r21,r19,65535
   2a3bc:	880a943a 	slli	r5,r17,16
   2a3c0:	e008d43a 	srli	r4,fp,16
   2a3c4:	a885383a 	mul	r2,r21,r2
   2a3c8:	84a8983a 	sll	r20,r16,r18
   2a3cc:	2148b03a 	or	r4,r4,r5
   2a3d0:	2080042e 	bgeu	r4,r2,2a3e4 <__umoddi3+0x47c>
   2a3d4:	24c9883a 	add	r4,r4,r19
   2a3d8:	24c00236 	bltu	r4,r19,2a3e4 <__umoddi3+0x47c>
   2a3dc:	2080012e 	bgeu	r4,r2,2a3e4 <__umoddi3+0x47c>
   2a3e0:	24c9883a 	add	r4,r4,r19
   2a3e4:	20a3c83a 	sub	r17,r4,r2
   2a3e8:	b00b883a 	mov	r5,r22
   2a3ec:	8809883a 	mov	r4,r17
   2a3f0:	002a5fc0 	call	2a5fc <__umodsi3>
   2a3f4:	102f883a 	mov	r23,r2
   2a3f8:	8809883a 	mov	r4,r17
   2a3fc:	b00b883a 	mov	r5,r22
   2a400:	002a5980 	call	2a598 <__udivsi3>
   2a404:	b82e943a 	slli	r23,r23,16
   2a408:	a885383a 	mul	r2,r21,r2
   2a40c:	e13fffcc 	andi	r4,fp,65535
   2a410:	25c8b03a 	or	r4,r4,r23
   2a414:	2080042e 	bgeu	r4,r2,2a428 <__umoddi3+0x4c0>
   2a418:	24c9883a 	add	r4,r4,r19
   2a41c:	24c00236 	bltu	r4,r19,2a428 <__umoddi3+0x4c0>
   2a420:	2080012e 	bgeu	r4,r2,2a428 <__umoddi3+0x4c0>
   2a424:	24c9883a 	add	r4,r4,r19
   2a428:	20a3c83a 	sub	r17,r4,r2
   2a42c:	003f4806 	br	2a150 <__alt_data_end+0xfffea150>
   2a430:	2c8fc83a 	sub	r7,r5,r18
   2a434:	1545c83a 	sub	r2,r2,r21
   2a438:	29cb803a 	cmpltu	r5,r5,r7
   2a43c:	1145c83a 	sub	r2,r2,r5
   2a440:	4089c83a 	sub	r4,r8,r2
   2a444:	003fc706 	br	2a364 <__alt_data_end+0xfffea364>
   2a448:	01000604 	movi	r4,24
   2a44c:	003f1806 	br	2a0b0 <__alt_data_end+0xfffea0b0>
   2a450:	00800604 	movi	r2,24
   2a454:	003f3206 	br	2a120 <__alt_data_end+0xfffea120>
   2a458:	01000604 	movi	r4,24
   2a45c:	003ed906 	br	29fc4 <__alt_data_end+0xfffe9fc4>
   2a460:	413fa52e 	bgeu	r8,r4,2a2f8 <__alt_data_end+0xfffea2f8>
   2a464:	297fff84 	addi	r5,r5,-2
   2a468:	4551883a 	add	r8,r8,r21
   2a46c:	003fa306 	br	2a2fc <__alt_data_end+0xfffea2fc>
   2a470:	15ff8b2e 	bgeu	r2,r23,2a2a0 <__alt_data_end+0xfffea2a0>
   2a474:	31bfff84 	addi	r6,r6,-2
   2a478:	1545883a 	add	r2,r2,r21
   2a47c:	003f8906 	br	2a2a4 <__alt_data_end+0xfffea2a4>
   2a480:	24c9883a 	add	r4,r4,r19
   2a484:	003eee06 	br	2a040 <__alt_data_end+0xfffea040>
   2a488:	8005883a 	mov	r2,r16
   2a48c:	003f1706 	br	2a0ec <__alt_data_end+0xfffea0ec>
   2a490:	817fe736 	bltu	r16,r5,2a430 <__alt_data_end+0xfffea430>
   2a494:	280f883a 	mov	r7,r5
   2a498:	0009883a 	mov	r4,zero
   2a49c:	003fb106 	br	2a364 <__alt_data_end+0xfffea364>

0002a4a0 <__divsi3>:
   2a4a0:	20001b16 	blt	r4,zero,2a510 <__divsi3+0x70>
   2a4a4:	000f883a 	mov	r7,zero
   2a4a8:	28001616 	blt	r5,zero,2a504 <__divsi3+0x64>
   2a4ac:	200d883a 	mov	r6,r4
   2a4b0:	29001a2e 	bgeu	r5,r4,2a51c <__divsi3+0x7c>
   2a4b4:	00800804 	movi	r2,32
   2a4b8:	00c00044 	movi	r3,1
   2a4bc:	00000106 	br	2a4c4 <__divsi3+0x24>
   2a4c0:	10000d26 	beq	r2,zero,2a4f8 <__divsi3+0x58>
   2a4c4:	294b883a 	add	r5,r5,r5
   2a4c8:	10bfffc4 	addi	r2,r2,-1
   2a4cc:	18c7883a 	add	r3,r3,r3
   2a4d0:	293ffb36 	bltu	r5,r4,2a4c0 <__alt_data_end+0xfffea4c0>
   2a4d4:	0005883a 	mov	r2,zero
   2a4d8:	18000726 	beq	r3,zero,2a4f8 <__divsi3+0x58>
   2a4dc:	0005883a 	mov	r2,zero
   2a4e0:	31400236 	bltu	r6,r5,2a4ec <__divsi3+0x4c>
   2a4e4:	314dc83a 	sub	r6,r6,r5
   2a4e8:	10c4b03a 	or	r2,r2,r3
   2a4ec:	1806d07a 	srli	r3,r3,1
   2a4f0:	280ad07a 	srli	r5,r5,1
   2a4f4:	183ffa1e 	bne	r3,zero,2a4e0 <__alt_data_end+0xfffea4e0>
   2a4f8:	38000126 	beq	r7,zero,2a500 <__divsi3+0x60>
   2a4fc:	0085c83a 	sub	r2,zero,r2
   2a500:	f800283a 	ret
   2a504:	014bc83a 	sub	r5,zero,r5
   2a508:	39c0005c 	xori	r7,r7,1
   2a50c:	003fe706 	br	2a4ac <__alt_data_end+0xfffea4ac>
   2a510:	0109c83a 	sub	r4,zero,r4
   2a514:	01c00044 	movi	r7,1
   2a518:	003fe306 	br	2a4a8 <__alt_data_end+0xfffea4a8>
   2a51c:	00c00044 	movi	r3,1
   2a520:	003fee06 	br	2a4dc <__alt_data_end+0xfffea4dc>

0002a524 <__modsi3>:
   2a524:	20001716 	blt	r4,zero,2a584 <__modsi3+0x60>
   2a528:	000f883a 	mov	r7,zero
   2a52c:	2005883a 	mov	r2,r4
   2a530:	28001216 	blt	r5,zero,2a57c <__modsi3+0x58>
   2a534:	2900162e 	bgeu	r5,r4,2a590 <__modsi3+0x6c>
   2a538:	01800804 	movi	r6,32
   2a53c:	00c00044 	movi	r3,1
   2a540:	00000106 	br	2a548 <__modsi3+0x24>
   2a544:	30000a26 	beq	r6,zero,2a570 <__modsi3+0x4c>
   2a548:	294b883a 	add	r5,r5,r5
   2a54c:	31bfffc4 	addi	r6,r6,-1
   2a550:	18c7883a 	add	r3,r3,r3
   2a554:	293ffb36 	bltu	r5,r4,2a544 <__alt_data_end+0xfffea544>
   2a558:	18000526 	beq	r3,zero,2a570 <__modsi3+0x4c>
   2a55c:	1806d07a 	srli	r3,r3,1
   2a560:	11400136 	bltu	r2,r5,2a568 <__modsi3+0x44>
   2a564:	1145c83a 	sub	r2,r2,r5
   2a568:	280ad07a 	srli	r5,r5,1
   2a56c:	183ffb1e 	bne	r3,zero,2a55c <__alt_data_end+0xfffea55c>
   2a570:	38000126 	beq	r7,zero,2a578 <__modsi3+0x54>
   2a574:	0085c83a 	sub	r2,zero,r2
   2a578:	f800283a 	ret
   2a57c:	014bc83a 	sub	r5,zero,r5
   2a580:	003fec06 	br	2a534 <__alt_data_end+0xfffea534>
   2a584:	0109c83a 	sub	r4,zero,r4
   2a588:	01c00044 	movi	r7,1
   2a58c:	003fe706 	br	2a52c <__alt_data_end+0xfffea52c>
   2a590:	00c00044 	movi	r3,1
   2a594:	003ff106 	br	2a55c <__alt_data_end+0xfffea55c>

0002a598 <__udivsi3>:
   2a598:	200d883a 	mov	r6,r4
   2a59c:	2900152e 	bgeu	r5,r4,2a5f4 <__udivsi3+0x5c>
   2a5a0:	28001416 	blt	r5,zero,2a5f4 <__udivsi3+0x5c>
   2a5a4:	00800804 	movi	r2,32
   2a5a8:	00c00044 	movi	r3,1
   2a5ac:	00000206 	br	2a5b8 <__udivsi3+0x20>
   2a5b0:	10000e26 	beq	r2,zero,2a5ec <__udivsi3+0x54>
   2a5b4:	28000516 	blt	r5,zero,2a5cc <__udivsi3+0x34>
   2a5b8:	294b883a 	add	r5,r5,r5
   2a5bc:	10bfffc4 	addi	r2,r2,-1
   2a5c0:	18c7883a 	add	r3,r3,r3
   2a5c4:	293ffa36 	bltu	r5,r4,2a5b0 <__alt_data_end+0xfffea5b0>
   2a5c8:	18000826 	beq	r3,zero,2a5ec <__udivsi3+0x54>
   2a5cc:	0005883a 	mov	r2,zero
   2a5d0:	31400236 	bltu	r6,r5,2a5dc <__udivsi3+0x44>
   2a5d4:	314dc83a 	sub	r6,r6,r5
   2a5d8:	10c4b03a 	or	r2,r2,r3
   2a5dc:	1806d07a 	srli	r3,r3,1
   2a5e0:	280ad07a 	srli	r5,r5,1
   2a5e4:	183ffa1e 	bne	r3,zero,2a5d0 <__alt_data_end+0xfffea5d0>
   2a5e8:	f800283a 	ret
   2a5ec:	0005883a 	mov	r2,zero
   2a5f0:	f800283a 	ret
   2a5f4:	00c00044 	movi	r3,1
   2a5f8:	003ff406 	br	2a5cc <__alt_data_end+0xfffea5cc>

0002a5fc <__umodsi3>:
   2a5fc:	2005883a 	mov	r2,r4
   2a600:	2900122e 	bgeu	r5,r4,2a64c <__umodsi3+0x50>
   2a604:	28001116 	blt	r5,zero,2a64c <__umodsi3+0x50>
   2a608:	01800804 	movi	r6,32
   2a60c:	00c00044 	movi	r3,1
   2a610:	00000206 	br	2a61c <__umodsi3+0x20>
   2a614:	30000c26 	beq	r6,zero,2a648 <__umodsi3+0x4c>
   2a618:	28000516 	blt	r5,zero,2a630 <__umodsi3+0x34>
   2a61c:	294b883a 	add	r5,r5,r5
   2a620:	31bfffc4 	addi	r6,r6,-1
   2a624:	18c7883a 	add	r3,r3,r3
   2a628:	293ffa36 	bltu	r5,r4,2a614 <__alt_data_end+0xfffea614>
   2a62c:	18000626 	beq	r3,zero,2a648 <__umodsi3+0x4c>
   2a630:	1806d07a 	srli	r3,r3,1
   2a634:	11400136 	bltu	r2,r5,2a63c <__umodsi3+0x40>
   2a638:	1145c83a 	sub	r2,r2,r5
   2a63c:	280ad07a 	srli	r5,r5,1
   2a640:	183ffb1e 	bne	r3,zero,2a630 <__alt_data_end+0xfffea630>
   2a644:	f800283a 	ret
   2a648:	f800283a 	ret
   2a64c:	00c00044 	movi	r3,1
   2a650:	003ff706 	br	2a630 <__alt_data_end+0xfffea630>

0002a654 <__adddf3>:
   2a654:	02c00434 	movhi	r11,16
   2a658:	5affffc4 	addi	r11,r11,-1
   2a65c:	2806d7fa 	srli	r3,r5,31
   2a660:	2ad4703a 	and	r10,r5,r11
   2a664:	3ad2703a 	and	r9,r7,r11
   2a668:	3804d53a 	srli	r2,r7,20
   2a66c:	3018d77a 	srli	r12,r6,29
   2a670:	280ad53a 	srli	r5,r5,20
   2a674:	501490fa 	slli	r10,r10,3
   2a678:	2010d77a 	srli	r8,r4,29
   2a67c:	481290fa 	slli	r9,r9,3
   2a680:	380ed7fa 	srli	r7,r7,31
   2a684:	defffb04 	addi	sp,sp,-20
   2a688:	dc800215 	stw	r18,8(sp)
   2a68c:	dc400115 	stw	r17,4(sp)
   2a690:	dc000015 	stw	r16,0(sp)
   2a694:	dfc00415 	stw	ra,16(sp)
   2a698:	dcc00315 	stw	r19,12(sp)
   2a69c:	1c803fcc 	andi	r18,r3,255
   2a6a0:	2c01ffcc 	andi	r16,r5,2047
   2a6a4:	5210b03a 	or	r8,r10,r8
   2a6a8:	202290fa 	slli	r17,r4,3
   2a6ac:	1081ffcc 	andi	r2,r2,2047
   2a6b0:	4b12b03a 	or	r9,r9,r12
   2a6b4:	300c90fa 	slli	r6,r6,3
   2a6b8:	91c07526 	beq	r18,r7,2a890 <__adddf3+0x23c>
   2a6bc:	8087c83a 	sub	r3,r16,r2
   2a6c0:	00c0ab0e 	bge	zero,r3,2a970 <__adddf3+0x31c>
   2a6c4:	10002a1e 	bne	r2,zero,2a770 <__adddf3+0x11c>
   2a6c8:	4984b03a 	or	r2,r9,r6
   2a6cc:	1000961e 	bne	r2,zero,2a928 <__adddf3+0x2d4>
   2a6d0:	888001cc 	andi	r2,r17,7
   2a6d4:	10000726 	beq	r2,zero,2a6f4 <__adddf3+0xa0>
   2a6d8:	888003cc 	andi	r2,r17,15
   2a6dc:	00c00104 	movi	r3,4
   2a6e0:	10c00426 	beq	r2,r3,2a6f4 <__adddf3+0xa0>
   2a6e4:	88c7883a 	add	r3,r17,r3
   2a6e8:	1c63803a 	cmpltu	r17,r3,r17
   2a6ec:	4451883a 	add	r8,r8,r17
   2a6f0:	1823883a 	mov	r17,r3
   2a6f4:	4080202c 	andhi	r2,r8,128
   2a6f8:	10005926 	beq	r2,zero,2a860 <__adddf3+0x20c>
   2a6fc:	84000044 	addi	r16,r16,1
   2a700:	0081ffc4 	movi	r2,2047
   2a704:	8080ba26 	beq	r16,r2,2a9f0 <__adddf3+0x39c>
   2a708:	00bfe034 	movhi	r2,65408
   2a70c:	10bfffc4 	addi	r2,r2,-1
   2a710:	4090703a 	and	r8,r8,r2
   2a714:	4004977a 	slli	r2,r8,29
   2a718:	4010927a 	slli	r8,r8,9
   2a71c:	8822d0fa 	srli	r17,r17,3
   2a720:	8401ffcc 	andi	r16,r16,2047
   2a724:	4010d33a 	srli	r8,r8,12
   2a728:	9007883a 	mov	r3,r18
   2a72c:	1444b03a 	or	r2,r2,r17
   2a730:	8401ffcc 	andi	r16,r16,2047
   2a734:	8020953a 	slli	r16,r16,20
   2a738:	18c03fcc 	andi	r3,r3,255
   2a73c:	01000434 	movhi	r4,16
   2a740:	213fffc4 	addi	r4,r4,-1
   2a744:	180697fa 	slli	r3,r3,31
   2a748:	4110703a 	and	r8,r8,r4
   2a74c:	4410b03a 	or	r8,r8,r16
   2a750:	40c6b03a 	or	r3,r8,r3
   2a754:	dfc00417 	ldw	ra,16(sp)
   2a758:	dcc00317 	ldw	r19,12(sp)
   2a75c:	dc800217 	ldw	r18,8(sp)
   2a760:	dc400117 	ldw	r17,4(sp)
   2a764:	dc000017 	ldw	r16,0(sp)
   2a768:	dec00504 	addi	sp,sp,20
   2a76c:	f800283a 	ret
   2a770:	0081ffc4 	movi	r2,2047
   2a774:	80bfd626 	beq	r16,r2,2a6d0 <__alt_data_end+0xfffea6d0>
   2a778:	4a402034 	orhi	r9,r9,128
   2a77c:	00800e04 	movi	r2,56
   2a780:	10c09f16 	blt	r2,r3,2aa00 <__adddf3+0x3ac>
   2a784:	008007c4 	movi	r2,31
   2a788:	10c0c216 	blt	r2,r3,2aa94 <__adddf3+0x440>
   2a78c:	00800804 	movi	r2,32
   2a790:	10c5c83a 	sub	r2,r2,r3
   2a794:	488a983a 	sll	r5,r9,r2
   2a798:	30c8d83a 	srl	r4,r6,r3
   2a79c:	3084983a 	sll	r2,r6,r2
   2a7a0:	48c6d83a 	srl	r3,r9,r3
   2a7a4:	290cb03a 	or	r6,r5,r4
   2a7a8:	1004c03a 	cmpne	r2,r2,zero
   2a7ac:	308cb03a 	or	r6,r6,r2
   2a7b0:	898dc83a 	sub	r6,r17,r6
   2a7b4:	89a3803a 	cmpltu	r17,r17,r6
   2a7b8:	40d1c83a 	sub	r8,r8,r3
   2a7bc:	4451c83a 	sub	r8,r8,r17
   2a7c0:	3023883a 	mov	r17,r6
   2a7c4:	4080202c 	andhi	r2,r8,128
   2a7c8:	10002326 	beq	r2,zero,2a858 <__adddf3+0x204>
   2a7cc:	04c02034 	movhi	r19,128
   2a7d0:	9cffffc4 	addi	r19,r19,-1
   2a7d4:	44e6703a 	and	r19,r8,r19
   2a7d8:	98007626 	beq	r19,zero,2a9b4 <__adddf3+0x360>
   2a7dc:	9809883a 	mov	r4,r19
   2a7e0:	002cc580 	call	2cc58 <__clzsi2>
   2a7e4:	10fffe04 	addi	r3,r2,-8
   2a7e8:	010007c4 	movi	r4,31
   2a7ec:	20c07716 	blt	r4,r3,2a9cc <__adddf3+0x378>
   2a7f0:	00800804 	movi	r2,32
   2a7f4:	10c5c83a 	sub	r2,r2,r3
   2a7f8:	8884d83a 	srl	r2,r17,r2
   2a7fc:	98d0983a 	sll	r8,r19,r3
   2a800:	88e2983a 	sll	r17,r17,r3
   2a804:	1204b03a 	or	r2,r2,r8
   2a808:	1c007416 	blt	r3,r16,2a9dc <__adddf3+0x388>
   2a80c:	1c21c83a 	sub	r16,r3,r16
   2a810:	82000044 	addi	r8,r16,1
   2a814:	00c007c4 	movi	r3,31
   2a818:	1a009116 	blt	r3,r8,2aa60 <__adddf3+0x40c>
   2a81c:	00c00804 	movi	r3,32
   2a820:	1a07c83a 	sub	r3,r3,r8
   2a824:	8a08d83a 	srl	r4,r17,r8
   2a828:	88e2983a 	sll	r17,r17,r3
   2a82c:	10c6983a 	sll	r3,r2,r3
   2a830:	1210d83a 	srl	r8,r2,r8
   2a834:	8804c03a 	cmpne	r2,r17,zero
   2a838:	1906b03a 	or	r3,r3,r4
   2a83c:	18a2b03a 	or	r17,r3,r2
   2a840:	0021883a 	mov	r16,zero
   2a844:	003fa206 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2a848:	1890b03a 	or	r8,r3,r2
   2a84c:	40017d26 	beq	r8,zero,2ae44 <__adddf3+0x7f0>
   2a850:	1011883a 	mov	r8,r2
   2a854:	1823883a 	mov	r17,r3
   2a858:	888001cc 	andi	r2,r17,7
   2a85c:	103f9e1e 	bne	r2,zero,2a6d8 <__alt_data_end+0xfffea6d8>
   2a860:	4004977a 	slli	r2,r8,29
   2a864:	8822d0fa 	srli	r17,r17,3
   2a868:	4010d0fa 	srli	r8,r8,3
   2a86c:	9007883a 	mov	r3,r18
   2a870:	1444b03a 	or	r2,r2,r17
   2a874:	0101ffc4 	movi	r4,2047
   2a878:	81002426 	beq	r16,r4,2a90c <__adddf3+0x2b8>
   2a87c:	8120703a 	and	r16,r16,r4
   2a880:	01000434 	movhi	r4,16
   2a884:	213fffc4 	addi	r4,r4,-1
   2a888:	4110703a 	and	r8,r8,r4
   2a88c:	003fa806 	br	2a730 <__alt_data_end+0xfffea730>
   2a890:	8089c83a 	sub	r4,r16,r2
   2a894:	01005e0e 	bge	zero,r4,2aa10 <__adddf3+0x3bc>
   2a898:	10002b26 	beq	r2,zero,2a948 <__adddf3+0x2f4>
   2a89c:	0081ffc4 	movi	r2,2047
   2a8a0:	80bf8b26 	beq	r16,r2,2a6d0 <__alt_data_end+0xfffea6d0>
   2a8a4:	4a402034 	orhi	r9,r9,128
   2a8a8:	00800e04 	movi	r2,56
   2a8ac:	1100a40e 	bge	r2,r4,2ab40 <__adddf3+0x4ec>
   2a8b0:	498cb03a 	or	r6,r9,r6
   2a8b4:	300ac03a 	cmpne	r5,r6,zero
   2a8b8:	0013883a 	mov	r9,zero
   2a8bc:	2c4b883a 	add	r5,r5,r17
   2a8c0:	2c63803a 	cmpltu	r17,r5,r17
   2a8c4:	4a11883a 	add	r8,r9,r8
   2a8c8:	8a11883a 	add	r8,r17,r8
   2a8cc:	2823883a 	mov	r17,r5
   2a8d0:	4080202c 	andhi	r2,r8,128
   2a8d4:	103fe026 	beq	r2,zero,2a858 <__alt_data_end+0xfffea858>
   2a8d8:	84000044 	addi	r16,r16,1
   2a8dc:	0081ffc4 	movi	r2,2047
   2a8e0:	8080d226 	beq	r16,r2,2ac2c <__adddf3+0x5d8>
   2a8e4:	00bfe034 	movhi	r2,65408
   2a8e8:	10bfffc4 	addi	r2,r2,-1
   2a8ec:	4090703a 	and	r8,r8,r2
   2a8f0:	880ad07a 	srli	r5,r17,1
   2a8f4:	400897fa 	slli	r4,r8,31
   2a8f8:	88c0004c 	andi	r3,r17,1
   2a8fc:	28e2b03a 	or	r17,r5,r3
   2a900:	4010d07a 	srli	r8,r8,1
   2a904:	2462b03a 	or	r17,r4,r17
   2a908:	003f7106 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2a90c:	4088b03a 	or	r4,r8,r2
   2a910:	20014526 	beq	r4,zero,2ae28 <__adddf3+0x7d4>
   2a914:	01000434 	movhi	r4,16
   2a918:	42000234 	orhi	r8,r8,8
   2a91c:	213fffc4 	addi	r4,r4,-1
   2a920:	4110703a 	and	r8,r8,r4
   2a924:	003f8206 	br	2a730 <__alt_data_end+0xfffea730>
   2a928:	18ffffc4 	addi	r3,r3,-1
   2a92c:	1800491e 	bne	r3,zero,2aa54 <__adddf3+0x400>
   2a930:	898bc83a 	sub	r5,r17,r6
   2a934:	8963803a 	cmpltu	r17,r17,r5
   2a938:	4251c83a 	sub	r8,r8,r9
   2a93c:	4451c83a 	sub	r8,r8,r17
   2a940:	2823883a 	mov	r17,r5
   2a944:	003f9f06 	br	2a7c4 <__alt_data_end+0xfffea7c4>
   2a948:	4984b03a 	or	r2,r9,r6
   2a94c:	103f6026 	beq	r2,zero,2a6d0 <__alt_data_end+0xfffea6d0>
   2a950:	213fffc4 	addi	r4,r4,-1
   2a954:	2000931e 	bne	r4,zero,2aba4 <__adddf3+0x550>
   2a958:	898d883a 	add	r6,r17,r6
   2a95c:	3463803a 	cmpltu	r17,r6,r17
   2a960:	4251883a 	add	r8,r8,r9
   2a964:	8a11883a 	add	r8,r17,r8
   2a968:	3023883a 	mov	r17,r6
   2a96c:	003fd806 	br	2a8d0 <__alt_data_end+0xfffea8d0>
   2a970:	1800541e 	bne	r3,zero,2aac4 <__adddf3+0x470>
   2a974:	80800044 	addi	r2,r16,1
   2a978:	1081ffcc 	andi	r2,r2,2047
   2a97c:	00c00044 	movi	r3,1
   2a980:	1880a00e 	bge	r3,r2,2ac04 <__adddf3+0x5b0>
   2a984:	8989c83a 	sub	r4,r17,r6
   2a988:	8905803a 	cmpltu	r2,r17,r4
   2a98c:	4267c83a 	sub	r19,r8,r9
   2a990:	98a7c83a 	sub	r19,r19,r2
   2a994:	9880202c 	andhi	r2,r19,128
   2a998:	10006326 	beq	r2,zero,2ab28 <__adddf3+0x4d4>
   2a99c:	3463c83a 	sub	r17,r6,r17
   2a9a0:	4a07c83a 	sub	r3,r9,r8
   2a9a4:	344d803a 	cmpltu	r6,r6,r17
   2a9a8:	19a7c83a 	sub	r19,r3,r6
   2a9ac:	3825883a 	mov	r18,r7
   2a9b0:	983f8a1e 	bne	r19,zero,2a7dc <__alt_data_end+0xfffea7dc>
   2a9b4:	8809883a 	mov	r4,r17
   2a9b8:	002cc580 	call	2cc58 <__clzsi2>
   2a9bc:	10800804 	addi	r2,r2,32
   2a9c0:	10fffe04 	addi	r3,r2,-8
   2a9c4:	010007c4 	movi	r4,31
   2a9c8:	20ff890e 	bge	r4,r3,2a7f0 <__alt_data_end+0xfffea7f0>
   2a9cc:	10bff604 	addi	r2,r2,-40
   2a9d0:	8884983a 	sll	r2,r17,r2
   2a9d4:	0023883a 	mov	r17,zero
   2a9d8:	1c3f8c0e 	bge	r3,r16,2a80c <__alt_data_end+0xfffea80c>
   2a9dc:	023fe034 	movhi	r8,65408
   2a9e0:	423fffc4 	addi	r8,r8,-1
   2a9e4:	80e1c83a 	sub	r16,r16,r3
   2a9e8:	1210703a 	and	r8,r2,r8
   2a9ec:	003f3806 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2a9f0:	9007883a 	mov	r3,r18
   2a9f4:	0011883a 	mov	r8,zero
   2a9f8:	0005883a 	mov	r2,zero
   2a9fc:	003f4c06 	br	2a730 <__alt_data_end+0xfffea730>
   2aa00:	498cb03a 	or	r6,r9,r6
   2aa04:	300cc03a 	cmpne	r6,r6,zero
   2aa08:	0007883a 	mov	r3,zero
   2aa0c:	003f6806 	br	2a7b0 <__alt_data_end+0xfffea7b0>
   2aa10:	20009c1e 	bne	r4,zero,2ac84 <__adddf3+0x630>
   2aa14:	80800044 	addi	r2,r16,1
   2aa18:	1141ffcc 	andi	r5,r2,2047
   2aa1c:	01000044 	movi	r4,1
   2aa20:	2140670e 	bge	r4,r5,2abc0 <__adddf3+0x56c>
   2aa24:	0101ffc4 	movi	r4,2047
   2aa28:	11007f26 	beq	r2,r4,2ac28 <__adddf3+0x5d4>
   2aa2c:	898d883a 	add	r6,r17,r6
   2aa30:	4247883a 	add	r3,r8,r9
   2aa34:	3451803a 	cmpltu	r8,r6,r17
   2aa38:	40d1883a 	add	r8,r8,r3
   2aa3c:	402297fa 	slli	r17,r8,31
   2aa40:	300cd07a 	srli	r6,r6,1
   2aa44:	4010d07a 	srli	r8,r8,1
   2aa48:	1021883a 	mov	r16,r2
   2aa4c:	89a2b03a 	or	r17,r17,r6
   2aa50:	003f1f06 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2aa54:	0081ffc4 	movi	r2,2047
   2aa58:	80bf481e 	bne	r16,r2,2a77c <__alt_data_end+0xfffea77c>
   2aa5c:	003f1c06 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2aa60:	843ff844 	addi	r16,r16,-31
   2aa64:	01000804 	movi	r4,32
   2aa68:	1406d83a 	srl	r3,r2,r16
   2aa6c:	41005026 	beq	r8,r4,2abb0 <__adddf3+0x55c>
   2aa70:	01001004 	movi	r4,64
   2aa74:	2211c83a 	sub	r8,r4,r8
   2aa78:	1204983a 	sll	r2,r2,r8
   2aa7c:	88a2b03a 	or	r17,r17,r2
   2aa80:	8822c03a 	cmpne	r17,r17,zero
   2aa84:	1c62b03a 	or	r17,r3,r17
   2aa88:	0011883a 	mov	r8,zero
   2aa8c:	0021883a 	mov	r16,zero
   2aa90:	003f7106 	br	2a858 <__alt_data_end+0xfffea858>
   2aa94:	193ff804 	addi	r4,r3,-32
   2aa98:	00800804 	movi	r2,32
   2aa9c:	4908d83a 	srl	r4,r9,r4
   2aaa0:	18804526 	beq	r3,r2,2abb8 <__adddf3+0x564>
   2aaa4:	00801004 	movi	r2,64
   2aaa8:	10c5c83a 	sub	r2,r2,r3
   2aaac:	4886983a 	sll	r3,r9,r2
   2aab0:	198cb03a 	or	r6,r3,r6
   2aab4:	300cc03a 	cmpne	r6,r6,zero
   2aab8:	218cb03a 	or	r6,r4,r6
   2aabc:	0007883a 	mov	r3,zero
   2aac0:	003f3b06 	br	2a7b0 <__alt_data_end+0xfffea7b0>
   2aac4:	80002a26 	beq	r16,zero,2ab70 <__adddf3+0x51c>
   2aac8:	0101ffc4 	movi	r4,2047
   2aacc:	11006826 	beq	r2,r4,2ac70 <__adddf3+0x61c>
   2aad0:	00c7c83a 	sub	r3,zero,r3
   2aad4:	42002034 	orhi	r8,r8,128
   2aad8:	01000e04 	movi	r4,56
   2aadc:	20c07c16 	blt	r4,r3,2acd0 <__adddf3+0x67c>
   2aae0:	010007c4 	movi	r4,31
   2aae4:	20c0da16 	blt	r4,r3,2ae50 <__adddf3+0x7fc>
   2aae8:	01000804 	movi	r4,32
   2aaec:	20c9c83a 	sub	r4,r4,r3
   2aaf0:	4114983a 	sll	r10,r8,r4
   2aaf4:	88cad83a 	srl	r5,r17,r3
   2aaf8:	8908983a 	sll	r4,r17,r4
   2aafc:	40c6d83a 	srl	r3,r8,r3
   2ab00:	5162b03a 	or	r17,r10,r5
   2ab04:	2008c03a 	cmpne	r4,r4,zero
   2ab08:	8922b03a 	or	r17,r17,r4
   2ab0c:	3463c83a 	sub	r17,r6,r17
   2ab10:	48c7c83a 	sub	r3,r9,r3
   2ab14:	344d803a 	cmpltu	r6,r6,r17
   2ab18:	1991c83a 	sub	r8,r3,r6
   2ab1c:	1021883a 	mov	r16,r2
   2ab20:	3825883a 	mov	r18,r7
   2ab24:	003f2706 	br	2a7c4 <__alt_data_end+0xfffea7c4>
   2ab28:	24d0b03a 	or	r8,r4,r19
   2ab2c:	40001b1e 	bne	r8,zero,2ab9c <__adddf3+0x548>
   2ab30:	0005883a 	mov	r2,zero
   2ab34:	0007883a 	mov	r3,zero
   2ab38:	0021883a 	mov	r16,zero
   2ab3c:	003f4d06 	br	2a874 <__alt_data_end+0xfffea874>
   2ab40:	008007c4 	movi	r2,31
   2ab44:	11003c16 	blt	r2,r4,2ac38 <__adddf3+0x5e4>
   2ab48:	00800804 	movi	r2,32
   2ab4c:	1105c83a 	sub	r2,r2,r4
   2ab50:	488e983a 	sll	r7,r9,r2
   2ab54:	310ad83a 	srl	r5,r6,r4
   2ab58:	3084983a 	sll	r2,r6,r2
   2ab5c:	4912d83a 	srl	r9,r9,r4
   2ab60:	394ab03a 	or	r5,r7,r5
   2ab64:	1004c03a 	cmpne	r2,r2,zero
   2ab68:	288ab03a 	or	r5,r5,r2
   2ab6c:	003f5306 	br	2a8bc <__alt_data_end+0xfffea8bc>
   2ab70:	4448b03a 	or	r4,r8,r17
   2ab74:	20003e26 	beq	r4,zero,2ac70 <__adddf3+0x61c>
   2ab78:	00c6303a 	nor	r3,zero,r3
   2ab7c:	18003a1e 	bne	r3,zero,2ac68 <__adddf3+0x614>
   2ab80:	3463c83a 	sub	r17,r6,r17
   2ab84:	4a07c83a 	sub	r3,r9,r8
   2ab88:	344d803a 	cmpltu	r6,r6,r17
   2ab8c:	1991c83a 	sub	r8,r3,r6
   2ab90:	1021883a 	mov	r16,r2
   2ab94:	3825883a 	mov	r18,r7
   2ab98:	003f0a06 	br	2a7c4 <__alt_data_end+0xfffea7c4>
   2ab9c:	2023883a 	mov	r17,r4
   2aba0:	003f0d06 	br	2a7d8 <__alt_data_end+0xfffea7d8>
   2aba4:	0081ffc4 	movi	r2,2047
   2aba8:	80bf3f1e 	bne	r16,r2,2a8a8 <__alt_data_end+0xfffea8a8>
   2abac:	003ec806 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2abb0:	0005883a 	mov	r2,zero
   2abb4:	003fb106 	br	2aa7c <__alt_data_end+0xfffeaa7c>
   2abb8:	0007883a 	mov	r3,zero
   2abbc:	003fbc06 	br	2aab0 <__alt_data_end+0xfffeaab0>
   2abc0:	4444b03a 	or	r2,r8,r17
   2abc4:	8000871e 	bne	r16,zero,2ade4 <__adddf3+0x790>
   2abc8:	1000ba26 	beq	r2,zero,2aeb4 <__adddf3+0x860>
   2abcc:	4984b03a 	or	r2,r9,r6
   2abd0:	103ebf26 	beq	r2,zero,2a6d0 <__alt_data_end+0xfffea6d0>
   2abd4:	8985883a 	add	r2,r17,r6
   2abd8:	4247883a 	add	r3,r8,r9
   2abdc:	1451803a 	cmpltu	r8,r2,r17
   2abe0:	40d1883a 	add	r8,r8,r3
   2abe4:	40c0202c 	andhi	r3,r8,128
   2abe8:	1023883a 	mov	r17,r2
   2abec:	183f1a26 	beq	r3,zero,2a858 <__alt_data_end+0xfffea858>
   2abf0:	00bfe034 	movhi	r2,65408
   2abf4:	10bfffc4 	addi	r2,r2,-1
   2abf8:	2021883a 	mov	r16,r4
   2abfc:	4090703a 	and	r8,r8,r2
   2ac00:	003eb306 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2ac04:	4444b03a 	or	r2,r8,r17
   2ac08:	8000291e 	bne	r16,zero,2acb0 <__adddf3+0x65c>
   2ac0c:	10004b1e 	bne	r2,zero,2ad3c <__adddf3+0x6e8>
   2ac10:	4990b03a 	or	r8,r9,r6
   2ac14:	40008b26 	beq	r8,zero,2ae44 <__adddf3+0x7f0>
   2ac18:	4811883a 	mov	r8,r9
   2ac1c:	3023883a 	mov	r17,r6
   2ac20:	3825883a 	mov	r18,r7
   2ac24:	003eaa06 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2ac28:	1021883a 	mov	r16,r2
   2ac2c:	0011883a 	mov	r8,zero
   2ac30:	0005883a 	mov	r2,zero
   2ac34:	003f0f06 	br	2a874 <__alt_data_end+0xfffea874>
   2ac38:	217ff804 	addi	r5,r4,-32
   2ac3c:	00800804 	movi	r2,32
   2ac40:	494ad83a 	srl	r5,r9,r5
   2ac44:	20807d26 	beq	r4,r2,2ae3c <__adddf3+0x7e8>
   2ac48:	00801004 	movi	r2,64
   2ac4c:	1109c83a 	sub	r4,r2,r4
   2ac50:	4912983a 	sll	r9,r9,r4
   2ac54:	498cb03a 	or	r6,r9,r6
   2ac58:	300cc03a 	cmpne	r6,r6,zero
   2ac5c:	298ab03a 	or	r5,r5,r6
   2ac60:	0013883a 	mov	r9,zero
   2ac64:	003f1506 	br	2a8bc <__alt_data_end+0xfffea8bc>
   2ac68:	0101ffc4 	movi	r4,2047
   2ac6c:	113f9a1e 	bne	r2,r4,2aad8 <__alt_data_end+0xfffeaad8>
   2ac70:	4811883a 	mov	r8,r9
   2ac74:	3023883a 	mov	r17,r6
   2ac78:	1021883a 	mov	r16,r2
   2ac7c:	3825883a 	mov	r18,r7
   2ac80:	003e9306 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2ac84:	8000161e 	bne	r16,zero,2ace0 <__adddf3+0x68c>
   2ac88:	444ab03a 	or	r5,r8,r17
   2ac8c:	28005126 	beq	r5,zero,2add4 <__adddf3+0x780>
   2ac90:	0108303a 	nor	r4,zero,r4
   2ac94:	20004d1e 	bne	r4,zero,2adcc <__adddf3+0x778>
   2ac98:	89a3883a 	add	r17,r17,r6
   2ac9c:	4253883a 	add	r9,r8,r9
   2aca0:	898d803a 	cmpltu	r6,r17,r6
   2aca4:	3251883a 	add	r8,r6,r9
   2aca8:	1021883a 	mov	r16,r2
   2acac:	003f0806 	br	2a8d0 <__alt_data_end+0xfffea8d0>
   2acb0:	1000301e 	bne	r2,zero,2ad74 <__adddf3+0x720>
   2acb4:	4984b03a 	or	r2,r9,r6
   2acb8:	10007126 	beq	r2,zero,2ae80 <__adddf3+0x82c>
   2acbc:	4811883a 	mov	r8,r9
   2acc0:	3023883a 	mov	r17,r6
   2acc4:	3825883a 	mov	r18,r7
   2acc8:	0401ffc4 	movi	r16,2047
   2accc:	003e8006 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2acd0:	4462b03a 	or	r17,r8,r17
   2acd4:	8822c03a 	cmpne	r17,r17,zero
   2acd8:	0007883a 	mov	r3,zero
   2acdc:	003f8b06 	br	2ab0c <__alt_data_end+0xfffeab0c>
   2ace0:	0141ffc4 	movi	r5,2047
   2ace4:	11403b26 	beq	r2,r5,2add4 <__adddf3+0x780>
   2ace8:	0109c83a 	sub	r4,zero,r4
   2acec:	42002034 	orhi	r8,r8,128
   2acf0:	01400e04 	movi	r5,56
   2acf4:	29006716 	blt	r5,r4,2ae94 <__adddf3+0x840>
   2acf8:	014007c4 	movi	r5,31
   2acfc:	29007016 	blt	r5,r4,2aec0 <__adddf3+0x86c>
   2ad00:	01400804 	movi	r5,32
   2ad04:	290bc83a 	sub	r5,r5,r4
   2ad08:	4154983a 	sll	r10,r8,r5
   2ad0c:	890ed83a 	srl	r7,r17,r4
   2ad10:	894a983a 	sll	r5,r17,r5
   2ad14:	4108d83a 	srl	r4,r8,r4
   2ad18:	51e2b03a 	or	r17,r10,r7
   2ad1c:	280ac03a 	cmpne	r5,r5,zero
   2ad20:	8962b03a 	or	r17,r17,r5
   2ad24:	89a3883a 	add	r17,r17,r6
   2ad28:	2253883a 	add	r9,r4,r9
   2ad2c:	898d803a 	cmpltu	r6,r17,r6
   2ad30:	3251883a 	add	r8,r6,r9
   2ad34:	1021883a 	mov	r16,r2
   2ad38:	003ee506 	br	2a8d0 <__alt_data_end+0xfffea8d0>
   2ad3c:	4984b03a 	or	r2,r9,r6
   2ad40:	103e6326 	beq	r2,zero,2a6d0 <__alt_data_end+0xfffea6d0>
   2ad44:	8987c83a 	sub	r3,r17,r6
   2ad48:	88c9803a 	cmpltu	r4,r17,r3
   2ad4c:	4245c83a 	sub	r2,r8,r9
   2ad50:	1105c83a 	sub	r2,r2,r4
   2ad54:	1100202c 	andhi	r4,r2,128
   2ad58:	203ebb26 	beq	r4,zero,2a848 <__alt_data_end+0xfffea848>
   2ad5c:	3463c83a 	sub	r17,r6,r17
   2ad60:	4a07c83a 	sub	r3,r9,r8
   2ad64:	344d803a 	cmpltu	r6,r6,r17
   2ad68:	1991c83a 	sub	r8,r3,r6
   2ad6c:	3825883a 	mov	r18,r7
   2ad70:	003e5706 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2ad74:	4984b03a 	or	r2,r9,r6
   2ad78:	10002e26 	beq	r2,zero,2ae34 <__adddf3+0x7e0>
   2ad7c:	4004d0fa 	srli	r2,r8,3
   2ad80:	8822d0fa 	srli	r17,r17,3
   2ad84:	4010977a 	slli	r8,r8,29
   2ad88:	10c0022c 	andhi	r3,r2,8
   2ad8c:	4462b03a 	or	r17,r8,r17
   2ad90:	18000826 	beq	r3,zero,2adb4 <__adddf3+0x760>
   2ad94:	4808d0fa 	srli	r4,r9,3
   2ad98:	20c0022c 	andhi	r3,r4,8
   2ad9c:	1800051e 	bne	r3,zero,2adb4 <__adddf3+0x760>
   2ada0:	300cd0fa 	srli	r6,r6,3
   2ada4:	4806977a 	slli	r3,r9,29
   2ada8:	2005883a 	mov	r2,r4
   2adac:	3825883a 	mov	r18,r7
   2adb0:	19a2b03a 	or	r17,r3,r6
   2adb4:	8810d77a 	srli	r8,r17,29
   2adb8:	100490fa 	slli	r2,r2,3
   2adbc:	882290fa 	slli	r17,r17,3
   2adc0:	0401ffc4 	movi	r16,2047
   2adc4:	4090b03a 	or	r8,r8,r2
   2adc8:	003e4106 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2adcc:	0141ffc4 	movi	r5,2047
   2add0:	117fc71e 	bne	r2,r5,2acf0 <__alt_data_end+0xfffeacf0>
   2add4:	4811883a 	mov	r8,r9
   2add8:	3023883a 	mov	r17,r6
   2addc:	1021883a 	mov	r16,r2
   2ade0:	003e3b06 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2ade4:	10002f26 	beq	r2,zero,2aea4 <__adddf3+0x850>
   2ade8:	4984b03a 	or	r2,r9,r6
   2adec:	10001126 	beq	r2,zero,2ae34 <__adddf3+0x7e0>
   2adf0:	4004d0fa 	srli	r2,r8,3
   2adf4:	8822d0fa 	srli	r17,r17,3
   2adf8:	4010977a 	slli	r8,r8,29
   2adfc:	10c0022c 	andhi	r3,r2,8
   2ae00:	4462b03a 	or	r17,r8,r17
   2ae04:	183feb26 	beq	r3,zero,2adb4 <__alt_data_end+0xfffeadb4>
   2ae08:	4808d0fa 	srli	r4,r9,3
   2ae0c:	20c0022c 	andhi	r3,r4,8
   2ae10:	183fe81e 	bne	r3,zero,2adb4 <__alt_data_end+0xfffeadb4>
   2ae14:	300cd0fa 	srli	r6,r6,3
   2ae18:	4806977a 	slli	r3,r9,29
   2ae1c:	2005883a 	mov	r2,r4
   2ae20:	19a2b03a 	or	r17,r3,r6
   2ae24:	003fe306 	br	2adb4 <__alt_data_end+0xfffeadb4>
   2ae28:	0011883a 	mov	r8,zero
   2ae2c:	0005883a 	mov	r2,zero
   2ae30:	003e3f06 	br	2a730 <__alt_data_end+0xfffea730>
   2ae34:	0401ffc4 	movi	r16,2047
   2ae38:	003e2506 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2ae3c:	0013883a 	mov	r9,zero
   2ae40:	003f8406 	br	2ac54 <__alt_data_end+0xfffeac54>
   2ae44:	0005883a 	mov	r2,zero
   2ae48:	0007883a 	mov	r3,zero
   2ae4c:	003e8906 	br	2a874 <__alt_data_end+0xfffea874>
   2ae50:	197ff804 	addi	r5,r3,-32
   2ae54:	01000804 	movi	r4,32
   2ae58:	414ad83a 	srl	r5,r8,r5
   2ae5c:	19002426 	beq	r3,r4,2aef0 <__adddf3+0x89c>
   2ae60:	01001004 	movi	r4,64
   2ae64:	20c7c83a 	sub	r3,r4,r3
   2ae68:	40c6983a 	sll	r3,r8,r3
   2ae6c:	1c46b03a 	or	r3,r3,r17
   2ae70:	1806c03a 	cmpne	r3,r3,zero
   2ae74:	28e2b03a 	or	r17,r5,r3
   2ae78:	0007883a 	mov	r3,zero
   2ae7c:	003f2306 	br	2ab0c <__alt_data_end+0xfffeab0c>
   2ae80:	0007883a 	mov	r3,zero
   2ae84:	5811883a 	mov	r8,r11
   2ae88:	00bfffc4 	movi	r2,-1
   2ae8c:	0401ffc4 	movi	r16,2047
   2ae90:	003e7806 	br	2a874 <__alt_data_end+0xfffea874>
   2ae94:	4462b03a 	or	r17,r8,r17
   2ae98:	8822c03a 	cmpne	r17,r17,zero
   2ae9c:	0009883a 	mov	r4,zero
   2aea0:	003fa006 	br	2ad24 <__alt_data_end+0xfffead24>
   2aea4:	4811883a 	mov	r8,r9
   2aea8:	3023883a 	mov	r17,r6
   2aeac:	0401ffc4 	movi	r16,2047
   2aeb0:	003e0706 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2aeb4:	4811883a 	mov	r8,r9
   2aeb8:	3023883a 	mov	r17,r6
   2aebc:	003e0406 	br	2a6d0 <__alt_data_end+0xfffea6d0>
   2aec0:	21fff804 	addi	r7,r4,-32
   2aec4:	01400804 	movi	r5,32
   2aec8:	41ced83a 	srl	r7,r8,r7
   2aecc:	21400a26 	beq	r4,r5,2aef8 <__adddf3+0x8a4>
   2aed0:	01401004 	movi	r5,64
   2aed4:	2909c83a 	sub	r4,r5,r4
   2aed8:	4108983a 	sll	r4,r8,r4
   2aedc:	2448b03a 	or	r4,r4,r17
   2aee0:	2008c03a 	cmpne	r4,r4,zero
   2aee4:	3922b03a 	or	r17,r7,r4
   2aee8:	0009883a 	mov	r4,zero
   2aeec:	003f8d06 	br	2ad24 <__alt_data_end+0xfffead24>
   2aef0:	0007883a 	mov	r3,zero
   2aef4:	003fdd06 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2aef8:	0009883a 	mov	r4,zero
   2aefc:	003ff706 	br	2aedc <__alt_data_end+0xfffeaedc>

0002af00 <__divdf3>:
   2af00:	defff204 	addi	sp,sp,-56
   2af04:	dd400915 	stw	r21,36(sp)
   2af08:	282ad53a 	srli	r21,r5,20
   2af0c:	dd000815 	stw	r20,32(sp)
   2af10:	2828d7fa 	srli	r20,r5,31
   2af14:	dc000415 	stw	r16,16(sp)
   2af18:	04000434 	movhi	r16,16
   2af1c:	df000c15 	stw	fp,48(sp)
   2af20:	843fffc4 	addi	r16,r16,-1
   2af24:	dfc00d15 	stw	ra,52(sp)
   2af28:	ddc00b15 	stw	r23,44(sp)
   2af2c:	dd800a15 	stw	r22,40(sp)
   2af30:	dcc00715 	stw	r19,28(sp)
   2af34:	dc800615 	stw	r18,24(sp)
   2af38:	dc400515 	stw	r17,20(sp)
   2af3c:	ad41ffcc 	andi	r21,r21,2047
   2af40:	2c20703a 	and	r16,r5,r16
   2af44:	a7003fcc 	andi	fp,r20,255
   2af48:	a8006126 	beq	r21,zero,2b0d0 <__divdf3+0x1d0>
   2af4c:	0081ffc4 	movi	r2,2047
   2af50:	2025883a 	mov	r18,r4
   2af54:	a8803726 	beq	r21,r2,2b034 <__divdf3+0x134>
   2af58:	80800434 	orhi	r2,r16,16
   2af5c:	100490fa 	slli	r2,r2,3
   2af60:	2020d77a 	srli	r16,r4,29
   2af64:	202490fa 	slli	r18,r4,3
   2af68:	ad7f0044 	addi	r21,r21,-1023
   2af6c:	80a0b03a 	or	r16,r16,r2
   2af70:	0027883a 	mov	r19,zero
   2af74:	0013883a 	mov	r9,zero
   2af78:	3804d53a 	srli	r2,r7,20
   2af7c:	382cd7fa 	srli	r22,r7,31
   2af80:	04400434 	movhi	r17,16
   2af84:	8c7fffc4 	addi	r17,r17,-1
   2af88:	1081ffcc 	andi	r2,r2,2047
   2af8c:	3011883a 	mov	r8,r6
   2af90:	3c62703a 	and	r17,r7,r17
   2af94:	b5c03fcc 	andi	r23,r22,255
   2af98:	10006c26 	beq	r2,zero,2b14c <__divdf3+0x24c>
   2af9c:	00c1ffc4 	movi	r3,2047
   2afa0:	10c06426 	beq	r2,r3,2b134 <__divdf3+0x234>
   2afa4:	88c00434 	orhi	r3,r17,16
   2afa8:	180690fa 	slli	r3,r3,3
   2afac:	3022d77a 	srli	r17,r6,29
   2afb0:	301090fa 	slli	r8,r6,3
   2afb4:	10bf0044 	addi	r2,r2,-1023
   2afb8:	88e2b03a 	or	r17,r17,r3
   2afbc:	000f883a 	mov	r7,zero
   2afc0:	a58cf03a 	xor	r6,r20,r22
   2afc4:	3cc8b03a 	or	r4,r7,r19
   2afc8:	a8abc83a 	sub	r21,r21,r2
   2afcc:	008003c4 	movi	r2,15
   2afd0:	3007883a 	mov	r3,r6
   2afd4:	34c03fcc 	andi	r19,r6,255
   2afd8:	11009036 	bltu	r2,r4,2b21c <__divdf3+0x31c>
   2afdc:	200890ba 	slli	r4,r4,2
   2afe0:	008000f4 	movhi	r2,3
   2afe4:	10abfd04 	addi	r2,r2,-20492
   2afe8:	2089883a 	add	r4,r4,r2
   2afec:	20800017 	ldw	r2,0(r4)
   2aff0:	1000683a 	jmp	r2
   2aff4:	0002b21c 	xori	zero,zero,2760
   2aff8:	0002b06c 	andhi	zero,zero,2753
   2affc:	0002b20c 	andi	zero,zero,2760
   2b000:	0002b060 	cmpeqi	zero,zero,2753
   2b004:	0002b20c 	andi	zero,zero,2760
   2b008:	0002b1e0 	cmpeqi	zero,zero,2759
   2b00c:	0002b20c 	andi	zero,zero,2760
   2b010:	0002b060 	cmpeqi	zero,zero,2753
   2b014:	0002b06c 	andhi	zero,zero,2753
   2b018:	0002b06c 	andhi	zero,zero,2753
   2b01c:	0002b1e0 	cmpeqi	zero,zero,2759
   2b020:	0002b060 	cmpeqi	zero,zero,2753
   2b024:	0002b050 	cmplti	zero,zero,2753
   2b028:	0002b050 	cmplti	zero,zero,2753
   2b02c:	0002b050 	cmplti	zero,zero,2753
   2b030:	0002b500 	call	2b50 <__alt_mem_onchip_memory_nios2_FFT-0x1d4b0>
   2b034:	2404b03a 	or	r2,r4,r16
   2b038:	1000661e 	bne	r2,zero,2b1d4 <__divdf3+0x2d4>
   2b03c:	04c00204 	movi	r19,8
   2b040:	0021883a 	mov	r16,zero
   2b044:	0025883a 	mov	r18,zero
   2b048:	02400084 	movi	r9,2
   2b04c:	003fca06 	br	2af78 <__alt_data_end+0xfffeaf78>
   2b050:	8023883a 	mov	r17,r16
   2b054:	9011883a 	mov	r8,r18
   2b058:	e02f883a 	mov	r23,fp
   2b05c:	480f883a 	mov	r7,r9
   2b060:	00800084 	movi	r2,2
   2b064:	3881311e 	bne	r7,r2,2b52c <__divdf3+0x62c>
   2b068:	b827883a 	mov	r19,r23
   2b06c:	98c0004c 	andi	r3,r19,1
   2b070:	0081ffc4 	movi	r2,2047
   2b074:	000b883a 	mov	r5,zero
   2b078:	0025883a 	mov	r18,zero
   2b07c:	1004953a 	slli	r2,r2,20
   2b080:	18c03fcc 	andi	r3,r3,255
   2b084:	04400434 	movhi	r17,16
   2b088:	8c7fffc4 	addi	r17,r17,-1
   2b08c:	180697fa 	slli	r3,r3,31
   2b090:	2c4a703a 	and	r5,r5,r17
   2b094:	288ab03a 	or	r5,r5,r2
   2b098:	28c6b03a 	or	r3,r5,r3
   2b09c:	9005883a 	mov	r2,r18
   2b0a0:	dfc00d17 	ldw	ra,52(sp)
   2b0a4:	df000c17 	ldw	fp,48(sp)
   2b0a8:	ddc00b17 	ldw	r23,44(sp)
   2b0ac:	dd800a17 	ldw	r22,40(sp)
   2b0b0:	dd400917 	ldw	r21,36(sp)
   2b0b4:	dd000817 	ldw	r20,32(sp)
   2b0b8:	dcc00717 	ldw	r19,28(sp)
   2b0bc:	dc800617 	ldw	r18,24(sp)
   2b0c0:	dc400517 	ldw	r17,20(sp)
   2b0c4:	dc000417 	ldw	r16,16(sp)
   2b0c8:	dec00e04 	addi	sp,sp,56
   2b0cc:	f800283a 	ret
   2b0d0:	2404b03a 	or	r2,r4,r16
   2b0d4:	2027883a 	mov	r19,r4
   2b0d8:	10003926 	beq	r2,zero,2b1c0 <__divdf3+0x2c0>
   2b0dc:	80012e26 	beq	r16,zero,2b598 <__divdf3+0x698>
   2b0e0:	8009883a 	mov	r4,r16
   2b0e4:	d9800315 	stw	r6,12(sp)
   2b0e8:	d9c00215 	stw	r7,8(sp)
   2b0ec:	002cc580 	call	2cc58 <__clzsi2>
   2b0f0:	d9800317 	ldw	r6,12(sp)
   2b0f4:	d9c00217 	ldw	r7,8(sp)
   2b0f8:	113ffd44 	addi	r4,r2,-11
   2b0fc:	00c00704 	movi	r3,28
   2b100:	19012116 	blt	r3,r4,2b588 <__divdf3+0x688>
   2b104:	00c00744 	movi	r3,29
   2b108:	147ffe04 	addi	r17,r2,-8
   2b10c:	1907c83a 	sub	r3,r3,r4
   2b110:	8460983a 	sll	r16,r16,r17
   2b114:	98c6d83a 	srl	r3,r19,r3
   2b118:	9c64983a 	sll	r18,r19,r17
   2b11c:	1c20b03a 	or	r16,r3,r16
   2b120:	1080fcc4 	addi	r2,r2,1011
   2b124:	00abc83a 	sub	r21,zero,r2
   2b128:	0027883a 	mov	r19,zero
   2b12c:	0013883a 	mov	r9,zero
   2b130:	003f9106 	br	2af78 <__alt_data_end+0xfffeaf78>
   2b134:	3446b03a 	or	r3,r6,r17
   2b138:	18001f1e 	bne	r3,zero,2b1b8 <__divdf3+0x2b8>
   2b13c:	0023883a 	mov	r17,zero
   2b140:	0011883a 	mov	r8,zero
   2b144:	01c00084 	movi	r7,2
   2b148:	003f9d06 	br	2afc0 <__alt_data_end+0xfffeafc0>
   2b14c:	3446b03a 	or	r3,r6,r17
   2b150:	18001526 	beq	r3,zero,2b1a8 <__divdf3+0x2a8>
   2b154:	88011b26 	beq	r17,zero,2b5c4 <__divdf3+0x6c4>
   2b158:	8809883a 	mov	r4,r17
   2b15c:	d9800315 	stw	r6,12(sp)
   2b160:	da400115 	stw	r9,4(sp)
   2b164:	002cc580 	call	2cc58 <__clzsi2>
   2b168:	d9800317 	ldw	r6,12(sp)
   2b16c:	da400117 	ldw	r9,4(sp)
   2b170:	113ffd44 	addi	r4,r2,-11
   2b174:	00c00704 	movi	r3,28
   2b178:	19010e16 	blt	r3,r4,2b5b4 <__divdf3+0x6b4>
   2b17c:	00c00744 	movi	r3,29
   2b180:	123ffe04 	addi	r8,r2,-8
   2b184:	1907c83a 	sub	r3,r3,r4
   2b188:	8a22983a 	sll	r17,r17,r8
   2b18c:	30c6d83a 	srl	r3,r6,r3
   2b190:	3210983a 	sll	r8,r6,r8
   2b194:	1c62b03a 	or	r17,r3,r17
   2b198:	1080fcc4 	addi	r2,r2,1011
   2b19c:	0085c83a 	sub	r2,zero,r2
   2b1a0:	000f883a 	mov	r7,zero
   2b1a4:	003f8606 	br	2afc0 <__alt_data_end+0xfffeafc0>
   2b1a8:	0023883a 	mov	r17,zero
   2b1ac:	0011883a 	mov	r8,zero
   2b1b0:	01c00044 	movi	r7,1
   2b1b4:	003f8206 	br	2afc0 <__alt_data_end+0xfffeafc0>
   2b1b8:	01c000c4 	movi	r7,3
   2b1bc:	003f8006 	br	2afc0 <__alt_data_end+0xfffeafc0>
   2b1c0:	04c00104 	movi	r19,4
   2b1c4:	0021883a 	mov	r16,zero
   2b1c8:	0025883a 	mov	r18,zero
   2b1cc:	02400044 	movi	r9,1
   2b1d0:	003f6906 	br	2af78 <__alt_data_end+0xfffeaf78>
   2b1d4:	04c00304 	movi	r19,12
   2b1d8:	024000c4 	movi	r9,3
   2b1dc:	003f6606 	br	2af78 <__alt_data_end+0xfffeaf78>
   2b1e0:	01400434 	movhi	r5,16
   2b1e4:	0007883a 	mov	r3,zero
   2b1e8:	297fffc4 	addi	r5,r5,-1
   2b1ec:	04bfffc4 	movi	r18,-1
   2b1f0:	0081ffc4 	movi	r2,2047
   2b1f4:	003fa106 	br	2b07c <__alt_data_end+0xfffeb07c>
   2b1f8:	00c00044 	movi	r3,1
   2b1fc:	1887c83a 	sub	r3,r3,r2
   2b200:	01000e04 	movi	r4,56
   2b204:	20c1210e 	bge	r4,r3,2b68c <__divdf3+0x78c>
   2b208:	98c0004c 	andi	r3,r19,1
   2b20c:	0005883a 	mov	r2,zero
   2b210:	000b883a 	mov	r5,zero
   2b214:	0025883a 	mov	r18,zero
   2b218:	003f9806 	br	2b07c <__alt_data_end+0xfffeb07c>
   2b21c:	8c00fd36 	bltu	r17,r16,2b614 <__divdf3+0x714>
   2b220:	8440fb26 	beq	r16,r17,2b610 <__divdf3+0x710>
   2b224:	8007883a 	mov	r3,r16
   2b228:	ad7fffc4 	addi	r21,r21,-1
   2b22c:	0021883a 	mov	r16,zero
   2b230:	4004d63a 	srli	r2,r8,24
   2b234:	8822923a 	slli	r17,r17,8
   2b238:	1809883a 	mov	r4,r3
   2b23c:	402c923a 	slli	r22,r8,8
   2b240:	88b8b03a 	or	fp,r17,r2
   2b244:	e028d43a 	srli	r20,fp,16
   2b248:	d8c00015 	stw	r3,0(sp)
   2b24c:	e5ffffcc 	andi	r23,fp,65535
   2b250:	a00b883a 	mov	r5,r20
   2b254:	002a5980 	call	2a598 <__udivsi3>
   2b258:	d8c00017 	ldw	r3,0(sp)
   2b25c:	a00b883a 	mov	r5,r20
   2b260:	d8800315 	stw	r2,12(sp)
   2b264:	1809883a 	mov	r4,r3
   2b268:	002a5fc0 	call	2a5fc <__umodsi3>
   2b26c:	d9800317 	ldw	r6,12(sp)
   2b270:	1006943a 	slli	r3,r2,16
   2b274:	9004d43a 	srli	r2,r18,16
   2b278:	b9a3383a 	mul	r17,r23,r6
   2b27c:	10c4b03a 	or	r2,r2,r3
   2b280:	1440062e 	bgeu	r2,r17,2b29c <__divdf3+0x39c>
   2b284:	1705883a 	add	r2,r2,fp
   2b288:	30ffffc4 	addi	r3,r6,-1
   2b28c:	1700ee36 	bltu	r2,fp,2b648 <__divdf3+0x748>
   2b290:	1440ed2e 	bgeu	r2,r17,2b648 <__divdf3+0x748>
   2b294:	31bfff84 	addi	r6,r6,-2
   2b298:	1705883a 	add	r2,r2,fp
   2b29c:	1463c83a 	sub	r17,r2,r17
   2b2a0:	a00b883a 	mov	r5,r20
   2b2a4:	8809883a 	mov	r4,r17
   2b2a8:	d9800315 	stw	r6,12(sp)
   2b2ac:	002a5980 	call	2a598 <__udivsi3>
   2b2b0:	a00b883a 	mov	r5,r20
   2b2b4:	8809883a 	mov	r4,r17
   2b2b8:	d8800215 	stw	r2,8(sp)
   2b2bc:	002a5fc0 	call	2a5fc <__umodsi3>
   2b2c0:	d9c00217 	ldw	r7,8(sp)
   2b2c4:	1004943a 	slli	r2,r2,16
   2b2c8:	94bfffcc 	andi	r18,r18,65535
   2b2cc:	b9d1383a 	mul	r8,r23,r7
   2b2d0:	90a4b03a 	or	r18,r18,r2
   2b2d4:	d9800317 	ldw	r6,12(sp)
   2b2d8:	9200062e 	bgeu	r18,r8,2b2f4 <__divdf3+0x3f4>
   2b2dc:	9725883a 	add	r18,r18,fp
   2b2e0:	38bfffc4 	addi	r2,r7,-1
   2b2e4:	9700d636 	bltu	r18,fp,2b640 <__divdf3+0x740>
   2b2e8:	9200d52e 	bgeu	r18,r8,2b640 <__divdf3+0x740>
   2b2ec:	39ffff84 	addi	r7,r7,-2
   2b2f0:	9725883a 	add	r18,r18,fp
   2b2f4:	3004943a 	slli	r2,r6,16
   2b2f8:	b012d43a 	srli	r9,r22,16
   2b2fc:	b1bfffcc 	andi	r6,r22,65535
   2b300:	11e2b03a 	or	r17,r2,r7
   2b304:	8806d43a 	srli	r3,r17,16
   2b308:	893fffcc 	andi	r4,r17,65535
   2b30c:	218b383a 	mul	r5,r4,r6
   2b310:	30c5383a 	mul	r2,r6,r3
   2b314:	2249383a 	mul	r4,r4,r9
   2b318:	280ed43a 	srli	r7,r5,16
   2b31c:	9225c83a 	sub	r18,r18,r8
   2b320:	2089883a 	add	r4,r4,r2
   2b324:	3909883a 	add	r4,r7,r4
   2b328:	1a47383a 	mul	r3,r3,r9
   2b32c:	2080022e 	bgeu	r4,r2,2b338 <__divdf3+0x438>
   2b330:	00800074 	movhi	r2,1
   2b334:	1887883a 	add	r3,r3,r2
   2b338:	2004d43a 	srli	r2,r4,16
   2b33c:	2008943a 	slli	r4,r4,16
   2b340:	297fffcc 	andi	r5,r5,65535
   2b344:	10c7883a 	add	r3,r2,r3
   2b348:	2149883a 	add	r4,r4,r5
   2b34c:	90c0a536 	bltu	r18,r3,2b5e4 <__divdf3+0x6e4>
   2b350:	90c0bf26 	beq	r18,r3,2b650 <__divdf3+0x750>
   2b354:	90c7c83a 	sub	r3,r18,r3
   2b358:	810fc83a 	sub	r7,r16,r4
   2b35c:	81e5803a 	cmpltu	r18,r16,r7
   2b360:	1ca5c83a 	sub	r18,r3,r18
   2b364:	e480c126 	beq	fp,r18,2b66c <__divdf3+0x76c>
   2b368:	a00b883a 	mov	r5,r20
   2b36c:	9009883a 	mov	r4,r18
   2b370:	d9800315 	stw	r6,12(sp)
   2b374:	d9c00215 	stw	r7,8(sp)
   2b378:	da400115 	stw	r9,4(sp)
   2b37c:	002a5980 	call	2a598 <__udivsi3>
   2b380:	a00b883a 	mov	r5,r20
   2b384:	9009883a 	mov	r4,r18
   2b388:	d8800015 	stw	r2,0(sp)
   2b38c:	002a5fc0 	call	2a5fc <__umodsi3>
   2b390:	d9c00217 	ldw	r7,8(sp)
   2b394:	da000017 	ldw	r8,0(sp)
   2b398:	1006943a 	slli	r3,r2,16
   2b39c:	3804d43a 	srli	r2,r7,16
   2b3a0:	ba21383a 	mul	r16,r23,r8
   2b3a4:	d9800317 	ldw	r6,12(sp)
   2b3a8:	10c4b03a 	or	r2,r2,r3
   2b3ac:	da400117 	ldw	r9,4(sp)
   2b3b0:	1400062e 	bgeu	r2,r16,2b3cc <__divdf3+0x4cc>
   2b3b4:	1705883a 	add	r2,r2,fp
   2b3b8:	40ffffc4 	addi	r3,r8,-1
   2b3bc:	1700ad36 	bltu	r2,fp,2b674 <__divdf3+0x774>
   2b3c0:	1400ac2e 	bgeu	r2,r16,2b674 <__divdf3+0x774>
   2b3c4:	423fff84 	addi	r8,r8,-2
   2b3c8:	1705883a 	add	r2,r2,fp
   2b3cc:	1421c83a 	sub	r16,r2,r16
   2b3d0:	a00b883a 	mov	r5,r20
   2b3d4:	8009883a 	mov	r4,r16
   2b3d8:	d9800315 	stw	r6,12(sp)
   2b3dc:	d9c00215 	stw	r7,8(sp)
   2b3e0:	da000015 	stw	r8,0(sp)
   2b3e4:	da400115 	stw	r9,4(sp)
   2b3e8:	002a5980 	call	2a598 <__udivsi3>
   2b3ec:	8009883a 	mov	r4,r16
   2b3f0:	a00b883a 	mov	r5,r20
   2b3f4:	1025883a 	mov	r18,r2
   2b3f8:	002a5fc0 	call	2a5fc <__umodsi3>
   2b3fc:	d9c00217 	ldw	r7,8(sp)
   2b400:	1004943a 	slli	r2,r2,16
   2b404:	bcaf383a 	mul	r23,r23,r18
   2b408:	393fffcc 	andi	r4,r7,65535
   2b40c:	2088b03a 	or	r4,r4,r2
   2b410:	d9800317 	ldw	r6,12(sp)
   2b414:	da000017 	ldw	r8,0(sp)
   2b418:	da400117 	ldw	r9,4(sp)
   2b41c:	25c0062e 	bgeu	r4,r23,2b438 <__divdf3+0x538>
   2b420:	2709883a 	add	r4,r4,fp
   2b424:	90bfffc4 	addi	r2,r18,-1
   2b428:	27009436 	bltu	r4,fp,2b67c <__divdf3+0x77c>
   2b42c:	25c0932e 	bgeu	r4,r23,2b67c <__divdf3+0x77c>
   2b430:	94bfff84 	addi	r18,r18,-2
   2b434:	2709883a 	add	r4,r4,fp
   2b438:	4004943a 	slli	r2,r8,16
   2b43c:	25efc83a 	sub	r23,r4,r23
   2b440:	1490b03a 	or	r8,r2,r18
   2b444:	4008d43a 	srli	r4,r8,16
   2b448:	40ffffcc 	andi	r3,r8,65535
   2b44c:	30c5383a 	mul	r2,r6,r3
   2b450:	1a47383a 	mul	r3,r3,r9
   2b454:	310d383a 	mul	r6,r6,r4
   2b458:	100ad43a 	srli	r5,r2,16
   2b45c:	4913383a 	mul	r9,r9,r4
   2b460:	1987883a 	add	r3,r3,r6
   2b464:	28c7883a 	add	r3,r5,r3
   2b468:	1980022e 	bgeu	r3,r6,2b474 <__divdf3+0x574>
   2b46c:	01000074 	movhi	r4,1
   2b470:	4913883a 	add	r9,r9,r4
   2b474:	1808d43a 	srli	r4,r3,16
   2b478:	1806943a 	slli	r3,r3,16
   2b47c:	10bfffcc 	andi	r2,r2,65535
   2b480:	2253883a 	add	r9,r4,r9
   2b484:	1887883a 	add	r3,r3,r2
   2b488:	ba403836 	bltu	r23,r9,2b56c <__divdf3+0x66c>
   2b48c:	ba403626 	beq	r23,r9,2b568 <__divdf3+0x668>
   2b490:	42000054 	ori	r8,r8,1
   2b494:	a880ffc4 	addi	r2,r21,1023
   2b498:	00bf570e 	bge	zero,r2,2b1f8 <__alt_data_end+0xfffeb1f8>
   2b49c:	40c001cc 	andi	r3,r8,7
   2b4a0:	18000726 	beq	r3,zero,2b4c0 <__divdf3+0x5c0>
   2b4a4:	40c003cc 	andi	r3,r8,15
   2b4a8:	01000104 	movi	r4,4
   2b4ac:	19000426 	beq	r3,r4,2b4c0 <__divdf3+0x5c0>
   2b4b0:	4107883a 	add	r3,r8,r4
   2b4b4:	1a11803a 	cmpltu	r8,r3,r8
   2b4b8:	8a23883a 	add	r17,r17,r8
   2b4bc:	1811883a 	mov	r8,r3
   2b4c0:	88c0402c 	andhi	r3,r17,256
   2b4c4:	18000426 	beq	r3,zero,2b4d8 <__divdf3+0x5d8>
   2b4c8:	00ffc034 	movhi	r3,65280
   2b4cc:	18ffffc4 	addi	r3,r3,-1
   2b4d0:	a8810004 	addi	r2,r21,1024
   2b4d4:	88e2703a 	and	r17,r17,r3
   2b4d8:	00c1ff84 	movi	r3,2046
   2b4dc:	18bee316 	blt	r3,r2,2b06c <__alt_data_end+0xfffeb06c>
   2b4e0:	8824977a 	slli	r18,r17,29
   2b4e4:	4010d0fa 	srli	r8,r8,3
   2b4e8:	8822927a 	slli	r17,r17,9
   2b4ec:	1081ffcc 	andi	r2,r2,2047
   2b4f0:	9224b03a 	or	r18,r18,r8
   2b4f4:	880ad33a 	srli	r5,r17,12
   2b4f8:	98c0004c 	andi	r3,r19,1
   2b4fc:	003edf06 	br	2b07c <__alt_data_end+0xfffeb07c>
   2b500:	8080022c 	andhi	r2,r16,8
   2b504:	10001226 	beq	r2,zero,2b550 <__divdf3+0x650>
   2b508:	8880022c 	andhi	r2,r17,8
   2b50c:	1000101e 	bne	r2,zero,2b550 <__divdf3+0x650>
   2b510:	00800434 	movhi	r2,16
   2b514:	89400234 	orhi	r5,r17,8
   2b518:	10bfffc4 	addi	r2,r2,-1
   2b51c:	b007883a 	mov	r3,r22
   2b520:	288a703a 	and	r5,r5,r2
   2b524:	4025883a 	mov	r18,r8
   2b528:	003f3106 	br	2b1f0 <__alt_data_end+0xfffeb1f0>
   2b52c:	008000c4 	movi	r2,3
   2b530:	3880a626 	beq	r7,r2,2b7cc <__divdf3+0x8cc>
   2b534:	00800044 	movi	r2,1
   2b538:	3880521e 	bne	r7,r2,2b684 <__divdf3+0x784>
   2b53c:	b807883a 	mov	r3,r23
   2b540:	0005883a 	mov	r2,zero
   2b544:	000b883a 	mov	r5,zero
   2b548:	0025883a 	mov	r18,zero
   2b54c:	003ecb06 	br	2b07c <__alt_data_end+0xfffeb07c>
   2b550:	00800434 	movhi	r2,16
   2b554:	81400234 	orhi	r5,r16,8
   2b558:	10bfffc4 	addi	r2,r2,-1
   2b55c:	a007883a 	mov	r3,r20
   2b560:	288a703a 	and	r5,r5,r2
   2b564:	003f2206 	br	2b1f0 <__alt_data_end+0xfffeb1f0>
   2b568:	183fca26 	beq	r3,zero,2b494 <__alt_data_end+0xfffeb494>
   2b56c:	e5ef883a 	add	r23,fp,r23
   2b570:	40bfffc4 	addi	r2,r8,-1
   2b574:	bf00392e 	bgeu	r23,fp,2b65c <__divdf3+0x75c>
   2b578:	1011883a 	mov	r8,r2
   2b57c:	ba7fc41e 	bne	r23,r9,2b490 <__alt_data_end+0xfffeb490>
   2b580:	b0ffc31e 	bne	r22,r3,2b490 <__alt_data_end+0xfffeb490>
   2b584:	003fc306 	br	2b494 <__alt_data_end+0xfffeb494>
   2b588:	143ff604 	addi	r16,r2,-40
   2b58c:	9c20983a 	sll	r16,r19,r16
   2b590:	0025883a 	mov	r18,zero
   2b594:	003ee206 	br	2b120 <__alt_data_end+0xfffeb120>
   2b598:	d9800315 	stw	r6,12(sp)
   2b59c:	d9c00215 	stw	r7,8(sp)
   2b5a0:	002cc580 	call	2cc58 <__clzsi2>
   2b5a4:	10800804 	addi	r2,r2,32
   2b5a8:	d9c00217 	ldw	r7,8(sp)
   2b5ac:	d9800317 	ldw	r6,12(sp)
   2b5b0:	003ed106 	br	2b0f8 <__alt_data_end+0xfffeb0f8>
   2b5b4:	147ff604 	addi	r17,r2,-40
   2b5b8:	3462983a 	sll	r17,r6,r17
   2b5bc:	0011883a 	mov	r8,zero
   2b5c0:	003ef506 	br	2b198 <__alt_data_end+0xfffeb198>
   2b5c4:	3009883a 	mov	r4,r6
   2b5c8:	d9800315 	stw	r6,12(sp)
   2b5cc:	da400115 	stw	r9,4(sp)
   2b5d0:	002cc580 	call	2cc58 <__clzsi2>
   2b5d4:	10800804 	addi	r2,r2,32
   2b5d8:	da400117 	ldw	r9,4(sp)
   2b5dc:	d9800317 	ldw	r6,12(sp)
   2b5e0:	003ee306 	br	2b170 <__alt_data_end+0xfffeb170>
   2b5e4:	85a1883a 	add	r16,r16,r22
   2b5e8:	8585803a 	cmpltu	r2,r16,r22
   2b5ec:	1705883a 	add	r2,r2,fp
   2b5f0:	14a5883a 	add	r18,r2,r18
   2b5f4:	88bfffc4 	addi	r2,r17,-1
   2b5f8:	e4800c2e 	bgeu	fp,r18,2b62c <__divdf3+0x72c>
   2b5fc:	90c03e36 	bltu	r18,r3,2b6f8 <__divdf3+0x7f8>
   2b600:	1c806926 	beq	r3,r18,2b7a8 <__divdf3+0x8a8>
   2b604:	90c7c83a 	sub	r3,r18,r3
   2b608:	1023883a 	mov	r17,r2
   2b60c:	003f5206 	br	2b358 <__alt_data_end+0xfffeb358>
   2b610:	923f0436 	bltu	r18,r8,2b224 <__alt_data_end+0xfffeb224>
   2b614:	800897fa 	slli	r4,r16,31
   2b618:	9004d07a 	srli	r2,r18,1
   2b61c:	8006d07a 	srli	r3,r16,1
   2b620:	902097fa 	slli	r16,r18,31
   2b624:	20a4b03a 	or	r18,r4,r2
   2b628:	003f0106 	br	2b230 <__alt_data_end+0xfffeb230>
   2b62c:	e4bff51e 	bne	fp,r18,2b604 <__alt_data_end+0xfffeb604>
   2b630:	85bff22e 	bgeu	r16,r22,2b5fc <__alt_data_end+0xfffeb5fc>
   2b634:	e0c7c83a 	sub	r3,fp,r3
   2b638:	1023883a 	mov	r17,r2
   2b63c:	003f4606 	br	2b358 <__alt_data_end+0xfffeb358>
   2b640:	100f883a 	mov	r7,r2
   2b644:	003f2b06 	br	2b2f4 <__alt_data_end+0xfffeb2f4>
   2b648:	180d883a 	mov	r6,r3
   2b64c:	003f1306 	br	2b29c <__alt_data_end+0xfffeb29c>
   2b650:	813fe436 	bltu	r16,r4,2b5e4 <__alt_data_end+0xfffeb5e4>
   2b654:	0007883a 	mov	r3,zero
   2b658:	003f3f06 	br	2b358 <__alt_data_end+0xfffeb358>
   2b65c:	ba402c36 	bltu	r23,r9,2b710 <__divdf3+0x810>
   2b660:	4dc05426 	beq	r9,r23,2b7b4 <__divdf3+0x8b4>
   2b664:	1011883a 	mov	r8,r2
   2b668:	003f8906 	br	2b490 <__alt_data_end+0xfffeb490>
   2b66c:	023fffc4 	movi	r8,-1
   2b670:	003f8806 	br	2b494 <__alt_data_end+0xfffeb494>
   2b674:	1811883a 	mov	r8,r3
   2b678:	003f5406 	br	2b3cc <__alt_data_end+0xfffeb3cc>
   2b67c:	1025883a 	mov	r18,r2
   2b680:	003f6d06 	br	2b438 <__alt_data_end+0xfffeb438>
   2b684:	b827883a 	mov	r19,r23
   2b688:	003f8206 	br	2b494 <__alt_data_end+0xfffeb494>
   2b68c:	010007c4 	movi	r4,31
   2b690:	20c02616 	blt	r4,r3,2b72c <__divdf3+0x82c>
   2b694:	00800804 	movi	r2,32
   2b698:	10c5c83a 	sub	r2,r2,r3
   2b69c:	888a983a 	sll	r5,r17,r2
   2b6a0:	40c8d83a 	srl	r4,r8,r3
   2b6a4:	4084983a 	sll	r2,r8,r2
   2b6a8:	88e2d83a 	srl	r17,r17,r3
   2b6ac:	2906b03a 	or	r3,r5,r4
   2b6b0:	1004c03a 	cmpne	r2,r2,zero
   2b6b4:	1886b03a 	or	r3,r3,r2
   2b6b8:	188001cc 	andi	r2,r3,7
   2b6bc:	10000726 	beq	r2,zero,2b6dc <__divdf3+0x7dc>
   2b6c0:	188003cc 	andi	r2,r3,15
   2b6c4:	01000104 	movi	r4,4
   2b6c8:	11000426 	beq	r2,r4,2b6dc <__divdf3+0x7dc>
   2b6cc:	1805883a 	mov	r2,r3
   2b6d0:	10c00104 	addi	r3,r2,4
   2b6d4:	1885803a 	cmpltu	r2,r3,r2
   2b6d8:	88a3883a 	add	r17,r17,r2
   2b6dc:	8880202c 	andhi	r2,r17,128
   2b6e0:	10002726 	beq	r2,zero,2b780 <__divdf3+0x880>
   2b6e4:	98c0004c 	andi	r3,r19,1
   2b6e8:	00800044 	movi	r2,1
   2b6ec:	000b883a 	mov	r5,zero
   2b6f0:	0025883a 	mov	r18,zero
   2b6f4:	003e6106 	br	2b07c <__alt_data_end+0xfffeb07c>
   2b6f8:	85a1883a 	add	r16,r16,r22
   2b6fc:	8585803a 	cmpltu	r2,r16,r22
   2b700:	1705883a 	add	r2,r2,fp
   2b704:	14a5883a 	add	r18,r2,r18
   2b708:	8c7fff84 	addi	r17,r17,-2
   2b70c:	003f1106 	br	2b354 <__alt_data_end+0xfffeb354>
   2b710:	b589883a 	add	r4,r22,r22
   2b714:	25ad803a 	cmpltu	r22,r4,r22
   2b718:	b739883a 	add	fp,r22,fp
   2b71c:	40bfff84 	addi	r2,r8,-2
   2b720:	bf2f883a 	add	r23,r23,fp
   2b724:	202d883a 	mov	r22,r4
   2b728:	003f9306 	br	2b578 <__alt_data_end+0xfffeb578>
   2b72c:	013ff844 	movi	r4,-31
   2b730:	2085c83a 	sub	r2,r4,r2
   2b734:	8888d83a 	srl	r4,r17,r2
   2b738:	00800804 	movi	r2,32
   2b73c:	18802126 	beq	r3,r2,2b7c4 <__divdf3+0x8c4>
   2b740:	00801004 	movi	r2,64
   2b744:	10c5c83a 	sub	r2,r2,r3
   2b748:	8884983a 	sll	r2,r17,r2
   2b74c:	1204b03a 	or	r2,r2,r8
   2b750:	1004c03a 	cmpne	r2,r2,zero
   2b754:	2084b03a 	or	r2,r4,r2
   2b758:	144001cc 	andi	r17,r2,7
   2b75c:	88000d1e 	bne	r17,zero,2b794 <__divdf3+0x894>
   2b760:	000b883a 	mov	r5,zero
   2b764:	1024d0fa 	srli	r18,r2,3
   2b768:	98c0004c 	andi	r3,r19,1
   2b76c:	0005883a 	mov	r2,zero
   2b770:	9464b03a 	or	r18,r18,r17
   2b774:	003e4106 	br	2b07c <__alt_data_end+0xfffeb07c>
   2b778:	1007883a 	mov	r3,r2
   2b77c:	0023883a 	mov	r17,zero
   2b780:	880a927a 	slli	r5,r17,9
   2b784:	1805883a 	mov	r2,r3
   2b788:	8822977a 	slli	r17,r17,29
   2b78c:	280ad33a 	srli	r5,r5,12
   2b790:	003ff406 	br	2b764 <__alt_data_end+0xfffeb764>
   2b794:	10c003cc 	andi	r3,r2,15
   2b798:	01000104 	movi	r4,4
   2b79c:	193ff626 	beq	r3,r4,2b778 <__alt_data_end+0xfffeb778>
   2b7a0:	0023883a 	mov	r17,zero
   2b7a4:	003fca06 	br	2b6d0 <__alt_data_end+0xfffeb6d0>
   2b7a8:	813fd336 	bltu	r16,r4,2b6f8 <__alt_data_end+0xfffeb6f8>
   2b7ac:	1023883a 	mov	r17,r2
   2b7b0:	003fa806 	br	2b654 <__alt_data_end+0xfffeb654>
   2b7b4:	b0ffd636 	bltu	r22,r3,2b710 <__alt_data_end+0xfffeb710>
   2b7b8:	1011883a 	mov	r8,r2
   2b7bc:	b0ff341e 	bne	r22,r3,2b490 <__alt_data_end+0xfffeb490>
   2b7c0:	003f3406 	br	2b494 <__alt_data_end+0xfffeb494>
   2b7c4:	0005883a 	mov	r2,zero
   2b7c8:	003fe006 	br	2b74c <__alt_data_end+0xfffeb74c>
   2b7cc:	00800434 	movhi	r2,16
   2b7d0:	89400234 	orhi	r5,r17,8
   2b7d4:	10bfffc4 	addi	r2,r2,-1
   2b7d8:	b807883a 	mov	r3,r23
   2b7dc:	288a703a 	and	r5,r5,r2
   2b7e0:	4025883a 	mov	r18,r8
   2b7e4:	003e8206 	br	2b1f0 <__alt_data_end+0xfffeb1f0>

0002b7e8 <__eqdf2>:
   2b7e8:	2804d53a 	srli	r2,r5,20
   2b7ec:	3806d53a 	srli	r3,r7,20
   2b7f0:	02000434 	movhi	r8,16
   2b7f4:	423fffc4 	addi	r8,r8,-1
   2b7f8:	1081ffcc 	andi	r2,r2,2047
   2b7fc:	0281ffc4 	movi	r10,2047
   2b800:	2a12703a 	and	r9,r5,r8
   2b804:	18c1ffcc 	andi	r3,r3,2047
   2b808:	3a10703a 	and	r8,r7,r8
   2b80c:	280ad7fa 	srli	r5,r5,31
   2b810:	380ed7fa 	srli	r7,r7,31
   2b814:	12801026 	beq	r2,r10,2b858 <__eqdf2+0x70>
   2b818:	0281ffc4 	movi	r10,2047
   2b81c:	1a800a26 	beq	r3,r10,2b848 <__eqdf2+0x60>
   2b820:	10c00226 	beq	r2,r3,2b82c <__eqdf2+0x44>
   2b824:	00800044 	movi	r2,1
   2b828:	f800283a 	ret
   2b82c:	4a3ffd1e 	bne	r9,r8,2b824 <__alt_data_end+0xfffeb824>
   2b830:	21bffc1e 	bne	r4,r6,2b824 <__alt_data_end+0xfffeb824>
   2b834:	29c00c26 	beq	r5,r7,2b868 <__eqdf2+0x80>
   2b838:	103ffa1e 	bne	r2,zero,2b824 <__alt_data_end+0xfffeb824>
   2b83c:	2244b03a 	or	r2,r4,r9
   2b840:	1004c03a 	cmpne	r2,r2,zero
   2b844:	f800283a 	ret
   2b848:	3214b03a 	or	r10,r6,r8
   2b84c:	503ff426 	beq	r10,zero,2b820 <__alt_data_end+0xfffeb820>
   2b850:	00800044 	movi	r2,1
   2b854:	f800283a 	ret
   2b858:	2254b03a 	or	r10,r4,r9
   2b85c:	503fee26 	beq	r10,zero,2b818 <__alt_data_end+0xfffeb818>
   2b860:	00800044 	movi	r2,1
   2b864:	f800283a 	ret
   2b868:	0005883a 	mov	r2,zero
   2b86c:	f800283a 	ret

0002b870 <__gedf2>:
   2b870:	2804d53a 	srli	r2,r5,20
   2b874:	3806d53a 	srli	r3,r7,20
   2b878:	02000434 	movhi	r8,16
   2b87c:	423fffc4 	addi	r8,r8,-1
   2b880:	1081ffcc 	andi	r2,r2,2047
   2b884:	0241ffc4 	movi	r9,2047
   2b888:	2a14703a 	and	r10,r5,r8
   2b88c:	18c1ffcc 	andi	r3,r3,2047
   2b890:	3a10703a 	and	r8,r7,r8
   2b894:	280ad7fa 	srli	r5,r5,31
   2b898:	380ed7fa 	srli	r7,r7,31
   2b89c:	12401d26 	beq	r2,r9,2b914 <__gedf2+0xa4>
   2b8a0:	0241ffc4 	movi	r9,2047
   2b8a4:	1a401226 	beq	r3,r9,2b8f0 <__gedf2+0x80>
   2b8a8:	1000081e 	bne	r2,zero,2b8cc <__gedf2+0x5c>
   2b8ac:	2296b03a 	or	r11,r4,r10
   2b8b0:	5813003a 	cmpeq	r9,r11,zero
   2b8b4:	1800091e 	bne	r3,zero,2b8dc <__gedf2+0x6c>
   2b8b8:	3218b03a 	or	r12,r6,r8
   2b8bc:	6000071e 	bne	r12,zero,2b8dc <__gedf2+0x6c>
   2b8c0:	0005883a 	mov	r2,zero
   2b8c4:	5800101e 	bne	r11,zero,2b908 <__gedf2+0x98>
   2b8c8:	f800283a 	ret
   2b8cc:	18000c1e 	bne	r3,zero,2b900 <__gedf2+0x90>
   2b8d0:	3212b03a 	or	r9,r6,r8
   2b8d4:	48000c26 	beq	r9,zero,2b908 <__gedf2+0x98>
   2b8d8:	0013883a 	mov	r9,zero
   2b8dc:	39c03fcc 	andi	r7,r7,255
   2b8e0:	48000826 	beq	r9,zero,2b904 <__gedf2+0x94>
   2b8e4:	38000926 	beq	r7,zero,2b90c <__gedf2+0x9c>
   2b8e8:	00800044 	movi	r2,1
   2b8ec:	f800283a 	ret
   2b8f0:	3212b03a 	or	r9,r6,r8
   2b8f4:	483fec26 	beq	r9,zero,2b8a8 <__alt_data_end+0xfffeb8a8>
   2b8f8:	00bfff84 	movi	r2,-2
   2b8fc:	f800283a 	ret
   2b900:	39c03fcc 	andi	r7,r7,255
   2b904:	29c00626 	beq	r5,r7,2b920 <__gedf2+0xb0>
   2b908:	283ff726 	beq	r5,zero,2b8e8 <__alt_data_end+0xfffeb8e8>
   2b90c:	00bfffc4 	movi	r2,-1
   2b910:	f800283a 	ret
   2b914:	2292b03a 	or	r9,r4,r10
   2b918:	483fe126 	beq	r9,zero,2b8a0 <__alt_data_end+0xfffeb8a0>
   2b91c:	003ff606 	br	2b8f8 <__alt_data_end+0xfffeb8f8>
   2b920:	18bff916 	blt	r3,r2,2b908 <__alt_data_end+0xfffeb908>
   2b924:	10c00316 	blt	r2,r3,2b934 <__gedf2+0xc4>
   2b928:	42bff736 	bltu	r8,r10,2b908 <__alt_data_end+0xfffeb908>
   2b92c:	52000326 	beq	r10,r8,2b93c <__gedf2+0xcc>
   2b930:	5200042e 	bgeu	r10,r8,2b944 <__gedf2+0xd4>
   2b934:	283fec1e 	bne	r5,zero,2b8e8 <__alt_data_end+0xfffeb8e8>
   2b938:	003ff406 	br	2b90c <__alt_data_end+0xfffeb90c>
   2b93c:	313ff236 	bltu	r6,r4,2b908 <__alt_data_end+0xfffeb908>
   2b940:	21bffc36 	bltu	r4,r6,2b934 <__alt_data_end+0xfffeb934>
   2b944:	0005883a 	mov	r2,zero
   2b948:	f800283a 	ret

0002b94c <__ledf2>:
   2b94c:	2804d53a 	srli	r2,r5,20
   2b950:	3810d53a 	srli	r8,r7,20
   2b954:	00c00434 	movhi	r3,16
   2b958:	18ffffc4 	addi	r3,r3,-1
   2b95c:	1081ffcc 	andi	r2,r2,2047
   2b960:	0241ffc4 	movi	r9,2047
   2b964:	28d4703a 	and	r10,r5,r3
   2b968:	4201ffcc 	andi	r8,r8,2047
   2b96c:	38c6703a 	and	r3,r7,r3
   2b970:	280ad7fa 	srli	r5,r5,31
   2b974:	380ed7fa 	srli	r7,r7,31
   2b978:	12401f26 	beq	r2,r9,2b9f8 <__ledf2+0xac>
   2b97c:	0241ffc4 	movi	r9,2047
   2b980:	42401426 	beq	r8,r9,2b9d4 <__ledf2+0x88>
   2b984:	1000091e 	bne	r2,zero,2b9ac <__ledf2+0x60>
   2b988:	2296b03a 	or	r11,r4,r10
   2b98c:	5813003a 	cmpeq	r9,r11,zero
   2b990:	29403fcc 	andi	r5,r5,255
   2b994:	40000a1e 	bne	r8,zero,2b9c0 <__ledf2+0x74>
   2b998:	30d8b03a 	or	r12,r6,r3
   2b99c:	6000081e 	bne	r12,zero,2b9c0 <__ledf2+0x74>
   2b9a0:	0005883a 	mov	r2,zero
   2b9a4:	5800111e 	bne	r11,zero,2b9ec <__ledf2+0xa0>
   2b9a8:	f800283a 	ret
   2b9ac:	29403fcc 	andi	r5,r5,255
   2b9b0:	40000c1e 	bne	r8,zero,2b9e4 <__ledf2+0x98>
   2b9b4:	30d2b03a 	or	r9,r6,r3
   2b9b8:	48000c26 	beq	r9,zero,2b9ec <__ledf2+0xa0>
   2b9bc:	0013883a 	mov	r9,zero
   2b9c0:	39c03fcc 	andi	r7,r7,255
   2b9c4:	48000826 	beq	r9,zero,2b9e8 <__ledf2+0x9c>
   2b9c8:	38001126 	beq	r7,zero,2ba10 <__ledf2+0xc4>
   2b9cc:	00800044 	movi	r2,1
   2b9d0:	f800283a 	ret
   2b9d4:	30d2b03a 	or	r9,r6,r3
   2b9d8:	483fea26 	beq	r9,zero,2b984 <__alt_data_end+0xfffeb984>
   2b9dc:	00800084 	movi	r2,2
   2b9e0:	f800283a 	ret
   2b9e4:	39c03fcc 	andi	r7,r7,255
   2b9e8:	39400726 	beq	r7,r5,2ba08 <__ledf2+0xbc>
   2b9ec:	2800081e 	bne	r5,zero,2ba10 <__ledf2+0xc4>
   2b9f0:	00800044 	movi	r2,1
   2b9f4:	f800283a 	ret
   2b9f8:	2292b03a 	or	r9,r4,r10
   2b9fc:	483fdf26 	beq	r9,zero,2b97c <__alt_data_end+0xfffeb97c>
   2ba00:	00800084 	movi	r2,2
   2ba04:	f800283a 	ret
   2ba08:	4080030e 	bge	r8,r2,2ba18 <__ledf2+0xcc>
   2ba0c:	383fef26 	beq	r7,zero,2b9cc <__alt_data_end+0xfffeb9cc>
   2ba10:	00bfffc4 	movi	r2,-1
   2ba14:	f800283a 	ret
   2ba18:	123feb16 	blt	r2,r8,2b9c8 <__alt_data_end+0xfffeb9c8>
   2ba1c:	1abff336 	bltu	r3,r10,2b9ec <__alt_data_end+0xfffeb9ec>
   2ba20:	50c00326 	beq	r10,r3,2ba30 <__ledf2+0xe4>
   2ba24:	50c0042e 	bgeu	r10,r3,2ba38 <__ledf2+0xec>
   2ba28:	283fe81e 	bne	r5,zero,2b9cc <__alt_data_end+0xfffeb9cc>
   2ba2c:	003ff806 	br	2ba10 <__alt_data_end+0xfffeba10>
   2ba30:	313fee36 	bltu	r6,r4,2b9ec <__alt_data_end+0xfffeb9ec>
   2ba34:	21bffc36 	bltu	r4,r6,2ba28 <__alt_data_end+0xfffeba28>
   2ba38:	0005883a 	mov	r2,zero
   2ba3c:	f800283a 	ret

0002ba40 <__muldf3>:
   2ba40:	defff304 	addi	sp,sp,-52
   2ba44:	2804d53a 	srli	r2,r5,20
   2ba48:	dd800915 	stw	r22,36(sp)
   2ba4c:	282cd7fa 	srli	r22,r5,31
   2ba50:	dc000315 	stw	r16,12(sp)
   2ba54:	04000434 	movhi	r16,16
   2ba58:	dd400815 	stw	r21,32(sp)
   2ba5c:	dc800515 	stw	r18,20(sp)
   2ba60:	843fffc4 	addi	r16,r16,-1
   2ba64:	dfc00c15 	stw	ra,48(sp)
   2ba68:	df000b15 	stw	fp,44(sp)
   2ba6c:	ddc00a15 	stw	r23,40(sp)
   2ba70:	dd000715 	stw	r20,28(sp)
   2ba74:	dcc00615 	stw	r19,24(sp)
   2ba78:	dc400415 	stw	r17,16(sp)
   2ba7c:	1481ffcc 	andi	r18,r2,2047
   2ba80:	2c20703a 	and	r16,r5,r16
   2ba84:	b02b883a 	mov	r21,r22
   2ba88:	b2403fcc 	andi	r9,r22,255
   2ba8c:	90006026 	beq	r18,zero,2bc10 <__muldf3+0x1d0>
   2ba90:	0081ffc4 	movi	r2,2047
   2ba94:	2029883a 	mov	r20,r4
   2ba98:	90803626 	beq	r18,r2,2bb74 <__muldf3+0x134>
   2ba9c:	80800434 	orhi	r2,r16,16
   2baa0:	100490fa 	slli	r2,r2,3
   2baa4:	2020d77a 	srli	r16,r4,29
   2baa8:	202890fa 	slli	r20,r4,3
   2baac:	94bf0044 	addi	r18,r18,-1023
   2bab0:	80a0b03a 	or	r16,r16,r2
   2bab4:	0027883a 	mov	r19,zero
   2bab8:	0039883a 	mov	fp,zero
   2babc:	3804d53a 	srli	r2,r7,20
   2bac0:	382ed7fa 	srli	r23,r7,31
   2bac4:	04400434 	movhi	r17,16
   2bac8:	8c7fffc4 	addi	r17,r17,-1
   2bacc:	1081ffcc 	andi	r2,r2,2047
   2bad0:	3011883a 	mov	r8,r6
   2bad4:	3c62703a 	and	r17,r7,r17
   2bad8:	ba803fcc 	andi	r10,r23,255
   2badc:	10006d26 	beq	r2,zero,2bc94 <__muldf3+0x254>
   2bae0:	00c1ffc4 	movi	r3,2047
   2bae4:	10c06526 	beq	r2,r3,2bc7c <__muldf3+0x23c>
   2bae8:	88c00434 	orhi	r3,r17,16
   2baec:	180690fa 	slli	r3,r3,3
   2baf0:	3022d77a 	srli	r17,r6,29
   2baf4:	301090fa 	slli	r8,r6,3
   2baf8:	10bf0044 	addi	r2,r2,-1023
   2bafc:	88e2b03a 	or	r17,r17,r3
   2bb00:	000b883a 	mov	r5,zero
   2bb04:	9085883a 	add	r2,r18,r2
   2bb08:	2cc8b03a 	or	r4,r5,r19
   2bb0c:	00c003c4 	movi	r3,15
   2bb10:	bdacf03a 	xor	r22,r23,r22
   2bb14:	12c00044 	addi	r11,r2,1
   2bb18:	19009936 	bltu	r3,r4,2bd80 <__muldf3+0x340>
   2bb1c:	200890ba 	slli	r4,r4,2
   2bb20:	00c000f4 	movhi	r3,3
   2bb24:	18eecd04 	addi	r3,r3,-17612
   2bb28:	20c9883a 	add	r4,r4,r3
   2bb2c:	20c00017 	ldw	r3,0(r4)
   2bb30:	1800683a 	jmp	r3
   2bb34:	0002bd80 	call	2bd8 <__alt_mem_onchip_memory_nios2_FFT-0x1d428>
   2bb38:	0002bb94 	movui	zero,2798
   2bb3c:	0002bb94 	movui	zero,2798
   2bb40:	0002bb90 	cmplti	zero,zero,2798
   2bb44:	0002bd5c 	xori	zero,zero,2805
   2bb48:	0002bd5c 	xori	zero,zero,2805
   2bb4c:	0002bd44 	movi	zero,2805
   2bb50:	0002bb90 	cmplti	zero,zero,2798
   2bb54:	0002bd5c 	xori	zero,zero,2805
   2bb58:	0002bd44 	movi	zero,2805
   2bb5c:	0002bd5c 	xori	zero,zero,2805
   2bb60:	0002bb90 	cmplti	zero,zero,2798
   2bb64:	0002bd6c 	andhi	zero,zero,2805
   2bb68:	0002bd6c 	andhi	zero,zero,2805
   2bb6c:	0002bd6c 	andhi	zero,zero,2805
   2bb70:	0002bf88 	cmpgei	zero,zero,2814
   2bb74:	2404b03a 	or	r2,r4,r16
   2bb78:	10006f1e 	bne	r2,zero,2bd38 <__muldf3+0x2f8>
   2bb7c:	04c00204 	movi	r19,8
   2bb80:	0021883a 	mov	r16,zero
   2bb84:	0029883a 	mov	r20,zero
   2bb88:	07000084 	movi	fp,2
   2bb8c:	003fcb06 	br	2babc <__alt_data_end+0xfffebabc>
   2bb90:	502d883a 	mov	r22,r10
   2bb94:	00800084 	movi	r2,2
   2bb98:	28805726 	beq	r5,r2,2bcf8 <__muldf3+0x2b8>
   2bb9c:	008000c4 	movi	r2,3
   2bba0:	28816626 	beq	r5,r2,2c13c <__muldf3+0x6fc>
   2bba4:	00800044 	movi	r2,1
   2bba8:	2881411e 	bne	r5,r2,2c0b0 <__muldf3+0x670>
   2bbac:	b02b883a 	mov	r21,r22
   2bbb0:	0005883a 	mov	r2,zero
   2bbb4:	000b883a 	mov	r5,zero
   2bbb8:	0029883a 	mov	r20,zero
   2bbbc:	1004953a 	slli	r2,r2,20
   2bbc0:	a8c03fcc 	andi	r3,r21,255
   2bbc4:	04400434 	movhi	r17,16
   2bbc8:	8c7fffc4 	addi	r17,r17,-1
   2bbcc:	180697fa 	slli	r3,r3,31
   2bbd0:	2c4a703a 	and	r5,r5,r17
   2bbd4:	288ab03a 	or	r5,r5,r2
   2bbd8:	28c6b03a 	or	r3,r5,r3
   2bbdc:	a005883a 	mov	r2,r20
   2bbe0:	dfc00c17 	ldw	ra,48(sp)
   2bbe4:	df000b17 	ldw	fp,44(sp)
   2bbe8:	ddc00a17 	ldw	r23,40(sp)
   2bbec:	dd800917 	ldw	r22,36(sp)
   2bbf0:	dd400817 	ldw	r21,32(sp)
   2bbf4:	dd000717 	ldw	r20,28(sp)
   2bbf8:	dcc00617 	ldw	r19,24(sp)
   2bbfc:	dc800517 	ldw	r18,20(sp)
   2bc00:	dc400417 	ldw	r17,16(sp)
   2bc04:	dc000317 	ldw	r16,12(sp)
   2bc08:	dec00d04 	addi	sp,sp,52
   2bc0c:	f800283a 	ret
   2bc10:	2404b03a 	or	r2,r4,r16
   2bc14:	2027883a 	mov	r19,r4
   2bc18:	10004226 	beq	r2,zero,2bd24 <__muldf3+0x2e4>
   2bc1c:	8000fc26 	beq	r16,zero,2c010 <__muldf3+0x5d0>
   2bc20:	8009883a 	mov	r4,r16
   2bc24:	d9800215 	stw	r6,8(sp)
   2bc28:	d9c00015 	stw	r7,0(sp)
   2bc2c:	da400115 	stw	r9,4(sp)
   2bc30:	002cc580 	call	2cc58 <__clzsi2>
   2bc34:	d9800217 	ldw	r6,8(sp)
   2bc38:	d9c00017 	ldw	r7,0(sp)
   2bc3c:	da400117 	ldw	r9,4(sp)
   2bc40:	113ffd44 	addi	r4,r2,-11
   2bc44:	00c00704 	movi	r3,28
   2bc48:	1900ed16 	blt	r3,r4,2c000 <__muldf3+0x5c0>
   2bc4c:	00c00744 	movi	r3,29
   2bc50:	147ffe04 	addi	r17,r2,-8
   2bc54:	1907c83a 	sub	r3,r3,r4
   2bc58:	8460983a 	sll	r16,r16,r17
   2bc5c:	98c6d83a 	srl	r3,r19,r3
   2bc60:	9c68983a 	sll	r20,r19,r17
   2bc64:	1c20b03a 	or	r16,r3,r16
   2bc68:	1080fcc4 	addi	r2,r2,1011
   2bc6c:	00a5c83a 	sub	r18,zero,r2
   2bc70:	0027883a 	mov	r19,zero
   2bc74:	0039883a 	mov	fp,zero
   2bc78:	003f9006 	br	2babc <__alt_data_end+0xfffebabc>
   2bc7c:	3446b03a 	or	r3,r6,r17
   2bc80:	1800261e 	bne	r3,zero,2bd1c <__muldf3+0x2dc>
   2bc84:	0023883a 	mov	r17,zero
   2bc88:	0011883a 	mov	r8,zero
   2bc8c:	01400084 	movi	r5,2
   2bc90:	003f9c06 	br	2bb04 <__alt_data_end+0xfffebb04>
   2bc94:	3446b03a 	or	r3,r6,r17
   2bc98:	18001c26 	beq	r3,zero,2bd0c <__muldf3+0x2cc>
   2bc9c:	8800ce26 	beq	r17,zero,2bfd8 <__muldf3+0x598>
   2bca0:	8809883a 	mov	r4,r17
   2bca4:	d9800215 	stw	r6,8(sp)
   2bca8:	da400115 	stw	r9,4(sp)
   2bcac:	da800015 	stw	r10,0(sp)
   2bcb0:	002cc580 	call	2cc58 <__clzsi2>
   2bcb4:	d9800217 	ldw	r6,8(sp)
   2bcb8:	da400117 	ldw	r9,4(sp)
   2bcbc:	da800017 	ldw	r10,0(sp)
   2bcc0:	113ffd44 	addi	r4,r2,-11
   2bcc4:	00c00704 	movi	r3,28
   2bcc8:	1900bf16 	blt	r3,r4,2bfc8 <__muldf3+0x588>
   2bccc:	00c00744 	movi	r3,29
   2bcd0:	123ffe04 	addi	r8,r2,-8
   2bcd4:	1907c83a 	sub	r3,r3,r4
   2bcd8:	8a22983a 	sll	r17,r17,r8
   2bcdc:	30c6d83a 	srl	r3,r6,r3
   2bce0:	3210983a 	sll	r8,r6,r8
   2bce4:	1c62b03a 	or	r17,r3,r17
   2bce8:	1080fcc4 	addi	r2,r2,1011
   2bcec:	0085c83a 	sub	r2,zero,r2
   2bcf0:	000b883a 	mov	r5,zero
   2bcf4:	003f8306 	br	2bb04 <__alt_data_end+0xfffebb04>
   2bcf8:	b02b883a 	mov	r21,r22
   2bcfc:	0081ffc4 	movi	r2,2047
   2bd00:	000b883a 	mov	r5,zero
   2bd04:	0029883a 	mov	r20,zero
   2bd08:	003fac06 	br	2bbbc <__alt_data_end+0xfffebbbc>
   2bd0c:	0023883a 	mov	r17,zero
   2bd10:	0011883a 	mov	r8,zero
   2bd14:	01400044 	movi	r5,1
   2bd18:	003f7a06 	br	2bb04 <__alt_data_end+0xfffebb04>
   2bd1c:	014000c4 	movi	r5,3
   2bd20:	003f7806 	br	2bb04 <__alt_data_end+0xfffebb04>
   2bd24:	04c00104 	movi	r19,4
   2bd28:	0021883a 	mov	r16,zero
   2bd2c:	0029883a 	mov	r20,zero
   2bd30:	07000044 	movi	fp,1
   2bd34:	003f6106 	br	2babc <__alt_data_end+0xfffebabc>
   2bd38:	04c00304 	movi	r19,12
   2bd3c:	070000c4 	movi	fp,3
   2bd40:	003f5e06 	br	2babc <__alt_data_end+0xfffebabc>
   2bd44:	01400434 	movhi	r5,16
   2bd48:	002b883a 	mov	r21,zero
   2bd4c:	297fffc4 	addi	r5,r5,-1
   2bd50:	053fffc4 	movi	r20,-1
   2bd54:	0081ffc4 	movi	r2,2047
   2bd58:	003f9806 	br	2bbbc <__alt_data_end+0xfffebbbc>
   2bd5c:	8023883a 	mov	r17,r16
   2bd60:	a011883a 	mov	r8,r20
   2bd64:	e00b883a 	mov	r5,fp
   2bd68:	003f8a06 	br	2bb94 <__alt_data_end+0xfffebb94>
   2bd6c:	8023883a 	mov	r17,r16
   2bd70:	a011883a 	mov	r8,r20
   2bd74:	482d883a 	mov	r22,r9
   2bd78:	e00b883a 	mov	r5,fp
   2bd7c:	003f8506 	br	2bb94 <__alt_data_end+0xfffebb94>
   2bd80:	a00ad43a 	srli	r5,r20,16
   2bd84:	401ad43a 	srli	r13,r8,16
   2bd88:	a53fffcc 	andi	r20,r20,65535
   2bd8c:	423fffcc 	andi	r8,r8,65535
   2bd90:	4519383a 	mul	r12,r8,r20
   2bd94:	4147383a 	mul	r3,r8,r5
   2bd98:	6d09383a 	mul	r4,r13,r20
   2bd9c:	600cd43a 	srli	r6,r12,16
   2bda0:	2b5d383a 	mul	r14,r5,r13
   2bda4:	20c9883a 	add	r4,r4,r3
   2bda8:	310d883a 	add	r6,r6,r4
   2bdac:	30c0022e 	bgeu	r6,r3,2bdb8 <__muldf3+0x378>
   2bdb0:	00c00074 	movhi	r3,1
   2bdb4:	70dd883a 	add	r14,r14,r3
   2bdb8:	8826d43a 	srli	r19,r17,16
   2bdbc:	8bffffcc 	andi	r15,r17,65535
   2bdc0:	7d23383a 	mul	r17,r15,r20
   2bdc4:	7949383a 	mul	r4,r15,r5
   2bdc8:	9d29383a 	mul	r20,r19,r20
   2bdcc:	8814d43a 	srli	r10,r17,16
   2bdd0:	3012943a 	slli	r9,r6,16
   2bdd4:	a129883a 	add	r20,r20,r4
   2bdd8:	633fffcc 	andi	r12,r12,65535
   2bddc:	5515883a 	add	r10,r10,r20
   2bde0:	3006d43a 	srli	r3,r6,16
   2bde4:	4b13883a 	add	r9,r9,r12
   2bde8:	2ccb383a 	mul	r5,r5,r19
   2bdec:	5100022e 	bgeu	r10,r4,2bdf8 <__muldf3+0x3b8>
   2bdf0:	01000074 	movhi	r4,1
   2bdf4:	290b883a 	add	r5,r5,r4
   2bdf8:	802ad43a 	srli	r21,r16,16
   2bdfc:	843fffcc 	andi	r16,r16,65535
   2be00:	440d383a 	mul	r6,r8,r16
   2be04:	4565383a 	mul	r18,r8,r21
   2be08:	8349383a 	mul	r4,r16,r13
   2be0c:	500e943a 	slli	r7,r10,16
   2be10:	3010d43a 	srli	r8,r6,16
   2be14:	5028d43a 	srli	r20,r10,16
   2be18:	2489883a 	add	r4,r4,r18
   2be1c:	8abfffcc 	andi	r10,r17,65535
   2be20:	3a95883a 	add	r10,r7,r10
   2be24:	4119883a 	add	r12,r8,r4
   2be28:	a169883a 	add	r20,r20,r5
   2be2c:	1a87883a 	add	r3,r3,r10
   2be30:	6d5b383a 	mul	r13,r13,r21
   2be34:	6480022e 	bgeu	r12,r18,2be40 <__muldf3+0x400>
   2be38:	01000074 	movhi	r4,1
   2be3c:	691b883a 	add	r13,r13,r4
   2be40:	7c25383a 	mul	r18,r15,r16
   2be44:	7d4b383a 	mul	r5,r15,r21
   2be48:	84cf383a 	mul	r7,r16,r19
   2be4c:	901ed43a 	srli	r15,r18,16
   2be50:	6008d43a 	srli	r4,r12,16
   2be54:	6010943a 	slli	r8,r12,16
   2be58:	394f883a 	add	r7,r7,r5
   2be5c:	333fffcc 	andi	r12,r6,65535
   2be60:	79df883a 	add	r15,r15,r7
   2be64:	235b883a 	add	r13,r4,r13
   2be68:	9d63383a 	mul	r17,r19,r21
   2be6c:	4309883a 	add	r4,r8,r12
   2be70:	7940022e 	bgeu	r15,r5,2be7c <__muldf3+0x43c>
   2be74:	01400074 	movhi	r5,1
   2be78:	8963883a 	add	r17,r17,r5
   2be7c:	780a943a 	slli	r5,r15,16
   2be80:	91bfffcc 	andi	r6,r18,65535
   2be84:	70c7883a 	add	r3,r14,r3
   2be88:	298d883a 	add	r6,r5,r6
   2be8c:	1a8f803a 	cmpltu	r7,r3,r10
   2be90:	350b883a 	add	r5,r6,r20
   2be94:	20c7883a 	add	r3,r4,r3
   2be98:	3955883a 	add	r10,r7,r5
   2be9c:	1909803a 	cmpltu	r4,r3,r4
   2bea0:	6a91883a 	add	r8,r13,r10
   2bea4:	780cd43a 	srli	r6,r15,16
   2bea8:	2219883a 	add	r12,r4,r8
   2beac:	2d0b803a 	cmpltu	r5,r5,r20
   2beb0:	51cf803a 	cmpltu	r7,r10,r7
   2beb4:	29ceb03a 	or	r7,r5,r7
   2beb8:	4351803a 	cmpltu	r8,r8,r13
   2bebc:	610b803a 	cmpltu	r5,r12,r4
   2bec0:	4148b03a 	or	r4,r8,r5
   2bec4:	398f883a 	add	r7,r7,r6
   2bec8:	3909883a 	add	r4,r7,r4
   2becc:	1810927a 	slli	r8,r3,9
   2bed0:	2449883a 	add	r4,r4,r17
   2bed4:	2008927a 	slli	r4,r4,9
   2bed8:	6022d5fa 	srli	r17,r12,23
   2bedc:	1806d5fa 	srli	r3,r3,23
   2bee0:	4252b03a 	or	r9,r8,r9
   2bee4:	600a927a 	slli	r5,r12,9
   2bee8:	4810c03a 	cmpne	r8,r9,zero
   2beec:	2462b03a 	or	r17,r4,r17
   2bef0:	40c6b03a 	or	r3,r8,r3
   2bef4:	8900402c 	andhi	r4,r17,256
   2bef8:	1950b03a 	or	r8,r3,r5
   2befc:	20000726 	beq	r4,zero,2bf1c <__muldf3+0x4dc>
   2bf00:	4006d07a 	srli	r3,r8,1
   2bf04:	880497fa 	slli	r2,r17,31
   2bf08:	4200004c 	andi	r8,r8,1
   2bf0c:	8822d07a 	srli	r17,r17,1
   2bf10:	1a10b03a 	or	r8,r3,r8
   2bf14:	1210b03a 	or	r8,r2,r8
   2bf18:	5805883a 	mov	r2,r11
   2bf1c:	1140ffc4 	addi	r5,r2,1023
   2bf20:	0140440e 	bge	zero,r5,2c034 <__muldf3+0x5f4>
   2bf24:	40c001cc 	andi	r3,r8,7
   2bf28:	18000726 	beq	r3,zero,2bf48 <__muldf3+0x508>
   2bf2c:	40c003cc 	andi	r3,r8,15
   2bf30:	01000104 	movi	r4,4
   2bf34:	19000426 	beq	r3,r4,2bf48 <__muldf3+0x508>
   2bf38:	4107883a 	add	r3,r8,r4
   2bf3c:	1a11803a 	cmpltu	r8,r3,r8
   2bf40:	8a23883a 	add	r17,r17,r8
   2bf44:	1811883a 	mov	r8,r3
   2bf48:	88c0402c 	andhi	r3,r17,256
   2bf4c:	18000426 	beq	r3,zero,2bf60 <__muldf3+0x520>
   2bf50:	11410004 	addi	r5,r2,1024
   2bf54:	00bfc034 	movhi	r2,65280
   2bf58:	10bfffc4 	addi	r2,r2,-1
   2bf5c:	88a2703a 	and	r17,r17,r2
   2bf60:	0081ff84 	movi	r2,2046
   2bf64:	117f6416 	blt	r2,r5,2bcf8 <__alt_data_end+0xfffebcf8>
   2bf68:	8828977a 	slli	r20,r17,29
   2bf6c:	4010d0fa 	srli	r8,r8,3
   2bf70:	8822927a 	slli	r17,r17,9
   2bf74:	2881ffcc 	andi	r2,r5,2047
   2bf78:	a228b03a 	or	r20,r20,r8
   2bf7c:	880ad33a 	srli	r5,r17,12
   2bf80:	b02b883a 	mov	r21,r22
   2bf84:	003f0d06 	br	2bbbc <__alt_data_end+0xfffebbbc>
   2bf88:	8080022c 	andhi	r2,r16,8
   2bf8c:	10000926 	beq	r2,zero,2bfb4 <__muldf3+0x574>
   2bf90:	8880022c 	andhi	r2,r17,8
   2bf94:	1000071e 	bne	r2,zero,2bfb4 <__muldf3+0x574>
   2bf98:	00800434 	movhi	r2,16
   2bf9c:	89400234 	orhi	r5,r17,8
   2bfa0:	10bfffc4 	addi	r2,r2,-1
   2bfa4:	b82b883a 	mov	r21,r23
   2bfa8:	288a703a 	and	r5,r5,r2
   2bfac:	4029883a 	mov	r20,r8
   2bfb0:	003f6806 	br	2bd54 <__alt_data_end+0xfffebd54>
   2bfb4:	00800434 	movhi	r2,16
   2bfb8:	81400234 	orhi	r5,r16,8
   2bfbc:	10bfffc4 	addi	r2,r2,-1
   2bfc0:	288a703a 	and	r5,r5,r2
   2bfc4:	003f6306 	br	2bd54 <__alt_data_end+0xfffebd54>
   2bfc8:	147ff604 	addi	r17,r2,-40
   2bfcc:	3462983a 	sll	r17,r6,r17
   2bfd0:	0011883a 	mov	r8,zero
   2bfd4:	003f4406 	br	2bce8 <__alt_data_end+0xfffebce8>
   2bfd8:	3009883a 	mov	r4,r6
   2bfdc:	d9800215 	stw	r6,8(sp)
   2bfe0:	da400115 	stw	r9,4(sp)
   2bfe4:	da800015 	stw	r10,0(sp)
   2bfe8:	002cc580 	call	2cc58 <__clzsi2>
   2bfec:	10800804 	addi	r2,r2,32
   2bff0:	da800017 	ldw	r10,0(sp)
   2bff4:	da400117 	ldw	r9,4(sp)
   2bff8:	d9800217 	ldw	r6,8(sp)
   2bffc:	003f3006 	br	2bcc0 <__alt_data_end+0xfffebcc0>
   2c000:	143ff604 	addi	r16,r2,-40
   2c004:	9c20983a 	sll	r16,r19,r16
   2c008:	0029883a 	mov	r20,zero
   2c00c:	003f1606 	br	2bc68 <__alt_data_end+0xfffebc68>
   2c010:	d9800215 	stw	r6,8(sp)
   2c014:	d9c00015 	stw	r7,0(sp)
   2c018:	da400115 	stw	r9,4(sp)
   2c01c:	002cc580 	call	2cc58 <__clzsi2>
   2c020:	10800804 	addi	r2,r2,32
   2c024:	da400117 	ldw	r9,4(sp)
   2c028:	d9c00017 	ldw	r7,0(sp)
   2c02c:	d9800217 	ldw	r6,8(sp)
   2c030:	003f0306 	br	2bc40 <__alt_data_end+0xfffebc40>
   2c034:	00c00044 	movi	r3,1
   2c038:	1947c83a 	sub	r3,r3,r5
   2c03c:	00800e04 	movi	r2,56
   2c040:	10feda16 	blt	r2,r3,2bbac <__alt_data_end+0xfffebbac>
   2c044:	008007c4 	movi	r2,31
   2c048:	10c01b16 	blt	r2,r3,2c0b8 <__muldf3+0x678>
   2c04c:	00800804 	movi	r2,32
   2c050:	10c5c83a 	sub	r2,r2,r3
   2c054:	888a983a 	sll	r5,r17,r2
   2c058:	40c8d83a 	srl	r4,r8,r3
   2c05c:	4084983a 	sll	r2,r8,r2
   2c060:	88e2d83a 	srl	r17,r17,r3
   2c064:	2906b03a 	or	r3,r5,r4
   2c068:	1004c03a 	cmpne	r2,r2,zero
   2c06c:	1886b03a 	or	r3,r3,r2
   2c070:	188001cc 	andi	r2,r3,7
   2c074:	10000726 	beq	r2,zero,2c094 <__muldf3+0x654>
   2c078:	188003cc 	andi	r2,r3,15
   2c07c:	01000104 	movi	r4,4
   2c080:	11000426 	beq	r2,r4,2c094 <__muldf3+0x654>
   2c084:	1805883a 	mov	r2,r3
   2c088:	10c00104 	addi	r3,r2,4
   2c08c:	1885803a 	cmpltu	r2,r3,r2
   2c090:	88a3883a 	add	r17,r17,r2
   2c094:	8880202c 	andhi	r2,r17,128
   2c098:	10001c26 	beq	r2,zero,2c10c <__muldf3+0x6cc>
   2c09c:	b02b883a 	mov	r21,r22
   2c0a0:	00800044 	movi	r2,1
   2c0a4:	000b883a 	mov	r5,zero
   2c0a8:	0029883a 	mov	r20,zero
   2c0ac:	003ec306 	br	2bbbc <__alt_data_end+0xfffebbbc>
   2c0b0:	5805883a 	mov	r2,r11
   2c0b4:	003f9906 	br	2bf1c <__alt_data_end+0xfffebf1c>
   2c0b8:	00bff844 	movi	r2,-31
   2c0bc:	1145c83a 	sub	r2,r2,r5
   2c0c0:	8888d83a 	srl	r4,r17,r2
   2c0c4:	00800804 	movi	r2,32
   2c0c8:	18801a26 	beq	r3,r2,2c134 <__muldf3+0x6f4>
   2c0cc:	00801004 	movi	r2,64
   2c0d0:	10c5c83a 	sub	r2,r2,r3
   2c0d4:	8884983a 	sll	r2,r17,r2
   2c0d8:	1204b03a 	or	r2,r2,r8
   2c0dc:	1004c03a 	cmpne	r2,r2,zero
   2c0e0:	2084b03a 	or	r2,r4,r2
   2c0e4:	144001cc 	andi	r17,r2,7
   2c0e8:	88000d1e 	bne	r17,zero,2c120 <__muldf3+0x6e0>
   2c0ec:	000b883a 	mov	r5,zero
   2c0f0:	1028d0fa 	srli	r20,r2,3
   2c0f4:	b02b883a 	mov	r21,r22
   2c0f8:	0005883a 	mov	r2,zero
   2c0fc:	a468b03a 	or	r20,r20,r17
   2c100:	003eae06 	br	2bbbc <__alt_data_end+0xfffebbbc>
   2c104:	1007883a 	mov	r3,r2
   2c108:	0023883a 	mov	r17,zero
   2c10c:	880a927a 	slli	r5,r17,9
   2c110:	1805883a 	mov	r2,r3
   2c114:	8822977a 	slli	r17,r17,29
   2c118:	280ad33a 	srli	r5,r5,12
   2c11c:	003ff406 	br	2c0f0 <__alt_data_end+0xfffec0f0>
   2c120:	10c003cc 	andi	r3,r2,15
   2c124:	01000104 	movi	r4,4
   2c128:	193ff626 	beq	r3,r4,2c104 <__alt_data_end+0xfffec104>
   2c12c:	0023883a 	mov	r17,zero
   2c130:	003fd506 	br	2c088 <__alt_data_end+0xfffec088>
   2c134:	0005883a 	mov	r2,zero
   2c138:	003fe706 	br	2c0d8 <__alt_data_end+0xfffec0d8>
   2c13c:	00800434 	movhi	r2,16
   2c140:	89400234 	orhi	r5,r17,8
   2c144:	10bfffc4 	addi	r2,r2,-1
   2c148:	b02b883a 	mov	r21,r22
   2c14c:	288a703a 	and	r5,r5,r2
   2c150:	4029883a 	mov	r20,r8
   2c154:	003eff06 	br	2bd54 <__alt_data_end+0xfffebd54>

0002c158 <__subdf3>:
   2c158:	02000434 	movhi	r8,16
   2c15c:	423fffc4 	addi	r8,r8,-1
   2c160:	defffb04 	addi	sp,sp,-20
   2c164:	2a14703a 	and	r10,r5,r8
   2c168:	3812d53a 	srli	r9,r7,20
   2c16c:	3a10703a 	and	r8,r7,r8
   2c170:	2006d77a 	srli	r3,r4,29
   2c174:	3004d77a 	srli	r2,r6,29
   2c178:	dc000015 	stw	r16,0(sp)
   2c17c:	501490fa 	slli	r10,r10,3
   2c180:	2820d53a 	srli	r16,r5,20
   2c184:	401090fa 	slli	r8,r8,3
   2c188:	dc800215 	stw	r18,8(sp)
   2c18c:	dc400115 	stw	r17,4(sp)
   2c190:	dfc00415 	stw	ra,16(sp)
   2c194:	202290fa 	slli	r17,r4,3
   2c198:	dcc00315 	stw	r19,12(sp)
   2c19c:	4a41ffcc 	andi	r9,r9,2047
   2c1a0:	0101ffc4 	movi	r4,2047
   2c1a4:	2824d7fa 	srli	r18,r5,31
   2c1a8:	8401ffcc 	andi	r16,r16,2047
   2c1ac:	50c6b03a 	or	r3,r10,r3
   2c1b0:	380ed7fa 	srli	r7,r7,31
   2c1b4:	408ab03a 	or	r5,r8,r2
   2c1b8:	300c90fa 	slli	r6,r6,3
   2c1bc:	49009626 	beq	r9,r4,2c418 <__subdf3+0x2c0>
   2c1c0:	39c0005c 	xori	r7,r7,1
   2c1c4:	8245c83a 	sub	r2,r16,r9
   2c1c8:	3c807426 	beq	r7,r18,2c39c <__subdf3+0x244>
   2c1cc:	0080af0e 	bge	zero,r2,2c48c <__subdf3+0x334>
   2c1d0:	48002a1e 	bne	r9,zero,2c27c <__subdf3+0x124>
   2c1d4:	2988b03a 	or	r4,r5,r6
   2c1d8:	20009a1e 	bne	r4,zero,2c444 <__subdf3+0x2ec>
   2c1dc:	888001cc 	andi	r2,r17,7
   2c1e0:	10000726 	beq	r2,zero,2c200 <__subdf3+0xa8>
   2c1e4:	888003cc 	andi	r2,r17,15
   2c1e8:	01000104 	movi	r4,4
   2c1ec:	11000426 	beq	r2,r4,2c200 <__subdf3+0xa8>
   2c1f0:	890b883a 	add	r5,r17,r4
   2c1f4:	2c63803a 	cmpltu	r17,r5,r17
   2c1f8:	1c47883a 	add	r3,r3,r17
   2c1fc:	2823883a 	mov	r17,r5
   2c200:	1880202c 	andhi	r2,r3,128
   2c204:	10005926 	beq	r2,zero,2c36c <__subdf3+0x214>
   2c208:	84000044 	addi	r16,r16,1
   2c20c:	0081ffc4 	movi	r2,2047
   2c210:	8080be26 	beq	r16,r2,2c50c <__subdf3+0x3b4>
   2c214:	017fe034 	movhi	r5,65408
   2c218:	297fffc4 	addi	r5,r5,-1
   2c21c:	1946703a 	and	r3,r3,r5
   2c220:	1804977a 	slli	r2,r3,29
   2c224:	1806927a 	slli	r3,r3,9
   2c228:	8822d0fa 	srli	r17,r17,3
   2c22c:	8401ffcc 	andi	r16,r16,2047
   2c230:	180ad33a 	srli	r5,r3,12
   2c234:	9100004c 	andi	r4,r18,1
   2c238:	1444b03a 	or	r2,r2,r17
   2c23c:	80c1ffcc 	andi	r3,r16,2047
   2c240:	1820953a 	slli	r16,r3,20
   2c244:	20c03fcc 	andi	r3,r4,255
   2c248:	180897fa 	slli	r4,r3,31
   2c24c:	00c00434 	movhi	r3,16
   2c250:	18ffffc4 	addi	r3,r3,-1
   2c254:	28c6703a 	and	r3,r5,r3
   2c258:	1c06b03a 	or	r3,r3,r16
   2c25c:	1906b03a 	or	r3,r3,r4
   2c260:	dfc00417 	ldw	ra,16(sp)
   2c264:	dcc00317 	ldw	r19,12(sp)
   2c268:	dc800217 	ldw	r18,8(sp)
   2c26c:	dc400117 	ldw	r17,4(sp)
   2c270:	dc000017 	ldw	r16,0(sp)
   2c274:	dec00504 	addi	sp,sp,20
   2c278:	f800283a 	ret
   2c27c:	0101ffc4 	movi	r4,2047
   2c280:	813fd626 	beq	r16,r4,2c1dc <__alt_data_end+0xfffec1dc>
   2c284:	29402034 	orhi	r5,r5,128
   2c288:	01000e04 	movi	r4,56
   2c28c:	2080a316 	blt	r4,r2,2c51c <__subdf3+0x3c4>
   2c290:	010007c4 	movi	r4,31
   2c294:	2080c616 	blt	r4,r2,2c5b0 <__subdf3+0x458>
   2c298:	01000804 	movi	r4,32
   2c29c:	2089c83a 	sub	r4,r4,r2
   2c2a0:	2910983a 	sll	r8,r5,r4
   2c2a4:	308ed83a 	srl	r7,r6,r2
   2c2a8:	3108983a 	sll	r4,r6,r4
   2c2ac:	2884d83a 	srl	r2,r5,r2
   2c2b0:	41ccb03a 	or	r6,r8,r7
   2c2b4:	2008c03a 	cmpne	r4,r4,zero
   2c2b8:	310cb03a 	or	r6,r6,r4
   2c2bc:	898dc83a 	sub	r6,r17,r6
   2c2c0:	89a3803a 	cmpltu	r17,r17,r6
   2c2c4:	1887c83a 	sub	r3,r3,r2
   2c2c8:	1c47c83a 	sub	r3,r3,r17
   2c2cc:	3023883a 	mov	r17,r6
   2c2d0:	1880202c 	andhi	r2,r3,128
   2c2d4:	10002326 	beq	r2,zero,2c364 <__subdf3+0x20c>
   2c2d8:	04c02034 	movhi	r19,128
   2c2dc:	9cffffc4 	addi	r19,r19,-1
   2c2e0:	1ce6703a 	and	r19,r3,r19
   2c2e4:	98007a26 	beq	r19,zero,2c4d0 <__subdf3+0x378>
   2c2e8:	9809883a 	mov	r4,r19
   2c2ec:	002cc580 	call	2cc58 <__clzsi2>
   2c2f0:	113ffe04 	addi	r4,r2,-8
   2c2f4:	00c007c4 	movi	r3,31
   2c2f8:	19007b16 	blt	r3,r4,2c4e8 <__subdf3+0x390>
   2c2fc:	00800804 	movi	r2,32
   2c300:	1105c83a 	sub	r2,r2,r4
   2c304:	8884d83a 	srl	r2,r17,r2
   2c308:	9906983a 	sll	r3,r19,r4
   2c30c:	8922983a 	sll	r17,r17,r4
   2c310:	10c4b03a 	or	r2,r2,r3
   2c314:	24007816 	blt	r4,r16,2c4f8 <__subdf3+0x3a0>
   2c318:	2421c83a 	sub	r16,r4,r16
   2c31c:	80c00044 	addi	r3,r16,1
   2c320:	010007c4 	movi	r4,31
   2c324:	20c09516 	blt	r4,r3,2c57c <__subdf3+0x424>
   2c328:	01400804 	movi	r5,32
   2c32c:	28cbc83a 	sub	r5,r5,r3
   2c330:	88c8d83a 	srl	r4,r17,r3
   2c334:	8962983a 	sll	r17,r17,r5
   2c338:	114a983a 	sll	r5,r2,r5
   2c33c:	10c6d83a 	srl	r3,r2,r3
   2c340:	8804c03a 	cmpne	r2,r17,zero
   2c344:	290ab03a 	or	r5,r5,r4
   2c348:	28a2b03a 	or	r17,r5,r2
   2c34c:	0021883a 	mov	r16,zero
   2c350:	003fa206 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c354:	2090b03a 	or	r8,r4,r2
   2c358:	40018e26 	beq	r8,zero,2c994 <__subdf3+0x83c>
   2c35c:	1007883a 	mov	r3,r2
   2c360:	2023883a 	mov	r17,r4
   2c364:	888001cc 	andi	r2,r17,7
   2c368:	103f9e1e 	bne	r2,zero,2c1e4 <__alt_data_end+0xfffec1e4>
   2c36c:	1804977a 	slli	r2,r3,29
   2c370:	8822d0fa 	srli	r17,r17,3
   2c374:	1810d0fa 	srli	r8,r3,3
   2c378:	9100004c 	andi	r4,r18,1
   2c37c:	1444b03a 	or	r2,r2,r17
   2c380:	00c1ffc4 	movi	r3,2047
   2c384:	80c02826 	beq	r16,r3,2c428 <__subdf3+0x2d0>
   2c388:	01400434 	movhi	r5,16
   2c38c:	297fffc4 	addi	r5,r5,-1
   2c390:	80e0703a 	and	r16,r16,r3
   2c394:	414a703a 	and	r5,r8,r5
   2c398:	003fa806 	br	2c23c <__alt_data_end+0xfffec23c>
   2c39c:	0080630e 	bge	zero,r2,2c52c <__subdf3+0x3d4>
   2c3a0:	48003026 	beq	r9,zero,2c464 <__subdf3+0x30c>
   2c3a4:	0101ffc4 	movi	r4,2047
   2c3a8:	813f8c26 	beq	r16,r4,2c1dc <__alt_data_end+0xfffec1dc>
   2c3ac:	29402034 	orhi	r5,r5,128
   2c3b0:	01000e04 	movi	r4,56
   2c3b4:	2080a90e 	bge	r4,r2,2c65c <__subdf3+0x504>
   2c3b8:	298cb03a 	or	r6,r5,r6
   2c3bc:	3012c03a 	cmpne	r9,r6,zero
   2c3c0:	0005883a 	mov	r2,zero
   2c3c4:	4c53883a 	add	r9,r9,r17
   2c3c8:	4c63803a 	cmpltu	r17,r9,r17
   2c3cc:	10c7883a 	add	r3,r2,r3
   2c3d0:	88c7883a 	add	r3,r17,r3
   2c3d4:	4823883a 	mov	r17,r9
   2c3d8:	1880202c 	andhi	r2,r3,128
   2c3dc:	1000d026 	beq	r2,zero,2c720 <__subdf3+0x5c8>
   2c3e0:	84000044 	addi	r16,r16,1
   2c3e4:	0081ffc4 	movi	r2,2047
   2c3e8:	8080fe26 	beq	r16,r2,2c7e4 <__subdf3+0x68c>
   2c3ec:	00bfe034 	movhi	r2,65408
   2c3f0:	10bfffc4 	addi	r2,r2,-1
   2c3f4:	1886703a 	and	r3,r3,r2
   2c3f8:	880ad07a 	srli	r5,r17,1
   2c3fc:	180497fa 	slli	r2,r3,31
   2c400:	8900004c 	andi	r4,r17,1
   2c404:	2922b03a 	or	r17,r5,r4
   2c408:	1806d07a 	srli	r3,r3,1
   2c40c:	1462b03a 	or	r17,r2,r17
   2c410:	3825883a 	mov	r18,r7
   2c414:	003f7106 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c418:	2984b03a 	or	r2,r5,r6
   2c41c:	103f6826 	beq	r2,zero,2c1c0 <__alt_data_end+0xfffec1c0>
   2c420:	39c03fcc 	andi	r7,r7,255
   2c424:	003f6706 	br	2c1c4 <__alt_data_end+0xfffec1c4>
   2c428:	4086b03a 	or	r3,r8,r2
   2c42c:	18015226 	beq	r3,zero,2c978 <__subdf3+0x820>
   2c430:	00c00434 	movhi	r3,16
   2c434:	41400234 	orhi	r5,r8,8
   2c438:	18ffffc4 	addi	r3,r3,-1
   2c43c:	28ca703a 	and	r5,r5,r3
   2c440:	003f7e06 	br	2c23c <__alt_data_end+0xfffec23c>
   2c444:	10bfffc4 	addi	r2,r2,-1
   2c448:	1000491e 	bne	r2,zero,2c570 <__subdf3+0x418>
   2c44c:	898fc83a 	sub	r7,r17,r6
   2c450:	89e3803a 	cmpltu	r17,r17,r7
   2c454:	1947c83a 	sub	r3,r3,r5
   2c458:	1c47c83a 	sub	r3,r3,r17
   2c45c:	3823883a 	mov	r17,r7
   2c460:	003f9b06 	br	2c2d0 <__alt_data_end+0xfffec2d0>
   2c464:	2988b03a 	or	r4,r5,r6
   2c468:	203f5c26 	beq	r4,zero,2c1dc <__alt_data_end+0xfffec1dc>
   2c46c:	10bfffc4 	addi	r2,r2,-1
   2c470:	1000931e 	bne	r2,zero,2c6c0 <__subdf3+0x568>
   2c474:	898d883a 	add	r6,r17,r6
   2c478:	3463803a 	cmpltu	r17,r6,r17
   2c47c:	1947883a 	add	r3,r3,r5
   2c480:	88c7883a 	add	r3,r17,r3
   2c484:	3023883a 	mov	r17,r6
   2c488:	003fd306 	br	2c3d8 <__alt_data_end+0xfffec3d8>
   2c48c:	1000541e 	bne	r2,zero,2c5e0 <__subdf3+0x488>
   2c490:	80800044 	addi	r2,r16,1
   2c494:	1081ffcc 	andi	r2,r2,2047
   2c498:	01000044 	movi	r4,1
   2c49c:	2080a20e 	bge	r4,r2,2c728 <__subdf3+0x5d0>
   2c4a0:	8989c83a 	sub	r4,r17,r6
   2c4a4:	8905803a 	cmpltu	r2,r17,r4
   2c4a8:	1967c83a 	sub	r19,r3,r5
   2c4ac:	98a7c83a 	sub	r19,r19,r2
   2c4b0:	9880202c 	andhi	r2,r19,128
   2c4b4:	10006326 	beq	r2,zero,2c644 <__subdf3+0x4ec>
   2c4b8:	3463c83a 	sub	r17,r6,r17
   2c4bc:	28c7c83a 	sub	r3,r5,r3
   2c4c0:	344d803a 	cmpltu	r6,r6,r17
   2c4c4:	19a7c83a 	sub	r19,r3,r6
   2c4c8:	3825883a 	mov	r18,r7
   2c4cc:	983f861e 	bne	r19,zero,2c2e8 <__alt_data_end+0xfffec2e8>
   2c4d0:	8809883a 	mov	r4,r17
   2c4d4:	002cc580 	call	2cc58 <__clzsi2>
   2c4d8:	10800804 	addi	r2,r2,32
   2c4dc:	113ffe04 	addi	r4,r2,-8
   2c4e0:	00c007c4 	movi	r3,31
   2c4e4:	193f850e 	bge	r3,r4,2c2fc <__alt_data_end+0xfffec2fc>
   2c4e8:	10bff604 	addi	r2,r2,-40
   2c4ec:	8884983a 	sll	r2,r17,r2
   2c4f0:	0023883a 	mov	r17,zero
   2c4f4:	243f880e 	bge	r4,r16,2c318 <__alt_data_end+0xfffec318>
   2c4f8:	00ffe034 	movhi	r3,65408
   2c4fc:	18ffffc4 	addi	r3,r3,-1
   2c500:	8121c83a 	sub	r16,r16,r4
   2c504:	10c6703a 	and	r3,r2,r3
   2c508:	003f3406 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c50c:	9100004c 	andi	r4,r18,1
   2c510:	000b883a 	mov	r5,zero
   2c514:	0005883a 	mov	r2,zero
   2c518:	003f4806 	br	2c23c <__alt_data_end+0xfffec23c>
   2c51c:	298cb03a 	or	r6,r5,r6
   2c520:	300cc03a 	cmpne	r6,r6,zero
   2c524:	0005883a 	mov	r2,zero
   2c528:	003f6406 	br	2c2bc <__alt_data_end+0xfffec2bc>
   2c52c:	10009a1e 	bne	r2,zero,2c798 <__subdf3+0x640>
   2c530:	82400044 	addi	r9,r16,1
   2c534:	4881ffcc 	andi	r2,r9,2047
   2c538:	02800044 	movi	r10,1
   2c53c:	5080670e 	bge	r10,r2,2c6dc <__subdf3+0x584>
   2c540:	0081ffc4 	movi	r2,2047
   2c544:	4880af26 	beq	r9,r2,2c804 <__subdf3+0x6ac>
   2c548:	898d883a 	add	r6,r17,r6
   2c54c:	1945883a 	add	r2,r3,r5
   2c550:	3447803a 	cmpltu	r3,r6,r17
   2c554:	1887883a 	add	r3,r3,r2
   2c558:	182297fa 	slli	r17,r3,31
   2c55c:	300cd07a 	srli	r6,r6,1
   2c560:	1806d07a 	srli	r3,r3,1
   2c564:	4821883a 	mov	r16,r9
   2c568:	89a2b03a 	or	r17,r17,r6
   2c56c:	003f1b06 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c570:	0101ffc4 	movi	r4,2047
   2c574:	813f441e 	bne	r16,r4,2c288 <__alt_data_end+0xfffec288>
   2c578:	003f1806 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c57c:	843ff844 	addi	r16,r16,-31
   2c580:	01400804 	movi	r5,32
   2c584:	1408d83a 	srl	r4,r2,r16
   2c588:	19405026 	beq	r3,r5,2c6cc <__subdf3+0x574>
   2c58c:	01401004 	movi	r5,64
   2c590:	28c7c83a 	sub	r3,r5,r3
   2c594:	10c4983a 	sll	r2,r2,r3
   2c598:	88a2b03a 	or	r17,r17,r2
   2c59c:	8822c03a 	cmpne	r17,r17,zero
   2c5a0:	2462b03a 	or	r17,r4,r17
   2c5a4:	0007883a 	mov	r3,zero
   2c5a8:	0021883a 	mov	r16,zero
   2c5ac:	003f6d06 	br	2c364 <__alt_data_end+0xfffec364>
   2c5b0:	11fff804 	addi	r7,r2,-32
   2c5b4:	01000804 	movi	r4,32
   2c5b8:	29ced83a 	srl	r7,r5,r7
   2c5bc:	11004526 	beq	r2,r4,2c6d4 <__subdf3+0x57c>
   2c5c0:	01001004 	movi	r4,64
   2c5c4:	2089c83a 	sub	r4,r4,r2
   2c5c8:	2904983a 	sll	r2,r5,r4
   2c5cc:	118cb03a 	or	r6,r2,r6
   2c5d0:	300cc03a 	cmpne	r6,r6,zero
   2c5d4:	398cb03a 	or	r6,r7,r6
   2c5d8:	0005883a 	mov	r2,zero
   2c5dc:	003f3706 	br	2c2bc <__alt_data_end+0xfffec2bc>
   2c5e0:	80002a26 	beq	r16,zero,2c68c <__subdf3+0x534>
   2c5e4:	0101ffc4 	movi	r4,2047
   2c5e8:	49006626 	beq	r9,r4,2c784 <__subdf3+0x62c>
   2c5ec:	0085c83a 	sub	r2,zero,r2
   2c5f0:	18c02034 	orhi	r3,r3,128
   2c5f4:	01000e04 	movi	r4,56
   2c5f8:	20807e16 	blt	r4,r2,2c7f4 <__subdf3+0x69c>
   2c5fc:	010007c4 	movi	r4,31
   2c600:	2080e716 	blt	r4,r2,2c9a0 <__subdf3+0x848>
   2c604:	01000804 	movi	r4,32
   2c608:	2089c83a 	sub	r4,r4,r2
   2c60c:	1914983a 	sll	r10,r3,r4
   2c610:	8890d83a 	srl	r8,r17,r2
   2c614:	8908983a 	sll	r4,r17,r4
   2c618:	1884d83a 	srl	r2,r3,r2
   2c61c:	5222b03a 	or	r17,r10,r8
   2c620:	2006c03a 	cmpne	r3,r4,zero
   2c624:	88e2b03a 	or	r17,r17,r3
   2c628:	3463c83a 	sub	r17,r6,r17
   2c62c:	2885c83a 	sub	r2,r5,r2
   2c630:	344d803a 	cmpltu	r6,r6,r17
   2c634:	1187c83a 	sub	r3,r2,r6
   2c638:	4821883a 	mov	r16,r9
   2c63c:	3825883a 	mov	r18,r7
   2c640:	003f2306 	br	2c2d0 <__alt_data_end+0xfffec2d0>
   2c644:	24d0b03a 	or	r8,r4,r19
   2c648:	40001b1e 	bne	r8,zero,2c6b8 <__subdf3+0x560>
   2c64c:	0005883a 	mov	r2,zero
   2c650:	0009883a 	mov	r4,zero
   2c654:	0021883a 	mov	r16,zero
   2c658:	003f4906 	br	2c380 <__alt_data_end+0xfffec380>
   2c65c:	010007c4 	movi	r4,31
   2c660:	20803a16 	blt	r4,r2,2c74c <__subdf3+0x5f4>
   2c664:	01000804 	movi	r4,32
   2c668:	2089c83a 	sub	r4,r4,r2
   2c66c:	2912983a 	sll	r9,r5,r4
   2c670:	3090d83a 	srl	r8,r6,r2
   2c674:	3108983a 	sll	r4,r6,r4
   2c678:	2884d83a 	srl	r2,r5,r2
   2c67c:	4a12b03a 	or	r9,r9,r8
   2c680:	2008c03a 	cmpne	r4,r4,zero
   2c684:	4912b03a 	or	r9,r9,r4
   2c688:	003f4e06 	br	2c3c4 <__alt_data_end+0xfffec3c4>
   2c68c:	1c48b03a 	or	r4,r3,r17
   2c690:	20003c26 	beq	r4,zero,2c784 <__subdf3+0x62c>
   2c694:	0084303a 	nor	r2,zero,r2
   2c698:	1000381e 	bne	r2,zero,2c77c <__subdf3+0x624>
   2c69c:	3463c83a 	sub	r17,r6,r17
   2c6a0:	28c5c83a 	sub	r2,r5,r3
   2c6a4:	344d803a 	cmpltu	r6,r6,r17
   2c6a8:	1187c83a 	sub	r3,r2,r6
   2c6ac:	4821883a 	mov	r16,r9
   2c6b0:	3825883a 	mov	r18,r7
   2c6b4:	003f0606 	br	2c2d0 <__alt_data_end+0xfffec2d0>
   2c6b8:	2023883a 	mov	r17,r4
   2c6bc:	003f0906 	br	2c2e4 <__alt_data_end+0xfffec2e4>
   2c6c0:	0101ffc4 	movi	r4,2047
   2c6c4:	813f3a1e 	bne	r16,r4,2c3b0 <__alt_data_end+0xfffec3b0>
   2c6c8:	003ec406 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c6cc:	0005883a 	mov	r2,zero
   2c6d0:	003fb106 	br	2c598 <__alt_data_end+0xfffec598>
   2c6d4:	0005883a 	mov	r2,zero
   2c6d8:	003fbc06 	br	2c5cc <__alt_data_end+0xfffec5cc>
   2c6dc:	1c44b03a 	or	r2,r3,r17
   2c6e0:	80008e1e 	bne	r16,zero,2c91c <__subdf3+0x7c4>
   2c6e4:	1000c826 	beq	r2,zero,2ca08 <__subdf3+0x8b0>
   2c6e8:	2984b03a 	or	r2,r5,r6
   2c6ec:	103ebb26 	beq	r2,zero,2c1dc <__alt_data_end+0xfffec1dc>
   2c6f0:	8989883a 	add	r4,r17,r6
   2c6f4:	1945883a 	add	r2,r3,r5
   2c6f8:	2447803a 	cmpltu	r3,r4,r17
   2c6fc:	1887883a 	add	r3,r3,r2
   2c700:	1880202c 	andhi	r2,r3,128
   2c704:	2023883a 	mov	r17,r4
   2c708:	103f1626 	beq	r2,zero,2c364 <__alt_data_end+0xfffec364>
   2c70c:	00bfe034 	movhi	r2,65408
   2c710:	10bfffc4 	addi	r2,r2,-1
   2c714:	5021883a 	mov	r16,r10
   2c718:	1886703a 	and	r3,r3,r2
   2c71c:	003eaf06 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c720:	3825883a 	mov	r18,r7
   2c724:	003f0f06 	br	2c364 <__alt_data_end+0xfffec364>
   2c728:	1c44b03a 	or	r2,r3,r17
   2c72c:	8000251e 	bne	r16,zero,2c7c4 <__subdf3+0x66c>
   2c730:	1000661e 	bne	r2,zero,2c8cc <__subdf3+0x774>
   2c734:	2990b03a 	or	r8,r5,r6
   2c738:	40009626 	beq	r8,zero,2c994 <__subdf3+0x83c>
   2c73c:	2807883a 	mov	r3,r5
   2c740:	3023883a 	mov	r17,r6
   2c744:	3825883a 	mov	r18,r7
   2c748:	003ea406 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c74c:	127ff804 	addi	r9,r2,-32
   2c750:	01000804 	movi	r4,32
   2c754:	2a52d83a 	srl	r9,r5,r9
   2c758:	11008c26 	beq	r2,r4,2c98c <__subdf3+0x834>
   2c75c:	01001004 	movi	r4,64
   2c760:	2085c83a 	sub	r2,r4,r2
   2c764:	2884983a 	sll	r2,r5,r2
   2c768:	118cb03a 	or	r6,r2,r6
   2c76c:	300cc03a 	cmpne	r6,r6,zero
   2c770:	4992b03a 	or	r9,r9,r6
   2c774:	0005883a 	mov	r2,zero
   2c778:	003f1206 	br	2c3c4 <__alt_data_end+0xfffec3c4>
   2c77c:	0101ffc4 	movi	r4,2047
   2c780:	493f9c1e 	bne	r9,r4,2c5f4 <__alt_data_end+0xfffec5f4>
   2c784:	2807883a 	mov	r3,r5
   2c788:	3023883a 	mov	r17,r6
   2c78c:	4821883a 	mov	r16,r9
   2c790:	3825883a 	mov	r18,r7
   2c794:	003e9106 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c798:	80001f1e 	bne	r16,zero,2c818 <__subdf3+0x6c0>
   2c79c:	1c48b03a 	or	r4,r3,r17
   2c7a0:	20005a26 	beq	r4,zero,2c90c <__subdf3+0x7b4>
   2c7a4:	0084303a 	nor	r2,zero,r2
   2c7a8:	1000561e 	bne	r2,zero,2c904 <__subdf3+0x7ac>
   2c7ac:	89a3883a 	add	r17,r17,r6
   2c7b0:	1945883a 	add	r2,r3,r5
   2c7b4:	898d803a 	cmpltu	r6,r17,r6
   2c7b8:	3087883a 	add	r3,r6,r2
   2c7bc:	4821883a 	mov	r16,r9
   2c7c0:	003f0506 	br	2c3d8 <__alt_data_end+0xfffec3d8>
   2c7c4:	10002b1e 	bne	r2,zero,2c874 <__subdf3+0x71c>
   2c7c8:	2984b03a 	or	r2,r5,r6
   2c7cc:	10008026 	beq	r2,zero,2c9d0 <__subdf3+0x878>
   2c7d0:	2807883a 	mov	r3,r5
   2c7d4:	3023883a 	mov	r17,r6
   2c7d8:	3825883a 	mov	r18,r7
   2c7dc:	0401ffc4 	movi	r16,2047
   2c7e0:	003e7e06 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c7e4:	3809883a 	mov	r4,r7
   2c7e8:	0011883a 	mov	r8,zero
   2c7ec:	0005883a 	mov	r2,zero
   2c7f0:	003ee306 	br	2c380 <__alt_data_end+0xfffec380>
   2c7f4:	1c62b03a 	or	r17,r3,r17
   2c7f8:	8822c03a 	cmpne	r17,r17,zero
   2c7fc:	0005883a 	mov	r2,zero
   2c800:	003f8906 	br	2c628 <__alt_data_end+0xfffec628>
   2c804:	3809883a 	mov	r4,r7
   2c808:	4821883a 	mov	r16,r9
   2c80c:	0011883a 	mov	r8,zero
   2c810:	0005883a 	mov	r2,zero
   2c814:	003eda06 	br	2c380 <__alt_data_end+0xfffec380>
   2c818:	0101ffc4 	movi	r4,2047
   2c81c:	49003b26 	beq	r9,r4,2c90c <__subdf3+0x7b4>
   2c820:	0085c83a 	sub	r2,zero,r2
   2c824:	18c02034 	orhi	r3,r3,128
   2c828:	01000e04 	movi	r4,56
   2c82c:	20806e16 	blt	r4,r2,2c9e8 <__subdf3+0x890>
   2c830:	010007c4 	movi	r4,31
   2c834:	20807716 	blt	r4,r2,2ca14 <__subdf3+0x8bc>
   2c838:	01000804 	movi	r4,32
   2c83c:	2089c83a 	sub	r4,r4,r2
   2c840:	1914983a 	sll	r10,r3,r4
   2c844:	8890d83a 	srl	r8,r17,r2
   2c848:	8908983a 	sll	r4,r17,r4
   2c84c:	1884d83a 	srl	r2,r3,r2
   2c850:	5222b03a 	or	r17,r10,r8
   2c854:	2006c03a 	cmpne	r3,r4,zero
   2c858:	88e2b03a 	or	r17,r17,r3
   2c85c:	89a3883a 	add	r17,r17,r6
   2c860:	1145883a 	add	r2,r2,r5
   2c864:	898d803a 	cmpltu	r6,r17,r6
   2c868:	3087883a 	add	r3,r6,r2
   2c86c:	4821883a 	mov	r16,r9
   2c870:	003ed906 	br	2c3d8 <__alt_data_end+0xfffec3d8>
   2c874:	2984b03a 	or	r2,r5,r6
   2c878:	10004226 	beq	r2,zero,2c984 <__subdf3+0x82c>
   2c87c:	1808d0fa 	srli	r4,r3,3
   2c880:	8822d0fa 	srli	r17,r17,3
   2c884:	1806977a 	slli	r3,r3,29
   2c888:	2080022c 	andhi	r2,r4,8
   2c88c:	1c62b03a 	or	r17,r3,r17
   2c890:	10000826 	beq	r2,zero,2c8b4 <__subdf3+0x75c>
   2c894:	2812d0fa 	srli	r9,r5,3
   2c898:	4880022c 	andhi	r2,r9,8
   2c89c:	1000051e 	bne	r2,zero,2c8b4 <__subdf3+0x75c>
   2c8a0:	300cd0fa 	srli	r6,r6,3
   2c8a4:	2804977a 	slli	r2,r5,29
   2c8a8:	4809883a 	mov	r4,r9
   2c8ac:	3825883a 	mov	r18,r7
   2c8b0:	11a2b03a 	or	r17,r2,r6
   2c8b4:	8806d77a 	srli	r3,r17,29
   2c8b8:	200890fa 	slli	r4,r4,3
   2c8bc:	882290fa 	slli	r17,r17,3
   2c8c0:	0401ffc4 	movi	r16,2047
   2c8c4:	1906b03a 	or	r3,r3,r4
   2c8c8:	003e4406 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c8cc:	2984b03a 	or	r2,r5,r6
   2c8d0:	103e4226 	beq	r2,zero,2c1dc <__alt_data_end+0xfffec1dc>
   2c8d4:	8989c83a 	sub	r4,r17,r6
   2c8d8:	8911803a 	cmpltu	r8,r17,r4
   2c8dc:	1945c83a 	sub	r2,r3,r5
   2c8e0:	1205c83a 	sub	r2,r2,r8
   2c8e4:	1200202c 	andhi	r8,r2,128
   2c8e8:	403e9a26 	beq	r8,zero,2c354 <__alt_data_end+0xfffec354>
   2c8ec:	3463c83a 	sub	r17,r6,r17
   2c8f0:	28c5c83a 	sub	r2,r5,r3
   2c8f4:	344d803a 	cmpltu	r6,r6,r17
   2c8f8:	1187c83a 	sub	r3,r2,r6
   2c8fc:	3825883a 	mov	r18,r7
   2c900:	003e3606 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c904:	0101ffc4 	movi	r4,2047
   2c908:	493fc71e 	bne	r9,r4,2c828 <__alt_data_end+0xfffec828>
   2c90c:	2807883a 	mov	r3,r5
   2c910:	3023883a 	mov	r17,r6
   2c914:	4821883a 	mov	r16,r9
   2c918:	003e3006 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c91c:	10003626 	beq	r2,zero,2c9f8 <__subdf3+0x8a0>
   2c920:	2984b03a 	or	r2,r5,r6
   2c924:	10001726 	beq	r2,zero,2c984 <__subdf3+0x82c>
   2c928:	1808d0fa 	srli	r4,r3,3
   2c92c:	8822d0fa 	srli	r17,r17,3
   2c930:	1806977a 	slli	r3,r3,29
   2c934:	2080022c 	andhi	r2,r4,8
   2c938:	1c62b03a 	or	r17,r3,r17
   2c93c:	10000726 	beq	r2,zero,2c95c <__subdf3+0x804>
   2c940:	2812d0fa 	srli	r9,r5,3
   2c944:	4880022c 	andhi	r2,r9,8
   2c948:	1000041e 	bne	r2,zero,2c95c <__subdf3+0x804>
   2c94c:	300cd0fa 	srli	r6,r6,3
   2c950:	2804977a 	slli	r2,r5,29
   2c954:	4809883a 	mov	r4,r9
   2c958:	11a2b03a 	or	r17,r2,r6
   2c95c:	8806d77a 	srli	r3,r17,29
   2c960:	200890fa 	slli	r4,r4,3
   2c964:	882290fa 	slli	r17,r17,3
   2c968:	3825883a 	mov	r18,r7
   2c96c:	1906b03a 	or	r3,r3,r4
   2c970:	0401ffc4 	movi	r16,2047
   2c974:	003e1906 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c978:	000b883a 	mov	r5,zero
   2c97c:	0005883a 	mov	r2,zero
   2c980:	003e2e06 	br	2c23c <__alt_data_end+0xfffec23c>
   2c984:	0401ffc4 	movi	r16,2047
   2c988:	003e1406 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2c98c:	0005883a 	mov	r2,zero
   2c990:	003f7506 	br	2c768 <__alt_data_end+0xfffec768>
   2c994:	0005883a 	mov	r2,zero
   2c998:	0009883a 	mov	r4,zero
   2c99c:	003e7806 	br	2c380 <__alt_data_end+0xfffec380>
   2c9a0:	123ff804 	addi	r8,r2,-32
   2c9a4:	01000804 	movi	r4,32
   2c9a8:	1a10d83a 	srl	r8,r3,r8
   2c9ac:	11002526 	beq	r2,r4,2ca44 <__subdf3+0x8ec>
   2c9b0:	01001004 	movi	r4,64
   2c9b4:	2085c83a 	sub	r2,r4,r2
   2c9b8:	1884983a 	sll	r2,r3,r2
   2c9bc:	1444b03a 	or	r2,r2,r17
   2c9c0:	1004c03a 	cmpne	r2,r2,zero
   2c9c4:	40a2b03a 	or	r17,r8,r2
   2c9c8:	0005883a 	mov	r2,zero
   2c9cc:	003f1606 	br	2c628 <__alt_data_end+0xfffec628>
   2c9d0:	02000434 	movhi	r8,16
   2c9d4:	0009883a 	mov	r4,zero
   2c9d8:	423fffc4 	addi	r8,r8,-1
   2c9dc:	00bfffc4 	movi	r2,-1
   2c9e0:	0401ffc4 	movi	r16,2047
   2c9e4:	003e6606 	br	2c380 <__alt_data_end+0xfffec380>
   2c9e8:	1c62b03a 	or	r17,r3,r17
   2c9ec:	8822c03a 	cmpne	r17,r17,zero
   2c9f0:	0005883a 	mov	r2,zero
   2c9f4:	003f9906 	br	2c85c <__alt_data_end+0xfffec85c>
   2c9f8:	2807883a 	mov	r3,r5
   2c9fc:	3023883a 	mov	r17,r6
   2ca00:	0401ffc4 	movi	r16,2047
   2ca04:	003df506 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2ca08:	2807883a 	mov	r3,r5
   2ca0c:	3023883a 	mov	r17,r6
   2ca10:	003df206 	br	2c1dc <__alt_data_end+0xfffec1dc>
   2ca14:	123ff804 	addi	r8,r2,-32
   2ca18:	01000804 	movi	r4,32
   2ca1c:	1a10d83a 	srl	r8,r3,r8
   2ca20:	11000a26 	beq	r2,r4,2ca4c <__subdf3+0x8f4>
   2ca24:	01001004 	movi	r4,64
   2ca28:	2085c83a 	sub	r2,r4,r2
   2ca2c:	1884983a 	sll	r2,r3,r2
   2ca30:	1444b03a 	or	r2,r2,r17
   2ca34:	1004c03a 	cmpne	r2,r2,zero
   2ca38:	40a2b03a 	or	r17,r8,r2
   2ca3c:	0005883a 	mov	r2,zero
   2ca40:	003f8606 	br	2c85c <__alt_data_end+0xfffec85c>
   2ca44:	0005883a 	mov	r2,zero
   2ca48:	003fdc06 	br	2c9bc <__alt_data_end+0xfffec9bc>
   2ca4c:	0005883a 	mov	r2,zero
   2ca50:	003ff706 	br	2ca30 <__alt_data_end+0xfffeca30>

0002ca54 <__fixdfsi>:
   2ca54:	280cd53a 	srli	r6,r5,20
   2ca58:	00c00434 	movhi	r3,16
   2ca5c:	18ffffc4 	addi	r3,r3,-1
   2ca60:	3181ffcc 	andi	r6,r6,2047
   2ca64:	01c0ff84 	movi	r7,1022
   2ca68:	28c6703a 	and	r3,r5,r3
   2ca6c:	280ad7fa 	srli	r5,r5,31
   2ca70:	3980120e 	bge	r7,r6,2cabc <__fixdfsi+0x68>
   2ca74:	00810744 	movi	r2,1053
   2ca78:	11800c16 	blt	r2,r6,2caac <__fixdfsi+0x58>
   2ca7c:	00810cc4 	movi	r2,1075
   2ca80:	1185c83a 	sub	r2,r2,r6
   2ca84:	01c007c4 	movi	r7,31
   2ca88:	18c00434 	orhi	r3,r3,16
   2ca8c:	38800d16 	blt	r7,r2,2cac4 <__fixdfsi+0x70>
   2ca90:	31befb44 	addi	r6,r6,-1043
   2ca94:	2084d83a 	srl	r2,r4,r2
   2ca98:	1986983a 	sll	r3,r3,r6
   2ca9c:	1884b03a 	or	r2,r3,r2
   2caa0:	28000726 	beq	r5,zero,2cac0 <__fixdfsi+0x6c>
   2caa4:	0085c83a 	sub	r2,zero,r2
   2caa8:	f800283a 	ret
   2caac:	00a00034 	movhi	r2,32768
   2cab0:	10bfffc4 	addi	r2,r2,-1
   2cab4:	2885883a 	add	r2,r5,r2
   2cab8:	f800283a 	ret
   2cabc:	0005883a 	mov	r2,zero
   2cac0:	f800283a 	ret
   2cac4:	008104c4 	movi	r2,1043
   2cac8:	1185c83a 	sub	r2,r2,r6
   2cacc:	1884d83a 	srl	r2,r3,r2
   2cad0:	003ff306 	br	2caa0 <__alt_data_end+0xfffecaa0>

0002cad4 <__floatsidf>:
   2cad4:	defffd04 	addi	sp,sp,-12
   2cad8:	dfc00215 	stw	ra,8(sp)
   2cadc:	dc400115 	stw	r17,4(sp)
   2cae0:	dc000015 	stw	r16,0(sp)
   2cae4:	20002b26 	beq	r4,zero,2cb94 <__floatsidf+0xc0>
   2cae8:	2023883a 	mov	r17,r4
   2caec:	2020d7fa 	srli	r16,r4,31
   2caf0:	20002d16 	blt	r4,zero,2cba8 <__floatsidf+0xd4>
   2caf4:	8809883a 	mov	r4,r17
   2caf8:	002cc580 	call	2cc58 <__clzsi2>
   2cafc:	01410784 	movi	r5,1054
   2cb00:	288bc83a 	sub	r5,r5,r2
   2cb04:	01010cc4 	movi	r4,1075
   2cb08:	2149c83a 	sub	r4,r4,r5
   2cb0c:	00c007c4 	movi	r3,31
   2cb10:	1900160e 	bge	r3,r4,2cb6c <__floatsidf+0x98>
   2cb14:	00c104c4 	movi	r3,1043
   2cb18:	1947c83a 	sub	r3,r3,r5
   2cb1c:	88c6983a 	sll	r3,r17,r3
   2cb20:	00800434 	movhi	r2,16
   2cb24:	10bfffc4 	addi	r2,r2,-1
   2cb28:	1886703a 	and	r3,r3,r2
   2cb2c:	2941ffcc 	andi	r5,r5,2047
   2cb30:	800d883a 	mov	r6,r16
   2cb34:	0005883a 	mov	r2,zero
   2cb38:	280a953a 	slli	r5,r5,20
   2cb3c:	31803fcc 	andi	r6,r6,255
   2cb40:	01000434 	movhi	r4,16
   2cb44:	300c97fa 	slli	r6,r6,31
   2cb48:	213fffc4 	addi	r4,r4,-1
   2cb4c:	1906703a 	and	r3,r3,r4
   2cb50:	1946b03a 	or	r3,r3,r5
   2cb54:	1986b03a 	or	r3,r3,r6
   2cb58:	dfc00217 	ldw	ra,8(sp)
   2cb5c:	dc400117 	ldw	r17,4(sp)
   2cb60:	dc000017 	ldw	r16,0(sp)
   2cb64:	dec00304 	addi	sp,sp,12
   2cb68:	f800283a 	ret
   2cb6c:	00c002c4 	movi	r3,11
   2cb70:	1887c83a 	sub	r3,r3,r2
   2cb74:	88c6d83a 	srl	r3,r17,r3
   2cb78:	8904983a 	sll	r2,r17,r4
   2cb7c:	01000434 	movhi	r4,16
   2cb80:	213fffc4 	addi	r4,r4,-1
   2cb84:	2941ffcc 	andi	r5,r5,2047
   2cb88:	1906703a 	and	r3,r3,r4
   2cb8c:	800d883a 	mov	r6,r16
   2cb90:	003fe906 	br	2cb38 <__alt_data_end+0xfffecb38>
   2cb94:	000d883a 	mov	r6,zero
   2cb98:	000b883a 	mov	r5,zero
   2cb9c:	0007883a 	mov	r3,zero
   2cba0:	0005883a 	mov	r2,zero
   2cba4:	003fe406 	br	2cb38 <__alt_data_end+0xfffecb38>
   2cba8:	0123c83a 	sub	r17,zero,r4
   2cbac:	003fd106 	br	2caf4 <__alt_data_end+0xfffecaf4>

0002cbb0 <__floatunsidf>:
   2cbb0:	defffe04 	addi	sp,sp,-8
   2cbb4:	dc000015 	stw	r16,0(sp)
   2cbb8:	dfc00115 	stw	ra,4(sp)
   2cbbc:	2021883a 	mov	r16,r4
   2cbc0:	20002226 	beq	r4,zero,2cc4c <__floatunsidf+0x9c>
   2cbc4:	002cc580 	call	2cc58 <__clzsi2>
   2cbc8:	01010784 	movi	r4,1054
   2cbcc:	2089c83a 	sub	r4,r4,r2
   2cbd0:	01810cc4 	movi	r6,1075
   2cbd4:	310dc83a 	sub	r6,r6,r4
   2cbd8:	00c007c4 	movi	r3,31
   2cbdc:	1980120e 	bge	r3,r6,2cc28 <__floatunsidf+0x78>
   2cbe0:	00c104c4 	movi	r3,1043
   2cbe4:	1907c83a 	sub	r3,r3,r4
   2cbe8:	80ca983a 	sll	r5,r16,r3
   2cbec:	00800434 	movhi	r2,16
   2cbf0:	10bfffc4 	addi	r2,r2,-1
   2cbf4:	2101ffcc 	andi	r4,r4,2047
   2cbf8:	0021883a 	mov	r16,zero
   2cbfc:	288a703a 	and	r5,r5,r2
   2cc00:	2008953a 	slli	r4,r4,20
   2cc04:	00c00434 	movhi	r3,16
   2cc08:	18ffffc4 	addi	r3,r3,-1
   2cc0c:	28c6703a 	and	r3,r5,r3
   2cc10:	8005883a 	mov	r2,r16
   2cc14:	1906b03a 	or	r3,r3,r4
   2cc18:	dfc00117 	ldw	ra,4(sp)
   2cc1c:	dc000017 	ldw	r16,0(sp)
   2cc20:	dec00204 	addi	sp,sp,8
   2cc24:	f800283a 	ret
   2cc28:	00c002c4 	movi	r3,11
   2cc2c:	188bc83a 	sub	r5,r3,r2
   2cc30:	814ad83a 	srl	r5,r16,r5
   2cc34:	00c00434 	movhi	r3,16
   2cc38:	18ffffc4 	addi	r3,r3,-1
   2cc3c:	81a0983a 	sll	r16,r16,r6
   2cc40:	2101ffcc 	andi	r4,r4,2047
   2cc44:	28ca703a 	and	r5,r5,r3
   2cc48:	003fed06 	br	2cc00 <__alt_data_end+0xfffecc00>
   2cc4c:	0009883a 	mov	r4,zero
   2cc50:	000b883a 	mov	r5,zero
   2cc54:	003fea06 	br	2cc00 <__alt_data_end+0xfffecc00>

0002cc58 <__clzsi2>:
   2cc58:	00bfffd4 	movui	r2,65535
   2cc5c:	11000536 	bltu	r2,r4,2cc74 <__clzsi2+0x1c>
   2cc60:	00803fc4 	movi	r2,255
   2cc64:	11000f36 	bltu	r2,r4,2cca4 <__clzsi2+0x4c>
   2cc68:	00800804 	movi	r2,32
   2cc6c:	0007883a 	mov	r3,zero
   2cc70:	00000506 	br	2cc88 <__clzsi2+0x30>
   2cc74:	00804034 	movhi	r2,256
   2cc78:	10bfffc4 	addi	r2,r2,-1
   2cc7c:	11000c2e 	bgeu	r2,r4,2ccb0 <__clzsi2+0x58>
   2cc80:	00800204 	movi	r2,8
   2cc84:	00c00604 	movi	r3,24
   2cc88:	20c8d83a 	srl	r4,r4,r3
   2cc8c:	00c000f4 	movhi	r3,3
   2cc90:	18c2ee04 	addi	r3,r3,3000
   2cc94:	1909883a 	add	r4,r3,r4
   2cc98:	20c00003 	ldbu	r3,0(r4)
   2cc9c:	10c5c83a 	sub	r2,r2,r3
   2cca0:	f800283a 	ret
   2cca4:	00800604 	movi	r2,24
   2cca8:	00c00204 	movi	r3,8
   2ccac:	003ff606 	br	2cc88 <__alt_data_end+0xfffecc88>
   2ccb0:	00800404 	movi	r2,16
   2ccb4:	1007883a 	mov	r3,r2
   2ccb8:	003ff306 	br	2cc88 <__alt_data_end+0xfffecc88>

0002ccbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ccbc:	defffe04 	addi	sp,sp,-8
   2ccc0:	dfc00115 	stw	ra,4(sp)
   2ccc4:	df000015 	stw	fp,0(sp)
   2ccc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cccc:	d0a00b17 	ldw	r2,-32724(gp)
   2ccd0:	10000326 	beq	r2,zero,2cce0 <alt_get_errno+0x24>
   2ccd4:	d0a00b17 	ldw	r2,-32724(gp)
   2ccd8:	103ee83a 	callr	r2
   2ccdc:	00000106 	br	2cce4 <alt_get_errno+0x28>
   2cce0:	d0a72204 	addi	r2,gp,-25464
}
   2cce4:	e037883a 	mov	sp,fp
   2cce8:	dfc00117 	ldw	ra,4(sp)
   2ccec:	df000017 	ldw	fp,0(sp)
   2ccf0:	dec00204 	addi	sp,sp,8
   2ccf4:	f800283a 	ret

0002ccf8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2ccf8:	defffb04 	addi	sp,sp,-20
   2ccfc:	dfc00415 	stw	ra,16(sp)
   2cd00:	df000315 	stw	fp,12(sp)
   2cd04:	df000304 	addi	fp,sp,12
   2cd08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2cd0c:	e0bfff17 	ldw	r2,-4(fp)
   2cd10:	10000616 	blt	r2,zero,2cd2c <close+0x34>
   2cd14:	e0bfff17 	ldw	r2,-4(fp)
   2cd18:	10c00324 	muli	r3,r2,12
   2cd1c:	008000f4 	movhi	r2,3
   2cd20:	10857c04 	addi	r2,r2,5616
   2cd24:	1885883a 	add	r2,r3,r2
   2cd28:	00000106 	br	2cd30 <close+0x38>
   2cd2c:	0005883a 	mov	r2,zero
   2cd30:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2cd34:	e0bffd17 	ldw	r2,-12(fp)
   2cd38:	10001926 	beq	r2,zero,2cda0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2cd3c:	e0bffd17 	ldw	r2,-12(fp)
   2cd40:	10800017 	ldw	r2,0(r2)
   2cd44:	10800417 	ldw	r2,16(r2)
   2cd48:	10000626 	beq	r2,zero,2cd64 <close+0x6c>
   2cd4c:	e0bffd17 	ldw	r2,-12(fp)
   2cd50:	10800017 	ldw	r2,0(r2)
   2cd54:	10800417 	ldw	r2,16(r2)
   2cd58:	e13ffd17 	ldw	r4,-12(fp)
   2cd5c:	103ee83a 	callr	r2
   2cd60:	00000106 	br	2cd68 <close+0x70>
   2cd64:	0005883a 	mov	r2,zero
   2cd68:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2cd6c:	e13fff17 	ldw	r4,-4(fp)
   2cd70:	002d3b80 	call	2d3b8 <alt_release_fd>
    if (rval < 0)
   2cd74:	e0bffe17 	ldw	r2,-8(fp)
   2cd78:	1000070e 	bge	r2,zero,2cd98 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2cd7c:	002ccbc0 	call	2ccbc <alt_get_errno>
   2cd80:	1007883a 	mov	r3,r2
   2cd84:	e0bffe17 	ldw	r2,-8(fp)
   2cd88:	0085c83a 	sub	r2,zero,r2
   2cd8c:	18800015 	stw	r2,0(r3)
      return -1;
   2cd90:	00bfffc4 	movi	r2,-1
   2cd94:	00000706 	br	2cdb4 <close+0xbc>
    }
    return 0;
   2cd98:	0005883a 	mov	r2,zero
   2cd9c:	00000506 	br	2cdb4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2cda0:	002ccbc0 	call	2ccbc <alt_get_errno>
   2cda4:	1007883a 	mov	r3,r2
   2cda8:	00801444 	movi	r2,81
   2cdac:	18800015 	stw	r2,0(r3)
    return -1;
   2cdb0:	00bfffc4 	movi	r2,-1
  }
}
   2cdb4:	e037883a 	mov	sp,fp
   2cdb8:	dfc00117 	ldw	ra,4(sp)
   2cdbc:	df000017 	ldw	fp,0(sp)
   2cdc0:	dec00204 	addi	sp,sp,8
   2cdc4:	f800283a 	ret

0002cdc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2cdc8:	defffc04 	addi	sp,sp,-16
   2cdcc:	df000315 	stw	fp,12(sp)
   2cdd0:	df000304 	addi	fp,sp,12
   2cdd4:	e13ffd15 	stw	r4,-12(fp)
   2cdd8:	e17ffe15 	stw	r5,-8(fp)
   2cddc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2cde0:	e0bfff17 	ldw	r2,-4(fp)
}
   2cde4:	e037883a 	mov	sp,fp
   2cde8:	df000017 	ldw	fp,0(sp)
   2cdec:	dec00104 	addi	sp,sp,4
   2cdf0:	f800283a 	ret

0002cdf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cdf4:	defffe04 	addi	sp,sp,-8
   2cdf8:	dfc00115 	stw	ra,4(sp)
   2cdfc:	df000015 	stw	fp,0(sp)
   2ce00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ce04:	d0a00b17 	ldw	r2,-32724(gp)
   2ce08:	10000326 	beq	r2,zero,2ce18 <alt_get_errno+0x24>
   2ce0c:	d0a00b17 	ldw	r2,-32724(gp)
   2ce10:	103ee83a 	callr	r2
   2ce14:	00000106 	br	2ce1c <alt_get_errno+0x28>
   2ce18:	d0a72204 	addi	r2,gp,-25464
}
   2ce1c:	e037883a 	mov	sp,fp
   2ce20:	dfc00117 	ldw	ra,4(sp)
   2ce24:	df000017 	ldw	fp,0(sp)
   2ce28:	dec00204 	addi	sp,sp,8
   2ce2c:	f800283a 	ret

0002ce30 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2ce30:	defffb04 	addi	sp,sp,-20
   2ce34:	dfc00415 	stw	ra,16(sp)
   2ce38:	df000315 	stw	fp,12(sp)
   2ce3c:	df000304 	addi	fp,sp,12
   2ce40:	e13ffe15 	stw	r4,-8(fp)
   2ce44:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ce48:	e0bffe17 	ldw	r2,-8(fp)
   2ce4c:	10000616 	blt	r2,zero,2ce68 <fstat+0x38>
   2ce50:	e0bffe17 	ldw	r2,-8(fp)
   2ce54:	10c00324 	muli	r3,r2,12
   2ce58:	008000f4 	movhi	r2,3
   2ce5c:	10857c04 	addi	r2,r2,5616
   2ce60:	1885883a 	add	r2,r3,r2
   2ce64:	00000106 	br	2ce6c <fstat+0x3c>
   2ce68:	0005883a 	mov	r2,zero
   2ce6c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2ce70:	e0bffd17 	ldw	r2,-12(fp)
   2ce74:	10001026 	beq	r2,zero,2ceb8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2ce78:	e0bffd17 	ldw	r2,-12(fp)
   2ce7c:	10800017 	ldw	r2,0(r2)
   2ce80:	10800817 	ldw	r2,32(r2)
   2ce84:	10000726 	beq	r2,zero,2cea4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2ce88:	e0bffd17 	ldw	r2,-12(fp)
   2ce8c:	10800017 	ldw	r2,0(r2)
   2ce90:	10800817 	ldw	r2,32(r2)
   2ce94:	e17fff17 	ldw	r5,-4(fp)
   2ce98:	e13ffd17 	ldw	r4,-12(fp)
   2ce9c:	103ee83a 	callr	r2
   2cea0:	00000a06 	br	2cecc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2cea4:	e0bfff17 	ldw	r2,-4(fp)
   2cea8:	00c80004 	movi	r3,8192
   2ceac:	10c00115 	stw	r3,4(r2)
      return 0;
   2ceb0:	0005883a 	mov	r2,zero
   2ceb4:	00000506 	br	2cecc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2ceb8:	002cdf40 	call	2cdf4 <alt_get_errno>
   2cebc:	1007883a 	mov	r3,r2
   2cec0:	00801444 	movi	r2,81
   2cec4:	18800015 	stw	r2,0(r3)
    return -1;
   2cec8:	00bfffc4 	movi	r2,-1
  }
}
   2cecc:	e037883a 	mov	sp,fp
   2ced0:	dfc00117 	ldw	ra,4(sp)
   2ced4:	df000017 	ldw	fp,0(sp)
   2ced8:	dec00204 	addi	sp,sp,8
   2cedc:	f800283a 	ret

0002cee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2cee0:	defffe04 	addi	sp,sp,-8
   2cee4:	dfc00115 	stw	ra,4(sp)
   2cee8:	df000015 	stw	fp,0(sp)
   2ceec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2cef0:	d0a00b17 	ldw	r2,-32724(gp)
   2cef4:	10000326 	beq	r2,zero,2cf04 <alt_get_errno+0x24>
   2cef8:	d0a00b17 	ldw	r2,-32724(gp)
   2cefc:	103ee83a 	callr	r2
   2cf00:	00000106 	br	2cf08 <alt_get_errno+0x28>
   2cf04:	d0a72204 	addi	r2,gp,-25464
}
   2cf08:	e037883a 	mov	sp,fp
   2cf0c:	dfc00117 	ldw	ra,4(sp)
   2cf10:	df000017 	ldw	fp,0(sp)
   2cf14:	dec00204 	addi	sp,sp,8
   2cf18:	f800283a 	ret

0002cf1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2cf1c:	deffed04 	addi	sp,sp,-76
   2cf20:	dfc01215 	stw	ra,72(sp)
   2cf24:	df001115 	stw	fp,68(sp)
   2cf28:	df001104 	addi	fp,sp,68
   2cf2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2cf30:	e0bfff17 	ldw	r2,-4(fp)
   2cf34:	10000616 	blt	r2,zero,2cf50 <isatty+0x34>
   2cf38:	e0bfff17 	ldw	r2,-4(fp)
   2cf3c:	10c00324 	muli	r3,r2,12
   2cf40:	008000f4 	movhi	r2,3
   2cf44:	10857c04 	addi	r2,r2,5616
   2cf48:	1885883a 	add	r2,r3,r2
   2cf4c:	00000106 	br	2cf54 <isatty+0x38>
   2cf50:	0005883a 	mov	r2,zero
   2cf54:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2cf58:	e0bfef17 	ldw	r2,-68(fp)
   2cf5c:	10000e26 	beq	r2,zero,2cf98 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2cf60:	e0bfef17 	ldw	r2,-68(fp)
   2cf64:	10800017 	ldw	r2,0(r2)
   2cf68:	10800817 	ldw	r2,32(r2)
   2cf6c:	1000021e 	bne	r2,zero,2cf78 <isatty+0x5c>
    {
      return 1;
   2cf70:	00800044 	movi	r2,1
   2cf74:	00000d06 	br	2cfac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2cf78:	e0bff004 	addi	r2,fp,-64
   2cf7c:	100b883a 	mov	r5,r2
   2cf80:	e13fff17 	ldw	r4,-4(fp)
   2cf84:	002ce300 	call	2ce30 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2cf88:	e0bff117 	ldw	r2,-60(fp)
   2cf8c:	10880020 	cmpeqi	r2,r2,8192
   2cf90:	10803fcc 	andi	r2,r2,255
   2cf94:	00000506 	br	2cfac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2cf98:	002cee00 	call	2cee0 <alt_get_errno>
   2cf9c:	1007883a 	mov	r3,r2
   2cfa0:	00801444 	movi	r2,81
   2cfa4:	18800015 	stw	r2,0(r3)
    return 0;
   2cfa8:	0005883a 	mov	r2,zero
  }
}
   2cfac:	e037883a 	mov	sp,fp
   2cfb0:	dfc00117 	ldw	ra,4(sp)
   2cfb4:	df000017 	ldw	fp,0(sp)
   2cfb8:	dec00204 	addi	sp,sp,8
   2cfbc:	f800283a 	ret

0002cfc0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2cfc0:	defffc04 	addi	sp,sp,-16
   2cfc4:	df000315 	stw	fp,12(sp)
   2cfc8:	df000304 	addi	fp,sp,12
   2cfcc:	e13ffd15 	stw	r4,-12(fp)
   2cfd0:	e17ffe15 	stw	r5,-8(fp)
   2cfd4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2cfd8:	e0fffe17 	ldw	r3,-8(fp)
   2cfdc:	e0bffd17 	ldw	r2,-12(fp)
   2cfe0:	18800c26 	beq	r3,r2,2d014 <alt_load_section+0x54>
  {
    while( to != end )
   2cfe4:	00000806 	br	2d008 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2cfe8:	e0bffe17 	ldw	r2,-8(fp)
   2cfec:	10c00104 	addi	r3,r2,4
   2cff0:	e0fffe15 	stw	r3,-8(fp)
   2cff4:	e0fffd17 	ldw	r3,-12(fp)
   2cff8:	19000104 	addi	r4,r3,4
   2cffc:	e13ffd15 	stw	r4,-12(fp)
   2d000:	18c00017 	ldw	r3,0(r3)
   2d004:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d008:	e0fffe17 	ldw	r3,-8(fp)
   2d00c:	e0bfff17 	ldw	r2,-4(fp)
   2d010:	18bff51e 	bne	r3,r2,2cfe8 <__alt_data_end+0xfffecfe8>
    {
      *to++ = *from++;
    }
  }
}
   2d014:	0001883a 	nop
   2d018:	e037883a 	mov	sp,fp
   2d01c:	df000017 	ldw	fp,0(sp)
   2d020:	dec00104 	addi	sp,sp,4
   2d024:	f800283a 	ret

0002d028 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d028:	defffe04 	addi	sp,sp,-8
   2d02c:	dfc00115 	stw	ra,4(sp)
   2d030:	df000015 	stw	fp,0(sp)
   2d034:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d038:	018000f4 	movhi	r6,3
   2d03c:	318a4f04 	addi	r6,r6,10556
   2d040:	014000f4 	movhi	r5,3
   2d044:	29434904 	addi	r5,r5,3364
   2d048:	010000f4 	movhi	r4,3
   2d04c:	210a4f04 	addi	r4,r4,10556
   2d050:	002cfc00 	call	2cfc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d054:	018000b4 	movhi	r6,2
   2d058:	31809104 	addi	r6,r6,580
   2d05c:	014000b4 	movhi	r5,2
   2d060:	29400804 	addi	r5,r5,32
   2d064:	010000b4 	movhi	r4,2
   2d068:	21000804 	addi	r4,r4,32
   2d06c:	002cfc00 	call	2cfc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d070:	018000f4 	movhi	r6,3
   2d074:	31834904 	addi	r6,r6,3364
   2d078:	014000f4 	movhi	r5,3
   2d07c:	29425204 	addi	r5,r5,2376
   2d080:	010000f4 	movhi	r4,3
   2d084:	21025204 	addi	r4,r4,2376
   2d088:	002cfc00 	call	2cfc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d08c:	002f8340 	call	2f834 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d090:	002faac0 	call	2faac <alt_icache_flush_all>
}
   2d094:	0001883a 	nop
   2d098:	e037883a 	mov	sp,fp
   2d09c:	dfc00117 	ldw	ra,4(sp)
   2d0a0:	df000017 	ldw	fp,0(sp)
   2d0a4:	dec00204 	addi	sp,sp,8
   2d0a8:	f800283a 	ret

0002d0ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d0ac:	defffe04 	addi	sp,sp,-8
   2d0b0:	dfc00115 	stw	ra,4(sp)
   2d0b4:	df000015 	stw	fp,0(sp)
   2d0b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d0bc:	d0a00b17 	ldw	r2,-32724(gp)
   2d0c0:	10000326 	beq	r2,zero,2d0d0 <alt_get_errno+0x24>
   2d0c4:	d0a00b17 	ldw	r2,-32724(gp)
   2d0c8:	103ee83a 	callr	r2
   2d0cc:	00000106 	br	2d0d4 <alt_get_errno+0x28>
   2d0d0:	d0a72204 	addi	r2,gp,-25464
}
   2d0d4:	e037883a 	mov	sp,fp
   2d0d8:	dfc00117 	ldw	ra,4(sp)
   2d0dc:	df000017 	ldw	fp,0(sp)
   2d0e0:	dec00204 	addi	sp,sp,8
   2d0e4:	f800283a 	ret

0002d0e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2d0e8:	defff904 	addi	sp,sp,-28
   2d0ec:	dfc00615 	stw	ra,24(sp)
   2d0f0:	df000515 	stw	fp,20(sp)
   2d0f4:	df000504 	addi	fp,sp,20
   2d0f8:	e13ffd15 	stw	r4,-12(fp)
   2d0fc:	e17ffe15 	stw	r5,-8(fp)
   2d100:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2d104:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d108:	e0bffd17 	ldw	r2,-12(fp)
   2d10c:	10000616 	blt	r2,zero,2d128 <lseek+0x40>
   2d110:	e0bffd17 	ldw	r2,-12(fp)
   2d114:	10c00324 	muli	r3,r2,12
   2d118:	008000f4 	movhi	r2,3
   2d11c:	10857c04 	addi	r2,r2,5616
   2d120:	1885883a 	add	r2,r3,r2
   2d124:	00000106 	br	2d12c <lseek+0x44>
   2d128:	0005883a 	mov	r2,zero
   2d12c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2d130:	e0bffc17 	ldw	r2,-16(fp)
   2d134:	10001026 	beq	r2,zero,2d178 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2d138:	e0bffc17 	ldw	r2,-16(fp)
   2d13c:	10800017 	ldw	r2,0(r2)
   2d140:	10800717 	ldw	r2,28(r2)
   2d144:	10000926 	beq	r2,zero,2d16c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2d148:	e0bffc17 	ldw	r2,-16(fp)
   2d14c:	10800017 	ldw	r2,0(r2)
   2d150:	10800717 	ldw	r2,28(r2)
   2d154:	e1bfff17 	ldw	r6,-4(fp)
   2d158:	e17ffe17 	ldw	r5,-8(fp)
   2d15c:	e13ffc17 	ldw	r4,-16(fp)
   2d160:	103ee83a 	callr	r2
   2d164:	e0bffb15 	stw	r2,-20(fp)
   2d168:	00000506 	br	2d180 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2d16c:	00bfde84 	movi	r2,-134
   2d170:	e0bffb15 	stw	r2,-20(fp)
   2d174:	00000206 	br	2d180 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2d178:	00bfebc4 	movi	r2,-81
   2d17c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2d180:	e0bffb17 	ldw	r2,-20(fp)
   2d184:	1000070e 	bge	r2,zero,2d1a4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2d188:	002d0ac0 	call	2d0ac <alt_get_errno>
   2d18c:	1007883a 	mov	r3,r2
   2d190:	e0bffb17 	ldw	r2,-20(fp)
   2d194:	0085c83a 	sub	r2,zero,r2
   2d198:	18800015 	stw	r2,0(r3)
    rc = -1;
   2d19c:	00bfffc4 	movi	r2,-1
   2d1a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2d1a4:	e0bffb17 	ldw	r2,-20(fp)
}
   2d1a8:	e037883a 	mov	sp,fp
   2d1ac:	dfc00117 	ldw	ra,4(sp)
   2d1b0:	df000017 	ldw	fp,0(sp)
   2d1b4:	dec00204 	addi	sp,sp,8
   2d1b8:	f800283a 	ret

0002d1bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2d1bc:	defffd04 	addi	sp,sp,-12
   2d1c0:	dfc00215 	stw	ra,8(sp)
   2d1c4:	df000115 	stw	fp,4(sp)
   2d1c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2d1cc:	0009883a 	mov	r4,zero
   2d1d0:	002d6d80 	call	2d6d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2d1d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2d1d8:	002d7100 	call	2d710 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2d1dc:	018000f4 	movhi	r6,3
   2d1e0:	31833104 	addi	r6,r6,3268
   2d1e4:	014000f4 	movhi	r5,3
   2d1e8:	29433104 	addi	r5,r5,3268
   2d1ec:	010000f4 	movhi	r4,3
   2d1f0:	21033104 	addi	r4,r4,3268
   2d1f4:	002fe440 	call	2fe44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2d1f8:	002f95c0 	call	2f95c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2d1fc:	010000f4 	movhi	r4,3
   2d200:	213e6f04 	addi	r4,r4,-1604
   2d204:	00305b40 	call	305b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2d208:	d0a72317 	ldw	r2,-25460(gp)
   2d20c:	d0e72417 	ldw	r3,-25456(gp)
   2d210:	d1272517 	ldw	r4,-25452(gp)
   2d214:	200d883a 	mov	r6,r4
   2d218:	180b883a 	mov	r5,r3
   2d21c:	1009883a 	mov	r4,r2
   2d220:	00202900 	call	20290 <main>
   2d224:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2d228:	01000044 	movi	r4,1
   2d22c:	002ccf80 	call	2ccf8 <close>
  exit (result);
   2d230:	e13fff17 	ldw	r4,-4(fp)
   2d234:	00305c80 	call	305c8 <exit>

0002d238 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2d238:	defffe04 	addi	sp,sp,-8
   2d23c:	df000115 	stw	fp,4(sp)
   2d240:	df000104 	addi	fp,sp,4
   2d244:	e13fff15 	stw	r4,-4(fp)
}
   2d248:	0001883a 	nop
   2d24c:	e037883a 	mov	sp,fp
   2d250:	df000017 	ldw	fp,0(sp)
   2d254:	dec00104 	addi	sp,sp,4
   2d258:	f800283a 	ret

0002d25c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2d25c:	defffe04 	addi	sp,sp,-8
   2d260:	df000115 	stw	fp,4(sp)
   2d264:	df000104 	addi	fp,sp,4
   2d268:	e13fff15 	stw	r4,-4(fp)
}
   2d26c:	0001883a 	nop
   2d270:	e037883a 	mov	sp,fp
   2d274:	df000017 	ldw	fp,0(sp)
   2d278:	dec00104 	addi	sp,sp,4
   2d27c:	f800283a 	ret

0002d280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d280:	defffe04 	addi	sp,sp,-8
   2d284:	dfc00115 	stw	ra,4(sp)
   2d288:	df000015 	stw	fp,0(sp)
   2d28c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d290:	d0a00b17 	ldw	r2,-32724(gp)
   2d294:	10000326 	beq	r2,zero,2d2a4 <alt_get_errno+0x24>
   2d298:	d0a00b17 	ldw	r2,-32724(gp)
   2d29c:	103ee83a 	callr	r2
   2d2a0:	00000106 	br	2d2a8 <alt_get_errno+0x28>
   2d2a4:	d0a72204 	addi	r2,gp,-25464
}
   2d2a8:	e037883a 	mov	sp,fp
   2d2ac:	dfc00117 	ldw	ra,4(sp)
   2d2b0:	df000017 	ldw	fp,0(sp)
   2d2b4:	dec00204 	addi	sp,sp,8
   2d2b8:	f800283a 	ret

0002d2bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2d2bc:	defff904 	addi	sp,sp,-28
   2d2c0:	dfc00615 	stw	ra,24(sp)
   2d2c4:	df000515 	stw	fp,20(sp)
   2d2c8:	df000504 	addi	fp,sp,20
   2d2cc:	e13ffd15 	stw	r4,-12(fp)
   2d2d0:	e17ffe15 	stw	r5,-8(fp)
   2d2d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d2d8:	e0bffd17 	ldw	r2,-12(fp)
   2d2dc:	10000616 	blt	r2,zero,2d2f8 <read+0x3c>
   2d2e0:	e0bffd17 	ldw	r2,-12(fp)
   2d2e4:	10c00324 	muli	r3,r2,12
   2d2e8:	008000f4 	movhi	r2,3
   2d2ec:	10857c04 	addi	r2,r2,5616
   2d2f0:	1885883a 	add	r2,r3,r2
   2d2f4:	00000106 	br	2d2fc <read+0x40>
   2d2f8:	0005883a 	mov	r2,zero
   2d2fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d300:	e0bffb17 	ldw	r2,-20(fp)
   2d304:	10002226 	beq	r2,zero,2d390 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d308:	e0bffb17 	ldw	r2,-20(fp)
   2d30c:	10800217 	ldw	r2,8(r2)
   2d310:	108000cc 	andi	r2,r2,3
   2d314:	10800060 	cmpeqi	r2,r2,1
   2d318:	1000181e 	bne	r2,zero,2d37c <read+0xc0>
        (fd->dev->read))
   2d31c:	e0bffb17 	ldw	r2,-20(fp)
   2d320:	10800017 	ldw	r2,0(r2)
   2d324:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2d328:	10001426 	beq	r2,zero,2d37c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2d32c:	e0bffb17 	ldw	r2,-20(fp)
   2d330:	10800017 	ldw	r2,0(r2)
   2d334:	10800517 	ldw	r2,20(r2)
   2d338:	e0ffff17 	ldw	r3,-4(fp)
   2d33c:	180d883a 	mov	r6,r3
   2d340:	e17ffe17 	ldw	r5,-8(fp)
   2d344:	e13ffb17 	ldw	r4,-20(fp)
   2d348:	103ee83a 	callr	r2
   2d34c:	e0bffc15 	stw	r2,-16(fp)
   2d350:	e0bffc17 	ldw	r2,-16(fp)
   2d354:	1000070e 	bge	r2,zero,2d374 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2d358:	002d2800 	call	2d280 <alt_get_errno>
   2d35c:	1007883a 	mov	r3,r2
   2d360:	e0bffc17 	ldw	r2,-16(fp)
   2d364:	0085c83a 	sub	r2,zero,r2
   2d368:	18800015 	stw	r2,0(r3)
          return -1;
   2d36c:	00bfffc4 	movi	r2,-1
   2d370:	00000c06 	br	2d3a4 <read+0xe8>
        }
        return rval;
   2d374:	e0bffc17 	ldw	r2,-16(fp)
   2d378:	00000a06 	br	2d3a4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2d37c:	002d2800 	call	2d280 <alt_get_errno>
   2d380:	1007883a 	mov	r3,r2
   2d384:	00800344 	movi	r2,13
   2d388:	18800015 	stw	r2,0(r3)
   2d38c:	00000406 	br	2d3a0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2d390:	002d2800 	call	2d280 <alt_get_errno>
   2d394:	1007883a 	mov	r3,r2
   2d398:	00801444 	movi	r2,81
   2d39c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d3a0:	00bfffc4 	movi	r2,-1
}
   2d3a4:	e037883a 	mov	sp,fp
   2d3a8:	dfc00117 	ldw	ra,4(sp)
   2d3ac:	df000017 	ldw	fp,0(sp)
   2d3b0:	dec00204 	addi	sp,sp,8
   2d3b4:	f800283a 	ret

0002d3b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2d3b8:	defffe04 	addi	sp,sp,-8
   2d3bc:	df000115 	stw	fp,4(sp)
   2d3c0:	df000104 	addi	fp,sp,4
   2d3c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2d3c8:	e0bfff17 	ldw	r2,-4(fp)
   2d3cc:	108000d0 	cmplti	r2,r2,3
   2d3d0:	10000d1e 	bne	r2,zero,2d408 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2d3d4:	008000f4 	movhi	r2,3
   2d3d8:	10857c04 	addi	r2,r2,5616
   2d3dc:	e0ffff17 	ldw	r3,-4(fp)
   2d3e0:	18c00324 	muli	r3,r3,12
   2d3e4:	10c5883a 	add	r2,r2,r3
   2d3e8:	10800204 	addi	r2,r2,8
   2d3ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2d3f0:	008000f4 	movhi	r2,3
   2d3f4:	10857c04 	addi	r2,r2,5616
   2d3f8:	e0ffff17 	ldw	r3,-4(fp)
   2d3fc:	18c00324 	muli	r3,r3,12
   2d400:	10c5883a 	add	r2,r2,r3
   2d404:	10000015 	stw	zero,0(r2)
  }
}
   2d408:	0001883a 	nop
   2d40c:	e037883a 	mov	sp,fp
   2d410:	df000017 	ldw	fp,0(sp)
   2d414:	dec00104 	addi	sp,sp,4
   2d418:	f800283a 	ret

0002d41c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2d41c:	defff904 	addi	sp,sp,-28
   2d420:	df000615 	stw	fp,24(sp)
   2d424:	df000604 	addi	fp,sp,24
   2d428:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d42c:	0005303a 	rdctl	r2,status
   2d430:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d434:	e0fffe17 	ldw	r3,-8(fp)
   2d438:	00bfff84 	movi	r2,-2
   2d43c:	1884703a 	and	r2,r3,r2
   2d440:	1001703a 	wrctl	status,r2
  
  return context;
   2d444:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2d448:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2d44c:	d0a00c17 	ldw	r2,-32720(gp)
   2d450:	10c000c4 	addi	r3,r2,3
   2d454:	00bfff04 	movi	r2,-4
   2d458:	1884703a 	and	r2,r3,r2
   2d45c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2d460:	d0e00c17 	ldw	r3,-32720(gp)
   2d464:	e0bfff17 	ldw	r2,-4(fp)
   2d468:	1887883a 	add	r3,r3,r2
   2d46c:	00800134 	movhi	r2,4
   2d470:	10800004 	addi	r2,r2,0
   2d474:	10c0062e 	bgeu	r2,r3,2d490 <sbrk+0x74>
   2d478:	e0bffb17 	ldw	r2,-20(fp)
   2d47c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d480:	e0bffa17 	ldw	r2,-24(fp)
   2d484:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2d488:	00bfffc4 	movi	r2,-1
   2d48c:	00000b06 	br	2d4bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2d490:	d0a00c17 	ldw	r2,-32720(gp)
   2d494:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2d498:	d0e00c17 	ldw	r3,-32720(gp)
   2d49c:	e0bfff17 	ldw	r2,-4(fp)
   2d4a0:	1885883a 	add	r2,r3,r2
   2d4a4:	d0a00c15 	stw	r2,-32720(gp)
   2d4a8:	e0bffb17 	ldw	r2,-20(fp)
   2d4ac:	e0bffc15 	stw	r2,-16(fp)
   2d4b0:	e0bffc17 	ldw	r2,-16(fp)
   2d4b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2d4b8:	e0bffd17 	ldw	r2,-12(fp)
} 
   2d4bc:	e037883a 	mov	sp,fp
   2d4c0:	df000017 	ldw	fp,0(sp)
   2d4c4:	dec00104 	addi	sp,sp,4
   2d4c8:	f800283a 	ret

0002d4cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d4cc:	defffe04 	addi	sp,sp,-8
   2d4d0:	dfc00115 	stw	ra,4(sp)
   2d4d4:	df000015 	stw	fp,0(sp)
   2d4d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d4dc:	d0a00b17 	ldw	r2,-32724(gp)
   2d4e0:	10000326 	beq	r2,zero,2d4f0 <alt_get_errno+0x24>
   2d4e4:	d0a00b17 	ldw	r2,-32724(gp)
   2d4e8:	103ee83a 	callr	r2
   2d4ec:	00000106 	br	2d4f4 <alt_get_errno+0x28>
   2d4f0:	d0a72204 	addi	r2,gp,-25464
}
   2d4f4:	e037883a 	mov	sp,fp
   2d4f8:	dfc00117 	ldw	ra,4(sp)
   2d4fc:	df000017 	ldw	fp,0(sp)
   2d500:	dec00204 	addi	sp,sp,8
   2d504:	f800283a 	ret

0002d508 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2d508:	defff904 	addi	sp,sp,-28
   2d50c:	dfc00615 	stw	ra,24(sp)
   2d510:	df000515 	stw	fp,20(sp)
   2d514:	df000504 	addi	fp,sp,20
   2d518:	e13ffd15 	stw	r4,-12(fp)
   2d51c:	e17ffe15 	stw	r5,-8(fp)
   2d520:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d524:	e0bffd17 	ldw	r2,-12(fp)
   2d528:	10000616 	blt	r2,zero,2d544 <write+0x3c>
   2d52c:	e0bffd17 	ldw	r2,-12(fp)
   2d530:	10c00324 	muli	r3,r2,12
   2d534:	008000f4 	movhi	r2,3
   2d538:	10857c04 	addi	r2,r2,5616
   2d53c:	1885883a 	add	r2,r3,r2
   2d540:	00000106 	br	2d548 <write+0x40>
   2d544:	0005883a 	mov	r2,zero
   2d548:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2d54c:	e0bffb17 	ldw	r2,-20(fp)
   2d550:	10002126 	beq	r2,zero,2d5d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2d554:	e0bffb17 	ldw	r2,-20(fp)
   2d558:	10800217 	ldw	r2,8(r2)
   2d55c:	108000cc 	andi	r2,r2,3
   2d560:	10001826 	beq	r2,zero,2d5c4 <write+0xbc>
   2d564:	e0bffb17 	ldw	r2,-20(fp)
   2d568:	10800017 	ldw	r2,0(r2)
   2d56c:	10800617 	ldw	r2,24(r2)
   2d570:	10001426 	beq	r2,zero,2d5c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2d574:	e0bffb17 	ldw	r2,-20(fp)
   2d578:	10800017 	ldw	r2,0(r2)
   2d57c:	10800617 	ldw	r2,24(r2)
   2d580:	e0ffff17 	ldw	r3,-4(fp)
   2d584:	180d883a 	mov	r6,r3
   2d588:	e17ffe17 	ldw	r5,-8(fp)
   2d58c:	e13ffb17 	ldw	r4,-20(fp)
   2d590:	103ee83a 	callr	r2
   2d594:	e0bffc15 	stw	r2,-16(fp)
   2d598:	e0bffc17 	ldw	r2,-16(fp)
   2d59c:	1000070e 	bge	r2,zero,2d5bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2d5a0:	002d4cc0 	call	2d4cc <alt_get_errno>
   2d5a4:	1007883a 	mov	r3,r2
   2d5a8:	e0bffc17 	ldw	r2,-16(fp)
   2d5ac:	0085c83a 	sub	r2,zero,r2
   2d5b0:	18800015 	stw	r2,0(r3)
        return -1;
   2d5b4:	00bfffc4 	movi	r2,-1
   2d5b8:	00000c06 	br	2d5ec <write+0xe4>
      }
      return rval;
   2d5bc:	e0bffc17 	ldw	r2,-16(fp)
   2d5c0:	00000a06 	br	2d5ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2d5c4:	002d4cc0 	call	2d4cc <alt_get_errno>
   2d5c8:	1007883a 	mov	r3,r2
   2d5cc:	00800344 	movi	r2,13
   2d5d0:	18800015 	stw	r2,0(r3)
   2d5d4:	00000406 	br	2d5e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2d5d8:	002d4cc0 	call	2d4cc <alt_get_errno>
   2d5dc:	1007883a 	mov	r3,r2
   2d5e0:	00801444 	movi	r2,81
   2d5e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2d5e8:	00bfffc4 	movi	r2,-1
}
   2d5ec:	e037883a 	mov	sp,fp
   2d5f0:	dfc00117 	ldw	ra,4(sp)
   2d5f4:	df000017 	ldw	fp,0(sp)
   2d5f8:	dec00204 	addi	sp,sp,8
   2d5fc:	f800283a 	ret

0002d600 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2d600:	defffd04 	addi	sp,sp,-12
   2d604:	dfc00215 	stw	ra,8(sp)
   2d608:	df000115 	stw	fp,4(sp)
   2d60c:	df000104 	addi	fp,sp,4
   2d610:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2d614:	d1600804 	addi	r5,gp,-32736
   2d618:	e13fff17 	ldw	r4,-4(fp)
   2d61c:	002f8b80 	call	2f8b8 <alt_dev_llist_insert>
}
   2d620:	e037883a 	mov	sp,fp
   2d624:	dfc00117 	ldw	ra,4(sp)
   2d628:	df000017 	ldw	fp,0(sp)
   2d62c:	dec00204 	addi	sp,sp,8
   2d630:	f800283a 	ret

0002d634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d634:	defffe04 	addi	sp,sp,-8
   2d638:	dfc00115 	stw	ra,4(sp)
   2d63c:	df000015 	stw	fp,0(sp)
   2d640:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d644:	d0a00b17 	ldw	r2,-32724(gp)
   2d648:	10000326 	beq	r2,zero,2d658 <alt_get_errno+0x24>
   2d64c:	d0a00b17 	ldw	r2,-32724(gp)
   2d650:	103ee83a 	callr	r2
   2d654:	00000106 	br	2d65c <alt_get_errno+0x28>
   2d658:	d0a72204 	addi	r2,gp,-25464
}
   2d65c:	e037883a 	mov	sp,fp
   2d660:	dfc00117 	ldw	ra,4(sp)
   2d664:	df000017 	ldw	fp,0(sp)
   2d668:	dec00204 	addi	sp,sp,8
   2d66c:	f800283a 	ret

0002d670 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
   2d670:	defffc04 	addi	sp,sp,-16
   2d674:	dfc00315 	stw	ra,12(sp)
   2d678:	df000215 	stw	fp,8(sp)
   2d67c:	df000204 	addi	fp,sp,8
   2d680:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2d684:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
   2d688:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
   2d68c:	e0bffe17 	ldw	r2,-8(fp)
   2d690:	1000051e 	bne	r2,zero,2d6a8 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   2d694:	d1600f04 	addi	r5,gp,-32708
   2d698:	e13fff17 	ldw	r4,-4(fp)
   2d69c:	002f8b80 	call	2f8b8 <alt_dev_llist_insert>
   2d6a0:	e0bffe15 	stw	r2,-8(fp)
   2d6a4:	00000606 	br	2d6c0 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
   2d6a8:	002d6340 	call	2d634 <alt_get_errno>
   2d6ac:	1007883a 	mov	r3,r2
   2d6b0:	00800304 	movi	r2,12
   2d6b4:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
   2d6b8:	00bffd04 	movi	r2,-12
   2d6bc:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
   2d6c0:	e0bffe17 	ldw	r2,-8(fp)
}
   2d6c4:	e037883a 	mov	sp,fp
   2d6c8:	dfc00117 	ldw	ra,4(sp)
   2d6cc:	df000017 	ldw	fp,0(sp)
   2d6d0:	dec00204 	addi	sp,sp,8
   2d6d4:	f800283a 	ret

0002d6d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2d6d8:	defffd04 	addi	sp,sp,-12
   2d6dc:	dfc00215 	stw	ra,8(sp)
   2d6e0:	df000115 	stw	fp,4(sp)
   2d6e4:	df000104 	addi	fp,sp,4
   2d6e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_FFT, nios2_FFT);
   2d6ec:	00302b80 	call	302b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2d6f0:	00800044 	movi	r2,1
   2d6f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2d6f8:	0001883a 	nop
   2d6fc:	e037883a 	mov	sp,fp
   2d700:	dfc00117 	ldw	ra,4(sp)
   2d704:	df000017 	ldw	fp,0(sp)
   2d708:	dec00204 	addi	sp,sp,8
   2d70c:	f800283a 	ret

0002d710 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2d710:	defffe04 	addi	sp,sp,-8
   2d714:	dfc00115 	stw	ra,4(sp)
   2d718:	df000015 	stw	fp,0(sp)
   2d71c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_FFT, jtag_uart_FFT);
   2d720:	01800084 	movi	r6,2
   2d724:	000b883a 	mov	r5,zero
   2d728:	010000f4 	movhi	r4,3
   2d72c:	2105e604 	addi	r4,r4,6040
   2d730:	002d9000 	call	2d900 <altera_avalon_jtag_uart_init>
   2d734:	010000f4 	movhi	r4,3
   2d738:	2105dc04 	addi	r4,r4,6000
   2d73c:	002d6000 	call	2d600 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
   2d740:	000d883a 	mov	r6,zero
   2d744:	000b883a 	mov	r5,zero
   2d748:	010000f4 	movhi	r4,3
   2d74c:	2109f404 	addi	r4,r4,10192
   2d750:	002e4ec0 	call	2e4ec <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_SDRAM, mutex_SDRAM);
   2d754:	010000f4 	movhi	r4,3
   2d758:	210a0604 	addi	r4,r4,10264
   2d75c:	002d6700 	call	2d670 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   2d760:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   2d764:	01800044 	movi	r6,1
   2d768:	000b883a 	mov	r5,zero
   2d76c:	010000f4 	movhi	r4,3
   2d770:	210a1404 	addi	r4,r4,10320
   2d774:	002ef400 	call	2ef40 <altera_avalon_uart_init>
   2d778:	010000f4 	movhi	r4,3
   2d77c:	210a0a04 	addi	r4,r4,10280
   2d780:	002d6000 	call	2d600 <alt_dev_reg>
}
   2d784:	0001883a 	nop
   2d788:	e037883a 	mov	sp,fp
   2d78c:	dfc00117 	ldw	ra,4(sp)
   2d790:	df000017 	ldw	fp,0(sp)
   2d794:	dec00204 	addi	sp,sp,8
   2d798:	f800283a 	ret

0002d79c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2d79c:	defffa04 	addi	sp,sp,-24
   2d7a0:	dfc00515 	stw	ra,20(sp)
   2d7a4:	df000415 	stw	fp,16(sp)
   2d7a8:	df000404 	addi	fp,sp,16
   2d7ac:	e13ffd15 	stw	r4,-12(fp)
   2d7b0:	e17ffe15 	stw	r5,-8(fp)
   2d7b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d7b8:	e0bffd17 	ldw	r2,-12(fp)
   2d7bc:	10800017 	ldw	r2,0(r2)
   2d7c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2d7c4:	e0bffc17 	ldw	r2,-16(fp)
   2d7c8:	10c00a04 	addi	r3,r2,40
   2d7cc:	e0bffd17 	ldw	r2,-12(fp)
   2d7d0:	10800217 	ldw	r2,8(r2)
   2d7d4:	100f883a 	mov	r7,r2
   2d7d8:	e1bfff17 	ldw	r6,-4(fp)
   2d7dc:	e17ffe17 	ldw	r5,-8(fp)
   2d7e0:	1809883a 	mov	r4,r3
   2d7e4:	002ddc40 	call	2ddc4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2d7e8:	e037883a 	mov	sp,fp
   2d7ec:	dfc00117 	ldw	ra,4(sp)
   2d7f0:	df000017 	ldw	fp,0(sp)
   2d7f4:	dec00204 	addi	sp,sp,8
   2d7f8:	f800283a 	ret

0002d7fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2d7fc:	defffa04 	addi	sp,sp,-24
   2d800:	dfc00515 	stw	ra,20(sp)
   2d804:	df000415 	stw	fp,16(sp)
   2d808:	df000404 	addi	fp,sp,16
   2d80c:	e13ffd15 	stw	r4,-12(fp)
   2d810:	e17ffe15 	stw	r5,-8(fp)
   2d814:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d818:	e0bffd17 	ldw	r2,-12(fp)
   2d81c:	10800017 	ldw	r2,0(r2)
   2d820:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2d824:	e0bffc17 	ldw	r2,-16(fp)
   2d828:	10c00a04 	addi	r3,r2,40
   2d82c:	e0bffd17 	ldw	r2,-12(fp)
   2d830:	10800217 	ldw	r2,8(r2)
   2d834:	100f883a 	mov	r7,r2
   2d838:	e1bfff17 	ldw	r6,-4(fp)
   2d83c:	e17ffe17 	ldw	r5,-8(fp)
   2d840:	1809883a 	mov	r4,r3
   2d844:	002dfe00 	call	2dfe0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2d848:	e037883a 	mov	sp,fp
   2d84c:	dfc00117 	ldw	ra,4(sp)
   2d850:	df000017 	ldw	fp,0(sp)
   2d854:	dec00204 	addi	sp,sp,8
   2d858:	f800283a 	ret

0002d85c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2d85c:	defffc04 	addi	sp,sp,-16
   2d860:	dfc00315 	stw	ra,12(sp)
   2d864:	df000215 	stw	fp,8(sp)
   2d868:	df000204 	addi	fp,sp,8
   2d86c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2d870:	e0bfff17 	ldw	r2,-4(fp)
   2d874:	10800017 	ldw	r2,0(r2)
   2d878:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2d87c:	e0bffe17 	ldw	r2,-8(fp)
   2d880:	10c00a04 	addi	r3,r2,40
   2d884:	e0bfff17 	ldw	r2,-4(fp)
   2d888:	10800217 	ldw	r2,8(r2)
   2d88c:	100b883a 	mov	r5,r2
   2d890:	1809883a 	mov	r4,r3
   2d894:	002dc6c0 	call	2dc6c <altera_avalon_jtag_uart_close>
}
   2d898:	e037883a 	mov	sp,fp
   2d89c:	dfc00117 	ldw	ra,4(sp)
   2d8a0:	df000017 	ldw	fp,0(sp)
   2d8a4:	dec00204 	addi	sp,sp,8
   2d8a8:	f800283a 	ret

0002d8ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2d8ac:	defffa04 	addi	sp,sp,-24
   2d8b0:	dfc00515 	stw	ra,20(sp)
   2d8b4:	df000415 	stw	fp,16(sp)
   2d8b8:	df000404 	addi	fp,sp,16
   2d8bc:	e13ffd15 	stw	r4,-12(fp)
   2d8c0:	e17ffe15 	stw	r5,-8(fp)
   2d8c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2d8c8:	e0bffd17 	ldw	r2,-12(fp)
   2d8cc:	10800017 	ldw	r2,0(r2)
   2d8d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2d8d4:	e0bffc17 	ldw	r2,-16(fp)
   2d8d8:	10800a04 	addi	r2,r2,40
   2d8dc:	e1bfff17 	ldw	r6,-4(fp)
   2d8e0:	e17ffe17 	ldw	r5,-8(fp)
   2d8e4:	1009883a 	mov	r4,r2
   2d8e8:	002dcd40 	call	2dcd4 <altera_avalon_jtag_uart_ioctl>
}
   2d8ec:	e037883a 	mov	sp,fp
   2d8f0:	dfc00117 	ldw	ra,4(sp)
   2d8f4:	df000017 	ldw	fp,0(sp)
   2d8f8:	dec00204 	addi	sp,sp,8
   2d8fc:	f800283a 	ret

0002d900 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2d900:	defffa04 	addi	sp,sp,-24
   2d904:	dfc00515 	stw	ra,20(sp)
   2d908:	df000415 	stw	fp,16(sp)
   2d90c:	df000404 	addi	fp,sp,16
   2d910:	e13ffd15 	stw	r4,-12(fp)
   2d914:	e17ffe15 	stw	r5,-8(fp)
   2d918:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2d91c:	e0bffd17 	ldw	r2,-12(fp)
   2d920:	00c00044 	movi	r3,1
   2d924:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2d928:	e0bffd17 	ldw	r2,-12(fp)
   2d92c:	10800017 	ldw	r2,0(r2)
   2d930:	10800104 	addi	r2,r2,4
   2d934:	1007883a 	mov	r3,r2
   2d938:	e0bffd17 	ldw	r2,-12(fp)
   2d93c:	10800817 	ldw	r2,32(r2)
   2d940:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2d944:	e0bffe17 	ldw	r2,-8(fp)
   2d948:	e0ffff17 	ldw	r3,-4(fp)
   2d94c:	d8000015 	stw	zero,0(sp)
   2d950:	e1fffd17 	ldw	r7,-12(fp)
   2d954:	018000f4 	movhi	r6,3
   2d958:	31b67004 	addi	r6,r6,-9792
   2d95c:	180b883a 	mov	r5,r3
   2d960:	1009883a 	mov	r4,r2
   2d964:	002fae00 	call	2fae0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2d968:	e0bffd17 	ldw	r2,-12(fp)
   2d96c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2d970:	e0bffd17 	ldw	r2,-12(fp)
   2d974:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2d978:	d0e72717 	ldw	r3,-25444(gp)
   2d97c:	e1fffd17 	ldw	r7,-12(fp)
   2d980:	018000f4 	movhi	r6,3
   2d984:	31b6f304 	addi	r6,r6,-9268
   2d988:	180b883a 	mov	r5,r3
   2d98c:	1009883a 	mov	r4,r2
   2d990:	002f7080 	call	2f708 <alt_alarm_start>
   2d994:	1000040e 	bge	r2,zero,2d9a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2d998:	e0fffd17 	ldw	r3,-12(fp)
   2d99c:	00a00034 	movhi	r2,32768
   2d9a0:	10bfffc4 	addi	r2,r2,-1
   2d9a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2d9a8:	0001883a 	nop
   2d9ac:	e037883a 	mov	sp,fp
   2d9b0:	dfc00117 	ldw	ra,4(sp)
   2d9b4:	df000017 	ldw	fp,0(sp)
   2d9b8:	dec00204 	addi	sp,sp,8
   2d9bc:	f800283a 	ret

0002d9c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2d9c0:	defff804 	addi	sp,sp,-32
   2d9c4:	df000715 	stw	fp,28(sp)
   2d9c8:	df000704 	addi	fp,sp,28
   2d9cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2d9d0:	e0bfff17 	ldw	r2,-4(fp)
   2d9d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2d9d8:	e0bffb17 	ldw	r2,-20(fp)
   2d9dc:	10800017 	ldw	r2,0(r2)
   2d9e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2d9e4:	e0bffc17 	ldw	r2,-16(fp)
   2d9e8:	10800104 	addi	r2,r2,4
   2d9ec:	10800037 	ldwio	r2,0(r2)
   2d9f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2d9f4:	e0bffd17 	ldw	r2,-12(fp)
   2d9f8:	1080c00c 	andi	r2,r2,768
   2d9fc:	10006d26 	beq	r2,zero,2dbb4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2da00:	e0bffd17 	ldw	r2,-12(fp)
   2da04:	1080400c 	andi	r2,r2,256
   2da08:	10003526 	beq	r2,zero,2dae0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2da0c:	00800074 	movhi	r2,1
   2da10:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2da14:	e0bffb17 	ldw	r2,-20(fp)
   2da18:	10800a17 	ldw	r2,40(r2)
   2da1c:	10800044 	addi	r2,r2,1
   2da20:	1081ffcc 	andi	r2,r2,2047
   2da24:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2da28:	e0bffb17 	ldw	r2,-20(fp)
   2da2c:	10c00b17 	ldw	r3,44(r2)
   2da30:	e0bffe17 	ldw	r2,-8(fp)
   2da34:	18801526 	beq	r3,r2,2da8c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2da38:	e0bffc17 	ldw	r2,-16(fp)
   2da3c:	10800037 	ldwio	r2,0(r2)
   2da40:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2da44:	e0bff917 	ldw	r2,-28(fp)
   2da48:	10a0000c 	andi	r2,r2,32768
   2da4c:	10001126 	beq	r2,zero,2da94 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2da50:	e0bffb17 	ldw	r2,-20(fp)
   2da54:	10800a17 	ldw	r2,40(r2)
   2da58:	e0fff917 	ldw	r3,-28(fp)
   2da5c:	1809883a 	mov	r4,r3
   2da60:	e0fffb17 	ldw	r3,-20(fp)
   2da64:	1885883a 	add	r2,r3,r2
   2da68:	10800e04 	addi	r2,r2,56
   2da6c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2da70:	e0bffb17 	ldw	r2,-20(fp)
   2da74:	10800a17 	ldw	r2,40(r2)
   2da78:	10800044 	addi	r2,r2,1
   2da7c:	10c1ffcc 	andi	r3,r2,2047
   2da80:	e0bffb17 	ldw	r2,-20(fp)
   2da84:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2da88:	003fe206 	br	2da14 <__alt_data_end+0xfffeda14>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2da8c:	0001883a 	nop
   2da90:	00000106 	br	2da98 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2da94:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2da98:	e0bff917 	ldw	r2,-28(fp)
   2da9c:	10bfffec 	andhi	r2,r2,65535
   2daa0:	10000f26 	beq	r2,zero,2dae0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2daa4:	e0bffb17 	ldw	r2,-20(fp)
   2daa8:	10c00817 	ldw	r3,32(r2)
   2daac:	00bfff84 	movi	r2,-2
   2dab0:	1886703a 	and	r3,r3,r2
   2dab4:	e0bffb17 	ldw	r2,-20(fp)
   2dab8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2dabc:	e0bffc17 	ldw	r2,-16(fp)
   2dac0:	10800104 	addi	r2,r2,4
   2dac4:	1007883a 	mov	r3,r2
   2dac8:	e0bffb17 	ldw	r2,-20(fp)
   2dacc:	10800817 	ldw	r2,32(r2)
   2dad0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2dad4:	e0bffc17 	ldw	r2,-16(fp)
   2dad8:	10800104 	addi	r2,r2,4
   2dadc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2dae0:	e0bffd17 	ldw	r2,-12(fp)
   2dae4:	1080800c 	andi	r2,r2,512
   2dae8:	103fbe26 	beq	r2,zero,2d9e4 <__alt_data_end+0xfffed9e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2daec:	e0bffd17 	ldw	r2,-12(fp)
   2daf0:	1004d43a 	srli	r2,r2,16
   2daf4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2daf8:	00001406 	br	2db4c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2dafc:	e0bffc17 	ldw	r2,-16(fp)
   2db00:	e0fffb17 	ldw	r3,-20(fp)
   2db04:	18c00d17 	ldw	r3,52(r3)
   2db08:	e13ffb17 	ldw	r4,-20(fp)
   2db0c:	20c7883a 	add	r3,r4,r3
   2db10:	18c20e04 	addi	r3,r3,2104
   2db14:	18c00003 	ldbu	r3,0(r3)
   2db18:	18c03fcc 	andi	r3,r3,255
   2db1c:	18c0201c 	xori	r3,r3,128
   2db20:	18ffe004 	addi	r3,r3,-128
   2db24:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2db28:	e0bffb17 	ldw	r2,-20(fp)
   2db2c:	10800d17 	ldw	r2,52(r2)
   2db30:	10800044 	addi	r2,r2,1
   2db34:	10c1ffcc 	andi	r3,r2,2047
   2db38:	e0bffb17 	ldw	r2,-20(fp)
   2db3c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2db40:	e0bffa17 	ldw	r2,-24(fp)
   2db44:	10bfffc4 	addi	r2,r2,-1
   2db48:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2db4c:	e0bffa17 	ldw	r2,-24(fp)
   2db50:	10000526 	beq	r2,zero,2db68 <altera_avalon_jtag_uart_irq+0x1a8>
   2db54:	e0bffb17 	ldw	r2,-20(fp)
   2db58:	10c00d17 	ldw	r3,52(r2)
   2db5c:	e0bffb17 	ldw	r2,-20(fp)
   2db60:	10800c17 	ldw	r2,48(r2)
   2db64:	18bfe51e 	bne	r3,r2,2dafc <__alt_data_end+0xfffedafc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2db68:	e0bffa17 	ldw	r2,-24(fp)
   2db6c:	103f9d26 	beq	r2,zero,2d9e4 <__alt_data_end+0xfffed9e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2db70:	e0bffb17 	ldw	r2,-20(fp)
   2db74:	10c00817 	ldw	r3,32(r2)
   2db78:	00bfff44 	movi	r2,-3
   2db7c:	1886703a 	and	r3,r3,r2
   2db80:	e0bffb17 	ldw	r2,-20(fp)
   2db84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2db88:	e0bffb17 	ldw	r2,-20(fp)
   2db8c:	10800017 	ldw	r2,0(r2)
   2db90:	10800104 	addi	r2,r2,4
   2db94:	1007883a 	mov	r3,r2
   2db98:	e0bffb17 	ldw	r2,-20(fp)
   2db9c:	10800817 	ldw	r2,32(r2)
   2dba0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2dba4:	e0bffc17 	ldw	r2,-16(fp)
   2dba8:	10800104 	addi	r2,r2,4
   2dbac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2dbb0:	003f8c06 	br	2d9e4 <__alt_data_end+0xfffed9e4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2dbb4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2dbb8:	0001883a 	nop
   2dbbc:	e037883a 	mov	sp,fp
   2dbc0:	df000017 	ldw	fp,0(sp)
   2dbc4:	dec00104 	addi	sp,sp,4
   2dbc8:	f800283a 	ret

0002dbcc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2dbcc:	defff804 	addi	sp,sp,-32
   2dbd0:	df000715 	stw	fp,28(sp)
   2dbd4:	df000704 	addi	fp,sp,28
   2dbd8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2dbdc:	e0bffb17 	ldw	r2,-20(fp)
   2dbe0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2dbe4:	e0bff917 	ldw	r2,-28(fp)
   2dbe8:	10800017 	ldw	r2,0(r2)
   2dbec:	10800104 	addi	r2,r2,4
   2dbf0:	10800037 	ldwio	r2,0(r2)
   2dbf4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2dbf8:	e0bffa17 	ldw	r2,-24(fp)
   2dbfc:	1081000c 	andi	r2,r2,1024
   2dc00:	10000b26 	beq	r2,zero,2dc30 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2dc04:	e0bff917 	ldw	r2,-28(fp)
   2dc08:	10800017 	ldw	r2,0(r2)
   2dc0c:	10800104 	addi	r2,r2,4
   2dc10:	1007883a 	mov	r3,r2
   2dc14:	e0bff917 	ldw	r2,-28(fp)
   2dc18:	10800817 	ldw	r2,32(r2)
   2dc1c:	10810014 	ori	r2,r2,1024
   2dc20:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2dc24:	e0bff917 	ldw	r2,-28(fp)
   2dc28:	10000915 	stw	zero,36(r2)
   2dc2c:	00000a06 	br	2dc58 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2dc30:	e0bff917 	ldw	r2,-28(fp)
   2dc34:	10c00917 	ldw	r3,36(r2)
   2dc38:	00a00034 	movhi	r2,32768
   2dc3c:	10bfff04 	addi	r2,r2,-4
   2dc40:	10c00536 	bltu	r2,r3,2dc58 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2dc44:	e0bff917 	ldw	r2,-28(fp)
   2dc48:	10800917 	ldw	r2,36(r2)
   2dc4c:	10c00044 	addi	r3,r2,1
   2dc50:	e0bff917 	ldw	r2,-28(fp)
   2dc54:	10c00915 	stw	r3,36(r2)
   2dc58:	d0a72717 	ldw	r2,-25444(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2dc5c:	e037883a 	mov	sp,fp
   2dc60:	df000017 	ldw	fp,0(sp)
   2dc64:	dec00104 	addi	sp,sp,4
   2dc68:	f800283a 	ret

0002dc6c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2dc6c:	defffd04 	addi	sp,sp,-12
   2dc70:	df000215 	stw	fp,8(sp)
   2dc74:	df000204 	addi	fp,sp,8
   2dc78:	e13ffe15 	stw	r4,-8(fp)
   2dc7c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dc80:	00000506 	br	2dc98 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2dc84:	e0bfff17 	ldw	r2,-4(fp)
   2dc88:	1090000c 	andi	r2,r2,16384
   2dc8c:	10000226 	beq	r2,zero,2dc98 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2dc90:	00bffd44 	movi	r2,-11
   2dc94:	00000b06 	br	2dcc4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2dc98:	e0bffe17 	ldw	r2,-8(fp)
   2dc9c:	10c00d17 	ldw	r3,52(r2)
   2dca0:	e0bffe17 	ldw	r2,-8(fp)
   2dca4:	10800c17 	ldw	r2,48(r2)
   2dca8:	18800526 	beq	r3,r2,2dcc0 <altera_avalon_jtag_uart_close+0x54>
   2dcac:	e0bffe17 	ldw	r2,-8(fp)
   2dcb0:	10c00917 	ldw	r3,36(r2)
   2dcb4:	e0bffe17 	ldw	r2,-8(fp)
   2dcb8:	10800117 	ldw	r2,4(r2)
   2dcbc:	18bff136 	bltu	r3,r2,2dc84 <__alt_data_end+0xfffedc84>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2dcc0:	0005883a 	mov	r2,zero
}
   2dcc4:	e037883a 	mov	sp,fp
   2dcc8:	df000017 	ldw	fp,0(sp)
   2dccc:	dec00104 	addi	sp,sp,4
   2dcd0:	f800283a 	ret

0002dcd4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2dcd4:	defffa04 	addi	sp,sp,-24
   2dcd8:	df000515 	stw	fp,20(sp)
   2dcdc:	df000504 	addi	fp,sp,20
   2dce0:	e13ffd15 	stw	r4,-12(fp)
   2dce4:	e17ffe15 	stw	r5,-8(fp)
   2dce8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2dcec:	00bff9c4 	movi	r2,-25
   2dcf0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2dcf4:	e0bffe17 	ldw	r2,-8(fp)
   2dcf8:	10da8060 	cmpeqi	r3,r2,27137
   2dcfc:	1800031e 	bne	r3,zero,2dd0c <altera_avalon_jtag_uart_ioctl+0x38>
   2dd00:	109a80a0 	cmpeqi	r2,r2,27138
   2dd04:	1000181e 	bne	r2,zero,2dd68 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2dd08:	00002906 	br	2ddb0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2dd0c:	e0bffd17 	ldw	r2,-12(fp)
   2dd10:	10c00117 	ldw	r3,4(r2)
   2dd14:	00a00034 	movhi	r2,32768
   2dd18:	10bfffc4 	addi	r2,r2,-1
   2dd1c:	18802126 	beq	r3,r2,2dda4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2dd20:	e0bfff17 	ldw	r2,-4(fp)
   2dd24:	10800017 	ldw	r2,0(r2)
   2dd28:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2dd2c:	e0bffc17 	ldw	r2,-16(fp)
   2dd30:	10800090 	cmplti	r2,r2,2
   2dd34:	1000061e 	bne	r2,zero,2dd50 <altera_avalon_jtag_uart_ioctl+0x7c>
   2dd38:	e0fffc17 	ldw	r3,-16(fp)
   2dd3c:	00a00034 	movhi	r2,32768
   2dd40:	10bfffc4 	addi	r2,r2,-1
   2dd44:	18800226 	beq	r3,r2,2dd50 <altera_avalon_jtag_uart_ioctl+0x7c>
   2dd48:	e0bffc17 	ldw	r2,-16(fp)
   2dd4c:	00000206 	br	2dd58 <altera_avalon_jtag_uart_ioctl+0x84>
   2dd50:	00a00034 	movhi	r2,32768
   2dd54:	10bfff84 	addi	r2,r2,-2
   2dd58:	e0fffd17 	ldw	r3,-12(fp)
   2dd5c:	18800115 	stw	r2,4(r3)
      rc = 0;
   2dd60:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2dd64:	00000f06 	br	2dda4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2dd68:	e0bffd17 	ldw	r2,-12(fp)
   2dd6c:	10c00117 	ldw	r3,4(r2)
   2dd70:	00a00034 	movhi	r2,32768
   2dd74:	10bfffc4 	addi	r2,r2,-1
   2dd78:	18800c26 	beq	r3,r2,2ddac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2dd7c:	e0bffd17 	ldw	r2,-12(fp)
   2dd80:	10c00917 	ldw	r3,36(r2)
   2dd84:	e0bffd17 	ldw	r2,-12(fp)
   2dd88:	10800117 	ldw	r2,4(r2)
   2dd8c:	1885803a 	cmpltu	r2,r3,r2
   2dd90:	10c03fcc 	andi	r3,r2,255
   2dd94:	e0bfff17 	ldw	r2,-4(fp)
   2dd98:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2dd9c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2dda0:	00000206 	br	2ddac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2dda4:	0001883a 	nop
   2dda8:	00000106 	br	2ddb0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2ddac:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2ddb0:	e0bffb17 	ldw	r2,-20(fp)
}
   2ddb4:	e037883a 	mov	sp,fp
   2ddb8:	df000017 	ldw	fp,0(sp)
   2ddbc:	dec00104 	addi	sp,sp,4
   2ddc0:	f800283a 	ret

0002ddc4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2ddc4:	defff304 	addi	sp,sp,-52
   2ddc8:	dfc00c15 	stw	ra,48(sp)
   2ddcc:	df000b15 	stw	fp,44(sp)
   2ddd0:	df000b04 	addi	fp,sp,44
   2ddd4:	e13ffc15 	stw	r4,-16(fp)
   2ddd8:	e17ffd15 	stw	r5,-12(fp)
   2dddc:	e1bffe15 	stw	r6,-8(fp)
   2dde0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2dde4:	e0bffd17 	ldw	r2,-12(fp)
   2dde8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ddec:	00004706 	br	2df0c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2ddf0:	e0bffc17 	ldw	r2,-16(fp)
   2ddf4:	10800a17 	ldw	r2,40(r2)
   2ddf8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2ddfc:	e0bffc17 	ldw	r2,-16(fp)
   2de00:	10800b17 	ldw	r2,44(r2)
   2de04:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2de08:	e0fff717 	ldw	r3,-36(fp)
   2de0c:	e0bff817 	ldw	r2,-32(fp)
   2de10:	18800536 	bltu	r3,r2,2de28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2de14:	e0fff717 	ldw	r3,-36(fp)
   2de18:	e0bff817 	ldw	r2,-32(fp)
   2de1c:	1885c83a 	sub	r2,r3,r2
   2de20:	e0bff615 	stw	r2,-40(fp)
   2de24:	00000406 	br	2de38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2de28:	00c20004 	movi	r3,2048
   2de2c:	e0bff817 	ldw	r2,-32(fp)
   2de30:	1885c83a 	sub	r2,r3,r2
   2de34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2de38:	e0bff617 	ldw	r2,-40(fp)
   2de3c:	10001e26 	beq	r2,zero,2deb8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2de40:	e0fffe17 	ldw	r3,-8(fp)
   2de44:	e0bff617 	ldw	r2,-40(fp)
   2de48:	1880022e 	bgeu	r3,r2,2de54 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2de4c:	e0bffe17 	ldw	r2,-8(fp)
   2de50:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2de54:	e0bffc17 	ldw	r2,-16(fp)
   2de58:	10c00e04 	addi	r3,r2,56
   2de5c:	e0bff817 	ldw	r2,-32(fp)
   2de60:	1885883a 	add	r2,r3,r2
   2de64:	e1bff617 	ldw	r6,-40(fp)
   2de68:	100b883a 	mov	r5,r2
   2de6c:	e13ff517 	ldw	r4,-44(fp)
   2de70:	0025e680 	call	25e68 <memcpy>
      ptr   += n;
   2de74:	e0fff517 	ldw	r3,-44(fp)
   2de78:	e0bff617 	ldw	r2,-40(fp)
   2de7c:	1885883a 	add	r2,r3,r2
   2de80:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2de84:	e0fffe17 	ldw	r3,-8(fp)
   2de88:	e0bff617 	ldw	r2,-40(fp)
   2de8c:	1885c83a 	sub	r2,r3,r2
   2de90:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2de94:	e0fff817 	ldw	r3,-32(fp)
   2de98:	e0bff617 	ldw	r2,-40(fp)
   2de9c:	1885883a 	add	r2,r3,r2
   2dea0:	10c1ffcc 	andi	r3,r2,2047
   2dea4:	e0bffc17 	ldw	r2,-16(fp)
   2dea8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2deac:	e0bffe17 	ldw	r2,-8(fp)
   2deb0:	00bfcf16 	blt	zero,r2,2ddf0 <__alt_data_end+0xfffeddf0>
   2deb4:	00000106 	br	2debc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2deb8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2debc:	e0fff517 	ldw	r3,-44(fp)
   2dec0:	e0bffd17 	ldw	r2,-12(fp)
   2dec4:	1880141e 	bne	r3,r2,2df18 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2dec8:	e0bfff17 	ldw	r2,-4(fp)
   2decc:	1090000c 	andi	r2,r2,16384
   2ded0:	1000131e 	bne	r2,zero,2df20 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2ded4:	0001883a 	nop
   2ded8:	e0bffc17 	ldw	r2,-16(fp)
   2dedc:	10c00a17 	ldw	r3,40(r2)
   2dee0:	e0bff717 	ldw	r2,-36(fp)
   2dee4:	1880051e 	bne	r3,r2,2defc <altera_avalon_jtag_uart_read+0x138>
   2dee8:	e0bffc17 	ldw	r2,-16(fp)
   2deec:	10c00917 	ldw	r3,36(r2)
   2def0:	e0bffc17 	ldw	r2,-16(fp)
   2def4:	10800117 	ldw	r2,4(r2)
   2def8:	18bff736 	bltu	r3,r2,2ded8 <__alt_data_end+0xfffeded8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2defc:	e0bffc17 	ldw	r2,-16(fp)
   2df00:	10c00a17 	ldw	r3,40(r2)
   2df04:	e0bff717 	ldw	r2,-36(fp)
   2df08:	18800726 	beq	r3,r2,2df28 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2df0c:	e0bffe17 	ldw	r2,-8(fp)
   2df10:	00bfb716 	blt	zero,r2,2ddf0 <__alt_data_end+0xfffeddf0>
   2df14:	00000506 	br	2df2c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2df18:	0001883a 	nop
   2df1c:	00000306 	br	2df2c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2df20:	0001883a 	nop
   2df24:	00000106 	br	2df2c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2df28:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2df2c:	e0fff517 	ldw	r3,-44(fp)
   2df30:	e0bffd17 	ldw	r2,-12(fp)
   2df34:	18801826 	beq	r3,r2,2df98 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2df38:	0005303a 	rdctl	r2,status
   2df3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2df40:	e0fffb17 	ldw	r3,-20(fp)
   2df44:	00bfff84 	movi	r2,-2
   2df48:	1884703a 	and	r2,r3,r2
   2df4c:	1001703a 	wrctl	status,r2
  
  return context;
   2df50:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2df54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2df58:	e0bffc17 	ldw	r2,-16(fp)
   2df5c:	10800817 	ldw	r2,32(r2)
   2df60:	10c00054 	ori	r3,r2,1
   2df64:	e0bffc17 	ldw	r2,-16(fp)
   2df68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2df6c:	e0bffc17 	ldw	r2,-16(fp)
   2df70:	10800017 	ldw	r2,0(r2)
   2df74:	10800104 	addi	r2,r2,4
   2df78:	1007883a 	mov	r3,r2
   2df7c:	e0bffc17 	ldw	r2,-16(fp)
   2df80:	10800817 	ldw	r2,32(r2)
   2df84:	18800035 	stwio	r2,0(r3)
   2df88:	e0bffa17 	ldw	r2,-24(fp)
   2df8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2df90:	e0bff917 	ldw	r2,-28(fp)
   2df94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2df98:	e0fff517 	ldw	r3,-44(fp)
   2df9c:	e0bffd17 	ldw	r2,-12(fp)
   2dfa0:	18800426 	beq	r3,r2,2dfb4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2dfa4:	e0fff517 	ldw	r3,-44(fp)
   2dfa8:	e0bffd17 	ldw	r2,-12(fp)
   2dfac:	1885c83a 	sub	r2,r3,r2
   2dfb0:	00000606 	br	2dfcc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2dfb4:	e0bfff17 	ldw	r2,-4(fp)
   2dfb8:	1090000c 	andi	r2,r2,16384
   2dfbc:	10000226 	beq	r2,zero,2dfc8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2dfc0:	00bffd44 	movi	r2,-11
   2dfc4:	00000106 	br	2dfcc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2dfc8:	00bffec4 	movi	r2,-5
}
   2dfcc:	e037883a 	mov	sp,fp
   2dfd0:	dfc00117 	ldw	ra,4(sp)
   2dfd4:	df000017 	ldw	fp,0(sp)
   2dfd8:	dec00204 	addi	sp,sp,8
   2dfdc:	f800283a 	ret

0002dfe0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2dfe0:	defff304 	addi	sp,sp,-52
   2dfe4:	dfc00c15 	stw	ra,48(sp)
   2dfe8:	df000b15 	stw	fp,44(sp)
   2dfec:	df000b04 	addi	fp,sp,44
   2dff0:	e13ffc15 	stw	r4,-16(fp)
   2dff4:	e17ffd15 	stw	r5,-12(fp)
   2dff8:	e1bffe15 	stw	r6,-8(fp)
   2dffc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2e000:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2e004:	e0bffd17 	ldw	r2,-12(fp)
   2e008:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e00c:	00003706 	br	2e0ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2e010:	e0bffc17 	ldw	r2,-16(fp)
   2e014:	10800c17 	ldw	r2,48(r2)
   2e018:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2e01c:	e0bffc17 	ldw	r2,-16(fp)
   2e020:	10800d17 	ldw	r2,52(r2)
   2e024:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2e028:	e0fff917 	ldw	r3,-28(fp)
   2e02c:	e0bff517 	ldw	r2,-44(fp)
   2e030:	1880062e 	bgeu	r3,r2,2e04c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2e034:	e0fff517 	ldw	r3,-44(fp)
   2e038:	e0bff917 	ldw	r2,-28(fp)
   2e03c:	1885c83a 	sub	r2,r3,r2
   2e040:	10bfffc4 	addi	r2,r2,-1
   2e044:	e0bff615 	stw	r2,-40(fp)
   2e048:	00000b06 	br	2e078 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2e04c:	e0bff517 	ldw	r2,-44(fp)
   2e050:	10000526 	beq	r2,zero,2e068 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2e054:	00c20004 	movi	r3,2048
   2e058:	e0bff917 	ldw	r2,-28(fp)
   2e05c:	1885c83a 	sub	r2,r3,r2
   2e060:	e0bff615 	stw	r2,-40(fp)
   2e064:	00000406 	br	2e078 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2e068:	00c1ffc4 	movi	r3,2047
   2e06c:	e0bff917 	ldw	r2,-28(fp)
   2e070:	1885c83a 	sub	r2,r3,r2
   2e074:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e078:	e0bff617 	ldw	r2,-40(fp)
   2e07c:	10001e26 	beq	r2,zero,2e0f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2e080:	e0fffe17 	ldw	r3,-8(fp)
   2e084:	e0bff617 	ldw	r2,-40(fp)
   2e088:	1880022e 	bgeu	r3,r2,2e094 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2e08c:	e0bffe17 	ldw	r2,-8(fp)
   2e090:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2e094:	e0bffc17 	ldw	r2,-16(fp)
   2e098:	10c20e04 	addi	r3,r2,2104
   2e09c:	e0bff917 	ldw	r2,-28(fp)
   2e0a0:	1885883a 	add	r2,r3,r2
   2e0a4:	e1bff617 	ldw	r6,-40(fp)
   2e0a8:	e17ffd17 	ldw	r5,-12(fp)
   2e0ac:	1009883a 	mov	r4,r2
   2e0b0:	0025e680 	call	25e68 <memcpy>
      ptr   += n;
   2e0b4:	e0fffd17 	ldw	r3,-12(fp)
   2e0b8:	e0bff617 	ldw	r2,-40(fp)
   2e0bc:	1885883a 	add	r2,r3,r2
   2e0c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2e0c4:	e0fffe17 	ldw	r3,-8(fp)
   2e0c8:	e0bff617 	ldw	r2,-40(fp)
   2e0cc:	1885c83a 	sub	r2,r3,r2
   2e0d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e0d4:	e0fff917 	ldw	r3,-28(fp)
   2e0d8:	e0bff617 	ldw	r2,-40(fp)
   2e0dc:	1885883a 	add	r2,r3,r2
   2e0e0:	10c1ffcc 	andi	r3,r2,2047
   2e0e4:	e0bffc17 	ldw	r2,-16(fp)
   2e0e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e0ec:	e0bffe17 	ldw	r2,-8(fp)
   2e0f0:	00bfc716 	blt	zero,r2,2e010 <__alt_data_end+0xfffee010>
   2e0f4:	00000106 	br	2e0fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2e0f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e0fc:	0005303a 	rdctl	r2,status
   2e100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e104:	e0fffb17 	ldw	r3,-20(fp)
   2e108:	00bfff84 	movi	r2,-2
   2e10c:	1884703a 	and	r2,r3,r2
   2e110:	1001703a 	wrctl	status,r2
  
  return context;
   2e114:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2e118:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e11c:	e0bffc17 	ldw	r2,-16(fp)
   2e120:	10800817 	ldw	r2,32(r2)
   2e124:	10c00094 	ori	r3,r2,2
   2e128:	e0bffc17 	ldw	r2,-16(fp)
   2e12c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e130:	e0bffc17 	ldw	r2,-16(fp)
   2e134:	10800017 	ldw	r2,0(r2)
   2e138:	10800104 	addi	r2,r2,4
   2e13c:	1007883a 	mov	r3,r2
   2e140:	e0bffc17 	ldw	r2,-16(fp)
   2e144:	10800817 	ldw	r2,32(r2)
   2e148:	18800035 	stwio	r2,0(r3)
   2e14c:	e0bffa17 	ldw	r2,-24(fp)
   2e150:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e154:	e0bff817 	ldw	r2,-32(fp)
   2e158:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2e15c:	e0bffe17 	ldw	r2,-8(fp)
   2e160:	0080100e 	bge	zero,r2,2e1a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2e164:	e0bfff17 	ldw	r2,-4(fp)
   2e168:	1090000c 	andi	r2,r2,16384
   2e16c:	1000101e 	bne	r2,zero,2e1b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2e170:	0001883a 	nop
   2e174:	e0bffc17 	ldw	r2,-16(fp)
   2e178:	10c00d17 	ldw	r3,52(r2)
   2e17c:	e0bff517 	ldw	r2,-44(fp)
   2e180:	1880051e 	bne	r3,r2,2e198 <altera_avalon_jtag_uart_write+0x1b8>
   2e184:	e0bffc17 	ldw	r2,-16(fp)
   2e188:	10c00917 	ldw	r3,36(r2)
   2e18c:	e0bffc17 	ldw	r2,-16(fp)
   2e190:	10800117 	ldw	r2,4(r2)
   2e194:	18bff736 	bltu	r3,r2,2e174 <__alt_data_end+0xfffee174>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2e198:	e0bffc17 	ldw	r2,-16(fp)
   2e19c:	10800917 	ldw	r2,36(r2)
   2e1a0:	1000051e 	bne	r2,zero,2e1b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2e1a4:	e0bffe17 	ldw	r2,-8(fp)
   2e1a8:	00bfd016 	blt	zero,r2,2e0ec <__alt_data_end+0xfffee0ec>
   2e1ac:	00000306 	br	2e1bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2e1b0:	0001883a 	nop
   2e1b4:	00000106 	br	2e1bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2e1b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2e1bc:	e0fffd17 	ldw	r3,-12(fp)
   2e1c0:	e0bff717 	ldw	r2,-36(fp)
   2e1c4:	18800426 	beq	r3,r2,2e1d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2e1c8:	e0fffd17 	ldw	r3,-12(fp)
   2e1cc:	e0bff717 	ldw	r2,-36(fp)
   2e1d0:	1885c83a 	sub	r2,r3,r2
   2e1d4:	00000606 	br	2e1f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2e1d8:	e0bfff17 	ldw	r2,-4(fp)
   2e1dc:	1090000c 	andi	r2,r2,16384
   2e1e0:	10000226 	beq	r2,zero,2e1ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2e1e4:	00bffd44 	movi	r2,-11
   2e1e8:	00000106 	br	2e1f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2e1ec:	00bffec4 	movi	r2,-5
}
   2e1f0:	e037883a 	mov	sp,fp
   2e1f4:	dfc00117 	ldw	ra,4(sp)
   2e1f8:	df000017 	ldw	fp,0(sp)
   2e1fc:	dec00204 	addi	sp,sp,8
   2e200:	f800283a 	ret

0002e204 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
   2e204:	defffd04 	addi	sp,sp,-12
   2e208:	df000215 	stw	fp,8(sp)
   2e20c:	df000204 	addi	fp,sp,8
   2e210:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
   2e214:	008e84b4 	movhi	r2,14866
   2e218:	10ac1144 	addi	r2,r2,-20411
   2e21c:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
   2e220:	e0bfff17 	ldw	r2,-4(fp)
   2e224:	10800a17 	ldw	r2,40(r2)
   2e228:	10800104 	addi	r2,r2,4
   2e22c:	1007883a 	mov	r3,r2
   2e230:	e0bffe17 	ldw	r2,-8(fp)
   2e234:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
   2e238:	e0bfff17 	ldw	r2,-4(fp)
   2e23c:	10800a17 	ldw	r2,40(r2)
   2e240:	10800104 	addi	r2,r2,4
   2e244:	10800037 	ldwio	r2,0(r2)
   2e248:	1007883a 	mov	r3,r2
   2e24c:	e0bffe17 	ldw	r2,-8(fp)
   2e250:	1880081e 	bne	r3,r2,2e274 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
   2e254:	e0bfff17 	ldw	r2,-4(fp)
   2e258:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
   2e25c:	e0bfff17 	ldw	r2,-4(fp)
   2e260:	10800a17 	ldw	r2,40(r2)
   2e264:	10800104 	addi	r2,r2,4
   2e268:	0007883a 	mov	r3,zero
   2e26c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
   2e270:	00000306 	br	2e280 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
   2e274:	e0bfff17 	ldw	r2,-4(fp)
   2e278:	00c00044 	movi	r3,1
   2e27c:	10c00f15 	stw	r3,60(r2)
    }
}
   2e280:	0001883a 	nop
   2e284:	e037883a 	mov	sp,fp
   2e288:	df000017 	ldw	fp,0(sp)
   2e28c:	dec00104 	addi	sp,sp,4
   2e290:	f800283a 	ret

0002e294 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
   2e294:	defffc04 	addi	sp,sp,-16
   2e298:	df000315 	stw	fp,12(sp)
   2e29c:	df000304 	addi	fp,sp,12
   2e2a0:	e13ffe15 	stw	r4,-8(fp)
   2e2a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
   2e2a8:	e0bfff17 	ldw	r2,-4(fp)
   2e2ac:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
   2e2b0:	e0bffd17 	ldw	r2,-12(fp)
   2e2b4:	10001026 	beq	r2,zero,2e2f8 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
   2e2b8:	e0bffe17 	ldw	r2,-8(fp)
   2e2bc:	10800a17 	ldw	r2,40(r2)
   2e2c0:	10800104 	addi	r2,r2,4
   2e2c4:	1007883a 	mov	r3,r2
   2e2c8:	e0bffd17 	ldw	r2,-12(fp)
   2e2cc:	10800104 	addi	r2,r2,4
   2e2d0:	10800017 	ldw	r2,0(r2)
   2e2d4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
   2e2d8:	e0bffe17 	ldw	r2,-8(fp)
   2e2dc:	10800a17 	ldw	r2,40(r2)
   2e2e0:	1007883a 	mov	r3,r2
   2e2e4:	e0bffd17 	ldw	r2,-12(fp)
   2e2e8:	10800017 	ldw	r2,0(r2)
   2e2ec:	18800035 	stwio	r2,0(r3)
        return 0;
   2e2f0:	0005883a 	mov	r2,zero
   2e2f4:	00000106 	br	2e2fc <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
   2e2f8:	00bffa84 	movi	r2,-22
}
   2e2fc:	e037883a 	mov	sp,fp
   2e300:	df000017 	ldw	fp,0(sp)
   2e304:	dec00104 	addi	sp,sp,4
   2e308:	f800283a 	ret

0002e30c <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
   2e30c:	defff604 	addi	sp,sp,-40
   2e310:	dfc00915 	stw	ra,36(sp)
   2e314:	df000815 	stw	fp,32(sp)
   2e318:	df000804 	addi	fp,sp,32
   2e31c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   2e320:	e0bfff17 	ldw	r2,-4(fp)
   2e324:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
   2e328:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
   2e32c:	e0bff817 	ldw	r2,-32(fp)
   2e330:	10801017 	ldw	r2,64(r2)
   2e334:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   2e338:	e0bff817 	ldw	r2,-32(fp)
   2e33c:	10800a17 	ldw	r2,40(r2)
   2e340:	10800304 	addi	r2,r2,12
   2e344:	10800037 	ldwio	r2,0(r2)
   2e348:	1007883a 	mov	r3,r2
   2e34c:	00bfff44 	movi	r2,-3
   2e350:	1884703a 	and	r2,r3,r2
   2e354:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2e358:	e0bff817 	ldw	r2,-32(fp)
   2e35c:	10800a17 	ldw	r2,40(r2)
   2e360:	10800304 	addi	r2,r2,12
   2e364:	1007883a 	mov	r3,r2
   2e368:	e0bffb17 	ldw	r2,-20(fp)
   2e36c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
   2e370:	e0bffa17 	ldw	r2,-24(fp)
   2e374:	10002d26 	beq	r2,zero,2e42c <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
   2e378:	e0bff817 	ldw	r2,-32(fp)
   2e37c:	10800a17 	ldw	r2,40(r2)
   2e380:	10800104 	addi	r2,r2,4
   2e384:	1007883a 	mov	r3,r2
   2e388:	e0bffa17 	ldw	r2,-24(fp)
   2e38c:	10800104 	addi	r2,r2,4
   2e390:	10800017 	ldw	r2,0(r2)
   2e394:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
   2e398:	e0bff817 	ldw	r2,-32(fp)
   2e39c:	10800a17 	ldw	r2,40(r2)
   2e3a0:	1007883a 	mov	r3,r2
   2e3a4:	e0bffa17 	ldw	r2,-24(fp)
   2e3a8:	10800017 	ldw	r2,0(r2)
   2e3ac:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2e3b0:	e0bff817 	ldw	r2,-32(fp)
   2e3b4:	10800a17 	ldw	r2,40(r2)
   2e3b8:	10800204 	addi	r2,r2,8
   2e3bc:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   2e3c0:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2e3c4:	1005d07a 	srai	r2,r2,1
   2e3c8:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
   2e3cc:	e0bff817 	ldw	r2,-32(fp)
   2e3d0:	10800d17 	ldw	r2,52(r2)
   2e3d4:	10001126 	beq	r2,zero,2e41c <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e3d8:	0005303a 	rdctl	r2,status
   2e3dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e3e0:	e0fffd17 	ldw	r3,-12(fp)
   2e3e4:	00bfff84 	movi	r2,-2
   2e3e8:	1884703a 	and	r2,r3,r2
   2e3ec:	1001703a 	wrctl	status,r2
  
  return context;
   2e3f0:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
   2e3f4:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
   2e3f8:	e0bff817 	ldw	r2,-32(fp)
   2e3fc:	10800d17 	ldw	r2,52(r2)
   2e400:	e17ff917 	ldw	r5,-28(fp)
   2e404:	e13ffa17 	ldw	r4,-24(fp)
   2e408:	103ee83a 	callr	r2
   2e40c:	e0bffc17 	ldw	r2,-16(fp)
   2e410:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e414:	e0bffe17 	ldw	r2,-8(fp)
   2e418:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   2e41c:	e0bff817 	ldw	r2,-32(fp)
   2e420:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
   2e424:	e0bff817 	ldw	r2,-32(fp)
   2e428:	10001105 	stb	zero,68(r2)
    }
}
   2e42c:	0001883a 	nop
   2e430:	e037883a 	mov	sp,fp
   2e434:	dfc00117 	ldw	ra,4(sp)
   2e438:	df000017 	ldw	fp,0(sp)
   2e43c:	dec00204 	addi	sp,sp,8
   2e440:	f800283a 	ret

0002e444 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
   2e444:	defff704 	addi	sp,sp,-36
   2e448:	dfc00815 	stw	ra,32(sp)
   2e44c:	df000715 	stw	fp,28(sp)
   2e450:	df000704 	addi	fp,sp,28
   2e454:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
   2e458:	e0bfff17 	ldw	r2,-4(fp)
   2e45c:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   2e460:	e0bff917 	ldw	r2,-28(fp)
   2e464:	10800a17 	ldw	r2,40(r2)
   2e468:	10800104 	addi	r2,r2,4
   2e46c:	10800037 	ldwio	r2,0(r2)
   2e470:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   2e474:	e0bff917 	ldw	r2,-28(fp)
   2e478:	10800a17 	ldw	r2,40(r2)
   2e47c:	10800037 	ldwio	r2,0(r2)
   2e480:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
   2e484:	e0bff917 	ldw	r2,-28(fp)
   2e488:	10800e17 	ldw	r2,56(r2)
   2e48c:	10001126 	beq	r2,zero,2e4d4 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e490:	0005303a 	rdctl	r2,status
   2e494:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e498:	e0fffb17 	ldw	r3,-20(fp)
   2e49c:	00bfff84 	movi	r2,-2
   2e4a0:	1884703a 	and	r2,r3,r2
   2e4a4:	1001703a 	wrctl	status,r2
  
  return context;
   2e4a8:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2e4ac:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
   2e4b0:	e0bff917 	ldw	r2,-28(fp)
   2e4b4:	10800e17 	ldw	r2,56(r2)
   2e4b8:	e0fffd04 	addi	r3,fp,-12
   2e4bc:	1809883a 	mov	r4,r3
   2e4c0:	103ee83a 	callr	r2
   2e4c4:	e0bffa17 	ldw	r2,-24(fp)
   2e4c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e4cc:	e0bffc17 	ldw	r2,-16(fp)
   2e4d0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
   2e4d4:	0001883a 	nop
   2e4d8:	e037883a 	mov	sp,fp
   2e4dc:	dfc00117 	ldw	ra,4(sp)
   2e4e0:	df000017 	ldw	fp,0(sp)
   2e4e4:	dec00204 	addi	sp,sp,8
   2e4e8:	f800283a 	ret

0002e4ec <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
   2e4ec:	defffb04 	addi	sp,sp,-20
   2e4f0:	dfc00415 	stw	ra,16(sp)
   2e4f4:	df000315 	stw	fp,12(sp)
   2e4f8:	df000304 	addi	fp,sp,12
   2e4fc:	e13ffd15 	stw	r4,-12(fp)
   2e500:	e17ffe15 	stw	r5,-8(fp)
   2e504:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
   2e508:	d1600d04 	addi	r5,gp,-32716
   2e50c:	e13ffd17 	ldw	r4,-12(fp)
   2e510:	002f8b80 	call	2f8b8 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
   2e514:	e0ffff17 	ldw	r3,-4(fp)
   2e518:	e0bffd17 	ldw	r2,-12(fp)
   2e51c:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
   2e520:	e0fffe17 	ldw	r3,-8(fp)
   2e524:	e0bffd17 	ldw	r2,-12(fp)
   2e528:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
   2e52c:	e0bffd17 	ldw	r2,-12(fp)
   2e530:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
   2e534:	e0bffd17 	ldw	r2,-12(fp)
   2e538:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
   2e53c:	e0bffd17 	ldw	r2,-12(fp)
   2e540:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
   2e544:	e13ffd17 	ldw	r4,-12(fp)
   2e548:	002e2040 	call	2e204 <altera_avalon_mailbox_identify>
}
   2e54c:	0001883a 	nop
   2e550:	e037883a 	mov	sp,fp
   2e554:	dfc00117 	ldw	ra,4(sp)
   2e558:	df000017 	ldw	fp,0(sp)
   2e55c:	dec00204 	addi	sp,sp,8
   2e560:	f800283a 	ret

0002e564 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
   2e564:	defff804 	addi	sp,sp,-32
   2e568:	dfc00715 	stw	ra,28(sp)
   2e56c:	df000615 	stw	fp,24(sp)
   2e570:	df000604 	addi	fp,sp,24
   2e574:	e13ffd15 	stw	r4,-12(fp)
   2e578:	e17ffe15 	stw	r5,-8(fp)
   2e57c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
   2e580:	d1600d04 	addi	r5,gp,-32716
   2e584:	e13ffd17 	ldw	r4,-12(fp)
   2e588:	002fa1c0 	call	2fa1c <alt_find_dev>
   2e58c:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
   2e590:	e0bffb17 	ldw	r2,-20(fp)
   2e594:	1000021e 	bne	r2,zero,2e5a0 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
   2e598:	0005883a 	mov	r2,zero
   2e59c:	00006506 	br	2e734 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   2e5a0:	e0bffb17 	ldw	r2,-20(fp)
   2e5a4:	10800a17 	ldw	r2,40(r2)
   2e5a8:	10800304 	addi	r2,r2,12
   2e5ac:	10800037 	ldwio	r2,0(r2)
   2e5b0:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
   2e5b4:	e0bffb17 	ldw	r2,-20(fp)
   2e5b8:	10800f17 	ldw	r2,60(r2)
   2e5bc:	1000081e 	bne	r2,zero,2e5e0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   2e5c0:	e0bffb17 	ldw	r2,-20(fp)
   2e5c4:	10800a17 	ldw	r2,40(r2)
   2e5c8:	10800304 	addi	r2,r2,12
   2e5cc:	1009883a 	mov	r4,r2
   2e5d0:	e0fffc17 	ldw	r3,-16(fp)
   2e5d4:	00bfff44 	movi	r2,-3
   2e5d8:	1884703a 	and	r2,r3,r2
   2e5dc:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
   2e5e0:	e0bffb17 	ldw	r2,-20(fp)
   2e5e4:	10800f17 	ldw	r2,60(r2)
   2e5e8:	10800058 	cmpnei	r2,r2,1
   2e5ec:	1000081e 	bne	r2,zero,2e610 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
   2e5f0:	e0bffb17 	ldw	r2,-20(fp)
   2e5f4:	10800a17 	ldw	r2,40(r2)
   2e5f8:	10800304 	addi	r2,r2,12
   2e5fc:	1009883a 	mov	r4,r2
   2e600:	e0fffc17 	ldw	r3,-16(fp)
   2e604:	00bfff84 	movi	r2,-2
   2e608:	1884703a 	and	r2,r3,r2
   2e60c:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
   2e610:	e0bffb17 	ldw	r2,-20(fp)
   2e614:	10800b17 	ldw	r2,44(r2)
   2e618:	10bfffd8 	cmpnei	r2,r2,-1
   2e61c:	1000021e 	bne	r2,zero,2e628 <altera_avalon_mailbox_open+0xc4>
        return dev;
   2e620:	e0bffb17 	ldw	r2,-20(fp)
   2e624:	00004306 	br	2e734 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
   2e628:	e0bffe17 	ldw	r2,-8(fp)
   2e62c:	1000041e 	bne	r2,zero,2e640 <altera_avalon_mailbox_open+0xdc>
   2e630:	e0bfff17 	ldw	r2,-4(fp)
   2e634:	1000021e 	bne	r2,zero,2e640 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
   2e638:	e0bffb17 	ldw	r2,-20(fp)
   2e63c:	00003d06 	br	2e734 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   2e640:	e0bffb17 	ldw	r2,-20(fp)
   2e644:	10800f17 	ldw	r2,60(r2)
   2e648:	1000021e 	bne	r2,zero,2e654 <altera_avalon_mailbox_open+0xf0>
   2e64c:	e0bfff17 	ldw	r2,-4(fp)
   2e650:	1000061e 	bne	r2,zero,2e66c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   2e654:	e0bffb17 	ldw	r2,-20(fp)
   2e658:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
   2e65c:	10800058 	cmpnei	r2,r2,1
   2e660:	1000041e 	bne	r2,zero,2e674 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
   2e664:	e0bffe17 	ldw	r2,-8(fp)
   2e668:	10000226 	beq	r2,zero,2e674 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
   2e66c:	0005883a 	mov	r2,zero
   2e670:	00003006 	br	2e734 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
   2e674:	e0bffb17 	ldw	r2,-20(fp)
   2e678:	e0fffe17 	ldw	r3,-8(fp)
   2e67c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
   2e680:	e0bffb17 	ldw	r2,-20(fp)
   2e684:	e0ffff17 	ldw	r3,-4(fp)
   2e688:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
   2e68c:	e0bffb17 	ldw	r2,-20(fp)
   2e690:	10800f17 	ldw	r2,60(r2)
   2e694:	10000b1e 	bne	r2,zero,2e6c4 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
   2e698:	e0bffb17 	ldw	r2,-20(fp)
   2e69c:	10c00c17 	ldw	r3,48(r2)
   2e6a0:	e0bffb17 	ldw	r2,-20(fp)
   2e6a4:	10800b17 	ldw	r2,44(r2)
   2e6a8:	d8000015 	stw	zero,0(sp)
   2e6ac:	e1fffb17 	ldw	r7,-20(fp)
   2e6b0:	018000f4 	movhi	r6,3
   2e6b4:	31b8c304 	addi	r6,r6,-7412
   2e6b8:	100b883a 	mov	r5,r2
   2e6bc:	1809883a 	mov	r4,r3
   2e6c0:	002fae00 	call	2fae0 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
   2e6c4:	e0bffb17 	ldw	r2,-20(fp)
   2e6c8:	10800f17 	ldw	r2,60(r2)
   2e6cc:	10800058 	cmpnei	r2,r2,1
   2e6d0:	1000171e 	bne	r2,zero,2e730 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
   2e6d4:	e0bffb17 	ldw	r2,-20(fp)
   2e6d8:	10c00c17 	ldw	r3,48(r2)
   2e6dc:	e0bffb17 	ldw	r2,-20(fp)
   2e6e0:	10800b17 	ldw	r2,44(r2)
   2e6e4:	d8000015 	stw	zero,0(sp)
   2e6e8:	e1fffb17 	ldw	r7,-20(fp)
   2e6ec:	018000f4 	movhi	r6,3
   2e6f0:	31b91104 	addi	r6,r6,-7100
   2e6f4:	100b883a 	mov	r5,r2
   2e6f8:	1809883a 	mov	r4,r3
   2e6fc:	002fae00 	call	2fae0 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   2e700:	e0bffb17 	ldw	r2,-20(fp)
   2e704:	10800a17 	ldw	r2,40(r2)
   2e708:	10800304 	addi	r2,r2,12
   2e70c:	10800037 	ldwio	r2,0(r2)
   2e710:	10800054 	ori	r2,r2,1
   2e714:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2e718:	e0bffb17 	ldw	r2,-20(fp)
   2e71c:	10800a17 	ldw	r2,40(r2)
   2e720:	10800304 	addi	r2,r2,12
   2e724:	1007883a 	mov	r3,r2
   2e728:	e0bffc17 	ldw	r2,-16(fp)
   2e72c:	18800035 	stwio	r2,0(r3)
    }
    return dev;
   2e730:	e0bffb17 	ldw	r2,-20(fp)
}
   2e734:	e037883a 	mov	sp,fp
   2e738:	dfc00117 	ldw	ra,4(sp)
   2e73c:	df000017 	ldw	fp,0(sp)
   2e740:	dec00204 	addi	sp,sp,8
   2e744:	f800283a 	ret

0002e748 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
   2e748:	defffb04 	addi	sp,sp,-20
   2e74c:	dfc00415 	stw	ra,16(sp)
   2e750:	df000315 	stw	fp,12(sp)
   2e754:	df000304 	addi	fp,sp,12
   2e758:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
   2e75c:	e0bfff17 	ldw	r2,-4(fp)
   2e760:	10003926 	beq	r2,zero,2e848 <altera_avalon_mailbox_close+0x100>
   2e764:	e0bfff17 	ldw	r2,-4(fp)
   2e768:	10800b17 	ldw	r2,44(r2)
   2e76c:	10bfffe0 	cmpeqi	r2,r2,-1
   2e770:	1000351e 	bne	r2,zero,2e848 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
   2e774:	e0bfff17 	ldw	r2,-4(fp)
   2e778:	10800f17 	ldw	r2,60(r2)
   2e77c:	10000e1e 	bne	r2,zero,2e7b8 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   2e780:	e0bfff17 	ldw	r2,-4(fp)
   2e784:	10800a17 	ldw	r2,40(r2)
   2e788:	10800304 	addi	r2,r2,12
   2e78c:	10800037 	ldwio	r2,0(r2)
   2e790:	1007883a 	mov	r3,r2
   2e794:	00bfff44 	movi	r2,-3
   2e798:	1884703a 	and	r2,r3,r2
   2e79c:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2e7a0:	e0bfff17 	ldw	r2,-4(fp)
   2e7a4:	10800a17 	ldw	r2,40(r2)
   2e7a8:	10800304 	addi	r2,r2,12
   2e7ac:	1007883a 	mov	r3,r2
   2e7b0:	e0bffe17 	ldw	r2,-8(fp)
   2e7b4:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
   2e7b8:	e0bfff17 	ldw	r2,-4(fp)
   2e7bc:	10800f17 	ldw	r2,60(r2)
   2e7c0:	10800058 	cmpnei	r2,r2,1
   2e7c4:	10000e1e 	bne	r2,zero,2e800 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
   2e7c8:	e0bfff17 	ldw	r2,-4(fp)
   2e7cc:	10800a17 	ldw	r2,40(r2)
   2e7d0:	10800304 	addi	r2,r2,12
   2e7d4:	10800037 	ldwio	r2,0(r2)
   2e7d8:	1007883a 	mov	r3,r2
   2e7dc:	00bfff84 	movi	r2,-2
   2e7e0:	1884703a 	and	r2,r3,r2
   2e7e4:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2e7e8:	e0bfff17 	ldw	r2,-4(fp)
   2e7ec:	10800a17 	ldw	r2,40(r2)
   2e7f0:	10800304 	addi	r2,r2,12
   2e7f4:	1007883a 	mov	r3,r2
   2e7f8:	e0bffe17 	ldw	r2,-8(fp)
   2e7fc:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
   2e800:	e0bfff17 	ldw	r2,-4(fp)
   2e804:	10800b17 	ldw	r2,44(r2)
   2e808:	10bfffe0 	cmpeqi	r2,r2,-1
   2e80c:	10000a1e 	bne	r2,zero,2e838 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
   2e810:	e0bfff17 	ldw	r2,-4(fp)
   2e814:	10c00c17 	ldw	r3,48(r2)
   2e818:	e0bfff17 	ldw	r2,-4(fp)
   2e81c:	10800b17 	ldw	r2,44(r2)
   2e820:	d8000015 	stw	zero,0(sp)
   2e824:	e1ffff17 	ldw	r7,-4(fp)
   2e828:	000d883a 	mov	r6,zero
   2e82c:	100b883a 	mov	r5,r2
   2e830:	1809883a 	mov	r4,r3
   2e834:	002fae00 	call	2fae0 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
   2e838:	e0bfff17 	ldw	r2,-4(fp)
   2e83c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
   2e840:	e0bfff17 	ldw	r2,-4(fp)
   2e844:	10000e15 	stw	zero,56(r2)
    }
}
   2e848:	0001883a 	nop
   2e84c:	e037883a 	mov	sp,fp
   2e850:	dfc00117 	ldw	ra,4(sp)
   2e854:	df000017 	ldw	fp,0(sp)
   2e858:	dec00204 	addi	sp,sp,8
   2e85c:	f800283a 	ret

0002e860 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
   2e860:	defffd04 	addi	sp,sp,-12
   2e864:	df000215 	stw	fp,8(sp)
   2e868:	df000204 	addi	fp,sp,8
   2e86c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
   2e870:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
   2e874:	e0bfff17 	ldw	r2,-4(fp)
   2e878:	10800a17 	ldw	r2,40(r2)
   2e87c:	10800204 	addi	r2,r2,8
   2e880:	10800037 	ldwio	r2,0(r2)
   2e884:	108000cc 	andi	r2,r2,3
   2e888:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
   2e88c:	e0bfff17 	ldw	r2,-4(fp)
   2e890:	10800f17 	ldw	r2,60(r2)
   2e894:	1000041e 	bne	r2,zero,2e8a8 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
   2e898:	e0bffe17 	ldw	r2,-8(fp)
   2e89c:	1080008c 	andi	r2,r2,2
   2e8a0:	1004d07a 	srli	r2,r2,1
   2e8a4:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
   2e8a8:	e0bfff17 	ldw	r2,-4(fp)
   2e8ac:	10800f17 	ldw	r2,60(r2)
   2e8b0:	10800058 	cmpnei	r2,r2,1
   2e8b4:	1000031e 	bne	r2,zero,2e8c4 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
   2e8b8:	e0bffe17 	ldw	r2,-8(fp)
   2e8bc:	1080004c 	andi	r2,r2,1
   2e8c0:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
   2e8c4:	e0bffe17 	ldw	r2,-8(fp)
}
   2e8c8:	e037883a 	mov	sp,fp
   2e8cc:	df000017 	ldw	fp,0(sp)
   2e8d0:	dec00104 	addi	sp,sp,4
   2e8d4:	f800283a 	ret

0002e8d8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
   2e8d8:	defff704 	addi	sp,sp,-36
   2e8dc:	dfc00815 	stw	ra,32(sp)
   2e8e0:	df000715 	stw	fp,28(sp)
   2e8e4:	df000704 	addi	fp,sp,28
   2e8e8:	e13ffc15 	stw	r4,-16(fp)
   2e8ec:	e17ffd15 	stw	r5,-12(fp)
   2e8f0:	e1bffe15 	stw	r6,-8(fp)
   2e8f4:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
   2e8f8:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2e8fc:	e0bffc17 	ldw	r2,-16(fp)
   2e900:	10801103 	ldbu	r2,68(r2)
   2e904:	10803fcc 	andi	r2,r2,255
   2e908:	1000061e 	bne	r2,zero,2e924 <altera_avalon_mailbox_send+0x4c>
   2e90c:	e0bffc17 	ldw	r2,-16(fp)
   2e910:	10800a17 	ldw	r2,40(r2)
   2e914:	10800204 	addi	r2,r2,8
   2e918:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
   2e91c:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
   2e920:	10000226 	beq	r2,zero,2e92c <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
   2e924:	00bfffc4 	movi	r2,-1
   2e928:	00003a06 	br	2ea14 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
   2e92c:	e0bffc17 	ldw	r2,-16(fp)
   2e930:	e0fffd17 	ldw	r3,-12(fp)
   2e934:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
   2e938:	e0bffc17 	ldw	r2,-16(fp)
   2e93c:	00c00044 	movi	r3,1
   2e940:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
   2e944:	e0bffc17 	ldw	r2,-16(fp)
   2e948:	10800b17 	ldw	r2,44(r2)
   2e94c:	10bfffe0 	cmpeqi	r2,r2,-1
   2e950:	1000031e 	bne	r2,zero,2e960 <altera_avalon_mailbox_send+0x88>
   2e954:	e0bfff17 	ldw	r2,-4(fp)
   2e958:	10800058 	cmpnei	r2,r2,1
   2e95c:	1000201e 	bne	r2,zero,2e9e0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
   2e960:	e0bffe17 	ldw	r2,-8(fp)
   2e964:	1000061e 	bne	r2,zero,2e980 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   2e968:	e13ffc17 	ldw	r4,-16(fp)
   2e96c:	002e8600 	call	2e860 <altera_avalon_mailbox_status>
   2e970:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
   2e974:	e0bffb17 	ldw	r2,-20(fp)
   2e978:	103ffb1e 	bne	r2,zero,2e968 <__alt_data_end+0xfffee968>
   2e97c:	00000e06 	br	2e9b8 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
   2e980:	e13ffc17 	ldw	r4,-16(fp)
   2e984:	002e8600 	call	2e860 <altera_avalon_mailbox_status>
   2e988:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
   2e98c:	e0bffe17 	ldw	r2,-8(fp)
   2e990:	10bfffc4 	addi	r2,r2,-1
   2e994:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
   2e998:	e0bffb17 	ldw	r2,-20(fp)
   2e99c:	10000226 	beq	r2,zero,2e9a8 <altera_avalon_mailbox_send+0xd0>
   2e9a0:	e0bffe17 	ldw	r2,-8(fp)
   2e9a4:	103ff61e 	bne	r2,zero,2e980 <__alt_data_end+0xfffee980>
            if (timeout == 0)
   2e9a8:	e0bffe17 	ldw	r2,-8(fp)
   2e9ac:	1000021e 	bne	r2,zero,2e9b8 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
   2e9b0:	00bff084 	movi	r2,-62
   2e9b4:	00001706 	br	2ea14 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
   2e9b8:	e17ffd17 	ldw	r5,-12(fp)
   2e9bc:	e13ffc17 	ldw	r4,-16(fp)
   2e9c0:	002e2940 	call	2e294 <altera_avalon_mailbox_post>
   2e9c4:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
   2e9c8:	e0bffc17 	ldw	r2,-16(fp)
   2e9cc:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
   2e9d0:	e0bffc17 	ldw	r2,-16(fp)
   2e9d4:	10001105 	stb	zero,68(r2)
        return status;
   2e9d8:	e0bff917 	ldw	r2,-28(fp)
   2e9dc:	00000d06 	br	2ea14 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
   2e9e0:	e0bffc17 	ldw	r2,-16(fp)
   2e9e4:	10800a17 	ldw	r2,40(r2)
   2e9e8:	10800304 	addi	r2,r2,12
   2e9ec:	10800037 	ldwio	r2,0(r2)
   2e9f0:	10800094 	ori	r2,r2,2
   2e9f4:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2e9f8:	e0bffc17 	ldw	r2,-16(fp)
   2e9fc:	10800a17 	ldw	r2,40(r2)
   2ea00:	10800304 	addi	r2,r2,12
   2ea04:	1007883a 	mov	r3,r2
   2ea08:	e0bffa17 	ldw	r2,-24(fp)
   2ea0c:	18800035 	stwio	r2,0(r3)
    }
  return 0;
   2ea10:	0005883a 	mov	r2,zero
}
   2ea14:	e037883a 	mov	sp,fp
   2ea18:	dfc00117 	ldw	ra,4(sp)
   2ea1c:	df000017 	ldw	fp,0(sp)
   2ea20:	dec00204 	addi	sp,sp,8
   2ea24:	f800283a 	ret

0002ea28 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
   2ea28:	defff904 	addi	sp,sp,-28
   2ea2c:	dfc00615 	stw	ra,24(sp)
   2ea30:	df000515 	stw	fp,20(sp)
   2ea34:	df000504 	addi	fp,sp,20
   2ea38:	e13ffd15 	stw	r4,-12(fp)
   2ea3c:	e17ffe15 	stw	r5,-8(fp)
   2ea40:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
   2ea44:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
   2ea48:	e0bffd17 	ldw	r2,-12(fp)
   2ea4c:	10003a26 	beq	r2,zero,2eb38 <altera_avalon_mailbox_retrieve_poll+0x110>
   2ea50:	e0bffe17 	ldw	r2,-8(fp)
   2ea54:	10003826 	beq	r2,zero,2eb38 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
   2ea58:	e0bffd17 	ldw	r2,-12(fp)
   2ea5c:	10800a17 	ldw	r2,40(r2)
   2ea60:	10800304 	addi	r2,r2,12
   2ea64:	10800037 	ldwio	r2,0(r2)
   2ea68:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
   2ea6c:	e0bffd17 	ldw	r2,-12(fp)
   2ea70:	10800a17 	ldw	r2,40(r2)
   2ea74:	10800304 	addi	r2,r2,12
   2ea78:	1009883a 	mov	r4,r2
   2ea7c:	e0fffc17 	ldw	r3,-16(fp)
   2ea80:	00bfff84 	movi	r2,-2
   2ea84:	1884703a 	and	r2,r3,r2
   2ea88:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
   2ea8c:	e0bfff17 	ldw	r2,-4(fp)
   2ea90:	1000061e 	bne	r2,zero,2eaac <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
   2ea94:	e13ffd17 	ldw	r4,-12(fp)
   2ea98:	002e8600 	call	2e860 <altera_avalon_mailbox_status>
   2ea9c:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
   2eaa0:	e0bffb17 	ldw	r2,-20(fp)
   2eaa4:	103ffb26 	beq	r2,zero,2ea94 <__alt_data_end+0xfffeea94>
   2eaa8:	00000a06 	br	2ead4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
   2eaac:	e13ffd17 	ldw	r4,-12(fp)
   2eab0:	002e8600 	call	2e860 <altera_avalon_mailbox_status>
   2eab4:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
   2eab8:	e0bfff17 	ldw	r2,-4(fp)
   2eabc:	10bfffc4 	addi	r2,r2,-1
   2eac0:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
   2eac4:	e0bffb17 	ldw	r2,-20(fp)
   2eac8:	1000021e 	bne	r2,zero,2ead4 <altera_avalon_mailbox_retrieve_poll+0xac>
   2eacc:	e0bfff17 	ldw	r2,-4(fp)
   2ead0:	103ff61e 	bne	r2,zero,2eaac <__alt_data_end+0xfffeeaac>
        }

        /* if timeout, status remain 0 */
        if (status)
   2ead4:	e0bffb17 	ldw	r2,-20(fp)
   2ead8:	10000d26 	beq	r2,zero,2eb10 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
   2eadc:	e0bffe17 	ldw	r2,-8(fp)
   2eae0:	10800104 	addi	r2,r2,4
   2eae4:	e0fffd17 	ldw	r3,-12(fp)
   2eae8:	18c00a17 	ldw	r3,40(r3)
   2eaec:	18c00104 	addi	r3,r3,4
   2eaf0:	18c00037 	ldwio	r3,0(r3)
   2eaf4:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
   2eaf8:	e0bffd17 	ldw	r2,-12(fp)
   2eafc:	10800a17 	ldw	r2,40(r2)
   2eb00:	10800037 	ldwio	r2,0(r2)
   2eb04:	1007883a 	mov	r3,r2
   2eb08:	e0bffe17 	ldw	r2,-8(fp)
   2eb0c:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
   2eb10:	e0bffd17 	ldw	r2,-12(fp)
   2eb14:	10800a17 	ldw	r2,40(r2)
   2eb18:	10800304 	addi	r2,r2,12
   2eb1c:	1007883a 	mov	r3,r2
   2eb20:	e0bffc17 	ldw	r2,-16(fp)
   2eb24:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
   2eb28:	e0bffb17 	ldw	r2,-20(fp)
   2eb2c:	10000226 	beq	r2,zero,2eb38 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
   2eb30:	0005883a 	mov	r2,zero
   2eb34:	00000606 	br	2eb50 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
   2eb38:	e0bffe17 	ldw	r2,-8(fp)
   2eb3c:	10800104 	addi	r2,r2,4
   2eb40:	10000015 	stw	zero,0(r2)
      message[0] = 0;
   2eb44:	e0bffe17 	ldw	r2,-8(fp)
   2eb48:	10000015 	stw	zero,0(r2)
      return -EINVAL;
   2eb4c:	00bffa84 	movi	r2,-22
}
   2eb50:	e037883a 	mov	sp,fp
   2eb54:	dfc00117 	ldw	ra,4(sp)
   2eb58:	df000017 	ldw	fp,0(sp)
   2eb5c:	dec00204 	addi	sp,sp,8
   2eb60:	f800283a 	ret

0002eb64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2eb64:	defffe04 	addi	sp,sp,-8
   2eb68:	dfc00115 	stw	ra,4(sp)
   2eb6c:	df000015 	stw	fp,0(sp)
   2eb70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2eb74:	d0a00b17 	ldw	r2,-32724(gp)
   2eb78:	10000326 	beq	r2,zero,2eb88 <alt_get_errno+0x24>
   2eb7c:	d0a00b17 	ldw	r2,-32724(gp)
   2eb80:	103ee83a 	callr	r2
   2eb84:	00000106 	br	2eb8c <alt_get_errno+0x28>
   2eb88:	d0a72204 	addi	r2,gp,-25464
}
   2eb8c:	e037883a 	mov	sp,fp
   2eb90:	dfc00117 	ldw	ra,4(sp)
   2eb94:	df000017 	ldw	fp,0(sp)
   2eb98:	dec00204 	addi	sp,sp,8
   2eb9c:	f800283a 	ret

0002eba0 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   2eba0:	defff904 	addi	sp,sp,-28
   2eba4:	df000615 	stw	fp,24(sp)
   2eba8:	df000604 	addi	fp,sp,24
   2ebac:	e13ffe15 	stw	r4,-8(fp)
   2ebb0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
   2ebb4:	00bfffc4 	movi	r2,-1
   2ebb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
   2ebbc:	0005317a 	rdctl	r2,cpuid
   2ebc0:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   2ebc4:	e0bffb17 	ldw	r2,-20(fp)
   2ebc8:	1006943a 	slli	r3,r2,16
   2ebcc:	e0bfff17 	ldw	r2,-4(fp)
   2ebd0:	1884b03a 	or	r2,r3,r2
   2ebd4:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   2ebd8:	e0bffe17 	ldw	r2,-8(fp)
   2ebdc:	10800317 	ldw	r2,12(r2)
   2ebe0:	e0fffc17 	ldw	r3,-16(fp)
   2ebe4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   2ebe8:	e0bffe17 	ldw	r2,-8(fp)
   2ebec:	10800317 	ldw	r2,12(r2)
   2ebf0:	10800037 	ldwio	r2,0(r2)
   2ebf4:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
   2ebf8:	e0fffd17 	ldw	r3,-12(fp)
   2ebfc:	e0bffc17 	ldw	r2,-16(fp)
   2ec00:	1880011e 	bne	r3,r2,2ec08 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
   2ec04:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
   2ec08:	e0bffa17 	ldw	r2,-24(fp)
}
   2ec0c:	e037883a 	mov	sp,fp
   2ec10:	df000017 	ldw	fp,0(sp)
   2ec14:	dec00104 	addi	sp,sp,4
   2ec18:	f800283a 	ret

0002ec1c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   2ec1c:	defffc04 	addi	sp,sp,-16
   2ec20:	dfc00315 	stw	ra,12(sp)
   2ec24:	df000215 	stw	fp,8(sp)
   2ec28:	df000204 	addi	fp,sp,8
   2ec2c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   2ec30:	d1600f04 	addi	r5,gp,-32708
   2ec34:	e13fff17 	ldw	r4,-4(fp)
   2ec38:	002fa1c0 	call	2fa1c <alt_find_dev>
   2ec3c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
   2ec40:	e0bffe17 	ldw	r2,-8(fp)
   2ec44:	1000041e 	bne	r2,zero,2ec58 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
   2ec48:	002eb640 	call	2eb64 <alt_get_errno>
   2ec4c:	1007883a 	mov	r3,r2
   2ec50:	008004c4 	movi	r2,19
   2ec54:	18800015 	stw	r2,0(r3)
  }

  return dev;
   2ec58:	e0bffe17 	ldw	r2,-8(fp)
}
   2ec5c:	e037883a 	mov	sp,fp
   2ec60:	dfc00117 	ldw	ra,4(sp)
   2ec64:	df000017 	ldw	fp,0(sp)
   2ec68:	dec00204 	addi	sp,sp,8
   2ec6c:	f800283a 	ret

0002ec70 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
   2ec70:	defffe04 	addi	sp,sp,-8
   2ec74:	df000115 	stw	fp,4(sp)
   2ec78:	df000104 	addi	fp,sp,4
   2ec7c:	e13fff15 	stw	r4,-4(fp)
  return;
   2ec80:	0001883a 	nop
}
   2ec84:	e037883a 	mov	sp,fp
   2ec88:	df000017 	ldw	fp,0(sp)
   2ec8c:	dec00104 	addi	sp,sp,4
   2ec90:	f800283a 	ret

0002ec94 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   2ec94:	defffc04 	addi	sp,sp,-16
   2ec98:	dfc00315 	stw	ra,12(sp)
   2ec9c:	df000215 	stw	fp,8(sp)
   2eca0:	df000204 	addi	fp,sp,8
   2eca4:	e13ffe15 	stw	r4,-8(fp)
   2eca8:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   2ecac:	0001883a 	nop
   2ecb0:	e17fff17 	ldw	r5,-4(fp)
   2ecb4:	e13ffe17 	ldw	r4,-8(fp)
   2ecb8:	002eba00 	call	2eba0 <alt_mutex_trylock>
   2ecbc:	103ffc1e 	bne	r2,zero,2ecb0 <__alt_data_end+0xfffeecb0>
}
   2ecc0:	0001883a 	nop
   2ecc4:	e037883a 	mov	sp,fp
   2ecc8:	dfc00117 	ldw	ra,4(sp)
   2eccc:	df000017 	ldw	fp,0(sp)
   2ecd0:	dec00204 	addi	sp,sp,8
   2ecd4:	f800283a 	ret

0002ecd8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   2ecd8:	defffa04 	addi	sp,sp,-24
   2ecdc:	dfc00515 	stw	ra,20(sp)
   2ece0:	df000415 	stw	fp,16(sp)
   2ece4:	df000404 	addi	fp,sp,16
   2ece8:	e13ffd15 	stw	r4,-12(fp)
   2ecec:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   2ecf0:	e17ffe17 	ldw	r5,-8(fp)
   2ecf4:	e13ffd17 	ldw	r4,-12(fp)
   2ecf8:	002eba00 	call	2eba0 <alt_mutex_trylock>
   2ecfc:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
   2ed00:	e0bffc17 	ldw	r2,-16(fp)
}
   2ed04:	e037883a 	mov	sp,fp
   2ed08:	dfc00117 	ldw	ra,4(sp)
   2ed0c:	df000017 	ldw	fp,0(sp)
   2ed10:	dec00204 	addi	sp,sp,8
   2ed14:	f800283a 	ret

0002ed18 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
   2ed18:	defffd04 	addi	sp,sp,-12
   2ed1c:	df000215 	stw	fp,8(sp)
   2ed20:	df000204 	addi	fp,sp,8
   2ed24:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   2ed28:	0005317a 	rdctl	r2,cpuid
   2ed2c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   2ed30:	e0bfff17 	ldw	r2,-4(fp)
   2ed34:	10800317 	ldw	r2,12(r2)
   2ed38:	10800104 	addi	r2,r2,4
   2ed3c:	00c00044 	movi	r3,1
   2ed40:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   2ed44:	e0bfff17 	ldw	r2,-4(fp)
   2ed48:	10800317 	ldw	r2,12(r2)
   2ed4c:	e0fffe17 	ldw	r3,-8(fp)
   2ed50:	1806943a 	slli	r3,r3,16
   2ed54:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   2ed58:	0001883a 	nop
   2ed5c:	e037883a 	mov	sp,fp
   2ed60:	df000017 	ldw	fp,0(sp)
   2ed64:	dec00104 	addi	sp,sp,4
   2ed68:	f800283a 	ret

0002ed6c <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
   2ed6c:	defff904 	addi	sp,sp,-28
   2ed70:	df000615 	stw	fp,24(sp)
   2ed74:	df000604 	addi	fp,sp,24
   2ed78:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
   2ed7c:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
   2ed80:	0005317a 	rdctl	r2,cpuid
   2ed84:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   2ed88:	e0bfff17 	ldw	r2,-4(fp)
   2ed8c:	10800317 	ldw	r2,12(r2)
   2ed90:	10800037 	ldwio	r2,0(r2)
   2ed94:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
   2ed98:	e0bffc17 	ldw	r2,-16(fp)
   2ed9c:	1004d43a 	srli	r2,r2,16
   2eda0:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   2eda4:	e0fffd17 	ldw	r3,-12(fp)
   2eda8:	e0bffb17 	ldw	r2,-20(fp)
   2edac:	1880071e 	bne	r3,r2,2edcc <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
   2edb0:	e0bffc17 	ldw	r2,-16(fp)
   2edb4:	10bfffcc 	andi	r2,r2,65535
   2edb8:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
   2edbc:	e0bffe17 	ldw	r2,-8(fp)
   2edc0:	10000226 	beq	r2,zero,2edcc <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
   2edc4:	00800044 	movi	r2,1
   2edc8:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
   2edcc:	e0bffa17 	ldw	r2,-24(fp)
}
   2edd0:	e037883a 	mov	sp,fp
   2edd4:	df000017 	ldw	fp,0(sp)
   2edd8:	dec00104 	addi	sp,sp,4
   2eddc:	f800283a 	ret

0002ede0 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
   2ede0:	defffc04 	addi	sp,sp,-16
   2ede4:	df000315 	stw	fp,12(sp)
   2ede8:	df000304 	addi	fp,sp,12
   2edec:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
   2edf0:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   2edf4:	e0bfff17 	ldw	r2,-4(fp)
   2edf8:	10800317 	ldw	r2,12(r2)
   2edfc:	10800104 	addi	r2,r2,4
   2ee00:	10800037 	ldwio	r2,0(r2)
   2ee04:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
   2ee08:	e0bffe17 	ldw	r2,-8(fp)
   2ee0c:	1080004c 	andi	r2,r2,1
   2ee10:	10000226 	beq	r2,zero,2ee1c <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
   2ee14:	00800044 	movi	r2,1
   2ee18:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
   2ee1c:	e0bffd17 	ldw	r2,-12(fp)
}
   2ee20:	e037883a 	mov	sp,fp
   2ee24:	df000017 	ldw	fp,0(sp)
   2ee28:	dec00104 	addi	sp,sp,4
   2ee2c:	f800283a 	ret

0002ee30 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2ee30:	defffa04 	addi	sp,sp,-24
   2ee34:	dfc00515 	stw	ra,20(sp)
   2ee38:	df000415 	stw	fp,16(sp)
   2ee3c:	df000404 	addi	fp,sp,16
   2ee40:	e13ffd15 	stw	r4,-12(fp)
   2ee44:	e17ffe15 	stw	r5,-8(fp)
   2ee48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2ee4c:	e0bffd17 	ldw	r2,-12(fp)
   2ee50:	10800017 	ldw	r2,0(r2)
   2ee54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2ee58:	e0bffc17 	ldw	r2,-16(fp)
   2ee5c:	10c00a04 	addi	r3,r2,40
   2ee60:	e0bffd17 	ldw	r2,-12(fp)
   2ee64:	10800217 	ldw	r2,8(r2)
   2ee68:	100f883a 	mov	r7,r2
   2ee6c:	e1bfff17 	ldw	r6,-4(fp)
   2ee70:	e17ffe17 	ldw	r5,-8(fp)
   2ee74:	1809883a 	mov	r4,r3
   2ee78:	002f3440 	call	2f344 <altera_avalon_uart_read>
      fd->fd_flags);
}
   2ee7c:	e037883a 	mov	sp,fp
   2ee80:	dfc00117 	ldw	ra,4(sp)
   2ee84:	df000017 	ldw	fp,0(sp)
   2ee88:	dec00204 	addi	sp,sp,8
   2ee8c:	f800283a 	ret

0002ee90 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2ee90:	defffa04 	addi	sp,sp,-24
   2ee94:	dfc00515 	stw	ra,20(sp)
   2ee98:	df000415 	stw	fp,16(sp)
   2ee9c:	df000404 	addi	fp,sp,16
   2eea0:	e13ffd15 	stw	r4,-12(fp)
   2eea4:	e17ffe15 	stw	r5,-8(fp)
   2eea8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2eeac:	e0bffd17 	ldw	r2,-12(fp)
   2eeb0:	10800017 	ldw	r2,0(r2)
   2eeb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2eeb8:	e0bffc17 	ldw	r2,-16(fp)
   2eebc:	10c00a04 	addi	r3,r2,40
   2eec0:	e0bffd17 	ldw	r2,-12(fp)
   2eec4:	10800217 	ldw	r2,8(r2)
   2eec8:	100f883a 	mov	r7,r2
   2eecc:	e1bfff17 	ldw	r6,-4(fp)
   2eed0:	e17ffe17 	ldw	r5,-8(fp)
   2eed4:	1809883a 	mov	r4,r3
   2eed8:	002f55c0 	call	2f55c <altera_avalon_uart_write>
      fd->fd_flags);
}
   2eedc:	e037883a 	mov	sp,fp
   2eee0:	dfc00117 	ldw	ra,4(sp)
   2eee4:	df000017 	ldw	fp,0(sp)
   2eee8:	dec00204 	addi	sp,sp,8
   2eeec:	f800283a 	ret

0002eef0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2eef0:	defffc04 	addi	sp,sp,-16
   2eef4:	dfc00315 	stw	ra,12(sp)
   2eef8:	df000215 	stw	fp,8(sp)
   2eefc:	df000204 	addi	fp,sp,8
   2ef00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2ef04:	e0bfff17 	ldw	r2,-4(fp)
   2ef08:	10800017 	ldw	r2,0(r2)
   2ef0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2ef10:	e0bffe17 	ldw	r2,-8(fp)
   2ef14:	10c00a04 	addi	r3,r2,40
   2ef18:	e0bfff17 	ldw	r2,-4(fp)
   2ef1c:	10800217 	ldw	r2,8(r2)
   2ef20:	100b883a 	mov	r5,r2
   2ef24:	1809883a 	mov	r4,r3
   2ef28:	002f2b40 	call	2f2b4 <altera_avalon_uart_close>
}
   2ef2c:	e037883a 	mov	sp,fp
   2ef30:	dfc00117 	ldw	ra,4(sp)
   2ef34:	df000017 	ldw	fp,0(sp)
   2ef38:	dec00204 	addi	sp,sp,8
   2ef3c:	f800283a 	ret

0002ef40 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2ef40:	defff804 	addi	sp,sp,-32
   2ef44:	dfc00715 	stw	ra,28(sp)
   2ef48:	df000615 	stw	fp,24(sp)
   2ef4c:	df000604 	addi	fp,sp,24
   2ef50:	e13ffd15 	stw	r4,-12(fp)
   2ef54:	e17ffe15 	stw	r5,-8(fp)
   2ef58:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   2ef5c:	e0bffd17 	ldw	r2,-12(fp)
   2ef60:	10800017 	ldw	r2,0(r2)
   2ef64:	e0bffb15 	stw	r2,-20(fp)
   2ef68:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2ef6c:	1000041e 	bne	r2,zero,2ef80 <altera_avalon_uart_init+0x40>
   2ef70:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2ef74:	1000021e 	bne	r2,zero,2ef80 <altera_avalon_uart_init+0x40>
   2ef78:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2ef7c:	10000226 	beq	r2,zero,2ef88 <altera_avalon_uart_init+0x48>
   2ef80:	00800044 	movi	r2,1
   2ef84:	00000106 	br	2ef8c <altera_avalon_uart_init+0x4c>
   2ef88:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2ef8c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2ef90:	e0bffc17 	ldw	r2,-16(fp)
   2ef94:	10000f1e 	bne	r2,zero,2efd4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2ef98:	e0bffd17 	ldw	r2,-12(fp)
   2ef9c:	00c32004 	movi	r3,3200
   2efa0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2efa4:	e0bffb17 	ldw	r2,-20(fp)
   2efa8:	10800304 	addi	r2,r2,12
   2efac:	e0fffd17 	ldw	r3,-12(fp)
   2efb0:	18c00117 	ldw	r3,4(r3)
   2efb4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2efb8:	d8000015 	stw	zero,0(sp)
   2efbc:	e1fffd17 	ldw	r7,-12(fp)
   2efc0:	018000f4 	movhi	r6,3
   2efc4:	31bbfb04 	addi	r6,r6,-4116
   2efc8:	e17fff17 	ldw	r5,-4(fp)
   2efcc:	e13ffe17 	ldw	r4,-8(fp)
   2efd0:	002fae00 	call	2fae0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2efd4:	0001883a 	nop
   2efd8:	e037883a 	mov	sp,fp
   2efdc:	dfc00117 	ldw	ra,4(sp)
   2efe0:	df000017 	ldw	fp,0(sp)
   2efe4:	dec00204 	addi	sp,sp,8
   2efe8:	f800283a 	ret

0002efec <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2efec:	defffa04 	addi	sp,sp,-24
   2eff0:	dfc00515 	stw	ra,20(sp)
   2eff4:	df000415 	stw	fp,16(sp)
   2eff8:	df000404 	addi	fp,sp,16
   2effc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2f000:	e0bfff17 	ldw	r2,-4(fp)
   2f004:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2f008:	e0bffc17 	ldw	r2,-16(fp)
   2f00c:	10800017 	ldw	r2,0(r2)
   2f010:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2f014:	e0bffd17 	ldw	r2,-12(fp)
   2f018:	10800204 	addi	r2,r2,8
   2f01c:	10800037 	ldwio	r2,0(r2)
   2f020:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2f024:	e0bffd17 	ldw	r2,-12(fp)
   2f028:	10800204 	addi	r2,r2,8
   2f02c:	0007883a 	mov	r3,zero
   2f030:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2f034:	e0bffd17 	ldw	r2,-12(fp)
   2f038:	10800204 	addi	r2,r2,8
   2f03c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2f040:	e0bffe17 	ldw	r2,-8(fp)
   2f044:	1080200c 	andi	r2,r2,128
   2f048:	10000326 	beq	r2,zero,2f058 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2f04c:	e17ffe17 	ldw	r5,-8(fp)
   2f050:	e13ffc17 	ldw	r4,-16(fp)
   2f054:	002f0880 	call	2f088 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2f058:	e0bffe17 	ldw	r2,-8(fp)
   2f05c:	1081100c 	andi	r2,r2,1088
   2f060:	10000326 	beq	r2,zero,2f070 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2f064:	e17ffe17 	ldw	r5,-8(fp)
   2f068:	e13ffc17 	ldw	r4,-16(fp)
   2f06c:	002f16c0 	call	2f16c <altera_avalon_uart_txirq>
  }
  

}
   2f070:	0001883a 	nop
   2f074:	e037883a 	mov	sp,fp
   2f078:	dfc00117 	ldw	ra,4(sp)
   2f07c:	df000017 	ldw	fp,0(sp)
   2f080:	dec00204 	addi	sp,sp,8
   2f084:	f800283a 	ret

0002f088 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2f088:	defffc04 	addi	sp,sp,-16
   2f08c:	df000315 	stw	fp,12(sp)
   2f090:	df000304 	addi	fp,sp,12
   2f094:	e13ffe15 	stw	r4,-8(fp)
   2f098:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2f09c:	e0bfff17 	ldw	r2,-4(fp)
   2f0a0:	108000cc 	andi	r2,r2,3
   2f0a4:	10002c1e 	bne	r2,zero,2f158 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2f0a8:	e0bffe17 	ldw	r2,-8(fp)
   2f0ac:	10800317 	ldw	r2,12(r2)
   2f0b0:	e0bffe17 	ldw	r2,-8(fp)
   2f0b4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f0b8:	e0bffe17 	ldw	r2,-8(fp)
   2f0bc:	10800317 	ldw	r2,12(r2)
   2f0c0:	10800044 	addi	r2,r2,1
   2f0c4:	10800fcc 	andi	r2,r2,63
   2f0c8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2f0cc:	e0bffe17 	ldw	r2,-8(fp)
   2f0d0:	10800317 	ldw	r2,12(r2)
   2f0d4:	e0fffe17 	ldw	r3,-8(fp)
   2f0d8:	18c00017 	ldw	r3,0(r3)
   2f0dc:	18c00037 	ldwio	r3,0(r3)
   2f0e0:	1809883a 	mov	r4,r3
   2f0e4:	e0fffe17 	ldw	r3,-8(fp)
   2f0e8:	1885883a 	add	r2,r3,r2
   2f0ec:	10800704 	addi	r2,r2,28
   2f0f0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   2f0f4:	e0bffe17 	ldw	r2,-8(fp)
   2f0f8:	e0fffd17 	ldw	r3,-12(fp)
   2f0fc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f100:	e0bffe17 	ldw	r2,-8(fp)
   2f104:	10800317 	ldw	r2,12(r2)
   2f108:	10800044 	addi	r2,r2,1
   2f10c:	10800fcc 	andi	r2,r2,63
   2f110:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2f114:	e0bffe17 	ldw	r2,-8(fp)
   2f118:	10c00217 	ldw	r3,8(r2)
   2f11c:	e0bffd17 	ldw	r2,-12(fp)
   2f120:	18800e1e 	bne	r3,r2,2f15c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f124:	e0bffe17 	ldw	r2,-8(fp)
   2f128:	10c00117 	ldw	r3,4(r2)
   2f12c:	00bfdfc4 	movi	r2,-129
   2f130:	1886703a 	and	r3,r3,r2
   2f134:	e0bffe17 	ldw	r2,-8(fp)
   2f138:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2f13c:	e0bffe17 	ldw	r2,-8(fp)
   2f140:	10800017 	ldw	r2,0(r2)
   2f144:	10800304 	addi	r2,r2,12
   2f148:	e0fffe17 	ldw	r3,-8(fp)
   2f14c:	18c00117 	ldw	r3,4(r3)
   2f150:	10c00035 	stwio	r3,0(r2)
   2f154:	00000106 	br	2f15c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   2f158:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   2f15c:	e037883a 	mov	sp,fp
   2f160:	df000017 	ldw	fp,0(sp)
   2f164:	dec00104 	addi	sp,sp,4
   2f168:	f800283a 	ret

0002f16c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2f16c:	defffb04 	addi	sp,sp,-20
   2f170:	df000415 	stw	fp,16(sp)
   2f174:	df000404 	addi	fp,sp,16
   2f178:	e13ffc15 	stw	r4,-16(fp)
   2f17c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2f180:	e0bffc17 	ldw	r2,-16(fp)
   2f184:	10c00417 	ldw	r3,16(r2)
   2f188:	e0bffc17 	ldw	r2,-16(fp)
   2f18c:	10800517 	ldw	r2,20(r2)
   2f190:	18803226 	beq	r3,r2,2f25c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2f194:	e0bffc17 	ldw	r2,-16(fp)
   2f198:	10800617 	ldw	r2,24(r2)
   2f19c:	1080008c 	andi	r2,r2,2
   2f1a0:	10000326 	beq	r2,zero,2f1b0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2f1a4:	e0bffd17 	ldw	r2,-12(fp)
   2f1a8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2f1ac:	10001d26 	beq	r2,zero,2f224 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2f1b0:	e0bffc17 	ldw	r2,-16(fp)
   2f1b4:	10800417 	ldw	r2,16(r2)
   2f1b8:	e0bffc17 	ldw	r2,-16(fp)
   2f1bc:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2f1c0:	e0bffc17 	ldw	r2,-16(fp)
   2f1c4:	10800017 	ldw	r2,0(r2)
   2f1c8:	10800104 	addi	r2,r2,4
   2f1cc:	e0fffc17 	ldw	r3,-16(fp)
   2f1d0:	18c00417 	ldw	r3,16(r3)
   2f1d4:	e13ffc17 	ldw	r4,-16(fp)
   2f1d8:	20c7883a 	add	r3,r4,r3
   2f1dc:	18c01704 	addi	r3,r3,92
   2f1e0:	18c00003 	ldbu	r3,0(r3)
   2f1e4:	18c03fcc 	andi	r3,r3,255
   2f1e8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2f1ec:	e0bffc17 	ldw	r2,-16(fp)
   2f1f0:	10800417 	ldw	r2,16(r2)
   2f1f4:	10800044 	addi	r2,r2,1
   2f1f8:	e0fffc17 	ldw	r3,-16(fp)
   2f1fc:	18800415 	stw	r2,16(r3)
   2f200:	10c00fcc 	andi	r3,r2,63
   2f204:	e0bffc17 	ldw	r2,-16(fp)
   2f208:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2f20c:	e0bffc17 	ldw	r2,-16(fp)
   2f210:	10800117 	ldw	r2,4(r2)
   2f214:	10c01014 	ori	r3,r2,64
   2f218:	e0bffc17 	ldw	r2,-16(fp)
   2f21c:	10c00115 	stw	r3,4(r2)
   2f220:	00000e06 	br	2f25c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2f224:	e0bffc17 	ldw	r2,-16(fp)
   2f228:	10800017 	ldw	r2,0(r2)
   2f22c:	10800204 	addi	r2,r2,8
   2f230:	10800037 	ldwio	r2,0(r2)
   2f234:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2f238:	e0bffd17 	ldw	r2,-12(fp)
   2f23c:	1082000c 	andi	r2,r2,2048
   2f240:	1000061e 	bne	r2,zero,2f25c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2f244:	e0bffc17 	ldw	r2,-16(fp)
   2f248:	10c00117 	ldw	r3,4(r2)
   2f24c:	00bfefc4 	movi	r2,-65
   2f250:	1886703a 	and	r3,r3,r2
   2f254:	e0bffc17 	ldw	r2,-16(fp)
   2f258:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2f25c:	e0bffc17 	ldw	r2,-16(fp)
   2f260:	10c00417 	ldw	r3,16(r2)
   2f264:	e0bffc17 	ldw	r2,-16(fp)
   2f268:	10800517 	ldw	r2,20(r2)
   2f26c:	1880061e 	bne	r3,r2,2f288 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f270:	e0bffc17 	ldw	r2,-16(fp)
   2f274:	10c00117 	ldw	r3,4(r2)
   2f278:	00beefc4 	movi	r2,-1089
   2f27c:	1886703a 	and	r3,r3,r2
   2f280:	e0bffc17 	ldw	r2,-16(fp)
   2f284:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f288:	e0bffc17 	ldw	r2,-16(fp)
   2f28c:	10800017 	ldw	r2,0(r2)
   2f290:	10800304 	addi	r2,r2,12
   2f294:	e0fffc17 	ldw	r3,-16(fp)
   2f298:	18c00117 	ldw	r3,4(r3)
   2f29c:	10c00035 	stwio	r3,0(r2)
}
   2f2a0:	0001883a 	nop
   2f2a4:	e037883a 	mov	sp,fp
   2f2a8:	df000017 	ldw	fp,0(sp)
   2f2ac:	dec00104 	addi	sp,sp,4
   2f2b0:	f800283a 	ret

0002f2b4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2f2b4:	defffd04 	addi	sp,sp,-12
   2f2b8:	df000215 	stw	fp,8(sp)
   2f2bc:	df000204 	addi	fp,sp,8
   2f2c0:	e13ffe15 	stw	r4,-8(fp)
   2f2c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2f2c8:	00000506 	br	2f2e0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2f2cc:	e0bfff17 	ldw	r2,-4(fp)
   2f2d0:	1090000c 	andi	r2,r2,16384
   2f2d4:	10000226 	beq	r2,zero,2f2e0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2f2d8:	00bffd44 	movi	r2,-11
   2f2dc:	00000606 	br	2f2f8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2f2e0:	e0bffe17 	ldw	r2,-8(fp)
   2f2e4:	10c00417 	ldw	r3,16(r2)
   2f2e8:	e0bffe17 	ldw	r2,-8(fp)
   2f2ec:	10800517 	ldw	r2,20(r2)
   2f2f0:	18bff61e 	bne	r3,r2,2f2cc <__alt_data_end+0xfffef2cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2f2f4:	0005883a 	mov	r2,zero
}
   2f2f8:	e037883a 	mov	sp,fp
   2f2fc:	df000017 	ldw	fp,0(sp)
   2f300:	dec00104 	addi	sp,sp,4
   2f304:	f800283a 	ret

0002f308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f308:	defffe04 	addi	sp,sp,-8
   2f30c:	dfc00115 	stw	ra,4(sp)
   2f310:	df000015 	stw	fp,0(sp)
   2f314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f318:	d0a00b17 	ldw	r2,-32724(gp)
   2f31c:	10000326 	beq	r2,zero,2f32c <alt_get_errno+0x24>
   2f320:	d0a00b17 	ldw	r2,-32724(gp)
   2f324:	103ee83a 	callr	r2
   2f328:	00000106 	br	2f330 <alt_get_errno+0x28>
   2f32c:	d0a72204 	addi	r2,gp,-25464
}
   2f330:	e037883a 	mov	sp,fp
   2f334:	dfc00117 	ldw	ra,4(sp)
   2f338:	df000017 	ldw	fp,0(sp)
   2f33c:	dec00204 	addi	sp,sp,8
   2f340:	f800283a 	ret

0002f344 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   2f344:	defff204 	addi	sp,sp,-56
   2f348:	dfc00d15 	stw	ra,52(sp)
   2f34c:	df000c15 	stw	fp,48(sp)
   2f350:	df000c04 	addi	fp,sp,48
   2f354:	e13ffc15 	stw	r4,-16(fp)
   2f358:	e17ffd15 	stw	r5,-12(fp)
   2f35c:	e1bffe15 	stw	r6,-8(fp)
   2f360:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   2f364:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   2f368:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2f36c:	e0bfff17 	ldw	r2,-4(fp)
   2f370:	1090000c 	andi	r2,r2,16384
   2f374:	1005003a 	cmpeq	r2,r2,zero
   2f378:	10803fcc 	andi	r2,r2,255
   2f37c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2f380:	00001306 	br	2f3d0 <altera_avalon_uart_read+0x8c>
    {
      count++;
   2f384:	e0bff517 	ldw	r2,-44(fp)
   2f388:	10800044 	addi	r2,r2,1
   2f38c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2f390:	e0bffd17 	ldw	r2,-12(fp)
   2f394:	10c00044 	addi	r3,r2,1
   2f398:	e0fffd15 	stw	r3,-12(fp)
   2f39c:	e0fffc17 	ldw	r3,-16(fp)
   2f3a0:	18c00217 	ldw	r3,8(r3)
   2f3a4:	e13ffc17 	ldw	r4,-16(fp)
   2f3a8:	20c7883a 	add	r3,r4,r3
   2f3ac:	18c00704 	addi	r3,r3,28
   2f3b0:	18c00003 	ldbu	r3,0(r3)
   2f3b4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   2f3b8:	e0bffc17 	ldw	r2,-16(fp)
   2f3bc:	10800217 	ldw	r2,8(r2)
   2f3c0:	10800044 	addi	r2,r2,1
   2f3c4:	10c00fcc 	andi	r3,r2,63
   2f3c8:	e0bffc17 	ldw	r2,-16(fp)
   2f3cc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2f3d0:	e0fff517 	ldw	r3,-44(fp)
   2f3d4:	e0bffe17 	ldw	r2,-8(fp)
   2f3d8:	1880050e 	bge	r3,r2,2f3f0 <altera_avalon_uart_read+0xac>
   2f3dc:	e0bffc17 	ldw	r2,-16(fp)
   2f3e0:	10c00217 	ldw	r3,8(r2)
   2f3e4:	e0bffc17 	ldw	r2,-16(fp)
   2f3e8:	10800317 	ldw	r2,12(r2)
   2f3ec:	18bfe51e 	bne	r3,r2,2f384 <__alt_data_end+0xfffef384>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   2f3f0:	e0bff517 	ldw	r2,-44(fp)
   2f3f4:	1000251e 	bne	r2,zero,2f48c <altera_avalon_uart_read+0x148>
   2f3f8:	e0bffc17 	ldw	r2,-16(fp)
   2f3fc:	10c00217 	ldw	r3,8(r2)
   2f400:	e0bffc17 	ldw	r2,-16(fp)
   2f404:	10800317 	ldw	r2,12(r2)
   2f408:	1880201e 	bne	r3,r2,2f48c <altera_avalon_uart_read+0x148>
    {
      if (!block)
   2f40c:	e0bff617 	ldw	r2,-40(fp)
   2f410:	1000071e 	bne	r2,zero,2f430 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   2f414:	002f3080 	call	2f308 <alt_get_errno>
   2f418:	1007883a 	mov	r3,r2
   2f41c:	008002c4 	movi	r2,11
   2f420:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   2f424:	00800044 	movi	r2,1
   2f428:	e0bff405 	stb	r2,-48(fp)
        break;
   2f42c:	00001b06 	br	2f49c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f430:	0005303a 	rdctl	r2,status
   2f434:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f438:	e0fff917 	ldw	r3,-28(fp)
   2f43c:	00bfff84 	movi	r2,-2
   2f440:	1884703a 	and	r2,r3,r2
   2f444:	1001703a 	wrctl	status,r2
  
  return context;
   2f448:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2f44c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f450:	e0bffc17 	ldw	r2,-16(fp)
   2f454:	10800117 	ldw	r2,4(r2)
   2f458:	10c02014 	ori	r3,r2,128
   2f45c:	e0bffc17 	ldw	r2,-16(fp)
   2f460:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f464:	e0bffc17 	ldw	r2,-16(fp)
   2f468:	10800017 	ldw	r2,0(r2)
   2f46c:	10800304 	addi	r2,r2,12
   2f470:	e0fffc17 	ldw	r3,-16(fp)
   2f474:	18c00117 	ldw	r3,4(r3)
   2f478:	10c00035 	stwio	r3,0(r2)
   2f47c:	e0bff817 	ldw	r2,-32(fp)
   2f480:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f484:	e0bffa17 	ldw	r2,-24(fp)
   2f488:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   2f48c:	e0bff517 	ldw	r2,-44(fp)
   2f490:	1000021e 	bne	r2,zero,2f49c <altera_avalon_uart_read+0x158>
   2f494:	e0bffe17 	ldw	r2,-8(fp)
   2f498:	103fcd1e 	bne	r2,zero,2f3d0 <__alt_data_end+0xfffef3d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f49c:	0005303a 	rdctl	r2,status
   2f4a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f4a4:	e0fffb17 	ldw	r3,-20(fp)
   2f4a8:	00bfff84 	movi	r2,-2
   2f4ac:	1884703a 	and	r2,r3,r2
   2f4b0:	1001703a 	wrctl	status,r2
  
  return context;
   2f4b4:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   2f4b8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f4bc:	e0bffc17 	ldw	r2,-16(fp)
   2f4c0:	10800117 	ldw	r2,4(r2)
   2f4c4:	10c02014 	ori	r3,r2,128
   2f4c8:	e0bffc17 	ldw	r2,-16(fp)
   2f4cc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f4d0:	e0bffc17 	ldw	r2,-16(fp)
   2f4d4:	10800017 	ldw	r2,0(r2)
   2f4d8:	10800304 	addi	r2,r2,12
   2f4dc:	e0fffc17 	ldw	r3,-16(fp)
   2f4e0:	18c00117 	ldw	r3,4(r3)
   2f4e4:	10c00035 	stwio	r3,0(r2)
   2f4e8:	e0bff817 	ldw	r2,-32(fp)
   2f4ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f4f0:	e0bff717 	ldw	r2,-36(fp)
   2f4f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   2f4f8:	e0bff403 	ldbu	r2,-48(fp)
   2f4fc:	10000226 	beq	r2,zero,2f508 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   2f500:	00bffd44 	movi	r2,-11
   2f504:	00000106 	br	2f50c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   2f508:	e0bff517 	ldw	r2,-44(fp)
  }
}
   2f50c:	e037883a 	mov	sp,fp
   2f510:	dfc00117 	ldw	ra,4(sp)
   2f514:	df000017 	ldw	fp,0(sp)
   2f518:	dec00204 	addi	sp,sp,8
   2f51c:	f800283a 	ret

0002f520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f520:	defffe04 	addi	sp,sp,-8
   2f524:	dfc00115 	stw	ra,4(sp)
   2f528:	df000015 	stw	fp,0(sp)
   2f52c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f530:	d0a00b17 	ldw	r2,-32724(gp)
   2f534:	10000326 	beq	r2,zero,2f544 <alt_get_errno+0x24>
   2f538:	d0a00b17 	ldw	r2,-32724(gp)
   2f53c:	103ee83a 	callr	r2
   2f540:	00000106 	br	2f548 <alt_get_errno+0x28>
   2f544:	d0a72204 	addi	r2,gp,-25464
}
   2f548:	e037883a 	mov	sp,fp
   2f54c:	dfc00117 	ldw	ra,4(sp)
   2f550:	df000017 	ldw	fp,0(sp)
   2f554:	dec00204 	addi	sp,sp,8
   2f558:	f800283a 	ret

0002f55c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   2f55c:	defff204 	addi	sp,sp,-56
   2f560:	dfc00d15 	stw	ra,52(sp)
   2f564:	df000c15 	stw	fp,48(sp)
   2f568:	df000c04 	addi	fp,sp,48
   2f56c:	e13ffc15 	stw	r4,-16(fp)
   2f570:	e17ffd15 	stw	r5,-12(fp)
   2f574:	e1bffe15 	stw	r6,-8(fp)
   2f578:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   2f57c:	e0bffe17 	ldw	r2,-8(fp)
   2f580:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2f584:	e0bfff17 	ldw	r2,-4(fp)
   2f588:	1090000c 	andi	r2,r2,16384
   2f58c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2f590:	00003c06 	br	2f684 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f594:	e0bffc17 	ldw	r2,-16(fp)
   2f598:	10800517 	ldw	r2,20(r2)
   2f59c:	10800044 	addi	r2,r2,1
   2f5a0:	10800fcc 	andi	r2,r2,63
   2f5a4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2f5a8:	e0bffc17 	ldw	r2,-16(fp)
   2f5ac:	10c00417 	ldw	r3,16(r2)
   2f5b0:	e0bff717 	ldw	r2,-36(fp)
   2f5b4:	1880221e 	bne	r3,r2,2f640 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   2f5b8:	e0bff517 	ldw	r2,-44(fp)
   2f5bc:	10000526 	beq	r2,zero,2f5d4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2f5c0:	002f5200 	call	2f520 <alt_get_errno>
   2f5c4:	1007883a 	mov	r3,r2
   2f5c8:	008002c4 	movi	r2,11
   2f5cc:	18800015 	stw	r2,0(r3)
        break;
   2f5d0:	00002e06 	br	2f68c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f5d4:	0005303a 	rdctl	r2,status
   2f5d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f5dc:	e0fff917 	ldw	r3,-28(fp)
   2f5e0:	00bfff84 	movi	r2,-2
   2f5e4:	1884703a 	and	r2,r3,r2
   2f5e8:	1001703a 	wrctl	status,r2
  
  return context;
   2f5ec:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2f5f0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f5f4:	e0bffc17 	ldw	r2,-16(fp)
   2f5f8:	10800117 	ldw	r2,4(r2)
   2f5fc:	10c11014 	ori	r3,r2,1088
   2f600:	e0bffc17 	ldw	r2,-16(fp)
   2f604:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f608:	e0bffc17 	ldw	r2,-16(fp)
   2f60c:	10800017 	ldw	r2,0(r2)
   2f610:	10800304 	addi	r2,r2,12
   2f614:	e0fffc17 	ldw	r3,-16(fp)
   2f618:	18c00117 	ldw	r3,4(r3)
   2f61c:	10c00035 	stwio	r3,0(r2)
   2f620:	e0bff817 	ldw	r2,-32(fp)
   2f624:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f628:	e0bff617 	ldw	r2,-40(fp)
   2f62c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   2f630:	e0bffc17 	ldw	r2,-16(fp)
   2f634:	10c00417 	ldw	r3,16(r2)
   2f638:	e0bff717 	ldw	r2,-36(fp)
   2f63c:	18bffc26 	beq	r3,r2,2f630 <__alt_data_end+0xfffef630>
      }
    }

    count--;
   2f640:	e0bff417 	ldw	r2,-48(fp)
   2f644:	10bfffc4 	addi	r2,r2,-1
   2f648:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   2f64c:	e0bffc17 	ldw	r2,-16(fp)
   2f650:	10c00517 	ldw	r3,20(r2)
   2f654:	e0bffd17 	ldw	r2,-12(fp)
   2f658:	11000044 	addi	r4,r2,1
   2f65c:	e13ffd15 	stw	r4,-12(fp)
   2f660:	10800003 	ldbu	r2,0(r2)
   2f664:	1009883a 	mov	r4,r2
   2f668:	e0bffc17 	ldw	r2,-16(fp)
   2f66c:	10c5883a 	add	r2,r2,r3
   2f670:	10801704 	addi	r2,r2,92
   2f674:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   2f678:	e0bffc17 	ldw	r2,-16(fp)
   2f67c:	e0fff717 	ldw	r3,-36(fp)
   2f680:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2f684:	e0bff417 	ldw	r2,-48(fp)
   2f688:	103fc21e 	bne	r2,zero,2f594 <__alt_data_end+0xfffef594>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f68c:	0005303a 	rdctl	r2,status
   2f690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f694:	e0fffb17 	ldw	r3,-20(fp)
   2f698:	00bfff84 	movi	r2,-2
   2f69c:	1884703a 	and	r2,r3,r2
   2f6a0:	1001703a 	wrctl	status,r2
  
  return context;
   2f6a4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   2f6a8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f6ac:	e0bffc17 	ldw	r2,-16(fp)
   2f6b0:	10800117 	ldw	r2,4(r2)
   2f6b4:	10c11014 	ori	r3,r2,1088
   2f6b8:	e0bffc17 	ldw	r2,-16(fp)
   2f6bc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f6c0:	e0bffc17 	ldw	r2,-16(fp)
   2f6c4:	10800017 	ldw	r2,0(r2)
   2f6c8:	10800304 	addi	r2,r2,12
   2f6cc:	e0fffc17 	ldw	r3,-16(fp)
   2f6d0:	18c00117 	ldw	r3,4(r3)
   2f6d4:	10c00035 	stwio	r3,0(r2)
   2f6d8:	e0bff817 	ldw	r2,-32(fp)
   2f6dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f6e0:	e0bffa17 	ldw	r2,-24(fp)
   2f6e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2f6e8:	e0fffe17 	ldw	r3,-8(fp)
   2f6ec:	e0bff417 	ldw	r2,-48(fp)
   2f6f0:	1885c83a 	sub	r2,r3,r2
}
   2f6f4:	e037883a 	mov	sp,fp
   2f6f8:	dfc00117 	ldw	ra,4(sp)
   2f6fc:	df000017 	ldw	fp,0(sp)
   2f700:	dec00204 	addi	sp,sp,8
   2f704:	f800283a 	ret

0002f708 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2f708:	defff504 	addi	sp,sp,-44
   2f70c:	df000a15 	stw	fp,40(sp)
   2f710:	df000a04 	addi	fp,sp,40
   2f714:	e13ffc15 	stw	r4,-16(fp)
   2f718:	e17ffd15 	stw	r5,-12(fp)
   2f71c:	e1bffe15 	stw	r6,-8(fp)
   2f720:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2f724:	e03ff615 	stw	zero,-40(fp)
   2f728:	d0a72717 	ldw	r2,-25444(gp)
  
  if (alt_ticks_per_second ())
   2f72c:	10003c26 	beq	r2,zero,2f820 <alt_alarm_start+0x118>
  {
    if (alarm)
   2f730:	e0bffc17 	ldw	r2,-16(fp)
   2f734:	10003826 	beq	r2,zero,2f818 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2f738:	e0bffc17 	ldw	r2,-16(fp)
   2f73c:	e0fffe17 	ldw	r3,-8(fp)
   2f740:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2f744:	e0bffc17 	ldw	r2,-16(fp)
   2f748:	e0ffff17 	ldw	r3,-4(fp)
   2f74c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f750:	0005303a 	rdctl	r2,status
   2f754:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f758:	e0fff917 	ldw	r3,-28(fp)
   2f75c:	00bfff84 	movi	r2,-2
   2f760:	1884703a 	and	r2,r3,r2
   2f764:	1001703a 	wrctl	status,r2
  
  return context;
   2f768:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2f76c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2f770:	d0a72817 	ldw	r2,-25440(gp)
      
      current_nticks = alt_nticks();
   2f774:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2f778:	e0fffd17 	ldw	r3,-12(fp)
   2f77c:	e0bff617 	ldw	r2,-40(fp)
   2f780:	1885883a 	add	r2,r3,r2
   2f784:	10c00044 	addi	r3,r2,1
   2f788:	e0bffc17 	ldw	r2,-16(fp)
   2f78c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2f790:	e0bffc17 	ldw	r2,-16(fp)
   2f794:	10c00217 	ldw	r3,8(r2)
   2f798:	e0bff617 	ldw	r2,-40(fp)
   2f79c:	1880042e 	bgeu	r3,r2,2f7b0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2f7a0:	e0bffc17 	ldw	r2,-16(fp)
   2f7a4:	00c00044 	movi	r3,1
   2f7a8:	10c00405 	stb	r3,16(r2)
   2f7ac:	00000206 	br	2f7b8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2f7b0:	e0bffc17 	ldw	r2,-16(fp)
   2f7b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2f7b8:	e0bffc17 	ldw	r2,-16(fp)
   2f7bc:	d0e01204 	addi	r3,gp,-32696
   2f7c0:	e0fffa15 	stw	r3,-24(fp)
   2f7c4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2f7c8:	e0bffb17 	ldw	r2,-20(fp)
   2f7cc:	e0fffa17 	ldw	r3,-24(fp)
   2f7d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2f7d4:	e0bffa17 	ldw	r2,-24(fp)
   2f7d8:	10c00017 	ldw	r3,0(r2)
   2f7dc:	e0bffb17 	ldw	r2,-20(fp)
   2f7e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2f7e4:	e0bffa17 	ldw	r2,-24(fp)
   2f7e8:	10800017 	ldw	r2,0(r2)
   2f7ec:	e0fffb17 	ldw	r3,-20(fp)
   2f7f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2f7f4:	e0bffa17 	ldw	r2,-24(fp)
   2f7f8:	e0fffb17 	ldw	r3,-20(fp)
   2f7fc:	10c00015 	stw	r3,0(r2)
   2f800:	e0bff817 	ldw	r2,-32(fp)
   2f804:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f808:	e0bff717 	ldw	r2,-36(fp)
   2f80c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2f810:	0005883a 	mov	r2,zero
   2f814:	00000306 	br	2f824 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2f818:	00bffa84 	movi	r2,-22
   2f81c:	00000106 	br	2f824 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2f820:	00bfde84 	movi	r2,-134
  }
}
   2f824:	e037883a 	mov	sp,fp
   2f828:	df000017 	ldw	fp,0(sp)
   2f82c:	dec00104 	addi	sp,sp,4
   2f830:	f800283a 	ret

0002f834 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2f834:	defffe04 	addi	sp,sp,-8
   2f838:	df000115 	stw	fp,4(sp)
   2f83c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2f840:	e03fff15 	stw	zero,-4(fp)
   2f844:	00000506 	br	2f85c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2f848:	e0bfff17 	ldw	r2,-4(fp)
   2f84c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2f850:	e0bfff17 	ldw	r2,-4(fp)
   2f854:	10800804 	addi	r2,r2,32
   2f858:	e0bfff15 	stw	r2,-4(fp)
   2f85c:	e0bfff17 	ldw	r2,-4(fp)
   2f860:	10820030 	cmpltui	r2,r2,2048
   2f864:	103ff81e 	bne	r2,zero,2f848 <__alt_data_end+0xfffef848>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2f868:	0001883a 	nop
   2f86c:	e037883a 	mov	sp,fp
   2f870:	df000017 	ldw	fp,0(sp)
   2f874:	dec00104 	addi	sp,sp,4
   2f878:	f800283a 	ret

0002f87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f87c:	defffe04 	addi	sp,sp,-8
   2f880:	dfc00115 	stw	ra,4(sp)
   2f884:	df000015 	stw	fp,0(sp)
   2f888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f88c:	d0a00b17 	ldw	r2,-32724(gp)
   2f890:	10000326 	beq	r2,zero,2f8a0 <alt_get_errno+0x24>
   2f894:	d0a00b17 	ldw	r2,-32724(gp)
   2f898:	103ee83a 	callr	r2
   2f89c:	00000106 	br	2f8a4 <alt_get_errno+0x28>
   2f8a0:	d0a72204 	addi	r2,gp,-25464
}
   2f8a4:	e037883a 	mov	sp,fp
   2f8a8:	dfc00117 	ldw	ra,4(sp)
   2f8ac:	df000017 	ldw	fp,0(sp)
   2f8b0:	dec00204 	addi	sp,sp,8
   2f8b4:	f800283a 	ret

0002f8b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2f8b8:	defffa04 	addi	sp,sp,-24
   2f8bc:	dfc00515 	stw	ra,20(sp)
   2f8c0:	df000415 	stw	fp,16(sp)
   2f8c4:	df000404 	addi	fp,sp,16
   2f8c8:	e13ffe15 	stw	r4,-8(fp)
   2f8cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2f8d0:	e0bffe17 	ldw	r2,-8(fp)
   2f8d4:	10000326 	beq	r2,zero,2f8e4 <alt_dev_llist_insert+0x2c>
   2f8d8:	e0bffe17 	ldw	r2,-8(fp)
   2f8dc:	10800217 	ldw	r2,8(r2)
   2f8e0:	1000061e 	bne	r2,zero,2f8fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2f8e4:	002f87c0 	call	2f87c <alt_get_errno>
   2f8e8:	1007883a 	mov	r3,r2
   2f8ec:	00800584 	movi	r2,22
   2f8f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2f8f4:	00bffa84 	movi	r2,-22
   2f8f8:	00001306 	br	2f948 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2f8fc:	e0bffe17 	ldw	r2,-8(fp)
   2f900:	e0ffff17 	ldw	r3,-4(fp)
   2f904:	e0fffc15 	stw	r3,-16(fp)
   2f908:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2f90c:	e0bffd17 	ldw	r2,-12(fp)
   2f910:	e0fffc17 	ldw	r3,-16(fp)
   2f914:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2f918:	e0bffc17 	ldw	r2,-16(fp)
   2f91c:	10c00017 	ldw	r3,0(r2)
   2f920:	e0bffd17 	ldw	r2,-12(fp)
   2f924:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2f928:	e0bffc17 	ldw	r2,-16(fp)
   2f92c:	10800017 	ldw	r2,0(r2)
   2f930:	e0fffd17 	ldw	r3,-12(fp)
   2f934:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2f938:	e0bffc17 	ldw	r2,-16(fp)
   2f93c:	e0fffd17 	ldw	r3,-12(fp)
   2f940:	10c00015 	stw	r3,0(r2)

  return 0;  
   2f944:	0005883a 	mov	r2,zero
}
   2f948:	e037883a 	mov	sp,fp
   2f94c:	dfc00117 	ldw	ra,4(sp)
   2f950:	df000017 	ldw	fp,0(sp)
   2f954:	dec00204 	addi	sp,sp,8
   2f958:	f800283a 	ret

0002f95c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2f95c:	defffd04 	addi	sp,sp,-12
   2f960:	dfc00215 	stw	ra,8(sp)
   2f964:	df000115 	stw	fp,4(sp)
   2f968:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2f96c:	008000f4 	movhi	r2,3
   2f970:	10825104 	addi	r2,r2,2372
   2f974:	e0bfff15 	stw	r2,-4(fp)
   2f978:	00000606 	br	2f994 <_do_ctors+0x38>
        (*ctor) (); 
   2f97c:	e0bfff17 	ldw	r2,-4(fp)
   2f980:	10800017 	ldw	r2,0(r2)
   2f984:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2f988:	e0bfff17 	ldw	r2,-4(fp)
   2f98c:	10bfff04 	addi	r2,r2,-4
   2f990:	e0bfff15 	stw	r2,-4(fp)
   2f994:	e0ffff17 	ldw	r3,-4(fp)
   2f998:	008000f4 	movhi	r2,3
   2f99c:	10825204 	addi	r2,r2,2376
   2f9a0:	18bff62e 	bgeu	r3,r2,2f97c <__alt_data_end+0xfffef97c>
        (*ctor) (); 
}
   2f9a4:	0001883a 	nop
   2f9a8:	e037883a 	mov	sp,fp
   2f9ac:	dfc00117 	ldw	ra,4(sp)
   2f9b0:	df000017 	ldw	fp,0(sp)
   2f9b4:	dec00204 	addi	sp,sp,8
   2f9b8:	f800283a 	ret

0002f9bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2f9bc:	defffd04 	addi	sp,sp,-12
   2f9c0:	dfc00215 	stw	ra,8(sp)
   2f9c4:	df000115 	stw	fp,4(sp)
   2f9c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2f9cc:	008000f4 	movhi	r2,3
   2f9d0:	10825104 	addi	r2,r2,2372
   2f9d4:	e0bfff15 	stw	r2,-4(fp)
   2f9d8:	00000606 	br	2f9f4 <_do_dtors+0x38>
        (*dtor) (); 
   2f9dc:	e0bfff17 	ldw	r2,-4(fp)
   2f9e0:	10800017 	ldw	r2,0(r2)
   2f9e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2f9e8:	e0bfff17 	ldw	r2,-4(fp)
   2f9ec:	10bfff04 	addi	r2,r2,-4
   2f9f0:	e0bfff15 	stw	r2,-4(fp)
   2f9f4:	e0ffff17 	ldw	r3,-4(fp)
   2f9f8:	008000f4 	movhi	r2,3
   2f9fc:	10825204 	addi	r2,r2,2376
   2fa00:	18bff62e 	bgeu	r3,r2,2f9dc <__alt_data_end+0xfffef9dc>
        (*dtor) (); 
}
   2fa04:	0001883a 	nop
   2fa08:	e037883a 	mov	sp,fp
   2fa0c:	dfc00117 	ldw	ra,4(sp)
   2fa10:	df000017 	ldw	fp,0(sp)
   2fa14:	dec00204 	addi	sp,sp,8
   2fa18:	f800283a 	ret

0002fa1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2fa1c:	defffa04 	addi	sp,sp,-24
   2fa20:	dfc00515 	stw	ra,20(sp)
   2fa24:	df000415 	stw	fp,16(sp)
   2fa28:	df000404 	addi	fp,sp,16
   2fa2c:	e13ffe15 	stw	r4,-8(fp)
   2fa30:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2fa34:	e0bfff17 	ldw	r2,-4(fp)
   2fa38:	10800017 	ldw	r2,0(r2)
   2fa3c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2fa40:	e13ffe17 	ldw	r4,-8(fp)
   2fa44:	00204dc0 	call	204dc <strlen>
   2fa48:	10800044 	addi	r2,r2,1
   2fa4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2fa50:	00000d06 	br	2fa88 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2fa54:	e0bffc17 	ldw	r2,-16(fp)
   2fa58:	10800217 	ldw	r2,8(r2)
   2fa5c:	e0fffd17 	ldw	r3,-12(fp)
   2fa60:	180d883a 	mov	r6,r3
   2fa64:	e17ffe17 	ldw	r5,-8(fp)
   2fa68:	1009883a 	mov	r4,r2
   2fa6c:	00306000 	call	30600 <memcmp>
   2fa70:	1000021e 	bne	r2,zero,2fa7c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2fa74:	e0bffc17 	ldw	r2,-16(fp)
   2fa78:	00000706 	br	2fa98 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2fa7c:	e0bffc17 	ldw	r2,-16(fp)
   2fa80:	10800017 	ldw	r2,0(r2)
   2fa84:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2fa88:	e0fffc17 	ldw	r3,-16(fp)
   2fa8c:	e0bfff17 	ldw	r2,-4(fp)
   2fa90:	18bff01e 	bne	r3,r2,2fa54 <__alt_data_end+0xfffefa54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2fa94:	0005883a 	mov	r2,zero
}
   2fa98:	e037883a 	mov	sp,fp
   2fa9c:	dfc00117 	ldw	ra,4(sp)
   2faa0:	df000017 	ldw	fp,0(sp)
   2faa4:	dec00204 	addi	sp,sp,8
   2faa8:	f800283a 	ret

0002faac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2faac:	defffe04 	addi	sp,sp,-8
   2fab0:	dfc00115 	stw	ra,4(sp)
   2fab4:	df000015 	stw	fp,0(sp)
   2fab8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2fabc:	01440004 	movi	r5,4096
   2fac0:	0009883a 	mov	r4,zero
   2fac4:	00304880 	call	30488 <alt_icache_flush>
#endif
}
   2fac8:	0001883a 	nop
   2facc:	e037883a 	mov	sp,fp
   2fad0:	dfc00117 	ldw	ra,4(sp)
   2fad4:	df000017 	ldw	fp,0(sp)
   2fad8:	dec00204 	addi	sp,sp,8
   2fadc:	f800283a 	ret

0002fae0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2fae0:	defff904 	addi	sp,sp,-28
   2fae4:	dfc00615 	stw	ra,24(sp)
   2fae8:	df000515 	stw	fp,20(sp)
   2faec:	df000504 	addi	fp,sp,20
   2faf0:	e13ffc15 	stw	r4,-16(fp)
   2faf4:	e17ffd15 	stw	r5,-12(fp)
   2faf8:	e1bffe15 	stw	r6,-8(fp)
   2fafc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2fb00:	e0800217 	ldw	r2,8(fp)
   2fb04:	d8800015 	stw	r2,0(sp)
   2fb08:	e1ffff17 	ldw	r7,-4(fp)
   2fb0c:	e1bffe17 	ldw	r6,-8(fp)
   2fb10:	e17ffd17 	ldw	r5,-12(fp)
   2fb14:	e13ffc17 	ldw	r4,-16(fp)
   2fb18:	002fc900 	call	2fc90 <alt_iic_isr_register>
}  
   2fb1c:	e037883a 	mov	sp,fp
   2fb20:	dfc00117 	ldw	ra,4(sp)
   2fb24:	df000017 	ldw	fp,0(sp)
   2fb28:	dec00204 	addi	sp,sp,8
   2fb2c:	f800283a 	ret

0002fb30 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2fb30:	defff904 	addi	sp,sp,-28
   2fb34:	df000615 	stw	fp,24(sp)
   2fb38:	df000604 	addi	fp,sp,24
   2fb3c:	e13ffe15 	stw	r4,-8(fp)
   2fb40:	e17fff15 	stw	r5,-4(fp)
   2fb44:	e0bfff17 	ldw	r2,-4(fp)
   2fb48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fb4c:	0005303a 	rdctl	r2,status
   2fb50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fb54:	e0fffb17 	ldw	r3,-20(fp)
   2fb58:	00bfff84 	movi	r2,-2
   2fb5c:	1884703a 	and	r2,r3,r2
   2fb60:	1001703a 	wrctl	status,r2
  
  return context;
   2fb64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2fb68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2fb6c:	00c00044 	movi	r3,1
   2fb70:	e0bffa17 	ldw	r2,-24(fp)
   2fb74:	1884983a 	sll	r2,r3,r2
   2fb78:	1007883a 	mov	r3,r2
   2fb7c:	d0a72617 	ldw	r2,-25448(gp)
   2fb80:	1884b03a 	or	r2,r3,r2
   2fb84:	d0a72615 	stw	r2,-25448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2fb88:	d0a72617 	ldw	r2,-25448(gp)
   2fb8c:	100170fa 	wrctl	ienable,r2
   2fb90:	e0bffc17 	ldw	r2,-16(fp)
   2fb94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fb98:	e0bffd17 	ldw	r2,-12(fp)
   2fb9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2fba0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2fba4:	0001883a 	nop
}
   2fba8:	e037883a 	mov	sp,fp
   2fbac:	df000017 	ldw	fp,0(sp)
   2fbb0:	dec00104 	addi	sp,sp,4
   2fbb4:	f800283a 	ret

0002fbb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2fbb8:	defff904 	addi	sp,sp,-28
   2fbbc:	df000615 	stw	fp,24(sp)
   2fbc0:	df000604 	addi	fp,sp,24
   2fbc4:	e13ffe15 	stw	r4,-8(fp)
   2fbc8:	e17fff15 	stw	r5,-4(fp)
   2fbcc:	e0bfff17 	ldw	r2,-4(fp)
   2fbd0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fbd4:	0005303a 	rdctl	r2,status
   2fbd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fbdc:	e0fffb17 	ldw	r3,-20(fp)
   2fbe0:	00bfff84 	movi	r2,-2
   2fbe4:	1884703a 	and	r2,r3,r2
   2fbe8:	1001703a 	wrctl	status,r2
  
  return context;
   2fbec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2fbf0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2fbf4:	00c00044 	movi	r3,1
   2fbf8:	e0bffa17 	ldw	r2,-24(fp)
   2fbfc:	1884983a 	sll	r2,r3,r2
   2fc00:	0084303a 	nor	r2,zero,r2
   2fc04:	1007883a 	mov	r3,r2
   2fc08:	d0a72617 	ldw	r2,-25448(gp)
   2fc0c:	1884703a 	and	r2,r3,r2
   2fc10:	d0a72615 	stw	r2,-25448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2fc14:	d0a72617 	ldw	r2,-25448(gp)
   2fc18:	100170fa 	wrctl	ienable,r2
   2fc1c:	e0bffc17 	ldw	r2,-16(fp)
   2fc20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fc24:	e0bffd17 	ldw	r2,-12(fp)
   2fc28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2fc2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2fc30:	0001883a 	nop
}
   2fc34:	e037883a 	mov	sp,fp
   2fc38:	df000017 	ldw	fp,0(sp)
   2fc3c:	dec00104 	addi	sp,sp,4
   2fc40:	f800283a 	ret

0002fc44 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2fc44:	defffc04 	addi	sp,sp,-16
   2fc48:	df000315 	stw	fp,12(sp)
   2fc4c:	df000304 	addi	fp,sp,12
   2fc50:	e13ffe15 	stw	r4,-8(fp)
   2fc54:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2fc58:	000530fa 	rdctl	r2,ienable
   2fc5c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2fc60:	00c00044 	movi	r3,1
   2fc64:	e0bfff17 	ldw	r2,-4(fp)
   2fc68:	1884983a 	sll	r2,r3,r2
   2fc6c:	1007883a 	mov	r3,r2
   2fc70:	e0bffd17 	ldw	r2,-12(fp)
   2fc74:	1884703a 	and	r2,r3,r2
   2fc78:	1004c03a 	cmpne	r2,r2,zero
   2fc7c:	10803fcc 	andi	r2,r2,255
}
   2fc80:	e037883a 	mov	sp,fp
   2fc84:	df000017 	ldw	fp,0(sp)
   2fc88:	dec00104 	addi	sp,sp,4
   2fc8c:	f800283a 	ret

0002fc90 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2fc90:	defff504 	addi	sp,sp,-44
   2fc94:	dfc00a15 	stw	ra,40(sp)
   2fc98:	df000915 	stw	fp,36(sp)
   2fc9c:	df000904 	addi	fp,sp,36
   2fca0:	e13ffc15 	stw	r4,-16(fp)
   2fca4:	e17ffd15 	stw	r5,-12(fp)
   2fca8:	e1bffe15 	stw	r6,-8(fp)
   2fcac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2fcb0:	00bffa84 	movi	r2,-22
   2fcb4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2fcb8:	e0bffd17 	ldw	r2,-12(fp)
   2fcbc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2fcc0:	e0bff817 	ldw	r2,-32(fp)
   2fcc4:	10800808 	cmpgei	r2,r2,32
   2fcc8:	1000271e 	bne	r2,zero,2fd68 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fccc:	0005303a 	rdctl	r2,status
   2fcd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fcd4:	e0fffb17 	ldw	r3,-20(fp)
   2fcd8:	00bfff84 	movi	r2,-2
   2fcdc:	1884703a 	and	r2,r3,r2
   2fce0:	1001703a 	wrctl	status,r2
  
  return context;
   2fce4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2fce8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2fcec:	008000f4 	movhi	r2,3
   2fcf0:	10916f04 	addi	r2,r2,17852
   2fcf4:	e0fff817 	ldw	r3,-32(fp)
   2fcf8:	180690fa 	slli	r3,r3,3
   2fcfc:	10c5883a 	add	r2,r2,r3
   2fd00:	e0fffe17 	ldw	r3,-8(fp)
   2fd04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2fd08:	008000f4 	movhi	r2,3
   2fd0c:	10916f04 	addi	r2,r2,17852
   2fd10:	e0fff817 	ldw	r3,-32(fp)
   2fd14:	180690fa 	slli	r3,r3,3
   2fd18:	10c5883a 	add	r2,r2,r3
   2fd1c:	10800104 	addi	r2,r2,4
   2fd20:	e0ffff17 	ldw	r3,-4(fp)
   2fd24:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2fd28:	e0bffe17 	ldw	r2,-8(fp)
   2fd2c:	10000526 	beq	r2,zero,2fd44 <alt_iic_isr_register+0xb4>
   2fd30:	e0bff817 	ldw	r2,-32(fp)
   2fd34:	100b883a 	mov	r5,r2
   2fd38:	e13ffc17 	ldw	r4,-16(fp)
   2fd3c:	002fb300 	call	2fb30 <alt_ic_irq_enable>
   2fd40:	00000406 	br	2fd54 <alt_iic_isr_register+0xc4>
   2fd44:	e0bff817 	ldw	r2,-32(fp)
   2fd48:	100b883a 	mov	r5,r2
   2fd4c:	e13ffc17 	ldw	r4,-16(fp)
   2fd50:	002fbb80 	call	2fbb8 <alt_ic_irq_disable>
   2fd54:	e0bff715 	stw	r2,-36(fp)
   2fd58:	e0bffa17 	ldw	r2,-24(fp)
   2fd5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fd60:	e0bff917 	ldw	r2,-28(fp)
   2fd64:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2fd68:	e0bff717 	ldw	r2,-36(fp)
}
   2fd6c:	e037883a 	mov	sp,fp
   2fd70:	dfc00117 	ldw	ra,4(sp)
   2fd74:	df000017 	ldw	fp,0(sp)
   2fd78:	dec00204 	addi	sp,sp,8
   2fd7c:	f800283a 	ret

0002fd80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2fd80:	defff904 	addi	sp,sp,-28
   2fd84:	dfc00615 	stw	ra,24(sp)
   2fd88:	df000515 	stw	fp,20(sp)
   2fd8c:	df000504 	addi	fp,sp,20
   2fd90:	e13ffc15 	stw	r4,-16(fp)
   2fd94:	e17ffd15 	stw	r5,-12(fp)
   2fd98:	e1bffe15 	stw	r6,-8(fp)
   2fd9c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2fda0:	e1bfff17 	ldw	r6,-4(fp)
   2fda4:	e17ffe17 	ldw	r5,-8(fp)
   2fda8:	e13ffd17 	ldw	r4,-12(fp)
   2fdac:	002ffc00 	call	2ffc0 <open>
   2fdb0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2fdb4:	e0bffb17 	ldw	r2,-20(fp)
   2fdb8:	10001c16 	blt	r2,zero,2fe2c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2fdbc:	008000f4 	movhi	r2,3
   2fdc0:	10857c04 	addi	r2,r2,5616
   2fdc4:	e0fffb17 	ldw	r3,-20(fp)
   2fdc8:	18c00324 	muli	r3,r3,12
   2fdcc:	10c5883a 	add	r2,r2,r3
   2fdd0:	10c00017 	ldw	r3,0(r2)
   2fdd4:	e0bffc17 	ldw	r2,-16(fp)
   2fdd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2fddc:	008000f4 	movhi	r2,3
   2fde0:	10857c04 	addi	r2,r2,5616
   2fde4:	e0fffb17 	ldw	r3,-20(fp)
   2fde8:	18c00324 	muli	r3,r3,12
   2fdec:	10c5883a 	add	r2,r2,r3
   2fdf0:	10800104 	addi	r2,r2,4
   2fdf4:	10c00017 	ldw	r3,0(r2)
   2fdf8:	e0bffc17 	ldw	r2,-16(fp)
   2fdfc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2fe00:	008000f4 	movhi	r2,3
   2fe04:	10857c04 	addi	r2,r2,5616
   2fe08:	e0fffb17 	ldw	r3,-20(fp)
   2fe0c:	18c00324 	muli	r3,r3,12
   2fe10:	10c5883a 	add	r2,r2,r3
   2fe14:	10800204 	addi	r2,r2,8
   2fe18:	10c00017 	ldw	r3,0(r2)
   2fe1c:	e0bffc17 	ldw	r2,-16(fp)
   2fe20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2fe24:	e13ffb17 	ldw	r4,-20(fp)
   2fe28:	002d3b80 	call	2d3b8 <alt_release_fd>
  }
} 
   2fe2c:	0001883a 	nop
   2fe30:	e037883a 	mov	sp,fp
   2fe34:	dfc00117 	ldw	ra,4(sp)
   2fe38:	df000017 	ldw	fp,0(sp)
   2fe3c:	dec00204 	addi	sp,sp,8
   2fe40:	f800283a 	ret

0002fe44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2fe44:	defffb04 	addi	sp,sp,-20
   2fe48:	dfc00415 	stw	ra,16(sp)
   2fe4c:	df000315 	stw	fp,12(sp)
   2fe50:	df000304 	addi	fp,sp,12
   2fe54:	e13ffd15 	stw	r4,-12(fp)
   2fe58:	e17ffe15 	stw	r5,-8(fp)
   2fe5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2fe60:	01c07fc4 	movi	r7,511
   2fe64:	01800044 	movi	r6,1
   2fe68:	e17ffd17 	ldw	r5,-12(fp)
   2fe6c:	010000f4 	movhi	r4,3
   2fe70:	21057f04 	addi	r4,r4,5628
   2fe74:	002fd800 	call	2fd80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2fe78:	01c07fc4 	movi	r7,511
   2fe7c:	000d883a 	mov	r6,zero
   2fe80:	e17ffe17 	ldw	r5,-8(fp)
   2fe84:	010000f4 	movhi	r4,3
   2fe88:	21057c04 	addi	r4,r4,5616
   2fe8c:	002fd800 	call	2fd80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2fe90:	01c07fc4 	movi	r7,511
   2fe94:	01800044 	movi	r6,1
   2fe98:	e17fff17 	ldw	r5,-4(fp)
   2fe9c:	010000f4 	movhi	r4,3
   2fea0:	21058204 	addi	r4,r4,5640
   2fea4:	002fd800 	call	2fd80 <alt_open_fd>
}  
   2fea8:	0001883a 	nop
   2feac:	e037883a 	mov	sp,fp
   2feb0:	dfc00117 	ldw	ra,4(sp)
   2feb4:	df000017 	ldw	fp,0(sp)
   2feb8:	dec00204 	addi	sp,sp,8
   2febc:	f800283a 	ret

0002fec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fec0:	defffe04 	addi	sp,sp,-8
   2fec4:	dfc00115 	stw	ra,4(sp)
   2fec8:	df000015 	stw	fp,0(sp)
   2fecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fed0:	d0a00b17 	ldw	r2,-32724(gp)
   2fed4:	10000326 	beq	r2,zero,2fee4 <alt_get_errno+0x24>
   2fed8:	d0a00b17 	ldw	r2,-32724(gp)
   2fedc:	103ee83a 	callr	r2
   2fee0:	00000106 	br	2fee8 <alt_get_errno+0x28>
   2fee4:	d0a72204 	addi	r2,gp,-25464
}
   2fee8:	e037883a 	mov	sp,fp
   2feec:	dfc00117 	ldw	ra,4(sp)
   2fef0:	df000017 	ldw	fp,0(sp)
   2fef4:	dec00204 	addi	sp,sp,8
   2fef8:	f800283a 	ret

0002fefc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2fefc:	defffd04 	addi	sp,sp,-12
   2ff00:	df000215 	stw	fp,8(sp)
   2ff04:	df000204 	addi	fp,sp,8
   2ff08:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2ff0c:	e0bfff17 	ldw	r2,-4(fp)
   2ff10:	10800217 	ldw	r2,8(r2)
   2ff14:	10d00034 	orhi	r3,r2,16384
   2ff18:	e0bfff17 	ldw	r2,-4(fp)
   2ff1c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2ff20:	e03ffe15 	stw	zero,-8(fp)
   2ff24:	00001d06 	br	2ff9c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2ff28:	008000f4 	movhi	r2,3
   2ff2c:	10857c04 	addi	r2,r2,5616
   2ff30:	e0fffe17 	ldw	r3,-8(fp)
   2ff34:	18c00324 	muli	r3,r3,12
   2ff38:	10c5883a 	add	r2,r2,r3
   2ff3c:	10c00017 	ldw	r3,0(r2)
   2ff40:	e0bfff17 	ldw	r2,-4(fp)
   2ff44:	10800017 	ldw	r2,0(r2)
   2ff48:	1880111e 	bne	r3,r2,2ff90 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2ff4c:	008000f4 	movhi	r2,3
   2ff50:	10857c04 	addi	r2,r2,5616
   2ff54:	e0fffe17 	ldw	r3,-8(fp)
   2ff58:	18c00324 	muli	r3,r3,12
   2ff5c:	10c5883a 	add	r2,r2,r3
   2ff60:	10800204 	addi	r2,r2,8
   2ff64:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2ff68:	1000090e 	bge	r2,zero,2ff90 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2ff6c:	e0bffe17 	ldw	r2,-8(fp)
   2ff70:	10c00324 	muli	r3,r2,12
   2ff74:	008000f4 	movhi	r2,3
   2ff78:	10857c04 	addi	r2,r2,5616
   2ff7c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2ff80:	e0bfff17 	ldw	r2,-4(fp)
   2ff84:	18800226 	beq	r3,r2,2ff90 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2ff88:	00bffcc4 	movi	r2,-13
   2ff8c:	00000806 	br	2ffb0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2ff90:	e0bffe17 	ldw	r2,-8(fp)
   2ff94:	10800044 	addi	r2,r2,1
   2ff98:	e0bffe15 	stw	r2,-8(fp)
   2ff9c:	d0a00a17 	ldw	r2,-32728(gp)
   2ffa0:	1007883a 	mov	r3,r2
   2ffa4:	e0bffe17 	ldw	r2,-8(fp)
   2ffa8:	18bfdf2e 	bgeu	r3,r2,2ff28 <__alt_data_end+0xfffeff28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2ffac:	0005883a 	mov	r2,zero
}
   2ffb0:	e037883a 	mov	sp,fp
   2ffb4:	df000017 	ldw	fp,0(sp)
   2ffb8:	dec00104 	addi	sp,sp,4
   2ffbc:	f800283a 	ret

0002ffc0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2ffc0:	defff604 	addi	sp,sp,-40
   2ffc4:	dfc00915 	stw	ra,36(sp)
   2ffc8:	df000815 	stw	fp,32(sp)
   2ffcc:	df000804 	addi	fp,sp,32
   2ffd0:	e13ffd15 	stw	r4,-12(fp)
   2ffd4:	e17ffe15 	stw	r5,-8(fp)
   2ffd8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2ffdc:	00bfffc4 	movi	r2,-1
   2ffe0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2ffe4:	00bffb44 	movi	r2,-19
   2ffe8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2ffec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2fff0:	d1600804 	addi	r5,gp,-32736
   2fff4:	e13ffd17 	ldw	r4,-12(fp)
   2fff8:	002fa1c0 	call	2fa1c <alt_find_dev>
   2fffc:	e0bff815 	stw	r2,-32(fp)
   30000:	e0bff817 	ldw	r2,-32(fp)
   30004:	1000051e 	bne	r2,zero,3001c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   30008:	e13ffd17 	ldw	r4,-12(fp)
   3000c:	00302dc0 	call	302dc <alt_find_file>
   30010:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   30014:	00800044 	movi	r2,1
   30018:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3001c:	e0bff817 	ldw	r2,-32(fp)
   30020:	10002926 	beq	r2,zero,300c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   30024:	e13ff817 	ldw	r4,-32(fp)
   30028:	00303e40 	call	303e4 <alt_get_fd>
   3002c:	e0bff915 	stw	r2,-28(fp)
   30030:	e0bff917 	ldw	r2,-28(fp)
   30034:	1000030e 	bge	r2,zero,30044 <open+0x84>
    {
      status = index;
   30038:	e0bff917 	ldw	r2,-28(fp)
   3003c:	e0bffa15 	stw	r2,-24(fp)
   30040:	00002306 	br	300d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   30044:	e0bff917 	ldw	r2,-28(fp)
   30048:	10c00324 	muli	r3,r2,12
   3004c:	008000f4 	movhi	r2,3
   30050:	10857c04 	addi	r2,r2,5616
   30054:	1885883a 	add	r2,r3,r2
   30058:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3005c:	e0fffe17 	ldw	r3,-8(fp)
   30060:	00900034 	movhi	r2,16384
   30064:	10bfffc4 	addi	r2,r2,-1
   30068:	1886703a 	and	r3,r3,r2
   3006c:	e0bffc17 	ldw	r2,-16(fp)
   30070:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   30074:	e0bffb17 	ldw	r2,-20(fp)
   30078:	1000051e 	bne	r2,zero,30090 <open+0xd0>
   3007c:	e13ffc17 	ldw	r4,-16(fp)
   30080:	002fefc0 	call	2fefc <alt_file_locked>
   30084:	e0bffa15 	stw	r2,-24(fp)
   30088:	e0bffa17 	ldw	r2,-24(fp)
   3008c:	10001016 	blt	r2,zero,300d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   30090:	e0bff817 	ldw	r2,-32(fp)
   30094:	10800317 	ldw	r2,12(r2)
   30098:	10000826 	beq	r2,zero,300bc <open+0xfc>
   3009c:	e0bff817 	ldw	r2,-32(fp)
   300a0:	10800317 	ldw	r2,12(r2)
   300a4:	e1ffff17 	ldw	r7,-4(fp)
   300a8:	e1bffe17 	ldw	r6,-8(fp)
   300ac:	e17ffd17 	ldw	r5,-12(fp)
   300b0:	e13ffc17 	ldw	r4,-16(fp)
   300b4:	103ee83a 	callr	r2
   300b8:	00000106 	br	300c0 <open+0x100>
   300bc:	0005883a 	mov	r2,zero
   300c0:	e0bffa15 	stw	r2,-24(fp)
   300c4:	00000206 	br	300d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   300c8:	00bffb44 	movi	r2,-19
   300cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   300d0:	e0bffa17 	ldw	r2,-24(fp)
   300d4:	1000090e 	bge	r2,zero,300fc <open+0x13c>
  {
    alt_release_fd (index);  
   300d8:	e13ff917 	ldw	r4,-28(fp)
   300dc:	002d3b80 	call	2d3b8 <alt_release_fd>
    ALT_ERRNO = -status;
   300e0:	002fec00 	call	2fec0 <alt_get_errno>
   300e4:	1007883a 	mov	r3,r2
   300e8:	e0bffa17 	ldw	r2,-24(fp)
   300ec:	0085c83a 	sub	r2,zero,r2
   300f0:	18800015 	stw	r2,0(r3)
    return -1;
   300f4:	00bfffc4 	movi	r2,-1
   300f8:	00000106 	br	30100 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   300fc:	e0bff917 	ldw	r2,-28(fp)
}
   30100:	e037883a 	mov	sp,fp
   30104:	dfc00117 	ldw	ra,4(sp)
   30108:	df000017 	ldw	fp,0(sp)
   3010c:	dec00204 	addi	sp,sp,8
   30110:	f800283a 	ret

00030114 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   30114:	defffa04 	addi	sp,sp,-24
   30118:	df000515 	stw	fp,20(sp)
   3011c:	df000504 	addi	fp,sp,20
   30120:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30124:	0005303a 	rdctl	r2,status
   30128:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3012c:	e0fffc17 	ldw	r3,-16(fp)
   30130:	00bfff84 	movi	r2,-2
   30134:	1884703a 	and	r2,r3,r2
   30138:	1001703a 	wrctl	status,r2
  
  return context;
   3013c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   30140:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   30144:	e0bfff17 	ldw	r2,-4(fp)
   30148:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3014c:	e0bffd17 	ldw	r2,-12(fp)
   30150:	10800017 	ldw	r2,0(r2)
   30154:	e0fffd17 	ldw	r3,-12(fp)
   30158:	18c00117 	ldw	r3,4(r3)
   3015c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   30160:	e0bffd17 	ldw	r2,-12(fp)
   30164:	10800117 	ldw	r2,4(r2)
   30168:	e0fffd17 	ldw	r3,-12(fp)
   3016c:	18c00017 	ldw	r3,0(r3)
   30170:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   30174:	e0bffd17 	ldw	r2,-12(fp)
   30178:	e0fffd17 	ldw	r3,-12(fp)
   3017c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   30180:	e0bffd17 	ldw	r2,-12(fp)
   30184:	e0fffd17 	ldw	r3,-12(fp)
   30188:	10c00015 	stw	r3,0(r2)
   3018c:	e0bffb17 	ldw	r2,-20(fp)
   30190:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30194:	e0bffe17 	ldw	r2,-8(fp)
   30198:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3019c:	0001883a 	nop
   301a0:	e037883a 	mov	sp,fp
   301a4:	df000017 	ldw	fp,0(sp)
   301a8:	dec00104 	addi	sp,sp,4
   301ac:	f800283a 	ret

000301b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   301b0:	defffb04 	addi	sp,sp,-20
   301b4:	dfc00415 	stw	ra,16(sp)
   301b8:	df000315 	stw	fp,12(sp)
   301bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   301c0:	d0a01217 	ldw	r2,-32696(gp)
   301c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   301c8:	d0a72817 	ldw	r2,-25440(gp)
   301cc:	10800044 	addi	r2,r2,1
   301d0:	d0a72815 	stw	r2,-25440(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   301d4:	00002e06 	br	30290 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   301d8:	e0bffd17 	ldw	r2,-12(fp)
   301dc:	10800017 	ldw	r2,0(r2)
   301e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   301e4:	e0bffd17 	ldw	r2,-12(fp)
   301e8:	10800403 	ldbu	r2,16(r2)
   301ec:	10803fcc 	andi	r2,r2,255
   301f0:	10000426 	beq	r2,zero,30204 <alt_tick+0x54>
   301f4:	d0a72817 	ldw	r2,-25440(gp)
   301f8:	1000021e 	bne	r2,zero,30204 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   301fc:	e0bffd17 	ldw	r2,-12(fp)
   30200:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   30204:	e0bffd17 	ldw	r2,-12(fp)
   30208:	10800217 	ldw	r2,8(r2)
   3020c:	d0e72817 	ldw	r3,-25440(gp)
   30210:	18801d36 	bltu	r3,r2,30288 <alt_tick+0xd8>
   30214:	e0bffd17 	ldw	r2,-12(fp)
   30218:	10800403 	ldbu	r2,16(r2)
   3021c:	10803fcc 	andi	r2,r2,255
   30220:	1000191e 	bne	r2,zero,30288 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   30224:	e0bffd17 	ldw	r2,-12(fp)
   30228:	10800317 	ldw	r2,12(r2)
   3022c:	e0fffd17 	ldw	r3,-12(fp)
   30230:	18c00517 	ldw	r3,20(r3)
   30234:	1809883a 	mov	r4,r3
   30238:	103ee83a 	callr	r2
   3023c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   30240:	e0bfff17 	ldw	r2,-4(fp)
   30244:	1000031e 	bne	r2,zero,30254 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   30248:	e13ffd17 	ldw	r4,-12(fp)
   3024c:	00301140 	call	30114 <alt_alarm_stop>
   30250:	00000d06 	br	30288 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   30254:	e0bffd17 	ldw	r2,-12(fp)
   30258:	10c00217 	ldw	r3,8(r2)
   3025c:	e0bfff17 	ldw	r2,-4(fp)
   30260:	1887883a 	add	r3,r3,r2
   30264:	e0bffd17 	ldw	r2,-12(fp)
   30268:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3026c:	e0bffd17 	ldw	r2,-12(fp)
   30270:	10c00217 	ldw	r3,8(r2)
   30274:	d0a72817 	ldw	r2,-25440(gp)
   30278:	1880032e 	bgeu	r3,r2,30288 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   3027c:	e0bffd17 	ldw	r2,-12(fp)
   30280:	00c00044 	movi	r3,1
   30284:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   30288:	e0bffe17 	ldw	r2,-8(fp)
   3028c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30290:	e0fffd17 	ldw	r3,-12(fp)
   30294:	d0a01204 	addi	r2,gp,-32696
   30298:	18bfcf1e 	bne	r3,r2,301d8 <__alt_data_end+0xffff01d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3029c:	0001883a 	nop
}
   302a0:	0001883a 	nop
   302a4:	e037883a 	mov	sp,fp
   302a8:	dfc00117 	ldw	ra,4(sp)
   302ac:	df000017 	ldw	fp,0(sp)
   302b0:	dec00204 	addi	sp,sp,8
   302b4:	f800283a 	ret

000302b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   302b8:	deffff04 	addi	sp,sp,-4
   302bc:	df000015 	stw	fp,0(sp)
   302c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   302c4:	000170fa 	wrctl	ienable,zero
}
   302c8:	0001883a 	nop
   302cc:	e037883a 	mov	sp,fp
   302d0:	df000017 	ldw	fp,0(sp)
   302d4:	dec00104 	addi	sp,sp,4
   302d8:	f800283a 	ret

000302dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   302dc:	defffb04 	addi	sp,sp,-20
   302e0:	dfc00415 	stw	ra,16(sp)
   302e4:	df000315 	stw	fp,12(sp)
   302e8:	df000304 	addi	fp,sp,12
   302ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   302f0:	d0a00617 	ldw	r2,-32744(gp)
   302f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   302f8:	00003106 	br	303c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   302fc:	e0bffd17 	ldw	r2,-12(fp)
   30300:	10800217 	ldw	r2,8(r2)
   30304:	1009883a 	mov	r4,r2
   30308:	00204dc0 	call	204dc <strlen>
   3030c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   30310:	e0bffd17 	ldw	r2,-12(fp)
   30314:	10c00217 	ldw	r3,8(r2)
   30318:	e0bffe17 	ldw	r2,-8(fp)
   3031c:	10bfffc4 	addi	r2,r2,-1
   30320:	1885883a 	add	r2,r3,r2
   30324:	10800003 	ldbu	r2,0(r2)
   30328:	10803fcc 	andi	r2,r2,255
   3032c:	1080201c 	xori	r2,r2,128
   30330:	10bfe004 	addi	r2,r2,-128
   30334:	10800bd8 	cmpnei	r2,r2,47
   30338:	1000031e 	bne	r2,zero,30348 <alt_find_file+0x6c>
    {
      len -= 1;
   3033c:	e0bffe17 	ldw	r2,-8(fp)
   30340:	10bfffc4 	addi	r2,r2,-1
   30344:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   30348:	e0bffe17 	ldw	r2,-8(fp)
   3034c:	e0ffff17 	ldw	r3,-4(fp)
   30350:	1885883a 	add	r2,r3,r2
   30354:	10800003 	ldbu	r2,0(r2)
   30358:	10803fcc 	andi	r2,r2,255
   3035c:	1080201c 	xori	r2,r2,128
   30360:	10bfe004 	addi	r2,r2,-128
   30364:	10800be0 	cmpeqi	r2,r2,47
   30368:	1000081e 	bne	r2,zero,3038c <alt_find_file+0xb0>
   3036c:	e0bffe17 	ldw	r2,-8(fp)
   30370:	e0ffff17 	ldw	r3,-4(fp)
   30374:	1885883a 	add	r2,r3,r2
   30378:	10800003 	ldbu	r2,0(r2)
   3037c:	10803fcc 	andi	r2,r2,255
   30380:	1080201c 	xori	r2,r2,128
   30384:	10bfe004 	addi	r2,r2,-128
   30388:	10000a1e 	bne	r2,zero,303b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   3038c:	e0bffd17 	ldw	r2,-12(fp)
   30390:	10800217 	ldw	r2,8(r2)
   30394:	e0fffe17 	ldw	r3,-8(fp)
   30398:	180d883a 	mov	r6,r3
   3039c:	e17fff17 	ldw	r5,-4(fp)
   303a0:	1009883a 	mov	r4,r2
   303a4:	00306000 	call	30600 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   303a8:	1000021e 	bne	r2,zero,303b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   303ac:	e0bffd17 	ldw	r2,-12(fp)
   303b0:	00000706 	br	303d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   303b4:	e0bffd17 	ldw	r2,-12(fp)
   303b8:	10800017 	ldw	r2,0(r2)
   303bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   303c0:	e0fffd17 	ldw	r3,-12(fp)
   303c4:	d0a00604 	addi	r2,gp,-32744
   303c8:	18bfcc1e 	bne	r3,r2,302fc <__alt_data_end+0xffff02fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   303cc:	0005883a 	mov	r2,zero
}
   303d0:	e037883a 	mov	sp,fp
   303d4:	dfc00117 	ldw	ra,4(sp)
   303d8:	df000017 	ldw	fp,0(sp)
   303dc:	dec00204 	addi	sp,sp,8
   303e0:	f800283a 	ret

000303e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   303e4:	defffc04 	addi	sp,sp,-16
   303e8:	df000315 	stw	fp,12(sp)
   303ec:	df000304 	addi	fp,sp,12
   303f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   303f4:	00bffa04 	movi	r2,-24
   303f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   303fc:	e03ffd15 	stw	zero,-12(fp)
   30400:	00001906 	br	30468 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   30404:	008000f4 	movhi	r2,3
   30408:	10857c04 	addi	r2,r2,5616
   3040c:	e0fffd17 	ldw	r3,-12(fp)
   30410:	18c00324 	muli	r3,r3,12
   30414:	10c5883a 	add	r2,r2,r3
   30418:	10800017 	ldw	r2,0(r2)
   3041c:	10000f1e 	bne	r2,zero,3045c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   30420:	008000f4 	movhi	r2,3
   30424:	10857c04 	addi	r2,r2,5616
   30428:	e0fffd17 	ldw	r3,-12(fp)
   3042c:	18c00324 	muli	r3,r3,12
   30430:	10c5883a 	add	r2,r2,r3
   30434:	e0ffff17 	ldw	r3,-4(fp)
   30438:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   3043c:	d0e00a17 	ldw	r3,-32728(gp)
   30440:	e0bffd17 	ldw	r2,-12(fp)
   30444:	1880020e 	bge	r3,r2,30450 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   30448:	e0bffd17 	ldw	r2,-12(fp)
   3044c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   30450:	e0bffd17 	ldw	r2,-12(fp)
   30454:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   30458:	00000606 	br	30474 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3045c:	e0bffd17 	ldw	r2,-12(fp)
   30460:	10800044 	addi	r2,r2,1
   30464:	e0bffd15 	stw	r2,-12(fp)
   30468:	e0bffd17 	ldw	r2,-12(fp)
   3046c:	10800810 	cmplti	r2,r2,32
   30470:	103fe41e 	bne	r2,zero,30404 <__alt_data_end+0xffff0404>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   30474:	e0bffe17 	ldw	r2,-8(fp)
}
   30478:	e037883a 	mov	sp,fp
   3047c:	df000017 	ldw	fp,0(sp)
   30480:	dec00104 	addi	sp,sp,4
   30484:	f800283a 	ret

00030488 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   30488:	defffb04 	addi	sp,sp,-20
   3048c:	df000415 	stw	fp,16(sp)
   30490:	df000404 	addi	fp,sp,16
   30494:	e13ffe15 	stw	r4,-8(fp)
   30498:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   3049c:	e0bfff17 	ldw	r2,-4(fp)
   304a0:	10840070 	cmpltui	r2,r2,4097
   304a4:	1000021e 	bne	r2,zero,304b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   304a8:	00840004 	movi	r2,4096
   304ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   304b0:	e0fffe17 	ldw	r3,-8(fp)
   304b4:	e0bfff17 	ldw	r2,-4(fp)
   304b8:	1885883a 	add	r2,r3,r2
   304bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   304c0:	e0bffe17 	ldw	r2,-8(fp)
   304c4:	e0bffc15 	stw	r2,-16(fp)
   304c8:	00000506 	br	304e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   304cc:	e0bffc17 	ldw	r2,-16(fp)
   304d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   304d4:	e0bffc17 	ldw	r2,-16(fp)
   304d8:	10800804 	addi	r2,r2,32
   304dc:	e0bffc15 	stw	r2,-16(fp)
   304e0:	e0fffc17 	ldw	r3,-16(fp)
   304e4:	e0bffd17 	ldw	r2,-12(fp)
   304e8:	18bff836 	bltu	r3,r2,304cc <__alt_data_end+0xffff04cc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   304ec:	e0bffe17 	ldw	r2,-8(fp)
   304f0:	108007cc 	andi	r2,r2,31
   304f4:	10000226 	beq	r2,zero,30500 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   304f8:	e0bffc17 	ldw	r2,-16(fp)
   304fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   30500:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   30504:	0001883a 	nop
   30508:	e037883a 	mov	sp,fp
   3050c:	df000017 	ldw	fp,0(sp)
   30510:	dec00104 	addi	sp,sp,4
   30514:	f800283a 	ret

00030518 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   30518:	defffe04 	addi	sp,sp,-8
   3051c:	df000115 	stw	fp,4(sp)
   30520:	df000104 	addi	fp,sp,4
   30524:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   30528:	e0bfff17 	ldw	r2,-4(fp)
   3052c:	10bffe84 	addi	r2,r2,-6
   30530:	10c00428 	cmpgeui	r3,r2,16
   30534:	18001a1e 	bne	r3,zero,305a0 <alt_exception_cause_generated_bad_addr+0x88>
   30538:	100690ba 	slli	r3,r2,2
   3053c:	008000f4 	movhi	r2,3
   30540:	10815404 	addi	r2,r2,1360
   30544:	1885883a 	add	r2,r3,r2
   30548:	10800017 	ldw	r2,0(r2)
   3054c:	1000683a 	jmp	r2
   30550:	00030590 	cmplti	zero,zero,3094
   30554:	00030590 	cmplti	zero,zero,3094
   30558:	000305a0 	cmpeqi	zero,zero,3094
   3055c:	000305a0 	cmpeqi	zero,zero,3094
   30560:	000305a0 	cmpeqi	zero,zero,3094
   30564:	00030590 	cmplti	zero,zero,3094
   30568:	00030598 	cmpnei	zero,zero,3094
   3056c:	000305a0 	cmpeqi	zero,zero,3094
   30570:	00030590 	cmplti	zero,zero,3094
   30574:	00030590 	cmplti	zero,zero,3094
   30578:	000305a0 	cmpeqi	zero,zero,3094
   3057c:	00030590 	cmplti	zero,zero,3094
   30580:	00030598 	cmpnei	zero,zero,3094
   30584:	000305a0 	cmpeqi	zero,zero,3094
   30588:	000305a0 	cmpeqi	zero,zero,3094
   3058c:	00030590 	cmplti	zero,zero,3094
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   30590:	00800044 	movi	r2,1
   30594:	00000306 	br	305a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   30598:	0005883a 	mov	r2,zero
   3059c:	00000106 	br	305a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   305a0:	0005883a 	mov	r2,zero
  }
}
   305a4:	e037883a 	mov	sp,fp
   305a8:	df000017 	ldw	fp,0(sp)
   305ac:	dec00104 	addi	sp,sp,4
   305b0:	f800283a 	ret

000305b4 <atexit>:
   305b4:	200b883a 	mov	r5,r4
   305b8:	000f883a 	mov	r7,zero
   305bc:	000d883a 	mov	r6,zero
   305c0:	0009883a 	mov	r4,zero
   305c4:	003067c1 	jmpi	3067c <__register_exitproc>

000305c8 <exit>:
   305c8:	defffe04 	addi	sp,sp,-8
   305cc:	000b883a 	mov	r5,zero
   305d0:	dc000015 	stw	r16,0(sp)
   305d4:	dfc00115 	stw	ra,4(sp)
   305d8:	2021883a 	mov	r16,r4
   305dc:	00307940 	call	30794 <__call_exitprocs>
   305e0:	008000f4 	movhi	r2,3
   305e4:	108a3b04 	addi	r2,r2,10476
   305e8:	11000017 	ldw	r4,0(r2)
   305ec:	20800f17 	ldw	r2,60(r4)
   305f0:	10000126 	beq	r2,zero,305f8 <exit+0x30>
   305f4:	103ee83a 	callr	r2
   305f8:	8009883a 	mov	r4,r16
   305fc:	00309140 	call	30914 <_exit>

00030600 <memcmp>:
   30600:	01c000c4 	movi	r7,3
   30604:	3980192e 	bgeu	r7,r6,3066c <memcmp+0x6c>
   30608:	2144b03a 	or	r2,r4,r5
   3060c:	11c4703a 	and	r2,r2,r7
   30610:	10000f26 	beq	r2,zero,30650 <memcmp+0x50>
   30614:	20800003 	ldbu	r2,0(r4)
   30618:	28c00003 	ldbu	r3,0(r5)
   3061c:	10c0151e 	bne	r2,r3,30674 <memcmp+0x74>
   30620:	31bfff84 	addi	r6,r6,-2
   30624:	01ffffc4 	movi	r7,-1
   30628:	00000406 	br	3063c <memcmp+0x3c>
   3062c:	20800003 	ldbu	r2,0(r4)
   30630:	28c00003 	ldbu	r3,0(r5)
   30634:	31bfffc4 	addi	r6,r6,-1
   30638:	10c00e1e 	bne	r2,r3,30674 <memcmp+0x74>
   3063c:	21000044 	addi	r4,r4,1
   30640:	29400044 	addi	r5,r5,1
   30644:	31fff91e 	bne	r6,r7,3062c <__alt_data_end+0xffff062c>
   30648:	0005883a 	mov	r2,zero
   3064c:	f800283a 	ret
   30650:	20c00017 	ldw	r3,0(r4)
   30654:	28800017 	ldw	r2,0(r5)
   30658:	18bfee1e 	bne	r3,r2,30614 <__alt_data_end+0xffff0614>
   3065c:	31bfff04 	addi	r6,r6,-4
   30660:	21000104 	addi	r4,r4,4
   30664:	29400104 	addi	r5,r5,4
   30668:	39bff936 	bltu	r7,r6,30650 <__alt_data_end+0xffff0650>
   3066c:	303fe91e 	bne	r6,zero,30614 <__alt_data_end+0xffff0614>
   30670:	003ff506 	br	30648 <__alt_data_end+0xffff0648>
   30674:	10c5c83a 	sub	r2,r2,r3
   30678:	f800283a 	ret

0003067c <__register_exitproc>:
   3067c:	defffa04 	addi	sp,sp,-24
   30680:	dc000315 	stw	r16,12(sp)
   30684:	040000f4 	movhi	r16,3
   30688:	840a3b04 	addi	r16,r16,10476
   3068c:	80c00017 	ldw	r3,0(r16)
   30690:	dc400415 	stw	r17,16(sp)
   30694:	dfc00515 	stw	ra,20(sp)
   30698:	18805217 	ldw	r2,328(r3)
   3069c:	2023883a 	mov	r17,r4
   306a0:	10003726 	beq	r2,zero,30780 <__register_exitproc+0x104>
   306a4:	10c00117 	ldw	r3,4(r2)
   306a8:	010007c4 	movi	r4,31
   306ac:	20c00e16 	blt	r4,r3,306e8 <__register_exitproc+0x6c>
   306b0:	1a000044 	addi	r8,r3,1
   306b4:	8800221e 	bne	r17,zero,30740 <__register_exitproc+0xc4>
   306b8:	18c00084 	addi	r3,r3,2
   306bc:	18c7883a 	add	r3,r3,r3
   306c0:	18c7883a 	add	r3,r3,r3
   306c4:	12000115 	stw	r8,4(r2)
   306c8:	10c7883a 	add	r3,r2,r3
   306cc:	19400015 	stw	r5,0(r3)
   306d0:	0005883a 	mov	r2,zero
   306d4:	dfc00517 	ldw	ra,20(sp)
   306d8:	dc400417 	ldw	r17,16(sp)
   306dc:	dc000317 	ldw	r16,12(sp)
   306e0:	dec00604 	addi	sp,sp,24
   306e4:	f800283a 	ret
   306e8:	00800034 	movhi	r2,0
   306ec:	10800004 	addi	r2,r2,0
   306f0:	10002626 	beq	r2,zero,3078c <__register_exitproc+0x110>
   306f4:	01006404 	movi	r4,400
   306f8:	d9400015 	stw	r5,0(sp)
   306fc:	d9800115 	stw	r6,4(sp)
   30700:	d9c00215 	stw	r7,8(sp)
   30704:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>
   30708:	d9400017 	ldw	r5,0(sp)
   3070c:	d9800117 	ldw	r6,4(sp)
   30710:	d9c00217 	ldw	r7,8(sp)
   30714:	10001d26 	beq	r2,zero,3078c <__register_exitproc+0x110>
   30718:	81000017 	ldw	r4,0(r16)
   3071c:	10000115 	stw	zero,4(r2)
   30720:	02000044 	movi	r8,1
   30724:	22405217 	ldw	r9,328(r4)
   30728:	0007883a 	mov	r3,zero
   3072c:	12400015 	stw	r9,0(r2)
   30730:	20805215 	stw	r2,328(r4)
   30734:	10006215 	stw	zero,392(r2)
   30738:	10006315 	stw	zero,396(r2)
   3073c:	883fde26 	beq	r17,zero,306b8 <__alt_data_end+0xffff06b8>
   30740:	18c9883a 	add	r4,r3,r3
   30744:	2109883a 	add	r4,r4,r4
   30748:	1109883a 	add	r4,r2,r4
   3074c:	21802215 	stw	r6,136(r4)
   30750:	01800044 	movi	r6,1
   30754:	12406217 	ldw	r9,392(r2)
   30758:	30cc983a 	sll	r6,r6,r3
   3075c:	4992b03a 	or	r9,r9,r6
   30760:	12406215 	stw	r9,392(r2)
   30764:	21c04215 	stw	r7,264(r4)
   30768:	01000084 	movi	r4,2
   3076c:	893fd21e 	bne	r17,r4,306b8 <__alt_data_end+0xffff06b8>
   30770:	11006317 	ldw	r4,396(r2)
   30774:	218cb03a 	or	r6,r4,r6
   30778:	11806315 	stw	r6,396(r2)
   3077c:	003fce06 	br	306b8 <__alt_data_end+0xffff06b8>
   30780:	18805304 	addi	r2,r3,332
   30784:	18805215 	stw	r2,328(r3)
   30788:	003fc606 	br	306a4 <__alt_data_end+0xffff06a4>
   3078c:	00bfffc4 	movi	r2,-1
   30790:	003fd006 	br	306d4 <__alt_data_end+0xffff06d4>

00030794 <__call_exitprocs>:
   30794:	defff504 	addi	sp,sp,-44
   30798:	df000915 	stw	fp,36(sp)
   3079c:	dd400615 	stw	r21,24(sp)
   307a0:	dc800315 	stw	r18,12(sp)
   307a4:	dfc00a15 	stw	ra,40(sp)
   307a8:	ddc00815 	stw	r23,32(sp)
   307ac:	dd800715 	stw	r22,28(sp)
   307b0:	dd000515 	stw	r20,20(sp)
   307b4:	dcc00415 	stw	r19,16(sp)
   307b8:	dc400215 	stw	r17,8(sp)
   307bc:	dc000115 	stw	r16,4(sp)
   307c0:	d9000015 	stw	r4,0(sp)
   307c4:	2839883a 	mov	fp,r5
   307c8:	04800044 	movi	r18,1
   307cc:	057fffc4 	movi	r21,-1
   307d0:	008000f4 	movhi	r2,3
   307d4:	108a3b04 	addi	r2,r2,10476
   307d8:	12000017 	ldw	r8,0(r2)
   307dc:	45005217 	ldw	r20,328(r8)
   307e0:	44c05204 	addi	r19,r8,328
   307e4:	a0001c26 	beq	r20,zero,30858 <__call_exitprocs+0xc4>
   307e8:	a0800117 	ldw	r2,4(r20)
   307ec:	15ffffc4 	addi	r23,r2,-1
   307f0:	b8000d16 	blt	r23,zero,30828 <__call_exitprocs+0x94>
   307f4:	14000044 	addi	r16,r2,1
   307f8:	8421883a 	add	r16,r16,r16
   307fc:	8421883a 	add	r16,r16,r16
   30800:	84402004 	addi	r17,r16,128
   30804:	a463883a 	add	r17,r20,r17
   30808:	a421883a 	add	r16,r20,r16
   3080c:	e0001e26 	beq	fp,zero,30888 <__call_exitprocs+0xf4>
   30810:	80804017 	ldw	r2,256(r16)
   30814:	e0801c26 	beq	fp,r2,30888 <__call_exitprocs+0xf4>
   30818:	bdffffc4 	addi	r23,r23,-1
   3081c:	843fff04 	addi	r16,r16,-4
   30820:	8c7fff04 	addi	r17,r17,-4
   30824:	bd7ff91e 	bne	r23,r21,3080c <__alt_data_end+0xffff080c>
   30828:	00800034 	movhi	r2,0
   3082c:	10800004 	addi	r2,r2,0
   30830:	10000926 	beq	r2,zero,30858 <__call_exitprocs+0xc4>
   30834:	a0800117 	ldw	r2,4(r20)
   30838:	1000301e 	bne	r2,zero,308fc <__call_exitprocs+0x168>
   3083c:	a0800017 	ldw	r2,0(r20)
   30840:	10003226 	beq	r2,zero,3090c <__call_exitprocs+0x178>
   30844:	a009883a 	mov	r4,r20
   30848:	98800015 	stw	r2,0(r19)
   3084c:	00000000 	call	0 <__alt_mem_onchip_memory_nios2_FFT-0x20000>
   30850:	9d000017 	ldw	r20,0(r19)
   30854:	a03fe41e 	bne	r20,zero,307e8 <__alt_data_end+0xffff07e8>
   30858:	dfc00a17 	ldw	ra,40(sp)
   3085c:	df000917 	ldw	fp,36(sp)
   30860:	ddc00817 	ldw	r23,32(sp)
   30864:	dd800717 	ldw	r22,28(sp)
   30868:	dd400617 	ldw	r21,24(sp)
   3086c:	dd000517 	ldw	r20,20(sp)
   30870:	dcc00417 	ldw	r19,16(sp)
   30874:	dc800317 	ldw	r18,12(sp)
   30878:	dc400217 	ldw	r17,8(sp)
   3087c:	dc000117 	ldw	r16,4(sp)
   30880:	dec00b04 	addi	sp,sp,44
   30884:	f800283a 	ret
   30888:	a0800117 	ldw	r2,4(r20)
   3088c:	80c00017 	ldw	r3,0(r16)
   30890:	10bfffc4 	addi	r2,r2,-1
   30894:	15c01426 	beq	r2,r23,308e8 <__call_exitprocs+0x154>
   30898:	80000015 	stw	zero,0(r16)
   3089c:	183fde26 	beq	r3,zero,30818 <__alt_data_end+0xffff0818>
   308a0:	95c8983a 	sll	r4,r18,r23
   308a4:	a0806217 	ldw	r2,392(r20)
   308a8:	a5800117 	ldw	r22,4(r20)
   308ac:	2084703a 	and	r2,r4,r2
   308b0:	10000b26 	beq	r2,zero,308e0 <__call_exitprocs+0x14c>
   308b4:	a0806317 	ldw	r2,396(r20)
   308b8:	2088703a 	and	r4,r4,r2
   308bc:	20000c1e 	bne	r4,zero,308f0 <__call_exitprocs+0x15c>
   308c0:	89400017 	ldw	r5,0(r17)
   308c4:	d9000017 	ldw	r4,0(sp)
   308c8:	183ee83a 	callr	r3
   308cc:	a0800117 	ldw	r2,4(r20)
   308d0:	15bfbf1e 	bne	r2,r22,307d0 <__alt_data_end+0xffff07d0>
   308d4:	98800017 	ldw	r2,0(r19)
   308d8:	153fcf26 	beq	r2,r20,30818 <__alt_data_end+0xffff0818>
   308dc:	003fbc06 	br	307d0 <__alt_data_end+0xffff07d0>
   308e0:	183ee83a 	callr	r3
   308e4:	003ff906 	br	308cc <__alt_data_end+0xffff08cc>
   308e8:	a5c00115 	stw	r23,4(r20)
   308ec:	003feb06 	br	3089c <__alt_data_end+0xffff089c>
   308f0:	89000017 	ldw	r4,0(r17)
   308f4:	183ee83a 	callr	r3
   308f8:	003ff406 	br	308cc <__alt_data_end+0xffff08cc>
   308fc:	a0800017 	ldw	r2,0(r20)
   30900:	a027883a 	mov	r19,r20
   30904:	1029883a 	mov	r20,r2
   30908:	003fb606 	br	307e4 <__alt_data_end+0xffff07e4>
   3090c:	0005883a 	mov	r2,zero
   30910:	003ffb06 	br	30900 <__alt_data_end+0xffff0900>

00030914 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   30914:	defffd04 	addi	sp,sp,-12
   30918:	df000215 	stw	fp,8(sp)
   3091c:	df000204 	addi	fp,sp,8
   30920:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   30924:	0001883a 	nop
   30928:	e0bfff17 	ldw	r2,-4(fp)
   3092c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   30930:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   30934:	10000226 	beq	r2,zero,30940 <_exit+0x2c>
    ALT_SIM_FAIL();
   30938:	002af070 	cmpltui	zero,zero,43969
   3093c:	00000106 	br	30944 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   30940:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   30944:	003fff06 	br	30944 <__alt_data_end+0xffff0944>
